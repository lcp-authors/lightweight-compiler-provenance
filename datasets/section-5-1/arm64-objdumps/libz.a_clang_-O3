In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libz.a_clang_-O3:

adler32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <adler32_z>:
   0:	ubfx	x8, x0, #16, #16
   4:	cmp	x2, #0x1
   8:	and	x9, x0, #0xffff
   c:	b.ne	50 <adler32_z+0x50>  // b.any
  10:	ldrb	w10, [x1]
  14:	mov	x11, #0xffffffffffff000f    	// #-65521
  18:	mov	w12, #0xfff0                	// #65520
  1c:	mov	x13, #0xffffffffffff0000    	// #-65536
  20:	add	x9, x9, x10
  24:	add	x10, x9, x11
  28:	cmp	x9, x12
  2c:	csel	x9, x10, x9, hi  // hi = pmore
  30:	add	x8, x9, x8
  34:	movk	x13, #0xf, lsl #16
  38:	lsl	x10, x8, #16
  3c:	add	x11, x10, x13
  40:	cmp	x8, x12
  44:	csel	x8, x11, x10, hi  // hi = pmore
  48:	orr	x0, x8, x9
  4c:	ret
  50:	cbz	x1, b0 <adler32_z+0xb0>
  54:	cmp	x2, #0x10
  58:	b.cs	b8 <adler32_z+0xb8>  // b.hs, b.nlast
  5c:	cbz	x2, 74 <adler32_z+0x74>
  60:	ldrb	w10, [x1], #1
  64:	subs	x2, x2, #0x1
  68:	add	x9, x9, x10
  6c:	add	x8, x9, x8
  70:	b.ne	60 <adler32_z+0x60>  // b.any
  74:	mov	x12, #0xc5cd                	// #50637
  78:	movk	x12, #0xd2f, lsl #16
  7c:	movk	x12, #0xe1, lsl #32
  80:	mov	x10, #0xffffffffffff000f    	// #-65521
  84:	mov	w11, #0xfff0                	// #65520
  88:	movk	x12, #0xf, lsl #48
  8c:	add	x10, x9, x10
  90:	cmp	x9, x11
  94:	umulh	x11, x8, x12
  98:	csel	x9, x10, x9, hi  // hi = pmore
  9c:	sub	x10, x8, x11
  a0:	add	x10, x11, x10, lsr #1
  a4:	lsr	x10, x10, #15
  a8:	mov	w11, #0xfff1                	// #65521
  ac:	b	334 <adler32_z+0x334>
  b0:	mov	w0, #0x1                   	// #1
  b4:	ret
  b8:	lsr	x10, x2, #4
  bc:	cmp	x10, #0x15b
  c0:	b.cc	1fc <adler32_z+0x1fc>  // b.lo, b.ul, b.last
  c4:	mov	x12, #0xc5cd                	// #50637
  c8:	movk	x12, #0xd2f, lsl #16
  cc:	movk	x12, #0xe1, lsl #32
  d0:	mov	x10, #0xffffffffffffea50    	// #-5552
  d4:	mov	w11, #0x15b0                	// #5552
  d8:	movk	x12, #0xf, lsl #48
  dc:	mov	w13, #0xfff1                	// #65521
  e0:	add	x2, x2, x10
  e4:	mov	w14, #0xfffffea5            	// #-347
  e8:	mov	x15, x1
  ec:	ldrb	w16, [x15]
  f0:	ldrb	w17, [x15, #1]
  f4:	adds	w14, w14, #0x1
  f8:	add	x9, x9, x16
  fc:	ldrb	w16, [x15, #2]
 100:	add	x8, x9, x8
 104:	add	x9, x9, x17
 108:	ldrb	w17, [x15, #3]
 10c:	add	x8, x8, x9
 110:	add	x9, x9, x16
 114:	ldrb	w16, [x15, #4]
 118:	add	x8, x8, x9
 11c:	add	x9, x9, x17
 120:	ldrb	w17, [x15, #5]
 124:	add	x8, x8, x9
 128:	add	x9, x9, x16
 12c:	ldrb	w16, [x15, #6]
 130:	add	x8, x8, x9
 134:	add	x9, x9, x17
 138:	ldrb	w17, [x15, #7]
 13c:	add	x8, x8, x9
 140:	add	x9, x9, x16
 144:	ldrb	w16, [x15, #8]
 148:	add	x8, x8, x9
 14c:	add	x9, x9, x17
 150:	ldrb	w17, [x15, #9]
 154:	add	x8, x8, x9
 158:	add	x9, x9, x16
 15c:	ldrb	w16, [x15, #10]
 160:	add	x8, x8, x9
 164:	add	x9, x9, x17
 168:	ldrb	w17, [x15, #11]
 16c:	add	x8, x8, x9
 170:	add	x9, x9, x16
 174:	ldrb	w16, [x15, #12]
 178:	add	x8, x8, x9
 17c:	add	x9, x9, x17
 180:	ldrb	w17, [x15, #13]
 184:	add	x8, x8, x9
 188:	add	x9, x9, x16
 18c:	ldrb	w16, [x15, #14]
 190:	add	x8, x8, x9
 194:	add	x9, x9, x17
 198:	ldrb	w17, [x15, #15]
 19c:	add	x8, x8, x9
 1a0:	add	x9, x9, x16
 1a4:	add	x8, x8, x9
 1a8:	add	x9, x9, x17
 1ac:	add	x8, x8, x9
 1b0:	add	x15, x15, #0x10
 1b4:	b.cc	ec <adler32_z+0xec>  // b.lo, b.ul, b.last
 1b8:	umulh	x14, x9, x12
 1bc:	umulh	x15, x8, x12
 1c0:	sub	x17, x9, x14
 1c4:	sub	x18, x8, x15
 1c8:	add	x14, x14, x17, lsr #1
 1cc:	add	x15, x15, x18, lsr #1
 1d0:	lsr	x16, x2, #4
 1d4:	lsr	x14, x14, #15
 1d8:	lsr	x15, x15, #15
 1dc:	add	x1, x1, x11
 1e0:	cmp	x16, #0x15a
 1e4:	msub	x9, x14, x13, x9
 1e8:	msub	x8, x15, x13, x8
 1ec:	b.hi	e0 <adler32_z+0xe0>  // b.pmore
 1f0:	cbz	x2, 338 <adler32_z+0x338>
 1f4:	cmp	x2, #0x10
 1f8:	b.cc	2e8 <adler32_z+0x2e8>  // b.lo, b.ul, b.last
 1fc:	sub	x11, x2, #0x10
 200:	and	x12, x11, #0xfffffffffffffff0
 204:	add	x10, x12, #0x10
 208:	mov	x13, x1
 20c:	ldrb	w14, [x13]
 210:	ldrb	w15, [x13, #1]
 214:	sub	x2, x2, #0x10
 218:	cmp	x2, #0xf
 21c:	add	x9, x9, x14
 220:	ldrb	w14, [x13, #2]
 224:	add	x8, x9, x8
 228:	add	x9, x9, x15
 22c:	ldrb	w15, [x13, #3]
 230:	add	x8, x8, x9
 234:	add	x9, x9, x14
 238:	ldrb	w14, [x13, #4]
 23c:	add	x8, x8, x9
 240:	add	x9, x9, x15
 244:	ldrb	w15, [x13, #5]
 248:	add	x8, x8, x9
 24c:	add	x9, x9, x14
 250:	ldrb	w14, [x13, #6]
 254:	add	x8, x8, x9
 258:	add	x9, x9, x15
 25c:	ldrb	w15, [x13, #7]
 260:	add	x8, x8, x9
 264:	add	x9, x9, x14
 268:	ldrb	w14, [x13, #8]
 26c:	add	x8, x8, x9
 270:	add	x9, x9, x15
 274:	ldrb	w15, [x13, #9]
 278:	add	x8, x8, x9
 27c:	add	x9, x9, x14
 280:	ldrb	w14, [x13, #10]
 284:	add	x8, x8, x9
 288:	add	x9, x9, x15
 28c:	ldrb	w15, [x13, #11]
 290:	add	x8, x8, x9
 294:	add	x9, x9, x14
 298:	ldrb	w14, [x13, #12]
 29c:	add	x8, x8, x9
 2a0:	add	x9, x9, x15
 2a4:	ldrb	w15, [x13, #13]
 2a8:	add	x8, x8, x9
 2ac:	add	x9, x9, x14
 2b0:	ldrb	w14, [x13, #14]
 2b4:	add	x8, x8, x9
 2b8:	add	x9, x9, x15
 2bc:	add	x8, x8, x9
 2c0:	add	x9, x9, x14
 2c4:	ldrb	w14, [x13, #15]
 2c8:	add	x8, x8, x9
 2cc:	add	x13, x13, #0x10
 2d0:	add	x9, x9, x14
 2d4:	add	x8, x8, x9
 2d8:	b.hi	20c <adler32_z+0x20c>  // b.pmore
 2dc:	subs	x2, x11, x12
 2e0:	b.eq	2fc <adler32_z+0x2fc>  // b.none
 2e4:	add	x1, x1, x10
 2e8:	ldrb	w10, [x1], #1
 2ec:	subs	x2, x2, #0x1
 2f0:	add	x9, x9, x10
 2f4:	add	x8, x9, x8
 2f8:	b.ne	2e8 <adler32_z+0x2e8>  // b.any
 2fc:	mov	x10, #0xc5cd                	// #50637
 300:	movk	x10, #0xd2f, lsl #16
 304:	movk	x10, #0xe1, lsl #32
 308:	movk	x10, #0xf, lsl #48
 30c:	umulh	x12, x9, x10
 310:	umulh	x10, x8, x10
 314:	sub	x13, x9, x12
 318:	sub	x14, x8, x10
 31c:	add	x12, x12, x13, lsr #1
 320:	mov	w11, #0xfff1                	// #65521
 324:	add	x10, x10, x14, lsr #1
 328:	lsr	x12, x12, #15
 32c:	lsr	x10, x10, #15
 330:	msub	x9, x12, x11, x9
 334:	msub	x8, x10, x11, x8
 338:	orr	x0, x9, x8, lsl #16
 33c:	ret

0000000000000340 <adler32>:
 340:	mov	w2, w2
 344:	b	0 <adler32_z>

0000000000000348 <adler32_combine>:
 348:	tbnz	x2, #63, 404 <adler32_combine+0xbc>
 34c:	mov	x8, #0xc5cd                	// #50637
 350:	movk	x8, #0xd2f, lsl #16
 354:	movk	x8, #0xe1, lsl #32
 358:	movk	x8, #0xf, lsl #48
 35c:	and	x10, x0, #0xffff
 360:	ubfx	x12, x0, #16, #16
 364:	lsr	x13, x1, #16
 368:	umulh	x8, x2, x8
 36c:	mov	w11, #0xfff0                	// #65520
 370:	add	x14, x10, w1, uxth
 374:	add	x12, x12, w13, uxth
 378:	sub	x13, x2, x8
 37c:	add	x8, x8, x13, lsr #1
 380:	add	x13, x14, x11
 384:	mov	w9, #0xfff1                	// #65521
 388:	sub	x14, x14, #0x1
 38c:	cmp	x13, x11
 390:	lsr	x8, x8, #15
 394:	csel	x13, x14, x13, hi  // hi = pmore
 398:	mov	w14, #0x8071                	// #32881
 39c:	msub	x8, x8, x9, x2
 3a0:	movk	w14, #0x8007, lsl #16
 3a4:	mul	x10, x8, x10
 3a8:	mul	x14, x10, x14
 3ac:	mov	x15, #0xffffffffffff000f    	// #-65521
 3b0:	lsr	x14, x14, #47
 3b4:	sub	x8, x12, x8
 3b8:	add	x12, x13, x15
 3bc:	cmp	x13, x11
 3c0:	msub	w10, w14, w9, w10
 3c4:	csel	x12, x12, x13, hi  // hi = pmore
 3c8:	mov	w13, #0xffe1                	// #65505
 3cc:	add	x8, x8, x10
 3d0:	movk	w13, #0x1, lsl #16
 3d4:	add	x9, x8, x9
 3d8:	add	x8, x8, x15
 3dc:	cmp	x9, x13
 3e0:	mov	x14, #0xffffffffffff0000    	// #-65536
 3e4:	csel	x8, x8, x9, hi  // hi = pmore
 3e8:	movk	x14, #0xf, lsl #16
 3ec:	lsl	x9, x8, #16
 3f0:	add	x10, x9, x14
 3f4:	cmp	x8, x11
 3f8:	csel	x8, x10, x9, hi  // hi = pmore
 3fc:	orr	x0, x8, x12
 400:	ret
 404:	mov	w0, #0xffffffff            	// #-1
 408:	ret

000000000000040c <adler32_combine64>:
 40c:	tbnz	x2, #63, 4c8 <adler32_combine64+0xbc>
 410:	mov	x8, #0xc5cd                	// #50637
 414:	movk	x8, #0xd2f, lsl #16
 418:	movk	x8, #0xe1, lsl #32
 41c:	movk	x8, #0xf, lsl #48
 420:	and	x10, x0, #0xffff
 424:	ubfx	x12, x0, #16, #16
 428:	lsr	x13, x1, #16
 42c:	umulh	x8, x2, x8
 430:	mov	w11, #0xfff0                	// #65520
 434:	add	x14, x10, w1, uxth
 438:	add	x12, x12, w13, uxth
 43c:	sub	x13, x2, x8
 440:	add	x8, x8, x13, lsr #1
 444:	add	x13, x14, x11
 448:	mov	w9, #0xfff1                	// #65521
 44c:	sub	x14, x14, #0x1
 450:	cmp	x13, x11
 454:	lsr	x8, x8, #15
 458:	csel	x13, x14, x13, hi  // hi = pmore
 45c:	mov	w14, #0x8071                	// #32881
 460:	msub	x8, x8, x9, x2
 464:	movk	w14, #0x8007, lsl #16
 468:	mul	x10, x8, x10
 46c:	mul	x14, x10, x14
 470:	mov	x15, #0xffffffffffff000f    	// #-65521
 474:	lsr	x14, x14, #47
 478:	sub	x8, x12, x8
 47c:	add	x12, x13, x15
 480:	cmp	x13, x11
 484:	msub	w10, w14, w9, w10
 488:	csel	x12, x12, x13, hi  // hi = pmore
 48c:	mov	w13, #0xffe1                	// #65505
 490:	add	x8, x8, x10
 494:	movk	w13, #0x1, lsl #16
 498:	add	x9, x8, x9
 49c:	add	x8, x8, x15
 4a0:	cmp	x9, x13
 4a4:	mov	x14, #0xffffffffffff0000    	// #-65536
 4a8:	csel	x8, x8, x9, hi  // hi = pmore
 4ac:	movk	x14, #0xf, lsl #16
 4b0:	lsl	x9, x8, #16
 4b4:	add	x10, x9, x14
 4b8:	cmp	x8, x11
 4bc:	csel	x8, x10, x9, hi  // hi = pmore
 4c0:	orr	x0, x8, x12
 4c4:	ret
 4c8:	mov	w0, #0xffffffff            	// #-1
 4cc:	ret

crc32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_crc_table>:
   0:	adrp	x0, 0 <get_crc_table>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <crc32_z>:
   c:	cbz	x1, 7c <crc32_z+0x70>
  10:	adrp	x8, 0 <get_crc_table>
  14:	mvn	w9, w0
  18:	add	x8, x8, #0x0
  1c:	cbz	x2, 44 <crc32_z+0x38>
  20:	and	x10, x1, #0x3
  24:	cbz	x10, 44 <crc32_z+0x38>
  28:	ldrb	w10, [x1], #1
  2c:	and	w11, w9, #0xff
  30:	subs	x2, x2, #0x1
  34:	eor	w10, w11, w10
  38:	ldr	w10, [x8, w10, uxtw #2]
  3c:	eor	w9, w10, w9, lsr #8
  40:	b.ne	20 <crc32_z+0x14>  // b.any
  44:	subs	x10, x2, #0x20
  48:	b.cs	84 <crc32_z+0x78>  // b.hs, b.nlast
  4c:	subs	x10, x2, #0x4
  50:	b.cs	24c <crc32_z+0x240>  // b.hs, b.nlast
  54:	cbz	x2, 74 <crc32_z+0x68>
  58:	ldrb	w10, [x1], #1
  5c:	and	w11, w9, #0xff
  60:	subs	x2, x2, #0x1
  64:	eor	w10, w11, w10
  68:	ldr	w10, [x8, w10, uxtw #2]
  6c:	eor	w9, w10, w9, lsr #8
  70:	b.ne	58 <crc32_z+0x4c>  // b.any
  74:	mvn	w0, w9
  78:	ret
  7c:	mov	x0, xzr
  80:	ret
  84:	and	x12, x10, #0xffffffffffffffe0
  88:	add	x11, x12, x1
  8c:	add	x11, x11, #0x20
  90:	ldp	w16, w17, [x1]
  94:	add	x13, x8, #0xc00
  98:	add	x14, x8, #0x800
  9c:	add	x15, x8, #0x400
  a0:	eor	w9, w16, w9
  a4:	and	w16, w9, #0xff
  a8:	ubfx	w18, w9, #8, #8
  ac:	ubfx	w0, w9, #16, #8
  b0:	ldr	w16, [x13, w16, uxtw #2]
  b4:	ldr	w18, [x14, w18, uxtw #2]
  b8:	lsr	w9, w9, #24
  bc:	ldr	w0, [x15, w0, uxtw #2]
  c0:	ldr	w9, [x8, w9, uxtw #2]
  c4:	eor	w16, w18, w16
  c8:	sub	x2, x2, #0x20
  cc:	eor	w16, w16, w0
  d0:	eor	w9, w16, w9
  d4:	eor	w9, w9, w17
  d8:	and	w16, w9, #0xff
  dc:	ubfx	w17, w9, #8, #8
  e0:	ldr	w16, [x13, w16, uxtw #2]
  e4:	ldr	w17, [x14, w17, uxtw #2]
  e8:	ubfx	w18, w9, #16, #8
  ec:	lsr	w9, w9, #24
  f0:	ldr	w18, [x15, w18, uxtw #2]
  f4:	ldr	w9, [x8, w9, uxtw #2]
  f8:	eor	w16, w17, w16
  fc:	ldp	w17, w0, [x1, #8]
 100:	eor	w16, w16, w18
 104:	eor	w9, w16, w9
 108:	cmp	x2, #0x1f
 10c:	eor	w9, w9, w17
 110:	and	w16, w9, #0xff
 114:	ubfx	w17, w9, #8, #8
 118:	ubfx	w18, w9, #16, #8
 11c:	ldr	w16, [x13, w16, uxtw #2]
 120:	ldr	w17, [x14, w17, uxtw #2]
 124:	lsr	w9, w9, #24
 128:	ldr	w18, [x15, w18, uxtw #2]
 12c:	ldr	w9, [x8, w9, uxtw #2]
 130:	eor	w16, w17, w16
 134:	eor	w16, w16, w18
 138:	eor	w9, w16, w9
 13c:	eor	w9, w9, w0
 140:	and	w16, w9, #0xff
 144:	ubfx	w17, w9, #8, #8
 148:	ldr	w16, [x13, w16, uxtw #2]
 14c:	ldr	w17, [x14, w17, uxtw #2]
 150:	ubfx	w18, w9, #16, #8
 154:	lsr	w9, w9, #24
 158:	ldr	w18, [x15, w18, uxtw #2]
 15c:	ldr	w9, [x8, w9, uxtw #2]
 160:	eor	w16, w17, w16
 164:	ldp	w17, w0, [x1, #16]
 168:	eor	w16, w16, w18
 16c:	eor	w9, w16, w9
 170:	eor	w9, w9, w17
 174:	and	w16, w9, #0xff
 178:	ubfx	w17, w9, #8, #8
 17c:	ubfx	w18, w9, #16, #8
 180:	ldr	w16, [x13, w16, uxtw #2]
 184:	ldr	w17, [x14, w17, uxtw #2]
 188:	lsr	w9, w9, #24
 18c:	ldr	w18, [x15, w18, uxtw #2]
 190:	ldr	w9, [x8, w9, uxtw #2]
 194:	eor	w16, w17, w16
 198:	eor	w16, w16, w18
 19c:	eor	w9, w16, w9
 1a0:	eor	w9, w9, w0
 1a4:	and	w16, w9, #0xff
 1a8:	ubfx	w17, w9, #8, #8
 1ac:	ldr	w16, [x13, w16, uxtw #2]
 1b0:	ldr	w17, [x14, w17, uxtw #2]
 1b4:	ubfx	w18, w9, #16, #8
 1b8:	lsr	w9, w9, #24
 1bc:	ldr	w18, [x15, w18, uxtw #2]
 1c0:	ldr	w9, [x8, w9, uxtw #2]
 1c4:	eor	w16, w17, w16
 1c8:	ldp	w17, w0, [x1, #24]
 1cc:	eor	w16, w16, w18
 1d0:	eor	w9, w16, w9
 1d4:	add	x1, x1, #0x20
 1d8:	eor	w9, w9, w17
 1dc:	and	w16, w9, #0xff
 1e0:	ubfx	w17, w9, #8, #8
 1e4:	ubfx	w18, w9, #16, #8
 1e8:	ldr	w16, [x13, w16, uxtw #2]
 1ec:	ldr	w17, [x14, w17, uxtw #2]
 1f0:	ldr	w18, [x15, w18, uxtw #2]
 1f4:	lsr	w9, w9, #24
 1f8:	ldr	w9, [x8, w9, uxtw #2]
 1fc:	eor	w16, w17, w16
 200:	eor	w16, w16, w18
 204:	eor	w9, w16, w9
 208:	eor	w9, w9, w0
 20c:	and	w16, w9, #0xff
 210:	ubfx	w17, w9, #8, #8
 214:	ldr	w13, [x13, w16, uxtw #2]
 218:	ubfx	w16, w9, #16, #8
 21c:	ldr	w14, [x14, w17, uxtw #2]
 220:	lsr	w9, w9, #24
 224:	ldr	w15, [x15, w16, uxtw #2]
 228:	ldr	w9, [x8, w9, uxtw #2]
 22c:	eor	w13, w14, w13
 230:	eor	w13, w13, w15
 234:	eor	w9, w13, w9
 238:	b.hi	90 <crc32_z+0x84>  // b.pmore
 23c:	sub	x2, x10, x12
 240:	mov	x1, x11
 244:	subs	x10, x2, #0x4
 248:	b.cc	54 <crc32_z+0x48>  // b.lo, b.ul, b.last
 24c:	lsr	x11, x10, #2
 250:	mov	x12, x1
 254:	ldr	w13, [x12], #4
 258:	sub	x2, x2, #0x4
 25c:	cmp	x2, #0x3
 260:	eor	w9, w13, w9
 264:	and	w13, w9, #0xff
 268:	ubfx	w14, w9, #8, #8
 26c:	add	x13, x8, w13, uxtw #2
 270:	add	x14, x8, w14, uxtw #2
 274:	ldr	w13, [x13, #3072]
 278:	ldr	w14, [x14, #2048]
 27c:	eor	w13, w14, w13
 280:	ubfx	w14, w9, #16, #8
 284:	add	x14, x8, w14, uxtw #2
 288:	ldr	w14, [x14, #1024]
 28c:	lsr	w9, w9, #24
 290:	ldr	w9, [x8, w9, uxtw #2]
 294:	eor	w13, w13, w14
 298:	eor	w9, w13, w9
 29c:	b.hi	254 <crc32_z+0x248>  // b.pmore
 2a0:	add	x11, x1, x11, lsl #2
 2a4:	add	x1, x11, #0x4
 2a8:	and	x2, x10, #0x3
 2ac:	cbnz	x2, 58 <crc32_z+0x4c>
 2b0:	b	74 <crc32_z+0x68>

00000000000002b4 <crc32>:
 2b4:	mov	w2, w2
 2b8:	b	c <crc32_z>

00000000000002bc <crc32_combine>:
 2bc:	b	2c0 <crc32_combine_>

00000000000002c0 <crc32_combine_>:
 2c0:	str	x29, [sp, #-16]!
 2c4:	sub	sp, sp, #0x200
 2c8:	cmp	x2, #0x1
 2cc:	b.lt	54c <crc32_combine_+0x28c>  // b.tstop
 2d0:	adrp	x9, 0 <get_crc_table>
 2d4:	adrp	x10, 0 <get_crc_table>
 2d8:	ldr	q0, [x9]
 2dc:	ldr	q1, [x10]
 2e0:	adrp	x11, 0 <get_crc_table>
 2e4:	adrp	x9, 0 <get_crc_table>
 2e8:	ldr	q2, [x11]
 2ec:	adrp	x11, 0 <get_crc_table>
 2f0:	ldr	q3, [x9]
 2f4:	adrp	x9, 0 <get_crc_table>
 2f8:	ldr	q5, [x11]
 2fc:	adrp	x11, 0 <get_crc_table>
 300:	ldr	q6, [x9]
 304:	adrp	x9, 0 <get_crc_table>
 308:	adrp	x10, 0 <get_crc_table>
 30c:	ldr	q16, [x11]
 310:	stp	q0, q1, [sp]
 314:	ldr	q0, [x9]
 318:	ldr	q4, [x10]
 31c:	adrp	x10, 0 <get_crc_table>
 320:	ldr	q7, [x10]
 324:	adrp	x10, 0 <get_crc_table>
 328:	adrp	x11, 0 <get_crc_table>
 32c:	adrp	x9, 0 <get_crc_table>
 330:	ldr	q1, [x10]
 334:	adrp	x10, 0 <get_crc_table>
 338:	stp	q2, q3, [sp, #32]
 33c:	ldr	q2, [x11]
 340:	ldr	q3, [x9]
 344:	stp	q16, q0, [sp, #128]
 348:	ldr	q0, [x10]
 34c:	adrp	x11, 0 <get_crc_table>
 350:	adrp	x9, 0 <get_crc_table>
 354:	stp	q1, q2, [sp, #160]
 358:	ldr	q1, [x11]
 35c:	stp	q3, q0, [sp, #192]
 360:	ldr	q0, [x9]
 364:	mov	w11, #0x8320                	// #33568
 368:	mov	x8, xzr
 36c:	movk	w11, #0xedb8, lsl #16
 370:	add	x9, sp, #0x100
 374:	mov	x10, sp
 378:	stp	q4, q5, [sp, #64]
 37c:	stp	q6, q7, [sp, #96]
 380:	stp	q1, q0, [sp, #224]
 384:	mov	x12, xzr
 388:	cbz	x11, 3b0 <crc32_combine_+0xf0>
 38c:	mov	x13, sp
 390:	b	3a0 <crc32_combine_+0xe0>
 394:	lsr	x11, x11, #1
 398:	add	x13, x13, #0x8
 39c:	cbz	x11, 3b0 <crc32_combine_+0xf0>
 3a0:	tbz	w11, #0, 394 <crc32_combine_+0xd4>
 3a4:	ldr	x14, [x13]
 3a8:	eor	x12, x14, x12
 3ac:	b	394 <crc32_combine_+0xd4>
 3b0:	str	x12, [x9, x8, lsl #3]
 3b4:	add	x8, x8, #0x1
 3b8:	cmp	x8, #0x20
 3bc:	b.eq	3d0 <crc32_combine_+0x110>  // b.none
 3c0:	ldr	x11, [x10, x8, lsl #3]
 3c4:	mov	x12, xzr
 3c8:	cbnz	x11, 38c <crc32_combine_+0xcc>
 3cc:	b	3b0 <crc32_combine_+0xf0>
 3d0:	mov	x8, xzr
 3d4:	add	x9, sp, #0x100
 3d8:	mov	x10, sp
 3dc:	b	3f4 <crc32_combine_+0x134>
 3e0:	mov	x11, xzr
 3e4:	str	x11, [x10, x8, lsl #3]
 3e8:	add	x8, x8, #0x1
 3ec:	cmp	x8, #0x20
 3f0:	b.eq	424 <crc32_combine_+0x164>  // b.none
 3f4:	ldr	x12, [x9, x8, lsl #3]
 3f8:	cbz	x12, 3e0 <crc32_combine_+0x120>
 3fc:	mov	x11, xzr
 400:	add	x13, sp, #0x100
 404:	b	414 <crc32_combine_+0x154>
 408:	lsr	x12, x12, #1
 40c:	add	x13, x13, #0x8
 410:	cbz	x12, 3e4 <crc32_combine_+0x124>
 414:	tbz	w12, #0, 408 <crc32_combine_+0x148>
 418:	ldr	x14, [x13]
 41c:	eor	x11, x14, x11
 420:	b	408 <crc32_combine_+0x148>
 424:	mov	x8, sp
 428:	add	x9, sp, #0x100
 42c:	b	43c <crc32_combine_+0x17c>
 430:	mov	x0, x10
 434:	asr	x2, x2, #2
 438:	cbz	x2, 548 <crc32_combine_+0x288>
 43c:	mov	x10, xzr
 440:	b	458 <crc32_combine_+0x198>
 444:	mov	x11, xzr
 448:	str	x11, [x9, x10, lsl #3]
 44c:	add	x10, x10, #0x1
 450:	cmp	x10, #0x20
 454:	b.eq	488 <crc32_combine_+0x1c8>  // b.none
 458:	ldr	x12, [x8, x10, lsl #3]
 45c:	cbz	x12, 444 <crc32_combine_+0x184>
 460:	mov	x11, xzr
 464:	mov	x13, sp
 468:	b	478 <crc32_combine_+0x1b8>
 46c:	lsr	x12, x12, #1
 470:	add	x13, x13, #0x8
 474:	cbz	x12, 448 <crc32_combine_+0x188>
 478:	tbz	w12, #0, 46c <crc32_combine_+0x1ac>
 47c:	ldr	x14, [x13]
 480:	eor	x11, x14, x11
 484:	b	46c <crc32_combine_+0x1ac>
 488:	tbnz	w2, #0, 494 <crc32_combine_+0x1d4>
 48c:	mov	x10, x0
 490:	b	49c <crc32_combine_+0x1dc>
 494:	mov	x10, xzr
 498:	cbnz	x0, 520 <crc32_combine_+0x260>
 49c:	cmp	x2, #0x2
 4a0:	b.cc	544 <crc32_combine_+0x284>  // b.lo, b.ul, b.last
 4a4:	mov	x11, xzr
 4a8:	b	4c0 <crc32_combine_+0x200>
 4ac:	mov	x12, xzr
 4b0:	str	x12, [x8, x11, lsl #3]
 4b4:	add	x11, x11, #0x1
 4b8:	cmp	x11, #0x20
 4bc:	b.eq	4f0 <crc32_combine_+0x230>  // b.none
 4c0:	ldr	x13, [x9, x11, lsl #3]
 4c4:	cbz	x13, 4ac <crc32_combine_+0x1ec>
 4c8:	mov	x12, xzr
 4cc:	add	x14, sp, #0x100
 4d0:	b	4e0 <crc32_combine_+0x220>
 4d4:	lsr	x13, x13, #1
 4d8:	add	x14, x14, #0x8
 4dc:	cbz	x13, 4b0 <crc32_combine_+0x1f0>
 4e0:	tbz	w13, #0, 4d4 <crc32_combine_+0x214>
 4e4:	ldr	x15, [x14]
 4e8:	eor	x12, x15, x12
 4ec:	b	4d4 <crc32_combine_+0x214>
 4f0:	tbz	w2, #1, 430 <crc32_combine_+0x170>
 4f4:	mov	x0, xzr
 4f8:	cbz	x10, 434 <crc32_combine_+0x174>
 4fc:	mov	x11, sp
 500:	b	510 <crc32_combine_+0x250>
 504:	lsr	x10, x10, #1
 508:	add	x11, x11, #0x8
 50c:	cbz	x10, 434 <crc32_combine_+0x174>
 510:	tbz	w10, #0, 504 <crc32_combine_+0x244>
 514:	ldr	x12, [x11]
 518:	eor	x0, x12, x0
 51c:	b	504 <crc32_combine_+0x244>
 520:	add	x11, sp, #0x100
 524:	b	534 <crc32_combine_+0x274>
 528:	lsr	x0, x0, #1
 52c:	add	x11, x11, #0x8
 530:	cbz	x0, 49c <crc32_combine_+0x1dc>
 534:	tbz	w0, #0, 528 <crc32_combine_+0x268>
 538:	ldr	x12, [x11]
 53c:	eor	x10, x12, x10
 540:	b	528 <crc32_combine_+0x268>
 544:	mov	x0, x10
 548:	eor	x0, x0, x1
 54c:	add	sp, sp, #0x200
 550:	ldr	x29, [sp], #16
 554:	ret

0000000000000558 <crc32_combine64>:
 558:	b	2c0 <crc32_combine_>

deflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <deflateInit_>:
       0:	mov	w7, w3
       4:	mov	x6, x2
       8:	mov	w2, #0x8                   	// #8
       c:	mov	w3, #0xf                   	// #15
      10:	mov	w4, #0x8                   	// #8
      14:	mov	w5, wzr
      18:	b	1c <deflateInit2_>

000000000000001c <deflateInit2_>:
      1c:	stp	x29, x30, [sp, #-80]!
      20:	stp	x26, x25, [sp, #16]
      24:	stp	x24, x23, [sp, #32]
      28:	stp	x22, x21, [sp, #48]
      2c:	stp	x20, x19, [sp, #64]
      30:	mov	x29, sp
      34:	cbz	x6, a8 <deflateInit2_+0x8c>
      38:	mov	x19, x0
      3c:	cmp	w7, #0x70
      40:	mov	w0, #0xfffffffa            	// #-6
      44:	b.ne	310 <deflateInit2_+0x2f4>  // b.any
      48:	ldrb	w8, [x6]
      4c:	cmp	w8, #0x31
      50:	b.ne	310 <deflateInit2_+0x2f4>  // b.any
      54:	cbz	x19, 130 <deflateInit2_+0x114>
      58:	ldr	x8, [x19, #64]
      5c:	mov	w20, w5
      60:	mov	w21, w4
      64:	str	xzr, [x19, #48]
      68:	cbz	x8, b0 <deflateInit2_+0x94>
      6c:	ldr	x9, [x19, #72]
      70:	cbz	x9, c8 <deflateInit2_+0xac>
      74:	cmn	w1, #0x1
      78:	mov	w9, #0x6                   	// #6
      7c:	csel	w23, w9, w1, eq  // eq = none
      80:	tbnz	w3, #31, e4 <deflateInit2_+0xc8>
      84:	sub	w9, w3, #0x10
      88:	cmp	w3, #0xf
      8c:	mov	w10, #0x1                   	// #1
      90:	csel	w9, w9, w3, gt
      94:	cinc	w25, w10, gt
      98:	cmp	w20, #0x4
      9c:	mov	w0, #0xfffffffe            	// #-2
      a0:	b.ls	f8 <deflateInit2_+0xdc>  // b.plast
      a4:	b	310 <deflateInit2_+0x2f4>
      a8:	mov	w0, #0xfffffffa            	// #-6
      ac:	b	310 <deflateInit2_+0x2f4>
      b0:	adrp	x8, 0 <zcalloc>
      b4:	add	x8, x8, #0x0
      b8:	str	x8, [x19, #64]
      bc:	str	xzr, [x19, #80]
      c0:	ldr	x9, [x19, #72]
      c4:	cbnz	x9, 74 <deflateInit2_+0x58>
      c8:	adrp	x9, 0 <zcfree>
      cc:	add	x9, x9, #0x0
      d0:	str	x9, [x19, #72]
      d4:	cmn	w1, #0x1
      d8:	mov	w9, #0x6                   	// #6
      dc:	csel	w23, w9, w1, eq  // eq = none
      e0:	tbz	w3, #31, 84 <deflateInit2_+0x68>
      e4:	mov	w25, wzr
      e8:	neg	w9, w3
      ec:	cmp	w20, #0x4
      f0:	mov	w0, #0xfffffffe            	// #-2
      f4:	b.hi	310 <deflateInit2_+0x2f4>  // b.pmore
      f8:	cmp	w23, #0x9
      fc:	b.hi	310 <deflateInit2_+0x2f4>  // b.pmore
     100:	cmp	w2, #0x8
     104:	b.ne	310 <deflateInit2_+0x2f4>  // b.any
     108:	sub	w10, w21, #0x1
     10c:	cmp	w10, #0x8
     110:	b.hi	310 <deflateInit2_+0x2f4>  // b.pmore
     114:	and	w10, w9, #0xfffffff8
     118:	cmp	w10, #0x8
     11c:	b.ne	310 <deflateInit2_+0x2f4>  // b.any
     120:	cmp	w9, #0x8
     124:	b.ne	138 <deflateInit2_+0x11c>  // b.any
     128:	cmp	w25, #0x1
     12c:	b.eq	138 <deflateInit2_+0x11c>  // b.none
     130:	mov	w0, #0xfffffffe            	// #-2
     134:	b	310 <deflateInit2_+0x2f4>
     138:	ldr	x0, [x19, #80]
     13c:	cmp	w9, #0x8
     140:	mov	w10, #0x9                   	// #9
     144:	mov	w1, #0x1                   	// #1
     148:	mov	w2, #0x1740                	// #5952
     14c:	csel	w26, w10, w9, eq  // eq = none
     150:	mov	w24, #0x1                   	// #1
     154:	blr	x8
     158:	cbz	x0, 30c <deflateInit2_+0x2f0>
     15c:	mov	w8, #0x2a                  	// #42
     160:	lsl	w1, w24, w26
     164:	str	x0, [x19, #56]
     168:	str	w8, [x0, #8]
     16c:	sub	w8, w1, #0x1
     170:	add	w10, w21, #0x9
     174:	stp	w26, w8, [x0, #84]
     178:	mov	w8, #0xaaab                	// #43691
     17c:	add	w9, w21, #0x7
     180:	movk	w8, #0xaaaa, lsl #16
     184:	and	w10, w10, #0xff
     188:	umull	x8, w10, w8
     18c:	lsl	w10, w24, w9
     190:	stp	w10, w9, [x0, #132]
     194:	sub	w9, w10, #0x1
     198:	lsr	x8, x8, #33
     19c:	str	x19, [x0]
     1a0:	str	w25, [x0, #48]
     1a4:	str	xzr, [x0, #56]
     1a8:	str	w1, [x0, #80]
     1ac:	stp	w9, w8, [x0, #140]
     1b0:	mov	x22, x0
     1b4:	ldr	x8, [x19, #64]
     1b8:	ldr	x0, [x19, #80]
     1bc:	mov	w2, #0x2                   	// #2
     1c0:	blr	x8
     1c4:	str	x0, [x22, #96]
     1c8:	ldr	x8, [x19, #64]
     1cc:	ldr	x0, [x19, #80]
     1d0:	ldr	w1, [x22, #80]
     1d4:	mov	w2, #0x2                   	// #2
     1d8:	blr	x8
     1dc:	str	x0, [x22, #112]
     1e0:	ldr	x8, [x19, #64]
     1e4:	ldr	x0, [x19, #80]
     1e8:	ldr	w1, [x22, #132]
     1ec:	mov	w2, #0x2                   	// #2
     1f0:	blr	x8
     1f4:	add	w8, w21, #0x6
     1f8:	lsl	w1, w24, w8
     1fc:	str	x0, [x22, #120]
     200:	str	xzr, [x22, #5944]
     204:	str	w1, [x22, #5896]
     208:	ldr	x8, [x19, #64]
     20c:	ldr	x0, [x19, #80]
     210:	mov	w2, #0x4                   	// #4
     214:	blr	x8
     218:	ldr	w8, [x22, #5896]
     21c:	ldr	x9, [x22, #96]
     220:	lsl	x10, x8, #2
     224:	stp	x0, x10, [x22, #16]
     228:	cbz	x9, 2f0 <deflateInit2_+0x2d4>
     22c:	ldr	x9, [x22, #112]
     230:	cbz	x9, 2f0 <deflateInit2_+0x2d4>
     234:	cbz	x0, 2f0 <deflateInit2_+0x2d4>
     238:	ldr	x9, [x22, #120]
     23c:	cbz	x9, 2f0 <deflateInit2_+0x2d4>
     240:	and	w9, w8, #0xfffffffe
     244:	add	x8, x8, x8, lsl #1
     248:	mov	w10, #0x8                   	// #8
     24c:	add	x9, x0, x9
     250:	add	x8, x0, x8
     254:	mov	x0, x19
     258:	stp	w23, w20, [x22, #196]
     25c:	str	x9, [x22, #5904]
     260:	str	x8, [x22, #5888]
     264:	strb	w10, [x22, #72]
     268:	bl	b74 <deflateResetKeep>
     26c:	cbnz	w0, 310 <deflateInit2_+0x2f4>
     270:	ldr	x19, [x19, #56]
     274:	mov	w1, wzr
     278:	ldr	w9, [x19, #132]
     27c:	ldr	w8, [x19, #80]
     280:	ldr	x0, [x19, #120]
     284:	sub	w9, w9, #0x1
     288:	lsl	x8, x8, #1
     28c:	lsl	x2, x9, #1
     290:	str	x8, [x19, #104]
     294:	strh	wzr, [x0, x2]
     298:	bl	0 <memset>
     29c:	ldrsw	x8, [x19, #196]
     2a0:	adrp	x9, 0 <deflateInit_>
     2a4:	add	x9, x9, #0x0
     2a8:	adrp	x10, 0 <deflateInit_>
     2ac:	ldr	d0, [x10]
     2b0:	mov	w10, #0x2                   	// #2
     2b4:	add	x8, x9, x8, lsl #4
     2b8:	str	w10, [x19, #160]
     2bc:	ldrh	w9, [x8]
     2c0:	ldrh	w10, [x8, #4]
     2c4:	mov	w0, wzr
     2c8:	str	xzr, [x19, #152]
     2cc:	str	wzr, [x19, #5932]
     2d0:	stp	w9, w10, [x19, #204]
     2d4:	ldrh	w9, [x8, #2]
     2d8:	ldrh	w8, [x8, #6]
     2dc:	str	xzr, [x19, #168]
     2e0:	stur	d0, [x19, #180]
     2e4:	str	wzr, [x19, #128]
     2e8:	stp	w8, w9, [x19, #188]
     2ec:	b	310 <deflateInit2_+0x2f4>
     2f0:	adrp	x8, 0 <z_errmsg>
     2f4:	ldr	x8, [x8]
     2f8:	mov	w9, #0x29a                 	// #666
     2fc:	mov	x0, x19
     300:	str	w9, [x22, #8]
     304:	str	x8, [x19, #48]
     308:	bl	328 <deflateEnd>
     30c:	mov	w0, #0xfffffffc            	// #-4
     310:	ldp	x20, x19, [sp, #64]
     314:	ldp	x22, x21, [sp, #48]
     318:	ldp	x24, x23, [sp, #32]
     31c:	ldp	x26, x25, [sp, #16]
     320:	ldp	x29, x30, [sp], #80
     324:	ret

0000000000000328 <deflateEnd>:
     328:	stp	x29, x30, [sp, #-32]!
     32c:	stp	x20, x19, [sp, #16]
     330:	mov	x29, sp
     334:	cbz	x0, 360 <deflateEnd+0x38>
     338:	ldr	x8, [x0, #64]
     33c:	mov	x19, x0
     340:	cbz	x8, 360 <deflateEnd+0x38>
     344:	ldr	x9, [x19, #72]
     348:	cbz	x9, 360 <deflateEnd+0x38>
     34c:	ldr	x1, [x19, #56]
     350:	cbz	x1, 360 <deflateEnd+0x38>
     354:	ldr	x8, [x1]
     358:	cmp	x8, x19
     35c:	b.eq	370 <deflateEnd+0x48>  // b.none
     360:	mov	w0, #0xfffffffe            	// #-2
     364:	ldp	x20, x19, [sp, #16]
     368:	ldp	x29, x30, [sp], #32
     36c:	ret
     370:	ldr	w20, [x1, #8]
     374:	sub	w8, w20, #0x39
     378:	cmp	w8, #0x38
     37c:	b.hi	424 <deflateEnd+0xfc>  // b.pmore
     380:	mov	w10, #0x1                   	// #1
     384:	lsl	x8, x10, x8
     388:	mov	x10, #0x1001                	// #4097
     38c:	movk	x10, #0x1, lsl #16
     390:	movk	x10, #0x4004, lsl #32
     394:	movk	x10, #0x100, lsl #48
     398:	tst	x8, x10
     39c:	b.eq	424 <deflateEnd+0xfc>  // b.none
     3a0:	ldr	x8, [x1, #16]
     3a4:	cbz	x8, 3b8 <deflateEnd+0x90>
     3a8:	ldr	x0, [x19, #80]
     3ac:	mov	x1, x8
     3b0:	blr	x9
     3b4:	ldr	x1, [x19, #56]
     3b8:	ldr	x8, [x1, #120]
     3bc:	cbz	x8, 3d0 <deflateEnd+0xa8>
     3c0:	ldp	x9, x0, [x19, #72]
     3c4:	mov	x1, x8
     3c8:	blr	x9
     3cc:	ldr	x1, [x19, #56]
     3d0:	ldr	x8, [x1, #112]
     3d4:	cbz	x8, 3e8 <deflateEnd+0xc0>
     3d8:	ldp	x9, x0, [x19, #72]
     3dc:	mov	x1, x8
     3e0:	blr	x9
     3e4:	ldr	x1, [x19, #56]
     3e8:	ldr	x8, [x1, #96]
     3ec:	cbz	x8, 400 <deflateEnd+0xd8>
     3f0:	ldp	x9, x0, [x19, #72]
     3f4:	mov	x1, x8
     3f8:	blr	x9
     3fc:	ldr	x1, [x19, #56]
     400:	ldp	x8, x0, [x19, #72]
     404:	blr	x8
     408:	cmp	w20, #0x71
     40c:	mov	w8, #0xfffffffd            	// #-3
     410:	csel	w0, w8, wzr, eq  // eq = none
     414:	str	xzr, [x19, #56]
     418:	ldp	x20, x19, [sp, #16]
     41c:	ldp	x29, x30, [sp], #32
     420:	ret
     424:	cmp	w20, #0x29a
     428:	b.eq	3a0 <deflateEnd+0x78>  // b.none
     42c:	cmp	w20, #0x2a
     430:	b.ne	360 <deflateEnd+0x38>  // b.any
     434:	b	3a0 <deflateEnd+0x78>

0000000000000438 <deflateReset>:
     438:	stp	x29, x30, [sp, #-32]!
     43c:	stp	x20, x19, [sp, #16]
     440:	mov	x29, sp
     444:	mov	x20, x0
     448:	bl	b74 <deflateResetKeep>
     44c:	mov	w19, w0
     450:	cbz	w0, 464 <deflateReset+0x2c>
     454:	mov	w0, w19
     458:	ldp	x20, x19, [sp, #16]
     45c:	ldp	x29, x30, [sp], #32
     460:	ret
     464:	ldr	x20, [x20, #56]
     468:	mov	w1, wzr
     46c:	ldr	w9, [x20, #132]
     470:	ldr	w8, [x20, #80]
     474:	ldr	x0, [x20, #120]
     478:	sub	w9, w9, #0x1
     47c:	lsl	x8, x8, #1
     480:	lsl	x2, x9, #1
     484:	str	x8, [x20, #104]
     488:	strh	wzr, [x0, x2]
     48c:	bl	0 <memset>
     490:	ldrsw	x8, [x20, #196]
     494:	adrp	x9, 0 <deflateInit_>
     498:	add	x9, x9, #0x0
     49c:	adrp	x10, 0 <deflateInit_>
     4a0:	ldr	d0, [x10]
     4a4:	mov	w10, #0x2                   	// #2
     4a8:	add	x8, x9, x8, lsl #4
     4ac:	str	w10, [x20, #160]
     4b0:	ldrh	w9, [x8]
     4b4:	ldrh	w10, [x8, #4]
     4b8:	str	xzr, [x20, #152]
     4bc:	str	wzr, [x20, #5932]
     4c0:	str	xzr, [x20, #168]
     4c4:	stp	w9, w10, [x20, #204]
     4c8:	ldrh	w9, [x8, #2]
     4cc:	ldrh	w8, [x8, #6]
     4d0:	stur	d0, [x20, #180]
     4d4:	str	wzr, [x20, #128]
     4d8:	stp	w8, w9, [x20, #188]
     4dc:	mov	w0, w19
     4e0:	ldp	x20, x19, [sp, #16]
     4e4:	ldp	x29, x30, [sp], #32
     4e8:	ret

00000000000004ec <deflateSetDictionary>:
     4ec:	stp	x29, x30, [sp, #-80]!
     4f0:	str	x25, [sp, #16]
     4f4:	stp	x24, x23, [sp, #32]
     4f8:	stp	x22, x21, [sp, #48]
     4fc:	stp	x20, x19, [sp, #64]
     500:	mov	x29, sp
     504:	cbz	x0, 530 <deflateSetDictionary+0x44>
     508:	ldr	x8, [x0, #64]
     50c:	mov	x19, x0
     510:	cbz	x8, 530 <deflateSetDictionary+0x44>
     514:	ldr	x8, [x19, #72]
     518:	cbz	x8, 530 <deflateSetDictionary+0x44>
     51c:	ldr	x20, [x19, #56]
     520:	cbz	x20, 530 <deflateSetDictionary+0x44>
     524:	ldr	x8, [x20]
     528:	cmp	x8, x19
     52c:	b.eq	54c <deflateSetDictionary+0x60>  // b.none
     530:	mov	w0, #0xfffffffe            	// #-2
     534:	ldp	x20, x19, [sp, #64]
     538:	ldp	x22, x21, [sp, #48]
     53c:	ldp	x24, x23, [sp, #32]
     540:	ldr	x25, [sp, #16]
     544:	ldp	x29, x30, [sp], #80
     548:	ret
     54c:	ldr	w8, [x20, #8]
     550:	mov	w22, w2
     554:	mov	x21, x1
     558:	sub	w9, w8, #0x39
     55c:	cmp	w9, #0x38
     560:	b.hi	6ec <deflateSetDictionary+0x200>  // b.pmore
     564:	mov	w10, #0x1                   	// #1
     568:	lsl	x9, x10, x9
     56c:	mov	x10, #0x1001                	// #4097
     570:	movk	x10, #0x1, lsl #16
     574:	movk	x10, #0x4004, lsl #32
     578:	movk	x10, #0x100, lsl #48
     57c:	tst	x9, x10
     580:	b.eq	6ec <deflateSetDictionary+0x200>  // b.none
     584:	cbz	x21, 530 <deflateSetDictionary+0x44>
     588:	ldr	w23, [x20, #48]
     58c:	cmp	w23, #0x2
     590:	b.eq	530 <deflateSetDictionary+0x44>  // b.none
     594:	cmp	w8, #0x2a
     598:	b.eq	5a4 <deflateSetDictionary+0xb8>  // b.none
     59c:	cmp	w23, #0x1
     5a0:	b.eq	530 <deflateSetDictionary+0x44>  // b.none
     5a4:	ldr	w8, [x20, #180]
     5a8:	cbnz	w8, 530 <deflateSetDictionary+0x44>
     5ac:	cmp	w23, #0x1
     5b0:	b.ne	5c8 <deflateSetDictionary+0xdc>  // b.any
     5b4:	ldr	x0, [x19, #96]
     5b8:	mov	x1, x21
     5bc:	mov	w2, w22
     5c0:	bl	0 <adler32>
     5c4:	str	x0, [x19, #96]
     5c8:	ldr	w8, [x20, #80]
     5cc:	str	wzr, [x20, #48]
     5d0:	cmp	w8, w22
     5d4:	b.hi	614 <deflateSetDictionary+0x128>  // b.pmore
     5d8:	cbnz	w23, 608 <deflateSetDictionary+0x11c>
     5dc:	ldr	w8, [x20, #132]
     5e0:	ldr	x0, [x20, #120]
     5e4:	mov	w1, wzr
     5e8:	sub	w8, w8, #0x1
     5ec:	lsl	x2, x8, #1
     5f0:	strh	wzr, [x0, x2]
     5f4:	bl	0 <memset>
     5f8:	ldr	w8, [x20, #80]
     5fc:	str	wzr, [x20, #172]
     600:	str	xzr, [x20, #152]
     604:	str	wzr, [x20, #5932]
     608:	sub	w9, w22, w8
     60c:	add	x21, x21, x9
     610:	mov	w22, w8
     614:	ldr	w24, [x19, #8]
     618:	ldr	x25, [x19]
     61c:	mov	x0, x20
     620:	str	w22, [x19, #8]
     624:	str	x21, [x19]
     628:	bl	700 <fill_window>
     62c:	ldr	w9, [x20, #180]
     630:	ldr	w8, [x20, #172]
     634:	cmp	w9, #0x3
     638:	b.cc	6b4 <deflateSetDictionary+0x1c8>  // b.lo, b.ul, b.last
     63c:	mov	w21, #0x2                   	// #2
     640:	ldr	x10, [x20, #96]
     644:	ldp	w12, w11, [x20, #140]
     648:	ldp	x14, x13, [x20, #112]
     64c:	ldr	w15, [x20, #88]
     650:	ldr	w16, [x20, #128]
     654:	sub	w9, w9, #0x2
     658:	add	w17, w8, #0x2
     65c:	ldrb	w17, [x10, w17, uxtw]
     660:	lsl	w16, w16, w11
     664:	mov	w0, w8
     668:	and	x0, x15, x0
     66c:	eor	w16, w16, w17
     670:	and	x16, x16, x12
     674:	str	w16, [x20, #128]
     678:	lsl	x17, x16, #1
     67c:	ldrh	w18, [x13, x17]
     680:	subs	w9, w9, #0x1
     684:	strh	w18, [x14, x0, lsl #1]
     688:	strh	w8, [x13, x17]
     68c:	add	w8, w8, #0x1
     690:	b.ne	658 <deflateSetDictionary+0x16c>  // b.any
     694:	mov	x0, x20
     698:	str	w8, [x20, #172]
     69c:	str	w21, [x20, #180]
     6a0:	bl	700 <fill_window>
     6a4:	ldr	w9, [x20, #180]
     6a8:	ldr	w8, [x20, #172]
     6ac:	cmp	w9, #0x2
     6b0:	b.hi	640 <deflateSetDictionary+0x154>  // b.pmore
     6b4:	add	w8, w8, w9
     6b8:	str	w9, [x20, #5932]
     6bc:	adrp	x9, 0 <deflateInit_>
     6c0:	ldr	d0, [x9]
     6c4:	mov	w0, wzr
     6c8:	mov	w10, #0x2                   	// #2
     6cc:	str	x8, [x20, #152]
     6d0:	str	w10, [x20, #160]
     6d4:	stp	wzr, w8, [x20, #168]
     6d8:	stur	d0, [x20, #180]
     6dc:	str	x25, [x19]
     6e0:	str	w24, [x19, #8]
     6e4:	str	w23, [x20, #48]
     6e8:	b	534 <deflateSetDictionary+0x48>
     6ec:	cmp	w8, #0x29a
     6f0:	b.eq	584 <deflateSetDictionary+0x98>  // b.none
     6f4:	cmp	w8, #0x2a
     6f8:	b.ne	530 <deflateSetDictionary+0x44>  // b.any
     6fc:	b	584 <deflateSetDictionary+0x98>

0000000000000700 <fill_window>:
     700:	str	d8, [sp, #-80]!
     704:	stp	x29, x30, [sp, #8]
     708:	stp	x24, x23, [sp, #32]
     70c:	stp	x22, x21, [sp, #48]
     710:	stp	x20, x19, [sp, #64]
     714:	ldr	w23, [x0, #80]
     718:	ldr	w8, [x0, #180]
     71c:	mov	x19, x0
     720:	str	x25, [sp, #24]
     724:	sub	w24, w23, #0x106
     728:	dup	v8.2s, w23
     72c:	mov	w10, w23
     730:	mov	x29, sp
     734:	ldr	w11, [x19, #104]
     738:	ldr	w9, [x19, #172]
     73c:	add	w10, w24, w10
     740:	sub	w8, w11, w8
     744:	cmp	w9, w10
     748:	sub	w20, w8, w9
     74c:	b.cc	88c <fill_window+0x18c>  // b.lo, b.ul, b.last
     750:	ldr	x0, [x19, #96]
     754:	sub	w2, w23, w20
     758:	add	x1, x0, x23
     75c:	bl	0 <memcpy>
     760:	ldur	d0, [x19, #172]
     764:	ldr	x10, [x19, #152]
     768:	ldr	w9, [x19, #132]
     76c:	ldr	x11, [x19, #120]
     770:	ldr	w8, [x19, #80]
     774:	sub	v0.2s, v0.2s, v8.2s
     778:	sub	x12, x10, x23
     77c:	subs	w10, w9, #0x1
     780:	add	x13, x11, x9, lsl #1
     784:	stur	d0, [x19, #172]
     788:	str	x12, [x19, #152]
     78c:	b.eq	7e0 <fill_window+0xe0>  // b.none
     790:	add	x11, x10, #0x1
     794:	and	x12, x11, #0x1fffffffe
     798:	sub	x10, x13, x12, lsl #1
     79c:	sub	w9, w9, w12
     7a0:	sub	x13, x13, #0x2
     7a4:	mov	x14, x12
     7a8:	ldrh	w15, [x13]
     7ac:	ldurh	w16, [x13, #-2]
     7b0:	subs	w15, w15, w8
     7b4:	csel	w15, wzr, w15, cc  // cc = lo, ul, last
     7b8:	subs	w16, w16, w8
     7bc:	csel	w16, wzr, w16, cc  // cc = lo, ul, last
     7c0:	strh	w15, [x13]
     7c4:	subs	x14, x14, #0x2
     7c8:	sturh	w16, [x13, #-2]
     7cc:	sub	x13, x13, #0x4
     7d0:	b.ne	7a8 <fill_window+0xa8>  // b.any
     7d4:	cmp	x11, x12
     7d8:	b.ne	7e4 <fill_window+0xe4>  // b.any
     7dc:	b	800 <fill_window+0x100>
     7e0:	mov	x10, x13
     7e4:	sub	x10, x10, #0x2
     7e8:	ldrh	w11, [x10]
     7ec:	subs	w11, w11, w8
     7f0:	csel	w11, wzr, w11, cc  // cc = lo, ul, last
     7f4:	subs	w9, w9, #0x1
     7f8:	strh	w11, [x10], #-2
     7fc:	b.ne	7e8 <fill_window+0xe8>  // b.any
     800:	ldr	x10, [x19, #112]
     804:	subs	w9, w8, #0x1
     808:	add	x13, x10, x8, lsl #1
     80c:	b.eq	860 <fill_window+0x160>  // b.none
     810:	add	x11, x9, #0x1
     814:	and	x12, x11, #0x1fffffffe
     818:	sub	x10, x13, x12, lsl #1
     81c:	sub	w9, w8, w12
     820:	sub	x13, x13, #0x2
     824:	mov	x14, x12
     828:	ldrh	w15, [x13]
     82c:	ldurh	w16, [x13, #-2]
     830:	subs	w15, w15, w8
     834:	csel	w15, wzr, w15, cc  // cc = lo, ul, last
     838:	subs	w16, w16, w8
     83c:	csel	w16, wzr, w16, cc  // cc = lo, ul, last
     840:	strh	w15, [x13]
     844:	subs	x14, x14, #0x2
     848:	sturh	w16, [x13, #-2]
     84c:	sub	x13, x13, #0x4
     850:	b.ne	828 <fill_window+0x128>  // b.any
     854:	cmp	x11, x12
     858:	b.ne	868 <fill_window+0x168>  // b.any
     85c:	b	884 <fill_window+0x184>
     860:	mov	x10, x13
     864:	mov	w9, w8
     868:	sub	x10, x10, #0x2
     86c:	ldrh	w11, [x10]
     870:	subs	w11, w11, w8
     874:	csel	w11, wzr, w11, cc  // cc = lo, ul, last
     878:	subs	w9, w9, #0x1
     87c:	strh	w11, [x10], #-2
     880:	b.ne	86c <fill_window+0x16c>  // b.any
     884:	add	w20, w20, w23
     888:	fmov	w9, s0
     88c:	ldr	x25, [x19]
     890:	ldr	w10, [x25, #8]
     894:	cbz	w10, 9e4 <fill_window+0x2e4>
     898:	ldr	w8, [x19, #180]
     89c:	cmp	w10, w20
     8a0:	csel	w20, w20, w10, hi  // hi = pmore
     8a4:	cbz	w20, 92c <fill_window+0x22c>
     8a8:	ldr	x11, [x19, #96]
     8ac:	ldr	x1, [x25]
     8b0:	mov	w21, w20
     8b4:	sub	w10, w10, w20
     8b8:	add	x9, x11, w9, uxtw
     8bc:	add	x22, x9, x8
     8c0:	mov	x0, x22
     8c4:	mov	x2, x21
     8c8:	str	w10, [x25, #8]
     8cc:	bl	0 <memcpy>
     8d0:	ldr	x8, [x25, #56]
     8d4:	ldr	w8, [x8, #48]
     8d8:	cmp	w8, #0x2
     8dc:	b.eq	8fc <fill_window+0x1fc>  // b.none
     8e0:	cmp	w8, #0x1
     8e4:	b.ne	910 <fill_window+0x210>  // b.any
     8e8:	ldr	x0, [x25, #96]
     8ec:	mov	x1, x22
     8f0:	mov	w2, w20
     8f4:	bl	0 <adler32>
     8f8:	b	90c <fill_window+0x20c>
     8fc:	ldr	x0, [x25, #96]
     900:	mov	x1, x22
     904:	mov	w2, w20
     908:	bl	0 <crc32>
     90c:	str	x0, [x25, #96]
     910:	ldr	x8, [x25]
     914:	ldr	x9, [x25, #16]
     918:	add	x8, x8, x21
     91c:	add	x9, x9, x21
     920:	str	x8, [x25]
     924:	str	x9, [x25, #16]
     928:	ldr	w8, [x19, #180]
     92c:	ldr	w9, [x19, #5932]
     930:	add	w8, w8, w20
     934:	str	w8, [x19, #180]
     938:	add	w10, w9, w8
     93c:	cmp	w10, #0x3
     940:	b.cc	9c8 <fill_window+0x2c8>  // b.lo, b.ul, b.last
     944:	ldr	w11, [x19, #172]
     948:	ldr	x10, [x19, #96]
     94c:	sub	w11, w11, w9
     950:	ldrb	w14, [x10, w11, uxtw]
     954:	add	w13, w11, #0x1
     958:	str	w14, [x19, #128]
     95c:	ldrb	w15, [x10, w13, uxtw]
     960:	ldp	w13, w12, [x19, #140]
     964:	lsl	w14, w14, w12
     968:	eor	w14, w14, w15
     96c:	and	w14, w14, w13
     970:	str	w14, [x19, #128]
     974:	cbz	w9, 9c8 <fill_window+0x2c8>
     978:	add	w15, w11, #0x2
     97c:	ldrb	w15, [x10, w15, uxtw]
     980:	lsl	w14, w14, w12
     984:	ldp	x17, x16, [x19, #112]
     988:	ldr	w18, [x19, #88]
     98c:	eor	w14, w14, w15
     990:	and	x14, x14, x13
     994:	str	w14, [x19, #128]
     998:	lsl	x15, x14, #1
     99c:	sub	w9, w9, #0x1
     9a0:	ldrh	w1, [x16, x15]
     9a4:	add	w0, w8, w9
     9a8:	cmp	w0, #0x2
     9ac:	mov	w0, w11
     9b0:	and	x18, x18, x0
     9b4:	strh	w1, [x17, x18, lsl #1]
     9b8:	strh	w11, [x16, x15]
     9bc:	add	w11, w11, #0x1
     9c0:	str	w9, [x19, #5932]
     9c4:	b.hi	974 <fill_window+0x274>  // b.pmore
     9c8:	cmp	w8, #0x105
     9cc:	b.hi	9e4 <fill_window+0x2e4>  // b.pmore
     9d0:	ldr	x9, [x19]
     9d4:	ldr	w9, [x9, #8]
     9d8:	cbz	w9, 9e4 <fill_window+0x2e4>
     9dc:	ldr	w10, [x19, #80]
     9e0:	b	734 <fill_window+0x34>
     9e4:	ldr	x8, [x19, #5944]
     9e8:	ldr	x10, [x19, #104]
     9ec:	subs	x9, x10, x8
     9f0:	b.ls	a68 <fill_window+0x368>  // b.plast
     9f4:	ldr	w11, [x19, #172]
     9f8:	ldr	w12, [x19, #180]
     9fc:	add	x21, x12, x11
     a00:	cmp	x8, x21
     a04:	b.cs	a34 <fill_window+0x334>  // b.hs, b.nlast
     a08:	ldr	x9, [x19, #96]
     a0c:	sub	x8, x10, x21
     a10:	cmp	x8, #0x102
     a14:	mov	w10, #0x102                 	// #258
     a18:	csel	x20, x8, x10, cc  // cc = lo, ul, last
     a1c:	add	x0, x9, x21
     a20:	mov	w1, wzr
     a24:	mov	x2, x20
     a28:	bl	0 <memset>
     a2c:	add	x8, x20, x21
     a30:	b	a64 <fill_window+0x364>
     a34:	add	x10, x21, #0x102
     a38:	subs	x10, x10, x8
     a3c:	b.ls	a68 <fill_window+0x368>  // b.plast
     a40:	ldr	x11, [x19, #96]
     a44:	cmp	x10, x9
     a48:	csel	x20, x9, x10, hi  // hi = pmore
     a4c:	and	x2, x20, #0xffffffff
     a50:	add	x0, x11, x8
     a54:	mov	w1, wzr
     a58:	bl	0 <memset>
     a5c:	ldr	x8, [x19, #5944]
     a60:	add	x8, x8, x20
     a64:	str	x8, [x19, #5944]
     a68:	ldp	x20, x19, [sp, #64]
     a6c:	ldp	x22, x21, [sp, #48]
     a70:	ldp	x24, x23, [sp, #32]
     a74:	ldr	x25, [sp, #24]
     a78:	ldp	x29, x30, [sp, #8]
     a7c:	ldr	d8, [sp], #80
     a80:	ret

0000000000000a84 <deflateGetDictionary>:
     a84:	stp	x29, x30, [sp, #-32]!
     a88:	stp	x20, x19, [sp, #16]
     a8c:	mov	x29, sp
     a90:	cbz	x0, b64 <deflateGetDictionary+0xe0>
     a94:	ldr	x8, [x0, #64]
     a98:	cbz	x8, b64 <deflateGetDictionary+0xe0>
     a9c:	ldr	x8, [x0, #72]
     aa0:	cbz	x8, b64 <deflateGetDictionary+0xe0>
     aa4:	ldr	x8, [x0, #56]
     aa8:	cbz	x8, b64 <deflateGetDictionary+0xe0>
     aac:	ldr	x9, [x8]
     ab0:	cmp	x9, x0
     ab4:	b.eq	ac8 <deflateGetDictionary+0x44>  // b.none
     ab8:	mov	w0, #0xfffffffe            	// #-2
     abc:	ldp	x20, x19, [sp, #16]
     ac0:	ldp	x29, x30, [sp], #32
     ac4:	ret
     ac8:	ldr	w9, [x8, #8]
     acc:	mov	x19, x2
     ad0:	sub	w10, w9, #0x39
     ad4:	cmp	w10, #0x38
     ad8:	b.hi	b54 <deflateGetDictionary+0xd0>  // b.pmore
     adc:	mov	w11, #0x1                   	// #1
     ae0:	lsl	x10, x11, x10
     ae4:	mov	x11, #0x1001                	// #4097
     ae8:	movk	x11, #0x1, lsl #16
     aec:	movk	x11, #0x4004, lsl #32
     af0:	movk	x11, #0x100, lsl #48
     af4:	tst	x10, x11
     af8:	b.eq	b54 <deflateGetDictionary+0xd0>  // b.none
     afc:	ldr	w9, [x8, #172]
     b00:	ldr	w10, [x8, #180]
     b04:	ldr	w11, [x8, #80]
     b08:	add	w12, w10, w9
     b0c:	cmp	w12, w11
     b10:	csel	w20, w11, w12, hi  // hi = pmore
     b14:	cbz	x1, b3c <deflateGetDictionary+0xb8>
     b18:	cbz	w20, b3c <deflateGetDictionary+0xb8>
     b1c:	ldr	x8, [x8, #96]
     b20:	mov	w2, w20
     b24:	mov	x0, x1
     b28:	add	x8, x8, x9
     b2c:	add	x8, x8, x10
     b30:	sub	x8, x8, x2
     b34:	mov	x1, x8
     b38:	bl	0 <memcpy>
     b3c:	mov	w0, wzr
     b40:	cbz	x19, abc <deflateGetDictionary+0x38>
     b44:	str	w20, [x19]
     b48:	ldp	x20, x19, [sp, #16]
     b4c:	ldp	x29, x30, [sp], #32
     b50:	ret
     b54:	cmp	w9, #0x29a
     b58:	b.eq	afc <deflateGetDictionary+0x78>  // b.none
     b5c:	cmp	w9, #0x2a
     b60:	b.eq	afc <deflateGetDictionary+0x78>  // b.none
     b64:	mov	w0, #0xfffffffe            	// #-2
     b68:	ldp	x20, x19, [sp, #16]
     b6c:	ldp	x29, x30, [sp], #32
     b70:	ret

0000000000000b74 <deflateResetKeep>:
     b74:	stp	x29, x30, [sp, #-32]!
     b78:	stp	x20, x19, [sp, #16]
     b7c:	mov	x29, sp
     b80:	cbz	x0, bac <deflateResetKeep+0x38>
     b84:	ldr	x8, [x0, #64]
     b88:	mov	x19, x0
     b8c:	cbz	x8, bac <deflateResetKeep+0x38>
     b90:	ldr	x8, [x19, #72]
     b94:	cbz	x8, bac <deflateResetKeep+0x38>
     b98:	ldr	x20, [x19, #56]
     b9c:	cbz	x20, bac <deflateResetKeep+0x38>
     ba0:	ldr	x8, [x20]
     ba4:	cmp	x8, x19
     ba8:	b.eq	bbc <deflateResetKeep+0x48>  // b.none
     bac:	mov	w0, #0xfffffffe            	// #-2
     bb0:	ldp	x20, x19, [sp, #16]
     bb4:	ldp	x29, x30, [sp], #32
     bb8:	ret
     bbc:	ldr	w8, [x20, #8]
     bc0:	sub	w9, w8, #0x39
     bc4:	cmp	w9, #0x38
     bc8:	b.hi	c70 <deflateResetKeep+0xfc>  // b.pmore
     bcc:	mov	w10, #0x1                   	// #1
     bd0:	lsl	x9, x10, x9
     bd4:	mov	x10, #0x1001                	// #4097
     bd8:	movk	x10, #0x1, lsl #16
     bdc:	movk	x10, #0x4004, lsl #32
     be0:	movk	x10, #0x100, lsl #48
     be4:	tst	x9, x10
     be8:	b.eq	c70 <deflateResetKeep+0xfc>  // b.none
     bec:	mov	w8, #0x2                   	// #2
     bf0:	str	xzr, [x19, #16]
     bf4:	stp	xzr, xzr, [x19, #40]
     bf8:	str	w8, [x19, #88]
     bfc:	ldr	x9, [x20, #16]
     c00:	ldr	w8, [x20, #48]
     c04:	stp	x9, xzr, [x20, #32]
     c08:	tbz	w8, #31, c14 <deflateResetKeep+0xa0>
     c0c:	neg	w8, w8
     c10:	str	w8, [x20, #48]
     c14:	cmp	w8, #0x0
     c18:	mov	w9, #0x2a                  	// #42
     c1c:	mov	w10, #0x71                  	// #113
     c20:	csel	w9, w10, w9, eq  // eq = none
     c24:	cmp	w8, #0x2
     c28:	mov	w8, #0x39                  	// #57
     c2c:	csel	w8, w8, w9, eq  // eq = none
     c30:	mov	x0, xzr
     c34:	mov	x1, xzr
     c38:	mov	w2, wzr
     c3c:	str	w8, [x20, #8]
     c40:	b.ne	c4c <deflateResetKeep+0xd8>  // b.any
     c44:	bl	0 <crc32>
     c48:	b	c50 <deflateResetKeep+0xdc>
     c4c:	bl	0 <adler32>
     c50:	str	x0, [x19, #96]
     c54:	mov	x0, x20
     c58:	str	wzr, [x20, #76]
     c5c:	bl	0 <_tr_init>
     c60:	mov	w0, wzr
     c64:	ldp	x20, x19, [sp, #16]
     c68:	ldp	x29, x30, [sp], #32
     c6c:	ret
     c70:	cmp	w8, #0x29a
     c74:	b.eq	bec <deflateResetKeep+0x78>  // b.none
     c78:	cmp	w8, #0x2a
     c7c:	b.ne	bac <deflateResetKeep+0x38>  // b.any
     c80:	b	bec <deflateResetKeep+0x78>

0000000000000c84 <deflateSetHeader>:
     c84:	cbz	x0, d04 <deflateSetHeader+0x80>
     c88:	ldr	x8, [x0, #64]
     c8c:	cbz	x8, d04 <deflateSetHeader+0x80>
     c90:	ldr	x8, [x0, #72]
     c94:	cbz	x8, d04 <deflateSetHeader+0x80>
     c98:	ldr	x8, [x0, #56]
     c9c:	cbz	x8, d04 <deflateSetHeader+0x80>
     ca0:	ldr	x9, [x8]
     ca4:	cmp	x9, x0
     ca8:	b.ne	d04 <deflateSetHeader+0x80>  // b.any
     cac:	ldr	w9, [x8, #8]
     cb0:	sub	w10, w9, #0x39
     cb4:	cmp	w10, #0x38
     cb8:	b.hi	cf4 <deflateSetHeader+0x70>  // b.pmore
     cbc:	mov	w11, #0x1                   	// #1
     cc0:	lsl	x10, x11, x10
     cc4:	mov	x11, #0x1001                	// #4097
     cc8:	movk	x11, #0x1, lsl #16
     ccc:	movk	x11, #0x4004, lsl #32
     cd0:	movk	x11, #0x100, lsl #48
     cd4:	tst	x10, x11
     cd8:	b.eq	cf4 <deflateSetHeader+0x70>  // b.none
     cdc:	ldr	w9, [x8, #48]
     ce0:	cmp	w9, #0x2
     ce4:	b.ne	d04 <deflateSetHeader+0x80>  // b.any
     ce8:	mov	w0, wzr
     cec:	str	x1, [x8, #56]
     cf0:	ret
     cf4:	cmp	w9, #0x29a
     cf8:	b.eq	cdc <deflateSetHeader+0x58>  // b.none
     cfc:	cmp	w9, #0x2a
     d00:	b.eq	cdc <deflateSetHeader+0x58>  // b.none
     d04:	mov	w0, #0xfffffffe            	// #-2
     d08:	ret

0000000000000d0c <deflatePending>:
     d0c:	cbz	x0, d34 <deflatePending+0x28>
     d10:	ldr	x8, [x0, #64]
     d14:	cbz	x8, d34 <deflatePending+0x28>
     d18:	ldr	x8, [x0, #72]
     d1c:	cbz	x8, d34 <deflatePending+0x28>
     d20:	ldr	x8, [x0, #56]
     d24:	cbz	x8, d34 <deflatePending+0x28>
     d28:	ldr	x9, [x8]
     d2c:	cmp	x9, x0
     d30:	b.eq	d3c <deflatePending+0x30>  // b.none
     d34:	mov	w0, #0xfffffffe            	// #-2
     d38:	ret
     d3c:	ldr	w9, [x8, #8]
     d40:	sub	w10, w9, #0x39
     d44:	cmp	w10, #0x38
     d48:	b.hi	d8c <deflatePending+0x80>  // b.pmore
     d4c:	mov	w11, #0x1                   	// #1
     d50:	lsl	x10, x11, x10
     d54:	mov	x11, #0x1001                	// #4097
     d58:	movk	x11, #0x1, lsl #16
     d5c:	movk	x11, #0x4004, lsl #32
     d60:	movk	x11, #0x100, lsl #48
     d64:	tst	x10, x11
     d68:	b.eq	d8c <deflatePending+0x80>  // b.none
     d6c:	cbz	x1, d78 <deflatePending+0x6c>
     d70:	ldr	x9, [x8, #40]
     d74:	str	w9, [x1]
     d78:	mov	w0, wzr
     d7c:	cbz	x2, d88 <deflatePending+0x7c>
     d80:	ldr	w8, [x8, #5940]
     d84:	str	w8, [x2]
     d88:	ret
     d8c:	cmp	w9, #0x29a
     d90:	b.eq	d6c <deflatePending+0x60>  // b.none
     d94:	cmp	w9, #0x2a
     d98:	b.ne	d34 <deflatePending+0x28>  // b.any
     d9c:	b	d6c <deflatePending+0x60>

0000000000000da0 <deflatePrime>:
     da0:	stp	x29, x30, [sp, #-64]!
     da4:	stp	x24, x23, [sp, #16]
     da8:	stp	x22, x21, [sp, #32]
     dac:	stp	x20, x19, [sp, #48]
     db0:	mov	x29, sp
     db4:	cbz	x0, ddc <deflatePrime+0x3c>
     db8:	ldr	x8, [x0, #64]
     dbc:	cbz	x8, ddc <deflatePrime+0x3c>
     dc0:	ldr	x8, [x0, #72]
     dc4:	cbz	x8, ddc <deflatePrime+0x3c>
     dc8:	ldr	x21, [x0, #56]
     dcc:	cbz	x21, ddc <deflatePrime+0x3c>
     dd0:	ldr	x8, [x21]
     dd4:	cmp	x8, x0
     dd8:	b.eq	df4 <deflatePrime+0x54>  // b.none
     ddc:	mov	w0, #0xfffffffe            	// #-2
     de0:	ldp	x20, x19, [sp, #48]
     de4:	ldp	x22, x21, [sp, #32]
     de8:	ldp	x24, x23, [sp, #16]
     dec:	ldp	x29, x30, [sp], #64
     df0:	ret
     df4:	ldr	w8, [x21, #8]
     df8:	mov	w19, w2
     dfc:	mov	w20, w1
     e00:	sub	w9, w8, #0x39
     e04:	cmp	w9, #0x38
     e08:	b.hi	e9c <deflatePrime+0xfc>  // b.pmore
     e0c:	mov	w10, #0x1                   	// #1
     e10:	lsl	x9, x10, x9
     e14:	mov	x10, #0x1001                	// #4097
     e18:	movk	x10, #0x1, lsl #16
     e1c:	movk	x10, #0x4004, lsl #32
     e20:	movk	x10, #0x100, lsl #48
     e24:	tst	x9, x10
     e28:	b.eq	e9c <deflatePrime+0xfc>  // b.none
     e2c:	ldr	x8, [x21, #32]
     e30:	ldr	x9, [x21, #5904]
     e34:	add	x8, x8, #0x2
     e38:	cmp	x9, x8
     e3c:	b.cs	e48 <deflatePrime+0xa8>  // b.hs, b.nlast
     e40:	mov	w0, #0xfffffffb            	// #-5
     e44:	b	de0 <deflatePrime+0x40>
     e48:	mov	w22, #0x10                  	// #16
     e4c:	mov	w23, #0xffffffff            	// #-1
     e50:	ldr	w8, [x21, #5940]
     e54:	ldrh	w9, [x21, #5936]
     e58:	mov	x0, x21
     e5c:	sub	w10, w22, w8
     e60:	cmp	w10, w20
     e64:	csel	w24, w20, w10, gt
     e68:	lsl	w10, w23, w24
     e6c:	bic	w10, w19, w10
     e70:	add	w11, w24, w8
     e74:	lsl	w8, w10, w8
     e78:	orr	w8, w9, w8
     e7c:	strh	w8, [x21, #5936]
     e80:	str	w11, [x21, #5940]
     e84:	bl	0 <_tr_flush_bits>
     e88:	mov	w0, wzr
     e8c:	subs	w20, w20, w24
     e90:	asr	w19, w19, w24
     e94:	b.ne	e50 <deflatePrime+0xb0>  // b.any
     e98:	b	de0 <deflatePrime+0x40>
     e9c:	cmp	w8, #0x29a
     ea0:	b.eq	e2c <deflatePrime+0x8c>  // b.none
     ea4:	cmp	w8, #0x2a
     ea8:	b.ne	ddc <deflatePrime+0x3c>  // b.any
     eac:	b	e2c <deflatePrime+0x8c>

0000000000000eb0 <deflateParams>:
     eb0:	stp	x29, x30, [sp, #-48]!
     eb4:	stp	x22, x21, [sp, #16]
     eb8:	stp	x20, x19, [sp, #32]
     ebc:	mov	x29, sp
     ec0:	cbz	x0, 1040 <deflateParams+0x190>
     ec4:	ldr	x8, [x0, #64]
     ec8:	mov	x20, x0
     ecc:	cbz	x8, 1040 <deflateParams+0x190>
     ed0:	ldr	x8, [x20, #72]
     ed4:	cbz	x8, 1040 <deflateParams+0x190>
     ed8:	ldr	x21, [x20, #56]
     edc:	cbz	x21, 1040 <deflateParams+0x190>
     ee0:	ldr	x8, [x21]
     ee4:	cmp	x8, x20
     ee8:	b.eq	f00 <deflateParams+0x50>  // b.none
     eec:	mov	w0, #0xfffffffe            	// #-2
     ef0:	ldp	x20, x19, [sp, #32]
     ef4:	ldp	x22, x21, [sp, #16]
     ef8:	ldp	x29, x30, [sp], #48
     efc:	ret
     f00:	ldr	w8, [x21, #8]
     f04:	mov	w19, w2
     f08:	sub	w9, w8, #0x39
     f0c:	cmp	w9, #0x38
     f10:	b.hi	1030 <deflateParams+0x180>  // b.pmore
     f14:	mov	w10, #0x1                   	// #1
     f18:	lsl	x9, x10, x9
     f1c:	mov	x10, #0x1001                	// #4097
     f20:	movk	x10, #0x1, lsl #16
     f24:	movk	x10, #0x4004, lsl #32
     f28:	movk	x10, #0x100, lsl #48
     f2c:	tst	x9, x10
     f30:	b.eq	1030 <deflateParams+0x180>  // b.none
     f34:	cmn	w1, #0x1
     f38:	mov	w8, #0x6                   	// #6
     f3c:	csel	w22, w8, w1, eq  // eq = none
     f40:	cmp	w19, #0x4
     f44:	mov	w0, #0xfffffffe            	// #-2
     f48:	b.hi	ef0 <deflateParams+0x40>  // b.pmore
     f4c:	cmp	w22, #0x9
     f50:	b.hi	ef0 <deflateParams+0x40>  // b.pmore
     f54:	ldr	w8, [x21, #200]
     f58:	cmp	w8, w19
     f5c:	b.ne	f84 <deflateParams+0xd4>  // b.any
     f60:	ldrsw	x8, [x21, #196]
     f64:	adrp	x9, 0 <deflateInit_>
     f68:	add	x9, x9, #0x0
     f6c:	add	x10, x9, w22, uxtw #4
     f70:	add	x8, x9, x8, lsl #4
     f74:	ldr	x8, [x8, #8]
     f78:	ldr	x9, [x10, #8]
     f7c:	cmp	x8, x9
     f80:	b.eq	fa8 <deflateParams+0xf8>  // b.none
     f84:	ldr	x8, [x21, #5944]
     f88:	cbz	x8, fa8 <deflateParams+0xf8>
     f8c:	mov	w1, #0x5                   	// #5
     f90:	mov	x0, x20
     f94:	bl	1170 <deflate>
     f98:	cmn	w0, #0x2
     f9c:	b.eq	ef0 <deflateParams+0x40>  // b.none
     fa0:	ldr	w8, [x20, #32]
     fa4:	cbz	w8, 1054 <deflateParams+0x1a4>
     fa8:	ldr	w8, [x21, #196]
     fac:	cmp	w8, w22
     fb0:	b.eq	1158 <deflateParams+0x2a8>  // b.none
     fb4:	cbnz	w8, 1130 <deflateParams+0x280>
     fb8:	ldr	w8, [x21, #5928]
     fbc:	cbz	w8, 1130 <deflateParams+0x280>
     fc0:	cmp	w8, #0x1
     fc4:	b.ne	1068 <deflateParams+0x1b8>  // b.any
     fc8:	ldr	w10, [x21, #132]
     fcc:	ldr	x0, [x21, #120]
     fd0:	ldr	w9, [x21, #80]
     fd4:	subs	w8, w10, #0x1
     fd8:	add	x14, x0, x10, lsl #1
     fdc:	b.eq	107c <deflateParams+0x1cc>  // b.none
     fe0:	add	x12, x8, #0x1
     fe4:	and	x13, x12, #0x1fffffffe
     fe8:	sub	x11, x14, x13, lsl #1
     fec:	sub	w10, w10, w13
     ff0:	sub	x14, x14, #0x2
     ff4:	mov	x15, x13
     ff8:	ldrh	w16, [x14]
     ffc:	ldurh	w17, [x14, #-2]
    1000:	subs	w16, w16, w9
    1004:	csel	w16, wzr, w16, cc  // cc = lo, ul, last
    1008:	subs	w17, w17, w9
    100c:	csel	w17, wzr, w17, cc  // cc = lo, ul, last
    1010:	strh	w16, [x14]
    1014:	subs	x15, x15, #0x2
    1018:	sturh	w17, [x14, #-2]
    101c:	sub	x14, x14, #0x4
    1020:	b.ne	ff8 <deflateParams+0x148>  // b.any
    1024:	cmp	x12, x13
    1028:	b.ne	1080 <deflateParams+0x1d0>  // b.any
    102c:	b	109c <deflateParams+0x1ec>
    1030:	cmp	w8, #0x29a
    1034:	b.eq	f34 <deflateParams+0x84>  // b.none
    1038:	cmp	w8, #0x2a
    103c:	b.eq	f34 <deflateParams+0x84>  // b.none
    1040:	mov	w0, #0xfffffffe            	// #-2
    1044:	ldp	x20, x19, [sp, #32]
    1048:	ldp	x22, x21, [sp, #16]
    104c:	ldp	x29, x30, [sp], #48
    1050:	ret
    1054:	mov	w0, #0xfffffffb            	// #-5
    1058:	ldp	x20, x19, [sp, #32]
    105c:	ldp	x22, x21, [sp, #16]
    1060:	ldp	x29, x30, [sp], #48
    1064:	ret
    1068:	ldr	w8, [x21, #132]
    106c:	ldr	x0, [x21, #120]
    1070:	sub	w8, w8, #0x1
    1074:	strh	wzr, [x0, w8, uxtw #1]
    1078:	b	1120 <deflateParams+0x270>
    107c:	mov	x11, x14
    1080:	sub	x11, x11, #0x2
    1084:	ldrh	w12, [x11]
    1088:	subs	w12, w12, w9
    108c:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    1090:	subs	w10, w10, #0x1
    1094:	strh	w12, [x11], #-2
    1098:	b.ne	1084 <deflateParams+0x1d4>  // b.any
    109c:	ldr	x11, [x21, #112]
    10a0:	subs	w10, w9, #0x1
    10a4:	add	x14, x11, x9, lsl #1
    10a8:	b.eq	10fc <deflateParams+0x24c>  // b.none
    10ac:	add	x12, x10, #0x1
    10b0:	and	x13, x12, #0x1fffffffe
    10b4:	sub	x11, x14, x13, lsl #1
    10b8:	sub	w10, w9, w13
    10bc:	sub	x14, x14, #0x2
    10c0:	mov	x15, x13
    10c4:	ldrh	w16, [x14]
    10c8:	ldurh	w17, [x14, #-2]
    10cc:	subs	w16, w16, w9
    10d0:	csel	w16, wzr, w16, cc  // cc = lo, ul, last
    10d4:	subs	w17, w17, w9
    10d8:	csel	w17, wzr, w17, cc  // cc = lo, ul, last
    10dc:	strh	w16, [x14]
    10e0:	subs	x15, x15, #0x2
    10e4:	sturh	w17, [x14, #-2]
    10e8:	sub	x14, x14, #0x4
    10ec:	b.ne	10c4 <deflateParams+0x214>  // b.any
    10f0:	cmp	x12, x13
    10f4:	b.ne	1104 <deflateParams+0x254>  // b.any
    10f8:	b	1120 <deflateParams+0x270>
    10fc:	mov	x11, x14
    1100:	mov	w10, w9
    1104:	sub	x11, x11, #0x2
    1108:	ldrh	w12, [x11]
    110c:	subs	w12, w12, w9
    1110:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    1114:	subs	w10, w10, #0x1
    1118:	strh	w12, [x11], #-2
    111c:	b.ne	1108 <deflateParams+0x258>  // b.any
    1120:	lsl	x2, x8, #1
    1124:	mov	w1, wzr
    1128:	bl	0 <memset>
    112c:	str	wzr, [x21, #5928]
    1130:	adrp	x8, 0 <deflateInit_>
    1134:	add	x8, x8, #0x0
    1138:	add	x8, x8, w22, sxtw #4
    113c:	ldrh	w9, [x8]
    1140:	ldrh	w10, [x8, #4]
    1144:	ldrh	w11, [x8, #2]
    1148:	ldrh	w8, [x8, #6]
    114c:	str	w22, [x21, #196]
    1150:	stp	w9, w10, [x21, #204]
    1154:	stp	w8, w11, [x21, #188]
    1158:	mov	w0, wzr
    115c:	str	w19, [x21, #200]
    1160:	ldp	x20, x19, [sp, #32]
    1164:	ldp	x22, x21, [sp, #16]
    1168:	ldp	x29, x30, [sp], #48
    116c:	ret

0000000000001170 <deflate>:
    1170:	stp	x29, x30, [sp, #-96]!
    1174:	stp	x28, x27, [sp, #16]
    1178:	stp	x26, x25, [sp, #32]
    117c:	stp	x24, x23, [sp, #48]
    1180:	stp	x22, x21, [sp, #64]
    1184:	stp	x20, x19, [sp, #80]
    1188:	mov	x29, sp
    118c:	cbz	x0, 11f4 <deflate+0x84>
    1190:	ldr	x8, [x0, #64]
    1194:	mov	x20, x0
    1198:	cbz	x8, 11f4 <deflate+0x84>
    119c:	ldr	x8, [x20, #72]
    11a0:	cbz	x8, 11f4 <deflate+0x84>
    11a4:	ldr	x19, [x20, #56]
    11a8:	cbz	x19, 11f4 <deflate+0x84>
    11ac:	ldr	x8, [x19]
    11b0:	cmp	x8, x20
    11b4:	b.ne	11f4 <deflate+0x84>  // b.any
    11b8:	ldr	w9, [x19, #8]
    11bc:	mov	w21, w1
    11c0:	sub	w8, w9, #0x39
    11c4:	cmp	w8, #0x38
    11c8:	b.hi	1250 <deflate+0xe0>  // b.pmore
    11cc:	mov	w10, #0x1                   	// #1
    11d0:	lsl	x8, x10, x8
    11d4:	mov	x10, #0x1001                	// #4097
    11d8:	movk	x10, #0x1, lsl #16
    11dc:	movk	x10, #0x4004, lsl #32
    11e0:	movk	x10, #0x100, lsl #48
    11e4:	tst	x8, x10
    11e8:	b.eq	1250 <deflate+0xe0>  // b.none
    11ec:	cmp	w21, #0x5
    11f0:	b.ls	1214 <deflate+0xa4>  // b.plast
    11f4:	mov	w0, #0xfffffffe            	// #-2
    11f8:	ldp	x20, x19, [sp, #80]
    11fc:	ldp	x22, x21, [sp, #64]
    1200:	ldp	x24, x23, [sp, #48]
    1204:	ldp	x26, x25, [sp, #32]
    1208:	ldp	x28, x27, [sp, #16]
    120c:	ldp	x29, x30, [sp], #96
    1210:	ret
    1214:	ldr	x8, [x20, #24]
    1218:	cbz	x8, 123c <deflate+0xcc>
    121c:	ldr	w8, [x20, #8]
    1220:	cbz	w8, 122c <deflate+0xbc>
    1224:	ldr	x10, [x20]
    1228:	cbz	x10, 123c <deflate+0xcc>
    122c:	cmp	w21, #0x4
    1230:	b.eq	1264 <deflate+0xf4>  // b.none
    1234:	cmp	w9, #0x29a
    1238:	b.ne	1264 <deflate+0xf4>  // b.any
    123c:	adrp	x8, 0 <z_errmsg>
    1240:	ldr	x8, [x8]
    1244:	mov	w0, #0xfffffffe            	// #-2
    1248:	str	x8, [x20, #48]
    124c:	b	11f8 <deflate+0x88>
    1250:	cmp	w9, #0x29a
    1254:	b.eq	11ec <deflate+0x7c>  // b.none
    1258:	cmp	w9, #0x2a
    125c:	b.ne	11f4 <deflate+0x84>  // b.any
    1260:	b	11ec <deflate+0x7c>
    1264:	ldr	w10, [x20, #32]
    1268:	cbz	w10, 1658 <deflate+0x4e8>
    126c:	ldr	x11, [x19, #40]
    1270:	ldr	w10, [x19, #76]
    1274:	str	w21, [x19, #76]
    1278:	cbz	x11, 1300 <deflate+0x190>
    127c:	mov	x0, x19
    1280:	bl	0 <_tr_flush_bits>
    1284:	ldr	x8, [x19, #40]
    1288:	ldr	w9, [x20, #32]
    128c:	cmp	w9, w8
    1290:	csel	w23, w9, w8, cc  // cc = lo, ul, last
    1294:	cbz	w23, 12f4 <deflate+0x184>
    1298:	ldr	x0, [x20, #24]
    129c:	ldr	x1, [x19, #32]
    12a0:	mov	w22, w23
    12a4:	mov	x2, x22
    12a8:	bl	0 <memcpy>
    12ac:	ldr	x8, [x20, #24]
    12b0:	add	x8, x8, x22
    12b4:	str	x8, [x20, #24]
    12b8:	ldr	x8, [x19, #32]
    12bc:	add	x8, x8, x22
    12c0:	str	x8, [x19, #32]
    12c4:	ldr	x8, [x20, #40]
    12c8:	ldr	w9, [x20, #32]
    12cc:	add	x8, x8, x22
    12d0:	sub	w9, w9, w23
    12d4:	str	x8, [x20, #40]
    12d8:	str	w9, [x20, #32]
    12dc:	ldr	x8, [x19, #40]
    12e0:	subs	x8, x8, x22
    12e4:	str	x8, [x19, #40]
    12e8:	b.ne	12f4 <deflate+0x184>  // b.any
    12ec:	ldr	x10, [x19, #16]
    12f0:	str	x10, [x19, #32]
    12f4:	cbz	w9, 2814 <deflate+0x16a4>
    12f8:	ldr	w9, [x19, #8]
    12fc:	b	1308 <deflate+0x198>
    1300:	cbz	w8, 1620 <deflate+0x4b0>
    1304:	mov	x8, xzr
    1308:	cmp	w9, #0x2a
    130c:	b.eq	1324 <deflate+0x1b4>  // b.none
    1310:	cmp	w9, #0x29a
    1314:	b.ne	14c4 <deflate+0x354>  // b.any
    1318:	ldr	w8, [x20, #8]
    131c:	cbnz	w8, 1658 <deflate+0x4e8>
    1320:	b	1e54 <deflate+0xce4>
    1324:	ldr	w9, [x19, #200]
    1328:	ldr	w10, [x19, #84]
    132c:	mov	w11, #0xffff8800            	// #-30720
    1330:	cmp	w9, #0x1
    1334:	add	w9, w11, w10, lsl #12
    1338:	b.gt	1348 <deflate+0x1d8>
    133c:	ldr	w10, [x19, #196]
    1340:	cmp	w10, #0x2
    1344:	b.ge	16e4 <deflate+0x574>  // b.tcont
    1348:	mov	w10, wzr
    134c:	orr	w9, w10, w9
    1350:	ldr	w10, [x19, #172]
    1354:	add	x12, x8, #0x1
    1358:	mov	w11, #0x1085                	// #4229
    135c:	str	x12, [x19, #40]
    1360:	ldr	x12, [x19, #16]
    1364:	cmp	w10, #0x0
    1368:	orr	w10, w9, #0x20
    136c:	movk	w11, #0x842, lsl #16
    1370:	csel	w9, w9, w10, eq  // eq = none
    1374:	umull	x10, w9, w11
    1378:	lsr	w11, w9, #8
    137c:	lsr	x10, x10, #32
    1380:	strb	w11, [x12, x8]
    1384:	sub	w8, w9, w10
    1388:	add	w8, w10, w8, lsr #1
    138c:	ldr	x12, [x19, #40]
    1390:	lsr	w8, w8, #4
    1394:	ldr	x11, [x19, #16]
    1398:	sub	w8, w8, w8, lsl #5
    139c:	add	w8, w9, w8
    13a0:	orr	w8, w8, w9
    13a4:	add	x10, x12, #0x1
    13a8:	eor	w8, w8, #0x1f
    13ac:	str	x10, [x19, #40]
    13b0:	strb	w8, [x11, x12]
    13b4:	ldr	w8, [x19, #172]
    13b8:	cbz	w8, 1420 <deflate+0x2b0>
    13bc:	ldr	x8, [x20, #96]
    13c0:	ldr	x9, [x19, #40]
    13c4:	ldr	x10, [x19, #16]
    13c8:	lsr	x11, x8, #24
    13cc:	add	x12, x9, #0x1
    13d0:	str	x12, [x19, #40]
    13d4:	strb	w11, [x10, x9]
    13d8:	ldr	x9, [x19, #40]
    13dc:	ldr	x10, [x19, #16]
    13e0:	lsr	x8, x8, #16
    13e4:	add	x11, x9, #0x1
    13e8:	str	x11, [x19, #40]
    13ec:	strb	w8, [x10, x9]
    13f0:	ldr	x8, [x20, #96]
    13f4:	ldr	x9, [x19, #40]
    13f8:	ldr	x10, [x19, #16]
    13fc:	ubfx	x11, x8, #8, #24
    1400:	add	x12, x9, #0x1
    1404:	str	x12, [x19, #40]
    1408:	strb	w11, [x10, x9]
    140c:	ldr	x9, [x19, #40]
    1410:	ldr	x10, [x19, #16]
    1414:	add	x11, x9, #0x1
    1418:	str	x11, [x19, #40]
    141c:	strb	w8, [x10, x9]
    1420:	mov	x0, xzr
    1424:	mov	x1, xzr
    1428:	mov	w2, wzr
    142c:	bl	0 <adler32>
    1430:	mov	w8, #0x71                  	// #113
    1434:	str	x0, [x20, #96]
    1438:	str	w8, [x19, #8]
    143c:	ldr	x22, [x20, #56]
    1440:	mov	x0, x22
    1444:	bl	0 <_tr_flush_bits>
    1448:	ldr	w8, [x22, #40]
    144c:	ldr	w9, [x20, #32]
    1450:	cmp	w9, w8
    1454:	csel	w24, w9, w8, cc  // cc = lo, ul, last
    1458:	cbz	w24, 14b8 <deflate+0x348>
    145c:	ldr	x0, [x20, #24]
    1460:	ldr	x1, [x22, #32]
    1464:	mov	w23, w24
    1468:	mov	x2, x23
    146c:	bl	0 <memcpy>
    1470:	ldr	x8, [x20, #24]
    1474:	add	x8, x8, x23
    1478:	str	x8, [x20, #24]
    147c:	ldr	x8, [x22, #32]
    1480:	add	x8, x8, x23
    1484:	str	x8, [x22, #32]
    1488:	ldr	x8, [x20, #40]
    148c:	ldr	w9, [x20, #32]
    1490:	add	x8, x8, x23
    1494:	sub	w9, w9, w24
    1498:	str	x8, [x20, #40]
    149c:	str	w9, [x20, #32]
    14a0:	ldr	x8, [x22, #40]
    14a4:	subs	x8, x8, x23
    14a8:	str	x8, [x22, #40]
    14ac:	b.ne	14b8 <deflate+0x348>  // b.any
    14b0:	ldr	x8, [x22, #16]
    14b4:	str	x8, [x22, #32]
    14b8:	ldr	x8, [x19, #40]
    14bc:	cbnz	x8, 2814 <deflate+0x16a4>
    14c0:	ldr	w9, [x19, #8]
    14c4:	cmp	w9, #0x39
    14c8:	b.ne	187c <deflate+0x70c>  // b.any
    14cc:	mov	x0, xzr
    14d0:	mov	x1, xzr
    14d4:	mov	w2, wzr
    14d8:	bl	0 <crc32>
    14dc:	str	x0, [x20, #96]
    14e0:	ldr	x8, [x19, #40]
    14e4:	ldr	x9, [x19, #16]
    14e8:	add	x10, x8, #0x1
    14ec:	str	x10, [x19, #40]
    14f0:	mov	w10, #0x1f                  	// #31
    14f4:	strb	w10, [x9, x8]
    14f8:	ldr	x8, [x19, #40]
    14fc:	ldr	x9, [x19, #16]
    1500:	add	x10, x8, #0x1
    1504:	str	x10, [x19, #40]
    1508:	mov	w10, #0x8b                  	// #139
    150c:	strb	w10, [x9, x8]
    1510:	ldr	x8, [x19, #40]
    1514:	ldr	x9, [x19, #16]
    1518:	add	x10, x8, #0x1
    151c:	str	x10, [x19, #40]
    1520:	mov	w10, #0x8                   	// #8
    1524:	strb	w10, [x9, x8]
    1528:	ldr	x8, [x19, #56]
    152c:	cbz	x8, 166c <deflate+0x4fc>
    1530:	ldr	w9, [x8]
    1534:	ldr	w10, [x8, #68]
    1538:	ldr	x13, [x19, #40]
    153c:	ldr	x11, [x8, #24]
    1540:	ldr	x12, [x8, #40]
    1544:	ldr	x8, [x8, #56]
    1548:	cmp	w9, #0x0
    154c:	cset	w9, ne  // ne = any
    1550:	cmp	w10, #0x0
    1554:	add	x10, x13, #0x1
    1558:	str	x10, [x19, #40]
    155c:	cset	w10, ne  // ne = any
    1560:	cmp	x11, #0x0
    1564:	bfi	w9, w10, #1, #1
    1568:	cset	w10, ne  // ne = any
    156c:	cmp	x12, #0x0
    1570:	bfi	w9, w10, #2, #1
    1574:	cset	w10, ne  // ne = any
    1578:	cmp	x8, #0x0
    157c:	ldr	x8, [x19, #16]
    1580:	bfi	w9, w10, #3, #1
    1584:	cset	w10, ne  // ne = any
    1588:	bfi	w9, w10, #4, #1
    158c:	strb	w9, [x8, x13]
    1590:	ldr	x8, [x19, #56]
    1594:	ldr	x9, [x19, #40]
    1598:	ldr	x10, [x19, #16]
    159c:	ldr	x8, [x8, #8]
    15a0:	add	x11, x9, #0x1
    15a4:	str	x11, [x19, #40]
    15a8:	strb	w8, [x10, x9]
    15ac:	ldr	x8, [x19, #56]
    15b0:	ldr	x9, [x19, #40]
    15b4:	ldr	x10, [x19, #16]
    15b8:	ldr	x8, [x8, #8]
    15bc:	add	x11, x9, #0x1
    15c0:	str	x11, [x19, #40]
    15c4:	lsr	x8, x8, #8
    15c8:	strb	w8, [x10, x9]
    15cc:	ldr	x8, [x19, #56]
    15d0:	ldr	x9, [x19, #40]
    15d4:	ldr	x10, [x19, #16]
    15d8:	ldr	x8, [x8, #8]
    15dc:	add	x11, x9, #0x1
    15e0:	str	x11, [x19, #40]
    15e4:	lsr	x8, x8, #16
    15e8:	strb	w8, [x10, x9]
    15ec:	ldr	x8, [x19, #56]
    15f0:	ldr	x9, [x19, #40]
    15f4:	ldr	x10, [x19, #16]
    15f8:	ldr	x8, [x8, #8]
    15fc:	add	x11, x9, #0x1
    1600:	str	x11, [x19, #40]
    1604:	lsr	x8, x8, #24
    1608:	strb	w8, [x10, x9]
    160c:	ldr	w8, [x19, #196]
    1610:	cmp	w8, #0x9
    1614:	b.ne	16f4 <deflate+0x584>  // b.any
    1618:	mov	w8, #0x2                   	// #2
    161c:	b	1708 <deflate+0x598>
    1620:	cmp	w21, #0x4
    1624:	mov	w8, #0x9                   	// #9
    1628:	csel	w11, w8, wzr, gt
    162c:	cmp	w10, #0x4
    1630:	csel	w12, w8, wzr, gt
    1634:	cmp	w21, #0x4
    1638:	mov	x8, xzr
    163c:	b.eq	1308 <deflate+0x198>  // b.none
    1640:	lsl	w13, w21, #1
    1644:	lsl	w10, w10, #1
    1648:	sub	w11, w13, w11
    164c:	sub	w10, w10, w12
    1650:	cmp	w11, w10
    1654:	b.gt	1308 <deflate+0x198>
    1658:	adrp	x8, 0 <z_errmsg>
    165c:	ldr	x8, [x8]
    1660:	mov	w0, #0xfffffffb            	// #-5
    1664:	str	x8, [x20, #48]
    1668:	b	11f8 <deflate+0x88>
    166c:	ldr	x8, [x19, #40]
    1670:	ldr	x9, [x19, #16]
    1674:	add	x10, x8, #0x1
    1678:	str	x10, [x19, #40]
    167c:	strb	wzr, [x9, x8]
    1680:	ldr	x8, [x19, #40]
    1684:	ldr	x9, [x19, #16]
    1688:	add	x10, x8, #0x1
    168c:	str	x10, [x19, #40]
    1690:	strb	wzr, [x9, x8]
    1694:	ldr	x8, [x19, #40]
    1698:	ldr	x9, [x19, #16]
    169c:	add	x10, x8, #0x1
    16a0:	str	x10, [x19, #40]
    16a4:	strb	wzr, [x9, x8]
    16a8:	ldr	x8, [x19, #40]
    16ac:	ldr	x9, [x19, #16]
    16b0:	add	x10, x8, #0x1
    16b4:	str	x10, [x19, #40]
    16b8:	strb	wzr, [x9, x8]
    16bc:	ldr	x8, [x19, #40]
    16c0:	ldr	x9, [x19, #16]
    16c4:	add	x10, x8, #0x1
    16c8:	str	x10, [x19, #40]
    16cc:	strb	wzr, [x9, x8]
    16d0:	ldr	w8, [x19, #196]
    16d4:	cmp	w8, #0x9
    16d8:	b.ne	17ac <deflate+0x63c>  // b.any
    16dc:	mov	w8, #0x2                   	// #2
    16e0:	b	17c0 <deflate+0x650>
    16e4:	cmp	w10, #0x6
    16e8:	b.ge	19cc <deflate+0x85c>  // b.tcont
    16ec:	mov	w10, #0x40                  	// #64
    16f0:	b	134c <deflate+0x1dc>
    16f4:	ldr	w9, [x19, #200]
    16f8:	cmp	w9, #0x1
    16fc:	ccmp	w8, #0x2, #0x8, le
    1700:	mov	w8, #0x4                   	// #4
    1704:	csel	w8, w8, wzr, lt  // lt = tstop
    1708:	ldr	x9, [x19, #40]
    170c:	ldr	x10, [x19, #16]
    1710:	add	x11, x9, #0x1
    1714:	str	x11, [x19, #40]
    1718:	strb	w8, [x10, x9]
    171c:	ldr	x8, [x19, #56]
    1720:	ldr	x9, [x19, #40]
    1724:	ldr	x10, [x19, #16]
    1728:	ldr	w8, [x8, #20]
    172c:	add	x11, x9, #0x1
    1730:	str	x11, [x19, #40]
    1734:	strb	w8, [x10, x9]
    1738:	ldr	x8, [x19, #56]
    173c:	ldr	x9, [x8, #24]
    1740:	cbz	x9, 1780 <deflate+0x610>
    1744:	ldr	x9, [x19, #40]
    1748:	ldr	w8, [x8, #32]
    174c:	ldr	x10, [x19, #16]
    1750:	add	x11, x9, #0x1
    1754:	str	x11, [x19, #40]
    1758:	strb	w8, [x10, x9]
    175c:	ldr	x8, [x19, #56]
    1760:	ldr	x9, [x19, #40]
    1764:	ldr	x10, [x19, #16]
    1768:	ldr	w8, [x8, #32]
    176c:	add	x11, x9, #0x1
    1770:	str	x11, [x19, #40]
    1774:	lsr	w8, w8, #8
    1778:	strb	w8, [x10, x9]
    177c:	ldr	x8, [x19, #56]
    1780:	ldr	w8, [x8, #68]
    1784:	cbz	w8, 179c <deflate+0x62c>
    1788:	ldr	x0, [x20, #96]
    178c:	ldr	x1, [x19, #16]
    1790:	ldr	w2, [x19, #40]
    1794:	bl	0 <crc32>
    1798:	str	x0, [x20, #96]
    179c:	mov	w8, #0x45                  	// #69
    17a0:	str	xzr, [x19, #64]
    17a4:	str	w8, [x19, #8]
    17a8:	b	18a0 <deflate+0x730>
    17ac:	ldr	w9, [x19, #200]
    17b0:	cmp	w9, #0x1
    17b4:	ccmp	w8, #0x2, #0x8, le
    17b8:	mov	w8, #0x4                   	// #4
    17bc:	csel	w8, w8, wzr, lt  // lt = tstop
    17c0:	ldr	x9, [x19, #40]
    17c4:	ldr	x10, [x19, #16]
    17c8:	add	x11, x9, #0x1
    17cc:	str	x11, [x19, #40]
    17d0:	strb	w8, [x10, x9]
    17d4:	ldr	x8, [x19, #40]
    17d8:	ldr	x10, [x19, #16]
    17dc:	mov	w9, #0x3                   	// #3
    17e0:	mov	w11, #0x71                  	// #113
    17e4:	add	x12, x8, #0x1
    17e8:	str	x12, [x19, #40]
    17ec:	strb	w9, [x10, x8]
    17f0:	str	w11, [x19, #8]
    17f4:	ldr	x22, [x20, #56]
    17f8:	mov	x0, x22
    17fc:	bl	0 <_tr_flush_bits>
    1800:	ldr	w8, [x22, #40]
    1804:	ldr	w9, [x20, #32]
    1808:	cmp	w9, w8
    180c:	csel	w24, w9, w8, cc  // cc = lo, ul, last
    1810:	cbz	w24, 1870 <deflate+0x700>
    1814:	ldr	x0, [x20, #24]
    1818:	ldr	x1, [x22, #32]
    181c:	mov	w23, w24
    1820:	mov	x2, x23
    1824:	bl	0 <memcpy>
    1828:	ldr	x8, [x20, #24]
    182c:	add	x8, x8, x23
    1830:	str	x8, [x20, #24]
    1834:	ldr	x8, [x22, #32]
    1838:	add	x8, x8, x23
    183c:	str	x8, [x22, #32]
    1840:	ldr	x8, [x20, #40]
    1844:	ldr	w9, [x20, #32]
    1848:	add	x8, x8, x23
    184c:	sub	w9, w9, w24
    1850:	str	x8, [x20, #40]
    1854:	str	w9, [x20, #32]
    1858:	ldr	x8, [x22, #40]
    185c:	subs	x8, x8, x23
    1860:	str	x8, [x22, #40]
    1864:	b.ne	1870 <deflate+0x700>  // b.any
    1868:	ldr	x8, [x22, #16]
    186c:	str	x8, [x22, #32]
    1870:	ldr	x8, [x19, #40]
    1874:	cbnz	x8, 2814 <deflate+0x16a4>
    1878:	ldr	w9, [x19, #8]
    187c:	sub	w8, w9, #0x45
    1880:	cmp	w8, #0x22
    1884:	b.hi	1e4c <deflate+0xcdc>  // b.pmore
    1888:	adrp	x9, 0 <deflateInit_>
    188c:	add	x9, x9, #0x0
    1890:	adr	x10, 18a0 <deflate+0x730>
    1894:	ldrh	w11, [x9, x8, lsl #1]
    1898:	add	x10, x10, x11, lsl #2
    189c:	br	x10
    18a0:	ldr	x9, [x19, #56]
    18a4:	ldr	x8, [x9, #24]
    18a8:	cbz	x8, 1a3c <deflate+0x8cc>
    18ac:	ldrh	w11, [x9, #32]
    18b0:	ldr	x9, [x19, #64]
    18b4:	ldr	x24, [x19, #40]
    18b8:	ldr	x10, [x19, #24]
    18bc:	sub	w22, w11, w9
    18c0:	add	x11, x24, x22
    18c4:	cmp	x11, x10
    18c8:	b.ls	19ec <deflate+0x87c>  // b.plast
    18cc:	ldr	x11, [x19, #16]
    18d0:	sub	x25, x10, x24
    18d4:	and	x23, x25, #0xffffffff
    18d8:	add	x1, x8, x9
    18dc:	add	x0, x11, x24
    18e0:	mov	x2, x23
    18e4:	bl	0 <memcpy>
    18e8:	ldr	x8, [x19, #24]
    18ec:	cmp	x8, x24
    18f0:	str	x8, [x19, #40]
    18f4:	b.ls	191c <deflate+0x7ac>  // b.plast
    18f8:	ldr	x9, [x19, #56]
    18fc:	ldr	w9, [x9, #68]
    1900:	cbz	w9, 191c <deflate+0x7ac>
    1904:	ldr	x9, [x19, #16]
    1908:	ldr	x0, [x20, #96]
    190c:	sub	w2, w8, w24
    1910:	add	x1, x9, x24
    1914:	bl	0 <crc32>
    1918:	str	x0, [x20, #96]
    191c:	ldr	x8, [x19, #64]
    1920:	add	x8, x8, x23
    1924:	str	x8, [x19, #64]
    1928:	ldr	x23, [x20, #56]
    192c:	mov	x0, x23
    1930:	bl	0 <_tr_flush_bits>
    1934:	ldr	w8, [x23, #40]
    1938:	ldr	w9, [x20, #32]
    193c:	cmp	w9, w8
    1940:	csel	w26, w9, w8, cc  // cc = lo, ul, last
    1944:	cbz	w26, 19a4 <deflate+0x834>
    1948:	ldr	x0, [x20, #24]
    194c:	ldr	x1, [x23, #32]
    1950:	mov	w24, w26
    1954:	mov	x2, x24
    1958:	bl	0 <memcpy>
    195c:	ldr	x8, [x20, #24]
    1960:	add	x8, x8, x24
    1964:	str	x8, [x20, #24]
    1968:	ldr	x8, [x23, #32]
    196c:	add	x8, x8, x24
    1970:	str	x8, [x23, #32]
    1974:	ldr	x8, [x20, #40]
    1978:	ldr	w9, [x20, #32]
    197c:	add	x8, x8, x24
    1980:	sub	w9, w9, w26
    1984:	str	x8, [x20, #40]
    1988:	str	w9, [x20, #32]
    198c:	ldr	x8, [x23, #40]
    1990:	subs	x8, x8, x24
    1994:	str	x8, [x23, #40]
    1998:	b.ne	19a4 <deflate+0x834>  // b.any
    199c:	ldr	x8, [x23, #16]
    19a0:	str	x8, [x23, #32]
    19a4:	ldr	x8, [x19, #40]
    19a8:	cbnz	x8, 2814 <deflate+0x16a4>
    19ac:	ldr	x10, [x19, #24]
    19b0:	sub	w22, w22, w25
    19b4:	cmp	x10, w22, uxtw
    19b8:	b.cs	19dc <deflate+0x86c>  // b.hs, b.nlast
    19bc:	ldp	x8, x9, [x19, #56]
    19c0:	mov	x24, xzr
    19c4:	ldr	x8, [x8, #24]
    19c8:	b	18cc <deflate+0x75c>
    19cc:	mov	w10, #0xc0                  	// #192
    19d0:	mov	w11, #0x80                  	// #128
    19d4:	csel	w10, w11, w10, eq  // eq = none
    19d8:	b	134c <deflate+0x1dc>
    19dc:	ldp	x8, x9, [x19, #56]
    19e0:	mov	x24, xzr
    19e4:	mov	w22, w22
    19e8:	ldr	x8, [x8, #24]
    19ec:	ldr	x10, [x19, #16]
    19f0:	add	x1, x8, x9
    19f4:	mov	x2, x22
    19f8:	add	x0, x10, x24
    19fc:	bl	0 <memcpy>
    1a00:	ldr	x8, [x19, #40]
    1a04:	add	x8, x8, x22
    1a08:	cmp	x8, x24
    1a0c:	str	x8, [x19, #40]
    1a10:	b.ls	1a38 <deflate+0x8c8>  // b.plast
    1a14:	ldr	x9, [x19, #56]
    1a18:	ldr	w9, [x9, #68]
    1a1c:	cbz	w9, 1a38 <deflate+0x8c8>
    1a20:	ldr	x9, [x19, #16]
    1a24:	ldr	x0, [x20, #96]
    1a28:	sub	w2, w8, w24
    1a2c:	add	x1, x9, x24
    1a30:	bl	0 <crc32>
    1a34:	str	x0, [x20, #96]
    1a38:	str	xzr, [x19, #64]
    1a3c:	mov	w8, #0x49                  	// #73
    1a40:	str	w8, [x19, #8]
    1a44:	ldr	x8, [x19, #56]
    1a48:	ldr	x8, [x8, #40]
    1a4c:	cbz	x8, 1b88 <deflate+0xa18>
    1a50:	ldr	x9, [x19, #40]
    1a54:	mov	x8, x9
    1a58:	ldr	x10, [x19, #24]
    1a5c:	cmp	x9, x10
    1a60:	b.ne	1b2c <deflate+0x9bc>  // b.any
    1a64:	b	1a78 <deflate+0x908>
    1a68:	ldr	x9, [x19, #40]
    1a6c:	ldr	x10, [x19, #24]
    1a70:	cmp	x9, x10
    1a74:	b.ne	1b2c <deflate+0x9bc>  // b.any
    1a78:	cmp	x9, x8
    1a7c:	b.ls	1aa4 <deflate+0x934>  // b.plast
    1a80:	ldr	x10, [x19, #56]
    1a84:	ldr	w10, [x10, #68]
    1a88:	cbz	w10, 1aa4 <deflate+0x934>
    1a8c:	ldr	x10, [x19, #16]
    1a90:	ldr	x0, [x20, #96]
    1a94:	sub	w2, w9, w8
    1a98:	add	x1, x10, x8
    1a9c:	bl	0 <crc32>
    1aa0:	str	x0, [x20, #96]
    1aa4:	ldr	x22, [x20, #56]
    1aa8:	mov	x0, x22
    1aac:	bl	0 <_tr_flush_bits>
    1ab0:	ldr	w8, [x22, #40]
    1ab4:	ldr	w9, [x20, #32]
    1ab8:	cmp	w9, w8
    1abc:	csel	w24, w9, w8, cc  // cc = lo, ul, last
    1ac0:	cbz	w24, 1b20 <deflate+0x9b0>
    1ac4:	ldr	x0, [x20, #24]
    1ac8:	ldr	x1, [x22, #32]
    1acc:	mov	w23, w24
    1ad0:	mov	x2, x23
    1ad4:	bl	0 <memcpy>
    1ad8:	ldr	x8, [x20, #24]
    1adc:	add	x8, x8, x23
    1ae0:	str	x8, [x20, #24]
    1ae4:	ldr	x8, [x22, #32]
    1ae8:	add	x8, x8, x23
    1aec:	str	x8, [x22, #32]
    1af0:	ldr	x8, [x20, #40]
    1af4:	ldr	w9, [x20, #32]
    1af8:	add	x8, x8, x23
    1afc:	sub	w9, w9, w24
    1b00:	str	x8, [x20, #40]
    1b04:	str	w9, [x20, #32]
    1b08:	ldr	x8, [x22, #40]
    1b0c:	subs	x8, x8, x23
    1b10:	str	x8, [x22, #40]
    1b14:	b.ne	1b20 <deflate+0x9b0>  // b.any
    1b18:	ldr	x8, [x22, #16]
    1b1c:	str	x8, [x22, #32]
    1b20:	ldr	x8, [x19, #40]
    1b24:	cbnz	x8, 2814 <deflate+0x16a4>
    1b28:	mov	x9, xzr
    1b2c:	ldp	x10, x11, [x19, #56]
    1b30:	ldr	x10, [x10, #40]
    1b34:	add	x12, x11, #0x1
    1b38:	str	x12, [x19, #64]
    1b3c:	add	x12, x9, #0x1
    1b40:	ldrb	w10, [x10, x11]
    1b44:	ldr	x11, [x19, #16]
    1b48:	str	x12, [x19, #40]
    1b4c:	strb	w10, [x11, x9]
    1b50:	cbnz	w10, 1a68 <deflate+0x8f8>
    1b54:	ldr	x9, [x19, #56]
    1b58:	ldr	w9, [x9, #68]
    1b5c:	cbz	w9, 1b84 <deflate+0xa14>
    1b60:	ldr	x9, [x19, #40]
    1b64:	cmp	x9, x8
    1b68:	b.ls	1b84 <deflate+0xa14>  // b.plast
    1b6c:	ldr	x10, [x19, #16]
    1b70:	ldr	x0, [x20, #96]
    1b74:	sub	w2, w9, w8
    1b78:	add	x1, x10, x8
    1b7c:	bl	0 <crc32>
    1b80:	str	x0, [x20, #96]
    1b84:	str	xzr, [x19, #64]
    1b88:	mov	w8, #0x5b                  	// #91
    1b8c:	str	w8, [x19, #8]
    1b90:	ldr	x8, [x19, #56]
    1b94:	ldr	x8, [x8, #56]
    1b98:	cbz	x8, 1cd0 <deflate+0xb60>
    1b9c:	ldr	x9, [x19, #40]
    1ba0:	mov	x8, x9
    1ba4:	ldr	x10, [x19, #24]
    1ba8:	cmp	x9, x10
    1bac:	b.ne	1c78 <deflate+0xb08>  // b.any
    1bb0:	b	1bc4 <deflate+0xa54>
    1bb4:	ldr	x9, [x19, #40]
    1bb8:	ldr	x10, [x19, #24]
    1bbc:	cmp	x9, x10
    1bc0:	b.ne	1c78 <deflate+0xb08>  // b.any
    1bc4:	cmp	x9, x8
    1bc8:	b.ls	1bf0 <deflate+0xa80>  // b.plast
    1bcc:	ldr	x10, [x19, #56]
    1bd0:	ldr	w10, [x10, #68]
    1bd4:	cbz	w10, 1bf0 <deflate+0xa80>
    1bd8:	ldr	x10, [x19, #16]
    1bdc:	ldr	x0, [x20, #96]
    1be0:	sub	w2, w9, w8
    1be4:	add	x1, x10, x8
    1be8:	bl	0 <crc32>
    1bec:	str	x0, [x20, #96]
    1bf0:	ldr	x22, [x20, #56]
    1bf4:	mov	x0, x22
    1bf8:	bl	0 <_tr_flush_bits>
    1bfc:	ldr	w8, [x22, #40]
    1c00:	ldr	w9, [x20, #32]
    1c04:	cmp	w9, w8
    1c08:	csel	w24, w9, w8, cc  // cc = lo, ul, last
    1c0c:	cbz	w24, 1c6c <deflate+0xafc>
    1c10:	ldr	x0, [x20, #24]
    1c14:	ldr	x1, [x22, #32]
    1c18:	mov	w23, w24
    1c1c:	mov	x2, x23
    1c20:	bl	0 <memcpy>
    1c24:	ldr	x8, [x20, #24]
    1c28:	add	x8, x8, x23
    1c2c:	str	x8, [x20, #24]
    1c30:	ldr	x8, [x22, #32]
    1c34:	add	x8, x8, x23
    1c38:	str	x8, [x22, #32]
    1c3c:	ldr	x8, [x20, #40]
    1c40:	ldr	w9, [x20, #32]
    1c44:	add	x8, x8, x23
    1c48:	sub	w9, w9, w24
    1c4c:	str	x8, [x20, #40]
    1c50:	str	w9, [x20, #32]
    1c54:	ldr	x8, [x22, #40]
    1c58:	subs	x8, x8, x23
    1c5c:	str	x8, [x22, #40]
    1c60:	b.ne	1c6c <deflate+0xafc>  // b.any
    1c64:	ldr	x8, [x22, #16]
    1c68:	str	x8, [x22, #32]
    1c6c:	ldr	x8, [x19, #40]
    1c70:	cbnz	x8, 2814 <deflate+0x16a4>
    1c74:	mov	x9, xzr
    1c78:	ldp	x10, x11, [x19, #56]
    1c7c:	ldr	x10, [x10, #56]
    1c80:	add	x12, x11, #0x1
    1c84:	str	x12, [x19, #64]
    1c88:	add	x12, x9, #0x1
    1c8c:	ldrb	w10, [x10, x11]
    1c90:	ldr	x11, [x19, #16]
    1c94:	str	x12, [x19, #40]
    1c98:	strb	w10, [x11, x9]
    1c9c:	cbnz	w10, 1bb4 <deflate+0xa44>
    1ca0:	ldr	x9, [x19, #56]
    1ca4:	ldr	w9, [x9, #68]
    1ca8:	cbz	w9, 1cd0 <deflate+0xb60>
    1cac:	ldr	x9, [x19, #40]
    1cb0:	cmp	x9, x8
    1cb4:	b.ls	1cd0 <deflate+0xb60>  // b.plast
    1cb8:	ldr	x10, [x19, #16]
    1cbc:	ldr	x0, [x20, #96]
    1cc0:	sub	w2, w9, w8
    1cc4:	add	x1, x10, x8
    1cc8:	bl	0 <crc32>
    1ccc:	str	x0, [x20, #96]
    1cd0:	mov	w8, #0x67                  	// #103
    1cd4:	str	w8, [x19, #8]
    1cd8:	ldr	x8, [x19, #56]
    1cdc:	ldr	w8, [x8, #68]
    1ce0:	cbz	w8, 1dc0 <deflate+0xc50>
    1ce4:	ldr	x8, [x19, #40]
    1ce8:	ldr	x9, [x19, #24]
    1cec:	add	x10, x8, #0x2
    1cf0:	cmp	x10, x9
    1cf4:	b.ls	1d7c <deflate+0xc0c>  // b.plast
    1cf8:	ldr	x22, [x20, #56]
    1cfc:	mov	x0, x22
    1d00:	bl	0 <_tr_flush_bits>
    1d04:	ldr	w8, [x22, #40]
    1d08:	ldr	w9, [x20, #32]
    1d0c:	cmp	w9, w8
    1d10:	csel	w24, w9, w8, cc  // cc = lo, ul, last
    1d14:	cbz	w24, 1d74 <deflate+0xc04>
    1d18:	ldr	x0, [x20, #24]
    1d1c:	ldr	x1, [x22, #32]
    1d20:	mov	w23, w24
    1d24:	mov	x2, x23
    1d28:	bl	0 <memcpy>
    1d2c:	ldr	x8, [x20, #24]
    1d30:	add	x8, x8, x23
    1d34:	str	x8, [x20, #24]
    1d38:	ldr	x8, [x22, #32]
    1d3c:	add	x8, x8, x23
    1d40:	str	x8, [x22, #32]
    1d44:	ldr	x8, [x20, #40]
    1d48:	ldr	w9, [x20, #32]
    1d4c:	add	x8, x8, x23
    1d50:	sub	w9, w9, w24
    1d54:	str	x8, [x20, #40]
    1d58:	str	w9, [x20, #32]
    1d5c:	ldr	x8, [x22, #40]
    1d60:	subs	x8, x8, x23
    1d64:	str	x8, [x22, #40]
    1d68:	b.ne	1d74 <deflate+0xc04>  // b.any
    1d6c:	ldr	x8, [x22, #16]
    1d70:	str	x8, [x22, #32]
    1d74:	ldr	x8, [x19, #40]
    1d78:	cbnz	x8, 2814 <deflate+0x16a4>
    1d7c:	ldr	x9, [x20, #96]
    1d80:	ldr	x10, [x19, #16]
    1d84:	add	x11, x8, #0x1
    1d88:	str	x11, [x19, #40]
    1d8c:	mov	x0, xzr
    1d90:	strb	w9, [x10, x8]
    1d94:	ldr	x8, [x20, #96]
    1d98:	ldr	x9, [x19, #40]
    1d9c:	ldr	x10, [x19, #16]
    1da0:	mov	x1, xzr
    1da4:	lsr	x8, x8, #8
    1da8:	add	x11, x9, #0x1
    1dac:	mov	w2, wzr
    1db0:	str	x11, [x19, #40]
    1db4:	strb	w8, [x10, x9]
    1db8:	bl	0 <crc32>
    1dbc:	str	x0, [x20, #96]
    1dc0:	mov	w8, #0x71                  	// #113
    1dc4:	str	w8, [x19, #8]
    1dc8:	ldr	x22, [x20, #56]
    1dcc:	mov	x0, x22
    1dd0:	bl	0 <_tr_flush_bits>
    1dd4:	ldr	w8, [x22, #40]
    1dd8:	ldr	w9, [x20, #32]
    1ddc:	cmp	w9, w8
    1de0:	csel	w24, w9, w8, cc  // cc = lo, ul, last
    1de4:	cbz	w24, 1e44 <deflate+0xcd4>
    1de8:	ldr	x0, [x20, #24]
    1dec:	ldr	x1, [x22, #32]
    1df0:	mov	w23, w24
    1df4:	mov	x2, x23
    1df8:	bl	0 <memcpy>
    1dfc:	ldr	x8, [x20, #24]
    1e00:	add	x8, x8, x23
    1e04:	str	x8, [x20, #24]
    1e08:	ldr	x8, [x22, #32]
    1e0c:	add	x8, x8, x23
    1e10:	str	x8, [x22, #32]
    1e14:	ldr	x8, [x20, #40]
    1e18:	ldr	w9, [x20, #32]
    1e1c:	add	x8, x8, x23
    1e20:	sub	w9, w9, w24
    1e24:	str	x8, [x20, #40]
    1e28:	str	w9, [x20, #32]
    1e2c:	ldr	x8, [x22, #40]
    1e30:	subs	x8, x8, x23
    1e34:	str	x8, [x22, #40]
    1e38:	b.ne	1e44 <deflate+0xcd4>  // b.any
    1e3c:	ldr	x8, [x22, #16]
    1e40:	str	x8, [x22, #32]
    1e44:	ldr	x8, [x19, #40]
    1e48:	cbnz	x8, 2814 <deflate+0x16a4>
    1e4c:	ldr	w8, [x20, #8]
    1e50:	cbnz	w8, 1e5c <deflate+0xcec>
    1e54:	ldr	w8, [x19, #180]
    1e58:	cbz	w8, 2034 <deflate+0xec4>
    1e5c:	ldrsw	x8, [x19, #196]
    1e60:	cbz	w8, 1fe8 <deflate+0xe78>
    1e64:	ldr	w9, [x19, #200]
    1e68:	cmp	w9, #0x3
    1e6c:	b.eq	2048 <deflate+0xed8>  // b.none
    1e70:	cmp	w9, #0x2
    1e74:	b.eq	1eb0 <deflate+0xd40>  // b.none
    1e78:	adrp	x9, 0 <deflateInit_>
    1e7c:	add	x9, x9, #0x0
    1e80:	add	x8, x9, x8, lsl #4
    1e84:	ldr	x8, [x8, #8]
    1e88:	mov	x0, x19
    1e8c:	mov	w1, w21
    1e90:	blr	x8
    1e94:	orr	w8, w0, #0x1
    1e98:	cmp	w8, #0x3
    1e9c:	b.eq	2000 <deflate+0xe90>  // b.none
    1ea0:	b	2008 <deflate+0xe98>
    1ea4:	ldr	x8, [x19]
    1ea8:	ldr	w8, [x8, #32]
    1eac:	cbz	w8, 2804 <deflate+0x1694>
    1eb0:	ldr	w8, [x19, #180]
    1eb4:	cbnz	w8, 1ec8 <deflate+0xd58>
    1eb8:	mov	x0, x19
    1ebc:	bl	700 <fill_window>
    1ec0:	ldr	w8, [x19, #180]
    1ec4:	cbz	w8, 2370 <deflate+0x1200>
    1ec8:	ldr	x8, [x19, #96]
    1ecc:	ldr	w9, [x19, #172]
    1ed0:	ldr	x10, [x19, #5904]
    1ed4:	ldr	w11, [x19, #5900]
    1ed8:	str	wzr, [x19, #160]
    1edc:	ldrb	w8, [x8, x9]
    1ee0:	strh	wzr, [x10, x11, lsl #1]
    1ee4:	ldr	x9, [x19, #5888]
    1ee8:	add	w10, w11, #0x1
    1eec:	str	w10, [x19, #5900]
    1ef0:	add	x10, x19, x8, lsl #2
    1ef4:	strb	w8, [x9, x11]
    1ef8:	ldrh	w8, [x10, #212]
    1efc:	add	w8, w8, #0x1
    1f00:	strh	w8, [x10, #212]
    1f04:	ldr	w8, [x19, #5896]
    1f08:	ldr	w9, [x19, #180]
    1f0c:	ldr	w10, [x19, #172]
    1f10:	ldr	w11, [x19, #5900]
    1f14:	sub	w12, w8, #0x1
    1f18:	sub	w9, w9, #0x1
    1f1c:	add	w8, w10, #0x1
    1f20:	cmp	w11, w12
    1f24:	str	w9, [x19, #180]
    1f28:	str	w8, [x19, #172]
    1f2c:	b.ne	1eb0 <deflate+0xd40>  // b.any
    1f30:	ldr	x9, [x19, #152]
    1f34:	tbnz	x9, #63, 1f44 <deflate+0xdd4>
    1f38:	ldr	x10, [x19, #96]
    1f3c:	add	x1, x10, w9, uxtw
    1f40:	b	1f48 <deflate+0xdd8>
    1f44:	mov	x1, xzr
    1f48:	mov	w8, w8
    1f4c:	sub	x2, x8, x9
    1f50:	mov	x0, x19
    1f54:	mov	w3, wzr
    1f58:	bl	0 <_tr_flush_block>
    1f5c:	ldr	w8, [x19, #172]
    1f60:	ldr	x24, [x19]
    1f64:	str	x8, [x19, #152]
    1f68:	ldr	x22, [x24, #56]
    1f6c:	mov	x0, x22
    1f70:	bl	0 <_tr_flush_bits>
    1f74:	ldr	w8, [x22, #40]
    1f78:	ldr	w9, [x24, #32]
    1f7c:	cmp	w9, w8
    1f80:	csel	w25, w9, w8, cc  // cc = lo, ul, last
    1f84:	cbz	w25, 1ea4 <deflate+0xd34>
    1f88:	ldr	x0, [x24, #24]
    1f8c:	ldr	x1, [x22, #32]
    1f90:	mov	w23, w25
    1f94:	mov	x2, x23
    1f98:	bl	0 <memcpy>
    1f9c:	ldr	x8, [x24, #24]
    1fa0:	add	x8, x8, x23
    1fa4:	str	x8, [x24, #24]
    1fa8:	ldr	x8, [x22, #32]
    1fac:	add	x8, x8, x23
    1fb0:	str	x8, [x22, #32]
    1fb4:	ldr	x8, [x24, #40]
    1fb8:	ldr	w9, [x24, #32]
    1fbc:	add	x8, x8, x23
    1fc0:	sub	w9, w9, w25
    1fc4:	str	x8, [x24, #40]
    1fc8:	str	w9, [x24, #32]
    1fcc:	ldr	x8, [x22, #40]
    1fd0:	subs	x8, x8, x23
    1fd4:	str	x8, [x22, #40]
    1fd8:	b.ne	1ea4 <deflate+0xd34>  // b.any
    1fdc:	ldr	x8, [x22, #16]
    1fe0:	str	x8, [x22, #32]
    1fe4:	b	1ea4 <deflate+0xd34>
    1fe8:	mov	x0, x19
    1fec:	mov	w1, w21
    1ff0:	bl	2a08 <deflate_stored>
    1ff4:	orr	w8, w0, #0x1
    1ff8:	cmp	w8, #0x3
    1ffc:	b.ne	2008 <deflate+0xe98>  // b.any
    2000:	mov	w8, #0x29a                 	// #666
    2004:	str	w8, [x19, #8]
    2008:	tst	w0, #0xfffffffd
    200c:	b.eq	2804 <deflate+0x1694>  // b.none
    2010:	cmp	w0, #0x1
    2014:	b.ne	2458 <deflate+0x12e8>  // b.any
    2018:	cmp	w21, #0x5
    201c:	b.eq	23d8 <deflate+0x1268>  // b.none
    2020:	mov	x0, x19
    2024:	cmp	w21, #0x1
    2028:	b.ne	2390 <deflate+0x1220>  // b.any
    202c:	bl	0 <_tr_align>
    2030:	b	23d8 <deflate+0x1268>
    2034:	cbz	w21, 2458 <deflate+0x12e8>
    2038:	ldr	w8, [x19, #8]
    203c:	cmp	w8, #0x29a
    2040:	b.ne	1e5c <deflate+0xcec>  // b.any
    2044:	b	2458 <deflate+0x12e8>
    2048:	adrp	x25, 0 <_length_code>
    204c:	mov	w24, #0x1                   	// #1
    2050:	add	x25, x25, #0x0
    2054:	adrp	x26, 0 <_dist_code>
    2058:	b	2068 <deflate+0xef8>
    205c:	ldr	x8, [x19]
    2060:	ldr	w8, [x8, #32]
    2064:	cbz	w8, 2804 <deflate+0x1694>
    2068:	ldr	w8, [x19, #180]
    206c:	cmp	w8, #0x103
    2070:	b.cs	20a4 <deflate+0xf34>  // b.hs, b.nlast
    2074:	mov	x0, x19
    2078:	bl	700 <fill_window>
    207c:	ldr	w8, [x19, #180]
    2080:	cbnz	w21, 208c <deflate+0xf1c>
    2084:	cmp	w8, #0x103
    2088:	b.cc	2804 <deflate+0x1694>  // b.lo, b.ul, b.last
    208c:	cbz	w8, 2650 <deflate+0x14e0>
    2090:	cmp	w8, #0x2
    2094:	str	wzr, [x19, #160]
    2098:	b.hi	20a8 <deflate+0xf38>  // b.pmore
    209c:	ldr	w9, [x19, #172]
    20a0:	b	2258 <deflate+0x10e8>
    20a4:	str	wzr, [x19, #160]
    20a8:	ldr	w9, [x19, #172]
    20ac:	cbz	w9, 2258 <deflate+0x10e8>
    20b0:	ldr	x10, [x19, #96]
    20b4:	add	x11, x10, x9
    20b8:	ldurb	w12, [x11, #-1]
    20bc:	ldrb	w10, [x11]
    20c0:	cmp	w12, w10
    20c4:	b.ne	2258 <deflate+0x10e8>  // b.any
    20c8:	ldrb	w10, [x11, #1]
    20cc:	cmp	w12, w10
    20d0:	b.ne	2258 <deflate+0x10e8>  // b.any
    20d4:	ldrb	w10, [x11, #2]
    20d8:	cmp	w12, w10
    20dc:	b.ne	2258 <deflate+0x10e8>  // b.any
    20e0:	mov	x13, xzr
    20e4:	add	x10, x11, #0x102
    20e8:	add	x14, x11, x13
    20ec:	ldrb	w15, [x14, #3]
    20f0:	cmp	w12, w15
    20f4:	b.ne	2174 <deflate+0x1004>  // b.any
    20f8:	ldrb	w14, [x14, #4]
    20fc:	cmp	w12, w14
    2100:	b.ne	217c <deflate+0x100c>  // b.any
    2104:	add	x14, x11, x13
    2108:	ldrb	w15, [x14, #5]
    210c:	cmp	w12, w15
    2110:	b.ne	2188 <deflate+0x1018>  // b.any
    2114:	ldrb	w14, [x14, #6]
    2118:	cmp	w12, w14
    211c:	b.ne	2190 <deflate+0x1020>  // b.any
    2120:	add	x14, x11, x13
    2124:	ldrb	w15, [x14, #7]
    2128:	cmp	w12, w15
    212c:	b.ne	219c <deflate+0x102c>  // b.any
    2130:	ldrb	w14, [x14, #8]
    2134:	cmp	w12, w14
    2138:	b.ne	21a4 <deflate+0x1034>  // b.any
    213c:	add	x14, x11, x13
    2140:	ldrb	w15, [x14, #9]
    2144:	cmp	w12, w15
    2148:	b.ne	21b0 <deflate+0x1040>  // b.any
    214c:	add	x15, x13, #0x2
    2150:	cmp	x15, #0xf9
    2154:	add	x13, x13, #0x8
    2158:	b.hi	2168 <deflate+0xff8>  // b.pmore
    215c:	ldrb	w14, [x14, #10]
    2160:	cmp	w12, w14
    2164:	b.eq	20e8 <deflate+0xf78>  // b.none
    2168:	add	x11, x11, x13
    216c:	add	x11, x11, #0x2
    2170:	b	21b4 <deflate+0x1044>
    2174:	add	x11, x14, #0x3
    2178:	b	21b4 <deflate+0x1044>
    217c:	add	x11, x11, x13
    2180:	add	x11, x11, #0x4
    2184:	b	21b4 <deflate+0x1044>
    2188:	add	x11, x14, #0x5
    218c:	b	21b4 <deflate+0x1044>
    2190:	add	x11, x11, x13
    2194:	add	x11, x11, #0x6
    2198:	b	21b4 <deflate+0x1044>
    219c:	add	x11, x14, #0x7
    21a0:	b	21b4 <deflate+0x1044>
    21a4:	add	x11, x11, x13
    21a8:	add	x11, x11, #0x8
    21ac:	b	21b4 <deflate+0x1044>
    21b0:	add	x11, x14, #0x9
    21b4:	sub	w10, w11, w10
    21b8:	add	w10, w10, #0x102
    21bc:	cmp	w10, w8
    21c0:	csel	w10, w8, w10, hi  // hi = pmore
    21c4:	subs	w8, w10, #0x3
    21c8:	str	w10, [x19, #160]
    21cc:	b.cc	2258 <deflate+0x10e8>  // b.lo, b.ul, b.last
    21d0:	ldr	x9, [x19, #5904]
    21d4:	ldr	w10, [x19, #5900]
    21d8:	strh	w24, [x9, x10, lsl #1]
    21dc:	add	w9, w10, #0x1
    21e0:	ldr	x11, [x19, #5888]
    21e4:	str	w9, [x19, #5900]
    21e8:	and	x9, x8, #0xff
    21ec:	ldrb	w9, [x25, x9]
    21f0:	strb	w8, [x11, x10]
    21f4:	mov	w8, #0x400                 	// #1024
    21f8:	ldrb	w10, [x26]
    21fc:	bfi	x8, x9, #2, #8
    2200:	add	x8, x8, x19
    2204:	ldrh	w9, [x8, #216]
    2208:	add	x10, x19, x10, lsl #2
    220c:	add	w9, w9, #0x1
    2210:	strh	w9, [x8, #216]
    2214:	ldrh	w8, [x10, #2504]
    2218:	add	w8, w8, #0x1
    221c:	strh	w8, [x10, #2504]
    2220:	ldr	w8, [x19, #160]
    2224:	ldr	w9, [x19, #180]
    2228:	ldr	w10, [x19, #172]
    222c:	ldr	w11, [x19, #5896]
    2230:	str	wzr, [x19, #160]
    2234:	sub	w9, w9, w8
    2238:	add	w8, w10, w8
    223c:	ldr	w10, [x19, #5900]
    2240:	sub	w11, w11, #0x1
    2244:	str	w9, [x19, #180]
    2248:	str	w8, [x19, #172]
    224c:	cmp	w10, w11
    2250:	b.ne	2068 <deflate+0xef8>  // b.any
    2254:	b	22b8 <deflate+0x1148>
    2258:	ldr	x8, [x19, #96]
    225c:	ldr	x10, [x19, #5904]
    2260:	ldr	w11, [x19, #5900]
    2264:	ldrb	w8, [x8, w9, uxtw]
    2268:	strh	wzr, [x10, x11, lsl #1]
    226c:	ldr	x9, [x19, #5888]
    2270:	add	w10, w11, #0x1
    2274:	str	w10, [x19, #5900]
    2278:	add	x10, x19, x8, lsl #2
    227c:	strb	w8, [x9, x11]
    2280:	ldrh	w8, [x10, #212]
    2284:	add	w8, w8, #0x1
    2288:	strh	w8, [x10, #212]
    228c:	ldr	w8, [x19, #5896]
    2290:	ldr	w9, [x19, #180]
    2294:	ldr	w10, [x19, #172]
    2298:	ldr	w11, [x19, #5900]
    229c:	sub	w12, w8, #0x1
    22a0:	sub	w9, w9, #0x1
    22a4:	add	w8, w10, #0x1
    22a8:	cmp	w11, w12
    22ac:	str	w9, [x19, #180]
    22b0:	str	w8, [x19, #172]
    22b4:	b.ne	2068 <deflate+0xef8>  // b.any
    22b8:	ldr	x9, [x19, #152]
    22bc:	tbnz	x9, #63, 22cc <deflate+0x115c>
    22c0:	ldr	x10, [x19, #96]
    22c4:	add	x1, x10, w9, uxtw
    22c8:	b	22d0 <deflate+0x1160>
    22cc:	mov	x1, xzr
    22d0:	mov	w8, w8
    22d4:	sub	x2, x8, x9
    22d8:	mov	x0, x19
    22dc:	mov	w3, wzr
    22e0:	bl	0 <_tr_flush_block>
    22e4:	ldr	w8, [x19, #172]
    22e8:	ldr	x27, [x19]
    22ec:	str	x8, [x19, #152]
    22f0:	ldr	x22, [x27, #56]
    22f4:	mov	x0, x22
    22f8:	bl	0 <_tr_flush_bits>
    22fc:	ldr	w8, [x22, #40]
    2300:	ldr	w9, [x27, #32]
    2304:	cmp	w9, w8
    2308:	csel	w28, w9, w8, cc  // cc = lo, ul, last
    230c:	cbz	w28, 205c <deflate+0xeec>
    2310:	ldr	x0, [x27, #24]
    2314:	ldr	x1, [x22, #32]
    2318:	mov	w23, w28
    231c:	mov	x2, x23
    2320:	bl	0 <memcpy>
    2324:	ldr	x8, [x27, #24]
    2328:	add	x8, x8, x23
    232c:	str	x8, [x27, #24]
    2330:	ldr	x8, [x22, #32]
    2334:	add	x8, x8, x23
    2338:	str	x8, [x22, #32]
    233c:	ldr	x8, [x27, #40]
    2340:	ldr	w9, [x27, #32]
    2344:	add	x8, x8, x23
    2348:	sub	w9, w9, w28
    234c:	str	x8, [x27, #40]
    2350:	str	w9, [x27, #32]
    2354:	ldr	x8, [x22, #40]
    2358:	subs	x8, x8, x23
    235c:	str	x8, [x22, #40]
    2360:	b.ne	205c <deflate+0xeec>  // b.any
    2364:	ldr	x8, [x22, #16]
    2368:	str	x8, [x22, #32]
    236c:	b	205c <deflate+0xeec>
    2370:	cbz	w21, 2804 <deflate+0x1694>
    2374:	cmp	w21, #0x4
    2378:	str	wzr, [x19, #5932]
    237c:	b.ne	2748 <deflate+0x15d8>  // b.any
    2380:	ldr	x8, [x19, #152]
    2384:	tbz	x8, #63, 2664 <deflate+0x14f4>
    2388:	mov	x1, xzr
    238c:	b	266c <deflate+0x14fc>
    2390:	mov	x1, xzr
    2394:	mov	x2, xzr
    2398:	mov	w3, wzr
    239c:	bl	0 <_tr_stored_block>
    23a0:	cmp	w21, #0x3
    23a4:	b.ne	23d8 <deflate+0x1268>  // b.any
    23a8:	ldr	w8, [x19, #132]
    23ac:	ldr	x0, [x19, #120]
    23b0:	mov	w1, wzr
    23b4:	sub	w8, w8, #0x1
    23b8:	lsl	x2, x8, #1
    23bc:	strh	wzr, [x0, x2]
    23c0:	bl	0 <memset>
    23c4:	ldr	w8, [x19, #180]
    23c8:	cbnz	w8, 23d8 <deflate+0x1268>
    23cc:	str	wzr, [x19, #172]
    23d0:	str	xzr, [x19, #152]
    23d4:	str	wzr, [x19, #5932]
    23d8:	ldr	x22, [x20, #56]
    23dc:	mov	x0, x22
    23e0:	bl	0 <_tr_flush_bits>
    23e4:	ldr	w9, [x22, #40]
    23e8:	ldr	w8, [x20, #32]
    23ec:	cmp	w8, w9
    23f0:	csel	w24, w8, w9, cc  // cc = lo, ul, last
    23f4:	cbz	w24, 2454 <deflate+0x12e4>
    23f8:	ldr	x0, [x20, #24]
    23fc:	ldr	x1, [x22, #32]
    2400:	mov	w23, w24
    2404:	mov	x2, x23
    2408:	bl	0 <memcpy>
    240c:	ldr	x8, [x20, #24]
    2410:	add	x8, x8, x23
    2414:	str	x8, [x20, #24]
    2418:	ldr	x8, [x22, #32]
    241c:	add	x8, x8, x23
    2420:	str	x8, [x22, #32]
    2424:	ldr	x8, [x20, #40]
    2428:	ldr	w9, [x20, #32]
    242c:	add	x10, x8, x23
    2430:	sub	w8, w9, w24
    2434:	str	x10, [x20, #40]
    2438:	str	w8, [x20, #32]
    243c:	ldr	x9, [x22, #40]
    2440:	subs	x9, x9, x23
    2444:	str	x9, [x22, #40]
    2448:	b.ne	2454 <deflate+0x12e4>  // b.any
    244c:	ldr	x9, [x22, #16]
    2450:	str	x9, [x22, #32]
    2454:	cbz	w8, 2814 <deflate+0x16a4>
    2458:	cmp	w21, #0x4
    245c:	b.ne	280c <deflate+0x169c>  // b.any
    2460:	ldr	w9, [x19, #48]
    2464:	cmp	w9, #0x1
    2468:	b.lt	2544 <deflate+0x13d4>  // b.tstop
    246c:	ldr	x8, [x20, #96]
    2470:	cmp	w9, #0x2
    2474:	b.ne	254c <deflate+0x13dc>  // b.any
    2478:	ldr	x9, [x19, #40]
    247c:	ldr	x10, [x19, #16]
    2480:	add	x11, x9, #0x1
    2484:	str	x11, [x19, #40]
    2488:	strb	w8, [x10, x9]
    248c:	ldr	x8, [x20, #96]
    2490:	ldr	x9, [x19, #40]
    2494:	ldr	x10, [x19, #16]
    2498:	lsr	x8, x8, #8
    249c:	add	x11, x9, #0x1
    24a0:	str	x11, [x19, #40]
    24a4:	strb	w8, [x10, x9]
    24a8:	ldr	x8, [x20, #96]
    24ac:	ldr	x9, [x19, #40]
    24b0:	ldr	x10, [x19, #16]
    24b4:	lsr	x8, x8, #16
    24b8:	add	x11, x9, #0x1
    24bc:	str	x11, [x19, #40]
    24c0:	strb	w8, [x10, x9]
    24c4:	ldr	x8, [x20, #96]
    24c8:	ldr	x9, [x19, #40]
    24cc:	ldr	x10, [x19, #16]
    24d0:	lsr	x8, x8, #24
    24d4:	add	x11, x9, #0x1
    24d8:	str	x11, [x19, #40]
    24dc:	strb	w8, [x10, x9]
    24e0:	ldr	x8, [x19, #40]
    24e4:	ldr	x9, [x20, #16]
    24e8:	ldr	x10, [x19, #16]
    24ec:	add	x11, x8, #0x1
    24f0:	str	x11, [x19, #40]
    24f4:	strb	w9, [x10, x8]
    24f8:	ldr	x8, [x20, #16]
    24fc:	ldr	x9, [x19, #40]
    2500:	ldr	x10, [x19, #16]
    2504:	lsr	x8, x8, #8
    2508:	add	x11, x9, #0x1
    250c:	str	x11, [x19, #40]
    2510:	strb	w8, [x10, x9]
    2514:	ldr	x8, [x20, #16]
    2518:	ldr	x9, [x19, #40]
    251c:	ldr	x10, [x19, #16]
    2520:	lsr	x8, x8, #16
    2524:	add	x11, x9, #0x1
    2528:	str	x11, [x19, #40]
    252c:	strb	w8, [x10, x9]
    2530:	ldr	x8, [x20, #16]
    2534:	ldr	x9, [x19, #40]
    2538:	ldr	x10, [x19, #16]
    253c:	lsr	x8, x8, #24
    2540:	b	25a0 <deflate+0x1430>
    2544:	mov	w0, #0x1                   	// #1
    2548:	b	11f8 <deflate+0x88>
    254c:	ldr	x9, [x19, #40]
    2550:	ldr	x10, [x19, #16]
    2554:	lsr	x11, x8, #24
    2558:	lsr	x8, x8, #16
    255c:	add	x12, x9, #0x1
    2560:	str	x12, [x19, #40]
    2564:	strb	w11, [x10, x9]
    2568:	ldr	x9, [x19, #40]
    256c:	ldr	x10, [x19, #16]
    2570:	add	x11, x9, #0x1
    2574:	str	x11, [x19, #40]
    2578:	strb	w8, [x10, x9]
    257c:	ldr	x8, [x20, #96]
    2580:	ldr	x9, [x19, #40]
    2584:	ldr	x10, [x19, #16]
    2588:	ubfx	x11, x8, #8, #24
    258c:	add	x12, x9, #0x1
    2590:	str	x12, [x19, #40]
    2594:	strb	w11, [x10, x9]
    2598:	ldr	x9, [x19, #40]
    259c:	ldr	x10, [x19, #16]
    25a0:	add	x11, x9, #0x1
    25a4:	add	x9, x10, x9
    25a8:	str	x11, [x19, #40]
    25ac:	strb	w8, [x9]
    25b0:	ldr	x21, [x20, #56]
    25b4:	mov	x0, x21
    25b8:	bl	0 <_tr_flush_bits>
    25bc:	ldr	w8, [x21, #40]
    25c0:	ldr	w9, [x20, #32]
    25c4:	cmp	w9, w8
    25c8:	csel	w23, w9, w8, cc  // cc = lo, ul, last
    25cc:	cbz	w23, 262c <deflate+0x14bc>
    25d0:	ldr	x0, [x20, #24]
    25d4:	ldr	x1, [x21, #32]
    25d8:	mov	w22, w23
    25dc:	mov	x2, x22
    25e0:	bl	0 <memcpy>
    25e4:	ldr	x8, [x20, #24]
    25e8:	add	x8, x8, x22
    25ec:	str	x8, [x20, #24]
    25f0:	ldr	x8, [x21, #32]
    25f4:	add	x8, x8, x22
    25f8:	str	x8, [x21, #32]
    25fc:	ldr	x8, [x20, #40]
    2600:	ldr	w9, [x20, #32]
    2604:	add	x8, x8, x22
    2608:	sub	w9, w9, w23
    260c:	str	x8, [x20, #40]
    2610:	str	w9, [x20, #32]
    2614:	ldr	x8, [x21, #40]
    2618:	subs	x8, x8, x22
    261c:	str	x8, [x21, #40]
    2620:	b.ne	262c <deflate+0x14bc>  // b.any
    2624:	ldr	x8, [x21, #16]
    2628:	str	x8, [x21, #32]
    262c:	ldr	w8, [x19, #48]
    2630:	cmp	w8, #0x1
    2634:	b.lt	2640 <deflate+0x14d0>  // b.tstop
    2638:	neg	w8, w8
    263c:	str	w8, [x19, #48]
    2640:	ldr	x8, [x19, #40]
    2644:	cmp	x8, #0x0
    2648:	cset	w0, eq  // eq = none
    264c:	b	11f8 <deflate+0x88>
    2650:	cmp	w21, #0x4
    2654:	str	wzr, [x19, #5932]
    2658:	b.ne	272c <deflate+0x15bc>  // b.any
    265c:	ldr	x8, [x19, #152]
    2660:	tbnz	x8, #63, 2388 <deflate+0x1218>
    2664:	ldr	x9, [x19, #96]
    2668:	add	x1, x9, w8, uxtw
    266c:	ldr	w9, [x19, #172]
    2670:	mov	w3, #0x1                   	// #1
    2674:	mov	x0, x19
    2678:	sub	x2, x9, x8
    267c:	bl	0 <_tr_flush_block>
    2680:	ldr	w8, [x19, #172]
    2684:	ldr	x24, [x19]
    2688:	str	x8, [x19, #152]
    268c:	ldr	x22, [x24, #56]
    2690:	mov	x0, x22
    2694:	bl	0 <_tr_flush_bits>
    2698:	ldr	w8, [x22, #40]
    269c:	ldr	w9, [x24, #32]
    26a0:	cmp	w9, w8
    26a4:	csel	w25, w9, w8, cc  // cc = lo, ul, last
    26a8:	cbz	w25, 2708 <deflate+0x1598>
    26ac:	ldr	x0, [x24, #24]
    26b0:	ldr	x1, [x22, #32]
    26b4:	mov	w23, w25
    26b8:	mov	x2, x23
    26bc:	bl	0 <memcpy>
    26c0:	ldr	x8, [x24, #24]
    26c4:	add	x8, x8, x23
    26c8:	str	x8, [x24, #24]
    26cc:	ldr	x8, [x22, #32]
    26d0:	add	x8, x8, x23
    26d4:	str	x8, [x22, #32]
    26d8:	ldr	x8, [x24, #40]
    26dc:	ldr	w9, [x24, #32]
    26e0:	add	x8, x8, x23
    26e4:	sub	w9, w9, w25
    26e8:	str	x8, [x24, #40]
    26ec:	str	w9, [x24, #32]
    26f0:	ldr	x8, [x22, #40]
    26f4:	subs	x8, x8, x23
    26f8:	str	x8, [x22, #40]
    26fc:	b.ne	2708 <deflate+0x1598>  // b.any
    2700:	ldr	x8, [x22, #16]
    2704:	str	x8, [x22, #32]
    2708:	ldr	x8, [x19]
    270c:	ldr	w8, [x8, #32]
    2710:	cmp	w8, #0x0
    2714:	mov	w8, #0x2                   	// #2
    2718:	cinc	w0, w8, ne  // ne = any
    271c:	orr	w8, w0, #0x1
    2720:	cmp	w8, #0x3
    2724:	b.eq	2000 <deflate+0xe90>  // b.none
    2728:	b	2008 <deflate+0xe98>
    272c:	ldr	w8, [x19, #5900]
    2730:	cbz	w8, 2018 <deflate+0xea8>
    2734:	ldr	x8, [x19, #152]
    2738:	tbnz	x8, #63, 2758 <deflate+0x15e8>
    273c:	ldr	x9, [x19, #96]
    2740:	add	x1, x9, w8, uxtw
    2744:	b	275c <deflate+0x15ec>
    2748:	ldr	w8, [x19, #5900]
    274c:	cbz	w8, 2018 <deflate+0xea8>
    2750:	ldr	x8, [x19, #152]
    2754:	tbz	x8, #63, 273c <deflate+0x15cc>
    2758:	mov	x1, xzr
    275c:	ldr	w9, [x19, #172]
    2760:	mov	x0, x19
    2764:	mov	w3, wzr
    2768:	sub	x2, x9, x8
    276c:	bl	0 <_tr_flush_block>
    2770:	ldr	w8, [x19, #172]
    2774:	ldr	x24, [x19]
    2778:	str	x8, [x19, #152]
    277c:	ldr	x22, [x24, #56]
    2780:	mov	x0, x22
    2784:	bl	0 <_tr_flush_bits>
    2788:	ldr	w8, [x22, #40]
    278c:	ldr	w9, [x24, #32]
    2790:	cmp	w9, w8
    2794:	csel	w25, w9, w8, cc  // cc = lo, ul, last
    2798:	cbz	w25, 27f8 <deflate+0x1688>
    279c:	ldr	x0, [x24, #24]
    27a0:	ldr	x1, [x22, #32]
    27a4:	mov	w23, w25
    27a8:	mov	x2, x23
    27ac:	bl	0 <memcpy>
    27b0:	ldr	x8, [x24, #24]
    27b4:	add	x8, x8, x23
    27b8:	str	x8, [x24, #24]
    27bc:	ldr	x8, [x22, #32]
    27c0:	add	x8, x8, x23
    27c4:	str	x8, [x22, #32]
    27c8:	ldr	x8, [x24, #40]
    27cc:	ldr	w9, [x24, #32]
    27d0:	add	x8, x8, x23
    27d4:	sub	w9, w9, w25
    27d8:	str	x8, [x24, #40]
    27dc:	str	w9, [x24, #32]
    27e0:	ldr	x8, [x22, #40]
    27e4:	subs	x8, x8, x23
    27e8:	str	x8, [x22, #40]
    27ec:	b.ne	27f8 <deflate+0x1688>  // b.any
    27f0:	ldr	x8, [x22, #16]
    27f4:	str	x8, [x22, #32]
    27f8:	ldr	x8, [x19]
    27fc:	ldr	w8, [x8, #32]
    2800:	cbnz	w8, 2018 <deflate+0xea8>
    2804:	ldr	w8, [x20, #32]
    2808:	cbz	w8, 2814 <deflate+0x16a4>
    280c:	mov	w0, wzr
    2810:	b	11f8 <deflate+0x88>
    2814:	mov	w8, #0xffffffff            	// #-1
    2818:	mov	w0, wzr
    281c:	str	w8, [x19, #76]
    2820:	b	11f8 <deflate+0x88>

0000000000002824 <deflateTune>:
    2824:	cbz	x0, 284c <deflateTune+0x28>
    2828:	ldr	x8, [x0, #64]
    282c:	cbz	x8, 284c <deflateTune+0x28>
    2830:	ldr	x8, [x0, #72]
    2834:	cbz	x8, 284c <deflateTune+0x28>
    2838:	ldr	x8, [x0, #56]
    283c:	cbz	x8, 284c <deflateTune+0x28>
    2840:	ldr	x9, [x8]
    2844:	cmp	x9, x0
    2848:	b.eq	2854 <deflateTune+0x30>  // b.none
    284c:	mov	w0, #0xfffffffe            	// #-2
    2850:	ret
    2854:	ldr	w9, [x8, #8]
    2858:	sub	w10, w9, #0x39
    285c:	cmp	w10, #0x38
    2860:	b.hi	2894 <deflateTune+0x70>  // b.pmore
    2864:	mov	w11, #0x1                   	// #1
    2868:	lsl	x10, x11, x10
    286c:	mov	x11, #0x1001                	// #4097
    2870:	movk	x11, #0x1, lsl #16
    2874:	movk	x11, #0x4004, lsl #32
    2878:	movk	x11, #0x100, lsl #48
    287c:	tst	x10, x11
    2880:	b.eq	2894 <deflateTune+0x70>  // b.none
    2884:	mov	w0, wzr
    2888:	stp	w1, w3, [x8, #204]
    288c:	stp	w4, w2, [x8, #188]
    2890:	ret
    2894:	cmp	w9, #0x29a
    2898:	b.eq	2884 <deflateTune+0x60>  // b.none
    289c:	cmp	w9, #0x2a
    28a0:	b.ne	284c <deflateTune+0x28>  // b.any
    28a4:	b	2884 <deflateTune+0x60>

00000000000028a8 <deflateBound>:
    28a8:	add	x8, x1, #0x7
    28ac:	add	x9, x1, x8, lsr #3
    28b0:	add	x10, x1, #0x3f
    28b4:	add	x9, x9, x10, lsr #6
    28b8:	cbz	x0, 28e0 <deflateBound+0x38>
    28bc:	ldr	x10, [x0, #64]
    28c0:	cbz	x10, 28e0 <deflateBound+0x38>
    28c4:	ldr	x10, [x0, #72]
    28c8:	cbz	x10, 28e0 <deflateBound+0x38>
    28cc:	ldr	x10, [x0, #56]
    28d0:	cbz	x10, 28e0 <deflateBound+0x38>
    28d4:	ldr	x11, [x10]
    28d8:	cmp	x11, x0
    28dc:	b.eq	28e8 <deflateBound+0x40>  // b.none
    28e0:	add	x0, x9, #0xb
    28e4:	ret
    28e8:	ldr	w11, [x10, #8]
    28ec:	sub	w12, w11, #0x39
    28f0:	cmp	w12, #0x38
    28f4:	b.hi	2948 <deflateBound+0xa0>  // b.pmore
    28f8:	mov	w13, #0x1                   	// #1
    28fc:	lsl	x12, x13, x12
    2900:	mov	x13, #0x1001                	// #4097
    2904:	movk	x13, #0x1, lsl #16
    2908:	movk	x13, #0x4004, lsl #32
    290c:	movk	x13, #0x100, lsl #48
    2910:	tst	x12, x13
    2914:	b.eq	2948 <deflateBound+0xa0>  // b.none
    2918:	ldr	w11, [x10, #48]
    291c:	cbz	w11, 295c <deflateBound+0xb4>
    2920:	cmp	w11, #0x2
    2924:	b.eq	2964 <deflateBound+0xbc>  // b.none
    2928:	cmp	w11, #0x1
    292c:	b.ne	2984 <deflateBound+0xdc>  // b.any
    2930:	ldr	w11, [x10, #172]
    2934:	mov	w12, #0xa                   	// #10
    2938:	cmp	w11, #0x0
    293c:	mov	w11, #0x6                   	// #6
    2940:	csel	x11, x11, x12, eq  // eq = none
    2944:	b	29d0 <deflateBound+0x128>
    2948:	cmp	w11, #0x2a
    294c:	b.eq	2918 <deflateBound+0x70>  // b.none
    2950:	cmp	w11, #0x29a
    2954:	b.ne	28e0 <deflateBound+0x38>  // b.any
    2958:	b	2918 <deflateBound+0x70>
    295c:	mov	x11, xzr
    2960:	b	29d0 <deflateBound+0x128>
    2964:	ldr	x11, [x10, #56]
    2968:	cbz	x11, 298c <deflateBound+0xe4>
    296c:	ldr	x12, [x11, #24]
    2970:	cbz	x12, 2994 <deflateBound+0xec>
    2974:	ldr	w12, [x11, #32]
    2978:	add	w12, w12, #0x2
    297c:	add	x12, x12, #0x12
    2980:	b	2998 <deflateBound+0xf0>
    2984:	mov	w11, #0x6                   	// #6
    2988:	b	29d0 <deflateBound+0x128>
    298c:	mov	w11, #0x12                  	// #18
    2990:	b	29d0 <deflateBound+0x128>
    2994:	mov	w12, #0x12                  	// #18
    2998:	ldr	x13, [x11, #40]
    299c:	cbz	x13, 29ac <deflateBound+0x104>
    29a0:	ldrb	w14, [x13], #1
    29a4:	add	x12, x12, #0x1
    29a8:	cbnz	w14, 29a0 <deflateBound+0xf8>
    29ac:	ldr	x13, [x11, #56]
    29b0:	cbz	x13, 29c0 <deflateBound+0x118>
    29b4:	ldrb	w14, [x13], #1
    29b8:	add	x12, x12, #0x1
    29bc:	cbnz	w14, 29b4 <deflateBound+0x10c>
    29c0:	ldr	w11, [x11, #68]
    29c4:	add	x13, x12, #0x2
    29c8:	cmp	w11, #0x0
    29cc:	csel	x11, x12, x13, eq  // eq = none
    29d0:	ldr	w12, [x10, #84]
    29d4:	cmp	w12, #0xf
    29d8:	b.ne	29fc <deflateBound+0x154>  // b.any
    29dc:	ldr	w10, [x10, #136]
    29e0:	cmp	w10, #0xf
    29e4:	b.ne	29fc <deflateBound+0x154>  // b.any
    29e8:	add	x8, x8, x1, lsr #12
    29ec:	add	x8, x8, x1, lsr #14
    29f0:	add	x8, x8, x1, lsr #25
    29f4:	add	x0, x8, x11
    29f8:	ret
    29fc:	add	x8, x9, #0x5
    2a00:	add	x0, x8, x11
    2a04:	ret

0000000000002a08 <deflate_stored>:
    2a08:	sub	sp, sp, #0x70
    2a0c:	stp	x29, x30, [sp, #16]
    2a10:	stp	x28, x27, [sp, #32]
    2a14:	stp	x26, x25, [sp, #48]
    2a18:	stp	x24, x23, [sp, #64]
    2a1c:	stp	x22, x21, [sp, #80]
    2a20:	stp	x20, x19, [sp, #96]
    2a24:	ldr	x8, [x0]
    2a28:	ldr	x9, [x0, #24]
    2a2c:	ldr	w10, [x0, #80]
    2a30:	add	x29, sp, #0x10
    2a34:	ldr	w11, [x8, #8]
    2a38:	sub	x9, x9, #0x5
    2a3c:	cmp	x9, x10
    2a40:	mov	w20, w1
    2a44:	mov	x19, x0
    2a48:	csel	w26, w10, w9, hi  // hi = pmore
    2a4c:	stur	w11, [x29, #-4]
    2a50:	b	2ab4 <deflate_stored+0xac>
    2a54:	ldr	x0, [x25, #96]
    2a58:	mov	x1, x22
    2a5c:	mov	w2, w24
    2a60:	bl	0 <crc32>
    2a64:	str	x0, [x25, #96]
    2a68:	ldr	x8, [x25]
    2a6c:	ldr	x9, [x25, #16]
    2a70:	add	x8, x8, x23
    2a74:	add	x9, x9, x23
    2a78:	str	x8, [x25]
    2a7c:	str	x9, [x25, #16]
    2a80:	ldr	x25, [x19]
    2a84:	ldr	x22, [x25, #24]
    2a88:	ldr	w9, [x25, #32]
    2a8c:	ldr	x10, [x25, #40]
    2a90:	mov	w8, w28
    2a94:	add	x11, x22, x8
    2a98:	sub	w9, w9, w28
    2a9c:	add	x8, x10, x8
    2aa0:	str	x11, [x25, #24]
    2aa4:	str	w9, [x25, #32]
    2aa8:	str	x8, [x25, #40]
    2aac:	ldr	x8, [x19]
    2ab0:	cbnz	w21, 2d88 <deflate_stored+0x380>
    2ab4:	ldr	w9, [x19, #5940]
    2ab8:	ldr	w10, [x8, #32]
    2abc:	add	w9, w9, #0x2a
    2ac0:	asr	w9, w9, #3
    2ac4:	subs	w10, w10, w9
    2ac8:	b.cc	2cf0 <deflate_stored+0x2e8>  // b.lo, b.ul, b.last
    2acc:	ldr	w9, [x19, #172]
    2ad0:	ldr	w11, [x19, #152]
    2ad4:	ldr	w12, [x8, #8]
    2ad8:	sub	w24, w9, w11
    2adc:	add	x11, x24, x12
    2ae0:	add	w9, w24, w12
    2ae4:	mov	w12, #0xffff                	// #65535
    2ae8:	cmp	x11, x12
    2aec:	csel	w11, w9, w12, cc  // cc = lo, ul, last
    2af0:	cmp	w11, w10
    2af4:	csel	w28, w10, w11, hi  // hi = pmore
    2af8:	cmp	w28, w26
    2afc:	b.cs	2b28 <deflate_stored+0x120>  // b.hs, b.nlast
    2b00:	cmp	w20, #0x4
    2b04:	cset	w10, ne  // ne = any
    2b08:	cmp	w28, #0x0
    2b0c:	cset	w11, eq  // eq = none
    2b10:	cmp	w28, w9
    2b14:	mov	w22, wzr
    2b18:	b.ne	2cf4 <deflate_stored+0x2ec>  // b.any
    2b1c:	cbz	w20, 2cf4 <deflate_stored+0x2ec>
    2b20:	and	w10, w10, w11
    2b24:	cbnz	w10, 2cf4 <deflate_stored+0x2ec>
    2b28:	cmp	w20, #0x4
    2b2c:	cset	w8, eq  // eq = none
    2b30:	cmp	w28, w9
    2b34:	cset	w9, eq  // eq = none
    2b38:	and	w21, w8, w9
    2b3c:	mov	x0, x19
    2b40:	mov	x1, xzr
    2b44:	mov	x2, xzr
    2b48:	mov	w3, w21
    2b4c:	mov	w27, w20
    2b50:	bl	0 <_tr_stored_block>
    2b54:	ldr	x8, [x19, #16]
    2b58:	ldr	x9, [x19, #40]
    2b5c:	lsr	w10, w28, #8
    2b60:	add	x8, x9, x8
    2b64:	sturb	w28, [x8, #-4]
    2b68:	ldr	x8, [x19, #16]
    2b6c:	ldr	x9, [x19, #40]
    2b70:	add	x8, x9, x8
    2b74:	sturb	w10, [x8, #-3]
    2b78:	ldr	x8, [x19, #16]
    2b7c:	ldr	x9, [x19, #40]
    2b80:	mvn	w10, w28
    2b84:	add	x8, x9, x8
    2b88:	sturb	w10, [x8, #-2]
    2b8c:	ldr	x8, [x19, #16]
    2b90:	ldr	x9, [x19, #40]
    2b94:	lsr	w10, w10, #8
    2b98:	add	x8, x9, x8
    2b9c:	sturb	w10, [x8, #-1]
    2ba0:	ldr	x25, [x19]
    2ba4:	ldr	x22, [x25, #56]
    2ba8:	mov	x0, x22
    2bac:	bl	0 <_tr_flush_bits>
    2bb0:	ldr	w8, [x22, #40]
    2bb4:	ldr	w9, [x25, #32]
    2bb8:	cmp	w9, w8
    2bbc:	csel	w20, w9, w8, cc  // cc = lo, ul, last
    2bc0:	cbz	w20, 2c18 <deflate_stored+0x210>
    2bc4:	ldr	x0, [x25, #24]
    2bc8:	ldr	x1, [x22, #32]
    2bcc:	mov	w23, w20
    2bd0:	mov	x2, x23
    2bd4:	bl	0 <memcpy>
    2bd8:	ldr	x8, [x25, #24]
    2bdc:	add	x8, x8, x23
    2be0:	str	x8, [x25, #24]
    2be4:	ldr	x8, [x22, #32]
    2be8:	add	x8, x8, x23
    2bec:	str	x8, [x22, #32]
    2bf0:	ldr	x8, [x25, #40]
    2bf4:	ldr	w9, [x25, #32]
    2bf8:	add	x8, x8, x23
    2bfc:	sub	w9, w9, w20
    2c00:	str	x8, [x25, #40]
    2c04:	str	w9, [x25, #32]
    2c08:	ldr	x8, [x22, #40]
    2c0c:	subs	x8, x8, x23
    2c10:	str	x8, [x22, #40]
    2c14:	b.eq	2ce0 <deflate_stored+0x2d8>  // b.none
    2c18:	cbz	w24, 2c78 <deflate_stored+0x270>
    2c1c:	ldr	x8, [x19]
    2c20:	ldr	x9, [x19, #96]
    2c24:	ldr	x10, [x19, #152]
    2c28:	cmp	w24, w28
    2c2c:	ldr	x0, [x8, #24]
    2c30:	csel	w22, w28, w24, hi  // hi = pmore
    2c34:	add	x1, x9, x10
    2c38:	mov	x2, x22
    2c3c:	bl	0 <memcpy>
    2c40:	ldr	x8, [x19]
    2c44:	sub	w28, w28, w22
    2c48:	ldr	x9, [x8, #24]
    2c4c:	ldr	w10, [x8, #32]
    2c50:	ldr	x11, [x8, #40]
    2c54:	add	x9, x9, x22
    2c58:	sub	w10, w10, w22
    2c5c:	add	x11, x11, x22
    2c60:	str	x9, [x8, #24]
    2c64:	str	w10, [x8, #32]
    2c68:	str	x11, [x8, #40]
    2c6c:	ldr	x8, [x19, #152]
    2c70:	add	x8, x8, x22
    2c74:	str	x8, [x19, #152]
    2c78:	mov	w20, w27
    2c7c:	cbz	w28, 2aac <deflate_stored+0xa4>
    2c80:	ldr	x25, [x19]
    2c84:	ldr	w8, [x25, #8]
    2c88:	ldr	x22, [x25, #24]
    2c8c:	cmp	w8, w28
    2c90:	csel	w24, w28, w8, hi  // hi = pmore
    2c94:	cbz	w24, 2a88 <deflate_stored+0x80>
    2c98:	ldr	x1, [x25]
    2c9c:	mov	w23, w24
    2ca0:	sub	w8, w8, w24
    2ca4:	mov	x0, x22
    2ca8:	mov	x2, x23
    2cac:	str	w8, [x25, #8]
    2cb0:	bl	0 <memcpy>
    2cb4:	ldr	x8, [x25, #56]
    2cb8:	ldr	w8, [x8, #48]
    2cbc:	cmp	w8, #0x2
    2cc0:	b.eq	2a54 <deflate_stored+0x4c>  // b.none
    2cc4:	cmp	w8, #0x1
    2cc8:	b.ne	2a68 <deflate_stored+0x60>  // b.any
    2ccc:	ldr	x0, [x25, #96]
    2cd0:	mov	x1, x22
    2cd4:	mov	w2, w24
    2cd8:	bl	0 <adler32>
    2cdc:	b	2a64 <deflate_stored+0x5c>
    2ce0:	ldr	x8, [x22, #16]
    2ce4:	str	x8, [x22, #32]
    2ce8:	cbnz	w24, 2c1c <deflate_stored+0x214>
    2cec:	b	2c78 <deflate_stored+0x270>
    2cf0:	mov	w22, wzr
    2cf4:	ldr	w9, [x8, #8]
    2cf8:	ldur	w10, [x29, #-4]
    2cfc:	subs	w23, w10, w9
    2d00:	b.eq	2d9c <deflate_stored+0x394>  // b.none
    2d04:	ldr	w2, [x19, #80]
    2d08:	cmp	w23, w2
    2d0c:	b.cs	2db4 <deflate_stored+0x3ac>  // b.hs, b.nlast
    2d10:	ldr	x9, [x19, #104]
    2d14:	ldr	w8, [x19, #172]
    2d18:	mov	w21, w23
    2d1c:	sub	x9, x9, x8
    2d20:	cmp	x9, x21
    2d24:	b.hi	2d54 <deflate_stored+0x34c>  // b.pmore
    2d28:	ldr	x0, [x19, #96]
    2d2c:	sub	w8, w8, w2
    2d30:	str	w8, [x19, #172]
    2d34:	add	x1, x0, x2
    2d38:	mov	x2, x8
    2d3c:	bl	0 <memcpy>
    2d40:	ldr	w8, [x19, #5928]
    2d44:	cmp	w8, #0x1
    2d48:	b.hi	2d54 <deflate_stored+0x34c>  // b.pmore
    2d4c:	add	w8, w8, #0x1
    2d50:	str	w8, [x19, #5928]
    2d54:	ldr	x8, [x19]
    2d58:	ldr	x9, [x19, #96]
    2d5c:	ldr	w10, [x19, #172]
    2d60:	mov	x2, x21
    2d64:	ldr	x8, [x8]
    2d68:	add	x0, x9, x10
    2d6c:	sub	x1, x8, x21
    2d70:	bl	0 <memcpy>
    2d74:	ldr	w8, [x19, #172]
    2d78:	ldr	w9, [x19, #80]
    2d7c:	add	w8, w8, w23
    2d80:	str	w8, [x19, #172]
    2d84:	b	2dd8 <deflate_stored+0x3d0>
    2d88:	mov	w22, #0x1                   	// #1
    2d8c:	ldr	w9, [x8, #8]
    2d90:	ldur	w10, [x29, #-4]
    2d94:	subs	w23, w10, w9
    2d98:	b.ne	2d04 <deflate_stored+0x2fc>  // b.any
    2d9c:	ldr	w10, [x19, #172]
    2da0:	mov	w8, w10
    2da4:	ldr	x9, [x19, #5944]
    2da8:	cmp	x9, x10
    2dac:	b.cc	2e04 <deflate_stored+0x3fc>  // b.lo, b.ul, b.last
    2db0:	b	2e08 <deflate_stored+0x400>
    2db4:	mov	w9, #0x2                   	// #2
    2db8:	str	w9, [x19, #5928]
    2dbc:	ldr	x8, [x8]
    2dc0:	ldr	x0, [x19, #96]
    2dc4:	sub	x1, x8, x2
    2dc8:	bl	0 <memcpy>
    2dcc:	ldr	w9, [x19, #80]
    2dd0:	str	w9, [x19, #172]
    2dd4:	mov	w8, w9
    2dd8:	ldr	w11, [x19, #5932]
    2ddc:	mov	w10, w8
    2de0:	str	x10, [x19, #152]
    2de4:	sub	w9, w9, w11
    2de8:	cmp	w23, w9
    2dec:	csel	w9, w9, w23, hi  // hi = pmore
    2df0:	add	w9, w9, w11
    2df4:	str	w9, [x19, #5932]
    2df8:	ldr	x9, [x19, #5944]
    2dfc:	cmp	x9, x10
    2e00:	b.cs	2e08 <deflate_stored+0x400>  // b.hs, b.nlast
    2e04:	str	x10, [x19, #5944]
    2e08:	cbz	w22, 2e30 <deflate_stored+0x428>
    2e0c:	mov	w0, #0x3                   	// #3
    2e10:	ldp	x20, x19, [sp, #96]
    2e14:	ldp	x22, x21, [sp, #80]
    2e18:	ldp	x24, x23, [sp, #64]
    2e1c:	ldp	x26, x25, [sp, #48]
    2e20:	ldp	x28, x27, [sp, #32]
    2e24:	ldp	x29, x30, [sp, #16]
    2e28:	add	sp, sp, #0x70
    2e2c:	ret
    2e30:	ldr	x24, [x19]
    2e34:	tst	w20, #0xfffffffb
    2e38:	ldr	w9, [x24, #8]
    2e3c:	b.eq	2e58 <deflate_stored+0x450>  // b.none
    2e40:	cbnz	w9, 2e58 <deflate_stored+0x450>
    2e44:	ldr	x9, [x19, #152]
    2e48:	cmp	x9, x10
    2e4c:	b.ne	2f18 <deflate_stored+0x510>  // b.any
    2e50:	mov	w0, #0x1                   	// #1
    2e54:	b	2e10 <deflate_stored+0x408>
    2e58:	ldr	w10, [x19, #104]
    2e5c:	mvn	w11, w8
    2e60:	add	w21, w10, w11
    2e64:	cmp	w9, w21
    2e68:	b.ls	2eb8 <deflate_stored+0x4b0>  // b.plast
    2e6c:	ldr	x11, [x19, #152]
    2e70:	ldr	w10, [x19, #80]
    2e74:	subs	x11, x11, x10
    2e78:	b.lt	2eb8 <deflate_stored+0x4b0>  // b.tstop
    2e7c:	ldr	x0, [x19, #96]
    2e80:	sub	w2, w8, w10
    2e84:	str	x11, [x19, #152]
    2e88:	str	w2, [x19, #172]
    2e8c:	add	x1, x0, x10
    2e90:	bl	0 <memcpy>
    2e94:	ldr	w8, [x19, #5928]
    2e98:	cmp	w8, #0x1
    2e9c:	b.hi	2ea8 <deflate_stored+0x4a0>  // b.pmore
    2ea0:	add	w8, w8, #0x1
    2ea4:	str	w8, [x19, #5928]
    2ea8:	ldr	x24, [x19]
    2eac:	ldr	w8, [x19, #80]
    2eb0:	ldr	w9, [x24, #8]
    2eb4:	add	w21, w8, w21
    2eb8:	cmp	w21, w9
    2ebc:	csel	w21, w9, w21, hi  // hi = pmore
    2ec0:	cbz	w21, 2f34 <deflate_stored+0x52c>
    2ec4:	ldr	x8, [x19, #96]
    2ec8:	ldr	w10, [x19, #172]
    2ecc:	ldr	x1, [x24]
    2ed0:	mov	w22, w21
    2ed4:	sub	w9, w9, w21
    2ed8:	add	x23, x8, x10
    2edc:	mov	x0, x23
    2ee0:	mov	x2, x22
    2ee4:	str	w9, [x24, #8]
    2ee8:	bl	0 <memcpy>
    2eec:	ldr	x8, [x24, #56]
    2ef0:	ldr	w8, [x8, #48]
    2ef4:	cmp	w8, #0x2
    2ef8:	b.eq	2f4c <deflate_stored+0x544>  // b.none
    2efc:	cmp	w8, #0x1
    2f00:	b.ne	2f60 <deflate_stored+0x558>  // b.any
    2f04:	ldr	x0, [x24, #96]
    2f08:	mov	x1, x23
    2f0c:	mov	w2, w21
    2f10:	bl	0 <adler32>
    2f14:	b	2f5c <deflate_stored+0x554>
    2f18:	ldr	w10, [x19, #104]
    2f1c:	mvn	w8, w8
    2f20:	mov	w9, wzr
    2f24:	add	w21, w10, w8
    2f28:	cmp	w21, w9
    2f2c:	csel	w21, w9, w21, hi  // hi = pmore
    2f30:	cbnz	w21, 2ec4 <deflate_stored+0x4bc>
    2f34:	ldr	w8, [x19, #172]
    2f38:	ldr	x9, [x19, #5944]
    2f3c:	mov	w10, w8
    2f40:	cmp	x9, x10
    2f44:	b.cc	2f94 <deflate_stored+0x58c>  // b.lo, b.ul, b.last
    2f48:	b	2f98 <deflate_stored+0x590>
    2f4c:	ldr	x0, [x24, #96]
    2f50:	mov	x1, x23
    2f54:	mov	w2, w21
    2f58:	bl	0 <crc32>
    2f5c:	str	x0, [x24, #96]
    2f60:	ldr	x8, [x24]
    2f64:	ldr	x9, [x24, #16]
    2f68:	add	x8, x8, x22
    2f6c:	add	x9, x9, x22
    2f70:	str	x8, [x24]
    2f74:	str	x9, [x24, #16]
    2f78:	ldr	w8, [x19, #172]
    2f7c:	add	w8, w8, w21
    2f80:	str	w8, [x19, #172]
    2f84:	ldr	x9, [x19, #5944]
    2f88:	mov	w10, w8
    2f8c:	cmp	x9, x10
    2f90:	b.cs	2f98 <deflate_stored+0x590>  // b.hs, b.nlast
    2f94:	str	x10, [x19, #5944]
    2f98:	ldr	w9, [x19, #5940]
    2f9c:	ldr	x11, [x19, #24]
    2fa0:	ldr	w13, [x19, #80]
    2fa4:	mov	w12, #0xffff                	// #65535
    2fa8:	add	w9, w9, #0x2a
    2fac:	asr	w9, w9, #3
    2fb0:	ldr	x8, [x19, #152]
    2fb4:	sub	x9, x11, x9
    2fb8:	cmp	x9, x12
    2fbc:	csel	w9, w9, w12, cc  // cc = lo, ul, last
    2fc0:	cmp	w13, w9
    2fc4:	csel	w11, w13, w9, cc  // cc = lo, ul, last
    2fc8:	sub	w10, w10, w8
    2fcc:	cmp	w10, w11
    2fd0:	b.cs	300c <deflate_stored+0x604>  // b.hs, b.nlast
    2fd4:	cmp	w20, #0x4
    2fd8:	cset	w11, eq  // eq = none
    2fdc:	cmp	w10, #0x0
    2fe0:	mov	w0, wzr
    2fe4:	cset	w12, ne  // ne = any
    2fe8:	cbz	w20, 2e10 <deflate_stored+0x408>
    2fec:	orr	w11, w11, w12
    2ff0:	cbz	w11, 2e10 <deflate_stored+0x408>
    2ff4:	cmp	w10, w9
    2ff8:	mov	w0, wzr
    2ffc:	b.hi	2e10 <deflate_stored+0x408>  // b.pmore
    3000:	ldr	x11, [x19]
    3004:	ldr	w11, [x11, #8]
    3008:	cbnz	w11, 2e10 <deflate_stored+0x408>
    300c:	cmp	w10, w9
    3010:	csel	w11, w9, w10, hi  // hi = pmore
    3014:	cmp	w20, #0x4
    3018:	b.ne	303c <deflate_stored+0x634>  // b.any
    301c:	ldr	x12, [x19]
    3020:	ldr	w12, [x12, #8]
    3024:	cmp	w12, #0x0
    3028:	cset	w12, eq  // eq = none
    302c:	cmp	w10, w9
    3030:	cset	w9, ls  // ls = plast
    3034:	and	w20, w9, w12
    3038:	b	3040 <deflate_stored+0x638>
    303c:	mov	w20, wzr
    3040:	ldr	x9, [x19, #96]
    3044:	mov	w21, w11
    3048:	mov	x0, x19
    304c:	mov	x2, x21
    3050:	add	x1, x9, x8
    3054:	mov	w3, w20
    3058:	bl	0 <_tr_stored_block>
    305c:	ldr	x8, [x19, #152]
    3060:	ldr	x22, [x19]
    3064:	add	x8, x8, x21
    3068:	str	x8, [x19, #152]
    306c:	ldr	x19, [x22, #56]
    3070:	mov	x0, x19
    3074:	bl	0 <_tr_flush_bits>
    3078:	ldr	w8, [x19, #40]
    307c:	ldr	w9, [x22, #32]
    3080:	cmp	w9, w8
    3084:	csel	w23, w9, w8, cc  // cc = lo, ul, last
    3088:	cbz	w23, 30e0 <deflate_stored+0x6d8>
    308c:	ldr	x0, [x22, #24]
    3090:	ldr	x1, [x19, #32]
    3094:	mov	w21, w23
    3098:	mov	x2, x21
    309c:	bl	0 <memcpy>
    30a0:	ldr	x8, [x22, #24]
    30a4:	add	x8, x8, x21
    30a8:	str	x8, [x22, #24]
    30ac:	ldr	x8, [x19, #32]
    30b0:	add	x8, x8, x21
    30b4:	str	x8, [x19, #32]
    30b8:	ldr	x8, [x22, #40]
    30bc:	ldr	w9, [x22, #32]
    30c0:	add	x8, x8, x21
    30c4:	sub	w9, w9, w23
    30c8:	str	x8, [x22, #40]
    30cc:	str	w9, [x22, #32]
    30d0:	ldr	x8, [x19, #40]
    30d4:	subs	x8, x8, x21
    30d8:	str	x8, [x19, #40]
    30dc:	b.eq	30ec <deflate_stored+0x6e4>  // b.none
    30e0:	cbz	w20, 30f8 <deflate_stored+0x6f0>
    30e4:	mov	w0, #0x2                   	// #2
    30e8:	b	2e10 <deflate_stored+0x408>
    30ec:	ldr	x8, [x19, #16]
    30f0:	str	x8, [x19, #32]
    30f4:	tbnz	w20, #0, 30e4 <deflate_stored+0x6dc>
    30f8:	mov	w0, wzr
    30fc:	b	2e10 <deflate_stored+0x408>

0000000000003100 <deflateCopy>:
    3100:	stp	x29, x30, [sp, #-48]!
    3104:	stp	x22, x21, [sp, #16]
    3108:	stp	x20, x19, [sp, #32]
    310c:	mov	x29, sp
    3110:	cbz	x1, 3138 <deflateCopy+0x38>
    3114:	ldr	x8, [x1, #64]
    3118:	cbz	x8, 3138 <deflateCopy+0x38>
    311c:	ldr	x8, [x1, #72]
    3120:	cbz	x8, 3138 <deflateCopy+0x38>
    3124:	ldr	x19, [x1, #56]
    3128:	cbz	x19, 3138 <deflateCopy+0x38>
    312c:	ldr	x8, [x19]
    3130:	cmp	x8, x1
    3134:	b.eq	314c <deflateCopy+0x4c>  // b.none
    3138:	mov	w0, #0xfffffffe            	// #-2
    313c:	ldp	x20, x19, [sp, #32]
    3140:	ldp	x22, x21, [sp, #16]
    3144:	ldp	x29, x30, [sp], #48
    3148:	ret
    314c:	ldr	w8, [x19, #8]
    3150:	mov	x20, x0
    3154:	sub	w9, w8, #0x39
    3158:	cmp	w9, #0x38
    315c:	b.hi	3304 <deflateCopy+0x204>  // b.pmore
    3160:	mov	w10, #0x1                   	// #1
    3164:	lsl	x9, x10, x9
    3168:	mov	x10, #0x1001                	// #4097
    316c:	movk	x10, #0x1, lsl #16
    3170:	movk	x10, #0x4004, lsl #32
    3174:	movk	x10, #0x100, lsl #48
    3178:	tst	x9, x10
    317c:	b.eq	3304 <deflateCopy+0x204>  // b.none
    3180:	cbz	x20, 3138 <deflateCopy+0x38>
    3184:	ldp	q0, q1, [x1, #64]
    3188:	ldr	q2, [x1, #48]
    318c:	ldr	q3, [x1, #96]
    3190:	mov	w2, #0x1740                	// #5952
    3194:	stp	q0, q1, [x20, #64]
    3198:	ldp	q0, q1, [x1]
    319c:	ldr	q4, [x1, #32]
    31a0:	ldr	x8, [x20, #64]
    31a4:	ldr	x0, [x20, #80]
    31a8:	mov	w1, #0x1                   	// #1
    31ac:	str	q3, [x20, #96]
    31b0:	stp	q0, q1, [x20]
    31b4:	stp	q4, q2, [x20, #32]
    31b8:	blr	x8
    31bc:	cbz	x0, 3320 <deflateCopy+0x220>
    31c0:	mov	w2, #0x1740                	// #5952
    31c4:	mov	x1, x19
    31c8:	mov	x21, x0
    31cc:	str	x0, [x20, #56]
    31d0:	bl	0 <memcpy>
    31d4:	str	x20, [x21]
    31d8:	ldr	x8, [x20, #64]
    31dc:	ldr	x0, [x20, #80]
    31e0:	ldr	w1, [x21, #80]
    31e4:	mov	w2, #0x2                   	// #2
    31e8:	blr	x8
    31ec:	str	x0, [x21, #96]
    31f0:	ldr	x8, [x20, #64]
    31f4:	ldr	x0, [x20, #80]
    31f8:	ldr	w1, [x21, #80]
    31fc:	mov	w2, #0x2                   	// #2
    3200:	blr	x8
    3204:	str	x0, [x21, #112]
    3208:	ldr	x8, [x20, #64]
    320c:	ldr	x0, [x20, #80]
    3210:	ldr	w1, [x21, #132]
    3214:	mov	w2, #0x2                   	// #2
    3218:	blr	x8
    321c:	str	x0, [x21, #120]
    3220:	ldr	x8, [x20, #64]
    3224:	ldr	x0, [x20, #80]
    3228:	ldr	w1, [x21, #5896]
    322c:	mov	w2, #0x4                   	// #4
    3230:	blr	x8
    3234:	ldr	x8, [x21, #96]
    3238:	str	x0, [x21, #16]
    323c:	cbz	x8, 3318 <deflateCopy+0x218>
    3240:	ldr	x9, [x21, #112]
    3244:	cbz	x9, 3318 <deflateCopy+0x218>
    3248:	mov	x22, x0
    324c:	cbz	x0, 3318 <deflateCopy+0x218>
    3250:	ldr	x9, [x21, #120]
    3254:	cbz	x9, 3318 <deflateCopy+0x218>
    3258:	ldr	w9, [x21, #80]
    325c:	ldr	x1, [x19, #96]
    3260:	mov	x0, x8
    3264:	lsl	w2, w9, #1
    3268:	bl	0 <memcpy>
    326c:	ldr	w8, [x21, #80]
    3270:	ldr	x0, [x21, #112]
    3274:	ldr	x1, [x19, #112]
    3278:	lsl	x2, x8, #1
    327c:	bl	0 <memcpy>
    3280:	ldr	w8, [x21, #132]
    3284:	ldr	x0, [x21, #120]
    3288:	ldr	x1, [x19, #120]
    328c:	lsl	x2, x8, #1
    3290:	bl	0 <memcpy>
    3294:	ldr	x0, [x21, #16]
    3298:	ldr	x1, [x19, #16]
    329c:	ldr	w2, [x21, #24]
    32a0:	bl	0 <memcpy>
    32a4:	add	x11, x21, #0xd4
    32a8:	ldr	x8, [x19, #32]
    32ac:	ldr	x9, [x19, #16]
    32b0:	str	x11, [x21, #2904]
    32b4:	add	x11, x21, #0x9c8
    32b8:	ldr	w10, [x21, #5896]
    32bc:	str	x11, [x21, #2928]
    32c0:	ldr	x11, [x21, #16]
    32c4:	sub	x8, x8, x9
    32c8:	and	x9, x10, #0xfffffffe
    32cc:	add	x10, x10, x10, lsl #1
    32d0:	add	x8, x11, x8
    32d4:	mov	w0, wzr
    32d8:	add	x9, x22, x9
    32dc:	add	x10, x11, x10
    32e0:	str	x8, [x21, #32]
    32e4:	add	x8, x21, #0xabc
    32e8:	str	x9, [x21, #5904]
    32ec:	str	x10, [x21, #5888]
    32f0:	str	x8, [x21, #2952]
    32f4:	ldp	x20, x19, [sp, #32]
    32f8:	ldp	x22, x21, [sp, #16]
    32fc:	ldp	x29, x30, [sp], #48
    3300:	ret
    3304:	cmp	w8, #0x29a
    3308:	b.eq	3180 <deflateCopy+0x80>  // b.none
    330c:	cmp	w8, #0x2a
    3310:	b.ne	3138 <deflateCopy+0x38>  // b.any
    3314:	b	3180 <deflateCopy+0x80>
    3318:	mov	x0, x20
    331c:	bl	328 <deflateEnd>
    3320:	mov	w0, #0xfffffffc            	// #-4
    3324:	ldp	x20, x19, [sp, #32]
    3328:	ldp	x22, x21, [sp, #16]
    332c:	ldp	x29, x30, [sp], #48
    3330:	ret

0000000000003334 <deflate_fast>:
    3334:	stp	x29, x30, [sp, #-80]!
    3338:	stp	x24, x23, [sp, #32]
    333c:	adrp	x23, 0 <_length_code>
    3340:	adrp	x24, 0 <_dist_code>
    3344:	stp	x20, x19, [sp, #64]
    3348:	mov	w20, w1
    334c:	mov	x19, x0
    3350:	add	x23, x23, #0x0
    3354:	add	x24, x24, #0x0
    3358:	stp	x26, x25, [sp, #16]
    335c:	stp	x22, x21, [sp, #48]
    3360:	mov	x29, sp
    3364:	b	3374 <deflate_fast+0x40>
    3368:	ldr	x8, [x19]
    336c:	ldr	w8, [x8, #32]
    3370:	cbz	w8, 3858 <deflate_fast+0x524>
    3374:	ldr	w8, [x19, #180]
    3378:	cmp	w8, #0x105
    337c:	b.hi	33a4 <deflate_fast+0x70>  // b.pmore
    3380:	mov	x0, x19
    3384:	bl	700 <fill_window>
    3388:	ldr	w8, [x19, #180]
    338c:	cbnz	w20, 3398 <deflate_fast+0x64>
    3390:	cmp	w8, #0x106
    3394:	b.cc	3858 <deflate_fast+0x524>  // b.lo, b.ul, b.last
    3398:	cbz	w8, 36a8 <deflate_fast+0x374>
    339c:	cmp	w8, #0x3
    33a0:	b.cc	3400 <deflate_fast+0xcc>  // b.lo, b.ul, b.last
    33a4:	ldr	w8, [x19, #172]
    33a8:	ldr	x10, [x19, #96]
    33ac:	ldr	w9, [x19, #128]
    33b0:	ldp	w12, w11, [x19, #140]
    33b4:	add	w13, w8, #0x2
    33b8:	ldrb	w10, [x10, w13, uxtw]
    33bc:	lsl	w9, w9, w11
    33c0:	ldp	x13, x11, [x19, #112]
    33c4:	eor	w9, w9, w10
    33c8:	and	x9, x9, x12
    33cc:	ldr	w10, [x19, #88]
    33d0:	str	w9, [x19, #128]
    33d4:	lsl	x9, x9, #1
    33d8:	ldrh	w1, [x11, x9]
    33dc:	and	x10, x10, x8
    33e0:	strh	w1, [x13, x10, lsl #1]
    33e4:	strh	w8, [x11, x9]
    33e8:	cbz	w1, 3400 <deflate_fast+0xcc>
    33ec:	ldr	w9, [x19, #80]
    33f0:	sub	w8, w8, w1
    33f4:	sub	w9, w9, #0x106
    33f8:	cmp	w8, w9
    33fc:	b.ls	3574 <deflate_fast+0x240>  // b.plast
    3400:	ldr	w0, [x19, #160]
    3404:	subs	w8, w0, #0x3
    3408:	b.cc	3588 <deflate_fast+0x254>  // b.lo, b.ul, b.last
    340c:	ldp	w9, w10, [x19, #172]
    3410:	ldr	x11, [x19, #5904]
    3414:	ldr	w12, [x19, #5900]
    3418:	and	x13, x8, #0xff
    341c:	ldrb	w13, [x23, x13]
    3420:	sub	w9, w9, w10
    3424:	mov	w10, #0x400                 	// #1024
    3428:	strh	w9, [x11, x12, lsl #1]
    342c:	add	w11, w12, #0x1
    3430:	sub	w9, w9, #0x1
    3434:	str	w11, [x19, #5900]
    3438:	bfi	x10, x13, #2, #8
    343c:	ldr	x11, [x19, #5888]
    3440:	and	w13, w9, #0xffff
    3444:	cmp	w13, #0x100
    3448:	ubfx	w13, w9, #7, #9
    344c:	add	w13, w13, #0x100
    3450:	csel	w9, w9, w13, cc  // cc = lo, ul, last
    3454:	add	x10, x10, x19
    3458:	and	x9, x9, #0xffff
    345c:	strb	w8, [x11, x12]
    3460:	ldrb	w8, [x24, x9]
    3464:	ldrh	w9, [x10, #216]
    3468:	add	x8, x19, x8, lsl #2
    346c:	add	w9, w9, #0x1
    3470:	strh	w9, [x10, #216]
    3474:	ldrh	w9, [x8, #2504]
    3478:	add	w9, w9, #0x1
    347c:	strh	w9, [x8, #2504]
    3480:	ldr	w8, [x19, #5896]
    3484:	ldr	w9, [x19, #160]
    3488:	ldr	w10, [x19, #180]
    348c:	ldr	w11, [x19, #5900]
    3490:	sub	w8, w8, #0x1
    3494:	sub	w10, w10, w9
    3498:	cmp	w11, w8
    349c:	cset	w8, eq  // eq = none
    34a0:	cmp	w10, #0x3
    34a4:	str	w10, [x19, #180]
    34a8:	b.cc	3534 <deflate_fast+0x200>  // b.lo, b.ul, b.last
    34ac:	ldr	w10, [x19, #192]
    34b0:	cmp	w9, w10
    34b4:	b.hi	3534 <deflate_fast+0x200>  // b.pmore
    34b8:	ldr	w18, [x19, #172]
    34bc:	ldr	x10, [x19, #96]
    34c0:	ldp	w12, w11, [x19, #140]
    34c4:	ldp	x14, x13, [x19, #112]
    34c8:	ldr	w15, [x19, #88]
    34cc:	ldr	w17, [x19, #128]
    34d0:	sub	w16, w9, #0x1
    34d4:	str	w16, [x19, #160]
    34d8:	sub	w16, w9, #0x2
    34dc:	add	w9, w18, #0x1
    34e0:	str	w9, [x19, #172]
    34e4:	add	w18, w9, #0x2
    34e8:	ldrb	w18, [x10, w18, uxtw]
    34ec:	lsl	w17, w17, w11
    34f0:	mov	w1, w9
    34f4:	and	x1, x15, x1
    34f8:	eor	w17, w17, w18
    34fc:	and	x17, x17, x12
    3500:	str	w17, [x19, #128]
    3504:	lsl	x18, x17, #1
    3508:	ldrh	w0, [x13, x18]
    350c:	strh	w0, [x14, x1, lsl #1]
    3510:	strh	w9, [x13, x18]
    3514:	str	w16, [x19, #160]
    3518:	sub	w16, w16, #0x1
    351c:	cmn	w16, #0x1
    3520:	add	w9, w9, #0x1
    3524:	b.ne	34e0 <deflate_fast+0x1ac>  // b.any
    3528:	str	w9, [x19, #172]
    352c:	cbz	w8, 3374 <deflate_fast+0x40>
    3530:	b	35f0 <deflate_fast+0x2bc>
    3534:	ldr	w10, [x19, #172]
    3538:	ldr	x11, [x19, #96]
    353c:	str	wzr, [x19, #160]
    3540:	add	w9, w10, w9
    3544:	str	w9, [x19, #172]
    3548:	ldrb	w10, [x11, w9, uxtw]
    354c:	add	w12, w9, #0x1
    3550:	str	w10, [x19, #128]
    3554:	ldrb	w11, [x11, w12, uxtw]
    3558:	ldp	w12, w13, [x19, #140]
    355c:	lsl	w10, w10, w13
    3560:	eor	w10, w10, w11
    3564:	and	w10, w10, w12
    3568:	str	w10, [x19, #128]
    356c:	cbz	w8, 3374 <deflate_fast+0x40>
    3570:	b	35f0 <deflate_fast+0x2bc>
    3574:	mov	x0, x19
    3578:	bl	3f58 <longest_match>
    357c:	str	w0, [x19, #160]
    3580:	subs	w8, w0, #0x3
    3584:	b.cs	340c <deflate_fast+0xd8>  // b.hs, b.nlast
    3588:	ldr	x8, [x19, #96]
    358c:	ldr	w9, [x19, #172]
    3590:	ldr	x10, [x19, #5904]
    3594:	ldr	w11, [x19, #5900]
    3598:	ldrb	w8, [x8, x9]
    359c:	strh	wzr, [x10, x11, lsl #1]
    35a0:	ldr	x9, [x19, #5888]
    35a4:	add	w10, w11, #0x1
    35a8:	str	w10, [x19, #5900]
    35ac:	add	x10, x19, x8, lsl #2
    35b0:	strb	w8, [x9, x11]
    35b4:	ldrh	w8, [x10, #212]
    35b8:	add	w8, w8, #0x1
    35bc:	strh	w8, [x10, #212]
    35c0:	ldr	w8, [x19, #5896]
    35c4:	ldr	w11, [x19, #5900]
    35c8:	ldr	w9, [x19, #180]
    35cc:	ldr	w10, [x19, #172]
    35d0:	sub	w8, w8, #0x1
    35d4:	cmp	w11, w8
    35d8:	sub	w12, w9, #0x1
    35dc:	add	w9, w10, #0x1
    35e0:	cset	w8, eq  // eq = none
    35e4:	str	w12, [x19, #180]
    35e8:	str	w9, [x19, #172]
    35ec:	cbz	w8, 3374 <deflate_fast+0x40>
    35f0:	ldr	x8, [x19, #152]
    35f4:	tbnz	x8, #63, 3604 <deflate_fast+0x2d0>
    35f8:	ldr	x10, [x19, #96]
    35fc:	add	x1, x10, w8, uxtw
    3600:	b	3608 <deflate_fast+0x2d4>
    3604:	mov	x1, xzr
    3608:	mov	w9, w9
    360c:	sub	x2, x9, x8
    3610:	mov	x0, x19
    3614:	mov	w3, wzr
    3618:	bl	0 <_tr_flush_block>
    361c:	ldr	w8, [x19, #172]
    3620:	ldr	x25, [x19]
    3624:	str	x8, [x19, #152]
    3628:	ldr	x21, [x25, #56]
    362c:	mov	x0, x21
    3630:	bl	0 <_tr_flush_bits>
    3634:	ldr	w8, [x21, #40]
    3638:	ldr	w9, [x25, #32]
    363c:	cmp	w9, w8
    3640:	csel	w26, w9, w8, cc  // cc = lo, ul, last
    3644:	cbz	w26, 3368 <deflate_fast+0x34>
    3648:	ldr	x0, [x25, #24]
    364c:	ldr	x1, [x21, #32]
    3650:	mov	w22, w26
    3654:	mov	x2, x22
    3658:	bl	0 <memcpy>
    365c:	ldr	x8, [x25, #24]
    3660:	add	x8, x8, x22
    3664:	str	x8, [x25, #24]
    3668:	ldr	x8, [x21, #32]
    366c:	add	x8, x8, x22
    3670:	str	x8, [x21, #32]
    3674:	ldr	x8, [x25, #40]
    3678:	ldr	w9, [x25, #32]
    367c:	add	x8, x8, x22
    3680:	sub	w9, w9, w26
    3684:	str	x8, [x25, #40]
    3688:	str	w9, [x25, #32]
    368c:	ldr	x8, [x21, #40]
    3690:	subs	x8, x8, x22
    3694:	str	x8, [x21, #40]
    3698:	b.ne	3368 <deflate_fast+0x34>  // b.any
    369c:	ldr	x8, [x21, #16]
    36a0:	str	x8, [x21, #32]
    36a4:	b	3368 <deflate_fast+0x34>
    36a8:	ldr	w8, [x19, #172]
    36ac:	mov	w9, #0x2                   	// #2
    36b0:	cmp	w8, #0x2
    36b4:	csel	w9, w8, w9, cc  // cc = lo, ul, last
    36b8:	cmp	w20, #0x4
    36bc:	str	w9, [x19, #5932]
    36c0:	b.ne	36d8 <deflate_fast+0x3a4>  // b.any
    36c4:	ldr	x9, [x19, #152]
    36c8:	tbnz	x9, #63, 36f4 <deflate_fast+0x3c0>
    36cc:	ldr	x10, [x19, #96]
    36d0:	add	x1, x10, w9, uxtw
    36d4:	b	36f8 <deflate_fast+0x3c4>
    36d8:	ldr	w9, [x19, #5900]
    36dc:	cbz	w9, 3850 <deflate_fast+0x51c>
    36e0:	ldr	x9, [x19, #152]
    36e4:	tbnz	x9, #63, 37a8 <deflate_fast+0x474>
    36e8:	ldr	x10, [x19, #96]
    36ec:	add	x1, x10, w9, uxtw
    36f0:	b	37ac <deflate_fast+0x478>
    36f4:	mov	x1, xzr
    36f8:	sub	x2, x8, x9
    36fc:	mov	w3, #0x1                   	// #1
    3700:	mov	x0, x19
    3704:	bl	0 <_tr_flush_block>
    3708:	ldr	w8, [x19, #172]
    370c:	ldr	x22, [x19]
    3710:	str	x8, [x19, #152]
    3714:	ldr	x20, [x22, #56]
    3718:	mov	x0, x20
    371c:	bl	0 <_tr_flush_bits>
    3720:	ldr	w8, [x20, #40]
    3724:	ldr	w9, [x22, #32]
    3728:	cmp	w9, w8
    372c:	csel	w23, w9, w8, cc  // cc = lo, ul, last
    3730:	cbz	w23, 3790 <deflate_fast+0x45c>
    3734:	ldr	x0, [x22, #24]
    3738:	ldr	x1, [x20, #32]
    373c:	mov	w21, w23
    3740:	mov	x2, x21
    3744:	bl	0 <memcpy>
    3748:	ldr	x8, [x22, #24]
    374c:	add	x8, x8, x21
    3750:	str	x8, [x22, #24]
    3754:	ldr	x8, [x20, #32]
    3758:	add	x8, x8, x21
    375c:	str	x8, [x20, #32]
    3760:	ldr	x8, [x22, #40]
    3764:	ldr	w9, [x22, #32]
    3768:	add	x8, x8, x21
    376c:	sub	w9, w9, w23
    3770:	str	x8, [x22, #40]
    3774:	str	w9, [x22, #32]
    3778:	ldr	x8, [x20, #40]
    377c:	subs	x8, x8, x21
    3780:	str	x8, [x20, #40]
    3784:	b.ne	3790 <deflate_fast+0x45c>  // b.any
    3788:	ldr	x8, [x20, #16]
    378c:	str	x8, [x20, #32]
    3790:	ldr	x8, [x19]
    3794:	ldr	w8, [x8, #32]
    3798:	cmp	w8, #0x0
    379c:	mov	w8, #0x2                   	// #2
    37a0:	cinc	w0, w8, ne  // ne = any
    37a4:	b	385c <deflate_fast+0x528>
    37a8:	mov	x1, xzr
    37ac:	sub	x2, x8, x9
    37b0:	mov	x0, x19
    37b4:	mov	w3, wzr
    37b8:	bl	0 <_tr_flush_block>
    37bc:	ldr	w8, [x19, #172]
    37c0:	ldr	x22, [x19]
    37c4:	str	x8, [x19, #152]
    37c8:	ldr	x20, [x22, #56]
    37cc:	mov	x0, x20
    37d0:	bl	0 <_tr_flush_bits>
    37d4:	ldr	w8, [x20, #40]
    37d8:	ldr	w9, [x22, #32]
    37dc:	cmp	w9, w8
    37e0:	csel	w23, w9, w8, cc  // cc = lo, ul, last
    37e4:	cbz	w23, 3844 <deflate_fast+0x510>
    37e8:	ldr	x0, [x22, #24]
    37ec:	ldr	x1, [x20, #32]
    37f0:	mov	w21, w23
    37f4:	mov	x2, x21
    37f8:	bl	0 <memcpy>
    37fc:	ldr	x8, [x22, #24]
    3800:	add	x8, x8, x21
    3804:	str	x8, [x22, #24]
    3808:	ldr	x8, [x20, #32]
    380c:	add	x8, x8, x21
    3810:	str	x8, [x20, #32]
    3814:	ldr	x8, [x22, #40]
    3818:	ldr	w9, [x22, #32]
    381c:	add	x8, x8, x21
    3820:	sub	w9, w9, w23
    3824:	str	x8, [x22, #40]
    3828:	str	w9, [x22, #32]
    382c:	ldr	x8, [x20, #40]
    3830:	subs	x8, x8, x21
    3834:	str	x8, [x20, #40]
    3838:	b.ne	3844 <deflate_fast+0x510>  // b.any
    383c:	ldr	x8, [x20, #16]
    3840:	str	x8, [x20, #32]
    3844:	ldr	x8, [x19]
    3848:	ldr	w8, [x8, #32]
    384c:	cbz	w8, 3858 <deflate_fast+0x524>
    3850:	mov	w0, #0x1                   	// #1
    3854:	b	385c <deflate_fast+0x528>
    3858:	mov	w0, wzr
    385c:	ldp	x20, x19, [sp, #64]
    3860:	ldp	x22, x21, [sp, #48]
    3864:	ldp	x24, x23, [sp, #32]
    3868:	ldp	x26, x25, [sp, #16]
    386c:	ldp	x29, x30, [sp], #80
    3870:	ret

0000000000003874 <deflate_slow>:
    3874:	stp	x29, x30, [sp, #-96]!
    3878:	stp	x26, x25, [sp, #32]
    387c:	stp	x24, x23, [sp, #48]
    3880:	adrp	x24, 0 <_length_code>
    3884:	adrp	x25, 0 <_dist_code>
    3888:	stp	x20, x19, [sp, #80]
    388c:	mov	w20, w1
    3890:	mov	x19, x0
    3894:	mov	w23, #0x1                   	// #1
    3898:	add	x24, x24, #0x0
    389c:	add	x25, x25, #0x0
    38a0:	mov	w26, #0x2                   	// #2
    38a4:	stp	x28, x27, [sp, #16]
    38a8:	stp	x22, x21, [sp, #64]
    38ac:	mov	x29, sp
    38b0:	b	38d8 <deflate_slow+0x64>
    38b4:	ldr	w8, [x19, #172]
    38b8:	ldr	w9, [x19, #180]
    38bc:	ldr	x10, [x19]
    38c0:	add	w8, w8, #0x1
    38c4:	sub	w9, w9, #0x1
    38c8:	str	w8, [x19, #172]
    38cc:	str	w9, [x19, #180]
    38d0:	ldr	w8, [x10, #32]
    38d4:	cbz	w8, 3f38 <deflate_slow+0x6c4>
    38d8:	ldr	w8, [x19, #180]
    38dc:	cmp	w8, #0x105
    38e0:	b.hi	3908 <deflate_slow+0x94>  // b.pmore
    38e4:	mov	x0, x19
    38e8:	bl	700 <fill_window>
    38ec:	ldr	w8, [x19, #180]
    38f0:	cbnz	w20, 38fc <deflate_slow+0x88>
    38f4:	cmp	w8, #0x106
    38f8:	b.cc	3f38 <deflate_slow+0x6c4>  // b.lo, b.ul, b.last
    38fc:	cbz	w8, 3d40 <deflate_slow+0x4cc>
    3900:	cmp	w8, #0x2
    3904:	b.ls	399c <deflate_slow+0x128>  // b.plast
    3908:	ldr	w9, [x19, #172]
    390c:	ldr	x10, [x19, #96]
    3910:	ldr	w8, [x19, #128]
    3914:	ldp	w12, w11, [x19, #140]
    3918:	add	w13, w9, #0x2
    391c:	ldrb	w10, [x10, w13, uxtw]
    3920:	mov	w0, #0x2                   	// #2
    3924:	lsl	w8, w8, w11
    3928:	ldp	x13, x11, [x19, #112]
    392c:	eor	w8, w8, w10
    3930:	and	x8, x8, x12
    3934:	ldr	w10, [x19, #88]
    3938:	str	w8, [x19, #128]
    393c:	lsl	x8, x8, #1
    3940:	ldrh	w1, [x11, x8]
    3944:	and	x10, x10, x9
    3948:	strh	w1, [x13, x10, lsl #1]
    394c:	strh	w9, [x11, x8]
    3950:	ldr	w8, [x19, #160]
    3954:	ldr	w9, [x19, #176]
    3958:	str	w8, [x19, #184]
    395c:	stp	w0, w9, [x19, #160]
    3960:	cbz	w1, 39b0 <deflate_slow+0x13c>
    3964:	ldr	w9, [x19, #192]
    3968:	cmp	w8, w9
    396c:	b.cs	3988 <deflate_slow+0x114>  // b.hs, b.nlast
    3970:	ldr	w8, [x19, #172]
    3974:	ldr	w9, [x19, #80]
    3978:	sub	w8, w8, w1
    397c:	sub	w9, w9, #0x106
    3980:	cmp	w8, w9
    3984:	b.ls	3b90 <deflate_slow+0x31c>  // b.plast
    3988:	mov	w0, #0x2                   	// #2
    398c:	ldr	w8, [x19, #184]
    3990:	subs	w9, w8, #0x3
    3994:	b.cs	39b8 <deflate_slow+0x144>  // b.hs, b.nlast
    3998:	b	3ae4 <deflate_slow+0x270>
    399c:	ldr	w8, [x19, #160]
    39a0:	ldr	w9, [x19, #176]
    39a4:	mov	w0, #0x2                   	// #2
    39a8:	str	w8, [x19, #184]
    39ac:	stp	w0, w9, [x19, #160]
    39b0:	subs	w9, w8, #0x3
    39b4:	b.cc	3ae4 <deflate_slow+0x270>  // b.lo, b.ul, b.last
    39b8:	cmp	w0, w8
    39bc:	b.hi	3ae4 <deflate_slow+0x270>  // b.pmore
    39c0:	ldr	w11, [x19, #164]
    39c4:	ldr	w8, [x19, #172]
    39c8:	ldr	x12, [x19, #5904]
    39cc:	ldr	w13, [x19, #5900]
    39d0:	mvn	w11, w11
    39d4:	add	w11, w11, w8
    39d8:	ldr	w10, [x19, #180]
    39dc:	strh	w11, [x12, x13, lsl #1]
    39e0:	and	x14, x9, #0xff
    39e4:	ldr	x12, [x19, #5888]
    39e8:	ldrb	w14, [x24, x14]
    39ec:	add	w15, w13, #0x1
    39f0:	sub	w11, w11, #0x1
    39f4:	str	w15, [x19, #5900]
    39f8:	strb	w9, [x12, x13]
    39fc:	mov	w9, #0x400                 	// #1024
    3a00:	and	w12, w11, #0xffff
    3a04:	ubfx	w13, w11, #7, #9
    3a08:	bfi	x9, x14, #2, #8
    3a0c:	add	w13, w13, #0x100
    3a10:	cmp	w12, #0x100
    3a14:	add	x9, x9, x19
    3a18:	csel	w11, w11, w13, cc  // cc = lo, ul, last
    3a1c:	and	x11, x11, #0xffff
    3a20:	ldrh	w12, [x9, #216]
    3a24:	ldrb	w11, [x25, x11]
    3a28:	add	w8, w8, w10
    3a2c:	add	w12, w12, #0x1
    3a30:	add	x11, x19, x11, lsl #2
    3a34:	strh	w12, [x9, #216]
    3a38:	ldrh	w12, [x11, #2504]
    3a3c:	sub	w9, w8, #0x3
    3a40:	add	w8, w12, #0x1
    3a44:	strh	w8, [x11, #2504]
    3a48:	ldp	w12, w8, [x19, #180]
    3a4c:	ldr	w11, [x19, #5896]
    3a50:	ldr	w10, [x19, #5900]
    3a54:	sub	w13, w8, #0x2
    3a58:	str	w13, [x19, #184]
    3a5c:	ldr	w13, [x19, #172]
    3a60:	sub	w14, w12, w8
    3a64:	sub	w12, w8, #0x3
    3a68:	add	w8, w14, #0x1
    3a6c:	sub	w11, w11, #0x1
    3a70:	str	w8, [x19, #180]
    3a74:	add	w8, w13, #0x1
    3a78:	b	3a90 <deflate_slow+0x21c>
    3a7c:	str	w12, [x19, #184]
    3a80:	sub	w12, w12, #0x1
    3a84:	cmn	w12, #0x1
    3a88:	add	w8, w8, #0x1
    3a8c:	b.eq	3b50 <deflate_slow+0x2dc>  // b.none
    3a90:	cmp	w8, w9
    3a94:	str	w8, [x19, #172]
    3a98:	b.hi	3a7c <deflate_slow+0x208>  // b.pmore
    3a9c:	ldr	x14, [x19, #96]
    3aa0:	ldr	w13, [x19, #128]
    3aa4:	add	w15, w8, #0x2
    3aa8:	ldp	w17, w16, [x19, #140]
    3aac:	ldrb	w14, [x14, w15, uxtw]
    3ab0:	ldp	x18, x15, [x19, #112]
    3ab4:	lsl	w13, w13, w16
    3ab8:	eor	w13, w13, w14
    3abc:	and	x13, x13, x17
    3ac0:	ldr	w16, [x19, #88]
    3ac4:	str	w13, [x19, #128]
    3ac8:	lsl	x13, x13, #1
    3acc:	ldrh	w14, [x15, x13]
    3ad0:	mov	w17, w8
    3ad4:	and	x16, x16, x17
    3ad8:	strh	w14, [x18, x16, lsl #1]
    3adc:	strh	w8, [x15, x13]
    3ae0:	b	3a7c <deflate_slow+0x208>
    3ae4:	ldr	w8, [x19, #168]
    3ae8:	cbz	w8, 3b74 <deflate_slow+0x300>
    3aec:	ldr	w9, [x19, #172]
    3af0:	ldr	x8, [x19, #96]
    3af4:	ldr	x10, [x19, #5904]
    3af8:	ldr	w11, [x19, #5900]
    3afc:	sub	w9, w9, #0x1
    3b00:	ldrb	w8, [x8, w9, uxtw]
    3b04:	strh	wzr, [x10, x11, lsl #1]
    3b08:	ldr	x9, [x19, #5888]
    3b0c:	add	w10, w11, #0x1
    3b10:	str	w10, [x19, #5900]
    3b14:	strb	w8, [x9, x11]
    3b18:	add	x8, x19, x8, lsl #2
    3b1c:	ldrh	w9, [x8, #212]
    3b20:	add	w9, w9, #0x1
    3b24:	strh	w9, [x8, #212]
    3b28:	ldr	w8, [x19, #5896]
    3b2c:	ldr	w9, [x19, #5900]
    3b30:	sub	w8, w8, #0x1
    3b34:	cmp	w9, w8
    3b38:	b.ne	38b4 <deflate_slow+0x40>  // b.any
    3b3c:	ldr	x8, [x19, #152]
    3b40:	tbnz	x8, #63, 3c64 <deflate_slow+0x3f0>
    3b44:	ldr	x9, [x19, #96]
    3b48:	add	x1, x9, w8, uxtw
    3b4c:	b	3c68 <deflate_slow+0x3f4>
    3b50:	cmp	w10, w11
    3b54:	str	w26, [x19, #160]
    3b58:	stp	wzr, w8, [x19, #168]
    3b5c:	b.ne	38d8 <deflate_slow+0x64>  // b.any
    3b60:	ldr	x9, [x19, #152]
    3b64:	tbnz	x9, #63, 3bbc <deflate_slow+0x348>
    3b68:	ldr	x10, [x19, #96]
    3b6c:	add	x1, x10, w9, uxtw
    3b70:	b	3bc0 <deflate_slow+0x34c>
    3b74:	ldr	w8, [x19, #172]
    3b78:	ldr	w9, [x19, #180]
    3b7c:	add	w8, w8, #0x1
    3b80:	sub	w9, w9, #0x1
    3b84:	stp	w23, w8, [x19, #168]
    3b88:	str	w9, [x19, #180]
    3b8c:	b	38d8 <deflate_slow+0x64>
    3b90:	mov	x0, x19
    3b94:	bl	3f58 <longest_match>
    3b98:	cmp	w0, #0x5
    3b9c:	str	w0, [x19, #160]
    3ba0:	b.hi	398c <deflate_slow+0x118>  // b.pmore
    3ba4:	ldr	w8, [x19, #200]
    3ba8:	cmp	w8, #0x1
    3bac:	b.ne	3d20 <deflate_slow+0x4ac>  // b.any
    3bb0:	mov	w0, #0x2                   	// #2
    3bb4:	str	w0, [x19, #160]
    3bb8:	b	398c <deflate_slow+0x118>
    3bbc:	mov	x1, xzr
    3bc0:	mov	w8, w8
    3bc4:	sub	x2, x8, x9
    3bc8:	mov	x0, x19
    3bcc:	mov	w3, wzr
    3bd0:	bl	0 <_tr_flush_block>
    3bd4:	ldr	w8, [x19, #172]
    3bd8:	ldr	x27, [x19]
    3bdc:	str	x8, [x19, #152]
    3be0:	ldr	x21, [x27, #56]
    3be4:	mov	x0, x21
    3be8:	bl	0 <_tr_flush_bits>
    3bec:	ldr	w8, [x21, #40]
    3bf0:	ldr	w9, [x27, #32]
    3bf4:	cmp	w9, w8
    3bf8:	csel	w28, w9, w8, cc  // cc = lo, ul, last
    3bfc:	cbz	w28, 3c54 <deflate_slow+0x3e0>
    3c00:	ldr	x0, [x27, #24]
    3c04:	ldr	x1, [x21, #32]
    3c08:	mov	w22, w28
    3c0c:	mov	x2, x22
    3c10:	bl	0 <memcpy>
    3c14:	ldr	x8, [x27, #24]
    3c18:	add	x8, x8, x22
    3c1c:	str	x8, [x27, #24]
    3c20:	ldr	x8, [x21, #32]
    3c24:	add	x8, x8, x22
    3c28:	str	x8, [x21, #32]
    3c2c:	ldr	x8, [x27, #40]
    3c30:	ldr	w9, [x27, #32]
    3c34:	add	x8, x8, x22
    3c38:	sub	w9, w9, w28
    3c3c:	str	x8, [x27, #40]
    3c40:	str	w9, [x27, #32]
    3c44:	ldr	x8, [x21, #40]
    3c48:	subs	x8, x8, x22
    3c4c:	str	x8, [x21, #40]
    3c50:	b.eq	3d08 <deflate_slow+0x494>  // b.none
    3c54:	ldr	x8, [x19]
    3c58:	ldr	w8, [x8, #32]
    3c5c:	cbnz	w8, 38d8 <deflate_slow+0x64>
    3c60:	b	3f38 <deflate_slow+0x6c4>
    3c64:	mov	x1, xzr
    3c68:	ldr	w9, [x19, #172]
    3c6c:	mov	x0, x19
    3c70:	mov	w3, wzr
    3c74:	sub	x2, x9, x8
    3c78:	bl	0 <_tr_flush_block>
    3c7c:	ldr	w8, [x19, #172]
    3c80:	ldr	x27, [x19]
    3c84:	str	x8, [x19, #152]
    3c88:	ldr	x21, [x27, #56]
    3c8c:	mov	x0, x21
    3c90:	bl	0 <_tr_flush_bits>
    3c94:	ldr	w8, [x21, #40]
    3c98:	ldr	w9, [x27, #32]
    3c9c:	cmp	w9, w8
    3ca0:	csel	w28, w9, w8, cc  // cc = lo, ul, last
    3ca4:	cbz	w28, 38b4 <deflate_slow+0x40>
    3ca8:	ldr	x0, [x27, #24]
    3cac:	ldr	x1, [x21, #32]
    3cb0:	mov	w22, w28
    3cb4:	mov	x2, x22
    3cb8:	bl	0 <memcpy>
    3cbc:	ldr	x8, [x27, #24]
    3cc0:	add	x8, x8, x22
    3cc4:	str	x8, [x27, #24]
    3cc8:	ldr	x8, [x21, #32]
    3ccc:	add	x8, x8, x22
    3cd0:	str	x8, [x21, #32]
    3cd4:	ldr	x8, [x27, #40]
    3cd8:	ldr	w9, [x27, #32]
    3cdc:	add	x8, x8, x22
    3ce0:	sub	w9, w9, w28
    3ce4:	str	x8, [x27, #40]
    3ce8:	str	w9, [x27, #32]
    3cec:	ldr	x8, [x21, #40]
    3cf0:	subs	x8, x8, x22
    3cf4:	str	x8, [x21, #40]
    3cf8:	b.ne	38b4 <deflate_slow+0x40>  // b.any
    3cfc:	ldr	x8, [x21, #16]
    3d00:	str	x8, [x21, #32]
    3d04:	b	38b4 <deflate_slow+0x40>
    3d08:	ldr	x8, [x21, #16]
    3d0c:	str	x8, [x21, #32]
    3d10:	ldr	x8, [x19]
    3d14:	ldr	w8, [x8, #32]
    3d18:	cbnz	w8, 38d8 <deflate_slow+0x64>
    3d1c:	b	3f38 <deflate_slow+0x6c4>
    3d20:	cmp	w0, #0x3
    3d24:	b.ne	398c <deflate_slow+0x118>  // b.any
    3d28:	ldp	w8, w9, [x19, #172]
    3d2c:	sub	w8, w8, w9
    3d30:	cmp	w8, #0x1, lsl #12
    3d34:	b.hi	3bb0 <deflate_slow+0x33c>  // b.pmore
    3d38:	mov	w0, #0x3                   	// #3
    3d3c:	b	398c <deflate_slow+0x118>
    3d40:	ldr	w8, [x19, #168]
    3d44:	cbz	w8, 3d88 <deflate_slow+0x514>
    3d48:	ldr	w9, [x19, #172]
    3d4c:	ldr	x8, [x19, #96]
    3d50:	ldr	x10, [x19, #5904]
    3d54:	ldr	w11, [x19, #5900]
    3d58:	sub	w9, w9, #0x1
    3d5c:	ldrb	w8, [x8, w9, uxtw]
    3d60:	strh	wzr, [x10, x11, lsl #1]
    3d64:	ldr	x9, [x19, #5888]
    3d68:	add	w10, w11, #0x1
    3d6c:	str	w10, [x19, #5900]
    3d70:	add	x10, x19, x8, lsl #2
    3d74:	strb	w8, [x9, x11]
    3d78:	ldrh	w8, [x10, #212]
    3d7c:	add	w8, w8, #0x1
    3d80:	strh	w8, [x10, #212]
    3d84:	str	wzr, [x19, #168]
    3d88:	ldr	w8, [x19, #172]
    3d8c:	mov	w9, #0x2                   	// #2
    3d90:	cmp	w8, #0x2
    3d94:	csel	w9, w8, w9, cc  // cc = lo, ul, last
    3d98:	cmp	w20, #0x4
    3d9c:	str	w9, [x19, #5932]
    3da0:	b.ne	3db8 <deflate_slow+0x544>  // b.any
    3da4:	ldr	x9, [x19, #152]
    3da8:	tbnz	x9, #63, 3dd4 <deflate_slow+0x560>
    3dac:	ldr	x10, [x19, #96]
    3db0:	add	x1, x10, w9, uxtw
    3db4:	b	3dd8 <deflate_slow+0x564>
    3db8:	ldr	w9, [x19, #5900]
    3dbc:	cbz	w9, 3f30 <deflate_slow+0x6bc>
    3dc0:	ldr	x9, [x19, #152]
    3dc4:	tbnz	x9, #63, 3e88 <deflate_slow+0x614>
    3dc8:	ldr	x10, [x19, #96]
    3dcc:	add	x1, x10, w9, uxtw
    3dd0:	b	3e8c <deflate_slow+0x618>
    3dd4:	mov	x1, xzr
    3dd8:	sub	x2, x8, x9
    3ddc:	mov	w3, #0x1                   	// #1
    3de0:	mov	x0, x19
    3de4:	bl	0 <_tr_flush_block>
    3de8:	ldr	w8, [x19, #172]
    3dec:	ldr	x22, [x19]
    3df0:	str	x8, [x19, #152]
    3df4:	ldr	x20, [x22, #56]
    3df8:	mov	x0, x20
    3dfc:	bl	0 <_tr_flush_bits>
    3e00:	ldr	w8, [x20, #40]
    3e04:	ldr	w9, [x22, #32]
    3e08:	cmp	w9, w8
    3e0c:	csel	w23, w9, w8, cc  // cc = lo, ul, last
    3e10:	cbz	w23, 3e70 <deflate_slow+0x5fc>
    3e14:	ldr	x0, [x22, #24]
    3e18:	ldr	x1, [x20, #32]
    3e1c:	mov	w21, w23
    3e20:	mov	x2, x21
    3e24:	bl	0 <memcpy>
    3e28:	ldr	x8, [x22, #24]
    3e2c:	add	x8, x8, x21
    3e30:	str	x8, [x22, #24]
    3e34:	ldr	x8, [x20, #32]
    3e38:	add	x8, x8, x21
    3e3c:	str	x8, [x20, #32]
    3e40:	ldr	x8, [x22, #40]
    3e44:	ldr	w9, [x22, #32]
    3e48:	add	x8, x8, x21
    3e4c:	sub	w9, w9, w23
    3e50:	str	x8, [x22, #40]
    3e54:	str	w9, [x22, #32]
    3e58:	ldr	x8, [x20, #40]
    3e5c:	subs	x8, x8, x21
    3e60:	str	x8, [x20, #40]
    3e64:	b.ne	3e70 <deflate_slow+0x5fc>  // b.any
    3e68:	ldr	x8, [x20, #16]
    3e6c:	str	x8, [x20, #32]
    3e70:	ldr	x8, [x19]
    3e74:	ldr	w8, [x8, #32]
    3e78:	cmp	w8, #0x0
    3e7c:	mov	w8, #0x2                   	// #2
    3e80:	cinc	w0, w8, ne  // ne = any
    3e84:	b	3f3c <deflate_slow+0x6c8>
    3e88:	mov	x1, xzr
    3e8c:	sub	x2, x8, x9
    3e90:	mov	x0, x19
    3e94:	mov	w3, wzr
    3e98:	bl	0 <_tr_flush_block>
    3e9c:	ldr	w8, [x19, #172]
    3ea0:	ldr	x22, [x19]
    3ea4:	str	x8, [x19, #152]
    3ea8:	ldr	x20, [x22, #56]
    3eac:	mov	x0, x20
    3eb0:	bl	0 <_tr_flush_bits>
    3eb4:	ldr	w8, [x20, #40]
    3eb8:	ldr	w9, [x22, #32]
    3ebc:	cmp	w9, w8
    3ec0:	csel	w23, w9, w8, cc  // cc = lo, ul, last
    3ec4:	cbz	w23, 3f24 <deflate_slow+0x6b0>
    3ec8:	ldr	x0, [x22, #24]
    3ecc:	ldr	x1, [x20, #32]
    3ed0:	mov	w21, w23
    3ed4:	mov	x2, x21
    3ed8:	bl	0 <memcpy>
    3edc:	ldr	x8, [x22, #24]
    3ee0:	add	x8, x8, x21
    3ee4:	str	x8, [x22, #24]
    3ee8:	ldr	x8, [x20, #32]
    3eec:	add	x8, x8, x21
    3ef0:	str	x8, [x20, #32]
    3ef4:	ldr	x8, [x22, #40]
    3ef8:	ldr	w9, [x22, #32]
    3efc:	add	x8, x8, x21
    3f00:	sub	w9, w9, w23
    3f04:	str	x8, [x22, #40]
    3f08:	str	w9, [x22, #32]
    3f0c:	ldr	x8, [x20, #40]
    3f10:	subs	x8, x8, x21
    3f14:	str	x8, [x20, #40]
    3f18:	b.ne	3f24 <deflate_slow+0x6b0>  // b.any
    3f1c:	ldr	x8, [x20, #16]
    3f20:	str	x8, [x20, #32]
    3f24:	ldr	x8, [x19]
    3f28:	ldr	w8, [x8, #32]
    3f2c:	cbz	w8, 3f38 <deflate_slow+0x6c4>
    3f30:	mov	w0, #0x1                   	// #1
    3f34:	b	3f3c <deflate_slow+0x6c8>
    3f38:	mov	w0, wzr
    3f3c:	ldp	x20, x19, [sp, #80]
    3f40:	ldp	x22, x21, [sp, #64]
    3f44:	ldp	x24, x23, [sp, #48]
    3f48:	ldp	x26, x25, [sp, #32]
    3f4c:	ldp	x28, x27, [sp, #16]
    3f50:	ldp	x29, x30, [sp], #96
    3f54:	ret

0000000000003f58 <longest_match>:
    3f58:	stp	x22, x21, [sp, #-32]!
    3f5c:	stp	x20, x19, [sp, #16]
    3f60:	ldr	x8, [x0, #96]
    3f64:	ldr	w15, [x0, #172]
    3f68:	ldr	w14, [x0, #80]
    3f6c:	ldp	w12, w17, [x0, #184]
    3f70:	ldp	w2, w18, [x0, #204]
    3f74:	sxtw	x12, w12
    3f78:	ldr	w11, [x0, #180]
    3f7c:	add	x13, x8, x15
    3f80:	sub	w16, w14, #0x106
    3f84:	add	x5, x13, x12
    3f88:	ldr	x9, [x0, #112]
    3f8c:	ldr	w10, [x0, #88]
    3f90:	subs	w16, w15, w16
    3f94:	ldurb	w4, [x5, #-1]
    3f98:	ldrb	w5, [x5]
    3f9c:	lsr	w3, w17, #2
    3fa0:	csel	w16, wzr, w16, cc  // cc = lo, ul, last
    3fa4:	cmp	w12, w2
    3fa8:	csel	w17, w17, w3, cc  // cc = lo, ul, last
    3fac:	cmp	w18, w11
    3fb0:	add	x14, x8, #0x5
    3fb4:	add	x15, x13, #0x102
    3fb8:	csel	w18, w11, w18, hi  // hi = pmore
    3fbc:	mov	w2, #0x102                 	// #258
    3fc0:	mov	x3, #0x10100000000         	// #1103806595072
    3fc4:	mov	w6, w1
    3fc8:	add	x7, x8, x6
    3fcc:	sxtw	x19, w12
    3fd0:	ldrb	w20, [x7, x19]
    3fd4:	cmp	w20, w5, uxtb
    3fd8:	b.ne	41b4 <longest_match+0x25c>  // b.any
    3fdc:	add	x19, x19, x7
    3fe0:	ldurb	w19, [x19, #-1]
    3fe4:	cmp	w19, w4, uxtb
    3fe8:	b.ne	41b4 <longest_match+0x25c>  // b.any
    3fec:	ldrb	w19, [x7]
    3ff0:	ldrb	w20, [x13]
    3ff4:	cmp	w19, w20
    3ff8:	b.ne	41b4 <longest_match+0x25c>  // b.any
    3ffc:	ldrb	w7, [x7, #1]
    4000:	ldrb	w19, [x13, #1]
    4004:	cmp	w7, w19
    4008:	b.ne	41b4 <longest_match+0x25c>  // b.any
    400c:	mov	x7, xzr
    4010:	add	x6, x14, x6
    4014:	add	x19, x13, x7
    4018:	add	x20, x6, x7
    401c:	ldrb	w21, [x19, #3]
    4020:	ldurb	w22, [x20, #-2]
    4024:	cmp	w21, w22
    4028:	b.ne	40e4 <longest_match+0x18c>  // b.any
    402c:	ldrb	w19, [x19, #4]
    4030:	ldurb	w20, [x20, #-1]
    4034:	cmp	w19, w20
    4038:	b.ne	40fc <longest_match+0x1a4>  // b.any
    403c:	add	x19, x13, x7
    4040:	ldrb	w20, [x19, #5]
    4044:	ldrb	w21, [x6, x7]
    4048:	cmp	w20, w21
    404c:	b.ne	4118 <longest_match+0x1c0>  // b.any
    4050:	add	x20, x6, x7
    4054:	ldrb	w19, [x19, #6]
    4058:	ldrb	w21, [x20, #1]
    405c:	cmp	w19, w21
    4060:	b.ne	4130 <longest_match+0x1d8>  // b.any
    4064:	add	x19, x13, x7
    4068:	ldrb	w21, [x19, #7]
    406c:	ldrb	w20, [x20, #2]
    4070:	cmp	w21, w20
    4074:	b.ne	414c <longest_match+0x1f4>  // b.any
    4078:	add	x20, x6, x7
    407c:	ldrb	w19, [x19, #8]
    4080:	ldrb	w21, [x20, #3]
    4084:	cmp	w19, w21
    4088:	b.ne	4164 <longest_match+0x20c>  // b.any
    408c:	add	x19, x13, x7
    4090:	ldrb	w21, [x19, #9]
    4094:	ldrb	w20, [x20, #4]
    4098:	cmp	w21, w20
    409c:	b.ne	4180 <longest_match+0x228>  // b.any
    40a0:	add	x20, x7, #0x2
    40a4:	cmp	x20, #0xf9
    40a8:	add	x20, x7, #0x8
    40ac:	b.hi	40c8 <longest_match+0x170>  // b.pmore
    40b0:	add	x7, x6, x7
    40b4:	ldrb	w19, [x19, #10]
    40b8:	ldrb	w7, [x7, #5]
    40bc:	cmp	w19, w7
    40c0:	mov	x7, x20
    40c4:	b.eq	4014 <longest_match+0xbc>  // b.none
    40c8:	add	x6, x13, x20
    40cc:	add	x6, x6, #0x2
    40d0:	sub	x7, x15, x6
    40d4:	sub	x6, x2, w7, sxtw
    40d8:	cmp	w6, w12
    40dc:	b.gt	4194 <longest_match+0x23c>
    40e0:	b	41b4 <longest_match+0x25c>
    40e4:	add	x6, x19, #0x3
    40e8:	sub	x7, x15, x6
    40ec:	sub	x6, x2, w7, sxtw
    40f0:	cmp	w6, w12
    40f4:	b.gt	4194 <longest_match+0x23c>
    40f8:	b	41b4 <longest_match+0x25c>
    40fc:	add	x6, x13, x7
    4100:	add	x6, x6, #0x4
    4104:	sub	x7, x15, x6
    4108:	sub	x6, x2, w7, sxtw
    410c:	cmp	w6, w12
    4110:	b.gt	4194 <longest_match+0x23c>
    4114:	b	41b4 <longest_match+0x25c>
    4118:	add	x6, x19, #0x5
    411c:	sub	x7, x15, x6
    4120:	sub	x6, x2, w7, sxtw
    4124:	cmp	w6, w12
    4128:	b.gt	4194 <longest_match+0x23c>
    412c:	b	41b4 <longest_match+0x25c>
    4130:	add	x6, x13, x7
    4134:	add	x6, x6, #0x6
    4138:	sub	x7, x15, x6
    413c:	sub	x6, x2, w7, sxtw
    4140:	cmp	w6, w12
    4144:	b.gt	4194 <longest_match+0x23c>
    4148:	b	41b4 <longest_match+0x25c>
    414c:	add	x6, x19, #0x7
    4150:	sub	x7, x15, x6
    4154:	sub	x6, x2, w7, sxtw
    4158:	cmp	w6, w12
    415c:	b.gt	4194 <longest_match+0x23c>
    4160:	b	41b4 <longest_match+0x25c>
    4164:	add	x6, x13, x7
    4168:	add	x6, x6, #0x8
    416c:	sub	x7, x15, x6
    4170:	sub	x6, x2, w7, sxtw
    4174:	cmp	w6, w12
    4178:	b.gt	4194 <longest_match+0x23c>
    417c:	b	41b4 <longest_match+0x25c>
    4180:	add	x6, x19, #0x9
    4184:	sub	x7, x15, x6
    4188:	sub	x6, x2, w7, sxtw
    418c:	cmp	w6, w12
    4190:	b.le	41b4 <longest_match+0x25c>
    4194:	cmp	w6, w18
    4198:	str	w1, [x0, #176]
    419c:	b.ge	41e0 <longest_match+0x288>  // b.tcont
    41a0:	sub	x12, x3, x7, lsl #32
    41a4:	asr	x12, x12, #32
    41a8:	ldrb	w4, [x13, x12]
    41ac:	ldrb	w5, [x13, x6]
    41b0:	mov	w12, w6
    41b4:	and	x1, x1, x10
    41b8:	ldrh	w1, [x9, x1, lsl #1]
    41bc:	cmp	w16, w1
    41c0:	b.cs	41cc <longest_match+0x274>  // b.hs, b.nlast
    41c4:	subs	w17, w17, #0x1
    41c8:	b.ne	3fc4 <longest_match+0x6c>  // b.any
    41cc:	ldp	x20, x19, [sp, #16]
    41d0:	cmp	w12, w11
    41d4:	csel	w0, w11, w12, hi  // hi = pmore
    41d8:	ldp	x22, x21, [sp], #32
    41dc:	ret
    41e0:	mov	w12, w6
    41e4:	b	41cc <longest_match+0x274>

infback.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateBackInit_>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	stp	x22, x21, [sp, #16]
       8:	stp	x20, x19, [sp, #32]
       c:	mov	x29, sp
      10:	cbz	x3, ac <inflateBackInit_+0xac>
      14:	mov	x21, x0
      18:	cmp	w4, #0x70
      1c:	mov	w0, #0xfffffffa            	// #-6
      20:	b.ne	9c <inflateBackInit_+0x9c>  // b.any
      24:	ldrb	w8, [x3]
      28:	cmp	w8, #0x31
      2c:	b.ne	9c <inflateBackInit_+0x9c>  // b.any
      30:	and	w8, w1, #0xfffffff8
      34:	mov	w19, w1
      38:	cmp	w8, #0x8
      3c:	mov	w0, #0xfffffffe            	// #-2
      40:	b.ne	9c <inflateBackInit_+0x9c>  // b.any
      44:	cbz	x21, 9c <inflateBackInit_+0x9c>
      48:	mov	x20, x2
      4c:	cbz	x2, 9c <inflateBackInit_+0x9c>
      50:	ldr	x8, [x21, #64]
      54:	str	xzr, [x21, #48]
      58:	cbz	x8, c0 <inflateBackInit_+0xc0>
      5c:	ldr	x9, [x21, #72]
      60:	cbz	x9, d8 <inflateBackInit_+0xd8>
      64:	ldr	x0, [x21, #80]
      68:	mov	w1, #0x1                   	// #1
      6c:	mov	w2, #0x1bf8                	// #7160
      70:	mov	w22, #0x1                   	// #1
      74:	blr	x8
      78:	cbz	x0, e8 <inflateBackInit_+0xe8>
      7c:	mov	x8, x0
      80:	mov	w0, wzr
      84:	mov	w9, #0x8000                	// #32768
      88:	lsl	w10, w22, w19
      8c:	str	x8, [x21, #56]
      90:	stp	xzr, x20, [x8, #64]
      94:	str	w9, [x8, #28]
      98:	stp	w19, w10, [x8, #56]
      9c:	ldp	x20, x19, [sp, #32]
      a0:	ldp	x22, x21, [sp, #16]
      a4:	ldp	x29, x30, [sp], #48
      a8:	ret
      ac:	mov	w0, #0xfffffffa            	// #-6
      b0:	ldp	x20, x19, [sp, #32]
      b4:	ldp	x22, x21, [sp, #16]
      b8:	ldp	x29, x30, [sp], #48
      bc:	ret
      c0:	adrp	x8, 0 <zcalloc>
      c4:	add	x8, x8, #0x0
      c8:	str	x8, [x21, #64]
      cc:	str	xzr, [x21, #80]
      d0:	ldr	x9, [x21, #72]
      d4:	cbnz	x9, 64 <inflateBackInit_+0x64>
      d8:	adrp	x9, 0 <zcfree>
      dc:	add	x9, x9, #0x0
      e0:	str	x9, [x21, #72]
      e4:	b	64 <inflateBackInit_+0x64>
      e8:	mov	w0, #0xfffffffc            	// #-4
      ec:	ldp	x20, x19, [sp, #32]
      f0:	ldp	x22, x21, [sp, #16]
      f4:	ldp	x29, x30, [sp], #48
      f8:	ret

00000000000000fc <inflateBack>:
      fc:	sub	sp, sp, #0xc0
     100:	stp	x29, x30, [sp, #96]
     104:	add	x29, sp, #0x50
     108:	str	d8, [sp, #80]
     10c:	stp	x28, x27, [sp, #112]
     110:	stp	x26, x25, [sp, #128]
     114:	stp	x24, x23, [sp, #144]
     118:	stp	x22, x21, [sp, #160]
     11c:	stp	x20, x19, [sp, #176]
     120:	stur	x2, [x29, #-8]
     124:	cbz	x0, 168 <inflateBack+0x6c>
     128:	ldr	x28, [x0, #56]
     12c:	mov	x23, x0
     130:	cbz	x28, 168 <inflateBack+0x6c>
     134:	adrp	x8, 0 <inflateBackInit_>
     138:	ldr	d0, [x8]
     13c:	str	xzr, [x23, #48]
     140:	str	wzr, [x28, #64]
     144:	mov	x24, x1
     148:	str	d0, [x28, #8]
     14c:	ldr	x8, [x23]
     150:	stur	x3, [x29, #-32]
     154:	str	x4, [sp, #40]
     158:	str	x8, [x29, #8]
     15c:	cbz	x8, 170 <inflateBack+0x74>
     160:	ldr	w20, [x23, #8]
     164:	b	174 <inflateBack+0x78>
     168:	mov	w0, #0xfffffffe            	// #-2
     16c:	b	ffc <inflateBack+0xf00>
     170:	mov	w20, wzr
     174:	add	x8, x28, #0x558
     178:	str	x8, [sp, #32]
     17c:	add	x8, x28, #0x78
     180:	str	x8, [sp, #24]
     184:	add	x8, x28, #0x98
     188:	str	x8, [sp, #16]
     18c:	add	x8, x28, #0x318
     190:	stur	x8, [x29, #-24]
     194:	add	x8, x28, #0x7c
     198:	str	x8, [sp, #8]
     19c:	adrp	x8, 0 <inflateBackInit_>
     1a0:	ldr	x25, [x28, #72]
     1a4:	ldr	w26, [x28, #60]
     1a8:	ldr	d8, [x8]
     1ac:	adrp	x27, 0 <inflateBackInit_>
     1b0:	mov	x22, xzr
     1b4:	mov	w21, wzr
     1b8:	add	x19, x28, #0x90
     1bc:	add	x27, x27, #0x0
     1c0:	mov	w8, #0x3f3f                	// #16191
     1c4:	stur	x19, [x29, #-16]
     1c8:	mov	w9, #0xffffc0c1            	// #-16191
     1cc:	add	w8, w8, w9
     1d0:	cmp	w8, #0x12
     1d4:	b.hi	1020 <inflateBack+0xf24>  // b.pmore
     1d8:	adrp	x11, 0 <inflateBackInit_>
     1dc:	add	x11, x11, #0x0
     1e0:	adr	x9, 1f4 <inflateBack+0xf8>
     1e4:	ldrh	w10, [x11, x8, lsl #1]
     1e8:	add	x9, x9, x10, lsl #2
     1ec:	mov	w0, #0xfffffffd            	// #-3
     1f0:	br	x9
     1f4:	ldr	w8, [x28, #12]
     1f8:	cbz	w8, 2cc <inflateBack+0x1d0>
     1fc:	and	w8, w21, #0x7
     200:	and	w21, w21, #0xfffffff8
     204:	lsr	x22, x22, x8
     208:	mov	w8, #0x3f50                	// #16208
     20c:	b	55c <inflateBack+0x460>
     210:	and	w8, w21, #0x7
     214:	and	w21, w21, #0xfffffff8
     218:	cmp	w21, #0x1f
     21c:	lsr	x22, x22, x8
     220:	b.hi	360 <inflateBack+0x264>  // b.pmore
     224:	mov	w19, w21
     228:	b	258 <inflateBack+0x15c>
     22c:	ldr	x8, [x29, #8]
     230:	add	x21, x19, #0x8
     234:	sub	w20, w20, #0x1
     238:	cmp	x19, #0x18
     23c:	add	x9, x8, #0x1
     240:	str	x9, [x29, #8]
     244:	ldrb	w8, [x8]
     248:	lsl	x8, x8, x19
     24c:	add	x22, x8, x22
     250:	mov	x19, x21
     254:	b.cs	35c <inflateBack+0x260>  // b.hs, b.nlast
     258:	cbnz	w20, 22c <inflateBack+0x130>
     25c:	ldur	x0, [x29, #-8]
     260:	add	x1, x29, #0x8
     264:	blr	x24
     268:	mov	w20, w0
     26c:	cbnz	w0, 22c <inflateBack+0x130>
     270:	b	fe8 <inflateBack+0xeec>
     274:	cmp	w21, #0xd
     278:	b.hi	428 <inflateBack+0x32c>  // b.pmore
     27c:	mov	w19, w21
     280:	b	2b0 <inflateBack+0x1b4>
     284:	ldr	x8, [x29, #8]
     288:	add	x21, x19, #0x8
     28c:	sub	w20, w20, #0x1
     290:	cmp	x19, #0x6
     294:	add	x9, x8, #0x1
     298:	str	x9, [x29, #8]
     29c:	ldrb	w8, [x8]
     2a0:	lsl	x8, x8, x19
     2a4:	add	x22, x8, x22
     2a8:	mov	x19, x21
     2ac:	b.cs	424 <inflateBack+0x328>  // b.hs, b.nlast
     2b0:	cbnz	w20, 284 <inflateBack+0x188>
     2b4:	ldur	x0, [x29, #-8]
     2b8:	add	x1, x29, #0x8
     2bc:	blr	x24
     2c0:	mov	w20, w0
     2c4:	cbnz	w0, 284 <inflateBack+0x188>
     2c8:	b	fe8 <inflateBack+0xeec>
     2cc:	cmp	w21, #0x2
     2d0:	b.hi	310 <inflateBack+0x214>  // b.pmore
     2d4:	cbnz	w20, 2ec <inflateBack+0x1f0>
     2d8:	ldur	x0, [x29, #-8]
     2dc:	add	x1, x29, #0x8
     2e0:	blr	x24
     2e4:	mov	w20, w0
     2e8:	cbz	w0, fe8 <inflateBack+0xeec>
     2ec:	ldr	x8, [x29, #8]
     2f0:	sub	w20, w20, #0x1
     2f4:	add	x9, x8, #0x1
     2f8:	str	x9, [x29, #8]
     2fc:	ldrb	w8, [x8]
     300:	mov	w9, w21
     304:	add	w21, w21, #0x8
     308:	lsl	x8, x8, x9
     30c:	add	x22, x8, x22
     310:	adrp	x11, 0 <inflateBackInit_>
     314:	and	w8, w22, #0x1
     318:	ubfx	w9, w22, #1, #2
     31c:	add	x11, x11, #0x0
     320:	str	w8, [x28, #12]
     324:	adr	x10, 338 <inflateBack+0x23c>
     328:	ldrb	w8, [x11, x9]
     32c:	add	x10, x10, x8, lsl #2
     330:	mov	w8, #0x3f41                	// #16193
     334:	br	x10
     338:	adrp	x8, 0 <inflateBackInit_>
     33c:	add	x8, x8, #0x0
     340:	str	x8, [x28, #104]
     344:	adrp	x8, 0 <inflateBackInit_>
     348:	add	x8, x8, #0x0
     34c:	str	x8, [x28, #112]
     350:	str	d8, [x28, #120]
     354:	mov	w8, #0x3f48                	// #16200
     358:	b	5f0 <inflateBack+0x4f4>
     35c:	ldur	x19, [x29, #-16]
     360:	lsr	x8, x22, #16
     364:	eor	x8, x8, #0xffff
     368:	cmp	x8, w22, uxth
     36c:	b.ne	418 <inflateBack+0x31c>  // b.any
     370:	ands	w19, w22, #0xffff
     374:	str	w19, [x28, #92]
     378:	b.eq	568 <inflateBack+0x46c>  // b.none
     37c:	ldur	x21, [x29, #-32]
     380:	ldr	x22, [sp, #40]
     384:	b	3d8 <inflateBack+0x2dc>
     388:	cmp	w19, w20
     38c:	ldr	x1, [x29, #8]
     390:	csel	w8, w20, w19, hi  // hi = pmore
     394:	cmp	w8, w26
     398:	csel	w27, w26, w8, hi  // hi = pmore
     39c:	mov	x0, x25
     3a0:	mov	x2, x27
     3a4:	bl	0 <memcpy>
     3a8:	ldr	x8, [x29, #8]
     3ac:	sub	w20, w20, w27
     3b0:	sub	w26, w26, w27
     3b4:	add	x25, x25, x27
     3b8:	add	x8, x8, x27
     3bc:	str	x8, [x29, #8]
     3c0:	ldr	w8, [x28, #92]
     3c4:	subs	w19, w8, w27
     3c8:	adrp	x27, 0 <inflateBackInit_>
     3cc:	add	x27, x27, #0x0
     3d0:	str	w19, [x28, #92]
     3d4:	b.eq	568 <inflateBack+0x46c>  // b.none
     3d8:	cbnz	w20, 3f0 <inflateBack+0x2f4>
     3dc:	ldur	x0, [x29, #-8]
     3e0:	add	x1, x29, #0x8
     3e4:	blr	x24
     3e8:	mov	w20, w0
     3ec:	cbz	w0, fe8 <inflateBack+0xeec>
     3f0:	cbnz	w26, 388 <inflateBack+0x28c>
     3f4:	ldr	w26, [x28, #60]
     3f8:	ldr	x25, [x28, #72]
     3fc:	mov	x0, x22
     400:	mov	w2, w26
     404:	mov	x1, x25
     408:	str	w26, [x28, #64]
     40c:	blr	x21
     410:	cbz	w0, 388 <inflateBack+0x28c>
     414:	b	fec <inflateBack+0xef0>
     418:	adrp	x8, 0 <inflateBackInit_>
     41c:	add	x8, x8, #0x0
     420:	b	554 <inflateBack+0x458>
     424:	ldur	x19, [x29, #-16]
     428:	and	w10, w22, #0x1f
     42c:	ubfx	w9, w22, #5, #5
     430:	ubfx	w8, w22, #10, #4
     434:	lsr	x22, x22, #14
     438:	add	w11, w10, #0x101
     43c:	add	w12, w9, #0x1
     440:	add	w8, w8, #0x4
     444:	cmp	w10, #0x1d
     448:	sub	w21, w21, #0xe
     44c:	stp	w11, w12, [x28, #132]
     450:	str	w8, [x28, #128]
     454:	b.hi	4e8 <inflateBack+0x3ec>  // b.pmore
     458:	cmp	w9, #0x1e
     45c:	b.cs	4e8 <inflateBack+0x3ec>  // b.hs, b.nlast
     460:	mov	w9, wzr
     464:	str	wzr, [x28, #140]
     468:	b	4bc <inflateBack+0x3c0>
     46c:	ldr	x10, [x29, #8]
     470:	sub	w20, w20, #0x1
     474:	add	x11, x10, #0x1
     478:	str	x11, [x29, #8]
     47c:	ldrb	w10, [x10]
     480:	mov	w11, w21
     484:	add	w21, w21, #0x8
     488:	lsl	x10, x10, x11
     48c:	add	x22, x10, x22
     490:	add	w10, w9, #0x1
     494:	ldrh	w9, [x27, w9, uxtw #1]
     498:	and	w11, w22, #0x7
     49c:	lsr	x22, x22, #3
     4a0:	str	w10, [x28, #140]
     4a4:	add	x9, x28, x9, lsl #1
     4a8:	cmp	w10, w8
     4ac:	strh	w11, [x9, #152]
     4b0:	sub	w21, w21, #0x3
     4b4:	mov	w9, w10
     4b8:	b.cs	4f4 <inflateBack+0x3f8>  // b.hs, b.nlast
     4bc:	cmp	w21, #0x2
     4c0:	b.hi	490 <inflateBack+0x394>  // b.pmore
     4c4:	cbnz	w20, 46c <inflateBack+0x370>
     4c8:	ldur	x0, [x29, #-8]
     4cc:	add	x1, x29, #0x8
     4d0:	blr	x24
     4d4:	mov	w20, w0
     4d8:	cbz	w0, fe8 <inflateBack+0xeec>
     4dc:	ldr	w9, [x28, #140]
     4e0:	ldr	w8, [x28, #128]
     4e4:	b	46c <inflateBack+0x370>
     4e8:	adrp	x8, 0 <inflateBackInit_>
     4ec:	add	x8, x8, #0x0
     4f0:	b	554 <inflateBack+0x458>
     4f4:	cmp	w10, #0x12
     4f8:	b.hi	51c <inflateBack+0x420>  // b.pmore
     4fc:	mov	w8, w10
     500:	ldrh	w9, [x27, x8, lsl #1]
     504:	cmp	x8, #0x12
     508:	add	x8, x8, #0x1
     50c:	add	x9, x28, x9, lsl #1
     510:	strh	wzr, [x9, #152]
     514:	b.cc	500 <inflateBack+0x404>  // b.lo, b.ul, b.last
     518:	str	w8, [x28, #140]
     51c:	ldp	x4, x8, [sp, #24]
     520:	ldr	x1, [sp, #16]
     524:	ldur	x5, [x29, #-24]
     528:	mov	w2, #0x13                  	// #19
     52c:	str	x8, [x28, #144]
     530:	str	x8, [x28, #104]
     534:	mov	w8, #0x7                   	// #7
     538:	mov	w0, wzr
     53c:	mov	x3, x19
     540:	str	w8, [x28, #120]
     544:	bl	0 <inflate_table>
     548:	cbz	w0, 574 <inflateBack+0x478>
     54c:	adrp	x8, 0 <inflateBackInit_>
     550:	add	x8, x8, #0x0
     554:	str	x8, [x23, #48]
     558:	mov	w8, #0x3f51                	// #16209
     55c:	str	w8, [x28, #8]
     560:	ldr	w8, [x28, #8]
     564:	b	1c8 <inflateBack+0xcc>
     568:	mov	x22, xzr
     56c:	mov	w21, wzr
     570:	b	bc4 <inflateBack+0xac8>
     574:	ldp	w2, w8, [x28, #132]
     578:	str	wzr, [x28, #140]
     57c:	cmn	w8, w2
     580:	b.ne	604 <inflateBack+0x508>  // b.any
     584:	ldur	x5, [x29, #-24]
     588:	ldr	w8, [x28, #8]
     58c:	mov	w9, #0x3f51                	// #16209
     590:	cmp	w8, w9
     594:	b.eq	560 <inflateBack+0x464>  // b.none
     598:	ldrh	w8, [x28, #664]
     59c:	cbz	w8, 960 <inflateBack+0x864>
     5a0:	ldp	x4, x8, [sp, #24]
     5a4:	ldr	x1, [sp, #16]
     5a8:	mov	w0, #0x1                   	// #1
     5ac:	mov	x3, x19
     5b0:	str	x8, [x28, #144]
     5b4:	str	x8, [x28, #104]
     5b8:	mov	w8, #0x9                   	// #9
     5bc:	str	w8, [x28, #120]
     5c0:	mov	x27, x5
     5c4:	bl	0 <inflate_table>
     5c8:	cbz	w0, 96c <inflateBack+0x870>
     5cc:	adrp	x8, 0 <inflateBackInit_>
     5d0:	add	x8, x8, #0x0
     5d4:	b	ec4 <inflateBack+0xdc8>
     5d8:	mov	w8, #0x3f44                	// #16196
     5dc:	b	5f0 <inflateBack+0x4f4>
     5e0:	adrp	x8, 0 <inflateBackInit_>
     5e4:	add	x8, x8, #0x0
     5e8:	str	x8, [x23, #48]
     5ec:	mov	w8, #0x3f51                	// #16209
     5f0:	str	w8, [x28, #8]
     5f4:	lsr	x22, x22, #3
     5f8:	sub	w21, w21, #0x3
     5fc:	mov	w8, w8
     600:	b	1c8 <inflateBack+0xcc>
     604:	str	x23, [sp]
     608:	b	640 <inflateBack+0x544>
     60c:	ldr	w9, [x28, #140]
     610:	lsr	x22, x22, x27
     614:	sub	w21, w21, w27
     618:	adrp	x27, 0 <inflateBackInit_>
     61c:	add	w11, w9, #0x1
     620:	add	x9, x28, x9, lsl #1
     624:	str	w11, [x28, #140]
     628:	strh	w8, [x9, #152]
     62c:	ldp	w2, w8, [x28, #132]
     630:	add	x27, x27, #0x0
     634:	add	w9, w8, w2
     638:	cmp	w11, w9
     63c:	b.cs	588 <inflateBack+0x48c>  // b.hs, b.nlast
     640:	ldr	w9, [x28, #120]
     644:	ldr	x8, [x28, #104]
     648:	mov	w10, #0xffffffff            	// #-1
     64c:	lsl	w10, w10, w9
     650:	bic	w10, w22, w10
     654:	add	x10, x8, w10, uxtw #2
     658:	ldrb	w27, [x10, #1]
     65c:	cmp	w21, w27
     660:	b.cs	6cc <inflateBack+0x5d0>  // b.hs, b.nlast
     664:	mov	w21, w21
     668:	b	6a8 <inflateBack+0x5ac>
     66c:	ldr	x10, [x29, #8]
     670:	sub	w20, w20, #0x1
     674:	add	x11, x10, #0x1
     678:	str	x11, [x29, #8]
     67c:	ldrb	w10, [x10]
     680:	lsl	x10, x10, x21
     684:	add	x22, x10, x22
     688:	mov	w10, #0xffffffff            	// #-1
     68c:	lsl	w10, w10, w9
     690:	bic	w10, w22, w10
     694:	add	x10, x8, w10, uxtw #2
     698:	ldrb	w27, [x10, #1]
     69c:	add	x21, x21, #0x8
     6a0:	cmp	x21, x27
     6a4:	b.cs	6cc <inflateBack+0x5d0>  // b.hs, b.nlast
     6a8:	cbnz	w20, 66c <inflateBack+0x570>
     6ac:	ldur	x0, [x29, #-8]
     6b0:	add	x1, x29, #0x8
     6b4:	blr	x24
     6b8:	mov	w20, w0
     6bc:	cbz	w0, fe8 <inflateBack+0xeec>
     6c0:	ldr	x8, [x28, #104]
     6c4:	ldr	w9, [x28, #120]
     6c8:	b	66c <inflateBack+0x570>
     6cc:	add	x8, x10, #0x2
     6d0:	ldrh	w8, [x8]
     6d4:	ldur	x5, [x29, #-24]
     6d8:	cmp	w8, #0xf
     6dc:	b.ls	60c <inflateBack+0x510>  // b.plast
     6e0:	cmp	w8, #0x10
     6e4:	b.eq	75c <inflateBack+0x660>  // b.none
     6e8:	cmp	w8, #0x11
     6ec:	b.ne	7c8 <inflateBack+0x6cc>  // b.any
     6f0:	add	w19, w27, #0x3
     6f4:	cmp	w21, w19
     6f8:	b.cs	838 <inflateBack+0x73c>  // b.hs, b.nlast
     6fc:	mvn	w8, w21
     700:	add	w8, w19, w8
     704:	add	w8, w8, #0x8
     708:	and	w8, w8, #0xfffffff8
     70c:	mov	w23, w21
     710:	add	w21, w8, w21
     714:	b	740 <inflateBack+0x644>
     718:	ldr	x8, [x29, #8]
     71c:	sub	w20, w20, #0x1
     720:	add	x9, x8, #0x1
     724:	str	x9, [x29, #8]
     728:	ldrb	w8, [x8]
     72c:	lsl	x8, x8, x23
     730:	add	x23, x23, #0x8
     734:	cmp	x23, x19
     738:	add	x22, x8, x22
     73c:	b.cs	834 <inflateBack+0x738>  // b.hs, b.nlast
     740:	cbnz	w20, 718 <inflateBack+0x61c>
     744:	ldur	x0, [x29, #-8]
     748:	add	x1, x29, #0x8
     74c:	blr	x24
     750:	mov	w20, w0
     754:	cbnz	w0, 718 <inflateBack+0x61c>
     758:	b	fe4 <inflateBack+0xee8>
     75c:	add	w19, w27, #0x2
     760:	cmp	w21, w19
     764:	b.cs	860 <inflateBack+0x764>  // b.hs, b.nlast
     768:	mvn	w8, w21
     76c:	add	w8, w19, w8
     770:	add	w8, w8, #0x8
     774:	and	w8, w8, #0xfffffff8
     778:	mov	w23, w21
     77c:	add	w21, w8, w21
     780:	b	7ac <inflateBack+0x6b0>
     784:	ldr	x8, [x29, #8]
     788:	sub	w20, w20, #0x1
     78c:	add	x9, x8, #0x1
     790:	str	x9, [x29, #8]
     794:	ldrb	w8, [x8]
     798:	lsl	x8, x8, x23
     79c:	add	x23, x23, #0x8
     7a0:	cmp	x23, x19
     7a4:	add	x22, x8, x22
     7a8:	b.cs	85c <inflateBack+0x760>  // b.hs, b.nlast
     7ac:	cbnz	w20, 784 <inflateBack+0x688>
     7b0:	ldur	x0, [x29, #-8]
     7b4:	add	x1, x29, #0x8
     7b8:	blr	x24
     7bc:	mov	w20, w0
     7c0:	cbnz	w0, 784 <inflateBack+0x688>
     7c4:	b	fe4 <inflateBack+0xee8>
     7c8:	add	w19, w27, #0x7
     7cc:	cmp	w21, w19
     7d0:	b.cs	898 <inflateBack+0x79c>  // b.hs, b.nlast
     7d4:	mvn	w8, w21
     7d8:	add	w8, w19, w8
     7dc:	add	w8, w8, #0x8
     7e0:	and	w8, w8, #0xfffffff8
     7e4:	mov	w23, w21
     7e8:	add	w21, w8, w21
     7ec:	b	818 <inflateBack+0x71c>
     7f0:	ldr	x8, [x29, #8]
     7f4:	sub	w20, w20, #0x1
     7f8:	add	x9, x8, #0x1
     7fc:	str	x9, [x29, #8]
     800:	ldrb	w8, [x8]
     804:	lsl	x8, x8, x23
     808:	add	x23, x23, #0x8
     80c:	cmp	x23, x19
     810:	add	x22, x8, x22
     814:	b.cs	894 <inflateBack+0x798>  // b.hs, b.nlast
     818:	cbnz	w20, 7f0 <inflateBack+0x6f4>
     81c:	ldur	x0, [x29, #-8]
     820:	add	x1, x29, #0x8
     824:	blr	x24
     828:	mov	w20, w0
     82c:	cbnz	w0, 7f0 <inflateBack+0x6f4>
     830:	b	fe4 <inflateBack+0xee8>
     834:	ldr	x23, [sp]
     838:	ldur	x19, [x29, #-16]
     83c:	lsr	x9, x22, x27
     840:	sub	w11, w21, w27
     844:	and	w10, w9, #0x7
     848:	mov	w8, wzr
     84c:	lsr	x22, x9, #3
     850:	add	w10, w10, #0x3
     854:	sub	w21, w11, #0x3
     858:	b	8b8 <inflateBack+0x7bc>
     85c:	ldr	x23, [sp]
     860:	ldr	w8, [x28, #140]
     864:	ldur	x19, [x29, #-16]
     868:	lsr	x22, x22, x27
     86c:	sub	w21, w21, w27
     870:	cbz	w8, fd8 <inflateBack+0xedc>
     874:	sub	w8, w8, #0x1
     878:	add	x8, x28, w8, uxtw #1
     87c:	ldrh	w8, [x8, #152]
     880:	and	w9, w22, #0x3
     884:	add	w10, w9, #0x3
     888:	lsr	x22, x22, #2
     88c:	sub	w21, w21, #0x2
     890:	b	8b8 <inflateBack+0x7bc>
     894:	ldr	x23, [sp]
     898:	ldur	x19, [x29, #-16]
     89c:	lsr	x9, x22, x27
     8a0:	sub	w11, w21, w27
     8a4:	and	w10, w9, #0x7f
     8a8:	mov	w8, wzr
     8ac:	lsr	x22, x9, #7
     8b0:	add	w10, w10, #0xb
     8b4:	sub	w21, w11, #0x7
     8b8:	ldp	w9, w13, [x28, #136]
     8bc:	ldr	w2, [x28, #132]
     8c0:	adrp	x27, 0 <inflateBackInit_>
     8c4:	add	x27, x27, #0x0
     8c8:	add	w11, w13, w10
     8cc:	add	w9, w9, w2
     8d0:	cmp	w11, w9
     8d4:	b.hi	9ac <inflateBack+0x8b0>  // b.pmore
     8d8:	cmp	w10, #0xf
     8dc:	b.ls	8f0 <inflateBack+0x7f4>  // b.plast
     8e0:	sub	w11, w10, #0x1
     8e4:	mvn	w12, w13
     8e8:	cmp	w11, w12
     8ec:	b.ls	928 <inflateBack+0x82c>  // b.plast
     8f0:	mov	w11, w13
     8f4:	mov	w12, w10
     8f8:	mov	w10, w11
     8fc:	add	w11, w10, #0x1
     900:	add	x10, x28, w10, uxtw #1
     904:	subs	w12, w12, #0x1
     908:	strh	w8, [x10, #152]
     90c:	mov	w10, w11
     910:	b.ne	8fc <inflateBack+0x800>  // b.any
     914:	ldur	x5, [x29, #-24]
     918:	str	w11, [x28, #140]
     91c:	cmp	w11, w9
     920:	b.cc	640 <inflateBack+0x544>  // b.lo, b.ul, b.last
     924:	b	588 <inflateBack+0x48c>
     928:	and	w14, w10, #0xf0
     92c:	and	w12, w10, #0xf
     930:	add	w11, w13, w14
     934:	dup	v0.8h, w8
     938:	mov	w15, w14
     93c:	add	x16, x28, w13, uxtw #1
     940:	subs	w15, w15, #0x10
     944:	add	w13, w13, #0x10
     948:	stur	q0, [x16, #152]
     94c:	stur	q0, [x16, #168]
     950:	b.ne	93c <inflateBack+0x840>  // b.any
     954:	cmp	w10, w14
     958:	b.ne	8f8 <inflateBack+0x7fc>  // b.any
     95c:	b	914 <inflateBack+0x818>
     960:	adrp	x8, 0 <inflateBackInit_>
     964:	add	x8, x8, #0x0
     968:	b	554 <inflateBack+0x458>
     96c:	ldr	x8, [x28, #144]
     970:	ldp	w9, w2, [x28, #132]
     974:	ldr	x4, [sp, #8]
     978:	mov	w10, #0x6                   	// #6
     97c:	str	x8, [x28, #112]
     980:	add	x8, x28, x9, lsl #1
     984:	add	x1, x8, #0x98
     988:	mov	w0, #0x2                   	// #2
     98c:	mov	x3, x19
     990:	mov	x5, x27
     994:	str	w10, [x28, #124]
     998:	bl	0 <inflate_table>
     99c:	cbz	w0, 9b8 <inflateBack+0x8bc>
     9a0:	adrp	x8, 0 <inflateBackInit_>
     9a4:	add	x8, x8, #0x0
     9a8:	b	ec4 <inflateBack+0xdc8>
     9ac:	adrp	x8, 0 <inflateBackInit_>
     9b0:	add	x8, x8, #0x0
     9b4:	b	554 <inflateBack+0x458>
     9b8:	adrp	x27, 0 <inflateBackInit_>
     9bc:	mov	w8, #0x3f48                	// #16200
     9c0:	add	x27, x27, #0x0
     9c4:	str	w8, [x28, #8]
     9c8:	cmp	w26, #0x102
     9cc:	b.cc	a34 <inflateBack+0x938>  // b.lo, b.ul, b.last
     9d0:	cmp	w20, #0x5
     9d4:	b.ls	a34 <inflateBack+0x938>  // b.plast
     9d8:	str	x25, [x23, #24]
     9dc:	str	w26, [x23, #32]
     9e0:	ldr	x8, [x29, #8]
     9e4:	str	w20, [x23, #8]
     9e8:	str	x8, [x23]
     9ec:	ldp	w1, w8, [x28, #60]
     9f0:	str	x22, [x28, #80]
     9f4:	str	w21, [x28, #88]
     9f8:	cmp	w8, w1
     9fc:	b.cs	a08 <inflateBack+0x90c>  // b.hs, b.nlast
     a00:	sub	w8, w1, w26
     a04:	str	w8, [x28, #64]
     a08:	mov	x0, x23
     a0c:	bl	0 <inflate_fast>
     a10:	ldr	x8, [x23]
     a14:	ldr	x25, [x23, #24]
     a18:	ldr	w26, [x23, #32]
     a1c:	str	x8, [x29, #8]
     a20:	ldr	w20, [x23, #8]
     a24:	ldr	x22, [x28, #80]
     a28:	ldr	w21, [x28, #88]
     a2c:	ldr	w8, [x28, #8]
     a30:	b	1c8 <inflateBack+0xcc>
     a34:	ldr	w9, [x28, #120]
     a38:	ldr	x8, [x28, #104]
     a3c:	mov	w19, #0xffffffff            	// #-1
     a40:	lsl	w10, w19, w9
     a44:	bic	w10, w22, w10
     a48:	add	x10, x8, w10, uxtw #2
     a4c:	ldrb	w27, [x10, #1]
     a50:	cmp	w21, w27
     a54:	b.cs	abc <inflateBack+0x9c0>  // b.hs, b.nlast
     a58:	mov	w21, w21
     a5c:	b	a98 <inflateBack+0x99c>
     a60:	ldr	x10, [x29, #8]
     a64:	sub	w20, w20, #0x1
     a68:	add	x11, x10, #0x1
     a6c:	str	x11, [x29, #8]
     a70:	ldrb	w10, [x10]
     a74:	lsl	x10, x10, x21
     a78:	add	x22, x10, x22
     a7c:	lsl	w10, w19, w9
     a80:	bic	w10, w22, w10
     a84:	add	x10, x8, w10, uxtw #2
     a88:	ldrb	w27, [x10, #1]
     a8c:	add	x21, x21, #0x8
     a90:	cmp	x21, x27
     a94:	b.cs	abc <inflateBack+0x9c0>  // b.hs, b.nlast
     a98:	cbnz	w20, a60 <inflateBack+0x964>
     a9c:	ldur	x0, [x29, #-8]
     aa0:	add	x1, x29, #0x8
     aa4:	blr	x24
     aa8:	mov	w20, w0
     aac:	cbz	w0, fe8 <inflateBack+0xeec>
     ab0:	ldr	x8, [x28, #104]
     ab4:	ldr	w9, [x28, #120]
     ab8:	b	a60 <inflateBack+0x964>
     abc:	add	x11, x10, #0x2
     ac0:	ldrb	w9, [x10]
     ac4:	ldrh	w19, [x11]
     ac8:	cbz	w9, b8c <inflateBack+0xa90>
     acc:	and	w10, w9, #0xf0
     ad0:	cbnz	w10, b8c <inflateBack+0xa90>
     ad4:	add	w9, w27, w9
     ad8:	mov	w10, #0xffffffff            	// #-1
     adc:	lsl	w11, w10, w9
     ae0:	bic	w9, w22, w11
     ae4:	lsr	w9, w9, w27
     ae8:	add	w9, w9, w19
     aec:	add	x10, x8, w9, uxtw #2
     af0:	ldrb	w10, [x10, #1]
     af4:	add	w12, w27, w10
     af8:	cmp	w12, w21
     afc:	b.ls	b74 <inflateBack+0xa78>  // b.plast
     b00:	str	x23, [sp]
     b04:	mvn	w23, w11
     b08:	b	b4c <inflateBack+0xa50>
     b0c:	ldr	x9, [x29, #8]
     b10:	sub	w20, w20, #0x1
     b14:	add	x10, x9, #0x1
     b18:	str	x10, [x29, #8]
     b1c:	ldrb	w9, [x9]
     b20:	lsl	x9, x9, x21
     b24:	add	x22, x9, x22
     b28:	and	w9, w22, w23
     b2c:	lsr	w9, w9, w27
     b30:	add	w9, w9, w19
     b34:	add	x10, x8, w9, uxtw #2
     b38:	ldrb	w10, [x10, #1]
     b3c:	add	w21, w21, #0x8
     b40:	add	w11, w27, w10
     b44:	cmp	w11, w21
     b48:	b.ls	b6c <inflateBack+0xa70>  // b.plast
     b4c:	cbnz	w20, b0c <inflateBack+0xa10>
     b50:	ldur	x0, [x29, #-8]
     b54:	add	x1, x29, #0x8
     b58:	blr	x24
     b5c:	mov	w20, w0
     b60:	cbz	w0, fe4 <inflateBack+0xee8>
     b64:	ldr	x8, [x28, #104]
     b68:	b	b0c <inflateBack+0xa10>
     b6c:	ldr	x23, [sp]
     b70:	mov	w9, w9
     b74:	add	x8, x8, x9, lsl #2
     b78:	ldrh	w19, [x8, #2]
     b7c:	ldrb	w9, [x8]
     b80:	lsr	x22, x22, x27
     b84:	sub	w21, w21, w27
     b88:	mov	w27, w10
     b8c:	lsr	x22, x22, x27
     b90:	sub	w21, w21, w27
     b94:	adrp	x27, 0 <inflateBackInit_>
     b98:	add	x27, x27, #0x0
     b9c:	str	w19, [x28, #92]
     ba0:	cbz	w9, c14 <inflateBack+0xb18>
     ba4:	tbnz	w9, #5, bc4 <inflateBack+0xac8>
     ba8:	tbnz	w9, #6, c50 <inflateBack+0xb54>
     bac:	ands	w8, w9, #0xf
     bb0:	str	w8, [x28, #100]
     bb4:	b.eq	c70 <inflateBack+0xb74>  // b.none
     bb8:	cmp	w21, w8
     bbc:	b.cc	bf8 <inflateBack+0xafc>  // b.lo, b.ul, b.last
     bc0:	b	c7c <inflateBack+0xb80>
     bc4:	mov	w8, #0x3f3f                	// #16191
     bc8:	b	c60 <inflateBack+0xb64>
     bcc:	ldr	w8, [x28, #100]
     bd0:	ldr	x9, [x29, #8]
     bd4:	sub	w20, w20, #0x1
     bd8:	add	x10, x9, #0x1
     bdc:	str	x10, [x29, #8]
     be0:	ldrb	w9, [x9]
     be4:	lsl	x9, x9, x21
     be8:	add	w21, w21, #0x8
     bec:	cmp	w21, w8
     bf0:	add	x22, x9, x22
     bf4:	b.cs	c78 <inflateBack+0xb7c>  // b.hs, b.nlast
     bf8:	cbnz	w20, bd0 <inflateBack+0xad4>
     bfc:	ldur	x0, [x29, #-8]
     c00:	add	x1, x29, #0x8
     c04:	blr	x24
     c08:	mov	w20, w0
     c0c:	cbnz	w0, bcc <inflateBack+0xad0>
     c10:	b	fe8 <inflateBack+0xeec>
     c14:	cbnz	w26, c40 <inflateBack+0xb44>
     c18:	ldr	w26, [x28, #60]
     c1c:	ldr	x25, [x28, #72]
     c20:	ldr	x0, [sp, #40]
     c24:	ldur	x8, [x29, #-32]
     c28:	mov	w2, w26
     c2c:	mov	x1, x25
     c30:	str	w26, [x28, #64]
     c34:	blr	x8
     c38:	cbnz	w0, fec <inflateBack+0xef0>
     c3c:	ldr	w19, [x28, #92]
     c40:	strb	w19, [x25], #1
     c44:	sub	w26, w26, #0x1
     c48:	mov	w8, #0x3f48                	// #16200
     c4c:	b	c60 <inflateBack+0xb64>
     c50:	adrp	x8, 0 <inflateBackInit_>
     c54:	add	x8, x8, #0x0
     c58:	str	x8, [x23, #48]
     c5c:	mov	w8, #0x3f51                	// #16209
     c60:	str	w8, [x28, #8]
     c64:	ldur	x19, [x29, #-16]
     c68:	mov	w8, w8
     c6c:	b	1c8 <inflateBack+0xcc>
     c70:	mov	w10, #0xffffffff            	// #-1
     c74:	b	c98 <inflateBack+0xb9c>
     c78:	ldr	w19, [x28, #92]
     c7c:	mov	w10, #0xffffffff            	// #-1
     c80:	lsl	w9, w10, w8
     c84:	bic	w9, w22, w9
     c88:	lsr	x22, x22, x8
     c8c:	add	w9, w19, w9
     c90:	sub	w21, w21, w8
     c94:	str	w9, [x28, #92]
     c98:	ldr	w9, [x28, #124]
     c9c:	ldr	x8, [x28, #112]
     ca0:	lsl	w10, w10, w9
     ca4:	bic	w10, w22, w10
     ca8:	add	x10, x8, w10, uxtw #2
     cac:	ldrb	w19, [x10, #1]
     cb0:	cmp	w21, w19
     cb4:	b.cs	d20 <inflateBack+0xc24>  // b.hs, b.nlast
     cb8:	mov	w21, w21
     cbc:	b	cf8 <inflateBack+0xbfc>
     cc0:	ldr	x10, [x29, #8]
     cc4:	sub	w20, w20, #0x1
     cc8:	add	x11, x10, #0x1
     ccc:	str	x11, [x29, #8]
     cd0:	ldrb	w10, [x10]
     cd4:	lsl	x10, x10, x21
     cd8:	add	x22, x10, x22
     cdc:	lsl	w10, w19, w9
     ce0:	bic	w10, w22, w10
     ce4:	add	x10, x8, w10, uxtw #2
     ce8:	ldrb	w19, [x10, #1]
     cec:	add	x21, x21, #0x8
     cf0:	cmp	x21, x19
     cf4:	b.cs	d20 <inflateBack+0xc24>  // b.hs, b.nlast
     cf8:	mov	w19, #0xffffffff            	// #-1
     cfc:	cbnz	w20, cc0 <inflateBack+0xbc4>
     d00:	ldur	x0, [x29, #-8]
     d04:	add	x1, x29, #0x8
     d08:	blr	x24
     d0c:	mov	w20, w0
     d10:	cbz	w0, fe8 <inflateBack+0xeec>
     d14:	ldr	x8, [x28, #112]
     d18:	ldr	w9, [x28, #124]
     d1c:	b	cc0 <inflateBack+0xbc4>
     d20:	add	x9, x10, #0x2
     d24:	ldrb	w10, [x10]
     d28:	ldrh	w27, [x9]
     d2c:	tst	w10, #0xf0
     d30:	b.ne	dec <inflateBack+0xcf0>  // b.any
     d34:	add	w9, w19, w10
     d38:	mov	w10, #0xffffffff            	// #-1
     d3c:	lsl	w11, w10, w9
     d40:	bic	w9, w22, w11
     d44:	lsr	w9, w9, w19
     d48:	add	w10, w9, w27
     d4c:	add	x9, x8, w10, uxtw #2
     d50:	ldrb	w9, [x9, #1]
     d54:	add	w12, w19, w9
     d58:	cmp	w12, w21
     d5c:	b.ls	dd4 <inflateBack+0xcd8>  // b.plast
     d60:	str	x23, [sp]
     d64:	mvn	w23, w11
     d68:	b	db0 <inflateBack+0xcb4>
     d6c:	ldr	x8, [x28, #112]
     d70:	ldr	x9, [x29, #8]
     d74:	sub	w20, w20, #0x1
     d78:	add	x10, x9, #0x1
     d7c:	str	x10, [x29, #8]
     d80:	ldrb	w9, [x9]
     d84:	lsl	x9, x9, x21
     d88:	add	x22, x9, x22
     d8c:	and	w9, w22, w23
     d90:	lsr	w9, w9, w19
     d94:	add	w10, w9, w27
     d98:	add	x9, x8, w10, uxtw #2
     d9c:	ldrb	w9, [x9, #1]
     da0:	add	w21, w21, #0x8
     da4:	add	w11, w19, w9
     da8:	cmp	w11, w21
     dac:	b.ls	dcc <inflateBack+0xcd0>  // b.plast
     db0:	cbnz	w20, d70 <inflateBack+0xc74>
     db4:	ldur	x0, [x29, #-8]
     db8:	add	x1, x29, #0x8
     dbc:	blr	x24
     dc0:	mov	w20, w0
     dc4:	cbnz	w0, d6c <inflateBack+0xc70>
     dc8:	b	fe4 <inflateBack+0xee8>
     dcc:	ldr	x23, [sp]
     dd0:	mov	w10, w10
     dd4:	add	x8, x8, x10, lsl #2
     dd8:	ldrh	w27, [x8, #2]
     ddc:	ldrb	w10, [x8]
     de0:	lsr	x22, x22, x19
     de4:	sub	w21, w21, w19
     de8:	mov	w19, w9
     dec:	lsr	x22, x22, x19
     df0:	sub	w21, w21, w19
     df4:	tbnz	w10, #6, e5c <inflateBack+0xd60>
     df8:	ands	w8, w10, #0xf
     dfc:	stp	w27, w8, [x28, #96]
     e00:	ldur	x19, [x29, #-16]
     e04:	b.eq	ea4 <inflateBack+0xda8>  // b.none
     e08:	cmp	w21, w8
     e0c:	b.cc	e3c <inflateBack+0xd40>  // b.lo, b.ul, b.last
     e10:	b	e88 <inflateBack+0xd8c>
     e14:	ldr	x9, [x29, #8]
     e18:	sub	w20, w20, #0x1
     e1c:	add	x10, x9, #0x1
     e20:	str	x10, [x29, #8]
     e24:	ldrb	w9, [x9]
     e28:	lsl	x9, x9, x21
     e2c:	add	w21, w21, #0x8
     e30:	cmp	w21, w8
     e34:	add	x22, x9, x22
     e38:	b.cs	e84 <inflateBack+0xd88>  // b.hs, b.nlast
     e3c:	cbnz	w20, e14 <inflateBack+0xd18>
     e40:	ldur	x0, [x29, #-8]
     e44:	add	x1, x29, #0x8
     e48:	blr	x24
     e4c:	mov	w20, w0
     e50:	cbz	w0, fe8 <inflateBack+0xeec>
     e54:	ldr	w8, [x28, #100]
     e58:	b	e14 <inflateBack+0xd18>
     e5c:	adrp	x8, 0 <inflateBackInit_>
     e60:	ldur	x19, [x29, #-16]
     e64:	add	x8, x8, #0x0
     e68:	str	x8, [x23, #48]
     e6c:	mov	w8, #0x3f51                	// #16209
     e70:	adrp	x27, 0 <inflateBackInit_>
     e74:	str	w8, [x28, #8]
     e78:	add	x27, x27, #0x0
     e7c:	mov	w8, w8
     e80:	b	1c8 <inflateBack+0xcc>
     e84:	ldr	w27, [x28, #96]
     e88:	mov	w9, #0xffffffff            	// #-1
     e8c:	lsl	w9, w9, w8
     e90:	bic	w9, w22, w9
     e94:	lsr	x22, x22, x8
     e98:	add	w27, w27, w9
     e9c:	sub	w21, w21, w8
     ea0:	str	w27, [x28, #96]
     ea4:	ldp	w8, w9, [x28, #60]
     ea8:	cmp	w9, w8
     eac:	csel	w9, w26, wzr, cc  // cc = lo, ul, last
     eb0:	sub	w8, w8, w9
     eb4:	cmp	w27, w8
     eb8:	b.ls	eec <inflateBack+0xdf0>  // b.plast
     ebc:	adrp	x8, 0 <inflateBackInit_>
     ec0:	add	x8, x8, #0x0
     ec4:	str	x8, [x23, #48]
     ec8:	mov	w8, #0x3f51                	// #16209
     ecc:	adrp	x27, 0 <inflateBackInit_>
     ed0:	str	w8, [x28, #8]
     ed4:	add	x27, x27, #0x0
     ed8:	mov	w8, w8
     edc:	b	1c8 <inflateBack+0xcc>
     ee0:	ldr	w9, [x28, #92]
     ee4:	sub	w26, w26, w8
     ee8:	cbz	w9, fc8 <inflateBack+0xecc>
     eec:	mov	x27, x25
     ef0:	cbnz	w26, f18 <inflateBack+0xe1c>
     ef4:	ldr	w26, [x28, #60]
     ef8:	ldr	x27, [x28, #72]
     efc:	ldr	x0, [sp, #40]
     f00:	ldur	x8, [x29, #-32]
     f04:	mov	w2, w26
     f08:	mov	x1, x27
     f0c:	str	w26, [x28, #64]
     f10:	blr	x8
     f14:	cbnz	w0, fec <inflateBack+0xef0>
     f18:	ldr	w8, [x28, #60]
     f1c:	ldp	w10, w9, [x28, #92]
     f20:	sub	w8, w8, w9
     f24:	cmp	w26, w8
     f28:	csel	w12, w8, wzr, hi  // hi = pmore
     f2c:	csneg	x11, x8, x9, hi  // hi = pmore
     f30:	sub	w8, w26, w12
     f34:	cmp	w8, w10
     f38:	csel	w8, w10, w8, hi  // hi = pmore
     f3c:	sub	w12, w10, w8
     f40:	sub	w10, w8, #0x1
     f44:	add	x9, x27, x11
     f48:	cmp	w10, #0x1f
     f4c:	str	w12, [x28, #92]
     f50:	b.cc	f74 <inflateBack+0xe78>  // b.lo, b.ul, b.last
     f54:	add	x12, x27, #0x1
     f58:	add	x13, x11, x10
     f5c:	add	x13, x12, x13
     f60:	cmp	x27, x13
     f64:	b.cs	f90 <inflateBack+0xe94>  // b.hs, b.nlast
     f68:	add	x12, x12, x10
     f6c:	cmp	x9, x12
     f70:	b.cs	f90 <inflateBack+0xe94>  // b.hs, b.nlast
     f74:	mov	x25, x27
     f78:	mov	w10, w8
     f7c:	ldrb	w11, [x9], #1
     f80:	subs	w10, w10, #0x1
     f84:	strb	w11, [x25], #1
     f88:	b.ne	f7c <inflateBack+0xe80>  // b.any
     f8c:	b	ee0 <inflateBack+0xde4>
     f90:	add	x12, x10, #0x1
     f94:	and	x13, x12, #0x1ffffffe0
     f98:	add	x25, x27, x13
     f9c:	sub	w10, w8, w13
     fa0:	add	x9, x9, x13
     fa4:	mov	x14, x13
     fa8:	add	x15, x27, x11
     fac:	ldp	q0, q1, [x15]
     fb0:	subs	x14, x14, #0x20
     fb4:	stp	q0, q1, [x27], #32
     fb8:	b.ne	fa8 <inflateBack+0xeac>  // b.any
     fbc:	cmp	x12, x13
     fc0:	b.ne	f7c <inflateBack+0xe80>  // b.any
     fc4:	b	ee0 <inflateBack+0xde4>
     fc8:	ldr	w8, [x28, #8]
     fcc:	adrp	x27, 0 <inflateBackInit_>
     fd0:	add	x27, x27, #0x0
     fd4:	b	1c8 <inflateBack+0xcc>
     fd8:	adrp	x8, 0 <inflateBackInit_>
     fdc:	add	x8, x8, #0x0
     fe0:	b	ec4 <inflateBack+0xdc8>
     fe4:	ldr	x23, [sp]
     fe8:	str	xzr, [x29, #8]
     fec:	mov	w0, #0xfffffffb            	// #-5
     ff0:	ldr	x8, [x29, #8]
     ff4:	str	w20, [x23, #8]
     ff8:	str	x8, [x23]
     ffc:	ldp	x20, x19, [sp, #176]
    1000:	ldp	x22, x21, [sp, #160]
    1004:	ldp	x24, x23, [sp, #144]
    1008:	ldp	x26, x25, [sp, #128]
    100c:	ldp	x28, x27, [sp, #112]
    1010:	ldp	x29, x30, [sp, #96]
    1014:	ldr	d8, [sp, #80]
    1018:	add	sp, sp, #0xc0
    101c:	ret
    1020:	mov	w0, #0xfffffffe            	// #-2
    1024:	b	ff0 <inflateBack+0xef4>
    1028:	ldr	w8, [x28, #60]
    102c:	subs	w2, w8, w26
    1030:	b.ls	1054 <inflateBack+0xf58>  // b.plast
    1034:	ldr	x1, [x28, #72]
    1038:	ldr	x0, [sp, #40]
    103c:	ldur	x8, [x29, #-32]
    1040:	blr	x8
    1044:	cmp	w0, #0x0
    1048:	mov	w8, #0xfffffffb            	// #-5
    104c:	csinc	w0, w8, wzr, ne  // ne = any
    1050:	b	ff0 <inflateBack+0xef4>
    1054:	mov	w0, #0x1                   	// #1
    1058:	b	ff0 <inflateBack+0xef4>

000000000000105c <inflateBackEnd>:
    105c:	stp	x29, x30, [sp, #-32]!
    1060:	str	x19, [sp, #16]
    1064:	mov	x29, sp
    1068:	cbz	x0, 109c <inflateBackEnd+0x40>
    106c:	ldr	x1, [x0, #56]
    1070:	mov	x19, x0
    1074:	cbz	x1, 109c <inflateBackEnd+0x40>
    1078:	ldr	x8, [x19, #72]
    107c:	cbz	x8, 109c <inflateBackEnd+0x40>
    1080:	ldr	x0, [x19, #80]
    1084:	blr	x8
    1088:	mov	w0, wzr
    108c:	str	xzr, [x19, #56]
    1090:	ldr	x19, [sp, #16]
    1094:	ldp	x29, x30, [sp], #32
    1098:	ret
    109c:	mov	w0, #0xfffffffe            	// #-2
    10a0:	ldr	x19, [sp, #16]
    10a4:	ldp	x29, x30, [sp], #32
    10a8:	ret

inffast.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_fast>:
   0:	sub	sp, sp, #0xa0
   4:	stp	x29, x30, [sp, #64]
   8:	stp	x28, x27, [sp, #80]
   c:	stp	x26, x25, [sp, #96]
  10:	stp	x24, x23, [sp, #112]
  14:	stp	x22, x21, [sp, #128]
  18:	stp	x20, x19, [sp, #144]
  1c:	ldr	x8, [x0, #56]
  20:	ldr	w11, [x0, #32]
  24:	ldr	w10, [x0, #8]
  28:	ldr	x30, [x0, #24]
  2c:	ldp	w17, w18, [x8, #60]
  30:	sub	w15, w1, w11
  34:	ldr	w1, [x8, #68]
  38:	ldp	w2, w7, [x8, #120]
  3c:	sub	w12, w10, #0x5
  40:	ldp	x28, x10, [x8, #72]
  44:	sub	x5, x30, x15
  48:	mov	w14, #0xffffffff            	// #-1
  4c:	sub	w15, w5, #0x1
  50:	ldr	x9, [x0]
  54:	ldp	x3, x4, [x8, #104]
  58:	str	w15, [sp, #60]
  5c:	lsl	w15, w14, w2
  60:	add	w2, w1, w17
  64:	str	w2, [sp, #56]
  68:	add	x2, x28, #0x1
  6c:	str	x2, [sp, #48]
  70:	sub	w20, w1, #0x1
  74:	mvn	w2, w1
  78:	sub	w16, w11, #0x101
  7c:	mvn	w22, w15
  80:	add	x24, x20, #0x1
  84:	add	w15, w2, w5
  88:	add	x11, x9, x12
  8c:	add	x12, x30, x16
  90:	lsl	w16, w14, w7
  94:	add	x7, x28, #0x10
  98:	str	w15, [sp, #44]
  9c:	add	x15, x28, x24
  a0:	and	x27, x24, #0x1ffffffe0
  a4:	ldr	w13, [x8, #88]
  a8:	stp	x15, x7, [sp, #24]
  ac:	sub	w15, w1, w27
  b0:	str	w15, [sp, #20]
  b4:	add	x15, x28, x27
  b8:	adrp	x6, 0 <inflate_fast>
  bc:	str	x15, [sp, #8]
  c0:	adrp	x15, 0 <inflate_fast>
  c4:	add	x6, x6, #0x0
  c8:	mvn	w23, w16
  cc:	add	x15, x15, #0x0
  d0:	cmp	w13, #0xe
  d4:	b.hi	fc <inflate_fast+0xfc>  // b.pmore
  d8:	ldrb	w16, [x9]
  dc:	ldrb	w2, [x9, #1]
  e0:	add	w7, w13, #0x8
  e4:	add	x9, x9, #0x2
  e8:	lsl	x16, x16, x13
  ec:	lsl	x2, x2, x7
  f0:	add	x10, x16, x10
  f4:	add	x10, x10, x2
  f8:	add	w13, w13, #0x10
  fc:	and	x16, x10, x22
 100:	add	x16, x3, x16, lsl #2
 104:	ldrb	w7, [x16, #1]
 108:	ldrb	w2, [x16]
 10c:	ldrh	w16, [x16, #2]
 110:	lsr	x10, x10, x7
 114:	sub	w13, w13, w7
 118:	cbz	w2, 13c <inflate_fast+0x13c>
 11c:	and	w7, w2, #0xff
 120:	tbnz	w2, #4, 154 <inflate_fast+0x154>
 124:	tbnz	w7, #6, 67c <inflate_fast+0x67c>
 128:	lsl	w2, w14, w7
 12c:	mvn	w2, w2
 130:	and	x2, x10, x2
 134:	add	x16, x2, w16, uxth
 138:	b	100 <inflate_fast+0x100>
 13c:	strb	w16, [x30], #1
 140:	cmp	x30, x12
 144:	b.cs	6a4 <inflate_fast+0x6a4>  // b.hs, b.nlast
 148:	cmp	x9, x11
 14c:	b.cc	d0 <inflate_fast+0xd0>  // b.lo, b.ul, b.last
 150:	b	6a4 <inflate_fast+0x6a4>
 154:	ands	w2, w7, #0xf
 158:	and	w16, w16, #0xffff
 15c:	b.eq	18c <inflate_fast+0x18c>  // b.none
 160:	cmp	w13, w2
 164:	b.cs	178 <inflate_fast+0x178>  // b.hs, b.nlast
 168:	ldrb	w7, [x9], #1
 16c:	lsl	x7, x7, x13
 170:	add	x10, x7, x10
 174:	add	w13, w13, #0x8
 178:	lsl	w7, w14, w2
 17c:	bic	w7, w10, w7
 180:	lsr	x10, x10, x2
 184:	add	w16, w7, w16
 188:	sub	w13, w13, w2
 18c:	cmp	w13, #0xe
 190:	b.hi	1b8 <inflate_fast+0x1b8>  // b.pmore
 194:	ldrb	w2, [x9]
 198:	ldrb	w7, [x9, #1]
 19c:	add	w19, w13, #0x8
 1a0:	add	x9, x9, #0x2
 1a4:	lsl	x2, x2, x13
 1a8:	lsl	x7, x7, x19
 1ac:	add	x10, x2, x10
 1b0:	add	x10, x10, x7
 1b4:	add	w13, w13, #0x10
 1b8:	and	x2, x10, x23
 1bc:	add	x7, x4, x2, lsl #2
 1c0:	ldrb	w19, [x7, #1]
 1c4:	ldrb	w2, [x7]
 1c8:	ldrh	w25, [x7, #2]
 1cc:	lsr	x10, x10, x19
 1d0:	sub	w13, w13, w19
 1d4:	tbnz	w2, #4, 1f0 <inflate_fast+0x1f0>
 1d8:	tbnz	w2, #6, 694 <inflate_fast+0x694>
 1dc:	lsl	w2, w14, w2
 1e0:	mvn	w2, w2
 1e4:	and	x2, x10, x2
 1e8:	add	x2, x2, w25, uxth
 1ec:	b	1bc <inflate_fast+0x1bc>
 1f0:	and	w2, w2, #0xf
 1f4:	cmp	w13, w2
 1f8:	b.cs	230 <inflate_fast+0x230>  // b.hs, b.nlast
 1fc:	mov	x7, x9
 200:	ldrb	w19, [x7], #1
 204:	add	w21, w13, #0x8
 208:	cmp	w21, w2
 20c:	lsl	x19, x19, x13
 210:	add	x10, x19, x10
 214:	b.cs	238 <inflate_fast+0x238>  // b.hs, b.nlast
 218:	ldrb	w7, [x9, #1]
 21c:	add	x9, x9, #0x2
 220:	lsl	x7, x7, x21
 224:	add	x10, x7, x10
 228:	add	w21, w13, #0x10
 22c:	b	23c <inflate_fast+0x23c>
 230:	mov	w21, w13
 234:	b	23c <inflate_fast+0x23c>
 238:	mov	x9, x7
 23c:	lsl	w13, w14, w2
 240:	bic	w19, w10, w13
 244:	add	w26, w19, w25
 248:	sub	w13, w30, w5
 24c:	lsr	x10, x10, x2
 250:	subs	w29, w26, w13
 254:	sub	w13, w21, w2
 258:	b.ls	2b0 <inflate_fast+0x2b0>  // b.plast
 25c:	cmp	w29, w18
 260:	b.ls	26c <inflate_fast+0x26c>  // b.plast
 264:	ldr	w2, [x8, #7144]
 268:	cbnz	w2, 698 <inflate_fast+0x698>
 26c:	cbz	w1, 330 <inflate_fast+0x330>
 270:	subs	w21, w1, w29
 274:	b.cs	360 <inflate_fast+0x360>  // b.hs, b.nlast
 278:	ldr	w2, [sp, #56]
 27c:	sub	w21, w29, w1
 280:	sub	w7, w2, w29
 284:	subs	w29, w16, w21
 288:	add	x2, x28, x7
 28c:	b.ls	5c8 <inflate_fast+0x5c8>  // b.plast
 290:	ldr	w16, [sp, #44]
 294:	add	w16, w16, w19
 298:	add	w19, w16, w25
 29c:	sub	w16, w19, w30
 2a0:	cmp	w16, #0x1f
 2a4:	b.cs	3e4 <inflate_fast+0x3e4>  // b.hs, b.nlast
 2a8:	mov	x25, x30
 2ac:	b	4fc <inflate_fast+0x4fc>
 2b0:	mov	w7, w26
 2b4:	neg	x19, x7
 2b8:	sub	x7, x30, x7
 2bc:	mov	x2, xzr
 2c0:	add	x7, x7, #0x1
 2c4:	mov	w21, w16
 2c8:	add	x25, x7, x2
 2cc:	ldurb	w26, [x25, #-1]
 2d0:	add	x29, x30, x2
 2d4:	sub	w21, w21, #0x3
 2d8:	cmp	w21, #0x2
 2dc:	strb	w26, [x29]
 2e0:	ldrb	w26, [x25]
 2e4:	add	x2, x2, #0x3
 2e8:	strb	w26, [x29, #1]
 2ec:	ldrb	w25, [x25, #1]
 2f0:	strb	w25, [x29, #2]
 2f4:	b.hi	2c8 <inflate_fast+0x2c8>  // b.pmore
 2f8:	cmp	w16, w2
 2fc:	add	x7, x30, x2
 300:	b.eq	624 <inflate_fast+0x624>  // b.none
 304:	add	x21, x30, x19
 308:	add	x21, x21, x2
 30c:	add	x21, x21, #0x1
 310:	ldurb	w21, [x21, #-1]
 314:	mov	w16, w16
 318:	sub	x16, x16, #0x1
 31c:	cmp	w16, w2
 320:	strb	w21, [x7]
 324:	b.ne	390 <inflate_fast+0x390>  // b.any
 328:	add	x30, x7, #0x1
 32c:	b	140 <inflate_fast+0x140>
 330:	sub	w7, w17, w29
 334:	subs	w21, w16, w29
 338:	add	x2, x28, x7
 33c:	b.ls	5c8 <inflate_fast+0x5c8>  // b.plast
 340:	ldr	w16, [sp, #60]
 344:	add	w16, w16, w19
 348:	add	w19, w16, w25
 34c:	sub	w16, w19, w30
 350:	cmp	w16, #0x1f
 354:	b.cs	3ac <inflate_fast+0x3ac>  // b.hs, b.nlast
 358:	mov	x16, x30
 35c:	b	494 <inflate_fast+0x494>
 360:	subs	w7, w16, w29
 364:	add	x2, x28, x21
 368:	b.ls	5c8 <inflate_fast+0x5c8>  // b.plast
 36c:	ldr	w16, [sp, #60]
 370:	str	w7, [sp, #4]
 374:	add	w16, w16, w19
 378:	add	w7, w16, w25
 37c:	sub	w16, w7, w30
 380:	cmp	w16, #0x1f
 384:	b.cs	41c <inflate_fast+0x41c>  // b.hs, b.nlast
 388:	mov	x16, x30
 38c:	b	5ac <inflate_fast+0x5ac>
 390:	add	x16, x30, x19
 394:	add	x16, x16, x2
 398:	ldrb	w16, [x16, #1]
 39c:	add	x2, x30, x2
 3a0:	add	x30, x2, #0x2
 3a4:	strb	w16, [x7, #1]
 3a8:	b	140 <inflate_fast+0x140>
 3ac:	str	w21, [sp, #4]
 3b0:	ldr	x21, [sp, #48]
 3b4:	sub	w19, w19, w30
 3b8:	add	x25, x7, x19
 3bc:	add	x25, x21, x25
 3c0:	cmp	x30, x25
 3c4:	b.cs	44c <inflate_fast+0x44c>  // b.hs, b.nlast
 3c8:	add	x19, x30, x19
 3cc:	add	x19, x19, #0x1
 3d0:	cmp	x2, x19
 3d4:	b.cs	44c <inflate_fast+0x44c>  // b.hs, b.nlast
 3d8:	ldr	w21, [sp, #4]
 3dc:	mov	x16, x30
 3e0:	b	494 <inflate_fast+0x494>
 3e4:	str	w29, [sp, #4]
 3e8:	ldr	x29, [sp, #48]
 3ec:	sub	w19, w19, w30
 3f0:	add	x25, x7, x19
 3f4:	add	x25, x29, x25
 3f8:	cmp	x30, x25
 3fc:	b.cs	4b4 <inflate_fast+0x4b4>  // b.hs, b.nlast
 400:	add	x19, x30, x19
 404:	add	x19, x19, #0x1
 408:	cmp	x2, x19
 40c:	b.cs	4b4 <inflate_fast+0x4b4>  // b.hs, b.nlast
 410:	ldr	w29, [sp, #4]
 414:	mov	x25, x30
 418:	b	4fc <inflate_fast+0x4fc>
 41c:	ldr	x25, [sp, #48]
 420:	sub	w7, w7, w30
 424:	add	x19, x21, x7
 428:	add	x19, x25, x19
 42c:	cmp	x30, x19
 430:	b.cs	568 <inflate_fast+0x568>  // b.hs, b.nlast
 434:	add	x7, x30, x7
 438:	add	x7, x7, #0x1
 43c:	cmp	x2, x7
 440:	b.cs	568 <inflate_fast+0x568>  // b.hs, b.nlast
 444:	mov	x16, x30
 448:	b	5ac <inflate_fast+0x5ac>
 44c:	add	x21, x16, #0x1
 450:	ldr	x16, [sp, #32]
 454:	and	x19, x21, #0x1ffffffe0
 458:	sub	w29, w29, w19
 45c:	add	x2, x2, x19
 460:	add	x25, x16, x7
 464:	add	x16, x30, x19
 468:	add	x30, x30, #0x10
 46c:	mov	x7, x19
 470:	ldp	q0, q1, [x25, #-16]
 474:	add	x25, x25, #0x20
 478:	subs	x7, x7, #0x20
 47c:	stp	q0, q1, [x30, #-16]
 480:	add	x30, x30, #0x20
 484:	b.ne	470 <inflate_fast+0x470>  // b.any
 488:	cmp	x21, x19
 48c:	ldr	w21, [sp, #4]
 490:	b.eq	4a4 <inflate_fast+0x4a4>  // b.none
 494:	ldrb	w7, [x2], #1
 498:	subs	w29, w29, #0x1
 49c:	strb	w7, [x16], #1
 4a0:	b.ne	494 <inflate_fast+0x494>  // b.any
 4a4:	sub	x2, x16, w26, uxtw
 4a8:	mov	x30, x16
 4ac:	mov	w16, w21
 4b0:	b	5c8 <inflate_fast+0x5c8>
 4b4:	add	x29, x16, #0x1
 4b8:	ldr	x16, [sp, #32]
 4bc:	add	x19, x16, x7
 4c0:	and	x16, x29, #0x1ffffffe0
 4c4:	add	x25, x30, x16
 4c8:	sub	w21, w21, w16
 4cc:	add	x2, x2, x16
 4d0:	add	x30, x30, #0x10
 4d4:	mov	x7, x16
 4d8:	ldp	q0, q1, [x19, #-16]
 4dc:	add	x19, x19, #0x20
 4e0:	subs	x7, x7, #0x20
 4e4:	stp	q0, q1, [x30, #-16]
 4e8:	add	x30, x30, #0x20
 4ec:	b.ne	4d8 <inflate_fast+0x4d8>  // b.any
 4f0:	cmp	x29, x16
 4f4:	ldr	w29, [sp, #4]
 4f8:	b.eq	50c <inflate_fast+0x50c>  // b.none
 4fc:	ldrb	w16, [x2], #1
 500:	subs	w21, w21, #0x1
 504:	strb	w16, [x25], #1
 508:	b.ne	4fc <inflate_fast+0x4fc>  // b.any
 50c:	subs	w16, w29, w1
 510:	b.ls	558 <inflate_fast+0x558>  // b.plast
 514:	cmp	w20, #0x1f
 518:	b.cc	534 <inflate_fast+0x534>  // b.lo, b.ul, b.last
 51c:	ldr	x2, [sp, #24]
 520:	cmp	x25, x2
 524:	b.cs	640 <inflate_fast+0x640>  // b.hs, b.nlast
 528:	add	x2, x25, x24
 52c:	cmp	x28, x2
 530:	b.cs	640 <inflate_fast+0x640>  // b.hs, b.nlast
 534:	mov	x30, x25
 538:	mov	w2, w1
 53c:	mov	x7, x28
 540:	ldrb	w19, [x7], #1
 544:	subs	w2, w2, #0x1
 548:	strb	w19, [x30], #1
 54c:	b.ne	540 <inflate_fast+0x540>  // b.any
 550:	sub	x2, x30, w26, uxtw
 554:	b	5c8 <inflate_fast+0x5c8>
 558:	mov	x30, x25
 55c:	mov	w16, w29
 560:	mov	x2, x28
 564:	b	5c8 <inflate_fast+0x5c8>
 568:	add	x7, x16, #0x1
 56c:	ldr	x16, [sp, #32]
 570:	and	x19, x7, #0x1ffffffe0
 574:	sub	w29, w29, w19
 578:	add	x2, x2, x19
 57c:	add	x21, x16, x21
 580:	add	x16, x30, x19
 584:	add	x25, x30, #0x10
 588:	mov	x30, x19
 58c:	ldp	q0, q1, [x21, #-16]
 590:	add	x21, x21, #0x20
 594:	subs	x30, x30, #0x20
 598:	stp	q0, q1, [x25, #-16]
 59c:	add	x25, x25, #0x20
 5a0:	b.ne	58c <inflate_fast+0x58c>  // b.any
 5a4:	cmp	x7, x19
 5a8:	b.eq	5bc <inflate_fast+0x5bc>  // b.none
 5ac:	ldrb	w7, [x2], #1
 5b0:	subs	w29, w29, #0x1
 5b4:	strb	w7, [x16], #1
 5b8:	b.ne	5ac <inflate_fast+0x5ac>  // b.any
 5bc:	sub	x2, x16, w26, uxtw
 5c0:	mov	x30, x16
 5c4:	ldr	w16, [sp, #4]
 5c8:	cmp	w16, #0x3
 5cc:	b.cc	60c <inflate_fast+0x60c>  // b.lo, b.ul, b.last
 5d0:	ldrb	w7, [x2]
 5d4:	add	x19, x30, #0x3
 5d8:	sub	w16, w16, #0x3
 5dc:	cmp	w16, #0x2
 5e0:	strb	w7, [x30]
 5e4:	ldrb	w7, [x2, #1]
 5e8:	strb	w7, [x30, #1]
 5ec:	add	x7, x2, #0x3
 5f0:	ldrb	w2, [x2, #2]
 5f4:	strb	w2, [x30, #2]
 5f8:	mov	x2, x7
 5fc:	mov	x30, x19
 600:	b.hi	5d0 <inflate_fast+0x5d0>  // b.pmore
 604:	mov	x30, x19
 608:	mov	x2, x7
 60c:	cbz	w16, 140 <inflate_fast+0x140>
 610:	ldrb	w19, [x2]
 614:	mov	x7, x30
 618:	cmp	w16, #0x1
 61c:	strb	w19, [x7], #1
 620:	b.ne	62c <inflate_fast+0x62c>  // b.any
 624:	mov	x30, x7
 628:	b	140 <inflate_fast+0x140>
 62c:	ldrb	w16, [x2, #1]
 630:	add	x2, x30, #0x2
 634:	strb	w16, [x30, #1]
 638:	mov	x30, x2
 63c:	b	140 <inflate_fast+0x140>
 640:	ldr	x19, [sp, #32]
 644:	add	x30, x25, x27
 648:	add	x2, x25, #0x10
 64c:	mov	x7, x27
 650:	ldp	q0, q1, [x19, #-16]
 654:	add	x19, x19, #0x20
 658:	subs	x7, x7, #0x20
 65c:	stp	q0, q1, [x2, #-16]
 660:	add	x2, x2, #0x20
 664:	b.ne	650 <inflate_fast+0x650>  // b.any
 668:	ldr	w2, [sp, #20]
 66c:	ldr	x7, [sp, #8]
 670:	cmp	x24, x27
 674:	b.ne	540 <inflate_fast+0x540>  // b.any
 678:	b	550 <inflate_fast+0x550>
 67c:	tbnz	w7, #5, 68c <inflate_fast+0x68c>
 680:	adrp	x15, 0 <inflate_fast>
 684:	add	x15, x15, #0x0
 688:	b	698 <inflate_fast+0x698>
 68c:	mov	w14, #0x3f3f                	// #16191
 690:	b	6a0 <inflate_fast+0x6a0>
 694:	mov	x15, x6
 698:	mov	w14, #0x3f51                	// #16209
 69c:	str	x15, [x0, #48]
 6a0:	str	w14, [x8, #8]
 6a4:	lsr	w14, w13, #3
 6a8:	and	w13, w13, #0x7
 6ac:	mov	w15, #0xffffffff            	// #-1
 6b0:	sub	x9, x9, x14
 6b4:	lsl	w14, w15, w13
 6b8:	sub	w12, w12, w30
 6bc:	mvn	w14, w14
 6c0:	str	x9, [x0]
 6c4:	sub	w9, w11, w9
 6c8:	add	w12, w12, #0x101
 6cc:	and	x10, x10, x14
 6d0:	add	w9, w9, #0x5
 6d4:	str	x30, [x0, #24]
 6d8:	str	w12, [x0, #32]
 6dc:	str	w9, [x0, #8]
 6e0:	str	x10, [x8, #80]
 6e4:	str	w13, [x8, #88]
 6e8:	ldp	x20, x19, [sp, #144]
 6ec:	ldp	x22, x21, [sp, #128]
 6f0:	ldp	x24, x23, [sp, #112]
 6f4:	ldp	x26, x25, [sp, #96]
 6f8:	ldp	x28, x27, [sp, #80]
 6fc:	ldp	x29, x30, [sp, #64]
 700:	add	sp, sp, #0xa0
 704:	ret

inflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateResetKeep>:
       0:	cbz	x0, 9c <inflateResetKeep+0x9c>
       4:	ldr	x8, [x0, #64]
       8:	cbz	x8, 9c <inflateResetKeep+0x9c>
       c:	ldr	x8, [x0, #72]
      10:	cbz	x8, 9c <inflateResetKeep+0x9c>
      14:	ldr	x8, [x0, #56]
      18:	cbz	x8, 9c <inflateResetKeep+0x9c>
      1c:	ldr	x9, [x8]
      20:	cmp	x9, x0
      24:	b.ne	9c <inflateResetKeep+0x9c>  // b.any
      28:	ldr	w9, [x8, #8]
      2c:	mov	w10, #0xffffc0cc            	// #-16180
      30:	add	w9, w9, w10
      34:	cmp	w9, #0x1f
      38:	b.hi	9c <inflateResetKeep+0x9c>  // b.pmore
      3c:	str	xzr, [x8, #40]
      40:	str	xzr, [x0, #16]
      44:	stp	xzr, xzr, [x0, #40]
      48:	ldr	w9, [x8, #16]
      4c:	cbz	w9, 58 <inflateResetKeep+0x58>
      50:	and	x9, x9, #0x1
      54:	str	x9, [x0, #96]
      58:	adrp	x9, 0 <inflateResetKeep>
      5c:	ldr	d0, [x9]
      60:	mov	w9, #0x8000                	// #32768
      64:	str	w9, [x8, #28]
      68:	add	x9, x8, #0x558
      6c:	str	x9, [x8, #144]
      70:	stp	x9, x9, [x8, #104]
      74:	adrp	x9, 0 <inflateResetKeep>
      78:	str	d0, [x8, #8]
      7c:	ldr	d0, [x9]
      80:	mov	w0, wzr
      84:	str	wzr, [x8, #20]
      88:	str	xzr, [x8, #48]
      8c:	str	xzr, [x8, #80]
      90:	str	wzr, [x8, #88]
      94:	str	d0, [x8, #7144]
      98:	ret
      9c:	mov	w0, #0xfffffffe            	// #-2
      a0:	ret

00000000000000a4 <inflateReset>:
      a4:	cbz	x0, 148 <inflateReset+0xa4>
      a8:	ldr	x8, [x0, #64]
      ac:	cbz	x8, 148 <inflateReset+0xa4>
      b0:	ldr	x8, [x0, #72]
      b4:	cbz	x8, 148 <inflateReset+0xa4>
      b8:	ldr	x8, [x0, #56]
      bc:	cbz	x8, 148 <inflateReset+0xa4>
      c0:	ldr	x9, [x8]
      c4:	cmp	x9, x0
      c8:	b.ne	148 <inflateReset+0xa4>  // b.any
      cc:	ldr	w9, [x8, #8]
      d0:	mov	w10, #0xffffc0cc            	// #-16180
      d4:	add	w9, w9, w10
      d8:	cmp	w9, #0x1f
      dc:	b.hi	148 <inflateReset+0xa4>  // b.pmore
      e0:	str	xzr, [x8, #64]
      e4:	str	wzr, [x8, #60]
      e8:	str	xzr, [x8, #40]
      ec:	str	xzr, [x0, #16]
      f0:	stp	xzr, xzr, [x0, #40]
      f4:	ldr	w9, [x8, #16]
      f8:	cbz	w9, 104 <inflateReset+0x60>
      fc:	and	x9, x9, #0x1
     100:	str	x9, [x0, #96]
     104:	adrp	x9, 0 <inflateResetKeep>
     108:	ldr	d0, [x9]
     10c:	mov	w9, #0x8000                	// #32768
     110:	str	w9, [x8, #28]
     114:	add	x9, x8, #0x558
     118:	str	x9, [x8, #144]
     11c:	stp	x9, x9, [x8, #104]
     120:	adrp	x9, 0 <inflateResetKeep>
     124:	str	d0, [x8, #8]
     128:	ldr	d0, [x9]
     12c:	mov	w0, wzr
     130:	str	wzr, [x8, #20]
     134:	str	xzr, [x8, #48]
     138:	str	xzr, [x8, #80]
     13c:	str	wzr, [x8, #88]
     140:	str	d0, [x8, #7144]
     144:	ret
     148:	mov	w0, #0xfffffffe            	// #-2
     14c:	ret

0000000000000150 <inflateReset2>:
     150:	stp	x29, x30, [sp, #-48]!
     154:	stp	x22, x21, [sp, #16]
     158:	stp	x20, x19, [sp, #32]
     15c:	mov	x29, sp
     160:	cbz	x0, 2b4 <inflateReset2+0x164>
     164:	ldr	x8, [x0, #64]
     168:	mov	x19, x0
     16c:	cbz	x8, 2b4 <inflateReset2+0x164>
     170:	ldr	x8, [x19, #72]
     174:	cbz	x8, 2b4 <inflateReset2+0x164>
     178:	ldr	x20, [x19, #56]
     17c:	cbz	x20, 2b4 <inflateReset2+0x164>
     180:	ldr	x9, [x20]
     184:	cmp	x9, x19
     188:	b.ne	2b4 <inflateReset2+0x164>  // b.any
     18c:	ldr	w9, [x20, #8]
     190:	mov	w10, #0xffffc0cc            	// #-16180
     194:	add	w9, w9, w10
     198:	cmp	w9, #0x1f
     19c:	b.hi	2b4 <inflateReset2+0x164>  // b.pmore
     1a0:	tbnz	w1, #31, 1bc <inflateReset2+0x6c>
     1a4:	lsr	w9, w1, #4
     1a8:	and	w10, w1, #0xf
     1ac:	cmp	w1, #0x30
     1b0:	add	w22, w9, #0x5
     1b4:	csel	w21, w10, w1, lt  // lt = tstop
     1b8:	b	1c4 <inflateReset2+0x74>
     1bc:	mov	w22, wzr
     1c0:	neg	w21, w1
     1c4:	cbz	w21, 1d4 <inflateReset2+0x84>
     1c8:	and	w9, w21, #0xfffffff8
     1cc:	cmp	w9, #0x8
     1d0:	b.ne	2b4 <inflateReset2+0x164>  // b.any
     1d4:	ldr	x1, [x20, #72]
     1d8:	cbz	x1, 1e8 <inflateReset2+0x98>
     1dc:	ldr	w9, [x20, #56]
     1e0:	cmp	w9, w21
     1e4:	b.ne	1f4 <inflateReset2+0xa4>  // b.any
     1e8:	str	w22, [x20, #16]
     1ec:	str	w21, [x20, #56]
     1f0:	b	210 <inflateReset2+0xc0>
     1f4:	ldr	x0, [x19, #80]
     1f8:	blr	x8
     1fc:	str	xzr, [x20, #72]
     200:	ldr	x8, [x19, #64]
     204:	str	w22, [x20, #16]
     208:	str	w21, [x20, #56]
     20c:	cbz	x8, 2b4 <inflateReset2+0x164>
     210:	ldr	x8, [x19, #72]
     214:	cbz	x8, 2b4 <inflateReset2+0x164>
     218:	ldr	x8, [x19, #56]
     21c:	cbz	x8, 2b4 <inflateReset2+0x164>
     220:	ldr	x9, [x8]
     224:	cmp	x9, x19
     228:	b.ne	2b4 <inflateReset2+0x164>  // b.any
     22c:	ldr	w9, [x8, #8]
     230:	mov	w10, #0xffffc0cc            	// #-16180
     234:	add	w9, w9, w10
     238:	cmp	w9, #0x1f
     23c:	b.hi	2b4 <inflateReset2+0x164>  // b.pmore
     240:	str	xzr, [x8, #64]
     244:	str	wzr, [x8, #60]
     248:	str	xzr, [x8, #40]
     24c:	str	xzr, [x19, #16]
     250:	stp	xzr, xzr, [x19, #40]
     254:	ldr	w9, [x8, #16]
     258:	cbz	w9, 264 <inflateReset2+0x114>
     25c:	and	x9, x9, #0x1
     260:	str	x9, [x19, #96]
     264:	adrp	x9, 0 <inflateResetKeep>
     268:	ldr	d0, [x9]
     26c:	mov	w9, #0x8000                	// #32768
     270:	str	w9, [x8, #28]
     274:	add	x9, x8, #0x558
     278:	str	x9, [x8, #144]
     27c:	stp	x9, x9, [x8, #104]
     280:	adrp	x9, 0 <inflateResetKeep>
     284:	str	d0, [x8, #8]
     288:	ldr	d0, [x9]
     28c:	mov	w0, wzr
     290:	str	wzr, [x8, #20]
     294:	str	xzr, [x8, #48]
     298:	str	xzr, [x8, #80]
     29c:	str	wzr, [x8, #88]
     2a0:	str	d0, [x8, #7144]
     2a4:	ldp	x20, x19, [sp, #32]
     2a8:	ldp	x22, x21, [sp, #16]
     2ac:	ldp	x29, x30, [sp], #48
     2b0:	ret
     2b4:	mov	w0, #0xfffffffe            	// #-2
     2b8:	ldp	x20, x19, [sp, #32]
     2bc:	ldp	x22, x21, [sp, #16]
     2c0:	ldp	x29, x30, [sp], #48
     2c4:	ret

00000000000002c8 <inflateInit2_>:
     2c8:	stp	x29, x30, [sp, #-48]!
     2cc:	stp	x22, x21, [sp, #16]
     2d0:	stp	x20, x19, [sp, #32]
     2d4:	mov	x29, sp
     2d8:	cbz	x2, 368 <inflateInit2_+0xa0>
     2dc:	cmp	w3, #0x70
     2e0:	mov	w21, #0xfffffffa            	// #-6
     2e4:	b.ne	3a4 <inflateInit2_+0xdc>  // b.any
     2e8:	ldrb	w8, [x2]
     2ec:	cmp	w8, #0x31
     2f0:	b.ne	3a4 <inflateInit2_+0xdc>  // b.any
     2f4:	mov	x19, x0
     2f8:	cbz	x0, 370 <inflateInit2_+0xa8>
     2fc:	ldr	x8, [x19, #64]
     300:	mov	w20, w1
     304:	str	xzr, [x19, #48]
     308:	cbz	x8, 378 <inflateInit2_+0xb0>
     30c:	ldr	x9, [x19, #72]
     310:	cbz	x9, 390 <inflateInit2_+0xc8>
     314:	ldr	x0, [x19, #80]
     318:	mov	w1, #0x1                   	// #1
     31c:	mov	w2, #0x1bf8                	// #7160
     320:	blr	x8
     324:	cbz	x0, 3a0 <inflateInit2_+0xd8>
     328:	mov	w8, #0x3f34                	// #16180
     32c:	mov	x22, x0
     330:	str	x0, [x19, #56]
     334:	str	x19, [x0]
     338:	str	xzr, [x0, #72]
     33c:	str	w8, [x0, #8]
     340:	mov	x0, x19
     344:	mov	w1, w20
     348:	bl	150 <inflateReset2>
     34c:	mov	w21, w0
     350:	cbz	w0, 3a4 <inflateInit2_+0xdc>
     354:	ldp	x8, x0, [x19, #72]
     358:	mov	x1, x22
     35c:	blr	x8
     360:	str	xzr, [x19, #56]
     364:	b	3a4 <inflateInit2_+0xdc>
     368:	mov	w21, #0xfffffffa            	// #-6
     36c:	b	3a4 <inflateInit2_+0xdc>
     370:	mov	w21, #0xfffffffe            	// #-2
     374:	b	3a4 <inflateInit2_+0xdc>
     378:	adrp	x8, 0 <zcalloc>
     37c:	add	x8, x8, #0x0
     380:	str	x8, [x19, #64]
     384:	str	xzr, [x19, #80]
     388:	ldr	x9, [x19, #72]
     38c:	cbnz	x9, 314 <inflateInit2_+0x4c>
     390:	adrp	x9, 0 <zcfree>
     394:	add	x9, x9, #0x0
     398:	str	x9, [x19, #72]
     39c:	b	314 <inflateInit2_+0x4c>
     3a0:	mov	w21, #0xfffffffc            	// #-4
     3a4:	mov	w0, w21
     3a8:	ldp	x20, x19, [sp, #32]
     3ac:	ldp	x22, x21, [sp, #16]
     3b0:	ldp	x29, x30, [sp], #48
     3b4:	ret

00000000000003b8 <inflateInit_>:
     3b8:	stp	x29, x30, [sp, #-48]!
     3bc:	str	x21, [sp, #16]
     3c0:	stp	x20, x19, [sp, #32]
     3c4:	mov	x29, sp
     3c8:	cbz	x1, 454 <inflateInit_+0x9c>
     3cc:	cmp	w2, #0x70
     3d0:	mov	w20, #0xfffffffa            	// #-6
     3d4:	b.ne	490 <inflateInit_+0xd8>  // b.any
     3d8:	ldrb	w8, [x1]
     3dc:	cmp	w8, #0x31
     3e0:	b.ne	490 <inflateInit_+0xd8>  // b.any
     3e4:	mov	x19, x0
     3e8:	cbz	x0, 45c <inflateInit_+0xa4>
     3ec:	ldr	x8, [x19, #64]
     3f0:	str	xzr, [x19, #48]
     3f4:	cbz	x8, 464 <inflateInit_+0xac>
     3f8:	ldr	x9, [x19, #72]
     3fc:	cbz	x9, 47c <inflateInit_+0xc4>
     400:	ldr	x0, [x19, #80]
     404:	mov	w1, #0x1                   	// #1
     408:	mov	w2, #0x1bf8                	// #7160
     40c:	blr	x8
     410:	cbz	x0, 48c <inflateInit_+0xd4>
     414:	mov	w8, #0x3f34                	// #16180
     418:	mov	x21, x0
     41c:	str	x0, [x19, #56]
     420:	str	x19, [x0]
     424:	str	xzr, [x0, #72]
     428:	str	w8, [x0, #8]
     42c:	mov	w1, #0xf                   	// #15
     430:	mov	x0, x19
     434:	bl	150 <inflateReset2>
     438:	mov	w20, w0
     43c:	cbz	w0, 490 <inflateInit_+0xd8>
     440:	ldp	x8, x0, [x19, #72]
     444:	mov	x1, x21
     448:	blr	x8
     44c:	str	xzr, [x19, #56]
     450:	b	490 <inflateInit_+0xd8>
     454:	mov	w20, #0xfffffffa            	// #-6
     458:	b	490 <inflateInit_+0xd8>
     45c:	mov	w20, #0xfffffffe            	// #-2
     460:	b	490 <inflateInit_+0xd8>
     464:	adrp	x8, 0 <zcalloc>
     468:	add	x8, x8, #0x0
     46c:	str	x8, [x19, #64]
     470:	str	xzr, [x19, #80]
     474:	ldr	x9, [x19, #72]
     478:	cbnz	x9, 400 <inflateInit_+0x48>
     47c:	adrp	x9, 0 <zcfree>
     480:	add	x9, x9, #0x0
     484:	str	x9, [x19, #72]
     488:	b	400 <inflateInit_+0x48>
     48c:	mov	w20, #0xfffffffc            	// #-4
     490:	mov	w0, w20
     494:	ldp	x20, x19, [sp, #32]
     498:	ldr	x21, [sp, #16]
     49c:	ldp	x29, x30, [sp], #48
     4a0:	ret

00000000000004a4 <inflatePrime>:
     4a4:	cbz	x0, 4fc <inflatePrime+0x58>
     4a8:	ldr	x8, [x0, #64]
     4ac:	cbz	x8, 4fc <inflatePrime+0x58>
     4b0:	ldr	x8, [x0, #72]
     4b4:	cbz	x8, 4fc <inflatePrime+0x58>
     4b8:	ldr	x8, [x0, #56]
     4bc:	cbz	x8, 4fc <inflatePrime+0x58>
     4c0:	ldr	x9, [x8]
     4c4:	cmp	x9, x0
     4c8:	b.ne	4fc <inflatePrime+0x58>  // b.any
     4cc:	ldr	w9, [x8, #8]
     4d0:	mov	w10, #0xffffc0cc            	// #-16180
     4d4:	add	w9, w9, w10
     4d8:	cmp	w9, #0x1f
     4dc:	b.hi	4fc <inflatePrime+0x58>  // b.pmore
     4e0:	tbnz	w1, #31, 504 <inflatePrime+0x60>
     4e4:	cmp	w1, #0x10
     4e8:	b.gt	4fc <inflatePrime+0x58>
     4ec:	ldr	w10, [x8, #88]
     4f0:	add	w9, w10, w1
     4f4:	cmp	w9, #0x20
     4f8:	b.ls	514 <inflatePrime+0x70>  // b.plast
     4fc:	mov	w0, #0xfffffffe            	// #-2
     500:	ret
     504:	mov	w0, wzr
     508:	str	xzr, [x8, #80]
     50c:	str	wzr, [x8, #88]
     510:	ret
     514:	mov	x11, #0xffffffffffffffff    	// #-1
     518:	ldr	x12, [x8, #80]
     51c:	lsl	x11, x11, x1
     520:	bic	w11, w2, w11
     524:	lsl	w10, w11, w10
     528:	mov	w0, wzr
     52c:	add	x10, x12, x10
     530:	str	x10, [x8, #80]
     534:	str	w9, [x8, #88]
     538:	ret

000000000000053c <inflate>:
     53c:	sub	sp, sp, #0xd0
     540:	stp	x29, x30, [sp, #112]
     544:	stp	x28, x27, [sp, #128]
     548:	stp	x26, x25, [sp, #144]
     54c:	stp	x24, x23, [sp, #160]
     550:	stp	x22, x21, [sp, #176]
     554:	stp	x20, x19, [sp, #192]
     558:	add	x29, sp, #0x70
     55c:	cbz	x0, 1de8 <inflate+0x18ac>
     560:	ldr	x8, [x0, #64]
     564:	mov	x19, x0
     568:	cbz	x8, 1de8 <inflate+0x18ac>
     56c:	ldr	x8, [x19, #72]
     570:	cbz	x8, 1de8 <inflate+0x18ac>
     574:	ldr	x27, [x19, #56]
     578:	cbz	x27, 1de8 <inflate+0x18ac>
     57c:	ldr	x8, [x27]
     580:	cmp	x8, x19
     584:	b.ne	1de8 <inflate+0x18ac>  // b.any
     588:	mov	x9, x27
     58c:	ldr	w8, [x9, #8]!
     590:	stur	x9, [x29, #-16]
     594:	mov	w9, #0xffffc0cc            	// #-16180
     598:	add	w9, w8, w9
     59c:	cmp	w9, #0x1f
     5a0:	b.hi	1de8 <inflate+0x18ac>  // b.pmore
     5a4:	mov	w20, w1
     5a8:	ldr	x1, [x19, #24]
     5ac:	cbz	x1, 1de8 <inflate+0x18ac>
     5b0:	ldr	x23, [x19]
     5b4:	cbz	x23, 1de0 <inflate+0x18a4>
     5b8:	mov	w9, #0x3f3f                	// #16191
     5bc:	cmp	w8, w9
     5c0:	b.ne	5d0 <inflate+0x94>  // b.any
     5c4:	ldur	x9, [x29, #-16]
     5c8:	mov	w8, #0x3f40                	// #16192
     5cc:	str	w8, [x9]
     5d0:	add	x10, x27, #0x20
     5d4:	stur	x10, [x29, #-24]
     5d8:	add	x10, x27, #0x558
     5dc:	str	x10, [sp, #40]
     5e0:	add	x10, x27, #0x90
     5e4:	ldr	w3, [x19, #32]
     5e8:	ldr	w9, [x19, #8]
     5ec:	str	x10, [sp, #56]
     5f0:	add	x10, x27, #0x78
     5f4:	ldr	x25, [x27, #80]
     5f8:	ldr	w22, [x27, #88]
     5fc:	str	x10, [sp, #32]
     600:	add	x10, x27, #0x98
     604:	str	x10, [sp, #24]
     608:	add	x10, x27, #0x318
     60c:	str	x10, [sp, #48]
     610:	add	x10, x27, #0x7c
     614:	adrp	x5, 0 <inflateResetKeep>
     618:	mov	w6, wzr
     61c:	str	x10, [sp, #8]
     620:	sub	w10, w20, #0x5
     624:	mov	w0, #0xffffc0cc            	// #-16180
     628:	add	x5, x5, #0x0
     62c:	mov	w28, w9
     630:	mov	w4, w3
     634:	stur	w10, [x29, #-44]
     638:	stur	w9, [x29, #-32]
     63c:	b	68c <inflate+0x150>
     640:	mov	x0, xzr
     644:	mov	x1, xzr
     648:	mov	w2, wzr
     64c:	bl	0 <crc32>
     650:	ldp	x8, x9, [x29, #-24]
     654:	mov	w6, w20
     658:	ldur	w20, [x29, #-28]
     65c:	adrp	x5, 0 <inflateResetKeep>
     660:	str	x0, [x8]
     664:	mov	w8, #0x3f3f                	// #16191
     668:	str	x0, [x19, #96]
     66c:	str	w8, [x9]
     670:	mov	x1, x26
     674:	mov	w3, w24
     678:	mov	w4, w21
     67c:	mov	w0, #0xffffc0cc            	// #-16180
     680:	add	x5, x5, #0x0
     684:	ldur	x8, [x29, #-16]
     688:	ldr	w8, [x8]
     68c:	add	w8, w8, w0
     690:	cmp	w8, #0x1e
     694:	b.hi	1de8 <inflate+0x18ac>  // b.pmore
     698:	adr	x9, 6b4 <inflate+0x178>
     69c:	ldrh	w10, [x5, x8, lsl #1]
     6a0:	add	x9, x9, x10, lsl #2
     6a4:	adrp	x8, 0 <inflateResetKeep>
     6a8:	mov	w26, #0x1                   	// #1
     6ac:	add	x8, x8, #0x0
     6b0:	br	x9
     6b4:	ldr	w8, [x27, #16]
     6b8:	cbz	w8, f54 <inflate+0xa18>
     6bc:	cmp	w22, #0xf
     6c0:	b.hi	6ec <inflate+0x1b0>  // b.pmore
     6c4:	mov	w9, w22
     6c8:	cbz	w28, 1e20 <inflate+0x18e4>
     6cc:	ldrb	w10, [x23], #1
     6d0:	add	x22, x9, #0x8
     6d4:	sub	w28, w28, #0x1
     6d8:	cmp	x9, #0x8
     6dc:	lsl	x10, x10, x9
     6e0:	add	x25, x10, x25
     6e4:	mov	x9, x22
     6e8:	b.cc	6c8 <inflate+0x18c>  // b.lo, b.ul, b.last
     6ec:	tbz	w8, #1, ffc <inflate+0xac0>
     6f0:	mov	w9, #0x8b1f                	// #35615
     6f4:	cmp	x25, x9
     6f8:	b.ne	ffc <inflate+0xac0>  // b.any
     6fc:	ldr	w8, [x27, #56]
     700:	mov	w21, w6
     704:	mov	w24, w3
     708:	stur	w4, [x29, #-28]
     70c:	str	x1, [sp, #16]
     710:	cbnz	w8, 71c <inflate+0x1e0>
     714:	mov	w8, #0xf                   	// #15
     718:	str	w8, [x27, #56]
     71c:	mov	x0, xzr
     720:	mov	x1, xzr
     724:	mov	w2, wzr
     728:	bl	0 <crc32>
     72c:	ldur	x26, [x29, #-24]
     730:	mov	w8, #0x8b1f                	// #35615
     734:	sub	x1, x29, #0x4
     738:	mov	w2, #0x2                   	// #2
     73c:	str	x0, [x26]
     740:	sturh	w8, [x29, #-4]
     744:	bl	0 <crc32>
     748:	ldur	x9, [x29, #-16]
     74c:	ldr	x1, [sp, #16]
     750:	ldur	w4, [x29, #-28]
     754:	mov	w8, #0x3f35                	// #16181
     758:	mov	x25, xzr
     75c:	mov	w22, wzr
     760:	str	x0, [x26]
     764:	str	w8, [x9]
     768:	mov	w3, w24
     76c:	b	1818 <inflate+0x12dc>
     770:	cmp	w22, #0xf
     774:	b.hi	7a0 <inflate+0x264>  // b.pmore
     778:	mov	w8, w22
     77c:	cbz	w28, 1e28 <inflate+0x18ec>
     780:	ldrb	w9, [x23], #1
     784:	add	x22, x8, #0x8
     788:	sub	w28, w28, #0x1
     78c:	cmp	x8, #0x8
     790:	lsl	x9, x9, x8
     794:	add	x25, x9, x25
     798:	mov	x8, x22
     79c:	b.cc	77c <inflate+0x240>  // b.lo, b.ul, b.last
     7a0:	and	w8, w25, #0xff
     7a4:	cmp	w8, #0x8
     7a8:	str	w25, [x27, #24]
     7ac:	b.ne	f5c <inflate+0xa20>  // b.any
     7b0:	tst	w25, #0xe000
     7b4:	b.eq	10c0 <inflate+0xb84>  // b.none
     7b8:	adrp	x8, 0 <inflateResetKeep>
     7bc:	add	x8, x8, #0x0
     7c0:	b	1cf4 <inflate+0x17b8>
     7c4:	cmp	w22, #0x1f
     7c8:	b.ls	1140 <inflate+0xc04>  // b.plast
     7cc:	b	1164 <inflate+0xc28>
     7d0:	cmp	w22, #0xf
     7d4:	b.ls	11e4 <inflate+0xca8>  // b.plast
     7d8:	b	1208 <inflate+0xccc>
     7dc:	cmp	w22, #0x1f
     7e0:	b.hi	808 <inflate+0x2cc>  // b.pmore
     7e4:	mov	w22, w22
     7e8:	cbz	w28, 1e2c <inflate+0x18f0>
     7ec:	ldrb	w8, [x23], #1
     7f0:	sub	w28, w28, #0x1
     7f4:	cmp	x22, #0x18
     7f8:	lsl	x8, x8, x22
     7fc:	add	x22, x22, #0x8
     800:	add	x25, x8, x25
     804:	b.cc	7e8 <inflate+0x2ac>  // b.lo, b.ul, b.last
     808:	lsr	x8, x25, #8
     80c:	lsl	w9, w25, #8
     810:	and	x8, x8, #0xff00
     814:	and	x9, x9, #0xff0000
     818:	bfxil	x8, x25, #24, #8
     81c:	orr	x8, x8, x9
     820:	ldur	x9, [x29, #-24]
     824:	lsl	w10, w25, #24
     828:	orr	x8, x8, x10
     82c:	mov	w22, wzr
     830:	str	x8, [x9]
     834:	str	x8, [x19, #96]
     838:	ldur	x8, [x29, #-16]
     83c:	mov	w11, #0x3f3e                	// #16190
     840:	mov	x25, xzr
     844:	str	w11, [x8]
     848:	ldur	x21, [x29, #-16]
     84c:	ldr	w8, [x27, #20]
     850:	cbz	w8, 20a0 <inflate+0x1b64>
     854:	mov	x0, xzr
     858:	str	x1, [sp, #16]
     85c:	mov	x1, xzr
     860:	mov	w2, wzr
     864:	mov	w24, w6
     868:	mov	w26, w4
     86c:	stur	w3, [x29, #-36]
     870:	bl	0 <adler32>
     874:	ldur	x8, [x29, #-24]
     878:	ldur	w3, [x29, #-36]
     87c:	ldr	x1, [sp, #16]
     880:	adrp	x5, 0 <inflateResetKeep>
     884:	str	x0, [x8]
     888:	str	x0, [x19, #96]
     88c:	mov	w8, #0x3f3f                	// #16191
     890:	mov	w4, w26
     894:	mov	w6, w24
     898:	mov	w0, #0xffffc0cc            	// #-16180
     89c:	add	x5, x5, #0x0
     8a0:	str	w8, [x21]
     8a4:	ldur	w8, [x29, #-44]
     8a8:	cmp	w8, #0x2
     8ac:	b.cc	1e2c <inflate+0x18f0>  // b.lo, b.ul, b.last
     8b0:	ldr	w8, [x27, #12]
     8b4:	cbz	w8, 8cc <inflate+0x390>
     8b8:	and	w8, w22, #0x7
     8bc:	and	w22, w22, #0xfffffff8
     8c0:	mov	w9, #0x3f4e                	// #16206
     8c4:	lsr	x25, x25, x8
     8c8:	b	1cfc <inflate+0x17c0>
     8cc:	cmp	w22, #0x2
     8d0:	b.hi	8f0 <inflate+0x3b4>  // b.pmore
     8d4:	cbz	w28, 1e2c <inflate+0x18f0>
     8d8:	ldrb	w8, [x23], #1
     8dc:	add	w9, w22, #0x8
     8e0:	sub	w28, w28, #0x1
     8e4:	lsl	x8, x8, x22
     8e8:	add	x25, x8, x25
     8ec:	mov	w22, w9
     8f0:	adrp	x10, 0 <inflateResetKeep>
     8f4:	and	w8, w25, #0x1
     8f8:	ubfx	w9, w25, #1, #2
     8fc:	add	x10, x10, #0x0
     900:	str	w8, [x27, #12]
     904:	adr	x11, 918 <inflate+0x3dc>
     908:	ldrh	w8, [x10, x9, lsl #1]
     90c:	add	x11, x11, x8, lsl #2
     910:	mov	w8, #0x3f41                	// #16193
     914:	br	x11
     918:	adrp	x10, 0 <inflateResetKeep>
     91c:	ldr	d0, [x10]
     920:	adrp	x8, 0 <inflateResetKeep>
     924:	adrp	x9, 0 <inflateResetKeep>
     928:	add	x8, x8, #0x0
     92c:	add	x9, x9, #0x0
     930:	mov	w11, #0x3f47                	// #16199
     934:	cmp	w20, #0x6
     938:	stp	x8, x9, [x27, #104]
     93c:	str	d0, [x27, #120]
     940:	str	w11, [x27, #8]
     944:	b.ne	fe4 <inflate+0xaa8>  // b.any
     948:	b	20ec <inflate+0x1bb0>
     94c:	and	w8, w22, #0x7
     950:	and	w22, w22, #0xfffffff8
     954:	cmp	w22, #0x1f
     958:	lsr	x25, x25, x8
     95c:	b.hi	988 <inflate+0x44c>  // b.pmore
     960:	mov	w8, w22
     964:	cbz	w28, 1e28 <inflate+0x18ec>
     968:	ldrb	w9, [x23], #1
     96c:	add	x22, x8, #0x8
     970:	sub	w28, w28, #0x1
     974:	cmp	x8, #0x18
     978:	lsl	x9, x9, x8
     97c:	add	x25, x9, x25
     980:	mov	x8, x22
     984:	b.cc	964 <inflate+0x428>  // b.lo, b.ul, b.last
     988:	lsr	x8, x25, #16
     98c:	eor	x8, x8, #0xffff
     990:	cmp	x8, w25, uxth
     994:	b.ne	f68 <inflate+0xa2c>  // b.any
     998:	mov	w22, wzr
     99c:	and	w8, w25, #0xffff
     9a0:	mov	w9, #0x3f42                	// #16194
     9a4:	cmp	w20, #0x6
     9a8:	mov	x25, xzr
     9ac:	str	w8, [x27, #92]
     9b0:	str	w9, [x27, #8]
     9b4:	b.eq	1e2c <inflate+0x18f0>  // b.none
     9b8:	ldur	x9, [x29, #-16]
     9bc:	mov	w8, #0x3f43                	// #16195
     9c0:	str	w8, [x9]
     9c4:	ldr	w8, [x27, #92]
     9c8:	cbz	w8, c90 <inflate+0x754>
     9cc:	cmp	w8, w28
     9d0:	csel	w8, w28, w8, hi  // hi = pmore
     9d4:	cmp	w8, w3
     9d8:	mov	w24, w3
     9dc:	csel	w21, w3, w8, hi  // hi = pmore
     9e0:	stur	w6, [x29, #-40]
     9e4:	stur	w4, [x29, #-28]
     9e8:	cbz	w21, 20c0 <inflate+0x1b84>
     9ec:	mov	w26, w21
     9f0:	mov	x0, x1
     9f4:	str	x1, [sp, #16]
     9f8:	mov	x1, x23
     9fc:	mov	x2, x26
     a00:	bl	0 <memcpy>
     a04:	ldr	w8, [x27, #92]
     a08:	ldr	x1, [sp, #16]
     a0c:	ldur	w4, [x29, #-28]
     a10:	ldur	w6, [x29, #-40]
     a14:	sub	w8, w8, w21
     a18:	sub	w28, w28, w21
     a1c:	add	x23, x23, x26
     a20:	sub	w3, w24, w21
     a24:	add	x1, x1, x26
     a28:	str	w8, [x27, #92]
     a2c:	b	10b0 <inflate+0xb74>
     a30:	cmp	w22, #0xd
     a34:	b.hi	a60 <inflate+0x524>  // b.pmore
     a38:	mov	w9, w22
     a3c:	cbz	w28, 1e20 <inflate+0x18e4>
     a40:	ldrb	w10, [x23], #1
     a44:	add	x22, x9, #0x8
     a48:	sub	w28, w28, #0x1
     a4c:	cmp	x9, #0x6
     a50:	lsl	x10, x10, x9
     a54:	add	x25, x10, x25
     a58:	mov	x9, x22
     a5c:	b.cc	a3c <inflate+0x500>  // b.lo, b.ul, b.last
     a60:	and	w11, w25, #0x1f
     a64:	ubfx	w10, w25, #5, #5
     a68:	ubfx	w9, w25, #10, #4
     a6c:	lsr	x25, x25, #14
     a70:	add	w12, w11, #0x101
     a74:	add	w13, w10, #0x1
     a78:	add	w9, w9, #0x4
     a7c:	cmp	w11, #0x1d
     a80:	sub	w22, w22, #0xe
     a84:	stp	w12, w13, [x27, #132]
     a88:	str	w9, [x27, #128]
     a8c:	b.hi	f74 <inflate+0xa38>  // b.pmore
     a90:	cmp	w10, #0x1e
     a94:	b.cs	f74 <inflate+0xa38>  // b.hs, b.nlast
     a98:	mov	w11, #0x3f45                	// #16197
     a9c:	mov	w10, wzr
     aa0:	str	wzr, [x27, #140]
     aa4:	str	w11, [x27, #8]
     aa8:	b	abc <inflate+0x580>
     aac:	ldr	w10, [x27, #140]
     ab0:	ldr	w9, [x27, #128]
     ab4:	cmp	w10, w9
     ab8:	b.cs	b14 <inflate+0x5d8>  // b.hs, b.nlast
     abc:	mov	w10, w10
     ac0:	b	b04 <inflate+0x5c8>
     ac4:	ldrb	w11, [x23], #1
     ac8:	add	w12, w22, #0x8
     acc:	sub	w28, w28, #0x1
     ad0:	lsl	x11, x11, x22
     ad4:	add	x25, x11, x25
     ad8:	mov	w22, w12
     adc:	ldrh	w12, [x8, x10, lsl #1]
     ae0:	add	x10, x10, #0x1
     ae4:	and	w11, w25, #0x7
     ae8:	lsr	x25, x25, #3
     aec:	cmp	w10, w9
     af0:	add	x12, x27, x12, lsl #1
     af4:	sub	w22, w22, #0x3
     af8:	str	w10, [x27, #140]
     afc:	strh	w11, [x12, #152]
     b00:	b.cs	b14 <inflate+0x5d8>  // b.hs, b.nlast
     b04:	cmp	w22, #0x2
     b08:	b.hi	adc <inflate+0x5a0>  // b.pmore
     b0c:	cbnz	w28, ac4 <inflate+0x588>
     b10:	b	1e2c <inflate+0x18f0>
     b14:	mov	w24, w3
     b18:	mov	x26, x1
     b1c:	cmp	w10, #0x12
     b20:	stur	w4, [x29, #-28]
     b24:	b.hi	b48 <inflate+0x60c>  // b.pmore
     b28:	mov	w9, w10
     b2c:	ldrh	w10, [x8, x9, lsl #1]
     b30:	cmp	x9, #0x12
     b34:	add	x9, x9, #0x1
     b38:	add	x10, x27, x10, lsl #1
     b3c:	strh	wzr, [x10, #152]
     b40:	b.cc	b2c <inflate+0x5f0>  // b.lo, b.ul, b.last
     b44:	str	w9, [x27, #140]
     b48:	ldp	x4, x8, [sp, #32]
     b4c:	ldr	x1, [sp, #24]
     b50:	mov	w2, #0x13                  	// #19
     b54:	mov	w0, wzr
     b58:	str	x8, [x27, #144]
     b5c:	str	x8, [x27, #104]
     b60:	mov	w8, #0x7                   	// #7
     b64:	str	w8, [x27, #120]
     b68:	ldp	x5, x3, [sp, #48]
     b6c:	bl	0 <inflate_table>
     b70:	mov	w6, w0
     b74:	cbz	w0, c98 <inflate+0x75c>
     b78:	adrp	x8, 0 <inflateResetKeep>
     b7c:	add	x8, x8, #0x0
     b80:	str	x8, [x19, #48]
     b84:	ldur	x8, [x29, #-16]
     b88:	ldur	w4, [x29, #-28]
     b8c:	mov	w9, #0x3f51                	// #16209
     b90:	mov	x1, x26
     b94:	str	w9, [x8]
     b98:	mov	w3, w24
     b9c:	b	10b0 <inflate+0xb74>
     ba0:	ldr	w10, [x27, #140]
     ba4:	b	cc0 <inflate+0x784>
     ba8:	ldr	w8, [x27, #100]
     bac:	cbz	w8, 1998 <inflate+0x145c>
     bb0:	cmp	w22, w8
     bb4:	b.cs	f80 <inflate+0xa44>  // b.hs, b.nlast
     bb8:	mov	w11, w22
     bbc:	mov	w9, w28
     bc0:	mov	x10, x23
     bc4:	cbz	w9, 1e0c <inflate+0x18d0>
     bc8:	ldrb	w12, [x10], #1
     bcc:	sub	w9, w9, #0x1
     bd0:	lsl	x12, x12, x11
     bd4:	add	w11, w11, #0x8
     bd8:	cmp	w11, w8
     bdc:	add	x25, x12, x25
     be0:	b.cc	bc4 <inflate+0x688>  // b.lo, b.ul, b.last
     be4:	b	f8c <inflate+0xa50>
     be8:	ldr	w8, [x27, #100]
     bec:	b	1b00 <inflate+0x15c4>
     bf0:	cbz	w3, 1e2c <inflate+0x18f0>
     bf4:	ldr	w8, [x27, #92]
     bf8:	mov	w9, #0x3f48                	// #16200
     bfc:	sub	w3, w3, #0x1
     c00:	strb	w8, [x1], #1
     c04:	str	w9, [x27, #8]
     c08:	b	684 <inflate+0x148>
     c0c:	ldr	w8, [x27, #16]
     c10:	cbz	w8, 16f0 <inflate+0x11b4>
     c14:	cmp	w22, #0x1f
     c18:	b.hi	c44 <inflate+0x708>  // b.pmore
     c1c:	mov	w9, w22
     c20:	cbz	w28, 1e20 <inflate+0x18e4>
     c24:	ldrb	w10, [x23], #1
     c28:	add	x22, x9, #0x8
     c2c:	sub	w28, w28, #0x1
     c30:	cmp	x9, #0x18
     c34:	lsl	x10, x10, x9
     c38:	add	x25, x10, x25
     c3c:	mov	x9, x22
     c40:	b.cc	c20 <inflate+0x6e4>  // b.lo, b.ul, b.last
     c44:	ldr	x9, [x19, #40]
     c48:	subs	w2, w4, w3
     c4c:	and	w8, w8, #0x4
     c50:	add	x9, x9, x2
     c54:	str	x9, [x19, #40]
     c58:	ldr	x9, [x27, #40]
     c5c:	add	x9, x9, x2
     c60:	str	x9, [x27, #40]
     c64:	b.eq	16a4 <inflate+0x1168>  // b.none
     c68:	cbz	w8, 16a4 <inflate+0x1168>
     c6c:	ldr	w8, [x27, #24]
     c70:	ldr	x0, [x27, #32]
     c74:	mov	w21, w6
     c78:	mov	w24, w3
     c7c:	mov	x26, x1
     c80:	sub	x1, x1, x2
     c84:	cbz	w8, 1678 <inflate+0x113c>
     c88:	bl	0 <crc32>
     c8c:	b	167c <inflate+0x1140>
     c90:	mov	w8, #0x3f3f                	// #16191
     c94:	b	1ccc <inflate+0x1790>
     c98:	ldur	w4, [x29, #-28]
     c9c:	adrp	x5, 0 <inflateResetKeep>
     ca0:	mov	w10, wzr
     ca4:	mov	w8, #0x3f46                	// #16198
     ca8:	mov	x1, x26
     cac:	mov	w3, w24
     cb0:	mov	w0, #0xffffc0cc            	// #-16180
     cb4:	add	x5, x5, #0x0
     cb8:	str	wzr, [x27, #140]
     cbc:	str	w8, [x27, #8]
     cc0:	ldp	w2, w8, [x27, #132]
     cc4:	add	w8, w8, w2
     cc8:	cmp	w10, w8
     ccc:	b.cs	f08 <inflate+0x9cc>  // b.hs, b.nlast
     cd0:	ldr	w11, [x27, #120]
     cd4:	ldr	x9, [x27, #104]
     cd8:	mov	w12, #0xffffffff            	// #-1
     cdc:	lsl	w11, w12, w11
     ce0:	mvn	w11, w11
     ce4:	and	w16, w11, w25
     ce8:	add	x12, x9, w16, uxtw #2
     cec:	ldrb	w12, [x12, #1]
     cf0:	cmp	w22, w12
     cf4:	b.cs	d40 <inflate+0x804>  // b.hs, b.nlast
     cf8:	mov	w13, w22
     cfc:	mov	w14, w28
     d00:	mov	x15, x23
     d04:	cbz	w14, 1e0c <inflate+0x18d0>
     d08:	ldrb	w12, [x15], #1
     d0c:	sub	w14, w14, #0x1
     d10:	lsl	x12, x12, x13
     d14:	add	x25, x12, x25
     d18:	and	w16, w11, w25
     d1c:	add	x12, x9, w16, uxtw #2
     d20:	ldrb	w12, [x12, #1]
     d24:	add	x13, x13, #0x8
     d28:	cmp	x13, x12
     d2c:	b.cc	d04 <inflate+0x7c8>  // b.lo, b.ul, b.last
     d30:	mov	w16, w16
     d34:	mov	x23, x15
     d38:	mov	w28, w14
     d3c:	mov	w22, w13
     d40:	add	x13, x9, x16, lsl #2
     d44:	ldrh	w13, [x13, #2]
     d48:	cmp	w13, #0xf
     d4c:	b.hi	d6c <inflate+0x830>  // b.pmore
     d50:	lsr	x25, x25, x12
     d54:	sub	w22, w22, w12
     d58:	add	x12, x27, w10, uxtw #1
     d5c:	add	w10, w10, #0x1
     d60:	str	w10, [x27, #140]
     d64:	strh	w13, [x12, #152]
     d68:	b	ec4 <inflate+0x988>
     d6c:	cmp	w13, #0x10
     d70:	b.eq	dcc <inflate+0x890>  // b.none
     d74:	cmp	w13, #0x11
     d78:	b.ne	e28 <inflate+0x8ec>  // b.any
     d7c:	add	w13, w12, #0x3
     d80:	cmp	w22, w13
     d84:	b.cs	dac <inflate+0x870>  // b.hs, b.nlast
     d88:	mov	w22, w22
     d8c:	cbz	w28, 1e2c <inflate+0x18f0>
     d90:	ldrb	w14, [x23], #1
     d94:	sub	w28, w28, #0x1
     d98:	lsl	x14, x14, x22
     d9c:	add	x22, x22, #0x8
     da0:	cmp	x22, x13
     da4:	add	x25, x14, x25
     da8:	b.cc	d8c <inflate+0x850>  // b.lo, b.ul, b.last
     dac:	lsr	x14, x25, x12
     db0:	sub	w15, w22, w12
     db4:	and	w12, w14, #0x7
     db8:	mov	w13, wzr
     dbc:	lsr	x25, x14, #3
     dc0:	add	w12, w12, #0x3
     dc4:	sub	w22, w15, #0x3
     dc8:	b	e74 <inflate+0x938>
     dcc:	add	w13, w12, #0x2
     dd0:	cmp	w22, w13
     dd4:	b.cs	dfc <inflate+0x8c0>  // b.hs, b.nlast
     dd8:	mov	w22, w22
     ddc:	cbz	w28, 1e2c <inflate+0x18f0>
     de0:	ldrb	w14, [x23], #1
     de4:	sub	w28, w28, #0x1
     de8:	lsl	x14, x14, x22
     dec:	add	x22, x22, #0x8
     df0:	cmp	x22, x13
     df4:	add	x25, x14, x25
     df8:	b.cc	ddc <inflate+0x8a0>  // b.lo, b.ul, b.last
     dfc:	lsr	x25, x25, x12
     e00:	sub	w22, w22, w12
     e04:	cbz	w10, 1da0 <inflate+0x1864>
     e08:	sub	w12, w10, #0x1
     e0c:	add	x12, x27, w12, uxtw #1
     e10:	ldrh	w13, [x12, #152]
     e14:	and	w12, w25, #0x3
     e18:	add	w12, w12, #0x3
     e1c:	lsr	x25, x25, #2
     e20:	sub	w22, w22, #0x2
     e24:	b	e74 <inflate+0x938>
     e28:	add	w13, w12, #0x7
     e2c:	cmp	w22, w13
     e30:	b.cs	e58 <inflate+0x91c>  // b.hs, b.nlast
     e34:	mov	w22, w22
     e38:	cbz	w28, 1e2c <inflate+0x18f0>
     e3c:	ldrb	w14, [x23], #1
     e40:	sub	w28, w28, #0x1
     e44:	lsl	x14, x14, x22
     e48:	add	x22, x22, #0x8
     e4c:	cmp	x22, x13
     e50:	add	x25, x14, x25
     e54:	b.cc	e38 <inflate+0x8fc>  // b.lo, b.ul, b.last
     e58:	lsr	x14, x25, x12
     e5c:	sub	w15, w22, w12
     e60:	and	w12, w14, #0x7f
     e64:	mov	w13, wzr
     e68:	lsr	x25, x14, #7
     e6c:	add	w12, w12, #0xb
     e70:	sub	w22, w15, #0x7
     e74:	add	w14, w12, w10
     e78:	cmp	w14, w8
     e7c:	b.hi	1da0 <inflate+0x1864>  // b.pmore
     e80:	cmp	w12, #0xf
     e84:	b.ls	e98 <inflate+0x95c>  // b.plast
     e88:	sub	w14, w12, #0x1
     e8c:	mvn	w15, w10
     e90:	cmp	w14, w15
     e94:	b.ls	ed0 <inflate+0x994>  // b.plast
     e98:	mov	w15, w10
     e9c:	mov	w14, w12
     ea0:	mov	w10, w15
     ea4:	add	w15, w10, #0x1
     ea8:	add	x10, x27, w10, uxtw #1
     eac:	subs	w14, w14, #0x1
     eb0:	strh	w13, [x10, #152]
     eb4:	mov	w10, w15
     eb8:	b.ne	ea4 <inflate+0x968>  // b.any
     ebc:	mov	w10, w15
     ec0:	str	w15, [x27, #140]
     ec4:	cmp	w10, w8
     ec8:	b.cc	ce4 <inflate+0x7a8>  // b.lo, b.ul, b.last
     ecc:	b	f08 <inflate+0x9cc>
     ed0:	and	w16, w12, #0xf0
     ed4:	and	w14, w12, #0xf
     ed8:	add	w15, w10, w16
     edc:	dup	v0.8h, w13
     ee0:	mov	w17, w16
     ee4:	add	x18, x27, w10, uxtw #1
     ee8:	subs	w17, w17, #0x10
     eec:	add	w10, w10, #0x10
     ef0:	stur	q0, [x18, #152]
     ef4:	stur	q0, [x18, #168]
     ef8:	b.ne	ee4 <inflate+0x9a8>  // b.any
     efc:	cmp	w12, w16
     f00:	b.ne	ea0 <inflate+0x964>  // b.any
     f04:	b	ebc <inflate+0x980>
     f08:	ldrh	w8, [x27, #664]
     f0c:	cbz	w8, ff0 <inflate+0xab4>
     f10:	mov	w24, w4
     f14:	ldp	x4, x8, [sp, #32]
     f18:	stur	w3, [x29, #-36]
     f1c:	mov	x26, x1
     f20:	ldr	x1, [sp, #24]
     f24:	str	x8, [x27, #144]
     f28:	str	x8, [x27, #104]
     f2c:	mov	w8, #0x9                   	// #9
     f30:	str	w8, [x27, #120]
     f34:	ldp	x5, x3, [sp, #48]
     f38:	mov	w0, #0x1                   	// #1
     f3c:	bl	0 <inflate_table>
     f40:	cbz	w0, 1058 <inflate+0xb1c>
     f44:	adrp	x8, 0 <inflateResetKeep>
     f48:	mov	w6, w0
     f4c:	add	x8, x8, #0x0
     f50:	b	1094 <inflate+0xb58>
     f54:	mov	w8, #0x3f40                	// #16192
     f58:	b	1ccc <inflate+0x1790>
     f5c:	adrp	x8, 0 <inflateResetKeep>
     f60:	add	x8, x8, #0x0
     f64:	b	1cf4 <inflate+0x17b8>
     f68:	adrp	x8, 0 <inflateResetKeep>
     f6c:	add	x8, x8, #0x0
     f70:	b	1cf4 <inflate+0x17b8>
     f74:	adrp	x8, 0 <inflateResetKeep>
     f78:	add	x8, x8, #0x0
     f7c:	b	1cf4 <inflate+0x17b8>
     f80:	mov	x10, x23
     f84:	mov	w9, w28
     f88:	mov	w11, w22
     f8c:	ldr	w13, [x27, #92]
     f90:	ldr	w14, [x27, #7148]
     f94:	mov	w12, #0xffffffff            	// #-1
     f98:	sub	w22, w11, w8
     f9c:	lsl	w11, w12, w8
     fa0:	bic	w11, w25, w11
     fa4:	lsr	x25, x25, x8
     fa8:	add	w11, w13, w11
     fac:	add	w8, w14, w8
     fb0:	mov	x23, x10
     fb4:	mov	w28, w9
     fb8:	str	w11, [x27, #92]
     fbc:	str	w8, [x27, #7148]
     fc0:	b	199c <inflate+0x1460>
     fc4:	mov	w8, #0x3f44                	// #16196
     fc8:	b	fdc <inflate+0xaa0>
     fcc:	adrp	x8, 0 <inflateResetKeep>
     fd0:	add	x8, x8, #0x0
     fd4:	str	x8, [x19, #48]
     fd8:	mov	w8, #0x3f51                	// #16209
     fdc:	ldur	x9, [x29, #-16]
     fe0:	str	w8, [x9]
     fe4:	lsr	x25, x25, #3
     fe8:	sub	w22, w22, #0x3
     fec:	b	684 <inflate+0x148>
     ff0:	adrp	x8, 0 <inflateResetKeep>
     ff4:	add	x8, x8, #0x0
     ff8:	b	1cf4 <inflate+0x17b8>
     ffc:	ldr	x9, [x27, #48]
    1000:	str	wzr, [x27, #24]
    1004:	cbz	x9, 1010 <inflate+0xad4>
    1008:	mov	w10, #0xffffffff            	// #-1
    100c:	str	w10, [x9, #72]
    1010:	tbz	w8, #0, 104c <inflate+0xb10>
    1014:	mov	x9, #0x7bdf                	// #31711
    1018:	lsl	w8, w25, #8
    101c:	movk	x9, #0xbdef, lsl #16
    1020:	movk	x9, #0xdef7, lsl #32
    1024:	and	x8, x8, #0xff00
    1028:	movk	x9, #0xef7b, lsl #48
    102c:	add	x8, x8, x25, lsr #8
    1030:	mul	x8, x8, x9
    1034:	mov	x9, #0x4211                	// #16913
    1038:	movk	x9, #0x2108, lsl #16
    103c:	movk	x9, #0x1084, lsl #32
    1040:	movk	x9, #0x842, lsl #48
    1044:	cmp	x8, x9
    1048:	b.cc	1d08 <inflate+0x17cc>  // b.lo, b.ul, b.last
    104c:	adrp	x8, 0 <inflateResetKeep>
    1050:	add	x8, x8, #0x0
    1054:	b	1cf4 <inflate+0x17b8>
    1058:	ldr	x8, [x27, #144]
    105c:	mov	w9, #0x6                   	// #6
    1060:	ldp	w10, w2, [x27, #132]
    1064:	str	w9, [x27, #124]
    1068:	str	x8, [x27, #112]
    106c:	ldp	x5, x3, [sp, #48]
    1070:	ldr	x4, [sp, #8]
    1074:	add	x8, x27, x10, lsl #1
    1078:	add	x1, x8, #0x98
    107c:	mov	w0, #0x2                   	// #2
    1080:	bl	0 <inflate_table>
    1084:	mov	w6, w0
    1088:	cbz	w0, 1770 <inflate+0x1234>
    108c:	adrp	x8, 0 <inflateResetKeep>
    1090:	add	x8, x8, #0x0
    1094:	str	x8, [x19, #48]
    1098:	ldur	x8, [x29, #-16]
    109c:	ldur	w3, [x29, #-36]
    10a0:	mov	w9, #0x3f51                	// #16209
    10a4:	mov	x1, x26
    10a8:	str	w9, [x8]
    10ac:	mov	w4, w24
    10b0:	adrp	x5, 0 <inflateResetKeep>
    10b4:	mov	w0, #0xffffc0cc            	// #-16180
    10b8:	add	x5, x5, #0x0
    10bc:	b	684 <inflate+0x148>
    10c0:	ldr	x8, [x27, #48]
    10c4:	cbz	x8, 10d0 <inflate+0xb94>
    10c8:	ubfx	w9, w25, #8, #1
    10cc:	str	w9, [x8]
    10d0:	tbz	w25, #9, 112c <inflate+0xbf0>
    10d4:	ldrb	w8, [x27, #16]
    10d8:	tbz	w8, #2, 112c <inflate+0xbf0>
    10dc:	sturh	w25, [x29, #-4]
    10e0:	ldur	x25, [x29, #-24]
    10e4:	mov	x22, x1
    10e8:	sub	x1, x29, #0x4
    10ec:	mov	w2, #0x2                   	// #2
    10f0:	ldr	x0, [x25]
    10f4:	mov	w24, w20
    10f8:	mov	w20, w3
    10fc:	mov	w21, w4
    1100:	mov	w26, w6
    1104:	bl	0 <crc32>
    1108:	adrp	x5, 0 <inflateResetKeep>
    110c:	mov	w6, w26
    1110:	add	x5, x5, #0x0
    1114:	mov	w4, w21
    1118:	mov	w3, w20
    111c:	mov	w20, w24
    1120:	mov	x1, x22
    1124:	str	x0, [x25]
    1128:	mov	w0, #0xffffc0cc            	// #-16180
    112c:	ldur	x9, [x29, #-16]
    1130:	mov	w8, #0x3f36                	// #16182
    1134:	mov	w22, wzr
    1138:	mov	x25, xzr
    113c:	str	w8, [x9]
    1140:	mov	w22, w22
    1144:	cbz	w28, 1e2c <inflate+0x18f0>
    1148:	ldrb	w8, [x23], #1
    114c:	sub	w28, w28, #0x1
    1150:	cmp	x22, #0x18
    1154:	lsl	x8, x8, x22
    1158:	add	x22, x22, #0x8
    115c:	add	x25, x8, x25
    1160:	b.cc	1144 <inflate+0xc08>  // b.lo, b.ul, b.last
    1164:	ldr	x8, [x27, #48]
    1168:	cbz	x8, 1170 <inflate+0xc34>
    116c:	str	x25, [x8, #8]
    1170:	ldrb	w8, [x27, #25]
    1174:	tbz	w8, #1, 11d0 <inflate+0xc94>
    1178:	ldrb	w8, [x27, #16]
    117c:	tbz	w8, #2, 11d0 <inflate+0xc94>
    1180:	stur	w25, [x29, #-4]
    1184:	ldur	x25, [x29, #-24]
    1188:	mov	x22, x1
    118c:	sub	x1, x29, #0x4
    1190:	mov	w2, #0x4                   	// #4
    1194:	ldr	x0, [x25]
    1198:	mov	w24, w20
    119c:	mov	w20, w3
    11a0:	mov	w21, w4
    11a4:	mov	w26, w6
    11a8:	bl	0 <crc32>
    11ac:	adrp	x5, 0 <inflateResetKeep>
    11b0:	mov	w6, w26
    11b4:	add	x5, x5, #0x0
    11b8:	mov	w4, w21
    11bc:	mov	w3, w20
    11c0:	mov	w20, w24
    11c4:	mov	x1, x22
    11c8:	str	x0, [x25]
    11cc:	mov	w0, #0xffffc0cc            	// #-16180
    11d0:	ldur	x9, [x29, #-16]
    11d4:	mov	w8, #0x3f37                	// #16183
    11d8:	mov	w22, wzr
    11dc:	mov	x25, xzr
    11e0:	str	w8, [x9]
    11e4:	mov	w22, w22
    11e8:	cbz	w28, 1e2c <inflate+0x18f0>
    11ec:	ldrb	w8, [x23], #1
    11f0:	sub	w28, w28, #0x1
    11f4:	cmp	x22, #0x8
    11f8:	lsl	x8, x8, x22
    11fc:	add	x22, x22, #0x8
    1200:	add	x25, x8, x25
    1204:	b.cc	11e8 <inflate+0xcac>  // b.lo, b.ul, b.last
    1208:	ldr	x8, [x27, #48]
    120c:	cbz	x8, 121c <inflate+0xce0>
    1210:	and	w9, w25, #0xff
    1214:	lsr	x10, x25, #8
    1218:	stp	w9, w10, [x8, #16]
    121c:	ldrb	w8, [x27, #25]
    1220:	tbz	w8, #1, 127c <inflate+0xd40>
    1224:	ldrb	w8, [x27, #16]
    1228:	tbz	w8, #2, 127c <inflate+0xd40>
    122c:	sturh	w25, [x29, #-4]
    1230:	ldur	x25, [x29, #-24]
    1234:	mov	x22, x1
    1238:	sub	x1, x29, #0x4
    123c:	mov	w2, #0x2                   	// #2
    1240:	ldr	x0, [x25]
    1244:	mov	w24, w20
    1248:	mov	w20, w3
    124c:	mov	w21, w4
    1250:	mov	w26, w6
    1254:	bl	0 <crc32>
    1258:	adrp	x5, 0 <inflateResetKeep>
    125c:	mov	w6, w26
    1260:	add	x5, x5, #0x0
    1264:	mov	w4, w21
    1268:	mov	w3, w20
    126c:	mov	w20, w24
    1270:	mov	x1, x22
    1274:	str	x0, [x25]
    1278:	mov	w0, #0xffffc0cc            	// #-16180
    127c:	ldur	x9, [x29, #-16]
    1280:	mov	x25, xzr
    1284:	mov	w22, wzr
    1288:	mov	w8, #0x3f38                	// #16184
    128c:	str	w8, [x9]
    1290:	ldr	w8, [x27, #24]
    1294:	tbnz	w8, #10, 12a8 <inflate+0xd6c>
    1298:	ldr	x8, [x27, #48]
    129c:	cbz	x8, 1354 <inflate+0xe18>
    12a0:	str	xzr, [x8, #24]
    12a4:	b	1354 <inflate+0xe18>
    12a8:	cmp	w22, #0xf
    12ac:	b.hi	12d4 <inflate+0xd98>  // b.pmore
    12b0:	mov	w22, w22
    12b4:	cbz	w28, 1e2c <inflate+0x18f0>
    12b8:	ldrb	w9, [x23], #1
    12bc:	sub	w28, w28, #0x1
    12c0:	cmp	x22, #0x8
    12c4:	lsl	x9, x9, x22
    12c8:	add	x22, x22, #0x8
    12cc:	add	x25, x9, x25
    12d0:	b.cc	12b4 <inflate+0xd78>  // b.lo, b.ul, b.last
    12d4:	ldr	x9, [x27, #48]
    12d8:	str	w25, [x27, #92]
    12dc:	cbz	x9, 12e4 <inflate+0xda8>
    12e0:	str	w25, [x9, #32]
    12e4:	tbz	w8, #9, 12f0 <inflate+0xdb4>
    12e8:	ldrb	w8, [x27, #16]
    12ec:	tbnz	w8, #2, 12fc <inflate+0xdc0>
    12f0:	mov	x25, xzr
    12f4:	mov	w22, wzr
    12f8:	b	1354 <inflate+0xe18>
    12fc:	ldur	x26, [x29, #-24]
    1300:	sturh	w25, [x29, #-4]
    1304:	mov	x22, x1
    1308:	sub	x1, x29, #0x4
    130c:	ldr	x0, [x26]
    1310:	mov	w2, #0x2                   	// #2
    1314:	mov	w24, w20
    1318:	mov	w20, w3
    131c:	mov	w21, w4
    1320:	mov	w25, w6
    1324:	bl	0 <crc32>
    1328:	adrp	x5, 0 <inflateResetKeep>
    132c:	mov	w6, w25
    1330:	add	x5, x5, #0x0
    1334:	mov	w4, w21
    1338:	mov	w3, w20
    133c:	mov	w20, w24
    1340:	mov	x1, x22
    1344:	mov	x25, xzr
    1348:	mov	w22, wzr
    134c:	str	x0, [x26]
    1350:	mov	w0, #0xffffc0cc            	// #-16180
    1354:	ldur	x9, [x29, #-16]
    1358:	mov	w8, #0x3f39                	// #16185
    135c:	str	w8, [x9]
    1360:	ldr	w9, [x27, #24]
    1364:	tbz	w9, #10, 1444 <inflate+0xf08>
    1368:	ldr	w8, [x27, #92]
    136c:	cmp	w8, w28
    1370:	csel	w26, w28, w8, hi  // hi = pmore
    1374:	cbz	w26, 1440 <inflate+0xf04>
    1378:	ldr	x10, [x27, #48]
    137c:	cbz	x10, 13dc <inflate+0xea0>
    1380:	ldr	x11, [x10, #24]
    1384:	cbz	x11, 13dc <inflate+0xea0>
    1388:	ldp	w9, w10, [x10, #32]
    138c:	mov	x24, x1
    1390:	mov	x1, x23
    1394:	stur	w4, [x29, #-28]
    1398:	sub	w8, w9, w8
    139c:	add	w9, w8, w26
    13a0:	add	x0, x11, x8
    13a4:	sub	w8, w10, w8
    13a8:	cmp	w9, w10
    13ac:	csel	w2, w8, w26, hi  // hi = pmore
    13b0:	stur	w6, [x29, #-40]
    13b4:	mov	w21, w3
    13b8:	bl	0 <memcpy>
    13bc:	ldur	w6, [x29, #-40]
    13c0:	ldur	w4, [x29, #-28]
    13c4:	ldr	w9, [x27, #24]
    13c8:	adrp	x5, 0 <inflateResetKeep>
    13cc:	add	x5, x5, #0x0
    13d0:	mov	w0, #0xffffc0cc            	// #-16180
    13d4:	mov	w3, w21
    13d8:	mov	x1, x24
    13dc:	tbz	w9, #9, 142c <inflate+0xef0>
    13e0:	ldrb	w8, [x27, #16]
    13e4:	tbz	w8, #2, 142c <inflate+0xef0>
    13e8:	ldur	x24, [x29, #-24]
    13ec:	str	x1, [sp, #16]
    13f0:	mov	x1, x23
    13f4:	mov	w2, w26
    13f8:	ldr	x0, [x24]
    13fc:	stur	w6, [x29, #-40]
    1400:	stur	w4, [x29, #-28]
    1404:	mov	w21, w3
    1408:	bl	0 <crc32>
    140c:	ldr	x1, [sp, #16]
    1410:	ldur	w4, [x29, #-28]
    1414:	ldur	w6, [x29, #-40]
    1418:	adrp	x5, 0 <inflateResetKeep>
    141c:	add	x5, x5, #0x0
    1420:	mov	w3, w21
    1424:	str	x0, [x24]
    1428:	mov	w0, #0xffffc0cc            	// #-16180
    142c:	ldr	w8, [x27, #92]
    1430:	sub	w28, w28, w26
    1434:	add	x23, x23, w26, uxtw
    1438:	sub	w8, w8, w26
    143c:	str	w8, [x27, #92]
    1440:	cbnz	w8, 1e2c <inflate+0x18f0>
    1444:	mov	w8, #0x3f3a                	// #16186
    1448:	str	wzr, [x27, #92]
    144c:	str	w8, [x27, #8]
    1450:	ldrb	w8, [x27, #25]
    1454:	tbnz	w8, #3, 1468 <inflate+0xf2c>
    1458:	ldr	x8, [x27, #48]
    145c:	cbz	x8, 1510 <inflate+0xfd4>
    1460:	str	xzr, [x8, #40]
    1464:	b	1510 <inflate+0xfd4>
    1468:	cbz	w28, 1e2c <inflate+0x18f0>
    146c:	mov	x26, xzr
    1470:	mov	w21, w28
    1474:	stp	w6, w3, [x29, #-40]
    1478:	stur	w4, [x29, #-28]
    147c:	ldr	x9, [x27, #48]
    1480:	ldrb	w24, [x23, x26]
    1484:	add	x26, x26, #0x1
    1488:	cbz	x9, 14b0 <inflate+0xf74>
    148c:	ldr	x8, [x9, #40]
    1490:	cbz	x8, 14b0 <inflate+0xf74>
    1494:	ldr	w10, [x27, #92]
    1498:	ldr	w9, [x9, #48]
    149c:	cmp	w10, w9
    14a0:	b.cs	14b0 <inflate+0xf74>  // b.hs, b.nlast
    14a4:	add	w9, w10, #0x1
    14a8:	str	w9, [x27, #92]
    14ac:	strb	w24, [x8, x10]
    14b0:	cbz	w24, 14bc <inflate+0xf80>
    14b4:	cmp	x26, x21
    14b8:	b.cc	147c <inflate+0xf40>  // b.lo, b.ul, b.last
    14bc:	ldrb	w8, [x27, #25]
    14c0:	tbz	w8, #1, 14fc <inflate+0xfc0>
    14c4:	ldrb	w8, [x27, #16]
    14c8:	tbz	w8, #2, 14fc <inflate+0xfc0>
    14cc:	ldur	x8, [x29, #-24]
    14d0:	str	x1, [sp, #16]
    14d4:	mov	x1, x23
    14d8:	mov	w2, w26
    14dc:	ldr	x0, [x8]
    14e0:	bl	0 <crc32>
    14e4:	ldur	x8, [x29, #-24]
    14e8:	ldr	x1, [sp, #16]
    14ec:	adrp	x5, 0 <inflateResetKeep>
    14f0:	add	x5, x5, #0x0
    14f4:	str	x0, [x8]
    14f8:	mov	w0, #0xffffc0cc            	// #-16180
    14fc:	add	x23, x23, x26
    1500:	cbnz	w24, 2090 <inflate+0x1b54>
    1504:	ldp	w6, w3, [x29, #-40]
    1508:	ldur	w4, [x29, #-28]
    150c:	sub	x28, x21, x26
    1510:	mov	w8, #0x3f3b                	// #16187
    1514:	str	wzr, [x27, #92]
    1518:	str	w8, [x27, #8]
    151c:	ldrb	w8, [x27, #25]
    1520:	tbnz	w8, #4, 1534 <inflate+0xff8>
    1524:	ldr	x8, [x27, #48]
    1528:	cbz	x8, 15dc <inflate+0x10a0>
    152c:	str	xzr, [x8, #56]
    1530:	b	15dc <inflate+0x10a0>
    1534:	cbz	w28, 1e2c <inflate+0x18f0>
    1538:	mov	x26, xzr
    153c:	mov	w21, w28
    1540:	stp	w6, w3, [x29, #-40]
    1544:	stur	w4, [x29, #-28]
    1548:	ldr	x9, [x27, #48]
    154c:	ldrb	w24, [x23, x26]
    1550:	add	x26, x26, #0x1
    1554:	cbz	x9, 157c <inflate+0x1040>
    1558:	ldr	x8, [x9, #56]
    155c:	cbz	x8, 157c <inflate+0x1040>
    1560:	ldr	w10, [x27, #92]
    1564:	ldr	w9, [x9, #64]
    1568:	cmp	w10, w9
    156c:	b.cs	157c <inflate+0x1040>  // b.hs, b.nlast
    1570:	add	w9, w10, #0x1
    1574:	str	w9, [x27, #92]
    1578:	strb	w24, [x8, x10]
    157c:	cbz	w24, 1588 <inflate+0x104c>
    1580:	cmp	x26, x21
    1584:	b.cc	1548 <inflate+0x100c>  // b.lo, b.ul, b.last
    1588:	ldrb	w8, [x27, #25]
    158c:	tbz	w8, #1, 15c8 <inflate+0x108c>
    1590:	ldrb	w8, [x27, #16]
    1594:	tbz	w8, #2, 15c8 <inflate+0x108c>
    1598:	ldur	x8, [x29, #-24]
    159c:	str	x1, [sp, #16]
    15a0:	mov	x1, x23
    15a4:	mov	w2, w26
    15a8:	ldr	x0, [x8]
    15ac:	bl	0 <crc32>
    15b0:	ldur	x8, [x29, #-24]
    15b4:	ldr	x1, [sp, #16]
    15b8:	adrp	x5, 0 <inflateResetKeep>
    15bc:	add	x5, x5, #0x0
    15c0:	str	x0, [x8]
    15c4:	mov	w0, #0xffffc0cc            	// #-16180
    15c8:	add	x23, x23, x26
    15cc:	cbnz	w24, 2090 <inflate+0x1b54>
    15d0:	ldp	w6, w3, [x29, #-40]
    15d4:	ldur	w4, [x29, #-28]
    15d8:	sub	x28, x21, x26
    15dc:	ldur	x9, [x29, #-16]
    15e0:	mov	w8, #0x3f3c                	// #16188
    15e4:	str	w8, [x9]
    15e8:	ldr	w8, [x27, #24]
    15ec:	tbz	w8, #9, 1640 <inflate+0x1104>
    15f0:	cmp	w22, #0xf
    15f4:	b.hi	1620 <inflate+0x10e4>  // b.pmore
    15f8:	mov	w9, w22
    15fc:	cbz	w28, 1e20 <inflate+0x18e4>
    1600:	ldrb	w10, [x23], #1
    1604:	add	x22, x9, #0x8
    1608:	sub	w28, w28, #0x1
    160c:	cmp	x9, #0x8
    1610:	lsl	x10, x10, x9
    1614:	add	x25, x10, x25
    1618:	mov	x9, x22
    161c:	b.cc	15fc <inflate+0x10c0>  // b.lo, b.ul, b.last
    1620:	ldrb	w9, [x27, #16]
    1624:	tbz	w9, #2, 1638 <inflate+0x10fc>
    1628:	ldur	x9, [x29, #-24]
    162c:	ldrh	w9, [x9]
    1630:	cmp	x25, x9
    1634:	b.ne	166c <inflate+0x1130>  // b.any
    1638:	mov	x25, xzr
    163c:	mov	w22, wzr
    1640:	stur	w20, [x29, #-28]
    1644:	ldr	x9, [x27, #48]
    1648:	mov	w20, w6
    164c:	mov	w21, w4
    1650:	mov	w24, w3
    1654:	mov	x26, x1
    1658:	cbz	x9, 640 <inflate+0x104>
    165c:	ubfx	w8, w8, #9, #1
    1660:	mov	w10, #0x1                   	// #1
    1664:	stp	w8, w10, [x9, #68]
    1668:	b	640 <inflate+0x104>
    166c:	adrp	x8, 0 <inflateResetKeep>
    1670:	add	x8, x8, #0x0
    1674:	b	1cf4 <inflate+0x17b8>
    1678:	bl	0 <adler32>
    167c:	str	x0, [x27, #32]
    1680:	str	x0, [x19, #96]
    1684:	ldr	w8, [x27, #16]
    1688:	adrp	x5, 0 <inflateResetKeep>
    168c:	mov	x1, x26
    1690:	mov	w3, w24
    1694:	and	w8, w8, #0x4
    1698:	mov	w0, #0xffffc0cc            	// #-16180
    169c:	add	x5, x5, #0x0
    16a0:	mov	w6, w21
    16a4:	cbz	w8, 16e4 <inflate+0x11a8>
    16a8:	ldr	w9, [x27, #24]
    16ac:	mov	x8, x25
    16b0:	cbnz	w9, 16d4 <inflate+0x1198>
    16b4:	lsr	x8, x25, #8
    16b8:	lsl	w9, w25, #8
    16bc:	and	x8, x8, #0xff00
    16c0:	and	x9, x9, #0xff0000
    16c4:	bfxil	x8, x25, #24, #8
    16c8:	orr	x8, x8, x9
    16cc:	lsl	w9, w25, #24
    16d0:	orr	x8, x8, x9
    16d4:	ldur	x9, [x29, #-24]
    16d8:	ldr	x9, [x9]
    16dc:	cmp	x8, x9
    16e0:	b.ne	1754 <inflate+0x1218>  // b.any
    16e4:	mov	x25, xzr
    16e8:	mov	w22, wzr
    16ec:	mov	w4, w3
    16f0:	ldur	x9, [x29, #-16]
    16f4:	mov	w8, #0x3f4f                	// #16207
    16f8:	str	w8, [x9]
    16fc:	ldr	w8, [x27, #16]
    1700:	cbz	w8, 20d8 <inflate+0x1b9c>
    1704:	ldr	w8, [x27, #24]
    1708:	cbz	w8, 20d8 <inflate+0x1b9c>
    170c:	cmp	w22, #0x1f
    1710:	b.hi	173c <inflate+0x1200>  // b.pmore
    1714:	mov	w8, w22
    1718:	cbz	w28, 1e28 <inflate+0x18ec>
    171c:	ldrb	w9, [x23], #1
    1720:	add	x22, x8, #0x8
    1724:	sub	w28, w28, #0x1
    1728:	cmp	x8, #0x18
    172c:	lsl	x9, x9, x8
    1730:	add	x25, x9, x25
    1734:	mov	x8, x22
    1738:	b.cc	1718 <inflate+0x11dc>  // b.lo, b.ul, b.last
    173c:	ldr	w8, [x27, #40]
    1740:	cmp	x25, x8
    1744:	b.eq	20d0 <inflate+0x1b94>  // b.none
    1748:	adrp	x8, 0 <inflateResetKeep>
    174c:	add	x8, x8, #0x0
    1750:	b	1cf4 <inflate+0x17b8>
    1754:	adrp	x8, 0 <inflateResetKeep>
    1758:	add	x8, x8, #0x0
    175c:	str	x8, [x19, #48]
    1760:	ldur	x8, [x29, #-16]
    1764:	mov	w9, #0x3f51                	// #16209
    1768:	mov	w4, w3
    176c:	b	1d00 <inflate+0x17c4>
    1770:	ldur	x9, [x29, #-16]
    1774:	ldur	w3, [x29, #-36]
    1778:	adrp	x5, 0 <inflateResetKeep>
    177c:	mov	w8, #0x3f47                	// #16199
    1780:	cmp	w20, #0x6
    1784:	mov	x1, x26
    1788:	mov	w4, w24
    178c:	mov	w0, #0xffffc0cc            	// #-16180
    1790:	add	x5, x5, #0x0
    1794:	str	w8, [x9]
    1798:	b.eq	1e2c <inflate+0x18f0>  // b.none
    179c:	ldur	x9, [x29, #-16]
    17a0:	mov	w8, #0x3f48                	// #16200
    17a4:	str	w8, [x9]
    17a8:	cmp	w3, #0x102
    17ac:	b.cc	182c <inflate+0x12f0>  // b.lo, b.ul, b.last
    17b0:	cmp	w28, #0x6
    17b4:	b.cc	182c <inflate+0x12f0>  // b.lo, b.ul, b.last
    17b8:	str	x1, [x19, #24]
    17bc:	mov	x0, x19
    17c0:	mov	w1, w4
    17c4:	mov	w21, w6
    17c8:	str	w3, [x19, #32]
    17cc:	str	x23, [x19]
    17d0:	str	w28, [x19, #8]
    17d4:	str	x25, [x27, #80]
    17d8:	str	w22, [x27, #88]
    17dc:	mov	w24, w4
    17e0:	bl	0 <inflate_fast>
    17e4:	ldr	w8, [x27, #8]
    17e8:	ldr	x1, [x19, #24]
    17ec:	ldr	w3, [x19, #32]
    17f0:	ldr	x23, [x19]
    17f4:	ldr	w28, [x19, #8]
    17f8:	ldr	x25, [x27, #80]
    17fc:	ldr	w22, [x27, #88]
    1800:	mov	w9, #0x3f3f                	// #16191
    1804:	cmp	w8, w9
    1808:	b.ne	1814 <inflate+0x12d8>  // b.any
    180c:	mov	w8, #0xffffffff            	// #-1
    1810:	str	w8, [x27, #7148]
    1814:	mov	w4, w24
    1818:	adrp	x5, 0 <inflateResetKeep>
    181c:	mov	w0, #0xffffc0cc            	// #-16180
    1820:	add	x5, x5, #0x0
    1824:	mov	w6, w21
    1828:	b	684 <inflate+0x148>
    182c:	ldr	w8, [x27, #120]
    1830:	ldr	x9, [x27, #104]
    1834:	mov	w10, #0xffffffff            	// #-1
    1838:	str	wzr, [x27, #7148]
    183c:	lsl	w10, w10, w8
    1840:	bic	w13, w25, w10
    1844:	add	x8, x9, w13, uxtw #2
    1848:	ldrb	w8, [x8, #1]
    184c:	cmp	w22, w8
    1850:	b.cs	18a0 <inflate+0x1364>  // b.hs, b.nlast
    1854:	mvn	w13, w10
    1858:	mov	w10, w22
    185c:	mov	w11, w28
    1860:	mov	x12, x23
    1864:	cbz	w11, 1e0c <inflate+0x18d0>
    1868:	ldrb	w8, [x12], #1
    186c:	sub	w11, w11, #0x1
    1870:	lsl	x8, x8, x10
    1874:	add	x25, x8, x25
    1878:	and	w14, w13, w25
    187c:	add	x8, x9, w14, uxtw #2
    1880:	ldrb	w8, [x8, #1]
    1884:	add	x10, x10, #0x8
    1888:	cmp	x10, x8
    188c:	b.cc	1864 <inflate+0x1328>  // b.lo, b.ul, b.last
    1890:	mov	w13, w14
    1894:	mov	x23, x12
    1898:	mov	w28, w11
    189c:	mov	w22, w10
    18a0:	add	x11, x9, x13, lsl #2
    18a4:	ldrb	w12, [x11]
    18a8:	ldrh	w11, [x11, #2]
    18ac:	mov	w10, w8
    18b0:	cbz	w12, 1960 <inflate+0x1424>
    18b4:	and	w13, w12, #0xf0
    18b8:	cbnz	w13, 1960 <inflate+0x1424>
    18bc:	add	w12, w10, w12
    18c0:	mov	w13, #0xffffffff            	// #-1
    18c4:	lsl	w12, w13, w12
    18c8:	bic	w13, w25, w12
    18cc:	lsr	w13, w13, w10
    18d0:	add	w15, w13, w11
    18d4:	add	x13, x9, w15, uxtw #2
    18d8:	ldrb	w13, [x13, #1]
    18dc:	add	w14, w10, w13
    18e0:	cmp	w14, w22
    18e4:	b.ls	1940 <inflate+0x1404>  // b.plast
    18e8:	mvn	w15, w12
    18ec:	mov	w12, w22
    18f0:	mov	w14, w28
    18f4:	mov	x16, x23
    18f8:	cbz	w14, 1e0c <inflate+0x18d0>
    18fc:	ldrb	w13, [x16], #1
    1900:	sub	w14, w14, #0x1
    1904:	lsl	x13, x13, x12
    1908:	add	x25, x13, x25
    190c:	and	w13, w25, w15
    1910:	lsr	w13, w13, w10
    1914:	add	w17, w13, w11
    1918:	add	x13, x9, w17, uxtw #2
    191c:	ldrb	w13, [x13, #1]
    1920:	add	x12, x12, #0x8
    1924:	add	x18, x10, x13
    1928:	cmp	x12, x18
    192c:	b.cc	18f8 <inflate+0x13bc>  // b.lo, b.ul, b.last
    1930:	mov	w15, w17
    1934:	mov	x23, x16
    1938:	mov	w28, w14
    193c:	mov	w22, w12
    1940:	add	x9, x9, x15, lsl #2
    1944:	ldrh	w11, [x9, #2]
    1948:	ldrb	w12, [x9]
    194c:	lsr	x25, x25, x8
    1950:	sub	w22, w22, w10
    1954:	mov	w8, w13
    1958:	str	w10, [x27, #7148]
    195c:	b	1964 <inflate+0x1428>
    1960:	mov	w10, wzr
    1964:	lsr	x25, x25, x8
    1968:	sub	w22, w22, w8
    196c:	add	w8, w10, w8
    1970:	str	w8, [x27, #7148]
    1974:	str	w11, [x27, #92]
    1978:	cbz	w12, 1cc8 <inflate+0x178c>
    197c:	tbnz	w12, #5, 1cd8 <inflate+0x179c>
    1980:	tbnz	w12, #6, 1cec <inflate+0x17b0>
    1984:	and	w8, w12, #0xf
    1988:	mov	w9, #0x3f49                	// #16201
    198c:	str	w8, [x27, #100]
    1990:	str	w9, [x27, #8]
    1994:	cbnz	w8, bb0 <inflate+0x674>
    1998:	ldr	w11, [x27, #92]
    199c:	mov	w8, #0x3f4a                	// #16202
    19a0:	str	w11, [x27, #7152]
    19a4:	str	w8, [x27, #8]
    19a8:	ldr	w8, [x27, #124]
    19ac:	ldr	x9, [x27, #112]
    19b0:	mov	w10, #0xffffffff            	// #-1
    19b4:	lsl	w10, w10, w8
    19b8:	bic	w13, w25, w10
    19bc:	add	x8, x9, w13, uxtw #2
    19c0:	ldrb	w8, [x8, #1]
    19c4:	cmp	w22, w8
    19c8:	b.cs	1a18 <inflate+0x14dc>  // b.hs, b.nlast
    19cc:	mvn	w13, w10
    19d0:	mov	w10, w22
    19d4:	mov	w11, w28
    19d8:	mov	x12, x23
    19dc:	cbz	w11, 1e0c <inflate+0x18d0>
    19e0:	ldrb	w8, [x12], #1
    19e4:	sub	w11, w11, #0x1
    19e8:	lsl	x8, x8, x10
    19ec:	add	x25, x8, x25
    19f0:	and	w14, w13, w25
    19f4:	add	x8, x9, w14, uxtw #2
    19f8:	ldrb	w8, [x8, #1]
    19fc:	add	x10, x10, #0x8
    1a00:	cmp	x10, x8
    1a04:	b.cc	19dc <inflate+0x14a0>  // b.lo, b.ul, b.last
    1a08:	mov	w13, w14
    1a0c:	mov	x23, x12
    1a10:	mov	w28, w11
    1a14:	mov	w22, w10
    1a18:	add	x10, x9, x13, lsl #2
    1a1c:	ldrb	w12, [x10]
    1a20:	ldrh	w10, [x10, #2]
    1a24:	tst	w12, #0xf0
    1a28:	b.eq	1a34 <inflate+0x14f8>  // b.none
    1a2c:	ldr	w9, [x27, #7148]
    1a30:	b	1adc <inflate+0x15a0>
    1a34:	add	w11, w8, w12
    1a38:	mov	w12, #0xffffffff            	// #-1
    1a3c:	lsl	w12, w12, w11
    1a40:	bic	w11, w25, w12
    1a44:	lsr	w11, w11, w8
    1a48:	add	w14, w11, w10
    1a4c:	add	x11, x9, w14, uxtw #2
    1a50:	ldrb	w11, [x11, #1]
    1a54:	add	w13, w8, w11
    1a58:	cmp	w13, w22
    1a5c:	b.ls	1ab8 <inflate+0x157c>  // b.plast
    1a60:	mvn	w14, w12
    1a64:	mov	w12, w22
    1a68:	mov	w13, w28
    1a6c:	mov	x15, x23
    1a70:	cbz	w13, 1e0c <inflate+0x18d0>
    1a74:	ldrb	w11, [x15], #1
    1a78:	sub	w13, w13, #0x1
    1a7c:	lsl	x11, x11, x12
    1a80:	add	x25, x11, x25
    1a84:	and	w11, w25, w14
    1a88:	lsr	w11, w11, w8
    1a8c:	add	w16, w11, w10
    1a90:	add	x11, x9, w16, uxtw #2
    1a94:	ldrb	w11, [x11, #1]
    1a98:	add	x12, x12, #0x8
    1a9c:	add	x17, x8, x11
    1aa0:	cmp	x12, x17
    1aa4:	b.cc	1a70 <inflate+0x1534>  // b.lo, b.ul, b.last
    1aa8:	mov	w14, w16
    1aac:	mov	x23, x15
    1ab0:	mov	w28, w13
    1ab4:	mov	w22, w12
    1ab8:	add	x9, x9, x14, lsl #2
    1abc:	ldr	w13, [x27, #7148]
    1ac0:	ldrh	w10, [x9, #2]
    1ac4:	ldrb	w12, [x9]
    1ac8:	lsr	x25, x25, x8
    1acc:	sub	w22, w22, w8
    1ad0:	add	w9, w13, w8
    1ad4:	mov	w8, w11
    1ad8:	str	w9, [x27, #7148]
    1adc:	lsr	x25, x25, x8
    1ae0:	sub	w22, w22, w8
    1ae4:	add	w8, w9, w8
    1ae8:	str	w8, [x27, #7148]
    1aec:	tbnz	w12, #6, 1b3c <inflate+0x1600>
    1af0:	and	w8, w12, #0xf
    1af4:	mov	w9, #0x3f4b                	// #16203
    1af8:	stp	w10, w8, [x27, #96]
    1afc:	str	w9, [x27, #8]
    1b00:	cbz	w8, 1b88 <inflate+0x164c>
    1b04:	cmp	w22, w8
    1b08:	b.cs	1b48 <inflate+0x160c>  // b.hs, b.nlast
    1b0c:	mov	w11, w22
    1b10:	mov	w9, w28
    1b14:	mov	x10, x23
    1b18:	cbz	w9, 1e0c <inflate+0x18d0>
    1b1c:	ldrb	w12, [x10], #1
    1b20:	sub	w9, w9, #0x1
    1b24:	lsl	x12, x12, x11
    1b28:	add	w11, w11, #0x8
    1b2c:	cmp	w11, w8
    1b30:	add	x25, x12, x25
    1b34:	b.cc	1b18 <inflate+0x15dc>  // b.lo, b.ul, b.last
    1b38:	b	1b54 <inflate+0x1618>
    1b3c:	adrp	x8, 0 <inflateResetKeep>
    1b40:	add	x8, x8, #0x0
    1b44:	b	1cf4 <inflate+0x17b8>
    1b48:	mov	x10, x23
    1b4c:	mov	w9, w28
    1b50:	mov	w11, w22
    1b54:	ldr	w13, [x27, #96]
    1b58:	sub	w22, w11, w8
    1b5c:	ldr	w11, [x27, #7148]
    1b60:	mov	w12, #0xffffffff            	// #-1
    1b64:	lsl	w12, w12, w8
    1b68:	bic	w12, w25, w12
    1b6c:	lsr	x25, x25, x8
    1b70:	add	w12, w13, w12
    1b74:	add	w8, w11, w8
    1b78:	mov	x23, x10
    1b7c:	mov	w28, w9
    1b80:	str	w12, [x27, #96]
    1b84:	str	w8, [x27, #7148]
    1b88:	ldur	x9, [x29, #-16]
    1b8c:	mov	w8, #0x3f4c                	// #16204
    1b90:	str	w8, [x9]
    1b94:	cbz	w3, 1e2c <inflate+0x18f0>
    1b98:	ldr	w8, [x27, #96]
    1b9c:	sub	w9, w4, w3
    1ba0:	cmp	w8, w9
    1ba4:	b.ls	1bcc <inflate+0x1690>  // b.plast
    1ba8:	ldr	w10, [x27, #64]
    1bac:	sub	w9, w8, w9
    1bb0:	cmp	w9, w10
    1bb4:	b.ls	1bdc <inflate+0x16a0>  // b.plast
    1bb8:	ldr	w8, [x27, #7144]
    1bbc:	cbz	w8, 1bdc <inflate+0x16a0>
    1bc0:	adrp	x8, 0 <inflateResetKeep>
    1bc4:	add	x8, x8, #0x0
    1bc8:	b	1cf4 <inflate+0x17b8>
    1bcc:	ldr	w9, [x27, #92]
    1bd0:	sub	x11, x1, x8
    1bd4:	mov	w8, w9
    1bd8:	b	1c10 <inflate+0x16d4>
    1bdc:	ldr	w10, [x27, #68]
    1be0:	subs	w8, w9, w10
    1be4:	b.ls	1bf4 <inflate+0x16b8>  // b.plast
    1be8:	ldr	w9, [x27, #60]
    1bec:	sub	w10, w9, w8
    1bf0:	b	1bfc <inflate+0x16c0>
    1bf4:	sub	w10, w10, w9
    1bf8:	mov	w8, w9
    1bfc:	ldr	w9, [x27, #92]
    1c00:	ldr	x11, [x27, #72]
    1c04:	cmp	w8, w9
    1c08:	add	x11, x11, w10, uxtw
    1c0c:	csel	w8, w9, w8, hi  // hi = pmore
    1c10:	cmp	w8, w3
    1c14:	csel	w8, w3, w8, hi  // hi = pmore
    1c18:	sub	w10, w9, w8
    1c1c:	sub	w9, w8, #0x1
    1c20:	cmp	w9, #0x1f
    1c24:	str	w10, [x27, #92]
    1c28:	b.cc	1c4c <inflate+0x1710>  // b.lo, b.ul, b.last
    1c2c:	add	x10, x11, x9
    1c30:	add	x10, x10, #0x1
    1c34:	cmp	x1, x10
    1c38:	b.cs	1c84 <inflate+0x1748>  // b.hs, b.nlast
    1c3c:	add	x10, x1, x9
    1c40:	add	x10, x10, #0x1
    1c44:	cmp	x11, x10
    1c48:	b.cs	1c84 <inflate+0x1748>  // b.hs, b.nlast
    1c4c:	mov	x9, x1
    1c50:	mov	w10, w8
    1c54:	ldrb	w12, [x11], #1
    1c58:	subs	w10, w10, #0x1
    1c5c:	strb	w12, [x9], #1
    1c60:	b.ne	1c54 <inflate+0x1718>  // b.any
    1c64:	ldr	w10, [x27, #92]
    1c68:	sub	w3, w3, w8
    1c6c:	cbnz	w10, 1c7c <inflate+0x1740>
    1c70:	ldur	x10, [x29, #-16]
    1c74:	mov	w8, #0x3f48                	// #16200
    1c78:	str	w8, [x10]
    1c7c:	mov	x1, x9
    1c80:	b	684 <inflate+0x148>
    1c84:	add	x12, x9, #0x1
    1c88:	and	x13, x12, #0x1ffffffe0
    1c8c:	add	x14, x11, #0x10
    1c90:	add	x9, x1, x13
    1c94:	sub	w10, w8, w13
    1c98:	add	x11, x11, x13
    1c9c:	add	x15, x1, #0x10
    1ca0:	mov	x16, x13
    1ca4:	ldp	q0, q1, [x14, #-16]
    1ca8:	add	x14, x14, #0x20
    1cac:	subs	x16, x16, #0x20
    1cb0:	stp	q0, q1, [x15, #-16]
    1cb4:	add	x15, x15, #0x20
    1cb8:	b.ne	1ca4 <inflate+0x1768>  // b.any
    1cbc:	cmp	x12, x13
    1cc0:	b.ne	1c54 <inflate+0x1718>  // b.any
    1cc4:	b	1c64 <inflate+0x1728>
    1cc8:	mov	w8, #0x3f4d                	// #16205
    1ccc:	ldur	x9, [x29, #-16]
    1cd0:	str	w8, [x9]
    1cd4:	b	684 <inflate+0x148>
    1cd8:	mov	w8, #0xffffffff            	// #-1
    1cdc:	mov	w9, #0x3f3f                	// #16191
    1ce0:	str	w8, [x27, #7148]
    1ce4:	str	w9, [x27, #8]
    1ce8:	b	684 <inflate+0x148>
    1cec:	adrp	x8, 0 <inflateResetKeep>
    1cf0:	add	x8, x8, #0x0
    1cf4:	mov	w9, #0x3f51                	// #16209
    1cf8:	str	x8, [x19, #48]
    1cfc:	ldur	x8, [x29, #-16]
    1d00:	str	w9, [x8]
    1d04:	b	684 <inflate+0x148>
    1d08:	ldur	x11, [x29, #-16]
    1d0c:	and	x8, x25, #0xf
    1d10:	mov	w24, w6
    1d14:	mov	w26, w3
    1d18:	cmp	x8, #0x8
    1d1c:	stur	w4, [x29, #-28]
    1d20:	str	x1, [sp, #16]
    1d24:	b.ne	1d94 <inflate+0x1858>  // b.any
    1d28:	ldr	w10, [x27, #56]
    1d2c:	ubfx	x8, x25, #4, #4
    1d30:	add	w9, w8, #0x8
    1d34:	cbnz	w10, 1d40 <inflate+0x1804>
    1d38:	mov	w10, w9
    1d3c:	str	w9, [x27, #56]
    1d40:	cmp	w8, #0x7
    1d44:	b.hi	1dac <inflate+0x1870>  // b.pmore
    1d48:	cmp	w9, w10
    1d4c:	b.hi	1dac <inflate+0x1870>  // b.pmore
    1d50:	mov	w9, #0x100                 	// #256
    1d54:	lsl	w8, w9, w8
    1d58:	mov	x0, xzr
    1d5c:	mov	x1, xzr
    1d60:	mov	w2, wzr
    1d64:	str	w8, [x27, #28]
    1d68:	bl	0 <adler32>
    1d6c:	tst	x25, #0x2000
    1d70:	mov	w8, #0x3f3d                	// #16189
    1d74:	mov	w9, #0x3f3f                	// #16191
    1d78:	csel	w8, w9, w8, eq  // eq = none
    1d7c:	mov	w22, wzr
    1d80:	str	x0, [x27, #32]
    1d84:	str	x0, [x19, #96]
    1d88:	str	w8, [x27, #8]
    1d8c:	mov	x25, xzr
    1d90:	b	1dcc <inflate+0x1890>
    1d94:	adrp	x8, 0 <inflateResetKeep>
    1d98:	add	x8, x8, #0x0
    1d9c:	b	1dbc <inflate+0x1880>
    1da0:	adrp	x8, 0 <inflateResetKeep>
    1da4:	add	x8, x8, #0x0
    1da8:	b	1cf4 <inflate+0x17b8>
    1dac:	adrp	x8, 0 <inflateResetKeep>
    1db0:	lsr	x25, x25, #4
    1db4:	sub	w22, w22, #0x4
    1db8:	add	x8, x8, #0x0
    1dbc:	mov	w9, #0x3f51                	// #16209
    1dc0:	str	x8, [x19, #48]
    1dc4:	mov	x21, x11
    1dc8:	str	w9, [x11]
    1dcc:	ldr	x1, [sp, #16]
    1dd0:	ldur	w4, [x29, #-28]
    1dd4:	mov	w3, w26
    1dd8:	mov	w6, w24
    1ddc:	b	10b0 <inflate+0xb74>
    1de0:	ldr	w9, [x19, #8]
    1de4:	cbz	w9, 5b8 <inflate+0x7c>
    1de8:	mov	w0, #0xfffffffe            	// #-2
    1dec:	ldp	x20, x19, [sp, #192]
    1df0:	ldp	x22, x21, [sp, #176]
    1df4:	ldp	x24, x23, [sp, #160]
    1df8:	ldp	x26, x25, [sp, #144]
    1dfc:	ldp	x28, x27, [sp, #128]
    1e00:	ldp	x29, x30, [sp, #112]
    1e04:	add	sp, sp, #0xd0
    1e08:	ret
    1e0c:	add	w22, w22, w28, lsl #3
    1e10:	add	x23, x23, w28, uxtw
    1e14:	mov	w26, w6
    1e18:	mov	w28, wzr
    1e1c:	b	1e30 <inflate+0x18f4>
    1e20:	mov	w22, w9
    1e24:	b	1e2c <inflate+0x18f0>
    1e28:	mov	w22, w8
    1e2c:	mov	w26, w6
    1e30:	str	x1, [x19, #24]
    1e34:	str	w3, [x19, #32]
    1e38:	str	x23, [x19]
    1e3c:	str	w28, [x19, #8]
    1e40:	ldr	w8, [x27, #60]
    1e44:	str	x25, [x27, #80]
    1e48:	str	w22, [x27, #88]
    1e4c:	cbz	w8, 1f18 <inflate+0x19dc>
    1e50:	ldr	x22, [x19, #56]
    1e54:	ldr	x0, [x22, #72]
    1e58:	cbnz	x0, 1ea0 <inflate+0x1964>
    1e5c:	ldr	w9, [x22, #56]
    1e60:	ldr	x8, [x19, #64]
    1e64:	ldr	x0, [x19, #80]
    1e68:	mov	w10, #0x1                   	// #1
    1e6c:	mov	x23, x1
    1e70:	lsl	w1, w10, w9
    1e74:	mov	w2, #0x1                   	// #1
    1e78:	mov	w24, w20
    1e7c:	mov	w20, w3
    1e80:	mov	w21, w4
    1e84:	blr	x8
    1e88:	mov	w4, w21
    1e8c:	mov	w3, w20
    1e90:	mov	w20, w24
    1e94:	mov	x1, x23
    1e98:	str	x0, [x22, #72]
    1e9c:	cbz	x0, 206c <inflate+0x1b30>
    1ea0:	ldr	w8, [x22, #60]
    1ea4:	sub	w21, w4, w3
    1ea8:	cbnz	w8, 1ec0 <inflate+0x1984>
    1eac:	ldr	w8, [x22, #56]
    1eb0:	mov	w9, #0x1                   	// #1
    1eb4:	str	xzr, [x22, #64]
    1eb8:	lsl	w8, w9, w8
    1ebc:	str	w8, [x22, #60]
    1ec0:	cmp	w8, w21
    1ec4:	b.ls	1f4c <inflate+0x1a10>  // b.plast
    1ec8:	ldr	w9, [x22, #68]
    1ecc:	mov	x24, x1
    1ed0:	sub	x1, x1, w21, uxtw
    1ed4:	mov	w25, w4
    1ed8:	sub	w8, w8, w9
    1edc:	cmp	w8, w21
    1ee0:	csel	w23, w21, w8, hi  // hi = pmore
    1ee4:	add	x0, x0, x9
    1ee8:	mov	x2, x23
    1eec:	bl	0 <memcpy>
    1ef0:	subs	w21, w21, w23
    1ef4:	b.eq	2040 <inflate+0x1b04>  // b.none
    1ef8:	ldr	x0, [x22, #72]
    1efc:	mov	w2, w21
    1f00:	sub	x1, x24, x2
    1f04:	bl	0 <memcpy>
    1f08:	ldr	w8, [x22, #60]
    1f0c:	mov	w4, w25
    1f10:	stp	w8, w21, [x22, #64]
    1f14:	b	1f6c <inflate+0x1a30>
    1f18:	cmp	w4, w3
    1f1c:	b.eq	1f6c <inflate+0x1a30>  // b.none
    1f20:	ldur	x8, [x29, #-16]
    1f24:	mov	w9, #0x3f50                	// #16208
    1f28:	ldr	w8, [x8]
    1f2c:	cmp	w8, w9
    1f30:	b.hi	1f6c <inflate+0x1a30>  // b.pmore
    1f34:	cmp	w20, #0x4
    1f38:	b.ne	1e50 <inflate+0x1914>  // b.any
    1f3c:	mov	w9, #0x3f4d                	// #16205
    1f40:	cmp	w8, w9
    1f44:	b.hi	1f6c <inflate+0x1a30>  // b.pmore
    1f48:	b	1e50 <inflate+0x1914>
    1f4c:	mov	w2, w8
    1f50:	sub	x1, x1, x2
    1f54:	mov	w21, w4
    1f58:	bl	0 <memcpy>
    1f5c:	ldr	w8, [x22, #60]
    1f60:	mov	w4, w21
    1f64:	str	wzr, [x22, #68]
    1f68:	str	w8, [x22, #64]
    1f6c:	ldr	w8, [x19, #8]
    1f70:	ldr	w9, [x19, #32]
    1f74:	ldur	w12, [x29, #-32]
    1f78:	ldr	x10, [x19, #16]
    1f7c:	ldr	x11, [x19, #40]
    1f80:	subs	w21, w4, w9
    1f84:	sub	w22, w12, w8
    1f88:	add	x8, x10, x22
    1f8c:	add	x9, x11, x21
    1f90:	str	x8, [x19, #16]
    1f94:	str	x9, [x19, #40]
    1f98:	ldr	x8, [x27, #40]
    1f9c:	add	x8, x8, x21
    1fa0:	str	x8, [x27, #40]
    1fa4:	b.eq	1fe0 <inflate+0x1aa4>  // b.none
    1fa8:	ldr	w8, [x27, #16]
    1fac:	tbz	w8, #2, 1fe0 <inflate+0x1aa4>
    1fb0:	ldr	x9, [x19, #24]
    1fb4:	ldr	w8, [x27, #24]
    1fb8:	ldr	x0, [x27, #32]
    1fbc:	mov	w2, w21
    1fc0:	sub	x1, x9, x21
    1fc4:	cbz	w8, 1fd0 <inflate+0x1a94>
    1fc8:	bl	0 <crc32>
    1fcc:	b	1fd4 <inflate+0x1a98>
    1fd0:	bl	0 <adler32>
    1fd4:	ldur	x8, [x29, #-24]
    1fd8:	str	x0, [x8]
    1fdc:	str	x0, [x19, #96]
    1fe0:	ldp	w10, w9, [x27, #8]
    1fe4:	ldr	w8, [x27, #88]
    1fe8:	mov	w12, #0x3f3f                	// #16191
    1fec:	orr	w11, w21, w22
    1ff0:	cmp	w9, #0x0
    1ff4:	cset	w9, ne  // ne = any
    1ff8:	cmp	w10, w12
    1ffc:	mov	w12, #0x3f42                	// #16194
    2000:	add	w8, w8, w9, lsl #6
    2004:	cset	w9, eq  // eq = none
    2008:	cmp	w10, w12
    200c:	mov	w12, #0x3f47                	// #16199
    2010:	add	w8, w8, w9, lsl #7
    2014:	mov	w9, #0x100                 	// #256
    2018:	ccmp	w10, w12, #0x4, ne  // ne = any
    201c:	csel	w9, w9, wzr, eq  // eq = none
    2020:	cmp	w11, #0x0
    2024:	add	w8, w8, w9
    2028:	ccmp	w20, #0x4, #0x4, ne  // ne = any
    202c:	str	w8, [x19, #88]
    2030:	ccmp	w26, #0x0, #0x0, eq  // eq = none
    2034:	mov	w8, #0xfffffffb            	// #-5
    2038:	csel	w0, w8, w26, eq  // eq = none
    203c:	b	1dec <inflate+0x18b0>
    2040:	ldp	w8, w9, [x22, #64]
    2044:	ldr	w10, [x22, #60]
    2048:	mov	w4, w25
    204c:	add	w9, w9, w23
    2050:	cmp	w9, w10
    2054:	csel	w9, wzr, w9, eq  // eq = none
    2058:	cmp	w8, w10
    205c:	str	w9, [x22, #68]
    2060:	b.cs	1f6c <inflate+0x1a30>  // b.hs, b.nlast
    2064:	add	w8, w8, w23
    2068:	b	1f68 <inflate+0x1a2c>
    206c:	ldur	x9, [x29, #-16]
    2070:	mov	w8, #0x3f52                	// #16210
    2074:	mov	w0, #0xfffffffc            	// #-4
    2078:	str	w8, [x9]
    207c:	b	1dec <inflate+0x18b0>
    2080:	mov	w26, #0xfffffffd            	// #-3
    2084:	b	1e30 <inflate+0x18f4>
    2088:	mov	w0, #0xfffffffc            	// #-4
    208c:	b	1dec <inflate+0x18b0>
    2090:	sub	w28, w28, w26
    2094:	ldp	w26, w3, [x29, #-40]
    2098:	ldur	w4, [x29, #-28]
    209c:	b	1e30 <inflate+0x18f4>
    20a0:	str	x1, [x19, #24]
    20a4:	str	w3, [x19, #32]
    20a8:	str	x23, [x19]
    20ac:	str	w28, [x19, #8]
    20b0:	str	x25, [x27, #80]
    20b4:	str	w22, [x27, #88]
    20b8:	mov	w0, #0x2                   	// #2
    20bc:	b	1dec <inflate+0x18b0>
    20c0:	ldur	w26, [x29, #-40]
    20c4:	ldur	w4, [x29, #-28]
    20c8:	mov	w3, w24
    20cc:	b	1e30 <inflate+0x18f4>
    20d0:	mov	x25, xzr
    20d4:	mov	w22, wzr
    20d8:	ldur	x9, [x29, #-16]
    20dc:	mov	w8, #0x3f50                	// #16208
    20e0:	mov	w26, #0x1                   	// #1
    20e4:	str	w8, [x9]
    20e8:	b	1e30 <inflate+0x18f4>
    20ec:	lsr	x25, x25, #3
    20f0:	sub	w22, w22, #0x3
    20f4:	mov	w26, w6
    20f8:	b	1e30 <inflate+0x18f4>

00000000000020fc <inflateEnd>:
    20fc:	stp	x29, x30, [sp, #-32]!
    2100:	str	x19, [sp, #16]
    2104:	mov	x29, sp
    2108:	cbz	x0, 2180 <inflateEnd+0x84>
    210c:	ldr	x8, [x0, #64]
    2110:	mov	x19, x0
    2114:	cbz	x8, 2180 <inflateEnd+0x84>
    2118:	ldr	x9, [x19, #72]
    211c:	cbz	x9, 2180 <inflateEnd+0x84>
    2120:	ldr	x1, [x19, #56]
    2124:	cbz	x1, 2180 <inflateEnd+0x84>
    2128:	ldr	x8, [x1]
    212c:	cmp	x8, x19
    2130:	b.ne	2180 <inflateEnd+0x84>  // b.any
    2134:	ldr	w8, [x1, #8]
    2138:	mov	w10, #0xffffc0cc            	// #-16180
    213c:	add	w8, w8, w10
    2140:	cmp	w8, #0x1f
    2144:	b.hi	2180 <inflateEnd+0x84>  // b.pmore
    2148:	ldr	x8, [x1, #72]
    214c:	cbz	x8, 2164 <inflateEnd+0x68>
    2150:	ldr	x0, [x19, #80]
    2154:	mov	x1, x8
    2158:	blr	x9
    215c:	ldr	x9, [x19, #72]
    2160:	ldr	x1, [x19, #56]
    2164:	ldr	x0, [x19, #80]
    2168:	blr	x9
    216c:	mov	w0, wzr
    2170:	str	xzr, [x19, #56]
    2174:	ldr	x19, [sp, #16]
    2178:	ldp	x29, x30, [sp], #32
    217c:	ret
    2180:	mov	w0, #0xfffffffe            	// #-2
    2184:	ldr	x19, [sp, #16]
    2188:	ldp	x29, x30, [sp], #32
    218c:	ret

0000000000002190 <inflateGetDictionary>:
    2190:	stp	x29, x30, [sp, #-48]!
    2194:	str	x21, [sp, #16]
    2198:	stp	x20, x19, [sp, #32]
    219c:	mov	x29, sp
    21a0:	cbz	x0, 2250 <inflateGetDictionary+0xc0>
    21a4:	ldr	x8, [x0, #64]
    21a8:	cbz	x8, 2250 <inflateGetDictionary+0xc0>
    21ac:	ldr	x8, [x0, #72]
    21b0:	cbz	x8, 2250 <inflateGetDictionary+0xc0>
    21b4:	ldr	x21, [x0, #56]
    21b8:	cbz	x21, 2250 <inflateGetDictionary+0xc0>
    21bc:	ldr	x8, [x21]
    21c0:	cmp	x8, x0
    21c4:	b.eq	21dc <inflateGetDictionary+0x4c>  // b.none
    21c8:	mov	w0, #0xfffffffe            	// #-2
    21cc:	ldp	x20, x19, [sp, #32]
    21d0:	ldr	x21, [sp, #16]
    21d4:	ldp	x29, x30, [sp], #48
    21d8:	ret
    21dc:	ldr	w8, [x21, #8]
    21e0:	mov	w9, #0xffffc0cc            	// #-16180
    21e4:	add	w8, w8, w9
    21e8:	cmp	w8, #0x1f
    21ec:	b.hi	2250 <inflateGetDictionary+0xc0>  // b.pmore
    21f0:	mov	x19, x2
    21f4:	mov	x20, x1
    21f8:	cbz	x1, 2230 <inflateGetDictionary+0xa0>
    21fc:	ldr	w8, [x21, #64]
    2200:	cbz	w8, 2230 <inflateGetDictionary+0xa0>
    2204:	ldr	x9, [x21, #72]
    2208:	ldr	w10, [x21, #68]
    220c:	mov	x0, x20
    2210:	add	x1, x9, x10
    2214:	sub	w2, w8, w10
    2218:	bl	0 <memcpy>
    221c:	ldp	w8, w2, [x21, #64]
    2220:	ldr	x1, [x21, #72]
    2224:	add	x8, x20, x8
    2228:	sub	x0, x8, x2
    222c:	bl	0 <memcpy>
    2230:	mov	w0, wzr
    2234:	cbz	x19, 21cc <inflateGetDictionary+0x3c>
    2238:	ldr	w8, [x21, #64]
    223c:	str	w8, [x19]
    2240:	ldp	x20, x19, [sp, #32]
    2244:	ldr	x21, [sp, #16]
    2248:	ldp	x29, x30, [sp], #48
    224c:	ret
    2250:	mov	w0, #0xfffffffe            	// #-2
    2254:	ldp	x20, x19, [sp, #32]
    2258:	ldr	x21, [sp, #16]
    225c:	ldp	x29, x30, [sp], #48
    2260:	ret

0000000000002264 <inflateSetDictionary>:
    2264:	stp	x29, x30, [sp, #-64]!
    2268:	stp	x24, x23, [sp, #16]
    226c:	stp	x22, x21, [sp, #32]
    2270:	stp	x20, x19, [sp, #48]
    2274:	mov	x29, sp
    2278:	cbz	x0, 22d4 <inflateSetDictionary+0x70>
    227c:	ldr	x8, [x0, #64]
    2280:	mov	x21, x0
    2284:	cbz	x8, 22d4 <inflateSetDictionary+0x70>
    2288:	ldr	x8, [x21, #72]
    228c:	cbz	x8, 22d4 <inflateSetDictionary+0x70>
    2290:	ldr	x22, [x21, #56]
    2294:	cbz	x22, 22d4 <inflateSetDictionary+0x70>
    2298:	ldr	x8, [x22]
    229c:	cmp	x8, x21
    22a0:	b.ne	22d4 <inflateSetDictionary+0x70>  // b.any
    22a4:	ldr	w8, [x22, #8]
    22a8:	mov	w9, #0xffffc0cc            	// #-16180
    22ac:	add	w9, w8, w9
    22b0:	cmp	w9, #0x1f
    22b4:	b.hi	22d4 <inflateSetDictionary+0x70>  // b.pmore
    22b8:	ldr	w9, [x22, #16]
    22bc:	mov	w19, w2
    22c0:	mov	x20, x1
    22c4:	cbz	w9, 22ec <inflateSetDictionary+0x88>
    22c8:	mov	w9, #0x3f3e                	// #16190
    22cc:	cmp	w8, w9
    22d0:	b.eq	22fc <inflateSetDictionary+0x98>  // b.none
    22d4:	mov	w0, #0xfffffffe            	// #-2
    22d8:	ldp	x20, x19, [sp, #48]
    22dc:	ldp	x22, x21, [sp, #32]
    22e0:	ldp	x24, x23, [sp, #16]
    22e4:	ldp	x29, x30, [sp], #64
    22e8:	ret
    22ec:	mov	w9, #0x3f3e                	// #16190
    22f0:	cmp	w8, w9
    22f4:	mov	x23, x22
    22f8:	b.ne	2328 <inflateSetDictionary+0xc4>  // b.any
    22fc:	mov	x0, xzr
    2300:	mov	x1, xzr
    2304:	mov	w2, wzr
    2308:	bl	0 <adler32>
    230c:	mov	x1, x20
    2310:	mov	w2, w19
    2314:	bl	0 <adler32>
    2318:	ldr	x8, [x22, #32]
    231c:	cmp	x0, x8
    2320:	b.ne	23c0 <inflateSetDictionary+0x15c>  // b.any
    2324:	ldr	x23, [x21, #56]
    2328:	ldr	x0, [x23, #72]
    232c:	cbnz	x0, 2354 <inflateSetDictionary+0xf0>
    2330:	ldr	w9, [x23, #56]
    2334:	ldr	x8, [x21, #64]
    2338:	ldr	x0, [x21, #80]
    233c:	mov	w10, #0x1                   	// #1
    2340:	lsl	w1, w10, w9
    2344:	mov	w2, #0x1                   	// #1
    2348:	blr	x8
    234c:	str	x0, [x23, #72]
    2350:	cbz	x0, 2418 <inflateSetDictionary+0x1b4>
    2354:	ldr	w8, [x23, #60]
    2358:	cbnz	w8, 2370 <inflateSetDictionary+0x10c>
    235c:	ldr	w8, [x23, #56]
    2360:	mov	w9, #0x1                   	// #1
    2364:	str	xzr, [x23, #64]
    2368:	lsl	w8, w9, w8
    236c:	str	w8, [x23, #60]
    2370:	cmp	w8, w19
    2374:	add	x24, x20, w19, uxtw
    2378:	b.ls	23c8 <inflateSetDictionary+0x164>  // b.plast
    237c:	ldr	w9, [x23, #68]
    2380:	mov	x1, x20
    2384:	sub	w8, w8, w9
    2388:	cmp	w8, w19
    238c:	csel	w21, w19, w8, hi  // hi = pmore
    2390:	add	x0, x0, x9
    2394:	mov	x2, x21
    2398:	bl	0 <memcpy>
    239c:	subs	w19, w19, w21
    23a0:	b.eq	23f0 <inflateSetDictionary+0x18c>  // b.none
    23a4:	ldr	x0, [x23, #72]
    23a8:	mov	w2, w19
    23ac:	sub	x1, x24, x2
    23b0:	bl	0 <memcpy>
    23b4:	ldr	w8, [x23, #60]
    23b8:	str	w19, [x23, #68]
    23bc:	b	23dc <inflateSetDictionary+0x178>
    23c0:	mov	w0, #0xfffffffd            	// #-3
    23c4:	b	22d8 <inflateSetDictionary+0x74>
    23c8:	mov	w2, w8
    23cc:	sub	x1, x24, x2
    23d0:	bl	0 <memcpy>
    23d4:	ldr	w8, [x23, #60]
    23d8:	str	wzr, [x23, #68]
    23dc:	str	w8, [x23, #64]
    23e0:	mov	w0, wzr
    23e4:	mov	w8, #0x1                   	// #1
    23e8:	str	w8, [x22, #20]
    23ec:	b	22d8 <inflateSetDictionary+0x74>
    23f0:	ldp	w8, w9, [x23, #64]
    23f4:	ldr	w10, [x23, #60]
    23f8:	add	w9, w9, w21
    23fc:	cmp	w9, w10
    2400:	csel	w9, wzr, w9, eq  // eq = none
    2404:	cmp	w8, w10
    2408:	str	w9, [x23, #68]
    240c:	b.cs	23e0 <inflateSetDictionary+0x17c>  // b.hs, b.nlast
    2410:	add	w8, w8, w21
    2414:	b	23dc <inflateSetDictionary+0x178>
    2418:	mov	w8, #0x3f52                	// #16210
    241c:	str	w8, [x22, #8]
    2420:	mov	w0, #0xfffffffc            	// #-4
    2424:	b	22d8 <inflateSetDictionary+0x74>

0000000000002428 <inflateGetHeader>:
    2428:	cbz	x0, 246c <inflateGetHeader+0x44>
    242c:	ldr	x8, [x0, #64]
    2430:	cbz	x8, 246c <inflateGetHeader+0x44>
    2434:	ldr	x8, [x0, #72]
    2438:	cbz	x8, 246c <inflateGetHeader+0x44>
    243c:	ldr	x8, [x0, #56]
    2440:	cbz	x8, 246c <inflateGetHeader+0x44>
    2444:	ldr	x9, [x8]
    2448:	cmp	x9, x0
    244c:	b.ne	246c <inflateGetHeader+0x44>  // b.any
    2450:	ldr	w9, [x8, #8]
    2454:	mov	w10, #0xffffc0cc            	// #-16180
    2458:	add	w9, w9, w10
    245c:	cmp	w9, #0x1f
    2460:	b.hi	246c <inflateGetHeader+0x44>  // b.pmore
    2464:	ldrb	w9, [x8, #16]
    2468:	tbnz	w9, #1, 2474 <inflateGetHeader+0x4c>
    246c:	mov	w0, #0xfffffffe            	// #-2
    2470:	ret
    2474:	mov	w0, wzr
    2478:	str	x1, [x8, #48]
    247c:	str	wzr, [x1, #72]
    2480:	ret

0000000000002484 <inflateSync>:
    2484:	sub	sp, sp, #0x10
    2488:	cbz	x0, 24e8 <inflateSync+0x64>
    248c:	ldr	x8, [x0, #64]
    2490:	cbz	x8, 24e8 <inflateSync+0x64>
    2494:	ldr	x8, [x0, #72]
    2498:	cbz	x8, 24e8 <inflateSync+0x64>
    249c:	ldr	x9, [x0, #56]
    24a0:	cbz	x9, 24e8 <inflateSync+0x64>
    24a4:	ldr	x8, [x9]
    24a8:	cmp	x8, x0
    24ac:	b.ne	24e8 <inflateSync+0x64>  // b.any
    24b0:	ldr	w8, [x9, #8]
    24b4:	mov	w10, #0xffffc0cc            	// #-16180
    24b8:	add	w10, w8, w10
    24bc:	cmp	w10, #0x1f
    24c0:	b.hi	24e8 <inflateSync+0x64>  // b.pmore
    24c4:	ldr	w12, [x0, #8]
    24c8:	cbnz	w12, 24f8 <inflateSync+0x74>
    24cc:	ldr	w10, [x9, #88]
    24d0:	cmp	w10, #0x8
    24d4:	b.cs	24f8 <inflateSync+0x74>  // b.hs, b.nlast
    24d8:	mov	w8, #0xfffffffb            	// #-5
    24dc:	mov	w0, w8
    24e0:	add	sp, sp, #0x10
    24e4:	ret
    24e8:	mov	w8, #0xfffffffe            	// #-2
    24ec:	mov	w0, w8
    24f0:	add	sp, sp, #0x10
    24f4:	ret
    24f8:	mov	w10, #0x3f53                	// #16211
    24fc:	cmp	w8, w10
    2500:	b.ne	250c <inflateSync+0x88>  // b.any
    2504:	ldr	w8, [x9, #140]
    2508:	b	25d0 <inflateSync+0x14c>
    250c:	ldr	w11, [x9, #88]
    2510:	ldr	x8, [x9, #80]
    2514:	str	w10, [x9, #8]
    2518:	and	x10, x11, #0x7
    251c:	ands	w12, w11, #0xfffffff8
    2520:	lsl	x8, x8, x10
    2524:	str	x8, [x9, #80]
    2528:	str	w12, [x9, #88]
    252c:	b.eq	25b4 <inflateSync+0x130>  // b.none
    2530:	and	w11, w11, #0xfffffff8
    2534:	mov	x10, xzr
    2538:	neg	w11, w11
    253c:	add	x12, sp, #0xc
    2540:	strb	w8, [x12, x10]
    2544:	add	x10, x10, #0x1
    2548:	adds	w11, w11, #0x8
    254c:	lsr	x8, x8, #8
    2550:	b.ne	2540 <inflateSync+0xbc>  // b.any
    2554:	mov	x11, x9
    2558:	str	wzr, [x11, #140]!
    255c:	stur	x8, [x11, #-60]
    2560:	stur	wzr, [x11, #-52]
    2564:	cbz	w10, 25c4 <inflateSync+0x140>
    2568:	mov	x12, xzr
    256c:	mov	w8, wzr
    2570:	add	x13, sp, #0xc
    2574:	mov	w14, #0xff                  	// #255
    2578:	mov	w15, #0x4                   	// #4
    257c:	ldrb	w16, [x13, x12]
    2580:	cmp	w8, #0x2
    2584:	sub	w17, w15, w8
    2588:	csel	w18, wzr, w14, cc  // cc = lo, ul, last
    258c:	cmp	w16, #0x0
    2590:	add	x12, x12, #0x1
    2594:	csel	w17, w17, wzr, eq  // eq = none
    2598:	cmp	w18, w16
    259c:	csinc	w8, w17, w8, ne  // ne = any
    25a0:	cmp	x12, x10
    25a4:	b.cs	25c8 <inflateSync+0x144>  // b.hs, b.nlast
    25a8:	cmp	w8, #0x4
    25ac:	b.cc	257c <inflateSync+0xf8>  // b.lo, b.ul, b.last
    25b0:	b	25c8 <inflateSync+0x144>
    25b4:	mov	x11, x9
    25b8:	mov	w8, wzr
    25bc:	str	wzr, [x11, #140]!
    25c0:	b	25c8 <inflateSync+0x144>
    25c4:	mov	w8, wzr
    25c8:	str	w8, [x11]
    25cc:	ldr	w12, [x0, #8]
    25d0:	ldr	x10, [x0]
    25d4:	mov	w11, wzr
    25d8:	cbz	w12, 2628 <inflateSync+0x1a4>
    25dc:	cmp	w8, #0x3
    25e0:	b.hi	2628 <inflateSync+0x1a4>  // b.pmore
    25e4:	mov	x11, xzr
    25e8:	mov	w12, w12
    25ec:	mov	w13, #0xff                  	// #255
    25f0:	mov	w14, #0x4                   	// #4
    25f4:	ldrb	w15, [x10, x11]
    25f8:	cmp	w8, #0x2
    25fc:	sub	w16, w14, w8
    2600:	csel	w17, wzr, w13, cc  // cc = lo, ul, last
    2604:	cmp	w15, #0x0
    2608:	add	x11, x11, #0x1
    260c:	csel	w16, w16, wzr, eq  // eq = none
    2610:	cmp	w17, w15
    2614:	csinc	w8, w16, w8, ne  // ne = any
    2618:	cmp	x11, x12
    261c:	b.cs	2628 <inflateSync+0x1a4>  // b.hs, b.nlast
    2620:	cmp	w8, #0x4
    2624:	b.cc	25f4 <inflateSync+0x170>  // b.lo, b.ul, b.last
    2628:	str	w8, [x9, #140]
    262c:	cmp	w8, #0x4
    2630:	ldr	w8, [x0, #8]
    2634:	ldr	x13, [x0, #16]
    2638:	mov	w12, w11
    263c:	add	x10, x10, x12
    2640:	str	x10, [x0]
    2644:	sub	w8, w8, w11
    2648:	add	x10, x13, x12
    264c:	str	w8, [x0, #8]
    2650:	str	x10, [x0, #16]
    2654:	b.ne	26d4 <inflateSync+0x250>  // b.any
    2658:	ldr	x11, [x0, #40]
    265c:	str	xzr, [x9, #64]
    2660:	str	wzr, [x9, #60]
    2664:	str	xzr, [x9, #40]
    2668:	str	xzr, [x0, #16]
    266c:	stp	xzr, xzr, [x0, #40]
    2670:	ldr	w8, [x9, #16]
    2674:	cbz	w8, 2680 <inflateSync+0x1fc>
    2678:	and	x8, x8, #0x1
    267c:	str	x8, [x0, #96]
    2680:	mov	w12, #0x8000                	// #32768
    2684:	str	w12, [x9, #28]
    2688:	adrp	x12, 0 <inflateResetKeep>
    268c:	ldr	d0, [x12]
    2690:	add	x12, x9, #0x558
    2694:	str	x12, [x9, #144]
    2698:	stp	x12, x12, [x9, #104]
    269c:	adrp	x12, 0 <inflateResetKeep>
    26a0:	str	d0, [x9, #7144]
    26a4:	ldr	d0, [x12]
    26a8:	mov	w8, wzr
    26ac:	str	wzr, [x9, #20]
    26b0:	str	xzr, [x9, #48]
    26b4:	str	xzr, [x9, #80]
    26b8:	str	wzr, [x9, #88]
    26bc:	str	x10, [x0, #16]
    26c0:	str	x11, [x0, #40]
    26c4:	str	d0, [x9, #8]
    26c8:	mov	w0, w8
    26cc:	add	sp, sp, #0x10
    26d0:	ret
    26d4:	mov	w8, #0xfffffffd            	// #-3
    26d8:	mov	w0, w8
    26dc:	add	sp, sp, #0x10
    26e0:	ret

00000000000026e4 <inflateSyncPoint>:
    26e4:	cbz	x0, 273c <inflateSyncPoint+0x58>
    26e8:	ldr	x8, [x0, #64]
    26ec:	cbz	x8, 273c <inflateSyncPoint+0x58>
    26f0:	ldr	x8, [x0, #72]
    26f4:	cbz	x8, 273c <inflateSyncPoint+0x58>
    26f8:	ldr	x8, [x0, #56]
    26fc:	cbz	x8, 273c <inflateSyncPoint+0x58>
    2700:	ldr	x9, [x8]
    2704:	cmp	x9, x0
    2708:	b.ne	273c <inflateSyncPoint+0x58>  // b.any
    270c:	ldr	w9, [x8, #8]
    2710:	mov	w10, #0xffffc0cc            	// #-16180
    2714:	add	w10, w9, w10
    2718:	cmp	w10, #0x1f
    271c:	b.hi	273c <inflateSyncPoint+0x58>  // b.pmore
    2720:	mov	w10, #0x3f41                	// #16193
    2724:	cmp	w9, w10
    2728:	b.ne	2744 <inflateSyncPoint+0x60>  // b.any
    272c:	ldr	w8, [x8, #88]
    2730:	cmp	w8, #0x0
    2734:	cset	w0, eq  // eq = none
    2738:	ret
    273c:	mov	w0, #0xfffffffe            	// #-2
    2740:	ret
    2744:	mov	w0, wzr
    2748:	ret

000000000000274c <inflateCopy>:
    274c:	stp	x29, x30, [sp, #-64]!
    2750:	str	x23, [sp, #16]
    2754:	stp	x22, x21, [sp, #32]
    2758:	stp	x20, x19, [sp, #48]
    275c:	mov	x29, sp
    2760:	cbz	x1, 278c <inflateCopy+0x40>
    2764:	ldr	x8, [x1, #64]
    2768:	mov	x22, x1
    276c:	cbz	x8, 278c <inflateCopy+0x40>
    2770:	ldr	x9, [x22, #72]
    2774:	cbz	x9, 278c <inflateCopy+0x40>
    2778:	ldr	x20, [x22, #56]
    277c:	cbz	x20, 278c <inflateCopy+0x40>
    2780:	ldr	x9, [x20]
    2784:	cmp	x9, x22
    2788:	b.eq	27a4 <inflateCopy+0x58>  // b.none
    278c:	mov	w0, #0xfffffffe            	// #-2
    2790:	ldp	x20, x19, [sp, #48]
    2794:	ldp	x22, x21, [sp, #32]
    2798:	ldr	x23, [sp, #16]
    279c:	ldp	x29, x30, [sp], #64
    27a0:	ret
    27a4:	mov	x19, x0
    27a8:	mov	w0, #0xfffffffe            	// #-2
    27ac:	cbz	x19, 2790 <inflateCopy+0x44>
    27b0:	ldr	w9, [x20, #8]
    27b4:	mov	w10, #0xffffc0cc            	// #-16180
    27b8:	add	w9, w9, w10
    27bc:	cmp	w9, #0x1f
    27c0:	b.hi	2790 <inflateCopy+0x44>  // b.pmore
    27c4:	ldr	x0, [x22, #80]
    27c8:	mov	w1, #0x1                   	// #1
    27cc:	mov	w2, #0x1bf8                	// #7160
    27d0:	blr	x8
    27d4:	cbz	x0, 2814 <inflateCopy+0xc8>
    27d8:	ldr	x8, [x20, #72]
    27dc:	mov	x21, x0
    27e0:	cbz	x8, 281c <inflateCopy+0xd0>
    27e4:	ldr	w9, [x20, #56]
    27e8:	ldr	x8, [x22, #64]
    27ec:	ldr	x0, [x22, #80]
    27f0:	mov	w10, #0x1                   	// #1
    27f4:	lsl	w1, w10, w9
    27f8:	mov	w2, #0x1                   	// #1
    27fc:	blr	x8
    2800:	mov	x23, x0
    2804:	cbnz	x0, 2820 <inflateCopy+0xd4>
    2808:	ldp	x8, x0, [x22, #72]
    280c:	mov	x1, x21
    2810:	blr	x8
    2814:	mov	w0, #0xfffffffc            	// #-4
    2818:	b	2790 <inflateCopy+0x44>
    281c:	mov	x23, xzr
    2820:	ldp	q1, q0, [x22, #16]
    2824:	ldr	q2, [x22]
    2828:	mov	w2, #0x1bf8                	// #7160
    282c:	mov	x0, x21
    2830:	stp	q1, q0, [x19, #16]
    2834:	str	q2, [x19]
    2838:	ldp	q1, q0, [x22, #80]
    283c:	ldp	q3, q2, [x22, #48]
    2840:	mov	x1, x20
    2844:	stp	q1, q0, [x19, #80]
    2848:	stp	q3, q2, [x19, #48]
    284c:	bl	0 <memcpy>
    2850:	str	x19, [x21]
    2854:	ldr	x10, [x20, #104]
    2858:	add	x8, x20, #0x558
    285c:	subs	x9, x10, x8
    2860:	b.cc	2890 <inflateCopy+0x144>  // b.lo, b.ul, b.last
    2864:	mov	w11, #0x1be4                	// #7140
    2868:	add	x11, x20, x11
    286c:	cmp	x10, x11
    2870:	b.hi	2890 <inflateCopy+0x144>  // b.pmore
    2874:	add	x10, x21, #0x558
    2878:	add	x9, x10, x9
    287c:	str	x9, [x21, #104]
    2880:	ldr	x9, [x20, #112]
    2884:	sub	x9, x9, x8
    2888:	add	x9, x10, x9
    288c:	str	x9, [x21, #112]
    2890:	ldr	x9, [x20, #144]
    2894:	sub	x8, x9, x8
    2898:	add	x8, x21, x8
    289c:	add	x8, x8, #0x558
    28a0:	str	x8, [x21, #144]
    28a4:	cbz	x23, 28c0 <inflateCopy+0x174>
    28a8:	ldr	w8, [x20, #56]
    28ac:	ldr	x1, [x20, #72]
    28b0:	mov	w9, #0x1                   	// #1
    28b4:	mov	x0, x23
    28b8:	lsl	x2, x9, x8
    28bc:	bl	0 <memcpy>
    28c0:	mov	w0, wzr
    28c4:	str	x23, [x21, #72]
    28c8:	str	x21, [x19, #56]
    28cc:	b	2790 <inflateCopy+0x44>

00000000000028d0 <inflateUndermine>:
    28d0:	cbz	x0, 291c <inflateUndermine+0x4c>
    28d4:	ldr	x8, [x0, #64]
    28d8:	cbz	x8, 291c <inflateUndermine+0x4c>
    28dc:	ldr	x8, [x0, #72]
    28e0:	cbz	x8, 291c <inflateUndermine+0x4c>
    28e4:	ldr	x8, [x0, #56]
    28e8:	cbz	x8, 291c <inflateUndermine+0x4c>
    28ec:	ldr	x9, [x8]
    28f0:	cmp	x9, x0
    28f4:	b.ne	291c <inflateUndermine+0x4c>  // b.any
    28f8:	ldr	w9, [x8, #8]
    28fc:	mov	w10, #0xffffc0cc            	// #-16180
    2900:	add	w9, w9, w10
    2904:	cmp	w9, #0x1f
    2908:	b.hi	291c <inflateUndermine+0x4c>  // b.pmore
    290c:	mov	w9, #0x1                   	// #1
    2910:	mov	w0, #0xfffffffd            	// #-3
    2914:	str	w9, [x8, #7144]
    2918:	ret
    291c:	mov	w0, #0xfffffffe            	// #-2
    2920:	ret

0000000000002924 <inflateValidate>:
    2924:	cbz	x0, 2980 <inflateValidate+0x5c>
    2928:	ldr	x8, [x0, #64]
    292c:	cbz	x8, 2980 <inflateValidate+0x5c>
    2930:	ldr	x8, [x0, #72]
    2934:	cbz	x8, 2980 <inflateValidate+0x5c>
    2938:	ldr	x8, [x0, #56]
    293c:	cbz	x8, 2980 <inflateValidate+0x5c>
    2940:	ldr	x9, [x8]
    2944:	cmp	x9, x0
    2948:	b.ne	2980 <inflateValidate+0x5c>  // b.any
    294c:	ldr	w9, [x8, #8]
    2950:	mov	w10, #0xffffc0cc            	// #-16180
    2954:	add	w9, w9, w10
    2958:	cmp	w9, #0x1f
    295c:	b.hi	2980 <inflateValidate+0x5c>  // b.pmore
    2960:	ldr	w9, [x8, #16]
    2964:	cmp	w1, #0x0
    2968:	mov	w0, wzr
    296c:	and	w10, w9, #0xfffffffb
    2970:	orr	w9, w9, #0x4
    2974:	csel	w9, w10, w9, eq  // eq = none
    2978:	str	w9, [x8, #16]
    297c:	ret
    2980:	mov	w0, #0xfffffffe            	// #-2
    2984:	ret

0000000000002988 <inflateMark>:
    2988:	cbz	x0, 29f0 <inflateMark+0x68>
    298c:	ldr	x8, [x0, #64]
    2990:	cbz	x8, 29f0 <inflateMark+0x68>
    2994:	ldr	x8, [x0, #72]
    2998:	cbz	x8, 29f0 <inflateMark+0x68>
    299c:	ldr	x8, [x0, #56]
    29a0:	cbz	x8, 29f0 <inflateMark+0x68>
    29a4:	ldr	x9, [x8]
    29a8:	cmp	x9, x0
    29ac:	b.ne	29f0 <inflateMark+0x68>  // b.any
    29b0:	ldr	w10, [x8, #8]
    29b4:	mov	w9, #0xffffc0cc            	// #-16180
    29b8:	add	w9, w10, w9
    29bc:	cmp	w9, #0x1f
    29c0:	b.hi	29f0 <inflateMark+0x68>  // b.pmore
    29c4:	ldrsw	x9, [x8, #7148]
    29c8:	mov	w11, #0x3f4c                	// #16204
    29cc:	cmp	w10, w11
    29d0:	lsl	x9, x9, #16
    29d4:	b.eq	29f8 <inflateMark+0x70>  // b.none
    29d8:	mov	w11, #0x3f43                	// #16195
    29dc:	cmp	w10, w11
    29e0:	b.ne	2a0c <inflateMark+0x84>  // b.any
    29e4:	ldr	w8, [x8, #92]
    29e8:	add	x0, x9, w8, uxtw
    29ec:	ret
    29f0:	mov	x0, #0xffffffffffff0000    	// #-65536
    29f4:	ret
    29f8:	ldr	w10, [x8, #7152]
    29fc:	ldr	w8, [x8, #92]
    2a00:	sub	w8, w10, w8
    2a04:	add	x0, x9, w8, uxtw
    2a08:	ret
    2a0c:	add	x0, x9, wzr, uxtw
    2a10:	ret

0000000000002a14 <inflateCodesUsed>:
    2a14:	cbz	x0, 2a64 <inflateCodesUsed+0x50>
    2a18:	ldr	x8, [x0, #64]
    2a1c:	cbz	x8, 2a64 <inflateCodesUsed+0x50>
    2a20:	ldr	x8, [x0, #72]
    2a24:	cbz	x8, 2a64 <inflateCodesUsed+0x50>
    2a28:	ldr	x8, [x0, #56]
    2a2c:	cbz	x8, 2a64 <inflateCodesUsed+0x50>
    2a30:	ldr	x9, [x8]
    2a34:	cmp	x9, x0
    2a38:	b.ne	2a64 <inflateCodesUsed+0x50>  // b.any
    2a3c:	ldr	w9, [x8, #8]
    2a40:	mov	w10, #0xffffc0cc            	// #-16180
    2a44:	add	w9, w9, w10
    2a48:	cmp	w9, #0x1f
    2a4c:	b.hi	2a64 <inflateCodesUsed+0x50>  // b.pmore
    2a50:	ldr	x9, [x8, #144]
    2a54:	sub	x8, x9, x8
    2a58:	sub	x8, x8, #0x558
    2a5c:	asr	x0, x8, #2
    2a60:	ret
    2a64:	mov	x0, #0xffffffffffffffff    	// #-1
    2a68:	ret

inftrees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_table>:
   0:	sub	sp, sp, #0x90
   4:	movi	v0.2d, #0x0
   8:	stp	x28, x27, [sp, #64]
   c:	stp	x26, x25, [sp, #80]
  10:	stp	x24, x23, [sp, #96]
  14:	stp	x22, x21, [sp, #112]
  18:	stp	x20, x19, [sp, #128]
  1c:	stp	q0, q0, [sp, #32]
  20:	cbz	w2, 60 <inflate_table+0x60>
  24:	mov	w8, w2
  28:	add	x9, sp, #0x20
  2c:	mov	x10, x1
  30:	ldrh	w11, [x10], #2
  34:	subs	x8, x8, #0x1
  38:	lsl	x11, x11, #1
  3c:	ldrh	w12, [x9, x11]
  40:	add	w12, w12, #0x1
  44:	strh	w12, [x9, x11]
  48:	b.ne	30 <inflate_table+0x30>  // b.any
  4c:	ldrh	w8, [sp, #62]
  50:	ldr	w11, [x4]
  54:	cbz	w8, 64 <inflate_table+0x64>
  58:	mov	w9, #0xf                   	// #15
  5c:	b	164 <inflate_table+0x164>
  60:	ldr	w11, [x4]
  64:	ldrh	w8, [sp, #60]
  68:	cbz	w8, 78 <inflate_table+0x78>
  6c:	mov	w8, wzr
  70:	mov	w9, #0xe                   	// #14
  74:	b	164 <inflate_table+0x164>
  78:	ldrh	w8, [sp, #58]
  7c:	cbz	w8, 8c <inflate_table+0x8c>
  80:	mov	w8, wzr
  84:	mov	w9, #0xd                   	// #13
  88:	b	164 <inflate_table+0x164>
  8c:	ldrh	w8, [sp, #56]
  90:	cbz	w8, a0 <inflate_table+0xa0>
  94:	mov	w8, wzr
  98:	mov	w9, #0xc                   	// #12
  9c:	b	164 <inflate_table+0x164>
  a0:	ldrh	w8, [sp, #54]
  a4:	cbz	w8, b4 <inflate_table+0xb4>
  a8:	mov	w8, wzr
  ac:	mov	w9, #0xb                   	// #11
  b0:	b	164 <inflate_table+0x164>
  b4:	ldrh	w8, [sp, #52]
  b8:	cbz	w8, c8 <inflate_table+0xc8>
  bc:	mov	w8, wzr
  c0:	mov	w9, #0xa                   	// #10
  c4:	b	164 <inflate_table+0x164>
  c8:	ldrh	w8, [sp, #50]
  cc:	cbz	w8, dc <inflate_table+0xdc>
  d0:	mov	w8, wzr
  d4:	mov	w9, #0x9                   	// #9
  d8:	b	164 <inflate_table+0x164>
  dc:	ldrh	w8, [sp, #48]
  e0:	cbz	w8, f0 <inflate_table+0xf0>
  e4:	mov	w8, wzr
  e8:	mov	w9, #0x8                   	// #8
  ec:	b	164 <inflate_table+0x164>
  f0:	ldrh	w8, [sp, #46]
  f4:	cbz	w8, 104 <inflate_table+0x104>
  f8:	mov	w8, wzr
  fc:	mov	w9, #0x7                   	// #7
 100:	b	164 <inflate_table+0x164>
 104:	ldrh	w8, [sp, #44]
 108:	cbz	w8, 118 <inflate_table+0x118>
 10c:	mov	w8, wzr
 110:	mov	w9, #0x6                   	// #6
 114:	b	164 <inflate_table+0x164>
 118:	ldrh	w8, [sp, #42]
 11c:	cbz	w8, 12c <inflate_table+0x12c>
 120:	mov	w8, wzr
 124:	mov	w9, #0x5                   	// #5
 128:	b	164 <inflate_table+0x164>
 12c:	ldrh	w8, [sp, #40]
 130:	cbz	w8, 140 <inflate_table+0x140>
 134:	mov	w8, wzr
 138:	mov	w9, #0x4                   	// #4
 13c:	b	164 <inflate_table+0x164>
 140:	ldrh	w8, [sp, #38]
 144:	cbz	w8, 154 <inflate_table+0x154>
 148:	mov	w8, wzr
 14c:	mov	w9, #0x3                   	// #3
 150:	b	164 <inflate_table+0x164>
 154:	ldrh	w8, [sp, #36]
 158:	cbz	w8, 5c4 <inflate_table+0x5c4>
 15c:	mov	w8, wzr
 160:	mov	w9, #0x2                   	// #2
 164:	cmp	w11, w9
 168:	mov	w10, #0x1                   	// #1
 16c:	csel	w11, w9, w11, hi  // hi = pmore
 170:	add	x12, sp, #0x20
 174:	ldrh	w13, [x12, x10, lsl #1]
 178:	cbnz	w13, 18c <inflate_table+0x18c>
 17c:	add	x10, x10, #0x1
 180:	cmp	x9, x10
 184:	b.ne	174 <inflate_table+0x174>  // b.any
 188:	mov	w10, w9
 18c:	ldrh	w12, [sp, #34]
 190:	cmp	w11, w10
 194:	csel	w11, w10, w11, cc  // cc = lo, ul, last
 198:	cmp	w12, #0x2
 19c:	b.hi	318 <inflate_table+0x318>  // b.pmore
 1a0:	ldrh	w13, [sp, #36]
 1a4:	mov	w15, #0x4                   	// #4
 1a8:	add	w14, w13, w12, lsl #1
 1ac:	subs	w15, w15, w14
 1b0:	b.mi	318 <inflate_table+0x318>  // b.first
 1b4:	ldrh	w14, [sp, #38]
 1b8:	lsl	w15, w15, #1
 1bc:	subs	w16, w15, w14
 1c0:	b.mi	318 <inflate_table+0x318>  // b.first
 1c4:	ldrh	w15, [sp, #40]
 1c8:	lsl	w16, w16, #1
 1cc:	subs	w17, w16, w15
 1d0:	b.mi	318 <inflate_table+0x318>  // b.first
 1d4:	ldrh	w16, [sp, #42]
 1d8:	lsl	w17, w17, #1
 1dc:	subs	w18, w17, w16
 1e0:	b.mi	318 <inflate_table+0x318>  // b.first
 1e4:	ldrh	w17, [sp, #44]
 1e8:	lsl	w18, w18, #1
 1ec:	subs	w6, w18, w17
 1f0:	b.mi	318 <inflate_table+0x318>  // b.first
 1f4:	ldrh	w18, [sp, #46]
 1f8:	lsl	w6, w6, #1
 1fc:	subs	w7, w6, w18
 200:	b.mi	318 <inflate_table+0x318>  // b.first
 204:	ldrh	w6, [sp, #48]
 208:	lsl	w7, w7, #1
 20c:	subs	w19, w7, w6
 210:	b.mi	318 <inflate_table+0x318>  // b.first
 214:	ldrh	w7, [sp, #50]
 218:	lsl	w19, w19, #1
 21c:	subs	w20, w19, w7
 220:	b.mi	318 <inflate_table+0x318>  // b.first
 224:	ldrh	w19, [sp, #52]
 228:	lsl	w20, w20, #1
 22c:	subs	w21, w20, w19
 230:	b.mi	318 <inflate_table+0x318>  // b.first
 234:	ldrh	w20, [sp, #54]
 238:	lsl	w21, w21, #1
 23c:	subs	w22, w21, w20
 240:	b.mi	318 <inflate_table+0x318>  // b.first
 244:	ldrh	w21, [sp, #56]
 248:	lsl	w22, w22, #1
 24c:	subs	w23, w22, w21
 250:	b.mi	318 <inflate_table+0x318>  // b.first
 254:	ldrh	w22, [sp, #58]
 258:	lsl	w23, w23, #1
 25c:	subs	w24, w23, w22
 260:	b.mi	318 <inflate_table+0x318>  // b.first
 264:	ldrh	w23, [sp, #60]
 268:	lsl	w24, w24, #1
 26c:	subs	w24, w24, w23
 270:	b.mi	318 <inflate_table+0x318>  // b.first
 274:	lsl	w24, w24, #1
 278:	subs	w8, w24, w8
 27c:	b.mi	318 <inflate_table+0x318>  // b.first
 280:	cbz	w8, 294 <inflate_table+0x294>
 284:	mov	w8, #0xffffffff            	// #-1
 288:	cbz	w0, 31c <inflate_table+0x31c>
 28c:	cmp	w9, #0x1
 290:	b.ne	31c <inflate_table+0x31c>  // b.any
 294:	add	w8, w13, w12
 298:	strh	w8, [sp, #6]
 29c:	add	w8, w14, w8
 2a0:	strh	w8, [sp, #8]
 2a4:	add	w8, w15, w8
 2a8:	strh	w8, [sp, #10]
 2ac:	add	w8, w16, w8
 2b0:	strh	w8, [sp, #12]
 2b4:	add	w8, w17, w8
 2b8:	strh	w8, [sp, #14]
 2bc:	add	w8, w18, w8
 2c0:	strh	w8, [sp, #16]
 2c4:	add	w8, w6, w8
 2c8:	strh	w8, [sp, #18]
 2cc:	add	w8, w7, w8
 2d0:	strh	w8, [sp, #20]
 2d4:	add	w8, w19, w8
 2d8:	strh	w8, [sp, #22]
 2dc:	add	w8, w20, w8
 2e0:	strh	w8, [sp, #24]
 2e4:	add	w8, w21, w8
 2e8:	strh	w8, [sp, #26]
 2ec:	add	w8, w22, w8
 2f0:	strh	w8, [sp, #28]
 2f4:	add	w8, w23, w8
 2f8:	strh	wzr, [sp, #2]
 2fc:	strh	w12, [sp, #4]
 300:	strh	w8, [sp, #30]
 304:	cbz	w2, 368 <inflate_table+0x368>
 308:	mov	x8, xzr
 30c:	mov	w12, w2
 310:	mov	x13, sp
 314:	b	348 <inflate_table+0x348>
 318:	mov	w8, #0xffffffff            	// #-1
 31c:	ldp	x20, x19, [sp, #128]
 320:	ldp	x22, x21, [sp, #112]
 324:	ldp	x24, x23, [sp, #96]
 328:	ldp	x26, x25, [sp, #80]
 32c:	ldp	x28, x27, [sp, #64]
 330:	mov	w0, w8
 334:	add	sp, sp, #0x90
 338:	ret
 33c:	add	x8, x8, #0x1
 340:	cmp	x12, x8
 344:	b.eq	368 <inflate_table+0x368>  // b.none
 348:	ldrh	w14, [x1, x8, lsl #1]
 34c:	cbz	x14, 33c <inflate_table+0x33c>
 350:	lsl	x14, x14, #1
 354:	ldrh	w15, [x13, x14]
 358:	add	w16, w15, #0x1
 35c:	strh	w16, [x13, x14]
 360:	strh	w8, [x5, x15, lsl #1]
 364:	b	33c <inflate_table+0x33c>
 368:	cbz	w0, 3a0 <inflate_table+0x3a0>
 36c:	cmp	w0, #0x1
 370:	b.ne	3b8 <inflate_table+0x3b8>  // b.any
 374:	cmp	w11, #0x9
 378:	mov	w8, #0x1                   	// #1
 37c:	b.hi	31c <inflate_table+0x31c>  // b.pmore
 380:	adrp	x14, 0 <inflate_table>
 384:	adrp	x15, 0 <inflate_table>
 388:	mov	w13, wzr
 38c:	mov	w12, #0x101                 	// #257
 390:	add	x14, x14, #0x0
 394:	add	x15, x15, #0x0
 398:	mov	w16, #0x1                   	// #1
 39c:	b	3f0 <inflate_table+0x3f0>
 3a0:	mov	w13, wzr
 3a4:	mov	w16, wzr
 3a8:	mov	w12, #0x14                  	// #20
 3ac:	mov	x15, x5
 3b0:	mov	x14, x5
 3b4:	b	3f0 <inflate_table+0x3f0>
 3b8:	cmp	w0, #0x2
 3bc:	adrp	x14, 0 <inflate_table>
 3c0:	adrp	x15, 0 <inflate_table>
 3c4:	mov	w12, wzr
 3c8:	add	x14, x14, #0x0
 3cc:	cset	w13, eq  // eq = none
 3d0:	add	x15, x15, #0x0
 3d4:	b.ne	3ec <inflate_table+0x3ec>  // b.any
 3d8:	cmp	w11, #0x9
 3dc:	mov	w16, w12
 3e0:	b.ls	3f0 <inflate_table+0x3f0>  // b.plast
 3e4:	mov	w8, #0x1                   	// #1
 3e8:	b	31c <inflate_table+0x31c>
 3ec:	mov	w16, w12
 3f0:	ldr	x6, [x3]
 3f4:	mov	w7, #0x1                   	// #1
 3f8:	lsl	w17, w7, w11
 3fc:	mov	w18, wzr
 400:	mov	w2, wzr
 404:	mov	w0, wzr
 408:	sub	w19, w17, #0x1
 40c:	mov	w8, #0xffffffff            	// #-1
 410:	add	x20, sp, #0x20
 414:	mov	w22, w11
 418:	lsl	w21, w7, w22
 41c:	ldrh	w23, [x5, w18, uxtw #1]
 420:	add	w22, w23, #0x1
 424:	cmp	w22, w12
 428:	sub	w22, w10, w2
 42c:	b.cs	438 <inflate_table+0x438>  // b.hs, b.nlast
 430:	mov	w24, wzr
 434:	b	45c <inflate_table+0x45c>
 438:	cmp	w12, w23
 43c:	b.ls	44c <inflate_table+0x44c>  // b.plast
 440:	mov	w23, wzr
 444:	mov	w24, #0x60                  	// #96
 448:	b	45c <inflate_table+0x45c>
 44c:	sub	w23, w23, w12
 450:	lsl	x23, x23, #1
 454:	ldrb	w24, [x14, x23]
 458:	ldrh	w23, [x15, x23]
 45c:	lsl	w25, w7, w22
 460:	lsr	w26, w0, w2
 464:	sub	w26, w26, w25
 468:	mov	w27, w21
 46c:	add	w28, w26, w27
 470:	subs	w27, w27, w25
 474:	add	x28, x6, w28, uxtw #2
 478:	strb	w24, [x28]
 47c:	strb	w22, [x28, #1]
 480:	strh	w23, [x28, #2]
 484:	b.ne	46c <inflate_table+0x46c>  // b.any
 488:	sub	w23, w10, #0x1
 48c:	lsl	w24, w7, w23
 490:	mov	w23, w24
 494:	tst	w24, w0
 498:	lsr	w24, w24, #1
 49c:	b.ne	490 <inflate_table+0x490>  // b.any
 4a0:	sub	w24, w23, #0x1
 4a4:	mov	w25, w10
 4a8:	and	w0, w24, w0
 4ac:	lsl	x24, x25, #1
 4b0:	ldrh	w25, [x20, x24]
 4b4:	add	w0, w0, w23
 4b8:	cmp	w23, #0x0
 4bc:	csel	w0, wzr, w0, eq  // eq = none
 4c0:	sub	w23, w25, #0x1
 4c4:	add	w18, w18, #0x1
 4c8:	tst	w23, #0xffff
 4cc:	strh	w23, [x20, x24]
 4d0:	b.ne	4e4 <inflate_table+0x4e4>  // b.any
 4d4:	cmp	w10, w9
 4d8:	b.eq	594 <inflate_table+0x594>  // b.none
 4dc:	ldrh	w10, [x5, w18, uxtw #1]
 4e0:	ldrh	w10, [x1, x10, lsl #1]
 4e4:	cmp	w10, w11
 4e8:	b.ls	41c <inflate_table+0x41c>  // b.plast
 4ec:	and	w23, w0, w19
 4f0:	cmp	w23, w8
 4f4:	b.eq	41c <inflate_table+0x41c>  // b.none
 4f8:	cmp	w2, #0x0
 4fc:	csel	w2, w11, w2, eq  // eq = none
 500:	sub	w22, w10, w2
 504:	cmp	w10, w9
 508:	lsl	w8, w7, w22
 50c:	b.cs	544 <inflate_table+0x544>  // b.hs, b.nlast
 510:	sub	w22, w9, w2
 514:	mov	w24, w10
 518:	ldrh	w25, [x20, x24, lsl #1]
 51c:	sub	w8, w8, w25
 520:	cmp	w8, #0x1
 524:	b.lt	53c <inflate_table+0x53c>  // b.tstop
 528:	add	x24, x24, #0x1
 52c:	cmp	w24, w9
 530:	lsl	w8, w8, #1
 534:	b.cc	518 <inflate_table+0x518>  // b.lo, b.ul, b.last
 538:	b	540 <inflate_table+0x540>
 53c:	sub	w22, w24, w2
 540:	lsl	w8, w7, w22
 544:	add	w17, w8, w17
 548:	cmp	w17, #0x354
 54c:	cset	w8, hi  // hi = pmore
 550:	cmp	w17, #0x250
 554:	and	w25, w16, w8
 558:	cset	w24, hi  // hi = pmore
 55c:	mov	w8, #0x1                   	// #1
 560:	tbnz	w25, #0, 31c <inflate_table+0x31c>
 564:	and	w24, w13, w24
 568:	tbnz	w24, #0, 31c <inflate_table+0x31c>
 56c:	ldr	x8, [x3]
 570:	add	x6, x6, w21, uxtw #2
 574:	add	x21, x8, w23, uxtw #2
 578:	sub	w8, w6, w8
 57c:	lsr	w8, w8, #2
 580:	strb	w22, [x21]
 584:	strb	w11, [x21, #1]
 588:	strh	w8, [x21, #2]
 58c:	mov	w8, w23
 590:	b	418 <inflate_table+0x418>
 594:	cbz	w0, 5ac <inflate_table+0x5ac>
 598:	add	x8, x6, w0, uxtw #2
 59c:	mov	w9, #0x40                  	// #64
 5a0:	strb	w9, [x8]
 5a4:	strb	w22, [x8, #1]
 5a8:	strh	wzr, [x8, #2]
 5ac:	ldr	x9, [x3]
 5b0:	mov	w8, wzr
 5b4:	add	x9, x9, w17, uxtw #2
 5b8:	str	x9, [x3]
 5bc:	str	w11, [x4]
 5c0:	b	31c <inflate_table+0x31c>
 5c4:	ldrh	w8, [sp, #34]
 5c8:	cbz	w8, 5e4 <inflate_table+0x5e4>
 5cc:	cmp	w11, #0x0
 5d0:	mov	w8, wzr
 5d4:	mov	w9, #0x1                   	// #1
 5d8:	cset	w11, ne  // ne = any
 5dc:	mov	w10, #0x1                   	// #1
 5e0:	b	18c <inflate_table+0x18c>
 5e4:	ldr	x9, [x3]
 5e8:	mov	w10, #0x140                 	// #320
 5ec:	add	x11, x9, #0x4
 5f0:	str	x11, [x3]
 5f4:	str	w10, [x9]
 5f8:	ldr	x9, [x3]
 5fc:	mov	w11, #0x1                   	// #1
 600:	add	x12, x9, #0x4
 604:	str	x12, [x3]
 608:	str	w10, [x9]
 60c:	b	5bc <inflate_table+0x5bc>

trees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_tr_init>:
       0:	add	x8, x0, #0xd4
       4:	str	x8, [x0, #2904]
       8:	adrp	x8, 0 <_tr_init>
       c:	add	x8, x8, #0x0
      10:	str	x8, [x0, #2920]
      14:	add	x8, x0, #0x9c8
      18:	str	x8, [x0, #2928]
      1c:	adrp	x8, 0 <_tr_init>
      20:	add	x8, x8, #0x0
      24:	str	x8, [x0, #2944]
      28:	add	x8, x0, #0xabc
      2c:	str	x8, [x0, #2952]
      30:	adrp	x8, 0 <_tr_init>
      34:	add	x8, x8, #0x0
      38:	strh	wzr, [x0, #5936]
      3c:	str	x8, [x0, #2968]
      40:	str	wzr, [x0, #5940]
      44:	b	48 <init_block>

0000000000000048 <init_block>:
      48:	mov	x8, xzr
      4c:	add	x9, x0, x8
      50:	add	x8, x8, #0x8
      54:	cmp	x8, #0x478
      58:	strh	wzr, [x9, #212]
      5c:	strh	wzr, [x9, #216]
      60:	b.ne	4c <init_block+0x4>  // b.any
      64:	mov	w8, #0x1                   	// #1
      68:	movi	v0.2d, #0x0
      6c:	strh	w8, [x0, #1236]
      70:	mov	w8, #0x1718                	// #5912
      74:	strh	wzr, [x0, #2504]
      78:	strh	wzr, [x0, #2508]
      7c:	strh	wzr, [x0, #2512]
      80:	strh	wzr, [x0, #2516]
      84:	strh	wzr, [x0, #2520]
      88:	strh	wzr, [x0, #2524]
      8c:	strh	wzr, [x0, #2528]
      90:	strh	wzr, [x0, #2532]
      94:	strh	wzr, [x0, #2536]
      98:	strh	wzr, [x0, #2540]
      9c:	strh	wzr, [x0, #2544]
      a0:	strh	wzr, [x0, #2548]
      a4:	strh	wzr, [x0, #2552]
      a8:	strh	wzr, [x0, #2556]
      ac:	strh	wzr, [x0, #2560]
      b0:	strh	wzr, [x0, #2564]
      b4:	strh	wzr, [x0, #2568]
      b8:	strh	wzr, [x0, #2572]
      bc:	strh	wzr, [x0, #2576]
      c0:	strh	wzr, [x0, #2580]
      c4:	strh	wzr, [x0, #2584]
      c8:	strh	wzr, [x0, #2588]
      cc:	strh	wzr, [x0, #2592]
      d0:	strh	wzr, [x0, #2596]
      d4:	strh	wzr, [x0, #2600]
      d8:	strh	wzr, [x0, #2604]
      dc:	strh	wzr, [x0, #2608]
      e0:	strh	wzr, [x0, #2612]
      e4:	strh	wzr, [x0, #2616]
      e8:	strh	wzr, [x0, #2620]
      ec:	strh	wzr, [x0, #2748]
      f0:	strh	wzr, [x0, #2752]
      f4:	strh	wzr, [x0, #2756]
      f8:	strh	wzr, [x0, #2760]
      fc:	strh	wzr, [x0, #2764]
     100:	strh	wzr, [x0, #2768]
     104:	strh	wzr, [x0, #2772]
     108:	strh	wzr, [x0, #2776]
     10c:	strh	wzr, [x0, #2780]
     110:	strh	wzr, [x0, #2784]
     114:	strh	wzr, [x0, #2788]
     118:	strh	wzr, [x0, #2792]
     11c:	strh	wzr, [x0, #2796]
     120:	strh	wzr, [x0, #2800]
     124:	strh	wzr, [x0, #2804]
     128:	strh	wzr, [x0, #2808]
     12c:	strh	wzr, [x0, #2812]
     130:	strh	wzr, [x0, #2816]
     134:	strh	wzr, [x0, #2820]
     138:	str	wzr, [x0, #5900]
     13c:	str	q0, [x0, x8]
     140:	str	wzr, [x0, #5928]
     144:	ret

0000000000000148 <_tr_stored_block>:
     148:	stp	x29, x30, [sp, #-32]!
     14c:	stp	x20, x19, [sp, #16]
     150:	ldr	w10, [x0, #5940]
     154:	ldrh	w8, [x0, #5936]
     158:	and	w9, w3, #0xffff
     15c:	mov	x19, x2
     160:	lsl	w11, w9, w10
     164:	mov	x20, x0
     168:	orr	w8, w8, w11
     16c:	cmp	w10, #0xe
     170:	mov	x29, sp
     174:	strh	w8, [x0, #5936]
     178:	b.lt	1e8 <_tr_stored_block+0xa0>  // b.tstop
     17c:	ldr	x10, [x20, #40]
     180:	ldr	x11, [x20, #16]
     184:	add	x12, x10, #0x1
     188:	str	x12, [x20, #40]
     18c:	mov	w12, #0x1730                	// #5936
     190:	strb	w8, [x11, x10]
     194:	add	x12, x20, x12
     198:	ldr	x8, [x20, #40]
     19c:	ldrb	w10, [x12, #1]
     1a0:	ldr	x11, [x20, #16]
     1a4:	add	x12, x8, #0x1
     1a8:	str	x12, [x20, #40]
     1ac:	strb	w10, [x11, x8]
     1b0:	ldr	w10, [x20, #5940]
     1b4:	mov	w8, #0x10                  	// #16
     1b8:	sub	w8, w8, w10
     1bc:	lsr	w8, w9, w8
     1c0:	strh	w8, [x20, #5936]
     1c4:	sub	w9, w10, #0xd
     1c8:	cmp	w9, #0x9
     1cc:	str	w9, [x20, #5940]
     1d0:	b.ge	1f8 <_tr_stored_block+0xb0>  // b.tcont
     1d4:	cmp	w9, #0x1
     1d8:	b.lt	22c <_tr_stored_block+0xe4>  // b.tstop
     1dc:	ldr	x9, [x20, #40]
     1e0:	ldr	x10, [x20, #16]
     1e4:	b	21c <_tr_stored_block+0xd4>
     1e8:	add	w9, w10, #0x3
     1ec:	cmp	w9, #0x9
     1f0:	str	w9, [x20, #5940]
     1f4:	b.lt	1d4 <_tr_stored_block+0x8c>  // b.tstop
     1f8:	ldr	x9, [x20, #40]
     1fc:	ldr	x10, [x20, #16]
     200:	add	x11, x9, #0x1
     204:	str	x11, [x20, #40]
     208:	strb	w8, [x10, x9]
     20c:	mov	w8, #0x1731                	// #5937
     210:	ldr	x9, [x20, #40]
     214:	ldr	x10, [x20, #16]
     218:	ldrb	w8, [x20, x8]
     21c:	add	x11, x9, #0x1
     220:	add	x9, x10, x9
     224:	str	x11, [x20, #40]
     228:	strb	w8, [x9]
     22c:	ldr	x8, [x20, #40]
     230:	ldr	x9, [x20, #16]
     234:	strh	wzr, [x20, #5936]
     238:	str	wzr, [x20, #5940]
     23c:	add	x10, x8, #0x1
     240:	str	x10, [x20, #40]
     244:	strb	w19, [x9, x8]
     248:	ldr	x8, [x20, #40]
     24c:	ldr	x9, [x20, #16]
     250:	ubfx	x10, x19, #8, #24
     254:	mov	x2, x19
     258:	add	x11, x8, #0x1
     25c:	str	x11, [x20, #40]
     260:	strb	w10, [x9, x8]
     264:	ldr	x8, [x20, #40]
     268:	ldr	x9, [x20, #16]
     26c:	mvn	w10, w19
     270:	add	x11, x8, #0x1
     274:	str	x11, [x20, #40]
     278:	strb	w10, [x9, x8]
     27c:	ldr	x8, [x20, #40]
     280:	ldr	x9, [x20, #16]
     284:	lsr	w10, w10, #8
     288:	add	x11, x8, #0x1
     28c:	str	x11, [x20, #40]
     290:	strb	w10, [x9, x8]
     294:	ldr	x8, [x20, #16]
     298:	ldr	x9, [x20, #40]
     29c:	add	x0, x8, x9
     2a0:	bl	0 <memcpy>
     2a4:	ldr	x8, [x20, #40]
     2a8:	add	x8, x8, x19
     2ac:	str	x8, [x20, #40]
     2b0:	ldp	x20, x19, [sp, #16]
     2b4:	ldp	x29, x30, [sp], #32
     2b8:	ret

00000000000002bc <_tr_flush_bits>:
     2bc:	ldr	w8, [x0, #5940]
     2c0:	cmp	w8, #0x10
     2c4:	b.ne	30c <_tr_flush_bits+0x50>  // b.any
     2c8:	mov	w9, #0x1730                	// #5936
     2cc:	ldr	x11, [x0, #40]
     2d0:	add	x9, x0, x9
     2d4:	ldr	x10, [x0, #16]
     2d8:	ldrb	w12, [x9]
     2dc:	add	x13, x11, #0x1
     2e0:	str	x13, [x0, #40]
     2e4:	mov	w8, wzr
     2e8:	strb	w12, [x10, x11]
     2ec:	ldr	x10, [x0, #40]
     2f0:	ldrb	w9, [x9, #1]
     2f4:	ldr	x11, [x0, #16]
     2f8:	add	x12, x10, #0x1
     2fc:	str	x12, [x0, #40]
     300:	strb	w9, [x11, x10]
     304:	strh	wzr, [x0, #5936]
     308:	b	344 <_tr_flush_bits+0x88>
     30c:	cmp	w8, #0x8
     310:	b.lt	348 <_tr_flush_bits+0x8c>  // b.tstop
     314:	mov	w8, #0x1730                	// #5936
     318:	ldr	x10, [x0, #40]
     31c:	add	x8, x0, x8
     320:	ldr	x9, [x0, #16]
     324:	ldrb	w11, [x8]
     328:	add	x12, x10, #0x1
     32c:	str	x12, [x0, #40]
     330:	strb	w11, [x9, x10]
     334:	ldrb	w8, [x8, #1]
     338:	ldr	w9, [x0, #5940]
     33c:	strh	w8, [x0, #5936]
     340:	sub	w8, w9, #0x8
     344:	str	w8, [x0, #5940]
     348:	ret

000000000000034c <_tr_align>:
     34c:	ldr	w10, [x0, #5940]
     350:	ldrh	w8, [x0, #5936]
     354:	mov	w9, #0x2                   	// #2
     358:	lsl	w11, w9, w10
     35c:	orr	w8, w8, w11
     360:	cmp	w10, #0xe
     364:	strh	w8, [x0, #5936]
     368:	b.lt	40c <_tr_align+0xc0>  // b.tstop
     36c:	ldr	x10, [x0, #40]
     370:	ldr	x11, [x0, #16]
     374:	add	x12, x10, #0x1
     378:	str	x12, [x0, #40]
     37c:	mov	w12, #0x1730                	// #5936
     380:	strb	w8, [x11, x10]
     384:	add	x12, x0, x12
     388:	ldr	x8, [x0, #40]
     38c:	ldrb	w10, [x12, #1]
     390:	ldr	x11, [x0, #16]
     394:	add	x12, x8, #0x1
     398:	str	x12, [x0, #40]
     39c:	strb	w10, [x11, x8]
     3a0:	ldr	w10, [x0, #5940]
     3a4:	mov	w8, #0x10                  	// #16
     3a8:	sub	w8, w8, w10
     3ac:	lsr	w8, w9, w8
     3b0:	strh	w8, [x0, #5936]
     3b4:	sub	w9, w10, #0xd
     3b8:	cmp	w9, #0xa
     3bc:	str	w9, [x0, #5940]
     3c0:	b.ge	41c <_tr_align+0xd0>  // b.tcont
     3c4:	add	w9, w9, #0x7
     3c8:	cmp	w9, #0x10
     3cc:	str	w9, [x0, #5940]
     3d0:	b.eq	46c <_tr_align+0x120>  // b.none
     3d4:	cmp	w9, #0x8
     3d8:	b.lt	4ac <_tr_align+0x160>  // b.tstop
     3dc:	ldr	x9, [x0, #40]
     3e0:	ldr	x10, [x0, #16]
     3e4:	mov	w11, #0x1730                	// #5936
     3e8:	add	x11, x0, x11
     3ec:	add	x12, x9, #0x1
     3f0:	str	x12, [x0, #40]
     3f4:	strb	w8, [x10, x9]
     3f8:	ldr	w9, [x0, #5940]
     3fc:	ldrb	w8, [x11, #1]
     400:	sub	w9, w9, #0x8
     404:	strh	w8, [x0, #5936]
     408:	b	4a8 <_tr_align+0x15c>
     40c:	add	w9, w10, #0x3
     410:	cmp	w9, #0xa
     414:	str	w9, [x0, #5940]
     418:	b.lt	3c4 <_tr_align+0x78>  // b.tstop
     41c:	ldr	x9, [x0, #40]
     420:	ldr	x10, [x0, #16]
     424:	add	x11, x9, #0x1
     428:	str	x11, [x0, #40]
     42c:	mov	w11, #0x1730                	// #5936
     430:	strb	w8, [x10, x9]
     434:	add	x11, x0, x11
     438:	ldr	x8, [x0, #40]
     43c:	ldrb	w9, [x11, #1]
     440:	ldr	x10, [x0, #16]
     444:	add	x11, x8, #0x1
     448:	str	x11, [x0, #40]
     44c:	strb	w9, [x10, x8]
     450:	ldr	w8, [x0, #5940]
     454:	strh	wzr, [x0, #5936]
     458:	sub	w9, w8, #0x9
     45c:	mov	w8, wzr
     460:	cmp	w9, #0x10
     464:	str	w9, [x0, #5940]
     468:	b.ne	3d4 <_tr_align+0x88>  // b.any
     46c:	ldr	x10, [x0, #40]
     470:	ldr	x11, [x0, #16]
     474:	mov	w12, #0x1730                	// #5936
     478:	add	x12, x0, x12
     47c:	add	x13, x10, #0x1
     480:	str	x13, [x0, #40]
     484:	strb	w8, [x11, x10]
     488:	ldr	x8, [x0, #40]
     48c:	ldrb	w10, [x12, #1]
     490:	ldr	x11, [x0, #16]
     494:	mov	w9, wzr
     498:	add	x12, x8, #0x1
     49c:	str	x12, [x0, #40]
     4a0:	strb	w10, [x11, x8]
     4a4:	strh	wzr, [x0, #5936]
     4a8:	str	w9, [x0, #5940]
     4ac:	ret

00000000000004b0 <_tr_flush_block>:
     4b0:	stp	x29, x30, [sp, #-64]!
     4b4:	stp	x22, x21, [sp, #32]
     4b8:	stp	x20, x19, [sp, #48]
     4bc:	ldr	w8, [x0, #196]
     4c0:	mov	w20, w3
     4c4:	mov	x21, x2
     4c8:	mov	x19, x0
     4cc:	cmp	w8, #0x1
     4d0:	mov	x22, x1
     4d4:	str	x23, [sp, #16]
     4d8:	mov	x29, sp
     4dc:	b.lt	860 <_tr_flush_block+0x3b0>  // b.tstop
     4e0:	ldr	x8, [x19]
     4e4:	ldr	w9, [x8, #88]
     4e8:	cmp	w9, #0x2
     4ec:	b.ne	5b0 <_tr_flush_block+0x100>  // b.any
     4f0:	ldrh	w9, [x19, #212]
     4f4:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     4f8:	ldrh	w9, [x19, #216]
     4fc:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     500:	ldrh	w9, [x19, #220]
     504:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     508:	ldrh	w9, [x19, #224]
     50c:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     510:	ldrh	w9, [x19, #228]
     514:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     518:	ldrh	w9, [x19, #232]
     51c:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     520:	ldrh	w9, [x19, #236]
     524:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     528:	ldrh	w9, [x19, #268]
     52c:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     530:	ldrh	w9, [x19, #272]
     534:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     538:	ldrh	w9, [x19, #276]
     53c:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     540:	ldrh	w9, [x19, #280]
     544:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     548:	ldrh	w9, [x19, #284]
     54c:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     550:	ldrh	w9, [x19, #288]
     554:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     558:	ldrh	w9, [x19, #292]
     55c:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     560:	ldrh	w9, [x19, #296]
     564:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     568:	ldrh	w9, [x19, #300]
     56c:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     570:	ldrh	w9, [x19, #304]
     574:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     578:	ldrh	w9, [x19, #308]
     57c:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     580:	ldrh	w9, [x19, #312]
     584:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     588:	ldrh	w9, [x19, #324]
     58c:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     590:	ldrh	w9, [x19, #328]
     594:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     598:	ldrh	w9, [x19, #332]
     59c:	cbnz	w9, 5a8 <_tr_flush_block+0xf8>
     5a0:	ldrh	w9, [x19, #336]
     5a4:	cbz	w9, dc4 <_tr_flush_block+0x914>
     5a8:	mov	w9, wzr
     5ac:	str	w9, [x8, #88]
     5b0:	add	x1, x19, #0xb58
     5b4:	mov	x0, x19
     5b8:	bl	e04 <build_tree>
     5bc:	add	x1, x19, #0xb70
     5c0:	mov	x0, x19
     5c4:	bl	e04 <build_tree>
     5c8:	ldr	w10, [x19, #2912]
     5cc:	ldrh	w9, [x19, #214]
     5d0:	mov	w8, #0xffff                	// #65535
     5d4:	add	w14, w10, #0x1
     5d8:	add	x11, x19, w14, sxtw #2
     5dc:	strh	w8, [x11, #214]
     5e0:	tbnz	w10, #31, 708 <_tr_flush_block+0x258>
     5e4:	cmp	w9, #0x0
     5e8:	mov	w10, #0x3                   	// #3
     5ec:	mov	w16, #0x7                   	// #7
     5f0:	mov	w17, #0x8a                  	// #138
     5f4:	mov	w1, wzr
     5f8:	add	x11, x19, #0xafc
     5fc:	add	x12, x19, #0xb04
     600:	add	x13, x19, #0xb00
     604:	mov	w14, w14
     608:	add	x15, x19, #0xda
     60c:	mov	w3, #0xffffffff            	// #-1
     610:	cinc	w18, w10, ne  // ne = any
     614:	csel	w0, w17, w16, eq  // eq = none
     618:	mov	w16, #0x6                   	// #6
     61c:	b	638 <_tr_flush_block+0x188>
     620:	mov	w17, w3
     624:	subs	x14, x14, #0x1
     628:	add	x15, x15, #0x4
     62c:	mov	w1, w2
     630:	mov	w3, w17
     634:	b.eq	708 <_tr_flush_block+0x258>  // b.none
     638:	mov	w17, w9
     63c:	ldrh	w9, [x15]
     640:	add	w2, w1, #0x1
     644:	cmp	w2, w0
     648:	b.ge	654 <_tr_flush_block+0x1a4>  // b.tcont
     64c:	cmp	w17, w9
     650:	b.eq	620 <_tr_flush_block+0x170>  // b.none
     654:	cmp	w2, w18
     658:	b.ge	688 <_tr_flush_block+0x1d8>  // b.tcont
     65c:	add	x18, x19, w17, uxtw #2
     660:	ldrh	w1, [x18, #2748]
     664:	add	x0, x18, #0xabc
     668:	add	w18, w1, w2
     66c:	mov	w2, wzr
     670:	strh	w18, [x0]
     674:	cbz	w9, 6bc <_tr_flush_block+0x20c>
     678:	cmp	w17, w9
     67c:	cinc	w0, w16, ne  // ne = any
     680:	cinc	w18, w10, ne  // ne = any
     684:	b	624 <_tr_flush_block+0x174>
     688:	cbz	w17, 6c8 <_tr_flush_block+0x218>
     68c:	cmp	w17, w3
     690:	b.eq	6a4 <_tr_flush_block+0x1f4>  // b.none
     694:	add	x18, x19, w17, uxtw #2
     698:	ldrh	w0, [x18, #2748]
     69c:	add	w0, w0, #0x1
     6a0:	strh	w0, [x18, #2748]
     6a4:	ldrh	w18, [x11]
     6a8:	mov	x0, x11
     6ac:	add	w18, w18, #0x1
     6b0:	mov	w2, wzr
     6b4:	strh	w18, [x0]
     6b8:	cbnz	w9, 678 <_tr_flush_block+0x1c8>
     6bc:	mov	w18, #0x3                   	// #3
     6c0:	mov	w0, #0x8a                  	// #138
     6c4:	b	624 <_tr_flush_block+0x174>
     6c8:	cmp	w1, #0x9
     6cc:	b.gt	6ec <_tr_flush_block+0x23c>
     6d0:	ldrh	w18, [x13]
     6d4:	mov	x0, x13
     6d8:	add	w18, w18, #0x1
     6dc:	mov	w2, wzr
     6e0:	strh	w18, [x0]
     6e4:	cbnz	w9, 678 <_tr_flush_block+0x1c8>
     6e8:	b	6bc <_tr_flush_block+0x20c>
     6ec:	ldrh	w18, [x12]
     6f0:	mov	x0, x12
     6f4:	add	w18, w18, #0x1
     6f8:	mov	w2, wzr
     6fc:	strh	w18, [x0]
     700:	cbnz	w9, 678 <_tr_flush_block+0x1c8>
     704:	b	6bc <_tr_flush_block+0x20c>
     708:	ldr	w10, [x19, #2936]
     70c:	ldrh	w9, [x19, #2506]
     710:	add	w13, w10, #0x1
     714:	add	x11, x19, w13, sxtw #2
     718:	strh	w8, [x11, #2506]
     71c:	tbnz	w10, #31, 844 <_tr_flush_block+0x394>
     720:	cmp	w9, #0x0
     724:	mov	w8, #0x3                   	// #3
     728:	mov	w15, #0x7                   	// #7
     72c:	mov	w16, #0x8a                  	// #138
     730:	mov	w0, wzr
     734:	add	x10, x19, #0xafc
     738:	add	x11, x19, #0xb04
     73c:	add	x12, x19, #0xb00
     740:	mov	w13, w13
     744:	add	x14, x19, #0x9ce
     748:	mov	w2, #0xffffffff            	// #-1
     74c:	cinc	w17, w8, ne  // ne = any
     750:	csel	w18, w16, w15, eq  // eq = none
     754:	mov	w15, #0x6                   	// #6
     758:	b	774 <_tr_flush_block+0x2c4>
     75c:	mov	w16, w2
     760:	subs	x13, x13, #0x1
     764:	add	x14, x14, #0x4
     768:	mov	w0, w1
     76c:	mov	w2, w16
     770:	b.eq	844 <_tr_flush_block+0x394>  // b.none
     774:	mov	w16, w9
     778:	ldrh	w9, [x14]
     77c:	add	w1, w0, #0x1
     780:	cmp	w1, w18
     784:	b.ge	790 <_tr_flush_block+0x2e0>  // b.tcont
     788:	cmp	w16, w9
     78c:	b.eq	75c <_tr_flush_block+0x2ac>  // b.none
     790:	cmp	w1, w17
     794:	b.ge	7c4 <_tr_flush_block+0x314>  // b.tcont
     798:	add	x17, x19, w16, uxtw #2
     79c:	ldrh	w0, [x17, #2748]
     7a0:	add	x18, x17, #0xabc
     7a4:	add	w17, w0, w1
     7a8:	mov	w1, wzr
     7ac:	strh	w17, [x18]
     7b0:	cbz	w9, 7f8 <_tr_flush_block+0x348>
     7b4:	cmp	w16, w9
     7b8:	cinc	w18, w15, ne  // ne = any
     7bc:	cinc	w17, w8, ne  // ne = any
     7c0:	b	760 <_tr_flush_block+0x2b0>
     7c4:	cbz	w16, 804 <_tr_flush_block+0x354>
     7c8:	cmp	w16, w2
     7cc:	b.eq	7e0 <_tr_flush_block+0x330>  // b.none
     7d0:	add	x17, x19, w16, uxtw #2
     7d4:	ldrh	w18, [x17, #2748]
     7d8:	add	w18, w18, #0x1
     7dc:	strh	w18, [x17, #2748]
     7e0:	ldrh	w17, [x10]
     7e4:	mov	x18, x10
     7e8:	add	w17, w17, #0x1
     7ec:	mov	w1, wzr
     7f0:	strh	w17, [x18]
     7f4:	cbnz	w9, 7b4 <_tr_flush_block+0x304>
     7f8:	mov	w17, #0x3                   	// #3
     7fc:	mov	w18, #0x8a                  	// #138
     800:	b	760 <_tr_flush_block+0x2b0>
     804:	cmp	w0, #0x9
     808:	b.gt	828 <_tr_flush_block+0x378>
     80c:	ldrh	w17, [x12]
     810:	mov	x18, x12
     814:	add	w17, w17, #0x1
     818:	mov	w1, wzr
     81c:	strh	w17, [x18]
     820:	cbnz	w9, 7b4 <_tr_flush_block+0x304>
     824:	b	7f8 <_tr_flush_block+0x348>
     828:	ldrh	w17, [x11]
     82c:	mov	x18, x11
     830:	add	w17, w17, #0x1
     834:	mov	w1, wzr
     838:	strh	w17, [x18]
     83c:	cbnz	w9, 7b4 <_tr_flush_block+0x304>
     840:	b	7f8 <_tr_flush_block+0x348>
     844:	add	x1, x19, #0xb88
     848:	mov	x0, x19
     84c:	bl	e04 <build_tree>
     850:	ldrh	w8, [x19, #2810]
     854:	cbz	w8, 874 <_tr_flush_block+0x3c4>
     858:	mov	w8, #0x12                  	// #18
     85c:	b	964 <_tr_flush_block+0x4b4>
     860:	add	x9, x21, #0x5
     864:	mov	w8, wzr
     868:	mov	x11, x9
     86c:	cbnz	x22, 998 <_tr_flush_block+0x4e8>
     870:	b	9c8 <_tr_flush_block+0x518>
     874:	ldrh	w8, [x19, #2754]
     878:	cbz	w8, 884 <_tr_flush_block+0x3d4>
     87c:	mov	w8, #0x11                  	// #17
     880:	b	964 <_tr_flush_block+0x4b4>
     884:	ldrh	w8, [x19, #2806]
     888:	cbz	w8, 894 <_tr_flush_block+0x3e4>
     88c:	mov	w8, #0x10                  	// #16
     890:	b	964 <_tr_flush_block+0x4b4>
     894:	ldrh	w8, [x19, #2758]
     898:	cbz	w8, 8a4 <_tr_flush_block+0x3f4>
     89c:	mov	w8, #0xf                   	// #15
     8a0:	b	964 <_tr_flush_block+0x4b4>
     8a4:	ldrh	w8, [x19, #2802]
     8a8:	cbz	w8, 8b4 <_tr_flush_block+0x404>
     8ac:	mov	w8, #0xe                   	// #14
     8b0:	b	964 <_tr_flush_block+0x4b4>
     8b4:	ldrh	w8, [x19, #2762]
     8b8:	cbz	w8, 8c4 <_tr_flush_block+0x414>
     8bc:	mov	w8, #0xd                   	// #13
     8c0:	b	964 <_tr_flush_block+0x4b4>
     8c4:	ldrh	w8, [x19, #2798]
     8c8:	cbz	w8, 8d4 <_tr_flush_block+0x424>
     8cc:	mov	w8, #0xc                   	// #12
     8d0:	b	964 <_tr_flush_block+0x4b4>
     8d4:	ldrh	w8, [x19, #2766]
     8d8:	cbz	w8, 8e4 <_tr_flush_block+0x434>
     8dc:	mov	w8, #0xb                   	// #11
     8e0:	b	964 <_tr_flush_block+0x4b4>
     8e4:	ldrh	w8, [x19, #2794]
     8e8:	cbz	w8, 8f4 <_tr_flush_block+0x444>
     8ec:	mov	w8, #0xa                   	// #10
     8f0:	b	964 <_tr_flush_block+0x4b4>
     8f4:	ldrh	w8, [x19, #2770]
     8f8:	cbz	w8, 904 <_tr_flush_block+0x454>
     8fc:	mov	w8, #0x9                   	// #9
     900:	b	964 <_tr_flush_block+0x4b4>
     904:	ldrh	w8, [x19, #2790]
     908:	cbz	w8, 914 <_tr_flush_block+0x464>
     90c:	mov	w8, #0x8                   	// #8
     910:	b	964 <_tr_flush_block+0x4b4>
     914:	ldrh	w8, [x19, #2774]
     918:	cbz	w8, 924 <_tr_flush_block+0x474>
     91c:	mov	w8, #0x7                   	// #7
     920:	b	964 <_tr_flush_block+0x4b4>
     924:	ldrh	w8, [x19, #2786]
     928:	cbz	w8, 934 <_tr_flush_block+0x484>
     92c:	mov	w8, #0x6                   	// #6
     930:	b	964 <_tr_flush_block+0x4b4>
     934:	ldrh	w8, [x19, #2778]
     938:	cbz	w8, 944 <_tr_flush_block+0x494>
     93c:	mov	w8, #0x5                   	// #5
     940:	b	964 <_tr_flush_block+0x4b4>
     944:	ldrh	w8, [x19, #2782]
     948:	cbz	w8, 954 <_tr_flush_block+0x4a4>
     94c:	mov	w8, #0x4                   	// #4
     950:	b	964 <_tr_flush_block+0x4b4>
     954:	ldrh	w8, [x19, #2750]
     958:	cmp	w8, #0x0
     95c:	mov	w8, #0x2                   	// #2
     960:	cinc	w8, w8, ne  // ne = any
     964:	ldr	x9, [x19, #5912]
     968:	ldr	x10, [x19, #5920]
     96c:	add	w11, w8, w8, lsl #1
     970:	add	w11, w11, #0x11
     974:	add	x9, x9, x11
     978:	add	x10, x10, #0xa
     97c:	str	x9, [x19, #5912]
     980:	add	x9, x9, #0xa
     984:	lsr	x11, x9, #3
     988:	lsr	x9, x10, #3
     98c:	cmp	x9, x11
     990:	csel	x11, x11, x9, hi  // hi = pmore
     994:	cbz	x22, 9c8 <_tr_flush_block+0x518>
     998:	add	x10, x21, #0x4
     99c:	cmp	x10, x11
     9a0:	b.hi	9c8 <_tr_flush_block+0x518>  // b.pmore
     9a4:	mov	x0, x19
     9a8:	mov	x1, x22
     9ac:	mov	x2, x21
     9b0:	mov	w3, w20
     9b4:	bl	148 <_tr_stored_block>
     9b8:	mov	x0, x19
     9bc:	bl	48 <init_block>
     9c0:	cbnz	w20, d44 <_tr_flush_block+0x894>
     9c4:	b	db0 <_tr_flush_block+0x900>
     9c8:	ldr	w10, [x19, #5940]
     9cc:	cmp	x9, x11
     9d0:	b.eq	a50 <_tr_flush_block+0x5a0>  // b.none
     9d4:	ldr	w9, [x19, #200]
     9d8:	cmp	w9, #0x4
     9dc:	b.eq	a50 <_tr_flush_block+0x5a0>  // b.none
     9e0:	ldrh	w9, [x19, #5936]
     9e4:	add	w11, w20, #0x4
     9e8:	and	w11, w11, #0xffff
     9ec:	lsl	w12, w11, w10
     9f0:	orr	w9, w9, w12
     9f4:	cmp	w10, #0xe
     9f8:	strh	w9, [x19, #5936]
     9fc:	b.lt	af0 <_tr_flush_block+0x640>  // b.tstop
     a00:	ldr	x10, [x19, #40]
     a04:	ldr	x12, [x19, #16]
     a08:	add	x13, x10, #0x1
     a0c:	str	x13, [x19, #40]
     a10:	mov	w13, #0x1730                	// #5936
     a14:	strb	w9, [x12, x10]
     a18:	add	x13, x19, x13
     a1c:	ldr	x9, [x19, #40]
     a20:	ldrb	w10, [x13, #1]
     a24:	ldr	x12, [x19, #16]
     a28:	add	x13, x9, #0x1
     a2c:	str	x13, [x19, #40]
     a30:	strb	w10, [x12, x9]
     a34:	ldr	w10, [x19, #5940]
     a38:	mov	w9, #0x10                  	// #16
     a3c:	sub	w9, w9, w10
     a40:	lsr	w9, w11, w9
     a44:	strh	w9, [x19, #5936]
     a48:	sub	w11, w10, #0xd
     a4c:	b	af4 <_tr_flush_block+0x644>
     a50:	ldrh	w9, [x19, #5936]
     a54:	add	w8, w20, #0x2
     a58:	and	w8, w8, #0xffff
     a5c:	lsl	w11, w8, w10
     a60:	orr	w9, w9, w11
     a64:	cmp	w10, #0xe
     a68:	strh	w9, [x19, #5936]
     a6c:	b.lt	ac0 <_tr_flush_block+0x610>  // b.tstop
     a70:	ldr	x10, [x19, #40]
     a74:	ldr	x11, [x19, #16]
     a78:	add	x12, x10, #0x1
     a7c:	str	x12, [x19, #40]
     a80:	mov	w12, #0x1730                	// #5936
     a84:	strb	w9, [x11, x10]
     a88:	add	x12, x19, x12
     a8c:	ldr	x9, [x19, #40]
     a90:	ldrb	w10, [x12, #1]
     a94:	ldr	x11, [x19, #16]
     a98:	add	x12, x9, #0x1
     a9c:	str	x12, [x19, #40]
     aa0:	strb	w10, [x11, x9]
     aa4:	ldr	w9, [x19, #5940]
     aa8:	mov	w10, #0x10                  	// #16
     aac:	sub	w10, w10, w9
     ab0:	lsr	w8, w8, w10
     ab4:	strh	w8, [x19, #5936]
     ab8:	sub	w8, w9, #0xd
     abc:	b	ac4 <_tr_flush_block+0x614>
     ac0:	add	w8, w10, #0x3
     ac4:	adrp	x1, 0 <_tr_init>
     ac8:	adrp	x2, 0 <_tr_init>
     acc:	str	w8, [x19, #5940]
     ad0:	add	x1, x1, #0x0
     ad4:	add	x2, x2, #0x0
     ad8:	mov	x0, x19
     adc:	bl	16f0 <compress_block>
     ae0:	mov	x0, x19
     ae4:	bl	48 <init_block>
     ae8:	cbnz	w20, d44 <_tr_flush_block+0x894>
     aec:	b	db0 <_tr_flush_block+0x900>
     af0:	add	w11, w10, #0x3
     af4:	ldr	w2, [x19, #2912]
     af8:	mov	w10, #0xff00                	// #65280
     afc:	ldr	w21, [x19, #2936]
     b00:	cmp	w11, #0xc
     b04:	add	w10, w2, w10
     b08:	and	w10, w10, #0xffff
     b0c:	lsl	w12, w10, w11
     b10:	orr	w9, w9, w12
     b14:	str	w11, [x19, #5940]
     b18:	strh	w9, [x19, #5936]
     b1c:	b.lt	b70 <_tr_flush_block+0x6c0>  // b.tstop
     b20:	ldr	x11, [x19, #40]
     b24:	ldr	x12, [x19, #16]
     b28:	add	x13, x11, #0x1
     b2c:	str	x13, [x19, #40]
     b30:	mov	w13, #0x1730                	// #5936
     b34:	strb	w9, [x12, x11]
     b38:	add	x13, x19, x13
     b3c:	ldr	x9, [x19, #40]
     b40:	ldrb	w11, [x13, #1]
     b44:	ldr	x12, [x19, #16]
     b48:	add	x13, x9, #0x1
     b4c:	str	x13, [x19, #40]
     b50:	strb	w11, [x12, x9]
     b54:	ldr	w11, [x19, #5940]
     b58:	mov	w9, #0x10                  	// #16
     b5c:	sub	w9, w9, w11
     b60:	lsr	w9, w10, w9
     b64:	strh	w9, [x19, #5936]
     b68:	sub	w12, w11, #0xb
     b6c:	b	b74 <_tr_flush_block+0x6c4>
     b70:	add	w12, w11, #0x5
     b74:	and	w11, w21, #0xffff
     b78:	lsl	w10, w11, w12
     b7c:	orr	w10, w9, w10
     b80:	cmp	w12, #0xc
     b84:	str	w12, [x19, #5940]
     b88:	strh	w10, [x19, #5936]
     b8c:	b.lt	be0 <_tr_flush_block+0x730>  // b.tstop
     b90:	ldr	x9, [x19, #40]
     b94:	ldr	x12, [x19, #16]
     b98:	add	x13, x9, #0x1
     b9c:	str	x13, [x19, #40]
     ba0:	mov	w13, #0x1730                	// #5936
     ba4:	strb	w10, [x12, x9]
     ba8:	add	x13, x19, x13
     bac:	ldr	x9, [x19, #40]
     bb0:	ldrb	w10, [x13, #1]
     bb4:	ldr	x12, [x19, #16]
     bb8:	add	x13, x9, #0x1
     bbc:	str	x13, [x19, #40]
     bc0:	strb	w10, [x12, x9]
     bc4:	ldr	w9, [x19, #5940]
     bc8:	mov	w10, #0x10                  	// #16
     bcc:	sub	w10, w10, w9
     bd0:	lsr	w10, w11, w10
     bd4:	strh	w10, [x19, #5936]
     bd8:	sub	w12, w9, #0xb
     bdc:	b	be4 <_tr_flush_block+0x734>
     be0:	add	w12, w12, #0x5
     be4:	mov	w11, #0xfffd                	// #65533
     be8:	add	w9, w8, #0x1
     bec:	add	w8, w8, w11
     bf0:	and	w11, w8, #0xffff
     bf4:	lsl	w8, w11, w12
     bf8:	orr	w8, w10, w8
     bfc:	cmp	w12, #0xd
     c00:	str	w12, [x19, #5940]
     c04:	strh	w8, [x19, #5936]
     c08:	b.lt	c5c <_tr_flush_block+0x7ac>  // b.tstop
     c0c:	ldr	x10, [x19, #40]
     c10:	ldr	x12, [x19, #16]
     c14:	add	x13, x10, #0x1
     c18:	str	x13, [x19, #40]
     c1c:	mov	w13, #0x1730                	// #5936
     c20:	strb	w8, [x12, x10]
     c24:	add	x13, x19, x13
     c28:	ldr	x8, [x19, #40]
     c2c:	ldrb	w10, [x13, #1]
     c30:	ldr	x12, [x19, #16]
     c34:	add	x13, x8, #0x1
     c38:	str	x13, [x19, #40]
     c3c:	strb	w10, [x12, x8]
     c40:	ldr	w10, [x19, #5940]
     c44:	mov	w8, #0x10                  	// #16
     c48:	sub	w8, w8, w10
     c4c:	lsr	w8, w11, w8
     c50:	strh	w8, [x19, #5936]
     c54:	sub	w11, w10, #0xc
     c58:	b	c60 <_tr_flush_block+0x7b0>
     c5c:	add	w11, w12, #0x4
     c60:	adrp	x10, 0 <_tr_init>
     c64:	mov	w12, #0x1730                	// #5936
     c68:	mov	w9, w9
     c6c:	add	x10, x10, #0x0
     c70:	add	x12, x19, x12
     c74:	mov	w13, #0x10                  	// #16
     c78:	str	w11, [x19, #5940]
     c7c:	b	c94 <_tr_flush_block+0x7e4>
     c80:	add	w11, w11, #0x3
     c84:	subs	x9, x9, #0x1
     c88:	add	x10, x10, #0x1
     c8c:	str	w11, [x19, #5940]
     c90:	b.eq	d04 <_tr_flush_block+0x854>  // b.none
     c94:	ldrb	w14, [x10]
     c98:	cmp	w11, #0xe
     c9c:	add	x14, x19, x14, lsl #2
     ca0:	ldrh	w14, [x14, #2750]
     ca4:	lsl	w15, w14, w11
     ca8:	orr	w8, w8, w15
     cac:	strh	w8, [x19, #5936]
     cb0:	b.lt	c80 <_tr_flush_block+0x7d0>  // b.tstop
     cb4:	ldr	x11, [x19, #40]
     cb8:	ldr	x15, [x19, #16]
     cbc:	add	x16, x11, #0x1
     cc0:	str	x16, [x19, #40]
     cc4:	strb	w8, [x15, x11]
     cc8:	ldr	x8, [x19, #40]
     ccc:	ldrb	w11, [x12, #1]
     cd0:	ldr	x15, [x19, #16]
     cd4:	add	x16, x8, #0x1
     cd8:	str	x16, [x19, #40]
     cdc:	strb	w11, [x15, x8]
     ce0:	ldr	w11, [x19, #5940]
     ce4:	sub	w8, w13, w11
     ce8:	lsr	w8, w14, w8
     cec:	strh	w8, [x19, #5936]
     cf0:	sub	w11, w11, #0xd
     cf4:	subs	x9, x9, #0x1
     cf8:	add	x10, x10, #0x1
     cfc:	str	w11, [x19, #5940]
     d00:	b.ne	c94 <_tr_flush_block+0x7e4>  // b.any
     d04:	add	x22, x19, #0xd4
     d08:	mov	x0, x19
     d0c:	mov	x1, x22
     d10:	bl	1b74 <send_tree>
     d14:	add	x23, x19, #0x9c8
     d18:	mov	x0, x19
     d1c:	mov	x1, x23
     d20:	mov	w2, w21
     d24:	bl	1b74 <send_tree>
     d28:	mov	x0, x19
     d2c:	mov	x1, x22
     d30:	mov	x2, x23
     d34:	bl	16f0 <compress_block>
     d38:	mov	x0, x19
     d3c:	bl	48 <init_block>
     d40:	cbz	w20, db0 <_tr_flush_block+0x900>
     d44:	ldr	w8, [x19, #5940]
     d48:	cmp	w8, #0x9
     d4c:	b.lt	d80 <_tr_flush_block+0x8d0>  // b.tstop
     d50:	mov	w8, #0x1730                	// #5936
     d54:	ldr	x10, [x19, #40]
     d58:	add	x8, x19, x8
     d5c:	ldr	x9, [x19, #16]
     d60:	ldrb	w11, [x8]
     d64:	add	x12, x10, #0x1
     d68:	str	x12, [x19, #40]
     d6c:	strb	w11, [x9, x10]
     d70:	ldr	x9, [x19, #40]
     d74:	ldr	x10, [x19, #16]
     d78:	ldrb	w8, [x8, #1]
     d7c:	b	d98 <_tr_flush_block+0x8e8>
     d80:	cmp	w8, #0x1
     d84:	b.lt	da8 <_tr_flush_block+0x8f8>  // b.tstop
     d88:	mov	w8, #0x1730                	// #5936
     d8c:	ldr	x9, [x19, #40]
     d90:	ldr	x10, [x19, #16]
     d94:	ldrb	w8, [x19, x8]
     d98:	add	x11, x9, #0x1
     d9c:	add	x9, x10, x9
     da0:	str	x11, [x19, #40]
     da4:	strb	w8, [x9]
     da8:	strh	wzr, [x19, #5936]
     dac:	str	wzr, [x19, #5940]
     db0:	ldp	x20, x19, [sp, #48]
     db4:	ldp	x22, x21, [sp, #32]
     db8:	ldr	x23, [sp, #16]
     dbc:	ldp	x29, x30, [sp], #64
     dc0:	ret
     dc4:	ldrh	w9, [x19, #248]
     dc8:	cbnz	w9, ddc <_tr_flush_block+0x92c>
     dcc:	ldrh	w9, [x19, #252]
     dd0:	cbnz	w9, ddc <_tr_flush_block+0x92c>
     dd4:	ldrh	w9, [x19, #264]
     dd8:	cbz	w9, de4 <_tr_flush_block+0x934>
     ddc:	mov	w9, #0x1                   	// #1
     de0:	b	5ac <_tr_flush_block+0xfc>
     de4:	mov	x10, xzr
     de8:	add	x11, x19, #0x154
     dec:	ldrh	w9, [x11, x10]
     df0:	cbnz	w9, ddc <_tr_flush_block+0x92c>
     df4:	add	x10, x10, #0x4
     df8:	cmp	x10, #0x380
     dfc:	b.ne	dec <_tr_flush_block+0x93c>  // b.any
     e00:	b	5ac <_tr_flush_block+0xfc>

0000000000000e04 <build_tree>:
     e04:	sub	sp, sp, #0x20
     e08:	ldr	x9, [x1, #16]
     e0c:	ldr	x8, [x1]
     e10:	ldr	x12, [x9]
     e14:	ldr	w10, [x9, #20]
     e18:	adrp	x9, 0 <_tr_init>
     e1c:	ldr	d0, [x9]
     e20:	mov	w9, #0x14b4                	// #5300
     e24:	add	x11, x0, x9
     e28:	cmp	w10, #0x1
     e2c:	str	d0, [x11]
     e30:	b.lt	f10 <build_tree+0x10c>  // b.tstop
     e34:	mov	w9, #0x14bc                	// #5308
     e38:	mov	x13, xzr
     e3c:	add	x14, x8, #0x2
     e40:	add	x15, x0, x9
     e44:	mov	w9, #0xffffffff            	// #-1
     e48:	b	e5c <build_tree+0x58>
     e4c:	strh	wzr, [x14], #4
     e50:	add	x13, x13, #0x1
     e54:	cmp	x10, x13
     e58:	b.eq	e90 <build_tree+0x8c>  // b.none
     e5c:	ldurh	w16, [x14, #-2]
     e60:	cbz	w16, e4c <build_tree+0x48>
     e64:	ldrsw	x9, [x0, #5300]
     e68:	add	x9, x9, #0x1
     e6c:	str	w9, [x0, #5300]
     e70:	add	x9, x0, x9, lsl #2
     e74:	str	w13, [x9, #3008]
     e78:	strb	wzr, [x15, x13]
     e7c:	mov	w9, w13
     e80:	add	x13, x13, #0x1
     e84:	cmp	x10, x13
     e88:	add	x14, x14, #0x4
     e8c:	b.ne	e5c <build_tree+0x58>  // b.any
     e90:	ldr	w15, [x11]
     e94:	cmp	w15, #0x1
     e98:	b.gt	f74 <build_tree+0x170>
     e9c:	cbz	x12, f1c <build_tree+0x118>
     ea0:	mov	w13, #0x1                   	// #1
     ea4:	mov	w14, #0x14bc                	// #5308
     ea8:	mov	w16, w9
     eac:	sxtw	x9, w15
     eb0:	cmp	w16, #0x2
     eb4:	add	x9, x9, #0x1
     eb8:	csinc	w15, wzr, w16, ge  // ge = tcont
     ebc:	str	w9, [x0, #5300]
     ec0:	add	x9, x0, x9, lsl #2
     ec4:	sbfiz	x17, x15, #2, #32
     ec8:	str	w15, [x9, #3008]
     ecc:	add	x9, x0, w15, sxtw
     ed0:	strh	w13, [x8, x17]
     ed4:	strb	wzr, [x9, x14]
     ed8:	ldr	x9, [x0, #5912]
     edc:	add	x15, x12, x17
     ee0:	ldr	x17, [x0, #5920]
     ee4:	sub	x9, x9, #0x1
     ee8:	str	x9, [x0, #5912]
     eec:	ldrh	w9, [x15, #2]
     ef0:	ldr	w15, [x0, #5300]
     ef4:	sub	x17, x17, x9
     ef8:	cinc	w9, w16, lt  // lt = tstop
     efc:	cmp	w15, #0x2
     f00:	mov	w16, w9
     f04:	str	x17, [x0, #5920]
     f08:	b.lt	eac <build_tree+0xa8>  // b.tstop
     f0c:	b	f74 <build_tree+0x170>
     f10:	mov	w15, wzr
     f14:	mov	w9, #0xffffffff            	// #-1
     f18:	cbnz	x12, ea0 <build_tree+0x9c>
     f1c:	mov	w12, #0x1                   	// #1
     f20:	mov	w13, #0x14bc                	// #5308
     f24:	mov	w14, w9
     f28:	sxtw	x9, w15
     f2c:	cmp	w14, #0x2
     f30:	add	x9, x9, #0x1
     f34:	csinc	w15, wzr, w14, ge  // ge = tcont
     f38:	str	w9, [x0, #5300]
     f3c:	add	x9, x0, x9, lsl #2
     f40:	str	w15, [x9, #3008]
     f44:	sbfiz	x9, x15, #2, #32
     f48:	add	x15, x0, w15, sxtw
     f4c:	strh	w12, [x8, x9]
     f50:	strb	wzr, [x15, x13]
     f54:	ldr	x16, [x0, #5912]
     f58:	ldr	w15, [x0, #5300]
     f5c:	cinc	w9, w14, lt  // lt = tstop
     f60:	sub	x14, x16, #0x1
     f64:	cmp	w15, #0x2
     f68:	str	x14, [x0, #5912]
     f6c:	mov	w14, w9
     f70:	b.lt	f28 <build_tree+0x124>  // b.tstop
     f74:	lsr	w12, w15, #1
     f78:	mov	w13, #0x14bc                	// #5308
     f7c:	str	w9, [x1, #8]
     f80:	add	x14, x0, x12, lsl #2
     f84:	ldr	w14, [x14, #3008]
     f88:	lsl	w2, w12, #1
     f8c:	cmp	w2, w15
     f90:	mov	x16, x12
     f94:	b.gt	1078 <build_tree+0x274>
     f98:	sxtw	x17, w14
     f9c:	add	x16, x0, x17
     fa0:	add	x16, x16, x13
     fa4:	add	x17, x8, x17, lsl #2
     fa8:	mov	w18, w12
     fac:	b	fcc <build_tree+0x1c8>
     fb0:	add	x18, x0, w18, sxtw #2
     fb4:	str	w15, [x18, #3008]
     fb8:	ldr	w15, [x0, #5300]
     fbc:	lsl	w2, w3, #1
     fc0:	mov	w18, w3
     fc4:	cmp	w2, w15
     fc8:	b.gt	1074 <build_tree+0x270>
     fcc:	cmp	w2, w15
     fd0:	b.ge	100c <build_tree+0x208>  // b.tcont
     fd4:	sxtw	x15, w2
     fd8:	add	x5, x0, #0xbc0
     fdc:	orr	x4, x15, #0x1
     fe0:	ldrsw	x3, [x5, w2, sxtw #2]
     fe4:	ldrsw	x5, [x5, x4, lsl #2]
     fe8:	lsl	x6, x3, #2
     fec:	lsl	x7, x5, #2
     ff0:	ldrh	w7, [x8, x7]
     ff4:	ldrh	w6, [x8, x6]
     ff8:	cmp	w7, w6
     ffc:	b.cs	1050 <build_tree+0x24c>  // b.hs, b.nlast
    1000:	mov	x15, x4
    1004:	mov	w3, w4
    1008:	b	1014 <build_tree+0x210>
    100c:	sxtw	x15, w2
    1010:	mov	w3, w2
    1014:	add	x15, x0, x15, lsl #2
    1018:	ldr	w15, [x15, #3008]
    101c:	ldrh	w2, [x17]
    1020:	sbfiz	x4, x15, #2, #32
    1024:	ldrh	w4, [x8, x4]
    1028:	cmp	w2, w4
    102c:	b.cc	1070 <build_tree+0x26c>  // b.lo, b.ul, b.last
    1030:	b.ne	fb0 <build_tree+0x1ac>  // b.any
    1034:	sxtw	x2, w15
    1038:	add	x2, x0, x2
    103c:	ldrb	w4, [x16]
    1040:	ldrb	w2, [x2, x13]
    1044:	cmp	w4, w2
    1048:	b.hi	fb0 <build_tree+0x1ac>  // b.pmore
    104c:	b	1070 <build_tree+0x26c>
    1050:	b.ne	1010 <build_tree+0x20c>  // b.any
    1054:	add	x6, x0, x13
    1058:	ldrb	w5, [x6, x5]
    105c:	ldrb	w3, [x6, x3]
    1060:	cmp	w5, w3
    1064:	mov	w3, w2
    1068:	b.ls	1000 <build_tree+0x1fc>  // b.plast
    106c:	b	1014 <build_tree+0x210>
    1070:	mov	w3, w18
    1074:	sxtw	x16, w3
    1078:	add	x15, x0, x16, lsl #2
    107c:	cmp	x12, #0x2
    1080:	str	w14, [x15, #3008]
    1084:	b.lt	1094 <build_tree+0x290>  // b.tstop
    1088:	ldr	w15, [x11]
    108c:	sub	x12, x12, #0x1
    1090:	b	f80 <build_tree+0x17c>
    1094:	ldr	w15, [x0, #5300]
    1098:	sxtw	x11, w10
    109c:	mov	w10, #0x14bc                	// #5308
    10a0:	b	10c0 <build_tree+0x2bc>
    10a4:	mov	w13, #0x1                   	// #1
    10a8:	add	x13, x0, x13, lsl #2
    10ac:	str	w11, [x13, #3008]
    10b0:	ldr	w15, [x0, #5300]
    10b4:	mov	x11, x12
    10b8:	cmp	w15, #0x1
    10bc:	b.le	132c <build_tree+0x528>
    10c0:	sub	w3, w15, #0x1
    10c4:	ldr	w13, [x0, #3012]
    10c8:	str	w3, [x0, #5300]
    10cc:	add	x12, x0, w15, sxtw #2
    10d0:	ldr	w14, [x12, #3008]
    10d4:	sxtw	x12, w13
    10d8:	cmp	w15, #0x2
    10dc:	str	w14, [x0, #3012]
    10e0:	b.gt	10ec <build_tree+0x2e8>
    10e4:	mov	w15, #0x1                   	// #1
    10e8:	b	11d0 <build_tree+0x3cc>
    10ec:	sxtw	x15, w14
    10f0:	add	x16, x0, x15
    10f4:	mov	w17, #0x1                   	// #1
    10f8:	add	x15, x8, x15, lsl #2
    10fc:	add	x16, x16, x10
    1100:	mov	w18, #0x2                   	// #2
    1104:	b	1124 <build_tree+0x320>
    1108:	add	x17, x0, w17, sxtw #2
    110c:	str	w18, [x17, #3008]
    1110:	ldr	w3, [x0, #5300]
    1114:	lsl	w18, w2, #1
    1118:	mov	w17, w2
    111c:	cmp	w18, w3
    1120:	b.gt	11cc <build_tree+0x3c8>
    1124:	cmp	w18, w3
    1128:	b.ge	1164 <build_tree+0x360>  // b.tcont
    112c:	sxtw	x3, w18
    1130:	add	x5, x0, #0xbc0
    1134:	orr	x4, x3, #0x1
    1138:	ldrsw	x2, [x5, w18, sxtw #2]
    113c:	ldrsw	x5, [x5, x4, lsl #2]
    1140:	lsl	x6, x2, #2
    1144:	lsl	x7, x5, #2
    1148:	ldrh	w7, [x8, x7]
    114c:	ldrh	w6, [x8, x6]
    1150:	cmp	w7, w6
    1154:	b.cs	11a8 <build_tree+0x3a4>  // b.hs, b.nlast
    1158:	mov	x3, x4
    115c:	mov	w2, w4
    1160:	b	116c <build_tree+0x368>
    1164:	sxtw	x3, w18
    1168:	mov	w2, w18
    116c:	add	x18, x0, x3, lsl #2
    1170:	ldr	w18, [x18, #3008]
    1174:	ldrh	w3, [x15]
    1178:	sbfiz	x4, x18, #2, #32
    117c:	ldrh	w4, [x8, x4]
    1180:	cmp	w3, w4
    1184:	b.cc	11c8 <build_tree+0x3c4>  // b.lo, b.ul, b.last
    1188:	b.ne	1108 <build_tree+0x304>  // b.any
    118c:	sxtw	x3, w18
    1190:	add	x3, x0, x3
    1194:	ldrb	w4, [x16]
    1198:	ldrb	w3, [x3, x10]
    119c:	cmp	w4, w3
    11a0:	b.hi	1108 <build_tree+0x304>  // b.pmore
    11a4:	b	11c8 <build_tree+0x3c4>
    11a8:	b.ne	1168 <build_tree+0x364>  // b.any
    11ac:	add	x6, x0, x10
    11b0:	ldrb	w5, [x6, x5]
    11b4:	ldrb	w2, [x6, x2]
    11b8:	cmp	w5, w2
    11bc:	mov	w2, w18
    11c0:	b.ls	1158 <build_tree+0x354>  // b.plast
    11c4:	b	116c <build_tree+0x368>
    11c8:	mov	w2, w17
    11cc:	sxtw	x15, w2
    11d0:	add	x16, x0, #0xbc0
    11d4:	str	w14, [x16, x15, lsl #2]
    11d8:	ldrsw	x14, [x0, #5304]
    11dc:	ldrsw	x15, [x0, #3012]
    11e0:	add	x17, x8, x12, lsl #2
    11e4:	sub	x14, x14, #0x1
    11e8:	str	w14, [x0, #5304]
    11ec:	str	w13, [x16, x14, lsl #2]
    11f0:	ldrsw	x13, [x0, #5304]
    11f4:	add	x18, x8, x15, lsl #2
    11f8:	sub	x13, x13, #0x1
    11fc:	str	w13, [x0, #5304]
    1200:	str	w15, [x16, x13, lsl #2]
    1204:	ldrh	w13, [x17]
    1208:	ldrh	w14, [x18]
    120c:	add	w14, w14, w13
    1210:	add	x13, x8, x11, lsl #2
    1214:	strh	w14, [x13]
    1218:	add	x14, x0, x10
    121c:	ldrb	w12, [x14, x12]
    1220:	ldrb	w15, [x14, x15]
    1224:	add	x14, x14, x11
    1228:	cmp	w12, w15
    122c:	csel	w12, w15, w12, cc  // cc = lo, ul, last
    1230:	add	w12, w12, #0x1
    1234:	strb	w12, [x14]
    1238:	strh	w11, [x18, #2]
    123c:	strh	w11, [x17, #2]
    1240:	ldr	w18, [x0, #5300]
    1244:	add	x12, x11, #0x1
    1248:	str	w11, [x0, #3012]
    124c:	cmp	w18, #0x2
    1250:	b.lt	10a4 <build_tree+0x2a0>  // b.tstop
    1254:	mov	w15, #0x1                   	// #1
    1258:	mov	w16, #0x2                   	// #2
    125c:	b	127c <build_tree+0x478>
    1260:	add	x15, x0, w15, sxtw #2
    1264:	str	w16, [x15, #3008]
    1268:	ldr	w18, [x0, #5300]
    126c:	lsl	w16, w17, #1
    1270:	mov	w15, w17
    1274:	cmp	w16, w18
    1278:	b.gt	1324 <build_tree+0x520>
    127c:	cmp	w16, w18
    1280:	b.ge	12bc <build_tree+0x4b8>  // b.tcont
    1284:	sxtw	x18, w16
    1288:	add	x3, x0, #0xbc0
    128c:	orr	x2, x18, #0x1
    1290:	ldrsw	x17, [x3, w16, sxtw #2]
    1294:	ldrsw	x3, [x3, x2, lsl #2]
    1298:	lsl	x4, x17, #2
    129c:	lsl	x5, x3, #2
    12a0:	ldrh	w5, [x8, x5]
    12a4:	ldrh	w4, [x8, x4]
    12a8:	cmp	w5, w4
    12ac:	b.cs	1300 <build_tree+0x4fc>  // b.hs, b.nlast
    12b0:	mov	x18, x2
    12b4:	mov	w17, w2
    12b8:	b	12c4 <build_tree+0x4c0>
    12bc:	sxtw	x18, w16
    12c0:	mov	w17, w16
    12c4:	add	x16, x0, x18, lsl #2
    12c8:	ldr	w16, [x16, #3008]
    12cc:	ldrh	w18, [x13]
    12d0:	sbfiz	x2, x16, #2, #32
    12d4:	ldrh	w2, [x8, x2]
    12d8:	cmp	w18, w2
    12dc:	b.cc	1320 <build_tree+0x51c>  // b.lo, b.ul, b.last
    12e0:	b.ne	1260 <build_tree+0x45c>  // b.any
    12e4:	sxtw	x18, w16
    12e8:	add	x18, x0, x18
    12ec:	ldrb	w2, [x14]
    12f0:	ldrb	w18, [x18, x10]
    12f4:	cmp	w2, w18
    12f8:	b.hi	1260 <build_tree+0x45c>  // b.pmore
    12fc:	b	1320 <build_tree+0x51c>
    1300:	b.ne	12c0 <build_tree+0x4bc>  // b.any
    1304:	add	x4, x0, x10
    1308:	ldrb	w3, [x4, x3]
    130c:	ldrb	w17, [x4, x17]
    1310:	cmp	w3, w17
    1314:	mov	w17, w16
    1318:	b.ls	12b0 <build_tree+0x4ac>  // b.plast
    131c:	b	12c4 <build_tree+0x4c0>
    1320:	mov	w17, w15
    1324:	sxtw	x13, w17
    1328:	b	10a8 <build_tree+0x2a4>
    132c:	ldrsw	x10, [x0, #5304]
    1330:	ldr	w11, [x0, #3012]
    1334:	add	x13, x0, #0xbc0
    1338:	movi	v0.2d, #0x0
    133c:	sub	x10, x10, #0x1
    1340:	str	w10, [x0, #5304]
    1344:	str	w11, [x13, x10, lsl #2]
    1348:	ldr	x12, [x1, #16]
    134c:	ldrsw	x17, [x0, #5304]
    1350:	ldr	x10, [x1]
    1354:	ldr	w11, [x1, #8]
    1358:	ldp	x16, x14, [x12]
    135c:	ldr	w15, [x12, #16]
    1360:	ldrsw	x12, [x12, #24]
    1364:	str	q0, [x0, #2992]
    1368:	str	q0, [x0, #2976]
    136c:	ldrsw	x13, [x13, x17, lsl #2]
    1370:	add	x13, x10, x13, lsl #2
    1374:	strh	wzr, [x13, #2]
    1378:	ldrsw	x18, [x0, #5304]
    137c:	cmp	w18, #0x23b
    1380:	b.gt	1590 <build_tree+0x78c>
    1384:	mov	w13, wzr
    1388:	cbz	x16, 142c <build_tree+0x628>
    138c:	sub	w17, w18, #0x23c
    1390:	add	x18, x0, x18, lsl #2
    1394:	add	x18, x18, #0xbc4
    1398:	b	13e0 <build_tree+0x5dc>
    139c:	sub	w3, w1, w15
    13a0:	ldr	w3, [x14, w3, sxtw #2]
    13a4:	lsl	x1, x1, #2
    13a8:	ldr	x4, [x0, #5912]
    13ac:	ldrh	w5, [x10, x1]
    13b0:	add	w2, w3, w2
    13b4:	add	x1, x16, x1
    13b8:	madd	x2, x5, x2, x4
    13bc:	str	x2, [x0, #5912]
    13c0:	ldrh	w1, [x1, #2]
    13c4:	ldr	x2, [x0, #5920]
    13c8:	add	w1, w3, w1
    13cc:	madd	x1, x1, x5, x2
    13d0:	str	x1, [x0, #5920]
    13d4:	adds	w17, w17, #0x1
    13d8:	add	x18, x18, #0x4
    13dc:	b.cs	14b4 <build_tree+0x6b0>  // b.hs, b.nlast
    13e0:	ldrsw	x1, [x18]
    13e4:	add	x3, x10, x1, lsl #2
    13e8:	ldrh	w2, [x3, #2]
    13ec:	add	x2, x10, x2, lsl #2
    13f0:	ldrh	w2, [x2, #2]
    13f4:	cmp	w12, w2
    13f8:	csinc	w2, w12, w2, le
    13fc:	cinc	w13, w13, le
    1400:	cmp	w1, w11
    1404:	strh	w2, [x3, #2]
    1408:	b.gt	13d4 <build_tree+0x5d0>
    140c:	add	x3, x0, w2, sxtw #1
    1410:	ldrh	w4, [x3, #2976]
    1414:	cmp	w1, w15
    1418:	add	w4, w4, #0x1
    141c:	strh	w4, [x3, #2976]
    1420:	b.ge	139c <build_tree+0x598>  // b.tcont
    1424:	mov	w3, wzr
    1428:	b	13a4 <build_tree+0x5a0>
    142c:	add	x17, x0, x18, lsl #2
    1430:	sub	w16, w18, #0x23c
    1434:	add	x17, x17, #0xbc4
    1438:	b	1468 <build_tree+0x664>
    143c:	sub	w2, w18, w15
    1440:	ldr	w2, [x14, w2, sxtw #2]
    1444:	lsl	x18, x18, #2
    1448:	ldrh	w18, [x10, x18]
    144c:	ldr	x3, [x0, #5912]
    1450:	add	w1, w2, w1
    1454:	madd	x18, x18, x1, x3
    1458:	str	x18, [x0, #5912]
    145c:	adds	w16, w16, #0x1
    1460:	add	x17, x17, #0x4
    1464:	b.cs	14b4 <build_tree+0x6b0>  // b.hs, b.nlast
    1468:	ldrsw	x18, [x17]
    146c:	add	x2, x10, x18, lsl #2
    1470:	ldrh	w1, [x2, #2]
    1474:	add	x1, x10, x1, lsl #2
    1478:	ldrh	w1, [x1, #2]
    147c:	cmp	w12, w1
    1480:	csinc	w1, w12, w1, le
    1484:	cinc	w13, w13, le
    1488:	cmp	w18, w11
    148c:	strh	w1, [x2, #2]
    1490:	b.gt	145c <build_tree+0x658>
    1494:	add	x2, x0, w1, sxtw #1
    1498:	ldrh	w3, [x2, #2976]
    149c:	cmp	w18, w15
    14a0:	add	w3, w3, #0x1
    14a4:	strh	w3, [x2, #2976]
    14a8:	b.ge	143c <build_tree+0x638>  // b.tcont
    14ac:	mov	w2, wzr
    14b0:	b	1444 <build_tree+0x640>
    14b4:	cbz	w13, 1590 <build_tree+0x78c>
    14b8:	add	x14, x0, x12, lsl #1
    14bc:	mov	x15, #0x100000000           	// #4294967296
    14c0:	add	x14, x14, #0xba0
    14c4:	add	x15, x15, x12, lsl #32
    14c8:	mov	x16, #0xffffffff00000000    	// #-4294967296
    14cc:	mov	x17, x14
    14d0:	mov	x18, x15
    14d4:	ldrh	w1, [x17, #-2]!
    14d8:	add	x18, x18, x16
    14dc:	cbz	w1, 14d4 <build_tree+0x6d0>
    14e0:	sub	w1, w1, #0x1
    14e4:	add	x18, x0, x18, asr #31
    14e8:	strh	w1, [x17]
    14ec:	ldrh	w17, [x18, #2976]
    14f0:	subs	w13, w13, #0x2
    14f4:	add	w17, w17, #0x2
    14f8:	strh	w17, [x18, #2976]
    14fc:	ldrh	w17, [x14]
    1500:	sub	w17, w17, #0x1
    1504:	strh	w17, [x14]
    1508:	b.gt	14cc <build_tree+0x6c8>
    150c:	cbz	w12, 1590 <build_tree+0x78c>
    1510:	add	x13, x0, #0xbbc
    1514:	mov	w14, #0x23d                 	// #573
    1518:	tst	w17, #0xffff
    151c:	b.ne	1534 <build_tree+0x730>  // b.any
    1520:	b	1588 <build_tree+0x784>
    1524:	add	x15, x0, x12, lsl #1
    1528:	ldrh	w17, [x15, #2976]
    152c:	tst	w17, #0xffff
    1530:	b.eq	1588 <build_tree+0x784>  // b.none
    1534:	and	w15, w17, #0xffff
    1538:	b	1544 <build_tree+0x740>
    153c:	subs	w15, w15, #0x1
    1540:	b.eq	1588 <build_tree+0x784>  // b.none
    1544:	add	x17, x13, w14, sxtw #2
    1548:	ldrsw	x16, [x17], #-4
    154c:	sub	w14, w14, #0x1
    1550:	cmp	w16, w11
    1554:	b.gt	1548 <build_tree+0x744>
    1558:	add	x17, x10, x16, lsl #2
    155c:	ldrh	w18, [x17, #2]!
    1560:	cmp	w12, w18
    1564:	b.eq	153c <build_tree+0x738>  // b.none
    1568:	lsl	x16, x16, #2
    156c:	ldr	x1, [x0, #5912]
    1570:	ldrh	w16, [x10, x16]
    1574:	sub	x18, x12, x18
    1578:	madd	x16, x18, x16, x1
    157c:	str	x16, [x0, #5912]
    1580:	strh	w12, [x17]
    1584:	b	153c <build_tree+0x738>
    1588:	sub	x12, x12, #0x1
    158c:	cbnz	w12, 1524 <build_tree+0x720>
    1590:	ldrh	w10, [x0, #2976]
    1594:	lsl	w10, w10, #1
    1598:	strh	w10, [sp, #2]
    159c:	ldrh	w11, [x0, #2978]
    15a0:	add	w10, w10, w11
    15a4:	lsl	w10, w10, #1
    15a8:	strh	w10, [sp, #4]
    15ac:	ldrh	w11, [x0, #2980]
    15b0:	add	w10, w10, w11
    15b4:	lsl	w10, w10, #1
    15b8:	strh	w10, [sp, #6]
    15bc:	ldrh	w11, [x0, #2982]
    15c0:	add	w10, w10, w11
    15c4:	lsl	w10, w10, #1
    15c8:	strh	w10, [sp, #8]
    15cc:	ldrh	w11, [x0, #2984]
    15d0:	add	w10, w10, w11
    15d4:	lsl	w10, w10, #1
    15d8:	strh	w10, [sp, #10]
    15dc:	ldrh	w11, [x0, #2986]
    15e0:	add	w10, w10, w11
    15e4:	lsl	w10, w10, #1
    15e8:	strh	w10, [sp, #12]
    15ec:	ldrh	w11, [x0, #2988]
    15f0:	add	w10, w10, w11
    15f4:	lsl	w10, w10, #1
    15f8:	strh	w10, [sp, #14]
    15fc:	ldrh	w11, [x0, #2990]
    1600:	add	w10, w10, w11
    1604:	lsl	w10, w10, #1
    1608:	strh	w10, [sp, #16]
    160c:	ldrh	w11, [x0, #2992]
    1610:	add	w10, w10, w11
    1614:	lsl	w10, w10, #1
    1618:	strh	w10, [sp, #18]
    161c:	ldrh	w11, [x0, #2994]
    1620:	add	w10, w10, w11
    1624:	lsl	w10, w10, #1
    1628:	strh	w10, [sp, #20]
    162c:	ldrh	w11, [x0, #2996]
    1630:	add	w10, w10, w11
    1634:	lsl	w10, w10, #1
    1638:	strh	w10, [sp, #22]
    163c:	ldrh	w11, [x0, #2998]
    1640:	add	w10, w10, w11
    1644:	lsl	w10, w10, #1
    1648:	strh	w10, [sp, #24]
    164c:	ldrh	w11, [x0, #3000]
    1650:	add	w10, w11, w10
    1654:	lsl	w10, w10, #1
    1658:	strh	w10, [sp, #26]
    165c:	ldrh	w11, [x0, #3002]
    1660:	add	w10, w11, w10
    1664:	lsl	w10, w10, #1
    1668:	strh	w10, [sp, #28]
    166c:	ldrh	w11, [x0, #3004]
    1670:	add	w10, w10, w11
    1674:	lsl	w10, w10, #1
    1678:	strh	w10, [sp, #30]
    167c:	tbnz	w9, #31, 16e8 <build_tree+0x8e4>
    1680:	mov	x10, xzr
    1684:	add	w9, w9, #0x1
    1688:	mov	x11, sp
    168c:	b	169c <build_tree+0x898>
    1690:	add	x10, x10, #0x1
    1694:	cmp	x10, x9
    1698:	b.eq	16e8 <build_tree+0x8e4>  // b.none
    169c:	add	x12, x8, x10, lsl #2
    16a0:	ldrh	w14, [x12, #2]
    16a4:	cbz	w14, 1690 <build_tree+0x88c>
    16a8:	lsl	x15, x14, #1
    16ac:	ldrh	w13, [x11, x15]
    16b0:	mov	w12, wzr
    16b4:	add	w14, w14, #0x1
    16b8:	add	w16, w13, #0x1
    16bc:	strh	w16, [x11, x15]
    16c0:	and	w15, w13, #0x1
    16c4:	sub	w14, w14, #0x1
    16c8:	orr	w15, w12, w15
    16cc:	lsr	w13, w13, #1
    16d0:	cmp	w14, #0x1
    16d4:	lsl	w12, w15, #1
    16d8:	b.gt	16c0 <build_tree+0x8bc>
    16dc:	lsl	x12, x10, #2
    16e0:	strh	w15, [x8, x12]
    16e4:	b	1690 <build_tree+0x88c>
    16e8:	add	sp, sp, #0x20
    16ec:	ret

00000000000016f0 <compress_block>:
    16f0:	str	x21, [sp, #-32]!
    16f4:	stp	x20, x19, [sp, #16]
    16f8:	ldr	w8, [x0, #5900]
    16fc:	cbz	w8, 1a30 <compress_block+0x340>
    1700:	mov	w9, #0x1730                	// #5936
    1704:	adrp	x10, 200 <_tr_stored_block+0xb8>
    1708:	adrp	x11, 0 <_tr_init>
    170c:	adrp	x12, 0 <_tr_init>
    1710:	adrp	x13, 0 <_tr_init>
    1714:	adrp	x14, 0 <_tr_init>
    1718:	adrp	x16, 0 <_tr_init>
    171c:	mov	x17, xzr
    1720:	mov	w8, #0x10                  	// #16
    1724:	add	x10, x10, #0x0
    1728:	add	x11, x11, #0x0
    172c:	add	x12, x12, #0x0
    1730:	add	x13, x13, #0x0
    1734:	add	x14, x14, #0x0
    1738:	add	x15, x0, x9
    173c:	add	x16, x16, #0x0
    1740:	b	1758 <compress_block+0x68>
    1744:	add	w3, w5, w3
    1748:	str	w3, [x0, #5940]
    174c:	ldr	w4, [x0, #5900]
    1750:	cmp	x17, x4
    1754:	b.cs	1a38 <compress_block+0x348>  // b.hs, b.nlast
    1758:	ldr	x18, [x0, #5904]
    175c:	ldr	x3, [x0, #5888]
    1760:	ldrh	w18, [x18, x17, lsl #1]
    1764:	ldrb	w5, [x3, x17]
    1768:	add	x17, x17, #0x1
    176c:	cbz	w18, 1804 <compress_block+0x114>
    1770:	ldrb	w6, [x10, x5]
    1774:	mov	w3, #0x400                 	// #1024
    1778:	ldr	w19, [x0, #5940]
    177c:	bfi	x3, x6, #2, #8
    1780:	add	x3, x3, x1
    1784:	ldrh	w4, [x3, #6]
    1788:	ldrh	w7, [x3, #4]
    178c:	ldrh	w3, [x0, #5936]
    1790:	sub	w20, w8, w4
    1794:	lsl	w21, w7, w19
    1798:	orr	w3, w3, w21
    179c:	cmp	w19, w20
    17a0:	strh	w3, [x0, #5936]
    17a4:	b.le	1878 <compress_block+0x188>
    17a8:	ldr	x19, [x0, #40]
    17ac:	ldr	x20, [x0, #16]
    17b0:	add	x21, x19, #0x1
    17b4:	str	x21, [x0, #40]
    17b8:	strb	w3, [x20, x19]
    17bc:	add	x21, x0, x9
    17c0:	ldr	x3, [x0, #40]
    17c4:	ldrb	w19, [x21, #1]
    17c8:	ldr	x20, [x0, #16]
    17cc:	add	x21, x3, #0x1
    17d0:	str	x21, [x0, #40]
    17d4:	strb	w19, [x20, x3]
    17d8:	ldr	w3, [x0, #5940]
    17dc:	sub	w19, w8, w3
    17e0:	add	w4, w4, w3
    17e4:	lsr	w3, w7, w19
    17e8:	strh	w3, [x0, #5936]
    17ec:	sub	w4, w4, #0x10
    17f0:	sub	x7, x6, #0x8
    17f4:	cmp	x7, #0x13
    17f8:	str	w4, [x0, #5940]
    17fc:	b.ls	188c <compress_block+0x19c>  // b.plast
    1800:	b	1908 <compress_block+0x218>
    1804:	add	x18, x1, x5, lsl #2
    1808:	ldr	w5, [x0, #5940]
    180c:	ldrh	w3, [x18, #2]
    1810:	ldrh	w4, [x18]
    1814:	ldrh	w18, [x0, #5936]
    1818:	sub	w6, w8, w3
    181c:	lsl	w7, w4, w5
    1820:	orr	w18, w18, w7
    1824:	cmp	w5, w6
    1828:	strh	w18, [x0, #5936]
    182c:	b.le	1744 <compress_block+0x54>
    1830:	ldr	x5, [x0, #40]
    1834:	ldr	x6, [x0, #16]
    1838:	add	x7, x5, #0x1
    183c:	str	x7, [x0, #40]
    1840:	strb	w18, [x6, x5]
    1844:	ldr	x18, [x0, #40]
    1848:	ldrb	w5, [x15, #1]
    184c:	ldr	x6, [x0, #16]
    1850:	add	x7, x18, #0x1
    1854:	str	x7, [x0, #40]
    1858:	strb	w5, [x6, x18]
    185c:	ldr	w18, [x0, #5940]
    1860:	sub	w5, w8, w18
    1864:	add	w3, w3, w18
    1868:	lsr	w18, w4, w5
    186c:	strh	w18, [x0, #5936]
    1870:	sub	w3, w3, #0x10
    1874:	b	1748 <compress_block+0x58>
    1878:	add	w4, w19, w4
    187c:	sub	x7, x6, #0x8
    1880:	cmp	x7, #0x13
    1884:	str	w4, [x0, #5940]
    1888:	b.hi	1908 <compress_block+0x218>  // b.pmore
    188c:	ldr	w7, [x12, x6, lsl #2]
    1890:	ldr	w6, [x11, x6, lsl #2]
    1894:	sub	w5, w5, w7
    1898:	and	w5, w5, #0xffff
    189c:	sub	w7, w8, w6
    18a0:	lsl	w19, w5, w4
    18a4:	orr	w3, w3, w19
    18a8:	cmp	w4, w7
    18ac:	strh	w3, [x0, #5936]
    18b0:	b.le	1900 <compress_block+0x210>
    18b4:	ldr	x4, [x0, #40]
    18b8:	ldr	x7, [x0, #16]
    18bc:	add	x19, x4, #0x1
    18c0:	str	x19, [x0, #40]
    18c4:	strb	w3, [x7, x4]
    18c8:	add	x19, x0, x9
    18cc:	ldr	x3, [x0, #40]
    18d0:	ldrb	w4, [x19, #1]
    18d4:	ldr	x7, [x0, #16]
    18d8:	add	x19, x3, #0x1
    18dc:	str	x19, [x0, #40]
    18e0:	strb	w4, [x7, x3]
    18e4:	ldr	w3, [x0, #5940]
    18e8:	sub	w4, w8, w3
    18ec:	add	w6, w6, w3
    18f0:	lsr	w3, w5, w4
    18f4:	strh	w3, [x0, #5936]
    18f8:	sub	w4, w6, #0x10
    18fc:	b	1904 <compress_block+0x214>
    1900:	add	w4, w6, w4
    1904:	str	w4, [x0, #5940]
    1908:	sub	w5, w18, #0x1
    190c:	lsr	w18, w5, #7
    1910:	cmp	w5, #0x100
    1914:	add	w18, w18, #0x100
    1918:	csel	w18, w5, w18, cc  // cc = lo, ul, last
    191c:	ldrb	w6, [x13, w18, uxtw]
    1920:	add	x18, x2, x6, lsl #2
    1924:	ldrh	w7, [x18, #2]
    1928:	ldrh	w19, [x18]
    192c:	sub	w20, w8, w7
    1930:	lsl	w18, w19, w4
    1934:	orr	w18, w3, w18
    1938:	cmp	w4, w20
    193c:	strh	w18, [x0, #5936]
    1940:	b.le	19a0 <compress_block+0x2b0>
    1944:	ldr	x3, [x0, #40]
    1948:	ldr	x4, [x0, #16]
    194c:	add	x20, x3, #0x1
    1950:	str	x20, [x0, #40]
    1954:	strb	w18, [x4, x3]
    1958:	add	x20, x0, x9
    195c:	ldr	x18, [x0, #40]
    1960:	ldrb	w3, [x20, #1]
    1964:	ldr	x4, [x0, #16]
    1968:	add	x20, x18, #0x1
    196c:	str	x20, [x0, #40]
    1970:	strb	w3, [x4, x18]
    1974:	ldr	w18, [x0, #5940]
    1978:	sub	w3, w8, w18
    197c:	add	w4, w7, w18
    1980:	lsr	w18, w19, w3
    1984:	strh	w18, [x0, #5936]
    1988:	sub	w3, w4, #0x10
    198c:	sub	x4, x6, #0x4
    1990:	cmp	x4, #0x19
    1994:	str	w3, [x0, #5940]
    1998:	b.hi	174c <compress_block+0x5c>  // b.pmore
    199c:	b	19b4 <compress_block+0x2c4>
    19a0:	add	w3, w4, w7
    19a4:	sub	x4, x6, #0x4
    19a8:	cmp	x4, #0x19
    19ac:	str	w3, [x0, #5940]
    19b0:	b.hi	174c <compress_block+0x5c>  // b.pmore
    19b4:	ldr	w7, [x16, x6, lsl #2]
    19b8:	ldr	w4, [x14, x6, lsl #2]
    19bc:	sub	w5, w5, w7
    19c0:	and	w5, w5, #0xffff
    19c4:	sub	w6, w8, w4
    19c8:	lsl	w7, w5, w3
    19cc:	orr	w18, w18, w7
    19d0:	cmp	w3, w6
    19d4:	strh	w18, [x0, #5936]
    19d8:	b.le	1a28 <compress_block+0x338>
    19dc:	ldr	x3, [x0, #40]
    19e0:	ldr	x6, [x0, #16]
    19e4:	add	x7, x3, #0x1
    19e8:	str	x7, [x0, #40]
    19ec:	strb	w18, [x6, x3]
    19f0:	add	x7, x0, x9
    19f4:	ldr	x18, [x0, #40]
    19f8:	ldrb	w3, [x7, #1]
    19fc:	ldr	x6, [x0, #16]
    1a00:	add	x7, x18, #0x1
    1a04:	str	x7, [x0, #40]
    1a08:	strb	w3, [x6, x18]
    1a0c:	ldr	w18, [x0, #5940]
    1a10:	sub	w3, w8, w18
    1a14:	add	w4, w4, w18
    1a18:	lsr	w18, w5, w3
    1a1c:	strh	w18, [x0, #5936]
    1a20:	sub	w3, w4, #0x10
    1a24:	b	1748 <compress_block+0x58>
    1a28:	add	w3, w4, w3
    1a2c:	b	1748 <compress_block+0x58>
    1a30:	ldr	w3, [x0, #5940]
    1a34:	ldrh	w18, [x0, #5936]
    1a38:	ldrh	w8, [x1, #1026]
    1a3c:	ldrh	w9, [x1, #1024]
    1a40:	mov	w10, #0x10                  	// #16
    1a44:	sub	w12, w10, w8
    1a48:	lsl	w11, w9, w3
    1a4c:	orr	w11, w18, w11
    1a50:	cmp	w3, w12
    1a54:	strh	w11, [x0, #5936]
    1a58:	b.le	1ab8 <compress_block+0x3c8>
    1a5c:	ldr	x12, [x0, #40]
    1a60:	ldr	x13, [x0, #16]
    1a64:	add	x14, x12, #0x1
    1a68:	str	x14, [x0, #40]
    1a6c:	mov	w14, #0x1730                	// #5936
    1a70:	strb	w11, [x13, x12]
    1a74:	add	x14, x0, x14
    1a78:	ldr	x11, [x0, #40]
    1a7c:	ldrb	w12, [x14, #1]
    1a80:	ldr	x13, [x0, #16]
    1a84:	add	x14, x11, #0x1
    1a88:	str	x14, [x0, #40]
    1a8c:	strb	w12, [x13, x11]
    1a90:	ldr	w11, [x0, #5940]
    1a94:	sub	w10, w10, w11
    1a98:	add	w8, w8, w11
    1a9c:	lsr	w9, w9, w10
    1aa0:	strh	w9, [x0, #5936]
    1aa4:	sub	w8, w8, #0x10
    1aa8:	str	w8, [x0, #5940]
    1aac:	ldp	x20, x19, [sp, #16]
    1ab0:	ldr	x21, [sp], #32
    1ab4:	ret
    1ab8:	add	w8, w3, w8
    1abc:	str	w8, [x0, #5940]
    1ac0:	ldp	x20, x19, [sp, #16]
    1ac4:	ldr	x21, [sp], #32
    1ac8:	ret

0000000000001acc <_tr_tally>:
    1acc:	ldr	x8, [x0, #5904]
    1ad0:	ldr	w9, [x0, #5900]
    1ad4:	strh	w1, [x8, x9, lsl #1]
    1ad8:	ldr	x8, [x0, #5888]
    1adc:	add	w10, w9, #0x1
    1ae0:	str	w10, [x0, #5900]
    1ae4:	strb	w2, [x8, x9]
    1ae8:	cbz	w1, 1b48 <_tr_tally+0x7c>
    1aec:	ldr	w8, [x0, #5928]
    1af0:	adrp	x10, 200 <_tr_stored_block+0xb8>
    1af4:	add	x10, x10, #0x0
    1af8:	ldrb	w10, [x10, w2, uxtw]
    1afc:	sub	w9, w1, #0x1
    1b00:	lsr	w11, w9, #7
    1b04:	add	w8, w8, #0x1
    1b08:	cmp	w9, #0x100
    1b0c:	add	w11, w11, #0x100
    1b10:	str	w8, [x0, #5928]
    1b14:	mov	w8, #0x400                 	// #1024
    1b18:	csel	w9, w9, w11, cc  // cc = lo, ul, last
    1b1c:	adrp	x11, 0 <_tr_init>
    1b20:	bfi	x8, x10, #2, #8
    1b24:	add	x11, x11, #0x0
    1b28:	add	x8, x8, x0
    1b2c:	ldrb	w9, [x11, w9, uxtw]
    1b30:	ldrh	w10, [x8, #216]
    1b34:	add	x9, x0, x9, lsl #2
    1b38:	add	w10, w10, #0x1
    1b3c:	strh	w10, [x8, #216]
    1b40:	add	x8, x9, #0x9c8
    1b44:	b	1b50 <_tr_tally+0x84>
    1b48:	add	x8, x0, w2, uxtw #2
    1b4c:	add	x8, x8, #0xd4
    1b50:	ldrh	w9, [x8]
    1b54:	add	w9, w9, #0x1
    1b58:	strh	w9, [x8]
    1b5c:	ldr	w8, [x0, #5896]
    1b60:	ldr	w9, [x0, #5900]
    1b64:	sub	w8, w8, #0x1
    1b68:	cmp	w9, w8
    1b6c:	cset	w0, eq  // eq = none
    1b70:	ret

0000000000001b74 <send_tree>:
    1b74:	stp	x22, x21, [sp, #-32]!
    1b78:	stp	x20, x19, [sp, #16]
    1b7c:	tbnz	w2, #31, 2060 <send_tree+0x4ec>
    1b80:	ldrh	w9, [x1, #2]
    1b84:	mov	w18, #0x7                   	// #7
    1b88:	mov	w4, #0x8a                  	// #138
    1b8c:	mov	w10, #0x3                   	// #3
    1b90:	mov	w13, #0x1730                	// #5936
    1b94:	cmp	w9, #0x0
    1b98:	mov	x8, xzr
    1b9c:	mov	w3, wzr
    1ba0:	add	w11, w2, #0x1
    1ba4:	mov	w7, #0xffffffff            	// #-1
    1ba8:	mov	w12, #0x10                  	// #16
    1bac:	mov	w14, #0x6                   	// #6
    1bb0:	mov	w15, #0xfffe                	// #65534
    1bb4:	mov	w16, #0xfff6                	// #65526
    1bb8:	add	x17, x0, x13
    1bbc:	csel	w6, w4, w18, eq  // eq = none
    1bc0:	cinc	w5, w10, ne  // ne = any
    1bc4:	mov	w18, #0xfffd                	// #65533
    1bc8:	b	1be0 <send_tree+0x6c>
    1bcc:	mov	w2, w7
    1bd0:	cmp	x8, x11
    1bd4:	mov	w7, w2
    1bd8:	mov	w3, w4
    1bdc:	b.eq	2060 <send_tree+0x4ec>  // b.none
    1be0:	add	x8, x8, #0x1
    1be4:	mov	w2, w9
    1be8:	add	x9, x1, x8, lsl #2
    1bec:	ldrh	w9, [x9, #2]
    1bf0:	add	w4, w3, #0x1
    1bf4:	cmp	w4, w6
    1bf8:	b.ge	1c04 <send_tree+0x90>  // b.tcont
    1bfc:	cmp	w2, w9
    1c00:	b.eq	1bcc <send_tree+0x58>  // b.none
    1c04:	cmp	w4, w5
    1c08:	b.ge	1cbc <send_tree+0x148>  // b.tcont
    1c0c:	ldr	w6, [x0, #5940]
    1c10:	add	x5, x0, w2, uxtw #2
    1c14:	add	x3, x5, #0xabe
    1c18:	add	x5, x5, #0xabc
    1c1c:	b	1c30 <send_tree+0xbc>
    1c20:	add	w6, w6, w7
    1c24:	subs	w4, w4, #0x1
    1c28:	str	w6, [x0, #5940]
    1c2c:	b.eq	1ca4 <send_tree+0x130>  // b.none
    1c30:	ldrh	w7, [x3]
    1c34:	ldrh	w19, [x5]
    1c38:	ldrh	w20, [x0, #5936]
    1c3c:	sub	w21, w12, w7
    1c40:	lsl	w22, w19, w6
    1c44:	orr	w20, w20, w22
    1c48:	cmp	w6, w21
    1c4c:	strh	w20, [x0, #5936]
    1c50:	b.le	1c20 <send_tree+0xac>
    1c54:	ldr	x6, [x0, #40]
    1c58:	ldr	x21, [x0, #16]
    1c5c:	add	x22, x6, #0x1
    1c60:	str	x22, [x0, #40]
    1c64:	strb	w20, [x21, x6]
    1c68:	ldr	x6, [x0, #40]
    1c6c:	ldrb	w20, [x17, #1]
    1c70:	ldr	x21, [x0, #16]
    1c74:	add	x22, x6, #0x1
    1c78:	str	x22, [x0, #40]
    1c7c:	strb	w20, [x21, x6]
    1c80:	ldr	w6, [x0, #5940]
    1c84:	sub	w20, w12, w6
    1c88:	add	w6, w7, w6
    1c8c:	lsr	w7, w19, w20
    1c90:	strh	w7, [x0, #5936]
    1c94:	sub	w6, w6, #0x10
    1c98:	subs	w4, w4, #0x1
    1c9c:	str	w6, [x0, #5940]
    1ca0:	b.ne	1c30 <send_tree+0xbc>  // b.any
    1ca4:	mov	w4, wzr
    1ca8:	cbz	w9, 2054 <send_tree+0x4e0>
    1cac:	cmp	w2, w9
    1cb0:	cinc	w5, w10, ne  // ne = any
    1cb4:	cinc	w6, w14, ne  // ne = any
    1cb8:	b	1bd0 <send_tree+0x5c>
    1cbc:	cbz	w2, 1cd4 <send_tree+0x160>
    1cc0:	cmp	w2, w7
    1cc4:	b.ne	1d50 <send_tree+0x1dc>  // b.any
    1cc8:	ldr	w5, [x0, #5940]
    1ccc:	mov	w3, w4
    1cd0:	b	1e44 <send_tree+0x2d0>
    1cd4:	cmp	w3, #0x9
    1cd8:	b.gt	1dc8 <send_tree+0x254>
    1cdc:	ldrh	w4, [x0, #2818]
    1ce0:	ldr	w7, [x0, #5940]
    1ce4:	ldrh	w6, [x0, #2816]
    1ce8:	ldrh	w5, [x0, #5936]
    1cec:	sub	w19, w12, w4
    1cf0:	cmp	w7, w19
    1cf4:	lsl	w20, w6, w7
    1cf8:	orr	w5, w5, w20
    1cfc:	strh	w5, [x0, #5936]
    1d00:	b.le	1f40 <send_tree+0x3cc>
    1d04:	ldr	x7, [x0, #40]
    1d08:	ldr	x19, [x0, #16]
    1d0c:	add	x20, x7, #0x1
    1d10:	str	x20, [x0, #40]
    1d14:	strb	w5, [x19, x7]
    1d18:	add	x20, x0, x13
    1d1c:	ldr	x5, [x0, #40]
    1d20:	ldrb	w7, [x20, #1]
    1d24:	ldr	x19, [x0, #16]
    1d28:	add	x20, x5, #0x1
    1d2c:	str	x20, [x0, #40]
    1d30:	strb	w7, [x19, x5]
    1d34:	ldr	w5, [x0, #5940]
    1d38:	sub	w7, w12, w5
    1d3c:	add	w4, w4, w5
    1d40:	lsr	w5, w6, w7
    1d44:	strh	w5, [x0, #5936]
    1d48:	sub	w4, w4, #0x10
    1d4c:	b	1f44 <send_tree+0x3d0>
    1d50:	add	x5, x0, w2, uxtw #2
    1d54:	ldr	w7, [x0, #5940]
    1d58:	ldrh	w4, [x5, #2750]
    1d5c:	ldrh	w5, [x5, #2748]
    1d60:	ldrh	w6, [x0, #5936]
    1d64:	sub	w19, w12, w4
    1d68:	lsl	w20, w5, w7
    1d6c:	orr	w6, w6, w20
    1d70:	cmp	w7, w19
    1d74:	strh	w6, [x0, #5936]
    1d78:	b.le	1e3c <send_tree+0x2c8>
    1d7c:	ldr	x7, [x0, #40]
    1d80:	ldr	x19, [x0, #16]
    1d84:	add	x20, x7, #0x1
    1d88:	str	x20, [x0, #40]
    1d8c:	strb	w6, [x19, x7]
    1d90:	add	x20, x0, x13
    1d94:	ldr	x6, [x0, #40]
    1d98:	ldrb	w7, [x20, #1]
    1d9c:	ldr	x19, [x0, #16]
    1da0:	add	x20, x6, #0x1
    1da4:	str	x20, [x0, #40]
    1da8:	strb	w7, [x19, x6]
    1dac:	ldr	w6, [x0, #5940]
    1db0:	sub	w7, w12, w6
    1db4:	add	w4, w4, w6
    1db8:	lsr	w5, w5, w7
    1dbc:	strh	w5, [x0, #5936]
    1dc0:	sub	w5, w4, #0x10
    1dc4:	b	1e40 <send_tree+0x2cc>
    1dc8:	ldrh	w4, [x0, #2822]
    1dcc:	ldr	w7, [x0, #5940]
    1dd0:	ldrh	w6, [x0, #2820]
    1dd4:	ldrh	w5, [x0, #5936]
    1dd8:	sub	w19, w12, w4
    1ddc:	cmp	w7, w19
    1de0:	lsl	w20, w6, w7
    1de4:	orr	w5, w5, w20
    1de8:	strh	w5, [x0, #5936]
    1dec:	b.le	1fb8 <send_tree+0x444>
    1df0:	ldr	x7, [x0, #40]
    1df4:	ldr	x19, [x0, #16]
    1df8:	add	x20, x7, #0x1
    1dfc:	str	x20, [x0, #40]
    1e00:	strb	w5, [x19, x7]
    1e04:	add	x20, x0, x13
    1e08:	ldr	x5, [x0, #40]
    1e0c:	ldrb	w7, [x20, #1]
    1e10:	ldr	x19, [x0, #16]
    1e14:	add	x20, x5, #0x1
    1e18:	str	x20, [x0, #40]
    1e1c:	strb	w7, [x19, x5]
    1e20:	ldr	w5, [x0, #5940]
    1e24:	sub	w7, w12, w5
    1e28:	add	w4, w4, w5
    1e2c:	lsr	w5, w6, w7
    1e30:	strh	w5, [x0, #5936]
    1e34:	sub	w4, w4, #0x10
    1e38:	b	1fbc <send_tree+0x448>
    1e3c:	add	w5, w7, w4
    1e40:	str	w5, [x0, #5940]
    1e44:	ldrh	w6, [x0, #2814]
    1e48:	ldrh	w7, [x0, #2812]
    1e4c:	ldrh	w4, [x0, #5936]
    1e50:	sub	w19, w12, w6
    1e54:	lsl	w20, w7, w5
    1e58:	orr	w4, w4, w20
    1e5c:	cmp	w5, w19
    1e60:	strh	w4, [x0, #5936]
    1e64:	b.le	1eb4 <send_tree+0x340>
    1e68:	ldr	x5, [x0, #40]
    1e6c:	ldr	x19, [x0, #16]
    1e70:	add	x20, x5, #0x1
    1e74:	str	x20, [x0, #40]
    1e78:	strb	w4, [x19, x5]
    1e7c:	add	x20, x0, x13
    1e80:	ldr	x4, [x0, #40]
    1e84:	ldrb	w5, [x20, #1]
    1e88:	ldr	x19, [x0, #16]
    1e8c:	add	x20, x4, #0x1
    1e90:	str	x20, [x0, #40]
    1e94:	strb	w5, [x19, x4]
    1e98:	ldr	w4, [x0, #5940]
    1e9c:	sub	w5, w12, w4
    1ea0:	add	w6, w6, w4
    1ea4:	lsr	w4, w7, w5
    1ea8:	strh	w4, [x0, #5936]
    1eac:	sub	w5, w6, #0x10
    1eb0:	b	1eb8 <send_tree+0x344>
    1eb4:	add	w5, w5, w6
    1eb8:	add	w3, w3, w18
    1ebc:	and	w3, w3, #0xffff
    1ec0:	lsl	w6, w3, w5
    1ec4:	orr	w4, w4, w6
    1ec8:	cmp	w5, #0xf
    1ecc:	str	w5, [x0, #5940]
    1ed0:	strh	w4, [x0, #5936]
    1ed4:	b.lt	1f2c <send_tree+0x3b8>  // b.tstop
    1ed8:	ldr	x5, [x0, #40]
    1edc:	ldr	x6, [x0, #16]
    1ee0:	add	x7, x5, #0x1
    1ee4:	str	x7, [x0, #40]
    1ee8:	strb	w4, [x6, x5]
    1eec:	add	x7, x0, x13
    1ef0:	ldr	x4, [x0, #40]
    1ef4:	ldrb	w5, [x7, #1]
    1ef8:	ldr	x6, [x0, #16]
    1efc:	add	x7, x4, #0x1
    1f00:	str	x7, [x0, #40]
    1f04:	strb	w5, [x6, x4]
    1f08:	ldr	w4, [x0, #5940]
    1f0c:	sub	w5, w12, w4
    1f10:	lsr	w3, w3, w5
    1f14:	strh	w3, [x0, #5936]
    1f18:	sub	w3, w4, #0xe
    1f1c:	str	w3, [x0, #5940]
    1f20:	mov	w4, wzr
    1f24:	cbnz	w9, 1cac <send_tree+0x138>
    1f28:	b	2054 <send_tree+0x4e0>
    1f2c:	add	w3, w5, #0x2
    1f30:	str	w3, [x0, #5940]
    1f34:	mov	w4, wzr
    1f38:	cbnz	w9, 1cac <send_tree+0x138>
    1f3c:	b	2054 <send_tree+0x4e0>
    1f40:	add	w4, w7, w4
    1f44:	add	w3, w3, w15
    1f48:	and	w3, w3, #0xffff
    1f4c:	lsl	w6, w3, w4
    1f50:	orr	w5, w5, w6
    1f54:	cmp	w4, #0xe
    1f58:	str	w4, [x0, #5940]
    1f5c:	strh	w5, [x0, #5936]
    1f60:	b.lt	2030 <send_tree+0x4bc>  // b.tstop
    1f64:	ldr	x4, [x0, #40]
    1f68:	ldr	x6, [x0, #16]
    1f6c:	add	x7, x4, #0x1
    1f70:	str	x7, [x0, #40]
    1f74:	strb	w5, [x6, x4]
    1f78:	add	x7, x0, x13
    1f7c:	ldr	x4, [x0, #40]
    1f80:	ldrb	w5, [x7, #1]
    1f84:	ldr	x6, [x0, #16]
    1f88:	add	x7, x4, #0x1
    1f8c:	str	x7, [x0, #40]
    1f90:	strb	w5, [x6, x4]
    1f94:	ldr	w4, [x0, #5940]
    1f98:	sub	w5, w12, w4
    1f9c:	lsr	w3, w3, w5
    1fa0:	strh	w3, [x0, #5936]
    1fa4:	sub	w3, w4, #0xd
    1fa8:	str	w3, [x0, #5940]
    1fac:	mov	w4, wzr
    1fb0:	cbnz	w9, 1cac <send_tree+0x138>
    1fb4:	b	2054 <send_tree+0x4e0>
    1fb8:	add	w4, w7, w4
    1fbc:	add	w3, w3, w16
    1fc0:	and	w3, w3, #0xffff
    1fc4:	lsl	w6, w3, w4
    1fc8:	orr	w5, w5, w6
    1fcc:	cmp	w4, #0xa
    1fd0:	str	w4, [x0, #5940]
    1fd4:	strh	w5, [x0, #5936]
    1fd8:	b.lt	2044 <send_tree+0x4d0>  // b.tstop
    1fdc:	ldr	x4, [x0, #40]
    1fe0:	ldr	x6, [x0, #16]
    1fe4:	add	x7, x4, #0x1
    1fe8:	str	x7, [x0, #40]
    1fec:	strb	w5, [x6, x4]
    1ff0:	add	x7, x0, x13
    1ff4:	ldr	x4, [x0, #40]
    1ff8:	ldrb	w5, [x7, #1]
    1ffc:	ldr	x6, [x0, #16]
    2000:	add	x7, x4, #0x1
    2004:	str	x7, [x0, #40]
    2008:	strb	w5, [x6, x4]
    200c:	ldr	w4, [x0, #5940]
    2010:	sub	w5, w12, w4
    2014:	lsr	w3, w3, w5
    2018:	strh	w3, [x0, #5936]
    201c:	sub	w3, w4, #0x9
    2020:	str	w3, [x0, #5940]
    2024:	mov	w4, wzr
    2028:	cbnz	w9, 1cac <send_tree+0x138>
    202c:	b	2054 <send_tree+0x4e0>
    2030:	add	w3, w4, #0x3
    2034:	str	w3, [x0, #5940]
    2038:	mov	w4, wzr
    203c:	cbnz	w9, 1cac <send_tree+0x138>
    2040:	b	2054 <send_tree+0x4e0>
    2044:	add	w3, w4, #0x7
    2048:	str	w3, [x0, #5940]
    204c:	mov	w4, wzr
    2050:	cbnz	w9, 1cac <send_tree+0x138>
    2054:	mov	w6, #0x8a                  	// #138
    2058:	mov	w5, #0x3                   	// #3
    205c:	b	1bd0 <send_tree+0x5c>
    2060:	ldp	x20, x19, [sp, #16]
    2064:	ldp	x22, x21, [sp], #32
    2068:	ret

zutil.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <zlibVersion>:
   0:	adrp	x0, 0 <zlibVersion>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <zlibCompileFlags>:
   c:	mov	w0, #0xa9                  	// #169
  10:	ret

0000000000000014 <zError>:
  14:	mov	w8, #0x2                   	// #2
  18:	adrp	x9, 0 <zlibVersion>
  1c:	sub	x8, x8, w0, sxtw
  20:	add	x9, x9, #0x0
  24:	ldr	x0, [x9, x8, lsl #3]
  28:	ret

000000000000002c <zcalloc>:
  2c:	mul	w0, w2, w1
  30:	b	0 <malloc>

0000000000000034 <zcfree>:
  34:	mov	x0, x1
  38:	b	0 <free>

compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <compress2>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x29, x30, [sp, #112]
   8:	stp	x22, x21, [sp, #144]
   c:	stp	x20, x19, [sp, #160]
  10:	str	x23, [sp, #128]
  14:	ldr	x23, [x1]
  18:	mov	x21, x2
  1c:	adrp	x2, 0 <compress2>
  20:	mov	x20, x3
  24:	mov	x19, x1
  28:	mov	x22, x0
  2c:	str	xzr, [x1]
  30:	add	x2, x2, #0x0
  34:	mov	x0, sp
  38:	mov	w3, #0x70                  	// #112
  3c:	mov	w1, w4
  40:	add	x29, sp, #0x70
  44:	stp	xzr, xzr, [sp, #64]
  48:	str	xzr, [sp, #80]
  4c:	bl	0 <deflateInit_>
  50:	cbnz	w0, e0 <compress2+0xe0>
  54:	mov	w8, wzr
  58:	str	x22, [sp, #24]
  5c:	str	wzr, [sp, #32]
  60:	str	x21, [sp]
  64:	str	wzr, [sp, #8]
  68:	mov	w22, #0xffffffff            	// #-1
  6c:	cbz	w8, 98 <compress2+0x98>
  70:	ldr	w8, [sp, #8]
  74:	cbz	w8, b0 <compress2+0xb0>
  78:	cmp	x20, #0x0
  7c:	cset	w8, eq  // eq = none
  80:	lsl	w1, w8, #2
  84:	mov	x0, sp
  88:	bl	0 <deflate>
  8c:	cbnz	w0, c4 <compress2+0xc4>
  90:	ldr	w8, [sp, #32]
  94:	cbnz	w8, 70 <compress2+0x70>
  98:	cmp	x23, x22
  9c:	csel	x8, x23, x22, cc  // cc = lo, ul, last
  a0:	sub	x23, x23, x8
  a4:	str	w8, [sp, #32]
  a8:	ldr	w8, [sp, #8]
  ac:	cbnz	w8, 78 <compress2+0x78>
  b0:	cmp	x20, x22
  b4:	csel	x8, x20, x22, cc  // cc = lo, ul, last
  b8:	sub	x20, x20, x8
  bc:	str	w8, [sp, #8]
  c0:	b	78 <compress2+0x78>
  c4:	ldr	x8, [sp, #40]
  c8:	mov	w21, w0
  cc:	mov	x0, sp
  d0:	str	x8, [x19]
  d4:	bl	0 <deflateEnd>
  d8:	cmp	w21, #0x1
  dc:	csel	w0, wzr, w21, eq  // eq = none
  e0:	ldp	x20, x19, [sp, #160]
  e4:	ldp	x22, x21, [sp, #144]
  e8:	ldr	x23, [sp, #128]
  ec:	ldp	x29, x30, [sp, #112]
  f0:	add	sp, sp, #0xb0
  f4:	ret

00000000000000f8 <compress>:
  f8:	sub	sp, sp, #0xb0
  fc:	stp	x29, x30, [sp, #112]
 100:	stp	x22, x21, [sp, #144]
 104:	stp	x20, x19, [sp, #160]
 108:	str	x23, [sp, #128]
 10c:	ldr	x23, [x1]
 110:	mov	x21, x2
 114:	adrp	x2, 0 <compress2>
 118:	mov	x20, x3
 11c:	mov	x19, x1
 120:	mov	x22, x0
 124:	str	xzr, [x1]
 128:	add	x2, x2, #0x0
 12c:	mov	x0, sp
 130:	mov	w1, #0xffffffff            	// #-1
 134:	mov	w3, #0x70                  	// #112
 138:	add	x29, sp, #0x70
 13c:	stp	xzr, xzr, [sp, #64]
 140:	str	xzr, [sp, #80]
 144:	bl	0 <deflateInit_>
 148:	cbnz	w0, 1d8 <compress+0xe0>
 14c:	mov	w8, wzr
 150:	str	x22, [sp, #24]
 154:	str	wzr, [sp, #32]
 158:	str	x21, [sp]
 15c:	str	wzr, [sp, #8]
 160:	mov	w22, #0xffffffff            	// #-1
 164:	cbz	w8, 190 <compress+0x98>
 168:	ldr	w8, [sp, #8]
 16c:	cbz	w8, 1a8 <compress+0xb0>
 170:	cmp	x20, #0x0
 174:	cset	w8, eq  // eq = none
 178:	lsl	w1, w8, #2
 17c:	mov	x0, sp
 180:	bl	0 <deflate>
 184:	cbnz	w0, 1bc <compress+0xc4>
 188:	ldr	w8, [sp, #32]
 18c:	cbnz	w8, 168 <compress+0x70>
 190:	cmp	x23, x22
 194:	csel	x8, x23, x22, cc  // cc = lo, ul, last
 198:	sub	x23, x23, x8
 19c:	str	w8, [sp, #32]
 1a0:	ldr	w8, [sp, #8]
 1a4:	cbnz	w8, 170 <compress+0x78>
 1a8:	cmp	x20, x22
 1ac:	csel	x8, x20, x22, cc  // cc = lo, ul, last
 1b0:	sub	x20, x20, x8
 1b4:	str	w8, [sp, #8]
 1b8:	b	170 <compress+0x78>
 1bc:	ldr	x8, [sp, #40]
 1c0:	mov	w21, w0
 1c4:	mov	x0, sp
 1c8:	str	x8, [x19]
 1cc:	bl	0 <deflateEnd>
 1d0:	cmp	w21, #0x1
 1d4:	csel	w0, wzr, w21, eq  // eq = none
 1d8:	ldp	x20, x19, [sp, #160]
 1dc:	ldp	x22, x21, [sp, #144]
 1e0:	ldr	x23, [sp, #128]
 1e4:	ldp	x29, x30, [sp, #112]
 1e8:	add	sp, sp, #0xb0
 1ec:	ret

00000000000001f0 <compressBound>:
 1f0:	add	x8, x0, x0, lsr #12
 1f4:	add	x8, x8, x0, lsr #14
 1f8:	add	x8, x8, x0, lsr #25
 1fc:	add	x0, x8, #0xd
 200:	ret

uncompr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <uncompress2>:
   0:	sub	sp, sp, #0xc0
   4:	stp	x29, x30, [sp, #112]
   8:	stp	x24, x23, [sp, #144]
   c:	stp	x22, x21, [sp, #160]
  10:	stp	x20, x19, [sp, #176]
  14:	ldr	x23, [x1]
  18:	ldr	x24, [x3]
  1c:	mov	x20, x3
  20:	mov	x19, x1
  24:	str	x25, [sp, #128]
  28:	add	x29, sp, #0x70
  2c:	cbz	x23, 3c <uncompress2+0x3c>
  30:	mov	x21, x0
  34:	str	xzr, [x19]
  38:	b	44 <uncompress2+0x44>
  3c:	add	x21, x29, #0x1c
  40:	mov	w23, #0x1                   	// #1
  44:	adrp	x1, 0 <uncompress2>
  48:	str	x2, [sp]
  4c:	add	x1, x1, #0x0
  50:	mov	x0, sp
  54:	mov	w2, #0x70                  	// #112
  58:	str	wzr, [sp, #8]
  5c:	stp	xzr, xzr, [sp, #72]
  60:	str	xzr, [sp, #64]
  64:	bl	0 <inflateInit_>
  68:	mov	w22, w0
  6c:	cbz	w0, 90 <uncompress2+0x90>
  70:	mov	w0, w22
  74:	ldp	x20, x19, [sp, #176]
  78:	ldp	x22, x21, [sp, #160]
  7c:	ldp	x24, x23, [sp, #144]
  80:	ldr	x25, [sp, #128]
  84:	ldp	x29, x30, [sp, #112]
  88:	add	sp, sp, #0xc0
  8c:	ret
  90:	mov	w8, wzr
  94:	str	x21, [sp, #24]
  98:	str	wzr, [sp, #32]
  9c:	mov	w25, #0xffffffff            	// #-1
  a0:	cbz	w8, c0 <uncompress2+0xc0>
  a4:	ldr	w8, [sp, #8]
  a8:	cbz	w8, d8 <uncompress2+0xd8>
  ac:	mov	x0, sp
  b0:	mov	w1, wzr
  b4:	bl	0 <inflate>
  b8:	cbz	w0, f8 <uncompress2+0xf8>
  bc:	b	104 <uncompress2+0x104>
  c0:	cmp	x23, x25
  c4:	csel	x8, x23, x25, cc  // cc = lo, ul, last
  c8:	sub	x23, x23, x8
  cc:	str	w8, [sp, #32]
  d0:	ldr	w8, [sp, #8]
  d4:	cbnz	w8, ac <uncompress2+0xac>
  d8:	cmp	x24, x25
  dc:	csel	x8, x24, x25, cc  // cc = lo, ul, last
  e0:	sub	x24, x24, x8
  e4:	str	w8, [sp, #8]
  e8:	mov	x0, sp
  ec:	mov	w1, wzr
  f0:	bl	0 <inflate>
  f4:	cbnz	w0, 104 <uncompress2+0x104>
  f8:	ldr	w8, [sp, #32]
  fc:	cbnz	w8, a4 <uncompress2+0xa4>
 100:	b	c0 <uncompress2+0xc0>
 104:	ldr	w8, [sp, #8]
 108:	ldr	x9, [x20]
 10c:	mov	w22, w0
 110:	add	x8, x24, x8
 114:	sub	x8, x9, x8
 118:	str	x8, [x20]
 11c:	ldr	x8, [sp, #40]
 120:	add	x9, x29, #0x1c
 124:	cmp	x21, x9
 128:	b.eq	144 <uncompress2+0x144>  // b.none
 12c:	str	x8, [x19]
 130:	mov	x0, sp
 134:	bl	0 <inflateEnd>
 138:	cmp	w22, #0x2
 13c:	b.ne	164 <uncompress2+0x164>  // b.any
 140:	b	180 <uncompress2+0x180>
 144:	cmp	x8, #0x0
 148:	mov	w8, #0xfffffffb            	// #-5
 14c:	ccmp	w22, w8, #0x0, ne  // ne = any
 150:	csinc	x23, x23, xzr, ne  // ne = any
 154:	mov	x0, sp
 158:	bl	0 <inflateEnd>
 15c:	cmp	w22, #0x2
 160:	b.eq	180 <uncompress2+0x180>  // b.none
 164:	cmp	w22, #0x1
 168:	b.eq	188 <uncompress2+0x188>  // b.none
 16c:	cmn	w22, #0x5
 170:	b.ne	70 <uncompress2+0x70>  // b.any
 174:	ldr	w8, [sp, #32]
 178:	cmn	x23, x8
 17c:	b.eq	70 <uncompress2+0x70>  // b.none
 180:	mov	w22, #0xfffffffd            	// #-3
 184:	b	70 <uncompress2+0x70>
 188:	mov	w22, wzr
 18c:	b	70 <uncompress2+0x70>

0000000000000190 <uncompress>:
 190:	sub	sp, sp, #0x20
 194:	str	x3, [sp, #8]
 198:	add	x3, sp, #0x8
 19c:	stp	x29, x30, [sp, #16]
 1a0:	add	x29, sp, #0x10
 1a4:	bl	0 <uncompress2>
 1a8:	ldp	x29, x30, [sp, #16]
 1ac:	add	sp, sp, #0x20
 1b0:	ret

gzclose.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzclose>:
   0:	cbz	x0, 18 <gzclose+0x18>
   4:	ldr	w8, [x0, #24]
   8:	mov	w9, #0x1c4f                	// #7247
   c:	cmp	w8, w9
  10:	b.ne	20 <gzclose+0x20>  // b.any
  14:	b	0 <gzclose_r>
  18:	mov	w0, #0xfffffffe            	// #-2
  1c:	ret
  20:	b	0 <gzclose_w>

gzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzopen>:
   0:	mov	x2, x1
   4:	mov	w1, #0xffffffff            	// #-1
   8:	b	c <gz_open>

000000000000000c <gz_open>:
   c:	stp	x29, x30, [sp, #-80]!
  10:	stp	x26, x25, [sp, #16]
  14:	stp	x24, x23, [sp, #32]
  18:	stp	x22, x21, [sp, #48]
  1c:	stp	x20, x19, [sp, #64]
  20:	mov	x29, sp
  24:	cbz	x0, 2b4 <gz_open+0x2a8>
  28:	mov	x21, x0
  2c:	mov	w0, #0xe8                  	// #232
  30:	mov	x22, x2
  34:	mov	w20, w1
  38:	bl	0 <malloc>
  3c:	mov	x19, x0
  40:	cbz	x0, 2b8 <gz_open+0x2ac>
  44:	adrp	x8, 0 <gzopen>
  48:	ldr	d0, [x8]
  4c:	movi	d1, #0xffffffff
  50:	str	xzr, [x19, #112]
  54:	str	wzr, [x19, #24]
  58:	str	d1, [x19, #88]
  5c:	str	d0, [x19, #40]
  60:	str	wzr, [x19, #64]
  64:	ldrb	w15, [x22]
  68:	cbz	w15, 2ac <gz_open+0x2a0>
  6c:	adrp	x10, 0 <gzopen>
  70:	mov	w8, wzr
  74:	mov	w24, wzr
  78:	mov	w25, wzr
  7c:	mov	w26, wzr
  80:	add	x9, x22, #0x1
  84:	add	x10, x10, #0x0
  88:	mov	w11, #0x4                   	// #4
  8c:	mov	w12, #0x3                   	// #3
  90:	mov	w13, #0x1                   	// #1
  94:	mov	w14, #0x2                   	// #2
  98:	b	ac <gz_open+0xa0>
  9c:	sub	w15, w15, #0x30
  a0:	str	w15, [x19, #88]
  a4:	ldrb	w15, [x9], #1
  a8:	cbz	w15, 13c <gz_open+0x130>
  ac:	sub	w16, w15, #0x30
  b0:	and	w16, w16, #0xff
  b4:	and	w15, w15, #0xff
  b8:	cmp	w16, #0x9
  bc:	b.ls	9c <gz_open+0x90>  // b.plast
  c0:	sub	w15, w15, #0x2b
  c4:	cmp	w15, #0x4d
  c8:	b.hi	a4 <gz_open+0x98>  // b.pmore
  cc:	adr	x16, a4 <gz_open+0x98>
  d0:	ldrb	w17, [x10, x15]
  d4:	add	x16, x16, x17, lsl #2
  d8:	br	x16
  dc:	str	w11, [x19, #92]
  e0:	b	a4 <gz_open+0x98>
  e4:	str	w12, [x19, #92]
  e8:	b	a4 <gz_open+0x98>
  ec:	mov	w8, #0x1                   	// #1
  f0:	str	w8, [x19, #64]
  f4:	b	a4 <gz_open+0x98>
  f8:	mov	w24, #0x1                   	// #1
  fc:	str	w24, [x19, #24]
 100:	b	a4 <gz_open+0x98>
 104:	mov	w26, #0x1                   	// #1
 108:	b	a4 <gz_open+0x98>
 10c:	str	w13, [x19, #92]
 110:	b	a4 <gz_open+0x98>
 114:	str	w14, [x19, #92]
 118:	b	a4 <gz_open+0x98>
 11c:	mov	w24, #0x1c4f                	// #7247
 120:	str	w24, [x19, #24]
 124:	b	a4 <gz_open+0x98>
 128:	mov	w24, #0x79b1                	// #31153
 12c:	str	w24, [x19, #24]
 130:	b	a4 <gz_open+0x98>
 134:	mov	w25, #0x1                   	// #1
 138:	b	a4 <gz_open+0x98>
 13c:	mov	w9, #0x1c4f                	// #7247
 140:	cmp	w24, w9
 144:	b.eq	150 <gz_open+0x144>  // b.none
 148:	cbz	w24, 2ac <gz_open+0x2a0>
 14c:	b	15c <gz_open+0x150>
 150:	cbnz	w8, 2ac <gz_open+0x2a0>
 154:	mov	w8, #0x1                   	// #1
 158:	str	w8, [x19, #64]
 15c:	mov	x0, x21
 160:	bl	0 <strlen>
 164:	add	x23, x0, #0x1
 168:	mov	x0, x23
 16c:	bl	0 <malloc>
 170:	str	x0, [x19, #32]
 174:	cbz	x0, 2ac <gz_open+0x2a0>
 178:	adrp	x2, 0 <gzopen>
 17c:	add	x2, x2, #0x0
 180:	mov	x1, x23
 184:	mov	x3, x21
 188:	mov	x22, x0
 18c:	bl	0 <snprintf>
 190:	cmp	w26, #0x0
 194:	mov	w9, #0x1c4f                	// #7247
 198:	cset	w8, ne  // ne = any
 19c:	cmp	w24, w9
 1a0:	b.ne	1ac <gz_open+0x1a0>  // b.any
 1a4:	mov	w9, wzr
 1a8:	b	1d4 <gz_open+0x1c8>
 1ac:	cmp	w25, #0x0
 1b0:	mov	w9, #0xc1                  	// #193
 1b4:	mov	w10, #0x41                  	// #65
 1b8:	mov	w11, #0x79b1                	// #31153
 1bc:	mov	w12, #0x400                 	// #1024
 1c0:	csel	w9, w10, w9, eq  // eq = none
 1c4:	cmp	w24, w11
 1c8:	mov	w10, #0x200                 	// #512
 1cc:	csel	w10, w10, w12, eq  // eq = none
 1d0:	orr	w9, w10, w9
 1d4:	tbnz	w20, #31, 1e0 <gz_open+0x1d4>
 1d8:	str	w20, [x19, #28]
 1dc:	b	204 <gz_open+0x1f8>
 1e0:	lsl	w8, w8, #19
 1e4:	orr	w1, w9, w8
 1e8:	mov	w2, #0x1b6                 	// #438
 1ec:	mov	x0, x21
 1f0:	bl	0 <open>
 1f4:	mov	w20, w0
 1f8:	cmn	w0, #0x1
 1fc:	str	w0, [x19, #28]
 200:	b.eq	2a4 <gz_open+0x298>  // b.none
 204:	cmp	w24, #0x1
 208:	b.ne	228 <gz_open+0x21c>  // b.any
 20c:	mov	w2, #0x2                   	// #2
 210:	mov	w0, w20
 214:	mov	x1, xzr
 218:	bl	0 <lseek64>
 21c:	mov	w8, #0x79b1                	// #31153
 220:	str	w8, [x19, #24]
 224:	b	270 <gz_open+0x264>
 228:	ldr	w8, [x19, #24]
 22c:	mov	w21, #0x1c4f                	// #7247
 230:	cmp	w8, w21
 234:	b.ne	270 <gz_open+0x264>  // b.any
 238:	mov	w2, #0x1                   	// #1
 23c:	mov	w0, w20
 240:	mov	x1, xzr
 244:	bl	0 <lseek64>
 248:	ldr	w8, [x19, #24]
 24c:	cmn	x0, #0x1
 250:	csel	x9, xzr, x0, eq  // eq = none
 254:	str	x9, [x19, #72]
 258:	cmp	w8, w21
 25c:	str	wzr, [x19]
 260:	b.ne	274 <gz_open+0x268>  // b.any
 264:	str	xzr, [x19, #80]
 268:	str	wzr, [x19, #68]
 26c:	b	274 <gz_open+0x268>
 270:	str	wzr, [x19]
 274:	ldr	x0, [x19, #112]
 278:	str	wzr, [x19, #104]
 27c:	cbz	x0, 294 <gz_open+0x288>
 280:	ldr	w8, [x19, #108]
 284:	cmn	w8, #0x4
 288:	b.eq	290 <gz_open+0x284>  // b.none
 28c:	bl	0 <free>
 290:	str	xzr, [x19, #112]
 294:	str	wzr, [x19, #108]
 298:	str	xzr, [x19, #16]
 29c:	str	wzr, [x19, #128]
 2a0:	b	2b8 <gz_open+0x2ac>
 2a4:	mov	x0, x22
 2a8:	bl	0 <free>
 2ac:	mov	x0, x19
 2b0:	bl	0 <free>
 2b4:	mov	x19, xzr
 2b8:	mov	x0, x19
 2bc:	ldp	x20, x19, [sp, #64]
 2c0:	ldp	x22, x21, [sp, #48]
 2c4:	ldp	x24, x23, [sp, #32]
 2c8:	ldp	x26, x25, [sp, #16]
 2cc:	ldp	x29, x30, [sp], #80
 2d0:	ret

00000000000002d4 <gzopen64>:
 2d4:	mov	x2, x1
 2d8:	mov	w1, #0xffffffff            	// #-1
 2dc:	b	c <gz_open>

00000000000002e0 <gzdopen>:
 2e0:	stp	x29, x30, [sp, #-48]!
 2e4:	cmn	w0, #0x1
 2e8:	str	x21, [sp, #16]
 2ec:	stp	x20, x19, [sp, #32]
 2f0:	mov	x29, sp
 2f4:	b.eq	354 <gzdopen+0x74>  // b.none
 2f8:	mov	w19, w0
 2fc:	mov	w0, #0x13                  	// #19
 300:	mov	x20, x1
 304:	bl	0 <malloc>
 308:	cbz	x0, 354 <gzdopen+0x74>
 30c:	adrp	x2, 0 <gzopen>
 310:	add	x2, x2, #0x0
 314:	mov	w1, #0x13                  	// #19
 318:	mov	w3, w19
 31c:	mov	x21, x0
 320:	bl	0 <snprintf>
 324:	mov	x0, x21
 328:	mov	w1, w19
 32c:	mov	x2, x20
 330:	bl	c <gz_open>
 334:	mov	x19, x0
 338:	mov	x0, x21
 33c:	bl	0 <free>
 340:	mov	x0, x19
 344:	ldp	x20, x19, [sp, #32]
 348:	ldr	x21, [sp, #16]
 34c:	ldp	x29, x30, [sp], #48
 350:	ret
 354:	mov	x0, xzr
 358:	ldp	x20, x19, [sp, #32]
 35c:	ldr	x21, [sp, #16]
 360:	ldp	x29, x30, [sp], #48
 364:	ret

0000000000000368 <gzbuffer>:
 368:	cbz	x0, 3b8 <gzbuffer+0x50>
 36c:	ldr	w9, [x0, #24]
 370:	mov	w10, #0x79b1                	// #31153
 374:	mov	x8, x0
 378:	cmp	w9, w10
 37c:	b.eq	38c <gzbuffer+0x24>  // b.none
 380:	mov	w10, #0x1c4f                	// #7247
 384:	cmp	w9, w10
 388:	b.ne	3b8 <gzbuffer+0x50>  // b.any
 38c:	cmp	w1, w1, lsl #1
 390:	mov	w0, #0xffffffff            	// #-1
 394:	b.hi	3b4 <gzbuffer+0x4c>  // b.pmore
 398:	ldr	w9, [x8, #40]
 39c:	cbnz	w9, 3b4 <gzbuffer+0x4c>
 3a0:	cmp	w1, #0x2
 3a4:	mov	w9, #0x2                   	// #2
 3a8:	mov	w0, wzr
 3ac:	csel	w9, w1, w9, hi  // hi = pmore
 3b0:	str	w9, [x8, #44]
 3b4:	ret
 3b8:	mov	w0, #0xffffffff            	// #-1
 3bc:	ret

00000000000003c0 <gzrewind>:
 3c0:	stp	x29, x30, [sp, #-32]!
 3c4:	str	x19, [sp, #16]
 3c8:	mov	x29, sp
 3cc:	cbz	x0, 464 <gzrewind+0xa4>
 3d0:	ldr	w8, [x0, #24]
 3d4:	mov	w9, #0x1c4f                	// #7247
 3d8:	mov	x19, x0
 3dc:	cmp	w8, w9
 3e0:	b.ne	464 <gzrewind+0xa4>  // b.any
 3e4:	ldr	w8, [x19, #108]
 3e8:	cbz	w8, 3f4 <gzrewind+0x34>
 3ec:	cmn	w8, #0x5
 3f0:	b.ne	464 <gzrewind+0xa4>  // b.any
 3f4:	ldr	w0, [x19, #28]
 3f8:	ldr	x1, [x19, #72]
 3fc:	mov	w2, wzr
 400:	bl	0 <lseek64>
 404:	cmn	x0, #0x1
 408:	b.eq	458 <gzrewind+0x98>  // b.none
 40c:	ldr	w8, [x19, #24]
 410:	mov	w9, #0x1c4f                	// #7247
 414:	str	wzr, [x19]
 418:	cmp	w8, w9
 41c:	b.ne	428 <gzrewind+0x68>  // b.any
 420:	str	xzr, [x19, #80]
 424:	str	wzr, [x19, #68]
 428:	ldr	x0, [x19, #112]
 42c:	str	wzr, [x19, #104]
 430:	cbz	x0, 448 <gzrewind+0x88>
 434:	ldr	w8, [x19, #108]
 438:	cmn	w8, #0x4
 43c:	b.eq	444 <gzrewind+0x84>  // b.none
 440:	bl	0 <free>
 444:	str	xzr, [x19, #112]
 448:	mov	w0, wzr
 44c:	str	wzr, [x19, #108]
 450:	str	xzr, [x19, #16]
 454:	str	wzr, [x19, #128]
 458:	ldr	x19, [sp, #16]
 45c:	ldp	x29, x30, [sp], #32
 460:	ret
 464:	mov	w0, #0xffffffff            	// #-1
 468:	ldr	x19, [sp, #16]
 46c:	ldp	x29, x30, [sp], #32
 470:	ret

0000000000000474 <gzseek64>:
 474:	stp	x29, x30, [sp, #-32]!
 478:	stp	x20, x19, [sp, #16]
 47c:	mov	x29, sp
 480:	cbz	x0, 680 <gzseek64+0x20c>
 484:	ldr	w8, [x0, #24]
 488:	mov	w9, #0x79b1                	// #31153
 48c:	mov	x19, x1
 490:	mov	x20, x0
 494:	cmp	w8, w9
 498:	b.eq	4a8 <gzseek64+0x34>  // b.none
 49c:	mov	w9, #0x1c4f                	// #7247
 4a0:	cmp	w8, w9
 4a4:	b.ne	680 <gzseek64+0x20c>  // b.any
 4a8:	ldr	w9, [x20, #108]
 4ac:	cbz	w9, 4b8 <gzseek64+0x44>
 4b0:	cmn	w9, #0x5
 4b4:	b.ne	680 <gzseek64+0x20c>  // b.any
 4b8:	cmp	w2, #0x1
 4bc:	b.ls	4d0 <gzseek64+0x5c>  // b.plast
 4c0:	mov	x0, #0xffffffffffffffff    	// #-1
 4c4:	ldp	x20, x19, [sp, #16]
 4c8:	ldp	x29, x30, [sp], #32
 4cc:	ret
 4d0:	cbz	w2, 4f8 <gzseek64+0x84>
 4d4:	ldr	w10, [x20, #104]
 4d8:	cbz	w10, 4e4 <gzseek64+0x70>
 4dc:	ldr	x10, [x20, #96]
 4e0:	add	x19, x10, x19
 4e4:	mov	w10, #0x1c4f                	// #7247
 4e8:	cmp	w8, w10
 4ec:	str	wzr, [x20, #104]
 4f0:	b.eq	510 <gzseek64+0x9c>  // b.none
 4f4:	b	58c <gzseek64+0x118>
 4f8:	ldr	x10, [x20, #16]
 4fc:	sub	x19, x19, x10
 500:	mov	w10, #0x1c4f                	// #7247
 504:	cmp	w8, w10
 508:	str	wzr, [x20, #104]
 50c:	b.ne	58c <gzseek64+0x118>  // b.any
 510:	ldr	w10, [x20, #68]
 514:	cmp	w10, #0x1
 518:	b.ne	58c <gzseek64+0x118>  // b.any
 51c:	ldr	x10, [x20, #16]
 520:	cmn	x10, x19
 524:	b.mi	58c <gzseek64+0x118>  // b.first
 528:	ldr	w8, [x20]
 52c:	ldr	w0, [x20, #28]
 530:	mov	w2, #0x1                   	// #1
 534:	sub	x1, x19, x8
 538:	bl	0 <lseek64>
 53c:	cmn	x0, #0x1
 540:	b.eq	4c4 <gzseek64+0x50>  // b.none
 544:	ldr	x0, [x20, #112]
 548:	str	wzr, [x20]
 54c:	str	xzr, [x20, #80]
 550:	str	wzr, [x20, #104]
 554:	cbz	x0, 56c <gzseek64+0xf8>
 558:	ldr	w8, [x20, #108]
 55c:	cmn	w8, #0x4
 560:	b.eq	568 <gzseek64+0xf4>  // b.none
 564:	bl	0 <free>
 568:	str	xzr, [x20, #112]
 56c:	ldr	x8, [x20, #16]
 570:	str	wzr, [x20, #108]
 574:	str	wzr, [x20, #128]
 578:	add	x0, x8, x19
 57c:	str	x0, [x20, #16]
 580:	ldp	x20, x19, [sp, #16]
 584:	ldp	x29, x30, [sp], #32
 588:	ret
 58c:	tbnz	x19, #63, 5e8 <gzseek64+0x174>
 590:	mov	w9, #0x1c4f                	// #7247
 594:	cmp	w8, w9
 598:	b.ne	5c4 <gzseek64+0x150>  // b.any
 59c:	ldr	w8, [x20]
 5a0:	ldp	x9, x10, [x20, #8]
 5a4:	cmp	x19, x8
 5a8:	csel	w11, w19, w8, lt  // lt = tstop
 5ac:	sub	w8, w8, w11
 5b0:	add	x9, x9, x11
 5b4:	add	x10, x10, x11
 5b8:	sub	x19, x19, x11
 5bc:	str	w8, [x20]
 5c0:	stp	x9, x10, [x20, #8]
 5c4:	cbz	x19, 5d4 <gzseek64+0x160>
 5c8:	mov	w8, #0x1                   	// #1
 5cc:	str	w8, [x20, #104]
 5d0:	str	x19, [x20, #96]
 5d4:	ldr	x8, [x20, #16]
 5d8:	add	x0, x8, x19
 5dc:	ldp	x20, x19, [sp, #16]
 5e0:	ldp	x29, x30, [sp], #32
 5e4:	ret
 5e8:	mov	w10, #0x1c4f                	// #7247
 5ec:	cmp	w8, w10
 5f0:	b.ne	680 <gzseek64+0x20c>  // b.any
 5f4:	ldr	x8, [x20, #16]
 5f8:	adds	x19, x8, x19
 5fc:	b.mi	680 <gzseek64+0x20c>  // b.first
 600:	cbz	w9, 60c <gzseek64+0x198>
 604:	cmn	w9, #0x5
 608:	b.ne	680 <gzseek64+0x20c>  // b.any
 60c:	ldr	w0, [x20, #28]
 610:	ldr	x1, [x20, #72]
 614:	mov	w2, wzr
 618:	bl	0 <lseek64>
 61c:	cmn	x0, #0x1
 620:	b.eq	4c4 <gzseek64+0x50>  // b.none
 624:	ldr	w8, [x20, #24]
 628:	mov	w9, #0x1c4f                	// #7247
 62c:	str	wzr, [x20]
 630:	cmp	w8, w9
 634:	b.ne	640 <gzseek64+0x1cc>  // b.any
 638:	str	xzr, [x20, #80]
 63c:	str	wzr, [x20, #68]
 640:	ldr	x0, [x20, #112]
 644:	str	wzr, [x20, #104]
 648:	cbz	x0, 664 <gzseek64+0x1f0>
 64c:	ldr	w9, [x20, #108]
 650:	cmn	w9, #0x4
 654:	b.eq	660 <gzseek64+0x1ec>  // b.none
 658:	bl	0 <free>
 65c:	ldr	w8, [x20, #24]
 660:	str	xzr, [x20, #112]
 664:	str	wzr, [x20, #108]
 668:	str	xzr, [x20, #16]
 66c:	str	wzr, [x20, #128]
 670:	mov	w9, #0x1c4f                	// #7247
 674:	cmp	w8, w9
 678:	b.eq	59c <gzseek64+0x128>  // b.none
 67c:	b	5c4 <gzseek64+0x150>
 680:	mov	x0, #0xffffffffffffffff    	// #-1
 684:	ldp	x20, x19, [sp, #16]
 688:	ldp	x29, x30, [sp], #32
 68c:	ret

0000000000000690 <gz_error>:
 690:	stp	x29, x30, [sp, #-48]!
 694:	stp	x22, x21, [sp, #16]
 698:	stp	x20, x19, [sp, #32]
 69c:	mov	x20, x0
 6a0:	ldr	x0, [x0, #112]
 6a4:	mov	x19, x2
 6a8:	mov	w21, w1
 6ac:	mov	x29, sp
 6b0:	cbz	x0, 6c8 <gz_error+0x38>
 6b4:	ldr	w8, [x20, #108]
 6b8:	cmn	w8, #0x4
 6bc:	b.eq	6c4 <gz_error+0x34>  // b.none
 6c0:	bl	0 <free>
 6c4:	str	xzr, [x20, #112]
 6c8:	cmn	w21, #0x5
 6cc:	b.eq	6d8 <gz_error+0x48>  // b.none
 6d0:	cbz	w21, 6d8 <gz_error+0x48>
 6d4:	str	wzr, [x20]
 6d8:	cmn	w21, #0x4
 6dc:	str	w21, [x20, #108]
 6e0:	b.eq	768 <gz_error+0xd8>  // b.none
 6e4:	cbz	x19, 768 <gz_error+0xd8>
 6e8:	ldr	x21, [x20, #32]
 6ec:	mov	x0, x21
 6f0:	bl	0 <strlen>
 6f4:	mov	x22, x0
 6f8:	mov	x0, x19
 6fc:	bl	0 <strlen>
 700:	add	x8, x22, x0
 704:	add	x0, x8, #0x3
 708:	bl	0 <malloc>
 70c:	str	x0, [x20, #112]
 710:	cbz	x0, 760 <gz_error+0xd0>
 714:	mov	x22, x0
 718:	mov	x0, x21
 71c:	bl	0 <strlen>
 720:	mov	x20, x0
 724:	mov	x0, x19
 728:	bl	0 <strlen>
 72c:	add	x8, x20, x0
 730:	mov	x0, x22
 734:	mov	x3, x21
 738:	mov	x5, x19
 73c:	ldp	x20, x19, [sp, #32]
 740:	ldp	x22, x21, [sp, #16]
 744:	adrp	x2, 0 <gzopen>
 748:	adrp	x4, 0 <gzopen>
 74c:	add	x2, x2, #0x0
 750:	add	x1, x8, #0x3
 754:	add	x4, x4, #0x0
 758:	ldp	x29, x30, [sp], #48
 75c:	b	0 <snprintf>
 760:	mov	w8, #0xfffffffc            	// #-4
 764:	str	w8, [x20, #108]
 768:	ldp	x20, x19, [sp, #32]
 76c:	ldp	x22, x21, [sp, #16]
 770:	ldp	x29, x30, [sp], #48
 774:	ret

0000000000000778 <gzseek>:
 778:	b	474 <gzseek64>

000000000000077c <gztell64>:
 77c:	cbz	x0, 7b4 <gztell64+0x38>
 780:	ldr	w8, [x0, #24]
 784:	mov	w9, #0x79b1                	// #31153
 788:	cmp	w8, w9
 78c:	b.eq	79c <gztell64+0x20>  // b.none
 790:	mov	w9, #0x1c4f                	// #7247
 794:	cmp	w8, w9
 798:	b.ne	7b4 <gztell64+0x38>  // b.any
 79c:	ldr	w9, [x0, #104]
 7a0:	ldr	x8, [x0, #16]
 7a4:	cbz	w9, 7bc <gztell64+0x40>
 7a8:	ldr	x9, [x0, #96]
 7ac:	add	x0, x9, x8
 7b0:	ret
 7b4:	mov	x0, #0xffffffffffffffff    	// #-1
 7b8:	ret
 7bc:	add	x0, xzr, x8
 7c0:	ret

00000000000007c4 <gztell>:
 7c4:	cbz	x0, 7fc <gztell+0x38>
 7c8:	ldr	w8, [x0, #24]
 7cc:	mov	w9, #0x79b1                	// #31153
 7d0:	cmp	w8, w9
 7d4:	b.eq	7e4 <gztell+0x20>  // b.none
 7d8:	mov	w9, #0x1c4f                	// #7247
 7dc:	cmp	w8, w9
 7e0:	b.ne	7fc <gztell+0x38>  // b.any
 7e4:	ldr	w9, [x0, #104]
 7e8:	ldr	x8, [x0, #16]
 7ec:	cbz	w9, 804 <gztell+0x40>
 7f0:	ldr	x9, [x0, #96]
 7f4:	add	x0, x9, x8
 7f8:	ret
 7fc:	mov	x0, #0xffffffffffffffff    	// #-1
 800:	ret
 804:	add	x0, xzr, x8
 808:	ret

000000000000080c <gzoffset64>:
 80c:	stp	x29, x30, [sp, #-32]!
 810:	str	x19, [sp, #16]
 814:	mov	x29, sp
 818:	cbz	x0, 878 <gzoffset64+0x6c>
 81c:	ldr	w8, [x0, #24]
 820:	mov	w9, #0x79b1                	// #31153
 824:	mov	x19, x0
 828:	cmp	w8, w9
 82c:	b.eq	83c <gzoffset64+0x30>  // b.none
 830:	mov	w9, #0x1c4f                	// #7247
 834:	cmp	w8, w9
 838:	b.ne	878 <gzoffset64+0x6c>  // b.any
 83c:	ldr	w0, [x19, #28]
 840:	mov	w2, #0x1                   	// #1
 844:	mov	x1, xzr
 848:	bl	0 <lseek64>
 84c:	cmn	x0, #0x1
 850:	b.eq	86c <gzoffset64+0x60>  // b.none
 854:	ldr	w8, [x19, #24]
 858:	mov	w9, #0x1c4f                	// #7247
 85c:	cmp	w8, w9
 860:	b.ne	86c <gzoffset64+0x60>  // b.any
 864:	ldr	w8, [x19, #128]
 868:	sub	x0, x0, x8
 86c:	ldr	x19, [sp, #16]
 870:	ldp	x29, x30, [sp], #32
 874:	ret
 878:	mov	x0, #0xffffffffffffffff    	// #-1
 87c:	ldr	x19, [sp, #16]
 880:	ldp	x29, x30, [sp], #32
 884:	ret

0000000000000888 <gzoffset>:
 888:	stp	x29, x30, [sp, #-32]!
 88c:	str	x19, [sp, #16]
 890:	mov	x29, sp
 894:	cbz	x0, 8f4 <gzoffset+0x6c>
 898:	ldr	w8, [x0, #24]
 89c:	mov	w9, #0x79b1                	// #31153
 8a0:	mov	x19, x0
 8a4:	cmp	w8, w9
 8a8:	b.eq	8b8 <gzoffset+0x30>  // b.none
 8ac:	mov	w9, #0x1c4f                	// #7247
 8b0:	cmp	w8, w9
 8b4:	b.ne	8f4 <gzoffset+0x6c>  // b.any
 8b8:	ldr	w0, [x19, #28]
 8bc:	mov	w2, #0x1                   	// #1
 8c0:	mov	x1, xzr
 8c4:	bl	0 <lseek64>
 8c8:	cmn	x0, #0x1
 8cc:	b.eq	8e8 <gzoffset+0x60>  // b.none
 8d0:	ldr	w8, [x19, #24]
 8d4:	mov	w9, #0x1c4f                	// #7247
 8d8:	cmp	w8, w9
 8dc:	b.ne	8e8 <gzoffset+0x60>  // b.any
 8e0:	ldr	w8, [x19, #128]
 8e4:	sub	x0, x0, x8
 8e8:	ldr	x19, [sp, #16]
 8ec:	ldp	x29, x30, [sp], #32
 8f0:	ret
 8f4:	mov	x0, #0xffffffffffffffff    	// #-1
 8f8:	ldr	x19, [sp, #16]
 8fc:	ldp	x29, x30, [sp], #32
 900:	ret

0000000000000904 <gzeof>:
 904:	cbz	x0, 91c <gzeof+0x18>
 908:	ldr	w8, [x0, #24]
 90c:	mov	w9, #0x1c4f                	// #7247
 910:	cmp	w8, w9
 914:	b.ne	920 <gzeof+0x1c>  // b.any
 918:	ldr	w0, [x0, #84]
 91c:	ret
 920:	mov	w0, wzr
 924:	ret

0000000000000928 <gzerror>:
 928:	cbz	x0, 988 <gzerror+0x60>
 92c:	ldr	w8, [x0, #24]
 930:	mov	w9, #0x79b1                	// #31153
 934:	cmp	w8, w9
 938:	b.eq	948 <gzerror+0x20>  // b.none
 93c:	mov	w9, #0x1c4f                	// #7247
 940:	cmp	w8, w9
 944:	b.ne	96c <gzerror+0x44>  // b.any
 948:	cbz	x1, 954 <gzerror+0x2c>
 94c:	ldr	w8, [x0, #108]
 950:	str	w8, [x1]
 954:	ldr	w8, [x0, #108]
 958:	cmn	w8, #0x4
 95c:	b.ne	974 <gzerror+0x4c>  // b.any
 960:	adrp	x0, 0 <gzopen>
 964:	add	x0, x0, #0x0
 968:	ret
 96c:	mov	x0, xzr
 970:	ret
 974:	ldr	x8, [x0, #112]
 978:	adrp	x9, 0 <gzopen>
 97c:	add	x9, x9, #0x0
 980:	cmp	x8, #0x0
 984:	csel	x0, x9, x8, eq  // eq = none
 988:	ret

000000000000098c <gzclearerr>:
 98c:	stp	x29, x30, [sp, #-32]!
 990:	str	x19, [sp, #16]
 994:	mov	x29, sp
 998:	cbz	x0, 9e0 <gzclearerr+0x54>
 99c:	ldr	w8, [x0, #24]
 9a0:	mov	w9, #0x79b1                	// #31153
 9a4:	mov	x19, x0
 9a8:	cmp	w8, w9
 9ac:	b.eq	9c0 <gzclearerr+0x34>  // b.none
 9b0:	mov	w9, #0x1c4f                	// #7247
 9b4:	cmp	w8, w9
 9b8:	b.ne	9e0 <gzclearerr+0x54>  // b.any
 9bc:	str	xzr, [x19, #80]
 9c0:	ldr	x0, [x19, #112]
 9c4:	cbz	x0, 9dc <gzclearerr+0x50>
 9c8:	ldr	w8, [x19, #108]
 9cc:	cmn	w8, #0x4
 9d0:	b.eq	9d8 <gzclearerr+0x4c>  // b.none
 9d4:	bl	0 <free>
 9d8:	str	xzr, [x19, #112]
 9dc:	str	wzr, [x19, #108]
 9e0:	ldr	x19, [sp, #16]
 9e4:	ldp	x29, x30, [sp], #32
 9e8:	ret

gzread.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzread>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	x0, 68 <gzread+0x68>
  10:	ldr	w8, [x0, #24]
  14:	mov	w9, #0x1c4f                	// #7247
  18:	mov	x19, x0
  1c:	cmp	w8, w9
  20:	b.ne	68 <gzread+0x68>  // b.any
  24:	ldr	w8, [x19, #108]
  28:	cbz	w8, 34 <gzread+0x34>
  2c:	cmn	w8, #0x5
  30:	b.ne	68 <gzread+0x68>  // b.any
  34:	tbnz	w2, #31, 54 <gzread+0x54>
  38:	mov	w2, w2
  3c:	mov	x0, x19
  40:	bl	8c <gz_read>
  44:	cbz	w0, 78 <gzread+0x78>
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret
  54:	adrp	x2, 0 <gzread>
  58:	add	x2, x2, #0x0
  5c:	mov	w1, #0xfffffffe            	// #-2
  60:	mov	x0, x19
  64:	bl	0 <gz_error>
  68:	mov	w0, #0xffffffff            	// #-1
  6c:	ldr	x19, [sp, #16]
  70:	ldp	x29, x30, [sp], #32
  74:	ret
  78:	ldr	w8, [x19, #108]
  7c:	cbz	w8, 48 <gzread+0x48>
  80:	cmn	w8, #0x5
  84:	b.eq	48 <gzread+0x48>  // b.none
  88:	b	68 <gzread+0x68>

000000000000008c <gz_read>:
  8c:	stp	x29, x30, [sp, #-96]!
  90:	str	x27, [sp, #16]
  94:	stp	x26, x25, [sp, #32]
  98:	stp	x24, x23, [sp, #48]
  9c:	stp	x22, x21, [sp, #64]
  a0:	stp	x20, x19, [sp, #80]
  a4:	mov	x29, sp
  a8:	cbz	x2, 130 <gz_read+0xa4>
  ac:	ldr	w8, [x0, #104]
  b0:	mov	x20, x2
  b4:	mov	x21, x1
  b8:	mov	x19, x0
  bc:	cbz	w8, cc <gz_read+0x40>
  c0:	ldr	x22, [x19, #96]
  c4:	str	wzr, [x19, #104]
  c8:	cbnz	x22, 108 <gz_read+0x7c>
  cc:	mov	x22, xzr
  d0:	mov	w24, #0xffffffff            	// #-1
  d4:	mov	w25, #0x40000000            	// #1073741824
  d8:	mov	w26, #0x1                   	// #1
  dc:	b	168 <gz_read+0xdc>
  e0:	ldp	x9, x10, [x19, #8]
  e4:	cmp	x22, x8
  e8:	csel	w11, w22, w8, lt  // lt = tstop
  ec:	sub	w8, w8, w11
  f0:	str	w8, [x19]
  f4:	add	x8, x9, x11
  f8:	add	x9, x10, x11
  fc:	sub	x22, x22, x11
 100:	stp	x8, x9, [x19, #8]
 104:	cbz	x22, cc <gz_read+0x40>
 108:	ldr	w8, [x19]
 10c:	cbnz	w8, e0 <gz_read+0x54>
 110:	ldr	w8, [x19, #80]
 114:	cbz	w8, 120 <gz_read+0x94>
 118:	ldr	w8, [x19, #128]
 11c:	cbz	w8, cc <gz_read+0x40>
 120:	mov	x0, x19
 124:	bl	750 <gz_fetch>
 128:	cmn	w0, #0x1
 12c:	b.ne	104 <gz_read+0x78>  // b.any
 130:	mov	x22, xzr
 134:	mov	x0, x22
 138:	ldp	x20, x19, [sp, #80]
 13c:	ldp	x22, x21, [sp, #64]
 140:	ldp	x24, x23, [sp, #48]
 144:	ldp	x26, x25, [sp, #32]
 148:	ldr	x27, [sp, #16]
 14c:	ldp	x29, x30, [sp], #96
 150:	ret
 154:	mov	x0, x19
 158:	bl	750 <gz_fetch>
 15c:	cmn	w0, #0x1
 160:	b.eq	130 <gz_read+0xa4>  // b.none
 164:	cbz	x20, 134 <gz_read+0xa8>
 168:	ldr	w8, [x19]
 16c:	cmp	x20, x24
 170:	csinv	w27, w20, wzr, cc  // cc = lo, ul, last
 174:	cbz	w8, 1cc <gz_read+0x140>
 178:	ldr	x1, [x19, #8]
 17c:	cmp	w8, w27
 180:	csel	w23, w8, w27, cc  // cc = lo, ul, last
 184:	mov	x0, x21
 188:	mov	x2, x23
 18c:	bl	0 <memcpy>
 190:	ldr	x8, [x19, #8]
 194:	ldr	w9, [x19]
 198:	add	x8, x8, x23
 19c:	sub	w9, w9, w23
 1a0:	str	x8, [x19, #8]
 1a4:	str	w9, [x19]
 1a8:	ldr	x9, [x19, #16]
 1ac:	mov	w8, w23
 1b0:	sub	x20, x20, x8
 1b4:	add	x21, x21, x8
 1b8:	add	x22, x22, x8
 1bc:	add	x8, x9, x8
 1c0:	str	x8, [x19, #16]
 1c4:	cbnz	x20, 168 <gz_read+0xdc>
 1c8:	b	134 <gz_read+0xa8>
 1cc:	ldr	w8, [x19, #80]
 1d0:	cbz	w8, 1dc <gz_read+0x150>
 1d4:	ldr	w8, [x19, #128]
 1d8:	cbz	w8, 260 <gz_read+0x1d4>
 1dc:	ldr	w8, [x19, #68]
 1e0:	cbz	w8, 154 <gz_read+0xc8>
 1e4:	ldr	w9, [x19, #40]
 1e8:	cmp	w27, w9, lsl #1
 1ec:	b.cc	154 <gz_read+0xc8>  // b.lo, b.ul, b.last
 1f0:	cmp	w8, #0x1
 1f4:	b.ne	230 <gz_read+0x1a4>  // b.any
 1f8:	mov	w23, wzr
 1fc:	sub	w8, w27, w23
 200:	ldr	w0, [x19, #28]
 204:	lsr	w9, w8, #30
 208:	cmp	w9, #0x0
 20c:	csel	w2, w8, w25, eq  // eq = none
 210:	add	x1, x21, w23, uxtw
 214:	bl	0 <read>
 218:	cmp	w0, #0x1
 21c:	b.lt	254 <gz_read+0x1c8>  // b.tstop
 220:	add	w23, w23, w0
 224:	cmp	w23, w27
 228:	b.cc	1fc <gz_read+0x170>  // b.lo, b.ul, b.last
 22c:	b	1a8 <gz_read+0x11c>
 230:	mov	x0, x19
 234:	str	w27, [x19, #152]
 238:	str	x21, [x19, #144]
 23c:	bl	bb8 <gz_decomp>
 240:	cmn	w0, #0x1
 244:	b.eq	130 <gz_read+0xa4>  // b.none
 248:	ldr	w23, [x19]
 24c:	str	wzr, [x19]
 250:	b	1a8 <gz_read+0x11c>
 254:	tbnz	w0, #31, 26c <gz_read+0x1e0>
 258:	str	w26, [x19, #80]
 25c:	b	1a8 <gz_read+0x11c>
 260:	mov	w8, #0x1                   	// #1
 264:	str	w8, [x19, #84]
 268:	b	134 <gz_read+0xa8>
 26c:	bl	0 <__errno_location>
 270:	ldr	w0, [x0]
 274:	bl	0 <strerror>
 278:	mov	x2, x0
 27c:	mov	w1, #0xffffffff            	// #-1
 280:	mov	x0, x19
 284:	bl	0 <gz_error>
 288:	b	130 <gz_read+0xa4>

000000000000028c <gzfread>:
 28c:	stp	x29, x30, [sp, #-32]!
 290:	str	x19, [sp, #16]
 294:	mov	x29, sp
 298:	cbz	x3, 310 <gzfread+0x84>
 29c:	ldr	w8, [x3, #24]
 2a0:	mov	w9, #0x1c4f                	// #7247
 2a4:	cmp	w8, w9
 2a8:	b.ne	310 <gzfread+0x84>  // b.any
 2ac:	ldr	w8, [x3, #108]
 2b0:	mov	x19, x1
 2b4:	mov	x1, x0
 2b8:	cbz	w8, 2c4 <gzfread+0x38>
 2bc:	cmn	w8, #0x5
 2c0:	b.ne	310 <gzfread+0x84>  // b.any
 2c4:	umulh	x8, x19, x2
 2c8:	cmp	xzr, x8
 2cc:	cset	w8, ne  // ne = any
 2d0:	cbz	x19, 2f0 <gzfread+0x64>
 2d4:	cbz	w8, 2f0 <gzfread+0x64>
 2d8:	adrp	x2, 0 <gzread>
 2dc:	add	x2, x2, #0x0
 2e0:	mov	w1, #0xfffffffe            	// #-2
 2e4:	mov	x0, x3
 2e8:	bl	0 <gz_error>
 2ec:	b	310 <gzfread+0x84>
 2f0:	mul	x2, x19, x2
 2f4:	cbz	x2, 310 <gzfread+0x84>
 2f8:	mov	x0, x3
 2fc:	bl	8c <gz_read>
 300:	udiv	x0, x0, x19
 304:	ldr	x19, [sp, #16]
 308:	ldp	x29, x30, [sp], #32
 30c:	ret
 310:	mov	x0, xzr
 314:	ldr	x19, [sp, #16]
 318:	ldp	x29, x30, [sp], #32
 31c:	ret

0000000000000320 <gzgetc>:
 320:	sub	sp, sp, #0x20
 324:	stp	x29, x30, [sp, #16]
 328:	add	x29, sp, #0x10
 32c:	cbz	x0, 380 <gzgetc+0x60>
 330:	ldr	w8, [x0, #24]
 334:	mov	w9, #0x1c4f                	// #7247
 338:	cmp	w8, w9
 33c:	b.ne	380 <gzgetc+0x60>  // b.any
 340:	ldr	w8, [x0, #108]
 344:	cbz	w8, 350 <gzgetc+0x30>
 348:	cmn	w8, #0x5
 34c:	b.ne	380 <gzgetc+0x60>  // b.any
 350:	ldr	w8, [x0]
 354:	cbz	w8, 390 <gzgetc+0x70>
 358:	ldp	x10, x9, [x0, #8]
 35c:	sub	w8, w8, #0x1
 360:	str	w8, [x0]
 364:	add	x8, x9, #0x1
 368:	add	x9, x10, #0x1
 36c:	stp	x9, x8, [x0, #8]
 370:	ldrb	w0, [x10]
 374:	ldp	x29, x30, [sp, #16]
 378:	add	sp, sp, #0x20
 37c:	ret
 380:	mov	w0, #0xffffffff            	// #-1
 384:	ldp	x29, x30, [sp, #16]
 388:	add	sp, sp, #0x20
 38c:	ret
 390:	sub	x1, x29, #0x4
 394:	mov	w2, #0x1                   	// #1
 398:	bl	8c <gz_read>
 39c:	ldurb	w8, [x29, #-4]
 3a0:	cmp	w0, #0x1
 3a4:	csinv	w0, w8, wzr, ge  // ge = tcont
 3a8:	ldp	x29, x30, [sp, #16]
 3ac:	add	sp, sp, #0x20
 3b0:	ret

00000000000003b4 <gzgetc_>:
 3b4:	sub	sp, sp, #0x20
 3b8:	stp	x29, x30, [sp, #16]
 3bc:	add	x29, sp, #0x10
 3c0:	cbz	x0, 414 <gzgetc_+0x60>
 3c4:	ldr	w8, [x0, #24]
 3c8:	mov	w9, #0x1c4f                	// #7247
 3cc:	cmp	w8, w9
 3d0:	b.ne	414 <gzgetc_+0x60>  // b.any
 3d4:	ldr	w8, [x0, #108]
 3d8:	cbz	w8, 3e4 <gzgetc_+0x30>
 3dc:	cmn	w8, #0x5
 3e0:	b.ne	414 <gzgetc_+0x60>  // b.any
 3e4:	ldr	w8, [x0]
 3e8:	cbz	w8, 424 <gzgetc_+0x70>
 3ec:	ldp	x10, x9, [x0, #8]
 3f0:	sub	w8, w8, #0x1
 3f4:	str	w8, [x0]
 3f8:	add	x8, x9, #0x1
 3fc:	add	x9, x10, #0x1
 400:	stp	x9, x8, [x0, #8]
 404:	ldrb	w0, [x10]
 408:	ldp	x29, x30, [sp, #16]
 40c:	add	sp, sp, #0x20
 410:	ret
 414:	mov	w0, #0xffffffff            	// #-1
 418:	ldp	x29, x30, [sp, #16]
 41c:	add	sp, sp, #0x20
 420:	ret
 424:	sub	x1, x29, #0x4
 428:	mov	w2, #0x1                   	// #1
 42c:	bl	8c <gz_read>
 430:	ldurb	w8, [x29, #-4]
 434:	cmp	w0, #0x1
 438:	csinv	w0, w8, wzr, ge  // ge = tcont
 43c:	ldp	x29, x30, [sp, #16]
 440:	add	sp, sp, #0x20
 444:	ret

0000000000000448 <gzungetc>:
 448:	stp	x29, x30, [sp, #-48]!
 44c:	str	x21, [sp, #16]
 450:	stp	x20, x19, [sp, #32]
 454:	mov	x29, sp
 458:	cbz	x1, 51c <gzungetc+0xd4>
 45c:	ldr	w8, [x1, #24]
 460:	mov	w9, #0x1c4f                	// #7247
 464:	mov	x20, x1
 468:	cmp	w8, w9
 46c:	b.ne	51c <gzungetc+0xd4>  // b.any
 470:	ldr	w8, [x20, #108]
 474:	mov	w19, w0
 478:	cbz	w8, 484 <gzungetc+0x3c>
 47c:	cmn	w8, #0x5
 480:	b.ne	51c <gzungetc+0xd4>  // b.any
 484:	ldr	w8, [x20, #104]
 488:	cbz	w8, 498 <gzungetc+0x50>
 48c:	ldr	x21, [x20, #96]
 490:	str	wzr, [x20, #104]
 494:	cbnz	x21, 4f4 <gzungetc+0xac>
 498:	tbnz	w19, #31, 51c <gzungetc+0xd4>
 49c:	ldr	w9, [x20]
 4a0:	cbz	w9, 534 <gzungetc+0xec>
 4a4:	ldr	w8, [x20, #40]
 4a8:	lsl	w10, w8, #1
 4ac:	cmp	w9, w10
 4b0:	b.ne	558 <gzungetc+0x110>  // b.any
 4b4:	adrp	x2, 0 <gzread>
 4b8:	add	x2, x2, #0x0
 4bc:	mov	w1, #0xfffffffd            	// #-3
 4c0:	mov	x0, x20
 4c4:	bl	0 <gz_error>
 4c8:	b	51c <gzungetc+0xd4>
 4cc:	ldp	x9, x10, [x20, #8]
 4d0:	cmp	x21, x8
 4d4:	csel	w11, w21, w8, lt  // lt = tstop
 4d8:	sub	w8, w8, w11
 4dc:	str	w8, [x20]
 4e0:	add	x8, x9, x11
 4e4:	add	x9, x10, x11
 4e8:	sub	x21, x21, x11
 4ec:	stp	x8, x9, [x20, #8]
 4f0:	cbz	x21, 498 <gzungetc+0x50>
 4f4:	ldr	w8, [x20]
 4f8:	cbnz	w8, 4cc <gzungetc+0x84>
 4fc:	ldr	w8, [x20, #80]
 500:	cbz	w8, 50c <gzungetc+0xc4>
 504:	ldr	w8, [x20, #128]
 508:	cbz	w8, 498 <gzungetc+0x50>
 50c:	mov	x0, x20
 510:	bl	750 <gz_fetch>
 514:	cmn	w0, #0x1
 518:	b.ne	4f0 <gzungetc+0xa8>  // b.any
 51c:	mov	w19, #0xffffffff            	// #-1
 520:	mov	w0, w19
 524:	ldp	x20, x19, [sp, #32]
 528:	ldr	x21, [sp, #16]
 52c:	ldp	x29, x30, [sp], #48
 530:	ret
 534:	ldr	w8, [x20, #40]
 538:	ldr	x9, [x20, #56]
 53c:	mov	w10, #0x1                   	// #1
 540:	str	w10, [x20]
 544:	lsl	w8, w8, #1
 548:	add	x8, x9, x8
 54c:	sub	x9, x8, #0x1
 550:	str	x9, [x20, #8]
 554:	b	5a0 <gzungetc+0x158>
 558:	ldr	x8, [x20, #8]
 55c:	ldr	x11, [x20, #56]
 560:	cmp	x8, x11
 564:	b.ne	590 <gzungetc+0x148>  // b.any
 568:	add	x10, x8, w10, uxtw
 56c:	add	x9, x8, x9
 570:	mov	x8, x10
 574:	ldrb	w10, [x9, #-1]!
 578:	strb	w10, [x8, #-1]!
 57c:	ldr	x10, [x20, #56]
 580:	cmp	x9, x10
 584:	b.hi	574 <gzungetc+0x12c>  // b.pmore
 588:	ldr	w9, [x20]
 58c:	str	x8, [x20, #8]
 590:	add	w9, w9, #0x1
 594:	sub	x10, x8, #0x1
 598:	str	w9, [x20]
 59c:	str	x10, [x20, #8]
 5a0:	sturb	w19, [x8, #-1]
 5a4:	ldr	x8, [x20, #16]
 5a8:	str	wzr, [x20, #84]
 5ac:	sub	x8, x8, #0x1
 5b0:	str	x8, [x20, #16]
 5b4:	b	520 <gzungetc+0xd8>

00000000000005b8 <gzgets>:
 5b8:	stp	x29, x30, [sp, #-80]!
 5bc:	stp	x20, x19, [sp, #64]
 5c0:	mov	x20, x0
 5c4:	mov	x0, xzr
 5c8:	str	x25, [sp, #16]
 5cc:	stp	x24, x23, [sp, #32]
 5d0:	stp	x22, x21, [sp, #48]
 5d4:	mov	x29, sp
 5d8:	cbz	x20, 738 <gzgets+0x180>
 5dc:	mov	x19, x1
 5e0:	cbz	x1, 738 <gzgets+0x180>
 5e4:	mov	w21, w2
 5e8:	cmp	w2, #0x1
 5ec:	b.lt	738 <gzgets+0x180>  // b.tstop
 5f0:	ldr	w8, [x20, #24]
 5f4:	mov	w9, #0x1c4f                	// #7247
 5f8:	cmp	w8, w9
 5fc:	b.ne	734 <gzgets+0x17c>  // b.any
 600:	ldr	w8, [x20, #108]
 604:	cbz	w8, 610 <gzgets+0x58>
 608:	cmn	w8, #0x5
 60c:	b.ne	734 <gzgets+0x17c>  // b.any
 610:	ldr	w8, [x20, #104]
 614:	cbz	w8, 624 <gzgets+0x6c>
 618:	ldr	x22, [x20, #96]
 61c:	str	wzr, [x20, #104]
 620:	cbnz	x22, 6ec <gzgets+0x134>
 624:	subs	w25, w21, #0x1
 628:	b.eq	734 <gzgets+0x17c>  // b.none
 62c:	ldr	w8, [x20]
 630:	mov	x21, x19
 634:	cbnz	w8, 650 <gzgets+0x98>
 638:	mov	x0, x20
 63c:	bl	750 <gz_fetch>
 640:	cmn	w0, #0x1
 644:	b.eq	734 <gzgets+0x17c>  // b.none
 648:	ldr	w8, [x20]
 64c:	cbz	w8, 718 <gzgets+0x160>
 650:	ldr	x23, [x20, #8]
 654:	cmp	w8, w25
 658:	csel	w22, w25, w8, hi  // hi = pmore
 65c:	mov	w1, #0xa                   	// #10
 660:	mov	x0, x23
 664:	mov	x2, x22
 668:	bl	0 <memchr>
 66c:	mov	x24, x0
 670:	sub	w8, w24, w23
 674:	cmp	x0, #0x0
 678:	csinc	w22, w22, w8, eq  // eq = none
 67c:	mov	x0, x21
 680:	mov	x1, x23
 684:	mov	x2, x22
 688:	bl	0 <memcpy>
 68c:	ldr	w8, [x20]
 690:	ldp	x9, x10, [x20, #8]
 694:	add	x21, x21, x22
 698:	sub	w8, w8, w22
 69c:	add	x9, x9, x22
 6a0:	add	x10, x10, x22
 6a4:	str	w8, [x20]
 6a8:	stp	x9, x10, [x20, #8]
 6ac:	cbnz	x24, 6b8 <gzgets+0x100>
 6b0:	sub	w25, w25, w22
 6b4:	cbnz	w25, 634 <gzgets+0x7c>
 6b8:	cmp	x21, x19
 6bc:	b.ne	728 <gzgets+0x170>  // b.any
 6c0:	b	734 <gzgets+0x17c>
 6c4:	ldp	x9, x10, [x20, #8]
 6c8:	cmp	x22, x8
 6cc:	csel	w11, w22, w8, lt  // lt = tstop
 6d0:	sub	w8, w8, w11
 6d4:	str	w8, [x20]
 6d8:	add	x8, x9, x11
 6dc:	add	x9, x10, x11
 6e0:	sub	x22, x22, x11
 6e4:	stp	x8, x9, [x20, #8]
 6e8:	cbz	x22, 624 <gzgets+0x6c>
 6ec:	ldr	w8, [x20]
 6f0:	cbnz	w8, 6c4 <gzgets+0x10c>
 6f4:	ldr	w8, [x20, #80]
 6f8:	cbz	w8, 704 <gzgets+0x14c>
 6fc:	ldr	w8, [x20, #128]
 700:	cbz	w8, 624 <gzgets+0x6c>
 704:	mov	x0, x20
 708:	bl	750 <gz_fetch>
 70c:	cmn	w0, #0x1
 710:	b.ne	6e8 <gzgets+0x130>  // b.any
 714:	b	734 <gzgets+0x17c>
 718:	mov	w8, #0x1                   	// #1
 71c:	str	w8, [x20, #84]
 720:	cmp	x21, x19
 724:	b.eq	734 <gzgets+0x17c>  // b.none
 728:	mov	x0, x19
 72c:	strb	wzr, [x21]
 730:	b	738 <gzgets+0x180>
 734:	mov	x0, xzr
 738:	ldp	x20, x19, [sp, #64]
 73c:	ldp	x22, x21, [sp, #48]
 740:	ldp	x24, x23, [sp, #32]
 744:	ldr	x25, [sp, #16]
 748:	ldp	x29, x30, [sp], #80
 74c:	ret

0000000000000750 <gz_fetch>:
 750:	stp	x29, x30, [sp, #-48]!
 754:	stp	x20, x19, [sp, #32]
 758:	mov	x19, x0
 75c:	stp	x22, x21, [sp, #16]
 760:	mov	x29, sp
 764:	ldr	w8, [x19, #68]
 768:	cbz	w8, 780 <gz_fetch+0x30>
 76c:	cmp	w8, #0x2
 770:	b.eq	79c <gz_fetch+0x4c>  // b.none
 774:	cmp	w8, #0x1
 778:	b.ne	7c0 <gz_fetch+0x70>  // b.any
 77c:	b	7e0 <gz_fetch+0x90>
 780:	mov	x0, x19
 784:	bl	8d8 <gz_look>
 788:	cmn	w0, #0x1
 78c:	b.eq	834 <gz_fetch+0xe4>  // b.none
 790:	ldr	w8, [x19, #68]
 794:	cbnz	w8, 7c0 <gz_fetch+0x70>
 798:	b	7d8 <gz_fetch+0x88>
 79c:	ldr	w8, [x19, #40]
 7a0:	ldr	x9, [x19, #56]
 7a4:	mov	x0, x19
 7a8:	lsl	w8, w8, #1
 7ac:	str	w8, [x19, #152]
 7b0:	str	x9, [x19, #144]
 7b4:	bl	bb8 <gz_decomp>
 7b8:	cmn	w0, #0x1
 7bc:	b.eq	834 <gz_fetch+0xe4>  // b.none
 7c0:	ldr	w8, [x19]
 7c4:	cbnz	w8, 7d8 <gz_fetch+0x88>
 7c8:	ldr	w8, [x19, #80]
 7cc:	cbz	w8, 764 <gz_fetch+0x14>
 7d0:	ldr	w8, [x19, #128]
 7d4:	cbnz	w8, 764 <gz_fetch+0x14>
 7d8:	mov	w20, wzr
 7dc:	b	878 <gz_fetch+0x128>
 7e0:	ldr	w9, [x19, #40]
 7e4:	ldr	x20, [x19, #56]
 7e8:	mov	w8, wzr
 7ec:	mov	w22, #0x40000000            	// #1073741824
 7f0:	lsl	w21, w9, #1
 7f4:	str	wzr, [x19]
 7f8:	sub	w9, w21, w8
 7fc:	ldr	w0, [x19, #28]
 800:	lsr	w10, w9, #30
 804:	cmp	w10, #0x0
 808:	csel	w2, w9, w22, eq  // eq = none
 80c:	add	x1, x20, w8, uxtw
 810:	bl	0 <read>
 814:	cmp	w0, #0x1
 818:	b.lt	83c <gz_fetch+0xec>  // b.tstop
 81c:	ldr	w8, [x19]
 820:	add	w8, w8, w0
 824:	cmp	w8, w21
 828:	str	w8, [x19]
 82c:	b.cc	7f8 <gz_fetch+0xa8>  // b.lo, b.ul, b.last
 830:	b	848 <gz_fetch+0xf8>
 834:	mov	w20, #0xffffffff            	// #-1
 838:	b	878 <gz_fetch+0x128>
 83c:	tbnz	w0, #31, 858 <gz_fetch+0x108>
 840:	mov	w8, #0x1                   	// #1
 844:	str	w8, [x19, #80]
 848:	ldr	x8, [x19, #56]
 84c:	mov	w20, wzr
 850:	str	x8, [x19, #8]
 854:	b	878 <gz_fetch+0x128>
 858:	bl	0 <__errno_location>
 85c:	ldr	w0, [x0]
 860:	bl	0 <strerror>
 864:	mov	x2, x0
 868:	mov	w1, #0xffffffff            	// #-1
 86c:	mov	x0, x19
 870:	mov	w20, #0xffffffff            	// #-1
 874:	bl	0 <gz_error>
 878:	mov	w0, w20
 87c:	ldp	x20, x19, [sp, #32]
 880:	ldp	x22, x21, [sp, #16]
 884:	ldp	x29, x30, [sp], #48
 888:	ret

000000000000088c <gzdirect>:
 88c:	cbz	x0, 8d4 <gzdirect+0x48>
 890:	stp	x29, x30, [sp, #-32]!
 894:	ldr	w8, [x0, #24]
 898:	mov	w9, #0x1c4f                	// #7247
 89c:	str	x19, [sp, #16]
 8a0:	mov	x19, x0
 8a4:	cmp	w8, w9
 8a8:	mov	x29, sp
 8ac:	b.ne	8c8 <gzdirect+0x3c>  // b.any
 8b0:	ldr	w8, [x19, #68]
 8b4:	cbnz	w8, 8c8 <gzdirect+0x3c>
 8b8:	ldr	w8, [x19]
 8bc:	cbnz	w8, 8c8 <gzdirect+0x3c>
 8c0:	mov	x0, x19
 8c4:	bl	8d8 <gz_look>
 8c8:	ldr	w0, [x19, #64]
 8cc:	ldr	x19, [sp, #16]
 8d0:	ldp	x29, x30, [sp], #32
 8d4:	ret

00000000000008d8 <gz_look>:
 8d8:	stp	x29, x30, [sp, #-64]!
 8dc:	stp	x24, x23, [sp, #16]
 8e0:	stp	x22, x21, [sp, #32]
 8e4:	stp	x20, x19, [sp, #48]
 8e8:	ldr	w8, [x0, #40]
 8ec:	mov	x19, x0
 8f0:	add	x20, x0, #0x78
 8f4:	mov	x29, sp
 8f8:	cbz	w8, 93c <gz_look+0x64>
 8fc:	ldr	w21, [x19, #128]
 900:	cmp	w21, #0x1
 904:	b.hi	a50 <gz_look+0x178>  // b.pmore
 908:	ldr	w8, [x19, #108]
 90c:	cbz	w8, 918 <gz_look+0x40>
 910:	cmn	w8, #0x5
 914:	b.ne	9cc <gz_look+0xf4>  // b.any
 918:	ldr	w8, [x19, #80]
 91c:	cbnz	w8, a44 <gz_look+0x16c>
 920:	cbz	w21, 9d4 <gz_look+0xfc>
 924:	ldr	x8, [x19, #120]
 928:	ldr	x9, [x19, #48]
 92c:	ldrb	w8, [x8]
 930:	strb	w8, [x9]
 934:	ldr	w8, [x19, #128]
 938:	b	9d8 <gz_look+0x100>
 93c:	ldr	w21, [x19, #44]
 940:	mov	x0, x21
 944:	bl	0 <malloc>
 948:	mov	x22, x0
 94c:	str	x0, [x19, #48]
 950:	lsl	w0, w21, #1
 954:	bl	0 <malloc>
 958:	str	x0, [x19, #56]
 95c:	cbz	x22, 9ac <gz_look+0xd4>
 960:	cbz	x0, 9ac <gz_look+0xd4>
 964:	adrp	x2, 0 <gzread>
 968:	add	x2, x2, #0x0
 96c:	mov	w1, #0x1f                  	// #31
 970:	mov	w3, #0x70                  	// #112
 974:	mov	x0, x20
 978:	str	w21, [x19, #40]
 97c:	str	wzr, [x19, #128]
 980:	str	xzr, [x19, #120]
 984:	stp	xzr, xzr, [x19, #192]
 988:	str	xzr, [x19, #184]
 98c:	bl	0 <inflateInit2_>
 990:	cbz	w0, 8fc <gz_look+0x24>
 994:	ldr	x0, [x19, #56]
 998:	bl	0 <free>
 99c:	ldr	x0, [x19, #48]
 9a0:	bl	0 <free>
 9a4:	str	wzr, [x19, #40]
 9a8:	b	9b8 <gz_look+0xe0>
 9ac:	bl	0 <free>
 9b0:	ldr	x0, [x19, #48]
 9b4:	bl	0 <free>
 9b8:	adrp	x2, 0 <gzread>
 9bc:	add	x2, x2, #0x0
 9c0:	mov	w1, #0xfffffffc            	// #-4
 9c4:	mov	x0, x19
 9c8:	bl	0 <gz_error>
 9cc:	mov	w21, #0xffffffff            	// #-1
 9d0:	b	ad0 <gz_look+0x1f8>
 9d4:	mov	w8, wzr
 9d8:	ldr	x9, [x19, #48]
 9dc:	ldr	w10, [x19, #40]
 9e0:	mov	w21, wzr
 9e4:	mov	w24, #0x40000000            	// #1073741824
 9e8:	add	x22, x9, w8, uxtw
 9ec:	sub	w23, w10, w8
 9f0:	sub	w8, w23, w21
 9f4:	ldr	w0, [x19, #28]
 9f8:	lsr	w9, w8, #30
 9fc:	cmp	w9, #0x0
 a00:	csel	w2, w8, w24, eq  // eq = none
 a04:	add	x1, x22, w21, uxtw
 a08:	bl	0 <read>
 a0c:	cmp	w0, #0x1
 a10:	b.lt	a24 <gz_look+0x14c>  // b.tstop
 a14:	add	w21, w21, w0
 a18:	cmp	w21, w23
 a1c:	b.cc	9f0 <gz_look+0x118>  // b.lo, b.ul, b.last
 a20:	b	a30 <gz_look+0x158>
 a24:	tbnz	w0, #31, ae8 <gz_look+0x210>
 a28:	mov	w8, #0x1                   	// #1
 a2c:	str	w8, [x19, #80]
 a30:	ldr	w8, [x19, #128]
 a34:	ldr	x9, [x19, #48]
 a38:	add	w21, w8, w21
 a3c:	str	w21, [x19, #128]
 a40:	str	x9, [x19, #120]
 a44:	cbz	w21, ad0 <gz_look+0x1f8>
 a48:	cmp	w21, #0x1
 a4c:	b.eq	a84 <gz_look+0x1ac>  // b.none
 a50:	ldr	x8, [x20]
 a54:	ldrb	w9, [x8]
 a58:	cmp	w9, #0x1f
 a5c:	b.ne	a84 <gz_look+0x1ac>  // b.any
 a60:	ldrb	w8, [x8, #1]
 a64:	cmp	w8, #0x8b
 a68:	b.ne	a84 <gz_look+0x1ac>  // b.any
 a6c:	mov	x0, x20
 a70:	bl	0 <inflateReset>
 a74:	adrp	x8, 0 <gzread>
 a78:	ldr	d0, [x8]
 a7c:	mov	w21, wzr
 a80:	b	ab4 <gz_look+0x1dc>
 a84:	ldr	w8, [x19, #64]
 a88:	cbz	w8, abc <gz_look+0x1e4>
 a8c:	ldr	x0, [x19, #56]
 a90:	ldr	x1, [x19, #120]
 a94:	mov	w2, w21
 a98:	str	x0, [x19, #8]
 a9c:	bl	0 <memcpy>
 aa0:	ldr	w8, [x19, #128]
 aa4:	mov	w21, wzr
 aa8:	movi	v0.2s, #0x1
 aac:	str	wzr, [x19, #128]
 ab0:	str	w8, [x19]
 ab4:	str	d0, [x19, #64]
 ab8:	b	ad0 <gz_look+0x1f8>
 abc:	mov	w8, #0x1                   	// #1
 ac0:	mov	w21, wzr
 ac4:	str	wzr, [x19, #128]
 ac8:	str	w8, [x19, #80]
 acc:	str	wzr, [x19]
 ad0:	mov	w0, w21
 ad4:	ldp	x20, x19, [sp, #48]
 ad8:	ldp	x22, x21, [sp, #32]
 adc:	ldp	x24, x23, [sp, #16]
 ae0:	ldp	x29, x30, [sp], #64
 ae4:	ret
 ae8:	bl	0 <__errno_location>
 aec:	ldr	w0, [x0]
 af0:	bl	0 <strerror>
 af4:	mov	x2, x0
 af8:	mov	w1, #0xffffffff            	// #-1
 afc:	mov	x0, x19
 b00:	mov	w21, #0xffffffff            	// #-1
 b04:	bl	0 <gz_error>
 b08:	b	ad0 <gz_look+0x1f8>

0000000000000b0c <gzclose_r>:
 b0c:	stp	x29, x30, [sp, #-48]!
 b10:	str	x21, [sp, #16]
 b14:	stp	x20, x19, [sp, #32]
 b18:	mov	x29, sp
 b1c:	cbz	x0, ba4 <gzclose_r+0x98>
 b20:	ldr	w8, [x0, #24]
 b24:	mov	w9, #0x1c4f                	// #7247
 b28:	mov	x19, x0
 b2c:	cmp	w8, w9
 b30:	b.ne	ba4 <gzclose_r+0x98>  // b.any
 b34:	ldr	w8, [x19, #40]
 b38:	cbz	w8, b54 <gzclose_r+0x48>
 b3c:	add	x0, x19, #0x78
 b40:	bl	0 <inflateEnd>
 b44:	ldr	x0, [x19, #56]
 b48:	bl	0 <free>
 b4c:	ldr	x0, [x19, #48]
 b50:	bl	0 <free>
 b54:	ldr	w8, [x19, #108]
 b58:	mov	x0, x19
 b5c:	mov	w1, wzr
 b60:	mov	x2, xzr
 b64:	cmn	w8, #0x5
 b68:	csel	w21, w8, wzr, eq  // eq = none
 b6c:	bl	0 <gz_error>
 b70:	ldr	x0, [x19, #32]
 b74:	bl	0 <free>
 b78:	ldr	w0, [x19, #28]
 b7c:	bl	0 <close>
 b80:	mov	w20, w0
 b84:	mov	x0, x19
 b88:	bl	0 <free>
 b8c:	cmp	w20, #0x0
 b90:	csinv	w0, w21, wzr, eq  // eq = none
 b94:	ldp	x20, x19, [sp, #32]
 b98:	ldr	x21, [sp, #16]
 b9c:	ldp	x29, x30, [sp], #48
 ba0:	ret
 ba4:	mov	w0, #0xfffffffe            	// #-2
 ba8:	ldp	x20, x19, [sp, #32]
 bac:	ldr	x21, [sp, #16]
 bb0:	ldp	x29, x30, [sp], #48
 bb4:	ret

0000000000000bb8 <gz_decomp>:
 bb8:	stp	x29, x30, [sp, #-96]!
 bbc:	stp	x28, x27, [sp, #16]
 bc0:	stp	x26, x25, [sp, #32]
 bc4:	stp	x24, x23, [sp, #48]
 bc8:	stp	x22, x21, [sp, #64]
 bcc:	stp	x20, x19, [sp, #80]
 bd0:	ldr	w22, [x0, #152]
 bd4:	adrp	x25, 0 <gzread>
 bd8:	mov	x19, x0
 bdc:	mov	w20, wzr
 be0:	add	x21, x0, #0x78
 be4:	mov	w23, #0x40000000            	// #1073741824
 be8:	mov	w24, #0x1                   	// #1
 bec:	add	x25, x25, #0x0
 bf0:	mov	x29, sp
 bf4:	ldr	w8, [x19, #128]
 bf8:	cbnz	w8, c74 <gz_decomp+0xbc>
 bfc:	ldr	w8, [x19, #108]
 c00:	cbz	w8, c0c <gz_decomp+0x54>
 c04:	cmn	w8, #0x5
 c08:	b.ne	d34 <gz_decomp+0x17c>  // b.any
 c0c:	ldr	w8, [x19, #80]
 c10:	cbnz	w8, cb4 <gz_decomp+0xfc>
 c14:	ldr	x27, [x19, #48]
 c18:	ldr	w28, [x19, #40]
 c1c:	mov	w26, wzr
 c20:	sub	w8, w28, w26
 c24:	ldr	w0, [x19, #28]
 c28:	lsr	w9, w8, #30
 c2c:	cmp	w9, #0x0
 c30:	csel	w2, w8, w23, eq  // eq = none
 c34:	add	x1, x27, w26, uxtw
 c38:	bl	0 <read>
 c3c:	cmp	w0, #0x1
 c40:	b.lt	c54 <gz_decomp+0x9c>  // b.tstop
 c44:	add	w26, w26, w0
 c48:	cmp	w26, w28
 c4c:	b.cc	c20 <gz_decomp+0x68>  // b.lo, b.ul, b.last
 c50:	b	c5c <gz_decomp+0xa4>
 c54:	tbnz	w0, #31, d58 <gz_decomp+0x1a0>
 c58:	str	w24, [x19, #80]
 c5c:	ldr	w8, [x19, #128]
 c60:	ldr	x9, [x19, #48]
 c64:	adds	w8, w8, w26
 c68:	str	w8, [x19, #128]
 c6c:	str	x9, [x19, #120]
 c70:	b.eq	cb4 <gz_decomp+0xfc>  // b.none
 c74:	mov	x0, x21
 c78:	mov	w1, wzr
 c7c:	bl	0 <inflate>
 c80:	add	w8, w0, #0x4
 c84:	mov	w20, w0
 c88:	cmp	w8, #0x6
 c8c:	b.hi	ca0 <gz_decomp+0xe8>  // b.pmore
 c90:	adr	x9, ca0 <gz_decomp+0xe8>
 c94:	ldrb	w10, [x25, x8]
 c98:	add	x9, x9, x10, lsl #2
 c9c:	br	x9
 ca0:	ldr	w8, [x19, #152]
 ca4:	cmp	w20, #0x1
 ca8:	b.eq	ccc <gz_decomp+0x114>  // b.none
 cac:	cbnz	w8, bf4 <gz_decomp+0x3c>
 cb0:	b	ccc <gz_decomp+0x114>
 cb4:	adrp	x2, 0 <gzread>
 cb8:	add	x2, x2, #0x0
 cbc:	mov	w1, #0xfffffffb            	// #-5
 cc0:	mov	x0, x19
 cc4:	bl	0 <gz_error>
 cc8:	ldr	w8, [x19, #152]
 ccc:	ldr	x9, [x19, #144]
 cd0:	sub	w8, w22, w8
 cd4:	str	w8, [x19]
 cd8:	cmp	w20, #0x1
 cdc:	sub	x8, x9, x8
 ce0:	mov	w20, wzr
 ce4:	str	x8, [x19, #8]
 ce8:	b.ne	d38 <gz_decomp+0x180>  // b.any
 cec:	str	wzr, [x19, #68]
 cf0:	b	d38 <gz_decomp+0x180>
 cf4:	adrp	x2, 0 <gzread>
 cf8:	add	x2, x2, #0x0
 cfc:	mov	w1, #0xfffffffe            	// #-2
 d00:	b	d2c <gz_decomp+0x174>
 d04:	adrp	x2, 0 <gzread>
 d08:	add	x2, x2, #0x0
 d0c:	mov	w1, #0xfffffffc            	// #-4
 d10:	b	d2c <gz_decomp+0x174>
 d14:	ldr	x8, [x19, #168]
 d18:	adrp	x9, 0 <gzread>
 d1c:	add	x9, x9, #0x0
 d20:	mov	w1, #0xfffffffd            	// #-3
 d24:	cmp	x8, #0x0
 d28:	csel	x2, x9, x8, eq  // eq = none
 d2c:	mov	x0, x19
 d30:	bl	0 <gz_error>
 d34:	mov	w20, #0xffffffff            	// #-1
 d38:	mov	w0, w20
 d3c:	ldp	x20, x19, [sp, #80]
 d40:	ldp	x22, x21, [sp, #64]
 d44:	ldp	x24, x23, [sp, #48]
 d48:	ldp	x26, x25, [sp, #32]
 d4c:	ldp	x28, x27, [sp, #16]
 d50:	ldp	x29, x30, [sp], #96
 d54:	ret
 d58:	bl	0 <__errno_location>
 d5c:	ldr	w0, [x0]
 d60:	bl	0 <strerror>
 d64:	mov	x2, x0
 d68:	mov	w1, #0xffffffff            	// #-1
 d6c:	mov	x0, x19
 d70:	mov	w20, #0xffffffff            	// #-1
 d74:	bl	0 <gz_error>
 d78:	b	d38 <gz_decomp+0x180>

gzwrite.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzwrite>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	cbz	x0, 3c <gzwrite+0x3c>
   c:	ldr	w8, [x0, #24]
  10:	mov	w9, #0x79b1                	// #31153
  14:	cmp	w8, w9
  18:	b.ne	24 <gzwrite+0x24>  // b.any
  1c:	ldr	w8, [x0, #108]
  20:	cbz	w8, 30 <gzwrite+0x30>
  24:	mov	w0, wzr
  28:	ldp	x29, x30, [sp], #16
  2c:	ret
  30:	tbnz	w2, #31, 44 <gzwrite+0x44>
  34:	mov	w2, w2
  38:	bl	60 <gz_write>
  3c:	ldp	x29, x30, [sp], #16
  40:	ret
  44:	adrp	x2, 0 <gzwrite>
  48:	add	x2, x2, #0x0
  4c:	mov	w1, #0xfffffffd            	// #-3
  50:	bl	0 <gz_error>
  54:	mov	w0, wzr
  58:	ldp	x29, x30, [sp], #16
  5c:	ret

0000000000000060 <gz_write>:
  60:	stp	x29, x30, [sp, #-64]!
  64:	stp	x20, x19, [sp, #48]
  68:	mov	x19, x2
  6c:	stp	x24, x23, [sp, #16]
  70:	stp	x22, x21, [sp, #32]
  74:	mov	x29, sp
  78:	cbz	x2, 234 <gz_write+0x1d4>
  7c:	ldr	w8, [x0, #40]
  80:	mov	x21, x1
  84:	mov	x20, x0
  88:	cbnz	w8, 9c <gz_write+0x3c>
  8c:	mov	x0, x20
  90:	bl	6b8 <gz_init>
  94:	cmn	w0, #0x1
  98:	b.eq	230 <gz_write+0x1d0>  // b.none
  9c:	ldr	w8, [x20, #104]
  a0:	cbz	w8, 134 <gz_write+0xd4>
  a4:	ldr	w8, [x20, #128]
  a8:	ldr	x23, [x20, #96]
  ac:	str	wzr, [x20, #104]
  b0:	cbz	w8, c8 <gz_write+0x68>
  b4:	mov	x0, x20
  b8:	mov	w1, wzr
  bc:	bl	7bc <gz_comp>
  c0:	cmn	w0, #0x1
  c4:	b.eq	230 <gz_write+0x1d0>  // b.none
  c8:	cbz	x23, 134 <gz_write+0xd4>
  cc:	mov	w8, wzr
  d0:	ldr	w9, [x20, #40]
  d4:	cmp	x23, x9
  d8:	csel	w24, w23, w9, lt  // lt = tstop
  dc:	tbz	w8, #0, e8 <gz_write+0x88>
  e0:	mov	w22, w24
  e4:	b	fc <gz_write+0x9c>
  e8:	ldr	x0, [x20, #48]
  ec:	mov	w22, w24
  f0:	mov	w1, wzr
  f4:	mov	x2, x22
  f8:	bl	0 <memset>
  fc:	ldr	x8, [x20, #48]
 100:	ldr	x9, [x20, #16]
 104:	mov	x0, x20
 108:	mov	w1, wzr
 10c:	str	x8, [x20, #120]
 110:	add	x8, x9, x22
 114:	str	w24, [x20, #128]
 118:	str	x8, [x20, #16]
 11c:	bl	7bc <gz_comp>
 120:	cmn	w0, #0x1
 124:	b.eq	230 <gz_write+0x1d0>  // b.none
 128:	sub	x23, x23, x22
 12c:	mov	w8, #0x1                   	// #1
 130:	cbnz	x23, d0 <gz_write+0x70>
 134:	ldr	w8, [x20, #40]
 138:	cmp	x8, x19
 13c:	b.ls	1c8 <gz_write+0x168>  // b.plast
 140:	mov	x23, x19
 144:	ldr	w8, [x20, #128]
 148:	cbz	w8, 158 <gz_write+0xf8>
 14c:	ldr	x10, [x20, #120]
 150:	ldr	x9, [x20, #48]
 154:	b	164 <gz_write+0x104>
 158:	ldr	x9, [x20, #48]
 15c:	mov	x10, x9
 160:	str	x9, [x20, #120]
 164:	ldr	w11, [x20, #40]
 168:	add	x8, x10, x8
 16c:	sub	x8, x8, x9
 170:	add	x0, x9, w8, uxtw
 174:	sub	w10, w11, w8
 178:	cmp	x23, x10
 17c:	csel	w22, w23, w10, cc  // cc = lo, ul, last
 180:	mov	x1, x21
 184:	mov	x2, x22
 188:	bl	0 <memcpy>
 18c:	ldr	w8, [x20, #128]
 190:	ldr	x9, [x20, #16]
 194:	subs	x23, x23, x22
 198:	add	w8, w22, w8
 19c:	add	x9, x9, x22
 1a0:	str	w8, [x20, #128]
 1a4:	str	x9, [x20, #16]
 1a8:	b.eq	234 <gz_write+0x1d4>  // b.none
 1ac:	mov	x0, x20
 1b0:	mov	w1, wzr
 1b4:	add	x21, x21, x22
 1b8:	bl	7bc <gz_comp>
 1bc:	cmn	w0, #0x1
 1c0:	b.ne	144 <gz_write+0xe4>  // b.any
 1c4:	b	230 <gz_write+0x1d0>
 1c8:	ldr	w8, [x20, #128]
 1cc:	cbz	w8, 1e4 <gz_write+0x184>
 1d0:	mov	x0, x20
 1d4:	mov	w1, wzr
 1d8:	bl	7bc <gz_comp>
 1dc:	cmn	w0, #0x1
 1e0:	b.eq	230 <gz_write+0x1d0>  // b.none
 1e4:	str	x21, [x20, #120]
 1e8:	mov	w21, #0xffffffff            	// #-1
 1ec:	mov	x22, x19
 1f0:	ldr	x8, [x20, #16]
 1f4:	cmp	x22, x21
 1f8:	csel	x23, x22, x21, cc  // cc = lo, ul, last
 1fc:	mov	x0, x20
 200:	add	x8, x8, x23
 204:	mov	w1, wzr
 208:	str	w23, [x20, #128]
 20c:	str	x8, [x20, #16]
 210:	bl	7bc <gz_comp>
 214:	cmn	w0, #0x1
 218:	csel	x8, xzr, x23, eq  // eq = none
 21c:	cmn	w0, #0x1
 220:	b.eq	230 <gz_write+0x1d0>  // b.none
 224:	sub	x22, x22, x8
 228:	cbnz	x22, 1f0 <gz_write+0x190>
 22c:	b	234 <gz_write+0x1d4>
 230:	mov	x19, xzr
 234:	mov	x0, x19
 238:	ldp	x20, x19, [sp, #48]
 23c:	ldp	x22, x21, [sp, #32]
 240:	ldp	x24, x23, [sp, #16]
 244:	ldp	x29, x30, [sp], #64
 248:	ret

000000000000024c <gzfwrite>:
 24c:	stp	x29, x30, [sp, #-32]!
 250:	str	x19, [sp, #16]
 254:	mov	x29, sp
 258:	cbz	x3, 274 <gzfwrite+0x28>
 25c:	ldr	w8, [x3, #24]
 260:	mov	w9, #0x79b1                	// #31153
 264:	cmp	w8, w9
 268:	b.ne	274 <gzfwrite+0x28>  // b.any
 26c:	ldr	w8, [x3, #108]
 270:	cbz	w8, 284 <gzfwrite+0x38>
 274:	mov	x0, xzr
 278:	ldr	x19, [sp, #16]
 27c:	ldp	x29, x30, [sp], #32
 280:	ret
 284:	mov	x19, x1
 288:	umulh	x8, x19, x2
 28c:	cmp	xzr, x8
 290:	mov	x1, x0
 294:	cset	w8, ne  // ne = any
 298:	cbz	x19, 2c4 <gzfwrite+0x78>
 29c:	cbz	w8, 2c4 <gzfwrite+0x78>
 2a0:	adrp	x2, 0 <gzwrite>
 2a4:	add	x2, x2, #0x0
 2a8:	mov	w1, #0xfffffffe            	// #-2
 2ac:	mov	x0, x3
 2b0:	bl	0 <gz_error>
 2b4:	mov	x0, xzr
 2b8:	ldr	x19, [sp, #16]
 2bc:	ldp	x29, x30, [sp], #32
 2c0:	ret
 2c4:	mul	x2, x19, x2
 2c8:	cbz	x2, 274 <gzfwrite+0x28>
 2cc:	mov	x0, x3
 2d0:	bl	60 <gz_write>
 2d4:	udiv	x0, x0, x19
 2d8:	ldr	x19, [sp, #16]
 2dc:	ldp	x29, x30, [sp], #32
 2e0:	ret

00000000000002e4 <gzputc>:
 2e4:	stp	x29, x30, [sp, #-64]!
 2e8:	str	x23, [sp, #16]
 2ec:	stp	x22, x21, [sp, #32]
 2f0:	stp	x20, x19, [sp, #48]
 2f4:	mov	x29, sp
 2f8:	cbz	x0, 318 <gzputc+0x34>
 2fc:	ldr	w8, [x0, #24]
 300:	mov	w9, #0x79b1                	// #31153
 304:	mov	x20, x0
 308:	cmp	w8, w9
 30c:	b.ne	318 <gzputc+0x34>  // b.any
 310:	ldr	w8, [x20, #108]
 314:	cbz	w8, 330 <gzputc+0x4c>
 318:	mov	w0, #0xffffffff            	// #-1
 31c:	ldp	x20, x19, [sp, #48]
 320:	ldp	x22, x21, [sp, #32]
 324:	ldr	x23, [sp, #16]
 328:	ldp	x29, x30, [sp], #64
 32c:	ret
 330:	ldr	w8, [x20, #104]
 334:	mov	w19, w1
 338:	cbz	w8, 3cc <gzputc+0xe8>
 33c:	ldr	w8, [x20, #128]
 340:	ldr	x22, [x20, #96]
 344:	str	wzr, [x20, #104]
 348:	cbz	w8, 360 <gzputc+0x7c>
 34c:	mov	x0, x20
 350:	mov	w1, wzr
 354:	bl	7bc <gz_comp>
 358:	cmn	w0, #0x1
 35c:	b.eq	31c <gzputc+0x38>  // b.none
 360:	cbz	x22, 3cc <gzputc+0xe8>
 364:	mov	w8, wzr
 368:	ldr	w9, [x20, #40]
 36c:	cmp	x22, x9
 370:	csel	w23, w22, w9, lt  // lt = tstop
 374:	tbz	w8, #0, 380 <gzputc+0x9c>
 378:	mov	w21, w23
 37c:	b	394 <gzputc+0xb0>
 380:	ldr	x0, [x20, #48]
 384:	mov	w21, w23
 388:	mov	w1, wzr
 38c:	mov	x2, x21
 390:	bl	0 <memset>
 394:	ldr	x8, [x20, #48]
 398:	ldr	x9, [x20, #16]
 39c:	mov	x0, x20
 3a0:	mov	w1, wzr
 3a4:	str	x8, [x20, #120]
 3a8:	add	x8, x9, x21
 3ac:	str	w23, [x20, #128]
 3b0:	str	x8, [x20, #16]
 3b4:	bl	7bc <gz_comp>
 3b8:	cmn	w0, #0x1
 3bc:	b.eq	31c <gzputc+0x38>  // b.none
 3c0:	sub	x22, x22, x21
 3c4:	mov	w8, #0x1                   	// #1
 3c8:	cbnz	x22, 368 <gzputc+0x84>
 3cc:	ldr	w8, [x20, #40]
 3d0:	cbz	w8, 434 <gzputc+0x150>
 3d4:	ldr	w9, [x20, #128]
 3d8:	cbz	w9, 418 <gzputc+0x134>
 3dc:	ldr	x11, [x20, #120]
 3e0:	ldr	x10, [x20, #48]
 3e4:	add	x9, x11, x9
 3e8:	sub	x9, x9, x10
 3ec:	cmp	w8, w9
 3f0:	b.ls	434 <gzputc+0x150>  // b.plast
 3f4:	strb	w19, [x10, w9, uxtw]
 3f8:	ldr	w8, [x20, #128]
 3fc:	ldr	x9, [x20, #16]
 400:	and	w0, w19, #0xff
 404:	add	w8, w8, #0x1
 408:	add	x9, x9, #0x1
 40c:	str	w8, [x20, #128]
 410:	str	x9, [x20, #16]
 414:	b	31c <gzputc+0x38>
 418:	ldr	x10, [x20, #48]
 41c:	mov	x11, x10
 420:	str	x10, [x20, #120]
 424:	add	x9, x11, x9
 428:	sub	x9, x9, x10
 42c:	cmp	w8, w9
 430:	b.hi	3f4 <gzputc+0x110>  // b.pmore
 434:	add	x1, x29, #0x1c
 438:	mov	w2, #0x1                   	// #1
 43c:	mov	x0, x20
 440:	strb	w19, [x29, #28]
 444:	bl	60 <gz_write>
 448:	and	w8, w19, #0xff
 44c:	cmp	x0, #0x1
 450:	csinv	w0, w8, wzr, eq  // eq = none
 454:	b	31c <gzputc+0x38>

0000000000000458 <gzputs>:
 458:	stp	x29, x30, [sp, #-48]!
 45c:	str	x21, [sp, #16]
 460:	stp	x20, x19, [sp, #32]
 464:	mov	x29, sp
 468:	cbz	x0, 488 <gzputs+0x30>
 46c:	ldr	w8, [x0, #24]
 470:	mov	w9, #0x79b1                	// #31153
 474:	mov	x20, x0
 478:	cmp	w8, w9
 47c:	b.ne	488 <gzputs+0x30>  // b.any
 480:	ldr	w8, [x20, #108]
 484:	cbz	w8, 49c <gzputs+0x44>
 488:	mov	w0, #0xffffffff            	// #-1
 48c:	ldp	x20, x19, [sp, #32]
 490:	ldr	x21, [sp, #16]
 494:	ldp	x29, x30, [sp], #48
 498:	ret
 49c:	mov	x0, x1
 4a0:	mov	x19, x1
 4a4:	bl	0 <strlen>
 4a8:	mov	x21, x0
 4ac:	mov	x0, x20
 4b0:	mov	x1, x19
 4b4:	mov	x2, x21
 4b8:	bl	60 <gz_write>
 4bc:	cmp	w0, #0x0
 4c0:	ccmp	x21, #0x0, #0x4, eq  // eq = none
 4c4:	csinv	w0, w0, wzr, eq  // eq = none
 4c8:	ldp	x20, x19, [sp, #32]
 4cc:	ldr	x21, [sp, #16]
 4d0:	ldp	x29, x30, [sp], #48
 4d4:	ret

00000000000004d8 <gzvprintf>:
 4d8:	sub	sp, sp, #0x60
 4dc:	stp	x29, x30, [sp, #32]
 4e0:	stp	x24, x23, [sp, #48]
 4e4:	stp	x22, x21, [sp, #64]
 4e8:	stp	x20, x19, [sp, #80]
 4ec:	add	x29, sp, #0x20
 4f0:	cbz	x0, 510 <gzvprintf+0x38>
 4f4:	ldr	w8, [x0, #24]
 4f8:	mov	w9, #0x79b1                	// #31153
 4fc:	mov	x19, x0
 500:	cmp	w8, w9
 504:	b.ne	510 <gzvprintf+0x38>  // b.any
 508:	ldr	w8, [x19, #108]
 50c:	cbz	w8, 530 <gzvprintf+0x58>
 510:	mov	w20, #0xfffffffe            	// #-2
 514:	mov	w0, w20
 518:	ldp	x20, x19, [sp, #80]
 51c:	ldp	x22, x21, [sp, #64]
 520:	ldp	x24, x23, [sp, #48]
 524:	ldp	x29, x30, [sp, #32]
 528:	add	sp, sp, #0x60
 52c:	ret
 530:	ldr	w8, [x19, #40]
 534:	mov	x21, x2
 538:	mov	x20, x1
 53c:	cbnz	w8, 550 <gzvprintf+0x78>
 540:	mov	x0, x19
 544:	bl	6b8 <gz_init>
 548:	cmn	w0, #0x1
 54c:	b.eq	6b0 <gzvprintf+0x1d8>  // b.none
 550:	ldr	w8, [x19, #104]
 554:	cbz	w8, 5e8 <gzvprintf+0x110>
 558:	ldr	w8, [x19, #128]
 55c:	ldr	x23, [x19, #96]
 560:	str	wzr, [x19, #104]
 564:	cbz	w8, 57c <gzvprintf+0xa4>
 568:	mov	x0, x19
 56c:	mov	w1, wzr
 570:	bl	7bc <gz_comp>
 574:	cmn	w0, #0x1
 578:	b.eq	6b0 <gzvprintf+0x1d8>  // b.none
 57c:	cbz	x23, 5e8 <gzvprintf+0x110>
 580:	mov	w8, wzr
 584:	ldr	w9, [x19, #40]
 588:	cmp	x23, x9
 58c:	csel	w24, w23, w9, lt  // lt = tstop
 590:	tbz	w8, #0, 59c <gzvprintf+0xc4>
 594:	mov	w22, w24
 598:	b	5b0 <gzvprintf+0xd8>
 59c:	ldr	x0, [x19, #48]
 5a0:	mov	w22, w24
 5a4:	mov	w1, wzr
 5a8:	mov	x2, x22
 5ac:	bl	0 <memset>
 5b0:	ldr	x8, [x19, #48]
 5b4:	ldr	x9, [x19, #16]
 5b8:	mov	x0, x19
 5bc:	mov	w1, wzr
 5c0:	str	x8, [x19, #120]
 5c4:	add	x8, x9, x22
 5c8:	str	w24, [x19, #128]
 5cc:	str	x8, [x19, #16]
 5d0:	bl	7bc <gz_comp>
 5d4:	cmn	w0, #0x1
 5d8:	b.eq	6b0 <gzvprintf+0x1d8>  // b.none
 5dc:	sub	x23, x23, x22
 5e0:	mov	w8, #0x1                   	// #1
 5e4:	cbnz	x23, 584 <gzvprintf+0xac>
 5e8:	ldr	w8, [x19, #128]
 5ec:	cbz	w8, 5f8 <gzvprintf+0x120>
 5f0:	ldr	x9, [x19, #120]
 5f4:	b	600 <gzvprintf+0x128>
 5f8:	ldr	x9, [x19, #48]
 5fc:	str	x9, [x19, #120]
 600:	ldr	w10, [x19, #40]
 604:	add	x22, x9, x8
 608:	mov	x3, sp
 60c:	mov	x0, x22
 610:	sub	w8, w10, #0x1
 614:	strb	wzr, [x22, w8, uxtw]
 618:	ldp	q1, q0, [x21]
 61c:	ldr	w1, [x19, #40]
 620:	mov	x2, x20
 624:	stp	q1, q0, [sp]
 628:	bl	0 <vsnprintf>
 62c:	mov	w20, w0
 630:	cbz	w0, 514 <gzvprintf+0x3c>
 634:	ldr	w8, [x19, #40]
 638:	cmp	w20, w8
 63c:	b.cs	64c <gzvprintf+0x174>  // b.hs, b.nlast
 640:	sub	w9, w8, #0x1
 644:	ldrb	w9, [x22, w9, uxtw]
 648:	cbz	w9, 654 <gzvprintf+0x17c>
 64c:	mov	w20, wzr
 650:	b	514 <gzvprintf+0x3c>
 654:	ldr	w9, [x19, #128]
 658:	ldr	x10, [x19, #16]
 65c:	add	w9, w9, w20
 660:	add	x10, x10, w20, sxtw
 664:	subs	w21, w9, w8
 668:	str	w9, [x19, #128]
 66c:	str	x10, [x19, #16]
 670:	b.cc	514 <gzvprintf+0x3c>  // b.lo, b.ul, b.last
 674:	mov	x0, x19
 678:	mov	w1, wzr
 67c:	str	w8, [x19, #128]
 680:	bl	7bc <gz_comp>
 684:	cmn	w0, #0x1
 688:	b.eq	6b0 <gzvprintf+0x1d8>  // b.none
 68c:	ldr	x0, [x19, #48]
 690:	ldr	w8, [x19, #40]
 694:	mov	w2, w21
 698:	add	x1, x0, x8
 69c:	bl	0 <memcpy>
 6a0:	ldr	x8, [x19, #48]
 6a4:	str	w21, [x19, #128]
 6a8:	str	x8, [x19, #120]
 6ac:	b	514 <gzvprintf+0x3c>
 6b0:	ldr	w20, [x19, #108]
 6b4:	b	514 <gzvprintf+0x3c>

00000000000006b8 <gz_init>:
 6b8:	stp	x29, x30, [sp, #-48]!
 6bc:	stp	x20, x19, [sp, #32]
 6c0:	str	x21, [sp, #16]
 6c4:	ldr	w21, [x0, #44]
 6c8:	mov	x19, x0
 6cc:	mov	x29, sp
 6d0:	lsl	w0, w21, #1
 6d4:	bl	0 <malloc>
 6d8:	str	x0, [x19, #48]
 6dc:	cbz	x0, 75c <gz_init+0xa4>
 6e0:	ldr	w8, [x19, #64]
 6e4:	cbz	w8, 700 <gz_init+0x48>
 6e8:	mov	w0, wzr
 6ec:	str	w21, [x19, #40]
 6f0:	ldp	x20, x19, [sp, #32]
 6f4:	ldr	x21, [sp, #16]
 6f8:	ldp	x29, x30, [sp], #48
 6fc:	ret
 700:	mov	x20, x0
 704:	mov	x0, x21
 708:	bl	0 <malloc>
 70c:	str	x0, [x19, #56]
 710:	cbz	x0, 754 <gz_init+0x9c>
 714:	ldp	w1, w5, [x19, #88]
 718:	adrp	x6, 0 <gzwrite>
 71c:	add	x0, x19, #0x78
 720:	add	x6, x6, #0x0
 724:	mov	w2, #0x8                   	// #8
 728:	mov	w3, #0x1f                  	// #31
 72c:	mov	w4, #0x8                   	// #8
 730:	mov	w7, #0x70                  	// #112
 734:	stp	xzr, xzr, [x19, #184]
 738:	str	xzr, [x19, #200]
 73c:	bl	0 <deflateInit2_>
 740:	cbz	w0, 784 <gz_init+0xcc>
 744:	ldr	x0, [x19, #56]
 748:	bl	0 <free>
 74c:	ldr	x0, [x19, #48]
 750:	b	758 <gz_init+0xa0>
 754:	mov	x0, x20
 758:	bl	0 <free>
 75c:	adrp	x2, 0 <gzwrite>
 760:	add	x2, x2, #0x0
 764:	mov	w1, #0xfffffffc            	// #-4
 768:	mov	x0, x19
 76c:	bl	0 <gz_error>
 770:	mov	w0, #0xffffffff            	// #-1
 774:	ldp	x20, x19, [sp, #32]
 778:	ldr	x21, [sp, #16]
 77c:	ldp	x29, x30, [sp], #48
 780:	ret
 784:	ldr	w9, [x19, #64]
 788:	ldr	w8, [x19, #44]
 78c:	mov	w0, wzr
 790:	str	xzr, [x19, #120]
 794:	str	w8, [x19, #40]
 798:	cbnz	w9, 6f0 <gz_init+0x38>
 79c:	ldr	x9, [x19, #56]
 7a0:	str	w8, [x19, #152]
 7a4:	str	x9, [x19, #144]
 7a8:	str	x9, [x19, #8]
 7ac:	ldp	x20, x19, [sp, #32]
 7b0:	ldr	x21, [sp, #16]
 7b4:	ldp	x29, x30, [sp], #48
 7b8:	ret

00000000000007bc <gz_comp>:
 7bc:	stp	x29, x30, [sp, #-64]!
 7c0:	stp	x22, x21, [sp, #32]
 7c4:	stp	x20, x19, [sp, #48]
 7c8:	ldr	w8, [x0, #40]
 7cc:	mov	x19, x0
 7d0:	mov	w20, w1
 7d4:	str	x23, [sp, #16]
 7d8:	mov	x29, sp
 7dc:	cbnz	w8, 7f0 <gz_comp+0x34>
 7e0:	mov	x0, x19
 7e4:	bl	6b8 <gz_init>
 7e8:	cmn	w0, #0x1
 7ec:	b.eq	8f4 <gz_comp+0x138>  // b.none
 7f0:	ldr	w8, [x19, #64]
 7f4:	cbz	w8, 844 <gz_comp+0x88>
 7f8:	ldr	w8, [x19, #128]
 7fc:	cbz	w8, 83c <gz_comp+0x80>
 800:	ldr	x1, [x19, #120]
 804:	mov	w20, #0x40000000            	// #1073741824
 808:	ldr	w0, [x19, #28]
 80c:	lsr	w9, w8, #30
 810:	cmp	w9, #0x0
 814:	csel	w2, w8, w20, eq  // eq = none
 818:	bl	0 <write>
 81c:	tbnz	w0, #31, a28 <gz_comp+0x26c>
 820:	ldr	w8, [x19, #128]
 824:	ldr	x9, [x19, #120]
 828:	subs	w8, w8, w0
 82c:	add	x1, x9, w0, sxtw
 830:	str	w8, [x19, #128]
 834:	str	x1, [x19, #120]
 838:	b.ne	808 <gz_comp+0x4c>  // b.any
 83c:	mov	w20, wzr
 840:	b	a48 <gz_comp+0x28c>
 844:	add	x21, x19, #0x78
 848:	cbz	w20, 8fc <gz_comp+0x140>
 84c:	cmp	w20, #0x4
 850:	b.ne	990 <gz_comp+0x1d4>  // b.any
 854:	ldr	w23, [x19, #152]
 858:	mov	w0, wzr
 85c:	mov	w22, #0x40000000            	// #1073741824
 860:	cbz	w23, 86c <gz_comp+0xb0>
 864:	cmp	w0, #0x1
 868:	b.ne	8cc <gz_comp+0x110>  // b.any
 86c:	ldr	x8, [x19, #144]
 870:	ldr	x1, [x19, #8]
 874:	cmp	x8, x1
 878:	b.ls	8b4 <gz_comp+0xf8>  // b.plast
 87c:	sub	x8, x8, x1
 880:	ldr	w0, [x19, #28]
 884:	cmp	x8, x22
 888:	csel	x8, x8, x22, lt  // lt = tstop
 88c:	and	x2, x8, #0xffffffff
 890:	bl	0 <write>
 894:	tbnz	w0, #31, a28 <gz_comp+0x26c>
 898:	ldr	x9, [x19, #8]
 89c:	ldr	x8, [x19, #144]
 8a0:	add	x1, x9, w0, sxtw
 8a4:	cmp	x8, x1
 8a8:	str	x1, [x19, #8]
 8ac:	b.hi	87c <gz_comp+0xc0>  // b.pmore
 8b0:	ldr	w23, [x19, #152]
 8b4:	cbnz	w23, 8cc <gz_comp+0x110>
 8b8:	ldr	w23, [x19, #40]
 8bc:	ldr	x8, [x19, #56]
 8c0:	str	w23, [x19, #152]
 8c4:	str	x8, [x19, #144]
 8c8:	str	x8, [x19, #8]
 8cc:	mov	w1, #0x4                   	// #4
 8d0:	mov	x0, x21
 8d4:	bl	0 <deflate>
 8d8:	cmn	w0, #0x2
 8dc:	b.eq	a60 <gz_comp+0x2a4>  // b.none
 8e0:	ldr	w8, [x19, #152]
 8e4:	cmp	w23, w8
 8e8:	mov	w23, w8
 8ec:	b.ne	860 <gz_comp+0xa4>  // b.any
 8f0:	b	a14 <gz_comp+0x258>
 8f4:	mov	w20, #0xffffffff            	// #-1
 8f8:	b	a48 <gz_comp+0x28c>
 8fc:	ldr	w23, [x19, #152]
 900:	mov	w22, #0x40000000            	// #1073741824
 904:	cbnz	w23, 968 <gz_comp+0x1ac>
 908:	ldr	x8, [x19, #144]
 90c:	ldr	x1, [x19, #8]
 910:	cmp	x8, x1
 914:	b.ls	954 <gz_comp+0x198>  // b.plast
 918:	sub	x8, x8, x1
 91c:	ldr	w0, [x19, #28]
 920:	cmp	x8, x22
 924:	csel	x8, x8, x22, lt  // lt = tstop
 928:	and	x2, x8, #0xffffffff
 92c:	bl	0 <write>
 930:	tbnz	w0, #31, a28 <gz_comp+0x26c>
 934:	ldr	x9, [x19, #8]
 938:	ldr	x8, [x19, #144]
 93c:	add	x1, x9, w0, sxtw
 940:	cmp	x8, x1
 944:	str	x1, [x19, #8]
 948:	b.hi	918 <gz_comp+0x15c>  // b.pmore
 94c:	ldr	w23, [x19, #152]
 950:	cbnz	w23, 968 <gz_comp+0x1ac>
 954:	ldr	w23, [x19, #40]
 958:	ldr	x8, [x19, #56]
 95c:	str	w23, [x19, #152]
 960:	str	x8, [x19, #144]
 964:	str	x8, [x19, #8]
 968:	mov	x0, x21
 96c:	mov	w1, wzr
 970:	bl	0 <deflate>
 974:	cmn	w0, #0x2
 978:	b.eq	a60 <gz_comp+0x2a4>  // b.none
 97c:	ldr	w8, [x19, #152]
 980:	cmp	w23, w8
 984:	mov	w23, w8
 988:	b.ne	904 <gz_comp+0x148>  // b.any
 98c:	b	a14 <gz_comp+0x258>
 990:	mov	w22, #0x40000000            	// #1073741824
 994:	ldr	x8, [x19, #144]
 998:	ldr	x1, [x19, #8]
 99c:	cmp	x8, x1
 9a0:	b.ls	9d8 <gz_comp+0x21c>  // b.plast
 9a4:	sub	x8, x8, x1
 9a8:	ldr	w0, [x19, #28]
 9ac:	cmp	x8, x22
 9b0:	csel	x8, x8, x22, lt  // lt = tstop
 9b4:	and	x2, x8, #0xffffffff
 9b8:	bl	0 <write>
 9bc:	tbnz	w0, #31, a28 <gz_comp+0x26c>
 9c0:	ldr	x9, [x19, #8]
 9c4:	ldr	x8, [x19, #144]
 9c8:	add	x1, x9, w0, sxtw
 9cc:	cmp	x8, x1
 9d0:	str	x1, [x19, #8]
 9d4:	b.hi	9a4 <gz_comp+0x1e8>  // b.pmore
 9d8:	ldr	w23, [x19, #152]
 9dc:	cbnz	w23, 9f4 <gz_comp+0x238>
 9e0:	ldr	w23, [x19, #40]
 9e4:	ldr	x8, [x19, #56]
 9e8:	str	w23, [x19, #152]
 9ec:	str	x8, [x19, #144]
 9f0:	str	x8, [x19, #8]
 9f4:	mov	x0, x21
 9f8:	mov	w1, w20
 9fc:	bl	0 <deflate>
 a00:	cmn	w0, #0x2
 a04:	b.eq	a60 <gz_comp+0x2a4>  // b.none
 a08:	ldr	w8, [x19, #152]
 a0c:	cmp	w23, w8
 a10:	b.ne	994 <gz_comp+0x1d8>  // b.any
 a14:	cmp	w20, #0x4
 a18:	b.ne	83c <gz_comp+0x80>  // b.any
 a1c:	mov	x0, x21
 a20:	bl	0 <deflateReset>
 a24:	b	83c <gz_comp+0x80>
 a28:	bl	0 <__errno_location>
 a2c:	ldr	w0, [x0]
 a30:	bl	0 <strerror>
 a34:	mov	x2, x0
 a38:	mov	w1, #0xffffffff            	// #-1
 a3c:	mov	x0, x19
 a40:	mov	w20, #0xffffffff            	// #-1
 a44:	bl	0 <gz_error>
 a48:	mov	w0, w20
 a4c:	ldp	x20, x19, [sp, #48]
 a50:	ldp	x22, x21, [sp, #32]
 a54:	ldr	x23, [sp, #16]
 a58:	ldp	x29, x30, [sp], #64
 a5c:	ret
 a60:	adrp	x2, 0 <gzwrite>
 a64:	add	x2, x2, #0x0
 a68:	mov	w1, #0xfffffffe            	// #-2
 a6c:	mov	x0, x19
 a70:	bl	0 <gz_error>
 a74:	mov	w20, #0xffffffff            	// #-1
 a78:	b	a48 <gz_comp+0x28c>

0000000000000a7c <gzprintf>:
 a7c:	sub	sp, sp, #0x100
 a80:	stp	x29, x30, [sp, #240]
 a84:	add	x29, sp, #0xf0
 a88:	mov	x8, #0xffffffffffffffd0    	// #-48
 a8c:	mov	x9, sp
 a90:	sub	x10, x29, #0x70
 a94:	movk	x8, #0xff80, lsl #32
 a98:	add	x11, x29, #0x10
 a9c:	add	x9, x9, #0x80
 aa0:	add	x10, x10, #0x30
 aa4:	stp	x9, x8, [x29, #-16]
 aa8:	stp	x11, x10, [x29, #-32]
 aac:	stp	x2, x3, [x29, #-112]
 ab0:	stp	x4, x5, [x29, #-96]
 ab4:	stp	x6, x7, [x29, #-80]
 ab8:	stp	q1, q2, [sp, #16]
 abc:	str	q0, [sp]
 ac0:	ldp	q0, q1, [x29, #-32]
 ac4:	sub	x2, x29, #0x40
 ac8:	stp	q3, q4, [sp, #48]
 acc:	stp	q5, q6, [sp, #80]
 ad0:	str	q7, [sp, #112]
 ad4:	stp	q0, q1, [x29, #-64]
 ad8:	bl	4d8 <gzvprintf>
 adc:	ldp	x29, x30, [sp, #240]
 ae0:	add	sp, sp, #0x100
 ae4:	ret

0000000000000ae8 <gzflush>:
 ae8:	stp	x29, x30, [sp, #-64]!
 aec:	str	x23, [sp, #16]
 af0:	stp	x22, x21, [sp, #32]
 af4:	stp	x20, x19, [sp, #48]
 af8:	mov	x29, sp
 afc:	cbz	x0, bd8 <gzflush+0xf0>
 b00:	ldr	w8, [x0, #24]
 b04:	mov	w9, #0x79b1                	// #31153
 b08:	mov	x19, x0
 b0c:	cmp	w8, w9
 b10:	b.ne	bd8 <gzflush+0xf0>  // b.any
 b14:	mov	w20, w1
 b18:	cmp	w1, #0x4
 b1c:	mov	w0, #0xfffffffe            	// #-2
 b20:	b.hi	bdc <gzflush+0xf4>  // b.pmore
 b24:	ldr	w8, [x19, #108]
 b28:	cbnz	w8, bdc <gzflush+0xf4>
 b2c:	ldr	w8, [x19, #104]
 b30:	cbz	w8, bc4 <gzflush+0xdc>
 b34:	ldr	w8, [x19, #128]
 b38:	ldr	x22, [x19, #96]
 b3c:	str	wzr, [x19, #104]
 b40:	cbz	w8, b58 <gzflush+0x70>
 b44:	mov	x0, x19
 b48:	mov	w1, wzr
 b4c:	bl	7bc <gz_comp>
 b50:	cmn	w0, #0x1
 b54:	b.eq	bd0 <gzflush+0xe8>  // b.none
 b58:	cbz	x22, bc4 <gzflush+0xdc>
 b5c:	mov	w8, wzr
 b60:	ldr	w9, [x19, #40]
 b64:	cmp	x22, x9
 b68:	csel	w23, w22, w9, lt  // lt = tstop
 b6c:	tbz	w8, #0, b78 <gzflush+0x90>
 b70:	mov	w21, w23
 b74:	b	b8c <gzflush+0xa4>
 b78:	ldr	x0, [x19, #48]
 b7c:	mov	w21, w23
 b80:	mov	w1, wzr
 b84:	mov	x2, x21
 b88:	bl	0 <memset>
 b8c:	ldr	x8, [x19, #48]
 b90:	ldr	x9, [x19, #16]
 b94:	mov	x0, x19
 b98:	mov	w1, wzr
 b9c:	str	x8, [x19, #120]
 ba0:	add	x8, x9, x21
 ba4:	str	w23, [x19, #128]
 ba8:	str	x8, [x19, #16]
 bac:	bl	7bc <gz_comp>
 bb0:	cmn	w0, #0x1
 bb4:	b.eq	bd0 <gzflush+0xe8>  // b.none
 bb8:	sub	x22, x22, x21
 bbc:	mov	w8, #0x1                   	// #1
 bc0:	cbnz	x22, b60 <gzflush+0x78>
 bc4:	mov	x0, x19
 bc8:	mov	w1, w20
 bcc:	bl	7bc <gz_comp>
 bd0:	ldr	w0, [x19, #108]
 bd4:	b	bdc <gzflush+0xf4>
 bd8:	mov	w0, #0xfffffffe            	// #-2
 bdc:	ldp	x20, x19, [sp, #48]
 be0:	ldp	x22, x21, [sp, #32]
 be4:	ldr	x23, [sp, #16]
 be8:	ldp	x29, x30, [sp], #64
 bec:	ret

0000000000000bf0 <gzsetparams>:
 bf0:	stp	x29, x30, [sp, #-64]!
 bf4:	stp	x24, x23, [sp, #16]
 bf8:	stp	x22, x21, [sp, #32]
 bfc:	stp	x20, x19, [sp, #48]
 c00:	mov	x29, sp
 c04:	cbz	x0, c24 <gzsetparams+0x34>
 c08:	ldr	w8, [x0, #24]
 c0c:	mov	w9, #0x79b1                	// #31153
 c10:	mov	x19, x0
 c14:	cmp	w8, w9
 c18:	b.ne	c24 <gzsetparams+0x34>  // b.any
 c1c:	ldr	w8, [x19, #108]
 c20:	cbz	w8, c3c <gzsetparams+0x4c>
 c24:	mov	w0, #0xfffffffe            	// #-2
 c28:	ldp	x20, x19, [sp, #48]
 c2c:	ldp	x22, x21, [sp, #32]
 c30:	ldp	x24, x23, [sp, #16]
 c34:	ldp	x29, x30, [sp], #64
 c38:	ret
 c3c:	ldr	w8, [x19, #88]
 c40:	mov	w20, w2
 c44:	mov	w21, w1
 c48:	cmp	w8, w1
 c4c:	b.ne	c64 <gzsetparams+0x74>  // b.any
 c50:	ldr	w8, [x19, #92]
 c54:	cmp	w8, w20
 c58:	b.ne	c64 <gzsetparams+0x74>  // b.any
 c5c:	mov	w0, wzr
 c60:	b	c28 <gzsetparams+0x38>
 c64:	ldr	w8, [x19, #104]
 c68:	cbz	w8, cfc <gzsetparams+0x10c>
 c6c:	ldr	w8, [x19, #128]
 c70:	ldr	x23, [x19, #96]
 c74:	str	wzr, [x19, #104]
 c78:	cbz	w8, c90 <gzsetparams+0xa0>
 c7c:	mov	x0, x19
 c80:	mov	w1, wzr
 c84:	bl	7bc <gz_comp>
 c88:	cmn	w0, #0x1
 c8c:	b.eq	d3c <gzsetparams+0x14c>  // b.none
 c90:	cbz	x23, cfc <gzsetparams+0x10c>
 c94:	mov	w8, wzr
 c98:	ldr	w9, [x19, #40]
 c9c:	cmp	x23, x9
 ca0:	csel	w24, w23, w9, lt  // lt = tstop
 ca4:	tbz	w8, #0, cb0 <gzsetparams+0xc0>
 ca8:	mov	w22, w24
 cac:	b	cc4 <gzsetparams+0xd4>
 cb0:	ldr	x0, [x19, #48]
 cb4:	mov	w22, w24
 cb8:	mov	w1, wzr
 cbc:	mov	x2, x22
 cc0:	bl	0 <memset>
 cc4:	ldr	x8, [x19, #48]
 cc8:	ldr	x9, [x19, #16]
 ccc:	mov	x0, x19
 cd0:	mov	w1, wzr
 cd4:	str	x8, [x19, #120]
 cd8:	add	x8, x9, x22
 cdc:	str	w24, [x19, #128]
 ce0:	str	x8, [x19, #16]
 ce4:	bl	7bc <gz_comp>
 ce8:	cmn	w0, #0x1
 cec:	b.eq	d3c <gzsetparams+0x14c>  // b.none
 cf0:	sub	x23, x23, x22
 cf4:	mov	w8, #0x1                   	// #1
 cf8:	cbnz	x23, c98 <gzsetparams+0xa8>
 cfc:	ldr	w8, [x19, #40]
 d00:	cbz	w8, d30 <gzsetparams+0x140>
 d04:	ldr	w8, [x19, #128]
 d08:	cbz	w8, d20 <gzsetparams+0x130>
 d0c:	mov	w1, #0x5                   	// #5
 d10:	mov	x0, x19
 d14:	bl	7bc <gz_comp>
 d18:	cmn	w0, #0x1
 d1c:	b.eq	d3c <gzsetparams+0x14c>  // b.none
 d20:	add	x0, x19, #0x78
 d24:	mov	w1, w21
 d28:	mov	w2, w20
 d2c:	bl	0 <deflateParams>
 d30:	mov	w0, wzr
 d34:	stp	w21, w20, [x19, #88]
 d38:	b	c28 <gzsetparams+0x38>
 d3c:	ldr	w0, [x19, #108]
 d40:	b	c28 <gzsetparams+0x38>

0000000000000d44 <gzclose_w>:
 d44:	stp	x29, x30, [sp, #-48]!
 d48:	stp	x22, x21, [sp, #16]
 d4c:	stp	x20, x19, [sp, #32]
 d50:	mov	x29, sp
 d54:	cbz	x0, e0c <gzclose_w+0xc8>
 d58:	ldr	w8, [x0, #24]
 d5c:	mov	w9, #0x79b1                	// #31153
 d60:	mov	x19, x0
 d64:	cmp	w8, w9
 d68:	b.ne	e0c <gzclose_w+0xc8>  // b.any
 d6c:	ldr	w8, [x19, #104]
 d70:	cbz	w8, e04 <gzclose_w+0xc0>
 d74:	ldr	w8, [x19, #128]
 d78:	ldr	x21, [x19, #96]
 d7c:	str	wzr, [x19, #104]
 d80:	cbz	w8, d98 <gzclose_w+0x54>
 d84:	mov	x0, x19
 d88:	mov	w1, wzr
 d8c:	bl	7bc <gz_comp>
 d90:	cmn	w0, #0x1
 d94:	b.eq	e14 <gzclose_w+0xd0>  // b.none
 d98:	cbz	x21, e04 <gzclose_w+0xc0>
 d9c:	mov	w8, wzr
 da0:	ldr	w9, [x19, #40]
 da4:	cmp	x21, x9
 da8:	csel	w22, w21, w9, lt  // lt = tstop
 dac:	tbz	w8, #0, db8 <gzclose_w+0x74>
 db0:	mov	w20, w22
 db4:	b	dcc <gzclose_w+0x88>
 db8:	ldr	x0, [x19, #48]
 dbc:	mov	w20, w22
 dc0:	mov	w1, wzr
 dc4:	mov	x2, x20
 dc8:	bl	0 <memset>
 dcc:	ldr	x8, [x19, #48]
 dd0:	ldr	x9, [x19, #16]
 dd4:	mov	x0, x19
 dd8:	mov	w1, wzr
 ddc:	str	x8, [x19, #120]
 de0:	add	x8, x9, x20
 de4:	str	w22, [x19, #128]
 de8:	str	x8, [x19, #16]
 dec:	bl	7bc <gz_comp>
 df0:	cmn	w0, #0x1
 df4:	b.eq	e14 <gzclose_w+0xd0>  // b.none
 df8:	sub	x21, x21, x20
 dfc:	mov	w8, #0x1                   	// #1
 e00:	cbnz	x21, da0 <gzclose_w+0x5c>
 e04:	mov	w20, wzr
 e08:	b	e18 <gzclose_w+0xd4>
 e0c:	mov	w20, #0xfffffffe            	// #-2
 e10:	b	e88 <gzclose_w+0x144>
 e14:	ldr	w20, [x19, #108]
 e18:	mov	w1, #0x4                   	// #4
 e1c:	mov	x0, x19
 e20:	bl	7bc <gz_comp>
 e24:	cmn	w0, #0x1
 e28:	b.ne	e30 <gzclose_w+0xec>  // b.any
 e2c:	ldr	w20, [x19, #108]
 e30:	ldr	w8, [x19, #40]
 e34:	cbz	w8, e58 <gzclose_w+0x114>
 e38:	ldr	w8, [x19, #64]
 e3c:	cbnz	w8, e50 <gzclose_w+0x10c>
 e40:	add	x0, x19, #0x78
 e44:	bl	0 <deflateEnd>
 e48:	ldr	x0, [x19, #56]
 e4c:	bl	0 <free>
 e50:	ldr	x0, [x19, #48]
 e54:	bl	0 <free>
 e58:	mov	x0, x19
 e5c:	mov	w1, wzr
 e60:	mov	x2, xzr
 e64:	bl	0 <gz_error>
 e68:	ldr	x0, [x19, #32]
 e6c:	bl	0 <free>
 e70:	ldr	w0, [x19, #28]
 e74:	bl	0 <close>
 e78:	cmn	w0, #0x1
 e7c:	mov	x0, x19
 e80:	csinv	w20, w20, wzr, ne  // ne = any
 e84:	bl	0 <free>
 e88:	mov	w0, w20
 e8c:	ldp	x20, x19, [sp, #32]
 e90:	ldp	x22, x21, [sp, #16]
 e94:	ldp	x29, x30, [sp], #48
 e98:	ret
