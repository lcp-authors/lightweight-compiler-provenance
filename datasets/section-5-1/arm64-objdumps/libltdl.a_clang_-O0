In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libltdl.a_clang_-O0:

libltdl_libltdl_la-preopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <preopen_LTX_get_vtable>:
   0:	sub	sp, sp, #0x30
   4:	stp	x29, x30, [sp, #32]
   8:	add	x29, sp, #0x20
   c:	adrp	x8, 0 <preopen_LTX_get_vtable>
  10:	add	x8, x8, #0x0
  14:	str	x0, [sp, #16]
  18:	ldr	x9, [x8]
  1c:	str	x8, [sp, #8]
  20:	cbnz	x9, 34 <preopen_LTX_get_vtable+0x34>
  24:	mov	x0, #0x48                  	// #72
  28:	bl	0 <lt__zalloc>
  2c:	ldr	x8, [sp, #8]
  30:	str	x0, [x8]
  34:	ldr	x8, [sp, #8]
  38:	ldr	x9, [x8]
  3c:	cbz	x9, d4 <preopen_LTX_get_vtable+0xd4>
  40:	ldr	x8, [sp, #8]
  44:	ldr	x9, [x8]
  48:	ldr	x9, [x9]
  4c:	cbnz	x9, d4 <preopen_LTX_get_vtable+0xd4>
  50:	ldr	x8, [sp, #8]
  54:	ldr	x9, [x8]
  58:	adrp	x10, 0 <preopen_LTX_get_vtable>
  5c:	add	x10, x10, #0x0
  60:	str	x10, [x9]
  64:	ldr	x9, [x8]
  68:	mov	x10, xzr
  6c:	str	x10, [x9, #8]
  70:	ldr	x9, [x8]
  74:	adrp	x10, 0 <preopen_LTX_get_vtable>
  78:	add	x10, x10, #0x0
  7c:	str	x10, [x9, #16]
  80:	ldr	x9, [x8]
  84:	adrp	x10, 0 <preopen_LTX_get_vtable>
  88:	add	x10, x10, #0x0
  8c:	str	x10, [x9, #24]
  90:	ldr	x9, [x8]
  94:	adrp	x10, 0 <preopen_LTX_get_vtable>
  98:	add	x10, x10, #0x0
  9c:	str	x10, [x9, #32]
  a0:	ldr	x9, [x8]
  a4:	adrp	x10, 0 <preopen_LTX_get_vtable>
  a8:	add	x10, x10, #0x0
  ac:	str	x10, [x9, #40]
  b0:	ldr	x9, [x8]
  b4:	adrp	x10, 0 <preopen_LTX_get_vtable>
  b8:	add	x10, x10, #0x0
  bc:	str	x10, [x9, #48]
  c0:	ldr	x9, [sp, #16]
  c4:	ldr	x10, [x8]
  c8:	str	x9, [x10, #56]
  cc:	ldr	x9, [x8]
  d0:	str	wzr, [x9, #64]
  d4:	ldr	x8, [sp, #8]
  d8:	ldr	x9, [x8]
  dc:	cbz	x9, 110 <preopen_LTX_get_vtable+0x110>
  e0:	ldr	x8, [sp, #8]
  e4:	ldr	x9, [x8]
  e8:	ldr	x9, [x9, #56]
  ec:	ldr	x10, [sp, #16]
  f0:	cmp	x9, x10
  f4:	b.eq	110 <preopen_LTX_get_vtable+0x110>  // b.none
  f8:	mov	w0, #0x3                   	// #3
  fc:	bl	0 <lt__error_string>
 100:	bl	0 <lt__set_last_error>
 104:	mov	x8, xzr
 108:	stur	x8, [x29, #-8]
 10c:	b	11c <preopen_LTX_get_vtable+0x11c>
 110:	ldr	x8, [sp, #8]
 114:	ldr	x9, [x8]
 118:	stur	x9, [x29, #-8]
 11c:	ldur	x0, [x29, #-8]
 120:	ldp	x29, x30, [sp, #32]
 124:	add	sp, sp, #0x30
 128:	ret

000000000000012c <vm_open>:
 12c:	sub	sp, sp, #0x50
 130:	stp	x29, x30, [sp, #64]
 134:	add	x29, sp, #0x40
 138:	mov	x8, xzr
 13c:	adrp	x9, 0 <preopen_LTX_get_vtable>
 140:	add	x9, x9, #0x0
 144:	stur	x0, [x29, #-8]
 148:	stur	x1, [x29, #-16]
 14c:	stur	x2, [x29, #-24]
 150:	str	x8, [sp, #24]
 154:	ldr	x8, [x9]
 158:	cbnz	x8, 16c <vm_open+0x40>
 15c:	mov	w0, #0x7                   	// #7
 160:	bl	0 <lt__error_string>
 164:	bl	0 <lt__set_last_error>
 168:	b	230 <vm_open+0x104>
 16c:	ldur	x8, [x29, #-16]
 170:	cbnz	x8, 180 <vm_open+0x54>
 174:	adrp	x8, 0 <preopen_LTX_get_vtable>
 178:	add	x8, x8, #0x0
 17c:	stur	x8, [x29, #-16]
 180:	adrp	x8, 0 <preopen_LTX_get_vtable>
 184:	add	x8, x8, #0x0
 188:	ldr	x8, [x8]
 18c:	str	x8, [sp, #32]
 190:	ldr	x8, [sp, #32]
 194:	cbz	x8, 224 <vm_open+0xf8>
 198:	ldr	x8, [sp, #32]
 19c:	ldr	x8, [x8, #8]
 1a0:	str	x8, [sp, #16]
 1a4:	ldr	x8, [sp, #16]
 1a8:	ldr	x8, [x8]
 1ac:	cbz	x8, 214 <vm_open+0xe8>
 1b0:	ldr	x8, [sp, #16]
 1b4:	ldr	x8, [x8, #8]
 1b8:	cbnz	x8, 204 <vm_open+0xd8>
 1bc:	ldr	x8, [sp, #16]
 1c0:	ldr	x0, [x8]
 1c4:	ldur	x1, [x29, #-16]
 1c8:	bl	0 <strcmp>
 1cc:	cbnz	w0, 204 <vm_open+0xd8>
 1d0:	ldr	x8, [sp, #16]
 1d4:	add	x8, x8, #0x10
 1d8:	str	x8, [sp, #8]
 1dc:	ldr	x8, [sp, #8]
 1e0:	ldr	x8, [x8, #8]
 1e4:	cbz	x8, 204 <vm_open+0xd8>
 1e8:	ldr	x8, [sp, #8]
 1ec:	ldr	x8, [x8]
 1f0:	cbz	x8, 204 <vm_open+0xd8>
 1f4:	ldr	x8, [sp, #32]
 1f8:	ldr	x8, [x8, #8]
 1fc:	str	x8, [sp, #24]
 200:	b	230 <vm_open+0x104>
 204:	ldr	x8, [sp, #16]
 208:	add	x8, x8, #0x10
 20c:	str	x8, [sp, #16]
 210:	b	1a4 <vm_open+0x78>
 214:	ldr	x8, [sp, #32]
 218:	ldr	x8, [x8]
 21c:	str	x8, [sp, #32]
 220:	b	190 <vm_open+0x64>
 224:	mov	w0, #0x5                   	// #5
 228:	bl	0 <lt__error_string>
 22c:	bl	0 <lt__set_last_error>
 230:	ldr	x0, [sp, #24]
 234:	ldp	x29, x30, [sp, #64]
 238:	add	sp, sp, #0x50
 23c:	ret

0000000000000240 <vm_close>:
 240:	sub	sp, sp, #0x10
 244:	mov	x8, xzr
 248:	mov	w9, wzr
 24c:	str	x0, [sp, #8]
 250:	str	x1, [sp]
 254:	str	x8, [sp]
 258:	mov	w0, w9
 25c:	add	sp, sp, #0x10
 260:	ret

0000000000000264 <vm_sym>:
 264:	sub	sp, sp, #0x40
 268:	stp	x29, x30, [sp, #48]
 26c:	add	x29, sp, #0x30
 270:	stur	x0, [x29, #-16]
 274:	str	x1, [sp, #24]
 278:	str	x2, [sp, #16]
 27c:	ldr	x8, [sp, #24]
 280:	str	x8, [sp, #8]
 284:	ldr	x8, [sp, #8]
 288:	ldr	x8, [x8, #16]
 28c:	cbz	x8, 2b4 <vm_sym+0x50>
 290:	ldr	x8, [sp, #8]
 294:	ldr	x0, [x8, #16]
 298:	adrp	x1, 0 <preopen_LTX_get_vtable>
 29c:	add	x1, x1, #0x0
 2a0:	bl	0 <strcmp>
 2a4:	cbnz	w0, 2b4 <vm_sym+0x50>
 2a8:	ldr	x8, [sp, #8]
 2ac:	add	x8, x8, #0x10
 2b0:	str	x8, [sp, #8]
 2b4:	ldr	x8, [sp, #8]
 2b8:	add	x8, x8, #0x20
 2bc:	str	x8, [sp, #8]
 2c0:	ldr	x8, [sp, #8]
 2c4:	ldr	x8, [x8]
 2c8:	cbz	x8, 300 <vm_sym+0x9c>
 2cc:	ldr	x8, [sp, #8]
 2d0:	ldr	x0, [x8]
 2d4:	ldr	x1, [sp, #16]
 2d8:	bl	0 <strcmp>
 2dc:	cbnz	w0, 2f0 <vm_sym+0x8c>
 2e0:	ldr	x8, [sp, #8]
 2e4:	ldr	x8, [x8, #8]
 2e8:	stur	x8, [x29, #-8]
 2ec:	b	314 <vm_sym+0xb0>
 2f0:	ldr	x8, [sp, #8]
 2f4:	add	x8, x8, #0x10
 2f8:	str	x8, [sp, #8]
 2fc:	b	2c0 <vm_sym+0x5c>
 300:	mov	w0, #0xa                   	// #10
 304:	bl	0 <lt__error_string>
 308:	bl	0 <lt__set_last_error>
 30c:	mov	x8, xzr
 310:	stur	x8, [x29, #-8]
 314:	ldur	x0, [x29, #-8]
 318:	ldp	x29, x30, [sp, #48]
 31c:	add	sp, sp, #0x40
 320:	ret

0000000000000324 <vl_init>:
 324:	sub	sp, sp, #0x20
 328:	stp	x29, x30, [sp, #16]
 32c:	add	x29, sp, #0x10
 330:	mov	x8, xzr
 334:	adrp	x9, 0 <preopen_LTX_get_vtable>
 338:	add	x9, x9, #0x0
 33c:	adrp	x10, 0 <preopen_LTX_get_vtable>
 340:	add	x10, x10, #0x0
 344:	str	x0, [sp, #8]
 348:	str	wzr, [sp, #4]
 34c:	str	x8, [x9]
 350:	ldr	x8, [x10]
 354:	cbz	x8, 36c <vl_init+0x48>
 358:	adrp	x8, 0 <preopen_LTX_get_vtable>
 35c:	add	x8, x8, #0x0
 360:	ldr	x0, [x8]
 364:	bl	3e4 <lt_dlpreload>
 368:	str	w0, [sp, #4]
 36c:	ldr	w0, [sp, #4]
 370:	ldp	x29, x30, [sp, #16]
 374:	add	sp, sp, #0x20
 378:	ret

000000000000037c <vl_exit>:
 37c:	sub	sp, sp, #0x20
 380:	stp	x29, x30, [sp, #16]
 384:	add	x29, sp, #0x10
 388:	mov	x8, xzr
 38c:	adrp	x9, 0 <preopen_LTX_get_vtable>
 390:	add	x9, x9, #0x0
 394:	mov	w10, wzr
 398:	str	x0, [sp, #8]
 39c:	str	x8, [x9]
 3a0:	str	w10, [sp, #4]
 3a4:	bl	54c <free_symlists>
 3a8:	ldr	w10, [sp, #4]
 3ac:	mov	w0, w10
 3b0:	ldp	x29, x30, [sp, #16]
 3b4:	add	sp, sp, #0x20
 3b8:	ret

00000000000003bc <lt_dlpreload_default>:
 3bc:	sub	sp, sp, #0x10
 3c0:	adrp	x8, 0 <preopen_LTX_get_vtable>
 3c4:	add	x8, x8, #0x0
 3c8:	mov	w9, wzr
 3cc:	str	x0, [sp, #8]
 3d0:	ldr	x10, [sp, #8]
 3d4:	str	x10, [x8]
 3d8:	mov	w0, w9
 3dc:	add	sp, sp, #0x10
 3e0:	ret

00000000000003e4 <lt_dlpreload>:
 3e4:	sub	sp, sp, #0x20
 3e8:	stp	x29, x30, [sp, #16]
 3ec:	add	x29, sp, #0x10
 3f0:	str	x0, [sp, #8]
 3f4:	str	wzr, [sp, #4]
 3f8:	ldr	x8, [sp, #8]
 3fc:	cbz	x8, 410 <lt_dlpreload+0x2c>
 400:	ldr	x0, [sp, #8]
 404:	bl	448 <add_symlist>
 408:	str	w0, [sp, #4]
 40c:	b	438 <lt_dlpreload+0x54>
 410:	bl	54c <free_symlists>
 414:	adrp	x8, 0 <preopen_LTX_get_vtable>
 418:	add	x8, x8, #0x0
 41c:	ldr	x8, [x8]
 420:	cbz	x8, 438 <lt_dlpreload+0x54>
 424:	adrp	x8, 0 <preopen_LTX_get_vtable>
 428:	add	x8, x8, #0x0
 42c:	ldr	x0, [x8]
 430:	bl	3e4 <lt_dlpreload>
 434:	str	w0, [sp, #4]
 438:	ldr	w0, [sp, #4]
 43c:	ldp	x29, x30, [sp, #16]
 440:	add	sp, sp, #0x20
 444:	ret

0000000000000448 <add_symlist>:
 448:	sub	sp, sp, #0x50
 44c:	stp	x29, x30, [sp, #64]
 450:	add	x29, sp, #0x40
 454:	adrp	x8, 0 <preopen_LTX_get_vtable>
 458:	add	x8, x8, #0x0
 45c:	stur	x0, [x29, #-8]
 460:	stur	wzr, [x29, #-20]
 464:	ldr	x9, [x8]
 468:	stur	x9, [x29, #-16]
 46c:	str	x8, [sp, #16]
 470:	ldur	x8, [x29, #-16]
 474:	mov	w9, #0x0                   	// #0
 478:	str	w9, [sp, #12]
 47c:	cbz	x8, 498 <add_symlist+0x50>
 480:	ldur	x8, [x29, #-16]
 484:	ldr	x8, [x8, #8]
 488:	ldur	x9, [x29, #-8]
 48c:	cmp	x8, x9
 490:	cset	w10, ne  // ne = any
 494:	str	w10, [sp, #12]
 498:	ldr	w8, [sp, #12]
 49c:	tbnz	w8, #0, 4a4 <add_symlist+0x5c>
 4a0:	b	4b4 <add_symlist+0x6c>
 4a4:	ldur	x8, [x29, #-16]
 4a8:	ldr	x8, [x8]
 4ac:	stur	x8, [x29, #-16]
 4b0:	b	470 <add_symlist+0x28>
 4b4:	ldur	x8, [x29, #-16]
 4b8:	cbnz	x8, 53c <add_symlist+0xf4>
 4bc:	mov	x0, #0x10                  	// #16
 4c0:	bl	0 <lt__zalloc>
 4c4:	str	x0, [sp, #32]
 4c8:	ldr	x8, [sp, #32]
 4cc:	cbz	x8, 530 <add_symlist+0xe8>
 4d0:	ldur	x8, [x29, #-8]
 4d4:	ldr	x9, [sp, #32]
 4d8:	str	x8, [x9, #8]
 4dc:	ldr	x8, [sp, #16]
 4e0:	ldr	x9, [x8]
 4e4:	ldr	x10, [sp, #32]
 4e8:	str	x9, [x10]
 4ec:	ldr	x9, [sp, #32]
 4f0:	str	x9, [x8]
 4f4:	ldur	x9, [x29, #-8]
 4f8:	ldr	x9, [x9, #16]
 4fc:	cbz	x9, 52c <add_symlist+0xe4>
 500:	ldur	x8, [x29, #-8]
 504:	ldr	x0, [x8, #16]
 508:	adrp	x1, 0 <preopen_LTX_get_vtable>
 50c:	add	x1, x1, #0x0
 510:	bl	0 <strcmp>
 514:	cbnz	w0, 52c <add_symlist+0xe4>
 518:	ldur	x8, [x29, #-8]
 51c:	ldr	x8, [x8, #24]
 520:	str	x8, [sp, #24]
 524:	ldr	x8, [sp, #24]
 528:	blr	x8
 52c:	b	53c <add_symlist+0xf4>
 530:	ldur	w8, [x29, #-20]
 534:	add	w8, w8, #0x1
 538:	stur	w8, [x29, #-20]
 53c:	ldur	w0, [x29, #-20]
 540:	ldp	x29, x30, [sp, #64]
 544:	add	sp, sp, #0x50
 548:	ret

000000000000054c <free_symlists>:
 54c:	sub	sp, sp, #0x30
 550:	stp	x29, x30, [sp, #32]
 554:	add	x29, sp, #0x20
 558:	adrp	x8, 0 <preopen_LTX_get_vtable>
 55c:	add	x8, x8, #0x0
 560:	ldr	x8, [x8]
 564:	stur	x8, [x29, #-8]
 568:	ldur	x8, [x29, #-8]
 56c:	cbz	x8, 59c <free_symlists+0x50>
 570:	ldur	x8, [x29, #-8]
 574:	ldr	x8, [x8]
 578:	str	x8, [sp, #16]
 57c:	ldur	x0, [x29, #-8]
 580:	bl	0 <free>
 584:	mov	x8, xzr
 588:	stur	x8, [x29, #-8]
 58c:	str	x8, [sp, #8]
 590:	ldr	x8, [sp, #16]
 594:	stur	x8, [x29, #-8]
 598:	b	568 <free_symlists+0x1c>
 59c:	mov	x8, xzr
 5a0:	adrp	x9, 0 <preopen_LTX_get_vtable>
 5a4:	add	x9, x9, #0x0
 5a8:	str	x8, [x9]
 5ac:	mov	w10, wzr
 5b0:	mov	w0, w10
 5b4:	ldp	x29, x30, [sp, #32]
 5b8:	add	sp, sp, #0x30
 5bc:	ret

00000000000005c0 <lt_dlpreload_open>:
 5c0:	sub	sp, sp, #0x50
 5c4:	stp	x29, x30, [sp, #64]
 5c8:	add	x29, sp, #0x40
 5cc:	adrp	x8, 0 <preopen_LTX_get_vtable>
 5d0:	add	x8, x8, #0x0
 5d4:	stur	x0, [x29, #-8]
 5d8:	stur	x1, [x29, #-16]
 5dc:	stur	wzr, [x29, #-28]
 5e0:	str	wzr, [sp, #32]
 5e4:	ldr	x8, [x8]
 5e8:	stur	x8, [x29, #-24]
 5ec:	ldur	x8, [x29, #-24]
 5f0:	cbz	x8, 6f4 <lt_dlpreload_open+0x134>
 5f4:	ldur	x8, [x29, #-8]
 5f8:	cbz	x8, 614 <lt_dlpreload_open+0x54>
 5fc:	ldur	x8, [x29, #-24]
 600:	ldr	x8, [x8, #8]
 604:	ldr	x0, [x8]
 608:	ldur	x1, [x29, #-8]
 60c:	bl	0 <strcmp>
 610:	cbz	w0, 638 <lt_dlpreload_open+0x78>
 614:	ldur	x8, [x29, #-8]
 618:	cbnz	x8, 6e4 <lt_dlpreload_open+0x124>
 61c:	ldur	x8, [x29, #-24]
 620:	ldr	x8, [x8, #8]
 624:	ldr	x0, [x8]
 628:	adrp	x1, 0 <preopen_LTX_get_vtable>
 62c:	add	x1, x1, #0x0
 630:	bl	0 <strcmp>
 634:	cbnz	w0, 6e4 <lt_dlpreload_open+0x124>
 638:	str	wzr, [sp, #20]
 63c:	ldr	w8, [sp, #32]
 640:	add	w8, w8, #0x1
 644:	str	w8, [sp, #32]
 648:	ldur	x8, [x29, #-24]
 64c:	ldr	x8, [x8, #8]
 650:	ldr	w9, [sp, #20]
 654:	add	w9, w9, #0x1
 658:	str	w9, [sp, #20]
 65c:	mov	w10, w9
 660:	ubfx	x10, x10, #0, #32
 664:	mov	x11, #0x10                  	// #16
 668:	mul	x10, x11, x10
 66c:	add	x8, x8, x10
 670:	str	x8, [sp, #24]
 674:	ldr	x8, [x8]
 678:	cbz	x8, 6e4 <lt_dlpreload_open+0x124>
 67c:	ldr	x8, [sp, #24]
 680:	ldr	x8, [x8, #8]
 684:	cbnz	x8, 6e0 <lt_dlpreload_open+0x120>
 688:	ldr	x8, [sp, #24]
 68c:	ldr	x0, [x8]
 690:	adrp	x1, 0 <preopen_LTX_get_vtable>
 694:	add	x1, x1, #0x0
 698:	bl	0 <strcmp>
 69c:	cbz	w0, 6e0 <lt_dlpreload_open+0x120>
 6a0:	ldr	x8, [sp, #24]
 6a4:	ldr	x0, [x8]
 6a8:	bl	0 <lt_dlopen>
 6ac:	str	x0, [sp, #8]
 6b0:	ldr	x8, [sp, #8]
 6b4:	cbnz	x8, 6c8 <lt_dlpreload_open+0x108>
 6b8:	ldur	w8, [x29, #-28]
 6bc:	add	w8, w8, #0x1
 6c0:	stur	w8, [x29, #-28]
 6c4:	b	6e0 <lt_dlpreload_open+0x120>
 6c8:	ldur	x8, [x29, #-16]
 6cc:	ldr	x0, [sp, #8]
 6d0:	blr	x8
 6d4:	ldur	w9, [x29, #-28]
 6d8:	add	w9, w9, w0
 6dc:	stur	w9, [x29, #-28]
 6e0:	b	648 <lt_dlpreload_open+0x88>
 6e4:	ldur	x8, [x29, #-24]
 6e8:	ldr	x8, [x8]
 6ec:	stur	x8, [x29, #-24]
 6f0:	b	5ec <lt_dlpreload_open+0x2c>
 6f4:	ldr	w8, [sp, #32]
 6f8:	cbnz	w8, 714 <lt_dlpreload_open+0x154>
 6fc:	mov	w0, #0x8                   	// #8
 700:	bl	0 <lt__error_string>
 704:	bl	0 <lt__set_last_error>
 708:	ldur	w8, [x29, #-28]
 70c:	add	w8, w8, #0x1
 710:	stur	w8, [x29, #-28]
 714:	ldur	w0, [x29, #-28]
 718:	ldp	x29, x30, [sp, #64]
 71c:	add	sp, sp, #0x50
 720:	ret

libltdl_libltdl_la-lt__alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <alloc_die_default>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	add	x29, sp, #0x10
   c:	adrp	x8, 0 <stderr>
  10:	add	x8, x8, #0x0
  14:	adrp	x1, 0 <alloc_die_default>
  18:	add	x1, x1, #0x0
  1c:	mov	w0, #0x1                   	// #1
  20:	ldr	x8, [x8]
  24:	stur	w0, [x29, #-4]
  28:	mov	x0, x8
  2c:	bl	0 <fprintf>
  30:	ldur	w9, [x29, #-4]
  34:	mov	w0, w9
  38:	bl	0 <exit>

000000000000003c <lt__malloc>:
  3c:	sub	sp, sp, #0x20
  40:	stp	x29, x30, [sp, #16]
  44:	add	x29, sp, #0x10
  48:	str	x0, [sp, #8]
  4c:	ldr	x0, [sp, #8]
  50:	bl	0 <malloc>
  54:	str	x0, [sp]
  58:	cbnz	x0, 6c <lt__malloc+0x30>
  5c:	adrp	x8, 0 <alloc_die_default>
  60:	add	x8, x8, #0x0
  64:	ldr	x8, [x8]
  68:	blr	x8
  6c:	ldr	x0, [sp]
  70:	ldp	x29, x30, [sp, #16]
  74:	add	sp, sp, #0x20
  78:	ret

000000000000007c <lt__zalloc>:
  7c:	sub	sp, sp, #0x20
  80:	stp	x29, x30, [sp, #16]
  84:	add	x29, sp, #0x10
  88:	str	x0, [sp, #8]
  8c:	ldr	x0, [sp, #8]
  90:	bl	3c <lt__malloc>
  94:	str	x0, [sp]
  98:	cbz	x0, b0 <lt__zalloc+0x34>
  9c:	ldr	x0, [sp]
  a0:	ldr	x2, [sp, #8]
  a4:	mov	w8, wzr
  a8:	mov	w1, w8
  ac:	bl	0 <memset>
  b0:	ldr	x0, [sp]
  b4:	ldp	x29, x30, [sp, #16]
  b8:	add	sp, sp, #0x20
  bc:	ret

00000000000000c0 <lt__realloc>:
  c0:	sub	sp, sp, #0x20
  c4:	stp	x29, x30, [sp, #16]
  c8:	add	x29, sp, #0x10
  cc:	str	x0, [sp, #8]
  d0:	str	x1, [sp]
  d4:	ldr	x0, [sp, #8]
  d8:	ldr	x1, [sp]
  dc:	bl	0 <realloc>
  e0:	str	x0, [sp, #8]
  e4:	cbnz	x0, f8 <lt__realloc+0x38>
  e8:	adrp	x8, 0 <alloc_die_default>
  ec:	add	x8, x8, #0x0
  f0:	ldr	x8, [x8]
  f4:	blr	x8
  f8:	ldr	x0, [sp, #8]
  fc:	ldp	x29, x30, [sp, #16]
 100:	add	sp, sp, #0x20
 104:	ret

0000000000000108 <lt__memdup>:
 108:	sub	sp, sp, #0x40
 10c:	stp	x29, x30, [sp, #48]
 110:	add	x29, sp, #0x30
 114:	stur	x0, [x29, #-16]
 118:	str	x1, [sp, #24]
 11c:	ldr	x0, [sp, #24]
 120:	bl	3c <lt__malloc>
 124:	str	x0, [sp, #16]
 128:	cbz	x0, 150 <lt__memdup+0x48>
 12c:	ldr	x8, [sp, #16]
 130:	ldur	x1, [x29, #-16]
 134:	ldr	x2, [sp, #24]
 138:	mov	x0, x8
 13c:	str	x8, [sp, #8]
 140:	bl	0 <memcpy>
 144:	ldr	x8, [sp, #8]
 148:	stur	x8, [x29, #-8]
 14c:	b	158 <lt__memdup+0x50>
 150:	mov	x8, xzr
 154:	stur	x8, [x29, #-8]
 158:	ldur	x0, [x29, #-8]
 15c:	ldp	x29, x30, [sp, #48]
 160:	add	sp, sp, #0x40
 164:	ret

0000000000000168 <lt__strdup>:
 168:	sub	sp, sp, #0x20
 16c:	stp	x29, x30, [sp, #16]
 170:	add	x29, sp, #0x10
 174:	str	x0, [sp, #8]
 178:	ldr	x0, [sp, #8]
 17c:	ldr	x8, [sp, #8]
 180:	str	x0, [sp]
 184:	mov	x0, x8
 188:	bl	0 <strlen>
 18c:	add	x1, x0, #0x1
 190:	ldr	x0, [sp]
 194:	bl	108 <lt__memdup>
 198:	ldp	x29, x30, [sp, #16]
 19c:	add	sp, sp, #0x20
 1a0:	ret

libltdl_libltdl_la-lt_dlloader.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dlloader_add>:
   0:	sub	sp, sp, #0x30
   4:	stp	x29, x30, [sp, #32]
   8:	add	x29, sp, #0x20
   c:	adrp	x8, 0 <lt_dlloader_add>
  10:	add	x8, x8, #0x0
  14:	str	x0, [sp, #16]
  18:	ldr	x9, [sp, #16]
  1c:	str	x8, [sp]
  20:	cbz	x9, 64 <lt_dlloader_add+0x64>
  24:	ldr	x8, [sp, #16]
  28:	ldr	x8, [x8, #16]
  2c:	cbz	x8, 64 <lt_dlloader_add+0x64>
  30:	ldr	x8, [sp, #16]
  34:	ldr	x8, [x8, #24]
  38:	cbz	x8, 64 <lt_dlloader_add+0x64>
  3c:	ldr	x8, [sp, #16]
  40:	ldr	x8, [x8, #32]
  44:	cbz	x8, 64 <lt_dlloader_add+0x64>
  48:	ldr	x8, [sp, #16]
  4c:	ldr	w9, [x8, #64]
  50:	cbz	w9, 7c <lt_dlloader_add+0x7c>
  54:	ldr	x8, [sp, #16]
  58:	ldr	w9, [x8, #64]
  5c:	cmp	w9, #0x1
  60:	b.eq	7c <lt_dlloader_add+0x7c>  // b.none
  64:	mov	w0, #0x2                   	// #2
  68:	bl	0 <lt__error_string>
  6c:	bl	0 <lt__set_last_error>
  70:	mov	w8, #0x1                   	// #1
  74:	stur	w8, [x29, #-4]
  78:	b	124 <lt_dlloader_add+0x124>
  7c:	ldr	x0, [sp, #16]
  80:	bl	0 <lt__slist_box>
  84:	str	x0, [sp, #8]
  88:	ldr	x8, [sp, #8]
  8c:	cbnz	x8, ac <lt_dlloader_add+0xac>
  90:	adrp	x8, 0 <lt__alloc_die>
  94:	add	x8, x8, #0x0
  98:	ldr	x8, [x8]
  9c:	blr	x8
  a0:	mov	w9, #0x1                   	// #1
  a4:	stur	w9, [x29, #-4]
  a8:	b	124 <lt_dlloader_add+0x124>
  ac:	ldr	x8, [sp, #16]
  b0:	ldr	w9, [x8, #64]
  b4:	cbnz	w9, d4 <lt_dlloader_add+0xd4>
  b8:	ldr	x0, [sp, #8]
  bc:	ldr	x8, [sp]
  c0:	ldr	x1, [x8]
  c4:	bl	0 <lt__slist_cons>
  c8:	ldr	x8, [sp]
  cc:	str	x0, [x8]
  d0:	b	120 <lt_dlloader_add+0x120>
  d4:	ldr	x8, [sp, #16]
  d8:	ldr	w9, [x8, #64]
  dc:	cmp	w9, #0x1
  e0:	b.ne	e8 <lt_dlloader_add+0xe8>  // b.any
  e4:	b	108 <lt_dlloader_add+0x108>
  e8:	adrp	x0, 0 <lt_dlloader_add>
  ec:	add	x0, x0, #0x0
  f0:	adrp	x1, 0 <lt_dlloader_add>
  f4:	add	x1, x1, #0x0
  f8:	mov	w2, #0x5e                  	// #94
  fc:	adrp	x3, 0 <lt_dlloader_add>
 100:	add	x3, x3, #0x0
 104:	bl	0 <__assert_fail>
 108:	ldr	x8, [sp]
 10c:	ldr	x0, [x8]
 110:	ldr	x1, [sp, #8]
 114:	bl	0 <lt__slist_concat>
 118:	ldr	x8, [sp]
 11c:	str	x0, [x8]
 120:	stur	wzr, [x29, #-4]
 124:	ldur	w0, [x29, #-4]
 128:	ldp	x29, x30, [sp, #32]
 12c:	add	sp, sp, #0x30
 130:	ret

0000000000000134 <lt_dlloader_next>:
 134:	sub	sp, sp, #0x20
 138:	str	x0, [sp, #24]
 13c:	ldr	x8, [sp, #24]
 140:	str	x8, [sp, #16]
 144:	ldr	x8, [sp, #16]
 148:	cbz	x8, 15c <lt_dlloader_next+0x28>
 14c:	ldr	x8, [sp, #16]
 150:	ldr	x8, [x8]
 154:	str	x8, [sp, #8]
 158:	b	16c <lt_dlloader_next+0x38>
 15c:	adrp	x8, 0 <lt_dlloader_add>
 160:	add	x8, x8, #0x0
 164:	ldr	x8, [x8]
 168:	str	x8, [sp, #8]
 16c:	ldr	x8, [sp, #8]
 170:	mov	x0, x8
 174:	add	sp, sp, #0x20
 178:	ret

000000000000017c <lt_dlloader_get>:
 17c:	sub	sp, sp, #0x10
 180:	str	x0, [sp, #8]
 184:	ldr	x8, [sp, #8]
 188:	cbz	x8, 19c <lt_dlloader_get+0x20>
 18c:	ldr	x8, [sp, #8]
 190:	ldr	x8, [x8, #8]
 194:	str	x8, [sp]
 198:	b	1a4 <lt_dlloader_get+0x28>
 19c:	mov	x8, xzr
 1a0:	str	x8, [sp]
 1a4:	ldr	x8, [sp]
 1a8:	mov	x0, x8
 1ac:	add	sp, sp, #0x10
 1b0:	ret

00000000000001b4 <lt_dlloader_remove>:
 1b4:	sub	sp, sp, #0x50
 1b8:	stp	x29, x30, [sp, #64]
 1bc:	add	x29, sp, #0x40
 1c0:	mov	x8, xzr
 1c4:	stur	x0, [x29, #-16]
 1c8:	ldur	x0, [x29, #-16]
 1cc:	str	x8, [sp]
 1d0:	bl	308 <lt_dlloader_find>
 1d4:	stur	x0, [x29, #-24]
 1d8:	ldr	x8, [sp]
 1dc:	str	x8, [sp, #24]
 1e0:	str	wzr, [sp, #20]
 1e4:	str	wzr, [sp, #16]
 1e8:	ldur	x9, [x29, #-24]
 1ec:	cbnz	x9, 208 <lt_dlloader_remove+0x54>
 1f0:	mov	w0, #0x2                   	// #2
 1f4:	bl	0 <lt__error_string>
 1f8:	bl	0 <lt__set_last_error>
 1fc:	mov	x8, xzr
 200:	stur	x8, [x29, #-8]
 204:	b	2f8 <lt_dlloader_remove+0x144>
 208:	adrp	x0, 0 <lt_dlloader_add>
 20c:	add	x0, x0, #0x0
 210:	mov	x8, xzr
 214:	mov	x1, x8
 218:	bl	0 <lt_dlinterface_register>
 21c:	str	x0, [sp, #32]
 220:	ldr	x0, [sp, #32]
 224:	ldr	x1, [sp, #24]
 228:	bl	0 <lt_dlhandle_iterate>
 22c:	str	x0, [sp, #24]
 230:	cbz	x0, 270 <lt_dlloader_remove+0xbc>
 234:	ldr	x8, [sp, #24]
 238:	str	x8, [sp, #8]
 23c:	ldr	x8, [sp, #8]
 240:	ldr	x8, [x8, #8]
 244:	ldur	x9, [x29, #-24]
 248:	cmp	x8, x9
 24c:	b.ne	26c <lt_dlloader_remove+0xb8>  // b.any
 250:	mov	w8, #0x1                   	// #1
 254:	str	w8, [sp, #20]
 258:	ldr	x0, [sp, #24]
 25c:	bl	0 <lt_dlisresident>
 260:	cbz	w0, 26c <lt_dlloader_remove+0xb8>
 264:	mov	w8, #0x1                   	// #1
 268:	str	w8, [sp, #16]
 26c:	b	220 <lt_dlloader_remove+0x6c>
 270:	ldr	x0, [sp, #32]
 274:	bl	0 <lt_dlinterface_free>
 278:	ldr	w8, [sp, #20]
 27c:	cbz	w8, 2a0 <lt_dlloader_remove+0xec>
 280:	ldr	w8, [sp, #16]
 284:	cbnz	w8, 294 <lt_dlloader_remove+0xe0>
 288:	mov	w0, #0x4                   	// #4
 28c:	bl	0 <lt__error_string>
 290:	bl	0 <lt__set_last_error>
 294:	mov	x8, xzr
 298:	stur	x8, [x29, #-8]
 29c:	b	2f8 <lt_dlloader_remove+0x144>
 2a0:	ldur	x8, [x29, #-24]
 2a4:	cbz	x8, 2d8 <lt_dlloader_remove+0x124>
 2a8:	ldur	x8, [x29, #-24]
 2ac:	ldr	x8, [x8, #48]
 2b0:	cbz	x8, 2d8 <lt_dlloader_remove+0x124>
 2b4:	ldur	x8, [x29, #-24]
 2b8:	ldr	x8, [x8, #48]
 2bc:	ldur	x9, [x29, #-24]
 2c0:	ldr	x0, [x9, #56]
 2c4:	blr	x8
 2c8:	cbz	w0, 2d8 <lt_dlloader_remove+0x124>
 2cc:	mov	x8, xzr
 2d0:	stur	x8, [x29, #-8]
 2d4:	b	2f8 <lt_dlloader_remove+0x144>
 2d8:	ldur	x2, [x29, #-16]
 2dc:	adrp	x0, 0 <lt_dlloader_add>
 2e0:	add	x0, x0, #0x0
 2e4:	adrp	x1, 0 <lt_dlloader_add>
 2e8:	add	x1, x1, #0x0
 2ec:	bl	0 <lt__slist_remove>
 2f0:	bl	0 <lt__slist_unbox>
 2f4:	stur	x0, [x29, #-8]
 2f8:	ldur	x0, [x29, #-8]
 2fc:	ldp	x29, x30, [sp, #64]
 300:	add	sp, sp, #0x50
 304:	ret

0000000000000308 <lt_dlloader_find>:
 308:	sub	sp, sp, #0x20
 30c:	stp	x29, x30, [sp, #16]
 310:	add	x29, sp, #0x10
 314:	adrp	x8, 0 <lt_dlloader_add>
 318:	add	x8, x8, #0x0
 31c:	adrp	x1, 0 <lt_dlloader_add>
 320:	add	x1, x1, #0x0
 324:	str	x0, [sp, #8]
 328:	ldr	x0, [x8]
 32c:	ldr	x2, [sp, #8]
 330:	bl	0 <lt__slist_find>
 334:	bl	17c <lt_dlloader_get>
 338:	ldp	x29, x30, [sp, #16]
 33c:	add	sp, sp, #0x20
 340:	ret

0000000000000344 <loader_callback>:
 344:	sub	sp, sp, #0x40
 348:	stp	x29, x30, [sp, #48]
 34c:	add	x29, sp, #0x30
 350:	stur	x0, [x29, #-8]
 354:	stur	x1, [x29, #-16]
 358:	ldur	x8, [x29, #-8]
 35c:	ldr	x8, [x8, #8]
 360:	str	x8, [sp, #24]
 364:	ldur	x8, [x29, #-16]
 368:	str	x8, [sp, #16]
 36c:	ldr	x8, [sp, #24]
 370:	cbz	x8, 378 <loader_callback+0x34>
 374:	b	398 <loader_callback+0x54>
 378:	adrp	x0, 0 <lt_dlloader_add>
 37c:	add	x0, x0, #0x0
 380:	adrp	x1, 0 <lt_dlloader_add>
 384:	add	x1, x1, #0x0
 388:	mov	w2, #0x36                  	// #54
 38c:	adrp	x3, 0 <lt_dlloader_add>
 390:	add	x3, x3, #0x0
 394:	bl	0 <__assert_fail>
 398:	ldr	x8, [sp, #24]
 39c:	ldr	x0, [x8]
 3a0:	ldr	x1, [sp, #16]
 3a4:	bl	0 <strcmp>
 3a8:	cbnz	w0, 3b8 <loader_callback+0x74>
 3ac:	ldur	x8, [x29, #-8]
 3b0:	str	x8, [sp, #8]
 3b4:	b	3c0 <loader_callback+0x7c>
 3b8:	mov	x8, xzr
 3bc:	str	x8, [sp, #8]
 3c0:	ldr	x8, [sp, #8]
 3c4:	mov	x0, x8
 3c8:	ldp	x29, x30, [sp, #48]
 3cc:	add	sp, sp, #0x40
 3d0:	ret

libltdl_libltdl_la-lt_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dladderror>:
   0:	sub	sp, sp, #0x40
   4:	stp	x29, x30, [sp, #48]
   8:	add	x29, sp, #0x30
   c:	mov	w8, #0xffffffff            	// #-1
  10:	mov	x9, xzr
  14:	adrp	x10, 0 <lt_dladderror>
  18:	add	x10, x10, #0x0
  1c:	adrp	x11, 0 <lt_dladderror>
  20:	add	x11, x11, #0x0
  24:	stur	x0, [x29, #-8]
  28:	stur	wzr, [x29, #-12]
  2c:	stur	w8, [x29, #-16]
  30:	str	x9, [sp, #24]
  34:	ldur	x9, [x29, #-8]
  38:	str	x10, [sp, #16]
  3c:	str	x11, [sp, #8]
  40:	cbz	x9, 48 <lt_dladderror+0x48>
  44:	b	68 <lt_dladderror+0x68>
  48:	adrp	x0, 0 <lt_dladderror>
  4c:	add	x0, x0, #0x0
  50:	adrp	x1, 0 <lt_dladderror>
  54:	add	x1, x1, #0x0
  58:	mov	w2, #0x35                  	// #53
  5c:	adrp	x3, 0 <lt_dladderror>
  60:	add	x3, x3, #0x0
  64:	bl	0 <__assert_fail>
  68:	ldr	x8, [sp, #16]
  6c:	ldr	w9, [x8]
  70:	subs	w9, w9, #0x14
  74:	stur	w9, [x29, #-12]
  78:	ldr	x10, [sp, #8]
  7c:	ldr	x0, [x10]
  80:	ldur	w9, [x29, #-12]
  84:	add	w9, w9, #0x1
  88:	mov	w11, #0x8                   	// #8
  8c:	smull	x1, w9, w11
  90:	bl	0 <lt__realloc>
  94:	str	x0, [sp, #24]
  98:	ldr	x8, [sp, #24]
  9c:	cbz	x8, dc <lt_dladderror+0xdc>
  a0:	ldr	x8, [sp, #24]
  a4:	ldr	x9, [sp, #8]
  a8:	str	x8, [x9]
  ac:	ldur	x8, [x29, #-8]
  b0:	ldr	x10, [x9]
  b4:	ldursw	x11, [x29, #-12]
  b8:	mov	x12, #0x8                   	// #8
  bc:	mul	x11, x12, x11
  c0:	add	x10, x10, x11
  c4:	str	x8, [x10]
  c8:	ldr	x8, [sp, #16]
  cc:	ldr	w13, [x8]
  d0:	add	w14, w13, #0x1
  d4:	str	w14, [x8]
  d8:	stur	w13, [x29, #-16]
  dc:	ldur	w0, [x29, #-16]
  e0:	ldp	x29, x30, [sp, #48]
  e4:	add	sp, sp, #0x40
  e8:	ret

00000000000000ec <lt_dlseterror>:
  ec:	sub	sp, sp, #0x20
  f0:	stp	x29, x30, [sp, #16]
  f4:	add	x29, sp, #0x10
  f8:	adrp	x8, 0 <lt_dladderror>
  fc:	add	x8, x8, #0x0
 100:	stur	w0, [x29, #-4]
 104:	str	wzr, [sp, #8]
 108:	ldur	w9, [x29, #-4]
 10c:	ldr	w10, [x8]
 110:	cmp	w9, w10
 114:	b.ge	128 <lt_dlseterror+0x3c>  // b.tcont
 118:	ldur	w8, [x29, #-4]
 11c:	cmp	w8, #0x0
 120:	cset	w8, ge  // ge = tcont
 124:	tbnz	w8, #0, 144 <lt_dlseterror+0x58>
 128:	mov	w0, #0xe                   	// #14
 12c:	bl	1d4 <lt__error_string>
 130:	bl	1b0 <lt__set_last_error>
 134:	ldr	w8, [sp, #8]
 138:	add	w8, w8, #0x1
 13c:	str	w8, [sp, #8]
 140:	b	1a0 <lt_dlseterror+0xb4>
 144:	ldur	w8, [x29, #-4]
 148:	cmp	w8, #0x14
 14c:	b.ge	170 <lt_dlseterror+0x84>  // b.tcont
 150:	ldursw	x8, [x29, #-4]
 154:	mov	x9, #0x2a                  	// #42
 158:	mul	x8, x9, x8
 15c:	adrp	x9, 0 <lt_dladderror>
 160:	add	x9, x9, #0x0
 164:	add	x0, x9, x8
 168:	bl	1b0 <lt__set_last_error>
 16c:	b	1a0 <lt_dlseterror+0xb4>
 170:	adrp	x8, 0 <lt_dladderror>
 174:	add	x8, x8, #0x0
 178:	ldr	x8, [x8]
 17c:	ldur	w9, [x29, #-4]
 180:	subs	w9, w9, #0x14
 184:	mov	w0, w9
 188:	sxtw	x10, w0
 18c:	mov	x11, #0x8                   	// #8
 190:	mul	x10, x11, x10
 194:	add	x8, x8, x10
 198:	ldr	x0, [x8]
 19c:	bl	1b0 <lt__set_last_error>
 1a0:	ldr	w0, [sp, #8]
 1a4:	ldp	x29, x30, [sp, #16]
 1a8:	add	sp, sp, #0x20
 1ac:	ret

00000000000001b0 <lt__set_last_error>:
 1b0:	sub	sp, sp, #0x10
 1b4:	adrp	x8, 0 <lt_dladderror>
 1b8:	add	x8, x8, #0x0
 1bc:	str	x0, [sp, #8]
 1c0:	ldr	x9, [sp, #8]
 1c4:	str	x9, [x8]
 1c8:	mov	x0, x9
 1cc:	add	sp, sp, #0x10
 1d0:	ret

00000000000001d4 <lt__error_string>:
 1d4:	sub	sp, sp, #0x20
 1d8:	stp	x29, x30, [sp, #16]
 1dc:	add	x29, sp, #0x10
 1e0:	stur	w0, [x29, #-4]
 1e4:	ldur	w8, [x29, #-4]
 1e8:	cmp	w8, #0x0
 1ec:	cset	w8, lt  // lt = tstop
 1f0:	tbnz	w8, #0, 1f8 <lt__error_string+0x24>
 1f4:	b	218 <lt__error_string+0x44>
 1f8:	adrp	x0, 0 <lt_dladderror>
 1fc:	add	x0, x0, #0x0
 200:	adrp	x1, 0 <lt_dladderror>
 204:	add	x1, x1, #0x0
 208:	mov	w2, #0x5f                  	// #95
 20c:	adrp	x3, 0 <lt_dladderror>
 210:	add	x3, x3, #0x0
 214:	bl	0 <__assert_fail>
 218:	ldur	w8, [x29, #-4]
 21c:	cmp	w8, #0x14
 220:	b.ge	228 <lt__error_string+0x54>  // b.tcont
 224:	b	248 <lt__error_string+0x74>
 228:	adrp	x0, 0 <lt_dladderror>
 22c:	add	x0, x0, #0x0
 230:	adrp	x1, 0 <lt_dladderror>
 234:	add	x1, x1, #0x0
 238:	mov	w2, #0x60                  	// #96
 23c:	adrp	x3, 0 <lt_dladderror>
 240:	add	x3, x3, #0x0
 244:	bl	0 <__assert_fail>
 248:	ldursw	x8, [x29, #-4]
 24c:	mov	x9, #0x2a                  	// #42
 250:	mul	x8, x9, x8
 254:	adrp	x9, 0 <lt_dladderror>
 258:	add	x9, x9, #0x0
 25c:	add	x0, x9, x8
 260:	ldp	x29, x30, [sp, #16]
 264:	add	sp, sp, #0x20
 268:	ret

000000000000026c <lt__get_last_error>:
 26c:	adrp	x8, 0 <lt_dladderror>
 270:	add	x8, x8, #0x0
 274:	ldr	x0, [x8]
 278:	ret

libltdl_libltdl_la-ltdl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__alloc_die_callback>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	x29, sp
       8:	mov	w0, #0xb                   	// #11
       c:	bl	0 <lt__error_string>
      10:	bl	0 <lt__set_last_error>
      14:	ldp	x29, x30, [sp], #16
      18:	ret

000000000000001c <lt_dlinit>:
      1c:	sub	sp, sp, #0x20
      20:	stp	x29, x30, [sp, #16]
      24:	add	x29, sp, #0x10
      28:	adrp	x8, 0 <lt__alloc_die_callback>
      2c:	add	x8, x8, #0x0
      30:	stur	wzr, [x29, #-4]
      34:	ldr	w9, [x8]
      38:	add	w9, w9, #0x1
      3c:	str	w9, [x8]
      40:	cmp	w9, #0x1
      44:	b.ne	dc <lt_dlinit+0xc0>  // b.any
      48:	adrp	x8, 0 <lt__alloc_die>
      4c:	add	x8, x8, #0x0
      50:	adrp	x9, 0 <lt__alloc_die_callback>
      54:	add	x9, x9, #0x0
      58:	str	x9, [x8]
      5c:	adrp	x8, 0 <lt__alloc_die_callback>
      60:	add	x8, x8, #0x0
      64:	mov	x9, xzr
      68:	str	x9, [x8]
      6c:	adrp	x8, 0 <lt__alloc_die_callback>
      70:	add	x8, x8, #0x0
      74:	str	x9, [x8]
      78:	adrp	x0, 0 <preopen_LTX_get_vtable>
      7c:	add	x0, x0, #0x0
      80:	mov	x1, x9
      84:	bl	ec <loader_init>
      88:	ldur	w10, [x29, #-4]
      8c:	add	w10, w10, w0
      90:	stur	w10, [x29, #-4]
      94:	ldur	w10, [x29, #-4]
      98:	cbnz	w10, b4 <lt_dlinit+0x98>
      9c:	adrp	x0, 0 <lt_libltdl_LTX_preloaded_symbols>
      a0:	add	x0, x0, #0x0
      a4:	bl	0 <lt_dlpreload>
      a8:	ldur	w8, [x29, #-4]
      ac:	add	w8, w8, w0
      b0:	stur	w8, [x29, #-4]
      b4:	ldur	w8, [x29, #-4]
      b8:	cbnz	w8, dc <lt_dlinit+0xc0>
      bc:	adrp	x0, 0 <lt__alloc_die_callback>
      c0:	add	x0, x0, #0x0
      c4:	adrp	x1, 0 <lt__alloc_die_callback>
      c8:	add	x1, x1, #0x0
      cc:	bl	0 <lt_dlpreload_open>
      d0:	ldur	w8, [x29, #-4]
      d4:	add	w8, w8, w0
      d8:	stur	w8, [x29, #-4]
      dc:	ldur	w0, [x29, #-4]
      e0:	ldp	x29, x30, [sp, #16]
      e4:	add	sp, sp, #0x20
      e8:	ret

00000000000000ec <loader_init>:
      ec:	sub	sp, sp, #0x30
      f0:	stp	x29, x30, [sp, #32]
      f4:	add	x29, sp, #0x20
      f8:	mov	x8, xzr
      fc:	stur	x0, [x29, #-8]
     100:	str	x1, [sp, #16]
     104:	str	x8, [sp, #8]
     108:	str	wzr, [sp, #4]
     10c:	ldur	x8, [x29, #-8]
     110:	cbz	x8, 124 <loader_init+0x38>
     114:	ldur	x8, [x29, #-8]
     118:	ldr	x0, [sp, #16]
     11c:	blr	x8
     120:	str	x0, [sp, #8]
     124:	ldr	x0, [sp, #8]
     128:	bl	0 <lt_dlloader_add>
     12c:	ldr	w8, [sp, #4]
     130:	add	w8, w8, w0
     134:	str	w8, [sp, #4]
     138:	ldr	w8, [sp, #4]
     13c:	cbnz	w8, 148 <loader_init+0x5c>
     140:	ldr	x8, [sp, #8]
     144:	cbz	x8, 14c <loader_init+0x60>
     148:	b	16c <loader_init+0x80>
     14c:	adrp	x0, 0 <lt__alloc_die_callback>
     150:	add	x0, x0, #0x0
     154:	adrp	x1, 0 <lt__alloc_die_callback>
     158:	add	x1, x1, #0x0
     15c:	mov	w2, #0xc7                  	// #199
     160:	adrp	x3, 0 <lt__alloc_die_callback>
     164:	add	x3, x3, #0x0
     168:	bl	0 <__assert_fail>
     16c:	ldr	w8, [sp, #4]
     170:	cbnz	w8, 1b0 <loader_init+0xc4>
     174:	ldr	x8, [sp, #8]
     178:	ldr	x8, [x8, #40]
     17c:	cbz	x8, 1b0 <loader_init+0xc4>
     180:	ldr	x8, [sp, #8]
     184:	ldr	x8, [x8, #40]
     188:	ldr	x9, [sp, #8]
     18c:	ldr	x0, [x9, #56]
     190:	blr	x8
     194:	cbz	w0, 1b0 <loader_init+0xc4>
     198:	mov	w0, #0x3                   	// #3
     19c:	bl	0 <lt__error_string>
     1a0:	bl	0 <lt__set_last_error>
     1a4:	ldr	w8, [sp, #4]
     1a8:	add	w8, w8, #0x1
     1ac:	str	w8, [sp, #4]
     1b0:	ldr	w0, [sp, #4]
     1b4:	ldp	x29, x30, [sp, #32]
     1b8:	add	sp, sp, #0x30
     1bc:	ret

00000000000001c0 <loader_init_callback>:
     1c0:	sub	sp, sp, #0x30
     1c4:	stp	x29, x30, [sp, #32]
     1c8:	add	x29, sp, #0x20
     1cc:	adrp	x1, 0 <lt__alloc_die_callback>
     1d0:	add	x1, x1, #0x0
     1d4:	mov	x8, xzr
     1d8:	stur	x0, [x29, #-8]
     1dc:	ldur	x0, [x29, #-8]
     1e0:	str	x8, [sp, #8]
     1e4:	bl	1e18 <lt_dlsym>
     1e8:	str	x0, [sp, #16]
     1ec:	ldr	x0, [sp, #16]
     1f0:	ldr	x1, [sp, #8]
     1f4:	bl	ec <loader_init>
     1f8:	ldp	x29, x30, [sp, #32]
     1fc:	add	sp, sp, #0x30
     200:	ret

0000000000000204 <lt_dlexit>:
     204:	sub	sp, sp, #0x90
     208:	stp	x29, x30, [sp, #128]
     20c:	add	x29, sp, #0x80
     210:	mov	x8, xzr
     214:	adrp	x9, 0 <lt__alloc_die_callback>
     218:	add	x9, x9, #0x0
     21c:	adrp	x10, 0 <lt__alloc_die_callback>
     220:	add	x10, x10, #0x0
     224:	stur	x8, [x29, #-8]
     228:	ldr	x8, [x9]
     22c:	stur	x8, [x29, #-16]
     230:	stur	wzr, [x29, #-20]
     234:	ldr	w11, [x10]
     238:	str	x9, [sp, #32]
     23c:	str	x10, [sp, #24]
     240:	cbnz	w11, 260 <lt_dlexit+0x5c>
     244:	mov	w0, #0xf                   	// #15
     248:	bl	0 <lt__error_string>
     24c:	bl	0 <lt__set_last_error>
     250:	ldur	w8, [x29, #-20]
     254:	add	w8, w8, #0x1
     258:	stur	w8, [x29, #-20]
     25c:	b	478 <lt_dlexit+0x274>
     260:	ldr	x8, [sp, #24]
     264:	ldr	w9, [x8]
     268:	subs	w9, w9, #0x1
     26c:	str	w9, [x8]
     270:	cbnz	w9, 478 <lt_dlexit+0x274>
     274:	ldr	x8, [sp, #32]
     278:	ldr	x9, [x8]
     27c:	mov	w10, #0x0                   	// #0
     280:	str	w10, [sp, #20]
     284:	cbz	x9, 2a4 <lt_dlexit+0xa0>
     288:	ldr	x8, [sp, #32]
     28c:	ldr	x9, [x8]
     290:	ldrb	w10, [x9, #36]
     294:	and	w10, w10, #0x1
     298:	tst	w10, #0xff
     29c:	cset	w10, ne  // ne = any
     2a0:	str	w10, [sp, #20]
     2a4:	ldr	w8, [sp, #20]
     2a8:	tbnz	w8, #0, 2b0 <lt_dlexit+0xac>
     2ac:	b	2c4 <lt_dlexit+0xc0>
     2b0:	ldr	x8, [sp, #32]
     2b4:	ldr	x9, [x8]
     2b8:	ldr	x9, [x9]
     2bc:	str	x9, [x8]
     2c0:	b	274 <lt_dlexit+0x70>
     2c4:	mov	w8, #0x1                   	// #1
     2c8:	stur	w8, [x29, #-24]
     2cc:	ldur	x8, [x29, #-16]
     2d0:	cbz	x8, 3bc <lt_dlexit+0x1b8>
     2d4:	ldr	x8, [sp, #32]
     2d8:	ldr	x9, [x8]
     2dc:	stur	x9, [x29, #-32]
     2e0:	stur	wzr, [x29, #-36]
     2e4:	ldur	x8, [x29, #-32]
     2e8:	cbz	x8, 3a0 <lt_dlexit+0x19c>
     2ec:	ldur	x8, [x29, #-32]
     2f0:	stur	x8, [x29, #-48]
     2f4:	ldur	x8, [x29, #-32]
     2f8:	ldr	x8, [x8]
     2fc:	stur	x8, [x29, #-32]
     300:	ldur	x8, [x29, #-48]
     304:	ldrb	w9, [x8, #36]
     308:	and	w9, w9, #0x1
     30c:	and	w9, w9, #0xff
     310:	cbnz	w9, 39c <lt_dlexit+0x198>
     314:	mov	w8, #0x1                   	// #1
     318:	stur	w8, [x29, #-36]
     31c:	ldur	x9, [x29, #-48]
     320:	ldr	w8, [x9, #32]
     324:	ldur	w10, [x29, #-24]
     328:	cmp	w8, w10
     32c:	b.gt	39c <lt_dlexit+0x198>
     330:	ldur	x0, [x29, #-48]
     334:	bl	488 <lt_dlclose>
     338:	cbz	w0, 348 <lt_dlexit+0x144>
     33c:	ldur	w8, [x29, #-20]
     340:	add	w8, w8, #0x1
     344:	stur	w8, [x29, #-20]
     348:	ldur	x8, [x29, #-32]
     34c:	cbz	x8, 39c <lt_dlexit+0x198>
     350:	ldr	x8, [sp, #32]
     354:	ldr	x9, [x8]
     358:	stur	x9, [x29, #-48]
     35c:	ldur	x8, [x29, #-48]
     360:	cbz	x8, 388 <lt_dlexit+0x184>
     364:	ldur	x8, [x29, #-48]
     368:	ldur	x9, [x29, #-32]
     36c:	cmp	x8, x9
     370:	b.ne	378 <lt_dlexit+0x174>  // b.any
     374:	b	388 <lt_dlexit+0x184>
     378:	ldur	x8, [x29, #-48]
     37c:	ldr	x8, [x8]
     380:	stur	x8, [x29, #-48]
     384:	b	35c <lt_dlexit+0x158>
     388:	ldur	x8, [x29, #-48]
     38c:	cbnz	x8, 39c <lt_dlexit+0x198>
     390:	ldr	x8, [sp, #32]
     394:	ldr	x9, [x8]
     398:	stur	x9, [x29, #-32]
     39c:	b	2e4 <lt_dlexit+0xe0>
     3a0:	ldur	w8, [x29, #-36]
     3a4:	cbnz	w8, 3ac <lt_dlexit+0x1a8>
     3a8:	b	3bc <lt_dlexit+0x1b8>
     3ac:	ldur	w8, [x29, #-24]
     3b0:	add	w8, w8, #0x1
     3b4:	stur	w8, [x29, #-24]
     3b8:	b	2cc <lt_dlexit+0xc8>
     3bc:	ldur	w8, [x29, #-20]
     3c0:	cbnz	w8, 3d0 <lt_dlexit+0x1cc>
     3c4:	mov	x8, xzr
     3c8:	mov	x0, x8
     3cc:	bl	0 <lt__set_last_error>
     3d0:	mov	x8, xzr
     3d4:	mov	x0, x8
     3d8:	bl	0 <lt_dlloader_next>
     3dc:	stur	x0, [x29, #-8]
     3e0:	ldur	x8, [x29, #-8]
     3e4:	cbz	x8, 454 <lt_dlexit+0x250>
     3e8:	ldur	x0, [x29, #-8]
     3ec:	bl	0 <lt_dlloader_next>
     3f0:	stur	x0, [x29, #-56]
     3f4:	ldur	x0, [x29, #-8]
     3f8:	bl	0 <lt_dlloader_get>
     3fc:	str	x0, [sp, #64]
     400:	ldr	x8, [sp, #64]
     404:	ldr	x0, [x8]
     408:	bl	0 <lt_dlloader_remove>
     40c:	str	x0, [sp, #64]
     410:	cbz	x0, 42c <lt_dlexit+0x228>
     414:	ldr	x0, [sp, #64]
     418:	bl	0 <free>
     41c:	mov	x8, xzr
     420:	str	x8, [sp, #64]
     424:	str	x8, [sp, #56]
     428:	b	448 <lt_dlexit+0x244>
     42c:	bl	0 <lt__get_last_error>
     430:	str	x0, [sp, #48]
     434:	ldr	x8, [sp, #48]
     438:	cbz	x8, 448 <lt_dlexit+0x244>
     43c:	ldur	w8, [x29, #-20]
     440:	add	w8, w8, #0x1
     444:	stur	w8, [x29, #-20]
     448:	ldur	x8, [x29, #-56]
     44c:	stur	x8, [x29, #-8]
     450:	b	3e0 <lt_dlexit+0x1dc>
     454:	adrp	x8, 0 <lt__alloc_die_callback>
     458:	add	x8, x8, #0x0
     45c:	ldr	x0, [x8]
     460:	str	x8, [sp, #8]
     464:	bl	0 <free>
     468:	mov	x8, xzr
     46c:	ldr	x9, [sp, #8]
     470:	str	x8, [x9]
     474:	str	x8, [sp, #40]
     478:	ldur	w0, [x29, #-20]
     47c:	ldp	x29, x30, [sp, #128]
     480:	add	sp, sp, #0x90
     484:	ret

0000000000000488 <lt_dlclose>:
     488:	sub	sp, sp, #0x70
     48c:	stp	x29, x30, [sp, #96]
     490:	add	x29, sp, #0x60
     494:	adrp	x8, 0 <lt__alloc_die_callback>
     498:	add	x8, x8, #0x0
     49c:	stur	x0, [x29, #-8]
     4a0:	stur	wzr, [x29, #-28]
     4a4:	ldr	x9, [x8]
     4a8:	stur	x9, [x29, #-16]
     4ac:	stur	x9, [x29, #-24]
     4b0:	str	x8, [sp, #16]
     4b4:	ldur	x8, [x29, #-16]
     4b8:	mov	w9, #0x0                   	// #0
     4bc:	str	w9, [sp, #12]
     4c0:	cbz	x8, 4d8 <lt_dlclose+0x50>
     4c4:	ldur	x8, [x29, #-8]
     4c8:	ldur	x9, [x29, #-16]
     4cc:	cmp	x8, x9
     4d0:	cset	w10, ne  // ne = any
     4d4:	str	w10, [sp, #12]
     4d8:	ldr	w8, [sp, #12]
     4dc:	tbnz	w8, #0, 4e4 <lt_dlclose+0x5c>
     4e0:	b	4fc <lt_dlclose+0x74>
     4e4:	ldur	x8, [x29, #-16]
     4e8:	stur	x8, [x29, #-24]
     4ec:	ldur	x8, [x29, #-16]
     4f0:	ldr	x8, [x8]
     4f4:	stur	x8, [x29, #-16]
     4f8:	b	4b4 <lt_dlclose+0x2c>
     4fc:	ldur	x8, [x29, #-16]
     500:	cbnz	x8, 520 <lt_dlclose+0x98>
     504:	mov	w0, #0xc                   	// #12
     508:	bl	0 <lt__error_string>
     50c:	bl	0 <lt__set_last_error>
     510:	ldur	w8, [x29, #-28]
     514:	add	w8, w8, #0x1
     518:	stur	w8, [x29, #-28]
     51c:	b	680 <lt_dlclose+0x1f8>
     520:	ldur	x8, [x29, #-8]
     524:	stur	x8, [x29, #-16]
     528:	ldur	x8, [x29, #-16]
     52c:	ldr	w9, [x8, #32]
     530:	subs	w9, w9, #0x1
     534:	str	w9, [x8, #32]
     538:	ldur	x8, [x29, #-16]
     53c:	ldr	w9, [x8, #32]
     540:	cmp	w9, #0x0
     544:	cset	w9, gt
     548:	tbnz	w9, #0, 654 <lt_dlclose+0x1cc>
     54c:	ldur	x8, [x29, #-16]
     550:	ldrb	w9, [x8, #36]
     554:	and	w9, w9, #0x1
     558:	and	w9, w9, #0xff
     55c:	cbnz	w9, 654 <lt_dlclose+0x1cc>
     560:	ldur	x8, [x29, #-16]
     564:	ldr	x8, [x8, #8]
     568:	ldr	x8, [x8, #56]
     56c:	stur	x8, [x29, #-40]
     570:	ldur	x8, [x29, #-16]
     574:	ldr	x9, [sp, #16]
     578:	ldr	x10, [x9]
     57c:	cmp	x8, x10
     580:	b.eq	598 <lt_dlclose+0x110>  // b.none
     584:	ldur	x8, [x29, #-16]
     588:	ldr	x8, [x8]
     58c:	ldur	x9, [x29, #-24]
     590:	str	x8, [x9]
     594:	b	5a8 <lt_dlclose+0x120>
     598:	ldur	x8, [x29, #-16]
     59c:	ldr	x8, [x8]
     5a0:	ldr	x9, [sp, #16]
     5a4:	str	x8, [x9]
     5a8:	ldur	x8, [x29, #-16]
     5ac:	ldr	x8, [x8, #8]
     5b0:	ldr	x8, [x8, #24]
     5b4:	ldur	x0, [x29, #-40]
     5b8:	ldur	x9, [x29, #-16]
     5bc:	ldr	x1, [x9, #56]
     5c0:	blr	x8
     5c4:	ldur	w10, [x29, #-28]
     5c8:	add	w10, w10, w0
     5cc:	stur	w10, [x29, #-28]
     5d0:	ldur	x0, [x29, #-8]
     5d4:	bl	1d44 <unload_deplibs>
     5d8:	ldur	w10, [x29, #-28]
     5dc:	add	w10, w10, w0
     5e0:	stur	w10, [x29, #-28]
     5e4:	ldur	x8, [x29, #-16]
     5e8:	ldr	x0, [x8, #72]
     5ec:	bl	0 <free>
     5f0:	ldur	x8, [x29, #-16]
     5f4:	mov	x9, xzr
     5f8:	str	x9, [x8, #72]
     5fc:	str	x9, [sp, #48]
     600:	ldur	x8, [x29, #-16]
     604:	ldr	x0, [x8, #16]
     608:	str	x9, [sp]
     60c:	bl	0 <free>
     610:	ldur	x8, [x29, #-16]
     614:	ldr	x9, [sp]
     618:	str	x9, [x8, #16]
     61c:	str	x9, [sp, #40]
     620:	ldur	x8, [x29, #-16]
     624:	ldr	x0, [x8, #24]
     628:	bl	0 <free>
     62c:	ldur	x8, [x29, #-16]
     630:	ldr	x9, [sp]
     634:	str	x9, [x8, #24]
     638:	str	x9, [sp, #32]
     63c:	ldur	x0, [x29, #-16]
     640:	bl	0 <free>
     644:	ldr	x8, [sp]
     648:	stur	x8, [x29, #-16]
     64c:	str	x8, [sp, #24]
     650:	b	680 <lt_dlclose+0x1f8>
     654:	ldur	x8, [x29, #-8]
     658:	ldrb	w9, [x8, #36]
     65c:	and	w9, w9, #0x1
     660:	and	w9, w9, #0xff
     664:	cbz	w9, 680 <lt_dlclose+0x1f8>
     668:	mov	w0, #0x10                  	// #16
     66c:	bl	0 <lt__error_string>
     670:	bl	0 <lt__set_last_error>
     674:	ldur	w8, [x29, #-28]
     678:	add	w8, w8, #0x1
     67c:	stur	w8, [x29, #-28]
     680:	ldur	w0, [x29, #-28]
     684:	ldp	x29, x30, [sp, #96]
     688:	add	sp, sp, #0x70
     68c:	ret

0000000000000690 <lt_dladvise_init>:
     690:	sub	sp, sp, #0x30
     694:	stp	x29, x30, [sp, #32]
     698:	add	x29, sp, #0x20
     69c:	mov	x8, #0x4                   	// #4
     6a0:	mov	w9, wzr
     6a4:	mov	w10, #0x1                   	// #1
     6a8:	stur	x0, [x29, #-8]
     6ac:	mov	x0, x8
     6b0:	str	w9, [sp, #12]
     6b4:	str	w10, [sp, #8]
     6b8:	bl	0 <lt__zalloc>
     6bc:	str	x0, [sp, #16]
     6c0:	ldr	x8, [sp, #16]
     6c4:	ldur	x11, [x29, #-8]
     6c8:	str	x8, [x11]
     6cc:	ldr	x8, [sp, #16]
     6d0:	cmp	x8, #0x0
     6d4:	ldr	w9, [sp, #12]
     6d8:	ldr	w10, [sp, #8]
     6dc:	csel	w0, w9, w10, ne  // ne = any
     6e0:	ldp	x29, x30, [sp, #32]
     6e4:	add	sp, sp, #0x30
     6e8:	ret

00000000000006ec <lt_dladvise_destroy>:
     6ec:	sub	sp, sp, #0x20
     6f0:	stp	x29, x30, [sp, #16]
     6f4:	add	x29, sp, #0x10
     6f8:	str	x0, [sp, #8]
     6fc:	ldr	x8, [sp, #8]
     700:	cbz	x8, 720 <lt_dladvise_destroy+0x34>
     704:	ldr	x8, [sp, #8]
     708:	ldr	x0, [x8]
     70c:	bl	0 <free>
     710:	ldr	x8, [sp, #8]
     714:	mov	x9, xzr
     718:	str	x9, [x8]
     71c:	str	x9, [sp]
     720:	mov	w8, wzr
     724:	mov	w0, w8
     728:	ldp	x29, x30, [sp, #16]
     72c:	add	sp, sp, #0x20
     730:	ret

0000000000000734 <lt_dladvise_ext>:
     734:	sub	sp, sp, #0x20
     738:	stp	x29, x30, [sp, #16]
     73c:	add	x29, sp, #0x10
     740:	str	x0, [sp, #8]
     744:	ldr	x8, [sp, #8]
     748:	cbz	x8, 75c <lt_dladvise_ext+0x28>
     74c:	ldr	x8, [sp, #8]
     750:	ldr	x8, [x8]
     754:	cbz	x8, 75c <lt_dladvise_ext+0x28>
     758:	b	77c <lt_dladvise_ext+0x48>
     75c:	adrp	x0, 0 <lt__alloc_die_callback>
     760:	add	x0, x0, #0x0
     764:	adrp	x1, 0 <lt__alloc_die_callback>
     768:	add	x1, x1, #0x0
     76c:	mov	w2, #0x631                 	// #1585
     770:	adrp	x3, 0 <lt__alloc_die_callback>
     774:	add	x3, x3, #0x0
     778:	bl	0 <__assert_fail>
     77c:	ldr	x8, [sp, #8]
     780:	ldr	x8, [x8]
     784:	ldrb	w9, [x8]
     788:	and	w9, w9, #0xfffffffe
     78c:	orr	w9, w9, #0x1
     790:	strb	w9, [x8]
     794:	mov	w9, wzr
     798:	mov	w0, w9
     79c:	ldp	x29, x30, [sp, #16]
     7a0:	add	sp, sp, #0x20
     7a4:	ret

00000000000007a8 <lt_dladvise_resident>:
     7a8:	sub	sp, sp, #0x20
     7ac:	stp	x29, x30, [sp, #16]
     7b0:	add	x29, sp, #0x10
     7b4:	str	x0, [sp, #8]
     7b8:	ldr	x8, [sp, #8]
     7bc:	cbz	x8, 7d0 <lt_dladvise_resident+0x28>
     7c0:	ldr	x8, [sp, #8]
     7c4:	ldr	x8, [x8]
     7c8:	cbz	x8, 7d0 <lt_dladvise_resident+0x28>
     7cc:	b	7f0 <lt_dladvise_resident+0x48>
     7d0:	adrp	x0, 0 <lt__alloc_die_callback>
     7d4:	add	x0, x0, #0x0
     7d8:	adrp	x1, 0 <lt__alloc_die_callback>
     7dc:	add	x1, x1, #0x0
     7e0:	mov	w2, #0x639                 	// #1593
     7e4:	adrp	x3, 0 <lt__alloc_die_callback>
     7e8:	add	x3, x3, #0x0
     7ec:	bl	0 <__assert_fail>
     7f0:	ldr	x8, [sp, #8]
     7f4:	ldr	x8, [x8]
     7f8:	ldrb	w9, [x8]
     7fc:	and	w9, w9, #0xfffffffd
     800:	orr	w9, w9, #0x2
     804:	strb	w9, [x8]
     808:	mov	w9, wzr
     80c:	mov	w0, w9
     810:	ldp	x29, x30, [sp, #16]
     814:	add	sp, sp, #0x20
     818:	ret

000000000000081c <lt_dladvise_local>:
     81c:	sub	sp, sp, #0x20
     820:	stp	x29, x30, [sp, #16]
     824:	add	x29, sp, #0x10
     828:	str	x0, [sp, #8]
     82c:	ldr	x8, [sp, #8]
     830:	cbz	x8, 844 <lt_dladvise_local+0x28>
     834:	ldr	x8, [sp, #8]
     838:	ldr	x8, [x8]
     83c:	cbz	x8, 844 <lt_dladvise_local+0x28>
     840:	b	864 <lt_dladvise_local+0x48>
     844:	adrp	x0, 0 <lt__alloc_die_callback>
     848:	add	x0, x0, #0x0
     84c:	adrp	x1, 0 <lt__alloc_die_callback>
     850:	add	x1, x1, #0x0
     854:	mov	w2, #0x641                 	// #1601
     858:	adrp	x3, 0 <lt__alloc_die_callback>
     85c:	add	x3, x3, #0x0
     860:	bl	0 <__assert_fail>
     864:	ldr	x8, [sp, #8]
     868:	ldr	x8, [x8]
     86c:	ldrb	w9, [x8]
     870:	and	w9, w9, #0xfffffff7
     874:	orr	w9, w9, #0x8
     878:	strb	w9, [x8]
     87c:	mov	w9, wzr
     880:	mov	w0, w9
     884:	ldp	x29, x30, [sp, #16]
     888:	add	sp, sp, #0x20
     88c:	ret

0000000000000890 <lt_dladvise_global>:
     890:	sub	sp, sp, #0x20
     894:	stp	x29, x30, [sp, #16]
     898:	add	x29, sp, #0x10
     89c:	str	x0, [sp, #8]
     8a0:	ldr	x8, [sp, #8]
     8a4:	cbz	x8, 8b8 <lt_dladvise_global+0x28>
     8a8:	ldr	x8, [sp, #8]
     8ac:	ldr	x8, [x8]
     8b0:	cbz	x8, 8b8 <lt_dladvise_global+0x28>
     8b4:	b	8d8 <lt_dladvise_global+0x48>
     8b8:	adrp	x0, 0 <lt__alloc_die_callback>
     8bc:	add	x0, x0, #0x0
     8c0:	adrp	x1, 0 <lt__alloc_die_callback>
     8c4:	add	x1, x1, #0x0
     8c8:	mov	w2, #0x649                 	// #1609
     8cc:	adrp	x3, 0 <lt__alloc_die_callback>
     8d0:	add	x3, x3, #0x0
     8d4:	bl	0 <__assert_fail>
     8d8:	ldr	x8, [sp, #8]
     8dc:	ldr	x8, [x8]
     8e0:	ldrb	w9, [x8]
     8e4:	and	w9, w9, #0xfffffffb
     8e8:	orr	w9, w9, #0x4
     8ec:	strb	w9, [x8]
     8f0:	mov	w9, wzr
     8f4:	mov	w0, w9
     8f8:	ldp	x29, x30, [sp, #16]
     8fc:	add	sp, sp, #0x20
     900:	ret

0000000000000904 <lt_dladvise_preload>:
     904:	sub	sp, sp, #0x20
     908:	stp	x29, x30, [sp, #16]
     90c:	add	x29, sp, #0x10
     910:	str	x0, [sp, #8]
     914:	ldr	x8, [sp, #8]
     918:	cbz	x8, 92c <lt_dladvise_preload+0x28>
     91c:	ldr	x8, [sp, #8]
     920:	ldr	x8, [x8]
     924:	cbz	x8, 92c <lt_dladvise_preload+0x28>
     928:	b	94c <lt_dladvise_preload+0x48>
     92c:	adrp	x0, 0 <lt__alloc_die_callback>
     930:	add	x0, x0, #0x0
     934:	adrp	x1, 0 <lt__alloc_die_callback>
     938:	add	x1, x1, #0x0
     93c:	mov	w2, #0x651                 	// #1617
     940:	adrp	x3, 0 <lt__alloc_die_callback>
     944:	add	x3, x3, #0x0
     948:	bl	0 <__assert_fail>
     94c:	ldr	x8, [sp, #8]
     950:	ldr	x8, [x8]
     954:	ldrb	w9, [x8]
     958:	and	w9, w9, #0xffffffef
     95c:	orr	w9, w9, #0x10
     960:	strb	w9, [x8]
     964:	mov	w9, wzr
     968:	mov	w0, w9
     96c:	ldp	x29, x30, [sp, #16]
     970:	add	sp, sp, #0x20
     974:	ret

0000000000000978 <lt_dlopen>:
     978:	sub	sp, sp, #0x20
     97c:	stp	x29, x30, [sp, #16]
     980:	add	x29, sp, #0x10
     984:	mov	x8, xzr
     988:	str	x0, [sp, #8]
     98c:	ldr	x0, [sp, #8]
     990:	mov	x1, x8
     994:	bl	9a4 <lt_dlopenadvise>
     998:	ldp	x29, x30, [sp, #16]
     99c:	add	sp, sp, #0x20
     9a0:	ret

00000000000009a4 <lt_dlopenadvise>:
     9a4:	sub	sp, sp, #0x40
     9a8:	stp	x29, x30, [sp, #48]
     9ac:	add	x29, sp, #0x30
     9b0:	mov	x8, xzr
     9b4:	stur	x0, [x29, #-16]
     9b8:	str	x1, [sp, #24]
     9bc:	str	x8, [sp, #16]
     9c0:	str	wzr, [sp, #12]
     9c4:	str	x8, [sp]
     9c8:	bl	0 <lt__get_last_error>
     9cc:	str	x0, [sp]
     9d0:	ldr	x8, [sp, #24]
     9d4:	cbz	x8, a28 <lt_dlopenadvise+0x84>
     9d8:	ldr	x8, [sp, #24]
     9dc:	ldrb	w9, [x8]
     9e0:	mov	w10, #0x3                   	// #3
     9e4:	lsr	w9, w9, w10
     9e8:	and	w9, w9, #0x1
     9ec:	and	w9, w9, #0xff
     9f0:	cbz	w9, a28 <lt_dlopenadvise+0x84>
     9f4:	ldr	x8, [sp, #24]
     9f8:	ldrb	w9, [x8]
     9fc:	mov	w10, #0x2                   	// #2
     a00:	lsr	w9, w9, w10
     a04:	and	w9, w9, #0x1
     a08:	and	w9, w9, #0xff
     a0c:	cbz	w9, a28 <lt_dlopenadvise+0x84>
     a10:	mov	w0, #0x13                  	// #19
     a14:	bl	0 <lt__error_string>
     a18:	bl	0 <lt__set_last_error>
     a1c:	mov	x8, xzr
     a20:	stur	x8, [x29, #-8]
     a24:	b	b58 <lt_dlopenadvise+0x1b4>
     a28:	ldur	x8, [x29, #-16]
     a2c:	cbz	x8, a58 <lt_dlopenadvise+0xb4>
     a30:	ldr	x8, [sp, #24]
     a34:	cbz	x8, a58 <lt_dlopenadvise+0xb4>
     a38:	ldr	x8, [sp, #24]
     a3c:	ldrb	w9, [x8]
     a40:	and	w9, w9, #0x1
     a44:	and	w9, w9, #0xff
     a48:	cbz	w9, a58 <lt_dlopenadvise+0xb4>
     a4c:	ldur	x0, [x29, #-16]
     a50:	bl	bc8 <has_library_ext>
     a54:	cbz	w0, a8c <lt_dlopenadvise+0xe8>
     a58:	ldur	x1, [x29, #-16]
     a5c:	ldr	x3, [sp, #24]
     a60:	add	x0, sp, #0x10
     a64:	mov	x8, xzr
     a68:	mov	x2, x8
     a6c:	bl	c6c <try_dlopen>
     a70:	cbz	w0, a80 <lt_dlopenadvise+0xdc>
     a74:	mov	x8, xzr
     a78:	stur	x8, [x29, #-8]
     a7c:	b	b58 <lt_dlopenadvise+0x1b4>
     a80:	ldr	x8, [sp, #16]
     a84:	stur	x8, [x29, #-8]
     a88:	b	b58 <lt_dlopenadvise+0x1b4>
     a8c:	ldur	x8, [x29, #-16]
     a90:	cbz	x8, b44 <lt_dlopenadvise+0x1a0>
     a94:	ldur	x8, [x29, #-16]
     a98:	ldrb	w9, [x8]
     a9c:	cbz	w9, b44 <lt_dlopenadvise+0x1a0>
     aa0:	ldur	x1, [x29, #-16]
     aa4:	ldr	x3, [sp, #24]
     aa8:	add	x0, sp, #0x10
     aac:	adrp	x2, 0 <lt__alloc_die_callback>
     ab0:	add	x2, x2, #0x0
     ab4:	bl	c6c <try_dlopen>
     ab8:	ldr	w8, [sp, #12]
     abc:	add	w8, w8, w0
     ac0:	str	w8, [sp, #12]
     ac4:	ldr	x9, [sp, #16]
     ac8:	cbnz	x9, ae4 <lt_dlopenadvise+0x140>
     acc:	ldr	w8, [sp, #12]
     ad0:	cmp	w8, #0x0
     ad4:	cset	w8, le
     ad8:	tbnz	w8, #0, af0 <lt_dlopenadvise+0x14c>
     adc:	bl	1864 <file_not_found>
     ae0:	cbnz	w0, af0 <lt_dlopenadvise+0x14c>
     ae4:	ldr	x8, [sp, #16]
     ae8:	stur	x8, [x29, #-8]
     aec:	b	b58 <lt_dlopenadvise+0x1b4>
     af0:	ldr	x0, [sp]
     af4:	bl	0 <lt__set_last_error>
     af8:	ldur	x1, [x29, #-16]
     afc:	ldr	x3, [sp, #24]
     b00:	add	x8, sp, #0x10
     b04:	mov	x0, x8
     b08:	adrp	x2, 0 <lt__alloc_die_callback>
     b0c:	add	x2, x2, #0x0
     b10:	bl	c6c <try_dlopen>
     b14:	str	w0, [sp, #12]
     b18:	ldr	x8, [sp, #16]
     b1c:	cbnz	x8, b38 <lt_dlopenadvise+0x194>
     b20:	ldr	w8, [sp, #12]
     b24:	cmp	w8, #0x0
     b28:	cset	w8, le
     b2c:	tbnz	w8, #0, b44 <lt_dlopenadvise+0x1a0>
     b30:	bl	1864 <file_not_found>
     b34:	cbnz	w0, b44 <lt_dlopenadvise+0x1a0>
     b38:	ldr	x8, [sp, #16]
     b3c:	stur	x8, [x29, #-8]
     b40:	b	b58 <lt_dlopenadvise+0x1b4>
     b44:	mov	w0, #0x5                   	// #5
     b48:	bl	0 <lt__error_string>
     b4c:	bl	0 <lt__set_last_error>
     b50:	mov	x8, xzr
     b54:	stur	x8, [x29, #-8]
     b58:	ldur	x0, [x29, #-8]
     b5c:	ldp	x29, x30, [sp, #48]
     b60:	add	sp, sp, #0x40
     b64:	ret

0000000000000b68 <lt_dlopenext>:
     b68:	sub	sp, sp, #0x30
     b6c:	stp	x29, x30, [sp, #32]
     b70:	add	x29, sp, #0x20
     b74:	mov	x8, xzr
     b78:	add	x9, sp, #0x8
     b7c:	stur	x0, [x29, #-8]
     b80:	str	x8, [sp, #16]
     b84:	mov	x0, x9
     b88:	bl	690 <lt_dladvise_init>
     b8c:	cbnz	w0, bac <lt_dlopenext+0x44>
     b90:	add	x0, sp, #0x8
     b94:	bl	734 <lt_dladvise_ext>
     b98:	cbnz	w0, bac <lt_dlopenext+0x44>
     b9c:	ldur	x0, [x29, #-8]
     ba0:	ldr	x1, [sp, #8]
     ba4:	bl	9a4 <lt_dlopenadvise>
     ba8:	str	x0, [sp, #16]
     bac:	add	x0, sp, #0x8
     bb0:	bl	6ec <lt_dladvise_destroy>
     bb4:	ldr	x8, [sp, #16]
     bb8:	mov	x0, x8
     bbc:	ldp	x29, x30, [sp, #32]
     bc0:	add	sp, sp, #0x30
     bc4:	ret

0000000000000bc8 <has_library_ext>:
     bc8:	sub	sp, sp, #0x30
     bcc:	stp	x29, x30, [sp, #32]
     bd0:	add	x29, sp, #0x20
     bd4:	mov	x8, xzr
     bd8:	str	x0, [sp, #16]
     bdc:	str	x8, [sp, #8]
     be0:	ldr	x8, [sp, #16]
     be4:	cbz	x8, bec <has_library_ext+0x24>
     be8:	b	c0c <has_library_ext+0x44>
     bec:	adrp	x0, 0 <lt__alloc_die_callback>
     bf0:	add	x0, x0, #0x0
     bf4:	adrp	x1, 0 <lt__alloc_die_callback>
     bf8:	add	x1, x1, #0x0
     bfc:	mov	w2, #0x608                 	// #1544
     c00:	adrp	x3, 0 <lt__alloc_die_callback>
     c04:	add	x3, x3, #0x0
     c08:	bl	0 <__assert_fail>
     c0c:	ldr	x0, [sp, #16]
     c10:	mov	w1, #0x2e                  	// #46
     c14:	bl	0 <strrchr>
     c18:	str	x0, [sp, #8]
     c1c:	ldr	x8, [sp, #8]
     c20:	cbz	x8, c58 <has_library_ext+0x90>
     c24:	ldr	x0, [sp, #8]
     c28:	adrp	x1, 0 <lt__alloc_die_callback>
     c2c:	add	x1, x1, #0x0
     c30:	bl	0 <strcmp>
     c34:	cbz	w0, c4c <has_library_ext+0x84>
     c38:	ldr	x0, [sp, #8]
     c3c:	adrp	x1, 0 <lt__alloc_die_callback>
     c40:	add	x1, x1, #0x0
     c44:	bl	0 <strcmp>
     c48:	cbnz	w0, c58 <has_library_ext+0x90>
     c4c:	mov	w8, #0x1                   	// #1
     c50:	stur	w8, [x29, #-4]
     c54:	b	c5c <has_library_ext+0x94>
     c58:	stur	wzr, [x29, #-4]
     c5c:	ldur	w0, [x29, #-4]
     c60:	ldp	x29, x30, [sp, #32]
     c64:	add	sp, sp, #0x30
     c68:	ret

0000000000000c6c <try_dlopen>:
     c6c:	stp	x29, x30, [sp, #-32]!
     c70:	str	x28, [sp, #16]
     c74:	mov	x29, sp
     c78:	sub	sp, sp, #0x1e0
     c7c:	mov	x8, xzr
     c80:	adrp	x9, 0 <lt__alloc_die_callback>
     c84:	add	x9, x9, #0x0
     c88:	adrp	x10, 0 <lt__alloc_die_callback>
     c8c:	add	x10, x10, #0x0
     c90:	adrp	x11, 0 <lt__alloc_die_callback>
     c94:	add	x11, x11, #0x0
     c98:	adrp	x12, 0 <lt__alloc_die_callback>
     c9c:	add	x12, x12, #0x0
     ca0:	adrp	x13, 0 <lt__alloc_die_callback>
     ca4:	add	x13, x13, #0x0
     ca8:	stur	x0, [x29, #-16]
     cac:	stur	x1, [x29, #-24]
     cb0:	stur	x2, [x29, #-32]
     cb4:	stur	x3, [x29, #-40]
     cb8:	stur	x8, [x29, #-48]
     cbc:	stur	x8, [x29, #-56]
     cc0:	stur	x8, [x29, #-64]
     cc4:	stur	x8, [x29, #-72]
     cc8:	stur	x8, [x29, #-80]
     ccc:	stur	x8, [x29, #-88]
     cd0:	stur	x8, [x29, #-96]
     cd4:	stur	wzr, [x29, #-100]
     cd8:	ldur	x8, [x29, #-16]
     cdc:	str	x9, [sp, #128]
     ce0:	str	x10, [sp, #120]
     ce4:	str	x11, [sp, #112]
     ce8:	str	x12, [sp, #104]
     cec:	str	x13, [sp, #96]
     cf0:	cbz	x8, cf8 <try_dlopen+0x8c>
     cf4:	b	d10 <try_dlopen+0xa4>
     cf8:	adrp	x0, 0 <lt__alloc_die_callback>
     cfc:	add	x0, x0, #0x0
     d00:	ldr	x1, [sp, #128]
     d04:	mov	w2, #0x494                 	// #1172
     d08:	ldr	x3, [sp, #120]
     d0c:	bl	0 <__assert_fail>
     d10:	ldur	x8, [x29, #-16]
     d14:	ldr	x8, [x8]
     d18:	cbnz	x8, d20 <try_dlopen+0xb4>
     d1c:	b	d38 <try_dlopen+0xcc>
     d20:	adrp	x0, 0 <lt__alloc_die_callback>
     d24:	add	x0, x0, #0x0
     d28:	ldr	x1, [sp, #128]
     d2c:	mov	w2, #0x495                 	// #1173
     d30:	ldr	x3, [sp, #120]
     d34:	bl	0 <__assert_fail>
     d38:	bl	0 <lt__get_last_error>
     d3c:	stur	x0, [x29, #-48]
     d40:	ldur	x8, [x29, #-24]
     d44:	cbnz	x8, dd8 <try_dlopen+0x16c>
     d48:	mov	x0, #0x58                  	// #88
     d4c:	bl	0 <lt__zalloc>
     d50:	ldur	x8, [x29, #-16]
     d54:	str	x0, [x8]
     d58:	ldur	x8, [x29, #-16]
     d5c:	ldr	x8, [x8]
     d60:	cbnz	x8, d70 <try_dlopen+0x104>
     d64:	mov	w8, #0x1                   	// #1
     d68:	stur	w8, [x29, #-4]
     d6c:	b	1850 <try_dlopen+0xbe4>
     d70:	ldur	x8, [x29, #-16]
     d74:	ldr	x8, [x8]
     d78:	sub	x0, x29, #0x70
     d7c:	stur	x8, [x29, #-112]
     d80:	ldur	x8, [x29, #-112]
     d84:	ldrb	w9, [x8, #36]
     d88:	and	w9, w9, #0xfffffffe
     d8c:	orr	w9, w9, #0x1
     d90:	strb	w9, [x8, #36]
     d94:	ldur	x2, [x29, #-40]
     d98:	mov	x8, xzr
     d9c:	mov	x1, x8
     da0:	mov	x3, x8
     da4:	bl	2f9c <tryall_dlopen>
     da8:	cbz	w0, dd4 <try_dlopen+0x168>
     dac:	ldur	x8, [x29, #-16]
     db0:	ldr	x0, [x8]
     db4:	bl	0 <free>
     db8:	ldur	x8, [x29, #-16]
     dbc:	mov	x9, xzr
     dc0:	str	x9, [x8]
     dc4:	stur	x9, [x29, #-120]
     dc8:	mov	w10, #0x1                   	// #1
     dcc:	stur	w10, [x29, #-4]
     dd0:	b	1850 <try_dlopen+0xbe4>
     dd4:	b	1700 <try_dlopen+0xa94>
     dd8:	ldur	x8, [x29, #-24]
     ddc:	cbz	x8, df0 <try_dlopen+0x184>
     de0:	ldur	x8, [x29, #-24]
     de4:	ldrb	w9, [x8]
     de8:	cbz	w9, df0 <try_dlopen+0x184>
     dec:	b	e08 <try_dlopen+0x19c>
     df0:	adrp	x0, 0 <lt__alloc_die_callback>
     df4:	add	x0, x0, #0x0
     df8:	ldr	x1, [sp, #128]
     dfc:	mov	w2, #0x4b4                 	// #1204
     e00:	ldr	x3, [sp, #120]
     e04:	bl	0 <__assert_fail>
     e08:	ldur	x8, [x29, #-32]
     e0c:	cbz	x8, ec0 <try_dlopen+0x254>
     e10:	ldur	x8, [x29, #-24]
     e14:	cbz	x8, e34 <try_dlopen+0x1c8>
     e18:	ldur	x8, [x29, #-24]
     e1c:	ldrb	w9, [x8]
     e20:	cbz	w9, e34 <try_dlopen+0x1c8>
     e24:	ldur	x0, [x29, #-24]
     e28:	bl	0 <strlen>
     e2c:	str	x0, [sp, #88]
     e30:	b	e3c <try_dlopen+0x1d0>
     e34:	mov	x8, xzr
     e38:	str	x8, [sp, #88]
     e3c:	ldr	x8, [sp, #88]
     e40:	ldur	x9, [x29, #-32]
     e44:	str	x8, [sp, #80]
     e48:	cbz	x9, e68 <try_dlopen+0x1fc>
     e4c:	ldur	x8, [x29, #-32]
     e50:	ldrb	w9, [x8]
     e54:	cbz	w9, e68 <try_dlopen+0x1fc>
     e58:	ldur	x0, [x29, #-32]
     e5c:	bl	0 <strlen>
     e60:	str	x0, [sp, #72]
     e64:	b	e70 <try_dlopen+0x204>
     e68:	mov	x8, xzr
     e6c:	str	x8, [sp, #72]
     e70:	ldr	x8, [sp, #72]
     e74:	ldr	x9, [sp, #80]
     e78:	add	x8, x9, x8
     e7c:	mov	x10, #0x1                   	// #1
     e80:	add	x8, x8, #0x1
     e84:	mul	x0, x8, x10
     e88:	bl	0 <lt__malloc>
     e8c:	stur	x0, [x29, #-96]
     e90:	ldur	x8, [x29, #-96]
     e94:	cbnz	x8, ea4 <try_dlopen+0x238>
     e98:	mov	w8, #0x1                   	// #1
     e9c:	stur	w8, [x29, #-4]
     ea0:	b	1850 <try_dlopen+0xbe4>
     ea4:	ldur	x0, [x29, #-96]
     ea8:	ldur	x2, [x29, #-24]
     eac:	ldur	x3, [x29, #-32]
     eb0:	adrp	x1, 0 <lt__alloc_die_callback>
     eb4:	add	x1, x1, #0x0
     eb8:	bl	0 <sprintf>
     ebc:	b	ee0 <try_dlopen+0x274>
     ec0:	ldur	x0, [x29, #-24]
     ec4:	bl	0 <lt__strdup>
     ec8:	stur	x0, [x29, #-96]
     ecc:	ldur	x8, [x29, #-96]
     ed0:	cbnz	x8, ee0 <try_dlopen+0x274>
     ed4:	mov	w8, #0x1                   	// #1
     ed8:	stur	w8, [x29, #-4]
     edc:	b	1850 <try_dlopen+0xbe4>
     ee0:	ldur	x0, [x29, #-96]
     ee4:	sub	x1, x29, #0x40
     ee8:	bl	269c <canonicalize_path>
     eec:	cbz	w0, f00 <try_dlopen+0x294>
     ef0:	ldur	w8, [x29, #-100]
     ef4:	add	w8, w8, #0x1
     ef8:	stur	w8, [x29, #-100]
     efc:	b	17c0 <try_dlopen+0xb54>
     f00:	ldur	x0, [x29, #-64]
     f04:	mov	w1, #0x2f                  	// #47
     f08:	bl	0 <strrchr>
     f0c:	stur	x0, [x29, #-72]
     f10:	ldur	x8, [x29, #-72]
     f14:	cbz	x8, f90 <try_dlopen+0x324>
     f18:	ldur	x8, [x29, #-72]
     f1c:	add	x8, x8, #0x1
     f20:	ldur	x9, [x29, #-64]
     f24:	subs	x8, x8, x9
     f28:	stur	x8, [x29, #-128]
     f2c:	ldur	x8, [x29, #-128]
     f30:	mov	x9, #0x1                   	// #1
     f34:	add	x8, x8, #0x1
     f38:	mul	x0, x8, x9
     f3c:	bl	0 <lt__malloc>
     f40:	stur	x0, [x29, #-80]
     f44:	ldur	x8, [x29, #-80]
     f48:	cbnz	x8, f5c <try_dlopen+0x2f0>
     f4c:	ldur	w8, [x29, #-100]
     f50:	add	w8, w8, #0x1
     f54:	stur	w8, [x29, #-100]
     f58:	b	17c0 <try_dlopen+0xb54>
     f5c:	ldur	x0, [x29, #-80]
     f60:	ldur	x1, [x29, #-64]
     f64:	ldur	x2, [x29, #-128]
     f68:	bl	0 <lt_strlcpy>
     f6c:	ldur	x8, [x29, #-80]
     f70:	ldur	x9, [x29, #-128]
     f74:	add	x8, x8, x9
     f78:	mov	w10, #0x0                   	// #0
     f7c:	strb	w10, [x8]
     f80:	ldur	x8, [x29, #-72]
     f84:	add	x8, x8, #0x1
     f88:	stur	x8, [x29, #-72]
     f8c:	b	fb8 <try_dlopen+0x34c>
     f90:	ldur	x8, [x29, #-72]
     f94:	ldur	x9, [x29, #-64]
     f98:	cmp	x8, x9
     f9c:	b.eq	fb8 <try_dlopen+0x34c>  // b.none
     fa0:	ldur	x0, [x29, #-72]
     fa4:	bl	0 <free>
     fa8:	ldur	x8, [x29, #-64]
     fac:	stur	x8, [x29, #-72]
     fb0:	mov	x8, xzr
     fb4:	stur	x8, [x29, #-64]
     fb8:	ldur	x8, [x29, #-72]
     fbc:	cbz	x8, fd0 <try_dlopen+0x364>
     fc0:	ldur	x8, [x29, #-72]
     fc4:	ldrb	w9, [x8]
     fc8:	cbz	w9, fd0 <try_dlopen+0x364>
     fcc:	b	fe8 <try_dlopen+0x37c>
     fd0:	adrp	x0, 0 <lt__alloc_die_callback>
     fd4:	add	x0, x0, #0x0
     fd8:	ldr	x1, [sp, #128]
     fdc:	mov	w2, #0x4e3                 	// #1251
     fe0:	ldr	x3, [sp, #120]
     fe4:	bl	0 <__assert_fail>
     fe8:	ldur	x0, [x29, #-72]
     fec:	mov	w1, #0x2e                  	// #46
     ff0:	bl	0 <strrchr>
     ff4:	stur	x0, [x29, #-32]
     ff8:	ldur	x8, [x29, #-32]
     ffc:	cbnz	x8, 1044 <try_dlopen+0x3d8>
    1000:	ldur	x8, [x29, #-72]
    1004:	ldur	x9, [x29, #-72]
    1008:	str	x8, [sp, #64]
    100c:	cbz	x9, 102c <try_dlopen+0x3c0>
    1010:	ldur	x8, [x29, #-72]
    1014:	ldrb	w9, [x8]
    1018:	cbz	w9, 102c <try_dlopen+0x3c0>
    101c:	ldur	x0, [x29, #-72]
    1020:	bl	0 <strlen>
    1024:	str	x0, [sp, #56]
    1028:	b	1034 <try_dlopen+0x3c8>
    102c:	mov	x8, xzr
    1030:	str	x8, [sp, #56]
    1034:	ldr	x8, [sp, #56]
    1038:	ldr	x9, [sp, #64]
    103c:	add	x8, x9, x8
    1040:	stur	x8, [x29, #-32]
    1044:	ldur	x8, [x29, #-32]
    1048:	ldur	x9, [x29, #-72]
    104c:	subs	x8, x8, x9
    1050:	mov	x9, #0x1                   	// #1
    1054:	add	x8, x8, #0x1
    1058:	mul	x0, x8, x9
    105c:	bl	0 <lt__malloc>
    1060:	stur	x0, [x29, #-88]
    1064:	ldur	x8, [x29, #-88]
    1068:	cbnz	x8, 107c <try_dlopen+0x410>
    106c:	ldur	w8, [x29, #-100]
    1070:	add	w8, w8, #0x1
    1074:	stur	w8, [x29, #-100]
    1078:	b	17c0 <try_dlopen+0xb54>
    107c:	stur	wzr, [x29, #-132]
    1080:	ldursw	x8, [x29, #-132]
    1084:	ldur	x9, [x29, #-32]
    1088:	ldur	x10, [x29, #-72]
    108c:	subs	x9, x9, x10
    1090:	cmp	x8, x9
    1094:	b.ge	1100 <try_dlopen+0x494>  // b.tcont
    1098:	bl	0 <__ctype_b_loc>
    109c:	ldr	x8, [x0]
    10a0:	ldur	x9, [x29, #-72]
    10a4:	ldursw	x10, [x29, #-132]
    10a8:	ldrb	w11, [x9, x10]
    10ac:	ldrh	w11, [x8, w11, sxtw #1]
    10b0:	and	w11, w11, #0x8
    10b4:	cbz	w11, 10dc <try_dlopen+0x470>
    10b8:	ldur	x8, [x29, #-72]
    10bc:	ldursw	x9, [x29, #-132]
    10c0:	add	x8, x8, x9
    10c4:	ldrb	w10, [x8]
    10c8:	ldur	x8, [x29, #-88]
    10cc:	ldursw	x9, [x29, #-132]
    10d0:	add	x8, x8, x9
    10d4:	strb	w10, [x8]
    10d8:	b	10f0 <try_dlopen+0x484>
    10dc:	ldur	x8, [x29, #-88]
    10e0:	ldursw	x9, [x29, #-132]
    10e4:	add	x8, x8, x9
    10e8:	mov	w10, #0x5f                  	// #95
    10ec:	strb	w10, [x8]
    10f0:	ldur	w8, [x29, #-132]
    10f4:	add	w8, w8, #0x1
    10f8:	stur	w8, [x29, #-132]
    10fc:	b	1080 <try_dlopen+0x414>
    1100:	ldur	x8, [x29, #-88]
    1104:	ldur	x9, [x29, #-32]
    1108:	ldur	x10, [x29, #-72]
    110c:	subs	x9, x9, x10
    1110:	add	x8, x8, x9
    1114:	mov	w11, #0x0                   	// #0
    1118:	strb	w11, [x8]
    111c:	ldur	x8, [x29, #-80]
    1120:	cbnz	x8, 1280 <try_dlopen+0x614>
    1124:	adrp	x0, 0 <lt__alloc_die_callback>
    1128:	add	x0, x0, #0x0
    112c:	bl	0 <lt_dlloader_find>
    1130:	stur	x0, [x29, #-144]
    1134:	ldur	x8, [x29, #-144]
    1138:	cbz	x8, 1280 <try_dlopen+0x614>
    113c:	adrp	x0, 0 <lt__alloc_die_callback>
    1140:	add	x0, x0, #0x0
    1144:	bl	0 <strlen>
    1148:	ldur	x8, [x29, #-88]
    114c:	str	x0, [sp, #48]
    1150:	cbz	x8, 1170 <try_dlopen+0x504>
    1154:	ldur	x8, [x29, #-88]
    1158:	ldrb	w9, [x8]
    115c:	cbz	w9, 1170 <try_dlopen+0x504>
    1160:	ldur	x0, [x29, #-88]
    1164:	bl	0 <strlen>
    1168:	str	x0, [sp, #40]
    116c:	b	1178 <try_dlopen+0x50c>
    1170:	mov	x8, xzr
    1174:	str	x8, [sp, #40]
    1178:	ldr	x8, [sp, #40]
    117c:	ldr	x9, [sp, #48]
    1180:	add	x8, x9, x8
    1184:	ldr	x0, [sp, #112]
    1188:	str	x8, [sp, #32]
    118c:	bl	0 <strlen>
    1190:	ldr	x8, [sp, #32]
    1194:	add	x9, x8, x0
    1198:	add	x9, x9, #0x2
    119c:	mov	x10, #0x1                   	// #1
    11a0:	mul	x0, x9, x10
    11a4:	bl	0 <lt__malloc>
    11a8:	stur	x0, [x29, #-56]
    11ac:	mov	x0, #0x58                  	// #88
    11b0:	bl	0 <lt__zalloc>
    11b4:	ldur	x8, [x29, #-16]
    11b8:	str	x0, [x8]
    11bc:	ldur	x8, [x29, #-16]
    11c0:	ldr	x8, [x8]
    11c4:	cbz	x8, 11d0 <try_dlopen+0x564>
    11c8:	ldur	x8, [x29, #-56]
    11cc:	cbnz	x8, 11e0 <try_dlopen+0x574>
    11d0:	ldur	w8, [x29, #-100]
    11d4:	add	w8, w8, #0x1
    11d8:	stur	w8, [x29, #-100]
    11dc:	b	17c0 <try_dlopen+0xb54>
    11e0:	ldur	x8, [x29, #-16]
    11e4:	ldr	x8, [x8]
    11e8:	stur	x8, [x29, #-112]
    11ec:	ldur	x0, [x29, #-88]
    11f0:	adrp	x1, 0 <lt__alloc_die_callback>
    11f4:	add	x1, x1, #0x0
    11f8:	mov	x2, #0x3                   	// #3
    11fc:	bl	0 <strncmp>
    1200:	cbnz	w0, 122c <try_dlopen+0x5c0>
    1204:	ldur	x0, [x29, #-56]
    1208:	ldur	x8, [x29, #-88]
    120c:	add	x3, x8, #0x3
    1210:	adrp	x1, 0 <lt__alloc_die_callback>
    1214:	add	x1, x1, #0x0
    1218:	adrp	x2, 0 <lt__alloc_die_callback>
    121c:	add	x2, x2, #0x0
    1220:	ldr	x4, [sp, #112]
    1224:	bl	0 <sprintf>
    1228:	b	1244 <try_dlopen+0x5d8>
    122c:	ldur	x0, [x29, #-56]
    1230:	ldur	x2, [x29, #-88]
    1234:	adrp	x1, 0 <lt__alloc_die_callback>
    1238:	add	x1, x1, #0x0
    123c:	ldr	x3, [sp, #112]
    1240:	bl	0 <sprintf>
    1244:	ldur	x1, [x29, #-56]
    1248:	ldur	x2, [x29, #-40]
    124c:	ldur	x3, [x29, #-144]
    1250:	sub	x0, x29, #0x70
    1254:	bl	2f9c <tryall_dlopen>
    1258:	cbnz	w0, 1260 <try_dlopen+0x5f4>
    125c:	b	1700 <try_dlopen+0xa94>
    1260:	ldur	x8, [x29, #-16]
    1264:	ldr	x0, [x8]
    1268:	bl	0 <free>
    126c:	ldur	x8, [x29, #-16]
    1270:	mov	x9, xzr
    1274:	str	x9, [x8]
    1278:	stur	x9, [x29, #-152]
    127c:	stur	x9, [x29, #-112]
    1280:	ldur	x8, [x29, #-40]
    1284:	cbz	x8, 12a8 <try_dlopen+0x63c>
    1288:	ldur	x8, [x29, #-40]
    128c:	ldrb	w9, [x8]
    1290:	mov	w10, #0x4                   	// #4
    1294:	lsr	w9, w9, w10
    1298:	and	w9, w9, #0x1
    129c:	and	w9, w9, #0xff
    12a0:	cbz	w9, 12a8 <try_dlopen+0x63c>
    12a4:	b	17c0 <try_dlopen+0xb54>
    12a8:	ldur	x8, [x29, #-32]
    12ac:	cbz	x8, 15f4 <try_dlopen+0x988>
    12b0:	ldur	x0, [x29, #-32]
    12b4:	adrp	x1, 0 <lt__alloc_die_callback>
    12b8:	add	x1, x1, #0x0
    12bc:	bl	0 <strcmp>
    12c0:	cbnz	w0, 15f4 <try_dlopen+0x988>
    12c4:	mov	x8, xzr
    12c8:	stur	x8, [x29, #-160]
    12cc:	stur	x8, [x29, #-168]
    12d0:	stur	x8, [x29, #-176]
    12d4:	stur	x8, [x29, #-184]
    12d8:	stur	x8, [x29, #-192]
    12dc:	mov	w9, #0x1                   	// #1
    12e0:	stur	w9, [x29, #-196]
    12e4:	ldur	x8, [x29, #-80]
    12e8:	cbnz	x8, 13ac <try_dlopen+0x740>
    12ec:	ldr	x8, [sp, #104]
    12f0:	ldr	x9, [x8]
    12f4:	stur	x9, [x29, #-208]
    12f8:	ldur	x9, [x29, #-208]
    12fc:	cbz	x9, 1318 <try_dlopen+0x6ac>
    1300:	ldr	x8, [sp, #104]
    1304:	ldr	x0, [x8]
    1308:	ldur	x1, [x29, #-72]
    130c:	sub	x2, x29, #0x50
    1310:	bl	3254 <find_file>
    1314:	stur	x0, [x29, #-160]
    1318:	ldur	x8, [x29, #-160]
    131c:	cbnz	x8, 134c <try_dlopen+0x6e0>
    1320:	adrp	x0, 0 <lt__alloc_die_callback>
    1324:	add	x0, x0, #0x0
    1328:	bl	0 <getenv>
    132c:	stur	x0, [x29, #-208]
    1330:	ldur	x8, [x29, #-208]
    1334:	cbz	x8, 134c <try_dlopen+0x6e0>
    1338:	ldur	x0, [x29, #-208]
    133c:	ldur	x1, [x29, #-72]
    1340:	sub	x2, x29, #0x50
    1344:	bl	3254 <find_file>
    1348:	stur	x0, [x29, #-160]
    134c:	ldur	x8, [x29, #-160]
    1350:	cbnz	x8, 1380 <try_dlopen+0x714>
    1354:	adrp	x0, 0 <lt__alloc_die_callback>
    1358:	add	x0, x0, #0x0
    135c:	bl	0 <getenv>
    1360:	stur	x0, [x29, #-208]
    1364:	ldur	x8, [x29, #-208]
    1368:	cbz	x8, 1380 <try_dlopen+0x714>
    136c:	ldur	x0, [x29, #-208]
    1370:	ldur	x1, [x29, #-72]
    1374:	sub	x2, x29, #0x50
    1378:	bl	3254 <find_file>
    137c:	stur	x0, [x29, #-160]
    1380:	ldur	x8, [x29, #-160]
    1384:	cbnz	x8, 13a8 <try_dlopen+0x73c>
    1388:	ldr	x8, [sp, #96]
    138c:	ldrb	w9, [x8]
    1390:	cbz	w9, 13a8 <try_dlopen+0x73c>
    1394:	ldur	x1, [x29, #-72]
    1398:	ldr	x0, [sp, #96]
    139c:	sub	x2, x29, #0x50
    13a0:	bl	3254 <find_file>
    13a4:	stur	x0, [x29, #-160]
    13a8:	b	13c0 <try_dlopen+0x754>
    13ac:	ldur	x0, [x29, #-96]
    13b0:	adrp	x1, 0 <lt__alloc_die_callback>
    13b4:	add	x1, x1, #0x0
    13b8:	bl	0 <fopen>
    13bc:	stur	x0, [x29, #-160]
    13c0:	ldur	x8, [x29, #-160]
    13c4:	cbnz	x8, 13e4 <try_dlopen+0x778>
    13c8:	mov	w0, #0x5                   	// #5
    13cc:	bl	0 <lt__error_string>
    13d0:	bl	0 <lt__set_last_error>
    13d4:	ldur	w8, [x29, #-100]
    13d8:	add	w8, w8, #0x1
    13dc:	stur	w8, [x29, #-100]
    13e0:	b	17c0 <try_dlopen+0xb54>
    13e4:	ldur	x0, [x29, #-160]
    13e8:	sub	x1, x29, #0xa8
    13ec:	sub	x2, x29, #0xb8
    13f0:	sub	x3, x29, #0xc0
    13f4:	sub	x4, x29, #0xb0
    13f8:	sub	x5, x29, #0xc4
    13fc:	bl	32a8 <parse_dotla_file>
    1400:	cbz	w0, 1410 <try_dlopen+0x7a4>
    1404:	ldur	w8, [x29, #-100]
    1408:	add	w8, w8, #0x1
    140c:	stur	w8, [x29, #-100]
    1410:	ldur	x0, [x29, #-160]
    1414:	bl	0 <fclose>
    1418:	mov	x8, #0x58                  	// #88
    141c:	mov	x0, x8
    1420:	bl	0 <lt__zalloc>
    1424:	ldur	x8, [x29, #-16]
    1428:	str	x0, [x8]
    142c:	ldur	x8, [x29, #-16]
    1430:	ldr	x8, [x8]
    1434:	cbnz	x8, 1444 <try_dlopen+0x7d8>
    1438:	ldur	w8, [x29, #-100]
    143c:	add	w8, w8, #0x1
    1440:	stur	w8, [x29, #-100]
    1444:	ldur	w8, [x29, #-100]
    1448:	cbz	w8, 14c0 <try_dlopen+0x854>
    144c:	ldur	x0, [x29, #-168]
    1450:	bl	0 <free>
    1454:	mov	x8, xzr
    1458:	stur	x8, [x29, #-168]
    145c:	stur	x8, [x29, #-216]
    1460:	ldur	x0, [x29, #-176]
    1464:	str	x8, [sp, #24]
    1468:	bl	0 <free>
    146c:	ldr	x8, [sp, #24]
    1470:	stur	x8, [x29, #-176]
    1474:	stur	x8, [x29, #-224]
    1478:	ldur	x0, [x29, #-184]
    147c:	bl	0 <free>
    1480:	ldr	x8, [sp, #24]
    1484:	stur	x8, [x29, #-184]
    1488:	stur	x8, [x29, #-232]
    148c:	ldur	x0, [x29, #-192]
    1490:	bl	0 <free>
    1494:	ldr	x8, [sp, #24]
    1498:	stur	x8, [x29, #-192]
    149c:	str	x8, [sp, #240]
    14a0:	ldur	x9, [x29, #-16]
    14a4:	ldr	x0, [x9]
    14a8:	bl	0 <free>
    14ac:	ldur	x8, [x29, #-16]
    14b0:	ldr	x9, [sp, #24]
    14b4:	str	x9, [x8]
    14b8:	str	x9, [sp, #232]
    14bc:	b	17c0 <try_dlopen+0xb54>
    14c0:	ldur	x8, [x29, #-16]
    14c4:	ldr	x8, [x8]
    14c8:	cbz	x8, 14d0 <try_dlopen+0x864>
    14cc:	b	14e8 <try_dlopen+0x87c>
    14d0:	adrp	x0, 0 <lt__alloc_die_callback>
    14d4:	add	x0, x0, #0x0
    14d8:	ldr	x1, [sp, #128]
    14dc:	mov	w2, #0x589                 	// #1417
    14e0:	ldr	x3, [sp, #120]
    14e4:	bl	0 <__assert_fail>
    14e8:	ldur	x8, [x29, #-16]
    14ec:	ldr	x0, [x8]
    14f0:	ldur	x1, [x29, #-192]
    14f4:	bl	369c <load_deplibs>
    14f8:	cbnz	w0, 1548 <try_dlopen+0x8dc>
    14fc:	ldur	x8, [x29, #-16]
    1500:	ldr	x8, [x8]
    1504:	sub	x0, x29, #0x70
    1508:	stur	x8, [x29, #-112]
    150c:	ldur	x1, [x29, #-80]
    1510:	ldur	x2, [x29, #-184]
    1514:	ldur	x3, [x29, #-168]
    1518:	ldur	x4, [x29, #-176]
    151c:	ldur	w5, [x29, #-196]
    1520:	ldur	x6, [x29, #-40]
    1524:	bl	36c0 <find_module>
    1528:	cbz	w0, 1544 <try_dlopen+0x8d8>
    152c:	ldur	x8, [x29, #-16]
    1530:	ldr	x0, [x8]
    1534:	bl	1d44 <unload_deplibs>
    1538:	ldur	w9, [x29, #-100]
    153c:	add	w9, w9, #0x1
    1540:	stur	w9, [x29, #-100]
    1544:	b	1554 <try_dlopen+0x8e8>
    1548:	ldur	w8, [x29, #-100]
    154c:	add	w8, w8, #0x1
    1550:	stur	w8, [x29, #-100]
    1554:	ldur	x0, [x29, #-168]
    1558:	bl	0 <free>
    155c:	mov	x8, xzr
    1560:	stur	x8, [x29, #-168]
    1564:	str	x8, [sp, #224]
    1568:	ldur	x0, [x29, #-176]
    156c:	str	x8, [sp, #16]
    1570:	bl	0 <free>
    1574:	ldr	x8, [sp, #16]
    1578:	stur	x8, [x29, #-176]
    157c:	str	x8, [sp, #216]
    1580:	ldur	x0, [x29, #-184]
    1584:	bl	0 <free>
    1588:	ldr	x8, [sp, #16]
    158c:	stur	x8, [x29, #-184]
    1590:	str	x8, [sp, #208]
    1594:	ldur	x0, [x29, #-192]
    1598:	bl	0 <free>
    159c:	ldr	x8, [sp, #16]
    15a0:	stur	x8, [x29, #-192]
    15a4:	str	x8, [sp, #200]
    15a8:	ldur	w9, [x29, #-100]
    15ac:	cbz	w9, 15d0 <try_dlopen+0x964>
    15b0:	ldur	x8, [x29, #-16]
    15b4:	ldr	x0, [x8]
    15b8:	bl	0 <free>
    15bc:	ldur	x8, [x29, #-16]
    15c0:	mov	x9, xzr
    15c4:	str	x9, [x8]
    15c8:	str	x9, [sp, #192]
    15cc:	b	17c0 <try_dlopen+0xb54>
    15d0:	ldur	x8, [x29, #-16]
    15d4:	ldr	x8, [x8]
    15d8:	ldur	x9, [x29, #-112]
    15dc:	cmp	x8, x9
    15e0:	b.eq	15f0 <try_dlopen+0x984>  // b.none
    15e4:	ldur	x8, [x29, #-16]
    15e8:	ldr	x0, [x8]
    15ec:	bl	1d44 <unload_deplibs>
    15f0:	b	1700 <try_dlopen+0xa94>
    15f4:	mov	x0, #0x58                  	// #88
    15f8:	bl	0 <lt__zalloc>
    15fc:	ldur	x8, [x29, #-16]
    1600:	str	x0, [x8]
    1604:	ldur	x8, [x29, #-16]
    1608:	ldr	x8, [x8]
    160c:	cbnz	x8, 1620 <try_dlopen+0x9b4>
    1610:	ldur	w8, [x29, #-100]
    1614:	add	w8, w8, #0x1
    1618:	stur	w8, [x29, #-100]
    161c:	b	17c0 <try_dlopen+0xb54>
    1620:	ldur	x8, [x29, #-16]
    1624:	ldr	x8, [x8]
    1628:	stur	x8, [x29, #-112]
    162c:	ldur	x8, [x29, #-80]
    1630:	cbnz	x8, 16a8 <try_dlopen+0xa3c>
    1634:	ldr	x8, [sp, #104]
    1638:	ldr	x0, [x8]
    163c:	ldur	x1, [x29, #-72]
    1640:	ldur	x3, [x29, #-40]
    1644:	sub	x2, x29, #0x70
    1648:	bl	37f8 <find_handle>
    164c:	cbnz	x0, 16cc <try_dlopen+0xa60>
    1650:	adrp	x0, 0 <lt__alloc_die_callback>
    1654:	add	x0, x0, #0x0
    1658:	bl	0 <getenv>
    165c:	ldur	x1, [x29, #-72]
    1660:	ldur	x3, [x29, #-40]
    1664:	sub	x2, x29, #0x70
    1668:	bl	37f8 <find_handle>
    166c:	cbnz	x0, 16cc <try_dlopen+0xa60>
    1670:	adrp	x0, 0 <lt__alloc_die_callback>
    1674:	add	x0, x0, #0x0
    1678:	bl	0 <getenv>
    167c:	ldur	x1, [x29, #-72]
    1680:	ldur	x3, [x29, #-40]
    1684:	sub	x2, x29, #0x70
    1688:	bl	37f8 <find_handle>
    168c:	cbnz	x0, 16cc <try_dlopen+0xa60>
    1690:	ldur	x1, [x29, #-72]
    1694:	ldur	x3, [x29, #-40]
    1698:	ldr	x0, [sp, #96]
    169c:	sub	x2, x29, #0x70
    16a0:	bl	37f8 <find_handle>
    16a4:	cbnz	x0, 16cc <try_dlopen+0xa60>
    16a8:	ldur	x1, [x29, #-96]
    16ac:	ldur	x2, [x29, #-40]
    16b0:	sub	x0, x29, #0x70
    16b4:	mov	x8, xzr
    16b8:	mov	x3, x8
    16bc:	bl	2f9c <tryall_dlopen>
    16c0:	cbz	w0, 16cc <try_dlopen+0xa60>
    16c4:	mov	x8, xzr
    16c8:	stur	x8, [x29, #-112]
    16cc:	ldur	x8, [x29, #-112]
    16d0:	cbnz	x8, 1700 <try_dlopen+0xa94>
    16d4:	ldur	x8, [x29, #-16]
    16d8:	ldr	x0, [x8]
    16dc:	bl	0 <free>
    16e0:	ldur	x8, [x29, #-16]
    16e4:	mov	x9, xzr
    16e8:	str	x9, [x8]
    16ec:	str	x9, [sp, #184]
    16f0:	ldur	w10, [x29, #-100]
    16f4:	add	w10, w10, #0x1
    16f8:	stur	w10, [x29, #-100]
    16fc:	b	17c0 <try_dlopen+0xb54>
    1700:	ldur	x8, [x29, #-16]
    1704:	ldr	x8, [x8]
    1708:	ldur	x9, [x29, #-112]
    170c:	cmp	x8, x9
    1710:	b.eq	1734 <try_dlopen+0xac8>  // b.none
    1714:	ldur	x8, [x29, #-16]
    1718:	ldr	x0, [x8]
    171c:	bl	0 <free>
    1720:	ldur	x8, [x29, #-112]
    1724:	ldur	x9, [x29, #-16]
    1728:	str	x8, [x9]
    172c:	mov	x8, xzr
    1730:	stur	x8, [x29, #-112]
    1734:	ldur	x8, [x29, #-16]
    1738:	ldr	x8, [x8]
    173c:	ldr	w9, [x8, #32]
    1740:	cbnz	w9, 17b8 <try_dlopen+0xb4c>
    1744:	ldur	x8, [x29, #-16]
    1748:	ldr	x8, [x8]
    174c:	mov	w9, #0x1                   	// #1
    1750:	str	w9, [x8, #32]
    1754:	ldur	x8, [x29, #-16]
    1758:	ldr	x8, [x8]
    175c:	ldr	x8, [x8, #24]
    1760:	ldur	x10, [x29, #-88]
    1764:	cmp	x8, x10
    1768:	b.eq	1794 <try_dlopen+0xb28>  // b.none
    176c:	ldur	x8, [x29, #-16]
    1770:	ldr	x8, [x8]
    1774:	ldr	x0, [x8, #24]
    1778:	bl	0 <free>
    177c:	ldur	x8, [x29, #-88]
    1780:	ldur	x9, [x29, #-16]
    1784:	ldr	x9, [x9]
    1788:	str	x8, [x9, #24]
    178c:	mov	x8, xzr
    1790:	stur	x8, [x29, #-88]
    1794:	adrp	x8, 0 <lt__alloc_die_callback>
    1798:	add	x8, x8, #0x0
    179c:	ldr	x9, [x8]
    17a0:	ldur	x10, [x29, #-16]
    17a4:	ldr	x10, [x10]
    17a8:	str	x9, [x10]
    17ac:	ldur	x9, [x29, #-16]
    17b0:	ldr	x9, [x9]
    17b4:	str	x9, [x8]
    17b8:	ldur	x0, [x29, #-48]
    17bc:	bl	0 <lt__set_last_error>
    17c0:	ldur	x0, [x29, #-80]
    17c4:	bl	0 <free>
    17c8:	mov	x8, xzr
    17cc:	stur	x8, [x29, #-80]
    17d0:	str	x8, [sp, #176]
    17d4:	ldur	x0, [x29, #-96]
    17d8:	str	x8, [sp, #8]
    17dc:	bl	0 <free>
    17e0:	ldr	x8, [sp, #8]
    17e4:	stur	x8, [x29, #-96]
    17e8:	str	x8, [sp, #168]
    17ec:	ldur	x0, [x29, #-88]
    17f0:	bl	0 <free>
    17f4:	ldr	x8, [sp, #8]
    17f8:	stur	x8, [x29, #-88]
    17fc:	str	x8, [sp, #160]
    1800:	ldur	x9, [x29, #-64]
    1804:	cbnz	x9, 181c <try_dlopen+0xbb0>
    1808:	ldur	x0, [x29, #-72]
    180c:	bl	0 <free>
    1810:	mov	x8, xzr
    1814:	stur	x8, [x29, #-72]
    1818:	str	x8, [sp, #152]
    181c:	ldur	x0, [x29, #-64]
    1820:	bl	0 <free>
    1824:	mov	x8, xzr
    1828:	stur	x8, [x29, #-64]
    182c:	str	x8, [sp, #144]
    1830:	ldur	x0, [x29, #-56]
    1834:	str	x8, [sp]
    1838:	bl	0 <free>
    183c:	ldr	x8, [sp]
    1840:	stur	x8, [x29, #-56]
    1844:	str	x8, [sp, #136]
    1848:	ldur	w9, [x29, #-100]
    184c:	stur	w9, [x29, #-4]
    1850:	ldur	w0, [x29, #-4]
    1854:	add	sp, sp, #0x1e0
    1858:	ldr	x28, [sp, #16]
    185c:	ldp	x29, x30, [sp], #32
    1860:	ret

0000000000001864 <file_not_found>:
    1864:	sub	sp, sp, #0x30
    1868:	stp	x29, x30, [sp, #32]
    186c:	add	x29, sp, #0x20
    1870:	mov	x8, xzr
    1874:	mov	w0, #0x5                   	// #5
    1878:	str	x8, [sp, #16]
    187c:	str	w0, [sp, #12]
    1880:	bl	0 <lt__get_last_error>
    1884:	str	x0, [sp, #16]
    1888:	ldr	x8, [sp, #16]
    188c:	ldr	w0, [sp, #12]
    1890:	str	x8, [sp]
    1894:	bl	0 <lt__error_string>
    1898:	ldr	x8, [sp]
    189c:	cmp	x8, x0
    18a0:	b.ne	18b0 <file_not_found+0x4c>  // b.any
    18a4:	mov	w8, #0x1                   	// #1
    18a8:	stur	w8, [x29, #-4]
    18ac:	b	18b4 <file_not_found+0x50>
    18b0:	stur	wzr, [x29, #-4]
    18b4:	ldur	w0, [x29, #-4]
    18b8:	ldp	x29, x30, [sp, #32]
    18bc:	add	sp, sp, #0x30
    18c0:	ret

00000000000018c4 <lt_dlforeachfile>:
    18c4:	sub	sp, sp, #0x40
    18c8:	stp	x29, x30, [sp, #48]
    18cc:	add	x29, sp, #0x30
    18d0:	adrp	x8, 0 <lt__alloc_die_callback>
    18d4:	add	x8, x8, #0x0
    18d8:	sub	x9, x29, #0x10
    18dc:	stur	x0, [x29, #-8]
    18e0:	stur	x1, [x29, #-16]
    18e4:	str	x2, [sp, #24]
    18e8:	str	wzr, [sp, #20]
    18ec:	str	x9, [sp, #8]
    18f0:	ldur	x9, [x29, #-8]
    18f4:	str	x8, [sp]
    18f8:	cbz	x9, 1920 <lt_dlforeachfile+0x5c>
    18fc:	ldur	x0, [x29, #-8]
    1900:	ldr	x3, [sp, #8]
    1904:	ldr	x4, [sp, #24]
    1908:	mov	x8, xzr
    190c:	mov	x1, x8
    1910:	ldr	x2, [sp]
    1914:	bl	19f4 <foreach_dirinpath>
    1918:	str	w0, [sp, #20]
    191c:	b	19e4 <lt_dlforeachfile+0x120>
    1920:	adrp	x8, 0 <lt__alloc_die_callback>
    1924:	add	x8, x8, #0x0
    1928:	ldr	x0, [x8]
    192c:	ldr	x3, [sp, #8]
    1930:	ldr	x4, [sp, #24]
    1934:	mov	x8, xzr
    1938:	mov	x1, x8
    193c:	ldr	x2, [sp]
    1940:	bl	19f4 <foreach_dirinpath>
    1944:	str	w0, [sp, #20]
    1948:	ldr	w9, [sp, #20]
    194c:	cbnz	w9, 1978 <lt_dlforeachfile+0xb4>
    1950:	adrp	x0, 0 <lt__alloc_die_callback>
    1954:	add	x0, x0, #0x0
    1958:	bl	0 <getenv>
    195c:	ldr	x3, [sp, #8]
    1960:	ldr	x4, [sp, #24]
    1964:	mov	x8, xzr
    1968:	mov	x1, x8
    196c:	ldr	x2, [sp]
    1970:	bl	19f4 <foreach_dirinpath>
    1974:	str	w0, [sp, #20]
    1978:	ldr	w8, [sp, #20]
    197c:	cbnz	w8, 19a8 <lt_dlforeachfile+0xe4>
    1980:	adrp	x0, 0 <lt__alloc_die_callback>
    1984:	add	x0, x0, #0x0
    1988:	bl	0 <getenv>
    198c:	ldr	x3, [sp, #8]
    1990:	ldr	x4, [sp, #24]
    1994:	mov	x8, xzr
    1998:	mov	x1, x8
    199c:	ldr	x2, [sp]
    19a0:	bl	19f4 <foreach_dirinpath>
    19a4:	str	w0, [sp, #20]
    19a8:	ldr	w8, [sp, #20]
    19ac:	cbnz	w8, 19e4 <lt_dlforeachfile+0x120>
    19b0:	adrp	x8, 0 <lt__alloc_die_callback>
    19b4:	add	x8, x8, #0x0
    19b8:	ldrb	w9, [x8]
    19bc:	cbz	w9, 19e4 <lt_dlforeachfile+0x120>
    19c0:	ldr	x3, [sp, #8]
    19c4:	ldr	x4, [sp, #24]
    19c8:	adrp	x0, 0 <lt__alloc_die_callback>
    19cc:	add	x0, x0, #0x0
    19d0:	mov	x8, xzr
    19d4:	mov	x1, x8
    19d8:	ldr	x2, [sp]
    19dc:	bl	19f4 <foreach_dirinpath>
    19e0:	str	w0, [sp, #20]
    19e4:	ldr	w0, [sp, #20]
    19e8:	ldp	x29, x30, [sp, #48]
    19ec:	add	sp, sp, #0x40
    19f0:	ret

00000000000019f4 <foreach_dirinpath>:
    19f4:	sub	sp, sp, #0xc0
    19f8:	stp	x29, x30, [sp, #176]
    19fc:	add	x29, sp, #0xb0
    1a00:	stur	x0, [x29, #-8]
    1a04:	stur	x1, [x29, #-16]
    1a08:	stur	x2, [x29, #-24]
    1a0c:	stur	x3, [x29, #-32]
    1a10:	stur	x4, [x29, #-40]
    1a14:	stur	wzr, [x29, #-44]
    1a18:	stur	xzr, [x29, #-56]
    1a1c:	ldur	x8, [x29, #-16]
    1a20:	cbz	x8, 1a40 <foreach_dirinpath+0x4c>
    1a24:	ldur	x8, [x29, #-16]
    1a28:	ldrb	w9, [x8]
    1a2c:	cbz	w9, 1a40 <foreach_dirinpath+0x4c>
    1a30:	ldur	x0, [x29, #-16]
    1a34:	bl	0 <strlen>
    1a38:	str	x0, [sp, #24]
    1a3c:	b	1a48 <foreach_dirinpath+0x54>
    1a40:	mov	x8, xzr
    1a44:	str	x8, [sp, #24]
    1a48:	ldr	x8, [sp, #24]
    1a4c:	stur	x8, [x29, #-64]
    1a50:	mov	x8, xzr
    1a54:	stur	xzr, [x29, #-72]
    1a58:	stur	x8, [x29, #-80]
    1a5c:	str	x8, [sp, #88]
    1a60:	str	x8, [sp, #80]
    1a64:	ldur	x8, [x29, #-8]
    1a68:	cbz	x8, 1a78 <foreach_dirinpath+0x84>
    1a6c:	ldur	x8, [x29, #-8]
    1a70:	ldrb	w9, [x8]
    1a74:	cbnz	w9, 1a88 <foreach_dirinpath+0x94>
    1a78:	mov	w0, #0x5                   	// #5
    1a7c:	bl	0 <lt__error_string>
    1a80:	bl	0 <lt__set_last_error>
    1a84:	b	1c30 <foreach_dirinpath+0x23c>
    1a88:	ldur	x0, [x29, #-8]
    1a8c:	add	x1, sp, #0x50
    1a90:	bl	269c <canonicalize_path>
    1a94:	cbz	w0, 1a9c <foreach_dirinpath+0xa8>
    1a98:	b	1c30 <foreach_dirinpath+0x23c>
    1a9c:	ldr	x0, [sp, #80]
    1aa0:	sub	x1, x29, #0x50
    1aa4:	sub	x2, x29, #0x48
    1aa8:	bl	3de4 <argzize_path>
    1aac:	cbz	w0, 1ab4 <foreach_dirinpath+0xc0>
    1ab0:	b	1c30 <foreach_dirinpath+0x23c>
    1ab4:	mov	x8, xzr
    1ab8:	str	x8, [sp, #72]
    1abc:	ldur	x0, [x29, #-80]
    1ac0:	ldur	x1, [x29, #-72]
    1ac4:	ldr	x2, [sp, #72]
    1ac8:	bl	0 <argz_next>
    1acc:	str	x0, [sp, #72]
    1ad0:	cbz	x0, 1c30 <foreach_dirinpath+0x23c>
    1ad4:	ldr	x8, [sp, #72]
    1ad8:	cbz	x8, 1af8 <foreach_dirinpath+0x104>
    1adc:	ldr	x8, [sp, #72]
    1ae0:	ldrb	w9, [x8]
    1ae4:	cbz	w9, 1af8 <foreach_dirinpath+0x104>
    1ae8:	ldr	x0, [sp, #72]
    1aec:	bl	0 <strlen>
    1af0:	str	x0, [sp, #16]
    1af4:	b	1b00 <foreach_dirinpath+0x10c>
    1af8:	mov	x8, xzr
    1afc:	str	x8, [sp, #16]
    1b00:	ldr	x8, [sp, #16]
    1b04:	str	x8, [sp, #64]
    1b08:	ldr	x8, [sp, #64]
    1b0c:	add	x8, x8, #0x1
    1b10:	ldur	x9, [x29, #-64]
    1b14:	add	x8, x8, x9
    1b18:	ldur	x9, [x29, #-56]
    1b1c:	cmp	x8, x9
    1b20:	b.cc	1b70 <foreach_dirinpath+0x17c>  // b.lo, b.ul, b.last
    1b24:	ldr	x0, [sp, #88]
    1b28:	bl	0 <free>
    1b2c:	mov	x8, xzr
    1b30:	str	x8, [sp, #88]
    1b34:	str	x8, [sp, #56]
    1b38:	ldr	x8, [sp, #64]
    1b3c:	mov	x9, #0x1                   	// #1
    1b40:	add	x8, x8, #0x1
    1b44:	add	x8, x8, #0x1
    1b48:	ldur	x10, [x29, #-64]
    1b4c:	add	x8, x8, x10
    1b50:	stur	x8, [x29, #-56]
    1b54:	ldur	x8, [x29, #-56]
    1b58:	mul	x0, x8, x9
    1b5c:	bl	0 <lt__malloc>
    1b60:	str	x0, [sp, #88]
    1b64:	ldr	x8, [sp, #88]
    1b68:	cbnz	x8, 1b70 <foreach_dirinpath+0x17c>
    1b6c:	b	1c30 <foreach_dirinpath+0x23c>
    1b70:	ldur	x8, [x29, #-56]
    1b74:	ldr	x9, [sp, #64]
    1b78:	cmp	x8, x9
    1b7c:	b.ls	1b84 <foreach_dirinpath+0x190>  // b.plast
    1b80:	b	1ba4 <foreach_dirinpath+0x1b0>
    1b84:	adrp	x0, 0 <lt__alloc_die_callback>
    1b88:	add	x0, x0, #0x0
    1b8c:	adrp	x1, 0 <lt__alloc_die_callback>
    1b90:	add	x1, x1, #0x0
    1b94:	mov	w2, #0x2cd                 	// #717
    1b98:	adrp	x3, 0 <lt__alloc_die_callback>
    1b9c:	add	x3, x3, #0x0
    1ba0:	bl	0 <__assert_fail>
    1ba4:	ldr	x0, [sp, #88]
    1ba8:	ldr	x1, [sp, #72]
    1bac:	bl	0 <strcpy>
    1bb0:	ldur	x8, [x29, #-16]
    1bb4:	cbz	x8, 1c0c <foreach_dirinpath+0x218>
    1bb8:	ldur	x8, [x29, #-16]
    1bbc:	ldrb	w9, [x8]
    1bc0:	cbz	w9, 1c0c <foreach_dirinpath+0x218>
    1bc4:	ldr	x8, [sp, #88]
    1bc8:	ldr	x9, [sp, #64]
    1bcc:	subs	x9, x9, #0x1
    1bd0:	ldrb	w10, [x8, x9]
    1bd4:	cmp	w10, #0x2f
    1bd8:	b.eq	1bf8 <foreach_dirinpath+0x204>  // b.none
    1bdc:	ldr	x8, [sp, #88]
    1be0:	ldr	x9, [sp, #64]
    1be4:	add	x10, x9, #0x1
    1be8:	str	x10, [sp, #64]
    1bec:	add	x8, x8, x9
    1bf0:	mov	w11, #0x2f                  	// #47
    1bf4:	strb	w11, [x8]
    1bf8:	ldr	x8, [sp, #88]
    1bfc:	ldr	x9, [sp, #64]
    1c00:	add	x0, x8, x9
    1c04:	ldur	x1, [x29, #-16]
    1c08:	bl	0 <strcpy>
    1c0c:	ldur	x8, [x29, #-24]
    1c10:	ldr	x0, [sp, #88]
    1c14:	ldur	x1, [x29, #-32]
    1c18:	ldur	x2, [x29, #-40]
    1c1c:	blr	x8
    1c20:	stur	w0, [x29, #-44]
    1c24:	cbz	w0, 1c2c <foreach_dirinpath+0x238>
    1c28:	b	1c30 <foreach_dirinpath+0x23c>
    1c2c:	b	1abc <foreach_dirinpath+0xc8>
    1c30:	ldur	x0, [x29, #-80]
    1c34:	bl	0 <free>
    1c38:	mov	x8, xzr
    1c3c:	stur	x8, [x29, #-80]
    1c40:	str	x8, [sp, #48]
    1c44:	ldr	x0, [sp, #80]
    1c48:	str	x8, [sp, #8]
    1c4c:	bl	0 <free>
    1c50:	ldr	x8, [sp, #8]
    1c54:	str	x8, [sp, #80]
    1c58:	str	x8, [sp, #40]
    1c5c:	ldr	x0, [sp, #88]
    1c60:	bl	0 <free>
    1c64:	ldr	x8, [sp, #8]
    1c68:	str	x8, [sp, #88]
    1c6c:	str	x8, [sp, #32]
    1c70:	ldur	w0, [x29, #-44]
    1c74:	ldp	x29, x30, [sp, #176]
    1c78:	add	sp, sp, #0xc0
    1c7c:	ret

0000000000001c80 <foreachfile_callback>:
    1c80:	sub	sp, sp, #0x60
    1c84:	stp	x29, x30, [sp, #80]
    1c88:	add	x29, sp, #0x50
    1c8c:	mov	x8, xzr
    1c90:	add	x9, sp, #0x20
    1c94:	add	x10, sp, #0x18
    1c98:	stur	x0, [x29, #-8]
    1c9c:	stur	x1, [x29, #-16]
    1ca0:	stur	x2, [x29, #-24]
    1ca4:	ldur	x11, [x29, #-16]
    1ca8:	ldr	x11, [x11]
    1cac:	stur	x11, [x29, #-32]
    1cb0:	stur	wzr, [x29, #-36]
    1cb4:	str	x8, [sp, #32]
    1cb8:	str	xzr, [sp, #24]
    1cbc:	ldur	x0, [x29, #-8]
    1cc0:	mov	x1, x9
    1cc4:	mov	x2, x10
    1cc8:	bl	3ef4 <list_files_by_dir>
    1ccc:	cbz	w0, 1cd4 <foreachfile_callback+0x54>
    1cd0:	b	1d20 <foreachfile_callback+0xa0>
    1cd4:	ldr	x8, [sp, #32]
    1cd8:	cbnz	x8, 1ce0 <foreachfile_callback+0x60>
    1cdc:	b	1d20 <foreachfile_callback+0xa0>
    1ce0:	mov	x8, xzr
    1ce4:	str	x8, [sp, #16]
    1ce8:	ldr	x0, [sp, #32]
    1cec:	ldr	x1, [sp, #24]
    1cf0:	ldr	x2, [sp, #16]
    1cf4:	bl	0 <argz_next>
    1cf8:	str	x0, [sp, #16]
    1cfc:	cbz	x0, 1d20 <foreachfile_callback+0xa0>
    1d00:	ldur	x8, [x29, #-32]
    1d04:	ldr	x0, [sp, #16]
    1d08:	ldur	x1, [x29, #-24]
    1d0c:	blr	x8
    1d10:	stur	w0, [x29, #-36]
    1d14:	cbz	w0, 1d1c <foreachfile_callback+0x9c>
    1d18:	b	1d20 <foreachfile_callback+0xa0>
    1d1c:	b	1ce8 <foreachfile_callback+0x68>
    1d20:	ldr	x0, [sp, #32]
    1d24:	bl	0 <free>
    1d28:	mov	x8, xzr
    1d2c:	str	x8, [sp, #32]
    1d30:	str	x8, [sp, #8]
    1d34:	ldur	w0, [x29, #-36]
    1d38:	ldp	x29, x30, [sp, #80]
    1d3c:	add	sp, sp, #0x60
    1d40:	ret

0000000000001d44 <unload_deplibs>:
    1d44:	sub	sp, sp, #0x30
    1d48:	stp	x29, x30, [sp, #32]
    1d4c:	add	x29, sp, #0x20
    1d50:	stur	x0, [x29, #-8]
    1d54:	str	wzr, [sp, #16]
    1d58:	ldur	x8, [x29, #-8]
    1d5c:	str	x8, [sp, #8]
    1d60:	ldr	x8, [sp, #8]
    1d64:	ldr	w9, [x8, #40]
    1d68:	cbz	w9, 1e08 <unload_deplibs+0xc4>
    1d6c:	stur	wzr, [x29, #-12]
    1d70:	ldur	w8, [x29, #-12]
    1d74:	ldr	x9, [sp, #8]
    1d78:	ldr	w10, [x9, #40]
    1d7c:	cmp	w8, w10
    1d80:	b.ge	1dec <unload_deplibs+0xa8>  // b.tcont
    1d84:	ldr	x8, [sp, #8]
    1d88:	ldr	x8, [x8, #48]
    1d8c:	ldursw	x9, [x29, #-12]
    1d90:	mov	x10, #0x8                   	// #8
    1d94:	mul	x9, x10, x9
    1d98:	add	x8, x8, x9
    1d9c:	ldr	x8, [x8]
    1da0:	ldrb	w11, [x8, #36]
    1da4:	and	w11, w11, #0x1
    1da8:	and	w11, w11, #0xff
    1dac:	cbnz	w11, 1ddc <unload_deplibs+0x98>
    1db0:	ldr	x8, [sp, #8]
    1db4:	ldr	x8, [x8, #48]
    1db8:	ldursw	x9, [x29, #-12]
    1dbc:	mov	x10, #0x8                   	// #8
    1dc0:	mul	x9, x10, x9
    1dc4:	add	x8, x8, x9
    1dc8:	ldr	x0, [x8]
    1dcc:	bl	488 <lt_dlclose>
    1dd0:	ldr	w11, [sp, #16]
    1dd4:	add	w11, w11, w0
    1dd8:	str	w11, [sp, #16]
    1ddc:	ldur	w8, [x29, #-12]
    1de0:	add	w8, w8, #0x1
    1de4:	stur	w8, [x29, #-12]
    1de8:	b	1d70 <unload_deplibs+0x2c>
    1dec:	ldr	x8, [sp, #8]
    1df0:	ldr	x0, [x8, #48]
    1df4:	bl	0 <free>
    1df8:	ldr	x8, [sp, #8]
    1dfc:	mov	x9, xzr
    1e00:	str	x9, [x8, #48]
    1e04:	str	x9, [sp]
    1e08:	ldr	w0, [sp, #16]
    1e0c:	ldp	x29, x30, [sp, #32]
    1e10:	add	sp, sp, #0x30
    1e14:	ret

0000000000001e18 <lt_dlsym>:
    1e18:	sub	sp, sp, #0x120
    1e1c:	stp	x29, x30, [sp, #256]
    1e20:	str	x28, [sp, #272]
    1e24:	add	x29, sp, #0x100
    1e28:	stur	x0, [x29, #-16]
    1e2c:	stur	x1, [x29, #-24]
    1e30:	ldur	x8, [x29, #-16]
    1e34:	cbnz	x8, 1e50 <lt_dlsym+0x38>
    1e38:	mov	w0, #0xc                   	// #12
    1e3c:	bl	0 <lt__error_string>
    1e40:	bl	0 <lt__set_last_error>
    1e44:	mov	x8, xzr
    1e48:	stur	x8, [x29, #-8]
    1e4c:	b	212c <lt_dlsym+0x314>
    1e50:	ldur	x8, [x29, #-16]
    1e54:	str	x8, [sp, #64]
    1e58:	ldur	x8, [x29, #-24]
    1e5c:	cbnz	x8, 1e78 <lt_dlsym+0x60>
    1e60:	mov	w0, #0xa                   	// #10
    1e64:	bl	0 <lt__error_string>
    1e68:	bl	0 <lt__set_last_error>
    1e6c:	mov	x8, xzr
    1e70:	stur	x8, [x29, #-8]
    1e74:	b	212c <lt_dlsym+0x314>
    1e78:	ldur	x8, [x29, #-24]
    1e7c:	cbz	x8, 1e9c <lt_dlsym+0x84>
    1e80:	ldur	x8, [x29, #-24]
    1e84:	ldrb	w9, [x8]
    1e88:	cbz	w9, 1e9c <lt_dlsym+0x84>
    1e8c:	ldur	x0, [x29, #-24]
    1e90:	bl	0 <strlen>
    1e94:	str	x0, [sp, #32]
    1e98:	b	1ea4 <lt_dlsym+0x8c>
    1e9c:	mov	x8, xzr
    1ea0:	str	x8, [sp, #32]
    1ea4:	ldr	x8, [sp, #32]
    1ea8:	ldr	x9, [sp, #64]
    1eac:	ldr	x9, [x9, #8]
    1eb0:	ldr	x9, [x9, #8]
    1eb4:	str	x8, [sp, #24]
    1eb8:	cbz	x9, 1ee8 <lt_dlsym+0xd0>
    1ebc:	ldr	x8, [sp, #64]
    1ec0:	ldr	x8, [x8, #8]
    1ec4:	ldr	x8, [x8, #8]
    1ec8:	ldrb	w9, [x8]
    1ecc:	cbz	w9, 1ee8 <lt_dlsym+0xd0>
    1ed0:	ldr	x8, [sp, #64]
    1ed4:	ldr	x8, [x8, #8]
    1ed8:	ldr	x0, [x8, #8]
    1edc:	bl	0 <strlen>
    1ee0:	str	x0, [sp, #16]
    1ee4:	b	1ef0 <lt_dlsym+0xd8>
    1ee8:	mov	x8, xzr
    1eec:	str	x8, [sp, #16]
    1ef0:	ldr	x8, [sp, #16]
    1ef4:	ldr	x9, [sp, #24]
    1ef8:	add	x8, x9, x8
    1efc:	ldr	x10, [sp, #64]
    1f00:	ldr	x10, [x10, #24]
    1f04:	str	x8, [sp, #8]
    1f08:	cbz	x10, 1f30 <lt_dlsym+0x118>
    1f0c:	ldr	x8, [sp, #64]
    1f10:	ldr	x8, [x8, #24]
    1f14:	ldrb	w9, [x8]
    1f18:	cbz	w9, 1f30 <lt_dlsym+0x118>
    1f1c:	ldr	x8, [sp, #64]
    1f20:	ldr	x0, [x8, #24]
    1f24:	bl	0 <strlen>
    1f28:	str	x0, [sp]
    1f2c:	b	1f38 <lt_dlsym+0x120>
    1f30:	mov	x8, xzr
    1f34:	str	x8, [sp]
    1f38:	ldr	x8, [sp]
    1f3c:	ldr	x9, [sp, #8]
    1f40:	add	x8, x9, x8
    1f44:	stur	x8, [x29, #-32]
    1f48:	ldur	x8, [x29, #-32]
    1f4c:	add	x8, x8, #0x5
    1f50:	cmp	x8, #0x80
    1f54:	b.cs	1f64 <lt_dlsym+0x14c>  // b.hs, b.nlast
    1f58:	add	x8, sp, #0x60
    1f5c:	str	x8, [sp, #88]
    1f60:	b	1fa0 <lt_dlsym+0x188>
    1f64:	ldur	x8, [x29, #-32]
    1f68:	add	x8, x8, #0x5
    1f6c:	mov	x9, #0x1                   	// #1
    1f70:	add	x8, x8, #0x1
    1f74:	mul	x0, x8, x9
    1f78:	bl	0 <lt__malloc>
    1f7c:	str	x0, [sp, #88]
    1f80:	ldr	x8, [sp, #88]
    1f84:	cbnz	x8, 1fa0 <lt_dlsym+0x188>
    1f88:	mov	w0, #0xd                   	// #13
    1f8c:	bl	0 <lt__error_string>
    1f90:	bl	0 <lt__set_last_error>
    1f94:	mov	x8, xzr
    1f98:	stur	x8, [x29, #-8]
    1f9c:	b	212c <lt_dlsym+0x314>
    1fa0:	ldr	x8, [sp, #64]
    1fa4:	ldr	x8, [x8, #8]
    1fa8:	ldr	x8, [x8, #56]
    1fac:	str	x8, [sp, #72]
    1fb0:	ldr	x8, [sp, #64]
    1fb4:	ldr	x8, [x8, #24]
    1fb8:	cbz	x8, 2098 <lt_dlsym+0x280>
    1fbc:	bl	0 <lt__get_last_error>
    1fc0:	str	x0, [sp, #56]
    1fc4:	ldr	x8, [sp, #64]
    1fc8:	ldr	x8, [x8, #8]
    1fcc:	ldr	x8, [x8, #8]
    1fd0:	cbz	x8, 2000 <lt_dlsym+0x1e8>
    1fd4:	ldr	x0, [sp, #88]
    1fd8:	ldr	x8, [sp, #64]
    1fdc:	ldr	x8, [x8, #8]
    1fe0:	ldr	x1, [x8, #8]
    1fe4:	bl	0 <strcpy>
    1fe8:	ldr	x8, [sp, #88]
    1fec:	ldr	x9, [sp, #64]
    1ff0:	ldr	x1, [x9, #24]
    1ff4:	mov	x0, x8
    1ff8:	bl	0 <strcat>
    1ffc:	b	2010 <lt_dlsym+0x1f8>
    2000:	ldr	x0, [sp, #88]
    2004:	ldr	x8, [sp, #64]
    2008:	ldr	x1, [x8, #24]
    200c:	bl	0 <strcpy>
    2010:	ldr	x0, [sp, #88]
    2014:	adrp	x1, 0 <lt__alloc_die_callback>
    2018:	add	x1, x1, #0x0
    201c:	bl	0 <strcat>
    2020:	ldr	x8, [sp, #88]
    2024:	ldur	x1, [x29, #-24]
    2028:	mov	x0, x8
    202c:	bl	0 <strcat>
    2030:	ldr	x8, [sp, #64]
    2034:	ldr	x8, [x8, #8]
    2038:	ldr	x8, [x8, #32]
    203c:	ldr	x9, [sp, #72]
    2040:	ldr	x10, [sp, #64]
    2044:	ldr	x1, [x10, #56]
    2048:	ldr	x2, [sp, #88]
    204c:	mov	x0, x9
    2050:	blr	x8
    2054:	str	x0, [sp, #80]
    2058:	ldr	x8, [sp, #80]
    205c:	cbz	x8, 2090 <lt_dlsym+0x278>
    2060:	ldr	x8, [sp, #88]
    2064:	add	x9, sp, #0x60
    2068:	cmp	x8, x9
    206c:	b.eq	2084 <lt_dlsym+0x26c>  // b.none
    2070:	ldr	x0, [sp, #88]
    2074:	bl	0 <free>
    2078:	mov	x8, xzr
    207c:	str	x8, [sp, #88]
    2080:	str	x8, [sp, #48]
    2084:	ldr	x8, [sp, #80]
    2088:	stur	x8, [x29, #-8]
    208c:	b	212c <lt_dlsym+0x314>
    2090:	ldr	x0, [sp, #56]
    2094:	bl	0 <lt__set_last_error>
    2098:	ldr	x8, [sp, #64]
    209c:	ldr	x8, [x8, #8]
    20a0:	ldr	x8, [x8, #8]
    20a4:	cbz	x8, 20d0 <lt_dlsym+0x2b8>
    20a8:	ldr	x0, [sp, #88]
    20ac:	ldr	x8, [sp, #64]
    20b0:	ldr	x8, [x8, #8]
    20b4:	ldr	x1, [x8, #8]
    20b8:	bl	0 <strcpy>
    20bc:	ldr	x8, [sp, #88]
    20c0:	ldur	x1, [x29, #-24]
    20c4:	mov	x0, x8
    20c8:	bl	0 <strcat>
    20cc:	b	20dc <lt_dlsym+0x2c4>
    20d0:	ldr	x0, [sp, #88]
    20d4:	ldur	x1, [x29, #-24]
    20d8:	bl	0 <strcpy>
    20dc:	ldr	x8, [sp, #64]
    20e0:	ldr	x8, [x8, #8]
    20e4:	ldr	x8, [x8, #32]
    20e8:	ldr	x0, [sp, #72]
    20ec:	ldr	x9, [sp, #64]
    20f0:	ldr	x1, [x9, #56]
    20f4:	ldr	x2, [sp, #88]
    20f8:	blr	x8
    20fc:	str	x0, [sp, #80]
    2100:	ldr	x8, [sp, #88]
    2104:	add	x9, sp, #0x60
    2108:	cmp	x8, x9
    210c:	b.eq	2124 <lt_dlsym+0x30c>  // b.none
    2110:	ldr	x0, [sp, #88]
    2114:	bl	0 <free>
    2118:	mov	x8, xzr
    211c:	str	x8, [sp, #88]
    2120:	str	x8, [sp, #40]
    2124:	ldr	x8, [sp, #80]
    2128:	stur	x8, [x29, #-8]
    212c:	ldur	x0, [x29, #-8]
    2130:	ldr	x28, [sp, #272]
    2134:	ldp	x29, x30, [sp, #256]
    2138:	add	sp, sp, #0x120
    213c:	ret

0000000000002140 <lt_dlerror>:
    2140:	sub	sp, sp, #0x20
    2144:	stp	x29, x30, [sp, #16]
    2148:	add	x29, sp, #0x10
    214c:	mov	x8, xzr
    2150:	str	x8, [sp]
    2154:	bl	0 <lt__get_last_error>
    2158:	str	x0, [sp, #8]
    215c:	ldr	x0, [sp]
    2160:	bl	0 <lt__set_last_error>
    2164:	ldr	x8, [sp, #8]
    2168:	mov	x0, x8
    216c:	ldp	x29, x30, [sp, #16]
    2170:	add	sp, sp, #0x20
    2174:	ret

0000000000002178 <lt_dladdsearchdir>:
    2178:	sub	sp, sp, #0x20
    217c:	stp	x29, x30, [sp, #16]
    2180:	add	x29, sp, #0x10
    2184:	str	x0, [sp, #8]
    2188:	str	wzr, [sp, #4]
    218c:	ldr	x8, [sp, #8]
    2190:	cbz	x8, 21c8 <lt_dladdsearchdir+0x50>
    2194:	ldr	x8, [sp, #8]
    2198:	ldrb	w9, [x8]
    219c:	cbz	w9, 21c8 <lt_dladdsearchdir+0x50>
    21a0:	ldr	x2, [sp, #8]
    21a4:	adrp	x0, 0 <lt__alloc_die_callback>
    21a8:	add	x0, x0, #0x0
    21ac:	mov	x8, xzr
    21b0:	mov	x1, x8
    21b4:	bl	21d8 <lt_dlpath_insertdir>
    21b8:	cbz	w0, 21c8 <lt_dladdsearchdir+0x50>
    21bc:	ldr	w8, [sp, #4]
    21c0:	add	w8, w8, #0x1
    21c4:	str	w8, [sp, #4]
    21c8:	ldr	w0, [sp, #4]
    21cc:	ldp	x29, x30, [sp, #16]
    21d0:	add	sp, sp, #0x20
    21d4:	ret

00000000000021d8 <lt_dlpath_insertdir>:
    21d8:	sub	sp, sp, #0x80
    21dc:	stp	x29, x30, [sp, #112]
    21e0:	add	x29, sp, #0x70
    21e4:	mov	x8, xzr
    21e8:	adrp	x9, 0 <lt__alloc_die_callback>
    21ec:	add	x9, x9, #0x0
    21f0:	adrp	x10, 0 <lt__alloc_die_callback>
    21f4:	add	x10, x10, #0x0
    21f8:	stur	x0, [x29, #-8]
    21fc:	stur	x1, [x29, #-16]
    2200:	stur	x2, [x29, #-24]
    2204:	stur	wzr, [x29, #-28]
    2208:	stur	x8, [x29, #-40]
    220c:	stur	x8, [x29, #-48]
    2210:	str	xzr, [sp, #56]
    2214:	ldur	x8, [x29, #-8]
    2218:	str	x9, [sp, #32]
    221c:	str	x10, [sp, #24]
    2220:	cbz	x8, 2228 <lt_dlpath_insertdir+0x50>
    2224:	b	2240 <lt_dlpath_insertdir+0x68>
    2228:	adrp	x0, 0 <lt__alloc_die_callback>
    222c:	add	x0, x0, #0x0
    2230:	ldr	x1, [sp, #32]
    2234:	mov	w2, #0x84e                 	// #2126
    2238:	ldr	x3, [sp, #24]
    223c:	bl	0 <__assert_fail>
    2240:	ldur	x8, [x29, #-24]
    2244:	cbz	x8, 2258 <lt_dlpath_insertdir+0x80>
    2248:	ldur	x8, [x29, #-24]
    224c:	ldrb	w9, [x8]
    2250:	cbz	w9, 2258 <lt_dlpath_insertdir+0x80>
    2254:	b	2270 <lt_dlpath_insertdir+0x98>
    2258:	adrp	x0, 0 <lt__alloc_die_callback>
    225c:	add	x0, x0, #0x0
    2260:	ldr	x1, [sp, #32]
    2264:	mov	w2, #0x84f                 	// #2127
    2268:	ldr	x3, [sp, #24]
    226c:	bl	0 <__assert_fail>
    2270:	ldur	x0, [x29, #-24]
    2274:	sub	x1, x29, #0x28
    2278:	bl	269c <canonicalize_path>
    227c:	cbz	w0, 2290 <lt_dlpath_insertdir+0xb8>
    2280:	ldur	w8, [x29, #-28]
    2284:	add	w8, w8, #0x1
    2288:	stur	w8, [x29, #-28]
    228c:	b	24a0 <lt_dlpath_insertdir+0x2c8>
    2290:	ldur	x8, [x29, #-40]
    2294:	cbz	x8, 22a8 <lt_dlpath_insertdir+0xd0>
    2298:	ldur	x8, [x29, #-40]
    229c:	ldrb	w9, [x8]
    22a0:	cbz	w9, 22a8 <lt_dlpath_insertdir+0xd0>
    22a4:	b	22c0 <lt_dlpath_insertdir+0xe8>
    22a8:	adrp	x0, 0 <lt__alloc_die_callback>
    22ac:	add	x0, x0, #0x0
    22b0:	ldr	x1, [sp, #32]
    22b4:	mov	w2, #0x857                 	// #2135
    22b8:	ldr	x3, [sp, #24]
    22bc:	bl	0 <__assert_fail>
    22c0:	ldur	x8, [x29, #-8]
    22c4:	ldr	x8, [x8]
    22c8:	cbnz	x8, 2340 <lt_dlpath_insertdir+0x168>
    22cc:	ldur	x8, [x29, #-16]
    22d0:	cbnz	x8, 22d8 <lt_dlpath_insertdir+0x100>
    22d4:	b	22f0 <lt_dlpath_insertdir+0x118>
    22d8:	adrp	x0, 0 <lt__alloc_die_callback>
    22dc:	add	x0, x0, #0x0
    22e0:	ldr	x1, [sp, #32]
    22e4:	mov	w2, #0x85c                 	// #2140
    22e8:	ldr	x3, [sp, #24]
    22ec:	bl	0 <__assert_fail>
    22f0:	ldur	x8, [x29, #-24]
    22f4:	cbz	x8, 22fc <lt_dlpath_insertdir+0x124>
    22f8:	b	2314 <lt_dlpath_insertdir+0x13c>
    22fc:	adrp	x0, 0 <lt__alloc_die_callback>
    2300:	add	x0, x0, #0x0
    2304:	ldr	x1, [sp, #32]
    2308:	mov	w2, #0x85d                 	// #2141
    230c:	ldr	x3, [sp, #24]
    2310:	bl	0 <__assert_fail>
    2314:	ldur	x0, [x29, #-24]
    2318:	bl	0 <lt__strdup>
    231c:	ldur	x8, [x29, #-8]
    2320:	str	x0, [x8]
    2324:	ldur	x8, [x29, #-8]
    2328:	ldr	x8, [x8]
    232c:	cbnz	x8, 233c <lt_dlpath_insertdir+0x164>
    2330:	ldur	w8, [x29, #-28]
    2334:	add	w8, w8, #0x1
    2338:	stur	w8, [x29, #-28]
    233c:	b	24a0 <lt_dlpath_insertdir+0x2c8>
    2340:	ldur	x8, [x29, #-8]
    2344:	cbz	x8, 2358 <lt_dlpath_insertdir+0x180>
    2348:	ldur	x8, [x29, #-8]
    234c:	ldr	x8, [x8]
    2350:	cbz	x8, 2358 <lt_dlpath_insertdir+0x180>
    2354:	b	2370 <lt_dlpath_insertdir+0x198>
    2358:	adrp	x0, 0 <lt__alloc_die_callback>
    235c:	add	x0, x0, #0x0
    2360:	ldr	x1, [sp, #32]
    2364:	mov	w2, #0x866                 	// #2150
    2368:	ldr	x3, [sp, #24]
    236c:	bl	0 <__assert_fail>
    2370:	ldur	x8, [x29, #-8]
    2374:	ldr	x0, [x8]
    2378:	sub	x1, x29, #0x30
    237c:	add	x2, sp, #0x38
    2380:	bl	3de4 <argzize_path>
    2384:	cbz	w0, 2398 <lt_dlpath_insertdir+0x1c0>
    2388:	ldur	w8, [x29, #-28]
    238c:	add	w8, w8, #0x1
    2390:	stur	w8, [x29, #-28]
    2394:	b	24a0 <lt_dlpath_insertdir+0x2c8>
    2398:	ldur	x8, [x29, #-16]
    239c:	cbz	x8, 2434 <lt_dlpath_insertdir+0x25c>
    23a0:	ldur	x8, [x29, #-8]
    23a4:	ldr	x8, [x8]
    23a8:	ldur	x9, [x29, #-16]
    23ac:	cmp	x8, x9
    23b0:	b.hi	23b8 <lt_dlpath_insertdir+0x1e0>  // b.pmore
    23b4:	b	23d0 <lt_dlpath_insertdir+0x1f8>
    23b8:	adrp	x0, 0 <lt__alloc_die_callback>
    23bc:	add	x0, x0, #0x0
    23c0:	ldr	x1, [sp, #32]
    23c4:	mov	w2, #0x875                 	// #2165
    23c8:	ldr	x3, [sp, #24]
    23cc:	bl	0 <__assert_fail>
    23d0:	ldur	x8, [x29, #-16]
    23d4:	ldur	x9, [x29, #-8]
    23d8:	ldr	x9, [x9]
    23dc:	subs	x8, x8, x9
    23e0:	ldur	x9, [x29, #-8]
    23e4:	ldr	x0, [x9]
    23e8:	str	w8, [sp, #20]
    23ec:	bl	0 <strlen>
    23f0:	ldr	w8, [sp, #20]
    23f4:	cmp	w8, w0
    23f8:	b.gt	2400 <lt_dlpath_insertdir+0x228>
    23fc:	b	2418 <lt_dlpath_insertdir+0x240>
    2400:	adrp	x0, 0 <lt__alloc_die_callback>
    2404:	add	x0, x0, #0x0
    2408:	ldr	x1, [sp, #32]
    240c:	mov	w2, #0x876                 	// #2166
    2410:	ldr	x3, [sp, #24]
    2414:	bl	0 <__assert_fail>
    2418:	ldur	x8, [x29, #-16]
    241c:	ldur	x9, [x29, #-8]
    2420:	ldr	x9, [x9]
    2424:	subs	x8, x8, x9
    2428:	ldur	x9, [x29, #-48]
    242c:	add	x8, x9, x8
    2430:	stur	x8, [x29, #-16]
    2434:	ldur	x2, [x29, #-16]
    2438:	ldur	x3, [x29, #-24]
    243c:	sub	x0, x29, #0x30
    2440:	add	x1, sp, #0x38
    2444:	bl	44cc <lt_argz_insert>
    2448:	cbz	w0, 245c <lt_dlpath_insertdir+0x284>
    244c:	ldur	w8, [x29, #-28]
    2450:	add	w8, w8, #0x1
    2454:	stur	w8, [x29, #-28]
    2458:	b	24a0 <lt_dlpath_insertdir+0x2c8>
    245c:	ldur	x0, [x29, #-48]
    2460:	ldr	x1, [sp, #56]
    2464:	mov	w2, #0x3a                  	// #58
    2468:	bl	0 <argz_stringify>
    246c:	ldur	x8, [x29, #-8]
    2470:	ldr	x8, [x8]
    2474:	ldur	x9, [x29, #-48]
    2478:	cmp	x8, x9
    247c:	b.eq	24a0 <lt_dlpath_insertdir+0x2c8>  // b.none
    2480:	ldur	x8, [x29, #-8]
    2484:	ldr	x0, [x8]
    2488:	bl	0 <free>
    248c:	ldur	x8, [x29, #-48]
    2490:	ldur	x9, [x29, #-8]
    2494:	str	x8, [x9]
    2498:	mov	x8, xzr
    249c:	stur	x8, [x29, #-48]
    24a0:	ldur	x0, [x29, #-48]
    24a4:	bl	0 <free>
    24a8:	mov	x8, xzr
    24ac:	stur	x8, [x29, #-48]
    24b0:	str	x8, [sp, #48]
    24b4:	ldur	x0, [x29, #-40]
    24b8:	str	x8, [sp, #8]
    24bc:	bl	0 <free>
    24c0:	ldr	x8, [sp, #8]
    24c4:	stur	x8, [x29, #-40]
    24c8:	str	x8, [sp, #40]
    24cc:	ldur	w0, [x29, #-28]
    24d0:	ldp	x29, x30, [sp, #112]
    24d4:	add	sp, sp, #0x80
    24d8:	ret

00000000000024dc <lt_dlinsertsearchdir>:
    24dc:	sub	sp, sp, #0x50
    24e0:	stp	x29, x30, [sp, #64]
    24e4:	add	x29, sp, #0x40
    24e8:	adrp	x8, 0 <lt__alloc_die_callback>
    24ec:	add	x8, x8, #0x0
    24f0:	stur	x0, [x29, #-16]
    24f4:	stur	x1, [x29, #-24]
    24f8:	stur	wzr, [x29, #-28]
    24fc:	ldur	x9, [x29, #-16]
    2500:	str	x8, [sp, #24]
    2504:	cbz	x9, 2594 <lt_dlinsertsearchdir+0xb8>
    2508:	ldur	x8, [x29, #-16]
    250c:	ldr	x9, [sp, #24]
    2510:	ldr	x10, [x9]
    2514:	cmp	x8, x10
    2518:	b.cc	257c <lt_dlinsertsearchdir+0xa0>  // b.lo, b.ul, b.last
    251c:	ldur	x8, [x29, #-16]
    2520:	ldr	x9, [sp, #24]
    2524:	ldr	x10, [x9]
    2528:	ldr	x11, [x9]
    252c:	str	x8, [sp, #16]
    2530:	str	x10, [sp, #8]
    2534:	cbz	x11, 255c <lt_dlinsertsearchdir+0x80>
    2538:	ldr	x8, [sp, #24]
    253c:	ldr	x9, [x8]
    2540:	ldrb	w10, [x9]
    2544:	cbz	w10, 255c <lt_dlinsertsearchdir+0x80>
    2548:	ldr	x8, [sp, #24]
    254c:	ldr	x0, [x8]
    2550:	bl	0 <strlen>
    2554:	str	x0, [sp]
    2558:	b	2564 <lt_dlinsertsearchdir+0x88>
    255c:	mov	x8, xzr
    2560:	str	x8, [sp]
    2564:	ldr	x8, [sp]
    2568:	ldr	x9, [sp, #8]
    256c:	add	x8, x9, x8
    2570:	ldr	x10, [sp, #16]
    2574:	cmp	x10, x8
    2578:	b.cc	2594 <lt_dlinsertsearchdir+0xb8>  // b.lo, b.ul, b.last
    257c:	mov	w0, #0x12                  	// #18
    2580:	bl	0 <lt__error_string>
    2584:	bl	0 <lt__set_last_error>
    2588:	mov	w8, #0x1                   	// #1
    258c:	stur	w8, [x29, #-4]
    2590:	b	25d0 <lt_dlinsertsearchdir+0xf4>
    2594:	ldur	x8, [x29, #-24]
    2598:	cbz	x8, 25c8 <lt_dlinsertsearchdir+0xec>
    259c:	ldur	x8, [x29, #-24]
    25a0:	ldrb	w9, [x8]
    25a4:	cbz	w9, 25c8 <lt_dlinsertsearchdir+0xec>
    25a8:	ldur	x1, [x29, #-16]
    25ac:	ldur	x2, [x29, #-24]
    25b0:	ldr	x0, [sp, #24]
    25b4:	bl	21d8 <lt_dlpath_insertdir>
    25b8:	cbz	w0, 25c8 <lt_dlinsertsearchdir+0xec>
    25bc:	ldur	w8, [x29, #-28]
    25c0:	add	w8, w8, #0x1
    25c4:	stur	w8, [x29, #-28]
    25c8:	ldur	w8, [x29, #-28]
    25cc:	stur	w8, [x29, #-4]
    25d0:	ldur	w0, [x29, #-4]
    25d4:	ldp	x29, x30, [sp, #64]
    25d8:	add	sp, sp, #0x50
    25dc:	ret

00000000000025e0 <lt_dlsetsearchpath>:
    25e0:	sub	sp, sp, #0x50
    25e4:	stp	x29, x30, [sp, #64]
    25e8:	add	x29, sp, #0x40
    25ec:	adrp	x8, 0 <lt__alloc_die_callback>
    25f0:	add	x8, x8, #0x0
    25f4:	mov	x9, xzr
    25f8:	mov	w10, #0x0                   	// #0
    25fc:	stur	x0, [x29, #-16]
    2600:	stur	wzr, [x29, #-20]
    2604:	ldr	x0, [x8]
    2608:	str	x8, [sp, #24]
    260c:	str	x9, [sp, #16]
    2610:	str	w10, [sp, #12]
    2614:	bl	0 <free>
    2618:	ldr	x8, [sp, #16]
    261c:	ldr	x9, [sp, #24]
    2620:	str	x8, [x9]
    2624:	str	x8, [sp, #32]
    2628:	ldur	x11, [x29, #-16]
    262c:	cbz	x11, 265c <lt_dlsetsearchpath+0x7c>
    2630:	ldur	x8, [x29, #-16]
    2634:	cbz	x8, 2654 <lt_dlsetsearchpath+0x74>
    2638:	ldur	x8, [x29, #-16]
    263c:	ldrb	w9, [x8]
    2640:	cbz	w9, 2654 <lt_dlsetsearchpath+0x74>
    2644:	ldur	x0, [x29, #-16]
    2648:	bl	0 <strlen>
    264c:	cbnz	x0, 2668 <lt_dlsetsearchpath+0x88>
    2650:	b	265c <lt_dlsetsearchpath+0x7c>
    2654:	ldr	w8, [sp, #12]
    2658:	tbnz	w8, #0, 2668 <lt_dlsetsearchpath+0x88>
    265c:	ldur	w8, [x29, #-20]
    2660:	stur	w8, [x29, #-4]
    2664:	b	268c <lt_dlsetsearchpath+0xac>
    2668:	ldur	x0, [x29, #-16]
    266c:	ldr	x1, [sp, #24]
    2670:	bl	269c <canonicalize_path>
    2674:	cbz	w0, 2684 <lt_dlsetsearchpath+0xa4>
    2678:	ldur	w8, [x29, #-20]
    267c:	add	w8, w8, #0x1
    2680:	stur	w8, [x29, #-20]
    2684:	ldur	w8, [x29, #-20]
    2688:	stur	w8, [x29, #-4]
    268c:	ldur	w0, [x29, #-4]
    2690:	ldp	x29, x30, [sp, #64]
    2694:	add	sp, sp, #0x50
    2698:	ret

000000000000269c <canonicalize_path>:
    269c:	sub	sp, sp, #0x50
    26a0:	stp	x29, x30, [sp, #64]
    26a4:	add	x29, sp, #0x40
    26a8:	mov	x8, xzr
    26ac:	stur	x0, [x29, #-16]
    26b0:	stur	x1, [x29, #-24]
    26b4:	str	x8, [sp, #32]
    26b8:	ldur	x8, [x29, #-16]
    26bc:	cbz	x8, 26d0 <canonicalize_path+0x34>
    26c0:	ldur	x8, [x29, #-16]
    26c4:	ldrb	w9, [x8]
    26c8:	cbz	w9, 26d0 <canonicalize_path+0x34>
    26cc:	b	26f0 <canonicalize_path+0x54>
    26d0:	adrp	x0, 0 <lt__alloc_die_callback>
    26d4:	add	x0, x0, #0x0
    26d8:	adrp	x1, 0 <lt__alloc_die_callback>
    26dc:	add	x1, x1, #0x0
    26e0:	mov	w2, #0x24f                 	// #591
    26e4:	adrp	x3, 0 <lt__alloc_die_callback>
    26e8:	add	x3, x3, #0x0
    26ec:	bl	0 <__assert_fail>
    26f0:	ldur	x8, [x29, #-24]
    26f4:	cbz	x8, 26fc <canonicalize_path+0x60>
    26f8:	b	271c <canonicalize_path+0x80>
    26fc:	adrp	x0, 0 <lt__alloc_die_callback>
    2700:	add	x0, x0, #0x0
    2704:	adrp	x1, 0 <lt__alloc_die_callback>
    2708:	add	x1, x1, #0x0
    270c:	mov	w2, #0x250                 	// #592
    2710:	adrp	x3, 0 <lt__alloc_die_callback>
    2714:	add	x3, x3, #0x0
    2718:	bl	0 <__assert_fail>
    271c:	ldur	x8, [x29, #-16]
    2720:	cbz	x8, 2740 <canonicalize_path+0xa4>
    2724:	ldur	x8, [x29, #-16]
    2728:	ldrb	w9, [x8]
    272c:	cbz	w9, 2740 <canonicalize_path+0xa4>
    2730:	ldur	x0, [x29, #-16]
    2734:	bl	0 <strlen>
    2738:	str	x0, [sp, #8]
    273c:	b	2748 <canonicalize_path+0xac>
    2740:	mov	x8, xzr
    2744:	str	x8, [sp, #8]
    2748:	ldr	x8, [sp, #8]
    274c:	mov	x9, #0x1                   	// #1
    2750:	add	x8, x8, #0x1
    2754:	mul	x0, x8, x9
    2758:	bl	0 <lt__malloc>
    275c:	str	x0, [sp, #32]
    2760:	ldr	x8, [sp, #32]
    2764:	cbnz	x8, 2774 <canonicalize_path+0xd8>
    2768:	mov	w8, #0x1                   	// #1
    276c:	stur	w8, [x29, #-4]
    2770:	b	28ac <canonicalize_path+0x210>
    2774:	str	xzr, [sp, #24]
    2778:	str	xzr, [sp, #16]
    277c:	ldur	x8, [x29, #-16]
    2780:	ldr	x9, [sp, #16]
    2784:	ldrb	w10, [x8, x9]
    2788:	cbz	w10, 2888 <canonicalize_path+0x1ec>
    278c:	ldur	x8, [x29, #-16]
    2790:	ldr	x9, [sp, #16]
    2794:	ldrb	w10, [x8, x9]
    2798:	cmp	w10, #0x3a
    279c:	b.ne	27d8 <canonicalize_path+0x13c>  // b.any
    27a0:	ldr	x8, [sp, #24]
    27a4:	cbz	x8, 27d4 <canonicalize_path+0x138>
    27a8:	ldur	x8, [x29, #-16]
    27ac:	ldr	x9, [sp, #16]
    27b0:	add	x9, x9, #0x1
    27b4:	ldrb	w10, [x8, x9]
    27b8:	cmp	w10, #0x3a
    27bc:	b.eq	27d4 <canonicalize_path+0x138>  // b.none
    27c0:	ldur	x8, [x29, #-16]
    27c4:	ldr	x9, [sp, #16]
    27c8:	add	x9, x9, #0x1
    27cc:	ldrb	w10, [x8, x9]
    27d0:	cbnz	w10, 27d8 <canonicalize_path+0x13c>
    27d4:	b	2878 <canonicalize_path+0x1dc>
    27d8:	ldur	x8, [x29, #-16]
    27dc:	ldr	x9, [sp, #16]
    27e0:	ldrb	w10, [x8, x9]
    27e4:	cmp	w10, #0x2f
    27e8:	b.eq	2818 <canonicalize_path+0x17c>  // b.none
    27ec:	ldur	x8, [x29, #-16]
    27f0:	ldr	x9, [sp, #16]
    27f4:	add	x8, x8, x9
    27f8:	ldrb	w10, [x8]
    27fc:	ldr	x8, [sp, #32]
    2800:	ldr	x9, [sp, #24]
    2804:	add	x11, x9, #0x1
    2808:	str	x11, [sp, #24]
    280c:	add	x8, x8, x9
    2810:	strb	w10, [x8]
    2814:	b	2878 <canonicalize_path+0x1dc>
    2818:	ldur	x8, [x29, #-16]
    281c:	ldr	x9, [sp, #16]
    2820:	add	x9, x9, #0x1
    2824:	ldrb	w10, [x8, x9]
    2828:	cmp	w10, #0x3a
    282c:	b.eq	2878 <canonicalize_path+0x1dc>  // b.none
    2830:	ldur	x8, [x29, #-16]
    2834:	ldr	x9, [sp, #16]
    2838:	add	x9, x9, #0x1
    283c:	ldrb	w10, [x8, x9]
    2840:	cbz	w10, 2878 <canonicalize_path+0x1dc>
    2844:	ldur	x8, [x29, #-16]
    2848:	ldr	x9, [sp, #16]
    284c:	add	x9, x9, #0x1
    2850:	ldrb	w10, [x8, x9]
    2854:	cmp	w10, #0x2f
    2858:	b.eq	2878 <canonicalize_path+0x1dc>  // b.none
    285c:	ldr	x8, [sp, #32]
    2860:	ldr	x9, [sp, #24]
    2864:	add	x10, x9, #0x1
    2868:	str	x10, [sp, #24]
    286c:	add	x8, x8, x9
    2870:	mov	w11, #0x2f                  	// #47
    2874:	strb	w11, [x8]
    2878:	ldr	x8, [sp, #16]
    287c:	add	x8, x8, #0x1
    2880:	str	x8, [sp, #16]
    2884:	b	277c <canonicalize_path+0xe0>
    2888:	ldr	x8, [sp, #32]
    288c:	ldr	x9, [sp, #24]
    2890:	add	x8, x8, x9
    2894:	mov	w10, #0x0                   	// #0
    2898:	strb	w10, [x8]
    289c:	ldr	x8, [sp, #32]
    28a0:	ldur	x9, [x29, #-24]
    28a4:	str	x8, [x9]
    28a8:	stur	wzr, [x29, #-4]
    28ac:	ldur	w0, [x29, #-4]
    28b0:	ldp	x29, x30, [sp, #64]
    28b4:	add	sp, sp, #0x50
    28b8:	ret

00000000000028bc <lt_dlgetsearchpath>:
    28bc:	sub	sp, sp, #0x10
    28c0:	adrp	x8, 0 <lt__alloc_die_callback>
    28c4:	add	x8, x8, #0x0
    28c8:	ldr	x8, [x8]
    28cc:	str	x8, [sp, #8]
    28d0:	ldr	x0, [sp, #8]
    28d4:	add	sp, sp, #0x10
    28d8:	ret

00000000000028dc <lt_dlmakeresident>:
    28dc:	sub	sp, sp, #0x20
    28e0:	stp	x29, x30, [sp, #16]
    28e4:	add	x29, sp, #0x10
    28e8:	str	x0, [sp, #8]
    28ec:	str	wzr, [sp, #4]
    28f0:	ldr	x8, [sp, #8]
    28f4:	cbnz	x8, 2914 <lt_dlmakeresident+0x38>
    28f8:	mov	w0, #0xc                   	// #12
    28fc:	bl	0 <lt__error_string>
    2900:	bl	0 <lt__set_last_error>
    2904:	ldr	w8, [sp, #4]
    2908:	add	w8, w8, #0x1
    290c:	str	w8, [sp, #4]
    2910:	b	2928 <lt_dlmakeresident+0x4c>
    2914:	ldr	x8, [sp, #8]
    2918:	ldrb	w9, [x8, #36]
    291c:	and	w9, w9, #0xfffffffe
    2920:	orr	w9, w9, #0x1
    2924:	strb	w9, [x8, #36]
    2928:	ldr	w0, [sp, #4]
    292c:	ldp	x29, x30, [sp, #16]
    2930:	add	sp, sp, #0x20
    2934:	ret

0000000000002938 <lt_dlisresident>:
    2938:	sub	sp, sp, #0x20
    293c:	stp	x29, x30, [sp, #16]
    2940:	add	x29, sp, #0x10
    2944:	str	x0, [sp]
    2948:	ldr	x8, [sp]
    294c:	cbnz	x8, 2968 <lt_dlisresident+0x30>
    2950:	mov	w0, #0xc                   	// #12
    2954:	bl	0 <lt__error_string>
    2958:	bl	0 <lt__set_last_error>
    295c:	mov	w8, #0xffffffff            	// #-1
    2960:	stur	w8, [x29, #-4]
    2964:	b	297c <lt_dlisresident+0x44>
    2968:	ldr	x8, [sp]
    296c:	ldrb	w9, [x8, #36]
    2970:	and	w9, w9, #0x1
    2974:	and	w9, w9, #0xff
    2978:	stur	w9, [x29, #-4]
    297c:	ldur	w0, [x29, #-4]
    2980:	ldp	x29, x30, [sp, #16]
    2984:	add	sp, sp, #0x20
    2988:	ret

000000000000298c <lt_dlinterface_register>:
    298c:	sub	sp, sp, #0x30
    2990:	stp	x29, x30, [sp, #32]
    2994:	add	x29, sp, #0x20
    2998:	mov	x8, #0x10                  	// #16
    299c:	stur	x0, [x29, #-8]
    29a0:	str	x1, [sp, #16]
    29a4:	mov	x0, x8
    29a8:	bl	0 <lt__malloc>
    29ac:	str	x0, [sp, #8]
    29b0:	ldr	x8, [sp, #8]
    29b4:	cbz	x8, 29f8 <lt_dlinterface_register+0x6c>
    29b8:	ldur	x0, [x29, #-8]
    29bc:	bl	0 <lt__strdup>
    29c0:	ldr	x8, [sp, #8]
    29c4:	str	x0, [x8]
    29c8:	ldr	x8, [sp, #8]
    29cc:	ldr	x8, [x8]
    29d0:	cbnz	x8, 29ec <lt_dlinterface_register+0x60>
    29d4:	ldr	x0, [sp, #8]
    29d8:	bl	0 <free>
    29dc:	mov	x8, xzr
    29e0:	str	x8, [sp, #8]
    29e4:	str	x8, [sp]
    29e8:	b	29f8 <lt_dlinterface_register+0x6c>
    29ec:	ldr	x8, [sp, #16]
    29f0:	ldr	x9, [sp, #8]
    29f4:	str	x8, [x9, #8]
    29f8:	ldr	x0, [sp, #8]
    29fc:	ldp	x29, x30, [sp, #32]
    2a00:	add	sp, sp, #0x30
    2a04:	ret

0000000000002a08 <lt_dlinterface_free>:
    2a08:	sub	sp, sp, #0x40
    2a0c:	stp	x29, x30, [sp, #48]
    2a10:	add	x29, sp, #0x30
    2a14:	mov	x8, xzr
    2a18:	stur	x0, [x29, #-8]
    2a1c:	ldur	x9, [x29, #-8]
    2a20:	stur	x9, [x29, #-16]
    2a24:	ldur	x9, [x29, #-16]
    2a28:	ldr	x0, [x9]
    2a2c:	str	x8, [sp, #8]
    2a30:	bl	0 <free>
    2a34:	ldur	x8, [x29, #-16]
    2a38:	ldr	x9, [sp, #8]
    2a3c:	str	x9, [x8]
    2a40:	str	x9, [sp, #24]
    2a44:	ldur	x0, [x29, #-16]
    2a48:	bl	0 <free>
    2a4c:	ldr	x8, [sp, #8]
    2a50:	stur	x8, [x29, #-16]
    2a54:	str	x8, [sp, #16]
    2a58:	ldp	x29, x30, [sp, #48]
    2a5c:	add	sp, sp, #0x40
    2a60:	ret

0000000000002a64 <lt_dlcaller_set_data>:
    2a64:	sub	sp, sp, #0x50
    2a68:	stp	x29, x30, [sp, #64]
    2a6c:	add	x29, sp, #0x40
    2a70:	mov	x8, xzr
    2a74:	stur	x0, [x29, #-8]
    2a78:	stur	x1, [x29, #-16]
    2a7c:	stur	x2, [x29, #-24]
    2a80:	stur	wzr, [x29, #-28]
    2a84:	str	x8, [sp, #24]
    2a88:	ldur	x8, [x29, #-16]
    2a8c:	str	x8, [sp, #16]
    2a90:	ldr	x8, [sp, #16]
    2a94:	ldr	x8, [x8, #72]
    2a98:	cbz	x8, 2acc <lt_dlcaller_set_data+0x68>
    2a9c:	ldr	x8, [sp, #16]
    2aa0:	ldr	x8, [x8, #72]
    2aa4:	ldursw	x9, [x29, #-28]
    2aa8:	mov	x10, #0x10                  	// #16
    2aac:	mul	x9, x10, x9
    2ab0:	add	x8, x8, x9
    2ab4:	ldr	x8, [x8]
    2ab8:	cbz	x8, 2acc <lt_dlcaller_set_data+0x68>
    2abc:	ldur	w8, [x29, #-28]
    2ac0:	add	w8, w8, #0x1
    2ac4:	stur	w8, [x29, #-28]
    2ac8:	b	2a9c <lt_dlcaller_set_data+0x38>
    2acc:	str	wzr, [sp, #12]
    2ad0:	ldr	w8, [sp, #12]
    2ad4:	ldur	w9, [x29, #-28]
    2ad8:	cmp	w8, w9
    2adc:	b.ge	2b3c <lt_dlcaller_set_data+0xd8>  // b.tcont
    2ae0:	ldr	x8, [sp, #16]
    2ae4:	ldr	x8, [x8, #72]
    2ae8:	ldrsw	x9, [sp, #12]
    2aec:	mov	x10, #0x10                  	// #16
    2af0:	mul	x9, x10, x9
    2af4:	add	x8, x8, x9
    2af8:	ldr	x8, [x8]
    2afc:	ldur	x9, [x29, #-8]
    2b00:	cmp	x8, x9
    2b04:	b.ne	2b2c <lt_dlcaller_set_data+0xc8>  // b.any
    2b08:	ldr	x8, [sp, #16]
    2b0c:	ldr	x8, [x8, #72]
    2b10:	ldrsw	x9, [sp, #12]
    2b14:	mov	x10, #0x10                  	// #16
    2b18:	mul	x9, x10, x9
    2b1c:	add	x8, x8, x9
    2b20:	ldr	x8, [x8, #8]
    2b24:	str	x8, [sp, #24]
    2b28:	b	2b3c <lt_dlcaller_set_data+0xd8>
    2b2c:	ldr	w8, [sp, #12]
    2b30:	add	w8, w8, #0x1
    2b34:	str	w8, [sp, #12]
    2b38:	b	2ad0 <lt_dlcaller_set_data+0x6c>
    2b3c:	ldr	w8, [sp, #12]
    2b40:	ldur	w9, [x29, #-28]
    2b44:	cmp	w8, w9
    2b48:	b.ne	2bd4 <lt_dlcaller_set_data+0x170>  // b.any
    2b4c:	ldr	x8, [sp, #16]
    2b50:	ldr	x0, [x8, #72]
    2b54:	ldur	w9, [x29, #-28]
    2b58:	add	w9, w9, #0x2
    2b5c:	mov	w10, #0x10                  	// #16
    2b60:	smull	x1, w9, w10
    2b64:	bl	0 <lt__realloc>
    2b68:	str	x0, [sp]
    2b6c:	ldr	x8, [sp]
    2b70:	cbnz	x8, 2b80 <lt_dlcaller_set_data+0x11c>
    2b74:	mov	x8, xzr
    2b78:	str	x8, [sp, #24]
    2b7c:	b	2bf4 <lt_dlcaller_set_data+0x190>
    2b80:	ldr	x8, [sp]
    2b84:	ldr	x9, [sp, #16]
    2b88:	str	x8, [x9, #72]
    2b8c:	ldur	x8, [x29, #-8]
    2b90:	ldr	x9, [sp, #16]
    2b94:	ldr	x9, [x9, #72]
    2b98:	ldrsw	x10, [sp, #12]
    2b9c:	mov	x11, #0x10                  	// #16
    2ba0:	mul	x10, x11, x10
    2ba4:	add	x9, x9, x10
    2ba8:	str	x8, [x9]
    2bac:	ldr	x8, [sp, #16]
    2bb0:	ldr	x8, [x8, #72]
    2bb4:	ldr	w12, [sp, #12]
    2bb8:	add	w12, w12, #0x1
    2bbc:	mov	w0, w12
    2bc0:	sxtw	x9, w0
    2bc4:	mul	x9, x11, x9
    2bc8:	add	x8, x8, x9
    2bcc:	mov	x9, xzr
    2bd0:	str	x9, [x8]
    2bd4:	ldur	x8, [x29, #-24]
    2bd8:	ldr	x9, [sp, #16]
    2bdc:	ldr	x9, [x9, #72]
    2be0:	ldrsw	x10, [sp, #12]
    2be4:	mov	x11, #0x10                  	// #16
    2be8:	mul	x10, x11, x10
    2bec:	add	x9, x9, x10
    2bf0:	str	x8, [x9, #8]
    2bf4:	ldr	x0, [sp, #24]
    2bf8:	ldp	x29, x30, [sp, #64]
    2bfc:	add	sp, sp, #0x50
    2c00:	ret

0000000000002c04 <lt_dlcaller_get_data>:
    2c04:	sub	sp, sp, #0x30
    2c08:	mov	x8, xzr
    2c0c:	str	x0, [sp, #40]
    2c10:	str	x1, [sp, #32]
    2c14:	str	x8, [sp, #24]
    2c18:	ldr	x8, [sp, #32]
    2c1c:	str	x8, [sp, #16]
    2c20:	ldr	x8, [sp, #16]
    2c24:	ldr	x8, [x8, #72]
    2c28:	cbz	x8, 2cac <lt_dlcaller_get_data+0xa8>
    2c2c:	str	wzr, [sp, #12]
    2c30:	ldr	x8, [sp, #16]
    2c34:	ldr	x8, [x8, #72]
    2c38:	ldrsw	x9, [sp, #12]
    2c3c:	mov	x10, #0x10                  	// #16
    2c40:	mul	x9, x10, x9
    2c44:	add	x8, x8, x9
    2c48:	ldr	x8, [x8]
    2c4c:	cbz	x8, 2cac <lt_dlcaller_get_data+0xa8>
    2c50:	ldr	x8, [sp, #16]
    2c54:	ldr	x8, [x8, #72]
    2c58:	ldrsw	x9, [sp, #12]
    2c5c:	mov	x10, #0x10                  	// #16
    2c60:	mul	x9, x10, x9
    2c64:	add	x8, x8, x9
    2c68:	ldr	x8, [x8]
    2c6c:	ldr	x9, [sp, #40]
    2c70:	cmp	x8, x9
    2c74:	b.ne	2c9c <lt_dlcaller_get_data+0x98>  // b.any
    2c78:	ldr	x8, [sp, #16]
    2c7c:	ldr	x8, [x8, #72]
    2c80:	ldrsw	x9, [sp, #12]
    2c84:	mov	x10, #0x10                  	// #16
    2c88:	mul	x9, x10, x9
    2c8c:	add	x8, x8, x9
    2c90:	ldr	x8, [x8, #8]
    2c94:	str	x8, [sp, #24]
    2c98:	b	2cac <lt_dlcaller_get_data+0xa8>
    2c9c:	ldr	w8, [sp, #12]
    2ca0:	add	w8, w8, #0x1
    2ca4:	str	w8, [sp, #12]
    2ca8:	b	2c30 <lt_dlcaller_get_data+0x2c>
    2cac:	ldr	x0, [sp, #24]
    2cb0:	add	sp, sp, #0x30
    2cb4:	ret

0000000000002cb8 <lt_dlgetinfo>:
    2cb8:	sub	sp, sp, #0x20
    2cbc:	stp	x29, x30, [sp, #16]
    2cc0:	add	x29, sp, #0x10
    2cc4:	str	x0, [sp]
    2cc8:	ldr	x8, [sp]
    2ccc:	cbnz	x8, 2ce8 <lt_dlgetinfo+0x30>
    2cd0:	mov	w0, #0xc                   	// #12
    2cd4:	bl	0 <lt__error_string>
    2cd8:	bl	0 <lt__set_last_error>
    2cdc:	mov	x8, xzr
    2ce0:	str	x8, [sp, #8]
    2ce4:	b	2cf4 <lt_dlgetinfo+0x3c>
    2ce8:	ldr	x8, [sp]
    2cec:	add	x8, x8, #0x10
    2cf0:	str	x8, [sp, #8]
    2cf4:	ldr	x0, [sp, #8]
    2cf8:	ldp	x29, x30, [sp, #16]
    2cfc:	add	sp, sp, #0x20
    2d00:	ret

0000000000002d04 <lt_dlhandle_iterate>:
    2d04:	sub	sp, sp, #0x40
    2d08:	stp	x29, x30, [sp, #48]
    2d0c:	add	x29, sp, #0x30
    2d10:	stur	x0, [x29, #-8]
    2d14:	stur	x1, [x29, #-16]
    2d18:	ldur	x8, [x29, #-16]
    2d1c:	str	x8, [sp, #24]
    2d20:	ldur	x8, [x29, #-8]
    2d24:	str	x8, [sp, #16]
    2d28:	ldur	x8, [x29, #-8]
    2d2c:	cbz	x8, 2d34 <lt_dlhandle_iterate+0x30>
    2d30:	b	2d54 <lt_dlhandle_iterate+0x50>
    2d34:	adrp	x0, 0 <lt__alloc_die_callback>
    2d38:	add	x0, x0, #0x0
    2d3c:	adrp	x1, 0 <lt__alloc_die_callback>
    2d40:	add	x1, x1, #0x0
    2d44:	mov	w2, #0x96a                 	// #2410
    2d48:	adrp	x3, 0 <lt__alloc_die_callback>
    2d4c:	add	x3, x3, #0x0
    2d50:	bl	0 <__assert_fail>
    2d54:	ldr	x8, [sp, #24]
    2d58:	cbnz	x8, 2d70 <lt_dlhandle_iterate+0x6c>
    2d5c:	adrp	x8, 0 <lt__alloc_die_callback>
    2d60:	add	x8, x8, #0x0
    2d64:	ldr	x8, [x8]
    2d68:	str	x8, [sp, #24]
    2d6c:	b	2d7c <lt_dlhandle_iterate+0x78>
    2d70:	ldr	x8, [sp, #24]
    2d74:	ldr	x8, [x8]
    2d78:	str	x8, [sp, #24]
    2d7c:	ldr	x8, [sp, #24]
    2d80:	mov	w9, #0x0                   	// #0
    2d84:	str	w9, [sp, #12]
    2d88:	cbz	x8, 2dc4 <lt_dlhandle_iterate+0xc0>
    2d8c:	ldr	x8, [sp, #16]
    2d90:	ldr	x8, [x8, #8]
    2d94:	mov	w9, #0x0                   	// #0
    2d98:	str	w9, [sp, #12]
    2d9c:	cbz	x8, 2dc4 <lt_dlhandle_iterate+0xc0>
    2da0:	ldr	x8, [sp, #16]
    2da4:	ldr	x8, [x8, #8]
    2da8:	ldr	x0, [sp, #24]
    2dac:	ldr	x9, [sp, #16]
    2db0:	ldr	x1, [x9]
    2db4:	blr	x8
    2db8:	cmp	w0, #0x0
    2dbc:	cset	w10, ne  // ne = any
    2dc0:	str	w10, [sp, #12]
    2dc4:	ldr	w8, [sp, #12]
    2dc8:	tbnz	w8, #0, 2dd0 <lt_dlhandle_iterate+0xcc>
    2dcc:	b	2de0 <lt_dlhandle_iterate+0xdc>
    2dd0:	ldr	x8, [sp, #24]
    2dd4:	ldr	x8, [x8]
    2dd8:	str	x8, [sp, #24]
    2ddc:	b	2d7c <lt_dlhandle_iterate+0x78>
    2de0:	ldr	x0, [sp, #24]
    2de4:	ldp	x29, x30, [sp, #48]
    2de8:	add	sp, sp, #0x40
    2dec:	ret

0000000000002df0 <lt_dlhandle_fetch>:
    2df0:	sub	sp, sp, #0x30
    2df4:	stp	x29, x30, [sp, #32]
    2df8:	add	x29, sp, #0x20
    2dfc:	mov	x8, xzr
    2e00:	stur	x0, [x29, #-8]
    2e04:	str	x1, [sp, #16]
    2e08:	str	x8, [sp, #8]
    2e0c:	ldur	x8, [x29, #-8]
    2e10:	cbz	x8, 2e18 <lt_dlhandle_fetch+0x28>
    2e14:	b	2e38 <lt_dlhandle_fetch+0x48>
    2e18:	adrp	x0, 0 <lt__alloc_die_callback>
    2e1c:	add	x0, x0, #0x0
    2e20:	adrp	x1, 0 <lt__alloc_die_callback>
    2e24:	add	x1, x1, #0x0
    2e28:	mov	w2, #0x981                 	// #2433
    2e2c:	adrp	x3, 0 <lt__alloc_die_callback>
    2e30:	add	x3, x3, #0x0
    2e34:	bl	0 <__assert_fail>
    2e38:	ldur	x0, [x29, #-8]
    2e3c:	ldr	x1, [sp, #8]
    2e40:	bl	2d04 <lt_dlhandle_iterate>
    2e44:	str	x0, [sp, #8]
    2e48:	cbz	x0, 2e84 <lt_dlhandle_fetch+0x94>
    2e4c:	ldr	x8, [sp, #8]
    2e50:	str	x8, [sp]
    2e54:	ldr	x8, [sp]
    2e58:	cbz	x8, 2e80 <lt_dlhandle_fetch+0x90>
    2e5c:	ldr	x8, [sp]
    2e60:	ldr	x8, [x8, #24]
    2e64:	cbz	x8, 2e80 <lt_dlhandle_fetch+0x90>
    2e68:	ldr	x8, [sp]
    2e6c:	ldr	x0, [x8, #24]
    2e70:	ldr	x1, [sp, #16]
    2e74:	bl	0 <strcmp>
    2e78:	cbnz	w0, 2e80 <lt_dlhandle_fetch+0x90>
    2e7c:	b	2e84 <lt_dlhandle_fetch+0x94>
    2e80:	b	2e38 <lt_dlhandle_fetch+0x48>
    2e84:	ldr	x0, [sp, #8]
    2e88:	ldp	x29, x30, [sp, #32]
    2e8c:	add	sp, sp, #0x30
    2e90:	ret

0000000000002e94 <lt_dlhandle_map>:
    2e94:	sub	sp, sp, #0x50
    2e98:	stp	x29, x30, [sp, #64]
    2e9c:	add	x29, sp, #0x40
    2ea0:	adrp	x8, 0 <lt__alloc_die_callback>
    2ea4:	add	x8, x8, #0x0
    2ea8:	stur	x0, [x29, #-16]
    2eac:	stur	x1, [x29, #-24]
    2eb0:	str	x2, [sp, #32]
    2eb4:	ldur	x9, [x29, #-16]
    2eb8:	str	x9, [sp, #24]
    2ebc:	ldr	x8, [x8]
    2ec0:	str	x8, [sp, #16]
    2ec4:	ldur	x8, [x29, #-16]
    2ec8:	cbz	x8, 2ed0 <lt_dlhandle_map+0x3c>
    2ecc:	b	2ef0 <lt_dlhandle_map+0x5c>
    2ed0:	adrp	x0, 0 <lt__alloc_die_callback>
    2ed4:	add	x0, x0, #0x0
    2ed8:	adrp	x1, 0 <lt__alloc_die_callback>
    2edc:	add	x1, x1, #0x0
    2ee0:	mov	w2, #0x995                 	// #2453
    2ee4:	adrp	x3, 0 <lt__alloc_die_callback>
    2ee8:	add	x3, x3, #0x0
    2eec:	bl	0 <__assert_fail>
    2ef0:	ldr	x8, [sp, #16]
    2ef4:	cbz	x8, 2f88 <lt_dlhandle_map+0xf4>
    2ef8:	str	wzr, [sp, #12]
    2efc:	ldr	x8, [sp, #16]
    2f00:	mov	w9, #0x0                   	// #0
    2f04:	str	w9, [sp, #8]
    2f08:	cbz	x8, 2f44 <lt_dlhandle_map+0xb0>
    2f0c:	ldr	x8, [sp, #24]
    2f10:	ldr	x8, [x8, #8]
    2f14:	mov	w9, #0x0                   	// #0
    2f18:	str	w9, [sp, #8]
    2f1c:	cbz	x8, 2f44 <lt_dlhandle_map+0xb0>
    2f20:	ldr	x8, [sp, #24]
    2f24:	ldr	x8, [x8, #8]
    2f28:	ldr	x0, [sp, #16]
    2f2c:	ldr	x9, [sp, #24]
    2f30:	ldr	x1, [x9]
    2f34:	blr	x8
    2f38:	cmp	w0, #0x0
    2f3c:	cset	w10, ne  // ne = any
    2f40:	str	w10, [sp, #8]
    2f44:	ldr	w8, [sp, #8]
    2f48:	tbnz	w8, #0, 2f50 <lt_dlhandle_map+0xbc>
    2f4c:	b	2f60 <lt_dlhandle_map+0xcc>
    2f50:	ldr	x8, [sp, #16]
    2f54:	ldr	x8, [x8]
    2f58:	str	x8, [sp, #16]
    2f5c:	b	2efc <lt_dlhandle_map+0x68>
    2f60:	ldur	x8, [x29, #-24]
    2f64:	ldr	x0, [sp, #16]
    2f68:	ldr	x1, [sp, #32]
    2f6c:	blr	x8
    2f70:	str	w0, [sp, #12]
    2f74:	cbz	w0, 2f84 <lt_dlhandle_map+0xf0>
    2f78:	ldr	w8, [sp, #12]
    2f7c:	stur	w8, [x29, #-4]
    2f80:	b	2f8c <lt_dlhandle_map+0xf8>
    2f84:	b	2ef0 <lt_dlhandle_map+0x5c>
    2f88:	stur	wzr, [x29, #-4]
    2f8c:	ldur	w0, [x29, #-4]
    2f90:	ldp	x29, x30, [sp, #64]
    2f94:	add	sp, sp, #0x50
    2f98:	ret

0000000000002f9c <tryall_dlopen>:
    2f9c:	sub	sp, sp, #0x70
    2fa0:	stp	x29, x30, [sp, #96]
    2fa4:	add	x29, sp, #0x60
    2fa8:	adrp	x8, 0 <lt__alloc_die_callback>
    2fac:	add	x8, x8, #0x0
    2fb0:	mov	x9, xzr
    2fb4:	stur	x0, [x29, #-8]
    2fb8:	stur	x1, [x29, #-16]
    2fbc:	stur	x2, [x29, #-24]
    2fc0:	stur	x3, [x29, #-32]
    2fc4:	ldr	x8, [x8]
    2fc8:	stur	x8, [x29, #-40]
    2fcc:	str	x9, [sp, #48]
    2fd0:	str	wzr, [sp, #44]
    2fd4:	bl	0 <lt__get_last_error>
    2fd8:	str	x0, [sp, #48]
    2fdc:	ldur	x8, [x29, #-40]
    2fe0:	cbz	x8, 3034 <tryall_dlopen+0x98>
    2fe4:	ldur	x8, [x29, #-40]
    2fe8:	ldr	x8, [x8, #16]
    2fec:	ldur	x9, [x29, #-16]
    2ff0:	cmp	x8, x9
    2ff4:	b.eq	3020 <tryall_dlopen+0x84>  // b.none
    2ff8:	ldur	x8, [x29, #-40]
    2ffc:	ldr	x8, [x8, #16]
    3000:	cbz	x8, 3024 <tryall_dlopen+0x88>
    3004:	ldur	x8, [x29, #-16]
    3008:	cbz	x8, 3024 <tryall_dlopen+0x88>
    300c:	ldur	x8, [x29, #-40]
    3010:	ldr	x0, [x8, #16]
    3014:	ldur	x1, [x29, #-16]
    3018:	bl	0 <strcmp>
    301c:	cbnz	w0, 3024 <tryall_dlopen+0x88>
    3020:	b	3034 <tryall_dlopen+0x98>
    3024:	ldur	x8, [x29, #-40]
    3028:	ldr	x8, [x8]
    302c:	stur	x8, [x29, #-40]
    3030:	b	2fdc <tryall_dlopen+0x40>
    3034:	ldur	x8, [x29, #-40]
    3038:	cbz	x8, 305c <tryall_dlopen+0xc0>
    303c:	ldur	x8, [x29, #-40]
    3040:	ldr	w9, [x8, #32]
    3044:	add	w9, w9, #0x1
    3048:	str	w9, [x8, #32]
    304c:	ldur	x8, [x29, #-40]
    3050:	ldur	x10, [x29, #-8]
    3054:	str	x8, [x10]
    3058:	b	3244 <tryall_dlopen+0x2a8>
    305c:	ldur	x8, [x29, #-8]
    3060:	ldr	x8, [x8]
    3064:	stur	x8, [x29, #-40]
    3068:	ldur	x8, [x29, #-16]
    306c:	cbz	x8, 30a0 <tryall_dlopen+0x104>
    3070:	ldur	x0, [x29, #-16]
    3074:	bl	0 <lt__strdup>
    3078:	ldur	x8, [x29, #-40]
    307c:	str	x0, [x8, #16]
    3080:	ldur	x8, [x29, #-40]
    3084:	ldr	x8, [x8, #16]
    3088:	cbnz	x8, 309c <tryall_dlopen+0x100>
    308c:	ldr	w8, [sp, #44]
    3090:	add	w8, w8, #0x1
    3094:	str	w8, [sp, #44]
    3098:	b	3244 <tryall_dlopen+0x2a8>
    309c:	b	30ac <tryall_dlopen+0x110>
    30a0:	ldur	x8, [x29, #-40]
    30a4:	mov	x9, xzr
    30a8:	str	x9, [x8, #16]
    30ac:	mov	x8, xzr
    30b0:	mov	x0, x8
    30b4:	bl	0 <lt_dlloader_next>
    30b8:	str	x0, [sp, #32]
    30bc:	ldur	x8, [x29, #-32]
    30c0:	cbz	x8, 30d0 <tryall_dlopen+0x134>
    30c4:	ldur	x8, [x29, #-32]
    30c8:	str	x8, [sp, #24]
    30cc:	b	30dc <tryall_dlopen+0x140>
    30d0:	ldr	x0, [sp, #32]
    30d4:	bl	0 <lt_dlloader_get>
    30d8:	str	x0, [sp, #24]
    30dc:	ldr	x8, [sp, #24]
    30e0:	ldr	x8, [x8, #16]
    30e4:	ldr	x9, [sp, #24]
    30e8:	ldr	x0, [x9, #56]
    30ec:	ldur	x1, [x29, #-16]
    30f0:	ldur	x2, [x29, #-24]
    30f4:	blr	x8
    30f8:	ldur	x8, [x29, #-40]
    30fc:	str	x0, [x8, #56]
    3100:	ldur	x8, [x29, #-40]
    3104:	ldr	x8, [x8, #56]
    3108:	cbz	x8, 31b0 <tryall_dlopen+0x214>
    310c:	ldur	x8, [x29, #-24]
    3110:	cbz	x8, 31ac <tryall_dlopen+0x210>
    3114:	ldur	x8, [x29, #-24]
    3118:	ldrb	w9, [x8]
    311c:	mov	w10, #0x1                   	// #1
    3120:	lsr	w9, w9, w10
    3124:	and	w9, w9, w10
    3128:	and	w9, w9, #0xff
    312c:	ldur	x8, [x29, #-40]
    3130:	ldrb	w11, [x8, #36]
    3134:	and	w9, w9, w10
    3138:	and	w11, w11, #0xfffffffe
    313c:	orr	w9, w11, w9
    3140:	strb	w9, [x8, #36]
    3144:	ldur	x8, [x29, #-24]
    3148:	ldrb	w9, [x8]
    314c:	mov	w11, #0x2                   	// #2
    3150:	lsr	w9, w9, w11
    3154:	and	w9, w9, w10
    3158:	and	w9, w9, #0xff
    315c:	ldur	x8, [x29, #-40]
    3160:	ldrb	w12, [x8, #36]
    3164:	and	w9, w9, w10
    3168:	lsl	w9, w9, w10
    316c:	and	w12, w12, #0xfffffffd
    3170:	orr	w9, w12, w9
    3174:	strb	w9, [x8, #36]
    3178:	ldur	x8, [x29, #-24]
    317c:	ldrb	w9, [x8]
    3180:	mov	w12, #0x3                   	// #3
    3184:	lsr	w9, w9, w12
    3188:	and	w9, w9, w10
    318c:	and	w9, w9, #0xff
    3190:	ldur	x8, [x29, #-40]
    3194:	ldrb	w12, [x8, #36]
    3198:	and	w9, w9, w10
    319c:	lsl	w9, w9, w11
    31a0:	and	w10, w12, #0xfffffffb
    31a4:	orr	w9, w10, w9
    31a8:	strb	w9, [x8, #36]
    31ac:	b	31e0 <tryall_dlopen+0x244>
    31b0:	ldur	x8, [x29, #-32]
    31b4:	mov	w9, #0x0                   	// #0
    31b8:	str	w9, [sp, #12]
    31bc:	cbnz	x8, 31d8 <tryall_dlopen+0x23c>
    31c0:	ldr	x0, [sp, #32]
    31c4:	bl	0 <lt_dlloader_next>
    31c8:	str	x0, [sp, #32]
    31cc:	cmp	x0, #0x0
    31d0:	cset	w8, ne  // ne = any
    31d4:	str	w8, [sp, #12]
    31d8:	ldr	w8, [sp, #12]
    31dc:	tbnz	w8, #0, 30bc <tryall_dlopen+0x120>
    31e0:	ldur	x8, [x29, #-32]
    31e4:	cbz	x8, 31f4 <tryall_dlopen+0x258>
    31e8:	ldur	x8, [x29, #-40]
    31ec:	ldr	x8, [x8, #56]
    31f0:	cbz	x8, 3204 <tryall_dlopen+0x268>
    31f4:	ldur	x8, [x29, #-32]
    31f8:	cbnz	x8, 3230 <tryall_dlopen+0x294>
    31fc:	ldr	x8, [sp, #32]
    3200:	cbnz	x8, 3230 <tryall_dlopen+0x294>
    3204:	ldur	x8, [x29, #-40]
    3208:	ldr	x0, [x8, #16]
    320c:	bl	0 <free>
    3210:	ldur	x8, [x29, #-40]
    3214:	mov	x9, xzr
    3218:	str	x9, [x8, #16]
    321c:	str	x9, [sp, #16]
    3220:	ldr	w10, [sp, #44]
    3224:	add	w10, w10, #0x1
    3228:	str	w10, [sp, #44]
    322c:	b	3244 <tryall_dlopen+0x2a8>
    3230:	ldr	x8, [sp, #24]
    3234:	ldur	x9, [x29, #-40]
    3238:	str	x8, [x9, #8]
    323c:	ldr	x0, [sp, #48]
    3240:	bl	0 <lt__set_last_error>
    3244:	ldr	w0, [sp, #44]
    3248:	ldp	x29, x30, [sp, #96]
    324c:	add	sp, sp, #0x70
    3250:	ret

0000000000003254 <find_file>:
    3254:	sub	sp, sp, #0x30
    3258:	stp	x29, x30, [sp, #32]
    325c:	add	x29, sp, #0x20
    3260:	mov	x8, xzr
    3264:	adrp	x9, 0 <lt__alloc_die_callback>
    3268:	add	x9, x9, #0x0
    326c:	mov	x4, sp
    3270:	stur	x0, [x29, #-8]
    3274:	str	x1, [sp, #16]
    3278:	str	x2, [sp, #8]
    327c:	str	x8, [sp]
    3280:	ldur	x0, [x29, #-8]
    3284:	ldr	x1, [sp, #16]
    3288:	ldr	x3, [sp, #8]
    328c:	mov	x2, x9
    3290:	bl	19f4 <foreach_dirinpath>
    3294:	ldr	x8, [sp]
    3298:	mov	x0, x8
    329c:	ldp	x29, x30, [sp, #32]
    32a0:	add	sp, sp, #0x30
    32a4:	ret

00000000000032a8 <parse_dotla_file>:
    32a8:	sub	sp, sp, #0x80
    32ac:	stp	x29, x30, [sp, #112]
    32b0:	add	x29, sp, #0x70
    32b4:	mov	x8, #0x800                 	// #2048
    32b8:	mov	x9, #0x1                   	// #1
    32bc:	stur	x0, [x29, #-16]
    32c0:	stur	x1, [x29, #-24]
    32c4:	stur	x2, [x29, #-32]
    32c8:	stur	x3, [x29, #-40]
    32cc:	stur	x4, [x29, #-48]
    32d0:	str	x5, [sp, #56]
    32d4:	str	wzr, [sp, #52]
    32d8:	str	x8, [sp, #40]
    32dc:	ldr	x8, [sp, #40]
    32e0:	mul	x0, x8, x9
    32e4:	bl	0 <lt__malloc>
    32e8:	str	x0, [sp, #32]
    32ec:	ldr	x8, [sp, #32]
    32f0:	cbnz	x8, 330c <parse_dotla_file+0x64>
    32f4:	mov	w0, #0x5                   	// #5
    32f8:	bl	0 <lt__error_string>
    32fc:	bl	0 <lt__set_last_error>
    3300:	mov	w8, #0x1                   	// #1
    3304:	stur	w8, [x29, #-4]
    3308:	b	368c <parse_dotla_file+0x3e4>
    330c:	ldur	x0, [x29, #-16]
    3310:	bl	0 <feof>
    3314:	cmp	w0, #0x0
    3318:	cset	w8, ne  // ne = any
    331c:	eor	w8, w8, #0x1
    3320:	tbnz	w8, #0, 3328 <parse_dotla_file+0x80>
    3324:	b	3670 <parse_dotla_file+0x3c8>
    3328:	ldr	x8, [sp, #32]
    332c:	ldr	x9, [sp, #40]
    3330:	subs	x9, x9, #0x2
    3334:	add	x8, x8, x9
    3338:	mov	w10, #0x0                   	// #0
    333c:	strb	w10, [x8]
    3340:	ldr	x0, [sp, #32]
    3344:	ldr	x8, [sp, #40]
    3348:	ldur	x2, [x29, #-16]
    334c:	mov	w1, w8
    3350:	bl	0 <fgets>
    3354:	cbnz	x0, 335c <parse_dotla_file+0xb4>
    3358:	b	3670 <parse_dotla_file+0x3c8>
    335c:	ldr	x8, [sp, #32]
    3360:	ldr	x9, [sp, #40]
    3364:	subs	x9, x9, #0x2
    3368:	ldrb	w10, [x8, x9]
    336c:	mov	w11, #0x0                   	// #0
    3370:	str	w11, [sp, #12]
    3374:	cbz	w10, 33b0 <parse_dotla_file+0x108>
    3378:	ldr	x8, [sp, #32]
    337c:	ldr	x9, [sp, #40]
    3380:	subs	x9, x9, #0x2
    3384:	ldrb	w10, [x8, x9]
    3388:	mov	w11, #0x0                   	// #0
    338c:	cmp	w10, #0xa
    3390:	str	w11, [sp, #12]
    3394:	b.eq	33b0 <parse_dotla_file+0x108>  // b.none
    3398:	ldur	x0, [x29, #-16]
    339c:	bl	0 <feof>
    33a0:	cmp	w0, #0x0
    33a4:	cset	w8, ne  // ne = any
    33a8:	eor	w8, w8, #0x1
    33ac:	str	w8, [sp, #12]
    33b0:	ldr	w8, [sp, #12]
    33b4:	tbnz	w8, #0, 33bc <parse_dotla_file+0x114>
    33b8:	b	3450 <parse_dotla_file+0x1a8>
    33bc:	ldr	x0, [sp, #32]
    33c0:	ldr	x8, [sp, #40]
    33c4:	mov	x9, #0x2                   	// #2
    33c8:	mul	x8, x8, x9
    33cc:	mov	x9, #0x1                   	// #1
    33d0:	mul	x1, x8, x9
    33d4:	bl	0 <lt__realloc>
    33d8:	str	x0, [sp, #32]
    33dc:	ldr	x8, [sp, #32]
    33e0:	cbnz	x8, 33f4 <parse_dotla_file+0x14c>
    33e4:	ldr	w8, [sp, #52]
    33e8:	add	w8, w8, #0x1
    33ec:	str	w8, [sp, #52]
    33f0:	b	3670 <parse_dotla_file+0x3c8>
    33f4:	ldr	x8, [sp, #32]
    33f8:	ldr	x9, [sp, #40]
    33fc:	mov	x10, #0x2                   	// #2
    3400:	mul	x9, x9, x10
    3404:	subs	x9, x9, #0x2
    3408:	add	x8, x8, x9
    340c:	mov	w11, #0x0                   	// #0
    3410:	strb	w11, [x8]
    3414:	ldr	x8, [sp, #32]
    3418:	ldr	x9, [sp, #40]
    341c:	subs	x9, x9, #0x1
    3420:	add	x0, x8, x9
    3424:	ldr	x8, [sp, #40]
    3428:	add	w1, w8, #0x1
    342c:	ldur	x2, [x29, #-16]
    3430:	bl	0 <fgets>
    3434:	cbnz	x0, 343c <parse_dotla_file+0x194>
    3438:	b	3450 <parse_dotla_file+0x1a8>
    343c:	ldr	x8, [sp, #40]
    3440:	mov	x9, #0x2                   	// #2
    3444:	mul	x8, x8, x9
    3448:	str	x8, [sp, #40]
    344c:	b	335c <parse_dotla_file+0xb4>
    3450:	ldr	x8, [sp, #32]
    3454:	ldrb	w9, [x8]
    3458:	cmp	w9, #0xa
    345c:	b.eq	3470 <parse_dotla_file+0x1c8>  // b.none
    3460:	ldr	x8, [sp, #32]
    3464:	ldrb	w9, [x8]
    3468:	cmp	w9, #0x23
    346c:	b.ne	3474 <parse_dotla_file+0x1cc>  // b.any
    3470:	b	330c <parse_dotla_file+0x64>
    3474:	ldr	x0, [sp, #32]
    3478:	adrp	x1, 0 <lt__alloc_die_callback>
    347c:	add	x1, x1, #0x0
    3480:	mov	x2, #0x7                   	// #7
    3484:	bl	0 <strncmp>
    3488:	cbnz	w0, 34ac <parse_dotla_file+0x204>
    348c:	ldur	x0, [x29, #-24]
    3490:	ldr	x8, [sp, #32]
    3494:	add	x1, x8, #0x7
    3498:	bl	39c8 <trim>
    349c:	ldr	w9, [sp, #52]
    34a0:	add	w9, w9, w0
    34a4:	str	w9, [sp, #52]
    34a8:	b	3660 <parse_dotla_file+0x3b8>
    34ac:	ldr	x0, [sp, #32]
    34b0:	adrp	x1, 0 <lt__alloc_die_callback>
    34b4:	add	x1, x1, #0x0
    34b8:	mov	x2, #0xc                   	// #12
    34bc:	bl	0 <strncmp>
    34c0:	cbnz	w0, 34e4 <parse_dotla_file+0x23c>
    34c4:	ldur	x0, [x29, #-48]
    34c8:	ldr	x8, [sp, #32]
    34cc:	add	x1, x8, #0xc
    34d0:	bl	39c8 <trim>
    34d4:	ldr	w9, [sp, #52]
    34d8:	add	w9, w9, w0
    34dc:	str	w9, [sp, #52]
    34e0:	b	3660 <parse_dotla_file+0x3b8>
    34e4:	ldr	x0, [sp, #32]
    34e8:	adrp	x1, 0 <lt__alloc_die_callback>
    34ec:	add	x1, x1, #0x0
    34f0:	mov	x2, #0x7                   	// #7
    34f4:	bl	0 <strncmp>
    34f8:	cbnz	w0, 351c <parse_dotla_file+0x274>
    34fc:	ldur	x0, [x29, #-32]
    3500:	ldr	x8, [sp, #32]
    3504:	add	x1, x8, #0x7
    3508:	bl	39c8 <trim>
    350c:	ldr	w9, [sp, #52]
    3510:	add	w9, w9, w0
    3514:	str	w9, [sp, #52]
    3518:	b	3660 <parse_dotla_file+0x3b8>
    351c:	ldr	x0, [sp, #32]
    3520:	adrp	x1, 0 <lt__alloc_die_callback>
    3524:	add	x1, x1, #0x0
    3528:	mov	x2, #0x10                  	// #16
    352c:	bl	0 <strncmp>
    3530:	cbnz	w0, 3554 <parse_dotla_file+0x2ac>
    3534:	ldur	x0, [x29, #-40]
    3538:	ldr	x8, [sp, #32]
    353c:	add	x1, x8, #0x10
    3540:	bl	39c8 <trim>
    3544:	ldr	w9, [sp, #52]
    3548:	add	w9, w9, w0
    354c:	str	w9, [sp, #52]
    3550:	b	3660 <parse_dotla_file+0x3b8>
    3554:	ldr	x0, [sp, #32]
    3558:	adrp	x1, 0 <lt__alloc_die_callback>
    355c:	add	x1, x1, #0x0
    3560:	bl	0 <strcmp>
    3564:	cbnz	w0, 3578 <parse_dotla_file+0x2d0>
    3568:	ldr	x8, [sp, #56]
    356c:	mov	w9, #0x1                   	// #1
    3570:	str	w9, [x8]
    3574:	b	3660 <parse_dotla_file+0x3b8>
    3578:	ldr	x0, [sp, #32]
    357c:	adrp	x1, 0 <lt__alloc_die_callback>
    3580:	add	x1, x1, #0x0
    3584:	bl	0 <strcmp>
    3588:	cbnz	w0, 3598 <parse_dotla_file+0x2f0>
    358c:	ldr	x8, [sp, #56]
    3590:	str	wzr, [x8]
    3594:	b	3660 <parse_dotla_file+0x3b8>
    3598:	ldur	x8, [x29, #-24]
    359c:	ldr	x8, [x8]
    35a0:	cbnz	x8, 3660 <parse_dotla_file+0x3b8>
    35a4:	ldr	x0, [sp, #32]
    35a8:	adrp	x1, 0 <lt__alloc_die_callback>
    35ac:	add	x1, x1, #0x0
    35b0:	mov	x2, #0xe                   	// #14
    35b4:	bl	0 <strncmp>
    35b8:	cbnz	w0, 3660 <parse_dotla_file+0x3b8>
    35bc:	ldur	x0, [x29, #-24]
    35c0:	ldr	x8, [sp, #32]
    35c4:	add	x1, x8, #0xe
    35c8:	bl	39c8 <trim>
    35cc:	ldr	w9, [sp, #52]
    35d0:	add	w9, w9, w0
    35d4:	str	w9, [sp, #52]
    35d8:	ldr	w9, [sp, #52]
    35dc:	cbnz	w9, 3660 <parse_dotla_file+0x3b8>
    35e0:	ldur	x8, [x29, #-24]
    35e4:	ldr	x8, [x8]
    35e8:	cbz	x8, 3660 <parse_dotla_file+0x3b8>
    35ec:	ldur	x8, [x29, #-24]
    35f0:	ldr	x0, [x8]
    35f4:	mov	w1, #0x20                  	// #32
    35f8:	bl	0 <strrchr>
    35fc:	str	x0, [sp, #24]
    3600:	cbz	x0, 3660 <parse_dotla_file+0x3b8>
    3604:	ldr	x8, [sp, #24]
    3608:	add	x0, x8, #0x1
    360c:	bl	0 <lt__strdup>
    3610:	str	x0, [sp, #24]
    3614:	ldr	x8, [sp, #24]
    3618:	cbnz	x8, 362c <parse_dotla_file+0x384>
    361c:	ldr	w8, [sp, #52]
    3620:	add	w8, w8, #0x1
    3624:	str	w8, [sp, #52]
    3628:	b	3670 <parse_dotla_file+0x3c8>
    362c:	ldur	x8, [x29, #-24]
    3630:	ldr	x8, [x8]
    3634:	ldr	x9, [sp, #24]
    3638:	cmp	x8, x9
    363c:	b.eq	3660 <parse_dotla_file+0x3b8>  // b.none
    3640:	ldur	x8, [x29, #-24]
    3644:	ldr	x0, [x8]
    3648:	bl	0 <free>
    364c:	ldr	x8, [sp, #24]
    3650:	ldur	x9, [x29, #-24]
    3654:	str	x8, [x9]
    3658:	mov	x8, xzr
    365c:	str	x8, [sp, #24]
    3660:	ldr	w8, [sp, #52]
    3664:	cbz	w8, 366c <parse_dotla_file+0x3c4>
    3668:	b	3670 <parse_dotla_file+0x3c8>
    366c:	b	330c <parse_dotla_file+0x64>
    3670:	ldr	x0, [sp, #32]
    3674:	bl	0 <free>
    3678:	mov	x8, xzr
    367c:	str	x8, [sp, #32]
    3680:	str	x8, [sp, #16]
    3684:	ldr	w9, [sp, #52]
    3688:	stur	w9, [x29, #-4]
    368c:	ldur	w0, [x29, #-4]
    3690:	ldp	x29, x30, [sp, #112]
    3694:	add	sp, sp, #0x80
    3698:	ret

000000000000369c <load_deplibs>:
    369c:	sub	sp, sp, #0x10
    36a0:	mov	w8, wzr
    36a4:	str	x0, [sp, #8]
    36a8:	str	x1, [sp]
    36ac:	ldr	x9, [sp, #8]
    36b0:	str	wzr, [x9, #40]
    36b4:	mov	w0, w8
    36b8:	add	sp, sp, #0x10
    36bc:	ret

00000000000036c0 <find_module>:
    36c0:	sub	sp, sp, #0x70
    36c4:	stp	x29, x30, [sp, #96]
    36c8:	add	x29, sp, #0x60
    36cc:	stur	x0, [x29, #-16]
    36d0:	stur	x1, [x29, #-24]
    36d4:	stur	x2, [x29, #-32]
    36d8:	stur	x3, [x29, #-40]
    36dc:	str	x4, [sp, #48]
    36e0:	str	w5, [sp, #44]
    36e4:	str	x6, [sp, #32]
    36e8:	ldr	x8, [sp, #48]
    36ec:	cbz	x8, 3740 <find_module+0x80>
    36f0:	ldur	x0, [x29, #-16]
    36f4:	ldr	x1, [sp, #48]
    36f8:	ldr	x2, [sp, #32]
    36fc:	adrp	x8, 0 <lt__alloc_die_callback>
    3700:	add	x8, x8, #0x0
    3704:	str	x0, [sp, #24]
    3708:	mov	x0, x8
    370c:	str	x1, [sp, #16]
    3710:	str	x2, [sp, #8]
    3714:	bl	0 <lt_dlloader_find>
    3718:	ldr	x8, [sp, #24]
    371c:	str	x0, [sp]
    3720:	mov	x0, x8
    3724:	ldr	x1, [sp, #16]
    3728:	ldr	x2, [sp, #8]
    372c:	ldr	x3, [sp]
    3730:	bl	2f9c <tryall_dlopen>
    3734:	cbnz	w0, 3740 <find_module+0x80>
    3738:	stur	wzr, [x29, #-4]
    373c:	b	37e8 <find_module+0x128>
    3740:	ldur	x8, [x29, #-40]
    3744:	cbz	x8, 37e0 <find_module+0x120>
    3748:	ldr	w8, [sp, #44]
    374c:	cbz	w8, 3780 <find_module+0xc0>
    3750:	ldur	x8, [x29, #-32]
    3754:	cbz	x8, 3780 <find_module+0xc0>
    3758:	ldur	x0, [x29, #-16]
    375c:	ldur	x2, [x29, #-32]
    3760:	ldur	x3, [x29, #-40]
    3764:	ldr	x4, [sp, #32]
    3768:	mov	x8, xzr
    376c:	mov	x1, x8
    3770:	bl	3b20 <tryall_dlopen_module>
    3774:	cbnz	w0, 3780 <find_module+0xc0>
    3778:	stur	wzr, [x29, #-4]
    377c:	b	37e8 <find_module+0x128>
    3780:	ldr	w8, [sp, #44]
    3784:	cbnz	w8, 37b0 <find_module+0xf0>
    3788:	ldur	x0, [x29, #-16]
    378c:	ldur	x1, [x29, #-24]
    3790:	ldur	x3, [x29, #-40]
    3794:	ldr	x4, [sp, #32]
    3798:	adrp	x2, 0 <lt__alloc_die_callback>
    379c:	add	x2, x2, #0x0
    37a0:	bl	3b20 <tryall_dlopen_module>
    37a4:	cbnz	w0, 37b0 <find_module+0xf0>
    37a8:	stur	wzr, [x29, #-4]
    37ac:	b	37e8 <find_module+0x128>
    37b0:	ldur	x8, [x29, #-24]
    37b4:	cbz	x8, 37e0 <find_module+0x120>
    37b8:	ldur	x0, [x29, #-16]
    37bc:	ldur	x2, [x29, #-24]
    37c0:	ldur	x3, [x29, #-40]
    37c4:	ldr	x4, [sp, #32]
    37c8:	mov	x8, xzr
    37cc:	mov	x1, x8
    37d0:	bl	3b20 <tryall_dlopen_module>
    37d4:	cbnz	w0, 37e0 <find_module+0x120>
    37d8:	stur	wzr, [x29, #-4]
    37dc:	b	37e8 <find_module+0x128>
    37e0:	mov	w8, #0x1                   	// #1
    37e4:	stur	w8, [x29, #-4]
    37e8:	ldur	w0, [x29, #-4]
    37ec:	ldp	x29, x30, [sp, #96]
    37f0:	add	sp, sp, #0x70
    37f4:	ret

00000000000037f8 <find_handle>:
    37f8:	sub	sp, sp, #0x40
    37fc:	stp	x29, x30, [sp, #48]
    3800:	add	x29, sp, #0x30
    3804:	stur	x0, [x29, #-16]
    3808:	str	x1, [sp, #24]
    380c:	str	x2, [sp, #16]
    3810:	str	x3, [sp, #8]
    3814:	ldur	x8, [x29, #-16]
    3818:	cbnz	x8, 3828 <find_handle+0x30>
    381c:	mov	x8, xzr
    3820:	stur	x8, [x29, #-8]
    3824:	b	385c <find_handle+0x64>
    3828:	ldur	x0, [x29, #-16]
    382c:	ldr	x1, [sp, #24]
    3830:	ldr	x3, [sp, #16]
    3834:	ldr	x4, [sp, #8]
    3838:	adrp	x2, 0 <lt__alloc_die_callback>
    383c:	add	x2, x2, #0x0
    3840:	bl	19f4 <foreach_dirinpath>
    3844:	cbnz	w0, 3854 <find_handle+0x5c>
    3848:	mov	x8, xzr
    384c:	stur	x8, [x29, #-8]
    3850:	b	385c <find_handle+0x64>
    3854:	ldr	x8, [sp, #16]
    3858:	stur	x8, [x29, #-8]
    385c:	ldur	x0, [x29, #-8]
    3860:	ldp	x29, x30, [sp, #48]
    3864:	add	sp, sp, #0x40
    3868:	ret

000000000000386c <find_file_callback>:
    386c:	sub	sp, sp, #0x60
    3870:	stp	x29, x30, [sp, #80]
    3874:	add	x29, sp, #0x50
    3878:	adrp	x8, 0 <lt__alloc_die_callback>
    387c:	add	x8, x8, #0x0
    3880:	adrp	x9, 0 <lt__alloc_die_callback>
    3884:	add	x9, x9, #0x0
    3888:	stur	x0, [x29, #-8]
    388c:	stur	x1, [x29, #-16]
    3890:	stur	x2, [x29, #-24]
    3894:	ldur	x10, [x29, #-16]
    3898:	stur	x10, [x29, #-32]
    389c:	ldur	x10, [x29, #-24]
    38a0:	str	x10, [sp, #40]
    38a4:	str	wzr, [sp, #36]
    38a8:	ldur	x10, [x29, #-8]
    38ac:	str	x8, [sp, #8]
    38b0:	str	x9, [sp]
    38b4:	cbz	x10, 38c8 <find_file_callback+0x5c>
    38b8:	ldur	x8, [x29, #-8]
    38bc:	ldrb	w9, [x8]
    38c0:	cbz	w9, 38c8 <find_file_callback+0x5c>
    38c4:	b	38e0 <find_file_callback+0x74>
    38c8:	adrp	x0, 0 <lt__alloc_die_callback>
    38cc:	add	x0, x0, #0x0
    38d0:	ldr	x1, [sp, #8]
    38d4:	mov	w2, #0x2f0                 	// #752
    38d8:	ldr	x3, [sp]
    38dc:	bl	0 <__assert_fail>
    38e0:	ldur	x8, [x29, #-32]
    38e4:	cbz	x8, 38ec <find_file_callback+0x80>
    38e8:	b	3904 <find_file_callback+0x98>
    38ec:	adrp	x0, 0 <lt__alloc_die_callback>
    38f0:	add	x0, x0, #0x0
    38f4:	ldr	x1, [sp, #8]
    38f8:	mov	w2, #0x2f1                 	// #753
    38fc:	ldr	x3, [sp]
    3900:	bl	0 <__assert_fail>
    3904:	ldr	x8, [sp, #40]
    3908:	cbz	x8, 3910 <find_file_callback+0xa4>
    390c:	b	3928 <find_file_callback+0xbc>
    3910:	adrp	x0, 0 <lt__alloc_die_callback>
    3914:	add	x0, x0, #0x0
    3918:	ldr	x1, [sp, #8]
    391c:	mov	w2, #0x2f2                 	// #754
    3920:	ldr	x3, [sp]
    3924:	bl	0 <__assert_fail>
    3928:	ldur	x0, [x29, #-8]
    392c:	adrp	x1, 0 <lt__alloc_die_callback>
    3930:	add	x1, x1, #0x0
    3934:	bl	0 <fopen>
    3938:	ldr	x8, [sp, #40]
    393c:	str	x0, [x8]
    3940:	cbz	x0, 39b8 <find_file_callback+0x14c>
    3944:	ldur	x0, [x29, #-8]
    3948:	mov	w1, #0x2f                  	// #47
    394c:	bl	0 <strrchr>
    3950:	str	x0, [sp, #24]
    3954:	ldr	x8, [sp, #24]
    3958:	ldur	x9, [x29, #-8]
    395c:	cmp	x8, x9
    3960:	b.ls	3970 <find_file_callback+0x104>  // b.plast
    3964:	ldr	x8, [sp, #24]
    3968:	mov	w9, #0x0                   	// #0
    396c:	strb	w9, [x8]
    3970:	ldur	x8, [x29, #-32]
    3974:	ldr	x0, [x8]
    3978:	bl	0 <free>
    397c:	ldur	x8, [x29, #-32]
    3980:	mov	x9, xzr
    3984:	str	x9, [x8]
    3988:	str	x9, [sp, #16]
    398c:	ldur	x0, [x29, #-8]
    3990:	bl	0 <lt__strdup>
    3994:	ldur	x8, [x29, #-32]
    3998:	str	x0, [x8]
    399c:	ldur	x8, [x29, #-32]
    39a0:	ldr	x8, [x8]
    39a4:	mov	w10, #0x1                   	// #1
    39a8:	mov	w11, #0xffffffff            	// #-1
    39ac:	cmp	x8, #0x0
    39b0:	csel	w10, w11, w10, eq  // eq = none
    39b4:	str	w10, [sp, #36]
    39b8:	ldr	w0, [sp, #36]
    39bc:	ldp	x29, x30, [sp, #80]
    39c0:	add	sp, sp, #0x60
    39c4:	ret

00000000000039c8 <trim>:
    39c8:	sub	sp, sp, #0x50
    39cc:	stp	x29, x30, [sp, #64]
    39d0:	add	x29, sp, #0x40
    39d4:	mov	w8, #0x27                  	// #39
    39d8:	stur	x0, [x29, #-16]
    39dc:	stur	x1, [x29, #-24]
    39e0:	ldur	x0, [x29, #-24]
    39e4:	mov	w1, w8
    39e8:	bl	0 <strrchr>
    39ec:	str	x0, [sp, #32]
    39f0:	ldur	x9, [x29, #-24]
    39f4:	cbz	x9, 3a14 <trim+0x4c>
    39f8:	ldur	x8, [x29, #-24]
    39fc:	ldrb	w9, [x8]
    3a00:	cbz	w9, 3a14 <trim+0x4c>
    3a04:	ldur	x0, [x29, #-24]
    3a08:	bl	0 <strlen>
    3a0c:	str	x0, [sp]
    3a10:	b	3a1c <trim+0x54>
    3a14:	mov	x8, xzr
    3a18:	str	x8, [sp]
    3a1c:	ldr	x8, [sp]
    3a20:	str	x8, [sp, #24]
    3a24:	ldur	x8, [x29, #-16]
    3a28:	ldr	x0, [x8]
    3a2c:	bl	0 <free>
    3a30:	ldur	x8, [x29, #-16]
    3a34:	mov	x9, xzr
    3a38:	str	x9, [x8]
    3a3c:	str	x9, [sp, #8]
    3a40:	ldr	x8, [sp, #32]
    3a44:	cbz	x8, 3a58 <trim+0x90>
    3a48:	ldr	x8, [sp, #32]
    3a4c:	ldur	x9, [x29, #-24]
    3a50:	cmp	x8, x9
    3a54:	b.ne	3a64 <trim+0x9c>  // b.any
    3a58:	mov	w8, #0x1                   	// #1
    3a5c:	stur	w8, [x29, #-4]
    3a60:	b	3b10 <trim+0x148>
    3a64:	ldr	x8, [sp, #24]
    3a68:	cmp	x8, #0x3
    3a6c:	b.ls	3b00 <trim+0x138>  // b.plast
    3a70:	ldur	x8, [x29, #-24]
    3a74:	ldrb	w9, [x8]
    3a78:	cmp	w9, #0x27
    3a7c:	b.ne	3b00 <trim+0x138>  // b.any
    3a80:	ldr	x8, [sp, #32]
    3a84:	ldur	x9, [x29, #-24]
    3a88:	subs	x8, x8, x9
    3a8c:	mov	x9, #0x1                   	// #1
    3a90:	mul	x0, x8, x9
    3a94:	bl	0 <lt__malloc>
    3a98:	str	x0, [sp, #16]
    3a9c:	ldr	x8, [sp, #16]
    3aa0:	cbnz	x8, 3ab0 <trim+0xe8>
    3aa4:	mov	w8, #0x1                   	// #1
    3aa8:	stur	w8, [x29, #-4]
    3aac:	b	3b10 <trim+0x148>
    3ab0:	ldr	x0, [sp, #16]
    3ab4:	ldur	x8, [x29, #-24]
    3ab8:	add	x1, x8, #0x1
    3abc:	ldr	x8, [sp, #32]
    3ac0:	ldur	x9, [x29, #-24]
    3ac4:	subs	x8, x8, x9
    3ac8:	subs	x2, x8, #0x1
    3acc:	bl	0 <memcpy>
    3ad0:	ldr	x8, [sp, #16]
    3ad4:	ldr	x9, [sp, #32]
    3ad8:	ldur	x10, [x29, #-24]
    3adc:	subs	x9, x9, x10
    3ae0:	subs	x9, x9, #0x1
    3ae4:	add	x8, x8, x9
    3ae8:	mov	w11, #0x0                   	// #0
    3aec:	strb	w11, [x8]
    3af0:	ldr	x8, [sp, #16]
    3af4:	ldur	x9, [x29, #-16]
    3af8:	str	x8, [x9]
    3afc:	b	3b0c <trim+0x144>
    3b00:	ldur	x8, [x29, #-16]
    3b04:	mov	x9, xzr
    3b08:	str	x9, [x8]
    3b0c:	stur	wzr, [x29, #-4]
    3b10:	ldur	w0, [x29, #-4]
    3b14:	ldp	x29, x30, [sp, #64]
    3b18:	add	sp, sp, #0x50
    3b1c:	ret

0000000000003b20 <tryall_dlopen_module>:
    3b20:	sub	sp, sp, #0x90
    3b24:	stp	x29, x30, [sp, #128]
    3b28:	add	x29, sp, #0x80
    3b2c:	mov	x8, xzr
    3b30:	adrp	x9, 0 <lt__alloc_die_callback>
    3b34:	add	x9, x9, #0x0
    3b38:	adrp	x10, 0 <lt__alloc_die_callback>
    3b3c:	add	x10, x10, #0x0
    3b40:	stur	x0, [x29, #-16]
    3b44:	stur	x1, [x29, #-24]
    3b48:	stur	x2, [x29, #-32]
    3b4c:	stur	x3, [x29, #-40]
    3b50:	stur	x4, [x29, #-48]
    3b54:	stur	wzr, [x29, #-52]
    3b58:	str	x8, [sp, #64]
    3b5c:	str	xzr, [sp, #56]
    3b60:	ldur	x8, [x29, #-32]
    3b64:	str	x9, [sp, #32]
    3b68:	str	x10, [sp, #24]
    3b6c:	cbz	x8, 3b8c <tryall_dlopen_module+0x6c>
    3b70:	ldur	x8, [x29, #-32]
    3b74:	ldrb	w9, [x8]
    3b78:	cbz	w9, 3b8c <tryall_dlopen_module+0x6c>
    3b7c:	ldur	x0, [x29, #-32]
    3b80:	bl	0 <strlen>
    3b84:	str	x0, [sp, #16]
    3b88:	b	3b94 <tryall_dlopen_module+0x74>
    3b8c:	mov	x8, xzr
    3b90:	str	x8, [sp, #16]
    3b94:	ldr	x8, [sp, #16]
    3b98:	str	x8, [sp, #48]
    3b9c:	ldur	x8, [x29, #-16]
    3ba0:	cbz	x8, 3ba8 <tryall_dlopen_module+0x88>
    3ba4:	b	3bc0 <tryall_dlopen_module+0xa0>
    3ba8:	adrp	x0, 0 <lt__alloc_die_callback>
    3bac:	add	x0, x0, #0x0
    3bb0:	ldr	x1, [sp, #32]
    3bb4:	mov	w2, #0x1f6                 	// #502
    3bb8:	ldr	x3, [sp, #24]
    3bbc:	bl	0 <__assert_fail>
    3bc0:	ldur	x8, [x29, #-32]
    3bc4:	cbz	x8, 3bcc <tryall_dlopen_module+0xac>
    3bc8:	b	3be4 <tryall_dlopen_module+0xc4>
    3bcc:	adrp	x0, 0 <lt__alloc_die_callback>
    3bd0:	add	x0, x0, #0x0
    3bd4:	ldr	x1, [sp, #32]
    3bd8:	mov	w2, #0x1f7                 	// #503
    3bdc:	ldr	x3, [sp, #24]
    3be0:	bl	0 <__assert_fail>
    3be4:	ldur	x8, [x29, #-40]
    3be8:	cbz	x8, 3bf0 <tryall_dlopen_module+0xd0>
    3bec:	b	3c08 <tryall_dlopen_module+0xe8>
    3bf0:	adrp	x0, 0 <lt__alloc_die_callback>
    3bf4:	add	x0, x0, #0x0
    3bf8:	ldr	x1, [sp, #32]
    3bfc:	mov	w2, #0x1f8                 	// #504
    3c00:	ldr	x3, [sp, #24]
    3c04:	bl	0 <__assert_fail>
    3c08:	ldr	x8, [sp, #48]
    3c0c:	cmp	x8, #0x0
    3c10:	cset	w9, ls  // ls = plast
    3c14:	tbnz	w9, #0, 3c3c <tryall_dlopen_module+0x11c>
    3c18:	ldur	x8, [x29, #-32]
    3c1c:	ldr	x9, [sp, #48]
    3c20:	subs	x9, x9, #0x1
    3c24:	ldrb	w10, [x8, x9]
    3c28:	cmp	w10, #0x2f
    3c2c:	b.ne	3c3c <tryall_dlopen_module+0x11c>  // b.any
    3c30:	ldr	x8, [sp, #48]
    3c34:	subs	x8, x8, #0x1
    3c38:	str	x8, [sp, #48]
    3c3c:	ldr	x8, [sp, #48]
    3c40:	add	x8, x8, #0x1
    3c44:	ldur	x9, [x29, #-40]
    3c48:	str	x8, [sp, #8]
    3c4c:	cbz	x9, 3c6c <tryall_dlopen_module+0x14c>
    3c50:	ldur	x8, [x29, #-40]
    3c54:	ldrb	w9, [x8]
    3c58:	cbz	w9, 3c6c <tryall_dlopen_module+0x14c>
    3c5c:	ldur	x0, [x29, #-40]
    3c60:	bl	0 <strlen>
    3c64:	str	x0, [sp]
    3c68:	b	3c74 <tryall_dlopen_module+0x154>
    3c6c:	mov	x8, xzr
    3c70:	str	x8, [sp]
    3c74:	ldr	x8, [sp]
    3c78:	ldr	x9, [sp, #8]
    3c7c:	add	x8, x9, x8
    3c80:	str	x8, [sp, #56]
    3c84:	ldr	x8, [sp, #56]
    3c88:	mov	x10, #0x1                   	// #1
    3c8c:	add	x8, x8, #0x1
    3c90:	mul	x0, x8, x10
    3c94:	bl	0 <lt__malloc>
    3c98:	str	x0, [sp, #64]
    3c9c:	ldr	x8, [sp, #64]
    3ca0:	cbnz	x8, 3cb0 <tryall_dlopen_module+0x190>
    3ca4:	mov	w8, #0x1                   	// #1
    3ca8:	stur	w8, [x29, #-4]
    3cac:	b	3d48 <tryall_dlopen_module+0x228>
    3cb0:	ldr	x0, [sp, #64]
    3cb4:	ldr	x8, [sp, #48]
    3cb8:	ldur	x3, [x29, #-32]
    3cbc:	ldur	x4, [x29, #-40]
    3cc0:	adrp	x1, 0 <lt__alloc_die_callback>
    3cc4:	add	x1, x1, #0x0
    3cc8:	mov	w2, w8
    3ccc:	bl	0 <sprintf>
    3cd0:	ldur	x9, [x29, #-24]
    3cd4:	cbz	x9, 3d04 <tryall_dlopen_module+0x1e4>
    3cd8:	ldur	x0, [x29, #-16]
    3cdc:	ldur	x2, [x29, #-24]
    3ce0:	ldr	x3, [sp, #64]
    3ce4:	ldur	x4, [x29, #-48]
    3ce8:	mov	x8, xzr
    3cec:	mov	x1, x8
    3cf0:	bl	3b20 <tryall_dlopen_module>
    3cf4:	ldur	w9, [x29, #-52]
    3cf8:	add	w9, w9, w0
    3cfc:	stur	w9, [x29, #-52]
    3d00:	b	3d2c <tryall_dlopen_module+0x20c>
    3d04:	ldur	x0, [x29, #-16]
    3d08:	ldr	x1, [sp, #64]
    3d0c:	ldur	x2, [x29, #-48]
    3d10:	mov	x8, xzr
    3d14:	mov	x3, x8
    3d18:	bl	2f9c <tryall_dlopen>
    3d1c:	cbz	w0, 3d2c <tryall_dlopen_module+0x20c>
    3d20:	ldur	w8, [x29, #-52]
    3d24:	add	w8, w8, #0x1
    3d28:	stur	w8, [x29, #-52]
    3d2c:	ldr	x0, [sp, #64]
    3d30:	bl	0 <free>
    3d34:	mov	x8, xzr
    3d38:	str	x8, [sp, #64]
    3d3c:	str	x8, [sp, #40]
    3d40:	ldur	w9, [x29, #-52]
    3d44:	stur	w9, [x29, #-4]
    3d48:	ldur	w0, [x29, #-4]
    3d4c:	ldp	x29, x30, [sp, #128]
    3d50:	add	sp, sp, #0x90
    3d54:	ret

0000000000003d58 <find_handle_callback>:
    3d58:	sub	sp, sp, #0x50
    3d5c:	stp	x29, x30, [sp, #64]
    3d60:	add	x29, sp, #0x40
    3d64:	mov	w8, #0x4                   	// #4
    3d68:	stur	x0, [x29, #-16]
    3d6c:	stur	x1, [x29, #-24]
    3d70:	str	x2, [sp, #32]
    3d74:	ldur	x9, [x29, #-24]
    3d78:	str	x9, [sp, #24]
    3d7c:	ldur	x0, [x29, #-16]
    3d80:	mov	w1, w8
    3d84:	bl	0 <access>
    3d88:	str	w0, [sp, #20]
    3d8c:	ldr	x9, [sp, #32]
    3d90:	str	x9, [sp, #8]
    3d94:	ldr	w8, [sp, #20]
    3d98:	cbz	w8, 3da4 <find_handle_callback+0x4c>
    3d9c:	stur	wzr, [x29, #-4]
    3da0:	b	3dd4 <find_handle_callback+0x7c>
    3da4:	ldr	x0, [sp, #24]
    3da8:	ldur	x1, [x29, #-16]
    3dac:	ldr	x2, [sp, #8]
    3db0:	mov	x8, xzr
    3db4:	mov	x3, x8
    3db8:	bl	2f9c <tryall_dlopen>
    3dbc:	cbz	w0, 3dcc <find_handle_callback+0x74>
    3dc0:	ldr	x8, [sp, #24]
    3dc4:	mov	x9, xzr
    3dc8:	str	x9, [x8]
    3dcc:	mov	w8, #0x1                   	// #1
    3dd0:	stur	w8, [x29, #-4]
    3dd4:	ldur	w0, [x29, #-4]
    3dd8:	ldp	x29, x30, [sp, #64]
    3ddc:	add	sp, sp, #0x50
    3de0:	ret

0000000000003de4 <argzize_path>:
    3de4:	sub	sp, sp, #0x50
    3de8:	stp	x29, x30, [sp, #64]
    3dec:	add	x29, sp, #0x40
    3df0:	adrp	x8, 0 <lt__alloc_die_callback>
    3df4:	add	x8, x8, #0x0
    3df8:	adrp	x9, 0 <lt__alloc_die_callback>
    3dfc:	add	x9, x9, #0x0
    3e00:	stur	x0, [x29, #-16]
    3e04:	stur	x1, [x29, #-24]
    3e08:	str	x2, [sp, #32]
    3e0c:	ldur	x10, [x29, #-16]
    3e10:	str	x8, [sp, #16]
    3e14:	str	x9, [sp, #8]
    3e18:	cbz	x10, 3e20 <argzize_path+0x3c>
    3e1c:	b	3e38 <argzize_path+0x54>
    3e20:	adrp	x0, 0 <lt__alloc_die_callback>
    3e24:	add	x0, x0, #0x0
    3e28:	ldr	x1, [sp, #16]
    3e2c:	mov	w2, #0x28c                 	// #652
    3e30:	ldr	x3, [sp, #8]
    3e34:	bl	0 <__assert_fail>
    3e38:	ldur	x8, [x29, #-24]
    3e3c:	cbz	x8, 3e44 <argzize_path+0x60>
    3e40:	b	3e5c <argzize_path+0x78>
    3e44:	adrp	x0, 0 <lt__alloc_die_callback>
    3e48:	add	x0, x0, #0x0
    3e4c:	ldr	x1, [sp, #16]
    3e50:	mov	w2, #0x28d                 	// #653
    3e54:	ldr	x3, [sp, #8]
    3e58:	bl	0 <__assert_fail>
    3e5c:	ldr	x8, [sp, #32]
    3e60:	cbz	x8, 3e68 <argzize_path+0x84>
    3e64:	b	3e80 <argzize_path+0x9c>
    3e68:	adrp	x0, 0 <lt__alloc_die_callback>
    3e6c:	add	x0, x0, #0x0
    3e70:	ldr	x1, [sp, #16]
    3e74:	mov	w2, #0x28e                 	// #654
    3e78:	ldr	x3, [sp, #8]
    3e7c:	bl	0 <__assert_fail>
    3e80:	ldur	x0, [x29, #-16]
    3e84:	ldur	x2, [x29, #-24]
    3e88:	ldr	x3, [sp, #32]
    3e8c:	mov	w1, #0x3a                  	// #58
    3e90:	bl	0 <argz_create_sep>
    3e94:	str	w0, [sp, #28]
    3e98:	cbz	w0, 3ee0 <argzize_path+0xfc>
    3e9c:	ldr	w8, [sp, #28]
    3ea0:	cmp	w8, #0xc
    3ea4:	cset	w8, eq  // eq = none
    3ea8:	eor	w8, w8, #0x1
    3eac:	tbnz	w8, #0, 3ec4 <argzize_path+0xe0>
    3eb0:	b	3eb4 <argzize_path+0xd0>
    3eb4:	mov	w0, #0xb                   	// #11
    3eb8:	bl	0 <lt__error_string>
    3ebc:	bl	0 <lt__set_last_error>
    3ec0:	b	3ed4 <argzize_path+0xf0>
    3ec4:	mov	w8, wzr
    3ec8:	mov	w0, w8
    3ecc:	bl	0 <lt__error_string>
    3ed0:	bl	0 <lt__set_last_error>
    3ed4:	mov	w8, #0x1                   	// #1
    3ed8:	stur	w8, [x29, #-4]
    3edc:	b	3ee4 <argzize_path+0x100>
    3ee0:	stur	wzr, [x29, #-4]
    3ee4:	ldur	w0, [x29, #-4]
    3ee8:	ldp	x29, x30, [sp, #64]
    3eec:	add	sp, sp, #0x50
    3ef0:	ret

0000000000003ef4 <list_files_by_dir>:
    3ef4:	sub	sp, sp, #0x60
    3ef8:	stp	x29, x30, [sp, #80]
    3efc:	add	x29, sp, #0x50
    3f00:	mov	x8, xzr
    3f04:	adrp	x9, 0 <lt__alloc_die_callback>
    3f08:	add	x9, x9, #0x0
    3f0c:	adrp	x10, 0 <lt__alloc_die_callback>
    3f10:	add	x10, x10, #0x0
    3f14:	stur	x0, [x29, #-8]
    3f18:	stur	x1, [x29, #-16]
    3f1c:	stur	x2, [x29, #-24]
    3f20:	stur	x8, [x29, #-32]
    3f24:	stur	wzr, [x29, #-36]
    3f28:	ldur	x8, [x29, #-8]
    3f2c:	str	x9, [sp, #24]
    3f30:	str	x10, [sp, #16]
    3f34:	cbz	x8, 3f48 <list_files_by_dir+0x54>
    3f38:	ldur	x8, [x29, #-8]
    3f3c:	ldrb	w9, [x8]
    3f40:	cbz	w9, 3f48 <list_files_by_dir+0x54>
    3f44:	b	3f60 <list_files_by_dir+0x6c>
    3f48:	adrp	x0, 0 <lt__alloc_die_callback>
    3f4c:	add	x0, x0, #0x0
    3f50:	ldr	x1, [sp, #24]
    3f54:	mov	w2, #0x730                 	// #1840
    3f58:	ldr	x3, [sp, #16]
    3f5c:	bl	0 <__assert_fail>
    3f60:	ldur	x8, [x29, #-16]
    3f64:	cbz	x8, 3f6c <list_files_by_dir+0x78>
    3f68:	b	3f84 <list_files_by_dir+0x90>
    3f6c:	adrp	x0, 0 <lt__alloc_die_callback>
    3f70:	add	x0, x0, #0x0
    3f74:	ldr	x1, [sp, #24]
    3f78:	mov	w2, #0x731                 	// #1841
    3f7c:	ldr	x3, [sp, #16]
    3f80:	bl	0 <__assert_fail>
    3f84:	ldur	x8, [x29, #-24]
    3f88:	cbz	x8, 3f90 <list_files_by_dir+0x9c>
    3f8c:	b	3fa8 <list_files_by_dir+0xb4>
    3f90:	adrp	x0, 0 <lt__alloc_die_callback>
    3f94:	add	x0, x0, #0x0
    3f98:	ldr	x1, [sp, #24]
    3f9c:	mov	w2, #0x732                 	// #1842
    3fa0:	ldr	x3, [sp, #16]
    3fa4:	bl	0 <__assert_fail>
    3fa8:	ldur	x8, [x29, #-8]
    3fac:	ldur	x9, [x29, #-8]
    3fb0:	str	x8, [sp, #8]
    3fb4:	cbz	x9, 3fd4 <list_files_by_dir+0xe0>
    3fb8:	ldur	x8, [x29, #-8]
    3fbc:	ldrb	w9, [x8]
    3fc0:	cbz	w9, 3fd4 <list_files_by_dir+0xe0>
    3fc4:	ldur	x0, [x29, #-8]
    3fc8:	bl	0 <strlen>
    3fcc:	str	x0, [sp]
    3fd0:	b	3fdc <list_files_by_dir+0xe8>
    3fd4:	mov	x8, xzr
    3fd8:	str	x8, [sp]
    3fdc:	ldr	x8, [sp]
    3fe0:	subs	x8, x8, #0x1
    3fe4:	ldr	x9, [sp, #8]
    3fe8:	ldrb	w10, [x9, x8]
    3fec:	cmp	w10, #0x2f
    3ff0:	b.eq	3ff8 <list_files_by_dir+0x104>  // b.none
    3ff4:	b	4010 <list_files_by_dir+0x11c>
    3ff8:	adrp	x0, 0 <lt__alloc_die_callback>
    3ffc:	add	x0, x0, #0x0
    4000:	ldr	x1, [sp, #24]
    4004:	mov	w2, #0x733                 	// #1843
    4008:	ldr	x3, [sp, #16]
    400c:	bl	0 <__assert_fail>
    4010:	ldur	x0, [x29, #-8]
    4014:	bl	0 <opendir>
    4018:	stur	x0, [x29, #-32]
    401c:	ldur	x8, [x29, #-32]
    4020:	cbz	x8, 4084 <list_files_by_dir+0x190>
    4024:	mov	x8, xzr
    4028:	str	x8, [sp, #32]
    402c:	ldur	x0, [x29, #-32]
    4030:	bl	0 <readdir>
    4034:	str	x0, [sp, #32]
    4038:	cbz	x0, 4078 <list_files_by_dir+0x184>
    403c:	ldr	x8, [sp, #32]
    4040:	ldrb	w9, [x8, #19]
    4044:	cmp	w9, #0x2e
    4048:	b.eq	4074 <list_files_by_dir+0x180>  // b.none
    404c:	ldur	x0, [x29, #-16]
    4050:	ldur	x1, [x29, #-24]
    4054:	ldur	x2, [x29, #-8]
    4058:	ldr	x3, [sp, #32]
    405c:	bl	40a0 <lt_argz_insertdir>
    4060:	cbz	w0, 4074 <list_files_by_dir+0x180>
    4064:	ldur	w8, [x29, #-36]
    4068:	add	w8, w8, #0x1
    406c:	stur	w8, [x29, #-36]
    4070:	b	4078 <list_files_by_dir+0x184>
    4074:	b	402c <list_files_by_dir+0x138>
    4078:	ldur	x0, [x29, #-32]
    407c:	bl	0 <closedir>
    4080:	b	4090 <list_files_by_dir+0x19c>
    4084:	ldur	w8, [x29, #-36]
    4088:	add	w8, w8, #0x1
    408c:	stur	w8, [x29, #-36]
    4090:	ldur	w0, [x29, #-36]
    4094:	ldp	x29, x30, [sp, #80]
    4098:	add	sp, sp, #0x60
    409c:	ret

00000000000040a0 <lt_argz_insertdir>:
    40a0:	sub	sp, sp, #0xa0
    40a4:	stp	x29, x30, [sp, #144]
    40a8:	add	x29, sp, #0x90
    40ac:	mov	x8, xzr
    40b0:	adrp	x9, 0 <lt__alloc_die_callback>
    40b4:	add	x9, x9, #0x0
    40b8:	adrp	x10, 0 <lt__alloc_die_callback>
    40bc:	add	x10, x10, #0x0
    40c0:	stur	x0, [x29, #-16]
    40c4:	stur	x1, [x29, #-24]
    40c8:	stur	x2, [x29, #-32]
    40cc:	stur	x3, [x29, #-40]
    40d0:	stur	x8, [x29, #-48]
    40d4:	stur	xzr, [x29, #-56]
    40d8:	stur	x8, [x29, #-64]
    40dc:	str	xzr, [sp, #72]
    40e0:	str	xzr, [sp, #64]
    40e4:	str	wzr, [sp, #60]
    40e8:	ldur	x8, [x29, #-16]
    40ec:	str	x9, [sp, #24]
    40f0:	str	x10, [sp, #16]
    40f4:	cbz	x8, 40fc <lt_argz_insertdir+0x5c>
    40f8:	b	4114 <lt_argz_insertdir+0x74>
    40fc:	adrp	x0, 0 <lt__alloc_die_callback>
    4100:	add	x0, x0, #0x0
    4104:	ldr	x1, [sp, #24]
    4108:	mov	w2, #0x6f6                 	// #1782
    410c:	ldr	x3, [sp, #16]
    4110:	bl	0 <__assert_fail>
    4114:	ldur	x8, [x29, #-24]
    4118:	cbz	x8, 4120 <lt_argz_insertdir+0x80>
    411c:	b	4138 <lt_argz_insertdir+0x98>
    4120:	adrp	x0, 0 <lt__alloc_die_callback>
    4124:	add	x0, x0, #0x0
    4128:	ldr	x1, [sp, #24]
    412c:	mov	w2, #0x6f7                 	// #1783
    4130:	ldr	x3, [sp, #16]
    4134:	bl	0 <__assert_fail>
    4138:	ldur	x8, [x29, #-40]
    413c:	cbz	x8, 4144 <lt_argz_insertdir+0xa4>
    4140:	b	415c <lt_argz_insertdir+0xbc>
    4144:	adrp	x0, 0 <lt__alloc_die_callback>
    4148:	add	x0, x0, #0x0
    414c:	ldr	x1, [sp, #24]
    4150:	mov	w2, #0x6f8                 	// #1784
    4154:	ldr	x3, [sp, #16]
    4158:	bl	0 <__assert_fail>
    415c:	ldur	x8, [x29, #-32]
    4160:	cbz	x8, 4180 <lt_argz_insertdir+0xe0>
    4164:	ldur	x8, [x29, #-32]
    4168:	ldrb	w9, [x8]
    416c:	cbz	w9, 4180 <lt_argz_insertdir+0xe0>
    4170:	ldur	x0, [x29, #-32]
    4174:	bl	0 <strlen>
    4178:	str	x0, [sp, #8]
    417c:	b	4188 <lt_argz_insertdir+0xe8>
    4180:	mov	x8, xzr
    4184:	str	x8, [sp, #8]
    4188:	ldr	x8, [sp, #8]
    418c:	str	x8, [sp, #64]
    4190:	ldur	x8, [x29, #-40]
    4194:	add	x8, x8, #0x13
    4198:	ldur	x9, [x29, #-40]
    419c:	add	x0, x9, #0x13
    41a0:	str	x8, [sp]
    41a4:	bl	0 <strlen>
    41a8:	ldr	x8, [sp]
    41ac:	add	x9, x8, x0
    41b0:	stur	x9, [x29, #-64]
    41b4:	ldur	x9, [x29, #-64]
    41b8:	str	x9, [sp, #48]
    41bc:	ldr	x8, [sp, #48]
    41c0:	mov	x9, #0xffffffffffffffff    	// #-1
    41c4:	add	x8, x8, x9
    41c8:	ldur	x9, [x29, #-40]
    41cc:	add	x9, x9, #0x13
    41d0:	cmp	x8, x9
    41d4:	b.ls	4208 <lt_argz_insertdir+0x168>  // b.plast
    41d8:	ldr	x8, [sp, #48]
    41dc:	ldurb	w1, [x8, #-1]
    41e0:	adrp	x0, 0 <lt__alloc_die_callback>
    41e4:	add	x0, x0, #0x0
    41e8:	bl	0 <strchr>
    41ec:	cbnz	x0, 41f4 <lt_argz_insertdir+0x154>
    41f0:	b	4208 <lt_argz_insertdir+0x168>
    41f4:	ldr	x8, [sp, #48]
    41f8:	mov	x9, #0xffffffffffffffff    	// #-1
    41fc:	add	x8, x8, x9
    4200:	str	x8, [sp, #48]
    4204:	b	41bc <lt_argz_insertdir+0x11c>
    4208:	ldr	x8, [sp, #48]
    420c:	ldrb	w9, [x8]
    4210:	cmp	w9, #0x2e
    4214:	b.ne	4220 <lt_argz_insertdir+0x180>  // b.any
    4218:	ldr	x8, [sp, #48]
    421c:	stur	x8, [x29, #-64]
    4220:	ldur	x8, [x29, #-64]
    4224:	mov	x9, #0xffffffffffffffff    	// #-1
    4228:	add	x8, x8, x9
    422c:	str	x8, [sp, #40]
    4230:	ldr	x8, [sp, #40]
    4234:	ldur	x9, [x29, #-40]
    4238:	add	x9, x9, #0x13
    423c:	cmp	x8, x9
    4240:	b.ls	4274 <lt_argz_insertdir+0x1d4>  // b.plast
    4244:	ldr	x8, [sp, #40]
    4248:	ldrb	w9, [x8]
    424c:	cmp	w9, #0x2e
    4250:	b.ne	4260 <lt_argz_insertdir+0x1c0>  // b.any
    4254:	ldr	x8, [sp, #40]
    4258:	stur	x8, [x29, #-64]
    425c:	b	4274 <lt_argz_insertdir+0x1d4>
    4260:	ldr	x8, [sp, #40]
    4264:	mov	x9, #0xffffffffffffffff    	// #-1
    4268:	add	x8, x8, x9
    426c:	str	x8, [sp, #40]
    4270:	b	4230 <lt_argz_insertdir+0x190>
    4274:	ldur	x8, [x29, #-64]
    4278:	ldur	x9, [x29, #-40]
    427c:	add	x9, x9, #0x13
    4280:	subs	x8, x8, x9
    4284:	str	x8, [sp, #72]
    4288:	ldr	x8, [sp, #64]
    428c:	mov	x9, #0x1                   	// #1
    4290:	add	x8, x8, #0x1
    4294:	ldr	x10, [sp, #72]
    4298:	add	x8, x8, x10
    429c:	stur	x8, [x29, #-56]
    42a0:	ldur	x8, [x29, #-56]
    42a4:	add	x8, x8, #0x1
    42a8:	mul	x0, x8, x9
    42ac:	bl	0 <lt__malloc>
    42b0:	stur	x0, [x29, #-48]
    42b4:	ldur	x8, [x29, #-48]
    42b8:	cbnz	x8, 42d0 <lt_argz_insertdir+0x230>
    42bc:	ldr	w8, [sp, #60]
    42c0:	add	w8, w8, #0x1
    42c4:	str	w8, [sp, #60]
    42c8:	stur	w8, [x29, #-4]
    42cc:	b	4380 <lt_argz_insertdir+0x2e0>
    42d0:	ldur	x8, [x29, #-48]
    42d4:	cbz	x8, 42dc <lt_argz_insertdir+0x23c>
    42d8:	b	42f4 <lt_argz_insertdir+0x254>
    42dc:	adrp	x0, 0 <lt__alloc_die_callback>
    42e0:	add	x0, x0, #0x0
    42e4:	ldr	x1, [sp, #24]
    42e8:	mov	w2, #0x71a                 	// #1818
    42ec:	ldr	x3, [sp, #16]
    42f0:	bl	0 <__assert_fail>
    42f4:	ldur	x0, [x29, #-48]
    42f8:	ldur	x1, [x29, #-32]
    42fc:	bl	0 <strcpy>
    4300:	ldur	x8, [x29, #-48]
    4304:	mov	x0, x8
    4308:	adrp	x1, 0 <lt__alloc_die_callback>
    430c:	add	x1, x1, #0x0
    4310:	bl	0 <strcat>
    4314:	ldur	x8, [x29, #-48]
    4318:	ldur	x9, [x29, #-40]
    431c:	add	x1, x9, #0x13
    4320:	ldr	x2, [sp, #72]
    4324:	mov	x0, x8
    4328:	bl	0 <strncat>
    432c:	ldur	x8, [x29, #-48]
    4330:	ldur	x9, [x29, #-56]
    4334:	add	x8, x8, x9
    4338:	mov	w10, #0x0                   	// #0
    433c:	strb	w10, [x8]
    4340:	ldur	x8, [x29, #-16]
    4344:	ldur	x1, [x29, #-24]
    4348:	ldur	x2, [x29, #-48]
    434c:	mov	x0, x8
    4350:	bl	4390 <lt_argz_insertinorder>
    4354:	cbz	w0, 4364 <lt_argz_insertdir+0x2c4>
    4358:	ldr	w8, [sp, #60]
    435c:	add	w8, w8, #0x1
    4360:	str	w8, [sp, #60]
    4364:	ldur	x0, [x29, #-48]
    4368:	bl	0 <free>
    436c:	mov	x8, xzr
    4370:	stur	x8, [x29, #-48]
    4374:	str	x8, [sp, #32]
    4378:	ldr	w9, [sp, #60]
    437c:	stur	w9, [x29, #-4]
    4380:	ldur	w0, [x29, #-4]
    4384:	ldp	x29, x30, [sp, #144]
    4388:	add	sp, sp, #0xa0
    438c:	ret

0000000000004390 <lt_argz_insertinorder>:
    4390:	sub	sp, sp, #0x50
    4394:	stp	x29, x30, [sp, #64]
    4398:	add	x29, sp, #0x40
    439c:	mov	x8, xzr
    43a0:	adrp	x9, 0 <lt__alloc_die_callback>
    43a4:	add	x9, x9, #0x0
    43a8:	adrp	x10, 0 <lt__alloc_die_callback>
    43ac:	add	x10, x10, #0x0
    43b0:	stur	x0, [x29, #-16]
    43b4:	stur	x1, [x29, #-24]
    43b8:	str	x2, [sp, #32]
    43bc:	str	x8, [sp, #24]
    43c0:	ldur	x8, [x29, #-16]
    43c4:	str	x9, [sp, #8]
    43c8:	str	x10, [sp]
    43cc:	cbz	x8, 43d4 <lt_argz_insertinorder+0x44>
    43d0:	b	43ec <lt_argz_insertinorder+0x5c>
    43d4:	adrp	x0, 0 <lt__alloc_die_callback>
    43d8:	add	x0, x0, #0x0
    43dc:	ldr	x1, [sp, #8]
    43e0:	mov	w2, #0x6db                 	// #1755
    43e4:	ldr	x3, [sp]
    43e8:	bl	0 <__assert_fail>
    43ec:	ldur	x8, [x29, #-24]
    43f0:	cbz	x8, 43f8 <lt_argz_insertinorder+0x68>
    43f4:	b	4410 <lt_argz_insertinorder+0x80>
    43f8:	adrp	x0, 0 <lt__alloc_die_callback>
    43fc:	add	x0, x0, #0x0
    4400:	ldr	x1, [sp, #8]
    4404:	mov	w2, #0x6dc                 	// #1756
    4408:	ldr	x3, [sp]
    440c:	bl	0 <__assert_fail>
    4410:	ldr	x8, [sp, #32]
    4414:	cbz	x8, 4428 <lt_argz_insertinorder+0x98>
    4418:	ldr	x8, [sp, #32]
    441c:	ldrb	w9, [x8]
    4420:	cbz	w9, 4428 <lt_argz_insertinorder+0x98>
    4424:	b	4440 <lt_argz_insertinorder+0xb0>
    4428:	adrp	x0, 0 <lt__alloc_die_callback>
    442c:	add	x0, x0, #0x0
    4430:	ldr	x1, [sp, #8]
    4434:	mov	w2, #0x6dd                 	// #1757
    4438:	ldr	x3, [sp]
    443c:	bl	0 <__assert_fail>
    4440:	ldur	x8, [x29, #-16]
    4444:	ldr	x8, [x8]
    4448:	cbz	x8, 44a4 <lt_argz_insertinorder+0x114>
    444c:	ldur	x8, [x29, #-16]
    4450:	ldr	x0, [x8]
    4454:	ldur	x8, [x29, #-24]
    4458:	ldr	x1, [x8]
    445c:	ldr	x2, [sp, #24]
    4460:	bl	0 <argz_next>
    4464:	str	x0, [sp, #24]
    4468:	cbz	x0, 44a4 <lt_argz_insertinorder+0x114>
    446c:	ldr	x0, [sp, #32]
    4470:	ldr	x1, [sp, #24]
    4474:	bl	0 <strcmp>
    4478:	str	w0, [sp, #20]
    447c:	ldr	w8, [sp, #20]
    4480:	cmp	w8, #0x0
    4484:	cset	w8, ge  // ge = tcont
    4488:	tbnz	w8, #0, 4490 <lt_argz_insertinorder+0x100>
    448c:	b	44a4 <lt_argz_insertinorder+0x114>
    4490:	ldr	w8, [sp, #20]
    4494:	cbnz	w8, 44a0 <lt_argz_insertinorder+0x110>
    4498:	stur	wzr, [x29, #-4]
    449c:	b	44bc <lt_argz_insertinorder+0x12c>
    44a0:	b	444c <lt_argz_insertinorder+0xbc>
    44a4:	ldur	x0, [x29, #-16]
    44a8:	ldur	x1, [x29, #-24]
    44ac:	ldr	x2, [sp, #24]
    44b0:	ldr	x3, [sp, #32]
    44b4:	bl	44cc <lt_argz_insert>
    44b8:	stur	w0, [x29, #-4]
    44bc:	ldur	w0, [x29, #-4]
    44c0:	ldp	x29, x30, [sp, #64]
    44c4:	add	sp, sp, #0x50
    44c8:	ret

00000000000044cc <lt_argz_insert>:
    44cc:	sub	sp, sp, #0x60
    44d0:	stp	x29, x30, [sp, #80]
    44d4:	add	x29, sp, #0x50
    44d8:	stur	x0, [x29, #-16]
    44dc:	stur	x1, [x29, #-24]
    44e0:	stur	x2, [x29, #-32]
    44e4:	str	x3, [sp, #40]
    44e8:	ldur	x8, [x29, #-32]
    44ec:	cbz	x8, 450c <lt_argz_insert+0x40>
    44f0:	ldur	x0, [x29, #-16]
    44f4:	ldur	x1, [x29, #-24]
    44f8:	ldur	x2, [x29, #-32]
    44fc:	ldr	x3, [sp, #40]
    4500:	bl	0 <argz_insert>
    4504:	str	w0, [sp, #36]
    4508:	b	4548 <lt_argz_insert+0x7c>
    450c:	ldur	x0, [x29, #-16]
    4510:	ldur	x1, [x29, #-24]
    4514:	ldr	x2, [sp, #40]
    4518:	ldr	x8, [sp, #40]
    451c:	str	x0, [sp, #24]
    4520:	mov	x0, x8
    4524:	str	x1, [sp, #16]
    4528:	str	x2, [sp, #8]
    452c:	bl	0 <strlen>
    4530:	add	x3, x0, #0x1
    4534:	ldr	x0, [sp, #24]
    4538:	ldr	x1, [sp, #16]
    453c:	ldr	x2, [sp, #8]
    4540:	bl	0 <argz_append>
    4544:	str	w0, [sp, #36]
    4548:	ldr	w8, [sp, #36]
    454c:	cbz	w8, 4594 <lt_argz_insert+0xc8>
    4550:	ldr	w8, [sp, #36]
    4554:	cmp	w8, #0xc
    4558:	cset	w8, eq  // eq = none
    455c:	eor	w8, w8, #0x1
    4560:	tbnz	w8, #0, 4578 <lt_argz_insert+0xac>
    4564:	b	4568 <lt_argz_insert+0x9c>
    4568:	mov	w0, #0xb                   	// #11
    456c:	bl	0 <lt__error_string>
    4570:	bl	0 <lt__set_last_error>
    4574:	b	4588 <lt_argz_insert+0xbc>
    4578:	mov	w8, wzr
    457c:	mov	w0, w8
    4580:	bl	0 <lt__error_string>
    4584:	bl	0 <lt__set_last_error>
    4588:	mov	w8, #0x1                   	// #1
    458c:	stur	w8, [x29, #-4]
    4590:	b	4598 <lt_argz_insert+0xcc>
    4594:	stur	wzr, [x29, #-4]
    4598:	ldur	w0, [x29, #-4]
    459c:	ldp	x29, x30, [sp, #80]
    45a0:	add	sp, sp, #0x60
    45a4:	ret

libltdl_libltdl_la-slist.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__slist_delete>:
   0:	sub	sp, sp, #0x30
   4:	stp	x29, x30, [sp, #32]
   8:	add	x29, sp, #0x20
   c:	stur	x0, [x29, #-8]
  10:	str	x1, [sp, #16]
  14:	ldr	x8, [sp, #16]
  18:	cbz	x8, 20 <lt__slist_delete+0x20>
  1c:	b	40 <lt__slist_delete+0x40>
  20:	adrp	x0, 0 <lt__slist_delete>
  24:	add	x0, x0, #0x0
  28:	adrp	x1, 0 <lt__slist_delete>
  2c:	add	x1, x1, #0x0
  30:	mov	w2, #0x38                  	// #56
  34:	adrp	x3, 0 <lt__slist_delete>
  38:	add	x3, x3, #0x0
  3c:	bl	0 <__assert_fail>
  40:	ldur	x8, [x29, #-8]
  44:	cbz	x8, 6c <lt__slist_delete+0x6c>
  48:	ldur	x8, [x29, #-8]
  4c:	ldr	x8, [x8]
  50:	str	x8, [sp, #8]
  54:	ldr	x8, [sp, #16]
  58:	ldur	x0, [x29, #-8]
  5c:	blr	x8
  60:	ldr	x8, [sp, #8]
  64:	stur	x8, [x29, #-8]
  68:	b	40 <lt__slist_delete+0x40>
  6c:	mov	x8, xzr
  70:	mov	x0, x8
  74:	ldp	x29, x30, [sp, #32]
  78:	add	sp, sp, #0x30
  7c:	ret

0000000000000080 <lt__slist_remove>:
  80:	sub	sp, sp, #0x50
  84:	stp	x29, x30, [sp, #64]
  88:	add	x29, sp, #0x40
  8c:	mov	x8, xzr
  90:	stur	x0, [x29, #-16]
  94:	stur	x1, [x29, #-24]
  98:	str	x2, [sp, #32]
  9c:	str	x8, [sp, #24]
  a0:	str	x8, [sp, #16]
  a4:	ldur	x8, [x29, #-24]
  a8:	cbz	x8, b0 <lt__slist_remove+0x30>
  ac:	b	d0 <lt__slist_remove+0x50>
  b0:	adrp	x0, 0 <lt__slist_delete>
  b4:	add	x0, x0, #0x0
  b8:	adrp	x1, 0 <lt__slist_delete>
  bc:	add	x1, x1, #0x0
  c0:	mov	w2, #0x53                  	// #83
  c4:	adrp	x3, 0 <lt__slist_delete>
  c8:	add	x3, x3, #0x0
  cc:	bl	0 <__assert_fail>
  d0:	ldur	x8, [x29, #-16]
  d4:	cbz	x8, e4 <lt__slist_remove+0x64>
  d8:	ldur	x8, [x29, #-16]
  dc:	ldr	x8, [x8]
  e0:	cbnz	x8, f0 <lt__slist_remove+0x70>
  e4:	mov	x8, xzr
  e8:	stur	x8, [x29, #-8]
  ec:	b	1a0 <lt__slist_remove+0x120>
  f0:	ldur	x8, [x29, #-24]
  f4:	ldur	x9, [x29, #-16]
  f8:	ldr	x0, [x9]
  fc:	ldr	x1, [sp, #32]
 100:	blr	x8
 104:	str	x0, [sp, #16]
 108:	ldr	x8, [sp, #16]
 10c:	cbz	x8, 130 <lt__slist_remove+0xb0>
 110:	ldur	x8, [x29, #-16]
 114:	ldr	x8, [x8]
 118:	str	x8, [sp, #24]
 11c:	ldr	x8, [sp, #24]
 120:	ldr	x8, [x8]
 124:	ldur	x9, [x29, #-16]
 128:	str	x8, [x9]
 12c:	b	198 <lt__slist_remove+0x118>
 130:	ldur	x8, [x29, #-16]
 134:	ldr	x8, [x8]
 138:	str	x8, [sp, #8]
 13c:	ldr	x8, [sp, #8]
 140:	ldr	x8, [x8]
 144:	cbz	x8, 198 <lt__slist_remove+0x118>
 148:	ldur	x8, [x29, #-24]
 14c:	ldr	x9, [sp, #8]
 150:	ldr	x0, [x9]
 154:	ldr	x1, [sp, #32]
 158:	blr	x8
 15c:	str	x0, [sp, #16]
 160:	ldr	x8, [sp, #16]
 164:	cbz	x8, 188 <lt__slist_remove+0x108>
 168:	ldr	x8, [sp, #8]
 16c:	ldr	x8, [x8]
 170:	str	x8, [sp, #24]
 174:	ldr	x8, [sp, #24]
 178:	ldr	x8, [x8]
 17c:	ldr	x9, [sp, #8]
 180:	str	x8, [x9]
 184:	b	198 <lt__slist_remove+0x118>
 188:	ldr	x8, [sp, #8]
 18c:	ldr	x8, [x8]
 190:	str	x8, [sp, #8]
 194:	b	13c <lt__slist_remove+0xbc>
 198:	ldr	x8, [sp, #16]
 19c:	stur	x8, [x29, #-8]
 1a0:	ldur	x0, [x29, #-8]
 1a4:	ldp	x29, x30, [sp, #64]
 1a8:	add	sp, sp, #0x50
 1ac:	ret

00000000000001b0 <lt__slist_find>:
 1b0:	sub	sp, sp, #0x30
 1b4:	stp	x29, x30, [sp, #32]
 1b8:	add	x29, sp, #0x20
 1bc:	mov	x8, xzr
 1c0:	stur	x0, [x29, #-8]
 1c4:	str	x1, [sp, #16]
 1c8:	str	x2, [sp, #8]
 1cc:	str	x8, [sp]
 1d0:	ldr	x8, [sp, #16]
 1d4:	cbz	x8, 1dc <lt__slist_find+0x2c>
 1d8:	b	1fc <lt__slist_find+0x4c>
 1dc:	adrp	x0, 0 <lt__slist_delete>
 1e0:	add	x0, x0, #0x0
 1e4:	adrp	x1, 0 <lt__slist_delete>
 1e8:	add	x1, x1, #0x0
 1ec:	mov	w2, #0x7a                  	// #122
 1f0:	adrp	x3, 0 <lt__slist_delete>
 1f4:	add	x3, x3, #0x0
 1f8:	bl	0 <__assert_fail>
 1fc:	ldur	x8, [x29, #-8]
 200:	cbz	x8, 234 <lt__slist_find+0x84>
 204:	ldr	x8, [sp, #16]
 208:	ldur	x0, [x29, #-8]
 20c:	ldr	x1, [sp, #8]
 210:	blr	x8
 214:	str	x0, [sp]
 218:	ldr	x8, [sp]
 21c:	cbz	x8, 224 <lt__slist_find+0x74>
 220:	b	234 <lt__slist_find+0x84>
 224:	ldur	x8, [x29, #-8]
 228:	ldr	x8, [x8]
 22c:	stur	x8, [x29, #-8]
 230:	b	1fc <lt__slist_find+0x4c>
 234:	ldr	x0, [sp]
 238:	ldp	x29, x30, [sp, #32]
 23c:	add	sp, sp, #0x30
 240:	ret

0000000000000244 <lt__slist_concat>:
 244:	sub	sp, sp, #0x20
 248:	str	x0, [sp, #16]
 24c:	str	x1, [sp, #8]
 250:	ldr	x8, [sp, #16]
 254:	cbnz	x8, 264 <lt__slist_concat+0x20>
 258:	ldr	x8, [sp, #8]
 25c:	str	x8, [sp, #24]
 260:	b	29c <lt__slist_concat+0x58>
 264:	ldr	x8, [sp, #16]
 268:	str	x8, [sp]
 26c:	ldr	x8, [sp]
 270:	ldr	x8, [x8]
 274:	cbz	x8, 288 <lt__slist_concat+0x44>
 278:	ldr	x8, [sp]
 27c:	ldr	x8, [x8]
 280:	str	x8, [sp]
 284:	b	26c <lt__slist_concat+0x28>
 288:	ldr	x8, [sp, #8]
 28c:	ldr	x9, [sp]
 290:	str	x8, [x9]
 294:	ldr	x8, [sp, #16]
 298:	str	x8, [sp, #24]
 29c:	ldr	x0, [sp, #24]
 2a0:	add	sp, sp, #0x20
 2a4:	ret

00000000000002a8 <lt__slist_cons>:
 2a8:	sub	sp, sp, #0x30
 2ac:	stp	x29, x30, [sp, #32]
 2b0:	add	x29, sp, #0x20
 2b4:	str	x0, [sp, #16]
 2b8:	str	x1, [sp, #8]
 2bc:	ldr	x8, [sp, #16]
 2c0:	cbnz	x8, 2d0 <lt__slist_cons+0x28>
 2c4:	ldr	x8, [sp, #8]
 2c8:	stur	x8, [x29, #-8]
 2cc:	b	314 <lt__slist_cons+0x6c>
 2d0:	ldr	x8, [sp, #16]
 2d4:	ldr	x8, [x8]
 2d8:	cbnz	x8, 2e0 <lt__slist_cons+0x38>
 2dc:	b	300 <lt__slist_cons+0x58>
 2e0:	adrp	x0, 0 <lt__slist_delete>
 2e4:	add	x0, x0, #0x0
 2e8:	adrp	x1, 0 <lt__slist_delete>
 2ec:	add	x1, x1, #0x0
 2f0:	mov	w2, #0xaf                  	// #175
 2f4:	adrp	x3, 0 <lt__slist_delete>
 2f8:	add	x3, x3, #0x0
 2fc:	bl	0 <__assert_fail>
 300:	ldr	x8, [sp, #8]
 304:	ldr	x9, [sp, #16]
 308:	str	x8, [x9]
 30c:	ldr	x8, [sp, #16]
 310:	stur	x8, [x29, #-8]
 314:	ldur	x0, [x29, #-8]
 318:	ldp	x29, x30, [sp, #32]
 31c:	add	sp, sp, #0x30
 320:	ret

0000000000000324 <lt__slist_tail>:
 324:	sub	sp, sp, #0x10
 328:	str	x0, [sp, #8]
 32c:	ldr	x8, [sp, #8]
 330:	cbz	x8, 344 <lt__slist_tail+0x20>
 334:	ldr	x8, [sp, #8]
 338:	ldr	x8, [x8]
 33c:	str	x8, [sp]
 340:	b	34c <lt__slist_tail+0x28>
 344:	mov	x8, xzr
 348:	str	x8, [sp]
 34c:	ldr	x8, [sp]
 350:	mov	x0, x8
 354:	add	sp, sp, #0x10
 358:	ret

000000000000035c <lt__slist_nth>:
 35c:	sub	sp, sp, #0x20
 360:	str	x0, [sp, #24]
 364:	str	x1, [sp, #16]
 368:	ldr	x8, [sp, #16]
 36c:	mov	w9, #0x0                   	// #0
 370:	cmp	x8, #0x1
 374:	str	w9, [sp, #12]
 378:	b.ls	38c <lt__slist_nth+0x30>  // b.plast
 37c:	ldr	x8, [sp, #24]
 380:	cmp	x8, #0x0
 384:	cset	w9, ne  // ne = any
 388:	str	w9, [sp, #12]
 38c:	ldr	w8, [sp, #12]
 390:	tbnz	w8, #0, 398 <lt__slist_nth+0x3c>
 394:	b	3b4 <lt__slist_nth+0x58>
 398:	ldr	x8, [sp, #24]
 39c:	ldr	x8, [x8]
 3a0:	str	x8, [sp, #24]
 3a4:	ldr	x8, [sp, #16]
 3a8:	subs	x8, x8, #0x1
 3ac:	str	x8, [sp, #16]
 3b0:	b	368 <lt__slist_nth+0xc>
 3b4:	ldr	x0, [sp, #24]
 3b8:	add	sp, sp, #0x20
 3bc:	ret

00000000000003c0 <lt__slist_length>:
 3c0:	sub	sp, sp, #0x10
 3c4:	str	x0, [sp, #8]
 3c8:	str	xzr, [sp]
 3cc:	ldr	x8, [sp, #8]
 3d0:	cbz	x8, 3f0 <lt__slist_length+0x30>
 3d4:	ldr	x8, [sp, #8]
 3d8:	ldr	x8, [x8]
 3dc:	str	x8, [sp, #8]
 3e0:	ldr	x8, [sp]
 3e4:	add	x8, x8, #0x1
 3e8:	str	x8, [sp]
 3ec:	b	3cc <lt__slist_length+0xc>
 3f0:	ldr	x0, [sp]
 3f4:	add	sp, sp, #0x10
 3f8:	ret

00000000000003fc <lt__slist_reverse>:
 3fc:	sub	sp, sp, #0x20
 400:	mov	x8, xzr
 404:	str	x0, [sp, #24]
 408:	str	x8, [sp, #16]
 40c:	ldr	x8, [sp, #24]
 410:	cbz	x8, 440 <lt__slist_reverse+0x44>
 414:	ldr	x8, [sp, #24]
 418:	ldr	x8, [x8]
 41c:	str	x8, [sp, #8]
 420:	ldr	x8, [sp, #16]
 424:	ldr	x9, [sp, #24]
 428:	str	x8, [x9]
 42c:	ldr	x8, [sp, #24]
 430:	str	x8, [sp, #16]
 434:	ldr	x8, [sp, #8]
 438:	str	x8, [sp, #24]
 43c:	b	40c <lt__slist_reverse+0x10>
 440:	ldr	x0, [sp, #16]
 444:	add	sp, sp, #0x20
 448:	ret

000000000000044c <lt__slist_foreach>:
 44c:	sub	sp, sp, #0x40
 450:	stp	x29, x30, [sp, #48]
 454:	add	x29, sp, #0x30
 458:	mov	x8, xzr
 45c:	stur	x0, [x29, #-8]
 460:	stur	x1, [x29, #-16]
 464:	str	x2, [sp, #24]
 468:	str	x8, [sp, #16]
 46c:	ldur	x8, [x29, #-16]
 470:	cbz	x8, 478 <lt__slist_foreach+0x2c>
 474:	b	498 <lt__slist_foreach+0x4c>
 478:	adrp	x0, 0 <lt__slist_delete>
 47c:	add	x0, x0, #0x0
 480:	adrp	x1, 0 <lt__slist_delete>
 484:	add	x1, x1, #0x0
 488:	mov	w2, #0xf6                  	// #246
 48c:	adrp	x3, 0 <lt__slist_delete>
 490:	add	x3, x3, #0x0
 494:	bl	0 <__assert_fail>
 498:	ldur	x8, [x29, #-8]
 49c:	cbz	x8, 4d8 <lt__slist_foreach+0x8c>
 4a0:	ldur	x8, [x29, #-8]
 4a4:	ldr	x8, [x8]
 4a8:	str	x8, [sp, #8]
 4ac:	ldur	x8, [x29, #-16]
 4b0:	ldur	x0, [x29, #-8]
 4b4:	ldr	x1, [sp, #24]
 4b8:	blr	x8
 4bc:	str	x0, [sp, #16]
 4c0:	ldr	x8, [sp, #16]
 4c4:	cbz	x8, 4cc <lt__slist_foreach+0x80>
 4c8:	b	4d8 <lt__slist_foreach+0x8c>
 4cc:	ldr	x8, [sp, #8]
 4d0:	stur	x8, [x29, #-8]
 4d4:	b	498 <lt__slist_foreach+0x4c>
 4d8:	ldr	x0, [sp, #16]
 4dc:	ldp	x29, x30, [sp, #48]
 4e0:	add	sp, sp, #0x40
 4e4:	ret

00000000000004e8 <lt__slist_sort>:
 4e8:	sub	sp, sp, #0x60
 4ec:	stp	x29, x30, [sp, #80]
 4f0:	add	x29, sp, #0x50
 4f4:	stur	x0, [x29, #-16]
 4f8:	stur	x1, [x29, #-24]
 4fc:	stur	x2, [x29, #-32]
 500:	ldur	x8, [x29, #-16]
 504:	cbnz	x8, 514 <lt__slist_sort+0x2c>
 508:	ldur	x8, [x29, #-16]
 50c:	stur	x8, [x29, #-8]
 510:	b	5fc <lt__slist_sort+0x114>
 514:	ldur	x8, [x29, #-16]
 518:	str	x8, [sp, #40]
 51c:	ldur	x8, [x29, #-16]
 520:	ldr	x8, [x8]
 524:	str	x8, [sp, #32]
 528:	ldr	x8, [sp, #32]
 52c:	cbnz	x8, 53c <lt__slist_sort+0x54>
 530:	ldr	x8, [sp, #40]
 534:	stur	x8, [x29, #-8]
 538:	b	5fc <lt__slist_sort+0x114>
 53c:	ldr	x8, [sp, #32]
 540:	mov	w9, #0x0                   	// #0
 544:	str	w9, [sp, #28]
 548:	cbz	x8, 564 <lt__slist_sort+0x7c>
 54c:	ldr	x8, [sp, #32]
 550:	ldr	x8, [x8]
 554:	str	x8, [sp, #32]
 558:	cmp	x8, #0x0
 55c:	cset	w9, ne  // ne = any
 560:	str	w9, [sp, #28]
 564:	ldr	w8, [sp, #28]
 568:	tbnz	w8, #0, 570 <lt__slist_sort+0x88>
 56c:	b	59c <lt__slist_sort+0xb4>
 570:	ldr	x8, [sp, #32]
 574:	cbz	x8, 588 <lt__slist_sort+0xa0>
 578:	ldr	x8, [sp, #32]
 57c:	ldr	x8, [x8]
 580:	str	x8, [sp, #32]
 584:	cbnz	x8, 58c <lt__slist_sort+0xa4>
 588:	b	59c <lt__slist_sort+0xb4>
 58c:	ldur	x8, [x29, #-16]
 590:	ldr	x8, [x8]
 594:	stur	x8, [x29, #-16]
 598:	b	53c <lt__slist_sort+0x54>
 59c:	ldur	x8, [x29, #-16]
 5a0:	ldr	x8, [x8]
 5a4:	str	x8, [sp, #32]
 5a8:	ldur	x8, [x29, #-16]
 5ac:	mov	x9, xzr
 5b0:	str	x9, [x8]
 5b4:	ldr	x0, [sp, #40]
 5b8:	ldur	x1, [x29, #-24]
 5bc:	ldur	x2, [x29, #-32]
 5c0:	bl	4e8 <lt__slist_sort>
 5c4:	ldr	x8, [sp, #32]
 5c8:	ldur	x1, [x29, #-24]
 5cc:	ldur	x2, [x29, #-32]
 5d0:	str	x0, [sp, #16]
 5d4:	mov	x0, x8
 5d8:	bl	4e8 <lt__slist_sort>
 5dc:	ldur	x2, [x29, #-24]
 5e0:	ldur	x3, [x29, #-32]
 5e4:	ldr	x1, [sp, #16]
 5e8:	str	x0, [sp, #8]
 5ec:	mov	x0, x1
 5f0:	ldr	x1, [sp, #8]
 5f4:	bl	60c <slist_sort_merge>
 5f8:	stur	x0, [x29, #-8]
 5fc:	ldur	x0, [x29, #-8]
 600:	ldp	x29, x30, [sp, #80]
 604:	add	sp, sp, #0x60
 608:	ret

000000000000060c <slist_sort_merge>:
 60c:	sub	sp, sp, #0x60
 610:	stp	x29, x30, [sp, #80]
 614:	add	x29, sp, #0x50
 618:	add	x8, sp, #0x20
 61c:	stur	x0, [x29, #-8]
 620:	stur	x1, [x29, #-16]
 624:	stur	x2, [x29, #-24]
 628:	stur	x3, [x29, #-32]
 62c:	str	x8, [sp, #24]
 630:	ldur	x8, [x29, #-8]
 634:	mov	w9, #0x0                   	// #0
 638:	str	w9, [sp, #20]
 63c:	cbz	x8, 650 <slist_sort_merge+0x44>
 640:	ldur	x8, [x29, #-16]
 644:	cmp	x8, #0x0
 648:	cset	w9, ne  // ne = any
 64c:	str	w9, [sp, #20]
 650:	ldr	w8, [sp, #20]
 654:	tbnz	w8, #0, 65c <slist_sort_merge+0x50>
 658:	b	6bc <slist_sort_merge+0xb0>
 65c:	ldur	x8, [x29, #-24]
 660:	ldur	x0, [x29, #-8]
 664:	ldur	x1, [x29, #-16]
 668:	ldur	x2, [x29, #-32]
 66c:	blr	x8
 670:	cmp	w0, #0x0
 674:	cset	w9, gt
 678:	tbnz	w9, #0, 69c <slist_sort_merge+0x90>
 67c:	ldur	x8, [x29, #-8]
 680:	ldr	x9, [sp, #24]
 684:	str	x8, [x9]
 688:	str	x8, [sp, #24]
 68c:	ldur	x8, [x29, #-8]
 690:	ldr	x8, [x8]
 694:	stur	x8, [x29, #-8]
 698:	b	6b8 <slist_sort_merge+0xac>
 69c:	ldur	x8, [x29, #-16]
 6a0:	ldr	x9, [sp, #24]
 6a4:	str	x8, [x9]
 6a8:	str	x8, [sp, #24]
 6ac:	ldur	x8, [x29, #-16]
 6b0:	ldr	x8, [x8]
 6b4:	stur	x8, [x29, #-16]
 6b8:	b	630 <slist_sort_merge+0x24>
 6bc:	ldur	x8, [x29, #-8]
 6c0:	cbz	x8, 6d0 <slist_sort_merge+0xc4>
 6c4:	ldur	x8, [x29, #-8]
 6c8:	str	x8, [sp, #8]
 6cc:	b	6d8 <slist_sort_merge+0xcc>
 6d0:	ldur	x8, [x29, #-16]
 6d4:	str	x8, [sp, #8]
 6d8:	ldr	x8, [sp, #8]
 6dc:	ldr	x9, [sp, #24]
 6e0:	str	x8, [x9]
 6e4:	ldr	x0, [sp, #32]
 6e8:	ldp	x29, x30, [sp, #80]
 6ec:	add	sp, sp, #0x60
 6f0:	ret

00000000000006f4 <lt__slist_box>:
 6f4:	sub	sp, sp, #0x20
 6f8:	stp	x29, x30, [sp, #16]
 6fc:	add	x29, sp, #0x10
 700:	mov	x8, #0x10                  	// #16
 704:	str	x0, [sp, #8]
 708:	mov	x0, x8
 70c:	bl	0 <malloc>
 710:	str	x0, [sp]
 714:	ldr	x8, [sp]
 718:	cbz	x8, 734 <lt__slist_box+0x40>
 71c:	ldr	x8, [sp]
 720:	mov	x9, xzr
 724:	str	x9, [x8]
 728:	ldr	x8, [sp, #8]
 72c:	ldr	x9, [sp]
 730:	str	x8, [x9, #8]
 734:	ldr	x0, [sp]
 738:	ldp	x29, x30, [sp, #16]
 73c:	add	sp, sp, #0x20
 740:	ret

0000000000000744 <lt__slist_unbox>:
 744:	sub	sp, sp, #0x20
 748:	stp	x29, x30, [sp, #16]
 74c:	add	x29, sp, #0x10
 750:	mov	x8, xzr
 754:	str	x0, [sp, #8]
 758:	str	x8, [sp]
 75c:	ldr	x8, [sp, #8]
 760:	cbz	x8, 778 <lt__slist_unbox+0x34>
 764:	ldr	x8, [sp, #8]
 768:	ldr	x8, [x8, #8]
 76c:	str	x8, [sp]
 770:	ldr	x0, [sp, #8]
 774:	bl	0 <free>
 778:	ldr	x0, [sp]
 77c:	ldp	x29, x30, [sp, #16]
 780:	add	sp, sp, #0x20
 784:	ret

lt__strl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_strlcat>:
   0:	sub	sp, sp, #0x60
   4:	stp	x29, x30, [sp, #80]
   8:	add	x29, sp, #0x50
   c:	adrp	x8, 0 <lt_strlcat>
  10:	add	x8, x8, #0x0
  14:	adrp	x9, 0 <lt_strlcat>
  18:	add	x9, x9, #0x0
  1c:	stur	x0, [x29, #-8]
  20:	stur	x1, [x29, #-16]
  24:	stur	x2, [x29, #-24]
  28:	ldur	x10, [x29, #-8]
  2c:	str	x8, [sp, #24]
  30:	str	x9, [sp, #16]
  34:	cbz	x10, 3c <lt_strlcat+0x3c>
  38:	b	54 <lt_strlcat+0x54>
  3c:	adrp	x0, 0 <lt_strlcat>
  40:	add	x0, x0, #0x0
  44:	ldr	x1, [sp, #24]
  48:	mov	w2, #0x39                  	// #57
  4c:	ldr	x3, [sp, #16]
  50:	bl	0 <__assert_fail>
  54:	ldur	x8, [x29, #-16]
  58:	cbz	x8, 60 <lt_strlcat+0x60>
  5c:	b	78 <lt_strlcat+0x78>
  60:	adrp	x0, 0 <lt_strlcat>
  64:	add	x0, x0, #0x0
  68:	ldr	x1, [sp, #24]
  6c:	mov	w2, #0x3a                  	// #58
  70:	ldr	x3, [sp, #16]
  74:	bl	0 <__assert_fail>
  78:	ldur	x8, [x29, #-24]
  7c:	cmp	x8, #0x1
  80:	b.cc	88 <lt_strlcat+0x88>  // b.lo, b.ul, b.last
  84:	b	a0 <lt_strlcat+0xa0>
  88:	adrp	x0, 0 <lt_strlcat>
  8c:	add	x0, x0, #0x0
  90:	ldr	x1, [sp, #24]
  94:	mov	w2, #0x3b                  	// #59
  98:	ldr	x3, [sp, #16]
  9c:	bl	0 <__assert_fail>
  a0:	ldur	x0, [x29, #-8]
  a4:	bl	0 <strlen>
  a8:	stur	x0, [x29, #-32]
  ac:	ldur	x8, [x29, #-8]
  b0:	ldur	x9, [x29, #-32]
  b4:	add	x8, x8, x9
  b8:	str	x8, [sp, #40]
  bc:	ldur	x8, [x29, #-16]
  c0:	str	x8, [sp, #32]
  c4:	ldr	x8, [sp, #32]
  c8:	ldrb	w9, [x8]
  cc:	mov	w10, #0x0                   	// #0
  d0:	str	w10, [sp, #12]
  d4:	cbz	w9, f0 <lt_strlcat+0xf0>
  d8:	ldur	x8, [x29, #-32]
  dc:	ldur	x9, [x29, #-24]
  e0:	subs	x9, x9, #0x1
  e4:	cmp	x8, x9
  e8:	cset	w10, cc  // cc = lo, ul, last
  ec:	str	w10, [sp, #12]
  f0:	ldr	w8, [sp, #12]
  f4:	tbnz	w8, #0, fc <lt_strlcat+0xfc>
  f8:	b	134 <lt_strlcat+0x134>
  fc:	ldr	x8, [sp, #32]
 100:	ldrb	w9, [x8]
 104:	ldr	x8, [sp, #40]
 108:	strb	w9, [x8]
 10c:	ldur	x8, [x29, #-32]
 110:	add	x8, x8, #0x1
 114:	stur	x8, [x29, #-32]
 118:	ldr	x8, [sp, #40]
 11c:	add	x8, x8, #0x1
 120:	str	x8, [sp, #40]
 124:	ldr	x8, [sp, #32]
 128:	add	x8, x8, #0x1
 12c:	str	x8, [sp, #32]
 130:	b	c4 <lt_strlcat+0xc4>
 134:	ldur	x8, [x29, #-8]
 138:	ldur	x9, [x29, #-32]
 13c:	add	x8, x8, x9
 140:	mov	w10, #0x0                   	// #0
 144:	strb	w10, [x8]
 148:	ldr	x8, [sp, #32]
 14c:	add	x9, x8, #0x1
 150:	str	x9, [sp, #32]
 154:	ldrb	w10, [x8]
 158:	cbz	w10, 16c <lt_strlcat+0x16c>
 15c:	ldur	x8, [x29, #-32]
 160:	add	x8, x8, #0x1
 164:	stur	x8, [x29, #-32]
 168:	b	148 <lt_strlcat+0x148>
 16c:	ldur	x0, [x29, #-32]
 170:	ldp	x29, x30, [sp, #80]
 174:	add	sp, sp, #0x60
 178:	ret

000000000000017c <lt_strlcpy>:
 17c:	sub	sp, sp, #0x60
 180:	stp	x29, x30, [sp, #80]
 184:	add	x29, sp, #0x50
 188:	adrp	x8, 0 <lt_strlcat>
 18c:	add	x8, x8, #0x0
 190:	adrp	x9, 0 <lt_strlcat>
 194:	add	x9, x9, #0x0
 198:	stur	x0, [x29, #-8]
 19c:	stur	x1, [x29, #-16]
 1a0:	stur	x2, [x29, #-24]
 1a4:	stur	xzr, [x29, #-32]
 1a8:	ldur	x10, [x29, #-8]
 1ac:	str	x8, [sp, #24]
 1b0:	str	x9, [sp, #16]
 1b4:	cbz	x10, 1bc <lt_strlcpy+0x40>
 1b8:	b	1d4 <lt_strlcpy+0x58>
 1bc:	adrp	x0, 0 <lt_strlcat>
 1c0:	add	x0, x0, #0x0
 1c4:	ldr	x1, [sp, #24]
 1c8:	mov	w2, #0x69                  	// #105
 1cc:	ldr	x3, [sp, #16]
 1d0:	bl	0 <__assert_fail>
 1d4:	ldur	x8, [x29, #-16]
 1d8:	cbz	x8, 1e0 <lt_strlcpy+0x64>
 1dc:	b	1f8 <lt_strlcpy+0x7c>
 1e0:	adrp	x0, 0 <lt_strlcat>
 1e4:	add	x0, x0, #0x0
 1e8:	ldr	x1, [sp, #24]
 1ec:	mov	w2, #0x6a                  	// #106
 1f0:	ldr	x3, [sp, #16]
 1f4:	bl	0 <__assert_fail>
 1f8:	ldur	x8, [x29, #-24]
 1fc:	cmp	x8, #0x1
 200:	b.cc	208 <lt_strlcpy+0x8c>  // b.lo, b.ul, b.last
 204:	b	220 <lt_strlcpy+0xa4>
 208:	adrp	x0, 0 <lt_strlcat>
 20c:	add	x0, x0, #0x0
 210:	ldr	x1, [sp, #24]
 214:	mov	w2, #0x6b                  	// #107
 218:	ldr	x3, [sp, #16]
 21c:	bl	0 <__assert_fail>
 220:	ldur	x8, [x29, #-8]
 224:	str	x8, [sp, #40]
 228:	ldur	x8, [x29, #-16]
 22c:	str	x8, [sp, #32]
 230:	stur	xzr, [x29, #-32]
 234:	ldr	x8, [sp, #32]
 238:	ldrb	w9, [x8]
 23c:	mov	w10, #0x0                   	// #0
 240:	str	w10, [sp, #12]
 244:	cbz	w9, 260 <lt_strlcpy+0xe4>
 248:	ldur	x8, [x29, #-32]
 24c:	ldur	x9, [x29, #-24]
 250:	subs	x9, x9, #0x1
 254:	cmp	x8, x9
 258:	cset	w10, cc  // cc = lo, ul, last
 25c:	str	w10, [sp, #12]
 260:	ldr	w8, [sp, #12]
 264:	tbnz	w8, #0, 26c <lt_strlcpy+0xf0>
 268:	b	2a4 <lt_strlcpy+0x128>
 26c:	ldr	x8, [sp, #32]
 270:	ldrb	w9, [x8]
 274:	ldr	x8, [sp, #40]
 278:	strb	w9, [x8]
 27c:	ldur	x8, [x29, #-32]
 280:	add	x8, x8, #0x1
 284:	stur	x8, [x29, #-32]
 288:	ldr	x8, [sp, #40]
 28c:	add	x8, x8, #0x1
 290:	str	x8, [sp, #40]
 294:	ldr	x8, [sp, #32]
 298:	add	x8, x8, #0x1
 29c:	str	x8, [sp, #32]
 2a0:	b	234 <lt_strlcpy+0xb8>
 2a4:	ldur	x8, [x29, #-8]
 2a8:	ldur	x9, [x29, #-32]
 2ac:	add	x8, x8, x9
 2b0:	mov	w10, #0x0                   	// #0
 2b4:	strb	w10, [x8]
 2b8:	ldr	x8, [sp, #32]
 2bc:	add	x9, x8, #0x1
 2c0:	str	x9, [sp, #32]
 2c4:	ldrb	w10, [x8]
 2c8:	cbz	w10, 2dc <lt_strlcpy+0x160>
 2cc:	ldur	x8, [x29, #-32]
 2d0:	add	x8, x8, #0x1
 2d4:	stur	x8, [x29, #-32]
 2d8:	b	2b8 <lt_strlcpy+0x13c>
 2dc:	ldur	x0, [x29, #-32]
 2e0:	ldp	x29, x30, [sp, #80]
 2e4:	add	sp, sp, #0x60
 2e8:	ret

libltdlS.o:     file format elf64-littleaarch64


dlopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <dlopen_LTX_get_vtable>:
   0:	sub	sp, sp, #0x30
   4:	stp	x29, x30, [sp, #32]
   8:	add	x29, sp, #0x20
   c:	adrp	x8, 0 <dlopen_LTX_get_vtable>
  10:	add	x8, x8, #0x0
  14:	str	x0, [sp, #16]
  18:	ldr	x9, [x8]
  1c:	str	x8, [sp, #8]
  20:	cbnz	x9, 34 <dlopen_LTX_get_vtable+0x34>
  24:	mov	x0, #0x48                  	// #72
  28:	bl	0 <lt__zalloc>
  2c:	ldr	x8, [sp, #8]
  30:	str	x0, [x8]
  34:	ldr	x8, [sp, #8]
  38:	ldr	x9, [x8]
  3c:	cbz	x9, b8 <dlopen_LTX_get_vtable+0xb8>
  40:	ldr	x8, [sp, #8]
  44:	ldr	x9, [x8]
  48:	ldr	x9, [x9]
  4c:	cbnz	x9, b8 <dlopen_LTX_get_vtable+0xb8>
  50:	ldr	x8, [sp, #8]
  54:	ldr	x9, [x8]
  58:	adrp	x10, 0 <dlopen_LTX_get_vtable>
  5c:	add	x10, x10, #0x0
  60:	str	x10, [x9]
  64:	ldr	x9, [x8]
  68:	adrp	x10, 0 <dlopen_LTX_get_vtable>
  6c:	add	x10, x10, #0x0
  70:	str	x10, [x9, #16]
  74:	ldr	x9, [x8]
  78:	adrp	x10, 0 <dlopen_LTX_get_vtable>
  7c:	add	x10, x10, #0x0
  80:	str	x10, [x9, #24]
  84:	ldr	x9, [x8]
  88:	adrp	x10, 0 <dlopen_LTX_get_vtable>
  8c:	add	x10, x10, #0x0
  90:	str	x10, [x9, #32]
  94:	ldr	x9, [x8]
  98:	adrp	x10, 0 <dlopen_LTX_get_vtable>
  9c:	add	x10, x10, #0x0
  a0:	str	x10, [x9, #48]
  a4:	ldr	x9, [sp, #16]
  a8:	ldr	x10, [x8]
  ac:	str	x9, [x10, #56]
  b0:	ldr	x9, [x8]
  b4:	str	wzr, [x9, #64]
  b8:	ldr	x8, [sp, #8]
  bc:	ldr	x9, [x8]
  c0:	cbz	x9, f4 <dlopen_LTX_get_vtable+0xf4>
  c4:	ldr	x8, [sp, #8]
  c8:	ldr	x9, [x8]
  cc:	ldr	x9, [x9, #56]
  d0:	ldr	x10, [sp, #16]
  d4:	cmp	x9, x10
  d8:	b.eq	f4 <dlopen_LTX_get_vtable+0xf4>  // b.none
  dc:	mov	w0, #0x3                   	// #3
  e0:	bl	0 <lt__error_string>
  e4:	bl	0 <lt__set_last_error>
  e8:	mov	x8, xzr
  ec:	stur	x8, [x29, #-8]
  f0:	b	100 <dlopen_LTX_get_vtable+0x100>
  f4:	ldr	x8, [sp, #8]
  f8:	ldr	x9, [x8]
  fc:	stur	x9, [x29, #-8]
 100:	ldur	x0, [x29, #-8]
 104:	ldp	x29, x30, [sp, #32]
 108:	add	sp, sp, #0x30
 10c:	ret

0000000000000110 <vm_open>:
 110:	sub	sp, sp, #0x40
 114:	stp	x29, x30, [sp, #48]
 118:	add	x29, sp, #0x30
 11c:	mov	w8, #0x1                   	// #1
 120:	stur	x0, [x29, #-8]
 124:	stur	x1, [x29, #-16]
 128:	str	x2, [sp, #24]
 12c:	str	w8, [sp, #20]
 130:	ldr	x9, [sp, #24]
 134:	cbz	x9, 184 <vm_open+0x74>
 138:	ldr	x8, [sp, #24]
 13c:	ldrb	w9, [x8]
 140:	mov	w10, #0x2                   	// #2
 144:	lsr	w9, w9, w10
 148:	and	w9, w9, #0x1
 14c:	and	w9, w9, #0xff
 150:	cbz	w9, 160 <vm_open+0x50>
 154:	ldr	w8, [sp, #20]
 158:	orr	w8, w8, #0x100
 15c:	str	w8, [sp, #20]
 160:	ldr	x8, [sp, #24]
 164:	ldrb	w9, [x8]
 168:	mov	w10, #0x3                   	// #3
 16c:	lsr	w9, w9, w10
 170:	and	w9, w9, #0x1
 174:	and	w9, w9, #0xff
 178:	cbz	w9, 184 <vm_open+0x74>
 17c:	ldr	w8, [sp, #20]
 180:	str	w8, [sp, #20]
 184:	ldur	x0, [x29, #-16]
 188:	ldr	w1, [sp, #20]
 18c:	bl	0 <dlopen>
 190:	str	x0, [sp, #8]
 194:	ldr	x8, [sp, #8]
 198:	cbnz	x8, 1a4 <vm_open+0x94>
 19c:	bl	0 <dlerror>
 1a0:	bl	0 <lt__set_last_error>
 1a4:	ldr	x0, [sp, #8]
 1a8:	ldp	x29, x30, [sp, #48]
 1ac:	add	sp, sp, #0x40
 1b0:	ret

00000000000001b4 <vm_close>:
 1b4:	sub	sp, sp, #0x30
 1b8:	stp	x29, x30, [sp, #32]
 1bc:	add	x29, sp, #0x20
 1c0:	stur	x0, [x29, #-8]
 1c4:	str	x1, [sp, #16]
 1c8:	str	wzr, [sp, #12]
 1cc:	ldr	x0, [sp, #16]
 1d0:	bl	0 <dlclose>
 1d4:	cbz	w0, 1ec <vm_close+0x38>
 1d8:	bl	0 <dlerror>
 1dc:	bl	0 <lt__set_last_error>
 1e0:	ldr	w8, [sp, #12]
 1e4:	add	w8, w8, #0x1
 1e8:	str	w8, [sp, #12]
 1ec:	ldr	w0, [sp, #12]
 1f0:	ldp	x29, x30, [sp, #32]
 1f4:	add	sp, sp, #0x30
 1f8:	ret

00000000000001fc <vm_sym>:
 1fc:	sub	sp, sp, #0x30
 200:	stp	x29, x30, [sp, #32]
 204:	add	x29, sp, #0x20
 208:	stur	x0, [x29, #-8]
 20c:	str	x1, [sp, #16]
 210:	str	x2, [sp, #8]
 214:	ldr	x0, [sp, #16]
 218:	ldr	x1, [sp, #8]
 21c:	bl	0 <dlsym>
 220:	str	x0, [sp]
 224:	ldr	x8, [sp]
 228:	cbnz	x8, 234 <vm_sym+0x38>
 22c:	bl	0 <dlerror>
 230:	bl	0 <lt__set_last_error>
 234:	ldr	x0, [sp]
 238:	ldp	x29, x30, [sp, #32]
 23c:	add	sp, sp, #0x30
 240:	ret

0000000000000244 <vl_exit>:
 244:	sub	sp, sp, #0x10
 248:	mov	x8, xzr
 24c:	adrp	x9, 0 <dlopen_LTX_get_vtable>
 250:	add	x9, x9, #0x0
 254:	mov	w10, wzr
 258:	str	x0, [sp, #8]
 25c:	str	x8, [x9]
 260:	mov	w0, w10
 264:	add	sp, sp, #0x10
 268:	ret
