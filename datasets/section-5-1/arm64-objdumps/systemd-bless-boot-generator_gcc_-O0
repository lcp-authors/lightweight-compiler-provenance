
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-bless-boot-generator_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000400980 <_init>:
  400980:	stp	x29, x30, [sp, #-16]!
  400984:	mov	x29, sp
  400988:	bl	400b20 <call_weak_fn>
  40098c:	ldp	x29, x30, [sp], #16
  400990:	ret

Disassembly of section .plt:

00000000004009a0 <.plt>:
  4009a0:	stp	x16, x30, [sp, #-16]!
  4009a4:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  4009a8:	ldr	x17, [x16, #3936]
  4009ac:	add	x16, x16, #0xf60
  4009b0:	br	x17
  4009b4:	nop
  4009b8:	nop
  4009bc:	nop

00000000004009c0 <stpcpy@plt>:
  4009c0:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  4009c4:	ldr	x17, [x16, #3944]
  4009c8:	add	x16, x16, #0xf68
  4009cc:	br	x17

00000000004009d0 <__libc_start_main@plt>:
  4009d0:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  4009d4:	ldr	x17, [x16, #3952]
  4009d8:	add	x16, x16, #0xf70
  4009dc:	br	x17

00000000004009e0 <__gmon_start__@plt>:
  4009e0:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  4009e4:	ldr	x17, [x16, #3960]
  4009e8:	add	x16, x16, #0xf78
  4009ec:	br	x17

00000000004009f0 <symlink@plt>:
  4009f0:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  4009f4:	ldr	x17, [x16, #3968]
  4009f8:	add	x16, x16, #0xf80
  4009fc:	br	x17

0000000000400a00 <log_assert_failed_realm@plt>:
  400a00:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  400a04:	ldr	x17, [x16, #3976]
  400a08:	add	x16, x16, #0xf88
  400a0c:	br	x17

0000000000400a10 <in_initrd@plt>:
  400a10:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  400a14:	ldr	x17, [x16, #3984]
  400a18:	add	x16, x16, #0xf90
  400a1c:	br	x17

0000000000400a20 <is_efi_boot@plt>:
  400a20:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  400a24:	ldr	x17, [x16, #3992]
  400a28:	add	x16, x16, #0xf98
  400a2c:	br	x17

0000000000400a30 <access@plt>:
  400a30:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  400a34:	ldr	x17, [x16, #4000]
  400a38:	add	x16, x16, #0xfa0
  400a3c:	br	x17

0000000000400a40 <abort@plt>:
  400a40:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  400a44:	ldr	x17, [x16, #4008]
  400a48:	add	x16, x16, #0xfa8
  400a4c:	br	x17

0000000000400a50 <log_setup_generator@plt>:
  400a50:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  400a54:	ldr	x17, [x16, #4016]
  400a58:	add	x16, x16, #0xfb0
  400a5c:	br	x17

0000000000400a60 <__errno_location@plt>:
  400a60:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  400a64:	ldr	x17, [x16, #4024]
  400a68:	add	x16, x16, #0xfb8
  400a6c:	br	x17

0000000000400a70 <__stack_chk_fail@plt>:
  400a70:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  400a74:	ldr	x17, [x16, #4032]
  400a78:	add	x16, x16, #0xfc0
  400a7c:	br	x17

0000000000400a80 <log_internal_realm@plt>:
  400a80:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  400a84:	ldr	x17, [x16, #4040]
  400a88:	add	x16, x16, #0xfc8
  400a8c:	br	x17

0000000000400a90 <detect_container@plt>:
  400a90:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  400a94:	ldr	x17, [x16, #4048]
  400a98:	add	x16, x16, #0xfd0
  400a9c:	br	x17

0000000000400aa0 <strlen@plt>:
  400aa0:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  400aa4:	ldr	x17, [x16, #4056]
  400aa8:	add	x16, x16, #0xfd8
  400aac:	br	x17

0000000000400ab0 <mkdir_parents@plt>:
  400ab0:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  400ab4:	ldr	x17, [x16, #4064]
  400ab8:	add	x16, x16, #0xfe0
  400abc:	br	x17

0000000000400ac0 <log_get_max_level_realm@plt>:
  400ac0:	adrp	x16, 411000 <__FRAME_END__+0xf7e8>
  400ac4:	ldr	x17, [x16, #4072]
  400ac8:	add	x16, x16, #0xfe8
  400acc:	br	x17

Disassembly of section .text:

0000000000400ad0 <_start>:
  400ad0:	mov	x29, #0x0                   	// #0
  400ad4:	mov	x30, #0x0                   	// #0
  400ad8:	mov	x5, x0
  400adc:	ldr	x1, [sp]
  400ae0:	add	x2, sp, #0x8
  400ae4:	mov	x6, sp
  400ae8:	movz	x0, #0x0, lsl #48
  400aec:	movk	x0, #0x0, lsl #32
  400af0:	movk	x0, #0x40, lsl #16
  400af4:	movk	x0, #0xd14
  400af8:	movz	x3, #0x0, lsl #48
  400afc:	movk	x3, #0x0, lsl #32
  400b00:	movk	x3, #0x40, lsl #16
  400b04:	movk	x3, #0x1358
  400b08:	movz	x4, #0x0, lsl #48
  400b0c:	movk	x4, #0x0, lsl #32
  400b10:	movk	x4, #0x40, lsl #16
  400b14:	movk	x4, #0x13d8
  400b18:	bl	4009d0 <__libc_start_main@plt>
  400b1c:	bl	400a40 <abort@plt>

0000000000400b20 <call_weak_fn>:
  400b20:	adrp	x0, 411000 <__FRAME_END__+0xf7e8>
  400b24:	ldr	x0, [x0, #4088]
  400b28:	cbz	x0, 400b30 <call_weak_fn+0x10>
  400b2c:	b	4009e0 <__gmon_start__@plt>
  400b30:	ret

0000000000400b34 <deregister_tm_clones>:
  400b34:	stp	x29, x30, [sp, #-32]!
  400b38:	mov	x29, sp
  400b3c:	adrp	x0, 412000 <arg_dest>
  400b40:	add	x0, x0, #0x8
  400b44:	str	x0, [sp, #24]
  400b48:	ldr	x0, [sp, #24]
  400b4c:	str	x0, [sp, #24]
  400b50:	ldr	x1, [sp, #24]
  400b54:	adrp	x0, 412000 <arg_dest>
  400b58:	add	x0, x0, #0x8
  400b5c:	cmp	x1, x0
  400b60:	b.eq	400b9c <deregister_tm_clones+0x68>  // b.none
  400b64:	adrp	x0, 401000 <main+0x2ec>
  400b68:	add	x0, x0, #0x3f0
  400b6c:	ldr	x0, [x0]
  400b70:	str	x0, [sp, #16]
  400b74:	ldr	x0, [sp, #16]
  400b78:	str	x0, [sp, #16]
  400b7c:	ldr	x0, [sp, #16]
  400b80:	cmp	x0, #0x0
  400b84:	b.eq	400ba0 <deregister_tm_clones+0x6c>  // b.none
  400b88:	ldr	x1, [sp, #16]
  400b8c:	adrp	x0, 412000 <arg_dest>
  400b90:	add	x0, x0, #0x8
  400b94:	blr	x1
  400b98:	b	400ba0 <deregister_tm_clones+0x6c>
  400b9c:	nop
  400ba0:	ldp	x29, x30, [sp], #32
  400ba4:	ret

0000000000400ba8 <register_tm_clones>:
  400ba8:	stp	x29, x30, [sp, #-48]!
  400bac:	mov	x29, sp
  400bb0:	adrp	x0, 412000 <arg_dest>
  400bb4:	add	x0, x0, #0x8
  400bb8:	str	x0, [sp, #40]
  400bbc:	ldr	x0, [sp, #40]
  400bc0:	str	x0, [sp, #40]
  400bc4:	ldr	x1, [sp, #40]
  400bc8:	adrp	x0, 412000 <arg_dest>
  400bcc:	add	x0, x0, #0x8
  400bd0:	sub	x0, x1, x0
  400bd4:	asr	x0, x0, #3
  400bd8:	lsr	x1, x0, #63
  400bdc:	add	x0, x1, x0
  400be0:	asr	x0, x0, #1
  400be4:	str	x0, [sp, #32]
  400be8:	ldr	x0, [sp, #32]
  400bec:	cmp	x0, #0x0
  400bf0:	b.eq	400c30 <register_tm_clones+0x88>  // b.none
  400bf4:	adrp	x0, 401000 <main+0x2ec>
  400bf8:	add	x0, x0, #0x3f8
  400bfc:	ldr	x0, [x0]
  400c00:	str	x0, [sp, #24]
  400c04:	ldr	x0, [sp, #24]
  400c08:	str	x0, [sp, #24]
  400c0c:	ldr	x0, [sp, #24]
  400c10:	cmp	x0, #0x0
  400c14:	b.eq	400c34 <register_tm_clones+0x8c>  // b.none
  400c18:	ldr	x2, [sp, #24]
  400c1c:	ldr	x1, [sp, #32]
  400c20:	adrp	x0, 412000 <arg_dest>
  400c24:	add	x0, x0, #0x8
  400c28:	blr	x2
  400c2c:	b	400c34 <register_tm_clones+0x8c>
  400c30:	nop
  400c34:	ldp	x29, x30, [sp], #48
  400c38:	ret

0000000000400c3c <__do_global_dtors_aux>:
  400c3c:	stp	x29, x30, [sp, #-16]!
  400c40:	mov	x29, sp
  400c44:	adrp	x0, 412000 <arg_dest>
  400c48:	add	x0, x0, #0x8
  400c4c:	ldrb	w0, [x0]
  400c50:	and	x0, x0, #0xff
  400c54:	cmp	x0, #0x0
  400c58:	b.ne	400c74 <__do_global_dtors_aux+0x38>  // b.any
  400c5c:	bl	400b34 <deregister_tm_clones>
  400c60:	adrp	x0, 412000 <arg_dest>
  400c64:	add	x0, x0, #0x8
  400c68:	mov	w1, #0x1                   	// #1
  400c6c:	strb	w1, [x0]
  400c70:	b	400c78 <__do_global_dtors_aux+0x3c>
  400c74:	nop
  400c78:	ldp	x29, x30, [sp], #16
  400c7c:	ret

0000000000400c80 <frame_dummy>:
  400c80:	stp	x29, x30, [sp, #-16]!
  400c84:	mov	x29, sp
  400c88:	bl	400ba8 <register_tm_clones>
  400c8c:	nop
  400c90:	ldp	x29, x30, [sp], #16
  400c94:	ret

0000000000400c98 <size_multiply_overflow>:
  400c98:	sub	sp, sp, #0x10
  400c9c:	str	x0, [sp, #8]
  400ca0:	str	x1, [sp]
  400ca4:	ldr	x0, [sp]
  400ca8:	cmp	x0, #0x0
  400cac:	cset	w0, ne  // ne = any
  400cb0:	and	w0, w0, #0xff
  400cb4:	and	x0, x0, #0xff
  400cb8:	cmp	x0, #0x0
  400cbc:	b.eq	400d00 <size_multiply_overflow+0x68>  // b.none
  400cc0:	mov	x2, #0x0                   	// #0
  400cc4:	ldr	x1, [sp, #8]
  400cc8:	ldr	x0, [sp]
  400ccc:	umulh	x0, x1, x0
  400cd0:	cmp	x0, #0x0
  400cd4:	b.eq	400cdc <size_multiply_overflow+0x44>  // b.none
  400cd8:	mov	x2, #0x1                   	// #1
  400cdc:	mov	x0, x2
  400ce0:	cmp	x0, #0x0
  400ce4:	cset	w0, ne  // ne = any
  400ce8:	and	w0, w0, #0xff
  400cec:	and	x0, x0, #0xff
  400cf0:	cmp	x0, #0x0
  400cf4:	b.eq	400d00 <size_multiply_overflow+0x68>  // b.none
  400cf8:	mov	w0, #0x1                   	// #1
  400cfc:	b	400d04 <size_multiply_overflow+0x6c>
  400d00:	mov	w0, #0x0                   	// #0
  400d04:	and	w0, w0, #0x1
  400d08:	and	w0, w0, #0xff
  400d0c:	add	sp, sp, #0x10
  400d10:	ret

0000000000400d14 <main>:
  400d14:	stp	x29, x30, [sp, #-192]!
  400d18:	mov	x29, sp
  400d1c:	str	w0, [x29, #28]
  400d20:	str	x1, [x29, #16]
  400d24:	adrp	x0, 411000 <__FRAME_END__+0xf7e8>
  400d28:	add	x0, x0, #0xd18
  400d2c:	ldr	x1, [x0]
  400d30:	str	x1, [x29, #184]
  400d34:	mov	x1, #0x0                   	// #0
  400d38:	bl	400a50 <log_setup_generator@plt>
  400d3c:	ldr	w0, [x29, #28]
  400d40:	cmp	w0, #0x1
  400d44:	b.le	400dd0 <main+0xbc>
  400d48:	ldr	w0, [x29, #28]
  400d4c:	cmp	w0, #0x4
  400d50:	b.eq	400dd0 <main+0xbc>  // b.none
  400d54:	mov	w0, #0x3                   	// #3
  400d58:	str	w0, [x29, #36]
  400d5c:	str	wzr, [x29, #40]
  400d60:	str	wzr, [x29, #44]
  400d64:	ldr	w0, [x29, #44]
  400d68:	bl	400ac0 <log_get_max_level_realm@plt>
  400d6c:	mov	w1, w0
  400d70:	ldr	w0, [x29, #36]
  400d74:	and	w0, w0, #0x7
  400d78:	cmp	w1, w0
  400d7c:	b.lt	400dc0 <main+0xac>  // b.tstop
  400d80:	ldr	w0, [x29, #44]
  400d84:	lsl	w1, w0, #10
  400d88:	ldr	w0, [x29, #36]
  400d8c:	orr	w6, w1, w0
  400d90:	adrp	x0, 401000 <main+0x2ec>
  400d94:	add	x1, x0, #0x40b
  400d98:	adrp	x0, 401000 <main+0x2ec>
  400d9c:	add	x5, x0, #0x430
  400da0:	adrp	x0, 401000 <main+0x2ec>
  400da4:	add	x4, x0, #0x698
  400da8:	mov	w3, #0x1c                  	// #28
  400dac:	mov	x2, x1
  400db0:	ldr	w1, [x29, #40]
  400db4:	mov	w0, w6
  400db8:	bl	400a80 <log_internal_realm@plt>
  400dbc:	b	400dc8 <main+0xb4>
  400dc0:	ldr	w0, [x29, #40]
  400dc4:	cmp	w0, #0x0
  400dc8:	mov	w0, #0x1                   	// #1
  400dcc:	b	401320 <main+0x60c>
  400dd0:	ldr	w0, [x29, #28]
  400dd4:	cmp	w0, #0x1
  400dd8:	b.le	400df0 <main+0xdc>
  400ddc:	ldr	x0, [x29, #16]
  400de0:	ldr	x1, [x0, #16]
  400de4:	adrp	x0, 412000 <arg_dest>
  400de8:	add	x0, x0, #0x0
  400dec:	str	x1, [x0]
  400df0:	bl	400a10 <in_initrd@plt>
  400df4:	and	w0, w0, #0xff
  400df8:	cmp	w0, #0x0
  400dfc:	b.eq	400e7c <main+0x168>  // b.none
  400e00:	mov	w0, #0x7                   	// #7
  400e04:	str	w0, [x29, #108]
  400e08:	str	wzr, [x29, #112]
  400e0c:	str	wzr, [x29, #116]
  400e10:	ldr	w0, [x29, #116]
  400e14:	bl	400ac0 <log_get_max_level_realm@plt>
  400e18:	mov	w1, w0
  400e1c:	ldr	w0, [x29, #108]
  400e20:	and	w0, w0, #0x7
  400e24:	cmp	w1, w0
  400e28:	b.lt	400e6c <main+0x158>  // b.tstop
  400e2c:	ldr	w0, [x29, #116]
  400e30:	lsl	w1, w0, #10
  400e34:	ldr	w0, [x29, #108]
  400e38:	orr	w6, w1, w0
  400e3c:	adrp	x0, 401000 <main+0x2ec>
  400e40:	add	x1, x0, #0x40b
  400e44:	adrp	x0, 401000 <main+0x2ec>
  400e48:	add	x5, x0, #0x460
  400e4c:	adrp	x0, 401000 <main+0x2ec>
  400e50:	add	x4, x0, #0x698
  400e54:	mov	w3, #0x24                  	// #36
  400e58:	mov	x2, x1
  400e5c:	ldr	w1, [x29, #112]
  400e60:	mov	w0, w6
  400e64:	bl	400a80 <log_internal_realm@plt>
  400e68:	b	400e74 <main+0x160>
  400e6c:	ldr	w0, [x29, #112]
  400e70:	cmp	w0, #0x0
  400e74:	mov	w0, #0x0                   	// #0
  400e78:	b	401320 <main+0x60c>
  400e7c:	bl	400a90 <detect_container@plt>
  400e80:	cmp	w0, #0x0
  400e84:	b.le	400f04 <main+0x1f0>
  400e88:	mov	w0, #0x7                   	// #7
  400e8c:	str	w0, [x29, #96]
  400e90:	str	wzr, [x29, #100]
  400e94:	str	wzr, [x29, #104]
  400e98:	ldr	w0, [x29, #104]
  400e9c:	bl	400ac0 <log_get_max_level_realm@plt>
  400ea0:	mov	w1, w0
  400ea4:	ldr	w0, [x29, #96]
  400ea8:	and	w0, w0, #0x7
  400eac:	cmp	w1, w0
  400eb0:	b.lt	400ef4 <main+0x1e0>  // b.tstop
  400eb4:	ldr	w0, [x29, #104]
  400eb8:	lsl	w1, w0, #10
  400ebc:	ldr	w0, [x29, #96]
  400ec0:	orr	w6, w1, w0
  400ec4:	adrp	x0, 401000 <main+0x2ec>
  400ec8:	add	x1, x0, #0x40b
  400ecc:	adrp	x0, 401000 <main+0x2ec>
  400ed0:	add	x5, x0, #0x490
  400ed4:	adrp	x0, 401000 <main+0x2ec>
  400ed8:	add	x4, x0, #0x698
  400edc:	mov	w3, #0x29                  	// #41
  400ee0:	mov	x2, x1
  400ee4:	ldr	w1, [x29, #100]
  400ee8:	mov	w0, w6
  400eec:	bl	400a80 <log_internal_realm@plt>
  400ef0:	b	400efc <main+0x1e8>
  400ef4:	ldr	w0, [x29, #100]
  400ef8:	cmp	w0, #0x0
  400efc:	mov	w0, #0x0                   	// #0
  400f00:	b	401320 <main+0x60c>
  400f04:	bl	400a20 <is_efi_boot@plt>
  400f08:	and	w0, w0, #0xff
  400f0c:	eor	w0, w0, #0x1
  400f10:	and	w0, w0, #0xff
  400f14:	cmp	w0, #0x0
  400f18:	b.eq	400f98 <main+0x284>  // b.none
  400f1c:	mov	w0, #0x7                   	// #7
  400f20:	str	w0, [x29, #84]
  400f24:	str	wzr, [x29, #88]
  400f28:	str	wzr, [x29, #92]
  400f2c:	ldr	w0, [x29, #92]
  400f30:	bl	400ac0 <log_get_max_level_realm@plt>
  400f34:	mov	w1, w0
  400f38:	ldr	w0, [x29, #84]
  400f3c:	and	w0, w0, #0x7
  400f40:	cmp	w1, w0
  400f44:	b.lt	400f88 <main+0x274>  // b.tstop
  400f48:	ldr	w0, [x29, #92]
  400f4c:	lsl	w1, w0, #10
  400f50:	ldr	w0, [x29, #84]
  400f54:	orr	w6, w1, w0
  400f58:	adrp	x0, 401000 <main+0x2ec>
  400f5c:	add	x1, x0, #0x40b
  400f60:	adrp	x0, 401000 <main+0x2ec>
  400f64:	add	x5, x0, #0x4c0
  400f68:	adrp	x0, 401000 <main+0x2ec>
  400f6c:	add	x4, x0, #0x698
  400f70:	mov	w3, #0x2e                  	// #46
  400f74:	mov	x2, x1
  400f78:	ldr	w1, [x29, #88]
  400f7c:	mov	w0, w6
  400f80:	bl	400a80 <log_internal_realm@plt>
  400f84:	b	400f90 <main+0x27c>
  400f88:	ldr	w0, [x29, #88]
  400f8c:	cmp	w0, #0x0
  400f90:	mov	w0, #0x0                   	// #0
  400f94:	b	401320 <main+0x60c>
  400f98:	mov	w1, #0x0                   	// #0
  400f9c:	adrp	x0, 401000 <main+0x2ec>
  400fa0:	add	x0, x0, #0x4e8
  400fa4:	bl	400a30 <access@plt>
  400fa8:	cmp	w0, #0x0
  400fac:	b.ge	4010c8 <main+0x3b4>  // b.tcont
  400fb0:	bl	400a60 <__errno_location@plt>
  400fb4:	ldr	w0, [x0]
  400fb8:	cmp	w0, #0x2
  400fbc:	b.ne	401044 <main+0x330>  // b.any
  400fc0:	mov	w0, #0x7                   	// #7
  400fc4:	str	w0, [x29, #72]
  400fc8:	bl	400a60 <__errno_location@plt>
  400fcc:	ldr	w0, [x0]
  400fd0:	str	w0, [x29, #76]
  400fd4:	str	wzr, [x29, #80]
  400fd8:	ldr	w0, [x29, #80]
  400fdc:	bl	400ac0 <log_get_max_level_realm@plt>
  400fe0:	mov	w1, w0
  400fe4:	ldr	w0, [x29, #72]
  400fe8:	and	w0, w0, #0x7
  400fec:	cmp	w1, w0
  400ff0:	b.lt	401034 <main+0x320>  // b.tstop
  400ff4:	ldr	w0, [x29, #80]
  400ff8:	lsl	w1, w0, #10
  400ffc:	ldr	w0, [x29, #72]
  401000:	orr	w6, w1, w0
  401004:	adrp	x0, 401000 <main+0x2ec>
  401008:	add	x1, x0, #0x40b
  40100c:	adrp	x0, 401000 <main+0x2ec>
  401010:	add	x5, x0, #0x540
  401014:	adrp	x0, 401000 <main+0x2ec>
  401018:	add	x4, x0, #0x698
  40101c:	mov	w3, #0x35                  	// #53
  401020:	mov	x2, x1
  401024:	ldr	w1, [x29, #76]
  401028:	mov	w0, w6
  40102c:	bl	400a80 <log_internal_realm@plt>
  401030:	b	40103c <main+0x328>
  401034:	ldr	w0, [x29, #76]
  401038:	cmp	w0, #0x0
  40103c:	mov	w0, #0x0                   	// #0
  401040:	b	401320 <main+0x60c>
  401044:	mov	w0, #0x3                   	// #3
  401048:	str	w0, [x29, #60]
  40104c:	bl	400a60 <__errno_location@plt>
  401050:	ldr	w0, [x0]
  401054:	str	w0, [x29, #64]
  401058:	str	wzr, [x29, #68]
  40105c:	ldr	w0, [x29, #68]
  401060:	bl	400ac0 <log_get_max_level_realm@plt>
  401064:	mov	w1, w0
  401068:	ldr	w0, [x29, #60]
  40106c:	and	w0, w0, #0x7
  401070:	cmp	w1, w0
  401074:	b.lt	4010b8 <main+0x3a4>  // b.tstop
  401078:	ldr	w0, [x29, #68]
  40107c:	lsl	w1, w0, #10
  401080:	ldr	w0, [x29, #60]
  401084:	orr	w6, w1, w0
  401088:	adrp	x0, 401000 <main+0x2ec>
  40108c:	add	x1, x0, #0x40b
  401090:	adrp	x0, 401000 <main+0x2ec>
  401094:	add	x5, x0, #0x580
  401098:	adrp	x0, 401000 <main+0x2ec>
  40109c:	add	x4, x0, #0x698
  4010a0:	mov	w3, #0x39                  	// #57
  4010a4:	mov	x2, x1
  4010a8:	ldr	w1, [x29, #64]
  4010ac:	mov	w0, w6
  4010b0:	bl	400a80 <log_internal_realm@plt>
  4010b4:	b	4010c0 <main+0x3ac>
  4010b8:	ldr	w0, [x29, #64]
  4010bc:	cmp	w0, #0x0
  4010c0:	mov	w0, #0x1                   	// #1
  4010c4:	b	401320 <main+0x60c>
  4010c8:	adrp	x0, 412000 <arg_dest>
  4010cc:	add	x0, x0, #0x0
  4010d0:	ldr	x0, [x0]
  4010d4:	str	x0, [x29, #168]
  4010d8:	adrp	x0, 401000 <main+0x2ec>
  4010dc:	add	x0, x0, #0x5c0
  4010e0:	str	x0, [x29, #176]
  4010e4:	str	xzr, [x29, #128]
  4010e8:	str	xzr, [x29, #136]
  4010ec:	b	401120 <main+0x40c>
  4010f0:	ldr	x0, [x29, #136]
  4010f4:	lsl	x0, x0, #3
  4010f8:	add	x1, x29, #0xa8
  4010fc:	ldr	x0, [x1, x0]
  401100:	bl	400aa0 <strlen@plt>
  401104:	mov	x1, x0
  401108:	ldr	x0, [x29, #128]
  40110c:	add	x0, x0, x1
  401110:	str	x0, [x29, #128]
  401114:	ldr	x0, [x29, #136]
  401118:	add	x0, x0, #0x1
  40111c:	str	x0, [x29, #136]
  401120:	ldr	x0, [x29, #136]
  401124:	cmp	x0, #0x1
  401128:	b.hi	401144 <main+0x430>  // b.pmore
  40112c:	ldr	x0, [x29, #136]
  401130:	lsl	x0, x0, #3
  401134:	add	x1, x29, #0xa8
  401138:	ldr	x0, [x1, x0]
  40113c:	cmp	x0, #0x0
  401140:	b.ne	4010f0 <main+0x3dc>  // b.any
  401144:	ldr	x0, [x29, #128]
  401148:	add	x0, x0, #0x1
  40114c:	str	x0, [x29, #144]
  401150:	ldr	x1, [x29, #144]
  401154:	mov	x0, #0x1                   	// #1
  401158:	bl	400c98 <size_multiply_overflow>
  40115c:	and	w0, w0, #0xff
  401160:	and	x0, x0, #0xff
  401164:	cmp	x0, #0x0
  401168:	b.eq	401194 <main+0x480>  // b.none
  40116c:	adrp	x0, 401000 <main+0x2ec>
  401170:	add	x1, x0, #0x40b
  401174:	adrp	x0, 401000 <main+0x2ec>
  401178:	add	x4, x0, #0x6a0
  40117c:	mov	w3, #0x3f                  	// #63
  401180:	mov	x2, x1
  401184:	adrp	x0, 401000 <main+0x2ec>
  401188:	add	x1, x0, #0x5f0
  40118c:	mov	w0, #0x0                   	// #0
  401190:	bl	400a00 <log_assert_failed_realm@plt>
  401194:	ldr	x0, [x29, #144]
  401198:	cmp	x0, #0x400, lsl #12
  40119c:	cset	w0, hi  // hi = pmore
  4011a0:	and	w0, w0, #0xff
  4011a4:	and	x0, x0, #0xff
  4011a8:	cmp	x0, #0x0
  4011ac:	b.eq	4011d8 <main+0x4c4>  // b.none
  4011b0:	adrp	x0, 401000 <main+0x2ec>
  4011b4:	add	x1, x0, #0x40b
  4011b8:	adrp	x0, 401000 <main+0x2ec>
  4011bc:	add	x4, x0, #0x6a0
  4011c0:	mov	w3, #0x3f                  	// #63
  4011c4:	mov	x2, x1
  4011c8:	adrp	x0, 401000 <main+0x2ec>
  4011cc:	add	x1, x0, #0x620
  4011d0:	mov	w0, #0x0                   	// #0
  4011d4:	bl	400a00 <log_assert_failed_realm@plt>
  4011d8:	ldr	x0, [x29, #144]
  4011dc:	add	x0, x0, #0xf
  4011e0:	lsr	x0, x0, #4
  4011e4:	lsl	x0, x0, #4
  4011e8:	sub	sp, sp, x0
  4011ec:	mov	x0, sp
  4011f0:	add	x0, x0, #0xf
  4011f4:	lsr	x0, x0, #4
  4011f8:	lsl	x0, x0, #4
  4011fc:	str	x0, [x29, #152]
  401200:	ldr	x0, [x29, #152]
  401204:	str	x0, [x29, #120]
  401208:	str	xzr, [x29, #136]
  40120c:	b	40123c <main+0x528>
  401210:	ldr	x0, [x29, #136]
  401214:	lsl	x0, x0, #3
  401218:	add	x1, x29, #0xa8
  40121c:	ldr	x0, [x1, x0]
  401220:	mov	x1, x0
  401224:	ldr	x0, [x29, #120]
  401228:	bl	4009c0 <stpcpy@plt>
  40122c:	str	x0, [x29, #120]
  401230:	ldr	x0, [x29, #136]
  401234:	add	x0, x0, #0x1
  401238:	str	x0, [x29, #136]
  40123c:	ldr	x0, [x29, #136]
  401240:	cmp	x0, #0x1
  401244:	b.hi	401260 <main+0x54c>  // b.pmore
  401248:	ldr	x0, [x29, #136]
  40124c:	lsl	x0, x0, #3
  401250:	add	x1, x29, #0xa8
  401254:	ldr	x0, [x1, x0]
  401258:	cmp	x0, #0x0
  40125c:	b.ne	401210 <main+0x4fc>  // b.any
  401260:	ldr	x0, [x29, #120]
  401264:	strb	wzr, [x0]
  401268:	ldr	x0, [x29, #152]
  40126c:	str	x0, [x29, #160]
  401270:	mov	w1, #0x1ed                 	// #493
  401274:	ldr	x0, [x29, #160]
  401278:	bl	400ab0 <mkdir_parents@plt>
  40127c:	ldr	x1, [x29, #160]
  401280:	adrp	x0, 401000 <main+0x2ec>
  401284:	add	x0, x0, #0x640
  401288:	bl	4009f0 <symlink@plt>
  40128c:	cmp	w0, #0x0
  401290:	b.ge	40131c <main+0x608>  // b.tcont
  401294:	mov	w0, #0x3                   	// #3
  401298:	str	w0, [x29, #48]
  40129c:	bl	400a60 <__errno_location@plt>
  4012a0:	ldr	w0, [x0]
  4012a4:	str	w0, [x29, #52]
  4012a8:	str	wzr, [x29, #56]
  4012ac:	ldr	w0, [x29, #56]
  4012b0:	bl	400ac0 <log_get_max_level_realm@plt>
  4012b4:	mov	w1, w0
  4012b8:	ldr	w0, [x29, #48]
  4012bc:	and	w0, w0, #0x7
  4012c0:	cmp	w1, w0
  4012c4:	b.lt	40130c <main+0x5f8>  // b.tstop
  4012c8:	ldr	w0, [x29, #56]
  4012cc:	lsl	w1, w0, #10
  4012d0:	ldr	w0, [x29, #48]
  4012d4:	orr	w7, w1, w0
  4012d8:	adrp	x0, 401000 <main+0x2ec>
  4012dc:	add	x1, x0, #0x40b
  4012e0:	ldr	x6, [x29, #160]
  4012e4:	adrp	x0, 401000 <main+0x2ec>
  4012e8:	add	x5, x0, #0x670
  4012ec:	adrp	x0, 401000 <main+0x2ec>
  4012f0:	add	x4, x0, #0x698
  4012f4:	mov	w3, #0x42                  	// #66
  4012f8:	mov	x2, x1
  4012fc:	ldr	w1, [x29, #52]
  401300:	mov	w0, w7
  401304:	bl	400a80 <log_internal_realm@plt>
  401308:	b	401314 <main+0x600>
  40130c:	ldr	w0, [x29, #52]
  401310:	cmp	w0, #0x0
  401314:	mov	w0, #0x1                   	// #1
  401318:	b	401320 <main+0x60c>
  40131c:	mov	w0, #0x0                   	// #0
  401320:	mov	w1, w0
  401324:	adrp	x0, 411000 <__FRAME_END__+0xf7e8>
  401328:	add	x0, x0, #0xd18
  40132c:	ldr	x2, [x29, #184]
  401330:	ldr	x0, [x0]
  401334:	eor	x0, x2, x0
  401338:	cmp	x0, #0x0
  40133c:	b.eq	401344 <main+0x630>  // b.none
  401340:	bl	400a70 <__stack_chk_fail@plt>
  401344:	mov	w0, w1
  401348:	mov	sp, x29
  40134c:	ldp	x29, x30, [sp], #192
  401350:	ret
  401354:	nop

0000000000401358 <__libc_csu_init>:
  401358:	stp	x29, x30, [sp, #-64]!
  40135c:	mov	x29, sp
  401360:	stp	x19, x20, [sp, #16]
  401364:	adrp	x20, 411000 <__FRAME_END__+0xf7e8>
  401368:	add	x20, x20, #0xd10
  40136c:	stp	x21, x22, [sp, #32]
  401370:	adrp	x21, 411000 <__FRAME_END__+0xf7e8>
  401374:	add	x21, x21, #0xd08
  401378:	sub	x20, x20, x21
  40137c:	mov	w22, w0
  401380:	stp	x23, x24, [sp, #48]
  401384:	mov	x23, x1
  401388:	mov	x24, x2
  40138c:	bl	400980 <_init>
  401390:	cmp	xzr, x20, asr #3
  401394:	b.eq	4013c0 <__libc_csu_init+0x68>  // b.none
  401398:	asr	x20, x20, #3
  40139c:	mov	x19, #0x0                   	// #0
  4013a0:	ldr	x3, [x21, x19, lsl #3]
  4013a4:	mov	x2, x24
  4013a8:	add	x19, x19, #0x1
  4013ac:	mov	x1, x23
  4013b0:	mov	w0, w22
  4013b4:	blr	x3
  4013b8:	cmp	x20, x19
  4013bc:	b.ne	4013a0 <__libc_csu_init+0x48>  // b.any
  4013c0:	ldp	x19, x20, [sp, #16]
  4013c4:	ldp	x21, x22, [sp, #32]
  4013c8:	ldp	x23, x24, [sp, #48]
  4013cc:	ldp	x29, x30, [sp], #64
  4013d0:	ret
  4013d4:	nop

00000000004013d8 <__libc_csu_fini>:
  4013d8:	ret

Disassembly of section .fini:

00000000004013dc <_fini>:
  4013dc:	stp	x29, x30, [sp, #-16]!
  4013e0:	mov	x29, sp
  4013e4:	ldp	x29, x30, [sp], #16
  4013e8:	ret
