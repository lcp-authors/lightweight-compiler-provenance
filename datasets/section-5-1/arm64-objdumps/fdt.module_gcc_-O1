
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//fdt.module_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_cmd_devicetree>:
       0:	stp	x29, x30, [sp, #-64]!
       4:	mov	x29, sp
       8:	stp	x19, x20, [sp, #16]
       c:	mov	w19, w1
      10:	mov	x20, x2
      14:	adrp	x0, 0 <grub_cmd_devicetree>
      18:	ldr	x0, [x0]
      1c:	ldr	x0, [x0]
      20:	cbz	x0, 28 <grub_cmd_devicetree+0x28>
      24:	bl	0 <grub_free>
      28:	adrp	x0, 0 <grub_cmd_devicetree>
      2c:	ldr	x0, [x0]
      30:	str	xzr, [x0]
      34:	mov	w0, #0x0                   	// #0
      38:	cbnz	w19, 48 <grub_cmd_devicetree+0x48>
      3c:	ldp	x19, x20, [sp, #16]
      40:	ldp	x29, x30, [sp], #64
      44:	ret
      48:	mov	w1, #0x2a                  	// #42
      4c:	ldr	x0, [x20]
      50:	bl	0 <grub_file_open>
      54:	mov	x19, x0
      58:	cbz	x0, fc <grub_cmd_devicetree+0xfc>
      5c:	stp	x21, x22, [sp, #32]
      60:	str	x23, [sp, #48]
      64:	ldr	x21, [x0, #64]
      68:	sxtw	x23, w21
      6c:	mov	x0, x23
      70:	bl	0 <grub_malloc>
      74:	mov	x22, x0
      78:	cbz	x0, cc <grub_cmd_devicetree+0xcc>
      7c:	mov	x2, x23
      80:	mov	x1, x0
      84:	mov	x0, x19
      88:	bl	0 <grub_file_read>
      8c:	cmp	x0, w21, sxtw
      90:	b.ge	bc <grub_cmd_devicetree+0xbc>  // b.tcont
      94:	adrp	x0, 0 <grub_cmd_devicetree>
      98:	ldr	x0, [x0]
      9c:	ldr	w0, [x0]
      a0:	cbnz	w0, cc <grub_cmd_devicetree+0xcc>
      a4:	ldr	x2, [x20]
      a8:	adrp	x0, 0 <grub_cmd_devicetree>
      ac:	ldr	x1, [x0]
      b0:	mov	w0, #0x15                  	// #21
      b4:	bl	0 <grub_error>
      b8:	b	cc <grub_cmd_devicetree+0xcc>
      bc:	mov	w1, w21
      c0:	mov	x0, x22
      c4:	bl	af8 <grub_fdt_check_header>
      c8:	cbnz	w0, 10c <grub_cmd_devicetree+0x10c>
      cc:	mov	x0, x19
      d0:	bl	0 <grub_file_close>
      d4:	cbz	x22, 134 <grub_cmd_devicetree+0x134>
      d8:	adrp	x0, 0 <grub_cmd_devicetree>
      dc:	ldr	x0, [x0]
      e0:	ldr	w0, [x0]
      e4:	cbnz	w0, 120 <grub_cmd_devicetree+0x120>
      e8:	adrp	x0, 0 <grub_cmd_devicetree>
      ec:	ldr	x0, [x0]
      f0:	str	x22, [x0]
      f4:	ldp	x21, x22, [sp, #32]
      f8:	ldr	x23, [sp, #48]
      fc:	adrp	x0, 0 <grub_cmd_devicetree>
     100:	ldr	x0, [x0]
     104:	ldr	w0, [x0]
     108:	b	3c <grub_cmd_devicetree+0x3c>
     10c:	adrp	x0, 0 <grub_cmd_devicetree>
     110:	ldr	x1, [x0]
     114:	mov	w0, #0x15                  	// #21
     118:	bl	0 <grub_error>
     11c:	b	cc <grub_cmd_devicetree+0xcc>
     120:	mov	x0, x22
     124:	bl	0 <grub_free>
     128:	ldp	x21, x22, [sp, #32]
     12c:	ldr	x23, [sp, #48]
     130:	b	fc <grub_cmd_devicetree+0xfc>
     134:	ldp	x21, x22, [sp, #32]
     138:	ldr	x23, [sp, #48]
     13c:	b	fc <grub_cmd_devicetree+0xfc>
	...

0000000000000160 <grub_fdt_load>:
     160:	stp	x29, x30, [sp, #-64]!
     164:	mov	x29, sp
     168:	stp	x19, x20, [sp, #16]
     16c:	str	x21, [sp, #32]
     170:	mov	x20, x0
     174:	adrp	x0, 0 <grub_cmd_devicetree>
     178:	ldr	x0, [x0]
     17c:	ldr	x0, [x0, #8]
     180:	cbz	x0, 198 <grub_fdt_load+0x38>
     184:	ldr	w1, [x0, #4]
     188:	rev	w1, w1
     18c:	add	w1, w1, #0xfff
     190:	lsr	w1, w1, #12
     194:	bl	0 <grub_efi_free_pages>
     198:	adrp	x0, 0 <grub_cmd_devicetree>
     19c:	ldr	x0, [x0]
     1a0:	ldr	x21, [x0]
     1a4:	cbz	x21, 234 <grub_fdt_load+0xd4>
     1a8:	ldr	w19, [x21, #4]
     1ac:	rev	w19, w19
     1b0:	add	w19, w19, w20
     1b4:	mov	w4, w19
     1b8:	adrp	x0, 0 <grub_cmd_devicetree>
     1bc:	ldr	x3, [x0]
     1c0:	adrp	x0, 0 <grub_cmd_devicetree>
     1c4:	ldr	x2, [x0]
     1c8:	mov	w1, #0x3e                  	// #62
     1cc:	adrp	x0, 0 <grub_cmd_devicetree>
     1d0:	ldr	x0, [x0]
     1d4:	bl	0 <grub_real_dprintf>
     1d8:	add	w0, w19, #0xfff
     1dc:	lsr	w0, w0, #12
     1e0:	bl	0 <grub_efi_allocate_any_pages>
     1e4:	adrp	x1, 0 <grub_cmd_devicetree>
     1e8:	ldr	x1, [x1]
     1ec:	str	x0, [x1, #8]
     1f0:	cbz	x0, 224 <grub_fdt_load+0xc4>
     1f4:	mov	w2, w19
     1f8:	sub	x2, x2, x20
     1fc:	mov	x1, x21
     200:	bl	0 <grub_memmove>
     204:	rev	w19, w19
     208:	adrp	x0, 0 <grub_cmd_devicetree>
     20c:	ldr	x0, [x0]
     210:	ldr	x0, [x0, #8]
     214:	str	w19, [x0, #4]
     218:	adrp	x0, 0 <grub_cmd_devicetree>
     21c:	ldr	x0, [x0]
     220:	ldr	x0, [x0, #8]
     224:	ldp	x19, x20, [sp, #16]
     228:	ldr	x21, [sp, #32]
     22c:	ldp	x29, x30, [sp], #64
     230:	ret
     234:	bl	0 <grub_efi_get_firmware_fdt>
     238:	mov	x21, x0
     23c:	cbnz	x0, 1a8 <grub_fdt_load+0x48>
     240:	add	w19, w20, #0x83
     244:	mov	w4, w19
     248:	adrp	x0, 0 <grub_cmd_devicetree>
     24c:	ldr	x3, [x0]
     250:	adrp	x0, 0 <grub_cmd_devicetree>
     254:	ldr	x2, [x0]
     258:	mov	w1, #0x3e                  	// #62
     25c:	adrp	x0, 0 <grub_cmd_devicetree>
     260:	ldr	x0, [x0]
     264:	bl	0 <grub_real_dprintf>
     268:	add	w0, w20, #0x1, lsl #12
     26c:	add	w0, w0, #0x82
     270:	lsr	w0, w0, #12
     274:	bl	0 <grub_efi_allocate_any_pages>
     278:	adrp	x1, 0 <grub_cmd_devicetree>
     27c:	ldr	x1, [x1]
     280:	str	x0, [x1, #8]
     284:	cbz	x0, 224 <grub_fdt_load+0xc4>
     288:	mov	w1, w19
     28c:	bl	127c <grub_fdt_create_empty_tree>
     290:	mov	w20, #0x2000000             	// #33554432
     294:	str	w20, [sp, #60]
     298:	adrp	x0, 0 <grub_cmd_devicetree>
     29c:	ldr	x19, [x0]
     2a0:	mov	w4, #0x4                   	// #4
     2a4:	add	x3, sp, #0x3c
     2a8:	adrp	x0, 0 <grub_cmd_devicetree>
     2ac:	ldr	x2, [x0]
     2b0:	mov	w1, #0x0                   	// #0
     2b4:	ldr	x0, [x19, #8]
     2b8:	bl	fb4 <grub_fdt_set_prop>
     2bc:	str	w20, [sp, #60]
     2c0:	mov	w4, #0x4                   	// #4
     2c4:	add	x3, sp, #0x3c
     2c8:	adrp	x0, 0 <grub_cmd_devicetree>
     2cc:	ldr	x2, [x0]
     2d0:	mov	w1, #0x0                   	// #0
     2d4:	ldr	x0, [x19, #8]
     2d8:	bl	fb4 <grub_fdt_set_prop>
     2dc:	b	218 <grub_fdt_load+0xb8>
	...

0000000000000310 <grub_fdt_install>:
     310:	stp	x29, x30, [sp, #-32]!
     314:	mov	x29, sp
     318:	mov	w0, #0x21d5                	// #8661
     31c:	movk	w0, #0xb1b6, lsl #16
     320:	str	w0, [sp, #16]
     324:	mov	w0, #0xfffff19c            	// #-3684
     328:	strh	w0, [sp, #20]
     32c:	mov	w0, #0x41a5                	// #16805
     330:	strh	w0, [sp, #22]
     334:	mov	x0, #0xb83                 	// #2947
     338:	movk	x0, #0x15d9, lsl #16
     33c:	movk	x0, #0x692c, lsl #32
     340:	movk	x0, #0xe0aa, lsl #48
     344:	str	x0, [sp, #24]
     348:	adrp	x0, 0 <grub_cmd_devicetree>
     34c:	ldr	x0, [x0]
     350:	adrp	x1, 0 <grub_cmd_devicetree>
     354:	ldr	x1, [x1]
     358:	ldr	x1, [x1]
     35c:	ldr	x1, [x1, #96]
     360:	ldr	x2, [x1, #192]
     364:	ldr	x1, [x0, #8]
     368:	add	x0, sp, #0x10
     36c:	blr	x2
     370:	cbnz	x0, 3ac <grub_fdt_install+0x9c>
     374:	adrp	x0, 0 <grub_cmd_devicetree>
     378:	ldr	x0, [x0]
     37c:	ldr	x4, [x0, #8]
     380:	adrp	x0, 0 <grub_cmd_devicetree>
     384:	ldr	x3, [x0]
     388:	adrp	x0, 0 <grub_cmd_devicetree>
     38c:	ldr	x2, [x0]
     390:	mov	w1, #0x5d                  	// #93
     394:	adrp	x0, 0 <grub_cmd_devicetree>
     398:	ldr	x0, [x0]
     39c:	bl	0 <grub_real_dprintf>
     3a0:	mov	w0, #0x0                   	// #0
     3a4:	ldp	x29, x30, [sp], #32
     3a8:	ret
     3ac:	adrp	x0, 0 <grub_cmd_devicetree>
     3b0:	ldr	x1, [x0]
     3b4:	mov	w0, #0x1d                  	// #29
     3b8:	bl	0 <grub_error>
     3bc:	b	3a4 <grub_fdt_install+0x94>
	...

00000000000003f0 <grub_fdt_unload>:
     3f0:	adrp	x0, 0 <grub_cmd_devicetree>
     3f4:	ldr	x0, [x0]
     3f8:	ldr	x0, [x0, #8]
     3fc:	cbz	x0, 430 <grub_fdt_unload+0x40>
     400:	stp	x29, x30, [sp, #-16]!
     404:	mov	x29, sp
     408:	ldr	w1, [x0, #4]
     40c:	rev	w1, w1
     410:	add	w1, w1, #0xfff
     414:	lsr	w1, w1, #12
     418:	bl	0 <grub_efi_free_pages>
     41c:	adrp	x0, 0 <grub_cmd_devicetree>
     420:	ldr	x0, [x0]
     424:	str	xzr, [x0, #8]
     428:	ldp	x29, x30, [sp], #16
     42c:	ret
     430:	ret
     434:	nop
	...

0000000000000440 <grub_mod_init>:
     440:	stp	x29, x30, [sp, #-16]!
     444:	mov	x29, sp
     448:	mov	w4, #0x0                   	// #0
     44c:	adrp	x0, 0 <grub_cmd_devicetree>
     450:	ldr	x3, [x0]
     454:	mov	x2, #0x0                   	// #0
     458:	adrp	x0, 0 <grub_cmd_devicetree>
     45c:	ldr	x1, [x0]
     460:	adrp	x0, 0 <grub_cmd_devicetree>
     464:	ldr	x0, [x0]
     468:	bl	0 <grub_register_command_prio>
     46c:	adrp	x1, 0 <grub_cmd_devicetree>
     470:	ldr	x1, [x1]
     474:	str	x0, [x1, #16]
     478:	ldp	x29, x30, [sp], #16
     47c:	ret
	...

00000000000004a0 <grub_mod_fini>:
     4a0:	stp	x29, x30, [sp, #-16]!
     4a4:	mov	x29, sp
     4a8:	adrp	x0, 0 <grub_cmd_devicetree>
     4ac:	ldr	x0, [x0]
     4b0:	ldr	x0, [x0, #16]
     4b4:	bl	0 <grub_unregister_command>
     4b8:	ldp	x29, x30, [sp], #16
     4bc:	ret
	...

00000000000004c8 <get_next_node>:
     4c8:	stp	x29, x30, [sp, #-32]!
     4cc:	mov	x29, sp
     4d0:	stp	x19, x20, [sp, #16]
     4d4:	mov	x20, x0
     4d8:	ldr	w19, [x0, #8]
     4dc:	ldr	w0, [x0, #36]
     4e0:	rev	w19, w19
     4e4:	rev	w0, w0
     4e8:	add	x19, x19, x0
     4ec:	add	x19, x20, x19
     4f0:	cmp	x19, x1
     4f4:	b.ls	5c4 <get_next_node+0xfc>  // b.plast
     4f8:	ldrb	w2, [x1], #1
     4fc:	cbz	w2, 518 <get_next_node+0x50>
     500:	cmp	x19, x1
     504:	b.ne	4f8 <get_next_node+0x30>  // b.any
     508:	mov	x0, #0x0                   	// #0
     50c:	ldp	x19, x20, [sp, #16]
     510:	ldp	x29, x30, [sp], #32
     514:	ret
     518:	add	x1, x1, #0x3
     51c:	and	x0, x1, #0xfffffffffffffffc
     520:	cmp	x19, x0
     524:	b.hi	584 <get_next_node+0xbc>  // b.pmore
     528:	mov	x0, #0x0                   	// #0
     52c:	b	50c <get_next_node+0x44>
     530:	mov	x0, #0x0                   	// #0
     534:	b	50c <get_next_node+0x44>
     538:	cmp	w1, #0x4
     53c:	b.ne	548 <get_next_node+0x80>  // b.any
     540:	add	x0, x0, #0x4
     544:	b	57c <get_next_node+0xb4>
     548:	mov	x0, #0x0                   	// #0
     54c:	b	50c <get_next_node+0x44>
     550:	add	x1, x0, #0x4
     554:	mov	x0, x20
     558:	bl	4c8 <get_next_node>
     55c:	cbnz	x0, 57c <get_next_node+0xb4>
     560:	b	50c <get_next_node+0x44>
     564:	ldr	w1, [x0, #4]
     568:	rev	w1, w1
     56c:	add	w1, w1, #0x3
     570:	and	x1, x1, #0xfffffffc
     574:	add	x1, x1, #0xc
     578:	add	x0, x0, x1
     57c:	cmp	x0, x19
     580:	b.cs	5bc <get_next_node+0xf4>  // b.hs, b.nlast
     584:	ldr	w1, [x0]
     588:	rev	w1, w1
     58c:	cmp	w1, #0x3
     590:	b.eq	564 <get_next_node+0x9c>  // b.none
     594:	cmp	w1, #0x3
     598:	b.hi	538 <get_next_node+0x70>  // b.pmore
     59c:	cmp	w1, #0x1
     5a0:	b.eq	550 <get_next_node+0x88>  // b.none
     5a4:	cmp	w1, #0x2
     5a8:	b.ne	530 <get_next_node+0x68>  // b.any
     5ac:	add	x0, x0, #0x4
     5b0:	cmp	x19, x0
     5b4:	csel	x0, x0, xzr, hi  // hi = pmore
     5b8:	b	50c <get_next_node+0x44>
     5bc:	mov	x0, #0x0                   	// #0
     5c0:	b	50c <get_next_node+0x44>
     5c4:	mov	x0, #0x0                   	// #0
     5c8:	b	50c <get_next_node+0x44>

00000000000005cc <advance_token>:
     5cc:	cmp	x1, x2
     5d0:	b.cs	6b0 <advance_token+0xe4>  // b.hs, b.nlast
     5d4:	stp	x29, x30, [sp, #-48]!
     5d8:	mov	x29, sp
     5dc:	stp	x19, x20, [sp, #16]
     5e0:	stp	x21, x22, [sp, #32]
     5e4:	mov	x20, x0
     5e8:	mov	x19, x2
     5ec:	sub	x22, x2, #0x4
     5f0:	mov	w21, #0x0                   	// #0
     5f4:	b	674 <advance_token+0xa8>
     5f8:	cbnz	w3, 62c <advance_token+0x60>
     5fc:	add	x0, x1, #0x4
     600:	ldrb	w2, [x1, #4]
     604:	cmp	w2, #0x0
     608:	ccmp	x19, x0, #0x0, ne  // ne = any
     60c:	b.ls	620 <advance_token+0x54>  // b.plast
     610:	ldrb	w2, [x0, #1]!
     614:	cmp	w2, #0x0
     618:	ccmp	x19, x0, #0x0, ne  // ne = any
     61c:	b.hi	610 <advance_token+0x44>  // b.pmore
     620:	cmp	x19, x0
     624:	csel	x0, x1, xzr, hi  // hi = pmore
     628:	b	698 <advance_token+0xcc>
     62c:	add	x1, x1, #0x4
     630:	mov	x0, x20
     634:	bl	4c8 <get_next_node>
     638:	mov	x1, x0
     63c:	b	668 <advance_token+0x9c>
     640:	cmp	x1, x22
     644:	b.cs	6b8 <advance_token+0xec>  // b.hs, b.nlast
     648:	ldr	w2, [x1, #4]
     64c:	rev	w2, w2
     650:	add	w2, w2, #0x3
     654:	and	x2, x2, #0xfffffffc
     658:	add	x2, x2, #0xc
     65c:	add	x1, x1, x2
     660:	b	668 <advance_token+0x9c>
     664:	add	x1, x1, #0x4
     668:	mov	w3, w21
     66c:	cmp	x1, x19
     670:	b.cs	6a8 <advance_token+0xdc>  // b.hs, b.nlast
     674:	ldr	w4, [x1]
     678:	rev	w4, w4
     67c:	cmp	w4, #0x3
     680:	b.eq	640 <advance_token+0x74>  // b.none
     684:	cmp	w4, #0x4
     688:	b.eq	664 <advance_token+0x98>  // b.none
     68c:	cmp	w4, #0x1
     690:	b.eq	5f8 <advance_token+0x2c>  // b.none
     694:	mov	x0, #0x0                   	// #0
     698:	ldp	x19, x20, [sp, #16]
     69c:	ldp	x21, x22, [sp, #32]
     6a0:	ldp	x29, x30, [sp], #48
     6a4:	ret
     6a8:	mov	x0, #0x0                   	// #0
     6ac:	b	698 <advance_token+0xcc>
     6b0:	mov	x0, #0x0                   	// #0
     6b4:	ret
     6b8:	mov	x0, #0x0                   	// #0
     6bc:	b	698 <advance_token+0xcc>

00000000000006c0 <get_mem_rsvmap_size>:
     6c0:	mov	x3, x0
     6c4:	ldr	w4, [x0, #16]
     6c8:	rev	w4, w4
     6cc:	add	x0, x4, x0
     6d0:	mov	x2, x0
     6d4:	mov	w4, #0x10                  	// #16
     6d8:	sub	w4, w4, w0
     6dc:	sub	x5, x3, #0x10
     6e0:	b	6fc <get_mem_rsvmap_size+0x3c>
     6e4:	add	x2, x2, #0x10
     6e8:	ldr	w1, [x3, #4]
     6ec:	rev	w1, w1
     6f0:	add	x1, x5, x1
     6f4:	cmp	x2, x1
     6f8:	b.hi	714 <get_mem_rsvmap_size+0x54>  // b.pmore
     6fc:	add	w0, w4, w2
     700:	ldr	x1, [x2]
     704:	cbnz	x1, 6e4 <get_mem_rsvmap_size+0x24>
     708:	ldr	x1, [x2, #8]
     70c:	cbnz	x1, 6e4 <get_mem_rsvmap_size+0x24>
     710:	b	718 <get_mem_rsvmap_size+0x58>
     714:	mov	w0, #0xffffffff            	// #-1
     718:	ret

000000000000071c <get_free_space>:
     71c:	stp	x29, x30, [sp, #-32]!
     720:	mov	x29, sp
     724:	str	x19, [sp, #16]
     728:	mov	x19, x0
     72c:	bl	6c0 <get_mem_rsvmap_size>
     730:	tbnz	w0, #31, 76c <get_free_space+0x50>
     734:	ldr	w3, [x19, #4]
     738:	rev	w3, w3
     73c:	ldr	w1, [x19, #32]
     740:	rev	w2, w1
     744:	ldr	w1, [x19, #36]
     748:	rev	w4, w1
     74c:	mov	w1, #0xffffffd8            	// #-40
     750:	sub	w0, w1, w0
     754:	add	w1, w2, w4
     758:	sub	w0, w0, w1
     75c:	add	w0, w0, w3
     760:	ldr	x19, [sp, #16]
     764:	ldp	x29, x30, [sp], #32
     768:	ret
     76c:	mov	w0, #0x0                   	// #0
     770:	b	760 <get_free_space+0x44>

0000000000000774 <find_prop>:
     774:	stp	x29, x30, [sp, #-64]!
     778:	mov	x29, sp
     77c:	stp	x19, x20, [sp, #16]
     780:	stp	x21, x22, [sp, #32]
     784:	stp	x23, x24, [sp, #48]
     788:	mov	x21, x0
     78c:	mov	x22, x2
     790:	ldr	w19, [x0, #8]
     794:	rev	w19, w19
     798:	add	x19, x0, x19
     79c:	ldr	w20, [x0, #36]
     7a0:	rev	w20, w20
     7a4:	add	x20, x20, x19
     7a8:	add	x19, x19, w1, uxtw
     7ac:	add	x19, x19, #0x4
     7b0:	cmp	x19, x20
     7b4:	b.cs	7c0 <find_prop+0x4c>  // b.hs, b.nlast
     7b8:	ldrb	w0, [x19], #1
     7bc:	cbnz	w0, 7b0 <find_prop+0x3c>
     7c0:	add	x19, x19, #0x3
     7c4:	and	x19, x19, #0xfffffffffffffffc
     7c8:	sub	x23, x20, #0x8
     7cc:	cmp	x19, x23
     7d0:	b.cc	868 <find_prop+0xf4>  // b.lo, b.ul, b.last
     7d4:	mov	x19, #0x0                   	// #0
     7d8:	b	88c <find_prop+0x118>
     7dc:	ldr	w24, [x19, #8]
     7e0:	rev	w24, w24
     7e4:	mov	x0, x22
     7e8:	bl	0 <grub_strlen>
     7ec:	ldr	w1, [x21, #32]
     7f0:	add	x0, x24, x0
     7f4:	rev	w1, w1
     7f8:	cmp	x0, x1
     7fc:	b.cc	81c <find_prop+0xa8>  // b.lo, b.ul, b.last
     800:	ldr	w0, [x19, #4]
     804:	rev	w0, w0
     808:	add	w0, w0, #0x3
     80c:	and	x0, x0, #0xfffffffc
     810:	add	x0, x0, #0xc
     814:	add	x19, x19, x0
     818:	b	860 <find_prop+0xec>
     81c:	ldr	w1, [x21, #12]
     820:	rev	w1, w1
     824:	add	x1, x1, x24
     828:	add	x1, x21, x1
     82c:	mov	x0, x22
     830:	bl	0 <grub_strcmp>
     834:	cbnz	w0, 800 <find_prop+0x8c>
     838:	ldr	w0, [x19, #4]
     83c:	rev	w0, w0
     840:	add	w0, w0, #0x3
     844:	and	x0, x0, #0xfffffffc
     848:	add	x0, x0, #0xc
     84c:	add	x0, x19, x0
     850:	cmp	x20, x0
     854:	csel	x19, x19, xzr, hi  // hi = pmore
     858:	b	88c <find_prop+0x118>
     85c:	add	x19, x19, #0x4
     860:	cmp	x19, x23
     864:	b.cs	888 <find_prop+0x114>  // b.hs, b.nlast
     868:	ldr	w1, [x19]
     86c:	rev	w1, w1
     870:	cmp	w1, #0x3
     874:	b.eq	7dc <find_prop+0x68>  // b.none
     878:	cmp	w1, #0x4
     87c:	b.eq	85c <find_prop+0xe8>  // b.none
     880:	mov	x19, #0x0                   	// #0
     884:	b	88c <find_prop+0x118>
     888:	mov	x19, #0x0                   	// #0
     88c:	mov	x0, x19
     890:	ldp	x19, x20, [sp, #16]
     894:	ldp	x21, x22, [sp, #32]
     898:	ldp	x23, x24, [sp, #48]
     89c:	ldp	x29, x30, [sp], #64
     8a0:	ret

00000000000008a4 <rearrange_blocks>:
     8a4:	stp	x29, x30, [sp, #-64]!
     8a8:	mov	x29, sp
     8ac:	stp	x19, x20, [sp, #16]
     8b0:	stp	x23, x24, [sp, #48]
     8b4:	mov	x19, x0
     8b8:	mov	w20, w1
     8bc:	bl	6c0 <get_mem_rsvmap_size>
     8c0:	add	w23, w0, #0x28
     8c4:	ldr	w1, [x19, #36]
     8c8:	rev	w1, w1
     8cc:	add	w20, w20, w1
     8d0:	add	w20, w20, w23
     8d4:	ldr	w0, [x19, #16]
     8d8:	rev	w0, w0
     8dc:	cmp	w0, #0x28
     8e0:	b.ne	8f4 <rearrange_blocks+0x50>  // b.any
     8e4:	ldr	w0, [x19, #8]
     8e8:	rev	w0, w0
     8ec:	cmp	w23, w0
     8f0:	b.eq	9bc <rearrange_blocks+0x118>  // b.none
     8f4:	stp	x21, x22, [sp, #32]
     8f8:	ldr	w0, [x19, #4]
     8fc:	rev	w0, w0
     900:	bl	0 <grub_malloc>
     904:	mov	x21, x0
     908:	cbz	x0, 9f4 <rearrange_blocks+0x150>
     90c:	add	x24, x0, #0x28
     910:	ldr	w22, [x19, #16]
     914:	rev	w22, w22
     918:	add	x22, x19, x22
     91c:	mov	x0, x19
     920:	bl	6c0 <get_mem_rsvmap_size>
     924:	sxtw	x2, w0
     928:	mov	x1, x22
     92c:	mov	x0, x24
     930:	bl	0 <grub_memmove>
     934:	mov	w0, #0x28000000            	// #671088640
     938:	str	w0, [x19, #16]
     93c:	ldr	w1, [x19, #8]
     940:	ldr	w2, [x19, #36]
     944:	rev	w1, w1
     948:	rev	w2, w2
     94c:	add	x1, x19, x1
     950:	add	x0, x21, w23, uxtw
     954:	bl	0 <grub_memmove>
     958:	rev	w0, w23
     95c:	str	w0, [x19, #8]
     960:	ldr	w1, [x19, #12]
     964:	ldr	w2, [x19, #32]
     968:	rev	w1, w1
     96c:	rev	w2, w2
     970:	add	x1, x19, x1
     974:	add	x0, x21, w20, uxtw
     978:	bl	0 <grub_memmove>
     97c:	rev	w20, w20
     980:	str	w20, [x19, #12]
     984:	ldr	w2, [x19, #4]
     988:	rev	w2, w2
     98c:	sub	w2, w2, #0x28
     990:	mov	x1, x24
     994:	add	x0, x19, #0x28
     998:	bl	0 <grub_memmove>
     99c:	mov	x0, x21
     9a0:	bl	0 <grub_free>
     9a4:	mov	w0, #0x0                   	// #0
     9a8:	ldp	x21, x22, [sp, #32]
     9ac:	ldp	x19, x20, [sp, #16]
     9b0:	ldp	x23, x24, [sp, #48]
     9b4:	ldp	x29, x30, [sp], #64
     9b8:	ret
     9bc:	ldr	w1, [x19, #12]
     9c0:	rev	w1, w1
     9c4:	mov	w0, #0x0                   	// #0
     9c8:	cmp	w20, w1
     9cc:	b.eq	9ac <rearrange_blocks+0x108>  // b.none
     9d0:	ldr	w2, [x19, #32]
     9d4:	rev	w2, w2
     9d8:	add	x1, x19, w1, uxtw
     9dc:	add	x0, x19, w20, uxtw
     9e0:	bl	0 <grub_memmove>
     9e4:	rev	w20, w20
     9e8:	str	w20, [x19, #12]
     9ec:	mov	w0, #0x0                   	// #0
     9f0:	b	9ac <rearrange_blocks+0x108>
     9f4:	mov	w0, #0xffffffff            	// #-1
     9f8:	ldp	x21, x22, [sp, #32]
     9fc:	b	9ac <rearrange_blocks+0x108>

0000000000000a00 <grub_fdt_check_header_nosize>:
     a00:	tst	x0, #0x3
     a04:	b.ne	ab0 <grub_fdt_check_header_nosize+0xb0>  // b.any
     a08:	ldr	w2, [x0]
     a0c:	mov	w1, #0xdd0                 	// #3536
     a10:	movk	w1, #0xedfe, lsl #16
     a14:	cmp	w2, w1
     a18:	b.ne	ab8 <grub_fdt_check_header_nosize+0xb8>  // b.any
     a1c:	ldr	w1, [x0, #20]
     a20:	rev	w1, w1
     a24:	cmp	w1, #0x10
     a28:	b.ls	ac0 <grub_fdt_check_header_nosize+0xc0>  // b.plast
     a2c:	ldr	w1, [x0, #24]
     a30:	rev	w1, w1
     a34:	cmp	w1, #0x11
     a38:	b.hi	ac8 <grub_fdt_check_header_nosize+0xc8>  // b.pmore
     a3c:	ldr	w2, [x0, #8]
     a40:	rev	w3, w2
     a44:	tst	x3, #0x3
     a48:	b.ne	ad0 <grub_fdt_check_header_nosize+0xd0>  // b.any
     a4c:	ldr	w2, [x0, #36]
     a50:	rev	w2, w2
     a54:	tst	x2, #0x3
     a58:	b.ne	ad8 <grub_fdt_check_header_nosize+0xd8>  // b.any
     a5c:	ldr	w1, [x0, #4]
     a60:	rev	w1, w1
     a64:	add	w2, w2, w3
     a68:	cmp	w2, w1
     a6c:	b.hi	ae0 <grub_fdt_check_header_nosize+0xe0>  // b.pmore
     a70:	ldr	w2, [x0, #12]
     a74:	rev	w2, w2
     a78:	ldr	w3, [x0, #32]
     a7c:	rev	w3, w3
     a80:	add	w2, w2, w3
     a84:	cmp	w2, w1
     a88:	b.hi	ae8 <grub_fdt_check_header_nosize+0xe8>  // b.pmore
     a8c:	ldr	w0, [x0, #16]
     a90:	rev	w0, w0
     a94:	tst	x0, #0x7
     a98:	b.ne	af0 <grub_fdt_check_header_nosize+0xf0>  // b.any
     a9c:	mov	w1, w1
     aa0:	sub	x1, x1, #0x10
     aa4:	cmp	x1, w0, uxtw
     aa8:	csetm	w0, cc  // cc = lo, ul, last
     aac:	ret
     ab0:	mov	w0, #0xffffffff            	// #-1
     ab4:	b	aac <grub_fdt_check_header_nosize+0xac>
     ab8:	mov	w0, #0xffffffff            	// #-1
     abc:	b	aac <grub_fdt_check_header_nosize+0xac>
     ac0:	mov	w0, #0xffffffff            	// #-1
     ac4:	b	aac <grub_fdt_check_header_nosize+0xac>
     ac8:	mov	w0, #0xffffffff            	// #-1
     acc:	b	aac <grub_fdt_check_header_nosize+0xac>
     ad0:	mov	w0, #0xffffffff            	// #-1
     ad4:	b	aac <grub_fdt_check_header_nosize+0xac>
     ad8:	mov	w0, #0xffffffff            	// #-1
     adc:	b	aac <grub_fdt_check_header_nosize+0xac>
     ae0:	mov	w0, #0xffffffff            	// #-1
     ae4:	b	aac <grub_fdt_check_header_nosize+0xac>
     ae8:	mov	w0, #0xffffffff            	// #-1
     aec:	b	aac <grub_fdt_check_header_nosize+0xac>
     af0:	mov	w0, #0xffffffff            	// #-1
     af4:	b	aac <grub_fdt_check_header_nosize+0xac>

0000000000000af8 <grub_fdt_check_header>:
     af8:	cmp	w1, #0x27
     afc:	b.ls	b2c <grub_fdt_check_header+0x34>  // b.plast
     b00:	ldr	w2, [x0, #4]
     b04:	rev	w2, w2
     b08:	cmp	w1, w2
     b0c:	b.cc	b34 <grub_fdt_check_header+0x3c>  // b.lo, b.ul, b.last
     b10:	stp	x29, x30, [sp, #-16]!
     b14:	mov	x29, sp
     b18:	bl	a00 <grub_fdt_check_header_nosize>
     b1c:	cmn	w0, #0x1
     b20:	csetm	w0, eq  // eq = none
     b24:	ldp	x29, x30, [sp], #16
     b28:	ret
     b2c:	mov	w0, #0xffffffff            	// #-1
     b30:	ret
     b34:	mov	w0, #0xffffffff            	// #-1
     b38:	ret

0000000000000b3c <grub_fdt_next_node>:
     b3c:	stp	x29, x30, [sp, #-32]!
     b40:	mov	x29, sp
     b44:	stp	x19, x20, [sp, #16]
     b48:	mov	x19, x0
     b4c:	ldr	w20, [x0, #8]
     b50:	rev	w20, w20
     b54:	add	w1, w1, w20
     b58:	and	x1, x1, #0xfffffffc
     b5c:	ldr	w2, [x0, #36]
     b60:	rev	w2, w2
     b64:	add	x2, x2, w20, uxtw
     b68:	mov	w3, #0x1                   	// #1
     b6c:	add	x2, x0, x2
     b70:	add	x1, x0, x1
     b74:	bl	5cc <advance_token>
     b78:	cbz	x0, b90 <grub_fdt_next_node+0x54>
     b7c:	sub	x0, x0, x19
     b80:	sub	w0, w0, w20
     b84:	ldp	x19, x20, [sp, #16]
     b88:	ldp	x29, x30, [sp], #32
     b8c:	ret
     b90:	mov	w0, #0xffffffff            	// #-1
     b94:	b	b84 <grub_fdt_next_node+0x48>

0000000000000b98 <grub_fdt_first_node>:
     b98:	mov	w3, w1
     b9c:	tst	x3, #0x3
     ba0:	b.ne	c2c <grub_fdt_first_node+0x94>  // b.any
     ba4:	stp	x29, x30, [sp, #-32]!
     ba8:	mov	x29, sp
     bac:	stp	x19, x20, [sp, #16]
     bb0:	mov	x19, x0
     bb4:	ldr	w0, [x0, #8]
     bb8:	rev	w20, w0
     bbc:	rev	w0, w0
     bc0:	add	x0, x0, x19
     bc4:	add	x1, x0, w1, uxtw
     bc8:	ldr	w2, [x19, #36]
     bcc:	rev	w2, w2
     bd0:	add	x2, x2, x0
     bd4:	cmp	x1, x2
     bd8:	b.cs	c34 <grub_fdt_first_node+0x9c>  // b.hs, b.nlast
     bdc:	ldr	w0, [x0, w3, uxtw]
     be0:	rev	w0, w0
     be4:	cmp	w0, #0x1
     be8:	b.ne	c3c <grub_fdt_first_node+0xa4>  // b.any
     bec:	add	x1, x1, #0x4
     bf0:	cmp	x1, x2
     bf4:	b.cs	c00 <grub_fdt_first_node+0x68>  // b.hs, b.nlast
     bf8:	ldrb	w3, [x1], #1
     bfc:	cbnz	w3, bf0 <grub_fdt_first_node+0x58>
     c00:	add	x1, x1, #0x3
     c04:	mov	w3, #0x0                   	// #0
     c08:	and	x1, x1, #0xfffffffffffffffc
     c0c:	mov	x0, x19
     c10:	bl	5cc <advance_token>
     c14:	cbz	x0, c44 <grub_fdt_first_node+0xac>
     c18:	sub	x0, x0, x19
     c1c:	sub	w0, w0, w20
     c20:	ldp	x19, x20, [sp, #16]
     c24:	ldp	x29, x30, [sp], #32
     c28:	ret
     c2c:	mov	w0, #0xffffffff            	// #-1
     c30:	ret
     c34:	mov	w0, #0xffffffff            	// #-1
     c38:	b	c20 <grub_fdt_first_node+0x88>
     c3c:	mov	w0, #0xffffffff            	// #-1
     c40:	b	c20 <grub_fdt_first_node+0x88>
     c44:	mov	w0, #0xffffffff            	// #-1
     c48:	b	c20 <grub_fdt_first_node+0x88>

0000000000000c4c <grub_fdt_find_subnode>:
     c4c:	tst	x1, #0x3
     c50:	b.ne	d0c <grub_fdt_find_subnode+0xc0>  // b.any
     c54:	stp	x29, x30, [sp, #-64]!
     c58:	mov	x29, sp
     c5c:	stp	x19, x20, [sp, #16]
     c60:	stp	x21, x22, [sp, #32]
     c64:	mov	x21, x0
     c68:	mov	x22, x2
     c6c:	ldr	w0, [x0, #8]
     c70:	rev	w0, w0
     c74:	add	x0, x0, x21
     c78:	add	x19, x0, w1, uxtw
     c7c:	ldr	w20, [x21, #36]
     c80:	rev	w20, w20
     c84:	add	x20, x20, x0
     c88:	cmp	x19, x20
     c8c:	b.cs	d14 <grub_fdt_find_subnode+0xc8>  // b.hs, b.nlast
     c90:	ldr	w0, [x0, w1, uxtw]
     c94:	rev	w0, w0
     c98:	cmp	w0, #0x1
     c9c:	b.ne	d1c <grub_fdt_find_subnode+0xd0>  // b.any
     ca0:	str	x23, [sp, #48]
     ca4:	add	x19, x19, #0x4
     ca8:	cmp	x19, x20
     cac:	b.cs	cb8 <grub_fdt_find_subnode+0x6c>  // b.hs, b.nlast
     cb0:	ldrb	w0, [x19], #1
     cb4:	cbnz	w0, ca8 <grub_fdt_find_subnode+0x5c>
     cb8:	add	x19, x19, #0x3
     cbc:	and	x19, x19, #0xfffffffffffffffc
     cc0:	mov	w3, #0x0                   	// #0
     cc4:	mov	w23, #0x1                   	// #1
     cc8:	mov	x2, x20
     ccc:	mov	x1, x19
     cd0:	mov	x0, x21
     cd4:	bl	5cc <advance_token>
     cd8:	mov	x19, x0
     cdc:	cbz	x0, d24 <grub_fdt_find_subnode+0xd8>
     ce0:	mov	x1, x22
     ce4:	add	x0, x0, #0x4
     ce8:	bl	0 <grub_strcmp>
     cec:	mov	w3, w23
     cf0:	cbnz	w0, cc8 <grub_fdt_find_subnode+0x7c>
     cf4:	ldr	w0, [x21, #8]
     cf8:	rev	w1, w0
     cfc:	sub	x0, x19, x21
     d00:	sub	w0, w0, w1
     d04:	ldr	x23, [sp, #48]
     d08:	b	d2c <grub_fdt_find_subnode+0xe0>
     d0c:	mov	w0, #0xffffffff            	// #-1
     d10:	ret
     d14:	mov	w0, #0xffffffff            	// #-1
     d18:	b	d2c <grub_fdt_find_subnode+0xe0>
     d1c:	mov	w0, #0xffffffff            	// #-1
     d20:	b	d2c <grub_fdt_find_subnode+0xe0>
     d24:	mov	w0, #0xffffffff            	// #-1
     d28:	ldr	x23, [sp, #48]
     d2c:	ldp	x19, x20, [sp, #16]
     d30:	ldp	x21, x22, [sp, #32]
     d34:	ldp	x29, x30, [sp], #64
     d38:	ret

0000000000000d3c <grub_fdt_get_nodename>:
     d3c:	ldr	w2, [x0, #8]
     d40:	mov	w1, w1
     d44:	add	x1, x1, #0x4
     d48:	rev	w2, w2
     d4c:	add	x1, x1, x2
     d50:	add	x0, x0, x1
     d54:	ret

0000000000000d58 <grub_fdt_add_subnode>:
     d58:	stp	x29, x30, [sp, #-80]!
     d5c:	mov	x29, sp
     d60:	stp	x19, x20, [sp, #16]
     d64:	stp	x21, x22, [sp, #32]
     d68:	mov	x20, x0
     d6c:	mov	w19, w1
     d70:	mov	x22, x2
     d74:	mov	x0, x2
     d78:	bl	0 <grub_strlen>
     d7c:	tst	x19, #0x3
     d80:	b.ne	f04 <grub_fdt_add_subnode+0x1ac>  // b.any
     d84:	add	w21, w0, #0x4
     d88:	and	w21, w21, #0xfffffffc
     d8c:	add	w21, w21, #0x8
     d90:	mov	x0, x20
     d94:	bl	71c <get_free_space>
     d98:	cmp	w0, w21
     d9c:	b.cc	f0c <grub_fdt_add_subnode+0x1b4>  // b.lo, b.ul, b.last
     da0:	mov	w1, w21
     da4:	mov	x0, x20
     da8:	bl	8a4 <rearrange_blocks>
     dac:	tbnz	w0, #31, f14 <grub_fdt_add_subnode+0x1bc>
     db0:	stp	x23, x24, [sp, #48]
     db4:	str	x25, [sp, #64]
     db8:	ldr	w24, [x20, #8]
     dbc:	rev	w24, w24
     dc0:	add	x24, x24, x20
     dc4:	ldr	w21, [x20, #36]
     dc8:	rev	w21, w21
     dcc:	add	x21, x21, x24
     dd0:	mov	x23, x21
     dd4:	mov	x0, x22
     dd8:	bl	0 <grub_strlen>
     ddc:	mov	x2, x0
     de0:	add	x19, x24, w19, sxtw
     de4:	add	x19, x19, #0x4
     de8:	cmp	x23, x19
     dec:	b.ls	df8 <grub_fdt_add_subnode+0xa0>  // b.plast
     df0:	ldrb	w0, [x19], #1
     df4:	cbnz	w0, de8 <grub_fdt_add_subnode+0x90>
     df8:	add	x19, x19, #0x3
     dfc:	and	x19, x19, #0xfffffffffffffffc
     e00:	cmp	x21, x19
     e04:	b.ls	f1c <grub_fdt_add_subnode+0x1c4>  // b.plast
     e08:	ldr	w1, [x19]
     e0c:	rev	w1, w1
     e10:	cmp	w1, #0x3
     e14:	b.eq	ed4 <grub_fdt_add_subnode+0x17c>  // b.none
     e18:	b.hi	eb4 <grub_fdt_add_subnode+0x15c>  // b.pmore
     e1c:	sub	w1, w1, #0x1
     e20:	mov	w0, #0xffffffff            	// #-1
     e24:	cmp	w1, #0x1
     e28:	b.hi	e9c <grub_fdt_add_subnode+0x144>  // b.pmore
     e2c:	add	w23, w2, #0x4
     e30:	and	w23, w23, #0xfffffffc
     e34:	add	w23, w23, #0x8
     e38:	ldr	w24, [x20, #36]
     e3c:	add	x25, x19, w23, uxtw
     e40:	sub	x2, x21, x19
     e44:	mov	x1, x19
     e48:	mov	x0, x25
     e4c:	bl	0 <grub_memmove>
     e50:	mov	x0, x19
     e54:	mov	w1, #0x1000000             	// #16777216
     e58:	str	w1, [x0], #4
     e5c:	stur	wzr, [x25, #-8]
     e60:	mov	x1, x22
     e64:	bl	0 <grub_strcpy>
     e68:	mov	w0, #0x2000000             	// #33554432
     e6c:	stur	w0, [x25, #-4]
     e70:	rev	w24, w24
     e74:	add	w23, w23, w24
     e78:	rev	w23, w23
     e7c:	str	w23, [x20, #36]
     e80:	ldr	w0, [x20, #8]
     e84:	rev	w1, w0
     e88:	sub	x0, x19, x20
     e8c:	sub	w0, w0, w1
     e90:	ldp	x23, x24, [sp, #48]
     e94:	ldr	x25, [sp, #64]
     e98:	b	ea4 <grub_fdt_add_subnode+0x14c>
     e9c:	ldp	x23, x24, [sp, #48]
     ea0:	ldr	x25, [sp, #64]
     ea4:	ldp	x19, x20, [sp, #16]
     ea8:	ldp	x21, x22, [sp, #32]
     eac:	ldp	x29, x30, [sp], #80
     eb0:	ret
     eb4:	cmp	w1, #0x4
     eb8:	b.ne	ec4 <grub_fdt_add_subnode+0x16c>  // b.any
     ebc:	add	x19, x19, #0x4
     ec0:	b	eec <grub_fdt_add_subnode+0x194>
     ec4:	mov	w0, #0xffffffff            	// #-1
     ec8:	ldp	x23, x24, [sp, #48]
     ecc:	ldr	x25, [sp, #64]
     ed0:	b	ea4 <grub_fdt_add_subnode+0x14c>
     ed4:	ldr	w0, [x19, #4]
     ed8:	rev	w0, w0
     edc:	add	w0, w0, #0x3
     ee0:	and	x0, x0, #0xfffffffc
     ee4:	add	x0, x0, #0xc
     ee8:	add	x19, x19, x0
     eec:	cmp	x23, x19
     ef0:	b.hi	e08 <grub_fdt_add_subnode+0xb0>  // b.pmore
     ef4:	mov	w0, #0xffffffff            	// #-1
     ef8:	ldp	x23, x24, [sp, #48]
     efc:	ldr	x25, [sp, #64]
     f00:	b	ea4 <grub_fdt_add_subnode+0x14c>
     f04:	mov	w0, #0xffffffff            	// #-1
     f08:	b	ea4 <grub_fdt_add_subnode+0x14c>
     f0c:	mov	w0, #0xffffffff            	// #-1
     f10:	b	ea4 <grub_fdt_add_subnode+0x14c>
     f14:	mov	w0, #0xffffffff            	// #-1
     f18:	b	ea4 <grub_fdt_add_subnode+0x14c>
     f1c:	mov	w0, #0xffffffff            	// #-1
     f20:	ldp	x23, x24, [sp, #48]
     f24:	ldr	x25, [sp, #64]
     f28:	b	ea4 <grub_fdt_add_subnode+0x14c>

0000000000000f2c <grub_fdt_get_prop>:
     f2c:	mov	x4, x0
     f30:	ldr	w0, [x0, #36]
     f34:	rev	w0, w0
     f38:	cmp	w1, w0
     f3c:	b.cs	fa4 <grub_fdt_get_prop+0x78>  // b.hs, b.nlast
     f40:	stp	x29, x30, [sp, #-32]!
     f44:	mov	x29, sp
     f48:	str	x19, [sp, #16]
     f4c:	mov	x19, x3
     f50:	tst	x1, #0x3
     f54:	b.ne	fac <grub_fdt_get_prop+0x80>  // b.any
     f58:	ldr	w0, [x4, #8]
     f5c:	rev	w0, w0
     f60:	add	x3, x4, w1, uxtw
     f64:	ldr	w3, [x3, w0, uxtw]
     f68:	rev	w3, w3
     f6c:	mov	x0, #0x0                   	// #0
     f70:	cmp	w3, #0x1
     f74:	b.ne	f98 <grub_fdt_get_prop+0x6c>  // b.any
     f78:	mov	x0, x4
     f7c:	bl	774 <find_prop>
     f80:	cbz	x0, f98 <grub_fdt_get_prop+0x6c>
     f84:	cbz	x19, f94 <grub_fdt_get_prop+0x68>
     f88:	ldr	w1, [x0, #4]
     f8c:	rev	w1, w1
     f90:	str	w1, [x19]
     f94:	add	x0, x0, #0xc
     f98:	ldr	x19, [sp, #16]
     f9c:	ldp	x29, x30, [sp], #32
     fa0:	ret
     fa4:	mov	x0, #0x0                   	// #0
     fa8:	ret
     fac:	mov	x0, #0x0                   	// #0
     fb0:	b	f98 <grub_fdt_get_prop+0x6c>

0000000000000fb4 <grub_fdt_set_prop>:
     fb4:	stp	x29, x30, [sp, #-80]!
     fb8:	mov	x29, sp
     fbc:	stp	x19, x20, [sp, #16]
     fc0:	mov	x20, x0
     fc4:	ldr	w0, [x0, #36]
     fc8:	rev	w0, w0
     fcc:	cmp	w1, w0
     fd0:	b.cs	11ec <grub_fdt_set_prop+0x238>  // b.hs, b.nlast
     fd4:	stp	x21, x22, [sp, #32]
     fd8:	stp	x23, x24, [sp, #48]
     fdc:	mov	x24, x2
     fe0:	mov	x22, x3
     fe4:	mov	w21, w4
     fe8:	tst	x1, #0x3
     fec:	b.ne	11f4 <grub_fdt_set_prop+0x240>  // b.any
     ff0:	ldr	w2, [x20, #8]
     ff4:	rev	w2, w2
     ff8:	mov	w0, w1
     ffc:	add	x23, x0, #0x4
    1000:	add	x0, x20, x0
    1004:	ldr	w0, [x0, w2, uxtw]
    1008:	rev	w0, w0
    100c:	cmp	w0, #0x1
    1010:	b.ne	1204 <grub_fdt_set_prop+0x250>  // b.any
    1014:	mov	x2, x24
    1018:	mov	x0, x20
    101c:	bl	774 <find_prop>
    1020:	mov	x19, x0
    1024:	cbz	x0, 1228 <grub_fdt_set_prop+0x274>
    1028:	ldr	w1, [x0, #4]
    102c:	rev	w1, w1
    1030:	add	w1, w1, #0x3
    1034:	and	w3, w1, #0xfffffffc
    1038:	lsr	w0, w1, #2
    103c:	cmp	wzr, w1, lsr #2
    1040:	b.eq	1064 <grub_fdt_set_prop+0xb0>  // b.none
    1044:	add	x1, x19, #0xc
    1048:	sub	w0, w0, #0x1
    104c:	add	x2, x19, #0x10
    1050:	add	x0, x2, x0, lsl #2
    1054:	mov	w2, #0x4000000             	// #67108864
    1058:	str	w2, [x1], #4
    105c:	cmp	x1, x0
    1060:	b.ne	1058 <grub_fdt_set_prop+0xa4>  // b.any
    1064:	cmp	w3, w21
    1068:	b.cs	11ac <grub_fdt_set_prop+0x1f8>  // b.hs, b.nlast
    106c:	stp	x25, x26, [sp, #64]
    1070:	ldr	w25, [x19, #8]
    1074:	rev	w25, w25
    1078:	mov	w0, #0x4000000             	// #67108864
    107c:	str	w0, [x19, #8]
    1080:	str	w0, [x19, #4]
    1084:	str	w0, [x19]
    1088:	add	w19, w21, #0x3
    108c:	and	w19, w19, #0xfffffffc
    1090:	add	w19, w19, #0xc
    1094:	mov	x0, x20
    1098:	bl	71c <get_free_space>
    109c:	mov	w1, w0
    10a0:	mov	w0, #0xffffffff            	// #-1
    10a4:	cmp	w19, w1
    10a8:	b.ls	10bc <grub_fdt_set_prop+0x108>  // b.plast
    10ac:	ldp	x21, x22, [sp, #32]
    10b0:	ldp	x23, x24, [sp, #48]
    10b4:	ldp	x25, x26, [sp, #64]
    10b8:	b	11e0 <grub_fdt_set_prop+0x22c>
    10bc:	mov	w1, w19
    10c0:	mov	x0, x20
    10c4:	bl	8a4 <rearrange_blocks>
    10c8:	tbz	w0, #31, 1124 <grub_fdt_set_prop+0x170>
    10cc:	mov	w0, #0xffffffff            	// #-1
    10d0:	ldp	x21, x22, [sp, #32]
    10d4:	ldp	x23, x24, [sp, #48]
    10d8:	ldp	x25, x26, [sp, #64]
    10dc:	b	11e0 <grub_fdt_set_prop+0x22c>
    10e0:	ldr	w1, [x20, #32]
    10e4:	rev	w25, w1
    10e8:	ldr	w0, [x20, #12]
    10ec:	rev	w0, w0
    10f0:	rev	w1, w1
    10f4:	add	x0, x0, x1
    10f8:	mov	x1, x24
    10fc:	add	x0, x20, x0
    1100:	bl	0 <grub_strcpy>
    1104:	ldr	w19, [x20, #32]
    1108:	rev	w19, w19
    110c:	mov	x0, x24
    1110:	bl	0 <grub_strlen>
    1114:	add	w19, w19, #0x1
    1118:	add	w19, w19, w0
    111c:	rev	w19, w19
    1120:	str	w19, [x20, #32]
    1124:	ldr	w0, [x20, #8]
    1128:	rev	w0, w0
    112c:	add	x0, x20, x0
    1130:	add	x23, x0, x23
    1134:	mov	x0, x23
    1138:	bl	0 <grub_strlen>
    113c:	add	x26, x0, #0x4
    1140:	and	x26, x26, #0xfffffffffffffffc
    1144:	add	x19, x23, x26
    1148:	add	w0, w21, #0x3
    114c:	and	w24, w0, #0xfffffffc
    1150:	ldr	w1, [x20, #8]
    1154:	ldr	w2, [x20, #36]
    1158:	rev	w1, w1
    115c:	rev	w2, w2
    1160:	add	x1, x1, x2
    1164:	sub	x2, x20, x19
    1168:	and	x0, x0, #0xfffffffc
    116c:	add	x0, x0, #0xc
    1170:	add	x2, x1, x2
    1174:	mov	x1, x19
    1178:	add	x0, x19, x0
    117c:	bl	0 <grub_memmove>
    1180:	ldr	w0, [x20, #36]
    1184:	rev	w1, w0
    1188:	add	w0, w24, #0xc
    118c:	add	w0, w0, w1
    1190:	rev	w0, w0
    1194:	str	w0, [x20, #36]
    1198:	mov	w0, #0x3000000             	// #50331648
    119c:	str	w0, [x23, x26]
    11a0:	rev	w25, w25
    11a4:	str	w25, [x19, #8]
    11a8:	ldp	x25, x26, [sp, #64]
    11ac:	rev	w0, w21
    11b0:	str	w0, [x19, #4]
    11b4:	add	w0, w21, #0x3
    11b8:	and	x0, x0, #0xfffffffc
    11bc:	add	x0, x19, x0
    11c0:	str	wzr, [x0, #8]
    11c4:	mov	w2, w21
    11c8:	mov	x1, x22
    11cc:	add	x0, x19, #0xc
    11d0:	bl	0 <grub_memmove>
    11d4:	mov	w0, #0x0                   	// #0
    11d8:	ldp	x21, x22, [sp, #32]
    11dc:	ldp	x23, x24, [sp, #48]
    11e0:	ldp	x19, x20, [sp, #16]
    11e4:	ldp	x29, x30, [sp], #80
    11e8:	ret
    11ec:	mov	w0, #0xffffffff            	// #-1
    11f0:	b	11e0 <grub_fdt_set_prop+0x22c>
    11f4:	mov	w0, #0xffffffff            	// #-1
    11f8:	ldp	x21, x22, [sp, #32]
    11fc:	ldp	x23, x24, [sp, #48]
    1200:	b	11e0 <grub_fdt_set_prop+0x22c>
    1204:	mov	w0, #0xffffffff            	// #-1
    1208:	ldp	x21, x22, [sp, #32]
    120c:	ldp	x23, x24, [sp, #48]
    1210:	b	11e0 <grub_fdt_set_prop+0x22c>
    1214:	mov	w0, #0xffffffff            	// #-1
    1218:	ldp	x21, x22, [sp, #32]
    121c:	ldp	x23, x24, [sp, #48]
    1220:	ldp	x25, x26, [sp, #64]
    1224:	b	11e0 <grub_fdt_set_prop+0x22c>
    1228:	stp	x25, x26, [sp, #64]
    122c:	add	w19, w21, #0x3
    1230:	and	w19, w19, #0xfffffffc
    1234:	add	w19, w19, #0xc
    1238:	mov	x0, x24
    123c:	bl	0 <grub_strlen>
    1240:	add	x25, x0, #0x1
    1244:	add	w25, w19, w25
    1248:	mov	x0, x20
    124c:	bl	71c <get_free_space>
    1250:	cmp	w0, w25
    1254:	b.cc	1214 <grub_fdt_set_prop+0x260>  // b.lo, b.ul, b.last
    1258:	mov	w1, w19
    125c:	mov	x0, x20
    1260:	bl	8a4 <rearrange_blocks>
    1264:	tbz	w0, #31, 10e0 <grub_fdt_set_prop+0x12c>
    1268:	mov	w0, #0xffffffff            	// #-1
    126c:	ldp	x21, x22, [sp, #32]
    1270:	ldp	x23, x24, [sp, #48]
    1274:	ldp	x25, x26, [sp, #64]
    1278:	b	11e0 <grub_fdt_set_prop+0x22c>

000000000000127c <grub_fdt_create_empty_tree>:
    127c:	cmp	w1, #0x47
    1280:	b.ls	130c <grub_fdt_create_empty_tree+0x90>  // b.plast
    1284:	stp	x29, x30, [sp, #-32]!
    1288:	mov	x29, sp
    128c:	stp	x19, x20, [sp, #16]
    1290:	mov	x19, x0
    1294:	mov	w20, w1
    1298:	mov	w2, w1
    129c:	mov	w1, #0x0                   	// #0
    12a0:	bl	0 <grub_memset>
    12a4:	mov	w0, #0x9000000             	// #150994944
    12a8:	str	w0, [x19, #68]
    12ac:	mov	w0, #0x2000000             	// #33554432
    12b0:	str	w0, [x19, #64]
    12b4:	mov	w0, #0x1000000             	// #16777216
    12b8:	str	w0, [x19, #56]
    12bc:	mov	w0, #0x28000000            	// #671088640
    12c0:	str	w0, [x19, #16]
    12c4:	mov	w0, #0x48000000            	// #1207959552
    12c8:	str	w0, [x19, #12]
    12cc:	mov	w0, #0x38000000            	// #939524096
    12d0:	str	w0, [x19, #8]
    12d4:	mov	w0, #0x11000000            	// #285212672
    12d8:	str	w0, [x19, #20]
    12dc:	str	w0, [x19, #24]
    12e0:	mov	w0, #0x10000000            	// #268435456
    12e4:	str	w0, [x19, #36]
    12e8:	rev	w20, w20
    12ec:	str	w20, [x19, #4]
    12f0:	mov	w0, #0xdd0                 	// #3536
    12f4:	movk	w0, #0xedfe, lsl #16
    12f8:	str	w0, [x19]
    12fc:	mov	w0, #0x0                   	// #0
    1300:	ldp	x19, x20, [sp, #16]
    1304:	ldp	x29, x30, [sp], #32
    1308:	ret
    130c:	mov	w0, #0xffffffff            	// #-1
    1310:	ret
