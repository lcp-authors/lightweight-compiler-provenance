In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libz.a_clang_-O2:

adler32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <adler32_z>:
   0:	ubfx	x8, x0, #16, #16
   4:	cmp	x2, #0x1
   8:	and	x9, x0, #0xffff
   c:	b.ne	50 <adler32_z+0x50>  // b.any
  10:	ldrb	w10, [x1]
  14:	mov	x11, #0xffffffffffff000f    	// #-65521
  18:	mov	w12, #0xfff0                	// #65520
  1c:	mov	x13, #0xffffffffffff0000    	// #-65536
  20:	add	x9, x9, x10
  24:	add	x10, x9, x11
  28:	cmp	x9, x12
  2c:	csel	x9, x10, x9, hi  // hi = pmore
  30:	add	x8, x9, x8
  34:	movk	x13, #0xf, lsl #16
  38:	lsl	x10, x8, #16
  3c:	add	x11, x10, x13
  40:	cmp	x8, x12
  44:	csel	x8, x11, x10, hi  // hi = pmore
  48:	orr	x0, x8, x9
  4c:	ret
  50:	cbz	x1, b0 <adler32_z+0xb0>
  54:	cmp	x2, #0x10
  58:	b.cs	b8 <adler32_z+0xb8>  // b.hs, b.nlast
  5c:	cbz	x2, 74 <adler32_z+0x74>
  60:	ldrb	w10, [x1], #1
  64:	subs	x2, x2, #0x1
  68:	add	x9, x9, x10
  6c:	add	x8, x9, x8
  70:	b.ne	60 <adler32_z+0x60>  // b.any
  74:	mov	x12, #0xc5cd                	// #50637
  78:	movk	x12, #0xd2f, lsl #16
  7c:	movk	x12, #0xe1, lsl #32
  80:	mov	x10, #0xffffffffffff000f    	// #-65521
  84:	mov	w11, #0xfff0                	// #65520
  88:	movk	x12, #0xf, lsl #48
  8c:	add	x10, x9, x10
  90:	cmp	x9, x11
  94:	umulh	x11, x8, x12
  98:	csel	x9, x10, x9, hi  // hi = pmore
  9c:	sub	x10, x8, x11
  a0:	add	x10, x11, x10, lsr #1
  a4:	lsr	x10, x10, #15
  a8:	mov	w11, #0xfff1                	// #65521
  ac:	b	334 <adler32_z+0x334>
  b0:	mov	w0, #0x1                   	// #1
  b4:	ret
  b8:	lsr	x10, x2, #4
  bc:	cmp	x10, #0x15b
  c0:	b.cc	1fc <adler32_z+0x1fc>  // b.lo, b.ul, b.last
  c4:	mov	x12, #0xc5cd                	// #50637
  c8:	movk	x12, #0xd2f, lsl #16
  cc:	movk	x12, #0xe1, lsl #32
  d0:	mov	x10, #0xffffffffffffea50    	// #-5552
  d4:	mov	w11, #0x15b0                	// #5552
  d8:	movk	x12, #0xf, lsl #48
  dc:	mov	w13, #0xfff1                	// #65521
  e0:	add	x2, x2, x10
  e4:	mov	w14, #0xfffffea5            	// #-347
  e8:	mov	x15, x1
  ec:	ldrb	w16, [x15]
  f0:	ldrb	w17, [x15, #1]
  f4:	adds	w14, w14, #0x1
  f8:	add	x9, x9, x16
  fc:	ldrb	w16, [x15, #2]
 100:	add	x8, x9, x8
 104:	add	x9, x9, x17
 108:	ldrb	w17, [x15, #3]
 10c:	add	x8, x8, x9
 110:	add	x9, x9, x16
 114:	ldrb	w16, [x15, #4]
 118:	add	x8, x8, x9
 11c:	add	x9, x9, x17
 120:	ldrb	w17, [x15, #5]
 124:	add	x8, x8, x9
 128:	add	x9, x9, x16
 12c:	ldrb	w16, [x15, #6]
 130:	add	x8, x8, x9
 134:	add	x9, x9, x17
 138:	ldrb	w17, [x15, #7]
 13c:	add	x8, x8, x9
 140:	add	x9, x9, x16
 144:	ldrb	w16, [x15, #8]
 148:	add	x8, x8, x9
 14c:	add	x9, x9, x17
 150:	ldrb	w17, [x15, #9]
 154:	add	x8, x8, x9
 158:	add	x9, x9, x16
 15c:	ldrb	w16, [x15, #10]
 160:	add	x8, x8, x9
 164:	add	x9, x9, x17
 168:	ldrb	w17, [x15, #11]
 16c:	add	x8, x8, x9
 170:	add	x9, x9, x16
 174:	ldrb	w16, [x15, #12]
 178:	add	x8, x8, x9
 17c:	add	x9, x9, x17
 180:	ldrb	w17, [x15, #13]
 184:	add	x8, x8, x9
 188:	add	x9, x9, x16
 18c:	ldrb	w16, [x15, #14]
 190:	add	x8, x8, x9
 194:	add	x9, x9, x17
 198:	ldrb	w17, [x15, #15]
 19c:	add	x8, x8, x9
 1a0:	add	x9, x9, x16
 1a4:	add	x8, x8, x9
 1a8:	add	x9, x9, x17
 1ac:	add	x8, x8, x9
 1b0:	add	x15, x15, #0x10
 1b4:	b.cc	ec <adler32_z+0xec>  // b.lo, b.ul, b.last
 1b8:	umulh	x14, x9, x12
 1bc:	umulh	x15, x8, x12
 1c0:	sub	x17, x9, x14
 1c4:	sub	x18, x8, x15
 1c8:	add	x14, x14, x17, lsr #1
 1cc:	add	x15, x15, x18, lsr #1
 1d0:	lsr	x16, x2, #4
 1d4:	lsr	x14, x14, #15
 1d8:	lsr	x15, x15, #15
 1dc:	add	x1, x1, x11
 1e0:	cmp	x16, #0x15a
 1e4:	msub	x9, x14, x13, x9
 1e8:	msub	x8, x15, x13, x8
 1ec:	b.hi	e0 <adler32_z+0xe0>  // b.pmore
 1f0:	cbz	x2, 338 <adler32_z+0x338>
 1f4:	cmp	x2, #0x10
 1f8:	b.cc	2e8 <adler32_z+0x2e8>  // b.lo, b.ul, b.last
 1fc:	sub	x11, x2, #0x10
 200:	and	x12, x11, #0xfffffffffffffff0
 204:	add	x10, x12, #0x10
 208:	mov	x13, x1
 20c:	ldrb	w14, [x13]
 210:	ldrb	w15, [x13, #1]
 214:	sub	x2, x2, #0x10
 218:	cmp	x2, #0xf
 21c:	add	x9, x9, x14
 220:	ldrb	w14, [x13, #2]
 224:	add	x8, x9, x8
 228:	add	x9, x9, x15
 22c:	ldrb	w15, [x13, #3]
 230:	add	x8, x8, x9
 234:	add	x9, x9, x14
 238:	ldrb	w14, [x13, #4]
 23c:	add	x8, x8, x9
 240:	add	x9, x9, x15
 244:	ldrb	w15, [x13, #5]
 248:	add	x8, x8, x9
 24c:	add	x9, x9, x14
 250:	ldrb	w14, [x13, #6]
 254:	add	x8, x8, x9
 258:	add	x9, x9, x15
 25c:	ldrb	w15, [x13, #7]
 260:	add	x8, x8, x9
 264:	add	x9, x9, x14
 268:	ldrb	w14, [x13, #8]
 26c:	add	x8, x8, x9
 270:	add	x9, x9, x15
 274:	ldrb	w15, [x13, #9]
 278:	add	x8, x8, x9
 27c:	add	x9, x9, x14
 280:	ldrb	w14, [x13, #10]
 284:	add	x8, x8, x9
 288:	add	x9, x9, x15
 28c:	ldrb	w15, [x13, #11]
 290:	add	x8, x8, x9
 294:	add	x9, x9, x14
 298:	ldrb	w14, [x13, #12]
 29c:	add	x8, x8, x9
 2a0:	add	x9, x9, x15
 2a4:	ldrb	w15, [x13, #13]
 2a8:	add	x8, x8, x9
 2ac:	add	x9, x9, x14
 2b0:	ldrb	w14, [x13, #14]
 2b4:	add	x8, x8, x9
 2b8:	add	x9, x9, x15
 2bc:	add	x8, x8, x9
 2c0:	add	x9, x9, x14
 2c4:	ldrb	w14, [x13, #15]
 2c8:	add	x8, x8, x9
 2cc:	add	x13, x13, #0x10
 2d0:	add	x9, x9, x14
 2d4:	add	x8, x8, x9
 2d8:	b.hi	20c <adler32_z+0x20c>  // b.pmore
 2dc:	subs	x2, x11, x12
 2e0:	b.eq	2fc <adler32_z+0x2fc>  // b.none
 2e4:	add	x1, x1, x10
 2e8:	ldrb	w10, [x1], #1
 2ec:	subs	x2, x2, #0x1
 2f0:	add	x9, x9, x10
 2f4:	add	x8, x9, x8
 2f8:	b.ne	2e8 <adler32_z+0x2e8>  // b.any
 2fc:	mov	x10, #0xc5cd                	// #50637
 300:	movk	x10, #0xd2f, lsl #16
 304:	movk	x10, #0xe1, lsl #32
 308:	movk	x10, #0xf, lsl #48
 30c:	umulh	x12, x9, x10
 310:	umulh	x10, x8, x10
 314:	sub	x13, x9, x12
 318:	sub	x14, x8, x10
 31c:	add	x12, x12, x13, lsr #1
 320:	mov	w11, #0xfff1                	// #65521
 324:	add	x10, x10, x14, lsr #1
 328:	lsr	x12, x12, #15
 32c:	lsr	x10, x10, #15
 330:	msub	x9, x12, x11, x9
 334:	msub	x8, x10, x11, x8
 338:	orr	x0, x9, x8, lsl #16
 33c:	ret

0000000000000340 <adler32>:
 340:	mov	w2, w2
 344:	b	0 <adler32_z>

0000000000000348 <adler32_combine>:
 348:	tbnz	x2, #63, 404 <adler32_combine+0xbc>
 34c:	mov	x8, #0xc5cd                	// #50637
 350:	movk	x8, #0xd2f, lsl #16
 354:	movk	x8, #0xe1, lsl #32
 358:	movk	x8, #0xf, lsl #48
 35c:	and	x10, x0, #0xffff
 360:	ubfx	x12, x0, #16, #16
 364:	lsr	x13, x1, #16
 368:	umulh	x8, x2, x8
 36c:	mov	w11, #0xfff0                	// #65520
 370:	add	x14, x10, w1, uxth
 374:	add	x12, x12, w13, uxth
 378:	sub	x13, x2, x8
 37c:	add	x8, x8, x13, lsr #1
 380:	add	x13, x14, x11
 384:	mov	w9, #0xfff1                	// #65521
 388:	sub	x14, x14, #0x1
 38c:	cmp	x13, x11
 390:	lsr	x8, x8, #15
 394:	csel	x13, x14, x13, hi  // hi = pmore
 398:	mov	w14, #0x8071                	// #32881
 39c:	msub	x8, x8, x9, x2
 3a0:	movk	w14, #0x8007, lsl #16
 3a4:	mul	x10, x8, x10
 3a8:	mul	x14, x10, x14
 3ac:	mov	x15, #0xffffffffffff000f    	// #-65521
 3b0:	lsr	x14, x14, #47
 3b4:	sub	x8, x12, x8
 3b8:	add	x12, x13, x15
 3bc:	cmp	x13, x11
 3c0:	msub	w10, w14, w9, w10
 3c4:	csel	x12, x12, x13, hi  // hi = pmore
 3c8:	mov	w13, #0xffe1                	// #65505
 3cc:	add	x8, x8, x10
 3d0:	movk	w13, #0x1, lsl #16
 3d4:	add	x9, x8, x9
 3d8:	add	x8, x8, x15
 3dc:	cmp	x9, x13
 3e0:	mov	x14, #0xffffffffffff0000    	// #-65536
 3e4:	csel	x8, x8, x9, hi  // hi = pmore
 3e8:	movk	x14, #0xf, lsl #16
 3ec:	lsl	x9, x8, #16
 3f0:	add	x10, x9, x14
 3f4:	cmp	x8, x11
 3f8:	csel	x8, x10, x9, hi  // hi = pmore
 3fc:	orr	x0, x8, x12
 400:	ret
 404:	mov	w0, #0xffffffff            	// #-1
 408:	ret

000000000000040c <adler32_combine64>:
 40c:	tbnz	x2, #63, 4c8 <adler32_combine64+0xbc>
 410:	mov	x8, #0xc5cd                	// #50637
 414:	movk	x8, #0xd2f, lsl #16
 418:	movk	x8, #0xe1, lsl #32
 41c:	movk	x8, #0xf, lsl #48
 420:	and	x10, x0, #0xffff
 424:	ubfx	x12, x0, #16, #16
 428:	lsr	x13, x1, #16
 42c:	umulh	x8, x2, x8
 430:	mov	w11, #0xfff0                	// #65520
 434:	add	x14, x10, w1, uxth
 438:	add	x12, x12, w13, uxth
 43c:	sub	x13, x2, x8
 440:	add	x8, x8, x13, lsr #1
 444:	add	x13, x14, x11
 448:	mov	w9, #0xfff1                	// #65521
 44c:	sub	x14, x14, #0x1
 450:	cmp	x13, x11
 454:	lsr	x8, x8, #15
 458:	csel	x13, x14, x13, hi  // hi = pmore
 45c:	mov	w14, #0x8071                	// #32881
 460:	msub	x8, x8, x9, x2
 464:	movk	w14, #0x8007, lsl #16
 468:	mul	x10, x8, x10
 46c:	mul	x14, x10, x14
 470:	mov	x15, #0xffffffffffff000f    	// #-65521
 474:	lsr	x14, x14, #47
 478:	sub	x8, x12, x8
 47c:	add	x12, x13, x15
 480:	cmp	x13, x11
 484:	msub	w10, w14, w9, w10
 488:	csel	x12, x12, x13, hi  // hi = pmore
 48c:	mov	w13, #0xffe1                	// #65505
 490:	add	x8, x8, x10
 494:	movk	w13, #0x1, lsl #16
 498:	add	x9, x8, x9
 49c:	add	x8, x8, x15
 4a0:	cmp	x9, x13
 4a4:	mov	x14, #0xffffffffffff0000    	// #-65536
 4a8:	csel	x8, x8, x9, hi  // hi = pmore
 4ac:	movk	x14, #0xf, lsl #16
 4b0:	lsl	x9, x8, #16
 4b4:	add	x10, x9, x14
 4b8:	cmp	x8, x11
 4bc:	csel	x8, x10, x9, hi  // hi = pmore
 4c0:	orr	x0, x8, x12
 4c4:	ret
 4c8:	mov	w0, #0xffffffff            	// #-1
 4cc:	ret

crc32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <get_crc_table>:
   0:	adrp	x0, 0 <get_crc_table>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <crc32_z>:
   c:	cbz	x1, 7c <crc32_z+0x70>
  10:	adrp	x8, 0 <get_crc_table>
  14:	mvn	w9, w0
  18:	add	x8, x8, #0x0
  1c:	cbz	x2, 44 <crc32_z+0x38>
  20:	and	x10, x1, #0x3
  24:	cbz	x10, 44 <crc32_z+0x38>
  28:	ldrb	w10, [x1], #1
  2c:	and	w11, w9, #0xff
  30:	subs	x2, x2, #0x1
  34:	eor	w10, w11, w10
  38:	ldr	w10, [x8, w10, uxtw #2]
  3c:	eor	w9, w10, w9, lsr #8
  40:	b.ne	20 <crc32_z+0x14>  // b.any
  44:	subs	x10, x2, #0x20
  48:	b.cs	84 <crc32_z+0x78>  // b.hs, b.nlast
  4c:	subs	x10, x2, #0x4
  50:	b.cs	24c <crc32_z+0x240>  // b.hs, b.nlast
  54:	cbz	x2, 74 <crc32_z+0x68>
  58:	ldrb	w10, [x1], #1
  5c:	and	w11, w9, #0xff
  60:	subs	x2, x2, #0x1
  64:	eor	w10, w11, w10
  68:	ldr	w10, [x8, w10, uxtw #2]
  6c:	eor	w9, w10, w9, lsr #8
  70:	b.ne	58 <crc32_z+0x4c>  // b.any
  74:	mvn	w0, w9
  78:	ret
  7c:	mov	x0, xzr
  80:	ret
  84:	and	x12, x10, #0xffffffffffffffe0
  88:	add	x11, x12, x1
  8c:	add	x11, x11, #0x20
  90:	ldp	w16, w17, [x1]
  94:	add	x13, x8, #0xc00
  98:	add	x14, x8, #0x800
  9c:	add	x15, x8, #0x400
  a0:	eor	w9, w16, w9
  a4:	and	w16, w9, #0xff
  a8:	ubfx	w18, w9, #8, #8
  ac:	ubfx	w0, w9, #16, #8
  b0:	ldr	w16, [x13, w16, uxtw #2]
  b4:	ldr	w18, [x14, w18, uxtw #2]
  b8:	lsr	w9, w9, #24
  bc:	ldr	w0, [x15, w0, uxtw #2]
  c0:	ldr	w9, [x8, w9, uxtw #2]
  c4:	eor	w16, w18, w16
  c8:	sub	x2, x2, #0x20
  cc:	eor	w16, w16, w0
  d0:	eor	w9, w16, w9
  d4:	eor	w9, w9, w17
  d8:	and	w16, w9, #0xff
  dc:	ubfx	w17, w9, #8, #8
  e0:	ldr	w16, [x13, w16, uxtw #2]
  e4:	ldr	w17, [x14, w17, uxtw #2]
  e8:	ubfx	w18, w9, #16, #8
  ec:	lsr	w9, w9, #24
  f0:	ldr	w18, [x15, w18, uxtw #2]
  f4:	ldr	w9, [x8, w9, uxtw #2]
  f8:	eor	w16, w17, w16
  fc:	ldp	w17, w0, [x1, #8]
 100:	eor	w16, w16, w18
 104:	eor	w9, w16, w9
 108:	cmp	x2, #0x1f
 10c:	eor	w9, w9, w17
 110:	and	w16, w9, #0xff
 114:	ubfx	w17, w9, #8, #8
 118:	ubfx	w18, w9, #16, #8
 11c:	ldr	w16, [x13, w16, uxtw #2]
 120:	ldr	w17, [x14, w17, uxtw #2]
 124:	lsr	w9, w9, #24
 128:	ldr	w18, [x15, w18, uxtw #2]
 12c:	ldr	w9, [x8, w9, uxtw #2]
 130:	eor	w16, w17, w16
 134:	eor	w16, w16, w18
 138:	eor	w9, w16, w9
 13c:	eor	w9, w9, w0
 140:	and	w16, w9, #0xff
 144:	ubfx	w17, w9, #8, #8
 148:	ldr	w16, [x13, w16, uxtw #2]
 14c:	ldr	w17, [x14, w17, uxtw #2]
 150:	ubfx	w18, w9, #16, #8
 154:	lsr	w9, w9, #24
 158:	ldr	w18, [x15, w18, uxtw #2]
 15c:	ldr	w9, [x8, w9, uxtw #2]
 160:	eor	w16, w17, w16
 164:	ldp	w17, w0, [x1, #16]
 168:	eor	w16, w16, w18
 16c:	eor	w9, w16, w9
 170:	eor	w9, w9, w17
 174:	and	w16, w9, #0xff
 178:	ubfx	w17, w9, #8, #8
 17c:	ubfx	w18, w9, #16, #8
 180:	ldr	w16, [x13, w16, uxtw #2]
 184:	ldr	w17, [x14, w17, uxtw #2]
 188:	lsr	w9, w9, #24
 18c:	ldr	w18, [x15, w18, uxtw #2]
 190:	ldr	w9, [x8, w9, uxtw #2]
 194:	eor	w16, w17, w16
 198:	eor	w16, w16, w18
 19c:	eor	w9, w16, w9
 1a0:	eor	w9, w9, w0
 1a4:	and	w16, w9, #0xff
 1a8:	ubfx	w17, w9, #8, #8
 1ac:	ldr	w16, [x13, w16, uxtw #2]
 1b0:	ldr	w17, [x14, w17, uxtw #2]
 1b4:	ubfx	w18, w9, #16, #8
 1b8:	lsr	w9, w9, #24
 1bc:	ldr	w18, [x15, w18, uxtw #2]
 1c0:	ldr	w9, [x8, w9, uxtw #2]
 1c4:	eor	w16, w17, w16
 1c8:	ldp	w17, w0, [x1, #24]
 1cc:	eor	w16, w16, w18
 1d0:	eor	w9, w16, w9
 1d4:	add	x1, x1, #0x20
 1d8:	eor	w9, w9, w17
 1dc:	and	w16, w9, #0xff
 1e0:	ubfx	w17, w9, #8, #8
 1e4:	ubfx	w18, w9, #16, #8
 1e8:	ldr	w16, [x13, w16, uxtw #2]
 1ec:	ldr	w17, [x14, w17, uxtw #2]
 1f0:	ldr	w18, [x15, w18, uxtw #2]
 1f4:	lsr	w9, w9, #24
 1f8:	ldr	w9, [x8, w9, uxtw #2]
 1fc:	eor	w16, w17, w16
 200:	eor	w16, w16, w18
 204:	eor	w9, w16, w9
 208:	eor	w9, w9, w0
 20c:	and	w16, w9, #0xff
 210:	ubfx	w17, w9, #8, #8
 214:	ldr	w13, [x13, w16, uxtw #2]
 218:	ubfx	w16, w9, #16, #8
 21c:	ldr	w14, [x14, w17, uxtw #2]
 220:	lsr	w9, w9, #24
 224:	ldr	w15, [x15, w16, uxtw #2]
 228:	ldr	w9, [x8, w9, uxtw #2]
 22c:	eor	w13, w14, w13
 230:	eor	w13, w13, w15
 234:	eor	w9, w13, w9
 238:	b.hi	90 <crc32_z+0x84>  // b.pmore
 23c:	sub	x2, x10, x12
 240:	mov	x1, x11
 244:	subs	x10, x2, #0x4
 248:	b.cc	54 <crc32_z+0x48>  // b.lo, b.ul, b.last
 24c:	lsr	x11, x10, #2
 250:	mov	x12, x1
 254:	ldr	w13, [x12], #4
 258:	sub	x2, x2, #0x4
 25c:	cmp	x2, #0x3
 260:	eor	w9, w13, w9
 264:	and	w13, w9, #0xff
 268:	ubfx	w14, w9, #8, #8
 26c:	add	x13, x8, w13, uxtw #2
 270:	add	x14, x8, w14, uxtw #2
 274:	ldr	w13, [x13, #3072]
 278:	ldr	w14, [x14, #2048]
 27c:	eor	w13, w14, w13
 280:	ubfx	w14, w9, #16, #8
 284:	add	x14, x8, w14, uxtw #2
 288:	ldr	w14, [x14, #1024]
 28c:	lsr	w9, w9, #24
 290:	ldr	w9, [x8, w9, uxtw #2]
 294:	eor	w13, w13, w14
 298:	eor	w9, w13, w9
 29c:	b.hi	254 <crc32_z+0x248>  // b.pmore
 2a0:	add	x11, x1, x11, lsl #2
 2a4:	add	x1, x11, #0x4
 2a8:	and	x2, x10, #0x3
 2ac:	cbnz	x2, 58 <crc32_z+0x4c>
 2b0:	b	74 <crc32_z+0x68>

00000000000002b4 <crc32>:
 2b4:	mov	w2, w2
 2b8:	b	c <crc32_z>

00000000000002bc <crc32_combine>:
 2bc:	b	2c0 <crc32_combine_>

00000000000002c0 <crc32_combine_>:
 2c0:	str	x29, [sp, #-16]!
 2c4:	sub	sp, sp, #0x200
 2c8:	cmp	x2, #0x1
 2cc:	b.lt	54c <crc32_combine_+0x28c>  // b.tstop
 2d0:	adrp	x9, 0 <get_crc_table>
 2d4:	adrp	x10, 0 <get_crc_table>
 2d8:	ldr	q0, [x9]
 2dc:	ldr	q1, [x10]
 2e0:	adrp	x11, 0 <get_crc_table>
 2e4:	adrp	x9, 0 <get_crc_table>
 2e8:	ldr	q2, [x11]
 2ec:	adrp	x11, 0 <get_crc_table>
 2f0:	ldr	q3, [x9]
 2f4:	adrp	x9, 0 <get_crc_table>
 2f8:	ldr	q5, [x11]
 2fc:	adrp	x11, 0 <get_crc_table>
 300:	ldr	q6, [x9]
 304:	adrp	x9, 0 <get_crc_table>
 308:	adrp	x10, 0 <get_crc_table>
 30c:	ldr	q16, [x11]
 310:	stp	q0, q1, [sp]
 314:	ldr	q0, [x9]
 318:	ldr	q4, [x10]
 31c:	adrp	x10, 0 <get_crc_table>
 320:	ldr	q7, [x10]
 324:	adrp	x10, 0 <get_crc_table>
 328:	adrp	x11, 0 <get_crc_table>
 32c:	adrp	x9, 0 <get_crc_table>
 330:	ldr	q1, [x10]
 334:	adrp	x10, 0 <get_crc_table>
 338:	stp	q2, q3, [sp, #32]
 33c:	ldr	q2, [x11]
 340:	ldr	q3, [x9]
 344:	stp	q16, q0, [sp, #128]
 348:	ldr	q0, [x10]
 34c:	adrp	x11, 0 <get_crc_table>
 350:	adrp	x9, 0 <get_crc_table>
 354:	stp	q1, q2, [sp, #160]
 358:	ldr	q1, [x11]
 35c:	stp	q3, q0, [sp, #192]
 360:	ldr	q0, [x9]
 364:	mov	w11, #0x8320                	// #33568
 368:	mov	x8, xzr
 36c:	movk	w11, #0xedb8, lsl #16
 370:	add	x9, sp, #0x100
 374:	mov	x10, sp
 378:	stp	q4, q5, [sp, #64]
 37c:	stp	q6, q7, [sp, #96]
 380:	stp	q1, q0, [sp, #224]
 384:	mov	x12, xzr
 388:	cbz	x11, 3b0 <crc32_combine_+0xf0>
 38c:	mov	x13, sp
 390:	b	3a0 <crc32_combine_+0xe0>
 394:	lsr	x11, x11, #1
 398:	add	x13, x13, #0x8
 39c:	cbz	x11, 3b0 <crc32_combine_+0xf0>
 3a0:	tbz	w11, #0, 394 <crc32_combine_+0xd4>
 3a4:	ldr	x14, [x13]
 3a8:	eor	x12, x14, x12
 3ac:	b	394 <crc32_combine_+0xd4>
 3b0:	str	x12, [x9, x8, lsl #3]
 3b4:	add	x8, x8, #0x1
 3b8:	cmp	x8, #0x20
 3bc:	b.eq	3d0 <crc32_combine_+0x110>  // b.none
 3c0:	ldr	x11, [x10, x8, lsl #3]
 3c4:	mov	x12, xzr
 3c8:	cbnz	x11, 38c <crc32_combine_+0xcc>
 3cc:	b	3b0 <crc32_combine_+0xf0>
 3d0:	mov	x8, xzr
 3d4:	add	x9, sp, #0x100
 3d8:	mov	x10, sp
 3dc:	b	3f4 <crc32_combine_+0x134>
 3e0:	mov	x11, xzr
 3e4:	str	x11, [x10, x8, lsl #3]
 3e8:	add	x8, x8, #0x1
 3ec:	cmp	x8, #0x20
 3f0:	b.eq	424 <crc32_combine_+0x164>  // b.none
 3f4:	ldr	x12, [x9, x8, lsl #3]
 3f8:	cbz	x12, 3e0 <crc32_combine_+0x120>
 3fc:	mov	x11, xzr
 400:	add	x13, sp, #0x100
 404:	b	414 <crc32_combine_+0x154>
 408:	lsr	x12, x12, #1
 40c:	add	x13, x13, #0x8
 410:	cbz	x12, 3e4 <crc32_combine_+0x124>
 414:	tbz	w12, #0, 408 <crc32_combine_+0x148>
 418:	ldr	x14, [x13]
 41c:	eor	x11, x14, x11
 420:	b	408 <crc32_combine_+0x148>
 424:	mov	x8, sp
 428:	add	x9, sp, #0x100
 42c:	b	43c <crc32_combine_+0x17c>
 430:	mov	x0, x10
 434:	asr	x2, x2, #2
 438:	cbz	x2, 548 <crc32_combine_+0x288>
 43c:	mov	x10, xzr
 440:	b	458 <crc32_combine_+0x198>
 444:	mov	x11, xzr
 448:	str	x11, [x9, x10, lsl #3]
 44c:	add	x10, x10, #0x1
 450:	cmp	x10, #0x20
 454:	b.eq	488 <crc32_combine_+0x1c8>  // b.none
 458:	ldr	x12, [x8, x10, lsl #3]
 45c:	cbz	x12, 444 <crc32_combine_+0x184>
 460:	mov	x11, xzr
 464:	mov	x13, sp
 468:	b	478 <crc32_combine_+0x1b8>
 46c:	lsr	x12, x12, #1
 470:	add	x13, x13, #0x8
 474:	cbz	x12, 448 <crc32_combine_+0x188>
 478:	tbz	w12, #0, 46c <crc32_combine_+0x1ac>
 47c:	ldr	x14, [x13]
 480:	eor	x11, x14, x11
 484:	b	46c <crc32_combine_+0x1ac>
 488:	tbnz	w2, #0, 494 <crc32_combine_+0x1d4>
 48c:	mov	x10, x0
 490:	b	49c <crc32_combine_+0x1dc>
 494:	mov	x10, xzr
 498:	cbnz	x0, 520 <crc32_combine_+0x260>
 49c:	cmp	x2, #0x2
 4a0:	b.cc	544 <crc32_combine_+0x284>  // b.lo, b.ul, b.last
 4a4:	mov	x11, xzr
 4a8:	b	4c0 <crc32_combine_+0x200>
 4ac:	mov	x12, xzr
 4b0:	str	x12, [x8, x11, lsl #3]
 4b4:	add	x11, x11, #0x1
 4b8:	cmp	x11, #0x20
 4bc:	b.eq	4f0 <crc32_combine_+0x230>  // b.none
 4c0:	ldr	x13, [x9, x11, lsl #3]
 4c4:	cbz	x13, 4ac <crc32_combine_+0x1ec>
 4c8:	mov	x12, xzr
 4cc:	add	x14, sp, #0x100
 4d0:	b	4e0 <crc32_combine_+0x220>
 4d4:	lsr	x13, x13, #1
 4d8:	add	x14, x14, #0x8
 4dc:	cbz	x13, 4b0 <crc32_combine_+0x1f0>
 4e0:	tbz	w13, #0, 4d4 <crc32_combine_+0x214>
 4e4:	ldr	x15, [x14]
 4e8:	eor	x12, x15, x12
 4ec:	b	4d4 <crc32_combine_+0x214>
 4f0:	tbz	w2, #1, 430 <crc32_combine_+0x170>
 4f4:	mov	x0, xzr
 4f8:	cbz	x10, 434 <crc32_combine_+0x174>
 4fc:	mov	x11, sp
 500:	b	510 <crc32_combine_+0x250>
 504:	lsr	x10, x10, #1
 508:	add	x11, x11, #0x8
 50c:	cbz	x10, 434 <crc32_combine_+0x174>
 510:	tbz	w10, #0, 504 <crc32_combine_+0x244>
 514:	ldr	x12, [x11]
 518:	eor	x0, x12, x0
 51c:	b	504 <crc32_combine_+0x244>
 520:	add	x11, sp, #0x100
 524:	b	534 <crc32_combine_+0x274>
 528:	lsr	x0, x0, #1
 52c:	add	x11, x11, #0x8
 530:	cbz	x0, 49c <crc32_combine_+0x1dc>
 534:	tbz	w0, #0, 528 <crc32_combine_+0x268>
 538:	ldr	x12, [x11]
 53c:	eor	x10, x12, x10
 540:	b	528 <crc32_combine_+0x268>
 544:	mov	x0, x10
 548:	eor	x0, x0, x1
 54c:	add	sp, sp, #0x200
 550:	ldr	x29, [sp], #16
 554:	ret

0000000000000558 <crc32_combine64>:
 558:	b	2c0 <crc32_combine_>

deflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <deflateInit_>:
       0:	mov	w7, w3
       4:	mov	x6, x2
       8:	mov	w2, #0x8                   	// #8
       c:	mov	w3, #0xf                   	// #15
      10:	mov	w4, #0x8                   	// #8
      14:	mov	w5, wzr
      18:	b	1c <deflateInit2_>

000000000000001c <deflateInit2_>:
      1c:	stp	x29, x30, [sp, #-80]!
      20:	stp	x26, x25, [sp, #16]
      24:	stp	x24, x23, [sp, #32]
      28:	stp	x22, x21, [sp, #48]
      2c:	stp	x20, x19, [sp, #64]
      30:	mov	x29, sp
      34:	cbz	x6, 9c <deflateInit2_+0x80>
      38:	mov	x19, x0
      3c:	cmp	w7, #0x70
      40:	mov	w0, #0xfffffffa            	// #-6
      44:	b.ne	2f8 <deflateInit2_+0x2dc>  // b.any
      48:	ldrb	w8, [x6]
      4c:	cmp	w8, #0x31
      50:	b.ne	2f8 <deflateInit2_+0x2dc>  // b.any
      54:	cbz	x19, 118 <deflateInit2_+0xfc>
      58:	ldr	x8, [x19, #64]
      5c:	mov	w20, w5
      60:	mov	w21, w4
      64:	str	xzr, [x19, #48]
      68:	cbz	x8, a4 <deflateInit2_+0x88>
      6c:	ldr	x9, [x19, #72]
      70:	cbz	x9, bc <deflateInit2_+0xa0>
      74:	cmn	w1, #0x1
      78:	mov	w9, #0x6                   	// #6
      7c:	csel	w23, w9, w1, eq  // eq = none
      80:	tbnz	w3, #31, cc <deflateInit2_+0xb0>
      84:	sub	w9, w3, #0x10
      88:	cmp	w3, #0xf
      8c:	mov	w10, #0x1                   	// #1
      90:	csel	w9, w9, w3, gt
      94:	cinc	w25, w10, gt
      98:	b	d4 <deflateInit2_+0xb8>
      9c:	mov	w0, #0xfffffffa            	// #-6
      a0:	b	2f8 <deflateInit2_+0x2dc>
      a4:	adrp	x8, 0 <zcalloc>
      a8:	add	x8, x8, #0x0
      ac:	str	x8, [x19, #64]
      b0:	str	xzr, [x19, #80]
      b4:	ldr	x9, [x19, #72]
      b8:	cbnz	x9, 74 <deflateInit2_+0x58>
      bc:	adrp	x9, 0 <zcfree>
      c0:	add	x9, x9, #0x0
      c4:	str	x9, [x19, #72]
      c8:	b	74 <deflateInit2_+0x58>
      cc:	mov	w25, wzr
      d0:	neg	w9, w3
      d4:	cmp	w20, #0x4
      d8:	mov	w0, #0xfffffffe            	// #-2
      dc:	b.hi	2f8 <deflateInit2_+0x2dc>  // b.pmore
      e0:	cmp	w23, #0x9
      e4:	b.hi	2f8 <deflateInit2_+0x2dc>  // b.pmore
      e8:	cmp	w2, #0x8
      ec:	b.ne	2f8 <deflateInit2_+0x2dc>  // b.any
      f0:	sub	w10, w21, #0x1
      f4:	cmp	w10, #0x8
      f8:	b.hi	2f8 <deflateInit2_+0x2dc>  // b.pmore
      fc:	and	w10, w9, #0xfffffff8
     100:	cmp	w10, #0x8
     104:	b.ne	2f8 <deflateInit2_+0x2dc>  // b.any
     108:	cmp	w9, #0x8
     10c:	b.ne	120 <deflateInit2_+0x104>  // b.any
     110:	cmp	w25, #0x1
     114:	b.eq	120 <deflateInit2_+0x104>  // b.none
     118:	mov	w0, #0xfffffffe            	// #-2
     11c:	b	2f8 <deflateInit2_+0x2dc>
     120:	ldr	x0, [x19, #80]
     124:	cmp	w9, #0x8
     128:	mov	w10, #0x9                   	// #9
     12c:	mov	w1, #0x1                   	// #1
     130:	mov	w2, #0x1740                	// #5952
     134:	csel	w26, w10, w9, eq  // eq = none
     138:	mov	w24, #0x1                   	// #1
     13c:	blr	x8
     140:	cbz	x0, 2f4 <deflateInit2_+0x2d8>
     144:	mov	w8, #0x2a                  	// #42
     148:	lsl	w1, w24, w26
     14c:	str	x0, [x19, #56]
     150:	str	w8, [x0, #8]
     154:	sub	w8, w1, #0x1
     158:	add	w10, w21, #0x9
     15c:	stp	w26, w8, [x0, #84]
     160:	mov	w8, #0xaaab                	// #43691
     164:	add	w9, w21, #0x7
     168:	movk	w8, #0xaaaa, lsl #16
     16c:	and	w10, w10, #0xff
     170:	umull	x8, w10, w8
     174:	lsl	w10, w24, w9
     178:	stp	w10, w9, [x0, #132]
     17c:	sub	w9, w10, #0x1
     180:	lsr	x8, x8, #33
     184:	str	x19, [x0]
     188:	str	w25, [x0, #48]
     18c:	str	xzr, [x0, #56]
     190:	str	w1, [x0, #80]
     194:	stp	w9, w8, [x0, #140]
     198:	mov	x22, x0
     19c:	ldr	x8, [x19, #64]
     1a0:	ldr	x0, [x19, #80]
     1a4:	mov	w2, #0x2                   	// #2
     1a8:	blr	x8
     1ac:	str	x0, [x22, #96]
     1b0:	ldr	x8, [x19, #64]
     1b4:	ldr	x0, [x19, #80]
     1b8:	ldr	w1, [x22, #80]
     1bc:	mov	w2, #0x2                   	// #2
     1c0:	blr	x8
     1c4:	str	x0, [x22, #112]
     1c8:	ldr	x8, [x19, #64]
     1cc:	ldr	x0, [x19, #80]
     1d0:	ldr	w1, [x22, #132]
     1d4:	mov	w2, #0x2                   	// #2
     1d8:	blr	x8
     1dc:	add	w8, w21, #0x6
     1e0:	lsl	w1, w24, w8
     1e4:	str	x0, [x22, #120]
     1e8:	str	xzr, [x22, #5944]
     1ec:	str	w1, [x22, #5896]
     1f0:	ldr	x8, [x19, #64]
     1f4:	ldr	x0, [x19, #80]
     1f8:	mov	w2, #0x4                   	// #4
     1fc:	blr	x8
     200:	ldr	w8, [x22, #5896]
     204:	ldr	x9, [x22, #96]
     208:	lsl	x10, x8, #2
     20c:	stp	x0, x10, [x22, #16]
     210:	cbz	x9, 2d8 <deflateInit2_+0x2bc>
     214:	ldr	x9, [x22, #112]
     218:	cbz	x9, 2d8 <deflateInit2_+0x2bc>
     21c:	cbz	x0, 2d8 <deflateInit2_+0x2bc>
     220:	ldr	x9, [x22, #120]
     224:	cbz	x9, 2d8 <deflateInit2_+0x2bc>
     228:	and	w9, w8, #0xfffffffe
     22c:	add	x8, x8, x8, lsl #1
     230:	mov	w10, #0x8                   	// #8
     234:	add	x9, x0, x9
     238:	add	x8, x0, x8
     23c:	mov	x0, x19
     240:	stp	w23, w20, [x22, #196]
     244:	str	x9, [x22, #5904]
     248:	str	x8, [x22, #5888]
     24c:	strb	w10, [x22, #72]
     250:	bl	b30 <deflateResetKeep>
     254:	cbnz	w0, 2f8 <deflateInit2_+0x2dc>
     258:	ldr	x19, [x19, #56]
     25c:	mov	w1, wzr
     260:	ldr	w9, [x19, #132]
     264:	ldr	w8, [x19, #80]
     268:	ldr	x0, [x19, #120]
     26c:	sub	w9, w9, #0x1
     270:	lsl	x8, x8, #1
     274:	lsl	x2, x9, #1
     278:	str	x8, [x19, #104]
     27c:	strh	wzr, [x0, x2]
     280:	bl	0 <memset>
     284:	ldrsw	x8, [x19, #196]
     288:	adrp	x9, 0 <deflateInit_>
     28c:	add	x9, x9, #0x0
     290:	adrp	x10, 0 <deflateInit_>
     294:	ldr	d0, [x10]
     298:	mov	w10, #0x2                   	// #2
     29c:	add	x8, x9, x8, lsl #4
     2a0:	str	w10, [x19, #160]
     2a4:	ldrh	w9, [x8]
     2a8:	ldrh	w10, [x8, #4]
     2ac:	mov	w0, wzr
     2b0:	str	xzr, [x19, #152]
     2b4:	str	wzr, [x19, #5932]
     2b8:	stp	w9, w10, [x19, #204]
     2bc:	ldrh	w9, [x8, #2]
     2c0:	ldrh	w8, [x8, #6]
     2c4:	str	xzr, [x19, #168]
     2c8:	stur	d0, [x19, #180]
     2cc:	str	wzr, [x19, #128]
     2d0:	stp	w8, w9, [x19, #188]
     2d4:	b	2f8 <deflateInit2_+0x2dc>
     2d8:	adrp	x8, 0 <z_errmsg>
     2dc:	ldr	x8, [x8]
     2e0:	mov	w9, #0x29a                 	// #666
     2e4:	mov	x0, x19
     2e8:	str	w9, [x22, #8]
     2ec:	str	x8, [x19, #48]
     2f0:	bl	310 <deflateEnd>
     2f4:	mov	w0, #0xfffffffc            	// #-4
     2f8:	ldp	x20, x19, [sp, #64]
     2fc:	ldp	x22, x21, [sp, #48]
     300:	ldp	x24, x23, [sp, #32]
     304:	ldp	x26, x25, [sp, #16]
     308:	ldp	x29, x30, [sp], #80
     30c:	ret

0000000000000310 <deflateEnd>:
     310:	stp	x29, x30, [sp, #-32]!
     314:	stp	x20, x19, [sp, #16]
     318:	mov	x29, sp
     31c:	cbz	x0, 348 <deflateEnd+0x38>
     320:	ldr	x8, [x0, #64]
     324:	mov	x19, x0
     328:	cbz	x8, 348 <deflateEnd+0x38>
     32c:	ldr	x9, [x19, #72]
     330:	cbz	x9, 348 <deflateEnd+0x38>
     334:	ldr	x1, [x19, #56]
     338:	cbz	x1, 348 <deflateEnd+0x38>
     33c:	ldr	x8, [x1]
     340:	cmp	x8, x19
     344:	b.eq	358 <deflateEnd+0x48>  // b.none
     348:	mov	w0, #0xfffffffe            	// #-2
     34c:	ldp	x20, x19, [sp, #16]
     350:	ldp	x29, x30, [sp], #32
     354:	ret
     358:	ldr	w20, [x1, #8]
     35c:	sub	w8, w20, #0x39
     360:	cmp	w8, #0x38
     364:	b.hi	404 <deflateEnd+0xf4>  // b.pmore
     368:	mov	w10, #0x1                   	// #1
     36c:	lsl	x8, x10, x8
     370:	mov	x10, #0x1001                	// #4097
     374:	movk	x10, #0x1, lsl #16
     378:	movk	x10, #0x4004, lsl #32
     37c:	movk	x10, #0x100, lsl #48
     380:	tst	x8, x10
     384:	b.eq	404 <deflateEnd+0xf4>  // b.none
     388:	ldr	x8, [x1, #16]
     38c:	cbz	x8, 3a0 <deflateEnd+0x90>
     390:	ldr	x0, [x19, #80]
     394:	mov	x1, x8
     398:	blr	x9
     39c:	ldr	x1, [x19, #56]
     3a0:	ldr	x8, [x1, #120]
     3a4:	cbz	x8, 3b8 <deflateEnd+0xa8>
     3a8:	ldp	x9, x0, [x19, #72]
     3ac:	mov	x1, x8
     3b0:	blr	x9
     3b4:	ldr	x1, [x19, #56]
     3b8:	ldr	x8, [x1, #112]
     3bc:	cbz	x8, 3d0 <deflateEnd+0xc0>
     3c0:	ldp	x9, x0, [x19, #72]
     3c4:	mov	x1, x8
     3c8:	blr	x9
     3cc:	ldr	x1, [x19, #56]
     3d0:	ldr	x8, [x1, #96]
     3d4:	cbz	x8, 3e8 <deflateEnd+0xd8>
     3d8:	ldp	x9, x0, [x19, #72]
     3dc:	mov	x1, x8
     3e0:	blr	x9
     3e4:	ldr	x1, [x19, #56]
     3e8:	ldp	x8, x0, [x19, #72]
     3ec:	blr	x8
     3f0:	cmp	w20, #0x71
     3f4:	mov	w8, #0xfffffffd            	// #-3
     3f8:	csel	w0, w8, wzr, eq  // eq = none
     3fc:	str	xzr, [x19, #56]
     400:	b	34c <deflateEnd+0x3c>
     404:	cmp	w20, #0x29a
     408:	b.eq	388 <deflateEnd+0x78>  // b.none
     40c:	cmp	w20, #0x2a
     410:	b.ne	348 <deflateEnd+0x38>  // b.any
     414:	b	388 <deflateEnd+0x78>

0000000000000418 <deflateReset>:
     418:	stp	x29, x30, [sp, #-32]!
     41c:	stp	x20, x19, [sp, #16]
     420:	mov	x29, sp
     424:	mov	x20, x0
     428:	bl	b30 <deflateResetKeep>
     42c:	mov	w19, w0
     430:	cbnz	w0, 4ac <deflateReset+0x94>
     434:	ldr	x20, [x20, #56]
     438:	mov	w1, wzr
     43c:	ldr	w9, [x20, #132]
     440:	ldr	w8, [x20, #80]
     444:	ldr	x0, [x20, #120]
     448:	sub	w9, w9, #0x1
     44c:	lsl	x8, x8, #1
     450:	lsl	x2, x9, #1
     454:	str	x8, [x20, #104]
     458:	strh	wzr, [x0, x2]
     45c:	bl	0 <memset>
     460:	ldrsw	x8, [x20, #196]
     464:	adrp	x9, 0 <deflateInit_>
     468:	add	x9, x9, #0x0
     46c:	adrp	x10, 0 <deflateInit_>
     470:	ldr	d0, [x10]
     474:	mov	w10, #0x2                   	// #2
     478:	add	x8, x9, x8, lsl #4
     47c:	str	w10, [x20, #160]
     480:	ldrh	w9, [x8]
     484:	ldrh	w10, [x8, #4]
     488:	str	xzr, [x20, #152]
     48c:	str	wzr, [x20, #5932]
     490:	str	xzr, [x20, #168]
     494:	stp	w9, w10, [x20, #204]
     498:	ldrh	w9, [x8, #2]
     49c:	ldrh	w8, [x8, #6]
     4a0:	stur	d0, [x20, #180]
     4a4:	str	wzr, [x20, #128]
     4a8:	stp	w8, w9, [x20, #188]
     4ac:	mov	w0, w19
     4b0:	ldp	x20, x19, [sp, #16]
     4b4:	ldp	x29, x30, [sp], #32
     4b8:	ret

00000000000004bc <deflateSetDictionary>:
     4bc:	stp	x29, x30, [sp, #-80]!
     4c0:	str	x25, [sp, #16]
     4c4:	stp	x24, x23, [sp, #32]
     4c8:	stp	x22, x21, [sp, #48]
     4cc:	stp	x20, x19, [sp, #64]
     4d0:	mov	x29, sp
     4d4:	cbz	x0, 500 <deflateSetDictionary+0x44>
     4d8:	ldr	x8, [x0, #64]
     4dc:	mov	x19, x0
     4e0:	cbz	x8, 500 <deflateSetDictionary+0x44>
     4e4:	ldr	x8, [x19, #72]
     4e8:	cbz	x8, 500 <deflateSetDictionary+0x44>
     4ec:	ldr	x20, [x19, #56]
     4f0:	cbz	x20, 500 <deflateSetDictionary+0x44>
     4f4:	ldr	x8, [x20]
     4f8:	cmp	x8, x19
     4fc:	b.eq	51c <deflateSetDictionary+0x60>  // b.none
     500:	mov	w0, #0xfffffffe            	// #-2
     504:	ldp	x20, x19, [sp, #64]
     508:	ldp	x22, x21, [sp, #48]
     50c:	ldp	x24, x23, [sp, #32]
     510:	ldr	x25, [sp, #16]
     514:	ldp	x29, x30, [sp], #80
     518:	ret
     51c:	ldr	w8, [x20, #8]
     520:	mov	w22, w2
     524:	mov	x21, x1
     528:	sub	w9, w8, #0x39
     52c:	cmp	w9, #0x38
     530:	b.hi	6bc <deflateSetDictionary+0x200>  // b.pmore
     534:	mov	w10, #0x1                   	// #1
     538:	lsl	x9, x10, x9
     53c:	mov	x10, #0x1001                	// #4097
     540:	movk	x10, #0x1, lsl #16
     544:	movk	x10, #0x4004, lsl #32
     548:	movk	x10, #0x100, lsl #48
     54c:	tst	x9, x10
     550:	b.eq	6bc <deflateSetDictionary+0x200>  // b.none
     554:	cbz	x21, 500 <deflateSetDictionary+0x44>
     558:	ldr	w23, [x20, #48]
     55c:	cmp	w23, #0x2
     560:	b.eq	500 <deflateSetDictionary+0x44>  // b.none
     564:	cmp	w8, #0x2a
     568:	b.eq	574 <deflateSetDictionary+0xb8>  // b.none
     56c:	cmp	w23, #0x1
     570:	b.eq	500 <deflateSetDictionary+0x44>  // b.none
     574:	ldr	w8, [x20, #180]
     578:	cbnz	w8, 500 <deflateSetDictionary+0x44>
     57c:	cmp	w23, #0x1
     580:	b.ne	598 <deflateSetDictionary+0xdc>  // b.any
     584:	ldr	x0, [x19, #96]
     588:	mov	x1, x21
     58c:	mov	w2, w22
     590:	bl	0 <adler32>
     594:	str	x0, [x19, #96]
     598:	ldr	w8, [x20, #80]
     59c:	str	wzr, [x20, #48]
     5a0:	cmp	w8, w22
     5a4:	b.hi	5e4 <deflateSetDictionary+0x128>  // b.pmore
     5a8:	cbnz	w23, 5d8 <deflateSetDictionary+0x11c>
     5ac:	ldr	w8, [x20, #132]
     5b0:	ldr	x0, [x20, #120]
     5b4:	mov	w1, wzr
     5b8:	sub	w8, w8, #0x1
     5bc:	lsl	x2, x8, #1
     5c0:	strh	wzr, [x0, x2]
     5c4:	bl	0 <memset>
     5c8:	ldr	w8, [x20, #80]
     5cc:	str	wzr, [x20, #172]
     5d0:	str	xzr, [x20, #152]
     5d4:	str	wzr, [x20, #5932]
     5d8:	sub	w9, w22, w8
     5dc:	add	x21, x21, x9
     5e0:	mov	w22, w8
     5e4:	ldr	w24, [x19, #8]
     5e8:	ldr	x25, [x19]
     5ec:	mov	x0, x20
     5f0:	str	w22, [x19, #8]
     5f4:	str	x21, [x19]
     5f8:	bl	6d0 <fill_window>
     5fc:	ldr	w9, [x20, #180]
     600:	ldr	w8, [x20, #172]
     604:	cmp	w9, #0x3
     608:	b.cc	684 <deflateSetDictionary+0x1c8>  // b.lo, b.ul, b.last
     60c:	mov	w21, #0x2                   	// #2
     610:	ldr	x10, [x20, #96]
     614:	ldp	w12, w11, [x20, #140]
     618:	ldp	x14, x13, [x20, #112]
     61c:	ldr	w15, [x20, #88]
     620:	ldr	w16, [x20, #128]
     624:	sub	w9, w9, #0x2
     628:	add	w17, w8, #0x2
     62c:	ldrb	w17, [x10, w17, uxtw]
     630:	lsl	w16, w16, w11
     634:	mov	w0, w8
     638:	and	x0, x15, x0
     63c:	eor	w16, w16, w17
     640:	and	x16, x16, x12
     644:	str	w16, [x20, #128]
     648:	lsl	x17, x16, #1
     64c:	ldrh	w18, [x13, x17]
     650:	subs	w9, w9, #0x1
     654:	strh	w18, [x14, x0, lsl #1]
     658:	strh	w8, [x13, x17]
     65c:	add	w8, w8, #0x1
     660:	b.ne	628 <deflateSetDictionary+0x16c>  // b.any
     664:	mov	x0, x20
     668:	str	w8, [x20, #172]
     66c:	str	w21, [x20, #180]
     670:	bl	6d0 <fill_window>
     674:	ldr	w9, [x20, #180]
     678:	ldr	w8, [x20, #172]
     67c:	cmp	w9, #0x2
     680:	b.hi	610 <deflateSetDictionary+0x154>  // b.pmore
     684:	add	w8, w8, w9
     688:	str	w9, [x20, #5932]
     68c:	adrp	x9, 0 <deflateInit_>
     690:	ldr	d0, [x9]
     694:	mov	w0, wzr
     698:	mov	w10, #0x2                   	// #2
     69c:	str	x8, [x20, #152]
     6a0:	str	w10, [x20, #160]
     6a4:	stp	wzr, w8, [x20, #168]
     6a8:	stur	d0, [x20, #180]
     6ac:	str	x25, [x19]
     6b0:	str	w24, [x19, #8]
     6b4:	str	w23, [x20, #48]
     6b8:	b	504 <deflateSetDictionary+0x48>
     6bc:	cmp	w8, #0x29a
     6c0:	b.eq	554 <deflateSetDictionary+0x98>  // b.none
     6c4:	cmp	w8, #0x2a
     6c8:	b.ne	500 <deflateSetDictionary+0x44>  // b.any
     6cc:	b	554 <deflateSetDictionary+0x98>

00000000000006d0 <fill_window>:
     6d0:	str	d8, [sp, #-80]!
     6d4:	stp	x29, x30, [sp, #8]
     6d8:	stp	x24, x23, [sp, #32]
     6dc:	stp	x22, x21, [sp, #48]
     6e0:	stp	x20, x19, [sp, #64]
     6e4:	ldr	w23, [x0, #80]
     6e8:	ldr	w8, [x0, #180]
     6ec:	mov	x19, x0
     6f0:	str	x25, [sp, #24]
     6f4:	sub	w24, w23, #0x106
     6f8:	dup	v8.2s, w23
     6fc:	mov	w10, w23
     700:	mov	x29, sp
     704:	ldr	w11, [x19, #104]
     708:	ldr	w9, [x19, #172]
     70c:	add	w10, w24, w10
     710:	sub	w8, w11, w8
     714:	cmp	w9, w10
     718:	sub	w20, w8, w9
     71c:	b.cc	85c <fill_window+0x18c>  // b.lo, b.ul, b.last
     720:	ldr	x0, [x19, #96]
     724:	sub	w2, w23, w20
     728:	add	x1, x0, x23
     72c:	bl	0 <memcpy>
     730:	ldur	d0, [x19, #172]
     734:	ldr	x10, [x19, #152]
     738:	ldr	w9, [x19, #132]
     73c:	ldr	x11, [x19, #120]
     740:	ldr	w8, [x19, #80]
     744:	sub	v0.2s, v0.2s, v8.2s
     748:	sub	x12, x10, x23
     74c:	subs	w10, w9, #0x1
     750:	add	x13, x11, x9, lsl #1
     754:	stur	d0, [x19, #172]
     758:	str	x12, [x19, #152]
     75c:	b.eq	7b0 <fill_window+0xe0>  // b.none
     760:	add	x11, x10, #0x1
     764:	and	x12, x11, #0x1fffffffe
     768:	sub	x10, x13, x12, lsl #1
     76c:	sub	w9, w9, w12
     770:	sub	x13, x13, #0x2
     774:	mov	x14, x12
     778:	ldrh	w15, [x13]
     77c:	ldurh	w16, [x13, #-2]
     780:	subs	w15, w15, w8
     784:	csel	w15, wzr, w15, cc  // cc = lo, ul, last
     788:	subs	w16, w16, w8
     78c:	csel	w16, wzr, w16, cc  // cc = lo, ul, last
     790:	strh	w15, [x13]
     794:	subs	x14, x14, #0x2
     798:	sturh	w16, [x13, #-2]
     79c:	sub	x13, x13, #0x4
     7a0:	b.ne	778 <fill_window+0xa8>  // b.any
     7a4:	cmp	x11, x12
     7a8:	b.ne	7b4 <fill_window+0xe4>  // b.any
     7ac:	b	7d0 <fill_window+0x100>
     7b0:	mov	x10, x13
     7b4:	sub	x10, x10, #0x2
     7b8:	ldrh	w11, [x10]
     7bc:	subs	w11, w11, w8
     7c0:	csel	w11, wzr, w11, cc  // cc = lo, ul, last
     7c4:	subs	w9, w9, #0x1
     7c8:	strh	w11, [x10], #-2
     7cc:	b.ne	7b8 <fill_window+0xe8>  // b.any
     7d0:	ldr	x10, [x19, #112]
     7d4:	subs	w9, w8, #0x1
     7d8:	add	x13, x10, x8, lsl #1
     7dc:	b.eq	830 <fill_window+0x160>  // b.none
     7e0:	add	x11, x9, #0x1
     7e4:	and	x12, x11, #0x1fffffffe
     7e8:	sub	x10, x13, x12, lsl #1
     7ec:	sub	w9, w8, w12
     7f0:	sub	x13, x13, #0x2
     7f4:	mov	x14, x12
     7f8:	ldrh	w15, [x13]
     7fc:	ldurh	w16, [x13, #-2]
     800:	subs	w15, w15, w8
     804:	csel	w15, wzr, w15, cc  // cc = lo, ul, last
     808:	subs	w16, w16, w8
     80c:	csel	w16, wzr, w16, cc  // cc = lo, ul, last
     810:	strh	w15, [x13]
     814:	subs	x14, x14, #0x2
     818:	sturh	w16, [x13, #-2]
     81c:	sub	x13, x13, #0x4
     820:	b.ne	7f8 <fill_window+0x128>  // b.any
     824:	cmp	x11, x12
     828:	b.ne	838 <fill_window+0x168>  // b.any
     82c:	b	854 <fill_window+0x184>
     830:	mov	x10, x13
     834:	mov	w9, w8
     838:	sub	x10, x10, #0x2
     83c:	ldrh	w11, [x10]
     840:	subs	w11, w11, w8
     844:	csel	w11, wzr, w11, cc  // cc = lo, ul, last
     848:	subs	w9, w9, #0x1
     84c:	strh	w11, [x10], #-2
     850:	b.ne	83c <fill_window+0x16c>  // b.any
     854:	add	w20, w20, w23
     858:	fmov	w9, s0
     85c:	ldr	x25, [x19]
     860:	ldr	w10, [x25, #8]
     864:	cbz	w10, 9b4 <fill_window+0x2e4>
     868:	ldr	w8, [x19, #180]
     86c:	cmp	w10, w20
     870:	csel	w20, w20, w10, hi  // hi = pmore
     874:	cbz	w20, 8fc <fill_window+0x22c>
     878:	ldr	x11, [x19, #96]
     87c:	ldr	x1, [x25]
     880:	mov	w21, w20
     884:	sub	w10, w10, w20
     888:	add	x9, x11, w9, uxtw
     88c:	add	x22, x9, x8
     890:	mov	x0, x22
     894:	mov	x2, x21
     898:	str	w10, [x25, #8]
     89c:	bl	0 <memcpy>
     8a0:	ldr	x8, [x25, #56]
     8a4:	ldr	w8, [x8, #48]
     8a8:	cmp	w8, #0x2
     8ac:	b.eq	8cc <fill_window+0x1fc>  // b.none
     8b0:	cmp	w8, #0x1
     8b4:	b.ne	8e0 <fill_window+0x210>  // b.any
     8b8:	ldr	x0, [x25, #96]
     8bc:	mov	x1, x22
     8c0:	mov	w2, w20
     8c4:	bl	0 <adler32>
     8c8:	b	8dc <fill_window+0x20c>
     8cc:	ldr	x0, [x25, #96]
     8d0:	mov	x1, x22
     8d4:	mov	w2, w20
     8d8:	bl	0 <crc32>
     8dc:	str	x0, [x25, #96]
     8e0:	ldr	x8, [x25]
     8e4:	ldr	x9, [x25, #16]
     8e8:	add	x8, x8, x21
     8ec:	add	x9, x9, x21
     8f0:	str	x8, [x25]
     8f4:	str	x9, [x25, #16]
     8f8:	ldr	w8, [x19, #180]
     8fc:	ldr	w9, [x19, #5932]
     900:	add	w8, w8, w20
     904:	str	w8, [x19, #180]
     908:	add	w10, w9, w8
     90c:	cmp	w10, #0x3
     910:	b.cc	998 <fill_window+0x2c8>  // b.lo, b.ul, b.last
     914:	ldr	w11, [x19, #172]
     918:	ldr	x10, [x19, #96]
     91c:	sub	w11, w11, w9
     920:	ldrb	w14, [x10, w11, uxtw]
     924:	add	w13, w11, #0x1
     928:	str	w14, [x19, #128]
     92c:	ldrb	w15, [x10, w13, uxtw]
     930:	ldp	w13, w12, [x19, #140]
     934:	lsl	w14, w14, w12
     938:	eor	w14, w14, w15
     93c:	and	w14, w14, w13
     940:	str	w14, [x19, #128]
     944:	cbz	w9, 998 <fill_window+0x2c8>
     948:	add	w15, w11, #0x2
     94c:	ldrb	w15, [x10, w15, uxtw]
     950:	lsl	w14, w14, w12
     954:	ldp	x17, x16, [x19, #112]
     958:	ldr	w18, [x19, #88]
     95c:	eor	w14, w14, w15
     960:	and	x14, x14, x13
     964:	str	w14, [x19, #128]
     968:	lsl	x15, x14, #1
     96c:	sub	w9, w9, #0x1
     970:	ldrh	w1, [x16, x15]
     974:	add	w0, w8, w9
     978:	cmp	w0, #0x2
     97c:	mov	w0, w11
     980:	and	x18, x18, x0
     984:	strh	w1, [x17, x18, lsl #1]
     988:	strh	w11, [x16, x15]
     98c:	add	w11, w11, #0x1
     990:	str	w9, [x19, #5932]
     994:	b.hi	944 <fill_window+0x274>  // b.pmore
     998:	cmp	w8, #0x105
     99c:	b.hi	9b4 <fill_window+0x2e4>  // b.pmore
     9a0:	ldr	x9, [x19]
     9a4:	ldr	w9, [x9, #8]
     9a8:	cbz	w9, 9b4 <fill_window+0x2e4>
     9ac:	ldr	w10, [x19, #80]
     9b0:	b	704 <fill_window+0x34>
     9b4:	ldr	x8, [x19, #5944]
     9b8:	ldr	x10, [x19, #104]
     9bc:	subs	x9, x10, x8
     9c0:	b.ls	a38 <fill_window+0x368>  // b.plast
     9c4:	ldr	w11, [x19, #172]
     9c8:	ldr	w12, [x19, #180]
     9cc:	add	x21, x12, x11
     9d0:	cmp	x8, x21
     9d4:	b.cs	a04 <fill_window+0x334>  // b.hs, b.nlast
     9d8:	ldr	x9, [x19, #96]
     9dc:	sub	x8, x10, x21
     9e0:	cmp	x8, #0x102
     9e4:	mov	w10, #0x102                 	// #258
     9e8:	csel	x20, x8, x10, cc  // cc = lo, ul, last
     9ec:	add	x0, x9, x21
     9f0:	mov	w1, wzr
     9f4:	mov	x2, x20
     9f8:	bl	0 <memset>
     9fc:	add	x8, x20, x21
     a00:	b	a34 <fill_window+0x364>
     a04:	add	x10, x21, #0x102
     a08:	subs	x10, x10, x8
     a0c:	b.ls	a38 <fill_window+0x368>  // b.plast
     a10:	ldr	x11, [x19, #96]
     a14:	cmp	x10, x9
     a18:	csel	x20, x9, x10, hi  // hi = pmore
     a1c:	and	x2, x20, #0xffffffff
     a20:	add	x0, x11, x8
     a24:	mov	w1, wzr
     a28:	bl	0 <memset>
     a2c:	ldr	x8, [x19, #5944]
     a30:	add	x8, x8, x20
     a34:	str	x8, [x19, #5944]
     a38:	ldp	x20, x19, [sp, #64]
     a3c:	ldp	x22, x21, [sp, #48]
     a40:	ldp	x24, x23, [sp, #32]
     a44:	ldr	x25, [sp, #24]
     a48:	ldp	x29, x30, [sp, #8]
     a4c:	ldr	d8, [sp], #80
     a50:	ret

0000000000000a54 <deflateGetDictionary>:
     a54:	stp	x29, x30, [sp, #-32]!
     a58:	stp	x20, x19, [sp, #16]
     a5c:	mov	x29, sp
     a60:	cbz	x0, a88 <deflateGetDictionary+0x34>
     a64:	ldr	x8, [x0, #64]
     a68:	cbz	x8, a88 <deflateGetDictionary+0x34>
     a6c:	ldr	x8, [x0, #72]
     a70:	cbz	x8, a88 <deflateGetDictionary+0x34>
     a74:	ldr	x8, [x0, #56]
     a78:	cbz	x8, a88 <deflateGetDictionary+0x34>
     a7c:	ldr	x9, [x8]
     a80:	cmp	x9, x0
     a84:	b.eq	a98 <deflateGetDictionary+0x44>  // b.none
     a88:	mov	w0, #0xfffffffe            	// #-2
     a8c:	ldp	x20, x19, [sp, #16]
     a90:	ldp	x29, x30, [sp], #32
     a94:	ret
     a98:	ldr	w9, [x8, #8]
     a9c:	mov	x19, x2
     aa0:	sub	w10, w9, #0x39
     aa4:	cmp	w10, #0x38
     aa8:	b.hi	b1c <deflateGetDictionary+0xc8>  // b.pmore
     aac:	mov	w11, #0x1                   	// #1
     ab0:	lsl	x10, x11, x10
     ab4:	mov	x11, #0x1001                	// #4097
     ab8:	movk	x11, #0x1, lsl #16
     abc:	movk	x11, #0x4004, lsl #32
     ac0:	movk	x11, #0x100, lsl #48
     ac4:	tst	x10, x11
     ac8:	b.eq	b1c <deflateGetDictionary+0xc8>  // b.none
     acc:	ldr	w9, [x8, #172]
     ad0:	ldr	w10, [x8, #180]
     ad4:	ldr	w11, [x8, #80]
     ad8:	add	w12, w10, w9
     adc:	cmp	w12, w11
     ae0:	csel	w20, w11, w12, hi  // hi = pmore
     ae4:	cbz	x1, b0c <deflateGetDictionary+0xb8>
     ae8:	cbz	w20, b0c <deflateGetDictionary+0xb8>
     aec:	ldr	x8, [x8, #96]
     af0:	mov	w2, w20
     af4:	mov	x0, x1
     af8:	add	x8, x8, x9
     afc:	add	x8, x8, x10
     b00:	sub	x8, x8, x2
     b04:	mov	x1, x8
     b08:	bl	0 <memcpy>
     b0c:	mov	w0, wzr
     b10:	cbz	x19, a8c <deflateGetDictionary+0x38>
     b14:	str	w20, [x19]
     b18:	b	a8c <deflateGetDictionary+0x38>
     b1c:	cmp	w9, #0x29a
     b20:	b.eq	acc <deflateGetDictionary+0x78>  // b.none
     b24:	cmp	w9, #0x2a
     b28:	b.ne	a88 <deflateGetDictionary+0x34>  // b.any
     b2c:	b	acc <deflateGetDictionary+0x78>

0000000000000b30 <deflateResetKeep>:
     b30:	stp	x29, x30, [sp, #-32]!
     b34:	stp	x20, x19, [sp, #16]
     b38:	mov	x29, sp
     b3c:	cbz	x0, b68 <deflateResetKeep+0x38>
     b40:	ldr	x8, [x0, #64]
     b44:	mov	x19, x0
     b48:	cbz	x8, b68 <deflateResetKeep+0x38>
     b4c:	ldr	x8, [x19, #72]
     b50:	cbz	x8, b68 <deflateResetKeep+0x38>
     b54:	ldr	x20, [x19, #56]
     b58:	cbz	x20, b68 <deflateResetKeep+0x38>
     b5c:	ldr	x8, [x20]
     b60:	cmp	x8, x19
     b64:	b.eq	b78 <deflateResetKeep+0x48>  // b.none
     b68:	mov	w0, #0xfffffffe            	// #-2
     b6c:	ldp	x20, x19, [sp, #16]
     b70:	ldp	x29, x30, [sp], #32
     b74:	ret
     b78:	ldr	w8, [x20, #8]
     b7c:	sub	w9, w8, #0x39
     b80:	cmp	w9, #0x38
     b84:	b.hi	c24 <deflateResetKeep+0xf4>  // b.pmore
     b88:	mov	w10, #0x1                   	// #1
     b8c:	lsl	x9, x10, x9
     b90:	mov	x10, #0x1001                	// #4097
     b94:	movk	x10, #0x1, lsl #16
     b98:	movk	x10, #0x4004, lsl #32
     b9c:	movk	x10, #0x100, lsl #48
     ba0:	tst	x9, x10
     ba4:	b.eq	c24 <deflateResetKeep+0xf4>  // b.none
     ba8:	mov	w8, #0x2                   	// #2
     bac:	str	xzr, [x19, #16]
     bb0:	stp	xzr, xzr, [x19, #40]
     bb4:	str	w8, [x19, #88]
     bb8:	ldr	x9, [x20, #16]
     bbc:	ldr	w8, [x20, #48]
     bc0:	stp	x9, xzr, [x20, #32]
     bc4:	tbz	w8, #31, bd0 <deflateResetKeep+0xa0>
     bc8:	neg	w8, w8
     bcc:	str	w8, [x20, #48]
     bd0:	cmp	w8, #0x0
     bd4:	mov	w9, #0x2a                  	// #42
     bd8:	mov	w10, #0x71                  	// #113
     bdc:	csel	w9, w10, w9, eq  // eq = none
     be0:	cmp	w8, #0x2
     be4:	mov	w8, #0x39                  	// #57
     be8:	csel	w8, w8, w9, eq  // eq = none
     bec:	mov	x0, xzr
     bf0:	mov	x1, xzr
     bf4:	mov	w2, wzr
     bf8:	str	w8, [x20, #8]
     bfc:	b.ne	c08 <deflateResetKeep+0xd8>  // b.any
     c00:	bl	0 <crc32>
     c04:	b	c0c <deflateResetKeep+0xdc>
     c08:	bl	0 <adler32>
     c0c:	str	x0, [x19, #96]
     c10:	mov	x0, x20
     c14:	str	wzr, [x20, #76]
     c18:	bl	0 <_tr_init>
     c1c:	mov	w0, wzr
     c20:	b	b6c <deflateResetKeep+0x3c>
     c24:	cmp	w8, #0x29a
     c28:	b.eq	ba8 <deflateResetKeep+0x78>  // b.none
     c2c:	cmp	w8, #0x2a
     c30:	b.ne	b68 <deflateResetKeep+0x38>  // b.any
     c34:	b	ba8 <deflateResetKeep+0x78>

0000000000000c38 <deflateSetHeader>:
     c38:	cbz	x0, cb8 <deflateSetHeader+0x80>
     c3c:	ldr	x8, [x0, #64]
     c40:	cbz	x8, cb8 <deflateSetHeader+0x80>
     c44:	ldr	x8, [x0, #72]
     c48:	cbz	x8, cb8 <deflateSetHeader+0x80>
     c4c:	ldr	x8, [x0, #56]
     c50:	cbz	x8, cb8 <deflateSetHeader+0x80>
     c54:	ldr	x9, [x8]
     c58:	cmp	x9, x0
     c5c:	b.ne	cb8 <deflateSetHeader+0x80>  // b.any
     c60:	ldr	w9, [x8, #8]
     c64:	sub	w10, w9, #0x39
     c68:	cmp	w10, #0x38
     c6c:	b.hi	ca8 <deflateSetHeader+0x70>  // b.pmore
     c70:	mov	w11, #0x1                   	// #1
     c74:	lsl	x10, x11, x10
     c78:	mov	x11, #0x1001                	// #4097
     c7c:	movk	x11, #0x1, lsl #16
     c80:	movk	x11, #0x4004, lsl #32
     c84:	movk	x11, #0x100, lsl #48
     c88:	tst	x10, x11
     c8c:	b.eq	ca8 <deflateSetHeader+0x70>  // b.none
     c90:	ldr	w9, [x8, #48]
     c94:	cmp	w9, #0x2
     c98:	b.ne	cb8 <deflateSetHeader+0x80>  // b.any
     c9c:	mov	w0, wzr
     ca0:	str	x1, [x8, #56]
     ca4:	ret
     ca8:	cmp	w9, #0x29a
     cac:	b.eq	c90 <deflateSetHeader+0x58>  // b.none
     cb0:	cmp	w9, #0x2a
     cb4:	b.eq	c90 <deflateSetHeader+0x58>  // b.none
     cb8:	mov	w0, #0xfffffffe            	// #-2
     cbc:	ret

0000000000000cc0 <deflatePending>:
     cc0:	cbz	x0, ce8 <deflatePending+0x28>
     cc4:	ldr	x8, [x0, #64]
     cc8:	cbz	x8, ce8 <deflatePending+0x28>
     ccc:	ldr	x8, [x0, #72]
     cd0:	cbz	x8, ce8 <deflatePending+0x28>
     cd4:	ldr	x8, [x0, #56]
     cd8:	cbz	x8, ce8 <deflatePending+0x28>
     cdc:	ldr	x9, [x8]
     ce0:	cmp	x9, x0
     ce4:	b.eq	cf0 <deflatePending+0x30>  // b.none
     ce8:	mov	w0, #0xfffffffe            	// #-2
     cec:	ret
     cf0:	ldr	w9, [x8, #8]
     cf4:	sub	w10, w9, #0x39
     cf8:	cmp	w10, #0x38
     cfc:	b.hi	d40 <deflatePending+0x80>  // b.pmore
     d00:	mov	w11, #0x1                   	// #1
     d04:	lsl	x10, x11, x10
     d08:	mov	x11, #0x1001                	// #4097
     d0c:	movk	x11, #0x1, lsl #16
     d10:	movk	x11, #0x4004, lsl #32
     d14:	movk	x11, #0x100, lsl #48
     d18:	tst	x10, x11
     d1c:	b.eq	d40 <deflatePending+0x80>  // b.none
     d20:	cbz	x1, d2c <deflatePending+0x6c>
     d24:	ldr	x9, [x8, #40]
     d28:	str	w9, [x1]
     d2c:	mov	w0, wzr
     d30:	cbz	x2, d3c <deflatePending+0x7c>
     d34:	ldr	w8, [x8, #5940]
     d38:	str	w8, [x2]
     d3c:	ret
     d40:	cmp	w9, #0x29a
     d44:	b.eq	d20 <deflatePending+0x60>  // b.none
     d48:	cmp	w9, #0x2a
     d4c:	b.ne	ce8 <deflatePending+0x28>  // b.any
     d50:	b	d20 <deflatePending+0x60>

0000000000000d54 <deflatePrime>:
     d54:	stp	x29, x30, [sp, #-64]!
     d58:	stp	x24, x23, [sp, #16]
     d5c:	stp	x22, x21, [sp, #32]
     d60:	stp	x20, x19, [sp, #48]
     d64:	mov	x29, sp
     d68:	cbz	x0, d90 <deflatePrime+0x3c>
     d6c:	ldr	x8, [x0, #64]
     d70:	cbz	x8, d90 <deflatePrime+0x3c>
     d74:	ldr	x8, [x0, #72]
     d78:	cbz	x8, d90 <deflatePrime+0x3c>
     d7c:	ldr	x21, [x0, #56]
     d80:	cbz	x21, d90 <deflatePrime+0x3c>
     d84:	ldr	x8, [x21]
     d88:	cmp	x8, x0
     d8c:	b.eq	da8 <deflatePrime+0x54>  // b.none
     d90:	mov	w0, #0xfffffffe            	// #-2
     d94:	ldp	x20, x19, [sp, #48]
     d98:	ldp	x22, x21, [sp, #32]
     d9c:	ldp	x24, x23, [sp, #16]
     da0:	ldp	x29, x30, [sp], #64
     da4:	ret
     da8:	ldr	w8, [x21, #8]
     dac:	mov	w19, w2
     db0:	mov	w20, w1
     db4:	sub	w9, w8, #0x39
     db8:	cmp	w9, #0x38
     dbc:	b.hi	e50 <deflatePrime+0xfc>  // b.pmore
     dc0:	mov	w10, #0x1                   	// #1
     dc4:	lsl	x9, x10, x9
     dc8:	mov	x10, #0x1001                	// #4097
     dcc:	movk	x10, #0x1, lsl #16
     dd0:	movk	x10, #0x4004, lsl #32
     dd4:	movk	x10, #0x100, lsl #48
     dd8:	tst	x9, x10
     ddc:	b.eq	e50 <deflatePrime+0xfc>  // b.none
     de0:	ldr	x8, [x21, #32]
     de4:	ldr	x9, [x21, #5904]
     de8:	add	x8, x8, #0x2
     dec:	cmp	x9, x8
     df0:	b.cs	dfc <deflatePrime+0xa8>  // b.hs, b.nlast
     df4:	mov	w0, #0xfffffffb            	// #-5
     df8:	b	d94 <deflatePrime+0x40>
     dfc:	mov	w22, #0x10                  	// #16
     e00:	mov	w23, #0xffffffff            	// #-1
     e04:	ldr	w8, [x21, #5940]
     e08:	ldrh	w9, [x21, #5936]
     e0c:	mov	x0, x21
     e10:	sub	w10, w22, w8
     e14:	cmp	w10, w20
     e18:	csel	w24, w20, w10, gt
     e1c:	lsl	w10, w23, w24
     e20:	bic	w10, w19, w10
     e24:	add	w11, w24, w8
     e28:	lsl	w8, w10, w8
     e2c:	orr	w8, w9, w8
     e30:	strh	w8, [x21, #5936]
     e34:	str	w11, [x21, #5940]
     e38:	bl	0 <_tr_flush_bits>
     e3c:	mov	w0, wzr
     e40:	subs	w20, w20, w24
     e44:	asr	w19, w19, w24
     e48:	b.ne	e04 <deflatePrime+0xb0>  // b.any
     e4c:	b	d94 <deflatePrime+0x40>
     e50:	cmp	w8, #0x29a
     e54:	b.eq	de0 <deflatePrime+0x8c>  // b.none
     e58:	cmp	w8, #0x2a
     e5c:	b.ne	d90 <deflatePrime+0x3c>  // b.any
     e60:	b	de0 <deflatePrime+0x8c>

0000000000000e64 <deflateParams>:
     e64:	stp	x29, x30, [sp, #-48]!
     e68:	stp	x22, x21, [sp, #16]
     e6c:	stp	x20, x19, [sp, #32]
     e70:	mov	x29, sp
     e74:	cbz	x0, ea0 <deflateParams+0x3c>
     e78:	ldr	x8, [x0, #64]
     e7c:	mov	x20, x0
     e80:	cbz	x8, ea0 <deflateParams+0x3c>
     e84:	ldr	x8, [x20, #72]
     e88:	cbz	x8, ea0 <deflateParams+0x3c>
     e8c:	ldr	x21, [x20, #56]
     e90:	cbz	x21, ea0 <deflateParams+0x3c>
     e94:	ldr	x8, [x21]
     e98:	cmp	x8, x20
     e9c:	b.eq	eb4 <deflateParams+0x50>  // b.none
     ea0:	mov	w0, #0xfffffffe            	// #-2
     ea4:	ldp	x20, x19, [sp, #32]
     ea8:	ldp	x22, x21, [sp, #16]
     eac:	ldp	x29, x30, [sp], #48
     eb0:	ret
     eb4:	ldr	w8, [x21, #8]
     eb8:	mov	w19, w2
     ebc:	sub	w9, w8, #0x39
     ec0:	cmp	w9, #0x38
     ec4:	b.hi	fe4 <deflateParams+0x180>  // b.pmore
     ec8:	mov	w10, #0x1                   	// #1
     ecc:	lsl	x9, x10, x9
     ed0:	mov	x10, #0x1001                	// #4097
     ed4:	movk	x10, #0x1, lsl #16
     ed8:	movk	x10, #0x4004, lsl #32
     edc:	movk	x10, #0x100, lsl #48
     ee0:	tst	x9, x10
     ee4:	b.eq	fe4 <deflateParams+0x180>  // b.none
     ee8:	cmn	w1, #0x1
     eec:	mov	w8, #0x6                   	// #6
     ef0:	csel	w22, w8, w1, eq  // eq = none
     ef4:	cmp	w19, #0x4
     ef8:	mov	w0, #0xfffffffe            	// #-2
     efc:	b.hi	ea4 <deflateParams+0x40>  // b.pmore
     f00:	cmp	w22, #0x9
     f04:	b.hi	ea4 <deflateParams+0x40>  // b.pmore
     f08:	ldr	w8, [x21, #200]
     f0c:	cmp	w8, w19
     f10:	b.ne	f38 <deflateParams+0xd4>  // b.any
     f14:	ldrsw	x8, [x21, #196]
     f18:	adrp	x9, 0 <deflateInit_>
     f1c:	add	x9, x9, #0x0
     f20:	add	x10, x9, w22, uxtw #4
     f24:	add	x8, x9, x8, lsl #4
     f28:	ldr	x8, [x8, #8]
     f2c:	ldr	x9, [x10, #8]
     f30:	cmp	x8, x9
     f34:	b.eq	f5c <deflateParams+0xf8>  // b.none
     f38:	ldr	x8, [x21, #5944]
     f3c:	cbz	x8, f5c <deflateParams+0xf8>
     f40:	mov	w1, #0x5                   	// #5
     f44:	mov	x0, x20
     f48:	bl	10fc <deflate>
     f4c:	cmn	w0, #0x2
     f50:	b.eq	ea4 <deflateParams+0x40>  // b.none
     f54:	ldr	w8, [x20, #32]
     f58:	cbz	w8, ff8 <deflateParams+0x194>
     f5c:	ldr	w8, [x21, #196]
     f60:	cmp	w8, w22
     f64:	b.eq	10f0 <deflateParams+0x28c>  // b.none
     f68:	cbnz	w8, 10c8 <deflateParams+0x264>
     f6c:	ldr	w8, [x21, #5928]
     f70:	cbz	w8, 10c8 <deflateParams+0x264>
     f74:	cmp	w8, #0x1
     f78:	b.ne	1000 <deflateParams+0x19c>  // b.any
     f7c:	ldr	w10, [x21, #132]
     f80:	ldr	x0, [x21, #120]
     f84:	ldr	w9, [x21, #80]
     f88:	subs	w8, w10, #0x1
     f8c:	add	x14, x0, x10, lsl #1
     f90:	b.eq	1014 <deflateParams+0x1b0>  // b.none
     f94:	add	x12, x8, #0x1
     f98:	and	x13, x12, #0x1fffffffe
     f9c:	sub	x11, x14, x13, lsl #1
     fa0:	sub	w10, w10, w13
     fa4:	sub	x14, x14, #0x2
     fa8:	mov	x15, x13
     fac:	ldrh	w16, [x14]
     fb0:	ldurh	w17, [x14, #-2]
     fb4:	subs	w16, w16, w9
     fb8:	csel	w16, wzr, w16, cc  // cc = lo, ul, last
     fbc:	subs	w17, w17, w9
     fc0:	csel	w17, wzr, w17, cc  // cc = lo, ul, last
     fc4:	strh	w16, [x14]
     fc8:	subs	x15, x15, #0x2
     fcc:	sturh	w17, [x14, #-2]
     fd0:	sub	x14, x14, #0x4
     fd4:	b.ne	fac <deflateParams+0x148>  // b.any
     fd8:	cmp	x12, x13
     fdc:	b.ne	1018 <deflateParams+0x1b4>  // b.any
     fe0:	b	1034 <deflateParams+0x1d0>
     fe4:	cmp	w8, #0x29a
     fe8:	b.eq	ee8 <deflateParams+0x84>  // b.none
     fec:	cmp	w8, #0x2a
     ff0:	b.ne	ea0 <deflateParams+0x3c>  // b.any
     ff4:	b	ee8 <deflateParams+0x84>
     ff8:	mov	w0, #0xfffffffb            	// #-5
     ffc:	b	ea4 <deflateParams+0x40>
    1000:	ldr	w8, [x21, #132]
    1004:	ldr	x0, [x21, #120]
    1008:	sub	w8, w8, #0x1
    100c:	strh	wzr, [x0, w8, uxtw #1]
    1010:	b	10b8 <deflateParams+0x254>
    1014:	mov	x11, x14
    1018:	sub	x11, x11, #0x2
    101c:	ldrh	w12, [x11]
    1020:	subs	w12, w12, w9
    1024:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    1028:	subs	w10, w10, #0x1
    102c:	strh	w12, [x11], #-2
    1030:	b.ne	101c <deflateParams+0x1b8>  // b.any
    1034:	ldr	x11, [x21, #112]
    1038:	subs	w10, w9, #0x1
    103c:	add	x14, x11, x9, lsl #1
    1040:	b.eq	1094 <deflateParams+0x230>  // b.none
    1044:	add	x12, x10, #0x1
    1048:	and	x13, x12, #0x1fffffffe
    104c:	sub	x11, x14, x13, lsl #1
    1050:	sub	w10, w9, w13
    1054:	sub	x14, x14, #0x2
    1058:	mov	x15, x13
    105c:	ldrh	w16, [x14]
    1060:	ldurh	w17, [x14, #-2]
    1064:	subs	w16, w16, w9
    1068:	csel	w16, wzr, w16, cc  // cc = lo, ul, last
    106c:	subs	w17, w17, w9
    1070:	csel	w17, wzr, w17, cc  // cc = lo, ul, last
    1074:	strh	w16, [x14]
    1078:	subs	x15, x15, #0x2
    107c:	sturh	w17, [x14, #-2]
    1080:	sub	x14, x14, #0x4
    1084:	b.ne	105c <deflateParams+0x1f8>  // b.any
    1088:	cmp	x12, x13
    108c:	b.ne	109c <deflateParams+0x238>  // b.any
    1090:	b	10b8 <deflateParams+0x254>
    1094:	mov	x11, x14
    1098:	mov	w10, w9
    109c:	sub	x11, x11, #0x2
    10a0:	ldrh	w12, [x11]
    10a4:	subs	w12, w12, w9
    10a8:	csel	w12, wzr, w12, cc  // cc = lo, ul, last
    10ac:	subs	w10, w10, #0x1
    10b0:	strh	w12, [x11], #-2
    10b4:	b.ne	10a0 <deflateParams+0x23c>  // b.any
    10b8:	lsl	x2, x8, #1
    10bc:	mov	w1, wzr
    10c0:	bl	0 <memset>
    10c4:	str	wzr, [x21, #5928]
    10c8:	adrp	x8, 0 <deflateInit_>
    10cc:	add	x8, x8, #0x0
    10d0:	add	x8, x8, w22, sxtw #4
    10d4:	ldrh	w9, [x8]
    10d8:	ldrh	w10, [x8, #4]
    10dc:	ldrh	w11, [x8, #2]
    10e0:	ldrh	w8, [x8, #6]
    10e4:	str	w22, [x21, #196]
    10e8:	stp	w9, w10, [x21, #204]
    10ec:	stp	w8, w11, [x21, #188]
    10f0:	mov	w0, wzr
    10f4:	str	w19, [x21, #200]
    10f8:	b	ea4 <deflateParams+0x40>

00000000000010fc <deflate>:
    10fc:	stp	x29, x30, [sp, #-96]!
    1100:	stp	x28, x27, [sp, #16]
    1104:	stp	x26, x25, [sp, #32]
    1108:	stp	x24, x23, [sp, #48]
    110c:	stp	x22, x21, [sp, #64]
    1110:	stp	x20, x19, [sp, #80]
    1114:	mov	x29, sp
    1118:	cbz	x0, 1180 <deflate+0x84>
    111c:	ldr	x8, [x0, #64]
    1120:	mov	x20, x0
    1124:	cbz	x8, 1180 <deflate+0x84>
    1128:	ldr	x8, [x20, #72]
    112c:	cbz	x8, 1180 <deflate+0x84>
    1130:	ldr	x19, [x20, #56]
    1134:	cbz	x19, 1180 <deflate+0x84>
    1138:	ldr	x8, [x19]
    113c:	cmp	x8, x20
    1140:	b.ne	1180 <deflate+0x84>  // b.any
    1144:	ldr	w9, [x19, #8]
    1148:	mov	w21, w1
    114c:	sub	w8, w9, #0x39
    1150:	cmp	w8, #0x38
    1154:	b.hi	11dc <deflate+0xe0>  // b.pmore
    1158:	mov	w10, #0x1                   	// #1
    115c:	lsl	x8, x10, x8
    1160:	mov	x10, #0x1001                	// #4097
    1164:	movk	x10, #0x1, lsl #16
    1168:	movk	x10, #0x4004, lsl #32
    116c:	movk	x10, #0x100, lsl #48
    1170:	tst	x8, x10
    1174:	b.eq	11dc <deflate+0xe0>  // b.none
    1178:	cmp	w21, #0x5
    117c:	b.ls	11a0 <deflate+0xa4>  // b.plast
    1180:	mov	w0, #0xfffffffe            	// #-2
    1184:	ldp	x20, x19, [sp, #80]
    1188:	ldp	x22, x21, [sp, #64]
    118c:	ldp	x24, x23, [sp, #48]
    1190:	ldp	x26, x25, [sp, #32]
    1194:	ldp	x28, x27, [sp, #16]
    1198:	ldp	x29, x30, [sp], #96
    119c:	ret
    11a0:	ldr	x8, [x20, #24]
    11a4:	cbz	x8, 11c8 <deflate+0xcc>
    11a8:	ldr	w8, [x20, #8]
    11ac:	cbz	w8, 11b8 <deflate+0xbc>
    11b0:	ldr	x10, [x20]
    11b4:	cbz	x10, 11c8 <deflate+0xcc>
    11b8:	cmp	w21, #0x4
    11bc:	b.eq	11f0 <deflate+0xf4>  // b.none
    11c0:	cmp	w9, #0x29a
    11c4:	b.ne	11f0 <deflate+0xf4>  // b.any
    11c8:	adrp	x8, 0 <z_errmsg>
    11cc:	ldr	x8, [x8]
    11d0:	mov	w0, #0xfffffffe            	// #-2
    11d4:	str	x8, [x20, #48]
    11d8:	b	1184 <deflate+0x88>
    11dc:	cmp	w9, #0x29a
    11e0:	b.eq	1178 <deflate+0x7c>  // b.none
    11e4:	cmp	w9, #0x2a
    11e8:	b.ne	1180 <deflate+0x84>  // b.any
    11ec:	b	1178 <deflate+0x7c>
    11f0:	ldr	w10, [x20, #32]
    11f4:	cbz	w10, 15e4 <deflate+0x4e8>
    11f8:	ldr	x11, [x19, #40]
    11fc:	ldr	w10, [x19, #76]
    1200:	str	w21, [x19, #76]
    1204:	cbz	x11, 128c <deflate+0x190>
    1208:	mov	x0, x19
    120c:	bl	0 <_tr_flush_bits>
    1210:	ldr	x8, [x19, #40]
    1214:	ldr	w9, [x20, #32]
    1218:	cmp	w9, w8
    121c:	csel	w23, w9, w8, cc  // cc = lo, ul, last
    1220:	cbz	w23, 1280 <deflate+0x184>
    1224:	ldr	x0, [x20, #24]
    1228:	ldr	x1, [x19, #32]
    122c:	mov	w22, w23
    1230:	mov	x2, x22
    1234:	bl	0 <memcpy>
    1238:	ldr	x8, [x20, #24]
    123c:	add	x8, x8, x22
    1240:	str	x8, [x20, #24]
    1244:	ldr	x8, [x19, #32]
    1248:	add	x8, x8, x22
    124c:	str	x8, [x19, #32]
    1250:	ldr	x8, [x20, #40]
    1254:	ldr	w9, [x20, #32]
    1258:	add	x8, x8, x22
    125c:	sub	w9, w9, w23
    1260:	str	x8, [x20, #40]
    1264:	str	w9, [x20, #32]
    1268:	ldr	x8, [x19, #40]
    126c:	subs	x8, x8, x22
    1270:	str	x8, [x19, #40]
    1274:	b.ne	1280 <deflate+0x184>  // b.any
    1278:	ldr	x10, [x19, #16]
    127c:	str	x10, [x19, #32]
    1280:	cbz	w9, 2770 <deflate+0x1674>
    1284:	ldr	w9, [x19, #8]
    1288:	b	1294 <deflate+0x198>
    128c:	cbz	w8, 15ac <deflate+0x4b0>
    1290:	mov	x8, xzr
    1294:	cmp	w9, #0x2a
    1298:	b.eq	12b0 <deflate+0x1b4>  // b.none
    129c:	cmp	w9, #0x29a
    12a0:	b.ne	1450 <deflate+0x354>  // b.any
    12a4:	ldr	w8, [x20, #8]
    12a8:	cbnz	w8, 15e4 <deflate+0x4e8>
    12ac:	b	1dc8 <deflate+0xccc>
    12b0:	ldr	w9, [x19, #200]
    12b4:	ldr	w10, [x19, #84]
    12b8:	mov	w11, #0xffff8800            	// #-30720
    12bc:	cmp	w9, #0x1
    12c0:	add	w9, w11, w10, lsl #12
    12c4:	b.gt	12d4 <deflate+0x1d8>
    12c8:	ldr	w10, [x19, #196]
    12cc:	cmp	w10, #0x2
    12d0:	b.ge	1670 <deflate+0x574>  // b.tcont
    12d4:	mov	w10, wzr
    12d8:	orr	w9, w10, w9
    12dc:	ldr	w10, [x19, #172]
    12e0:	add	x12, x8, #0x1
    12e4:	mov	w11, #0x1085                	// #4229
    12e8:	str	x12, [x19, #40]
    12ec:	ldr	x12, [x19, #16]
    12f0:	cmp	w10, #0x0
    12f4:	orr	w10, w9, #0x20
    12f8:	movk	w11, #0x842, lsl #16
    12fc:	csel	w9, w9, w10, eq  // eq = none
    1300:	umull	x10, w9, w11
    1304:	lsr	w11, w9, #8
    1308:	lsr	x10, x10, #32
    130c:	strb	w11, [x12, x8]
    1310:	sub	w8, w9, w10
    1314:	add	w8, w10, w8, lsr #1
    1318:	ldr	x12, [x19, #40]
    131c:	lsr	w8, w8, #4
    1320:	ldr	x11, [x19, #16]
    1324:	sub	w8, w8, w8, lsl #5
    1328:	add	w8, w9, w8
    132c:	orr	w8, w8, w9
    1330:	add	x10, x12, #0x1
    1334:	eor	w8, w8, #0x1f
    1338:	str	x10, [x19, #40]
    133c:	strb	w8, [x11, x12]
    1340:	ldr	w8, [x19, #172]
    1344:	cbz	w8, 13ac <deflate+0x2b0>
    1348:	ldr	x8, [x20, #96]
    134c:	ldr	x9, [x19, #40]
    1350:	ldr	x10, [x19, #16]
    1354:	lsr	x11, x8, #24
    1358:	add	x12, x9, #0x1
    135c:	str	x12, [x19, #40]
    1360:	strb	w11, [x10, x9]
    1364:	ldr	x9, [x19, #40]
    1368:	ldr	x10, [x19, #16]
    136c:	lsr	x8, x8, #16
    1370:	add	x11, x9, #0x1
    1374:	str	x11, [x19, #40]
    1378:	strb	w8, [x10, x9]
    137c:	ldr	x8, [x20, #96]
    1380:	ldr	x9, [x19, #40]
    1384:	ldr	x10, [x19, #16]
    1388:	ubfx	x11, x8, #8, #24
    138c:	add	x12, x9, #0x1
    1390:	str	x12, [x19, #40]
    1394:	strb	w11, [x10, x9]
    1398:	ldr	x9, [x19, #40]
    139c:	ldr	x10, [x19, #16]
    13a0:	add	x11, x9, #0x1
    13a4:	str	x11, [x19, #40]
    13a8:	strb	w8, [x10, x9]
    13ac:	mov	x0, xzr
    13b0:	mov	x1, xzr
    13b4:	mov	w2, wzr
    13b8:	bl	0 <adler32>
    13bc:	mov	w8, #0x71                  	// #113
    13c0:	str	x0, [x20, #96]
    13c4:	str	w8, [x19, #8]
    13c8:	ldr	x22, [x20, #56]
    13cc:	mov	x0, x22
    13d0:	bl	0 <_tr_flush_bits>
    13d4:	ldr	w8, [x22, #40]
    13d8:	ldr	w9, [x20, #32]
    13dc:	cmp	w9, w8
    13e0:	csel	w24, w9, w8, cc  // cc = lo, ul, last
    13e4:	cbz	w24, 1444 <deflate+0x348>
    13e8:	ldr	x0, [x20, #24]
    13ec:	ldr	x1, [x22, #32]
    13f0:	mov	w23, w24
    13f4:	mov	x2, x23
    13f8:	bl	0 <memcpy>
    13fc:	ldr	x8, [x20, #24]
    1400:	add	x8, x8, x23
    1404:	str	x8, [x20, #24]
    1408:	ldr	x8, [x22, #32]
    140c:	add	x8, x8, x23
    1410:	str	x8, [x22, #32]
    1414:	ldr	x8, [x20, #40]
    1418:	ldr	w9, [x20, #32]
    141c:	add	x8, x8, x23
    1420:	sub	w9, w9, w24
    1424:	str	x8, [x20, #40]
    1428:	str	w9, [x20, #32]
    142c:	ldr	x8, [x22, #40]
    1430:	subs	x8, x8, x23
    1434:	str	x8, [x22, #40]
    1438:	b.ne	1444 <deflate+0x348>  // b.any
    143c:	ldr	x8, [x22, #16]
    1440:	str	x8, [x22, #32]
    1444:	ldr	x8, [x19, #40]
    1448:	cbnz	x8, 2770 <deflate+0x1674>
    144c:	ldr	w9, [x19, #8]
    1450:	cmp	w9, #0x39
    1454:	b.ne	1808 <deflate+0x70c>  // b.any
    1458:	mov	x0, xzr
    145c:	mov	x1, xzr
    1460:	mov	w2, wzr
    1464:	bl	0 <crc32>
    1468:	str	x0, [x20, #96]
    146c:	ldr	x8, [x19, #40]
    1470:	ldr	x9, [x19, #16]
    1474:	add	x10, x8, #0x1
    1478:	str	x10, [x19, #40]
    147c:	mov	w10, #0x1f                  	// #31
    1480:	strb	w10, [x9, x8]
    1484:	ldr	x8, [x19, #40]
    1488:	ldr	x9, [x19, #16]
    148c:	add	x10, x8, #0x1
    1490:	str	x10, [x19, #40]
    1494:	mov	w10, #0x8b                  	// #139
    1498:	strb	w10, [x9, x8]
    149c:	ldr	x8, [x19, #40]
    14a0:	ldr	x9, [x19, #16]
    14a4:	add	x10, x8, #0x1
    14a8:	str	x10, [x19, #40]
    14ac:	mov	w10, #0x8                   	// #8
    14b0:	strb	w10, [x9, x8]
    14b4:	ldr	x8, [x19, #56]
    14b8:	cbz	x8, 15f8 <deflate+0x4fc>
    14bc:	ldr	w9, [x8]
    14c0:	ldr	w10, [x8, #68]
    14c4:	ldr	x13, [x19, #40]
    14c8:	ldr	x11, [x8, #24]
    14cc:	ldr	x12, [x8, #40]
    14d0:	ldr	x8, [x8, #56]
    14d4:	cmp	w9, #0x0
    14d8:	cset	w9, ne  // ne = any
    14dc:	cmp	w10, #0x0
    14e0:	add	x10, x13, #0x1
    14e4:	str	x10, [x19, #40]
    14e8:	cset	w10, ne  // ne = any
    14ec:	cmp	x11, #0x0
    14f0:	bfi	w9, w10, #1, #1
    14f4:	cset	w10, ne  // ne = any
    14f8:	cmp	x12, #0x0
    14fc:	bfi	w9, w10, #2, #1
    1500:	cset	w10, ne  // ne = any
    1504:	cmp	x8, #0x0
    1508:	ldr	x8, [x19, #16]
    150c:	bfi	w9, w10, #3, #1
    1510:	cset	w10, ne  // ne = any
    1514:	bfi	w9, w10, #4, #1
    1518:	strb	w9, [x8, x13]
    151c:	ldr	x8, [x19, #56]
    1520:	ldr	x9, [x19, #40]
    1524:	ldr	x10, [x19, #16]
    1528:	ldr	x8, [x8, #8]
    152c:	add	x11, x9, #0x1
    1530:	str	x11, [x19, #40]
    1534:	strb	w8, [x10, x9]
    1538:	ldr	x8, [x19, #56]
    153c:	ldr	x9, [x19, #40]
    1540:	ldr	x10, [x19, #16]
    1544:	ldr	x8, [x8, #8]
    1548:	add	x11, x9, #0x1
    154c:	str	x11, [x19, #40]
    1550:	lsr	x8, x8, #8
    1554:	strb	w8, [x10, x9]
    1558:	ldr	x8, [x19, #56]
    155c:	ldr	x9, [x19, #40]
    1560:	ldr	x10, [x19, #16]
    1564:	ldr	x8, [x8, #8]
    1568:	add	x11, x9, #0x1
    156c:	str	x11, [x19, #40]
    1570:	lsr	x8, x8, #16
    1574:	strb	w8, [x10, x9]
    1578:	ldr	x8, [x19, #56]
    157c:	ldr	x9, [x19, #40]
    1580:	ldr	x10, [x19, #16]
    1584:	ldr	x8, [x8, #8]
    1588:	add	x11, x9, #0x1
    158c:	str	x11, [x19, #40]
    1590:	lsr	x8, x8, #24
    1594:	strb	w8, [x10, x9]
    1598:	ldr	w8, [x19, #196]
    159c:	cmp	w8, #0x9
    15a0:	b.ne	1680 <deflate+0x584>  // b.any
    15a4:	mov	w8, #0x2                   	// #2
    15a8:	b	1694 <deflate+0x598>
    15ac:	cmp	w21, #0x4
    15b0:	mov	w8, #0x9                   	// #9
    15b4:	csel	w11, w8, wzr, gt
    15b8:	cmp	w10, #0x4
    15bc:	csel	w12, w8, wzr, gt
    15c0:	cmp	w21, #0x4
    15c4:	mov	x8, xzr
    15c8:	b.eq	1294 <deflate+0x198>  // b.none
    15cc:	lsl	w13, w21, #1
    15d0:	lsl	w10, w10, #1
    15d4:	sub	w11, w13, w11
    15d8:	sub	w10, w10, w12
    15dc:	cmp	w11, w10
    15e0:	b.gt	1294 <deflate+0x198>
    15e4:	adrp	x8, 0 <z_errmsg>
    15e8:	ldr	x8, [x8]
    15ec:	mov	w0, #0xfffffffb            	// #-5
    15f0:	str	x8, [x20, #48]
    15f4:	b	1184 <deflate+0x88>
    15f8:	ldr	x8, [x19, #40]
    15fc:	ldr	x9, [x19, #16]
    1600:	add	x10, x8, #0x1
    1604:	str	x10, [x19, #40]
    1608:	strb	wzr, [x9, x8]
    160c:	ldr	x8, [x19, #40]
    1610:	ldr	x9, [x19, #16]
    1614:	add	x10, x8, #0x1
    1618:	str	x10, [x19, #40]
    161c:	strb	wzr, [x9, x8]
    1620:	ldr	x8, [x19, #40]
    1624:	ldr	x9, [x19, #16]
    1628:	add	x10, x8, #0x1
    162c:	str	x10, [x19, #40]
    1630:	strb	wzr, [x9, x8]
    1634:	ldr	x8, [x19, #40]
    1638:	ldr	x9, [x19, #16]
    163c:	add	x10, x8, #0x1
    1640:	str	x10, [x19, #40]
    1644:	strb	wzr, [x9, x8]
    1648:	ldr	x8, [x19, #40]
    164c:	ldr	x9, [x19, #16]
    1650:	add	x10, x8, #0x1
    1654:	str	x10, [x19, #40]
    1658:	strb	wzr, [x9, x8]
    165c:	ldr	w8, [x19, #196]
    1660:	cmp	w8, #0x9
    1664:	b.ne	1738 <deflate+0x63c>  // b.any
    1668:	mov	w8, #0x2                   	// #2
    166c:	b	174c <deflate+0x650>
    1670:	cmp	w10, #0x6
    1674:	b.ge	1958 <deflate+0x85c>  // b.tcont
    1678:	mov	w10, #0x40                  	// #64
    167c:	b	12d8 <deflate+0x1dc>
    1680:	ldr	w9, [x19, #200]
    1684:	cmp	w9, #0x1
    1688:	ccmp	w8, #0x2, #0x8, le
    168c:	mov	w8, #0x4                   	// #4
    1690:	csel	w8, w8, wzr, lt  // lt = tstop
    1694:	ldr	x9, [x19, #40]
    1698:	ldr	x10, [x19, #16]
    169c:	add	x11, x9, #0x1
    16a0:	str	x11, [x19, #40]
    16a4:	strb	w8, [x10, x9]
    16a8:	ldr	x8, [x19, #56]
    16ac:	ldr	x9, [x19, #40]
    16b0:	ldr	x10, [x19, #16]
    16b4:	ldr	w8, [x8, #20]
    16b8:	add	x11, x9, #0x1
    16bc:	str	x11, [x19, #40]
    16c0:	strb	w8, [x10, x9]
    16c4:	ldr	x8, [x19, #56]
    16c8:	ldr	x9, [x8, #24]
    16cc:	cbz	x9, 170c <deflate+0x610>
    16d0:	ldr	x9, [x19, #40]
    16d4:	ldr	w8, [x8, #32]
    16d8:	ldr	x10, [x19, #16]
    16dc:	add	x11, x9, #0x1
    16e0:	str	x11, [x19, #40]
    16e4:	strb	w8, [x10, x9]
    16e8:	ldr	x8, [x19, #56]
    16ec:	ldr	x9, [x19, #40]
    16f0:	ldr	x10, [x19, #16]
    16f4:	ldr	w8, [x8, #32]
    16f8:	add	x11, x9, #0x1
    16fc:	str	x11, [x19, #40]
    1700:	lsr	w8, w8, #8
    1704:	strb	w8, [x10, x9]
    1708:	ldr	x8, [x19, #56]
    170c:	ldr	w8, [x8, #68]
    1710:	cbz	w8, 1728 <deflate+0x62c>
    1714:	ldr	x0, [x20, #96]
    1718:	ldr	x1, [x19, #16]
    171c:	ldr	w2, [x19, #40]
    1720:	bl	0 <crc32>
    1724:	str	x0, [x20, #96]
    1728:	mov	w8, #0x45                  	// #69
    172c:	str	xzr, [x19, #64]
    1730:	str	w8, [x19, #8]
    1734:	b	182c <deflate+0x730>
    1738:	ldr	w9, [x19, #200]
    173c:	cmp	w9, #0x1
    1740:	ccmp	w8, #0x2, #0x8, le
    1744:	mov	w8, #0x4                   	// #4
    1748:	csel	w8, w8, wzr, lt  // lt = tstop
    174c:	ldr	x9, [x19, #40]
    1750:	ldr	x10, [x19, #16]
    1754:	add	x11, x9, #0x1
    1758:	str	x11, [x19, #40]
    175c:	strb	w8, [x10, x9]
    1760:	ldr	x8, [x19, #40]
    1764:	ldr	x10, [x19, #16]
    1768:	mov	w9, #0x3                   	// #3
    176c:	mov	w11, #0x71                  	// #113
    1770:	add	x12, x8, #0x1
    1774:	str	x12, [x19, #40]
    1778:	strb	w9, [x10, x8]
    177c:	str	w11, [x19, #8]
    1780:	ldr	x22, [x20, #56]
    1784:	mov	x0, x22
    1788:	bl	0 <_tr_flush_bits>
    178c:	ldr	w8, [x22, #40]
    1790:	ldr	w9, [x20, #32]
    1794:	cmp	w9, w8
    1798:	csel	w24, w9, w8, cc  // cc = lo, ul, last
    179c:	cbz	w24, 17fc <deflate+0x700>
    17a0:	ldr	x0, [x20, #24]
    17a4:	ldr	x1, [x22, #32]
    17a8:	mov	w23, w24
    17ac:	mov	x2, x23
    17b0:	bl	0 <memcpy>
    17b4:	ldr	x8, [x20, #24]
    17b8:	add	x8, x8, x23
    17bc:	str	x8, [x20, #24]
    17c0:	ldr	x8, [x22, #32]
    17c4:	add	x8, x8, x23
    17c8:	str	x8, [x22, #32]
    17cc:	ldr	x8, [x20, #40]
    17d0:	ldr	w9, [x20, #32]
    17d4:	add	x8, x8, x23
    17d8:	sub	w9, w9, w24
    17dc:	str	x8, [x20, #40]
    17e0:	str	w9, [x20, #32]
    17e4:	ldr	x8, [x22, #40]
    17e8:	subs	x8, x8, x23
    17ec:	str	x8, [x22, #40]
    17f0:	b.ne	17fc <deflate+0x700>  // b.any
    17f4:	ldr	x8, [x22, #16]
    17f8:	str	x8, [x22, #32]
    17fc:	ldr	x8, [x19, #40]
    1800:	cbnz	x8, 2770 <deflate+0x1674>
    1804:	ldr	w9, [x19, #8]
    1808:	sub	w8, w9, #0x45
    180c:	cmp	w8, #0x22
    1810:	b.hi	1dc0 <deflate+0xcc4>  // b.pmore
    1814:	adrp	x9, 0 <deflateInit_>
    1818:	add	x9, x9, #0x0
    181c:	adr	x10, 182c <deflate+0x730>
    1820:	ldrh	w11, [x9, x8, lsl #1]
    1824:	add	x10, x10, x11, lsl #2
    1828:	br	x10
    182c:	ldr	x9, [x19, #56]
    1830:	ldr	x8, [x9, #24]
    1834:	cbz	x8, 19c8 <deflate+0x8cc>
    1838:	ldrh	w11, [x9, #32]
    183c:	ldr	x9, [x19, #64]
    1840:	ldr	x24, [x19, #40]
    1844:	ldr	x10, [x19, #24]
    1848:	sub	w22, w11, w9
    184c:	add	x11, x24, x22
    1850:	cmp	x11, x10
    1854:	b.ls	1978 <deflate+0x87c>  // b.plast
    1858:	ldr	x11, [x19, #16]
    185c:	sub	x25, x10, x24
    1860:	and	x23, x25, #0xffffffff
    1864:	add	x1, x8, x9
    1868:	add	x0, x11, x24
    186c:	mov	x2, x23
    1870:	bl	0 <memcpy>
    1874:	ldr	x8, [x19, #24]
    1878:	cmp	x8, x24
    187c:	str	x8, [x19, #40]
    1880:	b.ls	18a8 <deflate+0x7ac>  // b.plast
    1884:	ldr	x9, [x19, #56]
    1888:	ldr	w9, [x9, #68]
    188c:	cbz	w9, 18a8 <deflate+0x7ac>
    1890:	ldr	x9, [x19, #16]
    1894:	ldr	x0, [x20, #96]
    1898:	sub	w2, w8, w24
    189c:	add	x1, x9, x24
    18a0:	bl	0 <crc32>
    18a4:	str	x0, [x20, #96]
    18a8:	ldr	x8, [x19, #64]
    18ac:	add	x8, x8, x23
    18b0:	str	x8, [x19, #64]
    18b4:	ldr	x23, [x20, #56]
    18b8:	mov	x0, x23
    18bc:	bl	0 <_tr_flush_bits>
    18c0:	ldr	w8, [x23, #40]
    18c4:	ldr	w9, [x20, #32]
    18c8:	cmp	w9, w8
    18cc:	csel	w26, w9, w8, cc  // cc = lo, ul, last
    18d0:	cbz	w26, 1930 <deflate+0x834>
    18d4:	ldr	x0, [x20, #24]
    18d8:	ldr	x1, [x23, #32]
    18dc:	mov	w24, w26
    18e0:	mov	x2, x24
    18e4:	bl	0 <memcpy>
    18e8:	ldr	x8, [x20, #24]
    18ec:	add	x8, x8, x24
    18f0:	str	x8, [x20, #24]
    18f4:	ldr	x8, [x23, #32]
    18f8:	add	x8, x8, x24
    18fc:	str	x8, [x23, #32]
    1900:	ldr	x8, [x20, #40]
    1904:	ldr	w9, [x20, #32]
    1908:	add	x8, x8, x24
    190c:	sub	w9, w9, w26
    1910:	str	x8, [x20, #40]
    1914:	str	w9, [x20, #32]
    1918:	ldr	x8, [x23, #40]
    191c:	subs	x8, x8, x24
    1920:	str	x8, [x23, #40]
    1924:	b.ne	1930 <deflate+0x834>  // b.any
    1928:	ldr	x8, [x23, #16]
    192c:	str	x8, [x23, #32]
    1930:	ldr	x8, [x19, #40]
    1934:	cbnz	x8, 2770 <deflate+0x1674>
    1938:	ldr	x10, [x19, #24]
    193c:	sub	w22, w22, w25
    1940:	cmp	x10, w22, uxtw
    1944:	b.cs	1968 <deflate+0x86c>  // b.hs, b.nlast
    1948:	ldp	x8, x9, [x19, #56]
    194c:	mov	x24, xzr
    1950:	ldr	x8, [x8, #24]
    1954:	b	1858 <deflate+0x75c>
    1958:	mov	w10, #0xc0                  	// #192
    195c:	mov	w11, #0x80                  	// #128
    1960:	csel	w10, w11, w10, eq  // eq = none
    1964:	b	12d8 <deflate+0x1dc>
    1968:	ldp	x8, x9, [x19, #56]
    196c:	mov	x24, xzr
    1970:	mov	w22, w22
    1974:	ldr	x8, [x8, #24]
    1978:	ldr	x10, [x19, #16]
    197c:	add	x1, x8, x9
    1980:	mov	x2, x22
    1984:	add	x0, x10, x24
    1988:	bl	0 <memcpy>
    198c:	ldr	x8, [x19, #40]
    1990:	add	x8, x8, x22
    1994:	cmp	x8, x24
    1998:	str	x8, [x19, #40]
    199c:	b.ls	19c4 <deflate+0x8c8>  // b.plast
    19a0:	ldr	x9, [x19, #56]
    19a4:	ldr	w9, [x9, #68]
    19a8:	cbz	w9, 19c4 <deflate+0x8c8>
    19ac:	ldr	x9, [x19, #16]
    19b0:	ldr	x0, [x20, #96]
    19b4:	sub	w2, w8, w24
    19b8:	add	x1, x9, x24
    19bc:	bl	0 <crc32>
    19c0:	str	x0, [x20, #96]
    19c4:	str	xzr, [x19, #64]
    19c8:	mov	w8, #0x49                  	// #73
    19cc:	str	w8, [x19, #8]
    19d0:	ldr	x8, [x19, #56]
    19d4:	ldr	x8, [x8, #40]
    19d8:	cbz	x8, 1b08 <deflate+0xa0c>
    19dc:	ldr	x9, [x19, #40]
    19e0:	mov	x8, x9
    19e4:	ldr	x10, [x19, #24]
    19e8:	cmp	x9, x10
    19ec:	b.ne	1aa4 <deflate+0x9a8>  // b.any
    19f0:	cmp	x9, x8
    19f4:	b.ls	1a1c <deflate+0x920>  // b.plast
    19f8:	ldr	x10, [x19, #56]
    19fc:	ldr	w10, [x10, #68]
    1a00:	cbz	w10, 1a1c <deflate+0x920>
    1a04:	ldr	x10, [x19, #16]
    1a08:	ldr	x0, [x20, #96]
    1a0c:	sub	w2, w9, w8
    1a10:	add	x1, x10, x8
    1a14:	bl	0 <crc32>
    1a18:	str	x0, [x20, #96]
    1a1c:	ldr	x22, [x20, #56]
    1a20:	mov	x0, x22
    1a24:	bl	0 <_tr_flush_bits>
    1a28:	ldr	w8, [x22, #40]
    1a2c:	ldr	w9, [x20, #32]
    1a30:	cmp	w9, w8
    1a34:	csel	w24, w9, w8, cc  // cc = lo, ul, last
    1a38:	cbz	w24, 1a98 <deflate+0x99c>
    1a3c:	ldr	x0, [x20, #24]
    1a40:	ldr	x1, [x22, #32]
    1a44:	mov	w23, w24
    1a48:	mov	x2, x23
    1a4c:	bl	0 <memcpy>
    1a50:	ldr	x8, [x20, #24]
    1a54:	add	x8, x8, x23
    1a58:	str	x8, [x20, #24]
    1a5c:	ldr	x8, [x22, #32]
    1a60:	add	x8, x8, x23
    1a64:	str	x8, [x22, #32]
    1a68:	ldr	x8, [x20, #40]
    1a6c:	ldr	w9, [x20, #32]
    1a70:	add	x8, x8, x23
    1a74:	sub	w9, w9, w24
    1a78:	str	x8, [x20, #40]
    1a7c:	str	w9, [x20, #32]
    1a80:	ldr	x8, [x22, #40]
    1a84:	subs	x8, x8, x23
    1a88:	str	x8, [x22, #40]
    1a8c:	b.ne	1a98 <deflate+0x99c>  // b.any
    1a90:	ldr	x8, [x22, #16]
    1a94:	str	x8, [x22, #32]
    1a98:	ldr	x8, [x19, #40]
    1a9c:	cbnz	x8, 2770 <deflate+0x1674>
    1aa0:	mov	x9, xzr
    1aa4:	ldp	x10, x11, [x19, #56]
    1aa8:	ldr	x10, [x10, #40]
    1aac:	add	x12, x11, #0x1
    1ab0:	str	x12, [x19, #64]
    1ab4:	add	x12, x9, #0x1
    1ab8:	ldrb	w10, [x10, x11]
    1abc:	ldr	x11, [x19, #16]
    1ac0:	str	x12, [x19, #40]
    1ac4:	strb	w10, [x11, x9]
    1ac8:	cbz	w10, 1ad4 <deflate+0x9d8>
    1acc:	ldr	x9, [x19, #40]
    1ad0:	b	19e4 <deflate+0x8e8>
    1ad4:	ldr	x9, [x19, #56]
    1ad8:	ldr	w9, [x9, #68]
    1adc:	cbz	w9, 1b04 <deflate+0xa08>
    1ae0:	ldr	x9, [x19, #40]
    1ae4:	cmp	x9, x8
    1ae8:	b.ls	1b04 <deflate+0xa08>  // b.plast
    1aec:	ldr	x10, [x19, #16]
    1af0:	ldr	x0, [x20, #96]
    1af4:	sub	w2, w9, w8
    1af8:	add	x1, x10, x8
    1afc:	bl	0 <crc32>
    1b00:	str	x0, [x20, #96]
    1b04:	str	xzr, [x19, #64]
    1b08:	mov	w8, #0x5b                  	// #91
    1b0c:	str	w8, [x19, #8]
    1b10:	ldr	x8, [x19, #56]
    1b14:	ldr	x8, [x8, #56]
    1b18:	cbz	x8, 1c44 <deflate+0xb48>
    1b1c:	ldr	x9, [x19, #40]
    1b20:	mov	x8, x9
    1b24:	ldr	x10, [x19, #24]
    1b28:	cmp	x9, x10
    1b2c:	b.ne	1be4 <deflate+0xae8>  // b.any
    1b30:	cmp	x9, x8
    1b34:	b.ls	1b5c <deflate+0xa60>  // b.plast
    1b38:	ldr	x10, [x19, #56]
    1b3c:	ldr	w10, [x10, #68]
    1b40:	cbz	w10, 1b5c <deflate+0xa60>
    1b44:	ldr	x10, [x19, #16]
    1b48:	ldr	x0, [x20, #96]
    1b4c:	sub	w2, w9, w8
    1b50:	add	x1, x10, x8
    1b54:	bl	0 <crc32>
    1b58:	str	x0, [x20, #96]
    1b5c:	ldr	x22, [x20, #56]
    1b60:	mov	x0, x22
    1b64:	bl	0 <_tr_flush_bits>
    1b68:	ldr	w8, [x22, #40]
    1b6c:	ldr	w9, [x20, #32]
    1b70:	cmp	w9, w8
    1b74:	csel	w24, w9, w8, cc  // cc = lo, ul, last
    1b78:	cbz	w24, 1bd8 <deflate+0xadc>
    1b7c:	ldr	x0, [x20, #24]
    1b80:	ldr	x1, [x22, #32]
    1b84:	mov	w23, w24
    1b88:	mov	x2, x23
    1b8c:	bl	0 <memcpy>
    1b90:	ldr	x8, [x20, #24]
    1b94:	add	x8, x8, x23
    1b98:	str	x8, [x20, #24]
    1b9c:	ldr	x8, [x22, #32]
    1ba0:	add	x8, x8, x23
    1ba4:	str	x8, [x22, #32]
    1ba8:	ldr	x8, [x20, #40]
    1bac:	ldr	w9, [x20, #32]
    1bb0:	add	x8, x8, x23
    1bb4:	sub	w9, w9, w24
    1bb8:	str	x8, [x20, #40]
    1bbc:	str	w9, [x20, #32]
    1bc0:	ldr	x8, [x22, #40]
    1bc4:	subs	x8, x8, x23
    1bc8:	str	x8, [x22, #40]
    1bcc:	b.ne	1bd8 <deflate+0xadc>  // b.any
    1bd0:	ldr	x8, [x22, #16]
    1bd4:	str	x8, [x22, #32]
    1bd8:	ldr	x8, [x19, #40]
    1bdc:	cbnz	x8, 2770 <deflate+0x1674>
    1be0:	mov	x9, xzr
    1be4:	ldp	x10, x11, [x19, #56]
    1be8:	ldr	x10, [x10, #56]
    1bec:	add	x12, x11, #0x1
    1bf0:	str	x12, [x19, #64]
    1bf4:	add	x12, x9, #0x1
    1bf8:	ldrb	w10, [x10, x11]
    1bfc:	ldr	x11, [x19, #16]
    1c00:	str	x12, [x19, #40]
    1c04:	strb	w10, [x11, x9]
    1c08:	cbz	w10, 1c14 <deflate+0xb18>
    1c0c:	ldr	x9, [x19, #40]
    1c10:	b	1b24 <deflate+0xa28>
    1c14:	ldr	x9, [x19, #56]
    1c18:	ldr	w9, [x9, #68]
    1c1c:	cbz	w9, 1c44 <deflate+0xb48>
    1c20:	ldr	x9, [x19, #40]
    1c24:	cmp	x9, x8
    1c28:	b.ls	1c44 <deflate+0xb48>  // b.plast
    1c2c:	ldr	x10, [x19, #16]
    1c30:	ldr	x0, [x20, #96]
    1c34:	sub	w2, w9, w8
    1c38:	add	x1, x10, x8
    1c3c:	bl	0 <crc32>
    1c40:	str	x0, [x20, #96]
    1c44:	mov	w8, #0x67                  	// #103
    1c48:	str	w8, [x19, #8]
    1c4c:	ldr	x8, [x19, #56]
    1c50:	ldr	w8, [x8, #68]
    1c54:	cbz	w8, 1d34 <deflate+0xc38>
    1c58:	ldr	x8, [x19, #40]
    1c5c:	ldr	x9, [x19, #24]
    1c60:	add	x10, x8, #0x2
    1c64:	cmp	x10, x9
    1c68:	b.ls	1cf0 <deflate+0xbf4>  // b.plast
    1c6c:	ldr	x22, [x20, #56]
    1c70:	mov	x0, x22
    1c74:	bl	0 <_tr_flush_bits>
    1c78:	ldr	w8, [x22, #40]
    1c7c:	ldr	w9, [x20, #32]
    1c80:	cmp	w9, w8
    1c84:	csel	w24, w9, w8, cc  // cc = lo, ul, last
    1c88:	cbz	w24, 1ce8 <deflate+0xbec>
    1c8c:	ldr	x0, [x20, #24]
    1c90:	ldr	x1, [x22, #32]
    1c94:	mov	w23, w24
    1c98:	mov	x2, x23
    1c9c:	bl	0 <memcpy>
    1ca0:	ldr	x8, [x20, #24]
    1ca4:	add	x8, x8, x23
    1ca8:	str	x8, [x20, #24]
    1cac:	ldr	x8, [x22, #32]
    1cb0:	add	x8, x8, x23
    1cb4:	str	x8, [x22, #32]
    1cb8:	ldr	x8, [x20, #40]
    1cbc:	ldr	w9, [x20, #32]
    1cc0:	add	x8, x8, x23
    1cc4:	sub	w9, w9, w24
    1cc8:	str	x8, [x20, #40]
    1ccc:	str	w9, [x20, #32]
    1cd0:	ldr	x8, [x22, #40]
    1cd4:	subs	x8, x8, x23
    1cd8:	str	x8, [x22, #40]
    1cdc:	b.ne	1ce8 <deflate+0xbec>  // b.any
    1ce0:	ldr	x8, [x22, #16]
    1ce4:	str	x8, [x22, #32]
    1ce8:	ldr	x8, [x19, #40]
    1cec:	cbnz	x8, 2770 <deflate+0x1674>
    1cf0:	ldr	x9, [x20, #96]
    1cf4:	ldr	x10, [x19, #16]
    1cf8:	add	x11, x8, #0x1
    1cfc:	str	x11, [x19, #40]
    1d00:	mov	x0, xzr
    1d04:	strb	w9, [x10, x8]
    1d08:	ldr	x8, [x20, #96]
    1d0c:	ldr	x9, [x19, #40]
    1d10:	ldr	x10, [x19, #16]
    1d14:	mov	x1, xzr
    1d18:	lsr	x8, x8, #8
    1d1c:	add	x11, x9, #0x1
    1d20:	mov	w2, wzr
    1d24:	str	x11, [x19, #40]
    1d28:	strb	w8, [x10, x9]
    1d2c:	bl	0 <crc32>
    1d30:	str	x0, [x20, #96]
    1d34:	mov	w8, #0x71                  	// #113
    1d38:	str	w8, [x19, #8]
    1d3c:	ldr	x22, [x20, #56]
    1d40:	mov	x0, x22
    1d44:	bl	0 <_tr_flush_bits>
    1d48:	ldr	w8, [x22, #40]
    1d4c:	ldr	w9, [x20, #32]
    1d50:	cmp	w9, w8
    1d54:	csel	w24, w9, w8, cc  // cc = lo, ul, last
    1d58:	cbz	w24, 1db8 <deflate+0xcbc>
    1d5c:	ldr	x0, [x20, #24]
    1d60:	ldr	x1, [x22, #32]
    1d64:	mov	w23, w24
    1d68:	mov	x2, x23
    1d6c:	bl	0 <memcpy>
    1d70:	ldr	x8, [x20, #24]
    1d74:	add	x8, x8, x23
    1d78:	str	x8, [x20, #24]
    1d7c:	ldr	x8, [x22, #32]
    1d80:	add	x8, x8, x23
    1d84:	str	x8, [x22, #32]
    1d88:	ldr	x8, [x20, #40]
    1d8c:	ldr	w9, [x20, #32]
    1d90:	add	x8, x8, x23
    1d94:	sub	w9, w9, w24
    1d98:	str	x8, [x20, #40]
    1d9c:	str	w9, [x20, #32]
    1da0:	ldr	x8, [x22, #40]
    1da4:	subs	x8, x8, x23
    1da8:	str	x8, [x22, #40]
    1dac:	b.ne	1db8 <deflate+0xcbc>  // b.any
    1db0:	ldr	x8, [x22, #16]
    1db4:	str	x8, [x22, #32]
    1db8:	ldr	x8, [x19, #40]
    1dbc:	cbnz	x8, 2770 <deflate+0x1674>
    1dc0:	ldr	w8, [x20, #8]
    1dc4:	cbnz	w8, 1dd0 <deflate+0xcd4>
    1dc8:	ldr	w8, [x19, #180]
    1dcc:	cbz	w8, 1f9c <deflate+0xea0>
    1dd0:	ldrsw	x8, [x19, #196]
    1dd4:	cbz	w8, 1f50 <deflate+0xe54>
    1dd8:	ldr	w9, [x19, #200]
    1ddc:	cmp	w9, #0x3
    1de0:	b.eq	1fb0 <deflate+0xeb4>  // b.none
    1de4:	cmp	w9, #0x2
    1de8:	b.eq	1e18 <deflate+0xd1c>  // b.none
    1dec:	adrp	x9, 0 <deflateInit_>
    1df0:	add	x9, x9, #0x0
    1df4:	add	x8, x9, x8, lsl #4
    1df8:	ldr	x8, [x8, #8]
    1dfc:	mov	x0, x19
    1e00:	mov	w1, w21
    1e04:	blr	x8
    1e08:	b	1f5c <deflate+0xe60>
    1e0c:	ldr	x8, [x19]
    1e10:	ldr	w8, [x8, #32]
    1e14:	cbz	w8, 2760 <deflate+0x1664>
    1e18:	ldr	w8, [x19, #180]
    1e1c:	cbnz	w8, 1e30 <deflate+0xd34>
    1e20:	mov	x0, x19
    1e24:	bl	6d0 <fill_window>
    1e28:	ldr	w8, [x19, #180]
    1e2c:	cbz	w8, 22d8 <deflate+0x11dc>
    1e30:	ldr	x8, [x19, #96]
    1e34:	ldr	w9, [x19, #172]
    1e38:	ldr	x10, [x19, #5904]
    1e3c:	ldr	w11, [x19, #5900]
    1e40:	str	wzr, [x19, #160]
    1e44:	ldrb	w8, [x8, x9]
    1e48:	strh	wzr, [x10, x11, lsl #1]
    1e4c:	ldr	x9, [x19, #5888]
    1e50:	add	w10, w11, #0x1
    1e54:	str	w10, [x19, #5900]
    1e58:	add	x10, x19, x8, lsl #2
    1e5c:	strb	w8, [x9, x11]
    1e60:	ldrh	w8, [x10, #212]
    1e64:	add	w8, w8, #0x1
    1e68:	strh	w8, [x10, #212]
    1e6c:	ldr	w8, [x19, #5896]
    1e70:	ldr	w9, [x19, #180]
    1e74:	ldr	w10, [x19, #172]
    1e78:	ldr	w11, [x19, #5900]
    1e7c:	sub	w12, w8, #0x1
    1e80:	sub	w9, w9, #0x1
    1e84:	add	w8, w10, #0x1
    1e88:	cmp	w11, w12
    1e8c:	str	w9, [x19, #180]
    1e90:	str	w8, [x19, #172]
    1e94:	b.ne	1e18 <deflate+0xd1c>  // b.any
    1e98:	ldr	x9, [x19, #152]
    1e9c:	tbnz	x9, #63, 1eac <deflate+0xdb0>
    1ea0:	ldr	x10, [x19, #96]
    1ea4:	add	x1, x10, w9, uxtw
    1ea8:	b	1eb0 <deflate+0xdb4>
    1eac:	mov	x1, xzr
    1eb0:	mov	w8, w8
    1eb4:	sub	x2, x8, x9
    1eb8:	mov	x0, x19
    1ebc:	mov	w3, wzr
    1ec0:	bl	0 <_tr_flush_block>
    1ec4:	ldr	w8, [x19, #172]
    1ec8:	ldr	x24, [x19]
    1ecc:	str	x8, [x19, #152]
    1ed0:	ldr	x22, [x24, #56]
    1ed4:	mov	x0, x22
    1ed8:	bl	0 <_tr_flush_bits>
    1edc:	ldr	w8, [x22, #40]
    1ee0:	ldr	w9, [x24, #32]
    1ee4:	cmp	w9, w8
    1ee8:	csel	w25, w9, w8, cc  // cc = lo, ul, last
    1eec:	cbz	w25, 1e0c <deflate+0xd10>
    1ef0:	ldr	x0, [x24, #24]
    1ef4:	ldr	x1, [x22, #32]
    1ef8:	mov	w23, w25
    1efc:	mov	x2, x23
    1f00:	bl	0 <memcpy>
    1f04:	ldr	x8, [x24, #24]
    1f08:	add	x8, x8, x23
    1f0c:	str	x8, [x24, #24]
    1f10:	ldr	x8, [x22, #32]
    1f14:	add	x8, x8, x23
    1f18:	str	x8, [x22, #32]
    1f1c:	ldr	x8, [x24, #40]
    1f20:	ldr	w9, [x24, #32]
    1f24:	add	x8, x8, x23
    1f28:	sub	w9, w9, w25
    1f2c:	str	x8, [x24, #40]
    1f30:	str	w9, [x24, #32]
    1f34:	ldr	x8, [x22, #40]
    1f38:	subs	x8, x8, x23
    1f3c:	str	x8, [x22, #40]
    1f40:	b.ne	1e0c <deflate+0xd10>  // b.any
    1f44:	ldr	x8, [x22, #16]
    1f48:	str	x8, [x22, #32]
    1f4c:	b	1e0c <deflate+0xd10>
    1f50:	mov	x0, x19
    1f54:	mov	w1, w21
    1f58:	bl	2964 <deflate_stored>
    1f5c:	orr	w8, w0, #0x1
    1f60:	cmp	w8, #0x3
    1f64:	b.ne	1f70 <deflate+0xe74>  // b.any
    1f68:	mov	w8, #0x29a                 	// #666
    1f6c:	str	w8, [x19, #8]
    1f70:	tst	w0, #0xfffffffd
    1f74:	b.eq	2760 <deflate+0x1664>  // b.none
    1f78:	cmp	w0, #0x1
    1f7c:	b.ne	23c0 <deflate+0x12c4>  // b.any
    1f80:	cmp	w21, #0x5
    1f84:	b.eq	2340 <deflate+0x1244>  // b.none
    1f88:	mov	x0, x19
    1f8c:	cmp	w21, #0x1
    1f90:	b.ne	22f8 <deflate+0x11fc>  // b.any
    1f94:	bl	0 <_tr_align>
    1f98:	b	2340 <deflate+0x1244>
    1f9c:	cbz	w21, 23c0 <deflate+0x12c4>
    1fa0:	ldr	w8, [x19, #8]
    1fa4:	cmp	w8, #0x29a
    1fa8:	b.ne	1dd0 <deflate+0xcd4>  // b.any
    1fac:	b	23c0 <deflate+0x12c4>
    1fb0:	adrp	x25, 0 <_length_code>
    1fb4:	mov	w24, #0x1                   	// #1
    1fb8:	add	x25, x25, #0x0
    1fbc:	adrp	x26, 0 <_dist_code>
    1fc0:	b	1fd0 <deflate+0xed4>
    1fc4:	ldr	x8, [x19]
    1fc8:	ldr	w8, [x8, #32]
    1fcc:	cbz	w8, 2760 <deflate+0x1664>
    1fd0:	ldr	w8, [x19, #180]
    1fd4:	cmp	w8, #0x103
    1fd8:	b.cs	200c <deflate+0xf10>  // b.hs, b.nlast
    1fdc:	mov	x0, x19
    1fe0:	bl	6d0 <fill_window>
    1fe4:	ldr	w8, [x19, #180]
    1fe8:	cbnz	w21, 1ff4 <deflate+0xef8>
    1fec:	cmp	w8, #0x103
    1ff0:	b.cc	2760 <deflate+0x1664>  // b.lo, b.ul, b.last
    1ff4:	cbz	w8, 25b8 <deflate+0x14bc>
    1ff8:	cmp	w8, #0x2
    1ffc:	str	wzr, [x19, #160]
    2000:	b.hi	2010 <deflate+0xf14>  // b.pmore
    2004:	ldr	w9, [x19, #172]
    2008:	b	21c0 <deflate+0x10c4>
    200c:	str	wzr, [x19, #160]
    2010:	ldr	w9, [x19, #172]
    2014:	cbz	w9, 21c0 <deflate+0x10c4>
    2018:	ldr	x10, [x19, #96]
    201c:	add	x11, x10, x9
    2020:	ldurb	w12, [x11, #-1]
    2024:	ldrb	w10, [x11]
    2028:	cmp	w12, w10
    202c:	b.ne	21c0 <deflate+0x10c4>  // b.any
    2030:	ldrb	w10, [x11, #1]
    2034:	cmp	w12, w10
    2038:	b.ne	21c0 <deflate+0x10c4>  // b.any
    203c:	ldrb	w10, [x11, #2]
    2040:	cmp	w12, w10
    2044:	b.ne	21c0 <deflate+0x10c4>  // b.any
    2048:	mov	x13, xzr
    204c:	add	x10, x11, #0x102
    2050:	add	x14, x11, x13
    2054:	ldrb	w15, [x14, #3]
    2058:	cmp	w12, w15
    205c:	b.ne	20dc <deflate+0xfe0>  // b.any
    2060:	ldrb	w14, [x14, #4]
    2064:	cmp	w12, w14
    2068:	b.ne	20e4 <deflate+0xfe8>  // b.any
    206c:	add	x14, x11, x13
    2070:	ldrb	w15, [x14, #5]
    2074:	cmp	w12, w15
    2078:	b.ne	20f0 <deflate+0xff4>  // b.any
    207c:	ldrb	w14, [x14, #6]
    2080:	cmp	w12, w14
    2084:	b.ne	20f8 <deflate+0xffc>  // b.any
    2088:	add	x14, x11, x13
    208c:	ldrb	w15, [x14, #7]
    2090:	cmp	w12, w15
    2094:	b.ne	2104 <deflate+0x1008>  // b.any
    2098:	ldrb	w14, [x14, #8]
    209c:	cmp	w12, w14
    20a0:	b.ne	210c <deflate+0x1010>  // b.any
    20a4:	add	x14, x11, x13
    20a8:	ldrb	w15, [x14, #9]
    20ac:	cmp	w12, w15
    20b0:	b.ne	2118 <deflate+0x101c>  // b.any
    20b4:	add	x15, x13, #0x2
    20b8:	cmp	x15, #0xf9
    20bc:	add	x13, x13, #0x8
    20c0:	b.hi	20d0 <deflate+0xfd4>  // b.pmore
    20c4:	ldrb	w14, [x14, #10]
    20c8:	cmp	w12, w14
    20cc:	b.eq	2050 <deflate+0xf54>  // b.none
    20d0:	add	x11, x11, x13
    20d4:	add	x11, x11, #0x2
    20d8:	b	211c <deflate+0x1020>
    20dc:	add	x11, x14, #0x3
    20e0:	b	211c <deflate+0x1020>
    20e4:	add	x11, x11, x13
    20e8:	add	x11, x11, #0x4
    20ec:	b	211c <deflate+0x1020>
    20f0:	add	x11, x14, #0x5
    20f4:	b	211c <deflate+0x1020>
    20f8:	add	x11, x11, x13
    20fc:	add	x11, x11, #0x6
    2100:	b	211c <deflate+0x1020>
    2104:	add	x11, x14, #0x7
    2108:	b	211c <deflate+0x1020>
    210c:	add	x11, x11, x13
    2110:	add	x11, x11, #0x8
    2114:	b	211c <deflate+0x1020>
    2118:	add	x11, x14, #0x9
    211c:	sub	w10, w11, w10
    2120:	add	w10, w10, #0x102
    2124:	cmp	w10, w8
    2128:	csel	w10, w8, w10, hi  // hi = pmore
    212c:	subs	w8, w10, #0x3
    2130:	str	w10, [x19, #160]
    2134:	b.cc	21c0 <deflate+0x10c4>  // b.lo, b.ul, b.last
    2138:	ldr	x9, [x19, #5904]
    213c:	ldr	w10, [x19, #5900]
    2140:	strh	w24, [x9, x10, lsl #1]
    2144:	add	w9, w10, #0x1
    2148:	ldr	x11, [x19, #5888]
    214c:	str	w9, [x19, #5900]
    2150:	and	x9, x8, #0xff
    2154:	ldrb	w9, [x25, x9]
    2158:	strb	w8, [x11, x10]
    215c:	mov	w8, #0x400                 	// #1024
    2160:	ldrb	w10, [x26]
    2164:	bfi	x8, x9, #2, #8
    2168:	add	x8, x8, x19
    216c:	ldrh	w9, [x8, #216]
    2170:	add	x10, x19, x10, lsl #2
    2174:	add	w9, w9, #0x1
    2178:	strh	w9, [x8, #216]
    217c:	ldrh	w8, [x10, #2504]
    2180:	add	w8, w8, #0x1
    2184:	strh	w8, [x10, #2504]
    2188:	ldr	w8, [x19, #160]
    218c:	ldr	w9, [x19, #180]
    2190:	ldr	w10, [x19, #172]
    2194:	ldr	w11, [x19, #5896]
    2198:	str	wzr, [x19, #160]
    219c:	sub	w9, w9, w8
    21a0:	add	w8, w10, w8
    21a4:	ldr	w10, [x19, #5900]
    21a8:	sub	w11, w11, #0x1
    21ac:	str	w9, [x19, #180]
    21b0:	str	w8, [x19, #172]
    21b4:	cmp	w10, w11
    21b8:	b.ne	1fd0 <deflate+0xed4>  // b.any
    21bc:	b	2220 <deflate+0x1124>
    21c0:	ldr	x8, [x19, #96]
    21c4:	ldr	x10, [x19, #5904]
    21c8:	ldr	w11, [x19, #5900]
    21cc:	ldrb	w8, [x8, w9, uxtw]
    21d0:	strh	wzr, [x10, x11, lsl #1]
    21d4:	ldr	x9, [x19, #5888]
    21d8:	add	w10, w11, #0x1
    21dc:	str	w10, [x19, #5900]
    21e0:	add	x10, x19, x8, lsl #2
    21e4:	strb	w8, [x9, x11]
    21e8:	ldrh	w8, [x10, #212]
    21ec:	add	w8, w8, #0x1
    21f0:	strh	w8, [x10, #212]
    21f4:	ldr	w8, [x19, #5896]
    21f8:	ldr	w9, [x19, #180]
    21fc:	ldr	w10, [x19, #172]
    2200:	ldr	w11, [x19, #5900]
    2204:	sub	w12, w8, #0x1
    2208:	sub	w9, w9, #0x1
    220c:	add	w8, w10, #0x1
    2210:	cmp	w11, w12
    2214:	str	w9, [x19, #180]
    2218:	str	w8, [x19, #172]
    221c:	b.ne	1fd0 <deflate+0xed4>  // b.any
    2220:	ldr	x9, [x19, #152]
    2224:	tbnz	x9, #63, 2234 <deflate+0x1138>
    2228:	ldr	x10, [x19, #96]
    222c:	add	x1, x10, w9, uxtw
    2230:	b	2238 <deflate+0x113c>
    2234:	mov	x1, xzr
    2238:	mov	w8, w8
    223c:	sub	x2, x8, x9
    2240:	mov	x0, x19
    2244:	mov	w3, wzr
    2248:	bl	0 <_tr_flush_block>
    224c:	ldr	w8, [x19, #172]
    2250:	ldr	x27, [x19]
    2254:	str	x8, [x19, #152]
    2258:	ldr	x22, [x27, #56]
    225c:	mov	x0, x22
    2260:	bl	0 <_tr_flush_bits>
    2264:	ldr	w8, [x22, #40]
    2268:	ldr	w9, [x27, #32]
    226c:	cmp	w9, w8
    2270:	csel	w28, w9, w8, cc  // cc = lo, ul, last
    2274:	cbz	w28, 1fc4 <deflate+0xec8>
    2278:	ldr	x0, [x27, #24]
    227c:	ldr	x1, [x22, #32]
    2280:	mov	w23, w28
    2284:	mov	x2, x23
    2288:	bl	0 <memcpy>
    228c:	ldr	x8, [x27, #24]
    2290:	add	x8, x8, x23
    2294:	str	x8, [x27, #24]
    2298:	ldr	x8, [x22, #32]
    229c:	add	x8, x8, x23
    22a0:	str	x8, [x22, #32]
    22a4:	ldr	x8, [x27, #40]
    22a8:	ldr	w9, [x27, #32]
    22ac:	add	x8, x8, x23
    22b0:	sub	w9, w9, w28
    22b4:	str	x8, [x27, #40]
    22b8:	str	w9, [x27, #32]
    22bc:	ldr	x8, [x22, #40]
    22c0:	subs	x8, x8, x23
    22c4:	str	x8, [x22, #40]
    22c8:	b.ne	1fc4 <deflate+0xec8>  // b.any
    22cc:	ldr	x8, [x22, #16]
    22d0:	str	x8, [x22, #32]
    22d4:	b	1fc4 <deflate+0xec8>
    22d8:	cbz	w21, 2760 <deflate+0x1664>
    22dc:	cmp	w21, #0x4
    22e0:	str	wzr, [x19, #5932]
    22e4:	b.ne	26a4 <deflate+0x15a8>  // b.any
    22e8:	ldr	x8, [x19, #152]
    22ec:	tbz	x8, #63, 25cc <deflate+0x14d0>
    22f0:	mov	x1, xzr
    22f4:	b	25d4 <deflate+0x14d8>
    22f8:	mov	x1, xzr
    22fc:	mov	x2, xzr
    2300:	mov	w3, wzr
    2304:	bl	0 <_tr_stored_block>
    2308:	cmp	w21, #0x3
    230c:	b.ne	2340 <deflate+0x1244>  // b.any
    2310:	ldr	w8, [x19, #132]
    2314:	ldr	x0, [x19, #120]
    2318:	mov	w1, wzr
    231c:	sub	w8, w8, #0x1
    2320:	lsl	x2, x8, #1
    2324:	strh	wzr, [x0, x2]
    2328:	bl	0 <memset>
    232c:	ldr	w8, [x19, #180]
    2330:	cbnz	w8, 2340 <deflate+0x1244>
    2334:	str	wzr, [x19, #172]
    2338:	str	xzr, [x19, #152]
    233c:	str	wzr, [x19, #5932]
    2340:	ldr	x22, [x20, #56]
    2344:	mov	x0, x22
    2348:	bl	0 <_tr_flush_bits>
    234c:	ldr	w9, [x22, #40]
    2350:	ldr	w8, [x20, #32]
    2354:	cmp	w8, w9
    2358:	csel	w24, w8, w9, cc  // cc = lo, ul, last
    235c:	cbz	w24, 23bc <deflate+0x12c0>
    2360:	ldr	x0, [x20, #24]
    2364:	ldr	x1, [x22, #32]
    2368:	mov	w23, w24
    236c:	mov	x2, x23
    2370:	bl	0 <memcpy>
    2374:	ldr	x8, [x20, #24]
    2378:	add	x8, x8, x23
    237c:	str	x8, [x20, #24]
    2380:	ldr	x8, [x22, #32]
    2384:	add	x8, x8, x23
    2388:	str	x8, [x22, #32]
    238c:	ldr	x8, [x20, #40]
    2390:	ldr	w9, [x20, #32]
    2394:	add	x10, x8, x23
    2398:	sub	w8, w9, w24
    239c:	str	x10, [x20, #40]
    23a0:	str	w8, [x20, #32]
    23a4:	ldr	x9, [x22, #40]
    23a8:	subs	x9, x9, x23
    23ac:	str	x9, [x22, #40]
    23b0:	b.ne	23bc <deflate+0x12c0>  // b.any
    23b4:	ldr	x9, [x22, #16]
    23b8:	str	x9, [x22, #32]
    23bc:	cbz	w8, 2770 <deflate+0x1674>
    23c0:	cmp	w21, #0x4
    23c4:	b.ne	2768 <deflate+0x166c>  // b.any
    23c8:	ldr	w9, [x19, #48]
    23cc:	cmp	w9, #0x1
    23d0:	b.lt	24ac <deflate+0x13b0>  // b.tstop
    23d4:	ldr	x8, [x20, #96]
    23d8:	cmp	w9, #0x2
    23dc:	b.ne	24b4 <deflate+0x13b8>  // b.any
    23e0:	ldr	x9, [x19, #40]
    23e4:	ldr	x10, [x19, #16]
    23e8:	add	x11, x9, #0x1
    23ec:	str	x11, [x19, #40]
    23f0:	strb	w8, [x10, x9]
    23f4:	ldr	x8, [x20, #96]
    23f8:	ldr	x9, [x19, #40]
    23fc:	ldr	x10, [x19, #16]
    2400:	lsr	x8, x8, #8
    2404:	add	x11, x9, #0x1
    2408:	str	x11, [x19, #40]
    240c:	strb	w8, [x10, x9]
    2410:	ldr	x8, [x20, #96]
    2414:	ldr	x9, [x19, #40]
    2418:	ldr	x10, [x19, #16]
    241c:	lsr	x8, x8, #16
    2420:	add	x11, x9, #0x1
    2424:	str	x11, [x19, #40]
    2428:	strb	w8, [x10, x9]
    242c:	ldr	x8, [x20, #96]
    2430:	ldr	x9, [x19, #40]
    2434:	ldr	x10, [x19, #16]
    2438:	lsr	x8, x8, #24
    243c:	add	x11, x9, #0x1
    2440:	str	x11, [x19, #40]
    2444:	strb	w8, [x10, x9]
    2448:	ldr	x8, [x19, #40]
    244c:	ldr	x9, [x20, #16]
    2450:	ldr	x10, [x19, #16]
    2454:	add	x11, x8, #0x1
    2458:	str	x11, [x19, #40]
    245c:	strb	w9, [x10, x8]
    2460:	ldr	x8, [x20, #16]
    2464:	ldr	x9, [x19, #40]
    2468:	ldr	x10, [x19, #16]
    246c:	lsr	x8, x8, #8
    2470:	add	x11, x9, #0x1
    2474:	str	x11, [x19, #40]
    2478:	strb	w8, [x10, x9]
    247c:	ldr	x8, [x20, #16]
    2480:	ldr	x9, [x19, #40]
    2484:	ldr	x10, [x19, #16]
    2488:	lsr	x8, x8, #16
    248c:	add	x11, x9, #0x1
    2490:	str	x11, [x19, #40]
    2494:	strb	w8, [x10, x9]
    2498:	ldr	x8, [x20, #16]
    249c:	ldr	x9, [x19, #40]
    24a0:	ldr	x10, [x19, #16]
    24a4:	lsr	x8, x8, #24
    24a8:	b	2508 <deflate+0x140c>
    24ac:	mov	w0, #0x1                   	// #1
    24b0:	b	1184 <deflate+0x88>
    24b4:	ldr	x9, [x19, #40]
    24b8:	ldr	x10, [x19, #16]
    24bc:	lsr	x11, x8, #24
    24c0:	lsr	x8, x8, #16
    24c4:	add	x12, x9, #0x1
    24c8:	str	x12, [x19, #40]
    24cc:	strb	w11, [x10, x9]
    24d0:	ldr	x9, [x19, #40]
    24d4:	ldr	x10, [x19, #16]
    24d8:	add	x11, x9, #0x1
    24dc:	str	x11, [x19, #40]
    24e0:	strb	w8, [x10, x9]
    24e4:	ldr	x8, [x20, #96]
    24e8:	ldr	x9, [x19, #40]
    24ec:	ldr	x10, [x19, #16]
    24f0:	ubfx	x11, x8, #8, #24
    24f4:	add	x12, x9, #0x1
    24f8:	str	x12, [x19, #40]
    24fc:	strb	w11, [x10, x9]
    2500:	ldr	x9, [x19, #40]
    2504:	ldr	x10, [x19, #16]
    2508:	add	x11, x9, #0x1
    250c:	add	x9, x10, x9
    2510:	str	x11, [x19, #40]
    2514:	strb	w8, [x9]
    2518:	ldr	x21, [x20, #56]
    251c:	mov	x0, x21
    2520:	bl	0 <_tr_flush_bits>
    2524:	ldr	w8, [x21, #40]
    2528:	ldr	w9, [x20, #32]
    252c:	cmp	w9, w8
    2530:	csel	w23, w9, w8, cc  // cc = lo, ul, last
    2534:	cbz	w23, 2594 <deflate+0x1498>
    2538:	ldr	x0, [x20, #24]
    253c:	ldr	x1, [x21, #32]
    2540:	mov	w22, w23
    2544:	mov	x2, x22
    2548:	bl	0 <memcpy>
    254c:	ldr	x8, [x20, #24]
    2550:	add	x8, x8, x22
    2554:	str	x8, [x20, #24]
    2558:	ldr	x8, [x21, #32]
    255c:	add	x8, x8, x22
    2560:	str	x8, [x21, #32]
    2564:	ldr	x8, [x20, #40]
    2568:	ldr	w9, [x20, #32]
    256c:	add	x8, x8, x22
    2570:	sub	w9, w9, w23
    2574:	str	x8, [x20, #40]
    2578:	str	w9, [x20, #32]
    257c:	ldr	x8, [x21, #40]
    2580:	subs	x8, x8, x22
    2584:	str	x8, [x21, #40]
    2588:	b.ne	2594 <deflate+0x1498>  // b.any
    258c:	ldr	x8, [x21, #16]
    2590:	str	x8, [x21, #32]
    2594:	ldr	w8, [x19, #48]
    2598:	cmp	w8, #0x1
    259c:	b.lt	25a8 <deflate+0x14ac>  // b.tstop
    25a0:	neg	w8, w8
    25a4:	str	w8, [x19, #48]
    25a8:	ldr	x8, [x19, #40]
    25ac:	cmp	x8, #0x0
    25b0:	cset	w0, eq  // eq = none
    25b4:	b	1184 <deflate+0x88>
    25b8:	cmp	w21, #0x4
    25bc:	str	wzr, [x19, #5932]
    25c0:	b.ne	2688 <deflate+0x158c>  // b.any
    25c4:	ldr	x8, [x19, #152]
    25c8:	tbnz	x8, #63, 22f0 <deflate+0x11f4>
    25cc:	ldr	x9, [x19, #96]
    25d0:	add	x1, x9, w8, uxtw
    25d4:	ldr	w9, [x19, #172]
    25d8:	mov	w3, #0x1                   	// #1
    25dc:	mov	x0, x19
    25e0:	sub	x2, x9, x8
    25e4:	bl	0 <_tr_flush_block>
    25e8:	ldr	w8, [x19, #172]
    25ec:	ldr	x24, [x19]
    25f0:	str	x8, [x19, #152]
    25f4:	ldr	x22, [x24, #56]
    25f8:	mov	x0, x22
    25fc:	bl	0 <_tr_flush_bits>
    2600:	ldr	w8, [x22, #40]
    2604:	ldr	w9, [x24, #32]
    2608:	cmp	w9, w8
    260c:	csel	w25, w9, w8, cc  // cc = lo, ul, last
    2610:	cbz	w25, 2670 <deflate+0x1574>
    2614:	ldr	x0, [x24, #24]
    2618:	ldr	x1, [x22, #32]
    261c:	mov	w23, w25
    2620:	mov	x2, x23
    2624:	bl	0 <memcpy>
    2628:	ldr	x8, [x24, #24]
    262c:	add	x8, x8, x23
    2630:	str	x8, [x24, #24]
    2634:	ldr	x8, [x22, #32]
    2638:	add	x8, x8, x23
    263c:	str	x8, [x22, #32]
    2640:	ldr	x8, [x24, #40]
    2644:	ldr	w9, [x24, #32]
    2648:	add	x8, x8, x23
    264c:	sub	w9, w9, w25
    2650:	str	x8, [x24, #40]
    2654:	str	w9, [x24, #32]
    2658:	ldr	x8, [x22, #40]
    265c:	subs	x8, x8, x23
    2660:	str	x8, [x22, #40]
    2664:	b.ne	2670 <deflate+0x1574>  // b.any
    2668:	ldr	x8, [x22, #16]
    266c:	str	x8, [x22, #32]
    2670:	ldr	x8, [x19]
    2674:	ldr	w8, [x8, #32]
    2678:	cmp	w8, #0x0
    267c:	mov	w8, #0x2                   	// #2
    2680:	cinc	w0, w8, ne  // ne = any
    2684:	b	1f5c <deflate+0xe60>
    2688:	ldr	w8, [x19, #5900]
    268c:	cbz	w8, 1f80 <deflate+0xe84>
    2690:	ldr	x8, [x19, #152]
    2694:	tbnz	x8, #63, 26b4 <deflate+0x15b8>
    2698:	ldr	x9, [x19, #96]
    269c:	add	x1, x9, w8, uxtw
    26a0:	b	26b8 <deflate+0x15bc>
    26a4:	ldr	w8, [x19, #5900]
    26a8:	cbz	w8, 1f80 <deflate+0xe84>
    26ac:	ldr	x8, [x19, #152]
    26b0:	tbz	x8, #63, 2698 <deflate+0x159c>
    26b4:	mov	x1, xzr
    26b8:	ldr	w9, [x19, #172]
    26bc:	mov	x0, x19
    26c0:	mov	w3, wzr
    26c4:	sub	x2, x9, x8
    26c8:	bl	0 <_tr_flush_block>
    26cc:	ldr	w8, [x19, #172]
    26d0:	ldr	x24, [x19]
    26d4:	str	x8, [x19, #152]
    26d8:	ldr	x22, [x24, #56]
    26dc:	mov	x0, x22
    26e0:	bl	0 <_tr_flush_bits>
    26e4:	ldr	w8, [x22, #40]
    26e8:	ldr	w9, [x24, #32]
    26ec:	cmp	w9, w8
    26f0:	csel	w25, w9, w8, cc  // cc = lo, ul, last
    26f4:	cbz	w25, 2754 <deflate+0x1658>
    26f8:	ldr	x0, [x24, #24]
    26fc:	ldr	x1, [x22, #32]
    2700:	mov	w23, w25
    2704:	mov	x2, x23
    2708:	bl	0 <memcpy>
    270c:	ldr	x8, [x24, #24]
    2710:	add	x8, x8, x23
    2714:	str	x8, [x24, #24]
    2718:	ldr	x8, [x22, #32]
    271c:	add	x8, x8, x23
    2720:	str	x8, [x22, #32]
    2724:	ldr	x8, [x24, #40]
    2728:	ldr	w9, [x24, #32]
    272c:	add	x8, x8, x23
    2730:	sub	w9, w9, w25
    2734:	str	x8, [x24, #40]
    2738:	str	w9, [x24, #32]
    273c:	ldr	x8, [x22, #40]
    2740:	subs	x8, x8, x23
    2744:	str	x8, [x22, #40]
    2748:	b.ne	2754 <deflate+0x1658>  // b.any
    274c:	ldr	x8, [x22, #16]
    2750:	str	x8, [x22, #32]
    2754:	ldr	x8, [x19]
    2758:	ldr	w8, [x8, #32]
    275c:	cbnz	w8, 1f80 <deflate+0xe84>
    2760:	ldr	w8, [x20, #32]
    2764:	cbz	w8, 2770 <deflate+0x1674>
    2768:	mov	w0, wzr
    276c:	b	1184 <deflate+0x88>
    2770:	mov	w8, #0xffffffff            	// #-1
    2774:	mov	w0, wzr
    2778:	str	w8, [x19, #76]
    277c:	b	1184 <deflate+0x88>

0000000000002780 <deflateTune>:
    2780:	cbz	x0, 27a8 <deflateTune+0x28>
    2784:	ldr	x8, [x0, #64]
    2788:	cbz	x8, 27a8 <deflateTune+0x28>
    278c:	ldr	x8, [x0, #72]
    2790:	cbz	x8, 27a8 <deflateTune+0x28>
    2794:	ldr	x8, [x0, #56]
    2798:	cbz	x8, 27a8 <deflateTune+0x28>
    279c:	ldr	x9, [x8]
    27a0:	cmp	x9, x0
    27a4:	b.eq	27b0 <deflateTune+0x30>  // b.none
    27a8:	mov	w0, #0xfffffffe            	// #-2
    27ac:	ret
    27b0:	ldr	w9, [x8, #8]
    27b4:	sub	w10, w9, #0x39
    27b8:	cmp	w10, #0x38
    27bc:	b.hi	27f0 <deflateTune+0x70>  // b.pmore
    27c0:	mov	w11, #0x1                   	// #1
    27c4:	lsl	x10, x11, x10
    27c8:	mov	x11, #0x1001                	// #4097
    27cc:	movk	x11, #0x1, lsl #16
    27d0:	movk	x11, #0x4004, lsl #32
    27d4:	movk	x11, #0x100, lsl #48
    27d8:	tst	x10, x11
    27dc:	b.eq	27f0 <deflateTune+0x70>  // b.none
    27e0:	mov	w0, wzr
    27e4:	stp	w1, w3, [x8, #204]
    27e8:	stp	w4, w2, [x8, #188]
    27ec:	ret
    27f0:	cmp	w9, #0x29a
    27f4:	b.eq	27e0 <deflateTune+0x60>  // b.none
    27f8:	cmp	w9, #0x2a
    27fc:	b.ne	27a8 <deflateTune+0x28>  // b.any
    2800:	b	27e0 <deflateTune+0x60>

0000000000002804 <deflateBound>:
    2804:	add	x8, x1, #0x7
    2808:	add	x9, x1, x8, lsr #3
    280c:	add	x10, x1, #0x3f
    2810:	add	x9, x9, x10, lsr #6
    2814:	cbz	x0, 283c <deflateBound+0x38>
    2818:	ldr	x10, [x0, #64]
    281c:	cbz	x10, 283c <deflateBound+0x38>
    2820:	ldr	x10, [x0, #72]
    2824:	cbz	x10, 283c <deflateBound+0x38>
    2828:	ldr	x10, [x0, #56]
    282c:	cbz	x10, 283c <deflateBound+0x38>
    2830:	ldr	x11, [x10]
    2834:	cmp	x11, x0
    2838:	b.eq	2844 <deflateBound+0x40>  // b.none
    283c:	add	x0, x9, #0xb
    2840:	ret
    2844:	ldr	w11, [x10, #8]
    2848:	sub	w12, w11, #0x39
    284c:	cmp	w12, #0x38
    2850:	b.hi	28a4 <deflateBound+0xa0>  // b.pmore
    2854:	mov	w13, #0x1                   	// #1
    2858:	lsl	x12, x13, x12
    285c:	mov	x13, #0x1001                	// #4097
    2860:	movk	x13, #0x1, lsl #16
    2864:	movk	x13, #0x4004, lsl #32
    2868:	movk	x13, #0x100, lsl #48
    286c:	tst	x12, x13
    2870:	b.eq	28a4 <deflateBound+0xa0>  // b.none
    2874:	ldr	w11, [x10, #48]
    2878:	cbz	w11, 28b8 <deflateBound+0xb4>
    287c:	cmp	w11, #0x2
    2880:	b.eq	28c0 <deflateBound+0xbc>  // b.none
    2884:	cmp	w11, #0x1
    2888:	b.ne	28e0 <deflateBound+0xdc>  // b.any
    288c:	ldr	w11, [x10, #172]
    2890:	mov	w12, #0xa                   	// #10
    2894:	cmp	w11, #0x0
    2898:	mov	w11, #0x6                   	// #6
    289c:	csel	x11, x11, x12, eq  // eq = none
    28a0:	b	292c <deflateBound+0x128>
    28a4:	cmp	w11, #0x2a
    28a8:	b.eq	2874 <deflateBound+0x70>  // b.none
    28ac:	cmp	w11, #0x29a
    28b0:	b.ne	283c <deflateBound+0x38>  // b.any
    28b4:	b	2874 <deflateBound+0x70>
    28b8:	mov	x11, xzr
    28bc:	b	292c <deflateBound+0x128>
    28c0:	ldr	x11, [x10, #56]
    28c4:	cbz	x11, 28e8 <deflateBound+0xe4>
    28c8:	ldr	x12, [x11, #24]
    28cc:	cbz	x12, 28f0 <deflateBound+0xec>
    28d0:	ldr	w12, [x11, #32]
    28d4:	add	w12, w12, #0x2
    28d8:	add	x12, x12, #0x12
    28dc:	b	28f4 <deflateBound+0xf0>
    28e0:	mov	w11, #0x6                   	// #6
    28e4:	b	292c <deflateBound+0x128>
    28e8:	mov	w11, #0x12                  	// #18
    28ec:	b	292c <deflateBound+0x128>
    28f0:	mov	w12, #0x12                  	// #18
    28f4:	ldr	x13, [x11, #40]
    28f8:	cbz	x13, 2908 <deflateBound+0x104>
    28fc:	ldrb	w14, [x13], #1
    2900:	add	x12, x12, #0x1
    2904:	cbnz	w14, 28fc <deflateBound+0xf8>
    2908:	ldr	x13, [x11, #56]
    290c:	cbz	x13, 291c <deflateBound+0x118>
    2910:	ldrb	w14, [x13], #1
    2914:	add	x12, x12, #0x1
    2918:	cbnz	w14, 2910 <deflateBound+0x10c>
    291c:	ldr	w11, [x11, #68]
    2920:	add	x13, x12, #0x2
    2924:	cmp	w11, #0x0
    2928:	csel	x11, x12, x13, eq  // eq = none
    292c:	ldr	w12, [x10, #84]
    2930:	cmp	w12, #0xf
    2934:	b.ne	2958 <deflateBound+0x154>  // b.any
    2938:	ldr	w10, [x10, #136]
    293c:	cmp	w10, #0xf
    2940:	b.ne	2958 <deflateBound+0x154>  // b.any
    2944:	add	x8, x8, x1, lsr #12
    2948:	add	x8, x8, x1, lsr #14
    294c:	add	x8, x8, x1, lsr #25
    2950:	add	x0, x8, x11
    2954:	ret
    2958:	add	x8, x9, #0x5
    295c:	add	x0, x8, x11
    2960:	ret

0000000000002964 <deflate_stored>:
    2964:	sub	sp, sp, #0x70
    2968:	stp	x29, x30, [sp, #16]
    296c:	stp	x28, x27, [sp, #32]
    2970:	stp	x26, x25, [sp, #48]
    2974:	stp	x24, x23, [sp, #64]
    2978:	stp	x22, x21, [sp, #80]
    297c:	stp	x20, x19, [sp, #96]
    2980:	ldr	x8, [x0]
    2984:	ldr	x9, [x0, #24]
    2988:	ldr	w10, [x0, #80]
    298c:	add	x29, sp, #0x10
    2990:	ldr	w11, [x8, #8]
    2994:	sub	x9, x9, #0x5
    2998:	cmp	x9, x10
    299c:	mov	w20, w1
    29a0:	mov	x19, x0
    29a4:	csel	w26, w10, w9, hi  // hi = pmore
    29a8:	stur	w11, [x29, #-4]
    29ac:	b	2a10 <deflate_stored+0xac>
    29b0:	ldr	x0, [x25, #96]
    29b4:	mov	x1, x22
    29b8:	mov	w2, w24
    29bc:	bl	0 <crc32>
    29c0:	str	x0, [x25, #96]
    29c4:	ldr	x8, [x25]
    29c8:	ldr	x9, [x25, #16]
    29cc:	add	x8, x8, x23
    29d0:	add	x9, x9, x23
    29d4:	str	x8, [x25]
    29d8:	str	x9, [x25, #16]
    29dc:	ldr	x25, [x19]
    29e0:	ldr	x22, [x25, #24]
    29e4:	ldr	w9, [x25, #32]
    29e8:	ldr	x10, [x25, #40]
    29ec:	mov	w8, w28
    29f0:	add	x11, x22, x8
    29f4:	sub	w9, w9, w28
    29f8:	add	x8, x10, x8
    29fc:	str	x11, [x25, #24]
    2a00:	str	w9, [x25, #32]
    2a04:	str	x8, [x25, #40]
    2a08:	ldr	x8, [x19]
    2a0c:	cbnz	w21, 2c54 <deflate_stored+0x2f0>
    2a10:	ldr	w9, [x19, #5940]
    2a14:	ldr	w10, [x8, #32]
    2a18:	add	w9, w9, #0x2a
    2a1c:	asr	w9, w9, #3
    2a20:	subs	w10, w10, w9
    2a24:	b.cc	2c4c <deflate_stored+0x2e8>  // b.lo, b.ul, b.last
    2a28:	ldr	w9, [x19, #172]
    2a2c:	ldr	w11, [x19, #152]
    2a30:	ldr	w12, [x8, #8]
    2a34:	sub	w24, w9, w11
    2a38:	add	x11, x24, x12
    2a3c:	add	w9, w24, w12
    2a40:	mov	w12, #0xffff                	// #65535
    2a44:	cmp	x11, x12
    2a48:	csel	w11, w9, w12, cc  // cc = lo, ul, last
    2a4c:	cmp	w11, w10
    2a50:	csel	w28, w10, w11, hi  // hi = pmore
    2a54:	cmp	w28, w26
    2a58:	b.cs	2a84 <deflate_stored+0x120>  // b.hs, b.nlast
    2a5c:	cmp	w20, #0x4
    2a60:	cset	w10, ne  // ne = any
    2a64:	cmp	w28, #0x0
    2a68:	cset	w11, eq  // eq = none
    2a6c:	cmp	w28, w9
    2a70:	mov	w22, wzr
    2a74:	b.ne	2c58 <deflate_stored+0x2f4>  // b.any
    2a78:	cbz	w20, 2c58 <deflate_stored+0x2f4>
    2a7c:	and	w10, w10, w11
    2a80:	cbnz	w10, 2c58 <deflate_stored+0x2f4>
    2a84:	cmp	w20, #0x4
    2a88:	cset	w8, eq  // eq = none
    2a8c:	cmp	w28, w9
    2a90:	cset	w9, eq  // eq = none
    2a94:	and	w21, w8, w9
    2a98:	mov	x0, x19
    2a9c:	mov	x1, xzr
    2aa0:	mov	x2, xzr
    2aa4:	mov	w3, w21
    2aa8:	mov	w27, w20
    2aac:	bl	0 <_tr_stored_block>
    2ab0:	ldr	x8, [x19, #16]
    2ab4:	ldr	x9, [x19, #40]
    2ab8:	lsr	w10, w28, #8
    2abc:	add	x8, x9, x8
    2ac0:	sturb	w28, [x8, #-4]
    2ac4:	ldr	x8, [x19, #16]
    2ac8:	ldr	x9, [x19, #40]
    2acc:	add	x8, x9, x8
    2ad0:	sturb	w10, [x8, #-3]
    2ad4:	ldr	x8, [x19, #16]
    2ad8:	ldr	x9, [x19, #40]
    2adc:	mvn	w10, w28
    2ae0:	add	x8, x9, x8
    2ae4:	sturb	w10, [x8, #-2]
    2ae8:	ldr	x8, [x19, #16]
    2aec:	ldr	x9, [x19, #40]
    2af0:	lsr	w10, w10, #8
    2af4:	add	x8, x9, x8
    2af8:	sturb	w10, [x8, #-1]
    2afc:	ldr	x25, [x19]
    2b00:	ldr	x22, [x25, #56]
    2b04:	mov	x0, x22
    2b08:	bl	0 <_tr_flush_bits>
    2b0c:	ldr	w8, [x22, #40]
    2b10:	ldr	w9, [x25, #32]
    2b14:	cmp	w9, w8
    2b18:	csel	w20, w9, w8, cc  // cc = lo, ul, last
    2b1c:	cbz	w20, 2b74 <deflate_stored+0x210>
    2b20:	ldr	x0, [x25, #24]
    2b24:	ldr	x1, [x22, #32]
    2b28:	mov	w23, w20
    2b2c:	mov	x2, x23
    2b30:	bl	0 <memcpy>
    2b34:	ldr	x8, [x25, #24]
    2b38:	add	x8, x8, x23
    2b3c:	str	x8, [x25, #24]
    2b40:	ldr	x8, [x22, #32]
    2b44:	add	x8, x8, x23
    2b48:	str	x8, [x22, #32]
    2b4c:	ldr	x8, [x25, #40]
    2b50:	ldr	w9, [x25, #32]
    2b54:	add	x8, x8, x23
    2b58:	sub	w9, w9, w20
    2b5c:	str	x8, [x25, #40]
    2b60:	str	w9, [x25, #32]
    2b64:	ldr	x8, [x22, #40]
    2b68:	subs	x8, x8, x23
    2b6c:	str	x8, [x22, #40]
    2b70:	b.eq	2c3c <deflate_stored+0x2d8>  // b.none
    2b74:	cbz	w24, 2bd4 <deflate_stored+0x270>
    2b78:	ldr	x8, [x19]
    2b7c:	ldr	x9, [x19, #96]
    2b80:	ldr	x10, [x19, #152]
    2b84:	cmp	w24, w28
    2b88:	ldr	x0, [x8, #24]
    2b8c:	csel	w22, w28, w24, hi  // hi = pmore
    2b90:	add	x1, x9, x10
    2b94:	mov	x2, x22
    2b98:	bl	0 <memcpy>
    2b9c:	ldr	x8, [x19]
    2ba0:	sub	w28, w28, w22
    2ba4:	ldr	x9, [x8, #24]
    2ba8:	ldr	w10, [x8, #32]
    2bac:	ldr	x11, [x8, #40]
    2bb0:	add	x9, x9, x22
    2bb4:	sub	w10, w10, w22
    2bb8:	add	x11, x11, x22
    2bbc:	str	x9, [x8, #24]
    2bc0:	str	w10, [x8, #32]
    2bc4:	str	x11, [x8, #40]
    2bc8:	ldr	x8, [x19, #152]
    2bcc:	add	x8, x8, x22
    2bd0:	str	x8, [x19, #152]
    2bd4:	mov	w20, w27
    2bd8:	cbz	w28, 2a08 <deflate_stored+0xa4>
    2bdc:	ldr	x25, [x19]
    2be0:	ldr	w8, [x25, #8]
    2be4:	ldr	x22, [x25, #24]
    2be8:	cmp	w8, w28
    2bec:	csel	w24, w28, w8, hi  // hi = pmore
    2bf0:	cbz	w24, 29e4 <deflate_stored+0x80>
    2bf4:	ldr	x1, [x25]
    2bf8:	mov	w23, w24
    2bfc:	sub	w8, w8, w24
    2c00:	mov	x0, x22
    2c04:	mov	x2, x23
    2c08:	str	w8, [x25, #8]
    2c0c:	bl	0 <memcpy>
    2c10:	ldr	x8, [x25, #56]
    2c14:	ldr	w8, [x8, #48]
    2c18:	cmp	w8, #0x2
    2c1c:	b.eq	29b0 <deflate_stored+0x4c>  // b.none
    2c20:	cmp	w8, #0x1
    2c24:	b.ne	29c4 <deflate_stored+0x60>  // b.any
    2c28:	ldr	x0, [x25, #96]
    2c2c:	mov	x1, x22
    2c30:	mov	w2, w24
    2c34:	bl	0 <adler32>
    2c38:	b	29c0 <deflate_stored+0x5c>
    2c3c:	ldr	x8, [x22, #16]
    2c40:	str	x8, [x22, #32]
    2c44:	cbnz	w24, 2b78 <deflate_stored+0x214>
    2c48:	b	2bd4 <deflate_stored+0x270>
    2c4c:	mov	w22, wzr
    2c50:	b	2c58 <deflate_stored+0x2f4>
    2c54:	mov	w22, #0x1                   	// #1
    2c58:	ldr	w9, [x8, #8]
    2c5c:	ldur	w10, [x29, #-4]
    2c60:	subs	w23, w10, w9
    2c64:	b.eq	2cec <deflate_stored+0x388>  // b.none
    2c68:	ldr	w2, [x19, #80]
    2c6c:	cmp	w23, w2
    2c70:	b.cs	2cf8 <deflate_stored+0x394>  // b.hs, b.nlast
    2c74:	ldr	x9, [x19, #104]
    2c78:	ldr	w8, [x19, #172]
    2c7c:	mov	w21, w23
    2c80:	sub	x9, x9, x8
    2c84:	cmp	x9, x21
    2c88:	b.hi	2cb8 <deflate_stored+0x354>  // b.pmore
    2c8c:	ldr	x0, [x19, #96]
    2c90:	sub	w8, w8, w2
    2c94:	str	w8, [x19, #172]
    2c98:	add	x1, x0, x2
    2c9c:	mov	x2, x8
    2ca0:	bl	0 <memcpy>
    2ca4:	ldr	w8, [x19, #5928]
    2ca8:	cmp	w8, #0x1
    2cac:	b.hi	2cb8 <deflate_stored+0x354>  // b.pmore
    2cb0:	add	w8, w8, #0x1
    2cb4:	str	w8, [x19, #5928]
    2cb8:	ldr	x8, [x19]
    2cbc:	ldr	x9, [x19, #96]
    2cc0:	ldr	w10, [x19, #172]
    2cc4:	mov	x2, x21
    2cc8:	ldr	x8, [x8]
    2ccc:	add	x0, x9, x10
    2cd0:	sub	x1, x8, x21
    2cd4:	bl	0 <memcpy>
    2cd8:	ldr	w8, [x19, #172]
    2cdc:	ldr	w9, [x19, #80]
    2ce0:	add	w8, w8, w23
    2ce4:	str	w8, [x19, #172]
    2ce8:	b	2d1c <deflate_stored+0x3b8>
    2cec:	ldr	w10, [x19, #172]
    2cf0:	mov	w8, w10
    2cf4:	b	2d3c <deflate_stored+0x3d8>
    2cf8:	mov	w9, #0x2                   	// #2
    2cfc:	str	w9, [x19, #5928]
    2d00:	ldr	x8, [x8]
    2d04:	ldr	x0, [x19, #96]
    2d08:	sub	x1, x8, x2
    2d0c:	bl	0 <memcpy>
    2d10:	ldr	w9, [x19, #80]
    2d14:	str	w9, [x19, #172]
    2d18:	mov	w8, w9
    2d1c:	ldr	w11, [x19, #5932]
    2d20:	mov	w10, w8
    2d24:	str	x10, [x19, #152]
    2d28:	sub	w9, w9, w11
    2d2c:	cmp	w23, w9
    2d30:	csel	w9, w9, w23, hi  // hi = pmore
    2d34:	add	w9, w9, w11
    2d38:	str	w9, [x19, #5932]
    2d3c:	ldr	x9, [x19, #5944]
    2d40:	cmp	x9, x10
    2d44:	b.cs	2d4c <deflate_stored+0x3e8>  // b.hs, b.nlast
    2d48:	str	x10, [x19, #5944]
    2d4c:	cbz	w22, 2d74 <deflate_stored+0x410>
    2d50:	mov	w0, #0x3                   	// #3
    2d54:	ldp	x20, x19, [sp, #96]
    2d58:	ldp	x22, x21, [sp, #80]
    2d5c:	ldp	x24, x23, [sp, #64]
    2d60:	ldp	x26, x25, [sp, #48]
    2d64:	ldp	x28, x27, [sp, #32]
    2d68:	ldp	x29, x30, [sp, #16]
    2d6c:	add	sp, sp, #0x70
    2d70:	ret
    2d74:	ldr	x24, [x19]
    2d78:	tst	w20, #0xfffffffb
    2d7c:	ldr	w9, [x24, #8]
    2d80:	b.eq	2d9c <deflate_stored+0x438>  // b.none
    2d84:	cbnz	w9, 2d9c <deflate_stored+0x438>
    2d88:	ldr	x9, [x19, #152]
    2d8c:	cmp	x9, x10
    2d90:	b.ne	2e00 <deflate_stored+0x49c>  // b.any
    2d94:	mov	w0, #0x1                   	// #1
    2d98:	b	2d54 <deflate_stored+0x3f0>
    2d9c:	ldr	w10, [x19, #104]
    2da0:	mvn	w11, w8
    2da4:	add	w21, w10, w11
    2da8:	cmp	w9, w21
    2dac:	b.ls	2e10 <deflate_stored+0x4ac>  // b.plast
    2db0:	ldr	x11, [x19, #152]
    2db4:	ldr	w10, [x19, #80]
    2db8:	subs	x11, x11, x10
    2dbc:	b.lt	2e10 <deflate_stored+0x4ac>  // b.tstop
    2dc0:	ldr	x0, [x19, #96]
    2dc4:	sub	w2, w8, w10
    2dc8:	str	x11, [x19, #152]
    2dcc:	str	w2, [x19, #172]
    2dd0:	add	x1, x0, x10
    2dd4:	bl	0 <memcpy>
    2dd8:	ldr	w8, [x19, #5928]
    2ddc:	cmp	w8, #0x1
    2de0:	b.hi	2dec <deflate_stored+0x488>  // b.pmore
    2de4:	add	w8, w8, #0x1
    2de8:	str	w8, [x19, #5928]
    2dec:	ldr	x24, [x19]
    2df0:	ldr	w8, [x19, #80]
    2df4:	ldr	w9, [x24, #8]
    2df8:	add	w21, w8, w21
    2dfc:	b	2e10 <deflate_stored+0x4ac>
    2e00:	ldr	w10, [x19, #104]
    2e04:	mvn	w8, w8
    2e08:	mov	w9, wzr
    2e0c:	add	w21, w10, w8
    2e10:	cmp	w21, w9
    2e14:	csel	w21, w9, w21, hi  // hi = pmore
    2e18:	cbz	w21, 2e70 <deflate_stored+0x50c>
    2e1c:	ldr	x8, [x19, #96]
    2e20:	ldr	w10, [x19, #172]
    2e24:	ldr	x1, [x24]
    2e28:	mov	w22, w21
    2e2c:	sub	w9, w9, w21
    2e30:	add	x23, x8, x10
    2e34:	mov	x0, x23
    2e38:	mov	x2, x22
    2e3c:	str	w9, [x24, #8]
    2e40:	bl	0 <memcpy>
    2e44:	ldr	x8, [x24, #56]
    2e48:	ldr	w8, [x8, #48]
    2e4c:	cmp	w8, #0x2
    2e50:	b.eq	2e78 <deflate_stored+0x514>  // b.none
    2e54:	cmp	w8, #0x1
    2e58:	b.ne	2e8c <deflate_stored+0x528>  // b.any
    2e5c:	ldr	x0, [x24, #96]
    2e60:	mov	x1, x23
    2e64:	mov	w2, w21
    2e68:	bl	0 <adler32>
    2e6c:	b	2e88 <deflate_stored+0x524>
    2e70:	ldr	w8, [x19, #172]
    2e74:	b	2eb0 <deflate_stored+0x54c>
    2e78:	ldr	x0, [x24, #96]
    2e7c:	mov	x1, x23
    2e80:	mov	w2, w21
    2e84:	bl	0 <crc32>
    2e88:	str	x0, [x24, #96]
    2e8c:	ldr	x8, [x24]
    2e90:	ldr	x9, [x24, #16]
    2e94:	add	x8, x8, x22
    2e98:	add	x9, x9, x22
    2e9c:	str	x8, [x24]
    2ea0:	str	x9, [x24, #16]
    2ea4:	ldr	w8, [x19, #172]
    2ea8:	add	w8, w8, w21
    2eac:	str	w8, [x19, #172]
    2eb0:	ldr	x9, [x19, #5944]
    2eb4:	mov	w10, w8
    2eb8:	cmp	x9, x10
    2ebc:	b.cs	2ec4 <deflate_stored+0x560>  // b.hs, b.nlast
    2ec0:	str	x10, [x19, #5944]
    2ec4:	ldr	w9, [x19, #5940]
    2ec8:	ldr	x11, [x19, #24]
    2ecc:	ldr	w13, [x19, #80]
    2ed0:	mov	w12, #0xffff                	// #65535
    2ed4:	add	w9, w9, #0x2a
    2ed8:	asr	w9, w9, #3
    2edc:	ldr	x8, [x19, #152]
    2ee0:	sub	x9, x11, x9
    2ee4:	cmp	x9, x12
    2ee8:	csel	w9, w9, w12, cc  // cc = lo, ul, last
    2eec:	cmp	w13, w9
    2ef0:	csel	w11, w13, w9, cc  // cc = lo, ul, last
    2ef4:	sub	w10, w10, w8
    2ef8:	cmp	w10, w11
    2efc:	b.cs	2f38 <deflate_stored+0x5d4>  // b.hs, b.nlast
    2f00:	cmp	w20, #0x4
    2f04:	cset	w11, eq  // eq = none
    2f08:	cmp	w10, #0x0
    2f0c:	mov	w0, wzr
    2f10:	cset	w12, ne  // ne = any
    2f14:	cbz	w20, 2d54 <deflate_stored+0x3f0>
    2f18:	orr	w11, w11, w12
    2f1c:	cbz	w11, 2d54 <deflate_stored+0x3f0>
    2f20:	cmp	w10, w9
    2f24:	mov	w0, wzr
    2f28:	b.hi	2d54 <deflate_stored+0x3f0>  // b.pmore
    2f2c:	ldr	x11, [x19]
    2f30:	ldr	w11, [x11, #8]
    2f34:	cbnz	w11, 2d54 <deflate_stored+0x3f0>
    2f38:	cmp	w10, w9
    2f3c:	csel	w11, w9, w10, hi  // hi = pmore
    2f40:	cmp	w20, #0x4
    2f44:	b.ne	2f68 <deflate_stored+0x604>  // b.any
    2f48:	ldr	x12, [x19]
    2f4c:	ldr	w12, [x12, #8]
    2f50:	cmp	w12, #0x0
    2f54:	cset	w12, eq  // eq = none
    2f58:	cmp	w10, w9
    2f5c:	cset	w9, ls  // ls = plast
    2f60:	and	w20, w9, w12
    2f64:	b	2f6c <deflate_stored+0x608>
    2f68:	mov	w20, wzr
    2f6c:	ldr	x9, [x19, #96]
    2f70:	mov	w21, w11
    2f74:	mov	x0, x19
    2f78:	mov	x2, x21
    2f7c:	add	x1, x9, x8
    2f80:	mov	w3, w20
    2f84:	bl	0 <_tr_stored_block>
    2f88:	ldr	x8, [x19, #152]
    2f8c:	ldr	x22, [x19]
    2f90:	add	x8, x8, x21
    2f94:	str	x8, [x19, #152]
    2f98:	ldr	x19, [x22, #56]
    2f9c:	mov	x0, x19
    2fa0:	bl	0 <_tr_flush_bits>
    2fa4:	ldr	w8, [x19, #40]
    2fa8:	ldr	w9, [x22, #32]
    2fac:	cmp	w9, w8
    2fb0:	csel	w23, w9, w8, cc  // cc = lo, ul, last
    2fb4:	cbz	w23, 300c <deflate_stored+0x6a8>
    2fb8:	ldr	x0, [x22, #24]
    2fbc:	ldr	x1, [x19, #32]
    2fc0:	mov	w21, w23
    2fc4:	mov	x2, x21
    2fc8:	bl	0 <memcpy>
    2fcc:	ldr	x8, [x22, #24]
    2fd0:	add	x8, x8, x21
    2fd4:	str	x8, [x22, #24]
    2fd8:	ldr	x8, [x19, #32]
    2fdc:	add	x8, x8, x21
    2fe0:	str	x8, [x19, #32]
    2fe4:	ldr	x8, [x22, #40]
    2fe8:	ldr	w9, [x22, #32]
    2fec:	add	x8, x8, x21
    2ff0:	sub	w9, w9, w23
    2ff4:	str	x8, [x22, #40]
    2ff8:	str	w9, [x22, #32]
    2ffc:	ldr	x8, [x19, #40]
    3000:	subs	x8, x8, x21
    3004:	str	x8, [x19, #40]
    3008:	b.eq	3018 <deflate_stored+0x6b4>  // b.none
    300c:	cbz	w20, 3024 <deflate_stored+0x6c0>
    3010:	mov	w0, #0x2                   	// #2
    3014:	b	2d54 <deflate_stored+0x3f0>
    3018:	ldr	x8, [x19, #16]
    301c:	str	x8, [x19, #32]
    3020:	tbnz	w20, #0, 3010 <deflate_stored+0x6ac>
    3024:	mov	w0, wzr
    3028:	b	2d54 <deflate_stored+0x3f0>

000000000000302c <deflateCopy>:
    302c:	stp	x29, x30, [sp, #-48]!
    3030:	stp	x22, x21, [sp, #16]
    3034:	stp	x20, x19, [sp, #32]
    3038:	mov	x29, sp
    303c:	cbz	x1, 3064 <deflateCopy+0x38>
    3040:	ldr	x8, [x1, #64]
    3044:	cbz	x8, 3064 <deflateCopy+0x38>
    3048:	ldr	x8, [x1, #72]
    304c:	cbz	x8, 3064 <deflateCopy+0x38>
    3050:	ldr	x19, [x1, #56]
    3054:	cbz	x19, 3064 <deflateCopy+0x38>
    3058:	ldr	x8, [x19]
    305c:	cmp	x8, x1
    3060:	b.eq	3078 <deflateCopy+0x4c>  // b.none
    3064:	mov	w0, #0xfffffffe            	// #-2
    3068:	ldp	x20, x19, [sp, #32]
    306c:	ldp	x22, x21, [sp, #16]
    3070:	ldp	x29, x30, [sp], #48
    3074:	ret
    3078:	ldr	w8, [x19, #8]
    307c:	mov	x20, x0
    3080:	sub	w9, w8, #0x39
    3084:	cmp	w9, #0x38
    3088:	b.hi	3224 <deflateCopy+0x1f8>  // b.pmore
    308c:	mov	w10, #0x1                   	// #1
    3090:	lsl	x9, x10, x9
    3094:	mov	x10, #0x1001                	// #4097
    3098:	movk	x10, #0x1, lsl #16
    309c:	movk	x10, #0x4004, lsl #32
    30a0:	movk	x10, #0x100, lsl #48
    30a4:	tst	x9, x10
    30a8:	b.eq	3224 <deflateCopy+0x1f8>  // b.none
    30ac:	cbz	x20, 3064 <deflateCopy+0x38>
    30b0:	ldp	q0, q1, [x1, #64]
    30b4:	ldr	q2, [x1, #48]
    30b8:	ldr	q3, [x1, #96]
    30bc:	mov	w2, #0x1740                	// #5952
    30c0:	stp	q0, q1, [x20, #64]
    30c4:	ldp	q0, q1, [x1]
    30c8:	ldr	q4, [x1, #32]
    30cc:	ldr	x8, [x20, #64]
    30d0:	ldr	x0, [x20, #80]
    30d4:	mov	w1, #0x1                   	// #1
    30d8:	str	q3, [x20, #96]
    30dc:	stp	q0, q1, [x20]
    30e0:	stp	q4, q2, [x20, #32]
    30e4:	blr	x8
    30e8:	cbz	x0, 3240 <deflateCopy+0x214>
    30ec:	mov	w2, #0x1740                	// #5952
    30f0:	mov	x1, x19
    30f4:	mov	x21, x0
    30f8:	str	x0, [x20, #56]
    30fc:	bl	0 <memcpy>
    3100:	str	x20, [x21]
    3104:	ldr	x8, [x20, #64]
    3108:	ldr	x0, [x20, #80]
    310c:	ldr	w1, [x21, #80]
    3110:	mov	w2, #0x2                   	// #2
    3114:	blr	x8
    3118:	str	x0, [x21, #96]
    311c:	ldr	x8, [x20, #64]
    3120:	ldr	x0, [x20, #80]
    3124:	ldr	w1, [x21, #80]
    3128:	mov	w2, #0x2                   	// #2
    312c:	blr	x8
    3130:	str	x0, [x21, #112]
    3134:	ldr	x8, [x20, #64]
    3138:	ldr	x0, [x20, #80]
    313c:	ldr	w1, [x21, #132]
    3140:	mov	w2, #0x2                   	// #2
    3144:	blr	x8
    3148:	str	x0, [x21, #120]
    314c:	ldr	x8, [x20, #64]
    3150:	ldr	x0, [x20, #80]
    3154:	ldr	w1, [x21, #5896]
    3158:	mov	w2, #0x4                   	// #4
    315c:	blr	x8
    3160:	ldr	x8, [x21, #96]
    3164:	str	x0, [x21, #16]
    3168:	cbz	x8, 3238 <deflateCopy+0x20c>
    316c:	ldr	x9, [x21, #112]
    3170:	cbz	x9, 3238 <deflateCopy+0x20c>
    3174:	mov	x22, x0
    3178:	cbz	x0, 3238 <deflateCopy+0x20c>
    317c:	ldr	x9, [x21, #120]
    3180:	cbz	x9, 3238 <deflateCopy+0x20c>
    3184:	ldr	w9, [x21, #80]
    3188:	ldr	x1, [x19, #96]
    318c:	mov	x0, x8
    3190:	lsl	w2, w9, #1
    3194:	bl	0 <memcpy>
    3198:	ldr	w8, [x21, #80]
    319c:	ldr	x0, [x21, #112]
    31a0:	ldr	x1, [x19, #112]
    31a4:	lsl	x2, x8, #1
    31a8:	bl	0 <memcpy>
    31ac:	ldr	w8, [x21, #132]
    31b0:	ldr	x0, [x21, #120]
    31b4:	ldr	x1, [x19, #120]
    31b8:	lsl	x2, x8, #1
    31bc:	bl	0 <memcpy>
    31c0:	ldr	x0, [x21, #16]
    31c4:	ldr	x1, [x19, #16]
    31c8:	ldr	w2, [x21, #24]
    31cc:	bl	0 <memcpy>
    31d0:	add	x11, x21, #0xd4
    31d4:	ldr	x8, [x19, #32]
    31d8:	ldr	x9, [x19, #16]
    31dc:	str	x11, [x21, #2904]
    31e0:	add	x11, x21, #0x9c8
    31e4:	ldr	w10, [x21, #5896]
    31e8:	str	x11, [x21, #2928]
    31ec:	ldr	x11, [x21, #16]
    31f0:	sub	x8, x8, x9
    31f4:	and	x9, x10, #0xfffffffe
    31f8:	add	x10, x10, x10, lsl #1
    31fc:	add	x8, x11, x8
    3200:	mov	w0, wzr
    3204:	add	x9, x22, x9
    3208:	add	x10, x11, x10
    320c:	str	x8, [x21, #32]
    3210:	add	x8, x21, #0xabc
    3214:	str	x9, [x21, #5904]
    3218:	str	x10, [x21, #5888]
    321c:	str	x8, [x21, #2952]
    3220:	b	3068 <deflateCopy+0x3c>
    3224:	cmp	w8, #0x29a
    3228:	b.eq	30ac <deflateCopy+0x80>  // b.none
    322c:	cmp	w8, #0x2a
    3230:	b.ne	3064 <deflateCopy+0x38>  // b.any
    3234:	b	30ac <deflateCopy+0x80>
    3238:	mov	x0, x20
    323c:	bl	310 <deflateEnd>
    3240:	mov	w0, #0xfffffffc            	// #-4
    3244:	b	3068 <deflateCopy+0x3c>

0000000000003248 <deflate_fast>:
    3248:	stp	x29, x30, [sp, #-80]!
    324c:	stp	x24, x23, [sp, #32]
    3250:	adrp	x23, 0 <_length_code>
    3254:	adrp	x24, 0 <_dist_code>
    3258:	stp	x20, x19, [sp, #64]
    325c:	mov	w20, w1
    3260:	mov	x19, x0
    3264:	add	x23, x23, #0x0
    3268:	add	x24, x24, #0x0
    326c:	stp	x26, x25, [sp, #16]
    3270:	stp	x22, x21, [sp, #48]
    3274:	mov	x29, sp
    3278:	b	3288 <deflate_fast+0x40>
    327c:	ldr	x8, [x19]
    3280:	ldr	w8, [x8, #32]
    3284:	cbz	w8, 376c <deflate_fast+0x524>
    3288:	ldr	w8, [x19, #180]
    328c:	cmp	w8, #0x105
    3290:	b.hi	32b8 <deflate_fast+0x70>  // b.pmore
    3294:	mov	x0, x19
    3298:	bl	6d0 <fill_window>
    329c:	ldr	w8, [x19, #180]
    32a0:	cbnz	w20, 32ac <deflate_fast+0x64>
    32a4:	cmp	w8, #0x106
    32a8:	b.cc	376c <deflate_fast+0x524>  // b.lo, b.ul, b.last
    32ac:	cbz	w8, 35bc <deflate_fast+0x374>
    32b0:	cmp	w8, #0x3
    32b4:	b.cc	3314 <deflate_fast+0xcc>  // b.lo, b.ul, b.last
    32b8:	ldr	w8, [x19, #172]
    32bc:	ldr	x10, [x19, #96]
    32c0:	ldr	w9, [x19, #128]
    32c4:	ldp	w12, w11, [x19, #140]
    32c8:	add	w13, w8, #0x2
    32cc:	ldrb	w10, [x10, w13, uxtw]
    32d0:	lsl	w9, w9, w11
    32d4:	ldp	x13, x11, [x19, #112]
    32d8:	eor	w9, w9, w10
    32dc:	and	x9, x9, x12
    32e0:	ldr	w10, [x19, #88]
    32e4:	str	w9, [x19, #128]
    32e8:	lsl	x9, x9, #1
    32ec:	ldrh	w1, [x11, x9]
    32f0:	and	x10, x10, x8
    32f4:	strh	w1, [x13, x10, lsl #1]
    32f8:	strh	w8, [x11, x9]
    32fc:	cbz	w1, 3314 <deflate_fast+0xcc>
    3300:	ldr	w9, [x19, #80]
    3304:	sub	w8, w8, w1
    3308:	sub	w9, w9, #0x106
    330c:	cmp	w8, w9
    3310:	b.ls	3488 <deflate_fast+0x240>  // b.plast
    3314:	ldr	w0, [x19, #160]
    3318:	subs	w8, w0, #0x3
    331c:	b.cc	349c <deflate_fast+0x254>  // b.lo, b.ul, b.last
    3320:	ldp	w9, w10, [x19, #172]
    3324:	ldr	x11, [x19, #5904]
    3328:	ldr	w12, [x19, #5900]
    332c:	and	x13, x8, #0xff
    3330:	ldrb	w13, [x23, x13]
    3334:	sub	w9, w9, w10
    3338:	mov	w10, #0x400                 	// #1024
    333c:	strh	w9, [x11, x12, lsl #1]
    3340:	add	w11, w12, #0x1
    3344:	sub	w9, w9, #0x1
    3348:	str	w11, [x19, #5900]
    334c:	bfi	x10, x13, #2, #8
    3350:	ldr	x11, [x19, #5888]
    3354:	and	w13, w9, #0xffff
    3358:	cmp	w13, #0x100
    335c:	ubfx	w13, w9, #7, #9
    3360:	add	w13, w13, #0x100
    3364:	csel	w9, w9, w13, cc  // cc = lo, ul, last
    3368:	add	x10, x10, x19
    336c:	and	x9, x9, #0xffff
    3370:	strb	w8, [x11, x12]
    3374:	ldrb	w8, [x24, x9]
    3378:	ldrh	w9, [x10, #216]
    337c:	add	x8, x19, x8, lsl #2
    3380:	add	w9, w9, #0x1
    3384:	strh	w9, [x10, #216]
    3388:	ldrh	w9, [x8, #2504]
    338c:	add	w9, w9, #0x1
    3390:	strh	w9, [x8, #2504]
    3394:	ldr	w8, [x19, #5896]
    3398:	ldr	w9, [x19, #160]
    339c:	ldr	w10, [x19, #180]
    33a0:	ldr	w11, [x19, #5900]
    33a4:	sub	w8, w8, #0x1
    33a8:	sub	w10, w10, w9
    33ac:	cmp	w11, w8
    33b0:	cset	w8, eq  // eq = none
    33b4:	cmp	w10, #0x3
    33b8:	str	w10, [x19, #180]
    33bc:	b.cc	3448 <deflate_fast+0x200>  // b.lo, b.ul, b.last
    33c0:	ldr	w10, [x19, #192]
    33c4:	cmp	w9, w10
    33c8:	b.hi	3448 <deflate_fast+0x200>  // b.pmore
    33cc:	ldr	w18, [x19, #172]
    33d0:	ldr	x10, [x19, #96]
    33d4:	ldp	w12, w11, [x19, #140]
    33d8:	ldp	x14, x13, [x19, #112]
    33dc:	ldr	w15, [x19, #88]
    33e0:	ldr	w17, [x19, #128]
    33e4:	sub	w16, w9, #0x1
    33e8:	str	w16, [x19, #160]
    33ec:	sub	w16, w9, #0x2
    33f0:	add	w9, w18, #0x1
    33f4:	str	w9, [x19, #172]
    33f8:	add	w18, w9, #0x2
    33fc:	ldrb	w18, [x10, w18, uxtw]
    3400:	lsl	w17, w17, w11
    3404:	mov	w1, w9
    3408:	and	x1, x15, x1
    340c:	eor	w17, w17, w18
    3410:	and	x17, x17, x12
    3414:	str	w17, [x19, #128]
    3418:	lsl	x18, x17, #1
    341c:	ldrh	w0, [x13, x18]
    3420:	strh	w0, [x14, x1, lsl #1]
    3424:	strh	w9, [x13, x18]
    3428:	str	w16, [x19, #160]
    342c:	sub	w16, w16, #0x1
    3430:	cmn	w16, #0x1
    3434:	add	w9, w9, #0x1
    3438:	b.ne	33f4 <deflate_fast+0x1ac>  // b.any
    343c:	str	w9, [x19, #172]
    3440:	cbz	w8, 3288 <deflate_fast+0x40>
    3444:	b	3504 <deflate_fast+0x2bc>
    3448:	ldr	w10, [x19, #172]
    344c:	ldr	x11, [x19, #96]
    3450:	str	wzr, [x19, #160]
    3454:	add	w9, w10, w9
    3458:	str	w9, [x19, #172]
    345c:	ldrb	w10, [x11, w9, uxtw]
    3460:	add	w12, w9, #0x1
    3464:	str	w10, [x19, #128]
    3468:	ldrb	w11, [x11, w12, uxtw]
    346c:	ldp	w12, w13, [x19, #140]
    3470:	lsl	w10, w10, w13
    3474:	eor	w10, w10, w11
    3478:	and	w10, w10, w12
    347c:	str	w10, [x19, #128]
    3480:	cbz	w8, 3288 <deflate_fast+0x40>
    3484:	b	3504 <deflate_fast+0x2bc>
    3488:	mov	x0, x19
    348c:	bl	3e5c <longest_match>
    3490:	str	w0, [x19, #160]
    3494:	subs	w8, w0, #0x3
    3498:	b.cs	3320 <deflate_fast+0xd8>  // b.hs, b.nlast
    349c:	ldr	x8, [x19, #96]
    34a0:	ldr	w9, [x19, #172]
    34a4:	ldr	x10, [x19, #5904]
    34a8:	ldr	w11, [x19, #5900]
    34ac:	ldrb	w8, [x8, x9]
    34b0:	strh	wzr, [x10, x11, lsl #1]
    34b4:	ldr	x9, [x19, #5888]
    34b8:	add	w10, w11, #0x1
    34bc:	str	w10, [x19, #5900]
    34c0:	add	x10, x19, x8, lsl #2
    34c4:	strb	w8, [x9, x11]
    34c8:	ldrh	w8, [x10, #212]
    34cc:	add	w8, w8, #0x1
    34d0:	strh	w8, [x10, #212]
    34d4:	ldr	w8, [x19, #5896]
    34d8:	ldr	w11, [x19, #5900]
    34dc:	ldr	w9, [x19, #180]
    34e0:	ldr	w10, [x19, #172]
    34e4:	sub	w8, w8, #0x1
    34e8:	cmp	w11, w8
    34ec:	sub	w12, w9, #0x1
    34f0:	add	w9, w10, #0x1
    34f4:	cset	w8, eq  // eq = none
    34f8:	str	w12, [x19, #180]
    34fc:	str	w9, [x19, #172]
    3500:	cbz	w8, 3288 <deflate_fast+0x40>
    3504:	ldr	x8, [x19, #152]
    3508:	tbnz	x8, #63, 3518 <deflate_fast+0x2d0>
    350c:	ldr	x10, [x19, #96]
    3510:	add	x1, x10, w8, uxtw
    3514:	b	351c <deflate_fast+0x2d4>
    3518:	mov	x1, xzr
    351c:	mov	w9, w9
    3520:	sub	x2, x9, x8
    3524:	mov	x0, x19
    3528:	mov	w3, wzr
    352c:	bl	0 <_tr_flush_block>
    3530:	ldr	w8, [x19, #172]
    3534:	ldr	x25, [x19]
    3538:	str	x8, [x19, #152]
    353c:	ldr	x21, [x25, #56]
    3540:	mov	x0, x21
    3544:	bl	0 <_tr_flush_bits>
    3548:	ldr	w8, [x21, #40]
    354c:	ldr	w9, [x25, #32]
    3550:	cmp	w9, w8
    3554:	csel	w26, w9, w8, cc  // cc = lo, ul, last
    3558:	cbz	w26, 327c <deflate_fast+0x34>
    355c:	ldr	x0, [x25, #24]
    3560:	ldr	x1, [x21, #32]
    3564:	mov	w22, w26
    3568:	mov	x2, x22
    356c:	bl	0 <memcpy>
    3570:	ldr	x8, [x25, #24]
    3574:	add	x8, x8, x22
    3578:	str	x8, [x25, #24]
    357c:	ldr	x8, [x21, #32]
    3580:	add	x8, x8, x22
    3584:	str	x8, [x21, #32]
    3588:	ldr	x8, [x25, #40]
    358c:	ldr	w9, [x25, #32]
    3590:	add	x8, x8, x22
    3594:	sub	w9, w9, w26
    3598:	str	x8, [x25, #40]
    359c:	str	w9, [x25, #32]
    35a0:	ldr	x8, [x21, #40]
    35a4:	subs	x8, x8, x22
    35a8:	str	x8, [x21, #40]
    35ac:	b.ne	327c <deflate_fast+0x34>  // b.any
    35b0:	ldr	x8, [x21, #16]
    35b4:	str	x8, [x21, #32]
    35b8:	b	327c <deflate_fast+0x34>
    35bc:	ldr	w8, [x19, #172]
    35c0:	mov	w9, #0x2                   	// #2
    35c4:	cmp	w8, #0x2
    35c8:	csel	w9, w8, w9, cc  // cc = lo, ul, last
    35cc:	cmp	w20, #0x4
    35d0:	str	w9, [x19, #5932]
    35d4:	b.ne	35ec <deflate_fast+0x3a4>  // b.any
    35d8:	ldr	x9, [x19, #152]
    35dc:	tbnz	x9, #63, 3608 <deflate_fast+0x3c0>
    35e0:	ldr	x10, [x19, #96]
    35e4:	add	x1, x10, w9, uxtw
    35e8:	b	360c <deflate_fast+0x3c4>
    35ec:	ldr	w9, [x19, #5900]
    35f0:	cbz	w9, 3764 <deflate_fast+0x51c>
    35f4:	ldr	x9, [x19, #152]
    35f8:	tbnz	x9, #63, 36bc <deflate_fast+0x474>
    35fc:	ldr	x10, [x19, #96]
    3600:	add	x1, x10, w9, uxtw
    3604:	b	36c0 <deflate_fast+0x478>
    3608:	mov	x1, xzr
    360c:	sub	x2, x8, x9
    3610:	mov	w3, #0x1                   	// #1
    3614:	mov	x0, x19
    3618:	bl	0 <_tr_flush_block>
    361c:	ldr	w8, [x19, #172]
    3620:	ldr	x22, [x19]
    3624:	str	x8, [x19, #152]
    3628:	ldr	x20, [x22, #56]
    362c:	mov	x0, x20
    3630:	bl	0 <_tr_flush_bits>
    3634:	ldr	w8, [x20, #40]
    3638:	ldr	w9, [x22, #32]
    363c:	cmp	w9, w8
    3640:	csel	w23, w9, w8, cc  // cc = lo, ul, last
    3644:	cbz	w23, 36a4 <deflate_fast+0x45c>
    3648:	ldr	x0, [x22, #24]
    364c:	ldr	x1, [x20, #32]
    3650:	mov	w21, w23
    3654:	mov	x2, x21
    3658:	bl	0 <memcpy>
    365c:	ldr	x8, [x22, #24]
    3660:	add	x8, x8, x21
    3664:	str	x8, [x22, #24]
    3668:	ldr	x8, [x20, #32]
    366c:	add	x8, x8, x21
    3670:	str	x8, [x20, #32]
    3674:	ldr	x8, [x22, #40]
    3678:	ldr	w9, [x22, #32]
    367c:	add	x8, x8, x21
    3680:	sub	w9, w9, w23
    3684:	str	x8, [x22, #40]
    3688:	str	w9, [x22, #32]
    368c:	ldr	x8, [x20, #40]
    3690:	subs	x8, x8, x21
    3694:	str	x8, [x20, #40]
    3698:	b.ne	36a4 <deflate_fast+0x45c>  // b.any
    369c:	ldr	x8, [x20, #16]
    36a0:	str	x8, [x20, #32]
    36a4:	ldr	x8, [x19]
    36a8:	ldr	w8, [x8, #32]
    36ac:	cmp	w8, #0x0
    36b0:	mov	w8, #0x2                   	// #2
    36b4:	cinc	w0, w8, ne  // ne = any
    36b8:	b	3770 <deflate_fast+0x528>
    36bc:	mov	x1, xzr
    36c0:	sub	x2, x8, x9
    36c4:	mov	x0, x19
    36c8:	mov	w3, wzr
    36cc:	bl	0 <_tr_flush_block>
    36d0:	ldr	w8, [x19, #172]
    36d4:	ldr	x22, [x19]
    36d8:	str	x8, [x19, #152]
    36dc:	ldr	x20, [x22, #56]
    36e0:	mov	x0, x20
    36e4:	bl	0 <_tr_flush_bits>
    36e8:	ldr	w8, [x20, #40]
    36ec:	ldr	w9, [x22, #32]
    36f0:	cmp	w9, w8
    36f4:	csel	w23, w9, w8, cc  // cc = lo, ul, last
    36f8:	cbz	w23, 3758 <deflate_fast+0x510>
    36fc:	ldr	x0, [x22, #24]
    3700:	ldr	x1, [x20, #32]
    3704:	mov	w21, w23
    3708:	mov	x2, x21
    370c:	bl	0 <memcpy>
    3710:	ldr	x8, [x22, #24]
    3714:	add	x8, x8, x21
    3718:	str	x8, [x22, #24]
    371c:	ldr	x8, [x20, #32]
    3720:	add	x8, x8, x21
    3724:	str	x8, [x20, #32]
    3728:	ldr	x8, [x22, #40]
    372c:	ldr	w9, [x22, #32]
    3730:	add	x8, x8, x21
    3734:	sub	w9, w9, w23
    3738:	str	x8, [x22, #40]
    373c:	str	w9, [x22, #32]
    3740:	ldr	x8, [x20, #40]
    3744:	subs	x8, x8, x21
    3748:	str	x8, [x20, #40]
    374c:	b.ne	3758 <deflate_fast+0x510>  // b.any
    3750:	ldr	x8, [x20, #16]
    3754:	str	x8, [x20, #32]
    3758:	ldr	x8, [x19]
    375c:	ldr	w8, [x8, #32]
    3760:	cbz	w8, 376c <deflate_fast+0x524>
    3764:	mov	w0, #0x1                   	// #1
    3768:	b	3770 <deflate_fast+0x528>
    376c:	mov	w0, wzr
    3770:	ldp	x20, x19, [sp, #64]
    3774:	ldp	x22, x21, [sp, #48]
    3778:	ldp	x24, x23, [sp, #32]
    377c:	ldp	x26, x25, [sp, #16]
    3780:	ldp	x29, x30, [sp], #80
    3784:	ret

0000000000003788 <deflate_slow>:
    3788:	stp	x29, x30, [sp, #-96]!
    378c:	stp	x26, x25, [sp, #32]
    3790:	stp	x24, x23, [sp, #48]
    3794:	adrp	x24, 0 <_length_code>
    3798:	adrp	x25, 0 <_dist_code>
    379c:	stp	x20, x19, [sp, #80]
    37a0:	mov	w20, w1
    37a4:	mov	x19, x0
    37a8:	mov	w23, #0x1                   	// #1
    37ac:	add	x24, x24, #0x0
    37b0:	add	x25, x25, #0x0
    37b4:	mov	w26, #0x2                   	// #2
    37b8:	stp	x28, x27, [sp, #16]
    37bc:	stp	x22, x21, [sp, #64]
    37c0:	mov	x29, sp
    37c4:	b	37ec <deflate_slow+0x64>
    37c8:	ldr	w8, [x19, #172]
    37cc:	ldr	w9, [x19, #180]
    37d0:	ldr	x10, [x19]
    37d4:	add	w8, w8, #0x1
    37d8:	sub	w9, w9, #0x1
    37dc:	str	w8, [x19, #172]
    37e0:	str	w9, [x19, #180]
    37e4:	ldr	w8, [x10, #32]
    37e8:	cbz	w8, 3e3c <deflate_slow+0x6b4>
    37ec:	ldr	w8, [x19, #180]
    37f0:	cmp	w8, #0x105
    37f4:	b.hi	381c <deflate_slow+0x94>  // b.pmore
    37f8:	mov	x0, x19
    37fc:	bl	6d0 <fill_window>
    3800:	ldr	w8, [x19, #180]
    3804:	cbnz	w20, 3810 <deflate_slow+0x88>
    3808:	cmp	w8, #0x106
    380c:	b.cc	3e3c <deflate_slow+0x6b4>  // b.lo, b.ul, b.last
    3810:	cbz	w8, 3c44 <deflate_slow+0x4bc>
    3814:	cmp	w8, #0x2
    3818:	b.ls	38b0 <deflate_slow+0x128>  // b.plast
    381c:	ldr	w9, [x19, #172]
    3820:	ldr	x10, [x19, #96]
    3824:	ldr	w8, [x19, #128]
    3828:	ldp	w12, w11, [x19, #140]
    382c:	add	w13, w9, #0x2
    3830:	ldrb	w10, [x10, w13, uxtw]
    3834:	mov	w0, #0x2                   	// #2
    3838:	lsl	w8, w8, w11
    383c:	ldp	x13, x11, [x19, #112]
    3840:	eor	w8, w8, w10
    3844:	and	x8, x8, x12
    3848:	ldr	w10, [x19, #88]
    384c:	str	w8, [x19, #128]
    3850:	lsl	x8, x8, #1
    3854:	ldrh	w1, [x11, x8]
    3858:	and	x10, x10, x9
    385c:	strh	w1, [x13, x10, lsl #1]
    3860:	strh	w9, [x11, x8]
    3864:	ldr	w8, [x19, #160]
    3868:	ldr	w9, [x19, #176]
    386c:	str	w8, [x19, #184]
    3870:	stp	w0, w9, [x19, #160]
    3874:	cbz	w1, 38c4 <deflate_slow+0x13c>
    3878:	ldr	w9, [x19, #192]
    387c:	cmp	w8, w9
    3880:	b.cs	389c <deflate_slow+0x114>  // b.hs, b.nlast
    3884:	ldr	w8, [x19, #172]
    3888:	ldr	w9, [x19, #80]
    388c:	sub	w8, w8, w1
    3890:	sub	w9, w9, #0x106
    3894:	cmp	w8, w9
    3898:	b.ls	3aa4 <deflate_slow+0x31c>  // b.plast
    389c:	mov	w0, #0x2                   	// #2
    38a0:	ldr	w8, [x19, #184]
    38a4:	subs	w9, w8, #0x3
    38a8:	b.cs	38cc <deflate_slow+0x144>  // b.hs, b.nlast
    38ac:	b	39f8 <deflate_slow+0x270>
    38b0:	ldr	w8, [x19, #160]
    38b4:	ldr	w9, [x19, #176]
    38b8:	mov	w0, #0x2                   	// #2
    38bc:	str	w8, [x19, #184]
    38c0:	stp	w0, w9, [x19, #160]
    38c4:	subs	w9, w8, #0x3
    38c8:	b.cc	39f8 <deflate_slow+0x270>  // b.lo, b.ul, b.last
    38cc:	cmp	w0, w8
    38d0:	b.hi	39f8 <deflate_slow+0x270>  // b.pmore
    38d4:	ldr	w11, [x19, #164]
    38d8:	ldr	w8, [x19, #172]
    38dc:	ldr	x12, [x19, #5904]
    38e0:	ldr	w13, [x19, #5900]
    38e4:	mvn	w11, w11
    38e8:	add	w11, w11, w8
    38ec:	ldr	w10, [x19, #180]
    38f0:	strh	w11, [x12, x13, lsl #1]
    38f4:	and	x14, x9, #0xff
    38f8:	ldr	x12, [x19, #5888]
    38fc:	ldrb	w14, [x24, x14]
    3900:	add	w15, w13, #0x1
    3904:	sub	w11, w11, #0x1
    3908:	str	w15, [x19, #5900]
    390c:	strb	w9, [x12, x13]
    3910:	mov	w9, #0x400                 	// #1024
    3914:	and	w12, w11, #0xffff
    3918:	ubfx	w13, w11, #7, #9
    391c:	bfi	x9, x14, #2, #8
    3920:	add	w13, w13, #0x100
    3924:	cmp	w12, #0x100
    3928:	add	x9, x9, x19
    392c:	csel	w11, w11, w13, cc  // cc = lo, ul, last
    3930:	and	x11, x11, #0xffff
    3934:	ldrh	w12, [x9, #216]
    3938:	ldrb	w11, [x25, x11]
    393c:	add	w8, w8, w10
    3940:	add	w12, w12, #0x1
    3944:	add	x11, x19, x11, lsl #2
    3948:	strh	w12, [x9, #216]
    394c:	ldrh	w12, [x11, #2504]
    3950:	sub	w9, w8, #0x3
    3954:	add	w8, w12, #0x1
    3958:	strh	w8, [x11, #2504]
    395c:	ldp	w12, w8, [x19, #180]
    3960:	ldr	w11, [x19, #5896]
    3964:	ldr	w10, [x19, #5900]
    3968:	sub	w13, w8, #0x2
    396c:	str	w13, [x19, #184]
    3970:	ldr	w13, [x19, #172]
    3974:	sub	w14, w12, w8
    3978:	sub	w12, w8, #0x3
    397c:	add	w8, w14, #0x1
    3980:	sub	w11, w11, #0x1
    3984:	str	w8, [x19, #180]
    3988:	add	w8, w13, #0x1
    398c:	b	39a4 <deflate_slow+0x21c>
    3990:	str	w12, [x19, #184]
    3994:	sub	w12, w12, #0x1
    3998:	cmn	w12, #0x1
    399c:	add	w8, w8, #0x1
    39a0:	b.eq	3a64 <deflate_slow+0x2dc>  // b.none
    39a4:	cmp	w8, w9
    39a8:	str	w8, [x19, #172]
    39ac:	b.hi	3990 <deflate_slow+0x208>  // b.pmore
    39b0:	ldr	x14, [x19, #96]
    39b4:	ldr	w13, [x19, #128]
    39b8:	add	w15, w8, #0x2
    39bc:	ldp	w17, w16, [x19, #140]
    39c0:	ldrb	w14, [x14, w15, uxtw]
    39c4:	ldp	x18, x15, [x19, #112]
    39c8:	lsl	w13, w13, w16
    39cc:	eor	w13, w13, w14
    39d0:	and	x13, x13, x17
    39d4:	ldr	w16, [x19, #88]
    39d8:	str	w13, [x19, #128]
    39dc:	lsl	x13, x13, #1
    39e0:	ldrh	w14, [x15, x13]
    39e4:	mov	w17, w8
    39e8:	and	x16, x16, x17
    39ec:	strh	w14, [x18, x16, lsl #1]
    39f0:	strh	w8, [x15, x13]
    39f4:	b	3990 <deflate_slow+0x208>
    39f8:	ldr	w8, [x19, #168]
    39fc:	cbz	w8, 3a88 <deflate_slow+0x300>
    3a00:	ldr	w9, [x19, #172]
    3a04:	ldr	x8, [x19, #96]
    3a08:	ldr	x10, [x19, #5904]
    3a0c:	ldr	w11, [x19, #5900]
    3a10:	sub	w9, w9, #0x1
    3a14:	ldrb	w8, [x8, w9, uxtw]
    3a18:	strh	wzr, [x10, x11, lsl #1]
    3a1c:	ldr	x9, [x19, #5888]
    3a20:	add	w10, w11, #0x1
    3a24:	str	w10, [x19, #5900]
    3a28:	strb	w8, [x9, x11]
    3a2c:	add	x8, x19, x8, lsl #2
    3a30:	ldrh	w9, [x8, #212]
    3a34:	add	w9, w9, #0x1
    3a38:	strh	w9, [x8, #212]
    3a3c:	ldr	w8, [x19, #5896]
    3a40:	ldr	w9, [x19, #5900]
    3a44:	sub	w8, w8, #0x1
    3a48:	cmp	w9, w8
    3a4c:	b.ne	37c8 <deflate_slow+0x40>  // b.any
    3a50:	ldr	x8, [x19, #152]
    3a54:	tbnz	x8, #63, 3b80 <deflate_slow+0x3f8>
    3a58:	ldr	x9, [x19, #96]
    3a5c:	add	x1, x9, w8, uxtw
    3a60:	b	3b84 <deflate_slow+0x3fc>
    3a64:	cmp	w10, w11
    3a68:	str	w26, [x19, #160]
    3a6c:	stp	wzr, w8, [x19, #168]
    3a70:	b.ne	37ec <deflate_slow+0x64>  // b.any
    3a74:	ldr	x9, [x19, #152]
    3a78:	tbnz	x9, #63, 3ad0 <deflate_slow+0x348>
    3a7c:	ldr	x10, [x19, #96]
    3a80:	add	x1, x10, w9, uxtw
    3a84:	b	3ad4 <deflate_slow+0x34c>
    3a88:	ldr	w8, [x19, #172]
    3a8c:	ldr	w9, [x19, #180]
    3a90:	add	w8, w8, #0x1
    3a94:	sub	w9, w9, #0x1
    3a98:	stp	w23, w8, [x19, #168]
    3a9c:	str	w9, [x19, #180]
    3aa0:	b	37ec <deflate_slow+0x64>
    3aa4:	mov	x0, x19
    3aa8:	bl	3e5c <longest_match>
    3aac:	cmp	w0, #0x5
    3ab0:	str	w0, [x19, #160]
    3ab4:	b.hi	38a0 <deflate_slow+0x118>  // b.pmore
    3ab8:	ldr	w8, [x19, #200]
    3abc:	cmp	w8, #0x1
    3ac0:	b.ne	3c24 <deflate_slow+0x49c>  // b.any
    3ac4:	mov	w0, #0x2                   	// #2
    3ac8:	str	w0, [x19, #160]
    3acc:	b	38a0 <deflate_slow+0x118>
    3ad0:	mov	x1, xzr
    3ad4:	mov	w8, w8
    3ad8:	sub	x2, x8, x9
    3adc:	mov	x0, x19
    3ae0:	mov	w3, wzr
    3ae4:	bl	0 <_tr_flush_block>
    3ae8:	ldr	w8, [x19, #172]
    3aec:	ldr	x27, [x19]
    3af0:	str	x8, [x19, #152]
    3af4:	ldr	x21, [x27, #56]
    3af8:	mov	x0, x21
    3afc:	bl	0 <_tr_flush_bits>
    3b00:	ldr	w8, [x21, #40]
    3b04:	ldr	w9, [x27, #32]
    3b08:	cmp	w9, w8
    3b0c:	csel	w28, w9, w8, cc  // cc = lo, ul, last
    3b10:	cbz	w28, 3b70 <deflate_slow+0x3e8>
    3b14:	ldr	x0, [x27, #24]
    3b18:	ldr	x1, [x21, #32]
    3b1c:	mov	w22, w28
    3b20:	mov	x2, x22
    3b24:	bl	0 <memcpy>
    3b28:	ldr	x8, [x27, #24]
    3b2c:	add	x8, x8, x22
    3b30:	str	x8, [x27, #24]
    3b34:	ldr	x8, [x21, #32]
    3b38:	add	x8, x8, x22
    3b3c:	str	x8, [x21, #32]
    3b40:	ldr	x8, [x27, #40]
    3b44:	ldr	w9, [x27, #32]
    3b48:	add	x8, x8, x22
    3b4c:	sub	w9, w9, w28
    3b50:	str	x8, [x27, #40]
    3b54:	str	w9, [x27, #32]
    3b58:	ldr	x8, [x21, #40]
    3b5c:	subs	x8, x8, x22
    3b60:	str	x8, [x21, #40]
    3b64:	b.ne	3b70 <deflate_slow+0x3e8>  // b.any
    3b68:	ldr	x8, [x21, #16]
    3b6c:	str	x8, [x21, #32]
    3b70:	ldr	x8, [x19]
    3b74:	ldr	w8, [x8, #32]
    3b78:	cbnz	w8, 37ec <deflate_slow+0x64>
    3b7c:	b	3e3c <deflate_slow+0x6b4>
    3b80:	mov	x1, xzr
    3b84:	ldr	w9, [x19, #172]
    3b88:	mov	x0, x19
    3b8c:	mov	w3, wzr
    3b90:	sub	x2, x9, x8
    3b94:	bl	0 <_tr_flush_block>
    3b98:	ldr	w8, [x19, #172]
    3b9c:	ldr	x27, [x19]
    3ba0:	str	x8, [x19, #152]
    3ba4:	ldr	x21, [x27, #56]
    3ba8:	mov	x0, x21
    3bac:	bl	0 <_tr_flush_bits>
    3bb0:	ldr	w8, [x21, #40]
    3bb4:	ldr	w9, [x27, #32]
    3bb8:	cmp	w9, w8
    3bbc:	csel	w28, w9, w8, cc  // cc = lo, ul, last
    3bc0:	cbz	w28, 37c8 <deflate_slow+0x40>
    3bc4:	ldr	x0, [x27, #24]
    3bc8:	ldr	x1, [x21, #32]
    3bcc:	mov	w22, w28
    3bd0:	mov	x2, x22
    3bd4:	bl	0 <memcpy>
    3bd8:	ldr	x8, [x27, #24]
    3bdc:	add	x8, x8, x22
    3be0:	str	x8, [x27, #24]
    3be4:	ldr	x8, [x21, #32]
    3be8:	add	x8, x8, x22
    3bec:	str	x8, [x21, #32]
    3bf0:	ldr	x8, [x27, #40]
    3bf4:	ldr	w9, [x27, #32]
    3bf8:	add	x8, x8, x22
    3bfc:	sub	w9, w9, w28
    3c00:	str	x8, [x27, #40]
    3c04:	str	w9, [x27, #32]
    3c08:	ldr	x8, [x21, #40]
    3c0c:	subs	x8, x8, x22
    3c10:	str	x8, [x21, #40]
    3c14:	b.ne	37c8 <deflate_slow+0x40>  // b.any
    3c18:	ldr	x8, [x21, #16]
    3c1c:	str	x8, [x21, #32]
    3c20:	b	37c8 <deflate_slow+0x40>
    3c24:	cmp	w0, #0x3
    3c28:	b.ne	38a0 <deflate_slow+0x118>  // b.any
    3c2c:	ldp	w8, w9, [x19, #172]
    3c30:	sub	w8, w8, w9
    3c34:	cmp	w8, #0x1, lsl #12
    3c38:	b.hi	3ac4 <deflate_slow+0x33c>  // b.pmore
    3c3c:	mov	w0, #0x3                   	// #3
    3c40:	b	38a0 <deflate_slow+0x118>
    3c44:	ldr	w8, [x19, #168]
    3c48:	cbz	w8, 3c8c <deflate_slow+0x504>
    3c4c:	ldr	w9, [x19, #172]
    3c50:	ldr	x8, [x19, #96]
    3c54:	ldr	x10, [x19, #5904]
    3c58:	ldr	w11, [x19, #5900]
    3c5c:	sub	w9, w9, #0x1
    3c60:	ldrb	w8, [x8, w9, uxtw]
    3c64:	strh	wzr, [x10, x11, lsl #1]
    3c68:	ldr	x9, [x19, #5888]
    3c6c:	add	w10, w11, #0x1
    3c70:	str	w10, [x19, #5900]
    3c74:	add	x10, x19, x8, lsl #2
    3c78:	strb	w8, [x9, x11]
    3c7c:	ldrh	w8, [x10, #212]
    3c80:	add	w8, w8, #0x1
    3c84:	strh	w8, [x10, #212]
    3c88:	str	wzr, [x19, #168]
    3c8c:	ldr	w8, [x19, #172]
    3c90:	mov	w9, #0x2                   	// #2
    3c94:	cmp	w8, #0x2
    3c98:	csel	w9, w8, w9, cc  // cc = lo, ul, last
    3c9c:	cmp	w20, #0x4
    3ca0:	str	w9, [x19, #5932]
    3ca4:	b.ne	3cbc <deflate_slow+0x534>  // b.any
    3ca8:	ldr	x9, [x19, #152]
    3cac:	tbnz	x9, #63, 3cd8 <deflate_slow+0x550>
    3cb0:	ldr	x10, [x19, #96]
    3cb4:	add	x1, x10, w9, uxtw
    3cb8:	b	3cdc <deflate_slow+0x554>
    3cbc:	ldr	w9, [x19, #5900]
    3cc0:	cbz	w9, 3e34 <deflate_slow+0x6ac>
    3cc4:	ldr	x9, [x19, #152]
    3cc8:	tbnz	x9, #63, 3d8c <deflate_slow+0x604>
    3ccc:	ldr	x10, [x19, #96]
    3cd0:	add	x1, x10, w9, uxtw
    3cd4:	b	3d90 <deflate_slow+0x608>
    3cd8:	mov	x1, xzr
    3cdc:	sub	x2, x8, x9
    3ce0:	mov	w3, #0x1                   	// #1
    3ce4:	mov	x0, x19
    3ce8:	bl	0 <_tr_flush_block>
    3cec:	ldr	w8, [x19, #172]
    3cf0:	ldr	x22, [x19]
    3cf4:	str	x8, [x19, #152]
    3cf8:	ldr	x20, [x22, #56]
    3cfc:	mov	x0, x20
    3d00:	bl	0 <_tr_flush_bits>
    3d04:	ldr	w8, [x20, #40]
    3d08:	ldr	w9, [x22, #32]
    3d0c:	cmp	w9, w8
    3d10:	csel	w23, w9, w8, cc  // cc = lo, ul, last
    3d14:	cbz	w23, 3d74 <deflate_slow+0x5ec>
    3d18:	ldr	x0, [x22, #24]
    3d1c:	ldr	x1, [x20, #32]
    3d20:	mov	w21, w23
    3d24:	mov	x2, x21
    3d28:	bl	0 <memcpy>
    3d2c:	ldr	x8, [x22, #24]
    3d30:	add	x8, x8, x21
    3d34:	str	x8, [x22, #24]
    3d38:	ldr	x8, [x20, #32]
    3d3c:	add	x8, x8, x21
    3d40:	str	x8, [x20, #32]
    3d44:	ldr	x8, [x22, #40]
    3d48:	ldr	w9, [x22, #32]
    3d4c:	add	x8, x8, x21
    3d50:	sub	w9, w9, w23
    3d54:	str	x8, [x22, #40]
    3d58:	str	w9, [x22, #32]
    3d5c:	ldr	x8, [x20, #40]
    3d60:	subs	x8, x8, x21
    3d64:	str	x8, [x20, #40]
    3d68:	b.ne	3d74 <deflate_slow+0x5ec>  // b.any
    3d6c:	ldr	x8, [x20, #16]
    3d70:	str	x8, [x20, #32]
    3d74:	ldr	x8, [x19]
    3d78:	ldr	w8, [x8, #32]
    3d7c:	cmp	w8, #0x0
    3d80:	mov	w8, #0x2                   	// #2
    3d84:	cinc	w0, w8, ne  // ne = any
    3d88:	b	3e40 <deflate_slow+0x6b8>
    3d8c:	mov	x1, xzr
    3d90:	sub	x2, x8, x9
    3d94:	mov	x0, x19
    3d98:	mov	w3, wzr
    3d9c:	bl	0 <_tr_flush_block>
    3da0:	ldr	w8, [x19, #172]
    3da4:	ldr	x22, [x19]
    3da8:	str	x8, [x19, #152]
    3dac:	ldr	x20, [x22, #56]
    3db0:	mov	x0, x20
    3db4:	bl	0 <_tr_flush_bits>
    3db8:	ldr	w8, [x20, #40]
    3dbc:	ldr	w9, [x22, #32]
    3dc0:	cmp	w9, w8
    3dc4:	csel	w23, w9, w8, cc  // cc = lo, ul, last
    3dc8:	cbz	w23, 3e28 <deflate_slow+0x6a0>
    3dcc:	ldr	x0, [x22, #24]
    3dd0:	ldr	x1, [x20, #32]
    3dd4:	mov	w21, w23
    3dd8:	mov	x2, x21
    3ddc:	bl	0 <memcpy>
    3de0:	ldr	x8, [x22, #24]
    3de4:	add	x8, x8, x21
    3de8:	str	x8, [x22, #24]
    3dec:	ldr	x8, [x20, #32]
    3df0:	add	x8, x8, x21
    3df4:	str	x8, [x20, #32]
    3df8:	ldr	x8, [x22, #40]
    3dfc:	ldr	w9, [x22, #32]
    3e00:	add	x8, x8, x21
    3e04:	sub	w9, w9, w23
    3e08:	str	x8, [x22, #40]
    3e0c:	str	w9, [x22, #32]
    3e10:	ldr	x8, [x20, #40]
    3e14:	subs	x8, x8, x21
    3e18:	str	x8, [x20, #40]
    3e1c:	b.ne	3e28 <deflate_slow+0x6a0>  // b.any
    3e20:	ldr	x8, [x20, #16]
    3e24:	str	x8, [x20, #32]
    3e28:	ldr	x8, [x19]
    3e2c:	ldr	w8, [x8, #32]
    3e30:	cbz	w8, 3e3c <deflate_slow+0x6b4>
    3e34:	mov	w0, #0x1                   	// #1
    3e38:	b	3e40 <deflate_slow+0x6b8>
    3e3c:	mov	w0, wzr
    3e40:	ldp	x20, x19, [sp, #80]
    3e44:	ldp	x22, x21, [sp, #64]
    3e48:	ldp	x24, x23, [sp, #48]
    3e4c:	ldp	x26, x25, [sp, #32]
    3e50:	ldp	x28, x27, [sp, #16]
    3e54:	ldp	x29, x30, [sp], #96
    3e58:	ret

0000000000003e5c <longest_match>:
    3e5c:	stp	x22, x21, [sp, #-32]!
    3e60:	stp	x20, x19, [sp, #16]
    3e64:	ldr	x8, [x0, #96]
    3e68:	ldr	w15, [x0, #172]
    3e6c:	ldr	w14, [x0, #80]
    3e70:	ldp	w12, w17, [x0, #184]
    3e74:	ldp	w2, w18, [x0, #204]
    3e78:	sxtw	x12, w12
    3e7c:	ldr	w11, [x0, #180]
    3e80:	add	x13, x8, x15
    3e84:	sub	w16, w14, #0x106
    3e88:	add	x5, x13, x12
    3e8c:	ldr	x9, [x0, #112]
    3e90:	ldr	w10, [x0, #88]
    3e94:	subs	w16, w15, w16
    3e98:	ldurb	w4, [x5, #-1]
    3e9c:	ldrb	w5, [x5]
    3ea0:	lsr	w3, w17, #2
    3ea4:	csel	w16, wzr, w16, cc  // cc = lo, ul, last
    3ea8:	cmp	w12, w2
    3eac:	csel	w17, w17, w3, cc  // cc = lo, ul, last
    3eb0:	cmp	w18, w11
    3eb4:	add	x14, x8, #0x5
    3eb8:	add	x15, x13, #0x102
    3ebc:	csel	w18, w11, w18, hi  // hi = pmore
    3ec0:	mov	w2, #0x102                 	// #258
    3ec4:	mov	x3, #0x10100000000         	// #1103806595072
    3ec8:	mov	w6, w1
    3ecc:	add	x7, x8, x6
    3ed0:	sxtw	x19, w12
    3ed4:	ldrb	w20, [x7, x19]
    3ed8:	cmp	w20, w5, uxtb
    3edc:	b.ne	4048 <longest_match+0x1ec>  // b.any
    3ee0:	add	x19, x19, x7
    3ee4:	ldurb	w19, [x19, #-1]
    3ee8:	cmp	w19, w4, uxtb
    3eec:	b.ne	4048 <longest_match+0x1ec>  // b.any
    3ef0:	ldrb	w19, [x7]
    3ef4:	ldrb	w20, [x13]
    3ef8:	cmp	w19, w20
    3efc:	b.ne	4048 <longest_match+0x1ec>  // b.any
    3f00:	ldrb	w7, [x7, #1]
    3f04:	ldrb	w19, [x13, #1]
    3f08:	cmp	w7, w19
    3f0c:	b.ne	4048 <longest_match+0x1ec>  // b.any
    3f10:	mov	x7, xzr
    3f14:	add	x6, x14, x6
    3f18:	add	x19, x13, x7
    3f1c:	add	x20, x6, x7
    3f20:	ldrb	w21, [x19, #3]
    3f24:	ldurb	w22, [x20, #-2]
    3f28:	cmp	w21, w22
    3f2c:	b.ne	3fd8 <longest_match+0x17c>  // b.any
    3f30:	ldrb	w19, [x19, #4]
    3f34:	ldurb	w20, [x20, #-1]
    3f38:	cmp	w19, w20
    3f3c:	b.ne	3fe0 <longest_match+0x184>  // b.any
    3f40:	add	x19, x13, x7
    3f44:	ldrb	w20, [x19, #5]
    3f48:	ldrb	w21, [x6, x7]
    3f4c:	cmp	w20, w21
    3f50:	b.ne	3fec <longest_match+0x190>  // b.any
    3f54:	add	x20, x6, x7
    3f58:	ldrb	w19, [x19, #6]
    3f5c:	ldrb	w21, [x20, #1]
    3f60:	cmp	w19, w21
    3f64:	b.ne	3ff4 <longest_match+0x198>  // b.any
    3f68:	add	x19, x13, x7
    3f6c:	ldrb	w21, [x19, #7]
    3f70:	ldrb	w20, [x20, #2]
    3f74:	cmp	w21, w20
    3f78:	b.ne	4000 <longest_match+0x1a4>  // b.any
    3f7c:	add	x20, x6, x7
    3f80:	ldrb	w19, [x19, #8]
    3f84:	ldrb	w21, [x20, #3]
    3f88:	cmp	w19, w21
    3f8c:	b.ne	4008 <longest_match+0x1ac>  // b.any
    3f90:	add	x19, x13, x7
    3f94:	ldrb	w21, [x19, #9]
    3f98:	ldrb	w20, [x20, #4]
    3f9c:	cmp	w21, w20
    3fa0:	b.ne	4014 <longest_match+0x1b8>  // b.any
    3fa4:	add	x20, x7, #0x2
    3fa8:	cmp	x20, #0xf9
    3fac:	add	x20, x7, #0x8
    3fb0:	b.hi	3fcc <longest_match+0x170>  // b.pmore
    3fb4:	add	x7, x6, x7
    3fb8:	ldrb	w19, [x19, #10]
    3fbc:	ldrb	w7, [x7, #5]
    3fc0:	cmp	w19, w7
    3fc4:	mov	x7, x20
    3fc8:	b.eq	3f18 <longest_match+0xbc>  // b.none
    3fcc:	add	x6, x13, x20
    3fd0:	add	x6, x6, #0x2
    3fd4:	b	4018 <longest_match+0x1bc>
    3fd8:	add	x6, x19, #0x3
    3fdc:	b	4018 <longest_match+0x1bc>
    3fe0:	add	x6, x13, x7
    3fe4:	add	x6, x6, #0x4
    3fe8:	b	4018 <longest_match+0x1bc>
    3fec:	add	x6, x19, #0x5
    3ff0:	b	4018 <longest_match+0x1bc>
    3ff4:	add	x6, x13, x7
    3ff8:	add	x6, x6, #0x6
    3ffc:	b	4018 <longest_match+0x1bc>
    4000:	add	x6, x19, #0x7
    4004:	b	4018 <longest_match+0x1bc>
    4008:	add	x6, x13, x7
    400c:	add	x6, x6, #0x8
    4010:	b	4018 <longest_match+0x1bc>
    4014:	add	x6, x19, #0x9
    4018:	sub	x7, x15, x6
    401c:	sub	x6, x2, w7, sxtw
    4020:	cmp	w6, w12
    4024:	b.le	4048 <longest_match+0x1ec>
    4028:	cmp	w6, w18
    402c:	str	w1, [x0, #176]
    4030:	b.ge	4074 <longest_match+0x218>  // b.tcont
    4034:	sub	x12, x3, x7, lsl #32
    4038:	asr	x12, x12, #32
    403c:	ldrb	w4, [x13, x12]
    4040:	ldrb	w5, [x13, x6]
    4044:	mov	w12, w6
    4048:	and	x1, x1, x10
    404c:	ldrh	w1, [x9, x1, lsl #1]
    4050:	cmp	w16, w1
    4054:	b.cs	4060 <longest_match+0x204>  // b.hs, b.nlast
    4058:	subs	w17, w17, #0x1
    405c:	b.ne	3ec8 <longest_match+0x6c>  // b.any
    4060:	ldp	x20, x19, [sp, #16]
    4064:	cmp	w12, w11
    4068:	csel	w0, w11, w12, hi  // hi = pmore
    406c:	ldp	x22, x21, [sp], #32
    4070:	ret
    4074:	mov	w12, w6
    4078:	b	4060 <longest_match+0x204>

infback.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateBackInit_>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	stp	x22, x21, [sp, #16]
       8:	stp	x20, x19, [sp, #32]
       c:	mov	x29, sp
      10:	cbz	x3, a0 <inflateBackInit_+0xa0>
      14:	mov	x21, x0
      18:	cmp	w4, #0x70
      1c:	mov	w0, #0xfffffffa            	// #-6
      20:	b.ne	a4 <inflateBackInit_+0xa4>  // b.any
      24:	ldrb	w8, [x3]
      28:	cmp	w8, #0x31
      2c:	b.ne	a4 <inflateBackInit_+0xa4>  // b.any
      30:	and	w8, w1, #0xfffffff8
      34:	mov	w19, w1
      38:	cmp	w8, #0x8
      3c:	mov	w0, #0xfffffffe            	// #-2
      40:	b.ne	a4 <inflateBackInit_+0xa4>  // b.any
      44:	cbz	x21, a4 <inflateBackInit_+0xa4>
      48:	mov	x20, x2
      4c:	cbz	x2, a4 <inflateBackInit_+0xa4>
      50:	ldr	x8, [x21, #64]
      54:	str	xzr, [x21, #48]
      58:	cbz	x8, b4 <inflateBackInit_+0xb4>
      5c:	ldr	x9, [x21, #72]
      60:	cbz	x9, cc <inflateBackInit_+0xcc>
      64:	ldr	x0, [x21, #80]
      68:	mov	w1, #0x1                   	// #1
      6c:	mov	w2, #0x1bf8                	// #7160
      70:	mov	w22, #0x1                   	// #1
      74:	blr	x8
      78:	cbz	x0, dc <inflateBackInit_+0xdc>
      7c:	mov	x8, x0
      80:	mov	w0, wzr
      84:	mov	w9, #0x8000                	// #32768
      88:	lsl	w10, w22, w19
      8c:	str	x8, [x21, #56]
      90:	stp	xzr, x20, [x8, #64]
      94:	str	w9, [x8, #28]
      98:	stp	w19, w10, [x8, #56]
      9c:	b	a4 <inflateBackInit_+0xa4>
      a0:	mov	w0, #0xfffffffa            	// #-6
      a4:	ldp	x20, x19, [sp, #32]
      a8:	ldp	x22, x21, [sp, #16]
      ac:	ldp	x29, x30, [sp], #48
      b0:	ret
      b4:	adrp	x8, 0 <zcalloc>
      b8:	add	x8, x8, #0x0
      bc:	str	x8, [x21, #64]
      c0:	str	xzr, [x21, #80]
      c4:	ldr	x9, [x21, #72]
      c8:	cbnz	x9, 64 <inflateBackInit_+0x64>
      cc:	adrp	x9, 0 <zcfree>
      d0:	add	x9, x9, #0x0
      d4:	str	x9, [x21, #72]
      d8:	b	64 <inflateBackInit_+0x64>
      dc:	mov	w0, #0xfffffffc            	// #-4
      e0:	b	a4 <inflateBackInit_+0xa4>

00000000000000e4 <inflateBack>:
      e4:	sub	sp, sp, #0xc0
      e8:	stp	x29, x30, [sp, #96]
      ec:	add	x29, sp, #0x50
      f0:	str	d8, [sp, #80]
      f4:	stp	x28, x27, [sp, #112]
      f8:	stp	x26, x25, [sp, #128]
      fc:	stp	x24, x23, [sp, #144]
     100:	stp	x22, x21, [sp, #160]
     104:	stp	x20, x19, [sp, #176]
     108:	stur	x2, [x29, #-8]
     10c:	cbz	x0, 150 <inflateBack+0x6c>
     110:	ldr	x28, [x0, #56]
     114:	mov	x23, x0
     118:	cbz	x28, 150 <inflateBack+0x6c>
     11c:	adrp	x8, 0 <inflateBackInit_>
     120:	ldr	d0, [x8]
     124:	str	xzr, [x23, #48]
     128:	str	wzr, [x28, #64]
     12c:	mov	x24, x1
     130:	str	d0, [x28, #8]
     134:	ldr	x8, [x23]
     138:	stur	x3, [x29, #-32]
     13c:	str	x4, [sp, #40]
     140:	str	x8, [x29, #8]
     144:	cbz	x8, 158 <inflateBack+0x74>
     148:	ldr	w20, [x23, #8]
     14c:	b	15c <inflateBack+0x78>
     150:	mov	w0, #0xfffffffe            	// #-2
     154:	b	fe4 <inflateBack+0xf00>
     158:	mov	w20, wzr
     15c:	add	x8, x28, #0x558
     160:	str	x8, [sp, #32]
     164:	add	x8, x28, #0x78
     168:	str	x8, [sp, #24]
     16c:	add	x8, x28, #0x98
     170:	str	x8, [sp, #16]
     174:	add	x8, x28, #0x318
     178:	stur	x8, [x29, #-24]
     17c:	add	x8, x28, #0x7c
     180:	str	x8, [sp, #8]
     184:	adrp	x8, 0 <inflateBackInit_>
     188:	ldr	x25, [x28, #72]
     18c:	ldr	w26, [x28, #60]
     190:	ldr	d8, [x8]
     194:	adrp	x27, 0 <inflateBackInit_>
     198:	mov	x22, xzr
     19c:	mov	w21, wzr
     1a0:	add	x19, x28, #0x90
     1a4:	add	x27, x27, #0x0
     1a8:	mov	w8, #0x3f3f                	// #16191
     1ac:	stur	x19, [x29, #-16]
     1b0:	mov	w9, #0xffffc0c1            	// #-16191
     1b4:	add	w8, w8, w9
     1b8:	cmp	w8, #0x12
     1bc:	b.hi	1008 <inflateBack+0xf24>  // b.pmore
     1c0:	adrp	x11, 0 <inflateBackInit_>
     1c4:	add	x11, x11, #0x0
     1c8:	adr	x9, 1dc <inflateBack+0xf8>
     1cc:	ldrh	w10, [x11, x8, lsl #1]
     1d0:	add	x9, x9, x10, lsl #2
     1d4:	mov	w0, #0xfffffffd            	// #-3
     1d8:	br	x9
     1dc:	ldr	w8, [x28, #12]
     1e0:	cbz	w8, 2b4 <inflateBack+0x1d0>
     1e4:	and	w8, w21, #0x7
     1e8:	and	w21, w21, #0xfffffff8
     1ec:	lsr	x22, x22, x8
     1f0:	mov	w8, #0x3f50                	// #16208
     1f4:	b	544 <inflateBack+0x460>
     1f8:	and	w8, w21, #0x7
     1fc:	and	w21, w21, #0xfffffff8
     200:	cmp	w21, #0x1f
     204:	lsr	x22, x22, x8
     208:	b.hi	348 <inflateBack+0x264>  // b.pmore
     20c:	mov	w19, w21
     210:	b	240 <inflateBack+0x15c>
     214:	ldr	x8, [x29, #8]
     218:	add	x21, x19, #0x8
     21c:	sub	w20, w20, #0x1
     220:	cmp	x19, #0x18
     224:	add	x9, x8, #0x1
     228:	str	x9, [x29, #8]
     22c:	ldrb	w8, [x8]
     230:	lsl	x8, x8, x19
     234:	add	x22, x8, x22
     238:	mov	x19, x21
     23c:	b.cs	344 <inflateBack+0x260>  // b.hs, b.nlast
     240:	cbnz	w20, 214 <inflateBack+0x130>
     244:	ldur	x0, [x29, #-8]
     248:	add	x1, x29, #0x8
     24c:	blr	x24
     250:	mov	w20, w0
     254:	cbnz	w0, 214 <inflateBack+0x130>
     258:	b	fd0 <inflateBack+0xeec>
     25c:	cmp	w21, #0xd
     260:	b.hi	410 <inflateBack+0x32c>  // b.pmore
     264:	mov	w19, w21
     268:	b	298 <inflateBack+0x1b4>
     26c:	ldr	x8, [x29, #8]
     270:	add	x21, x19, #0x8
     274:	sub	w20, w20, #0x1
     278:	cmp	x19, #0x6
     27c:	add	x9, x8, #0x1
     280:	str	x9, [x29, #8]
     284:	ldrb	w8, [x8]
     288:	lsl	x8, x8, x19
     28c:	add	x22, x8, x22
     290:	mov	x19, x21
     294:	b.cs	40c <inflateBack+0x328>  // b.hs, b.nlast
     298:	cbnz	w20, 26c <inflateBack+0x188>
     29c:	ldur	x0, [x29, #-8]
     2a0:	add	x1, x29, #0x8
     2a4:	blr	x24
     2a8:	mov	w20, w0
     2ac:	cbnz	w0, 26c <inflateBack+0x188>
     2b0:	b	fd0 <inflateBack+0xeec>
     2b4:	cmp	w21, #0x2
     2b8:	b.hi	2f8 <inflateBack+0x214>  // b.pmore
     2bc:	cbnz	w20, 2d4 <inflateBack+0x1f0>
     2c0:	ldur	x0, [x29, #-8]
     2c4:	add	x1, x29, #0x8
     2c8:	blr	x24
     2cc:	mov	w20, w0
     2d0:	cbz	w0, fd0 <inflateBack+0xeec>
     2d4:	ldr	x8, [x29, #8]
     2d8:	sub	w20, w20, #0x1
     2dc:	add	x9, x8, #0x1
     2e0:	str	x9, [x29, #8]
     2e4:	ldrb	w8, [x8]
     2e8:	mov	w9, w21
     2ec:	add	w21, w21, #0x8
     2f0:	lsl	x8, x8, x9
     2f4:	add	x22, x8, x22
     2f8:	adrp	x11, 0 <inflateBackInit_>
     2fc:	and	w8, w22, #0x1
     300:	ubfx	w9, w22, #1, #2
     304:	add	x11, x11, #0x0
     308:	str	w8, [x28, #12]
     30c:	adr	x10, 320 <inflateBack+0x23c>
     310:	ldrb	w8, [x11, x9]
     314:	add	x10, x10, x8, lsl #2
     318:	mov	w8, #0x3f41                	// #16193
     31c:	br	x10
     320:	adrp	x8, 0 <inflateBackInit_>
     324:	add	x8, x8, #0x0
     328:	str	x8, [x28, #104]
     32c:	adrp	x8, 0 <inflateBackInit_>
     330:	add	x8, x8, #0x0
     334:	str	x8, [x28, #112]
     338:	str	d8, [x28, #120]
     33c:	mov	w8, #0x3f48                	// #16200
     340:	b	5d8 <inflateBack+0x4f4>
     344:	ldur	x19, [x29, #-16]
     348:	lsr	x8, x22, #16
     34c:	eor	x8, x8, #0xffff
     350:	cmp	x8, w22, uxth
     354:	b.ne	400 <inflateBack+0x31c>  // b.any
     358:	ands	w19, w22, #0xffff
     35c:	str	w19, [x28, #92]
     360:	b.eq	550 <inflateBack+0x46c>  // b.none
     364:	ldur	x21, [x29, #-32]
     368:	ldr	x22, [sp, #40]
     36c:	b	3c0 <inflateBack+0x2dc>
     370:	cmp	w19, w20
     374:	ldr	x1, [x29, #8]
     378:	csel	w8, w20, w19, hi  // hi = pmore
     37c:	cmp	w8, w26
     380:	csel	w27, w26, w8, hi  // hi = pmore
     384:	mov	x0, x25
     388:	mov	x2, x27
     38c:	bl	0 <memcpy>
     390:	ldr	x8, [x29, #8]
     394:	sub	w20, w20, w27
     398:	sub	w26, w26, w27
     39c:	add	x25, x25, x27
     3a0:	add	x8, x8, x27
     3a4:	str	x8, [x29, #8]
     3a8:	ldr	w8, [x28, #92]
     3ac:	subs	w19, w8, w27
     3b0:	adrp	x27, 0 <inflateBackInit_>
     3b4:	add	x27, x27, #0x0
     3b8:	str	w19, [x28, #92]
     3bc:	b.eq	550 <inflateBack+0x46c>  // b.none
     3c0:	cbnz	w20, 3d8 <inflateBack+0x2f4>
     3c4:	ldur	x0, [x29, #-8]
     3c8:	add	x1, x29, #0x8
     3cc:	blr	x24
     3d0:	mov	w20, w0
     3d4:	cbz	w0, fd0 <inflateBack+0xeec>
     3d8:	cbnz	w26, 370 <inflateBack+0x28c>
     3dc:	ldr	w26, [x28, #60]
     3e0:	ldr	x25, [x28, #72]
     3e4:	mov	x0, x22
     3e8:	mov	w2, w26
     3ec:	mov	x1, x25
     3f0:	str	w26, [x28, #64]
     3f4:	blr	x21
     3f8:	cbz	w0, 370 <inflateBack+0x28c>
     3fc:	b	fd4 <inflateBack+0xef0>
     400:	adrp	x8, 0 <inflateBackInit_>
     404:	add	x8, x8, #0x0
     408:	b	53c <inflateBack+0x458>
     40c:	ldur	x19, [x29, #-16]
     410:	and	w10, w22, #0x1f
     414:	ubfx	w9, w22, #5, #5
     418:	ubfx	w8, w22, #10, #4
     41c:	lsr	x22, x22, #14
     420:	add	w11, w10, #0x101
     424:	add	w12, w9, #0x1
     428:	add	w8, w8, #0x4
     42c:	cmp	w10, #0x1d
     430:	sub	w21, w21, #0xe
     434:	stp	w11, w12, [x28, #132]
     438:	str	w8, [x28, #128]
     43c:	b.hi	4d0 <inflateBack+0x3ec>  // b.pmore
     440:	cmp	w9, #0x1e
     444:	b.cs	4d0 <inflateBack+0x3ec>  // b.hs, b.nlast
     448:	mov	w9, wzr
     44c:	str	wzr, [x28, #140]
     450:	b	4a4 <inflateBack+0x3c0>
     454:	ldr	x10, [x29, #8]
     458:	sub	w20, w20, #0x1
     45c:	add	x11, x10, #0x1
     460:	str	x11, [x29, #8]
     464:	ldrb	w10, [x10]
     468:	mov	w11, w21
     46c:	add	w21, w21, #0x8
     470:	lsl	x10, x10, x11
     474:	add	x22, x10, x22
     478:	add	w10, w9, #0x1
     47c:	ldrh	w9, [x27, w9, uxtw #1]
     480:	and	w11, w22, #0x7
     484:	lsr	x22, x22, #3
     488:	str	w10, [x28, #140]
     48c:	add	x9, x28, x9, lsl #1
     490:	cmp	w10, w8
     494:	strh	w11, [x9, #152]
     498:	sub	w21, w21, #0x3
     49c:	mov	w9, w10
     4a0:	b.cs	4dc <inflateBack+0x3f8>  // b.hs, b.nlast
     4a4:	cmp	w21, #0x2
     4a8:	b.hi	478 <inflateBack+0x394>  // b.pmore
     4ac:	cbnz	w20, 454 <inflateBack+0x370>
     4b0:	ldur	x0, [x29, #-8]
     4b4:	add	x1, x29, #0x8
     4b8:	blr	x24
     4bc:	mov	w20, w0
     4c0:	cbz	w0, fd0 <inflateBack+0xeec>
     4c4:	ldr	w9, [x28, #140]
     4c8:	ldr	w8, [x28, #128]
     4cc:	b	454 <inflateBack+0x370>
     4d0:	adrp	x8, 0 <inflateBackInit_>
     4d4:	add	x8, x8, #0x0
     4d8:	b	53c <inflateBack+0x458>
     4dc:	cmp	w10, #0x12
     4e0:	b.hi	504 <inflateBack+0x420>  // b.pmore
     4e4:	mov	w8, w10
     4e8:	ldrh	w9, [x27, x8, lsl #1]
     4ec:	cmp	x8, #0x12
     4f0:	add	x8, x8, #0x1
     4f4:	add	x9, x28, x9, lsl #1
     4f8:	strh	wzr, [x9, #152]
     4fc:	b.cc	4e8 <inflateBack+0x404>  // b.lo, b.ul, b.last
     500:	str	w8, [x28, #140]
     504:	ldp	x4, x8, [sp, #24]
     508:	ldr	x1, [sp, #16]
     50c:	ldur	x5, [x29, #-24]
     510:	mov	w2, #0x13                  	// #19
     514:	str	x8, [x28, #144]
     518:	str	x8, [x28, #104]
     51c:	mov	w8, #0x7                   	// #7
     520:	mov	w0, wzr
     524:	mov	x3, x19
     528:	str	w8, [x28, #120]
     52c:	bl	0 <inflate_table>
     530:	cbz	w0, 55c <inflateBack+0x478>
     534:	adrp	x8, 0 <inflateBackInit_>
     538:	add	x8, x8, #0x0
     53c:	str	x8, [x23, #48]
     540:	mov	w8, #0x3f51                	// #16209
     544:	str	w8, [x28, #8]
     548:	ldr	w8, [x28, #8]
     54c:	b	1b0 <inflateBack+0xcc>
     550:	mov	x22, xzr
     554:	mov	w21, wzr
     558:	b	bac <inflateBack+0xac8>
     55c:	ldp	w2, w8, [x28, #132]
     560:	str	wzr, [x28, #140]
     564:	cmn	w8, w2
     568:	b.ne	5ec <inflateBack+0x508>  // b.any
     56c:	ldur	x5, [x29, #-24]
     570:	ldr	w8, [x28, #8]
     574:	mov	w9, #0x3f51                	// #16209
     578:	cmp	w8, w9
     57c:	b.eq	548 <inflateBack+0x464>  // b.none
     580:	ldrh	w8, [x28, #664]
     584:	cbz	w8, 948 <inflateBack+0x864>
     588:	ldp	x4, x8, [sp, #24]
     58c:	ldr	x1, [sp, #16]
     590:	mov	w0, #0x1                   	// #1
     594:	mov	x3, x19
     598:	str	x8, [x28, #144]
     59c:	str	x8, [x28, #104]
     5a0:	mov	w8, #0x9                   	// #9
     5a4:	str	w8, [x28, #120]
     5a8:	mov	x27, x5
     5ac:	bl	0 <inflate_table>
     5b0:	cbz	w0, 954 <inflateBack+0x870>
     5b4:	adrp	x8, 0 <inflateBackInit_>
     5b8:	add	x8, x8, #0x0
     5bc:	b	eac <inflateBack+0xdc8>
     5c0:	mov	w8, #0x3f44                	// #16196
     5c4:	b	5d8 <inflateBack+0x4f4>
     5c8:	adrp	x8, 0 <inflateBackInit_>
     5cc:	add	x8, x8, #0x0
     5d0:	str	x8, [x23, #48]
     5d4:	mov	w8, #0x3f51                	// #16209
     5d8:	str	w8, [x28, #8]
     5dc:	lsr	x22, x22, #3
     5e0:	sub	w21, w21, #0x3
     5e4:	mov	w8, w8
     5e8:	b	1b0 <inflateBack+0xcc>
     5ec:	str	x23, [sp]
     5f0:	b	628 <inflateBack+0x544>
     5f4:	ldr	w9, [x28, #140]
     5f8:	lsr	x22, x22, x27
     5fc:	sub	w21, w21, w27
     600:	adrp	x27, 0 <inflateBackInit_>
     604:	add	w11, w9, #0x1
     608:	add	x9, x28, x9, lsl #1
     60c:	str	w11, [x28, #140]
     610:	strh	w8, [x9, #152]
     614:	ldp	w2, w8, [x28, #132]
     618:	add	x27, x27, #0x0
     61c:	add	w9, w8, w2
     620:	cmp	w11, w9
     624:	b.cs	570 <inflateBack+0x48c>  // b.hs, b.nlast
     628:	ldr	w9, [x28, #120]
     62c:	ldr	x8, [x28, #104]
     630:	mov	w10, #0xffffffff            	// #-1
     634:	lsl	w10, w10, w9
     638:	bic	w10, w22, w10
     63c:	add	x10, x8, w10, uxtw #2
     640:	ldrb	w27, [x10, #1]
     644:	cmp	w21, w27
     648:	b.cs	6b4 <inflateBack+0x5d0>  // b.hs, b.nlast
     64c:	mov	w21, w21
     650:	b	690 <inflateBack+0x5ac>
     654:	ldr	x10, [x29, #8]
     658:	sub	w20, w20, #0x1
     65c:	add	x11, x10, #0x1
     660:	str	x11, [x29, #8]
     664:	ldrb	w10, [x10]
     668:	lsl	x10, x10, x21
     66c:	add	x22, x10, x22
     670:	mov	w10, #0xffffffff            	// #-1
     674:	lsl	w10, w10, w9
     678:	bic	w10, w22, w10
     67c:	add	x10, x8, w10, uxtw #2
     680:	ldrb	w27, [x10, #1]
     684:	add	x21, x21, #0x8
     688:	cmp	x21, x27
     68c:	b.cs	6b4 <inflateBack+0x5d0>  // b.hs, b.nlast
     690:	cbnz	w20, 654 <inflateBack+0x570>
     694:	ldur	x0, [x29, #-8]
     698:	add	x1, x29, #0x8
     69c:	blr	x24
     6a0:	mov	w20, w0
     6a4:	cbz	w0, fd0 <inflateBack+0xeec>
     6a8:	ldr	x8, [x28, #104]
     6ac:	ldr	w9, [x28, #120]
     6b0:	b	654 <inflateBack+0x570>
     6b4:	add	x8, x10, #0x2
     6b8:	ldrh	w8, [x8]
     6bc:	ldur	x5, [x29, #-24]
     6c0:	cmp	w8, #0xf
     6c4:	b.ls	5f4 <inflateBack+0x510>  // b.plast
     6c8:	cmp	w8, #0x10
     6cc:	b.eq	744 <inflateBack+0x660>  // b.none
     6d0:	cmp	w8, #0x11
     6d4:	b.ne	7b0 <inflateBack+0x6cc>  // b.any
     6d8:	add	w19, w27, #0x3
     6dc:	cmp	w21, w19
     6e0:	b.cs	820 <inflateBack+0x73c>  // b.hs, b.nlast
     6e4:	mvn	w8, w21
     6e8:	add	w8, w19, w8
     6ec:	add	w8, w8, #0x8
     6f0:	and	w8, w8, #0xfffffff8
     6f4:	mov	w23, w21
     6f8:	add	w21, w8, w21
     6fc:	b	728 <inflateBack+0x644>
     700:	ldr	x8, [x29, #8]
     704:	sub	w20, w20, #0x1
     708:	add	x9, x8, #0x1
     70c:	str	x9, [x29, #8]
     710:	ldrb	w8, [x8]
     714:	lsl	x8, x8, x23
     718:	add	x23, x23, #0x8
     71c:	cmp	x23, x19
     720:	add	x22, x8, x22
     724:	b.cs	81c <inflateBack+0x738>  // b.hs, b.nlast
     728:	cbnz	w20, 700 <inflateBack+0x61c>
     72c:	ldur	x0, [x29, #-8]
     730:	add	x1, x29, #0x8
     734:	blr	x24
     738:	mov	w20, w0
     73c:	cbnz	w0, 700 <inflateBack+0x61c>
     740:	b	fcc <inflateBack+0xee8>
     744:	add	w19, w27, #0x2
     748:	cmp	w21, w19
     74c:	b.cs	848 <inflateBack+0x764>  // b.hs, b.nlast
     750:	mvn	w8, w21
     754:	add	w8, w19, w8
     758:	add	w8, w8, #0x8
     75c:	and	w8, w8, #0xfffffff8
     760:	mov	w23, w21
     764:	add	w21, w8, w21
     768:	b	794 <inflateBack+0x6b0>
     76c:	ldr	x8, [x29, #8]
     770:	sub	w20, w20, #0x1
     774:	add	x9, x8, #0x1
     778:	str	x9, [x29, #8]
     77c:	ldrb	w8, [x8]
     780:	lsl	x8, x8, x23
     784:	add	x23, x23, #0x8
     788:	cmp	x23, x19
     78c:	add	x22, x8, x22
     790:	b.cs	844 <inflateBack+0x760>  // b.hs, b.nlast
     794:	cbnz	w20, 76c <inflateBack+0x688>
     798:	ldur	x0, [x29, #-8]
     79c:	add	x1, x29, #0x8
     7a0:	blr	x24
     7a4:	mov	w20, w0
     7a8:	cbnz	w0, 76c <inflateBack+0x688>
     7ac:	b	fcc <inflateBack+0xee8>
     7b0:	add	w19, w27, #0x7
     7b4:	cmp	w21, w19
     7b8:	b.cs	880 <inflateBack+0x79c>  // b.hs, b.nlast
     7bc:	mvn	w8, w21
     7c0:	add	w8, w19, w8
     7c4:	add	w8, w8, #0x8
     7c8:	and	w8, w8, #0xfffffff8
     7cc:	mov	w23, w21
     7d0:	add	w21, w8, w21
     7d4:	b	800 <inflateBack+0x71c>
     7d8:	ldr	x8, [x29, #8]
     7dc:	sub	w20, w20, #0x1
     7e0:	add	x9, x8, #0x1
     7e4:	str	x9, [x29, #8]
     7e8:	ldrb	w8, [x8]
     7ec:	lsl	x8, x8, x23
     7f0:	add	x23, x23, #0x8
     7f4:	cmp	x23, x19
     7f8:	add	x22, x8, x22
     7fc:	b.cs	87c <inflateBack+0x798>  // b.hs, b.nlast
     800:	cbnz	w20, 7d8 <inflateBack+0x6f4>
     804:	ldur	x0, [x29, #-8]
     808:	add	x1, x29, #0x8
     80c:	blr	x24
     810:	mov	w20, w0
     814:	cbnz	w0, 7d8 <inflateBack+0x6f4>
     818:	b	fcc <inflateBack+0xee8>
     81c:	ldr	x23, [sp]
     820:	ldur	x19, [x29, #-16]
     824:	lsr	x9, x22, x27
     828:	sub	w11, w21, w27
     82c:	and	w10, w9, #0x7
     830:	mov	w8, wzr
     834:	lsr	x22, x9, #3
     838:	add	w10, w10, #0x3
     83c:	sub	w21, w11, #0x3
     840:	b	8a0 <inflateBack+0x7bc>
     844:	ldr	x23, [sp]
     848:	ldr	w8, [x28, #140]
     84c:	ldur	x19, [x29, #-16]
     850:	lsr	x22, x22, x27
     854:	sub	w21, w21, w27
     858:	cbz	w8, fc0 <inflateBack+0xedc>
     85c:	sub	w8, w8, #0x1
     860:	add	x8, x28, w8, uxtw #1
     864:	ldrh	w8, [x8, #152]
     868:	and	w9, w22, #0x3
     86c:	add	w10, w9, #0x3
     870:	lsr	x22, x22, #2
     874:	sub	w21, w21, #0x2
     878:	b	8a0 <inflateBack+0x7bc>
     87c:	ldr	x23, [sp]
     880:	ldur	x19, [x29, #-16]
     884:	lsr	x9, x22, x27
     888:	sub	w11, w21, w27
     88c:	and	w10, w9, #0x7f
     890:	mov	w8, wzr
     894:	lsr	x22, x9, #7
     898:	add	w10, w10, #0xb
     89c:	sub	w21, w11, #0x7
     8a0:	ldp	w9, w13, [x28, #136]
     8a4:	ldr	w2, [x28, #132]
     8a8:	adrp	x27, 0 <inflateBackInit_>
     8ac:	add	x27, x27, #0x0
     8b0:	add	w11, w13, w10
     8b4:	add	w9, w9, w2
     8b8:	cmp	w11, w9
     8bc:	b.hi	994 <inflateBack+0x8b0>  // b.pmore
     8c0:	cmp	w10, #0xf
     8c4:	b.ls	8d8 <inflateBack+0x7f4>  // b.plast
     8c8:	sub	w11, w10, #0x1
     8cc:	mvn	w12, w13
     8d0:	cmp	w11, w12
     8d4:	b.ls	910 <inflateBack+0x82c>  // b.plast
     8d8:	mov	w11, w13
     8dc:	mov	w12, w10
     8e0:	mov	w10, w11
     8e4:	add	w11, w10, #0x1
     8e8:	add	x10, x28, w10, uxtw #1
     8ec:	subs	w12, w12, #0x1
     8f0:	strh	w8, [x10, #152]
     8f4:	mov	w10, w11
     8f8:	b.ne	8e4 <inflateBack+0x800>  // b.any
     8fc:	ldur	x5, [x29, #-24]
     900:	str	w11, [x28, #140]
     904:	cmp	w11, w9
     908:	b.cc	628 <inflateBack+0x544>  // b.lo, b.ul, b.last
     90c:	b	570 <inflateBack+0x48c>
     910:	and	w14, w10, #0xf0
     914:	and	w12, w10, #0xf
     918:	add	w11, w13, w14
     91c:	dup	v0.8h, w8
     920:	mov	w15, w14
     924:	add	x16, x28, w13, uxtw #1
     928:	subs	w15, w15, #0x10
     92c:	add	w13, w13, #0x10
     930:	stur	q0, [x16, #152]
     934:	stur	q0, [x16, #168]
     938:	b.ne	924 <inflateBack+0x840>  // b.any
     93c:	cmp	w10, w14
     940:	b.ne	8e0 <inflateBack+0x7fc>  // b.any
     944:	b	8fc <inflateBack+0x818>
     948:	adrp	x8, 0 <inflateBackInit_>
     94c:	add	x8, x8, #0x0
     950:	b	53c <inflateBack+0x458>
     954:	ldr	x8, [x28, #144]
     958:	ldp	w9, w2, [x28, #132]
     95c:	ldr	x4, [sp, #8]
     960:	mov	w10, #0x6                   	// #6
     964:	str	x8, [x28, #112]
     968:	add	x8, x28, x9, lsl #1
     96c:	add	x1, x8, #0x98
     970:	mov	w0, #0x2                   	// #2
     974:	mov	x3, x19
     978:	mov	x5, x27
     97c:	str	w10, [x28, #124]
     980:	bl	0 <inflate_table>
     984:	cbz	w0, 9a0 <inflateBack+0x8bc>
     988:	adrp	x8, 0 <inflateBackInit_>
     98c:	add	x8, x8, #0x0
     990:	b	eac <inflateBack+0xdc8>
     994:	adrp	x8, 0 <inflateBackInit_>
     998:	add	x8, x8, #0x0
     99c:	b	53c <inflateBack+0x458>
     9a0:	adrp	x27, 0 <inflateBackInit_>
     9a4:	mov	w8, #0x3f48                	// #16200
     9a8:	add	x27, x27, #0x0
     9ac:	str	w8, [x28, #8]
     9b0:	cmp	w26, #0x102
     9b4:	b.cc	a1c <inflateBack+0x938>  // b.lo, b.ul, b.last
     9b8:	cmp	w20, #0x5
     9bc:	b.ls	a1c <inflateBack+0x938>  // b.plast
     9c0:	str	x25, [x23, #24]
     9c4:	str	w26, [x23, #32]
     9c8:	ldr	x8, [x29, #8]
     9cc:	str	w20, [x23, #8]
     9d0:	str	x8, [x23]
     9d4:	ldp	w1, w8, [x28, #60]
     9d8:	str	x22, [x28, #80]
     9dc:	str	w21, [x28, #88]
     9e0:	cmp	w8, w1
     9e4:	b.cs	9f0 <inflateBack+0x90c>  // b.hs, b.nlast
     9e8:	sub	w8, w1, w26
     9ec:	str	w8, [x28, #64]
     9f0:	mov	x0, x23
     9f4:	bl	0 <inflate_fast>
     9f8:	ldr	x8, [x23]
     9fc:	ldr	x25, [x23, #24]
     a00:	ldr	w26, [x23, #32]
     a04:	str	x8, [x29, #8]
     a08:	ldr	w20, [x23, #8]
     a0c:	ldr	x22, [x28, #80]
     a10:	ldr	w21, [x28, #88]
     a14:	ldr	w8, [x28, #8]
     a18:	b	1b0 <inflateBack+0xcc>
     a1c:	ldr	w9, [x28, #120]
     a20:	ldr	x8, [x28, #104]
     a24:	mov	w19, #0xffffffff            	// #-1
     a28:	lsl	w10, w19, w9
     a2c:	bic	w10, w22, w10
     a30:	add	x10, x8, w10, uxtw #2
     a34:	ldrb	w27, [x10, #1]
     a38:	cmp	w21, w27
     a3c:	b.cs	aa4 <inflateBack+0x9c0>  // b.hs, b.nlast
     a40:	mov	w21, w21
     a44:	b	a80 <inflateBack+0x99c>
     a48:	ldr	x10, [x29, #8]
     a4c:	sub	w20, w20, #0x1
     a50:	add	x11, x10, #0x1
     a54:	str	x11, [x29, #8]
     a58:	ldrb	w10, [x10]
     a5c:	lsl	x10, x10, x21
     a60:	add	x22, x10, x22
     a64:	lsl	w10, w19, w9
     a68:	bic	w10, w22, w10
     a6c:	add	x10, x8, w10, uxtw #2
     a70:	ldrb	w27, [x10, #1]
     a74:	add	x21, x21, #0x8
     a78:	cmp	x21, x27
     a7c:	b.cs	aa4 <inflateBack+0x9c0>  // b.hs, b.nlast
     a80:	cbnz	w20, a48 <inflateBack+0x964>
     a84:	ldur	x0, [x29, #-8]
     a88:	add	x1, x29, #0x8
     a8c:	blr	x24
     a90:	mov	w20, w0
     a94:	cbz	w0, fd0 <inflateBack+0xeec>
     a98:	ldr	x8, [x28, #104]
     a9c:	ldr	w9, [x28, #120]
     aa0:	b	a48 <inflateBack+0x964>
     aa4:	add	x11, x10, #0x2
     aa8:	ldrb	w9, [x10]
     aac:	ldrh	w19, [x11]
     ab0:	cbz	w9, b74 <inflateBack+0xa90>
     ab4:	and	w10, w9, #0xf0
     ab8:	cbnz	w10, b74 <inflateBack+0xa90>
     abc:	add	w9, w27, w9
     ac0:	mov	w10, #0xffffffff            	// #-1
     ac4:	lsl	w11, w10, w9
     ac8:	bic	w9, w22, w11
     acc:	lsr	w9, w9, w27
     ad0:	add	w9, w9, w19
     ad4:	add	x10, x8, w9, uxtw #2
     ad8:	ldrb	w10, [x10, #1]
     adc:	add	w12, w27, w10
     ae0:	cmp	w12, w21
     ae4:	b.ls	b5c <inflateBack+0xa78>  // b.plast
     ae8:	str	x23, [sp]
     aec:	mvn	w23, w11
     af0:	b	b34 <inflateBack+0xa50>
     af4:	ldr	x9, [x29, #8]
     af8:	sub	w20, w20, #0x1
     afc:	add	x10, x9, #0x1
     b00:	str	x10, [x29, #8]
     b04:	ldrb	w9, [x9]
     b08:	lsl	x9, x9, x21
     b0c:	add	x22, x9, x22
     b10:	and	w9, w22, w23
     b14:	lsr	w9, w9, w27
     b18:	add	w9, w9, w19
     b1c:	add	x10, x8, w9, uxtw #2
     b20:	ldrb	w10, [x10, #1]
     b24:	add	w21, w21, #0x8
     b28:	add	w11, w27, w10
     b2c:	cmp	w11, w21
     b30:	b.ls	b54 <inflateBack+0xa70>  // b.plast
     b34:	cbnz	w20, af4 <inflateBack+0xa10>
     b38:	ldur	x0, [x29, #-8]
     b3c:	add	x1, x29, #0x8
     b40:	blr	x24
     b44:	mov	w20, w0
     b48:	cbz	w0, fcc <inflateBack+0xee8>
     b4c:	ldr	x8, [x28, #104]
     b50:	b	af4 <inflateBack+0xa10>
     b54:	ldr	x23, [sp]
     b58:	mov	w9, w9
     b5c:	add	x8, x8, x9, lsl #2
     b60:	ldrh	w19, [x8, #2]
     b64:	ldrb	w9, [x8]
     b68:	lsr	x22, x22, x27
     b6c:	sub	w21, w21, w27
     b70:	mov	w27, w10
     b74:	lsr	x22, x22, x27
     b78:	sub	w21, w21, w27
     b7c:	adrp	x27, 0 <inflateBackInit_>
     b80:	add	x27, x27, #0x0
     b84:	str	w19, [x28, #92]
     b88:	cbz	w9, bfc <inflateBack+0xb18>
     b8c:	tbnz	w9, #5, bac <inflateBack+0xac8>
     b90:	tbnz	w9, #6, c38 <inflateBack+0xb54>
     b94:	ands	w8, w9, #0xf
     b98:	str	w8, [x28, #100]
     b9c:	b.eq	c58 <inflateBack+0xb74>  // b.none
     ba0:	cmp	w21, w8
     ba4:	b.cc	be0 <inflateBack+0xafc>  // b.lo, b.ul, b.last
     ba8:	b	c64 <inflateBack+0xb80>
     bac:	mov	w8, #0x3f3f                	// #16191
     bb0:	b	c48 <inflateBack+0xb64>
     bb4:	ldr	w8, [x28, #100]
     bb8:	ldr	x9, [x29, #8]
     bbc:	sub	w20, w20, #0x1
     bc0:	add	x10, x9, #0x1
     bc4:	str	x10, [x29, #8]
     bc8:	ldrb	w9, [x9]
     bcc:	lsl	x9, x9, x21
     bd0:	add	w21, w21, #0x8
     bd4:	cmp	w21, w8
     bd8:	add	x22, x9, x22
     bdc:	b.cs	c60 <inflateBack+0xb7c>  // b.hs, b.nlast
     be0:	cbnz	w20, bb8 <inflateBack+0xad4>
     be4:	ldur	x0, [x29, #-8]
     be8:	add	x1, x29, #0x8
     bec:	blr	x24
     bf0:	mov	w20, w0
     bf4:	cbnz	w0, bb4 <inflateBack+0xad0>
     bf8:	b	fd0 <inflateBack+0xeec>
     bfc:	cbnz	w26, c28 <inflateBack+0xb44>
     c00:	ldr	w26, [x28, #60]
     c04:	ldr	x25, [x28, #72]
     c08:	ldr	x0, [sp, #40]
     c0c:	ldur	x8, [x29, #-32]
     c10:	mov	w2, w26
     c14:	mov	x1, x25
     c18:	str	w26, [x28, #64]
     c1c:	blr	x8
     c20:	cbnz	w0, fd4 <inflateBack+0xef0>
     c24:	ldr	w19, [x28, #92]
     c28:	strb	w19, [x25], #1
     c2c:	sub	w26, w26, #0x1
     c30:	mov	w8, #0x3f48                	// #16200
     c34:	b	c48 <inflateBack+0xb64>
     c38:	adrp	x8, 0 <inflateBackInit_>
     c3c:	add	x8, x8, #0x0
     c40:	str	x8, [x23, #48]
     c44:	mov	w8, #0x3f51                	// #16209
     c48:	str	w8, [x28, #8]
     c4c:	ldur	x19, [x29, #-16]
     c50:	mov	w8, w8
     c54:	b	1b0 <inflateBack+0xcc>
     c58:	mov	w10, #0xffffffff            	// #-1
     c5c:	b	c80 <inflateBack+0xb9c>
     c60:	ldr	w19, [x28, #92]
     c64:	mov	w10, #0xffffffff            	// #-1
     c68:	lsl	w9, w10, w8
     c6c:	bic	w9, w22, w9
     c70:	lsr	x22, x22, x8
     c74:	add	w9, w19, w9
     c78:	sub	w21, w21, w8
     c7c:	str	w9, [x28, #92]
     c80:	ldr	w9, [x28, #124]
     c84:	ldr	x8, [x28, #112]
     c88:	lsl	w10, w10, w9
     c8c:	bic	w10, w22, w10
     c90:	add	x10, x8, w10, uxtw #2
     c94:	ldrb	w19, [x10, #1]
     c98:	cmp	w21, w19
     c9c:	b.cs	d08 <inflateBack+0xc24>  // b.hs, b.nlast
     ca0:	mov	w21, w21
     ca4:	b	ce0 <inflateBack+0xbfc>
     ca8:	ldr	x10, [x29, #8]
     cac:	sub	w20, w20, #0x1
     cb0:	add	x11, x10, #0x1
     cb4:	str	x11, [x29, #8]
     cb8:	ldrb	w10, [x10]
     cbc:	lsl	x10, x10, x21
     cc0:	add	x22, x10, x22
     cc4:	lsl	w10, w19, w9
     cc8:	bic	w10, w22, w10
     ccc:	add	x10, x8, w10, uxtw #2
     cd0:	ldrb	w19, [x10, #1]
     cd4:	add	x21, x21, #0x8
     cd8:	cmp	x21, x19
     cdc:	b.cs	d08 <inflateBack+0xc24>  // b.hs, b.nlast
     ce0:	mov	w19, #0xffffffff            	// #-1
     ce4:	cbnz	w20, ca8 <inflateBack+0xbc4>
     ce8:	ldur	x0, [x29, #-8]
     cec:	add	x1, x29, #0x8
     cf0:	blr	x24
     cf4:	mov	w20, w0
     cf8:	cbz	w0, fd0 <inflateBack+0xeec>
     cfc:	ldr	x8, [x28, #112]
     d00:	ldr	w9, [x28, #124]
     d04:	b	ca8 <inflateBack+0xbc4>
     d08:	add	x9, x10, #0x2
     d0c:	ldrb	w10, [x10]
     d10:	ldrh	w27, [x9]
     d14:	tst	w10, #0xf0
     d18:	b.ne	dd4 <inflateBack+0xcf0>  // b.any
     d1c:	add	w9, w19, w10
     d20:	mov	w10, #0xffffffff            	// #-1
     d24:	lsl	w11, w10, w9
     d28:	bic	w9, w22, w11
     d2c:	lsr	w9, w9, w19
     d30:	add	w10, w9, w27
     d34:	add	x9, x8, w10, uxtw #2
     d38:	ldrb	w9, [x9, #1]
     d3c:	add	w12, w19, w9
     d40:	cmp	w12, w21
     d44:	b.ls	dbc <inflateBack+0xcd8>  // b.plast
     d48:	str	x23, [sp]
     d4c:	mvn	w23, w11
     d50:	b	d98 <inflateBack+0xcb4>
     d54:	ldr	x8, [x28, #112]
     d58:	ldr	x9, [x29, #8]
     d5c:	sub	w20, w20, #0x1
     d60:	add	x10, x9, #0x1
     d64:	str	x10, [x29, #8]
     d68:	ldrb	w9, [x9]
     d6c:	lsl	x9, x9, x21
     d70:	add	x22, x9, x22
     d74:	and	w9, w22, w23
     d78:	lsr	w9, w9, w19
     d7c:	add	w10, w9, w27
     d80:	add	x9, x8, w10, uxtw #2
     d84:	ldrb	w9, [x9, #1]
     d88:	add	w21, w21, #0x8
     d8c:	add	w11, w19, w9
     d90:	cmp	w11, w21
     d94:	b.ls	db4 <inflateBack+0xcd0>  // b.plast
     d98:	cbnz	w20, d58 <inflateBack+0xc74>
     d9c:	ldur	x0, [x29, #-8]
     da0:	add	x1, x29, #0x8
     da4:	blr	x24
     da8:	mov	w20, w0
     dac:	cbnz	w0, d54 <inflateBack+0xc70>
     db0:	b	fcc <inflateBack+0xee8>
     db4:	ldr	x23, [sp]
     db8:	mov	w10, w10
     dbc:	add	x8, x8, x10, lsl #2
     dc0:	ldrh	w27, [x8, #2]
     dc4:	ldrb	w10, [x8]
     dc8:	lsr	x22, x22, x19
     dcc:	sub	w21, w21, w19
     dd0:	mov	w19, w9
     dd4:	lsr	x22, x22, x19
     dd8:	sub	w21, w21, w19
     ddc:	tbnz	w10, #6, e44 <inflateBack+0xd60>
     de0:	ands	w8, w10, #0xf
     de4:	stp	w27, w8, [x28, #96]
     de8:	ldur	x19, [x29, #-16]
     dec:	b.eq	e8c <inflateBack+0xda8>  // b.none
     df0:	cmp	w21, w8
     df4:	b.cc	e24 <inflateBack+0xd40>  // b.lo, b.ul, b.last
     df8:	b	e70 <inflateBack+0xd8c>
     dfc:	ldr	x9, [x29, #8]
     e00:	sub	w20, w20, #0x1
     e04:	add	x10, x9, #0x1
     e08:	str	x10, [x29, #8]
     e0c:	ldrb	w9, [x9]
     e10:	lsl	x9, x9, x21
     e14:	add	w21, w21, #0x8
     e18:	cmp	w21, w8
     e1c:	add	x22, x9, x22
     e20:	b.cs	e6c <inflateBack+0xd88>  // b.hs, b.nlast
     e24:	cbnz	w20, dfc <inflateBack+0xd18>
     e28:	ldur	x0, [x29, #-8]
     e2c:	add	x1, x29, #0x8
     e30:	blr	x24
     e34:	mov	w20, w0
     e38:	cbz	w0, fd0 <inflateBack+0xeec>
     e3c:	ldr	w8, [x28, #100]
     e40:	b	dfc <inflateBack+0xd18>
     e44:	adrp	x8, 0 <inflateBackInit_>
     e48:	ldur	x19, [x29, #-16]
     e4c:	add	x8, x8, #0x0
     e50:	str	x8, [x23, #48]
     e54:	mov	w8, #0x3f51                	// #16209
     e58:	adrp	x27, 0 <inflateBackInit_>
     e5c:	str	w8, [x28, #8]
     e60:	add	x27, x27, #0x0
     e64:	mov	w8, w8
     e68:	b	1b0 <inflateBack+0xcc>
     e6c:	ldr	w27, [x28, #96]
     e70:	mov	w9, #0xffffffff            	// #-1
     e74:	lsl	w9, w9, w8
     e78:	bic	w9, w22, w9
     e7c:	lsr	x22, x22, x8
     e80:	add	w27, w27, w9
     e84:	sub	w21, w21, w8
     e88:	str	w27, [x28, #96]
     e8c:	ldp	w8, w9, [x28, #60]
     e90:	cmp	w9, w8
     e94:	csel	w9, w26, wzr, cc  // cc = lo, ul, last
     e98:	sub	w8, w8, w9
     e9c:	cmp	w27, w8
     ea0:	b.ls	ed4 <inflateBack+0xdf0>  // b.plast
     ea4:	adrp	x8, 0 <inflateBackInit_>
     ea8:	add	x8, x8, #0x0
     eac:	str	x8, [x23, #48]
     eb0:	mov	w8, #0x3f51                	// #16209
     eb4:	adrp	x27, 0 <inflateBackInit_>
     eb8:	str	w8, [x28, #8]
     ebc:	add	x27, x27, #0x0
     ec0:	mov	w8, w8
     ec4:	b	1b0 <inflateBack+0xcc>
     ec8:	ldr	w9, [x28, #92]
     ecc:	sub	w26, w26, w8
     ed0:	cbz	w9, fb0 <inflateBack+0xecc>
     ed4:	mov	x27, x25
     ed8:	cbnz	w26, f00 <inflateBack+0xe1c>
     edc:	ldr	w26, [x28, #60]
     ee0:	ldr	x27, [x28, #72]
     ee4:	ldr	x0, [sp, #40]
     ee8:	ldur	x8, [x29, #-32]
     eec:	mov	w2, w26
     ef0:	mov	x1, x27
     ef4:	str	w26, [x28, #64]
     ef8:	blr	x8
     efc:	cbnz	w0, fd4 <inflateBack+0xef0>
     f00:	ldr	w8, [x28, #60]
     f04:	ldp	w10, w9, [x28, #92]
     f08:	sub	w8, w8, w9
     f0c:	cmp	w26, w8
     f10:	csel	w12, w8, wzr, hi  // hi = pmore
     f14:	csneg	x11, x8, x9, hi  // hi = pmore
     f18:	sub	w8, w26, w12
     f1c:	cmp	w8, w10
     f20:	csel	w8, w10, w8, hi  // hi = pmore
     f24:	sub	w12, w10, w8
     f28:	sub	w10, w8, #0x1
     f2c:	add	x9, x27, x11
     f30:	cmp	w10, #0x1f
     f34:	str	w12, [x28, #92]
     f38:	b.cc	f5c <inflateBack+0xe78>  // b.lo, b.ul, b.last
     f3c:	add	x12, x27, #0x1
     f40:	add	x13, x11, x10
     f44:	add	x13, x12, x13
     f48:	cmp	x27, x13
     f4c:	b.cs	f78 <inflateBack+0xe94>  // b.hs, b.nlast
     f50:	add	x12, x12, x10
     f54:	cmp	x9, x12
     f58:	b.cs	f78 <inflateBack+0xe94>  // b.hs, b.nlast
     f5c:	mov	x25, x27
     f60:	mov	w10, w8
     f64:	ldrb	w11, [x9], #1
     f68:	subs	w10, w10, #0x1
     f6c:	strb	w11, [x25], #1
     f70:	b.ne	f64 <inflateBack+0xe80>  // b.any
     f74:	b	ec8 <inflateBack+0xde4>
     f78:	add	x12, x10, #0x1
     f7c:	and	x13, x12, #0x1ffffffe0
     f80:	add	x25, x27, x13
     f84:	sub	w10, w8, w13
     f88:	add	x9, x9, x13
     f8c:	mov	x14, x13
     f90:	add	x15, x27, x11
     f94:	ldp	q0, q1, [x15]
     f98:	subs	x14, x14, #0x20
     f9c:	stp	q0, q1, [x27], #32
     fa0:	b.ne	f90 <inflateBack+0xeac>  // b.any
     fa4:	cmp	x12, x13
     fa8:	b.ne	f64 <inflateBack+0xe80>  // b.any
     fac:	b	ec8 <inflateBack+0xde4>
     fb0:	ldr	w8, [x28, #8]
     fb4:	adrp	x27, 0 <inflateBackInit_>
     fb8:	add	x27, x27, #0x0
     fbc:	b	1b0 <inflateBack+0xcc>
     fc0:	adrp	x8, 0 <inflateBackInit_>
     fc4:	add	x8, x8, #0x0
     fc8:	b	eac <inflateBack+0xdc8>
     fcc:	ldr	x23, [sp]
     fd0:	str	xzr, [x29, #8]
     fd4:	mov	w0, #0xfffffffb            	// #-5
     fd8:	ldr	x8, [x29, #8]
     fdc:	str	w20, [x23, #8]
     fe0:	str	x8, [x23]
     fe4:	ldp	x20, x19, [sp, #176]
     fe8:	ldp	x22, x21, [sp, #160]
     fec:	ldp	x24, x23, [sp, #144]
     ff0:	ldp	x26, x25, [sp, #128]
     ff4:	ldp	x28, x27, [sp, #112]
     ff8:	ldp	x29, x30, [sp, #96]
     ffc:	ldr	d8, [sp, #80]
    1000:	add	sp, sp, #0xc0
    1004:	ret
    1008:	mov	w0, #0xfffffffe            	// #-2
    100c:	b	fd8 <inflateBack+0xef4>
    1010:	ldr	w8, [x28, #60]
    1014:	subs	w2, w8, w26
    1018:	b.ls	103c <inflateBack+0xf58>  // b.plast
    101c:	ldr	x1, [x28, #72]
    1020:	ldr	x0, [sp, #40]
    1024:	ldur	x8, [x29, #-32]
    1028:	blr	x8
    102c:	cmp	w0, #0x0
    1030:	mov	w8, #0xfffffffb            	// #-5
    1034:	csinc	w0, w8, wzr, ne  // ne = any
    1038:	b	fd8 <inflateBack+0xef4>
    103c:	mov	w0, #0x1                   	// #1
    1040:	b	fd8 <inflateBack+0xef4>

0000000000001044 <inflateBackEnd>:
    1044:	stp	x29, x30, [sp, #-32]!
    1048:	str	x19, [sp, #16]
    104c:	mov	x29, sp
    1050:	cbz	x0, 107c <inflateBackEnd+0x38>
    1054:	ldr	x1, [x0, #56]
    1058:	mov	x19, x0
    105c:	cbz	x1, 107c <inflateBackEnd+0x38>
    1060:	ldr	x8, [x19, #72]
    1064:	cbz	x8, 107c <inflateBackEnd+0x38>
    1068:	ldr	x0, [x19, #80]
    106c:	blr	x8
    1070:	mov	w0, wzr
    1074:	str	xzr, [x19, #56]
    1078:	b	1080 <inflateBackEnd+0x3c>
    107c:	mov	w0, #0xfffffffe            	// #-2
    1080:	ldr	x19, [sp, #16]
    1084:	ldp	x29, x30, [sp], #32
    1088:	ret

inffast.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_fast>:
   0:	sub	sp, sp, #0xa0
   4:	stp	x29, x30, [sp, #64]
   8:	stp	x28, x27, [sp, #80]
   c:	stp	x26, x25, [sp, #96]
  10:	stp	x24, x23, [sp, #112]
  14:	stp	x22, x21, [sp, #128]
  18:	stp	x20, x19, [sp, #144]
  1c:	ldr	x8, [x0, #56]
  20:	ldr	w11, [x0, #32]
  24:	ldr	w10, [x0, #8]
  28:	ldr	x30, [x0, #24]
  2c:	ldp	w17, w18, [x8, #60]
  30:	sub	w15, w1, w11
  34:	ldr	w1, [x8, #68]
  38:	ldp	w2, w7, [x8, #120]
  3c:	sub	w12, w10, #0x5
  40:	ldp	x28, x10, [x8, #72]
  44:	sub	x5, x30, x15
  48:	mov	w14, #0xffffffff            	// #-1
  4c:	sub	w15, w5, #0x1
  50:	ldr	x9, [x0]
  54:	ldp	x3, x4, [x8, #104]
  58:	str	w15, [sp, #60]
  5c:	lsl	w15, w14, w2
  60:	add	w2, w1, w17
  64:	str	w2, [sp, #56]
  68:	add	x2, x28, #0x1
  6c:	str	x2, [sp, #48]
  70:	sub	w20, w1, #0x1
  74:	mvn	w2, w1
  78:	sub	w16, w11, #0x101
  7c:	mvn	w22, w15
  80:	add	x24, x20, #0x1
  84:	add	w15, w2, w5
  88:	add	x11, x9, x12
  8c:	add	x12, x30, x16
  90:	lsl	w16, w14, w7
  94:	add	x7, x28, #0x10
  98:	str	w15, [sp, #44]
  9c:	add	x15, x28, x24
  a0:	and	x27, x24, #0x1ffffffe0
  a4:	ldr	w13, [x8, #88]
  a8:	stp	x15, x7, [sp, #24]
  ac:	sub	w15, w1, w27
  b0:	str	w15, [sp, #20]
  b4:	add	x15, x28, x27
  b8:	adrp	x6, 0 <inflate_fast>
  bc:	str	x15, [sp, #8]
  c0:	adrp	x15, 0 <inflate_fast>
  c4:	add	x6, x6, #0x0
  c8:	mvn	w23, w16
  cc:	add	x15, x15, #0x0
  d0:	cmp	w13, #0xe
  d4:	b.hi	fc <inflate_fast+0xfc>  // b.pmore
  d8:	ldrb	w16, [x9]
  dc:	ldrb	w2, [x9, #1]
  e0:	add	w7, w13, #0x8
  e4:	add	x9, x9, #0x2
  e8:	lsl	x16, x16, x13
  ec:	lsl	x2, x2, x7
  f0:	add	x10, x16, x10
  f4:	add	x10, x10, x2
  f8:	add	w13, w13, #0x10
  fc:	and	x16, x10, x22
 100:	add	x16, x3, x16, lsl #2
 104:	ldrb	w7, [x16, #1]
 108:	ldrb	w2, [x16]
 10c:	ldrh	w16, [x16, #2]
 110:	lsr	x10, x10, x7
 114:	sub	w13, w13, w7
 118:	cbz	w2, 13c <inflate_fast+0x13c>
 11c:	and	w7, w2, #0xff
 120:	tbnz	w2, #4, 154 <inflate_fast+0x154>
 124:	tbnz	w7, #6, 67c <inflate_fast+0x67c>
 128:	lsl	w2, w14, w7
 12c:	mvn	w2, w2
 130:	and	x2, x10, x2
 134:	add	x16, x2, w16, uxth
 138:	b	100 <inflate_fast+0x100>
 13c:	strb	w16, [x30], #1
 140:	cmp	x30, x12
 144:	b.cs	6a4 <inflate_fast+0x6a4>  // b.hs, b.nlast
 148:	cmp	x9, x11
 14c:	b.cc	d0 <inflate_fast+0xd0>  // b.lo, b.ul, b.last
 150:	b	6a4 <inflate_fast+0x6a4>
 154:	ands	w2, w7, #0xf
 158:	and	w16, w16, #0xffff
 15c:	b.eq	18c <inflate_fast+0x18c>  // b.none
 160:	cmp	w13, w2
 164:	b.cs	178 <inflate_fast+0x178>  // b.hs, b.nlast
 168:	ldrb	w7, [x9], #1
 16c:	lsl	x7, x7, x13
 170:	add	x10, x7, x10
 174:	add	w13, w13, #0x8
 178:	lsl	w7, w14, w2
 17c:	bic	w7, w10, w7
 180:	lsr	x10, x10, x2
 184:	add	w16, w7, w16
 188:	sub	w13, w13, w2
 18c:	cmp	w13, #0xe
 190:	b.hi	1b8 <inflate_fast+0x1b8>  // b.pmore
 194:	ldrb	w2, [x9]
 198:	ldrb	w7, [x9, #1]
 19c:	add	w19, w13, #0x8
 1a0:	add	x9, x9, #0x2
 1a4:	lsl	x2, x2, x13
 1a8:	lsl	x7, x7, x19
 1ac:	add	x10, x2, x10
 1b0:	add	x10, x10, x7
 1b4:	add	w13, w13, #0x10
 1b8:	and	x2, x10, x23
 1bc:	add	x7, x4, x2, lsl #2
 1c0:	ldrb	w19, [x7, #1]
 1c4:	ldrb	w2, [x7]
 1c8:	ldrh	w25, [x7, #2]
 1cc:	lsr	x10, x10, x19
 1d0:	sub	w13, w13, w19
 1d4:	tbnz	w2, #4, 1f0 <inflate_fast+0x1f0>
 1d8:	tbnz	w2, #6, 694 <inflate_fast+0x694>
 1dc:	lsl	w2, w14, w2
 1e0:	mvn	w2, w2
 1e4:	and	x2, x10, x2
 1e8:	add	x2, x2, w25, uxth
 1ec:	b	1bc <inflate_fast+0x1bc>
 1f0:	and	w2, w2, #0xf
 1f4:	cmp	w13, w2
 1f8:	b.cs	230 <inflate_fast+0x230>  // b.hs, b.nlast
 1fc:	mov	x7, x9
 200:	ldrb	w19, [x7], #1
 204:	add	w21, w13, #0x8
 208:	cmp	w21, w2
 20c:	lsl	x19, x19, x13
 210:	add	x10, x19, x10
 214:	b.cs	238 <inflate_fast+0x238>  // b.hs, b.nlast
 218:	ldrb	w7, [x9, #1]
 21c:	add	x9, x9, #0x2
 220:	lsl	x7, x7, x21
 224:	add	x10, x7, x10
 228:	add	w21, w13, #0x10
 22c:	b	23c <inflate_fast+0x23c>
 230:	mov	w21, w13
 234:	b	23c <inflate_fast+0x23c>
 238:	mov	x9, x7
 23c:	lsl	w13, w14, w2
 240:	bic	w19, w10, w13
 244:	add	w26, w19, w25
 248:	sub	w13, w30, w5
 24c:	lsr	x10, x10, x2
 250:	subs	w29, w26, w13
 254:	sub	w13, w21, w2
 258:	b.ls	2b0 <inflate_fast+0x2b0>  // b.plast
 25c:	cmp	w29, w18
 260:	b.ls	26c <inflate_fast+0x26c>  // b.plast
 264:	ldr	w2, [x8, #7144]
 268:	cbnz	w2, 698 <inflate_fast+0x698>
 26c:	cbz	w1, 330 <inflate_fast+0x330>
 270:	subs	w21, w1, w29
 274:	b.cs	360 <inflate_fast+0x360>  // b.hs, b.nlast
 278:	ldr	w2, [sp, #56]
 27c:	sub	w21, w29, w1
 280:	sub	w7, w2, w29
 284:	subs	w29, w16, w21
 288:	add	x2, x28, x7
 28c:	b.ls	5c8 <inflate_fast+0x5c8>  // b.plast
 290:	ldr	w16, [sp, #44]
 294:	add	w16, w16, w19
 298:	add	w19, w16, w25
 29c:	sub	w16, w19, w30
 2a0:	cmp	w16, #0x1f
 2a4:	b.cs	3e4 <inflate_fast+0x3e4>  // b.hs, b.nlast
 2a8:	mov	x25, x30
 2ac:	b	4fc <inflate_fast+0x4fc>
 2b0:	mov	w7, w26
 2b4:	neg	x19, x7
 2b8:	sub	x7, x30, x7
 2bc:	mov	x2, xzr
 2c0:	add	x7, x7, #0x1
 2c4:	mov	w21, w16
 2c8:	add	x25, x7, x2
 2cc:	ldurb	w26, [x25, #-1]
 2d0:	add	x29, x30, x2
 2d4:	sub	w21, w21, #0x3
 2d8:	cmp	w21, #0x2
 2dc:	strb	w26, [x29]
 2e0:	ldrb	w26, [x25]
 2e4:	add	x2, x2, #0x3
 2e8:	strb	w26, [x29, #1]
 2ec:	ldrb	w25, [x25, #1]
 2f0:	strb	w25, [x29, #2]
 2f4:	b.hi	2c8 <inflate_fast+0x2c8>  // b.pmore
 2f8:	cmp	w16, w2
 2fc:	add	x7, x30, x2
 300:	b.eq	624 <inflate_fast+0x624>  // b.none
 304:	add	x21, x30, x19
 308:	add	x21, x21, x2
 30c:	add	x21, x21, #0x1
 310:	ldurb	w21, [x21, #-1]
 314:	mov	w16, w16
 318:	sub	x16, x16, #0x1
 31c:	cmp	w16, w2
 320:	strb	w21, [x7]
 324:	b.ne	390 <inflate_fast+0x390>  // b.any
 328:	add	x30, x7, #0x1
 32c:	b	140 <inflate_fast+0x140>
 330:	sub	w7, w17, w29
 334:	subs	w21, w16, w29
 338:	add	x2, x28, x7
 33c:	b.ls	5c8 <inflate_fast+0x5c8>  // b.plast
 340:	ldr	w16, [sp, #60]
 344:	add	w16, w16, w19
 348:	add	w19, w16, w25
 34c:	sub	w16, w19, w30
 350:	cmp	w16, #0x1f
 354:	b.cs	3ac <inflate_fast+0x3ac>  // b.hs, b.nlast
 358:	mov	x16, x30
 35c:	b	494 <inflate_fast+0x494>
 360:	subs	w7, w16, w29
 364:	add	x2, x28, x21
 368:	b.ls	5c8 <inflate_fast+0x5c8>  // b.plast
 36c:	ldr	w16, [sp, #60]
 370:	str	w7, [sp, #4]
 374:	add	w16, w16, w19
 378:	add	w7, w16, w25
 37c:	sub	w16, w7, w30
 380:	cmp	w16, #0x1f
 384:	b.cs	41c <inflate_fast+0x41c>  // b.hs, b.nlast
 388:	mov	x16, x30
 38c:	b	5ac <inflate_fast+0x5ac>
 390:	add	x16, x30, x19
 394:	add	x16, x16, x2
 398:	ldrb	w16, [x16, #1]
 39c:	add	x2, x30, x2
 3a0:	add	x30, x2, #0x2
 3a4:	strb	w16, [x7, #1]
 3a8:	b	140 <inflate_fast+0x140>
 3ac:	str	w21, [sp, #4]
 3b0:	ldr	x21, [sp, #48]
 3b4:	sub	w19, w19, w30
 3b8:	add	x25, x7, x19
 3bc:	add	x25, x21, x25
 3c0:	cmp	x30, x25
 3c4:	b.cs	44c <inflate_fast+0x44c>  // b.hs, b.nlast
 3c8:	add	x19, x30, x19
 3cc:	add	x19, x19, #0x1
 3d0:	cmp	x2, x19
 3d4:	b.cs	44c <inflate_fast+0x44c>  // b.hs, b.nlast
 3d8:	ldr	w21, [sp, #4]
 3dc:	mov	x16, x30
 3e0:	b	494 <inflate_fast+0x494>
 3e4:	str	w29, [sp, #4]
 3e8:	ldr	x29, [sp, #48]
 3ec:	sub	w19, w19, w30
 3f0:	add	x25, x7, x19
 3f4:	add	x25, x29, x25
 3f8:	cmp	x30, x25
 3fc:	b.cs	4b4 <inflate_fast+0x4b4>  // b.hs, b.nlast
 400:	add	x19, x30, x19
 404:	add	x19, x19, #0x1
 408:	cmp	x2, x19
 40c:	b.cs	4b4 <inflate_fast+0x4b4>  // b.hs, b.nlast
 410:	ldr	w29, [sp, #4]
 414:	mov	x25, x30
 418:	b	4fc <inflate_fast+0x4fc>
 41c:	ldr	x25, [sp, #48]
 420:	sub	w7, w7, w30
 424:	add	x19, x21, x7
 428:	add	x19, x25, x19
 42c:	cmp	x30, x19
 430:	b.cs	568 <inflate_fast+0x568>  // b.hs, b.nlast
 434:	add	x7, x30, x7
 438:	add	x7, x7, #0x1
 43c:	cmp	x2, x7
 440:	b.cs	568 <inflate_fast+0x568>  // b.hs, b.nlast
 444:	mov	x16, x30
 448:	b	5ac <inflate_fast+0x5ac>
 44c:	add	x21, x16, #0x1
 450:	ldr	x16, [sp, #32]
 454:	and	x19, x21, #0x1ffffffe0
 458:	sub	w29, w29, w19
 45c:	add	x2, x2, x19
 460:	add	x25, x16, x7
 464:	add	x16, x30, x19
 468:	add	x30, x30, #0x10
 46c:	mov	x7, x19
 470:	ldp	q0, q1, [x25, #-16]
 474:	add	x25, x25, #0x20
 478:	subs	x7, x7, #0x20
 47c:	stp	q0, q1, [x30, #-16]
 480:	add	x30, x30, #0x20
 484:	b.ne	470 <inflate_fast+0x470>  // b.any
 488:	cmp	x21, x19
 48c:	ldr	w21, [sp, #4]
 490:	b.eq	4a4 <inflate_fast+0x4a4>  // b.none
 494:	ldrb	w7, [x2], #1
 498:	subs	w29, w29, #0x1
 49c:	strb	w7, [x16], #1
 4a0:	b.ne	494 <inflate_fast+0x494>  // b.any
 4a4:	sub	x2, x16, w26, uxtw
 4a8:	mov	x30, x16
 4ac:	mov	w16, w21
 4b0:	b	5c8 <inflate_fast+0x5c8>
 4b4:	add	x29, x16, #0x1
 4b8:	ldr	x16, [sp, #32]
 4bc:	add	x19, x16, x7
 4c0:	and	x16, x29, #0x1ffffffe0
 4c4:	add	x25, x30, x16
 4c8:	sub	w21, w21, w16
 4cc:	add	x2, x2, x16
 4d0:	add	x30, x30, #0x10
 4d4:	mov	x7, x16
 4d8:	ldp	q0, q1, [x19, #-16]
 4dc:	add	x19, x19, #0x20
 4e0:	subs	x7, x7, #0x20
 4e4:	stp	q0, q1, [x30, #-16]
 4e8:	add	x30, x30, #0x20
 4ec:	b.ne	4d8 <inflate_fast+0x4d8>  // b.any
 4f0:	cmp	x29, x16
 4f4:	ldr	w29, [sp, #4]
 4f8:	b.eq	50c <inflate_fast+0x50c>  // b.none
 4fc:	ldrb	w16, [x2], #1
 500:	subs	w21, w21, #0x1
 504:	strb	w16, [x25], #1
 508:	b.ne	4fc <inflate_fast+0x4fc>  // b.any
 50c:	subs	w16, w29, w1
 510:	b.ls	558 <inflate_fast+0x558>  // b.plast
 514:	cmp	w20, #0x1f
 518:	b.cc	534 <inflate_fast+0x534>  // b.lo, b.ul, b.last
 51c:	ldr	x2, [sp, #24]
 520:	cmp	x25, x2
 524:	b.cs	640 <inflate_fast+0x640>  // b.hs, b.nlast
 528:	add	x2, x25, x24
 52c:	cmp	x28, x2
 530:	b.cs	640 <inflate_fast+0x640>  // b.hs, b.nlast
 534:	mov	x30, x25
 538:	mov	w2, w1
 53c:	mov	x7, x28
 540:	ldrb	w19, [x7], #1
 544:	subs	w2, w2, #0x1
 548:	strb	w19, [x30], #1
 54c:	b.ne	540 <inflate_fast+0x540>  // b.any
 550:	sub	x2, x30, w26, uxtw
 554:	b	5c8 <inflate_fast+0x5c8>
 558:	mov	x30, x25
 55c:	mov	w16, w29
 560:	mov	x2, x28
 564:	b	5c8 <inflate_fast+0x5c8>
 568:	add	x7, x16, #0x1
 56c:	ldr	x16, [sp, #32]
 570:	and	x19, x7, #0x1ffffffe0
 574:	sub	w29, w29, w19
 578:	add	x2, x2, x19
 57c:	add	x21, x16, x21
 580:	add	x16, x30, x19
 584:	add	x25, x30, #0x10
 588:	mov	x30, x19
 58c:	ldp	q0, q1, [x21, #-16]
 590:	add	x21, x21, #0x20
 594:	subs	x30, x30, #0x20
 598:	stp	q0, q1, [x25, #-16]
 59c:	add	x25, x25, #0x20
 5a0:	b.ne	58c <inflate_fast+0x58c>  // b.any
 5a4:	cmp	x7, x19
 5a8:	b.eq	5bc <inflate_fast+0x5bc>  // b.none
 5ac:	ldrb	w7, [x2], #1
 5b0:	subs	w29, w29, #0x1
 5b4:	strb	w7, [x16], #1
 5b8:	b.ne	5ac <inflate_fast+0x5ac>  // b.any
 5bc:	sub	x2, x16, w26, uxtw
 5c0:	mov	x30, x16
 5c4:	ldr	w16, [sp, #4]
 5c8:	cmp	w16, #0x3
 5cc:	b.cc	60c <inflate_fast+0x60c>  // b.lo, b.ul, b.last
 5d0:	ldrb	w7, [x2]
 5d4:	add	x19, x30, #0x3
 5d8:	sub	w16, w16, #0x3
 5dc:	cmp	w16, #0x2
 5e0:	strb	w7, [x30]
 5e4:	ldrb	w7, [x2, #1]
 5e8:	strb	w7, [x30, #1]
 5ec:	add	x7, x2, #0x3
 5f0:	ldrb	w2, [x2, #2]
 5f4:	strb	w2, [x30, #2]
 5f8:	mov	x2, x7
 5fc:	mov	x30, x19
 600:	b.hi	5d0 <inflate_fast+0x5d0>  // b.pmore
 604:	mov	x30, x19
 608:	mov	x2, x7
 60c:	cbz	w16, 140 <inflate_fast+0x140>
 610:	ldrb	w19, [x2]
 614:	mov	x7, x30
 618:	cmp	w16, #0x1
 61c:	strb	w19, [x7], #1
 620:	b.ne	62c <inflate_fast+0x62c>  // b.any
 624:	mov	x30, x7
 628:	b	140 <inflate_fast+0x140>
 62c:	ldrb	w16, [x2, #1]
 630:	add	x2, x30, #0x2
 634:	strb	w16, [x30, #1]
 638:	mov	x30, x2
 63c:	b	140 <inflate_fast+0x140>
 640:	ldr	x19, [sp, #32]
 644:	add	x30, x25, x27
 648:	add	x2, x25, #0x10
 64c:	mov	x7, x27
 650:	ldp	q0, q1, [x19, #-16]
 654:	add	x19, x19, #0x20
 658:	subs	x7, x7, #0x20
 65c:	stp	q0, q1, [x2, #-16]
 660:	add	x2, x2, #0x20
 664:	b.ne	650 <inflate_fast+0x650>  // b.any
 668:	ldr	w2, [sp, #20]
 66c:	ldr	x7, [sp, #8]
 670:	cmp	x24, x27
 674:	b.ne	540 <inflate_fast+0x540>  // b.any
 678:	b	550 <inflate_fast+0x550>
 67c:	tbnz	w7, #5, 68c <inflate_fast+0x68c>
 680:	adrp	x15, 0 <inflate_fast>
 684:	add	x15, x15, #0x0
 688:	b	698 <inflate_fast+0x698>
 68c:	mov	w14, #0x3f3f                	// #16191
 690:	b	6a0 <inflate_fast+0x6a0>
 694:	mov	x15, x6
 698:	mov	w14, #0x3f51                	// #16209
 69c:	str	x15, [x0, #48]
 6a0:	str	w14, [x8, #8]
 6a4:	lsr	w14, w13, #3
 6a8:	and	w13, w13, #0x7
 6ac:	mov	w15, #0xffffffff            	// #-1
 6b0:	sub	x9, x9, x14
 6b4:	lsl	w14, w15, w13
 6b8:	sub	w12, w12, w30
 6bc:	mvn	w14, w14
 6c0:	str	x9, [x0]
 6c4:	sub	w9, w11, w9
 6c8:	add	w12, w12, #0x101
 6cc:	and	x10, x10, x14
 6d0:	add	w9, w9, #0x5
 6d4:	str	x30, [x0, #24]
 6d8:	str	w12, [x0, #32]
 6dc:	str	w9, [x0, #8]
 6e0:	str	x10, [x8, #80]
 6e4:	str	w13, [x8, #88]
 6e8:	ldp	x20, x19, [sp, #144]
 6ec:	ldp	x22, x21, [sp, #128]
 6f0:	ldp	x24, x23, [sp, #112]
 6f4:	ldp	x26, x25, [sp, #96]
 6f8:	ldp	x28, x27, [sp, #80]
 6fc:	ldp	x29, x30, [sp, #64]
 700:	add	sp, sp, #0xa0
 704:	ret

inflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateResetKeep>:
       0:	cbz	x0, 9c <inflateResetKeep+0x9c>
       4:	ldr	x8, [x0, #64]
       8:	cbz	x8, 9c <inflateResetKeep+0x9c>
       c:	ldr	x8, [x0, #72]
      10:	cbz	x8, 9c <inflateResetKeep+0x9c>
      14:	ldr	x8, [x0, #56]
      18:	cbz	x8, 9c <inflateResetKeep+0x9c>
      1c:	ldr	x9, [x8]
      20:	cmp	x9, x0
      24:	b.ne	9c <inflateResetKeep+0x9c>  // b.any
      28:	ldr	w9, [x8, #8]
      2c:	mov	w10, #0xffffc0cc            	// #-16180
      30:	add	w9, w9, w10
      34:	cmp	w9, #0x1f
      38:	b.hi	9c <inflateResetKeep+0x9c>  // b.pmore
      3c:	str	xzr, [x8, #40]
      40:	str	xzr, [x0, #16]
      44:	stp	xzr, xzr, [x0, #40]
      48:	ldr	w9, [x8, #16]
      4c:	cbz	w9, 58 <inflateResetKeep+0x58>
      50:	and	x9, x9, #0x1
      54:	str	x9, [x0, #96]
      58:	adrp	x9, 0 <inflateResetKeep>
      5c:	ldr	d0, [x9]
      60:	mov	w9, #0x8000                	// #32768
      64:	str	w9, [x8, #28]
      68:	add	x9, x8, #0x558
      6c:	str	x9, [x8, #144]
      70:	stp	x9, x9, [x8, #104]
      74:	adrp	x9, 0 <inflateResetKeep>
      78:	str	d0, [x8, #8]
      7c:	ldr	d0, [x9]
      80:	mov	w0, wzr
      84:	str	wzr, [x8, #20]
      88:	str	xzr, [x8, #48]
      8c:	str	xzr, [x8, #80]
      90:	str	wzr, [x8, #88]
      94:	str	d0, [x8, #7144]
      98:	ret
      9c:	mov	w0, #0xfffffffe            	// #-2
      a0:	ret

00000000000000a4 <inflateReset>:
      a4:	cbz	x0, 148 <inflateReset+0xa4>
      a8:	ldr	x8, [x0, #64]
      ac:	cbz	x8, 148 <inflateReset+0xa4>
      b0:	ldr	x8, [x0, #72]
      b4:	cbz	x8, 148 <inflateReset+0xa4>
      b8:	ldr	x8, [x0, #56]
      bc:	cbz	x8, 148 <inflateReset+0xa4>
      c0:	ldr	x9, [x8]
      c4:	cmp	x9, x0
      c8:	b.ne	148 <inflateReset+0xa4>  // b.any
      cc:	ldr	w9, [x8, #8]
      d0:	mov	w10, #0xffffc0cc            	// #-16180
      d4:	add	w9, w9, w10
      d8:	cmp	w9, #0x1f
      dc:	b.hi	148 <inflateReset+0xa4>  // b.pmore
      e0:	str	xzr, [x8, #64]
      e4:	str	wzr, [x8, #60]
      e8:	str	xzr, [x8, #40]
      ec:	str	xzr, [x0, #16]
      f0:	stp	xzr, xzr, [x0, #40]
      f4:	ldr	w9, [x8, #16]
      f8:	cbz	w9, 104 <inflateReset+0x60>
      fc:	and	x9, x9, #0x1
     100:	str	x9, [x0, #96]
     104:	adrp	x9, 0 <inflateResetKeep>
     108:	ldr	d0, [x9]
     10c:	mov	w9, #0x8000                	// #32768
     110:	str	w9, [x8, #28]
     114:	add	x9, x8, #0x558
     118:	str	x9, [x8, #144]
     11c:	stp	x9, x9, [x8, #104]
     120:	adrp	x9, 0 <inflateResetKeep>
     124:	str	d0, [x8, #8]
     128:	ldr	d0, [x9]
     12c:	mov	w0, wzr
     130:	str	wzr, [x8, #20]
     134:	str	xzr, [x8, #48]
     138:	str	xzr, [x8, #80]
     13c:	str	wzr, [x8, #88]
     140:	str	d0, [x8, #7144]
     144:	ret
     148:	mov	w0, #0xfffffffe            	// #-2
     14c:	ret

0000000000000150 <inflateReset2>:
     150:	stp	x29, x30, [sp, #-48]!
     154:	stp	x22, x21, [sp, #16]
     158:	stp	x20, x19, [sp, #32]
     15c:	mov	x29, sp
     160:	cbz	x0, 2a8 <inflateReset2+0x158>
     164:	ldr	x8, [x0, #64]
     168:	mov	x19, x0
     16c:	cbz	x8, 2a8 <inflateReset2+0x158>
     170:	ldr	x8, [x19, #72]
     174:	cbz	x8, 2a8 <inflateReset2+0x158>
     178:	ldr	x20, [x19, #56]
     17c:	cbz	x20, 2a8 <inflateReset2+0x158>
     180:	ldr	x9, [x20]
     184:	cmp	x9, x19
     188:	b.ne	2a8 <inflateReset2+0x158>  // b.any
     18c:	ldr	w9, [x20, #8]
     190:	mov	w10, #0xffffc0cc            	// #-16180
     194:	add	w9, w9, w10
     198:	cmp	w9, #0x1f
     19c:	b.hi	2a8 <inflateReset2+0x158>  // b.pmore
     1a0:	tbnz	w1, #31, 1bc <inflateReset2+0x6c>
     1a4:	lsr	w9, w1, #4
     1a8:	and	w10, w1, #0xf
     1ac:	cmp	w1, #0x30
     1b0:	add	w22, w9, #0x5
     1b4:	csel	w21, w10, w1, lt  // lt = tstop
     1b8:	b	1c4 <inflateReset2+0x74>
     1bc:	mov	w22, wzr
     1c0:	neg	w21, w1
     1c4:	cbz	w21, 1d4 <inflateReset2+0x84>
     1c8:	and	w9, w21, #0xfffffff8
     1cc:	cmp	w9, #0x8
     1d0:	b.ne	2a8 <inflateReset2+0x158>  // b.any
     1d4:	ldr	x1, [x20, #72]
     1d8:	cbz	x1, 1e8 <inflateReset2+0x98>
     1dc:	ldr	w9, [x20, #56]
     1e0:	cmp	w9, w21
     1e4:	b.ne	1f4 <inflateReset2+0xa4>  // b.any
     1e8:	str	w22, [x20, #16]
     1ec:	str	w21, [x20, #56]
     1f0:	b	210 <inflateReset2+0xc0>
     1f4:	ldr	x0, [x19, #80]
     1f8:	blr	x8
     1fc:	str	xzr, [x20, #72]
     200:	ldr	x8, [x19, #64]
     204:	str	w22, [x20, #16]
     208:	str	w21, [x20, #56]
     20c:	cbz	x8, 2a8 <inflateReset2+0x158>
     210:	ldr	x8, [x19, #72]
     214:	cbz	x8, 2a8 <inflateReset2+0x158>
     218:	ldr	x8, [x19, #56]
     21c:	cbz	x8, 2a8 <inflateReset2+0x158>
     220:	ldr	x9, [x8]
     224:	cmp	x9, x19
     228:	b.ne	2a8 <inflateReset2+0x158>  // b.any
     22c:	ldr	w9, [x8, #8]
     230:	mov	w10, #0xffffc0cc            	// #-16180
     234:	add	w9, w9, w10
     238:	cmp	w9, #0x1f
     23c:	b.hi	2a8 <inflateReset2+0x158>  // b.pmore
     240:	str	xzr, [x8, #64]
     244:	str	wzr, [x8, #60]
     248:	str	xzr, [x8, #40]
     24c:	str	xzr, [x19, #16]
     250:	stp	xzr, xzr, [x19, #40]
     254:	ldr	w9, [x8, #16]
     258:	cbz	w9, 264 <inflateReset2+0x114>
     25c:	and	x9, x9, #0x1
     260:	str	x9, [x19, #96]
     264:	adrp	x9, 0 <inflateResetKeep>
     268:	ldr	d0, [x9]
     26c:	mov	w9, #0x8000                	// #32768
     270:	str	w9, [x8, #28]
     274:	add	x9, x8, #0x558
     278:	str	x9, [x8, #144]
     27c:	stp	x9, x9, [x8, #104]
     280:	adrp	x9, 0 <inflateResetKeep>
     284:	str	d0, [x8, #8]
     288:	ldr	d0, [x9]
     28c:	mov	w0, wzr
     290:	str	wzr, [x8, #20]
     294:	str	xzr, [x8, #48]
     298:	str	xzr, [x8, #80]
     29c:	str	wzr, [x8, #88]
     2a0:	str	d0, [x8, #7144]
     2a4:	b	2ac <inflateReset2+0x15c>
     2a8:	mov	w0, #0xfffffffe            	// #-2
     2ac:	ldp	x20, x19, [sp, #32]
     2b0:	ldp	x22, x21, [sp, #16]
     2b4:	ldp	x29, x30, [sp], #48
     2b8:	ret

00000000000002bc <inflateInit2_>:
     2bc:	stp	x29, x30, [sp, #-48]!
     2c0:	stp	x22, x21, [sp, #16]
     2c4:	stp	x20, x19, [sp, #32]
     2c8:	mov	x29, sp
     2cc:	cbz	x2, 35c <inflateInit2_+0xa0>
     2d0:	cmp	w3, #0x70
     2d4:	mov	w21, #0xfffffffa            	// #-6
     2d8:	b.ne	398 <inflateInit2_+0xdc>  // b.any
     2dc:	ldrb	w8, [x2]
     2e0:	cmp	w8, #0x31
     2e4:	b.ne	398 <inflateInit2_+0xdc>  // b.any
     2e8:	mov	x19, x0
     2ec:	cbz	x0, 364 <inflateInit2_+0xa8>
     2f0:	ldr	x8, [x19, #64]
     2f4:	mov	w20, w1
     2f8:	str	xzr, [x19, #48]
     2fc:	cbz	x8, 36c <inflateInit2_+0xb0>
     300:	ldr	x9, [x19, #72]
     304:	cbz	x9, 384 <inflateInit2_+0xc8>
     308:	ldr	x0, [x19, #80]
     30c:	mov	w1, #0x1                   	// #1
     310:	mov	w2, #0x1bf8                	// #7160
     314:	blr	x8
     318:	cbz	x0, 394 <inflateInit2_+0xd8>
     31c:	mov	w8, #0x3f34                	// #16180
     320:	mov	x22, x0
     324:	str	x0, [x19, #56]
     328:	str	x19, [x0]
     32c:	str	xzr, [x0, #72]
     330:	str	w8, [x0, #8]
     334:	mov	x0, x19
     338:	mov	w1, w20
     33c:	bl	150 <inflateReset2>
     340:	mov	w21, w0
     344:	cbz	w0, 398 <inflateInit2_+0xdc>
     348:	ldp	x8, x0, [x19, #72]
     34c:	mov	x1, x22
     350:	blr	x8
     354:	str	xzr, [x19, #56]
     358:	b	398 <inflateInit2_+0xdc>
     35c:	mov	w21, #0xfffffffa            	// #-6
     360:	b	398 <inflateInit2_+0xdc>
     364:	mov	w21, #0xfffffffe            	// #-2
     368:	b	398 <inflateInit2_+0xdc>
     36c:	adrp	x8, 0 <zcalloc>
     370:	add	x8, x8, #0x0
     374:	str	x8, [x19, #64]
     378:	str	xzr, [x19, #80]
     37c:	ldr	x9, [x19, #72]
     380:	cbnz	x9, 308 <inflateInit2_+0x4c>
     384:	adrp	x9, 0 <zcfree>
     388:	add	x9, x9, #0x0
     38c:	str	x9, [x19, #72]
     390:	b	308 <inflateInit2_+0x4c>
     394:	mov	w21, #0xfffffffc            	// #-4
     398:	mov	w0, w21
     39c:	ldp	x20, x19, [sp, #32]
     3a0:	ldp	x22, x21, [sp, #16]
     3a4:	ldp	x29, x30, [sp], #48
     3a8:	ret

00000000000003ac <inflateInit_>:
     3ac:	stp	x29, x30, [sp, #-48]!
     3b0:	str	x21, [sp, #16]
     3b4:	stp	x20, x19, [sp, #32]
     3b8:	mov	x29, sp
     3bc:	cbz	x1, 448 <inflateInit_+0x9c>
     3c0:	cmp	w2, #0x70
     3c4:	mov	w20, #0xfffffffa            	// #-6
     3c8:	b.ne	484 <inflateInit_+0xd8>  // b.any
     3cc:	ldrb	w8, [x1]
     3d0:	cmp	w8, #0x31
     3d4:	b.ne	484 <inflateInit_+0xd8>  // b.any
     3d8:	mov	x19, x0
     3dc:	cbz	x0, 450 <inflateInit_+0xa4>
     3e0:	ldr	x8, [x19, #64]
     3e4:	str	xzr, [x19, #48]
     3e8:	cbz	x8, 458 <inflateInit_+0xac>
     3ec:	ldr	x9, [x19, #72]
     3f0:	cbz	x9, 470 <inflateInit_+0xc4>
     3f4:	ldr	x0, [x19, #80]
     3f8:	mov	w1, #0x1                   	// #1
     3fc:	mov	w2, #0x1bf8                	// #7160
     400:	blr	x8
     404:	cbz	x0, 480 <inflateInit_+0xd4>
     408:	mov	w8, #0x3f34                	// #16180
     40c:	mov	x21, x0
     410:	str	x0, [x19, #56]
     414:	str	x19, [x0]
     418:	str	xzr, [x0, #72]
     41c:	str	w8, [x0, #8]
     420:	mov	w1, #0xf                   	// #15
     424:	mov	x0, x19
     428:	bl	150 <inflateReset2>
     42c:	mov	w20, w0
     430:	cbz	w0, 484 <inflateInit_+0xd8>
     434:	ldp	x8, x0, [x19, #72]
     438:	mov	x1, x21
     43c:	blr	x8
     440:	str	xzr, [x19, #56]
     444:	b	484 <inflateInit_+0xd8>
     448:	mov	w20, #0xfffffffa            	// #-6
     44c:	b	484 <inflateInit_+0xd8>
     450:	mov	w20, #0xfffffffe            	// #-2
     454:	b	484 <inflateInit_+0xd8>
     458:	adrp	x8, 0 <zcalloc>
     45c:	add	x8, x8, #0x0
     460:	str	x8, [x19, #64]
     464:	str	xzr, [x19, #80]
     468:	ldr	x9, [x19, #72]
     46c:	cbnz	x9, 3f4 <inflateInit_+0x48>
     470:	adrp	x9, 0 <zcfree>
     474:	add	x9, x9, #0x0
     478:	str	x9, [x19, #72]
     47c:	b	3f4 <inflateInit_+0x48>
     480:	mov	w20, #0xfffffffc            	// #-4
     484:	mov	w0, w20
     488:	ldp	x20, x19, [sp, #32]
     48c:	ldr	x21, [sp, #16]
     490:	ldp	x29, x30, [sp], #48
     494:	ret

0000000000000498 <inflatePrime>:
     498:	cbz	x0, 4f0 <inflatePrime+0x58>
     49c:	ldr	x8, [x0, #64]
     4a0:	cbz	x8, 4f0 <inflatePrime+0x58>
     4a4:	ldr	x8, [x0, #72]
     4a8:	cbz	x8, 4f0 <inflatePrime+0x58>
     4ac:	ldr	x8, [x0, #56]
     4b0:	cbz	x8, 4f0 <inflatePrime+0x58>
     4b4:	ldr	x9, [x8]
     4b8:	cmp	x9, x0
     4bc:	b.ne	4f0 <inflatePrime+0x58>  // b.any
     4c0:	ldr	w9, [x8, #8]
     4c4:	mov	w10, #0xffffc0cc            	// #-16180
     4c8:	add	w9, w9, w10
     4cc:	cmp	w9, #0x1f
     4d0:	b.hi	4f0 <inflatePrime+0x58>  // b.pmore
     4d4:	tbnz	w1, #31, 4f8 <inflatePrime+0x60>
     4d8:	cmp	w1, #0x10
     4dc:	b.gt	4f0 <inflatePrime+0x58>
     4e0:	ldr	w10, [x8, #88]
     4e4:	add	w9, w10, w1
     4e8:	cmp	w9, #0x20
     4ec:	b.ls	508 <inflatePrime+0x70>  // b.plast
     4f0:	mov	w0, #0xfffffffe            	// #-2
     4f4:	ret
     4f8:	mov	w0, wzr
     4fc:	str	xzr, [x8, #80]
     500:	str	wzr, [x8, #88]
     504:	ret
     508:	mov	x11, #0xffffffffffffffff    	// #-1
     50c:	ldr	x12, [x8, #80]
     510:	lsl	x11, x11, x1
     514:	bic	w11, w2, w11
     518:	lsl	w10, w11, w10
     51c:	mov	w0, wzr
     520:	add	x10, x12, x10
     524:	str	x10, [x8, #80]
     528:	str	w9, [x8, #88]
     52c:	ret

0000000000000530 <inflate>:
     530:	sub	sp, sp, #0xd0
     534:	stp	x29, x30, [sp, #112]
     538:	stp	x28, x27, [sp, #128]
     53c:	stp	x26, x25, [sp, #144]
     540:	stp	x24, x23, [sp, #160]
     544:	stp	x22, x21, [sp, #176]
     548:	stp	x20, x19, [sp, #192]
     54c:	add	x29, sp, #0x70
     550:	cbz	x0, 1c28 <inflate+0x16f8>
     554:	ldr	x8, [x0, #64]
     558:	mov	x19, x0
     55c:	cbz	x8, 1c28 <inflate+0x16f8>
     560:	ldr	x8, [x19, #72]
     564:	cbz	x8, 1c28 <inflate+0x16f8>
     568:	ldr	x27, [x19, #56]
     56c:	cbz	x27, 1c28 <inflate+0x16f8>
     570:	ldr	x8, [x27]
     574:	cmp	x8, x19
     578:	b.ne	1c28 <inflate+0x16f8>  // b.any
     57c:	mov	x23, x27
     580:	ldr	w8, [x23, #8]!
     584:	mov	w9, #0xffffc0cc            	// #-16180
     588:	add	w9, w8, w9
     58c:	cmp	w9, #0x1f
     590:	b.hi	1c28 <inflate+0x16f8>  // b.pmore
     594:	ldr	x28, [x19, #24]
     598:	cbz	x28, 1c28 <inflate+0x16f8>
     59c:	ldr	x22, [x19]
     5a0:	mov	w20, w1
     5a4:	cbz	x22, 1c20 <inflate+0x16f0>
     5a8:	mov	w9, #0x3f3f                	// #16191
     5ac:	cmp	w8, w9
     5b0:	b.ne	5bc <inflate+0x8c>  // b.any
     5b4:	mov	w8, #0x3f40                	// #16192
     5b8:	str	w8, [x23]
     5bc:	add	x9, x27, #0x20
     5c0:	stur	x9, [x29, #-16]
     5c4:	add	x9, x27, #0x558
     5c8:	str	x9, [sp, #40]
     5cc:	add	x9, x27, #0x90
     5d0:	ldr	w10, [x19, #8]
     5d4:	str	x9, [sp, #56]
     5d8:	add	x9, x27, #0x78
     5dc:	ldr	w0, [x19, #32]
     5e0:	ldr	x25, [x27, #80]
     5e4:	ldr	w21, [x27, #88]
     5e8:	str	x9, [sp, #32]
     5ec:	add	x9, x27, #0x98
     5f0:	str	x9, [sp, #24]
     5f4:	add	x9, x27, #0x318
     5f8:	str	x9, [sp, #48]
     5fc:	add	x9, x27, #0x7c
     600:	adrp	x3, 0 <inflateResetKeep>
     604:	str	x9, [sp, #8]
     608:	sub	w9, w20, #0x5
     60c:	mov	w1, #0xffffc0cc            	// #-16180
     610:	add	x3, x3, #0x0
     614:	mov	w24, w10
     618:	stur	wzr, [x29, #-24]
     61c:	stur	w9, [x29, #-44]
     620:	stur	w10, [x29, #-28]
     624:	stur	w0, [x29, #-20]
     628:	add	w8, w8, w1
     62c:	cmp	w8, #0x1e
     630:	b.hi	1c28 <inflate+0x16f8>  // b.pmore
     634:	adr	x9, 650 <inflate+0x120>
     638:	ldrh	w10, [x3, x8, lsl #1]
     63c:	add	x9, x9, x10, lsl #2
     640:	adrp	x8, 0 <inflateResetKeep>
     644:	mov	w26, #0x1                   	// #1
     648:	add	x8, x8, #0x0
     64c:	br	x9
     650:	ldr	w8, [x27, #16]
     654:	cbz	w8, e80 <inflate+0x950>
     658:	cmp	w21, #0xf
     65c:	b.hi	688 <inflate+0x158>  // b.pmore
     660:	mov	w9, w21
     664:	cbz	w24, 1c60 <inflate+0x1730>
     668:	ldrb	w10, [x22], #1
     66c:	add	x21, x9, #0x8
     670:	sub	w24, w24, #0x1
     674:	cmp	x9, #0x8
     678:	lsl	x10, x10, x9
     67c:	add	x25, x10, x25
     680:	mov	x9, x21
     684:	b.cc	664 <inflate+0x134>  // b.lo, b.ul, b.last
     688:	tbz	w8, #1, f28 <inflate+0x9f8>
     68c:	mov	w9, #0x8b1f                	// #35615
     690:	cmp	x25, x9
     694:	b.ne	f28 <inflate+0x9f8>  // b.any
     698:	ldr	w8, [x27, #56]
     69c:	str	w0, [sp, #4]
     6a0:	cbnz	w8, 6ac <inflate+0x17c>
     6a4:	mov	w8, #0xf                   	// #15
     6a8:	str	w8, [x27, #56]
     6ac:	mov	x0, xzr
     6b0:	mov	x1, xzr
     6b4:	mov	w2, wzr
     6b8:	bl	0 <crc32>
     6bc:	ldur	x26, [x29, #-16]
     6c0:	mov	w8, #0x8b1f                	// #35615
     6c4:	sub	x1, x29, #0x4
     6c8:	mov	w2, #0x2                   	// #2
     6cc:	str	x0, [x26]
     6d0:	sturh	w8, [x29, #-4]
     6d4:	bl	0 <crc32>
     6d8:	str	x0, [x26]
     6dc:	ldr	w0, [sp, #4]
     6e0:	mov	w8, #0x3f35                	// #16181
     6e4:	mov	x25, xzr
     6e8:	mov	w21, wzr
     6ec:	str	w8, [x23]
     6f0:	b	14d0 <inflate+0xfa0>
     6f4:	cmp	w21, #0xf
     6f8:	b.hi	724 <inflate+0x1f4>  // b.pmore
     6fc:	mov	w8, w21
     700:	cbz	w24, 1c6c <inflate+0x173c>
     704:	ldrb	w9, [x22], #1
     708:	add	x21, x8, #0x8
     70c:	sub	w24, w24, #0x1
     710:	cmp	x8, #0x8
     714:	lsl	x9, x9, x8
     718:	add	x25, x9, x25
     71c:	mov	x8, x21
     720:	b.cc	700 <inflate+0x1d0>  // b.lo, b.ul, b.last
     724:	and	w8, w25, #0xff
     728:	cmp	w8, #0x8
     72c:	str	w25, [x27, #24]
     730:	b.ne	e88 <inflate+0x958>  // b.any
     734:	tst	w25, #0xe000
     738:	b.eq	fd0 <inflate+0xaa0>  // b.none
     73c:	adrp	x8, 0 <inflateResetKeep>
     740:	add	x8, x8, #0x0
     744:	b	1b4c <inflate+0x161c>
     748:	cmp	w21, #0x1f
     74c:	b.ls	102c <inflate+0xafc>  // b.plast
     750:	b	1050 <inflate+0xb20>
     754:	cmp	w21, #0xf
     758:	b.ls	10ac <inflate+0xb7c>  // b.plast
     75c:	b	10d0 <inflate+0xba0>
     760:	cmp	w21, #0x1f
     764:	b.hi	78c <inflate+0x25c>  // b.pmore
     768:	mov	w21, w21
     76c:	cbz	w24, 1c70 <inflate+0x1740>
     770:	ldrb	w8, [x22], #1
     774:	sub	w24, w24, #0x1
     778:	cmp	x21, #0x18
     77c:	lsl	x8, x8, x21
     780:	add	x21, x21, #0x8
     784:	add	x25, x8, x25
     788:	b.cc	76c <inflate+0x23c>  // b.lo, b.ul, b.last
     78c:	lsr	x8, x25, #8
     790:	lsl	w9, w25, #8
     794:	and	x8, x8, #0xff00
     798:	and	x9, x9, #0xff0000
     79c:	bfxil	x8, x25, #24, #8
     7a0:	orr	x8, x8, x9
     7a4:	ldur	x9, [x29, #-16]
     7a8:	lsl	w10, w25, #24
     7ac:	mov	w21, wzr
     7b0:	mov	w11, #0x3f3e                	// #16190
     7b4:	orr	x8, x8, x10
     7b8:	mov	x25, xzr
     7bc:	str	x8, [x9]
     7c0:	str	x8, [x19, #96]
     7c4:	str	w11, [x23]
     7c8:	ldr	w8, [x27, #20]
     7cc:	cbz	w8, 1de4 <inflate+0x18b4>
     7d0:	mov	w26, w0
     7d4:	mov	x0, xzr
     7d8:	mov	x1, xzr
     7dc:	mov	w2, wzr
     7e0:	bl	0 <adler32>
     7e4:	ldur	x8, [x29, #-16]
     7e8:	adrp	x3, 0 <inflateResetKeep>
     7ec:	mov	w1, #0xffffc0cc            	// #-16180
     7f0:	add	x3, x3, #0x0
     7f4:	str	x0, [x8]
     7f8:	str	x0, [x19, #96]
     7fc:	mov	w0, w26
     800:	mov	w8, #0x3f3f                	// #16191
     804:	str	w8, [x23]
     808:	ldur	w8, [x29, #-44]
     80c:	cmp	w8, #0x2
     810:	b.cc	1c70 <inflate+0x1740>  // b.lo, b.ul, b.last
     814:	ldr	w8, [x27, #12]
     818:	cbz	w8, 838 <inflate+0x308>
     81c:	and	w8, w21, #0x7
     820:	mov	w9, #0x3f4e                	// #16206
     824:	and	w21, w21, #0xfffffff8
     828:	lsr	x25, x25, x8
     82c:	str	w9, [x23]
     830:	mov	w8, w9
     834:	b	628 <inflate+0xf8>
     838:	cmp	w21, #0x2
     83c:	b.hi	85c <inflate+0x32c>  // b.pmore
     840:	cbz	w24, 1c70 <inflate+0x1740>
     844:	ldrb	w8, [x22], #1
     848:	add	w9, w21, #0x8
     84c:	sub	w24, w24, #0x1
     850:	lsl	x8, x8, x21
     854:	add	x25, x8, x25
     858:	mov	w21, w9
     85c:	adrp	x10, 0 <inflateResetKeep>
     860:	and	w8, w25, #0x1
     864:	ubfx	w9, w25, #1, #2
     868:	add	x10, x10, #0x0
     86c:	str	w8, [x27, #12]
     870:	adr	x11, 884 <inflate+0x354>
     874:	ldrh	w8, [x10, x9, lsl #1]
     878:	add	x11, x11, x8, lsl #2
     87c:	mov	w8, #0x3f41                	// #16193
     880:	br	x11
     884:	adrp	x10, 0 <inflateResetKeep>
     888:	ldr	d0, [x10]
     88c:	adrp	x8, 0 <inflateResetKeep>
     890:	adrp	x9, 0 <inflateResetKeep>
     894:	add	x8, x8, #0x0
     898:	add	x9, x9, #0x0
     89c:	mov	w11, #0x3f47                	// #16199
     8a0:	cmp	w20, #0x6
     8a4:	stp	x8, x9, [x27, #104]
     8a8:	str	d0, [x27, #120]
     8ac:	str	w11, [x27, #8]
     8b0:	b.ne	f0c <inflate+0x9dc>  // b.any
     8b4:	b	1e28 <inflate+0x18f8>
     8b8:	and	w8, w21, #0x7
     8bc:	and	w21, w21, #0xfffffff8
     8c0:	cmp	w21, #0x1f
     8c4:	lsr	x25, x25, x8
     8c8:	b.hi	8f4 <inflate+0x3c4>  // b.pmore
     8cc:	mov	w8, w21
     8d0:	cbz	w24, 1c6c <inflate+0x173c>
     8d4:	ldrb	w9, [x22], #1
     8d8:	add	x21, x8, #0x8
     8dc:	sub	w24, w24, #0x1
     8e0:	cmp	x8, #0x18
     8e4:	lsl	x9, x9, x8
     8e8:	add	x25, x9, x25
     8ec:	mov	x8, x21
     8f0:	b.cc	8d0 <inflate+0x3a0>  // b.lo, b.ul, b.last
     8f4:	lsr	x8, x25, #16
     8f8:	eor	x8, x8, #0xffff
     8fc:	cmp	x8, w25, uxth
     900:	b.ne	e94 <inflate+0x964>  // b.any
     904:	mov	w21, wzr
     908:	and	w8, w25, #0xffff
     90c:	mov	w9, #0x3f42                	// #16194
     910:	cmp	w20, #0x6
     914:	mov	x25, xzr
     918:	str	w8, [x27, #92]
     91c:	str	w9, [x27, #8]
     920:	b.eq	1c70 <inflate+0x1740>  // b.none
     924:	mov	w8, #0x3f43                	// #16195
     928:	str	w8, [x23]
     92c:	ldr	w8, [x27, #92]
     930:	cbz	w8, bc8 <inflate+0x698>
     934:	cmp	w8, w24
     938:	csel	w8, w24, w8, hi  // hi = pmore
     93c:	cmp	w8, w0
     940:	stur	x23, [x29, #-40]
     944:	csel	w23, w0, w8, hi  // hi = pmore
     948:	cbz	w23, 1e04 <inflate+0x18d4>
     94c:	mov	w26, w23
     950:	str	w0, [sp, #4]
     954:	mov	x0, x28
     958:	mov	x1, x22
     95c:	mov	x2, x26
     960:	bl	0 <memcpy>
     964:	ldr	w0, [sp, #4]
     968:	ldr	w8, [x27, #92]
     96c:	sub	w24, w24, w23
     970:	add	x22, x22, x26
     974:	sub	w0, w0, w23
     978:	sub	w8, w8, w23
     97c:	ldur	x23, [x29, #-40]
     980:	add	x28, x28, x26
     984:	str	w8, [x27, #92]
     988:	b	14d0 <inflate+0xfa0>
     98c:	cmp	w21, #0xd
     990:	b.hi	9bc <inflate+0x48c>  // b.pmore
     994:	mov	w9, w21
     998:	cbz	w24, 1c60 <inflate+0x1730>
     99c:	ldrb	w10, [x22], #1
     9a0:	add	x21, x9, #0x8
     9a4:	sub	w24, w24, #0x1
     9a8:	cmp	x9, #0x6
     9ac:	lsl	x10, x10, x9
     9b0:	add	x25, x10, x25
     9b4:	mov	x9, x21
     9b8:	b.cc	998 <inflate+0x468>  // b.lo, b.ul, b.last
     9bc:	and	w11, w25, #0x1f
     9c0:	ubfx	w10, w25, #5, #5
     9c4:	ubfx	w9, w25, #10, #4
     9c8:	lsr	x25, x25, #14
     9cc:	add	w12, w11, #0x101
     9d0:	add	w13, w10, #0x1
     9d4:	add	w9, w9, #0x4
     9d8:	cmp	w11, #0x1d
     9dc:	sub	w21, w21, #0xe
     9e0:	stp	w12, w13, [x27, #132]
     9e4:	str	w9, [x27, #128]
     9e8:	b.hi	ea0 <inflate+0x970>  // b.pmore
     9ec:	cmp	w10, #0x1e
     9f0:	b.cs	ea0 <inflate+0x970>  // b.hs, b.nlast
     9f4:	mov	w11, #0x3f45                	// #16197
     9f8:	mov	w10, wzr
     9fc:	str	wzr, [x27, #140]
     a00:	str	w11, [x27, #8]
     a04:	b	a18 <inflate+0x4e8>
     a08:	ldr	w10, [x27, #140]
     a0c:	ldr	w9, [x27, #128]
     a10:	cmp	w10, w9
     a14:	b.cs	a70 <inflate+0x540>  // b.hs, b.nlast
     a18:	mov	w10, w10
     a1c:	b	a60 <inflate+0x530>
     a20:	ldrb	w11, [x22], #1
     a24:	add	w12, w21, #0x8
     a28:	sub	w24, w24, #0x1
     a2c:	lsl	x11, x11, x21
     a30:	add	x25, x11, x25
     a34:	mov	w21, w12
     a38:	ldrh	w12, [x8, x10, lsl #1]
     a3c:	add	x10, x10, #0x1
     a40:	and	w11, w25, #0x7
     a44:	lsr	x25, x25, #3
     a48:	cmp	w10, w9
     a4c:	add	x12, x27, x12, lsl #1
     a50:	sub	w21, w21, #0x3
     a54:	str	w10, [x27, #140]
     a58:	strh	w11, [x12, #152]
     a5c:	b.cs	a70 <inflate+0x540>  // b.hs, b.nlast
     a60:	cmp	w21, #0x2
     a64:	b.hi	a38 <inflate+0x508>  // b.pmore
     a68:	cbnz	w24, a20 <inflate+0x4f0>
     a6c:	b	1c70 <inflate+0x1740>
     a70:	mov	w26, w0
     a74:	cmp	w10, #0x12
     a78:	b.hi	a9c <inflate+0x56c>  // b.pmore
     a7c:	mov	w9, w10
     a80:	ldrh	w10, [x8, x9, lsl #1]
     a84:	cmp	x9, #0x12
     a88:	add	x9, x9, #0x1
     a8c:	add	x10, x27, x10, lsl #1
     a90:	strh	wzr, [x10, #152]
     a94:	b.cc	a80 <inflate+0x550>  // b.lo, b.ul, b.last
     a98:	str	w9, [x27, #140]
     a9c:	ldp	x4, x8, [sp, #32]
     aa0:	ldr	x1, [sp, #24]
     aa4:	mov	w2, #0x13                  	// #19
     aa8:	mov	w0, wzr
     aac:	str	x8, [x27, #144]
     ab0:	str	x8, [x27, #104]
     ab4:	mov	w8, #0x7                   	// #7
     ab8:	str	w8, [x27, #120]
     abc:	ldp	x5, x3, [sp, #48]
     ac0:	bl	0 <inflate_table>
     ac4:	cbz	w0, bd0 <inflate+0x6a0>
     ac8:	adrp	x8, 0 <inflateResetKeep>
     acc:	stur	w0, [x29, #-24]
     ad0:	add	x8, x8, #0x0
     ad4:	b	fc0 <inflate+0xa90>
     ad8:	ldr	w10, [x27, #140]
     adc:	b	bf4 <inflate+0x6c4>
     ae0:	ldr	w8, [x27, #100]
     ae4:	cbz	w8, 17e0 <inflate+0x12b0>
     ae8:	cmp	w21, w8
     aec:	b.cs	eac <inflate+0x97c>  // b.hs, b.nlast
     af0:	mov	w11, w21
     af4:	mov	w9, w24
     af8:	mov	x10, x22
     afc:	cbz	w9, 1c4c <inflate+0x171c>
     b00:	ldrb	w12, [x10], #1
     b04:	sub	w9, w9, #0x1
     b08:	lsl	x12, x12, x11
     b0c:	add	w11, w11, #0x8
     b10:	cmp	w11, w8
     b14:	add	x25, x12, x25
     b18:	b.cc	afc <inflate+0x5cc>  // b.lo, b.ul, b.last
     b1c:	b	eb8 <inflate+0x988>
     b20:	ldr	w8, [x27, #100]
     b24:	b	1948 <inflate+0x1418>
     b28:	cbz	w0, 1c70 <inflate+0x1740>
     b2c:	ldr	w8, [x27, #92]
     b30:	mov	w9, #0x3f48                	// #16200
     b34:	sub	w0, w0, #0x1
     b38:	strb	w8, [x28], #1
     b3c:	str	w9, [x27, #8]
     b40:	ldr	w8, [x23]
     b44:	b	628 <inflate+0xf8>
     b48:	ldr	w8, [x27, #16]
     b4c:	cbz	w8, 1560 <inflate+0x1030>
     b50:	cmp	w21, #0x1f
     b54:	b.hi	b80 <inflate+0x650>  // b.pmore
     b58:	mov	w9, w21
     b5c:	cbz	w24, 1c60 <inflate+0x1730>
     b60:	ldrb	w10, [x22], #1
     b64:	add	x21, x9, #0x8
     b68:	sub	w24, w24, #0x1
     b6c:	cmp	x9, #0x18
     b70:	lsl	x10, x10, x9
     b74:	add	x25, x10, x25
     b78:	mov	x9, x21
     b7c:	b.cc	b5c <inflate+0x62c>  // b.lo, b.ul, b.last
     b80:	ldur	w10, [x29, #-20]
     b84:	ldr	x9, [x19, #40]
     b88:	and	w8, w8, #0x4
     b8c:	subs	w2, w10, w0
     b90:	add	x9, x9, x2
     b94:	str	x9, [x19, #40]
     b98:	ldr	x9, [x27, #40]
     b9c:	add	x9, x9, x2
     ba0:	str	x9, [x27, #40]
     ba4:	b.eq	1514 <inflate+0xfe4>  // b.none
     ba8:	cbz	w8, 1514 <inflate+0xfe4>
     bac:	mov	w26, w0
     bb0:	ldr	w8, [x27, #24]
     bb4:	ldr	x0, [x27, #32]
     bb8:	sub	x1, x28, x2
     bbc:	cbz	w8, 14f0 <inflate+0xfc0>
     bc0:	bl	0 <crc32>
     bc4:	b	14f4 <inflate+0xfc4>
     bc8:	mov	w8, #0x3f3f                	// #16191
     bcc:	b	1b20 <inflate+0x15f0>
     bd0:	adrp	x3, 0 <inflateResetKeep>
     bd4:	mov	w10, wzr
     bd8:	mov	w8, #0x3f46                	// #16198
     bdc:	mov	w0, w26
     be0:	mov	w1, #0xffffc0cc            	// #-16180
     be4:	add	x3, x3, #0x0
     be8:	stur	wzr, [x29, #-24]
     bec:	str	wzr, [x27, #140]
     bf0:	str	w8, [x27, #8]
     bf4:	ldp	w2, w8, [x27, #132]
     bf8:	add	w8, w8, w2
     bfc:	cmp	w10, w8
     c00:	b.cs	e3c <inflate+0x90c>  // b.hs, b.nlast
     c04:	ldr	w11, [x27, #120]
     c08:	ldr	x9, [x27, #104]
     c0c:	mov	w12, #0xffffffff            	// #-1
     c10:	lsl	w11, w12, w11
     c14:	mvn	w11, w11
     c18:	and	w16, w11, w25
     c1c:	add	x12, x9, w16, uxtw #2
     c20:	ldrb	w12, [x12, #1]
     c24:	cmp	w21, w12
     c28:	b.cs	c74 <inflate+0x744>  // b.hs, b.nlast
     c2c:	mov	w13, w21
     c30:	mov	w14, w24
     c34:	mov	x15, x22
     c38:	cbz	w14, 1c4c <inflate+0x171c>
     c3c:	ldrb	w12, [x15], #1
     c40:	sub	w14, w14, #0x1
     c44:	lsl	x12, x12, x13
     c48:	add	x25, x12, x25
     c4c:	and	w16, w11, w25
     c50:	add	x12, x9, w16, uxtw #2
     c54:	ldrb	w12, [x12, #1]
     c58:	add	x13, x13, #0x8
     c5c:	cmp	x13, x12
     c60:	b.cc	c38 <inflate+0x708>  // b.lo, b.ul, b.last
     c64:	mov	w16, w16
     c68:	mov	x22, x15
     c6c:	mov	w24, w14
     c70:	mov	w21, w13
     c74:	add	x13, x9, x16, lsl #2
     c78:	ldrh	w13, [x13, #2]
     c7c:	cmp	w13, #0xf
     c80:	b.hi	ca0 <inflate+0x770>  // b.pmore
     c84:	lsr	x25, x25, x12
     c88:	sub	w21, w21, w12
     c8c:	add	x12, x27, w10, uxtw #1
     c90:	add	w10, w10, #0x1
     c94:	str	w10, [x27, #140]
     c98:	strh	w13, [x12, #152]
     c9c:	b	df8 <inflate+0x8c8>
     ca0:	cmp	w13, #0x10
     ca4:	b.eq	d00 <inflate+0x7d0>  // b.none
     ca8:	cmp	w13, #0x11
     cac:	b.ne	d5c <inflate+0x82c>  // b.any
     cb0:	add	w13, w12, #0x3
     cb4:	cmp	w21, w13
     cb8:	b.cs	ce0 <inflate+0x7b0>  // b.hs, b.nlast
     cbc:	mov	w21, w21
     cc0:	cbz	w24, 1c70 <inflate+0x1740>
     cc4:	ldrb	w14, [x22], #1
     cc8:	sub	w24, w24, #0x1
     ccc:	lsl	x14, x14, x21
     cd0:	add	x21, x21, #0x8
     cd4:	cmp	x21, x13
     cd8:	add	x25, x14, x25
     cdc:	b.cc	cc0 <inflate+0x790>  // b.lo, b.ul, b.last
     ce0:	lsr	x14, x25, x12
     ce4:	sub	w15, w21, w12
     ce8:	and	w12, w14, #0x7
     cec:	mov	w13, wzr
     cf0:	lsr	x25, x14, #3
     cf4:	add	w12, w12, #0x3
     cf8:	sub	w21, w15, #0x3
     cfc:	b	da8 <inflate+0x878>
     d00:	add	w13, w12, #0x2
     d04:	cmp	w21, w13
     d08:	b.cs	d30 <inflate+0x800>  // b.hs, b.nlast
     d0c:	mov	w21, w21
     d10:	cbz	w24, 1c70 <inflate+0x1740>
     d14:	ldrb	w14, [x22], #1
     d18:	sub	w24, w24, #0x1
     d1c:	lsl	x14, x14, x21
     d20:	add	x21, x21, #0x8
     d24:	cmp	x21, x13
     d28:	add	x25, x14, x25
     d2c:	b.cc	d10 <inflate+0x7e0>  // b.lo, b.ul, b.last
     d30:	lsr	x25, x25, x12
     d34:	sub	w21, w21, w12
     d38:	cbz	w10, 1bec <inflate+0x16bc>
     d3c:	sub	w12, w10, #0x1
     d40:	add	x12, x27, w12, uxtw #1
     d44:	ldrh	w13, [x12, #152]
     d48:	and	w12, w25, #0x3
     d4c:	add	w12, w12, #0x3
     d50:	lsr	x25, x25, #2
     d54:	sub	w21, w21, #0x2
     d58:	b	da8 <inflate+0x878>
     d5c:	add	w13, w12, #0x7
     d60:	cmp	w21, w13
     d64:	b.cs	d8c <inflate+0x85c>  // b.hs, b.nlast
     d68:	mov	w21, w21
     d6c:	cbz	w24, 1c70 <inflate+0x1740>
     d70:	ldrb	w14, [x22], #1
     d74:	sub	w24, w24, #0x1
     d78:	lsl	x14, x14, x21
     d7c:	add	x21, x21, #0x8
     d80:	cmp	x21, x13
     d84:	add	x25, x14, x25
     d88:	b.cc	d6c <inflate+0x83c>  // b.lo, b.ul, b.last
     d8c:	lsr	x14, x25, x12
     d90:	sub	w15, w21, w12
     d94:	and	w12, w14, #0x7f
     d98:	mov	w13, wzr
     d9c:	lsr	x25, x14, #7
     da0:	add	w12, w12, #0xb
     da4:	sub	w21, w15, #0x7
     da8:	add	w14, w12, w10
     dac:	cmp	w14, w8
     db0:	b.hi	1bec <inflate+0x16bc>  // b.pmore
     db4:	cmp	w12, #0xf
     db8:	b.ls	dcc <inflate+0x89c>  // b.plast
     dbc:	sub	w14, w12, #0x1
     dc0:	mvn	w15, w10
     dc4:	cmp	w14, w15
     dc8:	b.ls	e04 <inflate+0x8d4>  // b.plast
     dcc:	mov	w15, w10
     dd0:	mov	w14, w12
     dd4:	mov	w10, w15
     dd8:	add	w15, w10, #0x1
     ddc:	add	x10, x27, w10, uxtw #1
     de0:	subs	w14, w14, #0x1
     de4:	strh	w13, [x10, #152]
     de8:	mov	w10, w15
     dec:	b.ne	dd8 <inflate+0x8a8>  // b.any
     df0:	mov	w10, w15
     df4:	str	w15, [x27, #140]
     df8:	cmp	w10, w8
     dfc:	b.cc	c18 <inflate+0x6e8>  // b.lo, b.ul, b.last
     e00:	b	e3c <inflate+0x90c>
     e04:	and	w16, w12, #0xf0
     e08:	and	w14, w12, #0xf
     e0c:	add	w15, w10, w16
     e10:	dup	v0.8h, w13
     e14:	mov	w17, w16
     e18:	add	x18, x27, w10, uxtw #1
     e1c:	subs	w17, w17, #0x10
     e20:	add	w10, w10, #0x10
     e24:	stur	q0, [x18, #152]
     e28:	stur	q0, [x18, #168]
     e2c:	b.ne	e18 <inflate+0x8e8>  // b.any
     e30:	cmp	w12, w16
     e34:	b.ne	dd4 <inflate+0x8a4>  // b.any
     e38:	b	df0 <inflate+0x8c0>
     e3c:	ldrh	w8, [x27, #664]
     e40:	cbz	w8, f1c <inflate+0x9ec>
     e44:	ldp	x4, x8, [sp, #32]
     e48:	ldr	x1, [sp, #24]
     e4c:	mov	w26, w0
     e50:	mov	w0, #0x1                   	// #1
     e54:	str	x8, [x27, #144]
     e58:	str	x8, [x27, #104]
     e5c:	mov	w8, #0x9                   	// #9
     e60:	str	w8, [x27, #120]
     e64:	ldp	x5, x3, [sp, #48]
     e68:	bl	0 <inflate_table>
     e6c:	cbz	w0, f84 <inflate+0xa54>
     e70:	adrp	x8, 0 <inflateResetKeep>
     e74:	stur	w0, [x29, #-24]
     e78:	add	x8, x8, #0x0
     e7c:	b	fc0 <inflate+0xa90>
     e80:	mov	w8, #0x3f40                	// #16192
     e84:	b	1b20 <inflate+0x15f0>
     e88:	adrp	x8, 0 <inflateResetKeep>
     e8c:	add	x8, x8, #0x0
     e90:	b	1b4c <inflate+0x161c>
     e94:	adrp	x8, 0 <inflateResetKeep>
     e98:	add	x8, x8, #0x0
     e9c:	b	1b4c <inflate+0x161c>
     ea0:	adrp	x8, 0 <inflateResetKeep>
     ea4:	add	x8, x8, #0x0
     ea8:	b	1b4c <inflate+0x161c>
     eac:	mov	x10, x22
     eb0:	mov	w9, w24
     eb4:	mov	w11, w21
     eb8:	ldr	w13, [x27, #92]
     ebc:	ldr	w14, [x27, #7148]
     ec0:	mov	w12, #0xffffffff            	// #-1
     ec4:	sub	w21, w11, w8
     ec8:	lsl	w11, w12, w8
     ecc:	bic	w11, w25, w11
     ed0:	lsr	x25, x25, x8
     ed4:	add	w11, w13, w11
     ed8:	add	w8, w14, w8
     edc:	mov	x22, x10
     ee0:	mov	w24, w9
     ee4:	str	w11, [x27, #92]
     ee8:	str	w8, [x27, #7148]
     eec:	b	17e4 <inflate+0x12b4>
     ef0:	mov	w8, #0x3f44                	// #16196
     ef4:	b	f08 <inflate+0x9d8>
     ef8:	adrp	x8, 0 <inflateResetKeep>
     efc:	add	x8, x8, #0x0
     f00:	str	x8, [x19, #48]
     f04:	mov	w8, #0x3f51                	// #16209
     f08:	str	w8, [x23]
     f0c:	ldr	w8, [x23]
     f10:	lsr	x25, x25, #3
     f14:	sub	w21, w21, #0x3
     f18:	b	628 <inflate+0xf8>
     f1c:	adrp	x8, 0 <inflateResetKeep>
     f20:	add	x8, x8, #0x0
     f24:	b	1b4c <inflate+0x161c>
     f28:	ldr	x9, [x27, #48]
     f2c:	str	wzr, [x27, #24]
     f30:	cbz	x9, f3c <inflate+0xa0c>
     f34:	mov	w10, #0xffffffff            	// #-1
     f38:	str	w10, [x9, #72]
     f3c:	tbz	w8, #0, f78 <inflate+0xa48>
     f40:	mov	x9, #0x7bdf                	// #31711
     f44:	lsl	w8, w25, #8
     f48:	movk	x9, #0xbdef, lsl #16
     f4c:	movk	x9, #0xdef7, lsl #32
     f50:	and	x8, x8, #0xff00
     f54:	movk	x9, #0xef7b, lsl #48
     f58:	add	x8, x8, x25, lsr #8
     f5c:	mul	x8, x8, x9
     f60:	mov	x9, #0x4211                	// #16913
     f64:	movk	x9, #0x2108, lsl #16
     f68:	movk	x9, #0x1084, lsl #32
     f6c:	movk	x9, #0x842, lsl #48
     f70:	cmp	x8, x9
     f74:	b.cc	1b60 <inflate+0x1630>  // b.lo, b.ul, b.last
     f78:	adrp	x8, 0 <inflateResetKeep>
     f7c:	add	x8, x8, #0x0
     f80:	b	1b4c <inflate+0x161c>
     f84:	ldr	x8, [x27, #144]
     f88:	mov	w9, #0x6                   	// #6
     f8c:	ldp	w10, w2, [x27, #132]
     f90:	str	w9, [x27, #124]
     f94:	str	x8, [x27, #112]
     f98:	ldp	x5, x3, [sp, #48]
     f9c:	ldr	x4, [sp, #8]
     fa0:	add	x8, x27, x10, lsl #1
     fa4:	add	x1, x8, #0x98
     fa8:	mov	w0, #0x2                   	// #2
     fac:	bl	0 <inflate_table>
     fb0:	stur	w0, [x29, #-24]
     fb4:	cbz	w0, 15e0 <inflate+0x10b0>
     fb8:	adrp	x8, 0 <inflateResetKeep>
     fbc:	add	x8, x8, #0x0
     fc0:	mov	w9, #0x3f51                	// #16209
     fc4:	str	x8, [x19, #48]
     fc8:	str	w9, [x23]
     fcc:	b	14cc <inflate+0xf9c>
     fd0:	ldr	x8, [x27, #48]
     fd4:	cbz	x8, fe0 <inflate+0xab0>
     fd8:	ubfx	w9, w25, #8, #1
     fdc:	str	w9, [x8]
     fe0:	tbz	w25, #9, 101c <inflate+0xaec>
     fe4:	ldrb	w8, [x27, #16]
     fe8:	tbz	w8, #2, 101c <inflate+0xaec>
     fec:	sturh	w25, [x29, #-4]
     ff0:	ldur	x25, [x29, #-16]
     ff4:	mov	w21, w0
     ff8:	sub	x1, x29, #0x4
     ffc:	mov	w2, #0x2                   	// #2
    1000:	ldr	x0, [x25]
    1004:	bl	0 <crc32>
    1008:	adrp	x3, 0 <inflateResetKeep>
    100c:	add	x3, x3, #0x0
    1010:	mov	w1, #0xffffc0cc            	// #-16180
    1014:	str	x0, [x25]
    1018:	mov	w0, w21
    101c:	mov	w8, #0x3f36                	// #16182
    1020:	mov	w21, wzr
    1024:	mov	x25, xzr
    1028:	str	w8, [x23]
    102c:	mov	w21, w21
    1030:	cbz	w24, 1c70 <inflate+0x1740>
    1034:	ldrb	w8, [x22], #1
    1038:	sub	w24, w24, #0x1
    103c:	cmp	x21, #0x18
    1040:	lsl	x8, x8, x21
    1044:	add	x21, x21, #0x8
    1048:	add	x25, x8, x25
    104c:	b.cc	1030 <inflate+0xb00>  // b.lo, b.ul, b.last
    1050:	ldr	x8, [x27, #48]
    1054:	cbz	x8, 105c <inflate+0xb2c>
    1058:	str	x25, [x8, #8]
    105c:	ldrb	w8, [x27, #25]
    1060:	tbz	w8, #1, 109c <inflate+0xb6c>
    1064:	ldrb	w8, [x27, #16]
    1068:	tbz	w8, #2, 109c <inflate+0xb6c>
    106c:	stur	w25, [x29, #-4]
    1070:	ldur	x25, [x29, #-16]
    1074:	mov	w21, w0
    1078:	sub	x1, x29, #0x4
    107c:	mov	w2, #0x4                   	// #4
    1080:	ldr	x0, [x25]
    1084:	bl	0 <crc32>
    1088:	adrp	x3, 0 <inflateResetKeep>
    108c:	add	x3, x3, #0x0
    1090:	mov	w1, #0xffffc0cc            	// #-16180
    1094:	str	x0, [x25]
    1098:	mov	w0, w21
    109c:	mov	w8, #0x3f37                	// #16183
    10a0:	mov	w21, wzr
    10a4:	mov	x25, xzr
    10a8:	str	w8, [x23]
    10ac:	mov	w21, w21
    10b0:	cbz	w24, 1c70 <inflate+0x1740>
    10b4:	ldrb	w8, [x22], #1
    10b8:	sub	w24, w24, #0x1
    10bc:	cmp	x21, #0x8
    10c0:	lsl	x8, x8, x21
    10c4:	add	x21, x21, #0x8
    10c8:	add	x25, x8, x25
    10cc:	b.cc	10b0 <inflate+0xb80>  // b.lo, b.ul, b.last
    10d0:	ldr	x8, [x27, #48]
    10d4:	cbz	x8, 10e4 <inflate+0xbb4>
    10d8:	and	w9, w25, #0xff
    10dc:	lsr	x10, x25, #8
    10e0:	stp	w9, w10, [x8, #16]
    10e4:	ldrb	w8, [x27, #25]
    10e8:	tbz	w8, #1, 1124 <inflate+0xbf4>
    10ec:	ldrb	w8, [x27, #16]
    10f0:	tbz	w8, #2, 1124 <inflate+0xbf4>
    10f4:	sturh	w25, [x29, #-4]
    10f8:	ldur	x25, [x29, #-16]
    10fc:	mov	w21, w0
    1100:	sub	x1, x29, #0x4
    1104:	mov	w2, #0x2                   	// #2
    1108:	ldr	x0, [x25]
    110c:	bl	0 <crc32>
    1110:	adrp	x3, 0 <inflateResetKeep>
    1114:	add	x3, x3, #0x0
    1118:	mov	w1, #0xffffc0cc            	// #-16180
    111c:	str	x0, [x25]
    1120:	mov	w0, w21
    1124:	mov	x25, xzr
    1128:	mov	w21, wzr
    112c:	mov	w8, #0x3f38                	// #16184
    1130:	str	w8, [x23]
    1134:	ldr	w8, [x27, #24]
    1138:	tbnz	w8, #10, 114c <inflate+0xc1c>
    113c:	ldr	x8, [x27, #48]
    1140:	cbz	x8, 11cc <inflate+0xc9c>
    1144:	str	xzr, [x8, #24]
    1148:	b	11cc <inflate+0xc9c>
    114c:	cmp	w21, #0xf
    1150:	b.hi	1178 <inflate+0xc48>  // b.pmore
    1154:	mov	w21, w21
    1158:	cbz	w24, 1c70 <inflate+0x1740>
    115c:	ldrb	w9, [x22], #1
    1160:	sub	w24, w24, #0x1
    1164:	cmp	x21, #0x8
    1168:	lsl	x9, x9, x21
    116c:	add	x21, x21, #0x8
    1170:	add	x25, x9, x25
    1174:	b.cc	1158 <inflate+0xc28>  // b.lo, b.ul, b.last
    1178:	ldr	x9, [x27, #48]
    117c:	str	w25, [x27, #92]
    1180:	cbz	x9, 1188 <inflate+0xc58>
    1184:	str	w25, [x9, #32]
    1188:	tbz	w8, #9, 11c4 <inflate+0xc94>
    118c:	ldrb	w8, [x27, #16]
    1190:	tbz	w8, #2, 11c4 <inflate+0xc94>
    1194:	ldur	x26, [x29, #-16]
    1198:	sturh	w25, [x29, #-4]
    119c:	str	w0, [sp, #4]
    11a0:	sub	x1, x29, #0x4
    11a4:	ldr	x0, [x26]
    11a8:	mov	w2, #0x2                   	// #2
    11ac:	bl	0 <crc32>
    11b0:	str	x0, [x26]
    11b4:	ldr	w0, [sp, #4]
    11b8:	adrp	x3, 0 <inflateResetKeep>
    11bc:	add	x3, x3, #0x0
    11c0:	mov	w1, #0xffffc0cc            	// #-16180
    11c4:	mov	x25, xzr
    11c8:	mov	w21, wzr
    11cc:	mov	w8, #0x3f39                	// #16185
    11d0:	str	w8, [x23]
    11d4:	ldr	w9, [x27, #24]
    11d8:	tbz	w9, #10, 1298 <inflate+0xd68>
    11dc:	ldr	w8, [x27, #92]
    11e0:	cmp	w8, w24
    11e4:	csel	w26, w24, w8, hi  // hi = pmore
    11e8:	cbz	w26, 1294 <inflate+0xd64>
    11ec:	ldr	x10, [x27, #48]
    11f0:	cbz	x10, 1240 <inflate+0xd10>
    11f4:	ldr	x11, [x10, #24]
    11f8:	cbz	x11, 1240 <inflate+0xd10>
    11fc:	ldp	w9, w10, [x10, #32]
    1200:	str	x28, [sp, #16]
    1204:	mov	w28, w0
    1208:	mov	x1, x22
    120c:	sub	w8, w9, w8
    1210:	add	w9, w8, w26
    1214:	add	x0, x11, x8
    1218:	sub	w8, w10, w8
    121c:	cmp	w9, w10
    1220:	csel	w2, w8, w26, hi  // hi = pmore
    1224:	bl	0 <memcpy>
    1228:	mov	w0, w28
    122c:	ldr	x28, [sp, #16]
    1230:	ldr	w9, [x27, #24]
    1234:	adrp	x3, 0 <inflateResetKeep>
    1238:	add	x3, x3, #0x0
    123c:	mov	w1, #0xffffc0cc            	// #-16180
    1240:	tbz	w9, #9, 1280 <inflate+0xd50>
    1244:	ldrb	w8, [x27, #16]
    1248:	tbz	w8, #2, 1280 <inflate+0xd50>
    124c:	str	x28, [sp, #16]
    1250:	ldur	x28, [x29, #-16]
    1254:	str	w0, [sp, #4]
    1258:	mov	x1, x22
    125c:	mov	w2, w26
    1260:	ldr	x0, [x28]
    1264:	bl	0 <crc32>
    1268:	str	x0, [x28]
    126c:	ldr	w0, [sp, #4]
    1270:	ldr	x28, [sp, #16]
    1274:	adrp	x3, 0 <inflateResetKeep>
    1278:	add	x3, x3, #0x0
    127c:	mov	w1, #0xffffc0cc            	// #-16180
    1280:	ldr	w8, [x27, #92]
    1284:	sub	w24, w24, w26
    1288:	add	x22, x22, w26, uxtw
    128c:	sub	w8, w8, w26
    1290:	str	w8, [x27, #92]
    1294:	cbnz	w8, 1c70 <inflate+0x1740>
    1298:	mov	w8, #0x3f3a                	// #16186
    129c:	str	wzr, [x27, #92]
    12a0:	str	w8, [x27, #8]
    12a4:	ldrb	w8, [x27, #25]
    12a8:	tbnz	w8, #3, 12bc <inflate+0xd8c>
    12ac:	ldr	x8, [x27, #48]
    12b0:	cbz	x8, 1364 <inflate+0xe34>
    12b4:	str	xzr, [x8, #40]
    12b8:	b	1364 <inflate+0xe34>
    12bc:	cbz	w24, 1c70 <inflate+0x1740>
    12c0:	stur	x23, [x29, #-40]
    12c4:	mov	x26, xzr
    12c8:	mov	w23, w24
    12cc:	str	x28, [sp, #16]
    12d0:	ldr	x9, [x27, #48]
    12d4:	ldrb	w28, [x22, x26]
    12d8:	add	x26, x26, #0x1
    12dc:	cbz	x9, 1304 <inflate+0xdd4>
    12e0:	ldr	x8, [x9, #40]
    12e4:	cbz	x8, 1304 <inflate+0xdd4>
    12e8:	ldr	w10, [x27, #92]
    12ec:	ldr	w9, [x9, #48]
    12f0:	cmp	w10, w9
    12f4:	b.cs	1304 <inflate+0xdd4>  // b.hs, b.nlast
    12f8:	add	w9, w10, #0x1
    12fc:	str	w9, [x27, #92]
    1300:	strb	w28, [x8, x10]
    1304:	cbz	w28, 1310 <inflate+0xde0>
    1308:	cmp	x26, x23
    130c:	b.cc	12d0 <inflate+0xda0>  // b.lo, b.ul, b.last
    1310:	ldrb	w8, [x27, #25]
    1314:	tbz	w8, #1, 1350 <inflate+0xe20>
    1318:	ldrb	w8, [x27, #16]
    131c:	tbz	w8, #2, 1350 <inflate+0xe20>
    1320:	ldur	x8, [x29, #-16]
    1324:	str	w0, [sp, #4]
    1328:	mov	x1, x22
    132c:	mov	w2, w26
    1330:	ldr	x0, [x8]
    1334:	bl	0 <crc32>
    1338:	ldur	x8, [x29, #-16]
    133c:	adrp	x3, 0 <inflateResetKeep>
    1340:	add	x3, x3, #0x0
    1344:	mov	w1, #0xffffc0cc            	// #-16180
    1348:	str	x0, [x8]
    134c:	ldr	w0, [sp, #4]
    1350:	add	x22, x22, x26
    1354:	cbnz	w28, 1dd0 <inflate+0x18a0>
    1358:	sub	x24, x23, x26
    135c:	ldur	x23, [x29, #-40]
    1360:	ldr	x28, [sp, #16]
    1364:	mov	w8, #0x3f3b                	// #16187
    1368:	str	wzr, [x27, #92]
    136c:	str	w8, [x27, #8]
    1370:	ldrb	w8, [x27, #25]
    1374:	tbnz	w8, #4, 1388 <inflate+0xe58>
    1378:	ldr	x8, [x27, #48]
    137c:	cbz	x8, 1430 <inflate+0xf00>
    1380:	str	xzr, [x8, #56]
    1384:	b	1430 <inflate+0xf00>
    1388:	cbz	w24, 1c70 <inflate+0x1740>
    138c:	stur	x23, [x29, #-40]
    1390:	mov	x26, xzr
    1394:	mov	w23, w24
    1398:	str	x28, [sp, #16]
    139c:	ldr	x9, [x27, #48]
    13a0:	ldrb	w28, [x22, x26]
    13a4:	add	x26, x26, #0x1
    13a8:	cbz	x9, 13d0 <inflate+0xea0>
    13ac:	ldr	x8, [x9, #56]
    13b0:	cbz	x8, 13d0 <inflate+0xea0>
    13b4:	ldr	w10, [x27, #92]
    13b8:	ldr	w9, [x9, #64]
    13bc:	cmp	w10, w9
    13c0:	b.cs	13d0 <inflate+0xea0>  // b.hs, b.nlast
    13c4:	add	w9, w10, #0x1
    13c8:	str	w9, [x27, #92]
    13cc:	strb	w28, [x8, x10]
    13d0:	cbz	w28, 13dc <inflate+0xeac>
    13d4:	cmp	x26, x23
    13d8:	b.cc	139c <inflate+0xe6c>  // b.lo, b.ul, b.last
    13dc:	ldrb	w8, [x27, #25]
    13e0:	tbz	w8, #1, 141c <inflate+0xeec>
    13e4:	ldrb	w8, [x27, #16]
    13e8:	tbz	w8, #2, 141c <inflate+0xeec>
    13ec:	ldur	x8, [x29, #-16]
    13f0:	str	w0, [sp, #4]
    13f4:	mov	x1, x22
    13f8:	mov	w2, w26
    13fc:	ldr	x0, [x8]
    1400:	bl	0 <crc32>
    1404:	ldur	x8, [x29, #-16]
    1408:	adrp	x3, 0 <inflateResetKeep>
    140c:	add	x3, x3, #0x0
    1410:	mov	w1, #0xffffc0cc            	// #-16180
    1414:	str	x0, [x8]
    1418:	ldr	w0, [sp, #4]
    141c:	add	x22, x22, x26
    1420:	cbnz	w28, 1dd0 <inflate+0x18a0>
    1424:	sub	x24, x23, x26
    1428:	ldur	x23, [x29, #-40]
    142c:	ldr	x28, [sp, #16]
    1430:	mov	w8, #0x3f3c                	// #16188
    1434:	str	w8, [x23]
    1438:	ldr	w8, [x27, #24]
    143c:	tbz	w8, #9, 1490 <inflate+0xf60>
    1440:	cmp	w21, #0xf
    1444:	b.hi	1470 <inflate+0xf40>  // b.pmore
    1448:	mov	w9, w21
    144c:	cbz	w24, 1c60 <inflate+0x1730>
    1450:	ldrb	w10, [x22], #1
    1454:	add	x21, x9, #0x8
    1458:	sub	w24, w24, #0x1
    145c:	cmp	x9, #0x8
    1460:	lsl	x10, x10, x9
    1464:	add	x25, x10, x25
    1468:	mov	x9, x21
    146c:	b.cc	144c <inflate+0xf1c>  // b.lo, b.ul, b.last
    1470:	ldrb	w9, [x27, #16]
    1474:	tbz	w9, #2, 1488 <inflate+0xf58>
    1478:	ldur	x9, [x29, #-16]
    147c:	ldrh	w9, [x9]
    1480:	cmp	x25, x9
    1484:	b.ne	14e4 <inflate+0xfb4>  // b.any
    1488:	mov	x25, xzr
    148c:	mov	w21, wzr
    1490:	ldr	x9, [x27, #48]
    1494:	mov	w26, w0
    1498:	cbz	x9, 14a8 <inflate+0xf78>
    149c:	ubfx	w8, w8, #9, #1
    14a0:	mov	w10, #0x1                   	// #1
    14a4:	stp	w8, w10, [x9, #68]
    14a8:	mov	x0, xzr
    14ac:	mov	x1, xzr
    14b0:	mov	w2, wzr
    14b4:	bl	0 <crc32>
    14b8:	ldur	x8, [x29, #-16]
    14bc:	str	x0, [x8]
    14c0:	mov	w8, #0x3f3f                	// #16191
    14c4:	str	x0, [x19, #96]
    14c8:	str	w8, [x23]
    14cc:	mov	w0, w26
    14d0:	ldr	w8, [x23]
    14d4:	adrp	x3, 0 <inflateResetKeep>
    14d8:	mov	w1, #0xffffc0cc            	// #-16180
    14dc:	add	x3, x3, #0x0
    14e0:	b	628 <inflate+0xf8>
    14e4:	adrp	x8, 0 <inflateResetKeep>
    14e8:	add	x8, x8, #0x0
    14ec:	b	1b4c <inflate+0x161c>
    14f0:	bl	0 <adler32>
    14f4:	str	x0, [x27, #32]
    14f8:	str	x0, [x19, #96]
    14fc:	ldr	w8, [x27, #16]
    1500:	adrp	x3, 0 <inflateResetKeep>
    1504:	mov	w0, w26
    1508:	mov	w1, #0xffffc0cc            	// #-16180
    150c:	and	w8, w8, #0x4
    1510:	add	x3, x3, #0x0
    1514:	cbz	w8, 1554 <inflate+0x1024>
    1518:	ldr	w9, [x27, #24]
    151c:	mov	x8, x25
    1520:	cbnz	w9, 1544 <inflate+0x1014>
    1524:	lsr	x8, x25, #8
    1528:	lsl	w9, w25, #8
    152c:	and	x8, x8, #0xff00
    1530:	and	x9, x9, #0xff0000
    1534:	bfxil	x8, x25, #24, #8
    1538:	orr	x8, x8, x9
    153c:	lsl	w9, w25, #24
    1540:	orr	x8, x8, x9
    1544:	ldur	x9, [x29, #-16]
    1548:	ldr	x9, [x9]
    154c:	cmp	x8, x9
    1550:	b.ne	15c0 <inflate+0x1090>  // b.any
    1554:	mov	x25, xzr
    1558:	mov	w21, wzr
    155c:	stur	w0, [x29, #-20]
    1560:	mov	w8, #0x3f4f                	// #16207
    1564:	str	w8, [x23]
    1568:	ldr	w8, [x27, #16]
    156c:	cbz	w8, 1e18 <inflate+0x18e8>
    1570:	ldr	w8, [x27, #24]
    1574:	cbz	w8, 1e18 <inflate+0x18e8>
    1578:	cmp	w21, #0x1f
    157c:	b.hi	15a8 <inflate+0x1078>  // b.pmore
    1580:	mov	w8, w21
    1584:	cbz	w24, 1c6c <inflate+0x173c>
    1588:	ldrb	w9, [x22], #1
    158c:	add	x21, x8, #0x8
    1590:	sub	w24, w24, #0x1
    1594:	cmp	x8, #0x18
    1598:	lsl	x9, x9, x8
    159c:	add	x25, x9, x25
    15a0:	mov	x8, x21
    15a4:	b.cc	1584 <inflate+0x1054>  // b.lo, b.ul, b.last
    15a8:	ldr	w8, [x27, #40]
    15ac:	cmp	x25, x8
    15b0:	b.eq	1e10 <inflate+0x18e0>  // b.none
    15b4:	adrp	x8, 0 <inflateResetKeep>
    15b8:	add	x8, x8, #0x0
    15bc:	b	1b4c <inflate+0x161c>
    15c0:	adrp	x8, 0 <inflateResetKeep>
    15c4:	add	x8, x8, #0x0
    15c8:	mov	w9, #0x3f51                	// #16209
    15cc:	str	x8, [x19, #48]
    15d0:	str	w9, [x23]
    15d4:	stur	w0, [x29, #-20]
    15d8:	mov	w8, w9
    15dc:	b	628 <inflate+0xf8>
    15e0:	adrp	x3, 0 <inflateResetKeep>
    15e4:	mov	w8, #0x3f47                	// #16199
    15e8:	cmp	w20, #0x6
    15ec:	mov	w0, w26
    15f0:	mov	w1, #0xffffc0cc            	// #-16180
    15f4:	add	x3, x3, #0x0
    15f8:	stur	wzr, [x29, #-24]
    15fc:	str	w8, [x23]
    1600:	b.eq	1c70 <inflate+0x1740>  // b.none
    1604:	mov	w8, #0x3f48                	// #16200
    1608:	str	w8, [x23]
    160c:	cmp	w0, #0x102
    1610:	b.cc	1674 <inflate+0x1144>  // b.lo, b.ul, b.last
    1614:	cmp	w24, #0x6
    1618:	b.cc	1674 <inflate+0x1144>  // b.lo, b.ul, b.last
    161c:	ldur	w1, [x29, #-20]
    1620:	str	w0, [x19, #32]
    1624:	mov	x0, x19
    1628:	str	x28, [x19, #24]
    162c:	str	x22, [x19]
    1630:	str	w24, [x19, #8]
    1634:	str	x25, [x27, #80]
    1638:	str	w21, [x27, #88]
    163c:	bl	0 <inflate_fast>
    1640:	ldr	w8, [x27, #8]
    1644:	ldr	x28, [x19, #24]
    1648:	ldr	w0, [x19, #32]
    164c:	ldr	x22, [x19]
    1650:	ldr	w24, [x19, #8]
    1654:	ldr	x25, [x27, #80]
    1658:	ldr	w21, [x27, #88]
    165c:	mov	w9, #0x3f3f                	// #16191
    1660:	cmp	w8, w9
    1664:	b.ne	14d0 <inflate+0xfa0>  // b.any
    1668:	mov	w8, #0xffffffff            	// #-1
    166c:	str	w8, [x27, #7148]
    1670:	b	14d0 <inflate+0xfa0>
    1674:	ldr	w8, [x27, #120]
    1678:	ldr	x9, [x27, #104]
    167c:	mov	w10, #0xffffffff            	// #-1
    1680:	str	wzr, [x27, #7148]
    1684:	lsl	w10, w10, w8
    1688:	bic	w13, w25, w10
    168c:	add	x8, x9, w13, uxtw #2
    1690:	ldrb	w8, [x8, #1]
    1694:	cmp	w21, w8
    1698:	b.cs	16e8 <inflate+0x11b8>  // b.hs, b.nlast
    169c:	mvn	w13, w10
    16a0:	mov	w10, w21
    16a4:	mov	w11, w24
    16a8:	mov	x12, x22
    16ac:	cbz	w11, 1c4c <inflate+0x171c>
    16b0:	ldrb	w8, [x12], #1
    16b4:	sub	w11, w11, #0x1
    16b8:	lsl	x8, x8, x10
    16bc:	add	x25, x8, x25
    16c0:	and	w14, w13, w25
    16c4:	add	x8, x9, w14, uxtw #2
    16c8:	ldrb	w8, [x8, #1]
    16cc:	add	x10, x10, #0x8
    16d0:	cmp	x10, x8
    16d4:	b.cc	16ac <inflate+0x117c>  // b.lo, b.ul, b.last
    16d8:	mov	w13, w14
    16dc:	mov	x22, x12
    16e0:	mov	w24, w11
    16e4:	mov	w21, w10
    16e8:	add	x11, x9, x13, lsl #2
    16ec:	ldrb	w12, [x11]
    16f0:	ldrh	w11, [x11, #2]
    16f4:	mov	w10, w8
    16f8:	cbz	w12, 17a8 <inflate+0x1278>
    16fc:	and	w13, w12, #0xf0
    1700:	cbnz	w13, 17a8 <inflate+0x1278>
    1704:	add	w12, w10, w12
    1708:	mov	w13, #0xffffffff            	// #-1
    170c:	lsl	w12, w13, w12
    1710:	bic	w13, w25, w12
    1714:	lsr	w13, w13, w10
    1718:	add	w15, w13, w11
    171c:	add	x13, x9, w15, uxtw #2
    1720:	ldrb	w13, [x13, #1]
    1724:	add	w14, w10, w13
    1728:	cmp	w14, w21
    172c:	b.ls	1788 <inflate+0x1258>  // b.plast
    1730:	mvn	w15, w12
    1734:	mov	w12, w21
    1738:	mov	w14, w24
    173c:	mov	x16, x22
    1740:	cbz	w14, 1c4c <inflate+0x171c>
    1744:	ldrb	w13, [x16], #1
    1748:	sub	w14, w14, #0x1
    174c:	lsl	x13, x13, x12
    1750:	add	x25, x13, x25
    1754:	and	w13, w25, w15
    1758:	lsr	w13, w13, w10
    175c:	add	w17, w13, w11
    1760:	add	x13, x9, w17, uxtw #2
    1764:	ldrb	w13, [x13, #1]
    1768:	add	x12, x12, #0x8
    176c:	add	x18, x10, x13
    1770:	cmp	x12, x18
    1774:	b.cc	1740 <inflate+0x1210>  // b.lo, b.ul, b.last
    1778:	mov	w15, w17
    177c:	mov	x22, x16
    1780:	mov	w24, w14
    1784:	mov	w21, w12
    1788:	add	x9, x9, x15, lsl #2
    178c:	ldrh	w11, [x9, #2]
    1790:	ldrb	w12, [x9]
    1794:	lsr	x25, x25, x8
    1798:	sub	w21, w21, w10
    179c:	mov	w8, w13
    17a0:	str	w10, [x27, #7148]
    17a4:	b	17ac <inflate+0x127c>
    17a8:	mov	w10, wzr
    17ac:	lsr	x25, x25, x8
    17b0:	sub	w21, w21, w8
    17b4:	add	w8, w10, w8
    17b8:	str	w8, [x27, #7148]
    17bc:	str	w11, [x27, #92]
    17c0:	cbz	w12, 1b1c <inflate+0x15ec>
    17c4:	tbnz	w12, #5, 1b2c <inflate+0x15fc>
    17c8:	tbnz	w12, #6, 1b44 <inflate+0x1614>
    17cc:	and	w8, w12, #0xf
    17d0:	mov	w9, #0x3f49                	// #16201
    17d4:	str	w8, [x27, #100]
    17d8:	str	w9, [x27, #8]
    17dc:	cbnz	w8, ae8 <inflate+0x5b8>
    17e0:	ldr	w11, [x27, #92]
    17e4:	mov	w8, #0x3f4a                	// #16202
    17e8:	str	w11, [x27, #7152]
    17ec:	str	w8, [x27, #8]
    17f0:	ldr	w8, [x27, #124]
    17f4:	ldr	x9, [x27, #112]
    17f8:	mov	w10, #0xffffffff            	// #-1
    17fc:	lsl	w10, w10, w8
    1800:	bic	w13, w25, w10
    1804:	add	x8, x9, w13, uxtw #2
    1808:	ldrb	w8, [x8, #1]
    180c:	cmp	w21, w8
    1810:	b.cs	1860 <inflate+0x1330>  // b.hs, b.nlast
    1814:	mvn	w13, w10
    1818:	mov	w10, w21
    181c:	mov	w11, w24
    1820:	mov	x12, x22
    1824:	cbz	w11, 1c4c <inflate+0x171c>
    1828:	ldrb	w8, [x12], #1
    182c:	sub	w11, w11, #0x1
    1830:	lsl	x8, x8, x10
    1834:	add	x25, x8, x25
    1838:	and	w14, w13, w25
    183c:	add	x8, x9, w14, uxtw #2
    1840:	ldrb	w8, [x8, #1]
    1844:	add	x10, x10, #0x8
    1848:	cmp	x10, x8
    184c:	b.cc	1824 <inflate+0x12f4>  // b.lo, b.ul, b.last
    1850:	mov	w13, w14
    1854:	mov	x22, x12
    1858:	mov	w24, w11
    185c:	mov	w21, w10
    1860:	add	x10, x9, x13, lsl #2
    1864:	ldrb	w12, [x10]
    1868:	ldrh	w10, [x10, #2]
    186c:	tst	w12, #0xf0
    1870:	b.eq	187c <inflate+0x134c>  // b.none
    1874:	ldr	w9, [x27, #7148]
    1878:	b	1924 <inflate+0x13f4>
    187c:	add	w11, w8, w12
    1880:	mov	w12, #0xffffffff            	// #-1
    1884:	lsl	w12, w12, w11
    1888:	bic	w11, w25, w12
    188c:	lsr	w11, w11, w8
    1890:	add	w14, w11, w10
    1894:	add	x11, x9, w14, uxtw #2
    1898:	ldrb	w11, [x11, #1]
    189c:	add	w13, w8, w11
    18a0:	cmp	w13, w21
    18a4:	b.ls	1900 <inflate+0x13d0>  // b.plast
    18a8:	mvn	w14, w12
    18ac:	mov	w12, w21
    18b0:	mov	w13, w24
    18b4:	mov	x15, x22
    18b8:	cbz	w13, 1c4c <inflate+0x171c>
    18bc:	ldrb	w11, [x15], #1
    18c0:	sub	w13, w13, #0x1
    18c4:	lsl	x11, x11, x12
    18c8:	add	x25, x11, x25
    18cc:	and	w11, w25, w14
    18d0:	lsr	w11, w11, w8
    18d4:	add	w16, w11, w10
    18d8:	add	x11, x9, w16, uxtw #2
    18dc:	ldrb	w11, [x11, #1]
    18e0:	add	x12, x12, #0x8
    18e4:	add	x17, x8, x11
    18e8:	cmp	x12, x17
    18ec:	b.cc	18b8 <inflate+0x1388>  // b.lo, b.ul, b.last
    18f0:	mov	w14, w16
    18f4:	mov	x22, x15
    18f8:	mov	w24, w13
    18fc:	mov	w21, w12
    1900:	add	x9, x9, x14, lsl #2
    1904:	ldr	w13, [x27, #7148]
    1908:	ldrh	w10, [x9, #2]
    190c:	ldrb	w12, [x9]
    1910:	lsr	x25, x25, x8
    1914:	sub	w21, w21, w8
    1918:	add	w9, w13, w8
    191c:	mov	w8, w11
    1920:	str	w9, [x27, #7148]
    1924:	lsr	x25, x25, x8
    1928:	sub	w21, w21, w8
    192c:	add	w8, w9, w8
    1930:	str	w8, [x27, #7148]
    1934:	tbnz	w12, #6, 1984 <inflate+0x1454>
    1938:	and	w8, w12, #0xf
    193c:	mov	w9, #0x3f4b                	// #16203
    1940:	stp	w10, w8, [x27, #96]
    1944:	str	w9, [x27, #8]
    1948:	cbz	w8, 19d0 <inflate+0x14a0>
    194c:	cmp	w21, w8
    1950:	b.cs	1990 <inflate+0x1460>  // b.hs, b.nlast
    1954:	mov	w11, w21
    1958:	mov	w9, w24
    195c:	mov	x10, x22
    1960:	cbz	w9, 1c4c <inflate+0x171c>
    1964:	ldrb	w12, [x10], #1
    1968:	sub	w9, w9, #0x1
    196c:	lsl	x12, x12, x11
    1970:	add	w11, w11, #0x8
    1974:	cmp	w11, w8
    1978:	add	x25, x12, x25
    197c:	b.cc	1960 <inflate+0x1430>  // b.lo, b.ul, b.last
    1980:	b	199c <inflate+0x146c>
    1984:	adrp	x8, 0 <inflateResetKeep>
    1988:	add	x8, x8, #0x0
    198c:	b	1b4c <inflate+0x161c>
    1990:	mov	x10, x22
    1994:	mov	w9, w24
    1998:	mov	w11, w21
    199c:	ldr	w13, [x27, #96]
    19a0:	sub	w21, w11, w8
    19a4:	ldr	w11, [x27, #7148]
    19a8:	mov	w12, #0xffffffff            	// #-1
    19ac:	lsl	w12, w12, w8
    19b0:	bic	w12, w25, w12
    19b4:	lsr	x25, x25, x8
    19b8:	add	w12, w13, w12
    19bc:	add	w8, w11, w8
    19c0:	mov	x22, x10
    19c4:	mov	w24, w9
    19c8:	str	w12, [x27, #96]
    19cc:	str	w8, [x27, #7148]
    19d0:	mov	w8, #0x3f4c                	// #16204
    19d4:	str	w8, [x23]
    19d8:	cbz	w0, 1c70 <inflate+0x1740>
    19dc:	ldur	w9, [x29, #-20]
    19e0:	ldr	w8, [x27, #96]
    19e4:	sub	w9, w9, w0
    19e8:	cmp	w8, w9
    19ec:	b.ls	1a14 <inflate+0x14e4>  // b.plast
    19f0:	ldr	w10, [x27, #64]
    19f4:	sub	w9, w8, w9
    19f8:	cmp	w9, w10
    19fc:	b.ls	1a24 <inflate+0x14f4>  // b.plast
    1a00:	ldr	w8, [x27, #7144]
    1a04:	cbz	w8, 1a24 <inflate+0x14f4>
    1a08:	adrp	x8, 0 <inflateResetKeep>
    1a0c:	add	x8, x8, #0x0
    1a10:	b	1b4c <inflate+0x161c>
    1a14:	ldr	w9, [x27, #92]
    1a18:	sub	x11, x28, x8
    1a1c:	mov	w8, w9
    1a20:	b	1a58 <inflate+0x1528>
    1a24:	ldr	w10, [x27, #68]
    1a28:	subs	w8, w9, w10
    1a2c:	b.ls	1a3c <inflate+0x150c>  // b.plast
    1a30:	ldr	w9, [x27, #60]
    1a34:	sub	w10, w9, w8
    1a38:	b	1a44 <inflate+0x1514>
    1a3c:	sub	w10, w10, w9
    1a40:	mov	w8, w9
    1a44:	ldr	w9, [x27, #92]
    1a48:	ldr	x11, [x27, #72]
    1a4c:	cmp	w8, w9
    1a50:	add	x11, x11, w10, uxtw
    1a54:	csel	w8, w9, w8, hi  // hi = pmore
    1a58:	cmp	w8, w0
    1a5c:	csel	w8, w0, w8, hi  // hi = pmore
    1a60:	sub	w10, w9, w8
    1a64:	sub	w9, w8, #0x1
    1a68:	cmp	w9, #0x1f
    1a6c:	str	w10, [x27, #92]
    1a70:	b.cc	1a94 <inflate+0x1564>  // b.lo, b.ul, b.last
    1a74:	add	x10, x11, x9
    1a78:	add	x10, x10, #0x1
    1a7c:	cmp	x28, x10
    1a80:	b.cs	1ad8 <inflate+0x15a8>  // b.hs, b.nlast
    1a84:	add	x10, x28, x9
    1a88:	add	x10, x10, #0x1
    1a8c:	cmp	x11, x10
    1a90:	b.cs	1ad8 <inflate+0x15a8>  // b.hs, b.nlast
    1a94:	mov	x9, x28
    1a98:	mov	w10, w8
    1a9c:	ldrb	w12, [x11], #1
    1aa0:	subs	w10, w10, #0x1
    1aa4:	strb	w12, [x9], #1
    1aa8:	b.ne	1a9c <inflate+0x156c>  // b.any
    1aac:	ldr	w10, [x27, #92]
    1ab0:	sub	w0, w0, w8
    1ab4:	cbz	w10, 1ac4 <inflate+0x1594>
    1ab8:	ldr	w8, [x23]
    1abc:	mov	x28, x9
    1ac0:	b	628 <inflate+0xf8>
    1ac4:	mov	w8, #0x3f48                	// #16200
    1ac8:	str	w8, [x23]
    1acc:	mov	x28, x9
    1ad0:	mov	w8, w8
    1ad4:	b	628 <inflate+0xf8>
    1ad8:	add	x12, x9, #0x1
    1adc:	and	x13, x12, #0x1ffffffe0
    1ae0:	add	x14, x11, #0x10
    1ae4:	add	x9, x28, x13
    1ae8:	sub	w10, w8, w13
    1aec:	add	x11, x11, x13
    1af0:	add	x15, x28, #0x10
    1af4:	mov	x16, x13
    1af8:	ldp	q0, q1, [x14, #-16]
    1afc:	add	x14, x14, #0x20
    1b00:	subs	x16, x16, #0x20
    1b04:	stp	q0, q1, [x15, #-16]
    1b08:	add	x15, x15, #0x20
    1b0c:	b.ne	1af8 <inflate+0x15c8>  // b.any
    1b10:	cmp	x12, x13
    1b14:	b.ne	1a9c <inflate+0x156c>  // b.any
    1b18:	b	1aac <inflate+0x157c>
    1b1c:	mov	w8, #0x3f4d                	// #16205
    1b20:	str	w8, [x23]
    1b24:	mov	w8, w8
    1b28:	b	628 <inflate+0xf8>
    1b2c:	mov	w8, #0xffffffff            	// #-1
    1b30:	mov	w9, #0x3f3f                	// #16191
    1b34:	str	w8, [x27, #7148]
    1b38:	str	w9, [x27, #8]
    1b3c:	ldr	w8, [x23]
    1b40:	b	628 <inflate+0xf8>
    1b44:	adrp	x8, 0 <inflateResetKeep>
    1b48:	add	x8, x8, #0x0
    1b4c:	mov	w9, #0x3f51                	// #16209
    1b50:	str	x8, [x19, #48]
    1b54:	str	w9, [x23]
    1b58:	mov	w8, w9
    1b5c:	b	628 <inflate+0xf8>
    1b60:	and	x8, x25, #0xf
    1b64:	cmp	x8, #0x8
    1b68:	str	x28, [sp, #16]
    1b6c:	str	w0, [sp, #4]
    1b70:	b.ne	1be0 <inflate+0x16b0>  // b.any
    1b74:	ldr	w10, [x27, #56]
    1b78:	ubfx	x8, x25, #4, #4
    1b7c:	add	w9, w8, #0x8
    1b80:	cbnz	w10, 1b8c <inflate+0x165c>
    1b84:	mov	w10, w9
    1b88:	str	w9, [x27, #56]
    1b8c:	cmp	w8, #0x7
    1b90:	b.hi	1bf8 <inflate+0x16c8>  // b.pmore
    1b94:	cmp	w9, w10
    1b98:	b.hi	1bf8 <inflate+0x16c8>  // b.pmore
    1b9c:	mov	w9, #0x100                 	// #256
    1ba0:	lsl	w8, w9, w8
    1ba4:	mov	x0, xzr
    1ba8:	mov	x1, xzr
    1bac:	mov	w2, wzr
    1bb0:	str	w8, [x27, #28]
    1bb4:	bl	0 <adler32>
    1bb8:	tst	x25, #0x2000
    1bbc:	mov	w8, #0x3f3d                	// #16189
    1bc0:	mov	w9, #0x3f3f                	// #16191
    1bc4:	csel	w8, w9, w8, eq  // eq = none
    1bc8:	mov	w21, wzr
    1bcc:	str	x0, [x27, #32]
    1bd0:	str	x0, [x19, #96]
    1bd4:	str	w8, [x27, #8]
    1bd8:	mov	x25, xzr
    1bdc:	b	1c14 <inflate+0x16e4>
    1be0:	adrp	x8, 0 <inflateResetKeep>
    1be4:	add	x8, x8, #0x0
    1be8:	b	1c08 <inflate+0x16d8>
    1bec:	adrp	x8, 0 <inflateResetKeep>
    1bf0:	add	x8, x8, #0x0
    1bf4:	b	1b4c <inflate+0x161c>
    1bf8:	adrp	x8, 0 <inflateResetKeep>
    1bfc:	lsr	x25, x25, #4
    1c00:	sub	w21, w21, #0x4
    1c04:	add	x8, x8, #0x0
    1c08:	mov	w9, #0x3f51                	// #16209
    1c0c:	str	x8, [x19, #48]
    1c10:	str	w9, [x23]
    1c14:	ldr	w0, [sp, #4]
    1c18:	ldr	x28, [sp, #16]
    1c1c:	b	14d0 <inflate+0xfa0>
    1c20:	ldr	w9, [x19, #8]
    1c24:	cbz	w9, 5a8 <inflate+0x78>
    1c28:	mov	w0, #0xfffffffe            	// #-2
    1c2c:	ldp	x20, x19, [sp, #192]
    1c30:	ldp	x22, x21, [sp, #176]
    1c34:	ldp	x24, x23, [sp, #160]
    1c38:	ldp	x26, x25, [sp, #144]
    1c3c:	ldp	x28, x27, [sp, #128]
    1c40:	ldp	x29, x30, [sp, #112]
    1c44:	add	sp, sp, #0xd0
    1c48:	ret
    1c4c:	ldur	w26, [x29, #-24]
    1c50:	add	w21, w21, w24, lsl #3
    1c54:	add	x22, x22, w24, uxtw
    1c58:	mov	w24, wzr
    1c5c:	b	1c74 <inflate+0x1744>
    1c60:	ldur	w26, [x29, #-24]
    1c64:	mov	w21, w9
    1c68:	b	1c74 <inflate+0x1744>
    1c6c:	mov	w21, w8
    1c70:	ldur	w26, [x29, #-24]
    1c74:	str	x28, [x19, #24]
    1c78:	str	w0, [x19, #32]
    1c7c:	str	x22, [x19]
    1c80:	str	w24, [x19, #8]
    1c84:	ldr	w8, [x27, #60]
    1c88:	str	w21, [x27, #88]
    1c8c:	ldur	w21, [x29, #-20]
    1c90:	str	x25, [x27, #80]
    1c94:	cbz	w8, 1cbc <inflate+0x178c>
    1c98:	sub	w2, w21, w0
    1c9c:	mov	x0, x19
    1ca0:	mov	x1, x28
    1ca4:	bl	1e38 <updatewindow>
    1ca8:	cbz	w0, 1cec <inflate+0x17bc>
    1cac:	mov	w8, #0x3f52                	// #16210
    1cb0:	str	w8, [x23]
    1cb4:	mov	w0, #0xfffffffc            	// #-4
    1cb8:	b	1c2c <inflate+0x16fc>
    1cbc:	cmp	w21, w0
    1cc0:	b.eq	1cf4 <inflate+0x17c4>  // b.none
    1cc4:	ldr	w8, [x23]
    1cc8:	mov	w9, #0x3f50                	// #16208
    1ccc:	cmp	w8, w9
    1cd0:	b.hi	1cf4 <inflate+0x17c4>  // b.pmore
    1cd4:	cmp	w20, #0x4
    1cd8:	b.ne	1c98 <inflate+0x1768>  // b.any
    1cdc:	mov	w9, #0x3f4d                	// #16205
    1ce0:	cmp	w8, w9
    1ce4:	b.hi	1cf4 <inflate+0x17c4>  // b.pmore
    1ce8:	b	1c98 <inflate+0x1768>
    1cec:	ldr	w24, [x19, #8]
    1cf0:	ldr	w0, [x19, #32]
    1cf4:	ldur	w10, [x29, #-28]
    1cf8:	ldr	x8, [x19, #16]
    1cfc:	ldr	x9, [x19, #40]
    1d00:	subs	w21, w21, w0
    1d04:	sub	w22, w10, w24
    1d08:	add	x8, x8, x22
    1d0c:	add	x9, x9, x21
    1d10:	str	x8, [x19, #16]
    1d14:	str	x9, [x19, #40]
    1d18:	ldr	x8, [x27, #40]
    1d1c:	add	x8, x8, x21
    1d20:	str	x8, [x27, #40]
    1d24:	b.eq	1d60 <inflate+0x1830>  // b.none
    1d28:	ldr	w8, [x27, #16]
    1d2c:	tbz	w8, #2, 1d60 <inflate+0x1830>
    1d30:	ldr	x9, [x19, #24]
    1d34:	ldr	w8, [x27, #24]
    1d38:	ldr	x0, [x27, #32]
    1d3c:	mov	w2, w21
    1d40:	sub	x1, x9, x21
    1d44:	cbz	w8, 1d50 <inflate+0x1820>
    1d48:	bl	0 <crc32>
    1d4c:	b	1d54 <inflate+0x1824>
    1d50:	bl	0 <adler32>
    1d54:	ldur	x8, [x29, #-16]
    1d58:	str	x0, [x8]
    1d5c:	str	x0, [x19, #96]
    1d60:	ldp	w10, w9, [x27, #8]
    1d64:	ldr	w8, [x27, #88]
    1d68:	mov	w12, #0x3f3f                	// #16191
    1d6c:	orr	w11, w21, w22
    1d70:	cmp	w9, #0x0
    1d74:	cset	w9, ne  // ne = any
    1d78:	cmp	w10, w12
    1d7c:	mov	w12, #0x3f42                	// #16194
    1d80:	add	w8, w8, w9, lsl #6
    1d84:	cset	w9, eq  // eq = none
    1d88:	cmp	w10, w12
    1d8c:	mov	w12, #0x3f47                	// #16199
    1d90:	add	w8, w8, w9, lsl #7
    1d94:	mov	w9, #0x100                 	// #256
    1d98:	ccmp	w10, w12, #0x4, ne  // ne = any
    1d9c:	csel	w9, w9, wzr, eq  // eq = none
    1da0:	cmp	w11, #0x0
    1da4:	add	w8, w8, w9
    1da8:	ccmp	w20, #0x4, #0x4, ne  // ne = any
    1dac:	str	w8, [x19, #88]
    1db0:	ccmp	w26, #0x0, #0x0, eq  // eq = none
    1db4:	mov	w8, #0xfffffffb            	// #-5
    1db8:	csel	w0, w8, w26, eq  // eq = none
    1dbc:	b	1c2c <inflate+0x16fc>
    1dc0:	mov	w26, #0xfffffffd            	// #-3
    1dc4:	b	1c74 <inflate+0x1744>
    1dc8:	mov	w0, #0xfffffffc            	// #-4
    1dcc:	b	1c2c <inflate+0x16fc>
    1dd0:	sub	w24, w24, w26
    1dd4:	ldur	w26, [x29, #-24]
    1dd8:	ldur	x23, [x29, #-40]
    1ddc:	ldr	x28, [sp, #16]
    1de0:	b	1c74 <inflate+0x1744>
    1de4:	str	x28, [x19, #24]
    1de8:	str	w0, [x19, #32]
    1dec:	str	x22, [x19]
    1df0:	str	w24, [x19, #8]
    1df4:	str	x25, [x27, #80]
    1df8:	str	w21, [x27, #88]
    1dfc:	mov	w0, #0x2                   	// #2
    1e00:	b	1c2c <inflate+0x16fc>
    1e04:	ldur	w26, [x29, #-24]
    1e08:	ldur	x23, [x29, #-40]
    1e0c:	b	1c74 <inflate+0x1744>
    1e10:	mov	x25, xzr
    1e14:	mov	w21, wzr
    1e18:	mov	w8, #0x3f50                	// #16208
    1e1c:	str	w8, [x23]
    1e20:	mov	w26, #0x1                   	// #1
    1e24:	b	1c74 <inflate+0x1744>
    1e28:	ldur	w26, [x29, #-24]
    1e2c:	lsr	x25, x25, #3
    1e30:	sub	w21, w21, #0x3
    1e34:	b	1c74 <inflate+0x1744>

0000000000001e38 <updatewindow>:
    1e38:	stp	x29, x30, [sp, #-64]!
    1e3c:	stp	x22, x21, [sp, #32]
    1e40:	stp	x20, x19, [sp, #48]
    1e44:	str	x23, [sp, #16]
    1e48:	ldr	x23, [x0, #56]
    1e4c:	mov	x8, x0
    1e50:	mov	w20, w2
    1e54:	mov	x19, x1
    1e58:	ldr	x0, [x23, #72]
    1e5c:	mov	x29, sp
    1e60:	cbnz	x0, 1e88 <updatewindow+0x50>
    1e64:	ldr	w10, [x23, #56]
    1e68:	ldr	x9, [x8, #64]
    1e6c:	ldr	x0, [x8, #80]
    1e70:	mov	w21, #0x1                   	// #1
    1e74:	lsl	w1, w21, w10
    1e78:	mov	w2, #0x1                   	// #1
    1e7c:	blr	x9
    1e80:	str	x0, [x23, #72]
    1e84:	cbz	x0, 1f18 <updatewindow+0xe0>
    1e88:	ldr	w8, [x23, #60]
    1e8c:	cbz	w8, 1ee0 <updatewindow+0xa8>
    1e90:	cmp	w8, w20
    1e94:	b.ls	1efc <updatewindow+0xc4>  // b.plast
    1e98:	ldr	w9, [x23, #68]
    1e9c:	sub	x1, x19, w20, uxtw
    1ea0:	sub	w8, w8, w9
    1ea4:	cmp	w8, w20
    1ea8:	csel	w22, w20, w8, hi  // hi = pmore
    1eac:	add	x0, x0, x9
    1eb0:	mov	x2, x22
    1eb4:	bl	0 <memcpy>
    1eb8:	subs	w20, w20, w22
    1ebc:	b.eq	1f30 <updatewindow+0xf8>  // b.none
    1ec0:	ldr	x0, [x23, #72]
    1ec4:	mov	w2, w20
    1ec8:	sub	x1, x19, x2
    1ecc:	bl	0 <memcpy>
    1ed0:	ldr	w8, [x23, #60]
    1ed4:	mov	w21, wzr
    1ed8:	str	w20, [x23, #68]
    1edc:	b	1f14 <updatewindow+0xdc>
    1ee0:	ldr	w8, [x23, #56]
    1ee4:	mov	w9, #0x1                   	// #1
    1ee8:	str	xzr, [x23, #64]
    1eec:	lsl	w8, w9, w8
    1ef0:	str	w8, [x23, #60]
    1ef4:	cmp	w8, w20
    1ef8:	b.hi	1e98 <updatewindow+0x60>  // b.pmore
    1efc:	mov	w2, w8
    1f00:	sub	x1, x19, x2
    1f04:	bl	0 <memcpy>
    1f08:	ldr	w8, [x23, #60]
    1f0c:	mov	w21, wzr
    1f10:	str	wzr, [x23, #68]
    1f14:	str	w8, [x23, #64]
    1f18:	mov	w0, w21
    1f1c:	ldp	x20, x19, [sp, #48]
    1f20:	ldp	x22, x21, [sp, #32]
    1f24:	ldr	x23, [sp, #16]
    1f28:	ldp	x29, x30, [sp], #64
    1f2c:	ret
    1f30:	ldp	w8, w9, [x23, #64]
    1f34:	ldr	w10, [x23, #60]
    1f38:	mov	w21, wzr
    1f3c:	add	w9, w9, w22
    1f40:	cmp	w9, w10
    1f44:	csel	w9, wzr, w9, eq  // eq = none
    1f48:	cmp	w8, w10
    1f4c:	str	w9, [x23, #68]
    1f50:	b.cs	1f18 <updatewindow+0xe0>  // b.hs, b.nlast
    1f54:	mov	w21, wzr
    1f58:	add	w8, w8, w22
    1f5c:	b	1f14 <updatewindow+0xdc>

0000000000001f60 <inflateEnd>:
    1f60:	stp	x29, x30, [sp, #-32]!
    1f64:	str	x19, [sp, #16]
    1f68:	mov	x29, sp
    1f6c:	cbz	x0, 1fdc <inflateEnd+0x7c>
    1f70:	ldr	x8, [x0, #64]
    1f74:	mov	x19, x0
    1f78:	cbz	x8, 1fdc <inflateEnd+0x7c>
    1f7c:	ldr	x9, [x19, #72]
    1f80:	cbz	x9, 1fdc <inflateEnd+0x7c>
    1f84:	ldr	x1, [x19, #56]
    1f88:	cbz	x1, 1fdc <inflateEnd+0x7c>
    1f8c:	ldr	x8, [x1]
    1f90:	cmp	x8, x19
    1f94:	b.ne	1fdc <inflateEnd+0x7c>  // b.any
    1f98:	ldr	w8, [x1, #8]
    1f9c:	mov	w10, #0xffffc0cc            	// #-16180
    1fa0:	add	w8, w8, w10
    1fa4:	cmp	w8, #0x1f
    1fa8:	b.hi	1fdc <inflateEnd+0x7c>  // b.pmore
    1fac:	ldr	x8, [x1, #72]
    1fb0:	cbz	x8, 1fc8 <inflateEnd+0x68>
    1fb4:	ldr	x0, [x19, #80]
    1fb8:	mov	x1, x8
    1fbc:	blr	x9
    1fc0:	ldr	x9, [x19, #72]
    1fc4:	ldr	x1, [x19, #56]
    1fc8:	ldr	x0, [x19, #80]
    1fcc:	blr	x9
    1fd0:	mov	w0, wzr
    1fd4:	str	xzr, [x19, #56]
    1fd8:	b	1fe0 <inflateEnd+0x80>
    1fdc:	mov	w0, #0xfffffffe            	// #-2
    1fe0:	ldr	x19, [sp, #16]
    1fe4:	ldp	x29, x30, [sp], #32
    1fe8:	ret

0000000000001fec <inflateGetDictionary>:
    1fec:	stp	x29, x30, [sp, #-48]!
    1ff0:	str	x21, [sp, #16]
    1ff4:	stp	x20, x19, [sp, #32]
    1ff8:	mov	x29, sp
    1ffc:	cbz	x0, 208c <inflateGetDictionary+0xa0>
    2000:	ldr	x8, [x0, #64]
    2004:	cbz	x8, 208c <inflateGetDictionary+0xa0>
    2008:	ldr	x8, [x0, #72]
    200c:	cbz	x8, 208c <inflateGetDictionary+0xa0>
    2010:	ldr	x21, [x0, #56]
    2014:	cbz	x21, 208c <inflateGetDictionary+0xa0>
    2018:	ldr	x8, [x21]
    201c:	cmp	x8, x0
    2020:	b.ne	208c <inflateGetDictionary+0xa0>  // b.any
    2024:	ldr	w8, [x21, #8]
    2028:	mov	w9, #0xffffc0cc            	// #-16180
    202c:	add	w8, w8, w9
    2030:	cmp	w8, #0x1f
    2034:	b.hi	208c <inflateGetDictionary+0xa0>  // b.pmore
    2038:	mov	x19, x2
    203c:	mov	x20, x1
    2040:	cbz	x1, 2078 <inflateGetDictionary+0x8c>
    2044:	ldr	w8, [x21, #64]
    2048:	cbz	w8, 2078 <inflateGetDictionary+0x8c>
    204c:	ldr	x9, [x21, #72]
    2050:	ldr	w10, [x21, #68]
    2054:	mov	x0, x20
    2058:	add	x1, x9, x10
    205c:	sub	w2, w8, w10
    2060:	bl	0 <memcpy>
    2064:	ldp	w8, w2, [x21, #64]
    2068:	ldr	x1, [x21, #72]
    206c:	add	x8, x20, x8
    2070:	sub	x0, x8, x2
    2074:	bl	0 <memcpy>
    2078:	mov	w0, wzr
    207c:	cbz	x19, 2090 <inflateGetDictionary+0xa4>
    2080:	ldr	w8, [x21, #64]
    2084:	str	w8, [x19]
    2088:	b	2090 <inflateGetDictionary+0xa4>
    208c:	mov	w0, #0xfffffffe            	// #-2
    2090:	ldp	x20, x19, [sp, #32]
    2094:	ldr	x21, [sp, #16]
    2098:	ldp	x29, x30, [sp], #48
    209c:	ret

00000000000020a0 <inflateSetDictionary>:
    20a0:	stp	x29, x30, [sp, #-48]!
    20a4:	stp	x22, x21, [sp, #16]
    20a8:	stp	x20, x19, [sp, #32]
    20ac:	mov	x29, sp
    20b0:	cbz	x0, 210c <inflateSetDictionary+0x6c>
    20b4:	ldr	x8, [x0, #64]
    20b8:	mov	x20, x0
    20bc:	cbz	x8, 210c <inflateSetDictionary+0x6c>
    20c0:	ldr	x8, [x20, #72]
    20c4:	cbz	x8, 210c <inflateSetDictionary+0x6c>
    20c8:	ldr	x22, [x20, #56]
    20cc:	cbz	x22, 210c <inflateSetDictionary+0x6c>
    20d0:	ldr	x8, [x22]
    20d4:	cmp	x8, x20
    20d8:	b.ne	210c <inflateSetDictionary+0x6c>  // b.any
    20dc:	ldr	w8, [x22, #8]
    20e0:	mov	w9, #0xffffc0cc            	// #-16180
    20e4:	add	w9, w8, w9
    20e8:	cmp	w9, #0x1f
    20ec:	b.hi	210c <inflateSetDictionary+0x6c>  // b.pmore
    20f0:	ldr	w9, [x22, #16]
    20f4:	mov	w19, w2
    20f8:	mov	x21, x1
    20fc:	cbz	w9, 2120 <inflateSetDictionary+0x80>
    2100:	mov	w9, #0x3f3e                	// #16190
    2104:	cmp	w8, w9
    2108:	b.eq	212c <inflateSetDictionary+0x8c>  // b.none
    210c:	mov	w0, #0xfffffffe            	// #-2
    2110:	ldp	x20, x19, [sp, #32]
    2114:	ldp	x22, x21, [sp, #16]
    2118:	ldp	x29, x30, [sp], #48
    211c:	ret
    2120:	mov	w9, #0x3f3e                	// #16190
    2124:	cmp	w8, w9
    2128:	b.ne	2154 <inflateSetDictionary+0xb4>  // b.any
    212c:	mov	x0, xzr
    2130:	mov	x1, xzr
    2134:	mov	w2, wzr
    2138:	bl	0 <adler32>
    213c:	mov	x1, x21
    2140:	mov	w2, w19
    2144:	bl	0 <adler32>
    2148:	ldr	x8, [x22, #32]
    214c:	cmp	x0, x8
    2150:	b.ne	2178 <inflateSetDictionary+0xd8>  // b.any
    2154:	add	x1, x21, w19, uxtw
    2158:	mov	x0, x20
    215c:	mov	w2, w19
    2160:	bl	1e38 <updatewindow>
    2164:	cbz	w0, 2180 <inflateSetDictionary+0xe0>
    2168:	mov	w8, #0x3f52                	// #16210
    216c:	str	w8, [x22, #8]
    2170:	mov	w0, #0xfffffffc            	// #-4
    2174:	b	2110 <inflateSetDictionary+0x70>
    2178:	mov	w0, #0xfffffffd            	// #-3
    217c:	b	2110 <inflateSetDictionary+0x70>
    2180:	mov	w8, #0x1                   	// #1
    2184:	str	w8, [x22, #20]
    2188:	b	2110 <inflateSetDictionary+0x70>

000000000000218c <inflateGetHeader>:
    218c:	cbz	x0, 21d0 <inflateGetHeader+0x44>
    2190:	ldr	x8, [x0, #64]
    2194:	cbz	x8, 21d0 <inflateGetHeader+0x44>
    2198:	ldr	x8, [x0, #72]
    219c:	cbz	x8, 21d0 <inflateGetHeader+0x44>
    21a0:	ldr	x8, [x0, #56]
    21a4:	cbz	x8, 21d0 <inflateGetHeader+0x44>
    21a8:	ldr	x9, [x8]
    21ac:	cmp	x9, x0
    21b0:	b.ne	21d0 <inflateGetHeader+0x44>  // b.any
    21b4:	ldr	w9, [x8, #8]
    21b8:	mov	w10, #0xffffc0cc            	// #-16180
    21bc:	add	w9, w9, w10
    21c0:	cmp	w9, #0x1f
    21c4:	b.hi	21d0 <inflateGetHeader+0x44>  // b.pmore
    21c8:	ldrb	w9, [x8, #16]
    21cc:	tbnz	w9, #1, 21d8 <inflateGetHeader+0x4c>
    21d0:	mov	w0, #0xfffffffe            	// #-2
    21d4:	ret
    21d8:	mov	w0, wzr
    21dc:	str	x1, [x8, #48]
    21e0:	str	wzr, [x1, #72]
    21e4:	ret

00000000000021e8 <inflateSync>:
    21e8:	sub	sp, sp, #0x10
    21ec:	cbz	x0, 2244 <inflateSync+0x5c>
    21f0:	ldr	x8, [x0, #64]
    21f4:	cbz	x8, 2244 <inflateSync+0x5c>
    21f8:	ldr	x8, [x0, #72]
    21fc:	cbz	x8, 2244 <inflateSync+0x5c>
    2200:	ldr	x9, [x0, #56]
    2204:	cbz	x9, 2244 <inflateSync+0x5c>
    2208:	ldr	x8, [x9]
    220c:	cmp	x8, x0
    2210:	b.ne	2244 <inflateSync+0x5c>  // b.any
    2214:	ldr	w8, [x9, #8]
    2218:	mov	w10, #0xffffc0cc            	// #-16180
    221c:	add	w10, w8, w10
    2220:	cmp	w10, #0x1f
    2224:	b.hi	2244 <inflateSync+0x5c>  // b.pmore
    2228:	ldr	w12, [x0, #8]
    222c:	cbnz	w12, 2254 <inflateSync+0x6c>
    2230:	ldr	w10, [x9, #88]
    2234:	cmp	w10, #0x8
    2238:	b.cs	2254 <inflateSync+0x6c>  // b.hs, b.nlast
    223c:	mov	w8, #0xfffffffb            	// #-5
    2240:	b	2248 <inflateSync+0x60>
    2244:	mov	w8, #0xfffffffe            	// #-2
    2248:	mov	w0, w8
    224c:	add	sp, sp, #0x10
    2250:	ret
    2254:	mov	w10, #0x3f53                	// #16211
    2258:	cmp	w8, w10
    225c:	b.ne	2268 <inflateSync+0x80>  // b.any
    2260:	ldr	w8, [x9, #140]
    2264:	b	232c <inflateSync+0x144>
    2268:	ldr	w11, [x9, #88]
    226c:	ldr	x8, [x9, #80]
    2270:	str	w10, [x9, #8]
    2274:	and	x10, x11, #0x7
    2278:	ands	w12, w11, #0xfffffff8
    227c:	lsl	x8, x8, x10
    2280:	str	x8, [x9, #80]
    2284:	str	w12, [x9, #88]
    2288:	b.eq	2310 <inflateSync+0x128>  // b.none
    228c:	and	w11, w11, #0xfffffff8
    2290:	mov	x10, xzr
    2294:	neg	w11, w11
    2298:	add	x12, sp, #0xc
    229c:	strb	w8, [x12, x10]
    22a0:	add	x10, x10, #0x1
    22a4:	adds	w11, w11, #0x8
    22a8:	lsr	x8, x8, #8
    22ac:	b.ne	229c <inflateSync+0xb4>  // b.any
    22b0:	mov	x11, x9
    22b4:	str	wzr, [x11, #140]!
    22b8:	stur	x8, [x11, #-60]
    22bc:	stur	wzr, [x11, #-52]
    22c0:	cbz	w10, 2320 <inflateSync+0x138>
    22c4:	mov	x12, xzr
    22c8:	mov	w8, wzr
    22cc:	add	x13, sp, #0xc
    22d0:	mov	w14, #0xff                  	// #255
    22d4:	mov	w15, #0x4                   	// #4
    22d8:	ldrb	w16, [x13, x12]
    22dc:	cmp	w8, #0x2
    22e0:	sub	w17, w15, w8
    22e4:	csel	w18, wzr, w14, cc  // cc = lo, ul, last
    22e8:	cmp	w16, #0x0
    22ec:	add	x12, x12, #0x1
    22f0:	csel	w17, w17, wzr, eq  // eq = none
    22f4:	cmp	w18, w16
    22f8:	csinc	w8, w17, w8, ne  // ne = any
    22fc:	cmp	x12, x10
    2300:	b.cs	2324 <inflateSync+0x13c>  // b.hs, b.nlast
    2304:	cmp	w8, #0x4
    2308:	b.cc	22d8 <inflateSync+0xf0>  // b.lo, b.ul, b.last
    230c:	b	2324 <inflateSync+0x13c>
    2310:	mov	x11, x9
    2314:	mov	w8, wzr
    2318:	str	wzr, [x11, #140]!
    231c:	b	2324 <inflateSync+0x13c>
    2320:	mov	w8, wzr
    2324:	str	w8, [x11]
    2328:	ldr	w12, [x0, #8]
    232c:	ldr	x10, [x0]
    2330:	mov	w11, wzr
    2334:	cbz	w12, 2384 <inflateSync+0x19c>
    2338:	cmp	w8, #0x3
    233c:	b.hi	2384 <inflateSync+0x19c>  // b.pmore
    2340:	mov	x11, xzr
    2344:	mov	w12, w12
    2348:	mov	w13, #0xff                  	// #255
    234c:	mov	w14, #0x4                   	// #4
    2350:	ldrb	w15, [x10, x11]
    2354:	cmp	w8, #0x2
    2358:	sub	w16, w14, w8
    235c:	csel	w17, wzr, w13, cc  // cc = lo, ul, last
    2360:	cmp	w15, #0x0
    2364:	add	x11, x11, #0x1
    2368:	csel	w16, w16, wzr, eq  // eq = none
    236c:	cmp	w17, w15
    2370:	csinc	w8, w16, w8, ne  // ne = any
    2374:	cmp	x11, x12
    2378:	b.cs	2384 <inflateSync+0x19c>  // b.hs, b.nlast
    237c:	cmp	w8, #0x4
    2380:	b.cc	2350 <inflateSync+0x168>  // b.lo, b.ul, b.last
    2384:	str	w8, [x9, #140]
    2388:	cmp	w8, #0x4
    238c:	ldr	w8, [x0, #8]
    2390:	ldr	x13, [x0, #16]
    2394:	mov	w12, w11
    2398:	add	x10, x10, x12
    239c:	str	x10, [x0]
    23a0:	sub	w8, w8, w11
    23a4:	add	x10, x13, x12
    23a8:	str	w8, [x0, #8]
    23ac:	str	x10, [x0, #16]
    23b0:	b.ne	2428 <inflateSync+0x240>  // b.any
    23b4:	ldr	x11, [x0, #40]
    23b8:	str	xzr, [x9, #64]
    23bc:	str	wzr, [x9, #60]
    23c0:	str	xzr, [x9, #40]
    23c4:	str	xzr, [x0, #16]
    23c8:	stp	xzr, xzr, [x0, #40]
    23cc:	ldr	w8, [x9, #16]
    23d0:	cbz	w8, 23dc <inflateSync+0x1f4>
    23d4:	and	x8, x8, #0x1
    23d8:	str	x8, [x0, #96]
    23dc:	mov	w12, #0x8000                	// #32768
    23e0:	str	w12, [x9, #28]
    23e4:	adrp	x12, 0 <inflateResetKeep>
    23e8:	ldr	d0, [x12]
    23ec:	add	x12, x9, #0x558
    23f0:	str	x12, [x9, #144]
    23f4:	stp	x12, x12, [x9, #104]
    23f8:	adrp	x12, 0 <inflateResetKeep>
    23fc:	str	d0, [x9, #7144]
    2400:	ldr	d0, [x12]
    2404:	mov	w8, wzr
    2408:	str	wzr, [x9, #20]
    240c:	str	xzr, [x9, #48]
    2410:	str	xzr, [x9, #80]
    2414:	str	wzr, [x9, #88]
    2418:	str	x10, [x0, #16]
    241c:	str	x11, [x0, #40]
    2420:	str	d0, [x9, #8]
    2424:	b	2248 <inflateSync+0x60>
    2428:	mov	w8, #0xfffffffd            	// #-3
    242c:	b	2248 <inflateSync+0x60>

0000000000002430 <inflateSyncPoint>:
    2430:	cbz	x0, 2488 <inflateSyncPoint+0x58>
    2434:	ldr	x8, [x0, #64]
    2438:	cbz	x8, 2488 <inflateSyncPoint+0x58>
    243c:	ldr	x8, [x0, #72]
    2440:	cbz	x8, 2488 <inflateSyncPoint+0x58>
    2444:	ldr	x8, [x0, #56]
    2448:	cbz	x8, 2488 <inflateSyncPoint+0x58>
    244c:	ldr	x9, [x8]
    2450:	cmp	x9, x0
    2454:	b.ne	2488 <inflateSyncPoint+0x58>  // b.any
    2458:	ldr	w9, [x8, #8]
    245c:	mov	w10, #0xffffc0cc            	// #-16180
    2460:	add	w10, w9, w10
    2464:	cmp	w10, #0x1f
    2468:	b.hi	2488 <inflateSyncPoint+0x58>  // b.pmore
    246c:	mov	w10, #0x3f41                	// #16193
    2470:	cmp	w9, w10
    2474:	b.ne	2490 <inflateSyncPoint+0x60>  // b.any
    2478:	ldr	w8, [x8, #88]
    247c:	cmp	w8, #0x0
    2480:	cset	w0, eq  // eq = none
    2484:	ret
    2488:	mov	w0, #0xfffffffe            	// #-2
    248c:	ret
    2490:	mov	w0, wzr
    2494:	ret

0000000000002498 <inflateCopy>:
    2498:	stp	x29, x30, [sp, #-64]!
    249c:	str	x23, [sp, #16]
    24a0:	stp	x22, x21, [sp, #32]
    24a4:	stp	x20, x19, [sp, #48]
    24a8:	mov	x29, sp
    24ac:	cbz	x1, 24d8 <inflateCopy+0x40>
    24b0:	ldr	x8, [x1, #64]
    24b4:	mov	x22, x1
    24b8:	cbz	x8, 24d8 <inflateCopy+0x40>
    24bc:	ldr	x9, [x22, #72]
    24c0:	cbz	x9, 24d8 <inflateCopy+0x40>
    24c4:	ldr	x20, [x22, #56]
    24c8:	cbz	x20, 24d8 <inflateCopy+0x40>
    24cc:	ldr	x9, [x20]
    24d0:	cmp	x9, x22
    24d4:	b.eq	24f0 <inflateCopy+0x58>  // b.none
    24d8:	mov	w0, #0xfffffffe            	// #-2
    24dc:	ldp	x20, x19, [sp, #48]
    24e0:	ldp	x22, x21, [sp, #32]
    24e4:	ldr	x23, [sp, #16]
    24e8:	ldp	x29, x30, [sp], #64
    24ec:	ret
    24f0:	mov	x19, x0
    24f4:	mov	w0, #0xfffffffe            	// #-2
    24f8:	cbz	x19, 24dc <inflateCopy+0x44>
    24fc:	ldr	w9, [x20, #8]
    2500:	mov	w10, #0xffffc0cc            	// #-16180
    2504:	add	w9, w9, w10
    2508:	cmp	w9, #0x1f
    250c:	b.hi	24dc <inflateCopy+0x44>  // b.pmore
    2510:	ldr	x0, [x22, #80]
    2514:	mov	w1, #0x1                   	// #1
    2518:	mov	w2, #0x1bf8                	// #7160
    251c:	blr	x8
    2520:	cbz	x0, 2560 <inflateCopy+0xc8>
    2524:	ldr	x8, [x20, #72]
    2528:	mov	x21, x0
    252c:	cbz	x8, 2568 <inflateCopy+0xd0>
    2530:	ldr	w9, [x20, #56]
    2534:	ldr	x8, [x22, #64]
    2538:	ldr	x0, [x22, #80]
    253c:	mov	w10, #0x1                   	// #1
    2540:	lsl	w1, w10, w9
    2544:	mov	w2, #0x1                   	// #1
    2548:	blr	x8
    254c:	mov	x23, x0
    2550:	cbnz	x0, 256c <inflateCopy+0xd4>
    2554:	ldp	x8, x0, [x22, #72]
    2558:	mov	x1, x21
    255c:	blr	x8
    2560:	mov	w0, #0xfffffffc            	// #-4
    2564:	b	24dc <inflateCopy+0x44>
    2568:	mov	x23, xzr
    256c:	ldp	q1, q0, [x22, #16]
    2570:	ldr	q2, [x22]
    2574:	mov	w2, #0x1bf8                	// #7160
    2578:	mov	x0, x21
    257c:	stp	q1, q0, [x19, #16]
    2580:	str	q2, [x19]
    2584:	ldp	q1, q0, [x22, #80]
    2588:	ldp	q3, q2, [x22, #48]
    258c:	mov	x1, x20
    2590:	stp	q1, q0, [x19, #80]
    2594:	stp	q3, q2, [x19, #48]
    2598:	bl	0 <memcpy>
    259c:	str	x19, [x21]
    25a0:	ldr	x10, [x20, #104]
    25a4:	add	x8, x20, #0x558
    25a8:	subs	x9, x10, x8
    25ac:	b.cc	25dc <inflateCopy+0x144>  // b.lo, b.ul, b.last
    25b0:	mov	w11, #0x1be4                	// #7140
    25b4:	add	x11, x20, x11
    25b8:	cmp	x10, x11
    25bc:	b.hi	25dc <inflateCopy+0x144>  // b.pmore
    25c0:	add	x10, x21, #0x558
    25c4:	add	x9, x10, x9
    25c8:	str	x9, [x21, #104]
    25cc:	ldr	x9, [x20, #112]
    25d0:	sub	x9, x9, x8
    25d4:	add	x9, x10, x9
    25d8:	str	x9, [x21, #112]
    25dc:	ldr	x9, [x20, #144]
    25e0:	sub	x8, x9, x8
    25e4:	add	x8, x21, x8
    25e8:	add	x8, x8, #0x558
    25ec:	str	x8, [x21, #144]
    25f0:	cbz	x23, 260c <inflateCopy+0x174>
    25f4:	ldr	w8, [x20, #56]
    25f8:	ldr	x1, [x20, #72]
    25fc:	mov	w9, #0x1                   	// #1
    2600:	mov	x0, x23
    2604:	lsl	x2, x9, x8
    2608:	bl	0 <memcpy>
    260c:	mov	w0, wzr
    2610:	str	x23, [x21, #72]
    2614:	str	x21, [x19, #56]
    2618:	b	24dc <inflateCopy+0x44>

000000000000261c <inflateUndermine>:
    261c:	cbz	x0, 2668 <inflateUndermine+0x4c>
    2620:	ldr	x8, [x0, #64]
    2624:	cbz	x8, 2668 <inflateUndermine+0x4c>
    2628:	ldr	x8, [x0, #72]
    262c:	cbz	x8, 2668 <inflateUndermine+0x4c>
    2630:	ldr	x8, [x0, #56]
    2634:	cbz	x8, 2668 <inflateUndermine+0x4c>
    2638:	ldr	x9, [x8]
    263c:	cmp	x9, x0
    2640:	b.ne	2668 <inflateUndermine+0x4c>  // b.any
    2644:	ldr	w9, [x8, #8]
    2648:	mov	w10, #0xffffc0cc            	// #-16180
    264c:	add	w9, w9, w10
    2650:	cmp	w9, #0x1f
    2654:	b.hi	2668 <inflateUndermine+0x4c>  // b.pmore
    2658:	mov	w9, #0x1                   	// #1
    265c:	mov	w0, #0xfffffffd            	// #-3
    2660:	str	w9, [x8, #7144]
    2664:	ret
    2668:	mov	w0, #0xfffffffe            	// #-2
    266c:	ret

0000000000002670 <inflateValidate>:
    2670:	cbz	x0, 26cc <inflateValidate+0x5c>
    2674:	ldr	x8, [x0, #64]
    2678:	cbz	x8, 26cc <inflateValidate+0x5c>
    267c:	ldr	x8, [x0, #72]
    2680:	cbz	x8, 26cc <inflateValidate+0x5c>
    2684:	ldr	x8, [x0, #56]
    2688:	cbz	x8, 26cc <inflateValidate+0x5c>
    268c:	ldr	x9, [x8]
    2690:	cmp	x9, x0
    2694:	b.ne	26cc <inflateValidate+0x5c>  // b.any
    2698:	ldr	w9, [x8, #8]
    269c:	mov	w10, #0xffffc0cc            	// #-16180
    26a0:	add	w9, w9, w10
    26a4:	cmp	w9, #0x1f
    26a8:	b.hi	26cc <inflateValidate+0x5c>  // b.pmore
    26ac:	ldr	w9, [x8, #16]
    26b0:	cmp	w1, #0x0
    26b4:	mov	w0, wzr
    26b8:	and	w10, w9, #0xfffffffb
    26bc:	orr	w9, w9, #0x4
    26c0:	csel	w9, w10, w9, eq  // eq = none
    26c4:	str	w9, [x8, #16]
    26c8:	ret
    26cc:	mov	w0, #0xfffffffe            	// #-2
    26d0:	ret

00000000000026d4 <inflateMark>:
    26d4:	cbz	x0, 273c <inflateMark+0x68>
    26d8:	ldr	x8, [x0, #64]
    26dc:	cbz	x8, 273c <inflateMark+0x68>
    26e0:	ldr	x8, [x0, #72]
    26e4:	cbz	x8, 273c <inflateMark+0x68>
    26e8:	ldr	x8, [x0, #56]
    26ec:	cbz	x8, 273c <inflateMark+0x68>
    26f0:	ldr	x9, [x8]
    26f4:	cmp	x9, x0
    26f8:	b.ne	273c <inflateMark+0x68>  // b.any
    26fc:	ldr	w10, [x8, #8]
    2700:	mov	w9, #0xffffc0cc            	// #-16180
    2704:	add	w9, w10, w9
    2708:	cmp	w9, #0x1f
    270c:	b.hi	273c <inflateMark+0x68>  // b.pmore
    2710:	ldrsw	x9, [x8, #7148]
    2714:	mov	w11, #0x3f4c                	// #16204
    2718:	cmp	w10, w11
    271c:	lsl	x9, x9, #16
    2720:	b.eq	2744 <inflateMark+0x70>  // b.none
    2724:	mov	w11, #0x3f43                	// #16195
    2728:	cmp	w10, w11
    272c:	b.ne	2758 <inflateMark+0x84>  // b.any
    2730:	ldr	w8, [x8, #92]
    2734:	add	x0, x9, w8, uxtw
    2738:	ret
    273c:	mov	x0, #0xffffffffffff0000    	// #-65536
    2740:	ret
    2744:	ldr	w10, [x8, #7152]
    2748:	ldr	w8, [x8, #92]
    274c:	sub	w8, w10, w8
    2750:	add	x0, x9, w8, uxtw
    2754:	ret
    2758:	add	x0, x9, wzr, uxtw
    275c:	ret

0000000000002760 <inflateCodesUsed>:
    2760:	cbz	x0, 27b0 <inflateCodesUsed+0x50>
    2764:	ldr	x8, [x0, #64]
    2768:	cbz	x8, 27b0 <inflateCodesUsed+0x50>
    276c:	ldr	x8, [x0, #72]
    2770:	cbz	x8, 27b0 <inflateCodesUsed+0x50>
    2774:	ldr	x8, [x0, #56]
    2778:	cbz	x8, 27b0 <inflateCodesUsed+0x50>
    277c:	ldr	x9, [x8]
    2780:	cmp	x9, x0
    2784:	b.ne	27b0 <inflateCodesUsed+0x50>  // b.any
    2788:	ldr	w9, [x8, #8]
    278c:	mov	w10, #0xffffc0cc            	// #-16180
    2790:	add	w9, w9, w10
    2794:	cmp	w9, #0x1f
    2798:	b.hi	27b0 <inflateCodesUsed+0x50>  // b.pmore
    279c:	ldr	x9, [x8, #144]
    27a0:	sub	x8, x9, x8
    27a4:	sub	x8, x8, #0x558
    27a8:	asr	x0, x8, #2
    27ac:	ret
    27b0:	mov	x0, #0xffffffffffffffff    	// #-1
    27b4:	ret

inftrees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_table>:
   0:	sub	sp, sp, #0x90
   4:	movi	v0.2d, #0x0
   8:	stp	x28, x27, [sp, #64]
   c:	stp	x26, x25, [sp, #80]
  10:	stp	x24, x23, [sp, #96]
  14:	stp	x22, x21, [sp, #112]
  18:	stp	x20, x19, [sp, #128]
  1c:	stp	q0, q0, [sp, #32]
  20:	cbz	w2, 60 <inflate_table+0x60>
  24:	mov	w8, w2
  28:	add	x9, sp, #0x20
  2c:	mov	x10, x1
  30:	ldrh	w11, [x10], #2
  34:	subs	x8, x8, #0x1
  38:	lsl	x11, x11, #1
  3c:	ldrh	w12, [x9, x11]
  40:	add	w12, w12, #0x1
  44:	strh	w12, [x9, x11]
  48:	b.ne	30 <inflate_table+0x30>  // b.any
  4c:	ldrh	w8, [sp, #62]
  50:	ldr	w11, [x4]
  54:	cbz	w8, 64 <inflate_table+0x64>
  58:	mov	w9, #0xf                   	// #15
  5c:	b	164 <inflate_table+0x164>
  60:	ldr	w11, [x4]
  64:	ldrh	w8, [sp, #60]
  68:	cbz	w8, 78 <inflate_table+0x78>
  6c:	mov	w8, wzr
  70:	mov	w9, #0xe                   	// #14
  74:	b	164 <inflate_table+0x164>
  78:	ldrh	w8, [sp, #58]
  7c:	cbz	w8, 8c <inflate_table+0x8c>
  80:	mov	w8, wzr
  84:	mov	w9, #0xd                   	// #13
  88:	b	164 <inflate_table+0x164>
  8c:	ldrh	w8, [sp, #56]
  90:	cbz	w8, a0 <inflate_table+0xa0>
  94:	mov	w8, wzr
  98:	mov	w9, #0xc                   	// #12
  9c:	b	164 <inflate_table+0x164>
  a0:	ldrh	w8, [sp, #54]
  a4:	cbz	w8, b4 <inflate_table+0xb4>
  a8:	mov	w8, wzr
  ac:	mov	w9, #0xb                   	// #11
  b0:	b	164 <inflate_table+0x164>
  b4:	ldrh	w8, [sp, #52]
  b8:	cbz	w8, c8 <inflate_table+0xc8>
  bc:	mov	w8, wzr
  c0:	mov	w9, #0xa                   	// #10
  c4:	b	164 <inflate_table+0x164>
  c8:	ldrh	w8, [sp, #50]
  cc:	cbz	w8, dc <inflate_table+0xdc>
  d0:	mov	w8, wzr
  d4:	mov	w9, #0x9                   	// #9
  d8:	b	164 <inflate_table+0x164>
  dc:	ldrh	w8, [sp, #48]
  e0:	cbz	w8, f0 <inflate_table+0xf0>
  e4:	mov	w8, wzr
  e8:	mov	w9, #0x8                   	// #8
  ec:	b	164 <inflate_table+0x164>
  f0:	ldrh	w8, [sp, #46]
  f4:	cbz	w8, 104 <inflate_table+0x104>
  f8:	mov	w8, wzr
  fc:	mov	w9, #0x7                   	// #7
 100:	b	164 <inflate_table+0x164>
 104:	ldrh	w8, [sp, #44]
 108:	cbz	w8, 118 <inflate_table+0x118>
 10c:	mov	w8, wzr
 110:	mov	w9, #0x6                   	// #6
 114:	b	164 <inflate_table+0x164>
 118:	ldrh	w8, [sp, #42]
 11c:	cbz	w8, 12c <inflate_table+0x12c>
 120:	mov	w8, wzr
 124:	mov	w9, #0x5                   	// #5
 128:	b	164 <inflate_table+0x164>
 12c:	ldrh	w8, [sp, #40]
 130:	cbz	w8, 140 <inflate_table+0x140>
 134:	mov	w8, wzr
 138:	mov	w9, #0x4                   	// #4
 13c:	b	164 <inflate_table+0x164>
 140:	ldrh	w8, [sp, #38]
 144:	cbz	w8, 154 <inflate_table+0x154>
 148:	mov	w8, wzr
 14c:	mov	w9, #0x3                   	// #3
 150:	b	164 <inflate_table+0x164>
 154:	ldrh	w8, [sp, #36]
 158:	cbz	w8, 5c4 <inflate_table+0x5c4>
 15c:	mov	w8, wzr
 160:	mov	w9, #0x2                   	// #2
 164:	cmp	w11, w9
 168:	mov	w10, #0x1                   	// #1
 16c:	csel	w11, w9, w11, hi  // hi = pmore
 170:	add	x12, sp, #0x20
 174:	ldrh	w13, [x12, x10, lsl #1]
 178:	cbnz	w13, 18c <inflate_table+0x18c>
 17c:	add	x10, x10, #0x1
 180:	cmp	x9, x10
 184:	b.ne	174 <inflate_table+0x174>  // b.any
 188:	mov	w10, w9
 18c:	ldrh	w12, [sp, #34]
 190:	cmp	w11, w10
 194:	csel	w11, w10, w11, cc  // cc = lo, ul, last
 198:	cmp	w12, #0x2
 19c:	b.hi	318 <inflate_table+0x318>  // b.pmore
 1a0:	ldrh	w13, [sp, #36]
 1a4:	mov	w15, #0x4                   	// #4
 1a8:	add	w14, w13, w12, lsl #1
 1ac:	subs	w15, w15, w14
 1b0:	b.mi	318 <inflate_table+0x318>  // b.first
 1b4:	ldrh	w14, [sp, #38]
 1b8:	lsl	w15, w15, #1
 1bc:	subs	w16, w15, w14
 1c0:	b.mi	318 <inflate_table+0x318>  // b.first
 1c4:	ldrh	w15, [sp, #40]
 1c8:	lsl	w16, w16, #1
 1cc:	subs	w17, w16, w15
 1d0:	b.mi	318 <inflate_table+0x318>  // b.first
 1d4:	ldrh	w16, [sp, #42]
 1d8:	lsl	w17, w17, #1
 1dc:	subs	w18, w17, w16
 1e0:	b.mi	318 <inflate_table+0x318>  // b.first
 1e4:	ldrh	w17, [sp, #44]
 1e8:	lsl	w18, w18, #1
 1ec:	subs	w6, w18, w17
 1f0:	b.mi	318 <inflate_table+0x318>  // b.first
 1f4:	ldrh	w18, [sp, #46]
 1f8:	lsl	w6, w6, #1
 1fc:	subs	w7, w6, w18
 200:	b.mi	318 <inflate_table+0x318>  // b.first
 204:	ldrh	w6, [sp, #48]
 208:	lsl	w7, w7, #1
 20c:	subs	w19, w7, w6
 210:	b.mi	318 <inflate_table+0x318>  // b.first
 214:	ldrh	w7, [sp, #50]
 218:	lsl	w19, w19, #1
 21c:	subs	w20, w19, w7
 220:	b.mi	318 <inflate_table+0x318>  // b.first
 224:	ldrh	w19, [sp, #52]
 228:	lsl	w20, w20, #1
 22c:	subs	w21, w20, w19
 230:	b.mi	318 <inflate_table+0x318>  // b.first
 234:	ldrh	w20, [sp, #54]
 238:	lsl	w21, w21, #1
 23c:	subs	w22, w21, w20
 240:	b.mi	318 <inflate_table+0x318>  // b.first
 244:	ldrh	w21, [sp, #56]
 248:	lsl	w22, w22, #1
 24c:	subs	w23, w22, w21
 250:	b.mi	318 <inflate_table+0x318>  // b.first
 254:	ldrh	w22, [sp, #58]
 258:	lsl	w23, w23, #1
 25c:	subs	w24, w23, w22
 260:	b.mi	318 <inflate_table+0x318>  // b.first
 264:	ldrh	w23, [sp, #60]
 268:	lsl	w24, w24, #1
 26c:	subs	w24, w24, w23
 270:	b.mi	318 <inflate_table+0x318>  // b.first
 274:	lsl	w24, w24, #1
 278:	subs	w8, w24, w8
 27c:	b.mi	318 <inflate_table+0x318>  // b.first
 280:	cbz	w8, 294 <inflate_table+0x294>
 284:	mov	w8, #0xffffffff            	// #-1
 288:	cbz	w0, 31c <inflate_table+0x31c>
 28c:	cmp	w9, #0x1
 290:	b.ne	31c <inflate_table+0x31c>  // b.any
 294:	add	w8, w13, w12
 298:	strh	w8, [sp, #6]
 29c:	add	w8, w14, w8
 2a0:	strh	w8, [sp, #8]
 2a4:	add	w8, w15, w8
 2a8:	strh	w8, [sp, #10]
 2ac:	add	w8, w16, w8
 2b0:	strh	w8, [sp, #12]
 2b4:	add	w8, w17, w8
 2b8:	strh	w8, [sp, #14]
 2bc:	add	w8, w18, w8
 2c0:	strh	w8, [sp, #16]
 2c4:	add	w8, w6, w8
 2c8:	strh	w8, [sp, #18]
 2cc:	add	w8, w7, w8
 2d0:	strh	w8, [sp, #20]
 2d4:	add	w8, w19, w8
 2d8:	strh	w8, [sp, #22]
 2dc:	add	w8, w20, w8
 2e0:	strh	w8, [sp, #24]
 2e4:	add	w8, w21, w8
 2e8:	strh	w8, [sp, #26]
 2ec:	add	w8, w22, w8
 2f0:	strh	w8, [sp, #28]
 2f4:	add	w8, w23, w8
 2f8:	strh	wzr, [sp, #2]
 2fc:	strh	w12, [sp, #4]
 300:	strh	w8, [sp, #30]
 304:	cbz	w2, 368 <inflate_table+0x368>
 308:	mov	x8, xzr
 30c:	mov	w12, w2
 310:	mov	x13, sp
 314:	b	348 <inflate_table+0x348>
 318:	mov	w8, #0xffffffff            	// #-1
 31c:	ldp	x20, x19, [sp, #128]
 320:	ldp	x22, x21, [sp, #112]
 324:	ldp	x24, x23, [sp, #96]
 328:	ldp	x26, x25, [sp, #80]
 32c:	ldp	x28, x27, [sp, #64]
 330:	mov	w0, w8
 334:	add	sp, sp, #0x90
 338:	ret
 33c:	add	x8, x8, #0x1
 340:	cmp	x12, x8
 344:	b.eq	368 <inflate_table+0x368>  // b.none
 348:	ldrh	w14, [x1, x8, lsl #1]
 34c:	cbz	x14, 33c <inflate_table+0x33c>
 350:	lsl	x14, x14, #1
 354:	ldrh	w15, [x13, x14]
 358:	add	w16, w15, #0x1
 35c:	strh	w16, [x13, x14]
 360:	strh	w8, [x5, x15, lsl #1]
 364:	b	33c <inflate_table+0x33c>
 368:	cbz	w0, 3a0 <inflate_table+0x3a0>
 36c:	cmp	w0, #0x1
 370:	b.ne	3b8 <inflate_table+0x3b8>  // b.any
 374:	cmp	w11, #0x9
 378:	mov	w8, #0x1                   	// #1
 37c:	b.hi	31c <inflate_table+0x31c>  // b.pmore
 380:	adrp	x14, 0 <inflate_table>
 384:	adrp	x15, 0 <inflate_table>
 388:	mov	w13, wzr
 38c:	mov	w12, #0x101                 	// #257
 390:	add	x14, x14, #0x0
 394:	add	x15, x15, #0x0
 398:	mov	w16, #0x1                   	// #1
 39c:	b	3f0 <inflate_table+0x3f0>
 3a0:	mov	w13, wzr
 3a4:	mov	w16, wzr
 3a8:	mov	w12, #0x14                  	// #20
 3ac:	mov	x15, x5
 3b0:	mov	x14, x5
 3b4:	b	3f0 <inflate_table+0x3f0>
 3b8:	cmp	w0, #0x2
 3bc:	adrp	x14, 0 <inflate_table>
 3c0:	adrp	x15, 0 <inflate_table>
 3c4:	mov	w12, wzr
 3c8:	add	x14, x14, #0x0
 3cc:	cset	w13, eq  // eq = none
 3d0:	add	x15, x15, #0x0
 3d4:	b.ne	3ec <inflate_table+0x3ec>  // b.any
 3d8:	cmp	w11, #0x9
 3dc:	mov	w16, w12
 3e0:	b.ls	3f0 <inflate_table+0x3f0>  // b.plast
 3e4:	mov	w8, #0x1                   	// #1
 3e8:	b	31c <inflate_table+0x31c>
 3ec:	mov	w16, w12
 3f0:	ldr	x6, [x3]
 3f4:	mov	w7, #0x1                   	// #1
 3f8:	lsl	w17, w7, w11
 3fc:	mov	w18, wzr
 400:	mov	w2, wzr
 404:	mov	w0, wzr
 408:	sub	w19, w17, #0x1
 40c:	mov	w8, #0xffffffff            	// #-1
 410:	add	x20, sp, #0x20
 414:	mov	w22, w11
 418:	lsl	w21, w7, w22
 41c:	ldrh	w23, [x5, w18, uxtw #1]
 420:	add	w22, w23, #0x1
 424:	cmp	w22, w12
 428:	sub	w22, w10, w2
 42c:	b.cs	438 <inflate_table+0x438>  // b.hs, b.nlast
 430:	mov	w24, wzr
 434:	b	45c <inflate_table+0x45c>
 438:	cmp	w12, w23
 43c:	b.ls	44c <inflate_table+0x44c>  // b.plast
 440:	mov	w23, wzr
 444:	mov	w24, #0x60                  	// #96
 448:	b	45c <inflate_table+0x45c>
 44c:	sub	w23, w23, w12
 450:	lsl	x23, x23, #1
 454:	ldrb	w24, [x14, x23]
 458:	ldrh	w23, [x15, x23]
 45c:	lsl	w25, w7, w22
 460:	lsr	w26, w0, w2
 464:	sub	w26, w26, w25
 468:	mov	w27, w21
 46c:	add	w28, w26, w27
 470:	subs	w27, w27, w25
 474:	add	x28, x6, w28, uxtw #2
 478:	strb	w24, [x28]
 47c:	strb	w22, [x28, #1]
 480:	strh	w23, [x28, #2]
 484:	b.ne	46c <inflate_table+0x46c>  // b.any
 488:	sub	w23, w10, #0x1
 48c:	lsl	w24, w7, w23
 490:	mov	w23, w24
 494:	tst	w24, w0
 498:	lsr	w24, w24, #1
 49c:	b.ne	490 <inflate_table+0x490>  // b.any
 4a0:	sub	w24, w23, #0x1
 4a4:	mov	w25, w10
 4a8:	and	w0, w24, w0
 4ac:	lsl	x24, x25, #1
 4b0:	ldrh	w25, [x20, x24]
 4b4:	add	w0, w0, w23
 4b8:	cmp	w23, #0x0
 4bc:	csel	w0, wzr, w0, eq  // eq = none
 4c0:	sub	w23, w25, #0x1
 4c4:	add	w18, w18, #0x1
 4c8:	tst	w23, #0xffff
 4cc:	strh	w23, [x20, x24]
 4d0:	b.ne	4e4 <inflate_table+0x4e4>  // b.any
 4d4:	cmp	w10, w9
 4d8:	b.eq	594 <inflate_table+0x594>  // b.none
 4dc:	ldrh	w10, [x5, w18, uxtw #1]
 4e0:	ldrh	w10, [x1, x10, lsl #1]
 4e4:	cmp	w10, w11
 4e8:	b.ls	41c <inflate_table+0x41c>  // b.plast
 4ec:	and	w23, w0, w19
 4f0:	cmp	w23, w8
 4f4:	b.eq	41c <inflate_table+0x41c>  // b.none
 4f8:	cmp	w2, #0x0
 4fc:	csel	w2, w11, w2, eq  // eq = none
 500:	sub	w22, w10, w2
 504:	cmp	w10, w9
 508:	lsl	w8, w7, w22
 50c:	b.cs	544 <inflate_table+0x544>  // b.hs, b.nlast
 510:	sub	w22, w9, w2
 514:	mov	w24, w10
 518:	ldrh	w25, [x20, x24, lsl #1]
 51c:	sub	w8, w8, w25
 520:	cmp	w8, #0x1
 524:	b.lt	53c <inflate_table+0x53c>  // b.tstop
 528:	add	x24, x24, #0x1
 52c:	cmp	w24, w9
 530:	lsl	w8, w8, #1
 534:	b.cc	518 <inflate_table+0x518>  // b.lo, b.ul, b.last
 538:	b	540 <inflate_table+0x540>
 53c:	sub	w22, w24, w2
 540:	lsl	w8, w7, w22
 544:	add	w17, w8, w17
 548:	cmp	w17, #0x354
 54c:	cset	w8, hi  // hi = pmore
 550:	cmp	w17, #0x250
 554:	and	w25, w16, w8
 558:	cset	w24, hi  // hi = pmore
 55c:	mov	w8, #0x1                   	// #1
 560:	tbnz	w25, #0, 31c <inflate_table+0x31c>
 564:	and	w24, w13, w24
 568:	tbnz	w24, #0, 31c <inflate_table+0x31c>
 56c:	ldr	x8, [x3]
 570:	add	x6, x6, w21, uxtw #2
 574:	add	x21, x8, w23, uxtw #2
 578:	sub	w8, w6, w8
 57c:	lsr	w8, w8, #2
 580:	strb	w22, [x21]
 584:	strb	w11, [x21, #1]
 588:	strh	w8, [x21, #2]
 58c:	mov	w8, w23
 590:	b	418 <inflate_table+0x418>
 594:	cbz	w0, 5ac <inflate_table+0x5ac>
 598:	add	x8, x6, w0, uxtw #2
 59c:	mov	w9, #0x40                  	// #64
 5a0:	strb	w9, [x8]
 5a4:	strb	w22, [x8, #1]
 5a8:	strh	wzr, [x8, #2]
 5ac:	ldr	x9, [x3]
 5b0:	mov	w8, wzr
 5b4:	add	x9, x9, w17, uxtw #2
 5b8:	str	x9, [x3]
 5bc:	str	w11, [x4]
 5c0:	b	31c <inflate_table+0x31c>
 5c4:	ldrh	w8, [sp, #34]
 5c8:	cbz	w8, 5e4 <inflate_table+0x5e4>
 5cc:	cmp	w11, #0x0
 5d0:	mov	w8, wzr
 5d4:	mov	w9, #0x1                   	// #1
 5d8:	cset	w11, ne  // ne = any
 5dc:	mov	w10, #0x1                   	// #1
 5e0:	b	18c <inflate_table+0x18c>
 5e4:	ldr	x9, [x3]
 5e8:	mov	w10, #0x140                 	// #320
 5ec:	add	x11, x9, #0x4
 5f0:	str	x11, [x3]
 5f4:	str	w10, [x9]
 5f8:	ldr	x9, [x3]
 5fc:	mov	w11, #0x1                   	// #1
 600:	add	x12, x9, #0x4
 604:	str	x12, [x3]
 608:	str	w10, [x9]
 60c:	b	5bc <inflate_table+0x5bc>

trees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <_tr_init>:
       0:	add	x8, x0, #0xd4
       4:	str	x8, [x0, #2904]
       8:	adrp	x8, 0 <_tr_init>
       c:	add	x8, x8, #0x0
      10:	str	x8, [x0, #2920]
      14:	add	x8, x0, #0x9c8
      18:	str	x8, [x0, #2928]
      1c:	adrp	x8, 0 <_tr_init>
      20:	add	x8, x8, #0x0
      24:	str	x8, [x0, #2944]
      28:	add	x8, x0, #0xabc
      2c:	str	x8, [x0, #2952]
      30:	adrp	x8, 0 <_tr_init>
      34:	add	x8, x8, #0x0
      38:	strh	wzr, [x0, #5936]
      3c:	str	x8, [x0, #2968]
      40:	str	wzr, [x0, #5940]
      44:	b	48 <init_block>

0000000000000048 <init_block>:
      48:	mov	x8, xzr
      4c:	add	x9, x0, x8
      50:	add	x8, x8, #0x8
      54:	cmp	x8, #0x478
      58:	strh	wzr, [x9, #212]
      5c:	strh	wzr, [x9, #216]
      60:	b.ne	4c <init_block+0x4>  // b.any
      64:	mov	w8, #0x1                   	// #1
      68:	movi	v0.2d, #0x0
      6c:	strh	w8, [x0, #1236]
      70:	mov	w8, #0x1718                	// #5912
      74:	strh	wzr, [x0, #2504]
      78:	strh	wzr, [x0, #2508]
      7c:	strh	wzr, [x0, #2512]
      80:	strh	wzr, [x0, #2516]
      84:	strh	wzr, [x0, #2520]
      88:	strh	wzr, [x0, #2524]
      8c:	strh	wzr, [x0, #2528]
      90:	strh	wzr, [x0, #2532]
      94:	strh	wzr, [x0, #2536]
      98:	strh	wzr, [x0, #2540]
      9c:	strh	wzr, [x0, #2544]
      a0:	strh	wzr, [x0, #2548]
      a4:	strh	wzr, [x0, #2552]
      a8:	strh	wzr, [x0, #2556]
      ac:	strh	wzr, [x0, #2560]
      b0:	strh	wzr, [x0, #2564]
      b4:	strh	wzr, [x0, #2568]
      b8:	strh	wzr, [x0, #2572]
      bc:	strh	wzr, [x0, #2576]
      c0:	strh	wzr, [x0, #2580]
      c4:	strh	wzr, [x0, #2584]
      c8:	strh	wzr, [x0, #2588]
      cc:	strh	wzr, [x0, #2592]
      d0:	strh	wzr, [x0, #2596]
      d4:	strh	wzr, [x0, #2600]
      d8:	strh	wzr, [x0, #2604]
      dc:	strh	wzr, [x0, #2608]
      e0:	strh	wzr, [x0, #2612]
      e4:	strh	wzr, [x0, #2616]
      e8:	strh	wzr, [x0, #2620]
      ec:	strh	wzr, [x0, #2748]
      f0:	strh	wzr, [x0, #2752]
      f4:	strh	wzr, [x0, #2756]
      f8:	strh	wzr, [x0, #2760]
      fc:	strh	wzr, [x0, #2764]
     100:	strh	wzr, [x0, #2768]
     104:	strh	wzr, [x0, #2772]
     108:	strh	wzr, [x0, #2776]
     10c:	strh	wzr, [x0, #2780]
     110:	strh	wzr, [x0, #2784]
     114:	strh	wzr, [x0, #2788]
     118:	strh	wzr, [x0, #2792]
     11c:	strh	wzr, [x0, #2796]
     120:	strh	wzr, [x0, #2800]
     124:	strh	wzr, [x0, #2804]
     128:	strh	wzr, [x0, #2808]
     12c:	strh	wzr, [x0, #2812]
     130:	strh	wzr, [x0, #2816]
     134:	strh	wzr, [x0, #2820]
     138:	str	wzr, [x0, #5900]
     13c:	str	q0, [x0, x8]
     140:	str	wzr, [x0, #5928]
     144:	ret

0000000000000148 <_tr_stored_block>:
     148:	stp	x29, x30, [sp, #-32]!
     14c:	stp	x20, x19, [sp, #16]
     150:	ldr	w10, [x0, #5940]
     154:	ldrh	w8, [x0, #5936]
     158:	and	w9, w3, #0xffff
     15c:	mov	x19, x2
     160:	lsl	w11, w9, w10
     164:	mov	x20, x0
     168:	orr	w8, w8, w11
     16c:	cmp	w10, #0xe
     170:	mov	x29, sp
     174:	strh	w8, [x0, #5936]
     178:	b.lt	1cc <_tr_stored_block+0x84>  // b.tstop
     17c:	ldr	x10, [x20, #40]
     180:	ldr	x11, [x20, #16]
     184:	add	x12, x10, #0x1
     188:	str	x12, [x20, #40]
     18c:	mov	w12, #0x1730                	// #5936
     190:	strb	w8, [x11, x10]
     194:	add	x12, x20, x12
     198:	ldr	x8, [x20, #40]
     19c:	ldrb	w10, [x12, #1]
     1a0:	ldr	x11, [x20, #16]
     1a4:	add	x12, x8, #0x1
     1a8:	str	x12, [x20, #40]
     1ac:	strb	w10, [x11, x8]
     1b0:	ldr	w10, [x20, #5940]
     1b4:	mov	w8, #0x10                  	// #16
     1b8:	sub	w8, w8, w10
     1bc:	lsr	w8, w9, w8
     1c0:	strh	w8, [x20, #5936]
     1c4:	sub	w9, w10, #0xd
     1c8:	b	1d0 <_tr_stored_block+0x88>
     1cc:	add	w9, w10, #0x3
     1d0:	cmp	w9, #0x9
     1d4:	str	w9, [x20, #5940]
     1d8:	b.lt	204 <_tr_stored_block+0xbc>  // b.tstop
     1dc:	ldr	x9, [x20, #40]
     1e0:	ldr	x10, [x20, #16]
     1e4:	add	x11, x9, #0x1
     1e8:	str	x11, [x20, #40]
     1ec:	strb	w8, [x10, x9]
     1f0:	mov	w8, #0x1731                	// #5937
     1f4:	ldr	x9, [x20, #40]
     1f8:	ldr	x10, [x20, #16]
     1fc:	ldrb	w8, [x20, x8]
     200:	b	214 <_tr_stored_block+0xcc>
     204:	cmp	w9, #0x1
     208:	b.lt	224 <_tr_stored_block+0xdc>  // b.tstop
     20c:	ldr	x9, [x20, #40]
     210:	ldr	x10, [x20, #16]
     214:	add	x11, x9, #0x1
     218:	add	x9, x10, x9
     21c:	str	x11, [x20, #40]
     220:	strb	w8, [x9]
     224:	ldr	x8, [x20, #40]
     228:	ldr	x9, [x20, #16]
     22c:	strh	wzr, [x20, #5936]
     230:	str	wzr, [x20, #5940]
     234:	add	x10, x8, #0x1
     238:	str	x10, [x20, #40]
     23c:	strb	w19, [x9, x8]
     240:	ldr	x8, [x20, #40]
     244:	ldr	x9, [x20, #16]
     248:	ubfx	x10, x19, #8, #24
     24c:	mov	x2, x19
     250:	add	x11, x8, #0x1
     254:	str	x11, [x20, #40]
     258:	strb	w10, [x9, x8]
     25c:	ldr	x8, [x20, #40]
     260:	ldr	x9, [x20, #16]
     264:	mvn	w10, w19
     268:	add	x11, x8, #0x1
     26c:	str	x11, [x20, #40]
     270:	strb	w10, [x9, x8]
     274:	ldr	x8, [x20, #40]
     278:	ldr	x9, [x20, #16]
     27c:	lsr	w10, w10, #8
     280:	add	x11, x8, #0x1
     284:	str	x11, [x20, #40]
     288:	strb	w10, [x9, x8]
     28c:	ldr	x8, [x20, #16]
     290:	ldr	x9, [x20, #40]
     294:	add	x0, x8, x9
     298:	bl	0 <memcpy>
     29c:	ldr	x8, [x20, #40]
     2a0:	add	x8, x8, x19
     2a4:	str	x8, [x20, #40]
     2a8:	ldp	x20, x19, [sp, #16]
     2ac:	ldp	x29, x30, [sp], #32
     2b0:	ret

00000000000002b4 <_tr_flush_bits>:
     2b4:	ldr	w8, [x0, #5940]
     2b8:	cmp	w8, #0x10
     2bc:	b.ne	304 <_tr_flush_bits+0x50>  // b.any
     2c0:	mov	w9, #0x1730                	// #5936
     2c4:	ldr	x11, [x0, #40]
     2c8:	add	x9, x0, x9
     2cc:	ldr	x10, [x0, #16]
     2d0:	ldrb	w12, [x9]
     2d4:	add	x13, x11, #0x1
     2d8:	str	x13, [x0, #40]
     2dc:	mov	w8, wzr
     2e0:	strb	w12, [x10, x11]
     2e4:	ldr	x10, [x0, #40]
     2e8:	ldrb	w9, [x9, #1]
     2ec:	ldr	x11, [x0, #16]
     2f0:	add	x12, x10, #0x1
     2f4:	str	x12, [x0, #40]
     2f8:	strb	w9, [x11, x10]
     2fc:	strh	wzr, [x0, #5936]
     300:	b	33c <_tr_flush_bits+0x88>
     304:	cmp	w8, #0x8
     308:	b.lt	340 <_tr_flush_bits+0x8c>  // b.tstop
     30c:	mov	w8, #0x1730                	// #5936
     310:	ldr	x10, [x0, #40]
     314:	add	x8, x0, x8
     318:	ldr	x9, [x0, #16]
     31c:	ldrb	w11, [x8]
     320:	add	x12, x10, #0x1
     324:	str	x12, [x0, #40]
     328:	strb	w11, [x9, x10]
     32c:	ldrb	w8, [x8, #1]
     330:	ldr	w9, [x0, #5940]
     334:	strh	w8, [x0, #5936]
     338:	sub	w8, w9, #0x8
     33c:	str	w8, [x0, #5940]
     340:	ret

0000000000000344 <_tr_align>:
     344:	ldr	w10, [x0, #5940]
     348:	ldrh	w8, [x0, #5936]
     34c:	mov	w9, #0x2                   	// #2
     350:	lsl	w11, w9, w10
     354:	orr	w8, w8, w11
     358:	cmp	w10, #0xe
     35c:	strh	w8, [x0, #5936]
     360:	b.lt	3b4 <_tr_align+0x70>  // b.tstop
     364:	ldr	x10, [x0, #40]
     368:	ldr	x11, [x0, #16]
     36c:	add	x12, x10, #0x1
     370:	str	x12, [x0, #40]
     374:	mov	w12, #0x1730                	// #5936
     378:	strb	w8, [x11, x10]
     37c:	add	x12, x0, x12
     380:	ldr	x8, [x0, #40]
     384:	ldrb	w10, [x12, #1]
     388:	ldr	x11, [x0, #16]
     38c:	add	x12, x8, #0x1
     390:	str	x12, [x0, #40]
     394:	strb	w10, [x11, x8]
     398:	ldr	w10, [x0, #5940]
     39c:	mov	w8, #0x10                  	// #16
     3a0:	sub	w8, w8, w10
     3a4:	lsr	w8, w9, w8
     3a8:	strh	w8, [x0, #5936]
     3ac:	sub	w9, w10, #0xd
     3b0:	b	3b8 <_tr_align+0x74>
     3b4:	add	w9, w10, #0x3
     3b8:	cmp	w9, #0xa
     3bc:	str	w9, [x0, #5940]
     3c0:	b.lt	40c <_tr_align+0xc8>  // b.tstop
     3c4:	ldr	x9, [x0, #40]
     3c8:	ldr	x10, [x0, #16]
     3cc:	add	x11, x9, #0x1
     3d0:	str	x11, [x0, #40]
     3d4:	mov	w11, #0x1730                	// #5936
     3d8:	strb	w8, [x10, x9]
     3dc:	add	x11, x0, x11
     3e0:	ldr	x8, [x0, #40]
     3e4:	ldrb	w9, [x11, #1]
     3e8:	ldr	x10, [x0, #16]
     3ec:	add	x11, x8, #0x1
     3f0:	str	x11, [x0, #40]
     3f4:	strb	w9, [x10, x8]
     3f8:	ldr	w8, [x0, #5940]
     3fc:	strh	wzr, [x0, #5936]
     400:	sub	w9, w8, #0x9
     404:	mov	w8, wzr
     408:	b	410 <_tr_align+0xcc>
     40c:	add	w9, w9, #0x7
     410:	cmp	w9, #0x10
     414:	str	w9, [x0, #5940]
     418:	b.ne	45c <_tr_align+0x118>  // b.any
     41c:	ldr	x10, [x0, #40]
     420:	ldr	x11, [x0, #16]
     424:	mov	w12, #0x1730                	// #5936
     428:	add	x12, x0, x12
     42c:	add	x13, x10, #0x1
     430:	str	x13, [x0, #40]
     434:	strb	w8, [x11, x10]
     438:	ldr	x8, [x0, #40]
     43c:	ldrb	w10, [x12, #1]
     440:	ldr	x11, [x0, #16]
     444:	mov	w9, wzr
     448:	add	x12, x8, #0x1
     44c:	str	x12, [x0, #40]
     450:	strb	w10, [x11, x8]
     454:	strh	wzr, [x0, #5936]
     458:	b	490 <_tr_align+0x14c>
     45c:	cmp	w9, #0x8
     460:	b.lt	494 <_tr_align+0x150>  // b.tstop
     464:	ldr	x9, [x0, #40]
     468:	ldr	x10, [x0, #16]
     46c:	mov	w11, #0x1730                	// #5936
     470:	add	x11, x0, x11
     474:	add	x12, x9, #0x1
     478:	str	x12, [x0, #40]
     47c:	strb	w8, [x10, x9]
     480:	ldr	w9, [x0, #5940]
     484:	ldrb	w8, [x11, #1]
     488:	sub	w9, w9, #0x8
     48c:	strh	w8, [x0, #5936]
     490:	str	w9, [x0, #5940]
     494:	ret

0000000000000498 <_tr_flush_block>:
     498:	stp	x29, x30, [sp, #-64]!
     49c:	stp	x22, x21, [sp, #32]
     4a0:	stp	x20, x19, [sp, #48]
     4a4:	ldr	w8, [x0, #196]
     4a8:	mov	w20, w3
     4ac:	mov	x21, x2
     4b0:	mov	x19, x0
     4b4:	cmp	w8, #0x1
     4b8:	mov	x22, x1
     4bc:	str	x23, [sp, #16]
     4c0:	mov	x29, sp
     4c4:	b.lt	510 <_tr_flush_block+0x78>  // b.tstop
     4c8:	ldr	x8, [x19]
     4cc:	ldr	w9, [x8, #88]
     4d0:	cmp	w9, #0x2
     4d4:	b.ne	544 <_tr_flush_block+0xac>  // b.any
     4d8:	mov	w11, #0xc07f                	// #49279
     4dc:	mov	x9, xzr
     4e0:	add	x10, x19, #0xd4
     4e4:	movk	w11, #0xf3ff, lsl #16
     4e8:	b	4fc <_tr_flush_block+0x64>
     4ec:	add	x9, x9, #0x4
     4f0:	cmp	x9, #0x80
     4f4:	lsr	x11, x11, #1
     4f8:	b.eq	524 <_tr_flush_block+0x8c>  // b.none
     4fc:	tbz	w11, #0, 4ec <_tr_flush_block+0x54>
     500:	ldrh	w12, [x10, x9]
     504:	cbz	w12, 4ec <_tr_flush_block+0x54>
     508:	mov	w9, wzr
     50c:	b	540 <_tr_flush_block+0xa8>
     510:	add	x9, x21, #0x5
     514:	mov	w8, wzr
     518:	mov	x11, x9
     51c:	cbnz	x22, 8e8 <_tr_flush_block+0x450>
     520:	b	90c <_tr_flush_block+0x474>
     524:	ldrh	w9, [x19, #248]
     528:	cbnz	w9, 53c <_tr_flush_block+0xa4>
     52c:	ldrh	w9, [x19, #252]
     530:	cbnz	w9, 53c <_tr_flush_block+0xa4>
     534:	ldrh	w9, [x19, #264]
     538:	cbz	w9, 7e4 <_tr_flush_block+0x34c>
     53c:	mov	w9, #0x1                   	// #1
     540:	str	w9, [x8, #88]
     544:	add	x1, x19, #0xb58
     548:	mov	x0, x19
     54c:	bl	cec <build_tree>
     550:	add	x1, x19, #0xb70
     554:	mov	x0, x19
     558:	bl	cec <build_tree>
     55c:	ldr	w10, [x19, #2912]
     560:	ldrh	w9, [x19, #214]
     564:	mov	w8, #0xffff                	// #65535
     568:	add	w14, w10, #0x1
     56c:	add	x11, x19, w14, sxtw #2
     570:	strh	w8, [x11, #214]
     574:	tbnz	w10, #31, 674 <_tr_flush_block+0x1dc>
     578:	cmp	w9, #0x0
     57c:	mov	w10, #0x3                   	// #3
     580:	mov	w16, #0x7                   	// #7
     584:	mov	w17, #0x8a                  	// #138
     588:	mov	w1, wzr
     58c:	add	x11, x19, #0xafc
     590:	add	x12, x19, #0xb04
     594:	add	x13, x19, #0xb00
     598:	mov	w14, w14
     59c:	add	x15, x19, #0xda
     5a0:	mov	w3, #0xffffffff            	// #-1
     5a4:	cinc	w18, w10, ne  // ne = any
     5a8:	csel	w0, w17, w16, eq  // eq = none
     5ac:	mov	w16, #0x6                   	// #6
     5b0:	b	5cc <_tr_flush_block+0x134>
     5b4:	mov	w17, w3
     5b8:	subs	x14, x14, #0x1
     5bc:	add	x15, x15, #0x4
     5c0:	mov	w1, w2
     5c4:	mov	w3, w17
     5c8:	b.eq	674 <_tr_flush_block+0x1dc>  // b.none
     5cc:	mov	w17, w9
     5d0:	ldrh	w9, [x15]
     5d4:	add	w2, w1, #0x1
     5d8:	cmp	w2, w0
     5dc:	b.ge	5e8 <_tr_flush_block+0x150>  // b.tcont
     5e0:	cmp	w17, w9
     5e4:	b.eq	5b4 <_tr_flush_block+0x11c>  // b.none
     5e8:	cmp	w2, w18
     5ec:	b.ge	604 <_tr_flush_block+0x16c>  // b.tcont
     5f0:	add	x18, x19, w17, uxtw #2
     5f4:	ldrh	w1, [x18, #2748]
     5f8:	add	x0, x18, #0xabc
     5fc:	add	w18, w1, w2
     600:	b	64c <_tr_flush_block+0x1b4>
     604:	cbz	w17, 62c <_tr_flush_block+0x194>
     608:	cmp	w17, w3
     60c:	b.eq	620 <_tr_flush_block+0x188>  // b.none
     610:	add	x18, x19, w17, uxtw #2
     614:	ldrh	w0, [x18, #2748]
     618:	add	w0, w0, #0x1
     61c:	strh	w0, [x18, #2748]
     620:	ldrh	w18, [x11]
     624:	mov	x0, x11
     628:	b	648 <_tr_flush_block+0x1b0>
     62c:	cmp	w1, #0x9
     630:	b.gt	640 <_tr_flush_block+0x1a8>
     634:	ldrh	w18, [x13]
     638:	mov	x0, x13
     63c:	b	648 <_tr_flush_block+0x1b0>
     640:	ldrh	w18, [x12]
     644:	mov	x0, x12
     648:	add	w18, w18, #0x1
     64c:	mov	w2, wzr
     650:	strh	w18, [x0]
     654:	cbz	w9, 668 <_tr_flush_block+0x1d0>
     658:	cmp	w17, w9
     65c:	cinc	w0, w16, ne  // ne = any
     660:	cinc	w18, w10, ne  // ne = any
     664:	b	5b8 <_tr_flush_block+0x120>
     668:	mov	w18, #0x3                   	// #3
     66c:	mov	w0, #0x8a                  	// #138
     670:	b	5b8 <_tr_flush_block+0x120>
     674:	ldr	w10, [x19, #2936]
     678:	ldrh	w9, [x19, #2506]
     67c:	add	w13, w10, #0x1
     680:	add	x11, x19, w13, sxtw #2
     684:	strh	w8, [x11, #2506]
     688:	tbnz	w10, #31, 788 <_tr_flush_block+0x2f0>
     68c:	cmp	w9, #0x0
     690:	mov	w8, #0x3                   	// #3
     694:	mov	w15, #0x7                   	// #7
     698:	mov	w16, #0x8a                  	// #138
     69c:	mov	w0, wzr
     6a0:	add	x10, x19, #0xafc
     6a4:	add	x11, x19, #0xb04
     6a8:	add	x12, x19, #0xb00
     6ac:	mov	w13, w13
     6b0:	add	x14, x19, #0x9ce
     6b4:	mov	w2, #0xffffffff            	// #-1
     6b8:	cinc	w17, w8, ne  // ne = any
     6bc:	csel	w18, w16, w15, eq  // eq = none
     6c0:	mov	w15, #0x6                   	// #6
     6c4:	b	6e0 <_tr_flush_block+0x248>
     6c8:	mov	w16, w2
     6cc:	subs	x13, x13, #0x1
     6d0:	add	x14, x14, #0x4
     6d4:	mov	w0, w1
     6d8:	mov	w2, w16
     6dc:	b.eq	788 <_tr_flush_block+0x2f0>  // b.none
     6e0:	mov	w16, w9
     6e4:	ldrh	w9, [x14]
     6e8:	add	w1, w0, #0x1
     6ec:	cmp	w1, w18
     6f0:	b.ge	6fc <_tr_flush_block+0x264>  // b.tcont
     6f4:	cmp	w16, w9
     6f8:	b.eq	6c8 <_tr_flush_block+0x230>  // b.none
     6fc:	cmp	w1, w17
     700:	b.ge	718 <_tr_flush_block+0x280>  // b.tcont
     704:	add	x17, x19, w16, uxtw #2
     708:	ldrh	w0, [x17, #2748]
     70c:	add	x18, x17, #0xabc
     710:	add	w17, w0, w1
     714:	b	760 <_tr_flush_block+0x2c8>
     718:	cbz	w16, 740 <_tr_flush_block+0x2a8>
     71c:	cmp	w16, w2
     720:	b.eq	734 <_tr_flush_block+0x29c>  // b.none
     724:	add	x17, x19, w16, uxtw #2
     728:	ldrh	w18, [x17, #2748]
     72c:	add	w18, w18, #0x1
     730:	strh	w18, [x17, #2748]
     734:	ldrh	w17, [x10]
     738:	mov	x18, x10
     73c:	b	75c <_tr_flush_block+0x2c4>
     740:	cmp	w0, #0x9
     744:	b.gt	754 <_tr_flush_block+0x2bc>
     748:	ldrh	w17, [x12]
     74c:	mov	x18, x12
     750:	b	75c <_tr_flush_block+0x2c4>
     754:	ldrh	w17, [x11]
     758:	mov	x18, x11
     75c:	add	w17, w17, #0x1
     760:	mov	w1, wzr
     764:	strh	w17, [x18]
     768:	cbz	w9, 77c <_tr_flush_block+0x2e4>
     76c:	cmp	w16, w9
     770:	cinc	w18, w15, ne  // ne = any
     774:	cinc	w17, w8, ne  // ne = any
     778:	b	6cc <_tr_flush_block+0x234>
     77c:	mov	w17, #0x3                   	// #3
     780:	mov	w18, #0x8a                  	// #138
     784:	b	6cc <_tr_flush_block+0x234>
     788:	add	x1, x19, #0xb88
     78c:	mov	x0, x19
     790:	bl	cec <build_tree>
     794:	ldrh	w8, [x19, #2810]
     798:	cbz	w8, 7a4 <_tr_flush_block+0x30c>
     79c:	mov	w8, #0x12                  	// #18
     7a0:	b	8b4 <_tr_flush_block+0x41c>
     7a4:	ldrh	w8, [x19, #2754]
     7a8:	cbz	w8, 7b4 <_tr_flush_block+0x31c>
     7ac:	mov	w8, #0x11                  	// #17
     7b0:	b	8b4 <_tr_flush_block+0x41c>
     7b4:	ldrh	w8, [x19, #2806]
     7b8:	cbz	w8, 7c4 <_tr_flush_block+0x32c>
     7bc:	mov	w8, #0x10                  	// #16
     7c0:	b	8b4 <_tr_flush_block+0x41c>
     7c4:	ldrh	w8, [x19, #2758]
     7c8:	cbz	w8, 7d4 <_tr_flush_block+0x33c>
     7cc:	mov	w8, #0xf                   	// #15
     7d0:	b	8b4 <_tr_flush_block+0x41c>
     7d4:	ldrh	w8, [x19, #2802]
     7d8:	cbz	w8, 804 <_tr_flush_block+0x36c>
     7dc:	mov	w8, #0xe                   	// #14
     7e0:	b	8b4 <_tr_flush_block+0x41c>
     7e4:	mov	x10, xzr
     7e8:	add	x11, x19, #0x154
     7ec:	ldrh	w9, [x11, x10]
     7f0:	cbnz	w9, 53c <_tr_flush_block+0xa4>
     7f4:	add	x10, x10, #0x4
     7f8:	cmp	x10, #0x380
     7fc:	b.ne	7ec <_tr_flush_block+0x354>  // b.any
     800:	b	540 <_tr_flush_block+0xa8>
     804:	ldrh	w8, [x19, #2762]
     808:	cbz	w8, 814 <_tr_flush_block+0x37c>
     80c:	mov	w8, #0xd                   	// #13
     810:	b	8b4 <_tr_flush_block+0x41c>
     814:	ldrh	w8, [x19, #2798]
     818:	cbz	w8, 824 <_tr_flush_block+0x38c>
     81c:	mov	w8, #0xc                   	// #12
     820:	b	8b4 <_tr_flush_block+0x41c>
     824:	ldrh	w8, [x19, #2766]
     828:	cbz	w8, 834 <_tr_flush_block+0x39c>
     82c:	mov	w8, #0xb                   	// #11
     830:	b	8b4 <_tr_flush_block+0x41c>
     834:	ldrh	w8, [x19, #2794]
     838:	cbz	w8, 844 <_tr_flush_block+0x3ac>
     83c:	mov	w8, #0xa                   	// #10
     840:	b	8b4 <_tr_flush_block+0x41c>
     844:	ldrh	w8, [x19, #2770]
     848:	cbz	w8, 854 <_tr_flush_block+0x3bc>
     84c:	mov	w8, #0x9                   	// #9
     850:	b	8b4 <_tr_flush_block+0x41c>
     854:	ldrh	w8, [x19, #2790]
     858:	cbz	w8, 864 <_tr_flush_block+0x3cc>
     85c:	mov	w8, #0x8                   	// #8
     860:	b	8b4 <_tr_flush_block+0x41c>
     864:	ldrh	w8, [x19, #2774]
     868:	cbz	w8, 874 <_tr_flush_block+0x3dc>
     86c:	mov	w8, #0x7                   	// #7
     870:	b	8b4 <_tr_flush_block+0x41c>
     874:	ldrh	w8, [x19, #2786]
     878:	cbz	w8, 884 <_tr_flush_block+0x3ec>
     87c:	mov	w8, #0x6                   	// #6
     880:	b	8b4 <_tr_flush_block+0x41c>
     884:	ldrh	w8, [x19, #2778]
     888:	cbz	w8, 894 <_tr_flush_block+0x3fc>
     88c:	mov	w8, #0x5                   	// #5
     890:	b	8b4 <_tr_flush_block+0x41c>
     894:	ldrh	w8, [x19, #2782]
     898:	cbz	w8, 8a4 <_tr_flush_block+0x40c>
     89c:	mov	w8, #0x4                   	// #4
     8a0:	b	8b4 <_tr_flush_block+0x41c>
     8a4:	ldrh	w8, [x19, #2750]
     8a8:	cmp	w8, #0x0
     8ac:	mov	w8, #0x2                   	// #2
     8b0:	cinc	w8, w8, ne  // ne = any
     8b4:	ldr	x9, [x19, #5912]
     8b8:	ldr	x10, [x19, #5920]
     8bc:	add	w11, w8, w8, lsl #1
     8c0:	add	w11, w11, #0x11
     8c4:	add	x9, x9, x11
     8c8:	add	x10, x10, #0xa
     8cc:	str	x9, [x19, #5912]
     8d0:	add	x9, x9, #0xa
     8d4:	lsr	x11, x9, #3
     8d8:	lsr	x9, x10, #3
     8dc:	cmp	x9, x11
     8e0:	csel	x11, x11, x9, hi  // hi = pmore
     8e4:	cbz	x22, 90c <_tr_flush_block+0x474>
     8e8:	add	x10, x21, #0x4
     8ec:	cmp	x10, x11
     8f0:	b.hi	90c <_tr_flush_block+0x474>  // b.pmore
     8f4:	mov	x0, x19
     8f8:	mov	x1, x22
     8fc:	mov	x2, x21
     900:	mov	w3, w20
     904:	bl	148 <_tr_stored_block>
     908:	b	c60 <_tr_flush_block+0x7c8>
     90c:	ldr	w10, [x19, #5940]
     910:	cmp	x9, x11
     914:	b.eq	994 <_tr_flush_block+0x4fc>  // b.none
     918:	ldr	w9, [x19, #200]
     91c:	cmp	w9, #0x4
     920:	b.eq	994 <_tr_flush_block+0x4fc>  // b.none
     924:	ldrh	w9, [x19, #5936]
     928:	add	w11, w20, #0x4
     92c:	and	w11, w11, #0xffff
     930:	lsl	w12, w11, w10
     934:	orr	w9, w9, w12
     938:	cmp	w10, #0xe
     93c:	strh	w9, [x19, #5936]
     940:	b.lt	a04 <_tr_flush_block+0x56c>  // b.tstop
     944:	ldr	x10, [x19, #40]
     948:	ldr	x12, [x19, #16]
     94c:	add	x13, x10, #0x1
     950:	str	x13, [x19, #40]
     954:	mov	w13, #0x1730                	// #5936
     958:	strb	w9, [x12, x10]
     95c:	add	x13, x19, x13
     960:	ldr	x9, [x19, #40]
     964:	ldrb	w10, [x13, #1]
     968:	ldr	x12, [x19, #16]
     96c:	add	x13, x9, #0x1
     970:	str	x13, [x19, #40]
     974:	strb	w10, [x12, x9]
     978:	ldr	w10, [x19, #5940]
     97c:	mov	w9, #0x10                  	// #16
     980:	sub	w9, w9, w10
     984:	lsr	w9, w11, w9
     988:	strh	w9, [x19, #5936]
     98c:	sub	w11, w10, #0xd
     990:	b	a08 <_tr_flush_block+0x570>
     994:	ldrh	w9, [x19, #5936]
     998:	add	w8, w20, #0x2
     99c:	and	w8, w8, #0xffff
     9a0:	lsl	w11, w8, w10
     9a4:	orr	w9, w9, w11
     9a8:	cmp	w10, #0xe
     9ac:	strh	w9, [x19, #5936]
     9b0:	b.lt	a84 <_tr_flush_block+0x5ec>  // b.tstop
     9b4:	ldr	x10, [x19, #40]
     9b8:	ldr	x11, [x19, #16]
     9bc:	add	x12, x10, #0x1
     9c0:	str	x12, [x19, #40]
     9c4:	mov	w12, #0x1730                	// #5936
     9c8:	strb	w9, [x11, x10]
     9cc:	add	x12, x19, x12
     9d0:	ldr	x9, [x19, #40]
     9d4:	ldrb	w10, [x12, #1]
     9d8:	ldr	x11, [x19, #16]
     9dc:	add	x12, x9, #0x1
     9e0:	str	x12, [x19, #40]
     9e4:	strb	w10, [x11, x9]
     9e8:	ldr	w9, [x19, #5940]
     9ec:	mov	w10, #0x10                  	// #16
     9f0:	sub	w10, w10, w9
     9f4:	lsr	w8, w8, w10
     9f8:	strh	w8, [x19, #5936]
     9fc:	sub	w8, w9, #0xd
     a00:	b	a88 <_tr_flush_block+0x5f0>
     a04:	add	w11, w10, #0x3
     a08:	ldr	w2, [x19, #2912]
     a0c:	mov	w10, #0xff00                	// #65280
     a10:	ldr	w21, [x19, #2936]
     a14:	cmp	w11, #0xc
     a18:	add	w10, w2, w10
     a1c:	and	w10, w10, #0xffff
     a20:	lsl	w12, w10, w11
     a24:	orr	w9, w9, w12
     a28:	str	w11, [x19, #5940]
     a2c:	strh	w9, [x19, #5936]
     a30:	b.lt	aa4 <_tr_flush_block+0x60c>  // b.tstop
     a34:	ldr	x11, [x19, #40]
     a38:	ldr	x12, [x19, #16]
     a3c:	add	x13, x11, #0x1
     a40:	str	x13, [x19, #40]
     a44:	mov	w13, #0x1730                	// #5936
     a48:	strb	w9, [x12, x11]
     a4c:	add	x13, x19, x13
     a50:	ldr	x9, [x19, #40]
     a54:	ldrb	w11, [x13, #1]
     a58:	ldr	x12, [x19, #16]
     a5c:	add	x13, x9, #0x1
     a60:	str	x13, [x19, #40]
     a64:	strb	w11, [x12, x9]
     a68:	ldr	w11, [x19, #5940]
     a6c:	mov	w9, #0x10                  	// #16
     a70:	sub	w9, w9, w11
     a74:	lsr	w9, w10, w9
     a78:	strh	w9, [x19, #5936]
     a7c:	sub	w12, w11, #0xb
     a80:	b	aa8 <_tr_flush_block+0x610>
     a84:	add	w8, w10, #0x3
     a88:	adrp	x1, 0 <_tr_init>
     a8c:	adrp	x2, 0 <_tr_init>
     a90:	str	w8, [x19, #5940]
     a94:	add	x1, x1, #0x0
     a98:	add	x2, x2, #0x0
     a9c:	mov	x0, x19
     aa0:	b	c5c <_tr_flush_block+0x7c4>
     aa4:	add	w12, w11, #0x5
     aa8:	and	w11, w21, #0xffff
     aac:	lsl	w10, w11, w12
     ab0:	orr	w10, w9, w10
     ab4:	cmp	w12, #0xc
     ab8:	str	w12, [x19, #5940]
     abc:	strh	w10, [x19, #5936]
     ac0:	b.lt	b14 <_tr_flush_block+0x67c>  // b.tstop
     ac4:	ldr	x9, [x19, #40]
     ac8:	ldr	x12, [x19, #16]
     acc:	add	x13, x9, #0x1
     ad0:	str	x13, [x19, #40]
     ad4:	mov	w13, #0x1730                	// #5936
     ad8:	strb	w10, [x12, x9]
     adc:	add	x13, x19, x13
     ae0:	ldr	x9, [x19, #40]
     ae4:	ldrb	w10, [x13, #1]
     ae8:	ldr	x12, [x19, #16]
     aec:	add	x13, x9, #0x1
     af0:	str	x13, [x19, #40]
     af4:	strb	w10, [x12, x9]
     af8:	ldr	w9, [x19, #5940]
     afc:	mov	w10, #0x10                  	// #16
     b00:	sub	w10, w10, w9
     b04:	lsr	w10, w11, w10
     b08:	strh	w10, [x19, #5936]
     b0c:	sub	w12, w9, #0xb
     b10:	b	b18 <_tr_flush_block+0x680>
     b14:	add	w12, w12, #0x5
     b18:	mov	w11, #0xfffd                	// #65533
     b1c:	add	w9, w8, #0x1
     b20:	add	w8, w8, w11
     b24:	and	w11, w8, #0xffff
     b28:	lsl	w8, w11, w12
     b2c:	orr	w8, w10, w8
     b30:	cmp	w12, #0xd
     b34:	str	w12, [x19, #5940]
     b38:	strh	w8, [x19, #5936]
     b3c:	b.lt	b90 <_tr_flush_block+0x6f8>  // b.tstop
     b40:	ldr	x10, [x19, #40]
     b44:	ldr	x12, [x19, #16]
     b48:	add	x13, x10, #0x1
     b4c:	str	x13, [x19, #40]
     b50:	mov	w13, #0x1730                	// #5936
     b54:	strb	w8, [x12, x10]
     b58:	add	x13, x19, x13
     b5c:	ldr	x8, [x19, #40]
     b60:	ldrb	w10, [x13, #1]
     b64:	ldr	x12, [x19, #16]
     b68:	add	x13, x8, #0x1
     b6c:	str	x13, [x19, #40]
     b70:	strb	w10, [x12, x8]
     b74:	ldr	w10, [x19, #5940]
     b78:	mov	w8, #0x10                  	// #16
     b7c:	sub	w8, w8, w10
     b80:	lsr	w8, w11, w8
     b84:	strh	w8, [x19, #5936]
     b88:	sub	w11, w10, #0xc
     b8c:	b	b94 <_tr_flush_block+0x6fc>
     b90:	add	w11, w12, #0x4
     b94:	adrp	x10, 0 <_tr_init>
     b98:	mov	w12, #0x1730                	// #5936
     b9c:	mov	w9, w9
     ba0:	add	x10, x10, #0x0
     ba4:	add	x12, x19, x12
     ba8:	mov	w13, #0x10                  	// #16
     bac:	str	w11, [x19, #5940]
     bb0:	b	bc8 <_tr_flush_block+0x730>
     bb4:	add	w11, w11, #0x3
     bb8:	subs	x9, x9, #0x1
     bbc:	add	x10, x10, #0x1
     bc0:	str	w11, [x19, #5940]
     bc4:	b.eq	c2c <_tr_flush_block+0x794>  // b.none
     bc8:	ldrb	w14, [x10]
     bcc:	cmp	w11, #0xe
     bd0:	add	x14, x19, x14, lsl #2
     bd4:	ldrh	w14, [x14, #2750]
     bd8:	lsl	w15, w14, w11
     bdc:	orr	w8, w8, w15
     be0:	strh	w8, [x19, #5936]
     be4:	b.lt	bb4 <_tr_flush_block+0x71c>  // b.tstop
     be8:	ldr	x11, [x19, #40]
     bec:	ldr	x15, [x19, #16]
     bf0:	add	x16, x11, #0x1
     bf4:	str	x16, [x19, #40]
     bf8:	strb	w8, [x15, x11]
     bfc:	ldr	x8, [x19, #40]
     c00:	ldrb	w11, [x12, #1]
     c04:	ldr	x15, [x19, #16]
     c08:	add	x16, x8, #0x1
     c0c:	str	x16, [x19, #40]
     c10:	strb	w11, [x15, x8]
     c14:	ldr	w11, [x19, #5940]
     c18:	sub	w8, w13, w11
     c1c:	lsr	w8, w14, w8
     c20:	strh	w8, [x19, #5936]
     c24:	sub	w11, w11, #0xd
     c28:	b	bb8 <_tr_flush_block+0x720>
     c2c:	add	x22, x19, #0xd4
     c30:	mov	x0, x19
     c34:	mov	x1, x22
     c38:	bl	1948 <send_tree>
     c3c:	add	x23, x19, #0x9c8
     c40:	mov	x0, x19
     c44:	mov	x1, x23
     c48:	mov	w2, w21
     c4c:	bl	1948 <send_tree>
     c50:	mov	x0, x19
     c54:	mov	x1, x22
     c58:	mov	x2, x23
     c5c:	bl	14f0 <compress_block>
     c60:	mov	x0, x19
     c64:	bl	48 <init_block>
     c68:	cbz	w20, cd8 <_tr_flush_block+0x840>
     c6c:	ldr	w8, [x19, #5940]
     c70:	cmp	w8, #0x9
     c74:	b.lt	ca8 <_tr_flush_block+0x810>  // b.tstop
     c78:	mov	w8, #0x1730                	// #5936
     c7c:	ldr	x10, [x19, #40]
     c80:	add	x8, x19, x8
     c84:	ldr	x9, [x19, #16]
     c88:	ldrb	w11, [x8]
     c8c:	add	x12, x10, #0x1
     c90:	str	x12, [x19, #40]
     c94:	strb	w11, [x9, x10]
     c98:	ldr	x9, [x19, #40]
     c9c:	ldr	x10, [x19, #16]
     ca0:	ldrb	w8, [x8, #1]
     ca4:	b	cc0 <_tr_flush_block+0x828>
     ca8:	cmp	w8, #0x1
     cac:	b.lt	cd0 <_tr_flush_block+0x838>  // b.tstop
     cb0:	mov	w8, #0x1730                	// #5936
     cb4:	ldr	x9, [x19, #40]
     cb8:	ldr	x10, [x19, #16]
     cbc:	ldrb	w8, [x19, x8]
     cc0:	add	x11, x9, #0x1
     cc4:	add	x9, x10, x9
     cc8:	str	x11, [x19, #40]
     ccc:	strb	w8, [x9]
     cd0:	strh	wzr, [x19, #5936]
     cd4:	str	wzr, [x19, #5940]
     cd8:	ldp	x20, x19, [sp, #48]
     cdc:	ldp	x22, x21, [sp, #32]
     ce0:	ldr	x23, [sp, #16]
     ce4:	ldp	x29, x30, [sp], #64
     ce8:	ret

0000000000000cec <build_tree>:
     cec:	sub	sp, sp, #0x20
     cf0:	ldr	x9, [x1, #16]
     cf4:	ldr	x8, [x1]
     cf8:	ldr	x12, [x9]
     cfc:	ldr	w10, [x9, #20]
     d00:	adrp	x9, 0 <_tr_init>
     d04:	ldr	d0, [x9]
     d08:	mov	w9, #0x14b4                	// #5300
     d0c:	add	x11, x0, x9
     d10:	cmp	w10, #0x1
     d14:	str	d0, [x11]
     d18:	b.lt	146c <build_tree+0x780>  // b.tstop
     d1c:	mov	w9, #0x14bc                	// #5308
     d20:	mov	x13, xzr
     d24:	add	x14, x8, #0x2
     d28:	add	x15, x0, x9
     d2c:	mov	w9, #0xffffffff            	// #-1
     d30:	b	d48 <build_tree+0x5c>
     d34:	strh	wzr, [x14]
     d38:	add	x13, x13, #0x1
     d3c:	cmp	x10, x13
     d40:	add	x14, x14, #0x4
     d44:	b.eq	d70 <build_tree+0x84>  // b.none
     d48:	ldurh	w16, [x14, #-2]
     d4c:	cbz	w16, d34 <build_tree+0x48>
     d50:	ldrsw	x9, [x0, #5300]
     d54:	add	x9, x9, #0x1
     d58:	str	w9, [x0, #5300]
     d5c:	add	x9, x0, x9, lsl #2
     d60:	str	w13, [x9, #3008]
     d64:	strb	wzr, [x15, x13]
     d68:	mov	w9, w13
     d6c:	b	d38 <build_tree+0x4c>
     d70:	ldr	w16, [x11]
     d74:	cmp	w16, #0x1
     d78:	b.le	1474 <build_tree+0x788>
     d7c:	lsr	w12, w16, #1
     d80:	mov	w13, #0x14bc                	// #5308
     d84:	str	w9, [x1, #8]
     d88:	add	x14, x0, x12, lsl #2
     d8c:	ldr	w14, [x14, #3008]
     d90:	lsl	w2, w12, #1
     d94:	cmp	w2, w16
     d98:	mov	x15, x12
     d9c:	b.gt	e80 <build_tree+0x194>
     da0:	sxtw	x17, w14
     da4:	add	x15, x0, x17
     da8:	add	x15, x15, x13
     dac:	add	x17, x8, x17, lsl #2
     db0:	mov	w18, w12
     db4:	b	dd4 <build_tree+0xe8>
     db8:	add	x18, x0, w18, sxtw #2
     dbc:	str	w16, [x18, #3008]
     dc0:	ldr	w16, [x0, #5300]
     dc4:	lsl	w2, w3, #1
     dc8:	mov	w18, w3
     dcc:	cmp	w2, w16
     dd0:	b.gt	e7c <build_tree+0x190>
     dd4:	cmp	w2, w16
     dd8:	b.ge	e14 <build_tree+0x128>  // b.tcont
     ddc:	sxtw	x16, w2
     de0:	add	x5, x0, #0xbc0
     de4:	orr	x4, x16, #0x1
     de8:	ldrsw	x3, [x5, w2, sxtw #2]
     dec:	ldrsw	x5, [x5, x4, lsl #2]
     df0:	lsl	x6, x3, #2
     df4:	lsl	x7, x5, #2
     df8:	ldrh	w7, [x8, x7]
     dfc:	ldrh	w6, [x8, x6]
     e00:	cmp	w7, w6
     e04:	b.cs	e58 <build_tree+0x16c>  // b.hs, b.nlast
     e08:	mov	x16, x4
     e0c:	mov	w3, w4
     e10:	b	e1c <build_tree+0x130>
     e14:	sxtw	x16, w2
     e18:	mov	w3, w2
     e1c:	add	x16, x0, x16, lsl #2
     e20:	ldr	w16, [x16, #3008]
     e24:	ldrh	w2, [x17]
     e28:	sbfiz	x4, x16, #2, #32
     e2c:	ldrh	w4, [x8, x4]
     e30:	cmp	w2, w4
     e34:	b.cc	e78 <build_tree+0x18c>  // b.lo, b.ul, b.last
     e38:	b.ne	db8 <build_tree+0xcc>  // b.any
     e3c:	sxtw	x2, w16
     e40:	add	x2, x0, x2
     e44:	ldrb	w4, [x15]
     e48:	ldrb	w2, [x2, x13]
     e4c:	cmp	w4, w2
     e50:	b.hi	db8 <build_tree+0xcc>  // b.pmore
     e54:	b	e78 <build_tree+0x18c>
     e58:	b.ne	e18 <build_tree+0x12c>  // b.any
     e5c:	add	x6, x0, x13
     e60:	ldrb	w5, [x6, x5]
     e64:	ldrb	w3, [x6, x3]
     e68:	cmp	w5, w3
     e6c:	mov	w3, w2
     e70:	b.ls	e08 <build_tree+0x11c>  // b.plast
     e74:	b	e1c <build_tree+0x130>
     e78:	mov	w3, w18
     e7c:	sxtw	x15, w3
     e80:	add	x15, x0, x15, lsl #2
     e84:	cmp	x12, #0x2
     e88:	str	w14, [x15, #3008]
     e8c:	b.lt	e9c <build_tree+0x1b0>  // b.tstop
     e90:	ldr	w16, [x11]
     e94:	sub	x12, x12, #0x1
     e98:	b	d88 <build_tree+0x9c>
     e9c:	ldr	w15, [x0, #5300]
     ea0:	sxtw	x11, w10
     ea4:	mov	w10, #0x14bc                	// #5308
     ea8:	b	ec8 <build_tree+0x1dc>
     eac:	mov	w13, #0x1                   	// #1
     eb0:	add	x13, x0, x13, lsl #2
     eb4:	str	w11, [x13, #3008]
     eb8:	ldr	w15, [x0, #5300]
     ebc:	mov	x11, x12
     ec0:	cmp	w15, #0x1
     ec4:	b.le	1134 <build_tree+0x448>
     ec8:	sub	w3, w15, #0x1
     ecc:	ldr	w13, [x0, #3012]
     ed0:	str	w3, [x0, #5300]
     ed4:	add	x12, x0, w15, sxtw #2
     ed8:	ldr	w14, [x12, #3008]
     edc:	sxtw	x12, w13
     ee0:	cmp	w15, #0x2
     ee4:	str	w14, [x0, #3012]
     ee8:	b.gt	ef4 <build_tree+0x208>
     eec:	mov	w15, #0x1                   	// #1
     ef0:	b	fd8 <build_tree+0x2ec>
     ef4:	sxtw	x15, w14
     ef8:	add	x16, x0, x15
     efc:	mov	w17, #0x1                   	// #1
     f00:	add	x15, x8, x15, lsl #2
     f04:	add	x16, x16, x10
     f08:	mov	w18, #0x2                   	// #2
     f0c:	b	f2c <build_tree+0x240>
     f10:	add	x17, x0, w17, sxtw #2
     f14:	str	w18, [x17, #3008]
     f18:	ldr	w3, [x0, #5300]
     f1c:	lsl	w18, w2, #1
     f20:	mov	w17, w2
     f24:	cmp	w18, w3
     f28:	b.gt	fd4 <build_tree+0x2e8>
     f2c:	cmp	w18, w3
     f30:	b.ge	f6c <build_tree+0x280>  // b.tcont
     f34:	sxtw	x3, w18
     f38:	add	x5, x0, #0xbc0
     f3c:	orr	x4, x3, #0x1
     f40:	ldrsw	x2, [x5, w18, sxtw #2]
     f44:	ldrsw	x5, [x5, x4, lsl #2]
     f48:	lsl	x6, x2, #2
     f4c:	lsl	x7, x5, #2
     f50:	ldrh	w7, [x8, x7]
     f54:	ldrh	w6, [x8, x6]
     f58:	cmp	w7, w6
     f5c:	b.cs	fb0 <build_tree+0x2c4>  // b.hs, b.nlast
     f60:	mov	x3, x4
     f64:	mov	w2, w4
     f68:	b	f74 <build_tree+0x288>
     f6c:	sxtw	x3, w18
     f70:	mov	w2, w18
     f74:	add	x18, x0, x3, lsl #2
     f78:	ldr	w18, [x18, #3008]
     f7c:	ldrh	w3, [x15]
     f80:	sbfiz	x4, x18, #2, #32
     f84:	ldrh	w4, [x8, x4]
     f88:	cmp	w3, w4
     f8c:	b.cc	fd0 <build_tree+0x2e4>  // b.lo, b.ul, b.last
     f90:	b.ne	f10 <build_tree+0x224>  // b.any
     f94:	sxtw	x3, w18
     f98:	add	x3, x0, x3
     f9c:	ldrb	w4, [x16]
     fa0:	ldrb	w3, [x3, x10]
     fa4:	cmp	w4, w3
     fa8:	b.hi	f10 <build_tree+0x224>  // b.pmore
     fac:	b	fd0 <build_tree+0x2e4>
     fb0:	b.ne	f70 <build_tree+0x284>  // b.any
     fb4:	add	x6, x0, x10
     fb8:	ldrb	w5, [x6, x5]
     fbc:	ldrb	w2, [x6, x2]
     fc0:	cmp	w5, w2
     fc4:	mov	w2, w18
     fc8:	b.ls	f60 <build_tree+0x274>  // b.plast
     fcc:	b	f74 <build_tree+0x288>
     fd0:	mov	w2, w17
     fd4:	sxtw	x15, w2
     fd8:	add	x16, x0, #0xbc0
     fdc:	str	w14, [x16, x15, lsl #2]
     fe0:	ldrsw	x14, [x0, #5304]
     fe4:	ldrsw	x15, [x0, #3012]
     fe8:	add	x17, x8, x12, lsl #2
     fec:	sub	x14, x14, #0x1
     ff0:	str	w14, [x0, #5304]
     ff4:	str	w13, [x16, x14, lsl #2]
     ff8:	ldrsw	x13, [x0, #5304]
     ffc:	add	x18, x8, x15, lsl #2
    1000:	sub	x13, x13, #0x1
    1004:	str	w13, [x0, #5304]
    1008:	str	w15, [x16, x13, lsl #2]
    100c:	ldrh	w13, [x17]
    1010:	ldrh	w14, [x18]
    1014:	add	w14, w14, w13
    1018:	add	x13, x8, x11, lsl #2
    101c:	strh	w14, [x13]
    1020:	add	x14, x0, x10
    1024:	ldrb	w12, [x14, x12]
    1028:	ldrb	w15, [x14, x15]
    102c:	add	x14, x14, x11
    1030:	cmp	w12, w15
    1034:	csel	w12, w15, w12, cc  // cc = lo, ul, last
    1038:	add	w12, w12, #0x1
    103c:	strb	w12, [x14]
    1040:	strh	w11, [x18, #2]
    1044:	strh	w11, [x17, #2]
    1048:	ldr	w18, [x0, #5300]
    104c:	add	x12, x11, #0x1
    1050:	str	w11, [x0, #3012]
    1054:	cmp	w18, #0x2
    1058:	b.lt	eac <build_tree+0x1c0>  // b.tstop
    105c:	mov	w15, #0x1                   	// #1
    1060:	mov	w16, #0x2                   	// #2
    1064:	b	1084 <build_tree+0x398>
    1068:	add	x15, x0, w15, sxtw #2
    106c:	str	w16, [x15, #3008]
    1070:	ldr	w18, [x0, #5300]
    1074:	lsl	w16, w17, #1
    1078:	mov	w15, w17
    107c:	cmp	w16, w18
    1080:	b.gt	112c <build_tree+0x440>
    1084:	cmp	w16, w18
    1088:	b.ge	10c4 <build_tree+0x3d8>  // b.tcont
    108c:	sxtw	x18, w16
    1090:	add	x3, x0, #0xbc0
    1094:	orr	x2, x18, #0x1
    1098:	ldrsw	x17, [x3, w16, sxtw #2]
    109c:	ldrsw	x3, [x3, x2, lsl #2]
    10a0:	lsl	x4, x17, #2
    10a4:	lsl	x5, x3, #2
    10a8:	ldrh	w5, [x8, x5]
    10ac:	ldrh	w4, [x8, x4]
    10b0:	cmp	w5, w4
    10b4:	b.cs	1108 <build_tree+0x41c>  // b.hs, b.nlast
    10b8:	mov	x18, x2
    10bc:	mov	w17, w2
    10c0:	b	10cc <build_tree+0x3e0>
    10c4:	sxtw	x18, w16
    10c8:	mov	w17, w16
    10cc:	add	x16, x0, x18, lsl #2
    10d0:	ldr	w16, [x16, #3008]
    10d4:	ldrh	w18, [x13]
    10d8:	sbfiz	x2, x16, #2, #32
    10dc:	ldrh	w2, [x8, x2]
    10e0:	cmp	w18, w2
    10e4:	b.cc	1128 <build_tree+0x43c>  // b.lo, b.ul, b.last
    10e8:	b.ne	1068 <build_tree+0x37c>  // b.any
    10ec:	sxtw	x18, w16
    10f0:	add	x18, x0, x18
    10f4:	ldrb	w2, [x14]
    10f8:	ldrb	w18, [x18, x10]
    10fc:	cmp	w2, w18
    1100:	b.hi	1068 <build_tree+0x37c>  // b.pmore
    1104:	b	1128 <build_tree+0x43c>
    1108:	b.ne	10c8 <build_tree+0x3dc>  // b.any
    110c:	add	x4, x0, x10
    1110:	ldrb	w3, [x4, x3]
    1114:	ldrb	w17, [x4, x17]
    1118:	cmp	w3, w17
    111c:	mov	w17, w16
    1120:	b.ls	10b8 <build_tree+0x3cc>  // b.plast
    1124:	b	10cc <build_tree+0x3e0>
    1128:	mov	w17, w15
    112c:	sxtw	x13, w17
    1130:	b	eb0 <build_tree+0x1c4>
    1134:	ldrsw	x10, [x0, #5304]
    1138:	ldr	w11, [x0, #3012]
    113c:	add	x13, x0, #0xbc0
    1140:	movi	v0.2d, #0x0
    1144:	sub	x10, x10, #0x1
    1148:	str	w10, [x0, #5304]
    114c:	str	w11, [x13, x10, lsl #2]
    1150:	ldr	x12, [x1, #16]
    1154:	ldrsw	x17, [x0, #5304]
    1158:	ldr	x10, [x1]
    115c:	ldr	w11, [x1, #8]
    1160:	ldp	x14, x15, [x12]
    1164:	ldr	w16, [x12, #16]
    1168:	ldrsw	x12, [x12, #24]
    116c:	str	q0, [x0, #2992]
    1170:	str	q0, [x0, #2976]
    1174:	ldrsw	x13, [x13, x17, lsl #2]
    1178:	add	x13, x10, x13, lsl #2
    117c:	strh	wzr, [x13, #2]
    1180:	ldrsw	x18, [x0, #5304]
    1184:	cmp	w18, #0x23b
    1188:	b.gt	130c <build_tree+0x620>
    118c:	sub	w17, w18, #0x23c
    1190:	add	x18, x0, x18, lsl #2
    1194:	mov	w13, wzr
    1198:	add	x18, x18, #0xbc4
    119c:	b	11ac <build_tree+0x4c0>
    11a0:	adds	w17, w17, #0x1
    11a4:	add	x18, x18, #0x4
    11a8:	b.cs	1238 <build_tree+0x54c>  // b.hs, b.nlast
    11ac:	ldrsw	x1, [x18]
    11b0:	add	x3, x10, x1, lsl #2
    11b4:	ldrh	w2, [x3, #2]
    11b8:	add	x2, x10, x2, lsl #2
    11bc:	ldrh	w2, [x2, #2]
    11c0:	cmp	w12, w2
    11c4:	csinc	w2, w12, w2, le
    11c8:	cinc	w13, w13, le
    11cc:	cmp	w1, w11
    11d0:	strh	w2, [x3, #2]
    11d4:	b.gt	11a0 <build_tree+0x4b4>
    11d8:	add	x3, x0, w2, sxtw #1
    11dc:	ldrh	w4, [x3, #2976]
    11e0:	cmp	w1, w16
    11e4:	add	w4, w4, #0x1
    11e8:	strh	w4, [x3, #2976]
    11ec:	b.ge	11f8 <build_tree+0x50c>  // b.tcont
    11f0:	mov	w3, wzr
    11f4:	b	1200 <build_tree+0x514>
    11f8:	sub	w3, w1, w16
    11fc:	ldr	w3, [x15, w3, sxtw #2]
    1200:	lsl	x4, x1, #2
    1204:	ldrh	w4, [x10, x4]
    1208:	ldr	x5, [x0, #5912]
    120c:	add	w2, w3, w2
    1210:	madd	x2, x4, x2, x5
    1214:	str	x2, [x0, #5912]
    1218:	cbz	x14, 11a0 <build_tree+0x4b4>
    121c:	add	x1, x14, x1, lsl #2
    1220:	ldrh	w1, [x1, #2]
    1224:	ldr	x2, [x0, #5920]
    1228:	add	w1, w3, w1
    122c:	madd	x1, x1, x4, x2
    1230:	str	x1, [x0, #5920]
    1234:	b	11a0 <build_tree+0x4b4>
    1238:	cbz	w13, 130c <build_tree+0x620>
    123c:	add	x14, x0, x12, lsl #1
    1240:	mov	x15, #0x100000000           	// #4294967296
    1244:	add	x14, x14, #0xba0
    1248:	add	x15, x15, x12, lsl #32
    124c:	mov	x16, #0xffffffff00000000    	// #-4294967296
    1250:	mov	x17, x14
    1254:	mov	x18, x15
    1258:	ldrh	w1, [x17, #-2]!
    125c:	add	x18, x18, x16
    1260:	cbz	w1, 1258 <build_tree+0x56c>
    1264:	sub	w1, w1, #0x1
    1268:	add	x18, x0, x18, asr #31
    126c:	strh	w1, [x17]
    1270:	ldrh	w17, [x18, #2976]
    1274:	subs	w13, w13, #0x2
    1278:	add	w17, w17, #0x2
    127c:	strh	w17, [x18, #2976]
    1280:	ldrh	w17, [x14]
    1284:	sub	w17, w17, #0x1
    1288:	strh	w17, [x14]
    128c:	b.gt	1250 <build_tree+0x564>
    1290:	cbz	w12, 130c <build_tree+0x620>
    1294:	add	x13, x0, #0xbbc
    1298:	mov	w14, #0x23d                 	// #573
    129c:	and	w15, w17, #0xffff
    12a0:	mov	x16, xzr
    12a4:	add	x18, x13, w14, sxtw #2
    12a8:	cbz	w15, 12f4 <build_tree+0x608>
    12ac:	ldrsw	x17, [x18, x16, lsl #2]
    12b0:	sub	x16, x16, #0x1
    12b4:	cmp	w17, w11
    12b8:	b.gt	12a8 <build_tree+0x5bc>
    12bc:	add	x18, x10, x17, lsl #2
    12c0:	ldrh	w1, [x18, #2]!
    12c4:	add	x14, x16, w14, uxtw
    12c8:	cmp	w12, w1
    12cc:	b.eq	12ec <build_tree+0x600>  // b.none
    12d0:	lsl	x16, x17, #2
    12d4:	ldr	x17, [x0, #5912]
    12d8:	ldrh	w16, [x10, x16]
    12dc:	sub	x1, x12, x1
    12e0:	madd	x16, x1, x16, x17
    12e4:	str	x16, [x0, #5912]
    12e8:	strh	w12, [x18]
    12ec:	sub	w15, w15, #0x1
    12f0:	b	12a0 <build_tree+0x5b4>
    12f4:	sub	x12, x12, #0x1
    12f8:	cbz	w12, 130c <build_tree+0x620>
    12fc:	add	x15, x0, x12, lsl #1
    1300:	ldrh	w17, [x15, #2976]
    1304:	mov	w14, w14
    1308:	b	129c <build_tree+0x5b0>
    130c:	ldrh	w10, [x0, #2976]
    1310:	lsl	w10, w10, #1
    1314:	strh	w10, [sp, #2]
    1318:	ldrh	w11, [x0, #2978]
    131c:	add	w10, w10, w11
    1320:	lsl	w10, w10, #1
    1324:	strh	w10, [sp, #4]
    1328:	ldrh	w11, [x0, #2980]
    132c:	add	w10, w10, w11
    1330:	lsl	w10, w10, #1
    1334:	strh	w10, [sp, #6]
    1338:	ldrh	w11, [x0, #2982]
    133c:	add	w10, w10, w11
    1340:	lsl	w10, w10, #1
    1344:	strh	w10, [sp, #8]
    1348:	ldrh	w11, [x0, #2984]
    134c:	add	w10, w10, w11
    1350:	lsl	w10, w10, #1
    1354:	strh	w10, [sp, #10]
    1358:	ldrh	w11, [x0, #2986]
    135c:	add	w10, w10, w11
    1360:	lsl	w10, w10, #1
    1364:	strh	w10, [sp, #12]
    1368:	ldrh	w11, [x0, #2988]
    136c:	add	w10, w10, w11
    1370:	lsl	w10, w10, #1
    1374:	strh	w10, [sp, #14]
    1378:	ldrh	w11, [x0, #2990]
    137c:	add	w10, w10, w11
    1380:	lsl	w10, w10, #1
    1384:	strh	w10, [sp, #16]
    1388:	ldrh	w11, [x0, #2992]
    138c:	add	w10, w10, w11
    1390:	lsl	w10, w10, #1
    1394:	strh	w10, [sp, #18]
    1398:	ldrh	w11, [x0, #2994]
    139c:	add	w10, w10, w11
    13a0:	lsl	w10, w10, #1
    13a4:	strh	w10, [sp, #20]
    13a8:	ldrh	w11, [x0, #2996]
    13ac:	add	w10, w10, w11
    13b0:	lsl	w10, w10, #1
    13b4:	strh	w10, [sp, #22]
    13b8:	ldrh	w11, [x0, #2998]
    13bc:	add	w10, w10, w11
    13c0:	lsl	w10, w10, #1
    13c4:	strh	w10, [sp, #24]
    13c8:	ldrh	w11, [x0, #3000]
    13cc:	add	w10, w11, w10
    13d0:	lsl	w10, w10, #1
    13d4:	strh	w10, [sp, #26]
    13d8:	ldrh	w11, [x0, #3002]
    13dc:	add	w10, w11, w10
    13e0:	lsl	w10, w10, #1
    13e4:	strh	w10, [sp, #28]
    13e8:	ldrh	w11, [x0, #3004]
    13ec:	add	w10, w10, w11
    13f0:	lsl	w10, w10, #1
    13f4:	strh	w10, [sp, #30]
    13f8:	tbnz	w9, #31, 1464 <build_tree+0x778>
    13fc:	mov	x10, xzr
    1400:	add	w9, w9, #0x1
    1404:	mov	x11, sp
    1408:	b	1418 <build_tree+0x72c>
    140c:	add	x10, x10, #0x1
    1410:	cmp	x10, x9
    1414:	b.eq	1464 <build_tree+0x778>  // b.none
    1418:	add	x12, x8, x10, lsl #2
    141c:	ldrh	w14, [x12, #2]
    1420:	cbz	w14, 140c <build_tree+0x720>
    1424:	lsl	x15, x14, #1
    1428:	ldrh	w13, [x11, x15]
    142c:	mov	w12, wzr
    1430:	add	w14, w14, #0x1
    1434:	add	w16, w13, #0x1
    1438:	strh	w16, [x11, x15]
    143c:	and	w15, w13, #0x1
    1440:	sub	w14, w14, #0x1
    1444:	orr	w15, w12, w15
    1448:	lsr	w13, w13, #1
    144c:	cmp	w14, #0x1
    1450:	lsl	w12, w15, #1
    1454:	b.gt	143c <build_tree+0x750>
    1458:	lsl	x12, x10, #2
    145c:	strh	w15, [x8, x12]
    1460:	b	140c <build_tree+0x720>
    1464:	add	sp, sp, #0x20
    1468:	ret
    146c:	mov	w16, wzr
    1470:	mov	w9, #0xffffffff            	// #-1
    1474:	mov	w13, #0x1                   	// #1
    1478:	mov	w14, #0x14bc                	// #5308
    147c:	mov	w15, w9
    1480:	b	1494 <build_tree+0x7a8>
    1484:	ldr	w16, [x11]
    1488:	mov	w15, w9
    148c:	cmp	w16, #0x2
    1490:	b.ge	d7c <build_tree+0x90>  // b.tcont
    1494:	sxtw	x9, w16
    1498:	cmp	w15, #0x2
    149c:	add	x9, x9, #0x1
    14a0:	csinc	w17, wzr, w15, ge  // ge = tcont
    14a4:	str	w9, [x0, #5300]
    14a8:	add	x9, x0, x9, lsl #2
    14ac:	str	w17, [x9, #3008]
    14b0:	sxtw	x16, w17
    14b4:	sbfiz	x9, x17, #2, #32
    14b8:	strh	w13, [x8, x9]
    14bc:	add	x9, x0, x16
    14c0:	strb	wzr, [x9, x14]
    14c4:	ldr	x17, [x0, #5912]
    14c8:	cinc	w9, w15, lt  // lt = tstop
    14cc:	sub	x15, x17, #0x1
    14d0:	str	x15, [x0, #5912]
    14d4:	cbz	x12, 1484 <build_tree+0x798>
    14d8:	add	x15, x12, x16, lsl #2
    14dc:	ldrh	w15, [x15, #2]
    14e0:	ldr	x16, [x0, #5920]
    14e4:	sub	x15, x16, x15
    14e8:	str	x15, [x0, #5920]
    14ec:	b	1484 <build_tree+0x798>

00000000000014f0 <compress_block>:
    14f0:	str	x21, [sp, #-32]!
    14f4:	stp	x20, x19, [sp, #16]
    14f8:	ldr	w8, [x0, #5900]
    14fc:	cbz	w8, 1810 <compress_block+0x320>
    1500:	mov	w9, #0x1730                	// #5936
    1504:	adrp	x10, 200 <_tr_stored_block+0xb8>
    1508:	adrp	x11, 0 <_tr_init>
    150c:	adrp	x12, 0 <_tr_init>
    1510:	adrp	x13, 0 <_tr_init>
    1514:	adrp	x14, 0 <_tr_init>
    1518:	adrp	x16, 0 <_tr_init>
    151c:	mov	x17, xzr
    1520:	mov	w8, #0x10                  	// #16
    1524:	add	x10, x10, #0x0
    1528:	add	x11, x11, #0x0
    152c:	add	x12, x12, #0x0
    1530:	add	x13, x13, #0x0
    1534:	add	x14, x14, #0x0
    1538:	add	x15, x0, x9
    153c:	add	x16, x16, #0x0
    1540:	b	1558 <compress_block+0x68>
    1544:	add	w3, w5, w3
    1548:	str	w3, [x0, #5940]
    154c:	ldr	w4, [x0, #5900]
    1550:	cmp	x17, x4
    1554:	b.cs	1818 <compress_block+0x328>  // b.hs, b.nlast
    1558:	ldr	x18, [x0, #5904]
    155c:	ldr	x3, [x0, #5888]
    1560:	ldrh	w18, [x18, x17, lsl #1]
    1564:	ldrb	w5, [x3, x17]
    1568:	add	x17, x17, #0x1
    156c:	cbz	w18, 15f4 <compress_block+0x104>
    1570:	ldrb	w6, [x10, x5]
    1574:	mov	w3, #0x400                 	// #1024
    1578:	ldr	w19, [x0, #5940]
    157c:	bfi	x3, x6, #2, #8
    1580:	add	x3, x3, x1
    1584:	ldrh	w4, [x3, #6]
    1588:	ldrh	w7, [x3, #4]
    158c:	ldrh	w3, [x0, #5936]
    1590:	sub	w20, w8, w4
    1594:	lsl	w21, w7, w19
    1598:	orr	w3, w3, w21
    159c:	cmp	w19, w20
    15a0:	strh	w3, [x0, #5936]
    15a4:	b.le	1668 <compress_block+0x178>
    15a8:	ldr	x19, [x0, #40]
    15ac:	ldr	x20, [x0, #16]
    15b0:	add	x21, x19, #0x1
    15b4:	str	x21, [x0, #40]
    15b8:	strb	w3, [x20, x19]
    15bc:	add	x21, x0, x9
    15c0:	ldr	x3, [x0, #40]
    15c4:	ldrb	w19, [x21, #1]
    15c8:	ldr	x20, [x0, #16]
    15cc:	add	x21, x3, #0x1
    15d0:	str	x21, [x0, #40]
    15d4:	strb	w19, [x20, x3]
    15d8:	ldr	w3, [x0, #5940]
    15dc:	sub	w19, w8, w3
    15e0:	add	w4, w4, w3
    15e4:	lsr	w3, w7, w19
    15e8:	strh	w3, [x0, #5936]
    15ec:	sub	w4, w4, #0x10
    15f0:	b	166c <compress_block+0x17c>
    15f4:	add	x18, x1, x5, lsl #2
    15f8:	ldr	w5, [x0, #5940]
    15fc:	ldrh	w3, [x18, #2]
    1600:	ldrh	w4, [x18]
    1604:	ldrh	w18, [x0, #5936]
    1608:	sub	w6, w8, w3
    160c:	lsl	w7, w4, w5
    1610:	orr	w18, w18, w7
    1614:	cmp	w5, w6
    1618:	strh	w18, [x0, #5936]
    161c:	b.le	1544 <compress_block+0x54>
    1620:	ldr	x5, [x0, #40]
    1624:	ldr	x6, [x0, #16]
    1628:	add	x7, x5, #0x1
    162c:	str	x7, [x0, #40]
    1630:	strb	w18, [x6, x5]
    1634:	ldr	x18, [x0, #40]
    1638:	ldrb	w5, [x15, #1]
    163c:	ldr	x6, [x0, #16]
    1640:	add	x7, x18, #0x1
    1644:	str	x7, [x0, #40]
    1648:	strb	w5, [x6, x18]
    164c:	ldr	w18, [x0, #5940]
    1650:	sub	w5, w8, w18
    1654:	add	w3, w3, w18
    1658:	lsr	w18, w4, w5
    165c:	strh	w18, [x0, #5936]
    1660:	sub	w3, w3, #0x10
    1664:	b	1548 <compress_block+0x58>
    1668:	add	w4, w19, w4
    166c:	sub	x7, x6, #0x8
    1670:	cmp	x7, #0x13
    1674:	str	w4, [x0, #5940]
    1678:	b.hi	16f8 <compress_block+0x208>  // b.pmore
    167c:	ldr	w7, [x12, x6, lsl #2]
    1680:	ldr	w6, [x11, x6, lsl #2]
    1684:	sub	w5, w5, w7
    1688:	and	w5, w5, #0xffff
    168c:	sub	w7, w8, w6
    1690:	lsl	w19, w5, w4
    1694:	orr	w3, w3, w19
    1698:	cmp	w4, w7
    169c:	strh	w3, [x0, #5936]
    16a0:	b.le	16f0 <compress_block+0x200>
    16a4:	ldr	x4, [x0, #40]
    16a8:	ldr	x7, [x0, #16]
    16ac:	add	x19, x4, #0x1
    16b0:	str	x19, [x0, #40]
    16b4:	strb	w3, [x7, x4]
    16b8:	add	x19, x0, x9
    16bc:	ldr	x3, [x0, #40]
    16c0:	ldrb	w4, [x19, #1]
    16c4:	ldr	x7, [x0, #16]
    16c8:	add	x19, x3, #0x1
    16cc:	str	x19, [x0, #40]
    16d0:	strb	w4, [x7, x3]
    16d4:	ldr	w3, [x0, #5940]
    16d8:	sub	w4, w8, w3
    16dc:	add	w6, w6, w3
    16e0:	lsr	w3, w5, w4
    16e4:	strh	w3, [x0, #5936]
    16e8:	sub	w4, w6, #0x10
    16ec:	b	16f4 <compress_block+0x204>
    16f0:	add	w4, w6, w4
    16f4:	str	w4, [x0, #5940]
    16f8:	sub	w5, w18, #0x1
    16fc:	lsr	w18, w5, #7
    1700:	cmp	w5, #0x100
    1704:	add	w18, w18, #0x100
    1708:	csel	w18, w5, w18, cc  // cc = lo, ul, last
    170c:	ldrb	w6, [x13, w18, uxtw]
    1710:	add	x18, x2, x6, lsl #2
    1714:	ldrh	w7, [x18, #2]
    1718:	ldrh	w19, [x18]
    171c:	sub	w20, w8, w7
    1720:	lsl	w18, w19, w4
    1724:	orr	w18, w3, w18
    1728:	cmp	w4, w20
    172c:	strh	w18, [x0, #5936]
    1730:	b.le	1780 <compress_block+0x290>
    1734:	ldr	x3, [x0, #40]
    1738:	ldr	x4, [x0, #16]
    173c:	add	x20, x3, #0x1
    1740:	str	x20, [x0, #40]
    1744:	strb	w18, [x4, x3]
    1748:	add	x20, x0, x9
    174c:	ldr	x18, [x0, #40]
    1750:	ldrb	w3, [x20, #1]
    1754:	ldr	x4, [x0, #16]
    1758:	add	x20, x18, #0x1
    175c:	str	x20, [x0, #40]
    1760:	strb	w3, [x4, x18]
    1764:	ldr	w18, [x0, #5940]
    1768:	sub	w3, w8, w18
    176c:	add	w4, w7, w18
    1770:	lsr	w18, w19, w3
    1774:	strh	w18, [x0, #5936]
    1778:	sub	w3, w4, #0x10
    177c:	b	1784 <compress_block+0x294>
    1780:	add	w3, w4, w7
    1784:	sub	x4, x6, #0x4
    1788:	cmp	x4, #0x19
    178c:	str	w3, [x0, #5940]
    1790:	b.hi	154c <compress_block+0x5c>  // b.pmore
    1794:	ldr	w7, [x16, x6, lsl #2]
    1798:	ldr	w4, [x14, x6, lsl #2]
    179c:	sub	w5, w5, w7
    17a0:	and	w5, w5, #0xffff
    17a4:	sub	w6, w8, w4
    17a8:	lsl	w7, w5, w3
    17ac:	orr	w18, w18, w7
    17b0:	cmp	w3, w6
    17b4:	strh	w18, [x0, #5936]
    17b8:	b.le	1808 <compress_block+0x318>
    17bc:	ldr	x3, [x0, #40]
    17c0:	ldr	x6, [x0, #16]
    17c4:	add	x7, x3, #0x1
    17c8:	str	x7, [x0, #40]
    17cc:	strb	w18, [x6, x3]
    17d0:	add	x7, x0, x9
    17d4:	ldr	x18, [x0, #40]
    17d8:	ldrb	w3, [x7, #1]
    17dc:	ldr	x6, [x0, #16]
    17e0:	add	x7, x18, #0x1
    17e4:	str	x7, [x0, #40]
    17e8:	strb	w3, [x6, x18]
    17ec:	ldr	w18, [x0, #5940]
    17f0:	sub	w3, w8, w18
    17f4:	add	w4, w4, w18
    17f8:	lsr	w18, w5, w3
    17fc:	strh	w18, [x0, #5936]
    1800:	sub	w3, w4, #0x10
    1804:	b	1548 <compress_block+0x58>
    1808:	add	w3, w4, w3
    180c:	b	1548 <compress_block+0x58>
    1810:	ldr	w3, [x0, #5940]
    1814:	ldrh	w18, [x0, #5936]
    1818:	ldrh	w8, [x1, #1026]
    181c:	ldrh	w9, [x1, #1024]
    1820:	mov	w10, #0x10                  	// #16
    1824:	sub	w12, w10, w8
    1828:	lsl	w11, w9, w3
    182c:	orr	w11, w18, w11
    1830:	cmp	w3, w12
    1834:	strh	w11, [x0, #5936]
    1838:	b.le	188c <compress_block+0x39c>
    183c:	ldr	x12, [x0, #40]
    1840:	ldr	x13, [x0, #16]
    1844:	add	x14, x12, #0x1
    1848:	str	x14, [x0, #40]
    184c:	mov	w14, #0x1730                	// #5936
    1850:	strb	w11, [x13, x12]
    1854:	add	x14, x0, x14
    1858:	ldr	x11, [x0, #40]
    185c:	ldrb	w12, [x14, #1]
    1860:	ldr	x13, [x0, #16]
    1864:	add	x14, x11, #0x1
    1868:	str	x14, [x0, #40]
    186c:	strb	w12, [x13, x11]
    1870:	ldr	w11, [x0, #5940]
    1874:	sub	w10, w10, w11
    1878:	add	w8, w8, w11
    187c:	lsr	w9, w9, w10
    1880:	strh	w9, [x0, #5936]
    1884:	sub	w8, w8, #0x10
    1888:	b	1890 <compress_block+0x3a0>
    188c:	add	w8, w3, w8
    1890:	str	w8, [x0, #5940]
    1894:	ldp	x20, x19, [sp, #16]
    1898:	ldr	x21, [sp], #32
    189c:	ret

00000000000018a0 <_tr_tally>:
    18a0:	ldr	x8, [x0, #5904]
    18a4:	ldr	w9, [x0, #5900]
    18a8:	strh	w1, [x8, x9, lsl #1]
    18ac:	ldr	x8, [x0, #5888]
    18b0:	add	w10, w9, #0x1
    18b4:	str	w10, [x0, #5900]
    18b8:	strb	w2, [x8, x9]
    18bc:	cbz	w1, 191c <_tr_tally+0x7c>
    18c0:	ldr	w8, [x0, #5928]
    18c4:	adrp	x10, 200 <_tr_stored_block+0xb8>
    18c8:	add	x10, x10, #0x0
    18cc:	ldrb	w10, [x10, w2, uxtw]
    18d0:	sub	w9, w1, #0x1
    18d4:	lsr	w11, w9, #7
    18d8:	add	w8, w8, #0x1
    18dc:	cmp	w9, #0x100
    18e0:	add	w11, w11, #0x100
    18e4:	str	w8, [x0, #5928]
    18e8:	mov	w8, #0x400                 	// #1024
    18ec:	csel	w9, w9, w11, cc  // cc = lo, ul, last
    18f0:	adrp	x11, 0 <_tr_init>
    18f4:	bfi	x8, x10, #2, #8
    18f8:	add	x11, x11, #0x0
    18fc:	add	x8, x8, x0
    1900:	ldrb	w9, [x11, w9, uxtw]
    1904:	ldrh	w10, [x8, #216]
    1908:	add	x9, x0, x9, lsl #2
    190c:	add	w10, w10, #0x1
    1910:	strh	w10, [x8, #216]
    1914:	add	x8, x9, #0x9c8
    1918:	b	1924 <_tr_tally+0x84>
    191c:	add	x8, x0, w2, uxtw #2
    1920:	add	x8, x8, #0xd4
    1924:	ldrh	w9, [x8]
    1928:	add	w9, w9, #0x1
    192c:	strh	w9, [x8]
    1930:	ldr	w8, [x0, #5896]
    1934:	ldr	w9, [x0, #5900]
    1938:	sub	w8, w8, #0x1
    193c:	cmp	w9, w8
    1940:	cset	w0, eq  // eq = none
    1944:	ret

0000000000001948 <send_tree>:
    1948:	stp	x22, x21, [sp, #-32]!
    194c:	stp	x20, x19, [sp, #16]
    1950:	tbnz	w2, #31, 1de8 <send_tree+0x4a0>
    1954:	ldrh	w9, [x1, #2]
    1958:	mov	w18, #0x7                   	// #7
    195c:	mov	w4, #0x8a                  	// #138
    1960:	mov	w10, #0x3                   	// #3
    1964:	mov	w13, #0x1730                	// #5936
    1968:	cmp	w9, #0x0
    196c:	mov	x8, xzr
    1970:	mov	w3, wzr
    1974:	add	w11, w2, #0x1
    1978:	mov	w7, #0xffffffff            	// #-1
    197c:	mov	w12, #0x10                  	// #16
    1980:	mov	w14, #0x6                   	// #6
    1984:	mov	w15, #0xfffe                	// #65534
    1988:	mov	w16, #0xfff6                	// #65526
    198c:	add	x17, x0, x13
    1990:	csel	w6, w4, w18, eq  // eq = none
    1994:	cinc	w5, w10, ne  // ne = any
    1998:	mov	w18, #0xfffd                	// #65533
    199c:	b	19b4 <send_tree+0x6c>
    19a0:	mov	w2, w7
    19a4:	cmp	x8, x11
    19a8:	mov	w7, w2
    19ac:	mov	w3, w4
    19b0:	b.eq	1de8 <send_tree+0x4a0>  // b.none
    19b4:	add	x8, x8, #0x1
    19b8:	mov	w2, w9
    19bc:	add	x9, x1, x8, lsl #2
    19c0:	ldrh	w9, [x9, #2]
    19c4:	add	w4, w3, #0x1
    19c8:	cmp	w4, w6
    19cc:	b.ge	19d8 <send_tree+0x90>  // b.tcont
    19d0:	cmp	w2, w9
    19d4:	b.eq	19a0 <send_tree+0x58>  // b.none
    19d8:	cmp	w4, w5
    19dc:	b.ge	1a70 <send_tree+0x128>  // b.tcont
    19e0:	ldr	w6, [x0, #5940]
    19e4:	add	x5, x0, w2, uxtw #2
    19e8:	add	x3, x5, #0xabe
    19ec:	add	x5, x5, #0xabc
    19f0:	b	1a04 <send_tree+0xbc>
    19f4:	add	w6, w6, w7
    19f8:	subs	w4, w4, #0x1
    19fc:	str	w6, [x0, #5940]
    1a00:	b.eq	1dc4 <send_tree+0x47c>  // b.none
    1a04:	ldrh	w7, [x3]
    1a08:	ldrh	w19, [x5]
    1a0c:	ldrh	w20, [x0, #5936]
    1a10:	sub	w21, w12, w7
    1a14:	lsl	w22, w19, w6
    1a18:	orr	w20, w20, w22
    1a1c:	cmp	w6, w21
    1a20:	strh	w20, [x0, #5936]
    1a24:	b.le	19f4 <send_tree+0xac>
    1a28:	ldr	x6, [x0, #40]
    1a2c:	ldr	x21, [x0, #16]
    1a30:	add	x22, x6, #0x1
    1a34:	str	x22, [x0, #40]
    1a38:	strb	w20, [x21, x6]
    1a3c:	ldr	x6, [x0, #40]
    1a40:	ldrb	w20, [x17, #1]
    1a44:	ldr	x21, [x0, #16]
    1a48:	add	x22, x6, #0x1
    1a4c:	str	x22, [x0, #40]
    1a50:	strb	w20, [x21, x6]
    1a54:	ldr	w6, [x0, #5940]
    1a58:	sub	w20, w12, w6
    1a5c:	add	w6, w7, w6
    1a60:	lsr	w7, w19, w20
    1a64:	strh	w7, [x0, #5936]
    1a68:	sub	w6, w6, #0x10
    1a6c:	b	19f8 <send_tree+0xb0>
    1a70:	cbz	w2, 1a88 <send_tree+0x140>
    1a74:	cmp	w2, w7
    1a78:	b.ne	1b04 <send_tree+0x1bc>  // b.any
    1a7c:	ldr	w5, [x0, #5940]
    1a80:	mov	w3, w4
    1a84:	b	1bf8 <send_tree+0x2b0>
    1a88:	cmp	w3, #0x9
    1a8c:	b.gt	1b7c <send_tree+0x234>
    1a90:	ldrh	w4, [x0, #2818]
    1a94:	ldr	w7, [x0, #5940]
    1a98:	ldrh	w6, [x0, #2816]
    1a9c:	ldrh	w5, [x0, #5936]
    1aa0:	sub	w19, w12, w4
    1aa4:	cmp	w7, w19
    1aa8:	lsl	w20, w6, w7
    1aac:	orr	w5, w5, w20
    1ab0:	strh	w5, [x0, #5936]
    1ab4:	b.le	1cdc <send_tree+0x394>
    1ab8:	ldr	x7, [x0, #40]
    1abc:	ldr	x19, [x0, #16]
    1ac0:	add	x20, x7, #0x1
    1ac4:	str	x20, [x0, #40]
    1ac8:	strb	w5, [x19, x7]
    1acc:	add	x20, x0, x13
    1ad0:	ldr	x5, [x0, #40]
    1ad4:	ldrb	w7, [x20, #1]
    1ad8:	ldr	x19, [x0, #16]
    1adc:	add	x20, x5, #0x1
    1ae0:	str	x20, [x0, #40]
    1ae4:	strb	w7, [x19, x5]
    1ae8:	ldr	w5, [x0, #5940]
    1aec:	sub	w7, w12, w5
    1af0:	add	w4, w4, w5
    1af4:	lsr	w5, w6, w7
    1af8:	strh	w5, [x0, #5936]
    1afc:	sub	w4, w4, #0x10
    1b00:	b	1ce0 <send_tree+0x398>
    1b04:	add	x5, x0, w2, uxtw #2
    1b08:	ldr	w7, [x0, #5940]
    1b0c:	ldrh	w4, [x5, #2750]
    1b10:	ldrh	w5, [x5, #2748]
    1b14:	ldrh	w6, [x0, #5936]
    1b18:	sub	w19, w12, w4
    1b1c:	lsl	w20, w5, w7
    1b20:	orr	w6, w6, w20
    1b24:	cmp	w7, w19
    1b28:	strh	w6, [x0, #5936]
    1b2c:	b.le	1bf0 <send_tree+0x2a8>
    1b30:	ldr	x7, [x0, #40]
    1b34:	ldr	x19, [x0, #16]
    1b38:	add	x20, x7, #0x1
    1b3c:	str	x20, [x0, #40]
    1b40:	strb	w6, [x19, x7]
    1b44:	add	x20, x0, x13
    1b48:	ldr	x6, [x0, #40]
    1b4c:	ldrb	w7, [x20, #1]
    1b50:	ldr	x19, [x0, #16]
    1b54:	add	x20, x6, #0x1
    1b58:	str	x20, [x0, #40]
    1b5c:	strb	w7, [x19, x6]
    1b60:	ldr	w6, [x0, #5940]
    1b64:	sub	w7, w12, w6
    1b68:	add	w4, w4, w6
    1b6c:	lsr	w5, w5, w7
    1b70:	strh	w5, [x0, #5936]
    1b74:	sub	w5, w4, #0x10
    1b78:	b	1bf4 <send_tree+0x2ac>
    1b7c:	ldrh	w4, [x0, #2822]
    1b80:	ldr	w7, [x0, #5940]
    1b84:	ldrh	w6, [x0, #2820]
    1b88:	ldrh	w5, [x0, #5936]
    1b8c:	sub	w19, w12, w4
    1b90:	cmp	w7, w19
    1b94:	lsl	w20, w6, w7
    1b98:	orr	w5, w5, w20
    1b9c:	strh	w5, [x0, #5936]
    1ba0:	b.le	1d48 <send_tree+0x400>
    1ba4:	ldr	x7, [x0, #40]
    1ba8:	ldr	x19, [x0, #16]
    1bac:	add	x20, x7, #0x1
    1bb0:	str	x20, [x0, #40]
    1bb4:	strb	w5, [x19, x7]
    1bb8:	add	x20, x0, x13
    1bbc:	ldr	x5, [x0, #40]
    1bc0:	ldrb	w7, [x20, #1]
    1bc4:	ldr	x19, [x0, #16]
    1bc8:	add	x20, x5, #0x1
    1bcc:	str	x20, [x0, #40]
    1bd0:	strb	w7, [x19, x5]
    1bd4:	ldr	w5, [x0, #5940]
    1bd8:	sub	w7, w12, w5
    1bdc:	add	w4, w4, w5
    1be0:	lsr	w5, w6, w7
    1be4:	strh	w5, [x0, #5936]
    1be8:	sub	w4, w4, #0x10
    1bec:	b	1d4c <send_tree+0x404>
    1bf0:	add	w5, w7, w4
    1bf4:	str	w5, [x0, #5940]
    1bf8:	ldrh	w6, [x0, #2814]
    1bfc:	ldrh	w7, [x0, #2812]
    1c00:	ldrh	w4, [x0, #5936]
    1c04:	sub	w19, w12, w6
    1c08:	lsl	w20, w7, w5
    1c0c:	orr	w4, w4, w20
    1c10:	cmp	w5, w19
    1c14:	strh	w4, [x0, #5936]
    1c18:	b.le	1c68 <send_tree+0x320>
    1c1c:	ldr	x5, [x0, #40]
    1c20:	ldr	x19, [x0, #16]
    1c24:	add	x20, x5, #0x1
    1c28:	str	x20, [x0, #40]
    1c2c:	strb	w4, [x19, x5]
    1c30:	add	x20, x0, x13
    1c34:	ldr	x4, [x0, #40]
    1c38:	ldrb	w5, [x20, #1]
    1c3c:	ldr	x19, [x0, #16]
    1c40:	add	x20, x4, #0x1
    1c44:	str	x20, [x0, #40]
    1c48:	strb	w5, [x19, x4]
    1c4c:	ldr	w4, [x0, #5940]
    1c50:	sub	w5, w12, w4
    1c54:	add	w6, w6, w4
    1c58:	lsr	w4, w7, w5
    1c5c:	strh	w4, [x0, #5936]
    1c60:	sub	w5, w6, #0x10
    1c64:	b	1c6c <send_tree+0x324>
    1c68:	add	w5, w5, w6
    1c6c:	add	w3, w3, w18
    1c70:	and	w3, w3, #0xffff
    1c74:	lsl	w6, w3, w5
    1c78:	orr	w4, w4, w6
    1c7c:	cmp	w5, #0xf
    1c80:	str	w5, [x0, #5940]
    1c84:	strh	w4, [x0, #5936]
    1c88:	b.lt	1cd4 <send_tree+0x38c>  // b.tstop
    1c8c:	ldr	x5, [x0, #40]
    1c90:	ldr	x6, [x0, #16]
    1c94:	add	x7, x5, #0x1
    1c98:	str	x7, [x0, #40]
    1c9c:	strb	w4, [x6, x5]
    1ca0:	add	x7, x0, x13
    1ca4:	ldr	x4, [x0, #40]
    1ca8:	ldrb	w5, [x7, #1]
    1cac:	ldr	x6, [x0, #16]
    1cb0:	add	x7, x4, #0x1
    1cb4:	str	x7, [x0, #40]
    1cb8:	strb	w5, [x6, x4]
    1cbc:	ldr	w4, [x0, #5940]
    1cc0:	sub	w5, w12, w4
    1cc4:	lsr	w3, w3, w5
    1cc8:	strh	w3, [x0, #5936]
    1ccc:	sub	w3, w4, #0xe
    1cd0:	b	1dc0 <send_tree+0x478>
    1cd4:	add	w3, w5, #0x2
    1cd8:	b	1dc0 <send_tree+0x478>
    1cdc:	add	w4, w7, w4
    1ce0:	add	w3, w3, w15
    1ce4:	and	w3, w3, #0xffff
    1ce8:	lsl	w6, w3, w4
    1cec:	orr	w5, w5, w6
    1cf0:	cmp	w4, #0xe
    1cf4:	str	w4, [x0, #5940]
    1cf8:	strh	w5, [x0, #5936]
    1cfc:	b.lt	1db4 <send_tree+0x46c>  // b.tstop
    1d00:	ldr	x4, [x0, #40]
    1d04:	ldr	x6, [x0, #16]
    1d08:	add	x7, x4, #0x1
    1d0c:	str	x7, [x0, #40]
    1d10:	strb	w5, [x6, x4]
    1d14:	add	x7, x0, x13
    1d18:	ldr	x4, [x0, #40]
    1d1c:	ldrb	w5, [x7, #1]
    1d20:	ldr	x6, [x0, #16]
    1d24:	add	x7, x4, #0x1
    1d28:	str	x7, [x0, #40]
    1d2c:	strb	w5, [x6, x4]
    1d30:	ldr	w4, [x0, #5940]
    1d34:	sub	w5, w12, w4
    1d38:	lsr	w3, w3, w5
    1d3c:	strh	w3, [x0, #5936]
    1d40:	sub	w3, w4, #0xd
    1d44:	b	1dc0 <send_tree+0x478>
    1d48:	add	w4, w7, w4
    1d4c:	add	w3, w3, w16
    1d50:	and	w3, w3, #0xffff
    1d54:	lsl	w6, w3, w4
    1d58:	orr	w5, w5, w6
    1d5c:	cmp	w4, #0xa
    1d60:	str	w4, [x0, #5940]
    1d64:	strh	w5, [x0, #5936]
    1d68:	b.lt	1dbc <send_tree+0x474>  // b.tstop
    1d6c:	ldr	x4, [x0, #40]
    1d70:	ldr	x6, [x0, #16]
    1d74:	add	x7, x4, #0x1
    1d78:	str	x7, [x0, #40]
    1d7c:	strb	w5, [x6, x4]
    1d80:	add	x7, x0, x13
    1d84:	ldr	x4, [x0, #40]
    1d88:	ldrb	w5, [x7, #1]
    1d8c:	ldr	x6, [x0, #16]
    1d90:	add	x7, x4, #0x1
    1d94:	str	x7, [x0, #40]
    1d98:	strb	w5, [x6, x4]
    1d9c:	ldr	w4, [x0, #5940]
    1da0:	sub	w5, w12, w4
    1da4:	lsr	w3, w3, w5
    1da8:	strh	w3, [x0, #5936]
    1dac:	sub	w3, w4, #0x9
    1db0:	b	1dc0 <send_tree+0x478>
    1db4:	add	w3, w4, #0x3
    1db8:	b	1dc0 <send_tree+0x478>
    1dbc:	add	w3, w4, #0x7
    1dc0:	str	w3, [x0, #5940]
    1dc4:	mov	w4, wzr
    1dc8:	cbz	w9, 1ddc <send_tree+0x494>
    1dcc:	cmp	w2, w9
    1dd0:	cinc	w5, w10, ne  // ne = any
    1dd4:	cinc	w6, w14, ne  // ne = any
    1dd8:	b	19a4 <send_tree+0x5c>
    1ddc:	mov	w6, #0x8a                  	// #138
    1de0:	mov	w5, #0x3                   	// #3
    1de4:	b	19a4 <send_tree+0x5c>
    1de8:	ldp	x20, x19, [sp, #16]
    1dec:	ldp	x22, x21, [sp], #32
    1df0:	ret

zutil.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <zlibVersion>:
   0:	adrp	x0, 0 <zlibVersion>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <zlibCompileFlags>:
   c:	mov	w0, #0xa9                  	// #169
  10:	ret

0000000000000014 <zError>:
  14:	mov	w8, #0x2                   	// #2
  18:	adrp	x9, 0 <zlibVersion>
  1c:	sub	x8, x8, w0, sxtw
  20:	add	x9, x9, #0x0
  24:	ldr	x0, [x9, x8, lsl #3]
  28:	ret

000000000000002c <zcalloc>:
  2c:	mul	w0, w2, w1
  30:	b	0 <malloc>

0000000000000034 <zcfree>:
  34:	mov	x0, x1
  38:	b	0 <free>

compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <compress2>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x29, x30, [sp, #112]
   8:	stp	x22, x21, [sp, #144]
   c:	stp	x20, x19, [sp, #160]
  10:	str	x23, [sp, #128]
  14:	ldr	x23, [x1]
  18:	mov	x21, x2
  1c:	adrp	x2, 0 <compress2>
  20:	mov	x20, x3
  24:	mov	x19, x1
  28:	mov	x22, x0
  2c:	str	xzr, [x1]
  30:	add	x2, x2, #0x0
  34:	mov	x0, sp
  38:	mov	w3, #0x70                  	// #112
  3c:	mov	w1, w4
  40:	add	x29, sp, #0x70
  44:	stp	xzr, xzr, [sp, #64]
  48:	str	xzr, [sp, #80]
  4c:	bl	0 <deflateInit_>
  50:	cbnz	w0, e0 <compress2+0xe0>
  54:	mov	w8, wzr
  58:	str	x22, [sp, #24]
  5c:	str	wzr, [sp, #32]
  60:	str	x21, [sp]
  64:	str	wzr, [sp, #8]
  68:	mov	w22, #0xffffffff            	// #-1
  6c:	cbz	w8, 98 <compress2+0x98>
  70:	ldr	w8, [sp, #8]
  74:	cbz	w8, b0 <compress2+0xb0>
  78:	cmp	x20, #0x0
  7c:	cset	w8, eq  // eq = none
  80:	lsl	w1, w8, #2
  84:	mov	x0, sp
  88:	bl	0 <deflate>
  8c:	cbnz	w0, c4 <compress2+0xc4>
  90:	ldr	w8, [sp, #32]
  94:	cbnz	w8, 70 <compress2+0x70>
  98:	cmp	x23, x22
  9c:	csel	x8, x23, x22, cc  // cc = lo, ul, last
  a0:	sub	x23, x23, x8
  a4:	str	w8, [sp, #32]
  a8:	ldr	w8, [sp, #8]
  ac:	cbnz	w8, 78 <compress2+0x78>
  b0:	cmp	x20, x22
  b4:	csel	x8, x20, x22, cc  // cc = lo, ul, last
  b8:	sub	x20, x20, x8
  bc:	str	w8, [sp, #8]
  c0:	b	78 <compress2+0x78>
  c4:	ldr	x8, [sp, #40]
  c8:	mov	w21, w0
  cc:	mov	x0, sp
  d0:	str	x8, [x19]
  d4:	bl	0 <deflateEnd>
  d8:	cmp	w21, #0x1
  dc:	csel	w0, wzr, w21, eq  // eq = none
  e0:	ldp	x20, x19, [sp, #160]
  e4:	ldp	x22, x21, [sp, #144]
  e8:	ldr	x23, [sp, #128]
  ec:	ldp	x29, x30, [sp, #112]
  f0:	add	sp, sp, #0xb0
  f4:	ret

00000000000000f8 <compress>:
  f8:	mov	w4, #0xffffffff            	// #-1
  fc:	b	0 <compress2>

0000000000000100 <compressBound>:
 100:	add	x8, x0, x0, lsr #12
 104:	add	x8, x8, x0, lsr #14
 108:	add	x8, x8, x0, lsr #25
 10c:	add	x0, x8, #0xd
 110:	ret

uncompr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <uncompress2>:
   0:	sub	sp, sp, #0xc0
   4:	stp	x29, x30, [sp, #112]
   8:	stp	x24, x23, [sp, #144]
   c:	stp	x22, x21, [sp, #160]
  10:	stp	x20, x19, [sp, #176]
  14:	ldr	x23, [x1]
  18:	ldr	x24, [x3]
  1c:	mov	x20, x3
  20:	mov	x19, x1
  24:	str	x25, [sp, #128]
  28:	add	x29, sp, #0x70
  2c:	cbz	x23, 3c <uncompress2+0x3c>
  30:	mov	x21, x0
  34:	str	xzr, [x19]
  38:	b	44 <uncompress2+0x44>
  3c:	add	x21, x29, #0x1c
  40:	mov	w23, #0x1                   	// #1
  44:	adrp	x1, 0 <uncompress2>
  48:	str	x2, [sp]
  4c:	add	x1, x1, #0x0
  50:	mov	x0, sp
  54:	mov	w2, #0x70                  	// #112
  58:	str	wzr, [sp, #8]
  5c:	stp	xzr, xzr, [sp, #72]
  60:	str	xzr, [sp, #64]
  64:	bl	0 <inflateInit_>
  68:	mov	w22, w0
  6c:	cbz	w0, 90 <uncompress2+0x90>
  70:	mov	w0, w22
  74:	ldp	x20, x19, [sp, #176]
  78:	ldp	x22, x21, [sp, #160]
  7c:	ldp	x24, x23, [sp, #144]
  80:	ldr	x25, [sp, #128]
  84:	ldp	x29, x30, [sp, #112]
  88:	add	sp, sp, #0xc0
  8c:	ret
  90:	mov	w8, wzr
  94:	str	x21, [sp, #24]
  98:	str	wzr, [sp, #32]
  9c:	mov	w25, #0xffffffff            	// #-1
  a0:	cbz	w8, c4 <uncompress2+0xc4>
  a4:	ldr	w8, [sp, #8]
  a8:	cbz	w8, dc <uncompress2+0xdc>
  ac:	mov	x0, sp
  b0:	mov	w1, wzr
  b4:	bl	0 <inflate>
  b8:	cbnz	w0, f0 <uncompress2+0xf0>
  bc:	ldr	w8, [sp, #32]
  c0:	cbnz	w8, a4 <uncompress2+0xa4>
  c4:	cmp	x23, x25
  c8:	csel	x8, x23, x25, cc  // cc = lo, ul, last
  cc:	sub	x23, x23, x8
  d0:	str	w8, [sp, #32]
  d4:	ldr	w8, [sp, #8]
  d8:	cbnz	w8, ac <uncompress2+0xac>
  dc:	cmp	x24, x25
  e0:	csel	x8, x24, x25, cc  // cc = lo, ul, last
  e4:	sub	x24, x24, x8
  e8:	str	w8, [sp, #8]
  ec:	b	ac <uncompress2+0xac>
  f0:	ldr	w8, [sp, #8]
  f4:	ldr	x9, [x20]
  f8:	mov	w22, w0
  fc:	add	x8, x24, x8
 100:	sub	x8, x9, x8
 104:	str	x8, [x20]
 108:	ldr	x8, [sp, #40]
 10c:	add	x9, x29, #0x1c
 110:	cmp	x21, x9
 114:	b.eq	120 <uncompress2+0x120>  // b.none
 118:	str	x8, [x19]
 11c:	b	130 <uncompress2+0x130>
 120:	cmp	x8, #0x0
 124:	mov	w8, #0xfffffffb            	// #-5
 128:	ccmp	w22, w8, #0x0, ne  // ne = any
 12c:	csinc	x23, x23, xzr, ne  // ne = any
 130:	mov	x0, sp
 134:	bl	0 <inflateEnd>
 138:	cmp	w22, #0x2
 13c:	b.eq	15c <uncompress2+0x15c>  // b.none
 140:	cmp	w22, #0x1
 144:	b.eq	164 <uncompress2+0x164>  // b.none
 148:	cmn	w22, #0x5
 14c:	b.ne	70 <uncompress2+0x70>  // b.any
 150:	ldr	w8, [sp, #32]
 154:	cmn	x23, x8
 158:	b.eq	70 <uncompress2+0x70>  // b.none
 15c:	mov	w22, #0xfffffffd            	// #-3
 160:	b	70 <uncompress2+0x70>
 164:	mov	w22, wzr
 168:	b	70 <uncompress2+0x70>

000000000000016c <uncompress>:
 16c:	sub	sp, sp, #0x20
 170:	str	x3, [sp, #8]
 174:	add	x3, sp, #0x8
 178:	stp	x29, x30, [sp, #16]
 17c:	add	x29, sp, #0x10
 180:	bl	0 <uncompress2>
 184:	ldp	x29, x30, [sp, #16]
 188:	add	sp, sp, #0x20
 18c:	ret

gzclose.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzclose>:
   0:	cbz	x0, 18 <gzclose+0x18>
   4:	ldr	w8, [x0, #24]
   8:	mov	w9, #0x1c4f                	// #7247
   c:	cmp	w8, w9
  10:	b.ne	20 <gzclose+0x20>  // b.any
  14:	b	0 <gzclose_r>
  18:	mov	w0, #0xfffffffe            	// #-2
  1c:	ret
  20:	b	0 <gzclose_w>

gzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzopen>:
   0:	mov	x2, x1
   4:	mov	w1, #0xffffffff            	// #-1
   8:	b	c <gz_open>

000000000000000c <gz_open>:
   c:	stp	x29, x30, [sp, #-80]!
  10:	stp	x26, x25, [sp, #16]
  14:	stp	x24, x23, [sp, #32]
  18:	stp	x22, x21, [sp, #48]
  1c:	stp	x20, x19, [sp, #64]
  20:	mov	x29, sp
  24:	cbz	x0, 2b4 <gz_open+0x2a8>
  28:	mov	x21, x0
  2c:	mov	w0, #0xe8                  	// #232
  30:	mov	x22, x2
  34:	mov	w20, w1
  38:	bl	0 <malloc>
  3c:	mov	x19, x0
  40:	cbz	x0, 2b8 <gz_open+0x2ac>
  44:	adrp	x8, 0 <gzopen>
  48:	ldr	d0, [x8]
  4c:	movi	d1, #0xffffffff
  50:	str	xzr, [x19, #112]
  54:	str	wzr, [x19, #24]
  58:	str	d1, [x19, #88]
  5c:	str	d0, [x19, #40]
  60:	str	wzr, [x19, #64]
  64:	ldrb	w15, [x22]
  68:	cbz	w15, 2ac <gz_open+0x2a0>
  6c:	adrp	x10, 0 <gzopen>
  70:	mov	w8, wzr
  74:	mov	w24, wzr
  78:	mov	w25, wzr
  7c:	mov	w26, wzr
  80:	add	x9, x22, #0x1
  84:	add	x10, x10, #0x0
  88:	mov	w11, #0x4                   	// #4
  8c:	mov	w12, #0x3                   	// #3
  90:	mov	w13, #0x1                   	// #1
  94:	mov	w14, #0x2                   	// #2
  98:	b	ac <gz_open+0xa0>
  9c:	sub	w15, w15, #0x30
  a0:	str	w15, [x19, #88]
  a4:	ldrb	w15, [x9], #1
  a8:	cbz	w15, 13c <gz_open+0x130>
  ac:	sub	w16, w15, #0x30
  b0:	and	w16, w16, #0xff
  b4:	and	w15, w15, #0xff
  b8:	cmp	w16, #0x9
  bc:	b.ls	9c <gz_open+0x90>  // b.plast
  c0:	sub	w15, w15, #0x2b
  c4:	cmp	w15, #0x4d
  c8:	b.hi	a4 <gz_open+0x98>  // b.pmore
  cc:	adr	x16, a4 <gz_open+0x98>
  d0:	ldrb	w17, [x10, x15]
  d4:	add	x16, x16, x17, lsl #2
  d8:	br	x16
  dc:	str	w11, [x19, #92]
  e0:	b	a4 <gz_open+0x98>
  e4:	str	w12, [x19, #92]
  e8:	b	a4 <gz_open+0x98>
  ec:	mov	w8, #0x1                   	// #1
  f0:	str	w8, [x19, #64]
  f4:	b	a4 <gz_open+0x98>
  f8:	mov	w24, #0x1                   	// #1
  fc:	str	w24, [x19, #24]
 100:	b	a4 <gz_open+0x98>
 104:	mov	w26, #0x1                   	// #1
 108:	b	a4 <gz_open+0x98>
 10c:	str	w13, [x19, #92]
 110:	b	a4 <gz_open+0x98>
 114:	str	w14, [x19, #92]
 118:	b	a4 <gz_open+0x98>
 11c:	mov	w24, #0x1c4f                	// #7247
 120:	str	w24, [x19, #24]
 124:	b	a4 <gz_open+0x98>
 128:	mov	w24, #0x79b1                	// #31153
 12c:	str	w24, [x19, #24]
 130:	b	a4 <gz_open+0x98>
 134:	mov	w25, #0x1                   	// #1
 138:	b	a4 <gz_open+0x98>
 13c:	mov	w9, #0x1c4f                	// #7247
 140:	cmp	w24, w9
 144:	b.eq	150 <gz_open+0x144>  // b.none
 148:	cbz	w24, 2ac <gz_open+0x2a0>
 14c:	b	15c <gz_open+0x150>
 150:	cbnz	w8, 2ac <gz_open+0x2a0>
 154:	mov	w8, #0x1                   	// #1
 158:	str	w8, [x19, #64]
 15c:	mov	x0, x21
 160:	bl	0 <strlen>
 164:	add	x23, x0, #0x1
 168:	mov	x0, x23
 16c:	bl	0 <malloc>
 170:	str	x0, [x19, #32]
 174:	cbz	x0, 2ac <gz_open+0x2a0>
 178:	adrp	x2, 0 <gzopen>
 17c:	add	x2, x2, #0x0
 180:	mov	x1, x23
 184:	mov	x3, x21
 188:	mov	x22, x0
 18c:	bl	0 <snprintf>
 190:	cmp	w26, #0x0
 194:	mov	w9, #0x1c4f                	// #7247
 198:	cset	w8, ne  // ne = any
 19c:	cmp	w24, w9
 1a0:	b.ne	1ac <gz_open+0x1a0>  // b.any
 1a4:	mov	w9, wzr
 1a8:	b	1d4 <gz_open+0x1c8>
 1ac:	cmp	w25, #0x0
 1b0:	mov	w9, #0xc1                  	// #193
 1b4:	mov	w10, #0x41                  	// #65
 1b8:	mov	w11, #0x79b1                	// #31153
 1bc:	mov	w12, #0x400                 	// #1024
 1c0:	csel	w9, w10, w9, eq  // eq = none
 1c4:	cmp	w24, w11
 1c8:	mov	w10, #0x200                 	// #512
 1cc:	csel	w10, w10, w12, eq  // eq = none
 1d0:	orr	w9, w10, w9
 1d4:	tbnz	w20, #31, 1e0 <gz_open+0x1d4>
 1d8:	str	w20, [x19, #28]
 1dc:	b	204 <gz_open+0x1f8>
 1e0:	lsl	w8, w8, #19
 1e4:	orr	w1, w9, w8
 1e8:	mov	w2, #0x1b6                 	// #438
 1ec:	mov	x0, x21
 1f0:	bl	0 <open>
 1f4:	mov	w20, w0
 1f8:	cmn	w0, #0x1
 1fc:	str	w0, [x19, #28]
 200:	b.eq	2a4 <gz_open+0x298>  // b.none
 204:	cmp	w24, #0x1
 208:	b.ne	228 <gz_open+0x21c>  // b.any
 20c:	mov	w2, #0x2                   	// #2
 210:	mov	w0, w20
 214:	mov	x1, xzr
 218:	bl	0 <lseek64>
 21c:	mov	w8, #0x79b1                	// #31153
 220:	str	w8, [x19, #24]
 224:	b	270 <gz_open+0x264>
 228:	ldr	w8, [x19, #24]
 22c:	mov	w21, #0x1c4f                	// #7247
 230:	cmp	w8, w21
 234:	b.ne	270 <gz_open+0x264>  // b.any
 238:	mov	w2, #0x1                   	// #1
 23c:	mov	w0, w20
 240:	mov	x1, xzr
 244:	bl	0 <lseek64>
 248:	ldr	w8, [x19, #24]
 24c:	cmn	x0, #0x1
 250:	csel	x9, xzr, x0, eq  // eq = none
 254:	str	x9, [x19, #72]
 258:	cmp	w8, w21
 25c:	str	wzr, [x19]
 260:	b.ne	274 <gz_open+0x268>  // b.any
 264:	str	xzr, [x19, #80]
 268:	str	wzr, [x19, #68]
 26c:	b	274 <gz_open+0x268>
 270:	str	wzr, [x19]
 274:	ldr	x0, [x19, #112]
 278:	str	wzr, [x19, #104]
 27c:	cbz	x0, 294 <gz_open+0x288>
 280:	ldr	w8, [x19, #108]
 284:	cmn	w8, #0x4
 288:	b.eq	290 <gz_open+0x284>  // b.none
 28c:	bl	0 <free>
 290:	str	xzr, [x19, #112]
 294:	str	wzr, [x19, #108]
 298:	str	xzr, [x19, #16]
 29c:	str	wzr, [x19, #128]
 2a0:	b	2b8 <gz_open+0x2ac>
 2a4:	mov	x0, x22
 2a8:	bl	0 <free>
 2ac:	mov	x0, x19
 2b0:	bl	0 <free>
 2b4:	mov	x19, xzr
 2b8:	mov	x0, x19
 2bc:	ldp	x20, x19, [sp, #64]
 2c0:	ldp	x22, x21, [sp, #48]
 2c4:	ldp	x24, x23, [sp, #32]
 2c8:	ldp	x26, x25, [sp, #16]
 2cc:	ldp	x29, x30, [sp], #80
 2d0:	ret

00000000000002d4 <gzopen64>:
 2d4:	mov	x2, x1
 2d8:	mov	w1, #0xffffffff            	// #-1
 2dc:	b	c <gz_open>

00000000000002e0 <gzdopen>:
 2e0:	stp	x29, x30, [sp, #-48]!
 2e4:	cmn	w0, #0x1
 2e8:	str	x21, [sp, #16]
 2ec:	stp	x20, x19, [sp, #32]
 2f0:	mov	x29, sp
 2f4:	b.eq	348 <gzdopen+0x68>  // b.none
 2f8:	mov	w19, w0
 2fc:	mov	w0, #0x13                  	// #19
 300:	mov	x20, x1
 304:	bl	0 <malloc>
 308:	cbz	x0, 348 <gzdopen+0x68>
 30c:	adrp	x2, 0 <gzopen>
 310:	add	x2, x2, #0x0
 314:	mov	w1, #0x13                  	// #19
 318:	mov	w3, w19
 31c:	mov	x21, x0
 320:	bl	0 <snprintf>
 324:	mov	x0, x21
 328:	mov	w1, w19
 32c:	mov	x2, x20
 330:	bl	c <gz_open>
 334:	mov	x19, x0
 338:	mov	x0, x21
 33c:	bl	0 <free>
 340:	mov	x0, x19
 344:	b	34c <gzdopen+0x6c>
 348:	mov	x0, xzr
 34c:	ldp	x20, x19, [sp, #32]
 350:	ldr	x21, [sp, #16]
 354:	ldp	x29, x30, [sp], #48
 358:	ret

000000000000035c <gzbuffer>:
 35c:	cbz	x0, 3ac <gzbuffer+0x50>
 360:	ldr	w9, [x0, #24]
 364:	mov	w10, #0x79b1                	// #31153
 368:	mov	x8, x0
 36c:	cmp	w9, w10
 370:	b.eq	380 <gzbuffer+0x24>  // b.none
 374:	mov	w10, #0x1c4f                	// #7247
 378:	cmp	w9, w10
 37c:	b.ne	3ac <gzbuffer+0x50>  // b.any
 380:	cmp	w1, w1, lsl #1
 384:	mov	w0, #0xffffffff            	// #-1
 388:	b.hi	3a8 <gzbuffer+0x4c>  // b.pmore
 38c:	ldr	w9, [x8, #40]
 390:	cbnz	w9, 3a8 <gzbuffer+0x4c>
 394:	cmp	w1, #0x2
 398:	mov	w9, #0x2                   	// #2
 39c:	mov	w0, wzr
 3a0:	csel	w9, w1, w9, hi  // hi = pmore
 3a4:	str	w9, [x8, #44]
 3a8:	ret
 3ac:	mov	w0, #0xffffffff            	// #-1
 3b0:	ret

00000000000003b4 <gzrewind>:
 3b4:	stp	x29, x30, [sp, #-32]!
 3b8:	str	x19, [sp, #16]
 3bc:	mov	x29, sp
 3c0:	cbz	x0, 450 <gzrewind+0x9c>
 3c4:	ldr	w8, [x0, #24]
 3c8:	mov	w9, #0x1c4f                	// #7247
 3cc:	mov	x19, x0
 3d0:	cmp	w8, w9
 3d4:	b.ne	450 <gzrewind+0x9c>  // b.any
 3d8:	ldr	w8, [x19, #108]
 3dc:	cbz	w8, 3e8 <gzrewind+0x34>
 3e0:	cmn	w8, #0x5
 3e4:	b.ne	450 <gzrewind+0x9c>  // b.any
 3e8:	ldr	w0, [x19, #28]
 3ec:	ldr	x1, [x19, #72]
 3f0:	mov	w2, wzr
 3f4:	bl	0 <lseek64>
 3f8:	cmn	x0, #0x1
 3fc:	b.eq	454 <gzrewind+0xa0>  // b.none
 400:	ldr	w8, [x19, #24]
 404:	mov	w9, #0x1c4f                	// #7247
 408:	str	wzr, [x19]
 40c:	cmp	w8, w9
 410:	b.ne	41c <gzrewind+0x68>  // b.any
 414:	str	xzr, [x19, #80]
 418:	str	wzr, [x19, #68]
 41c:	ldr	x0, [x19, #112]
 420:	str	wzr, [x19, #104]
 424:	cbz	x0, 43c <gzrewind+0x88>
 428:	ldr	w8, [x19, #108]
 42c:	cmn	w8, #0x4
 430:	b.eq	438 <gzrewind+0x84>  // b.none
 434:	bl	0 <free>
 438:	str	xzr, [x19, #112]
 43c:	mov	w0, wzr
 440:	str	wzr, [x19, #108]
 444:	str	xzr, [x19, #16]
 448:	str	wzr, [x19, #128]
 44c:	b	454 <gzrewind+0xa0>
 450:	mov	w0, #0xffffffff            	// #-1
 454:	ldr	x19, [sp, #16]
 458:	ldp	x29, x30, [sp], #32
 45c:	ret

0000000000000460 <gzseek64>:
 460:	stp	x29, x30, [sp, #-32]!
 464:	stp	x20, x19, [sp, #16]
 468:	mov	x29, sp
 46c:	cbz	x0, 4ac <gzseek64+0x4c>
 470:	ldr	w8, [x0, #24]
 474:	mov	w9, #0x79b1                	// #31153
 478:	mov	x19, x1
 47c:	mov	x20, x0
 480:	cmp	w8, w9
 484:	b.eq	494 <gzseek64+0x34>  // b.none
 488:	mov	w9, #0x1c4f                	// #7247
 48c:	cmp	w8, w9
 490:	b.ne	4ac <gzseek64+0x4c>  // b.any
 494:	ldr	w9, [x20, #108]
 498:	cbz	w9, 4a4 <gzseek64+0x44>
 49c:	cmn	w9, #0x5
 4a0:	b.ne	4ac <gzseek64+0x4c>  // b.any
 4a4:	cmp	w2, #0x1
 4a8:	b.ls	4bc <gzseek64+0x5c>  // b.plast
 4ac:	mov	x0, #0xffffffffffffffff    	// #-1
 4b0:	ldp	x20, x19, [sp, #16]
 4b4:	ldp	x29, x30, [sp], #32
 4b8:	ret
 4bc:	cbz	w2, 4d4 <gzseek64+0x74>
 4c0:	ldr	w10, [x20, #104]
 4c4:	cbz	w10, 4dc <gzseek64+0x7c>
 4c8:	ldr	x10, [x20, #96]
 4cc:	add	x19, x10, x19
 4d0:	b	4dc <gzseek64+0x7c>
 4d4:	ldr	x10, [x20, #16]
 4d8:	sub	x19, x19, x10
 4dc:	mov	w10, #0x1c4f                	// #7247
 4e0:	cmp	w8, w10
 4e4:	str	wzr, [x20, #104]
 4e8:	b.ne	560 <gzseek64+0x100>  // b.any
 4ec:	ldr	w10, [x20, #68]
 4f0:	cmp	w10, #0x1
 4f4:	b.ne	560 <gzseek64+0x100>  // b.any
 4f8:	ldr	x10, [x20, #16]
 4fc:	cmn	x10, x19
 500:	b.mi	560 <gzseek64+0x100>  // b.first
 504:	ldr	w8, [x20]
 508:	ldr	w0, [x20, #28]
 50c:	mov	w2, #0x1                   	// #1
 510:	sub	x1, x19, x8
 514:	bl	0 <lseek64>
 518:	cmn	x0, #0x1
 51c:	b.eq	4b0 <gzseek64+0x50>  // b.none
 520:	ldr	x0, [x20, #112]
 524:	str	wzr, [x20]
 528:	str	xzr, [x20, #80]
 52c:	str	wzr, [x20, #104]
 530:	cbz	x0, 548 <gzseek64+0xe8>
 534:	ldr	w8, [x20, #108]
 538:	cmn	w8, #0x4
 53c:	b.eq	544 <gzseek64+0xe4>  // b.none
 540:	bl	0 <free>
 544:	str	xzr, [x20, #112]
 548:	ldr	x8, [x20, #16]
 54c:	str	wzr, [x20, #108]
 550:	str	wzr, [x20, #128]
 554:	add	x0, x8, x19
 558:	str	x0, [x20, #16]
 55c:	b	4b0 <gzseek64+0x50>
 560:	tbnz	x19, #63, 5b4 <gzseek64+0x154>
 564:	mov	w9, #0x1c4f                	// #7247
 568:	cmp	w8, w9
 56c:	b.ne	598 <gzseek64+0x138>  // b.any
 570:	ldr	w8, [x20]
 574:	ldp	x9, x10, [x20, #8]
 578:	cmp	x19, x8
 57c:	csel	w11, w19, w8, lt  // lt = tstop
 580:	sub	w8, w8, w11
 584:	add	x9, x9, x11
 588:	add	x10, x10, x11
 58c:	sub	x19, x19, x11
 590:	str	w8, [x20]
 594:	stp	x9, x10, [x20, #8]
 598:	cbz	x19, 5a8 <gzseek64+0x148>
 59c:	mov	w8, #0x1                   	// #1
 5a0:	str	w8, [x20, #104]
 5a4:	str	x19, [x20, #96]
 5a8:	ldr	x8, [x20, #16]
 5ac:	add	x0, x8, x19
 5b0:	b	4b0 <gzseek64+0x50>
 5b4:	mov	w10, #0x1c4f                	// #7247
 5b8:	cmp	w8, w10
 5bc:	b.ne	4ac <gzseek64+0x4c>  // b.any
 5c0:	ldr	x8, [x20, #16]
 5c4:	adds	x19, x8, x19
 5c8:	b.mi	4ac <gzseek64+0x4c>  // b.first
 5cc:	cbz	w9, 5d8 <gzseek64+0x178>
 5d0:	cmn	w9, #0x5
 5d4:	b.ne	4ac <gzseek64+0x4c>  // b.any
 5d8:	ldr	w0, [x20, #28]
 5dc:	ldr	x1, [x20, #72]
 5e0:	mov	w2, wzr
 5e4:	bl	0 <lseek64>
 5e8:	cmn	x0, #0x1
 5ec:	b.eq	4b0 <gzseek64+0x50>  // b.none
 5f0:	ldr	w8, [x20, #24]
 5f4:	mov	w9, #0x1c4f                	// #7247
 5f8:	str	wzr, [x20]
 5fc:	cmp	w8, w9
 600:	b.ne	60c <gzseek64+0x1ac>  // b.any
 604:	str	xzr, [x20, #80]
 608:	str	wzr, [x20, #68]
 60c:	ldr	x0, [x20, #112]
 610:	str	wzr, [x20, #104]
 614:	cbz	x0, 630 <gzseek64+0x1d0>
 618:	ldr	w9, [x20, #108]
 61c:	cmn	w9, #0x4
 620:	b.eq	62c <gzseek64+0x1cc>  // b.none
 624:	bl	0 <free>
 628:	ldr	w8, [x20, #24]
 62c:	str	xzr, [x20, #112]
 630:	str	wzr, [x20, #108]
 634:	str	xzr, [x20, #16]
 638:	str	wzr, [x20, #128]
 63c:	b	564 <gzseek64+0x104>

0000000000000640 <gz_error>:
 640:	stp	x29, x30, [sp, #-48]!
 644:	stp	x22, x21, [sp, #16]
 648:	stp	x20, x19, [sp, #32]
 64c:	mov	x20, x0
 650:	ldr	x0, [x0, #112]
 654:	mov	x19, x2
 658:	mov	w21, w1
 65c:	mov	x29, sp
 660:	cbz	x0, 678 <gz_error+0x38>
 664:	ldr	w8, [x20, #108]
 668:	cmn	w8, #0x4
 66c:	b.eq	674 <gz_error+0x34>  // b.none
 670:	bl	0 <free>
 674:	str	xzr, [x20, #112]
 678:	cmn	w21, #0x5
 67c:	b.eq	688 <gz_error+0x48>  // b.none
 680:	cbz	w21, 688 <gz_error+0x48>
 684:	str	wzr, [x20]
 688:	cmn	w21, #0x4
 68c:	str	w21, [x20, #108]
 690:	b.eq	718 <gz_error+0xd8>  // b.none
 694:	cbz	x19, 718 <gz_error+0xd8>
 698:	ldr	x21, [x20, #32]
 69c:	mov	x0, x21
 6a0:	bl	0 <strlen>
 6a4:	mov	x22, x0
 6a8:	mov	x0, x19
 6ac:	bl	0 <strlen>
 6b0:	add	x8, x22, x0
 6b4:	add	x0, x8, #0x3
 6b8:	bl	0 <malloc>
 6bc:	str	x0, [x20, #112]
 6c0:	cbz	x0, 710 <gz_error+0xd0>
 6c4:	mov	x22, x0
 6c8:	mov	x0, x21
 6cc:	bl	0 <strlen>
 6d0:	mov	x20, x0
 6d4:	mov	x0, x19
 6d8:	bl	0 <strlen>
 6dc:	add	x8, x20, x0
 6e0:	mov	x0, x22
 6e4:	mov	x3, x21
 6e8:	mov	x5, x19
 6ec:	ldp	x20, x19, [sp, #32]
 6f0:	ldp	x22, x21, [sp, #16]
 6f4:	adrp	x2, 0 <gzopen>
 6f8:	adrp	x4, 0 <gzopen>
 6fc:	add	x2, x2, #0x0
 700:	add	x1, x8, #0x3
 704:	add	x4, x4, #0x0
 708:	ldp	x29, x30, [sp], #48
 70c:	b	0 <snprintf>
 710:	mov	w8, #0xfffffffc            	// #-4
 714:	str	w8, [x20, #108]
 718:	ldp	x20, x19, [sp, #32]
 71c:	ldp	x22, x21, [sp, #16]
 720:	ldp	x29, x30, [sp], #48
 724:	ret

0000000000000728 <gzseek>:
 728:	b	460 <gzseek64>

000000000000072c <gztell64>:
 72c:	cbz	x0, 764 <gztell64+0x38>
 730:	ldr	w8, [x0, #24]
 734:	mov	w9, #0x79b1                	// #31153
 738:	cmp	w8, w9
 73c:	b.eq	74c <gztell64+0x20>  // b.none
 740:	mov	w9, #0x1c4f                	// #7247
 744:	cmp	w8, w9
 748:	b.ne	764 <gztell64+0x38>  // b.any
 74c:	ldr	w9, [x0, #104]
 750:	ldr	x8, [x0, #16]
 754:	cbz	w9, 76c <gztell64+0x40>
 758:	ldr	x9, [x0, #96]
 75c:	add	x0, x9, x8
 760:	ret
 764:	mov	x0, #0xffffffffffffffff    	// #-1
 768:	ret
 76c:	add	x0, xzr, x8
 770:	ret

0000000000000774 <gztell>:
 774:	cbz	x0, 7ac <gztell+0x38>
 778:	ldr	w8, [x0, #24]
 77c:	mov	w9, #0x79b1                	// #31153
 780:	cmp	w8, w9
 784:	b.eq	794 <gztell+0x20>  // b.none
 788:	mov	w9, #0x1c4f                	// #7247
 78c:	cmp	w8, w9
 790:	b.ne	7ac <gztell+0x38>  // b.any
 794:	ldr	w9, [x0, #104]
 798:	ldr	x8, [x0, #16]
 79c:	cbz	w9, 7b4 <gztell+0x40>
 7a0:	ldr	x9, [x0, #96]
 7a4:	add	x0, x9, x8
 7a8:	ret
 7ac:	mov	x0, #0xffffffffffffffff    	// #-1
 7b0:	ret
 7b4:	add	x0, xzr, x8
 7b8:	ret

00000000000007bc <gzoffset64>:
 7bc:	stp	x29, x30, [sp, #-32]!
 7c0:	str	x19, [sp, #16]
 7c4:	mov	x29, sp
 7c8:	cbz	x0, 820 <gzoffset64+0x64>
 7cc:	ldr	w8, [x0, #24]
 7d0:	mov	w9, #0x79b1                	// #31153
 7d4:	mov	x19, x0
 7d8:	cmp	w8, w9
 7dc:	b.eq	7ec <gzoffset64+0x30>  // b.none
 7e0:	mov	w9, #0x1c4f                	// #7247
 7e4:	cmp	w8, w9
 7e8:	b.ne	820 <gzoffset64+0x64>  // b.any
 7ec:	ldr	w0, [x19, #28]
 7f0:	mov	w2, #0x1                   	// #1
 7f4:	mov	x1, xzr
 7f8:	bl	0 <lseek64>
 7fc:	cmn	x0, #0x1
 800:	b.eq	824 <gzoffset64+0x68>  // b.none
 804:	ldr	w8, [x19, #24]
 808:	mov	w9, #0x1c4f                	// #7247
 80c:	cmp	w8, w9
 810:	b.ne	824 <gzoffset64+0x68>  // b.any
 814:	ldr	w8, [x19, #128]
 818:	sub	x0, x0, x8
 81c:	b	824 <gzoffset64+0x68>
 820:	mov	x0, #0xffffffffffffffff    	// #-1
 824:	ldr	x19, [sp, #16]
 828:	ldp	x29, x30, [sp], #32
 82c:	ret

0000000000000830 <gzoffset>:
 830:	stp	x29, x30, [sp, #-32]!
 834:	str	x19, [sp, #16]
 838:	mov	x29, sp
 83c:	cbz	x0, 894 <gzoffset+0x64>
 840:	ldr	w8, [x0, #24]
 844:	mov	w9, #0x79b1                	// #31153
 848:	mov	x19, x0
 84c:	cmp	w8, w9
 850:	b.eq	860 <gzoffset+0x30>  // b.none
 854:	mov	w9, #0x1c4f                	// #7247
 858:	cmp	w8, w9
 85c:	b.ne	894 <gzoffset+0x64>  // b.any
 860:	ldr	w0, [x19, #28]
 864:	mov	w2, #0x1                   	// #1
 868:	mov	x1, xzr
 86c:	bl	0 <lseek64>
 870:	cmn	x0, #0x1
 874:	b.eq	898 <gzoffset+0x68>  // b.none
 878:	ldr	w8, [x19, #24]
 87c:	mov	w9, #0x1c4f                	// #7247
 880:	cmp	w8, w9
 884:	b.ne	898 <gzoffset+0x68>  // b.any
 888:	ldr	w8, [x19, #128]
 88c:	sub	x0, x0, x8
 890:	b	898 <gzoffset+0x68>
 894:	mov	x0, #0xffffffffffffffff    	// #-1
 898:	ldr	x19, [sp, #16]
 89c:	ldp	x29, x30, [sp], #32
 8a0:	ret

00000000000008a4 <gzeof>:
 8a4:	cbz	x0, 8bc <gzeof+0x18>
 8a8:	ldr	w8, [x0, #24]
 8ac:	mov	w9, #0x1c4f                	// #7247
 8b0:	cmp	w8, w9
 8b4:	b.ne	8c0 <gzeof+0x1c>  // b.any
 8b8:	ldr	w0, [x0, #84]
 8bc:	ret
 8c0:	mov	w0, wzr
 8c4:	ret

00000000000008c8 <gzerror>:
 8c8:	cbz	x0, 928 <gzerror+0x60>
 8cc:	ldr	w8, [x0, #24]
 8d0:	mov	w9, #0x79b1                	// #31153
 8d4:	cmp	w8, w9
 8d8:	b.eq	8e8 <gzerror+0x20>  // b.none
 8dc:	mov	w9, #0x1c4f                	// #7247
 8e0:	cmp	w8, w9
 8e4:	b.ne	90c <gzerror+0x44>  // b.any
 8e8:	cbz	x1, 8f4 <gzerror+0x2c>
 8ec:	ldr	w8, [x0, #108]
 8f0:	str	w8, [x1]
 8f4:	ldr	w8, [x0, #108]
 8f8:	cmn	w8, #0x4
 8fc:	b.ne	914 <gzerror+0x4c>  // b.any
 900:	adrp	x0, 0 <gzopen>
 904:	add	x0, x0, #0x0
 908:	ret
 90c:	mov	x0, xzr
 910:	ret
 914:	ldr	x8, [x0, #112]
 918:	adrp	x9, 0 <gzopen>
 91c:	add	x9, x9, #0x0
 920:	cmp	x8, #0x0
 924:	csel	x0, x9, x8, eq  // eq = none
 928:	ret

000000000000092c <gzclearerr>:
 92c:	stp	x29, x30, [sp, #-32]!
 930:	str	x19, [sp, #16]
 934:	mov	x29, sp
 938:	cbz	x0, 980 <gzclearerr+0x54>
 93c:	ldr	w8, [x0, #24]
 940:	mov	w9, #0x79b1                	// #31153
 944:	mov	x19, x0
 948:	cmp	w8, w9
 94c:	b.eq	960 <gzclearerr+0x34>  // b.none
 950:	mov	w9, #0x1c4f                	// #7247
 954:	cmp	w8, w9
 958:	b.ne	980 <gzclearerr+0x54>  // b.any
 95c:	str	xzr, [x19, #80]
 960:	ldr	x0, [x19, #112]
 964:	cbz	x0, 97c <gzclearerr+0x50>
 968:	ldr	w8, [x19, #108]
 96c:	cmn	w8, #0x4
 970:	b.eq	978 <gzclearerr+0x4c>  // b.none
 974:	bl	0 <free>
 978:	str	xzr, [x19, #112]
 97c:	str	wzr, [x19, #108]
 980:	ldr	x19, [sp, #16]
 984:	ldp	x29, x30, [sp], #32
 988:	ret

gzread.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzread>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	x0, 70 <gzread+0x70>
  10:	ldr	w8, [x0, #24]
  14:	mov	w9, #0x1c4f                	// #7247
  18:	mov	x19, x0
  1c:	cmp	w8, w9
  20:	b.ne	70 <gzread+0x70>  // b.any
  24:	ldr	w8, [x19, #108]
  28:	cbz	w8, 34 <gzread+0x34>
  2c:	cmn	w8, #0x5
  30:	b.ne	70 <gzread+0x70>  // b.any
  34:	tbnz	w2, #31, 5c <gzread+0x5c>
  38:	mov	w2, w2
  3c:	mov	x0, x19
  40:	bl	80 <gz_read>
  44:	cbnz	w0, 74 <gzread+0x74>
  48:	ldr	w8, [x19, #108]
  4c:	cbz	w8, 74 <gzread+0x74>
  50:	cmn	w8, #0x5
  54:	b.eq	74 <gzread+0x74>  // b.none
  58:	b	70 <gzread+0x70>
  5c:	adrp	x2, 0 <gzread>
  60:	add	x2, x2, #0x0
  64:	mov	w1, #0xfffffffe            	// #-2
  68:	mov	x0, x19
  6c:	bl	0 <gz_error>
  70:	mov	w0, #0xffffffff            	// #-1
  74:	ldr	x19, [sp, #16]
  78:	ldp	x29, x30, [sp], #32
  7c:	ret

0000000000000080 <gz_read>:
  80:	stp	x29, x30, [sp, #-96]!
  84:	str	x27, [sp, #16]
  88:	stp	x26, x25, [sp, #32]
  8c:	stp	x24, x23, [sp, #48]
  90:	stp	x22, x21, [sp, #64]
  94:	stp	x20, x19, [sp, #80]
  98:	mov	x29, sp
  9c:	cbz	x2, 124 <gz_read+0xa4>
  a0:	ldr	w8, [x0, #104]
  a4:	mov	x20, x2
  a8:	mov	x21, x1
  ac:	mov	x19, x0
  b0:	cbz	w8, c0 <gz_read+0x40>
  b4:	ldr	x22, [x19, #96]
  b8:	str	wzr, [x19, #104]
  bc:	cbnz	x22, fc <gz_read+0x7c>
  c0:	mov	x22, xzr
  c4:	mov	w24, #0xffffffff            	// #-1
  c8:	mov	w25, #0x40000000            	// #1073741824
  cc:	mov	w26, #0x1                   	// #1
  d0:	b	15c <gz_read+0xdc>
  d4:	ldp	x9, x10, [x19, #8]
  d8:	cmp	x22, x8
  dc:	csel	w11, w22, w8, lt  // lt = tstop
  e0:	sub	w8, w8, w11
  e4:	str	w8, [x19]
  e8:	add	x8, x9, x11
  ec:	add	x9, x10, x11
  f0:	sub	x22, x22, x11
  f4:	stp	x8, x9, [x19, #8]
  f8:	cbz	x22, c0 <gz_read+0x40>
  fc:	ldr	w8, [x19]
 100:	cbnz	w8, d4 <gz_read+0x54>
 104:	ldr	w8, [x19, #80]
 108:	cbz	w8, 114 <gz_read+0x94>
 10c:	ldr	w8, [x19, #128]
 110:	cbz	w8, c0 <gz_read+0x40>
 114:	mov	x0, x19
 118:	bl	71c <gz_fetch>
 11c:	cmn	w0, #0x1
 120:	b.ne	f8 <gz_read+0x78>  // b.any
 124:	mov	x22, xzr
 128:	mov	x0, x22
 12c:	ldp	x20, x19, [sp, #80]
 130:	ldp	x22, x21, [sp, #64]
 134:	ldp	x24, x23, [sp, #48]
 138:	ldp	x26, x25, [sp, #32]
 13c:	ldr	x27, [sp, #16]
 140:	ldp	x29, x30, [sp], #96
 144:	ret
 148:	mov	x0, x19
 14c:	bl	71c <gz_fetch>
 150:	cmn	w0, #0x1
 154:	b.eq	124 <gz_read+0xa4>  // b.none
 158:	cbz	x20, 128 <gz_read+0xa8>
 15c:	ldr	w8, [x19]
 160:	cmp	x20, x24
 164:	csinv	w27, w20, wzr, cc  // cc = lo, ul, last
 168:	cbz	w8, 1c0 <gz_read+0x140>
 16c:	ldr	x1, [x19, #8]
 170:	cmp	w8, w27
 174:	csel	w23, w8, w27, cc  // cc = lo, ul, last
 178:	mov	x0, x21
 17c:	mov	x2, x23
 180:	bl	0 <memcpy>
 184:	ldr	x8, [x19, #8]
 188:	ldr	w9, [x19]
 18c:	add	x8, x8, x23
 190:	sub	w9, w9, w23
 194:	str	x8, [x19, #8]
 198:	str	w9, [x19]
 19c:	ldr	x9, [x19, #16]
 1a0:	mov	w8, w23
 1a4:	sub	x20, x20, x8
 1a8:	add	x21, x21, x8
 1ac:	add	x22, x22, x8
 1b0:	add	x8, x9, x8
 1b4:	str	x8, [x19, #16]
 1b8:	cbnz	x20, 15c <gz_read+0xdc>
 1bc:	b	128 <gz_read+0xa8>
 1c0:	ldr	w8, [x19, #80]
 1c4:	cbz	w8, 1d0 <gz_read+0x150>
 1c8:	ldr	w8, [x19, #128]
 1cc:	cbz	w8, 254 <gz_read+0x1d4>
 1d0:	ldr	w8, [x19, #68]
 1d4:	cbz	w8, 148 <gz_read+0xc8>
 1d8:	ldr	w9, [x19, #40]
 1dc:	cmp	w27, w9, lsl #1
 1e0:	b.cc	148 <gz_read+0xc8>  // b.lo, b.ul, b.last
 1e4:	cmp	w8, #0x1
 1e8:	b.ne	224 <gz_read+0x1a4>  // b.any
 1ec:	mov	w23, wzr
 1f0:	sub	w8, w27, w23
 1f4:	ldr	w0, [x19, #28]
 1f8:	lsr	w9, w8, #30
 1fc:	cmp	w9, #0x0
 200:	csel	w2, w8, w25, eq  // eq = none
 204:	add	x1, x21, w23, uxtw
 208:	bl	0 <read>
 20c:	cmp	w0, #0x1
 210:	b.lt	248 <gz_read+0x1c8>  // b.tstop
 214:	add	w23, w23, w0
 218:	cmp	w23, w27
 21c:	b.cc	1f0 <gz_read+0x170>  // b.lo, b.ul, b.last
 220:	b	19c <gz_read+0x11c>
 224:	mov	x0, x19
 228:	str	w27, [x19, #152]
 22c:	str	x21, [x19, #144]
 230:	bl	b78 <gz_decomp>
 234:	cmn	w0, #0x1
 238:	b.eq	124 <gz_read+0xa4>  // b.none
 23c:	ldr	w23, [x19]
 240:	str	wzr, [x19]
 244:	b	19c <gz_read+0x11c>
 248:	tbnz	w0, #31, 260 <gz_read+0x1e0>
 24c:	str	w26, [x19, #80]
 250:	b	19c <gz_read+0x11c>
 254:	mov	w8, #0x1                   	// #1
 258:	str	w8, [x19, #84]
 25c:	b	128 <gz_read+0xa8>
 260:	bl	0 <__errno_location>
 264:	ldr	w0, [x0]
 268:	bl	0 <strerror>
 26c:	mov	x2, x0
 270:	mov	w1, #0xffffffff            	// #-1
 274:	mov	x0, x19
 278:	bl	0 <gz_error>
 27c:	b	124 <gz_read+0xa4>

0000000000000280 <gzfread>:
 280:	stp	x29, x30, [sp, #-32]!
 284:	str	x19, [sp, #16]
 288:	mov	x29, sp
 28c:	cbz	x3, 2fc <gzfread+0x7c>
 290:	ldr	w8, [x3, #24]
 294:	mov	w9, #0x1c4f                	// #7247
 298:	cmp	w8, w9
 29c:	b.ne	2fc <gzfread+0x7c>  // b.any
 2a0:	ldr	w8, [x3, #108]
 2a4:	mov	x19, x1
 2a8:	mov	x1, x0
 2ac:	cbz	w8, 2b8 <gzfread+0x38>
 2b0:	cmn	w8, #0x5
 2b4:	b.ne	2fc <gzfread+0x7c>  // b.any
 2b8:	umulh	x8, x19, x2
 2bc:	cmp	xzr, x8
 2c0:	cset	w8, ne  // ne = any
 2c4:	cbz	x19, 2e4 <gzfread+0x64>
 2c8:	cbz	w8, 2e4 <gzfread+0x64>
 2cc:	adrp	x2, 0 <gzread>
 2d0:	add	x2, x2, #0x0
 2d4:	mov	w1, #0xfffffffe            	// #-2
 2d8:	mov	x0, x3
 2dc:	bl	0 <gz_error>
 2e0:	b	2fc <gzfread+0x7c>
 2e4:	mul	x2, x19, x2
 2e8:	cbz	x2, 2fc <gzfread+0x7c>
 2ec:	mov	x0, x3
 2f0:	bl	80 <gz_read>
 2f4:	udiv	x0, x0, x19
 2f8:	b	300 <gzfread+0x80>
 2fc:	mov	x0, xzr
 300:	ldr	x19, [sp, #16]
 304:	ldp	x29, x30, [sp], #32
 308:	ret

000000000000030c <gzgetc>:
 30c:	sub	sp, sp, #0x20
 310:	stp	x29, x30, [sp, #16]
 314:	add	x29, sp, #0x10
 318:	cbz	x0, 364 <gzgetc+0x58>
 31c:	ldr	w8, [x0, #24]
 320:	mov	w9, #0x1c4f                	// #7247
 324:	cmp	w8, w9
 328:	b.ne	364 <gzgetc+0x58>  // b.any
 32c:	ldr	w8, [x0, #108]
 330:	cbz	w8, 33c <gzgetc+0x30>
 334:	cmn	w8, #0x5
 338:	b.ne	364 <gzgetc+0x58>  // b.any
 33c:	ldr	w8, [x0]
 340:	cbz	w8, 374 <gzgetc+0x68>
 344:	ldp	x10, x9, [x0, #8]
 348:	sub	w8, w8, #0x1
 34c:	str	w8, [x0]
 350:	add	x8, x9, #0x1
 354:	add	x9, x10, #0x1
 358:	stp	x9, x8, [x0, #8]
 35c:	ldrb	w0, [x10]
 360:	b	368 <gzgetc+0x5c>
 364:	mov	w0, #0xffffffff            	// #-1
 368:	ldp	x29, x30, [sp, #16]
 36c:	add	sp, sp, #0x20
 370:	ret
 374:	sub	x1, x29, #0x4
 378:	mov	w2, #0x1                   	// #1
 37c:	bl	80 <gz_read>
 380:	ldurb	w8, [x29, #-4]
 384:	cmp	w0, #0x1
 388:	csinv	w0, w8, wzr, ge  // ge = tcont
 38c:	b	368 <gzgetc+0x5c>

0000000000000390 <gzgetc_>:
 390:	sub	sp, sp, #0x20
 394:	stp	x29, x30, [sp, #16]
 398:	add	x29, sp, #0x10
 39c:	cbz	x0, 3e8 <gzgetc_+0x58>
 3a0:	ldr	w8, [x0, #24]
 3a4:	mov	w9, #0x1c4f                	// #7247
 3a8:	cmp	w8, w9
 3ac:	b.ne	3e8 <gzgetc_+0x58>  // b.any
 3b0:	ldr	w8, [x0, #108]
 3b4:	cbz	w8, 3c0 <gzgetc_+0x30>
 3b8:	cmn	w8, #0x5
 3bc:	b.ne	3e8 <gzgetc_+0x58>  // b.any
 3c0:	ldr	w8, [x0]
 3c4:	cbz	w8, 3f8 <gzgetc_+0x68>
 3c8:	ldp	x10, x9, [x0, #8]
 3cc:	sub	w8, w8, #0x1
 3d0:	str	w8, [x0]
 3d4:	add	x8, x9, #0x1
 3d8:	add	x9, x10, #0x1
 3dc:	stp	x9, x8, [x0, #8]
 3e0:	ldrb	w0, [x10]
 3e4:	b	3ec <gzgetc_+0x5c>
 3e8:	mov	w0, #0xffffffff            	// #-1
 3ec:	ldp	x29, x30, [sp, #16]
 3f0:	add	sp, sp, #0x20
 3f4:	ret
 3f8:	sub	x1, x29, #0x4
 3fc:	mov	w2, #0x1                   	// #1
 400:	bl	80 <gz_read>
 404:	ldurb	w8, [x29, #-4]
 408:	cmp	w0, #0x1
 40c:	csinv	w0, w8, wzr, ge  // ge = tcont
 410:	b	3ec <gzgetc_+0x5c>

0000000000000414 <gzungetc>:
 414:	stp	x29, x30, [sp, #-48]!
 418:	str	x21, [sp, #16]
 41c:	stp	x20, x19, [sp, #32]
 420:	mov	x29, sp
 424:	cbz	x1, 4e8 <gzungetc+0xd4>
 428:	ldr	w8, [x1, #24]
 42c:	mov	w9, #0x1c4f                	// #7247
 430:	mov	x20, x1
 434:	cmp	w8, w9
 438:	b.ne	4e8 <gzungetc+0xd4>  // b.any
 43c:	ldr	w8, [x20, #108]
 440:	mov	w19, w0
 444:	cbz	w8, 450 <gzungetc+0x3c>
 448:	cmn	w8, #0x5
 44c:	b.ne	4e8 <gzungetc+0xd4>  // b.any
 450:	ldr	w8, [x20, #104]
 454:	cbz	w8, 464 <gzungetc+0x50>
 458:	ldr	x21, [x20, #96]
 45c:	str	wzr, [x20, #104]
 460:	cbnz	x21, 4c0 <gzungetc+0xac>
 464:	tbnz	w19, #31, 4e8 <gzungetc+0xd4>
 468:	ldr	w9, [x20]
 46c:	cbz	w9, 500 <gzungetc+0xec>
 470:	ldr	w8, [x20, #40]
 474:	lsl	w10, w8, #1
 478:	cmp	w9, w10
 47c:	b.ne	524 <gzungetc+0x110>  // b.any
 480:	adrp	x2, 0 <gzread>
 484:	add	x2, x2, #0x0
 488:	mov	w1, #0xfffffffd            	// #-3
 48c:	mov	x0, x20
 490:	bl	0 <gz_error>
 494:	b	4e8 <gzungetc+0xd4>
 498:	ldp	x9, x10, [x20, #8]
 49c:	cmp	x21, x8
 4a0:	csel	w11, w21, w8, lt  // lt = tstop
 4a4:	sub	w8, w8, w11
 4a8:	str	w8, [x20]
 4ac:	add	x8, x9, x11
 4b0:	add	x9, x10, x11
 4b4:	sub	x21, x21, x11
 4b8:	stp	x8, x9, [x20, #8]
 4bc:	cbz	x21, 464 <gzungetc+0x50>
 4c0:	ldr	w8, [x20]
 4c4:	cbnz	w8, 498 <gzungetc+0x84>
 4c8:	ldr	w8, [x20, #80]
 4cc:	cbz	w8, 4d8 <gzungetc+0xc4>
 4d0:	ldr	w8, [x20, #128]
 4d4:	cbz	w8, 464 <gzungetc+0x50>
 4d8:	mov	x0, x20
 4dc:	bl	71c <gz_fetch>
 4e0:	cmn	w0, #0x1
 4e4:	b.ne	4bc <gzungetc+0xa8>  // b.any
 4e8:	mov	w19, #0xffffffff            	// #-1
 4ec:	mov	w0, w19
 4f0:	ldp	x20, x19, [sp, #32]
 4f4:	ldr	x21, [sp, #16]
 4f8:	ldp	x29, x30, [sp], #48
 4fc:	ret
 500:	ldr	w8, [x20, #40]
 504:	ldr	x9, [x20, #56]
 508:	mov	w10, #0x1                   	// #1
 50c:	str	w10, [x20]
 510:	lsl	w8, w8, #1
 514:	add	x8, x9, x8
 518:	sub	x9, x8, #0x1
 51c:	str	x9, [x20, #8]
 520:	b	56c <gzungetc+0x158>
 524:	ldr	x8, [x20, #8]
 528:	ldr	x11, [x20, #56]
 52c:	cmp	x8, x11
 530:	b.ne	55c <gzungetc+0x148>  // b.any
 534:	add	x10, x8, w10, uxtw
 538:	add	x9, x8, x9
 53c:	mov	x8, x10
 540:	ldrb	w10, [x9, #-1]!
 544:	strb	w10, [x8, #-1]!
 548:	ldr	x10, [x20, #56]
 54c:	cmp	x9, x10
 550:	b.hi	540 <gzungetc+0x12c>  // b.pmore
 554:	ldr	w9, [x20]
 558:	str	x8, [x20, #8]
 55c:	add	w9, w9, #0x1
 560:	sub	x10, x8, #0x1
 564:	str	w9, [x20]
 568:	str	x10, [x20, #8]
 56c:	sturb	w19, [x8, #-1]
 570:	ldr	x8, [x20, #16]
 574:	str	wzr, [x20, #84]
 578:	sub	x8, x8, #0x1
 57c:	str	x8, [x20, #16]
 580:	b	4ec <gzungetc+0xd8>

0000000000000584 <gzgets>:
 584:	stp	x29, x30, [sp, #-80]!
 588:	stp	x20, x19, [sp, #64]
 58c:	mov	x20, x0
 590:	mov	x0, xzr
 594:	str	x25, [sp, #16]
 598:	stp	x24, x23, [sp, #32]
 59c:	stp	x22, x21, [sp, #48]
 5a0:	mov	x29, sp
 5a4:	cbz	x20, 704 <gzgets+0x180>
 5a8:	mov	x19, x1
 5ac:	cbz	x1, 704 <gzgets+0x180>
 5b0:	mov	w21, w2
 5b4:	cmp	w2, #0x1
 5b8:	b.lt	704 <gzgets+0x180>  // b.tstop
 5bc:	ldr	w8, [x20, #24]
 5c0:	mov	w9, #0x1c4f                	// #7247
 5c4:	cmp	w8, w9
 5c8:	b.ne	700 <gzgets+0x17c>  // b.any
 5cc:	ldr	w8, [x20, #108]
 5d0:	cbz	w8, 5dc <gzgets+0x58>
 5d4:	cmn	w8, #0x5
 5d8:	b.ne	700 <gzgets+0x17c>  // b.any
 5dc:	ldr	w8, [x20, #104]
 5e0:	cbz	w8, 5f0 <gzgets+0x6c>
 5e4:	ldr	x22, [x20, #96]
 5e8:	str	wzr, [x20, #104]
 5ec:	cbnz	x22, 6b8 <gzgets+0x134>
 5f0:	subs	w25, w21, #0x1
 5f4:	b.eq	700 <gzgets+0x17c>  // b.none
 5f8:	ldr	w8, [x20]
 5fc:	mov	x21, x19
 600:	cbnz	w8, 61c <gzgets+0x98>
 604:	mov	x0, x20
 608:	bl	71c <gz_fetch>
 60c:	cmn	w0, #0x1
 610:	b.eq	700 <gzgets+0x17c>  // b.none
 614:	ldr	w8, [x20]
 618:	cbz	w8, 6e4 <gzgets+0x160>
 61c:	ldr	x23, [x20, #8]
 620:	cmp	w8, w25
 624:	csel	w22, w25, w8, hi  // hi = pmore
 628:	mov	w1, #0xa                   	// #10
 62c:	mov	x0, x23
 630:	mov	x2, x22
 634:	bl	0 <memchr>
 638:	mov	x24, x0
 63c:	sub	w8, w24, w23
 640:	cmp	x0, #0x0
 644:	csinc	w22, w22, w8, eq  // eq = none
 648:	mov	x0, x21
 64c:	mov	x1, x23
 650:	mov	x2, x22
 654:	bl	0 <memcpy>
 658:	ldr	w8, [x20]
 65c:	ldp	x9, x10, [x20, #8]
 660:	add	x21, x21, x22
 664:	sub	w8, w8, w22
 668:	add	x9, x9, x22
 66c:	add	x10, x10, x22
 670:	str	w8, [x20]
 674:	stp	x9, x10, [x20, #8]
 678:	cbnz	x24, 684 <gzgets+0x100>
 67c:	sub	w25, w25, w22
 680:	cbnz	w25, 600 <gzgets+0x7c>
 684:	cmp	x21, x19
 688:	b.ne	6f4 <gzgets+0x170>  // b.any
 68c:	b	700 <gzgets+0x17c>
 690:	ldp	x9, x10, [x20, #8]
 694:	cmp	x22, x8
 698:	csel	w11, w22, w8, lt  // lt = tstop
 69c:	sub	w8, w8, w11
 6a0:	str	w8, [x20]
 6a4:	add	x8, x9, x11
 6a8:	add	x9, x10, x11
 6ac:	sub	x22, x22, x11
 6b0:	stp	x8, x9, [x20, #8]
 6b4:	cbz	x22, 5f0 <gzgets+0x6c>
 6b8:	ldr	w8, [x20]
 6bc:	cbnz	w8, 690 <gzgets+0x10c>
 6c0:	ldr	w8, [x20, #80]
 6c4:	cbz	w8, 6d0 <gzgets+0x14c>
 6c8:	ldr	w8, [x20, #128]
 6cc:	cbz	w8, 5f0 <gzgets+0x6c>
 6d0:	mov	x0, x20
 6d4:	bl	71c <gz_fetch>
 6d8:	cmn	w0, #0x1
 6dc:	b.ne	6b4 <gzgets+0x130>  // b.any
 6e0:	b	700 <gzgets+0x17c>
 6e4:	mov	w8, #0x1                   	// #1
 6e8:	str	w8, [x20, #84]
 6ec:	cmp	x21, x19
 6f0:	b.eq	700 <gzgets+0x17c>  // b.none
 6f4:	mov	x0, x19
 6f8:	strb	wzr, [x21]
 6fc:	b	704 <gzgets+0x180>
 700:	mov	x0, xzr
 704:	ldp	x20, x19, [sp, #64]
 708:	ldp	x22, x21, [sp, #48]
 70c:	ldp	x24, x23, [sp, #32]
 710:	ldr	x25, [sp, #16]
 714:	ldp	x29, x30, [sp], #80
 718:	ret

000000000000071c <gz_fetch>:
 71c:	stp	x29, x30, [sp, #-48]!
 720:	stp	x20, x19, [sp, #32]
 724:	mov	x19, x0
 728:	stp	x22, x21, [sp, #16]
 72c:	mov	x29, sp
 730:	ldr	w8, [x19, #68]
 734:	cbz	w8, 74c <gz_fetch+0x30>
 738:	cmp	w8, #0x2
 73c:	b.eq	768 <gz_fetch+0x4c>  // b.none
 740:	cmp	w8, #0x1
 744:	b.ne	78c <gz_fetch+0x70>  // b.any
 748:	b	7ac <gz_fetch+0x90>
 74c:	mov	x0, x19
 750:	bl	8a4 <gz_look>
 754:	cmn	w0, #0x1
 758:	b.eq	800 <gz_fetch+0xe4>  // b.none
 75c:	ldr	w8, [x19, #68]
 760:	cbnz	w8, 78c <gz_fetch+0x70>
 764:	b	7a4 <gz_fetch+0x88>
 768:	ldr	w8, [x19, #40]
 76c:	ldr	x9, [x19, #56]
 770:	mov	x0, x19
 774:	lsl	w8, w8, #1
 778:	str	w8, [x19, #152]
 77c:	str	x9, [x19, #144]
 780:	bl	b78 <gz_decomp>
 784:	cmn	w0, #0x1
 788:	b.eq	800 <gz_fetch+0xe4>  // b.none
 78c:	ldr	w8, [x19]
 790:	cbnz	w8, 7a4 <gz_fetch+0x88>
 794:	ldr	w8, [x19, #80]
 798:	cbz	w8, 730 <gz_fetch+0x14>
 79c:	ldr	w8, [x19, #128]
 7a0:	cbnz	w8, 730 <gz_fetch+0x14>
 7a4:	mov	w20, wzr
 7a8:	b	844 <gz_fetch+0x128>
 7ac:	ldr	w9, [x19, #40]
 7b0:	ldr	x20, [x19, #56]
 7b4:	mov	w8, wzr
 7b8:	mov	w22, #0x40000000            	// #1073741824
 7bc:	lsl	w21, w9, #1
 7c0:	str	wzr, [x19]
 7c4:	sub	w9, w21, w8
 7c8:	ldr	w0, [x19, #28]
 7cc:	lsr	w10, w9, #30
 7d0:	cmp	w10, #0x0
 7d4:	csel	w2, w9, w22, eq  // eq = none
 7d8:	add	x1, x20, w8, uxtw
 7dc:	bl	0 <read>
 7e0:	cmp	w0, #0x1
 7e4:	b.lt	808 <gz_fetch+0xec>  // b.tstop
 7e8:	ldr	w8, [x19]
 7ec:	add	w8, w8, w0
 7f0:	cmp	w8, w21
 7f4:	str	w8, [x19]
 7f8:	b.cc	7c4 <gz_fetch+0xa8>  // b.lo, b.ul, b.last
 7fc:	b	814 <gz_fetch+0xf8>
 800:	mov	w20, #0xffffffff            	// #-1
 804:	b	844 <gz_fetch+0x128>
 808:	tbnz	w0, #31, 824 <gz_fetch+0x108>
 80c:	mov	w8, #0x1                   	// #1
 810:	str	w8, [x19, #80]
 814:	ldr	x8, [x19, #56]
 818:	mov	w20, wzr
 81c:	str	x8, [x19, #8]
 820:	b	844 <gz_fetch+0x128>
 824:	bl	0 <__errno_location>
 828:	ldr	w0, [x0]
 82c:	bl	0 <strerror>
 830:	mov	x2, x0
 834:	mov	w1, #0xffffffff            	// #-1
 838:	mov	x0, x19
 83c:	mov	w20, #0xffffffff            	// #-1
 840:	bl	0 <gz_error>
 844:	mov	w0, w20
 848:	ldp	x20, x19, [sp, #32]
 84c:	ldp	x22, x21, [sp, #16]
 850:	ldp	x29, x30, [sp], #48
 854:	ret

0000000000000858 <gzdirect>:
 858:	cbz	x0, 8a0 <gzdirect+0x48>
 85c:	stp	x29, x30, [sp, #-32]!
 860:	ldr	w8, [x0, #24]
 864:	mov	w9, #0x1c4f                	// #7247
 868:	str	x19, [sp, #16]
 86c:	mov	x19, x0
 870:	cmp	w8, w9
 874:	mov	x29, sp
 878:	b.ne	894 <gzdirect+0x3c>  // b.any
 87c:	ldr	w8, [x19, #68]
 880:	cbnz	w8, 894 <gzdirect+0x3c>
 884:	ldr	w8, [x19]
 888:	cbnz	w8, 894 <gzdirect+0x3c>
 88c:	mov	x0, x19
 890:	bl	8a4 <gz_look>
 894:	ldr	w0, [x19, #64]
 898:	ldr	x19, [sp, #16]
 89c:	ldp	x29, x30, [sp], #32
 8a0:	ret

00000000000008a4 <gz_look>:
 8a4:	stp	x29, x30, [sp, #-64]!
 8a8:	stp	x24, x23, [sp, #16]
 8ac:	stp	x22, x21, [sp, #32]
 8b0:	stp	x20, x19, [sp, #48]
 8b4:	ldr	w8, [x0, #40]
 8b8:	mov	x19, x0
 8bc:	add	x20, x0, #0x78
 8c0:	mov	x29, sp
 8c4:	cbz	w8, 908 <gz_look+0x64>
 8c8:	ldr	w21, [x19, #128]
 8cc:	cmp	w21, #0x1
 8d0:	b.hi	a1c <gz_look+0x178>  // b.pmore
 8d4:	ldr	w8, [x19, #108]
 8d8:	cbz	w8, 8e4 <gz_look+0x40>
 8dc:	cmn	w8, #0x5
 8e0:	b.ne	998 <gz_look+0xf4>  // b.any
 8e4:	ldr	w8, [x19, #80]
 8e8:	cbnz	w8, a10 <gz_look+0x16c>
 8ec:	cbz	w21, 9a0 <gz_look+0xfc>
 8f0:	ldr	x8, [x19, #120]
 8f4:	ldr	x9, [x19, #48]
 8f8:	ldrb	w8, [x8]
 8fc:	strb	w8, [x9]
 900:	ldr	w8, [x19, #128]
 904:	b	9a4 <gz_look+0x100>
 908:	ldr	w21, [x19, #44]
 90c:	mov	x0, x21
 910:	bl	0 <malloc>
 914:	mov	x22, x0
 918:	str	x0, [x19, #48]
 91c:	lsl	w0, w21, #1
 920:	bl	0 <malloc>
 924:	str	x0, [x19, #56]
 928:	cbz	x22, 978 <gz_look+0xd4>
 92c:	cbz	x0, 978 <gz_look+0xd4>
 930:	adrp	x2, 0 <gzread>
 934:	add	x2, x2, #0x0
 938:	mov	w1, #0x1f                  	// #31
 93c:	mov	w3, #0x70                  	// #112
 940:	mov	x0, x20
 944:	str	w21, [x19, #40]
 948:	str	wzr, [x19, #128]
 94c:	str	xzr, [x19, #120]
 950:	stp	xzr, xzr, [x19, #192]
 954:	str	xzr, [x19, #184]
 958:	bl	0 <inflateInit2_>
 95c:	cbz	w0, 8c8 <gz_look+0x24>
 960:	ldr	x0, [x19, #56]
 964:	bl	0 <free>
 968:	ldr	x0, [x19, #48]
 96c:	bl	0 <free>
 970:	str	wzr, [x19, #40]
 974:	b	984 <gz_look+0xe0>
 978:	bl	0 <free>
 97c:	ldr	x0, [x19, #48]
 980:	bl	0 <free>
 984:	adrp	x2, 0 <gzread>
 988:	add	x2, x2, #0x0
 98c:	mov	w1, #0xfffffffc            	// #-4
 990:	mov	x0, x19
 994:	bl	0 <gz_error>
 998:	mov	w21, #0xffffffff            	// #-1
 99c:	b	a9c <gz_look+0x1f8>
 9a0:	mov	w8, wzr
 9a4:	ldr	x9, [x19, #48]
 9a8:	ldr	w10, [x19, #40]
 9ac:	mov	w21, wzr
 9b0:	mov	w24, #0x40000000            	// #1073741824
 9b4:	add	x22, x9, w8, uxtw
 9b8:	sub	w23, w10, w8
 9bc:	sub	w8, w23, w21
 9c0:	ldr	w0, [x19, #28]
 9c4:	lsr	w9, w8, #30
 9c8:	cmp	w9, #0x0
 9cc:	csel	w2, w8, w24, eq  // eq = none
 9d0:	add	x1, x22, w21, uxtw
 9d4:	bl	0 <read>
 9d8:	cmp	w0, #0x1
 9dc:	b.lt	9f0 <gz_look+0x14c>  // b.tstop
 9e0:	add	w21, w21, w0
 9e4:	cmp	w21, w23
 9e8:	b.cc	9bc <gz_look+0x118>  // b.lo, b.ul, b.last
 9ec:	b	9fc <gz_look+0x158>
 9f0:	tbnz	w0, #31, ab4 <gz_look+0x210>
 9f4:	mov	w8, #0x1                   	// #1
 9f8:	str	w8, [x19, #80]
 9fc:	ldr	w8, [x19, #128]
 a00:	ldr	x9, [x19, #48]
 a04:	add	w21, w8, w21
 a08:	str	w21, [x19, #128]
 a0c:	str	x9, [x19, #120]
 a10:	cbz	w21, a9c <gz_look+0x1f8>
 a14:	cmp	w21, #0x1
 a18:	b.eq	a50 <gz_look+0x1ac>  // b.none
 a1c:	ldr	x8, [x20]
 a20:	ldrb	w9, [x8]
 a24:	cmp	w9, #0x1f
 a28:	b.ne	a50 <gz_look+0x1ac>  // b.any
 a2c:	ldrb	w8, [x8, #1]
 a30:	cmp	w8, #0x8b
 a34:	b.ne	a50 <gz_look+0x1ac>  // b.any
 a38:	mov	x0, x20
 a3c:	bl	0 <inflateReset>
 a40:	adrp	x8, 0 <gzread>
 a44:	ldr	d0, [x8]
 a48:	mov	w21, wzr
 a4c:	b	a80 <gz_look+0x1dc>
 a50:	ldr	w8, [x19, #64]
 a54:	cbz	w8, a88 <gz_look+0x1e4>
 a58:	ldr	x0, [x19, #56]
 a5c:	ldr	x1, [x19, #120]
 a60:	mov	w2, w21
 a64:	str	x0, [x19, #8]
 a68:	bl	0 <memcpy>
 a6c:	ldr	w8, [x19, #128]
 a70:	mov	w21, wzr
 a74:	movi	v0.2s, #0x1
 a78:	str	wzr, [x19, #128]
 a7c:	str	w8, [x19]
 a80:	str	d0, [x19, #64]
 a84:	b	a9c <gz_look+0x1f8>
 a88:	mov	w8, #0x1                   	// #1
 a8c:	mov	w21, wzr
 a90:	str	wzr, [x19, #128]
 a94:	str	w8, [x19, #80]
 a98:	str	wzr, [x19]
 a9c:	mov	w0, w21
 aa0:	ldp	x20, x19, [sp, #48]
 aa4:	ldp	x22, x21, [sp, #32]
 aa8:	ldp	x24, x23, [sp, #16]
 aac:	ldp	x29, x30, [sp], #64
 ab0:	ret
 ab4:	bl	0 <__errno_location>
 ab8:	ldr	w0, [x0]
 abc:	bl	0 <strerror>
 ac0:	mov	x2, x0
 ac4:	mov	w1, #0xffffffff            	// #-1
 ac8:	mov	x0, x19
 acc:	mov	w21, #0xffffffff            	// #-1
 ad0:	bl	0 <gz_error>
 ad4:	b	a9c <gz_look+0x1f8>

0000000000000ad8 <gzclose_r>:
 ad8:	stp	x29, x30, [sp, #-48]!
 adc:	str	x21, [sp, #16]
 ae0:	stp	x20, x19, [sp, #32]
 ae4:	mov	x29, sp
 ae8:	cbz	x0, b64 <gzclose_r+0x8c>
 aec:	ldr	w8, [x0, #24]
 af0:	mov	w9, #0x1c4f                	// #7247
 af4:	mov	x19, x0
 af8:	cmp	w8, w9
 afc:	b.ne	b64 <gzclose_r+0x8c>  // b.any
 b00:	ldr	w8, [x19, #40]
 b04:	cbz	w8, b20 <gzclose_r+0x48>
 b08:	add	x0, x19, #0x78
 b0c:	bl	0 <inflateEnd>
 b10:	ldr	x0, [x19, #56]
 b14:	bl	0 <free>
 b18:	ldr	x0, [x19, #48]
 b1c:	bl	0 <free>
 b20:	ldr	w8, [x19, #108]
 b24:	mov	x0, x19
 b28:	mov	w1, wzr
 b2c:	mov	x2, xzr
 b30:	cmn	w8, #0x5
 b34:	csel	w21, w8, wzr, eq  // eq = none
 b38:	bl	0 <gz_error>
 b3c:	ldr	x0, [x19, #32]
 b40:	bl	0 <free>
 b44:	ldr	w0, [x19, #28]
 b48:	bl	0 <close>
 b4c:	mov	w20, w0
 b50:	mov	x0, x19
 b54:	bl	0 <free>
 b58:	cmp	w20, #0x0
 b5c:	csinv	w0, w21, wzr, eq  // eq = none
 b60:	b	b68 <gzclose_r+0x90>
 b64:	mov	w0, #0xfffffffe            	// #-2
 b68:	ldp	x20, x19, [sp, #32]
 b6c:	ldr	x21, [sp, #16]
 b70:	ldp	x29, x30, [sp], #48
 b74:	ret

0000000000000b78 <gz_decomp>:
 b78:	stp	x29, x30, [sp, #-96]!
 b7c:	stp	x28, x27, [sp, #16]
 b80:	stp	x26, x25, [sp, #32]
 b84:	stp	x24, x23, [sp, #48]
 b88:	stp	x22, x21, [sp, #64]
 b8c:	stp	x20, x19, [sp, #80]
 b90:	ldr	w22, [x0, #152]
 b94:	adrp	x25, 0 <gzread>
 b98:	mov	x19, x0
 b9c:	mov	w20, wzr
 ba0:	add	x21, x0, #0x78
 ba4:	mov	w23, #0x40000000            	// #1073741824
 ba8:	mov	w24, #0x1                   	// #1
 bac:	add	x25, x25, #0x0
 bb0:	mov	x29, sp
 bb4:	ldr	w8, [x19, #128]
 bb8:	cbnz	w8, c34 <gz_decomp+0xbc>
 bbc:	ldr	w8, [x19, #108]
 bc0:	cbz	w8, bcc <gz_decomp+0x54>
 bc4:	cmn	w8, #0x5
 bc8:	b.ne	cf4 <gz_decomp+0x17c>  // b.any
 bcc:	ldr	w8, [x19, #80]
 bd0:	cbnz	w8, c74 <gz_decomp+0xfc>
 bd4:	ldr	x27, [x19, #48]
 bd8:	ldr	w28, [x19, #40]
 bdc:	mov	w26, wzr
 be0:	sub	w8, w28, w26
 be4:	ldr	w0, [x19, #28]
 be8:	lsr	w9, w8, #30
 bec:	cmp	w9, #0x0
 bf0:	csel	w2, w8, w23, eq  // eq = none
 bf4:	add	x1, x27, w26, uxtw
 bf8:	bl	0 <read>
 bfc:	cmp	w0, #0x1
 c00:	b.lt	c14 <gz_decomp+0x9c>  // b.tstop
 c04:	add	w26, w26, w0
 c08:	cmp	w26, w28
 c0c:	b.cc	be0 <gz_decomp+0x68>  // b.lo, b.ul, b.last
 c10:	b	c1c <gz_decomp+0xa4>
 c14:	tbnz	w0, #31, d18 <gz_decomp+0x1a0>
 c18:	str	w24, [x19, #80]
 c1c:	ldr	w8, [x19, #128]
 c20:	ldr	x9, [x19, #48]
 c24:	adds	w8, w8, w26
 c28:	str	w8, [x19, #128]
 c2c:	str	x9, [x19, #120]
 c30:	b.eq	c74 <gz_decomp+0xfc>  // b.none
 c34:	mov	x0, x21
 c38:	mov	w1, wzr
 c3c:	bl	0 <inflate>
 c40:	add	w8, w0, #0x4
 c44:	mov	w20, w0
 c48:	cmp	w8, #0x6
 c4c:	b.hi	c60 <gz_decomp+0xe8>  // b.pmore
 c50:	adr	x9, c60 <gz_decomp+0xe8>
 c54:	ldrb	w10, [x25, x8]
 c58:	add	x9, x9, x10, lsl #2
 c5c:	br	x9
 c60:	ldr	w8, [x19, #152]
 c64:	cmp	w20, #0x1
 c68:	b.eq	c8c <gz_decomp+0x114>  // b.none
 c6c:	cbnz	w8, bb4 <gz_decomp+0x3c>
 c70:	b	c8c <gz_decomp+0x114>
 c74:	adrp	x2, 0 <gzread>
 c78:	add	x2, x2, #0x0
 c7c:	mov	w1, #0xfffffffb            	// #-5
 c80:	mov	x0, x19
 c84:	bl	0 <gz_error>
 c88:	ldr	w8, [x19, #152]
 c8c:	ldr	x9, [x19, #144]
 c90:	sub	w8, w22, w8
 c94:	str	w8, [x19]
 c98:	cmp	w20, #0x1
 c9c:	sub	x8, x9, x8
 ca0:	mov	w20, wzr
 ca4:	str	x8, [x19, #8]
 ca8:	b.ne	cf8 <gz_decomp+0x180>  // b.any
 cac:	str	wzr, [x19, #68]
 cb0:	b	cf8 <gz_decomp+0x180>
 cb4:	adrp	x2, 0 <gzread>
 cb8:	add	x2, x2, #0x0
 cbc:	mov	w1, #0xfffffffe            	// #-2
 cc0:	b	cec <gz_decomp+0x174>
 cc4:	adrp	x2, 0 <gzread>
 cc8:	add	x2, x2, #0x0
 ccc:	mov	w1, #0xfffffffc            	// #-4
 cd0:	b	cec <gz_decomp+0x174>
 cd4:	ldr	x8, [x19, #168]
 cd8:	adrp	x9, 0 <gzread>
 cdc:	add	x9, x9, #0x0
 ce0:	mov	w1, #0xfffffffd            	// #-3
 ce4:	cmp	x8, #0x0
 ce8:	csel	x2, x9, x8, eq  // eq = none
 cec:	mov	x0, x19
 cf0:	bl	0 <gz_error>
 cf4:	mov	w20, #0xffffffff            	// #-1
 cf8:	mov	w0, w20
 cfc:	ldp	x20, x19, [sp, #80]
 d00:	ldp	x22, x21, [sp, #64]
 d04:	ldp	x24, x23, [sp, #48]
 d08:	ldp	x26, x25, [sp, #32]
 d0c:	ldp	x28, x27, [sp, #16]
 d10:	ldp	x29, x30, [sp], #96
 d14:	ret
 d18:	bl	0 <__errno_location>
 d1c:	ldr	w0, [x0]
 d20:	bl	0 <strerror>
 d24:	mov	x2, x0
 d28:	mov	w1, #0xffffffff            	// #-1
 d2c:	mov	x0, x19
 d30:	mov	w20, #0xffffffff            	// #-1
 d34:	bl	0 <gz_error>
 d38:	b	cf8 <gz_decomp+0x180>

gzwrite.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzwrite>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	cbz	x0, 28 <gzwrite+0x28>
   c:	ldr	w8, [x0, #24]
  10:	mov	w9, #0x79b1                	// #31153
  14:	cmp	w8, w9
  18:	b.ne	24 <gzwrite+0x24>  // b.any
  1c:	ldr	w8, [x0, #108]
  20:	cbz	w8, 30 <gzwrite+0x30>
  24:	mov	w0, wzr
  28:	ldp	x29, x30, [sp], #16
  2c:	ret
  30:	tbnz	w2, #31, 44 <gzwrite+0x44>
  34:	mov	w2, w2
  38:	bl	58 <gz_write>
  3c:	ldp	x29, x30, [sp], #16
  40:	ret
  44:	adrp	x2, 0 <gzwrite>
  48:	add	x2, x2, #0x0
  4c:	mov	w1, #0xfffffffd            	// #-3
  50:	bl	0 <gz_error>
  54:	b	24 <gzwrite+0x24>

0000000000000058 <gz_write>:
  58:	stp	x29, x30, [sp, #-64]!
  5c:	stp	x20, x19, [sp, #48]
  60:	mov	x19, x2
  64:	stp	x24, x23, [sp, #16]
  68:	stp	x22, x21, [sp, #32]
  6c:	mov	x29, sp
  70:	cbz	x2, 22c <gz_write+0x1d4>
  74:	ldr	w8, [x0, #40]
  78:	mov	x21, x1
  7c:	mov	x20, x0
  80:	cbnz	w8, 94 <gz_write+0x3c>
  84:	mov	x0, x20
  88:	bl	684 <gz_init>
  8c:	cmn	w0, #0x1
  90:	b.eq	228 <gz_write+0x1d0>  // b.none
  94:	ldr	w8, [x20, #104]
  98:	cbz	w8, 12c <gz_write+0xd4>
  9c:	ldr	w8, [x20, #128]
  a0:	ldr	x23, [x20, #96]
  a4:	str	wzr, [x20, #104]
  a8:	cbz	w8, c0 <gz_write+0x68>
  ac:	mov	x0, x20
  b0:	mov	w1, wzr
  b4:	bl	770 <gz_comp>
  b8:	cmn	w0, #0x1
  bc:	b.eq	228 <gz_write+0x1d0>  // b.none
  c0:	cbz	x23, 12c <gz_write+0xd4>
  c4:	mov	w8, wzr
  c8:	ldr	w9, [x20, #40]
  cc:	cmp	x23, x9
  d0:	csel	w24, w23, w9, lt  // lt = tstop
  d4:	tbz	w8, #0, e0 <gz_write+0x88>
  d8:	mov	w22, w24
  dc:	b	f4 <gz_write+0x9c>
  e0:	ldr	x0, [x20, #48]
  e4:	mov	w22, w24
  e8:	mov	w1, wzr
  ec:	mov	x2, x22
  f0:	bl	0 <memset>
  f4:	ldr	x8, [x20, #48]
  f8:	ldr	x9, [x20, #16]
  fc:	mov	x0, x20
 100:	mov	w1, wzr
 104:	str	x8, [x20, #120]
 108:	add	x8, x9, x22
 10c:	str	w24, [x20, #128]
 110:	str	x8, [x20, #16]
 114:	bl	770 <gz_comp>
 118:	cmn	w0, #0x1
 11c:	b.eq	228 <gz_write+0x1d0>  // b.none
 120:	sub	x23, x23, x22
 124:	mov	w8, #0x1                   	// #1
 128:	cbnz	x23, c8 <gz_write+0x70>
 12c:	ldr	w8, [x20, #40]
 130:	cmp	x8, x19
 134:	b.ls	1c0 <gz_write+0x168>  // b.plast
 138:	mov	x23, x19
 13c:	ldr	w8, [x20, #128]
 140:	cbz	w8, 150 <gz_write+0xf8>
 144:	ldr	x10, [x20, #120]
 148:	ldr	x9, [x20, #48]
 14c:	b	15c <gz_write+0x104>
 150:	ldr	x9, [x20, #48]
 154:	mov	x10, x9
 158:	str	x9, [x20, #120]
 15c:	ldr	w11, [x20, #40]
 160:	add	x8, x10, x8
 164:	sub	x8, x8, x9
 168:	add	x0, x9, w8, uxtw
 16c:	sub	w10, w11, w8
 170:	cmp	x23, x10
 174:	csel	w22, w23, w10, cc  // cc = lo, ul, last
 178:	mov	x1, x21
 17c:	mov	x2, x22
 180:	bl	0 <memcpy>
 184:	ldr	w8, [x20, #128]
 188:	ldr	x9, [x20, #16]
 18c:	subs	x23, x23, x22
 190:	add	w8, w22, w8
 194:	add	x9, x9, x22
 198:	str	w8, [x20, #128]
 19c:	str	x9, [x20, #16]
 1a0:	b.eq	22c <gz_write+0x1d4>  // b.none
 1a4:	mov	x0, x20
 1a8:	mov	w1, wzr
 1ac:	add	x21, x21, x22
 1b0:	bl	770 <gz_comp>
 1b4:	cmn	w0, #0x1
 1b8:	b.ne	13c <gz_write+0xe4>  // b.any
 1bc:	b	228 <gz_write+0x1d0>
 1c0:	ldr	w8, [x20, #128]
 1c4:	cbz	w8, 1dc <gz_write+0x184>
 1c8:	mov	x0, x20
 1cc:	mov	w1, wzr
 1d0:	bl	770 <gz_comp>
 1d4:	cmn	w0, #0x1
 1d8:	b.eq	228 <gz_write+0x1d0>  // b.none
 1dc:	str	x21, [x20, #120]
 1e0:	mov	w21, #0xffffffff            	// #-1
 1e4:	mov	x22, x19
 1e8:	ldr	x8, [x20, #16]
 1ec:	cmp	x22, x21
 1f0:	csel	x23, x22, x21, cc  // cc = lo, ul, last
 1f4:	mov	x0, x20
 1f8:	add	x8, x8, x23
 1fc:	mov	w1, wzr
 200:	str	w23, [x20, #128]
 204:	str	x8, [x20, #16]
 208:	bl	770 <gz_comp>
 20c:	cmn	w0, #0x1
 210:	csel	x8, xzr, x23, eq  // eq = none
 214:	cmn	w0, #0x1
 218:	b.eq	228 <gz_write+0x1d0>  // b.none
 21c:	sub	x22, x22, x8
 220:	cbnz	x22, 1e8 <gz_write+0x190>
 224:	b	22c <gz_write+0x1d4>
 228:	mov	x19, xzr
 22c:	mov	x0, x19
 230:	ldp	x20, x19, [sp, #48]
 234:	ldp	x22, x21, [sp, #32]
 238:	ldp	x24, x23, [sp, #16]
 23c:	ldp	x29, x30, [sp], #64
 240:	ret

0000000000000244 <gzfwrite>:
 244:	stp	x29, x30, [sp, #-32]!
 248:	str	x19, [sp, #16]
 24c:	mov	x29, sp
 250:	cbz	x3, 26c <gzfwrite+0x28>
 254:	ldr	w8, [x3, #24]
 258:	mov	w9, #0x79b1                	// #31153
 25c:	cmp	w8, w9
 260:	b.ne	26c <gzfwrite+0x28>  // b.any
 264:	ldr	w8, [x3, #108]
 268:	cbz	w8, 27c <gzfwrite+0x38>
 26c:	mov	x0, xzr
 270:	ldr	x19, [sp, #16]
 274:	ldp	x29, x30, [sp], #32
 278:	ret
 27c:	mov	x19, x1
 280:	umulh	x8, x19, x2
 284:	cmp	xzr, x8
 288:	mov	x1, x0
 28c:	cset	w8, ne  // ne = any
 290:	cbz	x19, 2b0 <gzfwrite+0x6c>
 294:	cbz	w8, 2b0 <gzfwrite+0x6c>
 298:	adrp	x2, 0 <gzwrite>
 29c:	add	x2, x2, #0x0
 2a0:	mov	w1, #0xfffffffe            	// #-2
 2a4:	mov	x0, x3
 2a8:	bl	0 <gz_error>
 2ac:	b	26c <gzfwrite+0x28>
 2b0:	mul	x2, x19, x2
 2b4:	cbz	x2, 26c <gzfwrite+0x28>
 2b8:	mov	x0, x3
 2bc:	bl	58 <gz_write>
 2c0:	udiv	x0, x0, x19
 2c4:	b	270 <gzfwrite+0x2c>

00000000000002c8 <gzputc>:
 2c8:	stp	x29, x30, [sp, #-64]!
 2cc:	str	x23, [sp, #16]
 2d0:	stp	x22, x21, [sp, #32]
 2d4:	stp	x20, x19, [sp, #48]
 2d8:	mov	x29, sp
 2dc:	cbz	x0, 2fc <gzputc+0x34>
 2e0:	ldr	w8, [x0, #24]
 2e4:	mov	w9, #0x79b1                	// #31153
 2e8:	mov	x20, x0
 2ec:	cmp	w8, w9
 2f0:	b.ne	2fc <gzputc+0x34>  // b.any
 2f4:	ldr	w8, [x20, #108]
 2f8:	cbz	w8, 314 <gzputc+0x4c>
 2fc:	mov	w0, #0xffffffff            	// #-1
 300:	ldp	x20, x19, [sp, #48]
 304:	ldp	x22, x21, [sp, #32]
 308:	ldr	x23, [sp, #16]
 30c:	ldp	x29, x30, [sp], #64
 310:	ret
 314:	ldr	w8, [x20, #104]
 318:	mov	w19, w1
 31c:	cbz	w8, 3b0 <gzputc+0xe8>
 320:	ldr	w8, [x20, #128]
 324:	ldr	x22, [x20, #96]
 328:	str	wzr, [x20, #104]
 32c:	cbz	w8, 344 <gzputc+0x7c>
 330:	mov	x0, x20
 334:	mov	w1, wzr
 338:	bl	770 <gz_comp>
 33c:	cmn	w0, #0x1
 340:	b.eq	300 <gzputc+0x38>  // b.none
 344:	cbz	x22, 3b0 <gzputc+0xe8>
 348:	mov	w8, wzr
 34c:	ldr	w9, [x20, #40]
 350:	cmp	x22, x9
 354:	csel	w23, w22, w9, lt  // lt = tstop
 358:	tbz	w8, #0, 364 <gzputc+0x9c>
 35c:	mov	w21, w23
 360:	b	378 <gzputc+0xb0>
 364:	ldr	x0, [x20, #48]
 368:	mov	w21, w23
 36c:	mov	w1, wzr
 370:	mov	x2, x21
 374:	bl	0 <memset>
 378:	ldr	x8, [x20, #48]
 37c:	ldr	x9, [x20, #16]
 380:	mov	x0, x20
 384:	mov	w1, wzr
 388:	str	x8, [x20, #120]
 38c:	add	x8, x9, x21
 390:	str	w23, [x20, #128]
 394:	str	x8, [x20, #16]
 398:	bl	770 <gz_comp>
 39c:	cmn	w0, #0x1
 3a0:	b.eq	300 <gzputc+0x38>  // b.none
 3a4:	sub	x22, x22, x21
 3a8:	mov	w8, #0x1                   	// #1
 3ac:	cbnz	x22, 34c <gzputc+0x84>
 3b0:	ldr	w8, [x20, #40]
 3b4:	cbz	w8, 40c <gzputc+0x144>
 3b8:	ldr	w9, [x20, #128]
 3bc:	cbz	w9, 3cc <gzputc+0x104>
 3c0:	ldr	x11, [x20, #120]
 3c4:	ldr	x10, [x20, #48]
 3c8:	b	3d8 <gzputc+0x110>
 3cc:	ldr	x10, [x20, #48]
 3d0:	mov	x11, x10
 3d4:	str	x10, [x20, #120]
 3d8:	add	x9, x11, x9
 3dc:	sub	x9, x9, x10
 3e0:	cmp	w8, w9
 3e4:	b.ls	40c <gzputc+0x144>  // b.plast
 3e8:	strb	w19, [x10, w9, uxtw]
 3ec:	ldr	w8, [x20, #128]
 3f0:	ldr	x9, [x20, #16]
 3f4:	and	w0, w19, #0xff
 3f8:	add	w8, w8, #0x1
 3fc:	add	x9, x9, #0x1
 400:	str	w8, [x20, #128]
 404:	str	x9, [x20, #16]
 408:	b	300 <gzputc+0x38>
 40c:	add	x1, x29, #0x1c
 410:	mov	w2, #0x1                   	// #1
 414:	mov	x0, x20
 418:	strb	w19, [x29, #28]
 41c:	bl	58 <gz_write>
 420:	and	w8, w19, #0xff
 424:	cmp	x0, #0x1
 428:	csinv	w0, w8, wzr, eq  // eq = none
 42c:	b	300 <gzputc+0x38>

0000000000000430 <gzputs>:
 430:	stp	x29, x30, [sp, #-48]!
 434:	str	x21, [sp, #16]
 438:	stp	x20, x19, [sp, #32]
 43c:	mov	x29, sp
 440:	cbz	x0, 460 <gzputs+0x30>
 444:	ldr	w8, [x0, #24]
 448:	mov	w9, #0x79b1                	// #31153
 44c:	mov	x20, x0
 450:	cmp	w8, w9
 454:	b.ne	460 <gzputs+0x30>  // b.any
 458:	ldr	w8, [x20, #108]
 45c:	cbz	w8, 474 <gzputs+0x44>
 460:	mov	w0, #0xffffffff            	// #-1
 464:	ldp	x20, x19, [sp, #32]
 468:	ldr	x21, [sp, #16]
 46c:	ldp	x29, x30, [sp], #48
 470:	ret
 474:	mov	x0, x1
 478:	mov	x19, x1
 47c:	bl	0 <strlen>
 480:	mov	x21, x0
 484:	mov	x0, x20
 488:	mov	x1, x19
 48c:	mov	x2, x21
 490:	bl	58 <gz_write>
 494:	cmp	w0, #0x0
 498:	ccmp	x21, #0x0, #0x4, eq  // eq = none
 49c:	csinv	w0, w0, wzr, eq  // eq = none
 4a0:	b	464 <gzputs+0x34>

00000000000004a4 <gzvprintf>:
 4a4:	sub	sp, sp, #0x60
 4a8:	stp	x29, x30, [sp, #32]
 4ac:	stp	x24, x23, [sp, #48]
 4b0:	stp	x22, x21, [sp, #64]
 4b4:	stp	x20, x19, [sp, #80]
 4b8:	add	x29, sp, #0x20
 4bc:	cbz	x0, 4dc <gzvprintf+0x38>
 4c0:	ldr	w8, [x0, #24]
 4c4:	mov	w9, #0x79b1                	// #31153
 4c8:	mov	x19, x0
 4cc:	cmp	w8, w9
 4d0:	b.ne	4dc <gzvprintf+0x38>  // b.any
 4d4:	ldr	w8, [x19, #108]
 4d8:	cbz	w8, 4fc <gzvprintf+0x58>
 4dc:	mov	w20, #0xfffffffe            	// #-2
 4e0:	mov	w0, w20
 4e4:	ldp	x20, x19, [sp, #80]
 4e8:	ldp	x22, x21, [sp, #64]
 4ec:	ldp	x24, x23, [sp, #48]
 4f0:	ldp	x29, x30, [sp, #32]
 4f4:	add	sp, sp, #0x60
 4f8:	ret
 4fc:	ldr	w8, [x19, #40]
 500:	mov	x21, x2
 504:	mov	x20, x1
 508:	cbnz	w8, 51c <gzvprintf+0x78>
 50c:	mov	x0, x19
 510:	bl	684 <gz_init>
 514:	cmn	w0, #0x1
 518:	b.eq	67c <gzvprintf+0x1d8>  // b.none
 51c:	ldr	w8, [x19, #104]
 520:	cbz	w8, 5b4 <gzvprintf+0x110>
 524:	ldr	w8, [x19, #128]
 528:	ldr	x23, [x19, #96]
 52c:	str	wzr, [x19, #104]
 530:	cbz	w8, 548 <gzvprintf+0xa4>
 534:	mov	x0, x19
 538:	mov	w1, wzr
 53c:	bl	770 <gz_comp>
 540:	cmn	w0, #0x1
 544:	b.eq	67c <gzvprintf+0x1d8>  // b.none
 548:	cbz	x23, 5b4 <gzvprintf+0x110>
 54c:	mov	w8, wzr
 550:	ldr	w9, [x19, #40]
 554:	cmp	x23, x9
 558:	csel	w24, w23, w9, lt  // lt = tstop
 55c:	tbz	w8, #0, 568 <gzvprintf+0xc4>
 560:	mov	w22, w24
 564:	b	57c <gzvprintf+0xd8>
 568:	ldr	x0, [x19, #48]
 56c:	mov	w22, w24
 570:	mov	w1, wzr
 574:	mov	x2, x22
 578:	bl	0 <memset>
 57c:	ldr	x8, [x19, #48]
 580:	ldr	x9, [x19, #16]
 584:	mov	x0, x19
 588:	mov	w1, wzr
 58c:	str	x8, [x19, #120]
 590:	add	x8, x9, x22
 594:	str	w24, [x19, #128]
 598:	str	x8, [x19, #16]
 59c:	bl	770 <gz_comp>
 5a0:	cmn	w0, #0x1
 5a4:	b.eq	67c <gzvprintf+0x1d8>  // b.none
 5a8:	sub	x23, x23, x22
 5ac:	mov	w8, #0x1                   	// #1
 5b0:	cbnz	x23, 550 <gzvprintf+0xac>
 5b4:	ldr	w8, [x19, #128]
 5b8:	cbz	w8, 5c4 <gzvprintf+0x120>
 5bc:	ldr	x9, [x19, #120]
 5c0:	b	5cc <gzvprintf+0x128>
 5c4:	ldr	x9, [x19, #48]
 5c8:	str	x9, [x19, #120]
 5cc:	ldr	w10, [x19, #40]
 5d0:	add	x22, x9, x8
 5d4:	mov	x3, sp
 5d8:	mov	x0, x22
 5dc:	sub	w8, w10, #0x1
 5e0:	strb	wzr, [x22, w8, uxtw]
 5e4:	ldp	q1, q0, [x21]
 5e8:	ldr	w1, [x19, #40]
 5ec:	mov	x2, x20
 5f0:	stp	q1, q0, [sp]
 5f4:	bl	0 <vsnprintf>
 5f8:	mov	w20, w0
 5fc:	cbz	w0, 4e0 <gzvprintf+0x3c>
 600:	ldr	w8, [x19, #40]
 604:	cmp	w20, w8
 608:	b.cs	618 <gzvprintf+0x174>  // b.hs, b.nlast
 60c:	sub	w9, w8, #0x1
 610:	ldrb	w9, [x22, w9, uxtw]
 614:	cbz	w9, 620 <gzvprintf+0x17c>
 618:	mov	w20, wzr
 61c:	b	4e0 <gzvprintf+0x3c>
 620:	ldr	w9, [x19, #128]
 624:	ldr	x10, [x19, #16]
 628:	add	w9, w9, w20
 62c:	add	x10, x10, w20, sxtw
 630:	subs	w21, w9, w8
 634:	str	w9, [x19, #128]
 638:	str	x10, [x19, #16]
 63c:	b.cc	4e0 <gzvprintf+0x3c>  // b.lo, b.ul, b.last
 640:	mov	x0, x19
 644:	mov	w1, wzr
 648:	str	w8, [x19, #128]
 64c:	bl	770 <gz_comp>
 650:	cmn	w0, #0x1
 654:	b.eq	67c <gzvprintf+0x1d8>  // b.none
 658:	ldr	x0, [x19, #48]
 65c:	ldr	w8, [x19, #40]
 660:	mov	w2, w21
 664:	add	x1, x0, x8
 668:	bl	0 <memcpy>
 66c:	ldr	x8, [x19, #48]
 670:	str	w21, [x19, #128]
 674:	str	x8, [x19, #120]
 678:	b	4e0 <gzvprintf+0x3c>
 67c:	ldr	w20, [x19, #108]
 680:	b	4e0 <gzvprintf+0x3c>

0000000000000684 <gz_init>:
 684:	stp	x29, x30, [sp, #-48]!
 688:	stp	x20, x19, [sp, #32]
 68c:	str	x21, [sp, #16]
 690:	ldr	w21, [x0, #44]
 694:	mov	x19, x0
 698:	mov	x29, sp
 69c:	lsl	w0, w21, #1
 6a0:	bl	0 <malloc>
 6a4:	str	x0, [x19, #48]
 6a8:	cbz	x0, 71c <gz_init+0x98>
 6ac:	ldr	w8, [x19, #64]
 6b0:	cbz	w8, 6c0 <gz_init+0x3c>
 6b4:	mov	w0, wzr
 6b8:	str	w21, [x19, #40]
 6bc:	b	734 <gz_init+0xb0>
 6c0:	mov	x20, x0
 6c4:	mov	x0, x21
 6c8:	bl	0 <malloc>
 6cc:	str	x0, [x19, #56]
 6d0:	cbz	x0, 714 <gz_init+0x90>
 6d4:	ldp	w1, w5, [x19, #88]
 6d8:	adrp	x6, 0 <gzwrite>
 6dc:	add	x0, x19, #0x78
 6e0:	add	x6, x6, #0x0
 6e4:	mov	w2, #0x8                   	// #8
 6e8:	mov	w3, #0x1f                  	// #31
 6ec:	mov	w4, #0x8                   	// #8
 6f0:	mov	w7, #0x70                  	// #112
 6f4:	stp	xzr, xzr, [x19, #184]
 6f8:	str	xzr, [x19, #200]
 6fc:	bl	0 <deflateInit2_>
 700:	cbz	w0, 744 <gz_init+0xc0>
 704:	ldr	x0, [x19, #56]
 708:	bl	0 <free>
 70c:	ldr	x0, [x19, #48]
 710:	b	718 <gz_init+0x94>
 714:	mov	x0, x20
 718:	bl	0 <free>
 71c:	adrp	x2, 0 <gzwrite>
 720:	add	x2, x2, #0x0
 724:	mov	w1, #0xfffffffc            	// #-4
 728:	mov	x0, x19
 72c:	bl	0 <gz_error>
 730:	mov	w0, #0xffffffff            	// #-1
 734:	ldp	x20, x19, [sp, #32]
 738:	ldr	x21, [sp, #16]
 73c:	ldp	x29, x30, [sp], #48
 740:	ret
 744:	ldr	w9, [x19, #64]
 748:	ldr	w8, [x19, #44]
 74c:	mov	w0, wzr
 750:	str	xzr, [x19, #120]
 754:	str	w8, [x19, #40]
 758:	cbnz	w9, 734 <gz_init+0xb0>
 75c:	ldr	x9, [x19, #56]
 760:	str	w8, [x19, #152]
 764:	str	x9, [x19, #144]
 768:	str	x9, [x19, #8]
 76c:	b	734 <gz_init+0xb0>

0000000000000770 <gz_comp>:
 770:	stp	x29, x30, [sp, #-64]!
 774:	stp	x22, x21, [sp, #32]
 778:	stp	x20, x19, [sp, #48]
 77c:	ldr	w8, [x0, #40]
 780:	mov	x19, x0
 784:	mov	w20, w1
 788:	str	x23, [sp, #16]
 78c:	mov	x29, sp
 790:	cbnz	w8, 7a4 <gz_comp+0x34>
 794:	mov	x0, x19
 798:	bl	684 <gz_init>
 79c:	cmn	w0, #0x1
 7a0:	b.eq	8f8 <gz_comp+0x188>  // b.none
 7a4:	ldr	w8, [x19, #64]
 7a8:	cbz	w8, 7f8 <gz_comp+0x88>
 7ac:	ldr	w8, [x19, #128]
 7b0:	cbz	w8, 7f0 <gz_comp+0x80>
 7b4:	ldr	x1, [x19, #120]
 7b8:	mov	w20, #0x40000000            	// #1073741824
 7bc:	ldr	w0, [x19, #28]
 7c0:	lsr	w9, w8, #30
 7c4:	cmp	w9, #0x0
 7c8:	csel	w2, w8, w20, eq  // eq = none
 7cc:	bl	0 <write>
 7d0:	tbnz	w0, #31, 8c0 <gz_comp+0x150>
 7d4:	ldr	w8, [x19, #128]
 7d8:	ldr	x9, [x19, #120]
 7dc:	subs	w8, w8, w0
 7e0:	add	x1, x9, w0, sxtw
 7e4:	str	w8, [x19, #128]
 7e8:	str	x1, [x19, #120]
 7ec:	b.ne	7bc <gz_comp+0x4c>  // b.any
 7f0:	mov	w20, wzr
 7f4:	b	8fc <gz_comp+0x18c>
 7f8:	ldr	w23, [x19, #152]
 7fc:	mov	w0, wzr
 800:	add	x21, x19, #0x78
 804:	mov	w22, #0x40000000            	// #1073741824
 808:	cbz	w23, 828 <gz_comp+0xb8>
 80c:	cmp	w20, #0x4
 810:	cset	w8, ne  // ne = any
 814:	cmp	w0, #0x1
 818:	cset	w9, eq  // eq = none
 81c:	cbz	w20, 888 <gz_comp+0x118>
 820:	orr	w8, w8, w9
 824:	cbz	w8, 888 <gz_comp+0x118>
 828:	ldr	x8, [x19, #144]
 82c:	ldr	x1, [x19, #8]
 830:	cmp	x8, x1
 834:	b.ls	870 <gz_comp+0x100>  // b.plast
 838:	sub	x8, x8, x1
 83c:	ldr	w0, [x19, #28]
 840:	cmp	x8, x22
 844:	csel	x8, x8, x22, lt  // lt = tstop
 848:	and	x2, x8, #0xffffffff
 84c:	bl	0 <write>
 850:	tbnz	w0, #31, 8c0 <gz_comp+0x150>
 854:	ldr	x9, [x19, #8]
 858:	ldr	x8, [x19, #144]
 85c:	add	x1, x9, w0, sxtw
 860:	cmp	x8, x1
 864:	str	x1, [x19, #8]
 868:	b.hi	838 <gz_comp+0xc8>  // b.pmore
 86c:	ldr	w23, [x19, #152]
 870:	cbnz	w23, 888 <gz_comp+0x118>
 874:	ldr	w23, [x19, #40]
 878:	ldr	x8, [x19, #56]
 87c:	str	w23, [x19, #152]
 880:	str	x8, [x19, #144]
 884:	str	x8, [x19, #8]
 888:	mov	x0, x21
 88c:	mov	w1, w20
 890:	bl	0 <deflate>
 894:	cmn	w0, #0x2
 898:	b.eq	8e4 <gz_comp+0x174>  // b.none
 89c:	ldr	w8, [x19, #152]
 8a0:	cmp	w23, w8
 8a4:	mov	w23, w8
 8a8:	b.ne	808 <gz_comp+0x98>  // b.any
 8ac:	cmp	w20, #0x4
 8b0:	b.ne	7f0 <gz_comp+0x80>  // b.any
 8b4:	mov	x0, x21
 8b8:	bl	0 <deflateReset>
 8bc:	b	7f0 <gz_comp+0x80>
 8c0:	bl	0 <__errno_location>
 8c4:	ldr	w0, [x0]
 8c8:	bl	0 <strerror>
 8cc:	mov	x2, x0
 8d0:	mov	w1, #0xffffffff            	// #-1
 8d4:	mov	x0, x19
 8d8:	mov	w20, #0xffffffff            	// #-1
 8dc:	bl	0 <gz_error>
 8e0:	b	8fc <gz_comp+0x18c>
 8e4:	adrp	x2, 0 <gzwrite>
 8e8:	add	x2, x2, #0x0
 8ec:	mov	w1, #0xfffffffe            	// #-2
 8f0:	mov	x0, x19
 8f4:	bl	0 <gz_error>
 8f8:	mov	w20, #0xffffffff            	// #-1
 8fc:	mov	w0, w20
 900:	ldp	x20, x19, [sp, #48]
 904:	ldp	x22, x21, [sp, #32]
 908:	ldr	x23, [sp, #16]
 90c:	ldp	x29, x30, [sp], #64
 910:	ret

0000000000000914 <gzprintf>:
 914:	sub	sp, sp, #0x100
 918:	stp	x29, x30, [sp, #240]
 91c:	add	x29, sp, #0xf0
 920:	mov	x8, #0xffffffffffffffd0    	// #-48
 924:	mov	x9, sp
 928:	sub	x10, x29, #0x70
 92c:	movk	x8, #0xff80, lsl #32
 930:	add	x11, x29, #0x10
 934:	add	x9, x9, #0x80
 938:	add	x10, x10, #0x30
 93c:	stp	x9, x8, [x29, #-16]
 940:	stp	x11, x10, [x29, #-32]
 944:	stp	x2, x3, [x29, #-112]
 948:	stp	x4, x5, [x29, #-96]
 94c:	stp	x6, x7, [x29, #-80]
 950:	stp	q1, q2, [sp, #16]
 954:	str	q0, [sp]
 958:	ldp	q0, q1, [x29, #-32]
 95c:	sub	x2, x29, #0x40
 960:	stp	q3, q4, [sp, #48]
 964:	stp	q5, q6, [sp, #80]
 968:	str	q7, [sp, #112]
 96c:	stp	q0, q1, [x29, #-64]
 970:	bl	4a4 <gzvprintf>
 974:	ldp	x29, x30, [sp, #240]
 978:	add	sp, sp, #0x100
 97c:	ret

0000000000000980 <gzflush>:
 980:	stp	x29, x30, [sp, #-64]!
 984:	str	x23, [sp, #16]
 988:	stp	x22, x21, [sp, #32]
 98c:	stp	x20, x19, [sp, #48]
 990:	mov	x29, sp
 994:	cbz	x0, a70 <gzflush+0xf0>
 998:	ldr	w8, [x0, #24]
 99c:	mov	w9, #0x79b1                	// #31153
 9a0:	mov	x19, x0
 9a4:	cmp	w8, w9
 9a8:	b.ne	a70 <gzflush+0xf0>  // b.any
 9ac:	mov	w20, w1
 9b0:	cmp	w1, #0x4
 9b4:	mov	w0, #0xfffffffe            	// #-2
 9b8:	b.hi	a74 <gzflush+0xf4>  // b.pmore
 9bc:	ldr	w8, [x19, #108]
 9c0:	cbnz	w8, a74 <gzflush+0xf4>
 9c4:	ldr	w8, [x19, #104]
 9c8:	cbz	w8, a5c <gzflush+0xdc>
 9cc:	ldr	w8, [x19, #128]
 9d0:	ldr	x22, [x19, #96]
 9d4:	str	wzr, [x19, #104]
 9d8:	cbz	w8, 9f0 <gzflush+0x70>
 9dc:	mov	x0, x19
 9e0:	mov	w1, wzr
 9e4:	bl	770 <gz_comp>
 9e8:	cmn	w0, #0x1
 9ec:	b.eq	a68 <gzflush+0xe8>  // b.none
 9f0:	cbz	x22, a5c <gzflush+0xdc>
 9f4:	mov	w8, wzr
 9f8:	ldr	w9, [x19, #40]
 9fc:	cmp	x22, x9
 a00:	csel	w23, w22, w9, lt  // lt = tstop
 a04:	tbz	w8, #0, a10 <gzflush+0x90>
 a08:	mov	w21, w23
 a0c:	b	a24 <gzflush+0xa4>
 a10:	ldr	x0, [x19, #48]
 a14:	mov	w21, w23
 a18:	mov	w1, wzr
 a1c:	mov	x2, x21
 a20:	bl	0 <memset>
 a24:	ldr	x8, [x19, #48]
 a28:	ldr	x9, [x19, #16]
 a2c:	mov	x0, x19
 a30:	mov	w1, wzr
 a34:	str	x8, [x19, #120]
 a38:	add	x8, x9, x21
 a3c:	str	w23, [x19, #128]
 a40:	str	x8, [x19, #16]
 a44:	bl	770 <gz_comp>
 a48:	cmn	w0, #0x1
 a4c:	b.eq	a68 <gzflush+0xe8>  // b.none
 a50:	sub	x22, x22, x21
 a54:	mov	w8, #0x1                   	// #1
 a58:	cbnz	x22, 9f8 <gzflush+0x78>
 a5c:	mov	x0, x19
 a60:	mov	w1, w20
 a64:	bl	770 <gz_comp>
 a68:	ldr	w0, [x19, #108]
 a6c:	b	a74 <gzflush+0xf4>
 a70:	mov	w0, #0xfffffffe            	// #-2
 a74:	ldp	x20, x19, [sp, #48]
 a78:	ldp	x22, x21, [sp, #32]
 a7c:	ldr	x23, [sp, #16]
 a80:	ldp	x29, x30, [sp], #64
 a84:	ret

0000000000000a88 <gzsetparams>:
 a88:	stp	x29, x30, [sp, #-64]!
 a8c:	stp	x24, x23, [sp, #16]
 a90:	stp	x22, x21, [sp, #32]
 a94:	stp	x20, x19, [sp, #48]
 a98:	mov	x29, sp
 a9c:	cbz	x0, abc <gzsetparams+0x34>
 aa0:	ldr	w8, [x0, #24]
 aa4:	mov	w9, #0x79b1                	// #31153
 aa8:	mov	x19, x0
 aac:	cmp	w8, w9
 ab0:	b.ne	abc <gzsetparams+0x34>  // b.any
 ab4:	ldr	w8, [x19, #108]
 ab8:	cbz	w8, ad4 <gzsetparams+0x4c>
 abc:	mov	w0, #0xfffffffe            	// #-2
 ac0:	ldp	x20, x19, [sp, #48]
 ac4:	ldp	x22, x21, [sp, #32]
 ac8:	ldp	x24, x23, [sp, #16]
 acc:	ldp	x29, x30, [sp], #64
 ad0:	ret
 ad4:	ldr	w8, [x19, #88]
 ad8:	mov	w20, w2
 adc:	mov	w21, w1
 ae0:	cmp	w8, w1
 ae4:	b.ne	afc <gzsetparams+0x74>  // b.any
 ae8:	ldr	w8, [x19, #92]
 aec:	cmp	w8, w20
 af0:	b.ne	afc <gzsetparams+0x74>  // b.any
 af4:	mov	w0, wzr
 af8:	b	ac0 <gzsetparams+0x38>
 afc:	ldr	w8, [x19, #104]
 b00:	cbz	w8, b94 <gzsetparams+0x10c>
 b04:	ldr	w8, [x19, #128]
 b08:	ldr	x23, [x19, #96]
 b0c:	str	wzr, [x19, #104]
 b10:	cbz	w8, b28 <gzsetparams+0xa0>
 b14:	mov	x0, x19
 b18:	mov	w1, wzr
 b1c:	bl	770 <gz_comp>
 b20:	cmn	w0, #0x1
 b24:	b.eq	bd4 <gzsetparams+0x14c>  // b.none
 b28:	cbz	x23, b94 <gzsetparams+0x10c>
 b2c:	mov	w8, wzr
 b30:	ldr	w9, [x19, #40]
 b34:	cmp	x23, x9
 b38:	csel	w24, w23, w9, lt  // lt = tstop
 b3c:	tbz	w8, #0, b48 <gzsetparams+0xc0>
 b40:	mov	w22, w24
 b44:	b	b5c <gzsetparams+0xd4>
 b48:	ldr	x0, [x19, #48]
 b4c:	mov	w22, w24
 b50:	mov	w1, wzr
 b54:	mov	x2, x22
 b58:	bl	0 <memset>
 b5c:	ldr	x8, [x19, #48]
 b60:	ldr	x9, [x19, #16]
 b64:	mov	x0, x19
 b68:	mov	w1, wzr
 b6c:	str	x8, [x19, #120]
 b70:	add	x8, x9, x22
 b74:	str	w24, [x19, #128]
 b78:	str	x8, [x19, #16]
 b7c:	bl	770 <gz_comp>
 b80:	cmn	w0, #0x1
 b84:	b.eq	bd4 <gzsetparams+0x14c>  // b.none
 b88:	sub	x23, x23, x22
 b8c:	mov	w8, #0x1                   	// #1
 b90:	cbnz	x23, b30 <gzsetparams+0xa8>
 b94:	ldr	w8, [x19, #40]
 b98:	cbz	w8, bc8 <gzsetparams+0x140>
 b9c:	ldr	w8, [x19, #128]
 ba0:	cbz	w8, bb8 <gzsetparams+0x130>
 ba4:	mov	w1, #0x5                   	// #5
 ba8:	mov	x0, x19
 bac:	bl	770 <gz_comp>
 bb0:	cmn	w0, #0x1
 bb4:	b.eq	bd4 <gzsetparams+0x14c>  // b.none
 bb8:	add	x0, x19, #0x78
 bbc:	mov	w1, w21
 bc0:	mov	w2, w20
 bc4:	bl	0 <deflateParams>
 bc8:	mov	w0, wzr
 bcc:	stp	w21, w20, [x19, #88]
 bd0:	b	ac0 <gzsetparams+0x38>
 bd4:	ldr	w0, [x19, #108]
 bd8:	b	ac0 <gzsetparams+0x38>

0000000000000bdc <gzclose_w>:
 bdc:	stp	x29, x30, [sp, #-48]!
 be0:	stp	x22, x21, [sp, #16]
 be4:	stp	x20, x19, [sp, #32]
 be8:	mov	x29, sp
 bec:	cbz	x0, ca4 <gzclose_w+0xc8>
 bf0:	ldr	w8, [x0, #24]
 bf4:	mov	w9, #0x79b1                	// #31153
 bf8:	mov	x19, x0
 bfc:	cmp	w8, w9
 c00:	b.ne	ca4 <gzclose_w+0xc8>  // b.any
 c04:	ldr	w8, [x19, #104]
 c08:	cbz	w8, c9c <gzclose_w+0xc0>
 c0c:	ldr	w8, [x19, #128]
 c10:	ldr	x21, [x19, #96]
 c14:	str	wzr, [x19, #104]
 c18:	cbz	w8, c30 <gzclose_w+0x54>
 c1c:	mov	x0, x19
 c20:	mov	w1, wzr
 c24:	bl	770 <gz_comp>
 c28:	cmn	w0, #0x1
 c2c:	b.eq	cac <gzclose_w+0xd0>  // b.none
 c30:	cbz	x21, c9c <gzclose_w+0xc0>
 c34:	mov	w8, wzr
 c38:	ldr	w9, [x19, #40]
 c3c:	cmp	x21, x9
 c40:	csel	w22, w21, w9, lt  // lt = tstop
 c44:	tbz	w8, #0, c50 <gzclose_w+0x74>
 c48:	mov	w20, w22
 c4c:	b	c64 <gzclose_w+0x88>
 c50:	ldr	x0, [x19, #48]
 c54:	mov	w20, w22
 c58:	mov	w1, wzr
 c5c:	mov	x2, x20
 c60:	bl	0 <memset>
 c64:	ldr	x8, [x19, #48]
 c68:	ldr	x9, [x19, #16]
 c6c:	mov	x0, x19
 c70:	mov	w1, wzr
 c74:	str	x8, [x19, #120]
 c78:	add	x8, x9, x20
 c7c:	str	w22, [x19, #128]
 c80:	str	x8, [x19, #16]
 c84:	bl	770 <gz_comp>
 c88:	cmn	w0, #0x1
 c8c:	b.eq	cac <gzclose_w+0xd0>  // b.none
 c90:	sub	x21, x21, x20
 c94:	mov	w8, #0x1                   	// #1
 c98:	cbnz	x21, c38 <gzclose_w+0x5c>
 c9c:	mov	w20, wzr
 ca0:	b	cb0 <gzclose_w+0xd4>
 ca4:	mov	w20, #0xfffffffe            	// #-2
 ca8:	b	d20 <gzclose_w+0x144>
 cac:	ldr	w20, [x19, #108]
 cb0:	mov	w1, #0x4                   	// #4
 cb4:	mov	x0, x19
 cb8:	bl	770 <gz_comp>
 cbc:	cmn	w0, #0x1
 cc0:	b.ne	cc8 <gzclose_w+0xec>  // b.any
 cc4:	ldr	w20, [x19, #108]
 cc8:	ldr	w8, [x19, #40]
 ccc:	cbz	w8, cf0 <gzclose_w+0x114>
 cd0:	ldr	w8, [x19, #64]
 cd4:	cbnz	w8, ce8 <gzclose_w+0x10c>
 cd8:	add	x0, x19, #0x78
 cdc:	bl	0 <deflateEnd>
 ce0:	ldr	x0, [x19, #56]
 ce4:	bl	0 <free>
 ce8:	ldr	x0, [x19, #48]
 cec:	bl	0 <free>
 cf0:	mov	x0, x19
 cf4:	mov	w1, wzr
 cf8:	mov	x2, xzr
 cfc:	bl	0 <gz_error>
 d00:	ldr	x0, [x19, #32]
 d04:	bl	0 <free>
 d08:	ldr	w0, [x19, #28]
 d0c:	bl	0 <close>
 d10:	cmn	w0, #0x1
 d14:	mov	x0, x19
 d18:	csinv	w20, w20, wzr, ne  // ne = any
 d1c:	bl	0 <free>
 d20:	mov	w0, w20
 d24:	ldp	x20, x19, [sp, #32]
 d28:	ldp	x22, x21, [sp, #16]
 d2c:	ldp	x29, x30, [sp], #48
 d30:	ret
