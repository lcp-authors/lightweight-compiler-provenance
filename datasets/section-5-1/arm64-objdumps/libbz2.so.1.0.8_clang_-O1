
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.so.1.0.8_clang_-O1:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000001490 <.init>:
    1490:	stp	x29, x30, [sp, #-16]!
    1494:	mov	x29, sp
    1498:	bl	1770 <ferror@plt+0x10>
    149c:	ldp	x29, x30, [sp], #16
    14a0:	ret

Disassembly of section .plt:

00000000000014b0 <memcpy@plt-0x20>:
    14b0:	stp	x16, x30, [sp, #-16]!
    14b4:	adrp	x16, 1b000 <BZ2_bzerror@@Base+0x1084c>
    14b8:	ldr	x17, [x16, #4088]
    14bc:	add	x16, x16, #0xff8
    14c0:	br	x17
    14c4:	nop
    14c8:	nop
    14cc:	nop

00000000000014d0 <memcpy@plt>:
    14d0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    14d4:	ldr	x17, [x16]
    14d8:	add	x16, x16, #0x0
    14dc:	br	x17

00000000000014e0 <strlen@plt>:
    14e0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    14e4:	ldr	x17, [x16, #8]
    14e8:	add	x16, x16, #0x8
    14ec:	br	x17

00000000000014f0 <BZ2_hbMakeCodeLengths@plt>:
    14f0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    14f4:	ldr	x17, [x16, #16]
    14f8:	add	x16, x16, #0x10
    14fc:	br	x17

0000000000001500 <exit@plt>:
    1500:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1504:	ldr	x17, [x16, #24]
    1508:	add	x16, x16, #0x18
    150c:	br	x17

0000000000001510 <__cxa_finalize@plt>:
    1510:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1514:	ldr	x17, [x16, #32]
    1518:	add	x16, x16, #0x20
    151c:	br	x17

0000000000001520 <fputc@plt>:
    1520:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1524:	ldr	x17, [x16, #40]
    1528:	add	x16, x16, #0x28
    152c:	br	x17

0000000000001530 <fclose@plt>:
    1530:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1534:	ldr	x17, [x16, #48]
    1538:	add	x16, x16, #0x30
    153c:	br	x17

0000000000001540 <malloc@plt>:
    1540:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1544:	ldr	x17, [x16, #56]
    1548:	add	x16, x16, #0x38
    154c:	br	x17

0000000000001550 <BZ2_bzDecompressInit@plt>:
    1550:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1554:	ldr	x17, [x16, #64]
    1558:	add	x16, x16, #0x40
    155c:	br	x17

0000000000001560 <BZ2_bzDecompressEnd@plt>:
    1560:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1564:	ldr	x17, [x16, #72]
    1568:	add	x16, x16, #0x48
    156c:	br	x17

0000000000001570 <BZ2_bzReadClose@plt>:
    1570:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1574:	ldr	x17, [x16, #80]
    1578:	add	x16, x16, #0x50
    157c:	br	x17

0000000000001580 <fgetc@plt>:
    1580:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1584:	ldr	x17, [x16, #88]
    1588:	add	x16, x16, #0x58
    158c:	br	x17

0000000000001590 <memset@plt>:
    1590:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1594:	ldr	x17, [x16, #96]
    1598:	add	x16, x16, #0x60
    159c:	br	x17

00000000000015a0 <fdopen@plt>:
    15a0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    15a4:	ldr	x17, [x16, #104]
    15a8:	add	x16, x16, #0x68
    15ac:	br	x17

00000000000015b0 <BZ2_bzWriteOpen@plt>:
    15b0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    15b4:	ldr	x17, [x16, #112]
    15b8:	add	x16, x16, #0x70
    15bc:	br	x17

00000000000015c0 <BZ2_bzCompressInit@plt>:
    15c0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    15c4:	ldr	x17, [x16, #120]
    15c8:	add	x16, x16, #0x78
    15cc:	br	x17

00000000000015d0 <BZ2_bzCompressEnd@plt>:
    15d0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    15d4:	ldr	x17, [x16, #128]
    15d8:	add	x16, x16, #0x80
    15dc:	br	x17

00000000000015e0 <BZ2_hbCreateDecodeTables@plt>:
    15e0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    15e4:	ldr	x17, [x16, #136]
    15e8:	add	x16, x16, #0x88
    15ec:	br	x17

00000000000015f0 <__gmon_start__@plt>:
    15f0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    15f4:	ldr	x17, [x16, #144]
    15f8:	add	x16, x16, #0x90
    15fc:	br	x17

0000000000001600 <BZ2_decompress@plt>:
    1600:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1604:	ldr	x17, [x16, #152]
    1608:	add	x16, x16, #0x98
    160c:	br	x17

0000000000001610 <BZ2_bzWriteClose@plt>:
    1610:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1614:	ldr	x17, [x16, #160]
    1618:	add	x16, x16, #0xa0
    161c:	br	x17

0000000000001620 <BZ2_bzCompress@plt>:
    1620:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1624:	ldr	x17, [x16, #168]
    1628:	add	x16, x16, #0xa8
    162c:	br	x17

0000000000001630 <BZ2_bzWrite@plt>:
    1630:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1634:	ldr	x17, [x16, #176]
    1638:	add	x16, x16, #0xb0
    163c:	br	x17

0000000000001640 <__ctype_b_loc@plt>:
    1640:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1644:	ldr	x17, [x16, #184]
    1648:	add	x16, x16, #0xb8
    164c:	br	x17

0000000000001650 <BZ2_compressBlock@plt>:
    1650:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1654:	ldr	x17, [x16, #192]
    1658:	add	x16, x16, #0xc0
    165c:	br	x17

0000000000001660 <fread@plt>:
    1660:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1664:	ldr	x17, [x16, #200]
    1668:	add	x16, x16, #0xc8
    166c:	br	x17

0000000000001670 <BZ2_bsInitWrite@plt>:
    1670:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1674:	ldr	x17, [x16, #208]
    1678:	add	x16, x16, #0xd0
    167c:	br	x17

0000000000001680 <free@plt>:
    1680:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1684:	ldr	x17, [x16, #216]
    1688:	add	x16, x16, #0xd8
    168c:	br	x17

0000000000001690 <ungetc@plt>:
    1690:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1694:	ldr	x17, [x16, #224]
    1698:	add	x16, x16, #0xe0
    169c:	br	x17

00000000000016a0 <BZ2_bzDecompress@plt>:
    16a0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    16a4:	ldr	x17, [x16, #232]
    16a8:	add	x16, x16, #0xe8
    16ac:	br	x17

00000000000016b0 <BZ2_blockSort@plt>:
    16b0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    16b4:	ldr	x17, [x16, #240]
    16b8:	add	x16, x16, #0xf0
    16bc:	br	x17

00000000000016c0 <BZ2_bzWriteClose64@plt>:
    16c0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    16c4:	ldr	x17, [x16, #248]
    16c8:	add	x16, x16, #0xf8
    16cc:	br	x17

00000000000016d0 <BZ2_indexIntoF@plt>:
    16d0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    16d4:	ldr	x17, [x16, #256]
    16d8:	add	x16, x16, #0x100
    16dc:	br	x17

00000000000016e0 <BZ2_hbAssignCodes@plt>:
    16e0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    16e4:	ldr	x17, [x16, #264]
    16e8:	add	x16, x16, #0x108
    16ec:	br	x17

00000000000016f0 <fwrite@plt>:
    16f0:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    16f4:	ldr	x17, [x16, #272]
    16f8:	add	x16, x16, #0x110
    16fc:	br	x17

0000000000001700 <fflush@plt>:
    1700:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1704:	ldr	x17, [x16, #280]
    1708:	add	x16, x16, #0x118
    170c:	br	x17

0000000000001710 <fopen64@plt>:
    1710:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1714:	ldr	x17, [x16, #288]
    1718:	add	x16, x16, #0x120
    171c:	br	x17

0000000000001720 <BZ2_bzReadOpen@plt>:
    1720:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1724:	ldr	x17, [x16, #296]
    1728:	add	x16, x16, #0x128
    172c:	br	x17

0000000000001730 <BZ2_bzRead@plt>:
    1730:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1734:	ldr	x17, [x16, #304]
    1738:	add	x16, x16, #0x130
    173c:	br	x17

0000000000001740 <BZ2_bz__AssertH__fail@plt>:
    1740:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1744:	ldr	x17, [x16, #312]
    1748:	add	x16, x16, #0x138
    174c:	br	x17

0000000000001750 <fprintf@plt>:
    1750:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1754:	ldr	x17, [x16, #320]
    1758:	add	x16, x16, #0x140
    175c:	br	x17

0000000000001760 <ferror@plt>:
    1760:	adrp	x16, 1c000 <memcpy@GLIBC_2.17>
    1764:	ldr	x17, [x16, #328]
    1768:	add	x16, x16, #0x148
    176c:	br	x17

Disassembly of section .text:

0000000000001770 <BZ2_blockSort@@Base-0xd4>:
    1770:	adrp	x0, 1b000 <BZ2_bzerror@@Base+0x1084c>
    1774:	ldr	x0, [x0, #4056]
    1778:	cbz	x0, 1780 <ferror@plt+0x20>
    177c:	b	15f0 <__gmon_start__@plt>
    1780:	ret
    1784:	nop
    1788:	adrp	x0, 1c000 <BZ2_bzerror@@Base+0x1184c>
    178c:	add	x0, x0, #0xd58
    1790:	adrp	x1, 1c000 <BZ2_bzerror@@Base+0x1184c>
    1794:	add	x1, x1, #0xd58
    1798:	cmp	x1, x0
    179c:	b.eq	17b4 <ferror@plt+0x54>  // b.none
    17a0:	adrp	x1, 1b000 <BZ2_bzerror@@Base+0x1084c>
    17a4:	ldr	x1, [x1, #4000]
    17a8:	cbz	x1, 17b4 <ferror@plt+0x54>
    17ac:	mov	x16, x1
    17b0:	br	x16
    17b4:	ret
    17b8:	adrp	x0, 1c000 <BZ2_bzerror@@Base+0x1184c>
    17bc:	add	x0, x0, #0xd58
    17c0:	adrp	x1, 1c000 <BZ2_bzerror@@Base+0x1184c>
    17c4:	add	x1, x1, #0xd58
    17c8:	sub	x1, x1, x0
    17cc:	lsr	x2, x1, #63
    17d0:	add	x1, x2, x1, asr #3
    17d4:	cmp	xzr, x1, asr #1
    17d8:	asr	x1, x1, #1
    17dc:	b.eq	17f4 <ferror@plt+0x94>  // b.none
    17e0:	adrp	x2, 1b000 <BZ2_bzerror@@Base+0x1084c>
    17e4:	ldr	x2, [x2, #4064]
    17e8:	cbz	x2, 17f4 <ferror@plt+0x94>
    17ec:	mov	x16, x2
    17f0:	br	x16
    17f4:	ret
    17f8:	stp	x29, x30, [sp, #-32]!
    17fc:	mov	x29, sp
    1800:	str	x19, [sp, #16]
    1804:	adrp	x19, 1c000 <BZ2_bzerror@@Base+0x1184c>
    1808:	ldrb	w0, [x19, #3416]
    180c:	cbnz	w0, 1834 <ferror@plt+0xd4>
    1810:	adrp	x0, 1b000 <BZ2_bzerror@@Base+0x1084c>
    1814:	ldr	x0, [x0, #4008]
    1818:	cbz	x0, 1828 <ferror@plt+0xc8>
    181c:	adrp	x0, 1c000 <BZ2_bzerror@@Base+0x1184c>
    1820:	ldr	x0, [x0, #336]
    1824:	bl	1510 <__cxa_finalize@plt>
    1828:	bl	1788 <ferror@plt+0x28>
    182c:	mov	w0, #0x1                   	// #1
    1830:	strb	w0, [x19, #3416]
    1834:	ldr	x19, [sp, #16]
    1838:	ldp	x29, x30, [sp], #32
    183c:	ret
    1840:	b	17b8 <ferror@plt+0x58>

0000000000001844 <BZ2_blockSort@@Base>:
    1844:	sub	sp, sp, #0x50
    1848:	stp	x29, x30, [sp, #16]
    184c:	stp	x24, x23, [sp, #32]
    1850:	stp	x22, x21, [sp, #48]
    1854:	stp	x20, x19, [sp, #64]
    1858:	add	x29, sp, #0x10
    185c:	ldr	w21, [x0, #108]
    1860:	ldr	x20, [x0, #56]
    1864:	ldr	x23, [x0, #40]
    1868:	ldr	w22, [x0, #656]
    186c:	mov	w8, #0x2710                	// #10000
    1870:	mov	x19, x0
    1874:	cmp	w21, w8
    1878:	b.lt	1900 <BZ2_blockSort@@Base+0xbc>  // b.tstop
    187c:	ldr	w8, [x19, #88]
    1880:	add	w9, w21, #0x22
    1884:	add	w10, w21, #0x23
    1888:	tst	w9, #0x1
    188c:	csel	w9, w9, w10, eq  // eq = none
    1890:	cmp	w8, #0x1
    1894:	csinc	w8, w8, wzr, gt
    1898:	ldr	x1, [x19, #64]
    189c:	mov	w10, #0x64                  	// #100
    18a0:	cmp	w8, #0x64
    18a4:	csel	w8, w8, w10, lt  // lt = tstop
    18a8:	mov	w10, #0x5556                	// #21846
    18ac:	movk	w10, #0x5555, lsl #16
    18b0:	sub	w8, w8, #0x1
    18b4:	smull	x8, w8, w10
    18b8:	add	x2, x1, w9, sxtw
    18bc:	lsr	x9, x8, #63
    18c0:	lsr	x8, x8, #32
    18c4:	add	w8, w8, w9
    18c8:	mul	w24, w8, w21
    18cc:	sub	x6, x29, #0x4
    18d0:	mov	x0, x20
    18d4:	mov	x3, x23
    18d8:	mov	w4, w21
    18dc:	mov	w5, w22
    18e0:	stur	w24, [x29, #-4]
    18e4:	bl	1e9c <BZ2_blockSort@@Base+0x658>
    18e8:	cmp	w22, #0x3
    18ec:	b.ge	1978 <BZ2_blockSort@@Base+0x134>  // b.tcont
    18f0:	ldur	w8, [x29, #-4]
    18f4:	tbz	w8, #31, 1914 <BZ2_blockSort@@Base+0xd0>
    18f8:	cmp	w22, #0x2
    18fc:	b.ge	19c0 <BZ2_blockSort@@Base+0x17c>  // b.tcont
    1900:	ldp	x0, x1, [x19, #24]
    1904:	mov	x2, x23
    1908:	mov	w3, w21
    190c:	mov	w4, w22
    1910:	bl	19e4 <BZ2_blockSort@@Base+0x1a0>
    1914:	ldr	w8, [x19, #108]
    1918:	mov	w9, #0xffffffff            	// #-1
    191c:	str	w9, [x19, #48]
    1920:	cmp	w8, #0x1
    1924:	b.lt	194c <BZ2_blockSort@@Base+0x108>  // b.tstop
    1928:	mov	x8, xzr
    192c:	ldr	w9, [x20, x8, lsl #2]
    1930:	cbz	w9, 1948 <BZ2_blockSort@@Base+0x104>
    1934:	ldrsw	x9, [x19, #108]
    1938:	add	x8, x8, #0x1
    193c:	cmp	x8, x9
    1940:	b.lt	192c <BZ2_blockSort@@Base+0xe8>  // b.tstop
    1944:	b	194c <BZ2_blockSort@@Base+0x108>
    1948:	str	w8, [x19, #48]
    194c:	ldr	w8, [x19, #48]
    1950:	cmn	w8, #0x1
    1954:	b.ne	1960 <BZ2_blockSort@@Base+0x11c>  // b.any
    1958:	mov	w0, #0x3eb                 	// #1003
    195c:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    1960:	ldp	x20, x19, [sp, #64]
    1964:	ldp	x22, x21, [sp, #48]
    1968:	ldp	x24, x23, [sp, #32]
    196c:	ldp	x29, x30, [sp, #16]
    1970:	add	sp, sp, #0x50
    1974:	ret
    1978:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    197c:	ldr	x8, [x8, #4016]
    1980:	ldur	w9, [x29, #-4]
    1984:	cmp	w21, #0x0
    1988:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    198c:	ldr	x0, [x8]
    1990:	csinc	w8, w21, wzr, ne  // ne = any
    1994:	sub	w2, w24, w9
    1998:	scvtf	s0, w2
    199c:	scvtf	s1, w8
    19a0:	fdiv	s0, s0, s1
    19a4:	fcvt	d0, s0
    19a8:	add	x1, x1, #0xc58
    19ac:	mov	w3, w21
    19b0:	bl	1750 <fprintf@plt>
    19b4:	ldur	w8, [x29, #-4]
    19b8:	tbz	w8, #31, 1914 <BZ2_blockSort@@Base+0xd0>
    19bc:	b	18f8 <BZ2_blockSort@@Base+0xb4>
    19c0:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    19c4:	ldr	x8, [x8, #4016]
    19c8:	adrp	x0, a000 <BZ2_bzRead@@Base+0x84>
    19cc:	add	x0, x0, #0xc7e
    19d0:	mov	w1, #0x35                  	// #53
    19d4:	ldr	x3, [x8]
    19d8:	mov	w2, #0x1                   	// #1
    19dc:	bl	16f0 <fwrite@plt>
    19e0:	b	1900 <BZ2_blockSort@@Base+0xbc>
    19e4:	stp	x29, x30, [sp, #-96]!
    19e8:	stp	x28, x27, [sp, #16]
    19ec:	stp	x26, x25, [sp, #32]
    19f0:	stp	x24, x23, [sp, #48]
    19f4:	stp	x22, x21, [sp, #64]
    19f8:	stp	x20, x19, [sp, #80]
    19fc:	mov	x29, sp
    1a00:	sub	sp, sp, #0x820
    1a04:	mov	w21, w3
    1a08:	mov	x23, x2
    1a0c:	mov	x19, x1
    1a10:	mov	x20, x0
    1a14:	cmp	w4, #0x4
    1a18:	str	w4, [sp, #12]
    1a1c:	b.ge	1e4c <BZ2_blockSort@@Base+0x608>  // b.tcont
    1a20:	add	x0, sp, #0x414
    1a24:	mov	w2, #0x404                 	// #1028
    1a28:	mov	w1, wzr
    1a2c:	mov	w25, w21
    1a30:	add	x22, sp, #0x414
    1a34:	bl	1590 <memset@plt>
    1a38:	cmp	w21, #0x1
    1a3c:	b.lt	1a64 <BZ2_blockSort@@Base+0x220>  // b.tstop
    1a40:	mov	x8, x25
    1a44:	mov	x9, x19
    1a48:	ldrb	w10, [x9], #1
    1a4c:	subs	x8, x8, #0x1
    1a50:	lsl	x10, x10, #2
    1a54:	ldr	w11, [x22, x10]
    1a58:	add	w11, w11, #0x1
    1a5c:	str	w11, [x22, x10]
    1a60:	b.ne	1a48 <BZ2_blockSort@@Base+0x204>  // b.any
    1a64:	add	x0, sp, #0x14
    1a68:	add	x1, sp, #0x414
    1a6c:	mov	w2, #0x400                 	// #1024
    1a70:	bl	14d0 <memcpy@plt>
    1a74:	ldr	w9, [sp, #1044]
    1a78:	mov	x8, xzr
    1a7c:	add	x10, x22, #0x4
    1a80:	ldr	w11, [x10, x8]
    1a84:	add	w9, w11, w9
    1a88:	str	w9, [x10, x8]
    1a8c:	add	x8, x8, #0x4
    1a90:	cmp	x8, #0x400
    1a94:	b.ne	1a80 <BZ2_blockSort@@Base+0x23c>  // b.any
    1a98:	ldr	w15, [sp, #12]
    1a9c:	cmp	w21, #0x1
    1aa0:	b.lt	1ad0 <BZ2_blockSort@@Base+0x28c>  // b.tstop
    1aa4:	mov	x8, xzr
    1aa8:	add	x9, sp, #0x414
    1aac:	ldrb	w10, [x19, x8]
    1ab0:	lsl	x10, x10, #2
    1ab4:	ldrsw	x11, [x9, x10]
    1ab8:	sub	x11, x11, #0x1
    1abc:	str	w11, [x9, x10]
    1ac0:	str	w8, [x20, x11, lsl #2]
    1ac4:	add	x8, x8, #0x1
    1ac8:	cmp	x25, x8
    1acc:	b.ne	1aac <BZ2_blockSort@@Base+0x268>  // b.any
    1ad0:	cmn	w21, #0x3f
    1ad4:	b.lt	1b08 <BZ2_blockSort@@Base+0x2c4>  // b.tstop
    1ad8:	add	w8, w21, #0x1f
    1adc:	cmp	w21, #0x0
    1ae0:	csel	w8, w8, w21, lt  // lt = tstop
    1ae4:	asr	w8, w8, #5
    1ae8:	cmn	w21, #0x20
    1aec:	csinc	w8, wzr, w8, le
    1af0:	lsl	x8, x8, #2
    1af4:	add	x2, x8, #0x4
    1af8:	mov	x0, x23
    1afc:	mov	w1, wzr
    1b00:	bl	1590 <memset@plt>
    1b04:	ldr	w15, [sp, #12]
    1b08:	mov	x8, xzr
    1b0c:	add	x9, sp, #0x414
    1b10:	mov	w10, #0x1                   	// #1
    1b14:	ldr	w11, [x9, x8]
    1b18:	add	x8, x8, #0x4
    1b1c:	cmp	x8, #0x400
    1b20:	asr	w12, w11, #5
    1b24:	sbfiz	x12, x12, #2, #32
    1b28:	ldr	w13, [x23, x12]
    1b2c:	lsl	w11, w10, w11
    1b30:	orr	w11, w11, w13
    1b34:	str	w11, [x23, x12]
    1b38:	b.ne	1b14 <BZ2_blockSort@@Base+0x2d0>  // b.any
    1b3c:	mov	w8, wzr
    1b40:	mov	w9, #0x1                   	// #1
    1b44:	add	w10, w21, w8
    1b48:	asr	w11, w10, #5
    1b4c:	sbfiz	x11, x11, #2, #32
    1b50:	ldr	w12, [x23, x11]
    1b54:	lsl	w13, w9, w10
    1b58:	add	w10, w10, #0x1
    1b5c:	add	w8, w8, #0x2
    1b60:	orr	w12, w12, w13
    1b64:	asr	w13, w10, #5
    1b68:	sbfiz	x13, x13, #2, #32
    1b6c:	str	w12, [x23, x11]
    1b70:	ldr	w11, [x23, x13]
    1b74:	lsl	w10, w9, w10
    1b78:	cmp	w8, #0x40
    1b7c:	bic	w10, w11, w10
    1b80:	str	w10, [x23, x13]
    1b84:	b.ne	1b44 <BZ2_blockSort@@Base+0x300>  // b.any
    1b88:	mov	w22, #0x1                   	// #1
    1b8c:	mov	w26, #0x1                   	// #1
    1b90:	cmp	w15, #0x4
    1b94:	b.ge	1d6c <BZ2_blockSort@@Base+0x528>  // b.tcont
    1b98:	cmp	w21, #0x1
    1b9c:	b.lt	1bdc <BZ2_blockSort@@Base+0x398>  // b.tstop
    1ba0:	mov	x8, xzr
    1ba4:	mov	w9, wzr
    1ba8:	ubfx	x10, x8, #5, #27
    1bac:	ldr	w10, [x23, x10, lsl #2]
    1bb0:	ldr	w11, [x20, x8, lsl #2]
    1bb4:	lsr	w10, w10, w8
    1bb8:	sub	w11, w11, w26
    1bbc:	tst	w10, #0x1
    1bc0:	and	w12, w25, w11, asr #31
    1bc4:	csel	w9, w9, w8, eq  // eq = none
    1bc8:	add	x8, x8, #0x1
    1bcc:	add	w10, w12, w11
    1bd0:	cmp	x25, x8
    1bd4:	str	w9, [x19, w10, sxtw #2]
    1bd8:	b.ne	1ba8 <BZ2_blockSort@@Base+0x364>  // b.any
    1bdc:	mov	w16, wzr
    1be0:	mov	w24, #0xffffffff            	// #-1
    1be4:	add	w8, w24, #0x1
    1be8:	asr	w10, w8, #5
    1bec:	ldr	w10, [x23, w10, sxtw #2]
    1bf0:	lsl	w11, w22, w8
    1bf4:	mov	w9, w24
    1bf8:	tst	w8, #0x1f
    1bfc:	and	w10, w11, w10
    1c00:	b.eq	1c0c <BZ2_blockSort@@Base+0x3c8>  // b.none
    1c04:	mov	w24, w8
    1c08:	cbnz	w10, 1be4 <BZ2_blockSort@@Base+0x3a0>
    1c0c:	cbz	w10, 1c44 <BZ2_blockSort@@Base+0x400>
    1c10:	sub	w10, w9, #0x1f
    1c14:	add	w10, w10, #0x20
    1c18:	asr	w8, w10, #5
    1c1c:	ldr	w11, [x23, w8, sxtw #2]
    1c20:	mov	w8, w9
    1c24:	add	w9, w9, #0x20
    1c28:	cmn	w11, #0x1
    1c2c:	b.eq	1c14 <BZ2_blockSort@@Base+0x3d0>  // b.none
    1c30:	add	w8, w8, #0x1
    1c34:	asr	w9, w8, #5
    1c38:	ldr	w9, [x23, w9, sxtw #2]
    1c3c:	lsr	w9, w9, w8
    1c40:	tbnz	w9, #0, 1c30 <BZ2_blockSort@@Base+0x3ec>
    1c44:	cmp	w8, w21
    1c48:	b.gt	1d50 <BZ2_blockSort@@Base+0x50c>
    1c4c:	sub	w28, w8, #0x1
    1c50:	sub	w12, w8, #0x20
    1c54:	mov	w14, w28
    1c58:	mov	w11, w8
    1c5c:	asr	w9, w11, #5
    1c60:	ldr	w13, [x23, w9, sxtw #2]
    1c64:	mov	w9, w12
    1c68:	lsl	w12, w22, w11
    1c6c:	mov	w10, w14
    1c70:	tst	w11, #0x1f
    1c74:	and	w13, w12, w13
    1c78:	add	w11, w11, #0x1
    1c7c:	b.eq	1c8c <BZ2_blockSort@@Base+0x448>  // b.none
    1c80:	add	w12, w9, #0x1
    1c84:	add	w14, w10, #0x1
    1c88:	cbz	w13, 1c5c <BZ2_blockSort@@Base+0x418>
    1c8c:	cbz	w13, 1c98 <BZ2_blockSort@@Base+0x454>
    1c90:	sub	w27, w11, #0x1
    1c94:	b	1cc4 <BZ2_blockSort@@Base+0x480>
    1c98:	add	w9, w9, #0x20
    1c9c:	asr	w11, w9, #5
    1ca0:	ldr	w11, [x23, w11, sxtw #2]
    1ca4:	mov	w27, w10
    1ca8:	add	w10, w10, #0x20
    1cac:	cbz	w11, 1c98 <BZ2_blockSort@@Base+0x454>
    1cb0:	add	w27, w27, #0x1
    1cb4:	asr	w9, w27, #5
    1cb8:	ldr	w9, [x23, w9, sxtw #2]
    1cbc:	lsr	w9, w9, w27
    1cc0:	tbz	w9, #0, 1cb0 <BZ2_blockSort@@Base+0x46c>
    1cc4:	cmp	w27, w21
    1cc8:	b.gt	1d50 <BZ2_blockSort@@Base+0x50c>
    1ccc:	cmp	w27, w8
    1cd0:	sub	w24, w27, #0x1
    1cd4:	b.le	1be4 <BZ2_blockSort@@Base+0x3a0>
    1cd8:	sub	w8, w16, w8
    1cdc:	add	w8, w8, w24
    1ce0:	add	w8, w8, #0x2
    1ce4:	mov	x0, x20
    1ce8:	mov	x1, x19
    1cec:	mov	w2, w28
    1cf0:	mov	w3, w24
    1cf4:	str	w8, [sp, #16]
    1cf8:	bl	2670 <BZ2_blockSort@@Base+0xe2c>
    1cfc:	sxtw	x8, w28
    1d00:	sxtw	x9, w27
    1d04:	mov	w10, #0xffffffff            	// #-1
    1d08:	b	1d18 <BZ2_blockSort@@Base+0x4d4>
    1d0c:	add	x8, x8, #0x1
    1d10:	cmp	x8, x9
    1d14:	b.ge	1d48 <BZ2_blockSort@@Base+0x504>  // b.tcont
    1d18:	ldr	w11, [x20, x8, lsl #2]
    1d1c:	ldr	w11, [x19, x11, lsl #2]
    1d20:	cmp	w10, w11
    1d24:	b.eq	1d0c <BZ2_blockSort@@Base+0x4c8>  // b.none
    1d28:	asr	w10, w8, #5
    1d2c:	sbfiz	x10, x10, #2, #32
    1d30:	ldr	w12, [x23, x10]
    1d34:	lsl	w13, w22, w8
    1d38:	orr	w12, w12, w13
    1d3c:	str	w12, [x23, x10]
    1d40:	mov	w10, w11
    1d44:	b	1d0c <BZ2_blockSort@@Base+0x4c8>
    1d48:	ldp	w15, w16, [sp, #12]
    1d4c:	b	1be4 <BZ2_blockSort@@Base+0x3a0>
    1d50:	cmp	w15, #0x4
    1d54:	b.ge	1d98 <BZ2_blockSort@@Base+0x554>  // b.tcont
    1d58:	lsl	w26, w26, #1
    1d5c:	cmp	w26, w21
    1d60:	b.gt	1dc4 <BZ2_blockSort@@Base+0x580>
    1d64:	cbnz	w16, 1b90 <BZ2_blockSort@@Base+0x34c>
    1d68:	b	1dc4 <BZ2_blockSort@@Base+0x580>
    1d6c:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    1d70:	ldr	x8, [x8, #4016]
    1d74:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    1d78:	add	x1, x1, #0xcd0
    1d7c:	mov	w2, w26
    1d80:	ldr	x0, [x8]
    1d84:	bl	1750 <fprintf@plt>
    1d88:	ldr	w15, [sp, #12]
    1d8c:	cmp	w21, #0x1
    1d90:	b.ge	1ba0 <BZ2_blockSort@@Base+0x35c>  // b.tcont
    1d94:	b	1bdc <BZ2_blockSort@@Base+0x398>
    1d98:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    1d9c:	ldr	x8, [x8, #4016]
    1da0:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    1da4:	add	x1, x1, #0xce7
    1da8:	mov	w2, w16
    1dac:	ldr	x0, [x8]
    1db0:	mov	w24, w16
    1db4:	bl	1750 <fprintf@plt>
    1db8:	ldr	w15, [sp, #12]
    1dbc:	mov	w16, w24
    1dc0:	b	1d58 <BZ2_blockSort@@Base+0x514>
    1dc4:	cmp	w15, #0x4
    1dc8:	b.ge	1e70 <BZ2_blockSort@@Base+0x62c>  // b.tcont
    1dcc:	cmp	w21, #0x1
    1dd0:	b.lt	1e2c <BZ2_blockSort@@Base+0x5e8>  // b.tstop
    1dd4:	mov	x8, xzr
    1dd8:	mov	x11, xzr
    1ddc:	add	x9, sp, #0x14
    1de0:	sxtw	x11, w11
    1de4:	sub	w10, w11, #0x1
    1de8:	ldr	w12, [x9, x11, lsl #2]
    1dec:	add	x11, x11, #0x1
    1df0:	add	w10, w10, #0x1
    1df4:	cbz	w12, 1de8 <BZ2_blockSort@@Base+0x5a4>
    1df8:	add	x13, x9, x11, lsl #2
    1dfc:	sub	w12, w12, #0x1
    1e00:	stur	w12, [x13, #-4]
    1e04:	ldr	w12, [x20, x8, lsl #2]
    1e08:	add	x8, x8, #0x1
    1e0c:	sub	x11, x11, #0x1
    1e10:	cmp	x8, x25
    1e14:	strb	w11, [x19, x12]
    1e18:	b.ne	1de0 <BZ2_blockSort@@Base+0x59c>  // b.any
    1e1c:	cmp	w10, #0x100
    1e20:	b.lt	1e2c <BZ2_blockSort@@Base+0x5e8>  // b.tstop
    1e24:	mov	w0, #0x3ed                 	// #1005
    1e28:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    1e2c:	add	sp, sp, #0x820
    1e30:	ldp	x20, x19, [sp, #80]
    1e34:	ldp	x22, x21, [sp, #64]
    1e38:	ldp	x24, x23, [sp, #48]
    1e3c:	ldp	x26, x25, [sp, #32]
    1e40:	ldp	x28, x27, [sp, #16]
    1e44:	ldp	x29, x30, [sp], #96
    1e48:	ret
    1e4c:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    1e50:	ldr	x8, [x8, #4016]
    1e54:	adrp	x0, a000 <BZ2_bzRead@@Base+0x84>
    1e58:	add	x0, x0, #0xcb4
    1e5c:	mov	w1, #0x1b                  	// #27
    1e60:	ldr	x3, [x8]
    1e64:	mov	w2, #0x1                   	// #1
    1e68:	bl	16f0 <fwrite@plt>
    1e6c:	b	1a20 <BZ2_blockSort@@Base+0x1dc>
    1e70:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    1e74:	ldr	x8, [x8, #4016]
    1e78:	adrp	x0, a000 <BZ2_bzRead@@Base+0x84>
    1e7c:	add	x0, x0, #0xcff
    1e80:	mov	w1, #0x21                  	// #33
    1e84:	ldr	x3, [x8]
    1e88:	mov	w2, #0x1                   	// #1
    1e8c:	bl	16f0 <fwrite@plt>
    1e90:	cmp	w21, #0x1
    1e94:	b.ge	1dd4 <BZ2_blockSort@@Base+0x590>  // b.tcont
    1e98:	b	1e2c <BZ2_blockSort@@Base+0x5e8>
    1e9c:	stp	x29, x30, [sp, #-96]!
    1ea0:	stp	x28, x27, [sp, #16]
    1ea4:	stp	x26, x25, [sp, #32]
    1ea8:	stp	x24, x23, [sp, #48]
    1eac:	stp	x22, x21, [sp, #64]
    1eb0:	stp	x20, x19, [sp, #80]
    1eb4:	mov	x29, sp
    1eb8:	sub	sp, sp, #0xd50
    1ebc:	mov	w19, w4
    1ec0:	mov	x22, x3
    1ec4:	mov	x23, x2
    1ec8:	mov	x26, x1
    1ecc:	mov	x25, x0
    1ed0:	cmp	w5, #0x4
    1ed4:	str	x6, [sp, #40]
    1ed8:	str	w5, [sp, #52]
    1edc:	b.ge	2604 <BZ2_blockSort@@Base+0xdc0>  // b.tcont
    1ee0:	mov	w2, #0x40004               	// #262148
    1ee4:	mov	x0, x22
    1ee8:	mov	w1, wzr
    1eec:	bl	1590 <memset@plt>
    1ef0:	ldrb	w8, [x26]
    1ef4:	cmp	w19, #0x4
    1ef8:	sub	w20, w19, #0x1
    1efc:	lsl	w8, w8, #8
    1f00:	b.lt	1fb8 <BZ2_blockSort@@Base+0x774>  // b.tstop
    1f04:	sxtw	x9, w20
    1f08:	sub	x11, x9, #0x3
    1f0c:	add	x10, x23, w20, sxtw #1
    1f10:	mov	w9, w20
    1f14:	strh	wzr, [x10]
    1f18:	add	x12, x26, x11
    1f1c:	ldrb	w13, [x12, #3]
    1f20:	sub	w9, w9, #0x4
    1f24:	lsl	w13, w13, #8
    1f28:	orr	w8, w13, w8, asr #8
    1f2c:	sbfiz	x13, x8, #2, #32
    1f30:	ldr	w14, [x22, x13]
    1f34:	add	w14, w14, #0x1
    1f38:	str	w14, [x22, x13]
    1f3c:	sturh	wzr, [x10, #-2]
    1f40:	ldrb	w13, [x12, #2]
    1f44:	lsl	w13, w13, #8
    1f48:	orr	w8, w13, w8, asr #8
    1f4c:	sbfiz	x13, x8, #2, #32
    1f50:	ldr	w14, [x22, x13]
    1f54:	add	w14, w14, #0x1
    1f58:	str	w14, [x22, x13]
    1f5c:	sturh	wzr, [x10, #-4]
    1f60:	ldrb	w13, [x12, #1]
    1f64:	lsl	w13, w13, #8
    1f68:	orr	w8, w13, w8, asr #8
    1f6c:	sbfiz	x13, x8, #2, #32
    1f70:	ldr	w14, [x22, x13]
    1f74:	add	w14, w14, #0x1
    1f78:	str	w14, [x22, x13]
    1f7c:	sturh	wzr, [x10, #-6]
    1f80:	ldrb	w12, [x12]
    1f84:	add	x13, x11, #0x3
    1f88:	sub	x11, x11, #0x4
    1f8c:	cmp	x13, #0x6
    1f90:	lsl	w12, w12, #8
    1f94:	orr	w8, w12, w8, asr #8
    1f98:	sbfiz	x12, x8, #2, #32
    1f9c:	ldr	w14, [x22, x12]
    1fa0:	sub	x10, x10, #0x8
    1fa4:	add	w13, w14, #0x1
    1fa8:	str	w13, [x22, x12]
    1fac:	b.gt	1f14 <BZ2_blockSort@@Base+0x6d0>
    1fb0:	tbz	w9, #31, 1fc0 <BZ2_blockSort@@Base+0x77c>
    1fb4:	b	1ff0 <BZ2_blockSort@@Base+0x7ac>
    1fb8:	mov	w9, w20
    1fbc:	tbnz	w9, #31, 1ff0 <BZ2_blockSort@@Base+0x7ac>
    1fc0:	sxtw	x9, w9
    1fc4:	strh	wzr, [x23, x9, lsl #1]
    1fc8:	ldrb	w10, [x26, x9]
    1fcc:	cmp	x9, #0x0
    1fd0:	sub	x9, x9, #0x1
    1fd4:	lsl	w10, w10, #8
    1fd8:	orr	w8, w10, w8, asr #8
    1fdc:	sbfiz	x10, x8, #2, #32
    1fe0:	ldr	w11, [x22, x10]
    1fe4:	add	w11, w11, #0x1
    1fe8:	str	w11, [x22, x10]
    1fec:	b.gt	1fc4 <BZ2_blockSort@@Base+0x780>
    1ff0:	mov	x8, xzr
    1ff4:	add	x9, x26, w19, sxtw
    1ff8:	add	x10, x23, w19, sxtw #1
    1ffc:	ldrb	w11, [x26, x8]
    2000:	strb	w11, [x9, x8]
    2004:	strh	wzr, [x10, x8, lsl #1]
    2008:	add	x8, x8, #0x1
    200c:	cmp	x8, #0x22
    2010:	b.ne	1ffc <BZ2_blockSort@@Base+0x7b8>  // b.any
    2014:	ldr	w8, [sp, #52]
    2018:	cmp	w8, #0x4
    201c:	b.ge	2628 <BZ2_blockSort@@Base+0xde4>  // b.tcont
    2020:	mov	x8, x22
    2024:	ldr	w9, [x8], #4
    2028:	mov	x10, xzr
    202c:	ldr	w11, [x8, x10]
    2030:	add	w9, w11, w9
    2034:	str	w9, [x8, x10]
    2038:	add	x10, x10, #0x4
    203c:	cmp	x10, #0x40, lsl #12
    2040:	b.ne	202c <BZ2_blockSort@@Base+0x7e8>  // b.any
    2044:	ldrb	w8, [x26]
    2048:	subs	w10, w19, #0x4
    204c:	lsl	w8, w8, #8
    2050:	b.lt	2118 <BZ2_blockSort@@Base+0x8d4>  // b.tstop
    2054:	sxtw	x11, w20
    2058:	add	x13, x11, x26
    205c:	mov	x9, xzr
    2060:	sub	w12, w19, #0x2
    2064:	sub	x13, x13, #0x3
    2068:	sub	w14, w19, #0x3
    206c:	add	x15, x13, x9
    2070:	ldrb	w16, [x15, #3]
    2074:	ubfx	w8, w8, #8, #8
    2078:	add	w18, w20, w9
    207c:	bfi	w8, w16, #8, #8
    2080:	lsl	x8, x8, #2
    2084:	ldr	w17, [x22, x8]
    2088:	sub	w17, w17, #0x1
    208c:	str	w17, [x22, x8]
    2090:	str	w18, [x25, w17, sxtw #2]
    2094:	ldrb	w17, [x15, #2]
    2098:	lsl	x8, x16, #2
    209c:	add	w18, w12, w9
    20a0:	bfi	x8, x17, #10, #8
    20a4:	ldr	w16, [x22, x8]
    20a8:	sub	w16, w16, #0x1
    20ac:	str	w16, [x22, x8]
    20b0:	str	w18, [x25, w16, sxtw #2]
    20b4:	ldrb	w8, [x15, #1]
    20b8:	lsl	x16, x17, #2
    20bc:	add	w18, w14, w9
    20c0:	bfi	x16, x8, #10, #8
    20c4:	ldr	w17, [x22, x16]
    20c8:	sub	w17, w17, #0x1
    20cc:	str	w17, [x22, x16]
    20d0:	str	w18, [x25, w17, sxtw #2]
    20d4:	ldrb	w15, [x15]
    20d8:	add	w16, w10, w9
    20dc:	sub	x9, x9, #0x4
    20e0:	add	x18, x11, x9
    20e4:	bfi	w8, w15, #8, #24
    20e8:	and	x15, x8, #0xffff
    20ec:	lsl	x15, x15, #2
    20f0:	ldr	w17, [x22, x15]
    20f4:	add	x18, x18, #0x4
    20f8:	cmp	x18, #0x6
    20fc:	sub	w17, w17, #0x1
    2100:	str	w17, [x22, x15]
    2104:	str	w16, [x25, w17, sxtw #2]
    2108:	b.gt	206c <BZ2_blockSort@@Base+0x828>
    210c:	add	w9, w11, w9
    2110:	tbz	w9, #31, 2120 <BZ2_blockSort@@Base+0x8dc>
    2114:	b	2158 <BZ2_blockSort@@Base+0x914>
    2118:	mov	w9, w20
    211c:	tbnz	w9, #31, 2158 <BZ2_blockSort@@Base+0x914>
    2120:	sxtw	x10, w9
    2124:	ldrb	w11, [x26, x10]
    2128:	ubfx	w8, w8, #8, #8
    212c:	cmp	x10, #0x0
    2130:	sub	x10, x10, #0x1
    2134:	bfi	w8, w11, #8, #24
    2138:	and	x11, x8, #0xffff
    213c:	lsl	x11, x11, #2
    2140:	ldr	w12, [x22, x11]
    2144:	sub	w12, w12, #0x1
    2148:	str	w12, [x22, x11]
    214c:	str	w9, [x25, w12, sxtw #2]
    2150:	sub	w9, w9, #0x1
    2154:	b.gt	2124 <BZ2_blockSort@@Base+0x8e0>
    2158:	mov	x8, xzr
    215c:	movi	v0.2d, #0x0
    2160:	add	x9, sp, #0x948
    2164:	str	q0, [sp, #2352]
    2168:	str	q0, [sp, #2336]
    216c:	str	q0, [sp, #2320]
    2170:	str	q0, [sp, #2304]
    2174:	str	q0, [sp, #2288]
    2178:	str	q0, [sp, #2272]
    217c:	str	q0, [sp, #2256]
    2180:	str	q0, [sp, #2240]
    2184:	str	q0, [sp, #2224]
    2188:	str	q0, [sp, #2208]
    218c:	str	q0, [sp, #2192]
    2190:	str	q0, [sp, #2176]
    2194:	str	q0, [sp, #2160]
    2198:	str	q0, [sp, #2144]
    219c:	str	q0, [sp, #2128]
    21a0:	str	q0, [sp, #2112]
    21a4:	str	w8, [x9, x8, lsl #2]
    21a8:	add	x8, x8, #0x1
    21ac:	cmp	x8, #0x100
    21b0:	b.ne	21a4 <BZ2_blockSort@@Base+0x960>  // b.any
    21b4:	mov	w8, #0x5556                	// #21846
    21b8:	mov	w9, #0x16c                 	// #364
    21bc:	movk	w8, #0x5555, lsl #16
    21c0:	add	x10, sp, #0x948
    21c4:	str	w19, [sp, #56]
    21c8:	b	21dc <BZ2_blockSort@@Base+0x998>
    21cc:	sub	w9, w9, #0x3
    21d0:	cmp	w9, #0x2
    21d4:	mov	w9, w11
    21d8:	b.ls	2268 <BZ2_blockSort@@Base+0xa24>  // b.plast
    21dc:	smull	x11, w9, w8
    21e0:	lsr	x12, x11, #63
    21e4:	lsr	x11, x11, #32
    21e8:	cmp	w9, #0x2ff
    21ec:	add	w11, w11, w12
    21f0:	b.gt	21cc <BZ2_blockSort@@Base+0x988>
    21f4:	mov	w12, wzr
    21f8:	sxtw	x13, w11
    21fc:	b	2214 <BZ2_blockSort@@Base+0x9d0>
    2200:	cmp	x13, #0xff
    2204:	add	x13, x13, #0x1
    2208:	add	w12, w12, #0x1
    220c:	str	w14, [x10, w17, sxtw #2]
    2210:	b.ge	21cc <BZ2_blockSort@@Base+0x988>  // b.tcont
    2214:	ldr	w14, [x10, x13, lsl #2]
    2218:	lsl	w15, w14, #8
    221c:	add	w16, w15, #0x100
    2220:	ldr	w16, [x22, w16, sxtw #2]
    2224:	ldr	w15, [x22, w15, sxtw #2]
    2228:	sub	w16, w16, w15
    222c:	mov	w15, w12
    2230:	ldr	w18, [x10, w15, sxtw #2]
    2234:	lsl	w17, w18, #8
    2238:	add	w0, w17, #0x100
    223c:	ldr	w0, [x22, w0, sxtw #2]
    2240:	ldr	w17, [x22, w17, sxtw #2]
    2244:	sub	w17, w0, w17
    2248:	cmp	w17, w16
    224c:	add	w17, w11, w15
    2250:	b.ls	2200 <BZ2_blockSort@@Base+0x9bc>  // b.plast
    2254:	subs	w15, w15, w11
    2258:	str	w18, [x10, w17, sxtw #2]
    225c:	b.ge	2230 <BZ2_blockSort@@Base+0x9ec>  // b.tcont
    2260:	add	w17, w11, w15
    2264:	b	2200 <BZ2_blockSort@@Base+0x9bc>
    2268:	add	x8, x22, #0x4
    226c:	mov	x19, xzr
    2270:	stp	x20, x8, [sp, #8]
    2274:	sub	x8, x25, #0x4
    2278:	add	x15, sp, #0x440
    227c:	add	x16, sp, #0x40
    2280:	str	wzr, [sp, #60]
    2284:	str	x8, [sp]
    2288:	b	2298 <BZ2_blockSort@@Base+0xa54>
    228c:	add	x19, x19, #0x1
    2290:	cmp	x19, #0x100
    2294:	b.eq	25d8 <BZ2_blockSort@@Base+0xd94>  // b.none
    2298:	add	x8, sp, #0x948
    229c:	ldr	w28, [x8, x19, lsl #2]
    22a0:	mov	x27, xzr
    22a4:	sxtw	x8, w28
    22a8:	stp	x19, x8, [sp, #24]
    22ac:	lsl	w8, w28, #8
    22b0:	add	x24, x22, w8, sxtw #2
    22b4:	b	22d8 <BZ2_blockSort@@Base+0xa94>
    22b8:	mov	x23, x26
    22bc:	mov	x26, x25
    22c0:	mov	x25, x19
    22c4:	add	x15, sp, #0x440
    22c8:	add	x16, sp, #0x40
    22cc:	mov	w8, #0x1                   	// #1
    22d0:	cbnz	w8, 2374 <BZ2_blockSort@@Base+0xb30>
    22d4:	b	25e4 <BZ2_blockSort@@Base+0xda0>
    22d8:	cmp	x28, x27
    22dc:	b.eq	2380 <BZ2_blockSort@@Base+0xb3c>  // b.none
    22e0:	ldr	w8, [x24]
    22e4:	tbnz	w8, #21, 2374 <BZ2_blockSort@@Base+0xb30>
    22e8:	ldr	w9, [x24, #4]
    22ec:	and	w20, w8, #0xffdfffff
    22f0:	and	w8, w9, #0xffdfffff
    22f4:	sub	w21, w8, #0x1
    22f8:	subs	w8, w21, w20
    22fc:	b.le	22cc <BZ2_blockSort@@Base+0xa88>
    2300:	ldr	w9, [sp, #52]
    2304:	cmp	w9, #0x4
    2308:	b.ge	2394 <BZ2_blockSort@@Base+0xb50>  // b.tcont
    230c:	mov	x19, x25
    2310:	mov	x0, x25
    2314:	mov	x25, x26
    2318:	mov	x1, x26
    231c:	mov	x26, x23
    2320:	mov	x2, x23
    2324:	ldr	x23, [sp, #40]
    2328:	ldr	w3, [sp, #56]
    232c:	mov	w4, w20
    2330:	mov	w5, w21
    2334:	mov	x6, x23
    2338:	bl	2acc <BZ2_blockSort@@Base+0x1288>
    233c:	ldr	w9, [sp, #60]
    2340:	ldr	w8, [x23]
    2344:	sub	w9, w9, w20
    2348:	add	w9, w9, w21
    234c:	add	w9, w9, #0x1
    2350:	str	w9, [sp, #60]
    2354:	tbz	w8, #31, 22b8 <BZ2_blockSort@@Base+0xa74>
    2358:	mov	w8, wzr
    235c:	mov	x23, x26
    2360:	mov	x26, x25
    2364:	mov	x25, x19
    2368:	add	x15, sp, #0x440
    236c:	add	x16, sp, #0x40
    2370:	cbz	w8, 25e4 <BZ2_blockSort@@Base+0xda0>
    2374:	ldr	w8, [x24]
    2378:	orr	w8, w8, #0x200000
    237c:	str	w8, [x24]
    2380:	add	x27, x27, #0x1
    2384:	cmp	x27, #0x100
    2388:	add	x24, x24, #0x4
    238c:	b.ne	22d8 <BZ2_blockSort@@Base+0xa94>  // b.any
    2390:	b	23c0 <BZ2_blockSort@@Base+0xb7c>
    2394:	adrp	x9, 1b000 <BZ2_bzerror@@Base+0x1084c>
    2398:	ldr	x9, [x9, #4016]
    239c:	ldr	w4, [sp, #60]
    23a0:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    23a4:	add	w5, w8, #0x1
    23a8:	ldr	x0, [x9]
    23ac:	add	x1, x1, #0xd43
    23b0:	mov	w2, w28
    23b4:	mov	w3, w27
    23b8:	bl	1750 <fprintf@plt>
    23bc:	b	230c <BZ2_blockSort@@Base+0xac8>
    23c0:	ldr	x8, [sp, #32]
    23c4:	add	x27, sp, #0x840
    23c8:	ldrb	w8, [x27, x8]
    23cc:	cbz	w8, 23e0 <BZ2_blockSort@@Base+0xb9c>
    23d0:	mov	w0, #0x3ee                 	// #1006
    23d4:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    23d8:	add	x16, sp, #0x40
    23dc:	add	x15, sp, #0x440
    23e0:	ldr	x9, [sp, #16]
    23e4:	ldr	w24, [sp, #56]
    23e8:	mov	x8, xzr
    23ec:	add	x9, x9, w28, sxtw #2
    23f0:	ldur	w10, [x9, #-4]
    23f4:	and	w10, w10, #0xffdfffff
    23f8:	str	w10, [x15, x8]
    23fc:	ldr	w10, [x9]
    2400:	add	x9, x9, #0x400
    2404:	and	w10, w10, #0xffdfffff
    2408:	sub	w10, w10, #0x1
    240c:	str	w10, [x16, x8]
    2410:	add	x8, x8, #0x4
    2414:	cmp	x8, #0x400
    2418:	b.ne	23f0 <BZ2_blockSort@@Base+0xbac>  // b.any
    241c:	lsl	w10, w28, #8
    2420:	ldp	x19, x28, [sp, #24]
    2424:	ldrsw	x9, [x22, w10, sxtw #2]
    2428:	sxtw	x20, w10
    242c:	ldr	w8, [x15, x28, lsl #2]
    2430:	and	x9, x9, #0xffffffffffdfffff
    2434:	cmp	w9, w8
    2438:	b.lt	24a4 <BZ2_blockSort@@Base+0xc60>  // b.tstop
    243c:	add	w21, w20, #0x100
    2440:	ldr	w9, [x22, w21, sxtw #2]
    2444:	ldr	w10, [x16, x28, lsl #2]
    2448:	and	w9, w9, #0xffdfffff
    244c:	b	2454 <BZ2_blockSort@@Base+0xc10>
    2450:	ldr	w10, [x16, x28, lsl #2]
    2454:	sub	w9, w9, #0x1
    2458:	cmp	w9, w10
    245c:	b.le	24d8 <BZ2_blockSort@@Base+0xc94>
    2460:	ldr	w10, [x25, w9, sxtw #2]
    2464:	sub	w10, w10, #0x1
    2468:	and	w11, w24, w10, asr #31
    246c:	add	w10, w11, w10
    2470:	ldrb	w11, [x26, w10, sxtw]
    2474:	ldrb	w12, [x27, x11]
    2478:	cbnz	w12, 2450 <BZ2_blockSort@@Base+0xc0c>
    247c:	lsl	x11, x11, #2
    2480:	ldrsw	x12, [x16, x11]
    2484:	sub	w13, w12, #0x1
    2488:	str	w13, [x16, x11]
    248c:	str	w10, [x25, x12, lsl #2]
    2490:	b	2450 <BZ2_blockSort@@Base+0xc0c>
    2494:	ldrsw	x8, [x15, x28, lsl #2]
    2498:	add	x9, x9, #0x1
    249c:	cmp	x9, x8
    24a0:	b.ge	243c <BZ2_blockSort@@Base+0xbf8>  // b.tcont
    24a4:	ldr	w8, [x25, x9, lsl #2]
    24a8:	sub	w8, w8, #0x1
    24ac:	and	w10, w24, w8, asr #31
    24b0:	add	w8, w10, w8
    24b4:	ldrb	w10, [x26, w8, sxtw]
    24b8:	ldrb	w11, [x27, x10]
    24bc:	cbnz	w11, 2494 <BZ2_blockSort@@Base+0xc50>
    24c0:	lsl	x10, x10, #2
    24c4:	ldrsw	x11, [x15, x10]
    24c8:	add	w12, w11, #0x1
    24cc:	str	w12, [x15, x10]
    24d0:	str	w8, [x25, x11, lsl #2]
    24d4:	b	2494 <BZ2_blockSort@@Base+0xc50>
    24d8:	sub	w9, w8, #0x1
    24dc:	cmp	w9, w10
    24e0:	b.eq	2504 <BZ2_blockSort@@Base+0xcc0>  // b.none
    24e4:	cbnz	w8, 24f4 <BZ2_blockSort@@Base+0xcb0>
    24e8:	ldr	x8, [sp, #8]
    24ec:	cmp	w10, w8
    24f0:	b.eq	2504 <BZ2_blockSort@@Base+0xcc0>  // b.none
    24f4:	mov	w0, #0x3ef                 	// #1007
    24f8:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    24fc:	add	x16, sp, #0x40
    2500:	add	x15, sp, #0x440
    2504:	mov	x9, xzr
    2508:	sxtw	x8, w21
    250c:	add	x10, x22, x28, lsl #2
    2510:	ldr	w11, [x10, x9]
    2514:	orr	w11, w11, #0x200000
    2518:	str	w11, [x10, x9]
    251c:	add	x9, x9, #0x400
    2520:	cmp	x9, #0x40, lsl #12
    2524:	b.ne	2510 <BZ2_blockSort@@Base+0xccc>  // b.any
    2528:	cmp	x19, #0xfe
    252c:	mov	w9, #0x1                   	// #1
    2530:	mov	w13, #0xfffe                	// #65534
    2534:	strb	w9, [x27, x28]
    2538:	b.hi	228c <BZ2_blockSort@@Base+0xa48>  // b.pmore
    253c:	ldrsw	x9, [x22, x20, lsl #2]
    2540:	ldr	w8, [x22, x8, lsl #2]
    2544:	and	x12, x9, #0xffffffffffdfffff
    2548:	and	w11, w8, #0xffdfffff
    254c:	sub	w10, w11, w12
    2550:	mov	w8, #0xffffffff            	// #-1
    2554:	add	w8, w8, #0x1
    2558:	asr	w9, w10, w8
    255c:	cmp	w9, w13
    2560:	b.gt	2554 <BZ2_blockSort@@Base+0xd10>
    2564:	subs	w9, w10, #0x1
    2568:	b.lt	25b8 <BZ2_blockSort@@Base+0xd74>  // b.tstop
    256c:	sxtw	x13, w10
    2570:	ldr	x10, [sp]
    2574:	add	x10, x10, x12, lsl #2
    2578:	mvn	w12, w12
    257c:	add	w11, w12, w11
    2580:	b	2594 <BZ2_blockSort@@Base+0xd50>
    2584:	cmp	x12, #0x0
    2588:	sub	w11, w11, #0x1
    258c:	mov	x13, x12
    2590:	b.le	25b8 <BZ2_blockSort@@Base+0xd74>
    2594:	ldrsw	x14, [x10, x13, lsl #2]
    2598:	sub	x12, x13, #0x1
    259c:	asr	w13, w11, w8
    25a0:	cmp	w14, #0x21
    25a4:	strh	w13, [x23, x14, lsl #1]
    25a8:	b.gt	2584 <BZ2_blockSort@@Base+0xd40>
    25ac:	add	w14, w14, w24
    25b0:	strh	w13, [x23, w14, sxtw #1]
    25b4:	b	2584 <BZ2_blockSort@@Base+0xd40>
    25b8:	asr	w8, w9, w8
    25bc:	cmp	w8, #0x10, lsl #12
    25c0:	b.lt	228c <BZ2_blockSort@@Base+0xa48>  // b.tstop
    25c4:	mov	w0, #0x3ea                 	// #1002
    25c8:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    25cc:	add	x16, sp, #0x40
    25d0:	add	x15, sp, #0x440
    25d4:	b	228c <BZ2_blockSort@@Base+0xa48>
    25d8:	ldr	w8, [sp, #52]
    25dc:	cmp	w8, #0x4
    25e0:	b.ge	264c <BZ2_blockSort@@Base+0xe08>  // b.tcont
    25e4:	add	sp, sp, #0xd50
    25e8:	ldp	x20, x19, [sp, #80]
    25ec:	ldp	x22, x21, [sp, #64]
    25f0:	ldp	x24, x23, [sp, #48]
    25f4:	ldp	x26, x25, [sp, #32]
    25f8:	ldp	x28, x27, [sp, #16]
    25fc:	ldp	x29, x30, [sp], #96
    2600:	ret
    2604:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    2608:	ldr	x8, [x8, #4016]
    260c:	adrp	x0, a000 <BZ2_bzRead@@Base+0x84>
    2610:	add	x0, x0, #0xd21
    2614:	mov	w1, #0x21                  	// #33
    2618:	ldr	x3, [x8]
    261c:	mov	w2, #0x1                   	// #1
    2620:	bl	16f0 <fwrite@plt>
    2624:	b	1ee0 <BZ2_blockSort@@Base+0x69c>
    2628:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    262c:	ldr	x8, [x8, #4016]
    2630:	adrp	x0, a000 <BZ2_bzRead@@Base+0x84>
    2634:	add	x0, x0, #0xcb4
    2638:	mov	w1, #0x1b                  	// #27
    263c:	ldr	x3, [x8]
    2640:	mov	w2, #0x1                   	// #1
    2644:	bl	16f0 <fwrite@plt>
    2648:	b	2020 <BZ2_blockSort@@Base+0x7dc>
    264c:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    2650:	ldr	x8, [x8, #4016]
    2654:	ldp	w2, w3, [sp, #56]
    2658:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    265c:	add	x1, x1, #0xd73
    2660:	ldr	x0, [x8]
    2664:	sub	w4, w2, w3
    2668:	bl	1750 <fprintf@plt>
    266c:	b	25e4 <BZ2_blockSort@@Base+0xda0>
    2670:	stp	x29, x30, [sp, #-96]!
    2674:	stp	x28, x27, [sp, #16]
    2678:	stp	x26, x25, [sp, #32]
    267c:	stp	x24, x23, [sp, #48]
    2680:	stp	x22, x21, [sp, #64]
    2684:	stp	x20, x19, [sp, #80]
    2688:	mov	x29, sp
    268c:	sub	sp, sp, #0x340
    2690:	add	x8, sp, #0x1a8
    2694:	add	x9, sp, #0x18
    2698:	mov	x19, x1
    269c:	mov	x20, x0
    26a0:	mov	w21, wzr
    26a4:	add	x10, x0, #0x4
    26a8:	mov	w11, #0x1                   	// #1
    26ac:	mov	x25, #0xffffffff00000000    	// #-4294967296
    26b0:	sub	x8, x8, #0x4
    26b4:	sub	x26, x9, #0x4
    26b8:	str	w2, [sp, #424]
    26bc:	str	w3, [sp, #24]
    26c0:	stp	x10, x8, [sp, #8]
    26c4:	ldr	x9, [sp, #16]
    26c8:	sbfiz	x8, x11, #2, #32
    26cc:	mov	x27, xzr
    26d0:	sxtw	x22, w11
    26d4:	sbfiz	x23, x11, #32, #32
    26d8:	add	x24, x9, x8
    26dc:	add	x28, x26, x8
    26e0:	add	x8, x22, x27
    26e4:	cmp	x8, #0x63
    26e8:	b.lt	26f4 <BZ2_blockSort@@Base+0xeb0>  // b.tstop
    26ec:	mov	w0, #0x3ec                 	// #1004
    26f0:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    26f4:	lsl	x8, x27, #2
    26f8:	ldr	w2, [x24, x8]
    26fc:	ldr	w3, [x28, x8]
    2700:	sub	w8, w3, w2
    2704:	cmp	w8, #0x9
    2708:	b.gt	2734 <BZ2_blockSort@@Base+0xef0>
    270c:	mov	x0, x20
    2710:	mov	x1, x19
    2714:	bl	29b0 <BZ2_blockSort@@Base+0x116c>
    2718:	sub	x27, x27, #0x1
    271c:	add	x8, x22, x27
    2720:	add	x8, x8, #0x1
    2724:	cmp	x8, #0x1
    2728:	add	x23, x23, x25
    272c:	b.gt	26e0 <BZ2_blockSort@@Base+0xe9c>
    2730:	b	2990 <BZ2_blockSort@@Base+0x114c>
    2734:	mov	w10, #0x1dc5                	// #7621
    2738:	orr	w11, wzr, #0x1
    273c:	madd	w10, w21, w10, w11
    2740:	sub	w8, w22, #0x1
    2744:	and	w21, w10, #0x7fff
    2748:	mov	w10, #0xaaab                	// #43691
    274c:	add	x11, x8, x27
    2750:	ldr	x8, [sp, #16]
    2754:	movk	w10, #0xaaaa, lsl #16
    2758:	umull	x10, w21, w10
    275c:	lsr	x10, x10, #33
    2760:	lsl	x9, x22, #2
    2764:	add	w10, w10, w10, lsl #1
    2768:	add	x8, x8, x9
    276c:	subs	w12, w21, w10
    2770:	add	x9, x26, x9
    2774:	mov	w10, w2
    2778:	b.eq	2794 <BZ2_blockSort@@Base+0xf50>  // b.none
    277c:	cmp	w12, #0x1
    2780:	b.ne	2790 <BZ2_blockSort@@Base+0xf4c>  // b.any
    2784:	add	w10, w3, w2
    2788:	asr	w10, w10, #1
    278c:	b	2794 <BZ2_blockSort@@Base+0xf50>
    2790:	mov	w10, w3
    2794:	ldr	w10, [x20, w10, sxtw #2]
    2798:	sxtw	x14, w2
    279c:	mov	w13, w3
    27a0:	mov	w15, w3
    27a4:	ldr	w16, [x19, x10, lsl #2]
    27a8:	mov	w10, w2
    27ac:	mov	w12, w2
    27b0:	cmp	w12, w15
    27b4:	b.gt	281c <BZ2_blockSort@@Base+0xfd8>
    27b8:	sxtw	x17, w15
    27bc:	sxtw	x10, w10
    27c0:	sxtw	x18, w12
    27c4:	ldr	w12, [x20, x18, lsl #2]
    27c8:	ldr	w0, [x19, x12, lsl #2]
    27cc:	subs	w0, w0, w16
    27d0:	b.eq	27f0 <BZ2_blockSort@@Base+0xfac>  // b.none
    27d4:	cmp	w0, #0x0
    27d8:	b.gt	2818 <BZ2_blockSort@@Base+0xfd4>
    27dc:	add	x12, x18, #0x1
    27e0:	cmp	x18, x17
    27e4:	mov	x18, x12
    27e8:	b.lt	27c4 <BZ2_blockSort@@Base+0xf80>  // b.tstop
    27ec:	b	281c <BZ2_blockSort@@Base+0xfd8>
    27f0:	lsl	x0, x10, #2
    27f4:	ldr	w1, [x20, x0]
    27f8:	add	x10, x10, #0x1
    27fc:	cmp	w15, w18
    2800:	str	w1, [x20, x18, lsl #2]
    2804:	str	w12, [x20, x0]
    2808:	add	w12, w18, #0x1
    280c:	b.gt	27c0 <BZ2_blockSort@@Base+0xf7c>
    2810:	add	w12, w18, #0x1
    2814:	b	281c <BZ2_blockSort@@Base+0xfd8>
    2818:	mov	w12, w18
    281c:	cmp	w12, w15
    2820:	b.gt	28a0 <BZ2_blockSort@@Base+0x105c>
    2824:	sxtw	x17, w12
    2828:	sxtw	x13, w13
    282c:	sxtw	x18, w15
    2830:	ldr	w15, [x20, x18, lsl #2]
    2834:	ldr	w0, [x19, x15, lsl #2]
    2838:	subs	w0, w0, w16
    283c:	b.eq	2858 <BZ2_blockSort@@Base+0x1014>  // b.none
    2840:	tbnz	w0, #31, 287c <BZ2_blockSort@@Base+0x1038>
    2844:	sub	x15, x18, #0x1
    2848:	cmp	x18, x17
    284c:	mov	x18, x15
    2850:	b.gt	2830 <BZ2_blockSort@@Base+0xfec>
    2854:	b	28a0 <BZ2_blockSort@@Base+0x105c>
    2858:	lsl	x0, x13, #2
    285c:	ldr	w1, [x20, x0]
    2860:	sub	x13, x13, #0x1
    2864:	cmp	w12, w18
    2868:	str	w1, [x20, x18, lsl #2]
    286c:	str	w15, [x20, x0]
    2870:	sub	w15, w18, #0x1
    2874:	b.lt	282c <BZ2_blockSort@@Base+0xfe8>  // b.tstop
    2878:	b	28a0 <BZ2_blockSort@@Base+0x105c>
    287c:	sbfiz	x17, x12, #2, #32
    2880:	ldr	w0, [x20, x17]
    2884:	add	w12, w12, #0x1
    2888:	str	w15, [x20, x17]
    288c:	sub	w15, w18, #0x1
    2890:	str	w0, [x20, x18, lsl #2]
    2894:	cmp	w12, w15
    2898:	b.le	27b8 <BZ2_blockSort@@Base+0xf74>
    289c:	b	281c <BZ2_blockSort@@Base+0xfd8>
    28a0:	cmp	w13, w10
    28a4:	b.lt	2988 <BZ2_blockSort@@Base+0x1144>  // b.tstop
    28a8:	sub	w11, w10, w2
    28ac:	sub	w16, w12, w10
    28b0:	cmp	w11, w16
    28b4:	csel	w16, w11, w16, lt  // lt = tstop
    28b8:	cmp	w16, #0x1
    28bc:	b.lt	28ec <BZ2_blockSort@@Base+0x10a8>  // b.tstop
    28c0:	sub	w17, w12, w16
    28c4:	add	x11, x20, x14, lsl #2
    28c8:	add	x14, x20, w17, sxtw #2
    28cc:	add	w16, w16, #0x1
    28d0:	ldr	w17, [x14]
    28d4:	ldr	w18, [x11]
    28d8:	sub	w16, w16, #0x1
    28dc:	cmp	w16, #0x1
    28e0:	str	w17, [x11], #4
    28e4:	str	w18, [x14], #4
    28e8:	b.gt	28d0 <BZ2_blockSort@@Base+0x108c>
    28ec:	sub	w14, w3, w13
    28f0:	sub	w11, w13, w15
    28f4:	cmp	w14, w11
    28f8:	csel	w15, w14, w11, lt  // lt = tstop
    28fc:	cmp	w15, #0x1
    2900:	b.lt	2934 <BZ2_blockSort@@Base+0x10f0>  // b.tstop
    2904:	ldr	x16, [sp, #8]
    2908:	sub	w14, w3, w15
    290c:	add	x13, x20, w12, sxtw #2
    2910:	add	w15, w15, #0x1
    2914:	add	x14, x16, w14, sxtw #2
    2918:	ldr	w16, [x14]
    291c:	ldr	w17, [x13]
    2920:	sub	w15, w15, #0x1
    2924:	cmp	w15, #0x1
    2928:	str	w16, [x13], #4
    292c:	str	w17, [x14], #4
    2930:	b.gt	2918 <BZ2_blockSort@@Base+0x10d4>
    2934:	mvn	w10, w10
    2938:	sub	w11, w3, w11
    293c:	add	w13, w2, w10
    2940:	add	w10, w11, #0x1
    2944:	add	w11, w13, w12
    2948:	sub	w12, w11, w2
    294c:	sub	w13, w3, w10
    2950:	cmp	w12, w13
    2954:	b.le	2960 <BZ2_blockSort@@Base+0x111c>
    2958:	str	w11, [x9, x27, lsl #2]
    295c:	b	296c <BZ2_blockSort@@Base+0x1128>
    2960:	str	w10, [x8, x27, lsl #2]
    2964:	mov	w10, w2
    2968:	mov	w3, w11
    296c:	asr	x8, x23, #30
    2970:	add	x11, sp, #0x1a8
    2974:	add	w9, w22, w27
    2978:	str	w10, [x11, x8]
    297c:	add	x10, sp, #0x18
    2980:	str	w3, [x10, x8]
    2984:	add	w11, w9, #0x1
    2988:	cmp	w11, #0x0
    298c:	b.gt	26c4 <BZ2_blockSort@@Base+0xe80>
    2990:	add	sp, sp, #0x340
    2994:	ldp	x20, x19, [sp, #80]
    2998:	ldp	x22, x21, [sp, #64]
    299c:	ldp	x24, x23, [sp, #48]
    29a0:	ldp	x26, x25, [sp, #32]
    29a4:	ldp	x28, x27, [sp, #16]
    29a8:	ldp	x29, x30, [sp], #96
    29ac:	ret
    29b0:	subs	w8, w3, w2
    29b4:	b.eq	2ac8 <BZ2_blockSort@@Base+0x1284>  // b.none
    29b8:	cmp	w8, #0x4
    29bc:	b.lt	2a4c <BZ2_blockSort@@Base+0x1208>  // b.tstop
    29c0:	sub	w9, w3, #0x4
    29c4:	cmp	w9, w2
    29c8:	b.lt	2a4c <BZ2_blockSort@@Base+0x1208>  // b.tstop
    29cc:	sxtw	x8, w3
    29d0:	sxtw	x9, w9
    29d4:	sxtw	x10, w2
    29d8:	mov	w11, w3
    29dc:	b	29f8 <BZ2_blockSort@@Base+0x11b4>
    29e0:	sbfiz	x13, x14, #2, #32
    29e4:	cmp	x9, x10
    29e8:	sub	x9, x9, #0x1
    29ec:	sub	w11, w11, #0x1
    29f0:	str	w12, [x0, x13]
    29f4:	b.le	2a4c <BZ2_blockSort@@Base+0x1208>
    29f8:	ldrsw	x12, [x0, x9, lsl #2]
    29fc:	add	x13, x9, #0x4
    2a00:	cmp	x13, x8
    2a04:	mov	x14, x9
    2a08:	b.gt	29e0 <BZ2_blockSort@@Base+0x119c>
    2a0c:	ldr	w13, [x1, x12, lsl #2]
    2a10:	sxtw	x16, w11
    2a14:	mov	x14, x9
    2a18:	ldr	w17, [x0, x16, lsl #2]
    2a1c:	mov	x15, x16
    2a20:	ldr	w16, [x1, x17, lsl #2]
    2a24:	cmp	w13, w16
    2a28:	b.ls	29e0 <BZ2_blockSort@@Base+0x119c>  // b.plast
    2a2c:	sbfiz	x14, x14, #2, #32
    2a30:	add	x16, x15, #0x4
    2a34:	cmp	x16, x8
    2a38:	str	w17, [x0, x14]
    2a3c:	mov	x14, x15
    2a40:	b.le	2a18 <BZ2_blockSort@@Base+0x11d4>
    2a44:	sub	x14, x16, #0x4
    2a48:	b	29e0 <BZ2_blockSort@@Base+0x119c>
    2a4c:	cmp	w3, w2
    2a50:	b.le	2ac8 <BZ2_blockSort@@Base+0x1284>
    2a54:	sxtw	x8, w3
    2a58:	sxtw	x9, w2
    2a5c:	add	x10, x0, w3, sxtw #2
    2a60:	mov	x12, x8
    2a64:	b	2a80 <BZ2_blockSort@@Base+0x123c>
    2a68:	sub	w12, w12, #0x1
    2a6c:	cmp	x11, x9
    2a70:	str	w13, [x0, w12, sxtw #2]
    2a74:	sub	x10, x10, #0x4
    2a78:	mov	x12, x11
    2a7c:	b.le	2ac8 <BZ2_blockSort@@Base+0x1284>
    2a80:	sub	x11, x12, #0x1
    2a84:	ldrsw	x13, [x0, x11, lsl #2]
    2a88:	cmp	w12, w3
    2a8c:	b.gt	2a68 <BZ2_blockSort@@Base+0x1224>
    2a90:	ldr	w14, [x1, x13, lsl #2]
    2a94:	mov	x15, x10
    2a98:	ldr	w16, [x15]
    2a9c:	ldr	w17, [x1, x16, lsl #2]
    2aa0:	cmp	w14, w17
    2aa4:	b.ls	2a68 <BZ2_blockSort@@Base+0x1224>  // b.plast
    2aa8:	stur	w16, [x15, #-4]
    2aac:	add	x16, x12, #0x1
    2ab0:	cmp	x12, x8
    2ab4:	add	x15, x15, #0x4
    2ab8:	mov	x12, x16
    2abc:	b.lt	2a98 <BZ2_blockSort@@Base+0x1254>  // b.tstop
    2ac0:	mov	w12, w16
    2ac4:	b	2a68 <BZ2_blockSort@@Base+0x1224>
    2ac8:	ret
    2acc:	stp	x29, x30, [sp, #-96]!
    2ad0:	stp	x28, x27, [sp, #16]
    2ad4:	stp	x26, x25, [sp, #32]
    2ad8:	stp	x24, x23, [sp, #48]
    2adc:	stp	x22, x21, [sp, #64]
    2ae0:	stp	x20, x19, [sp, #80]
    2ae4:	mov	x29, sp
    2ae8:	sub	sp, sp, #0x4e0
    2aec:	mov	x22, x1
    2af0:	mov	x23, x0
    2af4:	mov	w8, #0x2                   	// #2
    2af8:	add	x9, x0, #0x4
    2afc:	mov	w27, #0x1                   	// #1
    2b00:	add	x21, sp, #0x1b8
    2b04:	add	x20, sp, #0x28
    2b08:	mov	w28, #0x1                   	// #1
    2b0c:	str	x6, [sp, #24]
    2b10:	str	w3, [sp, #20]
    2b14:	str	w4, [sp, #840]
    2b18:	str	w5, [sp, #440]
    2b1c:	stp	x9, x2, [sp]
    2b20:	str	w8, [sp, #40]
    2b24:	sxtw	x8, w28
    2b28:	sub	x28, x8, #0x1
    2b2c:	str	x8, [sp, #32]
    2b30:	ldr	x8, [sp, #32]
    2b34:	cmp	w8, #0x62
    2b38:	b.lt	2b44 <BZ2_blockSort@@Base+0x1300>  // b.tstop
    2b3c:	mov	w0, #0x3e9                 	// #1001
    2b40:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    2b44:	lsl	x19, x28, #2
    2b48:	add	x8, sp, #0x348
    2b4c:	ldr	w25, [x8, x19]
    2b50:	ldr	w26, [x21, x19]
    2b54:	ldr	w24, [x20, x19]
    2b58:	sub	w8, w26, w25
    2b5c:	cmp	w8, #0x14
    2b60:	b.lt	2ccc <BZ2_blockSort@@Base+0x1488>  // b.tstop
    2b64:	cmp	w24, #0xf
    2b68:	b.ge	2ccc <BZ2_blockSort@@Base+0x1488>  // b.tcont
    2b6c:	add	w9, w26, w25
    2b70:	sxtw	x20, w25
    2b74:	sxtw	x8, w26
    2b78:	asr	w9, w9, #1
    2b7c:	ldr	w10, [x23, x20, lsl #2]
    2b80:	ldr	w8, [x23, x8, lsl #2]
    2b84:	ldr	w9, [x23, w9, sxtw #2]
    2b88:	add	w10, w10, w24
    2b8c:	add	w8, w8, w24
    2b90:	add	w9, w9, w24
    2b94:	ldrb	w1, [x22, w8, uxtw]
    2b98:	ldrb	w0, [x22, w10, uxtw]
    2b9c:	ldrb	w2, [x22, w9, uxtw]
    2ba0:	bl	310c <BZ2_blockSort@@Base+0x18c8>
    2ba4:	and	w12, w0, #0xff
    2ba8:	mov	w10, w26
    2bac:	mov	w8, w25
    2bb0:	mov	w11, w26
    2bb4:	mov	w9, w25
    2bb8:	cmp	w9, w11
    2bbc:	b.gt	2c28 <BZ2_blockSort@@Base+0x13e4>
    2bc0:	sxtw	x13, w11
    2bc4:	sxtw	x8, w8
    2bc8:	sxtw	x14, w9
    2bcc:	ldr	w9, [x23, x14, lsl #2]
    2bd0:	add	w15, w9, w24
    2bd4:	ldrb	w15, [x22, w15, uxtw]
    2bd8:	subs	w15, w15, w12
    2bdc:	b.eq	2bfc <BZ2_blockSort@@Base+0x13b8>  // b.none
    2be0:	cmp	w15, #0x0
    2be4:	b.gt	2c24 <BZ2_blockSort@@Base+0x13e0>
    2be8:	add	x9, x14, #0x1
    2bec:	cmp	x14, x13
    2bf0:	mov	x14, x9
    2bf4:	b.lt	2bcc <BZ2_blockSort@@Base+0x1388>  // b.tstop
    2bf8:	b	2c28 <BZ2_blockSort@@Base+0x13e4>
    2bfc:	lsl	x15, x8, #2
    2c00:	ldr	w16, [x23, x15]
    2c04:	add	x8, x8, #0x1
    2c08:	cmp	w11, w14
    2c0c:	str	w16, [x23, x14, lsl #2]
    2c10:	str	w9, [x23, x15]
    2c14:	add	w9, w14, #0x1
    2c18:	b.gt	2bc8 <BZ2_blockSort@@Base+0x1384>
    2c1c:	add	w9, w14, #0x1
    2c20:	b	2c28 <BZ2_blockSort@@Base+0x13e4>
    2c24:	mov	w9, w14
    2c28:	cmp	w9, w11
    2c2c:	b.gt	2cb0 <BZ2_blockSort@@Base+0x146c>
    2c30:	sxtw	x13, w9
    2c34:	sxtw	x10, w10
    2c38:	sxtw	x14, w11
    2c3c:	ldr	w11, [x23, x14, lsl #2]
    2c40:	add	w15, w11, w24
    2c44:	ldrb	w15, [x22, w15, uxtw]
    2c48:	subs	w15, w15, w12
    2c4c:	b.eq	2c68 <BZ2_blockSort@@Base+0x1424>  // b.none
    2c50:	tbnz	w15, #31, 2c8c <BZ2_blockSort@@Base+0x1448>
    2c54:	sub	x11, x14, #0x1
    2c58:	cmp	x14, x13
    2c5c:	mov	x14, x11
    2c60:	b.gt	2c3c <BZ2_blockSort@@Base+0x13f8>
    2c64:	b	2cb0 <BZ2_blockSort@@Base+0x146c>
    2c68:	lsl	x15, x10, #2
    2c6c:	ldr	w16, [x23, x15]
    2c70:	sub	x10, x10, #0x1
    2c74:	cmp	w9, w14
    2c78:	str	w16, [x23, x14, lsl #2]
    2c7c:	str	w11, [x23, x15]
    2c80:	sub	w11, w14, #0x1
    2c84:	b.lt	2c38 <BZ2_blockSort@@Base+0x13f4>  // b.tstop
    2c88:	b	2cb0 <BZ2_blockSort@@Base+0x146c>
    2c8c:	sbfiz	x13, x9, #2, #32
    2c90:	ldr	w15, [x23, x13]
    2c94:	add	w9, w9, #0x1
    2c98:	str	w11, [x23, x13]
    2c9c:	sub	w11, w14, #0x1
    2ca0:	str	w15, [x23, x14, lsl #2]
    2ca4:	cmp	w9, w11
    2ca8:	b.le	2bc0 <BZ2_blockSort@@Base+0x137c>
    2cac:	b	2c28 <BZ2_blockSort@@Base+0x13e4>
    2cb0:	cmp	w10, w8
    2cb4:	b.ge	2d00 <BZ2_blockSort@@Base+0x14bc>  // b.tcont
    2cb8:	add	w8, w24, #0x1
    2cbc:	add	x20, sp, #0x28
    2cc0:	str	w8, [x20, x28, lsl #2]
    2cc4:	tbnz	w27, #0, 2b30 <BZ2_blockSort@@Base+0x12ec>
    2cc8:	b	2e54 <BZ2_blockSort@@Base+0x1610>
    2ccc:	ldr	x19, [sp, #24]
    2cd0:	ldr	x2, [sp, #8]
    2cd4:	ldr	w3, [sp, #20]
    2cd8:	mov	x0, x23
    2cdc:	mov	x1, x22
    2ce0:	mov	w4, w25
    2ce4:	mov	w5, w26
    2ce8:	mov	w6, w24
    2cec:	mov	x7, x19
    2cf0:	bl	2e74 <BZ2_blockSort@@Base+0x1630>
    2cf4:	ldr	w8, [x19]
    2cf8:	tbz	w8, #31, 2e48 <BZ2_blockSort@@Base+0x1604>
    2cfc:	b	2e54 <BZ2_blockSort@@Base+0x1610>
    2d00:	sub	w12, w8, w25
    2d04:	sub	w13, w9, w8
    2d08:	cmp	w12, w13
    2d0c:	csel	w14, w12, w13, lt  // lt = tstop
    2d10:	cmp	w14, #0x1
    2d14:	b.lt	2d44 <BZ2_blockSort@@Base+0x1500>  // b.tstop
    2d18:	sub	w13, w9, w14
    2d1c:	add	x12, x23, x20, lsl #2
    2d20:	add	x13, x23, w13, sxtw #2
    2d24:	add	w14, w14, #0x1
    2d28:	ldr	w15, [x13]
    2d2c:	ldr	w16, [x12]
    2d30:	sub	w14, w14, #0x1
    2d34:	cmp	w14, #0x1
    2d38:	str	w15, [x12], #4
    2d3c:	str	w16, [x13], #4
    2d40:	b.gt	2d28 <BZ2_blockSort@@Base+0x14e4>
    2d44:	sub	w12, w26, w10
    2d48:	sub	w10, w10, w11
    2d4c:	cmp	w12, w10
    2d50:	csel	w13, w12, w10, lt  // lt = tstop
    2d54:	cmp	w13, #0x1
    2d58:	b.lt	2d8c <BZ2_blockSort@@Base+0x1548>  // b.tstop
    2d5c:	ldr	x14, [sp]
    2d60:	sub	w12, w26, w13
    2d64:	add	x11, x23, w9, sxtw #2
    2d68:	add	w13, w13, #0x1
    2d6c:	add	x12, x14, w12, sxtw #2
    2d70:	ldr	w14, [x12]
    2d74:	ldr	w15, [x11]
    2d78:	sub	w13, w13, #0x1
    2d7c:	cmp	w13, #0x1
    2d80:	str	w14, [x11], #4
    2d84:	str	w15, [x12], #4
    2d88:	b.gt	2d70 <BZ2_blockSort@@Base+0x152c>
    2d8c:	sub	w8, w25, w8
    2d90:	sub	w10, w26, w10
    2d94:	add	w8, w8, w9
    2d98:	add	w9, w10, #0x1
    2d9c:	sub	w11, w8, #0x1
    2da0:	sub	w9, w26, w9
    2da4:	sub	w13, w11, w25
    2da8:	cmp	w13, w9
    2dac:	csinc	w9, w25, w10, lt  // lt = tstop
    2db0:	csel	w14, w11, w26, lt  // lt = tstop
    2db4:	sub	w12, w10, w8
    2db8:	sub	w15, w14, w9
    2dbc:	csinc	w13, w25, w10, ge  // ge = tcont
    2dc0:	csel	w11, w26, w11, lt  // lt = tstop
    2dc4:	cmp	w15, w12
    2dc8:	ldr	x1, [sp, #32]
    2dcc:	csel	w12, w8, w9, lt  // lt = tstop
    2dd0:	csel	w15, w14, w10, lt  // lt = tstop
    2dd4:	csel	w10, w10, w14, lt  // lt = tstop
    2dd8:	sub	w16, w11, w13
    2ddc:	csel	w8, w9, w8, lt  // lt = tstop
    2de0:	sub	w9, w10, w12
    2de4:	cinc	w14, w24, ge  // ge = tcont
    2de8:	cinc	w17, w24, lt  // lt = tstop
    2dec:	cmp	w16, w9
    2df0:	lsl	x9, x1, #2
    2df4:	csel	w16, w13, w12, lt  // lt = tstop
    2df8:	csel	w12, w12, w13, lt  // lt = tstop
    2dfc:	add	x0, sp, #0x348
    2e00:	csel	w13, w11, w10, lt  // lt = tstop
    2e04:	csel	w10, w10, w11, lt  // lt = tstop
    2e08:	csel	w11, w24, w17, lt  // lt = tstop
    2e0c:	csel	w17, w17, w24, lt  // lt = tstop
    2e10:	add	x18, x9, #0x4
    2e14:	str	w12, [x0, x19]
    2e18:	add	x12, sp, #0x1b8
    2e1c:	add	x20, sp, #0x28
    2e20:	str	w10, [x12, x19]
    2e24:	str	w17, [x20, x19]
    2e28:	str	w16, [x0, x9]
    2e2c:	str	w13, [x12, x9]
    2e30:	str	w11, [x20, x9]
    2e34:	str	w8, [x0, x18]
    2e38:	add	x21, sp, #0x1b8
    2e3c:	str	w15, [x12, x18]
    2e40:	str	w14, [x20, x18]
    2e44:	add	w28, w1, #0x2
    2e48:	cmp	w28, #0x0
    2e4c:	cset	w27, gt
    2e50:	b.gt	2b24 <BZ2_blockSort@@Base+0x12e0>
    2e54:	add	sp, sp, #0x4e0
    2e58:	ldp	x20, x19, [sp, #80]
    2e5c:	ldp	x22, x21, [sp, #64]
    2e60:	ldp	x24, x23, [sp, #48]
    2e64:	ldp	x26, x25, [sp, #32]
    2e68:	ldp	x28, x27, [sp, #16]
    2e6c:	ldp	x29, x30, [sp], #96
    2e70:	ret
    2e74:	sub	sp, sp, #0xb0
    2e78:	stp	x29, x30, [sp, #80]
    2e7c:	stp	x28, x27, [sp, #96]
    2e80:	stp	x26, x25, [sp, #112]
    2e84:	stp	x24, x23, [sp, #128]
    2e88:	stp	x22, x21, [sp, #144]
    2e8c:	stp	x20, x19, [sp, #160]
    2e90:	add	x29, sp, #0x50
    2e94:	sub	w9, w5, w4
    2e98:	cmp	w9, #0x1
    2e9c:	stur	w3, [x29, #-4]
    2ea0:	str	w4, [sp, #28]
    2ea4:	b.lt	2ee0 <BZ2_blockSort@@Base+0x169c>  // b.tstop
    2ea8:	adrp	x11, a000 <BZ2_bzRead@@Base+0x84>
    2eac:	mov	x19, x7
    2eb0:	mov	w20, w6
    2eb4:	mov	x23, x2
    2eb8:	mov	x24, x1
    2ebc:	mov	x25, x0
    2ec0:	mov	x8, xzr
    2ec4:	add	x11, x11, #0xda0
    2ec8:	ldr	w10, [x11, x8, lsl #2]
    2ecc:	add	x8, x8, #0x1
    2ed0:	cmp	w10, w9
    2ed4:	b.le	2ec8 <BZ2_blockSort@@Base+0x1684>
    2ed8:	cmp	w8, #0x1
    2edc:	b.ne	2f00 <BZ2_blockSort@@Base+0x16bc>  // b.any
    2ee0:	ldp	x20, x19, [sp, #160]
    2ee4:	ldp	x22, x21, [sp, #144]
    2ee8:	ldp	x24, x23, [sp, #128]
    2eec:	ldp	x26, x25, [sp, #112]
    2ef0:	ldp	x28, x27, [sp, #96]
    2ef4:	ldp	x29, x30, [sp, #80]
    2ef8:	add	sp, sp, #0xb0
    2efc:	ret
    2f00:	sxtw	x9, w5
    2f04:	stur	x9, [x29, #-24]
    2f08:	ldr	w9, [sp, #28]
    2f0c:	sub	x8, x8, #0x1
    2f10:	and	x8, x8, #0xffffffff
    2f14:	str	x8, [sp, #32]
    2f18:	add	w10, w9, #0x1
    2f1c:	add	w8, w9, #0x2
    2f20:	stp	w8, w10, [sp, #8]
    2f24:	b	2f34 <BZ2_blockSort@@Base+0x16f0>
    2f28:	ldr	x8, [sp, #16]
    2f2c:	cmp	x8, #0x1
    2f30:	b.le	2ee0 <BZ2_blockSort@@Base+0x169c>
    2f34:	ldr	x8, [sp, #32]
    2f38:	ldr	w10, [sp, #8]
    2f3c:	str	x8, [sp, #16]
    2f40:	sub	x9, x8, #0x1
    2f44:	adrp	x8, a000 <BZ2_bzRead@@Base+0x84>
    2f48:	add	x8, x8, #0xda0
    2f4c:	ldr	w21, [x8, x9, lsl #2]
    2f50:	ldr	w8, [sp, #28]
    2f54:	stur	w10, [x29, #-36]
    2f58:	ldr	w10, [sp, #12]
    2f5c:	str	x9, [sp, #32]
    2f60:	add	w27, w21, w8
    2f64:	sxtw	x9, w27
    2f68:	stp	w10, w8, [x29, #-32]
    2f6c:	b	2fb0 <BZ2_blockSort@@Base+0x176c>
    2f70:	add	w8, w21, w22
    2f74:	ldur	w10, [x29, #-28]
    2f78:	ldr	w9, [sp, #40]
    2f7c:	add	w10, w10, #0x3
    2f80:	stur	w10, [x29, #-28]
    2f84:	ldur	w10, [x29, #-32]
    2f88:	str	w9, [x25, w8, sxtw #2]
    2f8c:	ldur	x9, [x29, #-16]
    2f90:	ldr	w8, [x19]
    2f94:	add	w10, w10, #0x3
    2f98:	stur	w10, [x29, #-32]
    2f9c:	ldur	w10, [x29, #-36]
    2fa0:	add	x9, x9, #0x3
    2fa4:	add	w10, w10, #0x3
    2fa8:	stur	w10, [x29, #-36]
    2fac:	tbnz	w8, #31, 2ee0 <BZ2_blockSort@@Base+0x169c>
    2fb0:	ldur	x8, [x29, #-24]
    2fb4:	cmp	x9, x8
    2fb8:	b.gt	2f28 <BZ2_blockSort@@Base+0x16e4>
    2fbc:	ldr	w8, [x25, x9, lsl #2]
    2fc0:	ldur	w28, [x29, #-28]
    2fc4:	stur	x9, [x29, #-16]
    2fc8:	add	w26, w8, w20
    2fcc:	str	w8, [sp, #40]
    2fd0:	ldr	w8, [x25, w28, sxtw #2]
    2fd4:	ldur	w4, [x29, #-4]
    2fd8:	mov	w1, w26
    2fdc:	mov	x2, x24
    2fe0:	add	w0, w8, w20
    2fe4:	mov	x3, x23
    2fe8:	mov	x5, x19
    2fec:	sxtw	x22, w28
    2ff0:	bl	313c <BZ2_blockSort@@Base+0x18f8>
    2ff4:	tst	w0, #0xff
    2ff8:	b.eq	301c <BZ2_blockSort@@Base+0x17d8>  // b.none
    2ffc:	ldr	w8, [x25, x22, lsl #2]
    3000:	add	w9, w21, w28
    3004:	cmp	w22, w27
    3008:	sub	w28, w22, w21
    300c:	str	w8, [x25, w9, sxtw #2]
    3010:	b.ge	2fd0 <BZ2_blockSort@@Base+0x178c>  // b.tcont
    3014:	add	w8, w21, w28
    3018:	b	3020 <BZ2_blockSort@@Base+0x17dc>
    301c:	add	w8, w21, w22
    3020:	ldp	x9, x10, [x29, #-24]
    3024:	ldr	w11, [sp, #40]
    3028:	cmp	x10, x9
    302c:	str	w11, [x25, w8, sxtw #2]
    3030:	b.ge	2f28 <BZ2_blockSort@@Base+0x16e4>  // b.tcont
    3034:	add	x8, x10, #0x1
    3038:	ldr	w8, [x25, x8, lsl #2]
    303c:	ldur	w28, [x29, #-32]
    3040:	add	w26, w8, w20
    3044:	str	w8, [sp, #40]
    3048:	ldr	w8, [x25, w28, sxtw #2]
    304c:	ldur	w4, [x29, #-4]
    3050:	mov	w1, w26
    3054:	mov	x2, x24
    3058:	add	w0, w8, w20
    305c:	mov	x3, x23
    3060:	mov	x5, x19
    3064:	sxtw	x22, w28
    3068:	bl	313c <BZ2_blockSort@@Base+0x18f8>
    306c:	tst	w0, #0xff
    3070:	b.eq	3094 <BZ2_blockSort@@Base+0x1850>  // b.none
    3074:	ldr	w8, [x25, x22, lsl #2]
    3078:	add	w9, w21, w28
    307c:	cmp	w22, w27
    3080:	sub	w28, w22, w21
    3084:	str	w8, [x25, w9, sxtw #2]
    3088:	b.ge	3048 <BZ2_blockSort@@Base+0x1804>  // b.tcont
    308c:	add	w8, w21, w28
    3090:	b	3098 <BZ2_blockSort@@Base+0x1854>
    3094:	add	w8, w21, w22
    3098:	ldp	x10, x9, [x29, #-24]
    309c:	add	x9, x9, #0x2
    30a0:	cmp	x9, x10
    30a4:	ldr	w10, [sp, #40]
    30a8:	str	w10, [x25, w8, sxtw #2]
    30ac:	b.gt	2f28 <BZ2_blockSort@@Base+0x16e4>
    30b0:	ldr	w8, [x25, x9, lsl #2]
    30b4:	ldur	w28, [x29, #-36]
    30b8:	add	w26, w8, w20
    30bc:	str	w8, [sp, #40]
    30c0:	ldr	w8, [x25, w28, sxtw #2]
    30c4:	ldur	w4, [x29, #-4]
    30c8:	mov	w1, w26
    30cc:	mov	x2, x24
    30d0:	add	w0, w8, w20
    30d4:	mov	x3, x23
    30d8:	mov	x5, x19
    30dc:	sxtw	x22, w28
    30e0:	bl	313c <BZ2_blockSort@@Base+0x18f8>
    30e4:	tst	w0, #0xff
    30e8:	b.eq	2f70 <BZ2_blockSort@@Base+0x172c>  // b.none
    30ec:	ldr	w8, [x25, x22, lsl #2]
    30f0:	add	w9, w21, w28
    30f4:	cmp	w22, w27
    30f8:	sub	w28, w22, w21
    30fc:	str	w8, [x25, w9, sxtw #2]
    3100:	b.ge	30c0 <BZ2_blockSort@@Base+0x187c>  // b.tcont
    3104:	add	w8, w21, w28
    3108:	b	2f74 <BZ2_blockSort@@Base+0x1730>
    310c:	and	w9, w0, #0xff
    3110:	cmp	w9, w1, uxtb
    3114:	mov	w8, w0
    3118:	csel	w0, w0, w1, hi  // hi = pmore
    311c:	and	w9, w0, #0xff
    3120:	csel	w8, w1, w8, hi  // hi = pmore
    3124:	cmp	w9, w2, uxtb
    3128:	b.ls	3138 <BZ2_blockSort@@Base+0x18f4>  // b.plast
    312c:	and	w9, w8, #0xff
    3130:	cmp	w9, w2, uxtb
    3134:	csel	w0, w8, w2, hi  // hi = pmore
    3138:	ret
    313c:	ldrb	w8, [x2, w0, uxtw]
    3140:	ldrb	w9, [x2, w1, uxtw]
    3144:	cmp	w8, w9
    3148:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    314c:	add	w8, w0, #0x1
    3150:	add	w9, w1, #0x1
    3154:	ldrb	w8, [x2, w8, uxtw]
    3158:	ldrb	w9, [x2, w9, uxtw]
    315c:	cmp	w8, w9
    3160:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    3164:	add	w8, w0, #0x2
    3168:	add	w9, w1, #0x2
    316c:	ldrb	w8, [x2, w8, uxtw]
    3170:	ldrb	w9, [x2, w9, uxtw]
    3174:	cmp	w8, w9
    3178:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    317c:	add	w8, w0, #0x3
    3180:	add	w9, w1, #0x3
    3184:	ldrb	w8, [x2, w8, uxtw]
    3188:	ldrb	w9, [x2, w9, uxtw]
    318c:	cmp	w8, w9
    3190:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    3194:	add	w8, w0, #0x4
    3198:	add	w9, w1, #0x4
    319c:	ldrb	w8, [x2, w8, uxtw]
    31a0:	ldrb	w9, [x2, w9, uxtw]
    31a4:	cmp	w8, w9
    31a8:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    31ac:	add	w8, w0, #0x5
    31b0:	add	w9, w1, #0x5
    31b4:	ldrb	w8, [x2, w8, uxtw]
    31b8:	ldrb	w9, [x2, w9, uxtw]
    31bc:	cmp	w8, w9
    31c0:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    31c4:	add	w8, w0, #0x6
    31c8:	add	w9, w1, #0x6
    31cc:	ldrb	w8, [x2, w8, uxtw]
    31d0:	ldrb	w9, [x2, w9, uxtw]
    31d4:	cmp	w8, w9
    31d8:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    31dc:	add	w8, w0, #0x7
    31e0:	add	w9, w1, #0x7
    31e4:	ldrb	w8, [x2, w8, uxtw]
    31e8:	ldrb	w9, [x2, w9, uxtw]
    31ec:	cmp	w8, w9
    31f0:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    31f4:	add	w8, w0, #0x8
    31f8:	add	w9, w1, #0x8
    31fc:	ldrb	w8, [x2, w8, uxtw]
    3200:	ldrb	w9, [x2, w9, uxtw]
    3204:	cmp	w8, w9
    3208:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    320c:	add	w8, w0, #0x9
    3210:	add	w9, w1, #0x9
    3214:	ldrb	w8, [x2, w8, uxtw]
    3218:	ldrb	w9, [x2, w9, uxtw]
    321c:	cmp	w8, w9
    3220:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    3224:	add	w8, w0, #0xa
    3228:	add	w9, w1, #0xa
    322c:	ldrb	w8, [x2, w8, uxtw]
    3230:	ldrb	w9, [x2, w9, uxtw]
    3234:	cmp	w8, w9
    3238:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    323c:	add	w8, w0, #0xb
    3240:	add	w9, w1, #0xb
    3244:	ldrb	w8, [x2, w8, uxtw]
    3248:	ldrb	w9, [x2, w9, uxtw]
    324c:	cmp	w8, w9
    3250:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    3254:	add	w9, w0, #0xc
    3258:	add	w10, w1, #0xc
    325c:	add	w8, w4, #0x10
    3260:	mov	w9, w9
    3264:	mov	w10, w10
    3268:	ldrb	w11, [x2, x9]
    326c:	ldrb	w12, [x2, x10]
    3270:	cmp	w11, w12
    3274:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    3278:	ldrh	w11, [x3, x9, lsl #1]
    327c:	ldrh	w12, [x3, x10, lsl #1]
    3280:	cmp	w11, w12
    3284:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    3288:	add	w11, w9, #0x1
    328c:	add	w12, w10, #0x1
    3290:	ldrb	w13, [x2, x11]
    3294:	ldrb	w14, [x2, x12]
    3298:	cmp	w13, w14
    329c:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    32a0:	ldrh	w11, [x3, x11, lsl #1]
    32a4:	ldrh	w12, [x3, x12, lsl #1]
    32a8:	cmp	w11, w12
    32ac:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    32b0:	add	w11, w9, #0x2
    32b4:	add	w12, w10, #0x2
    32b8:	ldrb	w13, [x2, x11]
    32bc:	ldrb	w14, [x2, x12]
    32c0:	cmp	w13, w14
    32c4:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    32c8:	ldrh	w11, [x3, x11, lsl #1]
    32cc:	ldrh	w12, [x3, x12, lsl #1]
    32d0:	cmp	w11, w12
    32d4:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    32d8:	add	w11, w9, #0x3
    32dc:	add	w12, w10, #0x3
    32e0:	ldrb	w13, [x2, x11]
    32e4:	ldrb	w14, [x2, x12]
    32e8:	cmp	w13, w14
    32ec:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    32f0:	ldrh	w11, [x3, x11, lsl #1]
    32f4:	ldrh	w12, [x3, x12, lsl #1]
    32f8:	cmp	w11, w12
    32fc:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    3300:	add	w11, w9, #0x4
    3304:	add	w12, w10, #0x4
    3308:	ldrb	w13, [x2, x11]
    330c:	ldrb	w14, [x2, x12]
    3310:	cmp	w13, w14
    3314:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    3318:	ldrh	w11, [x3, x11, lsl #1]
    331c:	ldrh	w12, [x3, x12, lsl #1]
    3320:	cmp	w11, w12
    3324:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    3328:	add	w11, w9, #0x5
    332c:	add	w12, w10, #0x5
    3330:	ldrb	w13, [x2, x11]
    3334:	ldrb	w14, [x2, x12]
    3338:	cmp	w13, w14
    333c:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    3340:	ldrh	w11, [x3, x11, lsl #1]
    3344:	ldrh	w12, [x3, x12, lsl #1]
    3348:	cmp	w11, w12
    334c:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    3350:	add	w11, w9, #0x6
    3354:	add	w12, w10, #0x6
    3358:	ldrb	w13, [x2, x11]
    335c:	ldrb	w14, [x2, x12]
    3360:	cmp	w13, w14
    3364:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    3368:	ldrh	w11, [x3, x11, lsl #1]
    336c:	ldrh	w12, [x3, x12, lsl #1]
    3370:	cmp	w11, w12
    3374:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    3378:	add	w11, w9, #0x7
    337c:	add	w12, w10, #0x7
    3380:	ldrb	w13, [x2, x11]
    3384:	ldrb	w14, [x2, x12]
    3388:	cmp	w13, w14
    338c:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    3390:	ldrh	w11, [x3, x11, lsl #1]
    3394:	ldrh	w12, [x3, x12, lsl #1]
    3398:	cmp	w11, w12
    339c:	b.ne	33e0 <BZ2_blockSort@@Base+0x1b9c>  // b.any
    33a0:	add	w9, w9, #0x8
    33a4:	ldr	w11, [x5]
    33a8:	add	w10, w10, #0x8
    33ac:	cmp	w9, w4
    33b0:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    33b4:	cmp	w10, w4
    33b8:	sub	w8, w8, #0x8
    33bc:	sub	w9, w9, w12
    33c0:	csel	w12, wzr, w4, cc  // cc = lo, ul, last
    33c4:	mov	w0, wzr
    33c8:	sub	w10, w10, w12
    33cc:	sub	w11, w11, #0x1
    33d0:	cmp	w8, #0x7
    33d4:	str	w11, [x5]
    33d8:	b.gt	3260 <BZ2_blockSort@@Base+0x1a1c>
    33dc:	ret
    33e0:	cset	w0, hi  // hi = pmore
    33e4:	ret

00000000000033e8 <BZ2_hbMakeCodeLengths@@Base>:
    33e8:	stp	x29, x30, [sp, #-96]!
    33ec:	stp	x28, x27, [sp, #16]
    33f0:	stp	x26, x25, [sp, #32]
    33f4:	stp	x24, x23, [sp, #48]
    33f8:	stp	x22, x21, [sp, #64]
    33fc:	stp	x20, x19, [sp, #80]
    3400:	mov	x29, sp
    3404:	sub	sp, sp, #0x1, lsl #12
    3408:	sub	sp, sp, #0x450
    340c:	mov	w19, w3
    3410:	mov	w20, w2
    3414:	cmp	w2, #0x1
    3418:	mov	x21, x0
    341c:	b.lt	344c <BZ2_hbMakeCodeLengths@@Base+0x64>  // b.tstop
    3420:	add	x9, sp, #0x828
    3424:	mov	w8, w20
    3428:	add	x9, x9, #0x4
    342c:	mov	w10, #0x100                 	// #256
    3430:	ldr	w11, [x1], #4
    3434:	lsl	w12, w11, #8
    3438:	cmp	w11, #0x0
    343c:	csel	w11, w10, w12, eq  // eq = none
    3440:	subs	x8, x8, #0x1
    3444:	str	w11, [x9], #4
    3448:	b.ne	3430 <BZ2_hbMakeCodeLengths@@Base+0x48>  // b.any
    344c:	sxtw	x8, w20
    3450:	str	x8, [sp, #16]
    3454:	add	w8, w20, #0x1
    3458:	add	x23, sp, #0x828
    345c:	add	x25, sp, #0x1, lsl #12
    3460:	add	x25, x25, #0x38
    3464:	add	x26, sp, #0x18
    3468:	mov	w27, #0xffffffff            	// #-1
    346c:	add	x9, x23, #0x4
    3470:	sub	x24, x8, #0x1
    3474:	mov	w22, w8
    3478:	str	x9, [sp, #8]
    347c:	cmp	w20, #0x1
    3480:	mov	w8, #0xfffffffe            	// #-2
    3484:	str	wzr, [sp, #4152]
    3488:	str	wzr, [sp, #2088]
    348c:	str	w8, [sp, #24]
    3490:	b.lt	3508 <BZ2_hbMakeCodeLengths@@Base+0x120>  // b.tstop
    3494:	mov	x28, xzr
    3498:	mov	w8, w20
    349c:	mov	w9, #0x1                   	// #1
    34a0:	b	34b4 <BZ2_hbMakeCodeLengths@@Base+0xcc>
    34a4:	str	w9, [x10]
    34a8:	cmp	x28, x8
    34ac:	add	x9, x9, #0x1
    34b0:	b.eq	350c <BZ2_hbMakeCodeLengths@@Base+0x124>  // b.none
    34b4:	add	x28, x28, #0x1
    34b8:	add	x10, x25, x28, lsl #2
    34bc:	str	w9, [x10]
    34c0:	ubfx	x11, x28, #1, #31
    34c4:	ldrsw	x12, [x25, w11, uxtw #2]
    34c8:	lsl	x13, x9, #2
    34cc:	ldr	w14, [x23, x13]
    34d0:	str	w27, [x26, x13]
    34d4:	ldr	w15, [x23, x12, lsl #2]
    34d8:	cmp	w14, w15
    34dc:	b.ge	34a4 <BZ2_hbMakeCodeLengths@@Base+0xbc>  // b.tcont
    34e0:	ldr	w13, [x23, x9, lsl #2]
    34e4:	str	w12, [x10]
    34e8:	asr	w14, w11, #1
    34ec:	ldrsw	x12, [x25, w14, sxtw #2]
    34f0:	ldr	w10, [x23, x12, lsl #2]
    34f4:	cmp	w13, w10
    34f8:	add	x10, x25, w11, sxtw #2
    34fc:	mov	w11, w14
    3500:	b.lt	34e4 <BZ2_hbMakeCodeLengths@@Base+0xfc>  // b.tstop
    3504:	b	34a4 <BZ2_hbMakeCodeLengths@@Base+0xbc>
    3508:	mov	w28, wzr
    350c:	cmp	w28, #0x104
    3510:	b.cc	351c <BZ2_hbMakeCodeLengths@@Base+0x134>  // b.lo, b.ul, b.last
    3514:	mov	w0, #0x7d1                 	// #2001
    3518:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    351c:	cmp	w28, #0x2
    3520:	mov	w8, w20
    3524:	b.lt	36f0 <BZ2_hbMakeCodeLengths@@Base+0x308>  // b.tstop
    3528:	ldr	x8, [sp, #16]
    352c:	mov	w9, w28
    3530:	b	3544 <BZ2_hbMakeCodeLengths@@Base+0x15c>
    3534:	cmp	x9, #0x2
    3538:	mov	x9, x10
    353c:	str	w8, [x11]
    3540:	b.le	36f0 <BZ2_hbMakeCodeLengths@@Base+0x308>
    3544:	ldr	w12, [x25, x9, lsl #2]
    3548:	ldrsw	x11, [sp, #4156]
    354c:	cmp	x9, #0x3
    3550:	sub	x10, x9, #0x1
    3554:	str	w12, [sp, #4156]
    3558:	b.lt	35c4 <BZ2_hbMakeCodeLengths@@Base+0x1dc>  // b.tstop
    355c:	sxtw	x13, w12
    3560:	ldr	w13, [x23, x13, lsl #2]
    3564:	mov	w14, #0x1                   	// #1
    3568:	mov	w16, #0x2                   	// #2
    356c:	cmp	x10, w16, sxtw
    3570:	b.le	3598 <BZ2_hbMakeCodeLengths@@Base+0x1b0>
    3574:	sxtw	x15, w16
    3578:	orr	x15, x15, #0x1
    357c:	ldrsw	x17, [x25, x15, lsl #2]
    3580:	ldrsw	x18, [x25, w16, sxtw #2]
    3584:	ldr	w17, [x23, x17, lsl #2]
    3588:	ldr	w18, [x23, x18, lsl #2]
    358c:	cmp	w17, w18
    3590:	csel	w15, w15, w16, lt  // lt = tstop
    3594:	b	359c <BZ2_hbMakeCodeLengths@@Base+0x1b4>
    3598:	mov	w15, w16
    359c:	ldrsw	x17, [x25, w15, sxtw #2]
    35a0:	ldr	w16, [x23, x17, lsl #2]
    35a4:	cmp	w13, w16
    35a8:	b.lt	35cc <BZ2_hbMakeCodeLengths@@Base+0x1e4>  // b.tstop
    35ac:	lsl	w16, w15, #1
    35b0:	cmp	x9, w16, sxtw
    35b4:	str	w17, [x25, w14, sxtw #2]
    35b8:	mov	w14, w15
    35bc:	b.gt	356c <BZ2_hbMakeCodeLengths@@Base+0x184>
    35c0:	b	35d0 <BZ2_hbMakeCodeLengths@@Base+0x1e8>
    35c4:	mov	w15, #0x1                   	// #1
    35c8:	b	35d0 <BZ2_hbMakeCodeLengths@@Base+0x1e8>
    35cc:	mov	w15, w14
    35d0:	str	w12, [x25, w15, sxtw #2]
    35d4:	ldr	w13, [x25, x10, lsl #2]
    35d8:	ldrsw	x12, [sp, #4156]
    35dc:	cmp	x9, #0x3
    35e0:	str	w13, [sp, #4156]
    35e4:	b.gt	35f0 <BZ2_hbMakeCodeLengths@@Base+0x208>
    35e8:	mov	w17, #0x1                   	// #1
    35ec:	b	3660 <BZ2_hbMakeCodeLengths@@Base+0x278>
    35f0:	sxtw	x14, w13
    35f4:	ldr	w14, [x23, x14, lsl #2]
    35f8:	sub	x15, x9, #0x2
    35fc:	mov	w16, #0x1                   	// #1
    3600:	mov	w18, #0x2                   	// #2
    3604:	cmp	x15, w18, sxtw
    3608:	b.le	3630 <BZ2_hbMakeCodeLengths@@Base+0x248>
    360c:	sxtw	x17, w18
    3610:	orr	x17, x17, #0x1
    3614:	ldrsw	x0, [x25, x17, lsl #2]
    3618:	ldrsw	x1, [x25, w18, sxtw #2]
    361c:	ldr	w0, [x23, x0, lsl #2]
    3620:	ldr	w1, [x23, x1, lsl #2]
    3624:	cmp	w0, w1
    3628:	csel	w17, w17, w18, lt  // lt = tstop
    362c:	b	3634 <BZ2_hbMakeCodeLengths@@Base+0x24c>
    3630:	mov	w17, w18
    3634:	ldrsw	x0, [x25, w17, sxtw #2]
    3638:	ldr	w18, [x23, x0, lsl #2]
    363c:	cmp	w14, w18
    3640:	b.lt	365c <BZ2_hbMakeCodeLengths@@Base+0x274>  // b.tstop
    3644:	lsl	w18, w17, #1
    3648:	cmp	x15, w18, sxtw
    364c:	str	w0, [x25, w16, sxtw #2]
    3650:	mov	w16, w17
    3654:	b.ge	3604 <BZ2_hbMakeCodeLengths@@Base+0x21c>  // b.tcont
    3658:	b	3660 <BZ2_hbMakeCodeLengths@@Base+0x278>
    365c:	mov	w17, w16
    3660:	lsl	x15, x12, #2
    3664:	lsl	x16, x11, #2
    3668:	str	w13, [x25, w17, sxtw #2]
    366c:	ldr	w13, [x23, x16]
    3670:	ldr	w17, [x23, x15]
    3674:	add	x8, x8, #0x1
    3678:	add	x11, x25, x10, lsl #2
    367c:	and	w14, w13, #0xffffff00
    3680:	and	w18, w17, #0xffffff00
    3684:	and	w13, w13, #0xff
    3688:	and	w17, w17, #0xff
    368c:	asr	w12, w10, #1
    3690:	str	w8, [x11]
    3694:	cmp	w13, w17
    3698:	add	w18, w18, w14
    369c:	ldrsw	x14, [x25, w12, sxtw #2]
    36a0:	csel	w13, w13, w17, hi  // hi = pmore
    36a4:	add	w13, w13, #0x1
    36a8:	orr	w13, w13, w18
    36ac:	lsl	x17, x8, #2
    36b0:	str	w13, [x23, x17]
    36b4:	ldr	w18, [x23, x14, lsl #2]
    36b8:	str	w8, [x26, x15]
    36bc:	str	w8, [x26, x16]
    36c0:	str	w27, [x26, x17]
    36c4:	cmp	w13, w18
    36c8:	b.ge	3534 <BZ2_hbMakeCodeLengths@@Base+0x14c>  // b.tcont
    36cc:	str	w14, [x11]
    36d0:	asr	w15, w12, #1
    36d4:	ldrsw	x14, [x25, w15, sxtw #2]
    36d8:	ldr	w11, [x23, x14, lsl #2]
    36dc:	cmp	w13, w11
    36e0:	add	x11, x25, w12, sxtw #2
    36e4:	mov	w12, w15
    36e8:	b.lt	36cc <BZ2_hbMakeCodeLengths@@Base+0x2e4>  // b.tstop
    36ec:	b	3534 <BZ2_hbMakeCodeLengths@@Base+0x14c>
    36f0:	cmp	w8, #0x204
    36f4:	b.lt	3700 <BZ2_hbMakeCodeLengths@@Base+0x318>  // b.tstop
    36f8:	mov	w0, #0x7d2                 	// #2002
    36fc:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    3700:	cmp	w20, #0x1
    3704:	b.lt	374c <BZ2_hbMakeCodeLengths@@Base+0x364>  // b.tstop
    3708:	mov	w8, wzr
    370c:	mov	w9, #0x1                   	// #1
    3710:	mov	w10, #0xffffffff            	// #-1
    3714:	mov	w11, w9
    3718:	ldr	w11, [x26, w11, sxtw #2]
    371c:	add	w10, w10, #0x1
    3720:	tbz	w11, #31, 3718 <BZ2_hbMakeCodeLengths@@Base+0x330>
    3724:	add	x11, x9, x21
    3728:	cmp	w10, w19
    372c:	add	x9, x9, #0x1
    3730:	csinc	w8, w8, wzr, le
    3734:	cmp	x9, x22
    3738:	sturb	w10, [x11, #-1]
    373c:	b.ne	3710 <BZ2_hbMakeCodeLengths@@Base+0x328>  // b.any
    3740:	tst	w8, #0xff
    3744:	b.ne	3758 <BZ2_hbMakeCodeLengths@@Base+0x370>  // b.any
    3748:	b	3794 <BZ2_hbMakeCodeLengths@@Base+0x3ac>
    374c:	mov	w8, wzr
    3750:	tst	w8, #0xff
    3754:	b.eq	3794 <BZ2_hbMakeCodeLengths@@Base+0x3ac>  // b.none
    3758:	cmp	w20, #0x1
    375c:	b.lt	347c <BZ2_hbMakeCodeLengths@@Base+0x94>  // b.tstop
    3760:	ldr	x9, [sp, #8]
    3764:	mov	x8, x24
    3768:	ldr	w10, [x9]
    376c:	asr	w10, w10, #8
    3770:	cmp	w10, #0x0
    3774:	cinc	w10, w10, lt  // lt = tstop
    3778:	lsl	w10, w10, #7
    377c:	and	w10, w10, #0xffffff00
    3780:	add	w10, w10, #0x100
    3784:	subs	x8, x8, #0x1
    3788:	str	w10, [x9], #4
    378c:	b.ne	3768 <BZ2_hbMakeCodeLengths@@Base+0x380>  // b.any
    3790:	b	347c <BZ2_hbMakeCodeLengths@@Base+0x94>
    3794:	add	sp, sp, #0x1, lsl #12
    3798:	add	sp, sp, #0x450
    379c:	ldp	x20, x19, [sp, #80]
    37a0:	ldp	x22, x21, [sp, #64]
    37a4:	ldp	x24, x23, [sp, #48]
    37a8:	ldp	x26, x25, [sp, #32]
    37ac:	ldp	x28, x27, [sp, #16]
    37b0:	ldp	x29, x30, [sp], #96
    37b4:	ret

00000000000037b8 <BZ2_hbAssignCodes@@Base>:
    37b8:	cmp	w2, w3
    37bc:	b.le	37c4 <BZ2_hbAssignCodes@@Base+0xc>
    37c0:	ret
    37c4:	mov	w8, wzr
    37c8:	mov	w9, w4
    37cc:	b	37e0 <BZ2_hbAssignCodes@@Base+0x28>
    37d0:	cmp	w2, w3
    37d4:	add	w2, w2, #0x1
    37d8:	lsl	w8, w8, #1
    37dc:	b.ge	37c0 <BZ2_hbAssignCodes@@Base+0x8>  // b.tcont
    37e0:	cmp	w4, #0x1
    37e4:	b.lt	37d0 <BZ2_hbAssignCodes@@Base+0x18>  // b.tstop
    37e8:	mov	x10, x9
    37ec:	mov	x11, x1
    37f0:	mov	x12, x0
    37f4:	b	3808 <BZ2_hbAssignCodes@@Base+0x50>
    37f8:	add	x12, x12, #0x4
    37fc:	subs	x10, x10, #0x1
    3800:	add	x11, x11, #0x1
    3804:	b.eq	37d0 <BZ2_hbAssignCodes@@Base+0x18>  // b.none
    3808:	ldrb	w13, [x11]
    380c:	cmp	w2, w13
    3810:	b.ne	37f8 <BZ2_hbAssignCodes@@Base+0x40>  // b.any
    3814:	str	w8, [x12]
    3818:	add	w8, w8, #0x1
    381c:	b	37f8 <BZ2_hbAssignCodes@@Base+0x40>

0000000000003820 <BZ2_hbCreateDecodeTables@@Base>:
    3820:	cmp	w4, w5
    3824:	b.le	3920 <BZ2_hbCreateDecodeTables@@Base+0x100>
    3828:	movi	v0.2d, #0x0
    382c:	cmp	w6, #0x0
    3830:	stur	q0, [x1, #76]
    3834:	stp	q0, q0, [x1, #48]
    3838:	stp	q0, q0, [x1, #16]
    383c:	str	q0, [x1]
    3840:	b.le	3864 <BZ2_hbCreateDecodeTables@@Base+0x44>
    3844:	mov	w8, w6
    3848:	ldrb	w9, [x3], #1
    384c:	subs	x8, x8, #0x1
    3850:	add	x9, x1, x9, lsl #2
    3854:	ldr	w10, [x9, #4]
    3858:	add	w10, w10, #0x1
    385c:	str	w10, [x9, #4]
    3860:	b.ne	3848 <BZ2_hbCreateDecodeTables@@Base+0x28>  // b.any
    3864:	ldr	w8, [x1]
    3868:	mov	w9, #0x4                   	// #4
    386c:	ldr	w10, [x1, x9]
    3870:	add	w8, w10, w8
    3874:	str	w8, [x1, x9]
    3878:	add	x9, x9, #0x4
    387c:	cmp	x9, #0x5c
    3880:	b.ne	386c <BZ2_hbCreateDecodeTables@@Base+0x4c>  // b.any
    3884:	movi	v0.2d, #0x0
    3888:	cmp	w4, w5
    388c:	stur	q0, [x0, #76]
    3890:	stp	q0, q0, [x0, #48]
    3894:	stp	q0, q0, [x0, #16]
    3898:	str	q0, [x0]
    389c:	b.gt	38d8 <BZ2_hbCreateDecodeTables@@Base+0xb8>
    38a0:	mov	w8, wzr
    38a4:	sxtw	x9, w4
    38a8:	sxtw	x10, w5
    38ac:	lsl	x11, x9, #2
    38b0:	add	x12, x1, x11
    38b4:	ldp	w12, w13, [x12]
    38b8:	cmp	x9, x10
    38bc:	add	x9, x9, #0x1
    38c0:	sub	w12, w13, w12
    38c4:	add	w8, w12, w8
    38c8:	sub	w12, w8, #0x1
    38cc:	lsl	w8, w8, #1
    38d0:	str	w12, [x0, x11]
    38d4:	b.lt	38ac <BZ2_hbCreateDecodeTables@@Base+0x8c>  // b.tstop
    38d8:	cmp	w4, w5
    38dc:	b.ge	391c <BZ2_hbCreateDecodeTables@@Base+0xfc>  // b.tcont
    38e0:	sxtw	x9, w4
    38e4:	sxtw	x10, w5
    38e8:	sbfiz	x11, x4, #2, #32
    38ec:	sub	x9, x10, x9
    38f0:	add	x10, x11, x1
    38f4:	add	x8, x0, x11
    38f8:	add	x10, x10, #0x4
    38fc:	ldr	w11, [x8], #4
    3900:	ldr	w12, [x10]
    3904:	subs	x9, x9, #0x1
    3908:	lsl	w11, w11, #1
    390c:	sub	w11, w11, w12
    3910:	add	w11, w11, #0x2
    3914:	str	w11, [x10], #4
    3918:	b.ne	38fc <BZ2_hbCreateDecodeTables@@Base+0xdc>  // b.any
    391c:	ret
    3920:	mov	w8, wzr
    3924:	mov	w9, w6
    3928:	mov	w10, w4
    392c:	b	393c <BZ2_hbCreateDecodeTables@@Base+0x11c>
    3930:	cmp	w10, w5
    3934:	add	w10, w10, #0x1
    3938:	b.ge	3828 <BZ2_hbCreateDecodeTables@@Base+0x8>  // b.tcont
    393c:	cmp	w6, #0x1
    3940:	b.lt	3930 <BZ2_hbCreateDecodeTables@@Base+0x110>  // b.tstop
    3944:	mov	x11, xzr
    3948:	b	3958 <BZ2_hbCreateDecodeTables@@Base+0x138>
    394c:	add	x11, x11, #0x1
    3950:	cmp	x9, x11
    3954:	b.eq	3930 <BZ2_hbCreateDecodeTables@@Base+0x110>  // b.none
    3958:	ldrb	w12, [x3, x11]
    395c:	cmp	w10, w12
    3960:	b.ne	394c <BZ2_hbCreateDecodeTables@@Base+0x12c>  // b.any
    3964:	str	w11, [x2, w8, sxtw #2]
    3968:	add	w8, w8, #0x1
    396c:	b	394c <BZ2_hbCreateDecodeTables@@Base+0x12c>

0000000000003970 <BZ2_bsInitWrite@@Base>:
    3970:	str	xzr, [x0, #640]
    3974:	ret

0000000000003978 <BZ2_compressBlock@@Base>:
    3978:	stp	x29, x30, [sp, #-32]!
    397c:	stp	x20, x19, [sp, #16]
    3980:	mov	x29, sp
    3984:	ldr	w5, [x0, #108]
    3988:	mov	x19, x0
    398c:	mov	w20, w1
    3990:	cmp	w5, #0x1
    3994:	b.lt	39d4 <BZ2_compressBlock@@Base+0x5c>  // b.tstop
    3998:	ldr	w8, [x19, #648]
    399c:	ldr	w9, [x19, #652]
    39a0:	ldr	w2, [x19, #660]
    39a4:	mvn	w3, w8
    39a8:	eon	w4, w8, w9, ror #31
    39ac:	cmp	w2, #0x2
    39b0:	str	w3, [x19, #648]
    39b4:	str	w4, [x19, #652]
    39b8:	b.lt	39c0 <BZ2_compressBlock@@Base+0x48>  // b.tstop
    39bc:	str	wzr, [x19, #116]
    39c0:	ldr	w8, [x19, #656]
    39c4:	cmp	w8, #0x2
    39c8:	b.ge	3b38 <BZ2_compressBlock@@Base+0x1c0>  // b.tcont
    39cc:	mov	x0, x19
    39d0:	bl	16b0 <BZ2_blockSort@plt>
    39d4:	ldr	x8, [x19, #32]
    39d8:	ldrsw	x9, [x19, #108]
    39dc:	ldr	w10, [x19, #660]
    39e0:	add	x8, x8, x9
    39e4:	cmp	w10, #0x1
    39e8:	str	x8, [x19, #80]
    39ec:	b.ne	3a2c <BZ2_compressBlock@@Base+0xb4>  // b.any
    39f0:	mov	x0, x19
    39f4:	bl	1670 <BZ2_bsInitWrite@plt>
    39f8:	mov	w1, #0x42                  	// #66
    39fc:	mov	x0, x19
    3a00:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3a04:	mov	w1, #0x5a                  	// #90
    3a08:	mov	x0, x19
    3a0c:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3a10:	mov	w1, #0x68                  	// #104
    3a14:	mov	x0, x19
    3a18:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3a1c:	ldrb	w8, [x19, #664]
    3a20:	mov	x0, x19
    3a24:	add	w1, w8, #0x30
    3a28:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3a2c:	ldr	w8, [x19, #108]
    3a30:	cmp	w8, #0x1
    3a34:	b.lt	3abc <BZ2_compressBlock@@Base+0x144>  // b.tstop
    3a38:	mov	w1, #0x31                  	// #49
    3a3c:	mov	x0, x19
    3a40:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3a44:	mov	w1, #0x41                  	// #65
    3a48:	mov	x0, x19
    3a4c:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3a50:	mov	w1, #0x59                  	// #89
    3a54:	mov	x0, x19
    3a58:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3a5c:	mov	w1, #0x26                  	// #38
    3a60:	mov	x0, x19
    3a64:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3a68:	mov	w1, #0x53                  	// #83
    3a6c:	mov	x0, x19
    3a70:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3a74:	mov	w1, #0x59                  	// #89
    3a78:	mov	x0, x19
    3a7c:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3a80:	ldr	w1, [x19, #648]
    3a84:	mov	x0, x19
    3a88:	bl	3b90 <BZ2_compressBlock@@Base+0x218>
    3a8c:	mov	w1, #0x1                   	// #1
    3a90:	mov	x0, x19
    3a94:	mov	w2, wzr
    3a98:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    3a9c:	ldr	w2, [x19, #48]
    3aa0:	mov	w1, #0x18                  	// #24
    3aa4:	mov	x0, x19
    3aa8:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    3aac:	mov	x0, x19
    3ab0:	bl	3c58 <BZ2_compressBlock@@Base+0x2e0>
    3ab4:	mov	x0, x19
    3ab8:	bl	3ea4 <BZ2_compressBlock@@Base+0x52c>
    3abc:	tst	w20, #0xff
    3ac0:	b.eq	3b2c <BZ2_compressBlock@@Base+0x1b4>  // b.none
    3ac4:	mov	w1, #0x17                  	// #23
    3ac8:	mov	x0, x19
    3acc:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3ad0:	mov	w1, #0x72                  	// #114
    3ad4:	mov	x0, x19
    3ad8:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3adc:	mov	w1, #0x45                  	// #69
    3ae0:	mov	x0, x19
    3ae4:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3ae8:	mov	w1, #0x38                  	// #56
    3aec:	mov	x0, x19
    3af0:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3af4:	mov	w1, #0x50                  	// #80
    3af8:	mov	x0, x19
    3afc:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3b00:	mov	w1, #0x90                  	// #144
    3b04:	mov	x0, x19
    3b08:	bl	3b74 <BZ2_compressBlock@@Base+0x1fc>
    3b0c:	ldr	w1, [x19, #652]
    3b10:	mov	x0, x19
    3b14:	bl	3b90 <BZ2_compressBlock@@Base+0x218>
    3b18:	ldr	w8, [x19, #656]
    3b1c:	cmp	w8, #0x2
    3b20:	b.ge	3b54 <BZ2_compressBlock@@Base+0x1dc>  // b.tcont
    3b24:	mov	x0, x19
    3b28:	bl	5770 <BZ2_compressBlock@@Base+0x1df8>
    3b2c:	ldp	x20, x19, [sp, #16]
    3b30:	ldp	x29, x30, [sp], #32
    3b34:	ret
    3b38:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    3b3c:	ldr	x8, [x8, #4016]
    3b40:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    3b44:	add	x1, x1, #0xdd8
    3b48:	ldr	x0, [x8]
    3b4c:	bl	1750 <fprintf@plt>
    3b50:	b	39cc <BZ2_compressBlock@@Base+0x54>
    3b54:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    3b58:	ldr	x8, [x8, #4016]
    3b5c:	ldr	w2, [x19, #652]
    3b60:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    3b64:	add	x1, x1, #0xe16
    3b68:	ldr	x0, [x8]
    3b6c:	bl	1750 <fprintf@plt>
    3b70:	b	3b24 <BZ2_compressBlock@@Base+0x1ac>
    3b74:	stp	x29, x30, [sp, #-16]!
    3b78:	mov	x29, sp
    3b7c:	and	w2, w1, #0xff
    3b80:	mov	w1, #0x8                   	// #8
    3b84:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    3b88:	ldp	x29, x30, [sp], #16
    3b8c:	ret
    3b90:	stp	x29, x30, [sp, #-32]!
    3b94:	stp	x20, x19, [sp, #16]
    3b98:	mov	x29, sp
    3b9c:	mov	w19, w1
    3ba0:	lsr	w2, w1, #24
    3ba4:	mov	w1, #0x8                   	// #8
    3ba8:	mov	x20, x0
    3bac:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    3bb0:	ubfx	w2, w19, #16, #8
    3bb4:	mov	w1, #0x8                   	// #8
    3bb8:	mov	x0, x20
    3bbc:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    3bc0:	ubfx	w2, w19, #8, #8
    3bc4:	mov	w1, #0x8                   	// #8
    3bc8:	mov	x0, x20
    3bcc:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    3bd0:	and	w2, w19, #0xff
    3bd4:	mov	w1, #0x8                   	// #8
    3bd8:	mov	x0, x20
    3bdc:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    3be0:	ldp	x20, x19, [sp, #16]
    3be4:	ldp	x29, x30, [sp], #32
    3be8:	ret
    3bec:	ldr	w8, [x0, #644]
    3bf0:	cmp	w8, #0x8
    3bf4:	b.lt	3c38 <BZ2_compressBlock@@Base+0x2c0>  // b.tstop
    3bf8:	add	x8, x0, #0x280
    3bfc:	ldr	x9, [x0, #80]
    3c00:	ldrsw	x10, [x0, #116]
    3c04:	ldrb	w8, [x8, #3]
    3c08:	strb	w8, [x9, x10]
    3c0c:	ldr	w8, [x0, #116]
    3c10:	ldr	w9, [x0, #640]
    3c14:	ldr	w10, [x0, #644]
    3c18:	add	w11, w8, #0x1
    3c1c:	lsl	w9, w9, #8
    3c20:	sub	w8, w10, #0x8
    3c24:	cmp	w10, #0xf
    3c28:	str	w11, [x0, #116]
    3c2c:	str	w9, [x0, #640]
    3c30:	str	w8, [x0, #644]
    3c34:	b.gt	3bf8 <BZ2_compressBlock@@Base+0x280>
    3c38:	ldr	w9, [x0, #640]
    3c3c:	add	w8, w8, w1
    3c40:	neg	w10, w8
    3c44:	lsl	w10, w2, w10
    3c48:	orr	w9, w9, w10
    3c4c:	str	w9, [x0, #640]
    3c50:	str	w8, [x0, #644]
    3c54:	ret
    3c58:	sub	sp, sp, #0x140
    3c5c:	stp	x29, x30, [sp, #256]
    3c60:	stp	x28, x23, [sp, #272]
    3c64:	stp	x22, x21, [sp, #288]
    3c68:	stp	x20, x19, [sp, #304]
    3c6c:	add	x29, sp, #0x100
    3c70:	ldp	x21, x22, [x0, #56]
    3c74:	ldr	x20, [x0, #72]
    3c78:	mov	x19, x0
    3c7c:	bl	57bc <BZ2_compressBlock@@Base+0x1e44>
    3c80:	ldr	w23, [x19, #124]
    3c84:	cmn	w23, #0x1
    3c88:	b.lt	3ca4 <BZ2_compressBlock@@Base+0x32c>  // b.tstop
    3c8c:	add	w8, w23, #0x1
    3c90:	lsl	x8, x8, #2
    3c94:	add	x0, x19, #0x2a0
    3c98:	add	x2, x8, #0x4
    3c9c:	mov	w1, wzr
    3ca0:	bl	1590 <memset@plt>
    3ca4:	cmp	w23, #0x1
    3ca8:	b.lt	3cc4 <BZ2_compressBlock@@Base+0x34c>  // b.tstop
    3cac:	mov	x8, xzr
    3cb0:	mov	x9, sp
    3cb4:	strb	w8, [x9, x8]
    3cb8:	add	x8, x8, #0x1
    3cbc:	cmp	x23, x8
    3cc0:	b.ne	3cb4 <BZ2_compressBlock@@Base+0x33c>  // b.any
    3cc4:	ldr	w15, [x19, #108]
    3cc8:	add	w8, w23, #0x1
    3ccc:	cmp	w15, #0x1
    3cd0:	b.lt	3dfc <BZ2_compressBlock@@Base+0x484>  // b.tstop
    3cd4:	mov	x11, sp
    3cd8:	mov	x10, xzr
    3cdc:	mov	w14, wzr
    3ce0:	mov	w9, wzr
    3ce4:	orr	x12, x11, #0x1
    3ce8:	mov	w13, #0x1                   	// #1
    3cec:	b	3d04 <BZ2_compressBlock@@Base+0x38c>
    3cf0:	add	w14, w14, #0x1
    3cf4:	ldrsw	x15, [x19, #108]
    3cf8:	add	x10, x10, #0x1
    3cfc:	cmp	x10, x15
    3d00:	b.ge	3e04 <BZ2_compressBlock@@Base+0x48c>  // b.tcont
    3d04:	ldr	w16, [x21, x10, lsl #2]
    3d08:	sub	w16, w16, #0x1
    3d0c:	and	w15, w15, w16, asr #31
    3d10:	add	w15, w15, w16
    3d14:	ldrb	w15, [x22, w15, sxtw]
    3d18:	ldrb	w16, [sp]
    3d1c:	add	x15, x19, x15
    3d20:	ldrb	w15, [x15, #384]
    3d24:	cmp	w16, w15
    3d28:	b.eq	3cf0 <BZ2_compressBlock@@Base+0x378>  // b.none
    3d2c:	subs	w16, w14, #0x1
    3d30:	b.lt	3d98 <BZ2_compressBlock@@Base+0x420>  // b.tstop
    3d34:	add	x14, x20, w9, sxtw #1
    3d38:	add	w9, w9, #0x1
    3d3c:	tbnz	w16, #0, 3d5c <BZ2_compressBlock@@Base+0x3e4>
    3d40:	strh	wzr, [x14]
    3d44:	ldr	w17, [x19, #672]
    3d48:	add	w17, w17, #0x1
    3d4c:	str	w17, [x19, #672]
    3d50:	subs	w17, w16, #0x2
    3d54:	b.ge	3d74 <BZ2_compressBlock@@Base+0x3fc>  // b.tcont
    3d58:	b	3d94 <BZ2_compressBlock@@Base+0x41c>
    3d5c:	strh	w13, [x14]
    3d60:	ldr	w17, [x19, #676]
    3d64:	add	w17, w17, #0x1
    3d68:	str	w17, [x19, #676]
    3d6c:	subs	w17, w16, #0x2
    3d70:	b.lt	3d94 <BZ2_compressBlock@@Base+0x41c>  // b.tstop
    3d74:	sub	w16, w16, #0x1
    3d78:	cmp	w17, #0x0
    3d7c:	csel	w16, w16, w17, lt  // lt = tstop
    3d80:	add	x14, x14, #0x2
    3d84:	asr	w16, w16, #1
    3d88:	add	w9, w9, #0x1
    3d8c:	tbnz	w16, #0, 3d5c <BZ2_compressBlock@@Base+0x3e4>
    3d90:	b	3d40 <BZ2_compressBlock@@Base+0x3c8>
    3d94:	mov	w14, wzr
    3d98:	ldrb	w17, [sp, #1]
    3d9c:	ldrb	w16, [sp]
    3da0:	cmp	w15, w17
    3da4:	strb	w16, [sp, #1]
    3da8:	b.ne	3db8 <BZ2_compressBlock@@Base+0x440>  // b.any
    3dac:	mov	w18, w17
    3db0:	mov	x16, x12
    3db4:	b	3dd0 <BZ2_compressBlock@@Base+0x458>
    3db8:	mov	x16, x12
    3dbc:	ldrb	w18, [x16, #1]!
    3dc0:	cmp	w15, w18
    3dc4:	strb	w17, [x16]
    3dc8:	mov	w17, w18
    3dcc:	b.ne	3dbc <BZ2_compressBlock@@Base+0x444>  // b.any
    3dd0:	sub	w15, w16, w11
    3dd4:	sxtw	x15, w15
    3dd8:	add	x15, x15, #0x1
    3ddc:	strb	w18, [sp]
    3de0:	strh	w15, [x20, w9, sxtw #1]
    3de4:	add	x15, x19, x15, lsl #2
    3de8:	ldr	w16, [x15, #672]
    3dec:	add	w9, w9, #0x1
    3df0:	add	w16, w16, #0x1
    3df4:	str	w16, [x15, #672]
    3df8:	b	3cf4 <BZ2_compressBlock@@Base+0x37c>
    3dfc:	mov	w9, wzr
    3e00:	mov	w14, wzr
    3e04:	subs	w11, w14, #0x1
    3e08:	b.lt	3e70 <BZ2_compressBlock@@Base+0x4f8>  // b.tstop
    3e0c:	add	x10, x20, w9, sxtw #1
    3e10:	add	w9, w9, #0x1
    3e14:	mov	w12, #0x1                   	// #1
    3e18:	tbnz	w11, #0, 3e38 <BZ2_compressBlock@@Base+0x4c0>
    3e1c:	strh	wzr, [x10]
    3e20:	ldr	w13, [x19, #672]
    3e24:	add	w13, w13, #0x1
    3e28:	str	w13, [x19, #672]
    3e2c:	subs	w13, w11, #0x2
    3e30:	b.ge	3e50 <BZ2_compressBlock@@Base+0x4d8>  // b.tcont
    3e34:	b	3e70 <BZ2_compressBlock@@Base+0x4f8>
    3e38:	strh	w12, [x10]
    3e3c:	ldr	w13, [x19, #676]
    3e40:	add	w13, w13, #0x1
    3e44:	str	w13, [x19, #676]
    3e48:	subs	w13, w11, #0x2
    3e4c:	b.lt	3e70 <BZ2_compressBlock@@Base+0x4f8>  // b.tstop
    3e50:	sub	w11, w11, #0x1
    3e54:	cmp	w13, #0x0
    3e58:	csel	w11, w11, w13, lt  // lt = tstop
    3e5c:	add	x10, x10, #0x2
    3e60:	asr	w11, w11, #1
    3e64:	add	w9, w9, #0x1
    3e68:	tbnz	w11, #0, 3e38 <BZ2_compressBlock@@Base+0x4c0>
    3e6c:	b	3e1c <BZ2_compressBlock@@Base+0x4a4>
    3e70:	strh	w8, [x20, w9, sxtw #1]
    3e74:	add	x8, x19, w8, sxtw #2
    3e78:	ldr	w10, [x8, #672]
    3e7c:	add	w9, w9, #0x1
    3e80:	add	w10, w10, #0x1
    3e84:	str	w10, [x8, #672]
    3e88:	str	w9, [x19, #668]
    3e8c:	ldp	x20, x19, [sp, #304]
    3e90:	ldp	x22, x21, [sp, #288]
    3e94:	ldp	x28, x23, [sp, #272]
    3e98:	ldp	x29, x30, [sp, #256]
    3e9c:	add	sp, sp, #0x140
    3ea0:	ret
    3ea4:	sub	sp, sp, #0xf0
    3ea8:	stp	x29, x30, [sp, #144]
    3eac:	stp	x28, x27, [sp, #160]
    3eb0:	stp	x26, x25, [sp, #176]
    3eb4:	stp	x24, x23, [sp, #192]
    3eb8:	stp	x22, x21, [sp, #208]
    3ebc:	stp	x20, x19, [sp, #224]
    3ec0:	add	x29, sp, #0x90
    3ec4:	ldr	w8, [x0, #656]
    3ec8:	ldr	x27, [x0, #72]
    3ecc:	mov	x19, x0
    3ed0:	cmp	w8, #0x3
    3ed4:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    3ed8:	ldr	x8, [x8, #4016]
    3edc:	b.ge	56c0 <BZ2_compressBlock@@Base+0x1d48>  // b.tcont
    3ee0:	ldrsw	x12, [x19, #124]
    3ee4:	mov	w8, #0x934c                	// #37708
    3ee8:	mov	x21, xzr
    3eec:	add	x22, x19, x8
    3ef0:	add	w9, w12, #0x2
    3ef4:	cmp	w9, #0x1
    3ef8:	csinc	w20, w9, wzr, gt
    3efc:	str	x12, [sp, #48]
    3f00:	b	3f10 <BZ2_compressBlock@@Base+0x598>
    3f04:	add	x21, x21, #0x102
    3f08:	cmp	x21, #0x60c
    3f0c:	b.eq	3f30 <BZ2_compressBlock@@Base+0x5b8>  // b.none
    3f10:	cmn	w12, #0x1
    3f14:	b.lt	3f04 <BZ2_compressBlock@@Base+0x58c>  // b.tstop
    3f18:	add	x0, x22, x21
    3f1c:	mov	w1, #0xf                   	// #15
    3f20:	mov	x2, x20
    3f24:	bl	1590 <memset@plt>
    3f28:	ldr	x12, [sp, #48]
    3f2c:	b	3f04 <BZ2_compressBlock@@Base+0x58c>
    3f30:	ldr	w8, [x19, #668]
    3f34:	cmp	w8, #0x0
    3f38:	b.gt	3f48 <BZ2_compressBlock@@Base+0x5d0>
    3f3c:	mov	w0, #0xbb9                 	// #3001
    3f40:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    3f44:	ldr	x12, [sp, #48]
    3f48:	ldr	w14, [x19, #668]
    3f4c:	add	x13, x12, #0x2
    3f50:	cmp	w14, #0xc8
    3f54:	b.ge	3f60 <BZ2_compressBlock@@Base+0x5e8>  // b.tcont
    3f58:	mov	w8, #0x2                   	// #2
    3f5c:	b	3f8c <BZ2_compressBlock@@Base+0x614>
    3f60:	cmp	w14, #0x258
    3f64:	b.ge	3f70 <BZ2_compressBlock@@Base+0x5f8>  // b.tcont
    3f68:	mov	w8, #0x3                   	// #3
    3f6c:	b	3f8c <BZ2_compressBlock@@Base+0x614>
    3f70:	cmp	w14, #0x4b0
    3f74:	b.ge	3f80 <BZ2_compressBlock@@Base+0x608>  // b.tcont
    3f78:	mov	w8, #0x4                   	// #4
    3f7c:	b	3f8c <BZ2_compressBlock@@Base+0x614>
    3f80:	cmp	w14, #0x960
    3f84:	mov	w8, #0x5                   	// #5
    3f88:	cinc	w8, w8, ge  // ge = tcont
    3f8c:	mov	w9, #0x102                 	// #258
    3f90:	mov	w20, w8
    3f94:	mov	w10, #0x924a                	// #37450
    3f98:	umaddl	x8, w8, w9, x19
    3f9c:	mov	w24, wzr
    3fa0:	add	x28, x19, #0x2a4
    3fa4:	add	x21, x8, x10
    3fa8:	mov	w22, #0xf                   	// #15
    3fac:	mov	x23, x20
    3fb0:	str	x13, [sp, #32]
    3fb4:	b	3fcc <BZ2_compressBlock@@Base+0x654>
    3fb8:	sub	w14, w14, w25
    3fbc:	sub	x21, x21, #0x102
    3fc0:	subs	x23, x23, #0x1
    3fc4:	add	w24, w26, #0x1
    3fc8:	b.le	40e8 <BZ2_compressBlock@@Base+0x770>
    3fcc:	sdiv	w8, w14, w23
    3fd0:	mov	w25, wzr
    3fd4:	cmp	w8, #0x1
    3fd8:	sub	w26, w24, #0x1
    3fdc:	b.lt	4010 <BZ2_compressBlock@@Base+0x698>  // b.tstop
    3fe0:	cmp	w26, w12
    3fe4:	b.gt	4010 <BZ2_compressBlock@@Base+0x698>
    3fe8:	mov	w25, wzr
    3fec:	sxtw	x9, w26
    3ff0:	ldr	w10, [x28, x9, lsl #2]
    3ff4:	add	x26, x9, #0x1
    3ff8:	add	w25, w10, w25
    3ffc:	cmp	w25, w8
    4000:	b.ge	4010 <BZ2_compressBlock@@Base+0x698>  // b.tcont
    4004:	cmp	x9, x12
    4008:	mov	x9, x26
    400c:	b.lt	3ff0 <BZ2_compressBlock@@Base+0x678>  // b.tstop
    4010:	cmp	w26, w24
    4014:	b.le	4040 <BZ2_compressBlock@@Base+0x6c8>
    4018:	cmp	x23, x20
    401c:	b.eq	4040 <BZ2_compressBlock@@Base+0x6c8>  // b.none
    4020:	cmp	x23, #0x1
    4024:	b.eq	4040 <BZ2_compressBlock@@Base+0x6c8>  // b.none
    4028:	sub	w8, w20, w23
    402c:	tbz	w8, #0, 4040 <BZ2_compressBlock@@Base+0x6c8>
    4030:	add	x8, x19, w26, sxtw #2
    4034:	ldr	w8, [x8, #672]
    4038:	sub	w26, w26, #0x1
    403c:	sub	w25, w25, w8
    4040:	ldr	w8, [x19, #656]
    4044:	cmp	w8, #0x3
    4048:	b.ge	4080 <BZ2_compressBlock@@Base+0x708>  // b.tcont
    404c:	cmn	w12, #0x1
    4050:	b.lt	3fb8 <BZ2_compressBlock@@Base+0x640>  // b.tstop
    4054:	mov	x8, xzr
    4058:	sxtw	x9, w26
    405c:	sxtw	x10, w24
    4060:	cmp	x8, x9
    4064:	ccmp	x8, x10, #0x8, le
    4068:	csel	w11, w22, wzr, lt  // lt = tstop
    406c:	strb	w11, [x21, x8]
    4070:	add	x8, x8, #0x1
    4074:	cmp	x8, x13
    4078:	b.lt	4060 <BZ2_compressBlock@@Base+0x6e8>  // b.tstop
    407c:	b	3fb8 <BZ2_compressBlock@@Base+0x640>
    4080:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    4084:	ldr	x8, [x8, #4016]
    4088:	ldr	s0, [x19, #668]
    408c:	scvtf	s1, w25
    4090:	fcvt	d1, s1
    4094:	ldr	x0, [x8]
    4098:	mov	x8, #0x4059000000000000    	// #4636737291354636288
    409c:	fmov	d2, x8
    40a0:	scvtf	s0, s0
    40a4:	fmul	d1, d1, d2
    40a8:	fcvt	d0, s0
    40ac:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    40b0:	fdiv	d0, d1, d0
    40b4:	add	x1, x1, #0xe7a
    40b8:	mov	w2, w23
    40bc:	mov	w3, w24
    40c0:	mov	w4, w26
    40c4:	mov	w5, w25
    40c8:	stur	w14, [x29, #-64]
    40cc:	bl	1750 <fprintf@plt>
    40d0:	ldur	w14, [x29, #-64]
    40d4:	ldr	x13, [sp, #32]
    40d8:	ldr	x12, [sp, #48]
    40dc:	cmn	w12, #0x1
    40e0:	b.lt	3fb8 <BZ2_compressBlock@@Base+0x640>  // b.tstop
    40e4:	b	4054 <BZ2_compressBlock@@Base+0x6dc>
    40e8:	lsl	w8, w20, #2
    40ec:	str	x8, [sp, #16]
    40f0:	add	w8, w12, #0x2
    40f4:	lsl	w9, w20, #1
    40f8:	cmp	w8, #0x1
    40fc:	stp	x9, x27, [sp, #64]
    4100:	mov	w9, #0x934c                	// #37708
    4104:	mov	w11, #0xb188                	// #45448
    4108:	mov	w10, #0xc9b8                	// #51640
    410c:	csinc	w8, w8, wzr, gt
    4110:	sxtw	x28, w13
    4114:	sub	x24, x29, #0xc
    4118:	add	x22, x19, x9
    411c:	add	x9, x19, x11
    4120:	add	x21, x19, x10
    4124:	lsl	x8, x8, #2
    4128:	str	wzr, [sp, #28]
    412c:	stp	x9, x28, [sp]
    4130:	str	x8, [sp, #40]
    4134:	str	x22, [sp, #56]
    4138:	ldr	x2, [sp, #16]
    413c:	sub	x0, x29, #0x24
    4140:	mov	w1, wzr
    4144:	bl	1590 <memset@plt>
    4148:	ldr	x8, [sp, #48]
    414c:	mov	x25, x20
    4150:	mov	w26, #0xb188                	// #45448
    4154:	b	4164 <BZ2_compressBlock@@Base+0x7ec>
    4158:	subs	x25, x25, #0x1
    415c:	add	x26, x26, #0x408
    4160:	b.eq	4184 <BZ2_compressBlock@@Base+0x80c>  // b.none
    4164:	cmn	w8, #0x1
    4168:	b.lt	4158 <BZ2_compressBlock@@Base+0x7e0>  // b.tstop
    416c:	ldr	x2, [sp, #40]
    4170:	add	x0, x19, x26
    4174:	mov	w1, wzr
    4178:	bl	1590 <memset@plt>
    417c:	ldr	x8, [sp, #48]
    4180:	b	4158 <BZ2_compressBlock@@Base+0x7e0>
    4184:	cmn	w8, #0x1
    4188:	b.lt	41e4 <BZ2_compressBlock@@Base+0x86c>  // b.tstop
    418c:	cmp	w20, #0x6
    4190:	b.ne	41e4 <BZ2_compressBlock@@Base+0x86c>  // b.any
    4194:	mov	x8, xzr
    4198:	mov	x9, xzr
    419c:	add	x10, x22, x9
    41a0:	ldrb	w11, [x10, #258]
    41a4:	ldrb	w12, [x10]
    41a8:	add	x13, x22, x8
    41ac:	add	x9, x9, #0x1
    41b0:	cmp	x9, x28
    41b4:	bfi	w12, w11, #16, #8
    41b8:	str	w12, [x13, #13932]
    41bc:	ldrb	w11, [x10, #774]
    41c0:	ldrb	w12, [x10, #516]
    41c4:	add	x8, x8, #0x10
    41c8:	bfi	w12, w11, #16, #8
    41cc:	str	w12, [x13, #13936]
    41d0:	ldrb	w11, [x10, #1290]
    41d4:	ldrb	w10, [x10, #1032]
    41d8:	bfi	w10, w11, #16, #8
    41dc:	str	w10, [x13, #13940]
    41e0:	b.lt	419c <BZ2_compressBlock@@Base+0x824>  // b.tstop
    41e4:	ldr	w26, [x19, #668]
    41e8:	cmp	w26, #0x1
    41ec:	b.lt	4cdc <BZ2_compressBlock@@Base+0x1364>  // b.tstop
    41f0:	mov	w28, wzr
    41f4:	mov	w23, wzr
    41f8:	stur	xzr, [x29, #-64]
    41fc:	b	460c <BZ2_compressBlock@@Base+0xc94>
    4200:	add	x10, x27, x25, lsl #1
    4204:	ldrh	w12, [x10]
    4208:	mov	w9, #0x408                 	// #1032
    420c:	madd	x9, x11, x9, x19
    4210:	mov	w11, #0xb188                	// #45448
    4214:	add	x9, x9, x11
    4218:	lsl	x11, x12, #2
    421c:	ldr	w12, [x9, x11]
    4220:	add	w12, w12, #0x1
    4224:	str	w12, [x9, x11]
    4228:	ldrh	w11, [x10, #2]
    422c:	lsl	x11, x11, #2
    4230:	ldr	w12, [x9, x11]
    4234:	add	w12, w12, #0x1
    4238:	str	w12, [x9, x11]
    423c:	ldrh	w11, [x10, #4]
    4240:	lsl	x11, x11, #2
    4244:	ldr	w12, [x9, x11]
    4248:	add	w12, w12, #0x1
    424c:	str	w12, [x9, x11]
    4250:	ldrh	w11, [x10, #6]
    4254:	lsl	x11, x11, #2
    4258:	ldr	w12, [x9, x11]
    425c:	add	w12, w12, #0x1
    4260:	str	w12, [x9, x11]
    4264:	ldrh	w11, [x10, #8]
    4268:	lsl	x11, x11, #2
    426c:	ldr	w12, [x9, x11]
    4270:	add	w12, w12, #0x1
    4274:	str	w12, [x9, x11]
    4278:	ldrh	w11, [x10, #10]
    427c:	lsl	x11, x11, #2
    4280:	ldr	w12, [x9, x11]
    4284:	add	w12, w12, #0x1
    4288:	str	w12, [x9, x11]
    428c:	ldrh	w11, [x10, #12]
    4290:	lsl	x11, x11, #2
    4294:	ldr	w12, [x9, x11]
    4298:	add	w12, w12, #0x1
    429c:	str	w12, [x9, x11]
    42a0:	ldrh	w11, [x10, #14]
    42a4:	lsl	x11, x11, #2
    42a8:	ldr	w12, [x9, x11]
    42ac:	add	w12, w12, #0x1
    42b0:	str	w12, [x9, x11]
    42b4:	ldrh	w11, [x10, #16]
    42b8:	lsl	x11, x11, #2
    42bc:	ldr	w12, [x9, x11]
    42c0:	add	w12, w12, #0x1
    42c4:	str	w12, [x9, x11]
    42c8:	ldrh	w11, [x10, #18]
    42cc:	lsl	x11, x11, #2
    42d0:	ldr	w12, [x9, x11]
    42d4:	add	w12, w12, #0x1
    42d8:	str	w12, [x9, x11]
    42dc:	ldrh	w11, [x10, #20]
    42e0:	lsl	x11, x11, #2
    42e4:	ldr	w12, [x9, x11]
    42e8:	add	w12, w12, #0x1
    42ec:	str	w12, [x9, x11]
    42f0:	ldrh	w11, [x10, #22]
    42f4:	lsl	x11, x11, #2
    42f8:	ldr	w12, [x9, x11]
    42fc:	add	w12, w12, #0x1
    4300:	str	w12, [x9, x11]
    4304:	ldrh	w11, [x10, #24]
    4308:	lsl	x11, x11, #2
    430c:	ldr	w12, [x9, x11]
    4310:	add	w12, w12, #0x1
    4314:	str	w12, [x9, x11]
    4318:	ldrh	w11, [x10, #26]
    431c:	lsl	x11, x11, #2
    4320:	ldr	w12, [x9, x11]
    4324:	add	w12, w12, #0x1
    4328:	str	w12, [x9, x11]
    432c:	ldrh	w11, [x10, #28]
    4330:	lsl	x11, x11, #2
    4334:	ldr	w12, [x9, x11]
    4338:	add	w12, w12, #0x1
    433c:	str	w12, [x9, x11]
    4340:	ldrh	w11, [x10, #30]
    4344:	lsl	x11, x11, #2
    4348:	ldr	w12, [x9, x11]
    434c:	add	w12, w12, #0x1
    4350:	str	w12, [x9, x11]
    4354:	ldrh	w11, [x10, #32]
    4358:	lsl	x11, x11, #2
    435c:	ldr	w12, [x9, x11]
    4360:	add	w12, w12, #0x1
    4364:	str	w12, [x9, x11]
    4368:	ldrh	w11, [x10, #34]
    436c:	lsl	x11, x11, #2
    4370:	ldr	w12, [x9, x11]
    4374:	add	w12, w12, #0x1
    4378:	str	w12, [x9, x11]
    437c:	ldrh	w11, [x10, #36]
    4380:	lsl	x11, x11, #2
    4384:	ldr	w12, [x9, x11]
    4388:	add	w12, w12, #0x1
    438c:	str	w12, [x9, x11]
    4390:	ldrh	w11, [x10, #38]
    4394:	lsl	x11, x11, #2
    4398:	ldr	w12, [x9, x11]
    439c:	add	w12, w12, #0x1
    43a0:	str	w12, [x9, x11]
    43a4:	ldrh	w11, [x10, #40]
    43a8:	lsl	x11, x11, #2
    43ac:	ldr	w12, [x9, x11]
    43b0:	add	w12, w12, #0x1
    43b4:	str	w12, [x9, x11]
    43b8:	ldrh	w11, [x10, #42]
    43bc:	lsl	x11, x11, #2
    43c0:	ldr	w12, [x9, x11]
    43c4:	add	w12, w12, #0x1
    43c8:	str	w12, [x9, x11]
    43cc:	ldrh	w11, [x10, #44]
    43d0:	lsl	x11, x11, #2
    43d4:	ldr	w12, [x9, x11]
    43d8:	add	w12, w12, #0x1
    43dc:	str	w12, [x9, x11]
    43e0:	ldrh	w11, [x10, #46]
    43e4:	lsl	x11, x11, #2
    43e8:	ldr	w12, [x9, x11]
    43ec:	add	w12, w12, #0x1
    43f0:	str	w12, [x9, x11]
    43f4:	ldrh	w11, [x10, #48]
    43f8:	lsl	x11, x11, #2
    43fc:	ldr	w12, [x9, x11]
    4400:	add	w12, w12, #0x1
    4404:	str	w12, [x9, x11]
    4408:	ldrh	w11, [x10, #50]
    440c:	lsl	x11, x11, #2
    4410:	ldr	w12, [x9, x11]
    4414:	add	w12, w12, #0x1
    4418:	str	w12, [x9, x11]
    441c:	ldrh	w11, [x10, #52]
    4420:	lsl	x11, x11, #2
    4424:	ldr	w12, [x9, x11]
    4428:	add	w12, w12, #0x1
    442c:	str	w12, [x9, x11]
    4430:	ldrh	w11, [x10, #54]
    4434:	lsl	x11, x11, #2
    4438:	ldr	w12, [x9, x11]
    443c:	add	w12, w12, #0x1
    4440:	str	w12, [x9, x11]
    4444:	ldrh	w11, [x10, #56]
    4448:	lsl	x11, x11, #2
    444c:	ldr	w12, [x9, x11]
    4450:	add	w12, w12, #0x1
    4454:	str	w12, [x9, x11]
    4458:	ldrh	w11, [x10, #58]
    445c:	lsl	x11, x11, #2
    4460:	ldr	w12, [x9, x11]
    4464:	add	w12, w12, #0x1
    4468:	str	w12, [x9, x11]
    446c:	ldrh	w11, [x10, #60]
    4470:	lsl	x11, x11, #2
    4474:	ldr	w12, [x9, x11]
    4478:	add	w12, w12, #0x1
    447c:	str	w12, [x9, x11]
    4480:	ldrh	w11, [x10, #62]
    4484:	lsl	x11, x11, #2
    4488:	ldr	w12, [x9, x11]
    448c:	add	w12, w12, #0x1
    4490:	str	w12, [x9, x11]
    4494:	ldrh	w11, [x10, #64]
    4498:	lsl	x11, x11, #2
    449c:	ldr	w12, [x9, x11]
    44a0:	add	w12, w12, #0x1
    44a4:	str	w12, [x9, x11]
    44a8:	ldrh	w11, [x10, #66]
    44ac:	lsl	x11, x11, #2
    44b0:	ldr	w12, [x9, x11]
    44b4:	add	w12, w12, #0x1
    44b8:	str	w12, [x9, x11]
    44bc:	ldrh	w11, [x10, #68]
    44c0:	lsl	x11, x11, #2
    44c4:	ldr	w12, [x9, x11]
    44c8:	add	w12, w12, #0x1
    44cc:	str	w12, [x9, x11]
    44d0:	ldrh	w11, [x10, #70]
    44d4:	lsl	x11, x11, #2
    44d8:	ldr	w12, [x9, x11]
    44dc:	add	w12, w12, #0x1
    44e0:	str	w12, [x9, x11]
    44e4:	ldrh	w11, [x10, #72]
    44e8:	lsl	x11, x11, #2
    44ec:	ldr	w12, [x9, x11]
    44f0:	add	w12, w12, #0x1
    44f4:	str	w12, [x9, x11]
    44f8:	ldrh	w11, [x10, #74]
    44fc:	lsl	x11, x11, #2
    4500:	ldr	w12, [x9, x11]
    4504:	add	w12, w12, #0x1
    4508:	str	w12, [x9, x11]
    450c:	ldrh	w11, [x10, #76]
    4510:	lsl	x11, x11, #2
    4514:	ldr	w12, [x9, x11]
    4518:	add	w12, w12, #0x1
    451c:	str	w12, [x9, x11]
    4520:	ldrh	w11, [x10, #78]
    4524:	lsl	x11, x11, #2
    4528:	ldr	w12, [x9, x11]
    452c:	add	w12, w12, #0x1
    4530:	str	w12, [x9, x11]
    4534:	ldrh	w11, [x10, #80]
    4538:	lsl	x11, x11, #2
    453c:	ldr	w12, [x9, x11]
    4540:	add	w12, w12, #0x1
    4544:	str	w12, [x9, x11]
    4548:	ldrh	w11, [x10, #82]
    454c:	lsl	x11, x11, #2
    4550:	ldr	w12, [x9, x11]
    4554:	add	w12, w12, #0x1
    4558:	str	w12, [x9, x11]
    455c:	ldrh	w11, [x10, #84]
    4560:	lsl	x11, x11, #2
    4564:	ldr	w12, [x9, x11]
    4568:	add	w12, w12, #0x1
    456c:	str	w12, [x9, x11]
    4570:	ldrh	w11, [x10, #86]
    4574:	lsl	x11, x11, #2
    4578:	ldr	w12, [x9, x11]
    457c:	add	w12, w12, #0x1
    4580:	str	w12, [x9, x11]
    4584:	ldrh	w11, [x10, #88]
    4588:	lsl	x11, x11, #2
    458c:	ldr	w12, [x9, x11]
    4590:	add	w12, w12, #0x1
    4594:	str	w12, [x9, x11]
    4598:	ldrh	w11, [x10, #90]
    459c:	lsl	x11, x11, #2
    45a0:	ldr	w12, [x9, x11]
    45a4:	add	w12, w12, #0x1
    45a8:	str	w12, [x9, x11]
    45ac:	ldrh	w11, [x10, #92]
    45b0:	lsl	x11, x11, #2
    45b4:	ldr	w12, [x9, x11]
    45b8:	add	w12, w12, #0x1
    45bc:	str	w12, [x9, x11]
    45c0:	ldrh	w11, [x10, #94]
    45c4:	lsl	x11, x11, #2
    45c8:	ldr	w12, [x9, x11]
    45cc:	add	w12, w12, #0x1
    45d0:	str	w12, [x9, x11]
    45d4:	ldrh	w10, [x10, #96]
    45d8:	lsl	x10, x10, #2
    45dc:	ldr	w11, [x9, x10]
    45e0:	add	w11, w11, #0x1
    45e4:	str	w11, [x9, x10]
    45e8:	ldrh	w10, [x27, w18, sxtw #1]
    45ec:	lsl	x10, x10, #2
    45f0:	ldr	w11, [x9, x10]
    45f4:	add	w11, w11, #0x1
    45f8:	str	w11, [x9, x10]
    45fc:	ldr	w26, [x19, #668]
    4600:	add	w28, w8, #0x1
    4604:	cmp	w28, w26
    4608:	b.ge	4ce4 <BZ2_compressBlock@@Base+0x136c>  // b.tcont
    460c:	ldr	x2, [sp, #64]
    4610:	cmp	w20, #0x6
    4614:	sxtw	x25, w28
    4618:	sub	x0, x29, #0xc
    461c:	mov	w1, wzr
    4620:	cset	w27, eq  // eq = none
    4624:	add	x22, x25, #0x31
    4628:	bl	1590 <memset@plt>
    462c:	mov	x18, x22
    4630:	sub	w8, w26, #0x1
    4634:	cmp	w18, w26
    4638:	csel	w8, w18, w8, lt  // lt = tstop
    463c:	sub	w9, w8, w28
    4640:	cmp	w9, #0x31
    4644:	cset	w9, eq  // eq = none
    4648:	and	w9, w27, w9
    464c:	tbz	w9, #0, 4bf0 <BZ2_compressBlock@@Base+0x1278>
    4650:	ldr	x27, [sp, #72]
    4654:	ldr	x22, [sp, #56]
    4658:	add	x10, x27, x25, lsl #1
    465c:	ldrh	w11, [x10]
    4660:	ldrh	w12, [x10, #2]
    4664:	ldrh	w15, [x10, #4]
    4668:	add	x11, x21, x11, lsl #4
    466c:	add	x12, x21, x12, lsl #4
    4670:	ldp	w13, w17, [x12]
    4674:	ldp	w14, w16, [x11]
    4678:	ldr	w11, [x11, #8]
    467c:	ldr	w12, [x12, #8]
    4680:	add	x15, x21, x15, lsl #4
    4684:	add	w13, w13, w14
    4688:	ldrh	w14, [x10, #6]
    468c:	add	w16, w17, w16
    4690:	add	w11, w12, w11
    4694:	ldp	w17, w12, [x15]
    4698:	ldr	w15, [x15, #8]
    469c:	add	x14, x21, x14, lsl #4
    46a0:	add	w13, w13, w17
    46a4:	ldrh	w17, [x10, #8]
    46a8:	add	w12, w16, w12
    46ac:	add	w11, w11, w15
    46b0:	ldp	w15, w16, [x14]
    46b4:	ldr	w14, [x14, #8]
    46b8:	add	x17, x21, x17, lsl #4
    46bc:	add	w13, w13, w15
    46c0:	add	w12, w12, w16
    46c4:	ldrh	w16, [x10, #10]
    46c8:	add	w11, w11, w14
    46cc:	ldp	w15, w14, [x17]
    46d0:	ldr	w17, [x17, #8]
    46d4:	add	x16, x21, x16, lsl #4
    46d8:	add	w13, w13, w15
    46dc:	ldrh	w15, [x10, #12]
    46e0:	add	w12, w12, w14
    46e4:	add	w11, w11, w17
    46e8:	ldp	w14, w17, [x16]
    46ec:	ldr	w16, [x16, #8]
    46f0:	add	x15, x21, x15, lsl #4
    46f4:	add	w13, w13, w14
    46f8:	ldrh	w14, [x10, #14]
    46fc:	add	w12, w12, w17
    4700:	add	w11, w11, w16
    4704:	ldp	w16, w17, [x15]
    4708:	ldr	w15, [x15, #8]
    470c:	add	x14, x21, x14, lsl #4
    4710:	add	w12, w12, w17
    4714:	ldrh	w17, [x10, #16]
    4718:	add	w13, w13, w16
    471c:	add	w11, w11, w15
    4720:	ldp	w16, w15, [x14]
    4724:	ldr	w14, [x14, #8]
    4728:	add	x17, x21, x17, lsl #4
    472c:	add	w13, w13, w16
    4730:	ldrh	w16, [x10, #18]
    4734:	add	w12, w12, w15
    4738:	add	w11, w11, w14
    473c:	ldp	w15, w14, [x17]
    4740:	ldr	w17, [x17, #8]
    4744:	add	x16, x21, x16, lsl #4
    4748:	add	w13, w13, w15
    474c:	ldrh	w15, [x10, #20]
    4750:	add	w12, w12, w14
    4754:	add	w11, w11, w17
    4758:	ldp	w14, w17, [x16]
    475c:	ldr	w16, [x16, #8]
    4760:	add	x15, x21, x15, lsl #4
    4764:	add	w13, w13, w14
    4768:	add	w12, w12, w17
    476c:	ldrh	w17, [x10, #22]
    4770:	add	w11, w11, w16
    4774:	ldp	w14, w16, [x15]
    4778:	ldr	w15, [x15, #8]
    477c:	add	x17, x21, x17, lsl #4
    4780:	add	w13, w13, w14
    4784:	ldrh	w14, [x10, #24]
    4788:	add	w12, w12, w16
    478c:	add	w11, w11, w15
    4790:	ldp	w16, w15, [x17]
    4794:	ldr	w17, [x17, #8]
    4798:	add	x14, x21, x14, lsl #4
    479c:	add	w13, w13, w16
    47a0:	ldrh	w16, [x10, #26]
    47a4:	add	w12, w12, w15
    47a8:	add	w11, w11, w17
    47ac:	ldp	w15, w17, [x14]
    47b0:	ldr	w14, [x14, #8]
    47b4:	add	x16, x21, x16, lsl #4
    47b8:	add	w12, w12, w17
    47bc:	ldrh	w17, [x10, #28]
    47c0:	add	w13, w13, w15
    47c4:	add	w11, w11, w14
    47c8:	ldp	w15, w14, [x16]
    47cc:	ldr	w16, [x16, #8]
    47d0:	add	x17, x21, x17, lsl #4
    47d4:	add	w13, w13, w15
    47d8:	ldrh	w15, [x10, #30]
    47dc:	add	w12, w12, w14
    47e0:	add	w11, w11, w16
    47e4:	ldp	w14, w16, [x17]
    47e8:	ldr	w17, [x17, #8]
    47ec:	add	x15, x21, x15, lsl #4
    47f0:	add	w13, w13, w14
    47f4:	ldrh	w14, [x10, #32]
    47f8:	add	w12, w12, w16
    47fc:	add	w11, w11, w17
    4800:	ldp	w16, w17, [x15]
    4804:	ldr	w15, [x15, #8]
    4808:	add	x14, x21, x14, lsl #4
    480c:	add	w13, w13, w16
    4810:	add	w12, w12, w17
    4814:	ldrh	w17, [x10, #34]
    4818:	add	w11, w11, w15
    481c:	ldp	w16, w15, [x14]
    4820:	ldr	w14, [x14, #8]
    4824:	add	x17, x21, x17, lsl #4
    4828:	add	w13, w13, w16
    482c:	ldrh	w16, [x10, #36]
    4830:	add	w12, w12, w15
    4834:	add	w11, w11, w14
    4838:	ldp	w15, w14, [x17]
    483c:	ldr	w17, [x17, #8]
    4840:	add	x16, x21, x16, lsl #4
    4844:	add	w13, w13, w15
    4848:	ldrh	w15, [x10, #38]
    484c:	add	w12, w12, w14
    4850:	add	w11, w11, w17
    4854:	ldp	w14, w17, [x16]
    4858:	ldr	w16, [x16, #8]
    485c:	add	x15, x21, x15, lsl #4
    4860:	add	w12, w12, w17
    4864:	ldrh	w17, [x10, #40]
    4868:	add	w13, w13, w14
    486c:	add	w11, w11, w16
    4870:	ldp	w14, w16, [x15]
    4874:	ldr	w15, [x15, #8]
    4878:	add	x17, x21, x17, lsl #4
    487c:	add	w13, w13, w14
    4880:	ldrh	w14, [x10, #42]
    4884:	add	w12, w12, w16
    4888:	add	w11, w11, w15
    488c:	ldp	w16, w15, [x17]
    4890:	ldr	w17, [x17, #8]
    4894:	add	x14, x21, x14, lsl #4
    4898:	add	w13, w13, w16
    489c:	ldrh	w16, [x10, #44]
    48a0:	add	w12, w12, w15
    48a4:	add	w11, w11, w17
    48a8:	ldp	w15, w17, [x14]
    48ac:	ldr	w14, [x14, #8]
    48b0:	add	x16, x21, x16, lsl #4
    48b4:	add	w13, w13, w15
    48b8:	add	w12, w12, w17
    48bc:	ldrh	w17, [x10, #46]
    48c0:	add	w11, w11, w14
    48c4:	ldp	w15, w14, [x16]
    48c8:	ldr	w16, [x16, #8]
    48cc:	add	x17, x21, x17, lsl #4
    48d0:	add	w13, w13, w15
    48d4:	ldrh	w15, [x10, #48]
    48d8:	add	w12, w12, w14
    48dc:	add	w11, w11, w16
    48e0:	ldp	w14, w16, [x17]
    48e4:	ldr	w17, [x17, #8]
    48e8:	add	x15, x21, x15, lsl #4
    48ec:	add	w13, w13, w14
    48f0:	ldrh	w14, [x10, #50]
    48f4:	add	w12, w12, w16
    48f8:	add	w11, w11, w17
    48fc:	ldp	w16, w17, [x15]
    4900:	ldr	w15, [x15, #8]
    4904:	add	x14, x21, x14, lsl #4
    4908:	add	w12, w12, w17
    490c:	ldrh	w17, [x10, #52]
    4910:	add	w13, w13, w16
    4914:	add	w11, w11, w15
    4918:	ldp	w16, w15, [x14]
    491c:	ldr	w14, [x14, #8]
    4920:	add	x17, x21, x17, lsl #4
    4924:	add	w13, w13, w16
    4928:	ldrh	w16, [x10, #54]
    492c:	add	w12, w12, w15
    4930:	add	w11, w11, w14
    4934:	ldp	w15, w14, [x17]
    4938:	ldr	w17, [x17, #8]
    493c:	add	x16, x21, x16, lsl #4
    4940:	add	w13, w13, w15
    4944:	ldrh	w15, [x10, #56]
    4948:	add	w12, w12, w14
    494c:	add	w11, w11, w17
    4950:	ldp	w14, w17, [x16]
    4954:	ldr	w16, [x16, #8]
    4958:	add	x15, x21, x15, lsl #4
    495c:	add	w13, w13, w14
    4960:	add	w12, w12, w17
    4964:	ldrh	w17, [x10, #58]
    4968:	add	w11, w11, w16
    496c:	ldp	w14, w16, [x15]
    4970:	ldr	w15, [x15, #8]
    4974:	add	x17, x21, x17, lsl #4
    4978:	add	w13, w13, w14
    497c:	ldrh	w14, [x10, #60]
    4980:	add	w12, w12, w16
    4984:	add	w11, w11, w15
    4988:	ldp	w16, w15, [x17]
    498c:	ldr	w17, [x17, #8]
    4990:	add	x14, x21, x14, lsl #4
    4994:	add	w13, w13, w16
    4998:	ldrh	w16, [x10, #62]
    499c:	add	w12, w12, w15
    49a0:	add	w11, w11, w17
    49a4:	ldp	w15, w17, [x14]
    49a8:	ldr	w14, [x14, #8]
    49ac:	add	x16, x21, x16, lsl #4
    49b0:	add	w12, w12, w17
    49b4:	ldrh	w17, [x10, #64]
    49b8:	add	w13, w13, w15
    49bc:	add	w11, w11, w14
    49c0:	ldp	w15, w14, [x16]
    49c4:	ldr	w16, [x16, #8]
    49c8:	add	x17, x21, x17, lsl #4
    49cc:	add	w13, w13, w15
    49d0:	ldrh	w15, [x10, #66]
    49d4:	add	w12, w12, w14
    49d8:	add	w11, w11, w16
    49dc:	ldp	w14, w16, [x17]
    49e0:	ldr	w17, [x17, #8]
    49e4:	add	x15, x21, x15, lsl #4
    49e8:	add	w13, w13, w14
    49ec:	ldrh	w14, [x10, #68]
    49f0:	add	w12, w12, w16
    49f4:	add	w11, w11, w17
    49f8:	ldp	w16, w17, [x15]
    49fc:	ldr	w15, [x15, #8]
    4a00:	add	x14, x21, x14, lsl #4
    4a04:	add	w13, w13, w16
    4a08:	add	w12, w12, w17
    4a0c:	ldrh	w17, [x10, #70]
    4a10:	add	w11, w11, w15
    4a14:	ldp	w16, w15, [x14]
    4a18:	ldr	w14, [x14, #8]
    4a1c:	add	x17, x21, x17, lsl #4
    4a20:	add	w13, w13, w16
    4a24:	ldrh	w16, [x10, #72]
    4a28:	add	w12, w12, w15
    4a2c:	add	w11, w11, w14
    4a30:	ldp	w15, w14, [x17]
    4a34:	ldr	w17, [x17, #8]
    4a38:	add	x16, x21, x16, lsl #4
    4a3c:	add	w13, w13, w15
    4a40:	ldrh	w15, [x10, #74]
    4a44:	add	w12, w12, w14
    4a48:	add	w11, w11, w17
    4a4c:	ldp	w14, w17, [x16]
    4a50:	ldr	w16, [x16, #8]
    4a54:	add	x15, x21, x15, lsl #4
    4a58:	add	w12, w12, w17
    4a5c:	ldrh	w17, [x10, #76]
    4a60:	add	w13, w13, w14
    4a64:	add	w11, w11, w16
    4a68:	ldp	w14, w16, [x15]
    4a6c:	ldr	w15, [x15, #8]
    4a70:	add	x17, x21, x17, lsl #4
    4a74:	add	w13, w13, w14
    4a78:	ldrh	w14, [x10, #78]
    4a7c:	add	w12, w12, w16
    4a80:	add	w11, w11, w15
    4a84:	ldp	w16, w15, [x17]
    4a88:	ldr	w17, [x17, #8]
    4a8c:	add	x14, x21, x14, lsl #4
    4a90:	add	w13, w13, w16
    4a94:	ldrh	w16, [x10, #80]
    4a98:	add	w12, w12, w15
    4a9c:	add	w11, w11, w17
    4aa0:	ldp	w15, w17, [x14]
    4aa4:	ldr	w14, [x14, #8]
    4aa8:	add	x16, x21, x16, lsl #4
    4aac:	add	w13, w13, w15
    4ab0:	add	w12, w12, w17
    4ab4:	ldrh	w17, [x10, #82]
    4ab8:	add	w11, w11, w14
    4abc:	ldp	w15, w14, [x16]
    4ac0:	ldr	w16, [x16, #8]
    4ac4:	add	x17, x21, x17, lsl #4
    4ac8:	add	w13, w13, w15
    4acc:	ldrh	w15, [x10, #84]
    4ad0:	add	w12, w12, w14
    4ad4:	add	w11, w11, w16
    4ad8:	ldp	w14, w16, [x17]
    4adc:	ldr	w17, [x17, #8]
    4ae0:	add	x15, x21, x15, lsl #4
    4ae4:	add	w13, w13, w14
    4ae8:	ldrh	w14, [x10, #86]
    4aec:	add	w12, w12, w16
    4af0:	add	w11, w11, w17
    4af4:	ldp	w16, w17, [x15]
    4af8:	ldr	w15, [x15, #8]
    4afc:	add	x14, x21, x14, lsl #4
    4b00:	add	w12, w12, w17
    4b04:	ldrh	w17, [x10, #88]
    4b08:	add	w13, w13, w16
    4b0c:	add	w11, w11, w15
    4b10:	ldp	w16, w15, [x14]
    4b14:	ldr	w14, [x14, #8]
    4b18:	add	x17, x21, x17, lsl #4
    4b1c:	add	w13, w13, w16
    4b20:	ldrh	w16, [x10, #90]
    4b24:	add	w12, w12, w15
    4b28:	add	w11, w11, w14
    4b2c:	ldp	w15, w14, [x17]
    4b30:	ldr	w17, [x17, #8]
    4b34:	add	x16, x21, x16, lsl #4
    4b38:	add	w13, w13, w15
    4b3c:	ldrh	w15, [x10, #92]
    4b40:	add	w12, w12, w14
    4b44:	add	w11, w11, w17
    4b48:	ldp	w14, w17, [x16]
    4b4c:	ldr	w16, [x16, #8]
    4b50:	add	x15, x21, x15, lsl #4
    4b54:	add	w13, w13, w14
    4b58:	add	w11, w11, w16
    4b5c:	ldp	w14, w16, [x15]
    4b60:	add	w12, w12, w17
    4b64:	ldrh	w17, [x10, #94]
    4b68:	ldrh	w10, [x10, #96]
    4b6c:	add	w13, w13, w14
    4b70:	ldr	w14, [x15, #8]
    4b74:	add	x15, x21, x17, lsl #4
    4b78:	add	w12, w12, w16
    4b7c:	add	x10, x21, x10, lsl #4
    4b80:	add	w11, w11, w14
    4b84:	ldp	w16, w14, [x15]
    4b88:	ldr	w15, [x15, #8]
    4b8c:	add	w13, w13, w16
    4b90:	ldrh	w16, [x27, x18, lsl #1]
    4b94:	add	w12, w12, w14
    4b98:	add	w11, w11, w15
    4b9c:	ldp	w14, w15, [x10]
    4ba0:	add	x16, x21, x16, lsl #4
    4ba4:	ldr	w10, [x10, #8]
    4ba8:	add	w13, w13, w14
    4bac:	add	w12, w12, w15
    4bb0:	ldp	w14, w15, [x16]
    4bb4:	ldr	w16, [x16, #8]
    4bb8:	add	w10, w11, w10
    4bbc:	add	w11, w13, w14
    4bc0:	add	w12, w12, w15
    4bc4:	add	w10, w10, w16
    4bc8:	sturh	w11, [x29, #-12]
    4bcc:	lsr	w11, w11, #16
    4bd0:	sturh	w12, [x29, #-8]
    4bd4:	lsr	w12, w12, #16
    4bd8:	sturh	w10, [x29, #-4]
    4bdc:	lsr	w10, w10, #16
    4be0:	sturh	w11, [x29, #-10]
    4be4:	sturh	w12, [x29, #-6]
    4be8:	sturh	w10, [x29, #-2]
    4bec:	b	4c40 <BZ2_compressBlock@@Base+0x12c8>
    4bf0:	ldr	x27, [sp, #72]
    4bf4:	ldr	x22, [sp, #56]
    4bf8:	cmp	w8, w25
    4bfc:	b.lt	4c40 <BZ2_compressBlock@@Base+0x12c8>  // b.tstop
    4c00:	sxtw	x10, w8
    4c04:	mov	x11, x25
    4c08:	ldrh	w12, [x27, x11, lsl #1]
    4c0c:	sub	x13, x29, #0xc
    4c10:	mov	x14, x20
    4c14:	add	x12, x22, x12
    4c18:	ldrb	w15, [x12]
    4c1c:	ldrh	w16, [x13]
    4c20:	subs	x14, x14, #0x1
    4c24:	add	x12, x12, #0x102
    4c28:	add	w15, w16, w15
    4c2c:	strh	w15, [x13], #2
    4c30:	b.ne	4c18 <BZ2_compressBlock@@Base+0x12a0>  // b.any
    4c34:	cmp	x11, x10
    4c38:	add	x11, x11, #0x1
    4c3c:	b.lt	4c08 <BZ2_compressBlock@@Base+0x1290>  // b.tstop
    4c40:	mov	w11, #0xc9ff                	// #51711
    4c44:	mov	x12, xzr
    4c48:	movk	w11, #0x3b9a, lsl #16
    4c4c:	mov	w10, #0xffffffff            	// #-1
    4c50:	ldrh	w13, [x24, x12, lsl #1]
    4c54:	cmp	w11, w13
    4c58:	csel	w10, w12, w10, gt
    4c5c:	add	x12, x12, #0x1
    4c60:	csel	w11, w13, w11, gt
    4c64:	cmp	x20, x12
    4c68:	b.ne	4c50 <BZ2_compressBlock@@Base+0x12d8>  // b.any
    4c6c:	sbfiz	x12, x10, #2, #32
    4c70:	sub	x16, x29, #0x24
    4c74:	ldr	w13, [x16, x12]
    4c78:	ldur	x15, [x29, #-64]
    4c7c:	add	w23, w11, w23
    4c80:	sxtw	x11, w10
    4c84:	add	w13, w13, #0x1
    4c88:	add	x14, x19, x15
    4c8c:	add	x15, x15, #0x1
    4c90:	str	w13, [x16, x12]
    4c94:	strb	w10, [x14, #1704]
    4c98:	stur	x15, [x29, #-64]
    4c9c:	tbnz	w9, #0, 4200 <BZ2_compressBlock@@Base+0x888>
    4ca0:	cmp	w8, w25
    4ca4:	mov	w13, #0xb188                	// #45448
    4ca8:	mov	w14, #0x408                 	// #1032
    4cac:	b.lt	45fc <BZ2_compressBlock@@Base+0xc84>  // b.tstop
    4cb0:	sxtw	x9, w8
    4cb4:	ldrh	w10, [x27, x25, lsl #1]
    4cb8:	madd	x12, x11, x14, x19
    4cbc:	cmp	x25, x9
    4cc0:	add	x25, x25, #0x1
    4cc4:	add	x10, x12, x10, lsl #2
    4cc8:	ldr	w12, [x10, x13]
    4ccc:	add	w12, w12, #0x1
    4cd0:	str	w12, [x10, x13]
    4cd4:	b.lt	4cb4 <BZ2_compressBlock@@Base+0x133c>  // b.tstop
    4cd8:	b	45fc <BZ2_compressBlock@@Base+0xc84>
    4cdc:	stur	xzr, [x29, #-64]
    4ce0:	mov	w23, wzr
    4ce4:	ldr	w8, [x19, #656]
    4ce8:	adrp	x28, a000 <BZ2_bzRead@@Base+0x84>
    4cec:	add	x28, x28, #0xede
    4cf0:	cmp	w8, #0x3
    4cf4:	b.ge	4d48 <BZ2_compressBlock@@Base+0x13d0>  // b.tcont
    4cf8:	ldr	x28, [sp]
    4cfc:	ldr	x23, [sp, #32]
    4d00:	mov	x26, x20
    4d04:	mov	x25, x22
    4d08:	mov	w3, #0x11                  	// #17
    4d0c:	mov	x0, x25
    4d10:	mov	x1, x28
    4d14:	mov	w2, w23
    4d18:	bl	14f0 <BZ2_hbMakeCodeLengths@plt>
    4d1c:	add	x25, x25, #0x102
    4d20:	subs	x26, x26, #0x1
    4d24:	add	x28, x28, #0x408
    4d28:	b.ne	4d08 <BZ2_compressBlock@@Base+0x1390>  // b.any
    4d2c:	ldr	w8, [sp, #28]
    4d30:	ldr	x28, [sp, #8]
    4d34:	add	w8, w8, #0x1
    4d38:	cmp	w8, #0x4
    4d3c:	str	w8, [sp, #28]
    4d40:	b.ne	4138 <BZ2_compressBlock@@Base+0x7c0>  // b.any
    4d44:	b	4db0 <BZ2_compressBlock@@Base+0x1438>
    4d48:	adrp	x27, 1b000 <BZ2_bzerror@@Base+0x1084c>
    4d4c:	ldr	x27, [x27, #4016]
    4d50:	ldr	w8, [sp, #28]
    4d54:	cmp	w23, #0x0
    4d58:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    4d5c:	ldr	x0, [x27]
    4d60:	add	w2, w8, #0x1
    4d64:	add	w8, w23, #0x7
    4d68:	csel	w8, w8, w23, lt  // lt = tstop
    4d6c:	asr	w3, w8, #3
    4d70:	add	x1, x1, #0xeb5
    4d74:	bl	1750 <fprintf@plt>
    4d78:	ldr	x1, [x27]
    4d7c:	sub	x25, x29, #0x24
    4d80:	mov	x26, x20
    4d84:	ldr	w2, [x25], #4
    4d88:	mov	x0, x1
    4d8c:	mov	x1, x28
    4d90:	bl	1750 <fprintf@plt>
    4d94:	ldr	x1, [x27]
    4d98:	subs	x26, x26, #0x1
    4d9c:	b.ne	4d84 <BZ2_compressBlock@@Base+0x140c>  // b.any
    4da0:	mov	w0, #0xa                   	// #10
    4da4:	bl	1520 <fputc@plt>
    4da8:	ldr	x27, [sp, #72]
    4dac:	b	4cf8 <BZ2_compressBlock@@Base+0x1380>
    4db0:	ldur	x9, [x29, #-64]
    4db4:	mov	w8, #0x4653                	// #18003
    4db8:	cmp	w9, w8
    4dbc:	b.lt	4dc8 <BZ2_compressBlock@@Base+0x1450>  // b.tstop
    4dc0:	mov	w0, #0xbbb                 	// #3003
    4dc4:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    4dc8:	mov	x8, xzr
    4dcc:	sub	x9, x29, #0x34
    4dd0:	strb	w8, [x9, x8]
    4dd4:	add	x8, x8, #0x1
    4dd8:	cmp	x20, x8
    4ddc:	b.ne	4dd0 <BZ2_compressBlock@@Base+0x1458>  // b.any
    4de0:	ldur	x8, [x29, #-64]
    4de4:	ldr	x17, [sp, #32]
    4de8:	cmp	w8, #0x1
    4dec:	b.lt	4e58 <BZ2_compressBlock@@Base+0x14e0>  // b.tstop
    4df0:	ldur	x9, [x29, #-64]
    4df4:	ldurb	w10, [x29, #-52]
    4df8:	sub	x11, x29, #0x34
    4dfc:	mov	x8, xzr
    4e00:	mov	w9, w9
    4e04:	orr	x11, x11, #0x1
    4e08:	mov	w12, #0x4cfa                	// #19706
    4e0c:	b	4e24 <BZ2_compressBlock@@Base+0x14ac>
    4e10:	mov	w14, wzr
    4e14:	add	x8, x8, #0x1
    4e18:	cmp	x8, x9
    4e1c:	strb	w14, [x13, x12]
    4e20:	b.eq	4e54 <BZ2_compressBlock@@Base+0x14dc>  // b.none
    4e24:	add	x13, x19, x8
    4e28:	ldrb	w15, [x13, #1704]
    4e2c:	cmp	w15, w10, uxtb
    4e30:	b.eq	4e10 <BZ2_compressBlock@@Base+0x1498>  // b.none
    4e34:	mov	x14, xzr
    4e38:	mov	w16, w10
    4e3c:	ldrb	w10, [x11, x14]
    4e40:	strb	w16, [x11, x14]
    4e44:	add	x14, x14, #0x1
    4e48:	cmp	w15, w10
    4e4c:	b.ne	4e38 <BZ2_compressBlock@@Base+0x14c0>  // b.any
    4e50:	b	4e14 <BZ2_compressBlock@@Base+0x149c>
    4e54:	sturb	w10, [x29, #-52]
    4e58:	mov	w8, #0x934c                	// #37708
    4e5c:	mov	x21, xzr
    4e60:	sxtw	x22, w17
    4e64:	mov	w28, #0x934c                	// #37708
    4e68:	add	x25, x19, x8
    4e6c:	mov	w26, #0x102                 	// #258
    4e70:	b	4eb4 <BZ2_compressBlock@@Base+0x153c>
    4e74:	cmp	w24, #0x0
    4e78:	b.le	4f14 <BZ2_compressBlock@@Base+0x159c>
    4e7c:	mov	w8, #0x408                 	// #1032
    4e80:	madd	x8, x21, x8, x19
    4e84:	madd	x9, x21, x26, x19
    4e88:	mov	w10, #0x9958                	// #39256
    4e8c:	add	x0, x8, x10
    4e90:	add	x1, x9, x28
    4e94:	mov	w2, w24
    4e98:	mov	w3, w23
    4e9c:	ldr	x4, [sp, #32]
    4ea0:	bl	16e0 <BZ2_hbAssignCodes@plt>
    4ea4:	add	x21, x21, #0x1
    4ea8:	cmp	x21, x20
    4eac:	add	x25, x25, #0x102
    4eb0:	b.eq	4f20 <BZ2_compressBlock@@Base+0x15a8>  // b.none
    4eb4:	ldr	x8, [sp, #48]
    4eb8:	cmn	w8, #0x1
    4ebc:	b.lt	4ef8 <BZ2_compressBlock@@Base+0x1580>  // b.tstop
    4ec0:	mov	x8, xzr
    4ec4:	mov	w23, wzr
    4ec8:	mov	w24, #0x20                  	// #32
    4ecc:	ldrb	w9, [x25, x8]
    4ed0:	add	x8, x8, #0x1
    4ed4:	cmp	w23, w9
    4ed8:	csel	w23, w9, w23, cc  // cc = lo, ul, last
    4edc:	cmp	w24, w9
    4ee0:	csel	w24, w9, w24, gt
    4ee4:	cmp	x8, x22
    4ee8:	b.lt	4ecc <BZ2_compressBlock@@Base+0x1554>  // b.tstop
    4eec:	cmp	w23, #0x12
    4ef0:	b.lt	4e74 <BZ2_compressBlock@@Base+0x14fc>  // b.tstop
    4ef4:	b	4f08 <BZ2_compressBlock@@Base+0x1590>
    4ef8:	mov	w23, wzr
    4efc:	mov	w24, #0x20                  	// #32
    4f00:	cmp	w23, #0x12
    4f04:	b.lt	4e74 <BZ2_compressBlock@@Base+0x14fc>  // b.tstop
    4f08:	mov	w0, #0xbbc                 	// #3004
    4f0c:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    4f10:	b	4e74 <BZ2_compressBlock@@Base+0x14fc>
    4f14:	mov	w0, #0xbbd                 	// #3005
    4f18:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    4f1c:	b	4e7c <BZ2_compressBlock@@Base+0x1504>
    4f20:	mov	x8, xzr
    4f24:	add	x9, x19, #0x80
    4f28:	sub	x10, x29, #0x34
    4f2c:	mov	w11, #0x1                   	// #1
    4f30:	b	4f44 <BZ2_compressBlock@@Base+0x15cc>
    4f34:	add	x8, x8, #0x1
    4f38:	cmp	x8, #0x10
    4f3c:	add	x9, x9, #0x10
    4f40:	b.eq	4f6c <BZ2_compressBlock@@Base+0x15f4>  // b.none
    4f44:	mov	x12, xzr
    4f48:	strb	wzr, [x10, x8]
    4f4c:	b	4f5c <BZ2_compressBlock@@Base+0x15e4>
    4f50:	add	x12, x12, #0x1
    4f54:	cmp	x12, #0x10
    4f58:	b.eq	4f34 <BZ2_compressBlock@@Base+0x15bc>  // b.none
    4f5c:	ldrb	w13, [x9, x12]
    4f60:	cbz	w13, 4f50 <BZ2_compressBlock@@Base+0x15d8>
    4f64:	strb	w11, [x10, x8]
    4f68:	b	4f50 <BZ2_compressBlock@@Base+0x15d8>
    4f6c:	ldr	w21, [x19, #116]
    4f70:	mov	x22, xzr
    4f74:	sub	x23, x29, #0x34
    4f78:	ldrb	w8, [x23, x22]
    4f7c:	mov	w1, #0x1                   	// #1
    4f80:	mov	x0, x19
    4f84:	cmp	w8, #0x0
    4f88:	cset	w2, ne  // ne = any
    4f8c:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    4f90:	add	x22, x22, #0x1
    4f94:	cmp	x22, #0x10
    4f98:	b.ne	4f78 <BZ2_compressBlock@@Base+0x1600>  // b.any
    4f9c:	mov	x22, xzr
    4fa0:	add	x23, x19, #0x80
    4fa4:	sub	x24, x29, #0x34
    4fa8:	b	4fbc <BZ2_compressBlock@@Base+0x1644>
    4fac:	add	x22, x22, #0x1
    4fb0:	cmp	x22, #0x10
    4fb4:	add	x23, x23, #0x10
    4fb8:	b.eq	4ff0 <BZ2_compressBlock@@Base+0x1678>  // b.none
    4fbc:	ldrb	w8, [x24, x22]
    4fc0:	cbz	w8, 4fac <BZ2_compressBlock@@Base+0x1634>
    4fc4:	mov	x25, xzr
    4fc8:	ldrb	w8, [x23, x25]
    4fcc:	mov	w1, #0x1                   	// #1
    4fd0:	mov	x0, x19
    4fd4:	cmp	w8, #0x0
    4fd8:	cset	w2, ne  // ne = any
    4fdc:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    4fe0:	add	x25, x25, #0x1
    4fe4:	cmp	x25, #0x10
    4fe8:	b.ne	4fc8 <BZ2_compressBlock@@Base+0x1650>  // b.any
    4fec:	b	4fac <BZ2_compressBlock@@Base+0x1634>
    4ff0:	ldr	w8, [x19, #656]
    4ff4:	cmp	w8, #0x3
    4ff8:	b.ge	56e0 <BZ2_compressBlock@@Base+0x1d68>  // b.tcont
    4ffc:	ldr	w21, [x19, #116]
    5000:	mov	w1, #0x3                   	// #3
    5004:	mov	x0, x19
    5008:	mov	w2, w20
    500c:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5010:	ldur	x22, [x29, #-64]
    5014:	mov	w1, #0xf                   	// #15
    5018:	mov	x0, x19
    501c:	mov	w2, w22
    5020:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5024:	cmp	w22, #0x1
    5028:	b.lt	5094 <BZ2_compressBlock@@Base+0x171c>  // b.tstop
    502c:	ldur	x8, [x29, #-64]
    5030:	mov	x22, xzr
    5034:	mov	w24, #0x4cfa                	// #19706
    5038:	mov	w23, w8
    503c:	b	505c <BZ2_compressBlock@@Base+0x16e4>
    5040:	mov	w1, #0x1                   	// #1
    5044:	mov	x0, x19
    5048:	mov	w2, wzr
    504c:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5050:	add	x22, x22, #0x1
    5054:	cmp	x22, x23
    5058:	b.eq	5094 <BZ2_compressBlock@@Base+0x171c>  // b.none
    505c:	add	x8, x19, x22
    5060:	add	x25, x8, x24
    5064:	ldrb	w8, [x25]
    5068:	cbz	w8, 5040 <BZ2_compressBlock@@Base+0x16c8>
    506c:	mov	w26, wzr
    5070:	mov	w1, #0x1                   	// #1
    5074:	mov	w2, #0x1                   	// #1
    5078:	mov	x0, x19
    507c:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5080:	ldrb	w8, [x25]
    5084:	add	w26, w26, #0x1
    5088:	cmp	w26, w8
    508c:	b.cc	5070 <BZ2_compressBlock@@Base+0x16f8>  // b.lo, b.ul, b.last
    5090:	b	5040 <BZ2_compressBlock@@Base+0x16c8>
    5094:	ldr	w8, [x19, #656]
    5098:	cmp	w8, #0x3
    509c:	b.ge	5704 <BZ2_compressBlock@@Base+0x1d8c>  // b.tcont
    50a0:	ldr	w8, [x19, #116]
    50a4:	mov	x23, xzr
    50a8:	mov	w25, #0x102                 	// #258
    50ac:	mov	w26, #0x934c                	// #37708
    50b0:	str	w8, [sp, #72]
    50b4:	ldr	x8, [sp, #32]
    50b8:	sxtw	x24, w8
    50bc:	b	50cc <BZ2_compressBlock@@Base+0x1754>
    50c0:	add	x23, x23, #0x1
    50c4:	cmp	x23, x20
    50c8:	b.eq	517c <BZ2_compressBlock@@Base+0x1804>  // b.none
    50cc:	madd	x8, x23, x25, x19
    50d0:	ldrb	w22, [x8, x26]
    50d4:	mov	w1, #0x5                   	// #5
    50d8:	mov	x0, x19
    50dc:	mov	w2, w22
    50e0:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    50e4:	ldr	x8, [sp, #48]
    50e8:	cmn	w8, #0x1
    50ec:	b.lt	50c0 <BZ2_compressBlock@@Base+0x1748>  // b.tstop
    50f0:	mov	x28, xzr
    50f4:	b	5114 <BZ2_compressBlock@@Base+0x179c>
    50f8:	mov	w1, #0x1                   	// #1
    50fc:	mov	x0, x19
    5100:	mov	w2, wzr
    5104:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5108:	add	x28, x28, #0x1
    510c:	cmp	x28, x24
    5110:	b.ge	50c0 <BZ2_compressBlock@@Base+0x1748>  // b.tcont
    5114:	madd	x8, x23, x25, x19
    5118:	add	x8, x8, x28
    511c:	add	x21, x8, x26
    5120:	ldrb	w8, [x21]
    5124:	cmp	w22, w8
    5128:	b.ge	514c <BZ2_compressBlock@@Base+0x17d4>  // b.tcont
    512c:	mov	w1, #0x2                   	// #2
    5130:	mov	w2, #0x2                   	// #2
    5134:	mov	x0, x19
    5138:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    513c:	ldrb	w8, [x21]
    5140:	add	w22, w22, #0x1
    5144:	cmp	w22, w8
    5148:	b.lt	512c <BZ2_compressBlock@@Base+0x17b4>  // b.tstop
    514c:	ldrb	w8, [x21]
    5150:	cmp	w22, w8
    5154:	b.le	50f8 <BZ2_compressBlock@@Base+0x1780>
    5158:	mov	w1, #0x2                   	// #2
    515c:	mov	w2, #0x3                   	// #3
    5160:	mov	x0, x19
    5164:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5168:	ldrb	w8, [x21]
    516c:	sub	w22, w22, #0x1
    5170:	cmp	w22, w8
    5174:	b.gt	5158 <BZ2_compressBlock@@Base+0x17e0>
    5178:	b	50f8 <BZ2_compressBlock@@Base+0x1780>
    517c:	ldr	w8, [x19, #656]
    5180:	cmp	w8, #0x3
    5184:	b.ge	5728 <BZ2_compressBlock@@Base+0x1db0>  // b.tcont
    5188:	ldr	w8, [x19, #668]
    518c:	ldr	w9, [x19, #116]
    5190:	cmp	w8, #0x1
    5194:	str	w9, [sp, #56]
    5198:	b.lt	5674 <BZ2_compressBlock@@Base+0x1cfc>  // b.tstop
    519c:	mov	x22, xzr
    51a0:	mov	w9, wzr
    51a4:	mov	w11, #0x102                 	// #258
    51a8:	mov	w24, #0x934c                	// #37708
    51ac:	mov	w25, #0x408                 	// #1032
    51b0:	mov	w26, #0x9958                	// #39256
    51b4:	b	55d8 <BZ2_compressBlock@@Base+0x1c60>
    51b8:	ldrb	w8, [x23]
    51bc:	add	x23, x27, x21, lsl #1
    51c0:	ldrh	w9, [x23]
    51c4:	mov	x0, x19
    51c8:	madd	x10, x8, x11, x19
    51cc:	madd	x8, x8, x25, x19
    51d0:	add	x21, x10, x24
    51d4:	add	x28, x8, x26
    51d8:	ldrb	w1, [x21, x9]
    51dc:	ldr	w2, [x28, x9, lsl #2]
    51e0:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    51e4:	ldrh	w8, [x23, #2]
    51e8:	mov	x0, x19
    51ec:	ldrb	w1, [x21, x8]
    51f0:	ldr	w2, [x28, x8, lsl #2]
    51f4:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    51f8:	ldrh	w8, [x23, #4]
    51fc:	mov	x0, x19
    5200:	ldrb	w1, [x21, x8]
    5204:	ldr	w2, [x28, x8, lsl #2]
    5208:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    520c:	ldrh	w8, [x23, #6]
    5210:	mov	x0, x19
    5214:	ldrb	w1, [x21, x8]
    5218:	ldr	w2, [x28, x8, lsl #2]
    521c:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5220:	ldrh	w8, [x23, #8]
    5224:	mov	x0, x19
    5228:	ldrb	w1, [x21, x8]
    522c:	ldr	w2, [x28, x8, lsl #2]
    5230:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5234:	ldrh	w8, [x23, #10]
    5238:	mov	x0, x19
    523c:	ldrb	w1, [x21, x8]
    5240:	ldr	w2, [x28, x8, lsl #2]
    5244:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5248:	ldrh	w8, [x23, #12]
    524c:	mov	x0, x19
    5250:	ldrb	w1, [x21, x8]
    5254:	ldr	w2, [x28, x8, lsl #2]
    5258:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    525c:	ldrh	w8, [x23, #14]
    5260:	mov	x0, x19
    5264:	ldrb	w1, [x21, x8]
    5268:	ldr	w2, [x28, x8, lsl #2]
    526c:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5270:	ldrh	w8, [x23, #16]
    5274:	mov	x0, x19
    5278:	ldrb	w1, [x21, x8]
    527c:	ldr	w2, [x28, x8, lsl #2]
    5280:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5284:	ldrh	w8, [x23, #18]
    5288:	mov	x0, x19
    528c:	ldrb	w1, [x21, x8]
    5290:	ldr	w2, [x28, x8, lsl #2]
    5294:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5298:	ldrh	w8, [x23, #20]
    529c:	mov	x0, x19
    52a0:	ldrb	w1, [x21, x8]
    52a4:	ldr	w2, [x28, x8, lsl #2]
    52a8:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    52ac:	ldrh	w8, [x23, #22]
    52b0:	mov	x0, x19
    52b4:	ldrb	w1, [x21, x8]
    52b8:	ldr	w2, [x28, x8, lsl #2]
    52bc:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    52c0:	ldrh	w8, [x23, #24]
    52c4:	mov	x0, x19
    52c8:	ldrb	w1, [x21, x8]
    52cc:	ldr	w2, [x28, x8, lsl #2]
    52d0:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    52d4:	ldrh	w8, [x23, #26]
    52d8:	mov	x0, x19
    52dc:	ldrb	w1, [x21, x8]
    52e0:	ldr	w2, [x28, x8, lsl #2]
    52e4:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    52e8:	ldrh	w8, [x23, #28]
    52ec:	mov	x0, x19
    52f0:	ldrb	w1, [x21, x8]
    52f4:	ldr	w2, [x28, x8, lsl #2]
    52f8:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    52fc:	ldrh	w8, [x23, #30]
    5300:	mov	x0, x19
    5304:	ldrb	w1, [x21, x8]
    5308:	ldr	w2, [x28, x8, lsl #2]
    530c:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5310:	ldrh	w8, [x23, #32]
    5314:	mov	x0, x19
    5318:	ldrb	w1, [x21, x8]
    531c:	ldr	w2, [x28, x8, lsl #2]
    5320:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5324:	ldrh	w8, [x23, #34]
    5328:	mov	x0, x19
    532c:	ldrb	w1, [x21, x8]
    5330:	ldr	w2, [x28, x8, lsl #2]
    5334:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5338:	ldrh	w8, [x23, #36]
    533c:	mov	x0, x19
    5340:	ldrb	w1, [x21, x8]
    5344:	ldr	w2, [x28, x8, lsl #2]
    5348:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    534c:	ldrh	w8, [x23, #38]
    5350:	mov	x0, x19
    5354:	ldrb	w1, [x21, x8]
    5358:	ldr	w2, [x28, x8, lsl #2]
    535c:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5360:	ldrh	w8, [x23, #40]
    5364:	mov	x0, x19
    5368:	ldrb	w1, [x21, x8]
    536c:	ldr	w2, [x28, x8, lsl #2]
    5370:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5374:	ldrh	w8, [x23, #42]
    5378:	mov	x0, x19
    537c:	ldrb	w1, [x21, x8]
    5380:	ldr	w2, [x28, x8, lsl #2]
    5384:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5388:	ldrh	w8, [x23, #44]
    538c:	mov	x0, x19
    5390:	ldrb	w1, [x21, x8]
    5394:	ldr	w2, [x28, x8, lsl #2]
    5398:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    539c:	ldrh	w8, [x23, #46]
    53a0:	mov	x0, x19
    53a4:	ldrb	w1, [x21, x8]
    53a8:	ldr	w2, [x28, x8, lsl #2]
    53ac:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    53b0:	ldrh	w8, [x23, #48]
    53b4:	mov	x0, x19
    53b8:	ldrb	w1, [x21, x8]
    53bc:	ldr	w2, [x28, x8, lsl #2]
    53c0:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    53c4:	ldrh	w8, [x23, #50]
    53c8:	mov	x0, x19
    53cc:	ldrb	w1, [x21, x8]
    53d0:	ldr	w2, [x28, x8, lsl #2]
    53d4:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    53d8:	ldrh	w8, [x23, #52]
    53dc:	mov	x0, x19
    53e0:	ldrb	w1, [x21, x8]
    53e4:	ldr	w2, [x28, x8, lsl #2]
    53e8:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    53ec:	ldrh	w8, [x23, #54]
    53f0:	mov	x0, x19
    53f4:	ldrb	w1, [x21, x8]
    53f8:	ldr	w2, [x28, x8, lsl #2]
    53fc:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5400:	ldrh	w8, [x23, #56]
    5404:	mov	x0, x19
    5408:	ldrb	w1, [x21, x8]
    540c:	ldr	w2, [x28, x8, lsl #2]
    5410:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5414:	ldrh	w8, [x23, #58]
    5418:	mov	x0, x19
    541c:	ldrb	w1, [x21, x8]
    5420:	ldr	w2, [x28, x8, lsl #2]
    5424:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5428:	ldrh	w8, [x23, #60]
    542c:	mov	x0, x19
    5430:	ldrb	w1, [x21, x8]
    5434:	ldr	w2, [x28, x8, lsl #2]
    5438:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    543c:	ldrh	w8, [x23, #62]
    5440:	mov	x0, x19
    5444:	ldrb	w1, [x21, x8]
    5448:	ldr	w2, [x28, x8, lsl #2]
    544c:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5450:	ldrh	w8, [x23, #64]
    5454:	mov	x0, x19
    5458:	ldrb	w1, [x21, x8]
    545c:	ldr	w2, [x28, x8, lsl #2]
    5460:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5464:	ldrh	w8, [x23, #66]
    5468:	mov	x0, x19
    546c:	ldrb	w1, [x21, x8]
    5470:	ldr	w2, [x28, x8, lsl #2]
    5474:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5478:	ldrh	w8, [x23, #68]
    547c:	mov	x0, x19
    5480:	ldrb	w1, [x21, x8]
    5484:	ldr	w2, [x28, x8, lsl #2]
    5488:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    548c:	ldrh	w8, [x23, #70]
    5490:	mov	x0, x19
    5494:	ldrb	w1, [x21, x8]
    5498:	ldr	w2, [x28, x8, lsl #2]
    549c:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    54a0:	ldrh	w8, [x23, #72]
    54a4:	mov	x0, x19
    54a8:	ldrb	w1, [x21, x8]
    54ac:	ldr	w2, [x28, x8, lsl #2]
    54b0:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    54b4:	ldrh	w8, [x23, #74]
    54b8:	mov	x0, x19
    54bc:	ldrb	w1, [x21, x8]
    54c0:	ldr	w2, [x28, x8, lsl #2]
    54c4:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    54c8:	ldrh	w8, [x23, #76]
    54cc:	mov	x0, x19
    54d0:	ldrb	w1, [x21, x8]
    54d4:	ldr	w2, [x28, x8, lsl #2]
    54d8:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    54dc:	ldrh	w8, [x23, #78]
    54e0:	mov	x0, x19
    54e4:	ldrb	w1, [x21, x8]
    54e8:	ldr	w2, [x28, x8, lsl #2]
    54ec:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    54f0:	ldrh	w8, [x23, #80]
    54f4:	mov	x0, x19
    54f8:	ldrb	w1, [x21, x8]
    54fc:	ldr	w2, [x28, x8, lsl #2]
    5500:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5504:	ldrh	w8, [x23, #82]
    5508:	mov	x0, x19
    550c:	ldrb	w1, [x21, x8]
    5510:	ldr	w2, [x28, x8, lsl #2]
    5514:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5518:	ldrh	w8, [x23, #84]
    551c:	mov	x0, x19
    5520:	ldrb	w1, [x21, x8]
    5524:	ldr	w2, [x28, x8, lsl #2]
    5528:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    552c:	ldrh	w8, [x23, #86]
    5530:	mov	x0, x19
    5534:	ldrb	w1, [x21, x8]
    5538:	ldr	w2, [x28, x8, lsl #2]
    553c:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5540:	ldrh	w8, [x23, #88]
    5544:	mov	x0, x19
    5548:	ldrb	w1, [x21, x8]
    554c:	ldr	w2, [x28, x8, lsl #2]
    5550:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5554:	ldrh	w8, [x23, #90]
    5558:	mov	x0, x19
    555c:	ldrb	w1, [x21, x8]
    5560:	ldr	w2, [x28, x8, lsl #2]
    5564:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5568:	ldrh	w8, [x23, #92]
    556c:	mov	x0, x19
    5570:	ldrb	w1, [x21, x8]
    5574:	ldr	w2, [x28, x8, lsl #2]
    5578:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    557c:	ldrh	w8, [x23, #94]
    5580:	mov	x0, x19
    5584:	ldrb	w1, [x21, x8]
    5588:	ldr	w2, [x28, x8, lsl #2]
    558c:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5590:	ldrh	w8, [x23, #96]
    5594:	mov	x0, x19
    5598:	ldrb	w1, [x21, x8]
    559c:	ldr	w2, [x28, x8, lsl #2]
    55a0:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    55a4:	ldr	x8, [sp, #64]
    55a8:	mov	x0, x19
    55ac:	ldrh	w8, [x27, x8, lsl #1]
    55b0:	ldrb	w1, [x21, x8]
    55b4:	ldr	w2, [x28, x8, lsl #2]
    55b8:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    55bc:	mov	w11, #0x102                 	// #258
    55c0:	ldr	x9, [sp, #72]
    55c4:	ldr	w8, [x19, #668]
    55c8:	add	x22, x22, #0x1
    55cc:	add	w9, w9, #0x1
    55d0:	cmp	w9, w8
    55d4:	b.ge	5678 <BZ2_compressBlock@@Base+0x1d00>  // b.tcont
    55d8:	add	x23, x19, x22
    55dc:	sxtw	x21, w9
    55e0:	ldrb	w9, [x23, #1704]
    55e4:	add	x12, x21, #0x31
    55e8:	sub	w10, w8, #0x1
    55ec:	cmp	w12, w8
    55f0:	csel	w28, w12, w10, lt  // lt = tstop
    55f4:	cmp	w20, w9
    55f8:	str	x12, [sp, #64]
    55fc:	b.hi	560c <BZ2_compressBlock@@Base+0x1c94>  // b.pmore
    5600:	mov	w0, #0xbbe                 	// #3006
    5604:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    5608:	mov	w11, #0x102                 	// #258
    560c:	cmp	w20, #0x6
    5610:	add	x23, x23, #0x6a8
    5614:	str	x28, [sp, #72]
    5618:	b.ne	5628 <BZ2_compressBlock@@Base+0x1cb0>  // b.any
    561c:	sub	w8, w28, w21
    5620:	cmp	w8, #0x31
    5624:	b.eq	51b8 <BZ2_compressBlock@@Base+0x1840>  // b.none
    5628:	cmp	w28, w21
    562c:	b.lt	55c0 <BZ2_compressBlock@@Base+0x1c48>  // b.tstop
    5630:	ldr	x8, [sp, #72]
    5634:	sxtw	x28, w8
    5638:	ldrb	w8, [x23]
    563c:	ldrh	w9, [x27, x21, lsl #1]
    5640:	mov	x0, x19
    5644:	madd	x10, x8, x11, x19
    5648:	madd	x8, x8, x25, x19
    564c:	add	x10, x10, x9
    5650:	add	x8, x8, x9, lsl #2
    5654:	ldrb	w1, [x10, x24]
    5658:	ldr	w2, [x8, x26]
    565c:	bl	3bec <BZ2_compressBlock@@Base+0x274>
    5660:	mov	w11, #0x102                 	// #258
    5664:	cmp	x21, x28
    5668:	add	x21, x21, #0x1
    566c:	b.lt	5638 <BZ2_compressBlock@@Base+0x1cc0>  // b.tstop
    5670:	b	55c0 <BZ2_compressBlock@@Base+0x1c48>
    5674:	mov	w22, wzr
    5678:	adrp	x20, 1b000 <BZ2_bzerror@@Base+0x1084c>
    567c:	ldr	x20, [x20, #4016]
    5680:	ldur	x8, [x29, #-64]
    5684:	cmp	w22, w8
    5688:	b.eq	5694 <BZ2_compressBlock@@Base+0x1d1c>  // b.none
    568c:	mov	w0, #0xbbf                 	// #3007
    5690:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    5694:	ldr	w8, [x19, #656]
    5698:	cmp	w8, #0x3
    569c:	b.ge	5750 <BZ2_compressBlock@@Base+0x1dd8>  // b.tcont
    56a0:	ldp	x20, x19, [sp, #224]
    56a4:	ldp	x22, x21, [sp, #208]
    56a8:	ldp	x24, x23, [sp, #192]
    56ac:	ldp	x26, x25, [sp, #176]
    56b0:	ldp	x28, x27, [sp, #160]
    56b4:	ldp	x29, x30, [sp, #144]
    56b8:	add	sp, sp, #0xf0
    56bc:	ret
    56c0:	ldr	x0, [x8]
    56c4:	ldr	w2, [x19, #108]
    56c8:	ldr	w3, [x19, #668]
    56cc:	ldr	w4, [x19, #124]
    56d0:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    56d4:	add	x1, x1, #0xe3a
    56d8:	bl	1750 <fprintf@plt>
    56dc:	b	3ee0 <BZ2_compressBlock@@Base+0x568>
    56e0:	adrp	x9, 1b000 <BZ2_bzerror@@Base+0x1084c>
    56e4:	ldr	w8, [x19, #116]
    56e8:	ldr	x9, [x9, #4016]
    56ec:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    56f0:	add	x1, x1, #0xee2
    56f4:	sub	w2, w8, w21
    56f8:	ldr	x0, [x9]
    56fc:	bl	1750 <fprintf@plt>
    5700:	b	4ffc <BZ2_compressBlock@@Base+0x1684>
    5704:	adrp	x9, 1b000 <BZ2_bzerror@@Base+0x1084c>
    5708:	ldr	w8, [x19, #116]
    570c:	ldr	x9, [x9, #4016]
    5710:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    5714:	add	x1, x1, #0xefc
    5718:	sub	w2, w8, w21
    571c:	ldr	x0, [x9]
    5720:	bl	1750 <fprintf@plt>
    5724:	b	50a0 <BZ2_compressBlock@@Base+0x1728>
    5728:	adrp	x9, 1b000 <BZ2_bzerror@@Base+0x1084c>
    572c:	ldr	w8, [x19, #116]
    5730:	ldr	x9, [x9, #4016]
    5734:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    5738:	add	x1, x1, #0xf0b
    573c:	ldr	x0, [x9]
    5740:	ldr	w9, [sp, #72]
    5744:	sub	w2, w8, w9
    5748:	bl	1750 <fprintf@plt>
    574c:	b	5188 <BZ2_compressBlock@@Base+0x1810>
    5750:	ldr	w8, [x19, #116]
    5754:	ldr	w9, [sp, #56]
    5758:	ldr	x0, [x20]
    575c:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    5760:	add	x1, x1, #0xf1d
    5764:	sub	w2, w8, w9
    5768:	bl	1750 <fprintf@plt>
    576c:	b	56a0 <BZ2_compressBlock@@Base+0x1d28>
    5770:	ldr	w8, [x0, #644]
    5774:	cmp	w8, #0x1
    5778:	b.lt	57b8 <BZ2_compressBlock@@Base+0x1e40>  // b.tstop
    577c:	add	x8, x0, #0x280
    5780:	ldr	x9, [x0, #80]
    5784:	ldrsw	x10, [x0, #116]
    5788:	ldrb	w8, [x8, #3]
    578c:	strb	w8, [x9, x10]
    5790:	ldr	w8, [x0, #116]
    5794:	ldr	w9, [x0, #640]
    5798:	ldr	w10, [x0, #644]
    579c:	add	w8, w8, #0x1
    57a0:	lsl	w9, w9, #8
    57a4:	subs	w10, w10, #0x8
    57a8:	str	w8, [x0, #116]
    57ac:	str	w9, [x0, #640]
    57b0:	str	w10, [x0, #644]
    57b4:	b.gt	577c <BZ2_compressBlock@@Base+0x1e04>
    57b8:	ret
    57bc:	mov	x8, xzr
    57c0:	str	wzr, [x0, #124]
    57c4:	b	57d4 <BZ2_compressBlock@@Base+0x1e5c>
    57c8:	add	x8, x8, #0x1
    57cc:	cmp	x8, #0x100
    57d0:	b.eq	57f4 <BZ2_compressBlock@@Base+0x1e7c>  // b.none
    57d4:	add	x9, x0, x8
    57d8:	ldrb	w10, [x9, #128]
    57dc:	cbz	w10, 57c8 <BZ2_compressBlock@@Base+0x1e50>
    57e0:	ldr	w10, [x0, #124]
    57e4:	strb	w10, [x9, #384]
    57e8:	add	w9, w10, #0x1
    57ec:	str	w9, [x0, #124]
    57f0:	b	57c8 <BZ2_compressBlock@@Base+0x1e50>
    57f4:	ret

00000000000057f8 <BZ2_decompress@@Base>:
    57f8:	sub	sp, sp, #0xf0
    57fc:	stp	x29, x30, [sp, #144]
    5800:	stp	x28, x27, [sp, #160]
    5804:	stp	x26, x25, [sp, #176]
    5808:	stp	x24, x23, [sp, #192]
    580c:	stp	x22, x21, [sp, #208]
    5810:	stp	x20, x19, [sp, #224]
    5814:	add	x29, sp, #0x90
    5818:	ldr	w8, [x0, #8]
    581c:	ldr	x25, [x0]
    5820:	mov	w10, #0xfa24                	// #64036
    5824:	mov	x20, x0
    5828:	subs	w9, w8, #0xa
    582c:	add	x22, x0, x10
    5830:	b.ne	5850 <BZ2_decompress@@Base+0x58>  // b.any
    5834:	mov	w8, #0xfa24                	// #64036
    5838:	movi	v0.2d, #0x0
    583c:	add	x8, x20, x8
    5840:	str	q0, [x20, #64128]
    5844:	stp	q0, q0, [x8, #64]
    5848:	stp	q0, q0, [x8, #32]
    584c:	stp	q0, q0, [x8]
    5850:	ldp	w8, w5, [x22, #56]
    5854:	ldp	w16, w30, [x22]
    5858:	ldp	w26, w6, [x22, #8]
    585c:	ldp	w4, w17, [x22, #16]
    5860:	ldp	w21, w28, [x22, #24]
    5864:	ldp	w15, w24, [x22, #32]
    5868:	ldp	w23, w18, [x22, #40]
    586c:	ldp	w19, w2, [x22, #48]
    5870:	stur	w8, [x29, #-20]
    5874:	ldp	w1, w8, [x22, #64]
    5878:	ldr	w3, [x22, #80]
    587c:	ldur	x7, [x22, #84]
    5880:	ldur	x27, [x22, #92]
    5884:	stur	w8, [x29, #-12]
    5888:	ldp	w8, w14, [x22, #72]
    588c:	cmp	w9, #0x28
    5890:	stur	w8, [x29, #-16]
    5894:	ldur	x8, [x22, #100]
    5898:	stur	x8, [x29, #-32]
    589c:	b.hi	5ad4 <BZ2_decompress@@Base+0x2dc>  // b.pmore
    58a0:	adrp	x10, a000 <BZ2_bzRead@@Base+0x84>
    58a4:	add	x10, x10, #0xf28
    58a8:	adr	x8, 58b8 <BZ2_decompress@@Base+0xc0>
    58ac:	ldrh	w11, [x10, x9, lsl #1]
    58b0:	add	x8, x8, x11, lsl #2
    58b4:	br	x8
    58b8:	ldr	w8, [x20, #36]
    58bc:	mov	w9, #0xa                   	// #10
    58c0:	str	w9, [x20, #8]
    58c4:	cmp	w8, #0x7
    58c8:	b.le	5a8c <BZ2_decompress@@Base+0x294>
    58cc:	ldr	w9, [x20, #32]
    58d0:	sub	w8, w8, #0x8
    58d4:	str	w8, [x20, #36]
    58d8:	lsr	w9, w9, w8
    58dc:	and	w9, w9, #0xff
    58e0:	cmp	w9, #0x42
    58e4:	b.ne	597c <BZ2_decompress@@Base+0x184>  // b.any
    58e8:	ldr	w8, [x20, #36]
    58ec:	mov	w9, #0xb                   	// #11
    58f0:	str	w9, [x20, #8]
    58f4:	cmp	w8, #0x7
    58f8:	b.le	5a38 <BZ2_decompress@@Base+0x240>
    58fc:	ldr	w9, [x20, #32]
    5900:	sub	w8, w8, #0x8
    5904:	str	w8, [x20, #36]
    5908:	lsr	w9, w9, w8
    590c:	and	w9, w9, #0xff
    5910:	cmp	w9, #0x5a
    5914:	b.ne	597c <BZ2_decompress@@Base+0x184>  // b.any
    5918:	ldr	w8, [x20, #36]
    591c:	mov	w9, #0xc                   	// #12
    5920:	str	w9, [x20, #8]
    5924:	cmp	w8, #0x7
    5928:	b.le	59e4 <BZ2_decompress@@Base+0x1ec>
    592c:	ldr	w9, [x20, #32]
    5930:	sub	w8, w8, #0x8
    5934:	str	w8, [x20, #36]
    5938:	lsr	w9, w9, w8
    593c:	and	w9, w9, #0xff
    5940:	cmp	w9, #0x68
    5944:	b.ne	597c <BZ2_decompress@@Base+0x184>  // b.any
    5948:	ldr	w8, [x20, #36]
    594c:	mov	w9, #0xd                   	// #13
    5950:	str	w9, [x20, #8]
    5954:	cmp	w8, #0x7
    5958:	b.le	5990 <BZ2_decompress@@Base+0x198>
    595c:	ldr	w9, [x20, #32]
    5960:	sub	w10, w8, #0x8
    5964:	lsr	w8, w9, w10
    5968:	and	w8, w8, #0xff
    596c:	sub	w9, w8, #0x31
    5970:	cmp	w9, #0x8
    5974:	stp	w10, w8, [x20, #36]
    5978:	b.ls	5b74 <BZ2_decompress@@Base+0x37c>  // b.plast
    597c:	mov	w0, #0xfffffffb            	// #-5
    5980:	b	81b4 <BZ2_decompress@@Base+0x29bc>
    5984:	ldr	w8, [x20, #36]
    5988:	cmp	w8, #0x7
    598c:	b.gt	595c <BZ2_decompress@@Base+0x164>
    5990:	ldr	w9, [x25, #8]
    5994:	cbz	w9, 6ba0 <BZ2_decompress@@Base+0x13a8>
    5998:	ldr	x10, [x25]
    599c:	ldr	w11, [x20, #32]
    59a0:	add	w8, w8, #0x8
    59a4:	sub	w9, w9, #0x1
    59a8:	ldrb	w12, [x10], #1
    59ac:	bfi	w12, w11, #8, #24
    59b0:	stp	w12, w8, [x20, #32]
    59b4:	ldr	w8, [x25, #12]
    59b8:	str	x10, [x25]
    59bc:	adds	w8, w8, #0x1
    59c0:	stp	w9, w8, [x25, #8]
    59c4:	b.cc	5984 <BZ2_decompress@@Base+0x18c>  // b.lo, b.ul, b.last
    59c8:	ldr	w8, [x25, #16]
    59cc:	add	w8, w8, #0x1
    59d0:	str	w8, [x25, #16]
    59d4:	b	5984 <BZ2_decompress@@Base+0x18c>
    59d8:	ldr	w8, [x20, #36]
    59dc:	cmp	w8, #0x7
    59e0:	b.gt	592c <BZ2_decompress@@Base+0x134>
    59e4:	ldr	w9, [x25, #8]
    59e8:	cbz	w9, 6ba0 <BZ2_decompress@@Base+0x13a8>
    59ec:	ldr	x10, [x25]
    59f0:	ldr	w11, [x20, #32]
    59f4:	add	w8, w8, #0x8
    59f8:	sub	w9, w9, #0x1
    59fc:	ldrb	w12, [x10], #1
    5a00:	bfi	w12, w11, #8, #24
    5a04:	stp	w12, w8, [x20, #32]
    5a08:	ldr	w8, [x25, #12]
    5a0c:	str	x10, [x25]
    5a10:	adds	w8, w8, #0x1
    5a14:	stp	w9, w8, [x25, #8]
    5a18:	b.cc	59d8 <BZ2_decompress@@Base+0x1e0>  // b.lo, b.ul, b.last
    5a1c:	ldr	w8, [x25, #16]
    5a20:	add	w8, w8, #0x1
    5a24:	str	w8, [x25, #16]
    5a28:	b	59d8 <BZ2_decompress@@Base+0x1e0>
    5a2c:	ldr	w8, [x20, #36]
    5a30:	cmp	w8, #0x7
    5a34:	b.gt	58fc <BZ2_decompress@@Base+0x104>
    5a38:	ldr	w9, [x25, #8]
    5a3c:	cbz	w9, 6ba0 <BZ2_decompress@@Base+0x13a8>
    5a40:	ldr	x10, [x25]
    5a44:	ldr	w11, [x20, #32]
    5a48:	add	w8, w8, #0x8
    5a4c:	sub	w9, w9, #0x1
    5a50:	ldrb	w12, [x10], #1
    5a54:	bfi	w12, w11, #8, #24
    5a58:	stp	w12, w8, [x20, #32]
    5a5c:	ldr	w8, [x25, #12]
    5a60:	str	x10, [x25]
    5a64:	adds	w8, w8, #0x1
    5a68:	stp	w9, w8, [x25, #8]
    5a6c:	b.cc	5a2c <BZ2_decompress@@Base+0x234>  // b.lo, b.ul, b.last
    5a70:	ldr	w8, [x25, #16]
    5a74:	add	w8, w8, #0x1
    5a78:	str	w8, [x25, #16]
    5a7c:	b	5a2c <BZ2_decompress@@Base+0x234>
    5a80:	ldr	w8, [x20, #36]
    5a84:	cmp	w8, #0x7
    5a88:	b.gt	58cc <BZ2_decompress@@Base+0xd4>
    5a8c:	ldr	w9, [x25, #8]
    5a90:	cbz	w9, 6ba0 <BZ2_decompress@@Base+0x13a8>
    5a94:	ldr	x10, [x25]
    5a98:	ldr	w11, [x20, #32]
    5a9c:	add	w8, w8, #0x8
    5aa0:	sub	w9, w9, #0x1
    5aa4:	ldrb	w12, [x10], #1
    5aa8:	bfi	w12, w11, #8, #24
    5aac:	stp	w12, w8, [x20, #32]
    5ab0:	ldr	w8, [x25, #12]
    5ab4:	str	x10, [x25]
    5ab8:	adds	w8, w8, #0x1
    5abc:	stp	w9, w8, [x25, #8]
    5ac0:	b.cc	5a80 <BZ2_decompress@@Base+0x288>  // b.lo, b.ul, b.last
    5ac4:	ldr	w8, [x25, #16]
    5ac8:	add	w8, w8, #0x1
    5acc:	str	w8, [x25, #16]
    5ad0:	b	5a80 <BZ2_decompress@@Base+0x288>
    5ad4:	mov	w0, #0xfa1                 	// #4001
    5ad8:	str	w6, [sp, #44]
    5adc:	stur	w17, [x29, #-36]
    5ae0:	str	x23, [sp, #72]
    5ae4:	stp	w5, w4, [sp, #28]
    5ae8:	str	x24, [sp, #16]
    5aec:	stur	w21, [x29, #-60]
    5af0:	str	x28, [sp, #64]
    5af4:	stp	x26, x7, [x29, #-56]
    5af8:	stur	w19, [x29, #-40]
    5afc:	mov	x26, x27
    5b00:	mov	w27, w3
    5b04:	mov	w20, w30
    5b08:	mov	x25, x1
    5b0c:	mov	x19, x18
    5b10:	mov	w23, w15
    5b14:	mov	x24, x16
    5b18:	mov	w21, w2
    5b1c:	mov	x28, x14
    5b20:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    5b24:	mov	w0, #0xfa2                 	// #4002
    5b28:	bl	1740 <BZ2_bz__AssertH__fail@plt>
    5b2c:	mov	x14, x28
    5b30:	mov	w2, w21
    5b34:	mov	x16, x24
    5b38:	mov	w15, w23
    5b3c:	mov	x18, x19
    5b40:	mov	w3, w27
    5b44:	mov	x27, x26
    5b48:	ldp	x26, x7, [x29, #-56]
    5b4c:	ldp	w19, w17, [x29, #-40]
    5b50:	ldp	x28, x23, [sp, #64]
    5b54:	ldur	w21, [x29, #-60]
    5b58:	ldp	w5, w4, [sp, #28]
    5b5c:	ldr	x24, [sp, #16]
    5b60:	ldr	w6, [sp, #44]
    5b64:	mov	x1, x25
    5b68:	mov	w30, w20
    5b6c:	mov	w0, wzr
    5b70:	b	81b4 <BZ2_decompress@@Base+0x29bc>
    5b74:	sub	w9, w8, #0x30
    5b78:	stp	x28, x23, [sp, #64]
    5b7c:	str	w9, [x20, #40]
    5b80:	stur	x26, [x29, #-56]
    5b84:	ldur	w26, [x29, #-16]
    5b88:	ldrb	w10, [x20, #44]
    5b8c:	ldr	x8, [x25, #56]
    5b90:	ldr	x0, [x25, #72]
    5b94:	stur	w21, [x29, #-60]
    5b98:	str	x27, [sp, #56]
    5b9c:	mov	x27, x14
    5ba0:	mov	w21, w2
    5ba4:	mov	x28, x24
    5ba8:	mov	w24, w5
    5bac:	mov	w23, w4
    5bb0:	str	x16, [sp]
    5bb4:	str	w15, [sp, #8]
    5bb8:	str	x18, [sp, #48]
    5bbc:	str	x1, [sp, #32]
    5bc0:	stur	w19, [x29, #-40]
    5bc4:	str	w30, [sp, #16]
    5bc8:	stur	x7, [x29, #-48]
    5bcc:	str	w3, [sp, #28]
    5bd0:	stur	w17, [x29, #-36]
    5bd4:	str	w6, [sp, #44]
    5bd8:	cbz	w10, 5c78 <BZ2_decompress@@Base+0x480>
    5bdc:	mov	w10, #0xd40                 	// #3392
    5be0:	movk	w10, #0x3, lsl #16
    5be4:	mul	w1, w9, w10
    5be8:	mov	w2, #0x1                   	// #1
    5bec:	blr	x8
    5bf0:	ldr	w8, [x20, #40]
    5bf4:	str	x0, [x20, #3160]
    5bf8:	ldr	x9, [x25, #56]
    5bfc:	ldr	x0, [x25, #72]
    5c00:	mov	w10, #0x86a0                	// #34464
    5c04:	movk	w10, #0x1, lsl #16
    5c08:	mul	w8, w8, w10
    5c0c:	asr	w1, w8, #1
    5c10:	mov	w2, #0x1                   	// #1
    5c14:	blr	x9
    5c18:	mov	x8, x0
    5c1c:	str	x0, [x20, #3168]
    5c20:	mov	w0, #0xfffffffd            	// #-3
    5c24:	cbz	x8, 69d4 <BZ2_decompress@@Base+0x11dc>
    5c28:	ldr	x8, [x20, #3160]
    5c2c:	ldr	w6, [sp, #44]
    5c30:	mov	w4, w23
    5c34:	mov	w5, w24
    5c38:	mov	x24, x28
    5c3c:	mov	w2, w21
    5c40:	mov	x14, x27
    5c44:	ldp	w19, w17, [x29, #-40]
    5c48:	ldr	w3, [sp, #28]
    5c4c:	ldp	x26, x7, [x29, #-56]
    5c50:	ldp	x27, x28, [sp, #56]
    5c54:	ldr	w30, [sp, #16]
    5c58:	ldur	w21, [x29, #-60]
    5c5c:	ldr	x23, [sp, #72]
    5c60:	ldr	x1, [sp, #32]
    5c64:	ldr	x18, [sp, #48]
    5c68:	ldr	w15, [sp, #8]
    5c6c:	ldr	x16, [sp]
    5c70:	cbnz	x8, 5cd8 <BZ2_decompress@@Base+0x4e0>
    5c74:	b	81b4 <BZ2_decompress@@Base+0x29bc>
    5c78:	mov	w10, #0x1a80                	// #6784
    5c7c:	movk	w10, #0x6, lsl #16
    5c80:	mul	w1, w9, w10
    5c84:	mov	w2, #0x1                   	// #1
    5c88:	blr	x8
    5c8c:	str	x0, [x20, #3152]
    5c90:	ldr	w6, [sp, #44]
    5c94:	mov	w4, w23
    5c98:	mov	w5, w24
    5c9c:	mov	x24, x28
    5ca0:	mov	w2, w21
    5ca4:	mov	x14, x27
    5ca8:	ldp	w19, w17, [x29, #-40]
    5cac:	ldr	w3, [sp, #28]
    5cb0:	ldp	x26, x7, [x29, #-56]
    5cb4:	ldp	x27, x28, [sp, #56]
    5cb8:	ldr	w30, [sp, #16]
    5cbc:	ldur	w21, [x29, #-60]
    5cc0:	ldr	x23, [sp, #72]
    5cc4:	ldr	x1, [sp, #32]
    5cc8:	ldr	x18, [sp, #48]
    5ccc:	ldr	w15, [sp, #8]
    5cd0:	ldr	x16, [sp]
    5cd4:	cbz	x0, 69ec <BZ2_decompress@@Base+0x11f4>
    5cd8:	ldr	w9, [x20, #36]
    5cdc:	mov	w8, #0xe                   	// #14
    5ce0:	str	w8, [x20, #8]
    5ce4:	cmp	w9, #0x7
    5ce8:	b.le	6978 <BZ2_decompress@@Base+0x1180>
    5cec:	ldr	w8, [x20, #32]
    5cf0:	sub	w9, w9, #0x8
    5cf4:	str	w9, [x20, #36]
    5cf8:	lsr	w8, w8, w9
    5cfc:	and	w8, w8, #0xff
    5d00:	cmp	w8, #0x17
    5d04:	b.eq	613c <BZ2_decompress@@Base+0x944>  // b.none
    5d08:	cmp	w8, #0x31
    5d0c:	b.ne	81b0 <BZ2_decompress@@Base+0x29b8>  // b.any
    5d10:	ldr	w9, [x20, #36]
    5d14:	mov	w8, #0xf                   	// #15
    5d18:	str	w8, [x20, #8]
    5d1c:	cmp	w9, #0x7
    5d20:	b.le	68c0 <BZ2_decompress@@Base+0x10c8>
    5d24:	ldr	w8, [x20, #32]
    5d28:	sub	w9, w9, #0x8
    5d2c:	str	w9, [x20, #36]
    5d30:	lsr	w8, w8, w9
    5d34:	and	w8, w8, #0xff
    5d38:	cmp	w8, #0x41
    5d3c:	b.ne	81b0 <BZ2_decompress@@Base+0x29b8>  // b.any
    5d40:	ldr	w9, [x20, #36]
    5d44:	mov	w8, #0x10                  	// #16
    5d48:	str	w8, [x20, #8]
    5d4c:	cmp	w9, #0x7
    5d50:	b.le	6808 <BZ2_decompress@@Base+0x1010>
    5d54:	ldr	w8, [x20, #32]
    5d58:	sub	w9, w9, #0x8
    5d5c:	str	w9, [x20, #36]
    5d60:	lsr	w8, w8, w9
    5d64:	and	w8, w8, #0xff
    5d68:	cmp	w8, #0x59
    5d6c:	b.ne	81b0 <BZ2_decompress@@Base+0x29b8>  // b.any
    5d70:	ldr	w9, [x20, #36]
    5d74:	mov	w8, #0x11                  	// #17
    5d78:	str	w8, [x20, #8]
    5d7c:	cmp	w9, #0x7
    5d80:	b.le	6750 <BZ2_decompress@@Base+0xf58>
    5d84:	ldr	w8, [x20, #32]
    5d88:	sub	w9, w9, #0x8
    5d8c:	str	w9, [x20, #36]
    5d90:	lsr	w8, w8, w9
    5d94:	and	w8, w8, #0xff
    5d98:	cmp	w8, #0x26
    5d9c:	b.ne	81b0 <BZ2_decompress@@Base+0x29b8>  // b.any
    5da0:	ldr	w9, [x20, #36]
    5da4:	mov	w8, #0x12                  	// #18
    5da8:	str	w8, [x20, #8]
    5dac:	cmp	w9, #0x7
    5db0:	b.le	6698 <BZ2_decompress@@Base+0xea0>
    5db4:	ldr	w8, [x20, #32]
    5db8:	sub	w9, w9, #0x8
    5dbc:	str	w9, [x20, #36]
    5dc0:	lsr	w8, w8, w9
    5dc4:	and	w8, w8, #0xff
    5dc8:	cmp	w8, #0x53
    5dcc:	b.ne	81b0 <BZ2_decompress@@Base+0x29b8>  // b.any
    5dd0:	ldr	w9, [x20, #36]
    5dd4:	mov	w8, #0x13                  	// #19
    5dd8:	str	w8, [x20, #8]
    5ddc:	cmp	w9, #0x7
    5de0:	b.le	65e0 <BZ2_decompress@@Base+0xde8>
    5de4:	ldr	w8, [x20, #32]
    5de8:	sub	w9, w9, #0x8
    5dec:	str	w9, [x20, #36]
    5df0:	lsr	w8, w8, w9
    5df4:	and	w8, w8, #0xff
    5df8:	cmp	w8, #0x59
    5dfc:	b.ne	81b0 <BZ2_decompress@@Base+0x29b8>  // b.any
    5e00:	ldp	w8, w9, [x20, #48]
    5e04:	mov	w10, w2
    5e08:	add	w2, w8, #0x1
    5e0c:	cmp	w9, #0x2
    5e10:	str	w2, [x20, #48]
    5e14:	b.ge	69f4 <BZ2_decompress@@Base+0x11fc>  // b.tcont
    5e18:	mov	w2, w10
    5e1c:	str	wzr, [x20, #3176]
    5e20:	ldr	w9, [x20, #36]
    5e24:	mov	w8, #0x14                  	// #20
    5e28:	str	w8, [x20, #8]
    5e2c:	cmp	w9, #0x7
    5e30:	b.le	6528 <BZ2_decompress@@Base+0xd30>
    5e34:	ldr	w8, [x20, #32]
    5e38:	ldr	w10, [x20, #3176]
    5e3c:	sub	w9, w9, #0x8
    5e40:	str	w9, [x20, #36]
    5e44:	lsr	w8, w8, w9
    5e48:	bfi	w8, w10, #8, #24
    5e4c:	str	w8, [x20, #3176]
    5e50:	ldr	w9, [x20, #36]
    5e54:	mov	w8, #0x15                  	// #21
    5e58:	str	w8, [x20, #8]
    5e5c:	cmp	w9, #0x7
    5e60:	b.le	6470 <BZ2_decompress@@Base+0xc78>
    5e64:	ldr	w8, [x20, #32]
    5e68:	ldr	w10, [x20, #3176]
    5e6c:	sub	w9, w9, #0x8
    5e70:	str	w9, [x20, #36]
    5e74:	lsr	w8, w8, w9
    5e78:	bfi	w8, w10, #8, #24
    5e7c:	str	w8, [x20, #3176]
    5e80:	ldr	w9, [x20, #36]
    5e84:	mov	w8, #0x16                  	// #22
    5e88:	str	w8, [x20, #8]
    5e8c:	cmp	w9, #0x7
    5e90:	b.le	635c <BZ2_decompress@@Base+0xb64>
    5e94:	ldr	w8, [x20, #32]
    5e98:	ldr	w10, [x20, #3176]
    5e9c:	sub	w9, w9, #0x8
    5ea0:	str	w9, [x20, #36]
    5ea4:	lsr	w8, w8, w9
    5ea8:	bfi	w8, w10, #8, #24
    5eac:	str	w8, [x20, #3176]
    5eb0:	ldr	w9, [x20, #36]
    5eb4:	mov	w8, #0x17                  	// #23
    5eb8:	str	w8, [x20, #8]
    5ebc:	cmp	w9, #0x7
    5ec0:	b.le	60e0 <BZ2_decompress@@Base+0x8e8>
    5ec4:	ldr	w8, [x20, #32]
    5ec8:	ldr	w10, [x20, #3176]
    5ecc:	sub	w9, w9, #0x8
    5ed0:	str	w9, [x20, #36]
    5ed4:	lsr	w8, w8, w9
    5ed8:	bfi	w8, w10, #8, #24
    5edc:	str	w8, [x20, #3176]
    5ee0:	ldr	w9, [x20, #36]
    5ee4:	mov	w8, #0x18                  	// #24
    5ee8:	str	w8, [x20, #8]
    5eec:	cmp	w9, #0x0
    5ef0:	b.le	6414 <BZ2_decompress@@Base+0xc1c>
    5ef4:	ldr	w8, [x20, #32]
    5ef8:	sub	w9, w9, #0x1
    5efc:	str	w9, [x20, #36]
    5f00:	str	wzr, [x20, #56]
    5f04:	lsr	w8, w8, w9
    5f08:	and	w8, w8, #0x1
    5f0c:	strb	w8, [x20, #20]
    5f10:	ldr	w9, [x20, #36]
    5f14:	mov	w8, #0x19                  	// #25
    5f18:	str	w8, [x20, #8]
    5f1c:	cmp	w9, #0x7
    5f20:	b.le	6084 <BZ2_decompress@@Base+0x88c>
    5f24:	ldr	w8, [x20, #32]
    5f28:	ldr	w10, [x20, #56]
    5f2c:	sub	w9, w9, #0x8
    5f30:	str	w9, [x20, #36]
    5f34:	lsr	w8, w8, w9
    5f38:	bfi	w8, w10, #8, #24
    5f3c:	str	w8, [x20, #56]
    5f40:	ldr	w9, [x20, #36]
    5f44:	mov	w8, #0x1a                  	// #26
    5f48:	str	w8, [x20, #8]
    5f4c:	cmp	w9, #0x7
    5f50:	b.le	6028 <BZ2_decompress@@Base+0x830>
    5f54:	ldr	w8, [x20, #32]
    5f58:	ldr	w10, [x20, #56]
    5f5c:	sub	w9, w9, #0x8
    5f60:	str	w9, [x20, #36]
    5f64:	lsr	w8, w8, w9
    5f68:	bfi	w8, w10, #8, #24
    5f6c:	str	w8, [x20, #56]
    5f70:	ldr	w9, [x20, #36]
    5f74:	mov	w8, #0x1b                  	// #27
    5f78:	str	w8, [x20, #8]
    5f7c:	cmp	w9, #0x7
    5f80:	b.le	5fcc <BZ2_decompress@@Base+0x7d4>
    5f84:	ldr	w8, [x20, #32]
    5f88:	ldr	w10, [x20, #56]
    5f8c:	sub	w9, w9, #0x8
    5f90:	str	w9, [x20, #36]
    5f94:	lsr	w8, w8, w9
    5f98:	bfi	w8, w10, #8, #24
    5f9c:	str	w8, [x20, #56]
    5fa0:	tbnz	w8, #31, 81b0 <BZ2_decompress@@Base+0x29b8>
    5fa4:	ldr	w9, [x20, #40]
    5fa8:	mov	w10, #0x86a0                	// #34464
    5fac:	movk	w10, #0x1, lsl #16
    5fb0:	mul	w9, w9, w10
    5fb4:	mov	w10, #0xa                   	// #10
    5fb8:	orr	w9, w9, w10
    5fbc:	cmp	w8, w9
    5fc0:	b.gt	81b0 <BZ2_decompress@@Base+0x29b8>
    5fc4:	mov	w16, wzr
    5fc8:	b	6a98 <BZ2_decompress@@Base+0x12a0>
    5fcc:	ldr	x8, [x20]
    5fd0:	b	5fe0 <BZ2_decompress@@Base+0x7e8>
    5fd4:	ldr	w9, [x20, #36]
    5fd8:	cmp	w9, #0x7
    5fdc:	b.gt	5f84 <BZ2_decompress@@Base+0x78c>
    5fe0:	ldr	w10, [x8, #8]
    5fe4:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    5fe8:	ldr	x11, [x8]
    5fec:	ldr	w12, [x20, #32]
    5ff0:	add	w9, w9, #0x8
    5ff4:	sub	w10, w10, #0x1
    5ff8:	ldrb	w13, [x11], #1
    5ffc:	bfi	w13, w12, #8, #24
    6000:	stp	w13, w9, [x20, #32]
    6004:	ldr	w9, [x8, #12]
    6008:	str	x11, [x8]
    600c:	adds	w9, w9, #0x1
    6010:	stp	w10, w9, [x8, #8]
    6014:	b.cc	5fd4 <BZ2_decompress@@Base+0x7dc>  // b.lo, b.ul, b.last
    6018:	ldr	w9, [x8, #16]
    601c:	add	w9, w9, #0x1
    6020:	str	w9, [x8, #16]
    6024:	b	5fd4 <BZ2_decompress@@Base+0x7dc>
    6028:	ldr	x8, [x20]
    602c:	b	603c <BZ2_decompress@@Base+0x844>
    6030:	ldr	w9, [x20, #36]
    6034:	cmp	w9, #0x7
    6038:	b.gt	5f54 <BZ2_decompress@@Base+0x75c>
    603c:	ldr	w10, [x8, #8]
    6040:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    6044:	ldr	x11, [x8]
    6048:	ldr	w12, [x20, #32]
    604c:	add	w9, w9, #0x8
    6050:	sub	w10, w10, #0x1
    6054:	ldrb	w13, [x11], #1
    6058:	bfi	w13, w12, #8, #24
    605c:	stp	w13, w9, [x20, #32]
    6060:	ldr	w9, [x8, #12]
    6064:	str	x11, [x8]
    6068:	adds	w9, w9, #0x1
    606c:	stp	w10, w9, [x8, #8]
    6070:	b.cc	6030 <BZ2_decompress@@Base+0x838>  // b.lo, b.ul, b.last
    6074:	ldr	w9, [x8, #16]
    6078:	add	w9, w9, #0x1
    607c:	str	w9, [x8, #16]
    6080:	b	6030 <BZ2_decompress@@Base+0x838>
    6084:	ldr	x8, [x20]
    6088:	b	6098 <BZ2_decompress@@Base+0x8a0>
    608c:	ldr	w9, [x20, #36]
    6090:	cmp	w9, #0x7
    6094:	b.gt	5f24 <BZ2_decompress@@Base+0x72c>
    6098:	ldr	w10, [x8, #8]
    609c:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    60a0:	ldr	x11, [x8]
    60a4:	ldr	w12, [x20, #32]
    60a8:	add	w9, w9, #0x8
    60ac:	sub	w10, w10, #0x1
    60b0:	ldrb	w13, [x11], #1
    60b4:	bfi	w13, w12, #8, #24
    60b8:	stp	w13, w9, [x20, #32]
    60bc:	ldr	w9, [x8, #12]
    60c0:	str	x11, [x8]
    60c4:	adds	w9, w9, #0x1
    60c8:	stp	w10, w9, [x8, #8]
    60cc:	b.cc	608c <BZ2_decompress@@Base+0x894>  // b.lo, b.ul, b.last
    60d0:	ldr	w9, [x8, #16]
    60d4:	add	w9, w9, #0x1
    60d8:	str	w9, [x8, #16]
    60dc:	b	608c <BZ2_decompress@@Base+0x894>
    60e0:	ldr	x8, [x20]
    60e4:	b	60f4 <BZ2_decompress@@Base+0x8fc>
    60e8:	ldr	w9, [x20, #36]
    60ec:	cmp	w9, #0x7
    60f0:	b.gt	5ec4 <BZ2_decompress@@Base+0x6cc>
    60f4:	ldr	w10, [x8, #8]
    60f8:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    60fc:	ldr	x11, [x8]
    6100:	ldr	w12, [x20, #32]
    6104:	add	w9, w9, #0x8
    6108:	sub	w10, w10, #0x1
    610c:	ldrb	w13, [x11], #1
    6110:	bfi	w13, w12, #8, #24
    6114:	stp	w13, w9, [x20, #32]
    6118:	ldr	w9, [x8, #12]
    611c:	str	x11, [x8]
    6120:	adds	w9, w9, #0x1
    6124:	stp	w10, w9, [x8, #8]
    6128:	b.cc	60e8 <BZ2_decompress@@Base+0x8f0>  // b.lo, b.ul, b.last
    612c:	ldr	w9, [x8, #16]
    6130:	add	w9, w9, #0x1
    6134:	str	w9, [x8, #16]
    6138:	b	60e8 <BZ2_decompress@@Base+0x8f0>
    613c:	ldr	w9, [x20, #36]
    6140:	mov	w8, #0x2a                  	// #42
    6144:	str	w8, [x20, #8]
    6148:	cmp	w9, #0x7
    614c:	b.le	691c <BZ2_decompress@@Base+0x1124>
    6150:	ldr	w8, [x20, #32]
    6154:	sub	w9, w9, #0x8
    6158:	str	w9, [x20, #36]
    615c:	lsr	w8, w8, w9
    6160:	and	w8, w8, #0xff
    6164:	cmp	w8, #0x72
    6168:	b.ne	81b0 <BZ2_decompress@@Base+0x29b8>  // b.any
    616c:	ldr	w9, [x20, #36]
    6170:	mov	w8, #0x2b                  	// #43
    6174:	str	w8, [x20, #8]
    6178:	cmp	w9, #0x7
    617c:	b.le	6864 <BZ2_decompress@@Base+0x106c>
    6180:	ldr	w8, [x20, #32]
    6184:	sub	w9, w9, #0x8
    6188:	str	w9, [x20, #36]
    618c:	lsr	w8, w8, w9
    6190:	and	w8, w8, #0xff
    6194:	cmp	w8, #0x45
    6198:	b.ne	81b0 <BZ2_decompress@@Base+0x29b8>  // b.any
    619c:	ldr	w9, [x20, #36]
    61a0:	mov	w8, #0x2c                  	// #44
    61a4:	str	w8, [x20, #8]
    61a8:	cmp	w9, #0x7
    61ac:	b.le	67ac <BZ2_decompress@@Base+0xfb4>
    61b0:	ldr	w8, [x20, #32]
    61b4:	sub	w9, w9, #0x8
    61b8:	str	w9, [x20, #36]
    61bc:	lsr	w8, w8, w9
    61c0:	and	w8, w8, #0xff
    61c4:	cmp	w8, #0x38
    61c8:	b.ne	81b0 <BZ2_decompress@@Base+0x29b8>  // b.any
    61cc:	ldr	w9, [x20, #36]
    61d0:	mov	w8, #0x2d                  	// #45
    61d4:	str	w8, [x20, #8]
    61d8:	cmp	w9, #0x7
    61dc:	b.le	66f4 <BZ2_decompress@@Base+0xefc>
    61e0:	ldr	w8, [x20, #32]
    61e4:	sub	w9, w9, #0x8
    61e8:	str	w9, [x20, #36]
    61ec:	lsr	w8, w8, w9
    61f0:	and	w8, w8, #0xff
    61f4:	cmp	w8, #0x50
    61f8:	b.ne	81b0 <BZ2_decompress@@Base+0x29b8>  // b.any
    61fc:	ldr	w9, [x20, #36]
    6200:	mov	w8, #0x2e                  	// #46
    6204:	str	w8, [x20, #8]
    6208:	cmp	w9, #0x7
    620c:	b.le	663c <BZ2_decompress@@Base+0xe44>
    6210:	ldr	w8, [x20, #32]
    6214:	sub	w9, w9, #0x8
    6218:	str	w9, [x20, #36]
    621c:	lsr	w8, w8, w9
    6220:	and	w8, w8, #0xff
    6224:	cmp	w8, #0x90
    6228:	b.ne	81b0 <BZ2_decompress@@Base+0x29b8>  // b.any
    622c:	str	wzr, [x20, #3180]
    6230:	ldr	w9, [x20, #36]
    6234:	mov	w8, #0x2f                  	// #47
    6238:	str	w8, [x20, #8]
    623c:	cmp	w9, #0x7
    6240:	b.le	6584 <BZ2_decompress@@Base+0xd8c>
    6244:	ldr	w8, [x20, #32]
    6248:	ldr	w10, [x20, #3180]
    624c:	sub	w9, w9, #0x8
    6250:	str	w9, [x20, #36]
    6254:	lsr	w8, w8, w9
    6258:	bfi	w8, w10, #8, #24
    625c:	str	w8, [x20, #3180]
    6260:	ldr	w9, [x20, #36]
    6264:	mov	w8, #0x30                  	// #48
    6268:	str	w8, [x20, #8]
    626c:	cmp	w9, #0x7
    6270:	b.le	64cc <BZ2_decompress@@Base+0xcd4>
    6274:	ldr	w8, [x20, #32]
    6278:	ldr	w10, [x20, #3180]
    627c:	sub	w9, w9, #0x8
    6280:	str	w9, [x20, #36]
    6284:	lsr	w8, w8, w9
    6288:	bfi	w8, w10, #8, #24
    628c:	str	w8, [x20, #3180]
    6290:	ldr	w9, [x20, #36]
    6294:	mov	w8, #0x31                  	// #49
    6298:	str	w8, [x20, #8]
    629c:	cmp	w9, #0x7
    62a0:	b.le	63b8 <BZ2_decompress@@Base+0xbc0>
    62a4:	ldr	w8, [x20, #32]
    62a8:	ldr	w10, [x20, #3180]
    62ac:	sub	w9, w9, #0x8
    62b0:	str	w9, [x20, #36]
    62b4:	lsr	w8, w8, w9
    62b8:	bfi	w8, w10, #8, #24
    62bc:	str	w8, [x20, #3180]
    62c0:	ldr	w9, [x20, #36]
    62c4:	mov	w8, #0x32                  	// #50
    62c8:	str	w8, [x20, #8]
    62cc:	cmp	w9, #0x7
    62d0:	b.le	6300 <BZ2_decompress@@Base+0xb08>
    62d4:	ldr	w8, [x20, #32]
    62d8:	ldr	w10, [x20, #3180]
    62dc:	sub	w9, w9, #0x8
    62e0:	mov	w11, #0x1                   	// #1
    62e4:	lsr	w8, w8, w9
    62e8:	bfi	w8, w10, #8, #24
    62ec:	str	w9, [x20, #36]
    62f0:	str	w11, [x20, #8]
    62f4:	str	w8, [x20, #3180]
    62f8:	mov	w0, #0x4                   	// #4
    62fc:	b	81b4 <BZ2_decompress@@Base+0x29bc>
    6300:	ldr	x8, [x20]
    6304:	b	6314 <BZ2_decompress@@Base+0xb1c>
    6308:	ldr	w9, [x20, #36]
    630c:	cmp	w9, #0x7
    6310:	b.gt	62d4 <BZ2_decompress@@Base+0xadc>
    6314:	ldr	w10, [x8, #8]
    6318:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    631c:	ldr	x11, [x8]
    6320:	ldr	w12, [x20, #32]
    6324:	add	w9, w9, #0x8
    6328:	sub	w10, w10, #0x1
    632c:	ldrb	w13, [x11], #1
    6330:	bfi	w13, w12, #8, #24
    6334:	stp	w13, w9, [x20, #32]
    6338:	ldr	w9, [x8, #12]
    633c:	str	x11, [x8]
    6340:	adds	w9, w9, #0x1
    6344:	stp	w10, w9, [x8, #8]
    6348:	b.cc	6308 <BZ2_decompress@@Base+0xb10>  // b.lo, b.ul, b.last
    634c:	ldr	w9, [x8, #16]
    6350:	add	w9, w9, #0x1
    6354:	str	w9, [x8, #16]
    6358:	b	6308 <BZ2_decompress@@Base+0xb10>
    635c:	ldr	x8, [x20]
    6360:	b	6370 <BZ2_decompress@@Base+0xb78>
    6364:	ldr	w9, [x20, #36]
    6368:	cmp	w9, #0x7
    636c:	b.gt	5e94 <BZ2_decompress@@Base+0x69c>
    6370:	ldr	w10, [x8, #8]
    6374:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    6378:	ldr	x11, [x8]
    637c:	ldr	w12, [x20, #32]
    6380:	add	w9, w9, #0x8
    6384:	sub	w10, w10, #0x1
    6388:	ldrb	w13, [x11], #1
    638c:	bfi	w13, w12, #8, #24
    6390:	stp	w13, w9, [x20, #32]
    6394:	ldr	w9, [x8, #12]
    6398:	str	x11, [x8]
    639c:	adds	w9, w9, #0x1
    63a0:	stp	w10, w9, [x8, #8]
    63a4:	b.cc	6364 <BZ2_decompress@@Base+0xb6c>  // b.lo, b.ul, b.last
    63a8:	ldr	w9, [x8, #16]
    63ac:	add	w9, w9, #0x1
    63b0:	str	w9, [x8, #16]
    63b4:	b	6364 <BZ2_decompress@@Base+0xb6c>
    63b8:	ldr	x8, [x20]
    63bc:	b	63cc <BZ2_decompress@@Base+0xbd4>
    63c0:	ldr	w9, [x20, #36]
    63c4:	cmp	w9, #0x7
    63c8:	b.gt	62a4 <BZ2_decompress@@Base+0xaac>
    63cc:	ldr	w10, [x8, #8]
    63d0:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    63d4:	ldr	x11, [x8]
    63d8:	ldr	w12, [x20, #32]
    63dc:	add	w9, w9, #0x8
    63e0:	sub	w10, w10, #0x1
    63e4:	ldrb	w13, [x11], #1
    63e8:	bfi	w13, w12, #8, #24
    63ec:	stp	w13, w9, [x20, #32]
    63f0:	ldr	w9, [x8, #12]
    63f4:	str	x11, [x8]
    63f8:	adds	w9, w9, #0x1
    63fc:	stp	w10, w9, [x8, #8]
    6400:	b.cc	63c0 <BZ2_decompress@@Base+0xbc8>  // b.lo, b.ul, b.last
    6404:	ldr	w9, [x8, #16]
    6408:	add	w9, w9, #0x1
    640c:	str	w9, [x8, #16]
    6410:	b	63c0 <BZ2_decompress@@Base+0xbc8>
    6414:	ldr	x8, [x20]
    6418:	b	6428 <BZ2_decompress@@Base+0xc30>
    641c:	ldr	w9, [x20, #36]
    6420:	cmp	w9, #0x0
    6424:	b.gt	5ef4 <BZ2_decompress@@Base+0x6fc>
    6428:	ldr	w10, [x8, #8]
    642c:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    6430:	ldr	x11, [x8]
    6434:	ldr	w12, [x20, #32]
    6438:	add	w9, w9, #0x8
    643c:	sub	w10, w10, #0x1
    6440:	ldrb	w13, [x11], #1
    6444:	bfi	w13, w12, #8, #24
    6448:	stp	w13, w9, [x20, #32]
    644c:	ldr	w9, [x8, #12]
    6450:	str	x11, [x8]
    6454:	adds	w9, w9, #0x1
    6458:	stp	w10, w9, [x8, #8]
    645c:	b.cc	641c <BZ2_decompress@@Base+0xc24>  // b.lo, b.ul, b.last
    6460:	ldr	w9, [x8, #16]
    6464:	add	w9, w9, #0x1
    6468:	str	w9, [x8, #16]
    646c:	b	641c <BZ2_decompress@@Base+0xc24>
    6470:	ldr	x8, [x20]
    6474:	b	6484 <BZ2_decompress@@Base+0xc8c>
    6478:	ldr	w9, [x20, #36]
    647c:	cmp	w9, #0x7
    6480:	b.gt	5e64 <BZ2_decompress@@Base+0x66c>
    6484:	ldr	w10, [x8, #8]
    6488:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    648c:	ldr	x11, [x8]
    6490:	ldr	w12, [x20, #32]
    6494:	add	w9, w9, #0x8
    6498:	sub	w10, w10, #0x1
    649c:	ldrb	w13, [x11], #1
    64a0:	bfi	w13, w12, #8, #24
    64a4:	stp	w13, w9, [x20, #32]
    64a8:	ldr	w9, [x8, #12]
    64ac:	str	x11, [x8]
    64b0:	adds	w9, w9, #0x1
    64b4:	stp	w10, w9, [x8, #8]
    64b8:	b.cc	6478 <BZ2_decompress@@Base+0xc80>  // b.lo, b.ul, b.last
    64bc:	ldr	w9, [x8, #16]
    64c0:	add	w9, w9, #0x1
    64c4:	str	w9, [x8, #16]
    64c8:	b	6478 <BZ2_decompress@@Base+0xc80>
    64cc:	ldr	x8, [x20]
    64d0:	b	64e0 <BZ2_decompress@@Base+0xce8>
    64d4:	ldr	w9, [x20, #36]
    64d8:	cmp	w9, #0x7
    64dc:	b.gt	6274 <BZ2_decompress@@Base+0xa7c>
    64e0:	ldr	w10, [x8, #8]
    64e4:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    64e8:	ldr	x11, [x8]
    64ec:	ldr	w12, [x20, #32]
    64f0:	add	w9, w9, #0x8
    64f4:	sub	w10, w10, #0x1
    64f8:	ldrb	w13, [x11], #1
    64fc:	bfi	w13, w12, #8, #24
    6500:	stp	w13, w9, [x20, #32]
    6504:	ldr	w9, [x8, #12]
    6508:	str	x11, [x8]
    650c:	adds	w9, w9, #0x1
    6510:	stp	w10, w9, [x8, #8]
    6514:	b.cc	64d4 <BZ2_decompress@@Base+0xcdc>  // b.lo, b.ul, b.last
    6518:	ldr	w9, [x8, #16]
    651c:	add	w9, w9, #0x1
    6520:	str	w9, [x8, #16]
    6524:	b	64d4 <BZ2_decompress@@Base+0xcdc>
    6528:	ldr	x8, [x20]
    652c:	b	653c <BZ2_decompress@@Base+0xd44>
    6530:	ldr	w9, [x20, #36]
    6534:	cmp	w9, #0x7
    6538:	b.gt	5e34 <BZ2_decompress@@Base+0x63c>
    653c:	ldr	w10, [x8, #8]
    6540:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    6544:	ldr	x11, [x8]
    6548:	ldr	w12, [x20, #32]
    654c:	add	w9, w9, #0x8
    6550:	sub	w10, w10, #0x1
    6554:	ldrb	w13, [x11], #1
    6558:	bfi	w13, w12, #8, #24
    655c:	stp	w13, w9, [x20, #32]
    6560:	ldr	w9, [x8, #12]
    6564:	str	x11, [x8]
    6568:	adds	w9, w9, #0x1
    656c:	stp	w10, w9, [x8, #8]
    6570:	b.cc	6530 <BZ2_decompress@@Base+0xd38>  // b.lo, b.ul, b.last
    6574:	ldr	w9, [x8, #16]
    6578:	add	w9, w9, #0x1
    657c:	str	w9, [x8, #16]
    6580:	b	6530 <BZ2_decompress@@Base+0xd38>
    6584:	ldr	x8, [x20]
    6588:	b	6598 <BZ2_decompress@@Base+0xda0>
    658c:	ldr	w9, [x20, #36]
    6590:	cmp	w9, #0x7
    6594:	b.gt	6244 <BZ2_decompress@@Base+0xa4c>
    6598:	ldr	w10, [x8, #8]
    659c:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    65a0:	ldr	x11, [x8]
    65a4:	ldr	w12, [x20, #32]
    65a8:	add	w9, w9, #0x8
    65ac:	sub	w10, w10, #0x1
    65b0:	ldrb	w13, [x11], #1
    65b4:	bfi	w13, w12, #8, #24
    65b8:	stp	w13, w9, [x20, #32]
    65bc:	ldr	w9, [x8, #12]
    65c0:	str	x11, [x8]
    65c4:	adds	w9, w9, #0x1
    65c8:	stp	w10, w9, [x8, #8]
    65cc:	b.cc	658c <BZ2_decompress@@Base+0xd94>  // b.lo, b.ul, b.last
    65d0:	ldr	w9, [x8, #16]
    65d4:	add	w9, w9, #0x1
    65d8:	str	w9, [x8, #16]
    65dc:	b	658c <BZ2_decompress@@Base+0xd94>
    65e0:	ldr	x8, [x20]
    65e4:	b	65f4 <BZ2_decompress@@Base+0xdfc>
    65e8:	ldr	w9, [x20, #36]
    65ec:	cmp	w9, #0x7
    65f0:	b.gt	5de4 <BZ2_decompress@@Base+0x5ec>
    65f4:	ldr	w10, [x8, #8]
    65f8:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    65fc:	ldr	x11, [x8]
    6600:	ldr	w12, [x20, #32]
    6604:	add	w9, w9, #0x8
    6608:	sub	w10, w10, #0x1
    660c:	ldrb	w13, [x11], #1
    6610:	bfi	w13, w12, #8, #24
    6614:	stp	w13, w9, [x20, #32]
    6618:	ldr	w9, [x8, #12]
    661c:	str	x11, [x8]
    6620:	adds	w9, w9, #0x1
    6624:	stp	w10, w9, [x8, #8]
    6628:	b.cc	65e8 <BZ2_decompress@@Base+0xdf0>  // b.lo, b.ul, b.last
    662c:	ldr	w9, [x8, #16]
    6630:	add	w9, w9, #0x1
    6634:	str	w9, [x8, #16]
    6638:	b	65e8 <BZ2_decompress@@Base+0xdf0>
    663c:	ldr	x8, [x20]
    6640:	b	6650 <BZ2_decompress@@Base+0xe58>
    6644:	ldr	w9, [x20, #36]
    6648:	cmp	w9, #0x7
    664c:	b.gt	6210 <BZ2_decompress@@Base+0xa18>
    6650:	ldr	w10, [x8, #8]
    6654:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    6658:	ldr	x11, [x8]
    665c:	ldr	w12, [x20, #32]
    6660:	add	w9, w9, #0x8
    6664:	sub	w10, w10, #0x1
    6668:	ldrb	w13, [x11], #1
    666c:	bfi	w13, w12, #8, #24
    6670:	stp	w13, w9, [x20, #32]
    6674:	ldr	w9, [x8, #12]
    6678:	str	x11, [x8]
    667c:	adds	w9, w9, #0x1
    6680:	stp	w10, w9, [x8, #8]
    6684:	b.cc	6644 <BZ2_decompress@@Base+0xe4c>  // b.lo, b.ul, b.last
    6688:	ldr	w9, [x8, #16]
    668c:	add	w9, w9, #0x1
    6690:	str	w9, [x8, #16]
    6694:	b	6644 <BZ2_decompress@@Base+0xe4c>
    6698:	ldr	x8, [x20]
    669c:	b	66ac <BZ2_decompress@@Base+0xeb4>
    66a0:	ldr	w9, [x20, #36]
    66a4:	cmp	w9, #0x7
    66a8:	b.gt	5db4 <BZ2_decompress@@Base+0x5bc>
    66ac:	ldr	w10, [x8, #8]
    66b0:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    66b4:	ldr	x11, [x8]
    66b8:	ldr	w12, [x20, #32]
    66bc:	add	w9, w9, #0x8
    66c0:	sub	w10, w10, #0x1
    66c4:	ldrb	w13, [x11], #1
    66c8:	bfi	w13, w12, #8, #24
    66cc:	stp	w13, w9, [x20, #32]
    66d0:	ldr	w9, [x8, #12]
    66d4:	str	x11, [x8]
    66d8:	adds	w9, w9, #0x1
    66dc:	stp	w10, w9, [x8, #8]
    66e0:	b.cc	66a0 <BZ2_decompress@@Base+0xea8>  // b.lo, b.ul, b.last
    66e4:	ldr	w9, [x8, #16]
    66e8:	add	w9, w9, #0x1
    66ec:	str	w9, [x8, #16]
    66f0:	b	66a0 <BZ2_decompress@@Base+0xea8>
    66f4:	ldr	x8, [x20]
    66f8:	b	6708 <BZ2_decompress@@Base+0xf10>
    66fc:	ldr	w9, [x20, #36]
    6700:	cmp	w9, #0x7
    6704:	b.gt	61e0 <BZ2_decompress@@Base+0x9e8>
    6708:	ldr	w10, [x8, #8]
    670c:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    6710:	ldr	x11, [x8]
    6714:	ldr	w12, [x20, #32]
    6718:	add	w9, w9, #0x8
    671c:	sub	w10, w10, #0x1
    6720:	ldrb	w13, [x11], #1
    6724:	bfi	w13, w12, #8, #24
    6728:	stp	w13, w9, [x20, #32]
    672c:	ldr	w9, [x8, #12]
    6730:	str	x11, [x8]
    6734:	adds	w9, w9, #0x1
    6738:	stp	w10, w9, [x8, #8]
    673c:	b.cc	66fc <BZ2_decompress@@Base+0xf04>  // b.lo, b.ul, b.last
    6740:	ldr	w9, [x8, #16]
    6744:	add	w9, w9, #0x1
    6748:	str	w9, [x8, #16]
    674c:	b	66fc <BZ2_decompress@@Base+0xf04>
    6750:	ldr	x8, [x20]
    6754:	b	6764 <BZ2_decompress@@Base+0xf6c>
    6758:	ldr	w9, [x20, #36]
    675c:	cmp	w9, #0x7
    6760:	b.gt	5d84 <BZ2_decompress@@Base+0x58c>
    6764:	ldr	w10, [x8, #8]
    6768:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    676c:	ldr	x11, [x8]
    6770:	ldr	w12, [x20, #32]
    6774:	add	w9, w9, #0x8
    6778:	sub	w10, w10, #0x1
    677c:	ldrb	w13, [x11], #1
    6780:	bfi	w13, w12, #8, #24
    6784:	stp	w13, w9, [x20, #32]
    6788:	ldr	w9, [x8, #12]
    678c:	str	x11, [x8]
    6790:	adds	w9, w9, #0x1
    6794:	stp	w10, w9, [x8, #8]
    6798:	b.cc	6758 <BZ2_decompress@@Base+0xf60>  // b.lo, b.ul, b.last
    679c:	ldr	w9, [x8, #16]
    67a0:	add	w9, w9, #0x1
    67a4:	str	w9, [x8, #16]
    67a8:	b	6758 <BZ2_decompress@@Base+0xf60>
    67ac:	ldr	x8, [x20]
    67b0:	b	67c0 <BZ2_decompress@@Base+0xfc8>
    67b4:	ldr	w9, [x20, #36]
    67b8:	cmp	w9, #0x7
    67bc:	b.gt	61b0 <BZ2_decompress@@Base+0x9b8>
    67c0:	ldr	w10, [x8, #8]
    67c4:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    67c8:	ldr	x11, [x8]
    67cc:	ldr	w12, [x20, #32]
    67d0:	add	w9, w9, #0x8
    67d4:	sub	w10, w10, #0x1
    67d8:	ldrb	w13, [x11], #1
    67dc:	bfi	w13, w12, #8, #24
    67e0:	stp	w13, w9, [x20, #32]
    67e4:	ldr	w9, [x8, #12]
    67e8:	str	x11, [x8]
    67ec:	adds	w9, w9, #0x1
    67f0:	stp	w10, w9, [x8, #8]
    67f4:	b.cc	67b4 <BZ2_decompress@@Base+0xfbc>  // b.lo, b.ul, b.last
    67f8:	ldr	w9, [x8, #16]
    67fc:	add	w9, w9, #0x1
    6800:	str	w9, [x8, #16]
    6804:	b	67b4 <BZ2_decompress@@Base+0xfbc>
    6808:	ldr	x8, [x20]
    680c:	b	681c <BZ2_decompress@@Base+0x1024>
    6810:	ldr	w9, [x20, #36]
    6814:	cmp	w9, #0x7
    6818:	b.gt	5d54 <BZ2_decompress@@Base+0x55c>
    681c:	ldr	w10, [x8, #8]
    6820:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    6824:	ldr	x11, [x8]
    6828:	ldr	w12, [x20, #32]
    682c:	add	w9, w9, #0x8
    6830:	sub	w10, w10, #0x1
    6834:	ldrb	w13, [x11], #1
    6838:	bfi	w13, w12, #8, #24
    683c:	stp	w13, w9, [x20, #32]
    6840:	ldr	w9, [x8, #12]
    6844:	str	x11, [x8]
    6848:	adds	w9, w9, #0x1
    684c:	stp	w10, w9, [x8, #8]
    6850:	b.cc	6810 <BZ2_decompress@@Base+0x1018>  // b.lo, b.ul, b.last
    6854:	ldr	w9, [x8, #16]
    6858:	add	w9, w9, #0x1
    685c:	str	w9, [x8, #16]
    6860:	b	6810 <BZ2_decompress@@Base+0x1018>
    6864:	ldr	x8, [x20]
    6868:	b	6878 <BZ2_decompress@@Base+0x1080>
    686c:	ldr	w9, [x20, #36]
    6870:	cmp	w9, #0x7
    6874:	b.gt	6180 <BZ2_decompress@@Base+0x988>
    6878:	ldr	w10, [x8, #8]
    687c:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    6880:	ldr	x11, [x8]
    6884:	ldr	w12, [x20, #32]
    6888:	add	w9, w9, #0x8
    688c:	sub	w10, w10, #0x1
    6890:	ldrb	w13, [x11], #1
    6894:	bfi	w13, w12, #8, #24
    6898:	stp	w13, w9, [x20, #32]
    689c:	ldr	w9, [x8, #12]
    68a0:	str	x11, [x8]
    68a4:	adds	w9, w9, #0x1
    68a8:	stp	w10, w9, [x8, #8]
    68ac:	b.cc	686c <BZ2_decompress@@Base+0x1074>  // b.lo, b.ul, b.last
    68b0:	ldr	w9, [x8, #16]
    68b4:	add	w9, w9, #0x1
    68b8:	str	w9, [x8, #16]
    68bc:	b	686c <BZ2_decompress@@Base+0x1074>
    68c0:	ldr	x8, [x20]
    68c4:	b	68d4 <BZ2_decompress@@Base+0x10dc>
    68c8:	ldr	w9, [x20, #36]
    68cc:	cmp	w9, #0x7
    68d0:	b.gt	5d24 <BZ2_decompress@@Base+0x52c>
    68d4:	ldr	w10, [x8, #8]
    68d8:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    68dc:	ldr	x11, [x8]
    68e0:	ldr	w12, [x20, #32]
    68e4:	add	w9, w9, #0x8
    68e8:	sub	w10, w10, #0x1
    68ec:	ldrb	w13, [x11], #1
    68f0:	bfi	w13, w12, #8, #24
    68f4:	stp	w13, w9, [x20, #32]
    68f8:	ldr	w9, [x8, #12]
    68fc:	str	x11, [x8]
    6900:	adds	w9, w9, #0x1
    6904:	stp	w10, w9, [x8, #8]
    6908:	b.cc	68c8 <BZ2_decompress@@Base+0x10d0>  // b.lo, b.ul, b.last
    690c:	ldr	w9, [x8, #16]
    6910:	add	w9, w9, #0x1
    6914:	str	w9, [x8, #16]
    6918:	b	68c8 <BZ2_decompress@@Base+0x10d0>
    691c:	ldr	x8, [x20]
    6920:	b	6930 <BZ2_decompress@@Base+0x1138>
    6924:	ldr	w9, [x20, #36]
    6928:	cmp	w9, #0x7
    692c:	b.gt	6150 <BZ2_decompress@@Base+0x958>
    6930:	ldr	w10, [x8, #8]
    6934:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    6938:	ldr	x11, [x8]
    693c:	ldr	w12, [x20, #32]
    6940:	add	w9, w9, #0x8
    6944:	sub	w10, w10, #0x1
    6948:	ldrb	w13, [x11], #1
    694c:	bfi	w13, w12, #8, #24
    6950:	stp	w13, w9, [x20, #32]
    6954:	ldr	w9, [x8, #12]
    6958:	str	x11, [x8]
    695c:	adds	w9, w9, #0x1
    6960:	stp	w10, w9, [x8, #8]
    6964:	b.cc	6924 <BZ2_decompress@@Base+0x112c>  // b.lo, b.ul, b.last
    6968:	ldr	w9, [x8, #16]
    696c:	add	w9, w9, #0x1
    6970:	str	w9, [x8, #16]
    6974:	b	6924 <BZ2_decompress@@Base+0x112c>
    6978:	ldr	x8, [x20]
    697c:	b	698c <BZ2_decompress@@Base+0x1194>
    6980:	ldr	w9, [x20, #36]
    6984:	cmp	w9, #0x7
    6988:	b.gt	5cec <BZ2_decompress@@Base+0x4f4>
    698c:	ldr	w10, [x8, #8]
    6990:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    6994:	ldr	x11, [x8]
    6998:	ldr	w12, [x20, #32]
    699c:	add	w9, w9, #0x8
    69a0:	sub	w10, w10, #0x1
    69a4:	ldrb	w13, [x11], #1
    69a8:	bfi	w13, w12, #8, #24
    69ac:	stp	w13, w9, [x20, #32]
    69b0:	ldr	w9, [x8, #12]
    69b4:	str	x11, [x8]
    69b8:	adds	w9, w9, #0x1
    69bc:	stp	w10, w9, [x8, #8]
    69c0:	b.cc	6980 <BZ2_decompress@@Base+0x1188>  // b.lo, b.ul, b.last
    69c4:	ldr	w9, [x8, #16]
    69c8:	add	w9, w9, #0x1
    69cc:	str	w9, [x8, #16]
    69d0:	b	6980 <BZ2_decompress@@Base+0x1188>
    69d4:	ldr	w6, [sp, #44]
    69d8:	mov	w4, w23
    69dc:	mov	w5, w24
    69e0:	mov	x24, x28
    69e4:	mov	w2, w21
    69e8:	b	6de0 <BZ2_decompress@@Base+0x15e8>
    69ec:	mov	w0, #0xfffffffd            	// #-3
    69f0:	b	81b4 <BZ2_decompress@@Base+0x29bc>
    69f4:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    69f8:	ldr	x8, [x8, #4016]
    69fc:	str	x1, [sp, #32]
    6a00:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    6a04:	add	x1, x1, #0xf7a
    6a08:	ldr	x0, [x8]
    6a0c:	mov	w25, w6
    6a10:	stur	w17, [x29, #-36]
    6a14:	str	x23, [sp, #72]
    6a18:	mov	w23, w4
    6a1c:	stur	x7, [x29, #-48]
    6a20:	stp	x14, x24, [sp, #8]
    6a24:	str	w10, [sp, #44]
    6a28:	stp	x27, x28, [sp, #56]
    6a2c:	mov	w24, w5
    6a30:	stur	w19, [x29, #-40]
    6a34:	stur	x26, [x29, #-56]
    6a38:	mov	w26, w3
    6a3c:	stur	w21, [x29, #-60]
    6a40:	mov	w21, w30
    6a44:	mov	x27, x18
    6a48:	mov	w19, w15
    6a4c:	mov	x28, x16
    6a50:	bl	1750 <fprintf@plt>
    6a54:	mov	x16, x28
    6a58:	mov	w15, w19
    6a5c:	mov	x18, x27
    6a60:	ldr	x1, [sp, #32]
    6a64:	mov	w30, w21
    6a68:	ldur	w21, [x29, #-60]
    6a6c:	mov	w3, w26
    6a70:	ldp	x26, x7, [x29, #-56]
    6a74:	ldp	w19, w17, [x29, #-40]
    6a78:	mov	w5, w24
    6a7c:	ldp	x14, x24, [sp, #8]
    6a80:	ldp	x27, x28, [sp, #56]
    6a84:	ldr	w10, [sp, #44]
    6a88:	mov	w4, w23
    6a8c:	ldr	x23, [sp, #72]
    6a90:	mov	w6, w25
    6a94:	b	5e18 <BZ2_decompress@@Base+0x620>
    6a98:	cmp	w16, #0x10
    6a9c:	b.ge	6b34 <BZ2_decompress@@Base+0x133c>  // b.tcont
    6aa0:	ldr	w9, [x20, #36]
    6aa4:	mov	w8, #0x1c                  	// #28
    6aa8:	str	w8, [x20, #8]
    6aac:	cmp	w9, #0x0
    6ab0:	b.le	6ad8 <BZ2_decompress@@Base+0x12e0>
    6ab4:	ldr	w8, [x20, #32]
    6ab8:	sub	w9, w9, #0x1
    6abc:	add	x10, x20, w16, sxtw
    6ac0:	str	w9, [x20, #36]
    6ac4:	lsr	w8, w8, w9
    6ac8:	and	w8, w8, #0x1
    6acc:	strb	w8, [x10, #3452]
    6ad0:	add	w16, w16, #0x1
    6ad4:	b	6a98 <BZ2_decompress@@Base+0x12a0>
    6ad8:	ldr	x8, [x20]
    6adc:	b	6aec <BZ2_decompress@@Base+0x12f4>
    6ae0:	ldr	w9, [x20, #36]
    6ae4:	cmp	w9, #0x0
    6ae8:	b.gt	6ab4 <BZ2_decompress@@Base+0x12bc>
    6aec:	ldr	w10, [x8, #8]
    6af0:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    6af4:	ldr	x11, [x8]
    6af8:	ldr	w12, [x20, #32]
    6afc:	add	w9, w9, #0x8
    6b00:	sub	w10, w10, #0x1
    6b04:	ldrb	w13, [x11], #1
    6b08:	bfi	w13, w12, #8, #24
    6b0c:	stp	w13, w9, [x20, #32]
    6b10:	ldr	w9, [x8, #12]
    6b14:	str	x11, [x8]
    6b18:	adds	w9, w9, #0x1
    6b1c:	stp	w10, w9, [x8, #8]
    6b20:	b.cc	6ae0 <BZ2_decompress@@Base+0x12e8>  // b.lo, b.ul, b.last
    6b24:	ldr	w9, [x8, #16]
    6b28:	add	w9, w9, #0x1
    6b2c:	str	w9, [x8, #16]
    6b30:	b	6ae0 <BZ2_decompress@@Base+0x12e8>
    6b34:	stur	x26, [x29, #-56]
    6b38:	ldur	w26, [x29, #-16]
    6b3c:	stp	x28, x23, [sp, #64]
    6b40:	stur	w21, [x29, #-60]
    6b44:	str	x27, [sp, #56]
    6b48:	mov	x27, x14
    6b4c:	mov	w28, w2
    6b50:	mov	x21, x24
    6b54:	mov	w24, w5
    6b58:	mov	w23, w4
    6b5c:	mov	w25, w6
    6b60:	mov	w16, wzr
    6b64:	add	x8, x20, #0xc7c
    6b68:	movi	v0.2d, #0x0
    6b6c:	str	x18, [sp, #48]
    6b70:	stur	w19, [x29, #-40]
    6b74:	stur	x7, [x29, #-48]
    6b78:	stur	w17, [x29, #-36]
    6b7c:	stp	q0, q0, [x8, #224]
    6b80:	stp	q0, q0, [x8, #192]
    6b84:	stp	q0, q0, [x8, #160]
    6b88:	stp	q0, q0, [x8, #128]
    6b8c:	stp	q0, q0, [x8, #96]
    6b90:	stp	q0, q0, [x8, #64]
    6b94:	stp	q0, q0, [x8, #32]
    6b98:	stp	q0, q0, [x8]
    6b9c:	b	6ba8 <BZ2_decompress@@Base+0x13b0>
    6ba0:	mov	w0, wzr
    6ba4:	b	81b4 <BZ2_decompress@@Base+0x29bc>
    6ba8:	cmp	w16, #0xf
    6bac:	b.gt	6c30 <BZ2_decompress@@Base+0x1438>
    6bb0:	add	x8, x20, w16, sxtw
    6bb4:	ldrb	w8, [x8, #3452]
    6bb8:	cbz	w8, 6bfc <BZ2_decompress@@Base+0x1404>
    6bbc:	mov	w4, w23
    6bc0:	mov	w5, w24
    6bc4:	mov	x24, x21
    6bc8:	mov	w2, w28
    6bcc:	mov	x14, x27
    6bd0:	ldp	w19, w17, [x29, #-40]
    6bd4:	ldp	x26, x7, [x29, #-56]
    6bd8:	ldp	x27, x28, [sp, #56]
    6bdc:	ldur	w21, [x29, #-60]
    6be0:	ldr	x23, [sp, #72]
    6be4:	ldr	x18, [sp, #48]
    6be8:	mov	w30, wzr
    6bec:	mov	w6, w25
    6bf0:	cmp	w30, #0xf
    6bf4:	b.gt	6e60 <BZ2_decompress@@Base+0x1668>
    6bf8:	b	6e1c <BZ2_decompress@@Base+0x1624>
    6bfc:	mov	w4, w23
    6c00:	mov	w5, w24
    6c04:	mov	x24, x21
    6c08:	mov	w2, w28
    6c0c:	mov	x14, x27
    6c10:	ldp	w19, w17, [x29, #-40]
    6c14:	ldp	x26, x7, [x29, #-56]
    6c18:	ldp	x27, x28, [sp, #56]
    6c1c:	ldur	w21, [x29, #-60]
    6c20:	ldr	x23, [sp, #72]
    6c24:	ldr	x18, [sp, #48]
    6c28:	mov	w6, w25
    6c2c:	b	6e60 <BZ2_decompress@@Base+0x1668>
    6c30:	mov	x0, x20
    6c34:	str	x16, [sp]
    6c38:	str	w15, [sp, #8]
    6c3c:	str	x1, [sp, #32]
    6c40:	str	w30, [sp, #16]
    6c44:	str	w3, [sp, #28]
    6c48:	bl	82d0 <BZ2_decompress@@Base+0x2ad8>
    6c4c:	ldr	w8, [x20, #3192]
    6c50:	cbz	w8, 6dc8 <BZ2_decompress@@Base+0x15d0>
    6c54:	mov	w4, w23
    6c58:	mov	w5, w24
    6c5c:	mov	x24, x21
    6c60:	mov	w2, w28
    6c64:	mov	x14, x27
    6c68:	ldp	w19, w17, [x29, #-40]
    6c6c:	ldr	w3, [sp, #28]
    6c70:	ldp	x26, x7, [x29, #-56]
    6c74:	ldp	x27, x28, [sp, #56]
    6c78:	ldr	w30, [sp, #16]
    6c7c:	ldur	w21, [x29, #-60]
    6c80:	ldr	x23, [sp, #72]
    6c84:	ldr	x1, [sp, #32]
    6c88:	ldr	x18, [sp, #48]
    6c8c:	ldr	w15, [sp, #8]
    6c90:	ldr	x16, [sp]
    6c94:	add	w6, w8, #0x2
    6c98:	ldr	w9, [x20, #36]
    6c9c:	mov	w8, #0x1e                  	// #30
    6ca0:	str	w8, [x20, #8]
    6ca4:	cmp	w9, #0x2
    6ca8:	b.le	6d6c <BZ2_decompress@@Base+0x1574>
    6cac:	ldr	w8, [x20, #32]
    6cb0:	sub	w9, w9, #0x3
    6cb4:	str	w9, [x20, #36]
    6cb8:	lsr	w8, w8, w9
    6cbc:	and	w4, w8, #0x7
    6cc0:	cmp	w4, #0x7
    6cc4:	b.hi	6cdc <BZ2_decompress@@Base+0x14e4>  // b.pmore
    6cc8:	mov	w8, #0x1                   	// #1
    6ccc:	lsl	w8, w8, w4
    6cd0:	mov	w9, #0x83                  	// #131
    6cd4:	tst	w8, w9
    6cd8:	b.ne	81b0 <BZ2_decompress@@Base+0x29b8>  // b.any
    6cdc:	ldr	w9, [x20, #36]
    6ce0:	mov	w8, #0x1f                  	// #31
    6ce4:	str	w8, [x20, #8]
    6ce8:	cmp	w9, #0xe
    6cec:	b.le	6d10 <BZ2_decompress@@Base+0x1518>
    6cf0:	ldr	w8, [x20, #32]
    6cf4:	sub	w9, w9, #0xf
    6cf8:	str	w9, [x20, #36]
    6cfc:	lsr	w8, w8, w9
    6d00:	ands	w17, w8, #0x7fff
    6d04:	b.eq	81b0 <BZ2_decompress@@Base+0x29b8>  // b.none
    6d08:	mov	w16, wzr
    6d0c:	b	6f00 <BZ2_decompress@@Base+0x1708>
    6d10:	ldr	x8, [x20]
    6d14:	b	6d24 <BZ2_decompress@@Base+0x152c>
    6d18:	ldr	w9, [x20, #36]
    6d1c:	cmp	w9, #0xe
    6d20:	b.gt	6cf0 <BZ2_decompress@@Base+0x14f8>
    6d24:	ldr	w10, [x8, #8]
    6d28:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    6d2c:	ldr	x11, [x8]
    6d30:	ldr	w12, [x20, #32]
    6d34:	add	w9, w9, #0x8
    6d38:	sub	w10, w10, #0x1
    6d3c:	ldrb	w13, [x11], #1
    6d40:	bfi	w13, w12, #8, #24
    6d44:	stp	w13, w9, [x20, #32]
    6d48:	ldr	w9, [x8, #12]
    6d4c:	str	x11, [x8]
    6d50:	adds	w9, w9, #0x1
    6d54:	stp	w10, w9, [x8, #8]
    6d58:	b.cc	6d18 <BZ2_decompress@@Base+0x1520>  // b.lo, b.ul, b.last
    6d5c:	ldr	w9, [x8, #16]
    6d60:	add	w9, w9, #0x1
    6d64:	str	w9, [x8, #16]
    6d68:	b	6d18 <BZ2_decompress@@Base+0x1520>
    6d6c:	ldr	x8, [x20]
    6d70:	b	6d80 <BZ2_decompress@@Base+0x1588>
    6d74:	ldr	w9, [x20, #36]
    6d78:	cmp	w9, #0x2
    6d7c:	b.gt	6cac <BZ2_decompress@@Base+0x14b4>
    6d80:	ldr	w10, [x8, #8]
    6d84:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    6d88:	ldr	x11, [x8]
    6d8c:	ldr	w12, [x20, #32]
    6d90:	add	w9, w9, #0x8
    6d94:	sub	w10, w10, #0x1
    6d98:	ldrb	w13, [x11], #1
    6d9c:	bfi	w13, w12, #8, #24
    6da0:	stp	w13, w9, [x20, #32]
    6da4:	ldr	w9, [x8, #12]
    6da8:	str	x11, [x8]
    6dac:	adds	w9, w9, #0x1
    6db0:	stp	w10, w9, [x8, #8]
    6db4:	b.cc	6d74 <BZ2_decompress@@Base+0x157c>  // b.lo, b.ul, b.last
    6db8:	ldr	w9, [x8, #16]
    6dbc:	add	w9, w9, #0x1
    6dc0:	str	w9, [x8, #16]
    6dc4:	b	6d74 <BZ2_decompress@@Base+0x157c>
    6dc8:	mov	w0, #0xfffffffc            	// #-4
    6dcc:	mov	w6, w25
    6dd0:	mov	w4, w23
    6dd4:	mov	w5, w24
    6dd8:	mov	x24, x21
    6ddc:	mov	w2, w28
    6de0:	mov	x14, x27
    6de4:	mov	w9, w26
    6de8:	ldp	w19, w17, [x29, #-40]
    6dec:	ldr	w3, [sp, #28]
    6df0:	ldp	x26, x7, [x29, #-56]
    6df4:	ldr	x27, [sp, #56]
    6df8:	ldr	w30, [sp, #16]
    6dfc:	ldur	w21, [x29, #-60]
    6e00:	ldr	x23, [sp, #72]
    6e04:	ldr	x1, [sp, #32]
    6e08:	ldr	x28, [sp, #64]
    6e0c:	ldr	x18, [sp, #48]
    6e10:	ldr	w15, [sp, #8]
    6e14:	ldr	x16, [sp]
    6e18:	b	81b8 <BZ2_decompress@@Base+0x29c0>
    6e1c:	ldr	w9, [x20, #36]
    6e20:	mov	w8, #0x1d                  	// #29
    6e24:	str	w8, [x20, #8]
    6e28:	cmp	w9, #0x0
    6e2c:	b.le	6ea4 <BZ2_decompress@@Base+0x16ac>
    6e30:	ldr	w8, [x20, #32]
    6e34:	sub	w9, w9, #0x1
    6e38:	str	w9, [x20, #36]
    6e3c:	lsr	w8, w8, w9
    6e40:	tbz	w8, #0, 6e54 <BZ2_decompress@@Base+0x165c>
    6e44:	add	w8, w30, w16, lsl #4
    6e48:	add	x8, x20, w8, sxtw
    6e4c:	mov	w9, #0x1                   	// #1
    6e50:	strb	w9, [x8, #3196]
    6e54:	add	w30, w30, #0x1
    6e58:	cmp	w30, #0xf
    6e5c:	b.le	6e1c <BZ2_decompress@@Base+0x1624>
    6e60:	stur	x26, [x29, #-56]
    6e64:	ldur	w26, [x29, #-16]
    6e68:	str	x18, [sp, #48]
    6e6c:	stp	x28, x23, [sp, #64]
    6e70:	stur	w19, [x29, #-40]
    6e74:	stur	w21, [x29, #-60]
    6e78:	str	x27, [sp, #56]
    6e7c:	stur	x7, [x29, #-48]
    6e80:	stur	w17, [x29, #-36]
    6e84:	mov	x27, x14
    6e88:	mov	w28, w2
    6e8c:	mov	x21, x24
    6e90:	mov	w24, w5
    6e94:	mov	w23, w4
    6e98:	mov	w25, w6
    6e9c:	add	w16, w16, #0x1
    6ea0:	b	6ba8 <BZ2_decompress@@Base+0x13b0>
    6ea4:	ldr	x8, [x20]
    6ea8:	b	6eb8 <BZ2_decompress@@Base+0x16c0>
    6eac:	ldr	w9, [x20, #36]
    6eb0:	cmp	w9, #0x0
    6eb4:	b.gt	6e30 <BZ2_decompress@@Base+0x1638>
    6eb8:	ldr	w10, [x8, #8]
    6ebc:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    6ec0:	ldr	x11, [x8]
    6ec4:	ldr	w12, [x20, #32]
    6ec8:	add	w9, w9, #0x8
    6ecc:	sub	w10, w10, #0x1
    6ed0:	ldrb	w13, [x11], #1
    6ed4:	bfi	w13, w12, #8, #24
    6ed8:	stp	w13, w9, [x20, #32]
    6edc:	ldr	w9, [x8, #12]
    6ee0:	str	x11, [x8]
    6ee4:	adds	w9, w9, #0x1
    6ee8:	stp	w10, w9, [x8, #8]
    6eec:	b.cc	6eac <BZ2_decompress@@Base+0x16b4>  // b.lo, b.ul, b.last
    6ef0:	ldr	w9, [x8, #16]
    6ef4:	add	w9, w9, #0x1
    6ef8:	str	w9, [x8, #16]
    6efc:	b	6eac <BZ2_decompress@@Base+0x16b4>
    6f00:	cmp	w16, w17
    6f04:	b.ge	6fdc <BZ2_decompress@@Base+0x17e4>  // b.tcont
    6f08:	mov	w30, wzr
    6f0c:	mov	w8, #0x20                  	// #32
    6f10:	mov	w0, #0xfffffffc            	// #-4
    6f14:	ldr	w10, [x20, #36]
    6f18:	mov	x25, x14
    6f1c:	str	w8, [x20, #8]
    6f20:	cmp	w10, #0x0
    6f24:	b.le	6f50 <BZ2_decompress@@Base+0x1758>
    6f28:	ldr	w9, [x20, #32]
    6f2c:	sub	w10, w10, #0x1
    6f30:	str	w10, [x20, #36]
    6f34:	lsr	w9, w9, w10
    6f38:	tbz	w9, #0, 6fb8 <BZ2_decompress@@Base+0x17c0>
    6f3c:	add	w30, w30, #0x1
    6f40:	cmp	w30, w4
    6f44:	mov	x14, x25
    6f48:	b.lt	6f14 <BZ2_decompress@@Base+0x171c>  // b.tstop
    6f4c:	b	81b4 <BZ2_decompress@@Base+0x29bc>
    6f50:	ldr	x9, [x20]
    6f54:	b	6f64 <BZ2_decompress@@Base+0x176c>
    6f58:	ldr	w10, [x20, #36]
    6f5c:	cmp	w10, #0x0
    6f60:	b.gt	6f28 <BZ2_decompress@@Base+0x1730>
    6f64:	ldr	w11, [x9, #8]
    6f68:	cbz	w11, 6fac <BZ2_decompress@@Base+0x17b4>
    6f6c:	ldr	x12, [x9]
    6f70:	ldr	w13, [x20, #32]
    6f74:	add	w10, w10, #0x8
    6f78:	sub	w11, w11, #0x1
    6f7c:	ldrb	w14, [x12], #1
    6f80:	bfi	w14, w13, #8, #24
    6f84:	stp	w14, w10, [x20, #32]
    6f88:	ldr	w10, [x9, #12]
    6f8c:	str	x12, [x9]
    6f90:	adds	w10, w10, #0x1
    6f94:	stp	w11, w10, [x9, #8]
    6f98:	b.cc	6f58 <BZ2_decompress@@Base+0x1760>  // b.lo, b.ul, b.last
    6f9c:	ldr	w10, [x9, #16]
    6fa0:	add	w10, w10, #0x1
    6fa4:	str	w10, [x9, #16]
    6fa8:	b	6f58 <BZ2_decompress@@Base+0x1760>
    6fac:	mov	w0, wzr
    6fb0:	mov	x14, x25
    6fb4:	b	81b4 <BZ2_decompress@@Base+0x29bc>
    6fb8:	mov	w8, #0x4651                	// #18001
    6fbc:	cmp	w16, w8
    6fc0:	mov	x14, x25
    6fc4:	b.gt	6fd4 <BZ2_decompress@@Base+0x17dc>
    6fc8:	add	x8, x20, w16, sxtw
    6fcc:	mov	w9, #0x651e                	// #25886
    6fd0:	strb	w30, [x8, x9]
    6fd4:	add	w16, w16, #0x1
    6fd8:	b	6f00 <BZ2_decompress@@Base+0x1708>
    6fdc:	mov	w8, #0x4652                	// #18002
    6fe0:	cmp	w17, w8
    6fe4:	csel	w8, w17, w8, lt  // lt = tstop
    6fe8:	cmp	w4, #0x1
    6fec:	b.lt	700c <BZ2_decompress@@Base+0x1814>  // b.tstop
    6ff0:	mov	w9, wzr
    6ff4:	sub	x10, x29, #0x8
    6ff8:	and	x11, x9, #0xff
    6ffc:	strb	w9, [x10, x11]
    7000:	add	w9, w9, #0x1
    7004:	cmp	w4, w9, uxtb
    7008:	b.gt	6ff8 <BZ2_decompress@@Base+0x1800>
    700c:	cmp	w17, #0x1
    7010:	b.lt	709c <BZ2_decompress@@Base+0x18a4>  // b.tstop
    7014:	mov	w26, w2
    7018:	mov	w2, w15
    701c:	mov	x0, x18
    7020:	mov	x16, xzr
    7024:	sxtw	x9, w8
    7028:	mov	w10, #0x651e                	// #25886
    702c:	sub	x11, x29, #0x8
    7030:	mov	w12, #0x1ecc                	// #7884
    7034:	str	x14, [sp, #8]
    7038:	b	7054 <BZ2_decompress@@Base+0x185c>
    703c:	mov	x16, x25
    7040:	add	x16, x25, #0x1
    7044:	cmp	x16, x9
    7048:	sturb	w14, [x29, #-8]
    704c:	strb	w14, [x13, x12]
    7050:	b.ge	7088 <BZ2_decompress@@Base+0x1890>  // b.tcont
    7054:	add	x13, x20, x16
    7058:	ldrb	w15, [x13, x10]
    705c:	mov	x25, x16
    7060:	ldrb	w14, [x11, x15]
    7064:	cbz	x15, 703c <BZ2_decompress@@Base+0x1844>
    7068:	add	x16, x11, x15
    706c:	ldurb	w17, [x16, #-1]
    7070:	and	w18, w15, #0xff
    7074:	cmp	w18, #0x1
    7078:	sub	x15, x15, #0x1
    707c:	strb	w17, [x16]
    7080:	b.ne	7068 <BZ2_decompress@@Base+0x1870>  // b.any
    7084:	b	703c <BZ2_decompress@@Base+0x1844>
    7088:	ldr	x14, [sp, #8]
    708c:	mov	x18, x0
    7090:	mov	w15, w2
    7094:	mov	w2, w26
    7098:	b	70a0 <BZ2_decompress@@Base+0x18a8>
    709c:	mov	w16, wzr
    70a0:	mov	w26, wzr
    70a4:	mov	w17, w8
    70a8:	cmp	w26, w4
    70ac:	b.ge	7144 <BZ2_decompress@@Base+0x194c>  // b.tcont
    70b0:	ldr	w9, [x20, #36]
    70b4:	mov	w8, #0x21                  	// #33
    70b8:	str	w8, [x20, #8]
    70bc:	cmp	w9, #0x4
    70c0:	b.le	70e8 <BZ2_decompress@@Base+0x18f0>
    70c4:	ldr	w8, [x20, #32]
    70c8:	sub	w9, w9, #0x5
    70cc:	mov	w16, wzr
    70d0:	str	w9, [x20, #36]
    70d4:	lsr	w8, w8, w9
    70d8:	and	w0, w8, #0x1f
    70dc:	cmp	w16, w6
    70e0:	b.ge	7454 <BZ2_decompress@@Base+0x1c5c>  // b.tcont
    70e4:	b	73f8 <BZ2_decompress@@Base+0x1c00>
    70e8:	ldr	x8, [x20]
    70ec:	b	70fc <BZ2_decompress@@Base+0x1904>
    70f0:	ldr	w9, [x20, #36]
    70f4:	cmp	w9, #0x4
    70f8:	b.gt	70c4 <BZ2_decompress@@Base+0x18cc>
    70fc:	ldr	w10, [x8, #8]
    7100:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    7104:	ldr	x11, [x8]
    7108:	ldr	w12, [x20, #32]
    710c:	add	w9, w9, #0x8
    7110:	sub	w10, w10, #0x1
    7114:	ldrb	w13, [x11], #1
    7118:	bfi	w13, w12, #8, #24
    711c:	stp	w13, w9, [x20, #32]
    7120:	ldr	w9, [x8, #12]
    7124:	str	x11, [x8]
    7128:	adds	w9, w9, #0x1
    712c:	stp	w10, w9, [x8, #8]
    7130:	b.cc	70f0 <BZ2_decompress@@Base+0x18f8>  // b.lo, b.ul, b.last
    7134:	ldr	w9, [x8, #16]
    7138:	add	w9, w9, #0x1
    713c:	str	w9, [x8, #16]
    7140:	b	70f0 <BZ2_decompress@@Base+0x18f8>
    7144:	cmp	w4, #0x1
    7148:	str	x27, [sp, #56]
    714c:	stur	x7, [x29, #-48]
    7150:	stur	w17, [x29, #-36]
    7154:	stp	w5, w4, [sp, #28]
    7158:	str	w30, [sp, #16]
    715c:	str	w2, [sp, #44]
    7160:	str	x14, [sp, #8]
    7164:	stur	w19, [x29, #-40]
    7168:	b.lt	7240 <BZ2_decompress@@Base+0x1a48>  // b.tstop
    716c:	mov	w8, #0xab70                	// #43888
    7170:	mov	x26, xzr
    7174:	mov	w23, w4
    7178:	mov	w9, w6
    717c:	add	x25, x20, x8
    7180:	stur	x9, [x29, #-56]
    7184:	b	71f4 <BZ2_decompress@@Base+0x19fc>
    7188:	mov	w5, wzr
    718c:	mov	w21, #0x20                  	// #32
    7190:	mov	w8, #0x408                 	// #1032
    7194:	madd	x8, x26, x8, x20
    7198:	mov	w10, #0xb17c                	// #45436
    719c:	add	x0, x8, x10
    71a0:	mov	w10, #0xc9ac                	// #51628
    71a4:	mov	w9, #0x102                 	// #258
    71a8:	add	x1, x8, x10
    71ac:	mov	w10, #0xe1dc                	// #57820
    71b0:	madd	x9, x26, x9, x20
    71b4:	add	x2, x8, x10
    71b8:	mov	w8, #0xab70                	// #43888
    71bc:	add	x3, x9, x8
    71c0:	mov	w4, w21
    71c4:	mov	w27, w6
    71c8:	bl	15e0 <BZ2_hbCreateDecodeTables@plt>
    71cc:	add	x8, x20, x26, lsl #2
    71d0:	add	x26, x26, #0x1
    71d4:	mov	w6, w27
    71d8:	mov	w9, #0xfa0c                	// #64012
    71dc:	cmp	x26, x23
    71e0:	add	x25, x25, #0x102
    71e4:	mov	w3, w19
    71e8:	mov	x1, x28
    71ec:	str	w21, [x8, x9]
    71f0:	b.eq	7234 <BZ2_decompress@@Base+0x1a3c>  // b.none
    71f4:	mov	x28, x1
    71f8:	mov	w19, w3
    71fc:	cmp	w6, #0x1
    7200:	b.lt	7188 <BZ2_decompress@@Base+0x1990>  // b.tstop
    7204:	ldur	x8, [x29, #-56]
    7208:	mov	w5, wzr
    720c:	mov	w21, #0x20                  	// #32
    7210:	mov	x9, x25
    7214:	ldrb	w10, [x9], #1
    7218:	cmp	w5, w10
    721c:	csel	w5, w10, w5, cc  // cc = lo, ul, last
    7220:	cmp	w21, w10
    7224:	csel	w21, w10, w21, gt
    7228:	subs	x8, x8, #0x1
    722c:	b.ne	7214 <BZ2_decompress@@Base+0x1a1c>  // b.any
    7230:	b	7190 <BZ2_decompress@@Base+0x1998>
    7234:	mov	x25, x1
    7238:	mov	w19, w3
    723c:	b	7250 <BZ2_decompress@@Base+0x1a58>
    7240:	mov	x25, x1
    7244:	mov	w19, w3
    7248:	mov	w27, w6
    724c:	mov	w26, wzr
    7250:	ldr	w21, [x20, #3192]
    7254:	ldr	w23, [x20, #40]
    7258:	add	x0, x20, #0x44
    725c:	mov	w2, #0x400                 	// #1024
    7260:	mov	w1, wzr
    7264:	bl	1590 <memset@plt>
    7268:	ldr	w5, [sp, #28]
    726c:	ldur	w16, [x29, #-20]
    7270:	mov	w3, w19
    7274:	ldr	w30, [sp, #16]
    7278:	ldp	w19, w17, [x29, #-40]
    727c:	ldr	w2, [sp, #44]
    7280:	mov	w10, #0x86a0                	// #34464
    7284:	movk	w10, #0x1, lsl #16
    7288:	add	w21, w21, #0x1
    728c:	add	x8, x20, #0xe8c
    7290:	mov	w9, #0xfff                 	// #4095
    7294:	mov	w13, #0xf                   	// #15
    7298:	mul	w23, w23, w10
    729c:	mov	w10, #0xff                  	// #255
    72a0:	mov	x1, x25
    72a4:	mov	x12, xzr
    72a8:	mov	x11, x13
    72ac:	add	x13, x8, w9, sxtw
    72b0:	add	w14, w10, w12
    72b4:	strb	w14, [x13, x12]
    72b8:	sub	x12, x12, #0x1
    72bc:	cmn	w12, #0x10
    72c0:	b.ne	72b0 <BZ2_decompress@@Base+0x1ab8>  // b.any
    72c4:	add	w14, w9, w12
    72c8:	add	x15, x20, x11, lsl #2
    72cc:	sub	x13, x11, #0x1
    72d0:	add	x9, x12, w9, sxtw
    72d4:	add	w12, w14, #0x1
    72d8:	sub	x10, x10, #0x10
    72dc:	str	w12, [x15, #7820]
    72e0:	cbnz	x11, 72a4 <BZ2_decompress@@Base+0x1aac>
    72e4:	ldr	w4, [sp, #32]
    72e8:	cmp	w17, #0x1
    72ec:	mov	w6, w27
    72f0:	mov	w18, wzr
    72f4:	stur	w16, [x29, #-20]
    72f8:	b.lt	73d4 <BZ2_decompress@@Base+0x1bdc>  // b.tstop
    72fc:	mov	w8, #0x1ecc                	// #7884
    7300:	ldrb	w14, [x20, x8]
    7304:	mov	w9, #0xfa0c                	// #64012
    7308:	mov	w8, #0x408                 	// #1032
    730c:	mov	w11, #0xe1dc                	// #57820
    7310:	add	x12, x20, w14, uxtw #2
    7314:	ldr	w3, [x12, x9]
    7318:	umaddl	x8, w14, w8, x20
    731c:	add	x9, x8, x11
    7320:	mov	w10, #0xc9ac                	// #51628
    7324:	stur	x9, [x29, #-32]
    7328:	mov	w9, #0xb17c                	// #45436
    732c:	mov	w28, wzr
    7330:	add	x27, x8, x10
    7334:	add	x7, x8, x9
    7338:	mov	w16, #0x100                 	// #256
    733c:	mov	w15, #0x31                  	// #49
    7340:	mov	w1, w3
    7344:	ldr	w9, [x20, #36]
    7348:	mov	w8, #0x24                  	// #36
    734c:	str	w8, [x20, #8]
    7350:	cmp	w9, w1
    7354:	b.ge	73b4 <BZ2_decompress@@Base+0x1bbc>  // b.tcont
    7358:	ldr	x8, [x20]
    735c:	b	736c <BZ2_decompress@@Base+0x1b74>
    7360:	ldr	w9, [x20, #36]
    7364:	cmp	w9, w1
    7368:	b.ge	73b4 <BZ2_decompress@@Base+0x1bbc>  // b.tcont
    736c:	ldr	w10, [x8, #8]
    7370:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    7374:	ldr	x11, [x8]
    7378:	ldr	w12, [x20, #32]
    737c:	add	w9, w9, #0x8
    7380:	sub	w10, w10, #0x1
    7384:	ldrb	w13, [x11], #1
    7388:	bfi	w13, w12, #8, #24
    738c:	stp	w13, w9, [x20, #32]
    7390:	ldr	w9, [x8, #12]
    7394:	str	x11, [x8]
    7398:	adds	w9, w9, #0x1
    739c:	stp	w10, w9, [x8, #8]
    73a0:	b.cc	7360 <BZ2_decompress@@Base+0x1b68>  // b.lo, b.ul, b.last
    73a4:	ldr	w9, [x8, #16]
    73a8:	add	w9, w9, #0x1
    73ac:	str	w9, [x8, #16]
    73b0:	b	7360 <BZ2_decompress@@Base+0x1b68>
    73b4:	ldr	w8, [x20, #32]
    73b8:	sub	w9, w9, w1
    73bc:	mov	w10, #0xffffffff            	// #-1
    73c0:	lsl	w10, w10, w1
    73c4:	lsr	w8, w8, w9
    73c8:	bic	w0, w8, w10
    73cc:	str	w9, [x20, #36]
    73d0:	b	7560 <BZ2_decompress@@Base+0x1d68>
    73d4:	ldur	w9, [x29, #-16]
    73d8:	ldur	x7, [x29, #-48]
    73dc:	ldr	x27, [sp, #56]
    73e0:	ldr	x14, [sp, #8]
    73e4:	mov	w15, wzr
    73e8:	mov	w28, wzr
    73ec:	mov	w0, #0xfffffffc            	// #-4
    73f0:	mov	w16, #0x100                 	// #256
    73f4:	b	81b8 <BZ2_decompress@@Base+0x29c0>
    73f8:	sub	w8, w0, #0x1
    73fc:	cmp	w8, #0x13
    7400:	b.hi	7558 <BZ2_decompress@@Base+0x1d60>  // b.pmore
    7404:	stur	w0, [x29, #-20]
    7408:	ldr	w9, [x20, #36]
    740c:	mov	w8, #0x22                  	// #34
    7410:	str	w8, [x20, #8]
    7414:	cmp	w9, #0x0
    7418:	b.le	749c <BZ2_decompress@@Base+0x1ca4>
    741c:	ldur	w0, [x29, #-20]
    7420:	ldr	w8, [x20, #32]
    7424:	sub	w9, w9, #0x1
    7428:	str	w9, [x20, #36]
    742c:	lsr	w8, w8, w9
    7430:	tbnz	w8, #0, 7460 <BZ2_decompress@@Base+0x1c68>
    7434:	mov	w8, #0x102                 	// #258
    7438:	smaddl	x8, w26, w8, x20
    743c:	mov	w9, #0xab70                	// #43888
    7440:	add	x8, x8, w16, sxtw
    7444:	strb	w0, [x8, x9]
    7448:	add	w16, w16, #0x1
    744c:	cmp	w16, w6
    7450:	b.lt	73f8 <BZ2_decompress@@Base+0x1c00>  // b.tstop
    7454:	stur	w0, [x29, #-20]
    7458:	add	w26, w26, #0x1
    745c:	b	70a8 <BZ2_decompress@@Base+0x18b0>
    7460:	ldr	w9, [x20, #36]
    7464:	ldur	w0, [x29, #-20]
    7468:	mov	w8, #0x23                  	// #35
    746c:	str	w8, [x20, #8]
    7470:	cmp	w9, #0x0
    7474:	b.le	74fc <BZ2_decompress@@Base+0x1d04>
    7478:	ldr	w8, [x20, #32]
    747c:	sub	w9, w9, #0x1
    7480:	str	w9, [x20, #36]
    7484:	lsr	w8, w8, w9
    7488:	tst	w8, #0x1
    748c:	mov	w8, #0x1                   	// #1
    7490:	cneg	w8, w8, ne  // ne = any
    7494:	add	w0, w8, w0
    7498:	b	73f8 <BZ2_decompress@@Base+0x1c00>
    749c:	ldr	x8, [x20]
    74a0:	ldur	w0, [x29, #-20]
    74a4:	b	74b4 <BZ2_decompress@@Base+0x1cbc>
    74a8:	ldr	w9, [x20, #36]
    74ac:	cmp	w9, #0x0
    74b0:	b.gt	7420 <BZ2_decompress@@Base+0x1c28>
    74b4:	ldr	w10, [x8, #8]
    74b8:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    74bc:	ldr	x11, [x8]
    74c0:	ldr	w12, [x20, #32]
    74c4:	add	w9, w9, #0x8
    74c8:	sub	w10, w10, #0x1
    74cc:	ldrb	w13, [x11], #1
    74d0:	bfi	w13, w12, #8, #24
    74d4:	stp	w13, w9, [x20, #32]
    74d8:	ldr	w9, [x8, #12]
    74dc:	str	x11, [x8]
    74e0:	adds	w9, w9, #0x1
    74e4:	stp	w10, w9, [x8, #8]
    74e8:	b.cc	74a8 <BZ2_decompress@@Base+0x1cb0>  // b.lo, b.ul, b.last
    74ec:	ldr	w9, [x8, #16]
    74f0:	add	w9, w9, #0x1
    74f4:	str	w9, [x8, #16]
    74f8:	b	74a8 <BZ2_decompress@@Base+0x1cb0>
    74fc:	ldr	x8, [x20]
    7500:	b	7510 <BZ2_decompress@@Base+0x1d18>
    7504:	ldr	w9, [x20, #36]
    7508:	cmp	w9, #0x0
    750c:	b.gt	7478 <BZ2_decompress@@Base+0x1c80>
    7510:	ldr	w10, [x8, #8]
    7514:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    7518:	ldr	x11, [x8]
    751c:	ldr	w12, [x20, #32]
    7520:	add	w9, w9, #0x8
    7524:	sub	w10, w10, #0x1
    7528:	ldrb	w13, [x11], #1
    752c:	bfi	w13, w12, #8, #24
    7530:	stp	w13, w9, [x20, #32]
    7534:	ldr	w9, [x8, #12]
    7538:	str	x11, [x8]
    753c:	adds	w9, w9, #0x1
    7540:	stp	w10, w9, [x8, #8]
    7544:	b.cc	7504 <BZ2_decompress@@Base+0x1d0c>  // b.lo, b.ul, b.last
    7548:	ldr	w9, [x8, #16]
    754c:	add	w9, w9, #0x1
    7550:	str	w9, [x8, #16]
    7554:	b	7504 <BZ2_decompress@@Base+0x1d0c>
    7558:	stur	w0, [x29, #-20]
    755c:	b	81b0 <BZ2_decompress@@Base+0x29b8>
    7560:	cmp	w1, #0x14
    7564:	stur	w0, [x29, #-12]
    7568:	b.gt	81b0 <BZ2_decompress@@Base+0x29b8>
    756c:	ldr	w8, [x7, w1, sxtw #2]
    7570:	cmp	w0, w8
    7574:	b.le	7618 <BZ2_decompress@@Base+0x1e20>
    7578:	add	w1, w1, #0x1
    757c:	ldr	w9, [x20, #36]
    7580:	mov	w8, #0x25                  	// #37
    7584:	str	w8, [x20, #8]
    7588:	cmp	w9, #0x0
    758c:	b.le	75b8 <BZ2_decompress@@Base+0x1dc0>
    7590:	ldur	w0, [x29, #-12]
    7594:	ldr	w8, [x20, #32]
    7598:	sub	w9, w9, #0x1
    759c:	str	w9, [x20, #36]
    75a0:	lsr	w8, w8, w9
    75a4:	and	w10, w8, #0x1
    75a8:	bfi	w8, w0, #1, #31
    75ac:	stur	w10, [x29, #-16]
    75b0:	mov	w0, w8
    75b4:	b	7560 <BZ2_decompress@@Base+0x1d68>
    75b8:	ldr	x8, [x20]
    75bc:	ldur	w0, [x29, #-12]
    75c0:	b	75d0 <BZ2_decompress@@Base+0x1dd8>
    75c4:	ldr	w9, [x20, #36]
    75c8:	cmp	w9, #0x0
    75cc:	b.gt	7594 <BZ2_decompress@@Base+0x1d9c>
    75d0:	ldr	w10, [x8, #8]
    75d4:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    75d8:	ldr	x11, [x8]
    75dc:	ldr	w12, [x20, #32]
    75e0:	add	w9, w9, #0x8
    75e4:	sub	w10, w10, #0x1
    75e8:	ldrb	w13, [x11], #1
    75ec:	bfi	w13, w12, #8, #24
    75f0:	stp	w13, w9, [x20, #32]
    75f4:	ldr	w9, [x8, #12]
    75f8:	str	x11, [x8]
    75fc:	adds	w9, w9, #0x1
    7600:	stp	w10, w9, [x8, #8]
    7604:	b.cc	75c4 <BZ2_decompress@@Base+0x1dcc>  // b.lo, b.ul, b.last
    7608:	ldr	w9, [x8, #16]
    760c:	add	w9, w9, #0x1
    7610:	str	w9, [x8, #16]
    7614:	b	75c4 <BZ2_decompress@@Base+0x1dcc>
    7618:	sxtw	x8, w1
    761c:	ldr	w8, [x27, x8, lsl #2]
    7620:	sub	w8, w0, w8
    7624:	cmp	w8, #0x101
    7628:	b.hi	81b0 <BZ2_decompress@@Base+0x29b8>  // b.pmore
    762c:	ldur	x9, [x29, #-32]
    7630:	ldr	w24, [x9, w8, sxtw #2]
    7634:	cmp	w24, w21
    7638:	b.eq	7a7c <BZ2_decompress@@Base+0x2284>  // b.none
    763c:	subs	w9, w24, #0x1
    7640:	b.hi	7650 <BZ2_decompress@@Base+0x1e58>  // b.pmore
    7644:	mov	w19, #0xffffffff            	// #-1
    7648:	mov	w2, #0x1                   	// #1
    764c:	b	7958 <BZ2_decompress@@Base+0x2160>
    7650:	cmp	w18, w23
    7654:	stur	w0, [x29, #-12]
    7658:	b.ge	81b0 <BZ2_decompress@@Base+0x29b8>  // b.tcont
    765c:	sxtw	x8, w24
    7660:	sub	x11, x8, #0x1
    7664:	mov	x25, x14
    7668:	cmp	w11, #0xf
    766c:	b.hi	76f0 <BZ2_decompress@@Base+0x1ef8>  // b.pmore
    7670:	ldrsw	x9, [x20, #7820]
    7674:	cmp	w11, #0x4
    7678:	add	w8, w9, w11
    767c:	add	x8, x20, x8
    7680:	ldrb	w8, [x8, #3724]
    7684:	b.cc	76bc <BZ2_decompress@@Base+0x1ec4>  // b.lo, b.ul, b.last
    7688:	mov	w10, w24
    768c:	add	w11, w9, w10
    7690:	add	x12, x20, #0xe8c
    7694:	sub	w13, w11, #0x4
    7698:	sub	w11, w11, #0x5
    769c:	ldr	w14, [x12, w11, sxtw]
    76a0:	sub	w11, w10, #0x4
    76a4:	sub	w10, w10, #0x5
    76a8:	cmp	w10, #0x3
    76ac:	mov	w10, w11
    76b0:	str	w14, [x12, w13, sxtw]
    76b4:	b.hi	768c <BZ2_decompress@@Base+0x1e94>  // b.pmore
    76b8:	sub	w11, w11, #0x1
    76bc:	cbz	w11, 76e4 <BZ2_decompress@@Base+0x1eec>
    76c0:	neg	w10, w11
    76c4:	add	w11, w11, w9
    76c8:	sub	w12, w11, #0x1
    76cc:	add	x13, x20, #0xe8c
    76d0:	ldrb	w14, [x13, w12, uxtw]
    76d4:	adds	w10, w10, #0x1
    76d8:	strb	w14, [x13, w11, uxtw]
    76dc:	mov	w11, w12
    76e0:	b.cc	76c8 <BZ2_decompress@@Base+0x1ed0>  // b.lo, b.ul, b.last
    76e4:	add	x9, x20, x9
    76e8:	strb	w8, [x9, #3724]
    76ec:	b	7824 <BZ2_decompress@@Base+0x202c>
    76f0:	lsr	w10, w11, #4
    76f4:	add	x14, x20, w10, uxtw #2
    76f8:	ldrsw	x12, [x14, #7820]
    76fc:	and	x13, x11, #0xf
    7700:	mov	w11, #0x1e8c                	// #7820
    7704:	add	x11, x14, x11
    7708:	add	x8, x12, x13
    770c:	add	x8, x20, x8
    7710:	ldrb	w8, [x8, #3724]
    7714:	cbz	w13, 773c <BZ2_decompress@@Base+0x1f44>
    7718:	add	w12, w12, w13
    771c:	sxtw	x13, w12
    7720:	add	x12, x20, x13
    7724:	ldrb	w14, [x12, #3723]
    7728:	sub	x13, x13, #0x1
    772c:	strb	w14, [x12, #3724]
    7730:	ldrsw	x12, [x11]
    7734:	cmp	x13, x12
    7738:	b.gt	7720 <BZ2_decompress@@Base+0x1f28>
    773c:	add	w12, w12, #0x1
    7740:	mov	x14, x25
    7744:	str	w12, [x11]
    7748:	cbz	w10, 778c <BZ2_decompress@@Base+0x1f94>
    774c:	lsr	w10, w9, #4
    7750:	add	x9, x10, #0x1
    7754:	add	x10, x20, w10, uxtw #2
    7758:	mov	w11, #0x1e8c                	// #7820
    775c:	add	x10, x10, x11
    7760:	ldrsw	x11, [x10]
    7764:	add	x13, x20, #0xe8c
    7768:	sub	x9, x9, #0x1
    776c:	cmp	x9, #0x1
    7770:	sub	x11, x11, #0x1
    7774:	str	w11, [x10], #-4
    7778:	ldrsw	x12, [x10]
    777c:	add	x12, x12, x13
    7780:	ldrb	w12, [x12, #15]
    7784:	strb	w12, [x13, x11]
    7788:	b.gt	7760 <BZ2_decompress@@Base+0x1f68>
    778c:	ldrsw	x9, [x20, #7820]
    7790:	sub	x9, x9, #0x1
    7794:	str	w9, [x20, #7820]
    7798:	add	x9, x20, x9
    779c:	strb	w8, [x9, #3724]
    77a0:	ldr	w9, [x20, #7820]
    77a4:	cbnz	w9, 7828 <BZ2_decompress@@Base+0x2030>
    77a8:	str	w2, [sp, #44]
    77ac:	mov	x2, x16
    77b0:	mov	w0, w15
    77b4:	add	x9, x20, #0xe8c
    77b8:	mov	w10, #0xfff                 	// #4095
    77bc:	mov	w14, #0xf                   	// #15
    77c0:	mov	w11, #0x1e8c                	// #7820
    77c4:	mov	x12, x14
    77c8:	add	x14, x20, x14, lsl #2
    77cc:	mov	x13, xzr
    77d0:	add	x14, x14, x11
    77d4:	add	x15, x9, w10, sxtw
    77d8:	ldr	w16, [x14]
    77dc:	add	w16, w13, w16
    77e0:	add	w16, w16, #0xf
    77e4:	add	x16, x20, w16, sxtw
    77e8:	ldrb	w16, [x16, #3724]
    77ec:	strb	w16, [x15, x13]
    77f0:	sub	x13, x13, #0x1
    77f4:	cmn	w13, #0x10
    77f8:	b.ne	77d8 <BZ2_decompress@@Base+0x1fe0>  // b.any
    77fc:	add	w15, w10, w13
    7800:	add	x16, x20, x12, lsl #2
    7804:	sub	x14, x12, #0x1
    7808:	add	w15, w15, #0x1
    780c:	add	x10, x13, w10, sxtw
    7810:	str	w15, [x16, #7820]
    7814:	cbnz	x12, 77c4 <BZ2_decompress@@Base+0x1fcc>
    7818:	mov	x16, x2
    781c:	ldr	w2, [sp, #44]
    7820:	mov	w15, w0
    7824:	mov	x14, x25
    7828:	add	x8, x20, x8
    782c:	ldrb	w9, [x8, #3468]
    7830:	add	x9, x20, x9, lsl #2
    7834:	ldr	w10, [x9, #68]
    7838:	add	w10, w10, #0x1
    783c:	str	w10, [x9, #68]
    7840:	ldrb	w9, [x20, #44]
    7844:	ldrb	w8, [x8, #3468]
    7848:	cbz	w9, 7860 <BZ2_decompress@@Base+0x2068>
    784c:	ldr	x9, [x20, #3160]
    7850:	strh	w8, [x9, w18, sxtw #1]
    7854:	add	w18, w18, #0x1
    7858:	cbnz	w15, 78c0 <BZ2_decompress@@Base+0x20c8>
    785c:	b	7870 <BZ2_decompress@@Base+0x2078>
    7860:	ldr	x9, [x20, #3152]
    7864:	str	w8, [x9, w18, sxtw #2]
    7868:	add	w18, w18, #0x1
    786c:	cbnz	w15, 78c0 <BZ2_decompress@@Base+0x20c8>
    7870:	sxtw	x8, w28
    7874:	add	x28, x8, #0x1
    7878:	cmp	w28, w17
    787c:	b.ge	7a74 <BZ2_decompress@@Base+0x227c>  // b.tcont
    7880:	add	x8, x20, x28
    7884:	mov	w9, #0x1ecc                	// #7884
    7888:	ldrb	w14, [x8, x9]
    788c:	mov	w10, #0xfa0c                	// #64012
    7890:	mov	w8, #0x408                 	// #1032
    7894:	mov	w9, #0xb17c                	// #45436
    7898:	add	x12, x20, x14, lsl #2
    789c:	mov	w11, #0xe1dc                	// #57820
    78a0:	madd	x8, x14, x8, x20
    78a4:	ldr	w3, [x12, x10]
    78a8:	add	x7, x8, x9
    78ac:	add	x9, x8, x11
    78b0:	stur	x9, [x29, #-32]
    78b4:	mov	w9, #0xc9ac                	// #51628
    78b8:	add	x27, x8, x9
    78bc:	mov	w15, #0x32                  	// #50
    78c0:	sub	w15, w15, #0x1
    78c4:	mov	w1, w3
    78c8:	ldr	w9, [x20, #36]
    78cc:	mov	w8, #0x28                  	// #40
    78d0:	str	w8, [x20, #8]
    78d4:	cmp	w9, w1
    78d8:	b.ge	7938 <BZ2_decompress@@Base+0x2140>  // b.tcont
    78dc:	ldr	x8, [x20]
    78e0:	b	78f0 <BZ2_decompress@@Base+0x20f8>
    78e4:	ldr	w9, [x20, #36]
    78e8:	cmp	w9, w1
    78ec:	b.ge	7938 <BZ2_decompress@@Base+0x2140>  // b.tcont
    78f0:	ldr	w10, [x8, #8]
    78f4:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    78f8:	ldr	x11, [x8]
    78fc:	ldr	w12, [x20, #32]
    7900:	add	w9, w9, #0x8
    7904:	sub	w10, w10, #0x1
    7908:	ldrb	w13, [x11], #1
    790c:	bfi	w13, w12, #8, #24
    7910:	stp	w13, w9, [x20, #32]
    7914:	ldr	w9, [x8, #12]
    7918:	str	x11, [x8]
    791c:	adds	w9, w9, #0x1
    7920:	stp	w10, w9, [x8, #8]
    7924:	b.cc	78e4 <BZ2_decompress@@Base+0x20ec>  // b.lo, b.ul, b.last
    7928:	ldr	w9, [x8, #16]
    792c:	add	w9, w9, #0x1
    7930:	str	w9, [x8, #16]
    7934:	b	78e4 <BZ2_decompress@@Base+0x20ec>
    7938:	ldr	w8, [x20, #32]
    793c:	sub	w9, w9, w1
    7940:	mov	w10, #0xffffffff            	// #-1
    7944:	lsl	w10, w10, w1
    7948:	lsr	w8, w8, w9
    794c:	bic	w0, w8, w10
    7950:	str	w9, [x20, #36]
    7954:	b	821c <BZ2_decompress@@Base+0x2a24>
    7958:	cmp	w2, #0x200, lsl #12
    795c:	stur	w0, [x29, #-12]
    7960:	b.ge	81b0 <BZ2_decompress@@Base+0x29b8>  // b.tcont
    7964:	cmp	w24, #0x1
    7968:	b.eq	7980 <BZ2_decompress@@Base+0x2188>  // b.none
    796c:	cbnz	w24, 7974 <BZ2_decompress@@Base+0x217c>
    7970:	add	w19, w19, w2
    7974:	lsl	w2, w2, #1
    7978:	cbnz	w15, 79dc <BZ2_decompress@@Base+0x21e4>
    797c:	b	798c <BZ2_decompress@@Base+0x2194>
    7980:	add	w19, w19, w2, lsl #1
    7984:	lsl	w2, w2, #1
    7988:	cbnz	w15, 79dc <BZ2_decompress@@Base+0x21e4>
    798c:	sxtw	x8, w28
    7990:	add	x28, x8, #0x1
    7994:	cmp	w28, w17
    7998:	b.ge	7a74 <BZ2_decompress@@Base+0x227c>  // b.tcont
    799c:	add	x8, x20, x28
    79a0:	mov	w9, #0x1ecc                	// #7884
    79a4:	ldrb	w14, [x8, x9]
    79a8:	mov	w10, #0xfa0c                	// #64012
    79ac:	mov	w8, #0x408                 	// #1032
    79b0:	mov	w9, #0xb17c                	// #45436
    79b4:	add	x12, x20, x14, lsl #2
    79b8:	mov	w11, #0xe1dc                	// #57820
    79bc:	madd	x8, x14, x8, x20
    79c0:	ldr	w3, [x12, x10]
    79c4:	add	x7, x8, x9
    79c8:	add	x9, x8, x11
    79cc:	stur	x9, [x29, #-32]
    79d0:	mov	w9, #0xc9ac                	// #51628
    79d4:	add	x27, x8, x9
    79d8:	mov	w15, #0x32                  	// #50
    79dc:	sub	w15, w15, #0x1
    79e0:	mov	w1, w3
    79e4:	ldr	w9, [x20, #36]
    79e8:	mov	w8, #0x26                  	// #38
    79ec:	str	w8, [x20, #8]
    79f0:	cmp	w9, w1
    79f4:	b.ge	7a54 <BZ2_decompress@@Base+0x225c>  // b.tcont
    79f8:	ldr	x8, [x20]
    79fc:	b	7a0c <BZ2_decompress@@Base+0x2214>
    7a00:	ldr	w9, [x20, #36]
    7a04:	cmp	w9, w1
    7a08:	b.ge	7a54 <BZ2_decompress@@Base+0x225c>  // b.tcont
    7a0c:	ldr	w10, [x8, #8]
    7a10:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    7a14:	ldr	x11, [x8]
    7a18:	ldr	w12, [x20, #32]
    7a1c:	add	w9, w9, #0x8
    7a20:	sub	w10, w10, #0x1
    7a24:	ldrb	w13, [x11], #1
    7a28:	bfi	w13, w12, #8, #24
    7a2c:	stp	w13, w9, [x20, #32]
    7a30:	ldr	w9, [x8, #12]
    7a34:	str	x11, [x8]
    7a38:	adds	w9, w9, #0x1
    7a3c:	stp	w10, w9, [x8, #8]
    7a40:	b.cc	7a00 <BZ2_decompress@@Base+0x2208>  // b.lo, b.ul, b.last
    7a44:	ldr	w9, [x8, #16]
    7a48:	add	w9, w9, #0x1
    7a4c:	str	w9, [x8, #16]
    7a50:	b	7a00 <BZ2_decompress@@Base+0x2208>
    7a54:	ldr	w8, [x20, #32]
    7a58:	sub	w9, w9, w1
    7a5c:	mov	w10, #0xffffffff            	// #-1
    7a60:	lsl	w10, w10, w1
    7a64:	lsr	w8, w8, w9
    7a68:	bic	w0, w8, w10
    7a6c:	str	w9, [x20, #36]
    7a70:	b	801c <BZ2_decompress@@Base+0x2824>
    7a74:	mov	w15, wzr
    7a78:	b	81b0 <BZ2_decompress@@Base+0x29b8>
    7a7c:	ldr	w8, [x20, #56]
    7a80:	stur	w0, [x29, #-12]
    7a84:	mov	w0, #0xfffffffc            	// #-4
    7a88:	tbnz	w8, #31, 81b4 <BZ2_decompress@@Base+0x29bc>
    7a8c:	cmp	w8, w18
    7a90:	b.ge	81b4 <BZ2_decompress@@Base+0x29bc>  // b.tcont
    7a94:	ldur	w13, [x29, #-20]
    7a98:	mov	x16, xzr
    7a9c:	add	x8, x20, #0x44
    7aa0:	ldr	w9, [x8, x16, lsl #2]
    7aa4:	tbnz	w9, #31, 81b0 <BZ2_decompress@@Base+0x29b8>
    7aa8:	cmp	w9, w18
    7aac:	b.gt	81b0 <BZ2_decompress@@Base+0x29b8>
    7ab0:	add	x16, x16, #0x1
    7ab4:	cmp	x16, #0x100
    7ab8:	b.ne	7aa0 <BZ2_decompress@@Base+0x22a8>  // b.any
    7abc:	mov	x25, x1
    7ac0:	mov	x8, xzr
    7ac4:	add	x1, x20, #0x448
    7ac8:	str	wzr, [x20, #1096]
    7acc:	add	x9, x20, x8
    7ad0:	ldr	w10, [x9, #68]
    7ad4:	add	x8, x8, #0x4
    7ad8:	cmp	x8, #0x400
    7adc:	str	w10, [x9, #1100]
    7ae0:	b.ne	7acc <BZ2_decompress@@Base+0x22d4>  // b.any
    7ae4:	ldr	w9, [x20, #1096]
    7ae8:	mov	x8, xzr
    7aec:	add	x10, x20, #0x44c
    7af0:	ldr	w11, [x10, x8]
    7af4:	add	w9, w11, w9
    7af8:	str	w9, [x10, x8]
    7afc:	add	x8, x8, #0x4
    7b00:	cmp	x8, #0x400
    7b04:	b.ne	7af0 <BZ2_decompress@@Base+0x22f8>  // b.any
    7b08:	mov	x16, xzr
    7b0c:	add	x8, x20, #0x448
    7b10:	ldr	w9, [x8, x16, lsl #2]
    7b14:	tbnz	w9, #31, 7c44 <BZ2_decompress@@Base+0x244c>
    7b18:	cmp	w9, w18
    7b1c:	b.gt	7c44 <BZ2_decompress@@Base+0x244c>
    7b20:	add	x16, x16, #0x1
    7b24:	cmp	x16, #0x101
    7b28:	b.ne	7b10 <BZ2_decompress@@Base+0x2318>  // b.any
    7b2c:	mov	x8, xzr
    7b30:	add	x9, x20, x8, lsl #2
    7b34:	ldr	w10, [x9, #1096]
    7b38:	ldr	w9, [x9, #1100]
    7b3c:	cmp	w10, w9
    7b40:	b.gt	7c40 <BZ2_decompress@@Base+0x2448>
    7b44:	add	x8, x8, #0x1
    7b48:	cmp	x8, #0x100
    7b4c:	b.ne	7b30 <BZ2_decompress@@Base+0x2338>  // b.any
    7b50:	ldr	w8, [x20, #52]
    7b54:	mov	w9, #0xffffffff            	// #-1
    7b58:	str	w9, [x20, #3184]
    7b5c:	mov	w9, #0x2                   	// #2
    7b60:	cmp	w8, #0x2
    7b64:	str	wzr, [x20, #16]
    7b68:	strb	wzr, [x20, #12]
    7b6c:	str	w9, [x20, #8]
    7b70:	stur	w17, [x29, #-36]
    7b74:	stur	x7, [x29, #-48]
    7b78:	str	x27, [sp, #56]
    7b7c:	stur	x26, [x29, #-56]
    7b80:	stur	w21, [x29, #-60]
    7b84:	stur	w19, [x29, #-40]
    7b88:	stp	x28, x23, [sp, #64]
    7b8c:	b.ge	7e30 <BZ2_decompress@@Base+0x2638>  // b.tcont
    7b90:	ldrb	w8, [x20, #44]
    7b94:	cbz	w8, 7eb8 <BZ2_decompress@@Base+0x26c0>
    7b98:	mov	x27, x14
    7b9c:	mov	w21, w13
    7ba0:	mov	w28, w2
    7ba4:	mov	w23, w5
    7ba8:	mov	w26, w6
    7bac:	mov	x8, xzr
    7bb0:	str	w15, [sp, #8]
    7bb4:	stp	w3, w4, [sp, #28]
    7bb8:	add	x9, x20, x8
    7bbc:	ldr	w10, [x9, #1096]
    7bc0:	add	x8, x8, #0x4
    7bc4:	cmp	x8, #0x404
    7bc8:	str	w10, [x9, #2124]
    7bcc:	b.ne	7bb8 <BZ2_decompress@@Base+0x23c0>  // b.any
    7bd0:	cmp	w18, #0x1
    7bd4:	b.lt	7c50 <BZ2_decompress@@Base+0x2458>  // b.tstop
    7bd8:	mov	x8, xzr
    7bdc:	mov	w9, w18
    7be0:	b	7c08 <BZ2_decompress@@Base+0x2410>
    7be4:	asr	w14, w14, #16
    7be8:	bfi	w13, w14, #4, #28
    7bec:	strb	w13, [x11, x12]
    7bf0:	ldr	w11, [x10]
    7bf4:	add	x8, x8, #0x1
    7bf8:	cmp	x9, x8
    7bfc:	add	w11, w11, #0x1
    7c00:	str	w11, [x10]
    7c04:	b.eq	7c50 <BZ2_decompress@@Base+0x2458>  // b.none
    7c08:	ldr	x10, [x20, #3160]
    7c0c:	lsl	x11, x8, #1
    7c10:	ldrb	w12, [x10, x11]
    7c14:	add	x15, x20, x12, lsl #2
    7c18:	ldr	w14, [x15, #2124]
    7c1c:	ubfx	x12, x8, #1, #31
    7c20:	strh	w14, [x10, x11]
    7c24:	ldr	x11, [x20, #3168]
    7c28:	add	x10, x15, #0x84c
    7c2c:	ldrb	w13, [x11, x12]
    7c30:	tbnz	w8, #0, 7be4 <BZ2_decompress@@Base+0x23ec>
    7c34:	and	w13, w13, #0xf0
    7c38:	orr	w13, w13, w14, asr #16
    7c3c:	b	7bec <BZ2_decompress@@Base+0x23f4>
    7c40:	add	w16, w8, #0x1
    7c44:	mov	w0, #0xfffffffc            	// #-4
    7c48:	mov	x1, x25
    7c4c:	b	81b4 <BZ2_decompress@@Base+0x29bc>
    7c50:	ldrsw	x8, [x20, #56]
    7c54:	ldr	x9, [x20, #3168]
    7c58:	ldr	x10, [x20, #3160]
    7c5c:	str	x18, [sp, #48]
    7c60:	asr	w11, w8, #1
    7c64:	ldrb	w9, [x9, w11, sxtw]
    7c68:	ldrh	w19, [x10, x8, lsl #1]
    7c6c:	ubfiz	w10, w8, #2, #1
    7c70:	lsr	w9, w9, w10
    7c74:	bfi	w19, w9, #16, #4
    7c78:	b	7c98 <BZ2_decompress@@Base+0x24a0>
    7c7c:	asr	w8, w8, #16
    7c80:	bfi	w11, w8, #4, #28
    7c84:	strb	w11, [x9, x10]
    7c88:	ldr	w0, [x20, #56]
    7c8c:	mov	w8, w14
    7c90:	cmp	w14, w0
    7c94:	b.eq	7cd8 <BZ2_decompress@@Base+0x24e0>  // b.none
    7c98:	ldr	x9, [x20, #3168]
    7c9c:	ldr	x11, [x20, #3160]
    7ca0:	mov	w14, w19
    7ca4:	sbfx	x10, x14, #1, #31
    7ca8:	sbfiz	x12, x14, #1, #32
    7cac:	ldrb	w13, [x9, x10]
    7cb0:	ldrh	w19, [x11, x12]
    7cb4:	strh	w8, [x11, x12]
    7cb8:	ldrb	w11, [x9, x10]
    7cbc:	ubfiz	w12, w14, #2, #1
    7cc0:	lsr	w12, w13, w12
    7cc4:	bfi	w19, w12, #16, #4
    7cc8:	tbnz	w14, #0, 7c7c <BZ2_decompress@@Base+0x2484>
    7ccc:	and	w11, w11, #0xf0
    7cd0:	orr	w11, w11, w8, asr #16
    7cd4:	b	7c84 <BZ2_decompress@@Base+0x248c>
    7cd8:	ldrb	w9, [x20, #20]
    7cdc:	mov	w8, #0x86a0                	// #34464
    7ce0:	movk	w8, #0x1, lsl #16
    7ce4:	str	x14, [sp]
    7ce8:	str	w0, [x20, #60]
    7cec:	str	wzr, [x20, #1092]
    7cf0:	cbz	w9, 7d94 <BZ2_decompress@@Base+0x259c>
    7cf4:	ldr	w9, [x20, #40]
    7cf8:	str	xzr, [x20, #24]
    7cfc:	mul	w8, w9, w8
    7d00:	cmp	w0, w8
    7d04:	b.cs	7e28 <BZ2_decompress@@Base+0x2630>  // b.hs, b.nlast
    7d08:	bl	16d0 <BZ2_indexIntoF@plt>
    7d0c:	ldr	w9, [x20, #60]
    7d10:	ldr	x10, [x20, #3168]
    7d14:	str	w0, [x20, #64]
    7d18:	ldr	x11, [x20, #3160]
    7d1c:	lsr	x12, x9, #1
    7d20:	ldrb	w10, [x10, x12]
    7d24:	ldr	w12, [x20, #1092]
    7d28:	ldrh	w11, [x11, x9, lsl #1]
    7d2c:	ubfiz	w9, w9, #2, #1
    7d30:	lsr	w9, w10, w9
    7d34:	ldr	w10, [x20, #24]
    7d38:	mov	w8, w0
    7d3c:	add	w12, w12, #0x1
    7d40:	bfi	w11, w9, #16, #4
    7d44:	str	w11, [x20, #60]
    7d48:	str	w12, [x20, #1092]
    7d4c:	cbnz	w10, 7d70 <BZ2_decompress@@Base+0x2578>
    7d50:	adrp	x10, 1b000 <BZ2_bzerror@@Base+0x1084c>
    7d54:	ldrsw	x9, [x20, #28]
    7d58:	ldr	x10, [x10, #4048]
    7d5c:	add	w11, w9, #0x1
    7d60:	ldr	w10, [x10, x9, lsl #2]
    7d64:	cmp	w11, #0x200
    7d68:	csinc	w9, wzr, w9, eq  // eq = none
    7d6c:	stp	w10, w9, [x20, #24]
    7d70:	ldr	w9, [x20, #24]
    7d74:	mov	w0, wzr
    7d78:	sub	w9, w9, #0x1
    7d7c:	cmp	w9, #0x1
    7d80:	str	w9, [x20, #24]
    7d84:	cset	w9, eq  // eq = none
    7d88:	eor	w8, w8, w9
    7d8c:	str	w8, [x20, #64]
    7d90:	b	7de8 <BZ2_decompress@@Base+0x25f0>
    7d94:	ldr	w9, [x20, #40]
    7d98:	mul	w8, w9, w8
    7d9c:	cmp	w0, w8
    7da0:	b.cs	7e28 <BZ2_decompress@@Base+0x2630>  // b.hs, b.nlast
    7da4:	bl	16d0 <BZ2_indexIntoF@plt>
    7da8:	ldr	w9, [x20, #60]
    7dac:	mov	w8, w0
    7db0:	ldr	x10, [x20, #3168]
    7db4:	str	w8, [x20, #64]
    7db8:	ldr	x8, [x20, #3160]
    7dbc:	lsr	x11, x9, #1
    7dc0:	ldrb	w10, [x10, x11]
    7dc4:	ldr	w11, [x20, #1092]
    7dc8:	ldrh	w8, [x8, x9, lsl #1]
    7dcc:	ubfiz	w9, w9, #2, #1
    7dd0:	lsr	w9, w10, w9
    7dd4:	add	w10, w11, #0x1
    7dd8:	bfi	w8, w9, #16, #4
    7ddc:	mov	w0, wzr
    7de0:	str	w8, [x20, #60]
    7de4:	str	w10, [x20, #1092]
    7de8:	mov	w6, w26
    7dec:	ldr	w4, [sp, #32]
    7df0:	mov	w5, w23
    7df4:	stur	w21, [x29, #-20]
    7df8:	mov	x14, x27
    7dfc:	ldur	w9, [x29, #-16]
    7e00:	ldr	w3, [sp, #28]
    7e04:	ldp	x26, x7, [x29, #-56]
    7e08:	ldr	x27, [sp, #56]
    7e0c:	mov	w30, w19
    7e10:	ldur	w21, [x29, #-60]
    7e14:	ldp	w19, w17, [x29, #-40]
    7e18:	ldr	x23, [sp, #72]
    7e1c:	mov	w2, w28
    7e20:	mov	x1, x25
    7e24:	b	6e08 <BZ2_decompress@@Base+0x1610>
    7e28:	mov	w0, #0x1                   	// #1
    7e2c:	b	81fc <BZ2_decompress@@Base+0x2a04>
    7e30:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    7e34:	ldr	x8, [x8, #4016]
    7e38:	str	w3, [sp, #28]
    7e3c:	adrp	x0, a000 <BZ2_bzRead@@Base+0x84>
    7e40:	add	x0, x0, #0xf8e
    7e44:	ldr	x3, [x8]
    7e48:	str	x1, [sp, #48]
    7e4c:	mov	w1, #0x6                   	// #6
    7e50:	mov	w8, w2
    7e54:	mov	w2, #0x1                   	// #1
    7e58:	mov	w27, w6
    7e5c:	mov	w23, w4
    7e60:	str	x14, [sp, #8]
    7e64:	str	w8, [sp, #44]
    7e68:	mov	x28, x24
    7e6c:	mov	w24, w5
    7e70:	mov	w26, w30
    7e74:	mov	x19, x18
    7e78:	mov	w21, w15
    7e7c:	bl	16f0 <fwrite@plt>
    7e80:	ldr	w3, [sp, #28]
    7e84:	ldr	w2, [sp, #44]
    7e88:	ldur	w13, [x29, #-20]
    7e8c:	ldr	x14, [sp, #8]
    7e90:	ldr	x1, [sp, #48]
    7e94:	mov	w15, w21
    7e98:	mov	x18, x19
    7e9c:	mov	w30, w26
    7ea0:	mov	w5, w24
    7ea4:	mov	x24, x28
    7ea8:	mov	w4, w23
    7eac:	mov	w6, w27
    7eb0:	ldrb	w8, [x20, #44]
    7eb4:	cbnz	w8, 7b98 <BZ2_decompress@@Base+0x23a0>
    7eb8:	ldur	w27, [x29, #-16]
    7ebc:	ldr	x8, [x20, #3152]
    7ec0:	mov	w16, w15
    7ec4:	mov	x19, x14
    7ec8:	mov	w21, w13
    7ecc:	mov	w28, w2
    7ed0:	mov	x15, x18
    7ed4:	cmp	w18, #0x1
    7ed8:	b.lt	7f38 <BZ2_decompress@@Base+0x2740>  // b.tstop
    7edc:	ldr	x9, [x20, #3152]
    7ee0:	mov	w10, wzr
    7ee4:	mov	x17, xzr
    7ee8:	mov	w11, w15
    7eec:	lsl	x12, x17, #2
    7ef0:	ldrb	w12, [x8, x12]
    7ef4:	add	x17, x17, #0x1
    7ef8:	cmp	x11, x17
    7efc:	add	x12, x20, x12, lsl #2
    7f00:	ldrsw	x13, [x12, #1096]
    7f04:	lsl	x13, x13, #2
    7f08:	ldr	w14, [x8, x13]
    7f0c:	orr	w14, w14, w10
    7f10:	str	w14, [x8, x13]
    7f14:	ldr	w8, [x12, #1096]
    7f18:	add	w10, w10, #0x100
    7f1c:	add	w8, w8, #0x1
    7f20:	str	w8, [x12, #1096]
    7f24:	mov	x8, x9
    7f28:	b.ne	7eec <BZ2_decompress@@Base+0x26f4>  // b.any
    7f2c:	mov	x12, x17
    7f30:	mov	x8, x9
    7f34:	b	7f3c <BZ2_decompress@@Base+0x2744>
    7f38:	mov	w12, wzr
    7f3c:	ldrsw	x9, [x20, #56]
    7f40:	ldrb	w11, [x20, #20]
    7f44:	mov	w10, #0x86a0                	// #34464
    7f48:	movk	w10, #0x1, lsl #16
    7f4c:	ldr	w9, [x8, x9, lsl #2]
    7f50:	str	wzr, [x20, #1092]
    7f54:	lsr	x9, x9, #8
    7f58:	str	w9, [x20, #60]
    7f5c:	cbz	w11, 7fb8 <BZ2_decompress@@Base+0x27c0>
    7f60:	ldr	w11, [x20, #40]
    7f64:	mov	w0, #0x1                   	// #1
    7f68:	str	xzr, [x20, #24]
    7f6c:	mul	w10, w11, w10
    7f70:	cmp	w9, w10
    7f74:	b.cs	81fc <BZ2_decompress@@Base+0x2a04>  // b.hs, b.nlast
    7f78:	ldr	w8, [x8, x9, lsl #2]
    7f7c:	str	w0, [x20, #1092]
    7f80:	and	w9, w8, #0xff
    7f84:	lsr	w8, w8, #8
    7f88:	stp	w8, w9, [x20, #60]
    7f8c:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    7f90:	ldr	x8, [x8, #4048]
    7f94:	ldr	w8, [x8]
    7f98:	sub	w8, w8, #0x1
    7f9c:	cmp	w8, #0x1
    7fa0:	stp	w8, w0, [x20, #24]
    7fa4:	cset	w8, eq  // eq = none
    7fa8:	eor	w8, w9, w8
    7fac:	str	w8, [x20, #64]
    7fb0:	mov	w0, wzr
    7fb4:	b	7fe4 <BZ2_decompress@@Base+0x27ec>
    7fb8:	ldr	w11, [x20, #40]
    7fbc:	mov	w0, #0x1                   	// #1
    7fc0:	mul	w10, w11, w10
    7fc4:	cmp	w9, w10
    7fc8:	b.cs	81fc <BZ2_decompress@@Base+0x2a04>  // b.hs, b.nlast
    7fcc:	ldr	w8, [x8, w9, uxtw #2]
    7fd0:	str	w0, [x20, #1092]
    7fd4:	mov	w0, wzr
    7fd8:	and	w9, w8, #0xff
    7fdc:	lsr	w8, w8, #8
    7fe0:	stp	w8, w9, [x20, #60]
    7fe4:	mov	w2, w28
    7fe8:	stur	w21, [x29, #-20]
    7fec:	mov	x14, x19
    7ff0:	mov	w9, w27
    7ff4:	ldp	w19, w17, [x29, #-40]
    7ff8:	ldp	x26, x7, [x29, #-56]
    7ffc:	ldp	x27, x28, [sp, #56]
    8000:	ldur	w21, [x29, #-60]
    8004:	ldr	x23, [sp, #72]
    8008:	mov	x1, x25
    800c:	mov	x18, x15
    8010:	mov	w15, w16
    8014:	mov	x16, x12
    8018:	b	81b8 <BZ2_decompress@@Base+0x29c0>
    801c:	cmp	w1, #0x14
    8020:	b.gt	81ac <BZ2_decompress@@Base+0x29b4>
    8024:	ldr	w8, [x7, w1, sxtw #2]
    8028:	cmp	w0, w8
    802c:	b.le	8074 <BZ2_decompress@@Base+0x287c>
    8030:	add	w1, w1, #0x1
    8034:	stur	w0, [x29, #-12]
    8038:	ldr	w9, [x20, #36]
    803c:	ldur	w0, [x29, #-12]
    8040:	mov	w8, #0x27                  	// #39
    8044:	str	w8, [x20, #8]
    8048:	cmp	w9, #0x0
    804c:	b.le	80f4 <BZ2_decompress@@Base+0x28fc>
    8050:	ldr	w8, [x20, #32]
    8054:	sub	w9, w9, #0x1
    8058:	str	w9, [x20, #36]
    805c:	lsr	w8, w8, w9
    8060:	and	w10, w8, #0x1
    8064:	bfi	w8, w0, #1, #31
    8068:	stur	w10, [x29, #-16]
    806c:	mov	w0, w8
    8070:	b	801c <BZ2_decompress@@Base+0x2824>
    8074:	sxtw	x8, w1
    8078:	ldr	w8, [x27, x8, lsl #2]
    807c:	sub	w8, w0, w8
    8080:	cmp	w8, #0x101
    8084:	b.hi	81ac <BZ2_decompress@@Base+0x29b4>  // b.pmore
    8088:	ldur	x9, [x29, #-32]
    808c:	ldr	w24, [x9, w8, sxtw #2]
    8090:	cmp	w24, #0x2
    8094:	b.cc	7958 <BZ2_decompress@@Base+0x2160>  // b.lo, b.ul, b.last
    8098:	ldrsw	x8, [x20, #7820]
    809c:	add	x8, x20, x8
    80a0:	ldrb	w8, [x8, #3724]
    80a4:	add	x8, x20, x8
    80a8:	ldrb	w9, [x8, #3468]
    80ac:	add	w8, w19, #0x1
    80b0:	add	x10, x20, x9, lsl #2
    80b4:	ldr	w11, [x10, #68]
    80b8:	add	w11, w11, w8
    80bc:	str	w11, [x10, #68]
    80c0:	ldrb	w10, [x20, #44]
    80c4:	cbz	w10, 8150 <BZ2_decompress@@Base+0x2958>
    80c8:	tbnz	w19, #31, 8178 <BZ2_decompress@@Base+0x2980>
    80cc:	sxtw	x18, w18
    80d0:	sxtw	x10, w23
    80d4:	cmp	x18, x10
    80d8:	b.ge	8188 <BZ2_decompress@@Base+0x2990>  // b.tcont
    80dc:	ldr	x11, [x20, #3160]
    80e0:	subs	w8, w8, #0x1
    80e4:	strh	w9, [x11, x18, lsl #1]
    80e8:	add	x18, x18, #0x1
    80ec:	b.gt	80d4 <BZ2_decompress@@Base+0x28dc>
    80f0:	b	8178 <BZ2_decompress@@Base+0x2980>
    80f4:	ldr	x8, [x20]
    80f8:	b	8108 <BZ2_decompress@@Base+0x2910>
    80fc:	ldr	w9, [x20, #36]
    8100:	cmp	w9, #0x0
    8104:	b.gt	8050 <BZ2_decompress@@Base+0x2858>
    8108:	ldr	w10, [x8, #8]
    810c:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    8110:	ldr	x11, [x8]
    8114:	ldr	w12, [x20, #32]
    8118:	add	w9, w9, #0x8
    811c:	sub	w10, w10, #0x1
    8120:	ldrb	w13, [x11], #1
    8124:	bfi	w13, w12, #8, #24
    8128:	stp	w13, w9, [x20, #32]
    812c:	ldr	w9, [x8, #12]
    8130:	str	x11, [x8]
    8134:	adds	w9, w9, #0x1
    8138:	stp	w10, w9, [x8, #8]
    813c:	b.cc	80fc <BZ2_decompress@@Base+0x2904>  // b.lo, b.ul, b.last
    8140:	ldr	w9, [x8, #16]
    8144:	add	w9, w9, #0x1
    8148:	str	w9, [x8, #16]
    814c:	b	80fc <BZ2_decompress@@Base+0x2904>
    8150:	tbnz	w19, #31, 8178 <BZ2_decompress@@Base+0x2980>
    8154:	sxtw	x18, w18
    8158:	sxtw	x10, w23
    815c:	cmp	x18, x10
    8160:	b.ge	8188 <BZ2_decompress@@Base+0x2990>  // b.tcont
    8164:	ldr	x11, [x20, #3152]
    8168:	subs	w8, w8, #0x1
    816c:	str	w9, [x11, x18, lsl #2]
    8170:	add	x18, x18, #0x1
    8174:	b.gt	815c <BZ2_decompress@@Base+0x2964>
    8178:	mov	w19, w8
    817c:	cmp	w24, w21
    8180:	b.ne	763c <BZ2_decompress@@Base+0x1e44>  // b.any
    8184:	b	7a7c <BZ2_decompress@@Base+0x2284>
    8188:	stur	w0, [x29, #-12]
    818c:	mov	w0, #0xfffffffc            	// #-4
    8190:	mov	w19, w8
    8194:	b	81b4 <BZ2_decompress@@Base+0x29bc>
    8198:	sxtw	x8, w1
    819c:	ldr	w8, [x27, x8, lsl #2]
    81a0:	sub	w8, w0, w8
    81a4:	cmp	w8, #0x101
    81a8:	b.ls	762c <BZ2_decompress@@Base+0x1e34>  // b.plast
    81ac:	stur	w0, [x29, #-12]
    81b0:	mov	w0, #0xfffffffc            	// #-4
    81b4:	ldur	w9, [x29, #-16]
    81b8:	stp	w16, w30, [x22]
    81bc:	stp	w26, w6, [x22, #8]
    81c0:	stp	w4, w17, [x22, #16]
    81c4:	stp	w21, w28, [x22, #24]
    81c8:	stp	w15, w24, [x22, #32]
    81cc:	stp	w23, w18, [x22, #40]
    81d0:	stp	w19, w2, [x22, #48]
    81d4:	ldur	w8, [x29, #-20]
    81d8:	str	w3, [x22, #80]
    81dc:	stur	x7, [x22, #84]
    81e0:	stur	x27, [x22, #92]
    81e4:	stp	w8, w5, [x22, #56]
    81e8:	ldur	w8, [x29, #-12]
    81ec:	stp	w9, w14, [x22, #72]
    81f0:	stp	w1, w8, [x22, #64]
    81f4:	ldur	x8, [x29, #-32]
    81f8:	stur	x8, [x22, #100]
    81fc:	ldp	x20, x19, [sp, #224]
    8200:	ldp	x22, x21, [sp, #208]
    8204:	ldp	x24, x23, [sp, #192]
    8208:	ldp	x26, x25, [sp, #176]
    820c:	ldp	x28, x27, [sp, #160]
    8210:	ldp	x29, x30, [sp, #144]
    8214:	add	sp, sp, #0xf0
    8218:	ret
    821c:	cmp	w1, #0x14
    8220:	b.gt	81ac <BZ2_decompress@@Base+0x29b4>
    8224:	ldr	w8, [x7, w1, sxtw #2]
    8228:	cmp	w0, w8
    822c:	b.le	8198 <BZ2_decompress@@Base+0x29a0>
    8230:	add	w1, w1, #0x1
    8234:	stur	w0, [x29, #-12]
    8238:	ldr	w9, [x20, #36]
    823c:	ldur	w0, [x29, #-12]
    8240:	mov	w8, #0x29                  	// #41
    8244:	str	w8, [x20, #8]
    8248:	cmp	w9, #0x0
    824c:	b.le	8274 <BZ2_decompress@@Base+0x2a7c>
    8250:	ldr	w8, [x20, #32]
    8254:	sub	w9, w9, #0x1
    8258:	str	w9, [x20, #36]
    825c:	lsr	w8, w8, w9
    8260:	and	w10, w8, #0x1
    8264:	bfi	w8, w0, #1, #31
    8268:	stur	w10, [x29, #-16]
    826c:	mov	w0, w8
    8270:	b	821c <BZ2_decompress@@Base+0x2a24>
    8274:	ldr	x8, [x20]
    8278:	b	8288 <BZ2_decompress@@Base+0x2a90>
    827c:	ldr	w9, [x20, #36]
    8280:	cmp	w9, #0x0
    8284:	b.gt	8250 <BZ2_decompress@@Base+0x2a58>
    8288:	ldr	w10, [x8, #8]
    828c:	cbz	w10, 6ba0 <BZ2_decompress@@Base+0x13a8>
    8290:	ldr	x11, [x8]
    8294:	ldr	w12, [x20, #32]
    8298:	add	w9, w9, #0x8
    829c:	sub	w10, w10, #0x1
    82a0:	ldrb	w13, [x11], #1
    82a4:	bfi	w13, w12, #8, #24
    82a8:	stp	w13, w9, [x20, #32]
    82ac:	ldr	w9, [x8, #12]
    82b0:	str	x11, [x8]
    82b4:	adds	w9, w9, #0x1
    82b8:	stp	w10, w9, [x8, #8]
    82bc:	b.cc	827c <BZ2_decompress@@Base+0x2a84>  // b.lo, b.ul, b.last
    82c0:	ldr	w9, [x8, #16]
    82c4:	add	w9, w9, #0x1
    82c8:	str	w9, [x8, #16]
    82cc:	b	827c <BZ2_decompress@@Base+0x2a84>
    82d0:	mov	x8, xzr
    82d4:	add	x9, x0, #0xc7c
    82d8:	str	wzr, [x0, #3192]
    82dc:	b	82ec <BZ2_decompress@@Base+0x2af4>
    82e0:	add	x8, x8, #0x1
    82e4:	cmp	x8, #0x100
    82e8:	b.eq	8310 <BZ2_decompress@@Base+0x2b18>  // b.none
    82ec:	ldrb	w10, [x9, x8]
    82f0:	cbz	w10, 82e0 <BZ2_decompress@@Base+0x2ae8>
    82f4:	ldrsw	x10, [x0, #3192]
    82f8:	add	x10, x0, x10
    82fc:	strb	w8, [x10, #3468]
    8300:	ldr	w10, [x0, #3192]
    8304:	add	w10, w10, #0x1
    8308:	str	w10, [x0, #3192]
    830c:	b	82e0 <BZ2_decompress@@Base+0x2ae8>
    8310:	ret

0000000000008314 <BZ2_bz__AssertH__fail@@Base>:
    8314:	stp	x29, x30, [sp, #-32]!
    8318:	stp	x20, x19, [sp, #16]
    831c:	mov	x29, sp
    8320:	adrp	x20, 1b000 <BZ2_bzerror@@Base+0x1084c>
    8324:	ldr	x20, [x20, #4016]
    8328:	mov	w19, w0
    832c:	adrp	x1, a000 <BZ2_bzRead@@Base+0x84>
    8330:	adrp	x3, b000 <BZ2_bzerror@@Base+0x84c>
    8334:	ldr	x8, [x20]
    8338:	add	x1, x1, #0xf95
    833c:	add	x3, x3, #0x59c
    8340:	mov	w2, w19
    8344:	mov	x0, x8
    8348:	bl	1750 <fprintf@plt>
    834c:	cmp	w19, #0x3ef
    8350:	b.ne	836c <BZ2_bz__AssertH__fail@@Base+0x58>  // b.any
    8354:	ldr	x3, [x20]
    8358:	adrp	x0, b000 <BZ2_bzerror@@Base+0x84c>
    835c:	add	x0, x0, #0x132
    8360:	mov	w1, #0x420                 	// #1056
    8364:	mov	w2, #0x1                   	// #1
    8368:	bl	16f0 <fwrite@plt>
    836c:	mov	w0, #0x3                   	// #3
    8370:	bl	1500 <exit@plt>

0000000000008374 <BZ2_bzlibVersion@@Base>:
    8374:	adrp	x0, b000 <BZ2_bzerror@@Base+0x84c>
    8378:	add	x0, x0, #0x59c
    837c:	ret

0000000000008380 <BZ2_bzCompressInit@@Base>:
    8380:	stp	x29, x30, [sp, #-64]!
    8384:	stp	x24, x23, [sp, #16]
    8388:	stp	x22, x21, [sp, #32]
    838c:	stp	x20, x19, [sp, #48]
    8390:	mov	x29, sp
    8394:	mov	x19, x0
    8398:	cmp	w3, #0xfa
    839c:	mov	w0, #0xfffffffe            	// #-2
    83a0:	b.hi	852c <BZ2_bzCompressInit@@Base+0x1ac>  // b.pmore
    83a4:	cbz	x19, 852c <BZ2_bzCompressInit@@Base+0x1ac>
    83a8:	sub	w8, w1, #0x1
    83ac:	mov	w21, w1
    83b0:	cmp	w8, #0x8
    83b4:	b.hi	852c <BZ2_bzCompressInit@@Base+0x1ac>  // b.pmore
    83b8:	ldr	x8, [x19, #56]
    83bc:	cmp	w3, #0x0
    83c0:	mov	w9, #0x1e                  	// #30
    83c4:	mov	w22, w2
    83c8:	csel	w24, w9, w3, eq  // eq = none
    83cc:	cbz	x8, 84cc <BZ2_bzCompressInit@@Base+0x14c>
    83d0:	ldr	x8, [x19, #64]
    83d4:	cbz	x8, 84e0 <BZ2_bzCompressInit@@Base+0x160>
    83d8:	ldr	x8, [x19, #56]
    83dc:	ldr	x0, [x19, #72]
    83e0:	mov	w1, #0xd9d8                	// #55768
    83e4:	mov	w2, #0x1                   	// #1
    83e8:	blr	x8
    83ec:	cbz	x0, 8528 <BZ2_bzCompressInit@@Base+0x1a8>
    83f0:	str	x19, [x0]
    83f4:	stp	xzr, xzr, [x0, #32]
    83f8:	str	xzr, [x0, #24]
    83fc:	mov	x20, x0
    8400:	ldr	x8, [x19, #56]
    8404:	ldr	x0, [x19, #72]
    8408:	mov	w9, #0x1a80                	// #6784
    840c:	movk	w9, #0x6, lsl #16
    8410:	mul	w23, w21, w9
    8414:	mov	w2, #0x1                   	// #1
    8418:	mov	w1, w23
    841c:	blr	x8
    8420:	str	x0, [x20, #24]
    8424:	ldr	x8, [x19, #56]
    8428:	ldr	x0, [x19, #72]
    842c:	add	w1, w23, #0x88
    8430:	mov	w2, #0x1                   	// #1
    8434:	blr	x8
    8438:	str	x0, [x20, #32]
    843c:	ldr	x8, [x19, #56]
    8440:	ldr	x0, [x19, #72]
    8444:	mov	w1, #0x40004               	// #262148
    8448:	mov	w2, #0x1                   	// #1
    844c:	blr	x8
    8450:	ldr	x1, [x20, #24]
    8454:	str	x0, [x20, #40]
    8458:	cbz	x1, 84fc <BZ2_bzCompressInit@@Base+0x17c>
    845c:	cbz	x0, 84f0 <BZ2_bzCompressInit@@Base+0x170>
    8460:	ldr	x8, [x20, #32]
    8464:	cbz	x8, 84f0 <BZ2_bzCompressInit@@Base+0x170>
    8468:	mov	w8, #0x86a0                	// #34464
    846c:	ldp	x11, x10, [x20, #24]
    8470:	movk	w8, #0x1, lsl #16
    8474:	mul	w8, w21, w8
    8478:	mov	x9, #0x200000002           	// #8589934594
    847c:	sub	w8, w8, #0x13
    8480:	mov	x0, x20
    8484:	str	wzr, [x20, #660]
    8488:	str	wzr, [x20, #652]
    848c:	str	w21, [x20, #664]
    8490:	str	w22, [x20, #656]
    8494:	str	w24, [x20, #88]
    8498:	str	x9, [x20, #8]
    849c:	str	w8, [x20, #112]
    84a0:	stp	x10, x11, [x20, #64]
    84a4:	str	xzr, [x20, #80]
    84a8:	str	x11, [x20, #56]
    84ac:	str	x20, [x19, #48]
    84b0:	stur	xzr, [x19, #12]
    84b4:	stur	xzr, [x19, #36]
    84b8:	bl	8578 <BZ2_bzCompressInit@@Base+0x1f8>
    84bc:	mov	x0, x20
    84c0:	bl	8584 <BZ2_bzCompressInit@@Base+0x204>
    84c4:	mov	w0, wzr
    84c8:	b	852c <BZ2_bzCompressInit@@Base+0x1ac>
    84cc:	adrp	x8, 8000 <BZ2_decompress@@Base+0x2808>
    84d0:	add	x8, x8, #0x540
    84d4:	str	x8, [x19, #56]
    84d8:	ldr	x8, [x19, #64]
    84dc:	cbnz	x8, 83d8 <BZ2_bzCompressInit@@Base+0x58>
    84e0:	adrp	x8, 8000 <BZ2_decompress@@Base+0x2808>
    84e4:	add	x8, x8, #0x55c
    84e8:	str	x8, [x19, #64]
    84ec:	b	83d8 <BZ2_bzCompressInit@@Base+0x58>
    84f0:	cbz	x1, 84fc <BZ2_bzCompressInit@@Base+0x17c>
    84f4:	ldp	x8, x0, [x19, #64]
    84f8:	blr	x8
    84fc:	ldr	x1, [x20, #32]
    8500:	cbz	x1, 850c <BZ2_bzCompressInit@@Base+0x18c>
    8504:	ldp	x8, x0, [x19, #64]
    8508:	blr	x8
    850c:	ldr	x1, [x20, #40]
    8510:	cbz	x1, 851c <BZ2_bzCompressInit@@Base+0x19c>
    8514:	ldp	x8, x0, [x19, #64]
    8518:	blr	x8
    851c:	ldp	x8, x0, [x19, #64]
    8520:	mov	x1, x20
    8524:	blr	x8
    8528:	mov	w0, #0xfffffffd            	// #-3
    852c:	ldp	x20, x19, [sp, #48]
    8530:	ldp	x22, x21, [sp, #32]
    8534:	ldp	x24, x23, [sp, #16]
    8538:	ldp	x29, x30, [sp], #64
    853c:	ret
    8540:	stp	x29, x30, [sp, #-16]!
    8544:	mov	x29, sp
    8548:	mul	w8, w2, w1
    854c:	sxtw	x0, w8
    8550:	bl	1540 <malloc@plt>
    8554:	ldp	x29, x30, [sp], #16
    8558:	ret
    855c:	cbz	x1, 8574 <BZ2_bzCompressInit@@Base+0x1f4>
    8560:	stp	x29, x30, [sp, #-16]!
    8564:	mov	x29, sp
    8568:	mov	x0, x1
    856c:	bl	1680 <free@plt>
    8570:	ldp	x29, x30, [sp], #16
    8574:	ret
    8578:	mov	w8, #0x100                 	// #256
    857c:	stur	x8, [x0, #92]
    8580:	ret
    8584:	mov	w8, #0xffffffff            	// #-1
    8588:	str	w8, [x0, #648]
    858c:	ldr	w8, [x0, #660]
    8590:	movi	v0.2d, #0x0
    8594:	str	wzr, [x0, #108]
    8598:	stur	xzr, [x0, #116]
    859c:	add	w8, w8, #0x1
    85a0:	stp	q0, q0, [x0, #128]
    85a4:	stp	q0, q0, [x0, #160]
    85a8:	stp	q0, q0, [x0, #192]
    85ac:	stp	q0, q0, [x0, #224]
    85b0:	stp	q0, q0, [x0, #256]
    85b4:	stp	q0, q0, [x0, #288]
    85b8:	stp	q0, q0, [x0, #320]
    85bc:	stp	q0, q0, [x0, #352]
    85c0:	str	w8, [x0, #660]
    85c4:	ret

00000000000085c8 <BZ2_bzCompress@@Base>:
    85c8:	stp	x29, x30, [sp, #-32]!
    85cc:	str	x19, [sp, #16]
    85d0:	mov	x29, sp
    85d4:	cbz	x0, 85f0 <BZ2_bzCompress@@Base+0x28>
    85d8:	ldr	x19, [x0, #48]
    85dc:	mov	x8, x0
    85e0:	cbz	x19, 85f0 <BZ2_bzCompress@@Base+0x28>
    85e4:	ldr	x9, [x19]
    85e8:	cmp	x9, x8
    85ec:	b.eq	8600 <BZ2_bzCompress@@Base+0x38>  // b.none
    85f0:	mov	w0, #0xfffffffe            	// #-2
    85f4:	ldr	x19, [sp, #16]
    85f8:	ldp	x29, x30, [sp], #32
    85fc:	ret
    8600:	mov	w0, #0xffffffff            	// #-1
    8604:	b	8618 <BZ2_bzCompress@@Base+0x50>
    8608:	mov	w10, #0x3                   	// #3
    860c:	ldr	w11, [x8, #8]
    8610:	str	w10, [x19, #8]
    8614:	str	w11, [x19, #16]
    8618:	ldr	w10, [x19, #8]
    861c:	cmp	w10, #0x2
    8620:	b.ne	863c <BZ2_bzCompress@@Base+0x74>  // b.any
    8624:	cmp	w1, #0x1
    8628:	b.eq	8608 <BZ2_bzCompress@@Base+0x40>  // b.none
    862c:	cmp	w1, #0x2
    8630:	b.ne	868c <BZ2_bzCompress@@Base+0xc4>  // b.any
    8634:	mov	w10, #0x4                   	// #4
    8638:	b	860c <BZ2_bzCompress@@Base+0x44>
    863c:	cmp	w10, #0x1
    8640:	b.eq	85f4 <BZ2_bzCompress@@Base+0x2c>  // b.none
    8644:	cmp	w10, #0x3
    8648:	b.eq	86ac <BZ2_bzCompress@@Base+0xe4>  // b.none
    864c:	cmp	w10, #0x4
    8650:	b.ne	86e4 <BZ2_bzCompress@@Base+0x11c>  // b.any
    8654:	cmp	w1, #0x2
    8658:	b.ne	86dc <BZ2_bzCompress@@Base+0x114>  // b.any
    865c:	ldr	w10, [x19, #16]
    8660:	ldr	w9, [x9, #8]
    8664:	cmp	w10, w9
    8668:	b.ne	86dc <BZ2_bzCompress@@Base+0x114>  // b.any
    866c:	mov	x0, x8
    8670:	bl	8744 <BZ2_bzCompress@@Base+0x17c>
    8674:	tst	w0, #0xff
    8678:	b.eq	86dc <BZ2_bzCompress@@Base+0x114>  // b.none
    867c:	ldr	w8, [x19, #16]
    8680:	cbz	w8, 8718 <BZ2_bzCompress@@Base+0x150>
    8684:	mov	w0, #0x3                   	// #3
    8688:	b	85f4 <BZ2_bzCompress@@Base+0x2c>
    868c:	mov	w0, #0xfffffffe            	// #-2
    8690:	cbnz	w1, 85f4 <BZ2_bzCompress@@Base+0x2c>
    8694:	mov	x0, x8
    8698:	bl	8744 <BZ2_bzCompress@@Base+0x17c>
    869c:	tst	w0, #0xff
    86a0:	mov	w8, #0xfffffffe            	// #-2
    86a4:	cinv	w0, w8, ne  // ne = any
    86a8:	b	85f4 <BZ2_bzCompress@@Base+0x2c>
    86ac:	cmp	w1, #0x1
    86b0:	b.ne	86dc <BZ2_bzCompress@@Base+0x114>  // b.any
    86b4:	ldr	w10, [x19, #16]
    86b8:	ldr	w9, [x9, #8]
    86bc:	cmp	w10, w9
    86c0:	b.ne	86dc <BZ2_bzCompress@@Base+0x114>  // b.any
    86c4:	mov	x0, x8
    86c8:	bl	8744 <BZ2_bzCompress@@Base+0x17c>
    86cc:	ldr	w8, [x19, #16]
    86d0:	cbz	w8, 86ec <BZ2_bzCompress@@Base+0x124>
    86d4:	mov	w0, #0x2                   	// #2
    86d8:	b	85f4 <BZ2_bzCompress@@Base+0x2c>
    86dc:	mov	w0, #0xffffffff            	// #-1
    86e0:	b	85f4 <BZ2_bzCompress@@Base+0x2c>
    86e4:	mov	w0, wzr
    86e8:	b	85f4 <BZ2_bzCompress@@Base+0x2c>
    86ec:	mov	x0, x19
    86f0:	bl	8880 <BZ2_bzCompress@@Base+0x2b8>
    86f4:	tst	w0, #0xff
    86f8:	b.eq	86d4 <BZ2_bzCompress@@Base+0x10c>  // b.none
    86fc:	ldp	w9, w8, [x19, #116]
    8700:	mov	w0, #0x2                   	// #2
    8704:	cmp	w8, w9
    8708:	b.lt	85f4 <BZ2_bzCompress@@Base+0x2c>  // b.tstop
    870c:	str	w0, [x19, #8]
    8710:	mov	w0, #0x1                   	// #1
    8714:	b	85f4 <BZ2_bzCompress@@Base+0x2c>
    8718:	mov	x0, x19
    871c:	bl	8880 <BZ2_bzCompress@@Base+0x2b8>
    8720:	tst	w0, #0xff
    8724:	b.eq	8684 <BZ2_bzCompress@@Base+0xbc>  // b.none
    8728:	ldp	w9, w8, [x19, #116]
    872c:	cmp	w8, w9
    8730:	b.lt	8684 <BZ2_bzCompress@@Base+0xbc>  // b.tstop
    8734:	mov	w8, #0x1                   	// #1
    8738:	str	w8, [x19, #8]
    873c:	mov	w0, #0x4                   	// #4
    8740:	b	85f4 <BZ2_bzCompress@@Base+0x2c>
    8744:	stp	x29, x30, [sp, #-64]!
    8748:	str	x23, [sp, #16]
    874c:	stp	x22, x21, [sp, #32]
    8750:	stp	x20, x19, [sp, #48]
    8754:	mov	x29, sp
    8758:	ldr	x19, [x0, #48]
    875c:	mov	w20, wzr
    8760:	mov	w21, wzr
    8764:	mov	w22, #0x2                   	// #2
    8768:	mov	w23, #0x1                   	// #1
    876c:	b	877c <BZ2_bzCompress@@Base+0x1b4>
    8770:	ldr	w8, [x19, #12]
    8774:	cmp	w8, #0x2
    8778:	b.eq	87f8 <BZ2_bzCompress@@Base+0x230>  // b.none
    877c:	ldr	w8, [x19, #12]
    8780:	cmp	w8, #0x1
    8784:	b.ne	8770 <BZ2_bzCompress@@Base+0x1a8>  // b.any
    8788:	mov	x0, x19
    878c:	bl	a7d4 <BZ2_bzerror@@Base+0x20>
    8790:	ldp	w9, w8, [x19, #116]
    8794:	orr	w20, w0, w20
    8798:	cmp	w8, w9
    879c:	b.lt	8860 <BZ2_bzCompress@@Base+0x298>  // b.tstop
    87a0:	ldr	w8, [x19, #8]
    87a4:	cmp	w8, #0x4
    87a8:	b.ne	87c4 <BZ2_bzCompress@@Base+0x1fc>  // b.any
    87ac:	ldr	w8, [x19, #16]
    87b0:	cbnz	w8, 87c4 <BZ2_bzCompress@@Base+0x1fc>
    87b4:	mov	x0, x19
    87b8:	bl	8880 <BZ2_bzCompress@@Base+0x2b8>
    87bc:	tst	w0, #0xff
    87c0:	b.ne	8860 <BZ2_bzCompress@@Base+0x298>  // b.any
    87c4:	mov	x0, x19
    87c8:	bl	8584 <BZ2_bzCompressInit@@Base+0x204>
    87cc:	ldr	w8, [x19, #8]
    87d0:	str	w22, [x19, #12]
    87d4:	cmp	w8, #0x3
    87d8:	b.ne	8770 <BZ2_bzCompress@@Base+0x1a8>  // b.any
    87dc:	ldr	w8, [x19, #16]
    87e0:	cbnz	w8, 8770 <BZ2_bzCompress@@Base+0x1a8>
    87e4:	mov	x0, x19
    87e8:	bl	8880 <BZ2_bzCompress@@Base+0x2b8>
    87ec:	tst	w0, #0xff
    87f0:	b.eq	8770 <BZ2_bzCompress@@Base+0x1a8>  // b.none
    87f4:	b	8860 <BZ2_bzCompress@@Base+0x298>
    87f8:	mov	x0, x19
    87fc:	bl	a864 <BZ2_bzerror@@Base+0xb0>
    8800:	ldr	w8, [x19, #8]
    8804:	orr	w21, w0, w21
    8808:	cmp	w8, #0x2
    880c:	b.eq	8818 <BZ2_bzCompress@@Base+0x250>  // b.none
    8810:	ldr	w8, [x19, #16]
    8814:	cbz	w8, 883c <BZ2_bzCompress@@Base+0x274>
    8818:	ldp	w8, w9, [x19, #108]
    881c:	cmp	w8, w9
    8820:	b.ge	8834 <BZ2_bzCompress@@Base+0x26c>  // b.tcont
    8824:	ldr	x8, [x19]
    8828:	ldr	w8, [x8, #8]
    882c:	cbnz	w8, 877c <BZ2_bzCompress@@Base+0x1b4>
    8830:	b	8860 <BZ2_bzCompress@@Base+0x298>
    8834:	mov	w1, wzr
    8838:	b	8850 <BZ2_bzCompress@@Base+0x288>
    883c:	mov	x0, x19
    8840:	bl	aab8 <BZ2_bzerror@@Base+0x304>
    8844:	ldr	w8, [x19, #8]
    8848:	cmp	w8, #0x4
    884c:	cset	w1, eq  // eq = none
    8850:	mov	x0, x19
    8854:	bl	1650 <BZ2_compressBlock@plt>
    8858:	str	w23, [x19, #12]
    885c:	b	877c <BZ2_bzCompress@@Base+0x1b4>
    8860:	orr	w8, w21, w20
    8864:	ldp	x20, x19, [sp, #48]
    8868:	ldp	x22, x21, [sp, #32]
    886c:	ldr	x23, [sp, #16]
    8870:	tst	w8, #0xff
    8874:	cset	w0, ne  // ne = any
    8878:	ldp	x29, x30, [sp], #64
    887c:	ret
    8880:	ldr	w8, [x0, #92]
    8884:	cmp	w8, #0xff
    8888:	b.hi	88a0 <BZ2_bzCompress@@Base+0x2d8>  // b.pmore
    888c:	ldr	w8, [x0, #96]
    8890:	cmp	w8, #0x0
    8894:	b.le	88a0 <BZ2_bzCompress@@Base+0x2d8>
    8898:	mov	w0, wzr
    889c:	ret
    88a0:	mov	w0, #0x1                   	// #1
    88a4:	ret

00000000000088a8 <BZ2_bzCompressEnd@@Base>:
    88a8:	stp	x29, x30, [sp, #-32]!
    88ac:	stp	x20, x19, [sp, #16]
    88b0:	mov	x29, sp
    88b4:	cbz	x0, 88d0 <BZ2_bzCompressEnd@@Base+0x28>
    88b8:	ldr	x20, [x0, #48]
    88bc:	mov	x19, x0
    88c0:	cbz	x20, 88d0 <BZ2_bzCompressEnd@@Base+0x28>
    88c4:	ldr	x8, [x20]
    88c8:	cmp	x8, x19
    88cc:	b.eq	88e0 <BZ2_bzCompressEnd@@Base+0x38>  // b.none
    88d0:	mov	w0, #0xfffffffe            	// #-2
    88d4:	ldp	x20, x19, [sp, #16]
    88d8:	ldp	x29, x30, [sp], #32
    88dc:	ret
    88e0:	ldr	x1, [x20, #24]
    88e4:	cbz	x1, 88f0 <BZ2_bzCompressEnd@@Base+0x48>
    88e8:	ldp	x8, x0, [x19, #64]
    88ec:	blr	x8
    88f0:	ldr	x1, [x20, #32]
    88f4:	cbz	x1, 8900 <BZ2_bzCompressEnd@@Base+0x58>
    88f8:	ldp	x8, x0, [x19, #64]
    88fc:	blr	x8
    8900:	ldr	x1, [x20, #40]
    8904:	cbz	x1, 8910 <BZ2_bzCompressEnd@@Base+0x68>
    8908:	ldp	x8, x0, [x19, #64]
    890c:	blr	x8
    8910:	ldp	x8, x0, [x19, #64]
    8914:	ldr	x1, [x19, #48]
    8918:	blr	x8
    891c:	mov	w0, wzr
    8920:	str	xzr, [x19, #48]
    8924:	b	88d4 <BZ2_bzCompressEnd@@Base+0x2c>

0000000000008928 <BZ2_bzDecompressInit@@Base>:
    8928:	stp	x29, x30, [sp, #-48]!
    892c:	str	x21, [sp, #16]
    8930:	stp	x20, x19, [sp, #32]
    8934:	mov	x29, sp
    8938:	mov	x21, x0
    893c:	cmp	w1, #0x4
    8940:	mov	w0, #0xfffffffe            	// #-2
    8944:	b.hi	89ec <BZ2_bzDecompressInit@@Base+0xc4>  // b.pmore
    8948:	cbz	x21, 89ec <BZ2_bzDecompressInit@@Base+0xc4>
    894c:	mov	w20, w2
    8950:	cmp	w2, #0x1
    8954:	b.hi	89ec <BZ2_bzDecompressInit@@Base+0xc4>  // b.pmore
    8958:	ldr	x8, [x21, #56]
    895c:	mov	w19, w1
    8960:	cbz	x8, 89c4 <BZ2_bzDecompressInit@@Base+0x9c>
    8964:	ldr	x8, [x21, #64]
    8968:	cbz	x8, 89d8 <BZ2_bzDecompressInit@@Base+0xb0>
    896c:	ldr	x8, [x21, #56]
    8970:	ldr	x0, [x21, #72]
    8974:	mov	w1, #0xfa90                	// #64144
    8978:	mov	w2, #0x1                   	// #1
    897c:	blr	x8
    8980:	cbz	x0, 89e8 <BZ2_bzDecompressInit@@Base+0xc0>
    8984:	mov	x8, x0
    8988:	mov	w0, wzr
    898c:	mov	w9, #0xa                   	// #10
    8990:	str	x21, [x8]
    8994:	str	x8, [x21, #48]
    8998:	str	xzr, [x8, #32]
    899c:	str	wzr, [x8, #3188]
    89a0:	str	w9, [x8, #8]
    89a4:	stur	xzr, [x21, #12]
    89a8:	stur	xzr, [x21, #36]
    89ac:	strb	w20, [x8, #44]
    89b0:	str	xzr, [x8, #3160]
    89b4:	str	xzr, [x8, #3168]
    89b8:	str	xzr, [x8, #3152]
    89bc:	stp	wzr, w19, [x8, #48]
    89c0:	b	89ec <BZ2_bzDecompressInit@@Base+0xc4>
    89c4:	adrp	x8, 8000 <BZ2_decompress@@Base+0x2808>
    89c8:	add	x8, x8, #0x540
    89cc:	str	x8, [x21, #56]
    89d0:	ldr	x8, [x21, #64]
    89d4:	cbnz	x8, 896c <BZ2_bzDecompressInit@@Base+0x44>
    89d8:	adrp	x8, 8000 <BZ2_decompress@@Base+0x2808>
    89dc:	add	x8, x8, #0x55c
    89e0:	str	x8, [x21, #64]
    89e4:	b	896c <BZ2_bzDecompressInit@@Base+0x44>
    89e8:	mov	w0, #0xfffffffd            	// #-3
    89ec:	ldp	x20, x19, [sp, #32]
    89f0:	ldr	x21, [sp, #16]
    89f4:	ldp	x29, x30, [sp], #48
    89f8:	ret

00000000000089fc <BZ2_indexIntoF@@Base>:
    89fc:	mov	w8, w0
    8a00:	mov	w0, wzr
    8a04:	mov	w9, #0x100                 	// #256
    8a08:	add	w10, w0, w9
    8a0c:	asr	w10, w10, #1
    8a10:	ldr	w11, [x1, w10, sxtw #2]
    8a14:	cmp	w11, w8
    8a18:	csel	w9, w10, w9, gt
    8a1c:	csel	w0, w0, w10, gt
    8a20:	sub	w10, w9, w0
    8a24:	cmp	w10, #0x1
    8a28:	b.ne	8a08 <BZ2_indexIntoF@@Base+0xc>  // b.any
    8a2c:	ret

0000000000008a30 <BZ2_bzDecompress@@Base>:
    8a30:	stp	x29, x30, [sp, #-80]!
    8a34:	stp	x26, x25, [sp, #16]
    8a38:	stp	x24, x23, [sp, #32]
    8a3c:	stp	x22, x21, [sp, #48]
    8a40:	stp	x20, x19, [sp, #64]
    8a44:	mov	x29, sp
    8a48:	cbz	x0, 8a60 <BZ2_bzDecompress@@Base+0x30>
    8a4c:	ldr	x19, [x0, #48]
    8a50:	cbz	x19, 8a60 <BZ2_bzDecompress@@Base+0x30>
    8a54:	ldr	x8, [x19]
    8a58:	cmp	x8, x0
    8a5c:	b.eq	8a80 <BZ2_bzDecompress@@Base+0x50>  // b.none
    8a60:	mov	w20, #0xfffffffe            	// #-2
    8a64:	mov	w0, w20
    8a68:	ldp	x20, x19, [sp, #64]
    8a6c:	ldp	x22, x21, [sp, #48]
    8a70:	ldp	x24, x23, [sp, #32]
    8a74:	ldp	x26, x25, [sp, #16]
    8a78:	ldp	x29, x30, [sp], #80
    8a7c:	ret
    8a80:	adrp	x23, 1b000 <BZ2_bzerror@@Base+0x1084c>
    8a84:	ldr	x23, [x23, #4016]
    8a88:	mov	w8, #0xfa50                	// #64080
    8a8c:	adrp	x21, b000 <BZ2_bzerror@@Base+0x84c>
    8a90:	adrp	x22, b000 <BZ2_bzerror@@Base+0x84c>
    8a94:	add	x21, x21, #0x553
    8a98:	mov	w24, #0xe                   	// #14
    8a9c:	add	x22, x22, #0x565
    8aa0:	add	x25, x19, x8
    8aa4:	mov	w26, #0x4                   	// #4
    8aa8:	b	8ac0 <BZ2_bzDecompress@@Base+0x90>
    8aac:	cmp	w8, #0x1
    8ab0:	b.eq	8be8 <BZ2_bzDecompress@@Base+0x1b8>  // b.none
    8ab4:	ldr	w8, [x19, #8]
    8ab8:	cmp	w8, #0xa
    8abc:	b.ge	8b5c <BZ2_bzDecompress@@Base+0x12c>  // b.tcont
    8ac0:	ldr	w8, [x19, #8]
    8ac4:	cmp	w8, #0x2
    8ac8:	b.ne	8aac <BZ2_bzDecompress@@Base+0x7c>  // b.any
    8acc:	ldrb	w8, [x19, #44]
    8ad0:	cbz	w8, 8ae8 <BZ2_bzDecompress@@Base+0xb8>
    8ad4:	mov	x0, x19
    8ad8:	bl	8c00 <BZ2_bzDecompress@@Base+0x1d0>
    8adc:	tst	w0, #0xff
    8ae0:	b.eq	8af8 <BZ2_bzDecompress@@Base+0xc8>  // b.none
    8ae4:	b	8bf8 <BZ2_bzDecompress@@Base+0x1c8>
    8ae8:	mov	x0, x19
    8aec:	bl	9300 <BZ2_bzDecompress@@Base+0x8d0>
    8af0:	tst	w0, #0xff
    8af4:	b.ne	8bf8 <BZ2_bzDecompress@@Base+0x1c8>  // b.any
    8af8:	ldr	w8, [x25]
    8afc:	ldr	w9, [x19, #1092]
    8b00:	add	w8, w8, #0x1
    8b04:	cmp	w9, w8
    8b08:	b.ne	8bf0 <BZ2_bzDecompress@@Base+0x1c0>  // b.any
    8b0c:	ldr	w8, [x19, #16]
    8b10:	cbnz	w8, 8bf0 <BZ2_bzDecompress@@Base+0x1c0>
    8b14:	ldr	w8, [x19, #3184]
    8b18:	ldr	w9, [x19, #52]
    8b1c:	mvn	w3, w8
    8b20:	cmp	w9, #0x2
    8b24:	str	w3, [x19, #3184]
    8b28:	b.gt	8b94 <BZ2_bzDecompress@@Base+0x164>
    8b2c:	ldr	w8, [x19, #52]
    8b30:	cmp	w8, #0x2
    8b34:	b.ge	8ba8 <BZ2_bzDecompress@@Base+0x178>  // b.tcont
    8b38:	ldr	w8, [x19, #3184]
    8b3c:	ldr	w9, [x19, #3176]
    8b40:	cmp	w8, w9
    8b44:	b.ne	8bf8 <BZ2_bzDecompress@@Base+0x1c8>  // b.any
    8b48:	ldr	w9, [x19, #3188]
    8b4c:	str	w24, [x19, #8]
    8b50:	eor	w8, w8, w9, ror #31
    8b54:	str	w8, [x19, #3188]
    8b58:	b	8ab4 <BZ2_bzDecompress@@Base+0x84>
    8b5c:	mov	x0, x19
    8b60:	bl	1600 <BZ2_decompress@plt>
    8b64:	cmp	w0, #0x4
    8b68:	b.ne	8bb8 <BZ2_bzDecompress@@Base+0x188>  // b.any
    8b6c:	ldr	w8, [x19, #52]
    8b70:	cmp	w8, #0x3
    8b74:	b.ge	8bd0 <BZ2_bzDecompress@@Base+0x1a0>  // b.tcont
    8b78:	ldr	w9, [x19, #3188]
    8b7c:	ldr	w10, [x19, #3180]
    8b80:	mov	w8, wzr
    8b84:	cmp	w9, w10
    8b88:	cneg	w20, w26, ne  // ne = any
    8b8c:	tbnz	w8, #0, 8ac0 <BZ2_bzDecompress@@Base+0x90>
    8b90:	b	8a64 <BZ2_bzDecompress@@Base+0x34>
    8b94:	ldr	x0, [x23]
    8b98:	ldr	w2, [x19, #3176]
    8b9c:	mov	x1, x21
    8ba0:	bl	1750 <fprintf@plt>
    8ba4:	b	8b2c <BZ2_bzDecompress@@Base+0xfc>
    8ba8:	ldr	x1, [x23]
    8bac:	mov	w0, #0x5d                  	// #93
    8bb0:	bl	1520 <fputc@plt>
    8bb4:	b	8b38 <BZ2_bzDecompress@@Base+0x108>
    8bb8:	ldr	w8, [x19, #8]
    8bbc:	cmp	w8, #0x2
    8bc0:	cset	w8, eq  // eq = none
    8bc4:	csel	w20, w20, w0, eq  // eq = none
    8bc8:	tbnz	w8, #0, 8ac0 <BZ2_bzDecompress@@Base+0x90>
    8bcc:	b	8a64 <BZ2_bzDecompress@@Base+0x34>
    8bd0:	ldr	x0, [x23]
    8bd4:	ldr	w2, [x19, #3180]
    8bd8:	ldr	w3, [x19, #3188]
    8bdc:	mov	x1, x22
    8be0:	bl	1750 <fprintf@plt>
    8be4:	b	8b78 <BZ2_bzDecompress@@Base+0x148>
    8be8:	mov	w20, #0xffffffff            	// #-1
    8bec:	b	8a64 <BZ2_bzDecompress@@Base+0x34>
    8bf0:	mov	w20, wzr
    8bf4:	b	8a64 <BZ2_bzDecompress@@Base+0x34>
    8bf8:	mov	w20, #0xfffffffc            	// #-4
    8bfc:	b	8a64 <BZ2_bzDecompress@@Base+0x34>
    8c00:	sub	sp, sp, #0x80
    8c04:	stp	x29, x30, [sp, #32]
    8c08:	stp	x28, x27, [sp, #48]
    8c0c:	stp	x26, x25, [sp, #64]
    8c10:	stp	x24, x23, [sp, #80]
    8c14:	stp	x22, x21, [sp, #96]
    8c18:	stp	x20, x19, [sp, #112]
    8c1c:	add	x29, sp, #0x20
    8c20:	ldr	x8, [x0]
    8c24:	ldrb	w10, [x0, #20]
    8c28:	mov	x19, x0
    8c2c:	ldr	w9, [x8, #32]
    8c30:	cbz	w10, 9024 <BZ2_bzDecompress@@Base+0x5f4>
    8c34:	cbz	w9, 92d4 <BZ2_bzDecompress@@Base+0x8a4>
    8c38:	mov	w9, #0xfa50                	// #64080
    8c3c:	add	x10, x19, #0x448
    8c40:	add	x9, x19, x9
    8c44:	stur	x10, [x29, #-8]
    8c48:	str	x9, [sp, #16]
    8c4c:	adrp	x12, 1b000 <BZ2_bzerror@@Base+0x1084c>
    8c50:	ldr	x12, [x12, #4024]
    8c54:	b	8c64 <BZ2_bzDecompress@@Base+0x234>
    8c58:	ldr	x8, [x19]
    8c5c:	ldr	w9, [x8, #32]
    8c60:	cbz	w9, 92d4 <BZ2_bzDecompress@@Base+0x8a4>
    8c64:	ldr	w9, [x19, #16]
    8c68:	cbz	w9, 8cd4 <BZ2_bzDecompress@@Base+0x2a4>
    8c6c:	ldrb	w9, [x19, #12]
    8c70:	ldr	x8, [x8, #24]
    8c74:	strb	w9, [x8]
    8c78:	ldr	w9, [x19, #3184]
    8c7c:	ldrb	w8, [x19, #12]
    8c80:	ldr	w10, [x19, #16]
    8c84:	eor	w8, w8, w9, lsr #24
    8c88:	ldr	w11, [x12, w8, uxtw #2]
    8c8c:	ldr	x8, [x19]
    8c90:	sub	w10, w10, #0x1
    8c94:	str	w10, [x19, #16]
    8c98:	eor	w9, w11, w9, lsl #8
    8c9c:	str	w9, [x19, #3184]
    8ca0:	ldr	x9, [x8, #24]
    8ca4:	ldp	w10, w11, [x8, #32]
    8ca8:	add	x9, x9, #0x1
    8cac:	str	x9, [x8, #24]
    8cb0:	sub	w9, w10, #0x1
    8cb4:	str	w9, [x8, #32]
    8cb8:	adds	w9, w11, #0x1
    8cbc:	str	w9, [x8, #36]
    8cc0:	b.cc	8c58 <BZ2_bzDecompress@@Base+0x228>  // b.lo, b.ul, b.last
    8cc4:	ldr	w9, [x8, #40]
    8cc8:	add	w9, w9, #0x1
    8ccc:	str	w9, [x8, #40]
    8cd0:	b	8c58 <BZ2_bzDecompress@@Base+0x228>
    8cd4:	ldr	x8, [sp, #16]
    8cd8:	ldr	w28, [x19, #1092]
    8cdc:	ldr	w22, [x8]
    8ce0:	add	w8, w22, #0x1
    8ce4:	cmp	w28, w8
    8ce8:	b.eq	92d4 <BZ2_bzDecompress@@Base+0x8a4>  // b.none
    8cec:	mov	w0, #0x1                   	// #1
    8cf0:	b.gt	92d8 <BZ2_bzDecompress@@Base+0x8a8>
    8cf4:	ldr	w8, [x19, #40]
    8cf8:	ldp	w21, w27, [x19, #60]
    8cfc:	mov	w9, #0x86a0                	// #34464
    8d00:	movk	w9, #0x1, lsl #16
    8d04:	mul	w23, w8, w9
    8d08:	cmp	w21, w23
    8d0c:	str	w0, [x19, #16]
    8d10:	strb	w27, [x19, #12]
    8d14:	b.cs	92d8 <BZ2_bzDecompress@@Base+0x8a8>  // b.hs, b.nlast
    8d18:	ldur	x1, [x29, #-8]
    8d1c:	mov	w0, w21
    8d20:	bl	16d0 <BZ2_indexIntoF@plt>
    8d24:	ldr	x11, [x19, #3168]
    8d28:	ldr	x25, [x19, #3160]
    8d2c:	lsr	x8, x21, #1
    8d30:	lsl	w9, w21, #2
    8d34:	ldrb	w8, [x11, x8]
    8d38:	and	x9, x9, #0x4
    8d3c:	ldrh	w20, [x25, x21, lsl #1]
    8d40:	lsr	x8, x8, x9
    8d44:	ldr	w9, [x19, #24]
    8d48:	lsl	w8, w8, #16
    8d4c:	and	x8, x8, #0xf0000
    8d50:	orr	x21, x8, x20
    8d54:	str	w21, [x19, #60]
    8d58:	cbnz	w9, 8d7c <BZ2_bzDecompress@@Base+0x34c>
    8d5c:	adrp	x9, 1b000 <BZ2_bzerror@@Base+0x1084c>
    8d60:	ldrsw	x8, [x19, #28]
    8d64:	ldr	x9, [x9, #4048]
    8d68:	add	w10, w8, #0x1
    8d6c:	ldr	w9, [x9, x8, lsl #2]
    8d70:	cmp	w10, #0x200
    8d74:	csinc	w8, wzr, w8, eq  // eq = none
    8d78:	stp	w9, w8, [x19, #24]
    8d7c:	ldr	w8, [x19, #24]
    8d80:	add	w26, w28, #0x1
    8d84:	cmp	w28, w22
    8d88:	str	w26, [x19, #1092]
    8d8c:	sub	w24, w8, #0x1
    8d90:	str	w24, [x19, #24]
    8d94:	b.eq	900c <BZ2_bzDecompress@@Base+0x5dc>  // b.none
    8d98:	cmp	w24, #0x1
    8d9c:	cset	w8, eq  // eq = none
    8da0:	and	w9, w0, #0xff
    8da4:	eor	w8, w9, w8
    8da8:	cmp	w8, w27
    8dac:	b.ne	9008 <BZ2_bzDecompress@@Base+0x5d8>  // b.any
    8db0:	cmp	w21, w23
    8db4:	mov	w8, #0x2                   	// #2
    8db8:	str	w8, [x19, #16]
    8dbc:	b.cs	92f8 <BZ2_bzDecompress@@Base+0x8c8>  // b.hs, b.nlast
    8dc0:	ldur	x1, [x29, #-8]
    8dc4:	mov	w0, w21
    8dc8:	str	x11, [sp, #8]
    8dcc:	bl	16d0 <BZ2_indexIntoF@plt>
    8dd0:	ldr	x9, [sp, #8]
    8dd4:	lsr	x8, x21, #1
    8dd8:	ldrh	w11, [x25, x21, lsl #1]
    8ddc:	ldrb	w8, [x9, x8]
    8de0:	lsl	w9, w20, #2
    8de4:	and	x9, x9, #0x4
    8de8:	lsr	x8, x8, x9
    8dec:	lsl	w8, w8, #16
    8df0:	and	x8, x8, #0xf0000
    8df4:	orr	x21, x8, x11
    8df8:	str	w21, [x19, #60]
    8dfc:	cbnz	w24, 8e20 <BZ2_bzDecompress@@Base+0x3f0>
    8e00:	adrp	x9, 1b000 <BZ2_bzerror@@Base+0x1084c>
    8e04:	ldrsw	x8, [x19, #28]
    8e08:	ldr	x9, [x9, #4048]
    8e0c:	add	w10, w8, #0x1
    8e10:	ldr	w9, [x9, x8, lsl #2]
    8e14:	cmp	w10, #0x200
    8e18:	csinc	w8, wzr, w8, eq  // eq = none
    8e1c:	stp	w9, w8, [x19, #24]
    8e20:	ldr	w8, [x19, #24]
    8e24:	add	w20, w28, #0x2
    8e28:	cmp	w26, w22
    8e2c:	str	w20, [x19, #1092]
    8e30:	sub	w24, w8, #0x1
    8e34:	str	w24, [x19, #24]
    8e38:	b.eq	900c <BZ2_bzDecompress@@Base+0x5dc>  // b.none
    8e3c:	cmp	w24, #0x1
    8e40:	cset	w8, eq  // eq = none
    8e44:	and	w9, w0, #0xff
    8e48:	eor	w8, w9, w8
    8e4c:	cmp	w8, w27
    8e50:	b.ne	9008 <BZ2_bzDecompress@@Base+0x5d8>  // b.any
    8e54:	cmp	w21, w23
    8e58:	mov	w8, #0x3                   	// #3
    8e5c:	str	w8, [x19, #16]
    8e60:	b.cs	92f8 <BZ2_bzDecompress@@Base+0x8c8>  // b.hs, b.nlast
    8e64:	ldur	x1, [x29, #-8]
    8e68:	mov	w0, w21
    8e6c:	mov	x26, x11
    8e70:	bl	16d0 <BZ2_indexIntoF@plt>
    8e74:	ldr	x9, [sp, #8]
    8e78:	lsr	x8, x21, #1
    8e7c:	ldrh	w11, [x25, x21, lsl #1]
    8e80:	ldrb	w8, [x9, x8]
    8e84:	lsl	w9, w26, #2
    8e88:	and	x9, x9, #0x4
    8e8c:	lsr	x8, x8, x9
    8e90:	lsl	w8, w8, #16
    8e94:	and	x8, x8, #0xf0000
    8e98:	orr	x21, x8, x11
    8e9c:	str	w21, [x19, #60]
    8ea0:	cbnz	w24, 8ec4 <BZ2_bzDecompress@@Base+0x494>
    8ea4:	adrp	x9, 1b000 <BZ2_bzerror@@Base+0x1084c>
    8ea8:	ldrsw	x8, [x19, #28]
    8eac:	ldr	x9, [x9, #4048]
    8eb0:	add	w10, w8, #0x1
    8eb4:	ldr	w9, [x9, x8, lsl #2]
    8eb8:	cmp	w10, #0x200
    8ebc:	csinc	w8, wzr, w8, eq  // eq = none
    8ec0:	stp	w9, w8, [x19, #24]
    8ec4:	ldr	w8, [x19, #24]
    8ec8:	add	w9, w28, #0x3
    8ecc:	cmp	w20, w22
    8ed0:	str	w9, [x19, #1092]
    8ed4:	sub	w22, w8, #0x1
    8ed8:	str	w22, [x19, #24]
    8edc:	b.eq	900c <BZ2_bzDecompress@@Base+0x5dc>  // b.none
    8ee0:	cmp	w22, #0x1
    8ee4:	cset	w8, eq  // eq = none
    8ee8:	and	w9, w0, #0xff
    8eec:	eor	w8, w9, w8
    8ef0:	cmp	w8, w27
    8ef4:	b.ne	9008 <BZ2_bzDecompress@@Base+0x5d8>  // b.any
    8ef8:	cmp	w21, w23
    8efc:	b.cs	92f8 <BZ2_bzDecompress@@Base+0x8c8>  // b.hs, b.nlast
    8f00:	ldur	x1, [x29, #-8]
    8f04:	mov	w0, w21
    8f08:	mov	x24, x11
    8f0c:	bl	16d0 <BZ2_indexIntoF@plt>
    8f10:	ldr	x11, [sp, #8]
    8f14:	lsr	x8, x21, #1
    8f18:	lsl	w9, w24, #2
    8f1c:	ldrh	w20, [x25, x21, lsl #1]
    8f20:	ldrb	w8, [x11, x8]
    8f24:	and	x9, x9, #0x4
    8f28:	lsr	x8, x8, x9
    8f2c:	lsl	w8, w8, #16
    8f30:	and	x8, x8, #0xf0000
    8f34:	orr	x21, x8, x20
    8f38:	str	w21, [x19, #60]
    8f3c:	cbnz	w22, 8f60 <BZ2_bzDecompress@@Base+0x530>
    8f40:	adrp	x9, 1b000 <BZ2_bzerror@@Base+0x1084c>
    8f44:	ldrsw	x8, [x19, #28]
    8f48:	ldr	x9, [x9, #4048]
    8f4c:	add	w10, w8, #0x1
    8f50:	ldr	w9, [x9, x8, lsl #2]
    8f54:	cmp	w10, #0x200
    8f58:	csinc	w8, wzr, w8, eq  // eq = none
    8f5c:	stp	w9, w8, [x19, #24]
    8f60:	ldr	w8, [x19, #24]
    8f64:	and	w10, w0, #0xff
    8f68:	add	w9, w28, #0x4
    8f6c:	str	w9, [x19, #1092]
    8f70:	sub	w22, w8, #0x1
    8f74:	cmp	w22, #0x1
    8f78:	cset	w8, eq  // eq = none
    8f7c:	eor	w8, w10, w8
    8f80:	add	w8, w8, #0x4
    8f84:	cmp	w21, w23
    8f88:	str	w22, [x19, #24]
    8f8c:	str	w8, [x19, #16]
    8f90:	b.cs	92f8 <BZ2_bzDecompress@@Base+0x8c8>  // b.hs, b.nlast
    8f94:	ldur	x1, [x29, #-8]
    8f98:	mov	w0, w21
    8f9c:	mov	x23, x11
    8fa0:	bl	16d0 <BZ2_indexIntoF@plt>
    8fa4:	str	w0, [x19, #64]
    8fa8:	lsr	x8, x21, #1
    8fac:	ldrb	w8, [x23, x8]
    8fb0:	ldrh	w9, [x25, x21, lsl #1]
    8fb4:	ubfiz	w10, w20, #2, #1
    8fb8:	lsr	w8, w8, w10
    8fbc:	bfi	w9, w8, #16, #4
    8fc0:	str	w9, [x19, #60]
    8fc4:	cbnz	w22, 8fe8 <BZ2_bzDecompress@@Base+0x5b8>
    8fc8:	adrp	x9, 1b000 <BZ2_bzerror@@Base+0x1084c>
    8fcc:	ldrsw	x8, [x19, #28]
    8fd0:	ldr	x9, [x9, #4048]
    8fd4:	add	w10, w8, #0x1
    8fd8:	ldr	w9, [x9, x8, lsl #2]
    8fdc:	cmp	w10, #0x200
    8fe0:	csinc	w8, wzr, w8, eq  // eq = none
    8fe4:	stp	w9, w8, [x19, #24]
    8fe8:	ldr	w8, [x19, #24]
    8fec:	add	w9, w28, #0x5
    8ff0:	str	w9, [x19, #1092]
    8ff4:	sub	w8, w8, #0x1
    8ff8:	cmp	w8, #0x1
    8ffc:	str	w8, [x19, #24]
    9000:	cset	w8, eq  // eq = none
    9004:	eor	w8, w0, w8
    9008:	str	w8, [x19, #64]
    900c:	ldr	x8, [x19]
    9010:	adrp	x12, 1b000 <BZ2_bzerror@@Base+0x1084c>
    9014:	ldr	w9, [x8, #32]
    9018:	ldr	x12, [x12, #4024]
    901c:	cbnz	w9, 8c64 <BZ2_bzDecompress@@Base+0x234>
    9020:	b	92d4 <BZ2_bzDecompress@@Base+0x8a4>
    9024:	cbz	w9, 92d4 <BZ2_bzDecompress@@Base+0x8a4>
    9028:	mov	w9, #0xfa50                	// #64080
    902c:	add	x9, x19, x9
    9030:	str	x9, [sp, #16]
    9034:	adrp	x12, 1b000 <BZ2_bzerror@@Base+0x1084c>
    9038:	ldr	x12, [x12, #4024]
    903c:	add	x1, x19, #0x448
    9040:	stur	x1, [x29, #-8]
    9044:	b	9054 <BZ2_bzDecompress@@Base+0x624>
    9048:	ldr	x8, [x19]
    904c:	ldr	w9, [x8, #32]
    9050:	cbz	w9, 92d4 <BZ2_bzDecompress@@Base+0x8a4>
    9054:	ldr	w9, [x19, #16]
    9058:	cbz	w9, 90c4 <BZ2_bzDecompress@@Base+0x694>
    905c:	ldrb	w9, [x19, #12]
    9060:	ldr	x8, [x8, #24]
    9064:	strb	w9, [x8]
    9068:	ldr	w9, [x19, #3184]
    906c:	ldrb	w8, [x19, #12]
    9070:	ldr	w10, [x19, #16]
    9074:	eor	w8, w8, w9, lsr #24
    9078:	ldr	w11, [x12, w8, uxtw #2]
    907c:	ldr	x8, [x19]
    9080:	sub	w10, w10, #0x1
    9084:	str	w10, [x19, #16]
    9088:	eor	w9, w11, w9, lsl #8
    908c:	str	w9, [x19, #3184]
    9090:	ldr	x9, [x8, #24]
    9094:	ldp	w10, w11, [x8, #32]
    9098:	add	x9, x9, #0x1
    909c:	str	x9, [x8, #24]
    90a0:	sub	w9, w10, #0x1
    90a4:	str	w9, [x8, #32]
    90a8:	adds	w9, w11, #0x1
    90ac:	str	w9, [x8, #36]
    90b0:	b.cc	9048 <BZ2_bzDecompress@@Base+0x618>  // b.lo, b.ul, b.last
    90b4:	ldr	w9, [x8, #40]
    90b8:	add	w9, w9, #0x1
    90bc:	str	w9, [x8, #40]
    90c0:	b	9048 <BZ2_bzDecompress@@Base+0x618>
    90c4:	ldr	x8, [sp, #16]
    90c8:	ldr	w27, [x19, #1092]
    90cc:	ldr	w22, [x8]
    90d0:	add	w8, w22, #0x1
    90d4:	cmp	w27, w8
    90d8:	b.eq	92d4 <BZ2_bzDecompress@@Base+0x8a4>  // b.none
    90dc:	mov	w0, #0x1                   	// #1
    90e0:	b.gt	92d8 <BZ2_bzDecompress@@Base+0x8a8>
    90e4:	ldr	w8, [x19, #40]
    90e8:	ldp	w21, w26, [x19, #60]
    90ec:	mov	w9, #0x86a0                	// #34464
    90f0:	movk	w9, #0x1, lsl #16
    90f4:	mul	w24, w8, w9
    90f8:	cmp	w21, w24
    90fc:	str	w0, [x19, #16]
    9100:	strb	w26, [x19, #12]
    9104:	b.cs	92d8 <BZ2_bzDecompress@@Base+0x8a8>  // b.hs, b.nlast
    9108:	mov	w0, w21
    910c:	bl	16d0 <BZ2_indexIntoF@plt>
    9110:	ldr	x28, [x19, #3168]
    9114:	lsr	x8, x21, #1
    9118:	ldr	x23, [x19, #3160]
    911c:	lsl	w9, w21, #2
    9120:	ldrb	w8, [x28, x8]
    9124:	and	x9, x9, #0x4
    9128:	ldrh	w25, [x23, x21, lsl #1]
    912c:	add	w20, w27, #0x1
    9130:	lsr	x8, x8, x9
    9134:	lsl	w8, w8, #16
    9138:	and	x8, x8, #0xf0000
    913c:	cmp	w27, w22
    9140:	orr	x21, x8, x25
    9144:	str	w21, [x19, #60]
    9148:	str	w20, [x19, #1092]
    914c:	b.eq	92bc <BZ2_bzDecompress@@Base+0x88c>  // b.none
    9150:	and	w8, w0, #0xff
    9154:	cmp	w8, w26
    9158:	b.ne	92b8 <BZ2_bzDecompress@@Base+0x888>  // b.any
    915c:	cmp	w21, w24
    9160:	mov	w8, #0x2                   	// #2
    9164:	str	w8, [x19, #16]
    9168:	b.cs	92f8 <BZ2_bzDecompress@@Base+0x8c8>  // b.hs, b.nlast
    916c:	ldur	x1, [x29, #-8]
    9170:	mov	w0, w21
    9174:	bl	16d0 <BZ2_indexIntoF@plt>
    9178:	lsr	x8, x21, #1
    917c:	ldrb	w8, [x28, x8]
    9180:	lsl	w9, w25, #2
    9184:	ldrh	w10, [x23, x21, lsl #1]
    9188:	and	x9, x9, #0x4
    918c:	lsr	x8, x8, x9
    9190:	lsl	w8, w8, #16
    9194:	and	x8, x8, #0xf0000
    9198:	add	w25, w27, #0x2
    919c:	cmp	w20, w22
    91a0:	orr	x21, x8, x10
    91a4:	str	w21, [x19, #60]
    91a8:	str	w25, [x19, #1092]
    91ac:	b.eq	92bc <BZ2_bzDecompress@@Base+0x88c>  // b.none
    91b0:	and	w8, w0, #0xff
    91b4:	cmp	w8, w26
    91b8:	b.ne	92b8 <BZ2_bzDecompress@@Base+0x888>  // b.any
    91bc:	cmp	w21, w24
    91c0:	mov	w8, #0x3                   	// #3
    91c4:	str	w8, [x19, #16]
    91c8:	b.cs	92f8 <BZ2_bzDecompress@@Base+0x8c8>  // b.hs, b.nlast
    91cc:	ldur	x1, [x29, #-8]
    91d0:	mov	w0, w21
    91d4:	mov	x20, x10
    91d8:	bl	16d0 <BZ2_indexIntoF@plt>
    91dc:	lsr	x8, x21, #1
    91e0:	ldrb	w8, [x28, x8]
    91e4:	lsl	w9, w20, #2
    91e8:	ldrh	w11, [x23, x21, lsl #1]
    91ec:	and	x9, x9, #0x4
    91f0:	lsr	x8, x8, x9
    91f4:	lsl	w8, w8, #16
    91f8:	and	x8, x8, #0xf0000
    91fc:	add	w10, w27, #0x3
    9200:	cmp	w25, w22
    9204:	orr	x21, x8, x11
    9208:	str	w21, [x19, #60]
    920c:	str	w10, [x19, #1092]
    9210:	b.eq	92bc <BZ2_bzDecompress@@Base+0x88c>  // b.none
    9214:	and	w8, w0, #0xff
    9218:	cmp	w8, w26
    921c:	b.ne	92b8 <BZ2_bzDecompress@@Base+0x888>  // b.any
    9220:	cmp	w21, w24
    9224:	b.cs	92f8 <BZ2_bzDecompress@@Base+0x8c8>  // b.hs, b.nlast
    9228:	ldur	x22, [x29, #-8]
    922c:	mov	w0, w21
    9230:	mov	x25, x11
    9234:	mov	x1, x22
    9238:	bl	16d0 <BZ2_indexIntoF@plt>
    923c:	lsr	x8, x21, #1
    9240:	ldrb	w8, [x28, x8]
    9244:	add	w9, w27, #0x4
    9248:	ldrh	w20, [x23, x21, lsl #1]
    924c:	str	w9, [x19, #1092]
    9250:	lsl	w9, w25, #2
    9254:	and	x9, x9, #0x4
    9258:	lsr	x8, x8, x9
    925c:	lsl	w8, w8, #16
    9260:	and	x8, x8, #0xf0000
    9264:	and	w10, w0, #0xff
    9268:	orr	x21, x8, x20
    926c:	add	w10, w10, #0x4
    9270:	cmp	w21, w24
    9274:	str	w21, [x19, #60]
    9278:	str	w10, [x19, #16]
    927c:	b.cs	92f8 <BZ2_bzDecompress@@Base+0x8c8>  // b.hs, b.nlast
    9280:	mov	w0, w21
    9284:	mov	x1, x22
    9288:	bl	16d0 <BZ2_indexIntoF@plt>
    928c:	str	w0, [x19, #64]
    9290:	lsr	x8, x21, #1
    9294:	ldrb	w8, [x28, x8]
    9298:	ldrh	w9, [x23, x21, lsl #1]
    929c:	ubfiz	w10, w20, #2, #1
    92a0:	add	w11, w27, #0x5
    92a4:	lsr	w8, w8, w10
    92a8:	bfi	w9, w8, #16, #4
    92ac:	str	w9, [x19, #60]
    92b0:	str	w11, [x19, #1092]
    92b4:	b	92bc <BZ2_bzDecompress@@Base+0x88c>
    92b8:	str	w8, [x19, #64]
    92bc:	ldr	x8, [x19]
    92c0:	adrp	x12, 1b000 <BZ2_bzerror@@Base+0x1084c>
    92c4:	ldur	x1, [x29, #-8]
    92c8:	ldr	w9, [x8, #32]
    92cc:	ldr	x12, [x12, #4024]
    92d0:	cbnz	w9, 9054 <BZ2_bzDecompress@@Base+0x624>
    92d4:	mov	w0, wzr
    92d8:	ldp	x20, x19, [sp, #112]
    92dc:	ldp	x22, x21, [sp, #96]
    92e0:	ldp	x24, x23, [sp, #80]
    92e4:	ldp	x26, x25, [sp, #64]
    92e8:	ldp	x28, x27, [sp, #48]
    92ec:	ldp	x29, x30, [sp, #32]
    92f0:	add	sp, sp, #0x80
    92f4:	ret
    92f8:	mov	w0, #0x1                   	// #1
    92fc:	b	92d8 <BZ2_bzDecompress@@Base+0x8a8>
    9300:	str	x19, [sp, #-16]!
    9304:	ldrb	w8, [x0, #20]
    9308:	cbz	w8, 9610 <BZ2_bzDecompress@@Base+0xbe0>
    930c:	ldr	x8, [x0]
    9310:	ldr	w9, [x8, #32]
    9314:	cbz	w9, 9608 <BZ2_bzDecompress@@Base+0xbd8>
    9318:	adrp	x10, 1b000 <BZ2_bzerror@@Base+0x1084c>
    931c:	adrp	x14, 1b000 <BZ2_bzerror@@Base+0x1084c>
    9320:	ldr	x10, [x10, #4048]
    9324:	ldr	x14, [x14, #4024]
    9328:	mov	w9, #0x86a0                	// #34464
    932c:	mov	w13, #0xfa50                	// #64080
    9330:	movk	w9, #0x1, lsl #16
    9334:	mov	w11, #0x2                   	// #2
    9338:	mov	w12, #0x3                   	// #3
    933c:	add	x13, x0, x13
    9340:	b	9350 <BZ2_bzDecompress@@Base+0x920>
    9344:	ldr	x8, [x0]
    9348:	ldr	w15, [x8, #32]
    934c:	cbz	w15, 9608 <BZ2_bzDecompress@@Base+0xbd8>
    9350:	ldr	w15, [x0, #16]
    9354:	cbz	w15, 93c0 <BZ2_bzDecompress@@Base+0x990>
    9358:	ldrb	w15, [x0, #12]
    935c:	ldr	x8, [x8, #24]
    9360:	strb	w15, [x8]
    9364:	ldr	w15, [x0, #3184]
    9368:	ldrb	w8, [x0, #12]
    936c:	ldr	w16, [x0, #16]
    9370:	eor	w8, w8, w15, lsr #24
    9374:	ldr	w17, [x14, w8, uxtw #2]
    9378:	ldr	x8, [x0]
    937c:	sub	w16, w16, #0x1
    9380:	str	w16, [x0, #16]
    9384:	eor	w15, w17, w15, lsl #8
    9388:	str	w15, [x0, #3184]
    938c:	ldr	x15, [x8, #24]
    9390:	ldp	w16, w17, [x8, #32]
    9394:	add	x15, x15, #0x1
    9398:	str	x15, [x8, #24]
    939c:	sub	w15, w16, #0x1
    93a0:	str	w15, [x8, #32]
    93a4:	adds	w15, w17, #0x1
    93a8:	str	w15, [x8, #36]
    93ac:	b.cc	9344 <BZ2_bzDecompress@@Base+0x914>  // b.lo, b.ul, b.last
    93b0:	ldr	w15, [x8, #40]
    93b4:	add	w15, w15, #0x1
    93b8:	str	w15, [x8, #40]
    93bc:	b	9344 <BZ2_bzDecompress@@Base+0x914>
    93c0:	ldr	w17, [x13]
    93c4:	ldr	w15, [x0, #1092]
    93c8:	add	w8, w17, #0x1
    93cc:	cmp	w15, w8
    93d0:	b.eq	9608 <BZ2_bzDecompress@@Base+0xbd8>  // b.none
    93d4:	mov	w8, #0x1                   	// #1
    93d8:	b.gt	9820 <BZ2_bzDecompress@@Base+0xdf0>
    93dc:	ldr	w16, [x0, #40]
    93e0:	ldp	w1, w18, [x0, #60]
    93e4:	str	w8, [x0, #16]
    93e8:	mul	w16, w16, w9
    93ec:	cmp	w1, w16
    93f0:	strb	w18, [x0, #12]
    93f4:	b.cs	9820 <BZ2_bzDecompress@@Base+0xdf0>  // b.hs, b.nlast
    93f8:	ldr	x8, [x0, #3152]
    93fc:	ldr	w3, [x8, x1, lsl #2]
    9400:	ldr	w1, [x0, #24]
    9404:	lsr	x2, x3, #8
    9408:	str	w2, [x0, #60]
    940c:	cbnz	w1, 9428 <BZ2_bzDecompress@@Base+0x9f8>
    9410:	ldrsw	x1, [x0, #28]
    9414:	ldr	w4, [x10, x1, lsl #2]
    9418:	add	w5, w1, #0x1
    941c:	cmp	w5, #0x200
    9420:	csinc	w1, wzr, w1, eq  // eq = none
    9424:	stp	w4, w1, [x0, #24]
    9428:	ldr	w4, [x0, #24]
    942c:	add	w1, w15, #0x1
    9430:	cmp	w15, w17
    9434:	str	w1, [x0, #1092]
    9438:	sub	w5, w4, #0x1
    943c:	str	w5, [x0, #24]
    9440:	b.eq	95e8 <BZ2_bzDecompress@@Base+0xbb8>  // b.none
    9444:	cmp	w5, #0x1
    9448:	cset	w4, eq  // eq = none
    944c:	and	w3, w3, #0xff
    9450:	eor	w3, w3, w4
    9454:	cmp	w3, w18
    9458:	b.ne	95e4 <BZ2_bzDecompress@@Base+0xbb4>  // b.any
    945c:	cmp	w2, w16
    9460:	str	w11, [x0, #16]
    9464:	b.cs	981c <BZ2_bzDecompress@@Base+0xdec>  // b.hs, b.nlast
    9468:	ldr	w4, [x8, x2, lsl #2]
    946c:	lsr	x3, x4, #8
    9470:	str	w3, [x0, #60]
    9474:	cbnz	w5, 9490 <BZ2_bzDecompress@@Base+0xa60>
    9478:	ldrsw	x2, [x0, #28]
    947c:	ldr	w5, [x10, x2, lsl #2]
    9480:	add	w6, w2, #0x1
    9484:	cmp	w6, #0x200
    9488:	csinc	w2, wzr, w2, eq  // eq = none
    948c:	stp	w5, w2, [x0, #24]
    9490:	ldr	w5, [x0, #24]
    9494:	add	w2, w15, #0x2
    9498:	cmp	w1, w17
    949c:	str	w2, [x0, #1092]
    94a0:	sub	w5, w5, #0x1
    94a4:	str	w5, [x0, #24]
    94a8:	b.eq	95e8 <BZ2_bzDecompress@@Base+0xbb8>  // b.none
    94ac:	cmp	w5, #0x1
    94b0:	cset	w1, eq  // eq = none
    94b4:	and	w4, w4, #0xff
    94b8:	eor	w1, w4, w1
    94bc:	cmp	w1, w18
    94c0:	b.ne	95f8 <BZ2_bzDecompress@@Base+0xbc8>  // b.any
    94c4:	cmp	w3, w16
    94c8:	str	w12, [x0, #16]
    94cc:	b.cs	981c <BZ2_bzDecompress@@Base+0xdec>  // b.hs, b.nlast
    94d0:	ldr	w3, [x8, x3, lsl #2]
    94d4:	lsr	x1, x3, #8
    94d8:	str	w1, [x0, #60]
    94dc:	cbnz	w5, 94f8 <BZ2_bzDecompress@@Base+0xac8>
    94e0:	ldrsw	x4, [x0, #28]
    94e4:	ldr	w5, [x10, x4, lsl #2]
    94e8:	add	w6, w4, #0x1
    94ec:	cmp	w6, #0x200
    94f0:	csinc	w4, wzr, w4, eq  // eq = none
    94f4:	stp	w5, w4, [x0, #24]
    94f8:	ldr	w4, [x0, #24]
    94fc:	add	w5, w15, #0x3
    9500:	cmp	w2, w17
    9504:	str	w5, [x0, #1092]
    9508:	sub	w2, w4, #0x1
    950c:	str	w2, [x0, #24]
    9510:	b.eq	95e8 <BZ2_bzDecompress@@Base+0xbb8>  // b.none
    9514:	cmp	w2, #0x1
    9518:	cset	w17, eq  // eq = none
    951c:	and	w3, w3, #0xff
    9520:	eor	w17, w3, w17
    9524:	cmp	w17, w18
    9528:	b.ne	9600 <BZ2_bzDecompress@@Base+0xbd0>  // b.any
    952c:	cmp	w1, w16
    9530:	b.cs	981c <BZ2_bzDecompress@@Base+0xdec>  // b.hs, b.nlast
    9534:	ldr	w18, [x8, x1, lsl #2]
    9538:	lsr	x17, x18, #8
    953c:	str	w17, [x0, #60]
    9540:	cbnz	w2, 955c <BZ2_bzDecompress@@Base+0xb2c>
    9544:	ldrsw	x1, [x0, #28]
    9548:	ldr	w2, [x10, x1, lsl #2]
    954c:	add	w3, w1, #0x1
    9550:	cmp	w3, #0x200
    9554:	csinc	w1, wzr, w1, eq  // eq = none
    9558:	stp	w2, w1, [x0, #24]
    955c:	ldr	w1, [x0, #24]
    9560:	and	w3, w18, #0xff
    9564:	add	w2, w15, #0x4
    9568:	str	w2, [x0, #1092]
    956c:	sub	w18, w1, #0x1
    9570:	cmp	w18, #0x1
    9574:	cset	w1, eq  // eq = none
    9578:	eor	w1, w3, w1
    957c:	add	w1, w1, #0x4
    9580:	cmp	w17, w16
    9584:	str	w18, [x0, #24]
    9588:	str	w1, [x0, #16]
    958c:	b.cs	981c <BZ2_bzDecompress@@Base+0xdec>  // b.hs, b.nlast
    9590:	ldr	w16, [x8, x17, lsl #2]
    9594:	and	w8, w16, #0xff
    9598:	lsr	w16, w16, #8
    959c:	stp	w16, w8, [x0, #60]
    95a0:	cbnz	w18, 95bc <BZ2_bzDecompress@@Base+0xb8c>
    95a4:	ldrsw	x16, [x0, #28]
    95a8:	ldr	w17, [x10, x16, lsl #2]
    95ac:	add	w18, w16, #0x1
    95b0:	cmp	w18, #0x200
    95b4:	csinc	w16, wzr, w16, eq  // eq = none
    95b8:	stp	w17, w16, [x0, #24]
    95bc:	ldr	w16, [x0, #24]
    95c0:	add	w15, w15, #0x5
    95c4:	str	w15, [x0, #1092]
    95c8:	sub	w16, w16, #0x1
    95cc:	cmp	w16, #0x1
    95d0:	str	w16, [x0, #24]
    95d4:	cset	w16, eq  // eq = none
    95d8:	eor	w8, w8, w16
    95dc:	str	w8, [x0, #64]
    95e0:	b	95e8 <BZ2_bzDecompress@@Base+0xbb8>
    95e4:	str	w3, [x0, #64]
    95e8:	ldr	x8, [x0]
    95ec:	ldr	w15, [x8, #32]
    95f0:	cbnz	w15, 9350 <BZ2_bzDecompress@@Base+0x920>
    95f4:	b	9608 <BZ2_bzDecompress@@Base+0xbd8>
    95f8:	str	w1, [x0, #64]
    95fc:	b	95e8 <BZ2_bzDecompress@@Base+0xbb8>
    9600:	str	w17, [x0, #64]
    9604:	b	95e8 <BZ2_bzDecompress@@Base+0xbb8>
    9608:	mov	w8, wzr
    960c:	b	9820 <BZ2_bzDecompress@@Base+0xdf0>
    9610:	ldr	x8, [x0]
    9614:	mov	w11, #0xfa50                	// #64080
    9618:	ldr	w15, [x0, x11]
    961c:	ldr	w12, [x0, #40]
    9620:	ldr	x11, [x8, #24]
    9624:	ldr	w8, [x8, #32]
    9628:	adrp	x18, 1b000 <BZ2_bzerror@@Base+0x1084c>
    962c:	ldr	w9, [x0, #3184]
    9630:	ldrb	w2, [x0, #12]
    9634:	ldr	w3, [x0, #16]
    9638:	ldr	w14, [x0, #1092]
    963c:	ldr	x10, [x0, #3152]
    9640:	ldp	w13, w1, [x0, #60]
    9644:	ldr	x18, [x18, #4024]
    9648:	mov	w17, #0x86a0                	// #34464
    964c:	movk	w17, #0x1, lsl #16
    9650:	add	w16, w15, #0x1
    9654:	mul	w17, w12, w17
    9658:	mov	w12, w8
    965c:	cmp	w3, #0x1
    9660:	b.lt	96c8 <BZ2_bzDecompress@@Base+0xc98>  // b.tstop
    9664:	cbz	w12, 97d0 <BZ2_bzDecompress@@Base+0xda0>
    9668:	mov	w7, w3
    966c:	mov	x4, xzr
    9670:	and	w5, w2, #0xff
    9674:	mov	w6, w12
    9678:	sub	x7, x7, #0x1
    967c:	cmp	w7, w4
    9680:	b.eq	96a4 <BZ2_bzDecompress@@Base+0xc74>  // b.none
    9684:	strb	w2, [x11, x4]
    9688:	eor	w19, w5, w9, lsr #24
    968c:	ldr	w19, [x18, w19, uxtw #2]
    9690:	add	x4, x4, #0x1
    9694:	cmp	w6, w4
    9698:	eor	w9, w19, w9, lsl #8
    969c:	b.ne	967c <BZ2_bzDecompress@@Base+0xc4c>  // b.any
    96a0:	b	97c4 <BZ2_bzDecompress@@Base+0xd94>
    96a4:	sub	w12, w12, w4
    96a8:	add	x11, x11, x4
    96ac:	cbz	w12, 982c <BZ2_bzDecompress@@Base+0xdfc>
    96b0:	and	w3, w2, #0xff
    96b4:	strb	w2, [x11], #1
    96b8:	eor	w3, w3, w9, lsr #24
    96bc:	ldr	w3, [x18, w3, uxtw #2]
    96c0:	sub	w12, w12, #0x1
    96c4:	eor	w9, w3, w9, lsl #8
    96c8:	mov	w5, w14
    96cc:	mov	w4, w1
    96d0:	cmp	w14, w16
    96d4:	b.gt	981c <BZ2_bzDecompress@@Base+0xdec>
    96d8:	b.eq	9834 <BZ2_bzDecompress@@Base+0xe04>  // b.none
    96dc:	cmp	w13, w17
    96e0:	b.cs	981c <BZ2_bzDecompress@@Base+0xdec>  // b.hs, b.nlast
    96e4:	ldr	w14, [x10, w13, uxtw #2]
    96e8:	and	w1, w14, #0xff
    96ec:	lsr	x13, x14, #8
    96f0:	cmp	w1, w4
    96f4:	add	w14, w5, #0x1
    96f8:	b.ne	9708 <BZ2_bzDecompress@@Base+0xcd8>  // b.any
    96fc:	cmp	w5, w15
    9700:	b.ne	9714 <BZ2_bzDecompress@@Base+0xce4>  // b.any
    9704:	mov	w1, w4
    9708:	mov	w2, w4
    970c:	cbnz	w12, 96b0 <BZ2_bzDecompress@@Base+0xc80>
    9710:	b	982c <BZ2_bzDecompress@@Base+0xdfc>
    9714:	cmp	w13, w17
    9718:	b.cs	981c <BZ2_bzDecompress@@Base+0xdec>  // b.hs, b.nlast
    971c:	ldr	w6, [x10, x13, lsl #2]
    9720:	add	w14, w5, #0x2
    9724:	cmp	w14, w16
    9728:	mov	w3, #0x2                   	// #2
    972c:	lsr	x13, x6, #8
    9730:	mov	w1, w4
    9734:	mov	w2, w4
    9738:	b.eq	965c <BZ2_bzDecompress@@Base+0xc2c>  // b.none
    973c:	and	w1, w6, #0xff
    9740:	cmp	w1, w4
    9744:	mov	w3, #0x2                   	// #2
    9748:	mov	w2, w4
    974c:	b.ne	965c <BZ2_bzDecompress@@Base+0xc2c>  // b.any
    9750:	cmp	w13, w17
    9754:	b.cs	981c <BZ2_bzDecompress@@Base+0xdec>  // b.hs, b.nlast
    9758:	ldr	w6, [x10, x13, lsl #2]
    975c:	add	w14, w5, #0x3
    9760:	cmp	w14, w16
    9764:	mov	w3, #0x3                   	// #3
    9768:	lsr	x13, x6, #8
    976c:	mov	w1, w4
    9770:	mov	w2, w4
    9774:	b.eq	965c <BZ2_bzDecompress@@Base+0xc2c>  // b.none
    9778:	and	w1, w6, #0xff
    977c:	cmp	w1, w4
    9780:	mov	w3, #0x3                   	// #3
    9784:	mov	w2, w4
    9788:	b.ne	965c <BZ2_bzDecompress@@Base+0xc2c>  // b.any
    978c:	cmp	w13, w17
    9790:	b.cs	981c <BZ2_bzDecompress@@Base+0xdec>  // b.hs, b.nlast
    9794:	ldr	w13, [x10, x13, lsl #2]
    9798:	lsr	x14, x13, #8
    979c:	cmp	w14, w17
    97a0:	b.cs	981c <BZ2_bzDecompress@@Base+0xdec>  // b.hs, b.nlast
    97a4:	ldr	w14, [x10, x14, lsl #2]
    97a8:	and	w13, w13, #0xff
    97ac:	add	w3, w13, #0x4
    97b0:	mov	w2, w4
    97b4:	and	w1, w14, #0xff
    97b8:	lsr	w13, w14, #8
    97bc:	add	w14, w5, #0x5
    97c0:	b	965c <BZ2_bzDecompress@@Base+0xc2c>
    97c4:	mov	w12, wzr
    97c8:	add	x11, x11, x4
    97cc:	sub	w3, w3, w4
    97d0:	ldr	x15, [x0]
    97d4:	sub	w8, w8, w12
    97d8:	ldr	w16, [x15, #36]
    97dc:	adds	w8, w16, w8
    97e0:	str	w8, [x15, #36]
    97e4:	b.cc	97f4 <BZ2_bzDecompress@@Base+0xdc4>  // b.lo, b.ul, b.last
    97e8:	ldr	w8, [x15, #40]
    97ec:	add	w8, w8, #0x1
    97f0:	str	w8, [x15, #40]
    97f4:	mov	w8, wzr
    97f8:	str	w9, [x0, #3184]
    97fc:	strb	w2, [x0, #12]
    9800:	str	w3, [x0, #16]
    9804:	str	w14, [x0, #1092]
    9808:	str	x10, [x0, #3152]
    980c:	stp	w13, w1, [x0, #60]
    9810:	str	x11, [x15, #24]
    9814:	str	w12, [x15, #32]
    9818:	b	9820 <BZ2_bzDecompress@@Base+0xdf0>
    981c:	mov	w8, #0x1                   	// #1
    9820:	mov	w0, w8
    9824:	ldr	x19, [sp], #16
    9828:	ret
    982c:	mov	w3, #0x1                   	// #1
    9830:	b	97d0 <BZ2_bzDecompress@@Base+0xda0>
    9834:	mov	w3, wzr
    9838:	mov	w14, w5
    983c:	mov	w1, w4
    9840:	b	97d0 <BZ2_bzDecompress@@Base+0xda0>

0000000000009844 <BZ2_bzDecompressEnd@@Base>:
    9844:	stp	x29, x30, [sp, #-32]!
    9848:	stp	x20, x19, [sp, #16]
    984c:	mov	x29, sp
    9850:	cbz	x0, 986c <BZ2_bzDecompressEnd@@Base+0x28>
    9854:	ldr	x20, [x0, #48]
    9858:	mov	x19, x0
    985c:	cbz	x20, 986c <BZ2_bzDecompressEnd@@Base+0x28>
    9860:	ldr	x8, [x20]
    9864:	cmp	x8, x19
    9868:	b.eq	987c <BZ2_bzDecompressEnd@@Base+0x38>  // b.none
    986c:	mov	w0, #0xfffffffe            	// #-2
    9870:	ldp	x20, x19, [sp, #16]
    9874:	ldp	x29, x30, [sp], #32
    9878:	ret
    987c:	ldr	x1, [x20, #3152]
    9880:	cbz	x1, 988c <BZ2_bzDecompressEnd@@Base+0x48>
    9884:	ldp	x8, x0, [x19, #64]
    9888:	blr	x8
    988c:	ldr	x1, [x20, #3160]
    9890:	cbz	x1, 989c <BZ2_bzDecompressEnd@@Base+0x58>
    9894:	ldp	x8, x0, [x19, #64]
    9898:	blr	x8
    989c:	ldr	x1, [x20, #3168]
    98a0:	cbz	x1, 98ac <BZ2_bzDecompressEnd@@Base+0x68>
    98a4:	ldp	x8, x0, [x19, #64]
    98a8:	blr	x8
    98ac:	ldp	x8, x0, [x19, #64]
    98b0:	ldr	x1, [x19, #48]
    98b4:	blr	x8
    98b8:	mov	w0, wzr
    98bc:	str	xzr, [x19, #48]
    98c0:	b	9870 <BZ2_bzDecompressEnd@@Base+0x2c>

00000000000098c4 <BZ2_bzWriteOpen@@Base>:
    98c4:	stp	x29, x30, [sp, #-80]!
    98c8:	str	x25, [sp, #16]
    98cc:	stp	x24, x23, [sp, #32]
    98d0:	stp	x22, x21, [sp, #48]
    98d4:	stp	x20, x19, [sp, #64]
    98d8:	mov	x29, sp
    98dc:	mov	w23, w4
    98e0:	mov	w21, w3
    98e4:	mov	w22, w2
    98e8:	mov	x24, x1
    98ec:	mov	x19, x0
    98f0:	cbz	x0, 98f8 <BZ2_bzWriteOpen@@Base+0x34>
    98f4:	str	wzr, [x19]
    98f8:	cmp	w21, #0x4
    98fc:	b.hi	9934 <BZ2_bzWriteOpen@@Base+0x70>  // b.pmore
    9900:	cmp	w23, #0xfa
    9904:	b.hi	9934 <BZ2_bzWriteOpen@@Base+0x70>  // b.pmore
    9908:	cbz	x24, 9934 <BZ2_bzWriteOpen@@Base+0x70>
    990c:	sub	w8, w22, #0x1
    9910:	cmp	w8, #0x9
    9914:	b.cs	9934 <BZ2_bzWriteOpen@@Base+0x70>  // b.hs, b.nlast
    9918:	mov	x0, x24
    991c:	bl	1760 <ferror@plt>
    9920:	cbz	w0, 9960 <BZ2_bzWriteOpen@@Base+0x9c>
    9924:	mov	x20, xzr
    9928:	cbz	x19, 9944 <BZ2_bzWriteOpen@@Base+0x80>
    992c:	mov	w8, #0xfffffffa            	// #-6
    9930:	b	9940 <BZ2_bzWriteOpen@@Base+0x7c>
    9934:	mov	x20, xzr
    9938:	cbz	x19, 9944 <BZ2_bzWriteOpen@@Base+0x80>
    993c:	mov	w8, #0xfffffffe            	// #-2
    9940:	str	w8, [x19]
    9944:	mov	x0, x20
    9948:	ldp	x20, x19, [sp, #64]
    994c:	ldp	x22, x21, [sp, #48]
    9950:	ldp	x24, x23, [sp, #32]
    9954:	ldr	x25, [sp, #16]
    9958:	ldp	x29, x30, [sp], #80
    995c:	ret
    9960:	mov	w0, #0x13f0                	// #5104
    9964:	bl	1540 <malloc@plt>
    9968:	cbz	x0, 99e4 <BZ2_bzWriteOpen@@Base+0x120>
    996c:	mov	w8, #0x1394                	// #5012
    9970:	mov	x20, x0
    9974:	add	x25, x0, x8
    9978:	cbz	x19, 9980 <BZ2_bzWriteOpen@@Base+0xbc>
    997c:	str	wzr, [x19]
    9980:	mov	w8, #0x1398                	// #5016
    9984:	cmp	w23, #0x0
    9988:	mov	w9, #0x1e                  	// #30
    998c:	str	wzr, [x20, #5096]
    9990:	strb	wzr, [x25, #88]
    9994:	str	x24, [x20]
    9998:	mov	w24, #0x1                   	// #1
    999c:	movi	v0.2d, #0x0
    99a0:	add	x0, x20, x8
    99a4:	csel	w3, w9, w23, eq  // eq = none
    99a8:	mov	w1, w22
    99ac:	mov	w2, w21
    99b0:	str	wzr, [x20, #5008]
    99b4:	strb	w24, [x25]
    99b8:	str	xzr, [x20, #5088]
    99bc:	str	q0, [x20, #5072]
    99c0:	bl	15c0 <BZ2_bzCompressInit@plt>
    99c4:	cbz	w0, 99f4 <BZ2_bzWriteOpen@@Base+0x130>
    99c8:	cbz	x19, 99d0 <BZ2_bzWriteOpen@@Base+0x10c>
    99cc:	str	w0, [x19]
    99d0:	str	w0, [x20, #5096]
    99d4:	mov	x0, x20
    99d8:	bl	1680 <free@plt>
    99dc:	mov	x20, xzr
    99e0:	b	9944 <BZ2_bzWriteOpen@@Base+0x80>
    99e4:	mov	x20, xzr
    99e8:	cbz	x19, 9944 <BZ2_bzWriteOpen@@Base+0x80>
    99ec:	mov	w8, #0xfffffffd            	// #-3
    99f0:	b	9940 <BZ2_bzWriteOpen@@Base+0x7c>
    99f4:	str	wzr, [x20, #5024]
    99f8:	strb	w24, [x25, #88]
    99fc:	b	9944 <BZ2_bzWriteOpen@@Base+0x80>

0000000000009a00 <BZ2_bzWrite@@Base>:
    9a00:	stp	x29, x30, [sp, #-64]!
    9a04:	stp	x24, x23, [sp, #16]
    9a08:	stp	x22, x21, [sp, #32]
    9a0c:	stp	x20, x19, [sp, #48]
    9a10:	mov	x29, sp
    9a14:	mov	w22, w3
    9a18:	mov	x21, x2
    9a1c:	mov	x19, x1
    9a20:	mov	x20, x0
    9a24:	cbz	x0, 9a2c <BZ2_bzWrite@@Base+0x2c>
    9a28:	str	wzr, [x20]
    9a2c:	cbz	x19, 9a34 <BZ2_bzWrite@@Base+0x34>
    9a30:	str	wzr, [x19, #5096]
    9a34:	cbz	x19, 9a74 <BZ2_bzWrite@@Base+0x74>
    9a38:	cbz	x21, 9a74 <BZ2_bzWrite@@Base+0x74>
    9a3c:	tbnz	w22, #31, 9a74 <BZ2_bzWrite@@Base+0x74>
    9a40:	mov	w8, #0x1394                	// #5012
    9a44:	ldrb	w8, [x19, x8]
    9a48:	cbz	w8, 9a90 <BZ2_bzWrite@@Base+0x90>
    9a4c:	ldr	x0, [x19]
    9a50:	bl	1760 <ferror@plt>
    9a54:	cbz	w0, 9aac <BZ2_bzWrite@@Base+0xac>
    9a58:	cbz	x20, 9a64 <BZ2_bzWrite@@Base+0x64>
    9a5c:	mov	w8, #0xfffffffa            	// #-6
    9a60:	str	w8, [x20]
    9a64:	cbz	x19, 9b54 <BZ2_bzWrite@@Base+0x154>
    9a68:	mov	w8, #0xfffffffa            	// #-6
    9a6c:	str	w8, [x19, #5096]
    9a70:	b	9b54 <BZ2_bzWrite@@Base+0x154>
    9a74:	cbz	x20, 9a80 <BZ2_bzWrite@@Base+0x80>
    9a78:	mov	w8, #0xfffffffe            	// #-2
    9a7c:	str	w8, [x20]
    9a80:	cbz	x19, 9b54 <BZ2_bzWrite@@Base+0x154>
    9a84:	mov	w8, #0xfffffffe            	// #-2
    9a88:	str	w8, [x19, #5096]
    9a8c:	b	9b54 <BZ2_bzWrite@@Base+0x154>
    9a90:	cbz	x20, 9a9c <BZ2_bzWrite@@Base+0x9c>
    9a94:	mov	w8, #0xffffffff            	// #-1
    9a98:	str	w8, [x20]
    9a9c:	cbz	x19, 9b54 <BZ2_bzWrite@@Base+0x154>
    9aa0:	mov	w8, #0xffffffff            	// #-1
    9aa4:	str	w8, [x19, #5096]
    9aa8:	b	9b54 <BZ2_bzWrite@@Base+0x154>
    9aac:	cbz	w22, 9b30 <BZ2_bzWrite@@Base+0x130>
    9ab0:	mov	w8, #0x1398                	// #5016
    9ab4:	str	w22, [x19, #5024]
    9ab8:	str	x21, [x19, #5016]
    9abc:	add	x21, x19, #0x8
    9ac0:	add	x22, x19, x8
    9ac4:	mov	w23, #0x1388                	// #5000
    9ac8:	b	9ad4 <BZ2_bzWrite@@Base+0xd4>
    9acc:	ldr	w8, [x19, #5024]
    9ad0:	cbz	w8, 9b30 <BZ2_bzWrite@@Base+0x130>
    9ad4:	mov	x0, x22
    9ad8:	mov	w1, wzr
    9adc:	str	w23, [x19, #5048]
    9ae0:	str	x21, [x19, #5040]
    9ae4:	bl	1620 <BZ2_bzCompress@plt>
    9ae8:	cmp	w0, #0x1
    9aec:	b.ne	9b44 <BZ2_bzWrite@@Base+0x144>  // b.any
    9af0:	ldr	w8, [x19, #5048]
    9af4:	lsr	w9, w8, #3
    9af8:	cmp	w9, #0x270
    9afc:	b.hi	9acc <BZ2_bzWrite@@Base+0xcc>  // b.pmore
    9b00:	ldr	x3, [x19]
    9b04:	sub	w24, w23, w8
    9b08:	sxtw	x2, w24
    9b0c:	mov	w1, #0x1                   	// #1
    9b10:	mov	x0, x21
    9b14:	bl	16f0 <fwrite@plt>
    9b18:	cmp	w24, w0
    9b1c:	b.ne	9a58 <BZ2_bzWrite@@Base+0x58>  // b.any
    9b20:	ldr	x0, [x19]
    9b24:	bl	1760 <ferror@plt>
    9b28:	cbz	w0, 9acc <BZ2_bzWrite@@Base+0xcc>
    9b2c:	b	9a58 <BZ2_bzWrite@@Base+0x58>
    9b30:	cbz	x20, 9b38 <BZ2_bzWrite@@Base+0x138>
    9b34:	str	wzr, [x20]
    9b38:	cbz	x19, 9b54 <BZ2_bzWrite@@Base+0x154>
    9b3c:	str	wzr, [x19, #5096]
    9b40:	b	9b54 <BZ2_bzWrite@@Base+0x154>
    9b44:	cbz	x20, 9b4c <BZ2_bzWrite@@Base+0x14c>
    9b48:	str	w0, [x20]
    9b4c:	cbz	x19, 9b54 <BZ2_bzWrite@@Base+0x154>
    9b50:	str	w0, [x19, #5096]
    9b54:	ldp	x20, x19, [sp, #48]
    9b58:	ldp	x22, x21, [sp, #32]
    9b5c:	ldp	x24, x23, [sp, #16]
    9b60:	ldp	x29, x30, [sp], #64
    9b64:	ret

0000000000009b68 <BZ2_bzWriteClose@@Base>:
    9b68:	stp	x29, x30, [sp, #-16]!
    9b6c:	mov	x29, sp
    9b70:	mov	x5, x4
    9b74:	mov	x4, xzr
    9b78:	mov	x6, xzr
    9b7c:	bl	16c0 <BZ2_bzWriteClose64@plt>
    9b80:	ldp	x29, x30, [sp], #16
    9b84:	ret

0000000000009b88 <BZ2_bzWriteClose64@@Base>:
    9b88:	stp	x29, x30, [sp, #-96]!
    9b8c:	stp	x28, x27, [sp, #16]
    9b90:	stp	x26, x25, [sp, #32]
    9b94:	stp	x24, x23, [sp, #48]
    9b98:	stp	x22, x21, [sp, #64]
    9b9c:	stp	x20, x19, [sp, #80]
    9ba0:	mov	x29, sp
    9ba4:	mov	x20, x0
    9ba8:	cbz	x1, 9bf4 <BZ2_bzWriteClose64@@Base+0x6c>
    9bac:	mov	w8, #0x1394                	// #5012
    9bb0:	ldrb	w8, [x1, x8]
    9bb4:	mov	x19, x1
    9bb8:	cbz	w8, 9c00 <BZ2_bzWriteClose64@@Base+0x78>
    9bbc:	ldr	x0, [x19]
    9bc0:	mov	x21, x6
    9bc4:	mov	x22, x5
    9bc8:	mov	x23, x4
    9bcc:	mov	x24, x3
    9bd0:	mov	w25, w2
    9bd4:	bl	1760 <ferror@plt>
    9bd8:	cbz	w0, 9c18 <BZ2_bzWriteClose64@@Base+0x90>
    9bdc:	cbz	x20, 9be8 <BZ2_bzWriteClose64@@Base+0x60>
    9be0:	mov	w8, #0xfffffffa            	// #-6
    9be4:	str	w8, [x20]
    9be8:	mov	w8, #0xfffffffa            	// #-6
    9bec:	str	w8, [x19, #5096]
    9bf0:	b	9ca4 <BZ2_bzWriteClose64@@Base+0x11c>
    9bf4:	cbz	x20, 9ca4 <BZ2_bzWriteClose64@@Base+0x11c>
    9bf8:	str	wzr, [x20]
    9bfc:	b	9ca4 <BZ2_bzWriteClose64@@Base+0x11c>
    9c00:	cbz	x20, 9c0c <BZ2_bzWriteClose64@@Base+0x84>
    9c04:	mov	w8, #0xffffffff            	// #-1
    9c08:	str	w8, [x20]
    9c0c:	mov	w8, #0xffffffff            	// #-1
    9c10:	str	w8, [x19, #5096]
    9c14:	b	9ca4 <BZ2_bzWriteClose64@@Base+0x11c>
    9c18:	cbz	x24, 9c20 <BZ2_bzWriteClose64@@Base+0x98>
    9c1c:	str	wzr, [x24]
    9c20:	cbz	x23, 9c28 <BZ2_bzWriteClose64@@Base+0xa0>
    9c24:	str	wzr, [x23]
    9c28:	cbz	x22, 9c30 <BZ2_bzWriteClose64@@Base+0xa8>
    9c2c:	str	wzr, [x22]
    9c30:	cbz	x21, 9c38 <BZ2_bzWriteClose64@@Base+0xb0>
    9c34:	str	wzr, [x21]
    9c38:	cbnz	w25, 9c54 <BZ2_bzWriteClose64@@Base+0xcc>
    9c3c:	ldr	w8, [x19, #5096]
    9c40:	cbz	w8, 9cc0 <BZ2_bzWriteClose64@@Base+0x138>
    9c44:	ldr	x25, [x19]
    9c48:	mov	x0, x25
    9c4c:	bl	1760 <ferror@plt>
    9c50:	cbz	w0, 9d48 <BZ2_bzWriteClose64@@Base+0x1c0>
    9c54:	cbz	x24, 9c60 <BZ2_bzWriteClose64@@Base+0xd8>
    9c58:	ldr	w8, [x19, #5028]
    9c5c:	str	w8, [x24]
    9c60:	cbz	x23, 9c6c <BZ2_bzWriteClose64@@Base+0xe4>
    9c64:	ldr	w8, [x19, #5032]
    9c68:	str	w8, [x23]
    9c6c:	cbz	x22, 9c78 <BZ2_bzWriteClose64@@Base+0xf0>
    9c70:	ldr	w8, [x19, #5052]
    9c74:	str	w8, [x22]
    9c78:	cbz	x21, 9c84 <BZ2_bzWriteClose64@@Base+0xfc>
    9c7c:	ldr	w8, [x19, #5056]
    9c80:	str	w8, [x21]
    9c84:	cbz	x20, 9c8c <BZ2_bzWriteClose64@@Base+0x104>
    9c88:	str	wzr, [x20]
    9c8c:	mov	w8, #0x1398                	// #5016
    9c90:	add	x0, x19, x8
    9c94:	str	wzr, [x19, #5096]
    9c98:	bl	15d0 <BZ2_bzCompressEnd@plt>
    9c9c:	mov	x0, x19
    9ca0:	bl	1680 <free@plt>
    9ca4:	ldp	x20, x19, [sp, #80]
    9ca8:	ldp	x22, x21, [sp, #64]
    9cac:	ldp	x24, x23, [sp, #48]
    9cb0:	ldp	x26, x25, [sp, #32]
    9cb4:	ldp	x28, x27, [sp, #16]
    9cb8:	ldp	x29, x30, [sp], #96
    9cbc:	ret
    9cc0:	mov	w8, #0x1398                	// #5016
    9cc4:	add	x25, x19, #0x8
    9cc8:	add	x26, x19, x8
    9ccc:	mov	w28, #0x1388                	// #5000
    9cd0:	b	9cdc <BZ2_bzWriteClose64@@Base+0x154>
    9cd4:	cmp	w27, #0x4
    9cd8:	b.eq	9c44 <BZ2_bzWriteClose64@@Base+0xbc>  // b.none
    9cdc:	mov	w1, #0x2                   	// #2
    9ce0:	mov	x0, x26
    9ce4:	str	w28, [x19, #5048]
    9ce8:	str	x25, [x19, #5040]
    9cec:	bl	1620 <BZ2_bzCompress@plt>
    9cf0:	sub	w8, w0, #0x3
    9cf4:	mov	w27, w0
    9cf8:	cmp	w8, #0x2
    9cfc:	b.cs	9d60 <BZ2_bzWriteClose64@@Base+0x1d8>  // b.hs, b.nlast
    9d00:	ldr	w8, [x19, #5048]
    9d04:	lsr	w9, w8, #3
    9d08:	cmp	w9, #0x270
    9d0c:	b.hi	9cd4 <BZ2_bzWriteClose64@@Base+0x14c>  // b.pmore
    9d10:	ldr	x3, [x19]
    9d14:	mov	w9, #0x1388                	// #5000
    9d18:	sub	w28, w9, w8
    9d1c:	sxtw	x2, w28
    9d20:	mov	w1, #0x1                   	// #1
    9d24:	mov	x0, x25
    9d28:	bl	16f0 <fwrite@plt>
    9d2c:	cmp	w28, w0
    9d30:	mov	w28, #0x1388                	// #5000
    9d34:	b.ne	9bdc <BZ2_bzWriteClose64@@Base+0x54>  // b.any
    9d38:	ldr	x0, [x19]
    9d3c:	bl	1760 <ferror@plt>
    9d40:	cbz	w0, 9cd4 <BZ2_bzWriteClose64@@Base+0x14c>
    9d44:	b	9bdc <BZ2_bzWriteClose64@@Base+0x54>
    9d48:	mov	x0, x25
    9d4c:	bl	1700 <fflush@plt>
    9d50:	ldr	x0, [x19]
    9d54:	bl	1760 <ferror@plt>
    9d58:	cbnz	w0, 9bdc <BZ2_bzWriteClose64@@Base+0x54>
    9d5c:	b	9c54 <BZ2_bzWriteClose64@@Base+0xcc>
    9d60:	cbz	x20, 9d68 <BZ2_bzWriteClose64@@Base+0x1e0>
    9d64:	str	w27, [x20]
    9d68:	str	w27, [x19, #5096]
    9d6c:	b	9ca4 <BZ2_bzWriteClose64@@Base+0x11c>

0000000000009d70 <BZ2_bzReadOpen@@Base>:
    9d70:	stp	x29, x30, [sp, #-80]!
    9d74:	stp	x26, x25, [sp, #16]
    9d78:	stp	x24, x23, [sp, #32]
    9d7c:	stp	x22, x21, [sp, #48]
    9d80:	stp	x20, x19, [sp, #64]
    9d84:	mov	x29, sp
    9d88:	mov	w24, w5
    9d8c:	mov	x23, x4
    9d90:	mov	w21, w3
    9d94:	mov	w22, w2
    9d98:	mov	x25, x1
    9d9c:	mov	x19, x0
    9da0:	cbz	x0, 9da8 <BZ2_bzReadOpen@@Base+0x38>
    9da4:	str	wzr, [x19]
    9da8:	cbz	x25, 9dd4 <BZ2_bzReadOpen@@Base+0x64>
    9dac:	cmp	w22, #0x4
    9db0:	b.hi	9dd4 <BZ2_bzReadOpen@@Base+0x64>  // b.pmore
    9db4:	cmp	w21, #0x1
    9db8:	b.hi	9dd4 <BZ2_bzReadOpen@@Base+0x64>  // b.pmore
    9dbc:	cbnz	x23, 9dc4 <BZ2_bzReadOpen@@Base+0x54>
    9dc0:	cbnz	w24, 9dd4 <BZ2_bzReadOpen@@Base+0x64>
    9dc4:	cbz	x23, 9e00 <BZ2_bzReadOpen@@Base+0x90>
    9dc8:	mov	w8, #0x1389                	// #5001
    9dcc:	cmp	w24, w8
    9dd0:	b.cc	9e00 <BZ2_bzReadOpen@@Base+0x90>  // b.lo, b.ul, b.last
    9dd4:	mov	x20, xzr
    9dd8:	cbz	x19, 9de4 <BZ2_bzReadOpen@@Base+0x74>
    9ddc:	mov	w8, #0xfffffffe            	// #-2
    9de0:	str	w8, [x19]
    9de4:	mov	x0, x20
    9de8:	ldp	x20, x19, [sp, #64]
    9dec:	ldp	x22, x21, [sp, #48]
    9df0:	ldp	x24, x23, [sp, #32]
    9df4:	ldp	x26, x25, [sp, #16]
    9df8:	ldp	x29, x30, [sp], #80
    9dfc:	ret
    9e00:	mov	x0, x25
    9e04:	bl	1760 <ferror@plt>
    9e08:	cbz	w0, 9e1c <BZ2_bzReadOpen@@Base+0xac>
    9e0c:	mov	x20, xzr
    9e10:	cbz	x19, 9de4 <BZ2_bzReadOpen@@Base+0x74>
    9e14:	mov	w8, #0xfffffffa            	// #-6
    9e18:	b	9de0 <BZ2_bzReadOpen@@Base+0x70>
    9e1c:	mov	w0, #0x13f0                	// #5104
    9e20:	bl	1540 <malloc@plt>
    9e24:	cbz	x0, 9ec4 <BZ2_bzReadOpen@@Base+0x154>
    9e28:	mov	w8, #0x1394                	// #5012
    9e2c:	mov	x20, x0
    9e30:	add	x26, x0, x8
    9e34:	cbz	x19, 9e3c <BZ2_bzReadOpen@@Base+0xcc>
    9e38:	str	wzr, [x19]
    9e3c:	mov	w8, #0x1398                	// #5016
    9e40:	movi	v0.2d, #0x0
    9e44:	cmp	w24, #0x1
    9e48:	add	x0, x20, x8
    9e4c:	str	wzr, [x20, #5096]
    9e50:	strb	wzr, [x26, #88]
    9e54:	str	x25, [x20]
    9e58:	str	wzr, [x20, #5008]
    9e5c:	strb	wzr, [x26]
    9e60:	str	xzr, [x20, #5088]
    9e64:	str	q0, [x20, #5072]
    9e68:	b.lt	9e98 <BZ2_bzReadOpen@@Base+0x128>  // b.tstop
    9e6c:	add	x8, x20, #0x8
    9e70:	add	w9, w24, #0x1
    9e74:	ldrb	w10, [x23], #1
    9e78:	ldrsw	x11, [x20, #5008]
    9e7c:	sub	w9, w9, #0x1
    9e80:	cmp	w9, #0x1
    9e84:	strb	w10, [x8, x11]
    9e88:	ldr	w10, [x20, #5008]
    9e8c:	add	w10, w10, #0x1
    9e90:	str	w10, [x20, #5008]
    9e94:	b.gt	9e74 <BZ2_bzReadOpen@@Base+0x104>
    9e98:	mov	w1, w22
    9e9c:	mov	w2, w21
    9ea0:	bl	1550 <BZ2_bzDecompressInit@plt>
    9ea4:	cbz	w0, 9ed4 <BZ2_bzReadOpen@@Base+0x164>
    9ea8:	cbz	x19, 9eb0 <BZ2_bzReadOpen@@Base+0x140>
    9eac:	str	w0, [x19]
    9eb0:	str	w0, [x20, #5096]
    9eb4:	mov	x0, x20
    9eb8:	bl	1680 <free@plt>
    9ebc:	mov	x20, xzr
    9ec0:	b	9de4 <BZ2_bzReadOpen@@Base+0x74>
    9ec4:	mov	x20, xzr
    9ec8:	cbz	x19, 9de4 <BZ2_bzReadOpen@@Base+0x74>
    9ecc:	mov	w8, #0xfffffffd            	// #-3
    9ed0:	b	9de0 <BZ2_bzReadOpen@@Base+0x70>
    9ed4:	ldr	w8, [x20, #5008]
    9ed8:	add	x9, x20, #0x8
    9edc:	mov	w10, #0x1                   	// #1
    9ee0:	str	x9, [x20, #5016]
    9ee4:	str	w8, [x20, #5024]
    9ee8:	strb	w10, [x26, #88]
    9eec:	b	9de4 <BZ2_bzReadOpen@@Base+0x74>

0000000000009ef0 <BZ2_bzReadClose@@Base>:
    9ef0:	stp	x29, x30, [sp, #-32]!
    9ef4:	str	x19, [sp, #16]
    9ef8:	mov	x29, sp
    9efc:	mov	x19, x1
    9f00:	cbz	x0, 9f08 <BZ2_bzReadClose@@Base+0x18>
    9f04:	str	wzr, [x0]
    9f08:	cbz	x19, 9f10 <BZ2_bzReadClose@@Base+0x20>
    9f0c:	str	wzr, [x19, #5096]
    9f10:	cbz	x19, 9f3c <BZ2_bzReadClose@@Base+0x4c>
    9f14:	mov	w8, #0x1394                	// #5012
    9f18:	add	x8, x19, x8
    9f1c:	ldrb	w9, [x8]
    9f20:	cbz	w9, 9f54 <BZ2_bzReadClose@@Base+0x64>
    9f24:	cbz	x0, 9f30 <BZ2_bzReadClose@@Base+0x40>
    9f28:	mov	w8, #0xffffffff            	// #-1
    9f2c:	str	w8, [x0]
    9f30:	mov	w8, #0xffffffff            	// #-1
    9f34:	str	w8, [x19, #5096]
    9f38:	b	9f70 <BZ2_bzReadClose@@Base+0x80>
    9f3c:	cbz	x0, 9f44 <BZ2_bzReadClose@@Base+0x54>
    9f40:	str	wzr, [x0]
    9f44:	cbz	x19, 9f70 <BZ2_bzReadClose@@Base+0x80>
    9f48:	mov	w8, #0x13e8                	// #5096
    9f4c:	str	wzr, [x8]
    9f50:	b	9f70 <BZ2_bzReadClose@@Base+0x80>
    9f54:	ldrb	w8, [x8, #88]
    9f58:	cbz	w8, 9f68 <BZ2_bzReadClose@@Base+0x78>
    9f5c:	mov	w8, #0x1398                	// #5016
    9f60:	add	x0, x19, x8
    9f64:	bl	1560 <BZ2_bzDecompressEnd@plt>
    9f68:	mov	x0, x19
    9f6c:	bl	1680 <free@plt>
    9f70:	ldr	x19, [sp, #16]
    9f74:	ldp	x29, x30, [sp], #32
    9f78:	ret

0000000000009f7c <BZ2_bzRead@@Base>:
    9f7c:	stp	x29, x30, [sp, #-64]!
    9f80:	stp	x24, x23, [sp, #16]
    9f84:	stp	x22, x21, [sp, #32]
    9f88:	stp	x20, x19, [sp, #48]
    9f8c:	mov	x29, sp
    9f90:	mov	w19, w3
    9f94:	mov	x20, x1
    9f98:	mov	x21, x0
    9f9c:	cbz	x0, 9fa4 <BZ2_bzRead@@Base+0x28>
    9fa0:	str	wzr, [x21]
    9fa4:	cbz	x20, 9fac <BZ2_bzRead@@Base+0x30>
    9fa8:	str	wzr, [x20, #5096]
    9fac:	cbz	x20, 9fe0 <BZ2_bzRead@@Base+0x64>
    9fb0:	cbz	x2, 9fe0 <BZ2_bzRead@@Base+0x64>
    9fb4:	tbnz	w19, #31, 9fe0 <BZ2_bzRead@@Base+0x64>
    9fb8:	mov	w8, #0x1394                	// #5012
    9fbc:	ldrb	w8, [x20, x8]
    9fc0:	cbz	w8, a014 <BZ2_bzRead@@Base+0x98>
    9fc4:	cbz	x21, 9fd0 <BZ2_bzRead@@Base+0x54>
    9fc8:	mov	w8, #0xffffffff            	// #-1
    9fcc:	str	w8, [x21]
    9fd0:	mov	w19, wzr
    9fd4:	cbz	x20, 9ffc <BZ2_bzRead@@Base+0x80>
    9fd8:	mov	w8, #0xffffffff            	// #-1
    9fdc:	b	9ff8 <BZ2_bzRead@@Base+0x7c>
    9fe0:	cbz	x21, 9fec <BZ2_bzRead@@Base+0x70>
    9fe4:	mov	w8, #0xfffffffe            	// #-2
    9fe8:	str	w8, [x21]
    9fec:	mov	w19, wzr
    9ff0:	cbz	x20, 9ffc <BZ2_bzRead@@Base+0x80>
    9ff4:	mov	w8, #0xfffffffe            	// #-2
    9ff8:	str	w8, [x20, #5096]
    9ffc:	mov	w0, w19
    a000:	ldp	x20, x19, [sp, #48]
    a004:	ldp	x22, x21, [sp, #32]
    a008:	ldp	x24, x23, [sp, #16]
    a00c:	ldp	x29, x30, [sp], #64
    a010:	ret
    a014:	cbz	w19, a0e0 <BZ2_bzRead@@Base+0x164>
    a018:	mov	w8, #0x1398                	// #5016
    a01c:	add	x22, x20, x8
    a020:	add	x23, x20, #0x8
    a024:	str	w19, [x20, #5048]
    a028:	str	x2, [x20, #5040]
    a02c:	ldr	x24, [x20]
    a030:	mov	x0, x24
    a034:	bl	1760 <ferror@plt>
    a038:	cbnz	w0, a11c <BZ2_bzRead@@Base+0x1a0>
    a03c:	ldr	w8, [x20, #5024]
    a040:	cbnz	w8, a088 <BZ2_bzRead@@Base+0x10c>
    a044:	mov	x0, x24
    a048:	bl	a184 <BZ2_bzRead@@Base+0x208>
    a04c:	tst	w0, #0xff
    a050:	b.ne	a088 <BZ2_bzRead@@Base+0x10c>  // b.any
    a054:	ldr	x3, [x20]
    a058:	mov	w1, #0x1                   	// #1
    a05c:	mov	w2, #0x1388                	// #5000
    a060:	mov	x0, x23
    a064:	bl	1660 <fread@plt>
    a068:	ldr	x8, [x20]
    a06c:	mov	x24, x0
    a070:	mov	x0, x8
    a074:	bl	1760 <ferror@plt>
    a078:	cbnz	w0, a150 <BZ2_bzRead@@Base+0x1d4>
    a07c:	str	w24, [x20, #5008]
    a080:	str	w24, [x20, #5024]
    a084:	str	x23, [x20, #5016]
    a088:	mov	x0, x22
    a08c:	bl	16a0 <BZ2_bzDecompress@plt>
    a090:	mov	w24, w0
    a094:	tst	w0, #0xfffffffb
    a098:	b.ne	a138 <BZ2_bzRead@@Base+0x1bc>  // b.any
    a09c:	cbnz	w24, a0c0 <BZ2_bzRead@@Base+0x144>
    a0a0:	ldr	x0, [x20]
    a0a4:	bl	a184 <BZ2_bzRead@@Base+0x208>
    a0a8:	tst	w0, #0xff
    a0ac:	b.eq	a0c0 <BZ2_bzRead@@Base+0x144>  // b.none
    a0b0:	ldr	w8, [x20, #5024]
    a0b4:	cbnz	w8, a0c0 <BZ2_bzRead@@Base+0x144>
    a0b8:	ldr	w8, [x20, #5048]
    a0bc:	cbnz	w8, a168 <BZ2_bzRead@@Base+0x1ec>
    a0c0:	cmp	w24, #0x4
    a0c4:	b.eq	a0f8 <BZ2_bzRead@@Base+0x17c>  // b.none
    a0c8:	ldr	w8, [x20, #5048]
    a0cc:	cbnz	w8, a02c <BZ2_bzRead@@Base+0xb0>
    a0d0:	cbz	x21, a0d8 <BZ2_bzRead@@Base+0x15c>
    a0d4:	str	wzr, [x21]
    a0d8:	cbnz	x20, a0f0 <BZ2_bzRead@@Base+0x174>
    a0dc:	b	9ffc <BZ2_bzRead@@Base+0x80>
    a0e0:	cbz	x21, a0e8 <BZ2_bzRead@@Base+0x16c>
    a0e4:	str	wzr, [x21]
    a0e8:	mov	w19, wzr
    a0ec:	cbz	x20, 9ffc <BZ2_bzRead@@Base+0x80>
    a0f0:	str	wzr, [x20, #5096]
    a0f4:	b	9ffc <BZ2_bzRead@@Base+0x80>
    a0f8:	cbz	x21, a104 <BZ2_bzRead@@Base+0x188>
    a0fc:	mov	w8, #0x4                   	// #4
    a100:	str	w8, [x21]
    a104:	cbz	x20, a110 <BZ2_bzRead@@Base+0x194>
    a108:	mov	w8, #0x4                   	// #4
    a10c:	str	w8, [x20, #5096]
    a110:	ldr	w8, [x20, #5048]
    a114:	sub	w19, w19, w8
    a118:	b	9ffc <BZ2_bzRead@@Base+0x80>
    a11c:	cbz	x21, a128 <BZ2_bzRead@@Base+0x1ac>
    a120:	mov	w8, #0xfffffffa            	// #-6
    a124:	str	w8, [x21]
    a128:	cbz	x20, a160 <BZ2_bzRead@@Base+0x1e4>
    a12c:	mov	w8, #0xfffffffa            	// #-6
    a130:	mov	w19, wzr
    a134:	b	9ff8 <BZ2_bzRead@@Base+0x7c>
    a138:	cbz	x21, a140 <BZ2_bzRead@@Base+0x1c4>
    a13c:	str	w24, [x21]
    a140:	mov	w19, wzr
    a144:	cbz	x20, 9ffc <BZ2_bzRead@@Base+0x80>
    a148:	str	w24, [x20, #5096]
    a14c:	b	9ffc <BZ2_bzRead@@Base+0x80>
    a150:	cbz	x21, a15c <BZ2_bzRead@@Base+0x1e0>
    a154:	mov	w8, #0xfffffffa            	// #-6
    a158:	str	w8, [x21]
    a15c:	cbnz	x20, a12c <BZ2_bzRead@@Base+0x1b0>
    a160:	mov	w19, wzr
    a164:	b	9ffc <BZ2_bzRead@@Base+0x80>
    a168:	cbz	x21, a174 <BZ2_bzRead@@Base+0x1f8>
    a16c:	mov	w8, #0xfffffff9            	// #-7
    a170:	str	w8, [x21]
    a174:	mov	w19, wzr
    a178:	cbz	x20, 9ffc <BZ2_bzRead@@Base+0x80>
    a17c:	mov	w8, #0xfffffff9            	// #-7
    a180:	b	9ff8 <BZ2_bzRead@@Base+0x7c>
    a184:	stp	x29, x30, [sp, #-32]!
    a188:	str	x19, [sp, #16]
    a18c:	mov	x29, sp
    a190:	mov	x19, x0
    a194:	bl	1580 <fgetc@plt>
    a198:	cmn	w0, #0x1
    a19c:	b.eq	a1b0 <BZ2_bzRead@@Base+0x234>  // b.none
    a1a0:	mov	x1, x19
    a1a4:	bl	1690 <ungetc@plt>
    a1a8:	mov	w0, wzr
    a1ac:	b	a1b4 <BZ2_bzRead@@Base+0x238>
    a1b0:	mov	w0, #0x1                   	// #1
    a1b4:	ldr	x19, [sp, #16]
    a1b8:	ldp	x29, x30, [sp], #32
    a1bc:	ret

000000000000a1c0 <BZ2_bzReadGetUnused@@Base>:
    a1c0:	cbz	x1, a1f8 <BZ2_bzReadGetUnused@@Base+0x38>
    a1c4:	ldr	w8, [x1, #5096]
    a1c8:	cmp	w8, #0x4
    a1cc:	b.ne	a208 <BZ2_bzReadGetUnused@@Base+0x48>  // b.any
    a1d0:	cbz	x2, a220 <BZ2_bzReadGetUnused@@Base+0x60>
    a1d4:	cbz	x3, a220 <BZ2_bzReadGetUnused@@Base+0x60>
    a1d8:	cbz	x0, a1e0 <BZ2_bzReadGetUnused@@Base+0x20>
    a1dc:	str	wzr, [x0]
    a1e0:	ldr	w8, [x1, #5024]
    a1e4:	str	wzr, [x1, #5096]
    a1e8:	str	w8, [x3]
    a1ec:	ldr	x8, [x1, #5016]
    a1f0:	str	x8, [x2]
    a1f4:	ret
    a1f8:	cbz	x0, a1f4 <BZ2_bzReadGetUnused@@Base+0x34>
    a1fc:	mov	w8, #0xfffffffe            	// #-2
    a200:	str	w8, [x0]
    a204:	ret
    a208:	cbz	x0, a214 <BZ2_bzReadGetUnused@@Base+0x54>
    a20c:	mov	w8, #0xffffffff            	// #-1
    a210:	str	w8, [x0]
    a214:	mov	w8, #0xffffffff            	// #-1
    a218:	str	w8, [x1, #5096]
    a21c:	ret
    a220:	cbz	x0, a22c <BZ2_bzReadGetUnused@@Base+0x6c>
    a224:	mov	w8, #0xfffffffe            	// #-2
    a228:	str	w8, [x0]
    a22c:	mov	w8, #0xfffffffe            	// #-2
    a230:	str	w8, [x1, #5096]
    a234:	ret

000000000000a238 <BZ2_bzBuffToBuffCompress@@Base>:
    a238:	sub	sp, sp, #0x90
    a23c:	stp	x29, x30, [sp, #80]
    a240:	str	x23, [sp, #96]
    a244:	stp	x22, x21, [sp, #112]
    a248:	stp	x20, x19, [sp, #128]
    a24c:	add	x29, sp, #0x50
    a250:	cmp	w6, #0xfa
    a254:	mov	w20, #0xfffffffe            	// #-2
    a258:	b.hi	a2b8 <BZ2_bzBuffToBuffCompress@@Base+0x80>  // b.pmore
    a25c:	cmp	w5, #0x4
    a260:	b.hi	a2b8 <BZ2_bzBuffToBuffCompress@@Base+0x80>  // b.pmore
    a264:	mov	x23, x0
    a268:	cbz	x0, a2b8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    a26c:	mov	x19, x1
    a270:	cbz	x1, a2b8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    a274:	mov	x22, x2
    a278:	cbz	x2, a2b8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    a27c:	sub	w8, w4, #0x1
    a280:	cmp	w8, #0x8
    a284:	b.hi	a2b8 <BZ2_bzBuffToBuffCompress@@Base+0x80>  // b.pmore
    a288:	cmp	w6, #0x0
    a28c:	mov	w8, #0x1e                  	// #30
    a290:	mov	w21, w3
    a294:	csel	w3, w8, w6, eq  // eq = none
    a298:	mov	x0, sp
    a29c:	mov	w1, w4
    a2a0:	mov	w2, w5
    a2a4:	stp	xzr, xzr, [sp, #56]
    a2a8:	str	xzr, [sp, #72]
    a2ac:	bl	15c0 <BZ2_bzCompressInit@plt>
    a2b0:	mov	w20, w0
    a2b4:	cbz	w0, a2d4 <BZ2_bzBuffToBuffCompress@@Base+0x9c>
    a2b8:	mov	w0, w20
    a2bc:	ldp	x20, x19, [sp, #128]
    a2c0:	ldp	x22, x21, [sp, #112]
    a2c4:	ldr	x23, [sp, #96]
    a2c8:	ldp	x29, x30, [sp, #80]
    a2cc:	add	sp, sp, #0x90
    a2d0:	ret
    a2d4:	str	x22, [sp]
    a2d8:	str	x23, [sp, #24]
    a2dc:	str	w21, [sp, #8]
    a2e0:	ldr	w8, [x19]
    a2e4:	mov	x0, sp
    a2e8:	mov	w1, #0x2                   	// #2
    a2ec:	str	w8, [sp, #32]
    a2f0:	bl	1620 <BZ2_bzCompress@plt>
    a2f4:	cmp	w0, #0x3
    a2f8:	b.eq	a328 <BZ2_bzBuffToBuffCompress@@Base+0xf0>  // b.none
    a2fc:	mov	w20, w0
    a300:	cmp	w0, #0x4
    a304:	b.ne	a338 <BZ2_bzBuffToBuffCompress@@Base+0x100>  // b.any
    a308:	ldr	w8, [sp, #32]
    a30c:	ldr	w9, [x19]
    a310:	mov	x0, sp
    a314:	sub	w8, w9, w8
    a318:	str	w8, [x19]
    a31c:	bl	15d0 <BZ2_bzCompressEnd@plt>
    a320:	mov	w20, wzr
    a324:	b	a2b8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    a328:	mov	x0, sp
    a32c:	bl	15d0 <BZ2_bzCompressEnd@plt>
    a330:	mov	w20, #0xfffffff8            	// #-8
    a334:	b	a2b8 <BZ2_bzBuffToBuffCompress@@Base+0x80>
    a338:	mov	x0, sp
    a33c:	bl	15d0 <BZ2_bzCompressEnd@plt>
    a340:	b	a2b8 <BZ2_bzBuffToBuffCompress@@Base+0x80>

000000000000a344 <BZ2_bzBuffToBuffDecompress@@Base>:
    a344:	sub	sp, sp, #0x90
    a348:	stp	x29, x30, [sp, #80]
    a34c:	str	x23, [sp, #96]
    a350:	stp	x22, x21, [sp, #112]
    a354:	stp	x20, x19, [sp, #128]
    a358:	add	x29, sp, #0x50
    a35c:	mov	w20, #0xfffffffe            	// #-2
    a360:	cbz	x0, a3b0 <BZ2_bzBuffToBuffDecompress@@Base+0x6c>
    a364:	mov	x19, x1
    a368:	cbz	x1, a3b0 <BZ2_bzBuffToBuffDecompress@@Base+0x6c>
    a36c:	mov	x22, x2
    a370:	cbz	x2, a3b0 <BZ2_bzBuffToBuffDecompress@@Base+0x6c>
    a374:	cmp	w4, #0x1
    a378:	mov	w20, #0xfffffffe            	// #-2
    a37c:	b.hi	a3b0 <BZ2_bzBuffToBuffDecompress@@Base+0x6c>  // b.pmore
    a380:	cmp	w5, #0x4
    a384:	b.hi	a3b0 <BZ2_bzBuffToBuffDecompress@@Base+0x6c>  // b.pmore
    a388:	mov	x23, x0
    a38c:	mov	x0, sp
    a390:	mov	w1, w5
    a394:	mov	w2, w4
    a398:	mov	w21, w3
    a39c:	stp	xzr, xzr, [sp, #56]
    a3a0:	str	xzr, [sp, #72]
    a3a4:	bl	1550 <BZ2_bzDecompressInit@plt>
    a3a8:	mov	w20, w0
    a3ac:	cbz	w0, a3cc <BZ2_bzBuffToBuffDecompress@@Base+0x88>
    a3b0:	mov	w0, w20
    a3b4:	ldp	x20, x19, [sp, #128]
    a3b8:	ldp	x22, x21, [sp, #112]
    a3bc:	ldr	x23, [sp, #96]
    a3c0:	ldp	x29, x30, [sp, #80]
    a3c4:	add	sp, sp, #0x90
    a3c8:	ret
    a3cc:	str	x22, [sp]
    a3d0:	str	x23, [sp, #24]
    a3d4:	str	w21, [sp, #8]
    a3d8:	ldr	w8, [x19]
    a3dc:	mov	x0, sp
    a3e0:	str	w8, [sp, #32]
    a3e4:	bl	16a0 <BZ2_bzDecompress@plt>
    a3e8:	cbz	w0, a418 <BZ2_bzBuffToBuffDecompress@@Base+0xd4>
    a3ec:	mov	w20, w0
    a3f0:	cmp	w0, #0x4
    a3f4:	b.ne	a434 <BZ2_bzBuffToBuffDecompress@@Base+0xf0>  // b.any
    a3f8:	ldr	w8, [sp, #32]
    a3fc:	ldr	w9, [x19]
    a400:	mov	x0, sp
    a404:	sub	w8, w9, w8
    a408:	str	w8, [x19]
    a40c:	bl	1560 <BZ2_bzDecompressEnd@plt>
    a410:	mov	w20, wzr
    a414:	b	a3b0 <BZ2_bzBuffToBuffDecompress@@Base+0x6c>
    a418:	ldr	w19, [sp, #32]
    a41c:	mov	x0, sp
    a420:	bl	1560 <BZ2_bzDecompressEnd@plt>
    a424:	cmp	w19, #0x0
    a428:	mov	w8, #0xfffffff8            	// #-8
    a42c:	cinc	w20, w8, ne  // ne = any
    a430:	b	a3b0 <BZ2_bzBuffToBuffDecompress@@Base+0x6c>
    a434:	mov	x0, sp
    a438:	bl	1560 <BZ2_bzDecompressEnd@plt>
    a43c:	b	a3b0 <BZ2_bzBuffToBuffDecompress@@Base+0x6c>

000000000000a440 <BZ2_bzopen@@Base>:
    a440:	stp	x29, x30, [sp, #-16]!
    a444:	mov	x29, sp
    a448:	mov	x2, x1
    a44c:	mov	w1, #0xffffffff            	// #-1
    a450:	mov	w3, wzr
    a454:	bl	a460 <BZ2_bzopen@@Base+0x20>
    a458:	ldp	x29, x30, [sp], #16
    a45c:	ret
    a460:	stp	x29, x30, [sp, #-96]!
    a464:	str	x28, [sp, #16]
    a468:	stp	x26, x25, [sp, #32]
    a46c:	stp	x24, x23, [sp, #48]
    a470:	stp	x22, x21, [sp, #64]
    a474:	stp	x20, x19, [sp, #80]
    a478:	mov	x29, sp
    a47c:	sub	sp, sp, #0x1, lsl #12
    a480:	sub	sp, sp, #0x3a0
    a484:	strh	wzr, [sp, #16]
    a488:	str	xzr, [sp, #8]
    a48c:	cbz	x2, a628 <BZ2_bzopen@@Base+0x1e8>
    a490:	mov	w22, w3
    a494:	mov	x23, x2
    a498:	mov	w21, w1
    a49c:	mov	x20, x0
    a4a0:	mov	w25, wzr
    a4a4:	mov	w19, wzr
    a4a8:	mov	w24, #0x9                   	// #9
    a4ac:	b	a4b8 <BZ2_bzopen@@Base+0x78>
    a4b0:	mov	w19, #0x1                   	// #1
    a4b4:	add	x23, x23, #0x1
    a4b8:	ldrb	w26, [x23]
    a4bc:	cmp	w26, #0x72
    a4c0:	b.le	a4e0 <BZ2_bzopen@@Base+0xa0>
    a4c4:	cmp	w26, #0x73
    a4c8:	b.eq	a4b0 <BZ2_bzopen@@Base+0x70>  // b.none
    a4cc:	cmp	w26, #0x77
    a4d0:	b.ne	a4f4 <BZ2_bzopen@@Base+0xb4>  // b.any
    a4d4:	mov	w25, #0x1                   	// #1
    a4d8:	add	x23, x23, #0x1
    a4dc:	b	a4b8 <BZ2_bzopen@@Base+0x78>
    a4e0:	b.ne	a4f0 <BZ2_bzopen@@Base+0xb0>  // b.any
    a4e4:	mov	w25, wzr
    a4e8:	add	x23, x23, #0x1
    a4ec:	b	a4b8 <BZ2_bzopen@@Base+0x78>
    a4f0:	cbz	w26, a514 <BZ2_bzopen@@Base+0xd4>
    a4f4:	bl	1640 <__ctype_b_loc@plt>
    a4f8:	ldr	x8, [x0]
    a4fc:	sub	w9, w26, #0x30
    a500:	add	x23, x23, #0x1
    a504:	ldrh	w8, [x8, w26, uxtw #1]
    a508:	tst	w8, #0x800
    a50c:	csel	w24, w24, w9, eq  // eq = none
    a510:	b	a4b8 <BZ2_bzopen@@Base+0x78>
    a514:	add	x0, sp, #0x8
    a518:	add	x23, sp, #0x8
    a51c:	bl	14e0 <strlen@plt>
    a520:	cmp	w25, #0x0
    a524:	mov	w8, #0x72                  	// #114
    a528:	mov	w9, #0x77                  	// #119
    a52c:	csel	w8, w9, w8, ne  // ne = any
    a530:	strh	w8, [x23, x0]
    a534:	add	x0, sp, #0x8
    a538:	bl	14e0 <strlen@plt>
    a53c:	mov	w8, #0x62                  	// #98
    a540:	strh	w8, [x23, x0]
    a544:	cbz	w22, a560 <BZ2_bzopen@@Base+0x120>
    a548:	add	x1, sp, #0x8
    a54c:	mov	w0, w21
    a550:	bl	15a0 <fdopen@plt>
    a554:	mov	x20, x0
    a558:	cbnz	x20, a5a4 <BZ2_bzopen@@Base+0x164>
    a55c:	b	a628 <BZ2_bzopen@@Base+0x1e8>
    a560:	cbz	x20, a584 <BZ2_bzopen@@Base+0x144>
    a564:	ldrb	w8, [x20]
    a568:	cbz	w8, a584 <BZ2_bzopen@@Base+0x144>
    a56c:	add	x1, sp, #0x8
    a570:	mov	x0, x20
    a574:	bl	1710 <fopen64@plt>
    a578:	mov	x20, x0
    a57c:	cbnz	x20, a5a4 <BZ2_bzopen@@Base+0x164>
    a580:	b	a628 <BZ2_bzopen@@Base+0x1e8>
    a584:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    a588:	adrp	x9, 1b000 <BZ2_bzerror@@Base+0x1084c>
    a58c:	ldr	x8, [x8, #4032]
    a590:	ldr	x9, [x9, #4040]
    a594:	cmp	w25, #0x0
    a598:	csel	x8, x8, x9, ne  // ne = any
    a59c:	ldr	x20, [x8]
    a5a0:	cbz	x20, a628 <BZ2_bzopen@@Base+0x1e8>
    a5a4:	cbz	w25, a5d8 <BZ2_bzopen@@Base+0x198>
    a5a8:	cmp	w24, #0x1
    a5ac:	csinc	w8, w24, wzr, gt
    a5b0:	cmp	w8, #0x9
    a5b4:	mov	w9, #0x9                   	// #9
    a5b8:	csel	w2, w8, w9, lt  // lt = tstop
    a5bc:	add	x0, x29, #0x1c
    a5c0:	mov	w4, #0x1e                  	// #30
    a5c4:	mov	x1, x20
    a5c8:	mov	w3, wzr
    a5cc:	bl	15b0 <BZ2_bzWriteOpen@plt>
    a5d0:	cbnz	x0, a62c <BZ2_bzopen@@Base+0x1ec>
    a5d4:	b	a5f8 <BZ2_bzopen@@Base+0x1b8>
    a5d8:	add	x0, x29, #0x1c
    a5dc:	add	x4, sp, #0x18
    a5e0:	mov	x1, x20
    a5e4:	mov	w2, wzr
    a5e8:	mov	w3, w19
    a5ec:	mov	w5, wzr
    a5f0:	bl	1720 <BZ2_bzReadOpen@plt>
    a5f4:	cbnz	x0, a62c <BZ2_bzopen@@Base+0x1ec>
    a5f8:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    a5fc:	ldr	x8, [x8, #4040]
    a600:	ldr	x8, [x8]
    a604:	cmp	x20, x8
    a608:	b.eq	a62c <BZ2_bzopen@@Base+0x1ec>  // b.none
    a60c:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    a610:	ldr	x8, [x8, #4032]
    a614:	ldr	x8, [x8]
    a618:	cmp	x20, x8
    a61c:	b.eq	a62c <BZ2_bzopen@@Base+0x1ec>  // b.none
    a620:	mov	x0, x20
    a624:	bl	1530 <fclose@plt>
    a628:	mov	x0, xzr
    a62c:	add	sp, sp, #0x1, lsl #12
    a630:	add	sp, sp, #0x3a0
    a634:	ldp	x20, x19, [sp, #80]
    a638:	ldp	x22, x21, [sp, #64]
    a63c:	ldp	x24, x23, [sp, #48]
    a640:	ldp	x26, x25, [sp, #32]
    a644:	ldr	x28, [sp, #16]
    a648:	ldp	x29, x30, [sp], #96
    a64c:	ret

000000000000a650 <BZ2_bzdopen@@Base>:
    a650:	stp	x29, x30, [sp, #-16]!
    a654:	mov	x29, sp
    a658:	mov	x2, x1
    a65c:	mov	w1, w0
    a660:	mov	w3, #0x1                   	// #1
    a664:	mov	x0, xzr
    a668:	bl	a460 <BZ2_bzopen@@Base+0x20>
    a66c:	ldp	x29, x30, [sp], #16
    a670:	ret

000000000000a674 <BZ2_bzread@@Base>:
    a674:	sub	sp, sp, #0x20
    a678:	stp	x29, x30, [sp, #16]
    a67c:	add	x29, sp, #0x10
    a680:	ldr	w9, [x0, #5096]
    a684:	cmp	w9, #0x4
    a688:	b.ne	a694 <BZ2_bzread@@Base+0x20>  // b.any
    a68c:	mov	w0, wzr
    a690:	b	a6b8 <BZ2_bzread@@Base+0x44>
    a694:	mov	x8, x0
    a698:	mov	w3, w2
    a69c:	mov	x2, x1
    a6a0:	sub	x0, x29, #0x4
    a6a4:	mov	x1, x8
    a6a8:	bl	1730 <BZ2_bzRead@plt>
    a6ac:	ldur	w8, [x29, #-4]
    a6b0:	tst	w8, #0xfffffffb
    a6b4:	csinv	w0, w0, wzr, eq  // eq = none
    a6b8:	ldp	x29, x30, [sp, #16]
    a6bc:	add	sp, sp, #0x20
    a6c0:	ret

000000000000a6c4 <BZ2_bzwrite@@Base>:
    a6c4:	stp	x29, x30, [sp, #-32]!
    a6c8:	str	x19, [sp, #16]
    a6cc:	mov	x29, sp
    a6d0:	mov	w19, w2
    a6d4:	mov	x2, x1
    a6d8:	mov	x1, x0
    a6dc:	add	x0, x29, #0x1c
    a6e0:	mov	w3, w19
    a6e4:	bl	1630 <BZ2_bzWrite@plt>
    a6e8:	ldr	w8, [x29, #28]
    a6ec:	cmp	w8, #0x0
    a6f0:	csinv	w0, w19, wzr, eq  // eq = none
    a6f4:	ldr	x19, [sp, #16]
    a6f8:	ldp	x29, x30, [sp], #32
    a6fc:	ret

000000000000a700 <BZ2_bzflush@@Base>:
    a700:	mov	w0, wzr
    a704:	ret

000000000000a708 <BZ2_bzclose@@Base>:
    a708:	sub	sp, sp, #0x30
    a70c:	stp	x29, x30, [sp, #16]
    a710:	stp	x20, x19, [sp, #32]
    a714:	add	x29, sp, #0x10
    a718:	cbz	x0, a7a4 <BZ2_bzclose@@Base+0x9c>
    a71c:	mov	w8, #0x1394                	// #5012
    a720:	ldrb	w8, [x0, x8]
    a724:	ldr	x19, [x0]
    a728:	mov	x20, x0
    a72c:	sub	x0, x29, #0x4
    a730:	cbz	w8, a76c <BZ2_bzclose@@Base+0x64>
    a734:	mov	x1, x20
    a738:	mov	w2, wzr
    a73c:	mov	x3, xzr
    a740:	mov	x4, xzr
    a744:	bl	1610 <BZ2_bzWriteClose@plt>
    a748:	ldur	w8, [x29, #-4]
    a74c:	cbz	w8, a774 <BZ2_bzclose@@Base+0x6c>
    a750:	mov	w2, #0x1                   	// #1
    a754:	mov	x0, xzr
    a758:	mov	x1, x20
    a75c:	mov	x3, xzr
    a760:	mov	x4, xzr
    a764:	bl	1610 <BZ2_bzWriteClose@plt>
    a768:	b	a774 <BZ2_bzclose@@Base+0x6c>
    a76c:	mov	x1, x20
    a770:	bl	1570 <BZ2_bzReadClose@plt>
    a774:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    a778:	ldr	x8, [x8, #4040]
    a77c:	ldr	x8, [x8]
    a780:	cmp	x19, x8
    a784:	b.eq	a7a4 <BZ2_bzclose@@Base+0x9c>  // b.none
    a788:	adrp	x8, 1b000 <BZ2_bzerror@@Base+0x1084c>
    a78c:	ldr	x8, [x8, #4032]
    a790:	ldr	x8, [x8]
    a794:	cmp	x19, x8
    a798:	b.eq	a7a4 <BZ2_bzclose@@Base+0x9c>  // b.none
    a79c:	mov	x0, x19
    a7a0:	bl	1530 <fclose@plt>
    a7a4:	ldp	x20, x19, [sp, #32]
    a7a8:	ldp	x29, x30, [sp, #16]
    a7ac:	add	sp, sp, #0x30
    a7b0:	ret

000000000000a7b4 <BZ2_bzerror@@Base>:
    a7b4:	ldr	w8, [x0, #5096]
    a7b8:	adrp	x9, 1b000 <BZ2_bzerror@@Base+0x1084c>
    a7bc:	add	x9, x9, #0xd38
    a7c0:	and	w8, w8, w8, asr #31
    a7c4:	sub	x9, x9, w8, sxtw #3
    a7c8:	ldr	x0, [x9]
    a7cc:	str	w8, [x1]
    a7d0:	ret
    a7d4:	ldr	x8, [x0]
    a7d8:	ldr	w9, [x8, #32]
    a7dc:	cbz	w9, a85c <BZ2_bzerror@@Base+0xa8>
    a7e0:	ldp	w10, w9, [x0, #116]
    a7e4:	cmp	w9, w10
    a7e8:	b.ge	a85c <BZ2_bzerror@@Base+0xa8>  // b.tcont
    a7ec:	ldr	x10, [x0, #80]
    a7f0:	ldr	x8, [x8, #24]
    a7f4:	ldrb	w9, [x10, w9, sxtw]
    a7f8:	strb	w9, [x8]
    a7fc:	ldr	w9, [x0, #120]
    a800:	ldr	x8, [x0]
    a804:	add	w9, w9, #0x1
    a808:	str	w9, [x0, #120]
    a80c:	ldp	w9, w11, [x8, #32]
    a810:	ldr	x10, [x8, #24]
    a814:	sub	w9, w9, #0x1
    a818:	str	w9, [x8, #32]
    a81c:	add	x9, x10, #0x1
    a820:	adds	w10, w11, #0x1
    a824:	str	x9, [x8, #24]
    a828:	str	w10, [x8, #36]
    a82c:	b.cc	a83c <BZ2_bzerror@@Base+0x88>  // b.lo, b.ul, b.last
    a830:	ldr	w9, [x8, #40]
    a834:	add	w9, w9, #0x1
    a838:	str	w9, [x8, #40]
    a83c:	ldr	x8, [x0]
    a840:	ldr	w9, [x8, #32]
    a844:	cbz	w9, a854 <BZ2_bzerror@@Base+0xa0>
    a848:	ldp	w10, w9, [x0, #116]
    a84c:	cmp	w9, w10
    a850:	b.lt	a7ec <BZ2_bzerror@@Base+0x38>  // b.tstop
    a854:	mov	w0, #0x1                   	// #1
    a858:	ret
    a85c:	mov	w0, wzr
    a860:	ret
    a864:	stp	x29, x30, [sp, #-48]!
    a868:	stp	x22, x21, [sp, #16]
    a86c:	stp	x20, x19, [sp, #32]
    a870:	mov	x29, sp
    a874:	ldr	w8, [x0, #8]
    a878:	mov	x19, x0
    a87c:	cmp	w8, #0x2
    a880:	b.ne	a988 <BZ2_bzerror@@Base+0x1d4>  // b.any
    a884:	ldp	w8, w9, [x19, #108]
    a888:	cmp	w8, w9
    a88c:	b.ge	aaa4 <BZ2_bzerror@@Base+0x2f0>  // b.tcont
    a890:	ldr	x9, [x19]
    a894:	ldr	w10, [x9, #8]
    a898:	cbz	w10, aaa4 <BZ2_bzerror@@Base+0x2f0>
    a89c:	adrp	x21, 1b000 <BZ2_bzerror@@Base+0x1084c>
    a8a0:	ldr	x21, [x21, #4024]
    a8a4:	mov	w20, #0x1                   	// #1
    a8a8:	ldr	x9, [x9]
    a8ac:	ldrb	w22, [x9]
    a8b0:	ldr	w9, [x19, #92]
    a8b4:	cmp	w9, w22
    a8b8:	b.eq	a90c <BZ2_bzerror@@Base+0x158>  // b.none
    a8bc:	ldr	w10, [x19, #96]
    a8c0:	cmp	w10, #0x1
    a8c4:	b.ne	a904 <BZ2_bzerror@@Base+0x150>  // b.any
    a8c8:	ldr	w10, [x19, #648]
    a8cc:	and	w11, w9, #0xff
    a8d0:	add	x12, x19, x9
    a8d4:	eor	w11, w11, w10, lsr #24
    a8d8:	ldr	w11, [x21, w11, uxtw #2]
    a8dc:	eor	w10, w11, w10, lsl #8
    a8e0:	str	w10, [x19, #648]
    a8e4:	strb	w20, [x12, #128]
    a8e8:	ldr	x10, [x19, #64]
    a8ec:	strb	w9, [x10, w8, sxtw]
    a8f0:	ldr	w8, [x19, #108]
    a8f4:	str	w22, [x19, #92]
    a8f8:	add	w8, w8, #0x1
    a8fc:	str	w8, [x19, #108]
    a900:	b	a938 <BZ2_bzerror@@Base+0x184>
    a904:	cmp	w9, w22
    a908:	b.ne	a918 <BZ2_bzerror@@Base+0x164>  // b.any
    a90c:	ldr	w8, [x19, #96]
    a910:	cmp	w8, #0xff
    a914:	b.ne	a930 <BZ2_bzerror@@Base+0x17c>  // b.any
    a918:	cmp	w9, #0xff
    a91c:	b.hi	a928 <BZ2_bzerror@@Base+0x174>  // b.pmore
    a920:	mov	x0, x19
    a924:	bl	aaf0 <BZ2_bzerror@@Base+0x33c>
    a928:	stp	w22, w20, [x19, #92]
    a92c:	b	a938 <BZ2_bzerror@@Base+0x184>
    a930:	add	w8, w8, #0x1
    a934:	str	w8, [x19, #96]
    a938:	ldr	x8, [x19]
    a93c:	ldr	x9, [x8]
    a940:	ldp	w10, w11, [x8, #8]
    a944:	add	x9, x9, #0x1
    a948:	sub	w10, w10, #0x1
    a94c:	adds	w11, w11, #0x1
    a950:	str	x9, [x8]
    a954:	stp	w10, w11, [x8, #8]
    a958:	b.cc	a968 <BZ2_bzerror@@Base+0x1b4>  // b.lo, b.ul, b.last
    a95c:	ldr	w9, [x8, #16]
    a960:	add	w9, w9, #0x1
    a964:	str	w9, [x8, #16]
    a968:	ldp	w8, w9, [x19, #108]
    a96c:	cmp	w8, w9
    a970:	b.ge	a980 <BZ2_bzerror@@Base+0x1cc>  // b.tcont
    a974:	ldr	x9, [x19]
    a978:	ldr	w10, [x9, #8]
    a97c:	cbnz	w10, a8a8 <BZ2_bzerror@@Base+0xf4>
    a980:	mov	w0, #0x1                   	// #1
    a984:	b	aaa8 <BZ2_bzerror@@Base+0x2f4>
    a988:	ldp	w8, w9, [x19, #108]
    a98c:	cmp	w8, w9
    a990:	b.ge	aaa4 <BZ2_bzerror@@Base+0x2f0>  // b.tcont
    a994:	ldr	x9, [x19]
    a998:	ldr	w10, [x9, #8]
    a99c:	cbz	w10, aaa4 <BZ2_bzerror@@Base+0x2f0>
    a9a0:	adrp	x21, 1b000 <BZ2_bzerror@@Base+0x1084c>
    a9a4:	ldr	x21, [x21, #4024]
    a9a8:	mov	w0, wzr
    a9ac:	mov	w20, #0x1                   	// #1
    a9b0:	ldr	w10, [x19, #16]
    a9b4:	cbz	w10, aaa8 <BZ2_bzerror@@Base+0x2f4>
    a9b8:	ldr	x9, [x9]
    a9bc:	ldrb	w22, [x9]
    a9c0:	ldr	w9, [x19, #92]
    a9c4:	cmp	w9, w22
    a9c8:	b.ne	a9e4 <BZ2_bzerror@@Base+0x230>  // b.any
    a9cc:	ldr	w8, [x19, #96]
    a9d0:	cmp	w8, #0xff
    a9d4:	b.eq	aa34 <BZ2_bzerror@@Base+0x280>  // b.none
    a9d8:	add	w8, w8, #0x1
    a9dc:	str	w8, [x19, #96]
    a9e0:	b	aa48 <BZ2_bzerror@@Base+0x294>
    a9e4:	ldr	w10, [x19, #96]
    a9e8:	cmp	w10, #0x1
    a9ec:	b.ne	aa2c <BZ2_bzerror@@Base+0x278>  // b.any
    a9f0:	ldr	w10, [x19, #648]
    a9f4:	and	w11, w9, #0xff
    a9f8:	add	x12, x19, x9
    a9fc:	eor	w11, w11, w10, lsr #24
    aa00:	ldr	w11, [x21, w11, uxtw #2]
    aa04:	eor	w10, w11, w10, lsl #8
    aa08:	str	w10, [x19, #648]
    aa0c:	strb	w20, [x12, #128]
    aa10:	ldr	x10, [x19, #64]
    aa14:	strb	w9, [x10, w8, sxtw]
    aa18:	ldr	w8, [x19, #108]
    aa1c:	str	w22, [x19, #92]
    aa20:	add	w8, w8, #0x1
    aa24:	str	w8, [x19, #108]
    aa28:	b	aa48 <BZ2_bzerror@@Base+0x294>
    aa2c:	cmp	w9, w22
    aa30:	b.eq	a9cc <BZ2_bzerror@@Base+0x218>  // b.none
    aa34:	cmp	w9, #0xff
    aa38:	b.hi	aa44 <BZ2_bzerror@@Base+0x290>  // b.pmore
    aa3c:	mov	x0, x19
    aa40:	bl	aaf0 <BZ2_bzerror@@Base+0x33c>
    aa44:	stp	w22, w20, [x19, #92]
    aa48:	ldr	x8, [x19]
    aa4c:	ldr	x9, [x8]
    aa50:	ldp	w10, w11, [x8, #8]
    aa54:	add	x9, x9, #0x1
    aa58:	sub	w10, w10, #0x1
    aa5c:	adds	w11, w11, #0x1
    aa60:	str	x9, [x8]
    aa64:	stp	w10, w11, [x8, #8]
    aa68:	b.cc	aa78 <BZ2_bzerror@@Base+0x2c4>  // b.lo, b.ul, b.last
    aa6c:	ldr	w9, [x8, #16]
    aa70:	add	w9, w9, #0x1
    aa74:	str	w9, [x8, #16]
    aa78:	ldr	w9, [x19, #16]
    aa7c:	ldp	w8, w10, [x19, #108]
    aa80:	sub	w9, w9, #0x1
    aa84:	cmp	w8, w10
    aa88:	str	w9, [x19, #16]
    aa8c:	b.ge	a980 <BZ2_bzerror@@Base+0x1cc>  // b.tcont
    aa90:	ldr	x9, [x19]
    aa94:	mov	w0, #0x1                   	// #1
    aa98:	ldr	w10, [x9, #8]
    aa9c:	cbnz	w10, a9b0 <BZ2_bzerror@@Base+0x1fc>
    aaa0:	b	aaa8 <BZ2_bzerror@@Base+0x2f4>
    aaa4:	mov	w0, wzr
    aaa8:	ldp	x20, x19, [sp, #32]
    aaac:	ldp	x22, x21, [sp, #16]
    aab0:	ldp	x29, x30, [sp], #48
    aab4:	ret
    aab8:	stp	x29, x30, [sp, #-32]!
    aabc:	str	x19, [sp, #16]
    aac0:	mov	x29, sp
    aac4:	ldr	w8, [x0, #92]
    aac8:	mov	x19, x0
    aacc:	cmp	w8, #0xff
    aad0:	b.hi	aadc <BZ2_bzerror@@Base+0x328>  // b.pmore
    aad4:	mov	x0, x19
    aad8:	bl	aaf0 <BZ2_bzerror@@Base+0x33c>
    aadc:	mov	x0, x19
    aae0:	bl	8578 <BZ2_bzCompressInit@@Base+0x1f8>
    aae4:	ldr	x19, [sp, #16]
    aae8:	ldp	x29, x30, [sp], #32
    aaec:	ret
    aaf0:	ldp	w8, w9, [x0, #92]
    aaf4:	cmp	w9, #0x1
    aaf8:	b.lt	ab30 <BZ2_bzerror@@Base+0x37c>  // b.tstop
    aafc:	adrp	x12, 1b000 <BZ2_bzerror@@Base+0x1084c>
    ab00:	ldr	w9, [x0, #96]
    ab04:	ldr	x12, [x12, #4024]
    ab08:	mov	w10, wzr
    ab0c:	and	w11, w8, #0xff
    ab10:	ldr	w13, [x0, #648]
    ab14:	add	w10, w10, #0x1
    ab18:	cmp	w10, w9
    ab1c:	eor	w14, w11, w13, lsr #24
    ab20:	ldr	w14, [x12, w14, uxtw #2]
    ab24:	eor	w13, w14, w13, lsl #8
    ab28:	str	w13, [x0, #648]
    ab2c:	b.lt	ab10 <BZ2_bzerror@@Base+0x35c>  // b.tstop
    ab30:	add	x10, x0, x8
    ab34:	mov	w11, #0x1                   	// #1
    ab38:	cmp	w9, #0x3
    ab3c:	strb	w11, [x10, #128]
    ab40:	b.eq	ab60 <BZ2_bzerror@@Base+0x3ac>  // b.none
    ab44:	cmp	w9, #0x2
    ab48:	b.eq	ab9c <BZ2_bzerror@@Base+0x3e8>  // b.none
    ab4c:	cmp	w9, #0x1
    ab50:	b.ne	abc4 <BZ2_bzerror@@Base+0x410>  // b.any
    ab54:	ldr	w10, [x0, #108]!
    ab58:	sub	x9, x0, #0x2c
    ab5c:	b	ac30 <BZ2_bzerror@@Base+0x47c>
    ab60:	ldr	x9, [x0, #64]!
    ab64:	mov	x11, x0
    ab68:	ldrsw	x10, [x11, #44]!
    ab6c:	strb	w8, [x9, x10]
    ab70:	ldrsw	x9, [x11]
    ab74:	add	x9, x9, #0x1
    ab78:	str	w9, [x11]
    ab7c:	ldr	x10, [x0]
    ab80:	strb	w8, [x10, x9]
    ab84:	ldr	w9, [x11]
    ab88:	add	w10, w9, #0x1
    ab8c:	str	w10, [x11]
    ab90:	mov	x9, x0
    ab94:	mov	x0, x11
    ab98:	b	ac30 <BZ2_bzerror@@Base+0x47c>
    ab9c:	ldr	x9, [x0, #64]!
    aba0:	mov	x11, x0
    aba4:	ldrsw	x10, [x11, #44]!
    aba8:	strb	w8, [x9, x10]
    abac:	ldr	w10, [x11]
    abb0:	mov	x9, x0
    abb4:	mov	x0, x11
    abb8:	add	w10, w10, #0x1
    abbc:	str	w10, [x11]
    abc0:	b	ac30 <BZ2_bzerror@@Base+0x47c>
    abc4:	add	x9, x0, w9, sxtw
    abc8:	mov	w10, #0x1                   	// #1
    abcc:	strb	w10, [x9, #124]
    abd0:	ldrsw	x10, [x0, #108]!
    abd4:	mov	x9, x0
    abd8:	ldr	x11, [x9, #-44]!
    abdc:	strb	w8, [x11, x10]
    abe0:	ldrsw	x10, [x0]
    abe4:	add	x10, x10, #0x1
    abe8:	str	w10, [x0]
    abec:	ldr	x11, [x9]
    abf0:	strb	w8, [x11, x10]
    abf4:	ldrsw	x10, [x0]
    abf8:	add	x10, x10, #0x1
    abfc:	str	w10, [x0]
    ac00:	ldr	x11, [x9]
    ac04:	strb	w8, [x11, x10]
    ac08:	ldrsw	x10, [x0]
    ac0c:	add	x10, x10, #0x1
    ac10:	str	w10, [x0]
    ac14:	ldr	x11, [x9]
    ac18:	strb	w8, [x11, x10]
    ac1c:	ldr	w8, [x0]
    ac20:	ldurb	w11, [x0, #-12]
    ac24:	add	w10, w8, #0x1
    ac28:	sub	w8, w11, #0x4
    ac2c:	str	w10, [x0]
    ac30:	ldr	x9, [x9]
    ac34:	strb	w8, [x9, w10, sxtw]
    ac38:	ldr	w8, [x0]
    ac3c:	add	w8, w8, #0x1
    ac40:	str	w8, [x0]
    ac44:	ret

Disassembly of section .fini:

000000000000ac48 <.fini>:
    ac48:	stp	x29, x30, [sp, #-16]!
    ac4c:	mov	x29, sp
    ac50:	ldp	x29, x30, [sp], #16
    ac54:	ret
