In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libatomic.a_gcc_-O3:

gload.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_load>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	cmp	x0, #0x4
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	mov	x20, x1
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x2
  20:	b.eq	12c <__atomic_load+0x12c>  // b.none
  24:	b.ls	5c <__atomic_load+0x5c>  // b.plast
  28:	cmp	x0, #0xf
  2c:	b.hi	f8 <__atomic_load+0xf8>  // b.pmore
  30:	cmp	x0, #0x8
  34:	b.hi	90 <__atomic_load+0x90>  // b.pmore
  38:	b.ne	80 <__atomic_load+0x80>  // b.any
  3c:	tst	x1, #0x7
  40:	b.ne	90 <__atomic_load+0x90>  // b.any
  44:	ldar	x0, [x1]
  48:	str	x0, [x2]
  4c:	ldp	x19, x20, [sp, #16]
  50:	ldp	x21, x22, [sp, #32]
  54:	ldp	x29, x30, [sp], #64
  58:	ret
  5c:	cmp	x0, #0x2
  60:	b.eq	11c <__atomic_load+0x11c>  // b.none
  64:	cmp	x0, #0x3
  68:	b.ne	d4 <__atomic_load+0xd4>  // b.any
  6c:	and	x22, x20, #0x3
  70:	add	x0, x19, x22
  74:	cmp	x0, #0x4
  78:	b.ls	184 <__atomic_load+0x184>  // b.plast
  7c:	nop
  80:	and	x22, x20, #0x7
  84:	add	x0, x19, x22
  88:	cmp	x0, #0x8
  8c:	b.ls	174 <__atomic_load+0x174>  // b.plast
  90:	and	x22, x20, #0xf
  94:	add	x0, x19, x22
  98:	cmp	x0, #0x10
  9c:	b.ls	140 <__atomic_load+0x140>  // b.plast
  a0:	mov	x1, x19
  a4:	mov	x0, x20
  a8:	bl	0 <libat_lock_n>
  ac:	mov	x2, x19
  b0:	mov	x1, x20
  b4:	mov	x0, x21
  b8:	bl	0 <memcpy>
  bc:	mov	x1, x19
  c0:	mov	x0, x20
  c4:	ldp	x19, x20, [sp, #16]
  c8:	ldp	x21, x22, [sp, #32]
  cc:	ldp	x29, x30, [sp], #64
  d0:	b	0 <libat_unlock_n>
  d4:	cbz	x0, 4c <__atomic_load+0x4c>
  d8:	cmp	x0, #0x1
  dc:	b.ne	a0 <__atomic_load+0xa0>  // b.any
  e0:	ldarb	w0, [x1]
  e4:	strb	w0, [x2]
  e8:	ldp	x19, x20, [sp, #16]
  ec:	ldp	x21, x22, [sp, #32]
  f0:	ldp	x29, x30, [sp], #64
  f4:	ret
  f8:	cmp	x0, #0x10
  fc:	b.ne	a0 <__atomic_load+0xa0>  // b.any
 100:	tst	x1, #0xf
 104:	b.ne	a0 <__atomic_load+0xa0>  // b.any
 108:	mov	w1, w3
 10c:	mov	x0, x20
 110:	bl	0 <__atomic_load_16>
 114:	stp	x0, x1, [x21]
 118:	b	4c <__atomic_load+0x4c>
 11c:	tbnz	w1, #0, 6c <__atomic_load+0x6c>
 120:	ldarh	w0, [x1]
 124:	strh	w0, [x2]
 128:	b	4c <__atomic_load+0x4c>
 12c:	tst	x1, #0x3
 130:	b.ne	80 <__atomic_load+0x80>  // b.any
 134:	ldar	w0, [x1]
 138:	str	w0, [x2]
 13c:	b	4c <__atomic_load+0x4c>
 140:	mov	w1, w3
 144:	and	x0, x20, #0xfffffffffffffff0
 148:	bl	0 <__atomic_load_16>
 14c:	stp	x0, x1, [sp, #48]
 150:	add	x1, sp, #0x30
 154:	mov	x2, x19
 158:	add	x1, x1, x22
 15c:	mov	x0, x21
 160:	bl	0 <memcpy>
 164:	ldp	x19, x20, [sp, #16]
 168:	ldp	x21, x22, [sp, #32]
 16c:	ldp	x29, x30, [sp], #64
 170:	ret
 174:	and	x20, x20, #0xfffffffffffffff8
 178:	ldar	x0, [x20]
 17c:	str	x0, [sp, #48]
 180:	b	150 <__atomic_load+0x150>
 184:	and	x20, x20, #0xfffffffffffffffc
 188:	ldar	w0, [x20]
 18c:	str	w0, [sp, #48]
 190:	b	150 <__atomic_load+0x150>

gstore.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_store>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	cmp	x0, #0x4
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	mov	x20, x1
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x21, x2
  20:	b.eq	1a4 <__atomic_store+0x1a4>  // b.none
  24:	b.hi	a8 <__atomic_store+0xa8>  // b.pmore
  28:	cmp	x0, #0x2
  2c:	b.eq	1b8 <__atomic_store+0x1b8>  // b.none
  30:	cmp	x0, #0x3
  34:	b.ne	180 <__atomic_store+0x180>  // b.any
  38:	and	x3, x20, #0x3
  3c:	add	x0, x19, x3
  40:	cmp	x0, #0x4
  44:	b.hi	104 <__atomic_store+0x104>  // b.pmore
  48:	dmb	ish
  4c:	and	x20, x20, #0xfffffffffffffffc
  50:	add	x1, sp, #0x40
  54:	add	x3, x1, x3
  58:	add	x22, sp, #0x30
  5c:	ldr	w0, [x20]
  60:	str	w0, [sp, #48]
  64:	ldp	x4, x5, [sp, #48]
  68:	mov	x2, x19
  6c:	mov	x1, x21
  70:	mov	x0, x3
  74:	stp	x4, x5, [sp, #64]
  78:	bl	0 <memcpy>
  7c:	mov	x3, x0
  80:	ldr	w1, [sp, #64]
  84:	ldr	w0, [x22]
  88:	ldxr	w2, [x20]
  8c:	cmp	w2, w0
  90:	b.ne	9c <__atomic_store+0x9c>  // b.any
  94:	stxr	w4, w1, [x20]
  98:	cmp	w4, #0x0
  9c:	b.eq	16c <__atomic_store+0x16c>  // b.none
  a0:	str	w2, [x22]
  a4:	b	64 <__atomic_store+0x64>
  a8:	cmp	x0, #0x8
  ac:	b.eq	1c8 <__atomic_store+0x1c8>  // b.none
  b0:	b.ls	100 <__atomic_store+0x100>  // b.plast
  b4:	cmp	x0, #0x10
  b8:	b.ne	c8 <__atomic_store+0xc8>  // b.any
  bc:	tst	x1, #0xf
  c0:	b.eq	1dc <__atomic_store+0x1dc>  // b.none
  c4:	nop
  c8:	mov	x1, x19
  cc:	mov	x0, x20
  d0:	bl	0 <libat_lock_n>
  d4:	mov	x2, x19
  d8:	mov	x1, x21
  dc:	mov	x0, x20
  e0:	bl	0 <memcpy>
  e4:	mov	x1, x19
  e8:	mov	x0, x20
  ec:	bl	0 <libat_unlock_n>
  f0:	ldp	x19, x20, [sp, #16]
  f4:	ldp	x21, x22, [sp, #32]
  f8:	ldp	x29, x30, [sp], #80
  fc:	ret
 100:	b.eq	c8 <__atomic_store+0xc8>  // b.none
 104:	and	x0, x20, #0x7
 108:	add	x1, x19, x0
 10c:	cmp	x1, #0x8
 110:	b.hi	c8 <__atomic_store+0xc8>  // b.pmore
 114:	dmb	ish
 118:	and	x20, x20, #0xfffffffffffffff8
 11c:	add	x1, sp, #0x40
 120:	add	x3, x1, x0
 124:	add	x22, sp, #0x30
 128:	ldr	x0, [x20]
 12c:	str	x0, [sp, #48]
 130:	ldp	x4, x5, [sp, #48]
 134:	mov	x2, x19
 138:	mov	x1, x21
 13c:	mov	x0, x3
 140:	stp	x4, x5, [sp, #64]
 144:	bl	0 <memcpy>
 148:	mov	x3, x0
 14c:	ldr	x0, [x22]
 150:	ldr	x1, [sp, #64]
 154:	ldxr	x2, [x20]
 158:	cmp	x2, x0
 15c:	b.ne	168 <__atomic_store+0x168>  // b.any
 160:	stxr	w4, x1, [x20]
 164:	cmp	w4, #0x0
 168:	b.ne	1f0 <__atomic_store+0x1f0>  // b.any
 16c:	dmb	ish
 170:	ldp	x19, x20, [sp, #16]
 174:	ldp	x21, x22, [sp, #32]
 178:	ldp	x29, x30, [sp], #80
 17c:	ret
 180:	cbz	x0, f0 <__atomic_store+0xf0>
 184:	cmp	x0, #0x1
 188:	b.ne	c8 <__atomic_store+0xc8>  // b.any
 18c:	ldrb	w0, [x2]
 190:	stlrb	w0, [x1]
 194:	ldp	x19, x20, [sp, #16]
 198:	ldp	x21, x22, [sp, #32]
 19c:	ldp	x29, x30, [sp], #80
 1a0:	ret
 1a4:	tst	x1, #0x3
 1a8:	b.ne	104 <__atomic_store+0x104>  // b.any
 1ac:	ldr	w0, [x2]
 1b0:	stlr	w0, [x1]
 1b4:	b	f0 <__atomic_store+0xf0>
 1b8:	tbnz	w1, #0, 38 <__atomic_store+0x38>
 1bc:	ldrh	w0, [x2]
 1c0:	stlrh	w0, [x1]
 1c4:	b	f0 <__atomic_store+0xf0>
 1c8:	tst	x1, #0x7
 1cc:	b.ne	c8 <__atomic_store+0xc8>  // b.any
 1d0:	ldr	x0, [x2]
 1d4:	stlr	x0, [x1]
 1d8:	b	f0 <__atomic_store+0xf0>
 1dc:	mov	w4, w3
 1e0:	mov	x0, x1
 1e4:	ldp	x2, x3, [x2]
 1e8:	bl	0 <__atomic_store_16>
 1ec:	b	f0 <__atomic_store+0xf0>
 1f0:	str	x2, [x22]
 1f4:	b	130 <__atomic_store+0x130>

gcas.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_compare_exchange>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	cmp	x0, #0x4
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	mov	x19, x0
  14:	mov	x20, x1
  18:	stp	x21, x22, [sp, #32]
  1c:	mov	x22, x3
  20:	stp	x23, x24, [sp, #48]
  24:	mov	x23, x2
  28:	b.eq	260 <__atomic_compare_exchange+0x260>  // b.none
  2c:	b.hi	e8 <__atomic_compare_exchange+0xe8>  // b.pmore
  30:	cmp	x0, #0x2
  34:	b.eq	294 <__atomic_compare_exchange+0x294>  // b.none
  38:	cmp	x0, #0x3
  3c:	b.ne	160 <__atomic_compare_exchange+0x160>  // b.any
  40:	and	x0, x20, #0x3
  44:	add	x1, x19, x0
  48:	cmp	x1, #0x4
  4c:	b.hi	1a0 <__atomic_compare_exchange+0x1a0>  // b.pmore
  50:	stp	x25, x26, [sp, #64]
  54:	dmb	ish
  58:	and	x20, x20, #0xfffffffffffffffc
  5c:	ldr	w1, [x20]
  60:	add	x21, sp, #0x50
  64:	add	x2, sp, #0x60
  68:	add	x24, x21, x0
  6c:	add	x25, x2, x0
  70:	str	w1, [sp, #80]
  74:	mov	x2, x19
  78:	mov	x1, x23
  7c:	mov	x0, x24
  80:	mov	x26, x24
  84:	bl	0 <memcmp>
  88:	cbnz	w0, 2e4 <__atomic_compare_exchange+0x2e4>
  8c:	ldp	x4, x5, [sp, #80]
  90:	mov	x2, x19
  94:	mov	x1, x22
  98:	mov	x0, x25
  9c:	stp	x4, x5, [sp, #96]
  a0:	bl	0 <memcpy>
  a4:	ldr	w0, [x21]
  a8:	ldr	w1, [sp, #96]
  ac:	ldxr	w2, [x20]
  b0:	cmp	w2, w0
  b4:	b.ne	c0 <__atomic_compare_exchange+0xc0>  // b.any
  b8:	stxr	w3, w1, [x20]
  bc:	cmp	w3, #0x0
  c0:	b.ne	2dc <__atomic_compare_exchange+0x2dc>  // b.any
  c4:	dmb	ish
  c8:	ldp	x25, x26, [sp, #64]
  cc:	mov	w21, #0x1                   	// #1
  d0:	mov	w0, w21
  d4:	ldp	x19, x20, [sp, #16]
  d8:	ldp	x21, x22, [sp, #32]
  dc:	ldp	x23, x24, [sp, #48]
  e0:	ldp	x29, x30, [sp], #112
  e4:	ret
  e8:	cmp	x0, #0x8
  ec:	b.eq	22c <__atomic_compare_exchange+0x22c>  // b.none
  f0:	b.ls	19c <__atomic_compare_exchange+0x19c>  // b.plast
  f4:	cmp	x0, #0x10
  f8:	b.ne	104 <__atomic_compare_exchange+0x104>  // b.any
  fc:	tst	x1, #0xf
 100:	b.eq	2c4 <__atomic_compare_exchange+0x2c4>  // b.none
 104:	mov	x1, x19
 108:	mov	x0, x20
 10c:	bl	0 <libat_lock_n>
 110:	mov	x2, x19
 114:	mov	x1, x23
 118:	mov	x0, x20
 11c:	bl	0 <memcmp>
 120:	cmp	w0, #0x0
 124:	mov	x2, x19
 128:	csel	x23, x23, x20, ne  // ne = any
 12c:	csel	x1, x20, x22, ne  // ne = any
 130:	cset	w21, eq  // eq = none
 134:	mov	x0, x23
 138:	bl	0 <memcpy>
 13c:	mov	x1, x19
 140:	mov	x0, x20
 144:	bl	0 <libat_unlock_n>
 148:	mov	w0, w21
 14c:	ldp	x19, x20, [sp, #16]
 150:	ldp	x21, x22, [sp, #32]
 154:	ldp	x23, x24, [sp, #48]
 158:	ldp	x29, x30, [sp], #112
 15c:	ret
 160:	mov	w21, #0x1                   	// #1
 164:	cbz	x0, d0 <__atomic_compare_exchange+0xd0>
 168:	cmp	x0, #0x1
 16c:	b.ne	104 <__atomic_compare_exchange+0x104>  // b.any
 170:	ldrb	w1, [x3]
 174:	ldrb	w0, [x2]
 178:	ldaxrb	w2, [x20]
 17c:	cmp	w2, w0, uxtb
 180:	b.ne	18c <__atomic_compare_exchange+0x18c>  // b.any
 184:	stlxrb	w3, w1, [x20]
 188:	cbnz	w3, 178 <__atomic_compare_exchange+0x178>
 18c:	cset	w21, eq  // eq = none
 190:	b.eq	d0 <__atomic_compare_exchange+0xd0>  // b.none
 194:	strb	w2, [x23]
 198:	b	d0 <__atomic_compare_exchange+0xd0>
 19c:	b.eq	104 <__atomic_compare_exchange+0x104>  // b.none
 1a0:	and	x0, x20, #0x7
 1a4:	add	x1, x19, x0
 1a8:	cmp	x1, #0x8
 1ac:	b.hi	104 <__atomic_compare_exchange+0x104>  // b.pmore
 1b0:	stp	x25, x26, [sp, #64]
 1b4:	dmb	ish
 1b8:	and	x20, x20, #0xfffffffffffffff8
 1bc:	ldr	x1, [x20]
 1c0:	add	x21, sp, #0x50
 1c4:	add	x2, sp, #0x60
 1c8:	add	x25, x21, x0
 1cc:	add	x24, x2, x0
 1d0:	str	x1, [sp, #80]
 1d4:	mov	x2, x19
 1d8:	mov	x1, x23
 1dc:	mov	x0, x25
 1e0:	mov	x26, x25
 1e4:	bl	0 <memcmp>
 1e8:	cbnz	w0, 2e4 <__atomic_compare_exchange+0x2e4>
 1ec:	ldp	x4, x5, [sp, #80]
 1f0:	mov	x2, x19
 1f4:	mov	x1, x22
 1f8:	mov	x0, x24
 1fc:	stp	x4, x5, [sp, #96]
 200:	bl	0 <memcpy>
 204:	ldr	x0, [x21]
 208:	ldr	x1, [sp, #96]
 20c:	ldxr	x2, [x20]
 210:	cmp	x2, x0
 214:	b.ne	220 <__atomic_compare_exchange+0x220>  // b.any
 218:	stxr	w3, x1, [x20]
 21c:	cmp	w3, #0x0
 220:	b.eq	c4 <__atomic_compare_exchange+0xc4>  // b.none
 224:	str	x2, [x21]
 228:	b	1d4 <__atomic_compare_exchange+0x1d4>
 22c:	tst	x1, #0x7
 230:	b.ne	104 <__atomic_compare_exchange+0x104>  // b.any
 234:	ldr	x1, [x3]
 238:	ldr	x0, [x2]
 23c:	ldaxr	x2, [x20]
 240:	cmp	x2, x0
 244:	b.ne	250 <__atomic_compare_exchange+0x250>  // b.any
 248:	stlxr	w3, x1, [x20]
 24c:	cbnz	w3, 23c <__atomic_compare_exchange+0x23c>
 250:	cset	w21, eq  // eq = none
 254:	b.eq	d0 <__atomic_compare_exchange+0xd0>  // b.none
 258:	str	x2, [x23]
 25c:	b	d0 <__atomic_compare_exchange+0xd0>
 260:	tst	x1, #0x3
 264:	b.ne	1a0 <__atomic_compare_exchange+0x1a0>  // b.any
 268:	ldr	w1, [x3]
 26c:	ldr	w0, [x2]
 270:	ldaxr	w2, [x20]
 274:	cmp	w2, w0
 278:	b.ne	284 <__atomic_compare_exchange+0x284>  // b.any
 27c:	stlxr	w3, w1, [x20]
 280:	cbnz	w3, 270 <__atomic_compare_exchange+0x270>
 284:	cset	w21, eq  // eq = none
 288:	b.eq	d0 <__atomic_compare_exchange+0xd0>  // b.none
 28c:	str	w2, [x23]
 290:	b	d0 <__atomic_compare_exchange+0xd0>
 294:	tbnz	w1, #0, 40 <__atomic_compare_exchange+0x40>
 298:	ldrh	w1, [x3]
 29c:	ldrh	w0, [x2]
 2a0:	ldaxrh	w2, [x20]
 2a4:	cmp	w2, w0, uxth
 2a8:	b.ne	2b4 <__atomic_compare_exchange+0x2b4>  // b.any
 2ac:	stlxrh	w3, w1, [x20]
 2b0:	cbnz	w3, 2a0 <__atomic_compare_exchange+0x2a0>
 2b4:	cset	w21, eq  // eq = none
 2b8:	b.eq	d0 <__atomic_compare_exchange+0xd0>  // b.none
 2bc:	strh	w2, [x23]
 2c0:	b	d0 <__atomic_compare_exchange+0xd0>
 2c4:	ldp	x2, x3, [x3]
 2c8:	mov	x1, x23
 2cc:	mov	x0, x20
 2d0:	bl	0 <__atomic_compare_exchange_16>
 2d4:	and	w21, w0, #0xff
 2d8:	b	d0 <__atomic_compare_exchange+0xd0>
 2dc:	str	w2, [x21]
 2e0:	b	74 <__atomic_compare_exchange+0x74>
 2e4:	dmb	ish
 2e8:	mov	w21, #0x0                   	// #0
 2ec:	mov	x1, x26
 2f0:	mov	x2, x19
 2f4:	mov	x0, x23
 2f8:	bl	0 <memcpy>
 2fc:	ldp	x25, x26, [sp, #64]
 300:	b	d0 <__atomic_compare_exchange+0xd0>

gexch.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_large_inplace>:
   0:	sub	sp, sp, #0x450
   4:	cmp	x0, #0x3ff
   8:	stp	x29, x30, [sp]
   c:	mov	x29, sp
  10:	stp	x21, x22, [sp, #32]
  14:	mov	x22, x0
  18:	stp	x23, x24, [sp, #48]
  1c:	mov	x23, x1
  20:	str	x25, [sp, #64]
  24:	mov	x25, x2
  28:	b.ls	104 <libat_exchange_large_inplace+0x104>  // b.plast
  2c:	sub	x24, x0, #0x400
  30:	add	x21, x1, #0x400
  34:	and	x3, x24, #0xfffffffffffffc00
  38:	stp	x19, x20, [sp, #16]
  3c:	add	x21, x3, x21
  40:	mov	x19, x1
  44:	mov	x20, x2
  48:	mov	x1, x19
  4c:	mov	x2, #0x400                 	// #1024
  50:	add	x0, sp, #0x50
  54:	bl	0 <memcpy>
  58:	mov	x1, x20
  5c:	mov	x0, x19
  60:	mov	x2, #0x400                 	// #1024
  64:	bl	0 <memcpy>
  68:	mov	x0, x20
  6c:	add	x19, x19, #0x400
  70:	add	x1, sp, #0x50
  74:	mov	x2, #0x400                 	// #1024
  78:	bl	0 <memcpy>
  7c:	add	x20, x20, #0x400
  80:	cmp	x19, x21
  84:	b.ne	48 <libat_exchange_large_inplace+0x48>  // b.any
  88:	ldp	x19, x20, [sp, #16]
  8c:	and	x24, x24, #0xfffffffffffffc00
  90:	and	x22, x22, #0x3ff
  94:	add	x24, x24, #0x400
  98:	cbnz	x22, b4 <libat_exchange_large_inplace+0xb4>
  9c:	ldp	x29, x30, [sp]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldp	x23, x24, [sp, #48]
  a8:	ldr	x25, [sp, #64]
  ac:	add	sp, sp, #0x450
  b0:	ret
  b4:	add	x23, x23, x24
  b8:	mov	x2, x22
  bc:	add	x24, x25, x24
  c0:	mov	x1, x23
  c4:	add	x0, sp, #0x50
  c8:	bl	0 <memcpy>
  cc:	mov	x1, x24
  d0:	mov	x2, x22
  d4:	mov	x0, x23
  d8:	bl	0 <memcpy>
  dc:	mov	x2, x22
  e0:	add	x1, sp, #0x50
  e4:	mov	x0, x24
  e8:	bl	0 <memcpy>
  ec:	ldp	x29, x30, [sp]
  f0:	ldp	x21, x22, [sp, #32]
  f4:	ldp	x23, x24, [sp, #48]
  f8:	ldr	x25, [sp, #64]
  fc:	add	sp, sp, #0x450
 100:	ret
 104:	mov	x24, #0x0                   	// #0
 108:	b	98 <libat_exchange_large_inplace+0x98>
 10c:	nop

0000000000000110 <__atomic_exchange>:
 110:	stp	x29, x30, [sp, #-96]!
 114:	cmp	x0, #0x4
 118:	mov	x29, sp
 11c:	stp	x19, x20, [sp, #16]
 120:	mov	x19, x0
 124:	mov	x20, x1
 128:	stp	x21, x22, [sp, #32]
 12c:	mov	x22, x2
 130:	mov	x21, x3
 134:	b.eq	354 <__atomic_exchange+0x244>  // b.none
 138:	b.hi	1c0 <__atomic_exchange+0xb0>  // b.pmore
 13c:	cmp	x0, #0x2
 140:	b.eq	380 <__atomic_exchange+0x270>  // b.none
 144:	cmp	x0, #0x3
 148:	b.ne	264 <__atomic_exchange+0x154>  // b.any
 14c:	stp	x23, x24, [sp, #48]
 150:	and	x23, x20, #0x3
 154:	add	x0, x19, x23
 158:	cmp	x0, #0x4
 15c:	b.hi	238 <__atomic_exchange+0x128>  // b.pmore
 160:	dmb	ish
 164:	and	x20, x20, #0xfffffffffffffffc
 168:	add	x0, sp, #0x50
 16c:	add	x3, x0, x23
 170:	add	x24, sp, #0x40
 174:	ldr	w0, [x20]
 178:	str	w0, [sp, #64]
 17c:	ldp	x4, x5, [sp, #64]
 180:	mov	x2, x19
 184:	mov	x1, x22
 188:	mov	x0, x3
 18c:	stp	x4, x5, [sp, #80]
 190:	bl	0 <memcpy>
 194:	mov	x3, x0
 198:	ldr	w1, [sp, #80]
 19c:	ldr	w0, [x24]
 1a0:	ldxr	w2, [x20]
 1a4:	cmp	w2, w0
 1a8:	b.ne	1b4 <__atomic_exchange+0xa4>  // b.any
 1ac:	stxr	w4, w1, [x20]
 1b0:	cmp	w4, #0x0
 1b4:	b.eq	300 <__atomic_exchange+0x1f0>  // b.none
 1b8:	str	w2, [x24]
 1bc:	b	17c <__atomic_exchange+0x6c>
 1c0:	cmp	x0, #0x8
 1c4:	b.eq	328 <__atomic_exchange+0x218>  // b.none
 1c8:	b.ls	230 <__atomic_exchange+0x120>  // b.plast
 1cc:	cmp	x0, #0x10
 1d0:	b.ne	1e0 <__atomic_exchange+0xd0>  // b.any
 1d4:	tst	x1, #0xf
 1d8:	b.eq	3a8 <__atomic_exchange+0x298>  // b.none
 1dc:	nop
 1e0:	mov	x1, x19
 1e4:	mov	x0, x20
 1e8:	bl	0 <libat_lock_n>
 1ec:	cmp	x21, x22
 1f0:	b.eq	294 <__atomic_exchange+0x184>  // b.none
 1f4:	mov	x2, x19
 1f8:	mov	x1, x20
 1fc:	mov	x0, x21
 200:	bl	0 <memcpy>
 204:	mov	x2, x19
 208:	mov	x1, x22
 20c:	mov	x0, x20
 210:	bl	0 <memcpy>
 214:	mov	x1, x19
 218:	mov	x0, x20
 21c:	bl	0 <libat_unlock_n>
 220:	ldp	x19, x20, [sp, #16]
 224:	ldp	x21, x22, [sp, #32]
 228:	ldp	x29, x30, [sp], #96
 22c:	ret
 230:	b.eq	1e0 <__atomic_exchange+0xd0>  // b.none
 234:	stp	x23, x24, [sp, #48]
 238:	and	x23, x20, #0x7
 23c:	add	x0, x19, x23
 240:	cmp	x0, #0x8
 244:	b.ls	2a8 <__atomic_exchange+0x198>  // b.plast
 248:	mov	x1, x19
 24c:	mov	x0, x20
 250:	ldp	x23, x24, [sp, #48]
 254:	bl	0 <libat_lock_n>
 258:	cmp	x21, x22
 25c:	b.ne	1f4 <__atomic_exchange+0xe4>  // b.any
 260:	b	294 <__atomic_exchange+0x184>
 264:	cbz	x0, 220 <__atomic_exchange+0x110>
 268:	cmp	x0, #0x1
 26c:	b.ne	1e0 <__atomic_exchange+0xd0>  // b.any
 270:	ldrb	w1, [x2]
 274:	ldaxrb	w0, [x20]
 278:	stlxrb	w2, w1, [x20]
 27c:	cbnz	w2, 274 <__atomic_exchange+0x164>
 280:	strb	w0, [x21]
 284:	ldp	x19, x20, [sp, #16]
 288:	ldp	x21, x22, [sp, #32]
 28c:	ldp	x29, x30, [sp], #96
 290:	ret
 294:	mov	x2, x21
 298:	mov	x1, x20
 29c:	mov	x0, x19
 2a0:	bl	0 <libat_exchange_large_inplace>
 2a4:	b	214 <__atomic_exchange+0x104>
 2a8:	dmb	ish
 2ac:	and	x20, x20, #0xfffffffffffffff8
 2b0:	add	x0, sp, #0x50
 2b4:	add	x3, x0, x23
 2b8:	add	x24, sp, #0x40
 2bc:	ldr	x0, [x20]
 2c0:	str	x0, [sp, #64]
 2c4:	ldp	x4, x5, [sp, #64]
 2c8:	mov	x2, x19
 2cc:	mov	x1, x22
 2d0:	mov	x0, x3
 2d4:	stp	x4, x5, [sp, #80]
 2d8:	bl	0 <memcpy>
 2dc:	mov	x3, x0
 2e0:	ldr	x0, [x24]
 2e4:	ldr	x1, [sp, #80]
 2e8:	ldxr	x2, [x20]
 2ec:	cmp	x2, x0
 2f0:	b.ne	2fc <__atomic_exchange+0x1ec>  // b.any
 2f4:	stxr	w4, x1, [x20]
 2f8:	cmp	w4, #0x0
 2fc:	b.ne	3bc <__atomic_exchange+0x2ac>  // b.any
 300:	dmb	ish
 304:	mov	x2, x19
 308:	add	x1, x24, x23
 30c:	mov	x0, x21
 310:	bl	0 <memcpy>
 314:	ldp	x19, x20, [sp, #16]
 318:	ldp	x21, x22, [sp, #32]
 31c:	ldp	x23, x24, [sp, #48]
 320:	ldp	x29, x30, [sp], #96
 324:	ret
 328:	tst	x1, #0x7
 32c:	b.ne	1e0 <__atomic_exchange+0xd0>  // b.any
 330:	ldr	x1, [x2]
 334:	ldaxr	x0, [x20]
 338:	stlxr	w2, x1, [x20]
 33c:	cbnz	w2, 334 <__atomic_exchange+0x224>
 340:	str	x0, [x21]
 344:	ldp	x19, x20, [sp, #16]
 348:	ldp	x21, x22, [sp, #32]
 34c:	ldp	x29, x30, [sp], #96
 350:	ret
 354:	tst	x1, #0x3
 358:	b.ne	234 <__atomic_exchange+0x124>  // b.any
 35c:	ldr	w1, [x2]
 360:	ldaxr	w0, [x20]
 364:	stlxr	w2, w1, [x20]
 368:	cbnz	w2, 360 <__atomic_exchange+0x250>
 36c:	str	w0, [x21]
 370:	ldp	x19, x20, [sp, #16]
 374:	ldp	x21, x22, [sp, #32]
 378:	ldp	x29, x30, [sp], #96
 37c:	ret
 380:	tbnz	w1, #0, 14c <__atomic_exchange+0x3c>
 384:	ldrh	w1, [x2]
 388:	ldaxrh	w0, [x20]
 38c:	stlxrh	w2, w1, [x20]
 390:	cbnz	w2, 388 <__atomic_exchange+0x278>
 394:	strh	w0, [x21]
 398:	ldp	x19, x20, [sp, #16]
 39c:	ldp	x21, x22, [sp, #32]
 3a0:	ldp	x29, x30, [sp], #96
 3a4:	ret
 3a8:	ldp	x2, x3, [x2]
 3ac:	mov	x0, x1
 3b0:	bl	0 <__atomic_exchange_16>
 3b4:	stp	x0, x1, [x21]
 3b8:	b	220 <__atomic_exchange+0x110>
 3bc:	str	x2, [x24]
 3c0:	b	2c4 <__atomic_exchange+0x1b4>

glfree.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_is_lock_free>:
   0:	mov	x2, x0
   4:	cmp	x0, #0x3
   8:	b.eq	68 <__atomic_is_lock_free+0x68>  // b.none
   c:	b.hi	20 <__atomic_is_lock_free+0x20>  // b.pmore
  10:	cmp	x0, #0x2
  14:	b.eq	64 <__atomic_is_lock_free+0x64>  // b.none
  18:	mov	w0, #0x1                   	// #1
  1c:	ret
  20:	cmp	x0, #0x7
  24:	b.hi	4c <__atomic_is_lock_free+0x4c>  // b.pmore
  28:	cmp	x0, #0x4
  2c:	b.ne	38 <__atomic_is_lock_free+0x38>  // b.any
  30:	tst	x1, #0x3
  34:	b.eq	18 <__atomic_is_lock_free+0x18>  // b.none
  38:	and	x1, x1, #0x7
  3c:	add	x2, x1, x2
  40:	cmp	x2, #0x8
  44:	cset	w0, ls  // ls = plast
  48:	ret
  4c:	tst	x1, #0x7
  50:	mov	w1, #0x0                   	// #0
  54:	cset	w0, eq  // eq = none
  58:	cmp	x2, #0x8
  5c:	csel	w0, w0, w1, eq  // eq = none
  60:	ret
  64:	tbz	w1, #0, 18 <__atomic_is_lock_free+0x18>
  68:	and	x3, x1, #0x3
  6c:	mov	w0, #0x1                   	// #1
  70:	add	x3, x3, x2
  74:	cmp	x3, #0x4
  78:	b.ls	1c <__atomic_is_lock_free+0x1c>  // b.plast
  7c:	and	x1, x1, #0x7
  80:	add	x2, x1, x2
  84:	cmp	x2, #0x8
  88:	cset	w0, ls  // ls = plast
  8c:	b	48 <__atomic_is_lock_free+0x48>

lock.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_lock_1>:
   0:	and	x0, x0, #0xfc0
   4:	adrp	x1, 0 <libat_lock_1>
   8:	add	x1, x1, #0x0
   c:	add	x0, x1, x0
  10:	b	0 <pthread_mutex_lock>
  14:	nop

0000000000000018 <libat_unlock_1>:
  18:	and	x0, x0, #0xfc0
  1c:	adrp	x1, 0 <libat_lock_1>
  20:	add	x1, x1, #0x0
  24:	add	x0, x1, x0
  28:	b	0 <pthread_mutex_unlock>
  2c:	nop

0000000000000030 <libat_lock_n>:
  30:	stp	x29, x30, [sp, #-48]!
  34:	mov	x29, sp
  38:	stp	x21, x22, [sp, #32]
  3c:	mov	x21, #0x1000                	// #4096
  40:	cmp	x1, x21
  44:	adrp	x22, 0 <libat_lock_1>
  48:	csel	x21, x1, x21, ls  // ls = plast
  4c:	add	x22, x22, #0x0
  50:	stp	x19, x20, [sp, #16]
  54:	ubfx	x19, x0, #6, #6
  58:	mov	x20, #0x0                   	// #0
  5c:	nop
  60:	add	x0, x22, x19, lsl #6
  64:	add	x19, x19, #0x1
  68:	bl	0 <pthread_mutex_lock>
  6c:	add	x20, x20, #0x40
  70:	cmp	x19, #0x40
  74:	b.eq	90 <libat_lock_n+0x60>  // b.none
  78:	cmp	x20, x21
  7c:	b.cc	60 <libat_lock_n+0x30>  // b.lo, b.ul, b.last
  80:	ldp	x19, x20, [sp, #16]
  84:	ldp	x21, x22, [sp, #32]
  88:	ldp	x29, x30, [sp], #48
  8c:	ret
  90:	cmp	x21, x20
  94:	mov	x19, #0x0                   	// #0
  98:	b.hi	60 <libat_lock_n+0x30>  // b.pmore
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldp	x29, x30, [sp], #48
  a8:	ret
  ac:	nop

00000000000000b0 <libat_unlock_n>:
  b0:	stp	x29, x30, [sp, #-48]!
  b4:	mov	x29, sp
  b8:	stp	x21, x22, [sp, #32]
  bc:	mov	x21, #0x1000                	// #4096
  c0:	cmp	x1, x21
  c4:	adrp	x22, 0 <libat_lock_1>
  c8:	csel	x21, x1, x21, ls  // ls = plast
  cc:	add	x22, x22, #0x0
  d0:	stp	x19, x20, [sp, #16]
  d4:	ubfx	x19, x0, #6, #6
  d8:	mov	x20, #0x0                   	// #0
  dc:	nop
  e0:	add	x0, x22, x19, lsl #6
  e4:	add	x19, x19, #0x1
  e8:	bl	0 <pthread_mutex_unlock>
  ec:	add	x20, x20, #0x40
  f0:	cmp	x19, #0x40
  f4:	b.eq	110 <libat_unlock_n+0x60>  // b.none
  f8:	cmp	x20, x21
  fc:	b.cc	e0 <libat_unlock_n+0x30>  // b.lo, b.ul, b.last
 100:	ldp	x19, x20, [sp, #16]
 104:	ldp	x21, x22, [sp, #32]
 108:	ldp	x29, x30, [sp], #48
 10c:	ret
 110:	cmp	x21, x20
 114:	mov	x19, #0x0                   	// #0
 118:	b.hi	e0 <libat_unlock_n+0x30>  // b.pmore
 11c:	ldp	x19, x20, [sp, #16]
 120:	ldp	x21, x22, [sp, #32]
 124:	ldp	x29, x30, [sp], #48
 128:	ret

init.o:     file format elf64-littleaarch64


fenv.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__atomic_feraiseexcept>:
   0:	sub	sp, sp, #0x20
   4:	tbz	w0, #0, 1c <__atomic_feraiseexcept+0x1c>
   8:	str	wzr, [sp, #12]
   c:	ldr	s0, [sp, #12]
  10:	ldr	s1, [sp, #12]
  14:	fdiv	s0, s0, s1
  18:	str	s0, [sp, #8]
  1c:	tbz	w0, #1, 34 <__atomic_feraiseexcept+0x34>
  20:	str	wzr, [sp, #16]
  24:	fmov	s0, #1.000000000000000000e+00
  28:	ldr	s1, [sp, #16]
  2c:	fdiv	s0, s0, s1
  30:	str	s0, [sp, #8]
  34:	tbz	w0, #2, 50 <__atomic_feraiseexcept+0x50>
  38:	mov	w1, #0x7f7fffff            	// #2139095039
  3c:	str	w1, [sp, #20]
  40:	ldr	s0, [sp, #20]
  44:	ldr	s1, [sp, #20]
  48:	fmul	s0, s0, s1
  4c:	str	s0, [sp, #8]
  50:	tbz	w0, #3, 6c <__atomic_feraiseexcept+0x6c>
  54:	movi	v0.2s, #0x80, lsl #16
  58:	str	s0, [sp, #24]
  5c:	ldr	s0, [sp, #24]
  60:	ldr	s1, [sp, #24]
  64:	fmul	s0, s0, s1
  68:	str	s0, [sp, #8]
  6c:	tbz	w0, #4, 88 <__atomic_feraiseexcept+0x88>
  70:	fmov	s1, #3.000000000000000000e+00
  74:	fmov	s0, #1.000000000000000000e+00
  78:	str	s1, [sp, #28]
  7c:	ldr	s1, [sp, #28]
  80:	fdiv	s0, s0, s1
  84:	str	s0, [sp, #8]
  88:	add	sp, sp, #0x20
  8c:	ret

fence.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <atomic_thread_fence>:
   0:	dmb	ish
   4:	ret

0000000000000008 <atomic_signal_fence>:
   8:	ret

flag.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <atomic_flag_test_and_set>:
   0:	mov	x1, x0
   4:	mov	w2, #0x1                   	// #1
   8:	ldaxrb	w0, [x1]
   c:	stlxrb	w3, w2, [x1]
  10:	cbnz	w3, 8 <atomic_flag_test_and_set+0x8>
  14:	ret

0000000000000018 <atomic_flag_test_and_set_explicit>:
  18:	mov	x1, x0
  1c:	mov	w2, #0x1                   	// #1
  20:	ldaxrb	w0, [x1]
  24:	stlxrb	w3, w2, [x1]
  28:	cbnz	w3, 20 <atomic_flag_test_and_set_explicit+0x8>
  2c:	ret

0000000000000030 <atomic_flag_clear>:
  30:	stlrb	wzr, [x0]
  34:	ret

0000000000000038 <atomic_flag_clear_explicit>:
  38:	stlrb	wzr, [x0]
  3c:	ret

load_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_1>:
   0:	ldarb	w0, [x0]
   4:	ret

0000000000000008 <select_load_1>:
   8:	adrp	x0, 0 <libat_load_1>
   c:	add	x0, x0, #0x0
  10:	ret

store_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_1>:
   0:	and	w1, w1, #0xff
   4:	stlrb	w1, [x0]
   8:	ret
   c:	nop

0000000000000010 <select_store_1>:
  10:	adrp	x0, 0 <libat_store_1>
  14:	add	x0, x0, #0x0
  18:	ret

cas_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_1>:
   0:	ldrb	w3, [x1]
   4:	and	w2, w2, #0xff
   8:	ldaxrb	w4, [x0]
   c:	cmp	w4, w3, uxtb
  10:	b.ne	1c <libat_compare_exchange_1+0x1c>  // b.any
  14:	stlxrb	w5, w2, [x0]
  18:	cbnz	w5, 8 <libat_compare_exchange_1+0x8>
  1c:	cset	w0, eq  // eq = none
  20:	b.ne	28 <libat_compare_exchange_1+0x28>  // b.any
  24:	ret
  28:	strb	w4, [x1]
  2c:	ret

0000000000000030 <select_compare_exchange_1>:
  30:	adrp	x0, 0 <libat_compare_exchange_1>
  34:	add	x0, x0, #0x0
  38:	ret

exch_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_1>:
   0:	and	w1, w1, #0xff
   4:	mov	x2, x0
   8:	ldaxrb	w0, [x2]
   c:	stlxrb	w3, w1, [x2]
  10:	cbnz	w3, 8 <libat_exchange_1+0x8>
  14:	ret

0000000000000018 <select_exchange_1>:
  18:	adrp	x0, 0 <libat_exchange_1>
  1c:	add	x0, x0, #0x0
  20:	ret

fadd_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_1>:
   0:	and	w1, w1, #0xff
   4:	mov	x2, x0
   8:	ldaxrb	w0, [x2]
   c:	add	w3, w0, w1
  10:	stlxrb	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_add_1+0x8>
  18:	ret
  1c:	nop

0000000000000020 <libat_add_fetch_1>:
  20:	and	w1, w1, #0xff
  24:	mov	x2, x0
  28:	ldaxrb	w0, [x2]
  2c:	add	w0, w0, w1
  30:	stlxrb	w3, w0, [x2]
  34:	cbnz	w3, 28 <libat_add_fetch_1+0x8>
  38:	ret
  3c:	nop

0000000000000040 <select_fetch_add_1>:
  40:	adrp	x0, 0 <libat_fetch_add_1>
  44:	add	x0, x0, #0x0
  48:	ret
  4c:	nop

0000000000000050 <select_add_fetch_1>:
  50:	adrp	x0, 20 <libat_add_fetch_1>
  54:	add	x0, x0, #0x0
  58:	ret

fsub_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_1>:
   0:	and	w1, w1, #0xff
   4:	mov	x2, x0
   8:	ldaxrb	w0, [x2]
   c:	sub	w3, w0, w1
  10:	stlxrb	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_sub_1+0x8>
  18:	ret
  1c:	nop

0000000000000020 <libat_sub_fetch_1>:
  20:	and	w1, w1, #0xff
  24:	mov	x2, x0
  28:	ldaxrb	w0, [x2]
  2c:	sub	w0, w0, w1
  30:	stlxrb	w3, w0, [x2]
  34:	cbnz	w3, 28 <libat_sub_fetch_1+0x8>
  38:	ret
  3c:	nop

0000000000000040 <select_fetch_sub_1>:
  40:	adrp	x0, 0 <libat_fetch_sub_1>
  44:	add	x0, x0, #0x0
  48:	ret
  4c:	nop

0000000000000050 <select_sub_fetch_1>:
  50:	adrp	x0, 20 <libat_sub_fetch_1>
  54:	add	x0, x0, #0x0
  58:	ret

fand_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_1>:
   0:	and	w1, w1, #0xff
   4:	mov	x2, x0
   8:	ldaxrb	w0, [x2]
   c:	and	w3, w0, w1
  10:	stlxrb	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_and_1+0x8>
  18:	ret
  1c:	nop

0000000000000020 <libat_and_fetch_1>:
  20:	and	w1, w1, #0xff
  24:	mov	x2, x0
  28:	ldaxrb	w0, [x2]
  2c:	and	w0, w0, w1
  30:	stlxrb	w3, w0, [x2]
  34:	cbnz	w3, 28 <libat_and_fetch_1+0x8>
  38:	ret
  3c:	nop

0000000000000040 <select_fetch_and_1>:
  40:	adrp	x0, 0 <libat_fetch_and_1>
  44:	add	x0, x0, #0x0
  48:	ret
  4c:	nop

0000000000000050 <select_and_fetch_1>:
  50:	adrp	x0, 20 <libat_and_fetch_1>
  54:	add	x0, x0, #0x0
  58:	ret

fior_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_1>:
   0:	and	w1, w1, #0xff
   4:	mov	x2, x0
   8:	ldaxrb	w0, [x2]
   c:	orr	w3, w0, w1
  10:	stlxrb	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_or_1+0x8>
  18:	ret
  1c:	nop

0000000000000020 <libat_or_fetch_1>:
  20:	and	w1, w1, #0xff
  24:	mov	x2, x0
  28:	ldaxrb	w0, [x2]
  2c:	orr	w0, w0, w1
  30:	stlxrb	w3, w0, [x2]
  34:	cbnz	w3, 28 <libat_or_fetch_1+0x8>
  38:	ret
  3c:	nop

0000000000000040 <select_fetch_or_1>:
  40:	adrp	x0, 0 <libat_fetch_or_1>
  44:	add	x0, x0, #0x0
  48:	ret
  4c:	nop

0000000000000050 <select_or_fetch_1>:
  50:	adrp	x0, 20 <libat_or_fetch_1>
  54:	add	x0, x0, #0x0
  58:	ret

fxor_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_1>:
   0:	and	w1, w1, #0xff
   4:	mov	x2, x0
   8:	ldaxrb	w0, [x2]
   c:	eor	w3, w0, w1
  10:	stlxrb	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_xor_1+0x8>
  18:	ret
  1c:	nop

0000000000000020 <libat_xor_fetch_1>:
  20:	and	w1, w1, #0xff
  24:	mov	x2, x0
  28:	ldaxrb	w0, [x2]
  2c:	eor	w0, w0, w1
  30:	stlxrb	w3, w0, [x2]
  34:	cbnz	w3, 28 <libat_xor_fetch_1+0x8>
  38:	ret
  3c:	nop

0000000000000040 <select_fetch_xor_1>:
  40:	adrp	x0, 0 <libat_fetch_xor_1>
  44:	add	x0, x0, #0x0
  48:	ret
  4c:	nop

0000000000000050 <select_xor_fetch_1>:
  50:	adrp	x0, 20 <libat_xor_fetch_1>
  54:	add	x0, x0, #0x0
  58:	ret

fnand_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_1>:
   0:	and	w1, w1, #0xff
   4:	mov	x2, x0
   8:	ldaxrb	w0, [x2]
   c:	and	w3, w0, w1
  10:	mvn	w3, w3
  14:	stlxrb	w4, w3, [x2]
  18:	cbnz	w4, 8 <libat_fetch_nand_1+0x8>
  1c:	ret

0000000000000020 <libat_nand_fetch_1>:
  20:	and	w1, w1, #0xff
  24:	mov	x2, x0
  28:	ldaxrb	w0, [x2]
  2c:	and	w0, w0, w1
  30:	mvn	w0, w0
  34:	stlxrb	w3, w0, [x2]
  38:	cbnz	w3, 28 <libat_nand_fetch_1+0x8>
  3c:	ret

0000000000000040 <select_fetch_nand_1>:
  40:	adrp	x0, 0 <libat_fetch_nand_1>
  44:	add	x0, x0, #0x0
  48:	ret
  4c:	nop

0000000000000050 <select_nand_fetch_1>:
  50:	adrp	x0, 20 <libat_nand_fetch_1>
  54:	add	x0, x0, #0x0
  58:	ret

tas_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_1>:
   0:	mov	x1, x0
   4:	mov	w2, #0x1                   	// #1
   8:	ldaxrb	w0, [x1]
   c:	stlxrb	w3, w2, [x1]
  10:	cbnz	w3, 8 <libat_test_and_set_1+0x8>
  14:	ret

0000000000000018 <select_test_and_set_1>:
  18:	adrp	x0, 0 <libat_test_and_set_1>
  1c:	add	x0, x0, #0x0
  20:	ret

load_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_2>:
   0:	ldarh	w0, [x0]
   4:	ret

0000000000000008 <select_load_2>:
   8:	adrp	x0, 0 <libat_load_2>
   c:	add	x0, x0, #0x0
  10:	ret

store_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_2>:
   0:	and	w1, w1, #0xffff
   4:	stlrh	w1, [x0]
   8:	ret
   c:	nop

0000000000000010 <select_store_2>:
  10:	adrp	x0, 0 <libat_store_2>
  14:	add	x0, x0, #0x0
  18:	ret

cas_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_2>:
   0:	ldrh	w3, [x1]
   4:	and	w2, w2, #0xffff
   8:	ldaxrh	w4, [x0]
   c:	cmp	w4, w3, uxth
  10:	b.ne	1c <libat_compare_exchange_2+0x1c>  // b.any
  14:	stlxrh	w5, w2, [x0]
  18:	cbnz	w5, 8 <libat_compare_exchange_2+0x8>
  1c:	cset	w0, eq  // eq = none
  20:	b.ne	28 <libat_compare_exchange_2+0x28>  // b.any
  24:	ret
  28:	strh	w4, [x1]
  2c:	ret

0000000000000030 <select_compare_exchange_2>:
  30:	adrp	x0, 0 <libat_compare_exchange_2>
  34:	add	x0, x0, #0x0
  38:	ret

exch_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_2>:
   0:	and	w1, w1, #0xffff
   4:	mov	x2, x0
   8:	ldaxrh	w0, [x2]
   c:	stlxrh	w3, w1, [x2]
  10:	cbnz	w3, 8 <libat_exchange_2+0x8>
  14:	ret

0000000000000018 <select_exchange_2>:
  18:	adrp	x0, 0 <libat_exchange_2>
  1c:	add	x0, x0, #0x0
  20:	ret

fadd_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_2>:
   0:	and	w1, w1, #0xffff
   4:	mov	x2, x0
   8:	ldaxrh	w0, [x2]
   c:	add	w3, w0, w1
  10:	stlxrh	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_add_2+0x8>
  18:	ret
  1c:	nop

0000000000000020 <libat_add_fetch_2>:
  20:	and	w1, w1, #0xffff
  24:	mov	x2, x0
  28:	ldaxrh	w0, [x2]
  2c:	add	w0, w0, w1
  30:	stlxrh	w3, w0, [x2]
  34:	cbnz	w3, 28 <libat_add_fetch_2+0x8>
  38:	ret
  3c:	nop

0000000000000040 <select_fetch_add_2>:
  40:	adrp	x0, 0 <libat_fetch_add_2>
  44:	add	x0, x0, #0x0
  48:	ret
  4c:	nop

0000000000000050 <select_add_fetch_2>:
  50:	adrp	x0, 20 <libat_add_fetch_2>
  54:	add	x0, x0, #0x0
  58:	ret

fsub_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_2>:
   0:	and	w1, w1, #0xffff
   4:	mov	x2, x0
   8:	ldaxrh	w0, [x2]
   c:	sub	w3, w0, w1
  10:	stlxrh	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_sub_2+0x8>
  18:	ret
  1c:	nop

0000000000000020 <libat_sub_fetch_2>:
  20:	and	w1, w1, #0xffff
  24:	mov	x2, x0
  28:	ldaxrh	w0, [x2]
  2c:	sub	w0, w0, w1
  30:	stlxrh	w3, w0, [x2]
  34:	cbnz	w3, 28 <libat_sub_fetch_2+0x8>
  38:	ret
  3c:	nop

0000000000000040 <select_fetch_sub_2>:
  40:	adrp	x0, 0 <libat_fetch_sub_2>
  44:	add	x0, x0, #0x0
  48:	ret
  4c:	nop

0000000000000050 <select_sub_fetch_2>:
  50:	adrp	x0, 20 <libat_sub_fetch_2>
  54:	add	x0, x0, #0x0
  58:	ret

fand_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_2>:
   0:	and	w1, w1, #0xffff
   4:	mov	x2, x0
   8:	ldaxrh	w0, [x2]
   c:	and	w3, w0, w1
  10:	stlxrh	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_and_2+0x8>
  18:	ret
  1c:	nop

0000000000000020 <libat_and_fetch_2>:
  20:	and	w1, w1, #0xffff
  24:	mov	x2, x0
  28:	ldaxrh	w0, [x2]
  2c:	and	w0, w0, w1
  30:	stlxrh	w3, w0, [x2]
  34:	cbnz	w3, 28 <libat_and_fetch_2+0x8>
  38:	ret
  3c:	nop

0000000000000040 <select_fetch_and_2>:
  40:	adrp	x0, 0 <libat_fetch_and_2>
  44:	add	x0, x0, #0x0
  48:	ret
  4c:	nop

0000000000000050 <select_and_fetch_2>:
  50:	adrp	x0, 20 <libat_and_fetch_2>
  54:	add	x0, x0, #0x0
  58:	ret

fior_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_2>:
   0:	and	w1, w1, #0xffff
   4:	mov	x2, x0
   8:	ldaxrh	w0, [x2]
   c:	orr	w3, w0, w1
  10:	stlxrh	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_or_2+0x8>
  18:	ret
  1c:	nop

0000000000000020 <libat_or_fetch_2>:
  20:	and	w1, w1, #0xffff
  24:	mov	x2, x0
  28:	ldaxrh	w0, [x2]
  2c:	orr	w0, w0, w1
  30:	stlxrh	w3, w0, [x2]
  34:	cbnz	w3, 28 <libat_or_fetch_2+0x8>
  38:	ret
  3c:	nop

0000000000000040 <select_fetch_or_2>:
  40:	adrp	x0, 0 <libat_fetch_or_2>
  44:	add	x0, x0, #0x0
  48:	ret
  4c:	nop

0000000000000050 <select_or_fetch_2>:
  50:	adrp	x0, 20 <libat_or_fetch_2>
  54:	add	x0, x0, #0x0
  58:	ret

fxor_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_2>:
   0:	and	w1, w1, #0xffff
   4:	mov	x2, x0
   8:	ldaxrh	w0, [x2]
   c:	eor	w3, w0, w1
  10:	stlxrh	w4, w3, [x2]
  14:	cbnz	w4, 8 <libat_fetch_xor_2+0x8>
  18:	ret
  1c:	nop

0000000000000020 <libat_xor_fetch_2>:
  20:	and	w1, w1, #0xffff
  24:	mov	x2, x0
  28:	ldaxrh	w0, [x2]
  2c:	eor	w0, w0, w1
  30:	stlxrh	w3, w0, [x2]
  34:	cbnz	w3, 28 <libat_xor_fetch_2+0x8>
  38:	ret
  3c:	nop

0000000000000040 <select_fetch_xor_2>:
  40:	adrp	x0, 0 <libat_fetch_xor_2>
  44:	add	x0, x0, #0x0
  48:	ret
  4c:	nop

0000000000000050 <select_xor_fetch_2>:
  50:	adrp	x0, 20 <libat_xor_fetch_2>
  54:	add	x0, x0, #0x0
  58:	ret

fnand_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_2>:
   0:	and	w1, w1, #0xffff
   4:	mov	x2, x0
   8:	ldaxrh	w0, [x2]
   c:	and	w3, w0, w1
  10:	mvn	w3, w3
  14:	stlxrh	w4, w3, [x2]
  18:	cbnz	w4, 8 <libat_fetch_nand_2+0x8>
  1c:	ret

0000000000000020 <libat_nand_fetch_2>:
  20:	and	w1, w1, #0xffff
  24:	mov	x2, x0
  28:	ldaxrh	w0, [x2]
  2c:	and	w0, w0, w1
  30:	mvn	w0, w0
  34:	stlxrh	w3, w0, [x2]
  38:	cbnz	w3, 28 <libat_nand_fetch_2+0x8>
  3c:	ret

0000000000000040 <select_fetch_nand_2>:
  40:	adrp	x0, 0 <libat_fetch_nand_2>
  44:	add	x0, x0, #0x0
  48:	ret
  4c:	nop

0000000000000050 <select_nand_fetch_2>:
  50:	adrp	x0, 20 <libat_nand_fetch_2>
  54:	add	x0, x0, #0x0
  58:	ret

tas_2_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_2>:
   0:	mov	x1, x0
   4:	mov	w2, #0x1                   	// #1
   8:	ldaxrb	w0, [x1]
   c:	stlxrb	w3, w2, [x1]
  10:	cbnz	w3, 8 <libat_test_and_set_2+0x8>
  14:	ret

0000000000000018 <select_test_and_set_2>:
  18:	adrp	x0, 0 <libat_test_and_set_2>
  1c:	add	x0, x0, #0x0
  20:	ret

load_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_4>:
   0:	ldar	w0, [x0]
   4:	ret

0000000000000008 <select_load_4>:
   8:	adrp	x0, 0 <libat_load_4>
   c:	add	x0, x0, #0x0
  10:	ret

store_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_4>:
   0:	stlr	w1, [x0]
   4:	ret

0000000000000008 <select_store_4>:
   8:	adrp	x0, 0 <libat_store_4>
   c:	add	x0, x0, #0x0
  10:	ret

cas_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_4>:
   0:	ldr	w3, [x1]
   4:	ldaxr	w4, [x0]
   8:	cmp	w4, w3
   c:	b.ne	18 <libat_compare_exchange_4+0x18>  // b.any
  10:	stlxr	w5, w2, [x0]
  14:	cbnz	w5, 4 <libat_compare_exchange_4+0x4>
  18:	cset	w0, eq  // eq = none
  1c:	b.ne	24 <libat_compare_exchange_4+0x24>  // b.any
  20:	ret
  24:	str	w4, [x1]
  28:	ret
  2c:	nop

0000000000000030 <select_compare_exchange_4>:
  30:	adrp	x0, 0 <libat_compare_exchange_4>
  34:	add	x0, x0, #0x0
  38:	ret

exch_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_4>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	stlxr	w3, w1, [x2]
   c:	cbnz	w3, 4 <libat_exchange_4+0x4>
  10:	ret
  14:	nop

0000000000000018 <select_exchange_4>:
  18:	adrp	x0, 0 <libat_exchange_4>
  1c:	add	x0, x0, #0x0
  20:	ret

fadd_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_4>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	add	w3, w0, w1
   c:	stlxr	w4, w3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_add_4+0x4>
  14:	ret

0000000000000018 <libat_add_fetch_4>:
  18:	mov	x2, x0
  1c:	ldaxr	w0, [x2]
  20:	add	w0, w0, w1
  24:	stlxr	w3, w0, [x2]
  28:	cbnz	w3, 1c <libat_add_fetch_4+0x4>
  2c:	ret

0000000000000030 <select_fetch_add_4>:
  30:	adrp	x0, 0 <libat_fetch_add_4>
  34:	add	x0, x0, #0x0
  38:	ret
  3c:	nop

0000000000000040 <select_add_fetch_4>:
  40:	adrp	x0, 18 <libat_add_fetch_4>
  44:	add	x0, x0, #0x0
  48:	ret

fsub_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_4>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	sub	w3, w0, w1
   c:	stlxr	w4, w3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_sub_4+0x4>
  14:	ret

0000000000000018 <libat_sub_fetch_4>:
  18:	mov	x2, x0
  1c:	ldaxr	w0, [x2]
  20:	sub	w0, w0, w1
  24:	stlxr	w3, w0, [x2]
  28:	cbnz	w3, 1c <libat_sub_fetch_4+0x4>
  2c:	ret

0000000000000030 <select_fetch_sub_4>:
  30:	adrp	x0, 0 <libat_fetch_sub_4>
  34:	add	x0, x0, #0x0
  38:	ret
  3c:	nop

0000000000000040 <select_sub_fetch_4>:
  40:	adrp	x0, 18 <libat_sub_fetch_4>
  44:	add	x0, x0, #0x0
  48:	ret

fand_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_4>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	and	w3, w0, w1
   c:	stlxr	w4, w3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_and_4+0x4>
  14:	ret

0000000000000018 <libat_and_fetch_4>:
  18:	mov	x2, x0
  1c:	ldaxr	w0, [x2]
  20:	and	w0, w0, w1
  24:	stlxr	w3, w0, [x2]
  28:	cbnz	w3, 1c <libat_and_fetch_4+0x4>
  2c:	ret

0000000000000030 <select_fetch_and_4>:
  30:	adrp	x0, 0 <libat_fetch_and_4>
  34:	add	x0, x0, #0x0
  38:	ret
  3c:	nop

0000000000000040 <select_and_fetch_4>:
  40:	adrp	x0, 18 <libat_and_fetch_4>
  44:	add	x0, x0, #0x0
  48:	ret

fior_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_4>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	orr	w3, w0, w1
   c:	stlxr	w4, w3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_or_4+0x4>
  14:	ret

0000000000000018 <libat_or_fetch_4>:
  18:	mov	x2, x0
  1c:	ldaxr	w0, [x2]
  20:	orr	w0, w0, w1
  24:	stlxr	w3, w0, [x2]
  28:	cbnz	w3, 1c <libat_or_fetch_4+0x4>
  2c:	ret

0000000000000030 <select_fetch_or_4>:
  30:	adrp	x0, 0 <libat_fetch_or_4>
  34:	add	x0, x0, #0x0
  38:	ret
  3c:	nop

0000000000000040 <select_or_fetch_4>:
  40:	adrp	x0, 18 <libat_or_fetch_4>
  44:	add	x0, x0, #0x0
  48:	ret

fxor_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_4>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	eor	w3, w0, w1
   c:	stlxr	w4, w3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_xor_4+0x4>
  14:	ret

0000000000000018 <libat_xor_fetch_4>:
  18:	mov	x2, x0
  1c:	ldaxr	w0, [x2]
  20:	eor	w0, w0, w1
  24:	stlxr	w3, w0, [x2]
  28:	cbnz	w3, 1c <libat_xor_fetch_4+0x4>
  2c:	ret

0000000000000030 <select_fetch_xor_4>:
  30:	adrp	x0, 0 <libat_fetch_xor_4>
  34:	add	x0, x0, #0x0
  38:	ret
  3c:	nop

0000000000000040 <select_xor_fetch_4>:
  40:	adrp	x0, 18 <libat_xor_fetch_4>
  44:	add	x0, x0, #0x0
  48:	ret

fnand_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_4>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	and	w3, w0, w1
   c:	mvn	w3, w3
  10:	stlxr	w4, w3, [x2]
  14:	cbnz	w4, 4 <libat_fetch_nand_4+0x4>
  18:	ret
  1c:	nop

0000000000000020 <libat_nand_fetch_4>:
  20:	mov	x2, x0
  24:	ldaxr	w0, [x2]
  28:	and	w0, w0, w1
  2c:	mvn	w0, w0
  30:	stlxr	w3, w0, [x2]
  34:	cbnz	w3, 24 <libat_nand_fetch_4+0x4>
  38:	ret
  3c:	nop

0000000000000040 <select_fetch_nand_4>:
  40:	adrp	x0, 0 <libat_fetch_nand_4>
  44:	add	x0, x0, #0x0
  48:	ret
  4c:	nop

0000000000000050 <select_nand_fetch_4>:
  50:	adrp	x0, 20 <libat_nand_fetch_4>
  54:	add	x0, x0, #0x0
  58:	ret

tas_4_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_4>:
   0:	mov	x1, x0
   4:	mov	w2, #0x1                   	// #1
   8:	ldaxrb	w0, [x1]
   c:	stlxrb	w3, w2, [x1]
  10:	cbnz	w3, 8 <libat_test_and_set_4+0x8>
  14:	ret

0000000000000018 <select_test_and_set_4>:
  18:	adrp	x0, 0 <libat_test_and_set_4>
  1c:	add	x0, x0, #0x0
  20:	ret

load_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_8>:
   0:	ldar	x0, [x0]
   4:	ret

0000000000000008 <select_load_8>:
   8:	adrp	x0, 0 <libat_load_8>
   c:	add	x0, x0, #0x0
  10:	ret

store_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_8>:
   0:	stlr	x1, [x0]
   4:	ret

0000000000000008 <select_store_8>:
   8:	adrp	x0, 0 <libat_store_8>
   c:	add	x0, x0, #0x0
  10:	ret

cas_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_8>:
   0:	ldr	x3, [x1]
   4:	ldaxr	x4, [x0]
   8:	cmp	x4, x3
   c:	b.ne	18 <libat_compare_exchange_8+0x18>  // b.any
  10:	stlxr	w5, x2, [x0]
  14:	cbnz	w5, 4 <libat_compare_exchange_8+0x4>
  18:	cset	w0, eq  // eq = none
  1c:	b.ne	24 <libat_compare_exchange_8+0x24>  // b.any
  20:	ret
  24:	str	x4, [x1]
  28:	ret
  2c:	nop

0000000000000030 <select_compare_exchange_8>:
  30:	adrp	x0, 0 <libat_compare_exchange_8>
  34:	add	x0, x0, #0x0
  38:	ret

exch_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_8>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	stlxr	w3, x1, [x2]
   c:	cbnz	w3, 4 <libat_exchange_8+0x4>
  10:	ret
  14:	nop

0000000000000018 <select_exchange_8>:
  18:	adrp	x0, 0 <libat_exchange_8>
  1c:	add	x0, x0, #0x0
  20:	ret

fadd_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_8>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	add	x3, x0, x1
   c:	stlxr	w4, x3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_add_8+0x4>
  14:	ret

0000000000000018 <libat_add_fetch_8>:
  18:	mov	x2, x0
  1c:	ldaxr	x0, [x2]
  20:	add	x0, x0, x1
  24:	stlxr	w3, x0, [x2]
  28:	cbnz	w3, 1c <libat_add_fetch_8+0x4>
  2c:	ret

0000000000000030 <select_fetch_add_8>:
  30:	adrp	x0, 0 <libat_fetch_add_8>
  34:	add	x0, x0, #0x0
  38:	ret
  3c:	nop

0000000000000040 <select_add_fetch_8>:
  40:	adrp	x0, 18 <libat_add_fetch_8>
  44:	add	x0, x0, #0x0
  48:	ret

fsub_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_8>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	sub	x3, x0, x1
   c:	stlxr	w4, x3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_sub_8+0x4>
  14:	ret

0000000000000018 <libat_sub_fetch_8>:
  18:	mov	x2, x0
  1c:	ldaxr	x0, [x2]
  20:	sub	x0, x0, x1
  24:	stlxr	w3, x0, [x2]
  28:	cbnz	w3, 1c <libat_sub_fetch_8+0x4>
  2c:	ret

0000000000000030 <select_fetch_sub_8>:
  30:	adrp	x0, 0 <libat_fetch_sub_8>
  34:	add	x0, x0, #0x0
  38:	ret
  3c:	nop

0000000000000040 <select_sub_fetch_8>:
  40:	adrp	x0, 18 <libat_sub_fetch_8>
  44:	add	x0, x0, #0x0
  48:	ret

fand_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_8>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	and	x3, x0, x1
   c:	stlxr	w4, x3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_and_8+0x4>
  14:	ret

0000000000000018 <libat_and_fetch_8>:
  18:	mov	x2, x0
  1c:	ldaxr	x0, [x2]
  20:	and	x0, x0, x1
  24:	stlxr	w3, x0, [x2]
  28:	cbnz	w3, 1c <libat_and_fetch_8+0x4>
  2c:	ret

0000000000000030 <select_fetch_and_8>:
  30:	adrp	x0, 0 <libat_fetch_and_8>
  34:	add	x0, x0, #0x0
  38:	ret
  3c:	nop

0000000000000040 <select_and_fetch_8>:
  40:	adrp	x0, 18 <libat_and_fetch_8>
  44:	add	x0, x0, #0x0
  48:	ret

fior_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_8>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	orr	x3, x0, x1
   c:	stlxr	w4, x3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_or_8+0x4>
  14:	ret

0000000000000018 <libat_or_fetch_8>:
  18:	mov	x2, x0
  1c:	ldaxr	x0, [x2]
  20:	orr	x0, x0, x1
  24:	stlxr	w3, x0, [x2]
  28:	cbnz	w3, 1c <libat_or_fetch_8+0x4>
  2c:	ret

0000000000000030 <select_fetch_or_8>:
  30:	adrp	x0, 0 <libat_fetch_or_8>
  34:	add	x0, x0, #0x0
  38:	ret
  3c:	nop

0000000000000040 <select_or_fetch_8>:
  40:	adrp	x0, 18 <libat_or_fetch_8>
  44:	add	x0, x0, #0x0
  48:	ret

fxor_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_8>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	eor	x3, x0, x1
   c:	stlxr	w4, x3, [x2]
  10:	cbnz	w4, 4 <libat_fetch_xor_8+0x4>
  14:	ret

0000000000000018 <libat_xor_fetch_8>:
  18:	mov	x2, x0
  1c:	ldaxr	x0, [x2]
  20:	eor	x0, x0, x1
  24:	stlxr	w3, x0, [x2]
  28:	cbnz	w3, 1c <libat_xor_fetch_8+0x4>
  2c:	ret

0000000000000030 <select_fetch_xor_8>:
  30:	adrp	x0, 0 <libat_fetch_xor_8>
  34:	add	x0, x0, #0x0
  38:	ret
  3c:	nop

0000000000000040 <select_xor_fetch_8>:
  40:	adrp	x0, 18 <libat_xor_fetch_8>
  44:	add	x0, x0, #0x0
  48:	ret

fnand_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_8>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	and	x3, x0, x1
   c:	mvn	x3, x3
  10:	stlxr	w4, x3, [x2]
  14:	cbnz	w4, 4 <libat_fetch_nand_8+0x4>
  18:	ret
  1c:	nop

0000000000000020 <libat_nand_fetch_8>:
  20:	mov	x2, x0
  24:	ldaxr	x0, [x2]
  28:	and	x0, x0, x1
  2c:	mvn	x0, x0
  30:	stlxr	w3, x0, [x2]
  34:	cbnz	w3, 24 <libat_nand_fetch_8+0x4>
  38:	ret
  3c:	nop

0000000000000040 <select_fetch_nand_8>:
  40:	adrp	x0, 0 <libat_fetch_nand_8>
  44:	add	x0, x0, #0x0
  48:	ret
  4c:	nop

0000000000000050 <select_nand_fetch_8>:
  50:	adrp	x0, 20 <libat_nand_fetch_8>
  54:	add	x0, x0, #0x0
  58:	ret

tas_8_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_8>:
   0:	mov	x1, x0
   4:	mov	w2, #0x1                   	// #1
   8:	ldaxrb	w0, [x1]
   c:	stlxrb	w3, w2, [x1]
  10:	cbnz	w3, 8 <libat_test_and_set_8+0x8>
  14:	ret

0000000000000018 <select_test_and_set_8>:
  18:	adrp	x0, 0 <libat_test_and_set_8>
  1c:	add	x0, x0, #0x0
  20:	ret

load_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_16>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	str	x21, [sp, #32]
  14:	bl	0 <libat_lock_1>
  18:	ldp	x20, x21, [x19]
  1c:	mov	x0, x19
  20:	bl	0 <libat_unlock_1>
  24:	mov	x0, x20
  28:	mov	x1, x21
  2c:	ldp	x19, x20, [sp, #16]
  30:	ldr	x21, [sp, #32]
  34:	ldp	x29, x30, [sp], #48
  38:	ret
  3c:	nop

0000000000000040 <select_load_16>:
  40:	adrp	x0, 0 <libat_load_16>
  44:	add	x0, x0, #0x0
  48:	ret

store_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_16>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	str	x21, [sp, #32]
  18:	mov	x21, x2
  1c:	bl	0 <libat_lock_1>
  20:	stp	x21, x20, [x19]
  24:	mov	x0, x19
  28:	ldp	x19, x20, [sp, #16]
  2c:	ldr	x21, [sp, #32]
  30:	ldp	x29, x30, [sp], #48
  34:	b	0 <libat_unlock_1>

0000000000000038 <select_store_16>:
  38:	adrp	x0, 0 <libat_store_16>
  3c:	add	x0, x0, #0x0
  40:	ret

cas_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x1
  10:	mov	x19, x0
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x2
  1c:	mov	x21, x3
  20:	str	x23, [sp, #48]
  24:	bl	0 <libat_lock_1>
  28:	ldp	x1, x2, [x19]
  2c:	ldp	x3, x4, [x20]
  30:	eor	x0, x3, x1
  34:	eor	x5, x4, x2
  38:	orr	x0, x0, x5
  3c:	cmp	x0, #0x0
  40:	cset	w23, eq  // eq = none
  44:	cmp	x3, x1
  48:	b.eq	70 <libat_compare_exchange_16+0x70>  // b.none
  4c:	stp	x1, x2, [x20]
  50:	mov	x0, x19
  54:	bl	0 <libat_unlock_1>
  58:	mov	w0, w23
  5c:	ldp	x19, x20, [sp, #16]
  60:	ldp	x21, x22, [sp, #32]
  64:	ldr	x23, [sp, #48]
  68:	ldp	x29, x30, [sp], #64
  6c:	ret
  70:	cmp	x4, x2
  74:	b.ne	4c <libat_compare_exchange_16+0x4c>  // b.any
  78:	stp	x22, x21, [x19]
  7c:	mov	x0, x19
  80:	bl	0 <libat_unlock_1>
  84:	mov	w0, w23
  88:	ldp	x19, x20, [sp, #16]
  8c:	ldp	x21, x22, [sp, #32]
  90:	ldr	x23, [sp, #48]
  94:	ldp	x29, x30, [sp], #64
  98:	ret
  9c:	nop

00000000000000a0 <select_compare_exchange_16>:
  a0:	adrp	x0, 0 <libat_compare_exchange_16>
  a4:	add	x0, x0, #0x0
  a8:	ret

exch_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x22, x23, [x19]
  28:	stp	x21, x20, [x19]
  2c:	mov	x0, x19
  30:	bl	0 <libat_unlock_1>
  34:	ldp	x19, x20, [sp, #16]
  38:	mov	x0, x22
  3c:	mov	x1, x23
  40:	ldp	x21, x22, [sp, #32]
  44:	ldr	x23, [sp, #48]
  48:	ldp	x29, x30, [sp], #64
  4c:	ret

0000000000000050 <select_exchange_16>:
  50:	adrp	x0, 0 <libat_exchange_16>
  54:	add	x0, x0, #0x0
  58:	ret

fadd_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x3
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x22, x23, [x19]
  28:	mov	x0, x19
  2c:	adds	x20, x22, x20
  30:	adc	x21, x23, x21
  34:	stp	x20, x21, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x22
  40:	mov	x1, x23
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_add_fetch_16>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x20, x0
  68:	mov	x19, x2
  6c:	str	x21, [sp, #32]
  70:	mov	x21, x3
  74:	bl	0 <libat_lock_1>
  78:	ldp	x2, x1, [x20]
  7c:	mov	x0, x20
  80:	adds	x19, x19, x2
  84:	adc	x21, x21, x1
  88:	stp	x19, x21, [x20]
  8c:	bl	0 <libat_unlock_1>
  90:	mov	x0, x19
  94:	mov	x1, x21
  98:	ldp	x19, x20, [sp, #16]
  9c:	ldr	x21, [sp, #32]
  a0:	ldp	x29, x30, [sp], #48
  a4:	ret

00000000000000a8 <select_fetch_add_16>:
  a8:	adrp	x0, 0 <libat_fetch_add_16>
  ac:	add	x0, x0, #0x0
  b0:	ret
  b4:	nop

00000000000000b8 <select_add_fetch_16>:
  b8:	adrp	x0, 58 <libat_add_fetch_16>
  bc:	add	x0, x0, #0x0
  c0:	ret

fsub_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x3
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x22, x23, [x19]
  28:	mov	x0, x19
  2c:	subs	x20, x22, x20
  30:	sbc	x21, x23, x21
  34:	stp	x20, x21, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x22
  40:	mov	x1, x23
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_sub_fetch_16>:
  58:	stp	x29, x30, [sp, #-64]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	stp	x21, x22, [sp, #32]
  6c:	mov	x22, x2
  70:	str	x23, [sp, #48]
  74:	mov	x23, x3
  78:	bl	0 <libat_lock_1>
  7c:	ldp	x20, x21, [x19]
  80:	mov	x0, x19
  84:	subs	x20, x20, x22
  88:	sbc	x21, x21, x23
  8c:	stp	x20, x21, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x20
  98:	mov	x1, x21
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldr	x23, [sp, #48]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

00000000000000b0 <select_fetch_sub_16>:
  b0:	adrp	x0, 0 <libat_fetch_sub_16>
  b4:	add	x0, x0, #0x0
  b8:	ret
  bc:	nop

00000000000000c0 <select_sub_fetch_16>:
  c0:	adrp	x0, 58 <libat_sub_fetch_16>
  c4:	add	x0, x0, #0x0
  c8:	ret

fand_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	and	x21, x23, x21
  30:	and	x20, x22, x20
  34:	stp	x21, x20, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x23
  40:	mov	x1, x22
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_and_fetch_16>:
  58:	stp	x29, x30, [sp, #-64]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	stp	x21, x22, [sp, #32]
  6c:	mov	x22, x3
  70:	str	x23, [sp, #48]
  74:	mov	x23, x2
  78:	bl	0 <libat_lock_1>
  7c:	ldp	x21, x20, [x19]
  80:	mov	x0, x19
  84:	and	x21, x21, x23
  88:	and	x20, x20, x22
  8c:	stp	x21, x20, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x21
  98:	mov	x1, x20
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldr	x23, [sp, #48]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

00000000000000b0 <select_fetch_and_16>:
  b0:	adrp	x0, 0 <libat_fetch_and_16>
  b4:	add	x0, x0, #0x0
  b8:	ret
  bc:	nop

00000000000000c0 <select_and_fetch_16>:
  c0:	adrp	x0, 58 <libat_and_fetch_16>
  c4:	add	x0, x0, #0x0
  c8:	ret

fior_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	orr	x21, x23, x21
  30:	orr	x20, x22, x20
  34:	stp	x21, x20, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x23
  40:	mov	x1, x22
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_or_fetch_16>:
  58:	stp	x29, x30, [sp, #-64]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	stp	x21, x22, [sp, #32]
  6c:	mov	x22, x3
  70:	str	x23, [sp, #48]
  74:	mov	x23, x2
  78:	bl	0 <libat_lock_1>
  7c:	ldp	x21, x20, [x19]
  80:	mov	x0, x19
  84:	orr	x21, x21, x23
  88:	orr	x20, x20, x22
  8c:	stp	x21, x20, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x21
  98:	mov	x1, x20
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldr	x23, [sp, #48]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

00000000000000b0 <select_fetch_or_16>:
  b0:	adrp	x0, 0 <libat_fetch_or_16>
  b4:	add	x0, x0, #0x0
  b8:	ret
  bc:	nop

00000000000000c0 <select_or_fetch_16>:
  c0:	adrp	x0, 58 <libat_or_fetch_16>
  c4:	add	x0, x0, #0x0
  c8:	ret

fxor_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	eor	x21, x23, x21
  30:	eor	x20, x22, x20
  34:	stp	x21, x20, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x23
  40:	mov	x1, x22
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_xor_fetch_16>:
  58:	stp	x29, x30, [sp, #-64]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	stp	x21, x22, [sp, #32]
  6c:	mov	x22, x3
  70:	str	x23, [sp, #48]
  74:	mov	x23, x2
  78:	bl	0 <libat_lock_1>
  7c:	ldp	x21, x20, [x19]
  80:	mov	x0, x19
  84:	eor	x21, x21, x23
  88:	eor	x20, x20, x22
  8c:	stp	x21, x20, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x21
  98:	mov	x1, x20
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldr	x23, [sp, #48]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

00000000000000b0 <select_fetch_xor_16>:
  b0:	adrp	x0, 0 <libat_fetch_xor_16>
  b4:	add	x0, x0, #0x0
  b8:	ret
  bc:	nop

00000000000000c0 <select_xor_fetch_16>:
  c0:	adrp	x0, 58 <libat_xor_fetch_16>
  c4:	add	x0, x0, #0x0
  c8:	ret

fnand_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_16>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	and	x21, x23, x21
  30:	and	x20, x22, x20
  34:	mvn	x21, x21
  38:	mvn	x20, x20
  3c:	stp	x21, x20, [x19]
  40:	bl	0 <libat_unlock_1>
  44:	mov	x0, x23
  48:	mov	x1, x22
  4c:	ldp	x19, x20, [sp, #16]
  50:	ldp	x21, x22, [sp, #32]
  54:	ldr	x23, [sp, #48]
  58:	ldp	x29, x30, [sp], #64
  5c:	ret

0000000000000060 <libat_nand_fetch_16>:
  60:	stp	x29, x30, [sp, #-64]!
  64:	mov	x29, sp
  68:	stp	x19, x20, [sp, #16]
  6c:	mov	x19, x0
  70:	stp	x21, x22, [sp, #32]
  74:	mov	x22, x3
  78:	str	x23, [sp, #48]
  7c:	mov	x23, x2
  80:	bl	0 <libat_lock_1>
  84:	ldp	x21, x20, [x19]
  88:	mov	x0, x19
  8c:	and	x21, x21, x23
  90:	and	x20, x20, x22
  94:	mvn	x21, x21
  98:	mvn	x20, x20
  9c:	stp	x21, x20, [x19]
  a0:	bl	0 <libat_unlock_1>
  a4:	mov	x0, x21
  a8:	mov	x1, x20
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x21, x22, [sp, #32]
  b4:	ldr	x23, [sp, #48]
  b8:	ldp	x29, x30, [sp], #64
  bc:	ret

00000000000000c0 <select_fetch_nand_16>:
  c0:	adrp	x0, 0 <libat_fetch_nand_16>
  c4:	add	x0, x0, #0x0
  c8:	ret
  cc:	nop

00000000000000d0 <select_nand_fetch_16>:
  d0:	adrp	x0, 60 <libat_nand_fetch_16>
  d4:	add	x0, x0, #0x0
  d8:	ret

tas_16_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_16>:
   0:	mov	x1, x0
   4:	mov	w2, #0x1                   	// #1
   8:	ldaxrb	w0, [x1]
   c:	stlxrb	w3, w2, [x1]
  10:	cbnz	w3, 8 <libat_test_and_set_16+0x8>
  14:	ret

0000000000000018 <select_test_and_set_16>:
  18:	adrp	x0, 0 <libat_test_and_set_16>
  1c:	add	x0, x0, #0x0
  20:	ret

load_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_1_i1>:
   0:	ldarb	w0, [x0]
   4:	ret

store_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_1_i1>:
   0:	and	w1, w1, #0xff
   4:	stlrb	w1, [x0]
   8:	ret

cas_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_1_i1>:
   0:	ldrb	w4, [x1]
   4:	and	w2, w2, #0xff
   8:	mov	w3, w4
   c:	casalb	w3, w2, [x0]
  10:	cmp	w3, w4, uxtb
  14:	cset	w0, eq  // eq = none
  18:	b.eq	20 <libat_compare_exchange_1_i1+0x20>  // b.none
  1c:	strb	w3, [x1]
  20:	ret

exch_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_1_i1>:
   0:	and	w1, w1, #0xff
   4:	swpalb	w1, w0, [x0]
   8:	ret

fadd_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_1_i1>:
   0:	ldaddalb	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_add_fetch_1_i1>:
   8:	and	w1, w1, #0xff
   c:	ldaddalb	w1, w2, [x0]
  10:	add	w0, w1, w2
  14:	ret

fsub_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_1_i1>:
   0:	and	w1, w1, #0xff
   4:	neg	w1, w1
   8:	ldaddalb	w1, w0, [x0]
   c:	ret

0000000000000010 <libat_sub_fetch_1_i1>:
  10:	and	w1, w1, #0xff
  14:	neg	w2, w1
  18:	ldaddalb	w2, w2, [x0]
  1c:	sub	w0, w2, w1
  20:	ret

fand_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_1_i1>:
   0:	and	w1, w1, #0xff
   4:	mvn	w1, w1
   8:	ldclralb	w1, w0, [x0]
   c:	ret

0000000000000010 <libat_and_fetch_1_i1>:
  10:	and	w1, w1, #0xff
  14:	mvn	w2, w1
  18:	ldclralb	w2, w2, [x0]
  1c:	and	w0, w1, w2
  20:	ret

fior_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_1_i1>:
   0:	ldsetalb	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_or_fetch_1_i1>:
   8:	and	w1, w1, #0xff
   c:	ldsetalb	w1, w2, [x0]
  10:	orr	w0, w1, w2
  14:	ret

fxor_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_1_i1>:
   0:	ldeoralb	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_xor_fetch_1_i1>:
   8:	and	w1, w1, #0xff
   c:	ldeoralb	w1, w2, [x0]
  10:	eor	w0, w1, w2
  14:	ret

fnand_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_1_i1>:
   0:	and	w1, w1, #0xff
   4:	mov	x2, x0
   8:	ldaxrb	w0, [x2]
   c:	and	w3, w0, w1
  10:	mvn	w3, w3
  14:	stlxrb	w4, w3, [x2]
  18:	cbnz	w4, 8 <libat_fetch_nand_1_i1+0x8>
  1c:	ret

0000000000000020 <libat_nand_fetch_1_i1>:
  20:	and	w1, w1, #0xff
  24:	mov	x2, x0
  28:	ldaxrb	w0, [x2]
  2c:	and	w0, w0, w1
  30:	mvn	w0, w0
  34:	stlxrb	w3, w0, [x2]
  38:	cbnz	w3, 28 <libat_nand_fetch_1_i1+0x8>
  3c:	ret

tas_1_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_1_i1>:
   0:	mov	w2, #0x1                   	// #1
   4:	swpalb	w2, w0, [x0]
   8:	ret

load_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_2_i1>:
   0:	ldarh	w0, [x0]
   4:	ret

store_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_2_i1>:
   0:	and	w1, w1, #0xffff
   4:	stlrh	w1, [x0]
   8:	ret

cas_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_2_i1>:
   0:	ldrh	w4, [x1]
   4:	and	w2, w2, #0xffff
   8:	mov	w3, w4
   c:	casalh	w3, w2, [x0]
  10:	cmp	w3, w4, uxth
  14:	cset	w0, eq  // eq = none
  18:	b.eq	20 <libat_compare_exchange_2_i1+0x20>  // b.none
  1c:	strh	w3, [x1]
  20:	ret

exch_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_2_i1>:
   0:	and	w1, w1, #0xffff
   4:	swpalh	w1, w0, [x0]
   8:	ret

fadd_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_2_i1>:
   0:	ldaddalh	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_add_fetch_2_i1>:
   8:	and	w1, w1, #0xffff
   c:	ldaddalh	w1, w2, [x0]
  10:	add	w0, w1, w2
  14:	ret

fsub_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_2_i1>:
   0:	and	w1, w1, #0xffff
   4:	neg	w1, w1
   8:	ldaddalh	w1, w0, [x0]
   c:	ret

0000000000000010 <libat_sub_fetch_2_i1>:
  10:	and	w1, w1, #0xffff
  14:	neg	w2, w1
  18:	ldaddalh	w2, w2, [x0]
  1c:	sub	w0, w2, w1
  20:	ret

fand_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_2_i1>:
   0:	and	w1, w1, #0xffff
   4:	mvn	w1, w1
   8:	ldclralh	w1, w0, [x0]
   c:	ret

0000000000000010 <libat_and_fetch_2_i1>:
  10:	and	w1, w1, #0xffff
  14:	mvn	w2, w1
  18:	ldclralh	w2, w2, [x0]
  1c:	and	w0, w1, w2
  20:	ret

fior_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_2_i1>:
   0:	ldsetalh	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_or_fetch_2_i1>:
   8:	and	w1, w1, #0xffff
   c:	ldsetalh	w1, w2, [x0]
  10:	orr	w0, w1, w2
  14:	ret

fxor_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_2_i1>:
   0:	ldeoralh	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_xor_fetch_2_i1>:
   8:	and	w1, w1, #0xffff
   c:	ldeoralh	w1, w2, [x0]
  10:	eor	w0, w1, w2
  14:	ret

fnand_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_2_i1>:
   0:	and	w1, w1, #0xffff
   4:	mov	x2, x0
   8:	ldaxrh	w0, [x2]
   c:	and	w3, w0, w1
  10:	mvn	w3, w3
  14:	stlxrh	w4, w3, [x2]
  18:	cbnz	w4, 8 <libat_fetch_nand_2_i1+0x8>
  1c:	ret

0000000000000020 <libat_nand_fetch_2_i1>:
  20:	and	w1, w1, #0xffff
  24:	mov	x2, x0
  28:	ldaxrh	w0, [x2]
  2c:	and	w0, w0, w1
  30:	mvn	w0, w0
  34:	stlxrh	w3, w0, [x2]
  38:	cbnz	w3, 28 <libat_nand_fetch_2_i1+0x8>
  3c:	ret

tas_2_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_2_i1>:
   0:	mov	w2, #0x1                   	// #1
   4:	swpalb	w2, w0, [x0]
   8:	ret

load_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_4_i1>:
   0:	ldar	w0, [x0]
   4:	ret

store_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_4_i1>:
   0:	stlr	w1, [x0]
   4:	ret

cas_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_4_i1>:
   0:	ldr	w4, [x1]
   4:	mov	w3, w4
   8:	casal	w3, w2, [x0]
   c:	cmp	w3, w4
  10:	cset	w0, eq  // eq = none
  14:	b.eq	1c <libat_compare_exchange_4_i1+0x1c>  // b.none
  18:	str	w3, [x1]
  1c:	ret

exch_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_4_i1>:
   0:	swpal	w1, w0, [x0]
   4:	ret

fadd_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_4_i1>:
   0:	ldaddal	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_add_fetch_4_i1>:
   8:	ldaddal	w1, w2, [x0]
   c:	add	w0, w2, w1
  10:	ret

fsub_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_4_i1>:
   0:	neg	w1, w1
   4:	ldaddal	w1, w0, [x0]
   8:	ret
   c:	nop

0000000000000010 <libat_sub_fetch_4_i1>:
  10:	neg	w2, w1
  14:	ldaddal	w2, w2, [x0]
  18:	sub	w0, w2, w1
  1c:	ret

fand_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_4_i1>:
   0:	mvn	w1, w1
   4:	ldclral	w1, w0, [x0]
   8:	ret
   c:	nop

0000000000000010 <libat_and_fetch_4_i1>:
  10:	mvn	w2, w1
  14:	ldclral	w2, w2, [x0]
  18:	and	w0, w2, w1
  1c:	ret

fior_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_4_i1>:
   0:	ldsetal	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_or_fetch_4_i1>:
   8:	ldsetal	w1, w2, [x0]
   c:	orr	w0, w2, w1
  10:	ret

fxor_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_4_i1>:
   0:	ldeoral	w1, w0, [x0]
   4:	ret

0000000000000008 <libat_xor_fetch_4_i1>:
   8:	ldeoral	w1, w2, [x0]
   c:	eor	w0, w2, w1
  10:	ret

fnand_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_4_i1>:
   0:	mov	x2, x0
   4:	ldaxr	w0, [x2]
   8:	and	w3, w0, w1
   c:	mvn	w3, w3
  10:	stlxr	w4, w3, [x2]
  14:	cbnz	w4, 4 <libat_fetch_nand_4_i1+0x4>
  18:	ret
  1c:	nop

0000000000000020 <libat_nand_fetch_4_i1>:
  20:	mov	x2, x0
  24:	ldaxr	w0, [x2]
  28:	and	w0, w0, w1
  2c:	mvn	w0, w0
  30:	stlxr	w3, w0, [x2]
  34:	cbnz	w3, 24 <libat_nand_fetch_4_i1+0x4>
  38:	ret

tas_4_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_4_i1>:
   0:	mov	w2, #0x1                   	// #1
   4:	swpalb	w2, w0, [x0]
   8:	ret

load_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_8_i1>:
   0:	ldar	x0, [x0]
   4:	ret

store_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_8_i1>:
   0:	stlr	x1, [x0]
   4:	ret

cas_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_8_i1>:
   0:	ldr	x4, [x1]
   4:	mov	x3, x4
   8:	casal	x3, x2, [x0]
   c:	cmp	x3, x4
  10:	cset	w0, eq  // eq = none
  14:	b.eq	1c <libat_compare_exchange_8_i1+0x1c>  // b.none
  18:	str	x3, [x1]
  1c:	ret

exch_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_8_i1>:
   0:	swpal	x1, x0, [x0]
   4:	ret

fadd_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_8_i1>:
   0:	ldaddal	x1, x0, [x0]
   4:	ret

0000000000000008 <libat_add_fetch_8_i1>:
   8:	ldaddal	x1, x2, [x0]
   c:	add	x0, x2, x1
  10:	ret

fsub_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_8_i1>:
   0:	neg	x1, x1
   4:	ldaddal	x1, x0, [x0]
   8:	ret
   c:	nop

0000000000000010 <libat_sub_fetch_8_i1>:
  10:	neg	x2, x1
  14:	ldaddal	x2, x2, [x0]
  18:	sub	x0, x2, x1
  1c:	ret

fand_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_8_i1>:
   0:	mvn	x1, x1
   4:	ldclral	x1, x0, [x0]
   8:	ret
   c:	nop

0000000000000010 <libat_and_fetch_8_i1>:
  10:	mvn	x2, x1
  14:	ldclral	x2, x2, [x0]
  18:	and	x0, x2, x1
  1c:	ret

fior_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_8_i1>:
   0:	ldsetal	x1, x0, [x0]
   4:	ret

0000000000000008 <libat_or_fetch_8_i1>:
   8:	ldsetal	x1, x2, [x0]
   c:	orr	x0, x2, x1
  10:	ret

fxor_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_8_i1>:
   0:	ldeoral	x1, x0, [x0]
   4:	ret

0000000000000008 <libat_xor_fetch_8_i1>:
   8:	ldeoral	x1, x2, [x0]
   c:	eor	x0, x2, x1
  10:	ret

fnand_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_8_i1>:
   0:	mov	x2, x0
   4:	ldaxr	x0, [x2]
   8:	and	x3, x0, x1
   c:	mvn	x3, x3
  10:	stlxr	w4, x3, [x2]
  14:	cbnz	w4, 4 <libat_fetch_nand_8_i1+0x4>
  18:	ret
  1c:	nop

0000000000000020 <libat_nand_fetch_8_i1>:
  20:	mov	x2, x0
  24:	ldaxr	x0, [x2]
  28:	and	x0, x0, x1
  2c:	mvn	x0, x0
  30:	stlxr	w3, x0, [x2]
  34:	cbnz	w3, 24 <libat_nand_fetch_8_i1+0x4>
  38:	ret

tas_8_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_8_i1>:
   0:	mov	w2, #0x1                   	// #1
   4:	swpalb	w2, w0, [x0]
   8:	ret

load_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_load_16_i1>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	str	x21, [sp, #32]
  14:	bl	0 <libat_lock_1>
  18:	ldp	x20, x21, [x19]
  1c:	mov	x0, x19
  20:	bl	0 <libat_unlock_1>
  24:	mov	x0, x20
  28:	mov	x1, x21
  2c:	ldp	x19, x20, [sp, #16]
  30:	ldr	x21, [sp, #32]
  34:	ldp	x29, x30, [sp], #48
  38:	ret

store_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_store_16_i1>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	str	x21, [sp, #32]
  18:	mov	x21, x2
  1c:	bl	0 <libat_lock_1>
  20:	stp	x21, x20, [x19]
  24:	mov	x0, x19
  28:	ldp	x19, x20, [sp, #16]
  2c:	ldr	x21, [sp, #32]
  30:	ldp	x29, x30, [sp], #48
  34:	b	0 <libat_unlock_1>

cas_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_compare_exchange_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x1
  10:	mov	x19, x0
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x22, x2
  1c:	mov	x21, x3
  20:	str	x23, [sp, #48]
  24:	bl	0 <libat_lock_1>
  28:	ldp	x1, x2, [x19]
  2c:	ldp	x3, x4, [x20]
  30:	eor	x0, x3, x1
  34:	eor	x5, x4, x2
  38:	orr	x0, x0, x5
  3c:	cmp	x0, #0x0
  40:	cset	w23, eq  // eq = none
  44:	cmp	x3, x1
  48:	b.eq	70 <libat_compare_exchange_16_i1+0x70>  // b.none
  4c:	stp	x1, x2, [x20]
  50:	mov	x0, x19
  54:	bl	0 <libat_unlock_1>
  58:	mov	w0, w23
  5c:	ldp	x19, x20, [sp, #16]
  60:	ldp	x21, x22, [sp, #32]
  64:	ldr	x23, [sp, #48]
  68:	ldp	x29, x30, [sp], #64
  6c:	ret
  70:	cmp	x4, x2
  74:	b.ne	4c <libat_compare_exchange_16_i1+0x4c>  // b.any
  78:	stp	x22, x21, [x19]
  7c:	mov	x0, x19
  80:	bl	0 <libat_unlock_1>
  84:	mov	w0, w23
  88:	ldp	x19, x20, [sp, #16]
  8c:	ldp	x21, x22, [sp, #32]
  90:	ldr	x23, [sp, #48]
  94:	ldp	x29, x30, [sp], #64
  98:	ret

exch_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_exchange_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x22, x23, [x19]
  28:	stp	x21, x20, [x19]
  2c:	mov	x0, x19
  30:	bl	0 <libat_unlock_1>
  34:	ldp	x19, x20, [sp, #16]
  38:	mov	x0, x22
  3c:	mov	x1, x23
  40:	ldp	x21, x22, [sp, #32]
  44:	ldr	x23, [sp, #48]
  48:	ldp	x29, x30, [sp], #64
  4c:	ret

fadd_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_add_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x3
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x22, x23, [x19]
  28:	mov	x0, x19
  2c:	adds	x20, x22, x20
  30:	adc	x21, x23, x21
  34:	stp	x20, x21, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x22
  40:	mov	x1, x23
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_add_fetch_16_i1>:
  58:	stp	x29, x30, [sp, #-48]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x20, x0
  68:	mov	x19, x2
  6c:	str	x21, [sp, #32]
  70:	mov	x21, x3
  74:	bl	0 <libat_lock_1>
  78:	ldp	x2, x1, [x20]
  7c:	mov	x0, x20
  80:	adds	x19, x19, x2
  84:	adc	x21, x21, x1
  88:	stp	x19, x21, [x20]
  8c:	bl	0 <libat_unlock_1>
  90:	mov	x0, x19
  94:	mov	x1, x21
  98:	ldp	x19, x20, [sp, #16]
  9c:	ldr	x21, [sp, #32]
  a0:	ldp	x29, x30, [sp], #48
  a4:	ret

fsub_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_sub_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x3
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x22, x23, [x19]
  28:	mov	x0, x19
  2c:	subs	x20, x22, x20
  30:	sbc	x21, x23, x21
  34:	stp	x20, x21, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x22
  40:	mov	x1, x23
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_sub_fetch_16_i1>:
  58:	stp	x29, x30, [sp, #-64]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	stp	x21, x22, [sp, #32]
  6c:	mov	x22, x2
  70:	str	x23, [sp, #48]
  74:	mov	x23, x3
  78:	bl	0 <libat_lock_1>
  7c:	ldp	x20, x21, [x19]
  80:	mov	x0, x19
  84:	subs	x20, x20, x22
  88:	sbc	x21, x21, x23
  8c:	stp	x20, x21, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x20
  98:	mov	x1, x21
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldr	x23, [sp, #48]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

fand_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_and_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	and	x21, x23, x21
  30:	and	x20, x22, x20
  34:	stp	x21, x20, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x23
  40:	mov	x1, x22
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_and_fetch_16_i1>:
  58:	stp	x29, x30, [sp, #-64]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	stp	x21, x22, [sp, #32]
  6c:	mov	x22, x3
  70:	str	x23, [sp, #48]
  74:	mov	x23, x2
  78:	bl	0 <libat_lock_1>
  7c:	ldp	x21, x20, [x19]
  80:	mov	x0, x19
  84:	and	x21, x21, x23
  88:	and	x20, x20, x22
  8c:	stp	x21, x20, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x21
  98:	mov	x1, x20
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldr	x23, [sp, #48]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

fior_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_or_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	orr	x21, x23, x21
  30:	orr	x20, x22, x20
  34:	stp	x21, x20, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x23
  40:	mov	x1, x22
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_or_fetch_16_i1>:
  58:	stp	x29, x30, [sp, #-64]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	stp	x21, x22, [sp, #32]
  6c:	mov	x22, x3
  70:	str	x23, [sp, #48]
  74:	mov	x23, x2
  78:	bl	0 <libat_lock_1>
  7c:	ldp	x21, x20, [x19]
  80:	mov	x0, x19
  84:	orr	x21, x21, x23
  88:	orr	x20, x20, x22
  8c:	stp	x21, x20, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x21
  98:	mov	x1, x20
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldr	x23, [sp, #48]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

fxor_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_xor_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	eor	x21, x23, x21
  30:	eor	x20, x22, x20
  34:	stp	x21, x20, [x19]
  38:	bl	0 <libat_unlock_1>
  3c:	mov	x0, x23
  40:	mov	x1, x22
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldr	x23, [sp, #48]
  50:	ldp	x29, x30, [sp], #64
  54:	ret

0000000000000058 <libat_xor_fetch_16_i1>:
  58:	stp	x29, x30, [sp, #-64]!
  5c:	mov	x29, sp
  60:	stp	x19, x20, [sp, #16]
  64:	mov	x19, x0
  68:	stp	x21, x22, [sp, #32]
  6c:	mov	x22, x3
  70:	str	x23, [sp, #48]
  74:	mov	x23, x2
  78:	bl	0 <libat_lock_1>
  7c:	ldp	x21, x20, [x19]
  80:	mov	x0, x19
  84:	eor	x21, x21, x23
  88:	eor	x20, x20, x22
  8c:	stp	x21, x20, [x19]
  90:	bl	0 <libat_unlock_1>
  94:	mov	x0, x21
  98:	mov	x1, x20
  9c:	ldp	x19, x20, [sp, #16]
  a0:	ldp	x21, x22, [sp, #32]
  a4:	ldr	x23, [sp, #48]
  a8:	ldp	x29, x30, [sp], #64
  ac:	ret

fnand_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_fetch_nand_16_i1>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	mov	x20, x3
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x2
  1c:	str	x23, [sp, #48]
  20:	bl	0 <libat_lock_1>
  24:	ldp	x23, x22, [x19]
  28:	mov	x0, x19
  2c:	and	x21, x23, x21
  30:	and	x20, x22, x20
  34:	mvn	x21, x21
  38:	mvn	x20, x20
  3c:	stp	x21, x20, [x19]
  40:	bl	0 <libat_unlock_1>
  44:	mov	x0, x23
  48:	mov	x1, x22
  4c:	ldp	x19, x20, [sp, #16]
  50:	ldp	x21, x22, [sp, #32]
  54:	ldr	x23, [sp, #48]
  58:	ldp	x29, x30, [sp], #64
  5c:	ret

0000000000000060 <libat_nand_fetch_16_i1>:
  60:	stp	x29, x30, [sp, #-64]!
  64:	mov	x29, sp
  68:	stp	x19, x20, [sp, #16]
  6c:	mov	x19, x0
  70:	stp	x21, x22, [sp, #32]
  74:	mov	x22, x3
  78:	str	x23, [sp, #48]
  7c:	mov	x23, x2
  80:	bl	0 <libat_lock_1>
  84:	ldp	x21, x20, [x19]
  88:	mov	x0, x19
  8c:	and	x21, x21, x23
  90:	and	x20, x20, x22
  94:	mvn	x21, x21
  98:	mvn	x20, x20
  9c:	stp	x21, x20, [x19]
  a0:	bl	0 <libat_unlock_1>
  a4:	mov	x0, x21
  a8:	mov	x1, x20
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x21, x22, [sp, #32]
  b4:	ldr	x23, [sp, #48]
  b8:	ldp	x29, x30, [sp], #64
  bc:	ret

tas_16_1_.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <libat_test_and_set_16_i1>:
   0:	mov	w2, #0x1                   	// #1
   4:	swpalb	w2, w0, [x0]
   8:	ret
