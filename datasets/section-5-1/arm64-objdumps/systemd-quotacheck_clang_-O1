
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-quotacheck_clang_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000210e60 <_start>:
  210e60:	mov	x29, #0x0                   	// #0
  210e64:	mov	x30, #0x0                   	// #0
  210e68:	mov	x5, x0
  210e6c:	ldr	x1, [sp]
  210e70:	add	x2, sp, #0x8
  210e74:	mov	x6, sp
  210e78:	movz	x0, #0x0, lsl #48
  210e7c:	movk	x0, #0x0, lsl #32
  210e80:	movk	x0, #0x21, lsl #16
  210e84:	movk	x0, #0xfb0
  210e88:	movz	x3, #0x0, lsl #48
  210e8c:	movk	x3, #0x0, lsl #32
  210e90:	movk	x3, #0x21, lsl #16
  210e94:	movk	x3, #0x13d8
  210e98:	movz	x4, #0x0, lsl #48
  210e9c:	movk	x4, #0x0, lsl #32
  210ea0:	movk	x4, #0x21, lsl #16
  210ea4:	movk	x4, #0x1458
  210ea8:	bl	2114a0 <__libc_start_main@plt>
  210eac:	bl	2114b0 <abort@plt>

0000000000210eb0 <call_weak_fn>:
  210eb0:	adrp	x0, 221000 <safe_fork_full@plt+0xfa60>
  210eb4:	ldr	x0, [x0, #1936]
  210eb8:	cbz	x0, 210ec0 <call_weak_fn+0x10>
  210ebc:	b	2114c0 <__gmon_start__@plt>
  210ec0:	ret

0000000000210ec4 <deregister_tm_clones>:
  210ec4:	adrp	x0, 231000 <_DYNAMIC+0xfa40>
  210ec8:	add	x0, x0, #0x848
  210ecc:	adrp	x1, 231000 <_DYNAMIC+0xfa40>
  210ed0:	add	x1, x1, #0x848
  210ed4:	cmp	x0, x1
  210ed8:	b.eq	210f0c <deregister_tm_clones+0x48>  // b.none
  210edc:	stp	x29, x30, [sp, #-32]!
  210ee0:	mov	x29, sp
  210ee4:	adrp	x0, 200000 <run.cmdline-0xd10>
  210ee8:	ldr	x0, [x0, #2656]
  210eec:	str	x0, [sp, #24]
  210ef0:	mov	x1, x0
  210ef4:	cbz	x1, 210f04 <deregister_tm_clones+0x40>
  210ef8:	adrp	x0, 231000 <_DYNAMIC+0xfa40>
  210efc:	add	x0, x0, #0x848
  210f00:	blr	x1
  210f04:	ldp	x29, x30, [sp], #32
  210f08:	ret
  210f0c:	ret

0000000000210f10 <register_tm_clones>:
  210f10:	adrp	x0, 231000 <_DYNAMIC+0xfa40>
  210f14:	add	x0, x0, #0x848
  210f18:	adrp	x1, 231000 <_DYNAMIC+0xfa40>
  210f1c:	add	x1, x1, #0x848
  210f20:	sub	x0, x0, x1
  210f24:	lsr	x1, x0, #63
  210f28:	add	x0, x1, x0, asr #3
  210f2c:	cmp	xzr, x0, asr #1
  210f30:	b.eq	210f68 <register_tm_clones+0x58>  // b.none
  210f34:	stp	x29, x30, [sp, #-32]!
  210f38:	mov	x29, sp
  210f3c:	asr	x1, x0, #1
  210f40:	adrp	x0, 200000 <run.cmdline-0xd10>
  210f44:	ldr	x0, [x0, #2664]
  210f48:	str	x0, [sp, #24]
  210f4c:	mov	x2, x0
  210f50:	cbz	x2, 210f60 <register_tm_clones+0x50>
  210f54:	adrp	x0, 231000 <_DYNAMIC+0xfa40>
  210f58:	add	x0, x0, #0x848
  210f5c:	blr	x2
  210f60:	ldp	x29, x30, [sp], #32
  210f64:	ret
  210f68:	ret

0000000000210f6c <__do_global_dtors_aux>:
  210f6c:	adrp	x0, 231000 <_DYNAMIC+0xfa40>
  210f70:	ldrb	w0, [x0, #2120]
  210f74:	cbnz	w0, 210f98 <__do_global_dtors_aux+0x2c>
  210f78:	stp	x29, x30, [sp, #-16]!
  210f7c:	mov	x29, sp
  210f80:	bl	210ec4 <deregister_tm_clones>
  210f84:	adrp	x0, 231000 <_DYNAMIC+0xfa40>
  210f88:	mov	w1, #0x1                   	// #1
  210f8c:	strb	w1, [x0, #2120]
  210f90:	ldp	x29, x30, [sp], #16
  210f94:	ret
  210f98:	ret

0000000000210f9c <frame_dummy>:
  210f9c:	stp	x29, x30, [sp, #-16]!
  210fa0:	mov	x29, sp
  210fa4:	bl	210f10 <register_tm_clones>
  210fa8:	ldp	x29, x30, [sp], #16
  210fac:	ret

0000000000210fb0 <main>:
  210fb0:	stp	x29, x30, [sp, #-32]!
  210fb4:	str	x19, [sp, #16]
  210fb8:	mov	x29, sp
  210fbc:	mov	w19, w0
  210fc0:	bl	210ff4 <save_argc_argv>
  210fc4:	mov	w0, w19
  210fc8:	bl	211008 <run>
  210fcc:	mov	w19, w0
  210fd0:	bl	2114d0 <ask_password_agent_close@plt>
  210fd4:	bl	2114e0 <polkit_agent_close@plt>
  210fd8:	bl	2114f0 <pager_close@plt>
  210fdc:	bl	211500 <mac_selinux_finish@plt>
  210fe0:	bl	211130 <static_destruct>
  210fe4:	lsr	w0, w19, #31
  210fe8:	ldr	x19, [sp, #16]
  210fec:	ldp	x29, x30, [sp], #32
  210ff0:	ret

0000000000210ff4 <save_argc_argv>:
  210ff4:	adrp	x8, 231000 <_DYNAMIC+0xfa40>
  210ff8:	adrp	x9, 231000 <_DYNAMIC+0xfa40>
  210ffc:	str	w0, [x8, #2128]
  211000:	str	x1, [x9, #2136]
  211004:	ret

0000000000211008 <run>:
  211008:	stp	x29, x30, [sp, #-32]!
  21100c:	str	x19, [sp, #16]
  211010:	mov	x29, sp
  211014:	mov	w19, w0
  211018:	bl	211510 <log_setup_service@plt>
  21101c:	cmp	w19, #0x2
  211020:	b.lt	211064 <run+0x5c>  // b.tstop
  211024:	mov	w0, wzr
  211028:	bl	211520 <log_get_max_level_realm@plt>
  21102c:	cmp	w0, #0x3
  211030:	b.lt	211104 <run+0xfc>  // b.tstop
  211034:	adrp	x2, 200000 <run.cmdline-0xd10>
  211038:	adrp	x4, 200000 <run.cmdline-0xd10>
  21103c:	adrp	x5, 200000 <run.cmdline-0xd10>
  211040:	mov	w1, #0x16                  	// #22
  211044:	add	x2, x2, #0xb9d
  211048:	add	x4, x4, #0xce9
  21104c:	add	x5, x5, #0xaee
  211050:	mov	w0, #0x3                   	// #3
  211054:	movk	w1, #0x4000, lsl #16
  211058:	mov	w3, #0x41                  	// #65
  21105c:	bl	211530 <log_internal_realm@plt>
  211060:	b	211108 <run+0x100>
  211064:	mov	w0, #0x12                  	// #18
  211068:	bl	211540 <umask@plt>
  21106c:	adrp	x0, 211000 <save_argc_argv+0xc>
  211070:	add	x0, x0, #0x190
  211074:	mov	x1, xzr
  211078:	mov	w2, wzr
  21107c:	bl	211550 <proc_cmdline_parse@plt>
  211080:	tbz	w0, #31, 2110c0 <run+0xb8>
  211084:	mov	w19, w0
  211088:	mov	w0, wzr
  21108c:	bl	211520 <log_get_max_level_realm@plt>
  211090:	cmp	w0, #0x4
  211094:	b.lt	2110c0 <run+0xb8>  // b.tstop
  211098:	adrp	x2, 200000 <run.cmdline-0xd10>
  21109c:	adrp	x4, 200000 <run.cmdline-0xd10>
  2110a0:	adrp	x5, 200000 <run.cmdline-0xd10>
  2110a4:	add	x2, x2, #0xb9d
  2110a8:	add	x4, x4, #0xce9
  2110ac:	add	x5, x5, #0xb30
  2110b0:	mov	w0, #0x4                   	// #4
  2110b4:	mov	w3, #0x47                  	// #71
  2110b8:	mov	w1, w19
  2110bc:	bl	211530 <log_internal_realm@plt>
  2110c0:	bl	2112d0 <test_files>
  2110c4:	adrp	x8, 231000 <_DYNAMIC+0xfa40>
  2110c8:	ldrb	w8, [x8, #2121]
  2110cc:	tbnz	w8, #0, 2110f0 <run+0xe8>
  2110d0:	adrp	x8, 231000 <_DYNAMIC+0xfa40>
  2110d4:	ldrb	w8, [x8, #2122]
  2110d8:	tbnz	w8, #0, 2110fc <run+0xf4>
  2110dc:	adrp	x0, 200000 <run.cmdline-0xd10>
  2110e0:	add	x0, x0, #0xc32
  2110e4:	mov	w1, wzr
  2110e8:	bl	211560 <access@plt>
  2110ec:	tbnz	w0, #31, 2110fc <run+0xf4>
  2110f0:	bl	211338 <safe_fork>
  2110f4:	tbnz	w0, #31, 211108 <run+0x100>
  2110f8:	cbz	w0, 211114 <run+0x10c>
  2110fc:	mov	w0, wzr
  211100:	b	211108 <run+0x100>
  211104:	mov	w0, #0xffffffea            	// #-22
  211108:	ldr	x19, [sp, #16]
  21110c:	ldp	x29, x30, [sp], #32
  211110:	ret
  211114:	adrp	x0, 200000 <run.cmdline-0xd10>
  211118:	adrp	x1, 200000 <run.cmdline-0xd10>
  21111c:	add	x0, x0, #0xcc9
  211120:	add	x1, x1, #0xd10
  211124:	bl	211570 <execv@plt>
  211128:	mov	w0, #0x1                   	// #1
  21112c:	bl	211580 <_exit@plt>

0000000000211130 <static_destruct>:
  211130:	stp	x29, x30, [sp, #-32]!
  211134:	stp	x20, x19, [sp, #16]
  211138:	adrp	x8, 221000 <safe_fork_full@plt+0xfa60>
  21113c:	ldr	x8, [x8, #1944]
  211140:	mov	x29, sp
  211144:	cbz	x8, 211184 <static_destruct+0x54>
  211148:	adrp	x0, 221000 <safe_fork_full@plt+0xfa60>
  21114c:	ldr	x0, [x0, #1944]
  211150:	bl	2113cc <ALIGN_TO>
  211154:	adrp	x20, 221000 <safe_fork_full@plt+0xfa60>
  211158:	ldr	x20, [x20, #1952]
  21115c:	cmp	x0, x20
  211160:	b.cs	211184 <static_destruct+0x54>  // b.hs, b.nlast
  211164:	mov	x19, x0
  211168:	ldp	x0, x8, [x19]
  21116c:	blr	x8
  211170:	add	x0, x19, #0x10
  211174:	bl	2113cc <ALIGN_TO>
  211178:	mov	x19, x0
  21117c:	cmp	x0, x20
  211180:	b.cc	211168 <static_destruct+0x38>  // b.lo, b.ul, b.last
  211184:	ldp	x20, x19, [sp, #16]
  211188:	ldp	x29, x30, [sp], #32
  21118c:	ret

0000000000211190 <parse_proc_cmdline_item>:
  211190:	stp	x29, x30, [sp, #-32]!
  211194:	stp	x20, x19, [sp, #16]
  211198:	mov	x19, x1
  21119c:	adrp	x1, 200000 <run.cmdline-0xd10>
  2111a0:	add	x1, x1, #0xb0f
  2111a4:	mov	x29, sp
  2111a8:	mov	x20, x0
  2111ac:	bl	211590 <strcmp@plt>
  2111b0:	cbz	w0, 211204 <parse_proc_cmdline_item+0x74>
  2111b4:	adrp	x1, 200000 <run.cmdline-0xd10>
  2111b8:	add	x1, x1, #0xc4a
  2111bc:	mov	x0, x20
  2111c0:	bl	211590 <strcmp@plt>
  2111c4:	cbnz	x19, 21129c <parse_proc_cmdline_item+0x10c>
  2111c8:	cbnz	w0, 21129c <parse_proc_cmdline_item+0x10c>
  2111cc:	bl	211520 <log_get_max_level_realm@plt>
  2111d0:	cmp	w0, #0x4
  2111d4:	b.lt	211290 <parse_proc_cmdline_item+0x100>  // b.tstop
  2111d8:	adrp	x2, 200000 <run.cmdline-0xd10>
  2111dc:	adrp	x4, 200000 <run.cmdline-0xd10>
  2111e0:	adrp	x5, 200000 <run.cmdline-0xd10>
  2111e4:	add	x2, x2, #0xb9d
  2111e8:	add	x4, x4, #0xc65
  2111ec:	add	x5, x5, #0xbb9
  2111f0:	mov	w0, #0x4                   	// #4
  2111f4:	mov	w3, #0x28                  	// #40
  2111f8:	mov	w1, wzr
  2111fc:	bl	211530 <log_internal_realm@plt>
  211200:	b	211290 <parse_proc_cmdline_item+0x100>
  211204:	mov	x0, x20
  211208:	mov	x1, x19
  21120c:	bl	211364 <proc_cmdline_value_missing>
  211210:	tbnz	w0, #0, 21129c <parse_proc_cmdline_item+0x10c>
  211214:	adrp	x1, 200000 <run.cmdline-0xd10>
  211218:	add	x1, x1, #0xb95
  21121c:	mov	x0, x19
  211220:	bl	211590 <strcmp@plt>
  211224:	cbz	w0, 2112ac <parse_proc_cmdline_item+0x11c>
  211228:	adrp	x1, 200000 <run.cmdline-0xd10>
  21122c:	add	x1, x1, #0xd08
  211230:	mov	x0, x19
  211234:	bl	211590 <strcmp@plt>
  211238:	cbz	w0, 211290 <parse_proc_cmdline_item+0x100>
  21123c:	adrp	x1, 200000 <run.cmdline-0xd10>
  211240:	add	x1, x1, #0xce4
  211244:	mov	x0, x19
  211248:	bl	211590 <strcmp@plt>
  21124c:	cbz	w0, 2112c0 <parse_proc_cmdline_item+0x130>
  211250:	mov	w0, wzr
  211254:	bl	211520 <log_get_max_level_realm@plt>
  211258:	cmp	w0, #0x4
  21125c:	b.lt	21129c <parse_proc_cmdline_item+0x10c>  // b.tstop
  211260:	adrp	x2, 200000 <run.cmdline-0xd10>
  211264:	adrp	x4, 200000 <run.cmdline-0xd10>
  211268:	adrp	x5, 200000 <run.cmdline-0xd10>
  21126c:	add	x2, x2, #0xb9d
  211270:	add	x4, x4, #0xc65
  211274:	add	x5, x5, #0xb62
  211278:	mov	w0, #0x4                   	// #4
  21127c:	mov	w3, #0x23                  	// #35
  211280:	mov	w1, wzr
  211284:	mov	x6, x19
  211288:	bl	211530 <log_internal_realm@plt>
  21128c:	b	21129c <parse_proc_cmdline_item+0x10c>
  211290:	adrp	x8, 231000 <_DYNAMIC+0xfa40>
  211294:	mov	w9, #0x1                   	// #1
  211298:	strb	w9, [x8, #2121]
  21129c:	ldp	x20, x19, [sp, #16]
  2112a0:	mov	w0, wzr
  2112a4:	ldp	x29, x30, [sp], #32
  2112a8:	ret
  2112ac:	adrp	x8, 231000 <_DYNAMIC+0xfa40>
  2112b0:	adrp	x9, 231000 <_DYNAMIC+0xfa40>
  2112b4:	strb	wzr, [x8, #2122]
  2112b8:	strb	wzr, [x9, #2121]
  2112bc:	b	21129c <parse_proc_cmdline_item+0x10c>
  2112c0:	adrp	x8, 231000 <_DYNAMIC+0xfa40>
  2112c4:	mov	w9, #0x1                   	// #1
  2112c8:	strb	w9, [x8, #2122]
  2112cc:	b	21129c <parse_proc_cmdline_item+0x10c>

00000000002112d0 <test_files>:
  2112d0:	stp	x29, x30, [sp, #-16]!
  2112d4:	adrp	x0, 200000 <run.cmdline-0xd10>
  2112d8:	add	x0, x0, #0xb1f
  2112dc:	mov	w1, wzr
  2112e0:	mov	x29, sp
  2112e4:	bl	211560 <access@plt>
  2112e8:	tbnz	w0, #31, 211330 <test_files+0x60>
  2112ec:	mov	w0, wzr
  2112f0:	bl	211520 <log_get_max_level_realm@plt>
  2112f4:	cmp	w0, #0x3
  2112f8:	b.lt	211324 <test_files+0x54>  // b.tstop
  2112fc:	adrp	x2, 200000 <run.cmdline-0xd10>
  211300:	adrp	x4, 200000 <run.cmdline-0xd10>
  211304:	adrp	x5, 200000 <run.cmdline-0xd10>
  211308:	add	x2, x2, #0xb9d
  21130c:	add	x4, x4, #0xc5a
  211310:	add	x5, x5, #0xa70
  211314:	mov	w0, #0x3                   	// #3
  211318:	mov	w3, #0x34                  	// #52
  21131c:	mov	w1, wzr
  211320:	bl	211530 <log_internal_realm@plt>
  211324:	adrp	x8, 231000 <_DYNAMIC+0xfa40>
  211328:	mov	w9, #0x1                   	// #1
  21132c:	strb	w9, [x8, #2121]
  211330:	ldp	x29, x30, [sp], #16
  211334:	ret

0000000000211338 <safe_fork>:
  211338:	stp	x29, x30, [sp, #-16]!
  21133c:	adrp	x0, 200000 <run.cmdline-0xd10>
  211340:	add	x0, x0, #0xc7d
  211344:	mov	w3, #0x265                 	// #613
  211348:	mov	x1, xzr
  21134c:	mov	x2, xzr
  211350:	mov	x4, xzr
  211354:	mov	x29, sp
  211358:	bl	2115a0 <safe_fork_full@plt>
  21135c:	ldp	x29, x30, [sp], #16
  211360:	ret

0000000000211364 <proc_cmdline_value_missing>:
  211364:	stp	x29, x30, [sp, #-32]!
  211368:	str	x19, [sp, #16]
  21136c:	mov	x29, sp
  211370:	cbz	x1, 21137c <proc_cmdline_value_missing+0x18>
  211374:	mov	w0, wzr
  211378:	b	2113c0 <proc_cmdline_value_missing+0x5c>
  21137c:	mov	x19, x0
  211380:	mov	w0, wzr
  211384:	bl	211520 <log_get_max_level_realm@plt>
  211388:	cmp	w0, #0x4
  21138c:	b.lt	2113bc <proc_cmdline_value_missing+0x58>  // b.tstop
  211390:	adrp	x2, 200000 <run.cmdline-0xd10>
  211394:	adrp	x4, 200000 <run.cmdline-0xd10>
  211398:	adrp	x5, 200000 <run.cmdline-0xd10>
  21139c:	add	x2, x2, #0xc19
  2113a0:	add	x4, x4, #0xced
  2113a4:	add	x5, x5, #0xc8a
  2113a8:	mov	w0, #0x4                   	// #4
  2113ac:	mov	w3, #0x21                  	// #33
  2113b0:	mov	w1, wzr
  2113b4:	mov	x6, x19
  2113b8:	bl	211530 <log_internal_realm@plt>
  2113bc:	mov	w0, #0x1                   	// #1
  2113c0:	ldr	x19, [sp, #16]
  2113c4:	ldp	x29, x30, [sp], #32
  2113c8:	ret

00000000002113cc <ALIGN_TO>:
  2113cc:	add	x8, x0, #0x7
  2113d0:	and	x0, x8, #0xfffffffffffffff8
  2113d4:	ret

00000000002113d8 <__libc_csu_init>:
  2113d8:	stp	x29, x30, [sp, #-64]!
  2113dc:	mov	x29, sp
  2113e0:	stp	x19, x20, [sp, #16]
  2113e4:	adrp	x20, 221000 <safe_fork_full@plt+0xfa60>
  2113e8:	add	x20, x20, #0x5c0
  2113ec:	stp	x21, x22, [sp, #32]
  2113f0:	adrp	x21, 221000 <safe_fork_full@plt+0xfa60>
  2113f4:	add	x21, x21, #0x5b8
  2113f8:	sub	x20, x20, x21
  2113fc:	mov	w22, w0
  211400:	stp	x23, x24, [sp, #48]
  211404:	mov	x23, x1
  211408:	mov	x24, x2
  21140c:	bl	21145c <_init>
  211410:	cmp	xzr, x20, asr #3
  211414:	b.eq	211440 <__libc_csu_init+0x68>  // b.none
  211418:	asr	x20, x20, #3
  21141c:	mov	x19, #0x0                   	// #0
  211420:	ldr	x3, [x21, x19, lsl #3]
  211424:	mov	x2, x24
  211428:	add	x19, x19, #0x1
  21142c:	mov	x1, x23
  211430:	mov	w0, w22
  211434:	blr	x3
  211438:	cmp	x20, x19
  21143c:	b.ne	211420 <__libc_csu_init+0x48>  // b.any
  211440:	ldp	x19, x20, [sp, #16]
  211444:	ldp	x21, x22, [sp, #32]
  211448:	ldp	x23, x24, [sp, #48]
  21144c:	ldp	x29, x30, [sp], #64
  211450:	ret
  211454:	nop

0000000000211458 <__libc_csu_fini>:
  211458:	ret

Disassembly of section .init:

000000000021145c <_init>:
  21145c:	stp	x29, x30, [sp, #-16]!
  211460:	mov	x29, sp
  211464:	bl	210eb0 <call_weak_fn>
  211468:	ldp	x29, x30, [sp], #16
  21146c:	ret

Disassembly of section .fini:

0000000000211470 <_fini>:
  211470:	stp	x29, x30, [sp, #-16]!
  211474:	mov	x29, sp
  211478:	ldp	x29, x30, [sp], #16
  21147c:	ret

Disassembly of section .plt:

0000000000211480 <__libc_start_main@plt-0x20>:
  211480:	stp	x16, x30, [sp, #-16]!
  211484:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  211488:	ldr	x17, [x16, #1976]
  21148c:	add	x16, x16, #0x7b8
  211490:	br	x17
  211494:	nop
  211498:	nop
  21149c:	nop

00000000002114a0 <__libc_start_main@plt>:
  2114a0:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  2114a4:	ldr	x17, [x16, #1984]
  2114a8:	add	x16, x16, #0x7c0
  2114ac:	br	x17

00000000002114b0 <abort@plt>:
  2114b0:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  2114b4:	ldr	x17, [x16, #1992]
  2114b8:	add	x16, x16, #0x7c8
  2114bc:	br	x17

00000000002114c0 <__gmon_start__@plt>:
  2114c0:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  2114c4:	ldr	x17, [x16, #2000]
  2114c8:	add	x16, x16, #0x7d0
  2114cc:	br	x17

00000000002114d0 <ask_password_agent_close@plt>:
  2114d0:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  2114d4:	ldr	x17, [x16, #2008]
  2114d8:	add	x16, x16, #0x7d8
  2114dc:	br	x17

00000000002114e0 <polkit_agent_close@plt>:
  2114e0:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  2114e4:	ldr	x17, [x16, #2016]
  2114e8:	add	x16, x16, #0x7e0
  2114ec:	br	x17

00000000002114f0 <pager_close@plt>:
  2114f0:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  2114f4:	ldr	x17, [x16, #2024]
  2114f8:	add	x16, x16, #0x7e8
  2114fc:	br	x17

0000000000211500 <mac_selinux_finish@plt>:
  211500:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  211504:	ldr	x17, [x16, #2032]
  211508:	add	x16, x16, #0x7f0
  21150c:	br	x17

0000000000211510 <log_setup_service@plt>:
  211510:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  211514:	ldr	x17, [x16, #2040]
  211518:	add	x16, x16, #0x7f8
  21151c:	br	x17

0000000000211520 <log_get_max_level_realm@plt>:
  211520:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  211524:	ldr	x17, [x16, #2048]
  211528:	add	x16, x16, #0x800
  21152c:	br	x17

0000000000211530 <log_internal_realm@plt>:
  211530:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  211534:	ldr	x17, [x16, #2056]
  211538:	add	x16, x16, #0x808
  21153c:	br	x17

0000000000211540 <umask@plt>:
  211540:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  211544:	ldr	x17, [x16, #2064]
  211548:	add	x16, x16, #0x810
  21154c:	br	x17

0000000000211550 <proc_cmdline_parse@plt>:
  211550:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  211554:	ldr	x17, [x16, #2072]
  211558:	add	x16, x16, #0x818
  21155c:	br	x17

0000000000211560 <access@plt>:
  211560:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  211564:	ldr	x17, [x16, #2080]
  211568:	add	x16, x16, #0x820
  21156c:	br	x17

0000000000211570 <execv@plt>:
  211570:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  211574:	ldr	x17, [x16, #2088]
  211578:	add	x16, x16, #0x828
  21157c:	br	x17

0000000000211580 <_exit@plt>:
  211580:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  211584:	ldr	x17, [x16, #2096]
  211588:	add	x16, x16, #0x830
  21158c:	br	x17

0000000000211590 <strcmp@plt>:
  211590:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  211594:	ldr	x17, [x16, #2104]
  211598:	add	x16, x16, #0x838
  21159c:	br	x17

00000000002115a0 <safe_fork_full@plt>:
  2115a0:	adrp	x16, 221000 <safe_fork_full@plt+0xfa60>
  2115a4:	ldr	x17, [x16, #2112]
  2115a8:	add	x16, x16, #0x840
  2115ac:	br	x17
