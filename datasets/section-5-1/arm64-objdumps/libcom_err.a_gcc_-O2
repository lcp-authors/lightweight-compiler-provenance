In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcom_err.a_gcc_-O2:

error_message.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <et_list_unlock.part.0>:
   0:	adrp	x0, 0 <et_list_unlock.part.0>
   4:	add	x0, x0, #0x0
   8:	b	0 <sem_post>
   c:	nop

0000000000000010 <init_debug>:
  10:	stp	x29, x30, [sp, #-48]!
  14:	mov	x29, sp
  18:	stp	x19, x20, [sp, #16]
  1c:	adrp	x19, 0 <et_list_unlock.part.0>
  20:	add	x19, x19, #0x0
  24:	ldr	w20, [x19, #32]
  28:	tbz	w20, #15, 38 <init_debug+0x28>
  2c:	ldp	x19, x20, [sp, #16]
  30:	ldp	x29, x30, [sp], #48
  34:	ret
  38:	adrp	x0, 0 <et_list_unlock.part.0>
  3c:	add	x0, x0, #0x0
  40:	bl	0 <getenv>
  44:	cbz	x0, 84 <init_debug+0x74>
  48:	add	x1, sp, #0x28
  4c:	mov	w2, #0x0                   	// #0
  50:	bl	0 <strtoul>
  54:	mov	w20, w0
  58:	ldr	x1, [sp, #40]
  5c:	ldrb	w0, [x1]
  60:	cbz	w0, 78 <init_debug+0x68>
  64:	mov	w0, #0x8000                	// #32768
  68:	str	w0, [x19, #32]
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldp	x29, x30, [sp], #48
  74:	ret
  78:	bl	0 <__errno_location>
  7c:	ldr	w0, [x0]
  80:	cbnz	w0, 64 <init_debug+0x54>
  84:	orr	w20, w20, #0x8000
  88:	str	w20, [x19, #32]
  8c:	cmp	w20, #0x8, lsl #12
  90:	b.eq	2c <init_debug+0x1c>  // b.none
  94:	bl	0 <getuid>
  98:	mov	w20, w0
  9c:	bl	0 <geteuid>
  a0:	cmp	w20, w0
  a4:	b.ne	150 <init_debug+0x140>  // b.any
  a8:	bl	0 <getgid>
  ac:	mov	w20, w0
  b0:	bl	0 <getegid>
  b4:	cmp	w20, w0
  b8:	b.ne	150 <init_debug+0x140>  // b.any
  bc:	mov	w4, #0x0                   	// #0
  c0:	mov	w3, #0x0                   	// #0
  c4:	mov	w2, #0x0                   	// #0
  c8:	mov	w1, #0x0                   	// #0
  cc:	mov	w0, #0x3                   	// #3
  d0:	bl	0 <prctl>
  d4:	cbz	w0, 150 <init_debug+0x140>
  d8:	adrp	x0, 0 <et_list_unlock.part.0>
  dc:	add	x0, x0, #0x0
  e0:	bl	0 <secure_getenv>
  e4:	cbz	x0, 150 <init_debug+0x140>
  e8:	adrp	x1, 0 <et_list_unlock.part.0>
  ec:	add	x1, x1, #0x0
  f0:	bl	0 <fopen>
  f4:	str	x0, [x19, #40]
  f8:	cbz	x0, 170 <init_debug+0x160>
  fc:	bl	0 <fileno>
 100:	mov	w20, w0
 104:	tbnz	w0, #31, 2c <init_debug+0x1c>
 108:	mov	w1, #0x1                   	// #1
 10c:	bl	0 <fcntl>
 110:	tbz	w0, #31, 158 <init_debug+0x148>
 114:	bl	0 <__errno_location>
 118:	ldr	w0, [x0]
 11c:	ldr	x20, [x19, #40]
 120:	bl	0 <strerror>
 124:	mov	x2, x0
 128:	adrp	x1, 0 <et_list_unlock.part.0>
 12c:	mov	x0, x20
 130:	add	x1, x1, #0x0
 134:	bl	0 <fprintf>
 138:	ldr	x0, [x19, #40]
 13c:	bl	0 <fclose>
 140:	str	xzr, [x19, #40]
 144:	mov	w0, #0x8000                	// #32768
 148:	str	w0, [x19, #32]
 14c:	b	2c <init_debug+0x1c>
 150:	ldr	x0, [x19, #40]
 154:	b	f8 <init_debug+0xe8>
 158:	orr	w2, w0, #0x1
 15c:	mov	w1, #0x2                   	// #2
 160:	mov	w0, w20
 164:	bl	0 <fcntl>
 168:	tbz	w0, #31, 2c <init_debug+0x1c>
 16c:	b	114 <init_debug+0x104>
 170:	adrp	x1, 0 <et_list_unlock.part.0>
 174:	adrp	x0, 0 <et_list_unlock.part.0>
 178:	add	x1, x1, #0x0
 17c:	add	x0, x0, #0x0
 180:	bl	0 <fopen>
 184:	str	x0, [x19, #40]
 188:	cbnz	x0, fc <init_debug+0xec>
 18c:	mov	w0, #0x8000                	// #32768
 190:	str	w0, [x19, #32]
 194:	b	6c <init_debug+0x5c>

0000000000000198 <et_list_lock>:
 198:	stp	x29, x30, [sp, #-32]!
 19c:	mov	x29, sp
 1a0:	str	x19, [sp, #16]
 1a4:	adrp	x19, 0 <et_list_unlock.part.0>
 1a8:	add	x19, x19, #0x0
 1ac:	ldr	w0, [x19, #48]
 1b0:	cbz	w0, 1c4 <et_list_lock+0x2c>
 1b4:	mov	x0, x19
 1b8:	ldr	x19, [sp, #16]
 1bc:	ldp	x29, x30, [sp], #32
 1c0:	b	0 <sem_wait>
 1c4:	bl	0 <et_list_unlock.part.0>
 1c8:	mov	x0, x19
 1cc:	ldr	x19, [sp, #16]
 1d0:	ldp	x29, x30, [sp], #32
 1d4:	b	0 <sem_wait>

00000000000001d8 <et_list_unlock>:
 1d8:	adrp	x0, 0 <et_list_unlock.part.0>
 1dc:	ldr	w0, [x0]
 1e0:	cbnz	w0, 1ec <et_list_unlock+0x14>
 1e4:	mov	w0, #0x0                   	// #0
 1e8:	ret
 1ec:	b	0 <et_list_unlock.part.0>

00000000000001f0 <set_com_err_gettext>:
 1f0:	adrp	x1, 0 <et_list_unlock.part.0>
 1f4:	add	x1, x1, #0x0
 1f8:	mov	x2, x0
 1fc:	ldr	x0, [x1, #56]
 200:	str	x2, [x1, #56]
 204:	ret

0000000000000208 <error_message>:
 208:	stp	x29, x30, [sp, #-48]!
 20c:	mov	x29, sp
 210:	stp	x19, x20, [sp, #16]
 214:	and	w20, w0, #0xff
 218:	ands	x19, x0, #0xffffffffffffff00
 21c:	stp	x21, x22, [sp, #32]
 220:	b.ne	248 <error_message+0x40>  // b.any
 224:	mov	w0, w20
 228:	bl	0 <strerror>
 22c:	mov	x19, x0
 230:	cbz	x0, 3d4 <error_message+0x1cc>
 234:	mov	x0, x19
 238:	ldp	x19, x20, [sp, #16]
 23c:	ldp	x21, x22, [sp, #32]
 240:	ldp	x29, x30, [sp], #48
 244:	ret
 248:	adrp	x21, 0 <et_list_unlock.part.0>
 24c:	add	x21, x21, #0x0
 250:	and	x22, x0, #0xff
 254:	bl	198 <et_list_lock>
 258:	ldr	x0, [x21, #64]
 25c:	cbnz	x0, 378 <error_message+0x170>
 260:	ldr	w3, [x21, #48]
 264:	ldr	x0, [x21, #72]
 268:	cbnz	x0, 278 <error_message+0x70>
 26c:	b	298 <error_message+0x90>
 270:	ldr	x0, [x0]
 274:	cbz	x0, 298 <error_message+0x90>
 278:	ldr	x2, [x0, #8]
 27c:	ldr	x1, [x2, #8]
 280:	eor	x1, x19, x1
 284:	tst	x1, #0xffffff
 288:	b.ne	270 <error_message+0x68>  // b.any
 28c:	ldr	w0, [x2, #16]
 290:	cmp	w0, w20
 294:	b.gt	39c <error_message+0x194>
 298:	cbnz	w3, 3fc <error_message+0x1f4>
 29c:	mrs	x21, tpidr_el0
 2a0:	adrp	x1, 0 <et_list_unlock.part.0>
 2a4:	add	x1, x1, #0x0
 2a8:	add	x22, x21, #0x0, lsl #12
 2ac:	add	x22, x22, #0x0
 2b0:	mov	x0, x19
 2b4:	ldr	x2, [x1]
 2b8:	str	x2, [x22]
 2bc:	ldur	x1, [x1, #6]
 2c0:	stur	x1, [x22, #6]
 2c4:	bl	0 <error_table_name>
 2c8:	mov	x19, x0
 2cc:	mov	x0, x22
 2d0:	bl	0 <strlen>
 2d4:	mov	x1, x19
 2d8:	add	x0, x22, x0
 2dc:	bl	0 <stpcpy>
 2e0:	mov	w1, #0x20                  	// #32
 2e4:	strh	w1, [x0]
 2e8:	add	x1, x21, #0x0, lsl #12
 2ec:	add	x1, x1, #0x0
 2f0:	ldrb	w0, [x1]
 2f4:	cbz	w0, 300 <error_message+0xf8>
 2f8:	ldrb	w2, [x1, #1]!
 2fc:	cbnz	w2, 2f8 <error_message+0xf0>
 300:	cmp	w20, #0x63
 304:	b.le	3c8 <error_message+0x1c0>
 308:	mov	w0, #0x851f                	// #34079
 30c:	mov	w2, #0x64                  	// #100
 310:	movk	w0, #0x51eb, lsl #16
 314:	umull	x0, w20, w0
 318:	lsr	x0, x0, #37
 31c:	add	w3, w0, #0x30
 320:	strb	w3, [x1], #1
 324:	msub	w20, w0, w2, w20
 328:	mov	w0, #0xcccd                	// #52429
 32c:	movk	w0, #0xcccc, lsl #16
 330:	umull	x0, w20, w0
 334:	lsr	x0, x0, #35
 338:	add	w2, w0, #0x30
 33c:	strb	w2, [x1], #1
 340:	add	w0, w0, w0, lsl #2
 344:	sub	w20, w20, w0, lsl #1
 348:	add	w20, w20, #0x30
 34c:	strb	w20, [x1]
 350:	strb	wzr, [x1, #1]
 354:	add	x19, x21, #0x0, lsl #12
 358:	add	x19, x19, #0x0
 35c:	mov	x0, x19
 360:	ldp	x19, x20, [sp, #16]
 364:	ldp	x21, x22, [sp, #32]
 368:	ldp	x29, x30, [sp], #48
 36c:	ret
 370:	ldr	x0, [x0]
 374:	cbz	x0, 260 <error_message+0x58>
 378:	ldr	x2, [x0, #8]
 37c:	ldr	x1, [x2, #8]
 380:	eor	x1, x19, x1
 384:	tst	x1, #0xffffff
 388:	b.ne	370 <error_message+0x168>  // b.any
 38c:	ldr	w0, [x2, #16]
 390:	ldr	w3, [x21, #48]
 394:	cmp	w0, w20
 398:	b.le	264 <error_message+0x5c>
 39c:	ldr	x0, [x2]
 3a0:	ldr	x19, [x0, x22, lsl #3]
 3a4:	cbnz	w3, 404 <error_message+0x1fc>
 3a8:	ldr	x1, [x21, #56]
 3ac:	cbz	x1, 234 <error_message+0x2c>
 3b0:	mov	x0, x19
 3b4:	mov	x16, x1
 3b8:	ldp	x19, x20, [sp, #16]
 3bc:	ldp	x21, x22, [sp, #32]
 3c0:	ldp	x29, x30, [sp], #48
 3c4:	br	x16
 3c8:	cmp	w20, #0x9
 3cc:	b.le	348 <error_message+0x140>
 3d0:	b	328 <error_message+0x120>
 3d4:	mrs	x21, tpidr_el0
 3d8:	adrp	x0, 0 <et_list_unlock.part.0>
 3dc:	add	x0, x0, #0x0
 3e0:	add	x1, x21, #0x0, lsl #12
 3e4:	add	x1, x1, #0x0
 3e8:	ldr	x2, [x0]
 3ec:	str	x2, [x1]
 3f0:	ldur	x0, [x0, #6]
 3f4:	stur	x0, [x1, #6]
 3f8:	b	2e8 <error_message+0xe0>
 3fc:	bl	0 <et_list_unlock.part.0>
 400:	b	29c <error_message+0x94>
 404:	bl	0 <et_list_unlock.part.0>
 408:	b	3a8 <error_message+0x1a0>
 40c:	nop

0000000000000410 <add_error_table>:
 410:	stp	x29, x30, [sp, #-48]!
 414:	mov	x29, sp
 418:	stp	x19, x20, [sp, #16]
 41c:	str	x21, [sp, #32]
 420:	mov	x21, x0
 424:	mov	x0, #0x10                  	// #16
 428:	bl	0 <malloc>
 42c:	cbz	x0, 4e8 <add_error_table+0xd8>
 430:	mov	x19, x0
 434:	bl	198 <et_list_lock>
 438:	cbnz	w0, 4c4 <add_error_table+0xb4>
 43c:	adrp	x20, 0 <et_list_unlock.part.0>
 440:	add	x20, x20, #0x0
 444:	ldr	x0, [x20, #72]
 448:	stp	x0, x21, [x19]
 44c:	str	x19, [x20, #72]
 450:	bl	10 <init_debug>
 454:	ldr	w0, [x20, #32]
 458:	tbnz	w0, #0, 47c <add_error_table+0x6c>
 45c:	ldr	w0, [x20, #48]
 460:	mov	x19, #0x0                   	// #0
 464:	cbnz	w0, 4ac <add_error_table+0x9c>
 468:	mov	x0, x19
 46c:	ldp	x19, x20, [sp, #16]
 470:	ldr	x21, [sp, #32]
 474:	ldp	x29, x30, [sp], #48
 478:	ret
 47c:	ldr	x0, [x21, #8]
 480:	ldr	x19, [x20, #40]
 484:	bl	0 <error_table_name>
 488:	mov	x2, x0
 48c:	mov	x3, x21
 490:	mov	x0, x19
 494:	adrp	x1, 0 <et_list_unlock.part.0>
 498:	add	x1, x1, #0x0
 49c:	bl	0 <fprintf>
 4a0:	mov	x19, #0x0                   	// #0
 4a4:	ldr	w0, [x20, #48]
 4a8:	cbz	w0, 468 <add_error_table+0x58>
 4ac:	bl	0 <et_list_unlock.part.0>
 4b0:	mov	x0, x19
 4b4:	ldp	x19, x20, [sp, #16]
 4b8:	ldr	x21, [sp, #32]
 4bc:	ldp	x29, x30, [sp], #48
 4c0:	ret
 4c4:	mov	x0, x19
 4c8:	bl	0 <free>
 4cc:	bl	0 <__errno_location>
 4d0:	ldrsw	x19, [x0]
 4d4:	ldr	x21, [sp, #32]
 4d8:	mov	x0, x19
 4dc:	ldp	x19, x20, [sp, #16]
 4e0:	ldp	x29, x30, [sp], #48
 4e4:	ret
 4e8:	mov	x19, #0xc                   	// #12
 4ec:	b	468 <add_error_table+0x58>

00000000000004f0 <remove_error_table>:
 4f0:	stp	x29, x30, [sp, #-48]!
 4f4:	mov	x29, sp
 4f8:	stp	x19, x20, [sp, #16]
 4fc:	str	x21, [sp, #32]
 500:	mov	x21, x0
 504:	bl	198 <et_list_lock>
 508:	cbnz	w0, 594 <remove_error_table+0xa4>
 50c:	adrp	x20, 0 <et_list_unlock.part.0>
 510:	add	x20, x20, #0x0
 514:	ldr	x19, [x20, #72]
 518:	bl	10 <init_debug>
 51c:	cbz	x19, 584 <remove_error_table+0x94>
 520:	mov	x3, #0x0                   	// #0
 524:	ldr	x4, [x21, #8]
 528:	b	538 <remove_error_table+0x48>
 52c:	mov	x3, x19
 530:	mov	x19, x1
 534:	cbz	x1, 584 <remove_error_table+0x94>
 538:	ldp	x1, x2, [x19]
 53c:	ldr	x2, [x2, #8]
 540:	cmp	x2, x4
 544:	b.ne	52c <remove_error_table+0x3c>  // b.any
 548:	cbz	x3, 608 <remove_error_table+0x118>
 54c:	str	x1, [x3]
 550:	mov	x0, x19
 554:	bl	0 <free>
 558:	ldr	w0, [x20, #32]
 55c:	tbnz	w0, #0, 5e0 <remove_error_table+0xf0>
 560:	ldr	w0, [x20, #48]
 564:	mov	x19, #0x0                   	// #0
 568:	cbz	w0, 598 <remove_error_table+0xa8>
 56c:	bl	0 <et_list_unlock.part.0>
 570:	mov	x0, x19
 574:	ldp	x19, x20, [sp, #16]
 578:	ldr	x21, [sp, #32]
 57c:	ldp	x29, x30, [sp], #48
 580:	ret
 584:	ldr	w0, [x20, #32]
 588:	tbnz	w0, #0, 5b8 <remove_error_table+0xc8>
 58c:	ldr	w0, [x20, #48]
 590:	cbnz	w0, 5ac <remove_error_table+0xbc>
 594:	mov	x19, #0x2                   	// #2
 598:	mov	x0, x19
 59c:	ldp	x19, x20, [sp, #16]
 5a0:	ldr	x21, [sp, #32]
 5a4:	ldp	x29, x30, [sp], #48
 5a8:	ret
 5ac:	mov	x19, #0x2                   	// #2
 5b0:	bl	0 <et_list_unlock.part.0>
 5b4:	b	570 <remove_error_table+0x80>
 5b8:	ldr	x0, [x21, #8]
 5bc:	ldr	x19, [x20, #40]
 5c0:	bl	0 <error_table_name>
 5c4:	mov	x2, x0
 5c8:	mov	x3, x21
 5cc:	mov	x0, x19
 5d0:	adrp	x1, 0 <et_list_unlock.part.0>
 5d4:	add	x1, x1, #0x0
 5d8:	bl	0 <fprintf>
 5dc:	b	58c <remove_error_table+0x9c>
 5e0:	ldr	x0, [x21, #8]
 5e4:	ldr	x19, [x20, #40]
 5e8:	bl	0 <error_table_name>
 5ec:	mov	x2, x0
 5f0:	mov	x3, x21
 5f4:	mov	x0, x19
 5f8:	adrp	x1, 0 <et_list_unlock.part.0>
 5fc:	add	x1, x1, #0x0
 600:	bl	0 <fprintf>
 604:	b	560 <remove_error_table+0x70>
 608:	str	x1, [x20, #72]
 60c:	b	550 <remove_error_table+0x60>

0000000000000610 <add_to_error_table>:
 610:	ldr	x0, [x0, #8]
 614:	b	410 <add_error_table>

Disassembly of section .text.startup:

0000000000000000 <setup_et_lock>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	w2, #0x1                   	// #1
   8:	mov	w1, #0x0                   	// #0
   c:	mov	x29, sp
  10:	str	x19, [sp, #16]
  14:	adrp	x19, 0 <setup_et_lock>
  18:	add	x19, x19, #0x0
  1c:	mov	x0, x19
  20:	bl	0 <sem_init>
  24:	mov	w0, #0x1                   	// #1
  28:	str	w0, [x19, #48]
  2c:	ldr	x19, [sp, #16]
  30:	ldp	x29, x30, [sp], #32
  34:	ret

Disassembly of section .text.exit:

0000000000000000 <fini_et_lock>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	adrp	x19, 0 <fini_et_lock>
  10:	add	x19, x19, #0x0
  14:	mov	x0, x19
  18:	bl	0 <sem_destroy>
  1c:	str	wzr, [x19, #48]
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret

et_name.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <error_table_name>:
   0:	mov	x5, x0
   4:	adrp	x0, 0 <error_table_name>
   8:	add	x0, x0, #0x0
   c:	adrp	x6, 0 <error_table_name>
  10:	lsr	w5, w5, #8
  14:	mov	x4, x0
  18:	add	x6, x6, #0x0
  1c:	mov	w2, #0x12                  	// #18
  20:	asr	x1, x5, x2
  24:	ands	w1, w1, #0x3f
  28:	mov	x3, x4
  2c:	sub	w2, w2, #0x6
  30:	sub	w1, w1, #0x1
  34:	b.eq	44 <error_table_name+0x44>  // b.none
  38:	ldrb	w1, [x6, w1, sxtw]
  3c:	strb	w1, [x3], #1
  40:	mov	x4, x3
  44:	cmn	w2, #0x6
  48:	b.ne	20 <error_table_name+0x20>  // b.any
  4c:	strb	wzr, [x4]
  50:	ret

init_et.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_error_table>:
   0:	cmp	w2, #0x0
   4:	ccmp	x0, #0x0, #0x4, ne  // ne = any
   8:	ccmp	x1, #0x0, #0x4, ne  // ne = any
   c:	b.ne	18 <init_error_table+0x18>  // b.any
  10:	mov	w0, #0x0                   	// #0
  14:	ret
  18:	stp	x29, x30, [sp, #-48]!
  1c:	mov	x29, sp
  20:	stp	x19, x20, [sp, #16]
  24:	mov	w19, w2
  28:	mov	x20, x1
  2c:	str	x21, [sp, #32]
  30:	mov	x21, x0
  34:	mov	x0, #0x28                  	// #40
  38:	bl	0 <malloc>
  3c:	mov	x3, x0
  40:	cbz	x0, 78 <init_error_table+0x78>
  44:	adrp	x1, 0 <_et_dynamic_list>
  48:	add	x2, x0, #0x10
  4c:	stp	x2, x21, [x3, #8]
  50:	mov	w0, #0x0                   	// #0
  54:	ldr	x2, [x1]
  58:	str	x3, [x1]
  5c:	str	x2, [x3]
  60:	str	x20, [x3, #24]
  64:	str	w19, [x3, #32]
  68:	ldp	x19, x20, [sp, #16]
  6c:	ldr	x21, [sp, #32]
  70:	ldp	x29, x30, [sp], #48
  74:	ret
  78:	mov	w0, #0xc                   	// #12
  7c:	b	68 <init_error_table+0x68>

com_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <default_com_err_proc>:
   0:	stp	x29, x30, [sp, #-160]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x19, 0 <stderr>
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x0
  1c:	ldr	x0, [x19]
  20:	stp	x23, x24, [sp, #48]
  24:	mov	x23, x1
  28:	mov	x24, x3
  2c:	bl	0 <fileno>
  30:	mov	w22, w0
  34:	cbz	x21, 5c <default_com_err_proc+0x5c>
  38:	ldr	x1, [x19]
  3c:	mov	x0, x21
  40:	bl	0 <fputs>
  44:	ldr	x3, [x19]
  48:	adrp	x0, 0 <default_com_err_proc>
  4c:	mov	x2, #0x2                   	// #2
  50:	add	x0, x0, #0x0
  54:	mov	x1, #0x1                   	// #1
  58:	bl	0 <fwrite>
  5c:	cbnz	x23, b8 <default_com_err_proc+0xb8>
  60:	cbz	x20, 84 <default_com_err_proc+0x84>
  64:	ldp	x6, x7, [x24]
  68:	mov	x1, x20
  6c:	ldp	x4, x5, [x24, #16]
  70:	add	x2, sp, #0x40
  74:	ldr	x0, [x19]
  78:	stp	x6, x7, [sp, #64]
  7c:	stp	x4, x5, [sp, #80]
  80:	bl	0 <vfprintf>
  84:	mov	w0, w22
  88:	bl	0 <isatty>
  8c:	cbnz	w0, d8 <default_com_err_proc+0xd8>
  90:	ldr	x1, [x19]
  94:	mov	w0, #0xa                   	// #10
  98:	bl	0 <fputc>
  9c:	ldr	x0, [x19]
  a0:	bl	0 <fflush>
  a4:	ldp	x19, x20, [sp, #16]
  a8:	ldp	x21, x22, [sp, #32]
  ac:	ldp	x23, x24, [sp, #48]
  b0:	ldp	x29, x30, [sp], #160
  b4:	ret
  b8:	mov	x0, x23
  bc:	bl	0 <error_message>
  c0:	ldr	x1, [x19]
  c4:	bl	0 <fputs>
  c8:	ldr	x1, [x19]
  cc:	mov	w0, #0x20                  	// #32
  d0:	bl	0 <fputc>
  d4:	b	60 <default_com_err_proc+0x60>
  d8:	mov	w0, w22
  dc:	add	x1, sp, #0x60
  e0:	bl	0 <tcgetattr>
  e4:	cbnz	w0, fc <default_com_err_proc+0xfc>
  e8:	ldr	w0, [sp, #100]
  ec:	mov	w1, #0x5                   	// #5
  f0:	and	w0, w0, w1
  f4:	cmp	w0, w1
  f8:	b.eq	90 <default_com_err_proc+0x90>  // b.none
  fc:	ldr	x1, [x19]
 100:	mov	w0, #0xd                   	// #13
 104:	bl	0 <fputc>
 108:	b	90 <default_com_err_proc+0x90>
 10c:	nop

0000000000000110 <com_err_va>:
 110:	mov	x4, x3
 114:	stp	x29, x30, [sp, #-48]!
 118:	adrp	x5, 0 <default_com_err_proc>
 11c:	mov	x29, sp
 120:	ldp	x6, x7, [x4]
 124:	stp	x6, x7, [sp, #16]
 128:	add	x3, sp, #0x10
 12c:	ldp	x6, x7, [x4, #16]
 130:	stp	x6, x7, [sp, #32]
 134:	ldr	x5, [x5]
 138:	blr	x5
 13c:	ldp	x29, x30, [sp], #48
 140:	ret
 144:	nop

0000000000000148 <com_err>:
 148:	stp	x29, x30, [sp, #-288]!
 14c:	adrp	x8, 0 <default_com_err_proc>
 150:	mov	x29, sp
 154:	ldr	x9, [x8]
 158:	str	q0, [sp, #112]
 15c:	str	q1, [sp, #128]
 160:	str	q2, [sp, #144]
 164:	str	q3, [sp, #160]
 168:	str	q4, [sp, #176]
 16c:	str	q5, [sp, #192]
 170:	str	q6, [sp, #208]
 174:	str	q7, [sp, #224]
 178:	stp	x3, x4, [sp, #248]
 17c:	stp	x5, x6, [sp, #264]
 180:	str	x7, [sp, #280]
 184:	cbz	x9, 1d0 <com_err+0x88>
 188:	add	x5, sp, #0xf0
 18c:	add	x6, sp, #0x120
 190:	mov	w4, #0xffffffd8            	// #-40
 194:	mov	w3, #0xffffff80            	// #-128
 198:	stp	x6, x6, [sp, #48]
 19c:	str	x5, [sp, #64]
 1a0:	stp	w4, w3, [sp, #72]
 1a4:	add	x3, sp, #0x10
 1a8:	ldp	x6, x7, [sp, #48]
 1ac:	stp	x6, x7, [sp, #16]
 1b0:	ldp	x4, x5, [sp, #64]
 1b4:	stp	x4, x5, [sp, #32]
 1b8:	ldr	x8, [x8]
 1bc:	stp	x6, x7, [sp, #80]
 1c0:	stp	x4, x5, [sp, #96]
 1c4:	blr	x8
 1c8:	ldp	x29, x30, [sp], #288
 1cc:	ret
 1d0:	adrp	x3, 0 <default_com_err_proc>
 1d4:	add	x3, x3, #0x0
 1d8:	str	x3, [x8]
 1dc:	b	188 <com_err+0x40>

00000000000001e0 <set_com_err_hook>:
 1e0:	mov	x1, x0
 1e4:	adrp	x3, 0 <default_com_err_proc>
 1e8:	cmp	x1, #0x0
 1ec:	adrp	x2, 0 <default_com_err_proc>
 1f0:	add	x2, x2, #0x0
 1f4:	ldr	x0, [x3]
 1f8:	csel	x1, x2, x1, eq  // eq = none
 1fc:	str	x1, [x3]
 200:	ret
 204:	nop

0000000000000208 <reset_com_err_hook>:
 208:	adrp	x2, 0 <default_com_err_proc>
 20c:	adrp	x1, 0 <default_com_err_proc>
 210:	add	x1, x1, #0x0
 214:	ldr	x0, [x2]
 218:	str	x1, [x2]
 21c:	ret

com_right.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <com_right>:
   0:	cbz	x0, 30 <com_right+0x30>
   4:	nop
   8:	ldr	x3, [x0, #8]
   c:	ldr	x2, [x3, #8]
  10:	cmp	x2, x1
  14:	b.gt	28 <com_right+0x28>
  18:	ldrsw	x4, [x3, #16]
  1c:	add	x4, x4, x2
  20:	cmp	x4, x1
  24:	b.gt	34 <com_right+0x34>
  28:	ldr	x0, [x0]
  2c:	cbnz	x0, 8 <com_right+0x8>
  30:	ret
  34:	ldr	x0, [x3]
  38:	sub	x1, x1, x2
  3c:	ldr	x0, [x0, x1, lsl #3]
  40:	ret
  44:	nop

0000000000000048 <com_right_r>:
  48:	cbz	x0, c0 <com_right_r+0x78>
  4c:	stp	x29, x30, [sp, #-32]!
  50:	mov	x7, x2
  54:	mov	x29, sp
  58:	str	x19, [sp, #16]
  5c:	mov	x19, x3
  60:	ldr	x5, [x0, #8]
  64:	ldr	x4, [x5, #8]
  68:	cmp	x4, x1
  6c:	b.gt	80 <com_right_r+0x38>
  70:	ldrsw	x6, [x5, #16]
  74:	add	x6, x6, x4
  78:	cmp	x6, x1
  7c:	b.gt	94 <com_right_r+0x4c>
  80:	ldr	x0, [x0]
  84:	cbnz	x0, 60 <com_right_r+0x18>
  88:	ldr	x19, [sp, #16]
  8c:	ldp	x29, x30, [sp], #32
  90:	ret
  94:	ldr	x3, [x5]
  98:	sub	x1, x1, x4
  9c:	mov	x2, x19
  a0:	mov	x0, x7
  a4:	ldr	x1, [x3, x1, lsl #3]
  a8:	bl	0 <strncpy>
  ac:	add	x3, x0, x19
  b0:	sturb	wzr, [x3, #-1]
  b4:	ldr	x19, [sp, #16]
  b8:	ldp	x29, x30, [sp], #32
  bc:	ret
  c0:	ret
  c4:	nop

00000000000000c8 <initialize_error_table_r>:
  c8:	stp	x29, x30, [sp, #-48]!
  cc:	mov	x29, sp
  d0:	ldr	x4, [x0]
  d4:	stp	x19, x20, [sp, #16]
  d8:	mov	x19, x1
  dc:	stp	x21, x22, [sp, #32]
  e0:	mov	x20, x0
  e4:	mov	w21, w2
  e8:	mov	x22, x3
  ec:	cbnz	x4, 100 <initialize_error_table_r+0x38>
  f0:	b	124 <initialize_error_table_r+0x5c>
  f4:	ldr	x0, [x4]
  f8:	cbz	x0, 120 <initialize_error_table_r+0x58>
  fc:	mov	x4, x0
 100:	ldr	x0, [x4, #8]
 104:	ldr	x0, [x0]
 108:	cmp	x0, x19
 10c:	b.ne	f4 <initialize_error_table_r+0x2c>  // b.any
 110:	ldp	x19, x20, [sp, #16]
 114:	ldp	x21, x22, [sp, #32]
 118:	ldp	x29, x30, [sp], #48
 11c:	ret
 120:	mov	x20, x4
 124:	mov	x0, #0x28                  	// #40
 128:	bl	0 <malloc>
 12c:	cbz	x0, 110 <initialize_error_table_r+0x48>
 130:	add	x1, x0, #0x10
 134:	stp	xzr, x1, [x0]
 138:	stp	x19, x22, [x0, #16]
 13c:	str	w21, [x0, #32]
 140:	str	x0, [x20]
 144:	ldp	x19, x20, [sp, #16]
 148:	ldp	x21, x22, [sp, #32]
 14c:	ldp	x29, x30, [sp], #48
 150:	ret
 154:	nop

0000000000000158 <free_error_table>:
 158:	cbz	x0, 18c <free_error_table+0x34>
 15c:	stp	x29, x30, [sp, #-32]!
 160:	mov	x29, sp
 164:	str	x19, [sp, #16]
 168:	mov	x19, x0
 16c:	nop
 170:	mov	x0, x19
 174:	ldr	x19, [x19]
 178:	bl	0 <free>
 17c:	cbnz	x19, 170 <free_error_table+0x18>
 180:	ldr	x19, [sp, #16]
 184:	ldp	x29, x30, [sp], #32
 188:	ret
 18c:	ret
