
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//cldr-plurals_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000401270 <_init>:
  401270:	stp	x29, x30, [sp, #-16]!
  401274:	mov	x29, sp
  401278:	bl	401f10 <call_weak_fn>
  40127c:	ldp	x29, x30, [sp], #16
  401280:	ret

Disassembly of section .plt:

0000000000401290 <.plt>:
  401290:	stp	x16, x30, [sp, #-16]!
  401294:	adrp	x16, 415000 <__FRAME_END__+0xf454>
  401298:	ldr	x17, [x16, #4088]
  40129c:	add	x16, x16, #0xff8
  4012a0:	br	x17
  4012a4:	nop
  4012a8:	nop
  4012ac:	nop

00000000004012b0 <memcpy@plt>:
  4012b0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012b4:	ldr	x17, [x16]
  4012b8:	add	x16, x16, #0x0
  4012bc:	br	x17

00000000004012c0 <strlen@plt>:
  4012c0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012c4:	ldr	x17, [x16, #8]
  4012c8:	add	x16, x16, #0x8
  4012cc:	br	x17

00000000004012d0 <exit@plt>:
  4012d0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012d4:	ldr	x17, [x16, #16]
  4012d8:	add	x16, x16, #0x10
  4012dc:	br	x17

00000000004012e0 <error@plt>:
  4012e0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012e4:	ldr	x17, [x16, #24]
  4012e8:	add	x16, x16, #0x18
  4012ec:	br	x17

00000000004012f0 <set_program_name@plt>:
  4012f0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4012f4:	ldr	x17, [x16, #32]
  4012f8:	add	x16, x16, #0x20
  4012fc:	br	x17

0000000000401300 <xmlHasProp@plt>:
  401300:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401304:	ldr	x17, [x16, #40]
  401308:	add	x16, x16, #0x28
  40130c:	br	x17

0000000000401310 <sprintf@plt>:
  401310:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401314:	ldr	x17, [x16, #48]
  401318:	add	x16, x16, #0x30
  40131c:	br	x17

0000000000401320 <xmlFreeDoc@plt>:
  401320:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401324:	ldr	x17, [x16, #56]
  401328:	add	x16, x16, #0x38
  40132c:	br	x17

0000000000401330 <__cxa_atexit@plt>:
  401330:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401334:	ldr	x17, [x16, #64]
  401338:	add	x16, x16, #0x40
  40133c:	br	x17

0000000000401340 <fputc@plt>:
  401340:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401344:	ldr	x17, [x16, #72]
  401348:	add	x16, x16, #0x48
  40134c:	br	x17

0000000000401350 <fileno@plt>:
  401350:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401354:	ldr	x17, [x16, #80]
  401358:	add	x16, x16, #0x50
  40135c:	br	x17

0000000000401360 <fclose@plt>:
  401360:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401364:	ldr	x17, [x16, #88]
  401368:	add	x16, x16, #0x58
  40136c:	br	x17

0000000000401370 <fopen@plt>:
  401370:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401374:	ldr	x17, [x16, #96]
  401378:	add	x16, x16, #0x60
  40137c:	br	x17

0000000000401380 <malloc@plt>:
  401380:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401384:	ldr	x17, [x16, #104]
  401388:	add	x16, x16, #0x68
  40138c:	br	x17

0000000000401390 <xrealloc@plt>:
  401390:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401394:	ldr	x17, [x16, #112]
  401398:	add	x16, x16, #0x70
  40139c:	br	x17

00000000004013a0 <xmlGetProp@plt>:
  4013a0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013a4:	ldr	x17, [x16, #120]
  4013a8:	add	x16, x16, #0x78
  4013ac:	br	x17

00000000004013b0 <xmlCheckVersion@plt>:
  4013b0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013b4:	ldr	x17, [x16, #128]
  4013b8:	add	x16, x16, #0x80
  4013bc:	br	x17

00000000004013c0 <strncmp@plt>:
  4013c0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013c4:	ldr	x17, [x16, #136]
  4013c8:	add	x16, x16, #0x88
  4013cc:	br	x17

00000000004013d0 <bindtextdomain@plt>:
  4013d0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013d4:	ldr	x17, [x16, #144]
  4013d8:	add	x16, x16, #0x90
  4013dc:	br	x17

00000000004013e0 <__libc_start_main@plt>:
  4013e0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013e4:	ldr	x17, [x16, #152]
  4013e8:	add	x16, x16, #0x98
  4013ec:	br	x17

00000000004013f0 <memset@plt>:
  4013f0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4013f4:	ldr	x17, [x16, #160]
  4013f8:	add	x16, x16, #0xa0
  4013fc:	br	x17

0000000000401400 <xmalloc@plt>:
  401400:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401404:	ldr	x17, [x16, #168]
  401408:	add	x16, x16, #0xa8
  40140c:	br	x17

0000000000401410 <xstrdup@plt>:
  401410:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401414:	ldr	x17, [x16, #176]
  401418:	add	x16, x16, #0xb0
  40141c:	br	x17

0000000000401420 <xmlStrlen@plt>:
  401420:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401424:	ldr	x17, [x16, #184]
  401428:	add	x16, x16, #0xb8
  40142c:	br	x17

0000000000401430 <close_stdout@plt>:
  401430:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401434:	ldr	x17, [x16, #192]
  401438:	add	x16, x16, #0xc0
  40143c:	br	x17

0000000000401440 <xmlNodeGetContent@plt>:
  401440:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401444:	ldr	x17, [x16, #200]
  401448:	add	x16, x16, #0xc8
  40144c:	br	x17

0000000000401450 <xmlReadFd@plt>:
  401450:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401454:	ldr	x17, [x16, #208]
  401458:	add	x16, x16, #0xd0
  40145c:	br	x17

0000000000401460 <strrchr@plt>:
  401460:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401464:	ldr	x17, [x16, #216]
  401468:	add	x16, x16, #0xd8
  40146c:	br	x17

0000000000401470 <__gmon_start__@plt>:
  401470:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401474:	ldr	x17, [x16, #224]
  401478:	add	x16, x16, #0xe0
  40147c:	br	x17

0000000000401480 <abort@plt>:
  401480:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401484:	ldr	x17, [x16, #232]
  401488:	add	x16, x16, #0xe8
  40148c:	br	x17

0000000000401490 <u8_mbtouc_aux@plt>:
  401490:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401494:	ldr	x17, [x16, #240]
  401498:	add	x16, x16, #0xf0
  40149c:	br	x17

00000000004014a0 <puts@plt>:
  4014a0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014a4:	ldr	x17, [x16, #248]
  4014a8:	add	x16, x16, #0xf8
  4014ac:	br	x17

00000000004014b0 <textdomain@plt>:
  4014b0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014b4:	ldr	x17, [x16, #256]
  4014b8:	add	x16, x16, #0x100
  4014bc:	br	x17

00000000004014c0 <getopt_long@plt>:
  4014c0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014c4:	ldr	x17, [x16, #264]
  4014c8:	add	x16, x16, #0x108
  4014cc:	br	x17

00000000004014d0 <strcmp@plt>:
  4014d0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014d4:	ldr	x17, [x16, #272]
  4014d8:	add	x16, x16, #0x110
  4014dc:	br	x17

00000000004014e0 <basename@plt>:
  4014e0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014e4:	ldr	x17, [x16, #280]
  4014e8:	add	x16, x16, #0x118
  4014ec:	br	x17

00000000004014f0 <proper_name@plt>:
  4014f0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4014f4:	ldr	x17, [x16, #288]
  4014f8:	add	x16, x16, #0x120
  4014fc:	br	x17

0000000000401500 <free@plt>:
  401500:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401504:	ldr	x17, [x16, #296]
  401508:	add	x16, x16, #0x128
  40150c:	br	x17

0000000000401510 <fwrite@plt>:
  401510:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401514:	ldr	x17, [x16, #304]
  401518:	add	x16, x16, #0x130
  40151c:	br	x17

0000000000401520 <xmlGetLineNo@plt>:
  401520:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401524:	ldr	x17, [x16, #312]
  401528:	add	x16, x16, #0x138
  40152c:	br	x17

0000000000401530 <dcgettext@plt>:
  401530:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401534:	ldr	x17, [x16, #320]
  401538:	add	x16, x16, #0x140
  40153c:	br	x17

0000000000401540 <xmlStrncmp@plt>:
  401540:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401544:	ldr	x17, [x16, #328]
  401548:	add	x16, x16, #0x148
  40154c:	br	x17

0000000000401550 <printf@plt>:
  401550:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401554:	ldr	x17, [x16, #336]
  401558:	add	x16, x16, #0x150
  40155c:	br	x17

0000000000401560 <xmlStrEqual@plt>:
  401560:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401564:	ldr	x17, [x16, #344]
  401568:	add	x16, x16, #0x158
  40156c:	br	x17

0000000000401570 <xmlDocGetRootElement@plt>:
  401570:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401574:	ldr	x17, [x16, #352]
  401578:	add	x16, x16, #0x160
  40157c:	br	x17

0000000000401580 <putchar@plt>:
  401580:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401584:	ldr	x17, [x16, #360]
  401588:	add	x16, x16, #0x168
  40158c:	br	x17

0000000000401590 <__getdelim@plt>:
  401590:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  401594:	ldr	x17, [x16, #368]
  401598:	add	x16, x16, #0x170
  40159c:	br	x17

00000000004015a0 <error_at_line@plt>:
  4015a0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4015a4:	ldr	x17, [x16, #376]
  4015a8:	add	x16, x16, #0x178
  4015ac:	br	x17

00000000004015b0 <fprintf@plt>:
  4015b0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4015b4:	ldr	x17, [x16, #384]
  4015b8:	add	x16, x16, #0x180
  4015bc:	br	x17

00000000004015c0 <setlocale@plt>:
  4015c0:	adrp	x16, 416000 <memcpy@GLIBC_2.17>
  4015c4:	ldr	x17, [x16, #392]
  4015c8:	add	x16, x16, #0x188
  4015cc:	br	x17

Disassembly of section .text:

00000000004015d0 <main>:
  4015d0:	stp	x29, x30, [sp, #-192]!
  4015d4:	mov	x29, sp
  4015d8:	stp	x21, x22, [sp, #32]
  4015dc:	mov	w21, w0
  4015e0:	adrp	x22, 404000 <cldr_plural_rule_list_print+0x1b0>
  4015e4:	ldr	x0, [x1]
  4015e8:	stp	x19, x20, [sp, #16]
  4015ec:	mov	x20, x1
  4015f0:	stp	x23, x24, [sp, #48]
  4015f4:	add	x22, x22, #0xf10
  4015f8:	mov	w23, #0x0                   	// #0
  4015fc:	stp	x25, x26, [sp, #64]
  401600:	adrp	x25, 404000 <cldr_plural_rule_list_print+0x1b0>
  401604:	add	x25, x25, #0xf28
  401608:	stp	x27, x28, [sp, #80]
  40160c:	bl	4012f0 <set_program_name@plt>
  401610:	adrp	x1, 405000 <yystos+0x220>
  401614:	mov	w0, #0x6                   	// #6
  401618:	add	x1, x1, #0xe0
  40161c:	bl	4015c0 <setlocale@plt>
  401620:	adrp	x26, 405000 <yystos+0x220>
  401624:	mov	x1, x22
  401628:	mov	x0, x25
  40162c:	bl	4013d0 <bindtextdomain@plt>
  401630:	add	x26, x26, #0x550
  401634:	mov	x1, x22
  401638:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  40163c:	add	x0, x0, #0xab8
  401640:	bl	4013d0 <bindtextdomain@plt>
  401644:	mov	x0, x25
  401648:	adrp	x22, 404000 <cldr_plural_rule_list_print+0x1b0>
  40164c:	bl	4014b0 <textdomain@plt>
  401650:	add	x22, x22, #0xf60
  401654:	adrp	x0, 401000 <_init-0x270>
  401658:	mov	w24, #0x0                   	// #0
  40165c:	add	x0, x0, #0x430
  401660:	mov	w19, #0x0                   	// #0
  401664:	bl	404a40 <atexit>
  401668:	b	40167c <main+0xac>
  40166c:	cbz	w0, 40167c <main+0xac>
  401670:	cmp	w0, #0x56
  401674:	b.ne	401d5c <main+0x78c>  // b.any
  401678:	mov	w23, #0x1                   	// #1
  40167c:	mov	x3, x26
  401680:	mov	x2, x22
  401684:	mov	x1, x20
  401688:	mov	w0, w21
  40168c:	mov	x4, #0x0                   	// #0
  401690:	bl	4014c0 <getopt_long@plt>
  401694:	cmn	w0, #0x1
  401698:	b.eq	4016d8 <main+0x108>  // b.none
  40169c:	nop
  4016a0:	cmp	w0, #0x63
  4016a4:	b.eq	401784 <main+0x1b4>  // b.none
  4016a8:	b.le	40166c <main+0x9c>
  4016ac:	cmp	w0, #0x68
  4016b0:	b.ne	401d5c <main+0x78c>  // b.any
  4016b4:	mov	x3, x26
  4016b8:	mov	x2, x22
  4016bc:	mov	x1, x20
  4016c0:	mov	w0, w21
  4016c4:	mov	x4, #0x0                   	// #0
  4016c8:	mov	w24, #0x1                   	// #1
  4016cc:	bl	4014c0 <getopt_long@plt>
  4016d0:	cmn	w0, #0x1
  4016d4:	b.ne	4016a0 <main+0xd0>  // b.any
  4016d8:	cbnz	w23, 4017bc <main+0x1ec>
  4016dc:	cbnz	w24, 401dd8 <main+0x808>
  4016e0:	adrp	x22, 416000 <memcpy@GLIBC_2.17>
  4016e4:	ldr	w0, [x22, #424]
  4016e8:	add	w1, w0, #0x2
  4016ec:	cmp	w1, w21
  4016f0:	b.eq	401858 <main+0x288>  // b.none
  4016f4:	cmp	w0, w21
  4016f8:	b.ne	40178c <main+0x1bc>  // b.any
  4016fc:	adrp	x20, 416000 <memcpy@GLIBC_2.17>
  401700:	adrp	x21, 416000 <memcpy@GLIBC_2.17>
  401704:	add	x20, x20, #0x1b8
  401708:	stp	xzr, xzr, [sp, #176]
  40170c:	b	40173c <main+0x16c>
  401710:	b.eq	401730 <main+0x160>  // b.none
  401714:	add	x2, x0, w1, sxtw
  401718:	ldurb	w2, [x2, #-1]
  40171c:	cmp	w2, #0xa
  401720:	b.ne	401730 <main+0x160>  // b.any
  401724:	sub	w1, w1, #0x1
  401728:	strb	wzr, [x0, w1, sxtw]
  40172c:	ldr	x0, [sp, #176]
  401730:	bl	403df0 <cldr_plural_parse>
  401734:	mov	x19, x0
  401738:	cbnz	x0, 401844 <main+0x274>
  40173c:	ldr	x3, [x20]
  401740:	add	x1, sp, #0xb8
  401744:	add	x0, sp, #0xb0
  401748:	mov	w2, #0xa                   	// #10
  40174c:	bl	401590 <__getdelim@plt>
  401750:	mov	x1, x0
  401754:	cmp	w0, #0x0
  401758:	ldr	x0, [sp, #176]
  40175c:	b.ge	401710 <main+0x140>  // b.tcont
  401760:	bl	401500 <free@plt>
  401764:	mov	w0, #0x0                   	// #0
  401768:	ldp	x19, x20, [sp, #16]
  40176c:	ldp	x21, x22, [sp, #32]
  401770:	ldp	x23, x24, [sp, #48]
  401774:	ldp	x25, x26, [sp, #64]
  401778:	ldp	x27, x28, [sp, #80]
  40177c:	ldp	x29, x30, [sp], #192
  401780:	ret
  401784:	mov	w19, #0x1                   	// #1
  401788:	b	40167c <main+0xac>
  40178c:	mov	w2, #0x5                   	// #5
  401790:	adrp	x1, 405000 <yystos+0x220>
  401794:	mov	x0, #0x0                   	// #0
  401798:	add	x1, x1, #0x4c8
  40179c:	bl	401530 <dcgettext@plt>
  4017a0:	mov	x2, x0
  4017a4:	ldrsw	x3, [x22, #424]
  4017a8:	mov	w1, #0x0                   	// #0
  4017ac:	mov	w0, #0x1                   	// #1
  4017b0:	ldr	x3, [x20, x3, lsl #3]
  4017b4:	bl	4012e0 <error@plt>
  4017b8:	b	401764 <main+0x194>
  4017bc:	adrp	x0, 416000 <memcpy@GLIBC_2.17>
  4017c0:	ldr	x0, [x0, #448]
  4017c4:	bl	4014e0 <basename@plt>
  4017c8:	mov	x1, x0
  4017cc:	adrp	x3, 404000 <cldr_plural_rule_list_print+0x1b0>
  4017d0:	add	x3, x3, #0xf68
  4017d4:	mov	x2, x25
  4017d8:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  4017dc:	add	x0, x0, #0xf70
  4017e0:	bl	401550 <printf@plt>
  4017e4:	mov	w2, #0x5                   	// #5
  4017e8:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  4017ec:	mov	x0, #0x0                   	// #0
  4017f0:	add	x1, x1, #0xf80
  4017f4:	bl	401530 <dcgettext@plt>
  4017f8:	adrp	x2, 405000 <yystos+0x220>
  4017fc:	adrp	x1, 405000 <yystos+0x220>
  401800:	add	x2, x2, #0x60
  401804:	add	x1, x1, #0x88
  401808:	bl	401550 <printf@plt>
  40180c:	mov	w2, #0x5                   	// #5
  401810:	adrp	x1, 405000 <yystos+0x220>
  401814:	mov	x0, #0x0                   	// #0
  401818:	add	x1, x1, #0x98
  40181c:	bl	401530 <dcgettext@plt>
  401820:	mov	x19, x0
  401824:	adrp	x1, 405000 <yystos+0x220>
  401828:	add	x0, x1, #0xa8
  40182c:	bl	4014f0 <proper_name@plt>
  401830:	mov	x1, x0
  401834:	mov	x0, x19
  401838:	bl	401550 <printf@plt>
  40183c:	mov	w0, #0x0                   	// #0
  401840:	bl	4012d0 <exit@plt>
  401844:	ldr	x1, [x21, #432]
  401848:	bl	403e50 <cldr_plural_rule_list_print>
  40184c:	mov	x0, x19
  401850:	bl	403d88 <cldr_plural_rule_list_free>
  401854:	b	40173c <main+0x16c>
  401858:	sbfiz	x1, x0, #3, #32
  40185c:	mov	w0, #0x51ad                	// #20909
  401860:	add	x2, x20, x1
  401864:	ldr	x24, [x20, x1]
  401868:	ldr	x26, [x2, #8]
  40186c:	bl	4013b0 <xmlCheckVersion@plt>
  401870:	adrp	x1, 405000 <yystos+0x220>
  401874:	add	x1, x1, #0x3c0
  401878:	mov	x0, x26
  40187c:	bl	401370 <fopen@plt>
  401880:	mov	x20, x0
  401884:	cbz	x0, 401cfc <main+0x72c>
  401888:	mov	x0, x20
  40188c:	bl	401350 <fileno@plt>
  401890:	mov	x1, x26
  401894:	mov	w3, #0x940                 	// #2368
  401898:	mov	x2, #0x0                   	// #0
  40189c:	bl	401450 <xmlReadFd@plt>
  4018a0:	mov	x21, x0
  4018a4:	cbz	x0, 401cd4 <main+0x704>
  4018a8:	mov	x0, x21
  4018ac:	bl	401570 <xmlDocGetRootElement@plt>
  4018b0:	mov	x22, x0
  4018b4:	cbz	x0, 401c64 <main+0x694>
  4018b8:	ldr	x0, [x0, #16]
  4018bc:	adrp	x25, 405000 <yystos+0x220>
  4018c0:	add	x25, x25, #0x420
  4018c4:	mov	x1, x25
  4018c8:	bl	401560 <xmlStrEqual@plt>
  4018cc:	cbz	w0, 401c6c <main+0x69c>
  4018d0:	ldr	x23, [x22, #24]
  4018d4:	adrp	x22, 405000 <yystos+0x220>
  4018d8:	add	x22, x22, #0x438
  4018dc:	cbnz	x23, 4018ec <main+0x31c>
  4018e0:	b	401b88 <main+0x5b8>
  4018e4:	ldr	x23, [x23, #48]
  4018e8:	cbz	x23, 401b88 <main+0x5b8>
  4018ec:	ldr	w0, [x23, #8]
  4018f0:	cmp	w0, #0x1
  4018f4:	b.ne	4018e4 <main+0x314>  // b.any
  4018f8:	ldr	x0, [x23, #16]
  4018fc:	mov	x1, x22
  401900:	bl	401560 <xmlStrEqual@plt>
  401904:	cbz	w0, 4018e4 <main+0x314>
  401908:	mov	x0, x24
  40190c:	bl	4012c0 <strlen@plt>
  401910:	ldr	x22, [x23, #24]
  401914:	str	x0, [sp, #104]
  401918:	cbz	x22, 401bb4 <main+0x5e4>
  40191c:	adrp	x25, 405000 <yystos+0x220>
  401920:	adrp	x27, 405000 <yystos+0x220>
  401924:	add	x25, x25, #0x440
  401928:	add	x0, x27, #0x488
  40192c:	mov	x23, #0x0                   	// #0
  401930:	stp	x0, xzr, [sp, #112]
  401934:	str	xzr, [sp, #144]
  401938:	b	401944 <main+0x374>
  40193c:	ldr	x22, [x22, #48]
  401940:	cbz	x22, 401b48 <main+0x578>
  401944:	ldr	w0, [x22, #8]
  401948:	cmp	w0, #0x1
  40194c:	b.ne	40193c <main+0x36c>  // b.any
  401950:	ldr	x0, [x22, #16]
  401954:	mov	x1, x25
  401958:	bl	401560 <xmlStrEqual@plt>
  40195c:	cbz	w0, 40193c <main+0x36c>
  401960:	adrp	x28, 405000 <yystos+0x220>
  401964:	add	x28, x28, #0x450
  401968:	mov	x1, x28
  40196c:	mov	x0, x22
  401970:	bl	401300 <xmlHasProp@plt>
  401974:	cbz	x0, 401c1c <main+0x64c>
  401978:	mov	x1, x28
  40197c:	mov	x0, x22
  401980:	bl	4013a0 <xmlGetProp@plt>
  401984:	mov	x27, x0
  401988:	mov	x28, x0
  40198c:	ldrb	w0, [x28]
  401990:	cbz	w0, 401d24 <main+0x754>
  401994:	ldrb	w0, [x28]
  401998:	cmp	w0, #0xd
  40199c:	b.hi	4019f8 <main+0x428>  // b.pmore
  4019a0:	cmp	w0, #0x8
  4019a4:	b.hi	401a00 <main+0x430>  // b.pmore
  4019a8:	ldr	w2, [sp, #104]
  4019ac:	mov	x1, x24
  4019b0:	mov	x0, x28
  4019b4:	bl	401540 <xmlStrncmp@plt>
  4019b8:	cbnz	w0, 4019d8 <main+0x408>
  4019bc:	ldr	x0, [sp, #104]
  4019c0:	ldrb	w0, [x28, x0]
  4019c4:	cbz	w0, 401a20 <main+0x450>
  4019c8:	cmp	w0, #0xd
  4019cc:	b.hi	401a18 <main+0x448>  // b.pmore
  4019d0:	cmp	w0, #0x8
  4019d4:	b.hi	401a20 <main+0x450>  // b.pmore
  4019d8:	ldrb	w0, [x28]
  4019dc:	cbz	w0, 40198c <main+0x3bc>
  4019e0:	cmp	w0, #0xd
  4019e4:	b.hi	401a08 <main+0x438>  // b.pmore
  4019e8:	cmp	w0, #0x8
  4019ec:	b.hi	40198c <main+0x3bc>  // b.pmore
  4019f0:	add	x28, x28, #0x1
  4019f4:	b	4019d8 <main+0x408>
  4019f8:	cmp	w0, #0x20
  4019fc:	b.ne	4019a8 <main+0x3d8>  // b.any
  401a00:	add	x28, x28, #0x1
  401a04:	b	401994 <main+0x3c4>
  401a08:	cmp	w0, #0x20
  401a0c:	b.eq	40198c <main+0x3bc>  // b.none
  401a10:	add	x28, x28, #0x1
  401a14:	b	4019d8 <main+0x408>
  401a18:	cmp	w0, #0x20
  401a1c:	b.ne	4019d8 <main+0x408>  // b.any
  401a20:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  401a24:	add	x2, x1, #0x1c8
  401a28:	str	x2, [sp, #128]
  401a2c:	mov	x0, x27
  401a30:	ldr	x1, [x1, #456]
  401a34:	blr	x1
  401a38:	ldr	x1, [sp, #120]
  401a3c:	adrp	x0, 405000 <yystos+0x220>
  401a40:	ldr	x28, [x22, #24]
  401a44:	add	x0, x0, #0x498
  401a48:	add	x1, x1, #0x4
  401a4c:	str	x0, [sp, #136]
  401a50:	str	x1, [sp, #152]
  401a54:	cbz	x28, 40193c <main+0x36c>
  401a58:	ldr	w0, [x28, #8]
  401a5c:	cmp	w0, #0x1
  401a60:	b.eq	401a6c <main+0x49c>  // b.none
  401a64:	ldr	x28, [x28, #48]
  401a68:	b	401a54 <main+0x484>
  401a6c:	ldr	x0, [x28, #16]
  401a70:	ldr	x1, [sp, #112]
  401a74:	bl	401560 <xmlStrEqual@plt>
  401a78:	cbz	w0, 401a64 <main+0x494>
  401a7c:	ldr	x1, [sp, #136]
  401a80:	mov	x0, x28
  401a84:	bl	401300 <xmlHasProp@plt>
  401a88:	cbz	x0, 401d94 <main+0x7c4>
  401a8c:	ldr	x1, [sp, #136]
  401a90:	mov	x0, x28
  401a94:	bl	4013a0 <xmlGetProp@plt>
  401a98:	mov	x2, x0
  401a9c:	mov	x0, x28
  401aa0:	str	x2, [sp, #160]
  401aa4:	bl	401440 <xmlNodeGetContent@plt>
  401aa8:	mov	x27, x0
  401aac:	ldr	x2, [sp, #160]
  401ab0:	str	x2, [sp, #168]
  401ab4:	mov	x0, x2
  401ab8:	bl	401420 <xmlStrlen@plt>
  401abc:	mov	w1, w0
  401ac0:	mov	x0, x27
  401ac4:	str	w1, [sp, #160]
  401ac8:	bl	401420 <xmlStrlen@plt>
  401acc:	sxtw	x5, w0
  401ad0:	ldr	w1, [sp, #160]
  401ad4:	ldr	x0, [sp, #152]
  401ad8:	add	x1, x5, w1, sxtw
  401adc:	add	x5, x1, x0
  401ae0:	ldr	x0, [sp, #144]
  401ae4:	add	x1, x5, #0x1
  401ae8:	ldr	x2, [sp, #168]
  401aec:	cmp	x1, x0
  401af0:	b.hi	401cac <main+0x6dc>  // b.pmore
  401af4:	ldr	x0, [sp, #120]
  401af8:	mov	x3, x27
  401afc:	adrp	x1, 405000 <yystos+0x220>
  401b00:	add	x1, x1, #0x4a0
  401b04:	add	x0, x23, x0
  401b08:	stp	x2, x5, [sp, #152]
  401b0c:	bl	401310 <sprintf@plt>
  401b10:	ldp	x2, x5, [sp, #152]
  401b14:	str	x5, [sp, #120]
  401b18:	ldr	x0, [sp, #128]
  401b1c:	ldr	x1, [x0]
  401b20:	mov	x0, x2
  401b24:	add	x2, x5, #0x4
  401b28:	str	x2, [sp, #152]
  401b2c:	blr	x1
  401b30:	ldr	x0, [sp, #128]
  401b34:	ldr	x1, [x0]
  401b38:	mov	x0, x27
  401b3c:	blr	x1
  401b40:	ldr	x28, [x28, #48]
  401b44:	b	401a54 <main+0x484>
  401b48:	cbz	x23, 401bb4 <main+0x5e4>
  401b4c:	mov	x0, x23
  401b50:	mov	w1, #0x3b                  	// #59
  401b54:	bl	401460 <strrchr@plt>
  401b58:	cbz	x0, 401b60 <main+0x590>
  401b5c:	strb	wzr, [x0]
  401b60:	mov	x0, x21
  401b64:	bl	401320 <xmlFreeDoc@plt>
  401b68:	mov	x0, x20
  401b6c:	bl	401360 <fclose@plt>
  401b70:	mov	x0, x23
  401b74:	cbz	w19, 401bf4 <main+0x624>
  401b78:	bl	4014a0 <puts@plt>
  401b7c:	mov	x0, x23
  401b80:	bl	401500 <free@plt>
  401b84:	b	401764 <main+0x194>
  401b88:	mov	w2, #0x5                   	// #5
  401b8c:	adrp	x1, 405000 <yystos+0x220>
  401b90:	mov	x0, #0x0                   	// #0
  401b94:	add	x1, x1, #0x500
  401b98:	bl	401530 <dcgettext@plt>
  401b9c:	mov	x2, x0
  401ba0:	mov	x4, x22
  401ba4:	mov	x3, x25
  401ba8:	mov	w1, #0x0                   	// #0
  401bac:	mov	w0, #0x0                   	// #0
  401bb0:	bl	4012e0 <error@plt>
  401bb4:	mov	x0, x21
  401bb8:	bl	401320 <xmlFreeDoc@plt>
  401bbc:	mov	x0, x20
  401bc0:	bl	401360 <fclose@plt>
  401bc4:	mov	w2, #0x5                   	// #5
  401bc8:	adrp	x1, 405000 <yystos+0x220>
  401bcc:	mov	x0, #0x0                   	// #0
  401bd0:	add	x1, x1, #0x4e0
  401bd4:	bl	401530 <dcgettext@plt>
  401bd8:	mov	x23, #0x0                   	// #0
  401bdc:	mov	x2, x0
  401be0:	mov	x3, x24
  401be4:	mov	w1, #0x0                   	// #0
  401be8:	mov	w0, #0x1                   	// #1
  401bec:	bl	4012e0 <error@plt>
  401bf0:	b	401b70 <main+0x5a0>
  401bf4:	bl	403df0 <cldr_plural_parse>
  401bf8:	mov	x19, x0
  401bfc:	cbz	x0, 401d38 <main+0x768>
  401c00:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  401c04:	mov	x0, x19
  401c08:	ldr	x1, [x1, #432]
  401c0c:	bl	403e50 <cldr_plural_rule_list_print>
  401c10:	mov	x0, x19
  401c14:	bl	403d88 <cldr_plural_rule_list_free>
  401c18:	b	401b7c <main+0x5ac>
  401c1c:	mov	x0, x22
  401c20:	bl	401520 <xmlGetLineNo@plt>
  401c24:	mov	x3, x0
  401c28:	mov	w2, #0x5                   	// #5
  401c2c:	adrp	x1, 405000 <yystos+0x220>
  401c30:	mov	x0, #0x0                   	// #0
  401c34:	add	x1, x1, #0x458
  401c38:	str	x3, [sp, #128]
  401c3c:	bl	401530 <dcgettext@plt>
  401c40:	mov	x4, x0
  401c44:	ldr	x3, [sp, #128]
  401c48:	mov	x6, x28
  401c4c:	mov	x5, x25
  401c50:	mov	x2, x26
  401c54:	mov	w1, #0x0                   	// #0
  401c58:	mov	w0, #0x0                   	// #0
  401c5c:	bl	4015a0 <error_at_line@plt>
  401c60:	b	40193c <main+0x36c>
  401c64:	adrp	x25, 405000 <yystos+0x220>
  401c68:	add	x25, x25, #0x420
  401c6c:	mov	x0, x22
  401c70:	bl	401520 <xmlGetLineNo@plt>
  401c74:	mov	w2, #0x5                   	// #5
  401c78:	mov	x22, x0
  401c7c:	adrp	x1, 405000 <yystos+0x220>
  401c80:	mov	x0, #0x0                   	// #0
  401c84:	add	x1, x1, #0x400
  401c88:	bl	401530 <dcgettext@plt>
  401c8c:	mov	x5, x25
  401c90:	mov	x4, x0
  401c94:	mov	w3, w22
  401c98:	mov	x2, x26
  401c9c:	mov	w1, #0x0                   	// #0
  401ca0:	mov	w0, #0x0                   	// #0
  401ca4:	bl	4015a0 <error_at_line@plt>
  401ca8:	b	401bb4 <main+0x5e4>
  401cac:	lsl	x6, x0, #1
  401cb0:	mov	x0, x23
  401cb4:	cmp	x1, x6
  401cb8:	str	x5, [sp, #160]
  401cbc:	csel	x1, x1, x6, cs  // cs = hs, nlast
  401cc0:	stp	x1, x2, [sp, #144]
  401cc4:	bl	401390 <xrealloc@plt>
  401cc8:	mov	x23, x0
  401ccc:	ldp	x2, x5, [sp, #152]
  401cd0:	b	401af4 <main+0x524>
  401cd4:	mov	w2, #0x5                   	// #5
  401cd8:	adrp	x1, 405000 <yystos+0x220>
  401cdc:	add	x1, x1, #0x3e0
  401ce0:	bl	401530 <dcgettext@plt>
  401ce4:	mov	x3, x26
  401ce8:	mov	x2, x0
  401cec:	mov	w1, #0x0                   	// #0
  401cf0:	mov	w0, #0x1                   	// #1
  401cf4:	bl	4012e0 <error@plt>
  401cf8:	b	4018a8 <main+0x2d8>
  401cfc:	mov	w2, #0x5                   	// #5
  401d00:	adrp	x1, 405000 <yystos+0x220>
  401d04:	add	x1, x1, #0x3c8
  401d08:	bl	401530 <dcgettext@plt>
  401d0c:	mov	x3, x26
  401d10:	mov	x2, x0
  401d14:	mov	w1, #0x0                   	// #0
  401d18:	mov	w0, #0x1                   	// #1
  401d1c:	bl	4012e0 <error@plt>
  401d20:	b	401888 <main+0x2b8>
  401d24:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  401d28:	mov	x0, x27
  401d2c:	ldr	x1, [x1, #456]
  401d30:	blr	x1
  401d34:	b	40193c <main+0x36c>
  401d38:	mov	w2, #0x5                   	// #5
  401d3c:	adrp	x1, 405000 <yystos+0x220>
  401d40:	add	x1, x1, #0x4b0
  401d44:	bl	401530 <dcgettext@plt>
  401d48:	mov	w1, #0x0                   	// #0
  401d4c:	mov	x2, x0
  401d50:	mov	w0, #0x1                   	// #1
  401d54:	bl	4012e0 <error@plt>
  401d58:	b	401c00 <main+0x630>
  401d5c:	adrp	x0, 416000 <memcpy@GLIBC_2.17>
  401d60:	mov	w2, #0x5                   	// #5
  401d64:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  401d68:	add	x1, x1, #0xf38
  401d6c:	ldr	x19, [x0, #416]
  401d70:	mov	x0, #0x0                   	// #0
  401d74:	bl	401530 <dcgettext@plt>
  401d78:	mov	x1, x0
  401d7c:	adrp	x2, 416000 <memcpy@GLIBC_2.17>
  401d80:	mov	x0, x19
  401d84:	ldr	x2, [x2, #448]
  401d88:	bl	4015b0 <fprintf@plt>
  401d8c:	mov	w0, #0x1                   	// #1
  401d90:	bl	4012d0 <exit@plt>
  401d94:	mov	x0, x28
  401d98:	bl	401520 <xmlGetLineNo@plt>
  401d9c:	mov	w2, #0x5                   	// #5
  401da0:	mov	x28, x0
  401da4:	adrp	x1, 405000 <yystos+0x220>
  401da8:	mov	x0, #0x0                   	// #0
  401dac:	add	x1, x1, #0x458
  401db0:	bl	401530 <dcgettext@plt>
  401db4:	ldr	x5, [sp, #112]
  401db8:	mov	x4, x0
  401dbc:	ldr	x6, [sp, #136]
  401dc0:	mov	w3, w28
  401dc4:	mov	x2, x26
  401dc8:	mov	w1, #0x0                   	// #0
  401dcc:	mov	w0, #0x0                   	// #0
  401dd0:	bl	4015a0 <error_at_line@plt>
  401dd4:	b	40193c <main+0x36c>
  401dd8:	mov	w2, #0x5                   	// #5
  401ddc:	adrp	x1, 405000 <yystos+0x220>
  401de0:	mov	x0, #0x0                   	// #0
  401de4:	add	x1, x1, #0xb8
  401de8:	bl	401530 <dcgettext@plt>
  401dec:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  401df0:	ldr	x1, [x1, #448]
  401df4:	bl	401550 <printf@plt>
  401df8:	mov	w0, #0xa                   	// #10
  401dfc:	bl	401580 <putchar@plt>
  401e00:	adrp	x1, 405000 <yystos+0x220>
  401e04:	add	x1, x1, #0xe8
  401e08:	mov	w2, #0x5                   	// #5
  401e0c:	mov	x0, #0x0                   	// #0
  401e10:	bl	401530 <dcgettext@plt>
  401e14:	bl	401550 <printf@plt>
  401e18:	mov	w0, #0xa                   	// #10
  401e1c:	bl	401580 <putchar@plt>
  401e20:	adrp	x1, 405000 <yystos+0x220>
  401e24:	add	x1, x1, #0x1f8
  401e28:	mov	w2, #0x5                   	// #5
  401e2c:	mov	x0, #0x0                   	// #0
  401e30:	bl	401530 <dcgettext@plt>
  401e34:	bl	401550 <printf@plt>
  401e38:	mov	w0, #0xa                   	// #10
  401e3c:	bl	401580 <putchar@plt>
  401e40:	adrp	x1, 405000 <yystos+0x220>
  401e44:	add	x1, x1, #0x268
  401e48:	mov	w2, #0x5                   	// #5
  401e4c:	mov	x0, #0x0                   	// #0
  401e50:	bl	401530 <dcgettext@plt>
  401e54:	bl	401550 <printf@plt>
  401e58:	adrp	x1, 405000 <yystos+0x220>
  401e5c:	add	x1, x1, #0x2b0
  401e60:	mov	w2, #0x5                   	// #5
  401e64:	mov	x0, #0x0                   	// #0
  401e68:	bl	401530 <dcgettext@plt>
  401e6c:	bl	401550 <printf@plt>
  401e70:	adrp	x1, 405000 <yystos+0x220>
  401e74:	add	x1, x1, #0x2f0
  401e78:	mov	w2, #0x5                   	// #5
  401e7c:	mov	x0, #0x0                   	// #0
  401e80:	bl	401530 <dcgettext@plt>
  401e84:	bl	401550 <printf@plt>
  401e88:	mov	w0, #0xa                   	// #10
  401e8c:	bl	401580 <putchar@plt>
  401e90:	mov	w2, #0x5                   	// #5
  401e94:	adrp	x1, 405000 <yystos+0x220>
  401e98:	mov	x0, #0x0                   	// #0
  401e9c:	add	x1, x1, #0x338
  401ea0:	bl	401530 <dcgettext@plt>
  401ea4:	adrp	x2, 405000 <yystos+0x220>
  401ea8:	adrp	x1, 405000 <yystos+0x220>
  401eac:	add	x2, x2, #0x378
  401eb0:	add	x1, x1, #0x390
  401eb4:	bl	401550 <printf@plt>
  401eb8:	mov	w0, #0x0                   	// #0
  401ebc:	bl	4012d0 <exit@plt>

0000000000401ec0 <_start>:
  401ec0:	mov	x29, #0x0                   	// #0
  401ec4:	mov	x30, #0x0                   	// #0
  401ec8:	mov	x5, x0
  401ecc:	ldr	x1, [sp]
  401ed0:	add	x2, sp, #0x8
  401ed4:	mov	x6, sp
  401ed8:	movz	x0, #0x0, lsl #48
  401edc:	movk	x0, #0x0, lsl #32
  401ee0:	movk	x0, #0x40, lsl #16
  401ee4:	movk	x0, #0x15d0
  401ee8:	movz	x3, #0x0, lsl #48
  401eec:	movk	x3, #0x0, lsl #32
  401ef0:	movk	x3, #0x40, lsl #16
  401ef4:	movk	x3, #0x49b8
  401ef8:	movz	x4, #0x0, lsl #48
  401efc:	movk	x4, #0x0, lsl #32
  401f00:	movk	x4, #0x40, lsl #16
  401f04:	movk	x4, #0x4a38
  401f08:	bl	4013e0 <__libc_start_main@plt>
  401f0c:	bl	401480 <abort@plt>

0000000000401f10 <call_weak_fn>:
  401f10:	adrp	x0, 415000 <__FRAME_END__+0xf454>
  401f14:	ldr	x0, [x0, #4064]
  401f18:	cbz	x0, 401f20 <call_weak_fn+0x10>
  401f1c:	b	401470 <__gmon_start__@plt>
  401f20:	ret
  401f24:	nop

0000000000401f28 <deregister_tm_clones>:
  401f28:	adrp	x0, 416000 <memcpy@GLIBC_2.17>
  401f2c:	add	x0, x0, #0x1a0
  401f30:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  401f34:	add	x1, x1, #0x1a0
  401f38:	cmp	x1, x0
  401f3c:	b.eq	401f54 <deregister_tm_clones+0x2c>  // b.none
  401f40:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  401f44:	ldr	x1, [x1, #2664]
  401f48:	cbz	x1, 401f54 <deregister_tm_clones+0x2c>
  401f4c:	mov	x16, x1
  401f50:	br	x16
  401f54:	ret

0000000000401f58 <register_tm_clones>:
  401f58:	adrp	x0, 416000 <memcpy@GLIBC_2.17>
  401f5c:	add	x0, x0, #0x1a0
  401f60:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  401f64:	add	x1, x1, #0x1a0
  401f68:	sub	x1, x1, x0
  401f6c:	lsr	x2, x1, #63
  401f70:	add	x1, x2, x1, asr #3
  401f74:	cmp	xzr, x1, asr #1
  401f78:	asr	x1, x1, #1
  401f7c:	b.eq	401f94 <register_tm_clones+0x3c>  // b.none
  401f80:	adrp	x2, 404000 <cldr_plural_rule_list_print+0x1b0>
  401f84:	ldr	x2, [x2, #2672]
  401f88:	cbz	x2, 401f94 <register_tm_clones+0x3c>
  401f8c:	mov	x16, x2
  401f90:	br	x16
  401f94:	ret

0000000000401f98 <__do_global_dtors_aux>:
  401f98:	stp	x29, x30, [sp, #-32]!
  401f9c:	mov	x29, sp
  401fa0:	str	x19, [sp, #16]
  401fa4:	adrp	x19, 416000 <memcpy@GLIBC_2.17>
  401fa8:	ldrb	w0, [x19, #464]
  401fac:	cbnz	w0, 401fbc <__do_global_dtors_aux+0x24>
  401fb0:	bl	401f28 <deregister_tm_clones>
  401fb4:	mov	w0, #0x1                   	// #1
  401fb8:	strb	w0, [x19, #464]
  401fbc:	ldr	x19, [sp, #16]
  401fc0:	ldp	x29, x30, [sp], #32
  401fc4:	ret

0000000000401fc8 <frame_dummy>:
  401fc8:	b	401f58 <register_tm_clones>
  401fcc:	nop

0000000000401fd0 <yydestruct.isra.0>:
  401fd0:	cmp	w0, #0x1b
  401fd4:	b.eq	401ff8 <yydestruct.isra.0+0x28>  // b.none
  401fd8:	b.gt	402000 <yydestruct.isra.0+0x30>
  401fdc:	cmp	w0, #0x19
  401fe0:	b.gt	40201c <yydestruct.isra.0+0x4c>
  401fe4:	cmp	w0, #0x17
  401fe8:	b.gt	40202c <yydestruct.isra.0+0x5c>
  401fec:	sub	w0, w0, #0xa
  401ff0:	cmp	w0, #0x2
  401ff4:	b.hi	40203c <yydestruct.isra.0+0x6c>  // b.pmore
  401ff8:	ldr	x0, [x1]
  401ffc:	b	401500 <free@plt>
  402000:	cmp	w0, #0x1c
  402004:	b.eq	402034 <yydestruct.isra.0+0x64>  // b.none
  402008:	sub	w0, w0, #0x1d
  40200c:	cmp	w0, #0x1
  402010:	b.hi	40203c <yydestruct.isra.0+0x6c>  // b.pmore
  402014:	ldr	x0, [x1]
  402018:	b	403790 <cldr_plural_range_free>
  40201c:	cmp	w0, #0x1a
  402020:	b.ne	40203c <yydestruct.isra.0+0x6c>  // b.any
  402024:	ldr	x0, [x1]
  402028:	b	403cf8 <cldr_plural_relation_free>
  40202c:	ldr	x0, [x1]
  402030:	b	403840 <cldr_plural_condition_free>
  402034:	ldr	x0, [x1]
  402038:	b	4037d0 <cldr_plural_range_list_free>
  40203c:	ret

0000000000402040 <yyparse>:
  402040:	sub	sp, sp, #0x880
  402044:	mov	w4, #0x0                   	// #0
  402048:	stp	x29, x30, [sp]
  40204c:	mov	x29, sp
  402050:	stp	x19, x20, [sp, #16]
  402054:	adrp	x19, 404000 <cldr_plural_rule_list_print+0x1b0>
  402058:	add	x19, x19, #0xb30
  40205c:	stp	x27, x28, [sp, #80]
  402060:	add	x28, sp, #0xb0
  402064:	mov	x20, x28
  402068:	stp	x21, x22, [sp, #32]
  40206c:	add	x21, x19, #0x2b0
  402070:	mov	x22, #0xc8                  	// #200
  402074:	stp	x23, x24, [sp, #48]
  402078:	add	x24, sp, #0x240
  40207c:	mov	w23, #0xfffffffe            	// #-2
  402080:	stp	x25, x26, [sp, #64]
  402084:	str	x24, [sp, #120]
  402088:	str	wzr, [sp, #132]
  40208c:	str	x0, [sp, #152]
  402090:	add	x0, x19, #0x40
  402094:	str	x0, [sp, #112]
  402098:	strh	wzr, [sp, #176]
  40209c:	ldrsb	w26, [x19, w4, sxtw]
  4020a0:	sxtw	x27, w4
  4020a4:	cmn	w26, #0x14
  4020a8:	mov	w6, w26
  4020ac:	b.eq	40233c <yyparse+0x2fc>  // b.none
  4020b0:	cmn	w23, #0x2
  4020b4:	b.eq	4024e4 <yyparse+0x4a4>  // b.none
  4020b8:	cmp	w23, #0x0
  4020bc:	b.le	402330 <yyparse+0x2f0>
  4020c0:	add	x0, x19, #0x1a0
  4020c4:	ldrb	w0, [x0, w23, sxtw]
  4020c8:	add	w6, w26, w0
  4020cc:	cmp	w6, #0x37
  4020d0:	b.hi	40220c <yyparse+0x1cc>  // b.pmore
  4020d4:	ldr	x1, [sp, #112]
  4020d8:	ldrsb	w1, [x1, w6, sxtw]
  4020dc:	cmp	w1, w0
  4020e0:	b.ne	40220c <yyparse+0x1cc>  // b.any
  4020e4:	add	x0, x19, #0x80
  4020e8:	ldrb	w4, [x0, w6, sxtw]
  4020ec:	cbz	w4, 4023a4 <yyparse+0x364>
  4020f0:	ldr	w2, [sp, #132]
  4020f4:	mov	x5, x28
  4020f8:	ldr	x0, [sp, #168]
  4020fc:	cmp	w2, #0x0
  402100:	cset	w1, ne  // ne = any
  402104:	add	x24, x24, #0x8
  402108:	sub	w1, w2, w1
  40210c:	str	w1, [sp, #132]
  402110:	mov	w23, #0xfffffffe            	// #-2
  402114:	str	x0, [x24]
  402118:	lsl	x1, x22, #1
  40211c:	strh	w4, [x5, #2]
  402120:	sub	x0, x1, #0x2
  402124:	add	x28, x5, #0x2
  402128:	add	x0, x20, x0
  40212c:	cmp	x28, x0
  402130:	b.cc	4021ec <yyparse+0x1ac>  // b.lo, b.ul, b.last
  402134:	sub	x26, x28, x20
  402138:	mov	x0, #0x270f                	// #9999
  40213c:	str	w4, [sp, #136]
  402140:	cmp	x22, x0
  402144:	asr	x0, x26, #1
  402148:	add	x25, x0, #0x1
  40214c:	b.hi	402af4 <yyparse+0xab4>  // b.pmore
  402150:	mov	x22, #0x2710                	// #10000
  402154:	cmp	x1, x22
  402158:	csel	x22, x1, x22, ls  // ls = plast
  40215c:	add	x0, x22, x22, lsl #2
  402160:	lsl	x0, x0, #1
  402164:	add	x0, x0, #0x7
  402168:	bl	401380 <malloc@plt>
  40216c:	cbz	x0, 402af4 <yyparse+0xab4>
  402170:	add	x2, x26, #0x2
  402174:	mov	x1, x20
  402178:	add	x27, x0, x22, lsl #1
  40217c:	str	x0, [sp, #144]
  402180:	bl	4012b0 <memcpy@plt>
  402184:	lsl	x24, x25, #3
  402188:	ldr	x1, [sp, #120]
  40218c:	mov	x2, x24
  402190:	mov	x0, x27
  402194:	lsl	x25, x22, #1
  402198:	bl	4012b0 <memcpy@plt>
  40219c:	add	x0, sp, #0xb0
  4021a0:	ldr	w4, [sp, #136]
  4021a4:	cmp	x20, x0
  4021a8:	ldr	x6, [sp, #144]
  4021ac:	b.eq	4021c8 <yyparse+0x188>  // b.none
  4021b0:	mov	x0, x20
  4021b4:	str	w4, [sp, #120]
  4021b8:	str	x6, [sp, #136]
  4021bc:	bl	401500 <free@plt>
  4021c0:	ldr	w4, [sp, #120]
  4021c4:	ldr	x6, [sp, #136]
  4021c8:	sub	x25, x25, #0x2
  4021cc:	add	x28, x6, x26
  4021d0:	add	x25, x6, x25
  4021d4:	sub	x3, x24, #0x8
  4021d8:	cmp	x28, x25
  4021dc:	add	x24, x27, x3
  4021e0:	b.cs	402b34 <yyparse+0xaf4>  // b.hs, b.nlast
  4021e4:	mov	x20, x6
  4021e8:	str	x27, [sp, #120]
  4021ec:	cmp	w4, #0x7
  4021f0:	b.ne	40209c <yyparse+0x5c>  // b.any
  4021f4:	mov	x21, x28
  4021f8:	mov	x28, x20
  4021fc:	mov	w22, #0x0                   	// #0
  402200:	cmn	w23, #0x2
  402204:	b.eq	402480 <yyparse+0x440>  // b.none
  402208:	b	402464 <yyparse+0x424>
  40220c:	add	x1, x19, #0xc0
  402210:	ldrb	w1, [x1, x27]
  402214:	cbz	w1, 40226c <yyparse+0x22c>
  402218:	add	x2, x19, #0x120
  40221c:	sub	w4, w1, #0x4
  402220:	sxtw	x6, w1
  402224:	mov	w0, #0x1                   	// #1
  402228:	cmp	w4, #0x1c
  40222c:	ldrb	w1, [x2, w1, sxtw]
  402230:	sub	w0, w0, w1
  402234:	ldr	x26, [x24, w0, sxtw #3]
  402238:	b.ls	40238c <yyparse+0x34c>  // b.plast
  40223c:	add	x2, x19, #0x150
  402240:	add	x0, x19, #0x100
  402244:	sub	x25, x24, w1, uxtb #3
  402248:	sub	x5, x28, w1, uxtb #1
  40224c:	ldrb	w4, [x2, x6]
  402250:	sub	w4, w4, #0x15
  402254:	ldrsb	w1, [x0, w4, sxtw]
  402258:	b	4023b8 <yyparse+0x378>
  40225c:	cmp	w23, #0x10c
  402260:	b.ls	402d6c <yyparse+0xd2c>  // b.plast
  402264:	mov	w23, #0xffffffff            	// #-1
  402268:	mov	w0, #0x2                   	// #2
  40226c:	ldr	w1, [sp, #132]
  402270:	cbz	w1, 402358 <yyparse+0x318>
  402274:	ldr	w1, [sp, #132]
  402278:	cmp	w1, #0x3
  40227c:	b.ne	402298 <yyparse+0x258>  // b.any
  402280:	cmp	w23, #0x0
  402284:	b.le	40256c <yyparse+0x52c>
  402288:	add	x1, sp, #0xa8
  40228c:	mov	w23, #0xfffffffe            	// #-2
  402290:	bl	401fd0 <yydestruct.isra.0>
  402294:	nop
  402298:	add	x25, x19, #0x80
  40229c:	b	4022d4 <yyparse+0x294>
  4022a0:	cmp	w0, #0xc
  4022a4:	b.eq	402418 <yyparse+0x3d8>  // b.none
  4022a8:	b.ls	402408 <yyparse+0x3c8>  // b.plast
  4022ac:	cmp	w0, #0x18
  4022b0:	b.eq	4022bc <yyparse+0x27c>  // b.none
  4022b4:	cmp	w0, #0x19
  4022b8:	b.ne	4022c8 <yyparse+0x288>  // b.any
  4022bc:	ldr	x0, [x24]
  4022c0:	bl	403840 <cldr_plural_condition_free>
  4022c4:	nop
  4022c8:	ldrsh	x27, [x28, #-2]!
  4022cc:	sub	x24, x24, #0x8
  4022d0:	ldrsb	w26, [x19, w27, sxtw]
  4022d4:	cmn	w26, #0x14
  4022d8:	b.eq	4022f8 <yyparse+0x2b8>  // b.none
  4022dc:	add	w26, w26, #0x1
  4022e0:	cmp	w26, #0x37
  4022e4:	b.hi	4022f8 <yyparse+0x2b8>  // b.pmore
  4022e8:	ldr	x0, [sp, #112]
  4022ec:	ldrsb	w0, [x0, w26, sxtw]
  4022f0:	cmp	w0, #0x1
  4022f4:	b.eq	402424 <yyparse+0x3e4>  // b.none
  4022f8:	cmp	x28, x20
  4022fc:	b.eq	402454 <yyparse+0x414>  // b.none
  402300:	ldrb	w0, [x21, x27]
  402304:	cmp	w0, #0x1a
  402308:	b.eq	402448 <yyparse+0x408>  // b.none
  40230c:	b.ls	4022a0 <yyparse+0x260>  // b.plast
  402310:	cmp	w0, #0x1d
  402314:	b.eq	402324 <yyparse+0x2e4>  // b.none
  402318:	b.ls	4023ec <yyparse+0x3ac>  // b.plast
  40231c:	cmp	w0, #0x1e
  402320:	b.ne	4022c8 <yyparse+0x288>  // b.any
  402324:	ldr	x0, [x24]
  402328:	bl	403790 <cldr_plural_range_free>
  40232c:	b	4022c8 <yyparse+0x288>
  402330:	mov	w0, #0x0                   	// #0
  402334:	mov	w23, #0x0                   	// #0
  402338:	b	4020cc <yyparse+0x8c>
  40233c:	add	x0, x19, #0xc0
  402340:	ldrb	w1, [x0, w4, sxtw]
  402344:	cbnz	w1, 402218 <yyparse+0x1d8>
  402348:	cmn	w23, #0x2
  40234c:	b.ne	40225c <yyparse+0x21c>  // b.any
  402350:	ldr	w0, [sp, #132]
  402354:	cbnz	w0, 402298 <yyparse+0x258>
  402358:	mov	w2, #0x5                   	// #5
  40235c:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  402360:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  402364:	add	x1, x1, #0xaa8
  402368:	add	x0, x0, #0xab8
  40236c:	bl	401530 <dcgettext@plt>
  402370:	adrp	x4, 416000 <memcpy@GLIBC_2.17>
  402374:	mov	x2, x0
  402378:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  40237c:	add	x1, x1, #0xac8
  402380:	ldr	x0, [x4, #416]
  402384:	bl	4015b0 <fprintf@plt>
  402388:	b	402298 <yyparse+0x258>
  40238c:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  402390:	add	x0, x0, #0xaf0
  402394:	ldrh	w0, [x0, w4, uxtw #1]
  402398:	adr	x2, 4023a4 <yyparse+0x364>
  40239c:	add	x0, x2, w0, sxth #2
  4023a0:	br	x0
  4023a4:	ldrsb	w1, [x19, #235]
  4023a8:	mov	x5, x28
  4023ac:	ldr	x26, [x24, #8]
  4023b0:	mov	x25, x24
  4023b4:	mov	w4, #0xffffffeb            	// #-21
  4023b8:	ldrsh	w2, [x5]
  4023bc:	add	x24, x25, #0x8
  4023c0:	str	x26, [x25, #8]
  4023c4:	add	w0, w2, w1
  4023c8:	cmp	w0, #0x37
  4023cc:	b.hi	4023e0 <yyparse+0x3a0>  // b.pmore
  4023d0:	ldr	x1, [sp, #112]
  4023d4:	ldrsb	w1, [x1, w0, sxtw]
  4023d8:	cmp	w1, w2
  4023dc:	b.eq	402578 <yyparse+0x538>  // b.none
  4023e0:	add	x0, x19, #0x180
  4023e4:	ldrsb	w4, [x0, w4, sxtw]
  4023e8:	b	402118 <yyparse+0xd8>
  4023ec:	cmp	w0, #0x1b
  4023f0:	b.eq	402418 <yyparse+0x3d8>  // b.none
  4023f4:	cmp	w0, #0x1c
  4023f8:	b.ne	4022c8 <yyparse+0x288>  // b.any
  4023fc:	ldr	x0, [x24]
  402400:	bl	4037d0 <cldr_plural_range_list_free>
  402404:	b	4022c8 <yyparse+0x288>
  402408:	cmp	w0, #0xa
  40240c:	b.eq	402418 <yyparse+0x3d8>  // b.none
  402410:	cmp	w0, #0xb
  402414:	b.ne	4022c8 <yyparse+0x288>  // b.any
  402418:	ldr	x0, [x24]
  40241c:	bl	401500 <free@plt>
  402420:	b	4022c8 <yyparse+0x288>
  402424:	ldrb	w4, [x25, w26, sxtw]
  402428:	cbz	w4, 4022f8 <yyparse+0x2b8>
  40242c:	mov	w1, #0x3                   	// #3
  402430:	str	w1, [sp, #132]
  402434:	ldr	x0, [sp, #168]
  402438:	mov	x5, x28
  40243c:	add	x24, x24, #0x8
  402440:	str	x0, [x24]
  402444:	b	402118 <yyparse+0xd8>
  402448:	ldr	x0, [x24]
  40244c:	bl	403cf8 <cldr_plural_relation_free>
  402450:	b	4022c8 <yyparse+0x288>
  402454:	cmn	w23, #0x2
  402458:	mov	x21, x28
  40245c:	mov	w22, #0x1                   	// #1
  402460:	b.eq	4024ac <yyparse+0x46c>  // b.none
  402464:	cmp	w23, #0x10c
  402468:	b.hi	402564 <yyparse+0x524>  // b.pmore
  40246c:	add	x0, x19, #0x1a0
  402470:	ldrb	w23, [x0, w23, sxtw]
  402474:	mov	w0, w23
  402478:	add	x1, sp, #0xa8
  40247c:	bl	401fd0 <yydestruct.isra.0>
  402480:	cmp	x21, x28
  402484:	b.eq	4024ac <yyparse+0x46c>  // b.none
  402488:	add	x19, x19, #0x2b0
  40248c:	nop
  402490:	ldrsh	w0, [x21], #-2
  402494:	mov	x1, x24
  402498:	sub	x24, x24, #0x8
  40249c:	ldrb	w0, [x19, w0, sxtw]
  4024a0:	bl	401fd0 <yydestruct.isra.0>
  4024a4:	cmp	x21, x28
  4024a8:	b.ne	402490 <yyparse+0x450>  // b.any
  4024ac:	add	x0, sp, #0xb0
  4024b0:	cmp	x28, x0
  4024b4:	b.eq	4024c0 <yyparse+0x480>  // b.none
  4024b8:	mov	x0, x28
  4024bc:	bl	401500 <free@plt>
  4024c0:	mov	w0, w22
  4024c4:	ldp	x29, x30, [sp]
  4024c8:	ldp	x19, x20, [sp, #16]
  4024cc:	ldp	x21, x22, [sp, #32]
  4024d0:	ldp	x23, x24, [sp, #48]
  4024d4:	ldp	x25, x26, [sp, #64]
  4024d8:	ldp	x27, x28, [sp, #80]
  4024dc:	add	sp, sp, #0x880
  4024e0:	ret
  4024e4:	ldr	x0, [sp, #152]
  4024e8:	ldr	x25, [x0]
  4024ec:	ldrb	w0, [x25]
  4024f0:	cbnz	w0, 402500 <yyparse+0x4c0>
  4024f4:	b	402584 <yyparse+0x544>
  4024f8:	ldrb	w0, [x25, #1]!
  4024fc:	cbz	w0, 402584 <yyparse+0x544>
  402500:	cmp	w0, #0x20
  402504:	ccmp	w0, #0x9, #0x4, ne  // ne = any
  402508:	b.eq	4024f8 <yyparse+0x4b8>  // b.none
  40250c:	tbnz	w0, #7, 402598 <yyparse+0x558>
  402510:	str	w0, [sp, #164]
  402514:	ldrb	w1, [x25]
  402518:	mov	w0, #0x2e                  	// #46
  40251c:	cmp	w0, w1
  402520:	b.ne	402530 <yyparse+0x4f0>  // b.any
  402524:	ldrb	w1, [x25, #1]
  402528:	cmp	w0, w1
  40252c:	b.eq	402a48 <yyparse+0xa08>  // b.none
  402530:	ldrb	w1, [x25]
  402534:	mov	w0, #0x2e                  	// #46
  402538:	cmp	w0, w1
  40253c:	b.ne	402620 <yyparse+0x5e0>  // b.any
  402540:	ldrb	w1, [x25, #1]
  402544:	cmp	w0, w1
  402548:	b.ne	402620 <yyparse+0x5e0>  // b.any
  40254c:	ldr	x1, [sp, #152]
  402550:	add	x25, x25, #0x2
  402554:	mov	w0, #0x5                   	// #5
  402558:	mov	w23, #0x104                 	// #260
  40255c:	str	x25, [x1]
  402560:	b	4020c8 <yyparse+0x88>
  402564:	mov	w23, #0x2                   	// #2
  402568:	b	402474 <yyparse+0x434>
  40256c:	b.eq	402bcc <yyparse+0xb8c>  // b.none
  402570:	mov	w23, #0xffffffff            	// #-1
  402574:	b	402298 <yyparse+0x258>
  402578:	add	x1, x19, #0x80
  40257c:	ldrb	w4, [x1, w0, sxtw]
  402580:	b	402118 <yyparse+0xd8>
  402584:	ldr	x1, [sp, #152]
  402588:	mov	w0, #0x0                   	// #0
  40258c:	mov	w23, #0x0                   	// #0
  402590:	str	x25, [x1]
  402594:	b	4020cc <yyparse+0x8c>
  402598:	ldr	x0, [sp, #152]
  40259c:	mov	x1, x25
  4025a0:	str	w6, [sp, #136]
  4025a4:	ldr	x2, [x0, #8]
  4025a8:	add	x0, sp, #0xa4
  4025ac:	sub	x2, x2, x25
  4025b0:	bl	401490 <u8_mbtouc_aux@plt>
  4025b4:	ldr	w2, [sp, #164]
  4025b8:	mov	w1, #0x2026                	// #8230
  4025bc:	ldr	w6, [sp, #136]
  4025c0:	cmp	w2, w1
  4025c4:	b.ne	402514 <yyparse+0x4d4>  // b.any
  4025c8:	ldr	x1, [sp, #152]
  4025cc:	add	x25, x25, w0, sxtw
  4025d0:	mov	w23, #0x105                 	// #261
  4025d4:	mov	w0, #0x6                   	// #6
  4025d8:	str	x25, [x1]
  4025dc:	b	4020c8 <yyparse+0x88>
  4025e0:	mov	x25, x24
  4025e4:	ldr	x0, [x25], #-8
  4025e8:	bl	401500 <free@plt>
  4025ec:	sub	x5, x28, #0x2
  4025f0:	mov	w4, #0x10                  	// #16
  4025f4:	mov	w1, #0x16                  	// #22
  4025f8:	b	4023b8 <yyparse+0x378>
  4025fc:	ldur	x0, [x24, #-16]
  402600:	mov	x25, x24
  402604:	bl	401500 <free@plt>
  402608:	ldr	x0, [x25], #-24
  40260c:	bl	401500 <free@plt>
  402610:	sub	x5, x28, #0x6
  402614:	mov	w4, #0x10                  	// #16
  402618:	mov	w1, #0x16                  	// #22
  40261c:	b	4023b8 <yyparse+0x378>
  402620:	mov	x1, x25
  402624:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  402628:	mov	x2, #0x5                   	// #5
  40262c:	add	x0, x0, #0xa78
  402630:	str	w6, [sp, #136]
  402634:	bl	4013c0 <strncmp@plt>
  402638:	ldr	w6, [sp, #136]
  40263c:	cbz	w0, 402b44 <yyparse+0xb04>
  402640:	mov	x1, x25
  402644:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  402648:	mov	x2, #0x8                   	// #8
  40264c:	add	x0, x0, #0xa80
  402650:	str	w6, [sp, #136]
  402654:	bl	4013c0 <strncmp@plt>
  402658:	ldr	w6, [sp, #136]
  40265c:	cbz	w0, 402b5c <yyparse+0xb1c>
  402660:	mov	x1, x25
  402664:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  402668:	mov	x2, #0x8                   	// #8
  40266c:	add	x0, x0, #0xa90
  402670:	str	w6, [sp, #136]
  402674:	bl	4013c0 <strncmp@plt>
  402678:	ldr	w6, [sp, #136]
  40267c:	cbz	w0, 402b74 <yyparse+0xb34>
  402680:	mov	x2, x25
  402684:	ldrb	w23, [x2], #1
  402688:	cmp	w23, #0x39
  40268c:	b.hi	4029a0 <yyparse+0x960>  // b.pmore
  402690:	cmp	w23, #0x2f
  402694:	b.hi	402a78 <yyparse+0xa38>  // b.pmore
  402698:	cmp	w23, #0x21
  40269c:	b.ne	402a6c <yyparse+0xa2c>  // b.any
  4026a0:	ldrb	w0, [x25, #1]
  4026a4:	cmp	w0, #0x3d
  4026a8:	b.eq	402d44 <yyparse+0xd04>  // b.none
  4026ac:	ldr	x1, [sp, #152]
  4026b0:	mov	w0, #0x1                   	// #1
  4026b4:	mov	w23, #0x100                 	// #256
  4026b8:	str	x2, [x1]
  4026bc:	b	4020c8 <yyparse+0x88>
  4026c0:	mov	x25, x24
  4026c4:	mov	x0, #0x10                  	// #16
  4026c8:	ldur	x24, [x24, #-16]
  4026cc:	ldr	x27, [x25], #-24
  4026d0:	bl	401400 <xmalloc@plt>
  4026d4:	sub	x5, x28, #0x6
  4026d8:	mov	x26, x0
  4026dc:	mov	w4, #0x9                   	// #9
  4026e0:	mov	w1, #0xffffffec            	// #-20
  4026e4:	stp	x24, x27, [x0]
  4026e8:	b	4023b8 <yyparse+0x378>
  4026ec:	mov	x25, x24
  4026f0:	str	d8, [sp, #96]
  4026f4:	mov	x0, #0x10                  	// #16
  4026f8:	ldr	d8, [x25], #-8
  4026fc:	bl	401400 <xmalloc@plt>
  402700:	mov	x26, x0
  402704:	dup	v0.2d, v8.d[0]
  402708:	sub	x5, x28, #0x2
  40270c:	mov	w4, #0x8                   	// #8
  402710:	mov	w1, #0xffffffed            	// #-19
  402714:	ldr	d8, [sp, #96]
  402718:	str	q0, [x0]
  40271c:	b	4023b8 <yyparse+0x378>
  402720:	mov	x25, x24
  402724:	sub	x5, x28, #0x2
  402728:	mov	w4, #0x8                   	// #8
  40272c:	mov	w1, #0xffffffed            	// #-19
  402730:	ldr	x26, [x25], #-8
  402734:	b	4023b8 <yyparse+0x378>
  402738:	ldur	x26, [x24, #-16]
  40273c:	ldr	x27, [x24]
  402740:	ldp	x0, x2, [x26]
  402744:	ldr	x1, [x26, #16]
  402748:	cmp	x2, x1
  40274c:	b.eq	402bac <yyparse+0xb6c>  // b.none
  402750:	add	x1, x2, #0x1
  402754:	str	x1, [x26, #8]
  402758:	sub	x25, x24, #0x18
  40275c:	sub	x5, x28, #0x6
  402760:	mov	w4, #0x7                   	// #7
  402764:	mov	w1, #0x12                  	// #18
  402768:	str	x27, [x0, x2, lsl #3]
  40276c:	b	4023b8 <yyparse+0x378>
  402770:	mov	x0, #0x18                  	// #24
  402774:	bl	401400 <xmalloc@plt>
  402778:	mov	x26, x0
  40277c:	mov	x25, x24
  402780:	mov	x2, #0x1                   	// #1
  402784:	mov	x1, #0x8                   	// #8
  402788:	mov	x0, #0x0                   	// #0
  40278c:	stp	xzr, xzr, [x26]
  402790:	str	xzr, [x26, #16]
  402794:	ldr	x27, [x25], #-8
  402798:	str	x2, [x26, #16]
  40279c:	bl	401390 <xrealloc@plt>
  4027a0:	ldr	x2, [x26, #8]
  4027a4:	sub	x5, x28, #0x2
  4027a8:	mov	w4, #0x7                   	// #7
  4027ac:	add	x1, x2, #0x1
  4027b0:	stp	x0, x1, [x26]
  4027b4:	mov	w1, #0x12                  	// #18
  4027b8:	str	x27, [x0, x2, lsl #3]
  4027bc:	b	4023b8 <yyparse+0x378>
  4027c0:	mov	x25, x24
  4027c4:	mov	x0, #0x8                   	// #8
  4027c8:	ldur	w24, [x24, #-16]
  4027cc:	ldr	x1, [x25], #-24
  4027d0:	ldr	w27, [x1, #8]
  4027d4:	bl	401400 <xmalloc@plt>
  4027d8:	sub	x5, x28, #0x6
  4027dc:	mov	x26, x0
  4027e0:	mov	w4, #0x6                   	// #6
  4027e4:	mov	w1, #0xffffffec            	// #-20
  4027e8:	stp	w24, w27, [x0]
  4027ec:	b	4023b8 <yyparse+0x378>
  4027f0:	mov	x25, x24
  4027f4:	mov	x0, #0x8                   	// #8
  4027f8:	ldr	w27, [x25], #-8
  4027fc:	bl	401400 <xmalloc@plt>
  402800:	sub	x5, x28, #0x2
  402804:	mov	x26, x0
  402808:	mov	w4, #0x6                   	// #6
  40280c:	mov	w1, #0xffffffec            	// #-20
  402810:	stp	w27, wzr, [x0]
  402814:	b	4023b8 <yyparse+0x378>
  402818:	mov	x25, x24
  40281c:	mov	x0, #0x18                  	// #24
  402820:	ldur	x24, [x24, #-16]
  402824:	ldr	x27, [x25], #-24
  402828:	bl	401400 <xmalloc@plt>
  40282c:	mov	x26, x0
  402830:	sub	x5, x28, #0x6
  402834:	mov	w0, #0x1                   	// #1
  402838:	mov	w4, #0x5                   	// #5
  40283c:	mov	w1, #0x11                  	// #17
  402840:	str	x24, [x26]
  402844:	str	w0, [x26, #8]
  402848:	str	x27, [x26, #16]
  40284c:	b	4023b8 <yyparse+0x378>
  402850:	mov	x25, x24
  402854:	mov	x0, #0x18                  	// #24
  402858:	ldur	x24, [x24, #-16]
  40285c:	ldr	x27, [x25], #-24
  402860:	bl	401400 <xmalloc@plt>
  402864:	sub	x5, x28, #0x6
  402868:	mov	x26, x0
  40286c:	mov	w4, #0x5                   	// #5
  402870:	mov	w1, #0x11                  	// #17
  402874:	str	x24, [x0]
  402878:	str	wzr, [x0, #8]
  40287c:	str	x27, [x0, #16]
  402880:	b	4023b8 <yyparse+0x378>
  402884:	mov	x25, x24
  402888:	mov	x0, #0x18                  	// #24
  40288c:	ldur	x24, [x24, #-16]
  402890:	ldr	x26, [x25], #-24
  402894:	bl	401400 <xmalloc@plt>
  402898:	mov	x27, x0
  40289c:	mov	w1, #0x2                   	// #2
  4028a0:	mov	x0, #0x18                  	// #24
  4028a4:	str	w1, [x27]
  4028a8:	str	x26, [x27, #8]
  4028ac:	bl	401400 <xmalloc@plt>
  4028b0:	mov	x26, x0
  4028b4:	sub	x5, x28, #0x6
  4028b8:	mov	w4, #0x4                   	// #4
  4028bc:	mov	w1, #0xe                   	// #14
  4028c0:	str	wzr, [x0]
  4028c4:	stp	x24, x27, [x0, #8]
  4028c8:	b	4023b8 <yyparse+0x378>
  4028cc:	mov	x25, x24
  4028d0:	mov	x0, #0x18                  	// #24
  4028d4:	ldr	x27, [x25], #-8
  4028d8:	bl	401400 <xmalloc@plt>
  4028dc:	mov	x26, x0
  4028e0:	sub	x5, x28, #0x2
  4028e4:	mov	w0, #0x2                   	// #2
  4028e8:	mov	w4, #0x4                   	// #4
  4028ec:	mov	w1, #0xe                   	// #14
  4028f0:	str	w0, [x26]
  4028f4:	str	x27, [x26, #8]
  4028f8:	b	4023b8 <yyparse+0x378>
  4028fc:	mov	x25, x24
  402900:	mov	x0, #0x18                  	// #24
  402904:	ldur	x24, [x24, #-16]
  402908:	ldr	x27, [x25], #-24
  40290c:	bl	401400 <xmalloc@plt>
  402910:	mov	x26, x0
  402914:	sub	x5, x28, #0x6
  402918:	mov	w0, #0x1                   	// #1
  40291c:	mov	w4, #0x3                   	// #3
  402920:	mov	w1, #0xffffffec            	// #-20
  402924:	str	w0, [x26]
  402928:	stp	x24, x27, [x26, #8]
  40292c:	b	4023b8 <yyparse+0x378>
  402930:	mov	x25, x24
  402934:	sub	x5, x28, #0x2
  402938:	mov	w4, #0x3                   	// #3
  40293c:	mov	w1, #0xffffffec            	// #-20
  402940:	ldr	x26, [x25], #-8
  402944:	b	4023b8 <yyparse+0x378>
  402948:	ldur	x4, [x24, #-24]
  40294c:	mov	x0, #0x10                  	// #16
  402950:	ldur	x1, [x24, #-8]
  402954:	stp	x1, x4, [sp, #136]
  402958:	bl	401400 <xmalloc@plt>
  40295c:	mov	x27, x0
  402960:	ldp	x4, x1, [sp, #144]
  402964:	ldr	x25, [x1, #16]
  402968:	ldr	x1, [sp, #136]
  40296c:	ldp	x2, x0, [x25, #8]
  402970:	cmp	x2, x0
  402974:	ldr	x0, [x25]
  402978:	stp	x4, x1, [x27]
  40297c:	b.eq	402b8c <yyparse+0xb4c>  // b.none
  402980:	add	x1, x2, #0x1
  402984:	str	x1, [x25, #8]
  402988:	sub	x5, x28, #0x8
  40298c:	sub	x25, x24, #0x20
  402990:	mov	w4, #0x2                   	// #2
  402994:	mov	w1, #0x15                  	// #21
  402998:	str	x27, [x0, x2, lsl #3]
  40299c:	b	4023b8 <yyparse+0x378>
  4029a0:	sub	w0, w23, #0x61
  4029a4:	and	w0, w0, #0xff
  4029a8:	cmp	w0, #0x19
  4029ac:	b.hi	402a6c <yyparse+0xa2c>  // b.pmore
  4029b0:	adrp	x8, 416000 <memcpy@GLIBC_2.17>
  4029b4:	add	x7, x8, #0x1d8
  4029b8:	mov	x6, #0x0                   	// #0
  4029bc:	ldr	x4, [x8, #472]
  4029c0:	ldr	x0, [x7, #8]
  4029c4:	cmp	x6, x0
  4029c8:	b.cs	402c08 <yyparse+0xbc8>  // b.hs, b.nlast
  4029cc:	strb	w23, [x4, x6]
  4029d0:	add	x25, x6, #0x1
  4029d4:	ldrb	w23, [x2]
  4029d8:	sub	w1, w23, #0x61
  4029dc:	cmp	w1, #0x19
  4029e0:	b.ls	402c50 <yyparse+0xc10>  // b.plast
  4029e4:	cmp	x0, x25
  4029e8:	b.ls	402ca0 <yyparse+0xc60>  // b.plast
  4029ec:	strb	wzr, [x4, x25]
  4029f0:	cmp	x25, #0x1
  4029f4:	b.eq	402c5c <yyparse+0xc1c>  // b.none
  4029f8:	mov	x0, x4
  4029fc:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  402a00:	add	x1, x1, #0xaa0
  402a04:	stp	x4, x2, [sp, #136]
  402a08:	bl	4014d0 <strcmp@plt>
  402a0c:	ldp	x4, x2, [sp, #136]
  402a10:	cbz	w0, 402d58 <yyparse+0xd18>
  402a14:	ldrb	w0, [x4]
  402a18:	cmp	w0, #0x6f
  402a1c:	b.ne	402bdc <yyparse+0xb9c>  // b.any
  402a20:	ldrb	w0, [x4, #1]
  402a24:	cmp	w0, #0x72
  402a28:	b.ne	402bdc <yyparse+0xb9c>  // b.any
  402a2c:	ldrb	w0, [x4, #2]
  402a30:	cbnz	w0, 402bdc <yyparse+0xb9c>
  402a34:	ldr	x1, [sp, #152]
  402a38:	mov	w0, #0x4                   	// #4
  402a3c:	mov	w23, #0x103                 	// #259
  402a40:	str	x2, [x1]
  402a44:	b	4020c8 <yyparse+0x88>
  402a48:	ldrb	w1, [x25, #2]
  402a4c:	cmp	w0, w1
  402a50:	b.ne	402530 <yyparse+0x4f0>  // b.any
  402a54:	ldr	x1, [sp, #152]
  402a58:	add	x25, x25, #0x3
  402a5c:	mov	w0, #0x6                   	// #6
  402a60:	mov	w23, #0x105                 	// #261
  402a64:	str	x25, [x1]
  402a68:	b	4020c8 <yyparse+0x88>
  402a6c:	ldr	x0, [sp, #152]
  402a70:	str	x2, [x0]
  402a74:	b	4020b8 <yyparse+0x78>
  402a78:	ldrb	w1, [x25, #1]
  402a7c:	sub	w23, w23, #0x30
  402a80:	sub	w0, w1, #0x30
  402a84:	sxtw	x23, w23
  402a88:	and	w1, w0, #0xff
  402a8c:	cmp	w1, #0x9
  402a90:	b.hi	402ab4 <yyparse+0xa74>  // b.pmore
  402a94:	ldrb	w1, [x2, #1]!
  402a98:	sxtw	x4, w0
  402a9c:	add	x23, x23, x23, lsl #2
  402aa0:	sub	w0, w1, #0x30
  402aa4:	and	w1, w0, #0xff
  402aa8:	add	x23, x4, x23, lsl #1
  402aac:	cmp	w1, #0x9
  402ab0:	b.ls	402a94 <yyparse+0xa54>  // b.plast
  402ab4:	mov	x0, #0x18                  	// #24
  402ab8:	str	x2, [sp, #136]
  402abc:	bl	401400 <xmalloc@plt>
  402ac0:	str	x0, [sp, #168]
  402ac4:	ldr	x2, [sp, #136]
  402ac8:	mov	x1, x0
  402acc:	ldrb	w0, [x2]
  402ad0:	cmp	w0, #0x2e
  402ad4:	b.eq	402ccc <yyparse+0xc8c>  // b.none
  402ad8:	str	wzr, [x1]
  402adc:	mov	w0, #0xb                   	// #11
  402ae0:	str	w23, [x1, #8]
  402ae4:	mov	w23, #0x10a                 	// #266
  402ae8:	ldr	x1, [sp, #152]
  402aec:	str	x2, [x1]
  402af0:	b	4020c8 <yyparse+0x88>
  402af4:	mov	w2, #0x5                   	// #5
  402af8:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  402afc:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  402b00:	add	x1, x1, #0xad0
  402b04:	add	x0, x0, #0xab8
  402b08:	bl	401530 <dcgettext@plt>
  402b0c:	adrp	x1, 416000 <memcpy@GLIBC_2.17>
  402b10:	mov	x2, x0
  402b14:	mov	x21, x28
  402b18:	mov	w22, #0x2                   	// #2
  402b1c:	ldr	x0, [x1, #416]
  402b20:	mov	x28, x20
  402b24:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  402b28:	add	x1, x1, #0xac8
  402b2c:	bl	4015b0 <fprintf@plt>
  402b30:	b	402200 <yyparse+0x1c0>
  402b34:	mov	x21, x28
  402b38:	mov	w22, #0x1                   	// #1
  402b3c:	mov	x28, x6
  402b40:	b	402200 <yyparse+0x1c0>
  402b44:	ldr	x1, [sp, #152]
  402b48:	add	x25, x25, #0x5
  402b4c:	mov	w0, #0x7                   	// #7
  402b50:	mov	w23, #0x106                 	// #262
  402b54:	str	x25, [x1]
  402b58:	b	4020c8 <yyparse+0x88>
  402b5c:	ldr	x1, [sp, #152]
  402b60:	add	x25, x25, #0x8
  402b64:	mov	w0, #0x8                   	// #8
  402b68:	mov	w23, #0x107                 	// #263
  402b6c:	str	x25, [x1]
  402b70:	b	4020c8 <yyparse+0x88>
  402b74:	ldr	x1, [sp, #152]
  402b78:	add	x25, x25, #0x8
  402b7c:	mov	w0, #0x9                   	// #9
  402b80:	mov	w23, #0x108                 	// #264
  402b84:	str	x25, [x1]
  402b88:	b	4020c8 <yyparse+0x88>
  402b8c:	lsl	x1, x2, #1
  402b90:	add	x1, x1, #0x1
  402b94:	str	x1, [x25, #16]
  402b98:	lsl	x1, x1, #3
  402b9c:	bl	401390 <xrealloc@plt>
  402ba0:	str	x0, [x25]
  402ba4:	ldr	x2, [x25, #8]
  402ba8:	b	402980 <yyparse+0x940>
  402bac:	lsl	x1, x2, #1
  402bb0:	add	x1, x1, #0x1
  402bb4:	str	x1, [x26, #16]
  402bb8:	lsl	x1, x1, #3
  402bbc:	bl	401390 <xrealloc@plt>
  402bc0:	str	x0, [x26]
  402bc4:	ldr	x2, [x26, #8]
  402bc8:	b	402750 <yyparse+0x710>
  402bcc:	mov	x21, x28
  402bd0:	mov	w22, #0x1                   	// #1
  402bd4:	mov	x28, x20
  402bd8:	b	402474 <yyparse+0x434>
  402bdc:	mov	x0, x4
  402be0:	str	x2, [sp, #136]
  402be4:	bl	401410 <xstrdup@plt>
  402be8:	mov	x1, x0
  402bec:	str	x1, [sp, #168]
  402bf0:	mov	w23, #0x109                 	// #265
  402bf4:	ldr	x1, [sp, #152]
  402bf8:	mov	w0, #0xa                   	// #10
  402bfc:	ldr	x2, [sp, #136]
  402c00:	str	x2, [x1]
  402c04:	b	4020c8 <yyparse+0x88>
  402c08:	add	x1, x0, #0x5
  402c0c:	add	x25, x6, #0x1
  402c10:	mov	x0, x4
  402c14:	stp	x6, x2, [sp, #136]
  402c18:	lsl	x1, x1, #1
  402c1c:	str	x1, [x7, #8]
  402c20:	bl	401390 <xrealloc@plt>
  402c24:	ldp	x6, x2, [sp, #136]
  402c28:	mov	x4, x0
  402c2c:	adrp	x0, 416000 <memcpy@GLIBC_2.17>
  402c30:	add	x7, x0, #0x1d8
  402c34:	strb	w23, [x4, x6]
  402c38:	str	x4, [x7]
  402c3c:	ldrb	w23, [x2]
  402c40:	ldr	x0, [x7, #8]
  402c44:	sub	w1, w23, #0x61
  402c48:	cmp	w1, #0x19
  402c4c:	b.hi	4029e4 <yyparse+0x9a4>  // b.pmore
  402c50:	add	x2, x2, #0x1
  402c54:	mov	x6, x25
  402c58:	b	4029c4 <yyparse+0x984>
  402c5c:	ldrb	w0, [x4]
  402c60:	sub	w0, w0, #0x66
  402c64:	and	w0, w0, #0xff
  402c68:	cmp	w0, #0x11
  402c6c:	b.hi	4029f8 <yyparse+0x9b8>  // b.pmore
  402c70:	mov	x1, #0x4109                	// #16649
  402c74:	lsl	x0, x25, x0
  402c78:	movk	x1, #0x3, lsl #16
  402c7c:	tst	x0, x1
  402c80:	b.eq	4029f8 <yyparse+0x9b8>  // b.none
  402c84:	ldr	x0, [sp, #152]
  402c88:	mov	w23, #0x10c                 	// #268
  402c8c:	str	x2, [x0]
  402c90:	mov	w0, #0xd                   	// #13
  402c94:	ldrb	w1, [x4]
  402c98:	str	w1, [sp, #168]
  402c9c:	b	4020c8 <yyparse+0x88>
  402ca0:	add	x1, x0, #0x5
  402ca4:	mov	x0, x4
  402ca8:	str	x2, [sp, #136]
  402cac:	lsl	x1, x1, #1
  402cb0:	str	x1, [x7, #8]
  402cb4:	bl	401390 <xrealloc@plt>
  402cb8:	mov	x4, x0
  402cbc:	adrp	x8, 416000 <memcpy@GLIBC_2.17>
  402cc0:	ldr	x2, [sp, #136]
  402cc4:	str	x0, [x8, #472]
  402cc8:	b	4029ec <yyparse+0x9ac>
  402ccc:	ldrb	w0, [x2, #1]
  402cd0:	sub	w0, w0, #0x30
  402cd4:	and	w4, w0, #0xff
  402cd8:	cmp	w4, #0x9
  402cdc:	b.hi	402ad8 <yyparse+0xa98>  // b.pmore
  402ce0:	add	x2, x2, #0x1
  402ce4:	ucvtf	d0, x23
  402ce8:	mov	w6, #0x1                   	// #1
  402cec:	sub	w8, w6, w2
  402cf0:	mov	w4, #0xa                   	// #10
  402cf4:	scvtf	d1, w0
  402cf8:	scvtf	d2, w4
  402cfc:	add	w7, w8, w2
  402d00:	ldrb	w0, [x2, #1]!
  402d04:	add	w4, w4, w4, lsl #2
  402d08:	sub	w0, w0, #0x30
  402d0c:	fdiv	d1, d1, d2
  402d10:	and	w9, w0, #0xff
  402d14:	lsl	w4, w4, #1
  402d18:	cmp	w9, #0x9
  402d1c:	fadd	d0, d0, d1
  402d20:	b.ls	402cf4 <yyparse+0xcb4>  // b.plast
  402d24:	str	w6, [x1]
  402d28:	mov	w0, #0xc                   	// #12
  402d2c:	str	d0, [x1, #8]
  402d30:	mov	w23, #0x10b                 	// #267
  402d34:	str	w7, [x1, #16]
  402d38:	ldr	x1, [sp, #152]
  402d3c:	str	x2, [x1]
  402d40:	b	4020c8 <yyparse+0x88>
  402d44:	ldr	x1, [sp, #152]
  402d48:	add	x25, x25, #0x2
  402d4c:	mov	w0, #0x11                  	// #17
  402d50:	str	x25, [x1]
  402d54:	b	4020c8 <yyparse+0x88>
  402d58:	ldr	x1, [sp, #152]
  402d5c:	mov	w0, #0x3                   	// #3
  402d60:	mov	w23, #0x102                 	// #258
  402d64:	str	x2, [x1]
  402d68:	b	4020c8 <yyparse+0x88>
  402d6c:	add	x0, x19, #0x1a0
  402d70:	ldrb	w0, [x0, w23, sxtw]
  402d74:	b	40226c <yyparse+0x22c>

0000000000402d78 <find_largest_modulus>:
  402d78:	stp	x29, x30, [sp, #-32]!
  402d7c:	mov	x29, sp
  402d80:	str	x19, [sp, #16]
  402d84:	mov	x19, x0
  402d88:	ldr	w0, [x0]
  402d8c:	cmp	w0, #0x1
  402d90:	b.ls	402db8 <find_largest_modulus+0x40>  // b.plast
  402d94:	cmp	w0, #0x2
  402d98:	mov	w0, #0x0                   	// #0
  402d9c:	b.ne	402dac <find_largest_modulus+0x34>  // b.any
  402da0:	ldr	x0, [x19, #8]
  402da4:	ldr	x0, [x0]
  402da8:	ldr	w0, [x0, #4]
  402dac:	ldr	x19, [sp, #16]
  402db0:	ldp	x29, x30, [sp], #32
  402db4:	ret
  402db8:	ldr	x0, [x19, #8]
  402dbc:	bl	402d78 <find_largest_modulus>
  402dc0:	mov	w1, w0
  402dc4:	ldr	x0, [x19, #16]
  402dc8:	mov	w19, w1
  402dcc:	bl	402d78 <find_largest_modulus>
  402dd0:	cmp	w19, w0
  402dd4:	csel	w0, w19, w0, ge  // ge = tcont
  402dd8:	ldr	x19, [sp, #16]
  402ddc:	ldp	x29, x30, [sp], #32
  402de0:	ret
  402de4:	nop

0000000000402de8 <find_largest_number>:
  402de8:	stp	x29, x30, [sp, #-32]!
  402dec:	mov	x29, sp
  402df0:	stp	x19, x20, [sp, #16]
  402df4:	mov	x20, x0
  402df8:	ldr	w0, [x0]
  402dfc:	cmp	w0, #0x1
  402e00:	b.ls	402e80 <find_largest_number+0x98>  // b.plast
  402e04:	cmp	w0, #0x2
  402e08:	mov	w0, #0x0                   	// #0
  402e0c:	b.eq	402e1c <find_largest_number+0x34>  // b.none
  402e10:	ldp	x19, x20, [sp, #16]
  402e14:	ldp	x29, x30, [sp], #32
  402e18:	ret
  402e1c:	ldr	x1, [x20, #8]
  402e20:	ldr	x1, [x1, #16]
  402e24:	ldr	x4, [x1, #8]
  402e28:	cbz	x4, 402e10 <find_largest_number+0x28>
  402e2c:	ldr	x1, [x1]
  402e30:	add	x4, x1, x4, lsl #3
  402e34:	b	402e50 <find_largest_number+0x68>
  402e38:	ldr	w2, [x3, #8]
  402e3c:	cmp	w0, w2
  402e40:	csel	w0, w0, w2, ge  // ge = tcont
  402e44:	add	x1, x1, #0x8
  402e48:	cmp	x1, x4
  402e4c:	b.eq	402e10 <find_largest_number+0x28>  // b.none
  402e50:	ldr	x2, [x1]
  402e54:	ldr	x3, [x2, #8]
  402e58:	ldr	w2, [x3]
  402e5c:	cmp	w2, #0x1
  402e60:	cbz	w2, 402e38 <find_largest_number+0x50>
  402e64:	b.ne	402e44 <find_largest_number+0x5c>  // b.any
  402e68:	scvtf	d0, w0
  402e6c:	ldr	d1, [x3, #8]
  402e70:	fcmpe	d1, d0
  402e74:	b.le	402e44 <find_largest_number+0x5c>
  402e78:	fcvtzs	w0, d1
  402e7c:	b	402e44 <find_largest_number+0x5c>
  402e80:	ldr	x0, [x20, #8]
  402e84:	bl	402de8 <find_largest_number>
  402e88:	mov	w19, w0
  402e8c:	ldr	x0, [x20, #16]
  402e90:	bl	402de8 <find_largest_number>
  402e94:	cmp	w19, w0
  402e98:	csel	w0, w19, w0, ge  // ge = tcont
  402e9c:	ldp	x19, x20, [sp, #16]
  402ea0:	ldp	x29, x30, [sp], #32
  402ea4:	ret

0000000000402ea8 <apply_condition>:
  402ea8:	stp	x29, x30, [sp, #-32]!
  402eac:	mov	x29, sp
  402eb0:	stp	x19, x20, [sp, #16]
  402eb4:	mov	x20, x0
  402eb8:	mov	w19, w1
  402ebc:	ldr	w0, [x20]
  402ec0:	cmp	w0, #0x1
  402ec4:	cbz	w0, 402f60 <apply_condition+0xb8>
  402ec8:	b.eq	402f7c <apply_condition+0xd4>  // b.none
  402ecc:	cmp	w0, #0x2
  402ed0:	mov	w0, #0x0                   	// #0
  402ed4:	b.eq	402ee4 <apply_condition+0x3c>  // b.none
  402ed8:	ldp	x19, x20, [sp, #16]
  402edc:	ldp	x29, x30, [sp], #32
  402ee0:	ret
  402ee4:	ldr	x5, [x20, #8]
  402ee8:	ldr	x0, [x5]
  402eec:	ldr	w0, [x0, #4]
  402ef0:	cmp	w0, #0x0
  402ef4:	b.le	402f00 <apply_condition+0x58>
  402ef8:	sdiv	w1, w19, w0
  402efc:	msub	w19, w1, w0, w19
  402f00:	ldr	x0, [x5, #16]
  402f04:	ldr	x3, [x0, #8]
  402f08:	cbz	x3, 402f48 <apply_condition+0xa0>
  402f0c:	ldr	x4, [x0]
  402f10:	mov	x0, #0x0                   	// #0
  402f14:	nop
  402f18:	ldr	x1, [x4, x0, lsl #3]
  402f1c:	add	x0, x0, #0x1
  402f20:	ldr	x2, [x1]
  402f24:	ldr	w2, [x2, #8]
  402f28:	cmp	w2, w19
  402f2c:	b.gt	402f40 <apply_condition+0x98>
  402f30:	ldr	x1, [x1, #8]
  402f34:	ldr	w1, [x1, #8]
  402f38:	cmp	w1, w19
  402f3c:	b.ge	402f94 <apply_condition+0xec>  // b.tcont
  402f40:	cmp	x0, x3
  402f44:	b.ne	402f18 <apply_condition+0x70>  // b.any
  402f48:	ldr	w0, [x5, #8]
  402f4c:	ldp	x19, x20, [sp, #16]
  402f50:	cmp	w0, #0x0
  402f54:	cset	w0, ne  // ne = any
  402f58:	ldp	x29, x30, [sp], #32
  402f5c:	ret
  402f60:	ldr	x0, [x20, #8]
  402f64:	mov	w1, w19
  402f68:	bl	402ea8 <apply_condition>
  402f6c:	ands	w0, w0, #0xff
  402f70:	b.eq	402ed8 <apply_condition+0x30>  // b.none
  402f74:	ldr	x20, [x20, #16]
  402f78:	b	402ebc <apply_condition+0x14>
  402f7c:	ldr	x0, [x20, #8]
  402f80:	mov	w1, w19
  402f84:	bl	402ea8 <apply_condition>
  402f88:	ands	w0, w0, #0xff
  402f8c:	b.ne	402ed8 <apply_condition+0x30>  // b.any
  402f90:	b	402f74 <apply_condition+0xcc>
  402f94:	ldr	w0, [x5, #8]
  402f98:	cmp	w0, #0x0
  402f9c:	cset	w0, eq  // eq = none
  402fa0:	b	402ed8 <apply_condition+0x30>
  402fa4:	nop

0000000000402fa8 <print_condition_greater>:
  402fa8:	ldr	w2, [x0]
  402fac:	cmp	w2, #0x2
  402fb0:	b.eq	402fbc <print_condition_greater+0x14>  // b.none
  402fb4:	mov	w0, #0x0                   	// #0
  402fb8:	ret
  402fbc:	ldr	x2, [x0, #8]
  402fc0:	mov	w0, #0x0                   	// #0
  402fc4:	ldr	w3, [x2, #8]
  402fc8:	cbnz	w3, 403054 <print_condition_greater+0xac>
  402fcc:	ldr	x0, [x2, #16]
  402fd0:	ldp	x8, x7, [x0]
  402fd4:	cbz	x7, 403058 <print_condition_greater+0xb0>
  402fd8:	mov	w3, #0xffffffff            	// #-1
  402fdc:	mov	x2, #0x0                   	// #0
  402fe0:	ldr	x4, [x8, x2, lsl #3]
  402fe4:	add	w3, w3, #0x1
  402fe8:	add	x2, x2, #0x1
  402fec:	ldr	x5, [x4]
  402ff0:	ldr	w6, [x5]
  402ff4:	cbnz	w6, 402fb4 <print_condition_greater+0xc>
  402ff8:	ldr	x4, [x4, #8]
  402ffc:	ldr	w6, [x4]
  403000:	cbnz	w6, 402fb4 <print_condition_greater+0xc>
  403004:	ldr	w0, [x5, #8]
  403008:	cmp	w0, w3
  40300c:	b.ne	402fb4 <print_condition_greater+0xc>  // b.any
  403010:	ldr	w3, [x4, #8]
  403014:	cmp	x2, x7
  403018:	b.ne	402fe0 <print_condition_greater+0x38>  // b.any
  40301c:	lsl	x2, x2, #3
  403020:	sub	x2, x2, #0x8
  403024:	stp	x29, x30, [sp, #-16]!
  403028:	mov	x0, x1
  40302c:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  403030:	mov	x29, sp
  403034:	ldr	x2, [x8, x2]
  403038:	add	x1, x1, #0xe18
  40303c:	ldr	x2, [x2, #8]
  403040:	ldr	w2, [x2, #8]
  403044:	bl	4015b0 <fprintf@plt>
  403048:	mov	w0, #0x1                   	// #1
  40304c:	ldp	x29, x30, [sp], #16
  403050:	ret
  403054:	ret
  403058:	mov	x2, #0xfffffffffffffff8    	// #-8
  40305c:	b	403024 <print_condition_greater+0x7c>

0000000000403060 <print_condition_negation>:
  403060:	ldr	w2, [x0]
  403064:	cmp	w2, #0x2
  403068:	b.eq	403074 <print_condition_negation+0x14>  // b.none
  40306c:	mov	w0, #0x0                   	// #0
  403070:	ret
  403074:	ldr	x2, [x0, #8]
  403078:	mov	w0, #0x0                   	// #0
  40307c:	ldr	w3, [x2, #8]
  403080:	cbnz	w3, 4030ac <print_condition_negation+0x4c>
  403084:	stp	x29, x30, [sp, #-32]!
  403088:	mov	x29, sp
  40308c:	ldr	x2, [x2, #16]
  403090:	str	x19, [sp, #16]
  403094:	ldr	x19, [x2, #8]
  403098:	cmp	x19, #0x1
  40309c:	b.eq	4030b0 <print_condition_negation+0x50>  // b.none
  4030a0:	ldr	x19, [sp, #16]
  4030a4:	ldp	x29, x30, [sp], #32
  4030a8:	ret
  4030ac:	ret
  4030b0:	ldr	x2, [x2]
  4030b4:	ldr	x2, [x2]
  4030b8:	ldp	x3, x2, [x2]
  4030bc:	cmp	x3, x2
  4030c0:	b.ne	4030a0 <print_condition_negation+0x40>  // b.any
  4030c4:	ldr	w2, [x3, #8]
  4030c8:	mov	x0, x1
  4030cc:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  4030d0:	add	x1, x1, #0xe38
  4030d4:	bl	4015b0 <fprintf@plt>
  4030d8:	mov	w0, w19
  4030dc:	b	4030a0 <print_condition_negation+0x40>

00000000004030e0 <print_condition>:
  4030e0:	stp	x29, x30, [sp, #-96]!
  4030e4:	mov	x29, sp
  4030e8:	stp	x19, x20, [sp, #16]
  4030ec:	mov	x19, x3
  4030f0:	ldr	w20, [x0]
  4030f4:	stp	x21, x22, [sp, #32]
  4030f8:	mov	x21, x0
  4030fc:	mov	w22, w1
  403100:	cbz	w20, 403128 <print_condition+0x48>
  403104:	cmp	w20, #0x1
  403108:	b.eq	4032f4 <print_condition+0x214>  // b.none
  40310c:	cmp	w20, #0x2
  403110:	mov	w0, #0x0                   	// #0
  403114:	b.eq	403180 <print_condition+0xa0>  // b.none
  403118:	ldp	x19, x20, [sp, #16]
  40311c:	ldp	x21, x22, [sp, #32]
  403120:	ldp	x29, x30, [sp], #96
  403124:	ret
  403128:	cmp	w1, #0x1
  40312c:	b.eq	40333c <print_condition+0x25c>  // b.none
  403130:	ldr	x0, [x0, #8]
  403134:	mov	w2, #0x0                   	// #0
  403138:	mov	w1, #0x0                   	// #0
  40313c:	bl	4030e0 <print_condition>
  403140:	mov	x3, x19
  403144:	mov	x2, #0x4                   	// #4
  403148:	mov	x1, #0x1                   	// #1
  40314c:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  403150:	add	x0, x0, #0xe78
  403154:	bl	401510 <fwrite@plt>
  403158:	ldr	x0, [x21, #16]
  40315c:	mov	x3, x19
  403160:	mov	w2, #0x0                   	// #0
  403164:	mov	w1, #0x0                   	// #0
  403168:	bl	4030e0 <print_condition>
  40316c:	mov	w0, #0x1                   	// #1
  403170:	ldp	x19, x20, [sp, #16]
  403174:	ldp	x21, x22, [sp, #32]
  403178:	ldp	x29, x30, [sp], #96
  40317c:	ret
  403180:	ldr	x20, [x21, #8]
  403184:	stp	x23, x24, [sp, #48]
  403188:	and	w23, w2, #0xff
  40318c:	ldr	w2, [x20, #8]
  403190:	ldr	x0, [x20, #16]
  403194:	ldr	x1, [x0, #8]
  403198:	cbnz	w2, 40339c <print_condition+0x2bc>
  40319c:	cbnz	w22, 4031a8 <print_condition+0xc8>
  4031a0:	cmp	x1, #0x1
  4031a4:	b.hi	40350c <print_condition+0x42c>  // b.pmore
  4031a8:	cbz	x1, 4035b0 <print_condition+0x4d0>
  4031ac:	ldr	x0, [x0]
  4031b0:	cmp	w23, #0x0
  4031b4:	stp	x25, x26, [sp, #64]
  4031b8:	adrp	x25, 404000 <cldr_plural_rule_list_print+0x1b0>
  4031bc:	add	x25, x25, #0xe88
  4031c0:	stp	x27, x28, [sp, #80]
  4031c4:	adrp	x28, 404000 <cldr_plural_rule_list_print+0x1b0>
  4031c8:	add	x28, x28, #0xeb0
  4031cc:	ldr	x24, [x0]
  4031d0:	adrp	x27, 404000 <cldr_plural_rule_list_print+0x1b0>
  4031d4:	adrp	x26, 404000 <cldr_plural_rule_list_print+0x1b0>
  4031d8:	csel	x28, x28, x25, ne  // ne = any
  4031dc:	add	x27, x27, #0xe98
  4031e0:	add	x26, x26, #0xe78
  4031e4:	mov	x21, #0x0                   	// #0
  4031e8:	ldp	x0, x1, [x24]
  4031ec:	ldr	w0, [x0, #8]
  4031f0:	ldr	w1, [x1, #8]
  4031f4:	cmp	w0, w1
  4031f8:	b.eq	4035bc <print_condition+0x4dc>  // b.none
  4031fc:	cbz	w0, 403524 <print_condition+0x444>
  403200:	cmp	w22, #0x1
  403204:	b.eq	403218 <print_condition+0x138>  // b.none
  403208:	ldr	x0, [x20, #16]
  40320c:	ldr	x0, [x0, #8]
  403210:	cmp	x0, #0x1
  403214:	b.ls	403224 <print_condition+0x144>  // b.plast
  403218:	mov	x1, x19
  40321c:	mov	w0, #0x28                  	// #40
  403220:	bl	401340 <fputc@plt>
  403224:	ldr	x0, [x20]
  403228:	ldr	w2, [x0, #4]
  40322c:	cbz	w2, 4036dc <print_condition+0x5fc>
  403230:	mov	x1, x25
  403234:	mov	x0, x19
  403238:	bl	4015b0 <fprintf@plt>
  40323c:	ldr	x2, [x24]
  403240:	mov	x1, x27
  403244:	mov	x0, x19
  403248:	ldr	w2, [x2, #8]
  40324c:	bl	4015b0 <fprintf@plt>
  403250:	mov	x2, #0x4                   	// #4
  403254:	mov	x3, x19
  403258:	mov	x0, x26
  40325c:	mov	x1, #0x1                   	// #1
  403260:	bl	401510 <fwrite@plt>
  403264:	ldr	x0, [x20]
  403268:	ldr	w2, [x0, #4]
  40326c:	cbz	w2, 4036cc <print_condition+0x5ec>
  403270:	mov	x1, x25
  403274:	mov	x0, x19
  403278:	bl	4015b0 <fprintf@plt>
  40327c:	ldr	x2, [x24, #8]
  403280:	mov	x0, x19
  403284:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  403288:	add	x1, x1, #0xe90
  40328c:	ldr	w2, [x2, #8]
  403290:	bl	4015b0 <fprintf@plt>
  403294:	cmp	w22, #0x1
  403298:	b.eq	4032ac <print_condition+0x1cc>  // b.none
  40329c:	ldr	x0, [x20, #16]
  4032a0:	ldr	x1, [x0, #8]
  4032a4:	cmp	x1, #0x1
  4032a8:	b.ls	4032c0 <print_condition+0x1e0>  // b.plast
  4032ac:	mov	x1, x19
  4032b0:	mov	w0, #0x29                  	// #41
  4032b4:	bl	401340 <fputc@plt>
  4032b8:	ldr	x0, [x20, #16]
  4032bc:	ldr	x1, [x0, #8]
  4032c0:	add	x21, x21, #0x1
  4032c4:	cmp	x21, x1
  4032c8:	b.cs	40370c <print_condition+0x62c>  // b.hs, b.nlast
  4032cc:	ldr	x0, [x0]
  4032d0:	ldr	x24, [x0, x21, lsl #3]
  4032d4:	cbz	x21, 4031e8 <print_condition+0x108>
  4032d8:	mov	x3, x19
  4032dc:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  4032e0:	mov	x2, #0x4                   	// #4
  4032e4:	mov	x1, #0x1                   	// #1
  4032e8:	add	x0, x0, #0xe80
  4032ec:	bl	401510 <fwrite@plt>
  4032f0:	b	4031e8 <print_condition+0x108>
  4032f4:	cbz	w1, 40366c <print_condition+0x58c>
  4032f8:	ldr	x0, [x0, #8]
  4032fc:	mov	w1, w20
  403300:	mov	w2, #0x0                   	// #0
  403304:	bl	4030e0 <print_condition>
  403308:	mov	x3, x19
  40330c:	mov	x2, #0x4                   	// #4
  403310:	mov	x1, #0x1                   	// #1
  403314:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  403318:	add	x0, x0, #0xe80
  40331c:	bl	401510 <fwrite@plt>
  403320:	ldr	x0, [x21, #16]
  403324:	mov	x3, x19
  403328:	mov	w1, w20
  40332c:	mov	w2, #0x0                   	// #0
  403330:	bl	4030e0 <print_condition>
  403334:	mov	w0, w20
  403338:	b	403118 <print_condition+0x38>
  40333c:	mov	x1, x3
  403340:	mov	w0, #0x28                  	// #40
  403344:	bl	401340 <fputc@plt>
  403348:	ldr	x0, [x21, #8]
  40334c:	mov	x3, x19
  403350:	mov	w2, #0x0                   	// #0
  403354:	mov	w1, #0x0                   	// #0
  403358:	bl	4030e0 <print_condition>
  40335c:	mov	x3, x19
  403360:	mov	x2, #0x4                   	// #4
  403364:	mov	x1, #0x1                   	// #1
  403368:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  40336c:	add	x0, x0, #0xe78
  403370:	bl	401510 <fwrite@plt>
  403374:	ldr	x0, [x21, #16]
  403378:	mov	x3, x19
  40337c:	mov	w2, #0x0                   	// #0
  403380:	mov	w1, #0x0                   	// #0
  403384:	bl	4030e0 <print_condition>
  403388:	mov	x1, x19
  40338c:	mov	w0, #0x29                  	// #41
  403390:	bl	401340 <fputc@plt>
  403394:	mov	w0, w22
  403398:	b	403118 <print_condition+0x38>
  40339c:	cmp	w22, #0x1
  4033a0:	b.eq	4034ec <print_condition+0x40c>  // b.none
  4033a4:	cbz	x1, 4035b0 <print_condition+0x4d0>
  4033a8:	ldr	x0, [x0]
  4033ac:	cmp	w23, #0x0
  4033b0:	stp	x25, x26, [sp, #64]
  4033b4:	adrp	x25, 404000 <cldr_plural_rule_list_print+0x1b0>
  4033b8:	add	x25, x25, #0xe88
  4033bc:	stp	x27, x28, [sp, #80]
  4033c0:	adrp	x28, 404000 <cldr_plural_rule_list_print+0x1b0>
  4033c4:	add	x28, x28, #0xeb0
  4033c8:	ldr	x24, [x0]
  4033cc:	adrp	x27, 404000 <cldr_plural_rule_list_print+0x1b0>
  4033d0:	adrp	x26, 404000 <cldr_plural_rule_list_print+0x1b0>
  4033d4:	csel	x28, x28, x25, ne  // ne = any
  4033d8:	add	x27, x27, #0xea8
  4033dc:	add	x26, x26, #0xe80
  4033e0:	mov	x21, #0x0                   	// #0
  4033e4:	nop
  4033e8:	ldp	x0, x1, [x24]
  4033ec:	ldr	w0, [x0, #8]
  4033f0:	ldr	w1, [x1, #8]
  4033f4:	cmp	w0, w1
  4033f8:	b.eq	403614 <print_condition+0x534>  // b.none
  4033fc:	cbz	w0, 403560 <print_condition+0x480>
  403400:	cbz	w22, 403414 <print_condition+0x334>
  403404:	ldr	x0, [x20, #16]
  403408:	ldr	x0, [x0, #8]
  40340c:	cmp	x0, #0x1
  403410:	b.ls	403420 <print_condition+0x340>  // b.plast
  403414:	mov	x1, x19
  403418:	mov	w0, #0x28                  	// #40
  40341c:	bl	401340 <fputc@plt>
  403420:	ldr	x0, [x20]
  403424:	ldr	w2, [x0, #4]
  403428:	cbz	w2, 4036fc <print_condition+0x61c>
  40342c:	mov	x1, x25
  403430:	mov	x0, x19
  403434:	bl	4015b0 <fprintf@plt>
  403438:	ldr	x2, [x24]
  40343c:	mov	x1, x27
  403440:	mov	x0, x19
  403444:	ldr	w2, [x2, #8]
  403448:	bl	4015b0 <fprintf@plt>
  40344c:	mov	x2, #0x4                   	// #4
  403450:	mov	x3, x19
  403454:	mov	x0, x26
  403458:	mov	x1, #0x1                   	// #1
  40345c:	bl	401510 <fwrite@plt>
  403460:	ldr	x0, [x20]
  403464:	ldr	w2, [x0, #4]
  403468:	cbz	w2, 4036ec <print_condition+0x60c>
  40346c:	mov	x1, x25
  403470:	mov	x0, x19
  403474:	bl	4015b0 <fprintf@plt>
  403478:	ldr	x2, [x24, #8]
  40347c:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  403480:	mov	x0, x19
  403484:	add	x1, x1, #0xea0
  403488:	ldr	w2, [x2, #8]
  40348c:	bl	4015b0 <fprintf@plt>
  403490:	cbz	w22, 4034a4 <print_condition+0x3c4>
  403494:	ldr	x0, [x20, #16]
  403498:	ldr	x1, [x0, #8]
  40349c:	cmp	x1, #0x1
  4034a0:	b.ls	4034b8 <print_condition+0x3d8>  // b.plast
  4034a4:	mov	x1, x19
  4034a8:	mov	w0, #0x29                  	// #41
  4034ac:	bl	401340 <fputc@plt>
  4034b0:	ldr	x0, [x20, #16]
  4034b4:	ldr	x1, [x0, #8]
  4034b8:	add	x21, x21, #0x1
  4034bc:	cmp	x21, x1
  4034c0:	b.cs	40359c <print_condition+0x4bc>  // b.hs, b.nlast
  4034c4:	ldr	x0, [x0]
  4034c8:	ldr	x24, [x0, x21, lsl #3]
  4034cc:	cbz	x21, 4033e8 <print_condition+0x308>
  4034d0:	mov	x3, x19
  4034d4:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  4034d8:	mov	x2, #0x4                   	// #4
  4034dc:	mov	x1, #0x1                   	// #1
  4034e0:	add	x0, x0, #0xe78
  4034e4:	bl	401510 <fwrite@plt>
  4034e8:	b	4033e8 <print_condition+0x308>
  4034ec:	cmp	x1, #0x1
  4034f0:	b.ls	4033a4 <print_condition+0x2c4>  // b.plast
  4034f4:	mov	x1, x3
  4034f8:	mov	w0, #0x28                  	// #40
  4034fc:	bl	401340 <fputc@plt>
  403500:	ldr	x0, [x20, #16]
  403504:	ldr	x1, [x0, #8]
  403508:	b	4033a4 <print_condition+0x2c4>
  40350c:	mov	x1, x3
  403510:	mov	w0, #0x28                  	// #40
  403514:	bl	401340 <fputc@plt>
  403518:	ldr	x0, [x20, #16]
  40351c:	ldr	x1, [x0, #8]
  403520:	b	4031a8 <print_condition+0xc8>
  403524:	ldr	x0, [x20]
  403528:	ldr	w2, [x0, #4]
  40352c:	cbz	w2, 403760 <print_condition+0x680>
  403530:	mov	x1, x25
  403534:	mov	x0, x19
  403538:	bl	4015b0 <fprintf@plt>
  40353c:	ldr	x2, [x24, #8]
  403540:	mov	x0, x19
  403544:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  403548:	add	x1, x1, #0xe90
  40354c:	ldr	w2, [x2, #8]
  403550:	bl	4015b0 <fprintf@plt>
  403554:	ldr	x0, [x20, #16]
  403558:	ldr	x1, [x0, #8]
  40355c:	b	4032c0 <print_condition+0x1e0>
  403560:	ldr	x0, [x20]
  403564:	ldr	w2, [x0, #4]
  403568:	cbz	w2, 403750 <print_condition+0x670>
  40356c:	mov	x1, x25
  403570:	mov	x0, x19
  403574:	bl	4015b0 <fprintf@plt>
  403578:	ldr	x2, [x24, #8]
  40357c:	mov	x0, x19
  403580:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  403584:	add	x1, x1, #0xea0
  403588:	ldr	w2, [x2, #8]
  40358c:	bl	4015b0 <fprintf@plt>
  403590:	ldr	x0, [x20, #16]
  403594:	ldr	x1, [x0, #8]
  403598:	b	4034b8 <print_condition+0x3d8>
  40359c:	cmp	x1, #0x1
  4035a0:	ccmp	w22, #0x1, #0x0, hi  // hi = pmore
  4035a4:	b.eq	403718 <print_condition+0x638>  // b.none
  4035a8:	ldp	x25, x26, [sp, #64]
  4035ac:	ldp	x27, x28, [sp, #80]
  4035b0:	mov	w0, #0x1                   	// #1
  4035b4:	ldp	x23, x24, [sp, #48]
  4035b8:	b	403118 <print_condition+0x38>
  4035bc:	ldr	x0, [x20]
  4035c0:	ldr	w2, [x0, #4]
  4035c4:	cbz	w2, 403780 <print_condition+0x6a0>
  4035c8:	mov	x1, x28
  4035cc:	mov	x0, x19
  4035d0:	bl	4015b0 <fprintf@plt>
  4035d4:	cbz	w23, 403744 <print_condition+0x664>
  4035d8:	ldr	x2, [x20, #16]
  4035dc:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  4035e0:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  4035e4:	add	x0, x0, #0xe60
  4035e8:	add	x1, x1, #0xe58
  4035ec:	ldr	x2, [x2, #8]
  4035f0:	cmp	x2, #0x1
  4035f4:	csel	x1, x1, x0, ne  // ne = any
  4035f8:	ldr	x2, [x24]
  4035fc:	mov	x0, x19
  403600:	ldr	w2, [x2, #8]
  403604:	bl	4015b0 <fprintf@plt>
  403608:	ldr	x0, [x20, #16]
  40360c:	ldr	x1, [x0, #8]
  403610:	b	4032c0 <print_condition+0x1e0>
  403614:	ldr	x0, [x20]
  403618:	ldr	w2, [x0, #4]
  40361c:	cbz	w2, 403770 <print_condition+0x690>
  403620:	mov	x1, x28
  403624:	mov	x0, x19
  403628:	bl	4015b0 <fprintf@plt>
  40362c:	cbz	w23, 403738 <print_condition+0x658>
  403630:	ldr	x2, [x20, #16]
  403634:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  403638:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  40363c:	add	x0, x0, #0xe70
  403640:	add	x1, x1, #0xe68
  403644:	ldr	x2, [x2, #8]
  403648:	cmp	x2, #0x1
  40364c:	csel	x1, x1, x0, ne  // ne = any
  403650:	ldr	x2, [x24]
  403654:	mov	x0, x19
  403658:	ldr	w2, [x2, #8]
  40365c:	bl	4015b0 <fprintf@plt>
  403660:	ldr	x0, [x20, #16]
  403664:	ldr	x1, [x0, #8]
  403668:	b	4034b8 <print_condition+0x3d8>
  40366c:	mov	x1, x3
  403670:	mov	w0, #0x28                  	// #40
  403674:	bl	401340 <fputc@plt>
  403678:	ldr	x0, [x21, #8]
  40367c:	mov	x3, x19
  403680:	mov	w1, w20
  403684:	mov	w2, #0x0                   	// #0
  403688:	bl	4030e0 <print_condition>
  40368c:	mov	x3, x19
  403690:	mov	x2, #0x4                   	// #4
  403694:	mov	x1, #0x1                   	// #1
  403698:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  40369c:	add	x0, x0, #0xe80
  4036a0:	bl	401510 <fwrite@plt>
  4036a4:	ldr	x0, [x21, #16]
  4036a8:	mov	x3, x19
  4036ac:	mov	w2, #0x0                   	// #0
  4036b0:	mov	w1, w20
  4036b4:	bl	4030e0 <print_condition>
  4036b8:	mov	x1, x19
  4036bc:	mov	w0, #0x29                  	// #41
  4036c0:	bl	401340 <fputc@plt>
  4036c4:	mov	w0, w20
  4036c8:	b	403118 <print_condition+0x38>
  4036cc:	mov	x1, x19
  4036d0:	mov	w0, #0x6e                  	// #110
  4036d4:	bl	401340 <fputc@plt>
  4036d8:	b	40327c <print_condition+0x19c>
  4036dc:	mov	x1, x19
  4036e0:	mov	w0, #0x6e                  	// #110
  4036e4:	bl	401340 <fputc@plt>
  4036e8:	b	40323c <print_condition+0x15c>
  4036ec:	mov	x1, x19
  4036f0:	mov	w0, #0x6e                  	// #110
  4036f4:	bl	401340 <fputc@plt>
  4036f8:	b	403478 <print_condition+0x398>
  4036fc:	mov	x1, x19
  403700:	mov	w0, #0x6e                  	// #110
  403704:	bl	401340 <fputc@plt>
  403708:	b	403438 <print_condition+0x358>
  40370c:	cmp	w22, #0x0
  403710:	ccmp	x1, #0x1, #0x0, eq  // eq = none
  403714:	b.ls	4035a8 <print_condition+0x4c8>  // b.plast
  403718:	mov	x1, x19
  40371c:	mov	w0, #0x29                  	// #41
  403720:	bl	401340 <fputc@plt>
  403724:	mov	w0, #0x1                   	// #1
  403728:	ldp	x23, x24, [sp, #48]
  40372c:	ldp	x25, x26, [sp, #64]
  403730:	ldp	x27, x28, [sp, #80]
  403734:	b	403118 <print_condition+0x38>
  403738:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  40373c:	add	x1, x1, #0xe68
  403740:	b	403650 <print_condition+0x570>
  403744:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  403748:	add	x1, x1, #0xe58
  40374c:	b	4035f8 <print_condition+0x518>
  403750:	mov	x1, x19
  403754:	mov	w0, #0x6e                  	// #110
  403758:	bl	401340 <fputc@plt>
  40375c:	b	403578 <print_condition+0x498>
  403760:	mov	x1, x19
  403764:	mov	w0, #0x6e                  	// #110
  403768:	bl	401340 <fputc@plt>
  40376c:	b	40353c <print_condition+0x45c>
  403770:	mov	x1, x19
  403774:	mov	w0, #0x6e                  	// #110
  403778:	bl	401340 <fputc@plt>
  40377c:	b	40362c <print_condition+0x54c>
  403780:	mov	x1, x19
  403784:	mov	w0, #0x6e                  	// #110
  403788:	bl	401340 <fputc@plt>
  40378c:	b	4035d4 <print_condition+0x4f4>

0000000000403790 <cldr_plural_range_free>:
  403790:	stp	x29, x30, [sp, #-32]!
  403794:	mov	x29, sp
  403798:	ldr	x1, [x0]
  40379c:	str	x19, [sp, #16]
  4037a0:	mov	x19, x0
  4037a4:	ldr	x0, [x0, #8]
  4037a8:	cmp	x1, x0
  4037ac:	b.eq	4037bc <cldr_plural_range_free+0x2c>  // b.none
  4037b0:	mov	x0, x1
  4037b4:	bl	401500 <free@plt>
  4037b8:	ldr	x0, [x19, #8]
  4037bc:	bl	401500 <free@plt>
  4037c0:	mov	x0, x19
  4037c4:	ldr	x19, [sp, #16]
  4037c8:	ldp	x29, x30, [sp], #32
  4037cc:	b	401500 <free@plt>

00000000004037d0 <cldr_plural_range_list_free>:
  4037d0:	stp	x29, x30, [sp, #-32]!
  4037d4:	mov	x29, sp
  4037d8:	stp	x19, x20, [sp, #16]
  4037dc:	mov	x20, x0
  4037e0:	ldr	x1, [x0, #8]
  4037e4:	sub	x0, x1, #0x1
  4037e8:	str	x0, [x20, #8]
  4037ec:	cbz	x1, 403828 <cldr_plural_range_list_free+0x58>
  4037f0:	ldr	x1, [x20]
  4037f4:	ldr	x19, [x1, x0, lsl #3]
  4037f8:	ldp	x0, x1, [x19]
  4037fc:	cmp	x0, x1
  403800:	b.eq	40380c <cldr_plural_range_list_free+0x3c>  // b.none
  403804:	bl	401500 <free@plt>
  403808:	ldr	x0, [x19, #8]
  40380c:	bl	401500 <free@plt>
  403810:	mov	x0, x19
  403814:	bl	401500 <free@plt>
  403818:	ldr	x1, [x20, #8]
  40381c:	sub	x0, x1, #0x1
  403820:	str	x0, [x20, #8]
  403824:	cbnz	x1, 4037f0 <cldr_plural_range_list_free+0x20>
  403828:	ldr	x0, [x20]
  40382c:	bl	401500 <free@plt>
  403830:	mov	x0, x20
  403834:	ldp	x19, x20, [sp, #16]
  403838:	ldp	x29, x30, [sp], #32
  40383c:	b	401500 <free@plt>

0000000000403840 <cldr_plural_condition_free>:
  403840:	stp	x29, x30, [sp, #-48]!
  403844:	mov	x29, sp
  403848:	stp	x19, x20, [sp, #16]
  40384c:	mov	x19, x0
  403850:	ldr	w0, [x0]
  403854:	cmp	w0, #0x1
  403858:	b.ls	403874 <cldr_plural_condition_free+0x34>  // b.plast
  40385c:	cmp	w0, #0x2
  403860:	b.eq	403894 <cldr_plural_condition_free+0x54>  // b.none
  403864:	mov	x0, x19
  403868:	ldp	x19, x20, [sp, #16]
  40386c:	ldp	x29, x30, [sp], #48
  403870:	b	401500 <free@plt>
  403874:	ldr	x0, [x19, #8]
  403878:	bl	403840 <cldr_plural_condition_free>
  40387c:	ldr	x0, [x19, #16]
  403880:	bl	403840 <cldr_plural_condition_free>
  403884:	mov	x0, x19
  403888:	ldp	x19, x20, [sp, #16]
  40388c:	ldp	x29, x30, [sp], #48
  403890:	b	401500 <free@plt>
  403894:	stp	x21, x22, [sp, #32]
  403898:	ldr	x22, [x19, #8]
  40389c:	ldr	x0, [x22]
  4038a0:	bl	401500 <free@plt>
  4038a4:	ldr	x21, [x22, #16]
  4038a8:	ldr	x1, [x21, #8]
  4038ac:	sub	x0, x1, #0x1
  4038b0:	str	x0, [x21, #8]
  4038b4:	cbz	x1, 4038f0 <cldr_plural_condition_free+0xb0>
  4038b8:	ldr	x1, [x21]
  4038bc:	ldr	x20, [x1, x0, lsl #3]
  4038c0:	ldp	x0, x1, [x20]
  4038c4:	cmp	x0, x1
  4038c8:	b.eq	4038d4 <cldr_plural_condition_free+0x94>  // b.none
  4038cc:	bl	401500 <free@plt>
  4038d0:	ldr	x0, [x20, #8]
  4038d4:	bl	401500 <free@plt>
  4038d8:	mov	x0, x20
  4038dc:	bl	401500 <free@plt>
  4038e0:	ldr	x1, [x21, #8]
  4038e4:	sub	x0, x1, #0x1
  4038e8:	str	x0, [x21, #8]
  4038ec:	cbnz	x1, 4038b8 <cldr_plural_condition_free+0x78>
  4038f0:	ldr	x0, [x21]
  4038f4:	bl	401500 <free@plt>
  4038f8:	mov	x0, x21
  4038fc:	bl	401500 <free@plt>
  403900:	mov	x0, x22
  403904:	bl	401500 <free@plt>
  403908:	mov	x0, x19
  40390c:	ldp	x19, x20, [sp, #16]
  403910:	ldp	x21, x22, [sp, #32]
  403914:	ldp	x29, x30, [sp], #48
  403918:	b	401500 <free@plt>
  40391c:	nop

0000000000403920 <eval_condition>:
  403920:	stp	x29, x30, [sp, #-64]!
  403924:	mov	x29, sp
  403928:	stp	x19, x20, [sp, #16]
  40392c:	mov	x19, x0
  403930:	ldr	w0, [x0]
  403934:	stp	x21, x22, [sp, #32]
  403938:	ldr	x22, [x19, #8]
  40393c:	cbz	w0, 4039f0 <eval_condition+0xd0>
  403940:	cmp	w0, #0x1
  403944:	b.eq	403990 <eval_condition+0x70>  // b.none
  403948:	ldr	x0, [x22]
  40394c:	ldr	w1, [x0]
  403950:	sub	w2, w1, #0x66
  403954:	cmp	w2, #0x11
  403958:	b.hi	403980 <eval_condition+0x60>  // b.pmore
  40395c:	mov	x1, #0x1                   	// #1
  403960:	mov	x3, #0x4001                	// #16385
  403964:	movk	x3, #0x3, lsl #16
  403968:	lsl	x1, x1, x2
  40396c:	tst	x1, x3
  403970:	b.ne	403b24 <eval_condition+0x204>  // b.any
  403974:	mov	x2, #0x108                 	// #264
  403978:	tst	x1, x2
  40397c:	b.ne	403a9c <eval_condition+0x17c>  // b.any
  403980:	ldp	x19, x20, [sp, #16]
  403984:	ldp	x21, x22, [sp, #32]
  403988:	ldp	x29, x30, [sp], #64
  40398c:	ret
  403990:	mov	x0, x22
  403994:	bl	403920 <eval_condition>
  403998:	ldr	x0, [x19, #16]
  40399c:	bl	403920 <eval_condition>
  4039a0:	ldr	x20, [x19, #8]
  4039a4:	ldr	w0, [x20]
  4039a8:	cmp	w0, #0x3
  4039ac:	b.eq	403a74 <eval_condition+0x154>  // b.none
  4039b0:	ldr	x21, [x19, #16]
  4039b4:	ldr	w1, [x21]
  4039b8:	cmp	w1, #0x3
  4039bc:	b.eq	403a74 <eval_condition+0x154>  // b.none
  4039c0:	cmp	w1, #0x4
  4039c4:	ccmp	w0, #0x4, #0x0, eq  // eq = none
  4039c8:	b.eq	403a4c <eval_condition+0x12c>  // b.none
  4039cc:	cmp	w0, #0x4
  4039d0:	b.eq	403cc4 <eval_condition+0x3a4>  // b.none
  4039d4:	cmp	w1, #0x4
  4039d8:	b.ne	403980 <eval_condition+0x60>  // b.any
  4039dc:	mov	x0, x21
  4039e0:	bl	403840 <cldr_plural_condition_free>
  4039e4:	mov	x0, x20
  4039e8:	ldr	x1, [x19, #8]
  4039ec:	b	403cd4 <eval_condition+0x3b4>
  4039f0:	mov	x0, x22
  4039f4:	bl	403920 <eval_condition>
  4039f8:	ldr	x0, [x19, #16]
  4039fc:	bl	403920 <eval_condition>
  403a00:	ldr	x20, [x19, #8]
  403a04:	ldr	w0, [x20]
  403a08:	cmp	w0, #0x4
  403a0c:	b.eq	403a4c <eval_condition+0x12c>  // b.none
  403a10:	ldr	x21, [x19, #16]
  403a14:	ldr	w1, [x21]
  403a18:	cmp	w1, #0x4
  403a1c:	b.eq	403a4c <eval_condition+0x12c>  // b.none
  403a20:	cmp	w1, #0x3
  403a24:	ccmp	w0, #0x3, #0x0, eq  // eq = none
  403a28:	b.eq	403a74 <eval_condition+0x154>  // b.none
  403a2c:	cmp	w0, #0x3
  403a30:	b.eq	403cc4 <eval_condition+0x3a4>  // b.none
  403a34:	cmp	w1, #0x3
  403a38:	b.eq	4039dc <eval_condition+0xbc>  // b.none
  403a3c:	ldp	x19, x20, [sp, #16]
  403a40:	ldp	x21, x22, [sp, #32]
  403a44:	ldp	x29, x30, [sp], #64
  403a48:	ret
  403a4c:	mov	x0, x20
  403a50:	bl	403840 <cldr_plural_condition_free>
  403a54:	ldr	x0, [x19, #16]
  403a58:	bl	403840 <cldr_plural_condition_free>
  403a5c:	mov	w0, #0x4                   	// #4
  403a60:	str	w0, [x19]
  403a64:	ldp	x19, x20, [sp, #16]
  403a68:	ldp	x21, x22, [sp, #32]
  403a6c:	ldp	x29, x30, [sp], #64
  403a70:	ret
  403a74:	mov	x0, x20
  403a78:	bl	403840 <cldr_plural_condition_free>
  403a7c:	ldr	x0, [x19, #16]
  403a80:	bl	403840 <cldr_plural_condition_free>
  403a84:	mov	w0, #0x3                   	// #3
  403a88:	str	w0, [x19]
  403a8c:	ldp	x19, x20, [sp, #16]
  403a90:	ldp	x21, x22, [sp, #32]
  403a94:	ldp	x29, x30, [sp], #64
  403a98:	ret
  403a9c:	ldr	x1, [x22, #16]
  403aa0:	ldr	x5, [x1, #8]
  403aa4:	cbz	x5, 403b0c <eval_condition+0x1ec>
  403aa8:	ldr	x1, [x1]
  403aac:	add	x5, x1, x5, lsl #3
  403ab0:	ldr	x3, [x1]
  403ab4:	add	x1, x1, #0x8
  403ab8:	ldr	x2, [x3]
  403abc:	ldr	w4, [x2]
  403ac0:	cmp	w4, #0x1
  403ac4:	b.ne	403ae4 <eval_condition+0x1c4>  // b.any
  403ac8:	ldr	d0, [x2, #8]
  403acc:	str	wzr, [x2]
  403ad0:	fcvtzs	w4, d0
  403ad4:	scvtf	d1, w4
  403ad8:	fcmp	d0, d1
  403adc:	cinc	w4, w4, ne  // ne = any
  403ae0:	str	w4, [x2, #8]
  403ae4:	ldr	x2, [x3, #8]
  403ae8:	ldr	w3, [x2]
  403aec:	cmp	w3, #0x1
  403af0:	b.ne	403b04 <eval_condition+0x1e4>  // b.any
  403af4:	ldr	d0, [x2, #8]
  403af8:	str	wzr, [x2]
  403afc:	fcvtzs	w3, d0
  403b00:	str	w3, [x2, #8]
  403b04:	cmp	x5, x1
  403b08:	b.ne	403ab0 <eval_condition+0x190>  // b.any
  403b0c:	mov	w1, #0x69                  	// #105
  403b10:	str	w1, [x0]
  403b14:	ldp	x19, x20, [sp, #16]
  403b18:	ldp	x21, x22, [sp, #32]
  403b1c:	ldp	x29, x30, [sp], #64
  403b20:	ret
  403b24:	ldr	x1, [x22, #16]
  403b28:	ldr	x6, [x1, #8]
  403b2c:	str	x23, [sp, #48]
  403b30:	cbz	x6, 403c14 <eval_condition+0x2f4>
  403b34:	ldr	w5, [x22, #8]
  403b38:	mov	x2, #0x0                   	// #0
  403b3c:	ldr	x7, [x1]
  403b40:	ldr	x1, [x7, x2, lsl #3]
  403b44:	cbnz	w5, 403c1c <eval_condition+0x2fc>
  403b48:	ldr	x3, [x1]
  403b4c:	ldr	w4, [x3]
  403b50:	cbnz	w4, 403be0 <eval_condition+0x2c0>
  403b54:	ldr	w3, [x3, #8]
  403b58:	cbz	w3, 403bf4 <eval_condition+0x2d4>
  403b5c:	mov	w23, #0x4                   	// #4
  403b60:	bl	401500 <free@plt>
  403b64:	ldr	x21, [x22, #16]
  403b68:	ldr	x1, [x21, #8]
  403b6c:	sub	x0, x1, #0x1
  403b70:	str	x0, [x21, #8]
  403b74:	cbz	x1, 403bb0 <eval_condition+0x290>
  403b78:	ldr	x1, [x21]
  403b7c:	ldr	x20, [x1, x0, lsl #3]
  403b80:	ldp	x0, x1, [x20]
  403b84:	cmp	x0, x1
  403b88:	b.eq	403b94 <eval_condition+0x274>  // b.none
  403b8c:	bl	401500 <free@plt>
  403b90:	ldr	x0, [x20, #8]
  403b94:	bl	401500 <free@plt>
  403b98:	mov	x0, x20
  403b9c:	bl	401500 <free@plt>
  403ba0:	ldr	x1, [x21, #8]
  403ba4:	sub	x0, x1, #0x1
  403ba8:	str	x0, [x21, #8]
  403bac:	cbnz	x1, 403b78 <eval_condition+0x258>
  403bb0:	ldr	x0, [x21]
  403bb4:	bl	401500 <free@plt>
  403bb8:	mov	x0, x21
  403bbc:	bl	401500 <free@plt>
  403bc0:	mov	x0, x22
  403bc4:	bl	401500 <free@plt>
  403bc8:	str	w23, [x19]
  403bcc:	ldp	x19, x20, [sp, #16]
  403bd0:	ldp	x21, x22, [sp, #32]
  403bd4:	ldr	x23, [sp, #48]
  403bd8:	ldp	x29, x30, [sp], #64
  403bdc:	ret
  403be0:	cmp	w4, #0x1
  403be4:	b.ne	403b5c <eval_condition+0x23c>  // b.any
  403be8:	ldr	d0, [x3, #8]
  403bec:	fcmp	d0, #0.0
  403bf0:	b.ne	403b5c <eval_condition+0x23c>  // b.any
  403bf4:	ldr	x1, [x1, #8]
  403bf8:	ldr	w3, [x1]
  403bfc:	cbnz	w3, 403c5c <eval_condition+0x33c>
  403c00:	ldr	w1, [x1, #8]
  403c04:	cbnz	w1, 403b5c <eval_condition+0x23c>
  403c08:	add	x2, x2, #0x1
  403c0c:	cmp	x2, x6
  403c10:	b.ne	403b40 <eval_condition+0x220>  // b.any
  403c14:	mov	w23, #0x3                   	// #3
  403c18:	b	403b60 <eval_condition+0x240>
  403c1c:	cmp	w5, #0x1
  403c20:	b.ne	403c08 <eval_condition+0x2e8>  // b.any
  403c24:	ldr	x3, [x1]
  403c28:	ldr	w4, [x3]
  403c2c:	cbnz	w4, 403c80 <eval_condition+0x360>
  403c30:	ldr	w3, [x3, #8]
  403c34:	cbz	w3, 403b5c <eval_condition+0x23c>
  403c38:	ldr	x1, [x1, #8]
  403c3c:	ldr	w3, [x1]
  403c40:	cbnz	w3, 403ca0 <eval_condition+0x380>
  403c44:	ldr	w1, [x1, #8]
  403c48:	cbz	w1, 403b5c <eval_condition+0x23c>
  403c4c:	add	x2, x2, #0x1
  403c50:	cmp	x2, x6
  403c54:	b.ne	403b40 <eval_condition+0x220>  // b.any
  403c58:	b	403c14 <eval_condition+0x2f4>
  403c5c:	cmp	w3, #0x1
  403c60:	b.ne	403b5c <eval_condition+0x23c>  // b.any
  403c64:	ldr	d0, [x1, #8]
  403c68:	fcmp	d0, #0.0
  403c6c:	b.ne	403b5c <eval_condition+0x23c>  // b.any
  403c70:	add	x2, x2, #0x1
  403c74:	cmp	x2, x6
  403c78:	b.ne	403b40 <eval_condition+0x220>  // b.any
  403c7c:	b	403c14 <eval_condition+0x2f4>
  403c80:	cmp	w4, #0x1
  403c84:	b.ne	403c38 <eval_condition+0x318>  // b.any
  403c88:	ldr	d0, [x3, #8]
  403c8c:	fcmp	d0, #0.0
  403c90:	b.eq	403b5c <eval_condition+0x23c>  // b.none
  403c94:	ldr	x1, [x1, #8]
  403c98:	ldr	w3, [x1]
  403c9c:	cbz	w3, 403c44 <eval_condition+0x324>
  403ca0:	cmp	w3, #0x1
  403ca4:	b.ne	403c08 <eval_condition+0x2e8>  // b.any
  403ca8:	ldr	d0, [x1, #8]
  403cac:	fcmp	d0, #0.0
  403cb0:	b.eq	403b5c <eval_condition+0x23c>  // b.none
  403cb4:	add	x2, x2, #0x1
  403cb8:	cmp	x2, x6
  403cbc:	b.ne	403b40 <eval_condition+0x220>  // b.any
  403cc0:	b	403c14 <eval_condition+0x2f4>
  403cc4:	mov	x0, x20
  403cc8:	bl	403840 <cldr_plural_condition_free>
  403ccc:	ldr	x1, [x19, #16]
  403cd0:	mov	x0, x21
  403cd4:	ldp	x2, x3, [x1, #8]
  403cd8:	ldr	w1, [x1]
  403cdc:	ldp	x21, x22, [sp, #32]
  403ce0:	str	w1, [x19]
  403ce4:	stp	x2, x3, [x19, #8]
  403ce8:	ldp	x19, x20, [sp, #16]
  403cec:	ldp	x29, x30, [sp], #64
  403cf0:	b	401500 <free@plt>
  403cf4:	nop

0000000000403cf8 <cldr_plural_relation_free>:
  403cf8:	stp	x29, x30, [sp, #-48]!
  403cfc:	mov	x29, sp
  403d00:	stp	x19, x20, [sp, #16]
  403d04:	mov	x20, x0
  403d08:	ldr	x0, [x0]
  403d0c:	bl	401500 <free@plt>
  403d10:	ldr	x19, [x20, #16]
  403d14:	ldr	x0, [x19, #8]
  403d18:	sub	x1, x0, #0x1
  403d1c:	str	x1, [x19, #8]
  403d20:	cbz	x0, 403d64 <cldr_plural_relation_free+0x6c>
  403d24:	str	x21, [sp, #32]
  403d28:	ldr	x0, [x19]
  403d2c:	ldr	x21, [x0, x1, lsl #3]
  403d30:	ldp	x0, x1, [x21]
  403d34:	cmp	x0, x1
  403d38:	b.eq	403d44 <cldr_plural_relation_free+0x4c>  // b.none
  403d3c:	bl	401500 <free@plt>
  403d40:	ldr	x0, [x21, #8]
  403d44:	bl	401500 <free@plt>
  403d48:	mov	x0, x21
  403d4c:	bl	401500 <free@plt>
  403d50:	ldr	x0, [x19, #8]
  403d54:	sub	x1, x0, #0x1
  403d58:	str	x1, [x19, #8]
  403d5c:	cbnz	x0, 403d28 <cldr_plural_relation_free+0x30>
  403d60:	ldr	x21, [sp, #32]
  403d64:	ldr	x0, [x19]
  403d68:	bl	401500 <free@plt>
  403d6c:	mov	x0, x19
  403d70:	bl	401500 <free@plt>
  403d74:	mov	x0, x20
  403d78:	ldp	x19, x20, [sp, #16]
  403d7c:	ldp	x29, x30, [sp], #48
  403d80:	b	401500 <free@plt>
  403d84:	nop

0000000000403d88 <cldr_plural_rule_list_free>:
  403d88:	stp	x29, x30, [sp, #-32]!
  403d8c:	mov	x29, sp
  403d90:	stp	x19, x20, [sp, #16]
  403d94:	mov	x20, x0
  403d98:	ldr	x1, [x0, #8]
  403d9c:	sub	x0, x1, #0x1
  403da0:	str	x0, [x20, #8]
  403da4:	cbz	x1, 403dd8 <cldr_plural_rule_list_free+0x50>
  403da8:	ldr	x1, [x20]
  403dac:	ldr	x19, [x1, x0, lsl #3]
  403db0:	ldr	x0, [x19]
  403db4:	bl	401500 <free@plt>
  403db8:	ldr	x0, [x19, #8]
  403dbc:	bl	403840 <cldr_plural_condition_free>
  403dc0:	mov	x0, x19
  403dc4:	bl	401500 <free@plt>
  403dc8:	ldr	x1, [x20, #8]
  403dcc:	sub	x0, x1, #0x1
  403dd0:	str	x0, [x20, #8]
  403dd4:	cbnz	x1, 403da8 <cldr_plural_rule_list_free+0x20>
  403dd8:	ldr	x0, [x20]
  403ddc:	bl	401500 <free@plt>
  403de0:	mov	x0, x20
  403de4:	ldp	x19, x20, [sp, #16]
  403de8:	ldp	x29, x30, [sp], #32
  403dec:	b	401500 <free@plt>

0000000000403df0 <cldr_plural_parse>:
  403df0:	stp	x29, x30, [sp, #-64]!
  403df4:	mov	x29, sp
  403df8:	str	x19, [sp, #16]
  403dfc:	mov	x19, x0
  403e00:	str	x0, [sp, #40]
  403e04:	stp	xzr, xzr, [sp, #48]
  403e08:	bl	4012c0 <strlen@plt>
  403e0c:	mov	x1, x0
  403e10:	add	x19, x19, x1
  403e14:	mov	x0, #0x18                  	// #24
  403e18:	str	x19, [sp, #48]
  403e1c:	bl	401400 <xmalloc@plt>
  403e20:	mov	x1, x0
  403e24:	str	x1, [sp, #56]
  403e28:	add	x0, sp, #0x28
  403e2c:	stp	xzr, xzr, [x1]
  403e30:	str	xzr, [x1, #16]
  403e34:	bl	402040 <yyparse>
  403e38:	cmp	w0, #0x0
  403e3c:	ldr	x1, [sp, #56]
  403e40:	ldr	x19, [sp, #16]
  403e44:	csel	x0, x1, xzr, eq  // eq = none
  403e48:	ldp	x29, x30, [sp], #64
  403e4c:	ret

0000000000403e50 <cldr_plural_rule_list_print>:
  403e50:	stp	x29, x30, [sp, #-80]!
  403e54:	mov	x29, sp
  403e58:	stp	x19, x20, [sp, #16]
  403e5c:	mov	x20, x0
  403e60:	ldr	x0, [x0, #8]
  403e64:	stp	x21, x22, [sp, #32]
  403e68:	mov	x21, x1
  403e6c:	cbz	x0, 404344 <cldr_plural_rule_list_print+0x4f4>
  403e70:	mov	x19, #0x0                   	// #0
  403e74:	nop
  403e78:	ldr	x0, [x20]
  403e7c:	ldr	x0, [x0, x19, lsl #3]
  403e80:	add	x19, x19, #0x1
  403e84:	ldr	x0, [x0, #8]
  403e88:	bl	403920 <eval_condition>
  403e8c:	ldr	x5, [x20, #8]
  403e90:	cmp	x5, x19
  403e94:	b.hi	403e78 <cldr_plural_rule_list_print+0x28>  // b.pmore
  403e98:	cbz	x5, 404344 <cldr_plural_rule_list_print+0x4f4>
  403e9c:	ldr	x7, [x20]
  403ea0:	lsl	x8, x5, #3
  403ea4:	mov	w19, #0x0                   	// #0
  403ea8:	stp	x23, x24, [sp, #48]
  403eac:	add	x9, x8, x7
  403eb0:	b	403eec <cldr_plural_rule_list_print+0x9c>
  403eb4:	cmp	w0, #0x2
  403eb8:	mov	w6, #0x0                   	// #0
  403ebc:	b.ne	403ecc <cldr_plural_rule_list_print+0x7c>  // b.any
  403ec0:	ldr	x0, [x2, #8]
  403ec4:	ldr	x0, [x0]
  403ec8:	ldr	w6, [x0, #4]
  403ecc:	mov	x0, x2
  403ed0:	bl	402de8 <find_largest_number>
  403ed4:	cmp	w0, w6
  403ed8:	add	x7, x7, #0x8
  403edc:	ccmp	w6, w19, #0x4, le
  403ee0:	csel	w19, w19, w6, le
  403ee4:	cmp	x9, x7
  403ee8:	b.eq	403f78 <cldr_plural_rule_list_print+0x128>  // b.none
  403eec:	ldr	x0, [x7]
  403ef0:	ldr	x2, [x0, #8]
  403ef4:	ldr	w0, [x2]
  403ef8:	cmp	w0, #0x1
  403efc:	b.hi	403eb4 <cldr_plural_rule_list_print+0x64>  // b.pmore
  403f00:	ldr	x4, [x2, #8]
  403f04:	ldr	w0, [x4]
  403f08:	cmp	w0, #0x1
  403f0c:	b.ls	404274 <cldr_plural_rule_list_print+0x424>  // b.plast
  403f10:	cmp	w0, #0x2
  403f14:	mov	w3, #0x0                   	// #0
  403f18:	b.ne	403f28 <cldr_plural_rule_list_print+0xd8>  // b.any
  403f1c:	ldr	x0, [x4, #8]
  403f20:	ldr	x0, [x0]
  403f24:	ldr	w3, [x0, #4]
  403f28:	ldr	x4, [x2, #16]
  403f2c:	ldr	w0, [x4]
  403f30:	cmp	w0, #0x1
  403f34:	b.ls	4042dc <cldr_plural_rule_list_print+0x48c>  // b.plast
  403f38:	cmp	w0, #0x2
  403f3c:	mov	w6, #0x0                   	// #0
  403f40:	b.ne	403f50 <cldr_plural_rule_list_print+0x100>  // b.any
  403f44:	ldr	x0, [x4, #8]
  403f48:	ldr	x0, [x0]
  403f4c:	ldr	w6, [x0, #4]
  403f50:	cmp	w6, w3
  403f54:	csel	w6, w6, w3, ge  // ge = tcont
  403f58:	mov	x0, x2
  403f5c:	bl	402de8 <find_largest_number>
  403f60:	cmp	w0, w6
  403f64:	add	x7, x7, #0x8
  403f68:	ccmp	w6, w19, #0x4, le
  403f6c:	csel	w19, w19, w6, le
  403f70:	cmp	x9, x7
  403f74:	b.ne	403eec <cldr_plural_rule_list_print+0x9c>  // b.any
  403f78:	cmp	w19, #0x0
  403f7c:	b.gt	404144 <cldr_plural_rule_list_print+0x2f4>
  403f80:	ldr	x3, [x20]
  403f84:	mov	x19, #0x1                   	// #1
  403f88:	mov	x1, x3
  403f8c:	add	x2, x3, x8
  403f90:	ldr	x0, [x1], #8
  403f94:	ldr	x0, [x0, #8]
  403f98:	ldr	w0, [x0]
  403f9c:	sub	w0, w0, #0x3
  403fa0:	cmp	w0, #0x1
  403fa4:	cinc	x19, x19, hi  // hi = pmore
  403fa8:	cmp	x2, x1
  403fac:	b.ne	403f90 <cldr_plural_rule_list_print+0x140>  // b.any
  403fb0:	cmp	x19, #0x1
  403fb4:	b.eq	404340 <cldr_plural_rule_list_print+0x4f0>  // b.none
  403fb8:	cmp	x19, #0x2
  403fbc:	mov	x0, #0x0                   	// #0
  403fc0:	b.eq	40404c <cldr_plural_rule_list_print+0x1fc>  // b.none
  403fc4:	mov	x2, x19
  403fc8:	mov	x0, x21
  403fcc:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  403fd0:	add	x1, x1, #0xed0
  403fd4:	bl	4015b0 <fprintf@plt>
  403fd8:	ldr	x0, [x20, #8]
  403fdc:	cbz	x0, 40411c <cldr_plural_rule_list_print+0x2cc>
  403fe0:	cmp	x19, #0x2
  403fe4:	adrp	x22, 404000 <cldr_plural_rule_list_print+0x1b0>
  403fe8:	cset	w19, eq  // eq = none
  403fec:	add	x22, x22, #0xee8
  403ff0:	mov	x23, #0x0                   	// #0
  403ff4:	mov	x24, #0x0                   	// #0
  403ff8:	ldr	x4, [x20]
  403ffc:	str	x25, [sp, #64]
  404000:	ldr	x0, [x4, x24, lsl #3]
  404004:	mov	x3, x21
  404008:	mov	w2, w19
  40400c:	mov	w1, #0x4                   	// #4
  404010:	add	x25, x24, #0x1
  404014:	ldr	x0, [x0, #8]
  404018:	bl	4030e0 <print_condition>
  40401c:	ands	w0, w0, #0xff
  404020:	ldr	x3, [x20, #8]
  404024:	b.eq	404030 <cldr_plural_rule_list_print+0x1e0>  // b.none
  404028:	cmp	x3, #0x1
  40402c:	b.hi	4040a4 <cldr_plural_rule_list_print+0x254>  // b.pmore
  404030:	cmp	x3, x25
  404034:	b.ls	404110 <cldr_plural_rule_list_print+0x2c0>  // b.plast
  404038:	ldr	x4, [x20]
  40403c:	mov	x24, x25
  404040:	b	404000 <cldr_plural_rule_list_print+0x1b0>
  404044:	cmp	x0, x5
  404048:	b.eq	404260 <cldr_plural_rule_list_print+0x410>  // b.none
  40404c:	ldr	x1, [x3, x0, lsl #3]
  404050:	add	x0, x0, #0x1
  404054:	ldr	x22, [x1, #8]
  404058:	ldr	w1, [x22]
  40405c:	sub	w1, w1, #0x3
  404060:	cmp	w1, #0x1
  404064:	b.ls	404044 <cldr_plural_rule_list_print+0x1f4>  // b.plast
  404068:	mov	x1, x21
  40406c:	mov	x0, x22
  404070:	bl	403060 <print_condition_negation>
  404074:	tst	w0, #0xff
  404078:	b.ne	404090 <cldr_plural_rule_list_print+0x240>  // b.any
  40407c:	mov	x0, x22
  404080:	mov	x1, x21
  404084:	bl	402fa8 <print_condition_greater>
  404088:	tst	w0, #0xff
  40408c:	b.eq	403fc4 <cldr_plural_rule_list_print+0x174>  // b.none
  404090:	ldp	x19, x20, [sp, #16]
  404094:	ldp	x21, x22, [sp, #32]
  404098:	ldp	x23, x24, [sp, #48]
  40409c:	ldp	x29, x30, [sp], #80
  4040a0:	ret
  4040a4:	cmp	x3, x25
  4040a8:	b.ls	404240 <cldr_plural_rule_list_print+0x3f0>  // b.plast
  4040ac:	ldr	x4, [x20]
  4040b0:	mov	x1, x25
  4040b4:	mov	w5, #0x0                   	// #0
  4040b8:	ldr	x2, [x4, x1, lsl #3]
  4040bc:	add	x1, x1, #0x1
  4040c0:	ldr	x2, [x2, #8]
  4040c4:	ldr	w2, [x2]
  4040c8:	sub	w2, w2, #0x3
  4040cc:	cmp	w2, #0x2
  4040d0:	csel	w5, w5, w0, cc  // cc = lo, ul, last
  4040d4:	cmp	x3, x1
  4040d8:	b.ne	4040b8 <cldr_plural_rule_list_print+0x268>  // b.any
  4040dc:	sub	x3, x3, #0x1
  4040e0:	cmp	w5, #0x0
  4040e4:	ccmp	x3, x24, #0x0, ne  // ne = any
  4040e8:	b.ls	40403c <cldr_plural_rule_list_print+0x1ec>  // b.plast
  4040ec:	mov	x2, x23
  4040f0:	mov	x1, x22
  4040f4:	mov	x0, x21
  4040f8:	bl	4015b0 <fprintf@plt>
  4040fc:	ldr	x3, [x20, #8]
  404100:	add	x23, x23, #0x1
  404104:	cmp	x3, x25
  404108:	b.hi	404038 <cldr_plural_rule_list_print+0x1e8>  // b.pmore
  40410c:	nop
  404110:	cmp	x3, #0x1
  404114:	b.hi	404240 <cldr_plural_rule_list_print+0x3f0>  // b.pmore
  404118:	ldr	x25, [sp, #64]
  40411c:	mov	x3, x21
  404120:	ldp	x19, x20, [sp, #16]
  404124:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  404128:	ldp	x21, x22, [sp, #32]
  40412c:	add	x0, x0, #0xf08
  404130:	ldp	x23, x24, [sp, #48]
  404134:	mov	x2, #0x3                   	// #3
  404138:	ldp	x29, x30, [sp], #80
  40413c:	mov	x1, #0x1                   	// #1
  404140:	b	401510 <fwrite@plt>
  404144:	sxtw	x22, w19
  404148:	mov	x0, x22
  40414c:	bl	401400 <xmalloc@plt>
  404150:	mov	x2, x22
  404154:	mov	x23, x0
  404158:	mov	w1, #0x0                   	// #0
  40415c:	bl	4013f0 <memset@plt>
  404160:	ldr	x22, [x20, #8]
  404164:	cbz	x22, 4041e8 <cldr_plural_rule_list_print+0x398>
  404168:	sub	w8, w19, #0x1
  40416c:	sub	x10, x23, #0x1
  404170:	ldr	x12, [x20]
  404174:	add	x8, x8, #0x2
  404178:	mov	x11, #0x0                   	// #0
  40417c:	mov	w9, #0x1                   	// #1
  404180:	ldr	x0, [x12, x11, lsl #3]
  404184:	mov	x6, #0x1                   	// #1
  404188:	ldr	x7, [x0, #8]
  40418c:	nop
  404190:	mov	w1, w6
  404194:	mov	x0, x7
  404198:	bl	402ea8 <apply_condition>
  40419c:	tst	w0, #0xff
  4041a0:	b.eq	4041a8 <cldr_plural_rule_list_print+0x358>  // b.none
  4041a4:	strb	w9, [x10, x6]
  4041a8:	add	x6, x6, #0x1
  4041ac:	cmp	x6, x8
  4041b0:	b.ne	404190 <cldr_plural_rule_list_print+0x340>  // b.any
  4041b4:	mov	x2, #0x0                   	// #0
  4041b8:	ldrb	w4, [x23, x2]
  4041bc:	mov	w3, w2
  4041c0:	cbz	w4, 4041d4 <cldr_plural_rule_list_print+0x384>
  4041c4:	add	w3, w2, #0x1
  4041c8:	add	x2, x2, #0x1
  4041cc:	cmp	w19, w2
  4041d0:	b.gt	4041b8 <cldr_plural_rule_list_print+0x368>
  4041d4:	cmp	w19, w3
  4041d8:	b.eq	40426c <cldr_plural_rule_list_print+0x41c>  // b.none
  4041dc:	add	x11, x11, #0x1
  4041e0:	cmp	x22, x11
  4041e4:	b.ne	404180 <cldr_plural_rule_list_print+0x330>  // b.any
  4041e8:	mov	x0, x23
  4041ec:	bl	401500 <free@plt>
  4041f0:	ldr	x5, [x20, #8]
  4041f4:	cmp	x5, x22
  4041f8:	b.ls	404234 <cldr_plural_rule_list_print+0x3e4>  // b.plast
  4041fc:	nop
  404200:	ldr	x0, [x20]
  404204:	sub	x5, x5, #0x1
  404208:	ldr	x19, [x0, x5, lsl #3]
  40420c:	ldr	x0, [x19]
  404210:	str	x5, [x20, #8]
  404214:	bl	401500 <free@plt>
  404218:	ldr	x0, [x19, #8]
  40421c:	bl	403840 <cldr_plural_condition_free>
  404220:	mov	x0, x19
  404224:	bl	401500 <free@plt>
  404228:	ldr	x5, [x20, #8]
  40422c:	cmp	x5, x22
  404230:	b.hi	404200 <cldr_plural_rule_list_print+0x3b0>  // b.pmore
  404234:	cbz	x5, 404340 <cldr_plural_rule_list_print+0x4f0>
  404238:	lsl	x8, x5, #3
  40423c:	b	403f80 <cldr_plural_rule_list_print+0x130>
  404240:	add	x3, x23, #0x1
  404244:	mov	x2, x23
  404248:	mov	x0, x21
  40424c:	adrp	x1, 404000 <cldr_plural_rule_list_print+0x1b0>
  404250:	add	x1, x1, #0xef8
  404254:	bl	4015b0 <fprintf@plt>
  404258:	ldr	x25, [sp, #64]
  40425c:	b	40411c <cldr_plural_rule_list_print+0x2cc>
  404260:	ldr	x0, [x3, x8]
  404264:	ldr	x22, [x0, #8]
  404268:	b	404068 <cldr_plural_rule_list_print+0x218>
  40426c:	mov	x22, x11
  404270:	b	4041e8 <cldr_plural_rule_list_print+0x398>
  404274:	ldr	x6, [x4, #8]
  404278:	ldr	w0, [x6]
  40427c:	cmp	w0, #0x1
  404280:	b.ls	40447c <cldr_plural_rule_list_print+0x62c>  // b.plast
  404284:	cmp	w0, #0x2
  404288:	mov	w3, #0x0                   	// #0
  40428c:	b.ne	40429c <cldr_plural_rule_list_print+0x44c>  // b.any
  404290:	ldr	x0, [x6, #8]
  404294:	ldr	x0, [x0]
  404298:	ldr	w3, [x0, #4]
  40429c:	ldr	x10, [x4, #16]
  4042a0:	ldr	w0, [x10]
  4042a4:	cmp	w0, #0x1
  4042a8:	b.ls	404420 <cldr_plural_rule_list_print+0x5d0>  // b.plast
  4042ac:	cmp	w0, #0x2
  4042b0:	mov	w6, #0x0                   	// #0
  4042b4:	b.ne	4042c4 <cldr_plural_rule_list_print+0x474>  // b.any
  4042b8:	ldr	x0, [x10, #8]
  4042bc:	ldr	x0, [x0]
  4042c0:	ldr	w6, [x0, #4]
  4042c4:	ldr	x4, [x2, #16]
  4042c8:	cmp	w6, w3
  4042cc:	csel	w3, w6, w3, ge  // ge = tcont
  4042d0:	ldr	w0, [x4]
  4042d4:	cmp	w0, #0x1
  4042d8:	b.hi	403f38 <cldr_plural_rule_list_print+0xe8>  // b.pmore
  4042dc:	ldr	x11, [x4, #8]
  4042e0:	ldr	w0, [x11]
  4042e4:	cmp	w0, #0x1
  4042e8:	b.ls	4043c4 <cldr_plural_rule_list_print+0x574>  // b.plast
  4042ec:	cmp	w0, #0x2
  4042f0:	mov	w10, #0x0                   	// #0
  4042f4:	b.ne	404304 <cldr_plural_rule_list_print+0x4b4>  // b.any
  4042f8:	ldr	x0, [x11, #8]
  4042fc:	ldr	x0, [x0]
  404300:	ldr	w10, [x0, #4]
  404304:	ldr	x11, [x4, #16]
  404308:	ldr	w0, [x11]
  40430c:	cmp	w0, #0x1
  404310:	b.ls	404368 <cldr_plural_rule_list_print+0x518>  // b.plast
  404314:	cmp	w0, #0x2
  404318:	mov	w6, #0x0                   	// #0
  40431c:	b.ne	40432c <cldr_plural_rule_list_print+0x4dc>  // b.any
  404320:	ldr	x0, [x11, #8]
  404324:	ldr	x0, [x0]
  404328:	ldr	w6, [x0, #4]
  40432c:	cmp	w6, w10
  404330:	csel	w6, w6, w10, ge  // ge = tcont
  404334:	cmp	w6, w3
  404338:	csel	w6, w6, w3, ge  // ge = tcont
  40433c:	b	403f58 <cldr_plural_rule_list_print+0x108>
  404340:	ldp	x23, x24, [sp, #48]
  404344:	mov	x3, x21
  404348:	ldp	x19, x20, [sp, #16]
  40434c:	adrp	x0, 404000 <cldr_plural_rule_list_print+0x1b0>
  404350:	ldp	x21, x22, [sp, #32]
  404354:	add	x0, x0, #0xeb8
  404358:	ldp	x29, x30, [sp], #80
  40435c:	mov	x2, #0x16                  	// #22
  404360:	mov	x1, #0x1                   	// #1
  404364:	b	401510 <fwrite@plt>
  404368:	ldr	x6, [x11, #8]
  40436c:	ldr	w0, [x6]
  404370:	cmp	w0, #0x1
  404374:	b.ls	40475c <cldr_plural_rule_list_print+0x90c>  // b.plast
  404378:	cmp	w0, #0x2
  40437c:	mov	w4, #0x0                   	// #0
  404380:	b.ne	404390 <cldr_plural_rule_list_print+0x540>  // b.any
  404384:	ldr	x0, [x6, #8]
  404388:	ldr	x0, [x0]
  40438c:	ldr	w4, [x0, #4]
  404390:	ldr	x12, [x11, #16]
  404394:	ldr	w0, [x12]
  404398:	cmp	w0, #0x1
  40439c:	b.ls	404700 <cldr_plural_rule_list_print+0x8b0>  // b.plast
  4043a0:	cmp	w0, #0x2
  4043a4:	mov	w6, #0x0                   	// #0
  4043a8:	b.ne	4043b8 <cldr_plural_rule_list_print+0x568>  // b.any
  4043ac:	ldr	x0, [x12, #8]
  4043b0:	ldr	x0, [x0]
  4043b4:	ldr	w6, [x0, #4]
  4043b8:	cmp	w6, w4
  4043bc:	csel	w6, w6, w4, ge  // ge = tcont
  4043c0:	b	40432c <cldr_plural_rule_list_print+0x4dc>
  4043c4:	ldr	x10, [x11, #8]
  4043c8:	ldr	w0, [x10]
  4043cc:	cmp	w0, #0x1
  4043d0:	b.ls	4046a4 <cldr_plural_rule_list_print+0x854>  // b.plast
  4043d4:	cmp	w0, #0x2
  4043d8:	mov	w6, #0x0                   	// #0
  4043dc:	b.ne	4043ec <cldr_plural_rule_list_print+0x59c>  // b.any
  4043e0:	ldr	x0, [x10, #8]
  4043e4:	ldr	x0, [x0]
  4043e8:	ldr	w6, [x0, #4]
  4043ec:	ldr	x12, [x11, #16]
  4043f0:	ldr	w0, [x12]
  4043f4:	cmp	w0, #0x1
  4043f8:	b.ls	404648 <cldr_plural_rule_list_print+0x7f8>  // b.plast
  4043fc:	cmp	w0, #0x2
  404400:	mov	w10, #0x0                   	// #0
  404404:	b.ne	404414 <cldr_plural_rule_list_print+0x5c4>  // b.any
  404408:	ldr	x0, [x12, #8]
  40440c:	ldr	x0, [x0]
  404410:	ldr	w10, [x0, #4]
  404414:	cmp	w10, w6
  404418:	csel	w10, w10, w6, ge  // ge = tcont
  40441c:	b	404304 <cldr_plural_rule_list_print+0x4b4>
  404420:	ldr	x6, [x10, #8]
  404424:	ldr	w0, [x6]
  404428:	cmp	w0, #0x1
  40442c:	b.ls	4045ec <cldr_plural_rule_list_print+0x79c>  // b.plast
  404430:	cmp	w0, #0x2
  404434:	mov	w4, #0x0                   	// #0
  404438:	b.ne	404448 <cldr_plural_rule_list_print+0x5f8>  // b.any
  40443c:	ldr	x0, [x6, #8]
  404440:	ldr	x0, [x0]
  404444:	ldr	w4, [x0, #4]
  404448:	ldr	x11, [x10, #16]
  40444c:	ldr	w0, [x11]
  404450:	cmp	w0, #0x1
  404454:	b.ls	404590 <cldr_plural_rule_list_print+0x740>  // b.plast
  404458:	cmp	w0, #0x2
  40445c:	mov	w6, #0x0                   	// #0
  404460:	b.ne	404470 <cldr_plural_rule_list_print+0x620>  // b.any
  404464:	ldr	x0, [x11, #8]
  404468:	ldr	x0, [x0]
  40446c:	ldr	w6, [x0, #4]
  404470:	cmp	w6, w4
  404474:	csel	w6, w6, w4, ge  // ge = tcont
  404478:	b	4042c4 <cldr_plural_rule_list_print+0x474>
  40447c:	ldr	x10, [x6, #8]
  404480:	ldr	w0, [x10]
  404484:	cmp	w0, #0x1
  404488:	b.ls	404534 <cldr_plural_rule_list_print+0x6e4>  // b.plast
  40448c:	cmp	w0, #0x2
  404490:	mov	w3, #0x0                   	// #0
  404494:	b.ne	4044a4 <cldr_plural_rule_list_print+0x654>  // b.any
  404498:	ldr	x0, [x10, #8]
  40449c:	ldr	x0, [x0]
  4044a0:	ldr	w3, [x0, #4]
  4044a4:	ldr	x6, [x6, #16]
  4044a8:	ldr	w0, [x6]
  4044ac:	cmp	w0, #0x1
  4044b0:	b.ls	4044d8 <cldr_plural_rule_list_print+0x688>  // b.plast
  4044b4:	cmp	w0, #0x2
  4044b8:	mov	w0, #0x0                   	// #0
  4044bc:	b.ne	4044cc <cldr_plural_rule_list_print+0x67c>  // b.any
  4044c0:	ldr	x0, [x6, #8]
  4044c4:	ldr	x0, [x0]
  4044c8:	ldr	w0, [x0, #4]
  4044cc:	cmp	w0, w3
  4044d0:	csel	w3, w0, w3, ge  // ge = tcont
  4044d4:	b	40429c <cldr_plural_rule_list_print+0x44c>
  4044d8:	ldr	x11, [x6, #8]
  4044dc:	ldr	w0, [x11]
  4044e0:	cmp	w0, #0x1
  4044e4:	b.ls	404998 <cldr_plural_rule_list_print+0xb48>  // b.plast
  4044e8:	cmp	w0, #0x2
  4044ec:	mov	w10, #0x0                   	// #0
  4044f0:	b.ne	404500 <cldr_plural_rule_list_print+0x6b0>  // b.any
  4044f4:	ldr	x0, [x11, #8]
  4044f8:	ldr	x0, [x0]
  4044fc:	ldr	w10, [x0, #4]
  404500:	ldr	x11, [x6, #16]
  404504:	ldr	w0, [x11]
  404508:	cmp	w0, #0x1
  40450c:	b.ls	404978 <cldr_plural_rule_list_print+0xb28>  // b.plast
  404510:	cmp	w0, #0x2
  404514:	mov	w0, #0x0                   	// #0
  404518:	b.ne	404528 <cldr_plural_rule_list_print+0x6d8>  // b.any
  40451c:	ldr	x0, [x11, #8]
  404520:	ldr	x0, [x0]
  404524:	ldr	w0, [x0, #4]
  404528:	cmp	w0, w10
  40452c:	csel	w0, w0, w10, ge  // ge = tcont
  404530:	b	4044cc <cldr_plural_rule_list_print+0x67c>
  404534:	ldr	x11, [x10, #8]
  404538:	ldr	w0, [x11]
  40453c:	cmp	w0, #0x1
  404540:	b.ls	404958 <cldr_plural_rule_list_print+0xb08>  // b.plast
  404544:	cmp	w0, #0x2
  404548:	mov	w3, #0x0                   	// #0
  40454c:	b.ne	40455c <cldr_plural_rule_list_print+0x70c>  // b.any
  404550:	ldr	x0, [x11, #8]
  404554:	ldr	x0, [x0]
  404558:	ldr	w3, [x0, #4]
  40455c:	ldr	x11, [x10, #16]
  404560:	ldr	w0, [x11]
  404564:	cmp	w0, #0x1
  404568:	b.ls	404938 <cldr_plural_rule_list_print+0xae8>  // b.plast
  40456c:	cmp	w0, #0x2
  404570:	mov	w0, #0x0                   	// #0
  404574:	b.ne	404584 <cldr_plural_rule_list_print+0x734>  // b.any
  404578:	ldr	x0, [x11, #8]
  40457c:	ldr	x0, [x0]
  404580:	ldr	w0, [x0, #4]
  404584:	cmp	w0, w3
  404588:	csel	w3, w0, w3, ge  // ge = tcont
  40458c:	b	4044a4 <cldr_plural_rule_list_print+0x654>
  404590:	ldr	x12, [x11, #8]
  404594:	ldr	w0, [x12]
  404598:	cmp	w0, #0x1
  40459c:	b.ls	404918 <cldr_plural_rule_list_print+0xac8>  // b.plast
  4045a0:	cmp	w0, #0x2
  4045a4:	mov	w10, #0x0                   	// #0
  4045a8:	b.ne	4045b8 <cldr_plural_rule_list_print+0x768>  // b.any
  4045ac:	ldr	x0, [x12, #8]
  4045b0:	ldr	x0, [x0]
  4045b4:	ldr	w10, [x0, #4]
  4045b8:	ldr	x11, [x11, #16]
  4045bc:	ldr	w0, [x11]
  4045c0:	cmp	w0, #0x1
  4045c4:	b.ls	4048f8 <cldr_plural_rule_list_print+0xaa8>  // b.plast
  4045c8:	cmp	w0, #0x2
  4045cc:	mov	w6, #0x0                   	// #0
  4045d0:	b.ne	4045e0 <cldr_plural_rule_list_print+0x790>  // b.any
  4045d4:	ldr	x0, [x11, #8]
  4045d8:	ldr	x0, [x0]
  4045dc:	ldr	w6, [x0, #4]
  4045e0:	cmp	w6, w10
  4045e4:	csel	w6, w6, w10, ge  // ge = tcont
  4045e8:	b	404470 <cldr_plural_rule_list_print+0x620>
  4045ec:	ldr	x11, [x6, #8]
  4045f0:	ldr	w0, [x11]
  4045f4:	cmp	w0, #0x1
  4045f8:	b.ls	4048d8 <cldr_plural_rule_list_print+0xa88>  // b.plast
  4045fc:	cmp	w0, #0x2
  404600:	mov	w4, #0x0                   	// #0
  404604:	b.ne	404614 <cldr_plural_rule_list_print+0x7c4>  // b.any
  404608:	ldr	x0, [x11, #8]
  40460c:	ldr	x0, [x0]
  404610:	ldr	w4, [x0, #4]
  404614:	ldr	x11, [x6, #16]
  404618:	ldr	w0, [x11]
  40461c:	cmp	w0, #0x1
  404620:	b.ls	4048b8 <cldr_plural_rule_list_print+0xa68>  // b.plast
  404624:	cmp	w0, #0x2
  404628:	mov	w6, #0x0                   	// #0
  40462c:	b.ne	40463c <cldr_plural_rule_list_print+0x7ec>  // b.any
  404630:	ldr	x0, [x11, #8]
  404634:	ldr	x0, [x0]
  404638:	ldr	w6, [x0, #4]
  40463c:	cmp	w6, w4
  404640:	csel	w4, w6, w4, ge  // ge = tcont
  404644:	b	404448 <cldr_plural_rule_list_print+0x5f8>
  404648:	ldr	x13, [x12, #8]
  40464c:	ldr	w0, [x13]
  404650:	cmp	w0, #0x1
  404654:	b.ls	404898 <cldr_plural_rule_list_print+0xa48>  // b.plast
  404658:	cmp	w0, #0x2
  40465c:	mov	w11, #0x0                   	// #0
  404660:	b.ne	404670 <cldr_plural_rule_list_print+0x820>  // b.any
  404664:	ldr	x0, [x13, #8]
  404668:	ldr	x0, [x0]
  40466c:	ldr	w11, [x0, #4]
  404670:	ldr	x12, [x12, #16]
  404674:	ldr	w0, [x12]
  404678:	cmp	w0, #0x1
  40467c:	b.ls	404878 <cldr_plural_rule_list_print+0xa28>  // b.plast
  404680:	cmp	w0, #0x2
  404684:	mov	w10, #0x0                   	// #0
  404688:	b.ne	404698 <cldr_plural_rule_list_print+0x848>  // b.any
  40468c:	ldr	x0, [x12, #8]
  404690:	ldr	x0, [x0]
  404694:	ldr	w10, [x0, #4]
  404698:	cmp	w10, w11
  40469c:	csel	w10, w10, w11, ge  // ge = tcont
  4046a0:	b	404414 <cldr_plural_rule_list_print+0x5c4>
  4046a4:	ldr	x12, [x10, #8]
  4046a8:	ldr	w0, [x12]
  4046ac:	cmp	w0, #0x1
  4046b0:	b.ls	404858 <cldr_plural_rule_list_print+0xa08>  // b.plast
  4046b4:	cmp	w0, #0x2
  4046b8:	mov	w6, #0x0                   	// #0
  4046bc:	b.ne	4046cc <cldr_plural_rule_list_print+0x87c>  // b.any
  4046c0:	ldr	x0, [x12, #8]
  4046c4:	ldr	x0, [x0]
  4046c8:	ldr	w6, [x0, #4]
  4046cc:	ldr	x12, [x10, #16]
  4046d0:	ldr	w0, [x12]
  4046d4:	cmp	w0, #0x1
  4046d8:	b.ls	404838 <cldr_plural_rule_list_print+0x9e8>  // b.plast
  4046dc:	cmp	w0, #0x2
  4046e0:	mov	w10, #0x0                   	// #0
  4046e4:	b.ne	4046f4 <cldr_plural_rule_list_print+0x8a4>  // b.any
  4046e8:	ldr	x0, [x12, #8]
  4046ec:	ldr	x0, [x0]
  4046f0:	ldr	w10, [x0, #4]
  4046f4:	cmp	w10, w6
  4046f8:	csel	w6, w10, w6, ge  // ge = tcont
  4046fc:	b	4043ec <cldr_plural_rule_list_print+0x59c>
  404700:	ldr	x13, [x12, #8]
  404704:	ldr	w0, [x13]
  404708:	cmp	w0, #0x1
  40470c:	b.ls	404818 <cldr_plural_rule_list_print+0x9c8>  // b.plast
  404710:	cmp	w0, #0x2
  404714:	mov	w11, #0x0                   	// #0
  404718:	b.ne	404728 <cldr_plural_rule_list_print+0x8d8>  // b.any
  40471c:	ldr	x0, [x13, #8]
  404720:	ldr	x0, [x0]
  404724:	ldr	w11, [x0, #4]
  404728:	ldr	x12, [x12, #16]
  40472c:	ldr	w0, [x12]
  404730:	cmp	w0, #0x1
  404734:	b.ls	4047f8 <cldr_plural_rule_list_print+0x9a8>  // b.plast
  404738:	cmp	w0, #0x2
  40473c:	mov	w6, #0x0                   	// #0
  404740:	b.ne	404750 <cldr_plural_rule_list_print+0x900>  // b.any
  404744:	ldr	x0, [x12, #8]
  404748:	ldr	x0, [x0]
  40474c:	ldr	w6, [x0, #4]
  404750:	cmp	w6, w11
  404754:	csel	w6, w6, w11, ge  // ge = tcont
  404758:	b	4043b8 <cldr_plural_rule_list_print+0x568>
  40475c:	ldr	x12, [x6, #8]
  404760:	ldr	w0, [x12]
  404764:	cmp	w0, #0x1
  404768:	b.ls	4047d8 <cldr_plural_rule_list_print+0x988>  // b.plast
  40476c:	cmp	w0, #0x2
  404770:	mov	w4, #0x0                   	// #0
  404774:	b.ne	404784 <cldr_plural_rule_list_print+0x934>  // b.any
  404778:	ldr	x0, [x12, #8]
  40477c:	ldr	x0, [x0]
  404780:	ldr	w4, [x0, #4]
  404784:	ldr	x12, [x6, #16]
  404788:	ldr	w0, [x12]
  40478c:	cmp	w0, #0x1
  404790:	b.ls	4047b8 <cldr_plural_rule_list_print+0x968>  // b.plast
  404794:	cmp	w0, #0x2
  404798:	mov	w6, #0x0                   	// #0
  40479c:	b.ne	4047ac <cldr_plural_rule_list_print+0x95c>  // b.any
  4047a0:	ldr	x0, [x12, #8]
  4047a4:	ldr	x0, [x0]
  4047a8:	ldr	w6, [x0, #4]
  4047ac:	cmp	w6, w4
  4047b0:	csel	w4, w6, w4, ge  // ge = tcont
  4047b4:	b	404390 <cldr_plural_rule_list_print+0x540>
  4047b8:	ldr	x0, [x12, #8]
  4047bc:	bl	402d78 <find_largest_modulus>
  4047c0:	mov	w6, w0
  4047c4:	ldr	x0, [x12, #16]
  4047c8:	bl	402d78 <find_largest_modulus>
  4047cc:	cmp	w6, w0
  4047d0:	csel	w6, w6, w0, ge  // ge = tcont
  4047d4:	b	4047ac <cldr_plural_rule_list_print+0x95c>
  4047d8:	ldr	x0, [x12, #8]
  4047dc:	bl	402d78 <find_largest_modulus>
  4047e0:	mov	w4, w0
  4047e4:	ldr	x0, [x12, #16]
  4047e8:	bl	402d78 <find_largest_modulus>
  4047ec:	cmp	w4, w0
  4047f0:	csel	w4, w4, w0, ge  // ge = tcont
  4047f4:	b	404784 <cldr_plural_rule_list_print+0x934>
  4047f8:	ldr	x0, [x12, #8]
  4047fc:	bl	402d78 <find_largest_modulus>
  404800:	mov	w6, w0
  404804:	ldr	x0, [x12, #16]
  404808:	bl	402d78 <find_largest_modulus>
  40480c:	cmp	w6, w0
  404810:	csel	w6, w6, w0, ge  // ge = tcont
  404814:	b	404750 <cldr_plural_rule_list_print+0x900>
  404818:	ldr	x0, [x13, #8]
  40481c:	bl	402d78 <find_largest_modulus>
  404820:	mov	w6, w0
  404824:	ldr	x0, [x13, #16]
  404828:	bl	402d78 <find_largest_modulus>
  40482c:	cmp	w6, w0
  404830:	csel	w11, w6, w0, ge  // ge = tcont
  404834:	b	404728 <cldr_plural_rule_list_print+0x8d8>
  404838:	ldr	x0, [x12, #8]
  40483c:	bl	402d78 <find_largest_modulus>
  404840:	mov	w10, w0
  404844:	ldr	x0, [x12, #16]
  404848:	bl	402d78 <find_largest_modulus>
  40484c:	cmp	w10, w0
  404850:	csel	w10, w10, w0, ge  // ge = tcont
  404854:	b	4046f4 <cldr_plural_rule_list_print+0x8a4>
  404858:	ldr	x0, [x12, #8]
  40485c:	bl	402d78 <find_largest_modulus>
  404860:	mov	w6, w0
  404864:	ldr	x0, [x12, #16]
  404868:	bl	402d78 <find_largest_modulus>
  40486c:	cmp	w6, w0
  404870:	csel	w6, w6, w0, ge  // ge = tcont
  404874:	b	4046cc <cldr_plural_rule_list_print+0x87c>
  404878:	ldr	x0, [x12, #8]
  40487c:	bl	402d78 <find_largest_modulus>
  404880:	mov	w10, w0
  404884:	ldr	x0, [x12, #16]
  404888:	bl	402d78 <find_largest_modulus>
  40488c:	cmp	w10, w0
  404890:	csel	w10, w10, w0, ge  // ge = tcont
  404894:	b	404698 <cldr_plural_rule_list_print+0x848>
  404898:	ldr	x0, [x13, #8]
  40489c:	bl	402d78 <find_largest_modulus>
  4048a0:	mov	w10, w0
  4048a4:	ldr	x0, [x13, #16]
  4048a8:	bl	402d78 <find_largest_modulus>
  4048ac:	cmp	w10, w0
  4048b0:	csel	w11, w10, w0, ge  // ge = tcont
  4048b4:	b	404670 <cldr_plural_rule_list_print+0x820>
  4048b8:	ldr	x0, [x11, #8]
  4048bc:	bl	402d78 <find_largest_modulus>
  4048c0:	mov	w6, w0
  4048c4:	ldr	x0, [x11, #16]
  4048c8:	bl	402d78 <find_largest_modulus>
  4048cc:	cmp	w6, w0
  4048d0:	csel	w6, w6, w0, ge  // ge = tcont
  4048d4:	b	40463c <cldr_plural_rule_list_print+0x7ec>
  4048d8:	ldr	x0, [x11, #8]
  4048dc:	bl	402d78 <find_largest_modulus>
  4048e0:	mov	w4, w0
  4048e4:	ldr	x0, [x11, #16]
  4048e8:	bl	402d78 <find_largest_modulus>
  4048ec:	cmp	w4, w0
  4048f0:	csel	w4, w4, w0, ge  // ge = tcont
  4048f4:	b	404614 <cldr_plural_rule_list_print+0x7c4>
  4048f8:	ldr	x0, [x11, #8]
  4048fc:	bl	402d78 <find_largest_modulus>
  404900:	mov	w6, w0
  404904:	ldr	x0, [x11, #16]
  404908:	bl	402d78 <find_largest_modulus>
  40490c:	cmp	w6, w0
  404910:	csel	w6, w6, w0, ge  // ge = tcont
  404914:	b	4045e0 <cldr_plural_rule_list_print+0x790>
  404918:	ldr	x0, [x12, #8]
  40491c:	bl	402d78 <find_largest_modulus>
  404920:	mov	w6, w0
  404924:	ldr	x0, [x12, #16]
  404928:	bl	402d78 <find_largest_modulus>
  40492c:	cmp	w6, w0
  404930:	csel	w10, w6, w0, ge  // ge = tcont
  404934:	b	4045b8 <cldr_plural_rule_list_print+0x768>
  404938:	ldr	x0, [x11, #8]
  40493c:	bl	402d78 <find_largest_modulus>
  404940:	mov	w10, w0
  404944:	ldr	x0, [x11, #16]
  404948:	bl	402d78 <find_largest_modulus>
  40494c:	cmp	w10, w0
  404950:	csel	w0, w10, w0, ge  // ge = tcont
  404954:	b	404584 <cldr_plural_rule_list_print+0x734>
  404958:	ldr	x0, [x11, #8]
  40495c:	bl	402d78 <find_largest_modulus>
  404960:	mov	w3, w0
  404964:	ldr	x0, [x11, #16]
  404968:	bl	402d78 <find_largest_modulus>
  40496c:	cmp	w3, w0
  404970:	csel	w3, w3, w0, ge  // ge = tcont
  404974:	b	40455c <cldr_plural_rule_list_print+0x70c>
  404978:	ldr	x0, [x11, #8]
  40497c:	bl	402d78 <find_largest_modulus>
  404980:	mov	w6, w0
  404984:	ldr	x0, [x11, #16]
  404988:	bl	402d78 <find_largest_modulus>
  40498c:	cmp	w6, w0
  404990:	csel	w0, w6, w0, ge  // ge = tcont
  404994:	b	404528 <cldr_plural_rule_list_print+0x6d8>
  404998:	ldr	x0, [x11, #8]
  40499c:	bl	402d78 <find_largest_modulus>
  4049a0:	mov	w10, w0
  4049a4:	ldr	x0, [x11, #16]
  4049a8:	bl	402d78 <find_largest_modulus>
  4049ac:	cmp	w10, w0
  4049b0:	csel	w10, w10, w0, ge  // ge = tcont
  4049b4:	b	404500 <cldr_plural_rule_list_print+0x6b0>

00000000004049b8 <__libc_csu_init>:
  4049b8:	stp	x29, x30, [sp, #-64]!
  4049bc:	mov	x29, sp
  4049c0:	stp	x19, x20, [sp, #16]
  4049c4:	adrp	x20, 415000 <__FRAME_END__+0xf454>
  4049c8:	add	x20, x20, #0xd80
  4049cc:	stp	x21, x22, [sp, #32]
  4049d0:	adrp	x21, 415000 <__FRAME_END__+0xf454>
  4049d4:	add	x21, x21, #0xd78
  4049d8:	sub	x20, x20, x21
  4049dc:	mov	w22, w0
  4049e0:	stp	x23, x24, [sp, #48]
  4049e4:	mov	x23, x1
  4049e8:	mov	x24, x2
  4049ec:	bl	401270 <_init>
  4049f0:	cmp	xzr, x20, asr #3
  4049f4:	b.eq	404a20 <__libc_csu_init+0x68>  // b.none
  4049f8:	asr	x20, x20, #3
  4049fc:	mov	x19, #0x0                   	// #0
  404a00:	ldr	x3, [x21, x19, lsl #3]
  404a04:	mov	x2, x24
  404a08:	add	x19, x19, #0x1
  404a0c:	mov	x1, x23
  404a10:	mov	w0, w22
  404a14:	blr	x3
  404a18:	cmp	x20, x19
  404a1c:	b.ne	404a00 <__libc_csu_init+0x48>  // b.any
  404a20:	ldp	x19, x20, [sp, #16]
  404a24:	ldp	x21, x22, [sp, #32]
  404a28:	ldp	x23, x24, [sp, #48]
  404a2c:	ldp	x29, x30, [sp], #64
  404a30:	ret
  404a34:	nop

0000000000404a38 <__libc_csu_fini>:
  404a38:	ret
  404a3c:	nop

0000000000404a40 <atexit>:
  404a40:	adrp	x2, 416000 <memcpy@GLIBC_2.17>
  404a44:	mov	x1, #0x0                   	// #0
  404a48:	ldr	x2, [x2, #408]
  404a4c:	b	401330 <__cxa_atexit@plt>

Disassembly of section .fini:

0000000000404a50 <_fini>:
  404a50:	stp	x29, x30, [sp, #-16]!
  404a54:	mov	x29, sp
  404a58:	ldp	x29, x30, [sp], #16
  404a5c:	ret
