
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//iso9660.module_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_swap_bytes16>:
       0:	sub	sp, sp, #0x10
       4:	strh	w0, [sp, #14]
       8:	ldrh	w0, [sp, #14]
       c:	lsl	w0, w0, #8
      10:	sxth	w1, w0
      14:	ldrh	w0, [sp, #14]
      18:	lsr	w0, w0, #8
      1c:	and	w0, w0, #0xffff
      20:	sxth	w0, w0
      24:	orr	w0, w1, w0
      28:	sxth	w0, w0
      2c:	and	w0, w0, #0xffff
      30:	add	sp, sp, #0x10
      34:	ret

0000000000000038 <grub_get_unaligned16>:
      38:	sub	sp, sp, #0x20
      3c:	str	x0, [sp, #8]
      40:	ldr	x0, [sp, #8]
      44:	str	x0, [sp, #24]
      48:	ldr	x0, [sp, #24]
      4c:	ldrh	w0, [x0]
      50:	add	sp, sp, #0x20
      54:	ret

0000000000000058 <grub_fs_register>:
      58:	stp	x29, x30, [sp, #-32]!
      5c:	mov	x29, sp
      60:	str	x0, [sp, #24]
      64:	ldr	x1, [sp, #24]
      68:	adrp	x0, 0 <grub_swap_bytes16>
      6c:	add	x0, x0, #0x0
      70:	ldr	x0, [x0]
      74:	bl	0 <grub_list_push>
      78:	nop
      7c:	ldp	x29, x30, [sp], #32
      80:	ret
      84:	nop
	...

0000000000000090 <grub_fs_unregister>:
      90:	stp	x29, x30, [sp, #-32]!
      94:	mov	x29, sp
      98:	str	x0, [sp, #24]
      9c:	ldr	x0, [sp, #24]
      a0:	bl	0 <grub_list_remove>
      a4:	nop
      a8:	ldp	x29, x30, [sp], #32
      ac:	ret

00000000000000b0 <grub_memcpy>:
      b0:	stp	x29, x30, [sp, #-48]!
      b4:	mov	x29, sp
      b8:	str	x0, [sp, #40]
      bc:	str	x1, [sp, #32]
      c0:	str	x2, [sp, #24]
      c4:	ldr	x2, [sp, #24]
      c8:	ldr	x1, [sp, #32]
      cc:	ldr	x0, [sp, #40]
      d0:	bl	0 <grub_memmove>
      d4:	ldp	x29, x30, [sp], #48
      d8:	ret

00000000000000dc <grub_tolower>:
      dc:	sub	sp, sp, #0x10
      e0:	str	w0, [sp, #12]
      e4:	ldr	w0, [sp, #12]
      e8:	cmp	w0, #0x40
      ec:	b.le	108 <grub_tolower+0x2c>
      f0:	ldr	w0, [sp, #12]
      f4:	cmp	w0, #0x5a
      f8:	b.gt	108 <grub_tolower+0x2c>
      fc:	ldr	w0, [sp, #12]
     100:	add	w0, w0, #0x20
     104:	b	10c <grub_tolower+0x30>
     108:	ldr	w0, [sp, #12]
     10c:	add	sp, sp, #0x10
     110:	ret

0000000000000114 <grub_utf16_to_utf8>:
     114:	sub	sp, sp, #0x30
     118:	str	x0, [sp, #24]
     11c:	str	x1, [sp, #16]
     120:	str	x2, [sp, #8]
     124:	str	wzr, [sp, #44]
     128:	b	478 <grub_utf16_to_utf8+0x364>
     12c:	ldr	x0, [sp, #16]
     130:	add	x1, x0, #0x2
     134:	str	x1, [sp, #16]
     138:	ldrh	w0, [x0]
     13c:	str	w0, [sp, #40]
     140:	ldr	w0, [sp, #44]
     144:	cmp	w0, #0x0
     148:	b.eq	260 <grub_utf16_to_utf8+0x14c>  // b.none
     14c:	ldr	w1, [sp, #40]
     150:	mov	w0, #0xdbff                	// #56319
     154:	cmp	w1, w0
     158:	b.ls	238 <grub_utf16_to_utf8+0x124>  // b.plast
     15c:	ldr	w1, [sp, #40]
     160:	mov	w0, #0xdfff                	// #57343
     164:	cmp	w1, w0
     168:	b.hi	238 <grub_utf16_to_utf8+0x124>  // b.pmore
     16c:	ldr	w1, [sp, #44]
     170:	mov	w0, #0xffff2800            	// #-55296
     174:	add	w0, w1, w0
     178:	lsl	w1, w0, #10
     17c:	ldr	w0, [sp, #40]
     180:	add	w1, w1, w0
     184:	mov	w0, #0x2400                	// #9216
     188:	add	w0, w1, w0
     18c:	str	w0, [sp, #40]
     190:	ldr	w0, [sp, #40]
     194:	lsr	w0, w0, #18
     198:	and	w1, w0, #0xff
     19c:	ldr	x0, [sp, #24]
     1a0:	add	x2, x0, #0x1
     1a4:	str	x2, [sp, #24]
     1a8:	orr	w1, w1, #0xfffffff0
     1ac:	and	w1, w1, #0xff
     1b0:	strb	w1, [x0]
     1b4:	ldr	w0, [sp, #40]
     1b8:	lsr	w0, w0, #12
     1bc:	and	w0, w0, #0xff
     1c0:	and	w0, w0, #0x3f
     1c4:	and	w1, w0, #0xff
     1c8:	ldr	x0, [sp, #24]
     1cc:	add	x2, x0, #0x1
     1d0:	str	x2, [sp, #24]
     1d4:	orr	w1, w1, #0xffffff80
     1d8:	and	w1, w1, #0xff
     1dc:	strb	w1, [x0]
     1e0:	ldr	w0, [sp, #40]
     1e4:	lsr	w0, w0, #6
     1e8:	and	w0, w0, #0xff
     1ec:	and	w0, w0, #0x3f
     1f0:	and	w1, w0, #0xff
     1f4:	ldr	x0, [sp, #24]
     1f8:	add	x2, x0, #0x1
     1fc:	str	x2, [sp, #24]
     200:	orr	w1, w1, #0xffffff80
     204:	and	w1, w1, #0xff
     208:	strb	w1, [x0]
     20c:	ldr	w0, [sp, #40]
     210:	and	w0, w0, #0xff
     214:	and	w0, w0, #0x3f
     218:	and	w1, w0, #0xff
     21c:	ldr	x0, [sp, #24]
     220:	add	x2, x0, #0x1
     224:	str	x2, [sp, #24]
     228:	orr	w1, w1, #0xffffff80
     22c:	and	w1, w1, #0xff
     230:	strb	w1, [x0]
     234:	b	258 <grub_utf16_to_utf8+0x144>
     238:	ldr	x0, [sp, #24]
     23c:	add	x1, x0, #0x1
     240:	str	x1, [sp, #24]
     244:	mov	w1, #0x3f                  	// #63
     248:	strb	w1, [x0]
     24c:	ldr	x0, [sp, #16]
     250:	sub	x0, x0, #0x2
     254:	str	x0, [sp, #16]
     258:	str	wzr, [sp, #44]
     25c:	b	478 <grub_utf16_to_utf8+0x364>
     260:	ldr	w0, [sp, #40]
     264:	cmp	w0, #0x7f
     268:	b.hi	288 <grub_utf16_to_utf8+0x174>  // b.pmore
     26c:	ldr	x0, [sp, #24]
     270:	add	x1, x0, #0x1
     274:	str	x1, [sp, #24]
     278:	ldr	w1, [sp, #40]
     27c:	and	w1, w1, #0xff
     280:	strb	w1, [x0]
     284:	b	478 <grub_utf16_to_utf8+0x364>
     288:	ldr	w0, [sp, #40]
     28c:	cmp	w0, #0x7ff
     290:	b.hi	2e4 <grub_utf16_to_utf8+0x1d0>  // b.pmore
     294:	ldr	w0, [sp, #40]
     298:	lsr	w0, w0, #6
     29c:	and	w1, w0, #0xff
     2a0:	ldr	x0, [sp, #24]
     2a4:	add	x2, x0, #0x1
     2a8:	str	x2, [sp, #24]
     2ac:	orr	w1, w1, #0xffffffc0
     2b0:	and	w1, w1, #0xff
     2b4:	strb	w1, [x0]
     2b8:	ldr	w0, [sp, #40]
     2bc:	and	w0, w0, #0xff
     2c0:	and	w0, w0, #0x3f
     2c4:	and	w1, w0, #0xff
     2c8:	ldr	x0, [sp, #24]
     2cc:	add	x2, x0, #0x1
     2d0:	str	x2, [sp, #24]
     2d4:	orr	w1, w1, #0xffffff80
     2d8:	and	w1, w1, #0xff
     2dc:	strb	w1, [x0]
     2e0:	b	478 <grub_utf16_to_utf8+0x364>
     2e4:	ldr	w1, [sp, #40]
     2e8:	mov	w0, #0xd7ff                	// #55295
     2ec:	cmp	w1, w0
     2f0:	b.ls	310 <grub_utf16_to_utf8+0x1fc>  // b.plast
     2f4:	ldr	w1, [sp, #40]
     2f8:	mov	w0, #0xdbff                	// #56319
     2fc:	cmp	w1, w0
     300:	b.hi	310 <grub_utf16_to_utf8+0x1fc>  // b.pmore
     304:	ldr	w0, [sp, #40]
     308:	str	w0, [sp, #44]
     30c:	b	478 <grub_utf16_to_utf8+0x364>
     310:	ldr	w1, [sp, #40]
     314:	mov	w0, #0xdbff                	// #56319
     318:	cmp	w1, w0
     31c:	b.ls	348 <grub_utf16_to_utf8+0x234>  // b.plast
     320:	ldr	w1, [sp, #40]
     324:	mov	w0, #0xdfff                	// #57343
     328:	cmp	w1, w0
     32c:	b.hi	348 <grub_utf16_to_utf8+0x234>  // b.pmore
     330:	ldr	x0, [sp, #24]
     334:	add	x1, x0, #0x1
     338:	str	x1, [sp, #24]
     33c:	mov	w1, #0x3f                  	// #63
     340:	strb	w1, [x0]
     344:	b	478 <grub_utf16_to_utf8+0x364>
     348:	ldr	w1, [sp, #40]
     34c:	mov	w0, #0xffff                	// #65535
     350:	cmp	w1, w0
     354:	b.hi	3d4 <grub_utf16_to_utf8+0x2c0>  // b.pmore
     358:	ldr	w0, [sp, #40]
     35c:	lsr	w0, w0, #12
     360:	and	w1, w0, #0xff
     364:	ldr	x0, [sp, #24]
     368:	add	x2, x0, #0x1
     36c:	str	x2, [sp, #24]
     370:	orr	w1, w1, #0xffffffe0
     374:	and	w1, w1, #0xff
     378:	strb	w1, [x0]
     37c:	ldr	w0, [sp, #40]
     380:	lsr	w0, w0, #6
     384:	and	w0, w0, #0xff
     388:	and	w0, w0, #0x3f
     38c:	and	w1, w0, #0xff
     390:	ldr	x0, [sp, #24]
     394:	add	x2, x0, #0x1
     398:	str	x2, [sp, #24]
     39c:	orr	w1, w1, #0xffffff80
     3a0:	and	w1, w1, #0xff
     3a4:	strb	w1, [x0]
     3a8:	ldr	w0, [sp, #40]
     3ac:	and	w0, w0, #0xff
     3b0:	and	w0, w0, #0x3f
     3b4:	and	w1, w0, #0xff
     3b8:	ldr	x0, [sp, #24]
     3bc:	add	x2, x0, #0x1
     3c0:	str	x2, [sp, #24]
     3c4:	orr	w1, w1, #0xffffff80
     3c8:	and	w1, w1, #0xff
     3cc:	strb	w1, [x0]
     3d0:	b	478 <grub_utf16_to_utf8+0x364>
     3d4:	ldr	w0, [sp, #40]
     3d8:	lsr	w0, w0, #18
     3dc:	and	w1, w0, #0xff
     3e0:	ldr	x0, [sp, #24]
     3e4:	add	x2, x0, #0x1
     3e8:	str	x2, [sp, #24]
     3ec:	orr	w1, w1, #0xfffffff0
     3f0:	and	w1, w1, #0xff
     3f4:	strb	w1, [x0]
     3f8:	ldr	w0, [sp, #40]
     3fc:	lsr	w0, w0, #12
     400:	and	w0, w0, #0xff
     404:	and	w0, w0, #0x3f
     408:	and	w1, w0, #0xff
     40c:	ldr	x0, [sp, #24]
     410:	add	x2, x0, #0x1
     414:	str	x2, [sp, #24]
     418:	orr	w1, w1, #0xffffff80
     41c:	and	w1, w1, #0xff
     420:	strb	w1, [x0]
     424:	ldr	w0, [sp, #40]
     428:	lsr	w0, w0, #6
     42c:	and	w0, w0, #0xff
     430:	and	w0, w0, #0x3f
     434:	and	w1, w0, #0xff
     438:	ldr	x0, [sp, #24]
     43c:	add	x2, x0, #0x1
     440:	str	x2, [sp, #24]
     444:	orr	w1, w1, #0xffffff80
     448:	and	w1, w1, #0xff
     44c:	strb	w1, [x0]
     450:	ldr	w0, [sp, #40]
     454:	and	w0, w0, #0xff
     458:	and	w0, w0, #0x3f
     45c:	and	w1, w0, #0xff
     460:	ldr	x0, [sp, #24]
     464:	add	x2, x0, #0x1
     468:	str	x2, [sp, #24]
     46c:	orr	w1, w1, #0xffffff80
     470:	and	w1, w1, #0xff
     474:	strb	w1, [x0]
     478:	ldr	x0, [sp, #8]
     47c:	sub	x1, x0, #0x1
     480:	str	x1, [sp, #8]
     484:	cmp	x0, #0x0
     488:	b.ne	12c <grub_utf16_to_utf8+0x18>  // b.any
     48c:	ldr	x0, [sp, #24]
     490:	add	sp, sp, #0x30
     494:	ret

0000000000000498 <grub_datetime2unixtime>:
     498:	sub	sp, sp, #0x60
     49c:	str	x0, [sp, #8]
     4a0:	str	x1, [sp]
     4a4:	adrp	x0, 0 <grub_swap_bytes16>
     4a8:	add	x0, x0, #0x0
     4ac:	ldr	x0, [x0]
     4b0:	add	x2, sp, #0x28
     4b4:	mov	x3, x0
     4b8:	ldp	x0, x1, [x3]
     4bc:	stp	x0, x1, [x2]
     4c0:	ldr	x0, [x3, #16]
     4c4:	str	x0, [x2, #16]
     4c8:	adrp	x0, 0 <grub_swap_bytes16>
     4cc:	add	x0, x0, #0x0
     4d0:	ldr	x1, [x0]
     4d4:	add	x0, sp, #0x18
     4d8:	ldr	x2, [x1]
     4dc:	str	x2, [x0]
     4e0:	ldr	w1, [x1, #8]
     4e4:	str	w1, [x0, #8]
     4e8:	mov	w0, #0x3c                  	// #60
     4ec:	str	w0, [sp, #88]
     4f0:	ldr	w1, [sp, #88]
     4f4:	mov	w0, w1
     4f8:	lsl	w0, w0, #4
     4fc:	sub	w0, w0, w1
     500:	lsl	w0, w0, #2
     504:	str	w0, [sp, #84]
     508:	ldr	w1, [sp, #84]
     50c:	mov	w0, w1
     510:	lsl	w0, w0, #1
     514:	add	w0, w0, w1
     518:	lsl	w0, w0, #3
     51c:	str	w0, [sp, #80]
     520:	ldr	w1, [sp, #80]
     524:	mov	w0, #0x16d                 	// #365
     528:	mul	w0, w1, w0
     52c:	str	w0, [sp, #76]
     530:	ldr	w0, [sp, #76]
     534:	lsl	w0, w0, #2
     538:	ldr	w1, [sp, #80]
     53c:	add	w0, w1, w0
     540:	str	w0, [sp, #72]
     544:	ldr	x0, [sp, #8]
     548:	ldrh	w0, [x0]
     54c:	cmp	w0, #0x7f6
     550:	b.hi	564 <grub_datetime2unixtime+0xcc>  // b.pmore
     554:	ldr	x0, [sp, #8]
     558:	ldrh	w0, [x0]
     55c:	cmp	w0, #0x76c
     560:	b.hi	56c <grub_datetime2unixtime+0xd4>  // b.pmore
     564:	mov	w0, #0x0                   	// #0
     568:	b	7fc <grub_datetime2unixtime+0x364>
     56c:	ldr	x0, [sp, #8]
     570:	ldrb	w0, [x0, #2]
     574:	cmp	w0, #0xc
     578:	b.hi	58c <grub_datetime2unixtime+0xf4>  // b.pmore
     57c:	ldr	x0, [sp, #8]
     580:	ldrb	w0, [x0, #2]
     584:	cmp	w0, #0x0
     588:	b.ne	594 <grub_datetime2unixtime+0xfc>  // b.any
     58c:	mov	w0, #0x0                   	// #0
     590:	b	7fc <grub_datetime2unixtime+0x364>
     594:	ldr	w1, [sp, #76]
     598:	mov	w0, w1
     59c:	lsl	w0, w0, #1
     5a0:	add	w0, w0, w1
     5a4:	ldr	w1, [sp, #80]
     5a8:	add	w0, w1, w0
     5ac:	str	w0, [sp, #92]
     5b0:	ldr	x0, [sp, #8]
     5b4:	ldrh	w0, [x0]
     5b8:	sub	w0, w0, #0x1
     5bc:	asr	w0, w0, #2
     5c0:	sub	w0, w0, #0x1ed
     5c4:	str	w0, [sp, #68]
     5c8:	ldr	x0, [sp, #8]
     5cc:	ldrh	w0, [x0]
     5d0:	sub	w1, w0, #0x7b5
     5d4:	ldr	w0, [sp, #68]
     5d8:	lsl	w0, w0, #2
     5dc:	sub	w0, w1, w0
     5e0:	str	w0, [sp, #64]
     5e4:	ldr	w1, [sp, #68]
     5e8:	ldr	w0, [sp, #72]
     5ec:	mul	w0, w1, w0
     5f0:	ldr	w1, [sp, #92]
     5f4:	add	w0, w1, w0
     5f8:	str	w0, [sp, #92]
     5fc:	ldr	w1, [sp, #64]
     600:	ldr	w0, [sp, #76]
     604:	mul	w0, w1, w0
     608:	ldr	w1, [sp, #92]
     60c:	add	w0, w1, w0
     610:	str	w0, [sp, #92]
     614:	ldr	x0, [sp, #8]
     618:	ldrb	w0, [x0, #2]
     61c:	sub	w0, w0, #0x1
     620:	sxtw	x0, w0
     624:	lsl	x0, x0, #1
     628:	add	x1, sp, #0x28
     62c:	ldrh	w0, [x1, x0]
     630:	mov	w1, w0
     634:	ldr	w0, [sp, #80]
     638:	mul	w0, w1, w0
     63c:	ldr	w1, [sp, #92]
     640:	add	w0, w1, w0
     644:	str	w0, [sp, #92]
     648:	ldr	w0, [sp, #64]
     64c:	cmp	w0, #0x3
     650:	b.ne	674 <grub_datetime2unixtime+0x1dc>  // b.any
     654:	ldr	x0, [sp, #8]
     658:	ldrb	w0, [x0, #2]
     65c:	cmp	w0, #0x2
     660:	b.ls	674 <grub_datetime2unixtime+0x1dc>  // b.plast
     664:	ldr	w1, [sp, #92]
     668:	ldr	w0, [sp, #80]
     66c:	add	w0, w1, w0
     670:	str	w0, [sp, #92]
     674:	ldr	x0, [sp, #8]
     678:	ldrb	w0, [x0, #3]
     67c:	sub	w1, w0, #0x1
     680:	ldr	w0, [sp, #80]
     684:	mul	w0, w1, w0
     688:	ldr	w1, [sp, #92]
     68c:	add	w0, w1, w0
     690:	str	w0, [sp, #92]
     694:	ldr	x0, [sp, #8]
     698:	ldrb	w1, [x0, #3]
     69c:	ldr	x0, [sp, #8]
     6a0:	ldrb	w0, [x0, #2]
     6a4:	sub	w0, w0, #0x1
     6a8:	sxtw	x0, w0
     6ac:	add	x2, sp, #0x18
     6b0:	ldrb	w0, [x2, x0]
     6b4:	cmp	w1, w0
     6b8:	b.ls	6e8 <grub_datetime2unixtime+0x250>  // b.plast
     6bc:	ldr	w0, [sp, #64]
     6c0:	cmp	w0, #0x0
     6c4:	b.eq	6f8 <grub_datetime2unixtime+0x260>  // b.none
     6c8:	ldr	x0, [sp, #8]
     6cc:	ldrb	w0, [x0, #2]
     6d0:	cmp	w0, #0x2
     6d4:	b.ne	6f8 <grub_datetime2unixtime+0x260>  // b.any
     6d8:	ldr	x0, [sp, #8]
     6dc:	ldrb	w0, [x0, #3]
     6e0:	cmp	w0, #0x1d
     6e4:	b.ne	6f8 <grub_datetime2unixtime+0x260>  // b.any
     6e8:	ldr	x0, [sp, #8]
     6ec:	ldrb	w0, [x0, #3]
     6f0:	cmp	w0, #0x0
     6f4:	b.ne	700 <grub_datetime2unixtime+0x268>  // b.any
     6f8:	mov	w0, #0x0                   	// #0
     6fc:	b	7fc <grub_datetime2unixtime+0x364>
     700:	ldr	x0, [sp, #8]
     704:	ldrb	w0, [x0, #4]
     708:	mov	w1, w0
     70c:	ldr	w0, [sp, #84]
     710:	mul	w0, w1, w0
     714:	ldr	w1, [sp, #92]
     718:	add	w0, w1, w0
     71c:	str	w0, [sp, #92]
     720:	ldr	x0, [sp, #8]
     724:	ldrb	w0, [x0, #4]
     728:	cmp	w0, #0x17
     72c:	b.ls	738 <grub_datetime2unixtime+0x2a0>  // b.plast
     730:	mov	w0, #0x0                   	// #0
     734:	b	7fc <grub_datetime2unixtime+0x364>
     738:	ldr	x0, [sp, #8]
     73c:	ldrb	w0, [x0, #5]
     740:	mov	w1, w0
     744:	mov	w0, w1
     748:	lsl	w0, w0, #4
     74c:	sub	w0, w0, w1
     750:	lsl	w0, w0, #2
     754:	mov	w1, w0
     758:	ldr	w0, [sp, #92]
     75c:	add	w0, w0, w1
     760:	str	w0, [sp, #92]
     764:	ldr	x0, [sp, #8]
     768:	ldrb	w0, [x0, #5]
     76c:	cmp	w0, #0x3b
     770:	b.ls	77c <grub_datetime2unixtime+0x2e4>  // b.plast
     774:	mov	w0, #0x0                   	// #0
     778:	b	7fc <grub_datetime2unixtime+0x364>
     77c:	ldr	x0, [sp, #8]
     780:	ldrb	w0, [x0, #6]
     784:	mov	w1, w0
     788:	ldr	w0, [sp, #92]
     78c:	add	w0, w0, w1
     790:	str	w0, [sp, #92]
     794:	ldr	x0, [sp, #8]
     798:	ldrb	w0, [x0, #6]
     79c:	cmp	w0, #0x3c
     7a0:	b.ls	7ac <grub_datetime2unixtime+0x314>  // b.plast
     7a4:	mov	w0, #0x0                   	// #0
     7a8:	b	7fc <grub_datetime2unixtime+0x364>
     7ac:	ldr	x0, [sp, #8]
     7b0:	ldrh	w0, [x0]
     7b4:	cmp	w0, #0x7bc
     7b8:	b.ls	7c8 <grub_datetime2unixtime+0x330>  // b.plast
     7bc:	ldr	w0, [sp, #92]
     7c0:	cmp	w0, #0x0
     7c4:	b.lt	7e4 <grub_datetime2unixtime+0x34c>  // b.tstop
     7c8:	ldr	x0, [sp, #8]
     7cc:	ldrh	w0, [x0]
     7d0:	cmp	w0, #0x7a7
     7d4:	b.hi	7ec <grub_datetime2unixtime+0x354>  // b.pmore
     7d8:	ldr	w0, [sp, #92]
     7dc:	cmp	w0, #0x0
     7e0:	b.le	7ec <grub_datetime2unixtime+0x354>
     7e4:	mov	w0, #0x0                   	// #0
     7e8:	b	7fc <grub_datetime2unixtime+0x364>
     7ec:	ldr	x0, [sp]
     7f0:	ldr	w1, [sp, #92]
     7f4:	str	w1, [x0]
     7f8:	mov	w0, #0x1                   	// #1
     7fc:	add	sp, sp, #0x60
     800:	ret
     804:	nop
	...

0000000000000818 <iso9660_to_unixtime>:
     818:	stp	x29, x30, [sp, #-48]!
     81c:	mov	x29, sp
     820:	str	x0, [sp, #24]
     824:	str	x1, [sp, #16]
     828:	ldr	x0, [sp, #24]
     82c:	ldrb	w0, [x0]
     830:	cmp	w0, #0x0
     834:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     838:	ldr	x0, [sp, #24]
     83c:	ldrb	w0, [x0, #1]
     840:	cmp	w0, #0x0
     844:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     848:	ldr	x0, [sp, #24]
     84c:	ldrb	w0, [x0, #2]
     850:	cmp	w0, #0x0
     854:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     858:	ldr	x0, [sp, #24]
     85c:	ldrb	w0, [x0, #3]
     860:	cmp	w0, #0x0
     864:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     868:	ldr	x0, [sp, #24]
     86c:	ldrb	w0, [x0, #4]
     870:	cmp	w0, #0x0
     874:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     878:	ldr	x0, [sp, #24]
     87c:	ldrb	w0, [x0, #5]
     880:	cmp	w0, #0x0
     884:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     888:	ldr	x0, [sp, #24]
     88c:	ldrb	w0, [x0, #6]
     890:	cmp	w0, #0x0
     894:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     898:	ldr	x0, [sp, #24]
     89c:	ldrb	w0, [x0, #7]
     8a0:	cmp	w0, #0x0
     8a4:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     8a8:	ldr	x0, [sp, #24]
     8ac:	ldrb	w0, [x0, #8]
     8b0:	cmp	w0, #0x0
     8b4:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     8b8:	ldr	x0, [sp, #24]
     8bc:	ldrb	w0, [x0, #9]
     8c0:	cmp	w0, #0x0
     8c4:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     8c8:	ldr	x0, [sp, #24]
     8cc:	ldrb	w0, [x0, #10]
     8d0:	cmp	w0, #0x0
     8d4:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     8d8:	ldr	x0, [sp, #24]
     8dc:	ldrb	w0, [x0, #11]
     8e0:	cmp	w0, #0x0
     8e4:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     8e8:	ldr	x0, [sp, #24]
     8ec:	ldrb	w0, [x0, #12]
     8f0:	cmp	w0, #0x0
     8f4:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     8f8:	ldr	x0, [sp, #24]
     8fc:	ldrb	w0, [x0, #13]
     900:	cmp	w0, #0x0
     904:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     908:	ldr	x0, [sp, #24]
     90c:	ldrb	w0, [x0, #14]
     910:	cmp	w0, #0x0
     914:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     918:	ldr	x0, [sp, #24]
     91c:	ldrb	w0, [x0, #15]
     920:	cmp	w0, #0x0
     924:	b.ne	940 <iso9660_to_unixtime+0x128>  // b.any
     928:	adrp	x0, 0 <grub_swap_bytes16>
     92c:	add	x0, x0, #0x0
     930:	ldr	x1, [x0]
     934:	mov	w0, #0xa                   	// #10
     938:	bl	0 <grub_error>
     93c:	b	b54 <iso9660_to_unixtime+0x33c>
     940:	ldr	x0, [sp, #24]
     944:	ldrb	w0, [x0]
     948:	sub	w0, w0, #0x30
     94c:	and	w1, w0, #0xffff
     950:	mov	w0, #0x3e8                 	// #1000
     954:	mul	w0, w1, w0
     958:	and	w1, w0, #0xffff
     95c:	ldr	x0, [sp, #24]
     960:	ldrb	w0, [x0, #1]
     964:	sub	w0, w0, #0x30
     968:	and	w2, w0, #0xffff
     96c:	mov	w0, #0x64                  	// #100
     970:	mul	w0, w2, w0
     974:	and	w0, w0, #0xffff
     978:	add	w0, w1, w0
     97c:	and	w1, w0, #0xffff
     980:	ldr	x0, [sp, #24]
     984:	ldrb	w0, [x0, #2]
     988:	sub	w0, w0, #0x30
     98c:	and	w0, w0, #0xffff
     990:	mov	w2, w0
     994:	mov	w0, w2
     998:	ubfiz	w0, w0, #2, #14
     99c:	add	w0, w0, w2
     9a0:	ubfiz	w0, w0, #1, #15
     9a4:	and	w0, w0, #0xffff
     9a8:	add	w0, w1, w0
     9ac:	and	w1, w0, #0xffff
     9b0:	ldr	x0, [sp, #24]
     9b4:	ldrb	w0, [x0, #3]
     9b8:	and	w0, w0, #0xffff
     9bc:	add	w0, w1, w0
     9c0:	and	w0, w0, #0xffff
     9c4:	sub	w0, w0, #0x30
     9c8:	and	w0, w0, #0xffff
     9cc:	strh	w0, [sp, #40]
     9d0:	ldr	x0, [sp, #24]
     9d4:	ldrb	w0, [x0, #4]
     9d8:	mov	w1, w0
     9dc:	mov	w0, w1
     9e0:	ubfiz	w0, w0, #2, #6
     9e4:	add	w0, w0, w1
     9e8:	ubfiz	w0, w0, #1, #7
     9ec:	and	w1, w0, #0xff
     9f0:	ldr	x0, [sp, #24]
     9f4:	ldrb	w0, [x0, #5]
     9f8:	add	w0, w1, w0
     9fc:	and	w0, w0, #0xff
     a00:	sub	w0, w0, #0x10
     a04:	and	w0, w0, #0xff
     a08:	strb	w0, [sp, #42]
     a0c:	ldr	x0, [sp, #24]
     a10:	ldrb	w0, [x0, #6]
     a14:	mov	w1, w0
     a18:	mov	w0, w1
     a1c:	ubfiz	w0, w0, #2, #6
     a20:	add	w0, w0, w1
     a24:	ubfiz	w0, w0, #1, #7
     a28:	and	w1, w0, #0xff
     a2c:	ldr	x0, [sp, #24]
     a30:	ldrb	w0, [x0, #7]
     a34:	add	w0, w1, w0
     a38:	and	w0, w0, #0xff
     a3c:	sub	w0, w0, #0x10
     a40:	and	w0, w0, #0xff
     a44:	strb	w0, [sp, #43]
     a48:	ldr	x0, [sp, #24]
     a4c:	ldrb	w0, [x0, #8]
     a50:	mov	w1, w0
     a54:	mov	w0, w1
     a58:	ubfiz	w0, w0, #2, #6
     a5c:	add	w0, w0, w1
     a60:	ubfiz	w0, w0, #1, #7
     a64:	and	w1, w0, #0xff
     a68:	ldr	x0, [sp, #24]
     a6c:	ldrb	w0, [x0, #9]
     a70:	add	w0, w1, w0
     a74:	and	w0, w0, #0xff
     a78:	sub	w0, w0, #0x10
     a7c:	and	w0, w0, #0xff
     a80:	strb	w0, [sp, #44]
     a84:	ldr	x0, [sp, #24]
     a88:	ldrb	w0, [x0, #10]
     a8c:	mov	w1, w0
     a90:	mov	w0, w1
     a94:	ubfiz	w0, w0, #2, #6
     a98:	add	w0, w0, w1
     a9c:	ubfiz	w0, w0, #1, #7
     aa0:	and	w1, w0, #0xff
     aa4:	ldr	x0, [sp, #24]
     aa8:	ldrb	w0, [x0, #11]
     aac:	add	w0, w1, w0
     ab0:	and	w0, w0, #0xff
     ab4:	sub	w0, w0, #0x10
     ab8:	and	w0, w0, #0xff
     abc:	strb	w0, [sp, #45]
     ac0:	ldr	x0, [sp, #24]
     ac4:	ldrb	w0, [x0, #12]
     ac8:	mov	w1, w0
     acc:	mov	w0, w1
     ad0:	ubfiz	w0, w0, #2, #6
     ad4:	add	w0, w0, w1
     ad8:	ubfiz	w0, w0, #1, #7
     adc:	and	w1, w0, #0xff
     ae0:	ldr	x0, [sp, #24]
     ae4:	ldrb	w0, [x0, #13]
     ae8:	add	w0, w1, w0
     aec:	and	w0, w0, #0xff
     af0:	sub	w0, w0, #0x10
     af4:	and	w0, w0, #0xff
     af8:	strb	w0, [sp, #46]
     afc:	add	x0, sp, #0x28
     b00:	ldr	x1, [sp, #16]
     b04:	bl	498 <grub_datetime2unixtime>
     b08:	cmp	w0, #0x0
     b0c:	b.ne	b28 <iso9660_to_unixtime+0x310>  // b.any
     b10:	adrp	x0, 0 <grub_swap_bytes16>
     b14:	add	x0, x0, #0x0
     b18:	ldr	x1, [x0]
     b1c:	mov	w0, #0xa                   	// #10
     b20:	bl	0 <grub_error>
     b24:	b	b54 <iso9660_to_unixtime+0x33c>
     b28:	ldr	x0, [sp, #16]
     b2c:	ldr	w1, [x0]
     b30:	ldr	x0, [sp, #24]
     b34:	ldrb	w0, [x0, #16]
     b38:	mov	w2, w0
     b3c:	mov	w0, #0xfffffc7c            	// #-900
     b40:	mul	w0, w2, w0
     b44:	add	w1, w1, w0
     b48:	ldr	x0, [sp, #16]
     b4c:	str	w1, [x0]
     b50:	mov	w0, #0x0                   	// #0
     b54:	ldp	x29, x30, [sp], #48
     b58:	ret
     b5c:	nop
	...

0000000000000b70 <iso9660_to_unixtime2>:
     b70:	stp	x29, x30, [sp, #-48]!
     b74:	mov	x29, sp
     b78:	str	x0, [sp, #24]
     b7c:	str	x1, [sp, #16]
     b80:	ldr	x0, [sp, #24]
     b84:	ldrb	w0, [x0]
     b88:	and	w0, w0, #0xffff
     b8c:	add	w0, w0, #0x76c
     b90:	and	w0, w0, #0xffff
     b94:	strh	w0, [sp, #40]
     b98:	ldr	x0, [sp, #24]
     b9c:	ldrb	w0, [x0, #1]
     ba0:	strb	w0, [sp, #42]
     ba4:	ldr	x0, [sp, #24]
     ba8:	ldrb	w0, [x0, #2]
     bac:	strb	w0, [sp, #43]
     bb0:	ldr	x0, [sp, #24]
     bb4:	ldrb	w0, [x0, #3]
     bb8:	strb	w0, [sp, #44]
     bbc:	ldr	x0, [sp, #24]
     bc0:	ldrb	w0, [x0, #4]
     bc4:	strb	w0, [sp, #45]
     bc8:	ldr	x0, [sp, #24]
     bcc:	ldrb	w0, [x0, #5]
     bd0:	strb	w0, [sp, #46]
     bd4:	add	x0, sp, #0x28
     bd8:	ldr	x1, [sp, #16]
     bdc:	bl	498 <grub_datetime2unixtime>
     be0:	cmp	w0, #0x0
     be4:	b.ne	bf0 <iso9660_to_unixtime2+0x80>  // b.any
     be8:	mov	w0, #0x0                   	// #0
     bec:	b	c1c <iso9660_to_unixtime2+0xac>
     bf0:	ldr	x0, [sp, #16]
     bf4:	ldr	w1, [x0]
     bf8:	ldr	x0, [sp, #24]
     bfc:	ldrb	w0, [x0, #6]
     c00:	mov	w2, w0
     c04:	mov	w0, #0xfffffc7c            	// #-900
     c08:	mul	w0, w2, w0
     c0c:	add	w1, w1, w0
     c10:	ldr	x0, [sp, #16]
     c14:	str	w1, [x0]
     c18:	mov	w0, #0x1                   	// #1
     c1c:	ldp	x29, x30, [sp], #48
     c20:	ret

0000000000000c24 <read_node>:
     c24:	stp	x29, x30, [sp, #-80]!
     c28:	mov	x29, sp
     c2c:	str	x0, [sp, #40]
     c30:	str	x1, [sp, #32]
     c34:	str	x2, [sp, #24]
     c38:	str	x3, [sp, #16]
     c3c:	str	xzr, [sp, #72]
     c40:	b	db4 <read_node+0x190>
     c44:	ldr	x2, [sp, #40]
     c48:	ldr	x1, [sp, #72]
     c4c:	mov	x0, x1
     c50:	lsl	x0, x0, #5
     c54:	add	x0, x0, x1
     c58:	add	x0, x2, x0
     c5c:	ldur	w0, [x0, #38]
     c60:	mov	w0, w0
     c64:	ldr	x1, [sp, #32]
     c68:	sub	x0, x1, x0
     c6c:	str	x0, [sp, #32]
     c70:	ldr	x0, [sp, #72]
     c74:	add	x0, x0, #0x1
     c78:	str	x0, [sp, #72]
     c7c:	ldr	x0, [sp, #40]
     c80:	ldr	x0, [x0, #8]
     c84:	ldr	x1, [sp, #72]
     c88:	cmp	x1, x0
     c8c:	b.cs	cbc <read_node+0x98>  // b.hs, b.nlast
     c90:	ldr	x2, [sp, #40]
     c94:	ldr	x1, [sp, #72]
     c98:	mov	x0, x1
     c9c:	lsl	x0, x0, #5
     ca0:	add	x0, x0, x1
     ca4:	add	x0, x2, x0
     ca8:	ldur	w0, [x0, #38]
     cac:	mov	w0, w0
     cb0:	ldr	x1, [sp, #32]
     cb4:	cmp	x1, x0
     cb8:	b.cs	c44 <read_node+0x20>  // b.hs, b.nlast
     cbc:	ldr	x0, [sp, #40]
     cc0:	ldr	x0, [x0, #8]
     cc4:	ldr	x1, [sp, #72]
     cc8:	cmp	x1, x0
     ccc:	b.ne	ce8 <read_node+0xc4>  // b.any
     cd0:	adrp	x0, 0 <grub_swap_bytes16>
     cd4:	add	x0, x0, #0x0
     cd8:	ldr	x1, [x0]
     cdc:	mov	w0, #0xb                   	// #11
     ce0:	bl	0 <grub_error>
     ce4:	b	dc4 <read_node+0x1a0>
     ce8:	ldr	x2, [sp, #40]
     cec:	ldr	x1, [sp, #72]
     cf0:	mov	x0, x1
     cf4:	lsl	x0, x0, #5
     cf8:	add	x0, x0, x1
     cfc:	add	x0, x2, x0
     d00:	ldur	w0, [x0, #38]
     d04:	mov	w0, w0
     d08:	str	x0, [sp, #64]
     d0c:	ldr	x1, [sp, #64]
     d10:	ldr	x0, [sp, #24]
     d14:	cmp	x1, x0
     d18:	b.ls	d24 <read_node+0x100>  // b.plast
     d1c:	ldr	x0, [sp, #24]
     d20:	str	x0, [sp, #64]
     d24:	ldr	x0, [sp, #40]
     d28:	ldr	x0, [x0]
     d2c:	ldr	x5, [x0, #848]
     d30:	ldr	x2, [sp, #40]
     d34:	ldr	x1, [sp, #72]
     d38:	mov	x0, x1
     d3c:	lsl	x0, x0, #5
     d40:	add	x0, x0, x1
     d44:	add	x0, x2, x0
     d48:	ldur	w0, [x0, #30]
     d4c:	mov	w0, w0
     d50:	lsl	x0, x0, #2
     d54:	ldr	x4, [sp, #16]
     d58:	ldr	x3, [sp, #64]
     d5c:	ldr	x2, [sp, #32]
     d60:	mov	x1, x0
     d64:	mov	x0, x5
     d68:	bl	0 <grub_disk_read>
     d6c:	str	w0, [sp, #60]
     d70:	ldr	w0, [sp, #60]
     d74:	cmp	w0, #0x0
     d78:	b.eq	d84 <read_node+0x160>  // b.none
     d7c:	ldr	w0, [sp, #60]
     d80:	b	dc4 <read_node+0x1a0>
     d84:	ldr	x1, [sp, #24]
     d88:	ldr	x0, [sp, #64]
     d8c:	sub	x0, x1, x0
     d90:	str	x0, [sp, #24]
     d94:	ldr	x1, [sp, #32]
     d98:	ldr	x0, [sp, #64]
     d9c:	add	x0, x1, x0
     da0:	str	x0, [sp, #32]
     da4:	ldr	x1, [sp, #16]
     da8:	ldr	x0, [sp, #64]
     dac:	add	x0, x1, x0
     db0:	str	x0, [sp, #16]
     db4:	ldr	x0, [sp, #24]
     db8:	cmp	x0, #0x0
     dbc:	b.ne	c7c <read_node+0x58>  // b.any
     dc0:	mov	w0, #0x0                   	// #0
     dc4:	ldp	x29, x30, [sp], #80
     dc8:	ret
     dcc:	nop
	...

0000000000000dd8 <grub_iso9660_susp_iterate>:
     dd8:	stp	x29, x30, [sp, #-112]!
     ddc:	mov	x29, sp
     de0:	str	x0, [sp, #56]
     de4:	str	x1, [sp, #48]
     de8:	str	x2, [sp, #40]
     dec:	str	x3, [sp, #32]
     df0:	str	x4, [sp, #24]
     df4:	ldr	x0, [sp, #40]
     df8:	cmp	x0, #0x0
     dfc:	b.gt	e08 <grub_iso9660_susp_iterate+0x30>
     e00:	mov	w0, #0x0                   	// #0
     e04:	b	fec <grub_iso9660_susp_iterate+0x214>
     e08:	ldr	x0, [sp, #40]
     e0c:	bl	0 <grub_malloc>
     e10:	str	x0, [sp, #104]
     e14:	ldr	x0, [sp, #104]
     e18:	cmp	x0, #0x0
     e1c:	b.ne	e34 <grub_iso9660_susp_iterate+0x5c>  // b.any
     e20:	adrp	x0, 0 <grub_swap_bytes16>
     e24:	add	x0, x0, #0x0
     e28:	ldr	x0, [x0]
     e2c:	ldr	w0, [x0]
     e30:	b	fec <grub_iso9660_susp_iterate+0x214>
     e34:	ldr	x0, [sp, #40]
     e38:	ldr	x3, [sp, #104]
     e3c:	mov	x2, x0
     e40:	ldr	x1, [sp, #48]
     e44:	ldr	x0, [sp, #56]
     e48:	bl	c24 <read_node>
     e4c:	str	w0, [sp, #92]
     e50:	ldr	w0, [sp, #92]
     e54:	cmp	w0, #0x0
     e58:	b.eq	e64 <grub_iso9660_susp_iterate+0x8c>  // b.none
     e5c:	ldr	w0, [sp, #92]
     e60:	b	fec <grub_iso9660_susp_iterate+0x214>
     e64:	ldr	x0, [sp, #104]
     e68:	str	x0, [sp, #96]
     e6c:	b	fac <grub_iso9660_susp_iterate+0x1d4>
     e70:	ldr	x3, [sp, #96]
     e74:	mov	x2, #0x2                   	// #2
     e78:	adrp	x0, 0 <grub_swap_bytes16>
     e7c:	add	x0, x0, #0x0
     e80:	ldr	x1, [x0]
     e84:	mov	x0, x3
     e88:	bl	0 <grub_strncmp>
     e8c:	cmp	w0, #0x0
     e90:	b.eq	fdc <grub_iso9660_susp_iterate+0x204>  // b.none
     e94:	ldr	x3, [sp, #96]
     e98:	mov	x2, #0x2                   	// #2
     e9c:	adrp	x0, 0 <grub_swap_bytes16>
     ea0:	add	x0, x0, #0x0
     ea4:	ldr	x1, [x0]
     ea8:	mov	x0, x3
     eac:	bl	0 <grub_strncmp>
     eb0:	cmp	w0, #0x0
     eb4:	b.ne	f6c <grub_iso9660_susp_iterate+0x194>  // b.any
     eb8:	ldr	x0, [sp, #96]
     ebc:	str	x0, [sp, #80]
     ec0:	ldr	x0, [sp, #80]
     ec4:	ldr	w0, [x0, #20]
     ec8:	mov	w0, w0
     ecc:	str	x0, [sp, #40]
     ed0:	ldr	x0, [sp, #80]
     ed4:	ldr	w0, [x0, #12]
     ed8:	mov	w0, w0
     edc:	str	x0, [sp, #48]
     ee0:	ldr	x0, [sp, #80]
     ee4:	ldr	w0, [x0, #4]
     ee8:	lsl	w0, w0, #2
     eec:	mov	w0, w0
     ef0:	str	x0, [sp, #72]
     ef4:	ldr	x0, [sp, #104]
     ef8:	bl	0 <grub_free>
     efc:	ldr	x0, [sp, #40]
     f00:	bl	0 <grub_malloc>
     f04:	str	x0, [sp, #104]
     f08:	ldr	x0, [sp, #104]
     f0c:	cmp	x0, #0x0
     f10:	b.ne	f28 <grub_iso9660_susp_iterate+0x150>  // b.any
     f14:	adrp	x0, 0 <grub_swap_bytes16>
     f18:	add	x0, x0, #0x0
     f1c:	ldr	x0, [x0]
     f20:	ldr	w0, [x0]
     f24:	b	fec <grub_iso9660_susp_iterate+0x214>
     f28:	ldr	x0, [sp, #56]
     f2c:	ldr	x0, [x0]
     f30:	ldr	x0, [x0, #848]
     f34:	ldr	x1, [sp, #40]
     f38:	ldr	x4, [sp, #104]
     f3c:	mov	x3, x1
     f40:	ldr	x2, [sp, #48]
     f44:	ldr	x1, [sp, #72]
     f48:	bl	0 <grub_disk_read>
     f4c:	str	w0, [sp, #92]
     f50:	ldr	w0, [sp, #92]
     f54:	cmp	w0, #0x0
     f58:	b.eq	f64 <grub_iso9660_susp_iterate+0x18c>  // b.none
     f5c:	ldr	w0, [sp, #92]
     f60:	b	fec <grub_iso9660_susp_iterate+0x214>
     f64:	ldr	x0, [sp, #104]
     f68:	str	x0, [sp, #96]
     f6c:	ldr	x2, [sp, #32]
     f70:	ldr	x1, [sp, #24]
     f74:	ldr	x0, [sp, #96]
     f78:	blr	x2
     f7c:	cmp	w0, #0x0
     f80:	b.eq	f94 <grub_iso9660_susp_iterate+0x1bc>  // b.none
     f84:	ldr	x0, [sp, #104]
     f88:	bl	0 <grub_free>
     f8c:	mov	w0, #0x0                   	// #0
     f90:	b	fec <grub_iso9660_susp_iterate+0x214>
     f94:	ldr	x0, [sp, #96]
     f98:	ldrb	w0, [x0, #2]
     f9c:	and	x0, x0, #0xff
     fa0:	ldr	x1, [sp, #96]
     fa4:	add	x0, x1, x0
     fa8:	str	x0, [sp, #96]
     fac:	ldr	x0, [sp, #40]
     fb0:	sub	x0, x0, #0x1
     fb4:	ldr	x1, [sp, #104]
     fb8:	add	x0, x1, x0
     fbc:	ldr	x1, [sp, #96]
     fc0:	cmp	x1, x0
     fc4:	b.cs	fe0 <grub_iso9660_susp_iterate+0x208>  // b.hs, b.nlast
     fc8:	ldr	x0, [sp, #96]
     fcc:	ldrb	w0, [x0, #2]
     fd0:	cmp	w0, #0x0
     fd4:	b.ne	e70 <grub_iso9660_susp_iterate+0x98>  // b.any
     fd8:	b	fe0 <grub_iso9660_susp_iterate+0x208>
     fdc:	nop
     fe0:	ldr	x0, [sp, #104]
     fe4:	bl	0 <grub_free>
     fe8:	mov	w0, #0x0                   	// #0
     fec:	ldp	x29, x30, [sp], #112
     ff0:	ret
     ff4:	nop
	...

0000000000001010 <grub_iso9660_convert_string>:
    1010:	stp	x29, x30, [sp, #-304]!
    1014:	mov	x29, sp
    1018:	str	x0, [sp, #24]
    101c:	str	w1, [sp, #20]
    1020:	ldr	w0, [sp, #20]
    1024:	lsl	w0, w0, #2
    1028:	add	w0, w0, #0x1
    102c:	sxtw	x0, w0
    1030:	bl	0 <grub_malloc>
    1034:	str	x0, [sp, #288]
    1038:	ldr	x0, [sp, #288]
    103c:	cmp	x0, #0x0
    1040:	b.ne	104c <grub_iso9660_convert_string+0x3c>  // b.any
    1044:	mov	x0, #0x0                   	// #0
    1048:	b	10c4 <grub_iso9660_convert_string+0xb4>
    104c:	str	wzr, [sp, #300]
    1050:	b	1094 <grub_iso9660_convert_string+0x84>
    1054:	ldr	w0, [sp, #300]
    1058:	lsl	w0, w0, #1
    105c:	sxtw	x0, w0
    1060:	ldr	x1, [sp, #24]
    1064:	add	x0, x1, x0
    1068:	bl	38 <grub_get_unaligned16>
    106c:	and	w0, w0, #0xffff
    1070:	bl	0 <grub_swap_bytes16>
    1074:	and	w2, w0, #0xffff
    1078:	ldrsw	x0, [sp, #300]
    107c:	lsl	x0, x0, #1
    1080:	add	x1, sp, #0x20
    1084:	strh	w2, [x1, x0]
    1088:	ldr	w0, [sp, #300]
    108c:	add	w0, w0, #0x1
    1090:	str	w0, [sp, #300]
    1094:	ldr	w1, [sp, #300]
    1098:	ldr	w0, [sp, #20]
    109c:	cmp	w1, w0
    10a0:	b.lt	1054 <grub_iso9660_convert_string+0x44>  // b.tstop
    10a4:	ldrsw	x1, [sp, #20]
    10a8:	add	x0, sp, #0x20
    10ac:	mov	x2, x1
    10b0:	mov	x1, x0
    10b4:	ldr	x0, [sp, #288]
    10b8:	bl	114 <grub_utf16_to_utf8>
    10bc:	strb	wzr, [x0]
    10c0:	ldr	x0, [sp, #288]
    10c4:	ldp	x29, x30, [sp], #304
    10c8:	ret

00000000000010cc <susp_iterate_set_rockridge>:
    10cc:	stp	x29, x30, [sp, #-48]!
    10d0:	mov	x29, sp
    10d4:	str	x0, [sp, #24]
    10d8:	str	x1, [sp, #16]
    10dc:	ldr	x0, [sp, #16]
    10e0:	str	x0, [sp, #40]
    10e4:	ldr	x3, [sp, #24]
    10e8:	mov	x2, #0x2                   	// #2
    10ec:	adrp	x0, 0 <grub_swap_bytes16>
    10f0:	add	x0, x0, #0x0
    10f4:	ldr	x1, [x0]
    10f8:	mov	x0, x3
    10fc:	bl	0 <grub_strncmp>
    1100:	cmp	w0, #0x0
    1104:	b.ne	111c <susp_iterate_set_rockridge+0x50>  // b.any
    1108:	ldr	x0, [sp, #40]
    110c:	mov	w1, #0x1                   	// #1
    1110:	str	w1, [x0, #856]
    1114:	mov	w0, #0x1                   	// #1
    1118:	b	1120 <susp_iterate_set_rockridge+0x54>
    111c:	mov	w0, #0x0                   	// #0
    1120:	ldp	x29, x30, [sp], #48
    1124:	ret
	...

0000000000001130 <set_rockridge>:
    1130:	stp	x29, x30, [sp, #-400]!
    1134:	mov	x29, sp
    1138:	str	x0, [sp, #24]
    113c:	ldr	x0, [sp, #24]
    1140:	str	wzr, [x0, #856]
    1144:	ldr	x0, [sp, #24]
    1148:	ldr	x5, [x0, #848]
    114c:	ldr	x0, [sp, #24]
    1150:	ldur	w0, [x0, #158]
    1154:	lsl	w0, w0, #2
    1158:	mov	w0, w0
    115c:	add	x1, sp, #0x150
    1160:	mov	x4, x1
    1164:	mov	x3, #0x21                  	// #33
    1168:	mov	x2, #0x0                   	// #0
    116c:	mov	x1, x0
    1170:	mov	x0, x5
    1174:	bl	0 <grub_disk_read>
    1178:	cmp	w0, #0x0
    117c:	b.eq	1198 <set_rockridge+0x68>  // b.none
    1180:	adrp	x0, 0 <grub_swap_bytes16>
    1184:	add	x0, x0, #0x0
    1188:	ldr	x1, [x0]
    118c:	mov	w0, #0x9                   	// #9
    1190:	bl	0 <grub_error>
    1194:	b	134c <set_rockridge+0x21c>
    1198:	ldrb	w0, [sp, #368]
    119c:	add	w0, w0, #0x1
    11a0:	and	w0, w0, #0xfffffffe
    11a4:	add	w0, w0, #0x20
    11a8:	str	w0, [sp, #396]
    11ac:	ldrb	w0, [sp, #336]
    11b0:	mov	w1, w0
    11b4:	ldr	w0, [sp, #396]
    11b8:	sub	w0, w1, w0
    11bc:	str	w0, [sp, #392]
    11c0:	ldr	w0, [sp, #392]
    11c4:	cmp	w0, #0x0
    11c8:	b.ne	11d4 <set_rockridge+0xa4>  // b.any
    11cc:	mov	w0, #0x0                   	// #0
    11d0:	b	134c <set_rockridge+0x21c>
    11d4:	ldrsw	x0, [sp, #392]
    11d8:	bl	0 <grub_malloc>
    11dc:	str	x0, [sp, #384]
    11e0:	ldr	x0, [sp, #384]
    11e4:	cmp	x0, #0x0
    11e8:	b.ne	1200 <set_rockridge+0xd0>  // b.any
    11ec:	adrp	x0, 0 <grub_swap_bytes16>
    11f0:	add	x0, x0, #0x0
    11f4:	ldr	x0, [x0]
    11f8:	ldr	w0, [x0]
    11fc:	b	134c <set_rockridge+0x21c>
    1200:	ldr	x0, [sp, #24]
    1204:	ldr	x5, [x0, #848]
    1208:	ldr	x0, [sp, #24]
    120c:	ldur	w0, [x0, #158]
    1210:	lsl	w0, w0, #2
    1214:	mov	w0, w0
    1218:	ldrsw	x1, [sp, #396]
    121c:	ldrsw	x2, [sp, #392]
    1220:	ldr	x4, [sp, #384]
    1224:	mov	x3, x2
    1228:	mov	x2, x1
    122c:	mov	x1, x0
    1230:	mov	x0, x5
    1234:	bl	0 <grub_disk_read>
    1238:	cmp	w0, #0x0
    123c:	b.eq	1260 <set_rockridge+0x130>  // b.none
    1240:	ldr	x0, [sp, #384]
    1244:	bl	0 <grub_free>
    1248:	adrp	x0, 0 <grub_swap_bytes16>
    124c:	add	x0, x0, #0x0
    1250:	ldr	x1, [x0]
    1254:	mov	w0, #0x9                   	// #9
    1258:	bl	0 <grub_error>
    125c:	b	134c <set_rockridge+0x21c>
    1260:	ldr	x0, [sp, #384]
    1264:	str	x0, [sp, #376]
    1268:	ldr	x3, [sp, #376]
    126c:	mov	x2, #0x2                   	// #2
    1270:	adrp	x0, 0 <grub_swap_bytes16>
    1274:	add	x0, x0, #0x0
    1278:	ldr	x1, [x0]
    127c:	mov	x0, x3
    1280:	bl	0 <grub_strncmp>
    1284:	cmp	w0, #0x0
    1288:	b.ne	1340 <set_rockridge+0x210>  // b.any
    128c:	ldr	x0, [sp, #24]
    1290:	str	x0, [sp, #40]
    1294:	mov	x0, #0x8                   	// #8
    1298:	str	x0, [sp, #56]
    129c:	mov	x0, #0x1                   	// #1
    12a0:	str	x0, [sp, #48]
    12a4:	str	wzr, [sp, #64]
    12a8:	ldr	x0, [sp, #24]
    12ac:	add	x1, x0, #0x9c
    12b0:	add	x0, sp, #0x44
    12b4:	ldp	x2, x3, [x1]
    12b8:	stp	x2, x3, [x0]
    12bc:	ldp	x2, x3, [x1, #16]
    12c0:	stp	x2, x3, [x0, #16]
    12c4:	ldrb	w1, [x1, #32]
    12c8:	strb	w1, [x0, #32]
    12cc:	ldr	x0, [sp, #376]
    12d0:	ldrb	w0, [x0, #6]
    12d4:	mov	w1, w0
    12d8:	ldr	x0, [sp, #24]
    12dc:	str	w1, [x0, #860]
    12e0:	ldr	x0, [sp, #376]
    12e4:	ldrb	w0, [x0, #2]
    12e8:	and	x0, x0, #0xff
    12ec:	ldr	x1, [sp, #376]
    12f0:	add	x0, x1, x0
    12f4:	str	x0, [sp, #376]
    12f8:	ldrsw	x1, [sp, #396]
    12fc:	ldrsw	x2, [sp, #392]
    1300:	add	x5, sp, #0x28
    1304:	ldr	x4, [sp, #24]
    1308:	adrp	x0, 0 <grub_swap_bytes16>
    130c:	add	x0, x0, #0x0
    1310:	ldr	x3, [x0]
    1314:	mov	x0, x5
    1318:	bl	dd8 <grub_iso9660_susp_iterate>
    131c:	cmp	w0, #0x0
    1320:	b.eq	1340 <set_rockridge+0x210>  // b.none
    1324:	ldr	x0, [sp, #384]
    1328:	bl	0 <grub_free>
    132c:	adrp	x0, 0 <grub_swap_bytes16>
    1330:	add	x0, x0, #0x0
    1334:	ldr	x0, [x0]
    1338:	ldr	w0, [x0]
    133c:	b	134c <set_rockridge+0x21c>
    1340:	ldr	x0, [sp, #384]
    1344:	bl	0 <grub_free>
    1348:	mov	w0, #0x0                   	// #0
    134c:	ldp	x29, x30, [sp], #400
    1350:	ret
    1354:	nop
	...

0000000000001378 <grub_iso9660_mount>:
    1378:	sub	sp, sp, #0x380
    137c:	stp	x29, x30, [sp]
    1380:	mov	x29, sp
    1384:	str	x0, [sp, #24]
    1388:	str	xzr, [sp, #880]
    138c:	mov	x0, #0x370                 	// #880
    1390:	bl	0 <grub_zalloc>
    1394:	str	x0, [sp, #880]
    1398:	ldr	x0, [sp, #880]
    139c:	cmp	x0, #0x0
    13a0:	b.ne	13ac <grub_iso9660_mount+0x34>  // b.any
    13a4:	mov	x0, #0x0                   	// #0
    13a8:	b	152c <grub_iso9660_mount+0x1b4>
    13ac:	ldr	x0, [sp, #880]
    13b0:	ldr	x1, [sp, #24]
    13b4:	str	x1, [x0, #848]
    13b8:	mov	w0, #0x10                  	// #16
    13bc:	str	w0, [sp, #892]
    13c0:	str	wzr, [sp, #888]
    13c4:	ldr	w0, [sp, #892]
    13c8:	lsl	w0, w0, #2
    13cc:	sxtw	x0, w0
    13d0:	add	x1, sp, #0x20
    13d4:	mov	x4, x1
    13d8:	mov	x3, #0x34f                 	// #847
    13dc:	mov	x2, #0x0                   	// #0
    13e0:	mov	x1, x0
    13e4:	ldr	x0, [sp, #24]
    13e8:	bl	0 <grub_disk_read>
    13ec:	cmp	w0, #0x0
    13f0:	b.eq	140c <grub_iso9660_mount+0x94>  // b.none
    13f4:	adrp	x0, 0 <grub_swap_bytes16>
    13f8:	add	x0, x0, #0x0
    13fc:	ldr	x1, [x0]
    1400:	mov	w0, #0x9                   	// #9
    1404:	bl	0 <grub_error>
    1408:	b	1520 <grub_iso9660_mount+0x1a8>
    140c:	add	x0, sp, #0x20
    1410:	add	x3, x0, #0x1
    1414:	mov	x2, #0x5                   	// #5
    1418:	adrp	x0, 0 <grub_swap_bytes16>
    141c:	add	x0, x0, #0x0
    1420:	ldr	x1, [x0]
    1424:	mov	x0, x3
    1428:	bl	0 <grub_strncmp>
    142c:	cmp	w0, #0x0
    1430:	b.eq	144c <grub_iso9660_mount+0xd4>  // b.none
    1434:	adrp	x0, 0 <grub_swap_bytes16>
    1438:	add	x0, x0, #0x0
    143c:	ldr	x1, [x0]
    1440:	mov	w0, #0x9                   	// #9
    1444:	bl	0 <grub_error>
    1448:	b	1520 <grub_iso9660_mount+0x1a8>
    144c:	ldrb	w0, [sp, #32]
    1450:	cmp	w0, #0x1
    1454:	b.ne	1464 <grub_iso9660_mount+0xec>  // b.any
    1458:	mov	w0, #0x1                   	// #1
    145c:	str	w0, [sp, #888]
    1460:	b	14d0 <grub_iso9660_mount+0x158>
    1464:	ldr	x0, [sp, #880]
    1468:	ldr	w0, [x0, #856]
    146c:	cmp	w0, #0x0
    1470:	b.ne	14d0 <grub_iso9660_mount+0x158>  // b.any
    1474:	ldrb	w0, [sp, #32]
    1478:	cmp	w0, #0x2
    147c:	b.ne	14d0 <grub_iso9660_mount+0x158>  // b.any
    1480:	ldrb	w0, [sp, #120]
    1484:	cmp	w0, #0x25
    1488:	b.ne	14d0 <grub_iso9660_mount+0x158>  // b.any
    148c:	ldrb	w0, [sp, #121]
    1490:	cmp	w0, #0x2f
    1494:	b.ne	14d0 <grub_iso9660_mount+0x158>  // b.any
    1498:	ldrb	w0, [sp, #122]
    149c:	cmp	w0, #0x40
    14a0:	b.eq	14bc <grub_iso9660_mount+0x144>  // b.none
    14a4:	ldrb	w0, [sp, #122]
    14a8:	cmp	w0, #0x43
    14ac:	b.eq	14bc <grub_iso9660_mount+0x144>  // b.none
    14b0:	ldrb	w0, [sp, #122]
    14b4:	cmp	w0, #0x45
    14b8:	b.ne	14d0 <grub_iso9660_mount+0x158>  // b.any
    14bc:	mov	w0, #0x1                   	// #1
    14c0:	str	w0, [sp, #888]
    14c4:	ldr	x0, [sp, #880]
    14c8:	mov	w1, #0x1                   	// #1
    14cc:	str	w1, [x0, #864]
    14d0:	ldr	w0, [sp, #888]
    14d4:	cmp	w0, #0x0
    14d8:	b.eq	14fc <grub_iso9660_mount+0x184>  // b.none
    14dc:	ldr	x0, [sp, #880]
    14e0:	add	x1, sp, #0x20
    14e4:	mov	x2, #0x34f                 	// #847
    14e8:	bl	b0 <grub_memcpy>
    14ec:	ldr	x0, [sp, #880]
    14f0:	bl	1130 <set_rockridge>
    14f4:	cmp	w0, #0x0
    14f8:	b.ne	151c <grub_iso9660_mount+0x1a4>  // b.any
    14fc:	ldr	w0, [sp, #892]
    1500:	add	w0, w0, #0x1
    1504:	str	w0, [sp, #892]
    1508:	ldrb	w0, [sp, #32]
    150c:	cmp	w0, #0xff
    1510:	b.ne	13c0 <grub_iso9660_mount+0x48>  // b.any
    1514:	ldr	x0, [sp, #880]
    1518:	b	152c <grub_iso9660_mount+0x1b4>
    151c:	nop
    1520:	ldr	x0, [sp, #880]
    1524:	bl	0 <grub_free>
    1528:	mov	x0, #0x0                   	// #0
    152c:	ldp	x29, x30, [sp]
    1530:	add	sp, sp, #0x380
    1534:	ret
	...

0000000000001548 <grub_iso9660_read_symlink>:
    1548:	stp	x29, x30, [sp, #-32]!
    154c:	mov	x29, sp
    1550:	str	x0, [sp, #24]
    1554:	ldr	x0, [sp, #24]
    1558:	ldr	w0, [x0, #24]
    155c:	cmp	w0, #0x0
    1560:	b.eq	1590 <grub_iso9660_read_symlink+0x48>  // b.none
    1564:	ldr	x0, [sp, #24]
    1568:	add	x2, x0, #0x124
    156c:	ldr	x0, [sp, #24]
    1570:	ldr	x1, [x0, #8]
    1574:	mov	x0, x1
    1578:	lsl	x0, x0, #5
    157c:	add	x0, x0, x1
    1580:	sub	x0, x0, #0x108
    1584:	add	x0, x2, x0
    1588:	bl	0 <grub_strdup>
    158c:	b	15a0 <grub_iso9660_read_symlink+0x58>
    1590:	adrp	x0, 0 <grub_swap_bytes16>
    1594:	add	x0, x0, #0x0
    1598:	ldr	x0, [x0]
    159c:	bl	0 <grub_strdup>
    15a0:	ldp	x29, x30, [sp], #32
    15a4:	ret
	...

00000000000015b0 <get_node_size>:
    15b0:	sub	sp, sp, #0x20
    15b4:	str	x0, [sp, #8]
    15b8:	str	xzr, [sp, #24]
    15bc:	str	xzr, [sp, #16]
    15c0:	b	15fc <get_node_size+0x4c>
    15c4:	ldr	x2, [sp, #8]
    15c8:	ldr	x1, [sp, #16]
    15cc:	mov	x0, x1
    15d0:	lsl	x0, x0, #5
    15d4:	add	x0, x0, x1
    15d8:	add	x0, x2, x0
    15dc:	ldur	w0, [x0, #38]
    15e0:	mov	w0, w0
    15e4:	ldr	x1, [sp, #24]
    15e8:	add	x0, x1, x0
    15ec:	str	x0, [sp, #24]
    15f0:	ldr	x0, [sp, #16]
    15f4:	add	x0, x0, #0x1
    15f8:	str	x0, [sp, #16]
    15fc:	ldr	x0, [sp, #8]
    1600:	ldr	x0, [x0, #8]
    1604:	ldr	x1, [sp, #16]
    1608:	cmp	x1, x0
    160c:	b.cc	15c4 <get_node_size+0x14>  // b.lo, b.ul, b.last
    1610:	ldr	x0, [sp, #24]
    1614:	add	sp, sp, #0x20
    1618:	ret

000000000000161c <add_part>:
    161c:	stp	x29, x30, [sp, #-64]!
    1620:	mov	x29, sp
    1624:	str	x0, [sp, #40]
    1628:	str	x1, [sp, #32]
    162c:	str	w2, [sp, #28]
    1630:	ldr	x0, [sp, #40]
    1634:	ldr	x0, [x0, #16]
    1638:	cmp	x0, #0x0
    163c:	b.eq	1650 <add_part+0x34>  // b.none
    1640:	ldr	x0, [sp, #40]
    1644:	ldr	x0, [x0, #16]
    1648:	bl	0 <grub_strlen>
    164c:	b	1654 <add_part+0x38>
    1650:	mov	w0, #0x0                   	// #0
    1654:	str	w0, [sp, #60]
    1658:	ldr	x0, [sp, #40]
    165c:	ldr	x2, [x0, #16]
    1660:	ldr	w1, [sp, #60]
    1664:	ldr	w0, [sp, #28]
    1668:	add	w0, w1, w0
    166c:	add	w0, w0, #0x1
    1670:	sxtw	x0, w0
    1674:	mov	x1, x0
    1678:	mov	x0, x2
    167c:	bl	0 <grub_realloc>
    1680:	mov	x1, x0
    1684:	ldr	x0, [sp, #40]
    1688:	str	x1, [x0, #16]
    168c:	ldr	x0, [sp, #40]
    1690:	ldr	x0, [x0, #16]
    1694:	cmp	x0, #0x0
    1698:	b.eq	16e0 <add_part+0xc4>  // b.none
    169c:	ldr	x0, [sp, #40]
    16a0:	ldr	x1, [x0, #16]
    16a4:	ldrsw	x0, [sp, #60]
    16a8:	add	x0, x1, x0
    16ac:	ldrsw	x1, [sp, #28]
    16b0:	mov	x2, x1
    16b4:	ldr	x1, [sp, #32]
    16b8:	bl	b0 <grub_memcpy>
    16bc:	ldr	x0, [sp, #40]
    16c0:	ldr	x1, [x0, #16]
    16c4:	ldr	w2, [sp, #60]
    16c8:	ldr	w0, [sp, #28]
    16cc:	add	w0, w2, w0
    16d0:	sxtw	x0, w0
    16d4:	add	x0, x1, x0
    16d8:	strb	wzr, [x0]
    16dc:	b	16e4 <add_part+0xc8>
    16e0:	nop
    16e4:	ldp	x29, x30, [sp], #64
    16e8:	ret

00000000000016ec <susp_iterate_dir>:
    16ec:	stp	x29, x30, [sp, #-80]!
    16f0:	mov	x29, sp
    16f4:	str	x0, [sp, #24]
    16f8:	str	x1, [sp, #16]
    16fc:	ldr	x0, [sp, #16]
    1700:	str	x0, [sp, #56]
    1704:	ldr	x0, [sp, #24]
    1708:	mov	x2, #0x2                   	// #2
    170c:	mov	x1, x0
    1710:	adrp	x0, 0 <grub_swap_bytes16>
    1714:	add	x0, x0, #0x0
    1718:	ldr	x0, [x0]
    171c:	bl	0 <grub_strncmp>
    1720:	cmp	w0, #0x0
    1724:	b.ne	18b0 <susp_iterate_dir+0x1c4>  // b.any
    1728:	ldr	x0, [sp, #24]
    172c:	ldrb	w0, [x0, #4]
    1730:	and	w0, w0, #0x2
    1734:	cmp	w0, #0x0
    1738:	b.eq	1754 <susp_iterate_dir+0x68>  // b.none
    173c:	ldr	x0, [sp, #56]
    1740:	adrp	x1, 0 <grub_swap_bytes16>
    1744:	add	x1, x1, #0x0
    1748:	ldr	x1, [x1]
    174c:	str	x1, [x0]
    1750:	b	1b40 <susp_iterate_dir+0x454>
    1754:	ldr	x0, [sp, #24]
    1758:	ldrb	w0, [x0, #4]
    175c:	and	w0, w0, #0x4
    1760:	cmp	w0, #0x0
    1764:	b.eq	1780 <susp_iterate_dir+0x94>  // b.none
    1768:	ldr	x0, [sp, #56]
    176c:	adrp	x1, 0 <grub_swap_bytes16>
    1770:	add	x1, x1, #0x0
    1774:	ldr	x1, [x1]
    1778:	str	x1, [x0]
    177c:	b	1b40 <susp_iterate_dir+0x454>
    1780:	ldr	x0, [sp, #24]
    1784:	ldrb	w0, [x0, #2]
    1788:	cmp	w0, #0x4
    178c:	b.ls	1b40 <susp_iterate_dir+0x454>  // b.plast
    1790:	str	xzr, [sp, #72]
    1794:	mov	x0, #0x1                   	// #1
    1798:	str	x0, [sp, #40]
    179c:	ldr	x0, [sp, #24]
    17a0:	ldrb	w0, [x0, #2]
    17a4:	sub	w0, w0, #0x5
    17a8:	sxtw	x0, w0
    17ac:	str	x0, [sp, #40]
    17b0:	ldr	x0, [sp, #56]
    17b4:	ldr	x0, [x0]
    17b8:	str	x0, [sp, #32]
    17bc:	ldr	x0, [sp, #56]
    17c0:	ldr	w0, [x0, #8]
    17c4:	cmp	w0, #0x0
    17c8:	b.eq	1810 <susp_iterate_dir+0x124>  // b.none
    17cc:	ldr	x0, [sp, #56]
    17d0:	ldr	x0, [x0]
    17d4:	bl	0 <grub_strlen>
    17d8:	str	x0, [sp, #72]
    17dc:	ldr	x0, [sp, #56]
    17e0:	ldr	x2, [x0]
    17e4:	ldr	x1, [sp, #40]
    17e8:	ldr	x0, [sp, #72]
    17ec:	add	x0, x1, x0
    17f0:	add	x0, x0, #0x1
    17f4:	mov	x1, x0
    17f8:	mov	x0, x2
    17fc:	bl	0 <grub_realloc>
    1800:	mov	x1, x0
    1804:	ldr	x0, [sp, #56]
    1808:	str	x1, [x0]
    180c:	b	182c <susp_iterate_dir+0x140>
    1810:	str	xzr, [sp, #72]
    1814:	ldr	x0, [sp, #40]
    1818:	add	x0, x0, #0x1
    181c:	bl	0 <grub_zalloc>
    1820:	mov	x1, x0
    1824:	ldr	x0, [sp, #56]
    1828:	str	x1, [x0]
    182c:	ldr	x0, [sp, #56]
    1830:	ldr	x0, [x0]
    1834:	cmp	x0, #0x0
    1838:	b.ne	185c <susp_iterate_dir+0x170>  // b.any
    183c:	ldr	x0, [sp, #56]
    1840:	ldr	x1, [sp, #32]
    1844:	str	x1, [x0]
    1848:	adrp	x0, 0 <grub_swap_bytes16>
    184c:	add	x0, x0, #0x0
    1850:	ldr	x0, [x0]
    1854:	ldr	w0, [x0]
    1858:	b	1b44 <susp_iterate_dir+0x458>
    185c:	ldr	x0, [sp, #56]
    1860:	mov	w1, #0x1                   	// #1
    1864:	str	w1, [x0, #8]
    1868:	ldr	x0, [sp, #56]
    186c:	ldr	x1, [x0]
    1870:	ldr	x0, [sp, #72]
    1874:	add	x3, x1, x0
    1878:	ldr	x0, [sp, #24]
    187c:	add	x0, x0, #0x5
    1880:	ldr	x2, [sp, #40]
    1884:	mov	x1, x0
    1888:	mov	x0, x3
    188c:	bl	b0 <grub_memcpy>
    1890:	ldr	x0, [sp, #56]
    1894:	ldr	x1, [x0]
    1898:	ldr	x2, [sp, #72]
    189c:	ldr	x0, [sp, #40]
    18a0:	add	x0, x2, x0
    18a4:	add	x0, x1, x0
    18a8:	strb	wzr, [x0]
    18ac:	b	1b40 <susp_iterate_dir+0x454>
    18b0:	ldr	x3, [sp, #24]
    18b4:	mov	x2, #0x2                   	// #2
    18b8:	adrp	x0, 0 <grub_swap_bytes16>
    18bc:	add	x0, x0, #0x0
    18c0:	ldr	x1, [x0]
    18c4:	mov	x0, x3
    18c8:	bl	0 <grub_strncmp>
    18cc:	cmp	w0, #0x0
    18d0:	b.ne	1968 <susp_iterate_dir+0x27c>  // b.any
    18d4:	ldr	x0, [sp, #24]
    18d8:	ldrb	w0, [x0, #4]
    18dc:	mov	w1, w0
    18e0:	ldr	x0, [sp, #24]
    18e4:	ldrb	w0, [x0, #5]
    18e8:	lsl	w0, w0, #8
    18ec:	add	w0, w1, w0
    18f0:	and	w0, w0, #0xf000
    18f4:	str	w0, [sp, #52]
    18f8:	ldr	w0, [sp, #52]
    18fc:	cmp	w0, #0xa, lsl #12
    1900:	b.eq	194c <susp_iterate_dir+0x260>  // b.none
    1904:	ldr	w0, [sp, #52]
    1908:	cmp	w0, #0xa, lsl #12
    190c:	b.hi	195c <susp_iterate_dir+0x270>  // b.pmore
    1910:	ldr	w0, [sp, #52]
    1914:	cmp	w0, #0x4, lsl #12
    1918:	b.eq	192c <susp_iterate_dir+0x240>  // b.none
    191c:	ldr	w0, [sp, #52]
    1920:	cmp	w0, #0x8, lsl #12
    1924:	b.eq	193c <susp_iterate_dir+0x250>  // b.none
    1928:	b	195c <susp_iterate_dir+0x270>
    192c:	ldr	x0, [sp, #56]
    1930:	mov	w1, #0x2                   	// #2
    1934:	str	w1, [x0, #12]
    1938:	b	1b40 <susp_iterate_dir+0x454>
    193c:	ldr	x0, [sp, #56]
    1940:	mov	w1, #0x1                   	// #1
    1944:	str	w1, [x0, #12]
    1948:	b	1b40 <susp_iterate_dir+0x454>
    194c:	ldr	x0, [sp, #56]
    1950:	mov	w1, #0x3                   	// #3
    1954:	str	w1, [x0, #12]
    1958:	b	1b40 <susp_iterate_dir+0x454>
    195c:	ldr	x0, [sp, #56]
    1960:	str	wzr, [x0, #12]
    1964:	b	1b40 <susp_iterate_dir+0x454>
    1968:	ldr	x0, [sp, #24]
    196c:	mov	x2, #0x2                   	// #2
    1970:	mov	x1, x0
    1974:	adrp	x0, 0 <grub_swap_bytes16>
    1978:	add	x0, x0, #0x0
    197c:	ldr	x0, [x0]
    1980:	bl	0 <grub_strncmp>
    1984:	cmp	w0, #0x0
    1988:	b.ne	1b40 <susp_iterate_dir+0x454>  // b.any
    198c:	mov	w0, #0x1                   	// #1
    1990:	str	w0, [sp, #68]
    1994:	b	1af8 <susp_iterate_dir+0x40c>
    1998:	ldr	x1, [sp, #24]
    199c:	ldr	w0, [sp, #68]
    19a0:	add	x0, x1, x0
    19a4:	ldrb	w0, [x0, #4]
    19a8:	and	w0, w0, #0x1e
    19ac:	cmp	w0, #0x8
    19b0:	b.eq	1ab0 <susp_iterate_dir+0x3c4>  // b.none
    19b4:	cmp	w0, #0x8
    19b8:	b.gt	1acc <susp_iterate_dir+0x3e0>
    19bc:	cmp	w0, #0x4
    19c0:	b.eq	1a94 <susp_iterate_dir+0x3a8>  // b.none
    19c4:	cmp	w0, #0x4
    19c8:	b.gt	1acc <susp_iterate_dir+0x3e0>
    19cc:	cmp	w0, #0x0
    19d0:	b.eq	19e0 <susp_iterate_dir+0x2f4>  // b.none
    19d4:	cmp	w0, #0x2
    19d8:	b.eq	1a78 <susp_iterate_dir+0x38c>  // b.none
    19dc:	b	1acc <susp_iterate_dir+0x3e0>
    19e0:	ldr	x0, [sp, #56]
    19e4:	ldr	x0, [x0, #16]
    19e8:	cmp	x0, #0x0
    19ec:	b.eq	1a18 <susp_iterate_dir+0x32c>  // b.none
    19f0:	ldr	x0, [sp, #56]
    19f4:	ldr	w0, [x0, #24]
    19f8:	cmp	w0, #0x0
    19fc:	b.ne	1a18 <susp_iterate_dir+0x32c>  // b.any
    1a00:	mov	w2, #0x1                   	// #1
    1a04:	adrp	x0, 0 <grub_swap_bytes16>
    1a08:	add	x0, x0, #0x0
    1a0c:	ldr	x1, [x0]
    1a10:	ldr	x0, [sp, #56]
    1a14:	bl	161c <add_part>
    1a18:	ldr	w0, [sp, #68]
    1a1c:	add	w0, w0, #0x2
    1a20:	mov	w0, w0
    1a24:	ldr	x1, [sp, #24]
    1a28:	add	x0, x1, x0
    1a2c:	add	x3, x0, #0x4
    1a30:	ldr	w0, [sp, #68]
    1a34:	add	w0, w0, #0x1
    1a38:	ldr	x1, [sp, #24]
    1a3c:	mov	w0, w0
    1a40:	add	x0, x1, x0
    1a44:	ldrb	w0, [x0, #4]
    1a48:	mov	w2, w0
    1a4c:	mov	x1, x3
    1a50:	ldr	x0, [sp, #56]
    1a54:	bl	161c <add_part>
    1a58:	ldr	x1, [sp, #24]
    1a5c:	ldr	w0, [sp, #68]
    1a60:	add	x0, x1, x0
    1a64:	ldrb	w0, [x0, #4]
    1a68:	and	w1, w0, #0x1
    1a6c:	ldr	x0, [sp, #56]
    1a70:	str	w1, [x0, #24]
    1a74:	b	1acc <susp_iterate_dir+0x3e0>
    1a78:	mov	w2, #0x2                   	// #2
    1a7c:	adrp	x0, 0 <grub_swap_bytes16>
    1a80:	add	x0, x0, #0x0
    1a84:	ldr	x1, [x0]
    1a88:	ldr	x0, [sp, #56]
    1a8c:	bl	161c <add_part>
    1a90:	b	1acc <susp_iterate_dir+0x3e0>
    1a94:	mov	w2, #0x3                   	// #3
    1a98:	adrp	x0, 0 <grub_swap_bytes16>
    1a9c:	add	x0, x0, #0x0
    1aa0:	ldr	x1, [x0]
    1aa4:	ldr	x0, [sp, #56]
    1aa8:	bl	161c <add_part>
    1aac:	b	1acc <susp_iterate_dir+0x3e0>
    1ab0:	mov	w2, #0x1                   	// #1
    1ab4:	adrp	x0, 0 <grub_swap_bytes16>
    1ab8:	add	x0, x0, #0x0
    1abc:	ldr	x1, [x0]
    1ac0:	ldr	x0, [sp, #56]
    1ac4:	bl	161c <add_part>
    1ac8:	nop
    1acc:	ldr	w0, [sp, #68]
    1ad0:	add	w0, w0, #0x1
    1ad4:	ldr	x1, [sp, #24]
    1ad8:	mov	w0, w0
    1adc:	add	x0, x1, x0
    1ae0:	ldrb	w0, [x0, #4]
    1ae4:	mov	w1, w0
    1ae8:	ldr	w0, [sp, #68]
    1aec:	add	w0, w1, w0
    1af0:	add	w0, w0, #0x2
    1af4:	str	w0, [sp, #68]
    1af8:	ldr	w0, [sp, #68]
    1afc:	add	x1, x0, #0x4
    1b00:	ldr	x0, [sp, #24]
    1b04:	ldrb	w0, [x0, #2]
    1b08:	and	x0, x0, #0xff
    1b0c:	cmp	x1, x0
    1b10:	b.cc	1998 <susp_iterate_dir+0x2ac>  // b.lo, b.ul, b.last
    1b14:	adrp	x0, 0 <grub_swap_bytes16>
    1b18:	add	x0, x0, #0x0
    1b1c:	ldr	x0, [x0]
    1b20:	ldr	w0, [x0]
    1b24:	cmp	w0, #0x0
    1b28:	b.eq	1b40 <susp_iterate_dir+0x454>  // b.none
    1b2c:	adrp	x0, 0 <grub_swap_bytes16>
    1b30:	add	x0, x0, #0x0
    1b34:	ldr	x0, [x0]
    1b38:	ldr	w0, [x0]
    1b3c:	b	1b44 <susp_iterate_dir+0x458>
    1b40:	mov	w0, #0x0                   	// #0
    1b44:	ldp	x29, x30, [sp], #80
    1b48:	ret
    1b4c:	nop
	...

0000000000001b98 <grub_iso9660_iterate_dir>:
    1b98:	stp	x29, x30, [sp, #-464]!
    1b9c:	mov	x29, sp
    1ba0:	str	x19, [sp, #16]
    1ba4:	str	x0, [sp, #56]
    1ba8:	str	x1, [sp, #48]
    1bac:	str	x2, [sp, #40]
    1bb0:	str	xzr, [sp, #456]
    1bb4:	ldr	x0, [sp, #56]
    1bb8:	bl	15b0 <get_node_size>
    1bbc:	str	x0, [sp, #432]
    1bc0:	b	21e4 <grub_iso9660_iterate_dir+0x64c>
    1bc4:	str	xzr, [sp, #336]
    1bc8:	str	wzr, [sp, #344]
    1bcc:	add	x0, sp, #0x160
    1bd0:	mov	x3, x0
    1bd4:	mov	x2, #0x21                  	// #33
    1bd8:	ldr	x1, [sp, #456]
    1bdc:	ldr	x0, [sp, #56]
    1be0:	bl	c24 <read_node>
    1be4:	cmp	w0, #0x0
    1be8:	b.eq	1bf4 <grub_iso9660_iterate_dir+0x5c>  // b.none
    1bec:	mov	w0, #0x0                   	// #0
    1bf0:	b	21f8 <grub_iso9660_iterate_dir+0x660>
    1bf4:	ldrb	w0, [sp, #352]
    1bf8:	cmp	w0, #0x0
    1bfc:	b.ne	1c18 <grub_iso9660_iterate_dir+0x80>  // b.any
    1c00:	ldr	x0, [sp, #456]
    1c04:	lsr	x0, x0, #11
    1c08:	add	x0, x0, #0x1
    1c0c:	lsl	x0, x0, #11
    1c10:	str	x0, [sp, #456]
    1c14:	b	21d0 <grub_iso9660_iterate_dir+0x638>
    1c18:	ldr	x0, [sp, #456]
    1c1c:	add	w0, w0, #0x21
    1c20:	str	w0, [sp, #428]
    1c24:	ldrb	w0, [sp, #384]
    1c28:	and	w0, w0, #0xfffffffe
    1c2c:	add	w0, w0, #0x22
    1c30:	str	w0, [sp, #424]
    1c34:	ldrb	w0, [sp, #352]
    1c38:	mov	w1, w0
    1c3c:	ldr	w0, [sp, #424]
    1c40:	sub	w0, w1, w0
    1c44:	str	w0, [sp, #420]
    1c48:	ldr	x0, [sp, #56]
    1c4c:	ldr	x0, [x0]
    1c50:	ldr	w0, [x0, #860]
    1c54:	mov	w1, w0
    1c58:	ldr	x0, [sp, #456]
    1c5c:	add	w1, w1, w0
    1c60:	ldr	w0, [sp, #424]
    1c64:	add	w0, w1, w0
    1c68:	str	w0, [sp, #424]
    1c6c:	str	xzr, [sp, #320]
    1c70:	str	wzr, [sp, #328]
    1c74:	str	wzr, [sp, #332]
    1c78:	ldr	x0, [sp, #56]
    1c7c:	ldr	x0, [x0]
    1c80:	ldr	w0, [x0, #856]
    1c84:	cmp	w0, #0x0
    1c88:	b.eq	1cc0 <grub_iso9660_iterate_dir+0x128>  // b.none
    1c8c:	ldrsw	x1, [sp, #424]
    1c90:	ldrsw	x2, [sp, #420]
    1c94:	add	x0, sp, #0x140
    1c98:	mov	x4, x0
    1c9c:	adrp	x0, 0 <grub_swap_bytes16>
    1ca0:	add	x0, x0, #0x0
    1ca4:	ldr	x3, [x0]
    1ca8:	ldr	x0, [sp, #56]
    1cac:	bl	dd8 <grub_iso9660_susp_iterate>
    1cb0:	cmp	w0, #0x0
    1cb4:	b.eq	1cc0 <grub_iso9660_iterate_dir+0x128>  // b.none
    1cb8:	mov	w0, #0x0                   	// #0
    1cbc:	b	21f8 <grub_iso9660_iterate_dir+0x660>
    1cc0:	ldrsw	x0, [sp, #428]
    1cc4:	ldrb	w1, [sp, #384]
    1cc8:	and	x1, x1, #0xff
    1ccc:	add	x2, sp, #0x40
    1cd0:	mov	x3, x2
    1cd4:	mov	x2, x1
    1cd8:	mov	x1, x0
    1cdc:	ldr	x0, [sp, #56]
    1ce0:	bl	c24 <read_node>
    1ce4:	cmp	w0, #0x0
    1ce8:	b.eq	1cf4 <grub_iso9660_iterate_dir+0x15c>  // b.none
    1cec:	mov	w0, #0x0                   	// #0
    1cf0:	b	21f8 <grub_iso9660_iterate_dir+0x660>
    1cf4:	mov	x0, #0x128                 	// #296
    1cf8:	bl	0 <grub_malloc>
    1cfc:	str	x0, [sp, #448]
    1d00:	ldr	x0, [sp, #448]
    1d04:	cmp	x0, #0x0
    1d08:	b.ne	1d14 <grub_iso9660_iterate_dir+0x17c>  // b.any
    1d0c:	mov	w0, #0x0                   	// #0
    1d10:	b	21f8 <grub_iso9660_iterate_dir+0x660>
    1d14:	ldr	x0, [sp, #448]
    1d18:	mov	x1, #0x8                   	// #8
    1d1c:	str	x1, [x0, #16]
    1d20:	ldr	x0, [sp, #448]
    1d24:	mov	x1, #0x1                   	// #1
    1d28:	str	x1, [x0, #8]
    1d2c:	ldr	x0, [sp, #56]
    1d30:	ldr	x1, [x0]
    1d34:	ldr	x0, [sp, #448]
    1d38:	str	x1, [x0]
    1d3c:	ldr	x0, [sp, #448]
    1d40:	str	wzr, [x0, #24]
    1d44:	ldr	w0, [sp, #332]
    1d48:	cmp	w0, #0x0
    1d4c:	b.ne	1d74 <grub_iso9660_iterate_dir+0x1dc>  // b.any
    1d50:	ldrb	w0, [sp, #377]
    1d54:	and	w0, w0, #0x3
    1d58:	cmp	w0, #0x2
    1d5c:	b.ne	1d6c <grub_iso9660_iterate_dir+0x1d4>  // b.any
    1d60:	mov	w0, #0x2                   	// #2
    1d64:	str	w0, [sp, #332]
    1d68:	b	1d74 <grub_iso9660_iterate_dir+0x1dc>
    1d6c:	mov	w0, #0x1                   	// #1
    1d70:	str	w0, [sp, #332]
    1d74:	ldr	x0, [sp, #320]
    1d78:	cmp	x0, #0x0
    1d7c:	b.ne	1da8 <grub_iso9660_iterate_dir+0x210>  // b.any
    1d80:	ldrb	w0, [sp, #384]
    1d84:	cmp	w0, #0x1
    1d88:	b.ne	1da8 <grub_iso9660_iterate_dir+0x210>  // b.any
    1d8c:	ldrb	w0, [sp, #64]
    1d90:	cmp	w0, #0x0
    1d94:	b.ne	1da8 <grub_iso9660_iterate_dir+0x210>  // b.any
    1d98:	adrp	x0, 0 <grub_swap_bytes16>
    1d9c:	add	x0, x0, #0x0
    1da0:	ldr	x0, [x0]
    1da4:	str	x0, [sp, #320]
    1da8:	ldr	x0, [sp, #320]
    1dac:	cmp	x0, #0x0
    1db0:	b.ne	1ddc <grub_iso9660_iterate_dir+0x244>  // b.any
    1db4:	ldrb	w0, [sp, #384]
    1db8:	cmp	w0, #0x1
    1dbc:	b.ne	1ddc <grub_iso9660_iterate_dir+0x244>  // b.any
    1dc0:	ldrb	w0, [sp, #64]
    1dc4:	cmp	w0, #0x1
    1dc8:	b.ne	1ddc <grub_iso9660_iterate_dir+0x244>  // b.any
    1dcc:	adrp	x0, 0 <grub_swap_bytes16>
    1dd0:	add	x0, x0, #0x0
    1dd4:	ldr	x0, [x0]
    1dd8:	str	x0, [sp, #320]
    1ddc:	ldr	x0, [sp, #56]
    1de0:	ldr	x0, [x0]
    1de4:	ldr	w0, [x0, #864]
    1de8:	cmp	w0, #0x0
    1dec:	b.ne	1eb4 <grub_iso9660_iterate_dir+0x31c>  // b.any
    1df0:	ldr	x0, [sp, #320]
    1df4:	cmp	x0, #0x0
    1df8:	b.ne	1eb4 <grub_iso9660_iterate_dir+0x31c>  // b.any
    1dfc:	ldrb	w0, [sp, #384]
    1e00:	sxtw	x0, w0
    1e04:	add	x1, sp, #0x40
    1e08:	strb	wzr, [x1, x0]
    1e0c:	add	x0, sp, #0x40
    1e10:	mov	w1, #0x3b                  	// #59
    1e14:	bl	0 <grub_strrchr>
    1e18:	str	x0, [sp, #320]
    1e1c:	ldr	x0, [sp, #320]
    1e20:	cmp	x0, #0x0
    1e24:	b.eq	1e30 <grub_iso9660_iterate_dir+0x298>  // b.none
    1e28:	ldr	x0, [sp, #320]
    1e2c:	strb	wzr, [x0]
    1e30:	ldr	w0, [sp, #332]
    1e34:	orr	w0, w0, #0x100
    1e38:	str	w0, [sp, #332]
    1e3c:	add	x0, sp, #0x40
    1e40:	str	x0, [sp, #440]
    1e44:	b	1e6c <grub_iso9660_iterate_dir+0x2d4>
    1e48:	ldr	x0, [sp, #440]
    1e4c:	ldrb	w0, [x0]
    1e50:	bl	dc <grub_tolower>
    1e54:	and	w1, w0, #0xff
    1e58:	ldr	x0, [sp, #440]
    1e5c:	strb	w1, [x0]
    1e60:	ldr	x0, [sp, #440]
    1e64:	add	x0, x0, #0x1
    1e68:	str	x0, [sp, #440]
    1e6c:	ldr	x0, [sp, #440]
    1e70:	ldrb	w0, [x0]
    1e74:	cmp	w0, #0x0
    1e78:	b.ne	1e48 <grub_iso9660_iterate_dir+0x2b0>  // b.any
    1e7c:	add	x0, sp, #0x40
    1e80:	ldr	x1, [sp, #440]
    1e84:	cmp	x1, x0
    1e88:	b.eq	1eac <grub_iso9660_iterate_dir+0x314>  // b.none
    1e8c:	ldr	x0, [sp, #440]
    1e90:	sub	x0, x0, #0x1
    1e94:	ldrb	w0, [x0]
    1e98:	cmp	w0, #0x2e
    1e9c:	b.ne	1eac <grub_iso9660_iterate_dir+0x314>  // b.any
    1ea0:	ldr	x0, [sp, #440]
    1ea4:	sub	x0, x0, #0x1
    1ea8:	strb	wzr, [x0]
    1eac:	add	x0, sp, #0x40
    1eb0:	str	x0, [sp, #320]
    1eb4:	ldr	x0, [sp, #56]
    1eb8:	ldr	x0, [x0]
    1ebc:	ldr	w0, [x0, #864]
    1ec0:	cmp	w0, #0x0
    1ec4:	b.eq	1f1c <grub_iso9660_iterate_dir+0x384>  // b.none
    1ec8:	ldr	x0, [sp, #320]
    1ecc:	cmp	x0, #0x0
    1ed0:	b.ne	1f1c <grub_iso9660_iterate_dir+0x384>  // b.any
    1ed4:	ldrb	w0, [sp, #384]
    1ed8:	lsr	w0, w0, #1
    1edc:	and	w0, w0, #0xff
    1ee0:	mov	w1, w0
    1ee4:	add	x0, sp, #0x40
    1ee8:	bl	1010 <grub_iso9660_convert_string>
    1eec:	str	x0, [sp, #320]
    1ef0:	ldr	x0, [sp, #320]
    1ef4:	mov	w1, #0x3b                  	// #59
    1ef8:	bl	0 <grub_strrchr>
    1efc:	str	x0, [sp, #408]
    1f00:	ldr	x0, [sp, #408]
    1f04:	cmp	x0, #0x0
    1f08:	b.eq	1f14 <grub_iso9660_iterate_dir+0x37c>  // b.none
    1f0c:	ldr	x0, [sp, #408]
    1f10:	strb	wzr, [x0]
    1f14:	mov	w0, #0x1                   	// #1
    1f18:	str	w0, [sp, #328]
    1f1c:	ldr	x0, [sp, #448]
    1f20:	add	x0, x0, #0x1c
    1f24:	mov	x1, x0
    1f28:	add	x0, sp, #0x160
    1f2c:	ldp	x2, x3, [x0]
    1f30:	stp	x2, x3, [x1]
    1f34:	ldp	x2, x3, [x0, #16]
    1f38:	stp	x2, x3, [x1, #16]
    1f3c:	ldrb	w0, [x0, #32]
    1f40:	strb	w0, [x1, #32]
    1f44:	b	207c <grub_iso9660_iterate_dir+0x4e4>
    1f48:	ldrb	w0, [sp, #352]
    1f4c:	and	x0, x0, #0xff
    1f50:	ldr	x1, [sp, #456]
    1f54:	add	x0, x1, x0
    1f58:	str	x0, [sp, #456]
    1f5c:	add	x0, sp, #0x160
    1f60:	mov	x3, x0
    1f64:	mov	x2, #0x21                  	// #33
    1f68:	ldr	x1, [sp, #456]
    1f6c:	ldr	x0, [sp, #56]
    1f70:	bl	c24 <read_node>
    1f74:	cmp	w0, #0x0
    1f78:	b.eq	1fa0 <grub_iso9660_iterate_dir+0x408>  // b.none
    1f7c:	ldr	w0, [sp, #328]
    1f80:	cmp	w0, #0x0
    1f84:	b.eq	1f90 <grub_iso9660_iterate_dir+0x3f8>  // b.none
    1f88:	ldr	x0, [sp, #320]
    1f8c:	bl	0 <grub_free>
    1f90:	ldr	x0, [sp, #448]
    1f94:	bl	0 <grub_free>
    1f98:	mov	w0, #0x0                   	// #0
    1f9c:	b	21f8 <grub_iso9660_iterate_dir+0x660>
    1fa0:	ldr	x0, [sp, #448]
    1fa4:	ldr	x1, [x0, #8]
    1fa8:	ldr	x0, [sp, #448]
    1fac:	ldr	x0, [x0, #16]
    1fb0:	cmp	x1, x0
    1fb4:	b.cc	202c <grub_iso9660_iterate_dir+0x494>  // b.lo, b.ul, b.last
    1fb8:	ldr	x0, [sp, #448]
    1fbc:	ldr	x0, [x0, #16]
    1fc0:	lsl	x1, x0, #1
    1fc4:	ldr	x0, [sp, #448]
    1fc8:	str	x1, [x0, #16]
    1fcc:	ldr	x0, [sp, #448]
    1fd0:	ldr	x1, [x0, #16]
    1fd4:	mov	x0, x1
    1fd8:	lsl	x0, x0, #5
    1fdc:	add	x0, x0, x1
    1fe0:	add	x0, x0, #0x20
    1fe4:	mov	x1, x0
    1fe8:	ldr	x0, [sp, #448]
    1fec:	bl	0 <grub_realloc>
    1ff0:	str	x0, [sp, #392]
    1ff4:	ldr	x0, [sp, #392]
    1ff8:	cmp	x0, #0x0
    1ffc:	b.ne	2024 <grub_iso9660_iterate_dir+0x48c>  // b.any
    2000:	ldr	w0, [sp, #328]
    2004:	cmp	w0, #0x0
    2008:	b.eq	2014 <grub_iso9660_iterate_dir+0x47c>  // b.none
    200c:	ldr	x0, [sp, #320]
    2010:	bl	0 <grub_free>
    2014:	ldr	x0, [sp, #448]
    2018:	bl	0 <grub_free>
    201c:	mov	w0, #0x0                   	// #0
    2020:	b	21f8 <grub_iso9660_iterate_dir+0x660>
    2024:	ldr	x0, [sp, #392]
    2028:	str	x0, [sp, #448]
    202c:	ldr	x0, [sp, #448]
    2030:	ldr	x1, [x0, #8]
    2034:	add	x2, x1, #0x1
    2038:	ldr	x0, [sp, #448]
    203c:	str	x2, [x0, #8]
    2040:	ldr	x2, [sp, #448]
    2044:	mov	x0, x1
    2048:	lsl	x0, x0, #5
    204c:	add	x0, x0, x1
    2050:	add	x0, x2, x0
    2054:	add	x0, x0, #0x10
    2058:	add	x0, x0, #0xc
    205c:	mov	x1, x0
    2060:	add	x0, sp, #0x160
    2064:	ldp	x2, x3, [x0]
    2068:	stp	x2, x3, [x1]
    206c:	ldp	x2, x3, [x0, #16]
    2070:	stp	x2, x3, [x1, #16]
    2074:	ldrb	w0, [x0, #32]
    2078:	strb	w0, [x1, #32]
    207c:	ldrb	w0, [sp, #377]
    2080:	sxtb	w0, w0
    2084:	cmp	w0, #0x0
    2088:	b.lt	1f48 <grub_iso9660_iterate_dir+0x3b0>  // b.tstop
    208c:	ldr	x0, [sp, #336]
    2090:	cmp	x0, #0x0
    2094:	b.eq	2180 <grub_iso9660_iterate_dir+0x5e8>  // b.none
    2098:	ldr	x0, [sp, #448]
    209c:	ldr	x1, [x0, #16]
    20a0:	ldr	x0, [sp, #448]
    20a4:	ldr	x0, [x0, #8]
    20a8:	sub	x1, x1, x0
    20ac:	mov	x0, x1
    20b0:	lsl	x0, x0, #5
    20b4:	add	x19, x0, x1
    20b8:	ldr	x0, [sp, #336]
    20bc:	bl	0 <grub_strlen>
    20c0:	add	x0, x0, #0x1
    20c4:	cmp	x19, x0
    20c8:	b.cs	2138 <grub_iso9660_iterate_dir+0x5a0>  // b.hs, b.nlast
    20cc:	ldr	x0, [sp, #448]
    20d0:	ldr	x1, [x0, #16]
    20d4:	mov	x0, x1
    20d8:	lsl	x0, x0, #5
    20dc:	add	x19, x0, x1
    20e0:	ldr	x0, [sp, #336]
    20e4:	bl	0 <grub_strlen>
    20e8:	add	x0, x19, x0
    20ec:	add	x0, x0, #0x21
    20f0:	mov	x1, x0
    20f4:	ldr	x0, [sp, #448]
    20f8:	bl	0 <grub_realloc>
    20fc:	str	x0, [sp, #400]
    2100:	ldr	x0, [sp, #400]
    2104:	cmp	x0, #0x0
    2108:	b.ne	2130 <grub_iso9660_iterate_dir+0x598>  // b.any
    210c:	ldr	w0, [sp, #328]
    2110:	cmp	w0, #0x0
    2114:	b.eq	2120 <grub_iso9660_iterate_dir+0x588>  // b.none
    2118:	ldr	x0, [sp, #320]
    211c:	bl	0 <grub_free>
    2120:	ldr	x0, [sp, #448]
    2124:	bl	0 <grub_free>
    2128:	mov	w0, #0x0                   	// #0
    212c:	b	21f8 <grub_iso9660_iterate_dir+0x660>
    2130:	ldr	x0, [sp, #400]
    2134:	str	x0, [sp, #448]
    2138:	ldr	x0, [sp, #448]
    213c:	mov	w1, #0x1                   	// #1
    2140:	str	w1, [x0, #24]
    2144:	ldr	x0, [sp, #448]
    2148:	add	x2, x0, #0x124
    214c:	ldr	x0, [sp, #448]
    2150:	ldr	x1, [x0, #8]
    2154:	mov	x0, x1
    2158:	lsl	x0, x0, #5
    215c:	add	x0, x0, x1
    2160:	sub	x0, x0, #0x108
    2164:	add	x0, x2, x0
    2168:	ldr	x1, [sp, #336]
    216c:	bl	0 <grub_strcpy>
    2170:	ldr	x0, [sp, #336]
    2174:	bl	0 <grub_free>
    2178:	str	xzr, [sp, #336]
    217c:	str	wzr, [sp, #344]
    2180:	ldr	x0, [sp, #320]
    2184:	ldr	w1, [sp, #332]
    2188:	ldr	x4, [sp, #48]
    218c:	ldr	x3, [sp, #40]
    2190:	ldr	x2, [sp, #448]
    2194:	blr	x4
    2198:	cmp	w0, #0x0
    219c:	b.eq	21bc <grub_iso9660_iterate_dir+0x624>  // b.none
    21a0:	ldr	w0, [sp, #328]
    21a4:	cmp	w0, #0x0
    21a8:	b.eq	21b4 <grub_iso9660_iterate_dir+0x61c>  // b.none
    21ac:	ldr	x0, [sp, #320]
    21b0:	bl	0 <grub_free>
    21b4:	mov	w0, #0x1                   	// #1
    21b8:	b	21f8 <grub_iso9660_iterate_dir+0x660>
    21bc:	ldr	w0, [sp, #328]
    21c0:	cmp	w0, #0x0
    21c4:	b.eq	21d0 <grub_iso9660_iterate_dir+0x638>  // b.none
    21c8:	ldr	x0, [sp, #320]
    21cc:	bl	0 <grub_free>
    21d0:	ldrb	w0, [sp, #352]
    21d4:	and	x0, x0, #0xff
    21d8:	ldr	x1, [sp, #456]
    21dc:	add	x0, x1, x0
    21e0:	str	x0, [sp, #456]
    21e4:	ldr	x1, [sp, #456]
    21e8:	ldr	x0, [sp, #432]
    21ec:	cmp	x1, x0
    21f0:	b.cc	1bc4 <grub_iso9660_iterate_dir+0x2c>  // b.lo, b.ul, b.last
    21f4:	mov	w0, #0x0                   	// #0
    21f8:	ldr	x19, [sp, #16]
    21fc:	ldp	x29, x30, [sp], #464
    2200:	ret
    2204:	nop
	...

0000000000002220 <grub_iso9660_dir_iter>:
    2220:	stp	x29, x30, [sp, #-80]!
    2224:	mov	x29, sp
    2228:	str	x0, [sp, #40]
    222c:	str	w1, [sp, #36]
    2230:	str	x2, [sp, #24]
    2234:	str	x3, [sp, #16]
    2238:	ldr	x0, [sp, #16]
    223c:	str	x0, [sp, #72]
    2240:	add	x0, sp, #0x38
    2244:	mov	x2, #0x10                  	// #16
    2248:	mov	w1, #0x0                   	// #0
    224c:	bl	0 <grub_memset>
    2250:	ldr	w0, [sp, #36]
    2254:	and	w0, w0, #0xff
    2258:	cmp	w0, #0x2
    225c:	cset	w0, eq  // eq = none
    2260:	and	w1, w0, #0xff
    2264:	ldrb	w0, [sp, #56]
    2268:	bfxil	w0, w1, #0, #1
    226c:	strb	w0, [sp, #56]
    2270:	ldr	x0, [sp, #24]
    2274:	add	x2, x0, #0x2e
    2278:	add	x0, sp, #0x38
    227c:	add	x0, x0, #0x4
    2280:	mov	x1, x0
    2284:	mov	x0, x2
    2288:	bl	b70 <iso9660_to_unixtime2>
    228c:	cmp	w0, #0x0
    2290:	cset	w0, ne  // ne = any
    2294:	and	w1, w0, #0xff
    2298:	ldrb	w0, [sp, #56]
    229c:	bfi	w0, w1, #1, #1
    22a0:	strb	w0, [sp, #56]
    22a4:	ldr	x0, [sp, #24]
    22a8:	bl	0 <grub_free>
    22ac:	ldr	x0, [sp, #72]
    22b0:	ldr	x3, [x0]
    22b4:	ldr	x0, [sp, #72]
    22b8:	ldr	x1, [x0, #8]
    22bc:	add	x0, sp, #0x38
    22c0:	mov	x2, x1
    22c4:	mov	x1, x0
    22c8:	ldr	x0, [sp, #40]
    22cc:	blr	x3
    22d0:	ldp	x29, x30, [sp], #80
    22d4:	ret

00000000000022d8 <grub_iso9660_dir>:
    22d8:	stp	x29, x30, [sp, #-384]!
    22dc:	mov	x29, sp
    22e0:	str	x0, [sp, #40]
    22e4:	str	x1, [sp, #32]
    22e8:	str	x2, [sp, #24]
    22ec:	str	x3, [sp, #16]
    22f0:	ldr	x0, [sp, #24]
    22f4:	str	x0, [sp, #360]
    22f8:	ldr	x0, [sp, #16]
    22fc:	str	x0, [sp, #368]
    2300:	str	xzr, [sp, #376]
    2304:	adrp	x0, 0 <grub_swap_bytes16>
    2308:	add	x0, x0, #0x0
    230c:	ldr	x0, [x0]
    2310:	ldr	x0, [x0]
    2314:	bl	0 <grub_dl_ref>
    2318:	ldr	x0, [sp, #40]
    231c:	ldr	x0, [x0]
    2320:	bl	1378 <grub_iso9660_mount>
    2324:	str	x0, [sp, #376]
    2328:	ldr	x0, [sp, #376]
    232c:	cmp	x0, #0x0
    2330:	b.eq	23e0 <grub_iso9660_dir+0x108>  // b.none
    2334:	ldr	x0, [sp, #376]
    2338:	str	x0, [sp, #64]
    233c:	str	xzr, [sp, #80]
    2340:	mov	x0, #0x1                   	// #1
    2344:	str	x0, [sp, #72]
    2348:	str	wzr, [sp, #88]
    234c:	ldr	x0, [sp, #376]
    2350:	add	x1, x0, #0x9c
    2354:	add	x0, sp, #0x5c
    2358:	ldp	x2, x3, [x1]
    235c:	stp	x2, x3, [x0]
    2360:	ldp	x2, x3, [x1, #16]
    2364:	stp	x2, x3, [x0, #16]
    2368:	ldrb	w1, [x1, #32]
    236c:	strb	w1, [x0, #32]
    2370:	add	x2, sp, #0x38
    2374:	add	x1, sp, #0x40
    2378:	mov	w5, #0x2                   	// #2
    237c:	adrp	x0, 0 <grub_swap_bytes16>
    2380:	add	x0, x0, #0x0
    2384:	ldr	x4, [x0]
    2388:	adrp	x0, 0 <grub_swap_bytes16>
    238c:	add	x0, x0, #0x0
    2390:	ldr	x3, [x0]
    2394:	ldr	x0, [sp, #32]
    2398:	bl	0 <grub_fshelp_find_file>
    239c:	cmp	w0, #0x0
    23a0:	b.ne	23e8 <grub_iso9660_dir+0x110>  // b.any
    23a4:	ldr	x3, [sp, #56]
    23a8:	add	x0, sp, #0x168
    23ac:	mov	x2, x0
    23b0:	adrp	x0, 0 <grub_swap_bytes16>
    23b4:	add	x0, x0, #0x0
    23b8:	ldr	x1, [x0]
    23bc:	mov	x0, x3
    23c0:	bl	1b98 <grub_iso9660_iterate_dir>
    23c4:	ldr	x1, [sp, #56]
    23c8:	add	x0, sp, #0x40
    23cc:	cmp	x1, x0
    23d0:	b.eq	23f0 <grub_iso9660_dir+0x118>  // b.none
    23d4:	ldr	x0, [sp, #56]
    23d8:	bl	0 <grub_free>
    23dc:	b	23f4 <grub_iso9660_dir+0x11c>
    23e0:	nop
    23e4:	b	23f4 <grub_iso9660_dir+0x11c>
    23e8:	nop
    23ec:	b	23f4 <grub_iso9660_dir+0x11c>
    23f0:	nop
    23f4:	ldr	x0, [sp, #376]
    23f8:	bl	0 <grub_free>
    23fc:	adrp	x0, 0 <grub_swap_bytes16>
    2400:	add	x0, x0, #0x0
    2404:	ldr	x0, [x0]
    2408:	ldr	x0, [x0]
    240c:	bl	0 <grub_dl_unref>
    2410:	adrp	x0, 0 <grub_swap_bytes16>
    2414:	add	x0, x0, #0x0
    2418:	ldr	x0, [x0]
    241c:	ldr	w0, [x0]
    2420:	ldp	x29, x30, [sp], #384
    2424:	ret
	...

0000000000002450 <grub_iso9660_open>:
    2450:	stp	x29, x30, [sp, #-352]!
    2454:	mov	x29, sp
    2458:	str	x0, [sp, #24]
    245c:	str	x1, [sp, #16]
    2460:	adrp	x0, 0 <grub_swap_bytes16>
    2464:	add	x0, x0, #0x0
    2468:	ldr	x0, [x0]
    246c:	ldr	x0, [x0]
    2470:	bl	0 <grub_dl_ref>
    2474:	ldr	x0, [sp, #24]
    2478:	ldr	x0, [x0, #8]
    247c:	ldr	x0, [x0]
    2480:	bl	1378 <grub_iso9660_mount>
    2484:	str	x0, [sp, #344]
    2488:	ldr	x0, [sp, #344]
    248c:	cmp	x0, #0x0
    2490:	b.eq	2540 <grub_iso9660_open+0xf0>  // b.none
    2494:	ldr	x0, [sp, #344]
    2498:	str	x0, [sp, #48]
    249c:	str	xzr, [sp, #64]
    24a0:	mov	x0, #0x1                   	// #1
    24a4:	str	x0, [sp, #56]
    24a8:	str	wzr, [sp, #72]
    24ac:	ldr	x0, [sp, #344]
    24b0:	add	x1, x0, #0x9c
    24b4:	add	x0, sp, #0x4c
    24b8:	ldp	x2, x3, [x1]
    24bc:	stp	x2, x3, [x0]
    24c0:	ldp	x2, x3, [x1, #16]
    24c4:	stp	x2, x3, [x0, #16]
    24c8:	ldrb	w1, [x1, #32]
    24cc:	strb	w1, [x0, #32]
    24d0:	add	x2, sp, #0x28
    24d4:	add	x1, sp, #0x30
    24d8:	mov	w5, #0x1                   	// #1
    24dc:	adrp	x0, 0 <grub_swap_bytes16>
    24e0:	add	x0, x0, #0x0
    24e4:	ldr	x4, [x0]
    24e8:	adrp	x0, 0 <grub_swap_bytes16>
    24ec:	add	x0, x0, #0x0
    24f0:	ldr	x3, [x0]
    24f4:	ldr	x0, [sp, #16]
    24f8:	bl	0 <grub_fshelp_find_file>
    24fc:	cmp	w0, #0x0
    2500:	b.ne	2548 <grub_iso9660_open+0xf8>  // b.any
    2504:	ldr	x1, [sp, #40]
    2508:	ldr	x0, [sp, #344]
    250c:	str	x1, [x0, #872]
    2510:	ldr	x0, [sp, #24]
    2514:	ldr	x1, [sp, #344]
    2518:	str	x1, [x0, #80]
    251c:	ldr	x0, [sp, #40]
    2520:	bl	15b0 <get_node_size>
    2524:	mov	x1, x0
    2528:	ldr	x0, [sp, #24]
    252c:	str	x1, [x0, #64]
    2530:	ldr	x0, [sp, #24]
    2534:	str	xzr, [x0, #24]
    2538:	mov	w0, #0x0                   	// #0
    253c:	b	2578 <grub_iso9660_open+0x128>
    2540:	nop
    2544:	b	254c <grub_iso9660_open+0xfc>
    2548:	nop
    254c:	adrp	x0, 0 <grub_swap_bytes16>
    2550:	add	x0, x0, #0x0
    2554:	ldr	x0, [x0]
    2558:	ldr	x0, [x0]
    255c:	bl	0 <grub_dl_unref>
    2560:	ldr	x0, [sp, #344]
    2564:	bl	0 <grub_free>
    2568:	adrp	x0, 0 <grub_swap_bytes16>
    256c:	add	x0, x0, #0x0
    2570:	ldr	x0, [x0]
    2574:	ldr	w0, [x0]
    2578:	ldp	x29, x30, [sp], #352
    257c:	ret
	...

00000000000025a0 <grub_iso9660_read>:
    25a0:	stp	x29, x30, [sp, #-64]!
    25a4:	mov	x29, sp
    25a8:	str	x0, [sp, #40]
    25ac:	str	x1, [sp, #32]
    25b0:	str	x2, [sp, #24]
    25b4:	ldr	x0, [sp, #40]
    25b8:	ldr	x0, [x0, #80]
    25bc:	str	x0, [sp, #56]
    25c0:	ldr	x0, [sp, #56]
    25c4:	ldr	x0, [x0, #848]
    25c8:	ldr	x1, [sp, #40]
    25cc:	ldr	x1, [x1, #88]
    25d0:	str	x1, [x0, #48]
    25d4:	ldr	x0, [sp, #56]
    25d8:	ldr	x0, [x0, #848]
    25dc:	ldr	x1, [sp, #40]
    25e0:	ldr	x1, [x1, #96]
    25e4:	str	x1, [x0, #56]
    25e8:	ldr	x0, [sp, #56]
    25ec:	ldr	x4, [x0, #872]
    25f0:	ldr	x0, [sp, #40]
    25f4:	ldr	x0, [x0, #24]
    25f8:	ldr	x3, [sp, #32]
    25fc:	ldr	x2, [sp, #24]
    2600:	mov	x1, x0
    2604:	mov	x0, x4
    2608:	bl	c24 <read_node>
    260c:	str	w0, [sp, #52]
    2610:	ldr	x0, [sp, #56]
    2614:	ldr	x0, [x0, #848]
    2618:	str	xzr, [x0, #48]
    261c:	ldr	w0, [sp, #52]
    2620:	cmp	w0, #0x0
    2624:	b.ne	2640 <grub_iso9660_read+0xa0>  // b.any
    2628:	adrp	x0, 0 <grub_swap_bytes16>
    262c:	add	x0, x0, #0x0
    2630:	ldr	x0, [x0]
    2634:	ldr	w0, [x0]
    2638:	cmp	w0, #0x0
    263c:	b.eq	2648 <grub_iso9660_read+0xa8>  // b.none
    2640:	mov	x0, #0xffffffffffffffff    	// #-1
    2644:	b	264c <grub_iso9660_read+0xac>
    2648:	ldr	x0, [sp, #24]
    264c:	ldp	x29, x30, [sp], #64
    2650:	ret
    2654:	nop
	...

0000000000002660 <grub_iso9660_close>:
    2660:	stp	x29, x30, [sp, #-48]!
    2664:	mov	x29, sp
    2668:	str	x0, [sp, #24]
    266c:	ldr	x0, [sp, #24]
    2670:	ldr	x0, [x0, #80]
    2674:	str	x0, [sp, #40]
    2678:	ldr	x0, [sp, #40]
    267c:	ldr	x0, [x0, #872]
    2680:	bl	0 <grub_free>
    2684:	ldr	x0, [sp, #40]
    2688:	bl	0 <grub_free>
    268c:	adrp	x0, 0 <grub_swap_bytes16>
    2690:	add	x0, x0, #0x0
    2694:	ldr	x0, [x0]
    2698:	ldr	x0, [x0]
    269c:	bl	0 <grub_dl_unref>
    26a0:	mov	w0, #0x0                   	// #0
    26a4:	ldp	x29, x30, [sp], #48
    26a8:	ret
    26ac:	nop
	...

00000000000026b8 <grub_iso9660_label>:
    26b8:	stp	x29, x30, [sp, #-48]!
    26bc:	mov	x29, sp
    26c0:	str	x0, [sp, #24]
    26c4:	str	x1, [sp, #16]
    26c8:	ldr	x0, [sp, #24]
    26cc:	ldr	x0, [x0]
    26d0:	bl	1378 <grub_iso9660_mount>
    26d4:	str	x0, [sp, #32]
    26d8:	ldr	x0, [sp, #32]
    26dc:	cmp	x0, #0x0
    26e0:	b.eq	27bc <grub_iso9660_label+0x104>  // b.none
    26e4:	ldr	x0, [sp, #32]
    26e8:	ldr	w0, [x0, #864]
    26ec:	cmp	w0, #0x0
    26f0:	b.eq	2714 <grub_iso9660_label+0x5c>  // b.none
    26f4:	ldr	x0, [sp, #32]
    26f8:	add	x0, x0, #0x28
    26fc:	mov	w1, #0x10                  	// #16
    2700:	bl	1010 <grub_iso9660_convert_string>
    2704:	mov	x1, x0
    2708:	ldr	x0, [sp, #16]
    270c:	str	x1, [x0]
    2710:	b	2730 <grub_iso9660_label+0x78>
    2714:	ldr	x0, [sp, #32]
    2718:	add	x0, x0, #0x28
    271c:	mov	x1, #0x20                  	// #32
    2720:	bl	0 <grub_strndup>
    2724:	mov	x1, x0
    2728:	ldr	x0, [sp, #16]
    272c:	str	x1, [x0]
    2730:	ldr	x0, [sp, #16]
    2734:	ldr	x0, [x0]
    2738:	cmp	x0, #0x0
    273c:	b.eq	27b0 <grub_iso9660_label+0xf8>  // b.none
    2740:	ldr	x0, [sp, #16]
    2744:	ldr	x0, [x0]
    2748:	str	x0, [sp, #40]
    274c:	b	275c <grub_iso9660_label+0xa4>
    2750:	ldr	x0, [sp, #40]
    2754:	add	x0, x0, #0x1
    2758:	str	x0, [sp, #40]
    275c:	ldr	x0, [sp, #40]
    2760:	ldrb	w0, [x0]
    2764:	cmp	w0, #0x0
    2768:	b.ne	2750 <grub_iso9660_label+0x98>  // b.any
    276c:	ldr	x0, [sp, #40]
    2770:	sub	x0, x0, #0x1
    2774:	str	x0, [sp, #40]
    2778:	b	278c <grub_iso9660_label+0xd4>
    277c:	ldr	x0, [sp, #40]
    2780:	sub	x1, x0, #0x1
    2784:	str	x1, [sp, #40]
    2788:	strb	wzr, [x0]
    278c:	ldr	x0, [sp, #16]
    2790:	ldr	x0, [x0]
    2794:	ldr	x1, [sp, #40]
    2798:	cmp	x1, x0
    279c:	b.cc	27b0 <grub_iso9660_label+0xf8>  // b.lo, b.ul, b.last
    27a0:	ldr	x0, [sp, #40]
    27a4:	ldrb	w0, [x0]
    27a8:	cmp	w0, #0x20
    27ac:	b.eq	277c <grub_iso9660_label+0xc4>  // b.none
    27b0:	ldr	x0, [sp, #32]
    27b4:	bl	0 <grub_free>
    27b8:	b	27c4 <grub_iso9660_label+0x10c>
    27bc:	ldr	x0, [sp, #16]
    27c0:	str	xzr, [x0]
    27c4:	adrp	x0, 0 <grub_swap_bytes16>
    27c8:	add	x0, x0, #0x0
    27cc:	ldr	x0, [x0]
    27d0:	ldr	w0, [x0]
    27d4:	ldp	x29, x30, [sp], #48
    27d8:	ret
    27dc:	nop
	...

00000000000027e8 <grub_iso9660_uuid>:
    27e8:	sub	sp, sp, #0x80
    27ec:	stp	x29, x30, [sp, #80]
    27f0:	add	x29, sp, #0x50
    27f4:	str	x0, [sp, #104]
    27f8:	str	x1, [sp, #96]
    27fc:	ldr	x0, [sp, #104]
    2800:	ldr	x0, [x0]
    2804:	str	x0, [sp, #120]
    2808:	adrp	x0, 0 <grub_swap_bytes16>
    280c:	add	x0, x0, #0x0
    2810:	ldr	x0, [x0]
    2814:	ldr	x0, [x0]
    2818:	bl	0 <grub_dl_ref>
    281c:	ldr	x0, [sp, #120]
    2820:	bl	1378 <grub_iso9660_mount>
    2824:	str	x0, [sp, #112]
    2828:	ldr	x0, [sp, #112]
    282c:	cmp	x0, #0x0
    2830:	b.eq	2a70 <grub_iso9660_uuid+0x288>  // b.none
    2834:	ldr	x0, [sp, #112]
    2838:	ldrb	w0, [x0, #830]
    283c:	cmp	w0, #0x0
    2840:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    2844:	ldr	x0, [sp, #112]
    2848:	ldrb	w0, [x0, #831]
    284c:	cmp	w0, #0x0
    2850:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    2854:	ldr	x0, [sp, #112]
    2858:	ldrb	w0, [x0, #832]
    285c:	cmp	w0, #0x0
    2860:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    2864:	ldr	x0, [sp, #112]
    2868:	ldrb	w0, [x0, #833]
    286c:	cmp	w0, #0x0
    2870:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    2874:	ldr	x0, [sp, #112]
    2878:	ldrb	w0, [x0, #834]
    287c:	cmp	w0, #0x0
    2880:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    2884:	ldr	x0, [sp, #112]
    2888:	ldrb	w0, [x0, #835]
    288c:	cmp	w0, #0x0
    2890:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    2894:	ldr	x0, [sp, #112]
    2898:	ldrb	w0, [x0, #836]
    289c:	cmp	w0, #0x0
    28a0:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    28a4:	ldr	x0, [sp, #112]
    28a8:	ldrb	w0, [x0, #837]
    28ac:	cmp	w0, #0x0
    28b0:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    28b4:	ldr	x0, [sp, #112]
    28b8:	ldrb	w0, [x0, #838]
    28bc:	cmp	w0, #0x0
    28c0:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    28c4:	ldr	x0, [sp, #112]
    28c8:	ldrb	w0, [x0, #839]
    28cc:	cmp	w0, #0x0
    28d0:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    28d4:	ldr	x0, [sp, #112]
    28d8:	ldrb	w0, [x0, #840]
    28dc:	cmp	w0, #0x0
    28e0:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    28e4:	ldr	x0, [sp, #112]
    28e8:	ldrb	w0, [x0, #841]
    28ec:	cmp	w0, #0x0
    28f0:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    28f4:	ldr	x0, [sp, #112]
    28f8:	ldrb	w0, [x0, #842]
    28fc:	cmp	w0, #0x0
    2900:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    2904:	ldr	x0, [sp, #112]
    2908:	ldrb	w0, [x0, #843]
    290c:	cmp	w0, #0x0
    2910:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    2914:	ldr	x0, [sp, #112]
    2918:	ldrb	w0, [x0, #844]
    291c:	cmp	w0, #0x0
    2920:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    2924:	ldr	x0, [sp, #112]
    2928:	ldrb	w0, [x0, #845]
    292c:	cmp	w0, #0x0
    2930:	b.ne	2954 <grub_iso9660_uuid+0x16c>  // b.any
    2934:	adrp	x0, 0 <grub_swap_bytes16>
    2938:	add	x0, x0, #0x0
    293c:	ldr	x1, [x0]
    2940:	mov	w0, #0xa                   	// #10
    2944:	bl	0 <grub_error>
    2948:	ldr	x0, [sp, #96]
    294c:	str	xzr, [x0]
    2950:	b	2a78 <grub_iso9660_uuid+0x290>
    2954:	ldr	x0, [sp, #112]
    2958:	ldrb	w0, [x0, #830]
    295c:	mov	w9, w0
    2960:	ldr	x0, [sp, #112]
    2964:	ldrb	w0, [x0, #831]
    2968:	mov	w10, w0
    296c:	ldr	x0, [sp, #112]
    2970:	ldrb	w0, [x0, #832]
    2974:	mov	w11, w0
    2978:	ldr	x0, [sp, #112]
    297c:	ldrb	w0, [x0, #833]
    2980:	mov	w12, w0
    2984:	ldr	x0, [sp, #112]
    2988:	ldrb	w0, [x0, #834]
    298c:	mov	w13, w0
    2990:	ldr	x0, [sp, #112]
    2994:	ldrb	w0, [x0, #835]
    2998:	mov	w14, w0
    299c:	ldr	x0, [sp, #112]
    29a0:	ldrb	w0, [x0, #836]
    29a4:	mov	w15, w0
    29a8:	ldr	x0, [sp, #112]
    29ac:	ldrb	w0, [x0, #837]
    29b0:	mov	w1, w0
    29b4:	ldr	x0, [sp, #112]
    29b8:	ldrb	w0, [x0, #838]
    29bc:	mov	w2, w0
    29c0:	ldr	x0, [sp, #112]
    29c4:	ldrb	w0, [x0, #839]
    29c8:	mov	w3, w0
    29cc:	ldr	x0, [sp, #112]
    29d0:	ldrb	w0, [x0, #840]
    29d4:	mov	w4, w0
    29d8:	ldr	x0, [sp, #112]
    29dc:	ldrb	w0, [x0, #841]
    29e0:	mov	w5, w0
    29e4:	ldr	x0, [sp, #112]
    29e8:	ldrb	w0, [x0, #842]
    29ec:	mov	w6, w0
    29f0:	ldr	x0, [sp, #112]
    29f4:	ldrb	w0, [x0, #843]
    29f8:	mov	w7, w0
    29fc:	ldr	x0, [sp, #112]
    2a00:	ldrb	w0, [x0, #844]
    2a04:	mov	w8, w0
    2a08:	ldr	x0, [sp, #112]
    2a0c:	ldrb	w0, [x0, #845]
    2a10:	str	w0, [sp, #64]
    2a14:	str	w8, [sp, #56]
    2a18:	str	w7, [sp, #48]
    2a1c:	str	w6, [sp, #40]
    2a20:	str	w5, [sp, #32]
    2a24:	str	w4, [sp, #24]
    2a28:	str	w3, [sp, #16]
    2a2c:	str	w2, [sp, #8]
    2a30:	str	w1, [sp]
    2a34:	mov	w7, w15
    2a38:	mov	w6, w14
    2a3c:	mov	w5, w13
    2a40:	mov	w4, w12
    2a44:	mov	w3, w11
    2a48:	mov	w2, w10
    2a4c:	mov	w1, w9
    2a50:	adrp	x0, 0 <grub_swap_bytes16>
    2a54:	add	x0, x0, #0x0
    2a58:	ldr	x0, [x0]
    2a5c:	bl	0 <grub_xasprintf>
    2a60:	mov	x1, x0
    2a64:	ldr	x0, [sp, #96]
    2a68:	str	x1, [x0]
    2a6c:	b	2a78 <grub_iso9660_uuid+0x290>
    2a70:	ldr	x0, [sp, #96]
    2a74:	str	xzr, [x0]
    2a78:	adrp	x0, 0 <grub_swap_bytes16>
    2a7c:	add	x0, x0, #0x0
    2a80:	ldr	x0, [x0]
    2a84:	ldr	x0, [x0]
    2a88:	bl	0 <grub_dl_unref>
    2a8c:	ldr	x0, [sp, #112]
    2a90:	bl	0 <grub_free>
    2a94:	adrp	x0, 0 <grub_swap_bytes16>
    2a98:	add	x0, x0, #0x0
    2a9c:	ldr	x0, [x0]
    2aa0:	ldr	w0, [x0]
    2aa4:	ldp	x29, x30, [sp, #80]
    2aa8:	add	sp, sp, #0x80
    2aac:	ret
	...

0000000000002ad0 <grub_iso9660_mtime>:
    2ad0:	stp	x29, x30, [sp, #-64]!
    2ad4:	mov	x29, sp
    2ad8:	str	x0, [sp, #24]
    2adc:	str	x1, [sp, #16]
    2ae0:	ldr	x0, [sp, #24]
    2ae4:	ldr	x0, [x0]
    2ae8:	str	x0, [sp, #56]
    2aec:	adrp	x0, 0 <grub_swap_bytes16>
    2af0:	add	x0, x0, #0x0
    2af4:	ldr	x0, [x0]
    2af8:	ldr	x0, [x0]
    2afc:	bl	0 <grub_dl_ref>
    2b00:	ldr	x0, [sp, #56]
    2b04:	bl	1378 <grub_iso9660_mount>
    2b08:	str	x0, [sp, #48]
    2b0c:	ldr	x0, [sp, #48]
    2b10:	cmp	x0, #0x0
    2b14:	b.ne	2b40 <grub_iso9660_mtime+0x70>  // b.any
    2b18:	adrp	x0, 0 <grub_swap_bytes16>
    2b1c:	add	x0, x0, #0x0
    2b20:	ldr	x0, [x0]
    2b24:	ldr	x0, [x0]
    2b28:	bl	0 <grub_dl_unref>
    2b2c:	adrp	x0, 0 <grub_swap_bytes16>
    2b30:	add	x0, x0, #0x0
    2b34:	ldr	x0, [x0]
    2b38:	ldr	w0, [x0]
    2b3c:	b	2b74 <grub_iso9660_mtime+0xa4>
    2b40:	ldr	x0, [sp, #48]
    2b44:	add	x0, x0, #0x33e
    2b48:	ldr	x1, [sp, #16]
    2b4c:	bl	818 <iso9660_to_unixtime>
    2b50:	str	w0, [sp, #44]
    2b54:	adrp	x0, 0 <grub_swap_bytes16>
    2b58:	add	x0, x0, #0x0
    2b5c:	ldr	x0, [x0]
    2b60:	ldr	x0, [x0]
    2b64:	bl	0 <grub_dl_unref>
    2b68:	ldr	x0, [sp, #48]
    2b6c:	bl	0 <grub_free>
    2b70:	ldr	w0, [sp, #44]
    2b74:	ldp	x29, x30, [sp], #64
    2b78:	ret
    2b7c:	nop
	...

0000000000002b90 <grub_mod_init>:
    2b90:	stp	x29, x30, [sp, #-32]!
    2b94:	mov	x29, sp
    2b98:	str	x0, [sp, #24]
    2b9c:	adrp	x0, 0 <grub_swap_bytes16>
    2ba0:	add	x0, x0, #0x0
    2ba4:	ldr	x0, [x0]
    2ba8:	bl	58 <grub_fs_register>
    2bac:	adrp	x0, 0 <grub_swap_bytes16>
    2bb0:	add	x0, x0, #0x0
    2bb4:	ldr	x0, [x0]
    2bb8:	ldr	x1, [sp, #24]
    2bbc:	str	x1, [x0]
    2bc0:	nop
    2bc4:	ldp	x29, x30, [sp], #32
    2bc8:	ret
    2bcc:	nop
	...

0000000000002be0 <grub_mod_fini>:
    2be0:	stp	x29, x30, [sp, #-16]!
    2be4:	mov	x29, sp
    2be8:	adrp	x0, 0 <grub_swap_bytes16>
    2bec:	add	x0, x0, #0x0
    2bf0:	ldr	x0, [x0]
    2bf4:	bl	90 <grub_fs_unregister>
    2bf8:	nop
    2bfc:	ldp	x29, x30, [sp], #16
    2c00:	ret
    2c04:	nop
	...
