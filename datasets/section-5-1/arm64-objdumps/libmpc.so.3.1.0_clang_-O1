
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libmpc.so.3.1.0_clang_-O1:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000004a28 <.init>:
    4a28:	stp	x29, x30, [sp, #-16]!
    4a2c:	mov	x29, sp
    4a30:	bl	56d0 <mpfr_get_emin_min@plt+0x10>
    4a34:	ldp	x29, x30, [sp], #16
    4a38:	ret

Disassembly of section .plt:

0000000000004a40 <mpfr_set_underflow@plt-0x20>:
    4a40:	stp	x16, x30, [sp, #-16]!
    4a44:	adrp	x16, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    4a48:	ldr	x17, [x16, #4088]
    4a4c:	add	x16, x16, #0xff8
    4a50:	br	x17
    4a54:	nop
    4a58:	nop
    4a5c:	nop

0000000000004a60 <mpfr_set_underflow@plt>:
    4a60:	adrp	x16, 25000 <mpfr_set_underflow>
    4a64:	ldr	x17, [x16]
    4a68:	add	x16, x16, #0x0
    4a6c:	br	x17

0000000000004a70 <__gmpz_get_si@plt>:
    4a70:	adrp	x16, 25000 <mpfr_set_underflow>
    4a74:	ldr	x17, [x16, #8]
    4a78:	add	x16, x16, #0x8
    4a7c:	br	x17

0000000000004a80 <mpfr_set_ld@plt>:
    4a80:	adrp	x16, 25000 <mpfr_set_underflow>
    4a84:	ldr	x17, [x16, #16]
    4a88:	add	x16, x16, #0x10
    4a8c:	br	x17

0000000000004a90 <mpfr_mul_ui@plt>:
    4a90:	adrp	x16, 25000 <mpfr_set_underflow>
    4a94:	ldr	x17, [x16, #24]
    4a98:	add	x16, x16, #0x18
    4a9c:	br	x17

0000000000004aa0 <mpfr_mul_q@plt>:
    4aa0:	adrp	x16, 25000 <mpfr_set_underflow>
    4aa4:	ldr	x17, [x16, #32]
    4aa8:	add	x16, x16, #0x20
    4aac:	br	x17

0000000000004ab0 <mpfr_set_si_2exp@plt>:
    4ab0:	adrp	x16, 25000 <mpfr_set_underflow>
    4ab4:	ldr	x17, [x16, #40]
    4ab8:	add	x16, x16, #0x28
    4abc:	br	x17

0000000000004ac0 <__gmpz_scan1@plt>:
    4ac0:	adrp	x16, 25000 <mpfr_set_underflow>
    4ac4:	ldr	x17, [x16, #48]
    4ac8:	add	x16, x16, #0x30
    4acc:	br	x17

0000000000004ad0 <strlen@plt>:
    4ad0:	adrp	x16, 25000 <mpfr_set_underflow>
    4ad4:	ldr	x17, [x16, #56]
    4ad8:	add	x16, x16, #0x38
    4adc:	br	x17

0000000000004ae0 <mpc_clear@plt>:
    4ae0:	adrp	x16, 25000 <mpfr_set_underflow>
    4ae4:	ldr	x17, [x16, #64]
    4ae8:	add	x16, x16, #0x40
    4aec:	br	x17

0000000000004af0 <mpfr_cosh@plt>:
    4af0:	adrp	x16, 25000 <mpfr_set_underflow>
    4af4:	ldr	x17, [x16, #72]
    4af8:	add	x16, x16, #0x48
    4afc:	br	x17

0000000000004b00 <mpfr_tanh@plt>:
    4b00:	adrp	x16, 25000 <mpfr_set_underflow>
    4b04:	ldr	x17, [x16, #80]
    4b08:	add	x16, x16, #0x50
    4b0c:	br	x17

0000000000004b10 <mpfr_set_nan@plt>:
    4b10:	adrp	x16, 25000 <mpfr_set_underflow>
    4b14:	ldr	x17, [x16, #88]
    4b18:	add	x16, x16, #0x58
    4b1c:	br	x17

0000000000004b20 <mpfr_clear_overflow@plt>:
    4b20:	adrp	x16, 25000 <mpfr_set_underflow>
    4b24:	ldr	x17, [x16, #96]
    4b28:	add	x16, x16, #0x60
    4b2c:	br	x17

0000000000004b30 <mpfr_sub@plt>:
    4b30:	adrp	x16, 25000 <mpfr_set_underflow>
    4b34:	ldr	x17, [x16, #104]
    4b38:	add	x16, x16, #0x68
    4b3c:	br	x17

0000000000004b40 <mpfr_mul_2si@plt>:
    4b40:	adrp	x16, 25000 <mpfr_set_underflow>
    4b44:	ldr	x17, [x16, #112]
    4b48:	add	x16, x16, #0x70
    4b4c:	br	x17

0000000000004b50 <mpfr_const_pi@plt>:
    4b50:	adrp	x16, 25000 <mpfr_set_underflow>
    4b54:	ldr	x17, [x16, #120]
    4b58:	add	x16, x16, #0x78
    4b5c:	br	x17

0000000000004b60 <mpfr_fmms@plt>:
    4b60:	adrp	x16, 25000 <mpfr_set_underflow>
    4b64:	ldr	x17, [x16, #128]
    4b68:	add	x16, x16, #0x80
    4b6c:	br	x17

0000000000004b70 <mpfr_init@plt>:
    4b70:	adrp	x16, 25000 <mpfr_set_underflow>
    4b74:	ldr	x17, [x16, #136]
    4b78:	add	x16, x16, #0x88
    4b7c:	br	x17

0000000000004b80 <mpfr_tan@plt>:
    4b80:	adrp	x16, 25000 <mpfr_set_underflow>
    4b84:	ldr	x17, [x16, #144]
    4b88:	add	x16, x16, #0x90
    4b8c:	br	x17

0000000000004b90 <mpfr_strtofr@plt>:
    4b90:	adrp	x16, 25000 <mpfr_set_underflow>
    4b94:	ldr	x17, [x16, #152]
    4b98:	add	x16, x16, #0x98
    4b9c:	br	x17

0000000000004ba0 <__gmpz_sub_ui@plt>:
    4ba0:	adrp	x16, 25000 <mpfr_set_underflow>
    4ba4:	ldr	x17, [x16, #160]
    4ba8:	add	x16, x16, #0xa0
    4bac:	br	x17

0000000000004bb0 <__gmp_get_memory_functions@plt>:
    4bb0:	adrp	x16, 25000 <mpfr_set_underflow>
    4bb4:	ldr	x17, [x16, #168]
    4bb8:	add	x16, x16, #0xa8
    4bbc:	br	x17

0000000000004bc0 <__gmpz_sqrt@plt>:
    4bc0:	adrp	x16, 25000 <mpfr_set_underflow>
    4bc4:	ldr	x17, [x16, #176]
    4bc8:	add	x16, x16, #0xb0
    4bcc:	br	x17

0000000000004bd0 <mpfr_set_erangeflag@plt>:
    4bd0:	adrp	x16, 25000 <mpfr_set_underflow>
    4bd4:	ldr	x17, [x16, #184]
    4bd8:	add	x16, x16, #0xb8
    4bdc:	br	x17

0000000000004be0 <__gmpz_set_ui@plt>:
    4be0:	adrp	x16, 25000 <mpfr_set_underflow>
    4be4:	ldr	x17, [x16, #192]
    4be8:	add	x16, x16, #0xc0
    4bec:	br	x17

0000000000004bf0 <__cxa_finalize@plt>:
    4bf0:	adrp	x16, 25000 <mpfr_set_underflow>
    4bf4:	ldr	x17, [x16, #200]
    4bf8:	add	x16, x16, #0xc8
    4bfc:	br	x17

0000000000004c00 <sprintf@plt>:
    4c00:	adrp	x16, 25000 <mpfr_set_underflow>
    4c04:	ldr	x17, [x16, #208]
    4c08:	add	x16, x16, #0xd0
    4c0c:	br	x17

0000000000004c10 <mpc_sqrt@plt>:
    4c10:	adrp	x16, 25000 <mpfr_set_underflow>
    4c14:	ldr	x17, [x16, #216]
    4c18:	add	x16, x16, #0xd8
    4c1c:	br	x17

0000000000004c20 <mpfr_get_d@plt>:
    4c20:	adrp	x16, 25000 <mpfr_set_underflow>
    4c24:	ldr	x17, [x16, #224]
    4c28:	add	x16, x16, #0xe0
    4c2c:	br	x17

0000000000004c30 <mpfr_set_f@plt>:
    4c30:	adrp	x16, 25000 <mpfr_set_underflow>
    4c34:	ldr	x17, [x16, #232]
    4c38:	add	x16, x16, #0xe8
    4c3c:	br	x17

0000000000004c40 <mpfr_mul@plt>:
    4c40:	adrp	x16, 25000 <mpfr_set_underflow>
    4c44:	ldr	x17, [x16, #240]
    4c48:	add	x16, x16, #0xf0
    4c4c:	br	x17

0000000000004c50 <mpfr_neg@plt>:
    4c50:	adrp	x16, 25000 <mpfr_set_underflow>
    4c54:	ldr	x17, [x16, #248]
    4c58:	add	x16, x16, #0xf8
    4c5c:	br	x17

0000000000004c60 <mpfr_pow@plt>:
    4c60:	adrp	x16, 25000 <mpfr_set_underflow>
    4c64:	ldr	x17, [x16, #256]
    4c68:	add	x16, x16, #0x100
    4c6c:	br	x17

0000000000004c70 <fputc@plt>:
    4c70:	adrp	x16, 25000 <mpfr_set_underflow>
    4c74:	ldr	x17, [x16, #264]
    4c78:	add	x16, x16, #0x108
    4c7c:	br	x17

0000000000004c80 <mpfr_nextbelow@plt>:
    4c80:	adrp	x16, 25000 <mpfr_set_underflow>
    4c84:	ldr	x17, [x16, #272]
    4c88:	add	x16, x16, #0x110
    4c8c:	br	x17

0000000000004c90 <__gmpz_sub@plt>:
    4c90:	adrp	x16, 25000 <mpfr_set_underflow>
    4c94:	ldr	x17, [x16, #280]
    4c98:	add	x16, x16, #0x118
    4c9c:	br	x17

0000000000004ca0 <mpfr_get_z@plt>:
    4ca0:	adrp	x16, 25000 <mpfr_set_underflow>
    4ca4:	ldr	x17, [x16, #288]
    4ca8:	add	x16, x16, #0x120
    4cac:	br	x17

0000000000004cb0 <mpfr_sinh_cosh@plt>:
    4cb0:	adrp	x16, 25000 <mpfr_set_underflow>
    4cb4:	ldr	x17, [x16, #296]
    4cb8:	add	x16, x16, #0x128
    4cbc:	br	x17

0000000000004cc0 <mpc_alloc_str@plt>:
    4cc0:	adrp	x16, 25000 <mpfr_set_underflow>
    4cc4:	ldr	x17, [x16, #304]
    4cc8:	add	x16, x16, #0x130
    4ccc:	br	x17

0000000000004cd0 <mpc_set_prec@plt>:
    4cd0:	adrp	x16, 25000 <mpfr_set_underflow>
    4cd4:	ldr	x17, [x16, #312]
    4cd8:	add	x16, x16, #0x138
    4cdc:	br	x17

0000000000004ce0 <mpfr_set_exp@plt>:
    4ce0:	adrp	x16, 25000 <mpfr_set_underflow>
    4ce4:	ldr	x17, [x16, #320]
    4ce8:	add	x16, x16, #0x140
    4cec:	br	x17

0000000000004cf0 <mpc_tan@plt>:
    4cf0:	adrp	x16, 25000 <mpfr_set_underflow>
    4cf4:	ldr	x17, [x16, #328]
    4cf8:	add	x16, x16, #0x148
    4cfc:	br	x17

0000000000004d00 <mpfr_set_d@plt>:
    4d00:	adrp	x16, 25000 <mpfr_set_underflow>
    4d04:	ldr	x17, [x16, #336]
    4d08:	add	x16, x16, #0x150
    4d0c:	br	x17

0000000000004d10 <__gmpz_divisible_2exp_p@plt>:
    4d10:	adrp	x16, 25000 <mpfr_set_underflow>
    4d14:	ldr	x17, [x16, #344]
    4d18:	add	x16, x16, #0x158
    4d1c:	br	x17

0000000000004d20 <__ctype_tolower_loc@plt>:
    4d20:	adrp	x16, 25000 <mpfr_set_underflow>
    4d24:	ldr	x17, [x16, #352]
    4d28:	add	x16, x16, #0x160
    4d2c:	br	x17

0000000000004d30 <__gmpz_fits_slong_p@plt>:
    4d30:	adrp	x16, 25000 <mpfr_set_underflow>
    4d34:	ldr	x17, [x16, #360]
    4d38:	add	x16, x16, #0x168
    4d3c:	br	x17

0000000000004d40 <localeconv@plt>:
    4d40:	adrp	x16, 25000 <mpfr_set_underflow>
    4d44:	ldr	x17, [x16, #368]
    4d48:	add	x16, x16, #0x170
    4d4c:	br	x17

0000000000004d50 <mpfr_set_prec@plt>:
    4d50:	adrp	x16, 25000 <mpfr_set_underflow>
    4d54:	ldr	x17, [x16, #376]
    4d58:	add	x16, x16, #0x178
    4d5c:	br	x17

0000000000004d60 <mpfr_fmma@plt>:
    4d60:	adrp	x16, 25000 <mpfr_set_underflow>
    4d64:	ldr	x17, [x16, #384]
    4d68:	add	x16, x16, #0x180
    4d6c:	br	x17

0000000000004d70 <mpfr_atan2@plt>:
    4d70:	adrp	x16, 25000 <mpfr_set_underflow>
    4d74:	ldr	x17, [x16, #392]
    4d78:	add	x16, x16, #0x188
    4d7c:	br	x17

0000000000004d80 <mpfr_cmp_ui_2exp@plt>:
    4d80:	adrp	x16, 25000 <mpfr_set_underflow>
    4d84:	ldr	x17, [x16, #400]
    4d88:	add	x16, x16, #0x190
    4d8c:	br	x17

0000000000004d90 <__gmpz_divexact@plt>:
    4d90:	adrp	x16, 25000 <mpfr_set_underflow>
    4d94:	ldr	x17, [x16, #408]
    4d98:	add	x16, x16, #0x198
    4d9c:	br	x17

0000000000004da0 <mpc_add@plt>:
    4da0:	adrp	x16, 25000 <mpfr_set_underflow>
    4da4:	ldr	x17, [x16, #416]
    4da8:	add	x16, x16, #0x1a0
    4dac:	br	x17

0000000000004db0 <mpc_set_ui@plt>:
    4db0:	adrp	x16, 25000 <mpfr_set_underflow>
    4db4:	ldr	x17, [x16, #424]
    4db8:	add	x16, x16, #0x1a8
    4dbc:	br	x17

0000000000004dc0 <mpc_init2@plt>:
    4dc0:	adrp	x16, 25000 <mpfr_set_underflow>
    4dc4:	ldr	x17, [x16, #432]
    4dc8:	add	x16, x16, #0x1b0
    4dcc:	br	x17

0000000000004dd0 <__gmpz_set@plt>:
    4dd0:	adrp	x16, 25000 <mpfr_set_underflow>
    4dd4:	ldr	x17, [x16, #440]
    4dd8:	add	x16, x16, #0x1b8
    4ddc:	br	x17

0000000000004de0 <mpfr_set_zero@plt>:
    4de0:	adrp	x16, 25000 <mpfr_set_underflow>
    4de4:	ldr	x17, [x16, #448]
    4de8:	add	x16, x16, #0x1c0
    4dec:	br	x17

0000000000004df0 <mpc_ceil_log2@plt>:
    4df0:	adrp	x16, 25000 <mpfr_set_underflow>
    4df4:	ldr	x17, [x16, #456]
    4df8:	add	x16, x16, #0x1c8
    4dfc:	br	x17

0000000000004e00 <__gmpz_tstbit@plt>:
    4e00:	adrp	x16, 25000 <mpfr_set_underflow>
    4e04:	ldr	x17, [x16, #464]
    4e08:	add	x16, x16, #0x1d0
    4e0c:	br	x17

0000000000004e10 <__gmpz_mul@plt>:
    4e10:	adrp	x16, 25000 <mpfr_set_underflow>
    4e14:	ldr	x17, [x16, #472]
    4e18:	add	x16, x16, #0x1d8
    4e1c:	br	x17

0000000000004e20 <mpc_set_ld_ld@plt>:
    4e20:	adrp	x16, 25000 <mpfr_set_underflow>
    4e24:	ldr	x17, [x16, #480]
    4e28:	add	x16, x16, #0x1e0
    4e2c:	br	x17

0000000000004e30 <__gmpz_neg@plt>:
    4e30:	adrp	x16, 25000 <mpfr_set_underflow>
    4e34:	ldr	x17, [x16, #488]
    4e38:	add	x16, x16, #0x1e8
    4e3c:	br	x17

0000000000004e40 <mpfr_clear@plt>:
    4e40:	adrp	x16, 25000 <mpfr_set_underflow>
    4e44:	ldr	x17, [x16, #496]
    4e48:	add	x16, x16, #0x1f0
    4e4c:	br	x17

0000000000004e50 <__gmpz_perfect_square_p@plt>:
    4e50:	adrp	x16, 25000 <mpfr_set_underflow>
    4e54:	ldr	x17, [x16, #504]
    4e58:	add	x16, x16, #0x1f8
    4e5c:	br	x17

0000000000004e60 <__gmpfr_set_sj@plt>:
    4e60:	adrp	x16, 25000 <mpfr_set_underflow>
    4e64:	ldr	x17, [x16, #512]
    4e68:	add	x16, x16, #0x200
    4e6c:	br	x17

0000000000004e70 <mpfr_log@plt>:
    4e70:	adrp	x16, 25000 <mpfr_set_underflow>
    4e74:	ldr	x17, [x16, #520]
    4e78:	add	x16, x16, #0x208
    4e7c:	br	x17

0000000000004e80 <mpfr_atanh@plt>:
    4e80:	adrp	x16, 25000 <mpfr_set_underflow>
    4e84:	ldr	x17, [x16, #528]
    4e88:	add	x16, x16, #0x210
    4e8c:	br	x17

0000000000004e90 <__gmpz_swap@plt>:
    4e90:	adrp	x16, 25000 <mpfr_set_underflow>
    4e94:	ldr	x17, [x16, #536]
    4e98:	add	x16, x16, #0x218
    4e9c:	br	x17

0000000000004ea0 <mpc_log@plt>:
    4ea0:	adrp	x16, 25000 <mpfr_set_underflow>
    4ea4:	ldr	x17, [x16, #544]
    4ea8:	add	x16, x16, #0x220
    4eac:	br	x17

0000000000004eb0 <mpfr_asinh@plt>:
    4eb0:	adrp	x16, 25000 <mpfr_set_underflow>
    4eb4:	ldr	x17, [x16, #552]
    4eb8:	add	x16, x16, #0x228
    4ebc:	br	x17

0000000000004ec0 <mpc_fix_inf@plt>:
    4ec0:	adrp	x16, 25000 <mpfr_set_underflow>
    4ec4:	ldr	x17, [x16, #560]
    4ec8:	add	x16, x16, #0x230
    4ecc:	br	x17

0000000000004ed0 <strcat@plt>:
    4ed0:	adrp	x16, 25000 <mpfr_set_underflow>
    4ed4:	ldr	x17, [x16, #568]
    4ed8:	add	x16, x16, #0x238
    4edc:	br	x17

0000000000004ee0 <mpc_pow_usi@plt>:
    4ee0:	adrp	x16, 25000 <mpfr_set_underflow>
    4ee4:	ldr	x17, [x16, #576]
    4ee8:	add	x16, x16, #0x240
    4eec:	br	x17

0000000000004ef0 <mpfr_nextabove@plt>:
    4ef0:	adrp	x16, 25000 <mpfr_set_underflow>
    4ef4:	ldr	x17, [x16, #584]
    4ef8:	add	x16, x16, #0x248
    4efc:	br	x17

0000000000004f00 <__gmpz_fdiv_q_2exp@plt>:
    4f00:	adrp	x16, 25000 <mpfr_set_underflow>
    4f04:	ldr	x17, [x16, #592]
    4f08:	add	x16, x16, #0x250
    4f0c:	br	x17

0000000000004f10 <mpfr_clear_underflow@plt>:
    4f10:	adrp	x16, 25000 <mpfr_set_underflow>
    4f14:	ldr	x17, [x16, #600]
    4f18:	add	x16, x16, #0x258
    4f1c:	br	x17

0000000000004f20 <mpfr_integer_p@plt>:
    4f20:	adrp	x16, 25000 <mpfr_set_underflow>
    4f24:	ldr	x17, [x16, #608]
    4f28:	add	x16, x16, #0x260
    4f2c:	br	x17

0000000000004f30 <__gmpz_fits_ulong_p@plt>:
    4f30:	adrp	x16, 25000 <mpfr_set_underflow>
    4f34:	ldr	x17, [x16, #616]
    4f38:	add	x16, x16, #0x268
    4f3c:	br	x17

0000000000004f40 <mpfr_asin@plt>:
    4f40:	adrp	x16, 25000 <mpfr_set_underflow>
    4f44:	ldr	x17, [x16, #624]
    4f48:	add	x16, x16, #0x270
    4f4c:	br	x17

0000000000004f50 <mpc_set_ld@plt>:
    4f50:	adrp	x16, 25000 <mpfr_set_underflow>
    4f54:	ldr	x17, [x16, #632]
    4f58:	add	x16, x16, #0x278
    4f5c:	br	x17

0000000000004f60 <mpfr_add@plt>:
    4f60:	adrp	x16, 25000 <mpfr_set_underflow>
    4f64:	ldr	x17, [x16, #640]
    4f68:	add	x16, x16, #0x280
    4f6c:	br	x17

0000000000004f70 <mpfr_clears@plt>:
    4f70:	adrp	x16, 25000 <mpfr_set_underflow>
    4f74:	ldr	x17, [x16, #648]
    4f78:	add	x16, x16, #0x288
    4f7c:	br	x17

0000000000004f80 <mpfr_set@plt>:
    4f80:	adrp	x16, 25000 <mpfr_set_underflow>
    4f84:	ldr	x17, [x16, #656]
    4f88:	add	x16, x16, #0x290
    4f8c:	br	x17

0000000000004f90 <__gmpz_mul_2exp@plt>:
    4f90:	adrp	x16, 25000 <mpfr_set_underflow>
    4f94:	ldr	x17, [x16, #664]
    4f98:	add	x16, x16, #0x298
    4f9c:	br	x17

0000000000004fa0 <mpc_norm@plt>:
    4fa0:	adrp	x16, 25000 <mpfr_set_underflow>
    4fa4:	ldr	x17, [x16, #672]
    4fa8:	add	x16, x16, #0x2a0
    4fac:	br	x17

0000000000004fb0 <mpc_mul_naive@plt>:
    4fb0:	adrp	x16, 25000 <mpfr_set_underflow>
    4fb4:	ldr	x17, [x16, #680]
    4fb8:	add	x16, x16, #0x2a8
    4fbc:	br	x17

0000000000004fc0 <mpfr_set_z@plt>:
    4fc0:	adrp	x16, 25000 <mpfr_set_underflow>
    4fc4:	ldr	x17, [x16, #688]
    4fc8:	add	x16, x16, #0x2b0
    4fcc:	br	x17

0000000000004fd0 <__gmpz_get_ui@plt>:
    4fd0:	adrp	x16, 25000 <mpfr_set_underflow>
    4fd4:	ldr	x17, [x16, #696]
    4fd8:	add	x16, x16, #0x2b8
    4fdc:	br	x17

0000000000004fe0 <mpc_mul@plt>:
    4fe0:	adrp	x16, 25000 <mpfr_set_underflow>
    4fe4:	ldr	x17, [x16, #704]
    4fe8:	add	x16, x16, #0x2c0
    4fec:	br	x17

0000000000004ff0 <mpfr_add_ui@plt>:
    4ff0:	adrp	x16, 25000 <mpfr_set_underflow>
    4ff4:	ldr	x17, [x16, #712]
    4ff8:	add	x16, x16, #0x2c8
    4ffc:	br	x17

0000000000005000 <mpc_set_nan@plt>:
    5000:	adrp	x16, 25000 <mpfr_set_underflow>
    5004:	ldr	x17, [x16, #720]
    5008:	add	x16, x16, #0x2d0
    500c:	br	x17

0000000000005010 <mpc_strtoc@plt>:
    5010:	adrp	x16, 25000 <mpfr_set_underflow>
    5014:	ldr	x17, [x16, #728]
    5018:	add	x16, x16, #0x2d8
    501c:	br	x17

0000000000005020 <__gmpz_addmul@plt>:
    5020:	adrp	x16, 25000 <mpfr_set_underflow>
    5024:	ldr	x17, [x16, #736]
    5028:	add	x16, x16, #0x2e0
    502c:	br	x17

0000000000005030 <getc@plt>:
    5030:	adrp	x16, 25000 <mpfr_set_underflow>
    5034:	ldr	x17, [x16, #744]
    5038:	add	x16, x16, #0x2e8
    503c:	br	x17

0000000000005040 <mpc_sqr@plt>:
    5040:	adrp	x16, 25000 <mpfr_set_underflow>
    5044:	ldr	x17, [x16, #752]
    5048:	add	x16, x16, #0x2f0
    504c:	br	x17

0000000000005050 <mpfr_mul_2ui@plt>:
    5050:	adrp	x16, 25000 <mpfr_set_underflow>
    5054:	ldr	x17, [x16, #760]
    5058:	add	x16, x16, #0x2f8
    505c:	br	x17

0000000000005060 <mpc_sin@plt>:
    5060:	adrp	x16, 25000 <mpfr_set_underflow>
    5064:	ldr	x17, [x16, #768]
    5068:	add	x16, x16, #0x300
    506c:	br	x17

0000000000005070 <mpc_conj@plt>:
    5070:	adrp	x16, 25000 <mpfr_set_underflow>
    5074:	ldr	x17, [x16, #776]
    5078:	add	x16, x16, #0x308
    507c:	br	x17

0000000000005080 <mpfr_ui_div@plt>:
    5080:	adrp	x16, 25000 <mpfr_set_underflow>
    5084:	ldr	x17, [x16, #784]
    5088:	add	x16, x16, #0x310
    508c:	br	x17

0000000000005090 <mpfr_sinh@plt>:
    5090:	adrp	x16, 25000 <mpfr_set_underflow>
    5094:	ldr	x17, [x16, #792]
    5098:	add	x16, x16, #0x318
    509c:	br	x17

00000000000050a0 <mpc_set_d_d@plt>:
    50a0:	adrp	x16, 25000 <mpfr_set_underflow>
    50a4:	ldr	x17, [x16, #800]
    50a8:	add	x16, x16, #0x320
    50ac:	br	x17

00000000000050b0 <__gmpz_add_ui@plt>:
    50b0:	adrp	x16, 25000 <mpfr_set_underflow>
    50b4:	ldr	x17, [x16, #808]
    50b8:	add	x16, x16, #0x328
    50bc:	br	x17

00000000000050c0 <__gmpq_clear@plt>:
    50c0:	adrp	x16, 25000 <mpfr_set_underflow>
    50c4:	ldr	x17, [x16, #816]
    50c8:	add	x16, x16, #0x330
    50cc:	br	x17

00000000000050d0 <__gmon_start__@plt>:
    50d0:	adrp	x16, 25000 <mpfr_set_underflow>
    50d4:	ldr	x17, [x16, #824]
    50d8:	add	x16, x16, #0x338
    50dc:	br	x17

00000000000050e0 <mpfr_acos@plt>:
    50e0:	adrp	x16, 25000 <mpfr_set_underflow>
    50e4:	ldr	x17, [x16, #832]
    50e8:	add	x16, x16, #0x340
    50ec:	br	x17

00000000000050f0 <mpfr_cmp_si_2exp@plt>:
    50f0:	adrp	x16, 25000 <mpfr_set_underflow>
    50f4:	ldr	x17, [x16, #840]
    50f8:	add	x16, x16, #0x348
    50fc:	br	x17

0000000000005100 <mpc_free_str@plt>:
    5100:	adrp	x16, 25000 <mpfr_set_underflow>
    5104:	ldr	x17, [x16, #848]
    5108:	add	x16, x16, #0x350
    510c:	br	x17

0000000000005110 <abort@plt>:
    5110:	adrp	x16, 25000 <mpfr_set_underflow>
    5114:	ldr	x17, [x16, #856]
    5118:	add	x16, x16, #0x358
    511c:	br	x17

0000000000005120 <mpfr_sqr@plt>:
    5120:	adrp	x16, 25000 <mpfr_set_underflow>
    5124:	ldr	x17, [x16, #864]
    5128:	add	x16, x16, #0x360
    512c:	br	x17

0000000000005130 <mpc_set_si@plt>:
    5130:	adrp	x16, 25000 <mpfr_set_underflow>
    5134:	ldr	x17, [x16, #872]
    5138:	add	x16, x16, #0x368
    513c:	br	x17

0000000000005140 <mpfr_div_2si@plt>:
    5140:	adrp	x16, 25000 <mpfr_set_underflow>
    5144:	ldr	x17, [x16, #880]
    5148:	add	x16, x16, #0x370
    514c:	br	x17

0000000000005150 <mpc_set_ui_ui@plt>:
    5150:	adrp	x16, 25000 <mpfr_set_underflow>
    5154:	ldr	x17, [x16, #888]
    5158:	add	x16, x16, #0x378
    515c:	br	x17

0000000000005160 <mpfr_cos@plt>:
    5160:	adrp	x16, 25000 <mpfr_set_underflow>
    5164:	ldr	x17, [x16, #896]
    5168:	add	x16, x16, #0x380
    516c:	br	x17

0000000000005170 <mpfr_get_emin@plt>:
    5170:	adrp	x16, 25000 <mpfr_set_underflow>
    5174:	ldr	x17, [x16, #904]
    5178:	add	x16, x16, #0x388
    517c:	br	x17

0000000000005180 <mpc_acos@plt>:
    5180:	adrp	x16, 25000 <mpfr_set_underflow>
    5184:	ldr	x17, [x16, #912]
    5188:	add	x16, x16, #0x390
    518c:	br	x17

0000000000005190 <mpfr_sin@plt>:
    5190:	adrp	x16, 25000 <mpfr_set_underflow>
    5194:	ldr	x17, [x16, #920]
    5198:	add	x16, x16, #0x398
    519c:	br	x17

00000000000051a0 <mpfr_swap@plt>:
    51a0:	adrp	x16, 25000 <mpfr_set_underflow>
    51a4:	ldr	x17, [x16, #928]
    51a8:	add	x16, x16, #0x3a0
    51ac:	br	x17

00000000000051b0 <mpc_set_z@plt>:
    51b0:	adrp	x16, 25000 <mpfr_set_underflow>
    51b4:	ldr	x17, [x16, #936]
    51b8:	add	x16, x16, #0x3a8
    51bc:	br	x17

00000000000051c0 <__gmpz_ui_pow_ui@plt>:
    51c0:	adrp	x16, 25000 <mpfr_set_underflow>
    51c4:	ldr	x17, [x16, #944]
    51c8:	add	x16, x16, #0x3b0
    51cc:	br	x17

00000000000051d0 <mpfr_get_str@plt>:
    51d0:	adrp	x16, 25000 <mpfr_set_underflow>
    51d4:	ldr	x17, [x16, #952]
    51d8:	add	x16, x16, #0x3b8
    51dc:	br	x17

00000000000051e0 <mpc_fix_zero@plt>:
    51e0:	adrp	x16, 25000 <mpfr_set_underflow>
    51e4:	ldr	x17, [x16, #960]
    51e8:	add	x16, x16, #0x3c0
    51ec:	br	x17

00000000000051f0 <mpfr_acosh@plt>:
    51f0:	adrp	x16, 25000 <mpfr_set_underflow>
    51f4:	ldr	x17, [x16, #968]
    51f8:	add	x16, x16, #0x3c8
    51fc:	br	x17

0000000000005200 <mpfr_sub_ui@plt>:
    5200:	adrp	x16, 25000 <mpfr_set_underflow>
    5204:	ldr	x17, [x16, #976]
    5208:	add	x16, x16, #0x3d0
    520c:	br	x17

0000000000005210 <__gmpq_set_ui@plt>:
    5210:	adrp	x16, 25000 <mpfr_set_underflow>
    5214:	ldr	x17, [x16, #984]
    5218:	add	x16, x16, #0x3d8
    521c:	br	x17

0000000000005220 <mpfr_get_ld@plt>:
    5220:	adrp	x16, 25000 <mpfr_set_underflow>
    5224:	ldr	x17, [x16, #992]
    5228:	add	x16, x16, #0x3e0
    522c:	br	x17

0000000000005230 <mpfr_set_inf@plt>:
    5230:	adrp	x16, 25000 <mpfr_set_underflow>
    5234:	ldr	x17, [x16, #1000]
    5238:	add	x16, x16, #0x3e8
    523c:	br	x17

0000000000005240 <mpfr_set_ui_2exp@plt>:
    5240:	adrp	x16, 25000 <mpfr_set_underflow>
    5244:	ldr	x17, [x16, #1008]
    5248:	add	x16, x16, #0x3f0
    524c:	br	x17

0000000000005250 <mpc_sin_cos@plt>:
    5250:	adrp	x16, 25000 <mpfr_set_underflow>
    5254:	ldr	x17, [x16, #1016]
    5258:	add	x16, x16, #0x3f8
    525c:	br	x17

0000000000005260 <mpfr_div@plt>:
    5260:	adrp	x16, 25000 <mpfr_set_underflow>
    5264:	ldr	x17, [x16, #1024]
    5268:	add	x16, x16, #0x400
    526c:	br	x17

0000000000005270 <mpc_mul_fr@plt>:
    5270:	adrp	x16, 25000 <mpfr_set_underflow>
    5274:	ldr	x17, [x16, #1032]
    5278:	add	x16, x16, #0x408
    527c:	br	x17

0000000000005280 <__ctype_b_loc@plt>:
    5280:	adrp	x16, 25000 <mpfr_set_underflow>
    5284:	ldr	x17, [x16, #1040]
    5288:	add	x16, x16, #0x410
    528c:	br	x17

0000000000005290 <__gmpz_clear@plt>:
    5290:	adrp	x16, 25000 <mpfr_set_underflow>
    5294:	ldr	x17, [x16, #1048]
    5298:	add	x16, x16, #0x418
    529c:	br	x17

00000000000052a0 <__gmpfr_out_str@plt>:
    52a0:	adrp	x16, 25000 <mpfr_set_underflow>
    52a4:	ldr	x17, [x16, #1056]
    52a8:	add	x16, x16, #0x420
    52ac:	br	x17

00000000000052b0 <mpc_abs@plt>:
    52b0:	adrp	x16, 25000 <mpfr_set_underflow>
    52b4:	ldr	x17, [x16, #1064]
    52b8:	add	x16, x16, #0x428
    52bc:	br	x17

00000000000052c0 <mpfr_atan@plt>:
    52c0:	adrp	x16, 25000 <mpfr_set_underflow>
    52c4:	ldr	x17, [x16, #1072]
    52c8:	add	x16, x16, #0x430
    52cc:	br	x17

00000000000052d0 <mpfr_nexttoward@plt>:
    52d0:	adrp	x16, 25000 <mpfr_set_underflow>
    52d4:	ldr	x17, [x16, #1080]
    52d8:	add	x16, x16, #0x438
    52dc:	br	x17

00000000000052e0 <mpfr_set4@plt>:
    52e0:	adrp	x16, 25000 <mpfr_set_underflow>
    52e4:	ldr	x17, [x16, #1088]
    52e8:	add	x16, x16, #0x440
    52ec:	br	x17

00000000000052f0 <mpfr_log1p@plt>:
    52f0:	adrp	x16, 25000 <mpfr_set_underflow>
    52f4:	ldr	x17, [x16, #1096]
    52f8:	add	x16, x16, #0x448
    52fc:	br	x17

0000000000005300 <mpfr_sgn@plt>:
    5300:	adrp	x16, 25000 <mpfr_set_underflow>
    5304:	ldr	x17, [x16, #1104]
    5308:	add	x16, x16, #0x450
    530c:	br	x17

0000000000005310 <mpfr_get_emax@plt>:
    5310:	adrp	x16, 25000 <mpfr_set_underflow>
    5314:	ldr	x17, [x16, #1112]
    5318:	add	x16, x16, #0x458
    531c:	br	x17

0000000000005320 <ungetc@plt>:
    5320:	adrp	x16, 25000 <mpfr_set_underflow>
    5324:	ldr	x17, [x16, #1120]
    5328:	add	x16, x16, #0x460
    532c:	br	x17

0000000000005330 <__gmpz_tdiv_q_2exp@plt>:
    5330:	adrp	x16, 25000 <mpfr_set_underflow>
    5334:	ldr	x17, [x16, #1128]
    5338:	add	x16, x16, #0x468
    533c:	br	x17

0000000000005340 <mpfr_exp@plt>:
    5340:	adrp	x16, 25000 <mpfr_set_underflow>
    5344:	ldr	x17, [x16, #1136]
    5348:	add	x16, x16, #0x470
    534c:	br	x17

0000000000005350 <mpc_pow@plt>:
    5350:	adrp	x16, 25000 <mpfr_set_underflow>
    5354:	ldr	x17, [x16, #1144]
    5358:	add	x16, x16, #0x478
    535c:	br	x17

0000000000005360 <mpc_div@plt>:
    5360:	adrp	x16, 25000 <mpfr_set_underflow>
    5364:	ldr	x17, [x16, #1152]
    5368:	add	x16, x16, #0x480
    536c:	br	x17

0000000000005370 <mpfr_add_si@plt>:
    5370:	adrp	x16, 25000 <mpfr_set_underflow>
    5374:	ldr	x17, [x16, #1160]
    5378:	add	x16, x16, #0x488
    537c:	br	x17

0000000000005380 <mpfr_set_si@plt>:
    5380:	adrp	x16, 25000 <mpfr_set_underflow>
    5384:	ldr	x17, [x16, #1168]
    5388:	add	x16, x16, #0x490
    538c:	br	x17

0000000000005390 <mpfr_sqrt_ui@plt>:
    5390:	adrp	x16, 25000 <mpfr_set_underflow>
    5394:	ldr	x17, [x16, #1176]
    5398:	add	x16, x16, #0x498
    539c:	br	x17

00000000000053a0 <mpfr_set_q@plt>:
    53a0:	adrp	x16, 25000 <mpfr_set_underflow>
    53a4:	ldr	x17, [x16, #1184]
    53a8:	add	x16, x16, #0x4a0
    53ac:	br	x17

00000000000053b0 <mpc_exp@plt>:
    53b0:	adrp	x16, 25000 <mpfr_set_underflow>
    53b4:	ldr	x17, [x16, #1192]
    53b8:	add	x16, x16, #0x4a8
    53bc:	br	x17

00000000000053c0 <__gmpq_init@plt>:
    53c0:	adrp	x16, 25000 <mpfr_set_underflow>
    53c4:	ldr	x17, [x16, #1200]
    53c8:	add	x16, x16, #0x4b0
    53cc:	br	x17

00000000000053d0 <mpc_set_si_si@plt>:
    53d0:	adrp	x16, 25000 <mpfr_set_underflow>
    53d4:	ldr	x17, [x16, #1208]
    53d8:	add	x16, x16, #0x4b8
    53dc:	br	x17

00000000000053e0 <__gmpz_submul@plt>:
    53e0:	adrp	x16, 25000 <mpfr_set_underflow>
    53e4:	ldr	x17, [x16, #1216]
    53e8:	add	x16, x16, #0x4c0
    53ec:	br	x17

00000000000053f0 <mpfr_free_str@plt>:
    53f0:	adrp	x16, 25000 <mpfr_set_underflow>
    53f4:	ldr	x17, [x16, #1224]
    53f8:	add	x16, x16, #0x4c8
    53fc:	br	x17

0000000000005400 <mpfr_underflow_p@plt>:
    5400:	adrp	x16, 25000 <mpfr_set_underflow>
    5404:	ldr	x17, [x16, #1232]
    5408:	add	x16, x16, #0x4d0
    540c:	br	x17

0000000000005410 <__gmpz_cmp@plt>:
    5410:	adrp	x16, 25000 <mpfr_set_underflow>
    5414:	ldr	x17, [x16, #1240]
    5418:	add	x16, x16, #0x4d8
    541c:	br	x17

0000000000005420 <mpc_cmp_si_si@plt>:
    5420:	adrp	x16, 25000 <mpfr_set_underflow>
    5424:	ldr	x17, [x16, #1248]
    5428:	add	x16, x16, #0x4e0
    542c:	br	x17

0000000000005430 <mpfr_div_2ui@plt>:
    5430:	adrp	x16, 25000 <mpfr_set_underflow>
    5434:	ldr	x17, [x16, #1256]
    5438:	add	x16, x16, #0x4e8
    543c:	br	x17

0000000000005440 <mpc_realloc_str@plt>:
    5440:	adrp	x16, 25000 <mpfr_set_underflow>
    5444:	ldr	x17, [x16, #1264]
    5448:	add	x16, x16, #0x4f0
    544c:	br	x17

0000000000005450 <strcpy@plt>:
    5450:	adrp	x16, 25000 <mpfr_set_underflow>
    5454:	ldr	x17, [x16, #1272]
    5458:	add	x16, x16, #0x4f8
    545c:	br	x17

0000000000005460 <mpfr_sqrt@plt>:
    5460:	adrp	x16, 25000 <mpfr_set_underflow>
    5464:	ldr	x17, [x16, #1280]
    5468:	add	x16, x16, #0x500
    546c:	br	x17

0000000000005470 <mpfr_mul_si@plt>:
    5470:	adrp	x16, 25000 <mpfr_set_underflow>
    5474:	ldr	x17, [x16, #1288]
    5478:	add	x16, x16, #0x508
    547c:	br	x17

0000000000005480 <mpfr_prec_round@plt>:
    5480:	adrp	x16, 25000 <mpfr_set_underflow>
    5484:	ldr	x17, [x16, #1296]
    5488:	add	x16, x16, #0x510
    548c:	br	x17

0000000000005490 <mpc_set_str@plt>:
    5490:	adrp	x16, 25000 <mpfr_set_underflow>
    5494:	ldr	x17, [x16, #1304]
    5498:	add	x16, x16, #0x518
    549c:	br	x17

00000000000054a0 <mpfr_min_prec@plt>:
    54a0:	adrp	x16, 25000 <mpfr_set_underflow>
    54a4:	ldr	x17, [x16, #1312]
    54a8:	add	x16, x16, #0x520
    54ac:	br	x17

00000000000054b0 <mpfr_cmp3@plt>:
    54b0:	adrp	x16, 25000 <mpfr_set_underflow>
    54b4:	ldr	x17, [x16, #1320]
    54b8:	add	x16, x16, #0x528
    54bc:	br	x17

00000000000054c0 <mpfr_cmpabs@plt>:
    54c0:	adrp	x16, 25000 <mpfr_set_underflow>
    54c4:	ldr	x17, [x16, #1328]
    54c8:	add	x16, x16, #0x530
    54cc:	br	x17

00000000000054d0 <mpc_init3@plt>:
    54d0:	adrp	x16, 25000 <mpfr_set_underflow>
    54d4:	ldr	x17, [x16, #1336]
    54d8:	add	x16, x16, #0x538
    54dc:	br	x17

00000000000054e0 <__gmpz_add@plt>:
    54e0:	adrp	x16, 25000 <mpfr_set_underflow>
    54e4:	ldr	x17, [x16, #1344]
    54e8:	add	x16, x16, #0x540
    54ec:	br	x17

00000000000054f0 <mpc_cos@plt>:
    54f0:	adrp	x16, 25000 <mpfr_set_underflow>
    54f4:	ldr	x17, [x16, #1352]
    54f8:	add	x16, x16, #0x548
    54fc:	br	x17

0000000000005500 <set_pi_over_2@plt>:
    5500:	adrp	x16, 25000 <mpfr_set_underflow>
    5504:	ldr	x17, [x16, #1360]
    5508:	add	x16, x16, #0x550
    550c:	br	x17

0000000000005510 <__gmpfr_set_uj@plt>:
    5510:	adrp	x16, 25000 <mpfr_set_underflow>
    5514:	ldr	x17, [x16, #1368]
    5518:	add	x16, x16, #0x558
    551c:	br	x17

0000000000005520 <mpc_atan@plt>:
    5520:	adrp	x16, 25000 <mpfr_set_underflow>
    5524:	ldr	x17, [x16, #1376]
    5528:	add	x16, x16, #0x560
    552c:	br	x17

0000000000005530 <mpfr_ui_sub@plt>:
    5530:	adrp	x16, 25000 <mpfr_set_underflow>
    5534:	ldr	x17, [x16, #1384]
    5538:	add	x16, x16, #0x568
    553c:	br	x17

0000000000005540 <mpfr_init2@plt>:
    5540:	adrp	x16, 25000 <mpfr_set_underflow>
    5544:	ldr	x17, [x16, #1392]
    5548:	add	x16, x16, #0x570
    554c:	br	x17

0000000000005550 <mpfr_can_round@plt>:
    5550:	adrp	x16, 25000 <mpfr_set_underflow>
    5554:	ldr	x17, [x16, #1400]
    5558:	add	x16, x16, #0x578
    555c:	br	x17

0000000000005560 <mpc_set_d@plt>:
    5560:	adrp	x16, 25000 <mpfr_set_underflow>
    5564:	ldr	x17, [x16, #1408]
    5568:	add	x16, x16, #0x580
    556c:	br	x17

0000000000005570 <mpfr_get_z_2exp@plt>:
    5570:	adrp	x16, 25000 <mpfr_set_underflow>
    5574:	ldr	x17, [x16, #1416]
    5578:	add	x16, x16, #0x588
    557c:	br	x17

0000000000005580 <mpc_asin@plt>:
    5580:	adrp	x16, 25000 <mpfr_set_underflow>
    5584:	ldr	x17, [x16, #1424]
    5588:	add	x16, x16, #0x590
    558c:	br	x17

0000000000005590 <mpfr_set_overflow@plt>:
    5590:	adrp	x16, 25000 <mpfr_set_underflow>
    5594:	ldr	x17, [x16, #1432]
    5598:	add	x16, x16, #0x598
    559c:	br	x17

00000000000055a0 <__gmpz_init@plt>:
    55a0:	adrp	x16, 25000 <mpfr_set_underflow>
    55a4:	ldr	x17, [x16, #1440]
    55a8:	add	x16, x16, #0x5a0
    55ac:	br	x17

00000000000055b0 <__gmpz_sizeinbase@plt>:
    55b0:	adrp	x16, 25000 <mpfr_set_underflow>
    55b4:	ldr	x17, [x16, #1448]
    55b8:	add	x16, x16, #0x5a8
    55bc:	br	x17

00000000000055c0 <__gmpz_set_si@plt>:
    55c0:	adrp	x16, 25000 <mpfr_set_underflow>
    55c4:	ldr	x17, [x16, #1456]
    55c8:	add	x16, x16, #0x5b0
    55cc:	br	x17

00000000000055d0 <mpfr_number_p@plt>:
    55d0:	adrp	x16, 25000 <mpfr_set_underflow>
    55d4:	ldr	x17, [x16, #1464]
    55d8:	add	x16, x16, #0x5b8
    55dc:	br	x17

00000000000055e0 <mpfr_overflow_p@plt>:
    55e0:	adrp	x16, 25000 <mpfr_set_underflow>
    55e4:	ldr	x17, [x16, #1472]
    55e8:	add	x16, x16, #0x5c0
    55ec:	br	x17

00000000000055f0 <mpc_set_fr_fr@plt>:
    55f0:	adrp	x16, 25000 <mpfr_set_underflow>
    55f4:	ldr	x17, [x16, #1480]
    55f8:	add	x16, x16, #0x5c8
    55fc:	br	x17

0000000000005600 <mpfr_urandomb@plt>:
    5600:	adrp	x16, 25000 <mpfr_set_underflow>
    5604:	ldr	x17, [x16, #1488]
    5608:	add	x16, x16, #0x5d0
    560c:	br	x17

0000000000005610 <mpfr_set_ui@plt>:
    5610:	adrp	x16, 25000 <mpfr_set_underflow>
    5614:	ldr	x17, [x16, #1496]
    5618:	add	x16, x16, #0x5d8
    561c:	br	x17

0000000000005620 <mpfr_sin_cos@plt>:
    5620:	adrp	x16, 25000 <mpfr_set_underflow>
    5624:	ldr	x17, [x16, #1504]
    5628:	add	x16, x16, #0x5e0
    562c:	br	x17

0000000000005630 <mpc_div_2ui@plt>:
    5630:	adrp	x16, 25000 <mpfr_set_underflow>
    5634:	ldr	x17, [x16, #1512]
    5638:	add	x16, x16, #0x5e8
    563c:	br	x17

0000000000005640 <mpfr_inits2@plt>:
    5640:	adrp	x16, 25000 <mpfr_set_underflow>
    5644:	ldr	x17, [x16, #1520]
    5648:	add	x16, x16, #0x5f0
    564c:	br	x17

0000000000005650 <mpfr_div_ui@plt>:
    5650:	adrp	x16, 25000 <mpfr_set_underflow>
    5654:	ldr	x17, [x16, #1528]
    5658:	add	x16, x16, #0x5f8
    565c:	br	x17

0000000000005660 <mpc_fma_naive@plt>:
    5660:	adrp	x16, 25000 <mpfr_set_underflow>
    5664:	ldr	x17, [x16, #1536]
    5668:	add	x16, x16, #0x600
    566c:	br	x17

0000000000005670 <__gmpq_mul_2exp@plt>:
    5670:	adrp	x16, 25000 <mpfr_set_underflow>
    5674:	ldr	x17, [x16, #1544]
    5678:	add	x16, x16, #0x608
    567c:	br	x17

0000000000005680 <mpc_set@plt>:
    5680:	adrp	x16, 25000 <mpfr_set_underflow>
    5684:	ldr	x17, [x16, #1552]
    5688:	add	x16, x16, #0x610
    568c:	br	x17

0000000000005690 <mpfr_hypot@plt>:
    5690:	adrp	x16, 25000 <mpfr_set_underflow>
    5694:	ldr	x17, [x16, #1560]
    5698:	add	x16, x16, #0x618
    569c:	br	x17

00000000000056a0 <fprintf@plt>:
    56a0:	adrp	x16, 25000 <mpfr_set_underflow>
    56a4:	ldr	x17, [x16, #1568]
    56a8:	add	x16, x16, #0x620
    56ac:	br	x17

00000000000056b0 <mpc_ui_div@plt>:
    56b0:	adrp	x16, 25000 <mpfr_set_underflow>
    56b4:	ldr	x17, [x16, #1576]
    56b8:	add	x16, x16, #0x628
    56bc:	br	x17

00000000000056c0 <mpfr_get_emin_min@plt>:
    56c0:	adrp	x16, 25000 <mpfr_set_underflow>
    56c4:	ldr	x17, [x16, #1584]
    56c8:	add	x16, x16, #0x630
    56cc:	br	x17

Disassembly of section .text:

00000000000056d0 <mpc_abs@@Base-0xd4>:
    56d0:	adrp	x0, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    56d4:	ldr	x0, [x0, #4048]
    56d8:	cbz	x0, 56e0 <mpfr_get_emin_min@plt+0x20>
    56dc:	b	50d0 <__gmon_start__@plt>
    56e0:	ret
    56e4:	nop
    56e8:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12880>
    56ec:	add	x0, x0, #0x640
    56f0:	adrp	x1, 25000 <mpc_ui_ui_sub@@Base+0x12880>
    56f4:	add	x1, x1, #0x640
    56f8:	cmp	x1, x0
    56fc:	b.eq	5714 <mpfr_get_emin_min@plt+0x54>  // b.none
    5700:	adrp	x1, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    5704:	ldr	x1, [x1, #3992]
    5708:	cbz	x1, 5714 <mpfr_get_emin_min@plt+0x54>
    570c:	mov	x16, x1
    5710:	br	x16
    5714:	ret
    5718:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12880>
    571c:	add	x0, x0, #0x640
    5720:	adrp	x1, 25000 <mpc_ui_ui_sub@@Base+0x12880>
    5724:	add	x1, x1, #0x640
    5728:	sub	x1, x1, x0
    572c:	lsr	x2, x1, #63
    5730:	add	x1, x2, x1, asr #3
    5734:	cmp	xzr, x1, asr #1
    5738:	asr	x1, x1, #1
    573c:	b.eq	5754 <mpfr_get_emin_min@plt+0x94>  // b.none
    5740:	adrp	x2, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    5744:	ldr	x2, [x2, #4064]
    5748:	cbz	x2, 5754 <mpfr_get_emin_min@plt+0x94>
    574c:	mov	x16, x2
    5750:	br	x16
    5754:	ret
    5758:	stp	x29, x30, [sp, #-32]!
    575c:	mov	x29, sp
    5760:	str	x19, [sp, #16]
    5764:	adrp	x19, 25000 <mpc_ui_ui_sub@@Base+0x12880>
    5768:	ldrb	w0, [x19, #1600]
    576c:	cbnz	w0, 5794 <mpfr_get_emin_min@plt+0xd4>
    5770:	adrp	x0, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    5774:	ldr	x0, [x0, #4000]
    5778:	cbz	x0, 5788 <mpfr_get_emin_min@plt+0xc8>
    577c:	adrp	x0, 25000 <mpc_ui_ui_sub@@Base+0x12880>
    5780:	ldr	x0, [x0, #1592]
    5784:	bl	4bf0 <__cxa_finalize@plt>
    5788:	bl	56e8 <mpfr_get_emin_min@plt+0x28>
    578c:	mov	w0, #0x1                   	// #1
    5790:	strb	w0, [x19, #1600]
    5794:	ldr	x19, [sp, #16]
    5798:	ldp	x29, x30, [sp], #32
    579c:	ret
    57a0:	b	5718 <mpfr_get_emin_min@plt+0x58>

00000000000057a4 <mpc_abs@@Base>:
    57a4:	stp	x29, x30, [sp, #-16]!
    57a8:	mov	w3, w2
    57ac:	add	x2, x1, #0x20
    57b0:	mov	x29, sp
    57b4:	bl	5690 <mpfr_hypot@plt>
    57b8:	ldp	x29, x30, [sp], #16
    57bc:	ret

00000000000057c0 <mpc_acos@@Base>:
    57c0:	sub	sp, sp, #0xd0
    57c4:	stp	x29, x30, [sp, #112]
    57c8:	stp	x28, x27, [sp, #128]
    57cc:	stp	x26, x25, [sp, #144]
    57d0:	stp	x24, x23, [sp, #160]
    57d4:	stp	x22, x21, [sp, #176]
    57d8:	stp	x20, x19, [sp, #192]
    57dc:	ldr	x8, [x1, #16]
    57e0:	mov	x27, #0x2                   	// #2
    57e4:	movk	x27, #0x8000, lsl #48
    57e8:	mov	w19, w2
    57ec:	mov	x20, x1
    57f0:	cmp	x8, x27
    57f4:	mov	x24, x0
    57f8:	add	x29, sp, #0x70
    57fc:	b.ne	583c <mpc_acos@@Base+0x7c>  // b.any
    5800:	ldr	x9, [x20, #48]
    5804:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    5808:	cmp	x9, x10
    580c:	b.eq	5854 <mpc_acos@@Base+0x94>  // b.none
    5810:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    5814:	cmp	x8, x9
    5818:	b.ne	58e4 <mpc_acos@@Base+0x124>  // b.any
    581c:	and	w2, w19, #0xf
    5820:	mov	w1, #0x1                   	// #1
    5824:	mov	x0, x24
    5828:	bl	5500 <set_pi_over_2@plt>
    582c:	mov	w20, w0
    5830:	add	x0, x24, #0x20
    5834:	bl	4b10 <mpfr_set_nan@plt>
    5838:	b	58f8 <mpc_acos@@Base+0x138>
    583c:	ldr	x9, [x20, #48]
    5840:	cmp	x9, x27
    5844:	b.ne	5874 <mpc_acos@@Base+0xb4>  // b.any
    5848:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    584c:	cmp	x8, x9
    5850:	b.ne	5800 <mpc_acos@@Base+0x40>  // b.any
    5854:	ldr	w8, [x20, #40]
    5858:	add	x0, x24, #0x20
    585c:	cmp	w8, #0x0
    5860:	mov	w8, #0xffffffff            	// #-1
    5864:	cneg	w1, w8, lt  // lt = tstop
    5868:	bl	5230 <mpfr_set_inf@plt>
    586c:	mov	x0, x24
    5870:	b	58f0 <mpc_acos@@Base+0x130>
    5874:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    5878:	cmp	x8, x10
    587c:	b.eq	5928 <mpc_acos@@Base+0x168>  // b.none
    5880:	cmp	x9, x10
    5884:	b.eq	5928 <mpc_acos@@Base+0x168>  // b.none
    5888:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    588c:	cmp	x9, x10
    5890:	b.ne	5974 <mpc_acos@@Base+0x1b4>  // b.any
    5894:	ldr	w22, [x20, #40]
    5898:	mov	w1, #0x1                   	// #1
    589c:	mov	x0, x20
    58a0:	mov	x2, xzr
    58a4:	bl	4d80 <mpfr_cmp_ui_2exp@plt>
    58a8:	cmp	w0, #0x1
    58ac:	b.lt	5a7c <mpc_acos@@Base+0x2bc>  // b.tstop
    58b0:	add	x0, x24, #0x20
    58b4:	asr	w2, w19, #4
    58b8:	tbnz	w22, #31, 5adc <mpc_acos@@Base+0x31c>
    58bc:	cmp	w2, #0x3
    58c0:	mov	w8, #0x2                   	// #2
    58c4:	csel	w8, w8, w2, eq  // eq = none
    58c8:	cmp	w2, #0x2
    58cc:	mov	w9, #0x3                   	// #3
    58d0:	csel	w2, w9, w8, eq  // eq = none
    58d4:	mov	x1, x20
    58d8:	bl	51f0 <mpfr_acosh@plt>
    58dc:	neg	w20, w0
    58e0:	b	5ae8 <mpc_acos@@Base+0x328>
    58e4:	mov	x0, x24
    58e8:	bl	4b10 <mpfr_set_nan@plt>
    58ec:	add	x0, x24, #0x20
    58f0:	bl	4b10 <mpfr_set_nan@plt>
    58f4:	mov	w20, wzr
    58f8:	cmp	w20, #0x0
    58fc:	cset	w8, ne  // ne = any
    5900:	mov	w9, #0x2                   	// #2
    5904:	csel	w0, w9, w8, lt  // lt = tstop
    5908:	ldp	x20, x19, [sp, #192]
    590c:	ldp	x22, x21, [sp, #176]
    5910:	ldp	x24, x23, [sp, #160]
    5914:	ldp	x26, x25, [sp, #144]
    5918:	ldp	x28, x27, [sp, #128]
    591c:	ldp	x29, x30, [sp, #112]
    5920:	add	sp, sp, #0xd0
    5924:	ret
    5928:	cmp	x8, x10
    592c:	b.ne	59f8 <mpc_acos@@Base+0x238>  // b.any
    5930:	ldr	w8, [x20, #8]
    5934:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    5938:	cmp	x9, x10
    593c:	b.ne	5a10 <mpc_acos@@Base+0x250>  // b.any
    5940:	cmp	w8, #0x1
    5944:	b.lt	5b38 <mpc_acos@@Base+0x378>  // b.tstop
    5948:	and	w2, w19, #0xf
    594c:	mov	w1, #0x1                   	// #1
    5950:	mov	x0, x24
    5954:	bl	5500 <set_pi_over_2@plt>
    5958:	mov	w21, w0
    595c:	mov	w2, #0x1                   	// #1
    5960:	mov	x0, x24
    5964:	mov	x1, x24
    5968:	mov	w3, wzr
    596c:	bl	5430 <mpfr_div_2ui@plt>
    5970:	b	5bc4 <mpc_acos@@Base+0x404>
    5974:	cmp	x8, x10
    5978:	b.ne	5a30 <mpc_acos@@Base+0x270>  // b.any
    597c:	and	w2, w19, #0xf
    5980:	mov	w1, #0x1                   	// #1
    5984:	mov	x0, x24
    5988:	add	x20, x20, #0x20
    598c:	bl	5500 <set_pi_over_2@plt>
    5990:	asr	w8, w19, #4
    5994:	mov	w19, #0x2                   	// #2
    5998:	cmp	w8, #0x3
    599c:	csel	w9, w19, w8, eq  // eq = none
    59a0:	cmp	w8, #0x2
    59a4:	mov	w8, #0x3                   	// #3
    59a8:	mov	w22, w0
    59ac:	add	x0, x24, #0x20
    59b0:	csel	w2, w8, w9, eq  // eq = none
    59b4:	mov	x1, x20
    59b8:	bl	4eb0 <mpfr_asinh@plt>
    59bc:	mov	w20, w0
    59c0:	mov	x0, x24
    59c4:	mov	x1, x24
    59c8:	mov	w2, wzr
    59cc:	bl	5070 <mpc_conj@plt>
    59d0:	cmp	w22, #0x0
    59d4:	cset	w8, ne  // ne = any
    59d8:	csel	w8, w19, w8, lt  // lt = tstop
    59dc:	cmp	w20, #0x0
    59e0:	cset	w9, ne  // ne = any
    59e4:	lsl	w9, w9, #2
    59e8:	mov	w10, #0x8                   	// #8
    59ec:	csel	w9, w10, w9, gt
    59f0:	orr	w0, w9, w8
    59f4:	b	5908 <mpc_acos@@Base+0x148>
    59f8:	and	w2, w19, #0xf
    59fc:	mov	w1, #0x1                   	// #1
    5a00:	mov	x0, x24
    5a04:	bl	5500 <set_pi_over_2@plt>
    5a08:	mov	w21, w0
    5a0c:	b	5bc4 <mpc_acos@@Base+0x404>
    5a10:	cmp	w8, #0x1
    5a14:	b.lt	5be4 <mpc_acos@@Base+0x424>  // b.tstop
    5a18:	mov	w8, #0x1                   	// #1
    5a1c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    5a20:	mov	w21, wzr
    5a24:	str	w8, [x24, #8]
    5a28:	str	x9, [x24, #16]
    5a2c:	b	5bc4 <mpc_acos@@Base+0x404>
    5a30:	ldr	x22, [x24]
    5a34:	ldr	x2, [x24, #32]
    5a38:	add	x0, sp, #0x30
    5a3c:	mov	x1, x22
    5a40:	bl	54d0 <mpc_init3@plt>
    5a44:	asr	w8, w19, #4
    5a48:	cmp	w8, #0x1
    5a4c:	str	x24, [sp, #8]
    5a50:	b.ne	5ac0 <mpc_acos@@Base+0x300>  // b.any
    5a54:	ldr	x8, [x20, #48]
    5a58:	mov	x9, #0x2                   	// #2
    5a5c:	movk	x9, #0x8000, lsl #48
    5a60:	cmp	x8, x9
    5a64:	b.gt	5c40 <mpc_acos@@Base+0x480>
    5a68:	cmp	x8, x27
    5a6c:	b.ne	5a74 <mpc_acos@@Base+0x2b4>  // b.any
    5a70:	bl	4bd0 <mpfr_set_erangeflag@plt>
    5a74:	mov	w8, #0x2                   	// #2
    5a78:	b	5c50 <mpc_acos@@Base+0x490>
    5a7c:	mov	x1, #0xffffffffffffffff    	// #-1
    5a80:	mov	x0, x20
    5a84:	mov	x2, xzr
    5a88:	bl	50f0 <mpfr_cmp_si_2exp@plt>
    5a8c:	tbnz	w0, #31, 5bf4 <mpc_acos@@Base+0x434>
    5a90:	and	w2, w19, #0xf
    5a94:	mov	x0, x24
    5a98:	mov	x1, x20
    5a9c:	bl	50e0 <mpfr_acos@plt>
    5aa0:	mov	w21, w0
    5aa4:	mov	w20, wzr
    5aa8:	mov	w8, #0x1                   	// #1
    5aac:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    5ab0:	str	w8, [x24, #40]
    5ab4:	str	x9, [x24, #48]
    5ab8:	tbz	w22, #31, 5b00 <mpc_acos@@Base+0x340>
    5abc:	b	5b10 <mpc_acos@@Base+0x350>
    5ac0:	cmp	w8, #0x3
    5ac4:	mov	w9, #0x2                   	// #2
    5ac8:	csel	w9, w9, w8, eq  // eq = none
    5acc:	cmp	w8, #0x2
    5ad0:	mov	w8, #0x3                   	// #3
    5ad4:	csel	w8, w8, w9, eq  // eq = none
    5ad8:	b	5c50 <mpc_acos@@Base+0x490>
    5adc:	mov	x1, x20
    5ae0:	bl	51f0 <mpfr_acosh@plt>
    5ae4:	mov	w20, w0
    5ae8:	mov	w8, #0x1                   	// #1
    5aec:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    5af0:	mov	w21, wzr
    5af4:	str	w8, [x24, #8]
    5af8:	str	x9, [x24, #16]
    5afc:	tbnz	w22, #31, 5b10 <mpc_acos@@Base+0x350>
    5b00:	mov	x0, x24
    5b04:	mov	x1, x24
    5b08:	mov	w2, wzr
    5b0c:	bl	5070 <mpc_conj@plt>
    5b10:	cmp	w21, #0x0
    5b14:	mov	w8, #0x2                   	// #2
    5b18:	cset	w9, ne  // ne = any
    5b1c:	csel	w8, w8, w9, lt  // lt = tstop
    5b20:	cmp	w20, #0x0
    5b24:	cset	w9, ne  // ne = any
    5b28:	lsl	w9, w9, #2
    5b2c:	mov	w10, #0x8                   	// #8
    5b30:	csel	w9, w10, w9, lt  // lt = tstop
    5b34:	b	5e00 <mpc_acos@@Base+0x640>
    5b38:	add	x0, sp, #0x30
    5b3c:	bl	4b70 <mpfr_init@plt>
    5b40:	ldr	x23, [x24]
    5b44:	tst	w19, #0xf
    5b48:	and	w22, w19, #0xf
    5b4c:	cinc	x21, x23, eq  // eq = none
    5b50:	mov	x0, x23
    5b54:	bl	4df0 <mpc_ceil_log2@plt>
    5b58:	add	x23, x0, x23
    5b5c:	add	x0, sp, #0x30
    5b60:	mov	x1, x23
    5b64:	bl	4d50 <mpfr_set_prec@plt>
    5b68:	add	x0, sp, #0x30
    5b6c:	mov	w1, #0x3                   	// #3
    5b70:	bl	4b50 <mpfr_const_pi@plt>
    5b74:	add	x0, sp, #0x30
    5b78:	add	x1, sp, #0x30
    5b7c:	mov	w2, #0x3                   	// #3
    5b80:	mov	w3, #0x3                   	// #3
    5b84:	bl	4a90 <mpfr_mul_ui@plt>
    5b88:	sub	x1, x23, #0x1
    5b8c:	add	x0, sp, #0x30
    5b90:	mov	w2, #0x3                   	// #3
    5b94:	mov	w3, w22
    5b98:	mov	x4, x21
    5b9c:	bl	5550 <mpfr_can_round@plt>
    5ba0:	cbz	w0, 5b50 <mpc_acos@@Base+0x390>
    5ba4:	add	x1, sp, #0x30
    5ba8:	mov	w2, #0x2                   	// #2
    5bac:	mov	x0, x24
    5bb0:	mov	w3, w22
    5bb4:	bl	5430 <mpfr_div_2ui@plt>
    5bb8:	mov	w21, w0
    5bbc:	add	x0, sp, #0x30
    5bc0:	bl	4e40 <mpfr_clear@plt>
    5bc4:	ldr	w8, [x20, #40]
    5bc8:	add	x0, x24, #0x20
    5bcc:	cmp	w8, #0x0
    5bd0:	mov	w8, #0xffffffff            	// #-1
    5bd4:	cneg	w1, w8, lt  // lt = tstop
    5bd8:	bl	5230 <mpfr_set_inf@plt>
    5bdc:	cmp	w21, #0x0
    5be0:	b	58fc <mpc_acos@@Base+0x13c>
    5be4:	and	w1, w19, #0xf
    5be8:	mov	x0, x24
    5bec:	bl	4b50 <mpfr_const_pi@plt>
    5bf0:	b	5a08 <mpc_acos@@Base+0x248>
    5bf4:	ldp	q1, q0, [x20]
    5bf8:	add	x0, sp, #0x30
    5bfc:	add	x1, sp, #0x30
    5c00:	mov	w2, wzr
    5c04:	stp	q1, q0, [sp, #48]
    5c08:	bl	4c50 <mpfr_neg@plt>
    5c0c:	add	x0, x24, #0x20
    5c10:	asr	w2, w19, #4
    5c14:	tbnz	w22, #31, 5e08 <mpc_acos@@Base+0x648>
    5c18:	cmp	w2, #0x3
    5c1c:	mov	w8, #0x2                   	// #2
    5c20:	csel	w8, w8, w2, eq  // eq = none
    5c24:	cmp	w2, #0x2
    5c28:	mov	w9, #0x3                   	// #3
    5c2c:	csel	w2, w9, w8, eq  // eq = none
    5c30:	add	x1, sp, #0x30
    5c34:	bl	51f0 <mpfr_acosh@plt>
    5c38:	neg	w20, w0
    5c3c:	b	5e14 <mpc_acos@@Base+0x654>
    5c40:	ldr	w8, [x20, #40]
    5c44:	cmp	w8, #0x0
    5c48:	mov	w8, #0x2                   	// #2
    5c4c:	cinc	w8, w8, gt
    5c50:	add	x0, sp, #0x10
    5c54:	mov	x1, x22
    5c58:	lsl	w23, w8, #4
    5c5c:	bl	5540 <mpfr_init2@plt>
    5c60:	add	x8, sp, #0x30
    5c64:	tst	w19, #0xf
    5c68:	mov	x21, #0x2                   	// #2
    5c6c:	mov	w28, wzr
    5c70:	movk	x21, #0x8000, lsl #48
    5c74:	add	x24, x8, #0x20
    5c78:	cinc	x25, x22, eq  // eq = none
    5c7c:	str	w19, [sp, #4]
    5c80:	cmp	w28, #0x1
    5c84:	b.hi	5c98 <mpc_acos@@Base+0x4d8>  // b.pmore
    5c88:	mov	x0, x22
    5c8c:	bl	4df0 <mpc_ceil_log2@plt>
    5c90:	add	x8, x0, #0x3
    5c94:	b	5ca4 <mpc_acos@@Base+0x4e4>
    5c98:	cmp	x22, #0x0
    5c9c:	cinc	x8, x22, lt  // lt = tstop
    5ca0:	asr	x8, x8, #1
    5ca4:	add	x22, x8, x22
    5ca8:	add	x0, sp, #0x30
    5cac:	mov	x1, x22
    5cb0:	bl	4d50 <mpfr_set_prec@plt>
    5cb4:	add	x0, sp, #0x10
    5cb8:	mov	x1, x22
    5cbc:	bl	4d50 <mpfr_set_prec@plt>
    5cc0:	add	x0, sp, #0x10
    5cc4:	mov	w1, #0x1                   	// #1
    5cc8:	mov	w2, wzr
    5ccc:	bl	5500 <set_pi_over_2@plt>
    5cd0:	add	x0, sp, #0x30
    5cd4:	mov	x1, x20
    5cd8:	mov	w2, w23
    5cdc:	bl	5580 <mpc_asin@plt>
    5ce0:	ldr	x8, [sp, #96]
    5ce4:	mov	w26, w0
    5ce8:	cmp	x8, x21
    5cec:	b.gt	5d04 <mpc_acos@@Base+0x544>
    5cf0:	cmp	x8, x27
    5cf4:	b.ne	5cfc <mpc_acos@@Base+0x53c>  // b.any
    5cf8:	bl	4bd0 <mpfr_set_erangeflag@plt>
    5cfc:	mov	w19, wzr
    5d00:	b	5d08 <mpc_acos@@Base+0x548>
    5d04:	ldr	w19, [sp, #88]
    5d08:	ldr	x8, [x20, #48]
    5d0c:	cmp	x8, x21
    5d10:	b.gt	5d28 <mpc_acos@@Base+0x568>
    5d14:	cmp	x8, x27
    5d18:	b.ne	5d20 <mpc_acos@@Base+0x560>  // b.any
    5d1c:	bl	4bd0 <mpfr_set_erangeflag@plt>
    5d20:	mov	w8, wzr
    5d24:	b	5d2c <mpc_acos@@Base+0x56c>
    5d28:	ldr	w8, [x20, #40]
    5d2c:	mul	w8, w8, w19
    5d30:	cmp	w8, #0x0
    5d34:	b.le	5e2c <mpc_acos@@Base+0x66c>
    5d38:	ldr	x19, [sp, #64]
    5d3c:	add	x0, sp, #0x30
    5d40:	add	x1, sp, #0x10
    5d44:	add	x2, sp, #0x30
    5d48:	mov	w3, wzr
    5d4c:	add	w28, w28, #0x1
    5d50:	bl	4b30 <mpfr_sub@plt>
    5d54:	ldr	x8, [sp, #64]
    5d58:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    5d5c:	cmp	x8, x9
    5d60:	b.eq	5c80 <mpc_acos@@Base+0x4c0>  // b.none
    5d64:	cmp	x19, #0x2
    5d68:	mov	w9, #0x2                   	// #2
    5d6c:	csinc	x9, x9, x19, lt  // lt = tstop
    5d70:	sub	x8, x9, x8
    5d74:	mov	x0, x24
    5d78:	mov	x1, x24
    5d7c:	mov	w2, wzr
    5d80:	bic	x19, x8, x8, asr #63
    5d84:	bl	4c50 <mpfr_neg@plt>
    5d88:	sub	x1, x22, x19
    5d8c:	add	x0, sp, #0x30
    5d90:	mov	w3, #0x1                   	// #1
    5d94:	mov	w2, wzr
    5d98:	mov	x4, x25
    5d9c:	bl	5550 <mpfr_can_round@plt>
    5da0:	cbz	w0, 5c80 <mpc_acos@@Base+0x4c0>
    5da4:	ldr	x0, [sp, #8]
    5da8:	ldr	w2, [sp, #4]
    5dac:	asr	w8, w26, #2
    5db0:	cmp	w8, #0x0
    5db4:	cset	w9, ne  // ne = any
    5db8:	cmp	w8, #0x2
    5dbc:	add	x1, sp, #0x30
    5dc0:	csinv	w19, w9, wzr, ne  // ne = any
    5dc4:	bl	5680 <mpc_set@plt>
    5dc8:	and	w20, w0, #0x3
    5dcc:	tst	w0, #0x3
    5dd0:	add	x0, sp, #0x30
    5dd4:	cset	w21, ne  // ne = any
    5dd8:	bl	4ae0 <mpc_clear@plt>
    5ddc:	add	x0, sp, #0x10
    5de0:	bl	4e40 <mpfr_clear@plt>
    5de4:	cmp	w20, #0x2
    5de8:	csel	w8, w20, w21, eq  // eq = none
    5dec:	cmp	w19, #0x0
    5df0:	cset	w9, ne  // ne = any
    5df4:	lsl	w9, w9, #2
    5df8:	mov	w10, #0x8                   	// #8
    5dfc:	csel	w9, w10, w9, gt
    5e00:	orr	w0, w8, w9
    5e04:	b	5908 <mpc_acos@@Base+0x148>
    5e08:	add	x1, sp, #0x30
    5e0c:	bl	51f0 <mpfr_acosh@plt>
    5e10:	mov	w20, w0
    5e14:	and	w1, w19, #0xf
    5e18:	mov	x0, x24
    5e1c:	bl	4b50 <mpfr_const_pi@plt>
    5e20:	mov	w21, w0
    5e24:	tbz	w22, #31, 5b00 <mpc_acos@@Base+0x340>
    5e28:	b	5b10 <mpc_acos@@Base+0x350>
    5e2c:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    5e30:	ldr	x8, [x8, #4008]
    5e34:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    5e38:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    5e3c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    5e40:	ldr	x0, [x8]
    5e44:	add	x1, x1, #0xba0
    5e48:	add	x2, x2, #0xbc1
    5e4c:	add	x4, x4, #0xbc8
    5e50:	mov	w3, #0xca                  	// #202
    5e54:	bl	56a0 <fprintf@plt>
    5e58:	bl	5110 <abort@plt>

0000000000005e5c <mpc_acosh@@Base>:
    5e5c:	sub	sp, sp, #0x90
    5e60:	stp	x29, x30, [sp, #96]
    5e64:	stp	x22, x21, [sp, #112]
    5e68:	stp	x20, x19, [sp, #128]
    5e6c:	ldr	x8, [x1, #16]
    5e70:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    5e74:	mov	w19, w2
    5e78:	mov	x21, x1
    5e7c:	cmp	x8, x9
    5e80:	mov	x20, x0
    5e84:	add	x29, sp, #0x60
    5e88:	b.ne	5eb8 <mpc_acosh@@Base+0x5c>  // b.any
    5e8c:	ldr	x8, [x21, #48]
    5e90:	mov	x9, #0x2                   	// #2
    5e94:	movk	x9, #0x8000, lsl #48
    5e98:	cmp	x8, x9
    5e9c:	b.ne	5eb8 <mpc_acosh@@Base+0x5c>  // b.any
    5ea0:	mov	x0, x20
    5ea4:	bl	4b10 <mpfr_set_nan@plt>
    5ea8:	add	x0, x20, #0x20
    5eac:	bl	4b10 <mpfr_set_nan@plt>
    5eb0:	mov	w21, wzr
    5eb4:	b	6004 <mpc_acosh@@Base+0x1a8>
    5eb8:	ldr	x1, [x20, #32]
    5ebc:	ldr	x2, [x20]
    5ec0:	add	x0, sp, #0x20
    5ec4:	add	x22, sp, #0x20
    5ec8:	bl	54d0 <mpc_init3@plt>
    5ecc:	ldr	w9, [x21, #40]
    5ed0:	asr	w8, w19, #4
    5ed4:	tbnz	w9, #31, 5f68 <mpc_acosh@@Base+0x10c>
    5ed8:	and	w9, w19, #0xf
    5edc:	mov	w10, #0x20                  	// #32
    5ee0:	lsl	w11, w9, #4
    5ee4:	cmp	w9, #0x3
    5ee8:	csel	w10, w10, w11, eq  // eq = none
    5eec:	cmp	w9, #0x2
    5ef0:	mov	w9, #0x30                  	// #48
    5ef4:	csel	w9, w9, w10, eq  // eq = none
    5ef8:	add	w2, w9, w8
    5efc:	add	x0, sp, #0x20
    5f00:	mov	x1, x21
    5f04:	bl	5180 <mpc_acos@plt>
    5f08:	ldp	q0, q1, [sp, #32]
    5f0c:	ldp	q2, q3, [sp, #64]
    5f10:	mov	w21, w0
    5f14:	add	x0, sp, #0x20
    5f18:	add	x1, sp, #0x20
    5f1c:	mov	w2, wzr
    5f20:	stp	q0, q1, [sp]
    5f24:	stp	q2, q3, [sp, #32]
    5f28:	stp	q0, q1, [sp, #64]
    5f2c:	bl	4c50 <mpfr_neg@plt>
    5f30:	asr	w8, w21, #2
    5f34:	cmp	w8, #0x0
    5f38:	mov	w9, #0x2                   	// #2
    5f3c:	cset	w11, ne  // ne = any
    5f40:	tst	w8, #0xfffffffd
    5f44:	csel	w8, w11, w9, eq  // eq = none
    5f48:	tst	w21, #0x3
    5f4c:	and	w10, w21, #0x3
    5f50:	cset	w9, ne  // ne = any
    5f54:	cmp	w10, #0x2
    5f58:	lsl	w9, w9, #2
    5f5c:	mov	w10, #0x8                   	// #8
    5f60:	csel	w9, w10, w9, eq  // eq = none
    5f64:	b	5fe8 <mpc_acosh@@Base+0x18c>
    5f68:	cmp	w8, #0x3
    5f6c:	mov	w9, #0x2                   	// #2
    5f70:	mov	w10, #0x3                   	// #3
    5f74:	csel	w9, w9, w8, eq  // eq = none
    5f78:	cmp	w8, #0x2
    5f7c:	csel	w8, w10, w9, eq  // eq = none
    5f80:	ubfiz	w9, w19, #4, #4
    5f84:	add	w2, w8, w9
    5f88:	add	x0, sp, #0x20
    5f8c:	mov	x1, x21
    5f90:	bl	5180 <mpc_acos@plt>
    5f94:	ldp	q0, q1, [sp, #32]
    5f98:	ldp	q2, q3, [sp, #64]
    5f9c:	mov	w21, w0
    5fa0:	add	x0, x22, #0x20
    5fa4:	mov	x1, x0
    5fa8:	mov	w2, wzr
    5fac:	stp	q0, q1, [sp]
    5fb0:	stp	q2, q3, [sp, #32]
    5fb4:	stp	q0, q1, [sp, #64]
    5fb8:	bl	4c50 <mpfr_neg@plt>
    5fbc:	asr	w8, w21, #2
    5fc0:	cmp	w8, #0x0
    5fc4:	cset	w9, ne  // ne = any
    5fc8:	cmp	w8, #0x2
    5fcc:	csel	w8, w8, w9, eq  // eq = none
    5fd0:	tst	w21, #0x3
    5fd4:	cset	w9, ne  // ne = any
    5fd8:	tst	w21, #0x1
    5fdc:	lsl	w9, w9, #2
    5fe0:	mov	w10, #0x8                   	// #8
    5fe4:	csel	w9, w9, w10, eq  // eq = none
    5fe8:	add	x1, sp, #0x20
    5fec:	mov	x0, x20
    5ff0:	mov	w2, w19
    5ff4:	orr	w21, w8, w9
    5ff8:	bl	5680 <mpc_set@plt>
    5ffc:	add	x0, sp, #0x20
    6000:	bl	4ae0 <mpc_clear@plt>
    6004:	mov	w0, w21
    6008:	ldp	x20, x19, [sp, #128]
    600c:	ldp	x22, x21, [sp, #112]
    6010:	ldp	x29, x30, [sp, #96]
    6014:	add	sp, sp, #0x90
    6018:	ret

000000000000601c <mpc_add@@Base>:
    601c:	stp	x29, x30, [sp, #-64]!
    6020:	stp	x20, x19, [sp, #48]
    6024:	mov	w19, w3
    6028:	and	w3, w3, #0xf
    602c:	str	x23, [sp, #16]
    6030:	stp	x22, x21, [sp, #32]
    6034:	mov	x29, sp
    6038:	mov	x20, x2
    603c:	mov	x21, x1
    6040:	mov	x22, x0
    6044:	bl	4f60 <mpfr_add@plt>
    6048:	mov	w23, w0
    604c:	add	x0, x22, #0x20
    6050:	add	x1, x21, #0x20
    6054:	add	x2, x20, #0x20
    6058:	asr	w3, w19, #4
    605c:	bl	4f60 <mpfr_add@plt>
    6060:	cmp	w23, #0x0
    6064:	mov	w8, #0x2                   	// #2
    6068:	cset	w9, ne  // ne = any
    606c:	csel	w8, w8, w9, lt  // lt = tstop
    6070:	cmp	w0, #0x0
    6074:	cset	w9, ne  // ne = any
    6078:	ldp	x20, x19, [sp, #48]
    607c:	ldp	x22, x21, [sp, #32]
    6080:	ldr	x23, [sp, #16]
    6084:	lsl	w9, w9, #2
    6088:	mov	w10, #0x8                   	// #8
    608c:	csel	w9, w10, w9, lt  // lt = tstop
    6090:	orr	w0, w9, w8
    6094:	ldp	x29, x30, [sp], #64
    6098:	ret

000000000000609c <mpc_add_fr@@Base>:
    609c:	stp	x29, x30, [sp, #-48]!
    60a0:	stp	x20, x19, [sp, #32]
    60a4:	mov	w19, w3
    60a8:	and	w3, w3, #0xf
    60ac:	stp	x22, x21, [sp, #16]
    60b0:	mov	x29, sp
    60b4:	mov	x20, x1
    60b8:	mov	x21, x0
    60bc:	bl	4f60 <mpfr_add@plt>
    60c0:	ldr	w3, [x20, #40]
    60c4:	mov	w22, w0
    60c8:	add	x0, x21, #0x20
    60cc:	add	x1, x20, #0x20
    60d0:	asr	w2, w19, #4
    60d4:	bl	52e0 <mpfr_set4@plt>
    60d8:	cmp	w22, #0x0
    60dc:	mov	w8, #0x2                   	// #2
    60e0:	cset	w9, ne  // ne = any
    60e4:	csel	w8, w8, w9, lt  // lt = tstop
    60e8:	cmp	w0, #0x0
    60ec:	cset	w9, ne  // ne = any
    60f0:	ldp	x20, x19, [sp, #32]
    60f4:	ldp	x22, x21, [sp, #16]
    60f8:	lsl	w9, w9, #2
    60fc:	mov	w10, #0x8                   	// #8
    6100:	csel	w9, w10, w9, lt  // lt = tstop
    6104:	orr	w0, w9, w8
    6108:	ldp	x29, x30, [sp], #48
    610c:	ret

0000000000006110 <mpc_add_si@@Base>:
    6110:	stp	x29, x30, [sp, #-48]!
    6114:	stp	x20, x19, [sp, #32]
    6118:	mov	w19, w3
    611c:	and	w3, w3, #0xf
    6120:	stp	x22, x21, [sp, #16]
    6124:	mov	x29, sp
    6128:	mov	x20, x1
    612c:	mov	x21, x0
    6130:	bl	5370 <mpfr_add_si@plt>
    6134:	ldr	w3, [x20, #40]
    6138:	mov	w22, w0
    613c:	add	x0, x21, #0x20
    6140:	add	x1, x20, #0x20
    6144:	asr	w2, w19, #4
    6148:	bl	52e0 <mpfr_set4@plt>
    614c:	cmp	w22, #0x0
    6150:	mov	w8, #0x2                   	// #2
    6154:	cset	w9, ne  // ne = any
    6158:	csel	w8, w8, w9, lt  // lt = tstop
    615c:	cmp	w0, #0x0
    6160:	cset	w9, ne  // ne = any
    6164:	ldp	x20, x19, [sp, #32]
    6168:	ldp	x22, x21, [sp, #16]
    616c:	lsl	w9, w9, #2
    6170:	mov	w10, #0x8                   	// #8
    6174:	csel	w9, w10, w9, lt  // lt = tstop
    6178:	orr	w0, w9, w8
    617c:	ldp	x29, x30, [sp], #48
    6180:	ret

0000000000006184 <mpc_add_ui@@Base>:
    6184:	stp	x29, x30, [sp, #-48]!
    6188:	stp	x20, x19, [sp, #32]
    618c:	mov	w19, w3
    6190:	and	w3, w3, #0xf
    6194:	stp	x22, x21, [sp, #16]
    6198:	mov	x29, sp
    619c:	mov	x20, x1
    61a0:	mov	x21, x0
    61a4:	bl	4ff0 <mpfr_add_ui@plt>
    61a8:	ldr	w3, [x20, #40]
    61ac:	mov	w22, w0
    61b0:	add	x0, x21, #0x20
    61b4:	add	x1, x20, #0x20
    61b8:	asr	w2, w19, #4
    61bc:	bl	52e0 <mpfr_set4@plt>
    61c0:	cmp	w22, #0x0
    61c4:	mov	w8, #0x2                   	// #2
    61c8:	cset	w9, ne  // ne = any
    61cc:	csel	w8, w8, w9, lt  // lt = tstop
    61d0:	cmp	w0, #0x0
    61d4:	cset	w9, ne  // ne = any
    61d8:	ldp	x20, x19, [sp, #32]
    61dc:	ldp	x22, x21, [sp, #16]
    61e0:	lsl	w9, w9, #2
    61e4:	mov	w10, #0x8                   	// #8
    61e8:	csel	w9, w10, w9, lt  // lt = tstop
    61ec:	orr	w0, w9, w8
    61f0:	ldp	x29, x30, [sp], #48
    61f4:	ret

00000000000061f8 <mpc_arg@@Base>:
    61f8:	stp	x29, x30, [sp, #-16]!
    61fc:	mov	w3, w2
    6200:	mov	x2, x1
    6204:	add	x1, x1, #0x20
    6208:	mov	x29, sp
    620c:	bl	4d70 <mpfr_atan2@plt>
    6210:	ldp	x29, x30, [sp], #16
    6214:	ret

0000000000006218 <mpc_asin@@Base>:
    6218:	sub	sp, sp, #0xc0
    621c:	stp	x29, x30, [sp, #96]
    6220:	stp	x28, x27, [sp, #112]
    6224:	stp	x26, x25, [sp, #128]
    6228:	stp	x24, x23, [sp, #144]
    622c:	stp	x22, x21, [sp, #160]
    6230:	stp	x20, x19, [sp, #176]
    6234:	ldr	x8, [x1, #16]
    6238:	mov	x9, #0x2                   	// #2
    623c:	movk	x9, #0x8000, lsl #48
    6240:	mov	x20, x1
    6244:	cmp	x8, x9
    6248:	mov	x19, x0
    624c:	add	x29, sp, #0x60
    6250:	b.eq	626c <mpc_asin@@Base+0x54>  // b.none
    6254:	ldr	x22, [x20, #48]
    6258:	cmp	x22, x9
    625c:	b.ne	62c8 <mpc_asin@@Base+0xb0>  // b.any
    6260:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    6264:	cmp	x8, x9
    6268:	b.eq	627c <mpc_asin@@Base+0x64>  // b.none
    626c:	ldr	x9, [x20, #48]
    6270:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    6274:	cmp	x9, x10
    6278:	b.ne	62a4 <mpc_asin@@Base+0x8c>  // b.any
    627c:	mov	x0, x19
    6280:	bl	4b10 <mpfr_set_nan@plt>
    6284:	ldr	w8, [x20, #40]
    6288:	add	x0, x19, #0x20
    628c:	cmp	w8, #0x0
    6290:	mov	w8, #0x1                   	// #1
    6294:	cneg	w1, w8, lt  // lt = tstop
    6298:	bl	5230 <mpfr_set_inf@plt>
    629c:	mov	w19, wzr
    62a0:	b	6768 <mpc_asin@@Base+0x550>
    62a4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    62a8:	cmp	x8, x9
    62ac:	b.ne	6324 <mpc_asin@@Base+0x10c>  // b.any
    62b0:	ldr	w3, [x20, #8]
    62b4:	mov	x0, x19
    62b8:	mov	x1, x20
    62bc:	mov	w2, wzr
    62c0:	bl	52e0 <mpfr_set4@plt>
    62c4:	b	632c <mpc_asin@@Base+0x114>
    62c8:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    62cc:	mov	w26, w2
    62d0:	cmp	x8, x9
    62d4:	b.eq	633c <mpc_asin@@Base+0x124>  // b.none
    62d8:	cmp	x22, x9
    62dc:	b.eq	633c <mpc_asin@@Base+0x124>  // b.none
    62e0:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    62e4:	cmp	x22, x9
    62e8:	b.ne	639c <mpc_asin@@Base+0x184>  // b.any
    62ec:	ldr	w23, [x20, #40]
    62f0:	mov	w1, #0x1                   	// #1
    62f4:	mov	x0, x20
    62f8:	mov	x2, xzr
    62fc:	bl	4d80 <mpfr_cmp_ui_2exp@plt>
    6300:	cmp	w0, #0x1
    6304:	b.lt	6694 <mpc_asin@@Base+0x47c>  // b.tstop
    6308:	add	x0, x19, #0x20
    630c:	asr	w2, w26, #4
    6310:	tbnz	w23, #31, 66e8 <mpc_asin@@Base+0x4d0>
    6314:	mov	x1, x20
    6318:	bl	51f0 <mpfr_acosh@plt>
    631c:	mov	w22, w0
    6320:	b	670c <mpc_asin@@Base+0x4f4>
    6324:	mov	x0, x19
    6328:	bl	4b10 <mpfr_set_nan@plt>
    632c:	add	x0, x19, #0x20
    6330:	bl	4b10 <mpfr_set_nan@plt>
    6334:	mov	w19, wzr
    6338:	b	6768 <mpc_asin@@Base+0x550>
    633c:	ldr	w10, [x20, #8]
    6340:	mov	w23, #0x1                   	// #1
    6344:	cmp	w10, #0x0
    6348:	cneg	w1, w23, lt  // lt = tstop
    634c:	cmp	x8, x9
    6350:	b.ne	63f8 <mpc_asin@@Base+0x1e0>  // b.any
    6354:	and	w2, w26, #0xf
    6358:	mov	x0, x19
    635c:	bl	5500 <set_pi_over_2@plt>
    6360:	ldr	w8, [x20, #40]
    6364:	mov	w21, w0
    6368:	add	x0, x19, #0x20
    636c:	cmp	w8, #0x0
    6370:	cneg	w1, w23, lt  // lt = tstop
    6374:	bl	5230 <mpfr_set_inf@plt>
    6378:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    637c:	cmp	x22, x8
    6380:	b.ne	6418 <mpc_asin@@Base+0x200>  // b.any
    6384:	mov	w2, #0x1                   	// #1
    6388:	mov	x0, x19
    638c:	mov	x1, x19
    6390:	mov	w3, wzr
    6394:	bl	5430 <mpfr_div_2ui@plt>
    6398:	b	6418 <mpc_asin@@Base+0x200>
    639c:	cmp	x8, x9
    63a0:	add	x22, x20, #0x20
    63a4:	b.ne	642c <mpc_asin@@Base+0x214>  // b.any
    63a8:	ldr	w8, [x20, #8]
    63ac:	mov	w9, #0x1                   	// #1
    63b0:	str	w9, [x19, #8]
    63b4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    63b8:	str	x9, [x19, #16]
    63bc:	tbz	w8, #31, 63d0 <mpc_asin@@Base+0x1b8>
    63c0:	mov	x0, x19
    63c4:	mov	x1, x19
    63c8:	mov	w2, wzr
    63cc:	bl	4c50 <mpfr_neg@plt>
    63d0:	add	x0, x19, #0x20
    63d4:	asr	w2, w26, #4
    63d8:	mov	x1, x22
    63dc:	bl	4eb0 <mpfr_asinh@plt>
    63e0:	cmp	w0, #0x0
    63e4:	cset	w8, ne  // ne = any
    63e8:	lsl	w8, w8, #2
    63ec:	mov	w9, #0x8                   	// #8
    63f0:	csel	w19, w9, w8, lt  // lt = tstop
    63f4:	b	6768 <mpc_asin@@Base+0x550>
    63f8:	mov	x0, x19
    63fc:	bl	4de0 <mpfr_set_zero@plt>
    6400:	ldr	w8, [x20, #40]
    6404:	add	x0, x19, #0x20
    6408:	cmp	w8, #0x0
    640c:	cneg	w1, w23, lt  // lt = tstop
    6410:	bl	5230 <mpfr_set_inf@plt>
    6414:	mov	w21, wzr
    6418:	cmp	w21, #0x0
    641c:	cset	w8, ne  // ne = any
    6420:	mov	w9, #0x2                   	// #2
    6424:	csel	w19, w9, w8, lt  // lt = tstop
    6428:	b	6768 <mpc_asin@@Base+0x550>
    642c:	ldr	x21, [x19]
    6430:	ldr	x25, [x19, #32]
    6434:	add	x0, sp, #0x20
    6438:	add	x24, sp, #0x20
    643c:	cmp	x21, x25
    6440:	csel	x23, x25, x21, lt  // lt = tstop
    6444:	mov	x1, x23
    6448:	bl	4dc0 <mpc_init2@plt>
    644c:	cmp	w26, #0x10
    6450:	cinc	x8, x25, cc  // cc = lo, ul, last
    6454:	tst	w26, #0xf
    6458:	mov	w28, wzr
    645c:	add	x24, x24, #0x20
    6460:	str	x8, [sp, #8]
    6464:	cinc	x8, x21, eq  // eq = none
    6468:	str	w26, [sp, #28]
    646c:	str	x8, [sp, #16]
    6470:	cmp	w28, #0x1
    6474:	b.hi	6488 <mpc_asin@@Base+0x270>  // b.pmore
    6478:	mov	x0, x23
    647c:	bl	4df0 <mpc_ceil_log2@plt>
    6480:	add	x8, x0, #0x3
    6484:	b	6494 <mpc_asin@@Base+0x27c>
    6488:	cmp	x23, #0x0
    648c:	cinc	x8, x23, lt  // lt = tstop
    6490:	asr	x8, x8, #1
    6494:	add	x23, x8, x23
    6498:	add	x0, sp, #0x20
    649c:	mov	x1, x23
    64a0:	bl	4d50 <mpfr_set_prec@plt>
    64a4:	mov	x0, x24
    64a8:	mov	x1, x23
    64ac:	bl	4d50 <mpfr_set_prec@plt>
    64b0:	cbnz	w28, 64cc <mpc_asin@@Base+0x2b4>
    64b4:	ldr	w2, [sp, #28]
    64b8:	add	x3, sp, #0x20
    64bc:	mov	x0, x19
    64c0:	mov	x1, x20
    64c4:	bl	67d8 <mpc_asin@@Base+0x5c0>
    64c8:	cbnz	w0, 6674 <mpc_asin@@Base+0x45c>
    64cc:	add	x0, sp, #0x20
    64d0:	mov	x1, x20
    64d4:	mov	w2, wzr
    64d8:	add	w28, w28, #0x1
    64dc:	bl	5040 <mpc_sqr@plt>
    64e0:	ldr	x21, [sp, #48]
    64e4:	add	x0, sp, #0x20
    64e8:	add	x2, sp, #0x20
    64ec:	mov	w1, #0x1                   	// #1
    64f0:	mov	w3, wzr
    64f4:	bl	5530 <mpfr_ui_sub@plt>
    64f8:	mov	x0, x24
    64fc:	mov	x1, x24
    6500:	mov	w2, wzr
    6504:	bl	4c50 <mpfr_neg@plt>
    6508:	ldr	x8, [sp, #48]
    650c:	ldr	x9, [sp, #80]
    6510:	mvn	x10, x23
    6514:	add	x0, sp, #0x20
    6518:	cmp	x21, x8
    651c:	csel	x11, x21, x8, gt
    6520:	add	x10, x9, x10
    6524:	sub	x11, x11, x23
    6528:	cmp	x11, x10
    652c:	csel	x21, x10, x11, lt  // lt = tstop
    6530:	cmp	x8, x9
    6534:	add	x1, sp, #0x20
    6538:	mov	w2, wzr
    653c:	csel	x25, x9, x8, lt  // lt = tstop
    6540:	bl	4c10 <mpc_sqrt@plt>
    6544:	mov	w8, #0x1                   	// #1
    6548:	ldr	x27, [sp, #48]
    654c:	ldr	x26, [sp, #80]
    6550:	bfi	x8, x21, #1, #63
    6554:	sub	x8, x8, x25
    6558:	cmp	x8, #0x0
    655c:	cinc	x8, x8, lt  // lt = tstop
    6560:	cmp	x27, x26
    6564:	asr	x8, x8, #1
    6568:	csel	x9, x26, x27, gt
    656c:	sub	x8, x8, x9
    6570:	add	x8, x8, x23
    6574:	cmp	x8, #0x1
    6578:	mov	w9, #0x1                   	// #1
    657c:	add	x0, sp, #0x20
    6580:	add	x1, sp, #0x20
    6584:	mov	x2, x22
    6588:	mov	w3, wzr
    658c:	csinc	x21, x9, x8, lt  // lt = tstop
    6590:	bl	4b30 <mpfr_sub@plt>
    6594:	mov	x0, x24
    6598:	mov	x1, x24
    659c:	mov	x2, x20
    65a0:	mov	w3, wzr
    65a4:	bl	4f60 <mpfr_add@plt>
    65a8:	add	x0, sp, #0x20
    65ac:	bl	5300 <mpfr_sgn@plt>
    65b0:	cbz	w0, 6470 <mpc_asin@@Base+0x258>
    65b4:	mov	x0, x24
    65b8:	bl	5300 <mpfr_sgn@plt>
    65bc:	cbz	w0, 6470 <mpc_asin@@Base+0x258>
    65c0:	ldr	x8, [sp, #48]
    65c4:	ldr	x9, [sp, #80]
    65c8:	add	x0, sp, #0x20
    65cc:	add	x1, sp, #0x20
    65d0:	sub	x8, x27, x8
    65d4:	sub	x9, x26, x9
    65d8:	cmp	x8, x9
    65dc:	csel	x8, x9, x8, lt  // lt = tstop
    65e0:	add	x8, x8, x21
    65e4:	cmp	x8, #0x1
    65e8:	mov	w9, #0x1                   	// #1
    65ec:	mov	w2, wzr
    65f0:	csinc	x21, x9, x8, lt  // lt = tstop
    65f4:	bl	4ea0 <mpc_log@plt>
    65f8:	ldr	x8, [sp, #48]
    65fc:	ldr	x9, [sp, #80]
    6600:	add	x0, sp, #0x20
    6604:	mov	x1, x24
    6608:	cmp	x8, x9
    660c:	csel	x8, x9, x8, gt
    6610:	sub	x8, x21, x8
    6614:	add	x9, x8, #0x1
    6618:	add	x8, x8, #0x2
    661c:	cmp	x9, #0x1
    6620:	csinc	x21, x8, xzr, ge  // ge = tcont
    6624:	bl	51a0 <mpfr_swap@plt>
    6628:	mov	x0, x24
    662c:	mov	x1, x24
    6630:	mov	w2, wzr
    6634:	bl	4c50 <mpfr_neg@plt>
    6638:	ldr	x4, [sp, #16]
    663c:	sub	x27, x23, x21
    6640:	add	x0, sp, #0x20
    6644:	mov	w3, #0x1                   	// #1
    6648:	mov	x1, x27
    664c:	mov	w2, wzr
    6650:	bl	5550 <mpfr_can_round@plt>
    6654:	cbz	w0, 6470 <mpc_asin@@Base+0x258>
    6658:	ldr	x4, [sp, #8]
    665c:	mov	w3, #0x1                   	// #1
    6660:	mov	x0, x24
    6664:	mov	x1, x27
    6668:	mov	w2, wzr
    666c:	bl	5550 <mpfr_can_round@plt>
    6670:	cbz	w0, 6470 <mpc_asin@@Base+0x258>
    6674:	ldr	w2, [sp, #28]
    6678:	add	x1, sp, #0x20
    667c:	mov	x0, x19
    6680:	bl	5680 <mpc_set@plt>
    6684:	mov	w19, w0
    6688:	add	x0, sp, #0x20
    668c:	bl	4ae0 <mpc_clear@plt>
    6690:	b	6768 <mpc_asin@@Base+0x550>
    6694:	mov	x1, #0xffffffffffffffff    	// #-1
    6698:	mov	x0, x20
    669c:	mov	x2, xzr
    66a0:	bl	50f0 <mpfr_cmp_si_2exp@plt>
    66a4:	tbnz	w0, #31, 678c <mpc_asin@@Base+0x574>
    66a8:	mov	w8, #0x1                   	// #1
    66ac:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    66b0:	str	w8, [x19, #40]
    66b4:	str	x9, [x19, #48]
    66b8:	tbz	w23, #31, 66cc <mpc_asin@@Base+0x4b4>
    66bc:	add	x0, x19, #0x20
    66c0:	mov	x1, x0
    66c4:	mov	w2, wzr
    66c8:	bl	4c50 <mpfr_neg@plt>
    66cc:	and	w2, w26, #0xf
    66d0:	mov	x0, x19
    66d4:	mov	x1, x20
    66d8:	bl	4f40 <mpfr_asin@plt>
    66dc:	mov	w20, w0
    66e0:	mov	w22, wzr
    66e4:	b	6740 <mpc_asin@@Base+0x528>
    66e8:	cmp	w2, #0x3
    66ec:	mov	w8, #0x2                   	// #2
    66f0:	csel	w8, w8, w2, eq  // eq = none
    66f4:	cmp	w2, #0x2
    66f8:	mov	w9, #0x3                   	// #3
    66fc:	csel	w2, w9, w8, eq  // eq = none
    6700:	mov	x1, x20
    6704:	bl	51f0 <mpfr_acosh@plt>
    6708:	neg	w22, w0
    670c:	ldr	w8, [x20, #8]
    6710:	mov	w9, #0x1                   	// #1
    6714:	and	w2, w26, #0xf
    6718:	mov	x0, x19
    671c:	cmp	w8, #0x0
    6720:	cneg	w1, w9, lt  // lt = tstop
    6724:	bl	5500 <set_pi_over_2@plt>
    6728:	mov	w20, w0
    672c:	tbz	w23, #31, 6740 <mpc_asin@@Base+0x528>
    6730:	mov	x0, x19
    6734:	mov	x1, x19
    6738:	mov	w2, wzr
    673c:	bl	5070 <mpc_conj@plt>
    6740:	cmp	w20, #0x0
    6744:	mov	w8, #0x2                   	// #2
    6748:	cset	w9, ne  // ne = any
    674c:	csel	w8, w8, w9, lt  // lt = tstop
    6750:	cmp	w22, #0x0
    6754:	cset	w9, ne  // ne = any
    6758:	lsl	w9, w9, #2
    675c:	mov	w10, #0x8                   	// #8
    6760:	csel	w9, w10, w9, lt  // lt = tstop
    6764:	orr	w19, w8, w9
    6768:	mov	w0, w19
    676c:	ldp	x20, x19, [sp, #176]
    6770:	ldp	x22, x21, [sp, #160]
    6774:	ldp	x24, x23, [sp, #144]
    6778:	ldp	x26, x25, [sp, #128]
    677c:	ldp	x28, x27, [sp, #112]
    6780:	ldp	x29, x30, [sp, #96]
    6784:	add	sp, sp, #0xc0
    6788:	ret
    678c:	ldp	q1, q0, [x20]
    6790:	add	x0, sp, #0x20
    6794:	add	x1, sp, #0x20
    6798:	mov	w2, wzr
    679c:	stp	q1, q0, [sp, #32]
    67a0:	bl	4c50 <mpfr_neg@plt>
    67a4:	add	x0, x19, #0x20
    67a8:	asr	w2, w26, #4
    67ac:	tbnz	w23, #31, 67b8 <mpc_asin@@Base+0x5a0>
    67b0:	add	x1, sp, #0x20
    67b4:	b	6318 <mpc_asin@@Base+0x100>
    67b8:	cmp	w2, #0x3
    67bc:	mov	w8, #0x2                   	// #2
    67c0:	csel	w8, w8, w2, eq  // eq = none
    67c4:	cmp	w2, #0x2
    67c8:	mov	w9, #0x3                   	// #3
    67cc:	csel	w2, w9, w8, eq  // eq = none
    67d0:	add	x1, sp, #0x20
    67d4:	b	6704 <mpc_asin@@Base+0x4ec>
    67d8:	sub	sp, sp, #0x60
    67dc:	stp	x29, x30, [sp, #32]
    67e0:	stp	x22, x21, [sp, #64]
    67e4:	stp	x20, x19, [sp, #80]
    67e8:	ldr	x8, [x1, #48]
    67ec:	str	x23, [sp, #48]
    67f0:	add	x29, sp, #0x20
    67f4:	tbz	x8, #63, 6814 <mpc_asin@@Base+0x5fc>
    67f8:	ldr	x9, [x3]
    67fc:	cmp	x8, #0x0
    6800:	cinc	x8, x8, lt  // lt = tstop
    6804:	neg	x8, x8, asr #1
    6808:	mov	x22, x3
    680c:	cmp	x8, x9
    6810:	b.ge	6830 <mpc_asin@@Base+0x618>  // b.tcont
    6814:	mov	w0, wzr
    6818:	ldp	x20, x19, [sp, #80]
    681c:	ldp	x22, x21, [sp, #64]
    6820:	ldr	x23, [sp, #48]
    6824:	ldp	x29, x30, [sp, #32]
    6828:	add	sp, sp, #0x60
    682c:	ret
    6830:	mov	x20, x1
    6834:	mov	x21, x0
    6838:	mov	x0, x22
    683c:	mov	w1, wzr
    6840:	mov	w19, w2
    6844:	bl	4b50 <mpfr_const_pi@plt>
    6848:	mov	w2, #0x1                   	// #1
    684c:	mov	x0, x22
    6850:	mov	x1, x22
    6854:	mov	w3, wzr
    6858:	bl	5430 <mpfr_div_2ui@plt>
    685c:	ldr	x8, [x21]
    6860:	ldr	x1, [x22]
    6864:	tst	w19, #0xf
    6868:	mov	w3, #0x1                   	// #1
    686c:	cinc	x4, x8, eq  // eq = none
    6870:	mov	x0, x22
    6874:	mov	w2, wzr
    6878:	bl	5550 <mpfr_can_round@plt>
    687c:	cbz	w0, 6818 <mpc_asin@@Base+0x600>
    6880:	add	x8, x20, #0x20
    6884:	ldp	q1, q0, [x8]
    6888:	stp	q1, q0, [sp]
    688c:	ldr	w8, [x20, #40]
    6890:	tbz	w8, #31, 68a4 <mpc_asin@@Base+0x68c>
    6894:	mov	x0, sp
    6898:	mov	x1, sp
    689c:	mov	w2, wzr
    68a0:	bl	4c50 <mpfr_neg@plt>
    68a4:	add	x22, x22, #0x20
    68a8:	mov	x1, sp
    68ac:	mov	x0, x22
    68b0:	mov	w2, wzr
    68b4:	bl	5460 <mpfr_sqrt@plt>
    68b8:	ldr	w8, [x20, #40]
    68bc:	mov	w23, w0
    68c0:	tbz	w8, #31, 68d4 <mpc_asin@@Base+0x6bc>
    68c4:	mov	x0, x22
    68c8:	mov	x1, x22
    68cc:	mov	w2, wzr
    68d0:	bl	4c50 <mpfr_neg@plt>
    68d4:	cbz	w23, 6908 <mpc_asin@@Base+0x6f0>
    68d8:	ldr	x8, [x22]
    68dc:	ldr	x9, [x21, #32]
    68e0:	cmp	w19, #0x10
    68e4:	mov	w2, #0x4                   	// #4
    68e8:	sub	x1, x8, #0x1
    68ec:	cinc	x4, x9, cc  // cc = lo, ul, last
    68f0:	mov	w3, #0x1                   	// #1
    68f4:	mov	x0, x22
    68f8:	bl	5550 <mpfr_can_round@plt>
    68fc:	cmp	w0, #0x0
    6900:	cset	w0, ne  // ne = any
    6904:	b	6818 <mpc_asin@@Base+0x600>
    6908:	ldr	w8, [x20, #40]
    690c:	tbnz	w8, #31, 691c <mpc_asin@@Base+0x704>
    6910:	mov	x0, x22
    6914:	bl	4ef0 <mpfr_nextabove@plt>
    6918:	b	6924 <mpc_asin@@Base+0x70c>
    691c:	mov	x0, x22
    6920:	bl	4c80 <mpfr_nextbelow@plt>
    6924:	mov	w0, #0x1                   	// #1
    6928:	b	6818 <mpc_asin@@Base+0x600>

000000000000692c <mpc_asinh@@Base>:
    692c:	sub	sp, sp, #0xd0
    6930:	stp	x29, x30, [sp, #160]
    6934:	str	x21, [sp, #176]
    6938:	stp	x20, x19, [sp, #192]
    693c:	ldp	q1, q0, [x1, #32]
    6940:	add	x29, sp, #0xa0
    6944:	mov	w19, w2
    6948:	mov	x20, x0
    694c:	stp	q1, q0, [x29, #-64]
    6950:	ldp	q1, q0, [x1]
    6954:	sub	x0, x29, #0x40
    6958:	sub	x1, x29, #0x40
    695c:	mov	w2, wzr
    6960:	stp	q1, q0, [x29, #-32]
    6964:	bl	4c50 <mpfr_neg@plt>
    6968:	ldr	x1, [x20, #32]
    696c:	ldr	x2, [x20]
    6970:	add	x0, sp, #0x20
    6974:	add	x21, sp, #0x20
    6978:	bl	54d0 <mpc_init3@plt>
    697c:	asr	w8, w19, #4
    6980:	mov	w9, #0x2                   	// #2
    6984:	cmp	w8, #0x3
    6988:	mov	w10, #0x3                   	// #3
    698c:	csel	w9, w9, w8, eq  // eq = none
    6990:	cmp	w8, #0x2
    6994:	csel	w8, w10, w9, eq  // eq = none
    6998:	ubfiz	w9, w19, #4, #4
    699c:	add	w2, w8, w9
    69a0:	add	x0, sp, #0x20
    69a4:	sub	x1, x29, #0x40
    69a8:	bl	5580 <mpc_asin@plt>
    69ac:	ldp	q0, q1, [sp, #32]
    69b0:	ldp	q2, q3, [sp, #64]
    69b4:	mov	w19, w0
    69b8:	add	x0, x21, #0x20
    69bc:	mov	x1, x0
    69c0:	mov	w2, wzr
    69c4:	stp	q0, q1, [sp]
    69c8:	stp	q2, q3, [sp, #32]
    69cc:	stp	q0, q1, [sp, #64]
    69d0:	bl	4c50 <mpfr_neg@plt>
    69d4:	add	x1, sp, #0x20
    69d8:	mov	x0, x20
    69dc:	mov	w2, wzr
    69e0:	bl	5680 <mpc_set@plt>
    69e4:	add	x0, sp, #0x20
    69e8:	bl	4ae0 <mpc_clear@plt>
    69ec:	asr	w8, w19, #2
    69f0:	cmp	w8, #0x0
    69f4:	cset	w9, ne  // ne = any
    69f8:	cmp	w8, #0x2
    69fc:	csel	w8, w8, w9, eq  // eq = none
    6a00:	tst	w19, #0x3
    6a04:	cset	w9, ne  // ne = any
    6a08:	tst	w19, #0x1
    6a0c:	ldp	x20, x19, [sp, #192]
    6a10:	ldr	x21, [sp, #176]
    6a14:	ldp	x29, x30, [sp, #160]
    6a18:	lsl	w9, w9, #2
    6a1c:	mov	w10, #0x8                   	// #8
    6a20:	csel	w9, w9, w10, eq  // eq = none
    6a24:	orr	w0, w8, w9
    6a28:	add	sp, sp, #0xd0
    6a2c:	ret

0000000000006a30 <set_pi_over_2@@Base>:
    6a30:	stp	x29, x30, [sp, #-48]!
    6a34:	stp	x20, x19, [sp, #32]
    6a38:	mov	w20, w1
    6a3c:	mov	x19, x0
    6a40:	str	x21, [sp, #16]
    6a44:	mov	x29, sp
    6a48:	tbz	w1, #31, 6a68 <set_pi_over_2@@Base+0x38>
    6a4c:	cmp	w2, #0x2
    6a50:	b.ne	6a5c <set_pi_over_2@@Base+0x2c>  // b.any
    6a54:	mov	w2, #0x3                   	// #3
    6a58:	b	6a68 <set_pi_over_2@@Base+0x38>
    6a5c:	cmp	w2, #0x3
    6a60:	mov	w8, #0x2                   	// #2
    6a64:	csel	w2, w8, w2, eq  // eq = none
    6a68:	mov	x0, x19
    6a6c:	mov	w1, w2
    6a70:	bl	4b50 <mpfr_const_pi@plt>
    6a74:	mov	w21, w0
    6a78:	mov	w2, #0x1                   	// #1
    6a7c:	mov	x0, x19
    6a80:	mov	x1, x19
    6a84:	mov	w3, wzr
    6a88:	bl	5430 <mpfr_div_2ui@plt>
    6a8c:	tbz	w20, #31, 6aa4 <set_pi_over_2@@Base+0x74>
    6a90:	mov	x0, x19
    6a94:	mov	x1, x19
    6a98:	mov	w2, wzr
    6a9c:	neg	w21, w21
    6aa0:	bl	4c50 <mpfr_neg@plt>
    6aa4:	mov	w0, w21
    6aa8:	ldp	x20, x19, [sp, #32]
    6aac:	ldr	x21, [sp, #16]
    6ab0:	ldp	x29, x30, [sp], #48
    6ab4:	ret

0000000000006ab8 <mpc_atan@@Base>:
    6ab8:	sub	sp, sp, #0x130
    6abc:	stp	x29, x30, [sp, #208]
    6ac0:	stp	x28, x27, [sp, #224]
    6ac4:	stp	x26, x25, [sp, #240]
    6ac8:	stp	x24, x23, [sp, #256]
    6acc:	stp	x22, x21, [sp, #272]
    6ad0:	stp	x20, x19, [sp, #288]
    6ad4:	ldr	x8, [x1, #16]
    6ad8:	ldr	w24, [x1, #40]
    6adc:	mov	x27, #0x2                   	// #2
    6ae0:	movk	x27, #0x8000, lsl #48
    6ae4:	mov	x22, x1
    6ae8:	cmp	x8, x27
    6aec:	mov	x19, x0
    6af0:	add	x29, sp, #0xd0
    6af4:	b.ne	6b3c <mpc_atan@@Base+0x84>  // b.any
    6af8:	mov	x0, x19
    6afc:	bl	4b10 <mpfr_set_nan@plt>
    6b00:	ldr	x8, [x22, #48]
    6b04:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    6b08:	orr	x8, x8, #0x2
    6b0c:	cmp	x8, x9
    6b10:	b.ne	6c18 <mpc_atan@@Base+0x160>  // b.any
    6b14:	mov	w8, #0x1                   	// #1
    6b18:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    6b1c:	str	w8, [x19, #40]
    6b20:	str	x9, [x19, #48]
    6b24:	tbz	w24, #31, 6c20 <mpc_atan@@Base+0x168>
    6b28:	mov	x0, x19
    6b2c:	mov	x1, x19
    6b30:	mov	w2, wzr
    6b34:	bl	5070 <mpc_conj@plt>
    6b38:	b	6c20 <mpc_atan@@Base+0x168>
    6b3c:	ldr	x9, [x22, #48]
    6b40:	ldr	w28, [x22, #8]
    6b44:	mov	w25, w2
    6b48:	cmp	x9, x27
    6b4c:	b.ne	6b88 <mpc_atan@@Base+0xd0>  // b.any
    6b50:	cmp	x8, x27
    6b54:	b.eq	6af8 <mpc_atan@@Base+0x40>  // b.none
    6b58:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    6b5c:	cmp	x8, x9
    6b60:	b.ne	6c10 <mpc_atan@@Base+0x158>  // b.any
    6b64:	asr	w1, w28, #31
    6b68:	and	w2, w25, #0xf
    6b6c:	mov	x0, x19
    6b70:	bl	5500 <set_pi_over_2@plt>
    6b74:	mov	w8, #0x1                   	// #1
    6b78:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    6b7c:	str	w8, [x19, #40]
    6b80:	str	x9, [x19, #48]
    6b84:	b	6c24 <mpc_atan@@Base+0x16c>
    6b88:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    6b8c:	cmp	x8, x10
    6b90:	b.eq	6bd0 <mpc_atan@@Base+0x118>  // b.none
    6b94:	cmp	x9, x10
    6b98:	b.eq	6bd0 <mpc_atan@@Base+0x118>  // b.none
    6b9c:	mov	x21, #0x8000000000000001    	// #-9223372036854775807
    6ba0:	cmp	x9, x21
    6ba4:	b.ne	6c58 <mpc_atan@@Base+0x1a0>  // b.any
    6ba8:	and	w2, w25, #0xf
    6bac:	mov	x0, x19
    6bb0:	mov	x1, x22
    6bb4:	bl	52c0 <mpfr_atan@plt>
    6bb8:	mov	w20, w0
    6bbc:	mov	w8, #0x1                   	// #1
    6bc0:	str	w8, [x19, #40]
    6bc4:	str	x21, [x19, #48]
    6bc8:	tbz	w24, #31, 6c08 <mpc_atan@@Base+0x150>
    6bcc:	b	6bf8 <mpc_atan@@Base+0x140>
    6bd0:	asr	w1, w28, #31
    6bd4:	and	w2, w25, #0xf
    6bd8:	mov	x0, x19
    6bdc:	bl	5500 <set_pi_over_2@plt>
    6be0:	mov	w20, w0
    6be4:	mov	w8, #0x1                   	// #1
    6be8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    6bec:	str	w8, [x19, #40]
    6bf0:	str	x9, [x19, #48]
    6bf4:	tbz	w24, #31, 6c08 <mpc_atan@@Base+0x150>
    6bf8:	mov	x0, x19
    6bfc:	mov	x1, x19
    6c00:	mov	w2, wzr
    6c04:	bl	5070 <mpc_conj@plt>
    6c08:	cmp	w20, #0x0
    6c0c:	b	6c28 <mpc_atan@@Base+0x170>
    6c10:	mov	x0, x19
    6c14:	bl	4b10 <mpfr_set_nan@plt>
    6c18:	add	x0, x19, #0x20
    6c1c:	bl	4b10 <mpfr_set_nan@plt>
    6c20:	mov	w0, wzr
    6c24:	cmp	w0, #0x0
    6c28:	cset	w8, ne  // ne = any
    6c2c:	mov	w9, #0x2                   	// #2
    6c30:	csel	w19, w9, w8, lt  // lt = tstop
    6c34:	mov	w0, w19
    6c38:	ldp	x20, x19, [sp, #288]
    6c3c:	ldp	x22, x21, [sp, #272]
    6c40:	ldp	x24, x23, [sp, #256]
    6c44:	ldp	x26, x25, [sp, #240]
    6c48:	ldp	x28, x27, [sp, #224]
    6c4c:	ldp	x29, x30, [sp, #208]
    6c50:	add	sp, sp, #0x130
    6c54:	ret
    6c58:	cmp	x8, x21
    6c5c:	add	x21, x22, #0x20
    6c60:	b.ne	6c7c <mpc_atan@@Base+0x1c4>  // b.any
    6c64:	tbnz	w24, #31, 70b0 <mpc_atan@@Base+0x5f8>
    6c68:	mov	w1, #0x1                   	// #1
    6c6c:	mov	x0, x21
    6c70:	mov	x2, xzr
    6c74:	bl	4d80 <mpfr_cmp_ui_2exp@plt>
    6c78:	b	70c4 <mpc_atan@@Base+0x60c>
    6c7c:	sub	x1, x29, #0x28
    6c80:	sub	x2, x29, #0x48
    6c84:	add	x3, sp, #0x68
    6c88:	add	x4, sp, #0x48
    6c8c:	mov	w0, #0x1                   	// #1
    6c90:	mov	x5, xzr
    6c94:	bl	5640 <mpfr_inits2@plt>
    6c98:	ldp	q1, q0, [x22]
    6c9c:	add	x0, sp, #0x20
    6ca0:	add	x1, sp, #0x20
    6ca4:	mov	w2, wzr
    6ca8:	stp	q1, q0, [sp, #32]
    6cac:	bl	4c50 <mpfr_neg@plt>
    6cb0:	ldr	x8, [x22, #48]
    6cb4:	ldr	x20, [x19]
    6cb8:	ldr	x23, [x22, #16]
    6cbc:	mov	x9, #0x2                   	// #2
    6cc0:	neg	x10, x8
    6cc4:	cmp	x20, x10
    6cc8:	movk	x9, #0x8000, lsl #48
    6ccc:	ccmp	x8, #0x0, #0x0, le
    6cd0:	csel	x24, xzr, x8, gt
    6cd4:	cmp	x23, x9
    6cd8:	b.gt	6cf0 <mpc_atan@@Base+0x238>
    6cdc:	cmp	x23, x27
    6ce0:	b.ne	6ce8 <mpc_atan@@Base+0x230>  // b.any
    6ce4:	bl	4bd0 <mpfr_set_erangeflag@plt>
    6ce8:	mov	w8, #0x2                   	// #2
    6cec:	b	6d00 <mpc_atan@@Base+0x248>
    6cf0:	ldr	w8, [x22, #8]
    6cf4:	cmp	w8, #0x0
    6cf8:	mov	w8, #0x2                   	// #2
    6cfc:	cinc	w8, w8, gt
    6d00:	str	w8, [sp, #28]
    6d04:	ldr	x8, [x22, #16]
    6d08:	mov	x9, #0x2                   	// #2
    6d0c:	movk	x9, #0x8000, lsl #48
    6d10:	sub	x24, x20, x24
    6d14:	cmp	x8, x9
    6d18:	b.gt	6d30 <mpc_atan@@Base+0x278>
    6d1c:	cmp	x8, x27
    6d20:	b.ne	6d28 <mpc_atan@@Base+0x270>  // b.any
    6d24:	bl	4bd0 <mpfr_set_erangeflag@plt>
    6d28:	mov	w8, #0x3                   	// #3
    6d2c:	b	6d40 <mpc_atan@@Base+0x288>
    6d30:	ldr	w8, [x22, #8]
    6d34:	cmp	w8, #0x0
    6d38:	mov	w8, #0x2                   	// #2
    6d3c:	cinc	w8, w8, ge  // ge = tcont
    6d40:	tst	w25, #0xf
    6d44:	cinc	x26, x20, eq  // eq = none
    6d48:	mov	x20, #0x2                   	// #2
    6d4c:	add	x28, x23, #0x5
    6d50:	movk	x20, #0x8000, lsl #48
    6d54:	stp	w25, w8, [sp, #12]
    6d58:	b	6de0 <mpc_atan@@Base+0x328>
    6d5c:	mov	w8, wzr
    6d60:	cbz	w8, 6ebc <mpc_atan@@Base+0x404>
    6d64:	ldur	x23, [x29, #-24]
    6d68:	sub	x0, x29, #0x48
    6d6c:	add	x1, sp, #0x20
    6d70:	sub	x2, x29, #0x28
    6d74:	mov	w3, #0x3                   	// #3
    6d78:	bl	4d70 <mpfr_atan2@plt>
    6d7c:	cmp	x25, x23
    6d80:	add	x0, sp, #0x68
    6d84:	add	x1, sp, #0x68
    6d88:	sub	x2, x29, #0x48
    6d8c:	mov	w3, #0x2                   	// #2
    6d90:	csel	x23, x25, x23, lt  // lt = tstop
    6d94:	bl	4b30 <mpfr_sub@plt>
    6d98:	ldr	x8, [sp, #120]
    6d9c:	sub	x9, x28, x23
    6da0:	add	x0, sp, #0x68
    6da4:	add	x1, sp, #0x68
    6da8:	sub	x8, x9, x8
    6dac:	cmp	x8, #0x0
    6db0:	mov	w9, #0x1                   	// #1
    6db4:	mov	w2, #0x1                   	// #1
    6db8:	mov	w3, #0x2                   	// #2
    6dbc:	csinc	x23, x9, x8, lt  // lt = tstop
    6dc0:	bl	5430 <mpfr_div_2ui@plt>
    6dc4:	sub	x1, x24, x23
    6dc8:	add	x0, sp, #0x68
    6dcc:	mov	w2, #0x2                   	// #2
    6dd0:	mov	w3, #0x3                   	// #3
    6dd4:	mov	x4, x26
    6dd8:	bl	5550 <mpfr_can_round@plt>
    6ddc:	cbnz	w0, 6ee4 <mpc_atan@@Base+0x42c>
    6de0:	mov	x0, x24
    6de4:	bl	4df0 <mpc_ceil_log2@plt>
    6de8:	add	x8, x24, x0
    6dec:	add	x24, x8, #0x2
    6df0:	sub	x0, x29, #0x28
    6df4:	mov	x1, x24
    6df8:	bl	4d50 <mpfr_set_prec@plt>
    6dfc:	sub	x0, x29, #0x48
    6e00:	mov	x1, x24
    6e04:	bl	4d50 <mpfr_set_prec@plt>
    6e08:	add	x0, sp, #0x68
    6e0c:	mov	x1, x24
    6e10:	bl	4d50 <mpfr_set_prec@plt>
    6e14:	ldr	w3, [sp, #28]
    6e18:	sub	x0, x29, #0x28
    6e1c:	mov	w1, #0x1                   	// #1
    6e20:	mov	x2, x21
    6e24:	bl	5530 <mpfr_ui_sub@plt>
    6e28:	ldur	x8, [x29, #-24]
    6e2c:	cmp	x8, x20
    6e30:	b.gt	6e64 <mpc_atan@@Base+0x3ac>
    6e34:	cmp	x8, x27
    6e38:	b.ne	6ed8 <mpc_atan@@Base+0x420>  // b.any
    6e3c:	bl	4bd0 <mpfr_set_erangeflag@plt>
    6e40:	mov	w8, wzr
    6e44:	cbnz	w8, 6e6c <mpc_atan@@Base+0x3b4>
    6e48:	mov	w1, #0x1                   	// #1
    6e4c:	mov	x0, x21
    6e50:	mov	x2, xzr
    6e54:	bl	4d80 <mpfr_cmp_ui_2exp@plt>
    6e58:	cbnz	w0, 7310 <mpc_atan@@Base+0x858>
    6e5c:	mov	w25, #0x2                   	// #2
    6e60:	b	6e70 <mpc_atan@@Base+0x3b8>
    6e64:	ldur	w8, [x29, #-32]
    6e68:	cbz	w8, 6e48 <mpc_atan@@Base+0x390>
    6e6c:	ldur	x25, [x29, #-24]
    6e70:	add	x0, sp, #0x68
    6e74:	sub	x2, x29, #0x28
    6e78:	mov	w3, #0x2                   	// #2
    6e7c:	mov	x1, x22
    6e80:	bl	4d70 <mpfr_atan2@plt>
    6e84:	ldr	w3, [sp, #16]
    6e88:	sub	x0, x29, #0x28
    6e8c:	mov	w2, #0x1                   	// #1
    6e90:	mov	x1, x21
    6e94:	bl	4ff0 <mpfr_add_ui@plt>
    6e98:	ldur	x8, [x29, #-24]
    6e9c:	cmp	x8, x20
    6ea0:	b.gt	6eb4 <mpc_atan@@Base+0x3fc>
    6ea4:	cmp	x8, x27
    6ea8:	b.ne	6d5c <mpc_atan@@Base+0x2a4>  // b.any
    6eac:	bl	4bd0 <mpfr_set_erangeflag@plt>
    6eb0:	b	6d5c <mpc_atan@@Base+0x2a4>
    6eb4:	ldur	w8, [x29, #-32]
    6eb8:	cbnz	w8, 6d64 <mpc_atan@@Base+0x2ac>
    6ebc:	mov	x1, #0xffffffffffffffff    	// #-1
    6ec0:	mov	x0, x21
    6ec4:	mov	x2, xzr
    6ec8:	bl	50f0 <mpfr_cmp_si_2exp@plt>
    6ecc:	mov	x23, x25
    6ed0:	cbz	w0, 6d68 <mpc_atan@@Base+0x2b0>
    6ed4:	b	7340 <mpc_atan@@Base+0x888>
    6ed8:	mov	w8, wzr
    6edc:	cbnz	w8, 6e6c <mpc_atan@@Base+0x3b4>
    6ee0:	b	6e48 <mpc_atan@@Base+0x390>
    6ee4:	ldr	w8, [sp, #12]
    6ee8:	ldr	x23, [x19, #32]
    6eec:	mov	w26, #0x2                   	// #2
    6ef0:	mov	x20, #0x8000000000000001    	// #-9223372036854775807
    6ef4:	cmp	w8, #0x10
    6ef8:	cinc	x24, x23, cc  // cc = lo, ul, last
    6efc:	mov	w25, #0x5                   	// #5
    6f00:	b	6f0c <mpc_atan@@Base+0x454>
    6f04:	mov	w0, wzr
    6f08:	cbnz	w0, 707c <mpc_atan@@Base+0x5c4>
    6f0c:	mov	x0, x23
    6f10:	bl	4df0 <mpc_ceil_log2@plt>
    6f14:	add	x8, x26, x23
    6f18:	add	x23, x8, x0
    6f1c:	sub	x0, x29, #0x28
    6f20:	mov	x1, x23
    6f24:	bl	4d50 <mpfr_set_prec@plt>
    6f28:	sub	x0, x29, #0x48
    6f2c:	mov	x1, x23
    6f30:	bl	4d50 <mpfr_set_prec@plt>
    6f34:	add	x0, sp, #0x48
    6f38:	mov	x1, x23
    6f3c:	bl	4d50 <mpfr_set_prec@plt>
    6f40:	sub	x0, x29, #0x28
    6f44:	mov	w2, #0x1                   	// #1
    6f48:	mov	w3, #0x4                   	// #4
    6f4c:	mov	x1, x21
    6f50:	bl	4ff0 <mpfr_add_ui@plt>
    6f54:	sub	x0, x29, #0x28
    6f58:	sub	x1, x29, #0x28
    6f5c:	mov	w2, #0x2                   	// #2
    6f60:	bl	5120 <mpfr_sqr@plt>
    6f64:	add	x0, sp, #0x48
    6f68:	mov	w2, #0x2                   	// #2
    6f6c:	mov	x1, x22
    6f70:	bl	5120 <mpfr_sqr@plt>
    6f74:	sub	x0, x29, #0x28
    6f78:	sub	x1, x29, #0x28
    6f7c:	add	x2, sp, #0x48
    6f80:	mov	w3, #0x2                   	// #2
    6f84:	bl	4f60 <mpfr_add@plt>
    6f88:	sub	x0, x29, #0x28
    6f8c:	sub	x1, x29, #0x28
    6f90:	mov	w2, #0x2                   	// #2
    6f94:	bl	4e70 <mpfr_log@plt>
    6f98:	sub	x0, x29, #0x48
    6f9c:	mov	w1, #0x1                   	// #1
    6fa0:	mov	w3, #0x1                   	// #1
    6fa4:	mov	x2, x21
    6fa8:	bl	5530 <mpfr_ui_sub@plt>
    6fac:	sub	x0, x29, #0x48
    6fb0:	sub	x1, x29, #0x48
    6fb4:	mov	w2, #0x1                   	// #1
    6fb8:	bl	5120 <mpfr_sqr@plt>
    6fbc:	add	x0, sp, #0x48
    6fc0:	bl	4c80 <mpfr_nextbelow@plt>
    6fc4:	sub	x0, x29, #0x48
    6fc8:	sub	x1, x29, #0x48
    6fcc:	add	x2, sp, #0x48
    6fd0:	mov	w3, #0x1                   	// #1
    6fd4:	bl	4f60 <mpfr_add@plt>
    6fd8:	sub	x0, x29, #0x48
    6fdc:	sub	x1, x29, #0x48
    6fe0:	mov	w2, #0x1                   	// #1
    6fe4:	bl	4e70 <mpfr_log@plt>
    6fe8:	add	x0, sp, #0x48
    6fec:	sub	x1, x29, #0x28
    6ff0:	sub	x2, x29, #0x48
    6ff4:	mov	w3, #0x2                   	// #2
    6ff8:	bl	4b30 <mpfr_sub@plt>
    6ffc:	ldr	x8, [sp, #88]
    7000:	cmp	x8, x20
    7004:	b.eq	6f04 <mpc_atan@@Base+0x44c>  // b.none
    7008:	ldur	x9, [x29, #-24]
    700c:	ldur	x10, [x29, #-56]
    7010:	cmp	x9, x10
    7014:	csel	x9, x9, x10, gt
    7018:	cmp	x9, #0x2
    701c:	b.gt	7030 <mpc_atan@@Base+0x578>
    7020:	sub	x9, x25, x8
    7024:	cmp	x8, #0x3
    7028:	csinc	x26, x9, xzr, le
    702c:	b	7040 <mpc_atan@@Base+0x588>
    7030:	sub	x8, x9, x8
    7034:	add	x9, x8, #0x3
    7038:	cmn	x8, #0x1
    703c:	csinc	x26, x9, xzr, ge  // ge = tcont
    7040:	add	x0, sp, #0x48
    7044:	add	x1, sp, #0x48
    7048:	mov	w2, #0x2                   	// #2
    704c:	mov	w3, wzr
    7050:	bl	5430 <mpfr_div_2ui@plt>
    7054:	ldr	x8, [sp, #88]
    7058:	cmp	x8, x20
    705c:	b.eq	72e0 <mpc_atan@@Base+0x828>  // b.none
    7060:	sub	x1, x23, x26
    7064:	add	x0, sp, #0x48
    7068:	mov	w2, #0x2                   	// #2
    706c:	mov	w3, #0x3                   	// #3
    7070:	mov	x4, x24
    7074:	bl	5550 <mpfr_can_round@plt>
    7078:	cbz	w0, 6f0c <mpc_atan@@Base+0x454>
    707c:	ldr	w3, [sp, #12]
    7080:	add	x1, sp, #0x68
    7084:	add	x2, sp, #0x48
    7088:	mov	x0, x19
    708c:	bl	55f0 <mpc_set_fr_fr@plt>
    7090:	mov	w19, w0
    7094:	sub	x0, x29, #0x28
    7098:	sub	x1, x29, #0x48
    709c:	add	x2, sp, #0x68
    70a0:	add	x3, sp, #0x48
    70a4:	mov	x4, xzr
    70a8:	bl	4f70 <mpfr_clears@plt>
    70ac:	b	6c34 <mpc_atan@@Base+0x17c>
    70b0:	mov	x1, #0xffffffffffffffff    	// #-1
    70b4:	mov	x0, x21
    70b8:	mov	x2, xzr
    70bc:	bl	50f0 <mpfr_cmp_si_2exp@plt>
    70c0:	neg	w0, w0
    70c4:	tbnz	w0, #31, 724c <mpc_atan@@Base+0x794>
    70c8:	cbz	w0, 7288 <mpc_atan@@Base+0x7d0>
    70cc:	sub	x0, x29, #0x28
    70d0:	str	w25, [sp, #12]
    70d4:	asr	w20, w25, #4
    70d8:	bl	4b70 <mpfr_init@plt>
    70dc:	sub	x0, x29, #0x48
    70e0:	bl	4b70 <mpfr_init@plt>
    70e4:	mov	x8, x19
    70e8:	cmp	w24, #0x0
    70ec:	ldr	x24, [x8, #32]!
    70f0:	str	w20, [sp, #28]
    70f4:	str	x8, [sp, #16]
    70f8:	mov	w8, #0x2                   	// #2
    70fc:	cinc	w25, w8, lt  // lt = tstop
    7100:	cmp	w20, #0x0
    7104:	cinc	x26, x24, eq  // eq = none
    7108:	mov	w20, #0x1                   	// #1
    710c:	b	7118 <mpc_atan@@Base+0x660>
    7110:	mov	w23, wzr
    7114:	cbnz	w23, 7208 <mpc_atan@@Base+0x750>
    7118:	mov	x0, x24
    711c:	bl	4df0 <mpc_ceil_log2@plt>
    7120:	add	x8, x24, x0
    7124:	add	x24, x8, #0x2
    7128:	sub	x0, x29, #0x28
    712c:	mov	x1, x24
    7130:	bl	4d50 <mpfr_set_prec@plt>
    7134:	sub	x0, x29, #0x48
    7138:	mov	x1, x24
    713c:	bl	4d50 <mpfr_set_prec@plt>
    7140:	sub	x0, x29, #0x28
    7144:	mov	w1, #0x1                   	// #1
    7148:	mov	x2, x21
    714c:	mov	w3, w25
    7150:	bl	5080 <mpfr_ui_div@plt>
    7154:	ldur	x22, [x29, #-24]
    7158:	mov	w27, w0
    715c:	sub	x0, x29, #0x48
    7160:	sub	x1, x29, #0x28
    7164:	mov	w2, #0x2                   	// #2
    7168:	bl	5120 <mpfr_sqr@plt>
    716c:	sub	x0, x29, #0x48
    7170:	mov	w1, #0x1                   	// #1
    7174:	mov	x2, xzr
    7178:	bl	4d80 <mpfr_cmp_ui_2exp@plt>
    717c:	cmp	w0, #0x1
    7180:	b.ge	7370 <mpc_atan@@Base+0x8b8>  // b.tcont
    7184:	sub	x0, x29, #0x48
    7188:	mov	w1, #0x1                   	// #1
    718c:	mov	x2, xzr
    7190:	bl	4d80 <mpfr_cmp_ui_2exp@plt>
    7194:	cbz	w0, 7110 <mpc_atan@@Base+0x658>
    7198:	sub	x0, x29, #0x48
    719c:	sub	x2, x29, #0x48
    71a0:	mov	w1, #0x1                   	// #1
    71a4:	mov	w3, #0x1                   	// #1
    71a8:	mov	w23, #0x1                   	// #1
    71ac:	bl	5530 <mpfr_ui_sub@plt>
    71b0:	sub	x0, x29, #0x28
    71b4:	sub	x1, x29, #0x28
    71b8:	mov	w2, w25
    71bc:	bl	4e80 <mpfr_atanh@plt>
    71c0:	orr	w8, w0, w27
    71c4:	cbz	w8, 7114 <mpc_atan@@Base+0x65c>
    71c8:	ldur	x8, [x29, #-24]
    71cc:	ldur	x9, [x29, #-56]
    71d0:	sub	x0, x29, #0x28
    71d4:	mov	w3, #0x1                   	// #1
    71d8:	sub	x8, x22, x8
    71dc:	sub	x8, x8, x9
    71e0:	add	x8, x8, #0x1
    71e4:	cmp	x8, #0x0
    71e8:	csinc	x8, x20, x8, lt  // lt = tstop
    71ec:	sub	x1, x24, x8
    71f0:	mov	w2, w25
    71f4:	mov	x4, x26
    71f8:	bl	5550 <mpfr_can_round@plt>
    71fc:	cmp	w0, #0x0
    7200:	cset	w23, ne  // ne = any
    7204:	b	7114 <mpc_atan@@Base+0x65c>
    7208:	ldr	w8, [sp, #12]
    720c:	asr	w1, w28, #31
    7210:	mov	x0, x19
    7214:	and	w2, w8, #0xf
    7218:	bl	5500 <set_pi_over_2@plt>
    721c:	ldur	w3, [x29, #-32]
    7220:	mov	w20, w0
    7224:	ldr	x0, [sp, #16]
    7228:	ldr	w2, [sp, #28]
    722c:	sub	x1, x29, #0x28
    7230:	bl	52e0 <mpfr_set4@plt>
    7234:	mov	w19, w0
    7238:	sub	x0, x29, #0x28
    723c:	bl	4e40 <mpfr_clear@plt>
    7240:	sub	x0, x29, #0x48
    7244:	bl	4e40 <mpfr_clear@plt>
    7248:	b	72b4 <mpc_atan@@Base+0x7fc>
    724c:	mov	w8, #0x1                   	// #1
    7250:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    7254:	str	w8, [x19, #8]
    7258:	str	x9, [x19, #16]
    725c:	tbz	w28, #31, 7270 <mpc_atan@@Base+0x7b8>
    7260:	mov	x0, x19
    7264:	mov	x1, x19
    7268:	mov	w2, wzr
    726c:	bl	4c50 <mpfr_neg@plt>
    7270:	add	x0, x19, #0x20
    7274:	asr	w2, w25, #4
    7278:	mov	x1, x21
    727c:	bl	4e80 <mpfr_atanh@plt>
    7280:	mov	w19, w0
    7284:	b	72b0 <mpc_atan@@Base+0x7f8>
    7288:	cmp	w28, #0x0
    728c:	mov	w20, #0xffffffff            	// #-1
    7290:	cneg	w1, w20, ge  // ge = tcont
    7294:	mov	x0, x19
    7298:	bl	4de0 <mpfr_set_zero@plt>
    729c:	cmp	w24, #0x0
    72a0:	add	x0, x19, #0x20
    72a4:	cneg	w1, w20, ge  // ge = tcont
    72a8:	bl	5230 <mpfr_set_inf@plt>
    72ac:	mov	w19, wzr
    72b0:	mov	w20, wzr
    72b4:	cmp	w20, #0x0
    72b8:	mov	w8, #0x2                   	// #2
    72bc:	cset	w9, ne  // ne = any
    72c0:	csel	w8, w8, w9, lt  // lt = tstop
    72c4:	cmp	w19, #0x0
    72c8:	cset	w9, ne  // ne = any
    72cc:	lsl	w9, w9, #2
    72d0:	mov	w10, #0x8                   	// #8
    72d4:	csel	w9, w10, w9, lt  // lt = tstop
    72d8:	orr	w19, w8, w9
    72dc:	b	6c34 <mpc_atan@@Base+0x17c>
    72e0:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    72e4:	ldr	x8, [x8, #4008]
    72e8:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    72ec:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    72f0:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    72f4:	ldr	x0, [x8]
    72f8:	add	x1, x1, #0xba0
    72fc:	add	x2, x2, #0xc04
    7300:	add	x4, x4, #0xc70
    7304:	mov	w3, #0x17b                 	// #379
    7308:	bl	56a0 <fprintf@plt>
    730c:	bl	5110 <abort@plt>
    7310:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    7314:	ldr	x8, [x8, #4008]
    7318:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    731c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    7320:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    7324:	ldr	x0, [x8]
    7328:	add	x1, x1, #0xba0
    732c:	add	x2, x2, #0xc04
    7330:	add	x4, x4, #0xc23
    7334:	mov	w3, #0x113                 	// #275
    7338:	bl	56a0 <fprintf@plt>
    733c:	bl	5110 <abort@plt>
    7340:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    7344:	ldr	x8, [x8, #4008]
    7348:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    734c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    7350:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    7354:	ldr	x0, [x8]
    7358:	add	x1, x1, #0xba0
    735c:	add	x2, x2, #0xc04
    7360:	add	x4, x4, #0xc49
    7364:	mov	w3, #0x122                 	// #290
    7368:	bl	56a0 <fprintf@plt>
    736c:	bl	5110 <abort@plt>
    7370:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    7374:	ldr	x8, [x8, #4008]
    7378:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    737c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    7380:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    7384:	ldr	x0, [x8]
    7388:	add	x1, x1, #0xba0
    738c:	add	x2, x2, #0xc04
    7390:	add	x4, x4, #0xc0b
    7394:	mov	w3, #0xba                  	// #186
    7398:	bl	56a0 <fprintf@plt>
    739c:	bl	5110 <abort@plt>

00000000000073a0 <mpc_atanh@@Base>:
    73a0:	sub	sp, sp, #0xd0
    73a4:	stp	x29, x30, [sp, #160]
    73a8:	stp	x22, x21, [sp, #176]
    73ac:	stp	x20, x19, [sp, #192]
    73b0:	ldp	q1, q0, [x1, #32]
    73b4:	mov	w19, w2
    73b8:	mov	x20, x0
    73bc:	add	x0, sp, #0x40
    73c0:	stp	q1, q0, [sp, #64]
    73c4:	ldp	q1, q0, [x1]
    73c8:	add	x1, sp, #0x40
    73cc:	mov	w2, wzr
    73d0:	add	x29, sp, #0xa0
    73d4:	stp	q1, q0, [sp, #96]
    73d8:	bl	4c50 <mpfr_neg@plt>
    73dc:	ldr	x1, [x20, #32]
    73e0:	ldr	x2, [x20]
    73e4:	mov	x0, sp
    73e8:	mov	x22, sp
    73ec:	bl	54d0 <mpc_init3@plt>
    73f0:	asr	w8, w19, #4
    73f4:	mov	w9, #0x2                   	// #2
    73f8:	cmp	w8, #0x3
    73fc:	mov	w10, #0x3                   	// #3
    7400:	csel	w9, w9, w8, eq  // eq = none
    7404:	cmp	w8, #0x2
    7408:	csel	w8, w10, w9, eq  // eq = none
    740c:	ubfiz	w9, w19, #4, #4
    7410:	add	w2, w8, w9
    7414:	mov	x0, sp
    7418:	add	x1, sp, #0x40
    741c:	bl	5520 <mpc_atan@plt>
    7420:	ldp	q0, q1, [sp]
    7424:	ldp	q2, q3, [sp, #32]
    7428:	mov	w21, w0
    742c:	add	x0, x22, #0x20
    7430:	mov	x1, x0
    7434:	mov	w2, wzr
    7438:	stp	q0, q1, [x29, #-32]
    743c:	stp	q2, q3, [sp]
    7440:	stp	q0, q1, [sp, #32]
    7444:	bl	4c50 <mpfr_neg@plt>
    7448:	mov	x1, sp
    744c:	mov	x0, x20
    7450:	mov	w2, w19
    7454:	bl	5680 <mpc_set@plt>
    7458:	mov	x0, sp
    745c:	bl	4ae0 <mpc_clear@plt>
    7460:	asr	w8, w21, #2
    7464:	cmp	w8, #0x0
    7468:	cset	w9, ne  // ne = any
    746c:	cmp	w8, #0x2
    7470:	csel	w8, w8, w9, eq  // eq = none
    7474:	tst	w21, #0x3
    7478:	cset	w9, ne  // ne = any
    747c:	tst	w21, #0x1
    7480:	ldp	x20, x19, [sp, #192]
    7484:	ldp	x22, x21, [sp, #176]
    7488:	ldp	x29, x30, [sp, #160]
    748c:	lsl	w9, w9, #2
    7490:	mov	w10, #0x8                   	// #8
    7494:	csel	w9, w9, w10, eq  // eq = none
    7498:	orr	w0, w8, w9
    749c:	add	sp, sp, #0xd0
    74a0:	ret

00000000000074a4 <mpc_clear@@Base>:
    74a4:	stp	x29, x30, [sp, #-32]!
    74a8:	str	x19, [sp, #16]
    74ac:	mov	x29, sp
    74b0:	mov	x19, x0
    74b4:	bl	4e40 <mpfr_clear@plt>
    74b8:	add	x0, x19, #0x20
    74bc:	bl	4e40 <mpfr_clear@plt>
    74c0:	ldr	x19, [sp, #16]
    74c4:	ldp	x29, x30, [sp], #32
    74c8:	ret

00000000000074cc <mpc_cmp@@Base>:
    74cc:	stp	x29, x30, [sp, #-48]!
    74d0:	mov	w2, #0x1                   	// #1
    74d4:	str	x21, [sp, #16]
    74d8:	stp	x20, x19, [sp, #32]
    74dc:	mov	x29, sp
    74e0:	mov	x19, x1
    74e4:	mov	x20, x0
    74e8:	bl	54b0 <mpfr_cmp3@plt>
    74ec:	mov	w21, w0
    74f0:	add	x0, x20, #0x20
    74f4:	add	x1, x19, #0x20
    74f8:	mov	w2, #0x1                   	// #1
    74fc:	bl	54b0 <mpfr_cmp3@plt>
    7500:	cmp	w21, #0x0
    7504:	mov	w8, #0x2                   	// #2
    7508:	cset	w9, ne  // ne = any
    750c:	csel	w8, w8, w9, lt  // lt = tstop
    7510:	cmp	w0, #0x0
    7514:	cset	w9, ne  // ne = any
    7518:	ldp	x20, x19, [sp, #32]
    751c:	ldr	x21, [sp, #16]
    7520:	lsl	w9, w9, #2
    7524:	mov	w10, #0x8                   	// #8
    7528:	csel	w9, w10, w9, lt  // lt = tstop
    752c:	orr	w0, w9, w8
    7530:	ldp	x29, x30, [sp], #48
    7534:	ret

0000000000007538 <mpc_cmp_abs@@Base>:
    7538:	sub	sp, sp, #0xf0
    753c:	stp	x29, x30, [sp, #192]
    7540:	stp	x22, x21, [sp, #208]
    7544:	stp	x20, x19, [sp, #224]
    7548:	ldr	x10, [x0, #16]
    754c:	mov	x12, #0x2                   	// #2
    7550:	movk	x12, #0x8000, lsl #48
    7554:	add	x29, sp, #0xc0
    7558:	cmp	x10, x12
    755c:	b.eq	758c <mpc_cmp_abs@@Base+0x54>  // b.none
    7560:	ldr	x11, [x0, #48]
    7564:	mov	x20, x0
    7568:	cmp	x11, x12
    756c:	b.eq	758c <mpc_cmp_abs@@Base+0x54>  // b.none
    7570:	ldr	x9, [x1, #16]
    7574:	mov	x19, x1
    7578:	cmp	x9, x12
    757c:	b.eq	758c <mpc_cmp_abs@@Base+0x54>  // b.none
    7580:	ldr	x8, [x19, #48]
    7584:	cmp	x8, x12
    7588:	b.ne	75d0 <mpc_cmp_abs@@Base+0x98>  // b.any
    758c:	sub	x0, x29, #0x40
    7590:	bl	4b70 <mpfr_init@plt>
    7594:	sub	x0, x29, #0x40
    7598:	bl	4b10 <mpfr_set_nan@plt>
    759c:	sub	x0, x29, #0x40
    75a0:	sub	x1, x29, #0x40
    75a4:	mov	w2, #0x1                   	// #1
    75a8:	bl	54b0 <mpfr_cmp3@plt>
    75ac:	mov	w21, w0
    75b0:	sub	x0, x29, #0x40
    75b4:	bl	4e40 <mpfr_clear@plt>
    75b8:	mov	w0, w21
    75bc:	ldp	x20, x19, [sp, #224]
    75c0:	ldp	x22, x21, [sp, #208]
    75c4:	ldp	x29, x30, [sp, #192]
    75c8:	add	sp, sp, #0xf0
    75cc:	ret
    75d0:	mov	x12, #0x8000000000000003    	// #-9223372036854775805
    75d4:	cmp	x10, x12
    75d8:	b.eq	7794 <mpc_cmp_abs@@Base+0x25c>  // b.none
    75dc:	cmp	x11, x12
    75e0:	b.eq	7794 <mpc_cmp_abs@@Base+0x25c>  // b.none
    75e4:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    75e8:	cmp	x9, x10
    75ec:	mov	w21, #0xffffffff            	// #-1
    75f0:	b.eq	75b8 <mpc_cmp_abs@@Base+0x80>  // b.none
    75f4:	cmp	x8, x10
    75f8:	b.eq	75b8 <mpc_cmp_abs@@Base+0x80>  // b.none
    75fc:	ldp	q1, q0, [x20, #32]
    7600:	ldp	q3, q2, [x20]
    7604:	stp	q1, q0, [x29, #-32]
    7608:	stp	q3, q2, [x29, #-64]
    760c:	ldp	q1, q0, [x19, #32]
    7610:	ldp	q3, q2, [x19]
    7614:	stp	q1, q0, [sp, #96]
    7618:	stp	q3, q2, [sp, #64]
    761c:	ldr	w8, [x20, #8]
    7620:	tbnz	w8, #31, 77b4 <mpc_cmp_abs@@Base+0x27c>
    7624:	ldr	w8, [x20, #40]
    7628:	tbnz	w8, #31, 77cc <mpc_cmp_abs@@Base+0x294>
    762c:	ldr	w8, [x19, #8]
    7630:	tbnz	w8, #31, 77e8 <mpc_cmp_abs@@Base+0x2b0>
    7634:	ldr	w8, [x19, #40]
    7638:	tbnz	w8, #31, 7800 <mpc_cmp_abs@@Base+0x2c8>
    763c:	sub	x8, x29, #0x40
    7640:	add	x19, x8, #0x20
    7644:	sub	x0, x29, #0x40
    7648:	mov	w2, #0x1                   	// #1
    764c:	mov	x1, x19
    7650:	bl	54b0 <mpfr_cmp3@plt>
    7654:	cmp	w0, #0x1
    7658:	b.lt	7668 <mpc_cmp_abs@@Base+0x130>  // b.tstop
    765c:	sub	x0, x29, #0x40
    7660:	mov	x1, x19
    7664:	bl	51a0 <mpfr_swap@plt>
    7668:	add	x8, sp, #0x40
    766c:	add	x20, x8, #0x20
    7670:	add	x0, sp, #0x40
    7674:	mov	w2, #0x1                   	// #1
    7678:	mov	x1, x20
    767c:	bl	54b0 <mpfr_cmp3@plt>
    7680:	cmp	w0, #0x1
    7684:	b.lt	7694 <mpc_cmp_abs@@Base+0x15c>  // b.tstop
    7688:	add	x0, sp, #0x40
    768c:	mov	x1, x20
    7690:	bl	51a0 <mpfr_swap@plt>
    7694:	sub	x0, x29, #0x40
    7698:	add	x1, sp, #0x40
    769c:	mov	w2, #0x1                   	// #1
    76a0:	bl	54b0 <mpfr_cmp3@plt>
    76a4:	mov	w22, w0
    76a8:	mov	w2, #0x1                   	// #1
    76ac:	mov	x0, x19
    76b0:	mov	x1, x20
    76b4:	bl	54b0 <mpfr_cmp3@plt>
    76b8:	mov	w21, w0
    76bc:	cbz	w22, 75b8 <mpc_cmp_abs@@Base+0x80>
    76c0:	cbz	w21, 7818 <mpc_cmp_abs@@Base+0x2e0>
    76c4:	add	x0, sp, #0x20
    76c8:	bl	4b70 <mpfr_init@plt>
    76cc:	mov	x0, sp
    76d0:	bl	4b70 <mpfr_init@plt>
    76d4:	ldur	x8, [x29, #-64]
    76d8:	ldur	x9, [x29, #-32]
    76dc:	ldr	x10, [sp, #64]
    76e0:	ldr	x11, [sp, #96]
    76e4:	cmp	x8, x9
    76e8:	csel	x8, x8, x9, gt
    76ec:	cmp	x10, x11
    76f0:	csel	x9, x10, x11, gt
    76f4:	mov	x10, #0xd70b                	// #55051
    76f8:	movk	x10, #0x70a3, lsl #16
    76fc:	movk	x10, #0xa3d, lsl #32
    7700:	cmp	x8, x9
    7704:	movk	x10, #0xa3d7, lsl #48
    7708:	csel	x8, x8, x9, gt
    770c:	mov	w9, #0x1388                	// #5000
    7710:	smulh	x10, x8, x10
    7714:	cmp	x8, x9
    7718:	add	x8, x10, x8
    771c:	asr	x9, x8, #6
    7720:	add	x8, x9, x8, lsr #63
    7724:	mov	w9, #0x32                  	// #50
    7728:	csel	x19, x9, x8, lt  // lt = tstop
    772c:	add	x0, sp, #0x20
    7730:	mov	x1, x19
    7734:	bl	4d50 <mpfr_set_prec@plt>
    7738:	mov	x0, sp
    773c:	mov	x1, x19
    7740:	bl	4d50 <mpfr_set_prec@plt>
    7744:	add	x0, sp, #0x20
    7748:	sub	x1, x29, #0x40
    774c:	mov	w2, #0x3                   	// #3
    7750:	bl	4fa0 <mpc_norm@plt>
    7754:	mov	w22, w0
    7758:	mov	x0, sp
    775c:	add	x1, sp, #0x40
    7760:	mov	w2, #0x3                   	// #3
    7764:	bl	4fa0 <mpc_norm@plt>
    7768:	mov	w20, w0
    776c:	add	x0, sp, #0x20
    7770:	mov	x1, sp
    7774:	mov	w2, #0x1                   	// #1
    7778:	bl	54b0 <mpfr_cmp3@plt>
    777c:	cbnz	w0, 7830 <mpc_cmp_abs@@Base+0x2f8>
    7780:	cbz	w22, 7838 <mpc_cmp_abs@@Base+0x300>
    7784:	lsl	x19, x19, #1
    7788:	cbnz	w20, 772c <mpc_cmp_abs@@Base+0x1f4>
    778c:	mov	w21, #0x1                   	// #1
    7790:	b	7840 <mpc_cmp_abs@@Base+0x308>
    7794:	cmp	x9, x12
    7798:	b.ne	77a4 <mpc_cmp_abs@@Base+0x26c>  // b.any
    779c:	mov	w21, wzr
    77a0:	b	75b8 <mpc_cmp_abs@@Base+0x80>
    77a4:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    77a8:	cmp	x8, x9
    77ac:	cset	w21, ne  // ne = any
    77b0:	b	75b8 <mpc_cmp_abs@@Base+0x80>
    77b4:	sub	x0, x29, #0x40
    77b8:	sub	x1, x29, #0x40
    77bc:	mov	w2, wzr
    77c0:	bl	4c50 <mpfr_neg@plt>
    77c4:	ldr	w8, [x20, #40]
    77c8:	tbz	w8, #31, 762c <mpc_cmp_abs@@Base+0xf4>
    77cc:	sub	x8, x29, #0x40
    77d0:	add	x0, x8, #0x20
    77d4:	mov	x1, x0
    77d8:	mov	w2, wzr
    77dc:	bl	4c50 <mpfr_neg@plt>
    77e0:	ldr	w8, [x19, #8]
    77e4:	tbz	w8, #31, 7634 <mpc_cmp_abs@@Base+0xfc>
    77e8:	add	x0, sp, #0x40
    77ec:	add	x1, sp, #0x40
    77f0:	mov	w2, wzr
    77f4:	bl	4c50 <mpfr_neg@plt>
    77f8:	ldr	w8, [x19, #40]
    77fc:	tbz	w8, #31, 763c <mpc_cmp_abs@@Base+0x104>
    7800:	add	x8, sp, #0x40
    7804:	add	x0, x8, #0x20
    7808:	mov	x1, x0
    780c:	mov	w2, wzr
    7810:	bl	4c50 <mpfr_neg@plt>
    7814:	b	763c <mpc_cmp_abs@@Base+0x104>
    7818:	sub	x0, x29, #0x40
    781c:	add	x1, sp, #0x40
    7820:	mov	w2, #0x1                   	// #1
    7824:	bl	54b0 <mpfr_cmp3@plt>
    7828:	mov	w21, w0
    782c:	b	75b8 <mpc_cmp_abs@@Base+0x80>
    7830:	mov	w21, w0
    7834:	b	7840 <mpc_cmp_abs@@Base+0x308>
    7838:	cmp	w20, #0x0
    783c:	csetm	w21, ne  // ne = any
    7840:	add	x0, sp, #0x20
    7844:	bl	4e40 <mpfr_clear@plt>
    7848:	mov	x0, sp
    784c:	b	75b4 <mpc_cmp_abs@@Base+0x7c>

0000000000007850 <mpc_cmp_si_si@@Base>:
    7850:	stp	x29, x30, [sp, #-48]!
    7854:	stp	x20, x19, [sp, #32]
    7858:	mov	x19, x2
    785c:	mov	x2, xzr
    7860:	str	x21, [sp, #16]
    7864:	mov	x29, sp
    7868:	mov	x20, x0
    786c:	bl	50f0 <mpfr_cmp_si_2exp@plt>
    7870:	mov	w21, w0
    7874:	add	x0, x20, #0x20
    7878:	mov	x1, x19
    787c:	mov	x2, xzr
    7880:	bl	50f0 <mpfr_cmp_si_2exp@plt>
    7884:	cmp	w21, #0x0
    7888:	mov	w8, #0x2                   	// #2
    788c:	cset	w9, ne  // ne = any
    7890:	csel	w8, w8, w9, lt  // lt = tstop
    7894:	cmp	w0, #0x0
    7898:	cset	w9, ne  // ne = any
    789c:	ldp	x20, x19, [sp, #32]
    78a0:	ldr	x21, [sp, #16]
    78a4:	lsl	w9, w9, #2
    78a8:	mov	w10, #0x8                   	// #8
    78ac:	csel	w9, w10, w9, lt  // lt = tstop
    78b0:	orr	w0, w9, w8
    78b4:	ldp	x29, x30, [sp], #48
    78b8:	ret

00000000000078bc <mpc_conj@@Base>:
    78bc:	stp	x29, x30, [sp, #-48]!
    78c0:	stp	x22, x21, [sp, #16]
    78c4:	stp	x20, x19, [sp, #32]
    78c8:	ldr	w3, [x1, #8]
    78cc:	mov	w19, w2
    78d0:	and	w2, w2, #0xf
    78d4:	mov	x29, sp
    78d8:	mov	x20, x1
    78dc:	mov	x21, x0
    78e0:	bl	52e0 <mpfr_set4@plt>
    78e4:	mov	w22, w0
    78e8:	add	x0, x21, #0x20
    78ec:	add	x1, x20, #0x20
    78f0:	asr	w2, w19, #4
    78f4:	bl	4c50 <mpfr_neg@plt>
    78f8:	cmp	w22, #0x0
    78fc:	mov	w8, #0x2                   	// #2
    7900:	cset	w9, ne  // ne = any
    7904:	csel	w8, w8, w9, lt  // lt = tstop
    7908:	cmp	w0, #0x0
    790c:	cset	w9, ne  // ne = any
    7910:	ldp	x20, x19, [sp, #32]
    7914:	ldp	x22, x21, [sp, #16]
    7918:	lsl	w9, w9, #2
    791c:	mov	w10, #0x8                   	// #8
    7920:	csel	w9, w10, w9, lt  // lt = tstop
    7924:	orr	w0, w9, w8
    7928:	ldp	x29, x30, [sp], #48
    792c:	ret

0000000000007930 <mpc_cos@@Base>:
    7930:	stp	x29, x30, [sp, #-16]!
    7934:	mov	w4, w2
    7938:	mov	x2, x1
    793c:	mov	x1, x0
    7940:	mov	x0, xzr
    7944:	mov	w3, wzr
    7948:	mov	x29, sp
    794c:	bl	5250 <mpc_sin_cos@plt>
    7950:	asr	w0, w0, #4
    7954:	ldp	x29, x30, [sp], #16
    7958:	ret

000000000000795c <mpc_cosh@@Base>:
    795c:	sub	sp, sp, #0x60
    7960:	stp	x29, x30, [sp, #64]
    7964:	stp	x20, x19, [sp, #80]
    7968:	ldp	q1, q0, [x1, #32]
    796c:	mov	w19, w2
    7970:	mov	x20, x0
    7974:	mov	x0, sp
    7978:	stp	q1, q0, [sp]
    797c:	ldp	q1, q0, [x1]
    7980:	mov	x1, sp
    7984:	mov	w2, wzr
    7988:	add	x29, sp, #0x40
    798c:	stp	q1, q0, [sp, #32]
    7990:	bl	4c50 <mpfr_neg@plt>
    7994:	mov	x1, sp
    7998:	mov	x0, x20
    799c:	mov	w2, w19
    79a0:	bl	54f0 <mpc_cos@plt>
    79a4:	ldp	x20, x19, [sp, #80]
    79a8:	ldp	x29, x30, [sp, #64]
    79ac:	add	sp, sp, #0x60
    79b0:	ret

00000000000079b4 <mpc_div_2si@@Base>:
    79b4:	stp	x29, x30, [sp, #-64]!
    79b8:	stp	x20, x19, [sp, #48]
    79bc:	mov	w19, w3
    79c0:	and	w3, w3, #0xf
    79c4:	str	x23, [sp, #16]
    79c8:	stp	x22, x21, [sp, #32]
    79cc:	mov	x29, sp
    79d0:	mov	x20, x2
    79d4:	mov	x21, x1
    79d8:	mov	x22, x0
    79dc:	bl	5140 <mpfr_div_2si@plt>
    79e0:	mov	w23, w0
    79e4:	add	x0, x22, #0x20
    79e8:	add	x1, x21, #0x20
    79ec:	asr	w3, w19, #4
    79f0:	mov	x2, x20
    79f4:	bl	5140 <mpfr_div_2si@plt>
    79f8:	cmp	w23, #0x0
    79fc:	mov	w8, #0x2                   	// #2
    7a00:	cset	w9, ne  // ne = any
    7a04:	csel	w8, w8, w9, lt  // lt = tstop
    7a08:	cmp	w0, #0x0
    7a0c:	cset	w9, ne  // ne = any
    7a10:	ldp	x20, x19, [sp, #48]
    7a14:	ldp	x22, x21, [sp, #32]
    7a18:	ldr	x23, [sp, #16]
    7a1c:	lsl	w9, w9, #2
    7a20:	mov	w10, #0x8                   	// #8
    7a24:	csel	w9, w10, w9, lt  // lt = tstop
    7a28:	orr	w0, w9, w8
    7a2c:	ldp	x29, x30, [sp], #64
    7a30:	ret

0000000000007a34 <mpc_div_2ui@@Base>:
    7a34:	stp	x29, x30, [sp, #-64]!
    7a38:	stp	x20, x19, [sp, #48]
    7a3c:	mov	w19, w3
    7a40:	and	w3, w3, #0xf
    7a44:	str	x23, [sp, #16]
    7a48:	stp	x22, x21, [sp, #32]
    7a4c:	mov	x29, sp
    7a50:	mov	x20, x2
    7a54:	mov	x21, x1
    7a58:	mov	x22, x0
    7a5c:	bl	5430 <mpfr_div_2ui@plt>
    7a60:	mov	w23, w0
    7a64:	add	x0, x22, #0x20
    7a68:	add	x1, x21, #0x20
    7a6c:	asr	w3, w19, #4
    7a70:	mov	x2, x20
    7a74:	bl	5430 <mpfr_div_2ui@plt>
    7a78:	cmp	w23, #0x0
    7a7c:	mov	w8, #0x2                   	// #2
    7a80:	cset	w9, ne  // ne = any
    7a84:	csel	w8, w8, w9, lt  // lt = tstop
    7a88:	cmp	w0, #0x0
    7a8c:	cset	w9, ne  // ne = any
    7a90:	ldp	x20, x19, [sp, #48]
    7a94:	ldp	x22, x21, [sp, #32]
    7a98:	ldr	x23, [sp, #16]
    7a9c:	lsl	w9, w9, #2
    7aa0:	mov	w10, #0x8                   	// #8
    7aa4:	csel	w9, w10, w9, lt  // lt = tstop
    7aa8:	orr	w0, w9, w8
    7aac:	ldp	x29, x30, [sp], #64
    7ab0:	ret

0000000000007ab4 <mpc_div@@Base>:
    7ab4:	sub	sp, sp, #0x160
    7ab8:	stp	x29, x30, [sp, #256]
    7abc:	stp	x28, x27, [sp, #272]
    7ac0:	stp	x26, x25, [sp, #288]
    7ac4:	stp	x24, x23, [sp, #304]
    7ac8:	stp	x22, x21, [sp, #320]
    7acc:	stp	x20, x19, [sp, #336]
    7ad0:	ldr	x9, [x2, #16]
    7ad4:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    7ad8:	mov	w23, w3
    7adc:	mov	x21, x2
    7ae0:	mov	x22, x1
    7ae4:	cmp	x9, x8
    7ae8:	mov	x19, x0
    7aec:	add	x29, sp, #0x100
    7af0:	b.ne	7b18 <mpc_div@@Base+0x64>  // b.any
    7af4:	ldr	x9, [x21, #48]
    7af8:	cmp	x9, x8
    7afc:	b.ne	7b18 <mpc_div@@Base+0x64>  // b.any
    7b00:	mov	x0, x19
    7b04:	mov	x1, x22
    7b08:	mov	x2, x21
    7b0c:	mov	w3, w23
    7b10:	bl	8350 <mpc_div@@Base+0x89c>
    7b14:	b	7c0c <mpc_div@@Base+0x158>
    7b18:	ldr	x9, [x22, #16]
    7b1c:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    7b20:	cmp	x9, x8
    7b24:	b.eq	7b34 <mpc_div@@Base+0x80>  // b.none
    7b28:	ldr	x9, [x22, #48]
    7b2c:	cmp	x9, x8
    7b30:	b.ne	7b60 <mpc_div@@Base+0xac>  // b.any
    7b34:	mov	x0, x21
    7b38:	bl	55d0 <mpfr_number_p@plt>
    7b3c:	cbz	w0, 7b60 <mpc_div@@Base+0xac>
    7b40:	add	x0, x21, #0x20
    7b44:	bl	55d0 <mpfr_number_p@plt>
    7b48:	cbz	w0, 7b60 <mpc_div@@Base+0xac>
    7b4c:	mov	x0, x19
    7b50:	mov	x1, x22
    7b54:	mov	x2, x21
    7b58:	bl	83dc <mpc_div@@Base+0x928>
    7b5c:	b	7c0c <mpc_div@@Base+0x158>
    7b60:	mov	x0, x22
    7b64:	bl	55d0 <mpfr_number_p@plt>
    7b68:	cbz	w0, 7ba8 <mpc_div@@Base+0xf4>
    7b6c:	add	x0, x22, #0x20
    7b70:	bl	55d0 <mpfr_number_p@plt>
    7b74:	cbz	w0, 7ba8 <mpc_div@@Base+0xf4>
    7b78:	ldr	x9, [x21, #16]
    7b7c:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    7b80:	cmp	x9, x8
    7b84:	b.eq	7b94 <mpc_div@@Base+0xe0>  // b.none
    7b88:	ldr	x9, [x21, #48]
    7b8c:	cmp	x9, x8
    7b90:	b.ne	7ba8 <mpc_div@@Base+0xf4>  // b.any
    7b94:	mov	x0, x19
    7b98:	mov	x1, x22
    7b9c:	mov	x2, x21
    7ba0:	bl	86d8 <mpc_div@@Base+0xc24>
    7ba4:	b	7c0c <mpc_div@@Base+0x158>
    7ba8:	mov	x0, x22
    7bac:	bl	55d0 <mpfr_number_p@plt>
    7bb0:	cbz	w0, 7c04 <mpc_div@@Base+0x150>
    7bb4:	add	x0, x22, #0x20
    7bb8:	bl	55d0 <mpfr_number_p@plt>
    7bbc:	cbz	w0, 7c04 <mpc_div@@Base+0x150>
    7bc0:	mov	x0, x21
    7bc4:	bl	55d0 <mpfr_number_p@plt>
    7bc8:	cbz	w0, 7c04 <mpc_div@@Base+0x150>
    7bcc:	add	x20, x21, #0x20
    7bd0:	mov	x0, x20
    7bd4:	bl	55d0 <mpfr_number_p@plt>
    7bd8:	cbz	w0, 7c04 <mpc_div@@Base+0x150>
    7bdc:	ldr	x9, [x21, #48]
    7be0:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    7be4:	cmp	x9, x8
    7be8:	b.ne	7c30 <mpc_div@@Base+0x17c>  // b.any
    7bec:	mov	x0, x19
    7bf0:	mov	x1, x22
    7bf4:	mov	x2, x21
    7bf8:	mov	w3, w23
    7bfc:	bl	8904 <mpc_div@@Base+0xe50>
    7c00:	b	7c10 <mpc_div@@Base+0x15c>
    7c04:	mov	x0, x19
    7c08:	bl	5000 <mpc_set_nan@plt>
    7c0c:	mov	w0, wzr
    7c10:	ldp	x20, x19, [sp, #336]
    7c14:	ldp	x22, x21, [sp, #320]
    7c18:	ldp	x24, x23, [sp, #304]
    7c1c:	ldp	x26, x25, [sp, #288]
    7c20:	ldp	x28, x27, [sp, #272]
    7c24:	ldp	x29, x30, [sp, #256]
    7c28:	add	sp, sp, #0x160
    7c2c:	ret
    7c30:	ldr	x9, [x21, #16]
    7c34:	cmp	x9, x8
    7c38:	b.ne	7c54 <mpc_div@@Base+0x1a0>  // b.any
    7c3c:	mov	x0, x19
    7c40:	mov	x1, x22
    7c44:	mov	x2, x21
    7c48:	mov	w3, w23
    7c4c:	bl	8a34 <mpc_div@@Base+0xf80>
    7c50:	b	7c10 <mpc_div@@Base+0x15c>
    7c54:	mov	x10, x19
    7c58:	ldr	x8, [x19]
    7c5c:	ldr	x9, [x10, #32]!
    7c60:	sub	x0, x29, #0x48
    7c64:	mov	w1, #0x2                   	// #2
    7c68:	and	w24, w23, #0xf
    7c6c:	cmp	x8, x9
    7c70:	str	x10, [sp, #24]
    7c74:	str	w23, [sp, #4]
    7c78:	asr	w25, w23, #4
    7c7c:	csel	x26, x8, x9, gt
    7c80:	sub	x28, x29, #0x48
    7c84:	bl	4dc0 <mpc_init2@plt>
    7c88:	add	x0, sp, #0x50
    7c8c:	bl	4b70 <mpfr_init@plt>
    7c90:	ldp	q1, q0, [x21]
    7c94:	add	x8, sp, #0x70
    7c98:	add	x0, x8, #0x20
    7c9c:	mov	x1, x0
    7ca0:	stp	q1, q0, [sp, #112]
    7ca4:	ldp	q1, q0, [x20]
    7ca8:	mov	w2, wzr
    7cac:	stp	q1, q0, [sp, #144]
    7cb0:	bl	4c50 <mpfr_neg@plt>
    7cb4:	bl	5400 <mpfr_underflow_p@plt>
    7cb8:	str	w0, [sp, #8]
    7cbc:	bl	55e0 <mpfr_overflow_p@plt>
    7cc0:	cmp	w24, #0x0
    7cc4:	add	x8, x28, #0x20
    7cc8:	stp	xzr, x8, [sp, #40]
    7ccc:	cset	w8, eq  // eq = none
    7cd0:	cmp	w25, #0x0
    7cd4:	mov	w27, wzr
    7cd8:	mov	w23, wzr
    7cdc:	str	x8, [sp, #32]
    7ce0:	cset	w8, eq  // eq = none
    7ce4:	str	w0, [sp, #12]
    7ce8:	stp	wzr, wzr, [sp, #60]
    7cec:	str	x8, [sp, #16]
    7cf0:	cmp	w27, #0x1
    7cf4:	b.hi	7d08 <mpc_div@@Base+0x254>  // b.pmore
    7cf8:	mov	x0, x26
    7cfc:	bl	4df0 <mpc_ceil_log2@plt>
    7d00:	add	x8, x0, #0x5
    7d04:	b	7d14 <mpc_div@@Base+0x260>
    7d08:	cmp	x26, #0x0
    7d0c:	cinc	x8, x26, lt  // lt = tstop
    7d10:	asr	x8, x8, #1
    7d14:	add	x26, x8, x26
    7d18:	sub	x0, x29, #0x48
    7d1c:	mov	x1, x26
    7d20:	bl	4cd0 <mpc_set_prec@plt>
    7d24:	add	x0, sp, #0x50
    7d28:	mov	x1, x26
    7d2c:	bl	4d50 <mpfr_set_prec@plt>
    7d30:	bl	4f10 <mpfr_clear_underflow@plt>
    7d34:	bl	4b20 <mpfr_clear_overflow@plt>
    7d38:	add	x0, sp, #0x50
    7d3c:	mov	w2, #0x2                   	// #2
    7d40:	mov	x1, x21
    7d44:	bl	4fa0 <mpc_norm@plt>
    7d48:	mov	w24, w0
    7d4c:	bl	5400 <mpfr_underflow_p@plt>
    7d50:	mov	w20, w0
    7d54:	bl	55e0 <mpfr_overflow_p@plt>
    7d58:	stp	w20, w0, [sp, #72]
    7d5c:	cbz	w20, 7d70 <mpc_div@@Base+0x2bc>
    7d60:	mov	w8, #0x1                   	// #1
    7d64:	str	w8, [sp, #88]
    7d68:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    7d6c:	str	x8, [sp, #96]
    7d70:	bl	4f10 <mpfr_clear_underflow@plt>
    7d74:	bl	4b20 <mpfr_clear_overflow@plt>
    7d78:	sub	x0, x29, #0x48
    7d7c:	add	x2, sp, #0x70
    7d80:	mov	w3, #0x11                  	// #17
    7d84:	mov	x1, x22
    7d88:	bl	4fe0 <mpc_mul@plt>
    7d8c:	and	w8, w0, #0x3
    7d90:	tst	w0, #0x3
    7d94:	asr	w9, w0, #2
    7d98:	cset	w10, ne  // ne = any
    7d9c:	cmp	w8, #0x2
    7da0:	csinv	w28, w10, wzr, ne  // ne = any
    7da4:	cmp	w9, #0x0
    7da8:	cset	w8, ne  // ne = any
    7dac:	cmp	w9, #0x2
    7db0:	csinv	w25, w8, wzr, ne  // ne = any
    7db4:	bl	5400 <mpfr_underflow_p@plt>
    7db8:	mov	w20, w0
    7dbc:	bl	55e0 <mpfr_overflow_p@plt>
    7dc0:	str	w0, [sp, #56]
    7dc4:	cbnz	w0, 7fdc <mpc_div@@Base+0x528>
    7dc8:	cbnz	w24, 7dd4 <mpc_div@@Base+0x320>
    7dcc:	cbz	w28, 7f2c <mpc_div@@Base+0x478>
    7dd0:	cbz	w25, 7f2c <mpc_div@@Base+0x478>
    7dd4:	add	x0, sp, #0x50
    7dd8:	add	x2, sp, #0x50
    7ddc:	mov	w1, #0x1                   	// #1
    7de0:	mov	w3, #0x1                   	// #1
    7de4:	str	w23, [sp, #68]
    7de8:	mov	w23, w20
    7dec:	bl	5080 <mpfr_ui_div@plt>
    7df0:	orr	w8, w0, w24
    7df4:	cbz	w8, 7e1c <mpc_div@@Base+0x368>
    7df8:	ldur	x8, [x29, #-56]
    7dfc:	ldur	x9, [x29, #-24]
    7e00:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    7e04:	cmp	x8, x10
    7e08:	cset	w8, ne  // ne = any
    7e0c:	cmp	x9, x10
    7e10:	orr	w28, w28, w8
    7e14:	cset	w8, ne  // ne = any
    7e18:	orr	w25, w25, w8
    7e1c:	bl	4f10 <mpfr_clear_underflow@plt>
    7e20:	bl	4b20 <mpfr_clear_overflow@plt>
    7e24:	sub	x0, x29, #0x48
    7e28:	sub	x1, x29, #0x48
    7e2c:	add	x2, sp, #0x50
    7e30:	mov	w3, #0x1                   	// #1
    7e34:	mov	w24, #0x1                   	// #1
    7e38:	bl	4c40 <mpfr_mul@plt>
    7e3c:	orr	w28, w0, w28
    7e40:	bl	5400 <mpfr_underflow_p@plt>
    7e44:	mov	w20, w0
    7e48:	bl	55e0 <mpfr_overflow_p@plt>
    7e4c:	stp	w0, w20, [sp, #60]
    7e50:	cbz	w28, 7e84 <mpc_div@@Base+0x3d0>
    7e54:	orr	w8, w0, w20
    7e58:	cbnz	w8, 7e84 <mpc_div@@Base+0x3d0>
    7e5c:	ldr	x8, [x19]
    7e60:	ldr	x9, [sp, #32]
    7e64:	sub	x1, x26, #0x4
    7e68:	sub	x0, x29, #0x48
    7e6c:	mov	w3, #0x1                   	// #1
    7e70:	add	x4, x8, x9
    7e74:	mov	w2, wzr
    7e78:	bl	5550 <mpfr_can_round@plt>
    7e7c:	cmp	w0, #0x0
    7e80:	cset	w24, ne  // ne = any
    7e84:	mov	w20, w23
    7e88:	cbz	w24, 7ef8 <mpc_div@@Base+0x444>
    7e8c:	bl	4f10 <mpfr_clear_underflow@plt>
    7e90:	bl	4b20 <mpfr_clear_overflow@plt>
    7e94:	ldr	x0, [sp, #48]
    7e98:	add	x2, sp, #0x50
    7e9c:	mov	w3, #0x1                   	// #1
    7ea0:	mov	w23, #0x1                   	// #1
    7ea4:	mov	x1, x0
    7ea8:	bl	4c40 <mpfr_mul@plt>
    7eac:	orr	w25, w0, w25
    7eb0:	bl	5400 <mpfr_underflow_p@plt>
    7eb4:	mov	w28, w0
    7eb8:	bl	55e0 <mpfr_overflow_p@plt>
    7ebc:	stp	w0, w28, [sp, #40]
    7ec0:	cbz	w25, 7efc <mpc_div@@Base+0x448>
    7ec4:	orr	w8, w0, w28
    7ec8:	cbnz	w8, 7efc <mpc_div@@Base+0x448>
    7ecc:	ldp	x9, x8, [sp, #16]
    7ed0:	ldr	x0, [sp, #48]
    7ed4:	sub	x1, x26, #0x4
    7ed8:	mov	w3, #0x1                   	// #1
    7edc:	ldr	x8, [x8]
    7ee0:	mov	w2, wzr
    7ee4:	add	x4, x8, x9
    7ee8:	bl	5550 <mpfr_can_round@plt>
    7eec:	cmp	w0, #0x0
    7ef0:	cset	w23, ne  // ne = any
    7ef4:	b	7efc <mpc_div@@Base+0x448>
    7ef8:	ldr	w23, [sp, #68]
    7efc:	cmp	w24, #0x0
    7f00:	ldp	w24, w8, [sp, #72]
    7f04:	orr	w9, w8, w24
    7f08:	cset	w8, ne  // ne = any
    7f0c:	cmp	w23, #0x0
    7f10:	orr	w10, w9, w20
    7f14:	cset	w9, ne  // ne = any
    7f18:	cbnz	w10, 8010 <mpc_div@@Base+0x55c>
    7f1c:	and	w8, w9, w8
    7f20:	add	w27, w27, #0x1
    7f24:	cbz	w8, 7cf0 <mpc_div@@Base+0x23c>
    7f28:	b	8010 <mpc_div@@Base+0x55c>
    7f2c:	str	w25, [sp, #68]
    7f30:	mov	w25, w23
    7f34:	mov	w23, w20
    7f38:	bl	4f10 <mpfr_clear_underflow@plt>
    7f3c:	bl	4b20 <mpfr_clear_overflow@plt>
    7f40:	sub	x0, x29, #0x48
    7f44:	sub	x1, x29, #0x48
    7f48:	add	x2, sp, #0x50
    7f4c:	mov	w3, #0x1                   	// #1
    7f50:	mov	w24, #0x1                   	// #1
    7f54:	bl	5260 <mpfr_div@plt>
    7f58:	orr	w28, w0, w28
    7f5c:	bl	5400 <mpfr_underflow_p@plt>
    7f60:	mov	w20, w0
    7f64:	bl	55e0 <mpfr_overflow_p@plt>
    7f68:	stp	w0, w20, [sp, #60]
    7f6c:	cbz	w28, 7fa0 <mpc_div@@Base+0x4ec>
    7f70:	orr	w8, w0, w20
    7f74:	cbnz	w8, 7fa0 <mpc_div@@Base+0x4ec>
    7f78:	ldr	x8, [x19]
    7f7c:	ldr	x9, [sp, #32]
    7f80:	sub	x1, x26, #0x4
    7f84:	sub	x0, x29, #0x48
    7f88:	mov	w3, #0x1                   	// #1
    7f8c:	add	x4, x8, x9
    7f90:	mov	w2, wzr
    7f94:	bl	5550 <mpfr_can_round@plt>
    7f98:	cmp	w0, #0x0
    7f9c:	cset	w24, ne  // ne = any
    7fa0:	mov	w20, w23
    7fa4:	cbz	w24, 7fd4 <mpc_div@@Base+0x520>
    7fa8:	bl	4f10 <mpfr_clear_underflow@plt>
    7fac:	bl	4b20 <mpfr_clear_overflow@plt>
    7fb0:	ldr	x0, [sp, #48]
    7fb4:	add	x2, sp, #0x50
    7fb8:	mov	w3, #0x1                   	// #1
    7fbc:	mov	w23, #0x1                   	// #1
    7fc0:	mov	x1, x0
    7fc4:	bl	5260 <mpfr_div@plt>
    7fc8:	ldr	w8, [sp, #68]
    7fcc:	orr	w25, w0, w8
    7fd0:	b	7eb0 <mpc_div@@Base+0x3fc>
    7fd4:	mov	w23, w25
    7fd8:	b	7efc <mpc_div@@Base+0x448>
    7fdc:	ldur	x8, [x29, #-56]
    7fe0:	mov	x9, #0x2                   	// #2
    7fe4:	movk	x9, #0x8000, lsl #48
    7fe8:	cmp	x8, x9
    7fec:	b.gt	8054 <mpc_div@@Base+0x5a0>
    7ff0:	ldr	w24, [sp, #72]
    7ff4:	mov	x26, #0x2                   	// #2
    7ff8:	movk	x26, #0x8000, lsl #48
    7ffc:	cmp	x8, x26
    8000:	b.ne	8008 <mpc_div@@Base+0x554>  // b.any
    8004:	bl	4bd0 <mpfr_set_erangeflag@plt>
    8008:	mov	w21, wzr
    800c:	b	8064 <mpc_div@@Base+0x5b0>
    8010:	ldr	w2, [sp, #4]
    8014:	sub	x1, x29, #0x48
    8018:	mov	x0, x19
    801c:	bl	5680 <mpc_set@plt>
    8020:	and	w8, w0, #0x3
    8024:	tst	w0, #0x3
    8028:	asr	w9, w0, #2
    802c:	cset	w10, ne  // ne = any
    8030:	cmp	w8, #0x2
    8034:	csinv	w28, w10, wzr, ne  // ne = any
    8038:	cmp	w9, #0x0
    803c:	cset	w8, ne  // ne = any
    8040:	cmp	w9, #0x2
    8044:	mov	x26, #0x2                   	// #2
    8048:	csinv	w25, w8, wzr, ne  // ne = any
    804c:	movk	x26, #0x8000, lsl #48
    8050:	b	8134 <mpc_div@@Base+0x680>
    8054:	ldur	w21, [x29, #-64]
    8058:	ldr	w24, [sp, #72]
    805c:	mov	x26, #0x2                   	// #2
    8060:	movk	x26, #0x8000, lsl #48
    8064:	cmp	w21, #0x1
    8068:	b.lt	80a4 <mpc_div@@Base+0x5f0>  // b.tstop
    806c:	sub	x0, x29, #0x48
    8070:	bl	4ef0 <mpfr_nextabove@plt>
    8074:	ldur	x22, [x29, #-56]
    8078:	sub	x0, x29, #0x48
    807c:	bl	4c80 <mpfr_nextbelow@plt>
    8080:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    8084:	cmp	x22, x8
    8088:	b.ne	80a8 <mpc_div@@Base+0x5f4>  // b.any
    808c:	sub	x0, x29, #0x48
    8090:	mov	w1, w21
    8094:	bl	5230 <mpfr_set_inf@plt>
    8098:	mov	w8, #0x1                   	// #1
    809c:	str	w8, [sp, #60]
    80a0:	b	80a8 <mpc_div@@Base+0x5f4>
    80a4:	tbnz	w21, #31, 8320 <mpc_div@@Base+0x86c>
    80a8:	ldur	x8, [x29, #-24]
    80ac:	mov	x10, #0x2                   	// #2
    80b0:	sub	x9, x29, #0x48
    80b4:	movk	x10, #0x8000, lsl #48
    80b8:	cmp	x8, x10
    80bc:	add	x21, x9, #0x20
    80c0:	b.gt	80d8 <mpc_div@@Base+0x624>
    80c4:	cmp	x8, x26
    80c8:	b.ne	80d0 <mpc_div@@Base+0x61c>  // b.any
    80cc:	bl	4bd0 <mpfr_set_erangeflag@plt>
    80d0:	mov	w22, wzr
    80d4:	b	80dc <mpc_div@@Base+0x628>
    80d8:	ldur	w22, [x29, #-32]
    80dc:	cmp	w22, #0x1
    80e0:	b.lt	8120 <mpc_div@@Base+0x66c>  // b.tstop
    80e4:	mov	x0, x21
    80e8:	bl	4ef0 <mpfr_nextabove@plt>
    80ec:	ldur	x24, [x29, #-24]
    80f0:	mov	x0, x21
    80f4:	bl	4c80 <mpfr_nextbelow@plt>
    80f8:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    80fc:	cmp	x24, x8
    8100:	ldr	w24, [sp, #72]
    8104:	b.ne	8124 <mpc_div@@Base+0x670>  // b.any
    8108:	mov	x0, x21
    810c:	mov	w1, w22
    8110:	bl	5230 <mpfr_set_inf@plt>
    8114:	mov	w8, #0x1                   	// #1
    8118:	str	w8, [sp, #40]
    811c:	b	8124 <mpc_div@@Base+0x670>
    8120:	tbnz	w22, #31, 8338 <mpc_div@@Base+0x884>
    8124:	ldr	w2, [sp, #4]
    8128:	sub	x1, x29, #0x48
    812c:	mov	x0, x19
    8130:	bl	5680 <mpc_set@plt>
    8134:	ldr	w21, [sp, #44]
    8138:	ldr	w10, [sp, #64]
    813c:	cmp	w24, #0x0
    8140:	cset	w8, ne  // ne = any
    8144:	cmp	w20, #0x0
    8148:	cset	w9, eq  // eq = none
    814c:	and	w8, w8, w9
    8150:	tbnz	w8, #0, 81a0 <mpc_div@@Base+0x6ec>
    8154:	ldr	w8, [sp, #60]
    8158:	cbnz	w8, 81a0 <mpc_div@@Base+0x6ec>
    815c:	ldr	w8, [sp, #56]
    8160:	ldr	w9, [sp, #76]
    8164:	cmp	w8, #0x0
    8168:	cset	w8, eq  // eq = none
    816c:	cmp	w9, #0x0
    8170:	cset	w9, ne  // ne = any
    8174:	and	w8, w9, w8
    8178:	tbnz	w8, #0, 8180 <mpc_div@@Base+0x6cc>
    817c:	cbz	w10, 8200 <mpc_div@@Base+0x74c>
    8180:	ldur	w8, [x29, #-64]
    8184:	mov	x0, x19
    8188:	cmp	w8, #0x0
    818c:	mov	w8, #0xffffffff            	// #-1
    8190:	cneg	w28, w8, lt  // lt = tstop
    8194:	neg	w1, w28
    8198:	bl	4de0 <mpfr_set_zero@plt>
    819c:	b	8200 <mpc_div@@Base+0x74c>
    81a0:	ldur	x8, [x29, #-56]
    81a4:	mov	x9, #0x2                   	// #2
    81a8:	movk	x9, #0x8000, lsl #48
    81ac:	cmp	x8, x9
    81b0:	b.gt	81c8 <mpc_div@@Base+0x714>
    81b4:	cmp	x8, x26
    81b8:	b.ne	81c0 <mpc_div@@Base+0x70c>  // b.any
    81bc:	bl	4bd0 <mpfr_set_erangeflag@plt>
    81c0:	mov	w1, wzr
    81c4:	b	81cc <mpc_div@@Base+0x718>
    81c8:	ldur	w1, [x29, #-64]
    81cc:	mov	x0, x19
    81d0:	bl	5230 <mpfr_set_inf@plt>
    81d4:	ldur	x8, [x29, #-56]
    81d8:	mov	x9, #0x2                   	// #2
    81dc:	movk	x9, #0x8000, lsl #48
    81e0:	cmp	x8, x9
    81e4:	b.gt	81fc <mpc_div@@Base+0x748>
    81e8:	cmp	x8, x26
    81ec:	b.ne	81f4 <mpc_div@@Base+0x740>  // b.any
    81f0:	bl	4bd0 <mpfr_set_erangeflag@plt>
    81f4:	mov	w28, wzr
    81f8:	b	8200 <mpc_div@@Base+0x74c>
    81fc:	ldur	w28, [x29, #-64]
    8200:	cmp	w24, #0x0
    8204:	cset	w8, ne  // ne = any
    8208:	cmp	w20, #0x0
    820c:	cset	w9, eq  // eq = none
    8210:	and	w8, w8, w9
    8214:	tbnz	w8, #0, 8268 <mpc_div@@Base+0x7b4>
    8218:	ldr	w8, [sp, #40]
    821c:	cbnz	w8, 8268 <mpc_div@@Base+0x7b4>
    8220:	ldr	w8, [sp, #56]
    8224:	ldr	w9, [sp, #76]
    8228:	ldp	w20, w19, [sp, #8]
    822c:	cmp	w8, #0x0
    8230:	cset	w8, eq  // eq = none
    8234:	cmp	w9, #0x0
    8238:	cset	w9, ne  // ne = any
    823c:	and	w8, w9, w8
    8240:	tbnz	w8, #0, 8248 <mpc_div@@Base+0x794>
    8244:	cbz	w21, 82d4 <mpc_div@@Base+0x820>
    8248:	ldur	w8, [x29, #-32]
    824c:	ldr	x0, [sp, #24]
    8250:	cmp	w8, #0x0
    8254:	mov	w8, #0xffffffff            	// #-1
    8258:	cneg	w25, w8, lt  // lt = tstop
    825c:	neg	w1, w25
    8260:	bl	4de0 <mpfr_set_zero@plt>
    8264:	b	82d4 <mpc_div@@Base+0x820>
    8268:	ldur	x8, [x29, #-24]
    826c:	mov	x9, #0x2                   	// #2
    8270:	movk	x9, #0x8000, lsl #48
    8274:	cmp	x8, x9
    8278:	b.gt	8294 <mpc_div@@Base+0x7e0>
    827c:	ldr	w19, [sp, #12]
    8280:	cmp	x8, x26
    8284:	b.ne	828c <mpc_div@@Base+0x7d8>  // b.any
    8288:	bl	4bd0 <mpfr_set_erangeflag@plt>
    828c:	mov	w1, wzr
    8290:	b	829c <mpc_div@@Base+0x7e8>
    8294:	ldur	w1, [x29, #-32]
    8298:	ldr	w19, [sp, #12]
    829c:	ldr	x0, [sp, #24]
    82a0:	ldr	w20, [sp, #8]
    82a4:	bl	5230 <mpfr_set_inf@plt>
    82a8:	ldur	x8, [x29, #-24]
    82ac:	mov	x9, #0x2                   	// #2
    82b0:	movk	x9, #0x8000, lsl #48
    82b4:	cmp	x8, x9
    82b8:	b.gt	82d0 <mpc_div@@Base+0x81c>
    82bc:	cmp	x8, x26
    82c0:	b.ne	82c8 <mpc_div@@Base+0x814>  // b.any
    82c4:	bl	4bd0 <mpfr_set_erangeflag@plt>
    82c8:	mov	w25, wzr
    82cc:	b	82d4 <mpc_div@@Base+0x820>
    82d0:	ldur	w25, [x29, #-32]
    82d4:	sub	x0, x29, #0x48
    82d8:	bl	4ae0 <mpc_clear@plt>
    82dc:	add	x0, sp, #0x50
    82e0:	bl	4e40 <mpfr_clear@plt>
    82e4:	cbz	w20, 82ec <mpc_div@@Base+0x838>
    82e8:	bl	4a60 <mpfr_set_underflow@plt>
    82ec:	cbz	w19, 82f4 <mpc_div@@Base+0x840>
    82f0:	bl	5590 <mpfr_set_overflow@plt>
    82f4:	cmp	w28, #0x0
    82f8:	mov	w8, #0x2                   	// #2
    82fc:	cset	w9, ne  // ne = any
    8300:	csel	w8, w8, w9, lt  // lt = tstop
    8304:	cmp	w25, #0x0
    8308:	cset	w9, ne  // ne = any
    830c:	lsl	w9, w9, #2
    8310:	mov	w10, #0x8                   	// #8
    8314:	csel	w9, w10, w9, lt  // lt = tstop
    8318:	orr	w0, w9, w8
    831c:	b	7c10 <mpc_div@@Base+0x15c>
    8320:	sub	x0, x29, #0x48
    8324:	bl	4c80 <mpfr_nextbelow@plt>
    8328:	ldur	x22, [x29, #-56]
    832c:	sub	x0, x29, #0x48
    8330:	bl	4ef0 <mpfr_nextabove@plt>
    8334:	b	8080 <mpc_div@@Base+0x5cc>
    8338:	mov	x0, x21
    833c:	bl	4c80 <mpfr_nextbelow@plt>
    8340:	ldur	x24, [x29, #-24]
    8344:	mov	x0, x21
    8348:	bl	4ef0 <mpfr_nextabove@plt>
    834c:	b	80f8 <mpc_div@@Base+0x644>
    8350:	sub	sp, sp, #0x50
    8354:	stp	x29, x30, [sp, #32]
    8358:	stp	x22, x21, [sp, #48]
    835c:	stp	x20, x19, [sp, #64]
    8360:	ldr	w8, [x2, #8]
    8364:	mov	x20, x1
    8368:	mov	x21, x0
    836c:	mov	x0, sp
    8370:	cmp	w8, #0x0
    8374:	mov	w8, #0x1                   	// #1
    8378:	mov	w1, #0x1                   	// #1
    837c:	add	x29, sp, #0x20
    8380:	mov	w19, w3
    8384:	cneg	w22, w8, lt  // lt = tstop
    8388:	bl	5540 <mpfr_init2@plt>
    838c:	mov	x0, sp
    8390:	mov	w1, w22
    8394:	bl	5230 <mpfr_set_inf@plt>
    8398:	and	w3, w19, #0xf
    839c:	mov	x1, sp
    83a0:	mov	x0, x21
    83a4:	mov	x2, x20
    83a8:	bl	4c40 <mpfr_mul@plt>
    83ac:	add	x0, x21, #0x20
    83b0:	add	x2, x20, #0x20
    83b4:	asr	w3, w19, #4
    83b8:	mov	x1, sp
    83bc:	bl	4c40 <mpfr_mul@plt>
    83c0:	mov	x0, sp
    83c4:	bl	4e40 <mpfr_clear@plt>
    83c8:	ldp	x20, x19, [sp, #64]
    83cc:	ldp	x22, x21, [sp, #48]
    83d0:	ldp	x29, x30, [sp, #32]
    83d4:	add	sp, sp, #0x50
    83d8:	ret
    83dc:	sub	sp, sp, #0x60
    83e0:	stp	x29, x30, [sp, #32]
    83e4:	stp	x22, x21, [sp, #64]
    83e8:	stp	x20, x19, [sp, #80]
    83ec:	ldr	x9, [x1, #16]
    83f0:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    83f4:	mov	x20, x2
    83f8:	mov	x19, x0
    83fc:	cmp	x9, x8
    8400:	str	x23, [sp, #48]
    8404:	add	x29, sp, #0x20
    8408:	b.ne	8420 <mpc_div@@Base+0x96c>  // b.any
    840c:	ldr	w9, [x1, #8]
    8410:	cmp	w9, #0x0
    8414:	mov	w9, #0x1                   	// #1
    8418:	cneg	w22, w9, lt  // lt = tstop
    841c:	b	8424 <mpc_div@@Base+0x970>
    8420:	mov	w22, wzr
    8424:	ldr	x9, [x1, #48]
    8428:	cmp	x9, x8
    842c:	b.ne	8448 <mpc_div@@Base+0x994>  // b.any
    8430:	ldr	w8, [x1, #40]
    8434:	cmp	w8, #0x0
    8438:	mov	w8, #0x1                   	// #1
    843c:	cneg	w23, w8, lt  // lt = tstop
    8440:	cbnz	w22, 8450 <mpc_div@@Base+0x99c>
    8444:	b	84bc <mpc_div@@Base+0xa08>
    8448:	mov	w23, wzr
    844c:	cbz	w22, 84bc <mpc_div@@Base+0xa08>
    8450:	cbz	w23, 84bc <mpc_div@@Base+0xa08>
    8454:	mov	x0, sp
    8458:	mov	w1, #0x2                   	// #2
    845c:	bl	5540 <mpfr_init2@plt>
    8460:	cmp	w22, #0x1
    8464:	b.ne	84d4 <mpc_div@@Base+0xa20>  // b.any
    8468:	add	x22, x20, #0x20
    846c:	cmp	w23, #0x1
    8470:	mov	x0, sp
    8474:	mov	x1, x20
    8478:	mov	x2, x22
    847c:	mov	w3, wzr
    8480:	b.ne	85e8 <mpc_div@@Base+0xb34>  // b.any
    8484:	bl	4f60 <mpfr_add@plt>
    8488:	ldr	w8, [sp, #8]
    848c:	ldr	x9, [sp, #16]
    8490:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    8494:	mov	x0, sp
    8498:	cmp	w8, #0x0
    849c:	cneg	w8, w23, lt  // lt = tstop
    84a0:	cmp	x9, x10
    84a4:	mov	x1, x20
    84a8:	mov	x2, x22
    84ac:	mov	w3, wzr
    84b0:	csel	w21, wzr, w8, eq  // eq = none
    84b4:	bl	4b30 <mpfr_sub@plt>
    84b8:	b	8524 <mpc_div@@Base+0xa70>
    84bc:	ldr	x8, [x20, #16]
    84c0:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
    84c4:	cmp	x8, x11
    84c8:	b.ne	8538 <mpc_div@@Base+0xa84>  // b.any
    84cc:	mov	w10, wzr
    84d0:	b	8548 <mpc_div@@Base+0xa94>
    84d4:	add	x22, x20, #0x20
    84d8:	mov	x0, sp
    84dc:	cmp	w23, #0x1
    84e0:	b.ne	8634 <mpc_div@@Base+0xb80>  // b.any
    84e4:	mov	x1, x22
    84e8:	mov	x2, x20
    84ec:	mov	w3, wzr
    84f0:	bl	4b30 <mpfr_sub@plt>
    84f4:	ldr	w8, [sp, #8]
    84f8:	ldr	x9, [sp, #16]
    84fc:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    8500:	mov	x0, sp
    8504:	cmp	w8, #0x0
    8508:	cneg	w8, w23, lt  // lt = tstop
    850c:	cmp	x9, x10
    8510:	mov	x1, x20
    8514:	mov	x2, x22
    8518:	mov	w3, wzr
    851c:	csel	w21, wzr, w8, eq  // eq = none
    8520:	bl	4f60 <mpfr_add@plt>
    8524:	ldr	w9, [sp, #8]
    8528:	ldr	x8, [sp, #16]
    852c:	cmp	w9, #0x0
    8530:	cneg	w9, w23, lt  // lt = tstop
    8534:	b	868c <mpc_div@@Base+0xbd8>
    8538:	ldr	w9, [x20, #8]
    853c:	cmp	w9, #0x0
    8540:	mov	w9, #0x1                   	// #1
    8544:	cneg	w10, w9, lt  // lt = tstop
    8548:	ldr	x9, [x20, #48]
    854c:	cmp	x9, x11
    8550:	b.ne	855c <mpc_div@@Base+0xaa8>  // b.any
    8554:	mov	w11, wzr
    8558:	b	856c <mpc_div@@Base+0xab8>
    855c:	ldr	w11, [x20, #40]
    8560:	cmp	w11, #0x0
    8564:	mov	w11, #0x1                   	// #1
    8568:	cneg	w11, w11, lt  // lt = tstop
    856c:	mov	x12, #0x8000000000000001    	// #-9223372036854775807
    8570:	cmp	x8, x12
    8574:	mul	w8, w10, w22
    8578:	b.ne	8584 <mpc_div@@Base+0xad0>  // b.any
    857c:	mov	w10, wzr
    8580:	b	8594 <mpc_div@@Base+0xae0>
    8584:	ldr	w10, [x20, #8]
    8588:	cmp	w10, #0x0
    858c:	mov	w10, #0x1                   	// #1
    8590:	cneg	w10, w10, lt  // lt = tstop
    8594:	madd	w21, w11, w23, w8
    8598:	cmp	x9, x12
    859c:	mul	w8, w10, w23
    85a0:	b.ne	85b8 <mpc_div@@Base+0xb04>  // b.any
    85a4:	mov	w9, wzr
    85a8:	msub	w20, wzr, w22, w8
    85ac:	mov	x0, x19
    85b0:	cbnz	w21, 86a8 <mpc_div@@Base+0xbf4>
    85b4:	b	85d4 <mpc_div@@Base+0xb20>
    85b8:	ldr	w9, [x20, #40]
    85bc:	cmp	w9, #0x0
    85c0:	mov	w9, #0x1                   	// #1
    85c4:	cneg	w9, w9, lt  // lt = tstop
    85c8:	msub	w20, w9, w22, w8
    85cc:	mov	x0, x19
    85d0:	cbnz	w21, 86a8 <mpc_div@@Base+0xbf4>
    85d4:	bl	4b10 <mpfr_set_nan@plt>
    85d8:	add	x0, x19, #0x20
    85dc:	cbnz	w20, 86b8 <mpc_div@@Base+0xc04>
    85e0:	bl	4b10 <mpfr_set_nan@plt>
    85e4:	b	86c0 <mpc_div@@Base+0xc0c>
    85e8:	bl	4b30 <mpfr_sub@plt>
    85ec:	ldr	w8, [sp, #8]
    85f0:	ldr	x9, [sp, #16]
    85f4:	mov	w10, #0x1                   	// #1
    85f8:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
    85fc:	cmp	w8, #0x0
    8600:	cneg	w8, w10, lt  // lt = tstop
    8604:	cmp	x9, x11
    8608:	mov	x0, sp
    860c:	mov	x1, x20
    8610:	mov	x2, x22
    8614:	mov	w3, wzr
    8618:	csel	w21, wzr, w8, eq  // eq = none
    861c:	bl	4f60 <mpfr_add@plt>
    8620:	ldr	w9, [sp, #8]
    8624:	ldr	x8, [sp, #16]
    8628:	cmp	w9, #0x0
    862c:	mov	w9, #0xffffffff            	// #-1
    8630:	b	8688 <mpc_div@@Base+0xbd4>
    8634:	mov	x1, x20
    8638:	mov	x2, x22
    863c:	mov	w3, wzr
    8640:	bl	4f60 <mpfr_add@plt>
    8644:	ldr	w8, [sp, #8]
    8648:	ldr	x9, [sp, #16]
    864c:	mov	w10, #0xffffffff            	// #-1
    8650:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
    8654:	cmp	w8, #0x0
    8658:	cneg	w8, w10, lt  // lt = tstop
    865c:	cmp	x9, x11
    8660:	mov	x0, sp
    8664:	mov	x1, x22
    8668:	mov	x2, x20
    866c:	mov	w3, wzr
    8670:	csel	w21, wzr, w8, eq  // eq = none
    8674:	bl	4b30 <mpfr_sub@plt>
    8678:	ldr	w9, [sp, #8]
    867c:	ldr	x8, [sp, #16]
    8680:	cmp	w9, #0x0
    8684:	mov	w9, #0x1                   	// #1
    8688:	cneg	w9, w9, lt  // lt = tstop
    868c:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    8690:	cmp	x8, x10
    8694:	mov	x0, sp
    8698:	csel	w20, wzr, w9, eq  // eq = none
    869c:	bl	4e40 <mpfr_clear@plt>
    86a0:	mov	x0, x19
    86a4:	cbz	w21, 85d4 <mpc_div@@Base+0xb20>
    86a8:	mov	w1, w21
    86ac:	bl	5230 <mpfr_set_inf@plt>
    86b0:	add	x0, x19, #0x20
    86b4:	cbz	w20, 85e0 <mpc_div@@Base+0xb2c>
    86b8:	mov	w1, w20
    86bc:	bl	5230 <mpfr_set_inf@plt>
    86c0:	ldp	x20, x19, [sp, #80]
    86c4:	ldp	x22, x21, [sp, #64]
    86c8:	ldr	x23, [sp, #48]
    86cc:	ldp	x29, x30, [sp, #32]
    86d0:	add	sp, sp, #0x60
    86d4:	ret
    86d8:	sub	sp, sp, #0x130
    86dc:	stp	x29, x30, [sp, #224]
    86e0:	add	x29, sp, #0xe0
    86e4:	stp	x24, x23, [sp, #256]
    86e8:	stp	x20, x19, [sp, #288]
    86ec:	mov	x20, x1
    86f0:	mov	x19, x0
    86f4:	mov	x24, #0x2                   	// #2
    86f8:	sub	x0, x29, #0x20
    86fc:	mov	w1, #0x2                   	// #2
    8700:	stp	x28, x25, [sp, #240]
    8704:	stp	x22, x21, [sp, #272]
    8708:	mov	x22, x2
    870c:	movk	x24, #0x8000, lsl #48
    8710:	bl	5540 <mpfr_init2@plt>
    8714:	sub	x0, x29, #0x40
    8718:	mov	w1, #0x2                   	// #2
    871c:	bl	5540 <mpfr_init2@plt>
    8720:	add	x0, sp, #0x40
    8724:	mov	w1, #0x2                   	// #2
    8728:	bl	5540 <mpfr_init2@plt>
    872c:	add	x0, sp, #0x20
    8730:	mov	w1, #0x2                   	// #2
    8734:	bl	5540 <mpfr_init2@plt>
    8738:	mov	x0, sp
    873c:	mov	w1, #0x2                   	// #2
    8740:	bl	5540 <mpfr_init2@plt>
    8744:	mov	w23, #0x1                   	// #1
    8748:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    874c:	str	w23, [sp, #8]
    8750:	str	x8, [sp, #16]
    8754:	ldr	x1, [x20]
    8758:	sub	x0, x29, #0x60
    875c:	bl	5540 <mpfr_init2@plt>
    8760:	mov	x21, x20
    8764:	ldr	x1, [x21, #32]!
    8768:	add	x0, sp, #0x60
    876c:	bl	5540 <mpfr_init2@plt>
    8770:	ldr	x8, [x22, #16]
    8774:	mov	x25, #0x8000000000000003    	// #-9223372036854775805
    8778:	sub	x0, x29, #0x20
    877c:	mov	x2, xzr
    8780:	cmp	x8, x25
    8784:	cset	w1, eq  // eq = none
    8788:	mov	w3, wzr
    878c:	bl	5240 <mpfr_set_ui_2exp@plt>
    8790:	ldr	x8, [x22, #16]
    8794:	cmp	x8, x24
    8798:	b.eq	87a0 <mpc_div@@Base+0xcec>  // b.none
    879c:	ldr	w23, [x22, #8]
    87a0:	sub	x0, x29, #0x20
    87a4:	sub	x1, x29, #0x20
    87a8:	mov	w2, wzr
    87ac:	mov	w3, w23
    87b0:	bl	52e0 <mpfr_set4@plt>
    87b4:	ldr	x8, [x22, #48]
    87b8:	sub	x0, x29, #0x40
    87bc:	mov	x2, xzr
    87c0:	mov	w3, wzr
    87c4:	cmp	x8, x25
    87c8:	cset	w1, eq  // eq = none
    87cc:	bl	5240 <mpfr_set_ui_2exp@plt>
    87d0:	ldr	x8, [x22, #48]
    87d4:	cmp	x8, x24
    87d8:	b.ne	87e4 <mpc_div@@Base+0xd30>  // b.any
    87dc:	mov	w3, #0x1                   	// #1
    87e0:	b	87e8 <mpc_div@@Base+0xd34>
    87e4:	ldr	w3, [x22, #40]
    87e8:	sub	x0, x29, #0x40
    87ec:	sub	x1, x29, #0x40
    87f0:	mov	w2, wzr
    87f4:	bl	52e0 <mpfr_set4@plt>
    87f8:	sub	x0, x29, #0x60
    87fc:	sub	x2, x29, #0x20
    8800:	mov	x1, x20
    8804:	mov	w3, wzr
    8808:	bl	4c40 <mpfr_mul@plt>
    880c:	add	x0, sp, #0x60
    8810:	sub	x2, x29, #0x40
    8814:	mov	x1, x21
    8818:	mov	w3, wzr
    881c:	bl	4c40 <mpfr_mul@plt>
    8820:	add	x0, sp, #0x40
    8824:	sub	x1, x29, #0x60
    8828:	add	x2, sp, #0x60
    882c:	mov	w3, wzr
    8830:	bl	4f60 <mpfr_add@plt>
    8834:	add	x0, sp, #0x60
    8838:	sub	x2, x29, #0x20
    883c:	mov	x1, x21
    8840:	mov	w3, wzr
    8844:	bl	4c40 <mpfr_mul@plt>
    8848:	sub	x0, x29, #0x60
    884c:	sub	x2, x29, #0x40
    8850:	mov	x1, x20
    8854:	mov	w3, wzr
    8858:	bl	4c40 <mpfr_mul@plt>
    885c:	add	x0, sp, #0x20
    8860:	add	x1, sp, #0x60
    8864:	sub	x2, x29, #0x60
    8868:	mov	w3, wzr
    886c:	bl	4b30 <mpfr_sub@plt>
    8870:	ldr	x8, [sp, #80]
    8874:	ldr	w9, [sp, #72]
    8878:	mov	x1, sp
    887c:	mov	x0, x19
    8880:	cmp	x8, x24
    8884:	csinc	w3, w9, wzr, ne  // ne = any
    8888:	mov	w2, wzr
    888c:	bl	52e0 <mpfr_set4@plt>
    8890:	ldr	x8, [sp, #48]
    8894:	ldr	w9, [sp, #40]
    8898:	add	x0, x19, #0x20
    889c:	mov	x1, sp
    88a0:	cmp	x8, x24
    88a4:	csinc	w3, w9, wzr, ne  // ne = any
    88a8:	mov	w2, wzr
    88ac:	bl	52e0 <mpfr_set4@plt>
    88b0:	sub	x0, x29, #0x20
    88b4:	bl	4e40 <mpfr_clear@plt>
    88b8:	sub	x0, x29, #0x40
    88bc:	bl	4e40 <mpfr_clear@plt>
    88c0:	add	x0, sp, #0x40
    88c4:	bl	4e40 <mpfr_clear@plt>
    88c8:	add	x0, sp, #0x20
    88cc:	bl	4e40 <mpfr_clear@plt>
    88d0:	mov	x0, sp
    88d4:	bl	4e40 <mpfr_clear@plt>
    88d8:	sub	x0, x29, #0x60
    88dc:	bl	4e40 <mpfr_clear@plt>
    88e0:	add	x0, sp, #0x60
    88e4:	bl	4e40 <mpfr_clear@plt>
    88e8:	ldp	x20, x19, [sp, #288]
    88ec:	ldp	x22, x21, [sp, #272]
    88f0:	ldp	x24, x23, [sp, #256]
    88f4:	ldp	x28, x25, [sp, #240]
    88f8:	ldp	x29, x30, [sp, #224]
    88fc:	add	sp, sp, #0x130
    8900:	ret
    8904:	stp	x29, x30, [sp, #-96]!
    8908:	stp	x28, x27, [sp, #16]
    890c:	stp	x26, x25, [sp, #32]
    8910:	stp	x24, x23, [sp, #48]
    8914:	stp	x22, x21, [sp, #64]
    8918:	stp	x20, x19, [sp, #80]
    891c:	mov	x24, x1
    8920:	ldr	w8, [x1, #8]
    8924:	ldr	w10, [x24, #40]
    8928:	ldr	w11, [x2, #8]
    892c:	ldr	w12, [x2, #40]
    8930:	mov	w9, #0x1                   	// #1
    8934:	cmp	w8, #0x0
    8938:	cneg	w25, w9, lt  // lt = tstop
    893c:	cmp	w10, #0x0
    8940:	add	x21, x0, #0x20
    8944:	cneg	w26, w9, lt  // lt = tstop
    8948:	cmp	w11, #0x0
    894c:	mov	w22, w3
    8950:	mov	x19, x0
    8954:	add	x1, x1, #0x20
    8958:	cneg	w27, w9, lt  // lt = tstop
    895c:	cmp	w12, #0x0
    8960:	asr	w3, w3, #4
    8964:	mov	x0, x21
    8968:	mov	x29, sp
    896c:	mov	x23, x2
    8970:	cneg	w28, w9, lt  // lt = tstop
    8974:	bl	5260 <mpfr_div@plt>
    8978:	mov	w20, w0
    897c:	and	w3, w22, #0xf
    8980:	mov	x0, x19
    8984:	mov	x1, x24
    8988:	mov	x2, x23
    898c:	bl	5260 <mpfr_div@plt>
    8990:	ldr	x8, [x19, #16]
    8994:	mov	x23, #0x8000000000000001    	// #-9223372036854775807
    8998:	mov	w22, w0
    899c:	cmp	x8, x23
    89a0:	b.ne	89c4 <mpc_div@@Base+0xf10>  // b.any
    89a4:	cmp	w26, w28
    89a8:	ccmp	w25, w27, #0x4, ne  // ne = any
    89ac:	mov	w8, #0xffffffff            	// #-1
    89b0:	cneg	w3, w8, eq  // eq = none
    89b4:	mov	x0, x19
    89b8:	mov	x1, x19
    89bc:	mov	w2, wzr
    89c0:	bl	52e0 <mpfr_set4@plt>
    89c4:	ldr	x8, [x19, #48]
    89c8:	cmp	x8, x23
    89cc:	b.ne	89f0 <mpc_div@@Base+0xf3c>  // b.any
    89d0:	cmp	w25, w28
    89d4:	ccmp	w26, w27, #0x4, eq  // eq = none
    89d8:	mov	w8, #0xffffffff            	// #-1
    89dc:	cneg	w3, w8, eq  // eq = none
    89e0:	mov	x0, x21
    89e4:	mov	x1, x21
    89e8:	mov	w2, wzr
    89ec:	bl	52e0 <mpfr_set4@plt>
    89f0:	cmp	w22, #0x0
    89f4:	mov	w8, #0x2                   	// #2
    89f8:	cset	w9, ne  // ne = any
    89fc:	csel	w8, w8, w9, lt  // lt = tstop
    8a00:	cmp	w20, #0x0
    8a04:	cset	w9, ne  // ne = any
    8a08:	ldp	x20, x19, [sp, #80]
    8a0c:	ldp	x22, x21, [sp, #64]
    8a10:	ldp	x24, x23, [sp, #48]
    8a14:	ldp	x26, x25, [sp, #32]
    8a18:	ldp	x28, x27, [sp, #16]
    8a1c:	lsl	w9, w9, #2
    8a20:	mov	w10, #0x8                   	// #8
    8a24:	csel	w9, w10, w9, lt  // lt = tstop
    8a28:	orr	w0, w8, w9
    8a2c:	ldp	x29, x30, [sp], #96
    8a30:	ret
    8a34:	sub	sp, sp, #0xd0
    8a38:	stp	x29, x30, [sp, #112]
    8a3c:	stp	x28, x27, [sp, #128]
    8a40:	stp	x26, x25, [sp, #144]
    8a44:	stp	x24, x23, [sp, #160]
    8a48:	stp	x22, x21, [sp, #176]
    8a4c:	stp	x20, x19, [sp, #192]
    8a50:	cmp	x0, x1
    8a54:	ldr	x8, [x1, #16]
    8a58:	ldr	w9, [x1, #8]
    8a5c:	cset	w13, eq  // eq = none
    8a60:	cmp	x0, x2
    8a64:	ldr	w11, [x1, #40]
    8a68:	cset	w14, eq  // eq = none
    8a6c:	ldr	w12, [x2, #8]
    8a70:	orr	w24, w13, w14
    8a74:	str	x8, [sp, #8]
    8a78:	add	x8, sp, #0x10
    8a7c:	ldr	w13, [x2, #40]
    8a80:	cmp	w24, #0x0
    8a84:	mov	w10, #0x1                   	// #1
    8a88:	csel	x23, x8, x0, ne  // ne = any
    8a8c:	cmp	w9, #0x0
    8a90:	cneg	w8, w10, lt  // lt = tstop
    8a94:	cmp	w11, #0x0
    8a98:	cneg	w26, w10, lt  // lt = tstop
    8a9c:	cmp	w12, #0x0
    8aa0:	cneg	w27, w10, lt  // lt = tstop
    8aa4:	cmp	w13, #0x0
    8aa8:	mov	w22, w3
    8aac:	mov	x21, x1
    8ab0:	mov	x19, x0
    8ab4:	add	x20, x1, #0x20
    8ab8:	add	x25, x2, #0x20
    8abc:	cneg	w28, w10, lt  // lt = tstop
    8ac0:	add	x29, sp, #0x70
    8ac4:	str	w8, [sp, #4]
    8ac8:	cbz	w24, 8adc <mpc_div@@Base+0x1028>
    8acc:	ldr	x1, [x19]
    8ad0:	ldr	x2, [x19, #32]
    8ad4:	add	x0, sp, #0x10
    8ad8:	bl	54d0 <mpc_init3@plt>
    8adc:	ldp	q1, q0, [x25]
    8ae0:	and	w3, w22, #0xf
    8ae4:	sub	x2, x29, #0x20
    8ae8:	mov	x0, x23
    8aec:	mov	x1, x20
    8af0:	stp	q1, q0, [x29, #-32]
    8af4:	bl	5260 <mpfr_div@plt>
    8af8:	mov	w20, w0
    8afc:	sub	x0, x29, #0x20
    8b00:	sub	x1, x29, #0x20
    8b04:	mov	w2, wzr
    8b08:	bl	4c50 <mpfr_neg@plt>
    8b0c:	add	x0, x23, #0x20
    8b10:	asr	w3, w22, #4
    8b14:	sub	x2, x29, #0x20
    8b18:	mov	x1, x21
    8b1c:	bl	5260 <mpfr_div@plt>
    8b20:	mov	w21, w0
    8b24:	cbz	w24, 8b40 <mpc_div@@Base+0x108c>
    8b28:	add	x1, sp, #0x10
    8b2c:	mov	x0, x19
    8b30:	mov	w2, wzr
    8b34:	bl	5680 <mpc_set@plt>
    8b38:	add	x0, sp, #0x10
    8b3c:	bl	4ae0 <mpc_clear@plt>
    8b40:	ldr	x8, [x19, #16]
    8b44:	mov	x22, #0x8000000000000001    	// #-9223372036854775807
    8b48:	cmp	x8, x22
    8b4c:	b.ne	8b74 <mpc_div@@Base+0x10c0>  // b.any
    8b50:	ldr	w8, [sp, #4]
    8b54:	cmp	w26, w28
    8b58:	mov	x0, x19
    8b5c:	mov	x1, x19
    8b60:	ccmp	w8, w27, #0x4, ne  // ne = any
    8b64:	mov	w8, #0xffffffff            	// #-1
    8b68:	cneg	w3, w8, eq  // eq = none
    8b6c:	mov	w2, wzr
    8b70:	bl	52e0 <mpfr_set4@plt>
    8b74:	ldr	x8, [sp, #8]
    8b78:	cmp	x8, x22
    8b7c:	b.ne	8ba4 <mpc_div@@Base+0x10f0>  // b.any
    8b80:	ldr	w8, [sp, #4]
    8b84:	add	x0, x19, #0x20
    8b88:	mov	x1, x0
    8b8c:	mov	w2, wzr
    8b90:	cmp	w8, w28
    8b94:	ccmp	w26, w27, #0x4, eq  // eq = none
    8b98:	mov	w8, #0xffffffff            	// #-1
    8b9c:	cneg	w3, w8, eq  // eq = none
    8ba0:	bl	52e0 <mpfr_set4@plt>
    8ba4:	cmp	w20, #0x0
    8ba8:	mov	w8, #0x2                   	// #2
    8bac:	cset	w9, ne  // ne = any
    8bb0:	csel	w8, w8, w9, lt  // lt = tstop
    8bb4:	cmp	w21, #0x0
    8bb8:	cset	w9, ne  // ne = any
    8bbc:	ldp	x20, x19, [sp, #192]
    8bc0:	ldp	x22, x21, [sp, #176]
    8bc4:	ldp	x24, x23, [sp, #160]
    8bc8:	ldp	x26, x25, [sp, #144]
    8bcc:	ldp	x28, x27, [sp, #128]
    8bd0:	ldp	x29, x30, [sp, #112]
    8bd4:	lsl	w9, w9, #2
    8bd8:	mov	w10, #0x8                   	// #8
    8bdc:	csel	w9, w10, w9, lt  // lt = tstop
    8be0:	orr	w0, w9, w8
    8be4:	add	sp, sp, #0xd0
    8be8:	ret

0000000000008bec <mpc_div_fr@@Base>:
    8bec:	sub	sp, sp, #0x60
    8bf0:	stp	x29, x30, [sp, #32]
    8bf4:	stp	x24, x23, [sp, #48]
    8bf8:	stp	x22, x21, [sp, #64]
    8bfc:	stp	x20, x19, [sp, #80]
    8c00:	mov	x22, x0
    8c04:	ldr	x8, [x22], #32
    8c08:	mov	x21, x0
    8c0c:	mov	x23, x1
    8c10:	mov	x0, sp
    8c14:	mov	x1, x8
    8c18:	add	x29, sp, #0x20
    8c1c:	mov	w19, w3
    8c20:	mov	x20, x2
    8c24:	bl	5540 <mpfr_init2@plt>
    8c28:	and	w3, w19, #0xf
    8c2c:	mov	x0, sp
    8c30:	mov	x1, x23
    8c34:	mov	x2, x20
    8c38:	bl	5260 <mpfr_div@plt>
    8c3c:	mov	w24, w0
    8c40:	add	x1, x23, #0x20
    8c44:	asr	w3, w19, #4
    8c48:	mov	x0, x22
    8c4c:	mov	x2, x20
    8c50:	bl	5260 <mpfr_div@plt>
    8c54:	ldr	w3, [sp, #8]
    8c58:	mov	w19, w0
    8c5c:	mov	x1, sp
    8c60:	mov	x0, x21
    8c64:	mov	w2, wzr
    8c68:	bl	52e0 <mpfr_set4@plt>
    8c6c:	mov	x0, sp
    8c70:	bl	4e40 <mpfr_clear@plt>
    8c74:	cmp	w24, #0x0
    8c78:	mov	w8, #0x2                   	// #2
    8c7c:	cset	w9, ne  // ne = any
    8c80:	csel	w8, w8, w9, lt  // lt = tstop
    8c84:	cmp	w19, #0x0
    8c88:	cset	w9, ne  // ne = any
    8c8c:	ldp	x20, x19, [sp, #80]
    8c90:	ldp	x22, x21, [sp, #64]
    8c94:	ldp	x24, x23, [sp, #48]
    8c98:	ldp	x29, x30, [sp, #32]
    8c9c:	lsl	w9, w9, #2
    8ca0:	mov	w10, #0x8                   	// #8
    8ca4:	csel	w9, w10, w9, lt  // lt = tstop
    8ca8:	orr	w0, w9, w8
    8cac:	add	sp, sp, #0x60
    8cb0:	ret

0000000000008cb4 <mpc_div_ui@@Base>:
    8cb4:	stp	x29, x30, [sp, #-64]!
    8cb8:	stp	x20, x19, [sp, #48]
    8cbc:	mov	w19, w3
    8cc0:	and	w3, w3, #0xf
    8cc4:	str	x23, [sp, #16]
    8cc8:	stp	x22, x21, [sp, #32]
    8ccc:	mov	x29, sp
    8cd0:	mov	x20, x2
    8cd4:	mov	x21, x1
    8cd8:	mov	x22, x0
    8cdc:	bl	5650 <mpfr_div_ui@plt>
    8ce0:	mov	w23, w0
    8ce4:	add	x1, x21, #0x20
    8ce8:	add	x0, x22, #0x20
    8cec:	asr	w3, w19, #4
    8cf0:	mov	x2, x20
    8cf4:	bl	5650 <mpfr_div_ui@plt>
    8cf8:	cmp	w23, #0x0
    8cfc:	mov	w8, #0x2                   	// #2
    8d00:	cset	w9, ne  // ne = any
    8d04:	csel	w8, w8, w9, lt  // lt = tstop
    8d08:	cmp	w0, #0x0
    8d0c:	cset	w9, ne  // ne = any
    8d10:	ldp	x20, x19, [sp, #48]
    8d14:	ldp	x22, x21, [sp, #32]
    8d18:	ldr	x23, [sp, #16]
    8d1c:	lsl	w9, w9, #2
    8d20:	mov	w10, #0x8                   	// #8
    8d24:	csel	w9, w10, w9, lt  // lt = tstop
    8d28:	orr	w0, w9, w8
    8d2c:	ldp	x29, x30, [sp], #64
    8d30:	ret

0000000000008d34 <mpc_exp@@Base>:
    8d34:	sub	sp, sp, #0xd0
    8d38:	stp	x29, x30, [sp, #112]
    8d3c:	stp	x28, x27, [sp, #128]
    8d40:	stp	x26, x25, [sp, #144]
    8d44:	stp	x24, x23, [sp, #160]
    8d48:	stp	x22, x21, [sp, #176]
    8d4c:	stp	x20, x19, [sp, #192]
    8d50:	ldr	x8, [x1, #16]
    8d54:	mov	x9, #0x2                   	// #2
    8d58:	movk	x9, #0x8000, lsl #48
    8d5c:	mov	x21, x1
    8d60:	cmp	x8, x9
    8d64:	mov	x19, x0
    8d68:	add	x29, sp, #0x70
    8d6c:	b.eq	8d98 <mpc_exp@@Base+0x64>  // b.none
    8d70:	ldr	x9, [x21, #48]
    8d74:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    8d78:	mov	w22, w2
    8d7c:	add	x20, x21, #0x20
    8d80:	cmp	x9, x10
    8d84:	b.eq	8de0 <mpc_exp@@Base+0xac>  // b.none
    8d88:	mov	x10, #0x2                   	// #2
    8d8c:	movk	x10, #0x8000, lsl #48
    8d90:	cmp	x9, x10
    8d94:	b.ne	8e10 <mpc_exp@@Base+0xdc>  // b.any
    8d98:	ldr	x9, [x21, #48]
    8d9c:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    8da0:	cmp	x9, x10
    8da4:	b.ne	8dbc <mpc_exp@@Base+0x88>  // b.any
    8da8:	mov	x0, x19
    8dac:	mov	x1, x21
    8db0:	mov	w2, wzr
    8db4:	bl	5680 <mpc_set@plt>
    8db8:	b	9228 <mpc_exp@@Base+0x4f4>
    8dbc:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    8dc0:	cmp	x8, x9
    8dc4:	b.ne	8ec0 <mpc_exp@@Base+0x18c>  // b.any
    8dc8:	ldr	w8, [x21, #8]
    8dcc:	tbnz	w8, #31, 8e78 <mpc_exp@@Base+0x144>
    8dd0:	mov	w1, #0x1                   	// #1
    8dd4:	mov	x0, x19
    8dd8:	bl	5230 <mpfr_set_inf@plt>
    8ddc:	b	8ec8 <mpc_exp@@Base+0x194>
    8de0:	and	w2, w22, #0xf
    8de4:	mov	x0, x19
    8de8:	mov	x1, x21
    8dec:	bl	5340 <mpfr_exp@plt>
    8df0:	ldr	w3, [x21, #40]
    8df4:	mov	w23, w0
    8df8:	add	x0, x19, #0x20
    8dfc:	asr	w2, w22, #4
    8e00:	mov	x1, x20
    8e04:	bl	52e0 <mpfr_set4@plt>
    8e08:	cmp	w23, #0x0
    8e0c:	b	8e50 <mpc_exp@@Base+0x11c>
    8e10:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    8e14:	cmp	x8, x10
    8e18:	b.eq	8e90 <mpc_exp@@Base+0x15c>  // b.none
    8e1c:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    8e20:	cmp	x8, x10
    8e24:	b.ne	8eb4 <mpc_exp@@Base+0x180>  // b.any
    8e28:	and	w2, w22, #0xf
    8e2c:	mov	x0, x19
    8e30:	mov	x1, x20
    8e34:	bl	5160 <mpfr_cos@plt>
    8e38:	mov	w21, w0
    8e3c:	add	x0, x19, #0x20
    8e40:	asr	w2, w22, #4
    8e44:	mov	x1, x20
    8e48:	bl	5190 <mpfr_sin@plt>
    8e4c:	cmp	w21, #0x0
    8e50:	mov	w8, #0x2                   	// #2
    8e54:	cset	w9, ne  // ne = any
    8e58:	csel	w8, w8, w9, lt  // lt = tstop
    8e5c:	cmp	w0, #0x0
    8e60:	cset	w9, ne  // ne = any
    8e64:	lsl	w9, w9, #2
    8e68:	mov	w10, #0x8                   	// #8
    8e6c:	csel	w9, w10, w9, lt  // lt = tstop
    8e70:	orr	w0, w9, w8
    8e74:	b	9228 <mpc_exp@@Base+0x4f4>
    8e78:	mov	x0, x19
    8e7c:	mov	x1, xzr
    8e80:	mov	x2, xzr
    8e84:	mov	w3, wzr
    8e88:	bl	5150 <mpc_set_ui_ui@plt>
    8e8c:	b	9228 <mpc_exp@@Base+0x4f4>
    8e90:	sub	x0, x29, #0x20
    8e94:	mov	w1, #0x2                   	// #2
    8e98:	bl	5540 <mpfr_init2@plt>
    8e9c:	ldr	w8, [x21, #8]
    8ea0:	tbnz	w8, #31, 90b8 <mpc_exp@@Base+0x384>
    8ea4:	sub	x0, x29, #0x20
    8ea8:	mov	w1, #0x1                   	// #1
    8eac:	bl	5230 <mpfr_set_inf@plt>
    8eb0:	b	90c8 <mpc_exp@@Base+0x394>
    8eb4:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    8eb8:	cmp	x9, x10
    8ebc:	b.ne	8ed8 <mpc_exp@@Base+0x1a4>  // b.any
    8ec0:	mov	x0, x19
    8ec4:	bl	4b10 <mpfr_set_nan@plt>
    8ec8:	add	x0, x19, #0x20
    8ecc:	bl	4b10 <mpfr_set_nan@plt>
    8ed0:	mov	w0, wzr
    8ed4:	b	9228 <mpc_exp@@Base+0x4f4>
    8ed8:	mov	x25, x19
    8edc:	ldr	x10, [x19]
    8ee0:	ldr	x11, [x25, #32]!
    8ee4:	neg	x12, x8
    8ee8:	neg	x13, x9
    8eec:	and	x8, x12, x8, asr #63
    8ef0:	cmp	x10, x11
    8ef4:	csel	x10, x10, x11, gt
    8ef8:	cmp	x8, x13
    8efc:	csneg	x8, x8, x9, gt
    8f00:	sub	x0, x29, #0x20
    8f04:	mov	w1, #0x2                   	// #2
    8f08:	add	x26, x10, x8
    8f0c:	bl	5540 <mpfr_init2@plt>
    8f10:	add	x0, sp, #0x30
    8f14:	mov	w1, #0x2                   	// #2
    8f18:	bl	5540 <mpfr_init2@plt>
    8f1c:	add	x0, sp, #0x10
    8f20:	mov	w1, #0x2                   	// #2
    8f24:	bl	5540 <mpfr_init2@plt>
    8f28:	bl	5400 <mpfr_underflow_p@plt>
    8f2c:	mov	w24, w0
    8f30:	bl	55e0 <mpfr_overflow_p@plt>
    8f34:	tst	w22, #0xf
    8f38:	cset	w27, eq  // eq = none
    8f3c:	cmp	w22, #0x10
    8f40:	cset	w28, cc  // cc = lo, ul, last
    8f44:	mov	x23, #0x8000000000000001    	// #-9223372036854775807
    8f48:	str	w0, [sp, #12]
    8f4c:	b	8f54 <mpc_exp@@Base+0x220>
    8f50:	cbnz	w8, 9058 <mpc_exp@@Base+0x324>
    8f54:	mov	x0, x26
    8f58:	bl	4df0 <mpc_ceil_log2@plt>
    8f5c:	add	x8, x26, x0
    8f60:	add	x26, x8, #0x5
    8f64:	sub	x0, x29, #0x20
    8f68:	mov	x1, x26
    8f6c:	bl	4d50 <mpfr_set_prec@plt>
    8f70:	add	x0, sp, #0x30
    8f74:	mov	x1, x26
    8f78:	bl	4d50 <mpfr_set_prec@plt>
    8f7c:	add	x0, sp, #0x10
    8f80:	mov	x1, x26
    8f84:	bl	4d50 <mpfr_set_prec@plt>
    8f88:	bl	4b20 <mpfr_clear_overflow@plt>
    8f8c:	bl	4f10 <mpfr_clear_underflow@plt>
    8f90:	sub	x0, x29, #0x20
    8f94:	mov	x1, x21
    8f98:	mov	w2, wzr
    8f9c:	bl	5340 <mpfr_exp@plt>
    8fa0:	add	x0, sp, #0x10
    8fa4:	add	x1, sp, #0x30
    8fa8:	mov	x2, x20
    8fac:	mov	w3, wzr
    8fb0:	bl	5620 <mpfr_sin_cos@plt>
    8fb4:	add	x0, sp, #0x30
    8fb8:	add	x1, sp, #0x30
    8fbc:	sub	x2, x29, #0x20
    8fc0:	mov	w3, wzr
    8fc4:	bl	4c40 <mpfr_mul@plt>
    8fc8:	bl	55e0 <mpfr_overflow_p@plt>
    8fcc:	mov	w8, #0x1                   	// #1
    8fd0:	cbnz	w0, 9004 <mpc_exp@@Base+0x2d0>
    8fd4:	ldur	x9, [x29, #-16]
    8fd8:	cmp	x9, x23
    8fdc:	b.eq	9004 <mpc_exp@@Base+0x2d0>  // b.none
    8fe0:	ldr	x8, [x19]
    8fe4:	sub	x1, x26, #0x2
    8fe8:	add	x0, sp, #0x30
    8fec:	mov	w3, #0x1                   	// #1
    8ff0:	add	x4, x8, x27
    8ff4:	mov	w2, wzr
    8ff8:	bl	5550 <mpfr_can_round@plt>
    8ffc:	cmp	w0, #0x0
    9000:	cset	w8, ne  // ne = any
    9004:	cbz	w8, 8f50 <mpc_exp@@Base+0x21c>
    9008:	add	x0, sp, #0x10
    900c:	add	x1, sp, #0x10
    9010:	sub	x2, x29, #0x20
    9014:	mov	w3, wzr
    9018:	bl	4c40 <mpfr_mul@plt>
    901c:	bl	55e0 <mpfr_overflow_p@plt>
    9020:	cbnz	w0, 9058 <mpc_exp@@Base+0x324>
    9024:	ldur	x8, [x29, #-16]
    9028:	cmp	x8, x23
    902c:	b.eq	9058 <mpc_exp@@Base+0x324>  // b.none
    9030:	ldr	x8, [x25]
    9034:	sub	x1, x26, #0x2
    9038:	add	x0, sp, #0x10
    903c:	mov	w3, #0x1                   	// #1
    9040:	add	x4, x8, x28
    9044:	mov	w2, wzr
    9048:	bl	5550 <mpfr_can_round@plt>
    904c:	cmp	w0, #0x0
    9050:	cset	w8, ne  // ne = any
    9054:	b	8f50 <mpc_exp@@Base+0x21c>
    9058:	ldr	w3, [sp, #56]
    905c:	and	w26, w22, #0xf
    9060:	add	x1, sp, #0x30
    9064:	mov	x0, x19
    9068:	mov	w2, w26
    906c:	bl	52e0 <mpfr_set4@plt>
    9070:	ldr	w3, [sp, #24]
    9074:	asr	w22, w22, #4
    9078:	mov	w20, w0
    907c:	add	x1, sp, #0x10
    9080:	mov	x0, x25
    9084:	mov	w2, w22
    9088:	bl	52e0 <mpfr_set4@plt>
    908c:	mov	w21, w0
    9090:	bl	55e0 <mpfr_overflow_p@plt>
    9094:	cbz	w0, 9178 <mpc_exp@@Base+0x444>
    9098:	mov	x0, x19
    909c:	mov	w1, w26
    90a0:	bl	4ec0 <mpc_fix_inf@plt>
    90a4:	mov	w20, w0
    90a8:	mov	x0, x25
    90ac:	mov	w1, w22
    90b0:	bl	4ec0 <mpc_fix_inf@plt>
    90b4:	b	919c <mpc_exp@@Base+0x468>
    90b8:	mov	w8, #0x1                   	// #1
    90bc:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    90c0:	stur	w8, [x29, #-24]
    90c4:	stur	x9, [x29, #-16]
    90c8:	ldr	x8, [x21, #48]
    90cc:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    90d0:	cmp	x8, x9
    90d4:	b.ne	9108 <mpc_exp@@Base+0x3d4>  // b.any
    90d8:	ldur	w3, [x29, #-24]
    90dc:	ldr	w21, [x21, #8]
    90e0:	sub	x1, x29, #0x20
    90e4:	mov	x0, x19
    90e8:	mov	w2, wzr
    90ec:	bl	52e0 <mpfr_set4@plt>
    90f0:	mov	w20, w0
    90f4:	add	x0, x19, #0x20
    90f8:	tbnz	w21, #31, 91e4 <mpc_exp@@Base+0x4b0>
    90fc:	bl	4b10 <mpfr_set_nan@plt>
    9100:	mov	w19, wzr
    9104:	b	91f8 <mpc_exp@@Base+0x4c4>
    9108:	add	x0, sp, #0x30
    910c:	mov	w1, #0x2                   	// #2
    9110:	bl	5540 <mpfr_init2@plt>
    9114:	add	x0, sp, #0x10
    9118:	mov	w1, #0x2                   	// #2
    911c:	bl	5540 <mpfr_init2@plt>
    9120:	add	x0, sp, #0x10
    9124:	add	x1, sp, #0x30
    9128:	mov	x2, x20
    912c:	mov	w3, wzr
    9130:	bl	5620 <mpfr_sin_cos@plt>
    9134:	ldr	w3, [sp, #56]
    9138:	sub	x1, x29, #0x20
    913c:	mov	x0, x19
    9140:	mov	w2, wzr
    9144:	bl	52e0 <mpfr_set4@plt>
    9148:	ldr	w3, [sp, #24]
    914c:	mov	w20, w0
    9150:	add	x0, x19, #0x20
    9154:	sub	x1, x29, #0x20
    9158:	mov	w2, wzr
    915c:	bl	52e0 <mpfr_set4@plt>
    9160:	mov	w19, w0
    9164:	add	x0, sp, #0x10
    9168:	bl	4e40 <mpfr_clear@plt>
    916c:	add	x0, sp, #0x30
    9170:	bl	4e40 <mpfr_clear@plt>
    9174:	b	91f8 <mpc_exp@@Base+0x4c4>
    9178:	bl	5400 <mpfr_underflow_p@plt>
    917c:	cbz	w0, 91a0 <mpc_exp@@Base+0x46c>
    9180:	mov	x0, x19
    9184:	mov	w1, w26
    9188:	bl	51e0 <mpc_fix_zero@plt>
    918c:	mov	w20, w0
    9190:	mov	x0, x25
    9194:	mov	w1, w22
    9198:	bl	51e0 <mpc_fix_zero@plt>
    919c:	mov	w21, w0
    91a0:	sub	x0, x29, #0x20
    91a4:	bl	4e40 <mpfr_clear@plt>
    91a8:	add	x0, sp, #0x30
    91ac:	bl	4e40 <mpfr_clear@plt>
    91b0:	add	x0, sp, #0x10
    91b4:	bl	4e40 <mpfr_clear@plt>
    91b8:	cbz	w24, 91c0 <mpc_exp@@Base+0x48c>
    91bc:	bl	4a60 <mpfr_set_underflow@plt>
    91c0:	ldr	w8, [sp, #12]
    91c4:	cbz	w8, 91cc <mpc_exp@@Base+0x498>
    91c8:	bl	5590 <mpfr_set_overflow@plt>
    91cc:	cmp	w20, #0x0
    91d0:	mov	w8, #0x2                   	// #2
    91d4:	cset	w9, ne  // ne = any
    91d8:	csel	w8, w8, w9, lt  // lt = tstop
    91dc:	cmp	w21, #0x0
    91e0:	b	9214 <mpc_exp@@Base+0x4e0>
    91e4:	ldur	w3, [x29, #-24]
    91e8:	sub	x1, x29, #0x20
    91ec:	mov	w2, wzr
    91f0:	bl	52e0 <mpfr_set4@plt>
    91f4:	mov	w19, w0
    91f8:	sub	x0, x29, #0x20
    91fc:	bl	4e40 <mpfr_clear@plt>
    9200:	cmp	w20, #0x0
    9204:	mov	w8, #0x2                   	// #2
    9208:	cset	w9, ne  // ne = any
    920c:	csel	w8, w8, w9, lt  // lt = tstop
    9210:	cmp	w19, #0x0
    9214:	cset	w9, ne  // ne = any
    9218:	lsl	w9, w9, #2
    921c:	mov	w10, #0x8                   	// #8
    9220:	csel	w9, w10, w9, lt  // lt = tstop
    9224:	orr	w0, w8, w9
    9228:	ldp	x20, x19, [sp, #192]
    922c:	ldp	x22, x21, [sp, #176]
    9230:	ldp	x24, x23, [sp, #160]
    9234:	ldp	x26, x25, [sp, #144]
    9238:	ldp	x28, x27, [sp, #128]
    923c:	ldp	x29, x30, [sp, #112]
    9240:	add	sp, sp, #0xd0
    9244:	ret

0000000000009248 <mpc_fma_naive@@Base>:
    9248:	sub	sp, sp, #0xf0
    924c:	stp	x29, x30, [sp, #160]
    9250:	stp	x24, x23, [sp, #192]
    9254:	stp	x22, x21, [sp, #208]
    9258:	stp	x20, x19, [sp, #224]
    925c:	ldr	x8, [x1]
    9260:	ldr	x9, [x2]
    9264:	add	x29, sp, #0xa0
    9268:	mov	x23, x1
    926c:	mov	x20, x0
    9270:	add	x1, x9, x8
    9274:	sub	x0, x29, #0x20
    9278:	str	x25, [sp, #176]
    927c:	mov	w19, w4
    9280:	mov	x21, x3
    9284:	mov	x22, x2
    9288:	bl	5540 <mpfr_init2@plt>
    928c:	mov	x24, x22
    9290:	ldr	x8, [x23]
    9294:	ldr	x9, [x24, #32]!
    9298:	sub	x0, x29, #0x40
    929c:	add	x1, x9, x8
    92a0:	bl	5540 <mpfr_init2@plt>
    92a4:	mov	x25, x23
    92a8:	ldr	x8, [x25, #32]!
    92ac:	ldr	x9, [x22]
    92b0:	add	x0, sp, #0x40
    92b4:	add	x1, x9, x8
    92b8:	bl	5540 <mpfr_init2@plt>
    92bc:	ldr	x8, [x25]
    92c0:	ldr	x9, [x24]
    92c4:	add	x0, sp, #0x20
    92c8:	add	x1, x9, x8
    92cc:	bl	5540 <mpfr_init2@plt>
    92d0:	sub	x0, x29, #0x20
    92d4:	mov	w3, #0x1                   	// #1
    92d8:	mov	x1, x23
    92dc:	mov	x2, x22
    92e0:	bl	4c40 <mpfr_mul@plt>
    92e4:	sub	x0, x29, #0x40
    92e8:	mov	w3, #0x1                   	// #1
    92ec:	mov	x1, x23
    92f0:	mov	x2, x24
    92f4:	bl	4c40 <mpfr_mul@plt>
    92f8:	add	x0, sp, #0x40
    92fc:	mov	w3, #0x1                   	// #1
    9300:	mov	x1, x25
    9304:	mov	x2, x22
    9308:	bl	4c40 <mpfr_mul@plt>
    930c:	add	x0, sp, #0x20
    9310:	mov	w3, #0x1                   	// #1
    9314:	mov	x1, x25
    9318:	mov	x2, x24
    931c:	bl	4c40 <mpfr_mul@plt>
    9320:	sub	x0, x29, #0x20
    9324:	add	x1, sp, #0x20
    9328:	bl	955c <mpc_fma_naive@@Base+0x314>
    932c:	mov	x22, x0
    9330:	sub	x0, x29, #0x20
    9334:	mov	x1, x21
    9338:	bl	955c <mpc_fma_naive@@Base+0x314>
    933c:	mov	x24, x0
    9340:	add	x0, sp, #0x20
    9344:	mov	x1, x21
    9348:	bl	955c <mpc_fma_naive@@Base+0x314>
    934c:	cmp	x22, x24
    9350:	mov	x23, x0
    9354:	b.gt	9394 <mpc_fma_naive@@Base+0x14c>
    9358:	cmp	x22, x23
    935c:	b.gt	9394 <mpc_fma_naive@@Base+0x14c>
    9360:	mov	x0, sp
    9364:	mov	x1, x22
    9368:	bl	5540 <mpfr_init2@plt>
    936c:	mov	x0, sp
    9370:	sub	x1, x29, #0x20
    9374:	add	x2, sp, #0x20
    9378:	mov	w3, #0x1                   	// #1
    937c:	bl	4b30 <mpfr_sub@plt>
    9380:	and	w3, w19, #0xf
    9384:	mov	x1, sp
    9388:	mov	x0, x20
    938c:	mov	x2, x21
    9390:	b	93cc <mpc_fma_naive@@Base+0x184>
    9394:	mov	x0, sp
    9398:	cmp	x24, x23
    939c:	b.le	93d4 <mpc_fma_naive@@Base+0x18c>
    93a0:	mov	x1, x23
    93a4:	bl	5540 <mpfr_init2@plt>
    93a8:	mov	x0, sp
    93ac:	add	x2, sp, #0x20
    93b0:	mov	w3, #0x1                   	// #1
    93b4:	mov	x1, x21
    93b8:	bl	4b30 <mpfr_sub@plt>
    93bc:	and	w3, w19, #0xf
    93c0:	mov	x1, sp
    93c4:	sub	x2, x29, #0x20
    93c8:	mov	x0, x20
    93cc:	bl	4f60 <mpfr_add@plt>
    93d0:	b	9404 <mpc_fma_naive@@Base+0x1bc>
    93d4:	mov	x1, x24
    93d8:	bl	5540 <mpfr_init2@plt>
    93dc:	mov	x0, sp
    93e0:	sub	x1, x29, #0x20
    93e4:	mov	w3, #0x1                   	// #1
    93e8:	mov	x2, x21
    93ec:	bl	4f60 <mpfr_add@plt>
    93f0:	and	w3, w19, #0xf
    93f4:	mov	x1, sp
    93f8:	add	x2, sp, #0x20
    93fc:	mov	x0, x20
    9400:	bl	4b30 <mpfr_sub@plt>
    9404:	mov	w22, w0
    9408:	sub	x0, x29, #0x40
    940c:	add	x1, sp, #0x40
    9410:	bl	955c <mpc_fma_naive@@Base+0x314>
    9414:	add	x21, x21, #0x20
    9418:	mov	x24, x0
    941c:	sub	x0, x29, #0x40
    9420:	mov	x1, x21
    9424:	bl	955c <mpc_fma_naive@@Base+0x314>
    9428:	mov	x25, x0
    942c:	add	x0, sp, #0x40
    9430:	mov	x1, x21
    9434:	bl	955c <mpc_fma_naive@@Base+0x314>
    9438:	cmp	x24, x25
    943c:	b.gt	947c <mpc_fma_naive@@Base+0x234>
    9440:	cmp	x24, x0
    9444:	b.gt	947c <mpc_fma_naive@@Base+0x234>
    9448:	mov	x0, sp
    944c:	mov	x1, x24
    9450:	bl	4d50 <mpfr_set_prec@plt>
    9454:	mov	x0, sp
    9458:	sub	x1, x29, #0x40
    945c:	add	x2, sp, #0x40
    9460:	mov	w3, #0x1                   	// #1
    9464:	bl	4f60 <mpfr_add@plt>
    9468:	add	x0, x20, #0x20
    946c:	asr	w3, w19, #4
    9470:	mov	x1, sp
    9474:	mov	x2, x21
    9478:	b	94e8 <mpc_fma_naive@@Base+0x2a0>
    947c:	cmp	x25, x0
    9480:	b.le	94b8 <mpc_fma_naive@@Base+0x270>
    9484:	mov	x0, sp
    9488:	mov	x1, x23
    948c:	bl	4d50 <mpfr_set_prec@plt>
    9490:	mov	x0, sp
    9494:	add	x2, sp, #0x40
    9498:	mov	w3, #0x1                   	// #1
    949c:	mov	x1, x21
    94a0:	bl	4f60 <mpfr_add@plt>
    94a4:	add	x0, x20, #0x20
    94a8:	asr	w3, w19, #4
    94ac:	mov	x1, sp
    94b0:	sub	x2, x29, #0x40
    94b4:	b	94e8 <mpc_fma_naive@@Base+0x2a0>
    94b8:	mov	x0, sp
    94bc:	mov	x1, x25
    94c0:	bl	4d50 <mpfr_set_prec@plt>
    94c4:	mov	x0, sp
    94c8:	sub	x1, x29, #0x40
    94cc:	mov	w3, #0x1                   	// #1
    94d0:	mov	x2, x21
    94d4:	bl	4f60 <mpfr_add@plt>
    94d8:	add	x0, x20, #0x20
    94dc:	asr	w3, w19, #4
    94e0:	mov	x1, sp
    94e4:	add	x2, sp, #0x40
    94e8:	bl	4f60 <mpfr_add@plt>
    94ec:	mov	w19, w0
    94f0:	sub	x0, x29, #0x20
    94f4:	bl	4e40 <mpfr_clear@plt>
    94f8:	sub	x0, x29, #0x40
    94fc:	bl	4e40 <mpfr_clear@plt>
    9500:	add	x0, sp, #0x40
    9504:	bl	4e40 <mpfr_clear@plt>
    9508:	add	x0, sp, #0x20
    950c:	bl	4e40 <mpfr_clear@plt>
    9510:	mov	x0, sp
    9514:	bl	4e40 <mpfr_clear@plt>
    9518:	cmp	w22, #0x0
    951c:	mov	w8, #0x2                   	// #2
    9520:	cset	w9, ne  // ne = any
    9524:	csel	w8, w8, w9, lt  // lt = tstop
    9528:	cmp	w19, #0x0
    952c:	cset	w9, ne  // ne = any
    9530:	ldp	x20, x19, [sp, #224]
    9534:	ldp	x22, x21, [sp, #208]
    9538:	ldp	x24, x23, [sp, #192]
    953c:	ldr	x25, [sp, #176]
    9540:	ldp	x29, x30, [sp, #160]
    9544:	lsl	w9, w9, #2
    9548:	mov	w10, #0x8                   	// #8
    954c:	csel	w9, w10, w9, lt  // lt = tstop
    9550:	orr	w0, w9, w8
    9554:	add	sp, sp, #0xf0
    9558:	ret
    955c:	ldr	x8, [x0, #16]
    9560:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    9564:	cmp	x8, x9
    9568:	b.le	95ac <mpc_fma_naive@@Base+0x364>
    956c:	ldr	x9, [x1, #16]
    9570:	ldr	x0, [x0]
    9574:	mov	x10, #0x4                   	// #4
    9578:	movk	x10, #0x8000, lsl #48
    957c:	cmp	x9, x10
    9580:	b.lt	95a8 <mpc_fma_naive@@Base+0x360>  // b.tstop
    9584:	ldr	x10, [x1]
    9588:	sub	x11, x8, x0
    958c:	cmp	x8, x9
    9590:	csel	x8, x9, x8, lt  // lt = tstop
    9594:	sub	x10, x9, x10
    9598:	cmp	x11, x10
    959c:	csel	x9, x10, x11, gt
    95a0:	sub	x8, x8, x9
    95a4:	add	x0, x8, #0x1
    95a8:	ret
    95ac:	ldr	x0, [x1]
    95b0:	ret

00000000000095b4 <mpc_fma@@Base>:
    95b4:	sub	sp, sp, #0xc0
    95b8:	stp	x24, x23, [sp, #144]
    95bc:	mov	x23, x0
    95c0:	mov	x0, x1
    95c4:	stp	x29, x30, [sp, #96]
    95c8:	stp	x28, x27, [sp, #112]
    95cc:	stp	x26, x25, [sp, #128]
    95d0:	stp	x22, x21, [sp, #160]
    95d4:	stp	x20, x19, [sp, #176]
    95d8:	add	x29, sp, #0x60
    95dc:	mov	w19, w4
    95e0:	mov	x20, x3
    95e4:	mov	x21, x2
    95e8:	mov	x22, x1
    95ec:	bl	55d0 <mpfr_number_p@plt>
    95f0:	cbz	w0, 9830 <mpc_fma@@Base+0x27c>
    95f4:	add	x0, x22, #0x20
    95f8:	bl	55d0 <mpfr_number_p@plt>
    95fc:	cbz	w0, 9830 <mpc_fma@@Base+0x27c>
    9600:	mov	x0, x21
    9604:	bl	55d0 <mpfr_number_p@plt>
    9608:	cbz	w0, 9830 <mpc_fma@@Base+0x27c>
    960c:	add	x0, x21, #0x20
    9610:	bl	55d0 <mpfr_number_p@plt>
    9614:	cbz	w0, 9830 <mpc_fma@@Base+0x27c>
    9618:	mov	x0, x20
    961c:	bl	55d0 <mpfr_number_p@plt>
    9620:	cbz	w0, 9830 <mpc_fma@@Base+0x27c>
    9624:	add	x0, x20, #0x20
    9628:	bl	55d0 <mpfr_number_p@plt>
    962c:	cbz	w0, 9830 <mpc_fma@@Base+0x27c>
    9630:	ldr	x25, [x23]
    9634:	ldr	x27, [x23, #32]
    9638:	mov	x0, x25
    963c:	bl	4df0 <mpc_ceil_log2@plt>
    9640:	add	x8, x25, x0
    9644:	mov	x0, x27
    9648:	add	x24, x8, #0xa
    964c:	bl	4df0 <mpc_ceil_log2@plt>
    9650:	add	x8, x27, x0
    9654:	add	x26, x8, #0xa
    9658:	add	x0, sp, #0x20
    965c:	mov	x1, x24
    9660:	mov	x2, x26
    9664:	add	x28, sp, #0x20
    9668:	bl	54d0 <mpc_init3@plt>
    966c:	tst	w19, #0xf
    9670:	cinc	x8, x25, eq  // eq = none
    9674:	cmp	w19, #0x10
    9678:	str	x8, [sp, #8]
    967c:	cinc	x8, x27, cc  // cc = lo, ul, last
    9680:	add	x0, sp, #0x20
    9684:	mov	w3, #0x11                  	// #17
    9688:	mov	x1, x22
    968c:	mov	x2, x21
    9690:	str	x8, [sp]
    9694:	bl	4fe0 <mpc_mul@plt>
    9698:	ldr	x27, [sp, #48]
    969c:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    96a0:	cmp	x27, x8
    96a4:	b.ne	96b8 <mpc_fma@@Base+0x104>  // b.any
    96a8:	mov	w24, wzr
    96ac:	mov	w25, wzr
    96b0:	str	wzr, [sp, #24]
    96b4:	b	981c <mpc_fma@@Base+0x268>
    96b8:	add	x9, x28, #0x20
    96bc:	mov	w28, #0x2                   	// #2
    96c0:	stp	x9, xzr, [sp, #16]
    96c4:	ldr	x25, [sp, #80]
    96c8:	cmp	x25, x8
    96cc:	b.eq	97e4 <mpc_fma@@Base+0x230>  // b.none
    96d0:	add	x0, sp, #0x20
    96d4:	add	x1, sp, #0x20
    96d8:	mov	w3, #0x11                  	// #17
    96dc:	mov	x2, x20
    96e0:	bl	4da0 <mpc_add@plt>
    96e4:	ldr	x8, [sp, #48]
    96e8:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    96ec:	cmp	x8, x10
    96f0:	b.eq	97e4 <mpc_fma@@Base+0x230>  // b.none
    96f4:	ldr	x9, [sp, #80]
    96f8:	cmp	x9, x10
    96fc:	b.eq	97e4 <mpc_fma@@Base+0x230>  // b.none
    9700:	sub	x8, x27, x8
    9704:	sub	x9, x25, x9
    9708:	cmp	x8, #0x1
    970c:	mov	w10, #0x1                   	// #1
    9710:	csinc	x25, x10, x8, lt  // lt = tstop
    9714:	cmp	x9, #0x1
    9718:	csinc	x27, x10, x9, lt  // lt = tstop
    971c:	subs	x1, x24, x25
    9720:	b.ge	972c <mpc_fma@@Base+0x178>  // b.tcont
    9724:	mov	w0, wzr
    9728:	b	9740 <mpc_fma@@Base+0x18c>
    972c:	ldr	x4, [sp, #8]
    9730:	add	x0, sp, #0x20
    9734:	mov	w3, #0x1                   	// #1
    9738:	mov	w2, wzr
    973c:	bl	5550 <mpfr_can_round@plt>
    9740:	subs	x1, x26, x27
    9744:	str	w0, [sp, #28]
    9748:	b.ge	9758 <mpc_fma@@Base+0x1a4>  // b.tcont
    974c:	mov	w9, wzr
    9750:	cbnz	w0, 9778 <mpc_fma@@Base+0x1c4>
    9754:	b	977c <mpc_fma@@Base+0x1c8>
    9758:	ldr	x0, [sp, #16]
    975c:	ldr	x4, [sp]
    9760:	mov	w3, #0x1                   	// #1
    9764:	mov	w2, wzr
    9768:	bl	5550 <mpfr_can_round@plt>
    976c:	mov	w9, w0
    9770:	ldr	w0, [sp, #28]
    9774:	cbz	w0, 977c <mpc_fma@@Base+0x1c8>
    9778:	cbnz	w9, 97f0 <mpc_fma@@Base+0x23c>
    977c:	subs	w28, w28, #0x1
    9780:	str	w9, [sp, #24]
    9784:	b.eq	9814 <mpc_fma@@Base+0x260>  // b.none
    9788:	cmp	w0, #0x0
    978c:	ccmp	x25, #0x1, #0x4, eq  // eq = none
    9790:	csel	x8, x25, xzr, gt
    9794:	cmp	w9, #0x0
    9798:	add	x24, x8, x24
    979c:	ccmp	x27, #0x1, #0x4, eq  // eq = none
    97a0:	csel	x8, x27, xzr, gt
    97a4:	add	x0, sp, #0x20
    97a8:	mov	x1, x24
    97ac:	add	x26, x8, x26
    97b0:	bl	4d50 <mpfr_set_prec@plt>
    97b4:	ldr	x0, [sp, #16]
    97b8:	mov	x1, x26
    97bc:	bl	4d50 <mpfr_set_prec@plt>
    97c0:	add	x0, sp, #0x20
    97c4:	mov	w3, #0x11                  	// #17
    97c8:	mov	x1, x22
    97cc:	mov	x2, x21
    97d0:	bl	4fe0 <mpc_mul@plt>
    97d4:	ldr	x27, [sp, #48]
    97d8:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    97dc:	cmp	x27, x8
    97e0:	b.ne	96c4 <mpc_fma@@Base+0x110>  // b.any
    97e4:	ldr	w25, [sp, #28]
    97e8:	mov	w24, wzr
    97ec:	b	981c <mpc_fma@@Base+0x268>
    97f0:	add	x1, sp, #0x20
    97f4:	mov	x0, x23
    97f8:	mov	w2, w19
    97fc:	bl	5680 <mpc_set@plt>
    9800:	mov	w8, #0x1                   	// #1
    9804:	mov	w24, w0
    9808:	mov	w25, #0x1                   	// #1
    980c:	str	w8, [sp, #24]
    9810:	b	981c <mpc_fma@@Base+0x268>
    9814:	mov	w24, wzr
    9818:	mov	w25, w0
    981c:	add	x0, sp, #0x20
    9820:	bl	4ae0 <mpc_clear@plt>
    9824:	cbz	w25, 9830 <mpc_fma@@Base+0x27c>
    9828:	ldr	w8, [sp, #24]
    982c:	cbnz	w8, 984c <mpc_fma@@Base+0x298>
    9830:	mov	x0, x23
    9834:	mov	x1, x22
    9838:	mov	x2, x21
    983c:	mov	x3, x20
    9840:	mov	w4, w19
    9844:	bl	5660 <mpc_fma_naive@plt>
    9848:	mov	w24, w0
    984c:	mov	w0, w24
    9850:	ldp	x20, x19, [sp, #176]
    9854:	ldp	x22, x21, [sp, #160]
    9858:	ldp	x24, x23, [sp, #144]
    985c:	ldp	x26, x25, [sp, #128]
    9860:	ldp	x28, x27, [sp, #112]
    9864:	ldp	x29, x30, [sp, #96]
    9868:	add	sp, sp, #0xc0
    986c:	ret

0000000000009870 <mpc_fr_div@@Base>:
    9870:	sub	sp, sp, #0x70
    9874:	stp	x29, x30, [sp, #64]
    9878:	stp	x22, x21, [sp, #80]
    987c:	stp	x20, x19, [sp, #96]
    9880:	ldp	q1, q0, [x1]
    9884:	mov	x8, sp
    9888:	add	x22, x8, #0x20
    988c:	mov	x21, x0
    9890:	mov	x0, x22
    9894:	add	x29, sp, #0x40
    9898:	mov	w19, w3
    989c:	mov	x20, x2
    98a0:	stp	q1, q0, [sp]
    98a4:	bl	4b70 <mpfr_init@plt>
    98a8:	mov	w8, #0x1                   	// #1
    98ac:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    98b0:	mov	x1, sp
    98b4:	mov	x0, x21
    98b8:	mov	x2, x20
    98bc:	mov	w3, w19
    98c0:	str	w8, [sp, #40]
    98c4:	str	x9, [sp, #48]
    98c8:	bl	5360 <mpc_div@plt>
    98cc:	mov	w19, w0
    98d0:	mov	x0, x22
    98d4:	bl	4e40 <mpfr_clear@plt>
    98d8:	mov	w0, w19
    98dc:	ldp	x20, x19, [sp, #96]
    98e0:	ldp	x22, x21, [sp, #80]
    98e4:	ldp	x29, x30, [sp, #64]
    98e8:	add	sp, sp, #0x70
    98ec:	ret

00000000000098f0 <mpc_fr_sub@@Base>:
    98f0:	stp	x29, x30, [sp, #-48]!
    98f4:	stp	x20, x19, [sp, #32]
    98f8:	mov	w19, w3
    98fc:	and	w3, w3, #0xf
    9900:	stp	x22, x21, [sp, #16]
    9904:	mov	x29, sp
    9908:	mov	x20, x2
    990c:	mov	x21, x0
    9910:	bl	4b30 <mpfr_sub@plt>
    9914:	mov	w22, w0
    9918:	add	x0, x21, #0x20
    991c:	add	x1, x20, #0x20
    9920:	asr	w2, w19, #4
    9924:	bl	4c50 <mpfr_neg@plt>
    9928:	cmp	w22, #0x0
    992c:	mov	w8, #0x2                   	// #2
    9930:	cset	w9, ne  // ne = any
    9934:	csel	w8, w8, w9, lt  // lt = tstop
    9938:	cmp	w0, #0x0
    993c:	cset	w9, ne  // ne = any
    9940:	ldp	x20, x19, [sp, #32]
    9944:	ldp	x22, x21, [sp, #16]
    9948:	lsl	w9, w9, #2
    994c:	mov	w10, #0x8                   	// #8
    9950:	csel	w9, w10, w9, lt  // lt = tstop
    9954:	orr	w0, w9, w8
    9958:	ldp	x29, x30, [sp], #48
    995c:	ret

0000000000009960 <mpc_get_prec2@@Base>:
    9960:	ldr	x8, [x2]
    9964:	str	x8, [x0]
    9968:	ldr	x8, [x2, #32]
    996c:	str	x8, [x1]
    9970:	ret

0000000000009974 <mpc_get_prec@@Base>:
    9974:	ldr	x8, [x0]
    9978:	ldr	x9, [x0, #32]
    997c:	cmp	x9, x8
    9980:	csel	x0, x8, xzr, eq  // eq = none
    9984:	ret

0000000000009988 <mpc_get_version@@Base>:
    9988:	adrp	x0, 13000 <mpc_ui_ui_sub@@Base+0x880>
    998c:	add	x0, x0, #0xc81
    9990:	ret

0000000000009994 <mpc_get_dc@@Base>:
    9994:	stp	d9, d8, [sp, #-48]!
    9998:	stp	x20, x19, [sp, #32]
    999c:	mov	w19, w1
    99a0:	mov	x20, x0
    99a4:	add	x0, x0, #0x20
    99a8:	asr	w1, w1, #4
    99ac:	stp	x29, x30, [sp, #16]
    99b0:	mov	x29, sp
    99b4:	bl	4c20 <mpfr_get_d@plt>
    99b8:	mov	v8.16b, v0.16b
    99bc:	fmov	d0, xzr
    99c0:	and	w1, w19, #0xf
    99c4:	mov	x0, x20
    99c8:	fmul	d9, d8, d0
    99cc:	bl	4c20 <mpfr_get_d@plt>
    99d0:	ldp	x20, x19, [sp, #32]
    99d4:	ldp	x29, x30, [sp, #16]
    99d8:	fadd	d0, d9, d0
    99dc:	mov	v1.16b, v8.16b
    99e0:	ldp	d9, d8, [sp], #48
    99e4:	ret

00000000000099e8 <mpc_get_ldc@@Base>:
    99e8:	sub	sp, sp, #0x40
    99ec:	stp	x20, x19, [sp, #48]
    99f0:	mov	w19, w1
    99f4:	mov	x20, x0
    99f8:	add	x0, x0, #0x20
    99fc:	asr	w1, w1, #4
    9a00:	stp	x29, x30, [sp, #32]
    9a04:	add	x29, sp, #0x20
    9a08:	bl	5220 <mpfr_get_ld@plt>
    9a0c:	adrp	x8, 13000 <mpc_ui_ui_sub@@Base+0x880>
    9a10:	ldr	q1, [x8, #3216]
    9a14:	str	q0, [sp, #16]
    9a18:	bl	13330 <mpc_ui_ui_sub@@Base+0xbb0>
    9a1c:	and	w1, w19, #0xf
    9a20:	mov	x0, x20
    9a24:	str	q0, [sp]
    9a28:	bl	5220 <mpfr_get_ld@plt>
    9a2c:	mov	v1.16b, v0.16b
    9a30:	ldr	q0, [sp]
    9a34:	bl	12808 <mpc_ui_ui_sub@@Base+0x88>
    9a38:	ldr	q1, [sp, #16]
    9a3c:	ldp	x20, x19, [sp, #48]
    9a40:	ldp	x29, x30, [sp, #32]
    9a44:	add	sp, sp, #0x40
    9a48:	ret

0000000000009a4c <mpc_get_str@@Base>:
    9a4c:	stp	x29, x30, [sp, #-64]!
    9a50:	sub	w8, w0, #0x2
    9a54:	cmp	w8, #0x22
    9a58:	str	x23, [sp, #16]
    9a5c:	stp	x22, x21, [sp, #32]
    9a60:	stp	x20, x19, [sp, #48]
    9a64:	mov	x29, sp
    9a68:	b.ls	9a74 <mpc_get_str@@Base+0x28>  // b.plast
    9a6c:	mov	x21, xzr
    9a70:	b	9b14 <mpc_get_str@@Base+0xc8>
    9a74:	mov	w20, w3
    9a78:	and	w3, w3, #0xf
    9a7c:	mov	x22, x2
    9a80:	mov	w21, w0
    9a84:	mov	x23, x1
    9a88:	bl	9b5c <mpc_get_str@@Base+0x110>
    9a8c:	mov	x19, x0
    9a90:	add	x2, x22, #0x20
    9a94:	asr	w3, w20, #4
    9a98:	mov	w0, w21
    9a9c:	mov	x1, x23
    9aa0:	bl	9b5c <mpc_get_str@@Base+0x110>
    9aa4:	mov	x20, x0
    9aa8:	mov	x0, x19
    9aac:	bl	4ad0 <strlen@plt>
    9ab0:	mov	x21, x0
    9ab4:	mov	x0, x20
    9ab8:	bl	4ad0 <strlen@plt>
    9abc:	add	x8, x21, x0
    9ac0:	add	x0, x8, #0x4
    9ac4:	bl	4cc0 <mpc_alloc_str@plt>
    9ac8:	cbz	x0, 9b2c <mpc_get_str@@Base+0xe0>
    9acc:	mov	w8, #0x28                  	// #40
    9ad0:	mov	x1, x19
    9ad4:	mov	x21, x0
    9ad8:	strh	w8, [x0]
    9adc:	bl	4ed0 <strcat@plt>
    9ae0:	bl	4ad0 <strlen@plt>
    9ae4:	mov	w8, #0x20                  	// #32
    9ae8:	strh	w8, [x21, x0]
    9aec:	mov	x0, x21
    9af0:	mov	x1, x20
    9af4:	bl	4ed0 <strcat@plt>
    9af8:	bl	4ad0 <strlen@plt>
    9afc:	mov	w8, #0x29                  	// #41
    9b00:	strh	w8, [x21, x0]
    9b04:	mov	x0, x19
    9b08:	bl	5100 <mpc_free_str@plt>
    9b0c:	mov	x0, x20
    9b10:	bl	5100 <mpc_free_str@plt>
    9b14:	mov	x0, x21
    9b18:	ldp	x20, x19, [sp, #48]
    9b1c:	ldp	x22, x21, [sp, #32]
    9b20:	ldr	x23, [sp, #16]
    9b24:	ldp	x29, x30, [sp], #64
    9b28:	ret
    9b2c:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    9b30:	ldr	x8, [x8, #4008]
    9b34:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    9b38:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    9b3c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    9b40:	ldr	x0, [x8]
    9b44:	add	x1, x1, #0xba0
    9b48:	add	x2, x2, #0xca0
    9b4c:	add	x4, x4, #0xca8
    9b50:	mov	w3, #0xe0                  	// #224
    9b54:	bl	56a0 <fprintf@plt>
    9b58:	bl	5110 <abort@plt>
    9b5c:	sub	sp, sp, #0x40
    9b60:	stp	x29, x30, [sp, #16]
    9b64:	stp	x22, x21, [sp, #32]
    9b68:	stp	x20, x19, [sp, #48]
    9b6c:	ldr	x8, [x2, #16]
    9b70:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    9b74:	mov	x20, x2
    9b78:	add	x29, sp, #0x10
    9b7c:	cmp	x8, x9
    9b80:	b.ne	9b94 <mpc_get_str@@Base+0x148>  // b.any
    9b84:	mov	x0, x20
    9b88:	bl	9c34 <mpc_get_str@@Base+0x1e8>
    9b8c:	mov	x19, x0
    9b90:	b	9bec <mpc_get_str@@Base+0x1a0>
    9b94:	mov	w19, w0
    9b98:	mov	w5, w3
    9b9c:	mov	x3, x1
    9ba0:	add	x1, sp, #0x8
    9ba4:	mov	x0, xzr
    9ba8:	mov	w2, w19
    9bac:	mov	x4, x20
    9bb0:	bl	51d0 <mpfr_get_str@plt>
    9bb4:	cbz	x0, 9c04 <mpc_get_str@@Base+0x1b8>
    9bb8:	ldr	x22, [sp, #8]
    9bbc:	mov	x21, x0
    9bc0:	mov	x0, x20
    9bc4:	bl	55d0 <mpfr_number_p@plt>
    9bc8:	cmp	w0, #0x0
    9bcc:	cset	w3, eq  // eq = none
    9bd0:	mov	x0, x21
    9bd4:	mov	x1, x22
    9bd8:	mov	w2, w19
    9bdc:	bl	9c78 <mpc_get_str@@Base+0x22c>
    9be0:	mov	x19, x0
    9be4:	mov	x0, x21
    9be8:	bl	53f0 <mpfr_free_str@plt>
    9bec:	mov	x0, x19
    9bf0:	ldp	x20, x19, [sp, #48]
    9bf4:	ldp	x22, x21, [sp, #32]
    9bf8:	ldp	x29, x30, [sp, #16]
    9bfc:	add	sp, sp, #0x40
    9c00:	ret
    9c04:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    9c08:	ldr	x8, [x8, #4008]
    9c0c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    9c10:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    9c14:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    9c18:	ldr	x0, [x8]
    9c1c:	add	x1, x1, #0xba0
    9c20:	add	x2, x2, #0xca0
    9c24:	add	x4, x4, #0xcbc
    9c28:	mov	w3, #0xc8                  	// #200
    9c2c:	bl	56a0 <fprintf@plt>
    9c30:	bl	5110 <abort@plt>
    9c34:	stp	x29, x30, [sp, #-32]!
    9c38:	str	x19, [sp, #16]
    9c3c:	mov	x19, x0
    9c40:	mov	w0, #0x3                   	// #3
    9c44:	mov	x29, sp
    9c48:	bl	4cc0 <mpc_alloc_str@plt>
    9c4c:	ldr	w8, [x19, #8]
    9c50:	ldr	x19, [sp, #16]
    9c54:	mov	w9, #0x2b                  	// #43
    9c58:	mov	w10, #0x2d                  	// #45
    9c5c:	cmp	w8, #0x0
    9c60:	mov	w11, #0x30                  	// #48
    9c64:	csel	w8, w10, w9, lt  // lt = tstop
    9c68:	strb	w8, [x0]
    9c6c:	sturh	w11, [x0, #1]
    9c70:	ldp	x29, x30, [sp], #32
    9c74:	ret
    9c78:	stp	x29, x30, [sp, #-80]!
    9c7c:	str	x25, [sp, #16]
    9c80:	stp	x24, x23, [sp, #32]
    9c84:	stp	x22, x21, [sp, #48]
    9c88:	stp	x20, x19, [sp, #64]
    9c8c:	mov	x29, sp
    9c90:	mov	w22, w3
    9c94:	mov	w20, w2
    9c98:	mov	x19, x1
    9c9c:	mov	x21, x0
    9ca0:	bl	4ad0 <strlen@plt>
    9ca4:	mov	x8, x0
    9ca8:	cbz	w22, 9cc4 <mpc_get_str@@Base+0x278>
    9cac:	add	x0, x8, #0x1
    9cb0:	bl	4cc0 <mpc_alloc_str@plt>
    9cb4:	mov	x1, x21
    9cb8:	mov	x22, x0
    9cbc:	bl	5450 <strcpy@plt>
    9cc0:	b	9e00 <mpc_get_str@@Base+0x3b4>
    9cc4:	ldrb	w24, [x21]
    9cc8:	sub	x9, x19, #0x1
    9ccc:	lsl	x10, x9, #2
    9cd0:	cmp	w20, #0x10
    9cd4:	csel	x19, x10, x9, eq  // eq = none
    9cd8:	cbz	x19, 9cf4 <mpc_get_str@@Base+0x2a8>
    9cdc:	add	x0, x8, #0x5
    9ce0:	tbnz	x19, #63, 9cfc <mpc_get_str@@Base+0x2b0>
    9ce4:	mov	x9, x19
    9ce8:	cmp	x9, #0xa
    9cec:	b.ge	9d30 <mpc_get_str@@Base+0x2e4>  // b.tcont
    9cf0:	b	9d50 <mpc_get_str@@Base+0x304>
    9cf4:	add	x0, x8, #0x2
    9cf8:	b	9d50 <mpc_get_str@@Base+0x304>
    9cfc:	cmn	x19, #0xb
    9d00:	b.gt	9d24 <mpc_get_str@@Base+0x2d8>
    9d04:	mov	x9, #0x9999999999999999    	// #-7378697629483820647
    9d08:	smulh	x9, x19, x9
    9d0c:	asr	x10, x9, #2
    9d10:	add	x9, x10, x9, lsr #63
    9d14:	add	x0, x8, #0x6
    9d18:	cmp	x9, #0xa
    9d1c:	b.ge	9d30 <mpc_get_str@@Base+0x2e4>  // b.tcont
    9d20:	b	9d50 <mpc_get_str@@Base+0x304>
    9d24:	neg	x9, x19
    9d28:	cmp	x9, #0xa
    9d2c:	b.lt	9d50 <mpc_get_str@@Base+0x304>  // b.tstop
    9d30:	mov	x8, #0x6666666666666666    	// #7378697629483820646
    9d34:	movk	x8, #0x6667
    9d38:	smulh	x10, x9, x8
    9d3c:	asr	x11, x10, #2
    9d40:	cmp	x9, #0x63
    9d44:	add	x9, x11, x10, lsr #63
    9d48:	add	x0, x0, #0x1
    9d4c:	b.gt	9d38 <mpc_get_str@@Base+0x2ec>
    9d50:	bl	4cc0 <mpc_alloc_str@plt>
    9d54:	mov	x23, x21
    9d58:	ldrb	w8, [x23], #1
    9d5c:	mov	x25, x0
    9d60:	mov	x22, x0
    9d64:	cmp	w24, #0x2d
    9d68:	strb	w8, [x25], #1
    9d6c:	b.eq	9d78 <mpc_get_str@@Base+0x32c>  // b.none
    9d70:	cmp	w24, #0x2b
    9d74:	b.ne	9d88 <mpc_get_str@@Base+0x33c>  // b.any
    9d78:	ldrb	w8, [x21, #1]
    9d7c:	add	x23, x21, #0x2
    9d80:	add	x25, x22, #0x2
    9d84:	strb	w8, [x22, #1]
    9d88:	bl	4d40 <localeconv@plt>
    9d8c:	ldr	x8, [x0]
    9d90:	mov	x0, x22
    9d94:	mov	x1, x23
    9d98:	ldrb	w8, [x8]
    9d9c:	strb	wzr, [x25, #1]
    9da0:	strb	w8, [x25]
    9da4:	bl	4ed0 <strcat@plt>
    9da8:	cbz	x19, 9e00 <mpc_get_str@@Base+0x3b4>
    9dac:	mov	x0, x21
    9db0:	bl	4ad0 <strlen@plt>
    9db4:	add	x8, x22, x0
    9db8:	cmp	w20, #0x10
    9dbc:	add	x0, x8, #0x1
    9dc0:	b.eq	9dd4 <mpc_get_str@@Base+0x388>  // b.none
    9dc4:	cmp	w20, #0xa
    9dc8:	b.eq	9ddc <mpc_get_str@@Base+0x390>  // b.none
    9dcc:	cmp	w20, #0x2
    9dd0:	b.ne	9de4 <mpc_get_str@@Base+0x398>  // b.any
    9dd4:	mov	w8, #0x70                  	// #112
    9dd8:	b	9de8 <mpc_get_str@@Base+0x39c>
    9ddc:	mov	w8, #0x65                  	// #101
    9de0:	b	9de8 <mpc_get_str@@Base+0x39c>
    9de4:	mov	w8, #0x40                  	// #64
    9de8:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    9dec:	strb	w8, [x0]
    9df0:	strb	wzr, [x0, #1]!
    9df4:	add	x1, x1, #0xcc9
    9df8:	mov	x2, x19
    9dfc:	bl	4c00 <sprintf@plt>
    9e00:	mov	x0, x22
    9e04:	ldp	x20, x19, [sp, #64]
    9e08:	ldp	x22, x21, [sp, #48]
    9e0c:	ldp	x24, x23, [sp, #32]
    9e10:	ldr	x25, [sp, #16]
    9e14:	ldp	x29, x30, [sp], #80
    9e18:	ret

0000000000009e1c <mpc_imag@@Base>:
    9e1c:	stp	x29, x30, [sp, #-16]!
    9e20:	ldr	w3, [x1, #40]
    9e24:	add	x1, x1, #0x20
    9e28:	mov	x29, sp
    9e2c:	bl	52e0 <mpfr_set4@plt>
    9e30:	ldp	x29, x30, [sp], #16
    9e34:	ret

0000000000009e38 <mpc_init2@@Base>:
    9e38:	stp	x29, x30, [sp, #-32]!
    9e3c:	stp	x20, x19, [sp, #16]
    9e40:	mov	x29, sp
    9e44:	mov	x19, x1
    9e48:	mov	x20, x0
    9e4c:	bl	5540 <mpfr_init2@plt>
    9e50:	add	x0, x20, #0x20
    9e54:	mov	x1, x19
    9e58:	bl	5540 <mpfr_init2@plt>
    9e5c:	ldp	x20, x19, [sp, #16]
    9e60:	ldp	x29, x30, [sp], #32
    9e64:	ret

0000000000009e68 <mpc_init3@@Base>:
    9e68:	stp	x29, x30, [sp, #-32]!
    9e6c:	stp	x20, x19, [sp, #16]
    9e70:	mov	x29, sp
    9e74:	mov	x19, x2
    9e78:	mov	x20, x0
    9e7c:	bl	5540 <mpfr_init2@plt>
    9e80:	add	x0, x20, #0x20
    9e84:	mov	x1, x19
    9e88:	bl	5540 <mpfr_init2@plt>
    9e8c:	ldp	x20, x19, [sp, #16]
    9e90:	ldp	x29, x30, [sp], #32
    9e94:	ret

0000000000009e98 <mpc_inp_str@@Base>:
    9e98:	sub	sp, sp, #0x80
    9e9c:	stp	x29, x30, [sp, #32]
    9ea0:	stp	x28, x27, [sp, #48]
    9ea4:	stp	x26, x25, [sp, #64]
    9ea8:	stp	x24, x23, [sp, #80]
    9eac:	stp	x22, x21, [sp, #96]
    9eb0:	stp	x20, x19, [sp, #112]
    9eb4:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    9eb8:	ldr	x8, [x8, #4040]
    9ebc:	cmp	x1, #0x0
    9ec0:	mov	x20, x0
    9ec4:	add	x29, sp, #0x20
    9ec8:	ldr	x8, [x8]
    9ecc:	mov	w22, w4
    9ed0:	mov	w23, w3
    9ed4:	mov	x19, x2
    9ed8:	csel	x25, x8, x1, eq  // eq = none
    9edc:	mov	x0, x25
    9ee0:	bl	a15c <mpc_inp_str@@Base+0x2c4>
    9ee4:	mov	x21, x0
    9ee8:	mov	x0, x25
    9eec:	bl	5030 <getc@plt>
    9ef0:	mov	w27, w0
    9ef4:	cmn	w0, #0x1
    9ef8:	b.eq	9f68 <mpc_inp_str@@Base+0xd0>  // b.none
    9efc:	cmp	w27, #0x28
    9f00:	b.ne	9f78 <mpc_inp_str@@Base+0xe0>  // b.any
    9f04:	mov	x0, x25
    9f08:	bl	a15c <mpc_inp_str@@Base+0x2c4>
    9f0c:	mov	x21, x0
    9f10:	mov	x0, x25
    9f14:	bl	a1e0 <mpc_inp_str@@Base+0x348>
    9f18:	mov	x27, x0
    9f1c:	bl	4ad0 <strlen@plt>
    9f20:	add	x24, x0, #0x1
    9f24:	mov	x0, x25
    9f28:	bl	5030 <getc@plt>
    9f2c:	mov	w26, w0
    9f30:	bl	5280 <__ctype_b_loc@plt>
    9f34:	ldr	x8, [x0]
    9f38:	ldrh	w8, [x8, w26, sxtw #1]
    9f3c:	tbnz	w8, #13, a000 <mpc_inp_str@@Base+0x168>
    9f40:	cmn	w26, #0x1
    9f44:	b.eq	9f54 <mpc_inp_str@@Base+0xbc>  // b.none
    9f48:	mov	w0, w26
    9f4c:	mov	x1, x25
    9f50:	bl	5320 <ungetc@plt>
    9f54:	mov	x0, x27
    9f58:	bl	5100 <mpc_free_str@plt>
    9f5c:	mov	w8, wzr
    9f60:	tbnz	w8, #0, 9f98 <mpc_inp_str@@Base+0x100>
    9f64:	b	a0ec <mpc_inp_str@@Base+0x254>
    9f68:	mov	x24, xzr
    9f6c:	cmn	w27, #0x1
    9f70:	b.ne	9fd0 <mpc_inp_str@@Base+0x138>  // b.any
    9f74:	b	9fc0 <mpc_inp_str@@Base+0x128>
    9f78:	mov	w0, w27
    9f7c:	mov	x1, x25
    9f80:	bl	5320 <ungetc@plt>
    9f84:	mov	x0, x25
    9f88:	bl	a1e0 <mpc_inp_str@@Base+0x348>
    9f8c:	mov	x26, x0
    9f90:	bl	4ad0 <strlen@plt>
    9f94:	mov	x24, x0
    9f98:	mov	x0, x20
    9f9c:	mov	x1, x26
    9fa0:	mov	w2, w23
    9fa4:	mov	w3, w22
    9fa8:	bl	5490 <mpc_set_str@plt>
    9fac:	mov	w27, w0
    9fb0:	mov	x0, x26
    9fb4:	bl	5100 <mpc_free_str@plt>
    9fb8:	cmn	w27, #0x1
    9fbc:	b.ne	9fd0 <mpc_inp_str@@Base+0x138>  // b.any
    9fc0:	mov	x0, x20
    9fc4:	bl	4b10 <mpfr_set_nan@plt>
    9fc8:	add	x0, x20, #0x20
    9fcc:	bl	4b10 <mpfr_set_nan@plt>
    9fd0:	cbz	x19, 9fdc <mpc_inp_str@@Base+0x144>
    9fd4:	add	x8, x21, x24
    9fd8:	str	x8, [x19]
    9fdc:	mov	w0, w27
    9fe0:	ldp	x20, x19, [sp, #112]
    9fe4:	ldp	x22, x21, [sp, #96]
    9fe8:	ldp	x24, x23, [sp, #80]
    9fec:	ldp	x26, x25, [sp, #64]
    9ff0:	ldp	x28, x27, [sp, #48]
    9ff4:	ldp	x29, x30, [sp, #32]
    9ff8:	add	sp, sp, #0x80
    9ffc:	ret
    a000:	mov	w0, w26
    a004:	mov	x1, x25
    a008:	stur	w22, [x29, #-4]
    a00c:	bl	5320 <ungetc@plt>
    a010:	mov	x0, x25
    a014:	bl	a15c <mpc_inp_str@@Base+0x2c4>
    a018:	str	x0, [sp, #16]
    a01c:	mov	x0, x25
    a020:	bl	a1e0 <mpc_inp_str@@Base+0x348>
    a024:	mov	x28, x0
    a028:	bl	4ad0 <strlen@plt>
    a02c:	add	x24, x0, x24
    a030:	add	x0, x24, #0x2
    a034:	str	x0, [sp, #8]
    a038:	bl	4cc0 <mpc_alloc_str@plt>
    a03c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    a040:	add	x1, x1, #0xcce
    a044:	mov	x2, x27
    a048:	mov	x3, x28
    a04c:	mov	x26, x0
    a050:	bl	4c00 <sprintf@plt>
    a054:	tbnz	w0, #31, a0fc <mpc_inp_str@@Base+0x264>
    a058:	add	x22, x24, #0x1
    a05c:	cmp	x22, w0, sxtw
    a060:	b.ne	a12c <mpc_inp_str@@Base+0x294>  // b.any
    a064:	ldr	x8, [sp, #16]
    a068:	mov	x0, x27
    a06c:	add	x21, x8, x21
    a070:	bl	5100 <mpc_free_str@plt>
    a074:	mov	x0, x28
    a078:	bl	5100 <mpc_free_str@plt>
    a07c:	mov	x0, x25
    a080:	bl	a15c <mpc_inp_str@@Base+0x2c4>
    a084:	add	x21, x21, x0
    a088:	mov	x0, x25
    a08c:	bl	5030 <getc@plt>
    a090:	cmn	w0, #0x1
    a094:	b.eq	a0e0 <mpc_inp_str@@Base+0x248>  // b.none
    a098:	cmp	w0, #0x29
    a09c:	b.ne	a0d8 <mpc_inp_str@@Base+0x240>  // b.any
    a0a0:	add	x2, x24, #0x3
    a0a4:	ldr	x24, [sp, #8]
    a0a8:	mov	x0, x26
    a0ac:	mov	x1, x24
    a0b0:	bl	5440 <mpc_realloc_str@plt>
    a0b4:	mov	w8, #0x29                  	// #41
    a0b8:	mov	x26, x0
    a0bc:	strb	w8, [x0, x22]
    a0c0:	strb	wzr, [x0, x24]
    a0c4:	mov	w8, #0x1                   	// #1
    a0c8:	mov	x24, x22
    a0cc:	ldur	w22, [x29, #-4]
    a0d0:	tbnz	w8, #0, 9f98 <mpc_inp_str@@Base+0x100>
    a0d4:	b	a0ec <mpc_inp_str@@Base+0x254>
    a0d8:	mov	x1, x25
    a0dc:	bl	5320 <ungetc@plt>
    a0e0:	mov	w8, #0x1                   	// #1
    a0e4:	ldur	w22, [x29, #-4]
    a0e8:	tbnz	w8, #0, 9f98 <mpc_inp_str@@Base+0x100>
    a0ec:	mov	w27, #0xffffffff            	// #-1
    a0f0:	cmn	w27, #0x1
    a0f4:	b.ne	9fd0 <mpc_inp_str@@Base+0x138>  // b.any
    a0f8:	b	9fc0 <mpc_inp_str@@Base+0x128>
    a0fc:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    a100:	ldr	x8, [x8, #4008]
    a104:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    a108:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    a10c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    a110:	ldr	x0, [x8]
    a114:	add	x1, x1, #0xba0
    a118:	add	x2, x2, #0xcd5
    a11c:	add	x4, x4, #0xcdf
    a120:	mov	w3, #0xca                  	// #202
    a124:	bl	56a0 <fprintf@plt>
    a128:	bl	5110 <abort@plt>
    a12c:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    a130:	ldr	x8, [x8, #4008]
    a134:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    a138:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    a13c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    a140:	ldr	x0, [x8]
    a144:	add	x1, x1, #0xba0
    a148:	add	x2, x2, #0xcd5
    a14c:	add	x4, x4, #0xce8
    a150:	mov	w3, #0xcc                  	// #204
    a154:	bl	56a0 <fprintf@plt>
    a158:	bl	5110 <abort@plt>
    a15c:	stp	x29, x30, [sp, #-48]!
    a160:	stp	x22, x21, [sp, #16]
    a164:	stp	x20, x19, [sp, #32]
    a168:	mov	x29, sp
    a16c:	mov	x19, x0
    a170:	bl	5030 <getc@plt>
    a174:	cmn	w0, #0x1
    a178:	b.eq	a1b8 <mpc_inp_str@@Base+0x320>  // b.none
    a17c:	mov	w21, w0
    a180:	bl	5280 <__ctype_b_loc@plt>
    a184:	mov	x22, x0
    a188:	mov	x20, xzr
    a18c:	ldr	x8, [x22]
    a190:	and	w9, w21, #0xff
    a194:	ldrh	w8, [x8, w9, uxtw #1]
    a198:	tbz	w8, #13, a1c0 <mpc_inp_str@@Base+0x328>
    a19c:	mov	x0, x19
    a1a0:	bl	5030 <getc@plt>
    a1a4:	mov	w21, w0
    a1a8:	cmn	w0, #0x1
    a1ac:	add	x20, x20, #0x1
    a1b0:	b.ne	a18c <mpc_inp_str@@Base+0x2f4>  // b.any
    a1b4:	b	a1cc <mpc_inp_str@@Base+0x334>
    a1b8:	mov	x20, xzr
    a1bc:	b	a1cc <mpc_inp_str@@Base+0x334>
    a1c0:	mov	w0, w21
    a1c4:	mov	x1, x19
    a1c8:	bl	5320 <ungetc@plt>
    a1cc:	mov	x0, x20
    a1d0:	ldp	x20, x19, [sp, #32]
    a1d4:	ldp	x22, x21, [sp, #16]
    a1d8:	ldp	x29, x30, [sp], #48
    a1dc:	ret
    a1e0:	stp	x29, x30, [sp, #-80]!
    a1e4:	stp	x20, x19, [sp, #64]
    a1e8:	mov	x19, x0
    a1ec:	mov	w0, #0x64                  	// #100
    a1f0:	stp	x26, x25, [sp, #16]
    a1f4:	stp	x24, x23, [sp, #32]
    a1f8:	stp	x22, x21, [sp, #48]
    a1fc:	mov	x29, sp
    a200:	mov	w22, #0x64                  	// #100
    a204:	bl	4cc0 <mpc_alloc_str@plt>
    a208:	mov	x20, x0
    a20c:	mov	x8, xzr
    a210:	add	x26, x8, #0x3
    a214:	neg	x21, x22
    a218:	mov	x0, x19
    a21c:	bl	5030 <getc@plt>
    a220:	mov	w23, w0
    a224:	cmn	w0, #0x1
    a228:	b.eq	a290 <mpc_inp_str@@Base+0x3f8>  // b.none
    a22c:	cmp	w23, #0xa
    a230:	b.eq	a290 <mpc_inp_str@@Base+0x3f8>  // b.none
    a234:	bl	5280 <__ctype_b_loc@plt>
    a238:	orr	w8, w23, #0x1
    a23c:	cmp	w8, #0x29
    a240:	b.eq	a290 <mpc_inp_str@@Base+0x3f8>  // b.none
    a244:	ldr	x8, [x0]
    a248:	and	w9, w23, #0xff
    a24c:	ldrh	w8, [x8, w9, uxtw #1]
    a250:	tbnz	w8, #13, a290 <mpc_inp_str@@Base+0x3f8>
    a254:	add	x8, x20, x26
    a258:	add	x26, x26, #0x1
    a25c:	add	x9, x21, x26
    a260:	cmp	x9, #0x3
    a264:	sturb	w23, [x8, #-3]
    a268:	b.ne	a218 <mpc_inp_str@@Base+0x380>  // b.any
    a26c:	lsl	x21, x22, #1
    a270:	mov	x0, x20
    a274:	mov	x1, x22
    a278:	mov	x2, x21
    a27c:	bl	5440 <mpc_realloc_str@plt>
    a280:	mov	x20, x0
    a284:	sub	x8, x26, #0x3
    a288:	mov	x22, x21
    a28c:	b	a210 <mpc_inp_str@@Base+0x378>
    a290:	sub	x21, x26, #0x2
    a294:	mov	x0, x20
    a298:	mov	x1, x22
    a29c:	mov	x2, x21
    a2a0:	bl	5440 <mpc_realloc_str@plt>
    a2a4:	mov	x20, x0
    a2a8:	add	x9, x0, x26
    a2ac:	subs	x8, x26, #0x3
    a2b0:	sturb	wzr, [x9, #-3]
    a2b4:	b.eq	a2dc <mpc_inp_str@@Base+0x444>  // b.none
    a2b8:	cmp	w23, #0x28
    a2bc:	b.eq	a2f8 <mpc_inp_str@@Base+0x460>  // b.none
    a2c0:	cmn	w23, #0x1
    a2c4:	b.eq	a2d4 <mpc_inp_str@@Base+0x43c>  // b.none
    a2c8:	mov	w0, w23
    a2cc:	mov	x1, x19
    a2d0:	bl	5320 <ungetc@plt>
    a2d4:	mov	x23, x20
    a2d8:	mov	x20, x23
    a2dc:	mov	x0, x20
    a2e0:	ldp	x20, x19, [sp, #64]
    a2e4:	ldp	x22, x21, [sp, #48]
    a2e8:	ldp	x24, x23, [sp, #32]
    a2ec:	ldp	x26, x25, [sp, #16]
    a2f0:	ldp	x29, x30, [sp], #80
    a2f4:	ret
    a2f8:	cmp	x8, #0x5
    a2fc:	b.eq	a348 <mpc_inp_str@@Base+0x4b0>  // b.none
    a300:	cmp	x8, #0x3
    a304:	b.ne	a3c4 <mpc_inp_str@@Base+0x52c>  // b.any
    a308:	bl	4d20 <__ctype_tolower_loc@plt>
    a30c:	ldr	x8, [x0]
    a310:	ldrb	w9, [x20]
    a314:	ldr	w9, [x8, x9, lsl #2]
    a318:	cmp	w9, #0x6e
    a31c:	b.ne	a340 <mpc_inp_str@@Base+0x4a8>  // b.any
    a320:	ldrb	w9, [x20, #1]
    a324:	ldr	w9, [x8, x9, lsl #2]
    a328:	cmp	w9, #0x61
    a32c:	b.ne	a340 <mpc_inp_str@@Base+0x4a8>  // b.any
    a330:	ldrb	w9, [x20, #2]
    a334:	ldr	w8, [x8, x9, lsl #2]
    a338:	cmp	w8, #0x6e
    a33c:	b.eq	a398 <mpc_inp_str@@Base+0x500>  // b.none
    a340:	cmp	x26, #0x8
    a344:	b.ne	a3c4 <mpc_inp_str@@Base+0x52c>  // b.any
    a348:	ldrb	w8, [x20]
    a34c:	cmp	w8, #0x40
    a350:	b.ne	a3c4 <mpc_inp_str@@Base+0x52c>  // b.any
    a354:	bl	4d20 <__ctype_tolower_loc@plt>
    a358:	ldr	x8, [x0]
    a35c:	ldrb	w9, [x20, #1]
    a360:	ldr	w9, [x8, x9, lsl #2]
    a364:	cmp	w9, #0x6e
    a368:	b.ne	a3c4 <mpc_inp_str@@Base+0x52c>  // b.any
    a36c:	ldrb	w9, [x20, #2]
    a370:	ldr	w9, [x8, x9, lsl #2]
    a374:	cmp	w9, #0x61
    a378:	b.ne	a3c4 <mpc_inp_str@@Base+0x52c>  // b.any
    a37c:	ldrb	w9, [x20, #3]
    a380:	ldr	w8, [x8, x9, lsl #2]
    a384:	cmp	w8, #0x6e
    a388:	b.ne	a3c4 <mpc_inp_str@@Base+0x52c>  // b.any
    a38c:	ldrb	w8, [x20, #4]
    a390:	cmp	w8, #0x40
    a394:	b.ne	a3c4 <mpc_inp_str@@Base+0x52c>  // b.any
    a398:	mov	x0, x19
    a39c:	bl	a4dc <mpc_inp_str@@Base+0x644>
    a3a0:	mov	x22, x0
    a3a4:	bl	4ad0 <strlen@plt>
    a3a8:	add	x8, x0, x26
    a3ac:	sub	x9, x8, #0x2
    a3b0:	mov	x24, x0
    a3b4:	cmp	x9, x21
    a3b8:	b.cs	a3dc <mpc_inp_str@@Base+0x544>  // b.hs, b.nlast
    a3bc:	mov	x23, x20
    a3c0:	b	a3f8 <mpc_inp_str@@Base+0x560>
    a3c4:	mov	w0, #0x28                  	// #40
    a3c8:	mov	x1, x19
    a3cc:	bl	5320 <ungetc@plt>
    a3d0:	mov	x23, x20
    a3d4:	tbnz	wzr, #0, a2d8 <mpc_inp_str@@Base+0x440>
    a3d8:	b	a2dc <mpc_inp_str@@Base+0x444>
    a3dc:	sub	x25, x8, #0x1
    a3e0:	mov	x0, x20
    a3e4:	mov	x1, x21
    a3e8:	mov	x2, x25
    a3ec:	bl	5440 <mpc_realloc_str@plt>
    a3f0:	mov	x23, x0
    a3f4:	mov	x21, x25
    a3f8:	add	x8, x23, x26
    a3fc:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    a400:	sub	x0, x8, #0x3
    a404:	add	x1, x1, #0xcf7
    a408:	mov	x2, x22
    a40c:	bl	4c00 <sprintf@plt>
    a410:	tbnz	w0, #31, a47c <mpc_inp_str@@Base+0x5e4>
    a414:	add	x8, x24, #0x1
    a418:	cmp	x8, w0, sxtw
    a41c:	b.ne	a4ac <mpc_inp_str@@Base+0x614>  // b.any
    a420:	mov	x0, x19
    a424:	bl	5030 <getc@plt>
    a428:	cmp	w0, #0x29
    a42c:	b.eq	a444 <mpc_inp_str@@Base+0x5ac>  // b.none
    a430:	cmn	w0, #0x1
    a434:	b.eq	a468 <mpc_inp_str@@Base+0x5d0>  // b.none
    a438:	mov	x1, x19
    a43c:	bl	5320 <ungetc@plt>
    a440:	b	a468 <mpc_inp_str@@Base+0x5d0>
    a444:	add	x2, x24, x26
    a448:	mov	x0, x23
    a44c:	mov	x1, x21
    a450:	bl	5440 <mpc_realloc_str@plt>
    a454:	add	x8, x0, x24
    a458:	add	x8, x8, x26
    a45c:	mov	w9, #0x29                  	// #41
    a460:	mov	x23, x0
    a464:	sturh	w9, [x8, #-2]
    a468:	mov	x0, x22
    a46c:	bl	5100 <mpc_free_str@plt>
    a470:	mov	w8, #0x1                   	// #1
    a474:	tbnz	w8, #0, a2d8 <mpc_inp_str@@Base+0x440>
    a478:	b	a2dc <mpc_inp_str@@Base+0x444>
    a47c:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    a480:	ldr	x8, [x8, #4008]
    a484:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    a488:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    a48c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    a490:	ldr	x0, [x8]
    a494:	add	x1, x1, #0xba0
    a498:	add	x2, x2, #0xcd5
    a49c:	add	x4, x4, #0xcdf
    a4a0:	mov	w3, #0x88                  	// #136
    a4a4:	bl	56a0 <fprintf@plt>
    a4a8:	bl	5110 <abort@plt>
    a4ac:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    a4b0:	ldr	x8, [x8, #4008]
    a4b4:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    a4b8:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    a4bc:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    a4c0:	ldr	x0, [x8]
    a4c4:	add	x1, x1, #0xba0
    a4c8:	add	x2, x2, #0xcd5
    a4cc:	add	x4, x4, #0xcfb
    a4d0:	mov	w3, #0x8a                  	// #138
    a4d4:	bl	56a0 <fprintf@plt>
    a4d8:	bl	5110 <abort@plt>
    a4dc:	stp	x29, x30, [sp, #-64]!
    a4e0:	stp	x20, x19, [sp, #48]
    a4e4:	mov	x19, x0
    a4e8:	mov	w0, #0x64                  	// #100
    a4ec:	stp	x24, x23, [sp, #16]
    a4f0:	stp	x22, x21, [sp, #32]
    a4f4:	mov	x29, sp
    a4f8:	mov	w21, #0x64                  	// #100
    a4fc:	bl	4cc0 <mpc_alloc_str@plt>
    a500:	mov	x20, x0
    a504:	mov	x0, x19
    a508:	bl	5030 <getc@plt>
    a50c:	mov	w22, w0
    a510:	bl	5280 <__ctype_b_loc@plt>
    a514:	cmp	w22, #0x5f
    a518:	mov	x23, x0
    a51c:	b.eq	a538 <mpc_inp_str@@Base+0x6a0>  // b.none
    a520:	ldr	x8, [x23]
    a524:	and	w9, w22, #0xff
    a528:	ldrh	w8, [x8, w9, uxtw #1]
    a52c:	tbnz	w8, #3, a538 <mpc_inp_str@@Base+0x6a0>
    a530:	mov	x24, xzr
    a534:	b	a594 <mpc_inp_str@@Base+0x6fc>
    a538:	mov	x24, xzr
    a53c:	mov	w21, #0x64                  	// #100
    a540:	strb	w22, [x20, x24]
    a544:	add	x24, x24, #0x1
    a548:	cmp	x24, x21
    a54c:	b.ne	a56c <mpc_inp_str@@Base+0x6d4>  // b.any
    a550:	lsl	x22, x21, #1
    a554:	mov	x0, x20
    a558:	mov	x1, x21
    a55c:	mov	x2, x22
    a560:	bl	5440 <mpc_realloc_str@plt>
    a564:	mov	x20, x0
    a568:	mov	x21, x22
    a56c:	mov	x0, x19
    a570:	bl	5030 <getc@plt>
    a574:	ldr	x8, [x23]
    a578:	and	w9, w0, #0xff
    a57c:	mov	w22, w0
    a580:	cmp	w0, #0x5f
    a584:	ldrh	w8, [x8, w9, uxtw #1]
    a588:	and	w8, w8, #0x8
    a58c:	b.eq	a540 <mpc_inp_str@@Base+0x6a8>  // b.none
    a590:	cbnz	w8, a540 <mpc_inp_str@@Base+0x6a8>
    a594:	add	x2, x24, #0x1
    a598:	mov	x0, x20
    a59c:	mov	x1, x21
    a5a0:	bl	5440 <mpc_realloc_str@plt>
    a5a4:	mov	x20, x0
    a5a8:	cmn	w22, #0x1
    a5ac:	strb	wzr, [x0, x24]
    a5b0:	b.eq	a5c0 <mpc_inp_str@@Base+0x728>  // b.none
    a5b4:	mov	w0, w22
    a5b8:	mov	x1, x19
    a5bc:	bl	5320 <ungetc@plt>
    a5c0:	mov	x0, x20
    a5c4:	ldp	x20, x19, [sp, #48]
    a5c8:	ldp	x22, x21, [sp, #32]
    a5cc:	ldp	x24, x23, [sp, #16]
    a5d0:	ldp	x29, x30, [sp], #64
    a5d4:	ret

000000000000a5d8 <mpc_log@@Base>:
    a5d8:	sub	sp, sp, #0xb0
    a5dc:	stp	x20, x19, [sp, #160]
    a5e0:	mov	x19, x0
    a5e4:	mov	x0, x1
    a5e8:	stp	x29, x30, [sp, #80]
    a5ec:	stp	x28, x27, [sp, #96]
    a5f0:	stp	x26, x25, [sp, #112]
    a5f4:	stp	x24, x23, [sp, #128]
    a5f8:	stp	x22, x21, [sp, #144]
    a5fc:	add	x29, sp, #0x50
    a600:	mov	w26, w2
    a604:	mov	x21, x1
    a608:	bl	55d0 <mpfr_number_p@plt>
    a60c:	cbz	w0, a74c <mpc_log@@Base+0x174>
    a610:	add	x22, x21, #0x20
    a614:	mov	x0, x22
    a618:	bl	55d0 <mpfr_number_p@plt>
    a61c:	cbz	w0, a74c <mpc_log@@Base+0x174>
    a620:	mov	x0, x21
    a624:	bl	5300 <mpfr_sgn@plt>
    a628:	mov	w23, w0
    a62c:	mov	x0, x22
    a630:	bl	5300 <mpfr_sgn@plt>
    a634:	cbz	w0, a7e8 <mpc_log@@Base+0x210>
    a638:	cbz	w23, a9dc <mpc_log@@Base+0x404>
    a63c:	ldr	x23, [x19]
    a640:	add	x0, sp, #0x10
    a644:	mov	w1, #0x2                   	// #2
    a648:	bl	5540 <mpfr_init2@plt>
    a64c:	tst	w26, #0xf
    a650:	mov	x0, x23
    a654:	cset	w24, eq  // eq = none
    a658:	bl	4df0 <mpc_ceil_log2@plt>
    a65c:	add	x8, x23, x0
    a660:	add	x23, x8, #0x4
    a664:	add	x0, sp, #0x10
    a668:	mov	x1, x23
    a66c:	bl	4d50 <mpfr_set_prec@plt>
    a670:	add	x0, sp, #0x10
    a674:	mov	x1, x21
    a678:	mov	w2, wzr
    a67c:	bl	52b0 <mpc_abs@plt>
    a680:	ldr	x8, [sp, #32]
    a684:	mov	x25, #0x8000000000000003    	// #-9223372036854775805
    a688:	str	w26, [sp, #12]
    a68c:	cmp	x8, x25
    a690:	b.eq	a824 <mpc_log@@Base+0x24c>  // b.none
    a694:	mov	w20, wzr
    a698:	mov	w26, #0x1                   	// #1
    a69c:	mov	x27, #0x8000000000000001    	// #-9223372036854775807
    a6a0:	mov	x28, #0x100000000           	// #4294967296
    a6a4:	add	x0, sp, #0x10
    a6a8:	add	x1, sp, #0x10
    a6ac:	mov	w2, wzr
    a6b0:	bl	4e70 <mpfr_log@plt>
    a6b4:	ldr	x8, [sp, #32]
    a6b8:	cmp	x8, x27
    a6bc:	b.eq	a73c <mpc_log@@Base+0x164>  // b.none
    a6c0:	ldr	x10, [x19]
    a6c4:	sub	x9, x28, x8, lsl #32
    a6c8:	asr	x9, x9, #32
    a6cc:	cmp	x8, #0x0
    a6d0:	csinc	x8, x9, xzr, lt  // lt = tstop
    a6d4:	sub	x1, x23, x8
    a6d8:	add	x4, x10, x24
    a6dc:	add	x0, sp, #0x10
    a6e0:	mov	w3, #0x1                   	// #1
    a6e4:	mov	w2, wzr
    a6e8:	bl	5550 <mpfr_can_round@plt>
    a6ec:	cmp	w0, #0x0
    a6f0:	cset	w20, ne  // ne = any
    a6f4:	cmp	w26, #0x1
    a6f8:	b.hi	a73c <mpc_log@@Base+0x164>  // b.pmore
    a6fc:	cbnz	w0, a73c <mpc_log@@Base+0x164>
    a700:	mov	x0, x23
    a704:	add	w26, w26, #0x1
    a708:	bl	4df0 <mpc_ceil_log2@plt>
    a70c:	add	x8, x23, x0
    a710:	add	x23, x8, #0x4
    a714:	add	x0, sp, #0x10
    a718:	mov	x1, x23
    a71c:	bl	4d50 <mpfr_set_prec@plt>
    a720:	add	x0, sp, #0x10
    a724:	mov	x1, x21
    a728:	mov	w2, wzr
    a72c:	bl	52b0 <mpc_abs@plt>
    a730:	ldr	x8, [sp, #32]
    a734:	cmp	x8, x25
    a738:	b.ne	a6a4 <mpc_log@@Base+0xcc>  // b.any
    a73c:	ldr	w26, [sp, #12]
    a740:	tbz	w20, #0, a824 <mpc_log@@Base+0x24c>
    a744:	mov	w20, wzr
    a748:	b	a9a4 <mpc_log@@Base+0x3cc>
    a74c:	ldr	x8, [x21, #16]
    a750:	ldr	x9, [x21, #48]
    a754:	mov	x10, #0x2                   	// #2
    a758:	movk	x10, #0x8000, lsl #48
    a75c:	cmp	x8, x10
    a760:	b.ne	a780 <mpc_log@@Base+0x1a8>  // b.any
    a764:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    a768:	cmp	x9, x8
    a76c:	b.ne	a794 <mpc_log@@Base+0x1bc>  // b.any
    a770:	mov	w1, #0x1                   	// #1
    a774:	mov	x0, x19
    a778:	bl	5230 <mpfr_set_inf@plt>
    a77c:	b	a79c <mpc_log@@Base+0x1c4>
    a780:	cmp	x9, x10
    a784:	b.ne	a7ac <mpc_log@@Base+0x1d4>  // b.any
    a788:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    a78c:	cmp	x8, x9
    a790:	b.eq	a770 <mpc_log@@Base+0x198>  // b.none
    a794:	mov	x0, x19
    a798:	bl	4b10 <mpfr_set_nan@plt>
    a79c:	add	x0, x19, #0x20
    a7a0:	bl	4b10 <mpfr_set_nan@plt>
    a7a4:	mov	w20, wzr
    a7a8:	b	a7d0 <mpc_log@@Base+0x1f8>
    a7ac:	add	x1, x21, #0x20
    a7b0:	add	x0, x19, #0x20
    a7b4:	asr	w3, w26, #4
    a7b8:	mov	x2, x21
    a7bc:	bl	4d70 <mpfr_atan2@plt>
    a7c0:	mov	w20, w0
    a7c4:	mov	w1, #0x1                   	// #1
    a7c8:	mov	x0, x19
    a7cc:	bl	5230 <mpfr_set_inf@plt>
    a7d0:	cmp	w20, #0x0
    a7d4:	cset	w8, ne  // ne = any
    a7d8:	lsl	w8, w8, #2
    a7dc:	mov	w9, #0x8                   	// #8
    a7e0:	csel	w0, w9, w8, lt  // lt = tstop
    a7e4:	b	abd4 <mpc_log@@Base+0x5fc>
    a7e8:	cbz	w23, aa70 <mpc_log@@Base+0x498>
    a7ec:	cmp	w23, #0x1
    a7f0:	b.lt	aa98 <mpc_log@@Base+0x4c0>  // b.tstop
    a7f4:	and	w2, w26, #0xf
    a7f8:	mov	x0, x19
    a7fc:	mov	x1, x21
    a800:	bl	4e70 <mpfr_log@plt>
    a804:	ldr	w3, [x21, #40]
    a808:	mov	w23, w0
    a80c:	add	x0, x19, #0x20
    a810:	asr	w2, w26, #4
    a814:	mov	x1, x22
    a818:	bl	52e0 <mpfr_set4@plt>
    a81c:	mov	w20, w0
    a820:	b	ab14 <mpc_log@@Base+0x53c>
    a824:	ldr	x23, [x19]
    a828:	sub	x0, x29, #0x20
    a82c:	mov	w1, #0x2                   	// #2
    a830:	bl	5540 <mpfr_init2@plt>
    a834:	mov	x0, x21
    a838:	mov	x1, x22
    a83c:	bl	54c0 <mpfr_cmpabs@plt>
    a840:	cmp	w0, #0x0
    a844:	csel	x24, x22, x21, ge  // ge = tcont
    a848:	csel	x25, x21, x22, ge  // ge = tcont
    a84c:	tst	w26, #0xf
    a850:	cset	w26, eq  // eq = none
    a854:	mov	x27, #0x8000000000000001    	// #-9223372036854775807
    a858:	mov	x0, x23
    a85c:	bl	4df0 <mpc_ceil_log2@plt>
    a860:	add	x8, x23, x0
    a864:	add	x23, x8, #0x4
    a868:	sub	x0, x29, #0x20
    a86c:	mov	x1, x23
    a870:	bl	4d50 <mpfr_set_prec@plt>
    a874:	add	x0, sp, #0x10
    a878:	mov	x1, x23
    a87c:	bl	4d50 <mpfr_set_prec@plt>
    a880:	sub	x0, x29, #0x20
    a884:	mov	w3, #0x3                   	// #3
    a888:	mov	x1, x24
    a88c:	mov	x2, x25
    a890:	bl	5260 <mpfr_div@plt>
    a894:	sub	x0, x29, #0x20
    a898:	sub	x1, x29, #0x20
    a89c:	mov	w2, #0x3                   	// #3
    a8a0:	bl	5120 <mpfr_sqr@plt>
    a8a4:	sub	x0, x29, #0x20
    a8a8:	sub	x1, x29, #0x20
    a8ac:	mov	w2, #0x3                   	// #3
    a8b0:	bl	52f0 <mpfr_log1p@plt>
    a8b4:	sub	x0, x29, #0x20
    a8b8:	sub	x1, x29, #0x20
    a8bc:	mov	w2, #0x1                   	// #1
    a8c0:	mov	w3, #0x3                   	// #3
    a8c4:	bl	5430 <mpfr_div_2ui@plt>
    a8c8:	add	x0, sp, #0x10
    a8cc:	mov	w3, #0x1                   	// #1
    a8d0:	mov	x1, x25
    a8d4:	mov	w2, wzr
    a8d8:	bl	52e0 <mpfr_set4@plt>
    a8dc:	add	x0, sp, #0x10
    a8e0:	add	x1, sp, #0x10
    a8e4:	mov	w2, wzr
    a8e8:	bl	4e70 <mpfr_log@plt>
    a8ec:	ldr	x20, [sp, #32]
    a8f0:	ldr	w28, [sp, #24]
    a8f4:	add	x0, sp, #0x10
    a8f8:	add	x1, sp, #0x10
    a8fc:	sub	x2, x29, #0x20
    a900:	mov	w3, wzr
    a904:	bl	4f60 <mpfr_add@plt>
    a908:	tbnz	w28, #31, a914 <mpc_log@@Base+0x33c>
    a90c:	mov	w28, #0x5                   	// #5
    a910:	b	a934 <mpc_log@@Base+0x35c>
    a914:	ldr	x9, [sp, #32]
    a918:	ldur	x8, [x29, #-16]
    a91c:	mvn	x9, x9
    a920:	add	x8, x8, #0x5
    a924:	add	x9, x20, x9
    a928:	cmp	x8, x9
    a92c:	csel	x8, x8, x9, gt
    a930:	add	x28, x8, #0x2
    a934:	mov	x1, #0xffffffffffffffff    	// #-1
    a938:	mov	x0, x25
    a93c:	mov	x2, xzr
    a940:	bl	50f0 <mpfr_cmp_si_2exp@plt>
    a944:	cbz	w0, a968 <mpc_log@@Base+0x390>
    a948:	mov	w1, #0x1                   	// #1
    a94c:	mov	x0, x25
    a950:	mov	x2, xzr
    a954:	bl	4d80 <mpfr_cmp_ui_2exp@plt>
    a958:	cbz	w0, a968 <mpc_log@@Base+0x390>
    a95c:	mov	w20, wzr
    a960:	cbz	w20, a978 <mpc_log@@Base+0x3a0>
    a964:	b	a998 <mpc_log@@Base+0x3c0>
    a968:	ldr	x8, [sp, #32]
    a96c:	cmp	x8, x27
    a970:	cset	w20, eq  // eq = none
    a974:	cbnz	w20, a998 <mpc_log@@Base+0x3c0>
    a978:	ldr	x8, [x19]
    a97c:	sub	x1, x23, w28, sxtw
    a980:	add	x0, sp, #0x10
    a984:	mov	w3, #0x1                   	// #1
    a988:	add	x4, x8, x26
    a98c:	mov	w2, wzr
    a990:	bl	5550 <mpfr_can_round@plt>
    a994:	cbz	w0, a858 <mpc_log@@Base+0x280>
    a998:	sub	x0, x29, #0x20
    a99c:	bl	4e40 <mpfr_clear@plt>
    a9a0:	ldr	w26, [sp, #12]
    a9a4:	add	x0, x19, #0x20
    a9a8:	asr	w3, w26, #4
    a9ac:	mov	x1, x22
    a9b0:	mov	x2, x21
    a9b4:	bl	4d70 <mpfr_atan2@plt>
    a9b8:	mov	w21, w0
    a9bc:	cbz	w20, aa24 <mpc_log@@Base+0x44c>
    a9c0:	bl	56c0 <mpfr_get_emin_min@plt>
    a9c4:	sub	x2, x0, #0x2
    a9c8:	and	w3, w26, #0xf
    a9cc:	mov	w1, #0x1                   	// #1
    a9d0:	mov	x0, x19
    a9d4:	bl	5240 <mpfr_set_ui_2exp@plt>
    a9d8:	b	aa38 <mpc_log@@Base+0x460>
    a9dc:	cmp	w0, #0x1
    a9e0:	b.lt	ab2c <mpc_log@@Base+0x554>  // b.tstop
    a9e4:	and	w2, w26, #0xf
    a9e8:	mov	x0, x19
    a9ec:	mov	x1, x22
    a9f0:	bl	4e70 <mpfr_log@plt>
    a9f4:	add	x22, x19, #0x20
    a9f8:	mov	w21, w0
    a9fc:	asr	w1, w26, #4
    aa00:	mov	x0, x22
    aa04:	bl	4b50 <mpfr_const_pi@plt>
    aa08:	mov	w19, w0
    aa0c:	mov	w2, #0x1                   	// #1
    aa10:	mov	x0, x22
    aa14:	mov	x1, x22
    aa18:	mov	w3, wzr
    aa1c:	bl	5430 <mpfr_div_2ui@plt>
    aa20:	b	abac <mpc_log@@Base+0x5d4>
    aa24:	ldr	w3, [sp, #24]
    aa28:	and	w2, w26, #0xf
    aa2c:	add	x1, sp, #0x10
    aa30:	mov	x0, x19
    aa34:	bl	52e0 <mpfr_set4@plt>
    aa38:	mov	w19, w0
    aa3c:	add	x0, sp, #0x10
    aa40:	bl	4e40 <mpfr_clear@plt>
    aa44:	cmp	w19, #0x0
    aa48:	mov	w8, #0x2                   	// #2
    aa4c:	cset	w9, ne  // ne = any
    aa50:	csel	w8, w8, w9, lt  // lt = tstop
    aa54:	cmp	w21, #0x0
    aa58:	cset	w9, ne  // ne = any
    aa5c:	lsl	w9, w9, #2
    aa60:	mov	w10, #0x8                   	// #8
    aa64:	csel	w9, w10, w9, lt  // lt = tstop
    aa68:	orr	w0, w8, w9
    aa6c:	b	abd4 <mpc_log@@Base+0x5fc>
    aa70:	add	x0, x19, #0x20
    aa74:	asr	w3, w26, #4
    aa78:	mov	x1, x22
    aa7c:	mov	x2, x21
    aa80:	bl	4d70 <mpfr_atan2@plt>
    aa84:	mov	w20, w0
    aa88:	mov	w1, #0xffffffff            	// #-1
    aa8c:	mov	x0, x19
    aa90:	bl	5230 <mpfr_set_inf@plt>
    aa94:	b	ab14 <mpc_log@@Base+0x53c>
    aa98:	ldr	w22, [x21, #40]
    aa9c:	asr	w8, w26, #4
    aaa0:	ldp	q0, q1, [x21]
    aaa4:	mov	w9, #0x2                   	// #2
    aaa8:	cmp	w8, #0x3
    aaac:	mov	w10, #0x3                   	// #3
    aab0:	csel	w9, w9, w8, eq  // eq = none
    aab4:	cmp	w8, #0x2
    aab8:	csel	w9, w10, w9, eq  // eq = none
    aabc:	cmp	w22, #0x0
    aac0:	add	x0, sp, #0x10
    aac4:	add	x1, sp, #0x10
    aac8:	mov	w2, wzr
    aacc:	csel	w21, w9, w8, lt  // lt = tstop
    aad0:	stp	q0, q1, [sp, #16]
    aad4:	bl	4c50 <mpfr_neg@plt>
    aad8:	and	w2, w26, #0xf
    aadc:	add	x1, sp, #0x10
    aae0:	mov	x0, x19
    aae4:	bl	4e70 <mpfr_log@plt>
    aae8:	mov	w23, w0
    aaec:	add	x0, x19, #0x20
    aaf0:	mov	w1, w21
    aaf4:	bl	4b50 <mpfr_const_pi@plt>
    aaf8:	mov	w20, w0
    aafc:	tbz	w22, #31, ab14 <mpc_log@@Base+0x53c>
    ab00:	mov	x0, x19
    ab04:	mov	x1, x19
    ab08:	mov	w2, wzr
    ab0c:	bl	5070 <mpc_conj@plt>
    ab10:	neg	w20, w20
    ab14:	cmp	w23, #0x0
    ab18:	mov	w8, #0x2                   	// #2
    ab1c:	cset	w9, ne  // ne = any
    ab20:	csel	w8, w8, w9, lt  // lt = tstop
    ab24:	cmp	w20, #0x0
    ab28:	b	abc0 <mpc_log@@Base+0x5e8>
    ab2c:	ldp	q1, q0, [x22]
    ab30:	add	x0, sp, #0x10
    ab34:	add	x1, sp, #0x10
    ab38:	mov	w2, wzr
    ab3c:	stp	q1, q0, [sp, #16]
    ab40:	bl	4c50 <mpfr_neg@plt>
    ab44:	and	w2, w26, #0xf
    ab48:	add	x1, sp, #0x10
    ab4c:	mov	x0, x19
    ab50:	bl	4e70 <mpfr_log@plt>
    ab54:	asr	w8, w26, #4
    ab58:	mov	w9, #0x2                   	// #2
    ab5c:	cmp	w8, #0x3
    ab60:	add	x19, x19, #0x20
    ab64:	csel	w9, w9, w8, eq  // eq = none
    ab68:	cmp	w8, #0x2
    ab6c:	mov	w8, #0x3                   	// #3
    ab70:	mov	w21, w0
    ab74:	csel	w1, w8, w9, eq  // eq = none
    ab78:	mov	x0, x19
    ab7c:	bl	4b50 <mpfr_const_pi@plt>
    ab80:	mov	w20, w0
    ab84:	mov	w2, #0x1                   	// #1
    ab88:	mov	x0, x19
    ab8c:	mov	x1, x19
    ab90:	mov	w3, wzr
    ab94:	bl	5430 <mpfr_div_2ui@plt>
    ab98:	mov	x0, x19
    ab9c:	mov	x1, x19
    aba0:	mov	w2, wzr
    aba4:	bl	4c50 <mpfr_neg@plt>
    aba8:	neg	w19, w20
    abac:	cmp	w21, #0x0
    abb0:	mov	w8, #0x2                   	// #2
    abb4:	cset	w9, ne  // ne = any
    abb8:	csel	w8, w8, w9, lt  // lt = tstop
    abbc:	cmp	w19, #0x0
    abc0:	cset	w9, ne  // ne = any
    abc4:	lsl	w9, w9, #2
    abc8:	mov	w10, #0x8                   	// #8
    abcc:	csel	w9, w10, w9, lt  // lt = tstop
    abd0:	orr	w0, w9, w8
    abd4:	ldp	x20, x19, [sp, #160]
    abd8:	ldp	x22, x21, [sp, #144]
    abdc:	ldp	x24, x23, [sp, #128]
    abe0:	ldp	x26, x25, [sp, #112]
    abe4:	ldp	x28, x27, [sp, #96]
    abe8:	ldp	x29, x30, [sp, #80]
    abec:	add	sp, sp, #0xb0
    abf0:	ret

000000000000abf4 <mpc_log10@@Base>:
    abf4:	sub	sp, sp, #0x110
    abf8:	stp	x29, x30, [sp, #176]
    abfc:	add	x29, sp, #0xb0
    ac00:	stp	x22, x21, [sp, #240]
    ac04:	mov	x22, x1
    ac08:	mov	x21, x0
    ac0c:	sub	x0, x29, #0x28
    ac10:	mov	w1, #0x2                   	// #2
    ac14:	stp	x28, x27, [sp, #192]
    ac18:	stp	x26, x25, [sp, #208]
    ac1c:	stp	x24, x23, [sp, #224]
    ac20:	stp	x20, x19, [sp, #256]
    ac24:	mov	w19, w2
    ac28:	bl	5540 <mpfr_init2@plt>
    ac2c:	add	x0, sp, #0x48
    ac30:	mov	w1, #0x2                   	// #2
    ac34:	add	x20, sp, #0x48
    ac38:	bl	4dc0 <mpc_init2@plt>
    ac3c:	str	x21, [sp, #16]
    ac40:	ldr	x8, [x21], #32
    ac44:	mov	w24, wzr
    ac48:	mov	w28, wzr
    ac4c:	add	x23, x20, #0x20
    ac50:	ldr	x9, [x21]
    ac54:	add	x10, x22, #0x20
    ac58:	cmp	x8, x9
    ac5c:	csel	x25, x8, x9, gt
    ac60:	cmp	w19, #0x10
    ac64:	cset	w8, cc  // cc = lo, ul, last
    ac68:	tst	w19, #0xf
    ac6c:	stp	x8, x21, [sp, #24]
    ac70:	cset	w8, eq  // eq = none
    ac74:	stp	x10, x8, [sp]
    ac78:	b	ac84 <mpc_log10@@Base+0x90>
    ac7c:	mov	w28, wzr
    ac80:	cbnz	w27, aee4 <mpc_log10@@Base+0x2f0>
    ac84:	cmp	w24, #0x1
    ac88:	b.hi	ac9c <mpc_log10@@Base+0xa8>  // b.pmore
    ac8c:	mov	x0, x25
    ac90:	bl	4df0 <mpc_ceil_log2@plt>
    ac94:	add	x8, x0, #0x4
    ac98:	b	aca8 <mpc_log10@@Base+0xb4>
    ac9c:	cmp	x25, #0x0
    aca0:	cinc	x8, x25, lt  // lt = tstop
    aca4:	asr	x8, x8, #1
    aca8:	add	x25, x8, x25
    acac:	sub	x0, x29, #0x28
    acb0:	mov	x1, x25
    acb4:	bl	4d50 <mpfr_set_prec@plt>
    acb8:	add	x0, sp, #0x48
    acbc:	mov	x1, x25
    acc0:	bl	4cd0 <mpc_set_prec@plt>
    acc4:	add	x0, sp, #0x48
    acc8:	mov	x1, x22
    accc:	mov	w2, w19
    acd0:	bl	4ea0 <mpc_log@plt>
    acd4:	mov	w26, w0
    acd8:	mov	x0, x23
    acdc:	bl	55d0 <mpfr_number_p@plt>
    ace0:	mov	w21, #0x1                   	// #1
    ace4:	cbz	w0, aed4 <mpc_log10@@Base+0x2e0>
    ace8:	ldr	x8, [sp, #120]
    acec:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    acf0:	mov	w27, #0x1                   	// #1
    acf4:	cmp	x8, x9
    acf8:	b.eq	ad40 <mpc_log10@@Base+0x14c>  // b.none
    acfc:	sub	x0, x29, #0x28
    ad00:	bl	afa8 <mpc_log10@@Base+0x3b4>
    ad04:	sub	x2, x29, #0x28
    ad08:	mov	x0, x23
    ad0c:	mov	x1, x23
    ad10:	mov	w3, wzr
    ad14:	bl	5260 <mpfr_div@plt>
    ad18:	ldp	x9, x8, [sp, #24]
    ad1c:	sub	x1, x25, #0x2
    ad20:	mov	w3, #0x1                   	// #1
    ad24:	mov	x0, x23
    ad28:	ldr	x8, [x8]
    ad2c:	mov	w2, wzr
    ad30:	add	x4, x8, x9
    ad34:	bl	5550 <mpfr_can_round@plt>
    ad38:	mov	w27, w0
    ad3c:	mov	w21, wzr
    ad40:	add	w24, w24, #0x1
    ad44:	cbz	w27, ac80 <mpc_log10@@Base+0x8c>
    ad48:	add	x0, sp, #0x48
    ad4c:	bl	55d0 <mpfr_number_p@plt>
    ad50:	mov	w20, #0x1                   	// #1
    ad54:	cbz	w0, adb0 <mpc_log10@@Base+0x1bc>
    ad58:	ldr	x8, [sp, #88]
    ad5c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    ad60:	cmp	x8, x9
    ad64:	b.eq	adb0 <mpc_log10@@Base+0x1bc>  // b.none
    ad68:	cbz	w21, ad74 <mpc_log10@@Base+0x180>
    ad6c:	sub	x0, x29, #0x28
    ad70:	bl	afa8 <mpc_log10@@Base+0x3b4>
    ad74:	add	x0, sp, #0x48
    ad78:	add	x1, sp, #0x48
    ad7c:	sub	x2, x29, #0x28
    ad80:	mov	w3, wzr
    ad84:	bl	5260 <mpfr_div@plt>
    ad88:	ldp	x9, x8, [sp, #8]
    ad8c:	sub	x1, x25, #0x2
    ad90:	add	x0, sp, #0x48
    ad94:	mov	w3, #0x1                   	// #1
    ad98:	ldr	x8, [x8]
    ad9c:	mov	w2, wzr
    ada0:	add	x4, x8, x9
    ada4:	bl	5550 <mpfr_can_round@plt>
    ada8:	mov	w27, w0
    adac:	mov	w20, wzr
    adb0:	orr	w8, w27, w28
    adb4:	cbnz	w8, ac80 <mpc_log10@@Base+0x8c>
    adb8:	mov	x0, x22
    adbc:	bl	4f20 <mpfr_integer_p@plt>
    adc0:	cbz	w0, ac7c <mpc_log10@@Base+0x88>
    adc4:	ldr	x28, [sp]
    adc8:	mov	x0, x28
    adcc:	bl	4f20 <mpfr_integer_p@plt>
    add0:	cbz	w0, ac7c <mpc_log10@@Base+0x88>
    add4:	add	x0, sp, #0x38
    add8:	bl	55a0 <__gmpz_init@plt>
    addc:	add	x0, sp, #0x28
    ade0:	bl	55a0 <__gmpz_init@plt>
    ade4:	add	x0, sp, #0x38
    ade8:	mov	x1, x22
    adec:	mov	w2, wzr
    adf0:	bl	4ca0 <mpfr_get_z@plt>
    adf4:	add	x0, sp, #0x28
    adf8:	mov	x1, x28
    adfc:	mov	w2, wzr
    ae00:	bl	4ca0 <mpfr_get_z@plt>
    ae04:	add	x0, sp, #0x38
    ae08:	add	x1, sp, #0x38
    ae0c:	add	x2, sp, #0x38
    ae10:	bl	4e10 <__gmpz_mul@plt>
    ae14:	add	x0, sp, #0x28
    ae18:	add	x1, sp, #0x28
    ae1c:	add	x2, sp, #0x28
    ae20:	bl	4e10 <__gmpz_mul@plt>
    ae24:	add	x0, sp, #0x38
    ae28:	add	x1, sp, #0x38
    ae2c:	add	x2, sp, #0x28
    ae30:	bl	54e0 <__gmpz_add@plt>
    ae34:	add	x0, sp, #0x38
    ae38:	mov	x1, xzr
    ae3c:	bl	4ac0 <__gmpz_scan1@plt>
    ae40:	mov	x28, x0
    ae44:	add	x0, sp, #0x38
    ae48:	mov	w1, #0xa                   	// #10
    ae4c:	bl	55b0 <__gmpz_sizeinbase@plt>
    ae50:	add	x8, x28, #0x1
    ae54:	cmp	x0, x8
    ae58:	b.eq	ae68 <mpc_log10@@Base+0x274>  // b.none
    ae5c:	add	x8, x28, #0x2
    ae60:	cmp	x0, x8
    ae64:	b.ne	aebc <mpc_log10@@Base+0x2c8>  // b.any
    ae68:	add	x0, sp, #0x38
    ae6c:	add	x1, sp, #0x38
    ae70:	mov	x2, x28
    ae74:	bl	4f00 <__gmpz_fdiv_q_2exp@plt>
    ae78:	add	x0, sp, #0x28
    ae7c:	mov	w1, #0x5                   	// #5
    ae80:	mov	x2, x28
    ae84:	bl	51c0 <__gmpz_ui_pow_ui@plt>
    ae88:	add	x0, sp, #0x28
    ae8c:	add	x1, sp, #0x38
    ae90:	bl	5410 <__gmpz_cmp@plt>
    ae94:	cbnz	w0, aebc <mpc_log10@@Base+0x2c8>
    ae98:	add	x0, sp, #0x48
    ae9c:	mov	w1, #0x40                  	// #64
    aea0:	bl	4d50 <mpfr_set_prec@plt>
    aea4:	add	x0, sp, #0x48
    aea8:	mov	x2, #0xffffffffffffffff    	// #-1
    aeac:	mov	x1, x28
    aeb0:	mov	w3, wzr
    aeb4:	bl	5240 <mpfr_set_ui_2exp@plt>
    aeb8:	mov	w27, #0x1                   	// #1
    aebc:	add	x0, sp, #0x38
    aec0:	bl	5290 <__gmpz_clear@plt>
    aec4:	add	x0, sp, #0x28
    aec8:	bl	5290 <__gmpz_clear@plt>
    aecc:	mov	w28, #0x1                   	// #1
    aed0:	b	ac80 <mpc_log10@@Base+0x8c>
    aed4:	mov	w27, #0x1                   	// #1
    aed8:	add	w24, w24, #0x1
    aedc:	cbnz	w27, ad48 <mpc_log10@@Base+0x154>
    aee0:	b	ac80 <mpc_log10@@Base+0x8c>
    aee4:	ldr	w3, [sp, #80]
    aee8:	ldr	x0, [sp, #16]
    aeec:	and	w2, w19, #0xf
    aef0:	add	x1, sp, #0x48
    aef4:	add	x23, sp, #0x48
    aef8:	bl	52e0 <mpfr_set4@plt>
    aefc:	cbz	w20, af18 <mpc_log10@@Base+0x324>
    af00:	and	w8, w26, #0x3
    af04:	tst	w26, #0x3
    af08:	cset	w9, ne  // ne = any
    af0c:	cmp	w8, #0x2
    af10:	csinv	w22, w9, wzr, ne  // ne = any
    af14:	b	af1c <mpc_log10@@Base+0x328>
    af18:	mov	w22, w0
    af1c:	ldr	w3, [sp, #112]
    af20:	ldr	x0, [sp, #32]
    af24:	add	x1, x23, #0x20
    af28:	asr	w2, w19, #4
    af2c:	bl	52e0 <mpfr_set4@plt>
    af30:	cbz	w21, af4c <mpc_log10@@Base+0x358>
    af34:	asr	w8, w26, #2
    af38:	cmp	w8, #0x0
    af3c:	cset	w9, ne  // ne = any
    af40:	cmp	w8, #0x2
    af44:	csinv	w19, w9, wzr, ne  // ne = any
    af48:	b	af50 <mpc_log10@@Base+0x35c>
    af4c:	mov	w19, w0
    af50:	sub	x0, x29, #0x28
    af54:	bl	4e40 <mpfr_clear@plt>
    af58:	add	x0, sp, #0x48
    af5c:	bl	4ae0 <mpc_clear@plt>
    af60:	cmp	w22, #0x0
    af64:	mov	w8, #0x2                   	// #2
    af68:	cset	w9, ne  // ne = any
    af6c:	csel	w8, w8, w9, lt  // lt = tstop
    af70:	cmp	w19, #0x0
    af74:	cset	w9, ne  // ne = any
    af78:	ldp	x20, x19, [sp, #256]
    af7c:	ldp	x22, x21, [sp, #240]
    af80:	ldp	x24, x23, [sp, #224]
    af84:	ldp	x26, x25, [sp, #208]
    af88:	ldp	x28, x27, [sp, #192]
    af8c:	ldp	x29, x30, [sp, #176]
    af90:	lsl	w9, w9, #2
    af94:	mov	w10, #0x8                   	// #8
    af98:	csel	w9, w10, w9, lt  // lt = tstop
    af9c:	orr	w0, w9, w8
    afa0:	add	sp, sp, #0x110
    afa4:	ret
    afa8:	stp	x29, x30, [sp, #-32]!
    afac:	mov	w1, #0xa                   	// #10
    afb0:	mov	x2, xzr
    afb4:	mov	w3, wzr
    afb8:	str	x19, [sp, #16]
    afbc:	mov	x29, sp
    afc0:	mov	x19, x0
    afc4:	bl	5240 <mpfr_set_ui_2exp@plt>
    afc8:	mov	x0, x19
    afcc:	mov	x1, x19
    afd0:	mov	w2, wzr
    afd4:	bl	4e70 <mpfr_log@plt>
    afd8:	ldr	x19, [sp, #16]
    afdc:	ldp	x29, x30, [sp], #32
    afe0:	ret

000000000000afe4 <mpc_alloc_str@@Base>:
    afe4:	stp	x29, x30, [sp, #-32]!
    afe8:	mov	x29, sp
    afec:	str	x19, [sp, #16]
    aff0:	mov	x19, x0
    aff4:	add	x0, x29, #0x18
    aff8:	mov	x1, xzr
    affc:	mov	x2, xzr
    b000:	bl	4bb0 <__gmp_get_memory_functions@plt>
    b004:	ldr	x8, [x29, #24]
    b008:	mov	x0, x19
    b00c:	blr	x8
    b010:	ldr	x19, [sp, #16]
    b014:	ldp	x29, x30, [sp], #32
    b018:	ret

000000000000b01c <mpc_realloc_str@@Base>:
    b01c:	stp	x29, x30, [sp, #-48]!
    b020:	mov	x29, sp
    b024:	str	x21, [sp, #16]
    b028:	stp	x20, x19, [sp, #32]
    b02c:	mov	x19, x2
    b030:	mov	x20, x1
    b034:	mov	x21, x0
    b038:	add	x1, x29, #0x18
    b03c:	mov	x0, xzr
    b040:	mov	x2, xzr
    b044:	bl	4bb0 <__gmp_get_memory_functions@plt>
    b048:	ldr	x8, [x29, #24]
    b04c:	mov	x0, x21
    b050:	mov	x1, x20
    b054:	mov	x2, x19
    b058:	blr	x8
    b05c:	ldp	x20, x19, [sp, #32]
    b060:	ldr	x21, [sp, #16]
    b064:	ldp	x29, x30, [sp], #48
    b068:	ret

000000000000b06c <mpc_free_str@@Base>:
    b06c:	sub	sp, sp, #0x30
    b070:	stp	x20, x19, [sp, #32]
    b074:	mov	x19, x0
    b078:	add	x2, sp, #0x8
    b07c:	mov	x0, xzr
    b080:	mov	x1, xzr
    b084:	stp	x29, x30, [sp, #16]
    b088:	add	x29, sp, #0x10
    b08c:	bl	4bb0 <__gmp_get_memory_functions@plt>
    b090:	ldr	x20, [sp, #8]
    b094:	mov	x0, x19
    b098:	bl	4ad0 <strlen@plt>
    b09c:	add	x1, x0, #0x1
    b0a0:	mov	x0, x19
    b0a4:	blr	x20
    b0a8:	ldp	x20, x19, [sp, #32]
    b0ac:	ldp	x29, x30, [sp, #16]
    b0b0:	add	sp, sp, #0x30
    b0b4:	ret

000000000000b0b8 <mpc_mul_2si@@Base>:
    b0b8:	stp	x29, x30, [sp, #-64]!
    b0bc:	stp	x20, x19, [sp, #48]
    b0c0:	mov	w19, w3
    b0c4:	and	w3, w3, #0xf
    b0c8:	str	x23, [sp, #16]
    b0cc:	stp	x22, x21, [sp, #32]
    b0d0:	mov	x29, sp
    b0d4:	mov	x20, x2
    b0d8:	mov	x21, x1
    b0dc:	mov	x22, x0
    b0e0:	bl	4b40 <mpfr_mul_2si@plt>
    b0e4:	mov	w23, w0
    b0e8:	add	x0, x22, #0x20
    b0ec:	add	x1, x21, #0x20
    b0f0:	asr	w3, w19, #4
    b0f4:	mov	x2, x20
    b0f8:	bl	4b40 <mpfr_mul_2si@plt>
    b0fc:	cmp	w23, #0x0
    b100:	mov	w8, #0x2                   	// #2
    b104:	cset	w9, ne  // ne = any
    b108:	csel	w8, w8, w9, lt  // lt = tstop
    b10c:	cmp	w0, #0x0
    b110:	cset	w9, ne  // ne = any
    b114:	ldp	x20, x19, [sp, #48]
    b118:	ldp	x22, x21, [sp, #32]
    b11c:	ldr	x23, [sp, #16]
    b120:	lsl	w9, w9, #2
    b124:	mov	w10, #0x8                   	// #8
    b128:	csel	w9, w10, w9, lt  // lt = tstop
    b12c:	orr	w0, w9, w8
    b130:	ldp	x29, x30, [sp], #64
    b134:	ret

000000000000b138 <mpc_mul_2ui@@Base>:
    b138:	stp	x29, x30, [sp, #-64]!
    b13c:	stp	x20, x19, [sp, #48]
    b140:	mov	w19, w3
    b144:	and	w3, w3, #0xf
    b148:	str	x23, [sp, #16]
    b14c:	stp	x22, x21, [sp, #32]
    b150:	mov	x29, sp
    b154:	mov	x20, x2
    b158:	mov	x21, x1
    b15c:	mov	x22, x0
    b160:	bl	5050 <mpfr_mul_2ui@plt>
    b164:	mov	w23, w0
    b168:	add	x0, x22, #0x20
    b16c:	add	x1, x21, #0x20
    b170:	asr	w3, w19, #4
    b174:	mov	x2, x20
    b178:	bl	5050 <mpfr_mul_2ui@plt>
    b17c:	cmp	w23, #0x0
    b180:	mov	w8, #0x2                   	// #2
    b184:	cset	w9, ne  // ne = any
    b188:	csel	w8, w8, w9, lt  // lt = tstop
    b18c:	cmp	w0, #0x0
    b190:	cset	w9, ne  // ne = any
    b194:	ldp	x20, x19, [sp, #48]
    b198:	ldp	x22, x21, [sp, #32]
    b19c:	ldr	x23, [sp, #16]
    b1a0:	lsl	w9, w9, #2
    b1a4:	mov	w10, #0x8                   	// #8
    b1a8:	csel	w9, w10, w9, lt  // lt = tstop
    b1ac:	orr	w0, w9, w8
    b1b0:	ldp	x29, x30, [sp], #64
    b1b4:	ret

000000000000b1b8 <mpc_mul_naive@@Base>:
    b1b8:	sub	sp, sp, #0xa0
    b1bc:	stp	x29, x30, [sp, #64]
    b1c0:	stp	x28, x27, [sp, #80]
    b1c4:	stp	x26, x25, [sp, #96]
    b1c8:	stp	x24, x23, [sp, #112]
    b1cc:	stp	x22, x21, [sp, #128]
    b1d0:	stp	x20, x19, [sp, #144]
    b1d4:	ldr	x9, [x1, #16]
    b1d8:	mov	x8, #0x4                   	// #4
    b1dc:	movk	x8, #0x8000, lsl #48
    b1e0:	add	x29, sp, #0x40
    b1e4:	cmp	x9, x8
    b1e8:	b.lt	b364 <mpc_mul_naive@@Base+0x1ac>  // b.tstop
    b1ec:	ldr	x9, [x1, #48]
    b1f0:	mov	x21, x1
    b1f4:	cmp	x9, x8
    b1f8:	b.lt	b364 <mpc_mul_naive@@Base+0x1ac>  // b.tstop
    b1fc:	ldr	x8, [x2, #16]
    b200:	mov	x9, #0x4                   	// #4
    b204:	movk	x9, #0x8000, lsl #48
    b208:	mov	x20, x2
    b20c:	cmp	x8, x9
    b210:	b.lt	b364 <mpc_mul_naive@@Base+0x1ac>  // b.tstop
    b214:	ldr	x8, [x20, #48]
    b218:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    b21c:	cmp	x8, x9
    b220:	b.le	b364 <mpc_mul_naive@@Base+0x1ac>
    b224:	cmp	x0, x21
    b228:	cset	w8, eq  // eq = none
    b22c:	cmp	x0, x20
    b230:	cset	w9, eq  // eq = none
    b234:	orr	w26, w8, w9
    b238:	mov	w22, w3
    b23c:	mov	x19, x0
    b240:	add	x23, x21, #0x20
    b244:	cmp	w26, #0x1
    b248:	add	x24, x20, #0x20
    b24c:	b.ne	b264 <mpc_mul_naive@@Base+0xac>  // b.any
    b250:	ldr	x1, [x19]
    b254:	ldr	x2, [x19, #32]
    b258:	mov	x0, sp
    b25c:	bl	54d0 <mpc_init3@plt>
    b260:	b	b274 <mpc_mul_naive@@Base+0xbc>
    b264:	ldp	q1, q0, [x19, #32]
    b268:	ldp	q3, q2, [x19]
    b26c:	stp	q1, q0, [sp, #32]
    b270:	stp	q3, q2, [sp]
    b274:	and	w25, w22, #0xf
    b278:	mov	x0, sp
    b27c:	mov	x1, x21
    b280:	mov	x2, x20
    b284:	mov	x3, x23
    b288:	mov	x4, x24
    b28c:	mov	w5, w25
    b290:	mov	x28, sp
    b294:	bl	4b60 <mpfr_fmms@plt>
    b298:	tbnz	w0, #31, b2c4 <mpc_mul_naive@@Base+0x10c>
    b29c:	mov	x0, sp
    b2a0:	mov	x1, x21
    b2a4:	mov	x2, x20
    b2a8:	mov	x3, x23
    b2ac:	mov	x4, x24
    b2b0:	mov	w5, w25
    b2b4:	bl	4b60 <mpfr_fmms@plt>
    b2b8:	cmp	w0, #0x0
    b2bc:	cset	w27, ne  // ne = any
    b2c0:	b	b2c8 <mpc_mul_naive@@Base+0x110>
    b2c4:	mov	w27, #0x2                   	// #2
    b2c8:	add	x25, x28, #0x20
    b2cc:	asr	w22, w22, #4
    b2d0:	mov	x0, x25
    b2d4:	mov	x1, x21
    b2d8:	mov	x2, x24
    b2dc:	mov	x3, x23
    b2e0:	mov	x4, x20
    b2e4:	mov	w5, w22
    b2e8:	bl	4d60 <mpfr_fmma@plt>
    b2ec:	tbnz	w0, #31, b31c <mpc_mul_naive@@Base+0x164>
    b2f0:	mov	x0, x25
    b2f4:	mov	x1, x21
    b2f8:	mov	x2, x24
    b2fc:	mov	x3, x23
    b300:	mov	x4, x20
    b304:	mov	w5, w22
    b308:	bl	4d60 <mpfr_fmma@plt>
    b30c:	cmp	w0, #0x0
    b310:	cset	w8, ne  // ne = any
    b314:	lsl	w8, w8, #2
    b318:	b	b320 <mpc_mul_naive@@Base+0x168>
    b31c:	mov	w8, #0x8                   	// #8
    b320:	mov	x1, sp
    b324:	mov	x0, x19
    b328:	mov	w2, wzr
    b32c:	orr	w20, w8, w27
    b330:	bl	5680 <mpc_set@plt>
    b334:	cbz	w26, b340 <mpc_mul_naive@@Base+0x188>
    b338:	mov	x0, sp
    b33c:	bl	4ae0 <mpc_clear@plt>
    b340:	mov	w0, w20
    b344:	ldp	x20, x19, [sp, #144]
    b348:	ldp	x22, x21, [sp, #128]
    b34c:	ldp	x24, x23, [sp, #112]
    b350:	ldp	x26, x25, [sp, #96]
    b354:	ldp	x28, x27, [sp, #80]
    b358:	ldp	x29, x30, [sp, #64]
    b35c:	add	sp, sp, #0xa0
    b360:	ret
    b364:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    b368:	ldr	x8, [x8, #4008]
    b36c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    b370:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    b374:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    b378:	ldr	x0, [x8]
    b37c:	add	x1, x1, #0xba0
    b380:	add	x2, x2, #0xd06
    b384:	add	x4, x4, #0xd0c
    b388:	mov	w3, #0x175                 	// #373
    b38c:	bl	56a0 <fprintf@plt>
    b390:	bl	5110 <abort@plt>

000000000000b394 <mpc_mul_karatsuba@@Base>:
    b394:	sub	sp, sp, #0x1b0
    b398:	cmp	x0, x1
    b39c:	cset	w8, eq  // eq = none
    b3a0:	cmp	x0, x2
    b3a4:	cset	w9, eq  // eq = none
    b3a8:	orr	w8, w8, w9
    b3ac:	stp	x26, x25, [sp, #368]
    b3b0:	stp	x24, x23, [sp, #384]
    b3b4:	stp	x22, x21, [sp, #400]
    b3b8:	mov	x22, x1
    b3bc:	mov	x25, x0
    b3c0:	cmp	w8, #0x1
    b3c4:	mov	w23, w3
    b3c8:	stp	x29, x30, [sp, #336]
    b3cc:	stp	x28, x27, [sp, #352]
    b3d0:	stp	x20, x19, [sp, #416]
    b3d4:	add	x29, sp, #0x150
    b3d8:	str	x2, [sp, #96]
    b3dc:	str	w8, [sp, #92]
    b3e0:	b.ne	b3f8 <mpc_mul_karatsuba@@Base+0x64>  // b.any
    b3e4:	ldr	x1, [x25]
    b3e8:	ldr	x2, [x25, #32]
    b3ec:	add	x0, sp, #0x80
    b3f0:	bl	54d0 <mpc_init3@plt>
    b3f4:	b	b408 <mpc_mul_karatsuba@@Base+0x74>
    b3f8:	ldp	q1, q0, [x25, #32]
    b3fc:	ldp	q3, q2, [x25]
    b400:	stp	q1, q0, [sp, #160]
    b404:	stp	q3, q2, [sp, #128]
    b408:	ldr	x28, [sp, #96]
    b40c:	add	x19, x22, #0x20
    b410:	mov	x0, x22
    b414:	mov	x1, x19
    b418:	add	x20, x28, #0x20
    b41c:	bl	54c0 <mpfr_cmpabs@plt>
    b420:	cmp	w0, #0x0
    b424:	mov	w21, #0xffffffff            	// #-1
    b428:	mov	w24, w0
    b42c:	cneg	w8, w21, ge  // ge = tcont
    b430:	mov	x0, x28
    b434:	mov	x1, x20
    b438:	str	w8, [sp, #24]
    b43c:	csel	x27, x22, x19, lt  // lt = tstop
    b440:	str	x22, [sp, #64]
    b444:	csel	x26, x19, x22, lt  // lt = tstop
    b448:	bl	54c0 <mpfr_cmpabs@plt>
    b44c:	cmp	w0, #0x0
    b450:	lsr	w8, w0, #31
    b454:	cneg	w16, w21, ge  // ge = tcont
    b458:	add	w21, w8, w24, lsr #31
    b45c:	asr	w14, w23, #4
    b460:	str	w23, [sp, #60]
    b464:	and	w15, w23, #0xf
    b468:	csel	x23, x28, x20, lt  // lt = tstop
    b46c:	csel	x22, x20, x28, lt  // lt = tstop
    b470:	tst	w21, #0x1
    b474:	csel	w8, w15, w14, eq  // eq = none
    b478:	mov	w9, #0x2                   	// #2
    b47c:	cmp	w8, #0x3
    b480:	mov	w10, #0x3                   	// #3
    b484:	csel	w9, w9, w8, eq  // eq = none
    b488:	cmp	w8, #0x2
    b48c:	csel	w9, w10, w9, eq  // eq = none
    b490:	cmp	w21, #0x0
    b494:	ldr	x11, [x25]
    b498:	ldr	x12, [x25, #32]
    b49c:	ldr	x13, [x26]
    b4a0:	stp	w15, w14, [sp, #16]
    b4a4:	and	w10, w21, #0x1
    b4a8:	csel	w8, w8, w9, eq  // eq = none
    b4ac:	str	w8, [sp, #44]
    b4b0:	ldr	x8, [x23]
    b4b4:	lsl	x9, x10, #5
    b4b8:	ldr	x9, [x25, x9]
    b4bc:	str	w0, [sp, #28]
    b4c0:	cmp	x11, x12
    b4c4:	add	x1, x8, x13
    b4c8:	sub	x0, x29, #0x48
    b4cc:	str	w16, [sp, #124]
    b4d0:	str	x25, [sp, #72]
    b4d4:	str	x9, [sp, #48]
    b4d8:	csel	x19, x11, x12, gt
    b4dc:	str	x1, [sp, #32]
    b4e0:	bl	5540 <mpfr_init2@plt>
    b4e4:	ldr	x8, [x27]
    b4e8:	ldr	x9, [x22]
    b4ec:	sub	x0, x29, #0x68
    b4f0:	mov	x28, x27
    b4f4:	add	x1, x9, x8
    b4f8:	str	x1, [sp, #80]
    b4fc:	bl	5540 <mpfr_init2@plt>
    b500:	sub	x0, x29, #0x28
    b504:	mov	w1, #0x2                   	// #2
    b508:	bl	5540 <mpfr_init2@plt>
    b50c:	sub	x0, x29, #0x88
    b510:	mov	w1, #0x2                   	// #2
    b514:	bl	5540 <mpfr_init2@plt>
    b518:	sub	x0, x29, #0x48
    b51c:	mov	x1, x26
    b520:	mov	x2, x23
    b524:	mov	w3, wzr
    b528:	str	x26, [sp, #104]
    b52c:	bl	4c40 <mpfr_mul@plt>
    b530:	mov	w25, wzr
    b534:	mov	w26, wzr
    b538:	mov	w20, wzr
    b53c:	cbnz	w0, baec <mpc_mul_karatsuba@@Base+0x758>
    b540:	str	x28, [sp, #8]
    b544:	str	x22, [sp, #112]
    b548:	tbz	w24, #31, b55c <mpc_mul_karatsuba@@Base+0x1c8>
    b54c:	sub	x0, x29, #0x48
    b550:	sub	x1, x29, #0x48
    b554:	mov	w2, wzr
    b558:	bl	4c50 <mpfr_neg@plt>
    b55c:	ldr	x1, [sp, #8]
    b560:	ldr	x2, [sp, #112]
    b564:	sub	x0, x29, #0x68
    b568:	mov	w3, wzr
    b56c:	bl	4c40 <mpfr_mul@plt>
    b570:	mov	w25, wzr
    b574:	mov	w26, wzr
    b578:	mov	w20, wzr
    b57c:	cbnz	w0, baec <mpc_mul_karatsuba@@Base+0x758>
    b580:	ldr	w8, [sp, #28]
    b584:	tbz	w8, #31, b598 <mpc_mul_karatsuba@@Base+0x204>
    b588:	sub	x0, x29, #0x68
    b58c:	sub	x1, x29, #0x68
    b590:	mov	w2, wzr
    b594:	bl	4c50 <mpfr_neg@plt>
    b598:	mov	x22, #0x2                   	// #2
    b59c:	sub	x0, x29, #0x48
    b5a0:	sub	x1, x29, #0x68
    b5a4:	movk	x22, #0x8000, lsl #48
    b5a8:	bl	54c0 <mpfr_cmpabs@plt>
    b5ac:	ldr	w24, [sp, #124]
    b5b0:	ldr	x26, [sp, #112]
    b5b4:	cmp	w0, #0x1
    b5b8:	b.lt	b5dc <mpc_mul_karatsuba@@Base+0x248>  // b.tstop
    b5bc:	ldur	x8, [x29, #-56]
    b5c0:	ldr	x25, [sp, #104]
    b5c4:	cmp	x8, x22
    b5c8:	b.gt	b60c <mpc_mul_karatsuba@@Base+0x278>
    b5cc:	b.ne	b5d4 <mpc_mul_karatsuba@@Base+0x240>  // b.any
    b5d0:	bl	4bd0 <mpfr_set_erangeflag@plt>
    b5d4:	mov	w8, wzr
    b5d8:	b	b610 <mpc_mul_karatsuba@@Base+0x27c>
    b5dc:	ldur	x8, [x29, #-56]
    b5e0:	ldr	x25, [sp, #104]
    b5e4:	mov	x9, #0x2                   	// #2
    b5e8:	movk	x9, #0x8000, lsl #48
    b5ec:	cmp	x8, x9
    b5f0:	cbz	w0, b640 <mpc_mul_karatsuba@@Base+0x2ac>
    b5f4:	b.gt	b658 <mpc_mul_karatsuba@@Base+0x2c4>
    b5f8:	cmp	x8, x22
    b5fc:	b.ne	b604 <mpc_mul_karatsuba@@Base+0x270>  // b.any
    b600:	bl	4bd0 <mpfr_set_erangeflag@plt>
    b604:	mov	w20, wzr
    b608:	b	b65c <mpc_mul_karatsuba@@Base+0x2c8>
    b60c:	ldur	w8, [x29, #-64]
    b610:	ldur	x9, [x29, #-88]
    b614:	mov	x10, #0x2                   	// #2
    b618:	movk	x10, #0x8000, lsl #48
    b61c:	lsl	w20, w8, #1
    b620:	cmp	x9, x10
    b624:	b.gt	b6b4 <mpc_mul_karatsuba@@Base+0x320>
    b628:	cmp	x9, x22
    b62c:	b.ne	b634 <mpc_mul_karatsuba@@Base+0x2a0>  // b.any
    b630:	bl	4bd0 <mpfr_set_erangeflag@plt>
    b634:	mov	w8, wzr
    b638:	sub	w20, w20, wzr
    b63c:	b	b6bc <mpc_mul_karatsuba@@Base+0x328>
    b640:	b.gt	b690 <mpc_mul_karatsuba@@Base+0x2fc>
    b644:	cmp	x8, x22
    b648:	b.ne	b650 <mpc_mul_karatsuba@@Base+0x2bc>  // b.any
    b64c:	bl	4bd0 <mpfr_set_erangeflag@plt>
    b650:	mov	w20, wzr
    b654:	b	b694 <mpc_mul_karatsuba@@Base+0x300>
    b658:	ldur	w20, [x29, #-64]
    b65c:	ldur	x8, [x29, #-88]
    b660:	mov	x9, #0x2                   	// #2
    b664:	movk	x9, #0x8000, lsl #48
    b668:	cmp	x8, x9
    b66c:	b.gt	b684 <mpc_mul_karatsuba@@Base+0x2f0>
    b670:	cmp	x8, x22
    b674:	b.ne	b67c <mpc_mul_karatsuba@@Base+0x2e8>  // b.any
    b678:	bl	4bd0 <mpfr_set_erangeflag@plt>
    b67c:	mov	w8, wzr
    b680:	b	b688 <mpc_mul_karatsuba@@Base+0x2f4>
    b684:	ldur	w8, [x29, #-96]
    b688:	sub	w20, w20, w8, lsl #1
    b68c:	b	b6bc <mpc_mul_karatsuba@@Base+0x328>
    b690:	ldur	w20, [x29, #-64]
    b694:	ldur	x8, [x29, #-88]
    b698:	mov	x9, #0x2                   	// #2
    b69c:	movk	x9, #0x8000, lsl #48
    b6a0:	cmp	x8, x9
    b6a4:	b.gt	b6b4 <mpc_mul_karatsuba@@Base+0x320>
    b6a8:	cmp	x8, x22
    b6ac:	b.eq	b630 <mpc_mul_karatsuba@@Base+0x29c>  // b.none
    b6b0:	b	b634 <mpc_mul_karatsuba@@Base+0x2a0>
    b6b4:	ldur	w8, [x29, #-96]
    b6b8:	sub	w20, w20, w8
    b6bc:	ldr	x8, [x25, #16]
    b6c0:	mov	x9, #0x2                   	// #2
    b6c4:	movk	x9, #0x8000, lsl #48
    b6c8:	str	w21, [sp, #4]
    b6cc:	cmp	x8, x9
    b6d0:	b.gt	b6e8 <mpc_mul_karatsuba@@Base+0x354>
    b6d4:	cmp	x8, x22
    b6d8:	b.ne	b6e0 <mpc_mul_karatsuba@@Base+0x34c>  // b.any
    b6dc:	bl	4bd0 <mpfr_set_erangeflag@plt>
    b6e0:	mov	w21, wzr
    b6e4:	b	b6ec <mpc_mul_karatsuba@@Base+0x358>
    b6e8:	ldr	w21, [x25, #8]
    b6ec:	ldr	x8, [x26, #16]
    b6f0:	ldr	w25, [sp, #24]
    b6f4:	mov	x9, #0x2                   	// #2
    b6f8:	movk	x9, #0x8000, lsl #48
    b6fc:	cmp	x8, x9
    b700:	b.gt	b718 <mpc_mul_karatsuba@@Base+0x384>
    b704:	cmp	x8, x22
    b708:	b.ne	b710 <mpc_mul_karatsuba@@Base+0x37c>  // b.any
    b70c:	bl	4bd0 <mpfr_set_erangeflag@plt>
    b710:	mov	w8, wzr
    b714:	b	b71c <mpc_mul_karatsuba@@Base+0x388>
    b718:	ldr	w8, [x26, #8]
    b71c:	ldr	x22, [sp, #8]
    b720:	mul	w9, w24, w25
    b724:	mul	w9, w9, w21
    b728:	mul	w27, w9, w8
    b72c:	mul	w8, w27, w20
    b730:	tbnz	w8, #31, b750 <mpc_mul_karatsuba@@Base+0x3bc>
    b734:	ldr	x8, [sp, #104]
    b738:	mov	w21, w24
    b73c:	str	w25, [sp, #124]
    b740:	mov	x25, x23
    b744:	mov	x23, x22
    b748:	str	x8, [sp, #112]
    b74c:	b	b768 <mpc_mul_karatsuba@@Base+0x3d4>
    b750:	sub	x0, x29, #0x48
    b754:	sub	x1, x29, #0x68
    b758:	bl	51a0 <mpfr_swap@plt>
    b75c:	ldr	x26, [sp, #104]
    b760:	mov	w21, w25
    b764:	mov	x25, x22
    b768:	ldr	x28, [sp, #32]
    b76c:	ldr	x8, [sp, #80]
    b770:	mov	w9, #0x2                   	// #2
    b774:	mov	w24, wzr
    b778:	cmp	x28, x8
    b77c:	csel	x8, x28, x8, gt
    b780:	str	x8, [sp, #80]
    b784:	ldr	w8, [sp, #44]
    b788:	cmp	w27, #0x0
    b78c:	cinc	w22, w9, le
    b790:	cmp	w8, #0x0
    b794:	ldr	x8, [sp, #48]
    b798:	cinc	x8, x8, eq  // eq = none
    b79c:	str	x8, [sp, #104]
    b7a0:	b	b7b4 <mpc_mul_karatsuba@@Base+0x420>
    b7a4:	mov	w20, #0x1                   	// #1
    b7a8:	cbnz	w24, b99c <mpc_mul_karatsuba@@Base+0x608>
    b7ac:	sub	w24, w24, #0x1
    b7b0:	cbnz	w20, b99c <mpc_mul_karatsuba@@Base+0x608>
    b7b4:	mov	x0, x19
    b7b8:	bl	4df0 <mpc_ceil_log2@plt>
    b7bc:	add	x8, x19, x0
    b7c0:	add	x19, x8, #0x3
    b7c4:	sub	x0, x29, #0x28
    b7c8:	mov	x1, x19
    b7cc:	bl	4d50 <mpfr_set_prec@plt>
    b7d0:	sub	x0, x29, #0x88
    b7d4:	mov	x1, x19
    b7d8:	bl	4d50 <mpfr_set_prec@plt>
    b7dc:	ldr	w8, [sp, #124]
    b7e0:	sub	x0, x29, #0x28
    b7e4:	mov	w3, #0x4                   	// #4
    b7e8:	mov	x1, x23
    b7ec:	cmn	w8, #0x1
    b7f0:	b.eq	b800 <mpc_mul_karatsuba@@Base+0x46c>  // b.none
    b7f4:	ldr	x2, [sp, #112]
    b7f8:	bl	4f60 <mpfr_add@plt>
    b7fc:	b	b808 <mpc_mul_karatsuba@@Base+0x474>
    b800:	ldr	x2, [sp, #112]
    b804:	bl	4b30 <mpfr_sub@plt>
    b808:	mov	w27, w0
    b80c:	sub	x0, x29, #0x88
    b810:	mov	w3, #0x4                   	// #4
    b814:	mov	x1, x26
    b818:	mov	x2, x25
    b81c:	cmn	w21, #0x1
    b820:	b.eq	b82c <mpc_mul_karatsuba@@Base+0x498>  // b.none
    b824:	bl	4b30 <mpfr_sub@plt>
    b828:	b	b830 <mpc_mul_karatsuba@@Base+0x49c>
    b82c:	bl	4f60 <mpfr_add@plt>
    b830:	cmn	w21, #0x1
    b834:	orr	w20, w0, w27
    b838:	b.eq	b91c <mpc_mul_karatsuba@@Base+0x588>  // b.none
    b83c:	mov	x27, x19
    b840:	cbz	w20, b934 <mpc_mul_karatsuba@@Base+0x5a0>
    b844:	sub	x0, x29, #0x28
    b848:	sub	x1, x29, #0x28
    b84c:	sub	x2, x29, #0x88
    b850:	mov	w3, #0x4                   	// #4
    b854:	bl	4c40 <mpfr_mul@plt>
    b858:	orr	w28, w0, w20
    b85c:	cbnz	w28, b894 <mpc_mul_karatsuba@@Base+0x500>
    b860:	ldur	x8, [x29, #-56]
    b864:	ldur	x9, [x29, #-88]
    b868:	subs	x8, x8, x9
    b86c:	ldr	x9, [sp, #80]
    b870:	cneg	x8, x8, mi  // mi = first
    b874:	add	x8, x8, x9
    b878:	cmp	x8, x27
    b87c:	csinc	x1, x27, x8, ge  // ge = tcont
    b880:	cmp	x1, x19
    b884:	b.le	b894 <mpc_mul_karatsuba@@Base+0x500>
    b888:	sub	x0, x29, #0x88
    b88c:	mov	w2, wzr
    b890:	bl	5480 <mpfr_prec_round@plt>
    b894:	sub	x0, x29, #0x88
    b898:	sub	x1, x29, #0x48
    b89c:	sub	x2, x29, #0x68
    b8a0:	mov	w3, w22
    b8a4:	bl	4b30 <mpfr_sub@plt>
    b8a8:	ldur	x8, [x29, #-24]
    b8ac:	mov	x9, #0x2                   	// #2
    b8b0:	movk	x9, #0x8000, lsl #48
    b8b4:	mov	w20, w0
    b8b8:	cmp	x8, x9
    b8bc:	b.gt	b8dc <mpc_mul_karatsuba@@Base+0x548>
    b8c0:	mov	x9, #0x2                   	// #2
    b8c4:	movk	x9, #0x8000, lsl #48
    b8c8:	cmp	x8, x9
    b8cc:	b.ne	b8d4 <mpc_mul_karatsuba@@Base+0x540>  // b.any
    b8d0:	bl	4bd0 <mpfr_set_erangeflag@plt>
    b8d4:	mov	w8, wzr
    b8d8:	b	b8e0 <mpc_mul_karatsuba@@Base+0x54c>
    b8dc:	ldur	w8, [x29, #-32]
    b8e0:	orr	w28, w20, w28
    b8e4:	mov	w20, w22
    b8e8:	cbnz	w8, b95c <mpc_mul_karatsuba@@Base+0x5c8>
    b8ec:	ldur	x8, [x29, #-120]
    b8f0:	mov	x9, #0x2                   	// #2
    b8f4:	movk	x9, #0x8000, lsl #48
    b8f8:	cmp	x8, x9
    b8fc:	b.gt	b94c <mpc_mul_karatsuba@@Base+0x5b8>
    b900:	mov	x9, #0x2                   	// #2
    b904:	movk	x9, #0x8000, lsl #48
    b908:	cmp	x8, x9
    b90c:	b.ne	b914 <mpc_mul_karatsuba@@Base+0x580>  // b.any
    b910:	bl	4bd0 <mpfr_set_erangeflag@plt>
    b914:	mov	w8, wzr
    b918:	b	b950 <mpc_mul_karatsuba@@Base+0x5bc>
    b91c:	sub	x0, x29, #0x88
    b920:	sub	x1, x29, #0x88
    b924:	mov	w2, wzr
    b928:	bl	4c50 <mpfr_neg@plt>
    b92c:	mov	x27, x19
    b930:	cbnz	w20, b844 <mpc_mul_karatsuba@@Base+0x4b0>
    b934:	lsl	x27, x19, #1
    b938:	sub	x0, x29, #0x28
    b93c:	mov	x1, x27
    b940:	mov	w2, wzr
    b944:	bl	5480 <mpfr_prec_round@plt>
    b948:	b	b844 <mpc_mul_karatsuba@@Base+0x4b0>
    b94c:	ldur	w8, [x29, #-128]
    b950:	cmp	w8, #0x0
    b954:	mov	w8, #0x2                   	// #2
    b958:	cinc	w20, w8, le
    b95c:	sub	x0, x29, #0x28
    b960:	sub	x1, x29, #0x28
    b964:	sub	x2, x29, #0x88
    b968:	mov	w3, w20
    b96c:	bl	4f60 <mpfr_add@plt>
    b970:	orr	w28, w28, w0
    b974:	cbz	w28, b7a4 <mpc_mul_karatsuba@@Base+0x410>
    b978:	ldr	x4, [sp, #104]
    b97c:	sub	x1, x27, #0x3
    b980:	sub	x0, x29, #0x28
    b984:	mov	w3, #0x1                   	// #1
    b988:	mov	w2, w20
    b98c:	bl	5550 <mpfr_can_round@plt>
    b990:	cmp	w0, #0x0
    b994:	cset	w20, ne  // ne = any
    b998:	cbz	w24, b7ac <mpc_mul_karatsuba@@Base+0x418>
    b99c:	cbz	w20, b9d4 <mpc_mul_karatsuba@@Base+0x640>
    b9a0:	cbz	w28, b9cc <mpc_mul_karatsuba@@Base+0x638>
    b9a4:	ldur	x8, [x29, #-24]
    b9a8:	mov	x9, #0x2                   	// #2
    b9ac:	movk	x9, #0x8000, lsl #48
    b9b0:	cmp	x8, x9
    b9b4:	b.gt	b9e0 <mpc_mul_karatsuba@@Base+0x64c>
    b9b8:	mov	x9, #0x2                   	// #2
    b9bc:	movk	x9, #0x8000, lsl #48
    b9c0:	cmp	x8, x9
    b9c4:	b.ne	b9cc <mpc_mul_karatsuba@@Base+0x638>  // b.any
    b9c8:	bl	4bd0 <mpfr_set_erangeflag@plt>
    b9cc:	mov	w21, wzr
    b9d0:	b	b9e4 <mpc_mul_karatsuba@@Base+0x650>
    b9d4:	mov	w25, wzr
    b9d8:	mov	w26, wzr
    b9dc:	b	baec <mpc_mul_karatsuba@@Base+0x758>
    b9e0:	ldur	w21, [x29, #-32]
    b9e4:	ldr	w8, [sp, #4]
    b9e8:	cmp	w8, #0x1
    b9ec:	b.eq	ba34 <mpc_mul_karatsuba@@Base+0x6a0>  // b.none
    b9f0:	cbnz	w8, ba54 <mpc_mul_karatsuba@@Base+0x6c0>
    b9f4:	ldur	w3, [x29, #-32]
    b9f8:	ldr	w2, [sp, #16]
    b9fc:	add	x0, sp, #0x80
    ba00:	sub	x1, x29, #0x28
    ba04:	add	x22, sp, #0x80
    ba08:	bl	52e0 <mpfr_set4@plt>
    ba0c:	ldr	w3, [sp, #20]
    ba10:	mov	w19, w0
    ba14:	add	x0, x22, #0x20
    ba18:	sub	x1, x29, #0x48
    ba1c:	sub	x2, x29, #0x68
    ba20:	bl	4f60 <mpfr_add@plt>
    ba24:	cmp	w19, #0x0
    ba28:	mov	w26, w0
    ba2c:	csel	w25, w21, w19, eq  // eq = none
    ba30:	b	badc <mpc_mul_karatsuba@@Base+0x748>
    ba34:	ldr	w2, [sp, #20]
    ba38:	add	x8, sp, #0x80
    ba3c:	add	x0, x8, #0x20
    ba40:	sub	x1, x29, #0x28
    ba44:	bl	4c50 <mpfr_neg@plt>
    ba48:	cbz	w0, ba74 <mpc_mul_karatsuba@@Base+0x6e0>
    ba4c:	mov	w26, w0
    ba50:	b	ba78 <mpc_mul_karatsuba@@Base+0x6e4>
    ba54:	ldr	w2, [sp, #16]
    ba58:	add	x0, sp, #0x80
    ba5c:	sub	x1, x29, #0x28
    ba60:	add	x19, sp, #0x80
    ba64:	bl	4c50 <mpfr_neg@plt>
    ba68:	cbz	w0, ba94 <mpc_mul_karatsuba@@Base+0x700>
    ba6c:	mov	w25, w0
    ba70:	b	ba98 <mpc_mul_karatsuba@@Base+0x704>
    ba74:	neg	w26, w21
    ba78:	ldr	w3, [sp, #16]
    ba7c:	add	x0, sp, #0x80
    ba80:	sub	x1, x29, #0x48
    ba84:	sub	x2, x29, #0x68
    ba88:	bl	4f60 <mpfr_add@plt>
    ba8c:	mov	w25, w0
    ba90:	b	badc <mpc_mul_karatsuba@@Base+0x748>
    ba94:	neg	w25, w21
    ba98:	ldr	w21, [sp, #20]
    ba9c:	mov	w8, #0x2                   	// #2
    baa0:	add	x19, x19, #0x20
    baa4:	mov	w9, #0x3                   	// #3
    baa8:	cmp	w21, #0x3
    baac:	csel	w8, w8, w21, eq  // eq = none
    bab0:	cmp	w21, #0x2
    bab4:	csel	w3, w9, w8, eq  // eq = none
    bab8:	sub	x1, x29, #0x48
    babc:	sub	x2, x29, #0x68
    bac0:	mov	x0, x19
    bac4:	bl	4f60 <mpfr_add@plt>
    bac8:	neg	w26, w0
    bacc:	mov	x0, x19
    bad0:	mov	x1, x19
    bad4:	mov	w2, w21
    bad8:	bl	4c50 <mpfr_neg@plt>
    badc:	ldr	x0, [sp, #72]
    bae0:	add	x1, sp, #0x80
    bae4:	mov	w2, wzr
    bae8:	bl	5680 <mpc_set@plt>
    baec:	sub	x0, x29, #0x28
    baf0:	bl	4e40 <mpfr_clear@plt>
    baf4:	sub	x0, x29, #0x48
    baf8:	bl	4e40 <mpfr_clear@plt>
    bafc:	sub	x0, x29, #0x68
    bb00:	bl	4e40 <mpfr_clear@plt>
    bb04:	sub	x0, x29, #0x88
    bb08:	bl	4e40 <mpfr_clear@plt>
    bb0c:	ldr	w8, [sp, #92]
    bb10:	cbz	w8, bb1c <mpc_mul_karatsuba@@Base+0x788>
    bb14:	add	x0, sp, #0x80
    bb18:	bl	4ae0 <mpc_clear@plt>
    bb1c:	cbz	w20, bb4c <mpc_mul_karatsuba@@Base+0x7b8>
    bb20:	cmp	w25, #0x0
    bb24:	mov	w8, #0x2                   	// #2
    bb28:	cset	w9, ne  // ne = any
    bb2c:	csel	w8, w8, w9, lt  // lt = tstop
    bb30:	cmp	w26, #0x0
    bb34:	cset	w9, ne  // ne = any
    bb38:	lsl	w9, w9, #2
    bb3c:	mov	w10, #0x8                   	// #8
    bb40:	csel	w9, w10, w9, lt  // lt = tstop
    bb44:	orr	w0, w9, w8
    bb48:	b	bb5c <mpc_mul_karatsuba@@Base+0x7c8>
    bb4c:	ldp	x1, x0, [sp, #64]
    bb50:	ldr	x2, [sp, #96]
    bb54:	ldr	w3, [sp, #60]
    bb58:	bl	4fb0 <mpc_mul_naive@plt>
    bb5c:	ldp	x20, x19, [sp, #416]
    bb60:	ldp	x22, x21, [sp, #400]
    bb64:	ldp	x24, x23, [sp, #384]
    bb68:	ldp	x26, x25, [sp, #368]
    bb6c:	ldp	x28, x27, [sp, #352]
    bb70:	ldp	x29, x30, [sp, #336]
    bb74:	add	sp, sp, #0x1b0
    bb78:	ret

000000000000bb7c <mpc_mul@@Base>:
    bb7c:	stp	x29, x30, [sp, #-32]!
    bb80:	ldr	x10, [x1, #16]
    bb84:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    bb88:	str	x19, [sp, #16]
    bb8c:	mov	x8, x1
    bb90:	cmp	x10, x9
    bb94:	mov	x19, x0
    bb98:	mov	x29, sp
    bb9c:	b.eq	bbac <mpc_mul@@Base+0x30>  // b.none
    bba0:	ldr	x12, [x8, #48]
    bba4:	cmp	x12, x9
    bba8:	b.ne	bbb8 <mpc_mul@@Base+0x3c>  // b.any
    bbac:	mov	x0, x19
    bbb0:	mov	x1, x8
    bbb4:	b	bbe0 <mpc_mul@@Base+0x64>
    bbb8:	ldr	x9, [x2, #16]
    bbbc:	mov	x13, #0x8000000000000003    	// #-9223372036854775805
    bbc0:	cmp	x9, x13
    bbc4:	b.eq	bbd4 <mpc_mul@@Base+0x58>  // b.none
    bbc8:	ldr	x11, [x2, #48]
    bbcc:	cmp	x11, x13
    bbd0:	b.ne	bbf4 <mpc_mul@@Base+0x78>  // b.any
    bbd4:	mov	x0, x19
    bbd8:	mov	x1, x2
    bbdc:	mov	x2, x8
    bbe0:	bl	bd4c <mpc_mul@@Base+0x1d0>
    bbe4:	mov	w0, wzr
    bbe8:	ldr	x19, [sp, #16]
    bbec:	ldp	x29, x30, [sp], #32
    bbf0:	ret
    bbf4:	mov	x13, #0x2                   	// #2
    bbf8:	movk	x13, #0x8000, lsl #48
    bbfc:	cmp	x10, x13
    bc00:	b.eq	bc3c <mpc_mul@@Base+0xc0>  // b.none
    bc04:	cmp	x12, x13
    bc08:	b.eq	bc3c <mpc_mul@@Base+0xc0>  // b.none
    bc0c:	cmp	x9, x13
    bc10:	b.eq	bc3c <mpc_mul@@Base+0xc0>  // b.none
    bc14:	cmp	x11, x13
    bc18:	b.eq	bc3c <mpc_mul@@Base+0xc0>  // b.none
    bc1c:	mov	x13, #0x8000000000000001    	// #-9223372036854775807
    bc20:	cmp	x12, x13
    bc24:	b.ne	bc50 <mpc_mul@@Base+0xd4>  // b.any
    bc28:	mov	x0, x19
    bc2c:	mov	x1, x2
    bc30:	mov	x2, x8
    bc34:	bl	c030 <mpc_mul@@Base+0x4b4>
    bc38:	b	bbe8 <mpc_mul@@Base+0x6c>
    bc3c:	mov	x0, x19
    bc40:	bl	4b10 <mpfr_set_nan@plt>
    bc44:	add	x0, x19, #0x20
    bc48:	bl	4b10 <mpfr_set_nan@plt>
    bc4c:	b	bbe4 <mpc_mul@@Base+0x68>
    bc50:	cmp	x11, x13
    bc54:	b.ne	bc68 <mpc_mul@@Base+0xec>  // b.any
    bc58:	mov	x0, x19
    bc5c:	mov	x1, x8
    bc60:	bl	c030 <mpc_mul@@Base+0x4b4>
    bc64:	b	bbe8 <mpc_mul@@Base+0x6c>
    bc68:	mov	x13, #0x8000000000000001    	// #-9223372036854775807
    bc6c:	cmp	x10, x13
    bc70:	b.ne	bc88 <mpc_mul@@Base+0x10c>  // b.any
    bc74:	mov	x0, x19
    bc78:	mov	x1, x2
    bc7c:	mov	x2, x8
    bc80:	bl	c118 <mpc_mul@@Base+0x59c>
    bc84:	b	bbe8 <mpc_mul@@Base+0x6c>
    bc88:	cmp	x9, x13
    bc8c:	b.ne	bca0 <mpc_mul@@Base+0x124>  // b.any
    bc90:	mov	x0, x19
    bc94:	mov	x1, x8
    bc98:	bl	c118 <mpc_mul@@Base+0x59c>
    bc9c:	b	bbe8 <mpc_mul@@Base+0x6c>
    bca0:	ldr	x13, [x8]
    bca4:	ldr	x14, [x8, #32]
    bca8:	subs	x10, x10, x12
    bcac:	cneg	x10, x10, mi  // mi = first
    bcb0:	cmp	x13, x14
    bcb4:	csel	x12, x13, x14, gt
    bcb8:	cmp	x12, #0x0
    bcbc:	cinc	x12, x12, lt  // lt = tstop
    bcc0:	cmp	x10, x12, asr #1
    bcc4:	b.gt	bcf0 <mpc_mul@@Base+0x174>
    bcc8:	ldr	x10, [x2]
    bccc:	ldr	x12, [x2, #32]
    bcd0:	subs	x9, x9, x11
    bcd4:	cneg	x9, x9, mi  // mi = first
    bcd8:	cmp	x10, x12
    bcdc:	csel	x10, x10, x12, gt
    bce0:	cmp	x10, #0x0
    bce4:	cinc	x10, x10, lt  // lt = tstop
    bce8:	cmp	x9, x10, asr #1
    bcec:	b.le	bd00 <mpc_mul@@Base+0x184>
    bcf0:	mov	x0, x19
    bcf4:	mov	x1, x8
    bcf8:	bl	4fb0 <mpc_mul_naive@plt>
    bcfc:	b	bbe8 <mpc_mul@@Base+0x6c>
    bd00:	adrp	x11, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    bd04:	ldr	x9, [x19]
    bd08:	ldr	x10, [x19, #32]
    bd0c:	ldr	x11, [x11, #4056]
    bd10:	mov	w12, #0x17                  	// #23
    bd14:	adrp	x13, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    bd18:	cmp	x9, x10
    bd1c:	ldrsw	x11, [x11]
    bd20:	csel	x9, x9, x10, gt
    bd24:	ldr	x13, [x13, #4032]
    bd28:	mov	x0, x19
    bd2c:	mul	x10, x11, x12
    bd30:	adrp	x11, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    bd34:	ldr	x11, [x11, #4016]
    bd38:	cmp	x9, x10
    bd3c:	mov	x1, x8
    bd40:	csel	x9, x11, x13, gt
    bd44:	blr	x9
    bd48:	b	bbe8 <mpc_mul@@Base+0x6c>
    bd4c:	stp	x29, x30, [sp, #-32]!
    bd50:	stp	x20, x19, [sp, #16]
    bd54:	ldr	w8, [x1, #8]
    bd58:	ldr	w9, [x1, #40]
    bd5c:	ldr	w14, [x2, #8]
    bd60:	ldr	w15, [x2, #40]
    bd64:	mov	w11, #0x1                   	// #1
    bd68:	ldr	x13, [x1, #16]
    bd6c:	cmp	w8, #0x0
    bd70:	cneg	w12, w11, lt  // lt = tstop
    bd74:	cmp	w9, #0x0
    bd78:	cneg	w10, w11, lt  // lt = tstop
    bd7c:	cmp	w14, #0x0
    bd80:	mov	x8, #0x2                   	// #2
    bd84:	cneg	w9, w11, lt  // lt = tstop
    bd88:	cmp	w15, #0x0
    bd8c:	movk	x8, #0x8000, lsl #48
    bd90:	cneg	w11, w11, lt  // lt = tstop
    bd94:	cmp	x13, x8
    bd98:	mov	x19, x0
    bd9c:	mov	x29, sp
    bda0:	b.eq	bdc8 <mpc_mul@@Base+0x24c>  // b.none
    bda4:	ldr	x16, [x1, #48]
    bda8:	cmp	x16, x8
    bdac:	b.eq	bdc8 <mpc_mul@@Base+0x24c>  // b.none
    bdb0:	ldr	x14, [x2, #16]
    bdb4:	cmp	x14, x8
    bdb8:	b.eq	bdc8 <mpc_mul@@Base+0x24c>  // b.none
    bdbc:	ldr	x15, [x2, #48]
    bdc0:	cmp	x15, x8
    bdc4:	b.ne	bebc <mpc_mul@@Base+0x340>  // b.any
    bdc8:	mov	w20, wzr
    bdcc:	mov	w8, wzr
    bdd0:	orr	w14, w8, w20
    bdd4:	cbz	w14, bdfc <mpc_mul@@Base+0x280>
    bdd8:	mov	x0, x19
    bddc:	cbz	w8, bea0 <mpc_mul@@Base+0x324>
    bde0:	mov	w1, w8
    bde4:	bl	5230 <mpfr_set_inf@plt>
    bde8:	add	x0, x19, #0x20
    bdec:	cbz	w20, beac <mpc_mul@@Base+0x330>
    bdf0:	mov	w1, w20
    bdf4:	bl	5230 <mpfr_set_inf@plt>
    bdf8:	b	beb0 <mpc_mul@@Base+0x334>
    bdfc:	ldr	x14, [x2, #16]
    be00:	ldr	x15, [x2, #48]
    be04:	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
    be08:	ldr	x17, [x1, #48]
    be0c:	add	x0, x14, x8
    be10:	add	x1, x15, x8
    be14:	cmp	x0, #0x1
    be18:	mov	x16, #0x8000000000000003    	// #-9223372036854775805
    be1c:	cset	w0, hi  // hi = pmore
    be20:	cmp	x1, #0x1
    be24:	cset	w1, hi  // hi = pmore
    be28:	cmp	x14, x16
    be2c:	cset	w14, eq  // eq = none
    be30:	cmp	x15, x16
    be34:	cset	w15, eq  // eq = none
    be38:	orr	w2, w14, w15
    be3c:	add	x18, x13, x8
    be40:	cmp	w2, #0x0
    be44:	csel	w14, w14, w0, ne  // ne = any
    be48:	csel	w15, w15, w1, ne  // ne = any
    be4c:	cmp	x18, #0x1
    be50:	add	x8, x17, x8
    be54:	ccmp	x13, x16, #0x0, hi  // hi = pmore
    be58:	csel	w12, w12, wzr, eq  // eq = none
    be5c:	cmp	x8, #0x1
    be60:	ccmp	x17, x16, #0x0, hi  // hi = pmore
    be64:	csel	w10, w10, wzr, eq  // eq = none
    be68:	mul	w8, w12, w9
    be6c:	cmp	w14, #0x0
    be70:	mul	w9, w10, w9
    be74:	mul	w12, w12, w11
    be78:	csel	w8, w8, wzr, ne  // ne = any
    be7c:	mul	w11, w10, w11
    be80:	csel	w9, w9, wzr, ne  // ne = any
    be84:	cmp	w15, #0x0
    be88:	csel	w10, w11, wzr, ne  // ne = any
    be8c:	csel	w11, w12, wzr, ne  // ne = any
    be90:	sub	w8, w8, w10
    be94:	add	w20, w11, w9
    be98:	mov	x0, x19
    be9c:	cbnz	w8, bde0 <mpc_mul@@Base+0x264>
    bea0:	bl	4b10 <mpfr_set_nan@plt>
    bea4:	add	x0, x19, #0x20
    bea8:	cbnz	w20, bdf0 <mpc_mul@@Base+0x274>
    beac:	bl	4b10 <mpfr_set_nan@plt>
    beb0:	ldp	x20, x19, [sp, #16]
    beb4:	ldp	x29, x30, [sp], #32
    beb8:	ret
    bebc:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bec0:	cmp	x13, x8
    bec4:	b.ne	bf88 <mpc_mul@@Base+0x40c>  // b.any
    bec8:	mov	x17, #0x8000000000000001    	// #-9223372036854775807
    becc:	cmp	x14, x17
    bed0:	b.eq	bf28 <mpc_mul@@Base+0x3ac>  // b.none
    bed4:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bed8:	cmp	x16, x8
    bedc:	b.ne	beec <mpc_mul@@Base+0x370>  // b.any
    bee0:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    bee4:	cmp	x15, x8
    bee8:	b.eq	bf28 <mpc_mul@@Base+0x3ac>  // b.none
    beec:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    bef0:	cmp	x16, x8
    bef4:	b.ne	bf04 <mpc_mul@@Base+0x388>  // b.any
    bef8:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    befc:	cmp	x15, x8
    bf00:	b.eq	bf28 <mpc_mul@@Base+0x3ac>  // b.none
    bf04:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bf08:	cmp	x16, x8
    bf0c:	b.eq	bf18 <mpc_mul@@Base+0x39c>  // b.none
    bf10:	cmp	x15, x8
    bf14:	b.ne	c01c <mpc_mul@@Base+0x4a0>  // b.any
    bf18:	mul	w8, w9, w12
    bf1c:	mul	w18, w11, w10
    bf20:	cmp	w8, w18
    bf24:	b.ne	c01c <mpc_mul@@Base+0x4a0>  // b.any
    bf28:	mov	w8, wzr
    bf2c:	cmp	x15, x17
    bf30:	b.eq	c028 <mpc_mul@@Base+0x4ac>  // b.none
    bf34:	mov	x15, #0x8000000000000003    	// #-9223372036854775805
    bf38:	cmp	x16, x15
    bf3c:	b.ne	bf4c <mpc_mul@@Base+0x3d0>  // b.any
    bf40:	mov	x15, #0x8000000000000001    	// #-9223372036854775807
    bf44:	cmp	x14, x15
    bf48:	b.eq	c028 <mpc_mul@@Base+0x4ac>  // b.none
    bf4c:	mov	x15, #0x8000000000000001    	// #-9223372036854775807
    bf50:	cmp	x16, x15
    bf54:	b.ne	bf64 <mpc_mul@@Base+0x3e8>  // b.any
    bf58:	mov	x15, #0x8000000000000003    	// #-9223372036854775805
    bf5c:	cmp	x14, x15
    bf60:	b.eq	c028 <mpc_mul@@Base+0x4ac>  // b.none
    bf64:	mov	x14, #0x8000000000000003    	// #-9223372036854775805
    bf68:	cmp	x16, x14
    bf6c:	b.ne	bf80 <mpc_mul@@Base+0x404>  // b.any
    bf70:	mul	w14, w11, w12
    bf74:	mul	w15, w9, w10
    bf78:	cmp	w14, w15
    bf7c:	b.ne	c028 <mpc_mul@@Base+0x4ac>  // b.any
    bf80:	mul	w20, w11, w12
    bf84:	b	bdd0 <mpc_mul@@Base+0x254>
    bf88:	mov	x16, #0x8000000000000001    	// #-9223372036854775807
    bf8c:	cmp	x15, x16
    bf90:	b.eq	bfa8 <mpc_mul@@Base+0x42c>  // b.none
    bf94:	cmp	x13, x16
    bf98:	b.ne	bff0 <mpc_mul@@Base+0x474>  // b.any
    bf9c:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bfa0:	cmp	x14, x8
    bfa4:	b.ne	bff0 <mpc_mul@@Base+0x474>  // b.any
    bfa8:	mov	w8, wzr
    bfac:	cmp	x14, x16
    bfb0:	b.eq	c028 <mpc_mul@@Base+0x4ac>  // b.none
    bfb4:	mov	x14, #0x8000000000000001    	// #-9223372036854775807
    bfb8:	cmp	x13, x14
    bfbc:	b.ne	bfcc <mpc_mul@@Base+0x450>  // b.any
    bfc0:	mov	x14, #0x8000000000000003    	// #-9223372036854775805
    bfc4:	cmp	x15, x14
    bfc8:	b.eq	c028 <mpc_mul@@Base+0x4ac>  // b.none
    bfcc:	mov	x14, #0x8000000000000003    	// #-9223372036854775805
    bfd0:	cmp	x15, x14
    bfd4:	b.ne	bfe8 <mpc_mul@@Base+0x46c>  // b.any
    bfd8:	mul	w14, w11, w12
    bfdc:	mul	w15, w9, w10
    bfe0:	cmp	w14, w15
    bfe4:	b.ne	c028 <mpc_mul@@Base+0x4ac>  // b.any
    bfe8:	mul	w20, w9, w10
    bfec:	b	bdd0 <mpc_mul@@Base+0x254>
    bff0:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bff4:	cmp	x14, x8
    bff8:	b.ne	c00c <mpc_mul@@Base+0x490>  // b.any
    bffc:	mul	w8, w9, w12
    c000:	mul	w17, w11, w10
    c004:	cmp	w8, w17
    c008:	b.eq	bfa8 <mpc_mul@@Base+0x42c>  // b.none
    c00c:	mneg	w8, w11, w10
    c010:	cmp	x14, x16
    c014:	b.eq	c028 <mpc_mul@@Base+0x4ac>  // b.none
    c018:	b	bfb4 <mpc_mul@@Base+0x438>
    c01c:	mul	w8, w9, w12
    c020:	cmp	x15, x17
    c024:	b.ne	bf34 <mpc_mul@@Base+0x3b8>  // b.any
    c028:	mov	w20, wzr
    c02c:	b	bdd0 <mpc_mul@@Base+0x254>
    c030:	stp	x29, x30, [sp, #-80]!
    c034:	stp	x26, x25, [sp, #16]
    c038:	stp	x24, x23, [sp, #32]
    c03c:	stp	x22, x21, [sp, #48]
    c040:	stp	x20, x19, [sp, #64]
    c044:	ldr	w8, [x1, #8]
    c048:	ldr	w10, [x1, #40]
    c04c:	ldr	w11, [x2, #8]
    c050:	ldr	w12, [x2, #40]
    c054:	mov	w9, #0x1                   	// #1
    c058:	cmp	w8, #0x0
    c05c:	cneg	w24, w9, lt  // lt = tstop
    c060:	cmp	w10, #0x0
    c064:	cneg	w22, w9, lt  // lt = tstop
    c068:	cmp	w11, #0x0
    c06c:	cneg	w23, w9, lt  // lt = tstop
    c070:	cmp	w12, #0x0
    c074:	mov	x29, sp
    c078:	mov	w19, w3
    c07c:	mov	x20, x0
    c080:	cneg	w25, w9, lt  // lt = tstop
    c084:	bl	5270 <mpc_mul_fr@plt>
    c088:	ldr	x8, [x20, #16]
    c08c:	mov	x26, #0x8000000000000001    	// #-9223372036854775807
    c090:	mov	w21, w0
    c094:	cmp	x8, x26
    c098:	b.ne	c0c4 <mpc_mul@@Base+0x548>  // b.any
    c09c:	cmp	w22, w25
    c0a0:	and	w8, w19, #0xf
    c0a4:	ccmp	w24, w23, #0x4, eq  // eq = none
    c0a8:	ccmp	w8, #0x3, #0x4, eq  // eq = none
    c0ac:	mov	w8, #0xffffffff            	// #-1
    c0b0:	cneg	w3, w8, ne  // ne = any
    c0b4:	mov	x0, x20
    c0b8:	mov	x1, x20
    c0bc:	mov	w2, wzr
    c0c0:	bl	52e0 <mpfr_set4@plt>
    c0c4:	ldr	x8, [x20, #48]
    c0c8:	cmp	x8, x26
    c0cc:	b.ne	c0fc <mpc_mul@@Base+0x580>  // b.any
    c0d0:	cmp	w24, w25
    c0d4:	and	w8, w19, #0xfffffff0
    c0d8:	mov	w9, #0x30                  	// #48
    c0dc:	ccmp	w22, w23, #0x4, ne  // ne = any
    c0e0:	add	x0, x20, #0x20
    c0e4:	ccmp	w8, w9, #0x4, eq  // eq = none
    c0e8:	mov	w8, #0xffffffff            	// #-1
    c0ec:	cneg	w3, w8, ne  // ne = any
    c0f0:	mov	x1, x0
    c0f4:	mov	w2, wzr
    c0f8:	bl	52e0 <mpfr_set4@plt>
    c0fc:	mov	w0, w21
    c100:	ldp	x20, x19, [sp, #64]
    c104:	ldp	x22, x21, [sp, #48]
    c108:	ldp	x24, x23, [sp, #32]
    c10c:	ldp	x26, x25, [sp, #16]
    c110:	ldp	x29, x30, [sp], #80
    c114:	ret
    c118:	sub	sp, sp, #0x90
    c11c:	cmp	x0, x1
    c120:	cset	w8, eq  // eq = none
    c124:	cmp	x0, x2
    c128:	cset	w9, eq  // eq = none
    c12c:	stp	x24, x23, [sp, #96]
    c130:	orr	w24, w8, w9
    c134:	stp	x22, x21, [sp, #112]
    c138:	stp	x20, x19, [sp, #128]
    c13c:	mov	x22, x2
    c140:	mov	x20, x1
    c144:	mov	x19, x0
    c148:	cmp	w24, #0x1
    c14c:	mov	w21, w3
    c150:	stp	x29, x30, [sp, #64]
    c154:	stp	x26, x25, [sp, #80]
    c158:	add	x29, sp, #0x40
    c15c:	b.ne	c174 <mpc_mul@@Base+0x5f8>  // b.any
    c160:	ldr	x1, [x19]
    c164:	ldr	x2, [x19, #32]
    c168:	mov	x0, sp
    c16c:	bl	54d0 <mpc_init3@plt>
    c170:	b	c184 <mpc_mul@@Base+0x608>
    c174:	ldp	q1, q0, [x19, #32]
    c178:	ldp	q3, q2, [x19]
    c17c:	stp	q1, q0, [sp, #32]
    c180:	stp	q3, q2, [sp]
    c184:	ldr	w9, [x22, #8]
    c188:	ldr	w10, [x20, #40]
    c18c:	mov	w8, #0x1                   	// #1
    c190:	add	x1, x20, #0x20
    c194:	cmp	w9, #0x0
    c198:	cneg	w9, w8, lt  // lt = tstop
    c19c:	cmp	w10, #0x0
    c1a0:	cneg	w10, w8, lt  // lt = tstop
    c1a4:	cmp	w9, w10
    c1a8:	b.ne	c1b4 <mpc_mul@@Base+0x638>  // b.any
    c1ac:	mov	w25, wzr
    c1b0:	b	c1d4 <mpc_mul@@Base+0x658>
    c1b4:	ldr	w9, [x22, #40]
    c1b8:	ldr	w10, [x20, #8]
    c1bc:	cmp	w9, #0x0
    c1c0:	cneg	w9, w8, lt  // lt = tstop
    c1c4:	cmp	w10, #0x0
    c1c8:	cneg	w8, w8, lt  // lt = tstop
    c1cc:	cmp	w9, w8
    c1d0:	cset	w25, ne  // ne = any
    c1d4:	and	w8, w21, #0xf
    c1d8:	mov	w9, #0x2                   	// #2
    c1dc:	cmp	w8, #0x3
    c1e0:	add	x23, x22, #0x20
    c1e4:	csel	w9, w9, w8, eq  // eq = none
    c1e8:	cmp	w8, #0x2
    c1ec:	mov	w8, #0x3                   	// #3
    c1f0:	csel	w3, w8, w9, eq  // eq = none
    c1f4:	mov	x0, sp
    c1f8:	mov	x2, x23
    c1fc:	mov	x26, sp
    c200:	bl	4c40 <mpfr_mul@plt>
    c204:	mov	w22, w0
    c208:	mov	x0, sp
    c20c:	mov	x1, sp
    c210:	mov	w2, wzr
    c214:	bl	4c50 <mpfr_neg@plt>
    c218:	asr	w21, w21, #4
    c21c:	add	x0, x26, #0x20
    c220:	mov	x1, x20
    c224:	mov	x2, x23
    c228:	mov	w3, w21
    c22c:	bl	4c40 <mpfr_mul@plt>
    c230:	mov	w20, w0
    c234:	mov	x1, sp
    c238:	mov	x0, x19
    c23c:	mov	w2, wzr
    c240:	bl	5680 <mpc_set@plt>
    c244:	ldr	x8, [x19, #48]
    c248:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    c24c:	cmp	x8, x9
    c250:	b.ne	c27c <mpc_mul@@Base+0x700>  // b.any
    c254:	cmp	w21, #0x3
    c258:	cset	w8, eq  // eq = none
    c25c:	orr	w8, w8, w25
    c260:	add	x0, x19, #0x20
    c264:	cmp	w8, #0x0
    c268:	mov	w8, #0xffffffff            	// #-1
    c26c:	cneg	w3, w8, eq  // eq = none
    c270:	mov	x1, x0
    c274:	mov	w2, wzr
    c278:	bl	52e0 <mpfr_set4@plt>
    c27c:	cbz	w24, c288 <mpc_mul@@Base+0x70c>
    c280:	mov	x0, sp
    c284:	bl	4ae0 <mpc_clear@plt>
    c288:	cmp	w22, #0x0
    c28c:	mov	w8, #0x2                   	// #2
    c290:	cset	w9, ne  // ne = any
    c294:	csel	w8, w8, w9, gt
    c298:	cmp	w20, #0x0
    c29c:	cset	w9, ne  // ne = any
    c2a0:	ldp	x20, x19, [sp, #128]
    c2a4:	ldp	x22, x21, [sp, #112]
    c2a8:	ldp	x24, x23, [sp, #96]
    c2ac:	ldp	x26, x25, [sp, #80]
    c2b0:	ldp	x29, x30, [sp, #64]
    c2b4:	lsl	w9, w9, #2
    c2b8:	mov	w10, #0x8                   	// #8
    c2bc:	csel	w9, w10, w9, lt  // lt = tstop
    c2c0:	orr	w0, w9, w8
    c2c4:	add	sp, sp, #0x90
    c2c8:	ret

000000000000c2cc <mpc_mul_fr@@Base>:
    c2cc:	sub	sp, sp, #0x60
    c2d0:	str	x23, [sp, #48]
    c2d4:	stp	x22, x21, [sp, #64]
    c2d8:	stp	x20, x19, [sp, #80]
    c2dc:	mov	w21, w3
    c2e0:	mov	x19, x2
    c2e4:	mov	x20, x0
    c2e8:	cmp	x0, x2
    c2ec:	mov	x23, x1
    c2f0:	stp	x29, x30, [sp, #32]
    c2f4:	add	x29, sp, #0x20
    c2f8:	b.eq	c308 <mpc_mul_fr@@Base+0x3c>  // b.none
    c2fc:	ldp	q1, q0, [x20]
    c300:	stp	q1, q0, [sp]
    c304:	b	c314 <mpc_mul_fr@@Base+0x48>
    c308:	ldr	x1, [x20]
    c30c:	mov	x0, sp
    c310:	bl	5540 <mpfr_init2@plt>
    c314:	and	w3, w21, #0xf
    c318:	mov	x0, sp
    c31c:	mov	x1, x23
    c320:	mov	x2, x19
    c324:	bl	4c40 <mpfr_mul@plt>
    c328:	mov	w22, w0
    c32c:	add	x0, x20, #0x20
    c330:	add	x1, x23, #0x20
    c334:	asr	w3, w21, #4
    c338:	mov	x2, x19
    c33c:	bl	4c40 <mpfr_mul@plt>
    c340:	ldr	w3, [sp, #8]
    c344:	mov	w21, w0
    c348:	mov	x1, sp
    c34c:	mov	x0, x20
    c350:	mov	w2, wzr
    c354:	bl	52e0 <mpfr_set4@plt>
    c358:	cmp	x20, x19
    c35c:	b.ne	c368 <mpc_mul_fr@@Base+0x9c>  // b.any
    c360:	mov	x0, sp
    c364:	bl	4e40 <mpfr_clear@plt>
    c368:	cmp	w22, #0x0
    c36c:	mov	w8, #0x2                   	// #2
    c370:	cset	w9, ne  // ne = any
    c374:	csel	w8, w8, w9, lt  // lt = tstop
    c378:	cmp	w21, #0x0
    c37c:	cset	w9, ne  // ne = any
    c380:	ldp	x20, x19, [sp, #80]
    c384:	ldp	x22, x21, [sp, #64]
    c388:	ldr	x23, [sp, #48]
    c38c:	ldp	x29, x30, [sp, #32]
    c390:	lsl	w9, w9, #2
    c394:	mov	w10, #0x8                   	// #8
    c398:	csel	w9, w10, w9, lt  // lt = tstop
    c39c:	orr	w0, w9, w8
    c3a0:	add	sp, sp, #0x60
    c3a4:	ret

000000000000c3a8 <mpc_mul_i@@Base>:
    c3a8:	sub	sp, sp, #0x60
    c3ac:	stp	x29, x30, [sp, #32]
    c3b0:	str	x23, [sp, #48]
    c3b4:	stp	x22, x21, [sp, #64]
    c3b8:	stp	x20, x19, [sp, #80]
    c3bc:	mov	x20, x0
    c3c0:	ldr	x8, [x1]
    c3c4:	ldr	x9, [x20, #32]!
    c3c8:	mov	w22, w3
    c3cc:	mov	x21, x1
    c3d0:	mov	x19, x0
    c3d4:	cmp	x8, x9
    c3d8:	mov	w23, w2
    c3dc:	add	x29, sp, #0x20
    c3e0:	b.ne	c434 <mpc_mul_i@@Base+0x8c>  // b.any
    c3e4:	mov	x1, x21
    c3e8:	ldr	x8, [x1, #32]!
    c3ec:	ldr	x9, [x19]
    c3f0:	cmp	x8, x9
    c3f4:	b.ne	c434 <mpc_mul_i@@Base+0x8c>  // b.any
    c3f8:	cmp	x19, x21
    c3fc:	b.eq	c508 <mpc_mul_i@@Base+0x160>  // b.none
    c400:	ldr	w3, [x21, #40]
    c404:	mov	x0, x19
    c408:	mov	w2, wzr
    c40c:	bl	52e0 <mpfr_set4@plt>
    c410:	ldr	w3, [x21, #8]
    c414:	mov	x0, x20
    c418:	mov	x1, x21
    c41c:	mov	w2, wzr
    c420:	bl	52e0 <mpfr_set4@plt>
    c424:	tbnz	w23, #31, c518 <mpc_mul_i@@Base+0x170>
    c428:	mov	x0, x19
    c42c:	mov	x1, x19
    c430:	b	c520 <mpc_mul_i@@Base+0x178>
    c434:	cmp	x19, x21
    c438:	b.eq	c46c <mpc_mul_i@@Base+0xc4>  // b.none
    c43c:	add	x1, x21, #0x20
    c440:	and	w2, w22, #0xf
    c444:	tbnz	w23, #31, c4a8 <mpc_mul_i@@Base+0x100>
    c448:	mov	x0, x19
    c44c:	bl	4c50 <mpfr_neg@plt>
    c450:	ldr	w3, [x21, #8]
    c454:	mov	w23, w0
    c458:	asr	w2, w22, #4
    c45c:	mov	x0, x20
    c460:	mov	x1, x21
    c464:	bl	52e0 <mpfr_set4@plt>
    c468:	b	c4c8 <mpc_mul_i@@Base+0x120>
    c46c:	ldr	x1, [x19]
    c470:	mov	x0, sp
    c474:	bl	5540 <mpfr_init2@plt>
    c478:	add	x1, x21, #0x20
    c47c:	and	w2, w22, #0xf
    c480:	tbnz	w23, #31, c4d0 <mpc_mul_i@@Base+0x128>
    c484:	mov	x0, sp
    c488:	bl	4c50 <mpfr_neg@plt>
    c48c:	ldr	w3, [x21, #8]
    c490:	mov	w23, w0
    c494:	asr	w2, w22, #4
    c498:	mov	x0, x20
    c49c:	mov	x1, x21
    c4a0:	bl	52e0 <mpfr_set4@plt>
    c4a4:	b	c4f0 <mpc_mul_i@@Base+0x148>
    c4a8:	ldr	w3, [x21, #40]
    c4ac:	mov	x0, x19
    c4b0:	bl	52e0 <mpfr_set4@plt>
    c4b4:	mov	w23, w0
    c4b8:	asr	w2, w22, #4
    c4bc:	mov	x0, x20
    c4c0:	mov	x1, x21
    c4c4:	bl	4c50 <mpfr_neg@plt>
    c4c8:	mov	w20, w0
    c4cc:	b	c530 <mpc_mul_i@@Base+0x188>
    c4d0:	ldr	w3, [x21, #40]
    c4d4:	mov	x0, sp
    c4d8:	bl	52e0 <mpfr_set4@plt>
    c4dc:	mov	w23, w0
    c4e0:	asr	w2, w22, #4
    c4e4:	mov	x0, x20
    c4e8:	mov	x1, x21
    c4ec:	bl	4c50 <mpfr_neg@plt>
    c4f0:	mov	w20, w0
    c4f4:	mov	x0, x19
    c4f8:	bl	4e40 <mpfr_clear@plt>
    c4fc:	ldp	q1, q0, [sp]
    c500:	stp	q1, q0, [x19]
    c504:	b	c530 <mpc_mul_i@@Base+0x188>
    c508:	mov	x0, x19
    c50c:	mov	x1, x20
    c510:	bl	51a0 <mpfr_swap@plt>
    c514:	tbz	w23, #31, c428 <mpc_mul_i@@Base+0x80>
    c518:	mov	x0, x20
    c51c:	mov	x1, x20
    c520:	mov	w2, wzr
    c524:	bl	4c50 <mpfr_neg@plt>
    c528:	mov	w23, wzr
    c52c:	mov	w20, wzr
    c530:	cmp	w23, #0x0
    c534:	mov	w8, #0x2                   	// #2
    c538:	cset	w9, ne  // ne = any
    c53c:	csel	w8, w8, w9, lt  // lt = tstop
    c540:	cmp	w20, #0x0
    c544:	cset	w9, ne  // ne = any
    c548:	ldp	x20, x19, [sp, #80]
    c54c:	ldp	x22, x21, [sp, #64]
    c550:	ldr	x23, [sp, #48]
    c554:	ldp	x29, x30, [sp, #32]
    c558:	lsl	w9, w9, #2
    c55c:	mov	w10, #0x8                   	// #8
    c560:	csel	w9, w10, w9, lt  // lt = tstop
    c564:	orr	w0, w9, w8
    c568:	add	sp, sp, #0x60
    c56c:	ret

000000000000c570 <mpc_mul_si@@Base>:
    c570:	stp	x29, x30, [sp, #-64]!
    c574:	stp	x20, x19, [sp, #48]
    c578:	mov	w19, w3
    c57c:	and	w3, w3, #0xf
    c580:	str	x23, [sp, #16]
    c584:	stp	x22, x21, [sp, #32]
    c588:	mov	x29, sp
    c58c:	mov	x20, x2
    c590:	mov	x21, x1
    c594:	mov	x22, x0
    c598:	bl	5470 <mpfr_mul_si@plt>
    c59c:	mov	w23, w0
    c5a0:	add	x0, x22, #0x20
    c5a4:	add	x1, x21, #0x20
    c5a8:	asr	w3, w19, #4
    c5ac:	mov	x2, x20
    c5b0:	bl	5470 <mpfr_mul_si@plt>
    c5b4:	cmp	w23, #0x0
    c5b8:	mov	w8, #0x2                   	// #2
    c5bc:	cset	w9, ne  // ne = any
    c5c0:	csel	w8, w8, w9, lt  // lt = tstop
    c5c4:	cmp	w0, #0x0
    c5c8:	cset	w9, ne  // ne = any
    c5cc:	ldp	x20, x19, [sp, #48]
    c5d0:	ldp	x22, x21, [sp, #32]
    c5d4:	ldr	x23, [sp, #16]
    c5d8:	lsl	w9, w9, #2
    c5dc:	mov	w10, #0x8                   	// #8
    c5e0:	csel	w9, w10, w9, lt  // lt = tstop
    c5e4:	orr	w0, w9, w8
    c5e8:	ldp	x29, x30, [sp], #64
    c5ec:	ret

000000000000c5f0 <mpc_mul_ui@@Base>:
    c5f0:	stp	x29, x30, [sp, #-64]!
    c5f4:	stp	x20, x19, [sp, #48]
    c5f8:	mov	w19, w3
    c5fc:	and	w3, w3, #0xf
    c600:	str	x23, [sp, #16]
    c604:	stp	x22, x21, [sp, #32]
    c608:	mov	x29, sp
    c60c:	mov	x20, x2
    c610:	mov	x21, x1
    c614:	mov	x22, x0
    c618:	bl	4a90 <mpfr_mul_ui@plt>
    c61c:	mov	w23, w0
    c620:	add	x1, x21, #0x20
    c624:	add	x0, x22, #0x20
    c628:	asr	w3, w19, #4
    c62c:	mov	x2, x20
    c630:	bl	4a90 <mpfr_mul_ui@plt>
    c634:	cmp	w23, #0x0
    c638:	mov	w8, #0x2                   	// #2
    c63c:	cset	w9, ne  // ne = any
    c640:	csel	w8, w8, w9, lt  // lt = tstop
    c644:	cmp	w0, #0x0
    c648:	cset	w9, ne  // ne = any
    c64c:	ldp	x20, x19, [sp, #48]
    c650:	ldp	x22, x21, [sp, #32]
    c654:	ldr	x23, [sp, #16]
    c658:	lsl	w9, w9, #2
    c65c:	mov	w10, #0x8                   	// #8
    c660:	csel	w9, w10, w9, lt  // lt = tstop
    c664:	orr	w0, w9, w8
    c668:	ldp	x29, x30, [sp], #64
    c66c:	ret

000000000000c670 <mpc_neg@@Base>:
    c670:	stp	x29, x30, [sp, #-48]!
    c674:	stp	x20, x19, [sp, #32]
    c678:	mov	w19, w2
    c67c:	and	w2, w2, #0xf
    c680:	stp	x22, x21, [sp, #16]
    c684:	mov	x29, sp
    c688:	mov	x20, x1
    c68c:	mov	x21, x0
    c690:	bl	4c50 <mpfr_neg@plt>
    c694:	mov	w22, w0
    c698:	add	x0, x21, #0x20
    c69c:	add	x1, x20, #0x20
    c6a0:	asr	w2, w19, #4
    c6a4:	bl	4c50 <mpfr_neg@plt>
    c6a8:	cmp	w22, #0x0
    c6ac:	mov	w8, #0x2                   	// #2
    c6b0:	cset	w9, ne  // ne = any
    c6b4:	csel	w8, w8, w9, lt  // lt = tstop
    c6b8:	cmp	w0, #0x0
    c6bc:	cset	w9, ne  // ne = any
    c6c0:	ldp	x20, x19, [sp, #32]
    c6c4:	ldp	x22, x21, [sp, #16]
    c6c8:	lsl	w9, w9, #2
    c6cc:	mov	w10, #0x8                   	// #8
    c6d0:	csel	w9, w10, w9, lt  // lt = tstop
    c6d4:	orr	w0, w9, w8
    c6d8:	ldp	x29, x30, [sp], #48
    c6dc:	ret

000000000000c6e0 <mpc_norm@@Base>:
    c6e0:	sub	sp, sp, #0xd0
    c6e4:	stp	x20, x19, [sp, #192]
    c6e8:	mov	x20, x0
    c6ec:	mov	x0, x1
    c6f0:	stp	x29, x30, [sp, #112]
    c6f4:	stp	x28, x27, [sp, #128]
    c6f8:	stp	x26, x25, [sp, #144]
    c6fc:	stp	x24, x23, [sp, #160]
    c700:	stp	x22, x21, [sp, #176]
    c704:	add	x29, sp, #0x70
    c708:	mov	w19, w2
    c70c:	mov	x24, x1
    c710:	bl	55d0 <mpfr_number_p@plt>
    c714:	cbz	w0, c75c <mpc_norm@@Base+0x7c>
    c718:	add	x23, x24, #0x20
    c71c:	mov	x0, x23
    c720:	bl	55d0 <mpfr_number_p@plt>
    c724:	cbz	w0, c75c <mpc_norm@@Base+0x7c>
    c728:	ldr	x10, [x24, #16]
    c72c:	ldr	x8, [x24, #48]
    c730:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    c734:	cmp	x10, x9
    c738:	b.ne	c774 <mpc_norm@@Base+0x94>  // b.any
    c73c:	cmp	x8, x9
    c740:	b.ne	c788 <mpc_norm@@Base+0xa8>  // b.any
    c744:	mov	w8, #0x1                   	// #1
    c748:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    c74c:	mov	w19, wzr
    c750:	str	w8, [x20, #8]
    c754:	str	x9, [x20, #16]
    c758:	b	ca34 <mpc_norm@@Base+0x354>
    c75c:	mov	x0, x20
    c760:	mov	x1, x24
    c764:	mov	w2, w19
    c768:	bl	52b0 <mpc_abs@plt>
    c76c:	mov	w19, w0
    c770:	b	ca34 <mpc_norm@@Base+0x354>
    c774:	cmp	x8, x9
    c778:	b.ne	c7a0 <mpc_norm@@Base+0xc0>  // b.any
    c77c:	mov	x0, x20
    c780:	mov	x1, x24
    c784:	b	c790 <mpc_norm@@Base+0xb0>
    c788:	mov	x0, x20
    c78c:	mov	x1, x23
    c790:	mov	w2, w19
    c794:	bl	5120 <mpfr_sqr@plt>
    c798:	mov	w19, w0
    c79c:	b	ca34 <mpc_norm@@Base+0x354>
    c7a0:	ldr	x25, [x20]
    c7a4:	sub	x0, x29, #0x20
    c7a8:	bl	4b70 <mpfr_init@plt>
    c7ac:	add	x0, sp, #0x30
    c7b0:	bl	4b70 <mpfr_init@plt>
    c7b4:	add	x0, sp, #0x10
    c7b8:	bl	4b70 <mpfr_init@plt>
    c7bc:	bl	5400 <mpfr_underflow_p@plt>
    c7c0:	str	w0, [sp, #8]
    c7c4:	bl	55e0 <mpfr_overflow_p@plt>
    c7c8:	str	w0, [sp, #12]
    c7cc:	bl	4f10 <mpfr_clear_underflow@plt>
    c7d0:	bl	4b20 <mpfr_clear_overflow@plt>
    c7d4:	cmp	w19, #0x0
    c7d8:	mov	w21, wzr
    c7dc:	cset	w22, eq  // eq = none
    c7e0:	mov	x0, x25
    c7e4:	bl	4df0 <mpc_ceil_log2@plt>
    c7e8:	ldr	x8, [x24]
    c7ec:	add	x9, x25, x0
    c7f0:	add	x25, x9, #0x3
    c7f4:	lsl	x27, x8, #1
    c7f8:	cbz	w21, c808 <mpc_norm@@Base+0x128>
    c7fc:	ldr	x8, [x23]
    c800:	lsl	x26, x8, #1
    c804:	b	c820 <mpc_norm@@Base+0x140>
    c808:	ldr	x8, [x23]
    c80c:	cmp	x25, x27
    c810:	csel	x27, x25, x27, lt  // lt = tstop
    c814:	lsl	x8, x8, #1
    c818:	cmp	x25, x8
    c81c:	csel	x26, x25, x8, lt  // lt = tstop
    c820:	sub	x0, x29, #0x20
    c824:	mov	x1, x27
    c828:	bl	4d50 <mpfr_set_prec@plt>
    c82c:	add	x0, sp, #0x30
    c830:	mov	x1, x26
    c834:	bl	4d50 <mpfr_set_prec@plt>
    c838:	sub	x0, x29, #0x20
    c83c:	mov	w2, #0x3                   	// #3
    c840:	mov	x1, x24
    c844:	bl	5120 <mpfr_sqr@plt>
    c848:	mov	w28, w0
    c84c:	add	x0, sp, #0x30
    c850:	mov	w2, #0x3                   	// #3
    c854:	mov	x1, x23
    c858:	bl	5120 <mpfr_sqr@plt>
    c85c:	orr	w28, w0, w28
    c860:	cbz	w28, c884 <mpc_norm@@Base+0x1a4>
    c864:	add	x0, sp, #0x10
    c868:	mov	x1, x25
    c86c:	bl	4d50 <mpfr_set_prec@plt>
    c870:	add	x0, sp, #0x10
    c874:	sub	x1, x29, #0x20
    c878:	add	x2, sp, #0x30
    c87c:	mov	w3, #0x3                   	// #3
    c880:	bl	4f60 <mpfr_add@plt>
    c884:	cbnz	w21, c8b0 <mpc_norm@@Base+0x1d0>
    c888:	cbz	w28, c8b0 <mpc_norm@@Base+0x1d0>
    c88c:	ldr	x8, [x20]
    c890:	sub	x1, x25, #0x2
    c894:	add	x0, sp, #0x10
    c898:	mov	w2, #0x3                   	// #3
    c89c:	add	x4, x8, x22
    c8a0:	mov	w3, #0x2                   	// #2
    c8a4:	bl	5550 <mpfr_can_round@plt>
    c8a8:	sub	w21, w21, #0x1
    c8ac:	cbz	w0, c7e0 <mpc_norm@@Base+0x100>
    c8b0:	cbz	w28, c9f0 <mpc_norm@@Base+0x310>
    c8b4:	bl	55e0 <mpfr_overflow_p@plt>
    c8b8:	cbz	w0, c8ec <mpc_norm@@Base+0x20c>
    c8bc:	mov	w1, #0x1                   	// #1
    c8c0:	mov	x0, x20
    c8c4:	mov	x2, xzr
    c8c8:	mov	w3, wzr
    c8cc:	bl	5240 <mpfr_set_ui_2exp@plt>
    c8d0:	bl	5310 <mpfr_get_emax@plt>
    c8d4:	mov	x2, x0
    c8d8:	mov	x0, x20
    c8dc:	mov	x1, x20
    c8e0:	mov	w3, w19
    c8e4:	bl	5050 <mpfr_mul_2ui@plt>
    c8e8:	b	ca04 <mpc_norm@@Base+0x324>
    c8ec:	bl	5400 <mpfr_underflow_p@plt>
    c8f0:	cbz	w0, c944 <mpc_norm@@Base+0x264>
    c8f4:	bl	5170 <mpfr_get_emin@plt>
    c8f8:	ldur	x8, [x29, #-16]
    c8fc:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    c900:	mov	x25, x0
    c904:	cmp	x8, x9
    c908:	b.ne	c9bc <mpc_norm@@Base+0x2dc>  // b.any
    c90c:	ldr	x10, [sp, #64]
    c910:	cmp	x10, x9
    c914:	b.eq	c95c <mpc_norm@@Base+0x27c>  // b.none
    c918:	cmn	x10, #0x9
    c91c:	b.lt	c95c <mpc_norm@@Base+0x27c>  // b.tstop
    c920:	sub	x9, x10, x26, lsl #1
    c924:	cmp	x9, x25
    c928:	b.le	c95c <mpc_norm@@Base+0x27c>
    c92c:	sub	x0, x29, #0x20
    c930:	mov	w1, #0x1                   	// #1
    c934:	bl	4d50 <mpfr_set_prec@plt>
    c938:	sub	x2, x25, #0x1
    c93c:	sub	x0, x29, #0x20
    c940:	b	c9e4 <mpc_norm@@Base+0x304>
    c944:	ldr	w3, [sp, #24]
    c948:	add	x1, sp, #0x10
    c94c:	mov	x0, x20
    c950:	mov	w2, w19
    c954:	bl	52e0 <mpfr_set4@plt>
    c958:	b	ca04 <mpc_norm@@Base+0x324>
    c95c:	ldr	x9, [x24, #16]
    c960:	ldr	x10, [x24, #48]
    c964:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
    c968:	cmp	x8, x11
    c96c:	neg	x9, x9
    c970:	neg	x10, x10
    c974:	lsr	x12, x10, #1
    c978:	and	x13, x9, #0x1
    c97c:	and	x10, x10, #0x1
    c980:	add	x9, x12, x9, lsr #1
    c984:	add	x10, x10, x13
    c988:	add	x26, x9, x10, lsr #1
    c98c:	lsl	x25, x26, #1
    c990:	sub	x0, x29, #0x20
    c994:	b.ne	ca58 <mpc_norm@@Base+0x378>  // b.any
    c998:	mov	x1, x24
    c99c:	mov	x2, x26
    c9a0:	mov	w3, wzr
    c9a4:	bl	5050 <mpfr_mul_2ui@plt>
    c9a8:	sub	x0, x29, #0x20
    c9ac:	sub	x1, x29, #0x20
    c9b0:	mov	w2, wzr
    c9b4:	bl	5120 <mpfr_sqr@plt>
    c9b8:	b	ca68 <mpc_norm@@Base+0x388>
    c9bc:	cmn	x8, #0x9
    c9c0:	b.lt	c90c <mpc_norm@@Base+0x22c>  // b.tstop
    c9c4:	sub	x10, x8, x27, lsl #1
    c9c8:	cmp	x10, x25
    c9cc:	b.le	c90c <mpc_norm@@Base+0x22c>
    c9d0:	add	x0, sp, #0x30
    c9d4:	mov	w1, #0x1                   	// #1
    c9d8:	bl	4d50 <mpfr_set_prec@plt>
    c9dc:	sub	x2, x25, #0x1
    c9e0:	add	x0, sp, #0x30
    c9e4:	mov	w1, #0x1                   	// #1
    c9e8:	mov	w3, #0x1                   	// #1
    c9ec:	bl	5240 <mpfr_set_ui_2exp@plt>
    c9f0:	sub	x1, x29, #0x20
    c9f4:	add	x2, sp, #0x30
    c9f8:	mov	x0, x20
    c9fc:	mov	w3, w19
    ca00:	bl	4f60 <mpfr_add@plt>
    ca04:	mov	w19, w0
    ca08:	ldp	w8, w20, [sp, #8]
    ca0c:	cbz	w8, ca14 <mpc_norm@@Base+0x334>
    ca10:	bl	4a60 <mpfr_set_underflow@plt>
    ca14:	cbz	w20, ca1c <mpc_norm@@Base+0x33c>
    ca18:	bl	5590 <mpfr_set_overflow@plt>
    ca1c:	sub	x0, x29, #0x20
    ca20:	bl	4e40 <mpfr_clear@plt>
    ca24:	add	x0, sp, #0x30
    ca28:	bl	4e40 <mpfr_clear@plt>
    ca2c:	add	x0, sp, #0x10
    ca30:	bl	4e40 <mpfr_clear@plt>
    ca34:	mov	w0, w19
    ca38:	ldp	x20, x19, [sp, #192]
    ca3c:	ldp	x22, x21, [sp, #176]
    ca40:	ldp	x24, x23, [sp, #160]
    ca44:	ldp	x26, x25, [sp, #144]
    ca48:	ldp	x28, x27, [sp, #128]
    ca4c:	ldp	x29, x30, [sp, #112]
    ca50:	add	sp, sp, #0xd0
    ca54:	ret
    ca58:	sub	x1, x29, #0x20
    ca5c:	mov	x2, x25
    ca60:	mov	w3, wzr
    ca64:	bl	5050 <mpfr_mul_2ui@plt>
    ca68:	ldr	x8, [sp, #64]
    ca6c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    ca70:	add	x0, sp, #0x30
    ca74:	cmp	x8, x9
    ca78:	b.ne	caa0 <mpc_norm@@Base+0x3c0>  // b.any
    ca7c:	mov	x1, x23
    ca80:	mov	x2, x26
    ca84:	mov	w3, wzr
    ca88:	bl	5050 <mpfr_mul_2ui@plt>
    ca8c:	add	x0, sp, #0x30
    ca90:	add	x1, sp, #0x30
    ca94:	mov	w2, wzr
    ca98:	bl	5120 <mpfr_sqr@plt>
    ca9c:	b	cab0 <mpc_norm@@Base+0x3d0>
    caa0:	add	x1, sp, #0x30
    caa4:	mov	x2, x25
    caa8:	mov	w3, wzr
    caac:	bl	5050 <mpfr_mul_2ui@plt>
    cab0:	sub	x1, x29, #0x20
    cab4:	add	x2, sp, #0x30
    cab8:	mov	x0, x20
    cabc:	mov	w3, w19
    cac0:	bl	4f60 <mpfr_add@plt>
    cac4:	mov	w23, w0
    cac8:	bl	4f10 <mpfr_clear_underflow@plt>
    cacc:	mov	x0, x20
    cad0:	mov	x1, x20
    cad4:	mov	x2, x25
    cad8:	mov	w3, w19
    cadc:	bl	5430 <mpfr_div_2ui@plt>
    cae0:	mov	w19, w0
    cae4:	bl	5400 <mpfr_underflow_p@plt>
    cae8:	cmp	w0, #0x0
    caec:	csel	w19, w23, w19, eq  // eq = none
    caf0:	ldp	w8, w20, [sp, #8]
    caf4:	cbnz	w8, ca10 <mpc_norm@@Base+0x330>
    caf8:	b	ca14 <mpc_norm@@Base+0x334>

000000000000cafc <mpc_out_str@@Base>:
    cafc:	stp	x29, x30, [sp, #-64]!
    cb00:	stp	x24, x23, [sp, #16]
    cb04:	stp	x22, x21, [sp, #32]
    cb08:	stp	x20, x19, [sp, #48]
    cb0c:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    cb10:	ldr	x8, [x8, #4024]
    cb14:	cmp	x0, #0x0
    cb18:	mov	w22, w1
    cb1c:	mov	x29, sp
    cb20:	ldr	x8, [x8]
    cb24:	mov	w19, w4
    cb28:	mov	x20, x3
    cb2c:	mov	x21, x2
    cb30:	csel	x23, x8, x0, eq  // eq = none
    cb34:	mov	w0, #0x28                  	// #40
    cb38:	mov	x1, x23
    cb3c:	bl	4c70 <fputc@plt>
    cb40:	and	w19, w19, #0xf
    cb44:	mov	x0, x23
    cb48:	mov	w1, w22
    cb4c:	mov	x2, x21
    cb50:	mov	x3, x20
    cb54:	mov	w4, w19
    cb58:	bl	52a0 <__gmpfr_out_str@plt>
    cb5c:	mov	x24, x0
    cb60:	mov	w0, #0x20                  	// #32
    cb64:	mov	x1, x23
    cb68:	bl	4c70 <fputc@plt>
    cb6c:	add	x3, x20, #0x20
    cb70:	mov	x0, x23
    cb74:	mov	w1, w22
    cb78:	mov	x2, x21
    cb7c:	mov	w4, w19
    cb80:	bl	52a0 <__gmpfr_out_str@plt>
    cb84:	add	x8, x24, x0
    cb88:	mov	w0, #0x29                  	// #41
    cb8c:	mov	x1, x23
    cb90:	add	x19, x8, #0x3
    cb94:	bl	4c70 <fputc@plt>
    cb98:	mov	x0, x19
    cb9c:	ldp	x20, x19, [sp, #48]
    cba0:	ldp	x22, x21, [sp, #32]
    cba4:	ldp	x24, x23, [sp, #16]
    cba8:	ldp	x29, x30, [sp], #64
    cbac:	ret

000000000000cbb0 <mpc_pow@@Base>:
    cbb0:	sub	sp, sp, #0x180
    cbb4:	stp	x29, x30, [sp, #288]
    cbb8:	stp	x28, x27, [sp, #304]
    cbbc:	stp	x26, x25, [sp, #320]
    cbc0:	stp	x24, x23, [sp, #336]
    cbc4:	stp	x22, x21, [sp, #352]
    cbc8:	stp	x20, x19, [sp, #368]
    cbcc:	add	x29, sp, #0x120
    cbd0:	mov	w26, w3
    cbd4:	mov	x22, x2
    cbd8:	mov	x24, x1
    cbdc:	mov	x19, x0
    cbe0:	bl	5400 <mpfr_underflow_p@plt>
    cbe4:	mov	w21, w0
    cbe8:	bl	55e0 <mpfr_overflow_p@plt>
    cbec:	ldr	x25, [x22, #48]
    cbf0:	ldr	x27, [x24, #48]
    cbf4:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    cbf8:	mov	w23, w0
    cbfc:	cmp	x25, x8
    cc00:	b.ne	cc44 <mpc_pow@@Base+0x94>  // b.any
    cc04:	ldr	x9, [x22, #16]
    cc08:	cmp	x9, x8
    cc0c:	b.ne	cc44 <mpc_pow@@Base+0x94>  // b.any
    cc10:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    cc14:	cmp	x27, x8
    cc18:	b.ne	cce0 <mpc_pow@@Base+0x130>  // b.any
    cc1c:	ldr	x9, [x24, #16]
    cc20:	cmp	x9, x8
    cc24:	b.ne	cce0 <mpc_pow@@Base+0x130>  // b.any
    cc28:	mov	w1, #0x1                   	// #1
    cc2c:	mov	x0, x19
    cc30:	mov	x2, xzr
    cc34:	mov	w3, wzr
    cc38:	bl	5150 <mpc_set_ui_ui@plt>
    cc3c:	mov	w27, wzr
    cc40:	b	ce04 <mpc_pow@@Base+0x254>
    cc44:	mov	x0, x24
    cc48:	bl	55d0 <mpfr_number_p@plt>
    cc4c:	cbz	w0, cc90 <mpc_pow@@Base+0xe0>
    cc50:	add	x20, x24, #0x20
    cc54:	mov	x0, x20
    cc58:	bl	55d0 <mpfr_number_p@plt>
    cc5c:	cbz	w0, cc90 <mpc_pow@@Base+0xe0>
    cc60:	mov	x0, x22
    cc64:	bl	55d0 <mpfr_number_p@plt>
    cc68:	cbz	w0, cc90 <mpc_pow@@Base+0xe0>
    cc6c:	add	x0, x22, #0x20
    cc70:	bl	55d0 <mpfr_number_p@plt>
    cc74:	cbz	w0, cc90 <mpc_pow@@Base+0xe0>
    cc78:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    cc7c:	cmp	x27, x8
    cc80:	b.ne	cd54 <mpc_pow@@Base+0x1a4>  // b.any
    cc84:	ldr	x9, [x24, #16]
    cc88:	cmp	x9, x8
    cc8c:	b.ne	ce28 <mpc_pow@@Base+0x278>  // b.any
    cc90:	sub	x0, x29, #0x88
    cc94:	mov	w1, #0x2                   	// #2
    cc98:	bl	4dc0 <mpc_init2@plt>
    cc9c:	sub	x0, x29, #0x88
    cca0:	mov	x1, x24
    cca4:	mov	w2, wzr
    cca8:	bl	4ea0 <mpc_log@plt>
    ccac:	sub	x0, x29, #0x88
    ccb0:	sub	x1, x29, #0x88
    ccb4:	mov	x2, x22
    ccb8:	mov	w3, wzr
    ccbc:	bl	4fe0 <mpc_mul@plt>
    ccc0:	sub	x1, x29, #0x88
    ccc4:	mov	x0, x19
    ccc8:	mov	w2, w26
    cccc:	bl	53b0 <mpc_exp@plt>
    ccd0:	mov	w27, w0
    ccd4:	sub	x0, x29, #0x88
    ccd8:	bl	4ae0 <mpc_clear@plt>
    ccdc:	b	ce04 <mpc_pow@@Base+0x254>
    cce0:	sub	x0, x29, #0x48
    cce4:	bl	4b70 <mpfr_init@plt>
    cce8:	sub	x0, x29, #0x48
    ccec:	mov	x1, x24
    ccf0:	mov	w2, wzr
    ccf4:	bl	4fa0 <mpc_norm@plt>
    ccf8:	mov	w20, w0
    ccfc:	sub	x0, x29, #0x48
    cd00:	mov	w1, #0x1                   	// #1
    cd04:	mov	x2, xzr
    cd08:	bl	4d80 <mpfr_cmp_ui_2exp@plt>
    cd0c:	cmp	w0, #0x0
    cd10:	ccmp	w20, #0x0, #0x4, eq  // eq = none
    cd14:	csneg	w8, w0, w20, eq  // eq = none
    cd18:	tbnz	w8, #31, cd44 <mpc_pow@@Base+0x194>
    cd1c:	cbnz	w8, cd30 <mpc_pow@@Base+0x180>
    cd20:	ldr	w9, [x24, #40]
    cd24:	ldr	w10, [x22, #8]
    cd28:	eor	w9, w10, w9
    cd2c:	tbnz	w9, #31, cd4c <mpc_pow@@Base+0x19c>
    cd30:	cmp	w8, #0x1
    cd34:	b.lt	cdc0 <mpc_pow@@Base+0x210>  // b.tstop
    cd38:	ldr	w8, [x22, #40]
    cd3c:	lsr	w20, w8, #31
    cd40:	b	cdc4 <mpc_pow@@Base+0x214>
    cd44:	ldr	w9, [x22, #40]
    cd48:	tbnz	w9, #31, cd1c <mpc_pow@@Base+0x16c>
    cd4c:	mov	w20, #0x1                   	// #1
    cd50:	b	cdc4 <mpc_pow@@Base+0x214>
    cd54:	mov	w2, #0x1                   	// #1
    cd58:	mov	x0, x24
    cd5c:	mov	x1, xzr
    cd60:	bl	5420 <mpc_cmp_si_si@plt>
    cd64:	cbz	w0, cd94 <mpc_pow@@Base+0x1e4>
    cd68:	mov	x2, #0xffffffffffffffff    	// #-1
    cd6c:	mov	x0, x24
    cd70:	mov	x1, xzr
    cd74:	bl	5420 <mpc_cmp_si_si@plt>
    cd78:	cbz	w0, cd94 <mpc_pow@@Base+0x1e4>
    cd7c:	mov	x0, x24
    cd80:	bl	5300 <mpfr_sgn@plt>
    cd84:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    cd88:	cmp	x25, x8
    cd8c:	b.ne	cec0 <mpc_pow@@Base+0x310>  // b.any
    cd90:	cbnz	w0, cec0 <mpc_pow@@Base+0x310>
    cd94:	mov	x0, x22
    cd98:	bl	4f20 <mpfr_integer_p@plt>
    cd9c:	cbz	w0, cec0 <mpc_pow@@Base+0x310>
    cda0:	mov	x0, x22
    cda4:	mov	x1, xzr
    cda8:	bl	d5dc <mpc_pow@@Base+0xa2c>
    cdac:	cmp	w0, #0x0
    cdb0:	cset	w9, ne  // ne = any
    cdb4:	cset	w8, eq  // eq = none
    cdb8:	str	w8, [sp, #108]
    cdbc:	b	cf98 <mpc_pow@@Base+0x3e8>
    cdc0:	mov	w20, wzr
    cdc4:	mov	w1, #0x1                   	// #1
    cdc8:	mov	x0, x19
    cdcc:	mov	x2, xzr
    cdd0:	mov	w3, w26
    cdd4:	bl	5150 <mpc_set_ui_ui@plt>
    cdd8:	and	w8, w26, #0xfffffff0
    cddc:	cmp	w8, #0x30
    cde0:	mov	w27, w0
    cde4:	b.eq	cdec <mpc_pow@@Base+0x23c>  // b.none
    cde8:	cbz	w20, cdfc <mpc_pow@@Base+0x24c>
    cdec:	mov	x0, x19
    cdf0:	mov	x1, x19
    cdf4:	mov	w2, wzr
    cdf8:	bl	5070 <mpc_conj@plt>
    cdfc:	sub	x0, x29, #0x48
    ce00:	bl	4e40 <mpfr_clear@plt>
    ce04:	mov	w0, w27
    ce08:	ldp	x20, x19, [sp, #368]
    ce0c:	ldp	x22, x21, [sp, #352]
    ce10:	ldp	x24, x23, [sp, #336]
    ce14:	ldp	x26, x25, [sp, #320]
    ce18:	ldp	x28, x27, [sp, #304]
    ce1c:	ldp	x29, x30, [sp, #288]
    ce20:	add	sp, sp, #0x180
    ce24:	ret
    ce28:	mov	w1, #0x1                   	// #1
    ce2c:	mov	x0, x24
    ce30:	mov	x2, xzr
    ce34:	bl	4d80 <mpfr_cmp_ui_2exp@plt>
    ce38:	cbz	w0, cf0c <mpc_pow@@Base+0x35c>
    ce3c:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    ce40:	cmp	x25, x8
    ce44:	b.ne	cf50 <mpc_pow@@Base+0x3a0>  // b.any
    ce48:	mov	x0, x22
    ce4c:	bl	4f20 <mpfr_integer_p@plt>
    ce50:	cbnz	w0, ce60 <mpc_pow@@Base+0x2b0>
    ce54:	mov	x0, x24
    ce58:	bl	5300 <mpfr_sgn@plt>
    ce5c:	tbnz	w0, #31, cf50 <mpc_pow@@Base+0x3a0>
    ce60:	ldr	w20, [x22, #8]
    ce64:	ldr	w21, [x24, #40]
    ce68:	and	w3, w26, #0xf
    ce6c:	mov	x0, x19
    ce70:	mov	x1, x24
    ce74:	mov	x2, x22
    ce78:	bl	4c60 <mpfr_pow@plt>
    ce7c:	cmp	w0, #0x0
    ce80:	mov	w8, #0x2                   	// #2
    ce84:	asr	w2, w26, #4
    ce88:	cset	w11, ne  // ne = any
    ce8c:	mov	w9, #0x1                   	// #1
    ce90:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    ce94:	csel	w27, w8, w11, lt  // lt = tstop
    ce98:	cmp	w2, #0x3
    ce9c:	str	w9, [x19, #40]
    cea0:	str	x10, [x19, #48]
    cea4:	b.eq	ceb0 <mpc_pow@@Base+0x300>  // b.none
    cea8:	eor	w8, w21, w20
    ceac:	tbz	w8, #31, ce04 <mpc_pow@@Base+0x254>
    ceb0:	add	x0, x19, #0x20
    ceb4:	mov	x1, x0
    ceb8:	bl	4c50 <mpfr_neg@plt>
    cebc:	b	ce04 <mpc_pow@@Base+0x254>
    cec0:	mov	x0, x24
    cec4:	mov	x1, x20
    cec8:	bl	54c0 <mpfr_cmpabs@plt>
    cecc:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    ced0:	cmp	x25, x8
    ced4:	mov	w9, wzr
    ced8:	b.ne	cf6c <mpc_pow@@Base+0x3bc>  // b.any
    cedc:	str	w9, [sp, #108]
    cee0:	cbnz	w0, cf98 <mpc_pow@@Base+0x3e8>
    cee4:	mov	x0, x22
    cee8:	bl	4f20 <mpfr_integer_p@plt>
    ceec:	cbz	w0, cf00 <mpc_pow@@Base+0x350>
    cef0:	mov	x0, x22
    cef4:	mov	x1, xzr
    cef8:	bl	d5dc <mpc_pow@@Base+0xa2c>
    cefc:	cbz	w0, d438 <mpc_pow@@Base+0x888>
    cf00:	mov	w9, wzr
    cf04:	str	wzr, [sp, #108]
    cf08:	b	cf98 <mpc_pow@@Base+0x3e8>
    cf0c:	ldr	w20, [x22, #8]
    cf10:	ldr	w21, [x24, #40]
    cf14:	mov	w1, #0x1                   	// #1
    cf18:	mov	x0, x19
    cf1c:	mov	w2, w26
    cf20:	bl	4db0 <mpc_set_ui@plt>
    cf24:	and	w8, w26, #0xfffffff0
    cf28:	cmp	w8, #0x30
    cf2c:	mov	w27, w0
    cf30:	b.eq	cf3c <mpc_pow@@Base+0x38c>  // b.none
    cf34:	eor	w8, w21, w20
    cf38:	tbz	w8, #31, ce04 <mpc_pow@@Base+0x254>
    cf3c:	mov	x0, x19
    cf40:	mov	x1, x19
    cf44:	mov	w2, wzr
    cf48:	bl	5070 <mpc_conj@plt>
    cf4c:	b	ce04 <mpc_pow@@Base+0x254>
    cf50:	mov	x1, #0xffffffffffffffff    	// #-1
    cf54:	mov	x0, x24
    cf58:	mov	x2, xzr
    cf5c:	bl	50f0 <mpfr_cmp_si_2exp@plt>
    cf60:	cbz	w0, cf74 <mpc_pow@@Base+0x3c4>
    cf64:	str	wzr, [sp, #108]
    cf68:	b	cf88 <mpc_pow@@Base+0x3d8>
    cf6c:	str	w9, [sp, #108]
    cf70:	b	cf98 <mpc_pow@@Base+0x3e8>
    cf74:	mov	x0, x22
    cf78:	bl	4f20 <mpfr_integer_p@plt>
    cf7c:	cmp	w0, #0x0
    cf80:	cset	w8, ne  // ne = any
    cf84:	str	w8, [sp, #108]
    cf88:	mov	x0, x24
    cf8c:	bl	5300 <mpfr_sgn@plt>
    cf90:	tbnz	w0, #31, d400 <mpc_pow@@Base+0x850>
    cf94:	mov	w9, wzr
    cf98:	str	w9, [sp, #112]
    cf9c:	str	x27, [sp]
    cfa0:	str	x25, [sp, #64]
    cfa4:	stp	w23, w21, [sp, #48]
    cfa8:	mov	x27, x19
    cfac:	ldr	x21, [x19]
    cfb0:	ldr	x23, [x27, #32]!
    cfb4:	mov	w9, #0x34                  	// #52
    cfb8:	sub	x0, x29, #0x88
    cfbc:	sub	x25, x29, #0x88
    cfc0:	cmp	x21, x23
    cfc4:	csel	x8, x21, x23, gt
    cfc8:	cmp	x8, #0x34
    cfcc:	csel	x8, x8, x9, gt
    cfd0:	add	x20, x8, #0xc
    cfd4:	mov	x1, x20
    cfd8:	bl	4dc0 <mpc_init2@plt>
    cfdc:	sub	x0, x29, #0x48
    cfe0:	mov	x1, x20
    cfe4:	bl	4dc0 <mpc_init2@plt>
    cfe8:	ldr	x10, [x24, #16]
    cfec:	and	w8, w26, #0xf
    cff0:	str	w8, [sp, #116]
    cff4:	ldr	x8, [x19]
    cff8:	ldr	x9, [x27]
    cffc:	tst	w26, #0xf
    d000:	asr	w28, w26, #4
    d004:	str	x10, [sp, #8]
    d008:	add	x10, x25, #0x20
    d00c:	str	x10, [sp, #56]
    d010:	cinc	x10, x21, eq  // eq = none
    d014:	cmp	w28, #0x0
    d018:	str	x10, [sp, #32]
    d01c:	cinc	x10, x23, eq  // eq = none
    d020:	cmp	x8, x9
    d024:	mov	x25, x27
    d028:	mov	w27, #0xfffffffe            	// #-2
    d02c:	csel	x8, x8, x9, gt
    d030:	str	w26, [sp, #28]
    d034:	str	x10, [sp, #16]
    d038:	str	x8, [sp, #40]
    d03c:	str	w28, [sp, #92]
    d040:	str	x25, [sp, #96]
    d044:	b	d06c <mpc_pow@@Base+0x4bc>
    d048:	add	x20, x20, #0x40
    d04c:	sub	x0, x29, #0x48
    d050:	mov	x1, x20
    d054:	bl	4cd0 <mpc_set_prec@plt>
    d058:	sub	x0, x29, #0x88
    d05c:	mov	x1, x20
    d060:	bl	4cd0 <mpc_set_prec@plt>
    d064:	mov	w8, wzr
    d068:	cbnz	w8, d2d8 <mpc_pow@@Base+0x728>
    d06c:	sub	x0, x29, #0x48
    d070:	mov	x1, x24
    d074:	mov	w2, wzr
    d078:	bl	4ea0 <mpc_log@plt>
    d07c:	sub	x0, x29, #0x48
    d080:	sub	x1, x29, #0x48
    d084:	mov	x2, x22
    d088:	mov	w3, wzr
    d08c:	bl	4fe0 <mpc_mul@plt>
    d090:	ldur	x8, [x29, #-56]
    d094:	ldur	x9, [x29, #-24]
    d098:	bic	x8, x8, x8, asr #63
    d09c:	cmp	x9, x8
    d0a0:	csel	x26, x9, x8, gt
    d0a4:	subs	x23, x20, x26
    d0a8:	b.le	d048 <mpc_pow@@Base+0x498>
    d0ac:	bl	4b20 <mpfr_clear_overflow@plt>
    d0b0:	bl	4f10 <mpfr_clear_underflow@plt>
    d0b4:	sub	x0, x29, #0x88
    d0b8:	sub	x1, x29, #0x48
    d0bc:	mov	w2, wzr
    d0c0:	bl	53b0 <mpc_exp@plt>
    d0c4:	mov	w21, w0
    d0c8:	bl	5400 <mpfr_underflow_p@plt>
    d0cc:	cbnz	w0, d0d8 <mpc_pow@@Base+0x528>
    d0d0:	bl	55e0 <mpfr_overflow_p@plt>
    d0d4:	cbz	w0, d180 <mpc_pow@@Base+0x5d0>
    d0d8:	sub	x1, x29, #0x88
    d0dc:	mov	x0, x19
    d0e0:	mov	w2, wzr
    d0e4:	bl	5680 <mpc_set@plt>
    d0e8:	and	w8, w21, #0x3
    d0ec:	tst	w21, #0x3
    d0f0:	asr	w9, w21, #2
    d0f4:	ldr	x10, [x19, #16]
    d0f8:	cset	w11, ne  // ne = any
    d0fc:	cmp	w8, #0x2
    d100:	csinv	w21, w11, wzr, ne  // ne = any
    d104:	cmp	w9, #0x0
    d108:	cset	w8, ne  // ne = any
    d10c:	cmp	w9, #0x2
    d110:	csinv	w27, w8, wzr, ne  // ne = any
    d114:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    d118:	cmp	x10, x8
    d11c:	b.ne	d130 <mpc_pow@@Base+0x580>  // b.any
    d120:	ldr	w1, [sp, #116]
    d124:	mov	x0, x19
    d128:	bl	4ec0 <mpc_fix_inf@plt>
    d12c:	mov	w21, w0
    d130:	ldr	x8, [x19, #48]
    d134:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    d138:	cmp	x8, x9
    d13c:	b.ne	d150 <mpc_pow@@Base+0x5a0>  // b.any
    d140:	mov	x0, x25
    d144:	mov	w1, w28
    d148:	bl	4ec0 <mpc_fix_inf@plt>
    d14c:	mov	w27, w0
    d150:	cmp	w21, #0x0
    d154:	cset	w8, ne  // ne = any
    d158:	mov	w9, #0x2                   	// #2
    d15c:	csel	w8, w9, w8, lt  // lt = tstop
    d160:	cmp	w27, #0x0
    d164:	cset	w9, ne  // ne = any
    d168:	lsl	w9, w9, #2
    d16c:	mov	w10, #0x8                   	// #8
    d170:	csel	w9, w10, w9, lt  // lt = tstop
    d174:	orr	w27, w9, w8
    d178:	mov	w8, #0x7                   	// #7
    d17c:	b	d068 <mpc_pow@@Base+0x4b8>
    d180:	ldur	x8, [x29, #-120]
    d184:	ldur	x9, [x29, #-88]
    d188:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    d18c:	cmp	x8, x10
    d190:	csel	x21, x9, x8, eq  // eq = none
    d194:	cmp	x9, x10
    d198:	csel	x28, x21, x9, eq  // eq = none
    d19c:	sub	x8, x28, x21
    d1a0:	subs	x9, x21, x28
    d1a4:	stp	x9, x8, [sp, #72]
    d1a8:	csel	x25, x9, xzr, gt
    d1ac:	ldr	w9, [sp, #112]
    d1b0:	csel	x8, xzr, x8, gt
    d1b4:	tbnz	w9, #0, d1e8 <mpc_pow@@Base+0x638>
    d1b8:	add	x9, x26, x8
    d1bc:	add	x9, x9, #0x3
    d1c0:	cmp	x20, x9
    d1c4:	b.le	d230 <mpc_pow@@Base+0x680>
    d1c8:	ldr	x4, [sp, #32]
    d1cc:	sub	x8, x23, x8
    d1d0:	sub	x1, x8, #0x3
    d1d4:	sub	x0, x29, #0x88
    d1d8:	mov	w3, #0x1                   	// #1
    d1dc:	mov	w2, wzr
    d1e0:	bl	5550 <mpfr_can_round@plt>
    d1e4:	cbz	w0, d230 <mpc_pow@@Base+0x680>
    d1e8:	ldr	w8, [sp, #108]
    d1ec:	cbz	w8, d200 <mpc_pow@@Base+0x650>
    d1f0:	ldr	w28, [sp, #92]
    d1f4:	ldr	x25, [sp, #96]
    d1f8:	mov	w8, #0x3                   	// #3
    d1fc:	b	d068 <mpc_pow@@Base+0x4b8>
    d200:	add	x8, x26, x25
    d204:	add	x8, x8, #0x3
    d208:	cmp	x20, x8
    d20c:	b.le	d230 <mpc_pow@@Base+0x680>
    d210:	ldr	x0, [sp, #56]
    d214:	ldr	x4, [sp, #16]
    d218:	sub	x8, x23, x25
    d21c:	sub	x1, x8, #0x3
    d220:	mov	w3, #0x1                   	// #1
    d224:	mov	w2, wzr
    d228:	bl	5550 <mpfr_can_round@plt>
    d22c:	cbnz	w0, d1f0 <mpc_pow@@Base+0x640>
    d230:	ldr	w8, [sp, #112]
    d234:	tbnz	w8, #0, d244 <mpc_pow@@Base+0x694>
    d238:	sub	x0, x29, #0x88
    d23c:	bl	55d0 <mpfr_number_p@plt>
    d240:	cbz	w0, d57c <mpc_pow@@Base+0x9cc>
    d244:	ldr	w8, [sp, #108]
    d248:	cbnz	w8, d258 <mpc_pow@@Base+0x6a8>
    d24c:	ldr	x0, [sp, #56]
    d250:	bl	55d0 <mpfr_number_p@plt>
    d254:	cbz	w0, d5ac <mpc_pow@@Base+0x9fc>
    d258:	ldr	x25, [sp, #96]
    d25c:	cmn	w27, #0x2
    d260:	b.ne	d2a8 <mpc_pow@@Base+0x6f8>  // b.any
    d264:	ldr	x8, [sp, #64]
    d268:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    d26c:	cmp	x8, x9
    d270:	b.ne	d2b8 <mpc_pow@@Base+0x708>  // b.any
    d274:	ldr	x4, [sp, #40]
    d278:	ldr	w3, [sp, #28]
    d27c:	mov	x0, x19
    d280:	mov	x1, x24
    d284:	lsl	x4, x4, #1
    d288:	mov	x2, x22
    d28c:	str	x4, [sp, #40]
    d290:	bl	d67c <mpc_pow@@Base+0xacc>
    d294:	mov	w27, w0
    d298:	cmn	w0, #0x2
    d29c:	b.cs	d2bc <mpc_pow@@Base+0x70c>  // b.hs, b.nlast
    d2a0:	ldr	w28, [sp, #92]
    d2a4:	b	d178 <mpc_pow@@Base+0x5c8>
    d2a8:	cmp	x20, #0x0
    d2ac:	cinc	x8, x20, lt  // lt = tstop
    d2b0:	add	x20, x20, x8, asr #1
    d2b4:	b	d2d0 <mpc_pow@@Base+0x720>
    d2b8:	mov	w27, #0xfffffffe            	// #-2
    d2bc:	ldp	x9, x8, [sp, #72]
    d2c0:	cmp	x21, x28
    d2c4:	csel	x8, x9, x8, gt
    d2c8:	add	x8, x20, x8
    d2cc:	add	x20, x8, #0x40
    d2d0:	ldr	w28, [sp, #92]
    d2d4:	b	d04c <mpc_pow@@Base+0x49c>
    d2d8:	cmp	w8, #0x7
    d2dc:	b.eq	d550 <mpc_pow@@Base+0x9a0>  // b.none
    d2e0:	cmp	w8, #0x3
    d2e4:	b.ne	d360 <mpc_pow@@Base+0x7b0>  // b.any
    d2e8:	ldr	w8, [sp, #108]
    d2ec:	cbz	w8, d364 <mpc_pow@@Base+0x7b4>
    d2f0:	ldr	w8, [x24, #40]
    d2f4:	ldr	w23, [x24, #8]
    d2f8:	add	x0, sp, #0x78
    d2fc:	lsr	w20, w8, #31
    d300:	bl	4b70 <mpfr_init@plt>
    d304:	add	x0, sp, #0x78
    d308:	mov	x1, x24
    d30c:	mov	w2, wzr
    d310:	bl	4fa0 <mpc_norm@plt>
    d314:	mov	w21, w0
    d318:	add	x0, sp, #0x78
    d31c:	mov	w1, #0x1                   	// #1
    d320:	mov	x2, xzr
    d324:	bl	4d80 <mpfr_cmp_ui_2exp@plt>
    d328:	cmp	w0, #0x0
    d32c:	ccmp	w21, #0x0, #0x4, eq  // eq = none
    d330:	csneg	w8, w0, w21, eq  // eq = none
    d334:	tbnz	w8, #31, d3d4 <mpc_pow@@Base+0x824>
    d338:	ldr	x10, [sp]
    d33c:	cbnz	w8, d34c <mpc_pow@@Base+0x79c>
    d340:	ldr	w9, [x22, #8]
    d344:	cmp	w20, w9, lsr #31
    d348:	b.ne	d3e0 <mpc_pow@@Base+0x830>  // b.any
    d34c:	cmp	w8, #0x1
    d350:	b.lt	d444 <mpc_pow@@Base+0x894>  // b.tstop
    d354:	ldr	w8, [x22, #40]
    d358:	lsr	w24, w8, #31
    d35c:	b	d448 <mpc_pow@@Base+0x898>
    d360:	b	ce04 <mpc_pow@@Base+0x254>
    d364:	ldr	x20, [sp, #64]
    d368:	ldr	w8, [sp, #112]
    d36c:	cbz	w8, d3e8 <mpc_pow@@Base+0x838>
    d370:	ldur	w3, [x29, #-96]
    d374:	sub	x8, x29, #0x88
    d378:	add	x1, x8, #0x20
    d37c:	mov	x0, x25
    d380:	mov	w2, w28
    d384:	bl	52e0 <mpfr_set4@plt>
    d388:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    d38c:	cmp	x20, x8
    d390:	mov	w20, w0
    d394:	b.ne	d530 <mpc_pow@@Base+0x980>  // b.any
    d398:	ldr	x9, [sp, #8]
    d39c:	cmp	x9, x8
    d3a0:	b.ne	d530 <mpc_pow@@Base+0x980>  // b.any
    d3a4:	ldr	w8, [x24, #8]
    d3a8:	mov	w9, #0x1                   	// #1
    d3ac:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    d3b0:	mov	x0, x19
    d3b4:	lsr	w1, w8, #31
    d3b8:	mov	w2, wzr
    d3bc:	mov	x3, x22
    d3c0:	str	w9, [x19, #8]
    d3c4:	str	x10, [x19, #16]
    d3c8:	bl	dd4c <mpc_pow@@Base+0x119c>
    d3cc:	cmp	w20, #0x0
    d3d0:	b	d540 <mpc_pow@@Base+0x990>
    d3d4:	ldr	w9, [x22, #40]
    d3d8:	tbnz	w9, #31, d338 <mpc_pow@@Base+0x788>
    d3dc:	ldr	x10, [sp]
    d3e0:	mov	w24, #0x1                   	// #1
    d3e4:	b	d448 <mpc_pow@@Base+0x898>
    d3e8:	ldr	w2, [sp, #28]
    d3ec:	sub	x1, x29, #0x88
    d3f0:	mov	x0, x19
    d3f4:	bl	5680 <mpc_set@plt>
    d3f8:	mov	w27, w0
    d3fc:	b	d550 <mpc_pow@@Base+0x9a0>
    d400:	mov	w1, #0x1                   	// #1
    d404:	mov	x0, x22
    d408:	bl	d5dc <mpc_pow@@Base+0xa2c>
    d40c:	cbz	w0, cf94 <mpc_pow@@Base+0x3e4>
    d410:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    d414:	cmp	x25, x8
    d418:	b.eq	d430 <mpc_pow@@Base+0x880>  // b.none
    d41c:	mov	x1, #0xffffffffffffffff    	// #-1
    d420:	mov	x0, x24
    d424:	mov	x2, xzr
    d428:	bl	50f0 <mpfr_cmp_si_2exp@plt>
    d42c:	cbnz	w0, cf94 <mpc_pow@@Base+0x3e4>
    d430:	mov	w9, #0x1                   	// #1
    d434:	b	cf98 <mpc_pow@@Base+0x3e8>
    d438:	mov	x1, #0xffffffffffffffff    	// #-1
    d43c:	mov	x0, x22
    d440:	b	cda8 <mpc_pow@@Base+0x1f8>
    d444:	mov	w24, wzr
    d448:	ldr	x8, [sp, #8]
    d44c:	ldr	x1, [x22]
    d450:	mov	x25, #0x8000000000000001    	// #-9223372036854775807
    d454:	add	x0, sp, #0x78
    d458:	cmp	x8, x25
    d45c:	cset	w26, eq  // eq = none
    d460:	cmp	x10, x25
    d464:	cset	w27, eq  // eq = none
    d468:	bl	4d50 <mpfr_set_prec@plt>
    d46c:	ldr	w3, [x22, #8]
    d470:	add	x0, sp, #0x78
    d474:	mov	x1, x22
    d478:	mov	w2, wzr
    d47c:	bl	52e0 <mpfr_set4@plt>
    d480:	ldur	w3, [x29, #-128]
    d484:	ldr	w2, [sp, #116]
    d488:	sub	x1, x29, #0x88
    d48c:	mov	x0, x19
    d490:	bl	52e0 <mpfr_set4@plt>
    d494:	ldr	x8, [sp, #64]
    d498:	mov	w21, w0
    d49c:	cmp	x8, x25
    d4a0:	b.ne	d4e4 <mpc_pow@@Base+0x934>  // b.any
    d4a4:	orr	w8, w27, w26
    d4a8:	cbz	w8, d4e4 <mpc_pow@@Base+0x934>
    d4ac:	lsr	w1, w23, #31
    d4b0:	mov	w8, #0x1                   	// #1
    d4b4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    d4b8:	add	x3, sp, #0x78
    d4bc:	mov	x0, x19
    d4c0:	mov	w2, w20
    d4c4:	str	w8, [x19, #40]
    d4c8:	str	x9, [x19, #48]
    d4cc:	bl	dd4c <mpc_pow@@Base+0x119c>
    d4d0:	cmp	w21, #0x0
    d4d4:	cset	w8, ne  // ne = any
    d4d8:	mov	w9, #0x2                   	// #2
    d4dc:	csel	w27, w9, w8, lt  // lt = tstop
    d4e0:	b	d524 <mpc_pow@@Base+0x974>
    d4e4:	cmp	w21, #0x0
    d4e8:	mov	w8, #0x2                   	// #2
    d4ec:	cset	w10, ne  // ne = any
    d4f0:	mov	w9, #0x1                   	// #1
    d4f4:	csel	w27, w8, w10, lt  // lt = tstop
    d4f8:	cmp	w28, #0x3
    d4fc:	str	w9, [x19, #40]
    d500:	cset	w8, ne  // ne = any
    d504:	eor	w9, w24, #0x1
    d508:	and	w8, w8, w9
    d50c:	str	x25, [x19, #48]
    d510:	tbnz	w8, #0, d524 <mpc_pow@@Base+0x974>
    d514:	mov	x0, x19
    d518:	mov	x1, x19
    d51c:	mov	w2, wzr
    d520:	bl	5070 <mpc_conj@plt>
    d524:	add	x0, sp, #0x78
    d528:	bl	4e40 <mpfr_clear@plt>
    d52c:	b	d550 <mpc_pow@@Base+0x9a0>
    d530:	mov	w9, #0x1                   	// #1
    d534:	cmp	w20, #0x0
    d538:	str	x8, [x19, #16]
    d53c:	str	w9, [x19, #8]
    d540:	cset	w8, ne  // ne = any
    d544:	lsl	w8, w8, #2
    d548:	mov	w9, #0x8                   	// #8
    d54c:	csel	w27, w9, w8, lt  // lt = tstop
    d550:	sub	x0, x29, #0x48
    d554:	bl	4ae0 <mpc_clear@plt>
    d558:	sub	x0, x29, #0x88
    d55c:	bl	4ae0 <mpc_clear@plt>
    d560:	ldr	w8, [sp, #52]
    d564:	cbz	w8, d56c <mpc_pow@@Base+0x9bc>
    d568:	bl	4a60 <mpfr_set_underflow@plt>
    d56c:	ldr	w8, [sp, #48]
    d570:	cbz	w8, ce04 <mpc_pow@@Base+0x254>
    d574:	bl	5590 <mpfr_set_overflow@plt>
    d578:	b	ce04 <mpc_pow@@Base+0x254>
    d57c:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    d580:	ldr	x8, [x8, #4008]
    d584:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    d588:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    d58c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    d590:	ldr	x0, [x8]
    d594:	add	x1, x1, #0xba0
    d598:	add	x2, x2, #0xd99
    d59c:	add	x4, x4, #0xd9f
    d5a0:	mov	w3, #0x2d6                 	// #726
    d5a4:	bl	56a0 <fprintf@plt>
    d5a8:	bl	5110 <abort@plt>
    d5ac:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    d5b0:	ldr	x8, [x8, #4008]
    d5b4:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    d5b8:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    d5bc:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    d5c0:	ldr	x0, [x8]
    d5c4:	add	x1, x1, #0xba0
    d5c8:	add	x2, x2, #0xd99
    d5cc:	add	x4, x4, #0xdc8
    d5d0:	mov	w3, #0x2d8                 	// #728
    d5d4:	bl	56a0 <fprintf@plt>
    d5d8:	bl	5110 <abort@plt>
    d5dc:	ldr	x8, [x0, #16]
    d5e0:	add	x10, x8, x1
    d5e4:	cmp	x10, #0x1
    d5e8:	b.lt	d66c <mpc_pow@@Base+0xabc>  // b.tstop
    d5ec:	ldr	x8, [x0]
    d5f0:	cmp	x10, x8
    d5f4:	b.gt	d66c <mpc_pow@@Base+0xabc>
    d5f8:	adrp	x9, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    d5fc:	ldr	x9, [x9, #4056]
    d600:	sub	x8, x8, #0x1
    d604:	neg	x12, x10
    d608:	ldrsw	x11, [x9]
    d60c:	ldr	x9, [x0, #24]
    d610:	sdiv	x8, x8, x11
    d614:	add	x8, x8, #0x1
    d618:	madd	x8, x8, x11, x12
    d61c:	sdiv	x8, x8, x11
    d620:	ldr	x12, [x9, x8, lsl #3]
    d624:	sdiv	x13, x10, x11
    d628:	msub	x10, x13, x11, x10
    d62c:	cbz	x10, d650 <mpc_pow@@Base+0xaa0>
    d630:	sub	x10, x10, #0x1
    d634:	sub	w11, w11, #0x1
    d638:	mov	w13, #0x1                   	// #1
    d63c:	lsl	x10, x12, x10
    d640:	lsl	x11, x13, x11
    d644:	cmp	x10, x11
    d648:	b.eq	d654 <mpc_pow@@Base+0xaa4>  // b.none
    d64c:	b	d66c <mpc_pow@@Base+0xabc>
    d650:	tbz	w12, #0, d66c <mpc_pow@@Base+0xabc>
    d654:	sub	x9, x9, #0x8
    d658:	subs	x10, x8, #0x1
    d65c:	b.lt	d674 <mpc_pow@@Base+0xac4>  // b.tstop
    d660:	ldr	x11, [x9, x8, lsl #3]
    d664:	mov	x8, x10
    d668:	cbz	x11, d658 <mpc_pow@@Base+0xaa8>
    d66c:	mov	w0, wzr
    d670:	ret
    d674:	mov	w0, #0x1                   	// #1
    d678:	ret
    d67c:	sub	sp, sp, #0x100
    d680:	stp	x29, x30, [sp, #160]
    d684:	stp	x28, x27, [sp, #176]
    d688:	stp	x26, x25, [sp, #192]
    d68c:	stp	x24, x23, [sp, #208]
    d690:	stp	x22, x21, [sp, #224]
    d694:	stp	x20, x19, [sp, #240]
    d698:	ldr	w8, [x1, #8]
    d69c:	ldr	w9, [x1, #40]
    d6a0:	ldr	x28, [x1, #16]
    d6a4:	mov	x23, x4
    d6a8:	mov	x19, x2
    d6ac:	mov	x25, x1
    d6b0:	mov	x20, x0
    d6b4:	cmp	x0, x2
    d6b8:	add	x10, x0, #0x20
    d6bc:	add	x29, sp, #0xa0
    d6c0:	stp	w9, w8, [sp, #20]
    d6c4:	str	x10, [sp, #8]
    d6c8:	str	w3, [sp, #4]
    d6cc:	b.eq	d6e0 <mpc_pow@@Base+0xb30>  // b.none
    d6d0:	cmp	x10, x19
    d6d4:	b.eq	d6e0 <mpc_pow@@Base+0xb30>  // b.none
    d6d8:	str	wzr, [sp, #28]
    d6dc:	b	d708 <mpc_pow@@Base+0xb58>
    d6e0:	ldr	x1, [x19]
    d6e4:	add	x0, sp, #0x20
    d6e8:	bl	5540 <mpfr_init2@plt>
    d6ec:	ldr	w3, [x19, #8]
    d6f0:	add	x0, sp, #0x20
    d6f4:	mov	x1, x19
    d6f8:	mov	w2, wzr
    d6fc:	bl	52e0 <mpfr_set4@plt>
    d700:	mov	w8, #0x1                   	// #1
    d704:	str	w8, [sp, #28]
    d708:	sub	x0, x29, #0x10
    d70c:	bl	55a0 <__gmpz_init@plt>
    d710:	sub	x0, x29, #0x20
    d714:	bl	55a0 <__gmpz_init@plt>
    d718:	sub	x0, x29, #0x30
    d71c:	bl	55a0 <__gmpz_init@plt>
    d720:	sub	x0, x29, #0x40
    d724:	bl	55a0 <__gmpz_init@plt>
    d728:	add	x0, sp, #0x50
    d72c:	bl	55a0 <__gmpz_init@plt>
    d730:	add	x0, sp, #0x40
    d734:	bl	55a0 <__gmpz_init@plt>
    d738:	sub	x0, x29, #0x10
    d73c:	mov	x1, x19
    d740:	bl	5570 <mpfr_get_z_2exp@plt>
    d744:	mov	x24, x0
    d748:	sub	x0, x29, #0x10
    d74c:	mov	x1, xzr
    d750:	bl	4ac0 <__gmpz_scan1@plt>
    d754:	mov	x26, x0
    d758:	sub	x0, x29, #0x10
    d75c:	sub	x1, x29, #0x10
    d760:	mov	x2, x26
    d764:	bl	5330 <__gmpz_tdiv_q_2exp@plt>
    d768:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    d76c:	sub	x0, x29, #0x40
    d770:	cmp	x28, x8
    d774:	b.ne	d788 <mpc_pow@@Base+0xbd8>  // b.any
    d778:	mov	x1, xzr
    d77c:	bl	4be0 <__gmpz_set_ui@plt>
    d780:	mov	x27, xzr
    d784:	b	d794 <mpc_pow@@Base+0xbe4>
    d788:	mov	x1, x25
    d78c:	bl	5570 <mpfr_get_z_2exp@plt>
    d790:	mov	x27, x0
    d794:	ldr	x8, [x25, #48]
    d798:	mov	x22, #0x8000000000000001    	// #-9223372036854775807
    d79c:	cmp	x8, x22
    d7a0:	b.ne	d7ec <mpc_pow@@Base+0xc3c>  // b.any
    d7a4:	add	x0, sp, #0x50
    d7a8:	mov	x1, xzr
    d7ac:	bl	4be0 <__gmpz_set_ui@plt>
    d7b0:	mov	x22, x27
    d7b4:	subs	x2, x22, x27
    d7b8:	b.lt	d80c <mpc_pow@@Base+0xc5c>  // b.tstop
    d7bc:	cmp	x27, x22
    d7c0:	b.ge	d838 <mpc_pow@@Base+0xc88>  // b.tcont
    d7c4:	sub	x0, x29, #0x40
    d7c8:	sub	x1, x29, #0x40
    d7cc:	bl	4f90 <__gmpz_mul_2exp@plt>
    d7d0:	sub	x0, x29, #0x40
    d7d4:	mov	w1, #0x2                   	// #2
    d7d8:	bl	55b0 <__gmpz_sizeinbase@plt>
    d7dc:	cmp	x0, x23
    d7e0:	mov	x22, x27
    d7e4:	b.gt	d830 <mpc_pow@@Base+0xc80>
    d7e8:	b	d838 <mpc_pow@@Base+0xc88>
    d7ec:	add	x1, x25, #0x20
    d7f0:	add	x0, sp, #0x50
    d7f4:	bl	5570 <mpfr_get_z_2exp@plt>
    d7f8:	cmp	x28, x22
    d7fc:	csel	x22, x0, x27, eq  // eq = none
    d800:	mov	x27, x0
    d804:	subs	x2, x22, x27
    d808:	b.ge	d7bc <mpc_pow@@Base+0xc0c>  // b.tcont
    d80c:	sub	x2, x27, x22
    d810:	add	x0, sp, #0x50
    d814:	add	x1, sp, #0x50
    d818:	bl	4f90 <__gmpz_mul_2exp@plt>
    d81c:	add	x0, sp, #0x50
    d820:	mov	w1, #0x2                   	// #2
    d824:	bl	55b0 <__gmpz_sizeinbase@plt>
    d828:	cmp	x0, x23
    d82c:	b.le	d838 <mpc_pow@@Base+0xc88>
    d830:	mov	w22, #0xfffffffe            	// #-2
    d834:	b	d944 <mpc_pow@@Base+0xd94>
    d838:	ldur	w8, [x29, #-60]
    d83c:	add	x25, x26, x24
    d840:	cbz	w8, d884 <mpc_pow@@Base+0xcd4>
    d844:	ldr	w26, [sp, #84]
    d848:	sub	x0, x29, #0x40
    d84c:	mov	x1, xzr
    d850:	bl	4ac0 <__gmpz_scan1@plt>
    d854:	mov	x24, x0
    d858:	cbz	w26, d8a0 <mpc_pow@@Base+0xcf0>
    d85c:	add	x0, sp, #0x50
    d860:	mov	x1, xzr
    d864:	bl	4ac0 <__gmpz_scan1@plt>
    d868:	cmp	x0, x24
    d86c:	csel	x24, x0, x24, cc  // cc = lo, ul, last
    d870:	sub	x0, x29, #0x40
    d874:	sub	x1, x29, #0x40
    d878:	mov	x2, x24
    d87c:	bl	5330 <__gmpz_tdiv_q_2exp@plt>
    d880:	b	d894 <mpc_pow@@Base+0xce4>
    d884:	add	x0, sp, #0x50
    d888:	mov	x1, xzr
    d88c:	bl	4ac0 <__gmpz_scan1@plt>
    d890:	mov	x24, x0
    d894:	add	x0, sp, #0x50
    d898:	add	x1, sp, #0x50
    d89c:	b	d8a8 <mpc_pow@@Base+0xcf8>
    d8a0:	sub	x0, x29, #0x40
    d8a4:	sub	x1, x29, #0x40
    d8a8:	mov	x2, x24
    d8ac:	bl	5330 <__gmpz_tdiv_q_2exp@plt>
    d8b0:	add	x26, x24, x22
    d8b4:	lsr	x22, x25, #63
    d8b8:	tbz	x25, #63, d938 <mpc_pow@@Base+0xd88>
    d8bc:	b	d8f8 <mpc_pow@@Base+0xd48>
    d8c0:	sub	x0, x29, #0x20
    d8c4:	sub	x1, x29, #0x40
    d8c8:	bl	4e90 <__gmpz_swap@plt>
    d8cc:	sub	x0, x29, #0x30
    d8d0:	add	x1, sp, #0x50
    d8d4:	bl	4e90 <__gmpz_swap@plt>
    d8d8:	cmp	x26, #0x0
    d8dc:	add	x27, x25, #0x1
    d8e0:	cinc	x8, x26, lt  // lt = tstop
    d8e4:	cmn	x25, #0x1
    d8e8:	asr	x26, x8, #1
    d8ec:	cset	w22, lt  // lt = tstop
    d8f0:	mov	x25, x27
    d8f4:	b.ge	d93c <mpc_pow@@Base+0xd8c>  // b.tcont
    d8f8:	tbz	w26, #0, d920 <mpc_pow@@Base+0xd70>
    d8fc:	sub	x0, x29, #0x40
    d900:	sub	x1, x29, #0x40
    d904:	mov	w2, #0x1                   	// #1
    d908:	bl	4f90 <__gmpz_mul_2exp@plt>
    d90c:	add	x0, sp, #0x50
    d910:	add	x1, sp, #0x50
    d914:	mov	w2, #0x1                   	// #1
    d918:	bl	4f90 <__gmpz_mul_2exp@plt>
    d91c:	sub	x26, x26, #0x1
    d920:	sub	x0, x29, #0x20
    d924:	sub	x1, x29, #0x30
    d928:	sub	x2, x29, #0x40
    d92c:	add	x3, sp, #0x50
    d930:	bl	df30 <mpc_pow@@Base+0x1380>
    d934:	cbnz	w0, d8c0 <mpc_pow@@Base+0xd10>
    d938:	mov	x27, x25
    d93c:	tbz	w22, #0, d9dc <mpc_pow@@Base+0xe2c>
    d940:	mov	w22, #0xffffffff            	// #-1
    d944:	ldr	w21, [sp, #28]
    d948:	sub	x0, x29, #0x10
    d94c:	bl	5290 <__gmpz_clear@plt>
    d950:	sub	x0, x29, #0x20
    d954:	bl	5290 <__gmpz_clear@plt>
    d958:	sub	x0, x29, #0x30
    d95c:	bl	5290 <__gmpz_clear@plt>
    d960:	sub	x0, x29, #0x40
    d964:	bl	5290 <__gmpz_clear@plt>
    d968:	add	x0, sp, #0x50
    d96c:	bl	5290 <__gmpz_clear@plt>
    d970:	add	x0, sp, #0x40
    d974:	bl	5290 <__gmpz_clear@plt>
    d978:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    d97c:	cmp	x28, x8
    d980:	b.ne	d9ac <mpc_pow@@Base+0xdfc>  // b.any
    d984:	tbnz	w22, #31, d9ac <mpc_pow@@Base+0xdfc>
    d988:	ldr	w8, [sp, #24]
    d98c:	cmp	w21, #0x0
    d990:	mov	x0, x20
    d994:	lsr	w1, w8, #31
    d998:	ldr	w8, [sp, #20]
    d99c:	lsr	w2, w8, #31
    d9a0:	add	x8, sp, #0x20
    d9a4:	csel	x3, x19, x8, eq  // eq = none
    d9a8:	bl	dd4c <mpc_pow@@Base+0x119c>
    d9ac:	cbz	w21, d9b8 <mpc_pow@@Base+0xe08>
    d9b0:	add	x0, sp, #0x20
    d9b4:	bl	4e40 <mpfr_clear@plt>
    d9b8:	mov	w0, w22
    d9bc:	ldp	x20, x19, [sp, #240]
    d9c0:	ldp	x22, x21, [sp, #224]
    d9c4:	ldp	x24, x23, [sp, #208]
    d9c8:	ldp	x26, x25, [sp, #192]
    d9cc:	ldp	x28, x27, [sp, #176]
    d9d0:	ldp	x29, x30, [sp, #160]
    d9d4:	add	sp, sp, #0x100
    d9d8:	ret
    d9dc:	ldur	w8, [x29, #-12]
    d9e0:	tbz	w8, #31, da4c <mpc_pow@@Base+0xe9c>
    d9e4:	sub	x0, x29, #0x20
    d9e8:	sub	x1, x29, #0x40
    d9ec:	sub	x2, x29, #0x40
    d9f0:	bl	4e10 <__gmpz_mul@plt>
    d9f4:	sub	x0, x29, #0x20
    d9f8:	add	x1, sp, #0x50
    d9fc:	add	x2, sp, #0x50
    da00:	bl	5020 <__gmpz_addmul@plt>
    da04:	sub	x0, x29, #0x20
    da08:	mov	x1, xzr
    da0c:	bl	4ac0 <__gmpz_scan1@plt>
    da10:	mov	x24, x0
    da14:	sub	x0, x29, #0x20
    da18:	mov	w1, #0x2                   	// #2
    da1c:	bl	55b0 <__gmpz_sizeinbase@plt>
    da20:	add	x8, x24, #0x1
    da24:	cmp	x0, x8
    da28:	b.ne	d940 <mpc_pow@@Base+0xd90>  // b.any
    da2c:	add	x0, sp, #0x50
    da30:	add	x1, sp, #0x50
    da34:	bl	4e30 <__gmpz_neg@plt>
    da38:	add	x8, x24, x26
    da3c:	sub	x0, x29, #0x10
    da40:	sub	x1, x29, #0x10
    da44:	neg	x26, x8
    da48:	bl	4e30 <__gmpz_neg@plt>
    da4c:	sub	x0, x29, #0x10
    da50:	mov	w1, #0x2                   	// #2
    da54:	bl	55b0 <__gmpz_sizeinbase@plt>
    da58:	mov	x24, x0
    da5c:	sub	x0, x29, #0x20
    da60:	sub	x1, x29, #0x40
    da64:	bl	4dd0 <__gmpz_set@plt>
    da68:	sub	x0, x29, #0x30
    da6c:	add	x1, sp, #0x50
    da70:	bl	4dd0 <__gmpz_set@plt>
    da74:	sub	x25, x24, #0x2
    da78:	mov	x24, x26
    da7c:	b	da88 <mpc_pow@@Base+0xed8>
    da80:	sub	x25, x25, #0x1
    da84:	cbnz	w22, d830 <mpc_pow@@Base+0xc80>
    da88:	cmn	x25, #0x1
    da8c:	b.eq	dbe0 <mpc_pow@@Base+0x1030>  // b.none
    da90:	add	x0, sp, #0x40
    da94:	sub	x1, x29, #0x20
    da98:	sub	x2, x29, #0x30
    da9c:	bl	4e10 <__gmpz_mul@plt>
    daa0:	sub	x0, x29, #0x20
    daa4:	sub	x1, x29, #0x20
    daa8:	sub	x2, x29, #0x20
    daac:	bl	4e10 <__gmpz_mul@plt>
    dab0:	sub	x0, x29, #0x20
    dab4:	sub	x1, x29, #0x30
    dab8:	sub	x2, x29, #0x30
    dabc:	bl	53e0 <__gmpz_submul@plt>
    dac0:	sub	x0, x29, #0x30
    dac4:	add	x1, sp, #0x40
    dac8:	mov	w2, #0x1                   	// #1
    dacc:	bl	4f90 <__gmpz_mul_2exp@plt>
    dad0:	sub	x0, x29, #0x10
    dad4:	mov	x1, x25
    dad8:	lsl	x22, x24, #1
    dadc:	bl	4e00 <__gmpz_tstbit@plt>
    dae0:	cbz	w0, db34 <mpc_pow@@Base+0xf84>
    dae4:	add	x0, sp, #0x40
    dae8:	sub	x1, x29, #0x20
    daec:	sub	x2, x29, #0x40
    daf0:	bl	4e10 <__gmpz_mul@plt>
    daf4:	add	x0, sp, #0x40
    daf8:	sub	x1, x29, #0x30
    dafc:	add	x2, sp, #0x50
    db00:	bl	53e0 <__gmpz_submul@plt>
    db04:	sub	x0, x29, #0x30
    db08:	sub	x1, x29, #0x30
    db0c:	sub	x2, x29, #0x40
    db10:	bl	4e10 <__gmpz_mul@plt>
    db14:	sub	x0, x29, #0x30
    db18:	sub	x1, x29, #0x20
    db1c:	add	x2, sp, #0x50
    db20:	bl	5020 <__gmpz_addmul@plt>
    db24:	sub	x0, x29, #0x20
    db28:	add	x1, sp, #0x40
    db2c:	bl	4e90 <__gmpz_swap@plt>
    db30:	add	x22, x22, x26
    db34:	ldur	w8, [x29, #-28]
    db38:	cbz	w8, db7c <mpc_pow@@Base+0xfcc>
    db3c:	ldur	w21, [x29, #-44]
    db40:	sub	x0, x29, #0x20
    db44:	mov	x1, xzr
    db48:	bl	4ac0 <__gmpz_scan1@plt>
    db4c:	mov	x24, x0
    db50:	cbz	w21, db98 <mpc_pow@@Base+0xfe8>
    db54:	sub	x0, x29, #0x30
    db58:	mov	x1, xzr
    db5c:	bl	4ac0 <__gmpz_scan1@plt>
    db60:	cmp	x0, x24
    db64:	csel	x24, x0, x24, cc  // cc = lo, ul, last
    db68:	sub	x0, x29, #0x20
    db6c:	sub	x1, x29, #0x20
    db70:	mov	x2, x24
    db74:	bl	5330 <__gmpz_tdiv_q_2exp@plt>
    db78:	b	db8c <mpc_pow@@Base+0xfdc>
    db7c:	sub	x0, x29, #0x30
    db80:	mov	x1, xzr
    db84:	bl	4ac0 <__gmpz_scan1@plt>
    db88:	mov	x24, x0
    db8c:	sub	x0, x29, #0x30
    db90:	sub	x1, x29, #0x30
    db94:	b	dba0 <mpc_pow@@Base+0xff0>
    db98:	sub	x0, x29, #0x20
    db9c:	sub	x1, x29, #0x20
    dba0:	mov	x2, x24
    dba4:	bl	5330 <__gmpz_tdiv_q_2exp@plt>
    dba8:	sub	x0, x29, #0x20
    dbac:	mov	w1, #0x2                   	// #2
    dbb0:	add	x24, x24, x22
    dbb4:	mov	w22, #0x2                   	// #2
    dbb8:	bl	55b0 <__gmpz_sizeinbase@plt>
    dbbc:	cmp	x0, x23
    dbc0:	b.gt	da80 <mpc_pow@@Base+0xed0>
    dbc4:	sub	x0, x29, #0x30
    dbc8:	mov	w1, #0x2                   	// #2
    dbcc:	bl	55b0 <__gmpz_sizeinbase@plt>
    dbd0:	cmp	x0, x23
    dbd4:	cset	w8, gt
    dbd8:	lsl	w22, w8, #1
    dbdc:	b	da80 <mpc_pow@@Base+0xed0>
    dbe0:	ldr	x21, [sp, #8]
    dbe4:	add	x22, x27, #0x1
    dbe8:	b	dbf0 <mpc_pow@@Base+0x1040>
    dbec:	cbnz	w25, d830 <mpc_pow@@Base+0xc80>
    dbf0:	sub	x22, x22, #0x1
    dbf4:	cmp	x22, #0x1
    dbf8:	b.lt	dcb8 <mpc_pow@@Base+0x1108>  // b.tstop
    dbfc:	add	x0, sp, #0x40
    dc00:	sub	x1, x29, #0x20
    dc04:	sub	x2, x29, #0x30
    dc08:	bl	4e10 <__gmpz_mul@plt>
    dc0c:	sub	x0, x29, #0x20
    dc10:	sub	x1, x29, #0x20
    dc14:	sub	x2, x29, #0x20
    dc18:	bl	4e10 <__gmpz_mul@plt>
    dc1c:	sub	x0, x29, #0x20
    dc20:	sub	x1, x29, #0x30
    dc24:	sub	x2, x29, #0x30
    dc28:	bl	53e0 <__gmpz_submul@plt>
    dc2c:	sub	x0, x29, #0x30
    dc30:	add	x1, sp, #0x40
    dc34:	mov	w2, #0x1                   	// #1
    dc38:	bl	4f90 <__gmpz_mul_2exp@plt>
    dc3c:	sub	x0, x29, #0x20
    dc40:	mov	x1, xzr
    dc44:	bl	4ac0 <__gmpz_scan1@plt>
    dc48:	mov	x25, x0
    dc4c:	sub	x0, x29, #0x30
    dc50:	mov	x1, xzr
    dc54:	bl	4ac0 <__gmpz_scan1@plt>
    dc58:	cmp	x25, x0
    dc5c:	csel	x25, x0, x25, hi  // hi = pmore
    dc60:	sub	x0, x29, #0x20
    dc64:	sub	x1, x29, #0x20
    dc68:	mov	x2, x25
    dc6c:	bl	5330 <__gmpz_tdiv_q_2exp@plt>
    dc70:	sub	x0, x29, #0x30
    dc74:	sub	x1, x29, #0x30
    dc78:	mov	x2, x25
    dc7c:	bl	5330 <__gmpz_tdiv_q_2exp@plt>
    dc80:	sub	x0, x29, #0x20
    dc84:	mov	w1, #0x2                   	// #2
    dc88:	add	x24, x25, x24, lsl #1
    dc8c:	mov	w25, #0x2                   	// #2
    dc90:	bl	55b0 <__gmpz_sizeinbase@plt>
    dc94:	cmp	x0, x23
    dc98:	b.gt	dbec <mpc_pow@@Base+0x103c>
    dc9c:	sub	x0, x29, #0x30
    dca0:	mov	w1, #0x2                   	// #2
    dca4:	bl	55b0 <__gmpz_sizeinbase@plt>
    dca8:	cmp	x0, x23
    dcac:	cset	w8, gt
    dcb0:	lsl	w25, w8, #1
    dcb4:	b	dbec <mpc_pow@@Base+0x103c>
    dcb8:	ldr	w25, [sp, #4]
    dcbc:	sub	x1, x29, #0x20
    dcc0:	mov	x0, x20
    dcc4:	and	w23, w25, #0xf
    dcc8:	mov	w2, w23
    dccc:	bl	4fc0 <mpfr_set_z@plt>
    dcd0:	cmp	w0, #0x0
    dcd4:	asr	w25, w25, #4
    dcd8:	mov	w8, #0x2                   	// #2
    dcdc:	cset	w9, ne  // ne = any
    dce0:	sub	x1, x29, #0x30
    dce4:	mov	x0, x21
    dce8:	mov	w2, w25
    dcec:	csel	w22, w8, w9, lt  // lt = tstop
    dcf0:	bl	4fc0 <mpfr_set_z@plt>
    dcf4:	tbnz	w0, #31, dd18 <mpc_pow@@Base+0x1168>
    dcf8:	sub	x1, x29, #0x30
    dcfc:	mov	x0, x21
    dd00:	mov	w2, w25
    dd04:	bl	4fc0 <mpfr_set_z@plt>
    dd08:	cmp	w0, #0x0
    dd0c:	cset	w8, ne  // ne = any
    dd10:	lsl	w8, w8, #2
    dd14:	b	dd1c <mpc_pow@@Base+0x116c>
    dd18:	mov	w8, #0x8                   	// #8
    dd1c:	mov	x0, x20
    dd20:	mov	x1, x20
    dd24:	mov	x2, x24
    dd28:	mov	w3, w23
    dd2c:	orr	w22, w8, w22
    dd30:	bl	4b40 <mpfr_mul_2si@plt>
    dd34:	mov	x0, x21
    dd38:	mov	x1, x21
    dd3c:	mov	x2, x24
    dd40:	mov	w3, w25
    dd44:	bl	4b40 <mpfr_mul_2si@plt>
    dd48:	b	d944 <mpc_pow@@Base+0xd94>
    dd4c:	sub	sp, sp, #0x40
    dd50:	stp	x20, x19, [sp, #48]
    dd54:	mov	x19, x0
    dd58:	mov	x0, sp
    dd5c:	stp	x29, x30, [sp, #16]
    dd60:	stp	x22, x21, [sp, #32]
    dd64:	add	x29, sp, #0x10
    dd68:	mov	x22, x3
    dd6c:	mov	w21, w2
    dd70:	mov	w20, w1
    dd74:	bl	55a0 <__gmpz_init@plt>
    dd78:	mov	x0, sp
    dd7c:	mov	x1, x22
    dd80:	bl	5570 <mpfr_get_z_2exp@plt>
    dd84:	mov	x22, x0
    dd88:	mov	x0, sp
    dd8c:	mov	x1, xzr
    dd90:	bl	4ac0 <__gmpz_scan1@plt>
    dd94:	mov	x2, x0
    dd98:	add	x22, x0, x22
    dd9c:	mov	x0, sp
    dda0:	mov	x1, sp
    dda4:	bl	5330 <__gmpz_tdiv_q_2exp@plt>
    dda8:	cmp	x22, #0x1
    ddac:	b.le	ddb8 <mpc_pow@@Base+0x1208>
    ddb0:	mov	w8, wzr
    ddb4:	b	de0c <mpc_pow@@Base+0x125c>
    ddb8:	cbz	x22, ddd8 <mpc_pow@@Base+0x1228>
    ddbc:	cmp	x22, #0x1
    ddc0:	b.ne	deb4 <mpc_pow@@Base+0x1304>  // b.any
    ddc4:	mov	x0, sp
    ddc8:	mov	x1, xzr
    ddcc:	bl	4e00 <__gmpz_tstbit@plt>
    ddd0:	lsl	w8, w0, #1
    ddd4:	b	de0c <mpc_pow@@Base+0x125c>
    ddd8:	mov	x0, sp
    dddc:	mov	w1, #0x1                   	// #1
    dde0:	bl	4e00 <__gmpz_tstbit@plt>
    dde4:	mov	w22, w0
    dde8:	mov	x0, sp
    ddec:	mov	x1, xzr
    ddf0:	bl	4e00 <__gmpz_tstbit@plt>
    ddf4:	ldr	w8, [sp, #4]
    ddf8:	add	w9, w0, w22, lsl #1
    ddfc:	mov	w10, #0x4                   	// #4
    de00:	sub	w10, w10, w9
    de04:	cmp	w8, #0x0
    de08:	csel	w8, w10, w9, lt  // lt = tstop
    de0c:	ldr	x10, [x19, #16]
    de10:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    de14:	cmp	x10, x9
    de18:	b.ne	de68 <mpc_pow@@Base+0x12b8>  // b.any
    de1c:	orr	w9, w8, #0x2
    de20:	cmp	w9, #0x3
    de24:	b.ne	ded0 <mpc_pow@@Base+0x1320>  // b.any
    de28:	cmp	w8, #0x1
    de2c:	cset	w9, eq  // eq = none
    de30:	cmp	w8, #0x3
    de34:	cset	w8, eq  // eq = none
    de38:	cmp	w20, #0x0
    de3c:	cset	w10, eq  // eq = none
    de40:	cmp	w20, #0x1
    de44:	and	w10, w10, w8
    de48:	cset	w8, eq  // eq = none
    de4c:	tbnz	w10, #0, de58 <mpc_pow@@Base+0x12a8>
    de50:	and	w8, w8, w9
    de54:	cbz	w8, deb4 <mpc_pow@@Base+0x1304>
    de58:	mov	w2, #0x1                   	// #1
    de5c:	mov	x0, x19
    de60:	mov	x1, x19
    de64:	b	deb0 <mpc_pow@@Base+0x1300>
    de68:	ldr	x10, [x19, #48]
    de6c:	cmp	x10, x9
    de70:	b.ne	deb4 <mpc_pow@@Base+0x1304>  // b.any
    de74:	tst	w8, #0xfffffffd
    de78:	b.ne	df00 <mpc_pow@@Base+0x1350>  // b.any
    de7c:	cmp	w8, #0x2
    de80:	cset	w9, ne  // ne = any
    de84:	cmp	w8, #0x0
    de88:	cset	w8, eq  // eq = none
    de8c:	cmp	w21, w20
    de90:	cset	w10, eq  // eq = none
    de94:	and	w8, w10, w8
    de98:	orr	w9, w10, w9
    de9c:	cmp	w8, w9
    dea0:	b.ne	deb4 <mpc_pow@@Base+0x1304>  // b.any
    dea4:	add	x0, x19, #0x20
    dea8:	mov	w2, #0x1                   	// #1
    deac:	mov	x1, x0
    deb0:	bl	4c50 <mpfr_neg@plt>
    deb4:	mov	x0, sp
    deb8:	bl	5290 <__gmpz_clear@plt>
    debc:	ldp	x20, x19, [sp, #48]
    dec0:	ldp	x22, x21, [sp, #32]
    dec4:	ldp	x29, x30, [sp, #16]
    dec8:	add	sp, sp, #0x40
    decc:	ret
    ded0:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    ded4:	ldr	x8, [x8, #4008]
    ded8:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    dedc:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    dee0:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    dee4:	ldr	x0, [x8]
    dee8:	add	x1, x1, #0xba0
    deec:	add	x2, x2, #0xd99
    def0:	add	x4, x4, #0xe07
    def4:	mov	w3, #0x89                  	// #137
    def8:	bl	56a0 <fprintf@plt>
    defc:	bl	5110 <abort@plt>
    df00:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    df04:	ldr	x8, [x8, #4008]
    df08:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    df0c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    df10:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    df14:	ldr	x0, [x8]
    df18:	add	x1, x1, #0xba0
    df1c:	add	x2, x2, #0xd99
    df20:	add	x4, x4, #0xe20
    df24:	mov	w3, #0x93                  	// #147
    df28:	bl	56a0 <fprintf@plt>
    df2c:	bl	5110 <abort@plt>
    df30:	stp	x29, x30, [sp, #-48]!
    df34:	stp	x22, x21, [sp, #16]
    df38:	stp	x20, x19, [sp, #32]
    df3c:	ldr	w8, [x3, #4]
    df40:	mov	x22, x2
    df44:	mov	x20, x1
    df48:	mov	x19, x0
    df4c:	mov	x29, sp
    df50:	cbz	w8, e010 <mpc_pow@@Base+0x1460>
    df54:	mov	w1, #0x1                   	// #1
    df58:	mov	x0, x3
    df5c:	mov	x21, x3
    df60:	bl	4d10 <__gmpz_divisible_2exp_p@plt>
    df64:	cbz	w0, e050 <mpc_pow@@Base+0x14a0>
    df68:	mov	x0, x19
    df6c:	mov	x1, x22
    df70:	mov	x2, x22
    df74:	bl	4e10 <__gmpz_mul@plt>
    df78:	mov	x0, x19
    df7c:	mov	x1, x21
    df80:	mov	x2, x21
    df84:	bl	5020 <__gmpz_addmul@plt>
    df88:	mov	x0, x19
    df8c:	bl	4e50 <__gmpz_perfect_square_p@plt>
    df90:	cbz	w0, e050 <mpc_pow@@Base+0x14a0>
    df94:	mov	x0, x19
    df98:	mov	x1, x19
    df9c:	bl	4bc0 <__gmpz_sqrt@plt>
    dfa0:	mov	x0, x19
    dfa4:	mov	x1, x22
    dfa8:	mov	x2, x19
    dfac:	bl	54e0 <__gmpz_add@plt>
    dfb0:	mov	w1, #0x1                   	// #1
    dfb4:	mov	x0, x19
    dfb8:	bl	4d10 <__gmpz_divisible_2exp_p@plt>
    dfbc:	cbz	w0, e050 <mpc_pow@@Base+0x14a0>
    dfc0:	mov	w2, #0x1                   	// #1
    dfc4:	mov	x0, x19
    dfc8:	mov	x1, x19
    dfcc:	bl	5330 <__gmpz_tdiv_q_2exp@plt>
    dfd0:	mov	x0, x19
    dfd4:	bl	4e50 <__gmpz_perfect_square_p@plt>
    dfd8:	cbz	w0, e050 <mpc_pow@@Base+0x14a0>
    dfdc:	mov	x0, x19
    dfe0:	mov	x1, x19
    dfe4:	bl	4bc0 <__gmpz_sqrt@plt>
    dfe8:	mov	w2, #0x1                   	// #1
    dfec:	mov	x0, x20
    dff0:	mov	x1, x21
    dff4:	mov	w22, #0x1                   	// #1
    dff8:	bl	5330 <__gmpz_tdiv_q_2exp@plt>
    dffc:	mov	x0, x20
    e000:	mov	x1, x20
    e004:	mov	x2, x19
    e008:	bl	4d90 <__gmpz_divexact@plt>
    e00c:	b	e054 <mpc_pow@@Base+0x14a4>
    e010:	ldr	w8, [x22, #4]
    e014:	tbz	w8, #31, e068 <mpc_pow@@Base+0x14b8>
    e018:	mov	x0, x20
    e01c:	mov	x1, x22
    e020:	bl	4e30 <__gmpz_neg@plt>
    e024:	mov	x0, x20
    e028:	bl	4e50 <__gmpz_perfect_square_p@plt>
    e02c:	cbz	w0, e050 <mpc_pow@@Base+0x14a0>
    e030:	mov	x0, x20
    e034:	mov	x1, x20
    e038:	bl	4bc0 <__gmpz_sqrt@plt>
    e03c:	mov	x0, x19
    e040:	mov	x1, xzr
    e044:	bl	4be0 <__gmpz_set_ui@plt>
    e048:	mov	w22, #0x1                   	// #1
    e04c:	b	e054 <mpc_pow@@Base+0x14a4>
    e050:	mov	w22, wzr
    e054:	mov	w0, w22
    e058:	ldp	x20, x19, [sp, #32]
    e05c:	ldp	x22, x21, [sp, #16]
    e060:	ldp	x29, x30, [sp], #48
    e064:	ret
    e068:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    e06c:	ldr	x8, [x8, #4008]
    e070:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    e074:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    e078:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    e07c:	ldr	x0, [x8]
    e080:	add	x1, x1, #0xba0
    e084:	add	x2, x2, #0xd99
    e088:	add	x4, x4, #0xdf1
    e08c:	mov	w3, #0x3c                  	// #60
    e090:	bl	56a0 <fprintf@plt>
    e094:	bl	5110 <abort@plt>

000000000000e098 <mpc_pow_fr@@Base>:
    e098:	sub	sp, sp, #0x80
    e09c:	stp	x29, x30, [sp, #64]
    e0a0:	str	x23, [sp, #80]
    e0a4:	stp	x22, x21, [sp, #96]
    e0a8:	stp	x20, x19, [sp, #112]
    e0ac:	ldp	q1, q0, [x2]
    e0b0:	mov	x8, sp
    e0b4:	add	x22, x8, #0x20
    e0b8:	mov	x20, x1
    e0bc:	mov	x21, x0
    e0c0:	mov	w1, #0x1                   	// #1
    e0c4:	mov	x0, x22
    e0c8:	add	x29, sp, #0x40
    e0cc:	mov	w19, w3
    e0d0:	stp	q1, q0, [sp]
    e0d4:	mov	w23, #0x1                   	// #1
    e0d8:	bl	5540 <mpfr_init2@plt>
    e0dc:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    e0e0:	mov	x2, sp
    e0e4:	mov	x0, x21
    e0e8:	mov	x1, x20
    e0ec:	mov	w3, w19
    e0f0:	str	w23, [sp, #40]
    e0f4:	str	x8, [sp, #48]
    e0f8:	bl	5350 <mpc_pow@plt>
    e0fc:	mov	w19, w0
    e100:	mov	x0, x22
    e104:	bl	4e40 <mpfr_clear@plt>
    e108:	mov	w0, w19
    e10c:	ldp	x20, x19, [sp, #112]
    e110:	ldp	x22, x21, [sp, #96]
    e114:	ldr	x23, [sp, #80]
    e118:	ldp	x29, x30, [sp, #64]
    e11c:	add	sp, sp, #0x80
    e120:	ret

000000000000e124 <mpc_pow_ld@@Base>:
    e124:	sub	sp, sp, #0x80
    e128:	str	x21, [sp, #96]
    e12c:	stp	x20, x19, [sp, #112]
    e130:	mov	w19, w2
    e134:	mov	x20, x1
    e138:	mov	x21, x0
    e13c:	add	x0, sp, #0x10
    e140:	mov	w1, #0x71                  	// #113
    e144:	mov	w2, #0x1                   	// #1
    e148:	stp	x29, x30, [sp, #80]
    e14c:	add	x29, sp, #0x50
    e150:	str	q0, [sp]
    e154:	bl	54d0 <mpc_init3@plt>
    e158:	ldr	q0, [sp]
    e15c:	add	x0, sp, #0x10
    e160:	mov	w1, wzr
    e164:	bl	4f50 <mpc_set_ld@plt>
    e168:	add	x2, sp, #0x10
    e16c:	mov	x0, x21
    e170:	mov	x1, x20
    e174:	mov	w3, w19
    e178:	bl	5350 <mpc_pow@plt>
    e17c:	mov	w19, w0
    e180:	add	x0, sp, #0x10
    e184:	bl	4ae0 <mpc_clear@plt>
    e188:	mov	w0, w19
    e18c:	ldp	x20, x19, [sp, #112]
    e190:	ldr	x21, [sp, #96]
    e194:	ldp	x29, x30, [sp, #80]
    e198:	add	sp, sp, #0x80
    e19c:	ret

000000000000e1a0 <mpc_pow_d@@Base>:
    e1a0:	sub	sp, sp, #0x70
    e1a4:	str	x21, [sp, #88]
    e1a8:	stp	x20, x19, [sp, #96]
    e1ac:	mov	w19, w2
    e1b0:	mov	x20, x1
    e1b4:	mov	x21, x0
    e1b8:	mov	x0, sp
    e1bc:	mov	w1, #0x35                  	// #53
    e1c0:	mov	w2, #0x1                   	// #1
    e1c4:	str	d8, [sp, #64]
    e1c8:	stp	x29, x30, [sp, #72]
    e1cc:	add	x29, sp, #0x40
    e1d0:	mov	v8.16b, v0.16b
    e1d4:	bl	54d0 <mpc_init3@plt>
    e1d8:	mov	x0, sp
    e1dc:	mov	v0.16b, v8.16b
    e1e0:	mov	w1, wzr
    e1e4:	bl	5560 <mpc_set_d@plt>
    e1e8:	mov	x2, sp
    e1ec:	mov	x0, x21
    e1f0:	mov	x1, x20
    e1f4:	mov	w3, w19
    e1f8:	bl	5350 <mpc_pow@plt>
    e1fc:	mov	w19, w0
    e200:	mov	x0, sp
    e204:	bl	4ae0 <mpc_clear@plt>
    e208:	mov	w0, w19
    e20c:	ldp	x20, x19, [sp, #96]
    e210:	ldr	x21, [sp, #88]
    e214:	ldp	x29, x30, [sp, #72]
    e218:	ldr	d8, [sp, #64]
    e21c:	add	sp, sp, #0x70
    e220:	ret

000000000000e224 <mpc_pow_si@@Base>:
    e224:	stp	x29, x30, [sp, #-16]!
    e228:	mov	w4, w3
    e22c:	mov	x29, sp
    e230:	tbnz	x2, #63, e23c <mpc_pow_si@@Base+0x18>
    e234:	mov	w3, #0x1                   	// #1
    e238:	b	e244 <mpc_pow_si@@Base+0x20>
    e23c:	neg	x2, x2
    e240:	mov	w3, #0xffffffff            	// #-1
    e244:	bl	4ee0 <mpc_pow_usi@plt>
    e248:	ldp	x29, x30, [sp], #16
    e24c:	ret

000000000000e250 <mpc_pow_usi@@Base>:
    e250:	sub	sp, sp, #0x130
    e254:	stp	x22, x21, [sp, #272]
    e258:	mov	x21, x0
    e25c:	mov	x0, x1
    e260:	stp	x29, x30, [sp, #208]
    e264:	stp	x28, x27, [sp, #224]
    e268:	stp	x26, x25, [sp, #240]
    e26c:	stp	x24, x23, [sp, #256]
    e270:	stp	x20, x19, [sp, #288]
    e274:	add	x29, sp, #0xd0
    e278:	mov	w19, w4
    e27c:	mov	w22, w3
    e280:	mov	x23, x2
    e284:	mov	x20, x1
    e288:	bl	55d0 <mpfr_number_p@plt>
    e28c:	cbz	w0, e2e4 <mpc_pow_usi@@Base+0x94>
    e290:	add	x0, x20, #0x20
    e294:	bl	55d0 <mpfr_number_p@plt>
    e298:	cbz	w0, e2e4 <mpc_pow_usi@@Base+0x94>
    e29c:	ldr	x24, [x20, #16]
    e2a0:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    e2a4:	cmp	x24, x8
    e2a8:	b.eq	e2e4 <mpc_pow_usi@@Base+0x94>  // b.none
    e2ac:	cbz	x23, e2e4 <mpc_pow_usi@@Base+0x94>
    e2b0:	ldr	x25, [x20, #48]
    e2b4:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    e2b8:	cmp	x25, x8
    e2bc:	b.eq	e2e4 <mpc_pow_usi@@Base+0x94>  // b.none
    e2c0:	cmp	x23, #0x1
    e2c4:	b.ne	e324 <mpc_pow_usi@@Base+0xd4>  // b.any
    e2c8:	cmp	w22, #0x1
    e2cc:	b.lt	e39c <mpc_pow_usi@@Base+0x14c>  // b.tstop
    e2d0:	mov	x0, x21
    e2d4:	mov	x1, x20
    e2d8:	mov	w2, w19
    e2dc:	bl	5680 <mpc_set@plt>
    e2e0:	b	e2fc <mpc_pow_usi@@Base+0xac>
    e2e4:	mov	x0, x21
    e2e8:	mov	x1, x20
    e2ec:	mov	x2, x23
    e2f0:	mov	w3, w22
    e2f4:	mov	w4, w19
    e2f8:	bl	e6b4 <mpc_pow_usi@@Base+0x464>
    e2fc:	mov	w25, w0
    e300:	mov	w0, w25
    e304:	ldp	x20, x19, [sp, #288]
    e308:	ldp	x22, x21, [sp, #272]
    e30c:	ldp	x24, x23, [sp, #256]
    e310:	ldp	x26, x25, [sp, #240]
    e314:	ldp	x28, x27, [sp, #224]
    e318:	ldp	x29, x30, [sp, #208]
    e31c:	add	sp, sp, #0x130
    e320:	ret
    e324:	cmp	x23, #0x2
    e328:	b.ne	e348 <mpc_pow_usi@@Base+0xf8>  // b.any
    e32c:	cmp	w22, #0x1
    e330:	b.lt	e348 <mpc_pow_usi@@Base+0xf8>  // b.tstop
    e334:	mov	x0, x21
    e338:	mov	x1, x20
    e33c:	mov	w2, w19
    e340:	bl	5040 <mpc_sqr@plt>
    e344:	b	e2fc <mpc_pow_usi@@Base+0xac>
    e348:	cmp	x24, x25
    e34c:	csel	x26, x24, x25, gt
    e350:	bl	5310 <mpfr_get_emax@plt>
    e354:	sdiv	x8, x0, x23
    e358:	cmp	x26, x8
    e35c:	b.gt	e378 <mpc_pow_usi@@Base+0x128>
    e360:	cmp	x25, x24
    e364:	csel	x24, x24, x25, gt
    e368:	bl	5170 <mpfr_get_emin@plt>
    e36c:	sdiv	x8, x0, x23
    e370:	cmp	x8, x24
    e374:	b.le	e3b4 <mpc_pow_usi@@Base+0x164>
    e378:	mov	x0, x21
    e37c:	mov	x1, x20
    e380:	mov	x2, x23
    e384:	mov	w3, w22
    e388:	mov	w4, w19
    e38c:	bl	e6b4 <mpc_pow_usi@@Base+0x464>
    e390:	mov	w25, w0
    e394:	mov	w8, wzr
    e398:	b	e3b8 <mpc_pow_usi@@Base+0x168>
    e39c:	mov	w1, #0x1                   	// #1
    e3a0:	mov	x0, x21
    e3a4:	mov	x2, x20
    e3a8:	mov	w3, w19
    e3ac:	bl	56b0 <mpc_ui_div@plt>
    e3b0:	b	e2fc <mpc_pow_usi@@Base+0xac>
    e3b4:	mov	w8, #0x1                   	// #1
    e3b8:	cbz	w8, e300 <mpc_pow_usi@@Base+0xb0>
    e3bc:	cmp	x23, #0x4
    e3c0:	and	x8, x23, x23, lsr #1
    e3c4:	mov	x28, xzr
    e3c8:	str	x8, [sp, #64]
    e3cc:	b.cc	e3e4 <mpc_pow_usi@@Base+0x194>  // b.lo, b.ul, b.last
    e3d0:	mov	x8, x23
    e3d4:	cmp	x8, #0x7
    e3d8:	lsr	x8, x8, #1
    e3dc:	add	x28, x28, #0x1
    e3e0:	b.hi	e3d4 <mpc_pow_usi@@Base+0x184>  // b.pmore
    e3e4:	ldr	x8, [x21]
    e3e8:	ldr	x9, [x21, #32]
    e3ec:	sub	x0, x29, #0x48
    e3f0:	sub	x24, x29, #0x48
    e3f4:	cmp	x8, x9
    e3f8:	csel	x8, x8, x9, gt
    e3fc:	add	x8, x28, x8
    e400:	add	x25, x8, #0x22
    e404:	mov	x1, x25
    e408:	bl	4dc0 <mpc_init2@plt>
    e40c:	ldr	x8, [sp, #64]
    e410:	cbz	x8, e420 <mpc_pow_usi@@Base+0x1d0>
    e414:	add	x0, sp, #0x48
    e418:	mov	x1, x25
    e41c:	bl	4dc0 <mpc_init2@plt>
    e420:	add	x8, x24, #0x20
    e424:	str	x8, [sp, #24]
    e428:	mov	x8, #0xfffffffffffffffb    	// #-5
    e42c:	tst	w19, #0xf
    e430:	sub	x8, x8, x28
    e434:	stp	x8, x25, [sp, #40]
    e438:	cset	w8, eq  // eq = none
    e43c:	cmp	w19, #0x10
    e440:	mov	w10, wzr
    e444:	mov	w26, wzr
    e448:	add	x9, x28, #0x5
    e44c:	str	x8, [sp, #32]
    e450:	cset	w8, cc  // cc = lo, ul, last
    e454:	stp	x8, x9, [sp, #8]
    e458:	str	x28, [sp]
    e45c:	sub	x0, x29, #0x48
    e460:	mov	x1, x20
    e464:	mov	w2, wzr
    e468:	str	w10, [sp, #60]
    e46c:	bl	5040 <mpc_sqr@plt>
    e470:	ldr	x8, [sp, #64]
    e474:	cbz	x8, e4a4 <mpc_pow_usi@@Base+0x254>
    e478:	add	x0, sp, #0x48
    e47c:	sub	x1, x29, #0x48
    e480:	mov	x2, x20
    e484:	mov	w3, wzr
    e488:	bl	4fe0 <mpc_mul@plt>
    e48c:	lsr	x8, x23, x28
    e490:	tbz	w8, #0, e4a4 <mpc_pow_usi@@Base+0x254>
    e494:	sub	x0, x29, #0x48
    e498:	add	x1, sp, #0x48
    e49c:	mov	w2, wzr
    e4a0:	bl	5680 <mpc_set@plt>
    e4a4:	subs	x27, x28, #0x1
    e4a8:	b.ge	e528 <mpc_pow_usi@@Base+0x2d8>  // b.tcont
    e4ac:	tbz	w22, #31, e4c4 <mpc_pow_usi@@Base+0x274>
    e4b0:	sub	x0, x29, #0x48
    e4b4:	sub	x2, x29, #0x48
    e4b8:	mov	w1, #0x1                   	// #1
    e4bc:	mov	w3, wzr
    e4c0:	bl	56b0 <mpc_ui_div@plt>
    e4c4:	ldur	x8, [x29, #-56]
    e4c8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    e4cc:	add	w24, w26, #0x1
    e4d0:	cmp	x8, x9
    e4d4:	b.eq	e4e8 <mpc_pow_usi@@Base+0x298>  // b.none
    e4d8:	ldur	x9, [x29, #-24]
    e4dc:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    e4e0:	cmp	x9, x10
    e4e4:	b.ne	e57c <mpc_pow_usi@@Base+0x32c>  // b.any
    e4e8:	mov	x0, x21
    e4ec:	mov	x1, x20
    e4f0:	mov	x2, x23
    e4f4:	mov	w3, w22
    e4f8:	mov	w4, w19
    e4fc:	bl	e6b4 <mpc_pow_usi@@Base+0x464>
    e500:	b	e684 <mpc_pow_usi@@Base+0x434>
    e504:	sub	x0, x29, #0x48
    e508:	sub	x1, x29, #0x48
    e50c:	mov	x2, x20
    e510:	mov	w3, wzr
    e514:	bl	4fe0 <mpc_mul@plt>
    e518:	mov	x28, x27
    e51c:	cmp	x27, #0x0
    e520:	sub	x27, x27, #0x1
    e524:	b.le	e4ac <mpc_pow_usi@@Base+0x25c>
    e528:	sub	x0, x29, #0x48
    e52c:	sub	x1, x29, #0x48
    e530:	mov	w2, wzr
    e534:	bl	5040 <mpc_sqr@plt>
    e538:	lsr	x8, x23, x27
    e53c:	tbz	w8, #0, e518 <mpc_pow_usi@@Base+0x2c8>
    e540:	subs	x24, x28, #0x2
    e544:	b.lt	e504 <mpc_pow_usi@@Base+0x2b4>  // b.tstop
    e548:	lsr	x8, x23, x24
    e54c:	tbz	w8, #0, e504 <mpc_pow_usi@@Base+0x2b4>
    e550:	sub	x0, x29, #0x48
    e554:	sub	x1, x29, #0x48
    e558:	mov	w2, wzr
    e55c:	bl	5040 <mpc_sqr@plt>
    e560:	sub	x0, x29, #0x48
    e564:	sub	x1, x29, #0x48
    e568:	add	x2, sp, #0x48
    e56c:	mov	w3, wzr
    e570:	bl	4fe0 <mpc_mul@plt>
    e574:	mov	x27, x24
    e578:	b	e518 <mpc_pow_usi@@Base+0x2c8>
    e57c:	str	w24, [sp, #56]
    e580:	ldp	x10, x24, [sp, #40]
    e584:	sub	x28, x8, x9
    e588:	and	x9, x28, x28, asr #63
    e58c:	ldr	x8, [x21]
    e590:	add	x10, x10, x24
    e594:	add	x1, x10, x9
    e598:	ldr	x9, [sp, #32]
    e59c:	sub	x0, x29, #0x48
    e5a0:	mov	w3, #0x1                   	// #1
    e5a4:	mov	w2, wzr
    e5a8:	add	x4, x8, x9
    e5ac:	bl	5550 <mpfr_can_round@plt>
    e5b0:	cbz	w0, e5f8 <mpc_pow_usi@@Base+0x3a8>
    e5b4:	ldp	x10, x0, [sp, #16]
    e5b8:	cmp	x28, #0x0
    e5bc:	ldr	x9, [x21, #32]
    e5c0:	mov	w3, #0x1                   	// #1
    e5c4:	add	x8, x10, x28
    e5c8:	csel	x8, x10, x8, lt  // lt = tstop
    e5cc:	sub	x1, x24, x8
    e5d0:	ldr	x8, [sp, #8]
    e5d4:	mov	w2, wzr
    e5d8:	add	x4, x9, x8
    e5dc:	bl	5550 <mpfr_can_round@plt>
    e5e0:	cbz	w0, e5f8 <mpc_pow_usi@@Base+0x3a8>
    e5e4:	sub	x1, x29, #0x48
    e5e8:	mov	x0, x21
    e5ec:	mov	w2, w19
    e5f0:	bl	5680 <mpc_set@plt>
    e5f4:	b	e680 <mpc_pow_usi@@Base+0x430>
    e5f8:	cbnz	w26, e668 <mpc_pow_usi@@Base+0x418>
    e5fc:	ldr	x8, [x21]
    e600:	ldr	x9, [x21, #32]
    e604:	cmp	x28, #0x0
    e608:	cneg	x10, x28, mi  // mi = first
    e60c:	cmp	x8, x9
    e610:	csel	x8, x8, x9, gt
    e614:	cmp	x10, x8
    e618:	b.ge	e668 <mpc_pow_usi@@Base+0x418>  // b.tcont
    e61c:	ldr	x8, [x20]
    e620:	ldr	x9, [x20, #32]
    e624:	ldr	x26, [sp, #48]
    e628:	sub	x0, x29, #0x48
    e62c:	cmp	x8, x9
    e630:	csel	x8, x8, x9, gt
    e634:	add	x26, x8, x26
    e638:	mov	x1, x26
    e63c:	bl	4cd0 <mpc_set_prec@plt>
    e640:	ldr	x8, [sp, #64]
    e644:	ldr	w24, [sp, #56]
    e648:	str	x26, [sp, #48]
    e64c:	cbz	x8, e65c <mpc_pow_usi@@Base+0x40c>
    e650:	add	x0, sp, #0x48
    e654:	mov	x1, x26
    e658:	bl	4cd0 <mpc_set_prec@plt>
    e65c:	ldr	x27, [sp]
    e660:	ldr	w10, [sp, #60]
    e664:	b	e68c <mpc_pow_usi@@Base+0x43c>
    e668:	mov	x0, x21
    e66c:	mov	x1, x20
    e670:	mov	x2, x23
    e674:	mov	w3, w22
    e678:	mov	w4, w19
    e67c:	bl	e6b4 <mpc_pow_usi@@Base+0x464>
    e680:	ldr	w24, [sp, #56]
    e684:	mov	w25, w0
    e688:	mov	w10, #0x1                   	// #1
    e68c:	mov	x28, x27
    e690:	mov	w26, w24
    e694:	cbz	w10, e45c <mpc_pow_usi@@Base+0x20c>
    e698:	sub	x0, x29, #0x48
    e69c:	bl	4ae0 <mpc_clear@plt>
    e6a0:	ldr	x8, [sp, #64]
    e6a4:	cbz	x8, e300 <mpc_pow_usi@@Base+0xb0>
    e6a8:	add	x0, sp, #0x48
    e6ac:	bl	4ae0 <mpc_clear@plt>
    e6b0:	b	e300 <mpc_pow_usi@@Base+0xb0>
    e6b4:	sub	sp, sp, #0x80
    e6b8:	stp	x22, x21, [sp, #96]
    e6bc:	stp	x20, x19, [sp, #112]
    e6c0:	mov	x22, x2
    e6c4:	mov	x20, x1
    e6c8:	mov	x21, x0
    e6cc:	mov	x0, sp
    e6d0:	mov	w1, #0x40                  	// #64
    e6d4:	mov	w2, #0x1                   	// #1
    e6d8:	stp	x29, x30, [sp, #64]
    e6dc:	str	x23, [sp, #80]
    e6e0:	add	x29, sp, #0x40
    e6e4:	mov	w19, w4
    e6e8:	mov	w23, w3
    e6ec:	bl	54d0 <mpc_init3@plt>
    e6f0:	cmp	w23, #0x1
    e6f4:	b.lt	e70c <mpc_pow_usi@@Base+0x4bc>  // b.tstop
    e6f8:	mov	x0, sp
    e6fc:	mov	x1, x22
    e700:	mov	w2, wzr
    e704:	bl	4db0 <mpc_set_ui@plt>
    e708:	b	e71c <mpc_pow_usi@@Base+0x4cc>
    e70c:	neg	x1, x22
    e710:	mov	x0, sp
    e714:	mov	w2, wzr
    e718:	bl	5130 <mpc_set_si@plt>
    e71c:	mov	x2, sp
    e720:	mov	x0, x21
    e724:	mov	x1, x20
    e728:	mov	w3, w19
    e72c:	bl	5350 <mpc_pow@plt>
    e730:	mov	w19, w0
    e734:	mov	x0, sp
    e738:	bl	4ae0 <mpc_clear@plt>
    e73c:	mov	w0, w19
    e740:	ldp	x20, x19, [sp, #112]
    e744:	ldp	x22, x21, [sp, #96]
    e748:	ldr	x23, [sp, #80]
    e74c:	ldp	x29, x30, [sp, #64]
    e750:	add	sp, sp, #0x80
    e754:	ret

000000000000e758 <mpc_pow_ui@@Base>:
    e758:	stp	x29, x30, [sp, #-16]!
    e75c:	mov	w4, w3
    e760:	mov	w3, #0x1                   	// #1
    e764:	mov	x29, sp
    e768:	bl	4ee0 <mpc_pow_usi@plt>
    e76c:	ldp	x29, x30, [sp], #16
    e770:	ret

000000000000e774 <mpc_pow_z@@Base>:
    e774:	sub	sp, sp, #0x80
    e778:	stp	x22, x21, [sp, #96]
    e77c:	stp	x20, x19, [sp, #112]
    e780:	mov	x20, x1
    e784:	mov	x21, x0
    e788:	mov	w1, #0x2                   	// #2
    e78c:	mov	x0, x2
    e790:	stp	x29, x30, [sp, #64]
    e794:	str	x23, [sp, #80]
    e798:	add	x29, sp, #0x40
    e79c:	mov	w19, w3
    e7a0:	mov	x22, x2
    e7a4:	bl	55b0 <__gmpz_sizeinbase@plt>
    e7a8:	ldr	w8, [x22, #4]
    e7ac:	mov	x23, x0
    e7b0:	mov	x0, x22
    e7b4:	tbnz	w8, #31, e7d4 <mpc_pow_z@@Base+0x60>
    e7b8:	bl	4f30 <__gmpz_fits_ulong_p@plt>
    e7bc:	cbz	w0, e804 <mpc_pow_z@@Base+0x90>
    e7c0:	mov	x0, x22
    e7c4:	bl	4fd0 <__gmpz_get_ui@plt>
    e7c8:	mov	x2, x0
    e7cc:	mov	w3, #0x1                   	// #1
    e7d0:	b	e7ec <mpc_pow_z@@Base+0x78>
    e7d4:	bl	4d30 <__gmpz_fits_slong_p@plt>
    e7d8:	cbz	w0, e804 <mpc_pow_z@@Base+0x90>
    e7dc:	mov	x0, x22
    e7e0:	bl	4a70 <__gmpz_get_si@plt>
    e7e4:	neg	x2, x0
    e7e8:	mov	w3, #0xffffffff            	// #-1
    e7ec:	mov	x0, x21
    e7f0:	mov	x1, x20
    e7f4:	mov	w4, w19
    e7f8:	bl	4ee0 <mpc_pow_usi@plt>
    e7fc:	mov	w19, w0
    e800:	b	e848 <mpc_pow_z@@Base+0xd4>
    e804:	cmp	x23, #0x1
    e808:	csinc	x1, x23, xzr, gt
    e80c:	mov	x0, sp
    e810:	mov	w2, #0x1                   	// #1
    e814:	bl	54d0 <mpc_init3@plt>
    e818:	mov	x0, sp
    e81c:	mov	x1, x22
    e820:	mov	w2, wzr
    e824:	bl	51b0 <mpc_set_z@plt>
    e828:	mov	x2, sp
    e82c:	mov	x0, x21
    e830:	mov	x1, x20
    e834:	mov	w3, w19
    e838:	bl	5350 <mpc_pow@plt>
    e83c:	mov	w19, w0
    e840:	mov	x0, sp
    e844:	bl	4ae0 <mpc_clear@plt>
    e848:	mov	w0, w19
    e84c:	ldp	x20, x19, [sp, #112]
    e850:	ldp	x22, x21, [sp, #96]
    e854:	ldr	x23, [sp, #80]
    e858:	ldp	x29, x30, [sp, #64]
    e85c:	add	sp, sp, #0x80
    e860:	ret

000000000000e864 <mpc_proj@@Base>:
    e864:	stp	x29, x30, [sp, #-48]!
    e868:	stp	x20, x19, [sp, #32]
    e86c:	ldr	x9, [x1, #16]
    e870:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    e874:	mov	x19, x1
    e878:	mov	x20, x0
    e87c:	cmp	x9, x8
    e880:	str	x21, [sp, #16]
    e884:	mov	x29, sp
    e888:	b.eq	e898 <mpc_proj@@Base+0x34>  // b.none
    e88c:	ldr	x9, [x19, #48]
    e890:	cmp	x9, x8
    e894:	b.ne	e8c4 <mpc_proj@@Base+0x60>  // b.any
    e898:	mov	w1, #0x1                   	// #1
    e89c:	mov	x0, x20
    e8a0:	mov	w21, #0x1                   	// #1
    e8a4:	bl	5230 <mpfr_set_inf@plt>
    e8a8:	ldr	w8, [x19, #40]
    e8ac:	add	x0, x20, #0x20
    e8b0:	cmp	w8, #0x0
    e8b4:	cneg	w1, w21, lt  // lt = tstop
    e8b8:	bl	4de0 <mpfr_set_zero@plt>
    e8bc:	mov	w0, wzr
    e8c0:	b	e8d0 <mpc_proj@@Base+0x6c>
    e8c4:	mov	x0, x20
    e8c8:	mov	x1, x19
    e8cc:	bl	5680 <mpc_set@plt>
    e8d0:	ldp	x20, x19, [sp, #32]
    e8d4:	ldr	x21, [sp, #16]
    e8d8:	ldp	x29, x30, [sp], #48
    e8dc:	ret

000000000000e8e0 <mpc_real@@Base>:
    e8e0:	stp	x29, x30, [sp, #-16]!
    e8e4:	ldr	w3, [x1, #8]
    e8e8:	mov	x29, sp
    e8ec:	bl	52e0 <mpfr_set4@plt>
    e8f0:	ldp	x29, x30, [sp], #16
    e8f4:	ret

000000000000e8f8 <mpc_rootofunity@@Base>:
    e8f8:	sub	sp, sp, #0xd0
    e8fc:	stp	x20, x19, [sp, #192]
    e900:	mov	x19, x0
    e904:	stp	x29, x30, [sp, #128]
    e908:	str	x25, [sp, #144]
    e90c:	stp	x24, x23, [sp, #160]
    e910:	stp	x22, x21, [sp, #176]
    e914:	add	x29, sp, #0x80
    e918:	cbz	x1, e96c <mpc_rootofunity@@Base+0x74>
    e91c:	udiv	x8, x2, x1
    e920:	msub	x22, x8, x1, x2
    e924:	mov	x0, x22
    e928:	mov	w21, w3
    e92c:	mov	x20, x1
    e930:	bl	ef80 <mpc_rootofunity@@Base+0x688>
    e934:	udiv	x24, x20, x0
    e938:	cmp	x24, #0x4
    e93c:	udiv	x20, x22, x0
    e940:	b.eq	e99c <mpc_rootofunity@@Base+0xa4>  // b.none
    e944:	cmp	x24, #0x2
    e948:	b.eq	e984 <mpc_rootofunity@@Base+0x8c>  // b.none
    e94c:	cmp	x24, #0x1
    e950:	b.ne	e9c8 <mpc_rootofunity@@Base+0xd0>  // b.any
    e954:	cmp	x0, x22
    e958:	b.ls	ee60 <mpc_rootofunity@@Base+0x568>  // b.plast
    e95c:	mov	w1, #0x1                   	// #1
    e960:	mov	x0, x19
    e964:	mov	x2, xzr
    e968:	b	e9bc <mpc_rootofunity@@Base+0xc4>
    e96c:	mov	x0, x19
    e970:	bl	4b10 <mpfr_set_nan@plt>
    e974:	add	x0, x19, #0x20
    e978:	bl	4b10 <mpfr_set_nan@plt>
    e97c:	mov	w0, wzr
    e980:	b	ee44 <mpc_rootofunity@@Base+0x54c>
    e984:	cmp	x20, #0x1
    e988:	b.ne	ee90 <mpc_rootofunity@@Base+0x598>  // b.any
    e98c:	mov	x1, #0xffffffffffffffff    	// #-1
    e990:	mov	x0, x19
    e994:	mov	x2, xzr
    e998:	b	eabc <mpc_rootofunity@@Base+0x1c4>
    e99c:	orr	x8, x20, #0x2
    e9a0:	cmp	x8, #0x3
    e9a4:	b.ne	eec0 <mpc_rootofunity@@Base+0x5c8>  // b.any
    e9a8:	cmp	x20, #0x1
    e9ac:	b.ne	eab0 <mpc_rootofunity@@Base+0x1b8>  // b.any
    e9b0:	mov	w2, #0x1                   	// #1
    e9b4:	mov	x0, x19
    e9b8:	mov	x1, xzr
    e9bc:	mov	w3, w21
    e9c0:	bl	5150 <mpc_set_ui_ui@plt>
    e9c4:	b	ee44 <mpc_rootofunity@@Base+0x54c>
    e9c8:	sub	x8, x24, #0x3
    e9cc:	cmp	x8, #0x9
    e9d0:	b.hi	ec9c <mpc_rootofunity@@Base+0x3a4>  // b.pmore
    e9d4:	adrp	x9, 13000 <mpc_ui_ui_sub@@Base+0x880>
    e9d8:	add	x9, x9, #0xe39
    e9dc:	adr	x10, e9ec <mpc_rootofunity@@Base+0xf4>
    e9e0:	ldrb	w11, [x9, x8]
    e9e4:	add	x10, x10, x11, lsl #2
    e9e8:	br	x10
    e9ec:	cmp	x24, #0x3
    e9f0:	b.ne	ea00 <mpc_rootofunity@@Base+0x108>  // b.any
    e9f4:	sub	x8, x20, #0x1
    e9f8:	cmp	x8, #0x2
    e9fc:	b.cc	ea14 <mpc_rootofunity@@Base+0x11c>  // b.lo, b.ul, b.last
    ea00:	cmp	x24, #0x6
    ea04:	b.ne	eef0 <mpc_rootofunity@@Base+0x5f8>  // b.any
    ea08:	orr	x8, x20, #0x4
    ea0c:	cmp	x8, #0x5
    ea10:	b.ne	eef0 <mpc_rootofunity@@Base+0x5f8>  // b.any
    ea14:	cmp	x24, #0x3
    ea18:	mov	x8, #0xffffffffffffffff    	// #-1
    ea1c:	cneg	x1, x8, ne  // ne = any
    ea20:	and	w3, w21, #0xf
    ea24:	mov	x0, x19
    ea28:	mov	x2, xzr
    ea2c:	bl	4ab0 <mpfr_set_si_2exp@plt>
    ea30:	asr	w8, w21, #4
    ea34:	mov	w24, #0x2                   	// #2
    ea38:	cmp	w8, #0x3
    ea3c:	mov	w9, #0x3                   	// #3
    ea40:	csel	w10, w24, w8, eq  // eq = none
    ea44:	cmp	w8, #0x2
    ea48:	csel	w9, w9, w10, eq  // eq = none
    ea4c:	cmp	x20, #0x1
    ea50:	add	x23, x19, #0x20
    ea54:	mov	w22, w0
    ea58:	csel	w2, w9, w8, ne  // ne = any
    ea5c:	mov	w1, #0x3                   	// #3
    ea60:	mov	x0, x23
    ea64:	bl	5390 <mpfr_sqrt_ui@plt>
    ea68:	mov	w21, w0
    ea6c:	mov	w2, #0x1                   	// #1
    ea70:	mov	x0, x19
    ea74:	mov	x1, x19
    ea78:	mov	w3, wzr
    ea7c:	bl	5630 <mpc_div_2ui@plt>
    ea80:	cmp	x20, #0x1
    ea84:	b.eq	ea9c <mpc_rootofunity@@Base+0x1a4>  // b.none
    ea88:	mov	x0, x23
    ea8c:	mov	x1, x23
    ea90:	mov	w2, wzr
    ea94:	bl	4c50 <mpfr_neg@plt>
    ea98:	neg	w21, w21
    ea9c:	cmp	w22, #0x0
    eaa0:	cset	w8, ne  // ne = any
    eaa4:	csel	w8, w24, w8, lt  // lt = tstop
    eaa8:	cmp	w21, #0x0
    eaac:	b	ee30 <mpc_rootofunity@@Base+0x538>
    eab0:	mov	x2, #0xffffffffffffffff    	// #-1
    eab4:	mov	x0, x19
    eab8:	mov	x1, xzr
    eabc:	mov	w3, w21
    eac0:	bl	53d0 <mpc_set_si_si@plt>
    eac4:	b	ee44 <mpc_rootofunity@@Base+0x54c>
    eac8:	sub	x8, x20, #0x1
    eacc:	ror	x8, x8, #1
    ead0:	cmp	x8, #0x5
    ead4:	b.hi	ef20 <mpc_rootofunity@@Base+0x628>  // b.pmore
    ead8:	mov	w9, #0x1                   	// #1
    eadc:	lsl	x8, x9, x8
    eae0:	mov	w9, #0x2d                  	// #45
    eae4:	tst	x8, x9
    eae8:	b.eq	ef20 <mpc_rootofunity@@Base+0x628>  // b.none
    eaec:	and	w8, w21, #0xf
    eaf0:	mov	w23, #0x2                   	// #2
    eaf4:	cmp	w8, #0x3
    eaf8:	orr	x24, x20, #0x2
    eafc:	mov	w9, #0x3                   	// #3
    eb00:	csel	w10, w23, w8, eq  // eq = none
    eb04:	cmp	w8, #0x2
    eb08:	csel	w9, w9, w10, eq  // eq = none
    eb0c:	cmp	x24, #0x7
    eb10:	csel	w2, w9, w8, eq  // eq = none
    eb14:	mov	w1, #0x3                   	// #3
    eb18:	mov	x0, x19
    eb1c:	bl	5390 <mpfr_sqrt_ui@plt>
    eb20:	cmp	x20, #0x6
    eb24:	mov	w8, #0x1                   	// #1
    eb28:	mov	w22, w0
    eb2c:	add	x0, x19, #0x20
    eb30:	cneg	x1, x8, cs  // cs = hs, nlast
    eb34:	asr	w3, w21, #4
    eb38:	mov	x2, xzr
    eb3c:	bl	4ab0 <mpfr_set_si_2exp@plt>
    eb40:	mov	w20, w0
    eb44:	mov	w2, #0x1                   	// #1
    eb48:	mov	x0, x19
    eb4c:	mov	x1, x19
    eb50:	mov	w3, wzr
    eb54:	bl	5630 <mpc_div_2ui@plt>
    eb58:	cmp	x24, #0x7
    eb5c:	b.ne	eb74 <mpc_rootofunity@@Base+0x27c>  // b.any
    eb60:	mov	x0, x19
    eb64:	mov	x1, x19
    eb68:	mov	w2, wzr
    eb6c:	bl	4c50 <mpfr_neg@plt>
    eb70:	neg	w22, w22
    eb74:	cmp	w22, #0x0
    eb78:	cset	w8, ne  // ne = any
    eb7c:	csel	w8, w23, w8, lt  // lt = tstop
    eb80:	cmp	w20, #0x0
    eb84:	cset	w9, ne  // ne = any
    eb88:	lsl	w9, w9, #2
    eb8c:	mov	w10, #0x8                   	// #8
    eb90:	csel	w9, w10, w9, lt  // lt = tstop
    eb94:	orr	w0, w8, w9
    eb98:	b	ee44 <mpc_rootofunity@@Base+0x54c>
    eb9c:	cmp	x20, #0x7
    eba0:	b.hi	ef50 <mpc_rootofunity@@Base+0x658>  // b.pmore
    eba4:	mov	w8, #0x1                   	// #1
    eba8:	lsl	x8, x8, x20
    ebac:	mov	w9, #0xaa                  	// #170
    ebb0:	tst	x8, x9
    ebb4:	b.eq	ef50 <mpc_rootofunity@@Base+0x658>  // b.none
    ebb8:	cmp	x20, #0x5
    ebbc:	and	w2, w21, #0xf
    ebc0:	b.eq	ebcc <mpc_rootofunity@@Base+0x2d4>  // b.none
    ebc4:	cmp	x20, #0x3
    ebc8:	b.ne	ebe4 <mpc_rootofunity@@Base+0x2ec>  // b.any
    ebcc:	cmp	w2, #0x3
    ebd0:	mov	w8, #0x2                   	// #2
    ebd4:	csel	w8, w8, w2, eq  // eq = none
    ebd8:	cmp	w2, #0x2
    ebdc:	mov	w9, #0x3                   	// #3
    ebe0:	csel	w2, w9, w8, eq  // eq = none
    ebe4:	asr	w8, w21, #4
    ebe8:	mov	w9, #0x2                   	// #2
    ebec:	cmp	w8, #0x3
    ebf0:	mov	w10, #0x3                   	// #3
    ebf4:	csel	w9, w9, w8, eq  // eq = none
    ebf8:	cmp	w8, #0x2
    ebfc:	csel	w9, w10, w9, eq  // eq = none
    ec00:	cmp	x20, #0x4
    ec04:	mov	w1, #0x2                   	// #2
    ec08:	mov	x0, x19
    ec0c:	csel	w22, w9, w8, hi  // hi = pmore
    ec10:	bl	5390 <mpfr_sqrt_ui@plt>
    ec14:	add	x23, x19, #0x20
    ec18:	mov	w21, w0
    ec1c:	mov	w1, #0x2                   	// #2
    ec20:	mov	x0, x23
    ec24:	mov	w2, w22
    ec28:	bl	5390 <mpfr_sqrt_ui@plt>
    ec2c:	mov	w22, w0
    ec30:	mov	w2, #0x1                   	// #1
    ec34:	mov	x0, x19
    ec38:	mov	x1, x19
    ec3c:	mov	w3, wzr
    ec40:	bl	5630 <mpc_div_2ui@plt>
    ec44:	cmp	x20, #0x5
    ec48:	b.eq	ec54 <mpc_rootofunity@@Base+0x35c>  // b.none
    ec4c:	cmp	x20, #0x3
    ec50:	b.ne	ec68 <mpc_rootofunity@@Base+0x370>  // b.any
    ec54:	mov	x0, x19
    ec58:	mov	x1, x19
    ec5c:	mov	w2, wzr
    ec60:	bl	4c50 <mpfr_neg@plt>
    ec64:	neg	w21, w21
    ec68:	cmp	x20, #0x5
    ec6c:	b.cc	ec84 <mpc_rootofunity@@Base+0x38c>  // b.lo, b.ul, b.last
    ec70:	mov	x0, x23
    ec74:	mov	x1, x23
    ec78:	mov	w2, wzr
    ec7c:	bl	4c50 <mpfr_neg@plt>
    ec80:	neg	w22, w22
    ec84:	cmp	w21, #0x0
    ec88:	mov	w8, #0x2                   	// #2
    ec8c:	cset	w9, ne  // ne = any
    ec90:	csel	w8, w8, w9, lt  // lt = tstop
    ec94:	cmp	w22, #0x0
    ec98:	b	ee30 <mpc_rootofunity@@Base+0x538>
    ec9c:	mov	x22, x19
    eca0:	ldr	x8, [x19]
    eca4:	ldr	x9, [x22, #32]!
    eca8:	add	x0, sp, #0x40
    ecac:	mov	w1, #0x43                  	// #67
    ecb0:	cmp	x8, x9
    ecb4:	csel	x23, x8, x9, gt
    ecb8:	bl	5540 <mpfr_init2@plt>
    ecbc:	add	x0, sp, #0x20
    ecc0:	mov	w1, #0x43                  	// #67
    ecc4:	bl	5540 <mpfr_init2@plt>
    ecc8:	mov	x0, sp
    eccc:	mov	w1, #0x43                  	// #67
    ecd0:	bl	5540 <mpfr_init2@plt>
    ecd4:	sub	x0, x29, #0x20
    ecd8:	bl	53c0 <__gmpq_init@plt>
    ecdc:	sub	x0, x29, #0x20
    ece0:	mov	x1, x20
    ece4:	mov	x2, x24
    ece8:	bl	5210 <__gmpq_set_ui@plt>
    ecec:	sub	x0, x29, #0x20
    ecf0:	sub	x1, x29, #0x20
    ecf4:	mov	w2, #0x1                   	// #1
    ecf8:	bl	5670 <__gmpq_mul_2exp@plt>
    ecfc:	tst	w21, #0xf
    ed00:	asr	w20, w21, #4
    ed04:	and	w24, w21, #0xf
    ed08:	cset	w21, eq  // eq = none
    ed0c:	cmp	w20, #0x0
    ed10:	cset	w25, eq  // eq = none
    ed14:	mov	x0, x23
    ed18:	bl	4df0 <mpc_ceil_log2@plt>
    ed1c:	add	x8, x23, x0
    ed20:	add	x23, x8, #0x5
    ed24:	add	x0, sp, #0x40
    ed28:	mov	x1, x23
    ed2c:	bl	4d50 <mpfr_set_prec@plt>
    ed30:	add	x0, sp, #0x20
    ed34:	mov	x1, x23
    ed38:	bl	4d50 <mpfr_set_prec@plt>
    ed3c:	mov	x0, sp
    ed40:	mov	x1, x23
    ed44:	bl	4d50 <mpfr_set_prec@plt>
    ed48:	add	x0, sp, #0x40
    ed4c:	mov	w1, wzr
    ed50:	bl	4b50 <mpfr_const_pi@plt>
    ed54:	add	x0, sp, #0x40
    ed58:	add	x1, sp, #0x40
    ed5c:	sub	x2, x29, #0x20
    ed60:	mov	w3, wzr
    ed64:	bl	4aa0 <mpfr_mul_q@plt>
    ed68:	add	x0, sp, #0x20
    ed6c:	mov	x1, sp
    ed70:	add	x2, sp, #0x40
    ed74:	mov	w3, wzr
    ed78:	bl	5620 <mpfr_sin_cos@plt>
    ed7c:	ldr	x8, [sp, #16]
    ed80:	ldr	x9, [x19]
    ed84:	mov	x0, sp
    ed88:	mov	w3, #0x1                   	// #1
    ed8c:	add	x8, x23, x8
    ed90:	sub	x1, x8, #0x4
    ed94:	add	x4, x9, x21
    ed98:	mov	w2, wzr
    ed9c:	bl	5550 <mpfr_can_round@plt>
    eda0:	cbz	w0, ed14 <mpc_rootofunity@@Base+0x41c>
    eda4:	ldr	x8, [sp, #48]
    eda8:	ldr	x9, [x22]
    edac:	add	x0, sp, #0x20
    edb0:	mov	w3, #0x1                   	// #1
    edb4:	add	x8, x23, x8
    edb8:	sub	x1, x8, #0x4
    edbc:	add	x4, x9, x25
    edc0:	mov	w2, wzr
    edc4:	bl	5550 <mpfr_can_round@plt>
    edc8:	cbz	w0, ed14 <mpc_rootofunity@@Base+0x41c>
    edcc:	ldr	w3, [sp, #8]
    edd0:	mov	x1, sp
    edd4:	mov	x0, x19
    edd8:	mov	w2, w24
    eddc:	bl	52e0 <mpfr_set4@plt>
    ede0:	ldr	w3, [sp, #40]
    ede4:	mov	w19, w0
    ede8:	add	x1, sp, #0x20
    edec:	mov	x0, x22
    edf0:	mov	w2, w20
    edf4:	bl	52e0 <mpfr_set4@plt>
    edf8:	mov	w20, w0
    edfc:	add	x0, sp, #0x40
    ee00:	bl	4e40 <mpfr_clear@plt>
    ee04:	add	x0, sp, #0x20
    ee08:	bl	4e40 <mpfr_clear@plt>
    ee0c:	mov	x0, sp
    ee10:	bl	4e40 <mpfr_clear@plt>
    ee14:	sub	x0, x29, #0x20
    ee18:	bl	50c0 <__gmpq_clear@plt>
    ee1c:	cmp	w19, #0x0
    ee20:	mov	w8, #0x2                   	// #2
    ee24:	cset	w9, ne  // ne = any
    ee28:	csel	w8, w8, w9, lt  // lt = tstop
    ee2c:	cmp	w20, #0x0
    ee30:	cset	w9, ne  // ne = any
    ee34:	lsl	w9, w9, #2
    ee38:	mov	w10, #0x8                   	// #8
    ee3c:	csel	w9, w10, w9, lt  // lt = tstop
    ee40:	orr	w0, w9, w8
    ee44:	ldp	x20, x19, [sp, #192]
    ee48:	ldp	x22, x21, [sp, #176]
    ee4c:	ldp	x24, x23, [sp, #160]
    ee50:	ldr	x25, [sp, #144]
    ee54:	ldp	x29, x30, [sp, #128]
    ee58:	add	sp, sp, #0xd0
    ee5c:	ret
    ee60:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    ee64:	ldr	x8, [x8, #4008]
    ee68:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    ee6c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    ee70:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    ee74:	ldr	x0, [x8]
    ee78:	add	x1, x1, #0xba0
    ee7c:	add	x2, x2, #0xe43
    ee80:	add	x4, x4, #0xe51
    ee84:	mov	w3, #0x40                  	// #64
    ee88:	bl	56a0 <fprintf@plt>
    ee8c:	bl	5110 <abort@plt>
    ee90:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    ee94:	ldr	x8, [x8, #4008]
    ee98:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    ee9c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    eea0:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    eea4:	ldr	x0, [x8]
    eea8:	add	x1, x1, #0xba0
    eeac:	add	x2, x2, #0xe43
    eeb0:	add	x4, x4, #0xe58
    eeb4:	mov	w3, #0x46                  	// #70
    eeb8:	bl	56a0 <fprintf@plt>
    eebc:	bl	5110 <abort@plt>
    eec0:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    eec4:	ldr	x8, [x8, #4008]
    eec8:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    eecc:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    eed0:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    eed4:	ldr	x0, [x8]
    eed8:	add	x1, x1, #0xba0
    eedc:	add	x2, x2, #0xe43
    eee0:	add	x4, x4, #0xe5f
    eee4:	mov	w3, #0x4d                  	// #77
    eee8:	bl	56a0 <fprintf@plt>
    eeec:	bl	5110 <abort@plt>
    eef0:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    eef4:	ldr	x8, [x8, #4008]
    eef8:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    eefc:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    ef00:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    ef04:	ldr	x0, [x8]
    ef08:	add	x1, x1, #0xba0
    ef0c:	add	x2, x2, #0xe43
    ef10:	add	x4, x4, #0xe70
    ef14:	mov	w3, #0x56                  	// #86
    ef18:	bl	56a0 <fprintf@plt>
    ef1c:	bl	5110 <abort@plt>
    ef20:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    ef24:	ldr	x8, [x8, #4008]
    ef28:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    ef2c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    ef30:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    ef34:	ldr	x0, [x8]
    ef38:	add	x1, x1, #0xba0
    ef3c:	add	x2, x2, #0xe43
    ef40:	add	x4, x4, #0xeb1
    ef44:	mov	w3, #0x6f                  	// #111
    ef48:	bl	56a0 <fprintf@plt>
    ef4c:	bl	5110 <abort@plt>
    ef50:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    ef54:	ldr	x8, [x8, #4008]
    ef58:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    ef5c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    ef60:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    ef64:	ldr	x0, [x8]
    ef68:	add	x1, x1, #0xba0
    ef6c:	add	x2, x2, #0xe43
    ef70:	add	x4, x4, #0xed7
    ef74:	mov	w3, #0x86                  	// #134
    ef78:	bl	56a0 <fprintf@plt>
    ef7c:	bl	5110 <abort@plt>
    ef80:	cbz	x1, efa4 <mpc_rootofunity@@Base+0x6ac>
    ef84:	stp	x29, x30, [sp, #-16]!
    ef88:	udiv	x8, x0, x1
    ef8c:	msub	x8, x8, x1, x0
    ef90:	mov	x0, x1
    ef94:	mov	x1, x8
    ef98:	mov	x29, sp
    ef9c:	bl	ef80 <mpc_rootofunity@@Base+0x688>
    efa0:	ldp	x29, x30, [sp], #16
    efa4:	ret

000000000000efa8 <mpc_urandom@@Base>:
    efa8:	stp	x29, x30, [sp, #-48]!
    efac:	str	x21, [sp, #16]
    efb0:	stp	x20, x19, [sp, #32]
    efb4:	mov	x29, sp
    efb8:	mov	x19, x1
    efbc:	mov	x20, x0
    efc0:	bl	5600 <mpfr_urandomb@plt>
    efc4:	mov	w21, w0
    efc8:	add	x0, x20, #0x20
    efcc:	mov	x1, x19
    efd0:	bl	5600 <mpfr_urandomb@plt>
    efd4:	cmp	w21, #0x0
    efd8:	ldp	x20, x19, [sp, #32]
    efdc:	ldr	x21, [sp, #16]
    efe0:	cset	w8, ne  // ne = any
    efe4:	cmp	w0, #0x0
    efe8:	cset	w9, ne  // ne = any
    efec:	and	w0, w8, w9
    eff0:	ldp	x29, x30, [sp], #48
    eff4:	ret

000000000000eff8 <mpc_set@@Base>:
    eff8:	stp	x29, x30, [sp, #-48]!
    effc:	stp	x22, x21, [sp, #16]
    f000:	stp	x20, x19, [sp, #32]
    f004:	ldr	w3, [x1, #8]
    f008:	mov	w19, w2
    f00c:	and	w2, w2, #0xf
    f010:	mov	x29, sp
    f014:	mov	x20, x1
    f018:	mov	x21, x0
    f01c:	bl	52e0 <mpfr_set4@plt>
    f020:	ldr	w3, [x20, #40]
    f024:	mov	w22, w0
    f028:	add	x0, x21, #0x20
    f02c:	add	x1, x20, #0x20
    f030:	asr	w2, w19, #4
    f034:	bl	52e0 <mpfr_set4@plt>
    f038:	cmp	w22, #0x0
    f03c:	mov	w8, #0x2                   	// #2
    f040:	cset	w9, ne  // ne = any
    f044:	csel	w8, w8, w9, lt  // lt = tstop
    f048:	cmp	w0, #0x0
    f04c:	cset	w9, ne  // ne = any
    f050:	ldp	x20, x19, [sp, #32]
    f054:	ldp	x22, x21, [sp, #16]
    f058:	lsl	w9, w9, #2
    f05c:	mov	w10, #0x8                   	// #8
    f060:	csel	w9, w10, w9, lt  // lt = tstop
    f064:	orr	w0, w9, w8
    f068:	ldp	x29, x30, [sp], #48
    f06c:	ret

000000000000f070 <mpc_set_prec@@Base>:
    f070:	stp	x29, x30, [sp, #-32]!
    f074:	stp	x20, x19, [sp, #16]
    f078:	mov	x29, sp
    f07c:	mov	x19, x1
    f080:	mov	x20, x0
    f084:	bl	4d50 <mpfr_set_prec@plt>
    f088:	add	x0, x20, #0x20
    f08c:	mov	x1, x19
    f090:	bl	4d50 <mpfr_set_prec@plt>
    f094:	ldp	x20, x19, [sp, #16]
    f098:	ldp	x29, x30, [sp], #32
    f09c:	ret

000000000000f0a0 <mpc_set_str@@Base>:
    f0a0:	sub	sp, sp, #0x30
    f0a4:	mov	w4, w3
    f0a8:	mov	w3, w2
    f0ac:	add	x2, sp, #0x8
    f0b0:	stp	x29, x30, [sp, #16]
    f0b4:	stp	x20, x19, [sp, #32]
    f0b8:	add	x29, sp, #0x10
    f0bc:	mov	x19, x0
    f0c0:	bl	5010 <mpc_strtoc@plt>
    f0c4:	cmn	w0, #0x1
    f0c8:	b.eq	f104 <mpc_set_str@@Base+0x64>  // b.none
    f0cc:	mov	w20, w0
    f0d0:	bl	5280 <__ctype_b_loc@plt>
    f0d4:	ldr	x9, [sp, #8]
    f0d8:	ldr	x10, [x0]
    f0dc:	ldrb	w8, [x9]
    f0e0:	ldrh	w10, [x10, x8, lsl #1]
    f0e4:	tbz	w10, #13, f100 <mpc_set_str@@Base+0x60>
    f0e8:	add	x9, x9, #0x1
    f0ec:	str	x9, [sp, #8]
    f0f0:	ldr	x10, [x0]
    f0f4:	ldrb	w8, [x9], #1
    f0f8:	ldrh	w10, [x10, x8, lsl #1]
    f0fc:	tbnz	w10, #13, f0ec <mpc_set_str@@Base+0x4c>
    f100:	cbz	w8, f118 <mpc_set_str@@Base+0x78>
    f104:	mov	x0, x19
    f108:	bl	4b10 <mpfr_set_nan@plt>
    f10c:	add	x0, x19, #0x20
    f110:	bl	4b10 <mpfr_set_nan@plt>
    f114:	mov	w20, #0xffffffff            	// #-1
    f118:	mov	w0, w20
    f11c:	ldp	x20, x19, [sp, #32]
    f120:	ldp	x29, x30, [sp, #16]
    f124:	add	sp, sp, #0x30
    f128:	ret

000000000000f12c <mpc_set_fr@@Base>:
    f12c:	stp	x29, x30, [sp, #-32]!
    f130:	and	w2, w2, #0xf
    f134:	str	x19, [sp, #16]
    f138:	mov	x29, sp
    f13c:	mov	x19, x0
    f140:	bl	4f80 <mpfr_set@plt>
    f144:	mov	w8, #0x1                   	// #1
    f148:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f14c:	str	w8, [x19, #40]
    f150:	str	x9, [x19, #48]
    f154:	ldr	x19, [sp, #16]
    f158:	cmp	w0, #0x0
    f15c:	cset	w8, ne  // ne = any
    f160:	mov	w10, #0x2                   	// #2
    f164:	csel	w0, w10, w8, lt  // lt = tstop
    f168:	ldp	x29, x30, [sp], #32
    f16c:	ret

000000000000f170 <mpc_set_d@@Base>:
    f170:	stp	x29, x30, [sp, #-32]!
    f174:	and	w1, w1, #0xf
    f178:	str	x19, [sp, #16]
    f17c:	mov	x29, sp
    f180:	mov	x19, x0
    f184:	bl	4d00 <mpfr_set_d@plt>
    f188:	mov	w8, #0x1                   	// #1
    f18c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f190:	str	w8, [x19, #40]
    f194:	str	x9, [x19, #48]
    f198:	ldr	x19, [sp, #16]
    f19c:	cmp	w0, #0x0
    f1a0:	cset	w8, ne  // ne = any
    f1a4:	mov	w10, #0x2                   	// #2
    f1a8:	csel	w0, w10, w8, lt  // lt = tstop
    f1ac:	ldp	x29, x30, [sp], #32
    f1b0:	ret

000000000000f1b4 <mpc_set_ld@@Base>:
    f1b4:	stp	x29, x30, [sp, #-32]!
    f1b8:	and	w1, w1, #0xf
    f1bc:	str	x19, [sp, #16]
    f1c0:	mov	x29, sp
    f1c4:	mov	x19, x0
    f1c8:	bl	4a80 <mpfr_set_ld@plt>
    f1cc:	mov	w8, #0x1                   	// #1
    f1d0:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f1d4:	str	w8, [x19, #40]
    f1d8:	str	x9, [x19, #48]
    f1dc:	ldr	x19, [sp, #16]
    f1e0:	cmp	w0, #0x0
    f1e4:	cset	w8, ne  // ne = any
    f1e8:	mov	w10, #0x2                   	// #2
    f1ec:	csel	w0, w10, w8, lt  // lt = tstop
    f1f0:	ldp	x29, x30, [sp], #32
    f1f4:	ret

000000000000f1f8 <mpc_set_ui@@Base>:
    f1f8:	stp	x29, x30, [sp, #-32]!
    f1fc:	and	w2, w2, #0xf
    f200:	str	x19, [sp, #16]
    f204:	mov	x29, sp
    f208:	mov	x19, x0
    f20c:	bl	5610 <mpfr_set_ui@plt>
    f210:	mov	w8, #0x1                   	// #1
    f214:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f218:	str	w8, [x19, #40]
    f21c:	str	x9, [x19, #48]
    f220:	ldr	x19, [sp, #16]
    f224:	cmp	w0, #0x0
    f228:	cset	w8, ne  // ne = any
    f22c:	mov	w10, #0x2                   	// #2
    f230:	csel	w0, w10, w8, lt  // lt = tstop
    f234:	ldp	x29, x30, [sp], #32
    f238:	ret

000000000000f23c <mpc_set_si@@Base>:
    f23c:	stp	x29, x30, [sp, #-32]!
    f240:	and	w2, w2, #0xf
    f244:	str	x19, [sp, #16]
    f248:	mov	x29, sp
    f24c:	mov	x19, x0
    f250:	bl	5380 <mpfr_set_si@plt>
    f254:	mov	w8, #0x1                   	// #1
    f258:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f25c:	str	w8, [x19, #40]
    f260:	str	x9, [x19, #48]
    f264:	ldr	x19, [sp, #16]
    f268:	cmp	w0, #0x0
    f26c:	cset	w8, ne  // ne = any
    f270:	mov	w10, #0x2                   	// #2
    f274:	csel	w0, w10, w8, lt  // lt = tstop
    f278:	ldp	x29, x30, [sp], #32
    f27c:	ret

000000000000f280 <mpc_set_z@@Base>:
    f280:	stp	x29, x30, [sp, #-32]!
    f284:	and	w2, w2, #0xf
    f288:	str	x19, [sp, #16]
    f28c:	mov	x29, sp
    f290:	mov	x19, x0
    f294:	bl	4fc0 <mpfr_set_z@plt>
    f298:	mov	w8, #0x1                   	// #1
    f29c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f2a0:	str	w8, [x19, #40]
    f2a4:	str	x9, [x19, #48]
    f2a8:	ldr	x19, [sp, #16]
    f2ac:	cmp	w0, #0x0
    f2b0:	cset	w8, ne  // ne = any
    f2b4:	mov	w10, #0x2                   	// #2
    f2b8:	csel	w0, w10, w8, lt  // lt = tstop
    f2bc:	ldp	x29, x30, [sp], #32
    f2c0:	ret

000000000000f2c4 <mpc_set_q@@Base>:
    f2c4:	stp	x29, x30, [sp, #-32]!
    f2c8:	and	w2, w2, #0xf
    f2cc:	str	x19, [sp, #16]
    f2d0:	mov	x29, sp
    f2d4:	mov	x19, x0
    f2d8:	bl	53a0 <mpfr_set_q@plt>
    f2dc:	mov	w8, #0x1                   	// #1
    f2e0:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f2e4:	str	w8, [x19, #40]
    f2e8:	str	x9, [x19, #48]
    f2ec:	ldr	x19, [sp, #16]
    f2f0:	cmp	w0, #0x0
    f2f4:	cset	w8, ne  // ne = any
    f2f8:	mov	w10, #0x2                   	// #2
    f2fc:	csel	w0, w10, w8, lt  // lt = tstop
    f300:	ldp	x29, x30, [sp], #32
    f304:	ret

000000000000f308 <mpc_set_f@@Base>:
    f308:	stp	x29, x30, [sp, #-32]!
    f30c:	and	w2, w2, #0xf
    f310:	str	x19, [sp, #16]
    f314:	mov	x29, sp
    f318:	mov	x19, x0
    f31c:	bl	4c30 <mpfr_set_f@plt>
    f320:	mov	w8, #0x1                   	// #1
    f324:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f328:	str	w8, [x19, #40]
    f32c:	str	x9, [x19, #48]
    f330:	ldr	x19, [sp, #16]
    f334:	cmp	w0, #0x0
    f338:	cset	w8, ne  // ne = any
    f33c:	mov	w10, #0x2                   	// #2
    f340:	csel	w0, w10, w8, lt  // lt = tstop
    f344:	ldp	x29, x30, [sp], #32
    f348:	ret

000000000000f34c <mpc_set_uj@@Base>:
    f34c:	stp	x29, x30, [sp, #-32]!
    f350:	and	w2, w2, #0xf
    f354:	str	x19, [sp, #16]
    f358:	mov	x29, sp
    f35c:	mov	x19, x0
    f360:	bl	5510 <__gmpfr_set_uj@plt>
    f364:	mov	w8, #0x1                   	// #1
    f368:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f36c:	str	w8, [x19, #40]
    f370:	str	x9, [x19, #48]
    f374:	ldr	x19, [sp, #16]
    f378:	cmp	w0, #0x0
    f37c:	cset	w8, ne  // ne = any
    f380:	mov	w10, #0x2                   	// #2
    f384:	csel	w0, w10, w8, lt  // lt = tstop
    f388:	ldp	x29, x30, [sp], #32
    f38c:	ret

000000000000f390 <mpc_set_sj@@Base>:
    f390:	stp	x29, x30, [sp, #-32]!
    f394:	and	w2, w2, #0xf
    f398:	str	x19, [sp, #16]
    f39c:	mov	x29, sp
    f3a0:	mov	x19, x0
    f3a4:	bl	4e60 <__gmpfr_set_sj@plt>
    f3a8:	mov	w8, #0x1                   	// #1
    f3ac:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f3b0:	str	w8, [x19, #40]
    f3b4:	str	x9, [x19, #48]
    f3b8:	ldr	x19, [sp, #16]
    f3bc:	cmp	w0, #0x0
    f3c0:	cset	w8, ne  // ne = any
    f3c4:	mov	w10, #0x2                   	// #2
    f3c8:	csel	w0, w10, w8, lt  // lt = tstop
    f3cc:	ldp	x29, x30, [sp], #32
    f3d0:	ret

000000000000f3d4 <mpc_set_dc@@Base>:
    f3d4:	stp	x29, x30, [sp, #-16]!
    f3d8:	mov	x29, sp
    f3dc:	bl	50a0 <mpc_set_d_d@plt>
    f3e0:	ldp	x29, x30, [sp], #16
    f3e4:	ret

000000000000f3e8 <mpc_set_ldc@@Base>:
    f3e8:	stp	x29, x30, [sp, #-16]!
    f3ec:	mov	x29, sp
    f3f0:	bl	4e20 <mpc_set_ld_ld@plt>
    f3f4:	ldp	x29, x30, [sp], #16
    f3f8:	ret

000000000000f3fc <mpc_set_nan@@Base>:
    f3fc:	stp	x29, x30, [sp, #-32]!
    f400:	str	x19, [sp, #16]
    f404:	mov	x29, sp
    f408:	mov	x19, x0
    f40c:	bl	4b10 <mpfr_set_nan@plt>
    f410:	add	x0, x19, #0x20
    f414:	bl	4b10 <mpfr_set_nan@plt>
    f418:	ldr	x19, [sp, #16]
    f41c:	ldp	x29, x30, [sp], #32
    f420:	ret

000000000000f424 <mpc_set_d_d@@Base>:
    f424:	str	d8, [sp, #-48]!
    f428:	stp	x20, x19, [sp, #32]
    f42c:	mov	w19, w1
    f430:	and	w1, w1, #0xf
    f434:	stp	x29, x30, [sp, #8]
    f438:	str	x21, [sp, #24]
    f43c:	mov	x29, sp
    f440:	mov	v8.16b, v1.16b
    f444:	mov	x20, x0
    f448:	bl	4d00 <mpfr_set_d@plt>
    f44c:	mov	w21, w0
    f450:	add	x0, x20, #0x20
    f454:	asr	w1, w19, #4
    f458:	mov	v0.16b, v8.16b
    f45c:	bl	4d00 <mpfr_set_d@plt>
    f460:	cmp	w21, #0x0
    f464:	mov	w8, #0x2                   	// #2
    f468:	cset	w9, ne  // ne = any
    f46c:	csel	w8, w8, w9, lt  // lt = tstop
    f470:	cmp	w0, #0x0
    f474:	cset	w9, ne  // ne = any
    f478:	ldp	x20, x19, [sp, #32]
    f47c:	ldr	x21, [sp, #24]
    f480:	ldp	x29, x30, [sp, #8]
    f484:	lsl	w9, w9, #2
    f488:	mov	w10, #0x8                   	// #8
    f48c:	csel	w9, w10, w9, lt  // lt = tstop
    f490:	orr	w0, w9, w8
    f494:	ldr	d8, [sp], #48
    f498:	ret

000000000000f49c <mpc_set_f_f@@Base>:
    f49c:	stp	x29, x30, [sp, #-48]!
    f4a0:	stp	x20, x19, [sp, #32]
    f4a4:	mov	x20, x2
    f4a8:	and	w2, w3, #0xf
    f4ac:	stp	x22, x21, [sp, #16]
    f4b0:	mov	x29, sp
    f4b4:	mov	w19, w3
    f4b8:	mov	x21, x0
    f4bc:	bl	4c30 <mpfr_set_f@plt>
    f4c0:	mov	w22, w0
    f4c4:	add	x0, x21, #0x20
    f4c8:	asr	w2, w19, #4
    f4cc:	mov	x1, x20
    f4d0:	bl	4c30 <mpfr_set_f@plt>
    f4d4:	cmp	w22, #0x0
    f4d8:	mov	w8, #0x2                   	// #2
    f4dc:	cset	w9, ne  // ne = any
    f4e0:	csel	w8, w8, w9, lt  // lt = tstop
    f4e4:	cmp	w0, #0x0
    f4e8:	cset	w9, ne  // ne = any
    f4ec:	ldp	x20, x19, [sp, #32]
    f4f0:	ldp	x22, x21, [sp, #16]
    f4f4:	lsl	w9, w9, #2
    f4f8:	mov	w10, #0x8                   	// #8
    f4fc:	csel	w9, w10, w9, lt  // lt = tstop
    f500:	orr	w0, w9, w8
    f504:	ldp	x29, x30, [sp], #48
    f508:	ret

000000000000f50c <mpc_set_fr_fr@@Base>:
    f50c:	stp	x29, x30, [sp, #-48]!
    f510:	stp	x20, x19, [sp, #32]
    f514:	mov	x20, x2
    f518:	and	w2, w3, #0xf
    f51c:	stp	x22, x21, [sp, #16]
    f520:	mov	x29, sp
    f524:	mov	w19, w3
    f528:	mov	x21, x0
    f52c:	bl	4f80 <mpfr_set@plt>
    f530:	mov	w22, w0
    f534:	add	x0, x21, #0x20
    f538:	asr	w2, w19, #4
    f53c:	mov	x1, x20
    f540:	bl	4f80 <mpfr_set@plt>
    f544:	cmp	w22, #0x0
    f548:	mov	w8, #0x2                   	// #2
    f54c:	cset	w9, ne  // ne = any
    f550:	csel	w8, w8, w9, lt  // lt = tstop
    f554:	cmp	w0, #0x0
    f558:	cset	w9, ne  // ne = any
    f55c:	ldp	x20, x19, [sp, #32]
    f560:	ldp	x22, x21, [sp, #16]
    f564:	lsl	w9, w9, #2
    f568:	mov	w10, #0x8                   	// #8
    f56c:	csel	w9, w10, w9, lt  // lt = tstop
    f570:	orr	w0, w9, w8
    f574:	ldp	x29, x30, [sp], #48
    f578:	ret

000000000000f57c <mpc_set_ld_ld@@Base>:
    f57c:	sub	sp, sp, #0x40
    f580:	stp	x20, x19, [sp, #48]
    f584:	mov	w19, w1
    f588:	and	w1, w1, #0xf
    f58c:	stp	x29, x30, [sp, #16]
    f590:	str	x21, [sp, #32]
    f594:	add	x29, sp, #0x10
    f598:	str	q1, [sp]
    f59c:	mov	x20, x0
    f5a0:	bl	4a80 <mpfr_set_ld@plt>
    f5a4:	ldr	q0, [sp]
    f5a8:	mov	w21, w0
    f5ac:	add	x0, x20, #0x20
    f5b0:	asr	w1, w19, #4
    f5b4:	bl	4a80 <mpfr_set_ld@plt>
    f5b8:	cmp	w21, #0x0
    f5bc:	mov	w8, #0x2                   	// #2
    f5c0:	cset	w9, ne  // ne = any
    f5c4:	csel	w8, w8, w9, lt  // lt = tstop
    f5c8:	cmp	w0, #0x0
    f5cc:	cset	w9, ne  // ne = any
    f5d0:	ldp	x20, x19, [sp, #48]
    f5d4:	ldr	x21, [sp, #32]
    f5d8:	ldp	x29, x30, [sp, #16]
    f5dc:	lsl	w9, w9, #2
    f5e0:	mov	w10, #0x8                   	// #8
    f5e4:	csel	w9, w10, w9, lt  // lt = tstop
    f5e8:	orr	w0, w9, w8
    f5ec:	add	sp, sp, #0x40
    f5f0:	ret

000000000000f5f4 <mpc_set_q_q@@Base>:
    f5f4:	stp	x29, x30, [sp, #-48]!
    f5f8:	stp	x20, x19, [sp, #32]
    f5fc:	mov	x20, x2
    f600:	and	w2, w3, #0xf
    f604:	stp	x22, x21, [sp, #16]
    f608:	mov	x29, sp
    f60c:	mov	w19, w3
    f610:	mov	x21, x0
    f614:	bl	53a0 <mpfr_set_q@plt>
    f618:	mov	w22, w0
    f61c:	add	x0, x21, #0x20
    f620:	asr	w2, w19, #4
    f624:	mov	x1, x20
    f628:	bl	53a0 <mpfr_set_q@plt>
    f62c:	cmp	w22, #0x0
    f630:	mov	w8, #0x2                   	// #2
    f634:	cset	w9, ne  // ne = any
    f638:	csel	w8, w8, w9, lt  // lt = tstop
    f63c:	cmp	w0, #0x0
    f640:	cset	w9, ne  // ne = any
    f644:	ldp	x20, x19, [sp, #32]
    f648:	ldp	x22, x21, [sp, #16]
    f64c:	lsl	w9, w9, #2
    f650:	mov	w10, #0x8                   	// #8
    f654:	csel	w9, w10, w9, lt  // lt = tstop
    f658:	orr	w0, w9, w8
    f65c:	ldp	x29, x30, [sp], #48
    f660:	ret

000000000000f664 <mpc_set_si_si@@Base>:
    f664:	stp	x29, x30, [sp, #-48]!
    f668:	stp	x20, x19, [sp, #32]
    f66c:	mov	x20, x2
    f670:	and	w2, w3, #0xf
    f674:	stp	x22, x21, [sp, #16]
    f678:	mov	x29, sp
    f67c:	mov	w19, w3
    f680:	mov	x21, x0
    f684:	bl	5380 <mpfr_set_si@plt>
    f688:	mov	w22, w0
    f68c:	add	x0, x21, #0x20
    f690:	asr	w2, w19, #4
    f694:	mov	x1, x20
    f698:	bl	5380 <mpfr_set_si@plt>
    f69c:	cmp	w22, #0x0
    f6a0:	mov	w8, #0x2                   	// #2
    f6a4:	cset	w9, ne  // ne = any
    f6a8:	csel	w8, w8, w9, lt  // lt = tstop
    f6ac:	cmp	w0, #0x0
    f6b0:	cset	w9, ne  // ne = any
    f6b4:	ldp	x20, x19, [sp, #32]
    f6b8:	ldp	x22, x21, [sp, #16]
    f6bc:	lsl	w9, w9, #2
    f6c0:	mov	w10, #0x8                   	// #8
    f6c4:	csel	w9, w10, w9, lt  // lt = tstop
    f6c8:	orr	w0, w9, w8
    f6cc:	ldp	x29, x30, [sp], #48
    f6d0:	ret

000000000000f6d4 <mpc_set_ui_ui@@Base>:
    f6d4:	stp	x29, x30, [sp, #-48]!
    f6d8:	stp	x20, x19, [sp, #32]
    f6dc:	mov	x20, x2
    f6e0:	and	w2, w3, #0xf
    f6e4:	stp	x22, x21, [sp, #16]
    f6e8:	mov	x29, sp
    f6ec:	mov	w19, w3
    f6f0:	mov	x21, x0
    f6f4:	bl	5610 <mpfr_set_ui@plt>
    f6f8:	mov	w22, w0
    f6fc:	add	x0, x21, #0x20
    f700:	asr	w2, w19, #4
    f704:	mov	x1, x20
    f708:	bl	5610 <mpfr_set_ui@plt>
    f70c:	cmp	w22, #0x0
    f710:	mov	w8, #0x2                   	// #2
    f714:	cset	w9, ne  // ne = any
    f718:	csel	w8, w8, w9, lt  // lt = tstop
    f71c:	cmp	w0, #0x0
    f720:	cset	w9, ne  // ne = any
    f724:	ldp	x20, x19, [sp, #32]
    f728:	ldp	x22, x21, [sp, #16]
    f72c:	lsl	w9, w9, #2
    f730:	mov	w10, #0x8                   	// #8
    f734:	csel	w9, w10, w9, lt  // lt = tstop
    f738:	orr	w0, w9, w8
    f73c:	ldp	x29, x30, [sp], #48
    f740:	ret

000000000000f744 <mpc_set_z_z@@Base>:
    f744:	stp	x29, x30, [sp, #-48]!
    f748:	stp	x20, x19, [sp, #32]
    f74c:	mov	x20, x2
    f750:	and	w2, w3, #0xf
    f754:	stp	x22, x21, [sp, #16]
    f758:	mov	x29, sp
    f75c:	mov	w19, w3
    f760:	mov	x21, x0
    f764:	bl	4fc0 <mpfr_set_z@plt>
    f768:	mov	w22, w0
    f76c:	add	x0, x21, #0x20
    f770:	asr	w2, w19, #4
    f774:	mov	x1, x20
    f778:	bl	4fc0 <mpfr_set_z@plt>
    f77c:	cmp	w22, #0x0
    f780:	mov	w8, #0x2                   	// #2
    f784:	cset	w9, ne  // ne = any
    f788:	csel	w8, w8, w9, lt  // lt = tstop
    f78c:	cmp	w0, #0x0
    f790:	cset	w9, ne  // ne = any
    f794:	ldp	x20, x19, [sp, #32]
    f798:	ldp	x22, x21, [sp, #16]
    f79c:	lsl	w9, w9, #2
    f7a0:	mov	w10, #0x8                   	// #8
    f7a4:	csel	w9, w10, w9, lt  // lt = tstop
    f7a8:	orr	w0, w9, w8
    f7ac:	ldp	x29, x30, [sp], #48
    f7b0:	ret

000000000000f7b4 <mpc_set_uj_uj@@Base>:
    f7b4:	stp	x29, x30, [sp, #-48]!
    f7b8:	stp	x20, x19, [sp, #32]
    f7bc:	mov	x20, x2
    f7c0:	and	w2, w3, #0xf
    f7c4:	stp	x22, x21, [sp, #16]
    f7c8:	mov	x29, sp
    f7cc:	mov	w19, w3
    f7d0:	mov	x21, x0
    f7d4:	bl	5510 <__gmpfr_set_uj@plt>
    f7d8:	mov	w22, w0
    f7dc:	add	x0, x21, #0x20
    f7e0:	asr	w2, w19, #4
    f7e4:	mov	x1, x20
    f7e8:	bl	5510 <__gmpfr_set_uj@plt>
    f7ec:	cmp	w22, #0x0
    f7f0:	mov	w8, #0x2                   	// #2
    f7f4:	cset	w9, ne  // ne = any
    f7f8:	csel	w8, w8, w9, lt  // lt = tstop
    f7fc:	cmp	w0, #0x0
    f800:	cset	w9, ne  // ne = any
    f804:	ldp	x20, x19, [sp, #32]
    f808:	ldp	x22, x21, [sp, #16]
    f80c:	lsl	w9, w9, #2
    f810:	mov	w10, #0x8                   	// #8
    f814:	csel	w9, w10, w9, lt  // lt = tstop
    f818:	orr	w0, w9, w8
    f81c:	ldp	x29, x30, [sp], #48
    f820:	ret

000000000000f824 <mpc_set_sj_sj@@Base>:
    f824:	stp	x29, x30, [sp, #-48]!
    f828:	stp	x20, x19, [sp, #32]
    f82c:	mov	x20, x2
    f830:	and	w2, w3, #0xf
    f834:	stp	x22, x21, [sp, #16]
    f838:	mov	x29, sp
    f83c:	mov	w19, w3
    f840:	mov	x21, x0
    f844:	bl	4e60 <__gmpfr_set_sj@plt>
    f848:	mov	w22, w0
    f84c:	add	x0, x21, #0x20
    f850:	asr	w2, w19, #4
    f854:	mov	x1, x20
    f858:	bl	4e60 <__gmpfr_set_sj@plt>
    f85c:	cmp	w22, #0x0
    f860:	mov	w8, #0x2                   	// #2
    f864:	cset	w9, ne  // ne = any
    f868:	csel	w8, w8, w9, lt  // lt = tstop
    f86c:	cmp	w0, #0x0
    f870:	cset	w9, ne  // ne = any
    f874:	ldp	x20, x19, [sp, #32]
    f878:	ldp	x22, x21, [sp, #16]
    f87c:	lsl	w9, w9, #2
    f880:	mov	w10, #0x8                   	// #8
    f884:	csel	w9, w10, w9, lt  // lt = tstop
    f888:	orr	w0, w9, w8
    f88c:	ldp	x29, x30, [sp], #48
    f890:	ret

000000000000f894 <mpc_sin@@Base>:
    f894:	stp	x29, x30, [sp, #-16]!
    f898:	mov	w3, w2
    f89c:	mov	x2, x1
    f8a0:	mov	x1, xzr
    f8a4:	mov	w4, wzr
    f8a8:	mov	x29, sp
    f8ac:	bl	5250 <mpc_sin_cos@plt>
    f8b0:	and	w0, w0, #0xf
    f8b4:	ldp	x29, x30, [sp], #16
    f8b8:	ret

000000000000f8bc <mpc_fix_inf@@Base>:
    f8bc:	stp	x29, x30, [sp, #-32]!
    f8c0:	ldr	x8, [x0, #16]
    f8c4:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    f8c8:	str	x19, [sp, #16]
    f8cc:	mov	x29, sp
    f8d0:	cmp	x8, x9
    f8d4:	b.ne	f970 <mpc_fix_inf@@Base+0xb4>  // b.any
    f8d8:	mov	x19, x0
    f8dc:	cmp	w1, #0x1
    f8e0:	b.eq	f900 <mpc_fix_inf@@Base+0x44>  // b.none
    f8e4:	ldr	w0, [x19, #8]
    f8e8:	cmp	w1, #0x2
    f8ec:	b.ne	f8f4 <mpc_fix_inf@@Base+0x38>  // b.any
    f8f0:	tbnz	w0, #31, f900 <mpc_fix_inf@@Base+0x44>
    f8f4:	cmp	w1, #0x3
    f8f8:	b.ne	f958 <mpc_fix_inf@@Base+0x9c>  // b.any
    f8fc:	tbnz	w0, #31, f958 <mpc_fix_inf@@Base+0x9c>
    f900:	mov	x9, #0x2                   	// #2
    f904:	movk	x9, #0x8000, lsl #48
    f908:	cmp	x8, x9
    f90c:	b.gt	f91c <mpc_fix_inf@@Base+0x60>
    f910:	b.ne	f924 <mpc_fix_inf@@Base+0x68>  // b.any
    f914:	bl	4bd0 <mpfr_set_erangeflag@plt>
    f918:	b	f924 <mpc_fix_inf@@Base+0x68>
    f91c:	ldr	w8, [x19, #8]
    f920:	tbnz	w8, #31, f964 <mpc_fix_inf@@Base+0xa8>
    f924:	mov	x0, x19
    f928:	bl	4c80 <mpfr_nextbelow@plt>
    f92c:	ldr	x8, [x19, #16]
    f930:	mov	x9, #0x2                   	// #2
    f934:	movk	x9, #0x8000, lsl #48
    f938:	cmp	x8, x9
    f93c:	b.gt	f950 <mpc_fix_inf@@Base+0x94>
    f940:	b.ne	f948 <mpc_fix_inf@@Base+0x8c>  // b.any
    f944:	bl	4bd0 <mpfr_set_erangeflag@plt>
    f948:	mov	w0, wzr
    f94c:	b	f958 <mpc_fix_inf@@Base+0x9c>
    f950:	ldr	w8, [x19, #8]
    f954:	neg	w0, w8
    f958:	ldr	x19, [sp, #16]
    f95c:	ldp	x29, x30, [sp], #32
    f960:	ret
    f964:	mov	x0, x19
    f968:	bl	4ef0 <mpfr_nextabove@plt>
    f96c:	b	f92c <mpc_fix_inf@@Base+0x70>
    f970:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
    f974:	ldr	x8, [x8, #4008]
    f978:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
    f97c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
    f980:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
    f984:	ldr	x0, [x8]
    f988:	add	x1, x1, #0xba0
    f98c:	add	x2, x2, #0xefc
    f990:	add	x4, x4, #0xf06
    f994:	mov	w3, #0x115                 	// #277
    f998:	bl	56a0 <fprintf@plt>
    f99c:	bl	5110 <abort@plt>

000000000000f9a0 <mpc_fix_zero@@Base>:
    f9a0:	stp	x29, x30, [sp, #-16]!
    f9a4:	ldr	w8, [x0, #8]
    f9a8:	cmp	w1, #0x3
    f9ac:	mov	x29, sp
    f9b0:	b.ne	f9b8 <mpc_fix_zero@@Base+0x18>  // b.any
    f9b4:	tbnz	w8, #31, f9c4 <mpc_fix_zero@@Base+0x24>
    f9b8:	cmp	w1, #0x2
    f9bc:	b.ne	f9d8 <mpc_fix_zero@@Base+0x38>  // b.any
    f9c0:	tbnz	w8, #31, f9d8 <mpc_fix_zero@@Base+0x38>
    f9c4:	tbnz	w8, #31, f9ec <mpc_fix_zero@@Base+0x4c>
    f9c8:	bl	4ef0 <mpfr_nextabove@plt>
    f9cc:	mov	w0, #0x1                   	// #1
    f9d0:	ldp	x29, x30, [sp], #16
    f9d4:	ret
    f9d8:	cmp	w8, #0x0
    f9dc:	mov	w8, #0xffffffff            	// #-1
    f9e0:	cneg	w0, w8, lt  // lt = tstop
    f9e4:	ldp	x29, x30, [sp], #16
    f9e8:	ret
    f9ec:	bl	4c80 <mpfr_nextbelow@plt>
    f9f0:	mov	w0, #0xffffffff            	// #-1
    f9f4:	ldp	x29, x30, [sp], #16
    f9f8:	ret

000000000000f9fc <mpc_sin_cos@@Base>:
    f9fc:	sub	sp, sp, #0x140
    fa00:	stp	x22, x21, [sp, #288]
    fa04:	mov	x22, x0
    fa08:	mov	x0, x2
    fa0c:	stp	x29, x30, [sp, #224]
    fa10:	stp	x28, x27, [sp, #240]
    fa14:	stp	x26, x25, [sp, #256]
    fa18:	stp	x24, x23, [sp, #272]
    fa1c:	stp	x20, x19, [sp, #304]
    fa20:	add	x29, sp, #0xe0
    fa24:	mov	w19, w4
    fa28:	mov	w21, w3
    fa2c:	mov	x23, x2
    fa30:	mov	x20, x1
    fa34:	bl	55d0 <mpfr_number_p@plt>
    fa38:	cbz	w0, fa78 <mpc_sin_cos@@Base+0x7c>
    fa3c:	add	x24, x23, #0x20
    fa40:	mov	x0, x24
    fa44:	bl	55d0 <mpfr_number_p@plt>
    fa48:	cbz	w0, fa78 <mpc_sin_cos@@Base+0x7c>
    fa4c:	ldr	x8, [x23, #48]
    fa50:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    fa54:	cmp	x8, x10
    fa58:	b.ne	fab4 <mpc_sin_cos@@Base+0xb8>  // b.any
    fa5c:	mov	x0, x22
    fa60:	mov	x1, x20
    fa64:	mov	x2, x23
    fa68:	mov	w3, w21
    fa6c:	mov	w4, w19
    fa70:	bl	10394 <mpc_sin_cos@@Base+0x998>
    fa74:	b	fa94 <mpc_sin_cos@@Base+0x98>
    fa78:	mov	x0, x22
    fa7c:	mov	x1, x20
    fa80:	mov	x2, x23
    fa84:	mov	w3, w21
    fa88:	mov	w4, w19
    fa8c:	bl	ff50 <mpc_sin_cos@@Base+0x554>
    fa90:	mov	w0, wzr
    fa94:	ldp	x20, x19, [sp, #304]
    fa98:	ldp	x22, x21, [sp, #288]
    fa9c:	ldp	x24, x23, [sp, #272]
    faa0:	ldp	x26, x25, [sp, #256]
    faa4:	ldp	x28, x27, [sp, #240]
    faa8:	ldp	x29, x30, [sp, #224]
    faac:	add	sp, sp, #0x140
    fab0:	ret
    fab4:	ldr	x9, [x23, #16]
    fab8:	cmp	x9, x10
    fabc:	b.ne	fadc <mpc_sin_cos@@Base+0xe0>  // b.any
    fac0:	mov	x0, x22
    fac4:	mov	x1, x20
    fac8:	mov	x2, x23
    facc:	mov	w3, w21
    fad0:	mov	w4, w19
    fad4:	bl	1050c <mpc_sin_cos@@Base+0xb10>
    fad8:	b	fa94 <mpc_sin_cos@@Base+0x98>
    fadc:	cbz	x22, fb34 <mpc_sin_cos@@Base+0x138>
    fae0:	ldr	x10, [x22]
    fae4:	ldr	x11, [x22, #32]
    fae8:	ldr	x13, [x23]
    faec:	ldr	x14, [x23, #32]
    faf0:	mov	w12, #0x2                   	// #2
    faf4:	cmp	x10, x11
    faf8:	csel	x10, x10, x11, gt
    fafc:	cmp	x10, #0x2
    fb00:	csel	x25, x10, x12, gt
    fb04:	cmp	x13, x14
    fb08:	csel	x10, x13, x14, gt
    fb0c:	cmp	x10, x25
    fb10:	b.gt	fb38 <mpc_sin_cos@@Base+0x13c>
    fb14:	cmp	x9, x8
    fb18:	csel	x8, x8, x9, lt  // lt = tstop
    fb1c:	tbz	x8, #63, fb38 <mpc_sin_cos@@Base+0x13c>
    fb20:	mov	w9, #0x3                   	// #3
    fb24:	sub	x8, x9, x8, lsl #1
    fb28:	cmp	x25, x8
    fb2c:	csel	x25, x8, x25, lt  // lt = tstop
    fb30:	b	fb38 <mpc_sin_cos@@Base+0x13c>
    fb34:	mov	w25, #0x2                   	// #2
    fb38:	cbz	x20, fb54 <mpc_sin_cos@@Base+0x158>
    fb3c:	ldr	x8, [x20]
    fb40:	ldr	x9, [x20, #32]
    fb44:	cmp	x8, x9
    fb48:	csel	x8, x8, x9, gt
    fb4c:	cmp	x25, x8
    fb50:	csel	x25, x25, x8, gt
    fb54:	sub	x0, x29, #0x28
    fb58:	mov	w1, #0x2                   	// #2
    fb5c:	bl	5540 <mpfr_init2@plt>
    fb60:	sub	x0, x29, #0x48
    fb64:	mov	w1, #0x2                   	// #2
    fb68:	bl	5540 <mpfr_init2@plt>
    fb6c:	sub	x0, x29, #0x68
    fb70:	mov	w1, #0x2                   	// #2
    fb74:	bl	5540 <mpfr_init2@plt>
    fb78:	add	x0, sp, #0x58
    fb7c:	mov	w1, #0x2                   	// #2
    fb80:	bl	5540 <mpfr_init2@plt>
    fb84:	add	x0, sp, #0x38
    fb88:	mov	w1, #0x2                   	// #2
    fb8c:	bl	5540 <mpfr_init2@plt>
    fb90:	add	x0, sp, #0x18
    fb94:	mov	w1, #0x2                   	// #2
    fb98:	bl	5540 <mpfr_init2@plt>
    fb9c:	tst	w21, #0xf
    fba0:	cset	w27, eq  // eq = none
    fba4:	cmp	w21, #0x10
    fba8:	cset	w8, cc  // cc = lo, ul, last
    fbac:	tst	w19, #0xf
    fbb0:	cset	w28, eq  // eq = none
    fbb4:	cmp	w19, #0x10
    fbb8:	mov	w26, wzr
    fbbc:	str	x8, [sp, #8]
    fbc0:	cset	w8, cc  // cc = lo, ul, last
    fbc4:	str	x8, [sp, #16]
    fbc8:	b	fbd4 <mpc_sin_cos@@Base+0x1d8>
    fbcc:	add	w26, w26, #0x1
    fbd0:	cbnz	w8, fdd4 <mpc_sin_cos@@Base+0x3d8>
    fbd4:	cmp	w26, #0x1
    fbd8:	b.hi	fbec <mpc_sin_cos@@Base+0x1f0>  // b.pmore
    fbdc:	mov	x0, x25
    fbe0:	bl	4df0 <mpc_ceil_log2@plt>
    fbe4:	add	x8, x0, #0x5
    fbe8:	b	fbf8 <mpc_sin_cos@@Base+0x1fc>
    fbec:	cmp	x25, #0x0
    fbf0:	cinc	x8, x25, lt  // lt = tstop
    fbf4:	asr	x8, x8, #1
    fbf8:	add	x25, x8, x25
    fbfc:	sub	x0, x29, #0x28
    fc00:	mov	x1, x25
    fc04:	bl	4d50 <mpfr_set_prec@plt>
    fc08:	sub	x0, x29, #0x48
    fc0c:	mov	x1, x25
    fc10:	bl	4d50 <mpfr_set_prec@plt>
    fc14:	sub	x0, x29, #0x68
    fc18:	mov	x1, x25
    fc1c:	bl	4d50 <mpfr_set_prec@plt>
    fc20:	add	x0, sp, #0x58
    fc24:	mov	x1, x25
    fc28:	bl	4d50 <mpfr_set_prec@plt>
    fc2c:	add	x0, sp, #0x38
    fc30:	mov	x1, x25
    fc34:	bl	4d50 <mpfr_set_prec@plt>
    fc38:	add	x0, sp, #0x18
    fc3c:	mov	x1, x25
    fc40:	bl	4d50 <mpfr_set_prec@plt>
    fc44:	sub	x0, x29, #0x28
    fc48:	sub	x1, x29, #0x48
    fc4c:	mov	x2, x23
    fc50:	mov	w3, wzr
    fc54:	bl	5620 <mpfr_sin_cos@plt>
    fc58:	sub	x0, x29, #0x68
    fc5c:	add	x1, sp, #0x58
    fc60:	mov	x2, x24
    fc64:	mov	w3, wzr
    fc68:	bl	4cb0 <mpfr_sinh_cosh@plt>
    fc6c:	cbz	x22, fd18 <mpc_sin_cos@@Base+0x31c>
    fc70:	add	x0, sp, #0x38
    fc74:	sub	x1, x29, #0x28
    fc78:	add	x2, sp, #0x58
    fc7c:	mov	w3, wzr
    fc80:	bl	4c40 <mpfr_mul@plt>
    fc84:	add	x0, sp, #0x38
    fc88:	bl	55d0 <mpfr_number_p@plt>
    fc8c:	cbz	w0, fcc0 <mpc_sin_cos@@Base+0x2c4>
    fc90:	ldr	x8, [x22]
    fc94:	sub	x1, x25, #0x2
    fc98:	add	x0, sp, #0x38
    fc9c:	mov	w3, #0x1                   	// #1
    fca0:	add	x4, x8, x27
    fca4:	mov	w2, wzr
    fca8:	bl	5550 <mpfr_can_round@plt>
    fcac:	cmp	w0, #0x0
    fcb0:	cset	w8, ne  // ne = any
    fcb4:	cbnz	w8, fcc8 <mpc_sin_cos@@Base+0x2cc>
    fcb8:	cbnz	x20, fd20 <mpc_sin_cos@@Base+0x324>
    fcbc:	b	fbcc <mpc_sin_cos@@Base+0x1d0>
    fcc0:	mov	w8, #0x1                   	// #1
    fcc4:	cbz	w8, fcb8 <mpc_sin_cos@@Base+0x2bc>
    fcc8:	add	x0, sp, #0x18
    fccc:	sub	x1, x29, #0x48
    fcd0:	sub	x2, x29, #0x68
    fcd4:	mov	w3, wzr
    fcd8:	bl	4c40 <mpfr_mul@plt>
    fcdc:	add	x0, sp, #0x18
    fce0:	bl	55d0 <mpfr_number_p@plt>
    fce4:	cbz	w0, fd18 <mpc_sin_cos@@Base+0x31c>
    fce8:	ldr	x8, [x22, #32]
    fcec:	ldr	x9, [sp, #8]
    fcf0:	sub	x1, x25, #0x2
    fcf4:	add	x0, sp, #0x18
    fcf8:	mov	w3, #0x1                   	// #1
    fcfc:	add	x4, x8, x9
    fd00:	mov	w2, wzr
    fd04:	bl	5550 <mpfr_can_round@plt>
    fd08:	cmp	w0, #0x0
    fd0c:	cset	w8, ne  // ne = any
    fd10:	cbnz	x20, fd20 <mpc_sin_cos@@Base+0x324>
    fd14:	b	fbcc <mpc_sin_cos@@Base+0x1d0>
    fd18:	mov	w8, #0x1                   	// #1
    fd1c:	cbz	x20, fbcc <mpc_sin_cos@@Base+0x1d0>
    fd20:	cbz	w8, fbcc <mpc_sin_cos@@Base+0x1d0>
    fd24:	sub	x0, x29, #0x48
    fd28:	sub	x1, x29, #0x48
    fd2c:	add	x2, sp, #0x58
    fd30:	mov	w3, wzr
    fd34:	bl	4c40 <mpfr_mul@plt>
    fd38:	sub	x0, x29, #0x48
    fd3c:	bl	55d0 <mpfr_number_p@plt>
    fd40:	cbz	w0, fd70 <mpc_sin_cos@@Base+0x374>
    fd44:	ldr	x8, [x20]
    fd48:	sub	x1, x25, #0x2
    fd4c:	sub	x0, x29, #0x48
    fd50:	mov	w3, #0x1                   	// #1
    fd54:	add	x4, x8, x28
    fd58:	mov	w2, wzr
    fd5c:	bl	5550 <mpfr_can_round@plt>
    fd60:	cmp	w0, #0x0
    fd64:	cset	w8, ne  // ne = any
    fd68:	cbz	w8, fbcc <mpc_sin_cos@@Base+0x1d0>
    fd6c:	b	fd78 <mpc_sin_cos@@Base+0x37c>
    fd70:	mov	w8, #0x1                   	// #1
    fd74:	cbz	w8, fbcc <mpc_sin_cos@@Base+0x1d0>
    fd78:	sub	x0, x29, #0x28
    fd7c:	sub	x1, x29, #0x28
    fd80:	sub	x2, x29, #0x68
    fd84:	mov	w3, wzr
    fd88:	bl	4c40 <mpfr_mul@plt>
    fd8c:	sub	x0, x29, #0x28
    fd90:	sub	x1, x29, #0x28
    fd94:	mov	w2, wzr
    fd98:	bl	4c50 <mpfr_neg@plt>
    fd9c:	sub	x0, x29, #0x28
    fda0:	bl	55d0 <mpfr_number_p@plt>
    fda4:	cbz	w0, fdd4 <mpc_sin_cos@@Base+0x3d8>
    fda8:	ldr	x8, [x20, #32]
    fdac:	ldr	x9, [sp, #16]
    fdb0:	sub	x1, x25, #0x2
    fdb4:	sub	x0, x29, #0x28
    fdb8:	mov	w3, #0x1                   	// #1
    fdbc:	add	x4, x8, x9
    fdc0:	mov	w2, wzr
    fdc4:	bl	5550 <mpfr_can_round@plt>
    fdc8:	cmp	w0, #0x0
    fdcc:	cset	w8, ne  // ne = any
    fdd0:	b	fbcc <mpc_sin_cos@@Base+0x1d0>
    fdd4:	cbz	x22, ff0c <mpc_sin_cos@@Base+0x510>
    fdd8:	ldr	w3, [sp, #64]
    fddc:	and	w24, w21, #0xf
    fde0:	add	x1, sp, #0x38
    fde4:	mov	x0, x22
    fde8:	mov	w2, w24
    fdec:	bl	52e0 <mpfr_set4@plt>
    fdf0:	ldr	x8, [sp, #72]
    fdf4:	mov	x25, #0x8000000000000003    	// #-9223372036854775805
    fdf8:	cmp	x8, x25
    fdfc:	b.ne	fe0c <mpc_sin_cos@@Base+0x410>  // b.any
    fe00:	mov	x0, x22
    fe04:	mov	w1, w24
    fe08:	bl	4ec0 <mpc_fix_inf@plt>
    fe0c:	ldr	w3, [sp, #32]
    fe10:	add	x22, x22, #0x20
    fe14:	asr	w21, w21, #4
    fe18:	mov	w23, w0
    fe1c:	add	x1, sp, #0x18
    fe20:	mov	x0, x22
    fe24:	mov	w2, w21
    fe28:	bl	52e0 <mpfr_set4@plt>
    fe2c:	ldr	x8, [sp, #40]
    fe30:	cmp	x8, x25
    fe34:	b.ne	fe44 <mpc_sin_cos@@Base+0x448>  // b.any
    fe38:	mov	x0, x22
    fe3c:	mov	w1, w21
    fe40:	bl	4ec0 <mpc_fix_inf@plt>
    fe44:	cmp	w23, #0x0
    fe48:	mov	w8, #0x2                   	// #2
    fe4c:	cset	w9, ne  // ne = any
    fe50:	csel	w8, w8, w9, lt  // lt = tstop
    fe54:	cmp	w0, #0x0
    fe58:	cset	w9, ne  // ne = any
    fe5c:	lsl	w9, w9, #2
    fe60:	mov	w10, #0x8                   	// #8
    fe64:	csel	w9, w10, w9, lt  // lt = tstop
    fe68:	orr	w23, w9, w8
    fe6c:	cbz	x20, ff14 <mpc_sin_cos@@Base+0x518>
    fe70:	ldur	w3, [x29, #-64]
    fe74:	and	w22, w19, #0xf
    fe78:	sub	x1, x29, #0x48
    fe7c:	mov	x0, x20
    fe80:	mov	w2, w22
    fe84:	bl	52e0 <mpfr_set4@plt>
    fe88:	ldur	x8, [x29, #-56]
    fe8c:	mov	x24, #0x8000000000000003    	// #-9223372036854775805
    fe90:	cmp	x8, x24
    fe94:	b.ne	fea4 <mpc_sin_cos@@Base+0x4a8>  // b.any
    fe98:	mov	x0, x20
    fe9c:	mov	w1, w22
    fea0:	bl	4ec0 <mpc_fix_inf@plt>
    fea4:	ldur	w3, [x29, #-32]
    fea8:	add	x20, x20, #0x20
    feac:	asr	w19, w19, #4
    feb0:	mov	w21, w0
    feb4:	sub	x1, x29, #0x28
    feb8:	mov	x0, x20
    febc:	mov	w2, w19
    fec0:	bl	52e0 <mpfr_set4@plt>
    fec4:	ldur	x8, [x29, #-24]
    fec8:	cmp	x8, x24
    fecc:	b.ne	fedc <mpc_sin_cos@@Base+0x4e0>  // b.any
    fed0:	mov	x0, x20
    fed4:	mov	w1, w19
    fed8:	bl	4ec0 <mpc_fix_inf@plt>
    fedc:	cmp	w21, #0x0
    fee0:	cset	w9, ne  // ne = any
    fee4:	mov	w8, #0x20                  	// #32
    fee8:	lsl	w9, w9, #4
    feec:	csel	w8, w8, w9, lt  // lt = tstop
    fef0:	cmp	w0, #0x0
    fef4:	cset	w9, ne  // ne = any
    fef8:	lsl	w9, w9, #6
    fefc:	mov	w10, #0x80                  	// #128
    ff00:	csel	w9, w10, w9, lt  // lt = tstop
    ff04:	orr	w19, w9, w8
    ff08:	b	ff18 <mpc_sin_cos@@Base+0x51c>
    ff0c:	mov	w23, wzr
    ff10:	cbnz	x20, fe70 <mpc_sin_cos@@Base+0x474>
    ff14:	mov	w19, wzr
    ff18:	sub	x0, x29, #0x28
    ff1c:	bl	4e40 <mpfr_clear@plt>
    ff20:	sub	x0, x29, #0x48
    ff24:	bl	4e40 <mpfr_clear@plt>
    ff28:	sub	x0, x29, #0x68
    ff2c:	bl	4e40 <mpfr_clear@plt>
    ff30:	add	x0, sp, #0x58
    ff34:	bl	4e40 <mpfr_clear@plt>
    ff38:	add	x0, sp, #0x38
    ff3c:	bl	4e40 <mpfr_clear@plt>
    ff40:	add	x0, sp, #0x18
    ff44:	bl	4e40 <mpfr_clear@plt>
    ff48:	orr	w0, w19, w23
    ff4c:	b	fa94 <mpc_sin_cos@@Base+0x98>
    ff50:	sub	sp, sp, #0xd0
    ff54:	cmp	x0, x2
    ff58:	cset	w8, eq  // eq = none
    ff5c:	cmp	x1, x2
    ff60:	cset	w9, eq  // eq = none
    ff64:	stp	x24, x23, [sp, #160]
    ff68:	orr	w24, w8, w9
    ff6c:	stp	x22, x21, [sp, #176]
    ff70:	stp	x20, x19, [sp, #192]
    ff74:	mov	w20, w4
    ff78:	mov	x23, x2
    ff7c:	mov	x19, x1
    ff80:	mov	x21, x0
    ff84:	cmp	w24, #0x1
    ff88:	mov	w22, w3
    ff8c:	stp	x29, x30, [sp, #128]
    ff90:	str	x25, [sp, #144]
    ff94:	add	x29, sp, #0x80
    ff98:	b.ne	ffc0 <mpc_sin_cos@@Base+0x5c4>  // b.any
    ff9c:	ldr	x1, [x23]
    ffa0:	ldr	x2, [x23, #32]
    ffa4:	add	x0, sp, #0x40
    ffa8:	bl	54d0 <mpc_init3@plt>
    ffac:	add	x0, sp, #0x40
    ffb0:	mov	x1, x23
    ffb4:	mov	w2, wzr
    ffb8:	bl	5680 <mpc_set@plt>
    ffbc:	b	ffd0 <mpc_sin_cos@@Base+0x5d4>
    ffc0:	ldp	q1, q0, [x23, #32]
    ffc4:	ldp	q3, q2, [x23]
    ffc8:	stp	q1, q0, [sp, #96]
    ffcc:	stp	q3, q2, [sp, #64]
    ffd0:	mov	x23, #0x2                   	// #2
    ffd4:	movk	x23, #0x8000, lsl #48
    ffd8:	cbz	x21, 100c0 <mpc_sin_cos@@Base+0x6c4>
    ffdc:	ldr	x8, [sp, #80]
    ffe0:	cmp	x8, x23
    ffe4:	b.eq	fff4 <mpc_sin_cos@@Base+0x5f8>  // b.none
    ffe8:	ldr	x9, [sp, #112]
    ffec:	cmp	x9, x23
    fff0:	b.ne	10050 <mpc_sin_cos@@Base+0x654>  // b.any
    fff4:	add	x1, sp, #0x40
    fff8:	mov	x0, x21
    fffc:	mov	w2, w22
   10000:	bl	5680 <mpc_set@plt>
   10004:	ldr	x8, [sp, #112]
   10008:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   1000c:	cmp	x8, x9
   10010:	b.eq	100c0 <mpc_sin_cos@@Base+0x6c4>  // b.none
   10014:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   10018:	cmp	x8, x9
   1001c:	b.eq	100c0 <mpc_sin_cos@@Base+0x6c4>  // b.none
   10020:	mov	x9, #0x2                   	// #2
   10024:	movk	x9, #0x8000, lsl #48
   10028:	cmp	x8, x9
   1002c:	b.ne	100a0 <mpc_sin_cos@@Base+0x6a4>  // b.any
   10030:	ldr	x8, [sp, #80]
   10034:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   10038:	cmp	x8, x9
   1003c:	b.eq	100c0 <mpc_sin_cos@@Base+0x6c4>  // b.none
   10040:	mov	x0, x21
   10044:	bl	4b10 <mpfr_set_nan@plt>
   10048:	cbnz	x19, 100c4 <mpc_sin_cos@@Base+0x6c8>
   1004c:	b	102d8 <mpc_sin_cos@@Base+0x8dc>
   10050:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   10054:	cmp	x8, x9
   10058:	b.eq	100b0 <mpc_sin_cos@@Base+0x6b4>  // b.none
   1005c:	mov	x25, #0x8000000000000003    	// #-9223372036854775805
   10060:	cmp	x8, x25
   10064:	b.ne	101ec <mpc_sin_cos@@Base+0x7f0>  // b.any
   10068:	mov	x0, x21
   1006c:	bl	4b10 <mpfr_set_nan@plt>
   10070:	ldr	x8, [sp, #112]
   10074:	orr	x8, x8, #0x2
   10078:	cmp	x8, x25
   1007c:	b.ne	100a0 <mpc_sin_cos@@Base+0x6a4>  // b.any
   10080:	ldr	w3, [sp, #104]
   10084:	add	x8, sp, #0x40
   10088:	add	x1, x8, #0x20
   1008c:	add	x0, x21, #0x20
   10090:	asr	w2, w22, #4
   10094:	bl	52e0 <mpfr_set4@plt>
   10098:	cbnz	x19, 100c4 <mpc_sin_cos@@Base+0x6c8>
   1009c:	b	102d8 <mpc_sin_cos@@Base+0x8dc>
   100a0:	add	x0, x21, #0x20
   100a4:	bl	4b10 <mpfr_set_nan@plt>
   100a8:	cbnz	x19, 100c4 <mpc_sin_cos@@Base+0x6c8>
   100ac:	b	102d8 <mpc_sin_cos@@Base+0x8dc>
   100b0:	add	x1, sp, #0x40
   100b4:	mov	x0, x21
   100b8:	mov	w2, w22
   100bc:	bl	5680 <mpc_set@plt>
   100c0:	cbz	x19, 102d8 <mpc_sin_cos@@Base+0x8dc>
   100c4:	ldr	x9, [sp, #80]
   100c8:	ldr	x8, [sp, #112]
   100cc:	add	x10, sp, #0x40
   100d0:	add	x21, x10, #0x20
   100d4:	cmp	x9, x23
   100d8:	b.ne	100f8 <mpc_sin_cos@@Base+0x6fc>  // b.any
   100dc:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   100e0:	cmp	x8, x9
   100e4:	b.ne	10124 <mpc_sin_cos@@Base+0x728>  // b.any
   100e8:	mov	w1, #0x1                   	// #1
   100ec:	mov	x0, x19
   100f0:	bl	5230 <mpfr_set_inf@plt>
   100f4:	b	1012c <mpc_sin_cos@@Base+0x730>
   100f8:	cmp	x8, x23
   100fc:	b.ne	10158 <mpc_sin_cos@@Base+0x75c>  // b.any
   10100:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   10104:	cmp	x9, x8
   10108:	add	x0, x19, #0x20
   1010c:	b.ne	1019c <mpc_sin_cos@@Base+0x7a0>  // b.any
   10110:	ldr	w3, [sp, #72]
   10114:	asr	w2, w20, #4
   10118:	add	x1, sp, #0x40
   1011c:	bl	52e0 <mpfr_set4@plt>
   10120:	b	101a0 <mpc_sin_cos@@Base+0x7a4>
   10124:	mov	x0, x19
   10128:	bl	4b10 <mpfr_set_nan@plt>
   1012c:	ldr	x8, [sp, #112]
   10130:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   10134:	add	x0, x19, #0x20
   10138:	cmp	x8, x9
   1013c:	b.ne	102d4 <mpc_sin_cos@@Base+0x8d8>  // b.any
   10140:	ldr	w3, [sp, #104]
   10144:	asr	w2, w20, #4
   10148:	mov	x1, x21
   1014c:	bl	52e0 <mpfr_set4@plt>
   10150:	cbz	w24, 102e4 <mpc_sin_cos@@Base+0x8e8>
   10154:	b	102dc <mpc_sin_cos@@Base+0x8e0>
   10158:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
   1015c:	cmp	x9, x10
   10160:	b.eq	101b0 <mpc_sin_cos@@Base+0x7b4>  // b.none
   10164:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
   10168:	cmp	x9, x10
   1016c:	b.ne	10250 <mpc_sin_cos@@Base+0x854>  // b.any
   10170:	ldr	w9, [sp, #72]
   10174:	ldr	w11, [sp, #104]
   10178:	cmp	x8, x10
   1017c:	eor	w22, w11, w9
   10180:	b.ne	102a4 <mpc_sin_cos@@Base+0x8a8>  // b.any
   10184:	cmp	w22, #0x0
   10188:	mov	w8, #0xffffffff            	// #-1
   1018c:	cneg	w1, w8, lt  // lt = tstop
   10190:	mov	x0, x19
   10194:	bl	5230 <mpfr_set_inf@plt>
   10198:	b	102ac <mpc_sin_cos@@Base+0x8b0>
   1019c:	bl	4b10 <mpfr_set_nan@plt>
   101a0:	mov	x0, x19
   101a4:	bl	4b10 <mpfr_set_nan@plt>
   101a8:	cbz	w24, 102e4 <mpc_sin_cos@@Base+0x8e8>
   101ac:	b	102dc <mpc_sin_cos@@Base+0x8e0>
   101b0:	ldr	w8, [sp, #72]
   101b4:	ldr	w9, [sp, #104]
   101b8:	add	x0, x19, #0x20
   101bc:	asr	w2, w20, #4
   101c0:	add	x1, sp, #0x40
   101c4:	eor	w8, w9, w8
   101c8:	cmp	w8, #0x0
   101cc:	mov	w8, #0xffffffff            	// #-1
   101d0:	cneg	w3, w8, lt  // lt = tstop
   101d4:	bl	52e0 <mpfr_set4@plt>
   101d8:	mov	w1, #0x1                   	// #1
   101dc:	mov	x0, x19
   101e0:	bl	5230 <mpfr_set_inf@plt>
   101e4:	cbz	w24, 102e4 <mpc_sin_cos@@Base+0x8e8>
   101e8:	b	102dc <mpc_sin_cos@@Base+0x8e0>
   101ec:	add	x0, sp, #0x20
   101f0:	mov	w1, #0x2                   	// #2
   101f4:	bl	5540 <mpfr_init2@plt>
   101f8:	mov	x0, sp
   101fc:	mov	w1, #0x2                   	// #2
   10200:	bl	5540 <mpfr_init2@plt>
   10204:	add	x0, sp, #0x20
   10208:	mov	x1, sp
   1020c:	add	x2, sp, #0x40
   10210:	mov	w3, #0x1                   	// #1
   10214:	bl	5620 <mpfr_sin_cos@plt>
   10218:	ldr	w1, [sp, #40]
   1021c:	mov	x0, x21
   10220:	bl	5230 <mpfr_set_inf@plt>
   10224:	ldr	w8, [sp, #8]
   10228:	ldr	w9, [sp, #104]
   1022c:	add	x0, x21, #0x20
   10230:	mul	w1, w9, w8
   10234:	bl	5230 <mpfr_set_inf@plt>
   10238:	add	x0, sp, #0x20
   1023c:	bl	4e40 <mpfr_clear@plt>
   10240:	mov	x0, sp
   10244:	bl	4e40 <mpfr_clear@plt>
   10248:	cbnz	x19, 100c4 <mpc_sin_cos@@Base+0x6c8>
   1024c:	b	102d8 <mpc_sin_cos@@Base+0x8dc>
   10250:	mov	x0, sp
   10254:	mov	w1, #0x2                   	// #2
   10258:	bl	5540 <mpfr_init2@plt>
   1025c:	add	x0, sp, #0x20
   10260:	mov	w1, #0x2                   	// #2
   10264:	bl	5540 <mpfr_init2@plt>
   10268:	add	x0, sp, #0x20
   1026c:	mov	x1, sp
   10270:	add	x2, sp, #0x40
   10274:	mov	w3, wzr
   10278:	bl	5620 <mpfr_sin_cos@plt>
   1027c:	ldr	x8, [sp, #16]
   10280:	mov	x9, #0x2                   	// #2
   10284:	movk	x9, #0x8000, lsl #48
   10288:	cmp	x8, x9
   1028c:	b.gt	10300 <mpc_sin_cos@@Base+0x904>
   10290:	cmp	x8, x23
   10294:	b.ne	1029c <mpc_sin_cos@@Base+0x8a0>  // b.any
   10298:	bl	4bd0 <mpfr_set_erangeflag@plt>
   1029c:	mov	w1, wzr
   102a0:	b	10304 <mpc_sin_cos@@Base+0x908>
   102a4:	mov	x0, x19
   102a8:	bl	4b10 <mpfr_set_nan@plt>
   102ac:	ldr	x8, [sp, #112]
   102b0:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   102b4:	add	x0, x19, #0x20
   102b8:	cmp	x8, x9
   102bc:	b.ne	102d4 <mpc_sin_cos@@Base+0x8d8>  // b.any
   102c0:	cmp	w22, #0x0
   102c4:	mov	w8, #0xffffffff            	// #-1
   102c8:	asr	w2, w20, #4
   102cc:	cneg	w3, w8, lt  // lt = tstop
   102d0:	b	10148 <mpc_sin_cos@@Base+0x74c>
   102d4:	bl	4b10 <mpfr_set_nan@plt>
   102d8:	cbz	w24, 102e4 <mpc_sin_cos@@Base+0x8e8>
   102dc:	add	x0, sp, #0x40
   102e0:	bl	4ae0 <mpc_clear@plt>
   102e4:	ldp	x20, x19, [sp, #192]
   102e8:	ldp	x22, x21, [sp, #176]
   102ec:	ldp	x24, x23, [sp, #160]
   102f0:	ldr	x25, [sp, #144]
   102f4:	ldp	x29, x30, [sp, #128]
   102f8:	add	sp, sp, #0xd0
   102fc:	ret
   10300:	ldr	w1, [sp, #8]
   10304:	mov	x0, x19
   10308:	bl	5230 <mpfr_set_inf@plt>
   1030c:	ldr	x8, [sp, #112]
   10310:	mov	x9, #0x2                   	// #2
   10314:	movk	x9, #0x8000, lsl #48
   10318:	add	x19, x19, #0x20
   1031c:	cmp	x8, x9
   10320:	b.gt	10338 <mpc_sin_cos@@Base+0x93c>
   10324:	cmp	x8, x23
   10328:	b.ne	10330 <mpc_sin_cos@@Base+0x934>  // b.any
   1032c:	bl	4bd0 <mpfr_set_erangeflag@plt>
   10330:	mov	w20, wzr
   10334:	b	1033c <mpc_sin_cos@@Base+0x940>
   10338:	ldr	w20, [sp, #104]
   1033c:	ldr	x8, [sp, #48]
   10340:	mov	x9, #0x2                   	// #2
   10344:	movk	x9, #0x8000, lsl #48
   10348:	cmp	x8, x9
   1034c:	b.gt	10364 <mpc_sin_cos@@Base+0x968>
   10350:	cmp	x8, x23
   10354:	b.ne	1035c <mpc_sin_cos@@Base+0x960>  // b.any
   10358:	bl	4bd0 <mpfr_set_erangeflag@plt>
   1035c:	mov	w8, wzr
   10360:	b	10368 <mpc_sin_cos@@Base+0x96c>
   10364:	ldr	w8, [sp, #40]
   10368:	cmp	w20, w8
   1036c:	mov	w8, #0xffffffff            	// #-1
   10370:	cneg	w1, w8, ne  // ne = any
   10374:	mov	x0, x19
   10378:	bl	5230 <mpfr_set_inf@plt>
   1037c:	add	x0, sp, #0x20
   10380:	bl	4e40 <mpfr_clear@plt>
   10384:	mov	x0, sp
   10388:	bl	4e40 <mpfr_clear@plt>
   1038c:	cbz	w24, 102e4 <mpc_sin_cos@@Base+0x8e8>
   10390:	b	102dc <mpc_sin_cos@@Base+0x8e0>
   10394:	sub	sp, sp, #0x80
   10398:	stp	x29, x30, [sp, #64]
   1039c:	stp	x24, x23, [sp, #80]
   103a0:	stp	x22, x21, [sp, #96]
   103a4:	stp	x20, x19, [sp, #112]
   103a8:	ldr	w24, [x2, #40]
   103ac:	mov	w23, w4
   103b0:	mov	w20, w3
   103b4:	mov	x21, x2
   103b8:	mov	x19, x1
   103bc:	mov	x22, x0
   103c0:	add	x29, sp, #0x40
   103c4:	cbz	x0, 103d0 <mpc_sin_cos@@Base+0x9d4>
   103c8:	ldr	x1, [x22]
   103cc:	b	103d4 <mpc_sin_cos@@Base+0x9d8>
   103d0:	mov	w1, #0x2                   	// #2
   103d4:	add	x0, sp, #0x20
   103d8:	bl	5540 <mpfr_init2@plt>
   103dc:	cbz	x19, 103e8 <mpc_sin_cos@@Base+0x9ec>
   103e0:	ldr	x1, [x19]
   103e4:	b	103ec <mpc_sin_cos@@Base+0x9f0>
   103e8:	mov	w1, #0x2                   	// #2
   103ec:	mov	x0, sp
   103f0:	bl	5540 <mpfr_init2@plt>
   103f4:	and	w2, w20, #0xf
   103f8:	add	x0, sp, #0x20
   103fc:	mov	x1, x21
   10400:	bl	5190 <mpfr_sin@plt>
   10404:	mov	w20, w0
   10408:	and	w2, w23, #0xf
   1040c:	mov	x0, sp
   10410:	mov	x1, x21
   10414:	bl	5160 <mpfr_cos@plt>
   10418:	mov	w21, w0
   1041c:	cbz	x22, 10454 <mpc_sin_cos@@Base+0xa58>
   10420:	ldr	w3, [sp, #40]
   10424:	add	x1, sp, #0x20
   10428:	mov	x0, x22
   1042c:	mov	w2, wzr
   10430:	bl	52e0 <mpfr_set4@plt>
   10434:	add	x0, x22, #0x20
   10438:	tbnz	w24, #31, 10464 <mpc_sin_cos@@Base+0xa68>
   1043c:	ldr	w8, [sp, #8]
   10440:	cmn	w24, #0x1
   10444:	ccmp	w8, #0x0, #0x0, gt
   10448:	mov	w8, #0xffffffff            	// #-1
   1044c:	cneg	w1, w8, ge  // ge = tcont
   10450:	b	10470 <mpc_sin_cos@@Base+0xa74>
   10454:	mov	w20, wzr
   10458:	cbnz	x19, 10478 <mpc_sin_cos@@Base+0xa7c>
   1045c:	mov	w21, wzr
   10460:	b	104b4 <mpc_sin_cos@@Base+0xab8>
   10464:	ldr	w8, [sp, #8]
   10468:	tbnz	w8, #31, 1043c <mpc_sin_cos@@Base+0xa40>
   1046c:	mov	w1, #0xffffffff            	// #-1
   10470:	bl	4de0 <mpfr_set_zero@plt>
   10474:	cbz	x19, 1045c <mpc_sin_cos@@Base+0xa60>
   10478:	ldr	w3, [sp, #8]
   1047c:	mov	x1, sp
   10480:	mov	x0, x19
   10484:	mov	w2, wzr
   10488:	bl	52e0 <mpfr_set4@plt>
   1048c:	add	x0, x19, #0x20
   10490:	tbz	w24, #31, 1049c <mpc_sin_cos@@Base+0xaa0>
   10494:	ldr	w8, [sp, #40]
   10498:	tbnz	w8, #31, 10504 <mpc_sin_cos@@Base+0xb08>
   1049c:	ldr	w8, [sp, #40]
   104a0:	orr	w8, w8, w24
   104a4:	cmp	w8, #0x0
   104a8:	mov	w8, #0xffffffff            	// #-1
   104ac:	cneg	w1, w8, lt  // lt = tstop
   104b0:	bl	4de0 <mpfr_set_zero@plt>
   104b4:	add	x0, sp, #0x20
   104b8:	bl	4e40 <mpfr_clear@plt>
   104bc:	mov	x0, sp
   104c0:	bl	4e40 <mpfr_clear@plt>
   104c4:	cmp	w20, #0x0
   104c8:	mov	w8, #0x2                   	// #2
   104cc:	cset	w9, ne  // ne = any
   104d0:	csel	w8, w8, w9, lt  // lt = tstop
   104d4:	cmp	w21, #0x0
   104d8:	cset	w9, ne  // ne = any
   104dc:	ldp	x20, x19, [sp, #112]
   104e0:	ldp	x22, x21, [sp, #96]
   104e4:	ldp	x24, x23, [sp, #80]
   104e8:	ldp	x29, x30, [sp, #64]
   104ec:	lsl	w9, w9, #4
   104f0:	mov	w10, #0x20                  	// #32
   104f4:	csel	w9, w10, w9, lt  // lt = tstop
   104f8:	orr	w0, w9, w8
   104fc:	add	sp, sp, #0x80
   10500:	ret
   10504:	mov	w1, #0xffffffff            	// #-1
   10508:	b	104b0 <mpc_sin_cos@@Base+0xab4>
   1050c:	sub	sp, sp, #0x80
   10510:	cmp	x0, x2
   10514:	cset	w8, eq  // eq = none
   10518:	cmp	x1, x2
   1051c:	cset	w9, eq  // eq = none
   10520:	stp	x24, x23, [sp, #80]
   10524:	orr	w24, w8, w9
   10528:	stp	x22, x21, [sp, #96]
   1052c:	stp	x20, x19, [sp, #112]
   10530:	mov	w20, w4
   10534:	mov	x23, x2
   10538:	mov	x19, x1
   1053c:	mov	x21, x0
   10540:	cmp	w24, #0x1
   10544:	mov	w22, w3
   10548:	stp	x29, x30, [sp, #64]
   1054c:	add	x29, sp, #0x40
   10550:	b.ne	1057c <mpc_sin_cos@@Base+0xb80>  // b.any
   10554:	ldr	x1, [x23]
   10558:	ldr	x2, [x23, #32]
   1055c:	mov	x0, sp
   10560:	bl	54d0 <mpc_init3@plt>
   10564:	mov	x0, sp
   10568:	mov	x1, x23
   1056c:	mov	w2, wzr
   10570:	bl	5680 <mpc_set@plt>
   10574:	cbnz	x21, 10590 <mpc_sin_cos@@Base+0xb94>
   10578:	b	105bc <mpc_sin_cos@@Base+0xbc0>
   1057c:	ldp	q1, q0, [x23, #32]
   10580:	ldp	q3, q2, [x23]
   10584:	stp	q1, q0, [sp, #32]
   10588:	stp	q3, q2, [sp]
   1058c:	cbz	x21, 105bc <mpc_sin_cos@@Base+0xbc0>
   10590:	ldr	w3, [sp, #8]
   10594:	mov	x1, sp
   10598:	mov	x0, x21
   1059c:	mov	w2, wzr
   105a0:	mov	x23, sp
   105a4:	bl	52e0 <mpfr_set4@plt>
   105a8:	add	x0, x21, #0x20
   105ac:	add	x1, x23, #0x20
   105b0:	asr	w2, w22, #4
   105b4:	bl	5090 <mpfr_sinh@plt>
   105b8:	mov	w21, w0
   105bc:	cbz	x19, 10658 <mpc_sin_cos@@Base+0xc5c>
   105c0:	mov	x8, sp
   105c4:	add	x1, x8, #0x20
   105c8:	and	w2, w20, #0xf
   105cc:	mov	x0, x19
   105d0:	bl	4af0 <mpfr_cosh@plt>
   105d4:	mov	w8, #0x1                   	// #1
   105d8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   105dc:	str	w8, [x19, #40]
   105e0:	str	x9, [x19, #48]
   105e4:	ldr	w8, [sp, #8]
   105e8:	ldr	w9, [sp, #40]
   105ec:	mov	w20, w0
   105f0:	eor	w8, w9, w8
   105f4:	tbnz	w8, #31, 10608 <mpc_sin_cos@@Base+0xc0c>
   105f8:	add	x0, x19, #0x20
   105fc:	mov	x1, x0
   10600:	mov	w2, wzr
   10604:	bl	4c50 <mpfr_neg@plt>
   10608:	cbz	w24, 10614 <mpc_sin_cos@@Base+0xc18>
   1060c:	mov	x0, sp
   10610:	bl	4ae0 <mpc_clear@plt>
   10614:	cmp	w21, #0x0
   10618:	cset	w9, ne  // ne = any
   1061c:	mov	w8, #0x8                   	// #8
   10620:	lsl	w9, w9, #2
   10624:	csel	w8, w8, w9, lt  // lt = tstop
   10628:	cmp	w20, #0x0
   1062c:	cset	w9, ne  // ne = any
   10630:	ldp	x20, x19, [sp, #112]
   10634:	ldp	x22, x21, [sp, #96]
   10638:	ldp	x24, x23, [sp, #80]
   1063c:	ldp	x29, x30, [sp, #64]
   10640:	lsl	w9, w9, #4
   10644:	mov	w10, #0x20                  	// #32
   10648:	csel	w9, w10, w9, lt  // lt = tstop
   1064c:	orr	w0, w9, w8
   10650:	add	sp, sp, #0x80
   10654:	ret
   10658:	mov	w20, wzr
   1065c:	cbnz	w24, 1060c <mpc_sin_cos@@Base+0xc10>
   10660:	b	10614 <mpc_sin_cos@@Base+0xc18>

0000000000010664 <mpc_sinh@@Base>:
   10664:	sub	sp, sp, #0xa0
   10668:	stp	x29, x30, [sp, #128]
   1066c:	str	x19, [sp, #144]
   10670:	ldp	q1, q0, [x1, #32]
   10674:	ubfiz	w8, w2, #4, #4
   10678:	mov	x19, x0
   1067c:	add	w2, w8, w2, asr #4
   10680:	stp	q1, q0, [sp, #64]
   10684:	ldp	q1, q0, [x1]
   10688:	add	x1, sp, #0x40
   1068c:	add	x29, sp, #0x80
   10690:	stp	q1, q0, [sp, #96]
   10694:	ldp	q1, q0, [x0, #32]
   10698:	stp	q1, q0, [sp]
   1069c:	ldp	q1, q0, [x0]
   106a0:	mov	x0, sp
   106a4:	stp	q1, q0, [sp, #32]
   106a8:	bl	5060 <mpc_sin@plt>
   106ac:	ldp	q1, q0, [sp, #32]
   106b0:	asr	w8, w0, #2
   106b4:	cmp	w8, #0x0
   106b8:	cset	w9, ne  // ne = any
   106bc:	stp	q1, q0, [x19]
   106c0:	ldp	q1, q0, [sp]
   106c4:	cmp	w8, #0x2
   106c8:	csel	w8, w8, w9, eq  // eq = none
   106cc:	tst	w0, #0x3
   106d0:	stp	q1, q0, [x19, #32]
   106d4:	and	w9, w0, #0x3
   106d8:	cset	w10, ne  // ne = any
   106dc:	ldr	x19, [sp, #144]
   106e0:	ldp	x29, x30, [sp, #128]
   106e4:	cmp	w9, #0x2
   106e8:	mov	w9, #0x8                   	// #8
   106ec:	lsl	w10, w10, #2
   106f0:	csel	w9, w9, w10, eq  // eq = none
   106f4:	orr	w0, w8, w9
   106f8:	add	sp, sp, #0xa0
   106fc:	ret

0000000000010700 <mpc_sqr@@Base>:
   10700:	sub	sp, sp, #0xe0
   10704:	stp	x20, x19, [sp, #208]
   10708:	mov	x19, x0
   1070c:	mov	x0, x1
   10710:	stp	x29, x30, [sp, #128]
   10714:	stp	x28, x27, [sp, #144]
   10718:	stp	x26, x25, [sp, #160]
   1071c:	stp	x24, x23, [sp, #176]
   10720:	stp	x22, x21, [sp, #192]
   10724:	add	x29, sp, #0x80
   10728:	mov	w21, w2
   1072c:	mov	x20, x1
   10730:	bl	55d0 <mpfr_number_p@plt>
   10734:	cbz	w0, 107c0 <mpc_sqr@@Base+0xc0>
   10738:	add	x22, x20, #0x20
   1073c:	mov	x0, x22
   10740:	bl	55d0 <mpfr_number_p@plt>
   10744:	cbz	w0, 107c0 <mpc_sqr@@Base+0xc0>
   10748:	mov	x23, x19
   1074c:	ldr	x8, [x19]
   10750:	ldr	x9, [x23, #32]!
   10754:	ldr	x10, [x20, #48]
   10758:	mov	x25, #0x8000000000000001    	// #-9223372036854775807
   1075c:	cmp	x8, x9
   10760:	csel	x24, x8, x9, gt
   10764:	cmp	x10, x25
   10768:	b.ne	10814 <mpc_sqr@@Base+0x114>  // b.any
   1076c:	ldr	w8, [x20, #8]
   10770:	ldr	w9, [x20, #40]
   10774:	and	w2, w21, #0xf
   10778:	mov	x0, x19
   1077c:	mov	x1, x20
   10780:	eor	w22, w9, w8
   10784:	bl	5120 <mpfr_sqr@plt>
   10788:	mov	w20, w0
   1078c:	mov	w8, #0x1                   	// #1
   10790:	str	w8, [x19, #40]
   10794:	str	x25, [x19, #48]
   10798:	tbz	w22, #31, 107ac <mpc_sqr@@Base+0xac>
   1079c:	mov	x0, x19
   107a0:	mov	x1, x19
   107a4:	mov	w2, wzr
   107a8:	bl	5070 <mpc_conj@plt>
   107ac:	cmp	w20, #0x0
   107b0:	cset	w8, ne  // ne = any
   107b4:	mov	w9, #0x2                   	// #2
   107b8:	csel	w0, w9, w8, lt  // lt = tstop
   107bc:	b	107f4 <mpc_sqr@@Base+0xf4>
   107c0:	ldr	x8, [x20, #16]
   107c4:	mov	x10, #0x2                   	// #2
   107c8:	movk	x10, #0x8000, lsl #48
   107cc:	cmp	x8, x10
   107d0:	b.eq	107e0 <mpc_sqr@@Base+0xe0>  // b.none
   107d4:	ldr	x9, [x20, #48]
   107d8:	cmp	x9, x10
   107dc:	b.ne	1089c <mpc_sqr@@Base+0x19c>  // b.any
   107e0:	mov	x0, x19
   107e4:	bl	4b10 <mpfr_set_nan@plt>
   107e8:	add	x0, x19, #0x20
   107ec:	bl	4b10 <mpfr_set_nan@plt>
   107f0:	mov	w0, wzr
   107f4:	ldp	x20, x19, [sp, #208]
   107f8:	ldp	x22, x21, [sp, #192]
   107fc:	ldp	x24, x23, [sp, #176]
   10800:	ldp	x26, x25, [sp, #160]
   10804:	ldp	x28, x27, [sp, #144]
   10808:	ldp	x29, x30, [sp, #128]
   1080c:	add	sp, sp, #0xe0
   10810:	ret
   10814:	ldr	x8, [x20, #16]
   10818:	cmp	x8, x25
   1081c:	b.ne	108cc <mpc_sqr@@Base+0x1cc>  // b.any
   10820:	ldr	w8, [x20, #8]
   10824:	ldr	w9, [x20, #40]
   10828:	and	w10, w21, #0xf
   1082c:	mov	w21, #0x2                   	// #2
   10830:	cmp	w10, #0x3
   10834:	mov	w11, #0x3                   	// #3
   10838:	csel	w12, w21, w10, eq  // eq = none
   1083c:	cmp	w10, #0x2
   10840:	csel	w2, w11, w12, eq  // eq = none
   10844:	mov	x0, x19
   10848:	mov	x1, x22
   1084c:	eor	w23, w9, w8
   10850:	bl	5120 <mpfr_sqr@plt>
   10854:	mov	w20, w0
   10858:	mov	x0, x19
   1085c:	mov	x1, x19
   10860:	mov	w2, wzr
   10864:	bl	4c50 <mpfr_neg@plt>
   10868:	mov	w8, #0x1                   	// #1
   1086c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   10870:	str	w8, [x19, #40]
   10874:	str	x9, [x19, #48]
   10878:	tbz	w23, #31, 1088c <mpc_sqr@@Base+0x18c>
   1087c:	mov	x0, x19
   10880:	mov	x1, x19
   10884:	mov	w2, wzr
   10888:	bl	5070 <mpc_conj@plt>
   1088c:	cmp	w20, #0x0
   10890:	cset	w8, ne  // ne = any
   10894:	csel	w0, w21, w8, gt
   10898:	b	107f4 <mpc_sqr@@Base+0xf4>
   1089c:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
   108a0:	cmp	x8, x10
   108a4:	b.ne	108e0 <mpc_sqr@@Base+0x1e0>  // b.any
   108a8:	cmp	x9, x10
   108ac:	b.ne	108fc <mpc_sqr@@Base+0x1fc>  // b.any
   108b0:	ldr	w8, [x20, #8]
   108b4:	ldr	w9, [x20, #40]
   108b8:	add	x0, x19, #0x20
   108bc:	mul	w1, w9, w8
   108c0:	bl	5230 <mpfr_set_inf@plt>
   108c4:	mov	x0, x19
   108c8:	b	107ec <mpc_sqr@@Base+0xec>
   108cc:	cmp	x19, x20
   108d0:	b.eq	10914 <mpc_sqr@@Base+0x214>  // b.none
   108d4:	ldp	q1, q0, [x20]
   108d8:	stp	q1, q0, [sp, #32]
   108dc:	b	10934 <mpc_sqr@@Base+0x234>
   108e0:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   108e4:	cmp	x8, x9
   108e8:	add	x0, x19, #0x20
   108ec:	b.ne	10bec <mpc_sqr@@Base+0x4ec>  // b.any
   108f0:	bl	4b10 <mpfr_set_nan@plt>
   108f4:	mov	w1, #0xffffffff            	// #-1
   108f8:	b	10c18 <mpc_sqr@@Base+0x518>
   108fc:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   10900:	cmp	x9, x8
   10904:	add	x0, x19, #0x20
   10908:	b.ne	10c04 <mpc_sqr@@Base+0x504>  // b.any
   1090c:	bl	4b10 <mpfr_set_nan@plt>
   10910:	b	10c14 <mpc_sqr@@Base+0x514>
   10914:	ldr	x1, [x20]
   10918:	add	x0, sp, #0x20
   1091c:	bl	5540 <mpfr_init2@plt>
   10920:	ldr	w3, [x20, #8]
   10924:	add	x0, sp, #0x20
   10928:	mov	x1, x20
   1092c:	mov	w2, wzr
   10930:	bl	52e0 <mpfr_set4@plt>
   10934:	ldr	x8, [x20, #16]
   10938:	ldr	x9, [x20, #48]
   1093c:	ldr	x10, [x20]
   10940:	ldr	x11, [x20, #32]
   10944:	subs	x8, x8, x9
   10948:	cneg	x8, x8, mi  // mi = first
   1094c:	cmp	x10, x11
   10950:	csel	x9, x10, x11, gt
   10954:	cmp	x9, #0x0
   10958:	cinc	x9, x9, lt  // lt = tstop
   1095c:	cmp	x8, x9, asr #1
   10960:	b.le	10980 <mpc_sqr@@Base+0x280>
   10964:	and	w3, w21, #0xf
   10968:	add	x1, sp, #0x20
   1096c:	mov	x0, x19
   10970:	mov	x2, x22
   10974:	bl	10c24 <mpc_sqr@@Base+0x524>
   10978:	mov	w25, w0
   1097c:	b	10b60 <mpc_sqr@@Base+0x460>
   10980:	mov	x26, #0x2                   	// #2
   10984:	sub	x0, x29, #0x20
   10988:	str	x23, [sp, #8]
   1098c:	movk	x26, #0x8000, lsl #48
   10990:	bl	4b70 <mpfr_init@plt>
   10994:	add	x0, sp, #0x40
   10998:	bl	4b70 <mpfr_init@plt>
   1099c:	bl	5170 <mpfr_get_emin@plt>
   109a0:	and	w8, w21, #0xf
   109a4:	tst	w21, #0xf
   109a8:	mov	x23, x0
   109ac:	str	w8, [sp, #28]
   109b0:	str	w21, [sp, #4]
   109b4:	mov	w21, #0x1                   	// #1
   109b8:	cset	w8, eq  // eq = none
   109bc:	str	x8, [sp, #16]
   109c0:	b	109dc <mpc_sqr@@Base+0x2dc>
   109c4:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   109c8:	mov	w25, wzr
   109cc:	mov	w27, wzr
   109d0:	str	w21, [x19, #8]
   109d4:	str	x8, [x19, #16]
   109d8:	tbz	w27, #0, 10b48 <mpc_sqr@@Base+0x448>
   109dc:	mov	x0, x24
   109e0:	bl	4df0 <mpc_ceil_log2@plt>
   109e4:	add	x8, x24, x0
   109e8:	add	x24, x8, #0x5
   109ec:	sub	x0, x29, #0x20
   109f0:	mov	x1, x24
   109f4:	bl	4d50 <mpfr_set_prec@plt>
   109f8:	add	x0, sp, #0x40
   109fc:	mov	x1, x24
   10a00:	bl	4d50 <mpfr_set_prec@plt>
   10a04:	sub	x0, x29, #0x20
   10a08:	add	x1, sp, #0x20
   10a0c:	mov	w3, #0x4                   	// #4
   10a10:	mov	x2, x22
   10a14:	bl	4f60 <mpfr_add@plt>
   10a18:	mov	w28, w0
   10a1c:	add	x0, sp, #0x40
   10a20:	add	x1, sp, #0x20
   10a24:	mov	w3, #0x4                   	// #4
   10a28:	mov	x2, x22
   10a2c:	bl	4b30 <mpfr_sub@plt>
   10a30:	ldur	x8, [x29, #-16]
   10a34:	mov	w27, w0
   10a38:	cmp	x8, x26
   10a3c:	b.gt	10a54 <mpc_sqr@@Base+0x354>
   10a40:	b.ne	10a48 <mpc_sqr@@Base+0x348>  // b.any
   10a44:	bl	4bd0 <mpfr_set_erangeflag@plt>
   10a48:	mov	w8, wzr
   10a4c:	cbnz	w8, 10a5c <mpc_sqr@@Base+0x35c>
   10a50:	b	109c4 <mpc_sqr@@Base+0x2c4>
   10a54:	ldur	w8, [x29, #-24]
   10a58:	cbz	w8, 109c4 <mpc_sqr@@Base+0x2c4>
   10a5c:	ldr	x8, [sp, #80]
   10a60:	cmp	x8, x26
   10a64:	b.gt	10a7c <mpc_sqr@@Base+0x37c>
   10a68:	b.ne	10a88 <mpc_sqr@@Base+0x388>  // b.any
   10a6c:	bl	4bd0 <mpfr_set_erangeflag@plt>
   10a70:	mov	w8, wzr
   10a74:	cbnz	w8, 10a90 <mpc_sqr@@Base+0x390>
   10a78:	b	109c4 <mpc_sqr@@Base+0x2c4>
   10a7c:	ldr	w8, [sp, #72]
   10a80:	cbnz	w8, 10a90 <mpc_sqr@@Base+0x390>
   10a84:	b	109c4 <mpc_sqr@@Base+0x2c4>
   10a88:	mov	w8, wzr
   10a8c:	cbz	w8, 109c4 <mpc_sqr@@Base+0x2c4>
   10a90:	sub	x0, x29, #0x20
   10a94:	sub	x1, x29, #0x20
   10a98:	add	x2, sp, #0x40
   10a9c:	mov	w3, #0x4                   	// #4
   10aa0:	bl	4c40 <mpfr_mul@plt>
   10aa4:	ldur	x8, [x29, #-16]
   10aa8:	cmp	x8, x23
   10aac:	b.eq	10b28 <mpc_sqr@@Base+0x428>  // b.none
   10ab0:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   10ab4:	cmp	x8, x9
   10ab8:	b.eq	10b28 <mpc_sqr@@Base+0x428>  // b.none
   10abc:	orr	w8, w27, w28
   10ac0:	ldr	x9, [x19]
   10ac4:	orr	w28, w8, w0
   10ac8:	ldr	x8, [sp, #16]
   10acc:	cmp	w28, #0x0
   10ad0:	sub	x1, x24, #0x3
   10ad4:	sub	x0, x29, #0x20
   10ad8:	add	x4, x9, x8
   10adc:	mov	w2, #0x4                   	// #4
   10ae0:	mov	w3, #0x1                   	// #1
   10ae4:	mov	x21, x23
   10ae8:	cset	w23, eq  // eq = none
   10aec:	mov	w27, #0x1                   	// #1
   10af0:	bl	5550 <mpfr_can_round@plt>
   10af4:	orr	w8, w0, w23
   10af8:	cbz	w8, 10b1c <mpc_sqr@@Base+0x41c>
   10afc:	ldur	w3, [x29, #-24]
   10b00:	ldr	w2, [sp, #28]
   10b04:	sub	x1, x29, #0x20
   10b08:	mov	x0, x19
   10b0c:	bl	52e0 <mpfr_set4@plt>
   10b10:	cmp	w0, #0x0
   10b14:	mov	w27, wzr
   10b18:	csel	w25, w28, w0, eq  // eq = none
   10b1c:	mov	x23, x21
   10b20:	mov	w21, #0x1                   	// #1
   10b24:	b	109d8 <mpc_sqr@@Base+0x2d8>
   10b28:	ldr	w3, [sp, #28]
   10b2c:	add	x1, sp, #0x20
   10b30:	mov	x0, x19
   10b34:	mov	x2, x22
   10b38:	bl	10c24 <mpc_sqr@@Base+0x524>
   10b3c:	mov	w25, w0
   10b40:	mov	w27, wzr
   10b44:	b	109d8 <mpc_sqr@@Base+0x2d8>
   10b48:	sub	x0, x29, #0x20
   10b4c:	bl	4e40 <mpfr_clear@plt>
   10b50:	add	x0, sp, #0x40
   10b54:	bl	4e40 <mpfr_clear@plt>
   10b58:	ldr	x23, [sp, #8]
   10b5c:	ldr	w21, [sp, #4]
   10b60:	bl	5400 <mpfr_underflow_p@plt>
   10b64:	mov	w24, w0
   10b68:	bl	4f10 <mpfr_clear_underflow@plt>
   10b6c:	asr	w26, w21, #4
   10b70:	add	x1, sp, #0x20
   10b74:	mov	x0, x23
   10b78:	mov	x2, x22
   10b7c:	mov	w3, w26
   10b80:	bl	4c40 <mpfr_mul@plt>
   10b84:	mov	w21, w0
   10b88:	bl	5400 <mpfr_underflow_p@plt>
   10b8c:	cbnz	w0, 10ba8 <mpc_sqr@@Base+0x4a8>
   10b90:	mov	w2, #0x1                   	// #1
   10b94:	mov	x0, x23
   10b98:	mov	x1, x23
   10b9c:	mov	w3, w26
   10ba0:	bl	5050 <mpfr_mul_2ui@plt>
   10ba4:	orr	w21, w0, w21
   10ba8:	cbz	w24, 10bb0 <mpc_sqr@@Base+0x4b0>
   10bac:	bl	4a60 <mpfr_set_underflow@plt>
   10bb0:	cmp	x19, x20
   10bb4:	b.ne	10bc0 <mpc_sqr@@Base+0x4c0>  // b.any
   10bb8:	add	x0, sp, #0x20
   10bbc:	bl	4e40 <mpfr_clear@plt>
   10bc0:	cmp	w25, #0x0
   10bc4:	mov	w8, #0x2                   	// #2
   10bc8:	cset	w9, ne  // ne = any
   10bcc:	csel	w8, w8, w9, lt  // lt = tstop
   10bd0:	cmp	w21, #0x0
   10bd4:	cset	w9, ne  // ne = any
   10bd8:	lsl	w9, w9, #2
   10bdc:	mov	w10, #0x8                   	// #8
   10be0:	csel	w9, w10, w9, lt  // lt = tstop
   10be4:	orr	w0, w9, w8
   10be8:	b	107f4 <mpc_sqr@@Base+0xf4>
   10bec:	ldr	w8, [x20, #8]
   10bf0:	ldr	w9, [x20, #40]
   10bf4:	mul	w1, w9, w8
   10bf8:	bl	5230 <mpfr_set_inf@plt>
   10bfc:	mov	w1, #0xffffffff            	// #-1
   10c00:	b	10c18 <mpc_sqr@@Base+0x518>
   10c04:	ldr	w8, [x20, #8]
   10c08:	ldr	w9, [x20, #40]
   10c0c:	mul	w1, w9, w8
   10c10:	bl	5230 <mpfr_set_inf@plt>
   10c14:	mov	w1, #0x1                   	// #1
   10c18:	mov	x0, x19
   10c1c:	bl	5230 <mpfr_set_inf@plt>
   10c20:	b	107f0 <mpc_sqr@@Base+0xf0>
   10c24:	sub	sp, sp, #0xb0
   10c28:	stp	x29, x30, [sp, #96]
   10c2c:	stp	x26, x25, [sp, #112]
   10c30:	stp	x24, x23, [sp, #128]
   10c34:	stp	x22, x21, [sp, #144]
   10c38:	stp	x20, x19, [sp, #160]
   10c3c:	ldr	x8, [x1]
   10c40:	add	x29, sp, #0x60
   10c44:	mov	x20, x1
   10c48:	mov	x22, x0
   10c4c:	lsl	x1, x8, #1
   10c50:	sub	x0, x29, #0x20
   10c54:	mov	w21, w3
   10c58:	mov	x19, x2
   10c5c:	bl	5540 <mpfr_init2@plt>
   10c60:	ldr	x8, [x19]
   10c64:	add	x0, sp, #0x20
   10c68:	lsl	x1, x8, #1
   10c6c:	bl	5540 <mpfr_init2@plt>
   10c70:	sub	x0, x29, #0x20
   10c74:	mov	x1, x20
   10c78:	mov	w2, wzr
   10c7c:	bl	5120 <mpfr_sqr@plt>
   10c80:	add	x0, sp, #0x20
   10c84:	mov	x1, x19
   10c88:	mov	w2, wzr
   10c8c:	bl	5120 <mpfr_sqr@plt>
   10c90:	sub	x1, x29, #0x20
   10c94:	add	x2, sp, #0x20
   10c98:	mov	x0, x22
   10c9c:	mov	w3, w21
   10ca0:	bl	4b30 <mpfr_sub@plt>
   10ca4:	ldr	x8, [x22, #16]
   10ca8:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   10cac:	cmp	x8, x9
   10cb0:	b.ne	10cf4 <mpc_sqr@@Base+0x5f4>  // b.any
   10cb4:	ldr	w8, [x22, #8]
   10cb8:	mov	x0, x22
   10cbc:	mov	x2, xzr
   10cc0:	mov	w3, wzr
   10cc4:	cmp	w8, #0x0
   10cc8:	mov	w8, #0x1                   	// #1
   10ccc:	cneg	x1, x8, lt  // lt = tstop
   10cd0:	bl	4ab0 <mpfr_set_si_2exp@plt>
   10cd4:	bl	5310 <mpfr_get_emax@plt>
   10cd8:	mov	x2, x0
   10cdc:	mov	x0, x22
   10ce0:	mov	x1, x22
   10ce4:	mov	w3, w21
   10ce8:	bl	5050 <mpfr_mul_2ui@plt>
   10cec:	mov	w25, w0
   10cf0:	b	11050 <mpc_sqr@@Base+0x950>
   10cf4:	ldur	x9, [x29, #-16]
   10cf8:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
   10cfc:	mov	w25, w0
   10d00:	cmp	x9, x11
   10d04:	b.ne	10d14 <mpc_sqr@@Base+0x614>  // b.any
   10d08:	ldr	x10, [sp, #48]
   10d0c:	cmp	x10, x11
   10d10:	b.ne	10e9c <mpc_sqr@@Base+0x79c>  // b.any
   10d14:	ldr	x10, [sp, #48]
   10d18:	cmp	x9, x11
   10d1c:	b.eq	10d40 <mpc_sqr@@Base+0x640>  // b.none
   10d20:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
   10d24:	cmp	x10, x11
   10d28:	b.ne	10d40 <mpc_sqr@@Base+0x640>  // b.any
   10d2c:	ldr	w8, [sp, #40]
   10d30:	cmp	w8, #0x0
   10d34:	mov	w8, #0x1                   	// #1
   10d38:	cneg	w25, w8, lt  // lt = tstop
   10d3c:	b	11050 <mpc_sqr@@Base+0x950>
   10d40:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
   10d44:	mov	x26, #0x2                   	// #2
   10d48:	cmp	x9, x11
   10d4c:	movk	x26, #0x8000, lsl #48
   10d50:	cset	w9, eq  // eq = none
   10d54:	cmp	x10, x11
   10d58:	cset	w10, eq  // eq = none
   10d5c:	cmp	x8, x26
   10d60:	b.eq	10d6c <mpc_sqr@@Base+0x66c>  // b.none
   10d64:	and	w8, w9, w10
   10d68:	cbz	w8, 11050 <mpc_sqr@@Base+0x950>
   10d6c:	ldr	x24, [x20, #16]
   10d70:	ldr	x23, [x19, #16]
   10d74:	mov	x0, x20
   10d78:	mov	x1, xzr
   10d7c:	bl	4ce0 <mpfr_set_exp@plt>
   10d80:	mov	x0, x19
   10d84:	mov	x1, xzr
   10d88:	bl	4ce0 <mpfr_set_exp@plt>
   10d8c:	add	x0, sp, #0x10
   10d90:	bl	55a0 <__gmpz_init@plt>
   10d94:	mov	x0, sp
   10d98:	bl	55a0 <__gmpz_init@plt>
   10d9c:	add	x0, sp, #0x10
   10da0:	mov	x1, x24
   10da4:	bl	55c0 <__gmpz_set_si@plt>
   10da8:	add	x0, sp, #0x10
   10dac:	add	x1, sp, #0x10
   10db0:	mov	w2, #0x1                   	// #1
   10db4:	bl	4f90 <__gmpz_mul_2exp@plt>
   10db8:	mov	x0, sp
   10dbc:	mov	x1, x23
   10dc0:	bl	55c0 <__gmpz_set_si@plt>
   10dc4:	mov	x0, sp
   10dc8:	mov	x1, sp
   10dcc:	mov	w2, #0x1                   	// #1
   10dd0:	bl	4f90 <__gmpz_mul_2exp@plt>
   10dd4:	sub	x0, x29, #0x20
   10dd8:	mov	x1, x20
   10ddc:	mov	w2, wzr
   10de0:	bl	5120 <mpfr_sqr@plt>
   10de4:	ldur	x8, [x29, #-16]
   10de8:	add	x0, sp, #0x10
   10dec:	add	x1, sp, #0x10
   10df0:	neg	x2, x8
   10df4:	bl	4ba0 <__gmpz_sub_ui@plt>
   10df8:	sub	x0, x29, #0x20
   10dfc:	mov	x1, xzr
   10e00:	bl	4ce0 <mpfr_set_exp@plt>
   10e04:	add	x0, sp, #0x20
   10e08:	mov	x1, x19
   10e0c:	mov	w2, wzr
   10e10:	bl	5120 <mpfr_sqr@plt>
   10e14:	ldr	x8, [sp, #48]
   10e18:	mov	x0, sp
   10e1c:	mov	x1, sp
   10e20:	neg	x2, x8
   10e24:	bl	4ba0 <__gmpz_sub_ui@plt>
   10e28:	add	x0, sp, #0x20
   10e2c:	mov	x1, xzr
   10e30:	bl	4ce0 <mpfr_set_exp@plt>
   10e34:	ldr	x8, [x22, #16]
   10e38:	cmp	x8, x26
   10e3c:	b.ne	10eb0 <mpc_sqr@@Base+0x7b0>  // b.any
   10e40:	bl	5310 <mpfr_get_emax@plt>
   10e44:	mov	x25, x0
   10e48:	add	x0, sp, #0x10
   10e4c:	mov	x1, sp
   10e50:	bl	5410 <__gmpz_cmp@plt>
   10e54:	tbnz	w0, #31, 10f1c <mpc_sqr@@Base+0x81c>
   10e58:	sub	x0, x29, #0x20
   10e5c:	mov	x1, x25
   10e60:	bl	4ce0 <mpfr_set_exp@plt>
   10e64:	add	x0, sp, #0x10
   10e68:	add	x1, sp, #0x10
   10e6c:	mov	x2, x25
   10e70:	bl	4ba0 <__gmpz_sub_ui@plt>
   10e74:	mov	x0, sp
   10e78:	mov	x1, sp
   10e7c:	add	x2, sp, #0x10
   10e80:	bl	4c90 <__gmpz_sub@plt>
   10e84:	mov	x0, sp
   10e88:	bl	4fd0 <__gmpz_get_ui@plt>
   10e8c:	mov	x1, x0
   10e90:	add	x0, sp, #0x20
   10e94:	bl	4ce0 <mpfr_set_exp@plt>
   10e98:	b	10f68 <mpc_sqr@@Base+0x868>
   10e9c:	ldur	w8, [x29, #-24]
   10ea0:	cmp	w8, #0x0
   10ea4:	mov	w8, #0xffffffff            	// #-1
   10ea8:	cneg	w25, w8, lt  // lt = tstop
   10eac:	b	11050 <mpc_sqr@@Base+0x950>
   10eb0:	bl	5170 <mpfr_get_emin@plt>
   10eb4:	mov	x25, x0
   10eb8:	add	x0, sp, #0x10
   10ebc:	mov	x1, sp
   10ec0:	bl	5410 <__gmpz_cmp@plt>
   10ec4:	cmp	w0, #0x0
   10ec8:	b.le	10fa0 <mpc_sqr@@Base+0x8a0>
   10ecc:	add	x0, sp, #0x20
   10ed0:	mov	x1, x25
   10ed4:	bl	4ce0 <mpfr_set_exp@plt>
   10ed8:	neg	x2, x25
   10edc:	mov	x0, sp
   10ee0:	mov	x1, sp
   10ee4:	bl	50b0 <__gmpz_add_ui@plt>
   10ee8:	add	x0, sp, #0x10
   10eec:	add	x1, sp, #0x10
   10ef0:	mov	x2, sp
   10ef4:	bl	4c90 <__gmpz_sub@plt>
   10ef8:	add	x0, sp, #0x10
   10efc:	bl	4a70 <__gmpz_get_si@plt>
   10f00:	mov	x1, x0
   10f04:	sub	x0, x29, #0x20
   10f08:	bl	4ce0 <mpfr_set_exp@plt>
   10f0c:	add	x0, sp, #0x10
   10f10:	mov	x1, sp
   10f14:	bl	4dd0 <__gmpz_set@plt>
   10f18:	b	10fe0 <mpc_sqr@@Base+0x8e0>
   10f1c:	add	x0, sp, #0x20
   10f20:	mov	x1, x25
   10f24:	bl	4ce0 <mpfr_set_exp@plt>
   10f28:	mov	x0, sp
   10f2c:	mov	x1, sp
   10f30:	mov	x2, x25
   10f34:	bl	4ba0 <__gmpz_sub_ui@plt>
   10f38:	add	x0, sp, #0x10
   10f3c:	add	x1, sp, #0x10
   10f40:	mov	x2, sp
   10f44:	bl	4c90 <__gmpz_sub@plt>
   10f48:	add	x0, sp, #0x10
   10f4c:	bl	4fd0 <__gmpz_get_ui@plt>
   10f50:	mov	x1, x0
   10f54:	sub	x0, x29, #0x20
   10f58:	bl	4ce0 <mpfr_set_exp@plt>
   10f5c:	add	x0, sp, #0x10
   10f60:	mov	x1, sp
   10f64:	bl	4dd0 <__gmpz_set@plt>
   10f68:	sub	x1, x29, #0x20
   10f6c:	add	x2, sp, #0x20
   10f70:	mov	x0, x22
   10f74:	mov	w3, w21
   10f78:	bl	4b30 <mpfr_sub@plt>
   10f7c:	mov	w25, w0
   10f80:	add	x0, sp, #0x10
   10f84:	bl	4fd0 <__gmpz_get_ui@plt>
   10f88:	mov	x2, x0
   10f8c:	mov	x0, x22
   10f90:	mov	x1, x22
   10f94:	mov	w3, w21
   10f98:	bl	5050 <mpfr_mul_2ui@plt>
   10f9c:	b	11020 <mpc_sqr@@Base+0x920>
   10fa0:	sub	x0, x29, #0x20
   10fa4:	mov	x1, x25
   10fa8:	bl	4ce0 <mpfr_set_exp@plt>
   10fac:	neg	x2, x25
   10fb0:	add	x0, sp, #0x10
   10fb4:	add	x1, sp, #0x10
   10fb8:	bl	50b0 <__gmpz_add_ui@plt>
   10fbc:	mov	x0, sp
   10fc0:	mov	x1, sp
   10fc4:	add	x2, sp, #0x10
   10fc8:	bl	4c90 <__gmpz_sub@plt>
   10fcc:	mov	x0, sp
   10fd0:	bl	4a70 <__gmpz_get_si@plt>
   10fd4:	mov	x1, x0
   10fd8:	add	x0, sp, #0x20
   10fdc:	bl	4ce0 <mpfr_set_exp@plt>
   10fe0:	sub	x1, x29, #0x20
   10fe4:	add	x2, sp, #0x20
   10fe8:	mov	x0, x22
   10fec:	mov	w3, w21
   10ff0:	bl	4b30 <mpfr_sub@plt>
   10ff4:	mov	w25, w0
   10ff8:	add	x0, sp, #0x10
   10ffc:	add	x1, sp, #0x10
   11000:	bl	4e30 <__gmpz_neg@plt>
   11004:	add	x0, sp, #0x10
   11008:	bl	4fd0 <__gmpz_get_ui@plt>
   1100c:	mov	x2, x0
   11010:	mov	x0, x22
   11014:	mov	x1, x22
   11018:	mov	w3, w21
   1101c:	bl	5430 <mpfr_div_2ui@plt>
   11020:	cmp	w0, #0x0
   11024:	csel	w25, w25, w0, eq  // eq = none
   11028:	add	x0, sp, #0x10
   1102c:	bl	5290 <__gmpz_clear@plt>
   11030:	mov	x0, sp
   11034:	bl	5290 <__gmpz_clear@plt>
   11038:	mov	x0, x20
   1103c:	mov	x1, x24
   11040:	bl	4ce0 <mpfr_set_exp@plt>
   11044:	mov	x0, x19
   11048:	mov	x1, x23
   1104c:	bl	4ce0 <mpfr_set_exp@plt>
   11050:	sub	x0, x29, #0x20
   11054:	bl	4e40 <mpfr_clear@plt>
   11058:	add	x0, sp, #0x20
   1105c:	bl	4e40 <mpfr_clear@plt>
   11060:	mov	w0, w25
   11064:	ldp	x20, x19, [sp, #160]
   11068:	ldp	x22, x21, [sp, #144]
   1106c:	ldp	x24, x23, [sp, #128]
   11070:	ldp	x26, x25, [sp, #112]
   11074:	ldp	x29, x30, [sp, #96]
   11078:	add	sp, sp, #0xb0
   1107c:	ret

0000000000011080 <mpc_sqrt@@Base>:
   11080:	sub	sp, sp, #0x100
   11084:	stp	x24, x23, [sp, #208]
   11088:	mov	x24, x0
   1108c:	mov	x0, x1
   11090:	stp	x29, x30, [sp, #160]
   11094:	stp	x28, x27, [sp, #176]
   11098:	stp	x26, x25, [sp, #192]
   1109c:	stp	x22, x21, [sp, #224]
   110a0:	stp	x20, x19, [sp, #240]
   110a4:	add	x29, sp, #0xa0
   110a8:	mov	w27, w2
   110ac:	mov	x25, x1
   110b0:	bl	5300 <mpfr_sgn@plt>
   110b4:	mov	w28, w0
   110b8:	add	x0, x25, #0x20
   110bc:	str	x0, [sp, #80]
   110c0:	bl	5300 <mpfr_sgn@plt>
   110c4:	ldr	w20, [x25, #40]
   110c8:	mov	w21, w0
   110cc:	mov	w8, #0x2                   	// #2
   110d0:	mov	x0, x25
   110d4:	cmp	w20, #0x0
   110d8:	cinc	w22, w8, lt  // lt = tstop
   110dc:	bl	55d0 <mpfr_number_p@plt>
   110e0:	cbz	w0, 11160 <mpc_sqrt@@Base+0xe0>
   110e4:	ldr	x0, [sp, #80]
   110e8:	bl	55d0 <mpfr_number_p@plt>
   110ec:	cbz	w0, 11160 <mpc_sqrt@@Base+0xe0>
   110f0:	cbz	w21, 111f0 <mpc_sqrt@@Base+0x170>
   110f4:	cbz	w28, 11248 <mpc_sqrt@@Base+0x1c8>
   110f8:	mov	x10, x24
   110fc:	ldr	x8, [x24]
   11100:	ldr	x9, [x10, #32]!
   11104:	sub	x0, x29, #0x20
   11108:	cmp	x8, x9
   1110c:	str	x10, [sp, #8]
   11110:	csel	x23, x8, x9, gt
   11114:	bl	4b70 <mpfr_init@plt>
   11118:	sub	x0, x29, #0x40
   1111c:	bl	4b70 <mpfr_init@plt>
   11120:	cmp	w28, #0x1
   11124:	asr	w13, w27, #4
   11128:	str	x24, [sp, #24]
   1112c:	str	w21, [sp, #20]
   11130:	str	w27, [sp, #36]
   11134:	str	w13, [sp, #4]
   11138:	b.lt	112c4 <mpc_sqrt@@Base+0x244>  // b.tstop
   1113c:	and	w12, w27, #0xf
   11140:	ldr	x27, [x24]
   11144:	ldr	x14, [x24, #32]
   11148:	cmp	w21, #0x0
   1114c:	mov	w8, #0x2                   	// #2
   11150:	cinc	w8, w8, gt
   11154:	cmp	w13, #0x1
   11158:	csel	w9, w8, w13, eq  // eq = none
   1115c:	b	1142c <mpc_sqrt@@Base+0x3ac>
   11160:	ldr	x8, [x25, #48]
   11164:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   11168:	asr	w19, w20, #31
   1116c:	cmp	x8, x9
   11170:	b.ne	11194 <mpc_sqrt@@Base+0x114>  // b.any
   11174:	mov	w1, #0x1                   	// #1
   11178:	mov	x0, x24
   1117c:	bl	5230 <mpfr_set_inf@plt>
   11180:	add	x0, x24, #0x20
   11184:	mov	w1, w19
   11188:	bl	5230 <mpfr_set_inf@plt>
   1118c:	mov	w0, wzr
   11190:	b	11a40 <mpc_sqrt@@Base+0x9c0>
   11194:	ldr	x9, [x25, #16]
   11198:	mov	x10, #0x2                   	// #2
   1119c:	movk	x10, #0x8000, lsl #48
   111a0:	cmp	x9, x10
   111a4:	b.eq	112ac <mpc_sqrt@@Base+0x22c>  // b.none
   111a8:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
   111ac:	cmp	x9, x10
   111b0:	b.ne	1129c <mpc_sqrt@@Base+0x21c>  // b.any
   111b4:	ldr	x0, [sp, #80]
   111b8:	ldr	w21, [x25, #8]
   111bc:	bl	55d0 <mpfr_number_p@plt>
   111c0:	tbnz	w21, #31, 113dc <mpc_sqrt@@Base+0x35c>
   111c4:	cbz	w0, 1174c <mpc_sqrt@@Base+0x6cc>
   111c8:	mov	w1, #0x1                   	// #1
   111cc:	mov	x0, x24
   111d0:	mov	w19, #0x1                   	// #1
   111d4:	bl	5230 <mpfr_set_inf@plt>
   111d8:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   111dc:	str	w19, [x24, #40]
   111e0:	str	x8, [x24, #48]
   111e4:	tbnz	w20, #31, 1130c <mpc_sqrt@@Base+0x28c>
   111e8:	mov	w0, wzr
   111ec:	b	11a40 <mpc_sqrt@@Base+0x9c0>
   111f0:	cbz	w28, 112f0 <mpc_sqrt@@Base+0x270>
   111f4:	cmp	w28, #0x1
   111f8:	b.lt	11324 <mpc_sqrt@@Base+0x2a4>  // b.tstop
   111fc:	and	w2, w27, #0xf
   11200:	mov	x0, x24
   11204:	mov	x1, x25
   11208:	bl	5460 <mpfr_sqrt@plt>
   1120c:	mov	w19, w0
   11210:	mov	w8, #0x1                   	// #1
   11214:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   11218:	str	w8, [x24, #40]
   1121c:	str	x9, [x24, #48]
   11220:	tbz	w20, #31, 11234 <mpc_sqrt@@Base+0x1b4>
   11224:	mov	x0, x24
   11228:	mov	x1, x24
   1122c:	mov	w2, wzr
   11230:	bl	5070 <mpc_conj@plt>
   11234:	cmp	w19, #0x0
   11238:	cset	w8, ne  // ne = any
   1123c:	mov	w9, #0x2                   	// #2
   11240:	csel	w0, w9, w8, lt  // lt = tstop
   11244:	b	11a40 <mpc_sqrt@@Base+0x9c0>
   11248:	ldr	x8, [sp, #80]
   1124c:	sub	x0, x29, #0x20
   11250:	sub	x1, x29, #0x20
   11254:	mov	w2, #0x1                   	// #1
   11258:	ldp	q1, q0, [x8]
   1125c:	mov	w3, wzr
   11260:	stp	q1, q0, [x29, #-32]
   11264:	bl	5430 <mpfr_div_2ui@plt>
   11268:	cmp	w21, #0x1
   1126c:	b.lt	11360 <mpc_sqrt@@Base+0x2e0>  // b.tstop
   11270:	and	w2, w27, #0xf
   11274:	sub	x1, x29, #0x20
   11278:	mov	x0, x24
   1127c:	bl	5460 <mpfr_sqrt@plt>
   11280:	mov	w19, w0
   11284:	add	x0, x24, #0x20
   11288:	asr	w2, w27, #4
   1128c:	sub	x1, x29, #0x20
   11290:	bl	5460 <mpfr_sqrt@plt>
   11294:	mov	w20, w0
   11298:	b	113c4 <mpc_sqrt@@Base+0x344>
   1129c:	mov	x9, #0x2                   	// #2
   112a0:	movk	x9, #0x8000, lsl #48
   112a4:	cmp	x8, x9
   112a8:	b.ne	110f0 <mpc_sqrt@@Base+0x70>  // b.any
   112ac:	mov	x0, x24
   112b0:	bl	4b10 <mpfr_set_nan@plt>
   112b4:	add	x0, x24, #0x20
   112b8:	bl	4b10 <mpfr_set_nan@plt>
   112bc:	mov	w0, wzr
   112c0:	b	11a40 <mpc_sqrt@@Base+0x9c0>
   112c4:	ldr	x27, [x24, #32]
   112c8:	ldr	x14, [x24]
   112cc:	cmp	w21, #0x1
   112d0:	b.lt	113f4 <mpc_sqrt@@Base+0x374>  // b.tstop
   112d4:	ldr	w8, [sp, #36]
   112d8:	mov	w9, #0x3                   	// #3
   112dc:	mov	w12, w13
   112e0:	and	w8, w8, #0xf
   112e4:	cmp	w8, #0x1
   112e8:	csel	w9, w9, w8, eq  // eq = none
   112ec:	b	1142c <mpc_sqrt@@Base+0x3ac>
   112f0:	mov	x0, x24
   112f4:	mov	x1, xzr
   112f8:	mov	x2, xzr
   112fc:	mov	w3, wzr
   11300:	bl	5150 <mpc_set_ui_ui@plt>
   11304:	mov	w0, wzr
   11308:	tbz	w20, #31, 11a40 <mpc_sqrt@@Base+0x9c0>
   1130c:	mov	x0, x24
   11310:	mov	x1, x24
   11314:	mov	w2, wzr
   11318:	bl	5070 <mpc_conj@plt>
   1131c:	mov	w0, wzr
   11320:	b	11a40 <mpc_sqrt@@Base+0x9c0>
   11324:	ldr	x1, [x25]
   11328:	sub	x0, x29, #0x20
   1132c:	bl	5540 <mpfr_init2@plt>
   11330:	sub	x0, x29, #0x20
   11334:	mov	x1, x25
   11338:	mov	w2, wzr
   1133c:	bl	4c50 <mpfr_neg@plt>
   11340:	add	x19, x24, #0x20
   11344:	asr	w2, w27, #4
   11348:	tbnz	w20, #31, 1179c <mpc_sqrt@@Base+0x71c>
   1134c:	sub	x1, x29, #0x20
   11350:	mov	x0, x19
   11354:	bl	5460 <mpfr_sqrt@plt>
   11358:	mov	w20, w0
   1135c:	b	117d4 <mpc_sqrt@@Base+0x754>
   11360:	sub	x0, x29, #0x20
   11364:	sub	x1, x29, #0x20
   11368:	mov	w2, wzr
   1136c:	bl	4c50 <mpfr_neg@plt>
   11370:	and	w2, w27, #0xf
   11374:	sub	x1, x29, #0x20
   11378:	mov	x0, x24
   1137c:	bl	5460 <mpfr_sqrt@plt>
   11380:	asr	w8, w27, #4
   11384:	mov	w9, #0x2                   	// #2
   11388:	cmp	w8, #0x3
   1138c:	add	x21, x24, #0x20
   11390:	csel	w9, w9, w8, eq  // eq = none
   11394:	cmp	w8, #0x2
   11398:	mov	w8, #0x3                   	// #3
   1139c:	mov	w19, w0
   113a0:	csel	w2, w8, w9, eq  // eq = none
   113a4:	sub	x1, x29, #0x20
   113a8:	mov	x0, x21
   113ac:	bl	5460 <mpfr_sqrt@plt>
   113b0:	neg	w20, w0
   113b4:	mov	x0, x21
   113b8:	mov	x1, x21
   113bc:	mov	w2, wzr
   113c0:	bl	4c50 <mpfr_neg@plt>
   113c4:	cmp	w19, #0x0
   113c8:	mov	w8, #0x2                   	// #2
   113cc:	cset	w9, ne  // ne = any
   113d0:	csel	w8, w8, w9, lt  // lt = tstop
   113d4:	cmp	w20, #0x0
   113d8:	b	11a2c <mpc_sqrt@@Base+0x9ac>
   113dc:	cbz	w0, 11804 <mpc_sqrt@@Base+0x784>
   113e0:	mov	w8, #0x1                   	// #1
   113e4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   113e8:	str	w8, [x24, #8]
   113ec:	str	x9, [x24, #16]
   113f0:	b	11180 <mpc_sqrt@@Base+0x100>
   113f4:	ldr	w10, [sp, #36]
   113f8:	cmp	w13, #0x3
   113fc:	mov	w8, #0x2                   	// #2
   11400:	mov	w9, #0x3                   	// #3
   11404:	and	w10, w10, #0xf
   11408:	csel	w11, w8, w13, eq  // eq = none
   1140c:	cmp	w13, #0x2
   11410:	csel	w12, w9, w11, eq  // eq = none
   11414:	cmp	w10, #0x3
   11418:	csel	w11, w8, w10, eq  // eq = none
   1141c:	cmp	w10, #0x2
   11420:	csel	w9, w9, w11, eq  // eq = none
   11424:	cmp	w9, #0x1
   11428:	csel	w9, w8, w9, eq  // eq = none
   1142c:	cmp	w12, #0x0
   11430:	mov	w8, #0xffffffff            	// #-1
   11434:	cinc	x10, x27, eq  // eq = none
   11438:	cmp	w20, #0x0
   1143c:	cneg	w8, w8, ge  // ge = tcont
   11440:	cmp	w9, #0x0
   11444:	stp	w9, w8, [sp, #48]
   11448:	cinc	x8, x14, eq  // eq = none
   1144c:	mov	w26, wzr
   11450:	mov	w24, wzr
   11454:	str	x8, [sp, #40]
   11458:	mov	w8, #0x1                   	// #1
   1145c:	stp	w12, wzr, [sp, #72]
   11460:	stp	x10, x14, [sp, #56]
   11464:	stur	x8, [x29, #-72]
   11468:	cmp	w26, #0x1
   1146c:	b.hi	11480 <mpc_sqrt@@Base+0x400>  // b.pmore
   11470:	mov	x0, x23
   11474:	bl	4df0 <mpc_ceil_log2@plt>
   11478:	add	x8, x0, #0x4
   1147c:	b	1148c <mpc_sqrt@@Base+0x40c>
   11480:	cmp	x23, #0x0
   11484:	cinc	x8, x23, lt  // lt = tstop
   11488:	asr	x8, x8, #1
   1148c:	add	x23, x8, x23
   11490:	sub	x0, x29, #0x20
   11494:	mov	x1, x23
   11498:	bl	4d50 <mpfr_set_prec@plt>
   1149c:	sub	x0, x29, #0x40
   114a0:	mov	x1, x23
   114a4:	bl	4d50 <mpfr_set_prec@plt>
   114a8:	sub	x0, x29, #0x20
   114ac:	mov	w2, #0x3                   	// #3
   114b0:	mov	x1, x25
   114b4:	bl	52b0 <mpc_abs@plt>
   114b8:	mov	w19, w0
   114bc:	sub	x0, x29, #0x20
   114c0:	sub	x1, x29, #0x20
   114c4:	mov	w3, #0x3                   	// #3
   114c8:	mov	x2, x25
   114cc:	tbnz	w28, #31, 114d8 <mpc_sqrt@@Base+0x458>
   114d0:	bl	4f60 <mpfr_add@plt>
   114d4:	b	114dc <mpc_sqrt@@Base+0x45c>
   114d8:	bl	4b30 <mpfr_sub@plt>
   114dc:	orr	w19, w0, w19
   114e0:	sub	x0, x29, #0x20
   114e4:	sub	x1, x29, #0x20
   114e8:	mov	w2, #0x1                   	// #1
   114ec:	mov	w3, #0x3                   	// #3
   114f0:	bl	5430 <mpfr_div_2ui@plt>
   114f4:	orr	w19, w19, w0
   114f8:	sub	x0, x29, #0x20
   114fc:	sub	x1, x29, #0x20
   11500:	mov	w2, #0x3                   	// #3
   11504:	bl	5460 <mpfr_sqrt@plt>
   11508:	orr	w20, w19, w0
   1150c:	sub	x0, x29, #0x20
   11510:	bl	54a0 <mpfr_min_prec@plt>
   11514:	mov	x19, x0
   11518:	cmp	x0, x27
   1151c:	sub	x1, x23, #0x2
   11520:	b.gt	1153c <mpc_sqrt@@Base+0x4bc>
   11524:	ldr	w8, [sp, #72]
   11528:	cbz	w8, 11550 <mpc_sqrt@@Base+0x4d0>
   1152c:	sub	x0, x29, #0x20
   11530:	mov	w2, #0x3                   	// #3
   11534:	mov	w3, #0x3                   	// #3
   11538:	b	1155c <mpc_sqrt@@Base+0x4dc>
   1153c:	ldr	x4, [sp, #56]
   11540:	sub	x0, x29, #0x20
   11544:	mov	w2, #0x3                   	// #3
   11548:	mov	w3, #0x2                   	// #2
   1154c:	b	11560 <mpc_sqrt@@Base+0x4e0>
   11550:	sub	x0, x29, #0x20
   11554:	mov	w2, #0x3                   	// #3
   11558:	mov	w3, wzr
   1155c:	mov	x4, x27
   11560:	bl	5550 <mpfr_can_round@plt>
   11564:	cmp	w20, #0x0
   11568:	cset	w8, eq  // eq = none
   1156c:	cmp	w0, #0x0
   11570:	cset	w9, ne  // ne = any
   11574:	orr	w21, w8, w9
   11578:	cmp	w21, #0x1
   1157c:	add	w26, w26, #0x1
   11580:	b.ne	115fc <mpc_sqrt@@Base+0x57c>  // b.any
   11584:	ldr	x1, [sp, #80]
   11588:	sub	x0, x29, #0x40
   1158c:	sub	x2, x29, #0x20
   11590:	mov	w3, w22
   11594:	bl	5260 <mpfr_div@plt>
   11598:	ldr	w8, [sp, #52]
   1159c:	cmp	w0, #0x0
   115a0:	ccmp	w20, #0x0, #0x4, eq  // eq = none
   115a4:	sub	x1, x29, #0x40
   115a8:	csel	w24, w8, w0, ne  // ne = any
   115ac:	sub	x0, x29, #0x40
   115b0:	mov	w2, #0x1                   	// #1
   115b4:	mov	w3, w22
   115b8:	bl	5430 <mpfr_div_2ui@plt>
   115bc:	orr	w8, w24, w0
   115c0:	sub	x0, x29, #0x40
   115c4:	stur	x8, [x29, #-72]
   115c8:	bl	54a0 <mpfr_min_prec@plt>
   115cc:	ldr	x4, [sp, #64]
   115d0:	sub	x1, x23, #0x3
   115d4:	cmp	x0, x4
   115d8:	cset	w8, le
   115dc:	str	w8, [sp, #76]
   115e0:	b.gt	11604 <mpc_sqrt@@Base+0x584>
   115e4:	ldr	w8, [sp, #48]
   115e8:	cbz	w8, 11618 <mpc_sqrt@@Base+0x598>
   115ec:	sub	x0, x29, #0x40
   115f0:	mov	w2, w22
   115f4:	mov	w3, w22
   115f8:	b	11624 <mpc_sqrt@@Base+0x5a4>
   115fc:	cbz	w21, 11468 <mpc_sqrt@@Base+0x3e8>
   11600:	b	11630 <mpc_sqrt@@Base+0x5b0>
   11604:	ldr	x4, [sp, #40]
   11608:	sub	x0, x29, #0x40
   1160c:	mov	w3, #0x1                   	// #1
   11610:	mov	w2, w22
   11614:	b	11624 <mpc_sqrt@@Base+0x5a4>
   11618:	sub	x0, x29, #0x40
   1161c:	mov	w2, w22
   11620:	mov	w3, wzr
   11624:	bl	5550 <mpfr_can_round@plt>
   11628:	mov	w24, w0
   1162c:	cbz	w21, 11468 <mpc_sqrt@@Base+0x3e8>
   11630:	ldur	x8, [x29, #-72]
   11634:	cbz	w8, 1163c <mpc_sqrt@@Base+0x5bc>
   11638:	cbz	w24, 11468 <mpc_sqrt@@Base+0x3e8>
   1163c:	cmp	w28, #0x1
   11640:	b.lt	11684 <mpc_sqrt@@Base+0x604>  // b.tstop
   11644:	ldr	w8, [sp, #36]
   11648:	ldr	x24, [sp, #24]
   1164c:	ldur	w3, [x29, #-24]
   11650:	sub	x1, x29, #0x20
   11654:	and	w2, w8, #0xf
   11658:	mov	x0, x24
   1165c:	bl	52e0 <mpfr_set4@plt>
   11660:	ldr	x26, [sp, #8]
   11664:	ldur	w3, [x29, #-56]
   11668:	ldr	w2, [sp, #4]
   1166c:	mov	w21, w0
   11670:	sub	x1, x29, #0x40
   11674:	mov	x0, x26
   11678:	bl	52e0 <mpfr_set4@plt>
   1167c:	ldr	w25, [sp, #20]
   11680:	b	116ec <mpc_sqrt@@Base+0x66c>
   11684:	ldr	w25, [sp, #20]
   11688:	ldr	w8, [sp, #36]
   1168c:	ldr	x24, [sp, #24]
   11690:	ldr	x26, [sp, #8]
   11694:	cmp	w25, #0x1
   11698:	and	w2, w8, #0xf
   1169c:	b.lt	116cc <mpc_sqrt@@Base+0x64c>  // b.tstop
   116a0:	ldur	w3, [x29, #-56]
   116a4:	sub	x1, x29, #0x40
   116a8:	mov	x0, x24
   116ac:	bl	52e0 <mpfr_set4@plt>
   116b0:	ldur	w3, [x29, #-24]
   116b4:	ldr	w2, [sp, #4]
   116b8:	mov	w21, w0
   116bc:	sub	x1, x29, #0x20
   116c0:	mov	x0, x26
   116c4:	bl	52e0 <mpfr_set4@plt>
   116c8:	b	116ec <mpc_sqrt@@Base+0x66c>
   116cc:	sub	x1, x29, #0x40
   116d0:	mov	x0, x24
   116d4:	bl	4c50 <mpfr_neg@plt>
   116d8:	ldr	w2, [sp, #4]
   116dc:	mov	w21, w0
   116e0:	sub	x1, x29, #0x20
   116e4:	mov	x0, x26
   116e8:	bl	4c50 <mpfr_neg@plt>
   116ec:	mov	w23, w0
   116f0:	cmp	x19, x27
   116f4:	b.gt	118b4 <mpc_sqrt@@Base+0x834>
   116f8:	cbz	w20, 118b4 <mpc_sqrt@@Base+0x834>
   116fc:	ldr	w8, [sp, #72]
   11700:	cbz	w8, 11738 <mpc_sqrt@@Base+0x6b8>
   11704:	cmp	w28, #0x1
   11708:	b.lt	11760 <mpc_sqrt@@Base+0x6e0>  // b.tstop
   1170c:	cmp	w8, #0x2
   11710:	b.ne	11794 <mpc_sqrt@@Base+0x714>  // b.any
   11714:	ldr	x8, [x24, #16]
   11718:	mov	x9, #0x2                   	// #2
   1171c:	movk	x9, #0x8000, lsl #48
   11720:	cmp	x8, x9
   11724:	b.gt	11810 <mpc_sqrt@@Base+0x790>
   11728:	b.ne	11730 <mpc_sqrt@@Base+0x6b0>  // b.any
   1172c:	bl	4bd0 <mpfr_set_erangeflag@plt>
   11730:	mov	w8, wzr
   11734:	b	11814 <mpc_sqrt@@Base+0x794>
   11738:	cmp	w28, #0x0
   1173c:	b.gt	118b8 <mpc_sqrt@@Base+0x838>
   11740:	cmp	w25, #0x0
   11744:	cneg	w23, w20, le
   11748:	b	118b4 <mpc_sqrt@@Base+0x834>
   1174c:	mov	x0, x24
   11750:	mov	x1, x25
   11754:	mov	w2, w27
   11758:	bl	5680 <mpc_set@plt>
   1175c:	b	11a40 <mpc_sqrt@@Base+0x9c0>
   11760:	cmp	w25, #0x1
   11764:	b.lt	1182c <mpc_sqrt@@Base+0x7ac>  // b.tstop
   11768:	cmp	w8, #0x2
   1176c:	b.ne	118b0 <mpc_sqrt@@Base+0x830>  // b.any
   11770:	ldr	x8, [x24, #48]
   11774:	mov	x9, #0x2                   	// #2
   11778:	movk	x9, #0x8000, lsl #48
   1177c:	cmp	x8, x9
   11780:	b.gt	1186c <mpc_sqrt@@Base+0x7ec>
   11784:	b.ne	1178c <mpc_sqrt@@Base+0x70c>  // b.any
   11788:	bl	4bd0 <mpfr_set_erangeflag@plt>
   1178c:	mov	w8, wzr
   11790:	b	11870 <mpc_sqrt@@Base+0x7f0>
   11794:	mov	w20, #0xffffffff            	// #-1
   11798:	b	118b8 <mpc_sqrt@@Base+0x838>
   1179c:	cmp	w2, #0x3
   117a0:	mov	w8, #0x2                   	// #2
   117a4:	csel	w8, w8, w2, eq  // eq = none
   117a8:	cmp	w2, #0x2
   117ac:	mov	w9, #0x3                   	// #3
   117b0:	csel	w2, w9, w8, eq  // eq = none
   117b4:	sub	x1, x29, #0x20
   117b8:	mov	x0, x19
   117bc:	bl	5460 <mpfr_sqrt@plt>
   117c0:	neg	w20, w0
   117c4:	mov	x0, x19
   117c8:	mov	x1, x19
   117cc:	mov	w2, wzr
   117d0:	bl	4c50 <mpfr_neg@plt>
   117d4:	mov	w8, #0x1                   	// #1
   117d8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   117dc:	sub	x0, x29, #0x20
   117e0:	str	w8, [x24, #8]
   117e4:	str	x9, [x24, #16]
   117e8:	bl	4e40 <mpfr_clear@plt>
   117ec:	cmp	w20, #0x0
   117f0:	cset	w8, ne  // ne = any
   117f4:	lsl	w8, w8, #2
   117f8:	mov	w9, #0x8                   	// #8
   117fc:	csel	w0, w9, w8, lt  // lt = tstop
   11800:	b	11a40 <mpc_sqrt@@Base+0x9c0>
   11804:	mov	x0, x24
   11808:	bl	4b10 <mpfr_set_nan@plt>
   1180c:	b	11180 <mpc_sqrt@@Base+0x100>
   11810:	ldr	w8, [x24, #8]
   11814:	mov	x0, x24
   11818:	cmp	w8, #0x1
   1181c:	b.lt	11858 <mpc_sqrt@@Base+0x7d8>  // b.tstop
   11820:	bl	4ef0 <mpfr_nextabove@plt>
   11824:	mov	w20, #0x1                   	// #1
   11828:	b	118b8 <mpc_sqrt@@Base+0x838>
   1182c:	cmp	w8, #0x2
   11830:	b.ne	11864 <mpc_sqrt@@Base+0x7e4>  // b.any
   11834:	ldr	x8, [x24, #48]
   11838:	mov	x9, #0x2                   	// #2
   1183c:	movk	x9, #0x8000, lsl #48
   11840:	cmp	x8, x9
   11844:	b.gt	11894 <mpc_sqrt@@Base+0x814>
   11848:	b.ne	11850 <mpc_sqrt@@Base+0x7d0>  // b.any
   1184c:	bl	4bd0 <mpfr_set_erangeflag@plt>
   11850:	mov	w8, wzr
   11854:	b	11898 <mpc_sqrt@@Base+0x818>
   11858:	bl	4c80 <mpfr_nextbelow@plt>
   1185c:	mov	w20, #0x1                   	// #1
   11860:	b	118b8 <mpc_sqrt@@Base+0x838>
   11864:	mov	w23, #0x1                   	// #1
   11868:	b	118b4 <mpc_sqrt@@Base+0x834>
   1186c:	ldr	w8, [x24, #40]
   11870:	mov	x0, x26
   11874:	cmp	w8, #0x1
   11878:	b.lt	11888 <mpc_sqrt@@Base+0x808>  // b.tstop
   1187c:	bl	4ef0 <mpfr_nextabove@plt>
   11880:	mov	w23, #0x1                   	// #1
   11884:	b	118b4 <mpc_sqrt@@Base+0x834>
   11888:	bl	4c80 <mpfr_nextbelow@plt>
   1188c:	mov	w23, #0x1                   	// #1
   11890:	b	118b4 <mpc_sqrt@@Base+0x834>
   11894:	ldr	w8, [x24, #40]
   11898:	mov	x0, x26
   1189c:	cmp	w8, #0x1
   118a0:	b.lt	118ac <mpc_sqrt@@Base+0x82c>  // b.tstop
   118a4:	bl	4ef0 <mpfr_nextabove@plt>
   118a8:	b	118b0 <mpc_sqrt@@Base+0x830>
   118ac:	bl	4c80 <mpfr_nextbelow@plt>
   118b0:	mov	w23, #0xffffffff            	// #-1
   118b4:	mov	w20, w21
   118b8:	ldr	w8, [sp, #76]
   118bc:	cbz	w8, 11a08 <mpc_sqrt@@Base+0x988>
   118c0:	ldur	x8, [x29, #-72]
   118c4:	cbz	w8, 11a08 <mpc_sqrt@@Base+0x988>
   118c8:	ldr	w8, [sp, #48]
   118cc:	cbz	w8, 11908 <mpc_sqrt@@Base+0x888>
   118d0:	cmp	w28, #0x1
   118d4:	b.lt	1191c <mpc_sqrt@@Base+0x89c>  // b.tstop
   118d8:	cmp	w8, w22
   118dc:	b.eq	11910 <mpc_sqrt@@Base+0x890>  // b.none
   118e0:	ldr	x8, [x24, #48]
   118e4:	mov	x9, #0x2                   	// #2
   118e8:	movk	x9, #0x8000, lsl #48
   118ec:	cmp	x8, x9
   118f0:	ldur	x8, [x29, #-72]
   118f4:	neg	w23, w8
   118f8:	b.gt	11964 <mpc_sqrt@@Base+0x8e4>
   118fc:	b.ne	1197c <mpc_sqrt@@Base+0x8fc>  // b.any
   11900:	bl	4bd0 <mpfr_set_erangeflag@plt>
   11904:	b	1197c <mpc_sqrt@@Base+0x8fc>
   11908:	cmp	w28, #0x0
   1190c:	b.le	11954 <mpc_sqrt@@Base+0x8d4>
   11910:	ldur	x8, [x29, #-72]
   11914:	mov	w23, w8
   11918:	b	11a08 <mpc_sqrt@@Base+0x988>
   1191c:	cmp	w25, #0x1
   11920:	b.lt	11988 <mpc_sqrt@@Base+0x908>  // b.tstop
   11924:	cmp	w8, w22
   11928:	b.eq	11a00 <mpc_sqrt@@Base+0x980>  // b.none
   1192c:	ldr	x8, [x24, #16]
   11930:	mov	x9, #0x2                   	// #2
   11934:	movk	x9, #0x8000, lsl #48
   11938:	cmp	x8, x9
   1193c:	ldur	x8, [x29, #-72]
   11940:	neg	w20, w8
   11944:	b.gt	119bc <mpc_sqrt@@Base+0x93c>
   11948:	b.ne	119d4 <mpc_sqrt@@Base+0x954>  // b.any
   1194c:	bl	4bd0 <mpfr_set_erangeflag@plt>
   11950:	b	119d4 <mpc_sqrt@@Base+0x954>
   11954:	ldur	x8, [x29, #-72]
   11958:	cmp	w25, #0x0
   1195c:	cneg	w20, w8, le
   11960:	b	11a08 <mpc_sqrt@@Base+0x988>
   11964:	ldr	w8, [x24, #40]
   11968:	cmp	w8, #0x1
   1196c:	b.lt	1197c <mpc_sqrt@@Base+0x8fc>  // b.tstop
   11970:	mov	x0, x26
   11974:	bl	4c80 <mpfr_nextbelow@plt>
   11978:	b	11a08 <mpc_sqrt@@Base+0x988>
   1197c:	mov	x0, x26
   11980:	bl	4ef0 <mpfr_nextabove@plt>
   11984:	b	11a08 <mpc_sqrt@@Base+0x988>
   11988:	cmp	w8, w22
   1198c:	b.ne	1199c <mpc_sqrt@@Base+0x91c>  // b.any
   11990:	ldur	x8, [x29, #-72]
   11994:	neg	w20, w8
   11998:	b	11a08 <mpc_sqrt@@Base+0x988>
   1199c:	ldr	x8, [x24, #16]
   119a0:	mov	x9, #0x2                   	// #2
   119a4:	movk	x9, #0x8000, lsl #48
   119a8:	cmp	x8, x9
   119ac:	b.gt	119e0 <mpc_sqrt@@Base+0x960>
   119b0:	b.ne	119f8 <mpc_sqrt@@Base+0x978>  // b.any
   119b4:	bl	4bd0 <mpfr_set_erangeflag@plt>
   119b8:	b	119f8 <mpc_sqrt@@Base+0x978>
   119bc:	ldr	w8, [x24, #8]
   119c0:	cmp	w8, #0x1
   119c4:	b.lt	119d4 <mpc_sqrt@@Base+0x954>  // b.tstop
   119c8:	mov	x0, x24
   119cc:	bl	4c80 <mpfr_nextbelow@plt>
   119d0:	b	11a08 <mpc_sqrt@@Base+0x988>
   119d4:	mov	x0, x24
   119d8:	bl	4ef0 <mpfr_nextabove@plt>
   119dc:	b	11a08 <mpc_sqrt@@Base+0x988>
   119e0:	ldr	w8, [x24, #8]
   119e4:	cmp	w8, #0x1
   119e8:	b.lt	119f8 <mpc_sqrt@@Base+0x978>  // b.tstop
   119ec:	mov	x0, x24
   119f0:	bl	4c80 <mpfr_nextbelow@plt>
   119f4:	b	11a00 <mpc_sqrt@@Base+0x980>
   119f8:	mov	x0, x24
   119fc:	bl	4ef0 <mpfr_nextabove@plt>
   11a00:	ldur	x8, [x29, #-72]
   11a04:	mov	w20, w8
   11a08:	sub	x0, x29, #0x20
   11a0c:	bl	4e40 <mpfr_clear@plt>
   11a10:	sub	x0, x29, #0x40
   11a14:	bl	4e40 <mpfr_clear@plt>
   11a18:	cmp	w20, #0x0
   11a1c:	mov	w8, #0x2                   	// #2
   11a20:	cset	w9, ne  // ne = any
   11a24:	csel	w8, w8, w9, lt  // lt = tstop
   11a28:	cmp	w23, #0x0
   11a2c:	cset	w9, ne  // ne = any
   11a30:	lsl	w9, w9, #2
   11a34:	mov	w10, #0x8                   	// #8
   11a38:	csel	w9, w10, w9, lt  // lt = tstop
   11a3c:	orr	w0, w8, w9
   11a40:	ldp	x20, x19, [sp, #240]
   11a44:	ldp	x22, x21, [sp, #224]
   11a48:	ldp	x24, x23, [sp, #208]
   11a4c:	ldp	x26, x25, [sp, #192]
   11a50:	ldp	x28, x27, [sp, #176]
   11a54:	ldp	x29, x30, [sp, #160]
   11a58:	add	sp, sp, #0x100
   11a5c:	ret

0000000000011a60 <mpc_strtoc@@Base>:
   11a60:	sub	sp, sp, #0x60
   11a64:	stp	x22, x21, [sp, #64]
   11a68:	stp	x20, x19, [sp, #80]
   11a6c:	mov	x19, x2
   11a70:	mov	x21, x1
   11a74:	cmp	w3, #0x1
   11a78:	mov	x20, x0
   11a7c:	stp	x29, x30, [sp, #16]
   11a80:	stp	x26, x25, [sp, #32]
   11a84:	stp	x24, x23, [sp, #48]
   11a88:	add	x29, sp, #0x10
   11a8c:	b.eq	11b78 <mpc_strtoc@@Base+0x118>  // b.none
   11a90:	cbz	x21, 11b78 <mpc_strtoc@@Base+0x118>
   11a94:	mov	w22, w3
   11a98:	cmp	w3, #0x24
   11a9c:	b.gt	11b78 <mpc_strtoc@@Base+0x118>
   11aa0:	add	x0, sp, #0x8
   11aa4:	mov	w23, w4
   11aa8:	str	x21, [sp, #8]
   11aac:	bl	11bfc <mpc_strtoc@@Base+0x19c>
   11ab0:	ldr	x8, [sp, #8]
   11ab4:	ldrb	w9, [x8]
   11ab8:	cmp	w9, #0x28
   11abc:	b.ne	11ad0 <mpc_strtoc@@Base+0x70>  // b.any
   11ac0:	add	x8, x8, #0x1
   11ac4:	mov	w25, #0x1                   	// #1
   11ac8:	str	x8, [sp, #8]
   11acc:	b	11ad4 <mpc_strtoc@@Base+0x74>
   11ad0:	mov	w25, wzr
   11ad4:	ldr	x24, [sp, #8]
   11ad8:	and	w4, w23, #0xf
   11adc:	mov	x2, sp
   11ae0:	mov	x0, x20
   11ae4:	mov	x1, x24
   11ae8:	mov	w3, w22
   11aec:	bl	4b90 <mpfr_strtofr@plt>
   11af0:	ldr	x26, [sp]
   11af4:	cmp	x26, x24
   11af8:	b.eq	11b78 <mpc_strtoc@@Base+0x118>  // b.none
   11afc:	mov	w24, w0
   11b00:	str	x26, [sp, #8]
   11b04:	cbz	w25, 11bb0 <mpc_strtoc@@Base+0x150>
   11b08:	bl	5280 <__ctype_b_loc@plt>
   11b0c:	ldr	x8, [x0]
   11b10:	ldrb	w9, [x26]
   11b14:	ldrh	w8, [x8, x9, lsl #1]
   11b18:	tbz	w8, #13, 11b78 <mpc_strtoc@@Base+0x118>
   11b1c:	add	x0, sp, #0x8
   11b20:	bl	11bfc <mpc_strtoc@@Base+0x19c>
   11b24:	ldr	x25, [sp, #8]
   11b28:	add	x0, x20, #0x20
   11b2c:	asr	w4, w23, #4
   11b30:	mov	x2, sp
   11b34:	mov	x1, x25
   11b38:	mov	w3, w22
   11b3c:	bl	4b90 <mpfr_strtofr@plt>
   11b40:	ldr	x8, [sp]
   11b44:	cmp	x8, x25
   11b48:	b.eq	11b78 <mpc_strtoc@@Base+0x118>  // b.none
   11b4c:	mov	w22, w0
   11b50:	add	x0, sp, #0x8
   11b54:	str	x8, [sp, #8]
   11b58:	bl	11bfc <mpc_strtoc@@Base+0x19c>
   11b5c:	ldr	x8, [sp, #8]
   11b60:	ldrb	w9, [x8]
   11b64:	cmp	w9, #0x29
   11b68:	b.ne	11b78 <mpc_strtoc@@Base+0x118>  // b.any
   11b6c:	add	x8, x8, #0x1
   11b70:	str	x8, [sp, #8]
   11b74:	b	11bc4 <mpc_strtoc@@Base+0x164>
   11b78:	cbz	x19, 11b80 <mpc_strtoc@@Base+0x120>
   11b7c:	str	x21, [x19]
   11b80:	mov	x0, x20
   11b84:	bl	4b10 <mpfr_set_nan@plt>
   11b88:	add	x0, x20, #0x20
   11b8c:	bl	4b10 <mpfr_set_nan@plt>
   11b90:	mov	w0, #0xffffffff            	// #-1
   11b94:	ldp	x20, x19, [sp, #80]
   11b98:	ldp	x22, x21, [sp, #64]
   11b9c:	ldp	x24, x23, [sp, #48]
   11ba0:	ldp	x26, x25, [sp, #32]
   11ba4:	ldp	x29, x30, [sp, #16]
   11ba8:	add	sp, sp, #0x60
   11bac:	ret
   11bb0:	mov	w8, #0x1                   	// #1
   11bb4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   11bb8:	mov	w22, wzr
   11bbc:	str	w8, [x20, #40]
   11bc0:	str	x9, [x20, #48]
   11bc4:	cbz	x19, 11bd0 <mpc_strtoc@@Base+0x170>
   11bc8:	ldr	x8, [sp, #8]
   11bcc:	str	x8, [x19]
   11bd0:	cmp	w24, #0x0
   11bd4:	mov	w8, #0x2                   	// #2
   11bd8:	cset	w9, ne  // ne = any
   11bdc:	csel	w8, w8, w9, lt  // lt = tstop
   11be0:	cmp	w22, #0x0
   11be4:	cset	w9, ne  // ne = any
   11be8:	lsl	w9, w9, #2
   11bec:	mov	w10, #0x8                   	// #8
   11bf0:	csel	w9, w10, w9, lt  // lt = tstop
   11bf4:	orr	w0, w9, w8
   11bf8:	b	11b94 <mpc_strtoc@@Base+0x134>
   11bfc:	stp	x29, x30, [sp, #-32]!
   11c00:	str	x19, [sp, #16]
   11c04:	mov	x29, sp
   11c08:	mov	x19, x0
   11c0c:	bl	5280 <__ctype_b_loc@plt>
   11c10:	ldr	x8, [x19]
   11c14:	ldr	x9, [x0]
   11c18:	ldrb	w10, [x8]
   11c1c:	ldrh	w9, [x9, x10, lsl #1]
   11c20:	tbz	w9, #13, 11c3c <mpc_strtoc@@Base+0x1dc>
   11c24:	add	x8, x8, #0x1
   11c28:	str	x8, [x19]
   11c2c:	ldr	x9, [x0]
   11c30:	ldrb	w10, [x8], #1
   11c34:	ldrh	w9, [x9, x10, lsl #1]
   11c38:	tbnz	w9, #13, 11c28 <mpc_strtoc@@Base+0x1c8>
   11c3c:	ldr	x19, [sp, #16]
   11c40:	ldp	x29, x30, [sp], #32
   11c44:	ret

0000000000011c48 <mpc_sub@@Base>:
   11c48:	stp	x29, x30, [sp, #-64]!
   11c4c:	stp	x20, x19, [sp, #48]
   11c50:	mov	w19, w3
   11c54:	and	w3, w3, #0xf
   11c58:	str	x23, [sp, #16]
   11c5c:	stp	x22, x21, [sp, #32]
   11c60:	mov	x29, sp
   11c64:	mov	x20, x2
   11c68:	mov	x21, x1
   11c6c:	mov	x22, x0
   11c70:	bl	4b30 <mpfr_sub@plt>
   11c74:	mov	w23, w0
   11c78:	add	x0, x22, #0x20
   11c7c:	add	x1, x21, #0x20
   11c80:	add	x2, x20, #0x20
   11c84:	asr	w3, w19, #4
   11c88:	bl	4b30 <mpfr_sub@plt>
   11c8c:	cmp	w23, #0x0
   11c90:	mov	w8, #0x2                   	// #2
   11c94:	cset	w9, ne  // ne = any
   11c98:	csel	w8, w8, w9, lt  // lt = tstop
   11c9c:	cmp	w0, #0x0
   11ca0:	cset	w9, ne  // ne = any
   11ca4:	ldp	x20, x19, [sp, #48]
   11ca8:	ldp	x22, x21, [sp, #32]
   11cac:	ldr	x23, [sp, #16]
   11cb0:	lsl	w9, w9, #2
   11cb4:	mov	w10, #0x8                   	// #8
   11cb8:	csel	w9, w10, w9, lt  // lt = tstop
   11cbc:	orr	w0, w9, w8
   11cc0:	ldp	x29, x30, [sp], #64
   11cc4:	ret

0000000000011cc8 <mpc_sub_fr@@Base>:
   11cc8:	stp	x29, x30, [sp, #-48]!
   11ccc:	stp	x20, x19, [sp, #32]
   11cd0:	mov	w19, w3
   11cd4:	and	w3, w3, #0xf
   11cd8:	stp	x22, x21, [sp, #16]
   11cdc:	mov	x29, sp
   11ce0:	mov	x20, x1
   11ce4:	mov	x21, x0
   11ce8:	bl	4b30 <mpfr_sub@plt>
   11cec:	ldr	w3, [x20, #40]
   11cf0:	mov	w22, w0
   11cf4:	add	x0, x21, #0x20
   11cf8:	add	x1, x20, #0x20
   11cfc:	asr	w2, w19, #4
   11d00:	bl	52e0 <mpfr_set4@plt>
   11d04:	cmp	w22, #0x0
   11d08:	mov	w8, #0x2                   	// #2
   11d0c:	cset	w9, ne  // ne = any
   11d10:	csel	w8, w8, w9, lt  // lt = tstop
   11d14:	cmp	w0, #0x0
   11d18:	cset	w9, ne  // ne = any
   11d1c:	ldp	x20, x19, [sp, #32]
   11d20:	ldp	x22, x21, [sp, #16]
   11d24:	lsl	w9, w9, #2
   11d28:	mov	w10, #0x8                   	// #8
   11d2c:	csel	w9, w10, w9, lt  // lt = tstop
   11d30:	orr	w0, w9, w8
   11d34:	ldp	x29, x30, [sp], #48
   11d38:	ret

0000000000011d3c <mpc_sub_ui@@Base>:
   11d3c:	stp	x29, x30, [sp, #-48]!
   11d40:	stp	x20, x19, [sp, #32]
   11d44:	mov	w19, w3
   11d48:	and	w3, w3, #0xf
   11d4c:	stp	x22, x21, [sp, #16]
   11d50:	mov	x29, sp
   11d54:	mov	x20, x1
   11d58:	mov	x21, x0
   11d5c:	bl	5200 <mpfr_sub_ui@plt>
   11d60:	ldr	w3, [x20, #40]
   11d64:	mov	w22, w0
   11d68:	add	x0, x21, #0x20
   11d6c:	add	x1, x20, #0x20
   11d70:	asr	w2, w19, #4
   11d74:	bl	52e0 <mpfr_set4@plt>
   11d78:	cmp	w22, #0x0
   11d7c:	mov	w8, #0x2                   	// #2
   11d80:	cset	w9, ne  // ne = any
   11d84:	csel	w8, w8, w9, lt  // lt = tstop
   11d88:	cmp	w0, #0x0
   11d8c:	cset	w9, ne  // ne = any
   11d90:	ldp	x20, x19, [sp, #32]
   11d94:	ldp	x22, x21, [sp, #16]
   11d98:	lsl	w9, w9, #2
   11d9c:	mov	w10, #0x8                   	// #8
   11da0:	csel	w9, w10, w9, lt  // lt = tstop
   11da4:	orr	w0, w9, w8
   11da8:	ldp	x29, x30, [sp], #48
   11dac:	ret

0000000000011db0 <mpc_swap@@Base>:
   11db0:	stp	x29, x30, [sp, #-32]!
   11db4:	stp	x20, x19, [sp, #16]
   11db8:	mov	x29, sp
   11dbc:	mov	x19, x1
   11dc0:	mov	x20, x0
   11dc4:	bl	51a0 <mpfr_swap@plt>
   11dc8:	add	x0, x20, #0x20
   11dcc:	add	x1, x19, #0x20
   11dd0:	bl	51a0 <mpfr_swap@plt>
   11dd4:	ldp	x20, x19, [sp, #16]
   11dd8:	ldp	x29, x30, [sp], #32
   11ddc:	ret

0000000000011de0 <mpc_tan@@Base>:
   11de0:	sub	sp, sp, #0x120
   11de4:	stp	x20, x19, [sp, #272]
   11de8:	mov	x19, x0
   11dec:	mov	x0, x1
   11df0:	stp	x29, x30, [sp, #192]
   11df4:	stp	x28, x27, [sp, #208]
   11df8:	stp	x26, x25, [sp, #224]
   11dfc:	stp	x24, x23, [sp, #240]
   11e00:	stp	x22, x21, [sp, #256]
   11e04:	add	x29, sp, #0xc0
   11e08:	mov	w24, w2
   11e0c:	mov	x21, x1
   11e10:	bl	55d0 <mpfr_number_p@plt>
   11e14:	cbz	w0, 11e78 <mpc_tan@@Base+0x98>
   11e18:	add	x23, x21, #0x20
   11e1c:	mov	x0, x23
   11e20:	bl	55d0 <mpfr_number_p@plt>
   11e24:	cbz	w0, 11e78 <mpc_tan@@Base+0x98>
   11e28:	ldr	x9, [x21, #16]
   11e2c:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   11e30:	asr	w22, w24, #4
   11e34:	cmp	x9, x8
   11e38:	b.ne	11ef0 <mpc_tan@@Base+0x110>  // b.any
   11e3c:	ldr	w3, [x21, #8]
   11e40:	and	w2, w24, #0xf
   11e44:	mov	x0, x19
   11e48:	mov	x1, x21
   11e4c:	bl	52e0 <mpfr_set4@plt>
   11e50:	add	x0, x19, #0x20
   11e54:	mov	x1, x23
   11e58:	mov	w2, w22
   11e5c:	bl	4b00 <mpfr_tanh@plt>
   11e60:	cmp	w0, #0x0
   11e64:	cset	w8, ne  // ne = any
   11e68:	lsl	w8, w8, #2
   11e6c:	mov	w9, #0x8                   	// #8
   11e70:	csel	w28, w9, w8, lt  // lt = tstop
   11e74:	b	125ac <mpc_tan@@Base+0x7cc>
   11e78:	ldr	x9, [x21, #16]
   11e7c:	ldr	x8, [x21, #48]
   11e80:	mov	x10, #0x2                   	// #2
   11e84:	movk	x10, #0x8000, lsl #48
   11e88:	cmp	x9, x10
   11e8c:	b.ne	11ec4 <mpc_tan@@Base+0xe4>  // b.any
   11e90:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   11e94:	cmp	x8, x9
   11e98:	b.ne	11f98 <mpc_tan@@Base+0x1b8>  // b.any
   11e9c:	ldr	w8, [x21, #40]
   11ea0:	mov	x0, x19
   11ea4:	mov	x1, xzr
   11ea8:	mov	w3, w24
   11eac:	cmp	w8, #0x0
   11eb0:	mov	w8, #0x1                   	// #1
   11eb4:	cneg	x2, x8, lt  // lt = tstop
   11eb8:	bl	53d0 <mpc_set_si_si@plt>
   11ebc:	mov	w28, w0
   11ec0:	b	125ac <mpc_tan@@Base+0x7cc>
   11ec4:	cmp	x8, x10
   11ec8:	b.ne	11f38 <mpc_tan@@Base+0x158>  // b.any
   11ecc:	mov	x0, x21
   11ed0:	bl	5300 <mpfr_sgn@plt>
   11ed4:	cbnz	w0, 11f98 <mpc_tan@@Base+0x1b8>
   11ed8:	mov	x0, x19
   11edc:	mov	x1, x21
   11ee0:	mov	w2, w24
   11ee4:	bl	5680 <mpc_set@plt>
   11ee8:	mov	w28, wzr
   11eec:	b	125ac <mpc_tan@@Base+0x7cc>
   11ef0:	ldr	x9, [x21, #48]
   11ef4:	cmp	x9, x8
   11ef8:	b.ne	11fb0 <mpc_tan@@Base+0x1d0>  // b.any
   11efc:	and	w2, w24, #0xf
   11f00:	mov	x0, x19
   11f04:	mov	x1, x21
   11f08:	bl	4b80 <mpfr_tan@plt>
   11f0c:	ldr	w3, [x21, #40]
   11f10:	mov	w20, w0
   11f14:	add	x0, x19, #0x20
   11f18:	mov	x1, x23
   11f1c:	mov	w2, w22
   11f20:	bl	52e0 <mpfr_set4@plt>
   11f24:	cmp	w20, #0x0
   11f28:	cset	w8, ne  // ne = any
   11f2c:	mov	w9, #0x2                   	// #2
   11f30:	csel	w28, w9, w8, lt  // lt = tstop
   11f34:	b	125ac <mpc_tan@@Base+0x7cc>
   11f38:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
   11f3c:	cmp	x9, x10
   11f40:	b.ne	124e0 <mpc_tan@@Base+0x700>  // b.any
   11f44:	cmp	x8, x10
   11f48:	b.ne	11f98 <mpc_tan@@Base+0x1b8>  // b.any
   11f4c:	ldr	w8, [x21, #8]
   11f50:	mov	w20, #0x1                   	// #1
   11f54:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   11f58:	mov	x0, x19
   11f5c:	cmp	w8, #0x0
   11f60:	cneg	w3, w20, lt  // lt = tstop
   11f64:	mov	x1, x19
   11f68:	mov	w2, wzr
   11f6c:	str	w20, [x19, #8]
   11f70:	str	x9, [x19, #16]
   11f74:	bl	52e0 <mpfr_set4@plt>
   11f78:	ldr	w8, [x21, #40]
   11f7c:	add	x0, x19, #0x20
   11f80:	asr	w3, w24, #4
   11f84:	mov	x2, xzr
   11f88:	cmp	w8, #0x0
   11f8c:	cneg	x1, x20, lt  // lt = tstop
   11f90:	bl	4ab0 <mpfr_set_si_2exp@plt>
   11f94:	b	11e60 <mpc_tan@@Base+0x80>
   11f98:	mov	x0, x19
   11f9c:	bl	4b10 <mpfr_set_nan@plt>
   11fa0:	add	x0, x19, #0x20
   11fa4:	bl	4b10 <mpfr_set_nan@plt>
   11fa8:	mov	w28, wzr
   11fac:	b	125ac <mpc_tan@@Base+0x7cc>
   11fb0:	mov	x10, x19
   11fb4:	ldr	x8, [x19]
   11fb8:	ldr	x9, [x10, #32]!
   11fbc:	mov	x26, #0x2                   	// #2
   11fc0:	sub	x0, x29, #0x48
   11fc4:	mov	w1, #0x2                   	// #2
   11fc8:	cmp	x8, x9
   11fcc:	str	x10, [sp, #48]
   11fd0:	movk	x26, #0x8000, lsl #48
   11fd4:	mov	w27, w24
   11fd8:	csel	x24, x8, x9, gt
   11fdc:	sub	x20, x29, #0x48
   11fe0:	bl	4dc0 <mpc_init2@plt>
   11fe4:	add	x0, sp, #0x38
   11fe8:	mov	w1, #0x2                   	// #2
   11fec:	add	x25, sp, #0x38
   11ff0:	bl	4dc0 <mpc_init2@plt>
   11ff4:	add	x20, x20, #0x20
   11ff8:	add	x8, x25, #0x20
   11ffc:	stp	x8, x20, [sp, #32]
   12000:	and	w8, w27, #0xf
   12004:	tst	w27, #0xf
   12008:	stp	w27, w8, [sp, #24]
   1200c:	cset	w8, eq  // eq = none
   12010:	cmp	w27, #0x10
   12014:	mov	x28, #0x8000000000000001    	// #-9223372036854775807
   12018:	str	x8, [sp, #16]
   1201c:	cset	w8, cc  // cc = lo, ul, last
   12020:	mov	w25, #0x7                   	// #7
   12024:	str	x8, [sp, #8]
   12028:	b	12034 <mpc_tan@@Base+0x254>
   1202c:	mov	x28, #0x8000000000000001    	// #-9223372036854775807
   12030:	cbnz	w8, 12588 <mpc_tan@@Base+0x7a8>
   12034:	mov	x0, x24
   12038:	bl	4df0 <mpc_ceil_log2@plt>
   1203c:	add	x8, x24, x25
   12040:	add	x24, x8, x0
   12044:	sub	x0, x29, #0x48
   12048:	mov	x1, x24
   1204c:	bl	4cd0 <mpc_set_prec@plt>
   12050:	add	x0, sp, #0x38
   12054:	mov	x1, x24
   12058:	bl	4cd0 <mpc_set_prec@plt>
   1205c:	sub	x0, x29, #0x48
   12060:	add	x1, sp, #0x38
   12064:	mov	w3, #0x11                  	// #17
   12068:	mov	w4, #0x11                  	// #17
   1206c:	mov	x2, x21
   12070:	bl	5250 <mpc_sin_cos@plt>
   12074:	ldur	x8, [x29, #-56]
   12078:	cmp	x8, x26
   1207c:	b.gt	12090 <mpc_tan@@Base+0x2b0>
   12080:	b.ne	12088 <mpc_tan@@Base+0x2a8>  // b.any
   12084:	bl	4bd0 <mpfr_set_erangeflag@plt>
   12088:	mov	w8, wzr
   1208c:	b	12094 <mpc_tan@@Base+0x2b4>
   12090:	ldur	w8, [x29, #-64]
   12094:	sub	x0, x29, #0x48
   12098:	cmp	w8, #0x1
   1209c:	b.lt	120a8 <mpc_tan@@Base+0x2c8>  // b.tstop
   120a0:	bl	4ef0 <mpfr_nextabove@plt>
   120a4:	b	120ac <mpc_tan@@Base+0x2cc>
   120a8:	bl	4c80 <mpfr_nextbelow@plt>
   120ac:	ldur	x8, [x29, #-24]
   120b0:	cmp	x8, x26
   120b4:	b.gt	120c8 <mpc_tan@@Base+0x2e8>
   120b8:	b.ne	120c0 <mpc_tan@@Base+0x2e0>  // b.any
   120bc:	bl	4bd0 <mpfr_set_erangeflag@plt>
   120c0:	mov	w8, wzr
   120c4:	b	120cc <mpc_tan@@Base+0x2ec>
   120c8:	ldur	w8, [x29, #-32]
   120cc:	mov	x0, x20
   120d0:	cmp	w8, #0x1
   120d4:	b.lt	120e0 <mpc_tan@@Base+0x300>  // b.tstop
   120d8:	bl	4ef0 <mpfr_nextabove@plt>
   120dc:	b	120e4 <mpc_tan@@Base+0x304>
   120e0:	bl	4c80 <mpfr_nextbelow@plt>
   120e4:	ldr	x8, [sp, #72]
   120e8:	cmp	x8, x26
   120ec:	b.gt	12100 <mpc_tan@@Base+0x320>
   120f0:	b.ne	120f8 <mpc_tan@@Base+0x318>  // b.any
   120f4:	bl	4bd0 <mpfr_set_erangeflag@plt>
   120f8:	mov	w8, wzr
   120fc:	b	12104 <mpc_tan@@Base+0x324>
   12100:	ldr	w8, [sp, #64]
   12104:	add	x0, sp, #0x38
   12108:	cmp	w8, #0x1
   1210c:	b.lt	12118 <mpc_tan@@Base+0x338>  // b.tstop
   12110:	bl	4ef0 <mpfr_nextabove@plt>
   12114:	b	1211c <mpc_tan@@Base+0x33c>
   12118:	bl	4c80 <mpfr_nextbelow@plt>
   1211c:	ldr	x8, [sp, #104]
   12120:	cmp	x8, x26
   12124:	b.gt	12148 <mpc_tan@@Base+0x368>
   12128:	b.ne	12130 <mpc_tan@@Base+0x350>  // b.any
   1212c:	bl	4bd0 <mpfr_set_erangeflag@plt>
   12130:	mov	w8, wzr
   12134:	cmp	w8, #0x1
   12138:	b.ge	12154 <mpc_tan@@Base+0x374>  // b.tcont
   1213c:	ldr	x0, [sp, #32]
   12140:	bl	4c80 <mpfr_nextbelow@plt>
   12144:	b	1215c <mpc_tan@@Base+0x37c>
   12148:	ldr	w8, [sp, #96]
   1214c:	cmp	w8, #0x1
   12150:	b.lt	1213c <mpc_tan@@Base+0x35c>  // b.tstop
   12154:	ldr	x0, [sp, #32]
   12158:	bl	4ef0 <mpfr_nextabove@plt>
   1215c:	ldur	x27, [x29, #-56]
   12160:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
   12164:	cmp	x27, x8
   12168:	b.eq	121a4 <mpc_tan@@Base+0x3c4>  // b.none
   1216c:	cmp	x27, x28
   12170:	b.eq	125d0 <mpc_tan@@Base+0x7f0>  // b.none
   12174:	ldur	x8, [x29, #-24]
   12178:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   1217c:	cmp	x8, x9
   12180:	b.eq	121a4 <mpc_tan@@Base+0x3c4>  // b.none
   12184:	ldr	x20, [sp, #72]
   12188:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
   1218c:	cmp	x20, x8
   12190:	b.eq	121a4 <mpc_tan@@Base+0x3c4>  // b.none
   12194:	ldr	x23, [sp, #104]
   12198:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
   1219c:	cmp	x23, x8
   121a0:	b.ne	12340 <mpc_tan@@Base+0x560>  // b.any
   121a4:	mov	w8, #0x1                   	// #1
   121a8:	cmp	x27, x26
   121ac:	str	w8, [x19, #8]
   121b0:	str	x28, [x19, #16]
   121b4:	b.gt	121c8 <mpc_tan@@Base+0x3e8>
   121b8:	b.ne	121c0 <mpc_tan@@Base+0x3e0>  // b.any
   121bc:	bl	4bd0 <mpfr_set_erangeflag@plt>
   121c0:	mov	w20, wzr
   121c4:	b	121cc <mpc_tan@@Base+0x3ec>
   121c8:	ldur	w20, [x29, #-64]
   121cc:	ldr	x8, [sp, #72]
   121d0:	cmp	x8, x26
   121d4:	b.gt	121e8 <mpc_tan@@Base+0x408>
   121d8:	b.ne	121e0 <mpc_tan@@Base+0x400>  // b.any
   121dc:	bl	4bd0 <mpfr_set_erangeflag@plt>
   121e0:	mov	w8, wzr
   121e4:	b	121ec <mpc_tan@@Base+0x40c>
   121e8:	ldr	w8, [sp, #64]
   121ec:	mov	x23, #0x8000000000000001    	// #-9223372036854775807
   121f0:	mul	w8, w8, w20
   121f4:	tbnz	w8, #31, 12200 <mpc_tan@@Base+0x420>
   121f8:	mov	w28, #0xffffffff            	// #-1
   121fc:	b	12214 <mpc_tan@@Base+0x434>
   12200:	mov	x0, x19
   12204:	mov	x1, x19
   12208:	mov	w2, wzr
   1220c:	bl	4c50 <mpfr_neg@plt>
   12210:	mov	w28, #0x1                   	// #1
   12214:	ldr	x8, [x21, #48]
   12218:	ldr	x20, [sp, #40]
   1221c:	cmp	x8, x26
   12220:	b.gt	1225c <mpc_tan@@Base+0x47c>
   12224:	b.ne	1222c <mpc_tan@@Base+0x44c>  // b.any
   12228:	bl	4bd0 <mpfr_set_erangeflag@plt>
   1222c:	mov	w8, wzr
   12230:	cmp	w8, #0x1
   12234:	b.lt	12268 <mpc_tan@@Base+0x488>  // b.tstop
   12238:	ldr	x0, [sp, #48]
   1223c:	mov	w1, #0x1                   	// #1
   12240:	mov	x2, xzr
   12244:	mov	w3, wzr
   12248:	mov	w27, #0x1                   	// #1
   1224c:	bl	5240 <mpfr_set_ui_2exp@plt>
   12250:	cmp	w22, #0x1
   12254:	b.eq	122b8 <mpc_tan@@Base+0x4d8>  // b.none
   12258:	b	12288 <mpc_tan@@Base+0x4a8>
   1225c:	ldr	w8, [x21, #40]
   12260:	cmp	w8, #0x1
   12264:	b.ge	12238 <mpc_tan@@Base+0x458>  // b.tcont
   12268:	ldr	x0, [sp, #48]
   1226c:	mov	x1, #0xffffffffffffffff    	// #-1
   12270:	mov	x2, xzr
   12274:	mov	w3, wzr
   12278:	bl	4ab0 <mpfr_set_si_2exp@plt>
   1227c:	mov	w27, #0xffffffff            	// #-1
   12280:	cmp	w22, #0x1
   12284:	b.eq	122b8 <mpc_tan@@Base+0x4d8>  // b.none
   12288:	ldr	w9, [x19, #40]
   1228c:	cmp	w22, #0x3
   12290:	cset	w8, eq  // eq = none
   12294:	cmp	w22, #0x2
   12298:	cset	w10, eq  // eq = none
   1229c:	cmp	w9, #0x0
   122a0:	cset	w9, lt  // lt = tstop
   122a4:	and	w10, w10, w9
   122a8:	cset	w9, ge  // ge = tcont
   122ac:	tbnz	w10, #0, 122b8 <mpc_tan@@Base+0x4d8>
   122b0:	and	w8, w8, w9
   122b4:	cbz	w8, 122c8 <mpc_tan@@Base+0x4e8>
   122b8:	ldr	x0, [sp, #48]
   122bc:	mov	x1, x19
   122c0:	bl	52d0 <mpfr_nexttoward@plt>
   122c4:	neg	w27, w27
   122c8:	ldr	x8, [x19, #16]
   122cc:	cmp	x8, x23
   122d0:	b.ne	122e4 <mpc_tan@@Base+0x504>  // b.any
   122d4:	ldr	w1, [sp, #28]
   122d8:	mov	x0, x19
   122dc:	bl	51e0 <mpc_fix_zero@plt>
   122e0:	mov	w28, w0
   122e4:	ldr	x8, [x19, #48]
   122e8:	cmp	x8, x23
   122ec:	b.ne	12300 <mpc_tan@@Base+0x520>  // b.any
   122f0:	ldr	x0, [sp, #48]
   122f4:	mov	w1, w22
   122f8:	bl	51e0 <mpc_fix_zero@plt>
   122fc:	mov	w27, w0
   12300:	cmp	w28, #0x0
   12304:	cset	w9, ne  // ne = any
   12308:	mov	w10, #0x2                   	// #2
   1230c:	csel	w9, w10, w9, lt  // lt = tstop
   12310:	cmp	w27, #0x0
   12314:	cset	w10, ne  // ne = any
   12318:	lsl	w10, w10, #2
   1231c:	mov	w11, #0x8                   	// #8
   12320:	csel	w10, w11, w10, lt  // lt = tstop
   12324:	mov	w8, wzr
   12328:	orr	w28, w10, w9
   1232c:	mov	w9, #0x6                   	// #6
   12330:	cbz	w9, 1202c <mpc_tan@@Base+0x24c>
   12334:	cmp	w9, #0x3
   12338:	b.eq	1202c <mpc_tan@@Base+0x24c>  // b.none
   1233c:	b	1257c <mpc_tan@@Base+0x79c>
   12340:	sub	x0, x29, #0x48
   12344:	sub	x1, x29, #0x48
   12348:	add	x2, sp, #0x38
   1234c:	mov	w3, #0x11                  	// #17
   12350:	bl	5360 <mpc_div@plt>
   12354:	ldur	x10, [x29, #-56]
   12358:	mov	x12, #0x8000000000000001    	// #-9223372036854775807
   1235c:	mov	w28, w0
   12360:	mov	w8, wzr
   12364:	cmp	x10, x12
   12368:	mov	w9, #0x3                   	// #3
   1236c:	b.eq	123a4 <mpc_tan@@Base+0x5c4>  // b.none
   12370:	ldur	x11, [x29, #-24]
   12374:	mov	x25, x23
   12378:	mov	x23, #0x8000000000000001    	// #-9223372036854775807
   1237c:	cmp	x11, x12
   12380:	b.eq	123a4 <mpc_tan@@Base+0x5c4>  // b.none
   12384:	tst	w28, #0x3
   12388:	b.eq	123cc <mpc_tan@@Base+0x5ec>  // b.none
   1238c:	cmp	x10, x26
   12390:	b.gt	123b0 <mpc_tan@@Base+0x5d0>
   12394:	b.ne	1239c <mpc_tan@@Base+0x5bc>  // b.any
   12398:	bl	4bd0 <mpfr_set_erangeflag@plt>
   1239c:	mov	w8, wzr
   123a0:	b	123b4 <mpc_tan@@Base+0x5d4>
   123a4:	ldr	x20, [sp, #40]
   123a8:	mov	x25, x24
   123ac:	b	12330 <mpc_tan@@Base+0x550>
   123b0:	ldur	w8, [x29, #-64]
   123b4:	sub	x0, x29, #0x48
   123b8:	cmp	w8, #0x1
   123bc:	b.lt	123c8 <mpc_tan@@Base+0x5e8>  // b.tstop
   123c0:	bl	4ef0 <mpfr_nextabove@plt>
   123c4:	b	123cc <mpc_tan@@Base+0x5ec>
   123c8:	bl	4c80 <mpfr_nextbelow@plt>
   123cc:	cmp	w28, #0x4
   123d0:	b.cc	12410 <mpc_tan@@Base+0x630>  // b.lo, b.ul, b.last
   123d4:	ldur	x8, [x29, #-24]
   123d8:	cmp	x8, x26
   123dc:	b.gt	123f0 <mpc_tan@@Base+0x610>
   123e0:	b.ne	123e8 <mpc_tan@@Base+0x608>  // b.any
   123e4:	bl	4bd0 <mpfr_set_erangeflag@plt>
   123e8:	mov	w8, wzr
   123ec:	b	123f4 <mpc_tan@@Base+0x614>
   123f0:	ldur	w8, [x29, #-32]
   123f4:	cmp	w8, #0x1
   123f8:	b.lt	12408 <mpc_tan@@Base+0x628>  // b.tstop
   123fc:	ldr	x0, [sp, #40]
   12400:	bl	4ef0 <mpfr_nextabove@plt>
   12404:	b	12410 <mpc_tan@@Base+0x630>
   12408:	ldr	x0, [sp, #40]
   1240c:	bl	4c80 <mpfr_nextbelow@plt>
   12410:	ldur	x8, [x29, #-56]
   12414:	cmp	x8, x23
   12418:	b.eq	12600 <mpc_tan@@Base+0x820>  // b.none
   1241c:	neg	x9, x20
   12420:	sub	x10, x20, x25, lsl #1
   12424:	cmp	x10, x9
   12428:	sub	x8, x27, x8
   1242c:	csneg	x9, x10, x20, ge  // ge = tcont
   12430:	add	x8, x8, x9
   12434:	add	x9, x8, #0x5
   12438:	cmp	x8, #0x2
   1243c:	mov	w8, #0x8                   	// #8
   12440:	csel	x8, x8, x9, eq  // eq = none
   12444:	mov	w9, #0x7                   	// #7
   12448:	sub	x0, x29, #0x48
   1244c:	csel	x25, x9, x8, lt  // lt = tstop
   12450:	bl	55d0 <mpfr_number_p@plt>
   12454:	cbz	w0, 1248c <mpc_tan@@Base+0x6ac>
   12458:	ldr	x8, [x19]
   1245c:	ldr	x9, [sp, #16]
   12460:	sub	x1, x24, x25
   12464:	sub	x0, x29, #0x48
   12468:	mov	w3, #0x1                   	// #1
   1246c:	add	x4, x8, x9
   12470:	mov	w2, wzr
   12474:	bl	5550 <mpfr_can_round@plt>
   12478:	cmp	w0, #0x0
   1247c:	cset	w8, ne  // ne = any
   12480:	ldr	x20, [sp, #40]
   12484:	cbnz	w8, 12498 <mpc_tan@@Base+0x6b8>
   12488:	b	124d8 <mpc_tan@@Base+0x6f8>
   1248c:	mov	w8, #0x1                   	// #1
   12490:	ldr	x20, [sp, #40]
   12494:	cbz	w8, 124d8 <mpc_tan@@Base+0x6f8>
   12498:	mov	x0, x20
   1249c:	bl	55d0 <mpfr_number_p@plt>
   124a0:	cbz	w0, 124d4 <mpc_tan@@Base+0x6f4>
   124a4:	ldr	x8, [sp, #48]
   124a8:	ldr	x9, [sp, #8]
   124ac:	sub	x1, x24, #0x6
   124b0:	mov	w3, #0x1                   	// #1
   124b4:	ldr	x8, [x8]
   124b8:	mov	x0, x20
   124bc:	mov	w2, wzr
   124c0:	add	x4, x8, x9
   124c4:	bl	5550 <mpfr_can_round@plt>
   124c8:	cmp	w0, #0x0
   124cc:	cset	w8, ne  // ne = any
   124d0:	b	124d8 <mpc_tan@@Base+0x6f8>
   124d4:	mov	w8, #0x1                   	// #1
   124d8:	mov	w9, wzr
   124dc:	b	12330 <mpc_tan@@Base+0x550>
   124e0:	sub	x0, x29, #0x48
   124e4:	bl	4b70 <mpfr_init@plt>
   124e8:	add	x0, sp, #0x38
   124ec:	bl	4b70 <mpfr_init@plt>
   124f0:	add	x0, sp, #0x38
   124f4:	sub	x1, x29, #0x48
   124f8:	mov	x2, x21
   124fc:	mov	w3, wzr
   12500:	bl	5620 <mpfr_sin_cos@plt>
   12504:	mov	w20, #0x1                   	// #1
   12508:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   1250c:	str	w20, [x19, #8]
   12510:	str	x8, [x19, #16]
   12514:	ldur	w8, [x29, #-64]
   12518:	ldr	w9, [sp, #64]
   1251c:	mov	x0, x19
   12520:	mov	x1, x19
   12524:	mov	w2, wzr
   12528:	eor	w8, w9, w8
   1252c:	cmp	w8, #0x0
   12530:	cneg	w3, w20, lt  // lt = tstop
   12534:	bl	52e0 <mpfr_set4@plt>
   12538:	ldr	w8, [x21, #40]
   1253c:	add	x0, x19, #0x20
   12540:	asr	w3, w24, #4
   12544:	mov	x2, xzr
   12548:	cmp	w8, #0x0
   1254c:	cneg	x1, x20, lt  // lt = tstop
   12550:	bl	4ab0 <mpfr_set_si_2exp@plt>
   12554:	cmp	w0, #0x0
   12558:	cset	w8, ne  // ne = any
   1255c:	lsl	w8, w8, #2
   12560:	mov	w9, #0x8                   	// #8
   12564:	add	x0, sp, #0x38
   12568:	csel	w28, w9, w8, lt  // lt = tstop
   1256c:	bl	4e40 <mpfr_clear@plt>
   12570:	sub	x0, x29, #0x48
   12574:	bl	4e40 <mpfr_clear@plt>
   12578:	b	125ac <mpc_tan@@Base+0x7cc>
   1257c:	cmp	w9, #0x6
   12580:	b.eq	1259c <mpc_tan@@Base+0x7bc>  // b.none
   12584:	b	125ac <mpc_tan@@Base+0x7cc>
   12588:	ldr	w2, [sp, #24]
   1258c:	sub	x1, x29, #0x48
   12590:	mov	x0, x19
   12594:	bl	5680 <mpc_set@plt>
   12598:	mov	w28, w0
   1259c:	sub	x0, x29, #0x48
   125a0:	bl	4ae0 <mpc_clear@plt>
   125a4:	add	x0, sp, #0x38
   125a8:	bl	4ae0 <mpc_clear@plt>
   125ac:	mov	w0, w28
   125b0:	ldp	x20, x19, [sp, #272]
   125b4:	ldp	x22, x21, [sp, #256]
   125b8:	ldp	x24, x23, [sp, #240]
   125bc:	ldp	x26, x25, [sp, #224]
   125c0:	ldp	x28, x27, [sp, #208]
   125c4:	ldp	x29, x30, [sp, #192]
   125c8:	add	sp, sp, #0x120
   125cc:	ret
   125d0:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
   125d4:	ldr	x8, [x8, #4008]
   125d8:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
   125dc:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
   125e0:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
   125e4:	ldr	x0, [x8]
   125e8:	add	x1, x1, #0xba0
   125ec:	add	x2, x2, #0xc05
   125f0:	add	x4, x4, #0xf15
   125f4:	mov	w3, #0xc9                  	// #201
   125f8:	bl	56a0 <fprintf@plt>
   125fc:	bl	5110 <abort@plt>
   12600:	adrp	x8, 24000 <mpc_ui_ui_sub@@Base+0x11880>
   12604:	ldr	x8, [x8, #4008]
   12608:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0x880>
   1260c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0x880>
   12610:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0x880>
   12614:	ldr	x0, [x8]
   12618:	add	x1, x1, #0xba0
   1261c:	add	x2, x2, #0xc05
   12620:	add	x4, x4, #0xf15
   12624:	mov	w3, #0x107                 	// #263
   12628:	bl	56a0 <fprintf@plt>
   1262c:	bl	5110 <abort@plt>

0000000000012630 <mpc_tanh@@Base>:
   12630:	sub	sp, sp, #0xa0
   12634:	stp	x29, x30, [sp, #128]
   12638:	str	x19, [sp, #144]
   1263c:	ldp	q1, q0, [x1, #32]
   12640:	ubfiz	w8, w2, #4, #4
   12644:	mov	x19, x0
   12648:	add	w2, w8, w2, asr #4
   1264c:	stp	q1, q0, [sp, #64]
   12650:	ldp	q1, q0, [x1]
   12654:	add	x1, sp, #0x40
   12658:	add	x29, sp, #0x80
   1265c:	stp	q1, q0, [sp, #96]
   12660:	ldp	q1, q0, [x0, #32]
   12664:	stp	q1, q0, [sp]
   12668:	ldp	q1, q0, [x0]
   1266c:	mov	x0, sp
   12670:	stp	q1, q0, [sp, #32]
   12674:	bl	4cf0 <mpc_tan@plt>
   12678:	ldp	q1, q0, [sp, #32]
   1267c:	asr	w8, w0, #2
   12680:	cmp	w8, #0x0
   12684:	cset	w9, ne  // ne = any
   12688:	stp	q1, q0, [x19]
   1268c:	ldp	q1, q0, [sp]
   12690:	cmp	w8, #0x2
   12694:	csel	w8, w8, w9, eq  // eq = none
   12698:	tst	w0, #0x3
   1269c:	stp	q1, q0, [x19, #32]
   126a0:	and	w9, w0, #0x3
   126a4:	cset	w10, ne  // ne = any
   126a8:	ldr	x19, [sp, #144]
   126ac:	ldp	x29, x30, [sp, #128]
   126b0:	cmp	w9, #0x2
   126b4:	mov	w9, #0x8                   	// #8
   126b8:	lsl	w10, w10, #2
   126bc:	csel	w9, w9, w10, eq  // eq = none
   126c0:	orr	w0, w8, w9
   126c4:	add	sp, sp, #0xa0
   126c8:	ret

00000000000126cc <mpc_ceil_log2@@Base>:
   126cc:	cmp	x0, #0x2
   126d0:	b.lt	12700 <mpc_ceil_log2@@Base+0x34>  // b.tstop
   126d4:	mov	x8, xzr
   126d8:	add	x9, x0, #0x1
   126dc:	add	x10, x0, #0x2
   126e0:	cmp	x9, #0x0
   126e4:	csinc	x9, x10, x0, lt  // lt = tstop
   126e8:	cmp	x0, #0x2
   126ec:	asr	x0, x9, #1
   126f0:	add	x8, x8, #0x1
   126f4:	b.gt	126d8 <mpc_ceil_log2@@Base+0xc>
   126f8:	mov	x0, x8
   126fc:	ret
   12700:	mov	x0, xzr
   12704:	ret

0000000000012708 <mpc_ui_div@@Base>:
   12708:	sub	sp, sp, #0x70
   1270c:	stp	x22, x21, [sp, #80]
   12710:	mov	x21, x1
   12714:	mov	x22, x0
   12718:	mov	x0, sp
   1271c:	mov	w1, #0x40                  	// #64
   12720:	stp	x29, x30, [sp, #64]
   12724:	stp	x20, x19, [sp, #96]
   12728:	add	x29, sp, #0x40
   1272c:	mov	w19, w3
   12730:	mov	x20, x2
   12734:	bl	4dc0 <mpc_init2@plt>
   12738:	mov	x0, sp
   1273c:	mov	x1, x21
   12740:	mov	w2, w19
   12744:	bl	4db0 <mpc_set_ui@plt>
   12748:	mov	x1, sp
   1274c:	mov	x0, x22
   12750:	mov	x2, x20
   12754:	mov	w3, w19
   12758:	bl	5360 <mpc_div@plt>
   1275c:	mov	w19, w0
   12760:	mov	x0, sp
   12764:	bl	4ae0 <mpc_clear@plt>
   12768:	mov	w0, w19
   1276c:	ldp	x20, x19, [sp, #96]
   12770:	ldp	x22, x21, [sp, #80]
   12774:	ldp	x29, x30, [sp, #64]
   12778:	add	sp, sp, #0x70
   1277c:	ret

0000000000012780 <mpc_ui_ui_sub@@Base>:
   12780:	stp	x29, x30, [sp, #-64]!
   12784:	stp	x20, x19, [sp, #48]
   12788:	mov	x20, x3
   1278c:	stp	x22, x21, [sp, #32]
   12790:	mov	x21, x2
   12794:	and	w3, w4, #0xf
   12798:	mov	x2, x20
   1279c:	str	x23, [sp, #16]
   127a0:	mov	x29, sp
   127a4:	mov	w19, w4
   127a8:	mov	x22, x0
   127ac:	bl	5530 <mpfr_ui_sub@plt>
   127b0:	mov	w23, w0
   127b4:	add	x0, x22, #0x20
   127b8:	add	x2, x20, #0x20
   127bc:	asr	w3, w19, #4
   127c0:	mov	x1, x21
   127c4:	bl	5530 <mpfr_ui_sub@plt>
   127c8:	cmp	w23, #0x0
   127cc:	mov	w8, #0x2                   	// #2
   127d0:	cset	w9, ne  // ne = any
   127d4:	csel	w8, w8, w9, lt  // lt = tstop
   127d8:	cmp	w0, #0x0
   127dc:	cset	w9, ne  // ne = any
   127e0:	ldp	x20, x19, [sp, #48]
   127e4:	ldp	x22, x21, [sp, #32]
   127e8:	ldr	x23, [sp, #16]
   127ec:	lsl	w9, w9, #2
   127f0:	mov	w10, #0x8                   	// #8
   127f4:	csel	w9, w10, w9, lt  // lt = tstop
   127f8:	orr	w0, w9, w8
   127fc:	ldp	x29, x30, [sp], #64
   12800:	ret
   12804:	nop
   12808:	stp	x29, x30, [sp, #-48]!
   1280c:	mov	x29, sp
   12810:	str	q0, [sp, #16]
   12814:	str	q1, [sp, #32]
   12818:	ldp	x6, x1, [sp, #16]
   1281c:	ldp	x0, x3, [sp, #32]
   12820:	mrs	x15, fpcr
   12824:	lsr	x7, x1, #63
   12828:	mov	x10, x0
   1282c:	ubfiz	x4, x3, #3, #48
   12830:	lsr	x5, x3, #63
   12834:	mov	x12, x7
   12838:	ubfiz	x2, x1, #3, #48
   1283c:	orr	x4, x4, x0, lsr #61
   12840:	ubfx	x8, x1, #48, #15
   12844:	ubfx	x0, x3, #48, #15
   12848:	and	w7, w7, #0xff
   1284c:	mov	x16, x12
   12850:	cmp	x12, x5
   12854:	and	w11, w5, #0xff
   12858:	orr	x2, x2, x6, lsr #61
   1285c:	mov	x1, x8
   12860:	lsl	x9, x6, #3
   12864:	mov	x3, x0
   12868:	lsl	x13, x10, #3
   1286c:	b.eq	12a18 <mpc_ui_ui_sub@@Base+0x298>  // b.none
   12870:	sub	w0, w8, w0
   12874:	cmp	w0, #0x0
   12878:	b.le	129c4 <mpc_ui_ui_sub@@Base+0x244>
   1287c:	cbz	x3, 12a78 <mpc_ui_ui_sub@@Base+0x2f8>
   12880:	orr	x4, x4, #0x8000000000000
   12884:	mov	x3, #0x7fff                	// #32767
   12888:	cmp	x1, x3
   1288c:	b.eq	12c7c <mpc_ui_ui_sub@@Base+0x4fc>  // b.none
   12890:	cmp	w0, #0x74
   12894:	b.gt	12d00 <mpc_ui_ui_sub@@Base+0x580>
   12898:	cmp	w0, #0x3f
   1289c:	b.gt	12e60 <mpc_ui_ui_sub@@Base+0x6e0>
   128a0:	mov	w3, #0x40                  	// #64
   128a4:	sub	w3, w3, w0
   128a8:	lsr	x6, x13, x0
   128ac:	lsl	x13, x13, x3
   128b0:	cmp	x13, #0x0
   128b4:	cset	x5, ne  // ne = any
   128b8:	lsl	x3, x4, x3
   128bc:	orr	x3, x3, x6
   128c0:	lsr	x0, x4, x0
   128c4:	orr	x3, x3, x5
   128c8:	sub	x2, x2, x0
   128cc:	subs	x9, x9, x3
   128d0:	sbc	x2, x2, xzr
   128d4:	and	x3, x2, #0x7ffffffffffff
   128d8:	tbz	x2, #51, 12ab8 <mpc_ui_ui_sub@@Base+0x338>
   128dc:	cbz	x3, 12ce4 <mpc_ui_ui_sub@@Base+0x564>
   128e0:	clz	x0, x3
   128e4:	sub	w0, w0, #0xc
   128e8:	neg	w2, w0
   128ec:	lsl	x4, x3, x0
   128f0:	lsl	x3, x9, x0
   128f4:	lsr	x9, x9, x2
   128f8:	orr	x2, x9, x4
   128fc:	cmp	x1, w0, sxtw
   12900:	sxtw	x4, w0
   12904:	b.gt	12cc4 <mpc_ui_ui_sub@@Base+0x544>
   12908:	sub	w1, w0, w1
   1290c:	add	w0, w1, #0x1
   12910:	cmp	w0, #0x3f
   12914:	b.gt	12e28 <mpc_ui_ui_sub@@Base+0x6a8>
   12918:	mov	w1, #0x40                  	// #64
   1291c:	sub	w1, w1, w0
   12920:	lsr	x4, x3, x0
   12924:	lsl	x3, x3, x1
   12928:	cmp	x3, #0x0
   1292c:	lsl	x9, x2, x1
   12930:	cset	x1, ne  // ne = any
   12934:	orr	x9, x9, x4
   12938:	lsr	x2, x2, x0
   1293c:	orr	x9, x9, x1
   12940:	orr	x8, x9, x2
   12944:	cbz	x8, 12acc <mpc_ui_ui_sub@@Base+0x34c>
   12948:	and	x0, x9, #0x7
   1294c:	mov	x1, #0x0                   	// #0
   12950:	mov	w5, #0x1                   	// #1
   12954:	cbz	x0, 12d10 <mpc_ui_ui_sub@@Base+0x590>
   12958:	and	x3, x15, #0xc00000
   1295c:	cmp	x3, #0x400, lsl #12
   12960:	b.eq	12c54 <mpc_ui_ui_sub@@Base+0x4d4>  // b.none
   12964:	cmp	x3, #0x800, lsl #12
   12968:	b.eq	12c34 <mpc_ui_ui_sub@@Base+0x4b4>  // b.none
   1296c:	cbz	x3, 12c60 <mpc_ui_ui_sub@@Base+0x4e0>
   12970:	and	x3, x2, #0x8000000000000
   12974:	mov	w0, #0x10                  	// #16
   12978:	cbz	w5, 12980 <mpc_ui_ui_sub@@Base+0x200>
   1297c:	orr	w0, w0, #0x8
   12980:	cbz	x3, 12c98 <mpc_ui_ui_sub@@Base+0x518>
   12984:	add	x1, x1, #0x1
   12988:	mov	x3, #0x7fff                	// #32767
   1298c:	cmp	x1, x3
   12990:	b.eq	12b7c <mpc_ui_ui_sub@@Base+0x3fc>  // b.none
   12994:	and	w1, w1, #0x7fff
   12998:	extr	x8, x2, x9, #3
   1299c:	ubfx	x2, x2, #3, #48
   129a0:	mov	x5, #0x0                   	// #0
   129a4:	orr	w1, w1, w7, lsl #15
   129a8:	bfxil	x5, x2, #0, #48
   129ac:	fmov	d0, x8
   129b0:	bfi	x5, x1, #48, #16
   129b4:	fmov	v0.d[1], x5
   129b8:	cbnz	w0, 12bd8 <mpc_ui_ui_sub@@Base+0x458>
   129bc:	ldp	x29, x30, [sp], #48
   129c0:	ret
   129c4:	mov	x14, x5
   129c8:	b.eq	12ae4 <mpc_ui_ui_sub@@Base+0x364>  // b.none
   129cc:	cbnz	x8, 12d68 <mpc_ui_ui_sub@@Base+0x5e8>
   129d0:	orr	x1, x2, x9
   129d4:	cbz	x1, 12a94 <mpc_ui_ui_sub@@Base+0x314>
   129d8:	cmn	w0, #0x1
   129dc:	b.eq	13184 <mpc_ui_ui_sub@@Base+0xa04>  // b.none
   129e0:	mov	x1, #0x7fff                	// #32767
   129e4:	mvn	w0, w0
   129e8:	cmp	x3, x1
   129ec:	b.ne	12d7c <mpc_ui_ui_sub@@Base+0x5fc>  // b.any
   129f0:	orr	x0, x4, x13
   129f4:	cbnz	x0, 130dc <mpc_ui_ui_sub@@Base+0x95c>
   129f8:	mov	x16, x14
   129fc:	nop
   12a00:	mov	x4, #0x0                   	// #0
   12a04:	fmov	d0, x4
   12a08:	lsl	x16, x16, #63
   12a0c:	orr	x5, x16, #0x7fff000000000000
   12a10:	fmov	v0.d[1], x5
   12a14:	b	129bc <mpc_ui_ui_sub@@Base+0x23c>
   12a18:	sub	w5, w8, w0
   12a1c:	cmp	w5, #0x0
   12a20:	b.le	12bec <mpc_ui_ui_sub@@Base+0x46c>
   12a24:	cbz	x0, 12b2c <mpc_ui_ui_sub@@Base+0x3ac>
   12a28:	orr	x4, x4, #0x8000000000000
   12a2c:	mov	x0, #0x7fff                	// #32767
   12a30:	cmp	x1, x0
   12a34:	b.eq	12c7c <mpc_ui_ui_sub@@Base+0x4fc>  // b.none
   12a38:	cmp	w5, #0x74
   12a3c:	b.gt	12e10 <mpc_ui_ui_sub@@Base+0x690>
   12a40:	cmp	w5, #0x3f
   12a44:	b.gt	12f10 <mpc_ui_ui_sub@@Base+0x790>
   12a48:	mov	w0, #0x40                  	// #64
   12a4c:	sub	w0, w0, w5
   12a50:	lsr	x6, x13, x5
   12a54:	lsl	x13, x13, x0
   12a58:	cmp	x13, #0x0
   12a5c:	lsl	x0, x4, x0
   12a60:	cset	x3, ne  // ne = any
   12a64:	orr	x0, x0, x6
   12a68:	lsr	x4, x4, x5
   12a6c:	orr	x0, x0, x3
   12a70:	add	x2, x2, x4
   12a74:	b	12e1c <mpc_ui_ui_sub@@Base+0x69c>
   12a78:	orr	x3, x4, x13
   12a7c:	cbz	x3, 12dec <mpc_ui_ui_sub@@Base+0x66c>
   12a80:	subs	w0, w0, #0x1
   12a84:	b.ne	12884 <mpc_ui_ui_sub@@Base+0x104>  // b.any
   12a88:	subs	x9, x9, x13
   12a8c:	sbc	x2, x2, x4
   12a90:	b	128d4 <mpc_ui_ui_sub@@Base+0x154>
   12a94:	mov	x0, #0x7fff                	// #32767
   12a98:	cmp	x3, x0
   12a9c:	b.eq	131d0 <mpc_ui_ui_sub@@Base+0xa50>  // b.none
   12aa0:	mov	w7, w11
   12aa4:	mov	x2, x4
   12aa8:	mov	x9, x13
   12aac:	mov	x1, x3
   12ab0:	mov	x12, x5
   12ab4:	nop
   12ab8:	orr	x8, x9, x2
   12abc:	and	x0, x9, #0x7
   12ac0:	mov	w5, #0x0                   	// #0
   12ac4:	cbnz	x1, 12954 <mpc_ui_ui_sub@@Base+0x1d4>
   12ac8:	cbnz	x8, 12948 <mpc_ui_ui_sub@@Base+0x1c8>
   12acc:	mov	x2, #0x0                   	// #0
   12ad0:	mov	x1, #0x0                   	// #0
   12ad4:	mov	w0, #0x0                   	// #0
   12ad8:	and	x2, x2, #0xffffffffffff
   12adc:	and	w1, w1, #0x7fff
   12ae0:	b	129a0 <mpc_ui_ui_sub@@Base+0x220>
   12ae4:	add	x5, x8, #0x1
   12ae8:	tst	x5, #0x7ffe
   12aec:	b.ne	12dbc <mpc_ui_ui_sub@@Base+0x63c>  // b.any
   12af0:	orr	x5, x2, x9
   12af4:	orr	x8, x4, x13
   12af8:	cbnz	x1, 12f7c <mpc_ui_ui_sub@@Base+0x7fc>
   12afc:	cbz	x5, 13024 <mpc_ui_ui_sub@@Base+0x8a4>
   12b00:	cbz	x8, 13038 <mpc_ui_ui_sub@@Base+0x8b8>
   12b04:	subs	x5, x9, x13
   12b08:	cmp	x9, x13
   12b0c:	sbc	x3, x2, x4
   12b10:	tbz	x3, #51, 13204 <mpc_ui_ui_sub@@Base+0xa84>
   12b14:	subs	x9, x13, x9
   12b18:	mov	w7, w11
   12b1c:	sbc	x2, x4, x2
   12b20:	mov	x12, x14
   12b24:	orr	x8, x9, x2
   12b28:	b	12944 <mpc_ui_ui_sub@@Base+0x1c4>
   12b2c:	orr	x0, x4, x13
   12b30:	cbz	x0, 13004 <mpc_ui_ui_sub@@Base+0x884>
   12b34:	subs	w5, w5, #0x1
   12b38:	b.ne	12a2c <mpc_ui_ui_sub@@Base+0x2ac>  // b.any
   12b3c:	adds	x9, x9, x13
   12b40:	adc	x2, x4, x2
   12b44:	nop
   12b48:	tbz	x2, #51, 12ab8 <mpc_ui_ui_sub@@Base+0x338>
   12b4c:	add	x1, x1, #0x1
   12b50:	mov	x0, #0x7fff                	// #32767
   12b54:	cmp	x1, x0
   12b58:	b.eq	13044 <mpc_ui_ui_sub@@Base+0x8c4>  // b.none
   12b5c:	and	x0, x9, #0x1
   12b60:	and	x3, x2, #0xfff7ffffffffffff
   12b64:	orr	x9, x0, x9, lsr #1
   12b68:	mov	w5, #0x0                   	// #0
   12b6c:	orr	x9, x9, x2, lsl #63
   12b70:	lsr	x2, x3, #1
   12b74:	and	x0, x9, #0x7
   12b78:	b	12954 <mpc_ui_ui_sub@@Base+0x1d4>
   12b7c:	and	x3, x15, #0xc00000
   12b80:	cbz	x3, 12bb8 <mpc_ui_ui_sub@@Base+0x438>
   12b84:	cmp	x3, #0x400, lsl #12
   12b88:	b.eq	12bb0 <mpc_ui_ui_sub@@Base+0x430>  // b.none
   12b8c:	cmp	x3, #0x800, lsl #12
   12b90:	csel	w12, w12, wzr, eq  // eq = none
   12b94:	cbnz	w12, 12bb8 <mpc_ui_ui_sub@@Base+0x438>
   12b98:	mov	w1, #0x14                  	// #20
   12b9c:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
   12ba0:	orr	w0, w0, w1
   12ba4:	mov	x8, #0xffffffffffffffff    	// #-1
   12ba8:	mov	x1, #0x7ffe                	// #32766
   12bac:	b	12ad8 <mpc_ui_ui_sub@@Base+0x358>
   12bb0:	cbnz	x12, 12b98 <mpc_ui_ui_sub@@Base+0x418>
   12bb4:	nop
   12bb8:	mov	w1, #0x14                  	// #20
   12bbc:	and	x16, x7, #0xff
   12bc0:	orr	w0, w0, w1
   12bc4:	mov	x4, #0x0                   	// #0
   12bc8:	fmov	d0, x4
   12bcc:	lsl	x16, x16, #63
   12bd0:	orr	x5, x16, #0x7fff000000000000
   12bd4:	fmov	v0.d[1], x5
   12bd8:	str	q0, [sp, #16]
   12bdc:	bl	13b18 <mpc_ui_ui_sub@@Base+0x1398>
   12be0:	ldr	q0, [sp, #16]
   12be4:	ldp	x29, x30, [sp], #48
   12be8:	ret
   12bec:	b.eq	12d2c <mpc_ui_ui_sub@@Base+0x5ac>  // b.none
   12bf0:	cbnz	x8, 12eb0 <mpc_ui_ui_sub@@Base+0x730>
   12bf4:	orr	x0, x2, x9
   12bf8:	cbz	x0, 1311c <mpc_ui_ui_sub@@Base+0x99c>
   12bfc:	cmn	w5, #0x1
   12c00:	b.eq	1327c <mpc_ui_ui_sub@@Base+0xafc>  // b.none
   12c04:	mov	x0, #0x7fff                	// #32767
   12c08:	mvn	w5, w5
   12c0c:	cmp	x3, x0
   12c10:	b.ne	12ec4 <mpc_ui_ui_sub@@Base+0x744>  // b.any
   12c14:	orr	x0, x4, x13
   12c18:	cbz	x0, 12a00 <mpc_ui_ui_sub@@Base+0x280>
   12c1c:	lsr	x5, x4, #50
   12c20:	mov	x9, x13
   12c24:	eor	x5, x5, #0x1
   12c28:	mov	x2, x4
   12c2c:	and	w5, w5, #0x1
   12c30:	b	12c90 <mpc_ui_ui_sub@@Base+0x510>
   12c34:	mov	w0, #0x10                  	// #16
   12c38:	cbz	x12, 12c44 <mpc_ui_ui_sub@@Base+0x4c4>
   12c3c:	adds	x9, x9, #0x8
   12c40:	cinc	x2, x2, cs  // cs = hs, nlast
   12c44:	and	x3, x2, #0x8000000000000
   12c48:	cbz	w5, 12980 <mpc_ui_ui_sub@@Base+0x200>
   12c4c:	orr	w0, w0, #0x8
   12c50:	b	12980 <mpc_ui_ui_sub@@Base+0x200>
   12c54:	mov	w0, #0x10                  	// #16
   12c58:	cbnz	x12, 12c44 <mpc_ui_ui_sub@@Base+0x4c4>
   12c5c:	b	12c3c <mpc_ui_ui_sub@@Base+0x4bc>
   12c60:	and	x3, x9, #0xf
   12c64:	mov	w0, #0x10                  	// #16
   12c68:	cmp	x3, #0x4
   12c6c:	b.eq	12c44 <mpc_ui_ui_sub@@Base+0x4c4>  // b.none
   12c70:	adds	x9, x9, #0x4
   12c74:	cinc	x2, x2, cs  // cs = hs, nlast
   12c78:	b	12c44 <mpc_ui_ui_sub@@Base+0x4c4>
   12c7c:	orr	x0, x2, x9
   12c80:	cbz	x0, 12a00 <mpc_ui_ui_sub@@Base+0x280>
   12c84:	lsr	x5, x2, #50
   12c88:	eor	x5, x5, #0x1
   12c8c:	and	w5, w5, #0x1
   12c90:	mov	w0, w5
   12c94:	mov	x1, #0x7fff                	// #32767
   12c98:	mov	x3, #0x7fff                	// #32767
   12c9c:	extr	x8, x2, x9, #3
   12ca0:	cmp	x1, x3
   12ca4:	lsr	x2, x2, #3
   12ca8:	b.ne	12ad8 <mpc_ui_ui_sub@@Base+0x358>  // b.any
   12cac:	orr	x1, x8, x2
   12cb0:	cbz	x1, 1331c <mpc_ui_ui_sub@@Base+0xb9c>
   12cb4:	orr	x2, x2, #0x800000000000
   12cb8:	mov	w1, #0x7fff                	// #32767
   12cbc:	and	x2, x2, #0xffffffffffff
   12cc0:	b	129a0 <mpc_ui_ui_sub@@Base+0x220>
   12cc4:	mov	x9, x3
   12cc8:	and	x2, x2, #0xfff7ffffffffffff
   12ccc:	sub	x1, x1, x4
   12cd0:	orr	x8, x9, x2
   12cd4:	and	x0, x9, #0x7
   12cd8:	mov	w5, #0x0                   	// #0
   12cdc:	cbz	x1, 12ac8 <mpc_ui_ui_sub@@Base+0x348>
   12ce0:	b	12954 <mpc_ui_ui_sub@@Base+0x1d4>
   12ce4:	clz	x2, x9
   12ce8:	add	w0, w2, #0x34
   12cec:	cmp	w0, #0x3f
   12cf0:	b.le	128e8 <mpc_ui_ui_sub@@Base+0x168>
   12cf4:	sub	w2, w2, #0xc
   12cf8:	lsl	x2, x9, x2
   12cfc:	b	128fc <mpc_ui_ui_sub@@Base+0x17c>
   12d00:	orr	x4, x4, x13
   12d04:	cmp	x4, #0x0
   12d08:	cset	x3, ne  // ne = any
   12d0c:	b	128cc <mpc_ui_ui_sub@@Base+0x14c>
   12d10:	and	x3, x2, #0x8000000000000
   12d14:	mov	w0, #0x0                   	// #0
   12d18:	cbz	w5, 12980 <mpc_ui_ui_sub@@Base+0x200>
   12d1c:	mov	w0, #0x0                   	// #0
   12d20:	tbz	w15, #11, 12980 <mpc_ui_ui_sub@@Base+0x200>
   12d24:	orr	w0, w0, #0x8
   12d28:	b	12980 <mpc_ui_ui_sub@@Base+0x200>
   12d2c:	add	x0, x8, #0x1
   12d30:	tst	x0, #0x7ffe
   12d34:	b.ne	12f3c <mpc_ui_ui_sub@@Base+0x7bc>  // b.any
   12d38:	orr	x0, x2, x9
   12d3c:	cbnz	x8, 130f8 <mpc_ui_ui_sub@@Base+0x978>
   12d40:	orr	x8, x4, x13
   12d44:	cbz	x0, 1314c <mpc_ui_ui_sub@@Base+0x9cc>
   12d48:	cbz	x8, 13038 <mpc_ui_ui_sub@@Base+0x8b8>
   12d4c:	adds	x9, x9, x13
   12d50:	adc	x2, x4, x2
   12d54:	tbz	x2, #51, 12b24 <mpc_ui_ui_sub@@Base+0x3a4>
   12d58:	and	x2, x2, #0xfff7ffffffffffff
   12d5c:	and	x0, x9, #0x7
   12d60:	mov	x1, #0x1                   	// #1
   12d64:	b	12954 <mpc_ui_ui_sub@@Base+0x1d4>
   12d68:	mov	x1, #0x7fff                	// #32767
   12d6c:	neg	w0, w0
   12d70:	orr	x2, x2, #0x8000000000000
   12d74:	cmp	x3, x1
   12d78:	b.eq	129f0 <mpc_ui_ui_sub@@Base+0x270>  // b.none
   12d7c:	cmp	w0, #0x74
   12d80:	b.gt	12e8c <mpc_ui_ui_sub@@Base+0x70c>
   12d84:	cmp	w0, #0x3f
   12d88:	b.gt	130a8 <mpc_ui_ui_sub@@Base+0x928>
   12d8c:	mov	w1, #0x40                  	// #64
   12d90:	sub	w1, w1, w0
   12d94:	lsr	x5, x9, x0
   12d98:	lsl	x9, x9, x1
   12d9c:	cmp	x9, #0x0
   12da0:	lsl	x9, x2, x1
   12da4:	cset	x1, ne  // ne = any
   12da8:	orr	x9, x9, x5
   12dac:	lsr	x0, x2, x0
   12db0:	orr	x9, x9, x1
   12db4:	sub	x4, x4, x0
   12db8:	b	12e98 <mpc_ui_ui_sub@@Base+0x718>
   12dbc:	subs	x5, x9, x13
   12dc0:	cmp	x9, x13
   12dc4:	sbc	x3, x2, x4
   12dc8:	tbnz	x3, #51, 12f64 <mpc_ui_ui_sub@@Base+0x7e4>
   12dcc:	orr	x8, x5, x3
   12dd0:	cbnz	x8, 13090 <mpc_ui_ui_sub@@Base+0x910>
   12dd4:	and	x15, x15, #0xc00000
   12dd8:	mov	x2, #0x0                   	// #0
   12ddc:	cmp	x15, #0x800, lsl #12
   12de0:	mov	x1, #0x0                   	// #0
   12de4:	cset	w7, eq  // eq = none
   12de8:	b	12ad8 <mpc_ui_ui_sub@@Base+0x358>
   12dec:	mov	x0, #0x7fff                	// #32767
   12df0:	cmp	x8, x0
   12df4:	b.ne	12ab8 <mpc_ui_ui_sub@@Base+0x338>  // b.any
   12df8:	orr	x0, x2, x9
   12dfc:	cbnz	x0, 12c84 <mpc_ui_ui_sub@@Base+0x504>
   12e00:	mov	x2, #0x0                   	// #0
   12e04:	mov	x8, #0x0                   	// #0
   12e08:	mov	w0, #0x0                   	// #0
   12e0c:	b	12cac <mpc_ui_ui_sub@@Base+0x52c>
   12e10:	orr	x4, x4, x13
   12e14:	cmp	x4, #0x0
   12e18:	cset	x0, ne  // ne = any
   12e1c:	adds	x9, x0, x9
   12e20:	cinc	x2, x2, cs  // cs = hs, nlast
   12e24:	b	12b48 <mpc_ui_ui_sub@@Base+0x3c8>
   12e28:	mov	w4, #0x80                  	// #128
   12e2c:	sub	w4, w4, w0
   12e30:	cmp	w0, #0x40
   12e34:	sub	w9, w1, #0x3f
   12e38:	lsl	x0, x2, x4
   12e3c:	orr	x0, x3, x0
   12e40:	csel	x3, x0, x3, ne  // ne = any
   12e44:	lsr	x9, x2, x9
   12e48:	cmp	x3, #0x0
   12e4c:	mov	x2, #0x0                   	// #0
   12e50:	cset	x0, ne  // ne = any
   12e54:	orr	x9, x0, x9
   12e58:	mov	x8, x9
   12e5c:	b	12944 <mpc_ui_ui_sub@@Base+0x1c4>
   12e60:	mov	w5, #0x80                  	// #128
   12e64:	sub	w5, w5, w0
   12e68:	subs	w0, w0, #0x40
   12e6c:	lsl	x5, x4, x5
   12e70:	orr	x5, x13, x5
   12e74:	csel	x13, x5, x13, ne  // ne = any
   12e78:	lsr	x4, x4, x0
   12e7c:	cmp	x13, #0x0
   12e80:	cset	x3, ne  // ne = any
   12e84:	orr	x3, x3, x4
   12e88:	b	128cc <mpc_ui_ui_sub@@Base+0x14c>
   12e8c:	orr	x2, x2, x9
   12e90:	cmp	x2, #0x0
   12e94:	cset	x9, ne  // ne = any
   12e98:	subs	x9, x13, x9
   12e9c:	mov	w7, w11
   12ea0:	sbc	x2, x4, xzr
   12ea4:	mov	x1, x3
   12ea8:	mov	x12, x14
   12eac:	b	128d4 <mpc_ui_ui_sub@@Base+0x154>
   12eb0:	mov	x0, #0x7fff                	// #32767
   12eb4:	neg	w5, w5
   12eb8:	orr	x2, x2, #0x8000000000000
   12ebc:	cmp	x3, x0
   12ec0:	b.eq	12c14 <mpc_ui_ui_sub@@Base+0x494>  // b.none
   12ec4:	cmp	w5, #0x74
   12ec8:	b.gt	13098 <mpc_ui_ui_sub@@Base+0x918>
   12ecc:	cmp	w5, #0x3f
   12ed0:	b.gt	13158 <mpc_ui_ui_sub@@Base+0x9d8>
   12ed4:	mov	w1, #0x40                  	// #64
   12ed8:	sub	w1, w1, w5
   12edc:	lsr	x6, x9, x5
   12ee0:	lsl	x9, x9, x1
   12ee4:	cmp	x9, #0x0
   12ee8:	cset	x0, ne  // ne = any
   12eec:	lsl	x9, x2, x1
   12ef0:	orr	x9, x9, x6
   12ef4:	lsr	x5, x2, x5
   12ef8:	orr	x9, x9, x0
   12efc:	add	x4, x4, x5
   12f00:	adds	x9, x9, x13
   12f04:	mov	x1, x3
   12f08:	cinc	x2, x4, cs  // cs = hs, nlast
   12f0c:	b	12b48 <mpc_ui_ui_sub@@Base+0x3c8>
   12f10:	mov	w0, #0x80                  	// #128
   12f14:	sub	w0, w0, w5
   12f18:	subs	w5, w5, #0x40
   12f1c:	lsl	x0, x4, x0
   12f20:	orr	x0, x13, x0
   12f24:	csel	x13, x0, x13, ne  // ne = any
   12f28:	lsr	x4, x4, x5
   12f2c:	cmp	x13, #0x0
   12f30:	cset	x0, ne  // ne = any
   12f34:	orr	x0, x0, x4
   12f38:	b	12e1c <mpc_ui_ui_sub@@Base+0x69c>
   12f3c:	mov	x1, #0x7fff                	// #32767
   12f40:	cmp	x0, x1
   12f44:	b.eq	131a0 <mpc_ui_ui_sub@@Base+0xa20>  // b.none
   12f48:	adds	x9, x9, x13
   12f4c:	mov	x1, x0
   12f50:	adc	x2, x4, x2
   12f54:	ubfx	x0, x9, #1, #3
   12f58:	extr	x9, x2, x9, #1
   12f5c:	lsr	x2, x2, #1
   12f60:	b	12954 <mpc_ui_ui_sub@@Base+0x1d4>
   12f64:	cmp	x13, x9
   12f68:	mov	w7, w11
   12f6c:	sbc	x3, x4, x2
   12f70:	sub	x9, x13, x9
   12f74:	mov	x12, x14
   12f78:	b	128dc <mpc_ui_ui_sub@@Base+0x15c>
   12f7c:	mov	x12, #0x7fff                	// #32767
   12f80:	cmp	x1, x12
   12f84:	b.eq	12fb0 <mpc_ui_ui_sub@@Base+0x830>  // b.none
   12f88:	cmp	x3, x12
   12f8c:	b.eq	131e0 <mpc_ui_ui_sub@@Base+0xa60>  // b.none
   12f90:	cbnz	x5, 12fc8 <mpc_ui_ui_sub@@Base+0x848>
   12f94:	mov	w5, w0
   12f98:	cbnz	x8, 132c0 <mpc_ui_ui_sub@@Base+0xb40>
   12f9c:	mov	w7, #0x0                   	// #0
   12fa0:	mov	x2, #0xffffffffffff        	// #281474976710655
   12fa4:	mov	w0, #0x1                   	// #1
   12fa8:	mov	x8, #0xffffffffffffffff    	// #-1
   12fac:	b	12cb4 <mpc_ui_ui_sub@@Base+0x534>
   12fb0:	cbz	x5, 132dc <mpc_ui_ui_sub@@Base+0xb5c>
   12fb4:	lsr	x0, x2, #50
   12fb8:	cmp	x3, x1
   12fbc:	eor	x0, x0, #0x1
   12fc0:	and	w0, w0, #0x1
   12fc4:	b.eq	131e0 <mpc_ui_ui_sub@@Base+0xa60>  // b.none
   12fc8:	cbz	x8, 131fc <mpc_ui_ui_sub@@Base+0xa7c>
   12fcc:	bfi	x6, x2, #61, #3
   12fd0:	lsr	x3, x2, #3
   12fd4:	tbz	x2, #50, 12ff0 <mpc_ui_ui_sub@@Base+0x870>
   12fd8:	lsr	x1, x4, #3
   12fdc:	tbnz	x4, #50, 12ff0 <mpc_ui_ui_sub@@Base+0x870>
   12fe0:	mov	x6, x10
   12fe4:	mov	w7, w11
   12fe8:	bfi	x6, x4, #61, #3
   12fec:	mov	x3, x1
   12ff0:	extr	x2, x3, x6, #61
   12ff4:	bfi	x6, x2, #61, #3
   12ff8:	lsr	x2, x2, #3
   12ffc:	mov	x8, x6
   13000:	b	12cac <mpc_ui_ui_sub@@Base+0x52c>
   13004:	mov	x0, #0x7fff                	// #32767
   13008:	cmp	x8, x0
   1300c:	b.ne	12ab8 <mpc_ui_ui_sub@@Base+0x338>  // b.any
   13010:	orr	x0, x2, x9
   13014:	cbz	x0, 12e00 <mpc_ui_ui_sub@@Base+0x680>
   13018:	lsr	x5, x2, #50
   1301c:	eor	w5, w5, #0x1
   13020:	b	12c90 <mpc_ui_ui_sub@@Base+0x510>
   13024:	cbz	x8, 13138 <mpc_ui_ui_sub@@Base+0x9b8>
   13028:	mov	w7, w11
   1302c:	mov	x2, x4
   13030:	mov	x9, x13
   13034:	mov	x12, x14
   13038:	mov	x1, #0x0                   	// #0
   1303c:	mov	x3, #0x0                   	// #0
   13040:	b	12d1c <mpc_ui_ui_sub@@Base+0x59c>
   13044:	ands	x3, x15, #0xc00000
   13048:	b.eq	130d4 <mpc_ui_ui_sub@@Base+0x954>  // b.none
   1304c:	cmp	x3, #0x400, lsl #12
   13050:	eor	w0, w7, #0x1
   13054:	cset	w1, eq  // eq = none
   13058:	tst	w1, w0
   1305c:	b.ne	132f8 <mpc_ui_ui_sub@@Base+0xb78>  // b.any
   13060:	cmp	x3, #0x800, lsl #12
   13064:	b.eq	132a4 <mpc_ui_ui_sub@@Base+0xb24>  // b.none
   13068:	cmp	x3, #0x400, lsl #12
   1306c:	mov	w0, #0x14                  	// #20
   13070:	b.ne	12b80 <mpc_ui_ui_sub@@Base+0x400>  // b.any
   13074:	mov	x2, #0xffffffffffffffff    	// #-1
   13078:	mov	x1, #0x7ffe                	// #32766
   1307c:	mov	x9, x2
   13080:	mov	w5, #0x0                   	// #0
   13084:	mov	w0, #0x14                  	// #20
   13088:	cbnz	x12, 12c44 <mpc_ui_ui_sub@@Base+0x4c4>
   1308c:	b	12c3c <mpc_ui_ui_sub@@Base+0x4bc>
   13090:	mov	x9, x5
   13094:	b	128dc <mpc_ui_ui_sub@@Base+0x15c>
   13098:	orr	x2, x2, x9
   1309c:	cmp	x2, #0x0
   130a0:	cset	x9, ne  // ne = any
   130a4:	b	12f00 <mpc_ui_ui_sub@@Base+0x780>
   130a8:	mov	w1, #0x80                  	// #128
   130ac:	sub	w1, w1, w0
   130b0:	subs	w0, w0, #0x40
   130b4:	lsl	x1, x2, x1
   130b8:	orr	x1, x9, x1
   130bc:	csel	x9, x1, x9, ne  // ne = any
   130c0:	lsr	x2, x2, x0
   130c4:	cmp	x9, #0x0
   130c8:	cset	x9, ne  // ne = any
   130cc:	orr	x9, x9, x2
   130d0:	b	12e98 <mpc_ui_ui_sub@@Base+0x718>
   130d4:	mov	w0, #0x14                  	// #20
   130d8:	b	12bc4 <mpc_ui_ui_sub@@Base+0x444>
   130dc:	lsr	x5, x4, #50
   130e0:	mov	w7, w11
   130e4:	eor	x5, x5, #0x1
   130e8:	mov	x9, x13
   130ec:	and	w5, w5, #0x1
   130f0:	mov	x2, x4
   130f4:	b	12c90 <mpc_ui_ui_sub@@Base+0x510>
   130f8:	mov	x8, #0x7fff                	// #32767
   130fc:	cmp	x1, x8
   13100:	b.eq	13220 <mpc_ui_ui_sub@@Base+0xaa0>  // b.none
   13104:	cmp	x3, x8
   13108:	b.eq	13294 <mpc_ui_ui_sub@@Base+0xb14>  // b.none
   1310c:	cbnz	x0, 13238 <mpc_ui_ui_sub@@Base+0xab8>
   13110:	mov	x2, x4
   13114:	mov	x9, x13
   13118:	b	12c90 <mpc_ui_ui_sub@@Base+0x510>
   1311c:	mov	x0, #0x7fff                	// #32767
   13120:	cmp	x3, x0
   13124:	b.eq	132d0 <mpc_ui_ui_sub@@Base+0xb50>  // b.none
   13128:	mov	x2, x4
   1312c:	mov	x9, x13
   13130:	mov	x1, x3
   13134:	b	12ab8 <mpc_ui_ui_sub@@Base+0x338>
   13138:	and	x15, x15, #0xc00000
   1313c:	mov	x2, #0x0                   	// #0
   13140:	cmp	x15, #0x800, lsl #12
   13144:	cset	w7, eq  // eq = none
   13148:	b	12ad8 <mpc_ui_ui_sub@@Base+0x358>
   1314c:	mov	x2, x4
   13150:	mov	x9, x13
   13154:	b	12944 <mpc_ui_ui_sub@@Base+0x1c4>
   13158:	mov	w0, #0x80                  	// #128
   1315c:	sub	w0, w0, w5
   13160:	subs	w5, w5, #0x40
   13164:	lsl	x0, x2, x0
   13168:	orr	x0, x9, x0
   1316c:	csel	x9, x0, x9, ne  // ne = any
   13170:	lsr	x2, x2, x5
   13174:	cmp	x9, #0x0
   13178:	cset	x9, ne  // ne = any
   1317c:	orr	x9, x9, x2
   13180:	b	12f00 <mpc_ui_ui_sub@@Base+0x780>
   13184:	cmp	x13, x9
   13188:	mov	w7, w11
   1318c:	sbc	x2, x4, x2
   13190:	sub	x9, x13, x9
   13194:	mov	x1, x3
   13198:	mov	x12, x5
   1319c:	b	128d4 <mpc_ui_ui_sub@@Base+0x154>
   131a0:	ands	x3, x15, #0xc00000
   131a4:	b.eq	130d4 <mpc_ui_ui_sub@@Base+0x954>  // b.none
   131a8:	cmp	x3, #0x400, lsl #12
   131ac:	eor	w0, w7, #0x1
   131b0:	csel	w0, w0, wzr, eq  // eq = none
   131b4:	cbnz	w0, 132f8 <mpc_ui_ui_sub@@Base+0xb78>
   131b8:	cmp	x3, #0x800, lsl #12
   131bc:	b.ne	13068 <mpc_ui_ui_sub@@Base+0x8e8>  // b.any
   131c0:	cbz	x12, 132a8 <mpc_ui_ui_sub@@Base+0xb28>
   131c4:	mov	w0, #0x14                  	// #20
   131c8:	mov	x16, #0x1                   	// #1
   131cc:	b	12bc4 <mpc_ui_ui_sub@@Base+0x444>
   131d0:	orr	x0, x4, x13
   131d4:	cbnz	x0, 130dc <mpc_ui_ui_sub@@Base+0x95c>
   131d8:	mov	w7, w11
   131dc:	b	12e00 <mpc_ui_ui_sub@@Base+0x680>
   131e0:	cbz	x8, 132ec <mpc_ui_ui_sub@@Base+0xb6c>
   131e4:	tst	x4, #0x4000000000000
   131e8:	csinc	w0, w0, wzr, ne  // ne = any
   131ec:	cbnz	x5, 12fcc <mpc_ui_ui_sub@@Base+0x84c>
   131f0:	mov	w7, w11
   131f4:	mov	x2, x4
   131f8:	mov	x9, x13
   131fc:	mov	w5, w0
   13200:	b	12c90 <mpc_ui_ui_sub@@Base+0x510>
   13204:	orr	x8, x5, x3
   13208:	cbz	x8, 13138 <mpc_ui_ui_sub@@Base+0x9b8>
   1320c:	and	x0, x5, #0x7
   13210:	mov	x9, x5
   13214:	mov	x2, x3
   13218:	mov	w5, #0x1                   	// #1
   1321c:	b	12954 <mpc_ui_ui_sub@@Base+0x1d4>
   13220:	cbz	x0, 1328c <mpc_ui_ui_sub@@Base+0xb0c>
   13224:	lsr	x5, x2, #50
   13228:	cmp	x3, x1
   1322c:	eor	x5, x5, #0x1
   13230:	and	w5, w5, #0x1
   13234:	b.eq	13304 <mpc_ui_ui_sub@@Base+0xb84>  // b.none
   13238:	orr	x13, x4, x13
   1323c:	cbz	x13, 12c90 <mpc_ui_ui_sub@@Base+0x510>
   13240:	bfi	x6, x2, #61, #3
   13244:	lsr	x0, x2, #3
   13248:	tbz	x2, #50, 13264 <mpc_ui_ui_sub@@Base+0xae4>
   1324c:	lsr	x1, x4, #3
   13250:	tbnz	x4, #50, 13264 <mpc_ui_ui_sub@@Base+0xae4>
   13254:	and	x6, x10, #0x1fffffffffffffff
   13258:	mov	w7, w11
   1325c:	orr	x6, x6, x4, lsl #61
   13260:	mov	x0, x1
   13264:	extr	x2, x0, x6, #61
   13268:	mov	w0, w5
   1326c:	bfi	x6, x2, #61, #3
   13270:	lsr	x2, x2, #3
   13274:	mov	x8, x6
   13278:	b	12cac <mpc_ui_ui_sub@@Base+0x52c>
   1327c:	adds	x9, x9, x13
   13280:	mov	x1, x3
   13284:	adc	x2, x4, x2
   13288:	b	12b48 <mpc_ui_ui_sub@@Base+0x3c8>
   1328c:	cmp	x3, x1
   13290:	b.ne	13110 <mpc_ui_ui_sub@@Base+0x990>  // b.any
   13294:	orr	x1, x4, x13
   13298:	cbnz	x1, 1330c <mpc_ui_ui_sub@@Base+0xb8c>
   1329c:	cbz	x0, 12e00 <mpc_ui_ui_sub@@Base+0x680>
   132a0:	b	12c90 <mpc_ui_ui_sub@@Base+0x510>
   132a4:	cbnz	x16, 131c4 <mpc_ui_ui_sub@@Base+0xa44>
   132a8:	mov	x2, #0xffffffffffffffff    	// #-1
   132ac:	mov	w7, #0x0                   	// #0
   132b0:	mov	x9, x2
   132b4:	mov	x1, #0x7ffe                	// #32766
   132b8:	mov	w0, #0x14                  	// #20
   132bc:	b	12984 <mpc_ui_ui_sub@@Base+0x204>
   132c0:	mov	w7, w11
   132c4:	mov	x2, x4
   132c8:	mov	x9, x13
   132cc:	b	12c90 <mpc_ui_ui_sub@@Base+0x510>
   132d0:	orr	x0, x4, x13
   132d4:	cbz	x0, 12e00 <mpc_ui_ui_sub@@Base+0x680>
   132d8:	b	12c1c <mpc_ui_ui_sub@@Base+0x49c>
   132dc:	cmp	x3, x1
   132e0:	b.eq	131e0 <mpc_ui_ui_sub@@Base+0xa60>  // b.none
   132e4:	mov	w5, #0x0                   	// #0
   132e8:	b	12f98 <mpc_ui_ui_sub@@Base+0x818>
   132ec:	cbnz	x5, 131fc <mpc_ui_ui_sub@@Base+0xa7c>
   132f0:	mov	w5, w0
   132f4:	b	12f98 <mpc_ui_ui_sub@@Base+0x818>
   132f8:	mov	w0, #0x14                  	// #20
   132fc:	mov	x16, #0x0                   	// #0
   13300:	b	12bc4 <mpc_ui_ui_sub@@Base+0x444>
   13304:	orr	x1, x4, x13
   13308:	cbz	x1, 12c90 <mpc_ui_ui_sub@@Base+0x510>
   1330c:	tst	x4, #0x4000000000000
   13310:	csinc	w5, w5, wzr, ne  // ne = any
   13314:	cbnz	x0, 13240 <mpc_ui_ui_sub@@Base+0xac0>
   13318:	b	13110 <mpc_ui_ui_sub@@Base+0x990>
   1331c:	mov	x8, #0x0                   	// #0
   13320:	mov	w1, #0x7fff                	// #32767
   13324:	mov	x2, #0x0                   	// #0
   13328:	b	129a0 <mpc_ui_ui_sub@@Base+0x220>
   1332c:	nop
   13330:	stp	x29, x30, [sp, #-80]!
   13334:	mov	x29, sp
   13338:	str	q0, [sp, #48]
   1333c:	str	q1, [sp, #64]
   13340:	ldp	x1, x0, [sp, #48]
   13344:	ldp	x6, x2, [sp, #64]
   13348:	mrs	x11, fpcr
   1334c:	lsr	x3, x0, #63
   13350:	ubfx	x7, x0, #0, #48
   13354:	and	w12, w3, #0xff
   13358:	mov	x14, x3
   1335c:	ubfx	x3, x0, #48, #15
   13360:	cbz	w3, 13708 <mpc_ui_ui_sub@@Base+0xf88>
   13364:	mov	w4, #0x7fff                	// #32767
   13368:	cmp	w3, w4
   1336c:	b.eq	137ac <mpc_ui_ui_sub@@Base+0x102c>  // b.none
   13370:	and	x3, x3, #0xffff
   13374:	extr	x4, x7, x1, #61
   13378:	mov	x18, #0xffffffffffffc001    	// #-16383
   1337c:	orr	x7, x4, #0x8000000000000
   13380:	add	x3, x3, x18
   13384:	lsl	x5, x1, #3
   13388:	mov	x16, #0x0                   	// #0
   1338c:	mov	x1, #0x0                   	// #0
   13390:	mov	w0, #0x0                   	// #0
   13394:	lsr	x8, x2, #63
   13398:	ubfx	x4, x2, #0, #48
   1339c:	and	w15, w8, #0xff
   133a0:	mov	x13, x8
   133a4:	ubfx	x9, x2, #48, #15
   133a8:	cbz	w9, 13768 <mpc_ui_ui_sub@@Base+0xfe8>
   133ac:	mov	w8, #0x7fff                	// #32767
   133b0:	cmp	w9, w8
   133b4:	b.eq	13438 <mpc_ui_ui_sub@@Base+0xcb8>  // b.none
   133b8:	and	x9, x9, #0xffff
   133bc:	mov	x17, #0xffffffffffffc001    	// #-16383
   133c0:	add	x9, x9, x17
   133c4:	extr	x2, x4, x6, #61
   133c8:	add	x9, x9, x3
   133cc:	lsl	x6, x6, #3
   133d0:	orr	x4, x2, #0x8000000000000
   133d4:	mov	x2, #0x0                   	// #0
   133d8:	eor	w8, w12, w15
   133dc:	cmp	x1, #0xa
   133e0:	and	w10, w8, #0xff
   133e4:	add	x3, x9, #0x1
   133e8:	and	x8, x8, #0xff
   133ec:	b.le	13470 <mpc_ui_ui_sub@@Base+0xcf0>
   133f0:	cmp	x1, #0xb
   133f4:	b.eq	13b08 <mpc_ui_ui_sub@@Base+0x1388>  // b.none
   133f8:	mov	w15, w12
   133fc:	mov	x13, x14
   13400:	mov	w10, w15
   13404:	cmp	x16, #0x2
   13408:	b.eq	137cc <mpc_ui_ui_sub@@Base+0x104c>  // b.none
   1340c:	mov	x4, x7
   13410:	mov	x6, x5
   13414:	mov	x2, x16
   13418:	mov	x8, x13
   1341c:	cmp	x2, #0x3
   13420:	b.ne	1348c <mpc_ui_ui_sub@@Base+0xd0c>  // b.any
   13424:	orr	x4, x4, #0x800000000000
   13428:	mov	x5, x6
   1342c:	and	x4, x4, #0xffffffffffff
   13430:	mov	w1, #0x7fff                	// #32767
   13434:	b	134a0 <mpc_ui_ui_sub@@Base+0xd20>
   13438:	mov	x8, #0x7fff                	// #32767
   1343c:	orr	x2, x4, x6
   13440:	add	x9, x3, x8
   13444:	cbnz	x2, 134c4 <mpc_ui_ui_sub@@Base+0xd44>
   13448:	eor	w8, w12, w15
   1344c:	orr	x1, x1, #0x2
   13450:	and	w10, w8, #0xff
   13454:	cmp	x1, #0xa
   13458:	add	x3, x3, #0x8, lsl #12
   1345c:	and	x8, x8, #0xff
   13460:	mov	x6, #0x0                   	// #0
   13464:	b.gt	13a7c <mpc_ui_ui_sub@@Base+0x12fc>
   13468:	mov	x4, #0x0                   	// #0
   1346c:	mov	x2, #0x2                   	// #2
   13470:	cmp	x1, #0x2
   13474:	b.gt	134ec <mpc_ui_ui_sub@@Base+0xd6c>
   13478:	sub	x1, x1, #0x1
   1347c:	cmp	x1, #0x1
   13480:	b.hi	13528 <mpc_ui_ui_sub@@Base+0xda8>  // b.pmore
   13484:	cmp	x2, #0x2
   13488:	b.eq	137cc <mpc_ui_ui_sub@@Base+0x104c>  // b.none
   1348c:	cmp	x2, #0x1
   13490:	b.ne	13688 <mpc_ui_ui_sub@@Base+0xf08>  // b.any
   13494:	mov	w1, #0x0                   	// #0
   13498:	mov	x4, #0x0                   	// #0
   1349c:	mov	x5, #0x0                   	// #0
   134a0:	mov	x3, #0x0                   	// #0
   134a4:	orr	w1, w1, w10, lsl #15
   134a8:	bfxil	x3, x4, #0, #48
   134ac:	fmov	d0, x5
   134b0:	bfi	x3, x1, #48, #16
   134b4:	fmov	v0.d[1], x3
   134b8:	cbnz	w0, 138f8 <mpc_ui_ui_sub@@Base+0x1178>
   134bc:	ldp	x29, x30, [sp], #80
   134c0:	ret
   134c4:	tst	x4, #0x800000000000
   134c8:	eor	w8, w12, w15
   134cc:	orr	x1, x1, #0x3
   134d0:	csinc	w0, w0, wzr, ne  // ne = any
   134d4:	and	w10, w8, #0xff
   134d8:	add	x3, x3, #0x8, lsl #12
   134dc:	cmp	x1, #0xa
   134e0:	and	x8, x8, #0xff
   134e4:	mov	x2, #0x3                   	// #3
   134e8:	b.gt	13afc <mpc_ui_ui_sub@@Base+0x137c>
   134ec:	mov	x12, #0x1                   	// #1
   134f0:	mov	x14, #0x530                 	// #1328
   134f4:	lsl	x1, x12, x1
   134f8:	tst	x1, x14
   134fc:	b.ne	136fc <mpc_ui_ui_sub@@Base+0xf7c>  // b.any
   13500:	mov	x14, #0x240                 	// #576
   13504:	tst	x1, x14
   13508:	b.ne	136e4 <mpc_ui_ui_sub@@Base+0xf64>  // b.any
   1350c:	mov	x12, #0x88                  	// #136
   13510:	tst	x1, x12
   13514:	b.eq	13528 <mpc_ui_ui_sub@@Base+0xda8>  // b.none
   13518:	mov	x7, x4
   1351c:	mov	x5, x6
   13520:	mov	x16, x2
   13524:	b	13400 <mpc_ui_ui_sub@@Base+0xc80>
   13528:	lsr	x13, x5, #32
   1352c:	and	x12, x6, #0xffffffff
   13530:	and	x15, x5, #0xffffffff
   13534:	lsr	x6, x6, #32
   13538:	and	x18, x4, #0xffffffff
   1353c:	lsr	x2, x4, #32
   13540:	mul	x4, x13, x12
   13544:	stp	x21, x22, [sp, #32]
   13548:	lsr	x22, x7, #32
   1354c:	and	x5, x7, #0xffffffff
   13550:	mul	x16, x12, x15
   13554:	madd	x7, x6, x15, x4
   13558:	stp	x19, x20, [sp, #16]
   1355c:	mul	x1, x13, x18
   13560:	mul	x17, x15, x18
   13564:	and	x30, x16, #0xffffffff
   13568:	madd	x15, x2, x15, x1
   1356c:	add	x16, x7, x16, lsr #32
   13570:	mul	x21, x22, x12
   13574:	cmp	x4, x16
   13578:	mul	x20, x22, x18
   1357c:	mov	x14, #0x100000000           	// #4294967296
   13580:	mul	x19, x13, x6
   13584:	add	x15, x15, x17, lsr #32
   13588:	mul	x12, x12, x5
   1358c:	and	x17, x17, #0xffffffff
   13590:	mul	x18, x5, x18
   13594:	add	x4, x19, x14
   13598:	madd	x7, x6, x5, x21
   1359c:	csel	x19, x4, x19, hi  // hi = pmore
   135a0:	madd	x5, x2, x5, x20
   135a4:	cmp	x1, x15
   135a8:	mul	x13, x13, x2
   135ac:	add	x17, x17, x15, lsl #32
   135b0:	mul	x6, x6, x22
   135b4:	add	x7, x7, x12, lsr #32
   135b8:	add	x5, x5, x18, lsr #32
   135bc:	add	x4, x13, x14
   135c0:	mul	x2, x2, x22
   135c4:	csel	x13, x4, x13, hi  // hi = pmore
   135c8:	and	x1, x18, #0xffffffff
   135cc:	cmp	x21, x7
   135d0:	add	x4, x6, x14
   135d4:	add	x30, x30, x16, lsl #32
   135d8:	csel	x6, x4, x6, hi  // hi = pmore
   135dc:	add	x13, x13, x15, lsr #32
   135e0:	cmp	x20, x5
   135e4:	add	x1, x1, x5, lsl #32
   135e8:	add	x16, x17, x16, lsr #32
   135ec:	add	x14, x2, x14
   135f0:	csel	x2, x14, x2, hi  // hi = pmore
   135f4:	add	x16, x19, x16
   135f8:	adds	x1, x1, x13
   135fc:	and	x12, x12, #0xffffffff
   13600:	cset	x13, cs  // cs = hs, nlast
   13604:	cmp	x16, x17
   13608:	cset	x4, cc  // cc = lo, ul, last
   1360c:	add	x12, x12, x7, lsl #32
   13610:	adds	x1, x1, x4
   13614:	lsr	x5, x5, #32
   13618:	cset	x4, cs  // cs = hs, nlast
   1361c:	cmp	x13, #0x0
   13620:	ccmp	x4, #0x0, #0x0, eq  // eq = none
   13624:	add	x7, x6, x7, lsr #32
   13628:	cinc	x5, x5, ne  // ne = any
   1362c:	adds	x6, x16, x12
   13630:	cset	x4, cs  // cs = hs, nlast
   13634:	adds	x1, x1, x7
   13638:	cset	x7, cs  // cs = hs, nlast
   1363c:	adds	x4, x1, x4
   13640:	cset	x1, cs  // cs = hs, nlast
   13644:	cmp	x7, #0x0
   13648:	orr	x30, x30, x6, lsl #13
   1364c:	ccmp	x1, #0x0, #0x0, eq  // eq = none
   13650:	cinc	x1, x2, ne  // ne = any
   13654:	cmp	x30, #0x0
   13658:	add	x1, x1, x5
   1365c:	cset	x2, ne  // ne = any
   13660:	orr	x6, x2, x6, lsr #51
   13664:	orr	x6, x6, x4, lsl #13
   13668:	extr	x4, x1, x4, #51
   1366c:	tbz	x1, #39, 13980 <mpc_ui_ui_sub@@Base+0x1200>
   13670:	ldp	x19, x20, [sp, #16]
   13674:	and	x1, x6, #0x1
   13678:	ldp	x21, x22, [sp, #32]
   1367c:	orr	x6, x1, x6, lsr #1
   13680:	orr	x6, x6, x4, lsl #63
   13684:	lsr	x4, x4, #1
   13688:	mov	x1, #0x3fff                	// #16383
   1368c:	add	x2, x3, x1
   13690:	cmp	x2, #0x0
   13694:	b.le	1382c <mpc_ui_ui_sub@@Base+0x10ac>
   13698:	tst	x6, #0x7
   1369c:	b.eq	136bc <mpc_ui_ui_sub@@Base+0xf3c>  // b.none
   136a0:	and	x1, x11, #0xc00000
   136a4:	orr	w0, w0, #0x10
   136a8:	cmp	x1, #0x400, lsl #12
   136ac:	b.eq	13a74 <mpc_ui_ui_sub@@Base+0x12f4>  // b.none
   136b0:	cmp	x1, #0x800, lsl #12
   136b4:	b.eq	13a1c <mpc_ui_ui_sub@@Base+0x129c>  // b.none
   136b8:	cbz	x1, 13a04 <mpc_ui_ui_sub@@Base+0x1284>
   136bc:	tbz	x4, #52, 136c8 <mpc_ui_ui_sub@@Base+0xf48>
   136c0:	and	x4, x4, #0xffefffffffffffff
   136c4:	add	x2, x3, #0x4, lsl #12
   136c8:	mov	x1, #0x7ffe                	// #32766
   136cc:	cmp	x2, x1
   136d0:	b.gt	13954 <mpc_ui_ui_sub@@Base+0x11d4>
   136d4:	and	w1, w2, #0x7fff
   136d8:	extr	x5, x4, x6, #3
   136dc:	ubfx	x4, x4, #3, #48
   136e0:	b	134a0 <mpc_ui_ui_sub@@Base+0xd20>
   136e4:	mov	w0, w12
   136e8:	mov	w10, #0x0                   	// #0
   136ec:	mov	x4, #0xffffffffffff        	// #281474976710655
   136f0:	mov	x5, #0xffffffffffffffff    	// #-1
   136f4:	mov	w1, #0x7fff                	// #32767
   136f8:	b	134a0 <mpc_ui_ui_sub@@Base+0xd20>
   136fc:	mov	w15, w10
   13700:	mov	x13, x8
   13704:	b	13400 <mpc_ui_ui_sub@@Base+0xc80>
   13708:	orr	x5, x7, x1
   1370c:	cbz	x5, 13814 <mpc_ui_ui_sub@@Base+0x1094>
   13710:	cbz	x7, 13930 <mpc_ui_ui_sub@@Base+0x11b0>
   13714:	clz	x0, x7
   13718:	sub	x4, x0, #0xf
   1371c:	add	w5, w4, #0x3
   13720:	mov	w3, #0x3d                  	// #61
   13724:	sub	w3, w3, w4
   13728:	lsl	x4, x7, x5
   1372c:	lsr	x3, x1, x3
   13730:	orr	x7, x3, x4
   13734:	lsl	x5, x1, x5
   13738:	lsr	x8, x2, #63
   1373c:	mov	x3, #0xffffffffffffc011    	// #-16367
   13740:	ubfx	x4, x2, #0, #48
   13744:	sub	x3, x3, x0
   13748:	and	w15, w8, #0xff
   1374c:	mov	x13, x8
   13750:	ubfx	x9, x2, #48, #15
   13754:	mov	x1, #0x0                   	// #0
   13758:	mov	x16, #0x0                   	// #0
   1375c:	mov	w0, #0x0                   	// #0
   13760:	cbnz	w9, 133ac <mpc_ui_ui_sub@@Base+0xc2c>
   13764:	nop
   13768:	orr	x2, x4, x6
   1376c:	cbz	x2, 137dc <mpc_ui_ui_sub@@Base+0x105c>
   13770:	cbz	x4, 1390c <mpc_ui_ui_sub@@Base+0x118c>
   13774:	clz	x9, x4
   13778:	sub	x2, x9, #0xf
   1377c:	add	w10, w2, #0x3
   13780:	mov	w8, #0x3d                  	// #61
   13784:	sub	w8, w8, w2
   13788:	lsl	x2, x4, x10
   1378c:	lsr	x8, x6, x8
   13790:	orr	x4, x8, x2
   13794:	lsl	x6, x6, x10
   13798:	sub	x9, x3, x9
   1379c:	mov	x10, #0xffffffffffffc011    	// #-16367
   137a0:	mov	x2, #0x0                   	// #0
   137a4:	add	x9, x9, x10
   137a8:	b	133d8 <mpc_ui_ui_sub@@Base+0xc58>
   137ac:	orr	x5, x7, x1
   137b0:	cbnz	x5, 137f4 <mpc_ui_ui_sub@@Base+0x1074>
   137b4:	mov	x7, #0x0                   	// #0
   137b8:	mov	x1, #0x8                   	// #8
   137bc:	mov	x3, #0x7fff                	// #32767
   137c0:	mov	x16, #0x2                   	// #2
   137c4:	mov	w0, #0x0                   	// #0
   137c8:	b	13394 <mpc_ui_ui_sub@@Base+0xc14>
   137cc:	mov	w1, #0x7fff                	// #32767
   137d0:	mov	x4, #0x0                   	// #0
   137d4:	mov	x5, #0x0                   	// #0
   137d8:	b	134a0 <mpc_ui_ui_sub@@Base+0xd20>
   137dc:	orr	x1, x1, #0x1
   137e0:	mov	x9, x3
   137e4:	mov	x4, #0x0                   	// #0
   137e8:	mov	x6, #0x0                   	// #0
   137ec:	mov	x2, #0x1                   	// #1
   137f0:	b	133d8 <mpc_ui_ui_sub@@Base+0xc58>
   137f4:	lsr	x0, x7, #47
   137f8:	mov	x5, x1
   137fc:	eor	x0, x0, #0x1
   13800:	mov	x1, #0xc                   	// #12
   13804:	and	w0, w0, #0x1
   13808:	mov	x3, #0x7fff                	// #32767
   1380c:	mov	x16, #0x3                   	// #3
   13810:	b	13394 <mpc_ui_ui_sub@@Base+0xc14>
   13814:	mov	x7, #0x0                   	// #0
   13818:	mov	x1, #0x4                   	// #4
   1381c:	mov	x3, #0x0                   	// #0
   13820:	mov	x16, #0x1                   	// #1
   13824:	mov	w0, #0x0                   	// #0
   13828:	b	13394 <mpc_ui_ui_sub@@Base+0xc14>
   1382c:	mov	x1, #0x1                   	// #1
   13830:	sub	x2, x1, x2
   13834:	cmp	x2, #0x74
   13838:	b.gt	138b0 <mpc_ui_ui_sub@@Base+0x1130>
   1383c:	cmp	x2, #0x3f
   13840:	b.le	13990 <mpc_ui_ui_sub@@Base+0x1210>
   13844:	mov	w1, #0x80                  	// #128
   13848:	sub	w1, w1, w2
   1384c:	cmp	x2, #0x40
   13850:	sub	w2, w2, #0x40
   13854:	lsl	x1, x4, x1
   13858:	orr	x1, x6, x1
   1385c:	csel	x6, x1, x6, ne  // ne = any
   13860:	lsr	x2, x4, x2
   13864:	cmp	x6, #0x0
   13868:	cset	x5, ne  // ne = any
   1386c:	orr	x5, x5, x2
   13870:	ands	x2, x5, #0x7
   13874:	b.eq	139c4 <mpc_ui_ui_sub@@Base+0x1244>  // b.none
   13878:	mov	x2, #0x0                   	// #0
   1387c:	and	x11, x11, #0xc00000
   13880:	orr	w0, w0, #0x10
   13884:	cmp	x11, #0x400, lsl #12
   13888:	b.eq	13ad4 <mpc_ui_ui_sub@@Base+0x1354>  // b.none
   1388c:	cmp	x11, #0x800, lsl #12
   13890:	b.eq	13ae8 <mpc_ui_ui_sub@@Base+0x1368>  // b.none
   13894:	cbz	x11, 13a2c <mpc_ui_ui_sub@@Base+0x12ac>
   13898:	tbnz	x2, #51, 13a44 <mpc_ui_ui_sub@@Base+0x12c4>
   1389c:	ubfx	x4, x2, #3, #48
   138a0:	extr	x5, x2, x5, #3
   138a4:	orr	w0, w0, #0x8
   138a8:	mov	w1, #0x0                   	// #0
   138ac:	b	138e0 <mpc_ui_ui_sub@@Base+0x1160>
   138b0:	orr	x5, x6, x4
   138b4:	cbz	x5, 138d4 <mpc_ui_ui_sub@@Base+0x1154>
   138b8:	and	x11, x11, #0xc00000
   138bc:	orr	w0, w0, #0x10
   138c0:	cmp	x11, #0x400, lsl #12
   138c4:	sub	x5, x1, x8
   138c8:	b.eq	138d4 <mpc_ui_ui_sub@@Base+0x1154>  // b.none
   138cc:	cmp	x11, #0x800, lsl #12
   138d0:	csel	x5, x8, xzr, eq  // eq = none
   138d4:	orr	w0, w0, #0x8
   138d8:	mov	w1, #0x0                   	// #0
   138dc:	mov	x4, #0x0                   	// #0
   138e0:	mov	x3, #0x0                   	// #0
   138e4:	fmov	d0, x5
   138e8:	bfxil	x3, x4, #0, #48
   138ec:	bfi	x3, x1, #48, #15
   138f0:	bfi	x3, x10, #63, #1
   138f4:	fmov	v0.d[1], x3
   138f8:	str	q0, [sp, #48]
   138fc:	bl	13b18 <mpc_ui_ui_sub@@Base+0x1398>
   13900:	ldr	q0, [sp, #48]
   13904:	ldp	x29, x30, [sp], #80
   13908:	ret
   1390c:	clz	x9, x6
   13910:	add	x2, x9, #0x31
   13914:	add	x9, x9, #0x40
   13918:	cmp	x2, #0x3c
   1391c:	b.le	1377c <mpc_ui_ui_sub@@Base+0xffc>
   13920:	sub	w2, w2, #0x3d
   13924:	lsl	x4, x6, x2
   13928:	mov	x6, #0x0                   	// #0
   1392c:	b	13798 <mpc_ui_ui_sub@@Base+0x1018>
   13930:	clz	x3, x1
   13934:	add	x4, x3, #0x31
   13938:	add	x0, x3, #0x40
   1393c:	cmp	x4, #0x3c
   13940:	b.le	1371c <mpc_ui_ui_sub@@Base+0xf9c>
   13944:	sub	w4, w4, #0x3d
   13948:	mov	x5, #0x0                   	// #0
   1394c:	lsl	x7, x1, x4
   13950:	b	13738 <mpc_ui_ui_sub@@Base+0xfb8>
   13954:	and	x5, x11, #0xc00000
   13958:	cmp	x5, #0x400, lsl #12
   1395c:	b.eq	13a58 <mpc_ui_ui_sub@@Base+0x12d8>  // b.none
   13960:	cmp	x5, #0x800, lsl #12
   13964:	b.eq	139e8 <mpc_ui_ui_sub@@Base+0x1268>  // b.none
   13968:	cbz	x5, 139dc <mpc_ui_ui_sub@@Base+0x125c>
   1396c:	mov	x4, #0xffffffffffff        	// #281474976710655
   13970:	mov	x5, #0xffffffffffffffff    	// #-1
   13974:	mov	w2, #0x14                  	// #20
   13978:	orr	w0, w0, w2
   1397c:	b	138e0 <mpc_ui_ui_sub@@Base+0x1160>
   13980:	mov	x3, x9
   13984:	ldp	x19, x20, [sp, #16]
   13988:	ldp	x21, x22, [sp, #32]
   1398c:	b	13688 <mpc_ui_ui_sub@@Base+0xf08>
   13990:	mov	w1, #0x40                  	// #64
   13994:	sub	w1, w1, w2
   13998:	lsr	x3, x6, x2
   1399c:	lsl	x6, x6, x1
   139a0:	cmp	x6, #0x0
   139a4:	lsl	x5, x4, x1
   139a8:	cset	x1, ne  // ne = any
   139ac:	orr	x5, x5, x3
   139b0:	lsr	x2, x4, x2
   139b4:	orr	x5, x5, x1
   139b8:	tst	x5, #0x7
   139bc:	b.ne	1387c <mpc_ui_ui_sub@@Base+0x10fc>  // b.any
   139c0:	tbnz	x2, #51, 13af4 <mpc_ui_ui_sub@@Base+0x1374>
   139c4:	ubfx	x4, x2, #3, #48
   139c8:	extr	x5, x2, x5, #3
   139cc:	mov	w1, #0x0                   	// #0
   139d0:	tbz	w11, #11, 134a0 <mpc_ui_ui_sub@@Base+0xd20>
   139d4:	orr	w0, w0, #0x8
   139d8:	b	138e0 <mpc_ui_ui_sub@@Base+0x1160>
   139dc:	mov	w1, #0x7fff                	// #32767
   139e0:	mov	x4, #0x0                   	// #0
   139e4:	b	13974 <mpc_ui_ui_sub@@Base+0x11f4>
   139e8:	cmp	x8, #0x0
   139ec:	mov	w2, #0x7fff                	// #32767
   139f0:	mov	x4, #0xffffffffffff        	// #281474976710655
   139f4:	csel	w1, w1, w2, eq  // eq = none
   139f8:	csel	x4, x4, xzr, eq  // eq = none
   139fc:	csetm	x5, eq  // eq = none
   13a00:	b	13974 <mpc_ui_ui_sub@@Base+0x11f4>
   13a04:	and	x1, x6, #0xf
   13a08:	cmp	x1, #0x4
   13a0c:	b.eq	136bc <mpc_ui_ui_sub@@Base+0xf3c>  // b.none
   13a10:	adds	x6, x6, #0x4
   13a14:	cinc	x4, x4, cs  // cs = hs, nlast
   13a18:	b	136bc <mpc_ui_ui_sub@@Base+0xf3c>
   13a1c:	cbz	x8, 136bc <mpc_ui_ui_sub@@Base+0xf3c>
   13a20:	adds	x6, x6, #0x8
   13a24:	cinc	x4, x4, cs  // cs = hs, nlast
   13a28:	b	136bc <mpc_ui_ui_sub@@Base+0xf3c>
   13a2c:	and	x1, x5, #0xf
   13a30:	cmp	x1, #0x4
   13a34:	b.eq	13a40 <mpc_ui_ui_sub@@Base+0x12c0>  // b.none
   13a38:	adds	x5, x5, #0x4
   13a3c:	cinc	x2, x2, cs  // cs = hs, nlast
   13a40:	tbz	x2, #51, 1389c <mpc_ui_ui_sub@@Base+0x111c>
   13a44:	orr	w0, w0, #0x8
   13a48:	mov	w1, #0x1                   	// #1
   13a4c:	mov	x4, #0x0                   	// #0
   13a50:	mov	x5, #0x0                   	// #0
   13a54:	b	138e0 <mpc_ui_ui_sub@@Base+0x1160>
   13a58:	cmp	x8, #0x0
   13a5c:	mov	w2, #0x7fff                	// #32767
   13a60:	mov	x4, #0xffffffffffff        	// #281474976710655
   13a64:	csel	w1, w1, w2, ne  // ne = any
   13a68:	csel	x4, x4, xzr, ne  // ne = any
   13a6c:	csetm	x5, ne  // ne = any
   13a70:	b	13974 <mpc_ui_ui_sub@@Base+0x11f4>
   13a74:	cbnz	x8, 136bc <mpc_ui_ui_sub@@Base+0xf3c>
   13a78:	b	13a20 <mpc_ui_ui_sub@@Base+0x12a0>
   13a7c:	mov	x4, #0x2                   	// #2
   13a80:	cmp	x1, #0xf
   13a84:	b.ne	13aa8 <mpc_ui_ui_sub@@Base+0x1328>  // b.any
   13a88:	tbz	x7, #47, 13ac0 <mpc_ui_ui_sub@@Base+0x1340>
   13a8c:	tbnz	x2, #47, 13ac0 <mpc_ui_ui_sub@@Base+0x1340>
   13a90:	orr	x4, x2, #0x800000000000
   13a94:	mov	w10, w15
   13a98:	and	x4, x4, #0xffffffffffff
   13a9c:	mov	x5, x6
   13aa0:	mov	w1, #0x7fff                	// #32767
   13aa4:	b	134a0 <mpc_ui_ui_sub@@Base+0xd20>
   13aa8:	cmp	x1, #0xb
   13aac:	b.ne	133f8 <mpc_ui_ui_sub@@Base+0xc78>  // b.any
   13ab0:	mov	x7, x2
   13ab4:	mov	x5, x6
   13ab8:	mov	x16, x4
   13abc:	b	13400 <mpc_ui_ui_sub@@Base+0xc80>
   13ac0:	orr	x4, x7, #0x800000000000
   13ac4:	mov	w10, w12
   13ac8:	and	x4, x4, #0xffffffffffff
   13acc:	mov	w1, #0x7fff                	// #32767
   13ad0:	b	134a0 <mpc_ui_ui_sub@@Base+0xd20>
   13ad4:	cbnz	x8, 13a40 <mpc_ui_ui_sub@@Base+0x12c0>
   13ad8:	adds	x5, x5, #0x8
   13adc:	cinc	x2, x2, cs  // cs = hs, nlast
   13ae0:	tbnz	x2, #51, 13a44 <mpc_ui_ui_sub@@Base+0x12c4>
   13ae4:	b	1389c <mpc_ui_ui_sub@@Base+0x111c>
   13ae8:	cbnz	x8, 13ad8 <mpc_ui_ui_sub@@Base+0x1358>
   13aec:	tbnz	x2, #51, 13a44 <mpc_ui_ui_sub@@Base+0x12c4>
   13af0:	b	1389c <mpc_ui_ui_sub@@Base+0x111c>
   13af4:	orr	w0, w0, #0x10
   13af8:	b	13a44 <mpc_ui_ui_sub@@Base+0x12c4>
   13afc:	mov	x2, x4
   13b00:	mov	x4, #0x3                   	// #3
   13b04:	b	13a80 <mpc_ui_ui_sub@@Base+0x1300>
   13b08:	mov	w10, w15
   13b0c:	mov	x8, x13
   13b10:	b	1341c <mpc_ui_ui_sub@@Base+0xc9c>
   13b14:	nop
   13b18:	tbz	w0, #0, 13b28 <mpc_ui_ui_sub@@Base+0x13a8>
   13b1c:	movi	v1.2s, #0x0
   13b20:	fdiv	s0, s1, s1
   13b24:	mrs	x1, fpsr
   13b28:	tbz	w0, #1, 13b3c <mpc_ui_ui_sub@@Base+0x13bc>
   13b2c:	fmov	s1, #1.000000000000000000e+00
   13b30:	movi	v2.2s, #0x0
   13b34:	fdiv	s0, s1, s2
   13b38:	mrs	x1, fpsr
   13b3c:	tbz	w0, #2, 13b5c <mpc_ui_ui_sub@@Base+0x13dc>
   13b40:	mov	w2, #0xc5ae                	// #50606
   13b44:	mov	w1, #0x7f7fffff            	// #2139095039
   13b48:	movk	w2, #0x749d, lsl #16
   13b4c:	fmov	s1, w1
   13b50:	fmov	s2, w2
   13b54:	fadd	s0, s1, s2
   13b58:	mrs	x1, fpsr
   13b5c:	tbz	w0, #3, 13b6c <mpc_ui_ui_sub@@Base+0x13ec>
   13b60:	movi	v1.2s, #0x80, lsl #16
   13b64:	fmul	s0, s1, s1
   13b68:	mrs	x1, fpsr
   13b6c:	tbz	w0, #4, 13b84 <mpc_ui_ui_sub@@Base+0x1404>
   13b70:	mov	w0, #0x7f7fffff            	// #2139095039
   13b74:	fmov	s2, #1.000000000000000000e+00
   13b78:	fmov	s1, w0
   13b7c:	fsub	s0, s1, s2
   13b80:	mrs	x0, fpsr
   13b84:	ret

Disassembly of section .fini:

0000000000013b88 <.fini>:
   13b88:	stp	x29, x30, [sp, #-16]!
   13b8c:	mov	x29, sp
   13b90:	ldp	x29, x30, [sp], #16
   13b94:	ret
