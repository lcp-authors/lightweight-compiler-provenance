In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libssp.a_clang_-O3:

ssp.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fail>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x1
  10:	mov	x19, x2
  14:	mov	w1, #0x1                   	// #1
  18:	stp	x21, x22, [sp, #32]
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	x23, x0
  24:	adrp	x0, 0 <fail>
  28:	add	x0, x0, #0x0
  2c:	bl	0 <open>
  30:	cmn	w0, #0x1
  34:	b.eq	118 <fail+0x118>  // b.none
  38:	mov	w21, w0
  3c:	adrp	x0, 0 <__progname>
  40:	add	x19, x20, #0xd
  44:	ldr	x24, [x0]
  48:	mov	x0, x24
  4c:	bl	0 <strlen>
  50:	add	x19, x19, x0
  54:	mov	x22, x0
  58:	add	x0, x19, #0xf
  5c:	mov	x2, x20
  60:	and	x0, x0, #0xfffffffffffffff0
  64:	mov	x1, x23
  68:	sub	sp, sp, x0
  6c:	mov	x20, sp
  70:	add	x23, x20, x2
  74:	mov	x0, x20
  78:	bl	0 <memcpy>
  7c:	mov	x1, x24
  80:	mov	x2, x22
  84:	mov	x0, x23
  88:	bl	0 <memcpy>
  8c:	adrp	x0, 0 <fail>
  90:	add	x0, x0, #0x0
  94:	add	x1, x23, x22
  98:	ldr	x2, [x0]
  9c:	str	x2, [x23, x22]
  a0:	ldur	x0, [x0, #5]
  a4:	stur	x0, [x1, #5]
  a8:	mov	x2, x19
  ac:	mov	x1, x20
  b0:	mov	w0, w21
  b4:	bl	0 <write>
  b8:	tbnz	x0, #63, c8 <fail+0xc8>
  bc:	add	x20, x20, x0
  c0:	subs	x19, x19, x0
  c4:	b.ne	a8 <fail+0xa8>  // b.any
  c8:	mov	w0, w21
  cc:	bl	0 <close>
  d0:	str	wzr, [x29, #76]
  d4:	mov	x1, #0xffffffffffffffff    	// #-1
  d8:	ldr	w0, [x29, #76]
  dc:	cmp	w0, #0x2
  e0:	b.eq	110 <fail+0x110>  // b.none
  e4:	b.gt	f8 <fail+0xf8>
  e8:	cbz	w0, 130 <fail+0x130>
  ec:	cmp	w0, #0x1
  f0:	b.ne	f8 <fail+0xf8>  // b.any
  f4:	str	wzr, [x1]
  f8:	ldr	w0, [x29, #76]
  fc:	add	w0, w0, #0x1
 100:	str	w0, [x29, #76]
 104:	ldr	w0, [x29, #76]
 108:	cmp	w0, #0x2
 10c:	b.ne	e4 <fail+0xe4>  // b.any
 110:	mov	w0, #0x7f                  	// #127
 114:	bl	0 <_exit>
 118:	mov	x2, x19
 11c:	adrp	x1, 0 <fail>
 120:	mov	w0, #0x2                   	// #2
 124:	add	x1, x1, #0x0
 128:	bl	0 <syslog>
 12c:	b	d0 <fail+0xd0>
 130:	brk	#0x3e8
 134:	nop

0000000000000138 <__stack_chk_fail>:
 138:	stp	x29, x30, [sp, #-16]!
 13c:	adrp	x2, 0 <fail>
 140:	adrp	x0, 0 <fail>
 144:	mov	x29, sp
 148:	add	x2, x2, #0x0
 14c:	add	x0, x0, #0x0
 150:	mov	x1, #0x21                  	// #33
 154:	bl	0 <fail>

0000000000000158 <__chk_fail>:
 158:	stp	x29, x30, [sp, #-16]!
 15c:	adrp	x2, 0 <fail>
 160:	adrp	x0, 0 <fail>
 164:	mov	x29, sp
 168:	add	x2, x2, #0x0
 16c:	add	x0, x0, #0x0
 170:	mov	x1, #0x22                  	// #34
 174:	bl	0 <fail>

0000000000000178 <__stack_chk_fail_local>:
 178:	stp	x29, x30, [sp, #-16]!
 17c:	mov	x29, sp
 180:	bl	138 <__stack_chk_fail>

Disassembly of section .text.startup:

0000000000000000 <__guard_setup>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	adrp	x19, 0 <__guard_setup>
  10:	ldr	x0, [x19]
  14:	cbz	x0, 24 <__guard_setup+0x24>
  18:	ldp	x19, x20, [sp, #16]
  1c:	ldp	x29, x30, [sp], #48
  20:	ret
  24:	adrp	x0, 0 <__guard_setup>
  28:	mov	w1, #0x0                   	// #0
  2c:	add	x0, x0, #0x0
  30:	add	x20, x19, #0x0
  34:	stp	x21, x22, [sp, #32]
  38:	bl	0 <open>
  3c:	mov	w21, w0
  40:	cmn	w0, #0x1
  44:	b.ne	5c <__guard_setup+0x5c>  // b.any
  48:	mov	w0, #0xffffff0a            	// #-246
  4c:	strb	wzr, [x19]
  50:	strh	w0, [x20, #6]
  54:	ldp	x21, x22, [sp, #32]
  58:	b	18 <__guard_setup+0x18>
  5c:	mov	x1, x20
  60:	mov	x2, #0x8                   	// #8
  64:	bl	0 <read>
  68:	mov	x22, x0
  6c:	mov	w0, w21
  70:	bl	0 <close>
  74:	cmp	x22, #0x8
  78:	b.ne	48 <__guard_setup+0x48>  // b.any
  7c:	ldr	x0, [x19]
  80:	cbz	x0, 48 <__guard_setup+0x48>
  84:	ldp	x21, x22, [sp, #32]
  88:	b	18 <__guard_setup+0x18>

gets-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__gets_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x1
  10:	mov	x1, #0x7ffffffe            	// #2147483646
  14:	stp	x21, x22, [sp, #32]
  18:	cmp	x19, x1
  1c:	b.hi	110 <__gets_chk+0x110>  // b.pmore
  20:	mov	x20, x0
  24:	cmp	x19, #0x2, lsl #12
  28:	add	x0, x19, #0x1
  2c:	b.hi	a4 <__gets_chk+0xa4>  // b.pmore
  30:	adrp	x2, 0 <stdin>
  34:	add	x0, x19, #0x10
  38:	and	x0, x0, #0xfffffffffffffff0
  3c:	add	w1, w19, #0x1
  40:	ldr	x2, [x2]
  44:	sub	sp, sp, x0
  48:	mov	x22, sp
  4c:	mov	x0, x22
  50:	bl	0 <fgets>
  54:	cbz	x0, 90 <__gets_chk+0x90>
  58:	mov	x0, x22
  5c:	bl	0 <strlen>
  60:	mov	x21, x0
  64:	cbnz	x0, d4 <__gets_chk+0xd4>
  68:	cmp	x21, x19
  6c:	b.eq	128 <__gets_chk+0x128>  // b.none
  70:	mov	x2, x21
  74:	mov	x1, x22
  78:	mov	x0, x20
  7c:	bl	0 <memcpy>
  80:	strb	wzr, [x20, x21]
  84:	cmp	x19, #0x2, lsl #12
  88:	mov	x0, x20
  8c:	b.hi	ec <__gets_chk+0xec>  // b.pmore
  90:	mov	sp, x29
  94:	ldp	x19, x20, [sp, #16]
  98:	ldp	x21, x22, [sp, #32]
  9c:	ldp	x29, x30, [sp], #48
  a0:	ret
  a4:	bl	0 <malloc>
  a8:	mov	x22, x0
  ac:	cbz	x0, 10c <__gets_chk+0x10c>
  b0:	adrp	x2, 0 <stdin>
  b4:	add	w1, w19, #0x1
  b8:	ldr	x2, [x2]
  bc:	bl	0 <fgets>
  c0:	cbz	x0, e8 <__gets_chk+0xe8>
  c4:	mov	x0, x22
  c8:	bl	0 <strlen>
  cc:	mov	x21, x0
  d0:	cbz	x0, 70 <__gets_chk+0x70>
  d4:	sub	x0, x21, #0x1
  d8:	ldrb	w1, [x22, x0]
  dc:	cmp	w1, #0xa
  e0:	csel	x21, x21, x0, ne  // ne = any
  e4:	b	68 <__gets_chk+0x68>
  e8:	mov	x20, #0x0                   	// #0
  ec:	mov	x0, x22
  f0:	bl	0 <free>
  f4:	mov	sp, x29
  f8:	mov	x0, x20
  fc:	ldp	x19, x20, [sp, #16]
 100:	ldp	x21, x22, [sp, #32]
 104:	ldp	x29, x30, [sp], #48
 108:	ret
 10c:	mov	x0, x20
 110:	bl	0 <gets>
 114:	mov	sp, x29
 118:	ldp	x19, x20, [sp, #16]
 11c:	ldp	x21, x22, [sp, #32]
 120:	ldp	x29, x30, [sp], #48
 124:	ret
 128:	bl	0 <__chk_fail>

memcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__memcpy_chk>:
   0:	cmp	x2, x3
   4:	b.hi	c <__memcpy_chk+0xc>  // b.pmore
   8:	b	0 <memcpy>
   c:	stp	x29, x30, [sp, #-16]!
  10:	mov	x29, sp
  14:	bl	0 <__chk_fail>

memmove-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__memmove_chk>:
   0:	cmp	x2, x3
   4:	b.hi	c <__memmove_chk+0xc>  // b.pmore
   8:	b	0 <memmove>
   c:	stp	x29, x30, [sp, #-16]!
  10:	mov	x29, sp
  14:	bl	0 <__chk_fail>

mempcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__mempcpy_chk>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	x2, x3
   8:	mov	x29, sp
   c:	str	x19, [sp, #16]
  10:	b.hi	2c <__mempcpy_chk+0x2c>  // b.pmore
  14:	mov	x19, x2
  18:	bl	0 <memcpy>
  1c:	add	x0, x0, x19
  20:	ldr	x19, [sp, #16]
  24:	ldp	x29, x30, [sp], #32
  28:	ret
  2c:	bl	0 <__chk_fail>

memset-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__memset_chk>:
   0:	cmp	x2, x3
   4:	b.hi	c <__memset_chk+0xc>  // b.pmore
   8:	b	0 <memset>
   c:	stp	x29, x30, [sp, #-16]!
  10:	mov	x29, sp
  14:	bl	0 <__chk_fail>

snprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__snprintf_chk>:
   0:	stp	x29, x30, [sp, #-240]!
   4:	cmp	x1, x3
   8:	mov	x29, sp
   c:	str	q0, [sp, #80]
  10:	str	q1, [sp, #96]
  14:	str	q2, [sp, #112]
  18:	str	q3, [sp, #128]
  1c:	str	q4, [sp, #144]
  20:	str	q5, [sp, #160]
  24:	str	q6, [sp, #176]
  28:	str	q7, [sp, #192]
  2c:	stp	x5, x6, [sp, #216]
  30:	str	x7, [sp, #232]
  34:	b.hi	78 <__snprintf_chk+0x78>  // b.pmore
  38:	add	x6, sp, #0xf0
  3c:	stp	x6, x6, [sp, #48]
  40:	mov	x2, x4
  44:	add	x3, sp, #0xd0
  48:	mov	w5, #0xffffffe8            	// #-24
  4c:	mov	w4, #0xffffff80            	// #-128
  50:	str	x3, [sp, #64]
  54:	stp	w5, w4, [sp, #72]
  58:	add	x3, sp, #0x10
  5c:	ldp	x4, x5, [sp, #48]
  60:	stp	x4, x5, [sp, #16]
  64:	ldp	x4, x5, [sp, #64]
  68:	stp	x4, x5, [sp, #32]
  6c:	bl	0 <vsnprintf>
  70:	ldp	x29, x30, [sp], #240
  74:	ret
  78:	bl	0 <__chk_fail>

sprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__sprintf_chk>:
   0:	stp	x29, x30, [sp, #-256]!
   4:	mov	w9, #0xffffffe0            	// #-32
   8:	mov	w8, #0xffffff80            	// #-128
   c:	mov	x29, sp
  10:	str	x19, [sp, #16]
  14:	mov	x19, x2
  18:	mov	x2, #0x7fffffff            	// #2147483647
  1c:	add	x10, sp, #0xe0
  20:	cmp	x19, x2
  24:	add	x2, sp, #0x100
  28:	stp	x2, x2, [sp, #64]
  2c:	mov	x1, x3
  30:	str	x10, [sp, #80]
  34:	stp	w9, w8, [sp, #88]
  38:	str	q0, [sp, #96]
  3c:	str	q1, [sp, #112]
  40:	str	q2, [sp, #128]
  44:	str	q3, [sp, #144]
  48:	str	q4, [sp, #160]
  4c:	str	q5, [sp, #176]
  50:	str	q6, [sp, #192]
  54:	str	q7, [sp, #208]
  58:	stp	x4, x5, [sp, #224]
  5c:	stp	x6, x7, [sp, #240]
  60:	ldp	x6, x7, [sp, #64]
  64:	b.ls	88 <__sprintf_chk+0x88>  // b.plast
  68:	ldp	x4, x5, [sp, #80]
  6c:	add	x2, sp, #0x20
  70:	stp	x6, x7, [sp, #32]
  74:	stp	x4, x5, [sp, #48]
  78:	bl	0 <vsprintf>
  7c:	ldr	x19, [sp, #16]
  80:	ldp	x29, x30, [sp], #256
  84:	ret
  88:	ldp	x4, x5, [sp, #80]
  8c:	mov	x2, x3
  90:	mov	x1, x19
  94:	add	x3, sp, #0x20
  98:	stp	x6, x7, [sp, #32]
  9c:	stp	x4, x5, [sp, #48]
  a0:	bl	0 <vsnprintf>
  a4:	tbnz	w0, #31, 7c <__sprintf_chk+0x7c>
  a8:	cmp	x19, w0, sxtw
  ac:	b.hi	7c <__sprintf_chk+0x7c>  // b.pmore
  b0:	bl	0 <__chk_fail>

stpcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__stpcpy_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	mov	x21, x2
  10:	mov	x22, x0
  14:	mov	x0, x1
  18:	stp	x19, x20, [sp, #16]
  1c:	mov	x20, x1
  20:	bl	0 <strlen>
  24:	cmp	x0, x21
  28:	b.cs	54 <__stpcpy_chk+0x54>  // b.hs, b.nlast
  2c:	mov	x19, x0
  30:	mov	x1, x20
  34:	add	x2, x19, #0x1
  38:	mov	x0, x22
  3c:	bl	0 <memcpy>
  40:	add	x0, x0, x19
  44:	ldp	x19, x20, [sp, #16]
  48:	ldp	x21, x22, [sp, #32]
  4c:	ldp	x29, x30, [sp], #48
  50:	ret
  54:	bl	0 <__chk_fail>

strcat-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strcat_chk>:
   0:	sub	x7, x2, #0x1
   4:	add	x6, x0, x2
   8:	mov	x4, x0
   c:	b	14 <__strcat_chk+0x14>
  10:	mov	x4, x2
  14:	sub	x2, x0, x4
  18:	cmp	x4, x6
  1c:	add	x3, x2, x7
  20:	b.eq	54 <__strcat_chk+0x54>  // b.none
  24:	mov	x2, x4
  28:	ldrb	w5, [x2], #1
  2c:	cbnz	w5, 10 <__strcat_chk+0x10>
  30:	mov	x2, #0x0                   	// #0
  34:	b	44 <__strcat_chk+0x44>
  38:	cmp	x2, x3
  3c:	add	x2, x2, #0x1
  40:	b.eq	54 <__strcat_chk+0x54>  // b.none
  44:	ldrb	w5, [x1, x2]
  48:	strb	w5, [x4, x2]
  4c:	cbnz	w5, 38 <__strcat_chk+0x38>
  50:	ret
  54:	stp	x29, x30, [sp, #-16]!
  58:	mov	x29, sp
  5c:	bl	0 <__chk_fail>

strcpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strcpy_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x20, x2
  10:	mov	x19, x1
  14:	str	x21, [sp, #32]
  18:	mov	x21, x0
  1c:	mov	x0, x1
  20:	bl	0 <strlen>
  24:	cmp	x0, x20
  28:	b.cs	48 <__strcpy_chk+0x48>  // b.hs, b.nlast
  2c:	add	x2, x0, #0x1
  30:	mov	x1, x19
  34:	mov	x0, x21
  38:	ldp	x19, x20, [sp, #16]
  3c:	ldr	x21, [sp, #32]
  40:	ldp	x29, x30, [sp], #48
  44:	b	0 <memcpy>
  48:	bl	0 <__chk_fail>

strncat-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strncat_chk>:
   0:	add	x8, x0, x3
   4:	mov	x4, x0
   8:	b	10 <__strncat_chk+0x10>
   c:	mov	x4, x5
  10:	mov	x6, x3
  14:	cmp	x4, x8
  18:	sub	x3, x3, #0x1
  1c:	b.eq	fc <__strncat_chk+0xfc>  // b.none
  20:	mov	x5, x4
  24:	ldrb	w7, [x5], #1
  28:	cbnz	w7, c <__strncat_chk+0xc>
  2c:	sub	x4, x4, #0x1
  30:	cmp	x2, #0x3
  34:	b.ls	a8 <__strncat_chk+0xa8>  // b.plast
  38:	and	x7, x2, #0xfffffffffffffffc
  3c:	add	x7, x1, x7
  40:	b	98 <__strncat_chk+0x98>
  44:	cmp	x6, #0x1
  48:	b.eq	fc <__strncat_chk+0xfc>  // b.none
  4c:	ldrb	w3, [x1, #1]
  50:	strb	w3, [x4, #2]
  54:	cbz	w3, a4 <__strncat_chk+0xa4>
  58:	cmp	x6, #0x2
  5c:	b.eq	fc <__strncat_chk+0xfc>  // b.none
  60:	ldrb	w3, [x1, #2]
  64:	strb	w3, [x4, #3]
  68:	cbz	w3, a4 <__strncat_chk+0xa4>
  6c:	cmp	x6, #0x3
  70:	sub	x5, x6, #0x4
  74:	b.eq	fc <__strncat_chk+0xfc>  // b.none
  78:	ldrb	w3, [x1, #3]
  7c:	add	x1, x1, #0x4
  80:	strb	w3, [x4, #4]!
  84:	cbz	w3, a4 <__strncat_chk+0xa4>
  88:	cmp	x1, x7
  8c:	b.eq	ec <__strncat_chk+0xec>  // b.none
  90:	cbz	x5, fc <__strncat_chk+0xfc>
  94:	mov	x6, x5
  98:	ldrb	w3, [x1]
  9c:	strb	w3, [x4, #1]
  a0:	cbnz	w3, 44 <__strncat_chk+0x44>
  a4:	ret
  a8:	cbz	x2, a4 <__strncat_chk+0xa4>
  ac:	add	x5, x3, #0x1
  b0:	sub	x5, x5, x2
  b4:	b	cc <__strncat_chk+0xcc>
  b8:	cmp	x5, x3
  bc:	b.eq	e0 <__strncat_chk+0xe0>  // b.none
  c0:	sub	x2, x3, #0x1
  c4:	cbz	x3, fc <__strncat_chk+0xfc>
  c8:	mov	x3, x2
  cc:	ldrb	w2, [x1], #1
  d0:	strb	w2, [x4, #1]!
  d4:	cbnz	w2, b8 <__strncat_chk+0xb8>
  d8:	b	a4 <__strncat_chk+0xa4>
  dc:	mov	x3, x5
  e0:	cbz	x3, fc <__strncat_chk+0xfc>
  e4:	strb	wzr, [x4, #1]
  e8:	ret
  ec:	ands	x2, x2, #0x3
  f0:	b.eq	dc <__strncat_chk+0xdc>  // b.none
  f4:	sub	x3, x6, #0x5
  f8:	cbnz	x5, ac <__strncat_chk+0xac>
  fc:	stp	x29, x30, [sp, #-16]!
 100:	mov	x29, sp
 104:	bl	0 <__chk_fail>

strncpy-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__strncpy_chk>:
   0:	cmp	x2, x3
   4:	b.hi	c <__strncpy_chk+0xc>  // b.pmore
   8:	b	0 <strncpy>
   c:	stp	x29, x30, [sp, #-16]!
  10:	mov	x29, sp
  14:	bl	0 <__chk_fail>

vsnprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__vsnprintf_chk>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	cmp	x1, x3
   8:	mov	x29, sp
   c:	b.hi	34 <__vsnprintf_chk+0x34>  // b.pmore
  10:	mov	x2, x4
  14:	add	x3, sp, #0x10
  18:	ldp	x6, x7, [x5]
  1c:	ldp	x4, x5, [x5, #16]
  20:	stp	x6, x7, [sp, #16]
  24:	stp	x4, x5, [sp, #32]
  28:	bl	0 <vsnprintf>
  2c:	ldp	x29, x30, [sp], #48
  30:	ret
  34:	bl	0 <__chk_fail>

vsprintf-chk.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <__vsprintf_chk>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x1, x3
   8:	mov	x29, sp
   c:	ldp	x6, x7, [x4]
  10:	str	x19, [sp, #16]
  14:	mov	x19, x2
  18:	mov	x2, #0x7fffffff            	// #2147483647
  1c:	cmp	x19, x2
  20:	b.ls	44 <__vsprintf_chk+0x44>  // b.plast
  24:	ldp	x4, x5, [x4, #16]
  28:	add	x2, sp, #0x20
  2c:	stp	x6, x7, [sp, #32]
  30:	stp	x4, x5, [sp, #48]
  34:	bl	0 <vsprintf>
  38:	ldr	x19, [sp, #16]
  3c:	ldp	x29, x30, [sp], #64
  40:	ret
  44:	ldp	x4, x5, [x4, #16]
  48:	mov	x2, x3
  4c:	mov	x1, x19
  50:	add	x3, sp, #0x20
  54:	stp	x6, x7, [sp, #32]
  58:	stp	x4, x5, [sp, #48]
  5c:	bl	0 <vsnprintf>
  60:	tbnz	w0, #31, 38 <__vsprintf_chk+0x38>
  64:	cmp	x19, w0, sxtw
  68:	b.hi	38 <__vsprintf_chk+0x38>  // b.pmore
  6c:	bl	0 <__chk_fail>
