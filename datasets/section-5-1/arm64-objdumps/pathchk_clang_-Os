
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//pathchk_clang_-Os:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000980 <_init>:
 980:	stp	x29, x30, [sp, #-16]!
 984:	mov	x29, sp
 988:	bl	ac0 <call_weak_fn>
 98c:	ldp	x29, x30, [sp], #16
 990:	ret

Disassembly of section .plt:

00000000000009a0 <.plt>:
 9a0:	stp	x16, x30, [sp, #-16]!
 9a4:	adrp	x16, 11000 <__FRAME_END__+0xfd94>
 9a8:	ldr	x17, [x16, #4088]
 9ac:	add	x16, x16, #0xff8
 9b0:	br	x17
 9b4:	nop
 9b8:	nop
 9bc:	nop

00000000000009c0 <strlen@plt>:
 9c0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9c4:	ldr	x17, [x16]
 9c8:	add	x16, x16, #0x0
 9cc:	br	x17

00000000000009d0 <builtin_error@plt>:
 9d0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9d4:	ldr	x17, [x16, #8]
 9d8:	add	x16, x16, #0x8
 9dc:	br	x17

00000000000009e0 <__cxa_finalize@plt>:
 9e0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9e4:	ldr	x17, [x16, #16]
 9e8:	add	x16, x16, #0x10
 9ec:	br	x17

00000000000009f0 <builtin_help@plt>:
 9f0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 9f4:	ldr	x17, [x16, #24]
 9f8:	add	x16, x16, #0x18
 9fc:	br	x17

0000000000000a00 <xmalloc@plt>:
 a00:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a04:	ldr	x17, [x16, #32]
 a08:	add	x16, x16, #0x20
 a0c:	br	x17

0000000000000a10 <builtin_usage@plt>:
 a10:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a14:	ldr	x17, [x16, #40]
 a18:	add	x16, x16, #0x28
 a1c:	br	x17

0000000000000a20 <strerror@plt>:
 a20:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a24:	ldr	x17, [x16, #48]
 a28:	add	x16, x16, #0x30
 a2c:	br	x17

0000000000000a30 <__gmon_start__@plt>:
 a30:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a34:	ldr	x17, [x16, #56]
 a38:	add	x16, x16, #0x38
 a3c:	br	x17

0000000000000a40 <access@plt>:
 a40:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a44:	ldr	x17, [x16, #64]
 a48:	add	x16, x16, #0x40
 a4c:	br	x17

0000000000000a50 <free@plt>:
 a50:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a54:	ldr	x17, [x16, #72]
 a58:	add	x16, x16, #0x48
 a5c:	br	x17

0000000000000a60 <internal_getopt@plt>:
 a60:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a64:	ldr	x17, [x16, #80]
 a68:	add	x16, x16, #0x50
 a6c:	br	x17

0000000000000a70 <reset_internal_getopt@plt>:
 a70:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a74:	ldr	x17, [x16, #88]
 a78:	add	x16, x16, #0x58
 a7c:	br	x17

0000000000000a80 <strchr@plt>:
 a80:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a84:	ldr	x17, [x16, #96]
 a88:	add	x16, x16, #0x60
 a8c:	br	x17

0000000000000a90 <strcpy@plt>:
 a90:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 a94:	ldr	x17, [x16, #104]
 a98:	add	x16, x16, #0x68
 a9c:	br	x17

0000000000000aa0 <__errno_location@plt>:
 aa0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 aa4:	ldr	x17, [x16, #112]
 aa8:	add	x16, x16, #0x70
 aac:	br	x17

0000000000000ab0 <__xstat@plt>:
 ab0:	adrp	x16, 12000 <strlen@GLIBC_2.17>
 ab4:	ldr	x17, [x16, #120]
 ab8:	add	x16, x16, #0x78
 abc:	br	x17

Disassembly of section .text:

0000000000000ac0 <call_weak_fn>:
 ac0:	adrp	x0, 11000 <__FRAME_END__+0xfd94>
 ac4:	ldr	x0, [x0, #4048]
 ac8:	cbz	x0, ad0 <call_weak_fn+0x10>
 acc:	b	a30 <__gmon_start__@plt>
 ad0:	ret
 ad4:	nop

0000000000000ad8 <deregister_tm_clones>:
 ad8:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 adc:	add	x0, x0, #0xf0
 ae0:	adrp	x1, 12000 <strlen@GLIBC_2.17>
 ae4:	add	x1, x1, #0xf0
 ae8:	cmp	x1, x0
 aec:	b.eq	b04 <deregister_tm_clones+0x2c>  // b.none
 af0:	adrp	x1, 11000 <__FRAME_END__+0xfd94>
 af4:	ldr	x1, [x1, #4032]
 af8:	cbz	x1, b04 <deregister_tm_clones+0x2c>
 afc:	mov	x16, x1
 b00:	br	x16
 b04:	ret

0000000000000b08 <register_tm_clones>:
 b08:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 b0c:	add	x0, x0, #0xf0
 b10:	adrp	x1, 12000 <strlen@GLIBC_2.17>
 b14:	add	x1, x1, #0xf0
 b18:	sub	x1, x1, x0
 b1c:	lsr	x2, x1, #63
 b20:	add	x1, x2, x1, asr #3
 b24:	cmp	xzr, x1, asr #1
 b28:	asr	x1, x1, #1
 b2c:	b.eq	b44 <register_tm_clones+0x3c>  // b.none
 b30:	adrp	x2, 11000 <__FRAME_END__+0xfd94>
 b34:	ldr	x2, [x2, #4064]
 b38:	cbz	x2, b44 <register_tm_clones+0x3c>
 b3c:	mov	x16, x2
 b40:	br	x16
 b44:	ret

0000000000000b48 <__do_global_dtors_aux>:
 b48:	stp	x29, x30, [sp, #-32]!
 b4c:	mov	x29, sp
 b50:	str	x19, [sp, #16]
 b54:	adrp	x19, 12000 <strlen@GLIBC_2.17>
 b58:	ldrb	w0, [x19, #240]
 b5c:	cbnz	w0, b84 <__do_global_dtors_aux+0x3c>
 b60:	adrp	x0, 11000 <__FRAME_END__+0xfd94>
 b64:	ldr	x0, [x0, #4040]
 b68:	cbz	x0, b78 <__do_global_dtors_aux+0x30>
 b6c:	adrp	x0, 12000 <strlen@GLIBC_2.17>
 b70:	ldr	x0, [x0, #128]
 b74:	bl	9e0 <__cxa_finalize@plt>
 b78:	bl	ad8 <deregister_tm_clones>
 b7c:	mov	w0, #0x1                   	// #1
 b80:	strb	w0, [x19, #240]
 b84:	ldr	x19, [sp, #16]
 b88:	ldp	x29, x30, [sp], #32
 b8c:	ret

0000000000000b90 <frame_dummy>:
 b90:	b	b08 <register_tm_clones>

0000000000000b94 <pathchk_builtin>:
 b94:	sub	sp, sp, #0xe0
 b98:	stp	x29, x30, [sp, #128]
 b9c:	stp	x28, x27, [sp, #144]
 ba0:	stp	x26, x25, [sp, #160]
 ba4:	stp	x24, x23, [sp, #176]
 ba8:	stp	x22, x21, [sp, #192]
 bac:	stp	x20, x19, [sp, #208]
 bb0:	add	x29, sp, #0x80
 bb4:	mov	x19, x0
 bb8:	bl	a70 <reset_internal_getopt@plt>
 bbc:	adrp	x20, 0 <_init-0x980>
 bc0:	add	x20, x20, #0xe90
 bc4:	mov	x0, x19
 bc8:	mov	x1, x20
 bcc:	bl	a60 <internal_getopt@plt>
 bd0:	cmp	w0, #0x70
 bd4:	b.eq	bc4 <pathchk_builtin+0x30>  // b.none
 bd8:	cmn	w0, #0x1
 bdc:	b.eq	bf0 <pathchk_builtin+0x5c>  // b.none
 be0:	cmn	w0, #0x63
 be4:	b.ne	e10 <pathchk_builtin+0x27c>  // b.any
 be8:	bl	9f0 <builtin_help@plt>
 bec:	b	e14 <pathchk_builtin+0x280>
 bf0:	adrp	x8, 11000 <__FRAME_END__+0xfd94>
 bf4:	ldr	x8, [x8, #4056]
 bf8:	ldr	x22, [x8]
 bfc:	cbz	x22, e10 <pathchk_builtin+0x27c>
 c00:	adrp	x24, 1000 <_fini+0x180>
 c04:	mov	w23, wzr
 c08:	add	x24, x24, #0xa5
 c0c:	mov	w21, #0x2f                  	// #47
 c10:	ldr	x8, [x22, #8]
 c14:	ldr	x25, [x8]
 c18:	ldrb	w8, [x25]
 c1c:	cbz	w8, dc8 <pathchk_builtin+0x234>
 c20:	mov	w9, #0x1                   	// #1
 c24:	mov	w10, w8
 c28:	and	x11, x10, #0xff
 c2c:	ldrb	w11, [x24, x11]
 c30:	cbz	w11, d5c <pathchk_builtin+0x1c8>
 c34:	ldrb	w10, [x25, x9]
 c38:	add	x9, x9, #0x1
 c3c:	cbnz	w10, c28 <pathchk_builtin+0x94>
 c40:	cmp	w8, #0x2f
 c44:	adrp	x8, 0 <_init-0x980>
 c48:	adrp	x9, 0 <_init-0x980>
 c4c:	add	x8, x8, #0xfd8
 c50:	add	x9, x9, #0xfda
 c54:	csel	x0, x9, x8, eq  // eq = none
 c58:	bl	e44 <xstrdup>
 c5c:	mov	x26, x0
 c60:	mov	w19, wzr
 c64:	mov	x27, x25
 c68:	sub	x28, x27, #0x1
 c6c:	ldrb	w8, [x28, #1]!
 c70:	cmp	w8, #0x2f
 c74:	b.eq	c6c <pathchk_builtin+0xd8>  // b.none
 c78:	mov	w1, #0x2f                  	// #47
 c7c:	mov	x0, x28
 c80:	bl	a80 <strchr@plt>
 c84:	cbz	x0, cc0 <pathchk_builtin+0x12c>
 c88:	mov	x27, x0
 c8c:	strb	wzr, [x0]
 c90:	cbz	w19, c9c <pathchk_builtin+0x108>
 c94:	mov	w8, #0x1                   	// #1
 c98:	b	ce8 <pathchk_builtin+0x154>
 c9c:	mov	x1, sp
 ca0:	mov	x0, x25
 ca4:	bl	e70 <__stat>
 ca8:	tbz	w0, #31, cd8 <pathchk_builtin+0x144>
 cac:	bl	aa0 <__errno_location@plt>
 cb0:	ldr	w8, [x0]
 cb4:	cmp	w8, #0x4
 cb8:	b.eq	c9c <pathchk_builtin+0x108>  // b.none
 cbc:	b	cdc <pathchk_builtin+0x148>
 cc0:	mov	x0, x28
 cc4:	bl	9c0 <strlen@plt>
 cc8:	add	x27, x28, x0
 ccc:	mov	w8, #0x1                   	// #1
 cd0:	mov	w19, #0x1                   	// #1
 cd4:	b	ce8 <pathchk_builtin+0x154>
 cd8:	cbz	w0, d1c <pathchk_builtin+0x188>
 cdc:	mov	w20, #0x2                   	// #2
 ce0:	mov	w8, wzr
 ce4:	mov	w19, wzr
 ce8:	sub	x2, x27, x28
 cec:	cmp	w2, #0xf
 cf0:	b.ge	d74 <pathchk_builtin+0x1e0>  // b.tcont
 cf4:	tbnz	w8, #0, d94 <pathchk_builtin+0x200>
 cf8:	cmp	w20, #0x1
 cfc:	b.ne	d14 <pathchk_builtin+0x180>  // b.any
 d00:	mov	x0, x26
 d04:	bl	a50 <free@plt>
 d08:	mov	x0, x25
 d0c:	bl	e44 <xstrdup>
 d10:	mov	x26, x0
 d14:	strb	w21, [x27], #1
 d18:	b	c68 <pathchk_builtin+0xd4>
 d1c:	ldr	w8, [sp, #16]
 d20:	and	w8, w8, #0xf000
 d24:	cmp	w8, #0x4, lsl #12
 d28:	b.ne	de0 <pathchk_builtin+0x24c>  // b.any
 d2c:	mov	w1, #0x1                   	// #1
 d30:	mov	x0, x25
 d34:	mov	w20, #0x1                   	// #1
 d38:	bl	a40 <access@plt>
 d3c:	cbz	w0, ce0 <pathchk_builtin+0x14c>
 d40:	bl	aa0 <__errno_location@plt>
 d44:	ldr	w0, [x0]
 d48:	cmp	w0, #0xd
 d4c:	b.ne	df4 <pathchk_builtin+0x260>  // b.any
 d50:	adrp	x0, 1000 <_fini+0x180>
 d54:	add	x0, x0, #0x7d
 d58:	b	de8 <pathchk_builtin+0x254>
 d5c:	adrp	x0, 1000 <_fini+0x180>
 d60:	and	w2, w10, #0xff
 d64:	add	x0, x0, #0x37
 d68:	mov	x1, x25
 d6c:	bl	9d0 <builtin_error@plt>
 d70:	b	dc4 <pathchk_builtin+0x230>
 d74:	adrp	x0, 0 <_init-0x980>
 d78:	mov	w3, #0xe                   	// #14
 d7c:	add	x0, x0, #0xfdc
 d80:	mov	x1, x28
 d84:	bl	9d0 <builtin_error@plt>
 d88:	mov	x0, x26
 d8c:	bl	a50 <free@plt>
 d90:	b	dc4 <pathchk_builtin+0x230>
 d94:	mov	x0, x26
 d98:	bl	a50 <free@plt>
 d9c:	mov	x0, x25
 da0:	bl	9c0 <strlen@plt>
 da4:	cmp	x0, #0x101
 da8:	b.cc	dd8 <pathchk_builtin+0x244>  // b.lo, b.ul, b.last
 dac:	mov	x2, x0
 db0:	adrp	x0, 1000 <_fini+0x180>
 db4:	mov	w3, #0x100                 	// #256
 db8:	add	x0, x0, #0x9
 dbc:	mov	x1, x25
 dc0:	bl	9d0 <builtin_error@plt>
 dc4:	mov	w8, #0x1                   	// #1
 dc8:	ldr	x22, [x22]
 dcc:	orr	w23, w8, w23
 dd0:	cbnz	x22, c10 <pathchk_builtin+0x7c>
 dd4:	b	e1c <pathchk_builtin+0x288>
 dd8:	mov	w8, wzr
 ddc:	b	dc8 <pathchk_builtin+0x234>
 de0:	adrp	x0, 1000 <_fini+0x180>
 de4:	add	x0, x0, #0x65
 de8:	mov	x1, x25
 dec:	bl	9d0 <builtin_error@plt>
 df0:	b	d88 <pathchk_builtin+0x1f4>
 df4:	bl	a20 <strerror@plt>
 df8:	mov	x2, x0
 dfc:	adrp	x0, 1000 <_fini+0x180>
 e00:	add	x0, x0, #0x9e
 e04:	mov	x1, x25
 e08:	bl	9d0 <builtin_error@plt>
 e0c:	b	d88 <pathchk_builtin+0x1f4>
 e10:	bl	a10 <builtin_usage@plt>
 e14:	mov	w0, #0x102                 	// #258
 e18:	b	e24 <pathchk_builtin+0x290>
 e1c:	cmp	w23, #0x0
 e20:	cset	w0, ne  // ne = any
 e24:	ldp	x20, x19, [sp, #208]
 e28:	ldp	x22, x21, [sp, #192]
 e2c:	ldp	x24, x23, [sp, #176]
 e30:	ldp	x26, x25, [sp, #160]
 e34:	ldp	x28, x27, [sp, #144]
 e38:	ldp	x29, x30, [sp, #128]
 e3c:	add	sp, sp, #0xe0
 e40:	ret

0000000000000e44 <xstrdup>:
 e44:	stp	x29, x30, [sp, #-32]!
 e48:	str	x19, [sp, #16]
 e4c:	mov	x29, sp
 e50:	mov	x19, x0
 e54:	bl	9c0 <strlen@plt>
 e58:	add	x0, x0, #0x1
 e5c:	bl	a00 <xmalloc@plt>
 e60:	mov	x1, x19
 e64:	ldr	x19, [sp, #16]
 e68:	ldp	x29, x30, [sp], #32
 e6c:	b	a90 <strcpy@plt>

0000000000000e70 <__stat>:
 e70:	mov	x2, x1
 e74:	mov	x1, x0
 e78:	mov	w0, #0x0                   	// #0
 e7c:	b	ab0 <__xstat@plt>

Disassembly of section .fini:

0000000000000e80 <_fini>:
 e80:	stp	x29, x30, [sp, #-16]!
 e84:	mov	x29, sp
 e88:	ldp	x29, x30, [sp], #16
 e8c:	ret
