
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//_hashlib.cpython-38-aarch64-linux-gnu.so_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

00000000000024e0 <.init>:
    24e0:	stp	x29, x30, [sp, #-16]!
    24e4:	mov	x29, sp
    24e8:	bl	29d0 <PyThread_acquire_lock@plt+0x10>
    24ec:	ldp	x29, x30, [sp], #16
    24f0:	ret

Disassembly of section .plt:

0000000000002500 <PyModule_AddObject@plt-0x20>:
    2500:	stp	x16, x30, [sp, #-16]!
    2504:	adrp	x16, 16000 <PyInit__hashlib@@Base+0x10f28>
    2508:	ldr	x17, [x16, #4088]
    250c:	add	x16, x16, #0xff8
    2510:	br	x17
    2514:	nop
    2518:	nop
    251c:	nop

0000000000002520 <PyModule_AddObject@plt>:
    2520:	adrp	x16, 17000 <PyModule_AddObject>
    2524:	ldr	x17, [x16]
    2528:	add	x16, x16, #0x0
    252c:	br	x17

0000000000002530 <EVP_MD_type@plt>:
    2530:	adrp	x16, 17000 <PyModule_AddObject>
    2534:	ldr	x17, [x16, #8]
    2538:	add	x16, x16, #0x8
    253c:	br	x17

0000000000002540 <PKCS5_PBKDF2_HMAC@plt>:
    2540:	adrp	x16, 17000 <PyModule_AddObject>
    2544:	ldr	x17, [x16, #16]
    2548:	add	x16, x16, #0x10
    254c:	br	x17

0000000000002550 <EVP_DigestInit_ex@plt>:
    2550:	adrp	x16, 17000 <PyModule_AddObject>
    2554:	ldr	x17, [x16, #24]
    2558:	add	x16, x16, #0x18
    255c:	br	x17

0000000000002560 <ERR_reason_error_string@plt>:
    2560:	adrp	x16, 17000 <PyModule_AddObject>
    2564:	ldr	x17, [x16, #32]
    2568:	add	x16, x16, #0x20
    256c:	br	x17

0000000000002570 <EVP_sha512_224@plt>:
    2570:	adrp	x16, 17000 <PyModule_AddObject>
    2574:	ldr	x17, [x16, #40]
    2578:	add	x16, x16, #0x28
    257c:	br	x17

0000000000002580 <EVP_blake2s256@plt>:
    2580:	adrp	x16, 17000 <PyModule_AddObject>
    2584:	ldr	x17, [x16, #48]
    2588:	add	x16, x16, #0x30
    258c:	br	x17

0000000000002590 <EVP_MD_CTX_md@plt>:
    2590:	adrp	x16, 17000 <PyModule_AddObject>
    2594:	ldr	x17, [x16, #56]
    2598:	add	x16, x16, #0x38
    259c:	br	x17

00000000000025a0 <PyType_Ready@plt>:
    25a0:	adrp	x16, 17000 <PyModule_AddObject>
    25a4:	ldr	x17, [x16, #64]
    25a8:	add	x16, x16, #0x40
    25ac:	br	x17

00000000000025b0 <EVP_shake256@plt>:
    25b0:	adrp	x16, 17000 <PyModule_AddObject>
    25b4:	ldr	x17, [x16, #72]
    25b8:	add	x16, x16, #0x48
    25bc:	br	x17

00000000000025c0 <EVP_sha384@plt>:
    25c0:	adrp	x16, 17000 <PyModule_AddObject>
    25c4:	ldr	x17, [x16, #80]
    25c8:	add	x16, x16, #0x50
    25cc:	br	x17

00000000000025d0 <__gmon_start__@plt>:
    25d0:	adrp	x16, 17000 <PyModule_AddObject>
    25d4:	ldr	x17, [x16, #88]
    25d8:	add	x16, x16, #0x58
    25dc:	br	x17

00000000000025e0 <ERR_func_error_string@plt>:
    25e0:	adrp	x16, 17000 <PyModule_AddObject>
    25e4:	ldr	x17, [x16, #96]
    25e8:	add	x16, x16, #0x60
    25ec:	br	x17

00000000000025f0 <EVP_sha3_512@plt>:
    25f0:	adrp	x16, 17000 <PyModule_AddObject>
    25f4:	ldr	x17, [x16, #104]
    25f8:	add	x16, x16, #0x68
    25fc:	br	x17

0000000000002600 <OBJ_nid2ln@plt>:
    2600:	adrp	x16, 17000 <PyModule_AddObject>
    2604:	ldr	x17, [x16, #112]
    2608:	add	x16, x16, #0x70
    260c:	br	x17

0000000000002610 <ERR_clear_error@plt>:
    2610:	adrp	x16, 17000 <PyModule_AddObject>
    2614:	ldr	x17, [x16, #120]
    2618:	add	x16, x16, #0x78
    261c:	br	x17

0000000000002620 <PyUnicode_FromString@plt>:
    2620:	adrp	x16, 17000 <PyModule_AddObject>
    2624:	ldr	x17, [x16, #128]
    2628:	add	x16, x16, #0x80
    262c:	br	x17

0000000000002630 <PyErr_NoMemory@plt>:
    2630:	adrp	x16, 17000 <PyModule_AddObject>
    2634:	ldr	x17, [x16, #136]
    2638:	add	x16, x16, #0x88
    263c:	br	x17

0000000000002640 <EVP_get_digestbyname@plt>:
    2640:	adrp	x16, 17000 <PyModule_AddObject>
    2644:	ldr	x17, [x16, #144]
    2648:	add	x16, x16, #0x90
    264c:	br	x17

0000000000002650 <PyThread_free_lock@plt>:
    2650:	adrp	x16, 17000 <PyModule_AddObject>
    2654:	ldr	x17, [x16, #152]
    2658:	add	x16, x16, #0x98
    265c:	br	x17

0000000000002660 <_PyObject_New@plt>:
    2660:	adrp	x16, 17000 <PyModule_AddObject>
    2664:	ldr	x17, [x16, #160]
    2668:	add	x16, x16, #0xa0
    266c:	br	x17

0000000000002670 <PyUnicode_AsUTF8AndSize@plt>:
    2670:	adrp	x16, 17000 <PyModule_AddObject>
    2674:	ldr	x17, [x16, #168]
    2678:	add	x16, x16, #0xa8
    267c:	br	x17

0000000000002680 <EVP_shake128@plt>:
    2680:	adrp	x16, 17000 <PyModule_AddObject>
    2684:	ldr	x17, [x16, #176]
    2688:	add	x16, x16, #0xb0
    268c:	br	x17

0000000000002690 <EVP_md5@plt>:
    2690:	adrp	x16, 17000 <PyModule_AddObject>
    2694:	ldr	x17, [x16, #184]
    2698:	add	x16, x16, #0xb8
    269c:	br	x17

00000000000026a0 <PyUnicode_FromFormat@plt>:
    26a0:	adrp	x16, 17000 <PyModule_AddObject>
    26a4:	ldr	x17, [x16, #192]
    26a8:	add	x16, x16, #0xc0
    26ac:	br	x17

00000000000026b0 <PyThread_allocate_lock@plt>:
    26b0:	adrp	x16, 17000 <PyModule_AddObject>
    26b4:	ldr	x17, [x16, #200]
    26b8:	add	x16, x16, #0xc8
    26bc:	br	x17

00000000000026c0 <EVP_MD_size@plt>:
    26c0:	adrp	x16, 17000 <PyModule_AddObject>
    26c4:	ldr	x17, [x16, #208]
    26c8:	add	x16, x16, #0xd0
    26cc:	br	x17

00000000000026d0 <PyLong_AsLong@plt>:
    26d0:	adrp	x16, 17000 <PyModule_AddObject>
    26d4:	ldr	x17, [x16, #216]
    26d8:	add	x16, x16, #0xd8
    26dc:	br	x17

00000000000026e0 <__cxa_finalize@plt>:
    26e0:	adrp	x16, 17000 <PyModule_AddObject>
    26e4:	ldr	x17, [x16, #224]
    26e8:	add	x16, x16, #0xe0
    26ec:	br	x17

00000000000026f0 <PyErr_Format@plt>:
    26f0:	adrp	x16, 17000 <PyModule_AddObject>
    26f4:	ldr	x17, [x16, #232]
    26f8:	add	x16, x16, #0xe8
    26fc:	br	x17

0000000000002700 <EVP_DigestUpdate@plt>:
    2700:	adrp	x16, 17000 <PyModule_AddObject>
    2704:	ldr	x17, [x16, #240]
    2708:	add	x16, x16, #0xf0
    270c:	br	x17

0000000000002710 <EVP_MD_do_all@plt>:
    2710:	adrp	x16, 17000 <PyModule_AddObject>
    2714:	ldr	x17, [x16, #248]
    2718:	add	x16, x16, #0xf8
    271c:	br	x17

0000000000002720 <PyErr_Occurred@plt>:
    2720:	adrp	x16, 17000 <PyModule_AddObject>
    2724:	ldr	x17, [x16, #256]
    2728:	add	x16, x16, #0x100
    272c:	br	x17

0000000000002730 <EVP_MD_block_size@plt>:
    2730:	adrp	x16, 17000 <PyModule_AddObject>
    2734:	ldr	x17, [x16, #264]
    2738:	add	x16, x16, #0x108
    273c:	br	x17

0000000000002740 <PyThread_release_lock@plt>:
    2740:	adrp	x16, 17000 <PyModule_AddObject>
    2744:	ldr	x17, [x16, #272]
    2748:	add	x16, x16, #0x110
    274c:	br	x17

0000000000002750 <PyObject_GetBuffer@plt>:
    2750:	adrp	x16, 17000 <PyModule_AddObject>
    2754:	ldr	x17, [x16, #280]
    2758:	add	x16, x16, #0x118
    275c:	br	x17

0000000000002760 <EVP_DigestFinal@plt>:
    2760:	adrp	x16, 17000 <PyModule_AddObject>
    2764:	ldr	x17, [x16, #288]
    2768:	add	x16, x16, #0x120
    276c:	br	x17

0000000000002770 <PyEval_RestoreThread@plt>:
    2770:	adrp	x16, 17000 <PyModule_AddObject>
    2774:	ldr	x17, [x16, #296]
    2778:	add	x16, x16, #0x128
    277c:	br	x17

0000000000002780 <EVP_MD_CTX_copy@plt>:
    2780:	adrp	x16, 17000 <PyModule_AddObject>
    2784:	ldr	x17, [x16, #304]
    2788:	add	x16, x16, #0x130
    278c:	br	x17

0000000000002790 <EVP_sha3_384@plt>:
    2790:	adrp	x16, 17000 <PyModule_AddObject>
    2794:	ldr	x17, [x16, #312]
    2798:	add	x16, x16, #0x138
    279c:	br	x17

00000000000027a0 <PyFrozenSet_New@plt>:
    27a0:	adrp	x16, 17000 <PyModule_AddObject>
    27a4:	ldr	x17, [x16, #320]
    27a8:	add	x16, x16, #0x140
    27ac:	br	x17

00000000000027b0 <PyEval_SaveThread@plt>:
    27b0:	adrp	x16, 17000 <PyModule_AddObject>
    27b4:	ldr	x17, [x16, #328]
    27b8:	add	x16, x16, #0x148
    27bc:	br	x17

00000000000027c0 <EVP_sha224@plt>:
    27c0:	adrp	x16, 17000 <PyModule_AddObject>
    27c4:	ldr	x17, [x16, #336]
    27c8:	add	x16, x16, #0x150
    27cc:	br	x17

00000000000027d0 <EVP_sha3_256@plt>:
    27d0:	adrp	x16, 17000 <PyModule_AddObject>
    27d4:	ldr	x17, [x16, #344]
    27d8:	add	x16, x16, #0x158
    27dc:	br	x17

00000000000027e0 <EVP_MD_CTX_new@plt>:
    27e0:	adrp	x16, 17000 <PyModule_AddObject>
    27e4:	ldr	x17, [x16, #352]
    27e8:	add	x16, x16, #0x160
    27ec:	br	x17

00000000000027f0 <PyBuffer_IsContiguous@plt>:
    27f0:	adrp	x16, 17000 <PyModule_AddObject>
    27f4:	ldr	x17, [x16, #360]
    27f8:	add	x16, x16, #0x168
    27fc:	br	x17

0000000000002800 <PyType_IsSubtype@plt>:
    2800:	adrp	x16, 17000 <PyModule_AddObject>
    2804:	ldr	x17, [x16, #368]
    2808:	add	x16, x16, #0x170
    280c:	br	x17

0000000000002810 <_Py_strhex@plt>:
    2810:	adrp	x16, 17000 <PyModule_AddObject>
    2814:	ldr	x17, [x16, #376]
    2818:	add	x16, x16, #0x178
    281c:	br	x17

0000000000002820 <EVP_sha1@plt>:
    2820:	adrp	x16, 17000 <PyModule_AddObject>
    2824:	ldr	x17, [x16, #384]
    2828:	add	x16, x16, #0x180
    282c:	br	x17

0000000000002830 <EVP_PBE_scrypt@plt>:
    2830:	adrp	x16, 17000 <PyModule_AddObject>
    2834:	ldr	x17, [x16, #392]
    2838:	add	x16, x16, #0x188
    283c:	br	x17

0000000000002840 <ERR_peek_last_error@plt>:
    2840:	adrp	x16, 17000 <PyModule_AddObject>
    2844:	ldr	x17, [x16, #400]
    2848:	add	x16, x16, #0x190
    284c:	br	x17

0000000000002850 <PySet_Add@plt>:
    2850:	adrp	x16, 17000 <PyModule_AddObject>
    2854:	ldr	x17, [x16, #408]
    2858:	add	x16, x16, #0x198
    285c:	br	x17

0000000000002860 <HMAC@plt>:
    2860:	adrp	x16, 17000 <PyModule_AddObject>
    2864:	ldr	x17, [x16, #416]
    2868:	add	x16, x16, #0x1a0
    286c:	br	x17

0000000000002870 <PyBytes_FromStringAndSize@plt>:
    2870:	adrp	x16, 17000 <PyModule_AddObject>
    2874:	ldr	x17, [x16, #424]
    2878:	add	x16, x16, #0x1a8
    287c:	br	x17

0000000000002880 <_PyArg_Parse_SizeT@plt>:
    2880:	adrp	x16, 17000 <PyModule_AddObject>
    2884:	ldr	x17, [x16, #432]
    2888:	add	x16, x16, #0x1b0
    288c:	br	x17

0000000000002890 <PyLong_FromLong@plt>:
    2890:	adrp	x16, 17000 <PyModule_AddObject>
    2894:	ldr	x17, [x16, #440]
    2898:	add	x16, x16, #0x1b8
    289c:	br	x17

00000000000028a0 <strcmp@plt>:
    28a0:	adrp	x16, 17000 <PyModule_AddObject>
    28a4:	ldr	x17, [x16, #448]
    28a8:	add	x16, x16, #0x1c0
    28ac:	br	x17

00000000000028b0 <EVP_blake2b512@plt>:
    28b0:	adrp	x16, 17000 <PyModule_AddObject>
    28b4:	ldr	x17, [x16, #456]
    28b8:	add	x16, x16, #0x1c8
    28bc:	br	x17

00000000000028c0 <_PyArg_UnpackKeywords@plt>:
    28c0:	adrp	x16, 17000 <PyModule_AddObject>
    28c4:	ldr	x17, [x16, #464]
    28c8:	add	x16, x16, #0x1d0
    28cc:	br	x17

00000000000028d0 <EVP_MD_CTX_free@plt>:
    28d0:	adrp	x16, 17000 <PyModule_AddObject>
    28d4:	ldr	x17, [x16, #472]
    28d8:	add	x16, x16, #0x1d8
    28dc:	br	x17

00000000000028e0 <_Py_Dealloc@plt>:
    28e0:	adrp	x16, 17000 <PyModule_AddObject>
    28e4:	ldr	x17, [x16, #480]
    28e8:	add	x16, x16, #0x1e0
    28ec:	br	x17

00000000000028f0 <PyObject_Free@plt>:
    28f0:	adrp	x16, 17000 <PyModule_AddObject>
    28f4:	ldr	x17, [x16, #488]
    28f8:	add	x16, x16, #0x1e8
    28fc:	br	x17

0000000000002900 <EVP_sha3_224@plt>:
    2900:	adrp	x16, 17000 <PyModule_AddObject>
    2904:	ldr	x17, [x16, #496]
    2908:	add	x16, x16, #0x1f0
    290c:	br	x17

0000000000002910 <PyModule_Create2@plt>:
    2910:	adrp	x16, 17000 <PyModule_AddObject>
    2914:	ldr	x17, [x16, #504]
    2918:	add	x16, x16, #0x1f8
    291c:	br	x17

0000000000002920 <PyErr_SetString@plt>:
    2920:	adrp	x16, 17000 <PyModule_AddObject>
    2924:	ldr	x17, [x16, #512]
    2928:	add	x16, x16, #0x200
    292c:	br	x17

0000000000002930 <OBJ_nid2sn@plt>:
    2930:	adrp	x16, 17000 <PyModule_AddObject>
    2934:	ldr	x17, [x16, #520]
    2938:	add	x16, x16, #0x208
    293c:	br	x17

0000000000002940 <EVP_sha512@plt>:
    2940:	adrp	x16, 17000 <PyModule_AddObject>
    2944:	ldr	x17, [x16, #528]
    2948:	add	x16, x16, #0x210
    294c:	br	x17

0000000000002950 <EVP_sha256@plt>:
    2950:	adrp	x16, 17000 <PyModule_AddObject>
    2954:	ldr	x17, [x16, #536]
    2958:	add	x16, x16, #0x218
    295c:	br	x17

0000000000002960 <EVP_sha512_256@plt>:
    2960:	adrp	x16, 17000 <PyModule_AddObject>
    2964:	ldr	x17, [x16, #544]
    2968:	add	x16, x16, #0x220
    296c:	br	x17

0000000000002970 <PyBuffer_Release@plt>:
    2970:	adrp	x16, 17000 <PyModule_AddObject>
    2974:	ldr	x17, [x16, #552]
    2978:	add	x16, x16, #0x228
    297c:	br	x17

0000000000002980 <strlen@plt>:
    2980:	adrp	x16, 17000 <PyModule_AddObject>
    2984:	ldr	x17, [x16, #560]
    2988:	add	x16, x16, #0x230
    298c:	br	x17

0000000000002990 <ERR_lib_error_string@plt>:
    2990:	adrp	x16, 17000 <PyModule_AddObject>
    2994:	ldr	x17, [x16, #568]
    2998:	add	x16, x16, #0x238
    299c:	br	x17

00000000000029a0 <PyLong_AsUnsignedLong@plt>:
    29a0:	adrp	x16, 17000 <PyModule_AddObject>
    29a4:	ldr	x17, [x16, #576]
    29a8:	add	x16, x16, #0x240
    29ac:	br	x17

00000000000029b0 <_PyArg_BadArgument@plt>:
    29b0:	adrp	x16, 17000 <PyModule_AddObject>
    29b4:	ldr	x17, [x16, #584]
    29b8:	add	x16, x16, #0x248
    29bc:	br	x17

00000000000029c0 <PyThread_acquire_lock@plt>:
    29c0:	adrp	x16, 17000 <PyModule_AddObject>
    29c4:	ldr	x17, [x16, #592]
    29c8:	add	x16, x16, #0x250
    29cc:	br	x17

Disassembly of section .text:

00000000000029d0 <PyInit__hashlib@@Base-0x2708>:
    29d0:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    29d4:	ldr	x0, [x0, #3984]
    29d8:	cbz	x0, 29e0 <PyThread_acquire_lock@plt+0x20>
    29dc:	b	25d0 <__gmon_start__@plt>
    29e0:	ret
    29e4:	nop
    29e8:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x11f28>
    29ec:	add	x0, x0, #0x988
    29f0:	adrp	x1, 17000 <PyInit__hashlib@@Base+0x11f28>
    29f4:	add	x1, x1, #0x988
    29f8:	cmp	x1, x0
    29fc:	b.eq	2a14 <PyThread_acquire_lock@plt+0x54>  // b.none
    2a00:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x10f28>
    2a04:	ldr	x1, [x1, #4008]
    2a08:	cbz	x1, 2a14 <PyThread_acquire_lock@plt+0x54>
    2a0c:	mov	x16, x1
    2a10:	br	x16
    2a14:	ret
    2a18:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x11f28>
    2a1c:	add	x0, x0, #0x988
    2a20:	adrp	x1, 17000 <PyInit__hashlib@@Base+0x11f28>
    2a24:	add	x1, x1, #0x988
    2a28:	sub	x1, x1, x0
    2a2c:	lsr	x2, x1, #63
    2a30:	add	x1, x2, x1, asr #3
    2a34:	cmp	xzr, x1, asr #1
    2a38:	asr	x1, x1, #1
    2a3c:	b.eq	2a54 <PyThread_acquire_lock@plt+0x94>  // b.none
    2a40:	adrp	x2, 16000 <PyInit__hashlib@@Base+0x10f28>
    2a44:	ldr	x2, [x2, #4024]
    2a48:	cbz	x2, 2a54 <PyThread_acquire_lock@plt+0x94>
    2a4c:	mov	x16, x2
    2a50:	br	x16
    2a54:	ret
    2a58:	stp	x29, x30, [sp, #-32]!
    2a5c:	mov	x29, sp
    2a60:	str	x19, [sp, #16]
    2a64:	adrp	x19, 17000 <PyInit__hashlib@@Base+0x11f28>
    2a68:	ldrb	w0, [x19, #2440]
    2a6c:	cbnz	w0, 2a94 <PyThread_acquire_lock@plt+0xd4>
    2a70:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    2a74:	ldr	x0, [x0, #4000]
    2a78:	cbz	x0, 2a88 <PyThread_acquire_lock@plt+0xc8>
    2a7c:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x11f28>
    2a80:	ldr	x0, [x0, #600]
    2a84:	bl	26e0 <__cxa_finalize@plt>
    2a88:	bl	29e8 <PyThread_acquire_lock@plt+0x28>
    2a8c:	mov	w0, #0x1                   	// #1
    2a90:	strb	w0, [x19, #2440]
    2a94:	ldr	x19, [sp, #16]
    2a98:	ldp	x29, x30, [sp], #32
    2a9c:	ret
    2aa0:	b	2a18 <PyThread_acquire_lock@plt+0x58>
    2aa4:	nop
    2aa8:	stp	x29, x30, [sp, #-48]!
    2aac:	mov	x29, sp
    2ab0:	stp	x19, x20, [sp, #16]
    2ab4:	mov	x20, x0
    2ab8:	bl	2840 <ERR_peek_last_error@plt>
    2abc:	cbz	x0, 2b58 <PyThread_acquire_lock@plt+0x198>
    2ac0:	mov	x19, x0
    2ac4:	stp	x21, x22, [sp, #32]
    2ac8:	bl	2610 <ERR_clear_error@plt>
    2acc:	mov	x0, x19
    2ad0:	bl	2990 <ERR_lib_error_string@plt>
    2ad4:	mov	x21, x0
    2ad8:	mov	x0, x19
    2adc:	bl	25e0 <ERR_func_error_string@plt>
    2ae0:	mov	x22, x0
    2ae4:	mov	x0, x19
    2ae8:	bl	2560 <ERR_reason_error_string@plt>
    2aec:	cmp	x21, #0x0
    2af0:	ccmp	x22, #0x0, #0x4, ne  // ne = any
    2af4:	b.ne	2b28 <PyThread_acquire_lock@plt+0x168>  // b.any
    2af8:	cbz	x21, 2b78 <PyThread_acquire_lock@plt+0x1b8>
    2afc:	mov	x3, x0
    2b00:	mov	x2, x21
    2b04:	mov	x0, x20
    2b08:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    2b0c:	add	x1, x1, #0x220
    2b10:	bl	26f0 <PyErr_Format@plt>
    2b14:	mov	x0, #0x0                   	// #0
    2b18:	ldp	x19, x20, [sp, #16]
    2b1c:	ldp	x21, x22, [sp, #32]
    2b20:	ldp	x29, x30, [sp], #48
    2b24:	ret
    2b28:	mov	x4, x0
    2b2c:	mov	x3, x22
    2b30:	mov	x2, x21
    2b34:	mov	x0, x20
    2b38:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    2b3c:	add	x1, x1, #0x210
    2b40:	bl	26f0 <PyErr_Format@plt>
    2b44:	mov	x0, #0x0                   	// #0
    2b48:	ldp	x19, x20, [sp, #16]
    2b4c:	ldp	x21, x22, [sp, #32]
    2b50:	ldp	x29, x30, [sp], #48
    2b54:	ret
    2b58:	mov	x0, x20
    2b5c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    2b60:	add	x1, x1, #0x200
    2b64:	bl	2920 <PyErr_SetString@plt>
    2b68:	mov	x0, #0x0                   	// #0
    2b6c:	ldp	x19, x20, [sp, #16]
    2b70:	ldp	x29, x30, [sp], #48
    2b74:	ret
    2b78:	mov	x1, x0
    2b7c:	mov	x0, x20
    2b80:	bl	2920 <PyErr_SetString@plt>
    2b84:	mov	x0, #0x0                   	// #0
    2b88:	ldp	x19, x20, [sp, #16]
    2b8c:	ldp	x21, x22, [sp, #32]
    2b90:	ldp	x29, x30, [sp], #48
    2b94:	ret
    2b98:	stp	x29, x30, [sp, #-16]!
    2b9c:	mov	x29, sp
    2ba0:	ldr	x0, [x0, #16]
    2ba4:	bl	2590 <EVP_MD_CTX_md@plt>
    2ba8:	bl	2730 <EVP_MD_block_size@plt>
    2bac:	sxtw	x0, w0
    2bb0:	ldp	x29, x30, [sp], #16
    2bb4:	b	2890 <PyLong_FromLong@plt>
    2bb8:	stp	x29, x30, [sp, #-16]!
    2bbc:	mov	x29, sp
    2bc0:	ldr	x0, [x0, #16]
    2bc4:	bl	2590 <EVP_MD_CTX_md@plt>
    2bc8:	bl	26c0 <EVP_MD_size@plt>
    2bcc:	sxtw	x0, w0
    2bd0:	ldp	x29, x30, [sp], #16
    2bd4:	b	2890 <PyLong_FromLong@plt>
    2bd8:	stp	x29, x30, [sp, #-32]!
    2bdc:	mov	x29, sp
    2be0:	str	x19, [sp, #16]
    2be4:	mov	x19, x0
    2be8:	ldr	x0, [x0, #24]
    2bec:	cbz	x0, 2bf4 <PyThread_acquire_lock@plt+0x234>
    2bf0:	bl	2650 <PyThread_free_lock@plt>
    2bf4:	ldr	x0, [x19, #16]
    2bf8:	bl	28d0 <EVP_MD_CTX_free@plt>
    2bfc:	mov	x0, x19
    2c00:	ldr	x19, [sp, #16]
    2c04:	ldp	x29, x30, [sp], #32
    2c08:	b	28f0 <PyObject_Free@plt>
    2c0c:	nop
    2c10:	sub	sp, sp, #0x150
    2c14:	cmp	x3, #0x0
    2c18:	ccmp	x2, #0x3, #0x0, eq  // eq = none
    2c1c:	stp	x29, x30, [sp, #16]
    2c20:	add	x29, sp, #0x10
    2c24:	stp	x19, x20, [sp, #32]
    2c28:	mov	x19, x1
    2c2c:	stp	xzr, xzr, [sp, #176]
    2c30:	stp	xzr, xzr, [sp, #192]
    2c34:	stp	xzr, xzr, [sp, #208]
    2c38:	stp	xzr, xzr, [sp, #224]
    2c3c:	stp	xzr, xzr, [sp, #240]
    2c40:	stp	xzr, xzr, [sp, #256]
    2c44:	stp	xzr, xzr, [sp, #272]
    2c48:	stp	xzr, xzr, [sp, #288]
    2c4c:	stp	xzr, xzr, [sp, #304]
    2c50:	stp	xzr, xzr, [sp, #320]
    2c54:	b.ne	2d74 <PyThread_acquire_lock@plt+0x3b4>  // b.any
    2c58:	cbz	x1, 2d74 <PyThread_acquire_lock@plt+0x3b4>
    2c5c:	ldr	x0, [x19]
    2c60:	add	x20, sp, #0xb0
    2c64:	mov	x1, x20
    2c68:	mov	w2, #0x0                   	// #0
    2c6c:	bl	2750 <PyObject_GetBuffer@plt>
    2c70:	cbnz	w0, 2da8 <PyThread_acquire_lock@plt+0x3e8>
    2c74:	mov	x0, x20
    2c78:	mov	w1, #0x43                  	// #67
    2c7c:	bl	27f0 <PyBuffer_IsContiguous@plt>
    2c80:	cbz	w0, 2de0 <PyThread_acquire_lock@plt+0x420>
    2c84:	ldr	x0, [x19, #8]
    2c88:	add	x20, sp, #0x100
    2c8c:	mov	x1, x20
    2c90:	mov	w2, #0x0                   	// #0
    2c94:	bl	2750 <PyObject_GetBuffer@plt>
    2c98:	cbnz	w0, 2da8 <PyThread_acquire_lock@plt+0x3e8>
    2c9c:	mov	x0, x20
    2ca0:	mov	w1, #0x43                  	// #67
    2ca4:	bl	27f0 <PyBuffer_IsContiguous@plt>
    2ca8:	cbz	w0, 2e50 <PyThread_acquire_lock@plt+0x490>
    2cac:	ldr	x0, [x19, #16]
    2cb0:	ldr	x1, [x0, #8]
    2cb4:	ldr	x1, [x1, #168]
    2cb8:	tbz	w1, #28, 2e28 <PyThread_acquire_lock@plt+0x468>
    2cbc:	add	x1, sp, #0x50
    2cc0:	bl	2670 <PyUnicode_AsUTF8AndSize@plt>
    2cc4:	mov	x19, x0
    2cc8:	cbz	x0, 2da8 <PyThread_acquire_lock@plt+0x3e8>
    2ccc:	bl	2980 <strlen@plt>
    2cd0:	ldr	x1, [sp, #80]
    2cd4:	cmp	x0, x1
    2cd8:	b.ne	2e08 <PyThread_acquire_lock@plt+0x448>  // b.any
    2cdc:	mov	x0, x19
    2ce0:	str	wzr, [sp, #76]
    2ce4:	stp	xzr, xzr, [sp, #112]
    2ce8:	stp	xzr, xzr, [sp, #128]
    2cec:	stp	xzr, xzr, [sp, #144]
    2cf0:	stp	xzr, xzr, [sp, #160]
    2cf4:	bl	2640 <EVP_get_digestbyname@plt>
    2cf8:	mov	x19, x0
    2cfc:	cbz	x0, 2ed0 <PyThread_acquire_lock@plt+0x510>
    2d00:	ldr	x1, [sp, #192]
    2d04:	mov	x0, #0x7fffffff            	// #2147483647
    2d08:	cmp	x1, x0
    2d0c:	b.gt	2e98 <PyThread_acquire_lock@plt+0x4d8>
    2d10:	ldr	x1, [sp, #272]
    2d14:	cmp	x1, x0
    2d18:	b.gt	2e78 <PyThread_acquire_lock@plt+0x4b8>
    2d1c:	str	x21, [sp, #48]
    2d20:	bl	27b0 <PyEval_SaveThread@plt>
    2d24:	ldrsw	x4, [sp, #272]
    2d28:	add	x21, sp, #0x70
    2d2c:	ldr	w2, [sp, #192]
    2d30:	mov	x5, x21
    2d34:	ldr	x1, [sp, #176]
    2d38:	add	x6, sp, #0x4c
    2d3c:	ldr	x3, [sp, #256]
    2d40:	mov	x20, x0
    2d44:	mov	x0, x19
    2d48:	bl	2860 <HMAC@plt>
    2d4c:	mov	x19, x0
    2d50:	mov	x0, x20
    2d54:	bl	2770 <PyEval_RestoreThread@plt>
    2d58:	cbz	x19, 2eb8 <PyThread_acquire_lock@plt+0x4f8>
    2d5c:	ldr	w1, [sp, #76]
    2d60:	mov	x0, x21
    2d64:	bl	2870 <PyBytes_FromStringAndSize@plt>
    2d68:	mov	x19, x0
    2d6c:	ldr	x21, [sp, #48]
    2d70:	b	2dac <PyThread_acquire_lock@plt+0x3ec>
    2d74:	add	x0, sp, #0x58
    2d78:	str	x0, [sp]
    2d7c:	mov	x1, x2
    2d80:	mov	x0, x19
    2d84:	mov	w6, #0x3                   	// #3
    2d88:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    2d8c:	mov	w5, w6
    2d90:	add	x4, x4, #0x260
    2d94:	mov	w7, #0x0                   	// #0
    2d98:	mov	x2, #0x0                   	// #0
    2d9c:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    2da0:	mov	x19, x0
    2da4:	cbnz	x0, 2c5c <PyThread_acquire_lock@plt+0x29c>
    2da8:	mov	x19, #0x0                   	// #0
    2dac:	ldr	x0, [sp, #184]
    2db0:	cbz	x0, 2dbc <PyThread_acquire_lock@plt+0x3fc>
    2db4:	add	x0, sp, #0xb0
    2db8:	bl	2970 <PyBuffer_Release@plt>
    2dbc:	ldr	x0, [sp, #264]
    2dc0:	cbz	x0, 2dcc <PyThread_acquire_lock@plt+0x40c>
    2dc4:	add	x0, sp, #0x100
    2dc8:	bl	2970 <PyBuffer_Release@plt>
    2dcc:	mov	x0, x19
    2dd0:	ldp	x29, x30, [sp, #16]
    2dd4:	ldp	x19, x20, [sp, #32]
    2dd8:	add	sp, sp, #0x150
    2ddc:	ret
    2de0:	ldr	x3, [x19]
    2de4:	adrp	x2, 5000 <PyThread_acquire_lock@plt+0x2640>
    2de8:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    2dec:	add	x2, x2, #0x228
    2df0:	add	x1, x1, #0x240
    2df4:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    2df8:	mov	x19, #0x0                   	// #0
    2dfc:	add	x0, x0, #0x250
    2e00:	bl	29b0 <_PyArg_BadArgument@plt>
    2e04:	b	2dac <PyThread_acquire_lock@plt+0x3ec>
    2e08:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    2e0c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    2e10:	mov	x19, #0x0                   	// #0
    2e14:	add	x1, x1, #0x290
    2e18:	ldr	x0, [x0, #3976]
    2e1c:	ldr	x0, [x0]
    2e20:	bl	2920 <PyErr_SetString@plt>
    2e24:	b	2dac <PyThread_acquire_lock@plt+0x3ec>
    2e28:	mov	x3, x0
    2e2c:	adrp	x2, 5000 <PyThread_acquire_lock@plt+0x2640>
    2e30:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    2e34:	add	x2, x2, #0x270
    2e38:	add	x1, x1, #0x278
    2e3c:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    2e40:	mov	x19, #0x0                   	// #0
    2e44:	add	x0, x0, #0x250
    2e48:	bl	29b0 <_PyArg_BadArgument@plt>
    2e4c:	b	2dac <PyThread_acquire_lock@plt+0x3ec>
    2e50:	ldr	x3, [x19, #8]
    2e54:	adrp	x2, 5000 <PyThread_acquire_lock@plt+0x2640>
    2e58:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    2e5c:	add	x2, x2, #0x228
    2e60:	add	x1, x1, #0x260
    2e64:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    2e68:	mov	x19, #0x0                   	// #0
    2e6c:	add	x0, x0, #0x250
    2e70:	bl	29b0 <_PyArg_BadArgument@plt>
    2e74:	b	2dac <PyThread_acquire_lock@plt+0x3ec>
    2e78:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    2e7c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    2e80:	mov	x19, #0x0                   	// #0
    2e84:	add	x1, x1, #0x2d8
    2e88:	ldr	x0, [x0, #4056]
    2e8c:	ldr	x0, [x0]
    2e90:	bl	2920 <PyErr_SetString@plt>
    2e94:	b	2dac <PyThread_acquire_lock@plt+0x3ec>
    2e98:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    2e9c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    2ea0:	mov	x19, #0x0                   	// #0
    2ea4:	add	x1, x1, #0x2c0
    2ea8:	ldr	x0, [x0, #4056]
    2eac:	ldr	x0, [x0]
    2eb0:	bl	2920 <PyErr_SetString@plt>
    2eb4:	b	2dac <PyThread_acquire_lock@plt+0x3ec>
    2eb8:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    2ebc:	ldr	x0, [x0, #3976]
    2ec0:	ldr	x0, [x0]
    2ec4:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    2ec8:	ldr	x21, [sp, #48]
    2ecc:	b	2dac <PyThread_acquire_lock@plt+0x3ec>
    2ed0:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    2ed4:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    2ed8:	add	x1, x1, #0x2a8
    2edc:	ldr	x0, [x0, #3976]
    2ee0:	ldr	x0, [x0]
    2ee4:	bl	2920 <PyErr_SetString@plt>
    2ee8:	b	2dac <PyThread_acquire_lock@plt+0x3ec>
    2eec:	nop
    2ef0:	sub	sp, sp, #0x140
    2ef4:	stp	x29, x30, [sp, #16]
    2ef8:	add	x29, sp, #0x10
    2efc:	stp	x19, x20, [sp, #32]
    2f00:	mov	x19, x1
    2f04:	mov	x1, x2
    2f08:	stp	x21, x22, [sp, #48]
    2f0c:	cbz	x3, 30f4 <PyThread_acquire_lock@plt+0x734>
    2f10:	ldr	x0, [x3, #16]
    2f14:	stp	xzr, xzr, [sp, #160]
    2f18:	add	x22, x2, x0
    2f1c:	stp	xzr, xzr, [sp, #176]
    2f20:	sub	x21, x22, #0x1
    2f24:	stp	xzr, xzr, [sp, #192]
    2f28:	stp	xzr, xzr, [sp, #208]
    2f2c:	stp	xzr, xzr, [sp, #224]
    2f30:	stp	xzr, xzr, [sp, #240]
    2f34:	stp	xzr, xzr, [sp, #256]
    2f38:	stp	xzr, xzr, [sp, #272]
    2f3c:	stp	xzr, xzr, [sp, #288]
    2f40:	stp	xzr, xzr, [sp, #304]
    2f44:	add	x0, sp, #0x68
    2f48:	str	x0, [sp]
    2f4c:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    2f50:	add	x4, x4, #0x260
    2f54:	mov	x0, x19
    2f58:	mov	w6, #0x1                   	// #1
    2f5c:	add	x4, x4, #0x40
    2f60:	mov	w5, w6
    2f64:	mov	w7, #0x0                   	// #0
    2f68:	mov	x2, #0x0                   	// #0
    2f6c:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    2f70:	mov	x19, x0
    2f74:	cbz	x0, 30b8 <PyThread_acquire_lock@plt+0x6f8>
    2f78:	ldr	x0, [x19]
    2f7c:	add	x20, sp, #0xa0
    2f80:	mov	x1, x20
    2f84:	mov	w2, #0x0                   	// #0
    2f88:	bl	2750 <PyObject_GetBuffer@plt>
    2f8c:	cbnz	w0, 30b8 <PyThread_acquire_lock@plt+0x6f8>
    2f90:	mov	x0, x20
    2f94:	mov	w1, #0x43                  	// #67
    2f98:	bl	27f0 <PyBuffer_IsContiguous@plt>
    2f9c:	cbz	w0, 32ec <PyThread_acquire_lock@plt+0x92c>
    2fa0:	stp	x23, x24, [sp, #64]
    2fa4:	str	x25, [sp, #80]
    2fa8:	cbz	x21, 3134 <PyThread_acquire_lock@plt+0x774>
    2fac:	ldr	x0, [x19, #8]
    2fb0:	cbz	x0, 2fe0 <PyThread_acquire_lock@plt+0x620>
    2fb4:	add	x20, sp, #0xf0
    2fb8:	mov	w2, #0x0                   	// #0
    2fbc:	mov	x1, x20
    2fc0:	bl	2750 <PyObject_GetBuffer@plt>
    2fc4:	cbnz	w0, 30b0 <PyThread_acquire_lock@plt+0x6f0>
    2fc8:	mov	x0, x20
    2fcc:	mov	w1, #0x43                  	// #67
    2fd0:	bl	27f0 <PyBuffer_IsContiguous@plt>
    2fd4:	cbz	w0, 34a4 <PyThread_acquire_lock@plt+0xae4>
    2fd8:	subs	x21, x22, #0x2
    2fdc:	b.eq	3134 <PyThread_acquire_lock@plt+0x774>  // b.none
    2fe0:	ldr	x22, [x19, #16]
    2fe4:	cbz	x22, 326c <PyThread_acquire_lock@plt+0x8ac>
    2fe8:	ldr	x0, [x22, #8]
    2fec:	ldr	x0, [x0, #168]
    2ff0:	tbz	w0, #24, 340c <PyThread_acquire_lock@plt+0xa4c>
    2ff4:	subs	x21, x21, #0x1
    2ff8:	b.eq	3314 <PyThread_acquire_lock@plt+0x954>  // b.none
    2ffc:	ldr	x25, [x19, #24]
    3000:	cbz	x25, 3328 <PyThread_acquire_lock@plt+0x968>
    3004:	ldr	x0, [x25, #8]
    3008:	ldr	x0, [x0, #168]
    300c:	tbz	w0, #24, 34bc <PyThread_acquire_lock@plt+0xafc>
    3010:	subs	x21, x21, #0x1
    3014:	b.eq	337c <PyThread_acquire_lock@plt+0x9bc>  // b.none
    3018:	ldr	x20, [x19, #32]
    301c:	cbz	x20, 3370 <PyThread_acquire_lock@plt+0x9b0>
    3020:	ldr	x0, [x20, #8]
    3024:	ldr	x0, [x0, #168]
    3028:	tbz	w0, #24, 34d4 <PyThread_acquire_lock@plt+0xb14>
    302c:	subs	x21, x21, #0x1
    3030:	b.eq	33a0 <PyThread_acquire_lock@plt+0x9e0>  // b.none
    3034:	ldr	x0, [x19, #40]
    3038:	cbz	x0, 33c4 <PyThread_acquire_lock@plt+0xa04>
    303c:	adrp	x24, 16000 <PyInit__hashlib@@Base+0x10f28>
    3040:	ldr	x0, [x0, #8]
    3044:	ldr	x1, [x24, #4032]
    3048:	cmp	x0, x1
    304c:	b.eq	3334 <PyThread_acquire_lock@plt+0x974>  // b.none
    3050:	bl	2800 <PyType_IsSubtype@plt>
    3054:	cbnz	w0, 3334 <PyThread_acquire_lock@plt+0x974>
    3058:	ldr	x0, [x19, #40]
    305c:	bl	26d0 <PyLong_AsLong@plt>
    3060:	mov	x23, x0
    3064:	cmn	x0, #0x1
    3068:	b.eq	34ec <PyThread_acquire_lock@plt+0xb2c>  // b.none
    306c:	cmp	x21, #0x1
    3070:	mov	x21, x23
    3074:	b.eq	33a0 <PyThread_acquire_lock@plt+0x9e0>  // b.none
    3078:	ldr	x0, [x19, #48]
    307c:	ldr	x1, [x24, #4032]
    3080:	ldr	x0, [x0, #8]
    3084:	cmp	x0, x1
    3088:	b.eq	3334 <PyThread_acquire_lock@plt+0x974>  // b.none
    308c:	bl	2800 <PyType_IsSubtype@plt>
    3090:	cbnz	w0, 3334 <PyThread_acquire_lock@plt+0x974>
    3094:	ldr	x0, [x19, #48]
    3098:	bl	26d0 <PyLong_AsLong@plt>
    309c:	mov	x23, x0
    30a0:	cmn	x0, #0x1
    30a4:	b.ne	314c <PyThread_acquire_lock@plt+0x78c>  // b.any
    30a8:	bl	2720 <PyErr_Occurred@plt>
    30ac:	cbz	x0, 314c <PyThread_acquire_lock@plt+0x78c>
    30b0:	ldp	x23, x24, [sp, #64]
    30b4:	ldr	x25, [sp, #80]
    30b8:	mov	x19, #0x0                   	// #0
    30bc:	ldr	x0, [sp, #168]
    30c0:	cbz	x0, 30cc <PyThread_acquire_lock@plt+0x70c>
    30c4:	add	x0, sp, #0xa0
    30c8:	bl	2970 <PyBuffer_Release@plt>
    30cc:	ldr	x0, [sp, #248]
    30d0:	cbz	x0, 30dc <PyThread_acquire_lock@plt+0x71c>
    30d4:	add	x0, sp, #0xf0
    30d8:	bl	2970 <PyBuffer_Release@plt>
    30dc:	mov	x0, x19
    30e0:	ldp	x29, x30, [sp, #16]
    30e4:	ldp	x19, x20, [sp, #32]
    30e8:	ldp	x21, x22, [sp, #48]
    30ec:	add	sp, sp, #0x140
    30f0:	ret
    30f4:	stp	xzr, xzr, [sp, #160]
    30f8:	mov	x22, x2
    30fc:	subs	x21, x2, #0x1
    3100:	stp	xzr, xzr, [sp, #176]
    3104:	stp	xzr, xzr, [sp, #192]
    3108:	stp	xzr, xzr, [sp, #208]
    310c:	stp	xzr, xzr, [sp, #224]
    3110:	stp	xzr, xzr, [sp, #240]
    3114:	stp	xzr, xzr, [sp, #256]
    3118:	stp	xzr, xzr, [sp, #272]
    311c:	stp	xzr, xzr, [sp, #288]
    3120:	stp	xzr, xzr, [sp, #304]
    3124:	b.ne	2f44 <PyThread_acquire_lock@plt+0x584>  // b.any
    3128:	mov	x21, #0x0                   	// #0
    312c:	cbnz	x19, 2f78 <PyThread_acquire_lock@plt+0x5b8>
    3130:	b	2f44 <PyThread_acquire_lock@plt+0x584>
    3134:	adrp	x20, 16000 <PyInit__hashlib@@Base+0x10f28>
    3138:	mov	x23, #0x40                  	// #64
    313c:	mov	x21, #0x0                   	// #0
    3140:	ldr	x20, [x20, #4048]
    3144:	mov	x25, x20
    3148:	mov	x22, x20
    314c:	ldr	x0, [sp, #176]
    3150:	mov	x1, #0x7fffffff            	// #2147483647
    3154:	cmp	x0, x1
    3158:	b.gt	338c <PyThread_acquire_lock@plt+0x9cc>
    315c:	ldr	x19, [sp, #240]
    3160:	cbz	x19, 343c <PyThread_acquire_lock@plt+0xa7c>
    3164:	ldr	x0, [sp, #256]
    3168:	cmp	x0, x1
    316c:	b.gt	32c4 <PyThread_acquire_lock@plt+0x904>
    3170:	mov	x0, x22
    3174:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    3178:	mov	x22, x0
    317c:	cmn	x0, #0x1
    3180:	b.eq	3278 <PyThread_acquire_lock@plt+0x8b8>  // b.none
    3184:	cmp	x0, #0x1
    3188:	b.ls	3280 <PyThread_acquire_lock@plt+0x8c0>  // b.plast
    318c:	sub	x0, x0, #0x1
    3190:	tst	x0, x22
    3194:	b.ne	3280 <PyThread_acquire_lock@plt+0x8c0>  // b.any
    3198:	mov	x0, x25
    319c:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    31a0:	mov	x24, x0
    31a4:	cmn	x0, #0x1
    31a8:	b.eq	32a8 <PyThread_acquire_lock@plt+0x8e8>  // b.none
    31ac:	mov	x0, x20
    31b0:	bl	29a0 <PyLong_AsUnsignedLong@plt>
    31b4:	mov	x20, x0
    31b8:	cmn	x0, #0x1
    31bc:	b.eq	33a8 <PyThread_acquire_lock@plt+0x9e8>  // b.none
    31c0:	mov	x2, #0x7fffffff            	// #2147483647
    31c4:	cmp	x21, x2
    31c8:	b.hi	344c <PyThread_acquire_lock@plt+0xa8c>  // b.pmore
    31cc:	sub	x1, x23, #0x1
    31d0:	mov	x0, #0x7ffffffe            	// #2147483646
    31d4:	cmp	x1, x0
    31d8:	b.hi	33d0 <PyThread_acquire_lock@plt+0xa10>  // b.pmore
    31dc:	stp	xzr, xzr, [sp]
    31e0:	mov	x7, x21
    31e4:	mov	x6, x20
    31e8:	mov	x5, x24
    31ec:	mov	x4, x22
    31f0:	mov	x3, #0x0                   	// #0
    31f4:	mov	x2, #0x0                   	// #0
    31f8:	mov	x1, #0x0                   	// #0
    31fc:	mov	x0, #0x0                   	// #0
    3200:	bl	2830 <EVP_PBE_scrypt@plt>
    3204:	cbz	w0, 33f8 <PyThread_acquire_lock@plt+0xa38>
    3208:	mov	x1, x23
    320c:	mov	x0, #0x0                   	// #0
    3210:	bl	2870 <PyBytes_FromStringAndSize@plt>
    3214:	mov	x19, x0
    3218:	cbz	x0, 30b0 <PyThread_acquire_lock@plt+0x6f0>
    321c:	bl	27b0 <PyEval_SaveThread@plt>
    3220:	mov	x7, x21
    3224:	mov	x21, x0
    3228:	ldr	x0, [sp, #160]
    322c:	add	x9, x19, #0x20
    3230:	ldr	x1, [sp, #176]
    3234:	mov	x6, x20
    3238:	ldr	x2, [sp, #240]
    323c:	mov	x5, x24
    3240:	ldr	x3, [sp, #256]
    3244:	mov	x4, x22
    3248:	stp	x9, x23, [sp]
    324c:	bl	2830 <EVP_PBE_scrypt@plt>
    3250:	mov	w20, w0
    3254:	mov	x0, x21
    3258:	bl	2770 <PyEval_RestoreThread@plt>
    325c:	cbz	w20, 3474 <PyThread_acquire_lock@plt+0xab4>
    3260:	ldp	x23, x24, [sp, #64]
    3264:	ldr	x25, [sp, #80]
    3268:	b	30bc <PyThread_acquire_lock@plt+0x6fc>
    326c:	adrp	x22, 16000 <PyInit__hashlib@@Base+0x10f28>
    3270:	ldr	x22, [x22, #4048]
    3274:	b	2ffc <PyThread_acquire_lock@plt+0x63c>
    3278:	bl	2720 <PyErr_Occurred@plt>
    327c:	cbnz	x0, 335c <PyThread_acquire_lock@plt+0x99c>
    3280:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3284:	add	x1, x1, #0x3c8
    3288:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    328c:	mov	x19, #0x0                   	// #0
    3290:	ldr	x0, [x0, #3976]
    3294:	ldr	x0, [x0]
    3298:	bl	2920 <PyErr_SetString@plt>
    329c:	ldp	x23, x24, [sp, #64]
    32a0:	ldr	x25, [sp, #80]
    32a4:	b	30bc <PyThread_acquire_lock@plt+0x6fc>
    32a8:	bl	2720 <PyErr_Occurred@plt>
    32ac:	cbz	x0, 31ac <PyThread_acquire_lock@plt+0x7ec>
    32b0:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    32b4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    32b8:	add	x1, x1, #0x410
    32bc:	mov	x19, #0x0                   	// #0
    32c0:	b	3344 <PyThread_acquire_lock@plt+0x984>
    32c4:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    32c8:	add	x1, x1, #0x3b0
    32cc:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    32d0:	mov	x19, #0x0                   	// #0
    32d4:	ldr	x0, [x0, #4056]
    32d8:	ldr	x0, [x0]
    32dc:	bl	2920 <PyErr_SetString@plt>
    32e0:	ldp	x23, x24, [sp, #64]
    32e4:	ldr	x25, [sp, #80]
    32e8:	b	30bc <PyThread_acquire_lock@plt+0x6fc>
    32ec:	ldr	x3, [x19]
    32f0:	adrp	x2, 5000 <PyThread_acquire_lock@plt+0x2640>
    32f4:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    32f8:	add	x2, x2, #0x228
    32fc:	add	x1, x1, #0x2f0
    3300:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3304:	mov	x19, #0x0                   	// #0
    3308:	add	x0, x0, #0x308
    330c:	bl	29b0 <_PyArg_BadArgument@plt>
    3310:	b	30bc <PyThread_acquire_lock@plt+0x6fc>
    3314:	adrp	x20, 16000 <PyInit__hashlib@@Base+0x10f28>
    3318:	mov	x23, #0x40                  	// #64
    331c:	ldr	x20, [x20, #4048]
    3320:	mov	x25, x20
    3324:	b	314c <PyThread_acquire_lock@plt+0x78c>
    3328:	adrp	x25, 16000 <PyInit__hashlib@@Base+0x10f28>
    332c:	ldr	x25, [x25, #4048]
    3330:	b	3018 <PyThread_acquire_lock@plt+0x658>
    3334:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3338:	add	x1, x1, #0x358
    333c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3340:	mov	x19, #0x0                   	// #0
    3344:	ldr	x0, [x0, #3992]
    3348:	ldr	x0, [x0]
    334c:	bl	2920 <PyErr_SetString@plt>
    3350:	ldp	x23, x24, [sp, #64]
    3354:	ldr	x25, [sp, #80]
    3358:	b	30bc <PyThread_acquire_lock@plt+0x6fc>
    335c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3360:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3364:	add	x1, x1, #0x3e0
    3368:	mov	x19, #0x0                   	// #0
    336c:	b	3344 <PyThread_acquire_lock@plt+0x984>
    3370:	adrp	x20, 16000 <PyInit__hashlib@@Base+0x10f28>
    3374:	ldr	x20, [x20, #4048]
    3378:	b	3034 <PyThread_acquire_lock@plt+0x674>
    337c:	adrp	x20, 16000 <PyInit__hashlib@@Base+0x10f28>
    3380:	mov	x23, #0x40                  	// #64
    3384:	ldr	x20, [x20, #4048]
    3388:	b	314c <PyThread_acquire_lock@plt+0x78c>
    338c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3390:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3394:	add	x1, x1, #0x380
    3398:	mov	x19, #0x0                   	// #0
    339c:	b	32d4 <PyThread_acquire_lock@plt+0x914>
    33a0:	mov	x23, #0x40                  	// #64
    33a4:	b	314c <PyThread_acquire_lock@plt+0x78c>
    33a8:	bl	2720 <PyErr_Occurred@plt>
    33ac:	cbz	x0, 31c0 <PyThread_acquire_lock@plt+0x800>
    33b0:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    33b4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    33b8:	add	x1, x1, #0x440
    33bc:	mov	x19, #0x0                   	// #0
    33c0:	b	3344 <PyThread_acquire_lock@plt+0x984>
    33c4:	mov	x21, #0x0                   	// #0
    33c8:	adrp	x24, 16000 <PyInit__hashlib@@Base+0x10f28>
    33cc:	b	3078 <PyThread_acquire_lock@plt+0x6b8>
    33d0:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    33d4:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    33d8:	mov	x19, #0x0                   	// #0
    33dc:	add	x1, x1, #0x4a0
    33e0:	ldr	x0, [x0, #3976]
    33e4:	ldr	x0, [x0]
    33e8:	bl	26f0 <PyErr_Format@plt>
    33ec:	ldp	x23, x24, [sp, #64]
    33f0:	ldr	x25, [sp, #80]
    33f4:	b	30bc <PyThread_acquire_lock@plt+0x6fc>
    33f8:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    33fc:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3400:	add	x1, x1, #0x4d8
    3404:	mov	x19, #0x0                   	// #0
    3408:	b	3290 <PyThread_acquire_lock@plt+0x8d0>
    340c:	adrp	x2, 5000 <PyThread_acquire_lock@plt+0x2640>
    3410:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3414:	mov	x3, x22
    3418:	add	x2, x2, #0x320
    341c:	add	x1, x1, #0x328
    3420:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3424:	mov	x19, #0x0                   	// #0
    3428:	add	x0, x0, #0x308
    342c:	bl	29b0 <_PyArg_BadArgument@plt>
    3430:	ldp	x23, x24, [sp, #64]
    3434:	ldr	x25, [sp, #80]
    3438:	b	30bc <PyThread_acquire_lock@plt+0x6fc>
    343c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3440:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3444:	add	x1, x1, #0x398
    3448:	b	3344 <PyThread_acquire_lock@plt+0x984>
    344c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3450:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3454:	mov	x19, #0x0                   	// #0
    3458:	add	x1, x1, #0x470
    345c:	ldr	x0, [x0, #3976]
    3460:	ldr	x0, [x0]
    3464:	bl	26f0 <PyErr_Format@plt>
    3468:	ldp	x23, x24, [sp, #64]
    346c:	ldr	x25, [sp, #80]
    3470:	b	30bc <PyThread_acquire_lock@plt+0x6fc>
    3474:	ldr	x0, [x19]
    3478:	sub	x0, x0, #0x1
    347c:	str	x0, [x19]
    3480:	cbz	x0, 34f8 <PyThread_acquire_lock@plt+0xb38>
    3484:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3488:	mov	x19, #0x0                   	// #0
    348c:	ldr	x0, [x0, #3976]
    3490:	ldr	x0, [x0]
    3494:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    3498:	ldp	x23, x24, [sp, #64]
    349c:	ldr	x25, [sp, #80]
    34a0:	b	30bc <PyThread_acquire_lock@plt+0x6fc>
    34a4:	adrp	x2, 5000 <PyThread_acquire_lock@plt+0x2640>
    34a8:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    34ac:	add	x2, x2, #0x228
    34b0:	add	x1, x1, #0x310
    34b4:	ldr	x3, [x19, #8]
    34b8:	b	3420 <PyThread_acquire_lock@plt+0xa60>
    34bc:	adrp	x2, 5000 <PyThread_acquire_lock@plt+0x2640>
    34c0:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    34c4:	mov	x3, x25
    34c8:	add	x2, x2, #0x320
    34cc:	add	x1, x1, #0x338
    34d0:	b	3420 <PyThread_acquire_lock@plt+0xa60>
    34d4:	adrp	x2, 5000 <PyThread_acquire_lock@plt+0x2640>
    34d8:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    34dc:	mov	x3, x20
    34e0:	add	x2, x2, #0x320
    34e4:	add	x1, x1, #0x348
    34e8:	b	3420 <PyThread_acquire_lock@plt+0xa60>
    34ec:	bl	2720 <PyErr_Occurred@plt>
    34f0:	cbz	x0, 306c <PyThread_acquire_lock@plt+0x6ac>
    34f4:	b	30b0 <PyThread_acquire_lock@plt+0x6f0>
    34f8:	mov	x0, x19
    34fc:	bl	28e0 <_Py_Dealloc@plt>
    3500:	b	3484 <PyThread_acquire_lock@plt+0xac4>
    3504:	nop
    3508:	sub	sp, sp, #0x120
    350c:	stp	x29, x30, [sp, #16]
    3510:	add	x29, sp, #0x10
    3514:	stp	x19, x20, [sp, #32]
    3518:	mov	x19, x1
    351c:	mov	x1, x2
    3520:	cbz	x3, 371c <PyThread_acquire_lock@plt+0xd5c>
    3524:	ldr	x20, [x3, #16]
    3528:	stp	xzr, xzr, [sp, #128]
    352c:	add	x20, x2, x20
    3530:	stp	xzr, xzr, [sp, #144]
    3534:	stp	xzr, xzr, [sp, #160]
    3538:	stp	xzr, xzr, [sp, #176]
    353c:	stp	xzr, xzr, [sp, #192]
    3540:	stp	xzr, xzr, [sp, #208]
    3544:	stp	xzr, xzr, [sp, #224]
    3548:	stp	xzr, xzr, [sp, #240]
    354c:	stp	xzr, xzr, [sp, #256]
    3550:	stp	xzr, xzr, [sp, #272]
    3554:	add	x0, sp, #0x58
    3558:	str	x0, [sp]
    355c:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    3560:	add	x4, x4, #0x260
    3564:	mov	x0, x19
    3568:	add	x4, x4, #0x80
    356c:	mov	w7, #0x0                   	// #0
    3570:	mov	w6, #0x5                   	// #5
    3574:	mov	w5, #0x4                   	// #4
    3578:	mov	x2, #0x0                   	// #0
    357c:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    3580:	mov	x19, x0
    3584:	cbz	x0, 37f0 <PyThread_acquire_lock@plt+0xe30>
    3588:	ldr	x0, [x19]
    358c:	ldr	x1, [x0, #8]
    3590:	ldr	x1, [x1, #168]
    3594:	tbz	w1, #28, 3768 <PyThread_acquire_lock@plt+0xda8>
    3598:	add	x1, sp, #0x50
    359c:	stp	x21, x22, [sp, #48]
    35a0:	bl	2670 <PyUnicode_AsUTF8AndSize@plt>
    35a4:	mov	x22, x0
    35a8:	cbz	x0, 3800 <PyThread_acquire_lock@plt+0xe40>
    35ac:	bl	2980 <strlen@plt>
    35b0:	ldr	x1, [sp, #80]
    35b4:	cmp	x0, x1
    35b8:	b.ne	3790 <PyThread_acquire_lock@plt+0xdd0>  // b.any
    35bc:	ldr	x0, [x19, #8]
    35c0:	add	x21, sp, #0x80
    35c4:	mov	x1, x21
    35c8:	mov	w2, #0x0                   	// #0
    35cc:	bl	2750 <PyObject_GetBuffer@plt>
    35d0:	cbnz	w0, 3800 <PyThread_acquire_lock@plt+0xe40>
    35d4:	mov	x0, x21
    35d8:	mov	w1, #0x43                  	// #67
    35dc:	bl	27f0 <PyBuffer_IsContiguous@plt>
    35e0:	cbz	w0, 3830 <PyThread_acquire_lock@plt+0xe70>
    35e4:	ldr	x0, [x19, #16]
    35e8:	add	x21, sp, #0xd0
    35ec:	mov	x1, x21
    35f0:	mov	w2, #0x0                   	// #0
    35f4:	bl	2750 <PyObject_GetBuffer@plt>
    35f8:	cbnz	w0, 3800 <PyThread_acquire_lock@plt+0xe40>
    35fc:	mov	x0, x21
    3600:	mov	w1, #0x43                  	// #67
    3604:	bl	27f0 <PyBuffer_IsContiguous@plt>
    3608:	cbz	w0, 385c <PyThread_acquire_lock@plt+0xe9c>
    360c:	ldr	x0, [x19, #24]
    3610:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x10f28>
    3614:	ldr	x1, [x1, #4032]
    3618:	ldr	x0, [x0, #8]
    361c:	cmp	x0, x1
    3620:	b.eq	380c <PyThread_acquire_lock@plt+0xe4c>  // b.none
    3624:	bl	2800 <PyType_IsSubtype@plt>
    3628:	cbnz	w0, 380c <PyThread_acquire_lock@plt+0xe4c>
    362c:	ldr	x0, [x19, #24]
    3630:	bl	26d0 <PyLong_AsLong@plt>
    3634:	mov	x21, x0
    3638:	cmn	x0, #0x1
    363c:	b.eq	37f8 <PyThread_acquire_lock@plt+0xe38>  // b.none
    3640:	str	x23, [sp, #64]
    3644:	cmp	x20, #0x4
    3648:	b.eq	38a4 <PyThread_acquire_lock@plt+0xee4>  // b.none
    364c:	ldr	x23, [x19, #32]
    3650:	mov	x0, x22
    3654:	bl	2640 <EVP_get_digestbyname@plt>
    3658:	mov	x20, x0
    365c:	cbz	x0, 396c <PyThread_acquire_lock@plt+0xfac>
    3660:	ldr	x1, [sp, #144]
    3664:	mov	x19, #0x7fffffff            	// #2147483647
    3668:	cmp	x1, x19
    366c:	b.gt	38ec <PyThread_acquire_lock@plt+0xf2c>
    3670:	ldr	x1, [sp, #224]
    3674:	cmp	x1, x19
    3678:	b.gt	3900 <PyThread_acquire_lock@plt+0xf40>
    367c:	cmp	x21, #0x0
    3680:	b.le	3958 <PyThread_acquire_lock@plt+0xf98>
    3684:	cmp	x21, x19
    3688:	b.gt	3944 <PyThread_acquire_lock@plt+0xf84>
    368c:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x10f28>
    3690:	ldr	x1, [x1, #4048]
    3694:	cmp	x23, x1
    3698:	b.eq	38b0 <PyThread_acquire_lock@plt+0xef0>  // b.none
    369c:	mov	x0, x23
    36a0:	bl	26d0 <PyLong_AsLong@plt>
    36a4:	mov	x22, x0
    36a8:	cmn	x0, #0x1
    36ac:	b.eq	3874 <PyThread_acquire_lock@plt+0xeb4>  // b.none
    36b0:	cmp	x0, #0x0
    36b4:	b.le	387c <PyThread_acquire_lock@plt+0xebc>
    36b8:	cmp	x0, x19
    36bc:	b.gt	38c4 <PyThread_acquire_lock@plt+0xf04>
    36c0:	mov	x1, x22
    36c4:	mov	x0, #0x0                   	// #0
    36c8:	bl	2870 <PyBytes_FromStringAndSize@plt>
    36cc:	mov	x19, x0
    36d0:	cbz	x0, 37e4 <PyThread_acquire_lock@plt+0xe24>
    36d4:	bl	27b0 <PyEval_SaveThread@plt>
    36d8:	mov	w4, w21
    36dc:	ldr	w1, [sp, #144]
    36e0:	mov	x21, x0
    36e4:	ldr	w3, [sp, #224]
    36e8:	ldr	x0, [sp, #128]
    36ec:	mov	x5, x20
    36f0:	ldr	x2, [sp, #208]
    36f4:	mov	w6, w22
    36f8:	add	x7, x19, #0x20
    36fc:	bl	2540 <PKCS5_PBKDF2_HMAC@plt>
    3700:	mov	w20, w0
    3704:	mov	x0, x21
    3708:	bl	2770 <PyEval_RestoreThread@plt>
    370c:	cbz	w20, 3914 <PyThread_acquire_lock@plt+0xf54>
    3710:	ldp	x21, x22, [sp, #48]
    3714:	ldr	x23, [sp, #64]
    3718:	b	37b0 <PyThread_acquire_lock@plt+0xdf0>
    371c:	stp	xzr, xzr, [sp, #128]
    3720:	sub	x0, x2, #0x4
    3724:	mov	x20, x2
    3728:	stp	xzr, xzr, [sp, #144]
    372c:	cmp	x0, #0x1
    3730:	stp	xzr, xzr, [sp, #160]
    3734:	stp	xzr, xzr, [sp, #176]
    3738:	stp	xzr, xzr, [sp, #192]
    373c:	stp	xzr, xzr, [sp, #208]
    3740:	stp	xzr, xzr, [sp, #224]
    3744:	stp	xzr, xzr, [sp, #240]
    3748:	stp	xzr, xzr, [sp, #256]
    374c:	stp	xzr, xzr, [sp, #272]
    3750:	b.hi	3554 <PyThread_acquire_lock@plt+0xb94>  // b.pmore
    3754:	cbz	x19, 3554 <PyThread_acquire_lock@plt+0xb94>
    3758:	ldr	x0, [x19]
    375c:	ldr	x1, [x0, #8]
    3760:	ldr	x1, [x1, #168]
    3764:	tbnz	w1, #28, 3598 <PyThread_acquire_lock@plt+0xbd8>
    3768:	mov	x3, x0
    376c:	adrp	x2, 5000 <PyThread_acquire_lock@plt+0x2640>
    3770:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3774:	add	x2, x2, #0x270
    3778:	add	x1, x1, #0x510
    377c:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3780:	mov	x19, #0x0                   	// #0
    3784:	add	x0, x0, #0x528
    3788:	bl	29b0 <_PyArg_BadArgument@plt>
    378c:	b	37b0 <PyThread_acquire_lock@plt+0xdf0>
    3790:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3794:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3798:	add	x1, x1, #0x290
    379c:	mov	x19, #0x0                   	// #0
    37a0:	ldr	x0, [x0, #3976]
    37a4:	ldr	x0, [x0]
    37a8:	bl	2920 <PyErr_SetString@plt>
    37ac:	ldp	x21, x22, [sp, #48]
    37b0:	ldr	x0, [sp, #136]
    37b4:	cbz	x0, 37c0 <PyThread_acquire_lock@plt+0xe00>
    37b8:	add	x0, sp, #0x80
    37bc:	bl	2970 <PyBuffer_Release@plt>
    37c0:	ldr	x0, [sp, #216]
    37c4:	cbz	x0, 37d0 <PyThread_acquire_lock@plt+0xe10>
    37c8:	add	x0, sp, #0xd0
    37cc:	bl	2970 <PyBuffer_Release@plt>
    37d0:	mov	x0, x19
    37d4:	ldp	x29, x30, [sp, #16]
    37d8:	ldp	x19, x20, [sp, #32]
    37dc:	add	sp, sp, #0x120
    37e0:	ret
    37e4:	ldp	x21, x22, [sp, #48]
    37e8:	ldr	x23, [sp, #64]
    37ec:	nop
    37f0:	mov	x19, #0x0                   	// #0
    37f4:	b	37b0 <PyThread_acquire_lock@plt+0xdf0>
    37f8:	bl	2720 <PyErr_Occurred@plt>
    37fc:	cbz	x0, 3640 <PyThread_acquire_lock@plt+0xc80>
    3800:	mov	x19, #0x0                   	// #0
    3804:	ldp	x21, x22, [sp, #48]
    3808:	b	37b0 <PyThread_acquire_lock@plt+0xdf0>
    380c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3810:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3814:	mov	x19, #0x0                   	// #0
    3818:	add	x1, x1, #0x358
    381c:	ldr	x0, [x0, #3992]
    3820:	ldr	x0, [x0]
    3824:	bl	2920 <PyErr_SetString@plt>
    3828:	ldp	x21, x22, [sp, #48]
    382c:	b	37b0 <PyThread_acquire_lock@plt+0xdf0>
    3830:	ldr	x3, [x19, #8]
    3834:	adrp	x2, 5000 <PyThread_acquire_lock@plt+0x2640>
    3838:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    383c:	add	x2, x2, #0x228
    3840:	add	x1, x1, #0x2f0
    3844:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3848:	mov	x19, #0x0                   	// #0
    384c:	add	x0, x0, #0x528
    3850:	bl	29b0 <_PyArg_BadArgument@plt>
    3854:	ldp	x21, x22, [sp, #48]
    3858:	b	37b0 <PyThread_acquire_lock@plt+0xdf0>
    385c:	adrp	x2, 5000 <PyThread_acquire_lock@plt+0x2640>
    3860:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3864:	add	x2, x2, #0x228
    3868:	add	x1, x1, #0x310
    386c:	ldr	x3, [x19, #16]
    3870:	b	3844 <PyThread_acquire_lock@plt+0xe84>
    3874:	bl	2720 <PyErr_Occurred@plt>
    3878:	cbnz	x0, 37e4 <PyThread_acquire_lock@plt+0xe24>
    387c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3880:	add	x1, x1, #0x580
    3884:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3888:	mov	x19, #0x0                   	// #0
    388c:	ldr	x0, [x0, #3976]
    3890:	ldr	x0, [x0]
    3894:	bl	2920 <PyErr_SetString@plt>
    3898:	ldp	x21, x22, [sp, #48]
    389c:	ldr	x23, [sp, #64]
    38a0:	b	37b0 <PyThread_acquire_lock@plt+0xdf0>
    38a4:	adrp	x23, 16000 <PyInit__hashlib@@Base+0x10f28>
    38a8:	ldr	x23, [x23, #4048]
    38ac:	b	3650 <PyThread_acquire_lock@plt+0xc90>
    38b0:	bl	26c0 <EVP_MD_size@plt>
    38b4:	sxtw	x22, w0
    38b8:	cmp	x22, #0x0
    38bc:	b.gt	36c0 <PyThread_acquire_lock@plt+0xd00>
    38c0:	b	387c <PyThread_acquire_lock@plt+0xebc>
    38c4:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    38c8:	add	x1, x1, #0x5a8
    38cc:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    38d0:	mov	x19, #0x0                   	// #0
    38d4:	ldr	x0, [x0, #4056]
    38d8:	ldr	x0, [x0]
    38dc:	bl	2920 <PyErr_SetString@plt>
    38e0:	ldp	x21, x22, [sp, #48]
    38e4:	ldr	x23, [sp, #64]
    38e8:	b	37b0 <PyThread_acquire_lock@plt+0xdf0>
    38ec:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    38f0:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    38f4:	add	x1, x1, #0x380
    38f8:	mov	x19, #0x0                   	// #0
    38fc:	b	38d4 <PyThread_acquire_lock@plt+0xf14>
    3900:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3904:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3908:	add	x1, x1, #0x3b0
    390c:	mov	x19, #0x0                   	// #0
    3910:	b	38d4 <PyThread_acquire_lock@plt+0xf14>
    3914:	ldr	x0, [x19]
    3918:	sub	x0, x0, #0x1
    391c:	str	x0, [x19]
    3920:	cbz	x0, 3980 <PyThread_acquire_lock@plt+0xfc0>
    3924:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3928:	mov	x19, #0x0                   	// #0
    392c:	ldr	x0, [x0, #3976]
    3930:	ldr	x0, [x0]
    3934:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    3938:	ldp	x21, x22, [sp, #48]
    393c:	ldr	x23, [sp, #64]
    3940:	b	37b0 <PyThread_acquire_lock@plt+0xdf0>
    3944:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3948:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    394c:	add	x1, x1, #0x560
    3950:	mov	x19, #0x0                   	// #0
    3954:	b	38d4 <PyThread_acquire_lock@plt+0xf14>
    3958:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    395c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3960:	add	x1, x1, #0x538
    3964:	mov	x19, #0x0                   	// #0
    3968:	b	388c <PyThread_acquire_lock@plt+0xecc>
    396c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3970:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3974:	add	x1, x1, #0x2a8
    3978:	mov	x19, #0x0                   	// #0
    397c:	b	388c <PyThread_acquire_lock@plt+0xecc>
    3980:	mov	x0, x19
    3984:	bl	28e0 <_Py_Dealloc@plt>
    3988:	b	3924 <PyThread_acquire_lock@plt+0xf64>
    398c:	nop
    3990:	cbz	x0, 3b3c <PyThread_acquire_lock@plt+0x117c>
    3994:	stp	x29, x30, [sp, #-32]!
    3998:	mov	x29, sp
    399c:	stp	x19, x20, [sp, #16]
    39a0:	mov	x19, x3
    39a4:	bl	2530 <EVP_MD_type@plt>
    39a8:	mov	w20, w0
    39ac:	cmp	w0, #0x446
    39b0:	b.eq	3b64 <PyThread_acquire_lock@plt+0x11a4>  // b.none
    39b4:	b.gt	3a54 <PyThread_acquire_lock@plt+0x1094>
    39b8:	cmp	w0, #0x2a2
    39bc:	b.eq	3b58 <PyThread_acquire_lock@plt+0x1198>  // b.none
    39c0:	b.le	3a20 <PyThread_acquire_lock@plt+0x1060>
    39c4:	cmp	w0, #0x420
    39c8:	b.eq	3b18 <PyThread_acquire_lock@plt+0x1158>  // b.none
    39cc:	cmp	w0, #0x421
    39d0:	b.ne	3adc <PyThread_acquire_lock@plt+0x111c>  // b.any
    39d4:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    39d8:	add	x0, x0, #0x5c8
    39dc:	bl	2620 <PyUnicode_FromString@plt>
    39e0:	mov	x20, x0
    39e4:	cbz	x0, 3a84 <PyThread_acquire_lock@plt+0x10c4>
    39e8:	mov	x1, x0
    39ec:	ldr	x0, [x19]
    39f0:	bl	2850 <PySet_Add@plt>
    39f4:	cbz	w0, 3a00 <PyThread_acquire_lock@plt+0x1040>
    39f8:	mov	w0, #0x1                   	// #1
    39fc:	str	w0, [x19, #8]
    3a00:	ldr	x0, [x20]
    3a04:	sub	x0, x0, #0x1
    3a08:	str	x0, [x20]
    3a0c:	cbnz	x0, 3a8c <PyThread_acquire_lock@plt+0x10cc>
    3a10:	mov	x0, x20
    3a14:	ldp	x19, x20, [sp, #16]
    3a18:	ldp	x29, x30, [sp], #32
    3a1c:	b	28e0 <_Py_Dealloc@plt>
    3a20:	cmp	w0, #0x2a0
    3a24:	b.eq	3b40 <PyThread_acquire_lock@plt+0x1180>  // b.none
    3a28:	b.le	3af0 <PyThread_acquire_lock@plt+0x1130>
    3a2c:	cmp	w0, #0x2a1
    3a30:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    3a34:	add	x0, x1, #0x840
    3a38:	b.eq	39dc <PyThread_acquire_lock@plt+0x101c>  // b.none
    3a3c:	mov	w0, w20
    3a40:	bl	2600 <OBJ_nid2ln@plt>
    3a44:	cbnz	x0, 39dc <PyThread_acquire_lock@plt+0x101c>
    3a48:	mov	w0, w20
    3a4c:	bl	2930 <OBJ_nid2sn@plt>
    3a50:	b	39dc <PyThread_acquire_lock@plt+0x101c>
    3a54:	cmp	w0, #0x44a
    3a58:	b.eq	3b4c <PyThread_acquire_lock@plt+0x118c>  // b.none
    3a5c:	b.le	3a98 <PyThread_acquire_lock@plt+0x10d8>
    3a60:	cmp	w0, #0x44c
    3a64:	b.eq	3b24 <PyThread_acquire_lock@plt+0x1164>  // b.none
    3a68:	cmp	w0, #0x44d
    3a6c:	b.ne	3ab4 <PyThread_acquire_lock@plt+0x10f4>  // b.any
    3a70:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3a74:	add	x0, x0, #0x620
    3a78:	bl	2620 <PyUnicode_FromString@plt>
    3a7c:	mov	x20, x0
    3a80:	cbnz	x0, 39e8 <PyThread_acquire_lock@plt+0x1028>
    3a84:	mov	w0, #0x1                   	// #1
    3a88:	str	w0, [x19, #8]
    3a8c:	ldp	x19, x20, [sp, #16]
    3a90:	ldp	x29, x30, [sp], #32
    3a94:	ret
    3a98:	cmp	w0, #0x448
    3a9c:	b.eq	3b30 <PyThread_acquire_lock@plt+0x1170>  // b.none
    3aa0:	cmp	w0, #0x449
    3aa4:	b.ne	3ac8 <PyThread_acquire_lock@plt+0x1108>  // b.any
    3aa8:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3aac:	add	x0, x0, #0x5f0
    3ab0:	b	39dc <PyThread_acquire_lock@plt+0x101c>
    3ab4:	cmp	w0, #0x44b
    3ab8:	b.ne	3a3c <PyThread_acquire_lock@plt+0x107c>  // b.any
    3abc:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3ac0:	add	x0, x0, #0x5e0
    3ac4:	b	39dc <PyThread_acquire_lock@plt+0x101c>
    3ac8:	cmp	w0, #0x447
    3acc:	b.ne	3a3c <PyThread_acquire_lock@plt+0x107c>  // b.any
    3ad0:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3ad4:	add	x0, x0, #0x630
    3ad8:	b	39dc <PyThread_acquire_lock@plt+0x101c>
    3adc:	cmp	w0, #0x2a3
    3ae0:	b.ne	3a3c <PyThread_acquire_lock@plt+0x107c>  // b.any
    3ae4:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3ae8:	add	x0, x0, #0x820
    3aec:	b	39dc <PyThread_acquire_lock@plt+0x101c>
    3af0:	cmp	w0, #0x4
    3af4:	b.eq	3b0c <PyThread_acquire_lock@plt+0x114c>  // b.none
    3af8:	cmp	w0, #0x40
    3afc:	b.ne	3a3c <PyThread_acquire_lock@plt+0x107c>  // b.any
    3b00:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3b04:	add	x0, x0, #0x810
    3b08:	b	39dc <PyThread_acquire_lock@plt+0x101c>
    3b0c:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3b10:	add	x0, x0, #0x800
    3b14:	b	39dc <PyThread_acquire_lock@plt+0x101c>
    3b18:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3b1c:	add	x0, x0, #0x650
    3b20:	b	39dc <PyThread_acquire_lock@plt+0x101c>
    3b24:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3b28:	add	x0, x0, #0x640
    3b2c:	b	39dc <PyThread_acquire_lock@plt+0x101c>
    3b30:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3b34:	add	x0, x0, #0x610
    3b38:	b	39dc <PyThread_acquire_lock@plt+0x101c>
    3b3c:	ret
    3b40:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3b44:	add	x0, x0, #0x830
    3b48:	b	39dc <PyThread_acquire_lock@plt+0x101c>
    3b4c:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3b50:	add	x0, x0, #0x600
    3b54:	b	39dc <PyThread_acquire_lock@plt+0x101c>
    3b58:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3b5c:	add	x0, x0, #0x850
    3b60:	b	39dc <PyThread_acquire_lock@plt+0x101c>
    3b64:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    3b68:	add	x0, x0, #0x5d0
    3b6c:	b	39dc <PyThread_acquire_lock@plt+0x101c>
    3b70:	stp	x29, x30, [sp, #-48]!
    3b74:	adrp	x1, 17000 <PyInit__hashlib@@Base+0x11f28>
    3b78:	add	x1, x1, #0x260
    3b7c:	mov	x29, sp
    3b80:	stp	x19, x20, [sp, #16]
    3b84:	mov	x20, x0
    3b88:	add	x0, x1, #0xc0
    3b8c:	bl	2660 <_PyObject_New@plt>
    3b90:	mov	x19, x0
    3b94:	cbz	x0, 3bec <PyThread_acquire_lock@plt+0x122c>
    3b98:	stp	x21, x22, [sp, #32]
    3b9c:	str	xzr, [x0, #24]
    3ba0:	bl	27e0 <EVP_MD_CTX_new@plt>
    3ba4:	str	x0, [x19, #16]
    3ba8:	mov	x21, x0
    3bac:	cbz	x0, 3c6c <PyThread_acquire_lock@plt+0x12ac>
    3bb0:	ldr	x0, [x20, #24]
    3bb4:	cbz	x0, 3bc4 <PyThread_acquire_lock@plt+0x1204>
    3bb8:	mov	w1, #0x0                   	// #0
    3bbc:	bl	29c0 <PyThread_acquire_lock@plt>
    3bc0:	cbz	w0, 3c28 <PyThread_acquire_lock@plt+0x1268>
    3bc4:	ldr	x1, [x20, #16]
    3bc8:	mov	x0, x21
    3bcc:	bl	2780 <EVP_MD_CTX_copy@plt>
    3bd0:	ldr	x1, [x20, #24]
    3bd4:	mov	w20, w0
    3bd8:	cbz	x1, 3be4 <PyThread_acquire_lock@plt+0x1224>
    3bdc:	mov	x0, x1
    3be0:	bl	2740 <PyThread_release_lock@plt>
    3be4:	cbz	w20, 3bfc <PyThread_acquire_lock@plt+0x123c>
    3be8:	ldp	x21, x22, [sp, #32]
    3bec:	mov	x0, x19
    3bf0:	ldp	x19, x20, [sp, #16]
    3bf4:	ldp	x29, x30, [sp], #48
    3bf8:	ret
    3bfc:	ldr	x0, [x19]
    3c00:	sub	x0, x0, #0x1
    3c04:	str	x0, [x19]
    3c08:	cbz	x0, 3c60 <PyThread_acquire_lock@plt+0x12a0>
    3c0c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3c10:	ldp	x19, x20, [sp, #16]
    3c14:	ldr	x0, [x0, #3976]
    3c18:	ldp	x21, x22, [sp, #32]
    3c1c:	ldp	x29, x30, [sp], #48
    3c20:	ldr	x0, [x0]
    3c24:	b	2aa8 <PyThread_acquire_lock@plt+0xe8>
    3c28:	bl	27b0 <PyEval_SaveThread@plt>
    3c2c:	mov	x22, x0
    3c30:	ldr	x0, [x20, #24]
    3c34:	mov	w1, #0x1                   	// #1
    3c38:	bl	29c0 <PyThread_acquire_lock@plt>
    3c3c:	mov	x0, x22
    3c40:	bl	2770 <PyEval_RestoreThread@plt>
    3c44:	ldr	x1, [x20, #16]
    3c48:	mov	x0, x21
    3c4c:	bl	2780 <EVP_MD_CTX_copy@plt>
    3c50:	ldr	x1, [x20, #24]
    3c54:	mov	w20, w0
    3c58:	cbnz	x1, 3bdc <PyThread_acquire_lock@plt+0x121c>
    3c5c:	b	3be4 <PyThread_acquire_lock@plt+0x1224>
    3c60:	mov	x0, x19
    3c64:	bl	28e0 <_Py_Dealloc@plt>
    3c68:	b	3c0c <PyThread_acquire_lock@plt+0x124c>
    3c6c:	ldr	x0, [x19]
    3c70:	sub	x0, x0, #0x1
    3c74:	str	x0, [x19]
    3c78:	cbz	x0, 3c8c <PyThread_acquire_lock@plt+0x12cc>
    3c7c:	bl	2630 <PyErr_NoMemory@plt>
    3c80:	mov	x19, #0x0                   	// #0
    3c84:	ldp	x21, x22, [sp, #32]
    3c88:	b	3bec <PyThread_acquire_lock@plt+0x122c>
    3c8c:	mov	x0, x19
    3c90:	bl	28e0 <_Py_Dealloc@plt>
    3c94:	b	3c7c <PyThread_acquire_lock@plt+0x12bc>
    3c98:	stp	x29, x30, [sp, #-112]!
    3c9c:	mov	x29, sp
    3ca0:	stp	x19, x20, [sp, #16]
    3ca4:	mov	x20, x0
    3ca8:	bl	27e0 <EVP_MD_CTX_new@plt>
    3cac:	mov	x19, x0
    3cb0:	cbz	x0, 3dd0 <PyThread_acquire_lock@plt+0x1410>
    3cb4:	ldr	x0, [x20, #24]
    3cb8:	cbz	x0, 3cc8 <PyThread_acquire_lock@plt+0x1308>
    3cbc:	mov	w1, #0x0                   	// #0
    3cc0:	bl	29c0 <PyThread_acquire_lock@plt>
    3cc4:	cbz	w0, 3d68 <PyThread_acquire_lock@plt+0x13a8>
    3cc8:	ldr	x1, [x20, #16]
    3ccc:	mov	x0, x19
    3cd0:	bl	2780 <EVP_MD_CTX_copy@plt>
    3cd4:	ldr	x1, [x20, #24]
    3cd8:	mov	w20, w0
    3cdc:	cbz	x1, 3ce8 <PyThread_acquire_lock@plt+0x1328>
    3ce0:	mov	x0, x1
    3ce4:	bl	2740 <PyThread_release_lock@plt>
    3ce8:	cbz	w20, 3d44 <PyThread_acquire_lock@plt+0x1384>
    3cec:	mov	x0, x19
    3cf0:	str	x21, [sp, #32]
    3cf4:	bl	2590 <EVP_MD_CTX_md@plt>
    3cf8:	add	x21, sp, #0x30
    3cfc:	bl	26c0 <EVP_MD_size@plt>
    3d00:	mov	w20, w0
    3d04:	mov	x1, x21
    3d08:	mov	x0, x19
    3d0c:	mov	x2, #0x0                   	// #0
    3d10:	bl	2760 <EVP_DigestFinal@plt>
    3d14:	cbz	w0, 3da8 <PyThread_acquire_lock@plt+0x13e8>
    3d18:	mov	x0, x19
    3d1c:	bl	28d0 <EVP_MD_CTX_free@plt>
    3d20:	mov	x0, x21
    3d24:	mov	w1, w20
    3d28:	bl	2810 <_Py_strhex@plt>
    3d2c:	mov	x19, x0
    3d30:	ldr	x21, [sp, #32]
    3d34:	mov	x0, x19
    3d38:	ldp	x19, x20, [sp, #16]
    3d3c:	ldp	x29, x30, [sp], #112
    3d40:	ret
    3d44:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3d48:	ldr	x0, [x0, #3976]
    3d4c:	ldr	x0, [x0]
    3d50:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    3d54:	mov	x19, x0
    3d58:	mov	x0, x19
    3d5c:	ldp	x19, x20, [sp, #16]
    3d60:	ldp	x29, x30, [sp], #112
    3d64:	ret
    3d68:	str	x21, [sp, #32]
    3d6c:	bl	27b0 <PyEval_SaveThread@plt>
    3d70:	mov	x21, x0
    3d74:	mov	w1, #0x1                   	// #1
    3d78:	ldr	x0, [x20, #24]
    3d7c:	bl	29c0 <PyThread_acquire_lock@plt>
    3d80:	mov	x0, x21
    3d84:	bl	2770 <PyEval_RestoreThread@plt>
    3d88:	ldr	x1, [x20, #16]
    3d8c:	mov	x0, x19
    3d90:	ldr	x21, [sp, #32]
    3d94:	bl	2780 <EVP_MD_CTX_copy@plt>
    3d98:	ldr	x1, [x20, #24]
    3d9c:	mov	w20, w0
    3da0:	cbnz	x1, 3ce0 <PyThread_acquire_lock@plt+0x1320>
    3da4:	b	3ce8 <PyThread_acquire_lock@plt+0x1328>
    3da8:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3dac:	mov	x19, #0x0                   	// #0
    3db0:	ldr	x0, [x0, #3976]
    3db4:	ldr	x0, [x0]
    3db8:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    3dbc:	mov	x0, x19
    3dc0:	ldp	x19, x20, [sp, #16]
    3dc4:	ldr	x21, [sp, #32]
    3dc8:	ldp	x29, x30, [sp], #112
    3dcc:	ret
    3dd0:	bl	2630 <PyErr_NoMemory@plt>
    3dd4:	b	3d34 <PyThread_acquire_lock@plt+0x1374>
    3dd8:	stp	x29, x30, [sp, #-112]!
    3ddc:	mov	x29, sp
    3de0:	stp	x19, x20, [sp, #16]
    3de4:	mov	x20, x0
    3de8:	bl	27e0 <EVP_MD_CTX_new@plt>
    3dec:	cbz	x0, 3f10 <PyThread_acquire_lock@plt+0x1550>
    3df0:	mov	x19, x0
    3df4:	ldr	x0, [x20, #24]
    3df8:	cbz	x0, 3e08 <PyThread_acquire_lock@plt+0x1448>
    3dfc:	mov	w1, #0x0                   	// #0
    3e00:	bl	29c0 <PyThread_acquire_lock@plt>
    3e04:	cbz	w0, 3ea8 <PyThread_acquire_lock@plt+0x14e8>
    3e08:	ldr	x1, [x20, #16]
    3e0c:	mov	x0, x19
    3e10:	bl	2780 <EVP_MD_CTX_copy@plt>
    3e14:	ldr	x1, [x20, #24]
    3e18:	mov	w20, w0
    3e1c:	cbz	x1, 3e28 <PyThread_acquire_lock@plt+0x1468>
    3e20:	mov	x0, x1
    3e24:	bl	2740 <PyThread_release_lock@plt>
    3e28:	cbz	w20, 3e84 <PyThread_acquire_lock@plt+0x14c4>
    3e2c:	mov	x0, x19
    3e30:	str	x21, [sp, #32]
    3e34:	bl	2590 <EVP_MD_CTX_md@plt>
    3e38:	add	x21, sp, #0x30
    3e3c:	bl	26c0 <EVP_MD_size@plt>
    3e40:	mov	w20, w0
    3e44:	mov	x1, x21
    3e48:	mov	x0, x19
    3e4c:	mov	x2, #0x0                   	// #0
    3e50:	bl	2760 <EVP_DigestFinal@plt>
    3e54:	cbz	w0, 3ee8 <PyThread_acquire_lock@plt+0x1528>
    3e58:	mov	w1, w20
    3e5c:	mov	x0, x21
    3e60:	bl	2870 <PyBytes_FromStringAndSize@plt>
    3e64:	mov	x20, x0
    3e68:	mov	x0, x19
    3e6c:	bl	28d0 <EVP_MD_CTX_free@plt>
    3e70:	ldr	x21, [sp, #32]
    3e74:	mov	x0, x20
    3e78:	ldp	x19, x20, [sp, #16]
    3e7c:	ldp	x29, x30, [sp], #112
    3e80:	ret
    3e84:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3e88:	ldr	x0, [x0, #3976]
    3e8c:	ldr	x0, [x0]
    3e90:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    3e94:	mov	x20, x0
    3e98:	mov	x0, x20
    3e9c:	ldp	x19, x20, [sp, #16]
    3ea0:	ldp	x29, x30, [sp], #112
    3ea4:	ret
    3ea8:	str	x21, [sp, #32]
    3eac:	bl	27b0 <PyEval_SaveThread@plt>
    3eb0:	mov	x21, x0
    3eb4:	mov	w1, #0x1                   	// #1
    3eb8:	ldr	x0, [x20, #24]
    3ebc:	bl	29c0 <PyThread_acquire_lock@plt>
    3ec0:	mov	x0, x21
    3ec4:	bl	2770 <PyEval_RestoreThread@plt>
    3ec8:	ldr	x1, [x20, #16]
    3ecc:	mov	x0, x19
    3ed0:	ldr	x21, [sp, #32]
    3ed4:	bl	2780 <EVP_MD_CTX_copy@plt>
    3ed8:	ldr	x1, [x20, #24]
    3edc:	mov	w20, w0
    3ee0:	cbnz	x1, 3e20 <PyThread_acquire_lock@plt+0x1460>
    3ee4:	b	3e28 <PyThread_acquire_lock@plt+0x1468>
    3ee8:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3eec:	mov	x20, #0x0                   	// #0
    3ef0:	ldr	x0, [x0, #3976]
    3ef4:	ldr	x0, [x0]
    3ef8:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    3efc:	mov	x0, x20
    3f00:	ldp	x19, x20, [sp, #16]
    3f04:	ldr	x21, [sp, #32]
    3f08:	ldp	x29, x30, [sp], #112
    3f0c:	ret
    3f10:	mov	x20, #0x0                   	// #0
    3f14:	bl	2630 <PyErr_NoMemory@plt>
    3f18:	b	3e74 <PyThread_acquire_lock@plt+0x14b4>
    3f1c:	nop
    3f20:	stp	x29, x30, [sp, #-160]!
    3f24:	mov	x29, sp
    3f28:	stp	x19, x20, [sp, #16]
    3f2c:	mov	x19, x0
    3f30:	ldr	x0, [x1, #8]
    3f34:	stp	x21, x22, [sp, #32]
    3f38:	ldr	x2, [x0, #168]
    3f3c:	tbnz	w2, #28, 4118 <PyThread_acquire_lock@plt+0x1758>
    3f40:	ldr	x0, [x0, #160]
    3f44:	cbz	x0, 40e8 <PyThread_acquire_lock@plt+0x1728>
    3f48:	ldr	x0, [x0]
    3f4c:	cbz	x0, 40e8 <PyThread_acquire_lock@plt+0x1728>
    3f50:	stp	x23, x24, [sp, #48]
    3f54:	add	x24, sp, #0x50
    3f58:	mov	x0, x1
    3f5c:	mov	w2, #0x0                   	// #0
    3f60:	mov	x1, x24
    3f64:	bl	2750 <PyObject_GetBuffer@plt>
    3f68:	cmn	w0, #0x1
    3f6c:	b.eq	4174 <PyThread_acquire_lock@plt+0x17b4>  // b.none
    3f70:	ldr	w0, [sp, #116]
    3f74:	cmp	w0, #0x1
    3f78:	b.gt	4148 <PyThread_acquire_lock@plt+0x1788>
    3f7c:	ldr	x22, [x19, #24]
    3f80:	cbz	x22, 4074 <PyThread_acquire_lock@plt+0x16b4>
    3f84:	str	x25, [sp, #64]
    3f88:	bl	27b0 <PyEval_SaveThread@plt>
    3f8c:	mov	x25, x0
    3f90:	mov	w1, #0x1                   	// #1
    3f94:	ldr	x0, [x19, #24]
    3f98:	bl	29c0 <PyThread_acquire_lock@plt>
    3f9c:	ldr	x20, [sp, #96]
    3fa0:	ldr	x22, [sp, #80]
    3fa4:	cmp	x20, #0x0
    3fa8:	b.le	4028 <PyThread_acquire_lock@plt+0x1668>
    3fac:	mov	x23, #0x7fffffff            	// #2147483647
    3fb0:	b	3fc0 <PyThread_acquire_lock@plt+0x1600>
    3fb4:	add	x22, x22, x21
    3fb8:	cmp	x20, #0x0
    3fbc:	b.le	4028 <PyThread_acquire_lock@plt+0x1668>
    3fc0:	ldr	x0, [x19, #16]
    3fc4:	cmp	x20, x23
    3fc8:	csel	x21, x20, x23, le
    3fcc:	mov	x1, x22
    3fd0:	sub	x20, x20, x21
    3fd4:	mov	x2, x21
    3fd8:	bl	2700 <EVP_DigestUpdate@plt>
    3fdc:	cbnz	w0, 3fb4 <PyThread_acquire_lock@plt+0x15f4>
    3fe0:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    3fe4:	mov	x22, #0x0                   	// #0
    3fe8:	ldr	x0, [x0, #3976]
    3fec:	ldr	x0, [x0]
    3ff0:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    3ff4:	ldr	x0, [x19, #24]
    3ff8:	bl	2740 <PyThread_release_lock@plt>
    3ffc:	mov	x0, x25
    4000:	bl	2770 <PyEval_RestoreThread@plt>
    4004:	mov	x0, x24
    4008:	bl	2970 <PyBuffer_Release@plt>
    400c:	mov	x0, x22
    4010:	ldp	x19, x20, [sp, #16]
    4014:	ldp	x21, x22, [sp, #32]
    4018:	ldp	x23, x24, [sp, #48]
    401c:	ldr	x25, [sp, #64]
    4020:	ldp	x29, x30, [sp], #160
    4024:	ret
    4028:	ldr	x0, [x19, #24]
    402c:	bl	2740 <PyThread_release_lock@plt>
    4030:	mov	x0, x25
    4034:	bl	2770 <PyEval_RestoreThread@plt>
    4038:	mov	x0, x24
    403c:	bl	2970 <PyBuffer_Release@plt>
    4040:	ldr	x25, [sp, #64]
    4044:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    4048:	ldp	x23, x24, [sp, #48]
    404c:	ldr	x0, [x0, #4048]
    4050:	mov	x22, x0
    4054:	ldr	x1, [x0]
    4058:	add	x1, x1, #0x1
    405c:	str	x1, [x0]
    4060:	mov	x0, x22
    4064:	ldp	x19, x20, [sp, #16]
    4068:	ldp	x21, x22, [sp, #32]
    406c:	ldp	x29, x30, [sp], #160
    4070:	ret
    4074:	ldr	x20, [sp, #96]
    4078:	cmp	x20, #0x7ff
    407c:	b.gt	4180 <PyThread_acquire_lock@plt+0x17c0>
    4080:	cmp	x20, #0x0
    4084:	ldr	x23, [sp, #80]
    4088:	b.le	413c <PyThread_acquire_lock@plt+0x177c>
    408c:	str	x25, [sp, #64]
    4090:	mov	x25, #0x7fffffff            	// #2147483647
    4094:	b	40a4 <PyThread_acquire_lock@plt+0x16e4>
    4098:	add	x23, x23, x21
    409c:	cmp	x20, #0x0
    40a0:	b.le	4138 <PyThread_acquire_lock@plt+0x1778>
    40a4:	ldr	x0, [x19, #16]
    40a8:	cmp	x20, x25
    40ac:	csel	x21, x20, x25, le
    40b0:	mov	x1, x23
    40b4:	sub	x20, x20, x21
    40b8:	mov	x2, x21
    40bc:	bl	2700 <EVP_DigestUpdate@plt>
    40c0:	cbnz	w0, 4098 <PyThread_acquire_lock@plt+0x16d8>
    40c4:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    40c8:	ldr	x0, [x0, #3976]
    40cc:	ldr	x0, [x0]
    40d0:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    40d4:	mov	x0, x24
    40d8:	bl	2970 <PyBuffer_Release@plt>
    40dc:	ldp	x23, x24, [sp, #48]
    40e0:	ldr	x25, [sp, #64]
    40e4:	b	4060 <PyThread_acquire_lock@plt+0x16a0>
    40e8:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    40ec:	mov	x22, #0x0                   	// #0
    40f0:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    40f4:	add	x1, x1, #0x688
    40f8:	ldr	x0, [x0, #3992]
    40fc:	ldr	x0, [x0]
    4100:	bl	2920 <PyErr_SetString@plt>
    4104:	mov	x0, x22
    4108:	ldp	x19, x20, [sp, #16]
    410c:	ldp	x21, x22, [sp, #32]
    4110:	ldp	x29, x30, [sp], #160
    4114:	ret
    4118:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    411c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4120:	mov	x22, #0x0                   	// #0
    4124:	add	x1, x1, #0x658
    4128:	ldr	x0, [x0, #3992]
    412c:	ldr	x0, [x0]
    4130:	bl	2920 <PyErr_SetString@plt>
    4134:	b	4060 <PyThread_acquire_lock@plt+0x16a0>
    4138:	ldr	x25, [sp, #64]
    413c:	mov	x0, x24
    4140:	bl	2970 <PyBuffer_Release@plt>
    4144:	b	4044 <PyThread_acquire_lock@plt+0x1684>
    4148:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    414c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4150:	add	x1, x1, #0x6b8
    4154:	mov	x22, #0x0                   	// #0
    4158:	ldr	x0, [x0, #4016]
    415c:	ldr	x0, [x0]
    4160:	bl	2920 <PyErr_SetString@plt>
    4164:	mov	x0, x24
    4168:	bl	2970 <PyBuffer_Release@plt>
    416c:	ldp	x23, x24, [sp, #48]
    4170:	b	4060 <PyThread_acquire_lock@plt+0x16a0>
    4174:	mov	x22, #0x0                   	// #0
    4178:	ldp	x23, x24, [sp, #48]
    417c:	b	4060 <PyThread_acquire_lock@plt+0x16a0>
    4180:	bl	26b0 <PyThread_allocate_lock@plt>
    4184:	str	x0, [x19, #24]
    4188:	cbnz	x0, 3f84 <PyThread_acquire_lock@plt+0x15c4>
    418c:	ldr	x20, [sp, #96]
    4190:	b	4080 <PyThread_acquire_lock@plt+0x16c0>
    4194:	nop
    4198:	stp	x29, x30, [sp, #-64]!
    419c:	mov	x29, sp
    41a0:	stp	x19, x20, [sp, #16]
    41a4:	cbz	x0, 4314 <PyThread_acquire_lock@plt+0x1954>
    41a8:	stp	x21, x22, [sp, #32]
    41ac:	mov	x22, x0
    41b0:	adrp	x0, 17000 <PyInit__hashlib@@Base+0x11f28>
    41b4:	add	x0, x0, #0x260
    41b8:	mov	x21, x1
    41bc:	mov	x19, x2
    41c0:	add	x0, x0, #0xc0
    41c4:	bl	2660 <_PyObject_New@plt>
    41c8:	mov	x20, x0
    41cc:	cbz	x0, 4298 <PyThread_acquire_lock@plt+0x18d8>
    41d0:	str	xzr, [x0, #24]
    41d4:	bl	27e0 <EVP_MD_CTX_new@plt>
    41d8:	str	x0, [x20, #16]
    41dc:	cbz	x0, 427c <PyThread_acquire_lock@plt+0x18bc>
    41e0:	mov	x1, x22
    41e4:	mov	x2, #0x0                   	// #0
    41e8:	bl	2550 <EVP_DigestInit_ex@plt>
    41ec:	cbz	w0, 42cc <PyThread_acquire_lock@plt+0x190c>
    41f0:	cmp	x21, #0x0
    41f4:	ccmp	x19, #0x0, #0x4, ne  // ne = any
    41f8:	b.ne	4214 <PyThread_acquire_lock@plt+0x1854>  // b.any
    41fc:	nop
    4200:	ldp	x21, x22, [sp, #32]
    4204:	mov	x0, x20
    4208:	ldp	x19, x20, [sp, #16]
    420c:	ldp	x29, x30, [sp], #64
    4210:	ret
    4214:	cmp	x19, #0x7ff
    4218:	b.le	42b0 <PyThread_acquire_lock@plt+0x18f0>
    421c:	stp	x23, x24, [sp, #48]
    4220:	bl	27b0 <PyEval_SaveThread@plt>
    4224:	mov	x23, #0x7fffffff            	// #2147483647
    4228:	mov	x24, x0
    422c:	b	423c <PyThread_acquire_lock@plt+0x187c>
    4230:	add	x21, x21, x22
    4234:	cmp	x19, #0x0
    4238:	b.le	4300 <PyThread_acquire_lock@plt+0x1940>
    423c:	ldr	x0, [x20, #16]
    4240:	cmp	x19, x23
    4244:	csel	x22, x19, x23, le
    4248:	mov	x1, x21
    424c:	sub	x19, x19, x22
    4250:	mov	x2, x22
    4254:	bl	2700 <EVP_DigestUpdate@plt>
    4258:	cbnz	w0, 4230 <PyThread_acquire_lock@plt+0x1870>
    425c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    4260:	ldr	x0, [x0, #3976]
    4264:	ldr	x0, [x0]
    4268:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    426c:	mov	x0, x24
    4270:	bl	2770 <PyEval_RestoreThread@plt>
    4274:	ldp	x23, x24, [sp, #48]
    4278:	b	42dc <PyThread_acquire_lock@plt+0x191c>
    427c:	ldr	x0, [x20]
    4280:	sub	x0, x0, #0x1
    4284:	str	x0, [x20]
    4288:	cbnz	x0, 4294 <PyThread_acquire_lock@plt+0x18d4>
    428c:	mov	x0, x20
    4290:	bl	28e0 <_Py_Dealloc@plt>
    4294:	bl	2630 <PyErr_NoMemory@plt>
    4298:	mov	x20, #0x0                   	// #0
    429c:	mov	x0, x20
    42a0:	ldp	x19, x20, [sp, #16]
    42a4:	ldp	x21, x22, [sp, #32]
    42a8:	ldp	x29, x30, [sp], #64
    42ac:	ret
    42b0:	cmp	x19, #0x0
    42b4:	b.le	4200 <PyThread_acquire_lock@plt+0x1840>
    42b8:	ldr	x0, [x20, #16]
    42bc:	mov	x2, x19
    42c0:	mov	x1, x21
    42c4:	bl	2700 <EVP_DigestUpdate@plt>
    42c8:	cbnz	w0, 4200 <PyThread_acquire_lock@plt+0x1840>
    42cc:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    42d0:	ldr	x0, [x0, #3976]
    42d4:	ldr	x0, [x0]
    42d8:	bl	2aa8 <PyThread_acquire_lock@plt+0xe8>
    42dc:	ldr	x0, [x20]
    42e0:	sub	x0, x0, #0x1
    42e4:	str	x0, [x20]
    42e8:	cbnz	x0, 4298 <PyThread_acquire_lock@plt+0x18d8>
    42ec:	mov	x0, x20
    42f0:	mov	x20, #0x0                   	// #0
    42f4:	bl	28e0 <_Py_Dealloc@plt>
    42f8:	ldp	x21, x22, [sp, #32]
    42fc:	b	4204 <PyThread_acquire_lock@plt+0x1844>
    4300:	mov	x0, x24
    4304:	bl	2770 <PyEval_RestoreThread@plt>
    4308:	ldp	x21, x22, [sp, #32]
    430c:	ldp	x23, x24, [sp, #48]
    4310:	b	4204 <PyThread_acquire_lock@plt+0x1844>
    4314:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    4318:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    431c:	mov	x20, #0x0                   	// #0
    4320:	add	x1, x1, #0x2a8
    4324:	ldr	x0, [x0, #3976]
    4328:	ldr	x0, [x0]
    432c:	bl	2920 <PyErr_SetString@plt>
    4330:	b	4204 <PyThread_acquire_lock@plt+0x1844>
    4334:	nop
    4338:	stp	x29, x30, [sp, #-112]!
    433c:	mov	x29, sp
    4340:	stp	x19, x20, [sp, #16]
    4344:	mov	x19, x1
    4348:	stp	xzr, xzr, [sp, #32]
    434c:	stp	xzr, xzr, [sp, #48]
    4350:	stp	xzr, xzr, [sp, #64]
    4354:	stp	xzr, xzr, [sp, #80]
    4358:	stp	xzr, xzr, [sp, #96]
    435c:	cbz	x0, 43f4 <PyThread_acquire_lock@plt+0x1a34>
    4360:	ldr	x1, [x0, #8]
    4364:	ldr	x2, [x1, #168]
    4368:	tbnz	w2, #28, 4444 <PyThread_acquire_lock@plt+0x1a84>
    436c:	ldr	x1, [x1, #160]
    4370:	cbz	x1, 4418 <PyThread_acquire_lock@plt+0x1a58>
    4374:	ldr	x1, [x1]
    4378:	cbz	x1, 4418 <PyThread_acquire_lock@plt+0x1a58>
    437c:	add	x20, sp, #0x20
    4380:	mov	w2, #0x0                   	// #0
    4384:	mov	x1, x20
    4388:	bl	2750 <PyObject_GetBuffer@plt>
    438c:	cmn	w0, #0x1
    4390:	b.eq	4464 <PyThread_acquire_lock@plt+0x1aa4>  // b.none
    4394:	ldr	w0, [sp, #68]
    4398:	cmp	w0, #0x1
    439c:	b.gt	43cc <PyThread_acquire_lock@plt+0x1a0c>
    43a0:	ldr	x1, [sp, #32]
    43a4:	mov	x0, x19
    43a8:	ldr	x2, [sp, #48]
    43ac:	bl	4198 <PyThread_acquire_lock@plt+0x17d8>
    43b0:	mov	x19, x0
    43b4:	mov	x0, x20
    43b8:	bl	2970 <PyBuffer_Release@plt>
    43bc:	mov	x0, x19
    43c0:	ldp	x19, x20, [sp, #16]
    43c4:	ldp	x29, x30, [sp], #112
    43c8:	ret
    43cc:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    43d0:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    43d4:	add	x1, x1, #0x6b8
    43d8:	mov	x19, #0x0                   	// #0
    43dc:	ldr	x0, [x0, #4016]
    43e0:	ldr	x0, [x0]
    43e4:	bl	2920 <PyErr_SetString@plt>
    43e8:	mov	x0, x20
    43ec:	bl	2970 <PyBuffer_Release@plt>
    43f0:	b	43bc <PyThread_acquire_lock@plt+0x19fc>
    43f4:	mov	x0, x1
    43f8:	mov	x2, #0x0                   	// #0
    43fc:	mov	x1, #0x0                   	// #0
    4400:	bl	4198 <PyThread_acquire_lock@plt+0x17d8>
    4404:	mov	x19, x0
    4408:	mov	x0, x19
    440c:	ldp	x19, x20, [sp, #16]
    4410:	ldp	x29, x30, [sp], #112
    4414:	ret
    4418:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    441c:	mov	x19, #0x0                   	// #0
    4420:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4424:	add	x1, x1, #0x688
    4428:	ldr	x0, [x0, #3992]
    442c:	ldr	x0, [x0]
    4430:	bl	2920 <PyErr_SetString@plt>
    4434:	mov	x0, x19
    4438:	ldp	x19, x20, [sp, #16]
    443c:	ldp	x29, x30, [sp], #112
    4440:	ret
    4444:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    4448:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    444c:	mov	x19, #0x0                   	// #0
    4450:	add	x1, x1, #0x658
    4454:	ldr	x0, [x0, #3992]
    4458:	ldr	x0, [x0]
    445c:	bl	2920 <PyErr_SetString@plt>
    4460:	b	43bc <PyThread_acquire_lock@plt+0x19fc>
    4464:	mov	x19, #0x0                   	// #0
    4468:	b	43bc <PyThread_acquire_lock@plt+0x19fc>
    446c:	nop
    4470:	sub	sp, sp, #0x40
    4474:	mov	x0, x1
    4478:	mov	x1, x2
    447c:	mov	x2, x3
    4480:	stp	x29, x30, [sp, #16]
    4484:	add	x29, sp, #0x10
    4488:	stp	x19, x20, [sp, #32]
    448c:	cbz	x3, 44f4 <PyThread_acquire_lock@plt+0x1b34>
    4490:	ldr	x19, [x3, #16]
    4494:	add	x19, x1, x19
    4498:	add	x3, sp, #0x38
    449c:	str	x3, [sp]
    44a0:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    44a4:	add	x4, x4, #0x260
    44a8:	mov	x3, x2
    44ac:	add	x4, x4, #0x260
    44b0:	mov	w7, #0x0                   	// #0
    44b4:	mov	w6, #0x1                   	// #1
    44b8:	mov	w5, #0x0                   	// #0
    44bc:	mov	x2, #0x0                   	// #0
    44c0:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    44c4:	cbz	x0, 4538 <PyThread_acquire_lock@plt+0x1b78>
    44c8:	mov	x20, #0x0                   	// #0
    44cc:	cbz	x19, 44d4 <PyThread_acquire_lock@plt+0x1b14>
    44d0:	ldr	x20, [x0]
    44d4:	bl	2940 <EVP_sha512@plt>
    44d8:	mov	x1, x0
    44dc:	mov	x0, x20
    44e0:	bl	4338 <PyThread_acquire_lock@plt+0x1978>
    44e4:	ldp	x29, x30, [sp, #16]
    44e8:	ldp	x19, x20, [sp, #32]
    44ec:	add	sp, sp, #0x40
    44f0:	ret
    44f4:	tbnz	x1, #63, 450c <PyThread_acquire_lock@plt+0x1b4c>
    44f8:	cmp	x0, #0x0
    44fc:	mov	x19, x1
    4500:	ccmp	x1, #0x1, #0x0, ne  // ne = any
    4504:	b.le	44c8 <PyThread_acquire_lock@plt+0x1b08>
    4508:	b	4498 <PyThread_acquire_lock@plt+0x1ad8>
    450c:	add	x2, sp, #0x38
    4510:	str	x2, [sp]
    4514:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    4518:	add	x4, x4, #0x260
    451c:	add	x4, x4, #0x260
    4520:	mov	w7, #0x0                   	// #0
    4524:	mov	w6, #0x1                   	// #1
    4528:	mov	w5, #0x0                   	// #0
    452c:	mov	x2, #0x0                   	// #0
    4530:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    4534:	cbnz	x0, 44d0 <PyThread_acquire_lock@plt+0x1b10>
    4538:	mov	x0, #0x0                   	// #0
    453c:	b	44e4 <PyThread_acquire_lock@plt+0x1b24>
    4540:	sub	sp, sp, #0x40
    4544:	mov	x0, x1
    4548:	mov	x1, x2
    454c:	mov	x2, x3
    4550:	stp	x29, x30, [sp, #16]
    4554:	add	x29, sp, #0x10
    4558:	stp	x19, x20, [sp, #32]
    455c:	cbz	x3, 45c4 <PyThread_acquire_lock@plt+0x1c04>
    4560:	ldr	x19, [x3, #16]
    4564:	add	x19, x1, x19
    4568:	add	x3, sp, #0x38
    456c:	str	x3, [sp]
    4570:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    4574:	add	x4, x4, #0x260
    4578:	mov	x3, x2
    457c:	add	x4, x4, #0x2a0
    4580:	mov	w7, #0x0                   	// #0
    4584:	mov	w6, #0x1                   	// #1
    4588:	mov	w5, #0x0                   	// #0
    458c:	mov	x2, #0x0                   	// #0
    4590:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    4594:	cbz	x0, 4608 <PyThread_acquire_lock@plt+0x1c48>
    4598:	mov	x20, #0x0                   	// #0
    459c:	cbz	x19, 45a4 <PyThread_acquire_lock@plt+0x1be4>
    45a0:	ldr	x20, [x0]
    45a4:	bl	25c0 <EVP_sha384@plt>
    45a8:	mov	x1, x0
    45ac:	mov	x0, x20
    45b0:	bl	4338 <PyThread_acquire_lock@plt+0x1978>
    45b4:	ldp	x29, x30, [sp, #16]
    45b8:	ldp	x19, x20, [sp, #32]
    45bc:	add	sp, sp, #0x40
    45c0:	ret
    45c4:	tbnz	x1, #63, 45dc <PyThread_acquire_lock@plt+0x1c1c>
    45c8:	cmp	x0, #0x0
    45cc:	mov	x19, x1
    45d0:	ccmp	x1, #0x1, #0x0, ne  // ne = any
    45d4:	b.le	4598 <PyThread_acquire_lock@plt+0x1bd8>
    45d8:	b	4568 <PyThread_acquire_lock@plt+0x1ba8>
    45dc:	add	x2, sp, #0x38
    45e0:	str	x2, [sp]
    45e4:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    45e8:	add	x4, x4, #0x260
    45ec:	add	x4, x4, #0x2a0
    45f0:	mov	w7, #0x0                   	// #0
    45f4:	mov	w6, #0x1                   	// #1
    45f8:	mov	w5, #0x0                   	// #0
    45fc:	mov	x2, #0x0                   	// #0
    4600:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    4604:	cbnz	x0, 45a0 <PyThread_acquire_lock@plt+0x1be0>
    4608:	mov	x0, #0x0                   	// #0
    460c:	b	45b4 <PyThread_acquire_lock@plt+0x1bf4>
    4610:	sub	sp, sp, #0x40
    4614:	mov	x0, x1
    4618:	mov	x1, x2
    461c:	mov	x2, x3
    4620:	stp	x29, x30, [sp, #16]
    4624:	add	x29, sp, #0x10
    4628:	stp	x19, x20, [sp, #32]
    462c:	cbz	x3, 4694 <PyThread_acquire_lock@plt+0x1cd4>
    4630:	ldr	x19, [x3, #16]
    4634:	add	x19, x1, x19
    4638:	add	x3, sp, #0x38
    463c:	str	x3, [sp]
    4640:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    4644:	add	x4, x4, #0x260
    4648:	mov	x3, x2
    464c:	add	x4, x4, #0x2e0
    4650:	mov	w7, #0x0                   	// #0
    4654:	mov	w6, #0x1                   	// #1
    4658:	mov	w5, #0x0                   	// #0
    465c:	mov	x2, #0x0                   	// #0
    4660:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    4664:	cbz	x0, 46d8 <PyThread_acquire_lock@plt+0x1d18>
    4668:	mov	x20, #0x0                   	// #0
    466c:	cbz	x19, 4674 <PyThread_acquire_lock@plt+0x1cb4>
    4670:	ldr	x20, [x0]
    4674:	bl	2950 <EVP_sha256@plt>
    4678:	mov	x1, x0
    467c:	mov	x0, x20
    4680:	bl	4338 <PyThread_acquire_lock@plt+0x1978>
    4684:	ldp	x29, x30, [sp, #16]
    4688:	ldp	x19, x20, [sp, #32]
    468c:	add	sp, sp, #0x40
    4690:	ret
    4694:	tbnz	x1, #63, 46ac <PyThread_acquire_lock@plt+0x1cec>
    4698:	cmp	x0, #0x0
    469c:	mov	x19, x1
    46a0:	ccmp	x1, #0x1, #0x0, ne  // ne = any
    46a4:	b.le	4668 <PyThread_acquire_lock@plt+0x1ca8>
    46a8:	b	4638 <PyThread_acquire_lock@plt+0x1c78>
    46ac:	add	x2, sp, #0x38
    46b0:	str	x2, [sp]
    46b4:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    46b8:	add	x4, x4, #0x260
    46bc:	add	x4, x4, #0x2e0
    46c0:	mov	w7, #0x0                   	// #0
    46c4:	mov	w6, #0x1                   	// #1
    46c8:	mov	w5, #0x0                   	// #0
    46cc:	mov	x2, #0x0                   	// #0
    46d0:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    46d4:	cbnz	x0, 4670 <PyThread_acquire_lock@plt+0x1cb0>
    46d8:	mov	x0, #0x0                   	// #0
    46dc:	b	4684 <PyThread_acquire_lock@plt+0x1cc4>
    46e0:	sub	sp, sp, #0x40
    46e4:	mov	x0, x1
    46e8:	mov	x1, x2
    46ec:	mov	x2, x3
    46f0:	stp	x29, x30, [sp, #16]
    46f4:	add	x29, sp, #0x10
    46f8:	stp	x19, x20, [sp, #32]
    46fc:	cbz	x3, 4764 <PyThread_acquire_lock@plt+0x1da4>
    4700:	ldr	x19, [x3, #16]
    4704:	add	x19, x1, x19
    4708:	add	x3, sp, #0x38
    470c:	str	x3, [sp]
    4710:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    4714:	add	x4, x4, #0x260
    4718:	mov	x3, x2
    471c:	add	x4, x4, #0x320
    4720:	mov	w7, #0x0                   	// #0
    4724:	mov	w6, #0x1                   	// #1
    4728:	mov	w5, #0x0                   	// #0
    472c:	mov	x2, #0x0                   	// #0
    4730:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    4734:	cbz	x0, 47a8 <PyThread_acquire_lock@plt+0x1de8>
    4738:	mov	x20, #0x0                   	// #0
    473c:	cbz	x19, 4744 <PyThread_acquire_lock@plt+0x1d84>
    4740:	ldr	x20, [x0]
    4744:	bl	27c0 <EVP_sha224@plt>
    4748:	mov	x1, x0
    474c:	mov	x0, x20
    4750:	bl	4338 <PyThread_acquire_lock@plt+0x1978>
    4754:	ldp	x29, x30, [sp, #16]
    4758:	ldp	x19, x20, [sp, #32]
    475c:	add	sp, sp, #0x40
    4760:	ret
    4764:	tbnz	x1, #63, 477c <PyThread_acquire_lock@plt+0x1dbc>
    4768:	cmp	x0, #0x0
    476c:	mov	x19, x1
    4770:	ccmp	x1, #0x1, #0x0, ne  // ne = any
    4774:	b.le	4738 <PyThread_acquire_lock@plt+0x1d78>
    4778:	b	4708 <PyThread_acquire_lock@plt+0x1d48>
    477c:	add	x2, sp, #0x38
    4780:	str	x2, [sp]
    4784:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    4788:	add	x4, x4, #0x260
    478c:	add	x4, x4, #0x320
    4790:	mov	w7, #0x0                   	// #0
    4794:	mov	w6, #0x1                   	// #1
    4798:	mov	w5, #0x0                   	// #0
    479c:	mov	x2, #0x0                   	// #0
    47a0:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    47a4:	cbnz	x0, 4740 <PyThread_acquire_lock@plt+0x1d80>
    47a8:	mov	x0, #0x0                   	// #0
    47ac:	b	4754 <PyThread_acquire_lock@plt+0x1d94>
    47b0:	sub	sp, sp, #0x40
    47b4:	mov	x0, x1
    47b8:	mov	x1, x2
    47bc:	mov	x2, x3
    47c0:	stp	x29, x30, [sp, #16]
    47c4:	add	x29, sp, #0x10
    47c8:	stp	x19, x20, [sp, #32]
    47cc:	cbz	x3, 4834 <PyThread_acquire_lock@plt+0x1e74>
    47d0:	ldr	x19, [x3, #16]
    47d4:	add	x19, x1, x19
    47d8:	add	x3, sp, #0x38
    47dc:	str	x3, [sp]
    47e0:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    47e4:	add	x4, x4, #0x260
    47e8:	mov	x3, x2
    47ec:	add	x4, x4, #0x360
    47f0:	mov	w7, #0x0                   	// #0
    47f4:	mov	w6, #0x1                   	// #1
    47f8:	mov	w5, #0x0                   	// #0
    47fc:	mov	x2, #0x0                   	// #0
    4800:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    4804:	cbz	x0, 4878 <PyThread_acquire_lock@plt+0x1eb8>
    4808:	mov	x20, #0x0                   	// #0
    480c:	cbz	x19, 4814 <PyThread_acquire_lock@plt+0x1e54>
    4810:	ldr	x20, [x0]
    4814:	bl	2820 <EVP_sha1@plt>
    4818:	mov	x1, x0
    481c:	mov	x0, x20
    4820:	bl	4338 <PyThread_acquire_lock@plt+0x1978>
    4824:	ldp	x29, x30, [sp, #16]
    4828:	ldp	x19, x20, [sp, #32]
    482c:	add	sp, sp, #0x40
    4830:	ret
    4834:	tbnz	x1, #63, 484c <PyThread_acquire_lock@plt+0x1e8c>
    4838:	cmp	x0, #0x0
    483c:	mov	x19, x1
    4840:	ccmp	x1, #0x1, #0x0, ne  // ne = any
    4844:	b.le	4808 <PyThread_acquire_lock@plt+0x1e48>
    4848:	b	47d8 <PyThread_acquire_lock@plt+0x1e18>
    484c:	add	x2, sp, #0x38
    4850:	str	x2, [sp]
    4854:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    4858:	add	x4, x4, #0x260
    485c:	add	x4, x4, #0x360
    4860:	mov	w7, #0x0                   	// #0
    4864:	mov	w6, #0x1                   	// #1
    4868:	mov	w5, #0x0                   	// #0
    486c:	mov	x2, #0x0                   	// #0
    4870:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    4874:	cbnz	x0, 4810 <PyThread_acquire_lock@plt+0x1e50>
    4878:	mov	x0, #0x0                   	// #0
    487c:	b	4824 <PyThread_acquire_lock@plt+0x1e64>
    4880:	sub	sp, sp, #0x40
    4884:	mov	x0, x1
    4888:	mov	x1, x2
    488c:	mov	x2, x3
    4890:	stp	x29, x30, [sp, #16]
    4894:	add	x29, sp, #0x10
    4898:	stp	x19, x20, [sp, #32]
    489c:	cbz	x3, 4904 <PyThread_acquire_lock@plt+0x1f44>
    48a0:	ldr	x19, [x3, #16]
    48a4:	add	x19, x1, x19
    48a8:	add	x3, sp, #0x38
    48ac:	str	x3, [sp]
    48b0:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    48b4:	add	x4, x4, #0x260
    48b8:	mov	x3, x2
    48bc:	add	x4, x4, #0x3a0
    48c0:	mov	w7, #0x0                   	// #0
    48c4:	mov	w6, #0x1                   	// #1
    48c8:	mov	w5, #0x0                   	// #0
    48cc:	mov	x2, #0x0                   	// #0
    48d0:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    48d4:	cbz	x0, 4948 <PyThread_acquire_lock@plt+0x1f88>
    48d8:	mov	x20, #0x0                   	// #0
    48dc:	cbz	x19, 48e4 <PyThread_acquire_lock@plt+0x1f24>
    48e0:	ldr	x20, [x0]
    48e4:	bl	2690 <EVP_md5@plt>
    48e8:	mov	x1, x0
    48ec:	mov	x0, x20
    48f0:	bl	4338 <PyThread_acquire_lock@plt+0x1978>
    48f4:	ldp	x29, x30, [sp, #16]
    48f8:	ldp	x19, x20, [sp, #32]
    48fc:	add	sp, sp, #0x40
    4900:	ret
    4904:	tbnz	x1, #63, 491c <PyThread_acquire_lock@plt+0x1f5c>
    4908:	cmp	x0, #0x0
    490c:	mov	x19, x1
    4910:	ccmp	x1, #0x1, #0x0, ne  // ne = any
    4914:	b.le	48d8 <PyThread_acquire_lock@plt+0x1f18>
    4918:	b	48a8 <PyThread_acquire_lock@plt+0x1ee8>
    491c:	add	x2, sp, #0x38
    4920:	str	x2, [sp]
    4924:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    4928:	add	x4, x4, #0x260
    492c:	add	x4, x4, #0x3a0
    4930:	mov	w7, #0x0                   	// #0
    4934:	mov	w6, #0x1                   	// #1
    4938:	mov	w5, #0x0                   	// #0
    493c:	mov	x2, #0x0                   	// #0
    4940:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    4944:	cbnz	x0, 48e0 <PyThread_acquire_lock@plt+0x1f20>
    4948:	mov	x0, #0x0                   	// #0
    494c:	b	48f4 <PyThread_acquire_lock@plt+0x1f34>
    4950:	sub	sp, sp, #0xb0
    4954:	mov	x5, x1
    4958:	mov	x1, x2
    495c:	stp	x29, x30, [sp, #16]
    4960:	add	x29, sp, #0x10
    4964:	stp	x19, x20, [sp, #32]
    4968:	cbz	x3, 4a6c <PyThread_acquire_lock@plt+0x20ac>
    496c:	ldr	x19, [x3, #16]
    4970:	add	x19, x2, x19
    4974:	add	x0, sp, #0x50
    4978:	str	x0, [sp]
    497c:	adrp	x4, 17000 <PyInit__hashlib@@Base+0x11f28>
    4980:	mov	x0, x5
    4984:	add	x4, x4, #0x260
    4988:	mov	w5, #0x1                   	// #1
    498c:	add	x4, x4, #0x3e0
    4990:	mov	w7, #0x0                   	// #0
    4994:	mov	w6, #0x2                   	// #2
    4998:	mov	x2, #0x0                   	// #0
    499c:	bl	28c0 <_PyArg_UnpackKeywords@plt>
    49a0:	mov	x5, x0
    49a4:	cbz	x0, 4c64 <PyThread_acquire_lock@plt+0x22a4>
    49a8:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    49ac:	add	x2, sp, #0x48
    49b0:	add	x1, x1, #0x6d8
    49b4:	cmp	x19, #0x1
    49b8:	ldr	x0, [x5]
    49bc:	b.eq	4a98 <PyThread_acquire_lock@plt+0x20d8>  // b.none
    49c0:	ldr	x19, [x5, #8]
    49c4:	stp	xzr, xzr, [sp, #96]
    49c8:	stp	xzr, xzr, [sp, #112]
    49cc:	stp	xzr, xzr, [sp, #128]
    49d0:	stp	xzr, xzr, [sp, #144]
    49d4:	stp	xzr, xzr, [sp, #160]
    49d8:	bl	2880 <_PyArg_Parse_SizeT@plt>
    49dc:	cbz	w0, 4c44 <PyThread_acquire_lock@plt+0x2284>
    49e0:	cbz	x19, 4ab4 <PyThread_acquire_lock@plt+0x20f4>
    49e4:	ldr	x0, [x19, #8]
    49e8:	ldr	x1, [x0, #168]
    49ec:	tbnz	w1, #28, 4c6c <PyThread_acquire_lock@plt+0x22ac>
    49f0:	ldr	x0, [x0, #160]
    49f4:	cbz	x0, 4bf0 <PyThread_acquire_lock@plt+0x2230>
    49f8:	ldr	x0, [x0]
    49fc:	cbz	x0, 4bf0 <PyThread_acquire_lock@plt+0x2230>
    4a00:	str	x21, [sp, #48]
    4a04:	add	x21, sp, #0x60
    4a08:	mov	x0, x19
    4a0c:	mov	x1, x21
    4a10:	mov	w2, #0x0                   	// #0
    4a14:	bl	2750 <PyObject_GetBuffer@plt>
    4a18:	cmn	w0, #0x1
    4a1c:	b.eq	4cb8 <PyThread_acquire_lock@plt+0x22f8>  // b.none
    4a20:	ldr	w0, [sp, #132]
    4a24:	cmp	w0, #0x1
    4a28:	b.gt	4c8c <PyThread_acquire_lock@plt+0x22cc>
    4a2c:	ldr	x20, [sp, #72]
    4a30:	mov	x0, x20
    4a34:	bl	2640 <EVP_get_digestbyname@plt>
    4a38:	cbz	x0, 4aec <PyThread_acquire_lock@plt+0x212c>
    4a3c:	ldr	x1, [sp, #96]
    4a40:	ldr	x2, [sp, #112]
    4a44:	bl	4198 <PyThread_acquire_lock@plt+0x17d8>
    4a48:	mov	x20, x0
    4a4c:	mov	x0, x21
    4a50:	bl	2970 <PyBuffer_Release@plt>
    4a54:	ldr	x21, [sp, #48]
    4a58:	mov	x0, x20
    4a5c:	ldp	x29, x30, [sp, #16]
    4a60:	ldp	x19, x20, [sp, #32]
    4a64:	add	sp, sp, #0xb0
    4a68:	ret
    4a6c:	sub	x0, x2, #0x1
    4a70:	mov	x19, x2
    4a74:	cmp	x0, #0x1
    4a78:	b.hi	4974 <PyThread_acquire_lock@plt+0x1fb4>  // b.pmore
    4a7c:	cbz	x5, 4974 <PyThread_acquire_lock@plt+0x1fb4>
    4a80:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4a84:	add	x2, sp, #0x48
    4a88:	add	x1, x1, #0x6d8
    4a8c:	cmp	x19, #0x1
    4a90:	ldr	x0, [x5]
    4a94:	b.ne	49c0 <PyThread_acquire_lock@plt+0x2000>  // b.any
    4a98:	stp	xzr, xzr, [sp, #96]
    4a9c:	stp	xzr, xzr, [sp, #112]
    4aa0:	stp	xzr, xzr, [sp, #128]
    4aa4:	stp	xzr, xzr, [sp, #144]
    4aa8:	stp	xzr, xzr, [sp, #160]
    4aac:	bl	2880 <_PyArg_Parse_SizeT@plt>
    4ab0:	cbz	w0, 4c44 <PyThread_acquire_lock@plt+0x2284>
    4ab4:	ldr	x20, [sp, #72]
    4ab8:	mov	x0, x20
    4abc:	bl	2640 <EVP_get_digestbyname@plt>
    4ac0:	mov	x19, x0
    4ac4:	cbz	x0, 4af0 <PyThread_acquire_lock@plt+0x2130>
    4ac8:	ldr	x1, [sp, #96]
    4acc:	ldr	x2, [sp, #112]
    4ad0:	bl	4198 <PyThread_acquire_lock@plt+0x17d8>
    4ad4:	mov	x20, x0
    4ad8:	mov	x0, x20
    4adc:	ldp	x29, x30, [sp, #16]
    4ae0:	ldp	x19, x20, [sp, #32]
    4ae4:	add	sp, sp, #0xb0
    4ae8:	ret
    4aec:	ldr	x21, [sp, #48]
    4af0:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4af4:	mov	x0, x20
    4af8:	add	x1, x1, #0x5d0
    4afc:	bl	28a0 <strcmp@plt>
    4b00:	cbz	w0, 4c20 <PyThread_acquire_lock@plt+0x2260>
    4b04:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4b08:	mov	x0, x20
    4b0c:	add	x1, x1, #0x6f8
    4b10:	bl	28a0 <strcmp@plt>
    4b14:	cbz	w0, 4c20 <PyThread_acquire_lock@plt+0x2260>
    4b18:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4b1c:	mov	x0, x20
    4b20:	add	x1, x1, #0x630
    4b24:	bl	28a0 <strcmp@plt>
    4b28:	cbz	w0, 4cc4 <PyThread_acquire_lock@plt+0x2304>
    4b2c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4b30:	mov	x0, x20
    4b34:	add	x1, x1, #0x708
    4b38:	bl	28a0 <strcmp@plt>
    4b3c:	cbz	w0, 4cc4 <PyThread_acquire_lock@plt+0x2304>
    4b40:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4b44:	mov	x0, x20
    4b48:	add	x1, x1, #0x610
    4b4c:	bl	28a0 <strcmp@plt>
    4b50:	cbz	w0, 4ccc <PyThread_acquire_lock@plt+0x230c>
    4b54:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4b58:	mov	x0, x20
    4b5c:	add	x1, x1, #0x5f0
    4b60:	bl	28a0 <strcmp@plt>
    4b64:	cbz	w0, 4cd4 <PyThread_acquire_lock@plt+0x2314>
    4b68:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4b6c:	mov	x0, x20
    4b70:	add	x1, x1, #0x600
    4b74:	bl	28a0 <strcmp@plt>
    4b78:	cbz	w0, 4cdc <PyThread_acquire_lock@plt+0x231c>
    4b7c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4b80:	mov	x0, x20
    4b84:	add	x1, x1, #0x5e0
    4b88:	bl	28a0 <strcmp@plt>
    4b8c:	cbz	w0, 4ce4 <PyThread_acquire_lock@plt+0x2324>
    4b90:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4b94:	mov	x0, x20
    4b98:	add	x1, x1, #0x640
    4b9c:	bl	28a0 <strcmp@plt>
    4ba0:	cbz	w0, 4cec <PyThread_acquire_lock@plt+0x232c>
    4ba4:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4ba8:	mov	x0, x20
    4bac:	add	x1, x1, #0x620
    4bb0:	bl	28a0 <strcmp@plt>
    4bb4:	cbz	w0, 4cf4 <PyThread_acquire_lock@plt+0x2334>
    4bb8:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4bbc:	mov	x0, x20
    4bc0:	add	x1, x1, #0x718
    4bc4:	bl	28a0 <strcmp@plt>
    4bc8:	cbz	w0, 4cfc <PyThread_acquire_lock@plt+0x233c>
    4bcc:	mov	x0, x20
    4bd0:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4bd4:	add	x1, x1, #0x728
    4bd8:	bl	28a0 <strcmp@plt>
    4bdc:	mov	w1, w0
    4be0:	mov	x0, #0x0                   	// #0
    4be4:	cbnz	w1, 4c24 <PyThread_acquire_lock@plt+0x2264>
    4be8:	bl	28b0 <EVP_blake2b512@plt>
    4bec:	b	4c24 <PyThread_acquire_lock@plt+0x2264>
    4bf0:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    4bf4:	mov	x20, #0x0                   	// #0
    4bf8:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4bfc:	add	x1, x1, #0x688
    4c00:	ldr	x0, [x0, #3992]
    4c04:	ldr	x0, [x0]
    4c08:	bl	2920 <PyErr_SetString@plt>
    4c0c:	mov	x0, x20
    4c10:	ldp	x29, x30, [sp, #16]
    4c14:	ldp	x19, x20, [sp, #32]
    4c18:	add	sp, sp, #0xb0
    4c1c:	ret
    4c20:	bl	2570 <EVP_sha512_224@plt>
    4c24:	ldr	x1, [sp, #96]
    4c28:	ldr	x2, [sp, #112]
    4c2c:	bl	4198 <PyThread_acquire_lock@plt+0x17d8>
    4c30:	mov	x20, x0
    4c34:	cbz	x19, 4a58 <PyThread_acquire_lock@plt+0x2098>
    4c38:	str	x21, [sp, #48]
    4c3c:	add	x21, sp, #0x60
    4c40:	b	4a4c <PyThread_acquire_lock@plt+0x208c>
    4c44:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    4c48:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4c4c:	mov	x20, #0x0                   	// #0
    4c50:	add	x1, x1, #0x6e0
    4c54:	ldr	x0, [x0, #3992]
    4c58:	ldr	x0, [x0]
    4c5c:	bl	2920 <PyErr_SetString@plt>
    4c60:	b	4a58 <PyThread_acquire_lock@plt+0x2098>
    4c64:	mov	x20, #0x0                   	// #0
    4c68:	b	4a58 <PyThread_acquire_lock@plt+0x2098>
    4c6c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    4c70:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4c74:	mov	x20, #0x0                   	// #0
    4c78:	add	x1, x1, #0x658
    4c7c:	ldr	x0, [x0, #3992]
    4c80:	ldr	x0, [x0]
    4c84:	bl	2920 <PyErr_SetString@plt>
    4c88:	b	4a58 <PyThread_acquire_lock@plt+0x2098>
    4c8c:	adrp	x0, 16000 <PyInit__hashlib@@Base+0x10f28>
    4c90:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4c94:	add	x1, x1, #0x6b8
    4c98:	mov	x20, #0x0                   	// #0
    4c9c:	ldr	x0, [x0, #4016]
    4ca0:	ldr	x0, [x0]
    4ca4:	bl	2920 <PyErr_SetString@plt>
    4ca8:	mov	x0, x21
    4cac:	bl	2970 <PyBuffer_Release@plt>
    4cb0:	ldr	x21, [sp, #48]
    4cb4:	b	4a58 <PyThread_acquire_lock@plt+0x2098>
    4cb8:	mov	x20, #0x0                   	// #0
    4cbc:	ldr	x21, [sp, #48]
    4cc0:	b	4a58 <PyThread_acquire_lock@plt+0x2098>
    4cc4:	bl	2960 <EVP_sha512_256@plt>
    4cc8:	b	4c24 <PyThread_acquire_lock@plt+0x2264>
    4ccc:	bl	2900 <EVP_sha3_224@plt>
    4cd0:	b	4c24 <PyThread_acquire_lock@plt+0x2264>
    4cd4:	bl	27d0 <EVP_sha3_256@plt>
    4cd8:	b	4c24 <PyThread_acquire_lock@plt+0x2264>
    4cdc:	bl	2790 <EVP_sha3_384@plt>
    4ce0:	b	4c24 <PyThread_acquire_lock@plt+0x2264>
    4ce4:	bl	25f0 <EVP_sha3_512@plt>
    4ce8:	b	4c24 <PyThread_acquire_lock@plt+0x2264>
    4cec:	bl	2680 <EVP_shake128@plt>
    4cf0:	b	4c24 <PyThread_acquire_lock@plt+0x2264>
    4cf4:	bl	25b0 <EVP_shake256@plt>
    4cf8:	b	4c24 <PyThread_acquire_lock@plt+0x2264>
    4cfc:	bl	2580 <EVP_blake2s256@plt>
    4d00:	b	4c24 <PyThread_acquire_lock@plt+0x2264>
    4d04:	nop
    4d08:	stp	x29, x30, [sp, #-32]!
    4d0c:	mov	x29, sp
    4d10:	ldr	x0, [x0, #16]
    4d14:	bl	2590 <EVP_MD_CTX_md@plt>
    4d18:	bl	2530 <EVP_MD_type@plt>
    4d1c:	cmp	w0, #0x446
    4d20:	b.eq	4ec8 <PyThread_acquire_lock@plt+0x2508>  // b.none
    4d24:	str	x19, [sp, #16]
    4d28:	mov	w19, w0
    4d2c:	b.gt	4d60 <PyThread_acquire_lock@plt+0x23a0>
    4d30:	cmp	w0, #0x2a2
    4d34:	b.eq	4eb8 <PyThread_acquire_lock@plt+0x24f8>  // b.none
    4d38:	b.le	4da8 <PyThread_acquire_lock@plt+0x23e8>
    4d3c:	cmp	w0, #0x420
    4d40:	b.eq	4e6c <PyThread_acquire_lock@plt+0x24ac>  // b.none
    4d44:	cmp	w0, #0x421
    4d48:	b.ne	4d90 <PyThread_acquire_lock@plt+0x23d0>  // b.any
    4d4c:	ldr	x19, [sp, #16]
    4d50:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4d54:	add	x0, x0, #0x5c8
    4d58:	ldp	x29, x30, [sp], #32
    4d5c:	b	2620 <PyUnicode_FromString@plt>
    4d60:	cmp	w0, #0x44a
    4d64:	b.eq	4ea8 <PyThread_acquire_lock@plt+0x24e8>  // b.none
    4d68:	b.le	4e04 <PyThread_acquire_lock@plt+0x2444>
    4d6c:	cmp	w0, #0x44c
    4d70:	b.eq	4e5c <PyThread_acquire_lock@plt+0x249c>  // b.none
    4d74:	cmp	w0, #0x44d
    4d78:	b.ne	4dec <PyThread_acquire_lock@plt+0x242c>  // b.any
    4d7c:	ldr	x19, [sp, #16]
    4d80:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4d84:	ldp	x29, x30, [sp], #32
    4d88:	add	x0, x0, #0x620
    4d8c:	b	2620 <PyUnicode_FromString@plt>
    4d90:	cmp	w0, #0x2a3
    4d94:	b.ne	4e8c <PyThread_acquire_lock@plt+0x24cc>  // b.any
    4d98:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4d9c:	add	x0, x0, #0x820
    4da0:	ldr	x19, [sp, #16]
    4da4:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4da8:	cmp	w0, #0x2a0
    4dac:	b.eq	4e7c <PyThread_acquire_lock@plt+0x24bc>  // b.none
    4db0:	b.le	4dcc <PyThread_acquire_lock@plt+0x240c>
    4db4:	cmp	w0, #0x2a1
    4db8:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4dbc:	add	x0, x1, #0x840
    4dc0:	b.ne	4e8c <PyThread_acquire_lock@plt+0x24cc>  // b.any
    4dc4:	ldr	x19, [sp, #16]
    4dc8:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4dcc:	cmp	w0, #0x4
    4dd0:	b.eq	4e3c <PyThread_acquire_lock@plt+0x247c>  // b.none
    4dd4:	cmp	w0, #0x40
    4dd8:	b.ne	4e8c <PyThread_acquire_lock@plt+0x24cc>  // b.any
    4ddc:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4de0:	add	x0, x0, #0x810
    4de4:	ldr	x19, [sp, #16]
    4de8:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4dec:	cmp	w0, #0x44b
    4df0:	b.ne	4e8c <PyThread_acquire_lock@plt+0x24cc>  // b.any
    4df4:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4df8:	add	x0, x0, #0x5e0
    4dfc:	ldr	x19, [sp, #16]
    4e00:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4e04:	cmp	w0, #0x448
    4e08:	b.eq	4e4c <PyThread_acquire_lock@plt+0x248c>  // b.none
    4e0c:	cmp	w0, #0x449
    4e10:	b.ne	4e24 <PyThread_acquire_lock@plt+0x2464>  // b.any
    4e14:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4e18:	add	x0, x0, #0x5f0
    4e1c:	ldr	x19, [sp, #16]
    4e20:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4e24:	cmp	w0, #0x447
    4e28:	b.ne	4e8c <PyThread_acquire_lock@plt+0x24cc>  // b.any
    4e2c:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4e30:	add	x0, x0, #0x630
    4e34:	ldr	x19, [sp, #16]
    4e38:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4e3c:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4e40:	add	x0, x0, #0x800
    4e44:	ldr	x19, [sp, #16]
    4e48:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4e4c:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4e50:	add	x0, x0, #0x610
    4e54:	ldr	x19, [sp, #16]
    4e58:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4e5c:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4e60:	add	x0, x0, #0x640
    4e64:	ldr	x19, [sp, #16]
    4e68:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4e6c:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4e70:	add	x0, x0, #0x650
    4e74:	ldr	x19, [sp, #16]
    4e78:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4e7c:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4e80:	add	x0, x0, #0x830
    4e84:	ldr	x19, [sp, #16]
    4e88:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4e8c:	mov	w0, w19
    4e90:	bl	2600 <OBJ_nid2ln@plt>
    4e94:	cbnz	x0, 4dc4 <PyThread_acquire_lock@plt+0x2404>
    4e98:	mov	w0, w19
    4e9c:	bl	2930 <OBJ_nid2sn@plt>
    4ea0:	ldr	x19, [sp, #16]
    4ea4:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4ea8:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4eac:	add	x0, x0, #0x600
    4eb0:	ldr	x19, [sp, #16]
    4eb4:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4eb8:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4ebc:	add	x0, x0, #0x850
    4ec0:	ldr	x19, [sp, #16]
    4ec4:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4ec8:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4ecc:	add	x0, x0, #0x5d0
    4ed0:	b	4d58 <PyThread_acquire_lock@plt+0x2398>
    4ed4:	nop
    4ed8:	stp	x29, x30, [sp, #-32]!
    4edc:	mov	x29, sp
    4ee0:	stp	x19, x20, [sp, #16]
    4ee4:	mov	x19, x0
    4ee8:	ldr	x0, [x0, #16]
    4eec:	bl	2590 <EVP_MD_CTX_md@plt>
    4ef0:	bl	2530 <EVP_MD_type@plt>
    4ef4:	cmp	w0, #0x446
    4ef8:	b.eq	50c8 <PyThread_acquire_lock@plt+0x2708>  // b.none
    4efc:	mov	w20, w0
    4f00:	b.gt	4f70 <PyThread_acquire_lock@plt+0x25b0>
    4f04:	cmp	w0, #0x2a2
    4f08:	b.eq	50bc <PyThread_acquire_lock@plt+0x26fc>  // b.none
    4f0c:	b.le	4fc8 <PyThread_acquire_lock@plt+0x2608>
    4f10:	cmp	w0, #0x420
    4f14:	b.eq	5080 <PyThread_acquire_lock@plt+0x26c0>  // b.none
    4f18:	cmp	w0, #0x421
    4f1c:	b.ne	4fb4 <PyThread_acquire_lock@plt+0x25f4>  // b.any
    4f20:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4f24:	add	x0, x1, #0x5c8
    4f28:	bl	2620 <PyUnicode_FromString@plt>
    4f2c:	mov	x20, x0
    4f30:	cbz	x0, 4fa0 <PyThread_acquire_lock@plt+0x25e0>
    4f34:	nop
    4f38:	mov	x2, x19
    4f3c:	mov	x1, x20
    4f40:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    4f44:	add	x0, x0, #0x738
    4f48:	bl	26a0 <PyUnicode_FromFormat@plt>
    4f4c:	mov	x19, x0
    4f50:	ldr	x1, [x20]
    4f54:	sub	x1, x1, #0x1
    4f58:	str	x1, [x20]
    4f5c:	cbz	x1, 508c <PyThread_acquire_lock@plt+0x26cc>
    4f60:	mov	x0, x19
    4f64:	ldp	x19, x20, [sp, #16]
    4f68:	ldp	x29, x30, [sp], #32
    4f6c:	ret
    4f70:	cmp	w0, #0x44a
    4f74:	b.eq	50b0 <PyThread_acquire_lock@plt+0x26f0>  // b.none
    4f78:	b.le	5010 <PyThread_acquire_lock@plt+0x2650>
    4f7c:	cmp	w0, #0x44c
    4f80:	b.eq	5068 <PyThread_acquire_lock@plt+0x26a8>  // b.none
    4f84:	cmp	w0, #0x44d
    4f88:	b.ne	4ffc <PyThread_acquire_lock@plt+0x263c>  // b.any
    4f8c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4f90:	add	x0, x1, #0x620
    4f94:	bl	2620 <PyUnicode_FromString@plt>
    4f98:	mov	x20, x0
    4f9c:	cbnz	x0, 4f38 <PyThread_acquire_lock@plt+0x2578>
    4fa0:	mov	x19, #0x0                   	// #0
    4fa4:	mov	x0, x19
    4fa8:	ldp	x19, x20, [sp, #16]
    4fac:	ldp	x29, x30, [sp], #32
    4fb0:	ret
    4fb4:	cmp	w0, #0x2a3
    4fb8:	b.ne	4fe4 <PyThread_acquire_lock@plt+0x2624>  // b.any
    4fbc:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4fc0:	add	x0, x1, #0x820
    4fc4:	b	4f28 <PyThread_acquire_lock@plt+0x2568>
    4fc8:	cmp	w0, #0x2a0
    4fcc:	b.eq	50a4 <PyThread_acquire_lock@plt+0x26e4>  // b.none
    4fd0:	b.le	502c <PyThread_acquire_lock@plt+0x266c>
    4fd4:	cmp	w0, #0x2a1
    4fd8:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    4fdc:	add	x0, x1, #0x840
    4fe0:	b.eq	4f28 <PyThread_acquire_lock@plt+0x2568>  // b.none
    4fe4:	mov	w0, w20
    4fe8:	bl	2600 <OBJ_nid2ln@plt>
    4fec:	cbnz	x0, 4f28 <PyThread_acquire_lock@plt+0x2568>
    4ff0:	mov	w0, w20
    4ff4:	bl	2930 <OBJ_nid2sn@plt>
    4ff8:	b	4f28 <PyThread_acquire_lock@plt+0x2568>
    4ffc:	cmp	w0, #0x44b
    5000:	b.ne	4fe4 <PyThread_acquire_lock@plt+0x2624>  // b.any
    5004:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    5008:	add	x0, x1, #0x5e0
    500c:	b	4f28 <PyThread_acquire_lock@plt+0x2568>
    5010:	cmp	w0, #0x448
    5014:	b.eq	5074 <PyThread_acquire_lock@plt+0x26b4>  // b.none
    5018:	cmp	w0, #0x449
    501c:	b.ne	5048 <PyThread_acquire_lock@plt+0x2688>  // b.any
    5020:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    5024:	add	x0, x1, #0x5f0
    5028:	b	4f28 <PyThread_acquire_lock@plt+0x2568>
    502c:	cmp	w0, #0x4
    5030:	b.eq	505c <PyThread_acquire_lock@plt+0x269c>  // b.none
    5034:	cmp	w0, #0x40
    5038:	b.ne	4fe4 <PyThread_acquire_lock@plt+0x2624>  // b.any
    503c:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    5040:	add	x0, x1, #0x810
    5044:	b	4f28 <PyThread_acquire_lock@plt+0x2568>
    5048:	cmp	w0, #0x447
    504c:	b.ne	4fe4 <PyThread_acquire_lock@plt+0x2624>  // b.any
    5050:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    5054:	add	x0, x1, #0x630
    5058:	b	4f28 <PyThread_acquire_lock@plt+0x2568>
    505c:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    5060:	add	x0, x0, #0x800
    5064:	b	4f28 <PyThread_acquire_lock@plt+0x2568>
    5068:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    506c:	add	x0, x0, #0x640
    5070:	b	4f28 <PyThread_acquire_lock@plt+0x2568>
    5074:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    5078:	add	x0, x0, #0x610
    507c:	b	4f28 <PyThread_acquire_lock@plt+0x2568>
    5080:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    5084:	add	x0, x0, #0x650
    5088:	b	4f28 <PyThread_acquire_lock@plt+0x2568>
    508c:	mov	x0, x20
    5090:	bl	28e0 <_Py_Dealloc@plt>
    5094:	mov	x0, x19
    5098:	ldp	x19, x20, [sp, #16]
    509c:	ldp	x29, x30, [sp], #32
    50a0:	ret
    50a4:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    50a8:	add	x0, x0, #0x830
    50ac:	b	4f28 <PyThread_acquire_lock@plt+0x2568>
    50b0:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    50b4:	add	x0, x0, #0x600
    50b8:	b	4f28 <PyThread_acquire_lock@plt+0x2568>
    50bc:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    50c0:	add	x0, x0, #0x850
    50c4:	b	4f28 <PyThread_acquire_lock@plt+0x2568>
    50c8:	adrp	x0, 5000 <PyThread_acquire_lock@plt+0x2640>
    50cc:	add	x0, x0, #0x5d0
    50d0:	b	4f28 <PyThread_acquire_lock@plt+0x2568>
    50d4:	nop

00000000000050d8 <PyInit__hashlib@@Base>:
    50d8:	stp	x29, x30, [sp, #-64]!
    50dc:	adrp	x1, 16000 <PyInit__hashlib@@Base+0x10f28>
    50e0:	mov	x29, sp
    50e4:	stp	x19, x20, [sp, #16]
    50e8:	adrp	x20, 17000 <PyInit__hashlib@@Base+0x11f28>
    50ec:	add	x20, x20, #0x260
    50f0:	str	x21, [sp, #32]
    50f4:	add	x21, x20, #0xc0
    50f8:	ldr	x1, [x1, #4040]
    50fc:	mov	x0, x21
    5100:	str	x1, [x21, #8]
    5104:	bl	25a0 <PyType_Ready@plt>
    5108:	tbnz	w0, #31, 51c8 <PyInit__hashlib@@Base+0xf0>
    510c:	add	x0, x20, #0x420
    5110:	mov	w1, #0x3f5                 	// #1013
    5114:	bl	2910 <PyModule_Create2@plt>
    5118:	mov	x19, x0
    511c:	cbz	x0, 51c8 <PyInit__hashlib@@Base+0xf0>
    5120:	mov	x0, #0x0                   	// #0
    5124:	bl	27a0 <PyFrozenSet_New@plt>
    5128:	str	x0, [sp, #48]
    512c:	cbz	x0, 51b8 <PyInit__hashlib@@Base+0xe0>
    5130:	add	x1, sp, #0x30
    5134:	adrp	x0, 3000 <PyThread_acquire_lock@plt+0x640>
    5138:	add	x0, x0, #0x990
    513c:	str	wzr, [sp, #56]
    5140:	bl	2710 <EVP_MD_do_all@plt>
    5144:	ldr	w0, [sp, #56]
    5148:	cbnz	w0, 519c <PyInit__hashlib@@Base+0xc4>
    514c:	ldr	x2, [sp, #48]
    5150:	cbz	x2, 51b8 <PyInit__hashlib@@Base+0xe0>
    5154:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    5158:	mov	x0, x19
    515c:	add	x1, x1, #0x750
    5160:	bl	2520 <PyModule_AddObject@plt>
    5164:	cbnz	w0, 51b8 <PyInit__hashlib@@Base+0xe0>
    5168:	ldr	x3, [x20, #192]
    516c:	mov	x2, x21
    5170:	mov	x0, x19
    5174:	adrp	x1, 5000 <PyThread_acquire_lock@plt+0x2640>
    5178:	add	x3, x3, #0x1
    517c:	add	x1, x1, #0x768
    5180:	str	x3, [x20, #192]
    5184:	bl	2520 <PyModule_AddObject@plt>
    5188:	mov	x0, x19
    518c:	ldp	x19, x20, [sp, #16]
    5190:	ldr	x21, [sp, #32]
    5194:	ldp	x29, x30, [sp], #64
    5198:	ret
    519c:	ldr	x0, [sp, #48]
    51a0:	ldr	x1, [x0]
    51a4:	sub	x1, x1, #0x1
    51a8:	str	x1, [x0]
    51ac:	cbnz	x1, 51b8 <PyInit__hashlib@@Base+0xe0>
    51b0:	bl	28e0 <_Py_Dealloc@plt>
    51b4:	nop
    51b8:	ldr	x0, [x19]
    51bc:	sub	x0, x0, #0x1
    51c0:	str	x0, [x19]
    51c4:	cbz	x0, 51e0 <PyInit__hashlib@@Base+0x108>
    51c8:	mov	x19, #0x0                   	// #0
    51cc:	mov	x0, x19
    51d0:	ldp	x19, x20, [sp, #16]
    51d4:	ldr	x21, [sp, #32]
    51d8:	ldp	x29, x30, [sp], #64
    51dc:	ret
    51e0:	mov	x0, x19
    51e4:	mov	x19, #0x0                   	// #0
    51e8:	bl	28e0 <_Py_Dealloc@plt>
    51ec:	b	51cc <PyInit__hashlib@@Base+0xf4>

Disassembly of section .fini:

00000000000051f0 <.fini>:
    51f0:	stp	x29, x30, [sp, #-16]!
    51f4:	mov	x29, sp
    51f8:	ldp	x29, x30, [sp], #16
    51fc:	ret
