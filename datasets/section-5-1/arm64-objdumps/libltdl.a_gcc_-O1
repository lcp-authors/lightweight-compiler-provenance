In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libltdl.a_gcc_-O1:

libltdl_libltdl_la-preopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <vm_close>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

0000000000000008 <free_symlists>:
   8:	stp	x29, x30, [sp, #-32]!
   c:	mov	x29, sp
  10:	str	x19, [sp, #16]
  14:	adrp	x0, 0 <vm_close>
  18:	ldr	x19, [x0]
  1c:	cbz	x19, 30 <free_symlists+0x28>
  20:	mov	x0, x19
  24:	ldr	x19, [x19]
  28:	bl	0 <free>
  2c:	cbnz	x19, 20 <free_symlists+0x18>
  30:	adrp	x0, 0 <vm_close>
  34:	str	xzr, [x0]
  38:	mov	w0, #0x0                   	// #0
  3c:	ldr	x19, [sp, #16]
  40:	ldp	x29, x30, [sp], #32
  44:	ret

0000000000000048 <vl_exit>:
  48:	stp	x29, x30, [sp, #-16]!
  4c:	mov	x29, sp
  50:	adrp	x0, 0 <vm_close>
  54:	str	xzr, [x0]
  58:	bl	8 <free_symlists>
  5c:	mov	w0, #0x0                   	// #0
  60:	ldp	x29, x30, [sp], #16
  64:	ret

0000000000000068 <vm_sym>:
  68:	stp	x29, x30, [sp, #-48]!
  6c:	mov	x29, sp
  70:	stp	x19, x20, [sp, #16]
  74:	str	x21, [sp, #32]
  78:	mov	x21, x1
  7c:	mov	x20, x2
  80:	ldr	x0, [x1, #16]
  84:	cbz	x0, a0 <vm_sym+0x38>
  88:	adrp	x1, 0 <vm_close>
  8c:	add	x1, x1, #0x0
  90:	bl	0 <strcmp>
  94:	add	x1, x21, #0x10
  98:	cmp	w0, #0x0
  9c:	csel	x21, x1, x21, eq  // eq = none
  a0:	add	x19, x21, #0x20
  a4:	ldr	x0, [x21, #32]
  a8:	cbz	x0, c0 <vm_sym+0x58>
  ac:	mov	x1, x20
  b0:	bl	0 <strcmp>
  b4:	cbz	w0, e0 <vm_sym+0x78>
  b8:	ldr	x0, [x19, #16]!
  bc:	cbnz	x0, ac <vm_sym+0x44>
  c0:	mov	w0, #0xa                   	// #10
  c4:	bl	0 <lt__error_string>
  c8:	bl	0 <lt__set_last_error>
  cc:	mov	x0, #0x0                   	// #0
  d0:	ldp	x19, x20, [sp, #16]
  d4:	ldr	x21, [sp, #32]
  d8:	ldp	x29, x30, [sp], #48
  dc:	ret
  e0:	ldr	x0, [x19, #8]
  e4:	b	d0 <vm_sym+0x68>

00000000000000e8 <vm_open>:
  e8:	stp	x29, x30, [sp, #-48]!
  ec:	mov	x29, sp
  f0:	stp	x21, x22, [sp, #32]
  f4:	adrp	x0, 0 <vm_close>
  f8:	ldr	x21, [x0]
  fc:	cbz	x21, 118 <vm_open+0x30>
 100:	stp	x19, x20, [sp, #16]
 104:	adrp	x0, 0 <vm_close>
 108:	add	x0, x0, #0x0
 10c:	cmp	x1, #0x0
 110:	csel	x20, x0, x1, eq  // eq = none
 114:	b	174 <vm_open+0x8c>
 118:	mov	w0, #0x7                   	// #7
 11c:	bl	0 <lt__error_string>
 120:	bl	0 <lt__set_last_error>
 124:	mov	x22, x21
 128:	b	15c <vm_open+0x74>
 12c:	ldr	x0, [x19, #16]!
 130:	cbz	x0, 16c <vm_open+0x84>
 134:	ldr	x2, [x19, #8]
 138:	cbnz	x2, 12c <vm_open+0x44>
 13c:	mov	x1, x20
 140:	bl	0 <strcmp>
 144:	cbnz	w0, 12c <vm_open+0x44>
 148:	ldr	x0, [x19, #24]
 14c:	cbz	x0, 12c <vm_open+0x44>
 150:	ldr	x0, [x19, #16]
 154:	cbz	x0, 12c <vm_open+0x44>
 158:	ldp	x19, x20, [sp, #16]
 15c:	mov	x0, x22
 160:	ldp	x21, x22, [sp, #32]
 164:	ldp	x29, x30, [sp], #48
 168:	ret
 16c:	ldr	x21, [x21]
 170:	cbz	x21, 188 <vm_open+0xa0>
 174:	ldr	x22, [x21, #8]
 178:	ldr	x0, [x22]
 17c:	cbz	x0, 16c <vm_open+0x84>
 180:	mov	x19, x22
 184:	b	134 <vm_open+0x4c>
 188:	mov	w0, #0x5                   	// #5
 18c:	bl	0 <lt__error_string>
 190:	bl	0 <lt__set_last_error>
 194:	mov	x22, x21
 198:	ldp	x19, x20, [sp, #16]
 19c:	b	15c <vm_open+0x74>

00000000000001a0 <preopen_LTX_get_vtable>:
 1a0:	stp	x29, x30, [sp, #-32]!
 1a4:	mov	x29, sp
 1a8:	str	x19, [sp, #16]
 1ac:	mov	x19, x0
 1b0:	adrp	x1, 0 <vm_close>
 1b4:	ldr	x0, [x1]
 1b8:	cbz	x0, 1dc <preopen_LTX_get_vtable+0x3c>
 1bc:	ldr	x1, [x0]
 1c0:	cbz	x1, 1f4 <preopen_LTX_get_vtable+0x54>
 1c4:	ldr	x1, [x0, #56]
 1c8:	cmp	x1, x19
 1cc:	b.ne	24c <preopen_LTX_get_vtable+0xac>  // b.any
 1d0:	ldr	x19, [sp, #16]
 1d4:	ldp	x29, x30, [sp], #32
 1d8:	ret
 1dc:	mov	x0, #0x48                  	// #72
 1e0:	bl	0 <lt__zalloc>
 1e4:	adrp	x1, 0 <vm_close>
 1e8:	str	x0, [x1]
 1ec:	cbz	x0, 1d0 <preopen_LTX_get_vtable+0x30>
 1f0:	b	1bc <preopen_LTX_get_vtable+0x1c>
 1f4:	adrp	x1, 0 <vm_close>
 1f8:	add	x1, x1, #0x0
 1fc:	str	x1, [x0]
 200:	str	xzr, [x0, #8]
 204:	adrp	x1, 0 <vm_close>
 208:	add	x1, x1, #0x0
 20c:	str	x1, [x0, #16]
 210:	adrp	x1, 0 <vm_close>
 214:	add	x1, x1, #0x0
 218:	str	x1, [x0, #24]
 21c:	adrp	x1, 0 <vm_close>
 220:	add	x1, x1, #0x0
 224:	str	x1, [x0, #32]
 228:	adrp	x1, 0 <vm_close>
 22c:	add	x1, x1, #0x0
 230:	str	x1, [x0, #40]
 234:	adrp	x1, 0 <vm_close>
 238:	add	x1, x1, #0x0
 23c:	str	x1, [x0, #48]
 240:	str	x19, [x0, #56]
 244:	str	wzr, [x0, #64]
 248:	b	1d0 <preopen_LTX_get_vtable+0x30>
 24c:	mov	w0, #0x3                   	// #3
 250:	bl	0 <lt__error_string>
 254:	bl	0 <lt__set_last_error>
 258:	mov	x0, #0x0                   	// #0
 25c:	b	1d0 <preopen_LTX_get_vtable+0x30>

0000000000000260 <lt_dlpreload_default>:
 260:	adrp	x1, 0 <vm_close>
 264:	str	x0, [x1]
 268:	mov	w0, #0x0                   	// #0
 26c:	ret

0000000000000270 <lt_dlpreload>:
 270:	stp	x29, x30, [sp, #-32]!
 274:	mov	x29, sp
 278:	stp	x19, x20, [sp, #16]
 27c:	cbz	x0, 304 <lt_dlpreload+0x94>
 280:	mov	x19, x0
 284:	adrp	x0, 0 <vm_close>
 288:	ldr	x1, [x0]
 28c:	cbz	x1, 2a4 <lt_dlpreload+0x34>
 290:	ldr	x0, [x1, #8]
 294:	cmp	x19, x0
 298:	b.eq	2f0 <lt_dlpreload+0x80>  // b.none
 29c:	ldr	x1, [x1]
 2a0:	cbnz	x1, 290 <lt_dlpreload+0x20>
 2a4:	mov	x0, #0x10                  	// #16
 2a8:	bl	0 <lt__zalloc>
 2ac:	cbz	x0, 32c <lt_dlpreload+0xbc>
 2b0:	str	x19, [x0, #8]
 2b4:	adrp	x1, 0 <vm_close>
 2b8:	ldr	x2, [x1]
 2bc:	str	x2, [x0]
 2c0:	str	x0, [x1]
 2c4:	ldr	x0, [x19, #16]
 2c8:	mov	w20, #0x0                   	// #0
 2cc:	cbz	x0, 2f4 <lt_dlpreload+0x84>
 2d0:	adrp	x1, 0 <vm_close>
 2d4:	add	x1, x1, #0x0
 2d8:	bl	0 <strcmp>
 2dc:	mov	w20, w0
 2e0:	cbnz	w0, 324 <lt_dlpreload+0xb4>
 2e4:	ldr	x0, [x19, #24]
 2e8:	blr	x0
 2ec:	b	2f4 <lt_dlpreload+0x84>
 2f0:	mov	w20, #0x0                   	// #0
 2f4:	mov	w0, w20
 2f8:	ldp	x19, x20, [sp, #16]
 2fc:	ldp	x29, x30, [sp], #32
 300:	ret
 304:	bl	8 <free_symlists>
 308:	adrp	x0, 0 <vm_close>
 30c:	ldr	x0, [x0]
 310:	mov	w20, #0x0                   	// #0
 314:	cbz	x0, 2f4 <lt_dlpreload+0x84>
 318:	bl	270 <lt_dlpreload>
 31c:	mov	w20, w0
 320:	b	2f4 <lt_dlpreload+0x84>
 324:	mov	w20, #0x0                   	// #0
 328:	b	2f4 <lt_dlpreload+0x84>
 32c:	mov	w20, #0x1                   	// #1
 330:	b	2f4 <lt_dlpreload+0x84>

0000000000000334 <vl_init>:
 334:	adrp	x0, 0 <vm_close>
 338:	add	x1, x0, #0x0
 33c:	str	xzr, [x0]
 340:	ldr	x1, [x1, #16]
 344:	mov	w0, #0x0                   	// #0
 348:	cbz	x1, 364 <vl_init+0x30>
 34c:	stp	x29, x30, [sp, #-16]!
 350:	mov	x29, sp
 354:	mov	x0, x1
 358:	bl	270 <lt_dlpreload>
 35c:	ldp	x29, x30, [sp], #16
 360:	ret
 364:	ret

0000000000000368 <lt_dlpreload_open>:
 368:	stp	x29, x30, [sp, #-80]!
 36c:	mov	x29, sp
 370:	stp	x19, x20, [sp, #16]
 374:	stp	x21, x22, [sp, #32]
 378:	stp	x25, x26, [sp, #64]
 37c:	mov	x22, x0
 380:	adrp	x0, 0 <vm_close>
 384:	ldr	x19, [x0]
 388:	cbz	x19, 47c <lt_dlpreload_open+0x114>
 38c:	stp	x23, x24, [sp, #48]
 390:	mov	x26, x1
 394:	mov	w24, #0x0                   	// #0
 398:	mov	w25, #0x0                   	// #0
 39c:	adrp	x23, 0 <vm_close>
 3a0:	add	x23, x23, #0x0
 3a4:	b	3c4 <lt_dlpreload_open+0x5c>
 3a8:	ldr	x0, [x19, #8]
 3ac:	mov	x1, x23
 3b0:	ldr	x0, [x0]
 3b4:	bl	0 <strcmp>
 3b8:	cbz	w0, 3dc <lt_dlpreload_open+0x74>
 3bc:	ldr	x19, [x19]
 3c0:	cbz	x19, 444 <lt_dlpreload_open+0xdc>
 3c4:	cbz	x22, 3a8 <lt_dlpreload_open+0x40>
 3c8:	ldr	x0, [x19, #8]
 3cc:	mov	x1, x22
 3d0:	ldr	x0, [x0]
 3d4:	bl	0 <strcmp>
 3d8:	cbnz	w0, 3bc <lt_dlpreload_open+0x54>
 3dc:	add	w24, w24, #0x1
 3e0:	ldr	x1, [x19, #8]
 3e4:	add	x0, x1, #0x10
 3e8:	ldr	x21, [x1, #16]
 3ec:	cbz	x21, 3bc <lt_dlpreload_open+0x54>
 3f0:	mov	w20, #0x1                   	// #1
 3f4:	b	414 <lt_dlpreload_open+0xac>
 3f8:	add	w25, w25, #0x1
 3fc:	add	w20, w20, #0x1
 400:	ubfiz	x2, x20, #4, #32
 404:	ldr	x3, [x19, #8]
 408:	add	x0, x3, x2
 40c:	ldr	x21, [x3, x2]
 410:	cbz	x21, 3bc <lt_dlpreload_open+0x54>
 414:	ldr	x0, [x0, #8]
 418:	cbnz	x0, 3fc <lt_dlpreload_open+0x94>
 41c:	mov	x1, x23
 420:	mov	x0, x21
 424:	bl	0 <strcmp>
 428:	cbz	w0, 3fc <lt_dlpreload_open+0x94>
 42c:	mov	x0, x21
 430:	bl	0 <lt_dlopen>
 434:	cbz	x0, 3f8 <lt_dlpreload_open+0x90>
 438:	blr	x26
 43c:	add	w25, w25, w0
 440:	b	3fc <lt_dlpreload_open+0x94>
 444:	cbz	w24, 464 <lt_dlpreload_open+0xfc>
 448:	ldp	x23, x24, [sp, #48]
 44c:	mov	w0, w25
 450:	ldp	x19, x20, [sp, #16]
 454:	ldp	x21, x22, [sp, #32]
 458:	ldp	x25, x26, [sp, #64]
 45c:	ldp	x29, x30, [sp], #80
 460:	ret
 464:	ldp	x23, x24, [sp, #48]
 468:	mov	w0, #0x8                   	// #8
 46c:	bl	0 <lt__error_string>
 470:	bl	0 <lt__set_last_error>
 474:	add	w25, w25, #0x1
 478:	b	44c <lt_dlpreload_open+0xe4>
 47c:	mov	w25, #0x0                   	// #0
 480:	b	468 <lt_dlpreload_open+0x100>

libltdl_libltdl_la-lt__alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <alloc_die_default>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	mov	x29, sp
   8:	adrp	x0, 0 <stderr>
   c:	ldr	x3, [x0]
  10:	mov	x2, #0xf                   	// #15
  14:	mov	x1, #0x1                   	// #1
  18:	adrp	x0, 0 <alloc_die_default>
  1c:	add	x0, x0, #0x0
  20:	bl	0 <fwrite>
  24:	mov	w0, #0x1                   	// #1
  28:	bl	0 <exit>

000000000000002c <lt__malloc>:
  2c:	stp	x29, x30, [sp, #-32]!
  30:	mov	x29, sp
  34:	str	x19, [sp, #16]
  38:	bl	0 <malloc>
  3c:	mov	x19, x0
  40:	cbz	x0, 54 <lt__malloc+0x28>
  44:	mov	x0, x19
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret
  54:	adrp	x0, 0 <alloc_die_default>
  58:	ldr	x0, [x0]
  5c:	blr	x0
  60:	b	44 <lt__malloc+0x18>

0000000000000064 <lt__zalloc>:
  64:	stp	x29, x30, [sp, #-32]!
  68:	mov	x29, sp
  6c:	stp	x19, x20, [sp, #16]
  70:	mov	x20, x0
  74:	bl	2c <lt__malloc>
  78:	mov	x19, x0
  7c:	cbz	x0, 8c <lt__zalloc+0x28>
  80:	mov	x2, x20
  84:	mov	w1, #0x0                   	// #0
  88:	bl	0 <memset>
  8c:	mov	x0, x19
  90:	ldp	x19, x20, [sp, #16]
  94:	ldp	x29, x30, [sp], #32
  98:	ret

000000000000009c <lt__realloc>:
  9c:	stp	x29, x30, [sp, #-32]!
  a0:	mov	x29, sp
  a4:	str	x19, [sp, #16]
  a8:	bl	0 <realloc>
  ac:	mov	x19, x0
  b0:	cbz	x0, c4 <lt__realloc+0x28>
  b4:	mov	x0, x19
  b8:	ldr	x19, [sp, #16]
  bc:	ldp	x29, x30, [sp], #32
  c0:	ret
  c4:	adrp	x0, 0 <alloc_die_default>
  c8:	ldr	x0, [x0]
  cc:	blr	x0
  d0:	b	b4 <lt__realloc+0x18>

00000000000000d4 <lt__memdup>:
  d4:	stp	x29, x30, [sp, #-32]!
  d8:	mov	x29, sp
  dc:	stp	x19, x20, [sp, #16]
  e0:	mov	x20, x0
  e4:	mov	x19, x1
  e8:	mov	x0, x1
  ec:	bl	2c <lt__malloc>
  f0:	cbz	x0, 100 <lt__memdup+0x2c>
  f4:	mov	x2, x19
  f8:	mov	x1, x20
  fc:	bl	0 <memcpy>
 100:	ldp	x19, x20, [sp, #16]
 104:	ldp	x29, x30, [sp], #32
 108:	ret

000000000000010c <lt__strdup>:
 10c:	stp	x29, x30, [sp, #-32]!
 110:	mov	x29, sp
 114:	str	x19, [sp, #16]
 118:	mov	x19, x0
 11c:	bl	0 <strlen>
 120:	add	x1, x0, #0x1
 124:	mov	x0, x19
 128:	bl	d4 <lt__memdup>
 12c:	ldr	x19, [sp, #16]
 130:	ldp	x29, x30, [sp], #32
 134:	ret

libltdl_libltdl_la-lt_dlloader.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <loader_callback>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	x0, [x0, #8]
  14:	cbz	x0, 34 <loader_callback+0x34>
  18:	ldr	x0, [x0]
  1c:	bl	0 <strcmp>
  20:	cmp	w0, #0x0
  24:	csel	x0, x19, xzr, eq  // eq = none
  28:	ldr	x19, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret
  34:	adrp	x3, 0 <loader_callback>
  38:	add	x3, x3, #0x0
  3c:	mov	w2, #0x36                  	// #54
  40:	adrp	x1, 0 <loader_callback>
  44:	add	x1, x1, #0x0
  48:	adrp	x0, 0 <loader_callback>
  4c:	add	x0, x0, #0x0
  50:	bl	0 <__assert_fail>

0000000000000054 <lt_dlloader_add>:
  54:	stp	x29, x30, [sp, #-32]!
  58:	mov	x29, sp
  5c:	cbz	x0, 90 <lt_dlloader_add+0x3c>
  60:	str	x19, [sp, #16]
  64:	mov	x19, x0
  68:	ldr	x0, [x0, #16]
  6c:	cbz	x0, a8 <lt_dlloader_add+0x54>
  70:	ldr	x0, [x19, #24]
  74:	cbz	x0, b0 <lt_dlloader_add+0x5c>
  78:	ldr	x0, [x19, #32]
  7c:	cbz	x0, b8 <lt_dlloader_add+0x64>
  80:	ldr	w0, [x19, #64]
  84:	cmp	w0, #0x1
  88:	b.ls	c0 <lt_dlloader_add+0x6c>  // b.plast
  8c:	ldr	x19, [sp, #16]
  90:	mov	w0, #0x2                   	// #2
  94:	bl	0 <lt__error_string>
  98:	bl	0 <lt__set_last_error>
  9c:	mov	w0, #0x1                   	// #1
  a0:	ldp	x29, x30, [sp], #32
  a4:	ret
  a8:	ldr	x19, [sp, #16]
  ac:	b	90 <lt_dlloader_add+0x3c>
  b0:	ldr	x19, [sp, #16]
  b4:	b	90 <lt_dlloader_add+0x3c>
  b8:	ldr	x19, [sp, #16]
  bc:	b	90 <lt_dlloader_add+0x3c>
  c0:	mov	x0, x19
  c4:	bl	0 <lt__slist_box>
  c8:	cbz	x0, fc <lt_dlloader_add+0xa8>
  cc:	ldr	w1, [x19, #64]
  d0:	cbz	w1, 114 <lt_dlloader_add+0xc0>
  d4:	cmp	w1, #0x1
  d8:	b.ne	130 <lt_dlloader_add+0xdc>  // b.any
  dc:	adrp	x19, 0 <loader_callback>
  e0:	mov	x1, x0
  e4:	ldr	x0, [x19]
  e8:	bl	0 <lt__slist_concat>
  ec:	str	x0, [x19]
  f0:	mov	w0, #0x0                   	// #0
  f4:	ldr	x19, [sp, #16]
  f8:	b	a0 <lt_dlloader_add+0x4c>
  fc:	adrp	x0, 0 <lt__alloc_die>
 100:	ldr	x0, [x0]
 104:	blr	x0
 108:	mov	w0, #0x1                   	// #1
 10c:	ldr	x19, [sp, #16]
 110:	b	a0 <lt_dlloader_add+0x4c>
 114:	adrp	x19, 0 <loader_callback>
 118:	ldr	x1, [x19]
 11c:	bl	0 <lt__slist_cons>
 120:	str	x0, [x19]
 124:	mov	w0, #0x0                   	// #0
 128:	ldr	x19, [sp, #16]
 12c:	b	a0 <lt_dlloader_add+0x4c>
 130:	adrp	x3, 0 <loader_callback>
 134:	add	x3, x3, #0x0
 138:	add	x3, x3, #0x10
 13c:	mov	w2, #0x5e                  	// #94
 140:	adrp	x1, 0 <loader_callback>
 144:	add	x1, x1, #0x0
 148:	adrp	x0, 0 <loader_callback>
 14c:	add	x0, x0, #0x0
 150:	bl	0 <__assert_fail>

0000000000000154 <lt_dlloader_next>:
 154:	cbz	x0, 160 <lt_dlloader_next+0xc>
 158:	ldr	x0, [x0]
 15c:	ret
 160:	adrp	x0, 0 <loader_callback>
 164:	ldr	x0, [x0]
 168:	b	15c <lt_dlloader_next+0x8>

000000000000016c <lt_dlloader_get>:
 16c:	cbz	x0, 174 <lt_dlloader_get+0x8>
 170:	ldr	x0, [x0, #8]
 174:	ret

0000000000000178 <lt_dlloader_find>:
 178:	stp	x29, x30, [sp, #-16]!
 17c:	mov	x29, sp
 180:	mov	x2, x0
 184:	adrp	x1, 0 <loader_callback>
 188:	add	x1, x1, #0x0
 18c:	adrp	x0, 0 <loader_callback>
 190:	ldr	x0, [x0]
 194:	bl	0 <lt__slist_find>
 198:	cbz	x0, 1a0 <lt_dlloader_find+0x28>
 19c:	ldr	x0, [x0, #8]
 1a0:	ldp	x29, x30, [sp], #16
 1a4:	ret

00000000000001a8 <lt_dlloader_remove>:
 1a8:	stp	x29, x30, [sp, #-80]!
 1ac:	mov	x29, sp
 1b0:	stp	x19, x20, [sp, #16]
 1b4:	stp	x25, x26, [sp, #64]
 1b8:	mov	x25, x0
 1bc:	bl	178 <lt_dlloader_find>
 1c0:	mov	x20, x0
 1c4:	cbz	x0, 234 <lt_dlloader_remove+0x8c>
 1c8:	stp	x21, x22, [sp, #32]
 1cc:	stp	x23, x24, [sp, #48]
 1d0:	mov	x1, #0x0                   	// #0
 1d4:	adrp	x0, 0 <loader_callback>
 1d8:	add	x0, x0, #0x0
 1dc:	add	x0, x0, #0x20
 1e0:	bl	0 <lt_dlinterface_register>
 1e4:	mov	x21, x0
 1e8:	mov	w23, #0x0                   	// #0
 1ec:	mov	w22, #0x0                   	// #0
 1f0:	mov	x19, #0x0                   	// #0
 1f4:	mov	w24, #0x1                   	// #1
 1f8:	mov	w26, w24
 1fc:	mov	x1, x19
 200:	mov	x0, x21
 204:	bl	0 <lt_dlhandle_iterate>
 208:	mov	x19, x0
 20c:	cbz	x0, 248 <lt_dlloader_remove+0xa0>
 210:	ldr	x1, [x19, #8]
 214:	cmp	x1, x20
 218:	b.ne	1fc <lt_dlloader_remove+0x54>  // b.any
 21c:	mov	x0, x19
 220:	bl	0 <lt_dlisresident>
 224:	cmp	w0, #0x0
 228:	csel	w23, w23, w24, eq  // eq = none
 22c:	csel	w22, w24, w26, eq  // eq = none
 230:	b	1fc <lt_dlloader_remove+0x54>
 234:	mov	w0, #0x2                   	// #2
 238:	bl	0 <lt__error_string>
 23c:	bl	0 <lt__set_last_error>
 240:	mov	x19, x20
 244:	b	290 <lt_dlloader_remove+0xe8>
 248:	mov	x0, x21
 24c:	bl	0 <lt_dlinterface_free>
 250:	cbnz	w22, 2a4 <lt_dlloader_remove+0xfc>
 254:	ldr	x1, [x20, #48]
 258:	cbz	x1, 268 <lt_dlloader_remove+0xc0>
 25c:	ldr	x0, [x20, #56]
 260:	blr	x1
 264:	cbnz	w0, 2cc <lt_dlloader_remove+0x124>
 268:	mov	x2, x25
 26c:	adrp	x1, 0 <loader_callback>
 270:	add	x1, x1, #0x0
 274:	adrp	x0, 0 <loader_callback>
 278:	add	x0, x0, #0x0
 27c:	bl	0 <lt__slist_remove>
 280:	bl	0 <lt__slist_unbox>
 284:	mov	x19, x0
 288:	ldp	x21, x22, [sp, #32]
 28c:	ldp	x23, x24, [sp, #48]
 290:	mov	x0, x19
 294:	ldp	x19, x20, [sp, #16]
 298:	ldp	x25, x26, [sp, #64]
 29c:	ldp	x29, x30, [sp], #80
 2a0:	ret
 2a4:	cbz	w23, 2b4 <lt_dlloader_remove+0x10c>
 2a8:	ldp	x21, x22, [sp, #32]
 2ac:	ldp	x23, x24, [sp, #48]
 2b0:	b	290 <lt_dlloader_remove+0xe8>
 2b4:	mov	w0, #0x4                   	// #4
 2b8:	bl	0 <lt__error_string>
 2bc:	bl	0 <lt__set_last_error>
 2c0:	ldp	x21, x22, [sp, #32]
 2c4:	ldp	x23, x24, [sp, #48]
 2c8:	b	290 <lt_dlloader_remove+0xe8>
 2cc:	ldp	x21, x22, [sp, #32]
 2d0:	ldp	x23, x24, [sp, #48]
 2d4:	b	290 <lt_dlloader_remove+0xe8>

libltdl_libltdl_la-lt_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dladderror>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	cbz	x0, 64 <lt_dladderror+0x64>
  10:	mov	x20, x0
  14:	adrp	x0, 0 <lt_dladderror>
  18:	ldr	w1, [x0]
  1c:	sub	w1, w1, #0x13
  20:	sbfiz	x19, x1, #3, #32
  24:	mov	x1, x19
  28:	adrp	x0, 0 <lt_dladderror>
  2c:	ldr	x0, [x0]
  30:	bl	0 <lt__realloc>
  34:	cbz	x0, 84 <lt_dladderror+0x84>
  38:	adrp	x1, 0 <lt_dladderror>
  3c:	str	x0, [x1]
  40:	add	x1, x0, x19
  44:	stur	x20, [x1, #-8]
  48:	adrp	x1, 0 <lt_dladderror>
  4c:	ldr	w0, [x1]
  50:	add	w2, w0, #0x1
  54:	str	w2, [x1]
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x29, x30, [sp], #32
  60:	ret
  64:	adrp	x3, 0 <lt_dladderror>
  68:	add	x3, x3, #0x0
  6c:	mov	w2, #0x35                  	// #53
  70:	adrp	x1, 0 <lt_dladderror>
  74:	add	x1, x1, #0x0
  78:	adrp	x0, 0 <lt_dladderror>
  7c:	add	x0, x0, #0x0
  80:	bl	0 <__assert_fail>
  84:	mov	w0, #0xffffffff            	// #-1
  88:	b	58 <lt_dladderror+0x58>

000000000000008c <lt_dlseterror>:
  8c:	adrp	x1, 0 <lt_dladderror>
  90:	ldr	w1, [x1]
  94:	cmp	w0, #0x0
  98:	ccmp	w1, w0, #0x4, ge  // ge = tcont
  9c:	b.gt	bc <lt_dlseterror+0x30>
  a0:	adrp	x0, 0 <lt_dladderror>
  a4:	add	x0, x0, #0x0
  a8:	add	x0, x0, #0x25c
  ac:	adrp	x1, 0 <lt_dladderror>
  b0:	str	x0, [x1]
  b4:	mov	w0, #0x1                   	// #1
  b8:	ret
  bc:	cmp	w0, #0x13
  c0:	b.gt	f0 <lt_dlseterror+0x64>
  c4:	adrp	x1, 0 <lt_dladderror>
  c8:	add	x1, x1, #0x0
  cc:	sxtw	x2, w0
  d0:	add	x0, x2, w0, sxtw #2
  d4:	add	x0, x2, x0, lsl #2
  d8:	add	x1, x1, #0x10
  dc:	add	x0, x1, x0, lsl #1
  e0:	adrp	x1, 0 <lt_dladderror>
  e4:	str	x0, [x1]
  e8:	mov	w0, #0x0                   	// #0
  ec:	b	b8 <lt_dlseterror+0x2c>
  f0:	adrp	x1, 0 <lt_dladderror>
  f4:	add	x2, x1, #0x0
  f8:	ldr	x1, [x1]
  fc:	add	x0, x1, w0, sxtw #3
 100:	ldur	x0, [x0, #-160]
 104:	str	x0, [x2, #8]
 108:	mov	w0, #0x0                   	// #0
 10c:	b	b8 <lt_dlseterror+0x2c>

0000000000000110 <lt__error_string>:
 110:	stp	x29, x30, [sp, #-16]!
 114:	mov	x29, sp
 118:	tbnz	w0, #31, 148 <lt__error_string+0x38>
 11c:	cmp	w0, #0x13
 120:	b.gt	16c <lt__error_string+0x5c>
 124:	adrp	x1, 0 <lt_dladderror>
 128:	add	x1, x1, #0x0
 12c:	sxtw	x2, w0
 130:	add	x0, x2, w0, sxtw #2
 134:	add	x0, x2, x0, lsl #2
 138:	add	x1, x1, #0x10
 13c:	add	x0, x1, x0, lsl #1
 140:	ldp	x29, x30, [sp], #16
 144:	ret
 148:	adrp	x3, 0 <lt_dladderror>
 14c:	add	x3, x3, #0x0
 150:	add	x3, x3, #0x358
 154:	mov	w2, #0x5f                  	// #95
 158:	adrp	x1, 0 <lt_dladderror>
 15c:	add	x1, x1, #0x0
 160:	adrp	x0, 0 <lt_dladderror>
 164:	add	x0, x0, #0x0
 168:	bl	0 <__assert_fail>
 16c:	adrp	x3, 0 <lt_dladderror>
 170:	add	x3, x3, #0x0
 174:	add	x3, x3, #0x358
 178:	mov	w2, #0x60                  	// #96
 17c:	adrp	x1, 0 <lt_dladderror>
 180:	add	x1, x1, #0x0
 184:	adrp	x0, 0 <lt_dladderror>
 188:	add	x0, x0, #0x0
 18c:	bl	0 <__assert_fail>

0000000000000190 <lt__get_last_error>:
 190:	adrp	x0, 0 <lt_dladderror>
 194:	ldr	x0, [x0]
 198:	ret

000000000000019c <lt__set_last_error>:
 19c:	adrp	x1, 0 <lt_dladderror>
 1a0:	str	x0, [x1]
 1a4:	ret

libltdl_libltdl_la-ltdl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__alloc_die_callback>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	x29, sp
       8:	mov	w0, #0xb                   	// #11
       c:	bl	0 <lt__error_string>
      10:	bl	0 <lt__set_last_error>
      14:	ldp	x29, x30, [sp], #16
      18:	ret

000000000000001c <loader_init>:
      1c:	stp	x29, x30, [sp, #-32]!
      20:	mov	x29, sp
      24:	str	x19, [sp, #16]
      28:	mov	x2, x0
      2c:	mov	x19, #0x0                   	// #0
      30:	cbz	x0, 40 <loader_init+0x24>
      34:	mov	x0, x1
      38:	blr	x2
      3c:	mov	x19, x0
      40:	mov	x0, x19
      44:	bl	0 <lt_dlloader_add>
      48:	cmp	w0, #0x0
      4c:	ccmp	x19, #0x0, #0x0, eq  // eq = none
      50:	b.eq	78 <loader_init+0x5c>  // b.none
      54:	cbnz	w0, 6c <loader_init+0x50>
      58:	ldr	x1, [x19, #40]
      5c:	cbz	x1, 6c <loader_init+0x50>
      60:	ldr	x0, [x19, #56]
      64:	blr	x1
      68:	cbnz	w0, 98 <loader_init+0x7c>
      6c:	ldr	x19, [sp, #16]
      70:	ldp	x29, x30, [sp], #32
      74:	ret
      78:	adrp	x3, 0 <lt__alloc_die_callback>
      7c:	add	x3, x3, #0x0
      80:	mov	w2, #0xc7                  	// #199
      84:	adrp	x1, 0 <lt__alloc_die_callback>
      88:	add	x1, x1, #0x0
      8c:	adrp	x0, 0 <lt__alloc_die_callback>
      90:	add	x0, x0, #0x0
      94:	bl	0 <__assert_fail>
      98:	mov	w0, #0x3                   	// #3
      9c:	bl	0 <lt__error_string>
      a0:	bl	0 <lt__set_last_error>
      a4:	mov	w0, #0x1                   	// #1
      a8:	b	6c <loader_init+0x50>

00000000000000ac <canonicalize_path>:
      ac:	stp	x29, x30, [sp, #-32]!
      b0:	mov	x29, sp
      b4:	stp	x19, x20, [sp, #16]
      b8:	cbz	x0, 100 <canonicalize_path+0x54>
      bc:	mov	x19, x0
      c0:	mov	x20, x1
      c4:	ldrb	w0, [x0]
      c8:	cbz	w0, 100 <canonicalize_path+0x54>
      cc:	cbz	x1, 124 <canonicalize_path+0x78>
      d0:	mov	x0, x19
      d4:	bl	0 <strlen>
      d8:	add	x0, x0, #0x1
      dc:	bl	0 <lt__malloc>
      e0:	cbz	x0, 1b8 <canonicalize_path+0x10c>
      e4:	ldrb	w2, [x19]
      e8:	cbz	w2, 19c <canonicalize_path+0xf0>
      ec:	add	x3, x19, #0x1
      f0:	mov	x4, #0x0                   	// #0
      f4:	mov	w5, #0x2f                  	// #47
      f8:	mov	w6, #0x2f                  	// #47
      fc:	b	16c <canonicalize_path+0xc0>
     100:	adrp	x3, 0 <lt__alloc_die_callback>
     104:	add	x3, x3, #0x0
     108:	add	x3, x3, #0x10
     10c:	mov	w2, #0x24f                 	// #591
     110:	adrp	x1, 0 <lt__alloc_die_callback>
     114:	add	x1, x1, #0x0
     118:	adrp	x0, 0 <lt__alloc_die_callback>
     11c:	add	x0, x0, #0x0
     120:	bl	0 <__assert_fail>
     124:	adrp	x3, 0 <lt__alloc_die_callback>
     128:	add	x3, x3, #0x0
     12c:	add	x3, x3, #0x10
     130:	mov	w2, #0x250                 	// #592
     134:	adrp	x1, 0 <lt__alloc_die_callback>
     138:	add	x1, x1, #0x0
     13c:	adrp	x0, 0 <lt__alloc_die_callback>
     140:	add	x0, x0, #0x0
     144:	bl	0 <__assert_fail>
     148:	cbz	x4, 164 <canonicalize_path+0xb8>
     14c:	ldrb	w1, [x3]
     150:	cmp	w1, #0x3a
     154:	ccmp	w1, #0x0, #0x4, ne  // ne = any
     158:	b.eq	164 <canonicalize_path+0xb8>  // b.none
     15c:	strb	w2, [x0, x4]
     160:	add	x4, x4, #0x1
     164:	ldrb	w2, [x3], #1
     168:	cbz	w2, 1a0 <canonicalize_path+0xf4>
     16c:	cmp	w2, #0x3a
     170:	b.eq	148 <canonicalize_path+0x9c>  // b.none
     174:	cmp	w2, #0x2f
     178:	b.ne	15c <canonicalize_path+0xb0>  // b.any
     17c:	ldrb	w2, [x3]
     180:	cmp	w2, #0x3a
     184:	ccmp	w2, #0x0, #0x4, ne  // ne = any
     188:	ccmp	w2, w5, #0x4, ne  // ne = any
     18c:	b.eq	164 <canonicalize_path+0xb8>  // b.none
     190:	strb	w6, [x0, x4]
     194:	add	x4, x4, #0x1
     198:	b	164 <canonicalize_path+0xb8>
     19c:	mov	x4, #0x0                   	// #0
     1a0:	strb	wzr, [x0, x4]
     1a4:	str	x0, [x20]
     1a8:	mov	w0, #0x0                   	// #0
     1ac:	ldp	x19, x20, [sp, #16]
     1b0:	ldp	x29, x30, [sp], #32
     1b4:	ret
     1b8:	mov	w0, #0x1                   	// #1
     1bc:	b	1ac <canonicalize_path+0x100>

00000000000001c0 <tryall_dlopen>:
     1c0:	stp	x29, x30, [sp, #-80]!
     1c4:	mov	x29, sp
     1c8:	stp	x19, x20, [sp, #16]
     1cc:	stp	x21, x22, [sp, #32]
     1d0:	stp	x23, x24, [sp, #48]
     1d4:	mov	x24, x0
     1d8:	mov	x20, x1
     1dc:	mov	x23, x2
     1e0:	mov	x21, x3
     1e4:	adrp	x0, 0 <lt__alloc_die_callback>
     1e8:	ldr	x19, [x0]
     1ec:	bl	0 <lt__get_last_error>
     1f0:	mov	x22, x0
     1f4:	cbnz	x19, 220 <tryall_dlopen+0x60>
     1f8:	ldr	x24, [x24]
     1fc:	cbz	x20, 360 <tryall_dlopen+0x1a0>
     200:	mov	x0, x20
     204:	bl	0 <lt__strdup>
     208:	str	x0, [x24, #16]
     20c:	cbz	x0, 358 <tryall_dlopen+0x198>
     210:	str	x25, [sp, #64]
     214:	b	368 <tryall_dlopen+0x1a8>
     218:	ldr	x19, [x19]
     21c:	cbz	x19, 1f8 <tryall_dlopen+0x38>
     220:	ldr	x0, [x19, #16]
     224:	cmp	x0, x20
     228:	b.eq	244 <tryall_dlopen+0x84>  // b.none
     22c:	cmp	x20, #0x0
     230:	ccmp	x0, #0x0, #0x4, ne  // ne = any
     234:	b.eq	218 <tryall_dlopen+0x58>  // b.none
     238:	mov	x1, x20
     23c:	bl	0 <strcmp>
     240:	cbnz	w0, 218 <tryall_dlopen+0x58>
     244:	ldr	w0, [x19, #32]
     248:	add	w0, w0, #0x1
     24c:	str	w0, [x19, #32]
     250:	str	x19, [x24]
     254:	mov	w0, #0x0                   	// #0
     258:	ldp	x19, x20, [sp, #16]
     25c:	ldp	x21, x22, [sp, #32]
     260:	ldp	x23, x24, [sp, #48]
     264:	ldp	x29, x30, [sp], #80
     268:	ret
     26c:	mov	x0, x19
     270:	bl	0 <lt_dlloader_get>
     274:	mov	x25, x0
     278:	ldr	x3, [x0, #16]
     27c:	mov	x2, x23
     280:	mov	x1, x20
     284:	ldr	x0, [x0, #56]
     288:	blr	x3
     28c:	str	x0, [x24, #56]
     290:	cbnz	x0, 2e4 <tryall_dlopen+0x124>
     294:	mov	x0, x19
     298:	bl	0 <lt_dlloader_next>
     29c:	mov	x19, x0
     2a0:	cbz	x0, 2e8 <tryall_dlopen+0x128>
     2a4:	cbz	x21, 26c <tryall_dlopen+0xac>
     2a8:	ldr	x3, [x21, #16]
     2ac:	mov	x2, x23
     2b0:	mov	x1, x20
     2b4:	ldr	x0, [x21, #56]
     2b8:	blr	x3
     2bc:	str	x0, [x24, #56]
     2c0:	cbnz	x0, 308 <tryall_dlopen+0x148>
     2c4:	ldr	x0, [x24, #56]
     2c8:	cbz	x0, 2f0 <tryall_dlopen+0x130>
     2cc:	str	x21, [x24, #8]
     2d0:	mov	x0, x22
     2d4:	bl	0 <lt__set_last_error>
     2d8:	mov	w0, #0x0                   	// #0
     2dc:	ldr	x25, [sp, #64]
     2e0:	b	258 <tryall_dlopen+0x98>
     2e4:	cbnz	x23, 310 <tryall_dlopen+0x150>
     2e8:	orr	x19, x21, x19
     2ec:	cbnz	x19, 350 <tryall_dlopen+0x190>
     2f0:	ldr	x0, [x24, #16]
     2f4:	bl	0 <free>
     2f8:	str	xzr, [x24, #16]
     2fc:	mov	w0, #0x1                   	// #1
     300:	ldr	x25, [sp, #64]
     304:	b	258 <tryall_dlopen+0x98>
     308:	cbz	x23, 2c4 <tryall_dlopen+0x104>
     30c:	mov	x25, x21
     310:	ldrb	w1, [x23]
     314:	ubfx	x1, x1, #1, #1
     318:	ldrb	w0, [x24, #36]
     31c:	bfxil	w0, w1, #0, #1
     320:	strb	w0, [x24, #36]
     324:	ldrb	w1, [x23]
     328:	ubfx	x1, x1, #2, #1
     32c:	bfi	w0, w1, #1, #1
     330:	strb	w0, [x24, #36]
     334:	ldrb	w1, [x23]
     338:	ubfx	x1, x1, #3, #1
     33c:	bfi	w0, w1, #2, #1
     340:	strb	w0, [x24, #36]
     344:	cbz	x21, 2e8 <tryall_dlopen+0x128>
     348:	mov	x21, x25
     34c:	b	2c4 <tryall_dlopen+0x104>
     350:	mov	x21, x25
     354:	b	2cc <tryall_dlopen+0x10c>
     358:	mov	w0, #0x1                   	// #1
     35c:	b	258 <tryall_dlopen+0x98>
     360:	str	x25, [sp, #64]
     364:	str	xzr, [x24, #16]
     368:	mov	x0, #0x0                   	// #0
     36c:	bl	0 <lt_dlloader_next>
     370:	mov	x19, x0
     374:	b	2a4 <tryall_dlopen+0xe4>

0000000000000378 <tryall_dlopen_module>:
     378:	stp	x29, x30, [sp, #-80]!
     37c:	mov	x29, sp
     380:	stp	x19, x20, [sp, #16]
     384:	stp	x21, x22, [sp, #32]
     388:	stp	x23, x24, [sp, #48]
     38c:	stp	x25, x26, [sp, #64]
     390:	mov	x23, x0
     394:	cbz	x2, 4cc <tryall_dlopen_module+0x154>
     398:	mov	x24, x1
     39c:	mov	x19, x2
     3a0:	mov	x20, x3
     3a4:	mov	x26, x4
     3a8:	ldrb	w0, [x2]
     3ac:	mov	x22, #0x0                   	// #0
     3b0:	cbz	w0, 3c0 <tryall_dlopen_module+0x48>
     3b4:	mov	x0, x2
     3b8:	bl	0 <strlen>
     3bc:	mov	x22, x0
     3c0:	cbz	x23, 4d0 <tryall_dlopen_module+0x158>
     3c4:	cbz	x20, 488 <tryall_dlopen_module+0x110>
     3c8:	cbz	x22, 3dc <tryall_dlopen_module+0x64>
     3cc:	sub	x0, x22, #0x1
     3d0:	ldrb	w1, [x19, x0]
     3d4:	cmp	w1, #0x2f
     3d8:	csel	x22, x22, x0, ne  // ne = any
     3dc:	ldrb	w1, [x20]
     3e0:	mov	x0, #0x0                   	// #0
     3e4:	cbz	w1, 3f0 <tryall_dlopen_module+0x78>
     3e8:	mov	x0, x20
     3ec:	bl	0 <strlen>
     3f0:	add	x1, x22, #0x2
     3f4:	add	x0, x1, x0
     3f8:	bl	0 <lt__malloc>
     3fc:	mov	x21, x0
     400:	mov	w25, #0x1                   	// #1
     404:	cbz	x0, 448 <tryall_dlopen_module+0xd0>
     408:	mov	x4, x20
     40c:	mov	x3, x19
     410:	mov	w2, w22
     414:	adrp	x1, 0 <lt__alloc_die_callback>
     418:	add	x1, x1, #0x0
     41c:	bl	0 <sprintf>
     420:	cbz	x24, 4ac <tryall_dlopen_module+0x134>
     424:	mov	x4, x26
     428:	mov	x3, x21
     42c:	mov	x2, x24
     430:	mov	x1, #0x0                   	// #0
     434:	mov	x0, x23
     438:	bl	378 <tryall_dlopen_module>
     43c:	mov	w25, w0
     440:	mov	x0, x21
     444:	bl	0 <free>
     448:	mov	w0, w25
     44c:	ldp	x19, x20, [sp, #16]
     450:	ldp	x21, x22, [sp, #32]
     454:	ldp	x23, x24, [sp, #48]
     458:	ldp	x25, x26, [sp, #64]
     45c:	ldp	x29, x30, [sp], #80
     460:	ret
     464:	adrp	x3, 0 <lt__alloc_die_callback>
     468:	add	x3, x3, #0x0
     46c:	add	x3, x3, #0x28
     470:	mov	w2, #0x1f7                 	// #503
     474:	adrp	x1, 0 <lt__alloc_die_callback>
     478:	add	x1, x1, #0x0
     47c:	adrp	x0, 0 <lt__alloc_die_callback>
     480:	add	x0, x0, #0x0
     484:	bl	0 <__assert_fail>
     488:	adrp	x3, 0 <lt__alloc_die_callback>
     48c:	add	x3, x3, #0x0
     490:	add	x3, x3, #0x28
     494:	mov	w2, #0x1f8                 	// #504
     498:	adrp	x1, 0 <lt__alloc_die_callback>
     49c:	add	x1, x1, #0x0
     4a0:	adrp	x0, 0 <lt__alloc_die_callback>
     4a4:	add	x0, x0, #0x0
     4a8:	bl	0 <__assert_fail>
     4ac:	mov	x3, #0x0                   	// #0
     4b0:	mov	x2, x26
     4b4:	mov	x1, x21
     4b8:	mov	x0, x23
     4bc:	bl	1c0 <tryall_dlopen>
     4c0:	cmp	w0, #0x0
     4c4:	cset	w25, ne  // ne = any
     4c8:	b	440 <tryall_dlopen_module+0xc8>
     4cc:	cbnz	x0, 464 <tryall_dlopen_module+0xec>
     4d0:	adrp	x3, 0 <lt__alloc_die_callback>
     4d4:	add	x3, x3, #0x0
     4d8:	add	x3, x3, #0x28
     4dc:	mov	w2, #0x1f6                 	// #502
     4e0:	adrp	x1, 0 <lt__alloc_die_callback>
     4e4:	add	x1, x1, #0x0
     4e8:	adrp	x0, 0 <lt__alloc_die_callback>
     4ec:	add	x0, x0, #0x0
     4f0:	bl	0 <__assert_fail>

00000000000004f4 <find_file_callback>:
     4f4:	stp	x29, x30, [sp, #-48]!
     4f8:	mov	x29, sp
     4fc:	stp	x19, x20, [sp, #16]
     500:	str	x21, [sp, #32]
     504:	cbz	x0, 594 <find_file_callback+0xa0>
     508:	mov	x19, x0
     50c:	mov	x20, x1
     510:	mov	x21, x2
     514:	ldrb	w0, [x0]
     518:	cbz	w0, 594 <find_file_callback+0xa0>
     51c:	cbz	x1, 5b8 <find_file_callback+0xc4>
     520:	cbz	x2, 5dc <find_file_callback+0xe8>
     524:	adrp	x1, 0 <lt__alloc_die_callback>
     528:	add	x1, x1, #0x0
     52c:	mov	x0, x19
     530:	bl	0 <fopen>
     534:	mov	x1, x0
     538:	str	x0, [x21]
     53c:	mov	w0, #0x0                   	// #0
     540:	cbz	x1, 584 <find_file_callback+0x90>
     544:	mov	w1, #0x2f                  	// #47
     548:	mov	x0, x19
     54c:	bl	0 <strrchr>
     550:	cmp	x19, x0
     554:	b.cs	55c <find_file_callback+0x68>  // b.hs, b.nlast
     558:	strb	wzr, [x0]
     55c:	ldr	x0, [x20]
     560:	bl	0 <free>
     564:	str	xzr, [x20]
     568:	mov	x0, x19
     56c:	bl	0 <lt__strdup>
     570:	mov	x1, x0
     574:	str	x0, [x20]
     578:	mov	w0, #0x1                   	// #1
     57c:	cmp	x1, #0x0
     580:	cneg	w0, w0, eq  // eq = none
     584:	ldp	x19, x20, [sp, #16]
     588:	ldr	x21, [sp, #32]
     58c:	ldp	x29, x30, [sp], #48
     590:	ret
     594:	adrp	x3, 0 <lt__alloc_die_callback>
     598:	add	x3, x3, #0x0
     59c:	add	x3, x3, #0x40
     5a0:	mov	w2, #0x2f0                 	// #752
     5a4:	adrp	x1, 0 <lt__alloc_die_callback>
     5a8:	add	x1, x1, #0x0
     5ac:	adrp	x0, 0 <lt__alloc_die_callback>
     5b0:	add	x0, x0, #0x0
     5b4:	bl	0 <__assert_fail>
     5b8:	adrp	x3, 0 <lt__alloc_die_callback>
     5bc:	add	x3, x3, #0x0
     5c0:	add	x3, x3, #0x40
     5c4:	mov	w2, #0x2f1                 	// #753
     5c8:	adrp	x1, 0 <lt__alloc_die_callback>
     5cc:	add	x1, x1, #0x0
     5d0:	adrp	x0, 0 <lt__alloc_die_callback>
     5d4:	add	x0, x0, #0x0
     5d8:	bl	0 <__assert_fail>
     5dc:	adrp	x3, 0 <lt__alloc_die_callback>
     5e0:	add	x3, x3, #0x0
     5e4:	add	x3, x3, #0x40
     5e8:	mov	w2, #0x2f2                 	// #754
     5ec:	adrp	x1, 0 <lt__alloc_die_callback>
     5f0:	add	x1, x1, #0x0
     5f4:	adrp	x0, 0 <lt__alloc_die_callback>
     5f8:	add	x0, x0, #0x0
     5fc:	bl	0 <__assert_fail>

0000000000000600 <argzize_path>:
     600:	stp	x29, x30, [sp, #-16]!
     604:	mov	x29, sp
     608:	cbz	x0, 630 <argzize_path+0x30>
     60c:	mov	x3, x2
     610:	cbz	x1, 654 <argzize_path+0x54>
     614:	cbz	x2, 678 <argzize_path+0x78>
     618:	mov	x2, x1
     61c:	mov	w1, #0x3a                  	// #58
     620:	bl	0 <argz_create_sep>
     624:	cbnz	w0, 69c <argzize_path+0x9c>
     628:	ldp	x29, x30, [sp], #16
     62c:	ret
     630:	adrp	x3, 0 <lt__alloc_die_callback>
     634:	add	x3, x3, #0x0
     638:	add	x3, x3, #0x58
     63c:	mov	w2, #0x28c                 	// #652
     640:	adrp	x1, 0 <lt__alloc_die_callback>
     644:	add	x1, x1, #0x0
     648:	adrp	x0, 0 <lt__alloc_die_callback>
     64c:	add	x0, x0, #0x0
     650:	bl	0 <__assert_fail>
     654:	adrp	x3, 0 <lt__alloc_die_callback>
     658:	add	x3, x3, #0x0
     65c:	add	x3, x3, #0x58
     660:	mov	w2, #0x28d                 	// #653
     664:	adrp	x1, 0 <lt__alloc_die_callback>
     668:	add	x1, x1, #0x0
     66c:	adrp	x0, 0 <lt__alloc_die_callback>
     670:	add	x0, x0, #0x0
     674:	bl	0 <__assert_fail>
     678:	adrp	x3, 0 <lt__alloc_die_callback>
     67c:	add	x3, x3, #0x0
     680:	add	x3, x3, #0x58
     684:	mov	w2, #0x28e                 	// #654
     688:	adrp	x1, 0 <lt__alloc_die_callback>
     68c:	add	x1, x1, #0x0
     690:	adrp	x0, 0 <lt__alloc_die_callback>
     694:	add	x0, x0, #0x0
     698:	bl	0 <__assert_fail>
     69c:	cmp	w0, #0xc
     6a0:	b.eq	6b8 <argzize_path+0xb8>  // b.none
     6a4:	mov	w0, #0x0                   	// #0
     6a8:	bl	0 <lt__error_string>
     6ac:	bl	0 <lt__set_last_error>
     6b0:	mov	w0, #0x1                   	// #1
     6b4:	b	628 <argzize_path+0x28>
     6b8:	mov	w0, #0xb                   	// #11
     6bc:	bl	0 <lt__error_string>
     6c0:	bl	0 <lt__set_last_error>
     6c4:	mov	w0, #0x1                   	// #1
     6c8:	b	628 <argzize_path+0x28>

00000000000006cc <foreach_dirinpath>:
     6cc:	stp	x29, x30, [sp, #-144]!
     6d0:	mov	x29, sp
     6d4:	stp	x19, x20, [sp, #16]
     6d8:	stp	x21, x22, [sp, #32]
     6dc:	stp	x23, x24, [sp, #48]
     6e0:	stp	x27, x28, [sp, #80]
     6e4:	mov	x23, x0
     6e8:	mov	x19, x1
     6ec:	mov	x20, x2
     6f0:	mov	x28, x3
     6f4:	mov	x21, x4
     6f8:	mov	x22, #0x0                   	// #0
     6fc:	cbz	x1, 714 <foreach_dirinpath+0x48>
     700:	ldrb	w0, [x1]
     704:	cbz	w0, 714 <foreach_dirinpath+0x48>
     708:	mov	x0, x1
     70c:	bl	0 <strlen>
     710:	mov	x22, x0
     714:	str	xzr, [sp, #136]
     718:	str	xzr, [sp, #128]
     71c:	str	xzr, [sp, #120]
     720:	cbz	x23, 72c <foreach_dirinpath+0x60>
     724:	ldrb	w0, [x23]
     728:	cbnz	w0, 774 <foreach_dirinpath+0xa8>
     72c:	mov	w0, #0x5                   	// #5
     730:	bl	0 <lt__error_string>
     734:	bl	0 <lt__set_last_error>
     738:	mov	x24, #0x0                   	// #0
     73c:	mov	w23, #0x0                   	// #0
     740:	ldr	x0, [sp, #128]
     744:	bl	0 <free>
     748:	ldr	x0, [sp, #120]
     74c:	bl	0 <free>
     750:	mov	x0, x24
     754:	bl	0 <free>
     758:	mov	w0, w23
     75c:	ldp	x19, x20, [sp, #16]
     760:	ldp	x21, x22, [sp, #32]
     764:	ldp	x23, x24, [sp, #48]
     768:	ldp	x27, x28, [sp, #80]
     76c:	ldp	x29, x30, [sp], #144
     770:	ret
     774:	add	x1, sp, #0x78
     778:	mov	x0, x23
     77c:	bl	ac <canonicalize_path>
     780:	mov	w24, w0
     784:	cbz	w0, 794 <foreach_dirinpath+0xc8>
     788:	mov	x24, #0x0                   	// #0
     78c:	mov	w23, #0x0                   	// #0
     790:	b	740 <foreach_dirinpath+0x74>
     794:	add	x2, sp, #0x88
     798:	add	x1, sp, #0x80
     79c:	ldr	x0, [sp, #120]
     7a0:	bl	600 <argzize_path>
     7a4:	mov	w23, w0
     7a8:	cbnz	w0, 8ec <foreach_dirinpath+0x220>
     7ac:	stp	x25, x26, [sp, #64]
     7b0:	mov	x25, #0x0                   	// #0
     7b4:	mov	x24, #0x0                   	// #0
     7b8:	mov	x27, #0x0                   	// #0
     7bc:	ldr	x26, [sp, #128]
     7c0:	ldr	x0, [sp, #136]
     7c4:	cbz	x25, 8d4 <foreach_dirinpath+0x208>
     7c8:	add	x26, x26, x0
     7cc:	cmp	x25, x26
     7d0:	b.cs	8f8 <foreach_dirinpath+0x22c>  // b.hs, b.nlast
     7d4:	mov	x0, x25
     7d8:	bl	0 <strlen>
     7dc:	add	x0, x0, #0x1
     7e0:	add	x25, x25, x0
     7e4:	cmp	x26, x25
     7e8:	b.ls	8cc <foreach_dirinpath+0x200>  // b.plast
     7ec:	ldrb	w0, [x25]
     7f0:	mov	x26, #0x0                   	// #0
     7f4:	cbz	w0, 804 <foreach_dirinpath+0x138>
     7f8:	mov	x0, x25
     7fc:	bl	0 <strlen>
     800:	mov	x26, x0
     804:	add	x0, x22, x26
     808:	str	x0, [sp, #104]
     80c:	add	x0, x0, #0x1
     810:	cmp	x0, x27
     814:	b.cs	880 <foreach_dirinpath+0x1b4>  // b.hs, b.nlast
     818:	cmp	x27, x26
     81c:	b.ls	8a8 <foreach_dirinpath+0x1dc>  // b.plast
     820:	mov	x1, x25
     824:	mov	x0, x24
     828:	bl	0 <strcpy>
     82c:	cbz	x19, 860 <foreach_dirinpath+0x194>
     830:	ldrb	w0, [x19]
     834:	cbz	w0, 860 <foreach_dirinpath+0x194>
     838:	add	x0, x24, x26
     83c:	ldurb	w0, [x0, #-1]
     840:	cmp	w0, #0x2f
     844:	b.eq	854 <foreach_dirinpath+0x188>  // b.none
     848:	mov	w0, #0x2f                  	// #47
     84c:	strb	w0, [x24, x26]
     850:	add	x26, x26, #0x1
     854:	mov	x1, x19
     858:	add	x0, x24, x26
     85c:	bl	0 <strcpy>
     860:	mov	x2, x21
     864:	mov	x1, x28
     868:	mov	x0, x24
     86c:	blr	x20
     870:	cbz	w0, 7bc <foreach_dirinpath+0xf0>
     874:	mov	w23, w0
     878:	ldp	x25, x26, [sp, #64]
     87c:	b	740 <foreach_dirinpath+0x74>
     880:	mov	x0, x24
     884:	bl	0 <free>
     888:	ldr	x0, [sp, #104]
     88c:	add	x27, x0, #0x2
     890:	mov	x0, x27
     894:	bl	0 <lt__malloc>
     898:	mov	x24, x0
     89c:	cbnz	x0, 818 <foreach_dirinpath+0x14c>
     8a0:	ldp	x25, x26, [sp, #64]
     8a4:	b	740 <foreach_dirinpath+0x74>
     8a8:	adrp	x3, 0 <lt__alloc_die_callback>
     8ac:	add	x3, x3, #0x0
     8b0:	add	x3, x3, #0x68
     8b4:	mov	w2, #0x2cd                 	// #717
     8b8:	adrp	x1, 0 <lt__alloc_die_callback>
     8bc:	add	x1, x1, #0x0
     8c0:	adrp	x0, 0 <lt__alloc_die_callback>
     8c4:	add	x0, x0, #0x0
     8c8:	bl	0 <__assert_fail>
     8cc:	ldp	x25, x26, [sp, #64]
     8d0:	b	740 <foreach_dirinpath+0x74>
     8d4:	cbz	x0, 900 <foreach_dirinpath+0x234>
     8d8:	cbz	x26, 8e4 <foreach_dirinpath+0x218>
     8dc:	mov	x25, x26
     8e0:	b	7ec <foreach_dirinpath+0x120>
     8e4:	ldp	x25, x26, [sp, #64]
     8e8:	b	740 <foreach_dirinpath+0x74>
     8ec:	mov	w23, w24
     8f0:	mov	x24, #0x0                   	// #0
     8f4:	b	740 <foreach_dirinpath+0x74>
     8f8:	ldp	x25, x26, [sp, #64]
     8fc:	b	740 <foreach_dirinpath+0x74>
     900:	ldp	x25, x26, [sp, #64]
     904:	b	740 <foreach_dirinpath+0x74>

0000000000000908 <find_file>:
     908:	stp	x29, x30, [sp, #-32]!
     90c:	mov	x29, sp
     910:	str	xzr, [sp, #24]
     914:	add	x4, sp, #0x18
     918:	mov	x3, x2
     91c:	adrp	x2, 0 <lt__alloc_die_callback>
     920:	add	x2, x2, #0x0
     924:	bl	6cc <foreach_dirinpath>
     928:	ldr	x0, [sp, #24]
     92c:	ldp	x29, x30, [sp], #32
     930:	ret

0000000000000934 <find_handle>:
     934:	stp	x29, x30, [sp, #-32]!
     938:	mov	x29, sp
     93c:	str	x19, [sp, #16]
     940:	cbz	x0, 974 <find_handle+0x40>
     944:	mov	x19, x2
     948:	mov	x4, x3
     94c:	mov	x3, x2
     950:	adrp	x2, 0 <lt__alloc_die_callback>
     954:	add	x2, x2, #0x0
     958:	bl	6cc <foreach_dirinpath>
     95c:	cmp	w0, #0x0
     960:	csel	x19, x19, xzr, ne  // ne = any
     964:	mov	x0, x19
     968:	ldr	x19, [sp, #16]
     96c:	ldp	x29, x30, [sp], #32
     970:	ret
     974:	mov	x19, x0
     978:	b	964 <find_handle+0x30>

000000000000097c <trim>:
     97c:	stp	x29, x30, [sp, #-48]!
     980:	mov	x29, sp
     984:	stp	x19, x20, [sp, #16]
     988:	stp	x21, x22, [sp, #32]
     98c:	mov	x21, x0
     990:	mov	x19, x1
     994:	mov	w1, #0x27                  	// #39
     998:	mov	x0, x19
     99c:	bl	0 <strrchr>
     9a0:	mov	x20, x0
     9a4:	ldrb	w0, [x19]
     9a8:	mov	x22, #0x0                   	// #0
     9ac:	cbz	w0, 9bc <trim+0x40>
     9b0:	mov	x0, x19
     9b4:	bl	0 <strlen>
     9b8:	mov	x22, x0
     9bc:	ldr	x0, [x21]
     9c0:	bl	0 <free>
     9c4:	str	xzr, [x21]
     9c8:	cmp	x20, #0x0
     9cc:	mov	w0, #0x1                   	// #1
     9d0:	ccmp	x19, x20, #0x4, ne  // ne = any
     9d4:	b.eq	9f0 <trim+0x74>  // b.none
     9d8:	mov	w0, #0x0                   	// #0
     9dc:	cmp	x22, #0x3
     9e0:	b.ls	9f0 <trim+0x74>  // b.plast
     9e4:	ldrb	w1, [x19]
     9e8:	cmp	w1, #0x27
     9ec:	b.eq	a00 <trim+0x84>  // b.none
     9f0:	ldp	x19, x20, [sp, #16]
     9f4:	ldp	x21, x22, [sp, #32]
     9f8:	ldp	x29, x30, [sp], #48
     9fc:	ret
     a00:	sub	x20, x20, x19
     a04:	mov	x0, x20
     a08:	bl	0 <lt__malloc>
     a0c:	mov	x22, x0
     a10:	mov	w0, #0x1                   	// #1
     a14:	cbz	x22, 9f0 <trim+0x74>
     a18:	sub	x2, x20, #0x1
     a1c:	add	x1, x19, #0x1
     a20:	mov	x0, x22
     a24:	bl	0 <memcpy>
     a28:	add	x20, x22, x20
     a2c:	sturb	wzr, [x20, #-1]
     a30:	str	x22, [x21]
     a34:	mov	w0, #0x0                   	// #0
     a38:	b	9f0 <trim+0x74>

0000000000000a3c <find_handle_callback>:
     a3c:	stp	x29, x30, [sp, #-48]!
     a40:	mov	x29, sp
     a44:	stp	x19, x20, [sp, #16]
     a48:	str	x21, [sp, #32]
     a4c:	mov	x20, x0
     a50:	mov	x19, x1
     a54:	mov	x21, x2
     a58:	mov	w1, #0x4                   	// #4
     a5c:	bl	0 <access>
     a60:	cbz	w0, a78 <find_handle_callback+0x3c>
     a64:	mov	w0, #0x0                   	// #0
     a68:	ldp	x19, x20, [sp, #16]
     a6c:	ldr	x21, [sp, #32]
     a70:	ldp	x29, x30, [sp], #48
     a74:	ret
     a78:	mov	x3, #0x0                   	// #0
     a7c:	mov	x2, x21
     a80:	mov	x1, x20
     a84:	mov	x0, x19
     a88:	bl	1c0 <tryall_dlopen>
     a8c:	mov	w1, w0
     a90:	mov	w0, #0x1                   	// #1
     a94:	cbz	w1, a68 <find_handle_callback+0x2c>
     a98:	str	xzr, [x19]
     a9c:	b	a68 <find_handle_callback+0x2c>

0000000000000aa0 <lt_argz_insert>:
     aa0:	stp	x29, x30, [sp, #-48]!
     aa4:	mov	x29, sp
     aa8:	stp	x19, x20, [sp, #16]
     aac:	str	x21, [sp, #32]
     ab0:	mov	x20, x0
     ab4:	mov	x21, x1
     ab8:	mov	x19, x3
     abc:	cbz	x2, ad8 <lt_argz_insert+0x38>
     ac0:	bl	0 <argz_insert>
     ac4:	cbnz	w0, af8 <lt_argz_insert+0x58>
     ac8:	ldp	x19, x20, [sp, #16]
     acc:	ldr	x21, [sp, #32]
     ad0:	ldp	x29, x30, [sp], #48
     ad4:	ret
     ad8:	mov	x0, x3
     adc:	bl	0 <strlen>
     ae0:	add	x3, x0, #0x1
     ae4:	mov	x2, x19
     ae8:	mov	x1, x21
     aec:	mov	x0, x20
     af0:	bl	0 <argz_append>
     af4:	b	ac4 <lt_argz_insert+0x24>
     af8:	cmp	w0, #0xc
     afc:	b.eq	b14 <lt_argz_insert+0x74>  // b.none
     b00:	mov	w0, #0x0                   	// #0
     b04:	bl	0 <lt__error_string>
     b08:	bl	0 <lt__set_last_error>
     b0c:	mov	w0, #0x1                   	// #1
     b10:	b	ac8 <lt_argz_insert+0x28>
     b14:	mov	w0, #0xb                   	// #11
     b18:	bl	0 <lt__error_string>
     b1c:	bl	0 <lt__set_last_error>
     b20:	mov	w0, #0x1                   	// #1
     b24:	b	ac8 <lt_argz_insert+0x28>

0000000000000b28 <foreachfile_callback>:
     b28:	stp	x29, x30, [sp, #-128]!
     b2c:	mov	x29, sp
     b30:	stp	x19, x20, [sp, #16]
     b34:	stp	x27, x28, [sp, #80]
     b38:	str	x2, [sp, #104]
     b3c:	ldr	x28, [x1]
     b40:	str	xzr, [sp, #120]
     b44:	str	xzr, [sp, #112]
     b48:	cbz	x0, c34 <foreachfile_callback+0x10c>
     b4c:	mov	x20, x0
     b50:	ldrb	w0, [x0]
     b54:	cbz	w0, c34 <foreachfile_callback+0x10c>
     b58:	mov	x0, x20
     b5c:	bl	0 <strlen>
     b60:	add	x0, x20, x0
     b64:	ldurb	w0, [x0, #-1]
     b68:	cmp	w0, #0x2f
     b6c:	b.eq	c64 <foreachfile_callback+0x13c>  // b.none
     b70:	stp	x23, x24, [sp, #48]
     b74:	mov	x0, x20
     b78:	bl	0 <opendir>
     b7c:	mov	x23, x0
     b80:	cbz	x0, c94 <foreachfile_callback+0x16c>
     b84:	stp	x21, x22, [sp, #32]
     b88:	stp	x25, x26, [sp, #64]
     b8c:	adrp	x26, 0 <lt__alloc_die_callback>
     b90:	add	x26, x26, #0x0
     b94:	mov	x0, x23
     b98:	bl	0 <readdir>
     b9c:	mov	x19, x0
     ba0:	cbz	x0, e44 <foreachfile_callback+0x31c>
     ba4:	ldrb	w0, [x19, #19]
     ba8:	cmp	w0, #0x2e
     bac:	b.eq	b94 <foreachfile_callback+0x6c>  // b.none
     bb0:	ldrb	w0, [x20]
     bb4:	mov	x25, #0x0                   	// #0
     bb8:	cbz	w0, bc8 <foreachfile_callback+0xa0>
     bbc:	mov	x0, x20
     bc0:	bl	0 <strlen>
     bc4:	mov	x25, x0
     bc8:	add	x24, x19, #0x13
     bcc:	mov	x0, x24
     bd0:	bl	0 <strlen>
     bd4:	add	x21, x24, x0
     bd8:	mov	x22, x21
     bdc:	mov	x27, x22
     be0:	sub	x22, x22, #0x1
     be4:	cmp	x24, x22
     be8:	b.cs	bfc <foreachfile_callback+0xd4>  // b.hs, b.nlast
     bec:	ldrb	w1, [x22]
     bf0:	mov	x0, x26
     bf4:	bl	0 <strchr>
     bf8:	cbnz	x0, bdc <foreachfile_callback+0xb4>
     bfc:	ldrb	w0, [x27]
     c00:	cmp	w0, #0x2e
     c04:	csel	x21, x21, x27, ne  // ne = any
     c08:	sub	x1, x21, #0x1
     c0c:	cmp	x24, x1
     c10:	b.cs	ca0 <foreachfile_callback+0x178>  // b.hs, b.nlast
     c14:	add	x19, x19, #0x13
     c18:	ldrb	w2, [x1]
     c1c:	cmp	w2, #0x2e
     c20:	b.eq	c9c <foreachfile_callback+0x174>  // b.none
     c24:	sub	x1, x1, #0x1
     c28:	cmp	x19, x1
     c2c:	b.ne	c18 <foreachfile_callback+0xf0>  // b.any
     c30:	b	ca0 <foreachfile_callback+0x178>
     c34:	stp	x21, x22, [sp, #32]
     c38:	stp	x23, x24, [sp, #48]
     c3c:	stp	x25, x26, [sp, #64]
     c40:	adrp	x3, 0 <lt__alloc_die_callback>
     c44:	add	x3, x3, #0x0
     c48:	add	x3, x3, #0x80
     c4c:	mov	w2, #0x730                 	// #1840
     c50:	adrp	x1, 0 <lt__alloc_die_callback>
     c54:	add	x1, x1, #0x0
     c58:	adrp	x0, 0 <lt__alloc_die_callback>
     c5c:	add	x0, x0, #0x0
     c60:	bl	0 <__assert_fail>
     c64:	stp	x21, x22, [sp, #32]
     c68:	stp	x23, x24, [sp, #48]
     c6c:	stp	x25, x26, [sp, #64]
     c70:	adrp	x3, 0 <lt__alloc_die_callback>
     c74:	add	x3, x3, #0x0
     c78:	add	x3, x3, #0x80
     c7c:	mov	w2, #0x733                 	// #1843
     c80:	adrp	x1, 0 <lt__alloc_die_callback>
     c84:	add	x1, x1, #0x0
     c88:	adrp	x0, 0 <lt__alloc_die_callback>
     c8c:	add	x0, x0, #0x0
     c90:	bl	0 <__assert_fail>
     c94:	mov	w20, #0x0                   	// #0
     c98:	b	e04 <foreachfile_callback+0x2dc>
     c9c:	mov	x21, x1
     ca0:	sub	x21, x21, x24
     ca4:	add	x25, x21, x25
     ca8:	add	x0, x25, #0x2
     cac:	bl	0 <lt__malloc>
     cb0:	mov	x19, x0
     cb4:	cbz	x0, db0 <foreachfile_callback+0x288>
     cb8:	mov	x1, x20
     cbc:	bl	0 <strcpy>
     cc0:	mov	x0, x19
     cc4:	bl	0 <strlen>
     cc8:	mov	w1, #0x2f                  	// #47
     ccc:	strh	w1, [x19, x0]
     cd0:	mov	x2, x21
     cd4:	mov	x1, x24
     cd8:	mov	x0, x19
     cdc:	bl	0 <strncat>
     ce0:	add	x25, x19, x25
     ce4:	strb	wzr, [x25, #1]
     ce8:	ldrb	w0, [x19]
     cec:	cbz	w0, d48 <foreachfile_callback+0x220>
     cf0:	ldr	x22, [sp, #120]
     cf4:	cbz	x22, d80 <foreachfile_callback+0x258>
     cf8:	ldr	x25, [sp, #112]
     cfc:	add	x24, x22, x25
     d00:	mov	x21, #0x0                   	// #0
     d04:	cbz	x21, d74 <foreachfile_callback+0x24c>
     d08:	cmp	x21, x24
     d0c:	b.cs	d88 <foreachfile_callback+0x260>  // b.hs, b.nlast
     d10:	mov	x0, x21
     d14:	bl	0 <strlen>
     d18:	add	x0, x0, #0x1
     d1c:	add	x21, x21, x0
     d20:	cmp	x24, x21
     d24:	b.ls	d6c <foreachfile_callback+0x244>  // b.plast
     d28:	mov	x1, x21
     d2c:	mov	x0, x19
     d30:	bl	0 <strcmp>
     d34:	tbnz	w0, #31, d8c <foreachfile_callback+0x264>
     d38:	cbnz	w0, d04 <foreachfile_callback+0x1dc>
     d3c:	mov	x0, x19
     d40:	bl	0 <free>
     d44:	b	b94 <foreachfile_callback+0x6c>
     d48:	adrp	x3, 0 <lt__alloc_die_callback>
     d4c:	add	x3, x3, #0x0
     d50:	add	x3, x3, #0x98
     d54:	mov	w2, #0x6dd                 	// #1757
     d58:	adrp	x1, 0 <lt__alloc_die_callback>
     d5c:	add	x1, x1, #0x0
     d60:	adrp	x0, 0 <lt__alloc_die_callback>
     d64:	add	x0, x0, #0x0
     d68:	bl	0 <__assert_fail>
     d6c:	mov	x21, #0x0                   	// #0
     d70:	b	d8c <foreachfile_callback+0x264>
     d74:	cbz	x25, d8c <foreachfile_callback+0x264>
     d78:	mov	x21, x22
     d7c:	b	d28 <foreachfile_callback+0x200>
     d80:	mov	x21, x22
     d84:	b	d8c <foreachfile_callback+0x264>
     d88:	mov	x21, #0x0                   	// #0
     d8c:	mov	x3, x19
     d90:	mov	x2, x21
     d94:	add	x1, sp, #0x70
     d98:	add	x0, sp, #0x78
     d9c:	bl	aa0 <lt_argz_insert>
     da0:	mov	w21, w0
     da4:	mov	x0, x19
     da8:	bl	0 <free>
     dac:	cbz	w21, b94 <foreachfile_callback+0x6c>
     db0:	mov	x0, x23
     db4:	bl	0 <closedir>
     db8:	mov	w20, #0x0                   	// #0
     dbc:	ldp	x21, x22, [sp, #32]
     dc0:	ldp	x25, x26, [sp, #64]
     dc4:	b	e04 <foreachfile_callback+0x2dc>
     dc8:	mov	w20, #0x0                   	// #0
     dcc:	ldp	x21, x22, [sp, #32]
     dd0:	ldp	x25, x26, [sp, #64]
     dd4:	b	e04 <foreachfile_callback+0x2dc>
     dd8:	cbz	x20, e24 <foreachfile_callback+0x2fc>
     ddc:	cbz	x0, de8 <foreachfile_callback+0x2c0>
     de0:	mov	x19, x0
     de4:	b	e84 <foreachfile_callback+0x35c>
     de8:	mov	w20, #0x0                   	// #0
     dec:	ldp	x21, x22, [sp, #32]
     df0:	ldp	x25, x26, [sp, #64]
     df4:	b	e04 <foreachfile_callback+0x2dc>
     df8:	mov	w20, #0x0                   	// #0
     dfc:	ldp	x21, x22, [sp, #32]
     e00:	ldp	x25, x26, [sp, #64]
     e04:	ldr	x0, [sp, #120]
     e08:	bl	0 <free>
     e0c:	mov	w0, w20
     e10:	ldp	x23, x24, [sp, #48]
     e14:	ldp	x19, x20, [sp, #16]
     e18:	ldp	x27, x28, [sp, #80]
     e1c:	ldp	x29, x30, [sp], #128
     e20:	ret
     e24:	mov	w20, #0x0                   	// #0
     e28:	ldp	x21, x22, [sp, #32]
     e2c:	ldp	x25, x26, [sp, #64]
     e30:	b	e04 <foreachfile_callback+0x2dc>
     e34:	mov	w20, #0x0                   	// #0
     e38:	ldp	x21, x22, [sp, #32]
     e3c:	ldp	x25, x26, [sp, #64]
     e40:	b	e04 <foreachfile_callback+0x2dc>
     e44:	mov	x0, x23
     e48:	bl	0 <closedir>
     e4c:	ldr	x0, [sp, #120]
     e50:	cbz	x0, e34 <foreachfile_callback+0x30c>
     e54:	ldr	x0, [sp, #120]
     e58:	ldr	x20, [sp, #112]
     e5c:	cbz	x19, dd8 <foreachfile_callback+0x2b0>
     e60:	add	x20, x0, x20
     e64:	cmp	x19, x20
     e68:	b.cs	df8 <foreachfile_callback+0x2d0>  // b.hs, b.nlast
     e6c:	mov	x0, x19
     e70:	bl	0 <strlen>
     e74:	add	x0, x0, #0x1
     e78:	add	x19, x19, x0
     e7c:	cmp	x20, x19
     e80:	b.ls	dc8 <foreachfile_callback+0x2a0>  // b.plast
     e84:	ldr	x1, [sp, #104]
     e88:	mov	x0, x19
     e8c:	blr	x28
     e90:	mov	w20, w0
     e94:	cbz	w0, e54 <foreachfile_callback+0x32c>
     e98:	ldp	x21, x22, [sp, #32]
     e9c:	ldp	x25, x26, [sp, #64]
     ea0:	b	e04 <foreachfile_callback+0x2dc>

0000000000000ea4 <lt_dlpath_insertdir>:
     ea4:	stp	x29, x30, [sp, #-80]!
     ea8:	mov	x29, sp
     eac:	stp	x19, x20, [sp, #16]
     eb0:	str	x21, [sp, #32]
     eb4:	str	xzr, [sp, #72]
     eb8:	str	xzr, [sp, #64]
     ebc:	str	xzr, [sp, #56]
     ec0:	cbz	x0, f60 <lt_dlpath_insertdir+0xbc>
     ec4:	mov	x20, x0
     ec8:	mov	x21, x1
     ecc:	mov	x19, x2
     ed0:	cbz	x2, f84 <lt_dlpath_insertdir+0xe0>
     ed4:	ldrb	w0, [x2]
     ed8:	cbz	w0, f84 <lt_dlpath_insertdir+0xe0>
     edc:	add	x1, sp, #0x48
     ee0:	mov	x0, x2
     ee4:	bl	ac <canonicalize_path>
     ee8:	cbnz	w0, 1088 <lt_dlpath_insertdir+0x1e4>
     eec:	ldr	x0, [sp, #72]
     ef0:	cbz	x0, fa8 <lt_dlpath_insertdir+0x104>
     ef4:	ldrb	w0, [x0]
     ef8:	cbz	w0, fa8 <lt_dlpath_insertdir+0x104>
     efc:	ldr	x0, [x20]
     f00:	cbz	x0, fcc <lt_dlpath_insertdir+0x128>
     f04:	add	x2, sp, #0x38
     f08:	add	x1, sp, #0x40
     f0c:	bl	600 <argzize_path>
     f10:	cbnz	w0, 10b0 <lt_dlpath_insertdir+0x20c>
     f14:	cbz	x21, f3c <lt_dlpath_insertdir+0x98>
     f18:	ldr	x0, [x20]
     f1c:	cmp	x0, x21
     f20:	b.hi	100c <lt_dlpath_insertdir+0x168>  // b.pmore
     f24:	sub	x21, x21, x0
     f28:	bl	0 <strlen>
     f2c:	cmp	w21, w0
     f30:	b.gt	1030 <lt_dlpath_insertdir+0x18c>
     f34:	ldr	x1, [sp, #64]
     f38:	add	x21, x1, x21
     f3c:	mov	x3, x19
     f40:	mov	x2, x21
     f44:	add	x1, sp, #0x38
     f48:	add	x0, sp, #0x40
     f4c:	bl	aa0 <lt_argz_insert>
     f50:	mov	w19, w0
     f54:	cbz	w0, 1054 <lt_dlpath_insertdir+0x1b0>
     f58:	mov	w19, #0x1                   	// #1
     f5c:	b	108c <lt_dlpath_insertdir+0x1e8>
     f60:	adrp	x3, 0 <lt__alloc_die_callback>
     f64:	add	x3, x3, #0x0
     f68:	add	x3, x3, #0xb0
     f6c:	mov	w2, #0x84e                 	// #2126
     f70:	adrp	x1, 0 <lt__alloc_die_callback>
     f74:	add	x1, x1, #0x0
     f78:	adrp	x0, 0 <lt__alloc_die_callback>
     f7c:	add	x0, x0, #0x0
     f80:	bl	0 <__assert_fail>
     f84:	adrp	x3, 0 <lt__alloc_die_callback>
     f88:	add	x3, x3, #0x0
     f8c:	add	x3, x3, #0xb0
     f90:	mov	w2, #0x84f                 	// #2127
     f94:	adrp	x1, 0 <lt__alloc_die_callback>
     f98:	add	x1, x1, #0x0
     f9c:	adrp	x0, 0 <lt__alloc_die_callback>
     fa0:	add	x0, x0, #0x0
     fa4:	bl	0 <__assert_fail>
     fa8:	adrp	x3, 0 <lt__alloc_die_callback>
     fac:	add	x3, x3, #0x0
     fb0:	add	x3, x3, #0xb0
     fb4:	mov	w2, #0x857                 	// #2135
     fb8:	adrp	x1, 0 <lt__alloc_die_callback>
     fbc:	add	x1, x1, #0x0
     fc0:	adrp	x0, 0 <lt__alloc_die_callback>
     fc4:	add	x0, x0, #0x0
     fc8:	bl	0 <__assert_fail>
     fcc:	cbnz	x21, fe8 <lt_dlpath_insertdir+0x144>
     fd0:	mov	x0, x19
     fd4:	bl	0 <lt__strdup>
     fd8:	str	x0, [x20]
     fdc:	cmp	x0, #0x0
     fe0:	cset	w19, eq  // eq = none
     fe4:	b	108c <lt_dlpath_insertdir+0x1e8>
     fe8:	adrp	x3, 0 <lt__alloc_die_callback>
     fec:	add	x3, x3, #0x0
     ff0:	add	x3, x3, #0xb0
     ff4:	mov	w2, #0x85c                 	// #2140
     ff8:	adrp	x1, 0 <lt__alloc_die_callback>
     ffc:	add	x1, x1, #0x0
    1000:	adrp	x0, 0 <lt__alloc_die_callback>
    1004:	add	x0, x0, #0x0
    1008:	bl	0 <__assert_fail>
    100c:	adrp	x3, 0 <lt__alloc_die_callback>
    1010:	add	x3, x3, #0x0
    1014:	add	x3, x3, #0xb0
    1018:	mov	w2, #0x875                 	// #2165
    101c:	adrp	x1, 0 <lt__alloc_die_callback>
    1020:	add	x1, x1, #0x0
    1024:	adrp	x0, 0 <lt__alloc_die_callback>
    1028:	add	x0, x0, #0x0
    102c:	bl	0 <__assert_fail>
    1030:	adrp	x3, 0 <lt__alloc_die_callback>
    1034:	add	x3, x3, #0x0
    1038:	add	x3, x3, #0xb0
    103c:	mov	w2, #0x876                 	// #2166
    1040:	adrp	x1, 0 <lt__alloc_die_callback>
    1044:	add	x1, x1, #0x0
    1048:	adrp	x0, 0 <lt__alloc_die_callback>
    104c:	add	x0, x0, #0x0
    1050:	bl	0 <__assert_fail>
    1054:	mov	w2, #0x3a                  	// #58
    1058:	ldr	x1, [sp, #56]
    105c:	ldr	x0, [sp, #64]
    1060:	bl	0 <argz_stringify>
    1064:	ldr	x0, [x20]
    1068:	ldr	x1, [sp, #64]
    106c:	cmp	x0, x1
    1070:	b.eq	108c <lt_dlpath_insertdir+0x1e8>  // b.none
    1074:	bl	0 <free>
    1078:	ldr	x0, [sp, #64]
    107c:	str	x0, [x20]
    1080:	str	xzr, [sp, #64]
    1084:	b	108c <lt_dlpath_insertdir+0x1e8>
    1088:	mov	w19, #0x1                   	// #1
    108c:	ldr	x0, [sp, #64]
    1090:	bl	0 <free>
    1094:	ldr	x0, [sp, #72]
    1098:	bl	0 <free>
    109c:	mov	w0, w19
    10a0:	ldp	x19, x20, [sp, #16]
    10a4:	ldr	x21, [sp, #32]
    10a8:	ldp	x29, x30, [sp], #80
    10ac:	ret
    10b0:	mov	w19, #0x1                   	// #1
    10b4:	b	108c <lt_dlpath_insertdir+0x1e8>

00000000000010b8 <lt_dlinit>:
    10b8:	adrp	x0, 0 <lt__alloc_die_callback>
    10bc:	add	x0, x0, #0x0
    10c0:	ldr	w1, [x0, #8]
    10c4:	add	w1, w1, #0x1
    10c8:	str	w1, [x0, #8]
    10cc:	mov	w0, #0x0                   	// #0
    10d0:	cmp	w1, #0x1
    10d4:	b.eq	10dc <lt_dlinit+0x24>  // b.none
    10d8:	ret
    10dc:	stp	x29, x30, [sp, #-16]!
    10e0:	mov	x29, sp
    10e4:	adrp	x1, 0 <lt__alloc_die>
    10e8:	adrp	x0, 0 <lt__alloc_die_callback>
    10ec:	add	x0, x0, #0x0
    10f0:	str	x0, [x1]
    10f4:	adrp	x0, 0 <lt__alloc_die_callback>
    10f8:	add	x1, x0, #0x0
    10fc:	str	xzr, [x0]
    1100:	str	xzr, [x1, #16]
    1104:	mov	x1, #0x0                   	// #0
    1108:	adrp	x0, 0 <preopen_LTX_get_vtable>
    110c:	add	x0, x0, #0x0
    1110:	bl	1c <loader_init>
    1114:	cbz	w0, 1120 <lt_dlinit+0x68>
    1118:	ldp	x29, x30, [sp], #16
    111c:	ret
    1120:	adrp	x0, 0 <lt_libltdl_LTX_preloaded_symbols>
    1124:	add	x0, x0, #0x0
    1128:	bl	0 <lt_dlpreload>
    112c:	cbnz	w0, 1118 <lt_dlinit+0x60>
    1130:	adrp	x1, 0 <lt__alloc_die_callback>
    1134:	add	x1, x1, #0x0
    1138:	adrp	x0, 0 <lt__alloc_die_callback>
    113c:	add	x0, x0, #0x0
    1140:	bl	0 <lt_dlpreload_open>
    1144:	b	1118 <lt_dlinit+0x60>

0000000000001148 <lt_dladvise_init>:
    1148:	stp	x29, x30, [sp, #-32]!
    114c:	mov	x29, sp
    1150:	str	x19, [sp, #16]
    1154:	mov	x19, x0
    1158:	mov	x0, #0x4                   	// #4
    115c:	bl	0 <lt__zalloc>
    1160:	str	x0, [x19]
    1164:	cmp	x0, #0x0
    1168:	cset	w0, eq  // eq = none
    116c:	ldr	x19, [sp, #16]
    1170:	ldp	x29, x30, [sp], #32
    1174:	ret

0000000000001178 <lt_dladvise_destroy>:
    1178:	cbz	x0, 11a8 <lt_dladvise_destroy+0x30>
    117c:	stp	x29, x30, [sp, #-32]!
    1180:	mov	x29, sp
    1184:	str	x19, [sp, #16]
    1188:	mov	x19, x0
    118c:	ldr	x0, [x0]
    1190:	bl	0 <free>
    1194:	str	xzr, [x19]
    1198:	mov	w0, #0x0                   	// #0
    119c:	ldr	x19, [sp, #16]
    11a0:	ldp	x29, x30, [sp], #32
    11a4:	ret
    11a8:	mov	w0, #0x0                   	// #0
    11ac:	ret

00000000000011b0 <lt_dladvise_ext>:
    11b0:	cbz	x0, 11d0 <lt_dladvise_ext+0x20>
    11b4:	ldr	x0, [x0]
    11b8:	cbz	x0, 11d0 <lt_dladvise_ext+0x20>
    11bc:	ldrb	w1, [x0]
    11c0:	orr	w1, w1, #0x1
    11c4:	strb	w1, [x0]
    11c8:	mov	w0, #0x0                   	// #0
    11cc:	ret
    11d0:	stp	x29, x30, [sp, #-16]!
    11d4:	mov	x29, sp
    11d8:	adrp	x3, 0 <lt__alloc_die_callback>
    11dc:	add	x3, x3, #0x0
    11e0:	add	x3, x3, #0xc8
    11e4:	mov	w2, #0x631                 	// #1585
    11e8:	adrp	x1, 0 <lt__alloc_die_callback>
    11ec:	add	x1, x1, #0x0
    11f0:	adrp	x0, 0 <lt__alloc_die_callback>
    11f4:	add	x0, x0, #0x0
    11f8:	bl	0 <__assert_fail>

00000000000011fc <lt_dladvise_resident>:
    11fc:	cbz	x0, 121c <lt_dladvise_resident+0x20>
    1200:	ldr	x0, [x0]
    1204:	cbz	x0, 121c <lt_dladvise_resident+0x20>
    1208:	ldrb	w1, [x0]
    120c:	orr	w1, w1, #0x2
    1210:	strb	w1, [x0]
    1214:	mov	w0, #0x0                   	// #0
    1218:	ret
    121c:	stp	x29, x30, [sp, #-16]!
    1220:	mov	x29, sp
    1224:	adrp	x3, 0 <lt__alloc_die_callback>
    1228:	add	x3, x3, #0x0
    122c:	add	x3, x3, #0xd8
    1230:	mov	w2, #0x639                 	// #1593
    1234:	adrp	x1, 0 <lt__alloc_die_callback>
    1238:	add	x1, x1, #0x0
    123c:	adrp	x0, 0 <lt__alloc_die_callback>
    1240:	add	x0, x0, #0x0
    1244:	bl	0 <__assert_fail>

0000000000001248 <lt_dladvise_local>:
    1248:	cbz	x0, 1268 <lt_dladvise_local+0x20>
    124c:	ldr	x0, [x0]
    1250:	cbz	x0, 1268 <lt_dladvise_local+0x20>
    1254:	ldrb	w1, [x0]
    1258:	orr	w1, w1, #0x8
    125c:	strb	w1, [x0]
    1260:	mov	w0, #0x0                   	// #0
    1264:	ret
    1268:	stp	x29, x30, [sp, #-16]!
    126c:	mov	x29, sp
    1270:	adrp	x3, 0 <lt__alloc_die_callback>
    1274:	add	x3, x3, #0x0
    1278:	add	x3, x3, #0xf0
    127c:	mov	w2, #0x641                 	// #1601
    1280:	adrp	x1, 0 <lt__alloc_die_callback>
    1284:	add	x1, x1, #0x0
    1288:	adrp	x0, 0 <lt__alloc_die_callback>
    128c:	add	x0, x0, #0x0
    1290:	bl	0 <__assert_fail>

0000000000001294 <lt_dladvise_global>:
    1294:	cbz	x0, 12b4 <lt_dladvise_global+0x20>
    1298:	ldr	x0, [x0]
    129c:	cbz	x0, 12b4 <lt_dladvise_global+0x20>
    12a0:	ldrb	w1, [x0]
    12a4:	orr	w1, w1, #0x4
    12a8:	strb	w1, [x0]
    12ac:	mov	w0, #0x0                   	// #0
    12b0:	ret
    12b4:	stp	x29, x30, [sp, #-16]!
    12b8:	mov	x29, sp
    12bc:	adrp	x3, 0 <lt__alloc_die_callback>
    12c0:	add	x3, x3, #0x0
    12c4:	add	x3, x3, #0x108
    12c8:	mov	w2, #0x649                 	// #1609
    12cc:	adrp	x1, 0 <lt__alloc_die_callback>
    12d0:	add	x1, x1, #0x0
    12d4:	adrp	x0, 0 <lt__alloc_die_callback>
    12d8:	add	x0, x0, #0x0
    12dc:	bl	0 <__assert_fail>

00000000000012e0 <lt_dladvise_preload>:
    12e0:	cbz	x0, 1300 <lt_dladvise_preload+0x20>
    12e4:	ldr	x0, [x0]
    12e8:	cbz	x0, 1300 <lt_dladvise_preload+0x20>
    12ec:	ldrb	w1, [x0]
    12f0:	orr	w1, w1, #0x10
    12f4:	strb	w1, [x0]
    12f8:	mov	w0, #0x0                   	// #0
    12fc:	ret
    1300:	stp	x29, x30, [sp, #-16]!
    1304:	mov	x29, sp
    1308:	adrp	x3, 0 <lt__alloc_die_callback>
    130c:	add	x3, x3, #0x0
    1310:	add	x3, x3, #0x120
    1314:	mov	w2, #0x651                 	// #1617
    1318:	adrp	x1, 0 <lt__alloc_die_callback>
    131c:	add	x1, x1, #0x0
    1320:	adrp	x0, 0 <lt__alloc_die_callback>
    1324:	add	x0, x0, #0x0
    1328:	bl	0 <__assert_fail>

000000000000132c <lt_dlforeachfile>:
    132c:	stp	x29, x30, [sp, #-48]!
    1330:	mov	x29, sp
    1334:	str	x19, [sp, #16]
    1338:	str	x1, [sp, #40]
    133c:	mov	x19, x2
    1340:	cbz	x0, 1368 <lt_dlforeachfile+0x3c>
    1344:	mov	x4, x2
    1348:	add	x3, sp, #0x28
    134c:	adrp	x2, 0 <lt__alloc_die_callback>
    1350:	add	x2, x2, #0x0
    1354:	mov	x1, #0x0                   	// #0
    1358:	bl	6cc <foreach_dirinpath>
    135c:	ldr	x19, [sp, #16]
    1360:	ldp	x29, x30, [sp], #48
    1364:	ret
    1368:	mov	x4, x2
    136c:	add	x3, sp, #0x28
    1370:	adrp	x2, 0 <lt__alloc_die_callback>
    1374:	add	x2, x2, #0x0
    1378:	mov	x1, #0x0                   	// #0
    137c:	adrp	x0, 0 <lt__alloc_die_callback>
    1380:	ldr	x0, [x0]
    1384:	bl	6cc <foreach_dirinpath>
    1388:	cbnz	w0, 135c <lt_dlforeachfile+0x30>
    138c:	adrp	x0, 0 <lt__alloc_die_callback>
    1390:	add	x0, x0, #0x0
    1394:	bl	0 <getenv>
    1398:	mov	x4, x19
    139c:	add	x3, sp, #0x28
    13a0:	adrp	x2, 0 <lt__alloc_die_callback>
    13a4:	add	x2, x2, #0x0
    13a8:	mov	x1, #0x0                   	// #0
    13ac:	bl	6cc <foreach_dirinpath>
    13b0:	cbnz	w0, 135c <lt_dlforeachfile+0x30>
    13b4:	adrp	x0, 0 <lt__alloc_die_callback>
    13b8:	add	x0, x0, #0x0
    13bc:	bl	0 <getenv>
    13c0:	mov	x4, x19
    13c4:	add	x3, sp, #0x28
    13c8:	adrp	x2, 0 <lt__alloc_die_callback>
    13cc:	add	x2, x2, #0x0
    13d0:	mov	x1, #0x0                   	// #0
    13d4:	bl	6cc <foreach_dirinpath>
    13d8:	cbnz	w0, 135c <lt_dlforeachfile+0x30>
    13dc:	mov	x4, x19
    13e0:	add	x3, sp, #0x28
    13e4:	adrp	x2, 0 <lt__alloc_die_callback>
    13e8:	add	x2, x2, #0x0
    13ec:	mov	x1, #0x0                   	// #0
    13f0:	adrp	x0, 0 <lt__alloc_die_callback>
    13f4:	add	x0, x0, #0x0
    13f8:	add	x0, x0, #0x138
    13fc:	bl	6cc <foreach_dirinpath>
    1400:	b	135c <lt_dlforeachfile+0x30>

0000000000001404 <lt_dlclose>:
    1404:	stp	x29, x30, [sp, #-32]!
    1408:	mov	x29, sp
    140c:	stp	x19, x20, [sp, #16]
    1410:	mov	x19, x0
    1414:	adrp	x0, 0 <lt__alloc_die_callback>
    1418:	ldr	x3, [x0]
    141c:	cmp	x3, #0x0
    1420:	ccmp	x3, x19, #0x4, ne  // ne = any
    1424:	b.eq	1474 <lt_dlclose+0x70>  // b.none
    1428:	mov	x1, x3
    142c:	mov	x2, x1
    1430:	ldr	x1, [x1]
    1434:	cmp	x1, #0x0
    1438:	ccmp	x19, x1, #0x4, ne  // ne = any
    143c:	b.ne	142c <lt_dlclose+0x28>  // b.any
    1440:	cbz	x1, 1480 <lt_dlclose+0x7c>
    1444:	ldr	w0, [x19, #32]
    1448:	sub	w0, w0, #0x1
    144c:	str	w0, [x19, #32]
    1450:	cmp	w0, #0x0
    1454:	b.le	1494 <lt_dlclose+0x90>
    1458:	ldrb	w0, [x19, #36]
    145c:	mov	w20, #0x0                   	// #0
    1460:	tbnz	w0, #0, 149c <lt_dlclose+0x98>
    1464:	mov	w0, w20
    1468:	ldp	x19, x20, [sp, #16]
    146c:	ldp	x29, x30, [sp], #32
    1470:	ret
    1474:	mov	x2, x3
    1478:	mov	x1, x3
    147c:	b	1440 <lt_dlclose+0x3c>
    1480:	mov	w0, #0xc                   	// #12
    1484:	bl	0 <lt__error_string>
    1488:	bl	0 <lt__set_last_error>
    148c:	mov	w20, #0x1                   	// #1
    1490:	b	1464 <lt_dlclose+0x60>
    1494:	ldrb	w0, [x19, #36]
    1498:	tbz	w0, #0, 14b0 <lt_dlclose+0xac>
    149c:	mov	w0, #0x10                  	// #16
    14a0:	bl	0 <lt__error_string>
    14a4:	bl	0 <lt__set_last_error>
    14a8:	mov	w20, #0x1                   	// #1
    14ac:	b	1464 <lt_dlclose+0x60>
    14b0:	ldr	x0, [x19, #8]
    14b4:	ldr	x0, [x0, #56]
    14b8:	cmp	x3, x19
    14bc:	b.eq	150c <lt_dlclose+0x108>  // b.none
    14c0:	ldr	x1, [x19]
    14c4:	str	x1, [x2]
    14c8:	ldr	x1, [x19, #8]
    14cc:	ldr	x2, [x1, #24]
    14d0:	ldr	x1, [x19, #56]
    14d4:	blr	x2
    14d8:	mov	w20, w0
    14dc:	mov	x0, x19
    14e0:	bl	16e8 <unload_deplibs>
    14e4:	add	w20, w20, w0
    14e8:	ldr	x0, [x19, #72]
    14ec:	bl	0 <free>
    14f0:	ldr	x0, [x19, #16]
    14f4:	bl	0 <free>
    14f8:	ldr	x0, [x19, #24]
    14fc:	bl	0 <free>
    1500:	mov	x0, x19
    1504:	bl	0 <free>
    1508:	b	1464 <lt_dlclose+0x60>
    150c:	ldr	x2, [x19]
    1510:	adrp	x1, 0 <lt__alloc_die_callback>
    1514:	str	x2, [x1]
    1518:	b	14c8 <lt_dlclose+0xc4>

000000000000151c <lt_dlexit>:
    151c:	stp	x29, x30, [sp, #-80]!
    1520:	mov	x29, sp
    1524:	stp	x19, x20, [sp, #16]
    1528:	stp	x21, x22, [sp, #32]
    152c:	adrp	x0, 0 <lt__alloc_die_callback>
    1530:	ldr	w21, [x0]
    1534:	cbz	w21, 1568 <lt_dlexit+0x4c>
    1538:	adrp	x0, 0 <lt__alloc_die_callback>
    153c:	add	x1, x0, #0x0
    1540:	ldr	x0, [x0]
    1544:	sub	w21, w21, #0x1
    1548:	str	w21, [x1, #8]
    154c:	mov	w20, #0x0                   	// #0
    1550:	cbz	w21, 157c <lt_dlexit+0x60>
    1554:	mov	w0, w20
    1558:	ldp	x19, x20, [sp, #16]
    155c:	ldp	x21, x22, [sp, #32]
    1560:	ldp	x29, x30, [sp], #80
    1564:	ret
    1568:	mov	w0, #0xf                   	// #15
    156c:	bl	0 <lt__error_string>
    1570:	bl	0 <lt__set_last_error>
    1574:	mov	w20, #0x1                   	// #1
    1578:	b	1554 <lt_dlexit+0x38>
    157c:	mov	w2, #0x0                   	// #0
    1580:	mov	w3, #0x1                   	// #1
    1584:	cbz	x0, 1664 <lt_dlexit+0x148>
    1588:	ldrb	w1, [x0, #36]
    158c:	tbz	w1, #0, 16b0 <lt_dlexit+0x194>
    1590:	ldr	x0, [x0]
    1594:	mov	w2, w3
    1598:	cbnz	x0, 1588 <lt_dlexit+0x6c>
    159c:	adrp	x0, 0 <lt__alloc_die_callback>
    15a0:	str	xzr, [x0]
    15a4:	mov	w20, w21
    15a8:	b	162c <lt_dlexit+0x110>
    15ac:	ldr	x1, [x24]
    15b0:	cmp	x1, #0x0
    15b4:	ccmp	x19, x1, #0x4, ne  // ne = any
    15b8:	b.eq	1618 <lt_dlexit+0xfc>  // b.none
    15bc:	mov	x0, x1
    15c0:	ldr	x0, [x0]
    15c4:	cmp	x0, #0x0
    15c8:	ccmp	x19, x0, #0x4, ne  // ne = any
    15cc:	b.ne	15c0 <lt_dlexit+0xa4>  // b.any
    15d0:	mov	w2, w22
    15d4:	cbnz	x0, 15e0 <lt_dlexit+0xc4>
    15d8:	mov	x19, x1
    15dc:	cbz	x19, 1620 <lt_dlexit+0x104>
    15e0:	mov	x0, x19
    15e4:	ldr	x19, [x0]
    15e8:	ldrb	w1, [x0, #36]
    15ec:	tbnz	w1, #0, 15dc <lt_dlexit+0xc0>
    15f0:	ldr	w1, [x0, #32]
    15f4:	mov	w2, w22
    15f8:	cmp	w1, w23
    15fc:	b.gt	15dc <lt_dlexit+0xc0>
    1600:	bl	1404 <lt_dlclose>
    1604:	cmp	w0, #0x0
    1608:	cinc	w20, w20, ne  // ne = any
    160c:	cbnz	x19, 15ac <lt_dlexit+0x90>
    1610:	add	w23, w23, #0x1
    1614:	b	16d8 <lt_dlexit+0x1bc>
    1618:	mov	x0, x1
    161c:	b	15d0 <lt_dlexit+0xb4>
    1620:	cbnz	w2, 1610 <lt_dlexit+0xf4>
    1624:	ldp	x23, x24, [sp, #48]
    1628:	ldr	x25, [sp, #64]
    162c:	cbz	w20, 1664 <lt_dlexit+0x148>
    1630:	mov	x0, #0x0                   	// #0
    1634:	bl	0 <lt_dlloader_next>
    1638:	mov	x19, x0
    163c:	cbnz	x0, 1684 <lt_dlexit+0x168>
    1640:	adrp	x19, 0 <lt__alloc_die_callback>
    1644:	add	x19, x19, #0x0
    1648:	ldr	x0, [x19, #16]
    164c:	bl	0 <free>
    1650:	str	xzr, [x19, #16]
    1654:	b	1554 <lt_dlexit+0x38>
    1658:	ldp	x23, x24, [sp, #48]
    165c:	ldr	x25, [sp, #64]
    1660:	b	162c <lt_dlexit+0x110>
    1664:	mov	x0, #0x0                   	// #0
    1668:	bl	0 <lt__set_last_error>
    166c:	mov	w20, w21
    1670:	b	1630 <lt_dlexit+0x114>
    1674:	bl	0 <lt__get_last_error>
    1678:	cmp	x0, #0x0
    167c:	cinc	w20, w20, ne  // ne = any
    1680:	cbz	x19, 1640 <lt_dlexit+0x124>
    1684:	mov	x21, x19
    1688:	mov	x0, x19
    168c:	bl	0 <lt_dlloader_next>
    1690:	mov	x19, x0
    1694:	mov	x0, x21
    1698:	bl	0 <lt_dlloader_get>
    169c:	ldr	x0, [x0]
    16a0:	bl	0 <lt_dlloader_remove>
    16a4:	cbz	x0, 1674 <lt_dlexit+0x158>
    16a8:	bl	0 <free>
    16ac:	b	1680 <lt_dlexit+0x164>
    16b0:	stp	x23, x24, [sp, #48]
    16b4:	str	x25, [sp, #64]
    16b8:	cbz	w2, 16c4 <lt_dlexit+0x1a8>
    16bc:	adrp	x1, 0 <lt__alloc_die_callback>
    16c0:	str	x0, [x1]
    16c4:	mov	w20, w21
    16c8:	mov	w23, #0x1                   	// #1
    16cc:	adrp	x24, 0 <lt__alloc_die_callback>
    16d0:	mov	w25, w21
    16d4:	mov	w22, w23
    16d8:	ldr	x0, [x24]
    16dc:	cbz	x0, 1658 <lt_dlexit+0x13c>
    16e0:	mov	w2, w25
    16e4:	b	15e4 <lt_dlexit+0xc8>

00000000000016e8 <unload_deplibs>:
    16e8:	stp	x29, x30, [sp, #-48]!
    16ec:	mov	x29, sp
    16f0:	str	x21, [sp, #32]
    16f4:	ldr	w21, [x0, #40]
    16f8:	cbz	w21, 1758 <unload_deplibs+0x70>
    16fc:	stp	x19, x20, [sp, #16]
    1700:	mov	x20, x0
    1704:	cmp	w21, #0x0
    1708:	b.le	1744 <unload_deplibs+0x5c>
    170c:	mov	x19, #0x0                   	// #0
    1710:	mov	w21, #0x0                   	// #0
    1714:	b	1730 <unload_deplibs+0x48>
    1718:	bl	1404 <lt_dlclose>
    171c:	add	w21, w21, w0
    1720:	add	x19, x19, #0x1
    1724:	ldr	w0, [x20, #40]
    1728:	cmp	w0, w19
    172c:	b.le	1748 <unload_deplibs+0x60>
    1730:	ldr	x0, [x20, #48]
    1734:	ldr	x0, [x0, x19, lsl #3]
    1738:	ldrb	w1, [x0, #36]
    173c:	tbnz	w1, #0, 1720 <unload_deplibs+0x38>
    1740:	b	1718 <unload_deplibs+0x30>
    1744:	mov	w21, #0x0                   	// #0
    1748:	ldr	x0, [x20, #48]
    174c:	bl	0 <free>
    1750:	str	xzr, [x20, #48]
    1754:	ldp	x19, x20, [sp, #16]
    1758:	mov	w0, w21
    175c:	ldr	x21, [sp, #32]
    1760:	ldp	x29, x30, [sp], #48
    1764:	ret

0000000000001768 <try_dlopen>:
    1768:	stp	x29, x30, [sp, #-208]!
    176c:	mov	x29, sp
    1770:	stp	x19, x20, [sp, #16]
    1774:	stp	x21, x22, [sp, #32]
    1778:	stp	x23, x24, [sp, #48]
    177c:	stp	x25, x26, [sp, #64]
    1780:	stp	x27, x28, [sp, #80]
    1784:	str	x3, [sp, #104]
    1788:	str	xzr, [sp, #200]
    178c:	str	xzr, [sp, #192]
    1790:	cbz	x0, 197c <try_dlopen+0x214>
    1794:	mov	x23, x0
    1798:	mov	x21, x1
    179c:	mov	x19, x2
    17a0:	ldr	x28, [x0]
    17a4:	cbnz	x28, 19a0 <try_dlopen+0x238>
    17a8:	bl	0 <lt__get_last_error>
    17ac:	str	x0, [sp, #112]
    17b0:	cbz	x21, 19c4 <try_dlopen+0x25c>
    17b4:	ldrb	w0, [x21]
    17b8:	cbz	w0, 1ae8 <try_dlopen+0x380>
    17bc:	cbz	x19, 1b0c <try_dlopen+0x3a4>
    17c0:	mov	x0, x21
    17c4:	bl	0 <strlen>
    17c8:	mov	x20, x0
    17cc:	ldrb	w1, [x19]
    17d0:	mov	x0, #0x0                   	// #0
    17d4:	cbz	w1, 17e0 <try_dlopen+0x78>
    17d8:	mov	x0, x19
    17dc:	bl	0 <strlen>
    17e0:	add	x20, x20, #0x1
    17e4:	add	x0, x20, x0
    17e8:	bl	0 <lt__malloc>
    17ec:	mov	x25, x0
    17f0:	cbz	x0, 21e0 <try_dlopen+0xa78>
    17f4:	mov	x3, x19
    17f8:	mov	x2, x21
    17fc:	adrp	x1, 0 <lt__alloc_die_callback>
    1800:	add	x1, x1, #0x0
    1804:	bl	0 <sprintf>
    1808:	add	x1, sp, #0xc8
    180c:	mov	x0, x25
    1810:	bl	ac <canonicalize_path>
    1814:	mov	w19, w0
    1818:	cbnz	w0, 2188 <try_dlopen+0xa20>
    181c:	ldr	x21, [sp, #200]
    1820:	mov	w1, #0x2f                  	// #47
    1824:	mov	x0, x21
    1828:	bl	0 <strrchr>
    182c:	mov	x20, x0
    1830:	cbz	x0, 1b24 <try_dlopen+0x3bc>
    1834:	add	x26, x0, #0x1
    1838:	sub	x21, x26, x21
    183c:	add	x0, x21, #0x1
    1840:	bl	0 <lt__malloc>
    1844:	mov	x24, x0
    1848:	str	x0, [sp, #192]
    184c:	cbz	x0, 2198 <try_dlopen+0xa30>
    1850:	mov	x2, x21
    1854:	ldr	x1, [sp, #200]
    1858:	bl	0 <lt_strlcpy>
    185c:	ldr	x0, [sp, #192]
    1860:	strb	wzr, [x0, x21]
    1864:	ldrb	w0, [x26]
    1868:	cbz	w0, 1b30 <try_dlopen+0x3c8>
    186c:	mov	w1, #0x2e                  	// #46
    1870:	mov	x0, x26
    1874:	bl	0 <strrchr>
    1878:	mov	x20, x0
    187c:	cbz	x0, 1b54 <try_dlopen+0x3ec>
    1880:	sub	x21, x20, x26
    1884:	add	x0, x21, #0x1
    1888:	bl	0 <lt__malloc>
    188c:	mov	x24, x0
    1890:	cbz	x0, 21a8 <try_dlopen+0xa40>
    1894:	cmp	x21, #0x0
    1898:	b.le	18d4 <try_dlopen+0x16c>
    189c:	bl	0 <__ctype_b_loc>
    18a0:	mov	x6, x21
    18a4:	mov	x1, #0x0                   	// #0
    18a8:	mov	w5, #0x5f                  	// #95
    18ac:	ldrb	w2, [x26, x1]
    18b0:	and	x4, x2, #0xff
    18b4:	ldr	x3, [x0]
    18b8:	ldrh	w3, [x3, x4, lsl #1]
    18bc:	tst	x3, #0x8
    18c0:	csel	w2, w2, w5, ne  // ne = any
    18c4:	strb	w2, [x24, x1]
    18c8:	add	x1, x1, #0x1
    18cc:	cmp	x1, x6
    18d0:	b.ne	18ac <try_dlopen+0x144>  // b.any
    18d4:	strb	wzr, [x24, x21]
    18d8:	ldr	x0, [sp, #192]
    18dc:	mov	x21, x28
    18e0:	cbz	x0, 1b64 <try_dlopen+0x3fc>
    18e4:	ldr	x0, [sp, #104]
    18e8:	cbz	x0, 18f4 <try_dlopen+0x18c>
    18ec:	ldrb	w0, [x0]
    18f0:	tbnz	w0, #4, 21c0 <try_dlopen+0xa58>
    18f4:	cbz	x20, 20b4 <try_dlopen+0x94c>
    18f8:	adrp	x1, 0 <lt__alloc_die_callback>
    18fc:	add	x1, x1, #0x0
    1900:	add	x1, x1, #0x180
    1904:	mov	x0, x20
    1908:	bl	0 <strcmp>
    190c:	str	w0, [sp, #136]
    1910:	cbnz	w0, 20b4 <try_dlopen+0x94c>
    1914:	str	xzr, [sp, #152]
    1918:	str	xzr, [sp, #160]
    191c:	str	xzr, [sp, #168]
    1920:	str	xzr, [sp, #176]
    1924:	ldr	x0, [sp, #192]
    1928:	cbz	x0, 1c44 <try_dlopen+0x4dc>
    192c:	adrp	x1, 0 <lt__alloc_die_callback>
    1930:	add	x1, x1, #0x0
    1934:	mov	x0, x25
    1938:	bl	0 <fopen>
    193c:	mov	x27, x0
    1940:	cbz	x27, 1ccc <try_dlopen+0x564>
    1944:	mov	x0, #0x800                 	// #2048
    1948:	bl	0 <lt__malloc>
    194c:	mov	x19, x0
    1950:	mov	w0, #0x1                   	// #1
    1954:	str	w0, [sp, #140]
    1958:	mov	x20, #0x800                 	// #2048
    195c:	cbz	x19, 1ce4 <try_dlopen+0x57c>
    1960:	adrp	x0, 0 <lt__alloc_die_callback>
    1964:	add	x0, x0, #0x0
    1968:	str	x0, [sp, #120]
    196c:	adrp	x0, 0 <lt__alloc_die_callback>
    1970:	add	x0, x0, #0x0
    1974:	str	x0, [sp, #128]
    1978:	b	1e4c <try_dlopen+0x6e4>
    197c:	adrp	x3, 0 <lt__alloc_die_callback>
    1980:	add	x3, x3, #0x0
    1984:	add	x3, x3, #0x160
    1988:	mov	w2, #0x494                 	// #1172
    198c:	adrp	x1, 0 <lt__alloc_die_callback>
    1990:	add	x1, x1, #0x0
    1994:	adrp	x0, 0 <lt__alloc_die_callback>
    1998:	add	x0, x0, #0x0
    199c:	bl	0 <__assert_fail>
    19a0:	adrp	x3, 0 <lt__alloc_die_callback>
    19a4:	add	x3, x3, #0x0
    19a8:	add	x3, x3, #0x160
    19ac:	mov	w2, #0x495                 	// #1173
    19b0:	adrp	x1, 0 <lt__alloc_die_callback>
    19b4:	add	x1, x1, #0x0
    19b8:	adrp	x0, 0 <lt__alloc_die_callback>
    19bc:	add	x0, x0, #0x0
    19c0:	bl	0 <__assert_fail>
    19c4:	mov	x0, #0x58                  	// #88
    19c8:	bl	0 <lt__zalloc>
    19cc:	str	x0, [x23]
    19d0:	mov	w19, #0x1                   	// #1
    19d4:	cbz	x0, 1ab8 <try_dlopen+0x350>
    19d8:	str	x0, [sp, #184]
    19dc:	ldrb	w1, [x0, #36]
    19e0:	orr	w1, w1, w19
    19e4:	strb	w1, [x0, #36]
    19e8:	mov	x3, #0x0                   	// #0
    19ec:	ldr	x2, [sp, #104]
    19f0:	mov	x1, #0x0                   	// #0
    19f4:	add	x0, sp, #0xb8
    19f8:	bl	1c0 <tryall_dlopen>
    19fc:	cbnz	w0, 1ad8 <try_dlopen+0x370>
    1a00:	mov	x25, x21
    1a04:	mov	x24, x21
    1a08:	mov	x26, x21
    1a0c:	ldr	x0, [x23]
    1a10:	ldr	x1, [sp, #184]
    1a14:	cmp	x0, x1
    1a18:	b.eq	1a2c <try_dlopen+0x2c4>  // b.none
    1a1c:	bl	0 <free>
    1a20:	ldr	x0, [sp, #184]
    1a24:	str	x0, [x23]
    1a28:	str	xzr, [sp, #184]
    1a2c:	ldr	x0, [x23]
    1a30:	ldr	w1, [x0, #32]
    1a34:	cbnz	w1, 1a78 <try_dlopen+0x310>
    1a38:	mov	w1, #0x1                   	// #1
    1a3c:	str	w1, [x0, #32]
    1a40:	ldr	x0, [x23]
    1a44:	ldr	x0, [x0, #24]
    1a48:	cmp	x0, x24
    1a4c:	b.eq	1a60 <try_dlopen+0x2f8>  // b.none
    1a50:	bl	0 <free>
    1a54:	ldr	x0, [x23]
    1a58:	str	x24, [x0, #24]
    1a5c:	mov	x24, x28
    1a60:	ldr	x1, [x23]
    1a64:	adrp	x0, 0 <lt__alloc_die_callback>
    1a68:	ldr	x2, [x0]
    1a6c:	str	x2, [x1]
    1a70:	ldr	x1, [x23]
    1a74:	str	x1, [x0]
    1a78:	ldr	x0, [sp, #112]
    1a7c:	bl	0 <lt__set_last_error>
    1a80:	mov	x28, x21
    1a84:	mov	w19, #0x0                   	// #0
    1a88:	ldr	x0, [sp, #192]
    1a8c:	bl	0 <free>
    1a90:	mov	x0, x25
    1a94:	bl	0 <free>
    1a98:	mov	x0, x24
    1a9c:	bl	0 <free>
    1aa0:	ldr	x0, [sp, #200]
    1aa4:	cbz	x0, 21d4 <try_dlopen+0xa6c>
    1aa8:	ldr	x0, [sp, #200]
    1aac:	bl	0 <free>
    1ab0:	mov	x0, x28
    1ab4:	bl	0 <free>
    1ab8:	mov	w0, w19
    1abc:	ldp	x19, x20, [sp, #16]
    1ac0:	ldp	x21, x22, [sp, #32]
    1ac4:	ldp	x23, x24, [sp, #48]
    1ac8:	ldp	x25, x26, [sp, #64]
    1acc:	ldp	x27, x28, [sp, #80]
    1ad0:	ldp	x29, x30, [sp], #208
    1ad4:	ret
    1ad8:	ldr	x0, [x23]
    1adc:	bl	0 <free>
    1ae0:	str	xzr, [x23]
    1ae4:	b	1ab8 <try_dlopen+0x350>
    1ae8:	adrp	x3, 0 <lt__alloc_die_callback>
    1aec:	add	x3, x3, #0x0
    1af0:	add	x3, x3, #0x160
    1af4:	mov	w2, #0x4b4                 	// #1204
    1af8:	adrp	x1, 0 <lt__alloc_die_callback>
    1afc:	add	x1, x1, #0x0
    1b00:	adrp	x0, 0 <lt__alloc_die_callback>
    1b04:	add	x0, x0, #0x0
    1b08:	bl	0 <__assert_fail>
    1b0c:	mov	x0, x21
    1b10:	bl	0 <lt__strdup>
    1b14:	mov	x25, x0
    1b18:	cbnz	x0, 1808 <try_dlopen+0xa0>
    1b1c:	mov	w19, #0x1                   	// #1
    1b20:	b	1ab8 <try_dlopen+0x350>
    1b24:	str	xzr, [sp, #200]
    1b28:	mov	x26, x21
    1b2c:	b	1864 <try_dlopen+0xfc>
    1b30:	adrp	x3, 0 <lt__alloc_die_callback>
    1b34:	add	x3, x3, #0x0
    1b38:	add	x3, x3, #0x160
    1b3c:	mov	w2, #0x4e3                 	// #1251
    1b40:	adrp	x1, 0 <lt__alloc_die_callback>
    1b44:	add	x1, x1, #0x0
    1b48:	adrp	x0, 0 <lt__alloc_die_callback>
    1b4c:	add	x0, x0, #0x0
    1b50:	bl	0 <__assert_fail>
    1b54:	mov	x0, x26
    1b58:	bl	0 <strlen>
    1b5c:	add	x20, x26, x0
    1b60:	b	1880 <try_dlopen+0x118>
    1b64:	adrp	x0, 0 <lt__alloc_die_callback>
    1b68:	add	x0, x0, #0x0
    1b6c:	bl	0 <lt_dlloader_find>
    1b70:	mov	x21, x0
    1b74:	cbz	x0, 18e4 <try_dlopen+0x17c>
    1b78:	ldrb	w1, [x24]
    1b7c:	mov	x0, #0x6                   	// #6
    1b80:	cbz	w1, 1b90 <try_dlopen+0x428>
    1b84:	mov	x0, x24
    1b88:	bl	0 <strlen>
    1b8c:	add	x0, x0, #0x6
    1b90:	bl	0 <lt__malloc>
    1b94:	mov	x22, x0
    1b98:	mov	x0, #0x58                  	// #88
    1b9c:	bl	0 <lt__zalloc>
    1ba0:	str	x0, [x23]
    1ba4:	cmp	x0, #0x0
    1ba8:	ccmp	x22, #0x0, #0x4, ne  // ne = any
    1bac:	b.eq	21b4 <try_dlopen+0xa4c>  // b.none
    1bb0:	str	x0, [sp, #184]
    1bb4:	mov	x2, #0x3                   	// #3
    1bb8:	adrp	x1, 0 <lt__alloc_die_callback>
    1bbc:	add	x1, x1, #0x0
    1bc0:	mov	x0, x24
    1bc4:	bl	0 <strncmp>
    1bc8:	cbnz	w0, 1c20 <try_dlopen+0x4b8>
    1bcc:	adrp	x2, 0 <lt__alloc_die_callback>
    1bd0:	add	x2, x2, #0x0
    1bd4:	add	x4, x2, #0x170
    1bd8:	add	x3, x24, #0x3
    1bdc:	add	x2, x2, #0x178
    1be0:	adrp	x1, 0 <lt__alloc_die_callback>
    1be4:	add	x1, x1, #0x0
    1be8:	mov	x0, x22
    1bec:	bl	0 <sprintf>
    1bf0:	mov	x3, x21
    1bf4:	ldr	x2, [sp, #104]
    1bf8:	mov	x1, x22
    1bfc:	add	x0, sp, #0xb8
    1c00:	bl	1c0 <tryall_dlopen>
    1c04:	mov	x21, x22
    1c08:	cbz	w0, 1a0c <try_dlopen+0x2a4>
    1c0c:	ldr	x0, [x23]
    1c10:	bl	0 <free>
    1c14:	str	xzr, [x23]
    1c18:	str	xzr, [sp, #184]
    1c1c:	b	18e4 <try_dlopen+0x17c>
    1c20:	adrp	x3, 0 <lt__alloc_die_callback>
    1c24:	add	x3, x3, #0x0
    1c28:	add	x3, x3, #0x170
    1c2c:	mov	x2, x24
    1c30:	adrp	x1, 0 <lt__alloc_die_callback>
    1c34:	add	x1, x1, #0x0
    1c38:	mov	x0, x22
    1c3c:	bl	0 <sprintf>
    1c40:	b	1bf0 <try_dlopen+0x488>
    1c44:	adrp	x0, 0 <lt__alloc_die_callback>
    1c48:	ldr	x0, [x0]
    1c4c:	cbz	x0, 1c64 <try_dlopen+0x4fc>
    1c50:	add	x2, sp, #0xc0
    1c54:	mov	x1, x26
    1c58:	bl	908 <find_file>
    1c5c:	mov	x27, x0
    1c60:	cbnz	x0, 1944 <try_dlopen+0x1dc>
    1c64:	adrp	x0, 0 <lt__alloc_die_callback>
    1c68:	add	x0, x0, #0x0
    1c6c:	bl	0 <getenv>
    1c70:	cbz	x0, 1c88 <try_dlopen+0x520>
    1c74:	add	x2, sp, #0xc0
    1c78:	mov	x1, x26
    1c7c:	bl	908 <find_file>
    1c80:	mov	x27, x0
    1c84:	cbnz	x0, 1944 <try_dlopen+0x1dc>
    1c88:	adrp	x0, 0 <lt__alloc_die_callback>
    1c8c:	add	x0, x0, #0x0
    1c90:	bl	0 <getenv>
    1c94:	cbz	x0, 1cac <try_dlopen+0x544>
    1c98:	add	x2, sp, #0xc0
    1c9c:	mov	x1, x26
    1ca0:	bl	908 <find_file>
    1ca4:	mov	x27, x0
    1ca8:	cbnz	x0, 1944 <try_dlopen+0x1dc>
    1cac:	add	x2, sp, #0xc0
    1cb0:	mov	x1, x26
    1cb4:	adrp	x0, 0 <lt__alloc_die_callback>
    1cb8:	add	x0, x0, #0x0
    1cbc:	add	x0, x0, #0x138
    1cc0:	bl	908 <find_file>
    1cc4:	mov	x27, x0
    1cc8:	b	1940 <try_dlopen+0x1d8>
    1ccc:	mov	w0, #0x5                   	// #5
    1cd0:	bl	0 <lt__error_string>
    1cd4:	bl	0 <lt__set_last_error>
    1cd8:	mov	w19, #0x1                   	// #1
    1cdc:	mov	x28, x21
    1ce0:	b	1a88 <try_dlopen+0x320>
    1ce4:	mov	w0, #0x5                   	// #5
    1ce8:	bl	0 <lt__error_string>
    1cec:	bl	0 <lt__set_last_error>
    1cf0:	mov	x0, x27
    1cf4:	bl	0 <fclose>
    1cf8:	mov	x0, #0x58                  	// #88
    1cfc:	bl	0 <lt__zalloc>
    1d00:	str	x0, [x23]
    1d04:	mov	w19, #0x1                   	// #1
    1d08:	cbnz	x0, 1d10 <try_dlopen+0x5a8>
    1d0c:	add	w19, w19, #0x1
    1d10:	ldr	x0, [sp, #152]
    1d14:	bl	0 <free>
    1d18:	ldr	x0, [sp, #160]
    1d1c:	bl	0 <free>
    1d20:	ldr	x0, [sp, #168]
    1d24:	bl	0 <free>
    1d28:	ldr	x0, [sp, #176]
    1d2c:	bl	0 <free>
    1d30:	ldr	x0, [x23]
    1d34:	bl	0 <free>
    1d38:	str	xzr, [x23]
    1d3c:	b	1cdc <try_dlopen+0x574>
    1d40:	ldrb	w0, [x19]
    1d44:	cmp	w0, #0x23
    1d48:	ccmp	w0, #0xa, #0x4, ne  // ne = any
    1d4c:	b.eq	1e4c <try_dlopen+0x6e4>  // b.none
    1d50:	mov	x2, #0x7                   	// #7
    1d54:	ldr	x1, [sp, #120]
    1d58:	mov	x0, x19
    1d5c:	bl	0 <strncmp>
    1d60:	cbz	w0, 1e3c <try_dlopen+0x6d4>
    1d64:	mov	x2, #0xc                   	// #12
    1d68:	ldr	x1, [sp, #128]
    1d6c:	mov	x0, x19
    1d70:	bl	0 <strncmp>
    1d74:	cbz	w0, 1ed8 <try_dlopen+0x770>
    1d78:	mov	x2, #0x7                   	// #7
    1d7c:	adrp	x1, 0 <lt__alloc_die_callback>
    1d80:	add	x1, x1, #0x0
    1d84:	mov	x0, x19
    1d88:	bl	0 <strncmp>
    1d8c:	cbz	w0, 1ee8 <try_dlopen+0x780>
    1d90:	mov	x2, #0x10                  	// #16
    1d94:	adrp	x1, 0 <lt__alloc_die_callback>
    1d98:	add	x1, x1, #0x0
    1d9c:	mov	x0, x19
    1da0:	bl	0 <strncmp>
    1da4:	cbz	w0, 1ef8 <try_dlopen+0x790>
    1da8:	adrp	x1, 0 <lt__alloc_die_callback>
    1dac:	add	x1, x1, #0x0
    1db0:	mov	x0, x19
    1db4:	bl	0 <strcmp>
    1db8:	cbz	w0, 21e8 <try_dlopen+0xa80>
    1dbc:	adrp	x1, 0 <lt__alloc_die_callback>
    1dc0:	add	x1, x1, #0x0
    1dc4:	mov	x0, x19
    1dc8:	bl	0 <strcmp>
    1dcc:	cbz	w0, 21f4 <try_dlopen+0xa8c>
    1dd0:	ldr	x0, [sp, #152]
    1dd4:	cbnz	x0, 1e4c <try_dlopen+0x6e4>
    1dd8:	mov	x2, #0xe                   	// #14
    1ddc:	adrp	x1, 0 <lt__alloc_die_callback>
    1de0:	add	x1, x1, #0x0
    1de4:	mov	x0, x19
    1de8:	bl	0 <strncmp>
    1dec:	cbnz	w0, 1e4c <try_dlopen+0x6e4>
    1df0:	add	x1, x19, #0xe
    1df4:	add	x0, sp, #0x98
    1df8:	bl	97c <trim>
    1dfc:	cbnz	w0, 2014 <try_dlopen+0x8ac>
    1e00:	ldr	x0, [sp, #152]
    1e04:	cbz	x0, 1e4c <try_dlopen+0x6e4>
    1e08:	mov	w1, #0x20                  	// #32
    1e0c:	bl	0 <strrchr>
    1e10:	cbz	x0, 1e4c <try_dlopen+0x6e4>
    1e14:	add	x0, x0, #0x1
    1e18:	bl	0 <lt__strdup>
    1e1c:	mov	x22, x0
    1e20:	cbz	x0, 201c <try_dlopen+0x8b4>
    1e24:	ldr	x0, [sp, #152]
    1e28:	cmp	x22, x0
    1e2c:	b.eq	1e4c <try_dlopen+0x6e4>  // b.none
    1e30:	bl	0 <free>
    1e34:	str	x22, [sp, #152]
    1e38:	b	1e4c <try_dlopen+0x6e4>
    1e3c:	add	x1, x19, #0x7
    1e40:	add	x0, sp, #0x98
    1e44:	bl	97c <trim>
    1e48:	cbnz	w0, 2028 <try_dlopen+0x8c0>
    1e4c:	mov	x0, x27
    1e50:	bl	0 <feof>
    1e54:	mov	w22, w0
    1e58:	cbnz	w0, 1f18 <try_dlopen+0x7b0>
    1e5c:	add	x0, x19, x20
    1e60:	sturb	wzr, [x0, #-2]
    1e64:	mov	x2, x27
    1e68:	mov	w1, w20
    1e6c:	mov	x0, x19
    1e70:	bl	0 <fgets>
    1e74:	cbz	x0, 1f08 <try_dlopen+0x7a0>
    1e78:	add	x0, x19, x20
    1e7c:	ldurb	w0, [x0, #-2]
    1e80:	cmp	w0, #0x0
    1e84:	ccmp	w0, #0xa, #0x4, ne  // ne = any
    1e88:	b.eq	1d40 <try_dlopen+0x5d8>  // b.none
    1e8c:	mov	x0, x27
    1e90:	bl	0 <feof>
    1e94:	cbnz	w0, 1d40 <try_dlopen+0x5d8>
    1e98:	lsl	x22, x20, #1
    1e9c:	mov	x1, x22
    1ea0:	mov	x0, x19
    1ea4:	bl	0 <lt__realloc>
    1ea8:	mov	x19, x0
    1eac:	cbz	x0, 1f10 <try_dlopen+0x7a8>
    1eb0:	add	x0, x0, x22
    1eb4:	sturb	wzr, [x0, #-2]
    1eb8:	sub	x0, x20, #0x1
    1ebc:	mov	x2, x27
    1ec0:	add	w1, w20, #0x1
    1ec4:	add	x0, x19, x0
    1ec8:	bl	0 <fgets>
    1ecc:	cbz	x0, 1d40 <try_dlopen+0x5d8>
    1ed0:	mov	x20, x22
    1ed4:	b	1e78 <try_dlopen+0x710>
    1ed8:	add	x1, x19, #0xc
    1edc:	add	x0, sp, #0xa0
    1ee0:	bl	97c <trim>
    1ee4:	b	1e48 <try_dlopen+0x6e0>
    1ee8:	add	x1, x19, #0x7
    1eec:	add	x0, sp, #0xa8
    1ef0:	bl	97c <trim>
    1ef4:	b	1e48 <try_dlopen+0x6e0>
    1ef8:	add	x1, x19, #0x10
    1efc:	add	x0, sp, #0xb0
    1f00:	bl	97c <trim>
    1f04:	b	1e48 <try_dlopen+0x6e0>
    1f08:	str	w22, [sp, #136]
    1f0c:	b	1f18 <try_dlopen+0x7b0>
    1f10:	mov	w0, #0x1                   	// #1
    1f14:	str	w0, [sp, #136]
    1f18:	mov	x0, x19
    1f1c:	bl	0 <free>
    1f20:	ldr	w0, [sp, #136]
    1f24:	cmp	w0, #0x0
    1f28:	cset	w19, ne  // ne = any
    1f2c:	mov	x0, x27
    1f30:	bl	0 <fclose>
    1f34:	mov	x0, #0x58                  	// #88
    1f38:	bl	0 <lt__zalloc>
    1f3c:	str	x0, [x23]
    1f40:	cbz	x0, 1d0c <try_dlopen+0x5a4>
    1f44:	ldr	w1, [sp, #136]
    1f48:	cbnz	w1, 1d10 <try_dlopen+0x5a8>
    1f4c:	str	wzr, [x0, #40]
    1f50:	ldr	x0, [x23]
    1f54:	str	x0, [sp, #184]
    1f58:	ldr	x22, [sp, #192]
    1f5c:	ldr	x27, [sp, #168]
    1f60:	ldr	x20, [sp, #152]
    1f64:	ldr	x19, [sp, #160]
    1f68:	cbz	x19, 1f90 <try_dlopen+0x828>
    1f6c:	adrp	x0, 0 <lt__alloc_die_callback>
    1f70:	add	x0, x0, #0x0
    1f74:	bl	0 <lt_dlloader_find>
    1f78:	mov	x3, x0
    1f7c:	ldr	x2, [sp, #104]
    1f80:	mov	x1, x19
    1f84:	add	x0, sp, #0xb8
    1f88:	bl	1c0 <tryall_dlopen>
    1f8c:	cbz	w0, 1fcc <try_dlopen+0x864>
    1f90:	cbz	x20, 2078 <try_dlopen+0x910>
    1f94:	ldr	w0, [sp, #140]
    1f98:	cmp	w0, #0x0
    1f9c:	ccmp	x27, #0x0, #0x4, ne  // ne = any
    1fa0:	b.ne	2030 <try_dlopen+0x8c8>  // b.any
    1fa4:	ldr	w0, [sp, #140]
    1fa8:	cbz	w0, 2050 <try_dlopen+0x8e8>
    1fac:	cbz	x22, 2078 <try_dlopen+0x910>
    1fb0:	ldr	x4, [sp, #104]
    1fb4:	mov	x3, x20
    1fb8:	mov	x2, x22
    1fbc:	mov	x1, #0x0                   	// #0
    1fc0:	add	x0, sp, #0xb8
    1fc4:	bl	378 <tryall_dlopen_module>
    1fc8:	cbnz	w0, 2078 <try_dlopen+0x910>
    1fcc:	ldr	x0, [sp, #152]
    1fd0:	bl	0 <free>
    1fd4:	str	xzr, [sp, #152]
    1fd8:	ldr	x0, [sp, #160]
    1fdc:	bl	0 <free>
    1fe0:	str	xzr, [sp, #160]
    1fe4:	ldr	x0, [sp, #168]
    1fe8:	bl	0 <free>
    1fec:	str	xzr, [sp, #168]
    1ff0:	ldr	x0, [sp, #176]
    1ff4:	bl	0 <free>
    1ff8:	str	xzr, [sp, #176]
    1ffc:	ldr	x0, [x23]
    2000:	ldr	x1, [sp, #184]
    2004:	cmp	x0, x1
    2008:	b.eq	1a0c <try_dlopen+0x2a4>  // b.none
    200c:	bl	16e8 <unload_deplibs>
    2010:	b	1a0c <try_dlopen+0x2a4>
    2014:	str	w0, [sp, #136]
    2018:	b	1f18 <try_dlopen+0x7b0>
    201c:	mov	w0, #0x1                   	// #1
    2020:	str	w0, [sp, #136]
    2024:	b	1f18 <try_dlopen+0x7b0>
    2028:	str	w0, [sp, #136]
    202c:	b	1f18 <try_dlopen+0x7b0>
    2030:	ldr	x4, [sp, #104]
    2034:	mov	x3, x20
    2038:	mov	x2, x27
    203c:	mov	x1, #0x0                   	// #0
    2040:	add	x0, sp, #0xb8
    2044:	bl	378 <tryall_dlopen_module>
    2048:	cbnz	w0, 1fac <try_dlopen+0x844>
    204c:	b	1fcc <try_dlopen+0x864>
    2050:	ldr	x4, [sp, #104]
    2054:	mov	x3, x20
    2058:	adrp	x2, 0 <lt__alloc_die_callback>
    205c:	add	x2, x2, #0x0
    2060:	add	x2, x2, #0x188
    2064:	mov	x1, x22
    2068:	add	x0, sp, #0xb8
    206c:	bl	378 <tryall_dlopen_module>
    2070:	cbnz	w0, 1fac <try_dlopen+0x844>
    2074:	b	1fcc <try_dlopen+0x864>
    2078:	ldr	x0, [x23]
    207c:	bl	16e8 <unload_deplibs>
    2080:	ldr	x0, [sp, #152]
    2084:	bl	0 <free>
    2088:	ldr	x0, [sp, #160]
    208c:	bl	0 <free>
    2090:	ldr	x0, [sp, #168]
    2094:	bl	0 <free>
    2098:	ldr	x0, [sp, #176]
    209c:	bl	0 <free>
    20a0:	ldr	x0, [x23]
    20a4:	bl	0 <free>
    20a8:	str	xzr, [x23]
    20ac:	mov	w19, #0x1                   	// #1
    20b0:	b	1cdc <try_dlopen+0x574>
    20b4:	mov	x0, #0x58                  	// #88
    20b8:	bl	0 <lt__zalloc>
    20bc:	str	x0, [x23]
    20c0:	cbz	x0, 21c8 <try_dlopen+0xa60>
    20c4:	str	x0, [sp, #184]
    20c8:	ldr	x0, [sp, #192]
    20cc:	cbz	x0, 2108 <try_dlopen+0x9a0>
    20d0:	mov	x3, #0x0                   	// #0
    20d4:	ldr	x2, [sp, #104]
    20d8:	mov	x1, x25
    20dc:	add	x0, sp, #0xb8
    20e0:	bl	1c0 <tryall_dlopen>
    20e4:	cbnz	w0, 20f0 <try_dlopen+0x988>
    20e8:	ldr	x0, [sp, #184]
    20ec:	cbnz	x0, 1a0c <try_dlopen+0x2a4>
    20f0:	ldr	x0, [x23]
    20f4:	bl	0 <free>
    20f8:	str	xzr, [x23]
    20fc:	mov	x28, x21
    2100:	mov	w19, #0x1                   	// #1
    2104:	b	1a88 <try_dlopen+0x320>
    2108:	ldr	x3, [sp, #104]
    210c:	add	x2, sp, #0xb8
    2110:	mov	x1, x26
    2114:	adrp	x0, 0 <lt__alloc_die_callback>
    2118:	ldr	x0, [x0]
    211c:	bl	934 <find_handle>
    2120:	cbnz	x0, 20e8 <try_dlopen+0x980>
    2124:	adrp	x0, 0 <lt__alloc_die_callback>
    2128:	add	x0, x0, #0x0
    212c:	bl	0 <getenv>
    2130:	ldr	x3, [sp, #104]
    2134:	add	x2, sp, #0xb8
    2138:	mov	x1, x26
    213c:	bl	934 <find_handle>
    2140:	cbnz	x0, 20e8 <try_dlopen+0x980>
    2144:	adrp	x0, 0 <lt__alloc_die_callback>
    2148:	add	x0, x0, #0x0
    214c:	bl	0 <getenv>
    2150:	ldr	x3, [sp, #104]
    2154:	add	x2, sp, #0xb8
    2158:	mov	x1, x26
    215c:	bl	934 <find_handle>
    2160:	cbnz	x0, 20e8 <try_dlopen+0x980>
    2164:	ldr	x3, [sp, #104]
    2168:	add	x2, sp, #0xb8
    216c:	mov	x1, x26
    2170:	adrp	x0, 0 <lt__alloc_die_callback>
    2174:	add	x0, x0, #0x0
    2178:	add	x0, x0, #0x138
    217c:	bl	934 <find_handle>
    2180:	cbnz	x0, 20e8 <try_dlopen+0x980>
    2184:	b	20d0 <try_dlopen+0x968>
    2188:	mov	x24, x28
    218c:	mov	x26, x28
    2190:	mov	w19, #0x1                   	// #1
    2194:	b	1a88 <try_dlopen+0x320>
    2198:	mov	x26, x20
    219c:	mov	x28, x0
    21a0:	mov	w19, #0x1                   	// #1
    21a4:	b	1a88 <try_dlopen+0x320>
    21a8:	mov	x28, x0
    21ac:	mov	w19, #0x1                   	// #1
    21b0:	b	1a88 <try_dlopen+0x320>
    21b4:	mov	x28, x22
    21b8:	mov	w19, #0x1                   	// #1
    21bc:	b	1a88 <try_dlopen+0x320>
    21c0:	mov	x28, x21
    21c4:	b	1a88 <try_dlopen+0x320>
    21c8:	mov	x28, x21
    21cc:	mov	w19, #0x1                   	// #1
    21d0:	b	1a88 <try_dlopen+0x320>
    21d4:	mov	x0, x26
    21d8:	bl	0 <free>
    21dc:	b	1aa8 <try_dlopen+0x340>
    21e0:	mov	w19, #0x1                   	// #1
    21e4:	b	1ab8 <try_dlopen+0x350>
    21e8:	mov	w0, #0x1                   	// #1
    21ec:	str	w0, [sp, #140]
    21f0:	b	1e4c <try_dlopen+0x6e4>
    21f4:	str	w0, [sp, #140]
    21f8:	b	1e4c <try_dlopen+0x6e4>

00000000000021fc <lt_dlopenadvise>:
    21fc:	stp	x29, x30, [sp, #-64]!
    2200:	mov	x29, sp
    2204:	stp	x19, x20, [sp, #16]
    2208:	stp	x21, x22, [sp, #32]
    220c:	mov	x21, x0
    2210:	mov	x19, x1
    2214:	str	xzr, [sp, #56]
    2218:	bl	0 <lt__get_last_error>
    221c:	cbz	x19, 223c <lt_dlopenadvise+0x40>
    2220:	mov	x20, x0
    2224:	ldrb	w1, [x19]
    2228:	and	w0, w1, #0xc
    222c:	cmp	w0, #0xc
    2230:	b.eq	226c <lt_dlopenadvise+0x70>  // b.none
    2234:	cbz	x21, 223c <lt_dlopenadvise+0x40>
    2238:	tbnz	w1, #0, 2280 <lt_dlopenadvise+0x84>
    223c:	mov	x3, x19
    2240:	mov	x2, #0x0                   	// #0
    2244:	mov	x1, x21
    2248:	add	x0, sp, #0x38
    224c:	bl	1768 <try_dlopen>
    2250:	cmp	w0, #0x0
    2254:	ldr	x0, [sp, #56]
    2258:	csel	x0, x0, xzr, eq  // eq = none
    225c:	ldp	x19, x20, [sp, #16]
    2260:	ldp	x21, x22, [sp, #32]
    2264:	ldp	x29, x30, [sp], #64
    2268:	ret
    226c:	mov	w0, #0x13                  	// #19
    2270:	bl	0 <lt__error_string>
    2274:	bl	0 <lt__set_last_error>
    2278:	mov	x0, #0x0                   	// #0
    227c:	b	225c <lt_dlopenadvise+0x60>
    2280:	mov	w1, #0x2e                  	// #46
    2284:	mov	x0, x21
    2288:	bl	0 <strrchr>
    228c:	mov	x22, x0
    2290:	cbz	x0, 22c0 <lt_dlopenadvise+0xc4>
    2294:	adrp	x1, 0 <lt__alloc_die_callback>
    2298:	add	x1, x1, #0x0
    229c:	add	x1, x1, #0x180
    22a0:	bl	0 <strcmp>
    22a4:	cbz	w0, 223c <lt_dlopenadvise+0x40>
    22a8:	adrp	x1, 0 <lt__alloc_die_callback>
    22ac:	add	x1, x1, #0x0
    22b0:	add	x1, x1, #0x190
    22b4:	mov	x0, x22
    22b8:	bl	0 <strcmp>
    22bc:	cbz	w0, 223c <lt_dlopenadvise+0x40>
    22c0:	ldrb	w0, [x21]
    22c4:	cbz	w0, 2368 <lt_dlopenadvise+0x16c>
    22c8:	mov	x3, x19
    22cc:	adrp	x2, 0 <lt__alloc_die_callback>
    22d0:	add	x2, x2, #0x0
    22d4:	add	x2, x2, #0x180
    22d8:	mov	x1, x21
    22dc:	add	x0, sp, #0x38
    22e0:	bl	1768 <try_dlopen>
    22e4:	ldr	x1, [sp, #56]
    22e8:	cbz	x1, 22f4 <lt_dlopenadvise+0xf8>
    22ec:	ldr	x0, [sp, #56]
    22f0:	b	225c <lt_dlopenadvise+0x60>
    22f4:	cmp	w0, #0x0
    22f8:	b.le	2314 <lt_dlopenadvise+0x118>
    22fc:	bl	0 <lt__get_last_error>
    2300:	mov	x22, x0
    2304:	mov	w0, #0x5                   	// #5
    2308:	bl	0 <lt__error_string>
    230c:	cmp	x22, x0
    2310:	b.ne	22ec <lt_dlopenadvise+0xf0>  // b.any
    2314:	mov	x0, x20
    2318:	bl	0 <lt__set_last_error>
    231c:	mov	x3, x19
    2320:	adrp	x2, 0 <lt__alloc_die_callback>
    2324:	add	x2, x2, #0x0
    2328:	add	x2, x2, #0x190
    232c:	mov	x1, x21
    2330:	add	x0, sp, #0x38
    2334:	bl	1768 <try_dlopen>
    2338:	ldr	x1, [sp, #56]
    233c:	cbz	x1, 2348 <lt_dlopenadvise+0x14c>
    2340:	ldr	x0, [sp, #56]
    2344:	b	225c <lt_dlopenadvise+0x60>
    2348:	cmp	w0, #0x0
    234c:	b.le	2368 <lt_dlopenadvise+0x16c>
    2350:	bl	0 <lt__get_last_error>
    2354:	mov	x19, x0
    2358:	mov	w0, #0x5                   	// #5
    235c:	bl	0 <lt__error_string>
    2360:	cmp	x19, x0
    2364:	b.ne	2340 <lt_dlopenadvise+0x144>  // b.any
    2368:	mov	w0, #0x5                   	// #5
    236c:	bl	0 <lt__error_string>
    2370:	bl	0 <lt__set_last_error>
    2374:	mov	x0, #0x0                   	// #0
    2378:	b	225c <lt_dlopenadvise+0x60>

000000000000237c <lt_dlopen>:
    237c:	stp	x29, x30, [sp, #-16]!
    2380:	mov	x29, sp
    2384:	mov	x1, #0x0                   	// #0
    2388:	bl	21fc <lt_dlopenadvise>
    238c:	ldp	x29, x30, [sp], #16
    2390:	ret

0000000000002394 <lt_dlopenext>:
    2394:	stp	x29, x30, [sp, #-48]!
    2398:	mov	x29, sp
    239c:	stp	x19, x20, [sp, #16]
    23a0:	mov	x19, x0
    23a4:	add	x0, sp, #0x28
    23a8:	bl	1148 <lt_dladvise_init>
    23ac:	mov	x20, #0x0                   	// #0
    23b0:	cbnz	w0, 23d4 <lt_dlopenext+0x40>
    23b4:	add	x0, sp, #0x28
    23b8:	bl	11b0 <lt_dladvise_ext>
    23bc:	mov	x20, #0x0                   	// #0
    23c0:	cbnz	w0, 23d4 <lt_dlopenext+0x40>
    23c4:	ldr	x1, [sp, #40]
    23c8:	mov	x0, x19
    23cc:	bl	21fc <lt_dlopenadvise>
    23d0:	mov	x20, x0
    23d4:	add	x0, sp, #0x28
    23d8:	bl	1178 <lt_dladvise_destroy>
    23dc:	mov	x0, x20
    23e0:	ldp	x19, x20, [sp, #16]
    23e4:	ldp	x29, x30, [sp], #48
    23e8:	ret

00000000000023ec <lt_dlsym>:
    23ec:	stp	x29, x30, [sp, #-192]!
    23f0:	mov	x29, sp
    23f4:	stp	x19, x20, [sp, #16]
    23f8:	stp	x21, x22, [sp, #32]
    23fc:	mov	x19, x0
    2400:	cbz	x0, 2514 <lt_dlsym+0x128>
    2404:	mov	x21, x1
    2408:	cbz	x1, 2528 <lt_dlsym+0x13c>
    240c:	stp	x23, x24, [sp, #48]
    2410:	ldrb	w0, [x1]
    2414:	mov	x20, #0x0                   	// #0
    2418:	cbz	w0, 2428 <lt_dlsym+0x3c>
    241c:	mov	x0, x1
    2420:	bl	0 <strlen>
    2424:	mov	x20, x0
    2428:	ldr	x22, [x19, #8]
    242c:	ldr	x0, [x22, #8]
    2430:	mov	x1, #0x0                   	// #0
    2434:	cbz	x0, 2448 <lt_dlsym+0x5c>
    2438:	ldrb	w2, [x0]
    243c:	cbz	w2, 2448 <lt_dlsym+0x5c>
    2440:	bl	0 <strlen>
    2444:	mov	x1, x0
    2448:	add	x20, x20, x1
    244c:	ldr	x0, [x19, #24]
    2450:	cbz	x0, 2608 <lt_dlsym+0x21c>
    2454:	ldrb	w2, [x0]
    2458:	mov	x1, #0x0                   	// #0
    245c:	cbz	w2, 2468 <lt_dlsym+0x7c>
    2460:	bl	0 <strlen>
    2464:	mov	x1, x0
    2468:	add	x20, x20, x1
    246c:	add	x0, x20, #0x5
    2470:	cmp	x0, #0x7f
    2474:	b.hi	253c <lt_dlsym+0x150>  // b.pmore
    2478:	ldr	x23, [x22, #56]
    247c:	add	x20, sp, #0x40
    2480:	bl	0 <lt__get_last_error>
    2484:	mov	x24, x0
    2488:	ldr	x0, [x19, #8]
    248c:	ldr	x1, [x0, #8]
    2490:	cbz	x1, 25dc <lt_dlsym+0x1f0>
    2494:	mov	x0, x20
    2498:	bl	0 <strcpy>
    249c:	ldr	x1, [x19, #24]
    24a0:	mov	x0, x20
    24a4:	bl	0 <strcat>
    24a8:	mov	x0, x20
    24ac:	bl	0 <strlen>
    24b0:	add	x2, x20, x0
    24b4:	adrp	x1, 0 <lt__alloc_die_callback>
    24b8:	add	x1, x1, #0x0
    24bc:	ldr	w3, [x1]
    24c0:	str	w3, [x20, x0]
    24c4:	ldrh	w0, [x1, #4]
    24c8:	strh	w0, [x2, #4]
    24cc:	mov	x1, x21
    24d0:	mov	x0, x20
    24d4:	bl	0 <strcat>
    24d8:	ldr	x0, [x19, #8]
    24dc:	ldr	x3, [x0, #32]
    24e0:	mov	x2, x20
    24e4:	ldr	x1, [x19, #56]
    24e8:	mov	x0, x23
    24ec:	blr	x3
    24f0:	mov	x22, x0
    24f4:	cbz	x0, 25ec <lt_dlsym+0x200>
    24f8:	add	x0, sp, #0x40
    24fc:	cmp	x20, x0
    2500:	b.eq	2620 <lt_dlsym+0x234>  // b.none
    2504:	mov	x0, x20
    2508:	bl	0 <free>
    250c:	ldp	x23, x24, [sp, #48]
    2510:	b	25b0 <lt_dlsym+0x1c4>
    2514:	mov	w0, #0xc                   	// #12
    2518:	bl	0 <lt__error_string>
    251c:	bl	0 <lt__set_last_error>
    2520:	mov	x22, x19
    2524:	b	25b0 <lt_dlsym+0x1c4>
    2528:	mov	w0, #0xa                   	// #10
    252c:	bl	0 <lt__error_string>
    2530:	bl	0 <lt__set_last_error>
    2534:	mov	x22, x21
    2538:	b	25b0 <lt_dlsym+0x1c4>
    253c:	add	x0, x20, #0x6
    2540:	bl	0 <lt__malloc>
    2544:	mov	x20, x0
    2548:	cbz	x0, 25c4 <lt_dlsym+0x1d8>
    254c:	ldr	x0, [x19, #8]
    2550:	ldr	x23, [x0, #56]
    2554:	ldr	x0, [x19, #24]
    2558:	cbnz	x0, 2480 <lt_dlsym+0x94>
    255c:	ldr	x0, [x19, #8]
    2560:	ldr	x1, [x0, #8]
    2564:	cbz	x1, 25f8 <lt_dlsym+0x20c>
    2568:	mov	x0, x20
    256c:	bl	0 <strcpy>
    2570:	mov	x1, x21
    2574:	mov	x0, x20
    2578:	bl	0 <strcat>
    257c:	ldr	x0, [x19, #8]
    2580:	ldr	x3, [x0, #32]
    2584:	mov	x2, x20
    2588:	ldr	x1, [x19, #56]
    258c:	mov	x0, x23
    2590:	blr	x3
    2594:	mov	x22, x0
    2598:	add	x0, sp, #0x40
    259c:	cmp	x20, x0
    25a0:	b.eq	2628 <lt_dlsym+0x23c>  // b.none
    25a4:	mov	x0, x20
    25a8:	bl	0 <free>
    25ac:	ldp	x23, x24, [sp, #48]
    25b0:	mov	x0, x22
    25b4:	ldp	x19, x20, [sp, #16]
    25b8:	ldp	x21, x22, [sp, #32]
    25bc:	ldp	x29, x30, [sp], #192
    25c0:	ret
    25c4:	mov	w0, #0xd                   	// #13
    25c8:	bl	0 <lt__error_string>
    25cc:	bl	0 <lt__set_last_error>
    25d0:	mov	x22, x20
    25d4:	ldp	x23, x24, [sp, #48]
    25d8:	b	25b0 <lt_dlsym+0x1c4>
    25dc:	ldr	x1, [x19, #24]
    25e0:	mov	x0, x20
    25e4:	bl	0 <strcpy>
    25e8:	b	24a8 <lt_dlsym+0xbc>
    25ec:	mov	x0, x24
    25f0:	bl	0 <lt__set_last_error>
    25f4:	b	255c <lt_dlsym+0x170>
    25f8:	mov	x1, x21
    25fc:	mov	x0, x20
    2600:	bl	0 <strcpy>
    2604:	b	257c <lt_dlsym+0x190>
    2608:	add	x0, x20, #0x5
    260c:	cmp	x0, #0x7f
    2610:	b.hi	253c <lt_dlsym+0x150>  // b.pmore
    2614:	ldr	x23, [x22, #56]
    2618:	add	x20, sp, #0x40
    261c:	b	255c <lt_dlsym+0x170>
    2620:	ldp	x23, x24, [sp, #48]
    2624:	b	25b0 <lt_dlsym+0x1c4>
    2628:	ldp	x23, x24, [sp, #48]
    262c:	b	25b0 <lt_dlsym+0x1c4>

0000000000002630 <loader_init_callback>:
    2630:	stp	x29, x30, [sp, #-16]!
    2634:	mov	x29, sp
    2638:	adrp	x1, 0 <lt__alloc_die_callback>
    263c:	add	x1, x1, #0x0
    2640:	bl	23ec <lt_dlsym>
    2644:	mov	x1, #0x0                   	// #0
    2648:	bl	1c <loader_init>
    264c:	ldp	x29, x30, [sp], #16
    2650:	ret

0000000000002654 <lt_dlerror>:
    2654:	stp	x29, x30, [sp, #-32]!
    2658:	mov	x29, sp
    265c:	str	x19, [sp, #16]
    2660:	bl	0 <lt__get_last_error>
    2664:	mov	x19, x0
    2668:	mov	x0, #0x0                   	// #0
    266c:	bl	0 <lt__set_last_error>
    2670:	mov	x0, x19
    2674:	ldr	x19, [sp, #16]
    2678:	ldp	x29, x30, [sp], #32
    267c:	ret

0000000000002680 <lt_dladdsearchdir>:
    2680:	cbz	x0, 26c4 <lt_dladdsearchdir+0x44>
    2684:	mov	x2, x0
    2688:	ldrb	w1, [x0]
    268c:	mov	w0, #0x0                   	// #0
    2690:	cbnz	w1, 2698 <lt_dladdsearchdir+0x18>
    2694:	ret
    2698:	stp	x29, x30, [sp, #-16]!
    269c:	mov	x29, sp
    26a0:	mov	x1, #0x0                   	// #0
    26a4:	adrp	x0, 0 <lt__alloc_die_callback>
    26a8:	add	x0, x0, #0x0
    26ac:	add	x0, x0, #0x10
    26b0:	bl	ea4 <lt_dlpath_insertdir>
    26b4:	cmp	w0, #0x0
    26b8:	cset	w0, ne  // ne = any
    26bc:	ldp	x29, x30, [sp], #16
    26c0:	ret
    26c4:	mov	w0, #0x0                   	// #0
    26c8:	ret

00000000000026cc <lt_dlinsertsearchdir>:
    26cc:	stp	x29, x30, [sp, #-48]!
    26d0:	mov	x29, sp
    26d4:	stp	x19, x20, [sp, #16]
    26d8:	mov	x19, x0
    26dc:	mov	x20, x1
    26e0:	cbz	x0, 271c <lt_dlinsertsearchdir+0x50>
    26e4:	str	x21, [sp, #32]
    26e8:	adrp	x0, 0 <lt__alloc_die_callback>
    26ec:	ldr	x21, [x0]
    26f0:	cmp	x21, x19
    26f4:	b.hi	2750 <lt_dlinsertsearchdir+0x84>  // b.pmore
    26f8:	cbz	x21, 2750 <lt_dlinsertsearchdir+0x84>
    26fc:	ldrb	w0, [x21]
    2700:	cbz	w0, 2750 <lt_dlinsertsearchdir+0x84>
    2704:	mov	x0, x21
    2708:	bl	0 <strlen>
    270c:	add	x21, x21, x0
    2710:	cmp	x19, x21
    2714:	b.cs	2750 <lt_dlinsertsearchdir+0x84>  // b.hs, b.nlast
    2718:	ldr	x21, [sp, #32]
    271c:	mov	w0, #0x0                   	// #0
    2720:	cbz	x20, 2764 <lt_dlinsertsearchdir+0x98>
    2724:	ldrb	w1, [x20]
    2728:	cbz	w1, 2764 <lt_dlinsertsearchdir+0x98>
    272c:	mov	x2, x20
    2730:	mov	x1, x19
    2734:	adrp	x0, 0 <lt__alloc_die_callback>
    2738:	add	x0, x0, #0x0
    273c:	add	x0, x0, #0x10
    2740:	bl	ea4 <lt_dlpath_insertdir>
    2744:	cmp	w0, #0x0
    2748:	cset	w0, ne  // ne = any
    274c:	b	2764 <lt_dlinsertsearchdir+0x98>
    2750:	mov	w0, #0x12                  	// #18
    2754:	bl	0 <lt__error_string>
    2758:	bl	0 <lt__set_last_error>
    275c:	mov	w0, #0x1                   	// #1
    2760:	ldr	x21, [sp, #32]
    2764:	ldp	x19, x20, [sp, #16]
    2768:	ldp	x29, x30, [sp], #48
    276c:	ret

0000000000002770 <lt_dlsetsearchpath>:
    2770:	stp	x29, x30, [sp, #-32]!
    2774:	mov	x29, sp
    2778:	stp	x19, x20, [sp, #16]
    277c:	mov	x19, x0
    2780:	adrp	x20, 0 <lt__alloc_die_callback>
    2784:	add	x20, x20, #0x0
    2788:	ldr	x0, [x20, #16]
    278c:	bl	0 <free>
    2790:	str	xzr, [x20, #16]
    2794:	cbz	x19, 27c8 <lt_dlsetsearchpath+0x58>
    2798:	ldrb	w1, [x19]
    279c:	mov	w0, #0x0                   	// #0
    27a0:	cbnz	w1, 27b0 <lt_dlsetsearchpath+0x40>
    27a4:	ldp	x19, x20, [sp, #16]
    27a8:	ldp	x29, x30, [sp], #32
    27ac:	ret
    27b0:	add	x1, x20, #0x10
    27b4:	mov	x0, x19
    27b8:	bl	ac <canonicalize_path>
    27bc:	cmp	w0, #0x0
    27c0:	cset	w0, ne  // ne = any
    27c4:	b	27a4 <lt_dlsetsearchpath+0x34>
    27c8:	mov	w0, #0x0                   	// #0
    27cc:	b	27a4 <lt_dlsetsearchpath+0x34>

00000000000027d0 <lt_dlgetsearchpath>:
    27d0:	adrp	x0, 0 <lt__alloc_die_callback>
    27d4:	ldr	x0, [x0]
    27d8:	ret

00000000000027dc <lt_dlmakeresident>:
    27dc:	cbz	x0, 27f4 <lt_dlmakeresident+0x18>
    27e0:	ldrb	w1, [x0, #36]
    27e4:	orr	w1, w1, #0x1
    27e8:	strb	w1, [x0, #36]
    27ec:	mov	w0, #0x0                   	// #0
    27f0:	ret
    27f4:	stp	x29, x30, [sp, #-16]!
    27f8:	mov	x29, sp
    27fc:	mov	w0, #0xc                   	// #12
    2800:	bl	0 <lt__error_string>
    2804:	bl	0 <lt__set_last_error>
    2808:	mov	w0, #0x1                   	// #1
    280c:	ldp	x29, x30, [sp], #16
    2810:	ret

0000000000002814 <lt_dlisresident>:
    2814:	cbz	x0, 2824 <lt_dlisresident+0x10>
    2818:	ldrb	w0, [x0, #36]
    281c:	and	w0, w0, #0x1
    2820:	ret
    2824:	stp	x29, x30, [sp, #-16]!
    2828:	mov	x29, sp
    282c:	mov	w0, #0xc                   	// #12
    2830:	bl	0 <lt__error_string>
    2834:	bl	0 <lt__set_last_error>
    2838:	mov	w0, #0xffffffff            	// #-1
    283c:	ldp	x29, x30, [sp], #16
    2840:	ret

0000000000002844 <lt_dlinterface_register>:
    2844:	stp	x29, x30, [sp, #-48]!
    2848:	mov	x29, sp
    284c:	stp	x19, x20, [sp, #16]
    2850:	str	x21, [sp, #32]
    2854:	mov	x20, x0
    2858:	mov	x21, x1
    285c:	mov	x0, #0x10                  	// #16
    2860:	bl	0 <lt__malloc>
    2864:	mov	x19, x0
    2868:	cbz	x0, 2884 <lt_dlinterface_register+0x40>
    286c:	mov	x0, x20
    2870:	bl	0 <lt__strdup>
    2874:	mov	x20, x0
    2878:	str	x0, [x19]
    287c:	cbz	x0, 2898 <lt_dlinterface_register+0x54>
    2880:	str	x21, [x19, #8]
    2884:	mov	x0, x19
    2888:	ldp	x19, x20, [sp, #16]
    288c:	ldr	x21, [sp, #32]
    2890:	ldp	x29, x30, [sp], #48
    2894:	ret
    2898:	mov	x0, x19
    289c:	bl	0 <free>
    28a0:	mov	x19, x20
    28a4:	b	2884 <lt_dlinterface_register+0x40>

00000000000028a8 <lt_dlinterface_free>:
    28a8:	stp	x29, x30, [sp, #-32]!
    28ac:	mov	x29, sp
    28b0:	str	x19, [sp, #16]
    28b4:	mov	x19, x0
    28b8:	ldr	x0, [x0]
    28bc:	bl	0 <free>
    28c0:	mov	x0, x19
    28c4:	bl	0 <free>
    28c8:	ldr	x19, [sp, #16]
    28cc:	ldp	x29, x30, [sp], #32
    28d0:	ret

00000000000028d4 <lt_dlcaller_set_data>:
    28d4:	stp	x29, x30, [sp, #-64]!
    28d8:	mov	x29, sp
    28dc:	stp	x19, x20, [sp, #16]
    28e0:	stp	x21, x22, [sp, #32]
    28e4:	str	x23, [sp, #48]
    28e8:	mov	x21, x0
    28ec:	mov	x23, x1
    28f0:	mov	x22, x2
    28f4:	ldr	x0, [x1, #72]
    28f8:	cbz	x0, 2990 <lt_dlcaller_set_data+0xbc>
    28fc:	ldr	x20, [x0]
    2900:	cbz	x20, 29c8 <lt_dlcaller_set_data+0xf4>
    2904:	add	x2, x0, #0x10
    2908:	mov	w5, #0x0                   	// #0
    290c:	mov	w1, w5
    2910:	add	w5, w5, #0x1
    2914:	ldr	x20, [x2], #16
    2918:	cbnz	x20, 290c <lt_dlcaller_set_data+0x38>
    291c:	cmp	w5, #0x0
    2920:	b.le	2988 <lt_dlcaller_set_data+0xb4>
    2924:	mov	x3, x0
    2928:	mov	w4, #0x0                   	// #0
    292c:	b	2934 <lt_dlcaller_set_data+0x60>
    2930:	mov	w4, w19
    2934:	ldr	x6, [x3]
    2938:	cmp	x6, x21
    293c:	b.eq	2954 <lt_dlcaller_set_data+0x80>  // b.none
    2940:	add	w19, w4, #0x1
    2944:	add	x3, x3, #0x10
    2948:	cmp	w1, w4
    294c:	b.gt	2930 <lt_dlcaller_set_data+0x5c>
    2950:	b	295c <lt_dlcaller_set_data+0x88>
    2954:	ldr	x20, [x3, #8]
    2958:	mov	w19, w4
    295c:	cmp	w5, w19
    2960:	b.eq	299c <lt_dlcaller_set_data+0xc8>  // b.none
    2964:	ldr	x0, [x23, #72]
    2968:	add	x19, x0, w19, sxtw #4
    296c:	str	x22, [x19, #8]
    2970:	mov	x0, x20
    2974:	ldp	x19, x20, [sp, #16]
    2978:	ldp	x21, x22, [sp, #32]
    297c:	ldr	x23, [sp, #48]
    2980:	ldp	x29, x30, [sp], #64
    2984:	ret
    2988:	mov	w19, #0x0                   	// #0
    298c:	b	295c <lt_dlcaller_set_data+0x88>
    2990:	mov	x20, x0
    2994:	mov	w19, #0x0                   	// #0
    2998:	mov	w5, #0x0                   	// #0
    299c:	add	w5, w5, #0x2
    29a0:	sbfiz	x1, x5, #4, #32
    29a4:	bl	0 <lt__realloc>
    29a8:	cbz	x0, 29d4 <lt_dlcaller_set_data+0x100>
    29ac:	str	x0, [x23, #72]
    29b0:	sbfiz	x1, x19, #4, #32
    29b4:	str	x21, [x0, x1]
    29b8:	ldr	x0, [x23, #72]
    29bc:	add	x0, x0, x1
    29c0:	str	xzr, [x0, #16]
    29c4:	b	2964 <lt_dlcaller_set_data+0x90>
    29c8:	mov	w19, #0x0                   	// #0
    29cc:	mov	w5, #0x0                   	// #0
    29d0:	b	299c <lt_dlcaller_set_data+0xc8>
    29d4:	mov	x20, x0
    29d8:	b	2970 <lt_dlcaller_set_data+0x9c>

00000000000029dc <lt_dlcaller_get_data>:
    29dc:	mov	x2, x0
    29e0:	ldr	x1, [x1, #72]
    29e4:	cbz	x1, 2a0c <lt_dlcaller_get_data+0x30>
    29e8:	ldr	x0, [x1]
    29ec:	cbz	x0, 2a08 <lt_dlcaller_get_data+0x2c>
    29f0:	cmp	x2, x0
    29f4:	b.eq	2a04 <lt_dlcaller_get_data+0x28>  // b.none
    29f8:	ldr	x0, [x1, #16]!
    29fc:	cbnz	x0, 29f0 <lt_dlcaller_get_data+0x14>
    2a00:	b	2a08 <lt_dlcaller_get_data+0x2c>
    2a04:	ldr	x0, [x1, #8]
    2a08:	ret
    2a0c:	mov	x0, x1
    2a10:	b	2a08 <lt_dlcaller_get_data+0x2c>

0000000000002a14 <lt_dlgetinfo>:
    2a14:	stp	x29, x30, [sp, #-32]!
    2a18:	mov	x29, sp
    2a1c:	str	x19, [sp, #16]
    2a20:	mov	x19, x0
    2a24:	cbz	x0, 2a38 <lt_dlgetinfo+0x24>
    2a28:	add	x0, x0, #0x10
    2a2c:	ldr	x19, [sp, #16]
    2a30:	ldp	x29, x30, [sp], #32
    2a34:	ret
    2a38:	mov	w0, #0xc                   	// #12
    2a3c:	bl	0 <lt__error_string>
    2a40:	bl	0 <lt__set_last_error>
    2a44:	mov	x0, x19
    2a48:	b	2a2c <lt_dlgetinfo+0x18>

0000000000002a4c <lt_dlhandle_iterate>:
    2a4c:	stp	x29, x30, [sp, #-32]!
    2a50:	mov	x29, sp
    2a54:	stp	x19, x20, [sp, #16]
    2a58:	cbz	x0, 2a9c <lt_dlhandle_iterate+0x50>
    2a5c:	mov	x20, x0
    2a60:	cbz	x1, 2ac0 <lt_dlhandle_iterate+0x74>
    2a64:	ldr	x19, [x1]
    2a68:	cbz	x19, 2a8c <lt_dlhandle_iterate+0x40>
    2a6c:	ldr	x2, [x20, #8]
    2a70:	cbz	x2, 2a8c <lt_dlhandle_iterate+0x40>
    2a74:	ldr	x1, [x20]
    2a78:	mov	x0, x19
    2a7c:	blr	x2
    2a80:	cbz	w0, 2a8c <lt_dlhandle_iterate+0x40>
    2a84:	ldr	x19, [x19]
    2a88:	cbnz	x19, 2a6c <lt_dlhandle_iterate+0x20>
    2a8c:	mov	x0, x19
    2a90:	ldp	x19, x20, [sp, #16]
    2a94:	ldp	x29, x30, [sp], #32
    2a98:	ret
    2a9c:	adrp	x3, 0 <lt__alloc_die_callback>
    2aa0:	add	x3, x3, #0x0
    2aa4:	add	x3, x3, #0x198
    2aa8:	mov	w2, #0x96a                 	// #2410
    2aac:	adrp	x1, 0 <lt__alloc_die_callback>
    2ab0:	add	x1, x1, #0x0
    2ab4:	adrp	x0, 0 <lt__alloc_die_callback>
    2ab8:	add	x0, x0, #0x0
    2abc:	bl	0 <__assert_fail>
    2ac0:	adrp	x0, 0 <lt__alloc_die_callback>
    2ac4:	ldr	x19, [x0]
    2ac8:	b	2a68 <lt_dlhandle_iterate+0x1c>

0000000000002acc <lt_dlhandle_fetch>:
    2acc:	stp	x29, x30, [sp, #-48]!
    2ad0:	mov	x29, sp
    2ad4:	stp	x19, x20, [sp, #16]
    2ad8:	str	x21, [sp, #32]
    2adc:	mov	x20, x0
    2ae0:	mov	x21, x1
    2ae4:	mov	x19, #0x0                   	// #0
    2ae8:	cbz	x0, 2b28 <lt_dlhandle_fetch+0x5c>
    2aec:	mov	x1, x19
    2af0:	mov	x0, x20
    2af4:	bl	2a4c <lt_dlhandle_iterate>
    2af8:	mov	x19, x0
    2afc:	cbz	x0, 2b14 <lt_dlhandle_fetch+0x48>
    2b00:	ldr	x0, [x19, #24]
    2b04:	cbz	x0, 2aec <lt_dlhandle_fetch+0x20>
    2b08:	mov	x1, x21
    2b0c:	bl	0 <strcmp>
    2b10:	cbnz	w0, 2aec <lt_dlhandle_fetch+0x20>
    2b14:	mov	x0, x19
    2b18:	ldp	x19, x20, [sp, #16]
    2b1c:	ldr	x21, [sp, #32]
    2b20:	ldp	x29, x30, [sp], #48
    2b24:	ret
    2b28:	adrp	x3, 0 <lt__alloc_die_callback>
    2b2c:	add	x3, x3, #0x0
    2b30:	add	x3, x3, #0x1b0
    2b34:	mov	w2, #0x981                 	// #2433
    2b38:	adrp	x1, 0 <lt__alloc_die_callback>
    2b3c:	add	x1, x1, #0x0
    2b40:	adrp	x0, 0 <lt__alloc_die_callback>
    2b44:	add	x0, x0, #0x0
    2b48:	bl	0 <__assert_fail>

0000000000002b4c <lt_dlhandle_map>:
    2b4c:	stp	x29, x30, [sp, #-48]!
    2b50:	mov	x29, sp
    2b54:	stp	x19, x20, [sp, #16]
    2b58:	stp	x21, x22, [sp, #32]
    2b5c:	mov	x20, x0
    2b60:	mov	x22, x1
    2b64:	mov	x21, x2
    2b68:	adrp	x0, 0 <lt__alloc_die_callback>
    2b6c:	ldr	x19, [x0]
    2b70:	cbnz	x20, 2ba8 <lt_dlhandle_map+0x5c>
    2b74:	adrp	x3, 0 <lt__alloc_die_callback>
    2b78:	add	x3, x3, #0x0
    2b7c:	add	x3, x3, #0x1c8
    2b80:	mov	w2, #0x995                 	// #2453
    2b84:	adrp	x1, 0 <lt__alloc_die_callback>
    2b88:	add	x1, x1, #0x0
    2b8c:	adrp	x0, 0 <lt__alloc_die_callback>
    2b90:	add	x0, x0, #0x0
    2b94:	bl	0 <__assert_fail>
    2b98:	mov	x1, x21
    2b9c:	mov	x0, x19
    2ba0:	blr	x22
    2ba4:	cbnz	w0, 2bd4 <lt_dlhandle_map+0x88>
    2ba8:	cbz	x19, 2bd0 <lt_dlhandle_map+0x84>
    2bac:	ldr	x3, [x20, #8]
    2bb0:	cbz	x3, 2b98 <lt_dlhandle_map+0x4c>
    2bb4:	ldr	x1, [x20]
    2bb8:	mov	x0, x19
    2bbc:	blr	x3
    2bc0:	cbz	w0, 2b98 <lt_dlhandle_map+0x4c>
    2bc4:	ldr	x19, [x19]
    2bc8:	cbnz	x19, 2bac <lt_dlhandle_map+0x60>
    2bcc:	b	2b98 <lt_dlhandle_map+0x4c>
    2bd0:	mov	w0, #0x0                   	// #0
    2bd4:	ldp	x19, x20, [sp, #16]
    2bd8:	ldp	x21, x22, [sp, #32]
    2bdc:	ldp	x29, x30, [sp], #48
    2be0:	ret

libltdl_libltdl_la-slist.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__slist_delete>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	cbz	x1, 3c <lt__slist_delete+0x3c>
  10:	mov	x19, x0
  14:	mov	x20, x1
  18:	cbz	x0, 2c <lt__slist_delete+0x2c>
  1c:	mov	x0, x19
  20:	ldr	x19, [x19]
  24:	blr	x20
  28:	cbnz	x19, 1c <lt__slist_delete+0x1c>
  2c:	mov	x0, #0x0                   	// #0
  30:	ldp	x19, x20, [sp, #16]
  34:	ldp	x29, x30, [sp], #32
  38:	ret
  3c:	adrp	x3, 0 <lt__slist_delete>
  40:	add	x3, x3, #0x0
  44:	mov	w2, #0x38                  	// #56
  48:	adrp	x1, 0 <lt__slist_delete>
  4c:	add	x1, x1, #0x0
  50:	adrp	x0, 0 <lt__slist_delete>
  54:	add	x0, x0, #0x0
  58:	bl	0 <__assert_fail>

000000000000005c <lt__slist_remove>:
  5c:	stp	x29, x30, [sp, #-48]!
  60:	mov	x29, sp
  64:	stp	x19, x20, [sp, #16]
  68:	str	x21, [sp, #32]
  6c:	cbz	x1, b0 <lt__slist_remove+0x54>
  70:	mov	x19, x0
  74:	mov	x20, x1
  78:	mov	x21, x2
  7c:	cbz	x0, a0 <lt__slist_remove+0x44>
  80:	ldr	x0, [x0]
  84:	cbz	x0, a0 <lt__slist_remove+0x44>
  88:	mov	x1, x2
  8c:	blr	x20
  90:	cbz	x0, d4 <lt__slist_remove+0x78>
  94:	ldr	x1, [x19]
  98:	ldr	x1, [x1]
  9c:	str	x1, [x19]
  a0:	ldp	x19, x20, [sp, #16]
  a4:	ldr	x21, [sp, #32]
  a8:	ldp	x29, x30, [sp], #48
  ac:	ret
  b0:	adrp	x3, 0 <lt__slist_delete>
  b4:	add	x3, x3, #0x0
  b8:	add	x3, x3, #0x18
  bc:	mov	w2, #0x53                  	// #83
  c0:	adrp	x1, 0 <lt__slist_delete>
  c4:	add	x1, x1, #0x0
  c8:	adrp	x0, 0 <lt__slist_delete>
  cc:	add	x0, x0, #0x0
  d0:	bl	0 <__assert_fail>
  d4:	ldr	x19, [x19]
  d8:	ldr	x0, [x19]
  dc:	cbz	x0, a0 <lt__slist_remove+0x44>
  e0:	mov	x1, x21
  e4:	blr	x20
  e8:	cbnz	x0, fc <lt__slist_remove+0xa0>
  ec:	ldr	x19, [x19]
  f0:	ldr	x0, [x19]
  f4:	cbnz	x0, e0 <lt__slist_remove+0x84>
  f8:	b	a0 <lt__slist_remove+0x44>
  fc:	ldr	x1, [x19]
 100:	ldr	x1, [x1]
 104:	str	x1, [x19]
 108:	b	a0 <lt__slist_remove+0x44>

000000000000010c <lt__slist_find>:
 10c:	stp	x29, x30, [sp, #-48]!
 110:	mov	x29, sp
 114:	stp	x19, x20, [sp, #16]
 118:	str	x21, [sp, #32]
 11c:	cbz	x1, 15c <lt__slist_find+0x50>
 120:	mov	x19, x0
 124:	mov	x20, x1
 128:	mov	x21, x2
 12c:	cbz	x0, 14c <lt__slist_find+0x40>
 130:	mov	x1, x21
 134:	mov	x0, x19
 138:	blr	x20
 13c:	cbnz	x0, 14c <lt__slist_find+0x40>
 140:	ldr	x19, [x19]
 144:	cbnz	x19, 130 <lt__slist_find+0x24>
 148:	mov	x0, x19
 14c:	ldp	x19, x20, [sp, #16]
 150:	ldr	x21, [sp, #32]
 154:	ldp	x29, x30, [sp], #48
 158:	ret
 15c:	adrp	x3, 0 <lt__slist_delete>
 160:	add	x3, x3, #0x0
 164:	add	x3, x3, #0x30
 168:	mov	w2, #0x7a                  	// #122
 16c:	adrp	x1, 0 <lt__slist_delete>
 170:	add	x1, x1, #0x0
 174:	adrp	x0, 0 <lt__slist_delete>
 178:	add	x0, x0, #0x0
 17c:	bl	0 <__assert_fail>

0000000000000180 <lt__slist_concat>:
 180:	cbz	x0, 19c <lt__slist_concat+0x1c>
 184:	mov	x2, x0
 188:	mov	x3, x2
 18c:	ldr	x2, [x2]
 190:	cbnz	x2, 188 <lt__slist_concat+0x8>
 194:	str	x1, [x3]
 198:	ret
 19c:	mov	x0, x1
 1a0:	b	198 <lt__slist_concat+0x18>

00000000000001a4 <lt__slist_cons>:
 1a4:	cbz	x0, 1e4 <lt__slist_cons+0x40>
 1a8:	ldr	x2, [x0]
 1ac:	cbnz	x2, 1b8 <lt__slist_cons+0x14>
 1b0:	str	x1, [x0]
 1b4:	ret
 1b8:	stp	x29, x30, [sp, #-16]!
 1bc:	mov	x29, sp
 1c0:	adrp	x3, 0 <lt__slist_delete>
 1c4:	add	x3, x3, #0x0
 1c8:	add	x3, x3, #0x40
 1cc:	mov	w2, #0xaf                  	// #175
 1d0:	adrp	x1, 0 <lt__slist_delete>
 1d4:	add	x1, x1, #0x0
 1d8:	adrp	x0, 0 <lt__slist_delete>
 1dc:	add	x0, x0, #0x0
 1e0:	bl	0 <__assert_fail>
 1e4:	mov	x0, x1
 1e8:	ret

00000000000001ec <lt__slist_tail>:
 1ec:	cbz	x0, 1f4 <lt__slist_tail+0x8>
 1f0:	ldr	x0, [x0]
 1f4:	ret

00000000000001f8 <lt__slist_nth>:
 1f8:	cmp	x0, #0x0
 1fc:	ccmp	x1, #0x1, #0x0, ne  // ne = any
 200:	b.ls	218 <lt__slist_nth+0x20>  // b.plast
 204:	ldr	x0, [x0]
 208:	sub	x1, x1, #0x1
 20c:	cmp	x0, #0x0
 210:	ccmp	x1, #0x1, #0x0, ne  // ne = any
 214:	b.hi	204 <lt__slist_nth+0xc>  // b.pmore
 218:	ret

000000000000021c <lt__slist_length>:
 21c:	mov	x1, x0
 220:	cbz	x0, 238 <lt__slist_length+0x1c>
 224:	mov	x0, #0x0                   	// #0
 228:	ldr	x1, [x1]
 22c:	add	x0, x0, #0x1
 230:	cbnz	x1, 228 <lt__slist_length+0xc>
 234:	ret
 238:	mov	x0, #0x0                   	// #0
 23c:	b	234 <lt__slist_length+0x18>

0000000000000240 <lt__slist_reverse>:
 240:	cbz	x0, 260 <lt__slist_reverse+0x20>
 244:	mov	x2, #0x0                   	// #0
 248:	b	250 <lt__slist_reverse+0x10>
 24c:	mov	x0, x1
 250:	ldr	x1, [x0]
 254:	str	x2, [x0]
 258:	mov	x2, x0
 25c:	cbnz	x1, 24c <lt__slist_reverse+0xc>
 260:	ret

0000000000000264 <lt__slist_foreach>:
 264:	stp	x29, x30, [sp, #-48]!
 268:	mov	x29, sp
 26c:	stp	x19, x20, [sp, #16]
 270:	str	x21, [sp, #32]
 274:	mov	x20, x1
 278:	mov	x21, x2
 27c:	cbz	x1, 29c <lt__slist_foreach+0x38>
 280:	cbz	x0, 2c0 <lt__slist_foreach+0x5c>
 284:	ldr	x19, [x0]
 288:	mov	x1, x21
 28c:	blr	x20
 290:	cbnz	x0, 2c0 <lt__slist_foreach+0x5c>
 294:	mov	x0, x19
 298:	b	280 <lt__slist_foreach+0x1c>
 29c:	adrp	x3, 0 <lt__slist_delete>
 2a0:	add	x3, x3, #0x0
 2a4:	add	x3, x3, #0x50
 2a8:	mov	w2, #0xf6                  	// #246
 2ac:	adrp	x1, 0 <lt__slist_delete>
 2b0:	add	x1, x1, #0x0
 2b4:	adrp	x0, 0 <lt__slist_delete>
 2b8:	add	x0, x0, #0x0
 2bc:	bl	0 <__assert_fail>
 2c0:	ldp	x19, x20, [sp, #16]
 2c4:	ldr	x21, [sp, #32]
 2c8:	ldp	x29, x30, [sp], #48
 2cc:	ret

00000000000002d0 <lt__slist_sort>:
 2d0:	cbz	x0, 3bc <lt__slist_sort+0xec>
 2d4:	stp	x29, x30, [sp, #-80]!
 2d8:	mov	x29, sp
 2dc:	stp	x21, x22, [sp, #32]
 2e0:	str	x23, [sp, #48]
 2e4:	mov	x22, x1
 2e8:	mov	x23, x2
 2ec:	ldr	x3, [x0]
 2f0:	cbz	x3, 3ac <lt__slist_sort+0xdc>
 2f4:	stp	x19, x20, [sp, #16]
 2f8:	mov	x4, x0
 2fc:	b	304 <lt__slist_sort+0x34>
 300:	ldr	x4, [x4]
 304:	ldr	x3, [x3]
 308:	cbz	x3, 314 <lt__slist_sort+0x44>
 30c:	ldr	x3, [x3]
 310:	cbnz	x3, 300 <lt__slist_sort+0x30>
 314:	ldr	x19, [x4]
 318:	str	xzr, [x4]
 31c:	mov	x2, x23
 320:	mov	x1, x22
 324:	bl	2d0 <lt__slist_sort>
 328:	mov	x20, x0
 32c:	mov	x2, x23
 330:	mov	x1, x22
 334:	mov	x0, x19
 338:	bl	2d0 <lt__slist_sort>
 33c:	mov	x19, x0
 340:	cmp	x20, #0x0
 344:	ccmp	x0, #0x0, #0x4, ne  // ne = any
 348:	b.eq	394 <lt__slist_sort+0xc4>  // b.none
 34c:	add	x21, sp, #0x40
 350:	b	36c <lt__slist_sort+0x9c>
 354:	str	x20, [x21]
 358:	mov	x21, x20
 35c:	ldr	x20, [x20]
 360:	cmp	x20, #0x0
 364:	ccmp	x19, #0x0, #0x4, ne  // ne = any
 368:	b.eq	398 <lt__slist_sort+0xc8>  // b.none
 36c:	mov	x2, x23
 370:	mov	x1, x19
 374:	mov	x0, x20
 378:	blr	x22
 37c:	cmp	w0, #0x0
 380:	b.le	354 <lt__slist_sort+0x84>
 384:	str	x19, [x21]
 388:	mov	x21, x19
 38c:	ldr	x19, [x19]
 390:	b	360 <lt__slist_sort+0x90>
 394:	add	x21, sp, #0x40
 398:	cmp	x20, #0x0
 39c:	csel	x20, x20, x19, ne  // ne = any
 3a0:	str	x20, [x21]
 3a4:	ldr	x0, [sp, #64]
 3a8:	ldp	x19, x20, [sp, #16]
 3ac:	ldp	x21, x22, [sp, #32]
 3b0:	ldr	x23, [sp, #48]
 3b4:	ldp	x29, x30, [sp], #80
 3b8:	ret
 3bc:	ret

00000000000003c0 <lt__slist_box>:
 3c0:	stp	x29, x30, [sp, #-32]!
 3c4:	mov	x29, sp
 3c8:	str	x19, [sp, #16]
 3cc:	mov	x19, x0
 3d0:	mov	x0, #0x10                  	// #16
 3d4:	bl	0 <malloc>
 3d8:	cbz	x0, 3e4 <lt__slist_box+0x24>
 3dc:	str	xzr, [x0]
 3e0:	str	x19, [x0, #8]
 3e4:	ldr	x19, [sp, #16]
 3e8:	ldp	x29, x30, [sp], #32
 3ec:	ret

00000000000003f0 <lt__slist_unbox>:
 3f0:	stp	x29, x30, [sp, #-32]!
 3f4:	mov	x29, sp
 3f8:	str	x19, [sp, #16]
 3fc:	mov	x19, x0
 400:	cbz	x0, 40c <lt__slist_unbox+0x1c>
 404:	ldr	x19, [x0, #8]
 408:	bl	0 <free>
 40c:	mov	x0, x19
 410:	ldr	x19, [sp, #16]
 414:	ldp	x29, x30, [sp], #32
 418:	ret

lt__strl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_strlcat>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	str	x21, [sp, #32]
  10:	cbz	x0, 90 <lt_strlcat+0x90>
  14:	mov	x21, x0
  18:	mov	x19, x1
  1c:	mov	x20, x2
  20:	cbz	x1, b0 <lt_strlcat+0xb0>
  24:	cbz	x2, d0 <lt_strlcat+0xd0>
  28:	bl	0 <strlen>
  2c:	mov	x3, x0
  30:	ldrb	w1, [x19]
  34:	cbz	w1, 60 <lt_strlcat+0x60>
  38:	sub	x2, x20, #0x1
  3c:	cmp	x0, x2
  40:	b.cs	60 <lt_strlcat+0x60>  // b.hs, b.nlast
  44:	strb	w1, [x21, x3]
  48:	add	x3, x3, #0x1
  4c:	ldrb	w1, [x19, #1]!
  50:	cbz	w1, 60 <lt_strlcat+0x60>
  54:	cmp	x3, x2
  58:	b.ne	44 <lt_strlcat+0x44>  // b.any
  5c:	mov	x3, x2
  60:	strb	wzr, [x21, x3]
  64:	ldrb	w0, [x19]
  68:	cbz	w0, f0 <lt_strlcat+0xf0>
  6c:	mov	x0, x3
  70:	sub	x3, x19, x3
  74:	add	x0, x0, #0x1
  78:	ldrb	w1, [x3, x0]
  7c:	cbnz	w1, 74 <lt_strlcat+0x74>
  80:	ldp	x19, x20, [sp, #16]
  84:	ldr	x21, [sp, #32]
  88:	ldp	x29, x30, [sp], #48
  8c:	ret
  90:	adrp	x3, 0 <lt_strlcat>
  94:	add	x3, x3, #0x0
  98:	mov	w2, #0x39                  	// #57
  9c:	adrp	x1, 0 <lt_strlcat>
  a0:	add	x1, x1, #0x0
  a4:	adrp	x0, 0 <lt_strlcat>
  a8:	add	x0, x0, #0x0
  ac:	bl	0 <__assert_fail>
  b0:	adrp	x3, 0 <lt_strlcat>
  b4:	add	x3, x3, #0x0
  b8:	mov	w2, #0x3a                  	// #58
  bc:	adrp	x1, 0 <lt_strlcat>
  c0:	add	x1, x1, #0x0
  c4:	adrp	x0, 0 <lt_strlcat>
  c8:	add	x0, x0, #0x0
  cc:	bl	0 <__assert_fail>
  d0:	adrp	x3, 0 <lt_strlcat>
  d4:	add	x3, x3, #0x0
  d8:	mov	w2, #0x3b                  	// #59
  dc:	adrp	x1, 0 <lt_strlcat>
  e0:	add	x1, x1, #0x0
  e4:	adrp	x0, 0 <lt_strlcat>
  e8:	add	x0, x0, #0x0
  ec:	bl	0 <__assert_fail>
  f0:	mov	x0, x3
  f4:	b	80 <lt_strlcat+0x80>

00000000000000f8 <lt_strlcpy>:
  f8:	stp	x29, x30, [sp, #-16]!
  fc:	mov	x29, sp
 100:	cbz	x0, 140 <lt_strlcpy+0x48>
 104:	cbz	x1, 164 <lt_strlcpy+0x6c>
 108:	cbz	x2, 190 <lt_strlcpy+0x98>
 10c:	ldrb	w4, [x1]
 110:	cbz	w4, 1b4 <lt_strlcpy+0xbc>
 114:	mov	x3, #0x0                   	// #0
 118:	subs	x5, x2, #0x1
 11c:	b.eq	188 <lt_strlcpy+0x90>  // b.none
 120:	strb	w4, [x0, x3]
 124:	add	x3, x3, #0x1
 128:	add	x2, x1, x3
 12c:	ldrb	w4, [x1, x3]
 130:	cbz	w4, 1c0 <lt_strlcpy+0xc8>
 134:	cmp	x3, x5
 138:	b.ne	120 <lt_strlcpy+0x28>  // b.any
 13c:	b	1c4 <lt_strlcpy+0xcc>
 140:	adrp	x3, 0 <lt_strlcat>
 144:	add	x3, x3, #0x0
 148:	add	x3, x3, #0x10
 14c:	mov	w2, #0x69                  	// #105
 150:	adrp	x1, 0 <lt_strlcat>
 154:	add	x1, x1, #0x0
 158:	adrp	x0, 0 <lt_strlcat>
 15c:	add	x0, x0, #0x0
 160:	bl	0 <__assert_fail>
 164:	adrp	x3, 0 <lt_strlcat>
 168:	add	x3, x3, #0x0
 16c:	add	x3, x3, #0x10
 170:	mov	w2, #0x6a                  	// #106
 174:	adrp	x1, 0 <lt_strlcat>
 178:	add	x1, x1, #0x0
 17c:	adrp	x0, 0 <lt_strlcat>
 180:	add	x0, x0, #0x0
 184:	bl	0 <__assert_fail>
 188:	mov	x2, x1
 18c:	b	1c4 <lt_strlcpy+0xcc>
 190:	adrp	x3, 0 <lt_strlcat>
 194:	add	x3, x3, #0x0
 198:	add	x3, x3, #0x10
 19c:	mov	w2, #0x6b                  	// #107
 1a0:	adrp	x1, 0 <lt_strlcat>
 1a4:	add	x1, x1, #0x0
 1a8:	adrp	x0, 0 <lt_strlcat>
 1ac:	add	x0, x0, #0x0
 1b0:	bl	0 <__assert_fail>
 1b4:	mov	x2, x1
 1b8:	mov	x5, #0x0                   	// #0
 1bc:	b	1c4 <lt_strlcpy+0xcc>
 1c0:	mov	x5, x3
 1c4:	strb	wzr, [x0, x5]
 1c8:	ldrb	w0, [x2]
 1cc:	cbz	w0, 1ec <lt_strlcpy+0xf4>
 1d0:	mov	x0, x5
 1d4:	sub	x2, x2, x5
 1d8:	add	x0, x0, #0x1
 1dc:	ldrb	w1, [x2, x0]
 1e0:	cbnz	w1, 1d8 <lt_strlcpy+0xe0>
 1e4:	ldp	x29, x30, [sp], #16
 1e8:	ret
 1ec:	mov	x0, x5
 1f0:	b	1e4 <lt_strlcpy+0xec>

libltdlS.o:     file format elf64-littleaarch64


dlopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <vl_exit>:
   0:	adrp	x0, 0 <vl_exit>
   4:	str	xzr, [x0]
   8:	mov	w0, #0x0                   	// #0
   c:	ret

0000000000000010 <vm_sym>:
  10:	stp	x29, x30, [sp, #-32]!
  14:	mov	x29, sp
  18:	str	x19, [sp, #16]
  1c:	mov	x0, x1
  20:	mov	x1, x2
  24:	bl	0 <dlsym>
  28:	mov	x19, x0
  2c:	cbz	x0, 40 <vm_sym+0x30>
  30:	mov	x0, x19
  34:	ldr	x19, [sp, #16]
  38:	ldp	x29, x30, [sp], #32
  3c:	ret
  40:	bl	0 <dlerror>
  44:	bl	0 <lt__set_last_error>
  48:	b	30 <vm_sym+0x20>

000000000000004c <vm_close>:
  4c:	stp	x29, x30, [sp, #-16]!
  50:	mov	x29, sp
  54:	mov	x0, x1
  58:	bl	0 <dlclose>
  5c:	cbnz	w0, 68 <vm_close+0x1c>
  60:	ldp	x29, x30, [sp], #16
  64:	ret
  68:	bl	0 <dlerror>
  6c:	bl	0 <lt__set_last_error>
  70:	mov	w0, #0x1                   	// #1
  74:	b	60 <vm_close+0x14>

0000000000000078 <vm_open>:
  78:	stp	x29, x30, [sp, #-32]!
  7c:	mov	x29, sp
  80:	str	x19, [sp, #16]
  84:	mov	x0, x1
  88:	mov	w1, #0x1                   	// #1
  8c:	cbz	x2, a0 <vm_open+0x28>
  90:	ldrb	w1, [x2]
  94:	tst	x1, #0x4
  98:	mov	w2, #0x101                 	// #257
  9c:	csinc	w1, w2, wzr, ne  // ne = any
  a0:	bl	0 <dlopen>
  a4:	mov	x19, x0
  a8:	cbz	x0, bc <vm_open+0x44>
  ac:	mov	x0, x19
  b0:	ldr	x19, [sp, #16]
  b4:	ldp	x29, x30, [sp], #32
  b8:	ret
  bc:	bl	0 <dlerror>
  c0:	bl	0 <lt__set_last_error>
  c4:	b	ac <vm_open+0x34>

00000000000000c8 <dlopen_LTX_get_vtable>:
  c8:	stp	x29, x30, [sp, #-32]!
  cc:	mov	x29, sp
  d0:	str	x19, [sp, #16]
  d4:	mov	x19, x0
  d8:	adrp	x1, 0 <vl_exit>
  dc:	ldr	x0, [x1]
  e0:	cbz	x0, 104 <dlopen_LTX_get_vtable+0x3c>
  e4:	ldr	x1, [x0]
  e8:	cbz	x1, 11c <dlopen_LTX_get_vtable+0x54>
  ec:	ldr	x1, [x0, #56]
  f0:	cmp	x1, x19
  f4:	b.ne	164 <dlopen_LTX_get_vtable+0x9c>  // b.any
  f8:	ldr	x19, [sp, #16]
  fc:	ldp	x29, x30, [sp], #32
 100:	ret
 104:	mov	x0, #0x48                  	// #72
 108:	bl	0 <lt__zalloc>
 10c:	adrp	x1, 0 <vl_exit>
 110:	str	x0, [x1]
 114:	cbz	x0, f8 <dlopen_LTX_get_vtable+0x30>
 118:	b	e4 <dlopen_LTX_get_vtable+0x1c>
 11c:	adrp	x1, 0 <vl_exit>
 120:	add	x1, x1, #0x0
 124:	str	x1, [x0]
 128:	adrp	x1, 0 <vl_exit>
 12c:	add	x1, x1, #0x0
 130:	str	x1, [x0, #16]
 134:	adrp	x1, 0 <vl_exit>
 138:	add	x1, x1, #0x0
 13c:	str	x1, [x0, #24]
 140:	adrp	x1, 0 <vl_exit>
 144:	add	x1, x1, #0x0
 148:	str	x1, [x0, #32]
 14c:	adrp	x1, 0 <vl_exit>
 150:	add	x1, x1, #0x0
 154:	str	x1, [x0, #48]
 158:	str	x19, [x0, #56]
 15c:	str	wzr, [x0, #64]
 160:	b	f8 <dlopen_LTX_get_vtable+0x30>
 164:	mov	w0, #0x3                   	// #3
 168:	bl	0 <lt__error_string>
 16c:	bl	0 <lt__set_last_error>
 170:	mov	x0, #0x0                   	// #0
 174:	b	f8 <dlopen_LTX_get_vtable+0x30>
