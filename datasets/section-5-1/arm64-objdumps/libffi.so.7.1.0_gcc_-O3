
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libffi.so.7.1.0_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000001970 <.init>:
    1970:	stp	x29, x30, [sp, #-16]!
    1974:	mov	x29, sp
    1978:	bl	1c50 <ffi_prep_java_raw_closure_loc@plt+0x10>
    197c:	ldp	x29, x30, [sp], #16
    1980:	ret

Disassembly of section .plt:

0000000000001990 <memcpy@plt-0x20>:
    1990:	stp	x16, x30, [sp, #-16]!
    1994:	adrp	x16, 17000 <ffi_type_void@@LIBFFI_BASE_7.0+0x10880>
    1998:	ldr	x17, [x16, #4088]
    199c:	add	x16, x16, #0xff8
    19a0:	br	x17
    19a4:	nop
    19a8:	nop
    19ac:	nop

00000000000019b0 <memcpy@plt>:
    19b0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    19b4:	ldr	x17, [x16]
    19b8:	add	x16, x16, #0x0
    19bc:	br	x17

00000000000019c0 <ffi_prep_closure_loc@plt>:
    19c0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    19c4:	ldr	x17, [x16, #8]
    19c8:	add	x16, x16, #0x8
    19cc:	br	x17

00000000000019d0 <strlen@plt>:
    19d0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    19d4:	ldr	x17, [x16, #16]
    19d8:	add	x16, x16, #0x10
    19dc:	br	x17

00000000000019e0 <ffi_java_raw_to_ptrarray@plt>:
    19e0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    19e4:	ldr	x17, [x16, #24]
    19e8:	add	x16, x16, #0x18
    19ec:	br	x17

00000000000019f0 <__cxa_finalize@plt>:
    19f0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    19f4:	ldr	x17, [x16, #32]
    19f8:	add	x16, x16, #0x20
    19fc:	br	x17

0000000000001a00 <statfs@plt>:
    1a00:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1a04:	ldr	x17, [x16, #40]
    1a08:	add	x16, x16, #0x28
    1a0c:	br	x17

0000000000001a10 <fclose@plt>:
    1a10:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1a14:	ldr	x17, [x16, #48]
    1a18:	add	x16, x16, #0x30
    1a1c:	br	x17

0000000000001a20 <fopen@plt>:
    1a20:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1a24:	ldr	x17, [x16, #56]
    1a28:	add	x16, x16, #0x38
    1a2c:	br	x17

0000000000001a30 <open@plt>:
    1a30:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1a34:	ldr	x17, [x16, #64]
    1a38:	add	x16, x16, #0x40
    1a3c:	br	x17

0000000000001a40 <strncmp@plt>:
    1a40:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1a44:	ldr	x17, [x16, #72]
    1a48:	add	x16, x16, #0x48
    1a4c:	br	x17

0000000000001a50 <memset@plt>:
    1a50:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1a54:	ldr	x17, [x16, #80]
    1a58:	add	x16, x16, #0x50
    1a5c:	br	x17

0000000000001a60 <ffi_raw_to_ptrarray@plt>:
    1a60:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1a64:	ldr	x17, [x16, #88]
    1a68:	add	x16, x16, #0x58
    1a6c:	br	x17

0000000000001a70 <ffi_prep_raw_closure_loc@plt>:
    1a70:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1a74:	ldr	x17, [x16, #96]
    1a78:	add	x16, x16, #0x60
    1a7c:	br	x17

0000000000001a80 <setmntent@plt>:
    1a80:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1a84:	ldr	x17, [x16, #104]
    1a88:	add	x16, x16, #0x68
    1a8c:	br	x17

0000000000001a90 <endmntent@plt>:
    1a90:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1a94:	ldr	x17, [x16, #112]
    1a98:	add	x16, x16, #0x70
    1a9c:	br	x17

0000000000001aa0 <pthread_mutex_init@plt>:
    1aa0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1aa4:	ldr	x17, [x16, #120]
    1aa8:	add	x16, x16, #0x78
    1aac:	br	x17

0000000000001ab0 <close@plt>:
    1ab0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1ab4:	ldr	x17, [x16, #128]
    1ab8:	add	x16, x16, #0x80
    1abc:	br	x17

0000000000001ac0 <__gmon_start__@plt>:
    1ac0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1ac4:	ldr	x17, [x16, #136]
    1ac8:	add	x16, x16, #0x88
    1acc:	br	x17

0000000000001ad0 <write@plt>:
    1ad0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1ad4:	ldr	x17, [x16, #144]
    1ad8:	add	x16, x16, #0x90
    1adc:	br	x17

0000000000001ae0 <abort@plt>:
    1ae0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1ae4:	ldr	x17, [x16, #152]
    1ae8:	add	x16, x16, #0x98
    1aec:	br	x17

0000000000001af0 <mkostemp@plt>:
    1af0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1af4:	ldr	x17, [x16, #160]
    1af8:	add	x16, x16, #0xa0
    1afc:	br	x17

0000000000001b00 <access@plt>:
    1b00:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1b04:	ldr	x17, [x16, #168]
    1b08:	add	x16, x16, #0xa8
    1b0c:	br	x17

0000000000001b10 <mmap@plt>:
    1b10:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1b14:	ldr	x17, [x16, #176]
    1b18:	add	x16, x16, #0xb0
    1b1c:	br	x17

0000000000001b20 <free@plt>:
    1b20:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1b24:	ldr	x17, [x16, #184]
    1b28:	add	x16, x16, #0xb8
    1b2c:	br	x17

0000000000001b30 <ffi_java_raw_size@plt>:
    1b30:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1b34:	ldr	x17, [x16, #192]
    1b38:	add	x16, x16, #0xc0
    1b3c:	br	x17

0000000000001b40 <ffi_raw_size@plt>:
    1b40:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1b44:	ldr	x17, [x16, #200]
    1b48:	add	x16, x16, #0xc8
    1b4c:	br	x17

0000000000001b50 <ffi_ptrarray_to_raw@plt>:
    1b50:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1b54:	ldr	x17, [x16, #208]
    1b58:	add	x16, x16, #0xd0
    1b5c:	br	x17

0000000000001b60 <hasmntopt@plt>:
    1b60:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1b64:	ldr	x17, [x16, #216]
    1b68:	add	x16, x16, #0xd8
    1b6c:	br	x17

0000000000001b70 <strchr@plt>:
    1b70:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1b74:	ldr	x17, [x16, #224]
    1b78:	add	x16, x16, #0xe0
    1b7c:	br	x17

0000000000001b80 <munmap@plt>:
    1b80:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1b84:	ldr	x17, [x16, #232]
    1b88:	add	x16, x16, #0xe8
    1b8c:	br	x17

0000000000001b90 <ffi_call@plt>:
    1b90:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1b94:	ldr	x17, [x16, #240]
    1b98:	add	x16, x16, #0xf0
    1b9c:	br	x17

0000000000001ba0 <sysconf@plt>:
    1ba0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1ba4:	ldr	x17, [x16, #248]
    1ba8:	add	x16, x16, #0xf8
    1bac:	br	x17

0000000000001bb0 <getmntent_r@plt>:
    1bb0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1bb4:	ldr	x17, [x16, #256]
    1bb8:	add	x16, x16, #0x100
    1bbc:	br	x17

0000000000001bc0 <ftruncate@plt>:
    1bc0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1bc4:	ldr	x17, [x16, #264]
    1bc8:	add	x16, x16, #0x108
    1bcc:	br	x17

0000000000001bd0 <__errno_location@plt>:
    1bd0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1bd4:	ldr	x17, [x16, #272]
    1bd8:	add	x16, x16, #0x110
    1bdc:	br	x17

0000000000001be0 <getenv@plt>:
    1be0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1be4:	ldr	x17, [x16, #280]
    1be8:	add	x16, x16, #0x118
    1bec:	br	x17

0000000000001bf0 <ffi_java_ptrarray_to_raw@plt>:
    1bf0:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1bf4:	ldr	x17, [x16, #288]
    1bf8:	add	x16, x16, #0x120
    1bfc:	br	x17

0000000000001c00 <pthread_mutex_lock@plt>:
    1c00:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1c04:	ldr	x17, [x16, #296]
    1c08:	add	x16, x16, #0x128
    1c0c:	br	x17

0000000000001c10 <__getdelim@plt>:
    1c10:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1c14:	ldr	x17, [x16, #304]
    1c18:	add	x16, x16, #0x130
    1c1c:	br	x17

0000000000001c20 <pthread_mutex_unlock@plt>:
    1c20:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1c24:	ldr	x17, [x16, #312]
    1c28:	add	x16, x16, #0x138
    1c2c:	br	x17

0000000000001c30 <unlink@plt>:
    1c30:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1c34:	ldr	x17, [x16, #320]
    1c38:	add	x16, x16, #0x140
    1c3c:	br	x17

0000000000001c40 <ffi_prep_java_raw_closure_loc@plt>:
    1c40:	adrp	x16, 18000 <memcpy@GLIBC_2.17>
    1c44:	ldr	x17, [x16, #328]
    1c48:	add	x16, x16, #0x148
    1c4c:	br	x17

Disassembly of section .text:

0000000000001c50 <ffi_prep_cif@@LIBFFI_BASE_7.0-0x358>:
    1c50:	adrp	x0, 17000 <ffi_type_void@@LIBFFI_BASE_7.0+0x10880>
    1c54:	ldr	x0, [x0, #4056]
    1c58:	cbz	x0, 1c60 <ffi_prep_java_raw_closure_loc@plt+0x20>
    1c5c:	b	1ac0 <__gmon_start__@plt>
    1c60:	ret
    1c64:	nop
    1c68:	adrp	x0, 18000 <memcpy@GLIBC_2.17>
    1c6c:	add	x0, x0, #0x198
    1c70:	adrp	x1, 18000 <memcpy@GLIBC_2.17>
    1c74:	add	x1, x1, #0x198
    1c78:	cmp	x1, x0
    1c7c:	b.eq	1c94 <ffi_prep_java_raw_closure_loc@plt+0x54>  // b.none
    1c80:	adrp	x1, 17000 <ffi_type_void@@LIBFFI_BASE_7.0+0x10880>
    1c84:	ldr	x1, [x1, #4040]
    1c88:	cbz	x1, 1c94 <ffi_prep_java_raw_closure_loc@plt+0x54>
    1c8c:	mov	x16, x1
    1c90:	br	x16
    1c94:	ret
    1c98:	adrp	x0, 18000 <memcpy@GLIBC_2.17>
    1c9c:	add	x0, x0, #0x198
    1ca0:	adrp	x1, 18000 <memcpy@GLIBC_2.17>
    1ca4:	add	x1, x1, #0x198
    1ca8:	sub	x1, x1, x0
    1cac:	lsr	x2, x1, #63
    1cb0:	add	x1, x2, x1, asr #3
    1cb4:	cmp	xzr, x1, asr #1
    1cb8:	asr	x1, x1, #1
    1cbc:	b.eq	1cd4 <ffi_prep_java_raw_closure_loc@plt+0x94>  // b.none
    1cc0:	adrp	x2, 17000 <ffi_type_void@@LIBFFI_BASE_7.0+0x10880>
    1cc4:	ldr	x2, [x2, #4064]
    1cc8:	cbz	x2, 1cd4 <ffi_prep_java_raw_closure_loc@plt+0x94>
    1ccc:	mov	x16, x2
    1cd0:	br	x16
    1cd4:	ret
    1cd8:	stp	x29, x30, [sp, #-32]!
    1cdc:	mov	x29, sp
    1ce0:	str	x19, [sp, #16]
    1ce4:	adrp	x19, 18000 <memcpy@GLIBC_2.17>
    1ce8:	ldrb	w0, [x19, #416]
    1cec:	cbnz	w0, 1d14 <ffi_prep_java_raw_closure_loc@plt+0xd4>
    1cf0:	adrp	x0, 17000 <ffi_type_void@@LIBFFI_BASE_7.0+0x10880>
    1cf4:	ldr	x0, [x0, #4048]
    1cf8:	cbz	x0, 1d08 <ffi_prep_java_raw_closure_loc@plt+0xc8>
    1cfc:	adrp	x0, 18000 <memcpy@GLIBC_2.17>
    1d00:	ldr	x0, [x0, #336]
    1d04:	bl	19f0 <__cxa_finalize@plt>
    1d08:	bl	1c68 <ffi_prep_java_raw_closure_loc@plt+0x28>
    1d0c:	mov	w0, #0x1                   	// #1
    1d10:	strb	w0, [x19, #416]
    1d14:	ldr	x19, [sp, #16]
    1d18:	ldp	x29, x30, [sp], #32
    1d1c:	ret
    1d20:	b	1c98 <ffi_prep_java_raw_closure_loc@plt+0x58>
    1d24:	nop
    1d28:	cbz	x0, 1e54 <ffi_prep_java_raw_closure_loc@plt+0x214>
    1d2c:	stp	x29, x30, [sp, #-48]!
    1d30:	mov	x29, sp
    1d34:	str	x21, [sp, #32]
    1d38:	ldr	x21, [x0, #16]
    1d3c:	stp	x19, x20, [sp, #16]
    1d40:	mov	x19, x0
    1d44:	cbz	x21, 1dec <ffi_prep_java_raw_closure_loc@plt+0x1ac>
    1d48:	ldr	x0, [x21]
    1d4c:	str	xzr, [x19]
    1d50:	strh	wzr, [x19, #8]
    1d54:	cbz	x0, 1e5c <ffi_prep_java_raw_closure_loc@plt+0x21c>
    1d58:	mov	x20, x1
    1d5c:	mov	w4, #0x0                   	// #0
    1d60:	mov	x2, #0x0                   	// #0
    1d64:	ldr	x1, [x0]
    1d68:	cbz	x1, 1e00 <ffi_prep_java_raw_closure_loc@plt+0x1c0>
    1d6c:	ldrh	w3, [x0, #8]
    1d70:	sub	x2, x2, #0x1
    1d74:	mov	x1, x20
    1d78:	sub	w5, w3, #0x1
    1d7c:	cmp	w4, w3
    1d80:	csel	w6, w4, w3, hi  // hi = pmore
    1d84:	sxtw	x5, w5
    1d88:	orr	x2, x2, x5
    1d8c:	add	x2, x2, #0x1
    1d90:	str	x2, [x19]
    1d94:	cbz	x20, 1e18 <ffi_prep_java_raw_closure_loc@plt+0x1d8>
    1d98:	str	x2, [x1], #8
    1d9c:	and	w4, w6, #0xffff
    1da0:	ldr	x2, [x0]
    1da4:	strh	w6, [x19, #8]
    1da8:	ldr	x3, [x19]
    1dac:	mov	x20, x1
    1db0:	ldr	x0, [x21, #8]!
    1db4:	add	x2, x2, x3
    1db8:	str	x2, [x19]
    1dbc:	cbnz	x0, 1d64 <ffi_prep_java_raw_closure_loc@plt+0x124>
    1dc0:	sub	w4, w4, #0x1
    1dc4:	sub	x2, x2, #0x1
    1dc8:	sxtw	x4, w4
    1dcc:	orr	x2, x4, x2
    1dd0:	adds	x2, x2, #0x1
    1dd4:	cset	w0, eq  // eq = none
    1dd8:	str	x2, [x19]
    1ddc:	ldp	x19, x20, [sp, #16]
    1de0:	ldr	x21, [sp, #32]
    1de4:	ldp	x29, x30, [sp], #48
    1de8:	ret
    1dec:	mov	w0, #0x1                   	// #1
    1df0:	ldp	x19, x20, [sp, #16]
    1df4:	ldr	x21, [sp, #32]
    1df8:	ldp	x29, x30, [sp], #48
    1dfc:	ret
    1e00:	bl	1d28 <ffi_prep_java_raw_closure_loc@plt+0xe8>
    1e04:	cbnz	w0, 1dec <ffi_prep_java_raw_closure_loc@plt+0x1ac>
    1e08:	ldrh	w4, [x19, #8]
    1e0c:	ldr	x2, [x19]
    1e10:	ldr	x0, [x21]
    1e14:	b	1d6c <ffi_prep_java_raw_closure_loc@plt+0x12c>
    1e18:	ldr	x1, [x0]
    1e1c:	csel	w3, w4, w3, hi  // hi = pmore
    1e20:	ldr	x0, [x21, #8]!
    1e24:	add	x2, x2, x1
    1e28:	str	x2, [x19]
    1e2c:	and	w4, w3, #0xffff
    1e30:	strh	w3, [x19, #8]
    1e34:	cbnz	x0, 1d64 <ffi_prep_java_raw_closure_loc@plt+0x124>
    1e38:	sub	w4, w4, #0x1
    1e3c:	sub	x2, x2, #0x1
    1e40:	sxtw	x4, w4
    1e44:	orr	x2, x4, x2
    1e48:	adds	x2, x2, #0x1
    1e4c:	cset	w0, eq  // eq = none
    1e50:	b	1dd8 <ffi_prep_java_raw_closure_loc@plt+0x198>
    1e54:	mov	w0, #0x1                   	// #1
    1e58:	ret
    1e5c:	mov	x2, #0x0                   	// #0
    1e60:	mov	w0, #0x1                   	// #1
    1e64:	str	x2, [x19]
    1e68:	b	1ddc <ffi_prep_java_raw_closure_loc@plt+0x19c>
    1e6c:	nop
    1e70:	mov	x10, x0
    1e74:	ldr	w1, [x0, #4]
    1e78:	ldr	x0, [x0, #16]
    1e7c:	ldr	x7, [x10, #8]
    1e80:	ldrh	w0, [x0, #10]
    1e84:	cmp	w0, #0xd
    1e88:	cset	w8, eq  // eq = none
    1e8c:	lsl	w8, w8, #3
    1e90:	cbz	w1, 1f34 <ffi_prep_java_raw_closure_loc@plt+0x2f4>
    1e94:	sub	w9, w1, #0x1
    1e98:	stp	x29, x30, [sp, #-16]!
    1e9c:	add	x9, x9, #0x1
    1ea0:	mov	x29, sp
    1ea4:	add	x9, x7, x9, lsl #3
    1ea8:	ldr	x0, [x7]
    1eac:	ldr	x1, [x0]
    1eb0:	cbz	x1, 1f14 <ffi_prep_java_raw_closure_loc@plt+0x2d4>
    1eb4:	ldrh	w3, [x0, #8]
    1eb8:	sub	w4, w1, #0x1
    1ebc:	sub	w2, w8, #0x1
    1ec0:	orr	w4, w4, #0x7
    1ec4:	sub	w3, w3, #0x1
    1ec8:	add	w1, w4, #0x1
    1ecc:	orr	w2, w2, w3
    1ed0:	add	x7, x7, #0x8
    1ed4:	tst	w3, w8
    1ed8:	add	w2, w2, w4
    1edc:	b.eq	1efc <ffi_prep_java_raw_closure_loc@plt+0x2bc>  // b.none
    1ee0:	add	w8, w2, #0x2
    1ee4:	cmp	x7, x9
    1ee8:	b.ne	1ea8 <ffi_prep_java_raw_closure_loc@plt+0x268>  // b.any
    1eec:	str	w8, [x10, #24]
    1ef0:	mov	x0, x10
    1ef4:	ldp	x29, x30, [sp], #16
    1ef8:	b	5bb0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14a8>
    1efc:	add	w8, w8, w1
    1f00:	cmp	x7, x9
    1f04:	b.eq	1eec <ffi_prep_java_raw_closure_loc@plt+0x2ac>  // b.none
    1f08:	ldr	x0, [x7]
    1f0c:	ldr	x1, [x0]
    1f10:	cbnz	x1, 1eb4 <ffi_prep_java_raw_closure_loc@plt+0x274>
    1f14:	bl	1d28 <ffi_prep_java_raw_closure_loc@plt+0xe8>
    1f18:	cbnz	w0, 1f28 <ffi_prep_java_raw_closure_loc@plt+0x2e8>
    1f1c:	ldr	x0, [x7]
    1f20:	ldr	x1, [x0]
    1f24:	b	1eb4 <ffi_prep_java_raw_closure_loc@plt+0x274>
    1f28:	mov	w0, #0x1                   	// #1
    1f2c:	ldp	x29, x30, [sp], #16
    1f30:	ret
    1f34:	str	w8, [x10, #24]
    1f38:	mov	x0, x10
    1f3c:	b	5bb0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14a8>
    1f40:	cmp	w1, #0x1
    1f44:	b.ne	1f90 <ffi_prep_java_raw_closure_loc@plt+0x350>  // b.any
    1f48:	mov	x7, x0
    1f4c:	mov	w8, w1
    1f50:	ldr	x0, [x5]
    1f54:	stp	w1, w4, [x7]
    1f58:	stp	x6, x5, [x7, #8]
    1f5c:	str	wzr, [x7, #28]
    1f60:	cbz	x0, 1f6c <ffi_prep_java_raw_closure_loc@plt+0x32c>
    1f64:	mov	x0, x7
    1f68:	b	1e70 <ffi_prep_java_raw_closure_loc@plt+0x230>
    1f6c:	stp	x29, x30, [sp, #-16]!
    1f70:	mov	x0, x5
    1f74:	mov	x1, #0x0                   	// #0
    1f78:	mov	x29, sp
    1f7c:	bl	1d28 <ffi_prep_java_raw_closure_loc@plt+0xe8>
    1f80:	cbnz	w0, 1f98 <ffi_prep_java_raw_closure_loc@plt+0x358>
    1f84:	ldp	x29, x30, [sp], #16
    1f88:	mov	x0, x7
    1f8c:	b	1e70 <ffi_prep_java_raw_closure_loc@plt+0x230>
    1f90:	mov	w0, #0x2                   	// #2
    1f94:	ret
    1f98:	mov	w0, w8
    1f9c:	ldp	x29, x30, [sp], #16
    1fa0:	ret
    1fa4:	nop

0000000000001fa8 <ffi_prep_cif@@LIBFFI_BASE_7.0>:
    1fa8:	cmp	w1, #0x1
    1fac:	b.ne	1ff8 <ffi_prep_cif@@LIBFFI_BASE_7.0+0x50>  // b.any
    1fb0:	mov	x7, x0
    1fb4:	mov	w8, w1
    1fb8:	ldr	x0, [x3]
    1fbc:	stp	w1, w2, [x7]
    1fc0:	stp	x4, x3, [x7, #8]
    1fc4:	str	wzr, [x7, #28]
    1fc8:	cbz	x0, 1fd4 <ffi_prep_cif@@LIBFFI_BASE_7.0+0x2c>
    1fcc:	mov	x0, x7
    1fd0:	b	1e70 <ffi_prep_java_raw_closure_loc@plt+0x230>
    1fd4:	stp	x29, x30, [sp, #-16]!
    1fd8:	mov	x0, x3
    1fdc:	mov	x1, #0x0                   	// #0
    1fe0:	mov	x29, sp
    1fe4:	bl	1d28 <ffi_prep_java_raw_closure_loc@plt+0xe8>
    1fe8:	cbnz	w0, 2000 <ffi_prep_cif@@LIBFFI_BASE_7.0+0x58>
    1fec:	ldp	x29, x30, [sp], #16
    1ff0:	mov	x0, x7
    1ff4:	b	1e70 <ffi_prep_java_raw_closure_loc@plt+0x230>
    1ff8:	mov	w0, #0x2                   	// #2
    1ffc:	ret
    2000:	mov	w0, w8
    2004:	ldp	x29, x30, [sp], #16
    2008:	ret
    200c:	nop

0000000000002010 <ffi_prep_cif_var@@LIBFFI_BASE_7.0>:
    2010:	cmp	w1, #0x1
    2014:	b.ne	2060 <ffi_prep_cif_var@@LIBFFI_BASE_7.0+0x50>  // b.any
    2018:	mov	x7, x0
    201c:	mov	w8, w1
    2020:	ldr	x0, [x4]
    2024:	stp	w1, w3, [x7]
    2028:	stp	x5, x4, [x7, #8]
    202c:	str	wzr, [x7, #28]
    2030:	cbz	x0, 203c <ffi_prep_cif_var@@LIBFFI_BASE_7.0+0x2c>
    2034:	mov	x0, x7
    2038:	b	1e70 <ffi_prep_java_raw_closure_loc@plt+0x230>
    203c:	stp	x29, x30, [sp, #-16]!
    2040:	mov	x0, x4
    2044:	mov	x1, #0x0                   	// #0
    2048:	mov	x29, sp
    204c:	bl	1d28 <ffi_prep_java_raw_closure_loc@plt+0xe8>
    2050:	cbnz	w0, 2068 <ffi_prep_cif_var@@LIBFFI_BASE_7.0+0x58>
    2054:	ldp	x29, x30, [sp], #16
    2058:	mov	x0, x7
    205c:	b	1e70 <ffi_prep_java_raw_closure_loc@plt+0x230>
    2060:	mov	w0, #0x2                   	// #2
    2064:	ret
    2068:	mov	w0, w8
    206c:	ldp	x29, x30, [sp], #16
    2070:	ret
    2074:	nop

0000000000002078 <ffi_prep_closure@@LIBFFI_CLOSURE_7.0>:
    2078:	mov	x4, x0
    207c:	b	19c0 <ffi_prep_closure_loc@plt>

0000000000002080 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1>:
    2080:	cmp	w0, #0x1
    2084:	b.ne	20a0 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0x20>  // b.any
    2088:	mov	x7, x1
    208c:	ldrh	w1, [x1, #10]
    2090:	cmp	w1, #0xd
    2094:	b.eq	20a8 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0x28>  // b.none
    2098:	mov	w0, #0x1                   	// #1
    209c:	ret
    20a0:	mov	w0, #0x2                   	// #2
    20a4:	ret
    20a8:	ldr	x9, [x7, #16]
    20ac:	cbz	x9, 2098 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0x18>
    20b0:	ldr	x1, [x9]
    20b4:	str	xzr, [x7]
    20b8:	strh	wzr, [x7, #8]
    20bc:	cbz	x1, 21a4 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0x124>
    20c0:	stp	x29, x30, [sp, #-16]!
    20c4:	mov	x8, x2
    20c8:	mov	x3, #0x0                   	// #0
    20cc:	mov	w2, #0x0                   	// #0
    20d0:	mov	x29, sp
    20d4:	ldr	x0, [x1]
    20d8:	cbz	x0, 2154 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0xd4>
    20dc:	ldrh	w0, [x1, #8]
    20e0:	sub	x3, x3, #0x1
    20e4:	mov	x5, x8
    20e8:	sub	w4, w0, #0x1
    20ec:	cmp	w2, w0
    20f0:	csel	w6, w2, w0, hi  // hi = pmore
    20f4:	sxtw	x4, w4
    20f8:	orr	x3, x3, x4
    20fc:	add	x3, x3, #0x1
    2100:	str	x3, [x7]
    2104:	cbz	x8, 2180 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0x100>
    2108:	str	x3, [x5], #8
    210c:	and	w2, w6, #0xffff
    2110:	ldr	x3, [x1]
    2114:	strh	w6, [x7, #8]
    2118:	ldr	x0, [x7]
    211c:	mov	x8, x5
    2120:	ldr	x1, [x9, #8]!
    2124:	add	x3, x3, x0
    2128:	str	x3, [x7]
    212c:	cbnz	x1, 20d4 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0x54>
    2130:	sub	w2, w2, #0x1
    2134:	sub	x3, x3, #0x1
    2138:	sxtw	x2, w2
    213c:	orr	x3, x3, x2
    2140:	adds	x3, x3, #0x1
    2144:	str	x3, [x7]
    2148:	cset	w0, eq  // eq = none
    214c:	ldp	x29, x30, [sp], #16
    2150:	ret
    2154:	mov	x0, x1
    2158:	mov	x1, #0x0                   	// #0
    215c:	bl	1d28 <ffi_prep_java_raw_closure_loc@plt+0xe8>
    2160:	cbnz	w0, 2174 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0xf4>
    2164:	ldrh	w2, [x7, #8]
    2168:	ldr	x3, [x7]
    216c:	ldr	x1, [x9]
    2170:	b	20dc <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0x5c>
    2174:	mov	w0, #0x1                   	// #1
    2178:	ldp	x29, x30, [sp], #16
    217c:	ret
    2180:	ldr	x4, [x1]
    2184:	csel	w0, w2, w0, hi  // hi = pmore
    2188:	ldr	x1, [x9, #8]!
    218c:	add	x3, x3, x4
    2190:	str	x3, [x7]
    2194:	and	w2, w0, #0xffff
    2198:	strh	w0, [x7, #8]
    219c:	cbnz	x1, 20d4 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0x54>
    21a0:	b	2130 <ffi_get_struct_offsets@@LIBFFI_BASE_7.1+0xb0>
    21a4:	mov	x3, #0x0                   	// #0
    21a8:	str	x3, [x7]
    21ac:	ret

00000000000021b0 <ffi_raw_size@@LIBFFI_BASE_7.0>:
    21b0:	ldr	w1, [x0, #4]
    21b4:	ldr	x2, [x0, #8]
    21b8:	subs	w1, w1, #0x1
    21bc:	mov	x0, #0x0                   	// #0
    21c0:	b.mi	2200 <ffi_raw_size@@LIBFFI_BASE_7.0+0x50>  // b.first
    21c4:	nop
    21c8:	ldr	x3, [x2]
    21cc:	add	x5, x0, #0x1
    21d0:	add	x0, x0, #0x8
    21d4:	ldrh	w4, [x3, #10]
    21d8:	cmp	w4, #0xd
    21dc:	b.eq	21f0 <ffi_raw_size@@LIBFFI_BASE_7.0+0x40>  // b.none
    21e0:	ldr	x0, [x3]
    21e4:	sub	x0, x0, #0x1
    21e8:	orr	x0, x0, #0x7
    21ec:	add	x0, x0, x5
    21f0:	sub	w1, w1, #0x1
    21f4:	add	x2, x2, #0x8
    21f8:	cmn	w1, #0x1
    21fc:	b.ne	21c8 <ffi_raw_size@@LIBFFI_BASE_7.0+0x18>  // b.any
    2200:	ret
    2204:	nop

0000000000002208 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0>:
    2208:	ldr	w5, [x0, #4]
    220c:	ldr	x4, [x0, #8]
    2210:	cbz	w5, 2270 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x68>
    2214:	mov	x0, #0x0                   	// #0
    2218:	b	224c <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x44>
    221c:	cmp	w3, #0xf
    2220:	b.eq	225c <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x54>  // b.none
    2224:	str	x1, [x2, x0, lsl #3]
    2228:	ldr	x3, [x4, x0, lsl #3]
    222c:	add	x0, x0, #0x1
    2230:	cmp	w5, w0
    2234:	ldr	x3, [x3]
    2238:	sub	x3, x3, #0x1
    223c:	orr	x3, x3, #0x7
    2240:	add	x3, x3, #0x1
    2244:	add	x1, x1, x3
    2248:	b.ls	2270 <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x68>  // b.plast
    224c:	ldr	x3, [x4, x0, lsl #3]
    2250:	ldrh	w3, [x3, #10]
    2254:	cmp	w3, #0xd
    2258:	b.ne	221c <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x14>  // b.any
    225c:	ldr	x3, [x1], #8
    2260:	str	x3, [x2, x0, lsl #3]
    2264:	add	x0, x0, #0x1
    2268:	cmp	w5, w0
    226c:	b.hi	224c <ffi_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x44>  // b.pmore
    2270:	ret
    2274:	nop

0000000000002278 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0>:
    2278:	stp	x29, x30, [sp, #-48]!
    227c:	mov	x29, sp
    2280:	ldr	w5, [x0, #4]
    2284:	stp	x21, x22, [sp, #32]
    2288:	ldr	x21, [x0, #8]
    228c:	cbz	w5, 230c <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x94>
    2290:	mov	x22, x0
    2294:	mov	x4, x2
    2298:	stp	x19, x20, [sp, #16]
    229c:	mov	x20, x1
    22a0:	mov	x19, #0x0                   	// #0
    22a4:	b	22cc <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x54>
    22a8:	cmp	w3, #0x7
    22ac:	b.eq	2398 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x120>  // b.none
    22b0:	cmp	w3, #0x8
    22b4:	b.ne	2358 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xe0>  // b.any
    22b8:	ldrsh	x0, [x1]
    22bc:	str	x0, [x4], #8
    22c0:	add	x19, x19, #0x1
    22c4:	cmp	w5, w19
    22c8:	b.ls	2308 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x90>  // b.plast
    22cc:	ldr	x2, [x21, x19, lsl #3]
    22d0:	ldr	x1, [x20, x19, lsl #3]
    22d4:	ldrh	w3, [x2, #10]
    22d8:	cmp	w3, #0x9
    22dc:	b.eq	238c <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x114>  // b.none
    22e0:	b.ls	22a8 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x30>  // b.plast
    22e4:	cmp	w3, #0xe
    22e8:	b.eq	2380 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x108>  // b.none
    22ec:	b.ls	2318 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xa0>  // b.plast
    22f0:	cmp	w3, #0xf
    22f4:	b.ne	2328 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xb0>  // b.any
    22f8:	str	x1, [x4], #8
    22fc:	add	x19, x19, #0x1
    2300:	cmp	w5, w19
    2304:	b.hi	22cc <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x54>  // b.pmore
    2308:	ldp	x19, x20, [sp, #16]
    230c:	ldp	x21, x22, [sp, #32]
    2310:	ldp	x29, x30, [sp], #48
    2314:	ret
    2318:	cmp	w3, #0xa
    231c:	b.eq	23a4 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x12c>  // b.none
    2320:	cmp	w3, #0xd
    2324:	b.eq	22f8 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x80>  // b.none
    2328:	ldr	x2, [x2]
    232c:	mov	x0, x4
    2330:	bl	19b0 <memcpy@plt>
    2334:	mov	x4, x0
    2338:	ldr	x0, [x21, x19, lsl #3]
    233c:	ldr	w5, [x22, #4]
    2340:	ldr	x1, [x0]
    2344:	sub	x1, x1, #0x1
    2348:	orr	x1, x1, #0x7
    234c:	add	x1, x1, #0x1
    2350:	add	x4, x4, x1
    2354:	b	22c0 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x48>
    2358:	cmp	w3, #0x5
    235c:	b.eq	2374 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xfc>  // b.none
    2360:	cmp	w3, #0x6
    2364:	b.ne	2328 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xb0>  // b.any
    2368:	ldrsb	x0, [x1]
    236c:	str	x0, [x4], #8
    2370:	b	22c0 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x48>
    2374:	ldrb	w0, [x1]
    2378:	str	x0, [x4], #8
    237c:	b	22c0 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x48>
    2380:	ldr	x0, [x1]
    2384:	str	x0, [x4], #8
    2388:	b	22c0 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x48>
    238c:	ldr	w0, [x1]
    2390:	str	x0, [x4], #8
    2394:	b	22c0 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x48>
    2398:	ldrh	w0, [x1]
    239c:	str	x0, [x4], #8
    23a0:	b	22c0 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x48>
    23a4:	ldrsw	x0, [x1]
    23a8:	str	x0, [x4], #8
    23ac:	b	22c0 <ffi_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x48>
    23b0:	stp	x29, x30, [sp, #-48]!
    23b4:	mov	x29, sp
    23b8:	stp	x19, x20, [sp, #16]
    23bc:	mov	x20, x3
    23c0:	mov	x19, x0
    23c4:	stp	x21, x22, [sp, #32]
    23c8:	mov	x21, x1
    23cc:	mov	x22, x2
    23d0:	bl	1b40 <ffi_raw_size@plt>
    23d4:	add	x4, x0, #0xf
    23d8:	and	x2, x4, #0xfffffffffffffff0
    23dc:	mov	x1, x22
    23e0:	sub	sp, sp, x2
    23e4:	mov	x0, x19
    23e8:	mov	x22, sp
    23ec:	mov	x2, x22
    23f0:	bl	1b50 <ffi_ptrarray_to_raw@plt>
    23f4:	ldp	x4, x3, [x20, #48]
    23f8:	mov	x2, x22
    23fc:	mov	x1, x21
    2400:	mov	x0, x19
    2404:	blr	x4
    2408:	mov	sp, x29
    240c:	ldp	x19, x20, [sp, #16]
    2410:	ldp	x21, x22, [sp, #32]
    2414:	ldp	x29, x30, [sp], #48
    2418:	ret
    241c:	nop

0000000000002420 <ffi_raw_call@@LIBFFI_BASE_7.0>:
    2420:	stp	x29, x30, [sp, #-48]!
    2424:	mov	x29, sp
    2428:	stp	x19, x20, [sp, #16]
    242c:	mov	x20, x1
    2430:	mov	x1, x3
    2434:	ldr	w3, [x0, #4]
    2438:	mov	x19, x0
    243c:	stp	x21, x22, [sp, #32]
    2440:	mov	x21, x2
    2444:	lsl	x3, x3, #3
    2448:	add	x3, x3, #0xf
    244c:	and	x3, x3, #0xffffffff0
    2450:	sub	sp, sp, x3
    2454:	mov	x22, sp
    2458:	mov	x2, x22
    245c:	bl	1a60 <ffi_raw_to_ptrarray@plt>
    2460:	mov	x3, x22
    2464:	mov	x2, x21
    2468:	mov	x1, x20
    246c:	mov	x0, x19
    2470:	bl	1b90 <ffi_call@plt>
    2474:	mov	sp, x29
    2478:	ldp	x19, x20, [sp, #16]
    247c:	ldp	x21, x22, [sp, #32]
    2480:	ldp	x29, x30, [sp], #48
    2484:	ret

0000000000002488 <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0>:
    2488:	stp	x29, x30, [sp, #-48]!
    248c:	mov	x29, sp
    2490:	stp	x19, x20, [sp, #16]
    2494:	mov	x20, x3
    2498:	mov	x19, x0
    249c:	mov	x3, x4
    24a0:	str	x21, [sp, #32]
    24a4:	mov	x21, x2
    24a8:	adrp	x2, 2000 <ffi_prep_cif@@LIBFFI_BASE_7.0+0x58>
    24ac:	add	x2, x2, #0x3b0
    24b0:	bl	19c0 <ffi_prep_closure_loc@plt>
    24b4:	cbnz	w0, 24bc <ffi_prep_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x34>
    24b8:	stp	x21, x20, [x19, #48]
    24bc:	ldp	x19, x20, [sp, #16]
    24c0:	ldr	x21, [sp, #32]
    24c4:	ldp	x29, x30, [sp], #48
    24c8:	ret
    24cc:	nop

00000000000024d0 <ffi_prep_raw_closure@@LIBFFI_CLOSURE_7.0>:
    24d0:	mov	x4, x0
    24d4:	b	1a70 <ffi_prep_raw_closure_loc@plt>

00000000000024d8 <ffi_java_raw_size@@LIBFFI_BASE_7.0>:
    24d8:	ldr	w2, [x0, #4]
    24dc:	ldr	x3, [x0, #8]
    24e0:	subs	w2, w2, #0x1
    24e4:	mov	x0, #0x0                   	// #0
    24e8:	b.mi	253c <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x64>  // b.first
    24ec:	nop
    24f0:	ldr	x1, [x3]
    24f4:	ldrh	w1, [x1, #10]
    24f8:	cmp	w1, #0xc
    24fc:	b.hi	2528 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x50>  // b.pmore
    2500:	cmp	w1, #0xa
    2504:	b.hi	2510 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x38>  // b.pmore
    2508:	cmp	w1, #0x3
    250c:	b.ne	2534 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x5c>  // b.any
    2510:	add	x0, x0, #0x10
    2514:	sub	w2, w2, #0x1
    2518:	add	x3, x3, #0x8
    251c:	cmn	w2, #0x1
    2520:	b.ne	24f0 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x18>  // b.any
    2524:	ret
    2528:	and	w1, w1, #0xfffffffd
    252c:	cmp	w1, #0xd
    2530:	b.eq	2540 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x68>  // b.none
    2534:	add	x0, x0, #0x8
    2538:	b	2514 <ffi_java_raw_size@@LIBFFI_BASE_7.0+0x3c>
    253c:	ret
    2540:	stp	x29, x30, [sp, #-16]!
    2544:	mov	x29, sp
    2548:	bl	1ae0 <abort@plt>
    254c:	nop

0000000000002550 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0>:
    2550:	ldr	w4, [x0, #4]
    2554:	ldr	x5, [x0, #8]
    2558:	cbz	w4, 25ac <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x5c>
    255c:	mov	x0, #0x0                   	// #0
    2560:	b	2588 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x38>
    2564:	cmp	w3, #0xa
    2568:	b.hi	25b0 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x60>  // b.pmore
    256c:	cmp	w3, #0x3
    2570:	b.eq	25b0 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x60>  // b.none
    2574:	str	x1, [x2, x0, lsl #3]
    2578:	add	x1, x1, #0x8
    257c:	add	x0, x0, #0x1
    2580:	cmp	w4, w0
    2584:	b.ls	25ac <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x5c>  // b.plast
    2588:	ldr	x3, [x5, x0, lsl #3]
    258c:	ldrh	w3, [x3, #10]
    2590:	cmp	w3, #0xc
    2594:	b.ls	2564 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x14>  // b.plast
    2598:	cmp	w3, #0xf
    259c:	b.ne	2574 <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x24>  // b.any
    25a0:	stp	x29, x30, [sp, #-16]!
    25a4:	mov	x29, sp
    25a8:	bl	1ae0 <abort@plt>
    25ac:	ret
    25b0:	str	x1, [x2, x0, lsl #3]
    25b4:	add	x1, x1, #0x10
    25b8:	b	257c <ffi_java_raw_to_ptrarray@@LIBFFI_BASE_7.0+0x2c>
    25bc:	nop

00000000000025c0 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0>:
    25c0:	ldr	w4, [x0, #4]
    25c4:	ldr	x5, [x0, #8]
    25c8:	cbz	w4, 264c <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x8c>
    25cc:	mov	x3, #0x0                   	// #0
    25d0:	b	2604 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x44>
    25d4:	cmp	w0, #0x5
    25d8:	b.eq	26b8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xf8>  // b.none
    25dc:	b.ls	2650 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x90>  // b.plast
    25e0:	cmp	w0, #0x6
    25e4:	b.eq	2698 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xd8>  // b.none
    25e8:	ldr	x0, [x1, x3, lsl #3]
    25ec:	ldrh	w0, [x0]
    25f0:	str	x0, [x2], #8
    25f4:	nop
    25f8:	add	x3, x3, #0x1
    25fc:	cmp	w4, w3
    2600:	b.ls	264c <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x8c>  // b.plast
    2604:	ldr	x0, [x5, x3, lsl #3]
    2608:	ldrh	w0, [x0, #10]
    260c:	cmp	w0, #0x8
    2610:	b.eq	26a8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xe8>  // b.none
    2614:	b.ls	25d4 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x14>  // b.plast
    2618:	cmp	w0, #0xa
    261c:	b.eq	26c8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x108>  // b.none
    2620:	b.ls	2668 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xa8>  // b.plast
    2624:	cmp	w0, #0xc
    2628:	b.ls	2688 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xc8>  // b.plast
    262c:	cmp	w0, #0xe
    2630:	b.ne	25f8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>  // b.any
    2634:	ldr	x0, [x1, x3, lsl #3]
    2638:	add	x3, x3, #0x1
    263c:	cmp	w4, w3
    2640:	ldr	x0, [x0]
    2644:	str	x0, [x2], #8
    2648:	b.hi	2604 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x44>  // b.pmore
    264c:	ret
    2650:	cmp	w0, #0x2
    2654:	b.ne	2680 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0xc0>  // b.any
    2658:	ldr	x0, [x1, x3, lsl #3]
    265c:	ldr	s0, [x0]
    2660:	str	s0, [x2], #8
    2664:	b	25f8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    2668:	cmp	w0, #0x9
    266c:	b.ne	25f8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>  // b.any
    2670:	ldr	x0, [x1, x3, lsl #3]
    2674:	ldr	w0, [x0]
    2678:	str	x0, [x2], #8
    267c:	b	25f8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    2680:	cmp	w0, #0x3
    2684:	b.ne	25f8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>  // b.any
    2688:	ldr	x0, [x1, x3, lsl #3]
    268c:	ldr	x0, [x0]
    2690:	str	x0, [x2], #16
    2694:	b	25f8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    2698:	ldr	x0, [x1, x3, lsl #3]
    269c:	ldrsb	x0, [x0]
    26a0:	str	x0, [x2], #8
    26a4:	b	25f8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    26a8:	ldr	x0, [x1, x3, lsl #3]
    26ac:	ldrsh	x0, [x0]
    26b0:	str	x0, [x2], #8
    26b4:	b	25f8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    26b8:	ldr	x0, [x1, x3, lsl #3]
    26bc:	ldrb	w0, [x0]
    26c0:	str	x0, [x2], #8
    26c4:	b	25f8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    26c8:	ldr	x0, [x1, x3, lsl #3]
    26cc:	ldrsw	x0, [x0]
    26d0:	str	x0, [x2], #8
    26d4:	b	25f8 <ffi_java_ptrarray_to_raw@@LIBFFI_BASE_7.0+0x38>
    26d8:	stp	x29, x30, [sp, #-48]!
    26dc:	mov	x29, sp
    26e0:	stp	x19, x20, [sp, #16]
    26e4:	mov	x20, x3
    26e8:	mov	x19, x0
    26ec:	stp	x21, x22, [sp, #32]
    26f0:	mov	x21, x1
    26f4:	mov	x22, x2
    26f8:	bl	1b30 <ffi_java_raw_size@plt>
    26fc:	add	x4, x0, #0xf
    2700:	and	x2, x4, #0xfffffffffffffff0
    2704:	mov	x1, x22
    2708:	sub	sp, sp, x2
    270c:	mov	x0, x19
    2710:	mov	x22, sp
    2714:	mov	x2, x22
    2718:	bl	1bf0 <ffi_java_ptrarray_to_raw@plt>
    271c:	ldp	x4, x3, [x20, #48]
    2720:	mov	x2, x22
    2724:	mov	x1, x21
    2728:	mov	x0, x19
    272c:	blr	x4
    2730:	mov	sp, x29
    2734:	ldp	x19, x20, [sp, #16]
    2738:	ldp	x21, x22, [sp, #32]
    273c:	ldp	x29, x30, [sp], #48
    2740:	ret
    2744:	nop

0000000000002748 <ffi_java_raw_call@@LIBFFI_BASE_7.0>:
    2748:	stp	x29, x30, [sp, #-48]!
    274c:	mov	x29, sp
    2750:	stp	x19, x20, [sp, #16]
    2754:	mov	x20, x1
    2758:	mov	x1, x3
    275c:	ldr	w3, [x0, #4]
    2760:	mov	x19, x0
    2764:	stp	x21, x22, [sp, #32]
    2768:	mov	x21, x2
    276c:	lsl	x3, x3, #3
    2770:	add	x3, x3, #0xf
    2774:	and	x3, x3, #0xffffffff0
    2778:	sub	sp, sp, x3
    277c:	mov	x22, sp
    2780:	mov	x2, x22
    2784:	bl	19e0 <ffi_java_raw_to_ptrarray@plt>
    2788:	mov	x3, x22
    278c:	mov	x2, x21
    2790:	mov	x1, x20
    2794:	mov	x0, x19
    2798:	bl	1b90 <ffi_call@plt>
    279c:	mov	sp, x29
    27a0:	ldp	x19, x20, [sp, #16]
    27a4:	ldp	x21, x22, [sp, #32]
    27a8:	ldp	x29, x30, [sp], #48
    27ac:	ret

00000000000027b0 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0>:
    27b0:	stp	x29, x30, [sp, #-48]!
    27b4:	mov	x29, sp
    27b8:	stp	x19, x20, [sp, #16]
    27bc:	mov	x20, x3
    27c0:	mov	x19, x0
    27c4:	mov	x3, x4
    27c8:	str	x21, [sp, #32]
    27cc:	mov	x21, x2
    27d0:	adrp	x2, 2000 <ffi_prep_cif@@LIBFFI_BASE_7.0+0x58>
    27d4:	add	x2, x2, #0x6d8
    27d8:	bl	19c0 <ffi_prep_closure_loc@plt>
    27dc:	cbnz	w0, 27e4 <ffi_prep_java_raw_closure_loc@@LIBFFI_CLOSURE_7.0+0x34>
    27e0:	stp	x21, x20, [x19, #48]
    27e4:	ldp	x19, x20, [sp, #16]
    27e8:	ldr	x21, [sp, #32]
    27ec:	ldp	x29, x30, [sp], #48
    27f0:	ret
    27f4:	nop

00000000000027f8 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0>:
    27f8:	mov	x4, x0
    27fc:	b	1c40 <ffi_prep_java_raw_closure_loc@plt>
    2800:	stp	x29, x30, [sp, #-32]!
    2804:	mov	w1, #0x4082                	// #16514
    2808:	movk	w1, #0x48, lsl #16
    280c:	mov	x29, sp
    2810:	mov	w2, #0x1c0                 	// #448
    2814:	stp	x19, x20, [sp, #16]
    2818:	mov	x20, x0
    281c:	bl	1a30 <open@plt>
    2820:	mov	w19, w0
    2824:	cmn	w0, #0x1
    2828:	b.ne	2844 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x4c>  // b.any
    282c:	bl	1bd0 <__errno_location@plt>
    2830:	ldr	w1, [x0]
    2834:	cmp	w1, #0x5f
    2838:	sub	w1, w1, #0x15
    283c:	ccmp	w1, #0x1, #0x0, ne  // ne = any
    2840:	b.ls	2858 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x60>  // b.plast
    2844:	mov	sp, x29
    2848:	mov	w0, w19
    284c:	ldp	x19, x20, [sp, #16]
    2850:	ldp	x29, x30, [sp], #32
    2854:	ret
    2858:	str	wzr, [x0]
    285c:	mov	x0, x20
    2860:	bl	19d0 <strlen@plt>
    2864:	sxtw	x19, w0
    2868:	add	x0, x19, #0x1a
    286c:	mov	x1, x20
    2870:	and	x0, x0, #0xfffffffffffffff0
    2874:	mov	x2, x19
    2878:	sub	sp, sp, x0
    287c:	mov	x20, sp
    2880:	mov	x0, x20
    2884:	bl	19b0 <memcpy@plt>
    2888:	adrp	x2, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    288c:	add	x2, x2, #0x798
    2890:	add	x3, x20, x19
    2894:	mov	x0, x20
    2898:	mov	w1, #0x80000               	// #524288
    289c:	ldr	x4, [x2]
    28a0:	str	x4, [x20, x19]
    28a4:	ldur	w2, [x2, #7]
    28a8:	stur	w2, [x3, #7]
    28ac:	bl	1af0 <mkostemp@plt>
    28b0:	mov	w19, w0
    28b4:	cmn	w0, #0x1
    28b8:	b.eq	2844 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x4c>  // b.none
    28bc:	mov	x0, x20
    28c0:	bl	1c30 <unlink@plt>
    28c4:	mov	sp, x29
    28c8:	mov	w0, w19
    28cc:	ldp	x19, x20, [sp, #16]
    28d0:	ldp	x29, x30, [sp], #32
    28d4:	ret
    28d8:	stp	x29, x30, [sp, #-16]!
    28dc:	mov	x29, sp
    28e0:	bl	1be0 <getenv@plt>
    28e4:	cbz	x0, 28f0 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0xf8>
    28e8:	ldp	x29, x30, [sp], #16
    28ec:	b	2800 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x8>
    28f0:	mov	w0, #0xffffffff            	// #-1
    28f4:	ldp	x29, x30, [sp], #16
    28f8:	ret
    28fc:	nop
    2900:	stp	x29, x30, [sp, #-48]!
    2904:	adrp	x0, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    2908:	mov	w1, #0x7                   	// #7
    290c:	mov	x29, sp
    2910:	ldr	q0, [x0, #2112]
    2914:	stp	x19, x20, [sp, #16]
    2918:	adrp	x19, 18000 <memcpy@GLIBC_2.17>
    291c:	add	x20, x19, #0x1b0
    2920:	str	x21, [sp, #32]
    2924:	add	x0, x20, #0x30
    2928:	stur	q0, [x20, #24]
    292c:	str	w1, [x20, #40]
    2930:	bl	1c00 <pthread_mutex_lock@plt>
    2934:	ldr	x0, [x19, #432]
    2938:	cbz	x0, 2998 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x1a0>
    293c:	add	x21, x19, #0x1b0
    2940:	add	x0, x21, #0x30
    2944:	bl	1c20 <pthread_mutex_unlock@plt>
    2948:	mov	w0, #0x1e                  	// #30
    294c:	bl	1ba0 <sysconf@plt>
    2950:	mov	x20, x0
    2954:	mov	w0, #0x1e                  	// #30
    2958:	str	x20, [x21, #8]
    295c:	bl	1ba0 <sysconf@plt>
    2960:	mov	x2, x20
    2964:	cbnz	x0, 29bc <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x1c4>
    2968:	add	x19, x19, #0x1b0
    296c:	sub	x1, x2, #0x1
    2970:	sub	x0, x20, #0x1
    2974:	and	x1, x1, x2
    2978:	and	x20, x0, x20
    297c:	str	x2, [x19, #16]
    2980:	orr	x20, x1, x20
    2984:	cbnz	x20, 29cc <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x1d4>
    2988:	ldp	x19, x20, [sp, #16]
    298c:	ldr	x21, [sp, #32]
    2990:	ldp	x29, x30, [sp], #48
    2994:	ret
    2998:	mov	x0, #0x5858                	// #22616
    299c:	mov	x1, #0x0                   	// #0
    29a0:	movk	x0, #0x5858, lsl #16
    29a4:	str	x0, [x19, #432]
    29a8:	add	x0, x20, #0x3c8
    29ac:	bl	1aa0 <pthread_mutex_init@plt>
    29b0:	ldr	w0, [x20, #40]
    29b4:	str	w0, [x20, #960]
    29b8:	b	293c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x144>
    29bc:	mov	w0, #0x1e                  	// #30
    29c0:	bl	1ba0 <sysconf@plt>
    29c4:	mov	x2, x0
    29c8:	b	2968 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x170>
    29cc:	bl	1ae0 <abort@plt>
    29d0:	mov	x12, #0x3070                	// #12400
    29d4:	sub	sp, sp, x12
    29d8:	stp	x29, x30, [sp]
    29dc:	mov	x29, sp
    29e0:	stp	x23, x24, [sp, #48]
    29e4:	adrp	x24, 18000 <memcpy@GLIBC_2.17>
    29e8:	add	x0, x24, #0x1b0
    29ec:	stp	x21, x22, [sp, #32]
    29f0:	adrp	x23, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    29f4:	add	x22, sp, #0x70
    29f8:	ldr	x21, [x0, #1048]
    29fc:	add	x23, x23, #0x7b0
    2a00:	stp	x19, x20, [sp, #16]
    2a04:	adrp	x20, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    2a08:	add	x19, sp, #0x48
    2a0c:	add	x20, x20, #0x7a8
    2a10:	mov	x2, x22
    2a14:	mov	x1, x19
    2a18:	mov	x0, x21
    2a1c:	mov	w3, #0x3000                	// #12288
    2a20:	bl	1bb0 <getmntent_r@plt>
    2a24:	cbz	x0, 2a88 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x290>
    2a28:	mov	x1, x20
    2a2c:	mov	x0, x19
    2a30:	bl	1b60 <hasmntopt@plt>
    2a34:	cbnz	x0, 2a10 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x218>
    2a38:	mov	x1, x23
    2a3c:	mov	x0, x19
    2a40:	bl	1b60 <hasmntopt@plt>
    2a44:	cbnz	x0, 2a10 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x218>
    2a48:	ldr	x0, [sp, #80]
    2a4c:	mov	w1, #0x2                   	// #2
    2a50:	bl	1b00 <access@plt>
    2a54:	cbnz	w0, 2a10 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x218>
    2a58:	ldr	x0, [sp, #80]
    2a5c:	bl	2800 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x8>
    2a60:	cmn	w0, #0x1
    2a64:	add	x1, x24, #0x1b0
    2a68:	b.ne	2a8c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x294>  // b.any
    2a6c:	ldr	x21, [x1, #1048]
    2a70:	mov	x2, x22
    2a74:	mov	x1, x19
    2a78:	mov	w3, #0x3000                	// #12288
    2a7c:	mov	x0, x21
    2a80:	bl	1bb0 <getmntent_r@plt>
    2a84:	cbnz	x0, 2a28 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x230>
    2a88:	mov	w0, #0xffffffff            	// #-1
    2a8c:	mov	x12, #0x3070                	// #12400
    2a90:	ldp	x29, x30, [sp]
    2a94:	ldp	x19, x20, [sp, #16]
    2a98:	ldp	x21, x22, [sp, #32]
    2a9c:	ldp	x23, x24, [sp, #48]
    2aa0:	add	sp, sp, x12
    2aa4:	ret
    2aa8:	stp	x29, x30, [sp, #-32]!
    2aac:	mov	x29, sp
    2ab0:	stp	x19, x20, [sp, #16]
    2ab4:	adrp	x20, 18000 <memcpy@GLIBC_2.17>
    2ab8:	add	x1, x20, #0x1b0
    2abc:	mov	x19, x0
    2ac0:	ldr	x2, [x1, #1056]
    2ac4:	ldr	x0, [x1, #1048]
    2ac8:	cmp	x2, x19
    2acc:	b.eq	2af8 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x300>  // b.none
    2ad0:	cbz	x0, 2ad8 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x2e0>
    2ad4:	bl	1a90 <endmntent@plt>
    2ad8:	add	x20, x20, #0x1b0
    2adc:	str	x19, [x20, #1056]
    2ae0:	cbz	x19, 2b08 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x310>
    2ae4:	mov	x0, x19
    2ae8:	adrp	x1, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    2aec:	add	x1, x1, #0x7b8
    2af0:	bl	1a80 <setmntent@plt>
    2af4:	str	x0, [x20, #1048]
    2af8:	cbz	x0, 2b0c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x314>
    2afc:	ldp	x19, x20, [sp, #16]
    2b00:	ldp	x29, x30, [sp], #32
    2b04:	b	29d0 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x1d8>
    2b08:	str	xzr, [x20, #1048]
    2b0c:	mov	w0, #0xffffffff            	// #-1
    2b10:	ldp	x19, x20, [sp, #16]
    2b14:	ldp	x29, x30, [sp], #32
    2b18:	ret
    2b1c:	nop
    2b20:	stp	x29, x30, [sp, #-96]!
    2b24:	mov	x29, sp
    2b28:	stp	x23, x24, [sp, #48]
    2b2c:	adrp	x23, 18000 <memcpy@GLIBC_2.17>
    2b30:	stp	x19, x20, [sp, #16]
    2b34:	ldr	w19, [x23, #400]
    2b38:	stp	x21, x22, [sp, #32]
    2b3c:	mov	x21, x0
    2b40:	cmn	w19, #0x1
    2b44:	stp	x25, x26, [sp, #64]
    2b48:	adrp	x22, 18000 <memcpy@GLIBC_2.17>
    2b4c:	stp	x27, x28, [sp, #80]
    2b50:	b.ne	2ba4 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x3ac>  // b.any
    2b54:	add	x2, x22, #0x1b0
    2b58:	adrp	x0, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    2b5c:	adrp	x1, 2000 <ffi_prep_cif@@LIBFFI_BASE_7.0+0x58>
    2b60:	add	x0, x0, #0x7c0
    2b64:	add	x1, x1, #0x8d8
    2b68:	adrp	x20, 17000 <ffi_type_void@@LIBFFI_BASE_7.0+0x10880>
    2b6c:	str	wzr, [x2, #1064]
    2b70:	add	x20, x20, #0xd18
    2b74:	add	x24, x22, #0x1b0
    2b78:	blr	x1
    2b7c:	mov	w19, w0
    2b80:	ldr	w1, [x24, #1064]
    2b84:	cmn	w0, #0x1
    2b88:	sbfiz	x0, x1, #1, #32
    2b8c:	add	x0, x0, w1, sxtw
    2b90:	add	x2, x20, x0, lsl #3
    2b94:	ldr	w2, [x2, #16]
    2b98:	cbz	w2, 2c58 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x460>
    2b9c:	b.eq	2c48 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x450>  // b.none
    2ba0:	str	w19, [x23, #400]
    2ba4:	add	x27, x22, #0x1b0
    2ba8:	mov	x24, x21
    2bac:	mov	x26, sp
    2bb0:	ldr	x20, [x27, #1080]
    2bb4:	ldr	x25, [x27, #1072]
    2bb8:	cbz	x20, 2d7c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x584>
    2bbc:	add	x0, x20, #0xf
    2bc0:	mov	x2, x20
    2bc4:	and	x0, x0, #0xfffffffffffffff0
    2bc8:	mov	w1, #0x0                   	// #0
    2bcc:	sub	sp, sp, x0
    2bd0:	mov	x0, sp
    2bd4:	bl	1a50 <memset@plt>
    2bd8:	cmp	x21, #0x0
    2bdc:	mov	x28, sp
    2be0:	b.le	2c8c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x494>
    2be4:	add	x27, x22, #0x1b0
    2be8:	b	2bf8 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x400>
    2bec:	cmp	x24, #0x0
    2bf0:	b.le	2c88 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x490>
    2bf4:	ldr	x20, [x27, #1080]
    2bf8:	cmp	x24, x20
    2bfc:	csel	x20, x24, x20, ls  // ls = plast
    2c00:	mov	x1, x28
    2c04:	mov	w0, w19
    2c08:	mov	x2, x20
    2c0c:	sub	x24, x24, x20
    2c10:	bl	1ad0 <write@plt>
    2c14:	cmp	x20, x0
    2c18:	b.le	2bec <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x3f4>
    2c1c:	mov	sp, x26
    2c20:	mov	x20, #0xffffffffffffffff    	// #-1
    2c24:	mov	sp, x29
    2c28:	mov	x0, x20
    2c2c:	ldp	x19, x20, [sp, #16]
    2c30:	ldp	x21, x22, [sp, #32]
    2c34:	ldp	x23, x24, [sp, #48]
    2c38:	ldp	x25, x26, [sp, #64]
    2c3c:	ldp	x27, x28, [sp, #80]
    2c40:	ldp	x29, x30, [sp], #96
    2c44:	ret
    2c48:	ldr	x1, [x20, x0, lsl #3]
    2c4c:	mov	x0, #0x0                   	// #0
    2c50:	blr	x1
    2c54:	ldr	w1, [x24, #1064]
    2c58:	add	w1, w1, #0x1
    2c5c:	str	w1, [x24, #1064]
    2c60:	cmp	w1, #0x7
    2c64:	sbfiz	x0, x1, #1, #32
    2c68:	b.eq	2d50 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x558>  // b.none
    2c6c:	add	x1, x0, w1, sxtw
    2c70:	cmn	w19, #0x1
    2c74:	b.ne	2ba0 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x3a8>  // b.any
    2c78:	add	x0, x20, x1, lsl #3
    2c7c:	ldr	x1, [x20, x1, lsl #3]
    2c80:	ldr	x0, [x0, #8]
    2c84:	b	2b78 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x380>
    2c88:	ldr	w19, [x23, #400]
    2c8c:	mov	x5, x25
    2c90:	mov	w4, w19
    2c94:	mov	sp, x26
    2c98:	mov	x1, x21
    2c9c:	mov	w3, #0x1                   	// #1
    2ca0:	mov	w2, #0x5                   	// #5
    2ca4:	mov	x0, #0x0                   	// #0
    2ca8:	bl	1b10 <mmap@plt>
    2cac:	mov	x24, x0
    2cb0:	cmn	x0, #0x1
    2cb4:	b.eq	2d90 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x598>  // b.none
    2cb8:	cbnz	x25, 2d08 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x510>
    2cbc:	add	x20, x22, #0x1b0
    2cc0:	adrp	x1, 17000 <ffi_type_void@@LIBFFI_BASE_7.0+0x10880>
    2cc4:	add	x1, x1, #0xd18
    2cc8:	ldrsw	x0, [x20, #1064]
    2ccc:	add	x0, x0, x0, lsl #1
    2cd0:	lsl	x0, x0, #3
    2cd4:	add	x2, x1, x0
    2cd8:	ldr	w2, [x2, #16]
    2cdc:	cbz	w2, 2d08 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x510>
    2ce0:	ldr	x1, [x1, x0]
    2ce4:	mov	x0, #0x0                   	// #0
    2ce8:	blr	x1
    2cec:	ldr	w19, [x23, #400]
    2cf0:	ldr	w0, [x20, #1064]
    2cf4:	add	w0, w0, #0x1
    2cf8:	str	w0, [x20, #1064]
    2cfc:	cmp	w0, #0x7
    2d00:	b.eq	2dd8 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x5e0>  // b.none
    2d04:	nop
    2d08:	mov	x5, x25
    2d0c:	mov	w4, w19
    2d10:	mov	x1, x21
    2d14:	mov	w3, #0x1                   	// #1
    2d18:	mov	w2, #0x3                   	// #3
    2d1c:	mov	x0, #0x0                   	// #0
    2d20:	bl	1b10 <mmap@plt>
    2d24:	mov	x20, x0
    2d28:	cmn	x0, #0x1
    2d2c:	b.eq	2de0 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x5e8>  // b.none
    2d30:	add	x22, x22, #0x1b0
    2d34:	add	x1, x0, x21
    2d38:	sub	x24, x24, x0
    2d3c:	ldr	x0, [x22, #1072]
    2d40:	stur	x24, [x1, #-8]
    2d44:	add	x21, x0, x21
    2d48:	str	x21, [x22, #1072]
    2d4c:	b	2c24 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x42c>
    2d50:	str	w19, [x23, #400]
    2d54:	cmn	w19, #0x1
    2d58:	str	wzr, [x24, #1064]
    2d5c:	mov	x20, #0xffffffffffffffff    	// #-1
    2d60:	b.eq	2c24 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x42c>  // b.none
    2d64:	add	x27, x22, #0x1b0
    2d68:	mov	x24, x21
    2d6c:	mov	x26, sp
    2d70:	ldr	x20, [x27, #1080]
    2d74:	ldr	x25, [x27, #1072]
    2d78:	cbnz	x20, 2bbc <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x3c4>
    2d7c:	mov	w0, #0x1e                  	// #30
    2d80:	bl	1ba0 <sysconf@plt>
    2d84:	mov	x20, x0
    2d88:	str	x0, [x27, #1080]
    2d8c:	b	2bbc <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x3c4>
    2d90:	cbnz	x25, 2dc4 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x5cc>
    2d94:	mov	w0, w19
    2d98:	bl	1ab0 <close@plt>
    2d9c:	add	x0, x22, #0x1b0
    2da0:	adrp	x20, 17000 <ffi_type_void@@LIBFFI_BASE_7.0+0x10880>
    2da4:	add	x1, x20, #0xd18
    2da8:	ldrsw	x0, [x0, #1064]
    2dac:	add	x0, x0, x0, lsl #1
    2db0:	lsl	x0, x0, #3
    2db4:	add	x2, x1, x0
    2db8:	ldr	x1, [x1, x0]
    2dbc:	ldr	x0, [x2, #8]
    2dc0:	b	2b70 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x378>
    2dc4:	mov	x1, x25
    2dc8:	mov	w0, w19
    2dcc:	mov	x20, x24
    2dd0:	bl	1bc0 <ftruncate@plt>
    2dd4:	b	2c24 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x42c>
    2dd8:	str	wzr, [x20, #1064]
    2ddc:	b	2d08 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x510>
    2de0:	mov	x1, x21
    2de4:	mov	x0, x24
    2de8:	bl	1b80 <munmap@plt>
    2dec:	mov	x1, x25
    2df0:	mov	w0, w19
    2df4:	bl	1bc0 <ftruncate@plt>
    2df8:	b	2c24 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x42c>
    2dfc:	nop
    2e00:	stp	x29, x30, [sp, #-224]!
    2e04:	mov	x29, sp
    2e08:	stp	x21, x22, [sp, #32]
    2e0c:	adrp	x21, 18000 <memcpy@GLIBC_2.17>
    2e10:	stp	x19, x20, [sp, #16]
    2e14:	mov	x20, x0
    2e18:	ldr	w0, [x21, #400]
    2e1c:	cmn	w0, #0x1
    2e20:	b.eq	2e54 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x65c>  // b.none
    2e24:	adrp	x1, 18000 <memcpy@GLIBC_2.17>
    2e28:	add	x0, x1, #0x1b0
    2e2c:	ldr	x0, [x0, #1072]
    2e30:	cbz	x0, 2e6c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x674>
    2e34:	mov	x0, x20
    2e38:	bl	2b20 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x328>
    2e3c:	mov	x19, x0
    2e40:	mov	x0, x19
    2e44:	ldp	x19, x20, [sp, #16]
    2e48:	ldp	x21, x22, [sp, #32]
    2e4c:	ldp	x29, x30, [sp], #224
    2e50:	ret
    2e54:	add	x19, x21, #0x190
    2e58:	ldr	w0, [x19, #4]
    2e5c:	cmp	w0, #0x0
    2e60:	b.lt	2ea8 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x6b0>  // b.tstop
    2e64:	b.eq	2f7c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x784>  // b.none
    2e68:	adrp	x1, 18000 <memcpy@GLIBC_2.17>
    2e6c:	add	x1, x1, #0x1b0
    2e70:	add	x19, x1, #0x440
    2e74:	mov	x0, x19
    2e78:	bl	1c00 <pthread_mutex_lock@plt>
    2e7c:	mov	x0, x20
    2e80:	bl	2b20 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x328>
    2e84:	mov	x1, x0
    2e88:	mov	x0, x19
    2e8c:	mov	x19, x1
    2e90:	bl	1c20 <pthread_mutex_unlock@plt>
    2e94:	mov	x0, x19
    2e98:	ldp	x19, x20, [sp, #16]
    2e9c:	ldp	x21, x22, [sp, #32]
    2ea0:	ldp	x29, x30, [sp], #224
    2ea4:	ret
    2ea8:	adrp	x0, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    2eac:	add	x1, sp, #0x68
    2eb0:	add	x0, x0, #0x7c8
    2eb4:	stp	xzr, xzr, [sp, #88]
    2eb8:	bl	1a00 <statfs@plt>
    2ebc:	tbnz	w0, #31, 2ed4 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x6dc>
    2ec0:	ldr	x1, [sp, #104]
    2ec4:	mov	w0, #0xff8c                	// #65420
    2ec8:	movk	w0, #0xf97c, lsl #16
    2ecc:	cmp	w1, w0
    2ed0:	b.eq	3000 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x808>  // b.none
    2ed4:	adrp	x1, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    2ed8:	adrp	x0, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    2edc:	add	x1, x1, #0x7b8
    2ee0:	add	x0, x0, #0x7d8
    2ee4:	bl	1a20 <fopen@plt>
    2ee8:	mov	x22, x0
    2eec:	cbz	x0, 3010 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x818>
    2ef0:	stp	x23, x24, [sp, #48]
    2ef4:	adrp	x23, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    2ef8:	add	x24, sp, #0x58
    2efc:	add	x23, x23, #0x7e8
    2f00:	str	x25, [sp, #64]
    2f04:	add	x25, sp, #0x60
    2f08:	b	2f3c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x744>
    2f0c:	mov	x0, x19
    2f10:	bl	1b70 <strchr@plt>
    2f14:	mov	w1, #0x20                  	// #32
    2f18:	cbz	x0, 2f5c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x764>
    2f1c:	add	x0, x0, #0x1
    2f20:	bl	1b70 <strchr@plt>
    2f24:	mov	x1, x23
    2f28:	cbz	x0, 2f5c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x764>
    2f2c:	add	x0, x0, #0x1
    2f30:	mov	x2, #0xa                   	// #10
    2f34:	bl	1a40 <strncmp@plt>
    2f38:	cbz	w0, 2fd8 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x7e0>
    2f3c:	mov	x1, x25
    2f40:	mov	x3, x22
    2f44:	mov	x0, x24
    2f48:	mov	w2, #0xa                   	// #10
    2f4c:	bl	1c10 <__getdelim@plt>
    2f50:	mov	w1, #0x20                  	// #32
    2f54:	ldr	x19, [sp, #88]
    2f58:	tbz	x0, #63, 2f0c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x714>
    2f5c:	mov	x0, x19
    2f60:	bl	1b20 <free@plt>
    2f64:	mov	x0, x22
    2f68:	bl	1a10 <fclose@plt>
    2f6c:	add	x0, x21, #0x190
    2f70:	ldp	x23, x24, [sp, #48]
    2f74:	ldr	x25, [sp, #64]
    2f78:	str	wzr, [x0, #4]
    2f7c:	mov	x1, x20
    2f80:	mov	x5, #0x0                   	// #0
    2f84:	mov	w4, #0xffffffff            	// #-1
    2f88:	mov	w3, #0x22                  	// #34
    2f8c:	mov	w2, #0x7                   	// #7
    2f90:	mov	x0, #0x0                   	// #0
    2f94:	bl	1b10 <mmap@plt>
    2f98:	mov	x19, x0
    2f9c:	cmn	x0, #0x1
    2fa0:	b.ne	2e40 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x648>  // b.any
    2fa4:	bl	1bd0 <__errno_location@plt>
    2fa8:	ldr	w0, [x0]
    2fac:	cmp	w0, #0x1
    2fb0:	ccmp	w0, #0xd, #0x4, ne  // ne = any
    2fb4:	b.ne	2e40 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x648>  // b.any
    2fb8:	adrp	x1, 18000 <memcpy@GLIBC_2.17>
    2fbc:	add	x0, x1, #0x1b0
    2fc0:	ldr	x0, [x0, #1072]
    2fc4:	cbz	x0, 2e6c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x674>
    2fc8:	ldr	w0, [x21, #400]
    2fcc:	cmn	w0, #0x1
    2fd0:	b.eq	2e6c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x674>  // b.none
    2fd4:	b	2e34 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x63c>
    2fd8:	mov	x0, x19
    2fdc:	bl	1b20 <free@plt>
    2fe0:	mov	x0, x22
    2fe4:	bl	1a10 <fclose@plt>
    2fe8:	add	x0, x21, #0x190
    2fec:	mov	w1, #0x1                   	// #1
    2ff0:	ldp	x23, x24, [sp, #48]
    2ff4:	ldr	x25, [sp, #64]
    2ff8:	str	w1, [x0, #4]
    2ffc:	b	2fb8 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x7c0>
    3000:	mov	w0, #0x1                   	// #1
    3004:	adrp	x1, 18000 <memcpy@GLIBC_2.17>
    3008:	str	w0, [x19, #4]
    300c:	b	2e6c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x674>
    3010:	add	x0, x21, #0x190
    3014:	str	wzr, [x0, #4]
    3018:	b	2f7c <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x784>
    301c:	nop

0000000000003020 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0>:
    3020:	stp	x29, x30, [sp, #-64]!
    3024:	mov	x29, sp
    3028:	stp	x19, x20, [sp, #16]
    302c:	cbz	x1, 3280 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x260>
    3030:	mov	x20, x0
    3034:	adrp	x19, 18000 <memcpy@GLIBC_2.17>
    3038:	add	x0, x19, #0x1b0
    303c:	stp	x21, x22, [sp, #32]
    3040:	mov	x22, x1
    3044:	ldr	x0, [x0, #8]
    3048:	cbz	x0, 3294 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x274>
    304c:	add	x0, x19, #0x1b0
    3050:	ldr	w1, [x0, #960]
    3054:	tbnz	w1, #1, 3270 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x250>
    3058:	cmp	x20, #0xf0
    305c:	b.hi	329c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x27c>  // b.pmore
    3060:	cmp	x20, #0x16
    3064:	b.hi	3140 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x120>  // b.pmore
    3068:	add	x4, x19, #0x1b0
    306c:	mov	w1, #0x4                   	// #4
    3070:	add	x5, x4, #0x60
    3074:	mov	x20, #0x4                   	// #4
    3078:	mov	x21, #0x20                  	// #32
    307c:	ldr	w3, [x4, #96]
    3080:	lsr	w0, w3, w1
    3084:	tst	x0, #0x3
    3088:	b.eq	3168 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x148>  // b.none
    308c:	mvn	w0, w0
    3090:	and	x0, x0, #0x1
    3094:	add	x20, x0, x20
    3098:	add	x0, x5, x20, lsl #4
    309c:	add	x0, x0, #0x40
    30a0:	ldr	x1, [x0, #16]
    30a4:	ldr	x2, [x1, #16]
    30a8:	cmp	x0, x2
    30ac:	b.eq	33c4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x3a4>  // b.none
    30b0:	ldr	x3, [x5, #24]
    30b4:	cmp	x2, x3
    30b8:	b.cc	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.lo, b.ul, b.last
    30bc:	str	x2, [x0, #16]
    30c0:	str	x0, [x2, #24]
    30c4:	lsl	x0, x20, #3
    30c8:	add	x20, x1, #0x10
    30cc:	add	x2, x1, x0
    30d0:	orr	x0, x0, #0x3
    30d4:	str	x0, [x1, #8]
    30d8:	ldr	x0, [x2, #8]
    30dc:	orr	x0, x0, #0x1
    30e0:	str	x0, [x2, #8]
    30e4:	add	x0, x19, #0x1b0
    30e8:	ldr	w1, [x0, #960]
    30ec:	tbnz	w1, #1, 3264 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x244>
    30f0:	add	x0, x19, #0x1b0
    30f4:	add	x0, x0, #0x3f8
    30f8:	b	3104 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe4>
    30fc:	ldr	x0, [x0, #16]
    3100:	cbz	x0, 46b0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1690>
    3104:	ldr	x2, [x0]
    3108:	cmp	x2, x20
    310c:	b.hi	30fc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xdc>  // b.pmore
    3110:	ldr	x3, [x0, #8]
    3114:	add	x2, x2, x3
    3118:	cmp	x20, x2
    311c:	b.cs	30fc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xdc>  // b.hs, b.nlast
    3120:	ldr	x0, [x0, #24]
    3124:	add	x0, x20, x0
    3128:	str	x0, [x22]
    312c:	mov	x0, x20
    3130:	ldp	x19, x20, [sp, #16]
    3134:	ldp	x21, x22, [sp, #32]
    3138:	ldp	x29, x30, [sp], #64
    313c:	ret
    3140:	add	x4, x19, #0x1b0
    3144:	add	x20, x20, #0xf
    3148:	and	x21, x20, #0xfffffffffffffff8
    314c:	add	x5, x4, #0x60
    3150:	lsr	x20, x20, #3
    3154:	ldr	w3, [x4, #96]
    3158:	mov	w1, w20
    315c:	lsr	w0, w3, w1
    3160:	tst	x0, #0x3
    3164:	b.ne	308c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6c>  // b.any
    3168:	ldr	x2, [x5, #8]
    316c:	cmp	x21, x2
    3170:	b.ls	3380 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x360>  // b.plast
    3174:	cbz	w0, 33d8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x3b8>
    3178:	mov	w7, #0x1                   	// #1
    317c:	lsl	w0, w0, w1
    3180:	lsl	w1, w7, w1
    3184:	neg	w6, w1, lsl #1
    3188:	orr	w1, w6, w1, lsl #1
    318c:	and	w0, w1, w0
    3190:	neg	w1, w0
    3194:	ands	w0, w1, w0
    3198:	rbit	w0, w0
    319c:	clz	w0, w0
    31a0:	csinv	w0, w0, wzr, ne  // ne = any
    31a4:	add	x1, x5, w0, sxtw #4
    31a8:	sxtw	x8, w0
    31ac:	add	x1, x1, #0x40
    31b0:	ldr	x20, [x1, #16]
    31b4:	ldr	x6, [x20, #16]
    31b8:	cmp	x1, x6
    31bc:	b.eq	3cd4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xcb4>  // b.none
    31c0:	ldr	x0, [x5, #24]
    31c4:	cmp	x6, x0
    31c8:	b.cc	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.lo, b.ul, b.last
    31cc:	str	x6, [x1, #16]
    31d0:	str	x1, [x6, #24]
    31d4:	lsl	x1, x8, #3
    31d8:	sub	x0, x1, x21
    31dc:	add	x4, x20, x1
    31e0:	cmp	x0, #0x1f
    31e4:	b.ls	3dc0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xda0>  // b.plast
    31e8:	add	x5, x20, x21
    31ec:	orr	x21, x21, #0x3
    31f0:	str	x21, [x20, #8]
    31f4:	orr	x1, x0, #0x1
    31f8:	str	x1, [x5, #8]
    31fc:	str	x0, [x20, x8, lsl #3]
    3200:	cbz	x2, 3248 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x228>
    3204:	add	x7, x19, #0x1b0
    3208:	lsr	x4, x2, #3
    320c:	add	x6, x7, #0x60
    3210:	mov	w2, #0x1                   	// #1
    3214:	add	x1, x6, x4, lsl #4
    3218:	lsl	w2, w2, w4
    321c:	add	x1, x1, #0x40
    3220:	tst	w2, w3
    3224:	ldr	x4, [x6, #32]
    3228:	b.eq	3570 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x550>  // b.none
    322c:	ldr	x3, [x1, #16]
    3230:	ldr	x2, [x6, #24]
    3234:	cmp	x3, x2
    3238:	b.cc	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.lo, b.ul, b.last
    323c:	str	x4, [x1, #16]
    3240:	str	x4, [x3, #24]
    3244:	stp	x3, x1, [x4, #16]
    3248:	add	x1, x19, #0x1b0
    324c:	add	x20, x20, #0x10
    3250:	str	x0, [x1, #104]
    3254:	str	x5, [x1, #128]
    3258:	add	x0, x19, #0x1b0
    325c:	ldr	w1, [x0, #960]
    3260:	tbz	w1, #1, 30f0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd0>
    3264:	add	x0, x0, #0x3c8
    3268:	bl	1c20 <pthread_mutex_unlock@plt>
    326c:	b	30f0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd0>
    3270:	add	x0, x0, #0x3c8
    3274:	bl	1c00 <pthread_mutex_lock@plt>
    3278:	cbz	w0, 3058 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x38>
    327c:	ldp	x21, x22, [sp, #32]
    3280:	mov	x20, #0x0                   	// #0
    3284:	mov	x0, x20
    3288:	ldp	x19, x20, [sp, #16]
    328c:	ldp	x29, x30, [sp], #64
    3290:	ret
    3294:	bl	2900 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x108>
    3298:	b	304c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2c>
    329c:	add	x0, x19, #0x1b0
    32a0:	cmn	x20, #0x81
    32a4:	add	x0, x0, #0x60
    32a8:	ldr	x2, [x0, #8]
    32ac:	b.ls	3328 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x308>  // b.plast
    32b0:	cmn	x2, #0x1
    32b4:	mov	x21, #0xffffffffffffffff    	// #-1
    32b8:	b.eq	362c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x60c>  // b.none
    32bc:	add	x0, x19, #0x1b0
    32c0:	ldr	x0, [x0, #8]
    32c4:	cbz	x0, 3850 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x830>
    32c8:	add	x20, x19, #0x1b0
    32cc:	ldr	w2, [x20, #960]
    32d0:	ldr	x0, [x20, #16]
    32d4:	neg	x1, x0
    32d8:	tbz	w2, #0, 32e8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2c8>
    32dc:	ldr	x2, [x20, #24]
    32e0:	cmp	x2, x21
    32e4:	b.ls	3580 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x560>  // b.plast
    32e8:	add	x20, x21, #0x49
    32ec:	add	x20, x20, x0
    32f0:	and	x20, x20, x1
    32f4:	cmp	x20, x21
    32f8:	b.hi	3858 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x838>  // b.pmore
    32fc:	bl	1bd0 <__errno_location@plt>
    3300:	add	x19, x19, #0x1b0
    3304:	mov	w1, #0xc                   	// #12
    3308:	str	w1, [x0]
    330c:	ldr	w0, [x19, #960]
    3310:	tbz	w0, #1, 327c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x25c>
    3314:	add	x0, x19, #0x3c8
    3318:	mov	x20, #0x0                   	// #0
    331c:	bl	1c20 <pthread_mutex_unlock@plt>
    3320:	ldp	x21, x22, [sp, #32]
    3324:	b	3284 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x264>
    3328:	ldr	w8, [x0, #4]
    332c:	add	x20, x20, #0xf
    3330:	and	x21, x20, #0xfffffffffffffff8
    3334:	cbnz	w8, 3658 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x638>
    3338:	cmp	x21, x2
    333c:	b.ls	3380 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x360>  // b.plast
    3340:	add	x1, x19, #0x1b0
    3344:	add	x1, x1, #0x60
    3348:	ldr	x0, [x1, #16]
    334c:	cmp	x21, x0
    3350:	b.cs	32bc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x29c>  // b.hs, b.nlast
    3354:	ldr	x2, [x1, #40]
    3358:	sub	x0, x0, x21
    335c:	str	x0, [x1, #16]
    3360:	orr	x0, x0, #0x1
    3364:	add	x3, x2, x21
    3368:	str	x3, [x1, #40]
    336c:	orr	x21, x21, #0x3
    3370:	add	x20, x2, #0x10
    3374:	str	x0, [x3, #8]
    3378:	str	x21, [x2, #8]
    337c:	b	30e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc4>
    3380:	add	x0, x19, #0x1b0
    3384:	sub	x1, x2, x21
    3388:	cmp	x1, #0x1f
    338c:	add	x0, x0, #0x60
    3390:	ldr	x20, [x0, #32]
    3394:	add	x3, x20, x2
    3398:	b.ls	3ee8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xec8>  // b.plast
    339c:	add	x3, x20, x21
    33a0:	str	x1, [x0, #8]
    33a4:	str	x3, [x0, #32]
    33a8:	orr	x0, x1, #0x1
    33ac:	orr	x21, x21, #0x3
    33b0:	str	x0, [x3, #8]
    33b4:	str	x1, [x20, x2]
    33b8:	add	x20, x20, #0x10
    33bc:	stur	x21, [x20, #-8]
    33c0:	b	3258 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x238>
    33c4:	mov	w0, #0x1                   	// #1
    33c8:	lsl	w0, w0, w20
    33cc:	bic	w0, w3, w0
    33d0:	str	w0, [x4, #96]
    33d4:	b	30c4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa4>
    33d8:	ldr	w10, [x5, #4]
    33dc:	cbz	w10, 3340 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x320>
    33e0:	neg	w0, w10
    33e4:	ands	w0, w0, w10
    33e8:	rbit	w0, w0
    33ec:	clz	w0, w0
    33f0:	csinv	w0, w0, wzr, ne  // ne = any
    33f4:	add	x5, x5, w0, sxtw #3
    33f8:	ldr	x5, [x5, #592]
    33fc:	mov	x9, x5
    3400:	ldr	x4, [x5, #8]
    3404:	and	x4, x4, #0xfffffffffffffffc
    3408:	sub	x4, x4, x21
    340c:	b	3430 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x410>
    3410:	ldr	x1, [x0, #8]
    3414:	mov	x5, x0
    3418:	and	x1, x1, #0xfffffffffffffffc
    341c:	sub	x1, x1, x21
    3420:	cmp	x1, x4
    3424:	csel	x6, x4, x1, cs  // cs = hs, nlast
    3428:	csel	x9, x9, x0, cs  // cs = hs, nlast
    342c:	mov	x4, x6
    3430:	ldr	x0, [x5, #32]
    3434:	cbnz	x0, 3410 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x3f0>
    3438:	ldr	x0, [x5, #40]
    343c:	cbnz	x0, 3410 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x3f0>
    3440:	add	x5, x19, #0x1b0
    3444:	add	x5, x5, #0x60
    3448:	ldr	x7, [x5, #24]
    344c:	cmp	x7, x9
    3450:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    3454:	add	x11, x9, x21
    3458:	cmp	x11, x9
    345c:	b.ls	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.plast
    3460:	ldr	x1, [x9, #24]
    3464:	ldr	x8, [x9, #48]
    3468:	cmp	x1, x9
    346c:	b.eq	41bc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x119c>  // b.none
    3470:	ldr	x0, [x9, #16]
    3474:	cmp	x7, x0
    3478:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    347c:	str	x1, [x0, #24]
    3480:	str	x0, [x1, #16]
    3484:	cbz	x8, 34fc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4dc>
    3488:	ldr	x5, [x9, #56]
    348c:	add	x0, x19, #0x1b0
    3490:	add	x0, x0, #0x60
    3494:	add	x5, x5, #0x4a
    3498:	ldr	x6, [x0, x5, lsl #3]
    349c:	cmp	x6, x9
    34a0:	b.eq	4284 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1264>  // b.none
    34a4:	cmp	x7, x8
    34a8:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    34ac:	ldr	x0, [x8, #32]
    34b0:	cmp	x0, x9
    34b4:	b.eq	428c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x126c>  // b.none
    34b8:	str	x1, [x8, #40]
    34bc:	cbz	x1, 34fc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4dc>
    34c0:	cmp	x7, x1
    34c4:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    34c8:	ldr	x0, [x9, #32]
    34cc:	str	x8, [x1, #48]
    34d0:	cbz	x0, 34e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4c4>
    34d4:	cmp	x7, x0
    34d8:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    34dc:	str	x0, [x1, #32]
    34e0:	str	x1, [x0, #48]
    34e4:	ldr	x0, [x9, #40]
    34e8:	cbz	x0, 34fc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4dc>
    34ec:	cmp	x7, x0
    34f0:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    34f4:	str	x0, [x1, #40]
    34f8:	str	x1, [x0, #48]
    34fc:	cmp	x4, #0x1f
    3500:	b.ls	4198 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1178>  // b.plast
    3504:	orr	x20, x21, #0x3
    3508:	str	x20, [x9, #8]
    350c:	orr	x0, x4, #0x1
    3510:	str	x0, [x11, #8]
    3514:	str	x4, [x11, x4]
    3518:	cbz	x2, 355c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x53c>
    351c:	lsr	x2, x2, #3
    3520:	add	x5, x19, #0x1b0
    3524:	add	x6, x5, #0x60
    3528:	mov	w0, #0x1                   	// #1
    352c:	add	x1, x6, x2, lsl #4
    3530:	lsl	w0, w0, w2
    3534:	add	x1, x1, #0x40
    3538:	tst	w3, w0
    353c:	ldr	x2, [x5, #128]
    3540:	b.ne	4240 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1220>  // b.any
    3544:	orr	w0, w3, w0
    3548:	mov	x3, x1
    354c:	str	w0, [x5, #96]
    3550:	str	x2, [x1, #16]
    3554:	str	x2, [x3, #24]
    3558:	stp	x3, x1, [x2, #16]
    355c:	add	x0, x19, #0x1b0
    3560:	add	x20, x9, #0x10
    3564:	str	x4, [x0, #104]
    3568:	str	x11, [x0, #128]
    356c:	b	30e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc4>
    3570:	orr	w2, w2, w3
    3574:	mov	x3, x1
    3578:	str	w2, [x7, #96]
    357c:	b	323c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x21c>
    3580:	str	x23, [sp, #48]
    3584:	add	x23, x0, #0x37
    3588:	add	x23, x23, x21
    358c:	and	x23, x23, x1
    3590:	cmp	x23, x21
    3594:	b.ls	4150 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1130>  // b.plast
    3598:	mov	x0, x23
    359c:	bl	2e00 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x608>
    35a0:	cmn	x0, #0x1
    35a4:	b.eq	4294 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1274>  // b.none
    35a8:	tst	x0, #0x7
    35ac:	add	x20, x0, #0x10
    35b0:	b.eq	4274 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1254>  // b.none
    35b4:	neg	x1, x20
    35b8:	and	x1, x1, #0x7
    35bc:	add	x4, x0, x1
    35c0:	sub	x2, x23, x1
    35c4:	add	x20, x4, #0x10
    35c8:	orr	x1, x1, #0x1
    35cc:	adrp	x6, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    35d0:	add	x3, x19, #0x1b0
    35d4:	sub	x2, x2, #0x20
    35d8:	add	x3, x3, #0x60
    35dc:	ldr	q0, [x6, #2128]
    35e0:	add	x5, x4, x2
    35e4:	orr	x2, x2, #0x2
    35e8:	stp	x1, x2, [x4]
    35ec:	ldr	x1, [x3, #24]
    35f0:	stur	q0, [x5, #8]
    35f4:	cmp	x0, x1
    35f8:	b.cs	3600 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5e0>  // b.hs, b.nlast
    35fc:	str	x0, [x3, #24]
    3600:	add	x0, x19, #0x1b0
    3604:	add	x0, x0, #0x60
    3608:	ldr	x2, [x0, #848]
    360c:	ldr	x1, [x0, #856]
    3610:	add	x23, x23, x2
    3614:	str	x23, [x0, #848]
    3618:	cmp	x23, x1
    361c:	b.ls	4264 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1244>  // b.plast
    3620:	str	x23, [x0, #856]
    3624:	ldr	x23, [sp, #48]
    3628:	b	30e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc4>
    362c:	ldr	x20, [x0, #32]
    3630:	sub	x3, x20, #0x1
    3634:	add	x0, x19, #0x1b0
    3638:	add	x20, x20, #0x10
    363c:	str	xzr, [x0, #104]
    3640:	str	xzr, [x0, #128]
    3644:	stur	x2, [x20, #-8]
    3648:	ldr	x0, [x3, #8]
    364c:	orr	x0, x0, #0x1
    3650:	str	x0, [x3, #8]
    3654:	b	3258 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x238>
    3658:	mov	x1, #0xffff                	// #65535
    365c:	neg	x7, x21
    3660:	cmp	x1, x21, lsr #8
    3664:	lsr	x1, x21, #8
    3668:	b.cs	3f8c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf6c>  // b.hs, b.nlast
    366c:	ldr	x1, [x0, #840]
    3670:	mov	x4, x21
    3674:	mov	x9, #0x1f                  	// #31
    3678:	cbz	x1, 3338 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x318>
    367c:	mov	x5, #0x0                   	// #0
    3680:	mov	x20, #0x0                   	// #0
    3684:	b	368c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x66c>
    3688:	lsl	x4, x4, #1
    368c:	ldr	x0, [x1, #8]
    3690:	and	x0, x0, #0xfffffffffffffffc
    3694:	sub	x6, x0, x21
    3698:	cmp	x6, x7
    369c:	b.cs	36ac <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x68c>  // b.hs, b.nlast
    36a0:	cbz	x6, 4024 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1004>
    36a4:	mov	x7, x6
    36a8:	mov	x20, x1
    36ac:	lsr	x3, x4, #63
    36b0:	add	x3, x3, #0x4
    36b4:	ldr	x0, [x1, #40]
    36b8:	ldr	x1, [x1, x3, lsl #3]
    36bc:	cmp	x0, #0x0
    36c0:	ccmp	x0, x1, #0x4, ne  // ne = any
    36c4:	csel	x5, x5, x0, eq  // eq = none
    36c8:	cbnz	x1, 3688 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x668>
    36cc:	orr	x0, x20, x5
    36d0:	cbz	x0, 3ea0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe80>
    36d4:	cbz	x5, 4304 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x12e4>
    36d8:	ldr	x0, [x5, #8]
    36dc:	mov	x6, x7
    36e0:	mov	x1, x5
    36e4:	and	x0, x0, #0xfffffffffffffffc
    36e8:	b	36f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6d8>
    36ec:	ldr	x0, [x3, #8]
    36f0:	mov	x1, x3
    36f4:	and	x0, x0, #0xfffffffffffffffc
    36f8:	ldr	x3, [x1, #32]
    36fc:	sub	x0, x0, x21
    3700:	cmp	x6, x0
    3704:	csel	x4, x6, x0, ls  // ls = plast
    3708:	csel	x20, x20, x1, ls  // ls = plast
    370c:	mov	x6, x4
    3710:	cbnz	x3, 36ec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6cc>
    3714:	ldr	x3, [x1, #40]
    3718:	cbnz	x3, 36ec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6cc>
    371c:	cbz	x20, 3338 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x318>
    3720:	sub	x0, x2, x21
    3724:	cmp	x0, x6
    3728:	b.ls	3338 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x318>  // b.plast
    372c:	add	x1, x19, #0x1b0
    3730:	add	x1, x1, #0x60
    3734:	ldr	x5, [x1, #24]
    3738:	cmp	x20, x5
    373c:	b.cc	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.lo, b.ul, b.last
    3740:	add	x4, x20, x21
    3744:	cmp	x20, x4
    3748:	b.cs	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.hs, b.nlast
    374c:	ldr	x2, [x20, #24]
    3750:	ldr	x7, [x20, #48]
    3754:	cmp	x20, x2
    3758:	b.eq	4158 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1138>  // b.none
    375c:	ldr	x0, [x20, #16]
    3760:	cmp	x5, x0
    3764:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    3768:	str	x2, [x0, #24]
    376c:	str	x0, [x2, #16]
    3770:	cbz	x7, 37e8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x7c8>
    3774:	ldr	x1, [x20, #56]
    3778:	add	x0, x19, #0x1b0
    377c:	add	x0, x0, #0x60
    3780:	add	x1, x1, #0x4a
    3784:	ldr	x3, [x0, x1, lsl #3]
    3788:	cmp	x20, x3
    378c:	b.eq	41f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11d8>  // b.none
    3790:	cmp	x5, x7
    3794:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    3798:	ldr	x0, [x7, #32]
    379c:	cmp	x20, x0
    37a0:	b.eq	426c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x124c>  // b.none
    37a4:	str	x2, [x7, #40]
    37a8:	cbz	x2, 37e8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x7c8>
    37ac:	cmp	x5, x2
    37b0:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    37b4:	ldr	x0, [x20, #32]
    37b8:	str	x7, [x2, #48]
    37bc:	cbz	x0, 37d0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x7b0>
    37c0:	cmp	x5, x0
    37c4:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    37c8:	str	x0, [x2, #32]
    37cc:	str	x2, [x0, #48]
    37d0:	ldr	x0, [x20, #40]
    37d4:	cbz	x0, 37e8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x7c8>
    37d8:	cmp	x5, x0
    37dc:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    37e0:	str	x0, [x2, #40]
    37e4:	str	x2, [x0, #48]
    37e8:	cmp	x6, #0x1f
    37ec:	b.ls	412c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x110c>  // b.plast
    37f0:	orr	x21, x21, #0x3
    37f4:	str	x21, [x20, #8]
    37f8:	orr	x0, x6, #0x1
    37fc:	str	x0, [x4, #8]
    3800:	str	x6, [x4, x6]
    3804:	cmp	x6, #0xff
    3808:	lsr	x1, x6, #3
    380c:	b.hi	402c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x100c>  // b.pmore
    3810:	add	x3, x19, #0x1b0
    3814:	mov	w2, #0x1                   	// #1
    3818:	add	x0, x3, x1, lsl #4
    381c:	lsl	w2, w2, w1
    3820:	add	x0, x0, #0xa0
    3824:	ldr	w1, [x3, #96]
    3828:	tst	w1, w2
    382c:	b.ne	4230 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1210>  // b.any
    3830:	orr	w2, w1, w2
    3834:	mov	x1, x0
    3838:	str	w2, [x3, #96]
    383c:	str	x4, [x0, #16]
    3840:	add	x20, x20, #0x10
    3844:	str	x4, [x1, #24]
    3848:	stp	x1, x0, [x4, #16]
    384c:	b	3258 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x238>
    3850:	bl	2900 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x108>
    3854:	b	32c8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2a8>
    3858:	mov	x0, x20
    385c:	bl	2e00 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x608>
    3860:	cmn	x0, #0x1
    3864:	b.eq	32fc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2dc>  // b.none
    3868:	add	x1, x19, #0x1b0
    386c:	add	x1, x1, #0x60
    3870:	ldr	x2, [x1, #848]
    3874:	ldr	x3, [x1, #856]
    3878:	add	x2, x20, x2
    387c:	str	x2, [x1, #848]
    3880:	cmp	x2, x3
    3884:	b.ls	388c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x86c>  // b.plast
    3888:	str	x2, [x1, #856]
    388c:	add	x1, x19, #0x1b0
    3890:	add	x3, x1, #0x60
    3894:	ldr	x6, [x3, #40]
    3898:	cbz	x6, 3cf0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xcd0>
    389c:	add	x1, x1, #0x3f8
    38a0:	ldp	x3, x2, [x1]
    38a4:	add	x4, x3, x2
    38a8:	cmp	x0, x4
    38ac:	b.eq	3c5c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc3c>  // b.none
    38b0:	ldr	x1, [x1, #16]
    38b4:	cbnz	x1, 38a0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x880>
    38b8:	add	x4, x0, x20
    38bc:	add	x1, x19, #0x1b0
    38c0:	add	x1, x1, #0x60
    38c4:	ldr	x2, [x1, #24]
    38c8:	cmp	x0, x2
    38cc:	b.cs	38d4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x8b4>  // b.hs, b.nlast
    38d0:	str	x0, [x1, #24]
    38d4:	add	x1, x19, #0x1b0
    38d8:	add	x1, x1, #0x3f8
    38dc:	nop
    38e0:	ldr	x2, [x1]
    38e4:	cmp	x2, x4
    38e8:	b.eq	3b28 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xb08>  // b.none
    38ec:	ldr	x1, [x1, #16]
    38f0:	cbnz	x1, 38e0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x8c0>
    38f4:	add	x1, x19, #0x1b0
    38f8:	add	x1, x1, #0x3f8
    38fc:	b	3908 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x8e8>
    3900:	ldr	x1, [x1, #16]
    3904:	cbz	x1, 46a4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1684>
    3908:	ldr	x2, [x1]
    390c:	cmp	x2, x6
    3910:	b.hi	3900 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x8e0>  // b.pmore
    3914:	ldr	x3, [x1, #8]
    3918:	add	x2, x2, x3
    391c:	cmp	x2, x6
    3920:	b.ls	3900 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x8e0>  // b.plast
    3924:	sub	x3, x2, #0x3f
    3928:	mov	x4, #0xffffffffffffffb1    	// #-79
    392c:	neg	x1, x3
    3930:	add	x5, x6, #0x20
    3934:	and	x1, x1, #0x7
    3938:	tst	x3, #0x7
    393c:	add	x1, x1, x4
    3940:	sub	x3, x20, #0x48
    3944:	csel	x1, x1, x4, ne  // ne = any
    3948:	add	x4, x0, #0x10
    394c:	add	x1, x2, x1
    3950:	cmp	x1, x5
    3954:	csel	x1, x1, x6, cs  // cs = hs, nlast
    3958:	tst	x0, #0x7
    395c:	add	x10, x1, #0x10
    3960:	add	x8, x1, #0x28
    3964:	b.eq	3ce4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xcc4>  // b.none
    3968:	neg	x4, x4
    396c:	and	x4, x4, #0x7
    3970:	add	x7, x0, x4
    3974:	sub	x4, x3, x4
    3978:	add	x5, x19, #0x1b0
    397c:	add	x9, x0, x3
    3980:	add	x12, x5, #0x3f8
    3984:	orr	x11, x4, #0x1
    3988:	add	x3, x5, #0x60
    398c:	mov	x14, #0x48                  	// #72
    3990:	str	x4, [x3, #16]
    3994:	mov	x13, #0x2b                  	// #43
    3998:	str	x7, [x3, #40]
    399c:	str	x11, [x7, #8]
    39a0:	sub	x11, x20, #0x8
    39a4:	str	x14, [x9, #8]
    39a8:	add	x9, x0, x11
    39ac:	ldr	x5, [x5, #32]
    39b0:	str	x5, [x3, #48]
    39b4:	ldp	x4, x5, [x12]
    39b8:	stp	x4, x5, [x1, #16]
    39bc:	ldp	x4, x5, [x12, #16]
    39c0:	str	x13, [x1, #8]
    39c4:	stp	x4, x5, [x10, #16]
    39c8:	str	x20, [x3, #928]
    39cc:	str	x0, [x3, #920]
    39d0:	ldr	x4, [x0, x11]
    39d4:	str	x4, [x3, #944]
    39d8:	ldr	x5, [x9, x4]
    39dc:	cmp	x4, x5
    39e0:	b.ne	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.any
    39e4:	sub	x4, x2, #0x31
    39e8:	add	x5, x1, #0x31
    39ec:	sub	x4, x4, x1
    39f0:	str	xzr, [x0, x11]
    39f4:	cmp	x2, x5
    39f8:	mov	x0, x5
    39fc:	lsr	x5, x4, #3
    3a00:	str	x10, [x3, #936]
    3a04:	mov	x3, #0x1                   	// #1
    3a08:	csinc	x5, x3, x5, cc  // cc = lo, ul, last
    3a0c:	cmp	x4, #0x17
    3a10:	ccmp	x2, x0, #0x0, hi  // hi = pmore
    3a14:	mov	x0, x1
    3a18:	b.cc	3a50 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa30>  // b.lo, b.ul, b.last
    3a1c:	adrp	x4, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    3a20:	lsr	x3, x5, #1
    3a24:	ldr	q0, [x4, #2176]
    3a28:	add	x3, x1, x3, lsl #4
    3a2c:	nop
    3a30:	add	x0, x0, #0x10
    3a34:	str	q0, [x0, #32]
    3a38:	cmp	x3, x0
    3a3c:	b.ne	3a30 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa10>  // b.any
    3a40:	and	x0, x5, #0xfffffffffffffffe
    3a44:	cmp	x0, x5
    3a48:	add	x8, x8, x0, lsl #3
    3a4c:	b.eq	3a80 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa60>  // b.none
    3a50:	mov	x0, x8
    3a54:	mov	x3, #0xb                   	// #11
    3a58:	str	x3, [x0, #8]!
    3a5c:	add	x4, x0, #0x8
    3a60:	cmp	x2, x4
    3a64:	b.ls	3a80 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa60>  // b.plast
    3a68:	str	x3, [x0, #8]
    3a6c:	add	x0, x8, #0x18
    3a70:	cmp	x2, x0
    3a74:	add	x8, x8, #0x10
    3a78:	b.ls	3a80 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xa60>  // b.plast
    3a7c:	str	x3, [x8, #8]
    3a80:	cmp	x1, x6
    3a84:	b.eq	3e94 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe74>  // b.none
    3a88:	ldr	x0, [x1, #8]
    3a8c:	sub	x2, x1, x6
    3a90:	orr	x3, x2, #0x1
    3a94:	cmp	x2, #0xff
    3a98:	and	x0, x0, #0xfffffffffffffffe
    3a9c:	str	x0, [x1, #8]
    3aa0:	str	x3, [x6, #8]
    3aa4:	lsr	x0, x2, #3
    3aa8:	str	x2, [x1]
    3aac:	b.hi	3ddc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xdbc>  // b.pmore
    3ab0:	add	x3, x19, #0x1b0
    3ab4:	mov	w1, #0x1                   	// #1
    3ab8:	add	x4, x3, #0x60
    3abc:	lsl	w1, w1, w0
    3ac0:	add	x0, x4, x0, lsl #4
    3ac4:	ldr	w2, [x3, #96]
    3ac8:	add	x0, x0, #0x40
    3acc:	tst	w2, w1
    3ad0:	b.ne	400c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xfec>  // b.any
    3ad4:	orr	w1, w2, w1
    3ad8:	mov	x2, x0
    3adc:	str	w1, [x3, #96]
    3ae0:	add	x1, x19, #0x1b0
    3ae4:	str	x6, [x0, #16]
    3ae8:	str	x6, [x2, #24]
    3aec:	stp	x2, x0, [x6, #16]
    3af0:	ldr	x1, [x1, #112]
    3af4:	cmp	x1, x21
    3af8:	b.ls	32fc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2dc>  // b.plast
    3afc:	add	x0, x19, #0x1b0
    3b00:	add	x2, x7, x21
    3b04:	sub	x1, x1, x21
    3b08:	add	x20, x7, #0x10
    3b0c:	orr	x3, x1, #0x1
    3b10:	orr	x21, x21, #0x3
    3b14:	str	x1, [x0, #112]
    3b18:	str	x2, [x0, #136]
    3b1c:	str	x3, [x2, #8]
    3b20:	str	x21, [x7, #8]
    3b24:	b	30e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc4>
    3b28:	ldur	x3, [x4, #-8]
    3b2c:	ldr	x2, [x1, #24]
    3b30:	cmp	x3, x2
    3b34:	b.ne	38f4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x8d4>  // b.any
    3b38:	neg	x3, x0
    3b3c:	tst	x0, #0x7
    3b40:	ldr	x5, [x1, #8]
    3b44:	and	x3, x3, #0x7
    3b48:	add	x3, x0, x3
    3b4c:	neg	x2, x4
    3b50:	add	x20, x5, x20
    3b54:	stp	x0, x20, [x1]
    3b58:	csel	x0, x3, x0, ne  // ne = any
    3b5c:	and	x2, x2, #0x7
    3b60:	tst	x4, #0x7
    3b64:	add	x2, x4, x2
    3b68:	orr	x1, x21, #0x3
    3b6c:	csel	x4, x2, x4, ne  // ne = any
    3b70:	str	x1, [x0, #8]
    3b74:	sub	x3, x4, x0
    3b78:	cmp	x4, x6
    3b7c:	sub	x3, x3, x21
    3b80:	add	x20, x0, x21
    3b84:	b.eq	43b0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1390>  // b.none
    3b88:	add	x7, x19, #0x1b0
    3b8c:	add	x5, x7, #0x60
    3b90:	ldr	x1, [x5, #32]
    3b94:	cmp	x1, x4
    3b98:	b.eq	438c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x136c>  // b.none
    3b9c:	ldr	x1, [x4, #8]
    3ba0:	tbnz	w1, #1, 3bf4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xbd4>
    3ba4:	cmp	x1, #0xff
    3ba8:	and	x8, x1, #0xfffffffffffffffc
    3bac:	lsr	x2, x1, #3
    3bb0:	ldr	x1, [x4, #24]
    3bb4:	b.hi	4534 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1514>  // b.pmore
    3bb8:	ldr	x6, [x4, #16]
    3bbc:	cmp	x6, x1
    3bc0:	b.eq	451c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x14fc>  // b.none
    3bc4:	add	x2, x5, x2, lsl #4
    3bc8:	add	x2, x2, #0x40
    3bcc:	cmp	x6, x2
    3bd0:	b.ne	468c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x166c>  // b.any
    3bd4:	add	x2, x19, #0x1b0
    3bd8:	ldr	x2, [x2, #120]
    3bdc:	cmp	x2, x1
    3be0:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    3be4:	str	x1, [x6, #24]
    3be8:	str	x6, [x1, #16]
    3bec:	add	x4, x4, x8
    3bf0:	add	x3, x3, x8
    3bf4:	ldr	x5, [x4, #8]
    3bf8:	orr	x2, x3, #0x1
    3bfc:	cmp	x3, #0xff
    3c00:	lsr	x1, x3, #3
    3c04:	and	x5, x5, #0xfffffffffffffffe
    3c08:	str	x5, [x4, #8]
    3c0c:	str	x2, [x20, #8]
    3c10:	str	x3, [x20, x3]
    3c14:	b.hi	43d4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x13b4>  // b.pmore
    3c18:	add	x4, x19, #0x1b0
    3c1c:	mov	w3, #0x1                   	// #1
    3c20:	add	x5, x4, #0x60
    3c24:	lsl	w3, w3, w1
    3c28:	add	x1, x5, x1, lsl #4
    3c2c:	ldr	w2, [x4, #96]
    3c30:	add	x1, x1, #0x40
    3c34:	tst	w2, w3
    3c38:	b.ne	448c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x146c>  // b.any
    3c3c:	orr	w3, w2, w3
    3c40:	mov	x2, x1
    3c44:	str	w3, [x4, #96]
    3c48:	str	x20, [x1, #16]
    3c4c:	str	x20, [x2, #24]
    3c50:	stp	x2, x1, [x20, #16]
    3c54:	add	x20, x0, #0x10
    3c58:	b	30e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc4>
    3c5c:	add	x4, x0, x20
    3c60:	ldr	x5, [x1, #24]
    3c64:	ldur	x7, [x4, #-8]
    3c68:	cmp	x7, x5
    3c6c:	b.ne	38bc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x89c>  // b.any
    3c70:	cmp	x3, x6
    3c74:	b.hi	38bc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x89c>  // b.pmore
    3c78:	cmp	x0, x6
    3c7c:	b.ls	38bc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x89c>  // b.plast
    3c80:	add	x3, x19, #0x1b0
    3c84:	neg	x5, x6
    3c88:	add	x2, x20, x2
    3c8c:	str	x2, [x1, #8]
    3c90:	ands	x4, x6, #0x7
    3c94:	and	x5, x5, #0x7
    3c98:	ldr	x1, [x3, #112]
    3c9c:	csel	x4, x5, x4, ne  // ne = any
    3ca0:	add	x7, x6, x4
    3ca4:	str	x7, [x3, #136]
    3ca8:	add	x1, x20, x1
    3cac:	mov	x2, #0x48                  	// #72
    3cb0:	add	x6, x6, x1
    3cb4:	sub	x1, x1, x4
    3cb8:	str	x1, [x3, #112]
    3cbc:	orr	x4, x1, #0x1
    3cc0:	str	x4, [x7, #8]
    3cc4:	str	x2, [x6, #8]
    3cc8:	ldr	x2, [x3, #32]
    3ccc:	str	x2, [x3, #144]
    3cd0:	b	3af4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xad4>
    3cd4:	lsl	w0, w7, w0
    3cd8:	bic	w3, w3, w0
    3cdc:	str	w3, [x4, #96]
    3ce0:	b	31d4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1b4>
    3ce4:	mov	x4, x3
    3ce8:	mov	x7, x0
    3cec:	b	3978 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x958>
    3cf0:	sub	x4, x20, #0x8
    3cf4:	str	x20, [x3, #928]
    3cf8:	add	x5, x0, x4
    3cfc:	str	x0, [x3, #24]
    3d00:	str	x0, [x3, #920]
    3d04:	ldr	x2, [x0, x4]
    3d08:	str	x2, [x3, #944]
    3d0c:	ldr	x5, [x5, x2]
    3d10:	cmp	x2, x5
    3d14:	b.ne	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.any
    3d18:	adrp	x5, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    3d1c:	str	xzr, [x0, x4]
    3d20:	adrp	x4, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    3d24:	dup	v4.2d, x3
    3d28:	movi	v1.4s, #0x0
    3d2c:	add	x2, x1, #0xb0
    3d30:	ldr	q3, [x5, #2144]
    3d34:	add	x1, x1, #0x2b0
    3d38:	ldr	q2, [x4, #2160]
    3d3c:	ldr	x4, [x19, #432]
    3d40:	str	x4, [x3, #56]
    3d44:	nop
    3d48:	mov	v0.16b, v1.16b
    3d4c:	add	v1.2d, v1.2d, v3.2d
    3d50:	shl	v0.2d, v0.2d, #1
    3d54:	add	v0.2d, v0.2d, v2.2d
    3d58:	shl	v0.2d, v0.2d, #3
    3d5c:	add	v0.2d, v0.2d, v4.2d
    3d60:	str	q0, [x2], #16
    3d64:	cmp	x1, x2
    3d68:	b.ne	3d48 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd28>  // b.any
    3d6c:	sub	x20, x20, #0x48
    3d70:	tst	x0, #0x7
    3d74:	add	x1, x0, #0x10
    3d78:	b.eq	3ef0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xed0>  // b.none
    3d7c:	neg	x1, x1
    3d80:	and	x1, x1, #0x7
    3d84:	add	x7, x0, x1
    3d88:	sub	x1, x20, x1
    3d8c:	add	x2, x19, #0x1b0
    3d90:	add	x20, x0, x20
    3d94:	mov	x0, x2
    3d98:	add	x2, x2, #0x60
    3d9c:	orr	x3, x1, #0x1
    3da0:	mov	x5, #0x48                  	// #72
    3da4:	str	x1, [x0, #112]
    3da8:	str	x7, [x0, #136]
    3dac:	str	x3, [x7, #8]
    3db0:	str	x5, [x20, #8]
    3db4:	ldr	x4, [x0, #32]
    3db8:	str	x4, [x2, #48]
    3dbc:	b	3af4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xad4>
    3dc0:	orr	x1, x1, #0x3
    3dc4:	str	x1, [x20, #8]
    3dc8:	add	x20, x20, #0x10
    3dcc:	ldr	x0, [x4, #8]
    3dd0:	orr	x0, x0, #0x1
    3dd4:	str	x0, [x4, #8]
    3dd8:	b	3258 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x238>
    3ddc:	mov	x1, #0xffff                	// #65535
    3de0:	lsr	x0, x2, #8
    3de4:	cmp	x1, x2, lsr #8
    3de8:	b.cc	3f78 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf58>  // b.lo, b.ul, b.last
    3dec:	sub	w1, w0, #0x100
    3df0:	mov	w3, #0x1                   	// #1
    3df4:	lsr	w1, w1, #16
    3df8:	and	w1, w1, #0x8
    3dfc:	lsl	w0, w0, w1
    3e00:	sub	w4, w0, #0x1, lsl #12
    3e04:	lsr	w4, w4, #16
    3e08:	and	w4, w4, #0x4
    3e0c:	orr	w1, w1, w4
    3e10:	lsl	w0, w0, w4
    3e14:	sub	w4, w0, #0x4, lsl #12
    3e18:	lsr	w4, w4, #16
    3e1c:	and	w4, w4, #0x2
    3e20:	add	w1, w1, w4
    3e24:	lsl	w0, w0, w4
    3e28:	lsr	w0, w0, #15
    3e2c:	sub	w0, w0, w1
    3e30:	add	w1, w0, #0x15
    3e34:	add	w0, w0, #0xe
    3e38:	lsr	x1, x2, x1
    3e3c:	lsl	w0, w0, #1
    3e40:	and	x1, x1, #0x1
    3e44:	add	x1, x1, x0
    3e48:	add	x5, x1, #0x4a
    3e4c:	lsl	w4, w3, w1
    3e50:	lsl	x8, x5, #3
    3e54:	add	x0, x19, #0x1b0
    3e58:	stp	xzr, xzr, [x6, #32]
    3e5c:	add	x0, x0, #0x60
    3e60:	str	x1, [x6, #56]
    3e64:	ldr	w3, [x0, #4]
    3e68:	tst	w3, w4
    3e6c:	b.ne	3efc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xedc>  // b.any
    3e70:	dup	v0.2d, x6
    3e74:	str	x6, [x0, x5, lsl #3]
    3e78:	orr	w3, w3, w4
    3e7c:	add	x8, x0, x8
    3e80:	str	w3, [x0, #4]
    3e84:	str	x8, [x6, #48]
    3e88:	ldr	x1, [x0, #16]
    3e8c:	str	q0, [x6, #16]
    3e90:	b	3af4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xad4>
    3e94:	add	x0, x19, #0x1b0
    3e98:	ldr	x1, [x0, #112]
    3e9c:	b	3af4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xad4>
    3ea0:	mov	w0, #0xfffffffe            	// #-2
    3ea4:	lsl	w0, w0, w9
    3ea8:	ands	w0, w0, w8
    3eac:	b.eq	3338 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x318>  // b.none
    3eb0:	neg	w1, w0
    3eb4:	add	x3, x19, #0x1b0
    3eb8:	ands	w0, w1, w0
    3ebc:	rbit	w0, w0
    3ec0:	clz	w0, w0
    3ec4:	csinv	w0, w0, wzr, ne  // ne = any
    3ec8:	add	x0, x3, w0, sxtw #3
    3ecc:	ldr	x1, [x0, #688]
    3ed0:	cbz	x1, 3338 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x318>
    3ed4:	ldr	x0, [x1, #8]
    3ed8:	mov	x6, x7
    3edc:	mov	x20, #0x0                   	// #0
    3ee0:	and	x0, x0, #0xfffffffffffffffc
    3ee4:	b	36f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6d8>
    3ee8:	orr	x2, x2, #0x3
    3eec:	b	3634 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x614>
    3ef0:	mov	x1, x20
    3ef4:	mov	x7, x0
    3ef8:	b	3d8c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xd6c>
    3efc:	lsr	x4, x1, #1
    3f00:	mov	w3, #0x39                  	// #57
    3f04:	sub	w3, w3, w4
    3f08:	cmp	x1, #0x1f
    3f0c:	ldr	x1, [x0, x5, lsl #3]
    3f10:	lsl	x3, x2, x3
    3f14:	csel	x3, x3, x2, ne  // ne = any
    3f18:	b	3f34 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xf14>
    3f1c:	lsr	x0, x3, #63
    3f20:	lsl	x3, x3, #1
    3f24:	add	x0, x0, #0x4
    3f28:	ldr	x4, [x1, x0, lsl #3]
    3f2c:	cbz	x4, 4200 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11e0>
    3f30:	mov	x1, x4
    3f34:	ldr	x0, [x1, #8]
    3f38:	and	x0, x0, #0xfffffffffffffffc
    3f3c:	cmp	x2, x0
    3f40:	b.ne	3f1c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xefc>  // b.any
    3f44:	add	x0, x19, #0x1b0
    3f48:	ldr	x2, [x1, #16]
    3f4c:	add	x0, x0, #0x60
    3f50:	ldr	x3, [x0, #24]
    3f54:	cmp	x1, x3
    3f58:	ccmp	x2, x3, #0x0, cs  // cs = hs, nlast
    3f5c:	b.cc	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.lo, b.ul, b.last
    3f60:	str	x6, [x2, #24]
    3f64:	str	x6, [x1, #16]
    3f68:	stp	x2, x1, [x6, #16]
    3f6c:	str	xzr, [x6, #48]
    3f70:	ldr	x1, [x0, #16]
    3f74:	b	3af4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xad4>
    3f78:	mov	w4, #0x80000000            	// #-2147483648
    3f7c:	mov	x8, #0x348                 	// #840
    3f80:	mov	x1, #0x1f                  	// #31
    3f84:	mov	x5, #0x69                  	// #105
    3f88:	b	3e54 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe34>
    3f8c:	sub	w3, w1, #0x100
    3f90:	lsr	w3, w3, #16
    3f94:	and	w3, w3, #0x8
    3f98:	lsl	w1, w1, w3
    3f9c:	sub	w4, w1, #0x1, lsl #12
    3fa0:	lsr	w4, w4, #16
    3fa4:	and	w4, w4, #0x4
    3fa8:	orr	w3, w3, w4
    3fac:	lsl	w1, w1, w4
    3fb0:	sub	w4, w1, #0x4, lsl #12
    3fb4:	lsr	w4, w4, #16
    3fb8:	and	w4, w4, #0x2
    3fbc:	add	w3, w3, w4
    3fc0:	lsl	w1, w1, w4
    3fc4:	lsr	w1, w1, #15
    3fc8:	sub	w1, w1, w3
    3fcc:	add	w9, w1, #0x15
    3fd0:	add	w1, w1, #0xe
    3fd4:	lsr	x9, x21, x9
    3fd8:	lsl	w1, w1, #1
    3fdc:	and	x9, x9, #0x1
    3fe0:	add	x9, x9, x1
    3fe4:	add	x1, x9, #0x4a
    3fe8:	ldr	x1, [x0, x1, lsl #3]
    3fec:	cbz	x1, 3ea0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xe80>
    3ff0:	lsr	x0, x9, #1
    3ff4:	mov	w4, #0x39                  	// #57
    3ff8:	sub	w4, w4, w0
    3ffc:	cmp	x9, #0x1f
    4000:	lsl	x4, x21, x4
    4004:	csel	x4, x4, x21, ne  // ne = any
    4008:	b	367c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x65c>
    400c:	ldr	x2, [x0, #16]
    4010:	ldr	x1, [x4, #24]
    4014:	cmp	x2, x1
    4018:	b.cs	3ae0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xac0>  // b.hs, b.nlast
    401c:	str	x23, [sp, #48]
    4020:	bl	1ae0 <abort@plt>
    4024:	mov	x20, x1
    4028:	b	36f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6d8>
    402c:	mov	x1, #0xffff                	// #65535
    4030:	lsr	x0, x6, #8
    4034:	cmp	x1, x6, lsr #8
    4038:	b.cc	4250 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1230>  // b.lo, b.ul, b.last
    403c:	sub	w1, w0, #0x100
    4040:	mov	w3, #0x1                   	// #1
    4044:	lsr	w1, w1, #16
    4048:	and	w1, w1, #0x8
    404c:	lsl	w0, w0, w1
    4050:	sub	w2, w0, #0x1, lsl #12
    4054:	lsr	w2, w2, #16
    4058:	and	w2, w2, #0x4
    405c:	orr	w1, w1, w2
    4060:	lsl	w0, w0, w2
    4064:	sub	w2, w0, #0x4, lsl #12
    4068:	lsr	w2, w2, #16
    406c:	and	w2, w2, #0x2
    4070:	add	w1, w1, w2
    4074:	lsl	w0, w0, w2
    4078:	lsr	w0, w0, #15
    407c:	sub	w0, w0, w1
    4080:	add	w1, w0, #0x15
    4084:	add	w0, w0, #0xe
    4088:	lsr	x1, x6, x1
    408c:	lsl	w0, w0, #1
    4090:	and	x1, x1, #0x1
    4094:	add	x0, x1, x0
    4098:	add	x7, x0, #0x4a
    409c:	lsl	w3, w3, w0
    40a0:	lsl	x1, x7, #3
    40a4:	stp	xzr, xzr, [x4, #32]
    40a8:	tst	w8, w3
    40ac:	str	x0, [x4, #56]
    40b0:	b.eq	42c8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x12a8>  // b.none
    40b4:	add	x1, x19, #0x1b0
    40b8:	lsr	x3, x0, #1
    40bc:	add	x1, x1, #0x60
    40c0:	mov	w2, #0x39                  	// #57
    40c4:	sub	w2, w2, w3
    40c8:	cmp	x0, #0x1f
    40cc:	lsl	x2, x6, x2
    40d0:	csel	x2, x2, x6, ne  // ne = any
    40d4:	ldr	x1, [x1, x7, lsl #3]
    40d8:	b	40f4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10d4>
    40dc:	lsr	x0, x2, #63
    40e0:	lsl	x2, x2, #1
    40e4:	add	x0, x0, #0x4
    40e8:	ldr	x3, [x1, x0, lsl #3]
    40ec:	cbz	x3, 42a4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1284>
    40f0:	mov	x1, x3
    40f4:	ldr	x0, [x1, #8]
    40f8:	and	x0, x0, #0xfffffffffffffffc
    40fc:	cmp	x0, x6
    4100:	b.ne	40dc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x10bc>  // b.any
    4104:	ldr	x0, [x1, #16]
    4108:	cmp	x5, x0
    410c:	ccmp	x5, x1, #0x2, ls  // ls = plast
    4110:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    4114:	str	x4, [x0, #24]
    4118:	add	x20, x20, #0x10
    411c:	str	x4, [x1, #16]
    4120:	stp	x0, x1, [x4, #16]
    4124:	str	xzr, [x4, #48]
    4128:	b	3258 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x238>
    412c:	add	x6, x21, x6
    4130:	add	x1, x20, x6
    4134:	orr	x6, x6, #0x3
    4138:	add	x20, x20, #0x10
    413c:	ldr	x0, [x1, #8]
    4140:	stur	x6, [x20, #-8]
    4144:	orr	x0, x0, #0x1
    4148:	str	x0, [x1, #8]
    414c:	b	3258 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x238>
    4150:	ldr	x23, [sp, #48]
    4154:	b	32e8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2c8>
    4158:	ldr	x0, [x20, #40]
    415c:	cbz	x0, 42f4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x12d4>
    4160:	add	x1, x20, #0x28
    4164:	nop
    4168:	mov	x3, x1
    416c:	mov	x2, x0
    4170:	add	x1, x0, #0x28
    4174:	ldr	x0, [x0, #40]
    4178:	cbnz	x0, 4168 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1148>
    417c:	ldr	x0, [x2, #32]
    4180:	add	x1, x2, #0x20
    4184:	cbnz	x0, 4168 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1148>
    4188:	cmp	x5, x3
    418c:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    4190:	str	xzr, [x3]
    4194:	b	3770 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x750>
    4198:	add	x4, x21, x4
    419c:	add	x20, x9, #0x10
    41a0:	add	x1, x9, x4
    41a4:	orr	x4, x4, #0x3
    41a8:	ldr	x0, [x1, #8]
    41ac:	str	x4, [x9, #8]
    41b0:	orr	x0, x0, #0x1
    41b4:	str	x0, [x1, #8]
    41b8:	b	30e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc4>
    41bc:	ldr	x0, [x9, #40]
    41c0:	cbz	x0, 430c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x12ec>
    41c4:	add	x5, x9, #0x28
    41c8:	mov	x6, x5
    41cc:	mov	x1, x0
    41d0:	add	x5, x0, #0x28
    41d4:	ldr	x0, [x0, #40]
    41d8:	cbnz	x0, 41c8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11a8>
    41dc:	ldr	x0, [x1, #32]
    41e0:	add	x5, x1, #0x20
    41e4:	cbnz	x0, 41c8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11a8>
    41e8:	cmp	x7, x6
    41ec:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    41f0:	str	xzr, [x6]
    41f4:	b	3484 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x464>
    41f8:	str	x2, [x0, x1, lsl #3]
    41fc:	b	37ac <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x78c>
    4200:	add	x2, x19, #0x1b0
    4204:	add	x3, x1, x0, lsl #3
    4208:	add	x2, x2, #0x60
    420c:	ldr	x4, [x2, #24]
    4210:	cmp	x4, x3
    4214:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    4218:	dup	v0.2d, x6
    421c:	str	x6, [x1, x0, lsl #3]
    4220:	str	x1, [x6, #48]
    4224:	ldr	x1, [x2, #16]
    4228:	str	q0, [x6, #16]
    422c:	b	3af4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xad4>
    4230:	ldr	x1, [x0, #16]
    4234:	cmp	x5, x1
    4238:	b.ls	383c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x81c>  // b.plast
    423c:	b	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>
    4240:	ldr	x3, [x1, #16]
    4244:	cmp	x7, x3
    4248:	b.ls	3550 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x530>  // b.plast
    424c:	b	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>
    4250:	mov	x1, #0x348                 	// #840
    4254:	mov	w3, #0x80000000            	// #-2147483648
    4258:	mov	x0, #0x1f                  	// #31
    425c:	mov	x7, #0x69                  	// #105
    4260:	b	40a4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1084>
    4264:	ldr	x23, [sp, #48]
    4268:	b	30e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc4>
    426c:	str	x2, [x7, #32]
    4270:	b	37a8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x788>
    4274:	mov	x4, x0
    4278:	mov	x2, x23
    427c:	mov	x1, #0x1                   	// #1
    4280:	b	35cc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x5ac>
    4284:	str	x1, [x0, x5, lsl #3]
    4288:	b	34c0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4a0>
    428c:	str	x1, [x8, #32]
    4290:	b	34bc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x49c>
    4294:	ldr	x0, [x20, #16]
    4298:	ldr	x23, [sp, #48]
    429c:	neg	x1, x0
    42a0:	b	32e8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x2c8>
    42a4:	add	x2, x1, x0, lsl #3
    42a8:	cmp	x5, x2
    42ac:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    42b0:	dup	v0.2d, x4
    42b4:	str	x4, [x1, x0, lsl #3]
    42b8:	add	x20, x20, #0x10
    42bc:	str	x1, [x4, #48]
    42c0:	str	q0, [x4, #16]
    42c4:	b	3258 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x238>
    42c8:	add	x0, x19, #0x1b0
    42cc:	dup	v0.2d, x4
    42d0:	add	x0, x0, #0x60
    42d4:	orr	w8, w8, w3
    42d8:	add	x1, x0, x1
    42dc:	add	x20, x20, #0x10
    42e0:	str	x4, [x0, x7, lsl #3]
    42e4:	str	w8, [x0, #4]
    42e8:	str	q0, [x4, #16]
    42ec:	str	x1, [x4, #48]
    42f0:	b	3258 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x238>
    42f4:	ldr	x0, [x20, #32]
    42f8:	cbz	x0, 431c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x12fc>
    42fc:	add	x1, x20, #0x20
    4300:	b	4168 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1148>
    4304:	mov	x6, x7
    4308:	b	371c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x6fc>
    430c:	ldr	x0, [x9, #32]
    4310:	cbz	x0, 4354 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1334>
    4314:	add	x5, x9, #0x20
    4318:	b	41c8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x11a8>
    431c:	cbz	x7, 37e8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x7c8>
    4320:	ldr	x2, [x20, #56]
    4324:	add	x3, x2, #0x4a
    4328:	ldr	x0, [x1, x3, lsl #3]
    432c:	cmp	x0, x20
    4330:	b.eq	433c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x131c>  // b.none
    4334:	mov	x2, #0x0                   	// #0
    4338:	b	3790 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x770>
    433c:	mov	w0, #0x1                   	// #1
    4340:	str	xzr, [x1, x3, lsl #3]
    4344:	lsl	w0, w0, w2
    4348:	bic	w8, w8, w0
    434c:	str	w8, [x1, #4]
    4350:	b	37e8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x7c8>
    4354:	cbz	x8, 34fc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4dc>
    4358:	ldr	x1, [x9, #56]
    435c:	add	x6, x1, #0x4a
    4360:	ldr	x0, [x5, x6, lsl #3]
    4364:	cmp	x9, x0
    4368:	b.eq	4374 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1354>  // b.none
    436c:	mov	x1, #0x0                   	// #0
    4370:	b	34a4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x484>
    4374:	mov	w0, #0x1                   	// #1
    4378:	str	xzr, [x5, x6, lsl #3]
    437c:	lsl	w0, w0, w1
    4380:	bic	w10, w10, w0
    4384:	str	w10, [x5, #4]
    4388:	b	34fc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x4dc>
    438c:	ldr	x1, [x5, #8]
    4390:	str	x20, [x5, #32]
    4394:	add	x3, x3, x1
    4398:	str	x3, [x5, #8]
    439c:	orr	x1, x3, #0x1
    43a0:	str	x1, [x20, #8]
    43a4:	str	x3, [x20, x3]
    43a8:	add	x20, x0, #0x10
    43ac:	b	30e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc4>
    43b0:	add	x2, x19, #0x1b0
    43b4:	ldr	x1, [x2, #112]
    43b8:	str	x20, [x2, #136]
    43bc:	add	x3, x3, x1
    43c0:	str	x3, [x2, #112]
    43c4:	orr	x3, x3, #0x1
    43c8:	str	x3, [x20, #8]
    43cc:	add	x20, x0, #0x10
    43d0:	b	30e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc4>
    43d4:	lsr	x1, x3, #8
    43d8:	mov	x5, #0xffff                	// #65535
    43dc:	sub	w2, w1, #0x100
    43e0:	cmp	x1, x5
    43e4:	add	x4, x19, #0x1b0
    43e8:	mov	x8, #0x1f                  	// #31
    43ec:	lsr	w2, w2, #16
    43f0:	stp	xzr, xzr, [x20, #32]
    43f4:	and	w2, w2, #0x8
    43f8:	ldr	w6, [x4, #100]
    43fc:	mov	w7, #0x1                   	// #1
    4400:	lsl	w1, w1, w2
    4404:	sub	w5, w1, #0x1, lsl #12
    4408:	add	x4, x4, #0x60
    440c:	lsr	w5, w5, #16
    4410:	and	w5, w5, #0x4
    4414:	orr	w2, w2, w5
    4418:	lsl	w1, w1, w5
    441c:	sub	w5, w1, #0x4, lsl #12
    4420:	lsr	w5, w5, #16
    4424:	and	w5, w5, #0x2
    4428:	add	w2, w2, w5
    442c:	lsl	w1, w1, w5
    4430:	lsr	w1, w1, #15
    4434:	sub	w1, w1, w2
    4438:	add	w2, w1, #0x15
    443c:	add	w1, w1, #0xe
    4440:	lsr	x2, x3, x2
    4444:	lsl	w1, w1, #1
    4448:	and	x2, x2, #0x1
    444c:	add	x1, x2, x1
    4450:	csel	x1, x1, x8, ls  // ls = plast
    4454:	str	x1, [x20, #56]
    4458:	lsl	w2, w7, w1
    445c:	tst	w6, w2
    4460:	b.ne	44a0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1480>  // b.any
    4464:	add	x1, x1, #0x4a
    4468:	dup	v0.2d, x20
    446c:	orr	w6, w6, w2
    4470:	str	w6, [x4, #4]
    4474:	add	x2, x4, x1, lsl #3
    4478:	str	x20, [x4, x1, lsl #3]
    447c:	str	x2, [x20, #48]
    4480:	str	q0, [x20, #16]
    4484:	add	x20, x0, #0x10
    4488:	b	30e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc4>
    448c:	ldr	x2, [x1, #16]
    4490:	ldr	x3, [x5, #24]
    4494:	cmp	x2, x3
    4498:	b.cs	3c48 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc28>  // b.hs, b.nlast
    449c:	b	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>
    44a0:	lsr	x5, x1, #1
    44a4:	cmp	x1, #0x1f
    44a8:	mov	w2, #0x39                  	// #57
    44ac:	add	x1, x1, #0x4a
    44b0:	sub	w2, w2, w5
    44b4:	csel	w2, w2, wzr, ne  // ne = any
    44b8:	ldr	x1, [x4, x1, lsl #3]
    44bc:	lsl	x2, x3, x2
    44c0:	b	44dc <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x14bc>
    44c4:	lsr	x4, x2, #63
    44c8:	lsl	x2, x2, #1
    44cc:	add	x4, x4, #0x4
    44d0:	ldr	x5, [x1, x4, lsl #3]
    44d4:	cbz	x5, 45e0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15c0>
    44d8:	mov	x1, x5
    44dc:	ldr	x4, [x1, #8]
    44e0:	and	x4, x4, #0xfffffffffffffffc
    44e4:	cmp	x3, x4
    44e8:	b.ne	44c4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x14a4>  // b.any
    44ec:	add	x3, x19, #0x1b0
    44f0:	ldr	x2, [x1, #16]
    44f4:	ldr	x3, [x3, #120]
    44f8:	cmp	x2, x3
    44fc:	ccmp	x1, x3, #0x0, cs  // cs = hs, nlast
    4500:	b.cc	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.lo, b.ul, b.last
    4504:	str	x20, [x2, #24]
    4508:	str	x20, [x1, #16]
    450c:	stp	x2, x1, [x20, #16]
    4510:	str	xzr, [x20, #48]
    4514:	add	x20, x0, #0x10
    4518:	b	30e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc4>
    451c:	ldr	w5, [x7, #96]
    4520:	mov	w1, #0x1                   	// #1
    4524:	lsl	w1, w1, w2
    4528:	bic	w1, w5, w1
    452c:	str	w1, [x7, #96]
    4530:	b	3bec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xbcc>
    4534:	cmp	x1, x4
    4538:	ldr	x6, [x4, #48]
    453c:	b.eq	460c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15ec>  // b.none
    4540:	ldr	x2, [x4, #16]
    4544:	ldr	x5, [x5, #24]
    4548:	cmp	x2, x5
    454c:	b.cc	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.lo, b.ul, b.last
    4550:	str	x1, [x2, #24]
    4554:	str	x2, [x1, #16]
    4558:	cbz	x6, 3bec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xbcc>
    455c:	ldr	x5, [x4, #56]
    4560:	add	x2, x19, #0x1b0
    4564:	add	x2, x2, #0x60
    4568:	add	x7, x5, #0x4a
    456c:	ldr	x9, [x2, x7, lsl #3]
    4570:	cmp	x9, x4
    4574:	b.eq	466c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x164c>  // b.none
    4578:	ldr	x2, [x2, #24]
    457c:	cmp	x6, x2
    4580:	b.cc	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.lo, b.ul, b.last
    4584:	ldr	x2, [x6, #32]
    4588:	cmp	x2, x4
    458c:	b.eq	4664 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1644>  // b.none
    4590:	str	x1, [x6, #40]
    4594:	cbz	x1, 3bec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xbcc>
    4598:	add	x2, x19, #0x1b0
    459c:	ldr	x5, [x2, #120]
    45a0:	cmp	x1, x5
    45a4:	b.cc	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.lo, b.ul, b.last
    45a8:	ldr	x2, [x4, #32]
    45ac:	str	x6, [x1, #48]
    45b0:	cbz	x2, 45c4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15a4>
    45b4:	cmp	x5, x2
    45b8:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    45bc:	str	x2, [x1, #32]
    45c0:	str	x1, [x2, #48]
    45c4:	ldr	x2, [x4, #40]
    45c8:	cbz	x2, 3bec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xbcc>
    45cc:	cmp	x5, x2
    45d0:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    45d4:	str	x2, [x1, #40]
    45d8:	str	x1, [x2, #48]
    45dc:	b	3bec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xbcc>
    45e0:	add	x3, x19, #0x1b0
    45e4:	add	x2, x1, x4, lsl #3
    45e8:	ldr	x3, [x3, #120]
    45ec:	cmp	x3, x2
    45f0:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    45f4:	dup	v0.2d, x20
    45f8:	str	x20, [x1, x4, lsl #3]
    45fc:	str	x1, [x20, #48]
    4600:	str	q0, [x20, #16]
    4604:	add	x20, x0, #0x10
    4608:	b	30e4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xc4>
    460c:	ldr	x1, [x1, #40]
    4610:	cbz	x1, 4654 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1634>
    4614:	add	x5, x4, #0x28
    4618:	mov	x2, x1
    461c:	mov	x7, x5
    4620:	mov	x1, x2
    4624:	add	x5, x2, #0x28
    4628:	ldr	x2, [x2, #40]
    462c:	cbnz	x2, 461c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15fc>
    4630:	ldr	x2, [x1, #32]
    4634:	add	x5, x1, #0x20
    4638:	cbnz	x2, 461c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15fc>
    463c:	add	x2, x19, #0x1b0
    4640:	ldr	x2, [x2, #120]
    4644:	cmp	x2, x7
    4648:	b.hi	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.pmore
    464c:	str	xzr, [x7]
    4650:	b	4558 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1538>
    4654:	ldr	x1, [x4, #32]
    4658:	cbz	x1, 4558 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1538>
    465c:	add	x5, x4, #0x20
    4660:	b	4618 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x15f8>
    4664:	str	x1, [x6, #32]
    4668:	b	4594 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1574>
    466c:	str	x1, [x2, x7, lsl #3]
    4670:	cbnz	x1, 4598 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x1578>
    4674:	ldr	w6, [x2, #4]
    4678:	mov	w1, #0x1                   	// #1
    467c:	lsl	w1, w1, w5
    4680:	bic	w1, w6, w1
    4684:	str	w1, [x2, #4]
    4688:	b	3bec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xbcc>
    468c:	ldr	x5, [x5, #24]
    4690:	cmp	x6, x5
    4694:	b.cc	401c <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xffc>  // b.lo, b.ul, b.last
    4698:	cmp	x2, x1
    469c:	b.eq	3be4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xbc4>  // b.none
    46a0:	b	3bd4 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0xbb4>
    46a4:	ldr	x0, [x1]
    46a8:	str	x23, [sp, #48]
    46ac:	brk	#0x3e8
    46b0:	ldr	x0, [x0, #24]
    46b4:	str	x23, [sp, #48]
    46b8:	brk	#0x3e8
    46bc:	nop
    46c0:	adrp	x1, 18000 <memcpy@GLIBC_2.17>
    46c4:	add	x1, x1, #0x1b0
    46c8:	add	x1, x1, #0x3f8
    46cc:	nop
    46d0:	ldr	x2, [x1]
    46d4:	cmp	x0, x2
    46d8:	b.cc	46ec <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x16cc>  // b.lo, b.ul, b.last
    46dc:	ldr	x3, [x1, #8]
    46e0:	add	x2, x2, x3
    46e4:	cmp	x0, x2
    46e8:	b.cc	46f8 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x16d8>  // b.lo, b.ul, b.last
    46ec:	ldr	x1, [x1, #16]
    46f0:	cbnz	x1, 46d0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x16b0>
    46f4:	ret
    46f8:	ldr	x1, [x1, #24]
    46fc:	add	x0, x0, x1
    4700:	ret
    4704:	nop

0000000000004708 <ffi_closure_free@@LIBFFI_CLOSURE_7.0>:
    4708:	cbz	x0, 49c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2b8>
    470c:	stp	x29, x30, [sp, #-112]!
    4710:	mov	x29, sp
    4714:	stp	x19, x20, [sp, #16]
    4718:	mov	x20, x0
    471c:	sub	x19, x20, #0x10
    4720:	stp	x21, x22, [sp, #32]
    4724:	adrp	x21, 18000 <memcpy@GLIBC_2.17>
    4728:	add	x0, x21, #0x1b0
    472c:	ldr	x0, [x0, #8]
    4730:	cbz	x0, 49ac <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2a4>
    4734:	add	x0, x21, #0x1b0
    4738:	ldr	w1, [x0, #960]
    473c:	tbnz	w1, #1, 4990 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x288>
    4740:	add	x0, x21, #0x1b0
    4744:	add	x6, x0, #0x60
    4748:	ldr	x5, [x6, #24]
    474c:	cmp	x19, x5
    4750:	b.cc	53cc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcc4>  // b.lo, b.ul, b.last
    4754:	ldur	x4, [x20, #-8]
    4758:	tbz	w4, #1, 53cc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcc4>
    475c:	and	x1, x4, #0xfffffffffffffffc
    4760:	add	x3, x19, x1
    4764:	tbnz	w4, #0, 47c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    4768:	ldur	x2, [x20, #-16]
    476c:	tbnz	w2, #0, 4bf8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x4f0>
    4770:	sub	x19, x19, x2
    4774:	add	x1, x1, x2
    4778:	cmp	x5, x19
    477c:	b.hi	53cc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcc4>  // b.pmore
    4780:	ldr	x4, [x6, #32]
    4784:	cmp	x19, x4
    4788:	b.eq	4a20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x318>  // b.none
    478c:	cmp	x2, #0xff
    4790:	lsr	x2, x2, #3
    4794:	ldr	x4, [x19, #24]
    4798:	b.hi	4b14 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x40c>  // b.pmore
    479c:	ldr	x7, [x19, #16]
    47a0:	cmp	x7, x4
    47a4:	b.eq	4d78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x670>  // b.none
    47a8:	add	x2, x6, x2, lsl #4
    47ac:	add	x2, x2, #0x40
    47b0:	cmp	x7, x2
    47b4:	b.ne	511c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa14>  // b.any
    47b8:	cmp	x5, x4
    47bc:	b.hi	53dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcd4>  // b.pmore
    47c0:	str	x4, [x7, #24]
    47c4:	str	x7, [x4, #16]
    47c8:	cmp	x3, x19
    47cc:	b.ls	53cc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcc4>  // b.plast
    47d0:	ldr	x0, [x3, #8]
    47d4:	tbz	w0, #0, 53cc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcc4>
    47d8:	stp	x25, x26, [sp, #64]
    47dc:	and	x25, x0, #0x2
    47e0:	tbnz	w0, #1, 486c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x164>
    47e4:	add	x6, x21, #0x1b0
    47e8:	add	x4, x6, #0x60
    47ec:	ldp	x7, x2, [x4, #32]
    47f0:	cmp	x3, x2
    47f4:	b.eq	4cac <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5a4>  // b.none
    47f8:	cmp	x3, x7
    47fc:	b.eq	4c58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x550>  // b.none
    4800:	and	x0, x0, #0xfffffffffffffffc
    4804:	add	x1, x1, x0
    4808:	cmp	x0, #0xff
    480c:	lsr	x0, x0, #3
    4810:	ldr	x2, [x3, #24]
    4814:	b.hi	4a78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x370>  // b.pmore
    4818:	ldr	x3, [x3, #16]
    481c:	cmp	x3, x2
    4820:	b.eq	4ce4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5dc>  // b.none
    4824:	add	x0, x4, x0, lsl #4
    4828:	add	x0, x0, #0x40
    482c:	cmp	x3, x0
    4830:	b.ne	5108 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa00>  // b.any
    4834:	cmp	x5, x2
    4838:	b.hi	4a58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x350>  // b.pmore
    483c:	nop
    4840:	str	x2, [x3, #24]
    4844:	str	x3, [x2, #16]
    4848:	orr	x0, x1, #0x1
    484c:	str	x0, [x19, #8]
    4850:	str	x1, [x19, x1]
    4854:	cmp	x19, x7
    4858:	b.ne	4880 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x178>  // b.any
    485c:	add	x0, x21, #0x1b0
    4860:	ldp	x25, x26, [sp, #64]
    4864:	str	x1, [x0, #104]
    4868:	b	4a00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f8>
    486c:	and	x0, x0, #0xfffffffffffffffe
    4870:	str	x0, [x3, #8]
    4874:	orr	x0, x1, #0x1
    4878:	str	x0, [x19, #8]
    487c:	str	x1, [x3]
    4880:	cmp	x1, #0xff
    4884:	lsr	x2, x1, #3
    4888:	b.ls	49c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2bc>  // b.plast
    488c:	mov	x2, #0xffff                	// #65535
    4890:	lsr	x0, x1, #8
    4894:	cmp	x2, x1, lsr #8
    4898:	b.cc	4a64 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x35c>  // b.lo, b.ul, b.last
    489c:	sub	w3, w0, #0x100
    48a0:	mov	w4, #0x1                   	// #1
    48a4:	lsr	w3, w3, #16
    48a8:	and	w3, w3, #0x8
    48ac:	lsl	w0, w0, w3
    48b0:	sub	w2, w0, #0x1, lsl #12
    48b4:	lsr	w2, w2, #16
    48b8:	and	w2, w2, #0x4
    48bc:	orr	w3, w3, w2
    48c0:	lsl	w2, w0, w2
    48c4:	sub	w0, w2, #0x4, lsl #12
    48c8:	lsr	w0, w0, #16
    48cc:	and	w0, w0, #0x2
    48d0:	add	w3, w3, w0
    48d4:	lsl	w0, w2, w0
    48d8:	lsr	w0, w0, #15
    48dc:	sub	w0, w0, w3
    48e0:	add	w2, w0, #0x15
    48e4:	add	w0, w0, #0xe
    48e8:	lsr	x2, x1, x2
    48ec:	lsl	w0, w0, #1
    48f0:	and	x2, x2, #0x1
    48f4:	add	x0, x2, x0
    48f8:	add	x6, x0, #0x4a
    48fc:	lsl	w2, w4, w0
    4900:	lsl	x7, x6, #3
    4904:	add	x3, x21, #0x1b0
    4908:	stp	xzr, xzr, [x19, #32]
    490c:	add	x3, x3, #0x60
    4910:	str	x0, [x19, #56]
    4914:	ldr	w4, [x3, #4]
    4918:	tst	w4, w2
    491c:	b.eq	4bb0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x4a8>  // b.none
    4920:	lsr	x4, x0, #1
    4924:	mov	w2, #0x39                  	// #57
    4928:	sub	w2, w2, w4
    492c:	cmp	x0, #0x1f
    4930:	ldr	x3, [x3, x6, lsl #3]
    4934:	lsl	x2, x1, x2
    4938:	csel	x2, x2, x1, ne  // ne = any
    493c:	b	4958 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x250>
    4940:	lsr	x0, x2, #63
    4944:	lsl	x2, x2, #1
    4948:	add	x0, x0, #0x4
    494c:	ldr	x4, [x3, x0, lsl #3]
    4950:	cbz	x4, 4bd4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x4cc>
    4954:	mov	x3, x4
    4958:	ldr	x0, [x3, #8]
    495c:	and	x0, x0, #0xfffffffffffffffc
    4960:	cmp	x1, x0
    4964:	b.ne	4940 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x238>  // b.any
    4968:	ldr	x0, [x3, #16]
    496c:	cmp	x5, x3
    4970:	ccmp	x5, x0, #0x2, ls  // ls = plast
    4974:	b.hi	4a58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x350>  // b.pmore
    4978:	ldp	x25, x26, [sp, #64]
    497c:	str	x19, [x0, #24]
    4980:	str	x19, [x3, #16]
    4984:	stp	x0, x3, [x19, #16]
    4988:	str	xzr, [x19, #48]
    498c:	b	4a00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f8>
    4990:	add	x0, x0, #0x3c8
    4994:	bl	1c00 <pthread_mutex_lock@plt>
    4998:	cbz	w0, 4740 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x38>
    499c:	ldp	x19, x20, [sp, #16]
    49a0:	ldp	x21, x22, [sp, #32]
    49a4:	ldp	x29, x30, [sp], #112
    49a8:	ret
    49ac:	bl	2900 <ffi_prep_java_raw_closure@@LIBFFI_CLOSURE_7.0+0x108>
    49b0:	add	x0, x21, #0x1b0
    49b4:	ldr	w1, [x0, #960]
    49b8:	tbz	w1, #1, 4740 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x38>
    49bc:	b	4990 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x288>
    49c0:	ret
    49c4:	add	x3, x21, #0x1b0
    49c8:	mov	w1, #0x1                   	// #1
    49cc:	add	x0, x3, x2, lsl #4
    49d0:	lsl	w1, w1, w2
    49d4:	add	x0, x0, #0xa0
    49d8:	ldr	w2, [x3, #96]
    49dc:	tst	w2, w1
    49e0:	b.ne	4a4c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x344>  // b.any
    49e4:	orr	w1, w2, w1
    49e8:	mov	x2, x0
    49ec:	str	w1, [x3, #96]
    49f0:	ldp	x25, x26, [sp, #64]
    49f4:	str	x19, [x0, #16]
    49f8:	str	x19, [x2, #24]
    49fc:	stp	x2, x0, [x19, #16]
    4a00:	add	x21, x21, #0x1b0
    4a04:	ldr	w0, [x21, #960]
    4a08:	tbz	w0, #1, 499c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x294>
    4a0c:	add	x0, x21, #0x3c8
    4a10:	ldp	x19, x20, [sp, #16]
    4a14:	ldp	x21, x22, [sp, #32]
    4a18:	ldp	x29, x30, [sp], #112
    4a1c:	b	1c20 <pthread_mutex_unlock@plt>
    4a20:	ldr	x0, [x3, #8]
    4a24:	and	x2, x0, #0x3
    4a28:	cmp	x2, #0x3
    4a2c:	b.ne	47c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>  // b.any
    4a30:	str	x1, [x6, #8]
    4a34:	and	x0, x0, #0xfffffffffffffffe
    4a38:	str	x0, [x3, #8]
    4a3c:	orr	x0, x1, #0x1
    4a40:	str	x0, [x19, #8]
    4a44:	str	x1, [x3]
    4a48:	b	4a00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f8>
    4a4c:	ldr	x2, [x0, #16]
    4a50:	cmp	x5, x2
    4a54:	b.ls	49f0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2e8>  // b.plast
    4a58:	stp	x23, x24, [sp, #48]
    4a5c:	stp	x27, x28, [sp, #80]
    4a60:	bl	1ae0 <abort@plt>
    4a64:	mov	w2, #0x80000000            	// #-2147483648
    4a68:	mov	x7, #0x348                 	// #840
    4a6c:	mov	x0, #0x1f                  	// #31
    4a70:	mov	x6, #0x69                  	// #105
    4a74:	b	4904 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1fc>
    4a78:	cmp	x3, x2
    4a7c:	ldr	x8, [x3, #48]
    4a80:	b.eq	4cfc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5f4>  // b.none
    4a84:	ldr	x0, [x3, #16]
    4a88:	cmp	x5, x0
    4a8c:	b.hi	4a58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x350>  // b.pmore
    4a90:	str	x2, [x0, #24]
    4a94:	str	x0, [x2, #16]
    4a98:	cbz	x8, 4848 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x140>
    4a9c:	ldr	x4, [x3, #56]
    4aa0:	add	x0, x21, #0x1b0
    4aa4:	add	x0, x0, #0x60
    4aa8:	add	x4, x4, #0x4a
    4aac:	ldr	x6, [x0, x4, lsl #3]
    4ab0:	cmp	x3, x6
    4ab4:	b.eq	4c7c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x574>  // b.none
    4ab8:	cmp	x5, x8
    4abc:	b.hi	4a58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x350>  // b.pmore
    4ac0:	ldr	x0, [x8, #32]
    4ac4:	cmp	x3, x0
    4ac8:	b.eq	4d9c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x694>  // b.none
    4acc:	str	x2, [x8, #40]
    4ad0:	cbz	x2, 4848 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x140>
    4ad4:	cmp	x5, x2
    4ad8:	b.hi	4a58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x350>  // b.pmore
    4adc:	ldr	x0, [x3, #32]
    4ae0:	str	x8, [x2, #48]
    4ae4:	cbz	x0, 4af8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x3f0>
    4ae8:	cmp	x5, x0
    4aec:	b.hi	4a58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x350>  // b.pmore
    4af0:	str	x0, [x2, #32]
    4af4:	str	x2, [x0, #48]
    4af8:	ldr	x0, [x3, #40]
    4afc:	cbz	x0, 4848 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x140>
    4b00:	cmp	x5, x0
    4b04:	b.hi	4a58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x350>  // b.pmore
    4b08:	str	x0, [x2, #40]
    4b0c:	str	x2, [x0, #48]
    4b10:	b	4848 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x140>
    4b14:	cmp	x19, x4
    4b18:	ldr	x7, [x19, #48]
    4b1c:	b.eq	4d38 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x630>  // b.none
    4b20:	ldr	x0, [x19, #16]
    4b24:	cmp	x5, x0
    4b28:	b.hi	53dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcd4>  // b.pmore
    4b2c:	str	x4, [x0, #24]
    4b30:	str	x0, [x4, #16]
    4b34:	cbz	x7, 47c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    4b38:	ldr	x2, [x19, #56]
    4b3c:	add	x0, x21, #0x1b0
    4b40:	add	x0, x0, #0x60
    4b44:	add	x2, x2, #0x4a
    4b48:	ldr	x6, [x0, x2, lsl #3]
    4b4c:	cmp	x19, x6
    4b50:	b.eq	4c84 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x57c>  // b.none
    4b54:	cmp	x5, x7
    4b58:	b.hi	53dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcd4>  // b.pmore
    4b5c:	ldr	x0, [x7, #32]
    4b60:	cmp	x19, x0
    4b64:	b.eq	4da4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x69c>  // b.none
    4b68:	str	x4, [x7, #40]
    4b6c:	cbz	x4, 47c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    4b70:	cmp	x5, x4
    4b74:	b.hi	53dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcd4>  // b.pmore
    4b78:	ldr	x0, [x19, #32]
    4b7c:	str	x7, [x4, #48]
    4b80:	cbz	x0, 4b94 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x48c>
    4b84:	cmp	x5, x0
    4b88:	b.hi	53dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcd4>  // b.pmore
    4b8c:	str	x0, [x4, #32]
    4b90:	str	x4, [x0, #48]
    4b94:	ldr	x0, [x19, #40]
    4b98:	cbz	x0, 47c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    4b9c:	cmp	x5, x0
    4ba0:	b.hi	53dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcd4>  // b.pmore
    4ba4:	str	x0, [x4, #40]
    4ba8:	str	x4, [x0, #48]
    4bac:	b	47c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    4bb0:	dup	v0.2d, x19
    4bb4:	str	x19, [x3, x6, lsl #3]
    4bb8:	orr	w2, w4, w2
    4bbc:	add	x7, x3, x7
    4bc0:	ldp	x25, x26, [sp, #64]
    4bc4:	str	w2, [x3, #4]
    4bc8:	str	q0, [x19, #16]
    4bcc:	str	x7, [x19, #48]
    4bd0:	b	4a00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f8>
    4bd4:	add	x1, x3, x0, lsl #3
    4bd8:	cmp	x5, x1
    4bdc:	b.hi	4a58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x350>  // b.pmore
    4be0:	dup	v0.2d, x19
    4be4:	str	x19, [x3, x0, lsl #3]
    4be8:	ldp	x25, x26, [sp, #64]
    4bec:	str	x3, [x19, #48]
    4bf0:	str	q0, [x19, #16]
    4bf4:	b	4a00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f8>
    4bf8:	and	x2, x2, #0xfffffffffffffffe
    4bfc:	add	x0, x0, #0x3f8
    4c00:	add	x1, x1, x2
    4c04:	sub	x19, x19, x2
    4c08:	add	x20, x1, #0x20
    4c0c:	nop
    4c10:	ldr	x2, [x0]
    4c14:	cmp	x19, x2
    4c18:	b.cc	4c2c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x524>  // b.lo, b.ul, b.last
    4c1c:	ldr	x3, [x0, #8]
    4c20:	add	x2, x2, x3
    4c24:	cmp	x19, x2
    4c28:	b.cc	4c8c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x584>  // b.lo, b.ul, b.last
    4c2c:	ldr	x0, [x0, #16]
    4c30:	cbnz	x0, 4c10 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x508>
    4c34:	mov	x0, x19
    4c38:	mov	x1, x20
    4c3c:	bl	1b80 <munmap@plt>
    4c40:	cbnz	w0, 4a00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f8>
    4c44:	add	x0, x21, #0x1b0
    4c48:	ldr	x1, [x0, #944]
    4c4c:	sub	x1, x1, x20
    4c50:	str	x1, [x0, #944]
    4c54:	b	4a00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f8>
    4c58:	ldr	x0, [x4, #8]
    4c5c:	ldp	x25, x26, [sp, #64]
    4c60:	add	x1, x1, x0
    4c64:	str	x1, [x4, #8]
    4c68:	orr	x0, x1, #0x1
    4c6c:	str	x19, [x4, #32]
    4c70:	str	x0, [x19, #8]
    4c74:	str	x1, [x19, x1]
    4c78:	b	4a00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f8>
    4c7c:	str	x2, [x0, x4, lsl #3]
    4c80:	b	4ad4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x3cc>
    4c84:	str	x4, [x0, x2, lsl #3]
    4c88:	b	4b70 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x468>
    4c8c:	ldr	x0, [x0, #24]
    4c90:	add	x0, x19, x0
    4c94:	cmp	x19, x0
    4c98:	b.eq	4c34 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x52c>  // b.none
    4c9c:	mov	x1, x20
    4ca0:	bl	1b80 <munmap@plt>
    4ca4:	cbz	w0, 4c34 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x52c>
    4ca8:	b	4a00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f8>
    4cac:	ldr	x0, [x4, #16]
    4cb0:	str	x19, [x4, #40]
    4cb4:	cmp	x19, x7
    4cb8:	add	x1, x1, x0
    4cbc:	str	x1, [x4, #16]
    4cc0:	orr	x0, x1, #0x1
    4cc4:	str	x0, [x19, #8]
    4cc8:	b.eq	4d90 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x688>  // b.none
    4ccc:	add	x20, x21, #0x1b0
    4cd0:	ldr	x0, [x20, #144]
    4cd4:	cmp	x1, x0
    4cd8:	b.hi	4dac <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6a4>  // b.pmore
    4cdc:	ldp	x25, x26, [sp, #64]
    4ce0:	b	4a00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f8>
    4ce4:	ldr	w3, [x6, #96]
    4ce8:	mov	w2, #0x1                   	// #1
    4cec:	lsl	w0, w2, w0
    4cf0:	bic	w0, w3, w0
    4cf4:	str	w0, [x6, #96]
    4cf8:	b	4848 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x140>
    4cfc:	ldr	x0, [x3, #40]
    4d00:	add	x4, x3, #0x28
    4d04:	cbz	x0, 50dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x9d4>
    4d08:	mov	x6, x4
    4d0c:	mov	x2, x0
    4d10:	add	x4, x0, #0x28
    4d14:	ldr	x0, [x0, #40]
    4d18:	cbnz	x0, 4d08 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x600>
    4d1c:	ldr	x0, [x2, #32]
    4d20:	add	x4, x2, #0x20
    4d24:	cbnz	x0, 4d08 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x600>
    4d28:	cmp	x5, x6
    4d2c:	b.hi	4a58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x350>  // b.pmore
    4d30:	str	xzr, [x6]
    4d34:	b	4a98 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x390>
    4d38:	ldr	x0, [x19, #40]
    4d3c:	add	x2, x19, #0x28
    4d40:	cbz	x0, 50ec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x9e4>
    4d44:	nop
    4d48:	mov	x6, x2
    4d4c:	mov	x4, x0
    4d50:	add	x2, x0, #0x28
    4d54:	ldr	x0, [x0, #40]
    4d58:	cbnz	x0, 4d48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x640>
    4d5c:	ldr	x0, [x4, #32]
    4d60:	add	x2, x4, #0x20
    4d64:	cbnz	x0, 4d48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x640>
    4d68:	cmp	x5, x6
    4d6c:	b.hi	53dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcd4>  // b.pmore
    4d70:	str	xzr, [x6]
    4d74:	b	4b34 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x42c>
    4d78:	ldr	w6, [x0, #96]
    4d7c:	mov	w4, #0x1                   	// #1
    4d80:	lsl	w2, w4, w2
    4d84:	bic	w2, w6, w2
    4d88:	str	w2, [x0, #96]
    4d8c:	b	47c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    4d90:	str	xzr, [x4, #8]
    4d94:	str	xzr, [x4, #32]
    4d98:	b	4ccc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x5c4>
    4d9c:	str	x2, [x8, #32]
    4da0:	b	4ad0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x3c8>
    4da4:	str	x4, [x7, #32]
    4da8:	b	4b6c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x464>
    4dac:	stp	x23, x24, [sp, #48]
    4db0:	cmp	x1, #0x48
    4db4:	b.ls	4e80 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x778>  // b.plast
    4db8:	add	x20, x20, #0x3f8
    4dbc:	b	4dc8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6c0>
    4dc0:	ldr	x20, [x20, #16]
    4dc4:	cbz	x20, 53ec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xce4>
    4dc8:	ldr	x0, [x20]
    4dcc:	cmp	x19, x0
    4dd0:	b.cc	4dc0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6b8>  // b.lo, b.ul, b.last
    4dd4:	ldr	x4, [x20, #8]
    4dd8:	add	x3, x0, x4
    4ddc:	cmp	x19, x3
    4de0:	b.cs	4dc0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x6b8>  // b.hs, b.nlast
    4de4:	add	x2, x21, #0x1b0
    4de8:	ldr	x5, [x2, #16]
    4dec:	sub	x23, x5, #0x49
    4df0:	add	x1, x23, x1
    4df4:	udiv	x23, x1, x5
    4df8:	sub	x23, x23, #0x1
    4dfc:	mul	x1, x23, x5
    4e00:	str	x1, [sp, #104]
    4e04:	cmp	x1, x4
    4e08:	b.hi	4e80 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x778>  // b.pmore
    4e0c:	add	x1, x2, #0x3f8
    4e10:	cmp	x0, x1
    4e14:	b.hi	4e20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x718>  // b.pmore
    4e18:	cmp	x3, x1
    4e1c:	b.hi	4e80 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x778>  // b.pmore
    4e20:	ldr	x1, [x1, #16]
    4e24:	cbnz	x1, 4e10 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x708>
    4e28:	ldr	x1, [sp, #104]
    4e2c:	sub	x4, x4, x1
    4e30:	add	x1, x21, #0x1b0
    4e34:	add	x19, x0, x4
    4e38:	add	x0, x1, #0x3f8
    4e3c:	nop
    4e40:	ldr	x1, [x0]
    4e44:	cmp	x19, x1
    4e48:	b.cc	4e5c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x754>  // b.lo, b.ul, b.last
    4e4c:	ldr	x2, [x0, #8]
    4e50:	add	x1, x1, x2
    4e54:	cmp	x19, x1
    4e58:	b.cc	5328 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc20>  // b.lo, b.ul, b.last
    4e5c:	ldr	x0, [x0, #16]
    4e60:	cbnz	x0, 4e40 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x738>
    4e64:	mov	x0, x19
    4e68:	ldr	x19, [sp, #104]
    4e6c:	mov	x1, x19
    4e70:	bl	1b80 <munmap@plt>
    4e74:	cmp	w0, #0x0
    4e78:	ccmp	x19, #0x0, #0x4, eq  // eq = none
    4e7c:	b.ne	5348 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc40>  // b.any
    4e80:	add	x0, x21, #0x1b0
    4e84:	str	xzr, [sp, #104]
    4e88:	ldr	x26, [x0, #1032]
    4e8c:	cbz	x26, 5144 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa3c>
    4e90:	add	x5, x21, #0x1b0
    4e94:	stp	x27, x28, [sp, #80]
    4e98:	add	x23, x5, #0x3f8
    4e9c:	add	x24, x5, #0x60
    4ea0:	str	x5, [sp, #96]
    4ea4:	nop
    4ea8:	ldr	x19, [x26]
    4eac:	mov	x28, x26
    4eb0:	ldr	x26, [x26, #16]
    4eb4:	neg	x20, x19
    4eb8:	and	x20, x20, #0x7
    4ebc:	tst	x19, #0x7
    4ec0:	add	x20, x19, x20
    4ec4:	csel	x20, x20, x19, ne  // ne = any
    4ec8:	ldr	x0, [x20, #8]
    4ecc:	tbnz	w0, #1, 5000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8f8>
    4ed0:	ldr	x22, [x28, #8]
    4ed4:	and	x27, x0, #0xfffffffffffffffc
    4ed8:	add	x2, x20, x27
    4edc:	sub	x0, x22, #0x48
    4ee0:	add	x0, x19, x0
    4ee4:	cmp	x2, x0
    4ee8:	b.cc	5000 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8f8>  // b.lo, b.ul, b.last
    4eec:	ldr	x0, [x24, #32]
    4ef0:	cmp	x0, x20
    4ef4:	b.eq	50fc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x9f4>  // b.none
    4ef8:	ldr	x2, [x20, #24]
    4efc:	ldr	x7, [x20, #48]
    4f00:	cmp	x2, x20
    4f04:	b.eq	515c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa54>  // b.none
    4f08:	ldr	x3, [x20, #16]
    4f0c:	ldr	x0, [x24, #24]
    4f10:	cmp	x3, x0
    4f14:	b.cc	4a60 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x358>  // b.lo, b.ul, b.last
    4f18:	str	x2, [x3, #24]
    4f1c:	str	x3, [x2, #16]
    4f20:	cbz	x7, 4f90 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x888>
    4f24:	ldr	x3, [x20, #56]
    4f28:	add	x3, x3, #0x4a
    4f2c:	ldr	x6, [x24, x3, lsl #3]
    4f30:	cmp	x6, x20
    4f34:	b.eq	5240 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb38>  // b.none
    4f38:	cmp	x7, x0
    4f3c:	b.cc	4a60 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x358>  // b.lo, b.ul, b.last
    4f40:	ldr	x3, [x7, #32]
    4f44:	cmp	x3, x20
    4f48:	b.eq	52dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbd4>  // b.none
    4f4c:	str	x2, [x7, #40]
    4f50:	cbz	x2, 4f90 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x888>
    4f54:	cmp	x0, x2
    4f58:	b.hi	4a60 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x358>  // b.pmore
    4f5c:	ldr	x3, [x20, #32]
    4f60:	str	x7, [x2, #48]
    4f64:	cbz	x3, 4f78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x870>
    4f68:	cmp	x0, x3
    4f6c:	b.hi	4a60 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x358>  // b.pmore
    4f70:	str	x3, [x2, #32]
    4f74:	str	x2, [x3, #48]
    4f78:	ldr	x3, [x20, #40]
    4f7c:	cbz	x3, 4f90 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x888>
    4f80:	cmp	x0, x3
    4f84:	b.hi	4a60 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x358>  // b.pmore
    4f88:	str	x3, [x2, #40]
    4f8c:	str	x2, [x3, #48]
    4f90:	ldr	x0, [sp, #96]
    4f94:	add	x0, x0, #0x3f8
    4f98:	ldr	x2, [x0]
    4f9c:	cmp	x19, x2
    4fa0:	b.cc	4fb4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8ac>  // b.lo, b.ul, b.last
    4fa4:	ldr	x3, [x0, #8]
    4fa8:	add	x2, x2, x3
    4fac:	cmp	x19, x2
    4fb0:	b.cc	5008 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x900>  // b.lo, b.ul, b.last
    4fb4:	ldr	x0, [x0, #16]
    4fb8:	cbnz	x0, 4f98 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x890>
    4fbc:	mov	x0, x19
    4fc0:	mov	x1, x22
    4fc4:	bl	1b80 <munmap@plt>
    4fc8:	cbnz	w0, 5024 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x91c>
    4fcc:	ldr	x0, [x24, #848]
    4fd0:	add	x25, x25, x22
    4fd4:	sub	x0, x0, x22
    4fd8:	str	x0, [x24, #848]
    4fdc:	str	x26, [x23, #16]
    4fe0:	cbnz	x26, 4ea8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x7a0>
    4fe4:	ldr	x0, [sp, #104]
    4fe8:	cmn	x0, x25
    4fec:	b.eq	5140 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa38>  // b.none
    4ff0:	ldp	x23, x24, [sp, #48]
    4ff4:	ldp	x25, x26, [sp, #64]
    4ff8:	ldp	x27, x28, [sp, #80]
    4ffc:	b	4a00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f8>
    5000:	mov	x23, x28
    5004:	b	4fe0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8d8>
    5008:	ldr	x0, [x0, #24]
    500c:	add	x0, x19, x0
    5010:	cmp	x19, x0
    5014:	b.eq	4fbc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8b4>  // b.none
    5018:	mov	x1, x22
    501c:	bl	1b80 <munmap@plt>
    5020:	cbz	w0, 4fbc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8b4>
    5024:	cmp	xzr, x27, lsr #8
    5028:	lsr	x0, x27, #8
    502c:	b.eq	5130 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa28>  // b.none
    5030:	mov	x1, #0xffff                	// #65535
    5034:	cmp	x0, x1
    5038:	b.hi	5248 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb40>  // b.pmore
    503c:	sub	w2, w0, #0x100
    5040:	mov	w1, #0x1                   	// #1
    5044:	lsr	w2, w2, #16
    5048:	and	w2, w2, #0x8
    504c:	lsl	w0, w0, w2
    5050:	sub	w3, w0, #0x1, lsl #12
    5054:	lsr	w3, w3, #16
    5058:	and	w3, w3, #0x4
    505c:	orr	w2, w2, w3
    5060:	lsl	w0, w0, w3
    5064:	sub	w3, w0, #0x4, lsl #12
    5068:	lsr	w3, w3, #16
    506c:	and	w3, w3, #0x2
    5070:	add	w2, w2, w3
    5074:	lsl	w0, w0, w3
    5078:	lsr	w0, w0, #15
    507c:	sub	w0, w0, w2
    5080:	add	w2, w0, #0x15
    5084:	add	w0, w0, #0xe
    5088:	lsr	x2, x27, x2
    508c:	lsl	w0, w0, #1
    5090:	and	x2, x2, #0x1
    5094:	add	x0, x2, x0
    5098:	add	x5, x0, #0x4a
    509c:	lsl	w3, w1, w0
    50a0:	lsl	x2, x5, #3
    50a4:	ldr	w1, [x24, #4]
    50a8:	stp	xzr, xzr, [x20, #32]
    50ac:	tst	w1, w3
    50b0:	str	x0, [x20, #56]
    50b4:	b.ne	51cc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xac4>  // b.any
    50b8:	dup	v0.2d, x20
    50bc:	str	x20, [x24, x5, lsl #3]
    50c0:	orr	w1, w1, w3
    50c4:	add	x2, x24, x2
    50c8:	mov	x23, x28
    50cc:	str	w1, [x24, #4]
    50d0:	str	x2, [x20, #48]
    50d4:	str	q0, [x20, #16]
    50d8:	b	4fe0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8d8>
    50dc:	ldr	x0, [x3, #32]
    50e0:	cbz	x0, 525c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb54>
    50e4:	add	x4, x3, #0x20
    50e8:	b	4d08 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x600>
    50ec:	ldr	x0, [x19, #32]
    50f0:	cbz	x0, 529c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb94>
    50f4:	add	x2, x19, #0x20
    50f8:	b	4d48 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x640>
    50fc:	str	xzr, [x24, #8]
    5100:	str	xzr, [x24, #32]
    5104:	b	4f90 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x888>
    5108:	cmp	x5, x3
    510c:	b.hi	4a58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x350>  // b.pmore
    5110:	cmp	x0, x2
    5114:	b.eq	4840 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x138>  // b.none
    5118:	b	4834 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12c>
    511c:	cmp	x5, x7
    5120:	b.hi	53dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcd4>  // b.pmore
    5124:	cmp	x2, x4
    5128:	b.eq	47c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb8>  // b.none
    512c:	b	47b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xb0>
    5130:	mov	x2, #0x250                 	// #592
    5134:	mov	w3, #0x1                   	// #1
    5138:	mov	x5, #0x4a                  	// #74
    513c:	b	50a4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x99c>
    5140:	ldp	x27, x28, [sp, #80]
    5144:	add	x0, x21, #0x1b0
    5148:	mov	x1, #0xffffffffffffffff    	// #-1
    514c:	ldp	x23, x24, [sp, #48]
    5150:	ldp	x25, x26, [sp, #64]
    5154:	str	x1, [x0, #144]
    5158:	b	4a00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f8>
    515c:	ldr	x0, [x20, #40]
    5160:	add	x3, x20, #0x28
    5164:	cbnz	x0, 5198 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa90>
    5168:	ldr	x0, [x20, #32]
    516c:	cbnz	x0, 5194 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa8c>
    5170:	cbz	x7, 4f90 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x888>
    5174:	ldr	x3, [x20, #56]
    5178:	add	x2, x3, #0x4a
    517c:	ldr	x0, [x24, x2, lsl #3]
    5180:	cmp	x0, x20
    5184:	b.eq	530c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc04>  // b.none
    5188:	mov	x2, #0x0                   	// #0
    518c:	ldr	x0, [x24, #24]
    5190:	b	4f38 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x830>
    5194:	add	x3, x20, #0x20
    5198:	mov	x6, x3
    519c:	mov	x2, x0
    51a0:	add	x3, x0, #0x28
    51a4:	ldr	x0, [x0, #40]
    51a8:	cbnz	x0, 5198 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa90>
    51ac:	ldr	x0, [x2, #32]
    51b0:	add	x3, x2, #0x20
    51b4:	cbnz	x0, 5198 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xa90>
    51b8:	ldr	x0, [x24, #24]
    51bc:	cmp	x0, x6
    51c0:	b.hi	4a60 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x358>  // b.pmore
    51c4:	str	xzr, [x6]
    51c8:	b	4f20 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x818>
    51cc:	lsr	x1, x0, #1
    51d0:	cmp	x0, #0x1f
    51d4:	mov	w0, #0x39                  	// #57
    51d8:	sub	w1, w0, w1
    51dc:	csel	w1, w1, wzr, ne  // ne = any
    51e0:	ldr	x2, [x24, x5, lsl #3]
    51e4:	lsl	x1, x27, x1
    51e8:	b	5204 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xafc>
    51ec:	lsr	x0, x1, #63
    51f0:	lsl	x1, x1, #1
    51f4:	add	x0, x0, #0x4
    51f8:	ldr	x3, [x2, x0, lsl #3]
    51fc:	cbz	x3, 52e4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xbdc>
    5200:	mov	x2, x3
    5204:	ldr	x0, [x2, #8]
    5208:	and	x0, x0, #0xfffffffffffffffc
    520c:	cmp	x27, x0
    5210:	b.ne	51ec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xae4>  // b.any
    5214:	ldr	x0, [x2, #16]
    5218:	ldr	x1, [x24, #24]
    521c:	cmp	x0, x1
    5220:	ccmp	x2, x1, #0x0, cs  // cs = hs, nlast
    5224:	b.cc	4a60 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x358>  // b.lo, b.ul, b.last
    5228:	str	x20, [x0, #24]
    522c:	mov	x23, x28
    5230:	str	x20, [x2, #16]
    5234:	stp	x0, x2, [x20, #16]
    5238:	str	xzr, [x20, #48]
    523c:	b	4fe0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8d8>
    5240:	str	x2, [x24, x3, lsl #3]
    5244:	b	4f54 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x84c>
    5248:	mov	x2, #0x348                 	// #840
    524c:	mov	w3, #0x80000000            	// #-2147483648
    5250:	mov	x0, #0x1f                  	// #31
    5254:	mov	x5, #0x69                  	// #105
    5258:	b	50a4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x99c>
    525c:	cbz	x8, 4848 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x140>
    5260:	ldr	x9, [x3, #56]
    5264:	add	x4, x21, #0x1b0
    5268:	add	x4, x4, #0x60
    526c:	mov	x2, #0x0                   	// #0
    5270:	add	x6, x9, #0x4a
    5274:	ldr	x0, [x4, x6, lsl #3]
    5278:	cmp	x3, x0
    527c:	b.ne	4ab8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x3b0>  // b.any
    5280:	ldr	w2, [x4, #4]
    5284:	mov	w0, #0x1                   	// #1
    5288:	lsl	w0, w0, w9
    528c:	str	xzr, [x4, x6, lsl #3]
    5290:	bic	w0, w2, w0
    5294:	str	w0, [x4, #4]
    5298:	b	4848 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x140>
    529c:	cbz	x7, 47c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    52a0:	ldr	x8, [x19, #56]
    52a4:	add	x2, x21, #0x1b0
    52a8:	add	x2, x2, #0x60
    52ac:	mov	x4, #0x0                   	// #0
    52b0:	add	x6, x8, #0x4a
    52b4:	ldr	x0, [x2, x6, lsl #3]
    52b8:	cmp	x19, x0
    52bc:	b.ne	4b54 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x44c>  // b.any
    52c0:	ldr	w4, [x2, #4]
    52c4:	mov	w0, #0x1                   	// #1
    52c8:	lsl	w0, w0, w8
    52cc:	str	xzr, [x2, x6, lsl #3]
    52d0:	bic	w0, w4, w0
    52d4:	str	w0, [x2, #4]
    52d8:	b	47c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc0>
    52dc:	str	x2, [x7, #32]
    52e0:	b	4f50 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x848>
    52e4:	ldr	x3, [x24, #24]
    52e8:	add	x1, x2, x0, lsl #3
    52ec:	cmp	x3, x1
    52f0:	b.hi	4a60 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x358>  // b.pmore
    52f4:	dup	v0.2d, x20
    52f8:	str	x20, [x2, x0, lsl #3]
    52fc:	mov	x23, x28
    5300:	str	x2, [x20, #48]
    5304:	str	q0, [x20, #16]
    5308:	b	4fe0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x8d8>
    530c:	ldr	w6, [x24, #4]
    5310:	mov	w0, #0x1                   	// #1
    5314:	lsl	w0, w0, w3
    5318:	str	xzr, [x24, x2, lsl #3]
    531c:	bic	w0, w6, w0
    5320:	str	w0, [x24, #4]
    5324:	b	4f90 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x888>
    5328:	ldr	x0, [x0, #24]
    532c:	add	x0, x19, x0
    5330:	cmp	x19, x0
    5334:	b.eq	4e64 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x75c>  // b.none
    5338:	ldr	x1, [sp, #104]
    533c:	bl	1b80 <munmap@plt>
    5340:	cbz	w0, 4e64 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x75c>
    5344:	b	4e80 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x778>
    5348:	add	x2, x21, #0x1b0
    534c:	ldr	x0, [x20, #8]
    5350:	ldr	x4, [sp, #104]
    5354:	ldr	x3, [x2, #944]
    5358:	sub	x0, x0, x4
    535c:	ldr	x1, [x2, #112]
    5360:	str	x0, [x20, #8]
    5364:	ldr	x0, [x2, #136]
    5368:	sub	x3, x3, x4
    536c:	str	x3, [x2, #944]
    5370:	sub	x1, x1, x4
    5374:	add	x2, x0, #0x10
    5378:	ands	x4, x0, #0x7
    537c:	b.eq	5388 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xc80>  // b.none
    5380:	neg	x4, x2
    5384:	and	x4, x4, #0x7
    5388:	add	x3, x21, #0x1b0
    538c:	add	x5, x0, x4
    5390:	add	x0, x0, x1
    5394:	sub	x1, x1, x4
    5398:	orr	x6, x1, #0x1
    539c:	mov	x4, #0x48                  	// #72
    53a0:	str	x1, [x3, #112]
    53a4:	str	x5, [x3, #136]
    53a8:	ldr	x26, [x3, #1032]
    53ac:	str	x6, [x5, #8]
    53b0:	str	x4, [x0, #8]
    53b4:	ldr	x0, [x3, #32]
    53b8:	str	x0, [x3, #144]
    53bc:	cbnz	x26, 4e90 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x788>
    53c0:	ldp	x23, x24, [sp, #48]
    53c4:	ldp	x25, x26, [sp, #64]
    53c8:	b	4a00 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x2f8>
    53cc:	stp	x23, x24, [sp, #48]
    53d0:	stp	x25, x26, [sp, #64]
    53d4:	stp	x27, x28, [sp, #80]
    53d8:	bl	1ae0 <abort@plt>
    53dc:	stp	x23, x24, [sp, #48]
    53e0:	stp	x25, x26, [sp, #64]
    53e4:	stp	x27, x28, [sp, #80]
    53e8:	bl	1ae0 <abort@plt>
    53ec:	stp	x27, x28, [sp, #80]
    53f0:	ldr	x0, [x20, #8]
    53f4:	brk	#0x3e8
    53f8:	cbz	x0, 5448 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd40>
    53fc:	ldr	x1, [x0]
    5400:	cbz	x1, 5448 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd40>
    5404:	stp	x29, x30, [sp, #-32]!
    5408:	mov	x29, sp
    540c:	str	x19, [sp, #16]
    5410:	add	x19, x0, #0x8
    5414:	ldrh	w0, [x1, #10]
    5418:	and	w2, w0, #0xfffffffd
    541c:	cmp	w2, #0xd
    5420:	b.ne	5430 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd28>  // b.any
    5424:	ldr	x0, [x1, #16]
    5428:	bl	53f8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcf0>
    542c:	tbnz	w0, #31, 543c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd34>
    5430:	ldr	x19, [sp, #16]
    5434:	ldp	x29, x30, [sp], #32
    5438:	ret
    543c:	ldr	x1, [x19], #8
    5440:	cbnz	x1, 5414 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd0c>
    5444:	b	5430 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd28>
    5448:	mov	w0, #0xffffffff            	// #-1
    544c:	ret
    5450:	cbz	x0, 54b0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xda8>
    5454:	ldr	x2, [x0]
    5458:	cbz	x2, 54b0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xda8>
    545c:	stp	x29, x30, [sp, #-32]!
    5460:	mov	x29, sp
    5464:	stp	x19, x20, [sp, #16]
    5468:	mov	w20, w1
    546c:	add	x19, x0, #0x8
    5470:	b	5484 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd7c>
    5474:	cmp	w0, w20
    5478:	b.ne	54c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdc0>  // b.any
    547c:	ldr	x2, [x19], #8
    5480:	cbz	x2, 54b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdb0>
    5484:	ldrh	w0, [x2, #10]
    5488:	and	w3, w0, #0xfffffffd
    548c:	cmp	w3, #0xd
    5490:	b.ne	5474 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd6c>  // b.any
    5494:	ldr	x0, [x2, #16]
    5498:	mov	w1, w20
    549c:	bl	5450 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd48>
    54a0:	cbnz	w0, 547c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd74>
    54a4:	ldp	x19, x20, [sp, #16]
    54a8:	ldp	x29, x30, [sp], #32
    54ac:	ret
    54b0:	mov	w0, #0x1                   	// #1
    54b4:	ret
    54b8:	mov	w0, #0x1                   	// #1
    54bc:	ldp	x19, x20, [sp, #16]
    54c0:	ldp	x29, x30, [sp], #32
    54c4:	ret
    54c8:	mov	w0, #0x0                   	// #0
    54cc:	ldp	x19, x20, [sp, #16]
    54d0:	ldp	x29, x30, [sp], #32
    54d4:	ret
    54d8:	ldrh	w1, [x0, #10]
    54dc:	mov	x2, x0
    54e0:	cmp	w1, #0xd
    54e4:	b.eq	5548 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe40>  // b.none
    54e8:	b.hi	5510 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe08>  // b.pmore
    54ec:	sub	w2, w1, #0x2
    54f0:	mov	w0, #0x0                   	// #0
    54f4:	and	w2, w2, #0xffff
    54f8:	cmp	w2, #0x2
    54fc:	b.hi	5544 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe3c>  // b.pmore
    5500:	mov	w4, w1
    5504:	mov	w0, #0x3                   	// #3
    5508:	add	w0, w0, w4, lsl #2
    550c:	ret
    5510:	cmp	w1, #0xf
    5514:	mov	w0, #0x0                   	// #0
    5518:	b.ne	550c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe04>  // b.any
    551c:	ldr	x1, [x2, #16]
    5520:	ldr	x1, [x1]
    5524:	ldrh	w1, [x1, #10]
    5528:	sub	w2, w1, #0x2
    552c:	cmp	w2, #0x2
    5530:	b.hi	550c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe04>  // b.pmore
    5534:	mov	w4, w1
    5538:	mov	w0, #0x2                   	// #2
    553c:	add	w0, w0, w4, lsl #2
    5540:	b	550c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe04>
    5544:	ret
    5548:	ldr	x10, [x2]
    554c:	mov	w0, #0x0                   	// #0
    5550:	sub	x1, x10, #0x4
    5554:	cmp	x1, #0x3c
    5558:	b.hi	550c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe04>  // b.pmore
    555c:	stp	x29, x30, [sp, #-16]!
    5560:	mov	x29, sp
    5564:	ldr	x8, [x2, #16]
    5568:	ldr	x6, [x8]
    556c:	ldrh	w7, [x6, #10]
    5570:	and	w9, w7, #0xfffffffd
    5574:	mov	w4, w7
    5578:	cmp	w9, #0xd
    557c:	b.ne	55c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xeb8>  // b.any
    5580:	mov	x5, x8
    5584:	nop
    5588:	ldr	x0, [x5]
    558c:	ldr	x0, [x0, #16]
    5590:	cbz	x0, 55ec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xee4>
    5594:	ldr	x2, [x0]
    5598:	cbz	x2, 55ec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xee4>
    559c:	add	x3, x0, #0x8
    55a0:	ldrh	w1, [x2, #10]
    55a4:	and	w0, w1, #0xfffffffd
    55a8:	cmp	w0, #0xd
    55ac:	b.ne	55f4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xeec>  // b.any
    55b0:	ldr	x0, [x2, #16]
    55b4:	bl	53f8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcf0>
    55b8:	mov	w4, w0
    55bc:	tbnz	w0, #31, 55e4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xedc>
    55c0:	cmp	w4, #0x3
    55c4:	b.eq	55fc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xef4>  // b.none
    55c8:	cmp	w4, #0x4
    55cc:	b.eq	5694 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf8c>  // b.none
    55d0:	cmp	w4, #0x2
    55d4:	mov	w0, #0x0                   	// #0
    55d8:	b.eq	56a8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfa0>  // b.none
    55dc:	ldp	x29, x30, [sp], #16
    55e0:	ret
    55e4:	ldr	x2, [x3], #8
    55e8:	cbnz	x2, 55a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe98>
    55ec:	add	x5, x5, #0x8
    55f0:	b	5588 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xe80>
    55f4:	mov	w4, w1
    55f8:	b	55c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xeb8>
    55fc:	tst	x10, #0x7
    5600:	mov	w0, #0x0                   	// #0
    5604:	b.ne	55dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xed4>  // b.any
    5608:	lsr	x10, x10, #3
    560c:	cmp	x10, #0x4
    5610:	mov	w0, #0x0                   	// #0
    5614:	b.hi	55dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xed4>  // b.pmore
    5618:	add	x8, x8, #0x8
    561c:	b	5638 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf30>
    5620:	cmp	w4, w7
    5624:	b.ne	568c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf84>  // b.any
    5628:	ldr	x6, [x8], #8
    562c:	cbz	x6, 56b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfb0>
    5630:	ldrh	w7, [x6, #10]
    5634:	and	w9, w7, #0xfffffffd
    5638:	cmp	w9, #0xd
    563c:	b.ne	5620 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf18>  // b.any
    5640:	ldr	x5, [x6, #16]
    5644:	cbz	x5, 5628 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf20>
    5648:	ldr	x0, [x5]
    564c:	cbz	x0, 5628 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf20>
    5650:	add	x5, x5, #0x8
    5654:	b	5668 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf60>
    5658:	cmp	w4, w1
    565c:	b.ne	568c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf84>  // b.any
    5660:	ldr	x0, [x5], #8
    5664:	cbz	x0, 5628 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf20>
    5668:	ldrh	w1, [x0, #10]
    566c:	and	w2, w1, #0xfffffffd
    5670:	cmp	w2, #0xd
    5674:	b.ne	5658 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf50>  // b.any
    5678:	ldr	x0, [x0, #16]
    567c:	mov	w1, w4
    5680:	bl	5450 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd48>
    5684:	cbnz	w0, 5660 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf58>
    5688:	b	55dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xed4>
    568c:	mov	w0, #0x0                   	// #0
    5690:	b	55dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xed4>
    5694:	tst	x10, #0xf
    5698:	mov	w0, #0x0                   	// #0
    569c:	b.ne	55dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xed4>  // b.any
    56a0:	lsr	x10, x10, #4
    56a4:	b	5618 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf10>
    56a8:	tst	x10, #0x3
    56ac:	b.ne	55dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xed4>  // b.any
    56b0:	lsr	x10, x10, #2
    56b4:	b	560c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xf04>
    56b8:	mov	w0, #0x4                   	// #4
    56bc:	sub	w0, w0, w10
    56c0:	add	w0, w0, w4, lsl #2
    56c4:	b	55dc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xed4>
    56c8:	stp	x29, x30, [sp, #-176]!
    56cc:	mov	x29, sp
    56d0:	stp	x23, x24, [sp, #48]
    56d4:	mov	x24, x0
    56d8:	stp	x27, x28, [sp, #80]
    56dc:	ldr	w28, [x0, #24]
    56e0:	ldr	x0, [x0, #16]
    56e4:	stp	x4, x1, [x29, #120]
    56e8:	ldr	w1, [x24, #28]
    56ec:	stp	x19, x20, [sp, #16]
    56f0:	mov	x20, x3
    56f4:	ldr	x0, [x0]
    56f8:	stp	x21, x22, [sp, #32]
    56fc:	stp	x25, x26, [sp, #64]
    5700:	str	x0, [x29, #104]
    5704:	str	x2, [x29, #136]
    5708:	str	w1, [x29, #152]
    570c:	tbz	w1, #5, 57e4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10dc>
    5710:	cbz	x2, 5b1c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1414>
    5714:	add	x0, x28, #0xef
    5718:	str	x2, [x29, #144]
    571c:	and	x0, x0, #0x1fffffff0
    5720:	sub	sp, sp, x0
    5724:	mov	x21, sp
    5728:	add	x0, x21, #0xc0
    572c:	str	x0, [x29, #160]
    5730:	add	x0, x0, x28
    5734:	str	x0, [x29, #112]
    5738:	ldr	w0, [x24, #4]
    573c:	cmp	w0, #0x0
    5740:	b.le	5898 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1190>
    5744:	sub	w7, w0, #0x1
    5748:	mov	x22, #0x0                   	// #0
    574c:	add	x7, x7, #0x1
    5750:	mov	x19, #0x0                   	// #0
    5754:	mov	w26, #0x0                   	// #0
    5758:	mov	x23, #0x1                   	// #1
    575c:	lsl	x27, x7, #3
    5760:	mov	x28, #0x5fe2                	// #24546
    5764:	mov	x25, #0xa01c                	// #40988
    5768:	str	wzr, [x29, #168]
    576c:	b	57c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10b8>
    5770:	lsl	x6, x23, x4
    5774:	tst	x6, x28
    5778:	b.eq	581c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1114>  // b.none
    577c:	cmp	w4, #0x8
    5780:	b.eq	5ab4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13ac>  // b.none
    5784:	b.hi	593c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1234>  // b.pmore
    5788:	cmp	w4, #0x6
    578c:	b.eq	5abc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13b4>  // b.none
    5790:	cmp	w4, #0x7
    5794:	b.ne	58ec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11e4>  // b.any
    5798:	ldrh	w1, [x14]
    579c:	nop
    57a0:	cmp	w26, #0x7
    57a4:	b.hi	5908 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1200>  // b.pmore
    57a8:	add	x0, x21, w26, uxtw #3
    57ac:	add	w26, w26, #0x1
    57b0:	str	x1, [x0, #128]
    57b4:	add	x22, x22, #0x8
    57b8:	cmp	x22, x27
    57bc:	b.eq	5898 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1190>  // b.none
    57c0:	ldr	x0, [x24, #8]
    57c4:	add	x18, x20, x22
    57c8:	ldr	x14, [x20, x22]
    57cc:	ldr	x11, [x0, x22]
    57d0:	ldrh	w4, [x11, #10]
    57d4:	ldr	x15, [x11]
    57d8:	cmp	w4, #0xf
    57dc:	b.ls	5770 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1068>  // b.plast
    57e0:	bl	1ae0 <abort@plt>
    57e4:	cbz	x2, 5b54 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x144c>
    57e8:	ldr	x0, [x29, #152]
    57ec:	tbz	w0, #6, 5acc <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13c4>
    57f0:	add	x0, x28, #0xff
    57f4:	and	x0, x0, #0x1fffffff0
    57f8:	sub	sp, sp, x0
    57fc:	mov	x21, sp
    5800:	add	x0, x21, #0xc0
    5804:	str	x0, [x29, #160]
    5808:	add	x27, x0, x28
    580c:	str	x27, [x29, #112]
    5810:	add	x0, x27, #0x20
    5814:	str	x0, [x29, #144]
    5818:	b	5738 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1030>
    581c:	tst	x6, x25
    5820:	b.eq	58e4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11dc>  // b.none
    5824:	mov	x0, x11
    5828:	bl	54d8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdd0>
    582c:	cbz	w0, 5978 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1270>
    5830:	mov	w2, #0x4                   	// #4
    5834:	and	w1, w0, #0x3
    5838:	sub	w1, w2, w1
    583c:	ldr	w2, [x29, #168]
    5840:	add	w1, w1, w2
    5844:	cmp	w1, #0x8
    5848:	b.ls	59ec <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12e4>  // b.plast
    584c:	ldrh	w4, [x11, #8]
    5850:	mov	w1, #0x8                   	// #8
    5854:	str	w1, [x29, #168]
    5858:	mov	x1, #0x8                   	// #8
    585c:	cmp	x4, #0x8
    5860:	sub	x0, x19, #0x1
    5864:	csel	x4, x4, x1, cs  // cs = hs, nlast
    5868:	sub	x4, x4, #0x1
    586c:	orr	x0, x4, x0
    5870:	add	x4, x0, #0x1
    5874:	ldr	x0, [x29, #160]
    5878:	add	x19, x15, x4
    587c:	add	x0, x0, x4
    5880:	mov	x2, x15
    5884:	mov	x1, x14
    5888:	add	x22, x22, #0x8
    588c:	bl	19b0 <memcpy@plt>
    5890:	cmp	x22, x27
    5894:	b.ne	57c0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10b8>  // b.any
    5898:	ldp	x1, x5, [x29, #112]
    589c:	mov	x0, x21
    58a0:	ldr	w19, [x29, #152]
    58a4:	ldr	x2, [x29, #128]
    58a8:	mov	w4, w19
    58ac:	ldr	x3, [x29, #144]
    58b0:	bl	6290 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x328>
    58b4:	tbz	w19, #6, 58c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11bc>
    58b8:	ldp	x0, x1, [x29, #136]
    58bc:	ldr	x2, [x29, #104]
    58c0:	bl	19b0 <memcpy@plt>
    58c4:	mov	sp, x29
    58c8:	ldp	x19, x20, [sp, #16]
    58cc:	ldp	x21, x22, [sp, #32]
    58d0:	ldp	x23, x24, [sp, #48]
    58d4:	ldp	x25, x26, [sp, #64]
    58d8:	ldp	x27, x28, [sp, #80]
    58dc:	ldp	x29, x30, [sp], #176
    58e0:	ret
    58e4:	tbnz	w6, #0, 57b4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10ac>
    58e8:	bl	1ae0 <abort@plt>
    58ec:	cmp	w4, #0x1
    58f0:	b.eq	5ac4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13bc>  // b.none
    58f4:	cmp	w4, #0x5
    58f8:	b.ne	57e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10d8>  // b.any
    58fc:	ldrb	w1, [x14]
    5900:	cmp	w26, #0x7
    5904:	b.ls	57a8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10a0>  // b.plast
    5908:	ldrh	w0, [x11, #8]
    590c:	mov	x2, #0x8                   	// #8
    5910:	sub	x19, x19, #0x1
    5914:	mov	w26, #0x8                   	// #8
    5918:	cmp	x0, #0x8
    591c:	csel	x0, x0, x2, cs  // cs = hs, nlast
    5920:	sub	x0, x0, #0x1
    5924:	orr	x0, x0, x19
    5928:	ldr	x2, [x29, #160]
    592c:	add	x0, x0, #0x1
    5930:	add	x19, x0, x15
    5934:	str	x1, [x2, x0]
    5938:	b	57b4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10ac>
    593c:	cmp	w4, #0xa
    5940:	b.eq	5ac4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13bc>  // b.none
    5944:	b.ls	5968 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1260>  // b.plast
    5948:	cmp	w4, #0xc
    594c:	b.hi	5958 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1250>  // b.pmore
    5950:	ldr	x1, [x14]
    5954:	b	57a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1098>
    5958:	cmp	w4, #0xe
    595c:	b.ne	57e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10d8>  // b.any
    5960:	ldr	x1, [x14]
    5964:	b	57a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1098>
    5968:	cmp	w4, #0x9
    596c:	b.ne	57e0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10d8>  // b.any
    5970:	ldr	w1, [x14]
    5974:	b	57a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1098>
    5978:	cmp	x15, #0x10
    597c:	b.hi	59a8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12a0>  // b.pmore
    5980:	add	x1, x15, #0x7
    5984:	mov	w0, w26
    5988:	lsr	x1, x1, #3
    598c:	add	x2, x0, x1
    5990:	cmp	x2, #0x8
    5994:	b.hi	59b8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x12b0>  // b.pmore
    5998:	add	x0, x0, #0x10
    599c:	add	w26, w26, w1
    59a0:	add	x0, x21, x0, lsl #3
    59a4:	b	5880 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1178>
    59a8:	mov	x14, x18
    59ac:	mov	x15, #0x8                   	// #8
    59b0:	ldr	x1, [x14]
    59b4:	b	57a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1098>
    59b8:	ldrh	w0, [x11, #8]
    59bc:	mov	x1, #0x8                   	// #8
    59c0:	sub	x19, x19, #0x1
    59c4:	mov	w26, #0x8                   	// #8
    59c8:	cmp	x0, #0x8
    59cc:	csel	x0, x0, x1, cs  // cs = hs, nlast
    59d0:	sub	x0, x0, #0x1
    59d4:	ldr	x1, [x29, #160]
    59d8:	orr	x0, x0, x19
    59dc:	add	x0, x0, #0x1
    59e0:	add	x19, x15, x0
    59e4:	add	x0, x1, x0
    59e8:	b	5880 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1178>
    59ec:	ldr	x3, [x29, #168]
    59f0:	sub	w0, w0, #0x8
    59f4:	mov	w2, #0xc                   	// #12
    59f8:	ubfiz	x3, x3, #4, #32
    59fc:	smull	x0, w0, w2
    5a00:	add	x3, x21, x3
    5a04:	adr	x2, 5a10 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1308>
    5a08:	add	x2, x2, x0
    5a0c:	br	x2
    5a10:	ldp	s16, s17, [x14]
    5a14:	ldp	s18, s19, [x14, #8]
    5a18:	b	5a9c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1394>
    5a1c:	ldp	s16, s17, [x14]
    5a20:	ldr	s18, [x14, #8]
    5a24:	b	5aa0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1398>
    5a28:	ldp	s16, s17, [x14]
    5a2c:	b	5aa4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x139c>
    5a30:	nop
    5a34:	ldr	s16, [x14]
    5a38:	b	5aa8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13a0>
    5a3c:	nop
    5a40:	ldp	d16, d17, [x14]
    5a44:	ldp	d18, d19, [x14, #16]
    5a48:	b	5a9c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1394>
    5a4c:	ldp	d16, d17, [x14]
    5a50:	ldr	d18, [x14, #16]
    5a54:	b	5aa0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1398>
    5a58:	ldp	d16, d17, [x14]
    5a5c:	b	5aa4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x139c>
    5a60:	nop
    5a64:	ldr	d16, [x14]
    5a68:	b	5aa8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13a0>
    5a6c:	nop
    5a70:	ldp	q16, q17, [x14]
    5a74:	ldp	q18, q19, [x14, #32]
    5a78:	b	5a9c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1394>
    5a7c:	ldp	q16, q17, [x14]
    5a80:	ldr	q18, [x14, #32]
    5a84:	b	5aa0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1398>
    5a88:	ldp	q16, q17, [x14]
    5a8c:	b	5aa4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x139c>
    5a90:	nop
    5a94:	ldr	q16, [x14]
    5a98:	b	5aa8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x13a0>
    5a9c:	str	q19, [x3, #48]
    5aa0:	str	q18, [x3, #32]
    5aa4:	str	q17, [x3, #16]
    5aa8:	str	q16, [x3]
    5aac:	str	w1, [x29, #168]
    5ab0:	b	57b4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x10ac>
    5ab4:	ldrsh	x1, [x14]
    5ab8:	b	57a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1098>
    5abc:	ldrsb	x1, [x14]
    5ac0:	b	57a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1098>
    5ac4:	ldrsw	x1, [x14]
    5ac8:	b	57a0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1098>
    5acc:	add	x1, x28, #0xef
    5ad0:	ldr	w0, [x24, #4]
    5ad4:	and	x1, x1, #0x1fffffff0
    5ad8:	sub	sp, sp, x1
    5adc:	cmp	w0, #0x0
    5ae0:	mov	x21, sp
    5ae4:	add	x1, x21, #0xc0
    5ae8:	str	x1, [x29, #160]
    5aec:	ldr	x2, [x29, #136]
    5af0:	add	x1, x1, x28
    5af4:	str	x1, [x29, #112]
    5af8:	str	x2, [x29, #144]
    5afc:	b.gt	5744 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x103c>
    5b00:	mov	x5, x4
    5b04:	mov	x3, x2
    5b08:	ldr	w4, [x29, #152]
    5b0c:	mov	x0, x21
    5b10:	ldr	x2, [x29, #128]
    5b14:	bl	6290 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x328>
    5b18:	b	58c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11bc>
    5b1c:	ldr	x1, [x29, #104]
    5b20:	add	x0, x1, x28
    5b24:	add	x0, x0, #0xef
    5b28:	and	x0, x0, #0xfffffffffffffff0
    5b2c:	sub	sp, sp, x0
    5b30:	mov	x21, sp
    5b34:	add	x0, x21, #0xc0
    5b38:	str	x0, [x29, #160]
    5b3c:	add	x0, x0, x28
    5b40:	str	x0, [x29, #112]
    5b44:	mov	x27, x0
    5b48:	cbnz	x1, 5810 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1108>
    5b4c:	str	xzr, [x29, #144]
    5b50:	b	5738 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1030>
    5b54:	add	x1, x28, #0xef
    5b58:	ldr	w2, [x29, #152]
    5b5c:	and	x1, x1, #0x1fffffff0
    5b60:	ldr	w0, [x24, #4]
    5b64:	sub	sp, sp, x1
    5b68:	and	w2, w2, #0x80
    5b6c:	mov	x21, sp
    5b70:	str	xzr, [x29, #144]
    5b74:	add	x1, x21, #0xc0
    5b78:	str	w2, [x29, #152]
    5b7c:	str	x1, [x29, #160]
    5b80:	add	x1, x1, x28
    5b84:	str	x1, [x29, #112]
    5b88:	cmp	w0, #0x0
    5b8c:	b.gt	5744 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x103c>
    5b90:	mov	x5, x4
    5b94:	ldr	w4, [x29, #152]
    5b98:	ldr	x2, [x29, #128]
    5b9c:	mov	x0, x21
    5ba0:	mov	x3, #0x0                   	// #0
    5ba4:	bl	6290 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x328>
    5ba8:	b	58c4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x11bc>
    5bac:	nop
    5bb0:	stp	x29, x30, [sp, #-32]!
    5bb4:	mov	x11, x0
    5bb8:	mov	x29, sp
    5bbc:	ldr	x13, [x0, #16]
    5bc0:	ldr	w12, [x0, #24]
    5bc4:	ldrh	w0, [x13, #10]
    5bc8:	cmp	w0, #0x8
    5bcc:	b.eq	5ea0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1798>  // b.none
    5bd0:	b.hi	5dc0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x16b8>  // b.pmore
    5bd4:	cmp	w0, #0x5
    5bd8:	b.eq	5e88 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1780>  // b.none
    5bdc:	b.ls	5de8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x16e0>  // b.plast
    5be0:	cmp	w0, #0x6
    5be4:	mov	w7, #0x16                  	// #22
    5be8:	mov	w0, #0x1a                  	// #26
    5bec:	csel	w7, w7, w0, ne  // ne = any
    5bf0:	ldr	w8, [x11, #4]
    5bf4:	cmp	w8, #0x0
    5bf8:	b.le	5c3c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1534>
    5bfc:	mov	x5, #0x0                   	// #0
    5c00:	mov	w10, #0x4                   	// #4
    5c04:	ldr	x9, [x11, #8]
    5c08:	str	x19, [sp, #16]
    5c0c:	nop
    5c10:	ldr	x2, [x9, x5, lsl #3]
    5c14:	ldrh	w1, [x2, #10]
    5c18:	cmp	w1, #0xd
    5c1c:	b.eq	5ca4 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x159c>  // b.none
    5c20:	b.hi	5c58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1550>  // b.pmore
    5c24:	sub	w1, w1, #0x2
    5c28:	and	w1, w1, #0xffff
    5c2c:	cmp	w1, #0x2
    5c30:	b.hi	5c78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>  // b.pmore
    5c34:	ldr	x19, [sp, #16]
    5c38:	orr	w7, w7, #0x80
    5c3c:	sub	w1, w12, #0x1
    5c40:	mov	w0, #0x0                   	// #0
    5c44:	orr	w1, w1, #0xf
    5c48:	add	w1, w1, #0x1
    5c4c:	stp	w1, w7, [x11, #24]
    5c50:	ldp	x29, x30, [sp], #32
    5c54:	ret
    5c58:	cmp	w1, #0xf
    5c5c:	b.ne	5c78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>  // b.any
    5c60:	ldr	x0, [x2, #16]
    5c64:	ldr	x0, [x0]
    5c68:	ldrh	w0, [x0, #10]
    5c6c:	sub	w0, w0, #0x2
    5c70:	cmp	w0, #0x2
    5c74:	b.ls	5c34 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x152c>  // b.plast
    5c78:	add	x5, x5, #0x1
    5c7c:	cmp	w8, w5
    5c80:	b.gt	5c10 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1508>
    5c84:	sub	w1, w12, #0x1
    5c88:	mov	w0, #0x0                   	// #0
    5c8c:	orr	w1, w1, #0xf
    5c90:	add	w1, w1, #0x1
    5c94:	ldr	x19, [sp, #16]
    5c98:	stp	w1, w7, [x11, #24]
    5c9c:	ldp	x29, x30, [sp], #32
    5ca0:	ret
    5ca4:	ldr	x18, [x2]
    5ca8:	sub	x0, x18, #0x4
    5cac:	cmp	x0, #0x3c
    5cb0:	b.hi	5c78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>  // b.pmore
    5cb4:	ldr	x15, [x2, #16]
    5cb8:	ldr	x13, [x15]
    5cbc:	ldrh	w14, [x13, #10]
    5cc0:	and	w19, w14, #0xfffffffd
    5cc4:	mov	w4, w14
    5cc8:	cmp	w19, #0xd
    5ccc:	b.ne	5d10 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1608>  // b.any
    5cd0:	mov	x6, x15
    5cd4:	nop
    5cd8:	ldr	x0, [x6]
    5cdc:	ldr	x1, [x0, #16]
    5ce0:	cbz	x1, 5db8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x16b0>
    5ce4:	ldr	x2, [x1]
    5ce8:	cbz	x2, 5db8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x16b0>
    5cec:	add	x3, x1, #0x8
    5cf0:	ldrh	w4, [x2, #10]
    5cf4:	and	w0, w4, #0xfffffffd
    5cf8:	cmp	w0, #0xd
    5cfc:	b.ne	5d10 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1608>  // b.any
    5d00:	ldr	x0, [x2, #16]
    5d04:	bl	53f8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xcf0>
    5d08:	mov	w4, w0
    5d0c:	tbnz	w0, #31, 5db0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x16a8>
    5d10:	cmp	w4, #0x3
    5d14:	b.eq	5e70 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1768>  // b.none
    5d18:	cmp	w4, #0x4
    5d1c:	b.eq	5e60 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1758>  // b.none
    5d20:	cmp	w4, #0x2
    5d24:	b.ne	5c78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>  // b.any
    5d28:	tst	x18, #0x3
    5d2c:	b.ne	5c78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>  // b.any
    5d30:	lsr	x18, x18, #2
    5d34:	cmp	x18, #0x4
    5d38:	b.hi	5c78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>  // b.pmore
    5d3c:	add	x15, x15, #0x8
    5d40:	b	5d5c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1654>
    5d44:	cmp	w4, w14
    5d48:	b.ne	5c78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>  // b.any
    5d4c:	ldr	x13, [x15], #8
    5d50:	cbz	x13, 5e90 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1788>
    5d54:	ldrh	w14, [x13, #10]
    5d58:	and	w19, w14, #0xfffffffd
    5d5c:	cmp	w19, #0xd
    5d60:	b.ne	5d44 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x163c>  // b.any
    5d64:	ldr	x6, [x13, #16]
    5d68:	cbz	x6, 5d4c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1644>
    5d6c:	ldr	x1, [x6]
    5d70:	cbz	x1, 5d4c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1644>
    5d74:	add	x6, x6, #0x8
    5d78:	b	5d8c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1684>
    5d7c:	cmp	w4, w2
    5d80:	b.ne	5c78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>  // b.any
    5d84:	ldr	x1, [x6], #8
    5d88:	cbz	x1, 5d4c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1644>
    5d8c:	ldrh	w2, [x1, #10]
    5d90:	and	w0, w2, #0xfffffffd
    5d94:	cmp	w0, #0xd
    5d98:	b.ne	5d7c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1674>  // b.any
    5d9c:	ldr	x0, [x1, #16]
    5da0:	mov	w1, w4
    5da4:	bl	5450 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xd48>
    5da8:	cbnz	w0, 5d84 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x167c>
    5dac:	b	5c78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>
    5db0:	ldr	x2, [x3], #8
    5db4:	cbnz	x2, 5cf0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x15e8>
    5db8:	add	x6, x6, #0x8
    5dbc:	b	5cd8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x15d0>
    5dc0:	cmp	w0, #0xc
    5dc4:	b.hi	5e40 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1738>  // b.pmore
    5dc8:	cmp	w0, #0xa
    5dcc:	mov	w7, #0x1                   	// #1
    5dd0:	b.hi	5bf0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14e8>  // b.pmore
    5dd4:	cmp	w0, #0x9
    5dd8:	mov	w7, #0x1e                  	// #30
    5ddc:	mov	w0, #0x18                  	// #24
    5de0:	csel	w7, w7, w0, ne  // ne = any
    5de4:	b	5bf0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14e8>
    5de8:	mov	w7, #0x0                   	// #0
    5dec:	cbz	w0, 5bf0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14e8>
    5df0:	cmp	w0, #0x1
    5df4:	mov	w7, #0x1e                  	// #30
    5df8:	b.eq	5bf0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14e8>  // b.none
    5dfc:	sub	w0, w0, #0x2
    5e00:	and	w0, w0, #0xffff
    5e04:	cmp	w0, #0x2
    5e08:	b.hi	5e58 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1750>  // b.pmore
    5e0c:	mov	x0, x13
    5e10:	bl	54d8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdd0>
    5e14:	mov	w7, w0
    5e18:	cbnz	w0, 5bf0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14e8>
    5e1c:	ldr	x0, [x13]
    5e20:	cmp	x0, #0x10
    5e24:	b.hi	5ea8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x17a0>  // b.pmore
    5e28:	mov	w7, #0x2                   	// #2
    5e2c:	b.eq	5bf0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14e8>  // b.none
    5e30:	cmp	x0, #0x8
    5e34:	mov	w7, #0x42                  	// #66
    5e38:	csinc	w7, w7, wzr, ne  // ne = any
    5e3c:	b	5bf0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14e8>
    5e40:	cmp	w0, #0xe
    5e44:	mov	w7, #0x1                   	// #1
    5e48:	b.eq	5bf0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14e8>  // b.none
    5e4c:	and	w0, w0, #0xfffffffd
    5e50:	cmp	w0, #0xd
    5e54:	b.eq	5e0c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1704>  // b.none
    5e58:	str	x19, [sp, #16]
    5e5c:	bl	1ae0 <abort@plt>
    5e60:	tst	x18, #0xf
    5e64:	b.ne	5c78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>  // b.any
    5e68:	lsr	x18, x18, #4
    5e6c:	b	5d3c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1634>
    5e70:	tst	x18, #0x7
    5e74:	b.ne	5c78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>  // b.any
    5e78:	lsr	x18, x18, #3
    5e7c:	cmp	x18, #0x4
    5e80:	b.hi	5c78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>  // b.pmore
    5e84:	b	5d3c <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1634>
    5e88:	mov	w7, #0x14                  	// #20
    5e8c:	b	5bf0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14e8>
    5e90:	sub	w1, w10, w18
    5e94:	add	w4, w1, w4, lsl #2
    5e98:	cbz	w4, 5c78 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x1570>
    5e9c:	b	5c34 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x152c>
    5ea0:	mov	w7, #0x1c                  	// #28
    5ea4:	b	5bf0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14e8>
    5ea8:	add	w12, w12, #0x8
    5eac:	mov	w7, #0x20                  	// #32
    5eb0:	b	5bf0 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0x14e8>
    5eb4:	nop

0000000000005eb8 <ffi_call@@LIBFFI_BASE_7.0>:
    5eb8:	mov	x4, #0x0                   	// #0
    5ebc:	b	56c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfc0>

0000000000005ec0 <ffi_call_go@@LIBFFI_GO_CLOSURE_7.0>:
    5ec0:	b	56c8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xfc0>
    5ec4:	nop

0000000000005ec8 <ffi_prep_closure_loc@@LIBFFI_CLOSURE_7.0>:
    5ec8:	stp	x29, x30, [sp, #-48]!
    5ecc:	mov	x29, sp
    5ed0:	stp	x19, x20, [sp, #16]
    5ed4:	mov	x20, x1
    5ed8:	ldr	w1, [x1]
    5edc:	cmp	w1, #0x1
    5ee0:	b.ne	5f58 <ffi_prep_closure_loc@@LIBFFI_CLOSURE_7.0+0x90>  // b.any
    5ee4:	stp	x21, x22, [sp, #32]
    5ee8:	mov	x22, x2
    5eec:	mov	x21, x3
    5ef0:	adrp	x2, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    5ef4:	ldr	w3, [x20, #28]
    5ef8:	add	x2, x2, #0x890
    5efc:	adrp	x5, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    5f00:	adrp	x4, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    5f04:	add	x5, x5, #0x420
    5f08:	tst	x3, #0x80
    5f0c:	add	x4, x4, #0x400
    5f10:	ldp	x2, x3, [x2]
    5f14:	csel	x4, x4, x5, ne  // ne = any
    5f18:	mov	x19, x0
    5f1c:	add	x1, x0, #0x18
    5f20:	stp	x2, x3, [x0]
    5f24:	str	x4, [x0, #16]
    5f28:	bl	65b8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x650>
    5f2c:	mov	x0, x19
    5f30:	bl	46c0 <ffi_closure_alloc@@LIBFFI_CLOSURE_7.0+0x16a0>
    5f34:	add	x1, x0, #0x18
    5f38:	bl	65b8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x650>
    5f3c:	stp	x20, x22, [x19, #24]
    5f40:	mov	w0, #0x0                   	// #0
    5f44:	str	x21, [x19, #40]
    5f48:	ldp	x19, x20, [sp, #16]
    5f4c:	ldp	x21, x22, [sp, #32]
    5f50:	ldp	x29, x30, [sp], #48
    5f54:	ret
    5f58:	mov	w0, #0x2                   	// #2
    5f5c:	ldp	x19, x20, [sp, #16]
    5f60:	ldp	x29, x30, [sp], #48
    5f64:	ret

0000000000005f68 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0>:
    5f68:	mov	x3, x0
    5f6c:	ldr	w0, [x1]
    5f70:	cmp	w0, #0x1
    5f74:	b.ne	5fa4 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x3c>  // b.any
    5f78:	ldr	w6, [x1, #28]
    5f7c:	adrp	x5, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    5f80:	adrp	x4, 6000 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x98>
    5f84:	add	x5, x5, #0x590
    5f88:	add	x4, x4, #0x570
    5f8c:	mov	w0, #0x0                   	// #0
    5f90:	tst	x6, #0x80
    5f94:	stp	x1, x2, [x3, #8]
    5f98:	csel	x1, x4, x5, ne  // ne = any
    5f9c:	str	x1, [x3]
    5fa0:	ret
    5fa4:	mov	w0, #0x2                   	// #2
    5fa8:	ret
    5fac:	nop
    5fb0:	stp	x29, x30, [sp, #-128]!
    5fb4:	mov	x14, x5
    5fb8:	mov	x29, sp
    5fbc:	stp	x23, x24, [sp, #48]
    5fc0:	mov	x24, x0
    5fc4:	ldr	w0, [x0, #4]
    5fc8:	str	x1, [x29, #120]
    5fcc:	stp	x19, x20, [sp, #16]
    5fd0:	cmp	w0, #0x0
    5fd4:	ubfiz	x1, x0, #3, #32
    5fd8:	add	x1, x1, #0xf
    5fdc:	stp	x21, x22, [sp, #32]
    5fe0:	and	x1, x1, #0xffffffff0
    5fe4:	stp	x25, x26, [sp, #64]
    5fe8:	stp	x27, x28, [sp, #80]
    5fec:	sub	sp, sp, x1
    5ff0:	mov	x19, sp
    5ff4:	stp	x6, x2, [x29, #104]
    5ff8:	b.le	6090 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x128>
    5ffc:	sub	w25, w0, #0x1
    6000:	mov	x15, x3
    6004:	add	x25, x25, #0x1
    6008:	mov	x13, x4
    600c:	mov	x11, #0x0                   	// #0
    6010:	mov	x23, #0x0                   	// #0
    6014:	lsl	x25, x25, #3
    6018:	mov	w18, #0x0                   	// #0
    601c:	mov	w26, #0x0                   	// #0
    6020:	mov	x21, #0x1                   	// #1
    6024:	mov	x28, #0x5fe2                	// #24546
    6028:	mov	x22, #0x8                   	// #8
    602c:	mov	x27, #0xa01c                	// #40988
    6030:	ldr	x0, [x24, #8]
    6034:	ldr	x12, [x0, x11]
    6038:	ldrh	w7, [x12, #10]
    603c:	ldr	x20, [x12]
    6040:	cmp	w7, #0xf
    6044:	b.hi	613c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x1d4>  // b.pmore
    6048:	lsl	x7, x21, x7
    604c:	tst	x7, x28
    6050:	b.eq	60d8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x170>  // b.none
    6054:	cmp	w26, #0x7
    6058:	b.ls	6174 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x20c>  // b.plast
    605c:	cmp	x20, #0x8
    6060:	sub	x4, x23, #0x1
    6064:	csel	x7, x20, x22, cs  // cs = hs, nlast
    6068:	mov	w26, #0x8                   	// #8
    606c:	sub	x7, x7, #0x1
    6070:	orr	x7, x7, x4
    6074:	add	x7, x7, #0x1
    6078:	add	x23, x20, x7
    607c:	add	x7, x13, x7
    6080:	str	x7, [x19, x11]
    6084:	add	x11, x11, #0x8
    6088:	cmp	x25, x11
    608c:	b.ne	6030 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0xc8>  // b.any
    6090:	ldp	x0, x3, [x29, #104]
    6094:	mov	x2, x19
    6098:	ldr	w22, [x24, #28]
    609c:	ldr	x4, [x29, #120]
    60a0:	tst	x22, #0x20
    60a4:	csel	x14, x14, x0, eq  // eq = none
    60a8:	mov	x0, x24
    60ac:	mov	x1, x14
    60b0:	blr	x4
    60b4:	mov	sp, x29
    60b8:	mov	w0, w22
    60bc:	ldp	x19, x20, [sp, #16]
    60c0:	ldp	x21, x22, [sp, #32]
    60c4:	ldp	x23, x24, [sp, #48]
    60c8:	ldp	x25, x26, [sp, #64]
    60cc:	ldp	x27, x28, [sp, #80]
    60d0:	ldp	x29, x30, [sp], #128
    60d4:	ret
    60d8:	tst	x7, x27
    60dc:	b.eq	6138 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x1d0>  // b.none
    60e0:	mov	x0, x12
    60e4:	bl	54d8 <ffi_closure_free@@LIBFFI_CLOSURE_7.0+0xdd0>
    60e8:	cbz	w0, 6140 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x1d8>
    60ec:	and	w5, w0, #0x3
    60f0:	mov	w1, #0x4                   	// #4
    60f4:	sub	w5, w1, w5
    60f8:	mov	w6, w18
    60fc:	add	x7, x6, w5, sxtw
    6100:	cmp	x7, #0x8
    6104:	b.ls	61d8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x270>  // b.plast
    6108:	ldrh	w0, [x12, #8]
    610c:	sub	x4, x23, #0x1
    6110:	mov	w18, #0x8                   	// #8
    6114:	cmp	x0, #0x8
    6118:	csel	x0, x0, x22, cs  // cs = hs, nlast
    611c:	sub	x0, x0, #0x1
    6120:	orr	x0, x0, x4
    6124:	add	x0, x0, #0x1
    6128:	add	x23, x20, x0
    612c:	add	x0, x13, x0
    6130:	str	x0, [x19, x11]
    6134:	b	6084 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    6138:	tbnz	w7, #0, 6084 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    613c:	bl	1ae0 <abort@plt>
    6140:	cmp	x20, #0x10
    6144:	b.ls	6188 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x220>  // b.plast
    6148:	cmp	w26, #0x7
    614c:	b.ls	61c4 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x25c>  // b.plast
    6150:	sub	x4, x23, #0x1
    6154:	mov	w26, #0x8                   	// #8
    6158:	orr	x4, x4, #0x7
    615c:	add	x0, x4, #0x1
    6160:	add	x23, x4, #0x9
    6164:	add	x0, x13, x0
    6168:	ldr	x0, [x0]
    616c:	str	x0, [x19, x11]
    6170:	b	6084 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    6174:	ubfiz	x1, x26, #3, #32
    6178:	add	w26, w26, #0x1
    617c:	add	x1, x1, #0x80
    6180:	add	x7, x15, x1
    6184:	b	6080 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x118>
    6188:	add	x0, x20, #0x7
    618c:	mov	w5, w26
    6190:	lsr	x0, x0, #3
    6194:	add	x6, x5, x0
    6198:	cmp	x6, #0x8
    619c:	b.hi	61b4 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x24c>  // b.pmore
    61a0:	add	x5, x5, #0x10
    61a4:	add	w26, w26, w0
    61a8:	add	x5, x15, x5, lsl #3
    61ac:	str	x5, [x19, x11]
    61b0:	b	6084 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    61b4:	ldrh	w0, [x12, #8]
    61b8:	sub	x4, x23, #0x1
    61bc:	mov	w26, #0x8                   	// #8
    61c0:	b	6114 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x1ac>
    61c4:	ubfiz	x0, x26, #3, #32
    61c8:	add	w26, w26, #0x1
    61cc:	add	x0, x0, #0x80
    61d0:	add	x0, x15, x0
    61d4:	b	6168 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x200>
    61d8:	add	x6, x15, x6, lsl #4
    61dc:	add	w18, w18, w5
    61e0:	cmp	w0, #0xc
    61e4:	b.eq	6254 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x2ec>  // b.none
    61e8:	b.gt	620c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x2a4>
    61ec:	cmp	w0, #0x9
    61f0:	b.eq	6268 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x300>  // b.none
    61f4:	cmp	w0, #0xa
    61f8:	b.eq	627c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x314>  // b.none
    61fc:	cmp	w0, #0x8
    6200:	b.eq	622c <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x2c4>  // b.none
    6204:	str	x6, [x19, x11]
    6208:	b	6084 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    620c:	cmp	w0, #0xd
    6210:	b.eq	6240 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x2d8>  // b.none
    6214:	cmp	w0, #0xe
    6218:	b.ne	6204 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x29c>  // b.any
    621c:	ldp	q16, q17, [x6]
    6220:	st2	{v16.d, v17.d}[0], [x6]
    6224:	str	x6, [x19, x11]
    6228:	b	6084 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    622c:	ldp	q16, q17, [x6]
    6230:	ldp	q18, q19, [x6, #32]
    6234:	st4	{v16.s-v19.s}[0], [x6]
    6238:	str	x6, [x19, x11]
    623c:	b	6084 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    6240:	ldp	q16, q17, [x6]
    6244:	ldr	q18, [x6, #32]
    6248:	st3	{v16.d-v18.d}[0], [x6]
    624c:	str	x6, [x19, x11]
    6250:	b	6084 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    6254:	ldp	q16, q17, [x6]
    6258:	ldp	q18, q19, [x6, #32]
    625c:	st4	{v16.d-v19.d}[0], [x6]
    6260:	str	x6, [x19, x11]
    6264:	b	6084 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    6268:	ldp	q16, q17, [x6]
    626c:	ldr	q18, [x6, #32]
    6270:	st3	{v16.s-v18.s}[0], [x6]
    6274:	str	x6, [x19, x11]
    6278:	b	6084 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    627c:	ldp	q16, q17, [x6]
    6280:	st2	{v16.s, v17.s}[0], [x6]
    6284:	str	x6, [x19, x11]
    6288:	b	6084 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x11c>
    628c:	nop
    6290:	stp	x29, x30, [x1]
    6294:	mov	x29, x1
    6298:	mov	sp, x0
    629c:	mov	x9, x2
    62a0:	mov	x8, x3
    62a4:	mov	x18, x5
    62a8:	stp	x3, x4, [x29, #16]
    62ac:	tbz	w4, #7, 62c0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x358>
    62b0:	ldp	q0, q1, [sp]
    62b4:	ldp	q2, q3, [sp, #32]
    62b8:	ldp	q4, q5, [sp, #64]
    62bc:	ldp	q6, q7, [sp, #96]
    62c0:	ldp	x0, x1, [sp, #128]
    62c4:	ldp	x2, x3, [sp, #144]
    62c8:	ldp	x4, x5, [sp, #160]
    62cc:	ldp	x6, x7, [sp, #176]
    62d0:	add	sp, sp, #0xc0
    62d4:	blr	x9
    62d8:	ldp	x3, x4, [x29, #16]
    62dc:	mov	sp, x29
    62e0:	ldp	x29, x30, [x29]
    62e4:	adr	x5, 6300 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x398>
    62e8:	and	w4, w4, #0x1f
    62ec:	add	x5, x5, x4, lsl #3
    62f0:	br	x5
    62f4:	nop
    62f8:	nop
    62fc:	nop
    6300:	ret
    6304:	nop
    6308:	str	x0, [x3]
    630c:	ret
    6310:	stp	x0, x1, [x3]
    6314:	ret
    6318:	brk	#0x3e8
    631c:	ret
    6320:	brk	#0x3e8
    6324:	ret
    6328:	brk	#0x3e8
    632c:	ret
    6330:	brk	#0x3e8
    6334:	ret
    6338:	brk	#0x3e8
    633c:	ret
    6340:	st4	{v0.s-v3.s}[0], [x3]
    6344:	ret
    6348:	st3	{v0.s-v2.s}[0], [x3]
    634c:	ret
    6350:	stp	s0, s1, [x3]
    6354:	ret
    6358:	str	s0, [x3]
    635c:	ret
    6360:	st4	{v0.d-v3.d}[0], [x3]
    6364:	ret
    6368:	st3	{v0.d-v2.d}[0], [x3]
    636c:	ret
    6370:	stp	d0, d1, [x3]
    6374:	ret
    6378:	str	d0, [x3]
    637c:	ret
    6380:	str	q3, [x3, #48]
    6384:	nop
    6388:	str	q2, [x3, #32]
    638c:	nop
    6390:	stp	q0, q1, [x3]
    6394:	ret
    6398:	str	q0, [x3]
    639c:	ret
    63a0:	uxtb	w0, w0
    63a4:	str	x0, [x3]
    63a8:	ret
    63ac:	nop
    63b0:	uxth	w0, w0
    63b4:	str	x0, [x3]
    63b8:	ret
    63bc:	nop
    63c0:	mov	w0, w0
    63c4:	str	x0, [x3]
    63c8:	ret
    63cc:	nop
    63d0:	sxtb	x0, w0
    63d4:	str	x0, [x3]
    63d8:	ret
    63dc:	nop
    63e0:	sxth	x0, w0
    63e4:	str	x0, [x3]
    63e8:	ret
    63ec:	nop
    63f0:	sxtw	x0, w0
    63f4:	str	x0, [x3]
    63f8:	ret
    63fc:	nop
    6400:	stp	x29, x30, [sp, #-272]!
    6404:	stp	q0, q1, [sp, #16]
    6408:	stp	q2, q3, [sp, #48]
    640c:	stp	q4, q5, [sp, #80]
    6410:	stp	q6, q7, [sp, #112]
    6414:	b	6424 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x4bc>
    6418:	nop
    641c:	nop
    6420:	stp	x29, x30, [sp, #-272]!
    6424:	mov	x29, sp
    6428:	stp	x0, x1, [sp, #144]
    642c:	stp	x2, x3, [sp, #160]
    6430:	stp	x4, x5, [sp, #176]
    6434:	stp	x6, x7, [sp, #192]
    6438:	ldp	x0, x1, [x17, #24]
    643c:	ldr	x2, [x17, #40]
    6440:	add	x3, sp, #0x10
    6444:	add	x4, sp, #0x110
    6448:	add	x5, sp, #0xd0
    644c:	mov	x6, x8
    6450:	bl	5fb0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x48>
    6454:	adr	x1, 6470 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x508>
    6458:	and	w0, w0, #0x1f
    645c:	add	x1, x1, x0, lsl #3
    6460:	add	x3, sp, #0xd0
    6464:	br	x1
    6468:	nop
    646c:	nop
    6470:	b	6568 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x600>
    6474:	nop
    6478:	ldr	x0, [x3]
    647c:	b	6568 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x600>
    6480:	ldp	x0, x1, [x3]
    6484:	b	6568 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x600>
    6488:	brk	#0x3e8
    648c:	nop
    6490:	brk	#0x3e8
    6494:	nop
    6498:	brk	#0x3e8
    649c:	nop
    64a0:	brk	#0x3e8
    64a4:	nop
    64a8:	brk	#0x3e8
    64ac:	nop
    64b0:	ldr	s3, [x3, #12]
    64b4:	nop
    64b8:	ldr	s2, [x3, #8]
    64bc:	nop
    64c0:	ldp	s0, s1, [x3]
    64c4:	b	6568 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x600>
    64c8:	ldr	s0, [x3]
    64cc:	b	6568 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x600>
    64d0:	ldr	d3, [x3, #24]
    64d4:	nop
    64d8:	ldr	d2, [x3, #16]
    64dc:	nop
    64e0:	ldp	d0, d1, [x3]
    64e4:	b	6568 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x600>
    64e8:	ldr	d0, [x3]
    64ec:	b	6568 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x600>
    64f0:	ldr	q3, [x3, #48]
    64f4:	nop
    64f8:	ldr	q2, [x3, #32]
    64fc:	nop
    6500:	ldp	q0, q1, [x3]
    6504:	b	6568 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x600>
    6508:	ldr	q0, [x3]
    650c:	b	6568 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x600>
    6510:	ldrb	w0, [x3]
    6514:	b	6568 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x600>
    6518:	brk	#0x3e8
    651c:	nop
    6520:	ldrh	w0, [x3]
    6524:	b	6568 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x600>
    6528:	brk	#0x3e8
    652c:	nop
    6530:	ldr	w0, [x3]
    6534:	b	6568 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x600>
    6538:	brk	#0x3e8
    653c:	nop
    6540:	ldrsb	x0, [x3]
    6544:	b	6568 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x600>
    6548:	brk	#0x3e8
    654c:	nop
    6550:	ldrsh	x0, [x3]
    6554:	b	6568 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x600>
    6558:	brk	#0x3e8
    655c:	nop
    6560:	ldrsw	x0, [x3]
    6564:	nop
    6568:	ldp	x29, x30, [sp], #272
    656c:	ret
    6570:	stp	x29, x30, [sp, #-272]!
    6574:	stp	q0, q1, [sp, #16]
    6578:	stp	q2, q3, [sp, #48]
    657c:	stp	q4, q5, [sp, #80]
    6580:	stp	q6, q7, [sp, #112]
    6584:	b	6594 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x62c>
    6588:	nop
    658c:	nop
    6590:	stp	x29, x30, [sp, #-272]!
    6594:	mov	x29, sp
    6598:	stp	x0, x1, [sp, #144]
    659c:	stp	x2, x3, [sp, #160]
    65a0:	stp	x4, x5, [sp, #176]
    65a4:	stp	x6, x7, [sp, #192]
    65a8:	ldp	x0, x1, [x18, #8]
    65ac:	mov	x2, x18
    65b0:	b	6440 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x4d8>
    65b4:	nop
    65b8:	b	65c0 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x658>
    65bc:	nop
    65c0:	adrp	x3, 18000 <memcpy@GLIBC_2.17>
    65c4:	ldr	w2, [x3, #1568]
    65c8:	cbnz	w2, 65d8 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x670>
    65cc:	mrs	x4, ctr_el0
    65d0:	mov	w2, w4
    65d4:	str	w4, [x3, #1568]
    65d8:	ubfx	x4, x2, #16, #4
    65dc:	mov	w3, #0x4                   	// #4
    65e0:	and	w5, w2, #0xf
    65e4:	lsl	w4, w3, w4
    65e8:	sub	w2, w4, #0x1
    65ec:	bic	x2, x0, x2
    65f0:	sxtw	x4, w4
    65f4:	cmp	x2, x1
    65f8:	lsl	w3, w3, w5
    65fc:	b.cs	6610 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6a8>  // b.hs, b.nlast
    6600:	dc	cvau, x2
    6604:	add	x2, x2, x4
    6608:	cmp	x1, x2
    660c:	b.hi	6600 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x698>  // b.pmore
    6610:	dsb	ish
    6614:	sub	w2, w3, #0x1
    6618:	sxtw	x3, w3
    661c:	bic	x0, x0, x2
    6620:	cmp	x1, x0
    6624:	b.ls	6638 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6d0>  // b.plast
    6628:	ic	ivau, x0
    662c:	add	x0, x0, x3
    6630:	cmp	x1, x0
    6634:	b.hi	6628 <ffi_prep_go_closure@@LIBFFI_GO_CLOSURE_7.0+0x6c0>  // b.pmore
    6638:	dsb	ish
    663c:	isb
    6640:	ret

Disassembly of section .fini:

0000000000006644 <.fini>:
    6644:	stp	x29, x30, [sp, #-16]!
    6648:	mov	x29, sp
    664c:	ldp	x29, x30, [sp], #16
    6650:	ret
