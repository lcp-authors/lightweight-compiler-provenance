
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//zstd.mod_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <FSE_versionNumber>:
       0:	mov	w0, #0x384                 	// #900
       4:	ret

0000000000000008 <FSE_isError>:
       8:	cmn	x0, #0x78
       c:	cset	w0, hi  // hi = pmore
      10:	ret
      14:	nop

0000000000000018 <FSE_getErrorName>:
      18:	cmn	x0, #0x78
      1c:	csneg	w0, wzr, w0, ls  // ls = plast
      20:	b	628 <ERR_getErrorString>
      24:	nop

0000000000000028 <HUF_isError>:
      28:	cmn	x0, #0x78
      2c:	cset	w0, hi  // hi = pmore
      30:	ret
      34:	nop

0000000000000038 <HUF_getErrorName>:
      38:	cmn	x0, #0x78
      3c:	csneg	w0, wzr, w0, ls  // ls = plast
      40:	b	628 <ERR_getErrorString>
      44:	nop

0000000000000048 <FSE_readNCount>:
      48:	stp	x29, x30, [sp, #-80]!
      4c:	cmp	x4, #0x3
      50:	mov	x29, sp
      54:	stp	x19, x20, [sp, #16]
      58:	mov	x20, x1
      5c:	mov	x19, x3
      60:	stp	x21, x22, [sp, #32]
      64:	mov	x22, x4
      68:	mov	x21, x0
      6c:	str	x23, [sp, #48]
      70:	mov	x23, x2
      74:	b.hi	d8 <FSE_readNCount+0x90>  // b.pmore
      78:	mov	x2, #0x4                   	// #4
      7c:	mov	w1, #0x0                   	// #0
      80:	add	x0, sp, #0x48
      84:	bl	0 <grub_memset>
      88:	mov	x2, x22
      8c:	mov	x1, x19
      90:	add	x0, sp, #0x48
      94:	bl	0 <grub_memmove>
      98:	mov	x2, x23
      9c:	mov	x1, x20
      a0:	add	x3, sp, #0x48
      a4:	mov	x0, x21
      a8:	mov	x4, #0x4                   	// #4
      ac:	bl	48 <FSE_readNCount>
      b0:	cmp	x22, x0
      b4:	mov	x2, #0xffffffffffffff88    	// #-120
      b8:	ccmp	x0, x2, #0x2, cc  // cc = lo, ul, last
      bc:	mov	x1, #0xffffffffffffffec    	// #-20
      c0:	csel	x0, x0, x1, hi  // hi = pmore
      c4:	ldp	x19, x20, [sp, #16]
      c8:	ldp	x21, x22, [sp, #32]
      cc:	ldr	x23, [sp, #48]
      d0:	ldp	x29, x30, [sp], #80
      d4:	ret
      d8:	ldr	w2, [x20]
      dc:	mov	w1, #0x0                   	// #0
      e0:	add	w2, w2, #0x1
      e4:	lsl	x2, x2, #1
      e8:	bl	0 <grub_memset>
      ec:	ldr	w4, [x19]
      f0:	mov	x0, #0xffffffffffffffd4    	// #-44
      f4:	and	w5, w4, #0xf
      f8:	add	w1, w5, #0x5
      fc:	cmp	w1, #0xf
     100:	b.hi	c4 <FSE_readNCount+0x7c>  // b.pmore
     104:	mov	w2, #0x1                   	// #1
     108:	lsr	w4, w4, #4
     10c:	lsl	w2, w2, w1
     110:	add	w7, w2, #0x1
     114:	lsl	w10, w2, #1
     118:	sub	w6, w2, #0x1
     11c:	sub	w10, w10, #0x1
     120:	str	w1, [x23]
     124:	add	x11, x19, x22
     128:	and	w6, w6, w4
     12c:	sub	w0, w10, w7
     130:	sub	x14, x11, #0x7
     134:	sub	x15, x11, #0x4
     138:	ldr	w13, [x20]
     13c:	add	w5, w5, #0x6
     140:	sub	x11, x11, #0x5
     144:	mov	x9, x19
     148:	cmp	w6, w0
     14c:	mov	w3, #0x0                   	// #0
     150:	mov	w8, #0x4                   	// #4
     154:	mov	w12, #0xffff                	// #65535
     158:	b.cs	1f8 <FSE_readNCount+0x1b0>  // b.hs, b.nlast
     15c:	nop
     160:	sub	w0, w5, #0x1
     164:	mov	w4, w6
     168:	add	w8, w0, w8
     16c:	subs	w6, w4, #0x1
     170:	strh	w6, [x21, w3, uxtw #1]
     174:	cneg	w0, w6, mi  // mi = first
     178:	add	w1, w3, #0x1
     17c:	sub	w7, w7, w0
     180:	cmp	w2, w7
     184:	b.le	198 <FSE_readNCount+0x150>
     188:	asr	w2, w2, #1
     18c:	sub	w5, w5, #0x1
     190:	cmp	w7, w2
     194:	b.lt	188 <FSE_readNCount+0x140>  // b.tstop
     198:	asr	w4, w8, #3
     19c:	cmp	x9, x14
     1a0:	add	x4, x9, w4, sxtw
     1a4:	b.ls	3b8 <FSE_readNCount+0x370>  // b.plast
     1a8:	cmp	x15, x4
     1ac:	b.cs	3b8 <FSE_readNCount+0x370>  // b.hs, b.nlast
     1b0:	sub	x0, x15, x9
     1b4:	mov	x9, x15
     1b8:	cmp	w7, #0x1
     1bc:	sub	w8, w8, w0, lsl #3
     1c0:	ccmp	w1, w13, #0x2, gt
     1c4:	ldr	w4, [x9]
     1c8:	and	w0, w8, #0x1f
     1cc:	lsr	w4, w4, w0
     1d0:	b.hi	3d8 <FSE_readNCount+0x390>  // b.pmore
     1d4:	cbz	w6, 210 <FSE_readNCount+0x1c8>
     1d8:	mov	w3, w1
     1dc:	lsl	w10, w2, #1
     1e0:	sub	w6, w2, #0x1
     1e4:	sub	w10, w10, #0x1
     1e8:	and	w6, w6, w4
     1ec:	sub	w0, w10, w7
     1f0:	cmp	w6, w0
     1f4:	b.cc	160 <FSE_readNCount+0x118>  // b.lo, b.ul, b.last
     1f8:	and	w4, w10, w4
     1fc:	add	w8, w8, w5
     200:	sub	w0, w4, w0
     204:	cmp	w2, w4
     208:	csel	w4, w0, w4, le
     20c:	b	16c <FSE_readNCount+0x124>
     210:	cmp	w12, w4, uxth
     214:	b.ne	424 <FSE_readNCount+0x3dc>  // b.any
     218:	mov	w6, w1
     21c:	nop
     220:	lsr	w4, w4, #16
     224:	add	w6, w6, #0x18
     228:	cmp	x9, x11
     22c:	b.cs	3a4 <FSE_readNCount+0x35c>  // b.hs, b.nlast
     230:	ldur	w4, [x9, #2]
     234:	add	x10, x9, #0x2
     238:	mov	x9, x10
     23c:	lsr	w4, w4, w8
     240:	cmp	w12, w4, uxth
     244:	b.eq	220 <FSE_readNCount+0x1d8>  // b.none
     248:	and	w9, w4, #0x3
     24c:	cmp	w9, #0x3
     250:	b.ne	270 <FSE_readNCount+0x228>  // b.any
     254:	nop
     258:	lsr	w4, w4, #2
     25c:	add	w6, w6, #0x3
     260:	and	w9, w4, #0x3
     264:	add	w8, w8, #0x2
     268:	cmp	w9, #0x3
     26c:	b.eq	258 <FSE_readNCount+0x210>  // b.none
     270:	add	w6, w9, w6
     274:	add	w8, w8, #0x2
     278:	cmp	w6, w13
     27c:	b.hi	430 <FSE_readNCount+0x3e8>  // b.pmore
     280:	cmp	w6, w1
     284:	b.ls	37c <FSE_readNCount+0x334>  // b.plast
     288:	ubfiz	x16, x1, #1, #32
     28c:	sub	w17, w6, w3
     290:	add	x0, x21, x16
     294:	sub	w9, w17, #0x2
     298:	cmp	w9, #0x5
     29c:	mov	w9, w1
     2a0:	neg	x0, x0, lsr #1
     2a4:	and	w0, w0, #0x3
     2a8:	b.ls	324 <FSE_readNCount+0x2dc>  // b.plast
     2ac:	cbz	w0, 2dc <FSE_readNCount+0x294>
     2b0:	strh	wzr, [x21, x16]
     2b4:	cmp	w0, #0x1
     2b8:	add	w1, w3, #0x2
     2bc:	b.eq	2dc <FSE_readNCount+0x294>  // b.none
     2c0:	strh	wzr, [x21, w1, uxtw #1]
     2c4:	add	w16, w3, #0x3
     2c8:	cmp	w0, #0x3
     2cc:	mov	w1, w16
     2d0:	b.ne	2dc <FSE_readNCount+0x294>  // b.any
     2d4:	add	w1, w3, #0x4
     2d8:	strh	wzr, [x21, w16, uxtw #1]
     2dc:	mvn	w16, w0
     2e0:	mov	w3, w0
     2e4:	add	w16, w16, w17
     2e8:	add	x3, x3, x9
     2ec:	sub	w9, w16, #0x4
     2f0:	mov	x0, #0x0                   	// #0
     2f4:	add	x3, x21, x3, lsl #1
     2f8:	lsr	w9, w9, #2
     2fc:	add	w9, w9, #0x1
     300:	str	xzr, [x3, x0, lsl #3]
     304:	add	x0, x0, #0x1
     308:	cmp	w9, w0
     30c:	b.hi	300 <FSE_readNCount+0x2b8>  // b.pmore
     310:	lsl	w9, w9, #2
     314:	add	w1, w1, w9
     318:	cmp	w9, w16
     31c:	b.eq	378 <FSE_readNCount+0x330>  // b.none
     320:	mov	w9, w1
     324:	strh	wzr, [x21, x9, lsl #1]
     328:	add	w0, w1, #0x1
     32c:	cmp	w0, w6
     330:	b.cs	378 <FSE_readNCount+0x330>  // b.hs, b.nlast
     334:	strh	wzr, [x21, w0, uxtw #1]
     338:	add	w0, w1, #0x2
     33c:	cmp	w6, w0
     340:	b.ls	378 <FSE_readNCount+0x330>  // b.plast
     344:	strh	wzr, [x21, w0, uxtw #1]
     348:	add	w0, w1, #0x3
     34c:	cmp	w6, w0
     350:	b.ls	378 <FSE_readNCount+0x330>  // b.plast
     354:	strh	wzr, [x21, w0, uxtw #1]
     358:	add	w0, w1, #0x4
     35c:	cmp	w6, w0
     360:	b.ls	378 <FSE_readNCount+0x330>  // b.plast
     364:	strh	wzr, [x21, w0, uxtw #1]
     368:	add	w1, w1, #0x5
     36c:	cmp	w6, w1
     370:	b.ls	378 <FSE_readNCount+0x330>  // b.plast
     374:	strh	wzr, [x21, w1, uxtw #1]
     378:	mov	w1, w6
     37c:	asr	w0, w8, #3
     380:	cmp	x10, x14
     384:	add	x9, x10, w0, sxtw
     388:	b.ls	410 <FSE_readNCount+0x3c8>  // b.plast
     38c:	cmp	x9, x15
     390:	b.ls	410 <FSE_readNCount+0x3c8>  // b.plast
     394:	lsr	w4, w4, #2
     398:	mov	x9, x10
     39c:	mov	w3, w1
     3a0:	b	1dc <FSE_readNCount+0x194>
     3a4:	add	w8, w8, #0x10
     3a8:	cmp	w4, w12
     3ac:	b.eq	220 <FSE_readNCount+0x1d8>  // b.none
     3b0:	mov	x10, x9
     3b4:	b	248 <FSE_readNCount+0x200>
     3b8:	mov	x9, x4
     3bc:	and	w8, w8, #0x7
     3c0:	mov	w0, w8
     3c4:	cmp	w7, #0x1
     3c8:	ccmp	w1, w13, #0x2, gt
     3cc:	ldr	w4, [x9]
     3d0:	lsr	w4, w4, w0
     3d4:	b.ls	1d4 <FSE_readNCount+0x18c>  // b.plast
     3d8:	cmp	w8, #0x20
     3dc:	mov	x0, #0xffffffffffffffec    	// #-20
     3e0:	ccmp	w7, #0x1, #0x0, le
     3e4:	b.ne	c4 <FSE_readNCount+0x7c>  // b.any
     3e8:	add	w0, w8, #0x7
     3ec:	str	w3, [x20]
     3f0:	ldp	x21, x22, [sp, #32]
     3f4:	asr	w0, w0, #3
     3f8:	ldr	x23, [sp, #48]
     3fc:	add	x0, x9, w0, sxtw
     400:	sub	x0, x0, x19
     404:	ldp	x19, x20, [sp, #16]
     408:	ldp	x29, x30, [sp], #80
     40c:	ret
     410:	ldr	w4, [x9]
     414:	and	w8, w8, #0x7
     418:	mov	w3, w1
     41c:	lsr	w4, w4, w8
     420:	b	1dc <FSE_readNCount+0x194>
     424:	mov	x10, x9
     428:	mov	w6, w1
     42c:	b	248 <FSE_readNCount+0x200>
     430:	mov	x0, #0xffffffffffffffd0    	// #-48
     434:	b	c4 <FSE_readNCount+0x7c>

0000000000000438 <HUF_readStats>:
     438:	stp	x29, x30, [sp, #-336]!
     43c:	mov	x29, sp
     440:	stp	x21, x22, [sp, #32]
     444:	mov	x22, #0xffffffffffffffb8    	// #-72
     448:	cbz	x6, 530 <HUF_readStats+0xf8>
     44c:	stp	x19, x20, [sp, #16]
     450:	mov	x20, x3
     454:	mov	x21, x2
     458:	stp	x23, x24, [sp, #48]
     45c:	mov	x19, x0
     460:	mov	x23, x4
     464:	ldrb	w3, [x5]
     468:	cmp	x3, #0x7f
     46c:	b.ls	540 <HUF_readStats+0x108>  // b.plast
     470:	sub	x0, x3, #0x7e
     474:	sub	x22, x3, #0x7f
     478:	lsr	x3, x0, #1
     47c:	add	x24, x3, #0x1
     480:	cmp	x24, x6
     484:	b.hi	618 <HUF_readStats+0x1e0>  // b.pmore
     488:	cmp	x1, x22
     48c:	mov	x2, #0x0                   	// #0
     490:	mov	w1, #0x0                   	// #0
     494:	b.ls	524 <HUF_readStats+0xec>  // b.plast
     498:	lsr	w6, w1, #1
     49c:	add	w3, w1, #0x1
     4a0:	add	x6, x6, #0x1
     4a4:	add	w1, w1, #0x2
     4a8:	cmp	x22, w1, uxtw
     4ac:	ldrb	w0, [x5, x6]
     4b0:	lsr	w0, w0, #4
     4b4:	strb	w0, [x19, x2]
     4b8:	mov	w2, w1
     4bc:	ldrb	w0, [x5, x6]
     4c0:	and	w0, w0, #0xf
     4c4:	strb	w0, [x19, w3, uxtw]
     4c8:	b.hi	498 <HUF_readStats+0x60>  // b.pmore
     4cc:	mov	x0, x21
     4d0:	mov	x2, #0x34                  	// #52
     4d4:	mov	w1, #0x0                   	// #0
     4d8:	bl	0 <grub_memset>
     4dc:	mov	w1, #0x0                   	// #0
     4e0:	mov	w0, #0x0                   	// #0
     4e4:	mov	x3, #0x0                   	// #0
     4e8:	mov	w4, #0x1                   	// #1
     4ec:	b	514 <HUF_readStats+0xdc>
     4f0:	ldr	w5, [x21, x2, lsl #2]
     4f4:	cmp	x22, w1, uxtw
     4f8:	add	w5, w5, #0x1
     4fc:	str	w5, [x21, x2, lsl #2]
     500:	ldrb	w5, [x19, x3]
     504:	mov	w3, w1
     508:	lsl	w5, w4, w5
     50c:	add	w0, w0, w5, asr #1
     510:	b.ls	5a0 <HUF_readStats+0x168>  // b.plast
     514:	ldrb	w2, [x19, x3]
     518:	add	w1, w1, #0x1
     51c:	cmp	w2, #0xb
     520:	b.ls	4f0 <HUF_readStats+0xb8>  // b.plast
     524:	ldp	x19, x20, [sp, #16]
     528:	mov	x22, #0xffffffffffffffec    	// #-20
     52c:	ldp	x23, x24, [sp, #48]
     530:	mov	x0, x22
     534:	ldp	x21, x22, [sp, #32]
     538:	ldp	x29, x30, [sp], #336
     53c:	ret
     540:	add	x24, x3, #0x1
     544:	mov	x22, #0xffffffffffffffb8    	// #-72
     548:	cmp	x24, x6
     54c:	b.ls	568 <HUF_readStats+0x130>  // b.plast
     550:	mov	x0, x22
     554:	ldp	x19, x20, [sp, #16]
     558:	ldp	x21, x22, [sp, #32]
     55c:	ldp	x23, x24, [sp, #48]
     560:	ldp	x29, x30, [sp], #336
     564:	ret
     568:	add	x2, x5, #0x1
     56c:	sub	x1, x1, #0x1
     570:	add	x4, sp, #0x48
     574:	mov	w5, #0x6                   	// #6
     578:	bl	1498 <FSE_decompress_wksp>
     57c:	mov	x22, x0
     580:	cmn	x0, #0x78
     584:	b.hi	550 <HUF_readStats+0x118>  // b.pmore
     588:	mov	x0, x21
     58c:	mov	x2, #0x34                  	// #52
     590:	mov	w1, #0x0                   	// #0
     594:	bl	0 <grub_memset>
     598:	cbnz	x22, 4dc <HUF_readStats+0xa4>
     59c:	b	524 <HUF_readStats+0xec>
     5a0:	cbz	w0, 524 <HUF_readStats+0xec>
     5a4:	clz	w2, w0
     5a8:	mov	w1, #0x1f                  	// #31
     5ac:	sub	w2, w1, w2
     5b0:	add	w2, w2, #0x1
     5b4:	cmp	w2, #0xc
     5b8:	b.hi	524 <HUF_readStats+0xec>  // b.pmore
     5bc:	lsl	w3, w4, w2
     5c0:	sub	w0, w3, w0
     5c4:	clz	w3, w0
     5c8:	str	w2, [x23]
     5cc:	sub	w1, w1, w3
     5d0:	lsl	w4, w4, w1
     5d4:	cmp	w0, w4
     5d8:	b.ne	524 <HUF_readStats+0xec>  // b.any
     5dc:	add	w0, w1, #0x1
     5e0:	strb	w0, [x19, x22]
     5e4:	ldr	w1, [x21, x0, lsl #2]
     5e8:	add	w1, w1, #0x1
     5ec:	str	w1, [x21, x0, lsl #2]
     5f0:	ldr	w0, [x21, #4]
     5f4:	cmp	w0, #0x1
     5f8:	b.ls	524 <HUF_readStats+0xec>  // b.plast
     5fc:	tbnz	w0, #0, 524 <HUF_readStats+0xec>
     600:	add	w0, w22, #0x1
     604:	mov	x22, x24
     608:	ldp	x23, x24, [sp, #48]
     60c:	str	w0, [x20]
     610:	ldp	x19, x20, [sp, #16]
     614:	b	530 <HUF_readStats+0xf8>
     618:	mov	x22, #0xffffffffffffffb8    	// #-72
     61c:	ldp	x19, x20, [sp, #16]
     620:	ldp	x23, x24, [sp, #48]
     624:	b	530 <HUF_readStats+0xf8>

0000000000000628 <ERR_getErrorString>:
     628:	cmp	w0, #0x66
     62c:	b.hi	640 <ERR_getErrorString+0x18>  // b.pmore
     630:	adrp	x1, 0 <FSE_versionNumber>
     634:	ldr	x1, [x1]
     638:	ldr	x0, [x1, w0, uxtw #3]
     63c:	ret
     640:	adrp	x0, 0 <FSE_versionNumber>
     644:	ldr	x0, [x0]
     648:	ret
     64c:	nop
	...

0000000000000660 <FSE_createDTable>:
     660:	mov	w2, #0xf                   	// #15
     664:	cmp	w0, w2
     668:	csel	w0, w0, w2, ls  // ls = plast
     66c:	mov	w1, #0x1                   	// #1
     670:	lsl	w0, w1, w0
     674:	add	w0, w0, w1
     678:	sbfiz	x0, x0, #2, #32
     67c:	b	0 <grub_malloc>

0000000000000680 <FSE_freeDTable>:
     680:	b	0 <grub_free>
     684:	nop

0000000000000688 <FSE_buildDTable>:
     688:	cmp	w2, #0xff
     68c:	b.hi	878 <FSE_buildDTable+0x1f0>  // b.pmore
     690:	sub	sp, sp, #0x270
     694:	cmp	w3, #0xc
     698:	stp	x29, x30, [sp]
     69c:	mov	x29, sp
     6a0:	stp	x23, x24, [sp, #48]
     6a4:	mov	x24, x0
     6a8:	mov	w23, w3
     6ac:	mov	x0, #0xffffffffffffffd4    	// #-44
     6b0:	b.hi	868 <FSE_buildDTable+0x1e0>  // b.pmore
     6b4:	sub	w3, w3, #0x1
     6b8:	str	x27, [sp, #80]
     6bc:	mov	x27, x1
     6c0:	mov	w1, #0x1                   	// #1
     6c4:	lsl	w3, w1, w3
     6c8:	stp	x19, x20, [sp, #16]
     6cc:	mov	w5, w1
     6d0:	stp	x21, x22, [sp, #32]
     6d4:	add	x22, sp, #0x70
     6d8:	add	x21, x24, #0x4
     6dc:	stp	x25, x26, [sp, #64]
     6e0:	mov	w25, w2
     6e4:	lsl	w26, w1, w23
     6e8:	sub	w20, w26, #0x1
     6ec:	mov	x2, x22
     6f0:	mov	w7, w25
     6f4:	mov	w19, w20
     6f8:	sxth	w3, w3
     6fc:	mov	w8, w1
     700:	mov	w9, w1
     704:	mov	x0, #0x0                   	// #0
     708:	mov	w6, #0x0                   	// #0
     70c:	strh	w23, [sp, #104]
     710:	strh	w1, [sp, #106]
     714:	b	738 <FSE_buildDTable+0xb0>
     718:	strh	w1, [x2]
     71c:	cmp	w1, w3
     720:	csel	w6, w6, w8, lt  // lt = tstop
     724:	csel	w5, w5, wzr, lt  // lt = tstop
     728:	add	x2, x2, #0x2
     72c:	cmp	x7, x0
     730:	add	x0, x0, #0x1
     734:	b.eq	764 <FSE_buildDTable+0xdc>  // b.none
     738:	ldrsh	w1, [x27, x0, lsl #1]
     73c:	cmn	w1, #0x1
     740:	b.ne	718 <FSE_buildDTable+0x90>  // b.any
     744:	add	x1, x21, w19, uxtw #2
     748:	strh	w9, [x2]
     74c:	cmp	x7, x0
     750:	sub	w19, w19, #0x1
     754:	add	x2, x2, #0x2
     758:	strb	w0, [x1, #2]
     75c:	add	x0, x0, #0x1
     760:	b.ne	738 <FSE_buildDTable+0xb0>  // b.any
     764:	cbz	w6, 76c <FSE_buildDTable+0xe4>
     768:	strh	w5, [sp, #106]
     76c:	add	x1, sp, #0x68
     770:	mov	x0, x24
     774:	mov	x2, #0x4                   	// #4
     778:	bl	0 <grub_memmove>
     77c:	lsr	w0, w26, #3
     780:	mov	x4, x27
     784:	add	w0, w0, w26, lsr #1
     788:	mov	w1, #0x0                   	// #0
     78c:	add	w0, w0, #0x3
     790:	mov	w6, #0x0                   	// #0
     794:	nop
     798:	ldrsh	w3, [x4]
     79c:	and	w5, w6, #0xff
     7a0:	mov	w2, #0x0                   	// #0
     7a4:	cmp	w3, #0x0
     7a8:	b.le	7e8 <FSE_buildDTable+0x160>
     7ac:	nop
     7b0:	add	x3, x21, w1, uxtw #2
     7b4:	add	w1, w0, w1
     7b8:	and	w1, w1, w20
     7bc:	cmp	w19, w1
     7c0:	strb	w5, [x3, #2]
     7c4:	b.cs	7d8 <FSE_buildDTable+0x150>  // b.hs, b.nlast
     7c8:	add	w1, w0, w1
     7cc:	and	w1, w1, w20
     7d0:	cmp	w19, w1
     7d4:	b.cc	7c8 <FSE_buildDTable+0x140>  // b.lo, b.ul, b.last
     7d8:	ldrsh	w3, [x4]
     7dc:	add	w2, w2, #0x1
     7e0:	cmp	w3, w2
     7e4:	b.gt	7b0 <FSE_buildDTable+0x128>
     7e8:	cmp	w25, w6
     7ec:	add	x4, x4, #0x2
     7f0:	add	w6, w6, #0x1
     7f4:	b.ne	798 <FSE_buildDTable+0x110>  // b.any
     7f8:	mov	x0, #0xffffffffffffffff    	// #-1
     7fc:	cbnz	w1, 880 <FSE_buildDTable+0x1f8>
     800:	add	x24, x24, #0x8
     804:	and	w23, w23, #0xff
     808:	add	x20, x24, w20, uxtw #2
     80c:	and	w26, w26, #0xffff
     810:	mov	w4, #0x1f                  	// #31
     814:	nop
     818:	ldrb	w2, [x21, #2]
     81c:	lsl	x2, x2, #1
     820:	ldrh	w1, [x22, x2]
     824:	clz	w0, w1
     828:	add	w3, w1, #0x1
     82c:	sub	w0, w4, w0
     830:	strh	w3, [x22, x2]
     834:	sub	w0, w23, w0
     838:	and	w0, w0, #0xff
     83c:	strb	w0, [x21, #3]
     840:	lsl	w0, w1, w0
     844:	sub	w0, w0, w26
     848:	strh	w0, [x21], #4
     84c:	cmp	x20, x21
     850:	b.ne	818 <FSE_buildDTable+0x190>  // b.any
     854:	ldp	x19, x20, [sp, #16]
     858:	mov	x0, #0x0                   	// #0
     85c:	ldp	x21, x22, [sp, #32]
     860:	ldp	x25, x26, [sp, #64]
     864:	ldr	x27, [sp, #80]
     868:	ldp	x29, x30, [sp]
     86c:	ldp	x23, x24, [sp, #48]
     870:	add	sp, sp, #0x270
     874:	ret
     878:	mov	x0, #0xffffffffffffffd2    	// #-46
     87c:	ret
     880:	ldp	x29, x30, [sp]
     884:	ldp	x19, x20, [sp, #16]
     888:	ldp	x21, x22, [sp, #32]
     88c:	ldp	x23, x24, [sp, #48]
     890:	ldp	x25, x26, [sp, #64]
     894:	ldr	x27, [sp, #80]
     898:	add	sp, sp, #0x270
     89c:	ret

00000000000008a0 <FSE_buildDTable_rle>:
     8a0:	mov	x2, x0
     8a4:	mov	x0, #0x0                   	// #0
     8a8:	str	wzr, [x2]
     8ac:	strh	wzr, [x2, #4]
     8b0:	strb	w1, [x2, #6]
     8b4:	strb	wzr, [x2, #7]
     8b8:	ret
     8bc:	nop

00000000000008c0 <FSE_buildDTable_raw>:
     8c0:	mov	w4, #0x1                   	// #1
     8c4:	lsl	w3, w4, w1
     8c8:	cbz	w1, 90c <FSE_buildDTable_raw+0x4c>
     8cc:	strh	w1, [x0]
     8d0:	and	w2, w1, #0xff
     8d4:	strh	w4, [x0, #2]
     8d8:	mov	w1, #0x0                   	// #0
     8dc:	add	x0, x0, #0x4
     8e0:	cbz	w3, 904 <FSE_buildDTable_raw+0x44>
     8e4:	nop
     8e8:	strh	wzr, [x0]
     8ec:	add	x0, x0, #0x4
     8f0:	sturb	w1, [x0, #-2]
     8f4:	add	w1, w1, #0x1
     8f8:	sturb	w2, [x0, #-1]
     8fc:	cmp	w3, w1
     900:	b.ne	8e8 <FSE_buildDTable_raw+0x28>  // b.any
     904:	mov	x0, #0x0                   	// #0
     908:	ret
     90c:	mov	x0, #0xffffffffffffffff    	// #-1
     910:	ret
     914:	nop

0000000000000918 <FSE_decompress_usingDTable>:
     918:	stp	x29, x30, [sp, #-96]!
     91c:	add	x1, x0, x1
     920:	mov	x9, x0
     924:	mov	x29, sp
     928:	ldrh	w0, [x4, #2]
     92c:	sub	x11, x1, #0x3
     930:	cbnz	w0, c78 <FSE_decompress_usingDTable+0x360>
     934:	cbz	x3, 1304 <FSE_decompress_usingDTable+0x9ec>
     938:	add	x0, x2, x3
     93c:	add	x10, x2, #0x8
     940:	stp	x2, x10, [sp, #80]
     944:	cmp	x3, #0x7
     948:	ldurb	w5, [x0, #-1]
     94c:	b.hi	bec <FSE_decompress_usingDTable+0x2d4>  // b.pmore
     950:	ldrb	w0, [x2]
     954:	cmp	x3, #0x5
     958:	str	x0, [sp, #56]
     95c:	str	x2, [sp, #72]
     960:	b.eq	c58 <FSE_decompress_usingDTable+0x340>  // b.none
     964:	b.hi	c40 <FSE_decompress_usingDTable+0x328>  // b.pmore
     968:	cmp	x3, #0x3
     96c:	b.eq	980 <FSE_decompress_usingDTable+0x68>  // b.none
     970:	cmp	x3, #0x4
     974:	b.ne	c6c <FSE_decompress_usingDTable+0x354>  // b.any
     978:	ldrb	w6, [x2, #3]
     97c:	add	x0, x0, x6, lsl #24
     980:	ldrb	w6, [x2, #2]
     984:	add	x0, x0, x6, lsl #16
     988:	ldrb	w6, [x2, #1]
     98c:	add	x0, x0, x6, lsl #8
     990:	str	x0, [sp, #56]
     994:	mov	x0, #0xffffffffffffffec    	// #-20
     998:	cbz	w5, c38 <FSE_decompress_usingDTable+0x320>
     99c:	mov	w0, #0x9                   	// #9
     9a0:	sub	w16, w0, w3
     9a4:	clz	w5, w5
     9a8:	mov	x12, x2
     9ac:	add	w16, w5, w16, lsl #3
     9b0:	sub	w16, w16, #0x1f
     9b4:	ldr	x7, [sp, #56]
     9b8:	and	w0, w16, #0x3f
     9bc:	ldrh	w5, [x4]
     9c0:	lsl	x6, x7, x0
     9c4:	lsr	x6, x6, #1
     9c8:	add	w16, w5, w16
     9cc:	mvn	w0, w5
     9d0:	str	w16, [sp, #64]
     9d4:	cmp	w16, #0x40
     9d8:	lsr	x6, x6, x0
     9dc:	and	w0, w0, #0x3f
     9e0:	b.hi	1354 <FSE_decompress_usingDTable+0xa3c>  // b.pmore
     9e4:	cmp	x10, x12
     9e8:	b.ls	f44 <FSE_decompress_usingDTable+0x62c>  // b.plast
     9ec:	cmp	x2, x12
     9f0:	b.eq	1374 <FSE_decompress_usingDTable+0xa5c>  // b.none
     9f4:	lsr	w7, w16, #3
     9f8:	lsr	w3, w16, #3
     9fc:	sub	x7, x12, x7
     a00:	cmp	x2, x7
     a04:	b.ls	a14 <FSE_decompress_usingDTable+0xfc>  // b.plast
     a08:	sub	x7, x12, x2
     a0c:	mov	w3, w7
     a10:	sub	x7, x12, w7, uxtw
     a14:	sub	w16, w16, w3, lsl #3
     a18:	and	w18, w16, #0x3f
     a1c:	ldr	x8, [x7]
     a20:	str	x8, [sp, #56]
     a24:	str	x7, [sp, #72]
     a28:	lsl	x8, x8, x18
     a2c:	add	w5, w5, w16
     a30:	lsr	x8, x8, #1
     a34:	str	w5, [sp, #64]
     a38:	cmp	w5, #0x40
     a3c:	add	x3, x4, #0x4
     a40:	lsr	x18, x8, x0
     a44:	b.hi	1398 <FSE_decompress_usingDTable+0xa80>  // b.pmore
     a48:	cmp	x10, x7
     a4c:	b.ls	1320 <FSE_decompress_usingDTable+0xa08>  // b.plast
     a50:	cmp	x2, x7
     a54:	b.eq	1484 <FSE_decompress_usingDTable+0xb6c>  // b.none
     a58:	lsr	w12, w5, #3
     a5c:	lsr	w16, w5, #3
     a60:	sub	x12, x7, x12
     a64:	cmp	x2, x12
     a68:	b.ls	a78 <FSE_decompress_usingDTable+0x160>  // b.plast
     a6c:	sub	x12, x7, x2
     a70:	mov	w16, w12
     a74:	sub	x12, x7, w12, uxtw
     a78:	ldr	x0, [x12]
     a7c:	sub	w16, w5, w16, lsl #3
     a80:	str	x0, [sp, #56]
     a84:	cmp	w16, #0x40
     a88:	str	w16, [sp, #64]
     a8c:	str	x12, [sp, #72]
     a90:	b.hi	1394 <FSE_decompress_usingDTable+0xa7c>  // b.pmore
     a94:	stp	x19, x20, [sp, #16]
     a98:	str	x21, [sp, #32]
     a9c:	mov	w5, w16
     aa0:	mov	x8, x9
     aa4:	mov	w17, #0x0                   	// #0
     aa8:	mov	w15, #0x0                   	// #0
     aac:	mov	w14, #0x3f                  	// #63
     ab0:	ldr	x13, [sp, #56]
     ab4:	b	bc0 <FSE_decompress_usingDTable+0x2a8>
     ab8:	cmp	x2, x12
     abc:	b.eq	10ec <FSE_decompress_usingDTable+0x7d4>  // b.none
     ac0:	sub	x7, x12, x2
     ac4:	cmp	x2, x0
     ac8:	lsr	w4, w5, #3
     acc:	mov	w15, #0x0                   	// #0
     ad0:	sub	x12, x12, w7, uxtw
     ad4:	b.hi	10e4 <FSE_decompress_usingDTable+0x7cc>  // b.pmore
     ad8:	cmp	x8, x11
     adc:	mov	x12, x0
     ae0:	cset	w15, cc  // cc = lo, ul, last
     ae4:	ldr	x13, [x12]
     ae8:	sub	w4, w5, w4, lsl #3
     aec:	lsl	x19, x6, #2
     af0:	lsl	x21, x18, #2
     af4:	add	x30, x3, x19
     af8:	add	x20, x3, x21
     afc:	mov	w17, w15
     b00:	lsl	x5, x13, x4
     b04:	cbz	w15, 1468 <FSE_decompress_usingDTable+0xb50>
     b08:	ldrb	w0, [x30, #3]
     b0c:	lsr	x7, x5, #1
     b10:	ldrb	w5, [x30, #2]
     b14:	add	x8, x8, #0x4
     b18:	ldrh	w18, [x3, x19]
     b1c:	add	w4, w4, w0
     b20:	sturb	w5, [x8, #-4]
     b24:	sub	w0, w14, w0
     b28:	lsl	x6, x13, x4
     b2c:	ldrb	w5, [x20, #3]
     b30:	lsr	x7, x7, x0
     b34:	add	x7, x7, x18
     b38:	ldrh	w19, [x3, x21]
     b3c:	sub	w0, w14, w5
     b40:	lsr	x6, x6, #1
     b44:	lsl	x7, x7, #2
     b48:	ldrb	w18, [x20, #2]
     b4c:	lsr	x6, x6, x0
     b50:	add	x0, x3, x7
     b54:	add	x6, x6, x19
     b58:	sturb	w18, [x8, #-3]
     b5c:	add	w5, w4, w5
     b60:	lsl	x6, x6, #2
     b64:	ldrb	w4, [x0, #2]
     b68:	add	x18, x3, x6
     b6c:	ldrb	w0, [x0, #3]
     b70:	ldrh	w19, [x3, x7]
     b74:	lsl	x7, x13, x5
     b78:	sturb	w4, [x8, #-2]
     b7c:	add	w4, w5, w0
     b80:	sub	w30, w14, w0
     b84:	lsr	x7, x7, #1
     b88:	ldrb	w5, [x18, #3]
     b8c:	lsl	x0, x13, x4
     b90:	ldrb	w20, [x18, #2]
     b94:	lsr	x0, x0, #1
     b98:	ldrh	w18, [x3, x6]
     b9c:	sub	w6, w14, w5
     ba0:	sturb	w20, [x8, #-1]
     ba4:	add	w5, w4, w5
     ba8:	lsr	x0, x0, x6
     bac:	cmp	w5, #0x40
     bb0:	lsr	x6, x7, x30
     bb4:	add	x18, x0, x18
     bb8:	add	x6, x6, x19
     bbc:	b.hi	f64 <FSE_decompress_usingDTable+0x64c>  // b.pmore
     bc0:	lsr	w0, w5, #3
     bc4:	cmp	x12, x10
     bc8:	sub	x0, x12, x0
     bcc:	b.cc	ab8 <FSE_decompress_usingDTable+0x1a0>  // b.lo, b.ul, b.last
     bd0:	lsr	w0, w5, #3
     bd4:	cmp	x8, x11
     bd8:	sub	x12, x12, x0
     bdc:	and	w4, w5, #0x7
     be0:	cset	w15, cc  // cc = lo, ul, last
     be4:	ldr	x13, [x12]
     be8:	b	aec <FSE_decompress_usingDTable+0x1d4>
     bec:	sub	x6, x3, #0x8
     bf0:	mov	x0, #0xffffffffffffffff    	// #-1
     bf4:	add	x12, x2, x6
     bf8:	str	x12, [sp, #72]
     bfc:	ldr	x7, [x2, x6]
     c00:	str	x7, [sp, #56]
     c04:	cbz	w5, c38 <FSE_decompress_usingDTable+0x320>
     c08:	clz	w5, w5
     c0c:	cmn	x3, #0x78
     c10:	sub	w16, w5, #0x17
     c14:	mov	x0, x3
     c18:	b.hi	c38 <FSE_decompress_usingDTable+0x320>  // b.pmore
     c1c:	mov	w0, w16
     c20:	b	9bc <FSE_decompress_usingDTable+0xa4>
     c24:	add	x0, x3, x18, lsl #2
     c28:	add	x1, x8, #0x2
     c2c:	ldrb	w0, [x0, #2]
     c30:	strb	w0, [x8, #1]
     c34:	sub	x0, x1, x9
     c38:	ldp	x29, x30, [sp], #96
     c3c:	ret
     c40:	cmp	x3, #0x6
     c44:	b.eq	c50 <FSE_decompress_usingDTable+0x338>  // b.none
     c48:	ldrb	w6, [x2, #6]
     c4c:	add	x0, x0, x6, lsl #48
     c50:	ldrb	w6, [x2, #5]
     c54:	add	x0, x0, x6, lsl #40
     c58:	ldrb	w6, [x2, #4]
     c5c:	add	x0, x0, x6, lsl #32
     c60:	ldrb	w6, [x2, #3]
     c64:	add	x0, x0, x6, lsl #24
     c68:	b	980 <FSE_decompress_usingDTable+0x68>
     c6c:	cmp	x3, #0x2
     c70:	b.eq	988 <FSE_decompress_usingDTable+0x70>  // b.none
     c74:	b	994 <FSE_decompress_usingDTable+0x7c>
     c78:	cbz	x3, 1304 <FSE_decompress_usingDTable+0x9ec>
     c7c:	add	x0, x2, x3
     c80:	add	x10, x2, #0x8
     c84:	stp	x2, x10, [sp, #80]
     c88:	cmp	x3, #0x7
     c8c:	ldurb	w5, [x0, #-1]
     c90:	b.hi	f0c <FSE_decompress_usingDTable+0x5f4>  // b.pmore
     c94:	ldrb	w0, [x2]
     c98:	cmp	x3, #0x5
     c9c:	str	x0, [sp, #56]
     ca0:	str	x2, [sp, #72]
     ca4:	b.eq	12f8 <FSE_decompress_usingDTable+0x9e0>  // b.none
     ca8:	b.hi	12e0 <FSE_decompress_usingDTable+0x9c8>  // b.pmore
     cac:	cmp	x3, #0x3
     cb0:	b.eq	cc4 <FSE_decompress_usingDTable+0x3ac>  // b.none
     cb4:	cmp	x3, #0x4
     cb8:	b.ne	12d4 <FSE_decompress_usingDTable+0x9bc>  // b.any
     cbc:	ldrb	w6, [x2, #3]
     cc0:	add	x0, x0, x6, lsl #24
     cc4:	ldrb	w6, [x2, #2]
     cc8:	add	x0, x0, x6, lsl #16
     ccc:	ldrb	w6, [x2, #1]
     cd0:	add	x0, x0, x6, lsl #8
     cd4:	str	x0, [sp, #56]
     cd8:	mov	x0, #0xffffffffffffffec    	// #-20
     cdc:	cbz	w5, c38 <FSE_decompress_usingDTable+0x320>
     ce0:	mov	w0, #0x9                   	// #9
     ce4:	sub	w14, w0, w3
     ce8:	clz	w5, w5
     cec:	mov	x8, x2
     cf0:	add	w14, w5, w14, lsl #3
     cf4:	sub	w14, w14, #0x1f
     cf8:	ldr	x7, [sp, #56]
     cfc:	and	w0, w14, #0x3f
     d00:	ldrh	w5, [x4]
     d04:	lsl	x6, x7, x0
     d08:	lsr	x6, x6, #1
     d0c:	add	w14, w5, w14
     d10:	mvn	w0, w5
     d14:	str	w14, [sp, #64]
     d18:	cmp	w14, #0x40
     d1c:	lsr	x6, x6, x0
     d20:	and	w0, w0, #0x3f
     d24:	b.hi	13f4 <FSE_decompress_usingDTable+0xadc>  // b.pmore
     d28:	cmp	x10, x8
     d2c:	b.ls	13d4 <FSE_decompress_usingDTable+0xabc>  // b.plast
     d30:	cmp	x2, x8
     d34:	b.eq	1414 <FSE_decompress_usingDTable+0xafc>  // b.none
     d38:	lsr	w7, w14, #3
     d3c:	lsr	w3, w14, #3
     d40:	sub	x7, x8, x7
     d44:	cmp	x2, x7
     d48:	b.hi	13a0 <FSE_decompress_usingDTable+0xa88>  // b.pmore
     d4c:	sub	w14, w14, w3, lsl #3
     d50:	and	w16, w14, #0x3f
     d54:	ldr	x8, [x7]
     d58:	str	x8, [sp, #56]
     d5c:	str	x7, [sp, #72]
     d60:	lsl	x8, x8, x16
     d64:	add	w5, w5, w14
     d68:	lsr	x8, x8, #1
     d6c:	str	w5, [sp, #64]
     d70:	cmp	w5, #0x40
     d74:	add	x3, x4, #0x4
     d78:	lsr	x16, x8, x0
     d7c:	b.hi	1438 <FSE_decompress_usingDTable+0xb20>  // b.pmore
     d80:	cmp	x10, x7
     d84:	b.ls	13b0 <FSE_decompress_usingDTable+0xa98>  // b.plast
     d88:	cmp	x2, x7
     d8c:	b.eq	1440 <FSE_decompress_usingDTable+0xb28>  // b.none
     d90:	lsr	w8, w5, #3
     d94:	lsr	w14, w5, #3
     d98:	sub	x8, x7, x8
     d9c:	cmp	x2, x8
     da0:	b.ls	db0 <FSE_decompress_usingDTable+0x498>  // b.plast
     da4:	sub	x8, x7, x2
     da8:	mov	w14, w8
     dac:	sub	x8, x7, w8, uxtw
     db0:	ldr	x0, [x8]
     db4:	sub	w14, w5, w14, lsl #3
     db8:	str	x0, [sp, #56]
     dbc:	cmp	w14, #0x40
     dc0:	str	w14, [sp, #64]
     dc4:	str	x8, [sp, #72]
     dc8:	b.hi	1434 <FSE_decompress_usingDTable+0xb1c>  // b.pmore
     dcc:	stp	x19, x20, [sp, #16]
     dd0:	mov	w5, w14
     dd4:	mov	x7, x9
     dd8:	mov	w15, #0x0                   	// #0
     ddc:	mov	w13, #0x0                   	// #0
     de0:	ldr	x12, [sp, #56]
     de4:	b	ee0 <FSE_decompress_usingDTable+0x5c8>
     de8:	cmp	x2, x8
     dec:	b.eq	12a8 <FSE_decompress_usingDTable+0x990>  // b.none
     df0:	sub	x4, x8, x2
     df4:	cmp	x2, x0
     df8:	lsr	w17, w5, #3
     dfc:	mov	w13, #0x0                   	// #0
     e00:	sub	x8, x8, w4, uxtw
     e04:	b.hi	1294 <FSE_decompress_usingDTable+0x97c>  // b.pmore
     e08:	cmp	x7, x11
     e0c:	mov	x8, x0
     e10:	cset	w13, cc  // cc = lo, ul, last
     e14:	ldr	x12, [x8]
     e18:	sub	w17, w5, w17, lsl #3
     e1c:	lsl	x20, x6, #2
     e20:	lsl	x19, x16, #2
     e24:	add	x4, x3, x20
     e28:	add	x18, x3, x19
     e2c:	mov	w15, w13
     e30:	lsl	x0, x12, x17
     e34:	cbz	w13, 1450 <FSE_decompress_usingDTable+0xb38>
     e38:	ldrb	w5, [x4, #3]
     e3c:	add	x7, x7, #0x4
     e40:	ldrb	w16, [x4, #2]
     e44:	ldrh	w6, [x3, x20]
     e48:	neg	w4, w5
     e4c:	sturb	w16, [x7, #-4]
     e50:	add	w5, w5, w17
     e54:	lsr	x4, x0, x4
     e58:	add	x4, x4, x6
     e5c:	ldrb	w16, [x18, #3]
     e60:	lsl	x0, x12, x5
     e64:	ldrh	w6, [x3, x19]
     e68:	lsl	x4, x4, #2
     e6c:	neg	w19, w16
     e70:	ldrb	w18, [x18, #2]
     e74:	add	x17, x3, x4
     e78:	sturb	w18, [x7, #-3]
     e7c:	lsr	x0, x0, x19
     e80:	add	x0, x0, x6
     e84:	add	w5, w5, w16
     e88:	ldrh	w18, [x3, x4]
     e8c:	lsl	x0, x0, #2
     e90:	ldrb	w6, [x17, #2]
     e94:	add	x16, x3, x0
     e98:	ldrb	w4, [x17, #3]
     e9c:	sturb	w6, [x7, #-2]
     ea0:	lsl	x6, x12, x5
     ea4:	add	w5, w5, w4
     ea8:	neg	w4, w4
     eac:	ldrb	w17, [x16, #3]
     eb0:	ldrb	w20, [x16, #2]
     eb4:	lsl	x16, x12, x5
     eb8:	ldrh	w19, [x3, x0]
     ebc:	neg	w0, w17
     ec0:	sturb	w20, [x7, #-1]
     ec4:	add	w5, w5, w17
     ec8:	lsr	x0, x16, x0
     ecc:	cmp	w5, #0x40
     ed0:	lsr	x4, x6, x4
     ed4:	add	x16, x0, x19
     ed8:	add	x6, x4, x18
     edc:	b.hi	110c <FSE_decompress_usingDTable+0x7f4>  // b.pmore
     ee0:	lsr	w0, w5, #3
     ee4:	cmp	x8, x10
     ee8:	sub	x0, x8, x0
     eec:	b.cc	de8 <FSE_decompress_usingDTable+0x4d0>  // b.lo, b.ul, b.last
     ef0:	lsr	w0, w5, #3
     ef4:	cmp	x7, x11
     ef8:	sub	x8, x8, x0
     efc:	and	w17, w5, #0x7
     f00:	cset	w13, cc  // cc = lo, ul, last
     f04:	ldr	x12, [x8]
     f08:	b	e1c <FSE_decompress_usingDTable+0x504>
     f0c:	sub	x6, x3, #0x8
     f10:	mov	x0, #0xffffffffffffffff    	// #-1
     f14:	add	x8, x2, x6
     f18:	str	x8, [sp, #72]
     f1c:	ldr	x7, [x2, x6]
     f20:	str	x7, [sp, #56]
     f24:	cbz	w5, c38 <FSE_decompress_usingDTable+0x320>
     f28:	clz	w14, w5
     f2c:	cmn	x3, #0x78
     f30:	sub	w14, w14, #0x17
     f34:	mov	x0, x3
     f38:	b.hi	c38 <FSE_decompress_usingDTable+0x320>  // b.pmore
     f3c:	mov	w0, w14
     f40:	b	d00 <FSE_decompress_usingDTable+0x3e8>
     f44:	lsr	w7, w16, #3
     f48:	and	w16, w16, #0x7
     f4c:	sub	x7, x12, x7
     f50:	mov	w18, w16
     f54:	ldr	x8, [x7]
     f58:	str	x8, [sp, #56]
     f5c:	str	x7, [sp, #72]
     f60:	b	a28 <FSE_decompress_usingDTable+0x110>
     f64:	ldp	x19, x20, [sp, #16]
     f68:	str	x13, [sp, #56]
     f6c:	ldr	x21, [sp, #32]
     f70:	str	w5, [sp, #64]
     f74:	str	x12, [sp, #72]
     f78:	sub	x13, x1, #0x2
     f7c:	cmp	x13, x8
     f80:	b.cc	129c <FSE_decompress_usingDTable+0x984>  // b.lo, b.ul, b.last
     f84:	sub	x12, x1, #0x1
     f88:	mov	w14, #0x3f                  	// #63
     f8c:	sub	x12, x12, x8
     f90:	and	x12, x12, #0xfffffffffffffffe
     f94:	ldr	x11, [sp, #56]
     f98:	add	x12, x8, x12
     f9c:	ldr	x0, [sp, #72]
     fa0:	lsl	x6, x6, #2
     fa4:	add	x7, x3, x6
     fa8:	lsl	x1, x11, x5
     fac:	lsr	x4, x1, #1
     fb0:	ldrh	w6, [x3, x6]
     fb4:	ldrb	w1, [x7, #3]
     fb8:	ldrb	w15, [x7, #2]
     fbc:	sub	w7, w14, w1
     fc0:	strb	w15, [x8]
     fc4:	add	w5, w1, w5
     fc8:	cmp	w5, #0x40
     fcc:	lsr	x1, x4, x7
     fd0:	add	x6, x1, x6
     fd4:	b.hi	c24 <FSE_decompress_usingDTable+0x30c>  // b.pmore
     fd8:	cmp	x10, x0
     fdc:	b.ls	10a4 <FSE_decompress_usingDTable+0x78c>  // b.plast
     fe0:	mov	x15, x2
     fe4:	cmp	x2, x0
     fe8:	b.eq	1014 <FSE_decompress_usingDTable+0x6fc>  // b.none
     fec:	lsr	w1, w5, #3
     ff0:	lsr	w4, w5, #3
     ff4:	sub	x15, x0, x1
     ff8:	cmp	x2, x15
     ffc:	b.ls	100c <FSE_decompress_usingDTable+0x6f4>  // b.plast
    1000:	sub	x1, x0, x2
    1004:	mov	w4, w1
    1008:	sub	x15, x0, w1, uxtw
    100c:	ldr	x11, [x15]
    1010:	sub	w5, w5, w4, lsl #3
    1014:	cmp	x8, x12
    1018:	b.eq	129c <FSE_decompress_usingDTable+0x984>  // b.none
    101c:	lsl	x18, x18, #2
    1020:	add	x16, x8, #0x2
    1024:	add	x4, x3, x18
    1028:	lsl	x0, x11, x5
    102c:	lsr	x0, x0, #1
    1030:	ldrh	w18, [x3, x18]
    1034:	ldrb	w1, [x4, #3]
    1038:	ldrb	w7, [x4, #2]
    103c:	sub	w4, w14, w1
    1040:	sturb	w7, [x16, #-1]
    1044:	add	w5, w1, w5
    1048:	lsr	x0, x0, x4
    104c:	cmp	w5, #0x40
    1050:	add	x18, x0, x18
    1054:	b.hi	10cc <FSE_decompress_usingDTable+0x7b4>  // b.pmore
    1058:	cmp	x10, x15
    105c:	b.ls	10b8 <FSE_decompress_usingDTable+0x7a0>  // b.plast
    1060:	mov	x0, x2
    1064:	cmp	x2, x15
    1068:	b.eq	1094 <FSE_decompress_usingDTable+0x77c>  // b.none
    106c:	lsr	w0, w5, #3
    1070:	lsr	w1, w5, #3
    1074:	sub	x0, x15, x0
    1078:	cmp	x2, x0
    107c:	b.ls	108c <FSE_decompress_usingDTable+0x774>  // b.plast
    1080:	sub	x0, x15, x2
    1084:	mov	w1, w0
    1088:	sub	x0, x15, w0, uxtw
    108c:	ldr	x11, [x0]
    1090:	sub	w5, w5, w1, lsl #3
    1094:	cmp	x13, x16
    1098:	b.cc	129c <FSE_decompress_usingDTable+0x984>  // b.lo, b.ul, b.last
    109c:	mov	x8, x16
    10a0:	b	fa0 <FSE_decompress_usingDTable+0x688>
    10a4:	lsr	w1, w5, #3
    10a8:	and	w5, w5, #0x7
    10ac:	sub	x15, x0, x1
    10b0:	ldr	x11, [x15]
    10b4:	b	1014 <FSE_decompress_usingDTable+0x6fc>
    10b8:	lsr	w0, w5, #3
    10bc:	and	w5, w5, #0x7
    10c0:	sub	x0, x15, x0
    10c4:	ldr	x11, [x0]
    10c8:	b	1094 <FSE_decompress_usingDTable+0x77c>
    10cc:	add	x3, x3, x6, lsl #2
    10d0:	add	x1, x8, #0x3
    10d4:	ldrb	w0, [x3, #2]
    10d8:	strb	w0, [x8, #2]
    10dc:	sub	x0, x1, x9
    10e0:	b	c38 <FSE_decompress_usingDTable+0x320>
    10e4:	mov	w4, w7
    10e8:	b	ae4 <FSE_decompress_usingDTable+0x1cc>
    10ec:	cbz	w17, 10f4 <FSE_decompress_usingDTable+0x7dc>
    10f0:	str	x13, [sp, #56]
    10f4:	cbz	w15, 12c4 <FSE_decompress_usingDTable+0x9ac>
    10f8:	str	w5, [sp, #64]
    10fc:	str	x12, [sp, #72]
    1100:	ldp	x19, x20, [sp, #16]
    1104:	ldr	x21, [sp, #32]
    1108:	b	f78 <FSE_decompress_usingDTable+0x660>
    110c:	ldp	x19, x20, [sp, #16]
    1110:	str	x12, [sp, #56]
    1114:	str	w5, [sp, #64]
    1118:	str	x8, [sp, #72]
    111c:	sub	x14, x1, #0x2
    1120:	cmp	x14, x7
    1124:	b.cc	129c <FSE_decompress_usingDTable+0x984>  // b.lo, b.ul, b.last
    1128:	sub	x13, x1, #0x1
    112c:	sub	x13, x13, x7
    1130:	and	x13, x13, #0xfffffffffffffffe
    1134:	ldr	x12, [sp, #56]
    1138:	add	x13, x7, x13
    113c:	ldr	x1, [sp, #72]
    1140:	lsl	x6, x6, #2
    1144:	add	x8, x3, x6
    1148:	lsl	x4, x12, x5
    114c:	ldrh	w6, [x3, x6]
    1150:	ldrb	w0, [x8, #3]
    1154:	ldrb	w11, [x8, #2]
    1158:	neg	w8, w0
    115c:	strb	w11, [x7]
    1160:	add	w5, w0, w5
    1164:	cmp	w5, #0x40
    1168:	lsr	x0, x4, x8
    116c:	add	x6, x0, x6
    1170:	b.hi	1264 <FSE_decompress_usingDTable+0x94c>  // b.pmore
    1174:	cmp	x10, x1
    1178:	b.ls	123c <FSE_decompress_usingDTable+0x924>  // b.plast
    117c:	mov	x4, x2
    1180:	cmp	x2, x1
    1184:	b.eq	11b0 <FSE_decompress_usingDTable+0x898>  // b.none
    1188:	lsr	w4, w5, #3
    118c:	lsr	w0, w5, #3
    1190:	sub	x4, x1, x4
    1194:	cmp	x2, x4
    1198:	b.ls	11a8 <FSE_decompress_usingDTable+0x890>  // b.plast
    119c:	sub	x4, x1, x2
    11a0:	mov	w0, w4
    11a4:	sub	x4, x1, w4, uxtw
    11a8:	ldr	x12, [x4]
    11ac:	sub	w5, w5, w0, lsl #3
    11b0:	cmp	x7, x13
    11b4:	b.eq	129c <FSE_decompress_usingDTable+0x984>  // b.none
    11b8:	lsl	x0, x16, #2
    11bc:	add	x8, x7, #0x2
    11c0:	add	x11, x3, x0
    11c4:	lsl	x1, x12, x5
    11c8:	ldrh	w16, [x3, x0]
    11cc:	ldrb	w0, [x11, #3]
    11d0:	ldrb	w15, [x11, #2]
    11d4:	neg	w11, w0
    11d8:	sturb	w15, [x8, #-1]
    11dc:	add	w5, w0, w5
    11e0:	cmp	w5, #0x40
    11e4:	lsr	x0, x1, x11
    11e8:	add	x16, x0, x16
    11ec:	b.hi	127c <FSE_decompress_usingDTable+0x964>  // b.pmore
    11f0:	cmp	x10, x4
    11f4:	b.ls	1250 <FSE_decompress_usingDTable+0x938>  // b.plast
    11f8:	mov	x1, x2
    11fc:	cmp	x2, x4
    1200:	b.eq	122c <FSE_decompress_usingDTable+0x914>  // b.none
    1204:	lsr	w1, w5, #3
    1208:	lsr	w0, w5, #3
    120c:	sub	x1, x4, x1
    1210:	cmp	x2, x1
    1214:	b.ls	1224 <FSE_decompress_usingDTable+0x90c>  // b.plast
    1218:	sub	x1, x4, x2
    121c:	mov	w0, w1
    1220:	sub	x1, x4, w1, uxtw
    1224:	ldr	x12, [x1]
    1228:	sub	w5, w5, w0, lsl #3
    122c:	cmp	x14, x8
    1230:	b.cc	129c <FSE_decompress_usingDTable+0x984>  // b.lo, b.ul, b.last
    1234:	mov	x7, x8
    1238:	b	1140 <FSE_decompress_usingDTable+0x828>
    123c:	lsr	w4, w5, #3
    1240:	and	w5, w5, #0x7
    1244:	sub	x4, x1, x4
    1248:	ldr	x12, [x4]
    124c:	b	11b0 <FSE_decompress_usingDTable+0x898>
    1250:	lsr	w1, w5, #3
    1254:	and	w5, w5, #0x7
    1258:	sub	x1, x4, x1
    125c:	ldr	x12, [x1]
    1260:	b	122c <FSE_decompress_usingDTable+0x914>
    1264:	add	x3, x3, x16, lsl #2
    1268:	add	x1, x7, #0x2
    126c:	ldrb	w0, [x3, #2]
    1270:	strb	w0, [x7, #1]
    1274:	sub	x0, x1, x9
    1278:	b	c38 <FSE_decompress_usingDTable+0x320>
    127c:	add	x3, x3, x6, lsl #2
    1280:	add	x1, x7, #0x3
    1284:	ldrb	w0, [x3, #2]
    1288:	strb	w0, [x7, #2]
    128c:	sub	x0, x1, x9
    1290:	b	c38 <FSE_decompress_usingDTable+0x320>
    1294:	mov	w17, w4
    1298:	b	e14 <FSE_decompress_usingDTable+0x4fc>
    129c:	mov	x0, #0xffffffffffffffba    	// #-70
    12a0:	ldp	x29, x30, [sp], #96
    12a4:	ret
    12a8:	cbz	w15, 12b0 <FSE_decompress_usingDTable+0x998>
    12ac:	str	x12, [sp, #56]
    12b0:	cbz	w13, 1348 <FSE_decompress_usingDTable+0xa30>
    12b4:	str	w5, [sp, #64]
    12b8:	str	x8, [sp, #72]
    12bc:	ldp	x19, x20, [sp, #16]
    12c0:	b	111c <FSE_decompress_usingDTable+0x804>
    12c4:	mov	w5, w16
    12c8:	ldp	x19, x20, [sp, #16]
    12cc:	ldr	x21, [sp, #32]
    12d0:	b	f78 <FSE_decompress_usingDTable+0x660>
    12d4:	cmp	x3, #0x2
    12d8:	b.eq	ccc <FSE_decompress_usingDTable+0x3b4>  // b.none
    12dc:	b	cd8 <FSE_decompress_usingDTable+0x3c0>
    12e0:	cmp	x3, #0x6
    12e4:	b.eq	12f0 <FSE_decompress_usingDTable+0x9d8>  // b.none
    12e8:	ldrb	w6, [x2, #6]
    12ec:	add	x0, x0, x6, lsl #48
    12f0:	ldrb	w6, [x2, #5]
    12f4:	add	x0, x0, x6, lsl #40
    12f8:	ldrb	w6, [x2, #4]
    12fc:	add	x0, x0, x6, lsl #32
    1300:	b	cbc <FSE_decompress_usingDTable+0x3a4>
    1304:	add	x0, sp, #0x38
    1308:	mov	x2, #0x28                  	// #40
    130c:	mov	w1, #0x0                   	// #0
    1310:	bl	0 <grub_memset>
    1314:	mov	x0, #0xffffffffffffffb8    	// #-72
    1318:	ldp	x29, x30, [sp], #96
    131c:	ret
    1320:	lsr	w12, w5, #3
    1324:	and	w16, w5, #0x7
    1328:	sub	x12, x7, x12
    132c:	stp	x19, x20, [sp, #16]
    1330:	ldr	x0, [x12]
    1334:	str	x21, [sp, #32]
    1338:	str	x0, [sp, #56]
    133c:	str	w16, [sp, #64]
    1340:	str	x12, [sp, #72]
    1344:	b	a9c <FSE_decompress_usingDTable+0x184>
    1348:	mov	w5, w14
    134c:	ldp	x19, x20, [sp, #16]
    1350:	b	111c <FSE_decompress_usingDTable+0x804>
    1354:	lsl	x7, x7, x16
    1358:	add	w5, w5, w16
    135c:	lsr	x7, x7, #1
    1360:	add	x3, x4, #0x4
    1364:	mov	x8, x9
    1368:	str	w5, [sp, #64]
    136c:	lsr	x18, x7, x0
    1370:	b	f78 <FSE_decompress_usingDTable+0x660>
    1374:	lsl	x7, x7, x16
    1378:	add	w16, w5, w16
    137c:	lsr	x5, x7, #1
    1380:	str	w16, [sp, #64]
    1384:	cmp	w16, #0x40
    1388:	add	x3, x4, #0x4
    138c:	lsr	x18, x5, x0
    1390:	b.ls	a94 <FSE_decompress_usingDTable+0x17c>  // b.plast
    1394:	mov	w5, w16
    1398:	mov	x8, x9
    139c:	b	f78 <FSE_decompress_usingDTable+0x660>
    13a0:	sub	x7, x8, x2
    13a4:	mov	w3, w7
    13a8:	sub	x7, x8, w7, uxtw
    13ac:	b	d4c <FSE_decompress_usingDTable+0x434>
    13b0:	lsr	w8, w5, #3
    13b4:	and	w14, w5, #0x7
    13b8:	sub	x8, x7, x8
    13bc:	stp	x19, x20, [sp, #16]
    13c0:	ldr	x0, [x8]
    13c4:	str	x0, [sp, #56]
    13c8:	str	w14, [sp, #64]
    13cc:	str	x8, [sp, #72]
    13d0:	b	dd0 <FSE_decompress_usingDTable+0x4b8>
    13d4:	lsr	w7, w14, #3
    13d8:	and	w14, w14, #0x7
    13dc:	sub	x7, x8, x7
    13e0:	mov	w16, w14
    13e4:	ldr	x8, [x7]
    13e8:	str	x8, [sp, #56]
    13ec:	str	x7, [sp, #72]
    13f0:	b	d60 <FSE_decompress_usingDTable+0x448>
    13f4:	lsl	x7, x7, x14
    13f8:	add	w5, w5, w14
    13fc:	lsr	x8, x7, #1
    1400:	add	x3, x4, #0x4
    1404:	mov	x7, x9
    1408:	str	w5, [sp, #64]
    140c:	lsr	x16, x8, x0
    1410:	b	111c <FSE_decompress_usingDTable+0x804>
    1414:	lsl	x7, x7, x14
    1418:	add	w14, w5, w14
    141c:	lsr	x5, x7, #1
    1420:	str	w14, [sp, #64]
    1424:	cmp	w14, #0x40
    1428:	add	x3, x4, #0x4
    142c:	lsr	x16, x5, x0
    1430:	b.ls	dcc <FSE_decompress_usingDTable+0x4b4>  // b.plast
    1434:	mov	w5, w14
    1438:	mov	x7, x9
    143c:	b	111c <FSE_decompress_usingDTable+0x804>
    1440:	mov	w14, w5
    1444:	mov	x8, x2
    1448:	stp	x19, x20, [sp, #16]
    144c:	b	dd0 <FSE_decompress_usingDTable+0x4b8>
    1450:	mov	w5, w17
    1454:	str	x12, [sp, #56]
    1458:	str	w17, [sp, #64]
    145c:	str	x8, [sp, #72]
    1460:	ldp	x19, x20, [sp, #16]
    1464:	b	111c <FSE_decompress_usingDTable+0x804>
    1468:	mov	w5, w4
    146c:	str	x13, [sp, #56]
    1470:	str	w4, [sp, #64]
    1474:	str	x12, [sp, #72]
    1478:	ldp	x19, x20, [sp, #16]
    147c:	ldr	x21, [sp, #32]
    1480:	b	f78 <FSE_decompress_usingDTable+0x660>
    1484:	mov	w16, w5
    1488:	mov	x12, x2
    148c:	stp	x19, x20, [sp, #16]
    1490:	str	x21, [sp, #32]
    1494:	b	a9c <FSE_decompress_usingDTable+0x184>

0000000000001498 <FSE_decompress_wksp>:
    1498:	sub	sp, sp, #0x260
    149c:	stp	x29, x30, [sp]
    14a0:	mov	x29, sp
    14a4:	stp	x21, x22, [sp, #32]
    14a8:	mov	w22, w5
    14ac:	mov	w5, #0xff                  	// #255
    14b0:	mov	x21, x3
    14b4:	stp	x19, x20, [sp, #16]
    14b8:	mov	x20, x2
    14bc:	stp	x23, x24, [sp, #48]
    14c0:	mov	x23, x0
    14c4:	mov	x24, x1
    14c8:	add	x0, sp, #0x60
    14cc:	add	x1, sp, #0x5c
    14d0:	str	x25, [sp, #64]
    14d4:	mov	x25, x4
    14d8:	mov	x4, x3
    14dc:	mov	x3, x2
    14e0:	add	x2, sp, #0x58
    14e4:	str	w5, [sp, #92]
    14e8:	bl	48 <FSE_readNCount>
    14ec:	mov	x19, x0
    14f0:	cmn	x0, #0x78
    14f4:	b.hi	1538 <FSE_decompress_wksp+0xa0>  // b.pmore
    14f8:	ldr	w3, [sp, #88]
    14fc:	cmp	w3, w22
    1500:	b.hi	1558 <FSE_decompress_wksp+0xc0>  // b.pmore
    1504:	ldr	w2, [sp, #92]
    1508:	add	x1, sp, #0x60
    150c:	mov	x0, x25
    1510:	bl	688 <FSE_buildDTable>
    1514:	cmn	x0, #0x78
    1518:	b.hi	157c <FSE_decompress_wksp+0xe4>  // b.pmore
    151c:	sub	x3, x21, x19
    1520:	add	x2, x20, x19
    1524:	mov	x4, x25
    1528:	mov	x1, x24
    152c:	mov	x0, x23
    1530:	bl	918 <FSE_decompress_usingDTable>
    1534:	mov	x19, x0
    1538:	mov	x0, x19
    153c:	ldp	x29, x30, [sp]
    1540:	ldp	x19, x20, [sp, #16]
    1544:	ldp	x21, x22, [sp, #32]
    1548:	ldp	x23, x24, [sp, #48]
    154c:	ldr	x25, [sp, #64]
    1550:	add	sp, sp, #0x260
    1554:	ret
    1558:	mov	x19, #0xffffffffffffffd4    	// #-44
    155c:	mov	x0, x19
    1560:	ldp	x29, x30, [sp]
    1564:	ldp	x19, x20, [sp, #16]
    1568:	ldp	x21, x22, [sp, #32]
    156c:	ldp	x23, x24, [sp, #48]
    1570:	ldr	x25, [sp, #64]
    1574:	add	sp, sp, #0x260
    1578:	ret
    157c:	mov	x19, x0
    1580:	mov	x0, x19
    1584:	ldp	x29, x30, [sp]
    1588:	ldp	x19, x20, [sp, #16]
    158c:	ldp	x21, x22, [sp, #32]
    1590:	ldp	x23, x24, [sp, #48]
    1594:	ldr	x25, [sp, #64]
    1598:	add	sp, sp, #0x260
    159c:	ret

00000000000015a0 <FSE_decompress>:
    15a0:	mov	x12, #0x4250                	// #16976
    15a4:	sub	sp, sp, x12
    15a8:	mov	w5, #0xff                  	// #255
    15ac:	mov	x4, x3
    15b0:	stp	x29, x30, [sp]
    15b4:	mov	x29, sp
    15b8:	stp	x19, x20, [sp, #16]
    15bc:	mov	x20, x2
    15c0:	stp	x21, x22, [sp, #32]
    15c4:	mov	x21, x3
    15c8:	mov	x22, x1
    15cc:	mov	x3, x2
    15d0:	add	x1, sp, #0x44
    15d4:	add	x2, sp, #0x40
    15d8:	str	x23, [sp, #48]
    15dc:	mov	x23, x0
    15e0:	add	x0, sp, #0x48
    15e4:	str	w5, [sp, #68]
    15e8:	bl	48 <FSE_readNCount>
    15ec:	mov	x19, x0
    15f0:	cmn	x0, #0x78
    15f4:	b.hi	1638 <FSE_decompress+0x98>  // b.pmore
    15f8:	ldr	w3, [sp, #64]
    15fc:	cmp	w3, #0xc
    1600:	b.hi	1658 <FSE_decompress+0xb8>  // b.pmore
    1604:	ldr	w2, [sp, #68]
    1608:	add	x1, sp, #0x48
    160c:	add	x0, sp, #0x248
    1610:	bl	688 <FSE_buildDTable>
    1614:	cmn	x0, #0x78
    1618:	b.hi	167c <FSE_decompress+0xdc>  // b.pmore
    161c:	sub	x3, x21, x19
    1620:	add	x2, x20, x19
    1624:	add	x4, sp, #0x248
    1628:	mov	x1, x22
    162c:	mov	x0, x23
    1630:	bl	918 <FSE_decompress_usingDTable>
    1634:	mov	x19, x0
    1638:	mov	x0, x19
    163c:	mov	x12, #0x4250                	// #16976
    1640:	ldp	x29, x30, [sp]
    1644:	ldp	x19, x20, [sp, #16]
    1648:	ldp	x21, x22, [sp, #32]
    164c:	ldr	x23, [sp, #48]
    1650:	add	sp, sp, x12
    1654:	ret
    1658:	mov	x19, #0xffffffffffffffd4    	// #-44
    165c:	mov	x12, #0x4250                	// #16976
    1660:	mov	x0, x19
    1664:	ldp	x29, x30, [sp]
    1668:	ldp	x19, x20, [sp, #16]
    166c:	ldp	x21, x22, [sp, #32]
    1670:	ldr	x23, [sp, #48]
    1674:	add	sp, sp, x12
    1678:	ret
    167c:	mov	x19, x0
    1680:	mov	x12, #0x4250                	// #16976
    1684:	mov	x0, x19
    1688:	ldp	x29, x30, [sp]
    168c:	ldp	x19, x20, [sp, #16]
    1690:	ldp	x21, x22, [sp, #32]
    1694:	ldr	x23, [sp, #48]
    1698:	add	sp, sp, x12
    169c:	ret
    16a0:	stp	x29, x30, [sp, #-112]!
    16a4:	mov	x29, sp
    16a8:	stp	x19, x20, [sp, #16]
    16ac:	mov	x19, x0
    16b0:	add	x20, x4, #0x4
    16b4:	add	x0, sp, #0x48
    16b8:	stp	x21, x22, [sp, #32]
    16bc:	mov	x22, x1
    16c0:	mov	x21, x2
    16c4:	mov	x1, x4
    16c8:	mov	x2, #0x4                   	// #4
    16cc:	stp	x23, x24, [sp, #48]
    16d0:	mov	x24, x3
    16d4:	bl	0 <grub_memmove>
    16d8:	add	x23, x19, x22
    16dc:	ldrb	w6, [sp, #74]
    16e0:	cbz	x24, 196c <FSE_decompress+0x3cc>
    16e4:	add	x0, x21, x24
    16e8:	add	x9, x21, #0x8
    16ec:	stp	x21, x9, [sp, #96]
    16f0:	cmp	x24, #0x7
    16f4:	ldurb	w1, [x0, #-1]
    16f8:	b.ls	1844 <FSE_decompress+0x2a4>  // b.plast
    16fc:	sub	x2, x24, #0x8
    1700:	mov	x0, #0xffffffffffffffff    	// #-1
    1704:	add	x10, x21, x2
    1708:	str	x10, [sp, #88]
    170c:	ldr	x2, [x21, x2]
    1710:	str	x2, [sp, #72]
    1714:	cbz	w1, 18f8 <FSE_decompress+0x358>
    1718:	clz	w7, w1
    171c:	cmn	x24, #0x78
    1720:	sub	w7, w7, #0x17
    1724:	str	w7, [sp, #80]
    1728:	b.hi	1994 <FSE_decompress+0x3f4>  // b.pmore
    172c:	neg	w1, w6
    1730:	mov	x4, x10
    1734:	and	w1, w1, #0x3f
    1738:	mov	w3, w7
    173c:	sub	x11, x23, #0x3
    1740:	mov	w8, #0x0                   	// #0
    1744:	mov	w2, #0x0                   	// #0
    1748:	ldr	x5, [sp, #72]
    174c:	b	1818 <FSE_decompress+0x278>
    1750:	cmp	x21, x4
    1754:	b.eq	1914 <FSE_decompress+0x374>  // b.none
    1758:	sub	x5, x4, x21
    175c:	cmp	x21, x0
    1760:	lsr	w12, w3, #3
    1764:	mov	w2, #0x0                   	// #0
    1768:	sub	x4, x4, w5, uxtw
    176c:	b.hi	190c <FSE_decompress+0x36c>  // b.pmore
    1770:	cmp	x19, x11
    1774:	mov	x4, x0
    1778:	cset	w2, cc  // cc = lo, ul, last
    177c:	ldr	x5, [x4]
    1780:	sub	w3, w3, w12, lsl #3
    1784:	mov	w8, w2
    1788:	cbz	w2, 18ac <FSE_decompress+0x30c>
    178c:	lsl	x0, x5, x3
    1790:	add	x19, x19, #0x4
    1794:	lsr	x0, x0, x1
    1798:	lsl	x0, x0, #1
    179c:	add	x12, x20, x0
    17a0:	ldrb	w0, [x20, x0]
    17a4:	ldrb	w12, [x12, #1]
    17a8:	sturb	w0, [x19, #-4]
    17ac:	add	w12, w12, w3
    17b0:	lsl	x0, x5, x12
    17b4:	lsr	x0, x0, x1
    17b8:	lsl	x0, x0, #1
    17bc:	add	x3, x20, x0
    17c0:	ldrb	w0, [x20, x0]
    17c4:	ldrb	w3, [x3, #1]
    17c8:	sturb	w0, [x19, #-3]
    17cc:	add	w12, w3, w12
    17d0:	lsl	x0, x5, x12
    17d4:	lsr	x0, x0, x1
    17d8:	lsl	x0, x0, #1
    17dc:	add	x3, x20, x0
    17e0:	ldrb	w0, [x20, x0]
    17e4:	ldrb	w3, [x3, #1]
    17e8:	sturb	w0, [x19, #-2]
    17ec:	add	w3, w3, w12
    17f0:	lsl	x0, x5, x3
    17f4:	lsr	x0, x0, x1
    17f8:	lsl	x0, x0, #1
    17fc:	add	x13, x20, x0
    1800:	ldrb	w12, [x20, x0]
    1804:	ldrb	w0, [x13, #1]
    1808:	sturb	w12, [x19, #-1]
    180c:	add	w3, w0, w3
    1810:	cmp	w3, #0x40
    1814:	b.hi	18ac <FSE_decompress+0x30c>  // b.pmore
    1818:	lsr	w0, w3, #3
    181c:	cmp	x9, x4
    1820:	sub	x0, x4, x0
    1824:	b.hi	1750 <FSE_decompress+0x1b0>  // b.pmore
    1828:	lsr	w0, w3, #3
    182c:	cmp	x19, x11
    1830:	sub	x4, x4, x0
    1834:	and	w3, w3, #0x7
    1838:	cset	w2, cc  // cc = lo, ul, last
    183c:	ldr	x5, [x4]
    1840:	b	1784 <FSE_decompress+0x1e4>
    1844:	ldrb	w0, [x21]
    1848:	cmp	x24, #0x5
    184c:	str	x0, [sp, #72]
    1850:	str	x21, [sp, #88]
    1854:	b.eq	1944 <FSE_decompress+0x3a4>  // b.none
    1858:	b.hi	192c <FSE_decompress+0x38c>  // b.pmore
    185c:	cmp	x24, #0x3
    1860:	b.eq	1874 <FSE_decompress+0x2d4>  // b.none
    1864:	cmp	x24, #0x4
    1868:	b.ne	1950 <FSE_decompress+0x3b0>  // b.any
    186c:	ldrb	w2, [x21, #3]
    1870:	add	x0, x0, x2, lsl #24
    1874:	ldrb	w2, [x21, #2]
    1878:	add	x0, x0, x2, lsl #16
    187c:	ldrb	w2, [x21, #1]
    1880:	add	x0, x0, x2, lsl #8
    1884:	str	x0, [sp, #72]
    1888:	cbz	w1, 18f4 <FSE_decompress+0x354>
    188c:	mov	w7, #0x9                   	// #9
    1890:	sub	w7, w7, w24
    1894:	clz	w1, w1
    1898:	mov	x10, x21
    189c:	add	w1, w1, w7, lsl #3
    18a0:	sub	w7, w1, #0x1f
    18a4:	str	w7, [sp, #80]
    18a8:	b	172c <FSE_decompress+0x18c>
    18ac:	str	x5, [sp, #72]
    18b0:	cmp	x23, x19
    18b4:	b.ls	18ec <FSE_decompress+0x34c>  // b.plast
    18b8:	neg	w6, w6
    18bc:	ldr	x5, [sp, #72]
    18c0:	and	w6, w6, #0x3f
    18c4:	lsl	x0, x5, x3
    18c8:	lsr	x0, x0, x6
    18cc:	lsl	x0, x0, #1
    18d0:	add	x2, x20, x0
    18d4:	ldrb	w1, [x20, x0]
    18d8:	ldrb	w0, [x2, #1]
    18dc:	strb	w1, [x19], #1
    18e0:	add	w3, w0, w3
    18e4:	cmp	x23, x19
    18e8:	b.ne	18c4 <FSE_decompress+0x324>  // b.any
    18ec:	cmp	x21, x4
    18f0:	b.eq	195c <FSE_decompress+0x3bc>  // b.none
    18f4:	mov	x0, #0xffffffffffffffec    	// #-20
    18f8:	ldp	x19, x20, [sp, #16]
    18fc:	ldp	x21, x22, [sp, #32]
    1900:	ldp	x23, x24, [sp, #48]
    1904:	ldp	x29, x30, [sp], #112
    1908:	ret
    190c:	mov	w12, w5
    1910:	b	177c <FSE_decompress+0x1dc>
    1914:	cbz	w8, 191c <FSE_decompress+0x37c>
    1918:	str	x5, [sp, #72]
    191c:	cmp	w2, #0x0
    1920:	csel	w3, w7, w3, eq  // eq = none
    1924:	csel	x4, x10, x4, eq  // eq = none
    1928:	b	18b0 <FSE_decompress+0x310>
    192c:	cmp	x24, #0x6
    1930:	b.eq	193c <FSE_decompress+0x39c>  // b.none
    1934:	ldrb	w2, [x21, #6]
    1938:	add	x0, x0, x2, lsl #48
    193c:	ldrb	w2, [x21, #5]
    1940:	add	x0, x0, x2, lsl #40
    1944:	ldrb	w2, [x21, #4]
    1948:	add	x0, x0, x2, lsl #32
    194c:	b	186c <FSE_decompress+0x2cc>
    1950:	cmp	x24, #0x2
    1954:	b.eq	187c <FSE_decompress+0x2dc>  // b.none
    1958:	b	1888 <FSE_decompress+0x2e8>
    195c:	mov	x0, x22
    1960:	cmp	w3, #0x40
    1964:	b.ne	18f4 <FSE_decompress+0x354>  // b.any
    1968:	b	18f8 <FSE_decompress+0x358>
    196c:	add	x0, sp, #0x48
    1970:	mov	x2, #0x28                  	// #40
    1974:	mov	w1, #0x0                   	// #0
    1978:	bl	0 <grub_memset>
    197c:	mov	x0, #0xffffffffffffffb8    	// #-72
    1980:	ldp	x19, x20, [sp, #16]
    1984:	ldp	x21, x22, [sp, #32]
    1988:	ldp	x23, x24, [sp, #48]
    198c:	ldp	x29, x30, [sp], #112
    1990:	ret
    1994:	mov	x0, x24
    1998:	b	18f8 <FSE_decompress+0x358>
    199c:	nop
    19a0:	stp	x29, x30, [sp, #-144]!
    19a4:	mov	x29, sp
    19a8:	cbz	x3, 1e64 <FSE_decompress+0x8c4>
    19ac:	stp	x19, x20, [sp, #16]
    19b0:	mov	x19, x0
    19b4:	add	x0, x2, x3
    19b8:	stp	x21, x22, [sp, #32]
    19bc:	mov	x22, x1
    19c0:	add	x1, x2, #0x8
    19c4:	stp	x2, x1, [sp, #128]
    19c8:	cmp	x3, #0x7
    19cc:	ldurb	w5, [x0, #-1]
    19d0:	b.hi	1bdc <FSE_decompress+0x63c>  // b.pmore
    19d4:	ldrb	w0, [x2]
    19d8:	cmp	x3, #0x5
    19dc:	str	x0, [sp, #104]
    19e0:	str	x2, [sp, #120]
    19e4:	b.eq	1dc0 <FSE_decompress+0x820>  // b.none
    19e8:	b.hi	1da8 <FSE_decompress+0x808>  // b.pmore
    19ec:	cmp	x3, #0x3
    19f0:	b.eq	1a04 <FSE_decompress+0x464>  // b.none
    19f4:	cmp	x3, #0x4
    19f8:	b.ne	1dcc <FSE_decompress+0x82c>  // b.any
    19fc:	ldrb	w1, [x2, #3]
    1a00:	add	x0, x0, x1, lsl #24
    1a04:	ldrb	w1, [x2, #2]
    1a08:	add	x0, x0, x1, lsl #16
    1a0c:	ldrb	w1, [x2, #1]
    1a10:	add	x0, x0, x1, lsl #8
    1a14:	str	x0, [sp, #104]
    1a18:	cbz	w5, 1c9c <FSE_decompress+0x6fc>
    1a1c:	mov	w0, #0x9                   	// #9
    1a20:	sub	w3, w0, w3
    1a24:	clz	w5, w5
    1a28:	stp	x23, x24, [sp, #48]
    1a2c:	add	w5, w5, w3, lsl #3
    1a30:	sub	w5, w5, #0x1f
    1a34:	stp	x25, x26, [sp, #64]
    1a38:	str	w5, [sp, #112]
    1a3c:	add	x20, x4, #0x4
    1a40:	mov	x1, x4
    1a44:	add	x0, sp, #0x60
    1a48:	mov	x2, #0x4                   	// #4
    1a4c:	bl	0 <grub_memmove>
    1a50:	add	x24, x19, x22
    1a54:	ldr	w3, [sp, #112]
    1a58:	ldrb	w23, [sp, #98]
    1a5c:	cmp	w3, #0x40
    1a60:	b.hi	1c24 <FSE_decompress+0x684>  // b.pmore
    1a64:	neg	w21, w23
    1a68:	sub	x25, x24, #0x7
    1a6c:	and	w21, w21, #0x3f
    1a70:	str	x27, [sp, #80]
    1a74:	b	1b98 <FSE_decompress+0x5f8>
    1a78:	ldr	x2, [sp, #128]
    1a7c:	cmp	x0, x2
    1a80:	b.eq	1cbc <FSE_decompress+0x71c>  // b.none
    1a84:	sub	x7, x0, x2
    1a88:	cmp	x2, x1
    1a8c:	mov	w5, #0x0                   	// #0
    1a90:	b.hi	1cb0 <FSE_decompress+0x710>  // b.pmore
    1a94:	cmp	x19, x25
    1a98:	cset	w5, cc  // cc = lo, ul, last
    1a9c:	ldr	x26, [x1]
    1aa0:	sub	w3, w3, w6, lsl #3
    1aa4:	str	x26, [sp, #104]
    1aa8:	str	w3, [sp, #112]
    1aac:	str	x1, [sp, #120]
    1ab0:	mov	x0, x19
    1ab4:	mov	x2, #0x2                   	// #2
    1ab8:	cbz	w5, 1d94 <FSE_decompress+0x7f4>
    1abc:	lsl	x26, x26, x3
    1ac0:	lsr	x26, x26, x21
    1ac4:	add	x26, x20, x26, lsl #2
    1ac8:	mov	x1, x26
    1acc:	bl	0 <grub_memmove>
    1ad0:	ldr	w4, [sp, #112]
    1ad4:	mov	x2, #0x2                   	// #2
    1ad8:	ldrb	w3, [x26, #2]
    1adc:	ldr	x1, [sp, #104]
    1ae0:	ldrb	w0, [x26, #3]
    1ae4:	add	w26, w3, w4
    1ae8:	str	w26, [sp, #112]
    1aec:	lsl	x26, x1, x26
    1af0:	add	x19, x19, x0
    1af4:	lsr	x26, x26, x21
    1af8:	mov	x0, x19
    1afc:	add	x26, x20, x26, lsl #2
    1b00:	mov	x1, x26
    1b04:	bl	0 <grub_memmove>
    1b08:	ldr	w3, [sp, #112]
    1b0c:	mov	x2, #0x2                   	// #2
    1b10:	ldrb	w1, [x26, #2]
    1b14:	ldr	x27, [sp, #104]
    1b18:	add	w1, w1, w3
    1b1c:	ldrb	w0, [x26, #3]
    1b20:	str	w1, [sp, #112]
    1b24:	lsl	x27, x27, x1
    1b28:	add	x19, x19, x0
    1b2c:	lsr	x27, x27, x21
    1b30:	mov	x0, x19
    1b34:	add	x27, x20, x27, lsl #2
    1b38:	mov	x1, x27
    1b3c:	bl	0 <grub_memmove>
    1b40:	ldr	w3, [sp, #112]
    1b44:	mov	x2, #0x2                   	// #2
    1b48:	ldrb	w1, [x27, #2]
    1b4c:	ldr	x26, [sp, #104]
    1b50:	add	w1, w1, w3
    1b54:	ldrb	w0, [x27, #3]
    1b58:	str	w1, [sp, #112]
    1b5c:	lsl	x26, x26, x1
    1b60:	add	x19, x19, x0
    1b64:	lsr	x26, x26, x21
    1b68:	mov	x0, x19
    1b6c:	add	x26, x20, x26, lsl #2
    1b70:	mov	x1, x26
    1b74:	bl	0 <grub_memmove>
    1b78:	ldr	w1, [sp, #112]
    1b7c:	ldrb	w3, [x26, #2]
    1b80:	ldrb	w0, [x26, #3]
    1b84:	add	w3, w3, w1
    1b88:	str	w3, [sp, #112]
    1b8c:	add	x19, x19, x0
    1b90:	cmp	w3, #0x40
    1b94:	b.hi	1c20 <FSE_decompress+0x680>  // b.pmore
    1b98:	ldr	x0, [sp, #120]
    1b9c:	lsr	w1, w3, #3
    1ba0:	ldr	x4, [sp, #136]
    1ba4:	lsr	w6, w3, #3
    1ba8:	sub	x1, x0, x1
    1bac:	cmp	x0, x4
    1bb0:	b.cc	1a78 <FSE_decompress+0x4d8>  // b.lo, b.ul, b.last
    1bb4:	lsr	w1, w3, #3
    1bb8:	cmp	x19, x25
    1bbc:	sub	x0, x0, x1
    1bc0:	and	w3, w3, #0x7
    1bc4:	cset	w5, cc  // cc = lo, ul, last
    1bc8:	ldr	x26, [x0]
    1bcc:	str	x26, [sp, #104]
    1bd0:	str	w3, [sp, #112]
    1bd4:	str	x0, [sp, #120]
    1bd8:	b	1ab0 <FSE_decompress+0x510>
    1bdc:	sub	x1, x3, #0x8
    1be0:	mov	x0, #0xffffffffffffffff    	// #-1
    1be4:	add	x6, x2, x1
    1be8:	str	x6, [sp, #120]
    1bec:	ldr	x1, [x2, x1]
    1bf0:	str	x1, [sp, #104]
    1bf4:	cbz	w5, 1c10 <FSE_decompress+0x670>
    1bf8:	clz	w5, w5
    1bfc:	mov	x0, x3
    1c00:	sub	w5, w5, #0x17
    1c04:	str	w5, [sp, #112]
    1c08:	cmn	x3, #0x78
    1c0c:	b.ls	1dd8 <FSE_decompress+0x838>  // b.plast
    1c10:	ldp	x19, x20, [sp, #16]
    1c14:	ldp	x21, x22, [sp, #32]
    1c18:	ldp	x29, x30, [sp], #144
    1c1c:	ret
    1c20:	ldr	x27, [sp, #80]
    1c24:	sub	x25, x24, #0x2
    1c28:	cmp	x25, x19
    1c2c:	b.cc	1c80 <FSE_decompress+0x6e0>  // b.lo, b.ul, b.last
    1c30:	neg	w26, w23
    1c34:	ldr	w1, [sp, #112]
    1c38:	and	w26, w26, #0x3f
    1c3c:	nop
    1c40:	ldr	x21, [sp, #104]
    1c44:	mov	x0, x19
    1c48:	mov	x2, #0x2                   	// #2
    1c4c:	lsl	x21, x21, x1
    1c50:	lsr	x21, x21, x26
    1c54:	add	x21, x20, x21, lsl #2
    1c58:	mov	x1, x21
    1c5c:	bl	0 <grub_memmove>
    1c60:	ldr	w2, [sp, #112]
    1c64:	ldrb	w1, [x21, #2]
    1c68:	ldrb	w0, [x21, #3]
    1c6c:	add	w1, w1, w2
    1c70:	str	w1, [sp, #112]
    1c74:	add	x19, x19, x0
    1c78:	cmp	x19, x25
    1c7c:	b.ls	1c40 <FSE_decompress+0x6a0>  // b.plast
    1c80:	cmp	x24, x19
    1c84:	b.hi	1de4 <FSE_decompress+0x844>  // b.pmore
    1c88:	ldp	x1, x0, [sp, #120]
    1c8c:	cmp	x1, x0
    1c90:	b.eq	1e40 <FSE_decompress+0x8a0>  // b.none
    1c94:	ldp	x23, x24, [sp, #48]
    1c98:	ldp	x25, x26, [sp, #64]
    1c9c:	mov	x0, #0xffffffffffffffec    	// #-20
    1ca0:	ldp	x19, x20, [sp, #16]
    1ca4:	ldp	x21, x22, [sp, #32]
    1ca8:	ldp	x29, x30, [sp], #144
    1cac:	ret
    1cb0:	sub	x1, x0, w7, uxtw
    1cb4:	mov	w6, w7
    1cb8:	b	1a9c <FSE_decompress+0x4fc>
    1cbc:	sub	x25, x24, #0x2
    1cc0:	neg	w26, w23
    1cc4:	and	w26, w26, #0x3f
    1cc8:	b	1d50 <FSE_decompress+0x7b0>
    1ccc:	ldr	x1, [sp, #128]
    1cd0:	lsr	w21, w3, #3
    1cd4:	cmp	x0, x1
    1cd8:	b.eq	1d80 <FSE_decompress+0x7e0>  // b.none
    1cdc:	sub	x5, x0, x1
    1ce0:	cmp	x1, x2
    1ce4:	mov	w4, #0x0                   	// #0
    1ce8:	b.hi	1d88 <FSE_decompress+0x7e8>  // b.pmore
    1cec:	cmp	x25, x19
    1cf0:	cset	w4, cs  // cs = hs, nlast
    1cf4:	sub	w3, w3, w21, lsl #3
    1cf8:	ldr	x21, [x2]
    1cfc:	str	x21, [sp, #104]
    1d00:	str	w3, [sp, #112]
    1d04:	str	x2, [sp, #120]
    1d08:	mov	x0, x19
    1d0c:	mov	x2, #0x2                   	// #2
    1d10:	cbz	w4, 1d80 <FSE_decompress+0x7e0>
    1d14:	lsl	x21, x21, x3
    1d18:	lsr	x21, x21, x26
    1d1c:	add	x21, x20, x21, lsl #2
    1d20:	mov	x1, x21
    1d24:	bl	0 <grub_memmove>
    1d28:	ldr	w1, [sp, #112]
    1d2c:	ldrb	w3, [x21, #2]
    1d30:	ldrb	w0, [x21, #3]
    1d34:	add	w3, w3, w1
    1d38:	str	w3, [sp, #112]
    1d3c:	add	x19, x19, x0
    1d40:	cmp	w3, #0x40
    1d44:	b.hi	1d80 <FSE_decompress+0x7e0>  // b.pmore
    1d48:	ldr	x0, [sp, #120]
    1d4c:	ldr	x4, [sp, #136]
    1d50:	lsr	w2, w3, #3
    1d54:	cmp	x0, x4
    1d58:	sub	x2, x0, x2
    1d5c:	b.cc	1ccc <FSE_decompress+0x72c>  // b.lo, b.ul, b.last
    1d60:	cmp	x25, x19
    1d64:	and	w3, w3, #0x7
    1d68:	ldr	x21, [x2]
    1d6c:	cset	w4, cs  // cs = hs, nlast
    1d70:	str	x21, [sp, #104]
    1d74:	str	w3, [sp, #112]
    1d78:	str	x2, [sp, #120]
    1d7c:	b	1d08 <FSE_decompress+0x768>
    1d80:	ldr	x27, [sp, #80]
    1d84:	b	1c28 <FSE_decompress+0x688>
    1d88:	sub	x2, x0, w5, uxtw
    1d8c:	mov	w21, w5
    1d90:	b	1cf4 <FSE_decompress+0x754>
    1d94:	cmp	w3, #0x40
    1d98:	sub	x25, x24, #0x2
    1d9c:	b.hi	1d80 <FSE_decompress+0x7e0>  // b.pmore
    1da0:	ldr	x0, [sp, #120]
    1da4:	b	1cc0 <FSE_decompress+0x720>
    1da8:	cmp	x3, #0x6
    1dac:	b.eq	1db8 <FSE_decompress+0x818>  // b.none
    1db0:	ldrb	w1, [x2, #6]
    1db4:	add	x0, x0, x1, lsl #48
    1db8:	ldrb	w1, [x2, #5]
    1dbc:	add	x0, x0, x1, lsl #40
    1dc0:	ldrb	w1, [x2, #4]
    1dc4:	add	x0, x0, x1, lsl #32
    1dc8:	b	19fc <FSE_decompress+0x45c>
    1dcc:	cmp	x3, #0x2
    1dd0:	b.eq	1a0c <FSE_decompress+0x46c>  // b.none
    1dd4:	b	1a18 <FSE_decompress+0x478>
    1dd8:	stp	x23, x24, [sp, #48]
    1ddc:	stp	x25, x26, [sp, #64]
    1de0:	b	1a3c <FSE_decompress+0x49c>
    1de4:	ldr	x1, [sp, #104]
    1de8:	neg	w23, w23
    1dec:	ldr	w3, [sp, #112]
    1df0:	mov	x0, x19
    1df4:	mov	x2, #0x1                   	// #1
    1df8:	lsl	x1, x1, x3
    1dfc:	lsr	x1, x1, x23
    1e00:	add	x20, x20, x1, lsl #2
    1e04:	mov	x1, x20
    1e08:	bl	0 <grub_memmove>
    1e0c:	ldrb	w0, [x20, #3]
    1e10:	cmp	w0, #0x1
    1e14:	b.eq	1e80 <FSE_decompress+0x8e0>  // b.none
    1e18:	ldr	w0, [sp, #112]
    1e1c:	cmp	w0, #0x3f
    1e20:	b.hi	1c88 <FSE_decompress+0x6e8>  // b.pmore
    1e24:	ldrb	w1, [x20, #2]
    1e28:	add	w0, w1, w0
    1e2c:	cmp	w0, #0x40
    1e30:	b.ls	1e38 <FSE_decompress+0x898>  // b.plast
    1e34:	mov	w0, #0x40                  	// #64
    1e38:	str	w0, [sp, #112]
    1e3c:	b	1c88 <FSE_decompress+0x6e8>
    1e40:	ldr	w1, [sp, #112]
    1e44:	mov	x0, x22
    1e48:	cmp	w1, #0x40
    1e4c:	b.ne	1c94 <FSE_decompress+0x6f4>  // b.any
    1e50:	ldp	x19, x20, [sp, #16]
    1e54:	ldp	x21, x22, [sp, #32]
    1e58:	ldp	x23, x24, [sp, #48]
    1e5c:	ldp	x25, x26, [sp, #64]
    1e60:	b	1c18 <FSE_decompress+0x678>
    1e64:	add	x0, sp, #0x68
    1e68:	mov	x2, #0x28                  	// #40
    1e6c:	mov	w1, #0x0                   	// #0
    1e70:	bl	0 <grub_memset>
    1e74:	mov	x0, #0xffffffffffffffb8    	// #-72
    1e78:	ldp	x29, x30, [sp], #144
    1e7c:	ret
    1e80:	ldrb	w1, [x20, #2]
    1e84:	ldr	w0, [sp, #112]
    1e88:	add	w0, w0, w1
    1e8c:	str	w0, [sp, #112]
    1e90:	b	1c88 <FSE_decompress+0x6e8>
    1e94:	nop
    1e98:	stp	x29, x30, [sp, #-400]!
    1e9c:	mov	x29, sp
    1ea0:	stp	x19, x20, [sp, #16]
    1ea4:	mov	x19, x0
    1ea8:	ldrh	w20, [x2, #2]
    1eac:	stp	x23, x24, [sp, #48]
    1eb0:	add	x0, sp, #0x168
    1eb4:	ldrh	w23, [x2]
    1eb8:	stp	x27, x28, [sp, #80]
    1ebc:	and	x28, x20, #0xffff
    1ec0:	ldrh	w27, [x2, #4]
    1ec4:	stp	x21, x22, [sp, #32]
    1ec8:	mov	x22, x3
    1ecc:	add	x3, x28, w23, uxth
    1ed0:	sub	x5, x22, w27, uxth
    1ed4:	stp	x25, x26, [sp, #64]
    1ed8:	sub	x26, x5, x3
    1edc:	mov	x21, x2
    1ee0:	mov	x25, x4
    1ee4:	sub	x24, x26, #0x6
    1ee8:	mov	x2, #0x4                   	// #4
    1eec:	str	x1, [sp, #104]
    1ef0:	mov	x1, x4
    1ef4:	bl	0 <grub_memmove>
    1ef8:	ldrb	w14, [sp, #362]
    1efc:	cmp	x22, x24
    1f00:	b.cs	1f28 <FSE_decompress+0x988>  // b.hs, b.nlast
    1f04:	mov	x24, #0xffffffffffffffec    	// #-20
    1f08:	mov	x0, x24
    1f0c:	ldp	x19, x20, [sp, #16]
    1f10:	ldp	x21, x22, [sp, #32]
    1f14:	ldp	x23, x24, [sp, #48]
    1f18:	ldp	x25, x26, [sp, #64]
    1f1c:	ldp	x27, x28, [sp, #80]
    1f20:	ldp	x29, x30, [sp], #400
    1f24:	ret
    1f28:	and	x0, x23, #0xffff
    1f2c:	cbz	x0, 2724 <FSE_decompress+0x1184>
    1f30:	add	x7, x21, #0x6
    1f34:	add	x16, x21, #0xe
    1f38:	add	x6, x7, x0
    1f3c:	stp	x7, x16, [sp, #264]
    1f40:	and	x3, x27, #0xffff
    1f44:	cmp	x0, #0x7
    1f48:	ldurb	w1, [x6, #-1]
    1f4c:	b.ls	25c8 <FSE_decompress+0x1028>  // b.plast
    1f50:	sub	x2, x0, #0x8
    1f54:	add	x5, x7, x2
    1f58:	str	x5, [sp, #256]
    1f5c:	ldr	x2, [x7, x2]
    1f60:	str	x2, [sp, #240]
    1f64:	cbz	w1, 2668 <FSE_decompress+0x10c8>
    1f68:	clz	w1, w1
    1f6c:	sub	w1, w1, #0x17
    1f70:	str	w1, [sp, #248]
    1f74:	cbz	x28, 284c <FSE_decompress+0x12ac>
    1f78:	add	x10, x6, x28
    1f7c:	add	x1, x6, #0x8
    1f80:	str	x1, [sp, #112]
    1f84:	cmp	x28, #0x7
    1f88:	stp	x6, x1, [sp, #304]
    1f8c:	ldurb	w1, [x10, #-1]
    1f90:	b.ls	268c <FSE_decompress+0x10ec>  // b.plast
    1f94:	sub	x0, x28, #0x8
    1f98:	add	x8, x6, x0
    1f9c:	str	x8, [sp, #296]
    1fa0:	ldr	x0, [x6, x0]
    1fa4:	str	x0, [sp, #280]
    1fa8:	cbz	w1, 2668 <FSE_decompress+0x10c8>
    1fac:	clz	w0, w1
    1fb0:	sub	w0, w0, #0x17
    1fb4:	str	w0, [sp, #288]
    1fb8:	cbz	x3, 28f8 <FSE_decompress+0x1358>
    1fbc:	add	x20, x10, x3
    1fc0:	add	x1, x10, #0x8
    1fc4:	str	x1, [sp, #120]
    1fc8:	cmp	x3, #0x7
    1fcc:	stp	x10, x1, [sp, #344]
    1fd0:	ldurb	w1, [x20, #-1]
    1fd4:	b.ls	273c <FSE_decompress+0x119c>  // b.plast
    1fd8:	sub	x4, x3, #0x8
    1fdc:	add	x2, x10, x4
    1fe0:	str	x2, [sp, #336]
    1fe4:	ldr	x4, [x10, x4]
    1fe8:	str	x4, [sp, #320]
    1fec:	cbz	w1, 2668 <FSE_decompress+0x10c8>
    1ff0:	clz	w4, w1
    1ff4:	sub	w9, w4, #0x17
    1ff8:	str	w9, [sp, #328]
    1ffc:	cbz	x24, 3134 <FSE_decompress+0x1b94>
    2000:	add	x1, x20, x26
    2004:	add	x4, x20, #0x8
    2008:	str	x4, [sp, #128]
    200c:	cmp	x24, #0x7
    2010:	stp	x20, x4, [sp, #384]
    2014:	ldurb	w1, [x1, #-7]
    2018:	b.ls	2864 <FSE_decompress+0x12c4>  // b.plast
    201c:	sub	x3, x26, #0xe
    2020:	add	x4, x20, x3
    2024:	str	x4, [sp, #376]
    2028:	ldr	x3, [x20, x3]
    202c:	str	x3, [sp, #360]
    2030:	cbz	w1, 2668 <FSE_decompress+0x10c8>
    2034:	clz	w5, w1
    2038:	cmn	x24, #0x78
    203c:	sub	w5, w5, #0x17
    2040:	str	w5, [sp, #368]
    2044:	b.hi	1f08 <FSE_decompress+0x968>  // b.pmore
    2048:	ldr	w3, [sp, #248]
    204c:	mov	w1, #0x3                   	// #3
    2050:	cmp	w3, #0x40
    2054:	b.hi	20a8 <FSE_decompress+0xb08>  // b.pmore
    2058:	ldr	x4, [sp, #256]
    205c:	cmp	x16, x4
    2060:	b.ls	30cc <FSE_decompress+0x1b2c>  // b.plast
    2064:	cmp	x7, x4
    2068:	b.eq	3170 <FSE_decompress+0x1bd0>  // b.none
    206c:	lsr	w11, w3, #3
    2070:	lsr	w12, w3, #3
    2074:	sub	x11, x4, x11
    2078:	mov	w1, #0x0                   	// #0
    207c:	cmp	x7, x11
    2080:	b.ls	2094 <FSE_decompress+0xaf4>  // b.plast
    2084:	sub	x11, x4, x7
    2088:	mov	w1, #0x1                   	// #1
    208c:	mov	w12, w11
    2090:	sub	x11, x4, w11, uxtw
    2094:	ldr	x4, [x11]
    2098:	sub	w3, w3, w12, lsl #3
    209c:	str	x4, [sp, #240]
    20a0:	str	w3, [sp, #248]
    20a4:	str	x11, [sp, #256]
    20a8:	ldr	x3, [sp, #112]
    20ac:	cmp	x3, x8
    20b0:	b.ls	30ac <FSE_decompress+0x1b0c>  // b.plast
    20b4:	cmp	x6, x8
    20b8:	b.eq	3194 <FSE_decompress+0x1bf4>  // b.none
    20bc:	lsr	w3, w0, #3
    20c0:	lsr	w4, w0, #3
    20c4:	sub	x3, x8, x3
    20c8:	cmp	x6, x3
    20cc:	b.ls	20e0 <FSE_decompress+0xb40>  // b.plast
    20d0:	sub	x3, x8, x6
    20d4:	orr	w1, w1, #0x1
    20d8:	mov	w4, w3
    20dc:	sub	x3, x8, w3, uxtw
    20e0:	ldr	x8, [x3]
    20e4:	sub	w0, w0, w4, lsl #3
    20e8:	str	x8, [sp, #280]
    20ec:	str	w0, [sp, #288]
    20f0:	str	x3, [sp, #296]
    20f4:	ldr	x0, [sp, #120]
    20f8:	cmp	x0, x2
    20fc:	b.ls	3110 <FSE_decompress+0x1b70>  // b.plast
    2100:	cmp	x10, x2
    2104:	b.eq	3180 <FSE_decompress+0x1be0>  // b.none
    2108:	lsr	w0, w9, #3
    210c:	lsr	w3, w9, #3
    2110:	sub	x0, x2, x0
    2114:	str	x0, [sp, #216]
    2118:	cmp	x10, x0
    211c:	b.ls	2134 <FSE_decompress+0xb94>  // b.plast
    2120:	sub	x0, x2, x10
    2124:	orr	w1, w1, #0x1
    2128:	mov	w3, w0
    212c:	sub	x0, x2, w0, uxtw
    2130:	str	x0, [sp, #216]
    2134:	ldr	x2, [sp, #216]
    2138:	sub	w9, w9, w3, lsl #3
    213c:	ldr	x0, [x2]
    2140:	str	x0, [sp, #320]
    2144:	str	w9, [sp, #328]
    2148:	str	x2, [sp, #336]
    214c:	ldr	x4, [sp, #104]
    2150:	add	x2, x25, #0x4
    2154:	ldr	x3, [sp, #376]
    2158:	add	x0, x4, #0x3
    215c:	add	x4, x19, x4
    2160:	str	x4, [sp, #208]
    2164:	lsr	x0, x0, #2
    2168:	add	x8, x19, x0
    216c:	str	x8, [sp, #192]
    2170:	add	x4, x8, x0
    2174:	str	x4, [sp, #200]
    2178:	ldr	x8, [sp, #128]
    217c:	add	x0, x4, x0
    2180:	str	x0, [sp, #184]
    2184:	cmp	x8, x3
    2188:	b.ls	30f0 <FSE_decompress+0x1b50>  // b.plast
    218c:	cmp	x20, x3
    2190:	b.eq	31a8 <FSE_decompress+0x1c08>  // b.none
    2194:	lsr	w21, w5, #3
    2198:	lsr	w0, w5, #3
    219c:	sub	x21, x3, x21
    21a0:	cmp	x20, x21
    21a4:	b.ls	21b8 <FSE_decompress+0xc18>  // b.plast
    21a8:	sub	x21, x3, x20
    21ac:	orr	w1, w1, #0x1
    21b0:	mov	w0, w21
    21b4:	sub	x21, x3, w21, uxtw
    21b8:	ldr	x15, [x21]
    21bc:	sub	w5, w5, w0, lsl #3
    21c0:	str	x15, [sp, #360]
    21c4:	str	w5, [sp, #368]
    21c8:	str	x21, [sp, #376]
    21cc:	cbnz	w1, 31e4 <FSE_decompress+0x1c44>
    21d0:	ldr	x0, [sp, #208]
    21d4:	ldr	x8, [sp, #184]
    21d8:	sub	x0, x0, #0x3
    21dc:	str	x0, [sp, #136]
    21e0:	cmp	x8, x0
    21e4:	b.cs	31cc <FSE_decompress+0x1c2c>  // b.hs, b.nlast
    21e8:	mov	w4, w9
    21ec:	neg	w3, w14
    21f0:	ldr	x9, [sp, #360]
    21f4:	and	w3, w3, #0x3f
    21f8:	ldr	w0, [sp, #248]
    21fc:	mov	x11, x19
    2200:	ldr	w1, [sp, #288]
    2204:	mov	w25, #0x0                   	// #0
    2208:	str	x16, [sp, #144]
    220c:	str	wzr, [sp, #156]
    2210:	str	x9, [sp, #160]
    2214:	mov	w9, #0x0                   	// #0
    2218:	mov	w16, w9
    221c:	stp	wzr, wzr, [sp, #168]
    2220:	stp	wzr, wzr, [sp, #176]
    2224:	stp	wzr, w14, [sp, #224]
    2228:	str	x19, [sp, #232]
    222c:	ldp	x12, x13, [sp, #192]
    2230:	ldr	x22, [sp, #216]
    2234:	ldr	x30, [sp, #240]
    2238:	ldr	x24, [sp, #256]
    223c:	ldr	x18, [sp, #280]
    2240:	ldr	x23, [sp, #296]
    2244:	ldr	x17, [sp, #320]
    2248:	b	2384 <FSE_decompress+0xde4>
    224c:	cmp	x7, x24
    2250:	b.eq	2284 <FSE_decompress+0xce4>  // b.none
    2254:	lsr	w1, w26, #3
    2258:	lsr	w0, w26, #3
    225c:	sub	x1, x24, x1
    2260:	cmp	x7, x1
    2264:	b.ls	2844 <FSE_decompress+0x12a4>  // b.plast
    2268:	sub	x1, x24, x7
    226c:	mov	w0, w1
    2270:	sub	x24, x24, w1, uxtw
    2274:	ldr	x30, [x24]
    2278:	sub	w0, w26, w0, lsl #3
    227c:	mov	w25, #0x1                   	// #1
    2280:	str	w25, [sp, #224]
    2284:	mov	w1, w5
    2288:	cmp	w5, #0x40
    228c:	b.hi	22d4 <FSE_decompress+0xd34>  // b.pmore
    2290:	ldr	x4, [sp, #112]
    2294:	cmp	x4, x23
    2298:	b.ls	27f4 <FSE_decompress+0x1254>  // b.plast
    229c:	cmp	x6, x23
    22a0:	b.eq	22d4 <FSE_decompress+0xd34>  // b.none
    22a4:	lsr	w4, w5, #3
    22a8:	lsr	w1, w5, #3
    22ac:	sub	x4, x23, x4
    22b0:	cmp	x6, x4
    22b4:	b.ls	283c <FSE_decompress+0x129c>  // b.plast
    22b8:	sub	x4, x23, x6
    22bc:	mov	w1, w4
    22c0:	sub	x23, x23, w4, uxtw
    22c4:	ldr	x18, [x23]
    22c8:	sub	w1, w5, w1, lsl #3
    22cc:	mov	w4, #0x1                   	// #1
    22d0:	stp	w4, w4, [sp, #176]
    22d4:	mov	w4, w14
    22d8:	cmp	w14, #0x40
    22dc:	b.hi	2324 <FSE_decompress+0xd84>  // b.pmore
    22e0:	ldr	x5, [sp, #120]
    22e4:	cmp	x22, x5
    22e8:	b.cs	2810 <FSE_decompress+0x1270>  // b.hs, b.nlast
    22ec:	cmp	x10, x22
    22f0:	b.eq	2324 <FSE_decompress+0xd84>  // b.none
    22f4:	lsr	w5, w14, #3
    22f8:	lsr	w4, w14, #3
    22fc:	sub	x5, x22, x5
    2300:	cmp	x10, x5
    2304:	b.ls	282c <FSE_decompress+0x128c>  // b.plast
    2308:	sub	x5, x22, x10
    230c:	mov	w4, w5
    2310:	sub	x22, x22, w5, uxtw
    2314:	ldr	x17, [x22]
    2318:	sub	w4, w14, w4, lsl #3
    231c:	mov	w5, #0x1                   	// #1
    2320:	stp	w5, w5, [sp, #168]
    2324:	mov	w5, w9
    2328:	cmp	w9, #0x40
    232c:	b.hi	2378 <FSE_decompress+0xdd8>  // b.pmore
    2330:	ldr	x14, [sp, #128]
    2334:	cmp	x14, x21
    2338:	b.ls	27d4 <FSE_decompress+0x1234>  // b.plast
    233c:	cmp	x20, x21
    2340:	b.eq	2378 <FSE_decompress+0xdd8>  // b.none
    2344:	lsr	w14, w9, #3
    2348:	lsr	w5, w9, #3
    234c:	sub	x14, x21, x14
    2350:	cmp	x20, x14
    2354:	b.ls	2834 <FSE_decompress+0x1294>  // b.plast
    2358:	sub	x14, x21, x20
    235c:	mov	w5, w14
    2360:	sub	x21, x21, w14, uxtw
    2364:	sub	w5, w9, w5, lsl #3
    2368:	mov	w16, #0x1                   	// #1
    236c:	ldr	x15, [x21]
    2370:	str	w16, [sp, #156]
    2374:	str	x15, [sp, #160]
    2378:	ldr	x9, [sp, #136]
    237c:	cmp	x9, x8
    2380:	b.ls	2910 <FSE_decompress+0x1370>  // b.plast
    2384:	lsl	x19, x30, x0
    2388:	add	x11, x11, #0x4
    238c:	lsr	x19, x19, x3
    2390:	add	x12, x12, #0x4
    2394:	lsl	x19, x19, #1
    2398:	lsl	x9, x18, x1
    239c:	add	x14, x2, x19
    23a0:	lsr	x9, x9, x3
    23a4:	lsl	x9, x9, #1
    23a8:	lsl	x27, x17, x4
    23ac:	ldrb	w26, [x2, x19]
    23b0:	add	x19, x2, x9
    23b4:	ldrb	w14, [x14, #1]
    23b8:	lsr	x27, x27, x3
    23bc:	sturb	w26, [x11, #-4]
    23c0:	lsl	x27, x27, #1
    23c4:	add	w0, w14, w0
    23c8:	lsl	x26, x15, x5
    23cc:	ldrb	w9, [x2, x9]
    23d0:	add	x14, x2, x27
    23d4:	ldrb	w19, [x19, #1]
    23d8:	lsr	x26, x26, x3
    23dc:	sturb	w9, [x12, #-4]
    23e0:	lsl	x26, x26, #1
    23e4:	add	w1, w19, w1
    23e8:	add	x9, x2, x26
    23ec:	ldrb	w19, [x2, x27]
    23f0:	lsl	x27, x30, x0
    23f4:	ldrb	w14, [x14, #1]
    23f8:	lsr	x27, x27, x3
    23fc:	strb	w19, [x13]
    2400:	lsl	x27, x27, #1
    2404:	add	w4, w14, w4
    2408:	add	x14, x2, x27
    240c:	ldrb	w19, [x2, x26]
    2410:	lsl	x26, x18, x1
    2414:	ldrb	w9, [x9, #1]
    2418:	lsr	x26, x26, x3
    241c:	strb	w19, [x8]
    2420:	lsl	x26, x26, #1
    2424:	add	w9, w9, w5
    2428:	add	x5, x2, x26
    242c:	ldrb	w19, [x2, x27]
    2430:	lsl	x27, x17, x4
    2434:	ldrb	w14, [x14, #1]
    2438:	lsr	x27, x27, x3
    243c:	sturb	w19, [x11, #-3]
    2440:	lsl	x27, x27, #1
    2444:	add	w0, w14, w0
    2448:	add	x14, x2, x27
    244c:	ldrb	w28, [x2, x26]
    2450:	lsl	x26, x15, x9
    2454:	ldrb	w19, [x5, #1]
    2458:	lsr	x26, x26, x3
    245c:	sturb	w28, [x12, #-3]
    2460:	lsl	x26, x26, #1
    2464:	add	w1, w19, w1
    2468:	add	x5, x2, x26
    246c:	ldrb	w19, [x2, x27]
    2470:	lsl	x27, x30, x0
    2474:	ldrb	w14, [x14, #1]
    2478:	lsr	x27, x27, x3
    247c:	strb	w19, [x13, #1]
    2480:	lsl	x27, x27, #1
    2484:	add	w4, w14, w4
    2488:	add	x14, x2, x27
    248c:	ldrb	w19, [x2, x26]
    2490:	lsl	x26, x18, x1
    2494:	ldrb	w5, [x5, #1]
    2498:	lsr	x26, x26, x3
    249c:	strb	w19, [x8, #1]
    24a0:	lsl	x26, x26, #1
    24a4:	add	w9, w5, w9
    24a8:	add	x5, x2, x26
    24ac:	ldrb	w19, [x2, x27]
    24b0:	lsl	x28, x17, x4
    24b4:	ldrb	w14, [x14, #1]
    24b8:	lsl	x27, x15, x9
    24bc:	sturb	w19, [x11, #-2]
    24c0:	lsr	x28, x28, x3
    24c4:	add	w0, w14, w0
    24c8:	lsl	x28, x28, #1
    24cc:	ldrb	w14, [x2, x26]
    24d0:	lsr	x27, x27, x3
    24d4:	ldrb	w19, [x5, #1]
    24d8:	lsl	x27, x27, #1
    24dc:	sturb	w14, [x12, #-2]
    24e0:	add	x14, x2, x28
    24e4:	add	w19, w19, w1
    24e8:	lsl	x26, x30, x0
    24ec:	add	x1, x2, x27
    24f0:	ldrb	w28, [x2, x28]
    24f4:	lsr	x5, x26, x3
    24f8:	ldrb	w14, [x14, #1]
    24fc:	lsl	x5, x5, #1
    2500:	strb	w28, [x13, #2]
    2504:	ldrb	w28, [x2, x27]
    2508:	add	x26, x2, x5
    250c:	ldrb	w27, [x1, #1]
    2510:	lsl	x1, x18, x19
    2514:	strb	w28, [x8, #2]
    2518:	lsr	x1, x1, x3
    251c:	add	w14, w14, w4
    2520:	lsl	x1, x1, #1
    2524:	ldrb	w4, [x2, x5]
    2528:	add	x5, x2, x1
    252c:	ldrb	w26, [x26, #1]
    2530:	add	w9, w27, w9
    2534:	sturb	w4, [x11, #-1]
    2538:	lsl	x4, x17, x14
    253c:	lsr	x4, x4, x3
    2540:	add	x13, x13, #0x4
    2544:	ldrb	w1, [x2, x1]
    2548:	lsl	x4, x4, #1
    254c:	ldrb	w5, [x5, #1]
    2550:	add	x28, x2, x4
    2554:	sturb	w1, [x12, #-1]
    2558:	lsl	x1, x15, x9
    255c:	lsr	x1, x1, x3
    2560:	add	x8, x8, #0x4
    2564:	ldrb	w27, [x2, x4]
    2568:	lsl	x1, x1, #1
    256c:	ldrb	w4, [x28, #1]
    2570:	add	w26, w26, w0
    2574:	sturb	w27, [x13, #-1]
    2578:	add	x27, x2, x1
    257c:	add	w14, w4, w14
    2580:	add	w5, w5, w19
    2584:	ldrb	w1, [x2, x1]
    2588:	mov	w0, w26
    258c:	ldrb	w4, [x27, #1]
    2590:	cmp	w26, #0x40
    2594:	sturb	w1, [x8, #-1]
    2598:	add	w9, w4, w9
    259c:	b.hi	2284 <FSE_decompress+0xce4>  // b.pmore
    25a0:	ldr	x1, [sp, #144]
    25a4:	cmp	x1, x24
    25a8:	b.hi	224c <FSE_decompress+0xcac>  // b.pmore
    25ac:	lsr	w1, w26, #3
    25b0:	mov	w25, #0x1                   	// #1
    25b4:	sub	x24, x24, x1
    25b8:	and	w0, w26, #0x7
    25bc:	str	w25, [sp, #224]
    25c0:	ldr	x30, [x24]
    25c4:	b	2284 <FSE_decompress+0xce4>
    25c8:	ldrb	w2, [x21, #6]
    25cc:	cmp	w23, #0x5
    25d0:	str	x2, [sp, #240]
    25d4:	str	x7, [sp, #256]
    25d8:	b.eq	2644 <FSE_decompress+0x10a4>  // b.none
    25dc:	b.hi	262c <FSE_decompress+0x108c>  // b.pmore
    25e0:	cmp	w23, #0x3
    25e4:	b.eq	25f8 <FSE_decompress+0x1058>  // b.none
    25e8:	cmp	w23, #0x4
    25ec:	b.ne	2650 <FSE_decompress+0x10b0>  // b.any
    25f0:	ldrb	w5, [x21, #9]
    25f4:	add	x2, x2, x5, lsl #24
    25f8:	ldrb	w5, [x21, #8]
    25fc:	add	x2, x2, x5, lsl #16
    2600:	ldrb	w5, [x21, #7]
    2604:	add	x2, x2, x5, lsl #8
    2608:	str	x2, [sp, #240]
    260c:	cbz	w1, 1f04 <FSE_decompress+0x964>
    2610:	mov	w2, #0x9                   	// #9
    2614:	sub	w23, w2, w23
    2618:	clz	w1, w1
    261c:	add	w1, w1, w23, lsl #3
    2620:	sub	w1, w1, #0x1f
    2624:	str	w1, [sp, #248]
    2628:	b	1f74 <FSE_decompress+0x9d4>
    262c:	cmp	w23, #0x6
    2630:	b.eq	263c <FSE_decompress+0x109c>  // b.none
    2634:	ldrb	w5, [x21, #12]
    2638:	add	x2, x2, x5, lsl #48
    263c:	ldrb	w5, [x21, #11]
    2640:	add	x2, x2, x5, lsl #40
    2644:	ldrb	w5, [x21, #10]
    2648:	add	x2, x2, x5, lsl #32
    264c:	b	25f0 <FSE_decompress+0x1050>
    2650:	cmp	w23, #0x2
    2654:	b.ne	260c <FSE_decompress+0x106c>  // b.any
    2658:	ldrb	w5, [x21, #7]
    265c:	add	x2, x2, x5, lsl #8
    2660:	str	x2, [sp, #240]
    2664:	b	260c <FSE_decompress+0x106c>
    2668:	mov	x24, #0xffffffffffffffff    	// #-1
    266c:	mov	x0, x24
    2670:	ldp	x19, x20, [sp, #16]
    2674:	ldp	x21, x22, [sp, #32]
    2678:	ldp	x23, x24, [sp, #48]
    267c:	ldp	x25, x26, [sp, #64]
    2680:	ldp	x27, x28, [sp, #80]
    2684:	ldp	x29, x30, [sp], #400
    2688:	ret
    268c:	ldrb	w0, [x7, x0]
    2690:	cmp	w20, #0x5
    2694:	str	x0, [sp, #280]
    2698:	str	x6, [sp, #296]
    269c:	b.eq	270c <FSE_decompress+0x116c>  // b.none
    26a0:	b.hi	26f4 <FSE_decompress+0x1154>  // b.pmore
    26a4:	cmp	w20, #0x3
    26a8:	b.eq	26bc <FSE_decompress+0x111c>  // b.none
    26ac:	cmp	w20, #0x4
    26b0:	b.ne	2718 <FSE_decompress+0x1178>  // b.any
    26b4:	ldrb	w2, [x6, #3]
    26b8:	add	x0, x0, x2, lsl #24
    26bc:	ldrb	w2, [x6, #2]
    26c0:	add	x0, x0, x2, lsl #16
    26c4:	ldrb	w2, [x6, #1]
    26c8:	add	x0, x0, x2, lsl #8
    26cc:	str	x0, [sp, #280]
    26d0:	cbz	w1, 1f04 <FSE_decompress+0x964>
    26d4:	mov	w0, #0x9                   	// #9
    26d8:	sub	w0, w0, w20
    26dc:	clz	w1, w1
    26e0:	mov	x8, x6
    26e4:	add	w1, w1, w0, lsl #3
    26e8:	sub	w0, w1, #0x1f
    26ec:	str	w0, [sp, #288]
    26f0:	b	1fb8 <FSE_decompress+0xa18>
    26f4:	cmp	w20, #0x6
    26f8:	b.eq	2704 <FSE_decompress+0x1164>  // b.none
    26fc:	ldrb	w2, [x6, #6]
    2700:	add	x0, x0, x2, lsl #48
    2704:	ldrb	w2, [x6, #5]
    2708:	add	x0, x0, x2, lsl #40
    270c:	ldrb	w2, [x6, #4]
    2710:	add	x0, x0, x2, lsl #32
    2714:	b	26b4 <FSE_decompress+0x1114>
    2718:	cmp	w20, #0x2
    271c:	b.eq	26c4 <FSE_decompress+0x1124>  // b.none
    2720:	b	26d0 <FSE_decompress+0x1130>
    2724:	add	x0, sp, #0xf0
    2728:	mov	x2, #0x28                  	// #40
    272c:	mov	w1, #0x0                   	// #0
    2730:	mov	x24, #0xffffffffffffffb8    	// #-72
    2734:	bl	0 <grub_memset>
    2738:	b	1f08 <FSE_decompress+0x968>
    273c:	ldrb	w2, [x6, x28]
    2740:	cmp	w27, #0x5
    2744:	str	x2, [sp, #320]
    2748:	str	x10, [sp, #336]
    274c:	b.eq	27bc <FSE_decompress+0x121c>  // b.none
    2750:	b.hi	27a4 <FSE_decompress+0x1204>  // b.pmore
    2754:	cmp	w27, #0x3
    2758:	b.eq	276c <FSE_decompress+0x11cc>  // b.none
    275c:	cmp	w27, #0x4
    2760:	b.ne	27c8 <FSE_decompress+0x1228>  // b.any
    2764:	ldrb	w4, [x10, #3]
    2768:	add	x2, x2, x4, lsl #24
    276c:	ldrb	w4, [x10, #2]
    2770:	add	x2, x2, x4, lsl #16
    2774:	ldrb	w4, [x10, #1]
    2778:	add	x2, x2, x4, lsl #8
    277c:	str	x2, [sp, #320]
    2780:	cbz	w1, 1f04 <FSE_decompress+0x964>
    2784:	mov	w9, #0x9                   	// #9
    2788:	sub	w9, w9, w27
    278c:	clz	w1, w1
    2790:	mov	x2, x10
    2794:	add	w1, w1, w9, lsl #3
    2798:	sub	w9, w1, #0x1f
    279c:	str	w9, [sp, #328]
    27a0:	b	1ffc <FSE_decompress+0xa5c>
    27a4:	cmp	w27, #0x6
    27a8:	b.eq	27b4 <FSE_decompress+0x1214>  // b.none
    27ac:	ldrb	w4, [x10, #6]
    27b0:	add	x2, x2, x4, lsl #48
    27b4:	ldrb	w4, [x10, #5]
    27b8:	add	x2, x2, x4, lsl #40
    27bc:	ldrb	w4, [x10, #4]
    27c0:	add	x2, x2, x4, lsl #32
    27c4:	b	2764 <FSE_decompress+0x11c4>
    27c8:	cmp	w27, #0x2
    27cc:	b.eq	2774 <FSE_decompress+0x11d4>  // b.none
    27d0:	b	2780 <FSE_decompress+0x11e0>
    27d4:	lsr	w9, w9, #3
    27d8:	mov	w16, #0x1                   	// #1
    27dc:	sub	x21, x21, x9
    27e0:	and	w5, w5, #0x7
    27e4:	str	w16, [sp, #156]
    27e8:	ldr	x15, [x21]
    27ec:	str	x15, [sp, #160]
    27f0:	b	2378 <FSE_decompress+0xdd8>
    27f4:	lsr	w4, w5, #3
    27f8:	and	w1, w1, #0x7
    27fc:	sub	x23, x23, x4
    2800:	mov	w5, #0x1                   	// #1
    2804:	stp	w5, w5, [sp, #176]
    2808:	ldr	x18, [x23]
    280c:	b	22d4 <FSE_decompress+0xd34>
    2810:	lsr	w5, w14, #3
    2814:	and	w4, w4, #0x7
    2818:	sub	x22, x22, x5
    281c:	mov	w14, #0x1                   	// #1
    2820:	stp	w14, w14, [sp, #168]
    2824:	ldr	x17, [x22]
    2828:	b	2324 <FSE_decompress+0xd84>
    282c:	mov	x22, x5
    2830:	b	2314 <FSE_decompress+0xd74>
    2834:	mov	x21, x14
    2838:	b	2364 <FSE_decompress+0xdc4>
    283c:	mov	x23, x4
    2840:	b	22c4 <FSE_decompress+0xd24>
    2844:	mov	x24, x1
    2848:	b	2274 <FSE_decompress+0xcd4>
    284c:	add	x0, sp, #0x118
    2850:	mov	x2, #0x28                  	// #40
    2854:	mov	w1, #0x0                   	// #0
    2858:	mov	x24, #0xffffffffffffffb8    	// #-72
    285c:	bl	0 <grub_memset>
    2860:	b	1f08 <FSE_decompress+0x968>
    2864:	ldrb	w3, [x10, x3]
    2868:	cmp	x24, #0x5
    286c:	str	x3, [sp, #360]
    2870:	str	x20, [sp, #376]
    2874:	b.eq	28e0 <FSE_decompress+0x1340>  // b.none
    2878:	b.hi	28c8 <FSE_decompress+0x1328>  // b.pmore
    287c:	cmp	x24, #0x3
    2880:	b.eq	2894 <FSE_decompress+0x12f4>  // b.none
    2884:	cmp	x24, #0x4
    2888:	b.ne	28ec <FSE_decompress+0x134c>  // b.any
    288c:	ldrb	w4, [x20, #3]
    2890:	add	x3, x3, x4, lsl #24
    2894:	ldrb	w4, [x20, #2]
    2898:	add	x3, x3, x4, lsl #16
    289c:	ldrb	w4, [x20, #1]
    28a0:	add	x3, x3, x4, lsl #8
    28a4:	str	x3, [sp, #360]
    28a8:	cbz	w1, 1f04 <FSE_decompress+0x964>
    28ac:	mov	w5, #0x9                   	// #9
    28b0:	sub	w5, w5, w24
    28b4:	clz	w1, w1
    28b8:	add	w5, w1, w5, lsl #3
    28bc:	sub	w5, w5, #0x1f
    28c0:	str	w5, [sp, #368]
    28c4:	b	2048 <FSE_decompress+0xaa8>
    28c8:	cmp	x24, #0x6
    28cc:	b.eq	28d8 <FSE_decompress+0x1338>  // b.none
    28d0:	ldrb	w4, [x20, #6]
    28d4:	add	x3, x3, x4, lsl #48
    28d8:	ldrb	w4, [x20, #5]
    28dc:	add	x3, x3, x4, lsl #40
    28e0:	ldrb	w4, [x20, #4]
    28e4:	add	x3, x3, x4, lsl #32
    28e8:	b	288c <FSE_decompress+0x12ec>
    28ec:	cmp	x24, #0x2
    28f0:	b.eq	289c <FSE_decompress+0x12fc>  // b.none
    28f4:	b	28a8 <FSE_decompress+0x1308>
    28f8:	add	x0, sp, #0x140
    28fc:	mov	x2, #0x28                  	// #40
    2900:	mov	w1, #0x0                   	// #0
    2904:	mov	x24, #0xffffffffffffffb8    	// #-72
    2908:	bl	0 <grub_memset>
    290c:	b	1f08 <FSE_decompress+0x968>
    2910:	mov	w3, w16
    2914:	ldr	w14, [sp, #228]
    2918:	mov	x9, x24
    291c:	mov	w8, w25
    2920:	ldr	x16, [sp, #144]
    2924:	ldr	x19, [sp, #232]
    2928:	cbz	w3, 2934 <FSE_decompress+0x1394>
    292c:	ldr	x3, [sp, #160]
    2930:	str	x3, [sp, #360]
    2934:	ldr	w3, [sp, #172]
    2938:	cbz	w3, 2940 <FSE_decompress+0x13a0>
    293c:	str	x17, [sp, #320]
    2940:	ldr	w3, [sp, #180]
    2944:	cbz	w3, 294c <FSE_decompress+0x13ac>
    2948:	str	x18, [sp, #280]
    294c:	cbz	w8, 2954 <FSE_decompress+0x13b4>
    2950:	str	x30, [sp, #240]
    2954:	ldr	x3, [sp, #208]
    2958:	str	w0, [sp, #248]
    295c:	ldr	x8, [sp, #184]
    2960:	sub	x3, x3, #0x4
    2964:	str	w1, [sp, #288]
    2968:	sub	x0, x3, x8
    296c:	str	w4, [sp, #328]
    2970:	ldr	x1, [sp, #192]
    2974:	and	x0, x0, #0xfffffffffffffffc
    2978:	add	x0, x0, #0x4
    297c:	str	w5, [sp, #368]
    2980:	add	x3, x1, x0
    2984:	add	x19, x19, x0
    2988:	ldr	x1, [sp, #200]
    298c:	add	x1, x1, x0
    2990:	add	x0, x8, x0
    2994:	ldr	w8, [sp, #156]
    2998:	cbz	w8, 29a0 <FSE_decompress+0x1400>
    299c:	str	x21, [sp, #376]
    29a0:	ldr	w8, [sp, #168]
    29a4:	cbz	w8, 29b0 <FSE_decompress+0x1410>
    29a8:	str	x22, [sp, #216]
    29ac:	str	x22, [sp, #336]
    29b0:	ldr	w8, [sp, #176]
    29b4:	cbz	w8, 29bc <FSE_decompress+0x141c>
    29b8:	str	x23, [sp, #296]
    29bc:	ldr	w8, [sp, #224]
    29c0:	cbz	w8, 29c8 <FSE_decompress+0x1428>
    29c4:	str	x9, [sp, #256]
    29c8:	mov	w9, w4
    29cc:	ldr	x4, [sp, #200]
    29d0:	ldr	x8, [sp, #184]
    29d4:	cmp	x4, x3
    29d8:	ldr	x4, [sp, #192]
    29dc:	ccmp	x4, x19, #0x0, cs  // cs = hs, nlast
    29e0:	cset	w4, cc  // cc = lo, ul, last
    29e4:	cmp	x8, x1
    29e8:	cset	w8, cc  // cc = lo, ul, last
    29ec:	orr	w4, w4, w8
    29f0:	cbnz	w4, 1f04 <FSE_decompress+0x964>
    29f4:	ldr	w21, [sp, #248]
    29f8:	ldr	x24, [sp, #256]
    29fc:	cmp	w21, #0x40
    2a00:	b.hi	314c <FSE_decompress+0x1bac>  // b.pmore
    2a04:	ldr	x11, [sp, #192]
    2a08:	neg	w13, w14
    2a0c:	and	w13, w13, #0x3f
    2a10:	mov	x4, x24
    2a14:	sub	x18, x11, #0x3
    2a18:	mov	w8, w21
    2a1c:	mov	w17, #0x0                   	// #0
    2a20:	mov	w15, #0x0                   	// #0
    2a24:	ldr	x11, [sp, #240]
    2a28:	b	2af4 <FSE_decompress+0x1554>
    2a2c:	cmp	x7, x4
    2a30:	b.eq	304c <FSE_decompress+0x1aac>  // b.none
    2a34:	sub	x17, x4, x7
    2a38:	cmp	x7, x12
    2a3c:	lsr	w11, w8, #3
    2a40:	mov	w15, #0x0                   	// #0
    2a44:	sub	x4, x4, w17, uxtw
    2a48:	b.hi	3044 <FSE_decompress+0x1aa4>  // b.pmore
    2a4c:	cmp	x19, x18
    2a50:	mov	x4, x12
    2a54:	cset	w15, cc  // cc = lo, ul, last
    2a58:	sub	w8, w8, w11, lsl #3
    2a5c:	ldr	x11, [x4]
    2a60:	mov	w17, w15
    2a64:	cbz	w15, 31f0 <FSE_decompress+0x1c50>
    2a68:	lsl	x12, x11, x8
    2a6c:	add	x19, x19, #0x4
    2a70:	lsr	x12, x12, x13
    2a74:	lsl	x12, x12, #1
    2a78:	add	x22, x2, x12
    2a7c:	ldrb	w12, [x2, x12]
    2a80:	ldrb	w22, [x22, #1]
    2a84:	sturb	w12, [x19, #-4]
    2a88:	add	w8, w22, w8
    2a8c:	lsl	x12, x11, x8
    2a90:	lsr	x12, x12, x13
    2a94:	lsl	x12, x12, #1
    2a98:	add	x22, x2, x12
    2a9c:	ldrb	w12, [x2, x12]
    2aa0:	ldrb	w22, [x22, #1]
    2aa4:	sturb	w12, [x19, #-3]
    2aa8:	add	w22, w22, w8
    2aac:	lsl	x8, x11, x22
    2ab0:	lsr	x8, x8, x13
    2ab4:	lsl	x8, x8, #1
    2ab8:	add	x23, x2, x8
    2abc:	ldrb	w12, [x2, x8]
    2ac0:	ldrb	w8, [x23, #1]
    2ac4:	sturb	w12, [x19, #-2]
    2ac8:	add	w22, w8, w22
    2acc:	lsl	x12, x11, x22
    2ad0:	lsr	x12, x12, x13
    2ad4:	lsl	x12, x12, #1
    2ad8:	add	x8, x2, x12
    2adc:	ldrb	w12, [x2, x12]
    2ae0:	ldrb	w8, [x8, #1]
    2ae4:	sturb	w12, [x19, #-1]
    2ae8:	add	w8, w8, w22
    2aec:	cmp	w8, #0x40
    2af0:	b.hi	2b1c <FSE_decompress+0x157c>  // b.pmore
    2af4:	lsr	w12, w8, #3
    2af8:	cmp	x16, x4
    2afc:	sub	x12, x4, x12
    2b00:	b.hi	2a2c <FSE_decompress+0x148c>  // b.pmore
    2b04:	cmp	x19, x18
    2b08:	mov	x4, x12
    2b0c:	and	w8, w8, #0x7
    2b10:	cset	w15, cc  // cc = lo, ul, last
    2b14:	ldr	x11, [x12]
    2b18:	b	2a60 <FSE_decompress+0x14c0>
    2b1c:	str	x11, [sp, #240]
    2b20:	str	w8, [sp, #248]
    2b24:	str	x4, [sp, #256]
    2b28:	ldr	x11, [sp, #192]
    2b2c:	cmp	x11, x19
    2b30:	b.ls	2b70 <FSE_decompress+0x15d0>  // b.plast
    2b34:	neg	w12, w14
    2b38:	mov	x17, x11
    2b3c:	ldr	x15, [sp, #240]
    2b40:	and	w12, w12, #0x3f
    2b44:	lsl	x11, x15, x8
    2b48:	lsr	x11, x11, x12
    2b4c:	lsl	x11, x11, #1
    2b50:	add	x16, x2, x11
    2b54:	ldrb	w13, [x2, x11]
    2b58:	ldrb	w11, [x16, #1]
    2b5c:	strb	w13, [x19], #1
    2b60:	add	w8, w11, w8
    2b64:	cmp	x17, x19
    2b68:	b.ne	2b44 <FSE_decompress+0x15a4>  // b.any
    2b6c:	str	w8, [sp, #248]
    2b70:	ldr	w21, [sp, #288]
    2b74:	ldr	x24, [sp, #296]
    2b78:	cmp	w21, #0x40
    2b7c:	b.hi	3164 <FSE_decompress+0x1bc4>  // b.pmore
    2b80:	ldr	x13, [sp, #200]
    2b84:	neg	w16, w14
    2b88:	and	w16, w16, #0x3f
    2b8c:	mov	x12, x24
    2b90:	sub	x19, x13, #0x3
    2b94:	mov	w11, w21
    2b98:	mov	w18, #0x0                   	// #0
    2b9c:	mov	w17, #0x0                   	// #0
    2ba0:	ldr	x22, [sp, #112]
    2ba4:	ldr	x13, [sp, #280]
    2ba8:	b	2c74 <FSE_decompress+0x16d4>
    2bac:	cmp	x6, x12
    2bb0:	b.eq	307c <FSE_decompress+0x1adc>  // b.none
    2bb4:	sub	x18, x12, x6
    2bb8:	cmp	x6, x15
    2bbc:	lsr	w13, w11, #3
    2bc0:	mov	w17, #0x0                   	// #0
    2bc4:	sub	x12, x12, w18, uxtw
    2bc8:	b.hi	303c <FSE_decompress+0x1a9c>  // b.pmore
    2bcc:	cmp	x3, x19
    2bd0:	mov	x12, x15
    2bd4:	cset	w17, cc  // cc = lo, ul, last
    2bd8:	sub	w11, w11, w13, lsl #3
    2bdc:	ldr	x13, [x12]
    2be0:	mov	w18, w17
    2be4:	cbz	w17, 3200 <FSE_decompress+0x1c60>
    2be8:	lsl	x15, x13, x11
    2bec:	add	x3, x3, #0x4
    2bf0:	lsr	x15, x15, x16
    2bf4:	lsl	x15, x15, #1
    2bf8:	add	x23, x2, x15
    2bfc:	ldrb	w15, [x2, x15]
    2c00:	ldrb	w23, [x23, #1]
    2c04:	sturb	w15, [x3, #-4]
    2c08:	add	w11, w23, w11
    2c0c:	lsl	x15, x13, x11
    2c10:	lsr	x15, x15, x16
    2c14:	lsl	x15, x15, #1
    2c18:	add	x23, x2, x15
    2c1c:	ldrb	w15, [x2, x15]
    2c20:	ldrb	w23, [x23, #1]
    2c24:	sturb	w15, [x3, #-3]
    2c28:	add	w23, w23, w11
    2c2c:	lsl	x11, x13, x23
    2c30:	lsr	x11, x11, x16
    2c34:	lsl	x11, x11, #1
    2c38:	add	x25, x2, x11
    2c3c:	ldrb	w15, [x2, x11]
    2c40:	ldrb	w11, [x25, #1]
    2c44:	sturb	w15, [x3, #-2]
    2c48:	add	w23, w11, w23
    2c4c:	lsl	x15, x13, x23
    2c50:	lsr	x15, x15, x16
    2c54:	lsl	x15, x15, #1
    2c58:	add	x11, x2, x15
    2c5c:	ldrb	w15, [x2, x15]
    2c60:	ldrb	w11, [x11, #1]
    2c64:	sturb	w15, [x3, #-1]
    2c68:	add	w11, w11, w23
    2c6c:	cmp	w11, #0x40
    2c70:	b.hi	2c9c <FSE_decompress+0x16fc>  // b.pmore
    2c74:	lsr	w15, w11, #3
    2c78:	cmp	x12, x22
    2c7c:	sub	x15, x12, x15
    2c80:	b.cc	2bac <FSE_decompress+0x160c>  // b.lo, b.ul, b.last
    2c84:	cmp	x3, x19
    2c88:	mov	x12, x15
    2c8c:	and	w11, w11, #0x7
    2c90:	cset	w17, cc  // cc = lo, ul, last
    2c94:	ldr	x13, [x15]
    2c98:	b	2be0 <FSE_decompress+0x1640>
    2c9c:	str	x13, [sp, #280]
    2ca0:	str	w11, [sp, #288]
    2ca4:	str	x12, [sp, #296]
    2ca8:	ldr	x13, [sp, #200]
    2cac:	cmp	x13, x3
    2cb0:	b.ls	2cf0 <FSE_decompress+0x1750>  // b.plast
    2cb4:	neg	w15, w14
    2cb8:	mov	x19, x13
    2cbc:	ldr	x16, [sp, #280]
    2cc0:	and	w15, w15, #0x3f
    2cc4:	lsl	x13, x16, x11
    2cc8:	lsr	x13, x13, x15
    2ccc:	lsl	x13, x13, #1
    2cd0:	add	x18, x2, x13
    2cd4:	ldrb	w17, [x2, x13]
    2cd8:	ldrb	w13, [x18, #1]
    2cdc:	strb	w17, [x3], #1
    2ce0:	add	w11, w13, w11
    2ce4:	cmp	x19, x3
    2ce8:	b.ne	2cc4 <FSE_decompress+0x1724>  // b.any
    2cec:	str	w11, [sp, #288]
    2cf0:	cmp	w9, #0x40
    2cf4:	b.hi	3158 <FSE_decompress+0x1bb8>  // b.pmore
    2cf8:	ldr	x13, [sp, #184]
    2cfc:	neg	w17, w14
    2d00:	and	w17, w17, #0x3f
    2d04:	mov	w3, w9
    2d08:	sub	x21, x13, #0x3
    2d0c:	mov	w19, #0x0                   	// #0
    2d10:	mov	w18, #0x0                   	// #0
    2d14:	ldr	x22, [sp, #120]
    2d18:	ldr	x15, [sp, #216]
    2d1c:	ldr	x16, [sp, #320]
    2d20:	b	2dec <FSE_decompress+0x184c>
    2d24:	cmp	x10, x15
    2d28:	b.eq	3064 <FSE_decompress+0x1ac4>  // b.none
    2d2c:	sub	x19, x15, x10
    2d30:	cmp	x10, x13
    2d34:	lsr	w16, w3, #3
    2d38:	mov	w18, #0x0                   	// #0
    2d3c:	sub	x15, x15, w19, uxtw
    2d40:	b.hi	3034 <FSE_decompress+0x1a94>  // b.pmore
    2d44:	cmp	x1, x21
    2d48:	mov	x15, x13
    2d4c:	cset	w18, cc  // cc = lo, ul, last
    2d50:	sub	w3, w3, w16, lsl #3
    2d54:	ldr	x16, [x15]
    2d58:	mov	w19, w18
    2d5c:	cbz	w18, 3210 <FSE_decompress+0x1c70>
    2d60:	lsl	x13, x16, x3
    2d64:	add	x1, x1, #0x4
    2d68:	lsr	x13, x13, x17
    2d6c:	lsl	x13, x13, #1
    2d70:	add	x23, x2, x13
    2d74:	ldrb	w13, [x2, x13]
    2d78:	ldrb	w23, [x23, #1]
    2d7c:	sturb	w13, [x1, #-4]
    2d80:	add	w3, w23, w3
    2d84:	lsl	x13, x16, x3
    2d88:	lsr	x13, x13, x17
    2d8c:	lsl	x13, x13, #1
    2d90:	add	x23, x2, x13
    2d94:	ldrb	w13, [x2, x13]
    2d98:	ldrb	w23, [x23, #1]
    2d9c:	sturb	w13, [x1, #-3]
    2da0:	add	w23, w23, w3
    2da4:	lsl	x3, x16, x23
    2da8:	lsr	x3, x3, x17
    2dac:	lsl	x3, x3, #1
    2db0:	add	x24, x2, x3
    2db4:	ldrb	w13, [x2, x3]
    2db8:	ldrb	w3, [x24, #1]
    2dbc:	sturb	w13, [x1, #-2]
    2dc0:	add	w23, w3, w23
    2dc4:	lsl	x13, x16, x23
    2dc8:	lsr	x13, x13, x17
    2dcc:	lsl	x13, x13, #1
    2dd0:	add	x3, x2, x13
    2dd4:	ldrb	w13, [x2, x13]
    2dd8:	ldrb	w3, [x3, #1]
    2ddc:	sturb	w13, [x1, #-1]
    2de0:	add	w3, w3, w23
    2de4:	cmp	w3, #0x40
    2de8:	b.hi	2e18 <FSE_decompress+0x1878>  // b.pmore
    2dec:	lsr	w13, w3, #3
    2df0:	cmp	x22, x15
    2df4:	sub	x13, x15, x13
    2df8:	b.hi	2d24 <FSE_decompress+0x1784>  // b.pmore
    2dfc:	lsr	w13, w3, #3
    2e00:	cmp	x1, x21
    2e04:	sub	x15, x15, x13
    2e08:	and	w3, w3, #0x7
    2e0c:	cset	w18, cc  // cc = lo, ul, last
    2e10:	ldr	x16, [x15]
    2e14:	b	2d58 <FSE_decompress+0x17b8>
    2e18:	str	x16, [sp, #320]
    2e1c:	str	w3, [sp, #328]
    2e20:	str	x15, [sp, #336]
    2e24:	ldr	x9, [sp, #184]
    2e28:	cmp	x9, x1
    2e2c:	b.ls	2e6c <FSE_decompress+0x18cc>  // b.plast
    2e30:	neg	w13, w14
    2e34:	mov	x19, x9
    2e38:	ldr	x18, [sp, #320]
    2e3c:	and	w13, w13, #0x3f
    2e40:	lsl	x9, x18, x3
    2e44:	lsr	x9, x9, x13
    2e48:	lsl	x9, x9, #1
    2e4c:	add	x17, x2, x9
    2e50:	ldrb	w16, [x2, x9]
    2e54:	ldrb	w9, [x17, #1]
    2e58:	strb	w16, [x1], #1
    2e5c:	add	w3, w9, w3
    2e60:	cmp	x19, x1
    2e64:	b.ne	2e40 <FSE_decompress+0x18a0>  // b.any
    2e68:	str	w3, [sp, #328]
    2e6c:	cmp	w5, #0x40
    2e70:	ldr	x21, [sp, #376]
    2e74:	b.hi	31c0 <FSE_decompress+0x1c20>  // b.pmore
    2e78:	ldr	x9, [sp, #208]
    2e7c:	neg	w17, w14
    2e80:	and	w17, w17, #0x3f
    2e84:	mov	x13, x21
    2e88:	mov	w1, w5
    2e8c:	sub	x22, x9, #0x3
    2e90:	mov	w19, #0x0                   	// #0
    2e94:	mov	w18, #0x0                   	// #0
    2e98:	ldr	x23, [sp, #128]
    2e9c:	ldr	x16, [sp, #360]
    2ea0:	b	2f6c <FSE_decompress+0x19cc>
    2ea4:	cmp	x20, x13
    2ea8:	b.eq	3094 <FSE_decompress+0x1af4>  // b.none
    2eac:	sub	x19, x13, x20
    2eb0:	cmp	x20, x9
    2eb4:	lsr	w16, w1, #3
    2eb8:	mov	w18, #0x0                   	// #0
    2ebc:	sub	x13, x13, w19, uxtw
    2ec0:	b.hi	302c <FSE_decompress+0x1a8c>  // b.pmore
    2ec4:	cmp	x0, x22
    2ec8:	mov	x13, x9
    2ecc:	cset	w18, cc  // cc = lo, ul, last
    2ed0:	sub	w1, w1, w16, lsl #3
    2ed4:	ldr	x16, [x13]
    2ed8:	mov	w19, w18
    2edc:	cbz	w18, 2f98 <FSE_decompress+0x19f8>
    2ee0:	lsl	x9, x16, x1
    2ee4:	add	x0, x0, #0x4
    2ee8:	lsr	x9, x9, x17
    2eec:	lsl	x9, x9, #1
    2ef0:	add	x24, x2, x9
    2ef4:	ldrb	w9, [x2, x9]
    2ef8:	ldrb	w24, [x24, #1]
    2efc:	sturb	w9, [x0, #-4]
    2f00:	add	w1, w24, w1
    2f04:	lsl	x9, x16, x1
    2f08:	lsr	x9, x9, x17
    2f0c:	lsl	x9, x9, #1
    2f10:	add	x24, x2, x9
    2f14:	ldrb	w9, [x2, x9]
    2f18:	ldrb	w24, [x24, #1]
    2f1c:	sturb	w9, [x0, #-3]
    2f20:	add	w24, w24, w1
    2f24:	lsl	x1, x16, x24
    2f28:	lsr	x1, x1, x17
    2f2c:	lsl	x1, x1, #1
    2f30:	add	x25, x2, x1
    2f34:	ldrb	w9, [x2, x1]
    2f38:	ldrb	w1, [x25, #1]
    2f3c:	sturb	w9, [x0, #-2]
    2f40:	add	w24, w1, w24
    2f44:	lsl	x9, x16, x24
    2f48:	lsr	x9, x9, x17
    2f4c:	lsl	x9, x9, #1
    2f50:	add	x1, x2, x9
    2f54:	ldrb	w9, [x2, x9]
    2f58:	ldrb	w1, [x1, #1]
    2f5c:	sturb	w9, [x0, #-1]
    2f60:	add	w1, w1, w24
    2f64:	cmp	w1, #0x40
    2f68:	b.hi	2f98 <FSE_decompress+0x19f8>  // b.pmore
    2f6c:	lsr	w9, w1, #3
    2f70:	cmp	x13, x23
    2f74:	sub	x9, x13, x9
    2f78:	b.cc	2ea4 <FSE_decompress+0x1904>  // b.lo, b.ul, b.last
    2f7c:	lsr	w9, w1, #3
    2f80:	cmp	x0, x22
    2f84:	sub	x13, x13, x9
    2f88:	and	w1, w1, #0x7
    2f8c:	cset	w18, cc  // cc = lo, ul, last
    2f90:	ldr	x16, [x13]
    2f94:	b	2ed8 <FSE_decompress+0x1938>
    2f98:	str	x16, [sp, #360]
    2f9c:	ldr	x5, [sp, #208]
    2fa0:	cmp	x5, x0
    2fa4:	b.ls	2fe0 <FSE_decompress+0x1a40>  // b.plast
    2fa8:	neg	w9, w14
    2fac:	mov	x18, x5
    2fb0:	ldr	x17, [sp, #360]
    2fb4:	and	w9, w9, #0x3f
    2fb8:	lsl	x5, x17, x1
    2fbc:	lsr	x5, x5, x9
    2fc0:	lsl	x5, x5, #1
    2fc4:	add	x16, x2, x5
    2fc8:	ldrb	w14, [x2, x5]
    2fcc:	ldrb	w5, [x16, #1]
    2fd0:	strb	w14, [x0], #1
    2fd4:	add	w1, w5, w1
    2fd8:	cmp	x18, x0
    2fdc:	b.ne	2fb8 <FSE_decompress+0x1a18>  // b.any
    2fe0:	cmp	x7, x4
    2fe4:	mov	w0, #0x0                   	// #0
    2fe8:	b.eq	31b4 <FSE_decompress+0x1c14>  // b.none
    2fec:	cmp	w11, #0x40
    2ff0:	csel	w0, w0, wzr, eq  // eq = none
    2ff4:	cmp	x6, x12
    2ff8:	b.eq	3000 <FSE_decompress+0x1a60>  // b.none
    2ffc:	mov	w0, #0x0                   	// #0
    3000:	cmp	x10, x15
    3004:	b.ne	1f04 <FSE_decompress+0x964>  // b.any
    3008:	cmp	w3, #0x40
    300c:	b.ne	1f04 <FSE_decompress+0x964>  // b.any
    3010:	cmp	x20, x13
    3014:	b.ne	1f04 <FSE_decompress+0x964>  // b.any
    3018:	cmp	w1, #0x40
    301c:	b.ne	1f04 <FSE_decompress+0x964>  // b.any
    3020:	cbz	w0, 1f04 <FSE_decompress+0x964>
    3024:	ldr	x24, [sp, #104]
    3028:	b	1f08 <FSE_decompress+0x968>
    302c:	mov	w16, w19
    3030:	b	2ed0 <FSE_decompress+0x1930>
    3034:	mov	w16, w19
    3038:	b	2d50 <FSE_decompress+0x17b0>
    303c:	mov	w13, w18
    3040:	b	2bd8 <FSE_decompress+0x1638>
    3044:	mov	w11, w17
    3048:	b	2a58 <FSE_decompress+0x14b8>
    304c:	cbz	w17, 3054 <FSE_decompress+0x1ab4>
    3050:	str	x11, [sp, #240]
    3054:	cbz	w15, 314c <FSE_decompress+0x1bac>
    3058:	str	w8, [sp, #248]
    305c:	str	x4, [sp, #256]
    3060:	b	2b28 <FSE_decompress+0x1588>
    3064:	cbz	w19, 306c <FSE_decompress+0x1acc>
    3068:	str	x16, [sp, #320]
    306c:	cbz	w18, 3158 <FSE_decompress+0x1bb8>
    3070:	str	w3, [sp, #328]
    3074:	str	x15, [sp, #336]
    3078:	b	2e24 <FSE_decompress+0x1884>
    307c:	cbz	w18, 3084 <FSE_decompress+0x1ae4>
    3080:	str	x13, [sp, #280]
    3084:	cbz	w17, 3164 <FSE_decompress+0x1bc4>
    3088:	str	w11, [sp, #288]
    308c:	str	x12, [sp, #296]
    3090:	b	2ca8 <FSE_decompress+0x1708>
    3094:	cbz	w19, 309c <FSE_decompress+0x1afc>
    3098:	str	x16, [sp, #360]
    309c:	cmp	w18, #0x0
    30a0:	csel	w1, w5, w1, eq  // eq = none
    30a4:	csel	x13, x21, x13, eq  // eq = none
    30a8:	b	2f9c <FSE_decompress+0x19fc>
    30ac:	lsr	w3, w0, #3
    30b0:	and	w0, w0, #0x7
    30b4:	sub	x8, x8, x3
    30b8:	str	w0, [sp, #288]
    30bc:	str	x8, [sp, #296]
    30c0:	ldr	x0, [x8]
    30c4:	str	x0, [sp, #280]
    30c8:	b	20f4 <FSE_decompress+0xb54>
    30cc:	lsr	w1, w3, #3
    30d0:	and	w3, w3, #0x7
    30d4:	sub	x4, x4, x1
    30d8:	str	w3, [sp, #248]
    30dc:	mov	w1, #0x0                   	// #0
    30e0:	str	x4, [sp, #256]
    30e4:	ldr	x3, [x4]
    30e8:	str	x3, [sp, #240]
    30ec:	b	20a8 <FSE_decompress+0xb08>
    30f0:	lsr	w21, w5, #3
    30f4:	and	w5, w5, #0x7
    30f8:	sub	x21, x3, x21
    30fc:	ldr	x15, [x21]
    3100:	str	x15, [sp, #360]
    3104:	str	w5, [sp, #368]
    3108:	str	x21, [sp, #376]
    310c:	b	21cc <FSE_decompress+0xc2c>
    3110:	lsr	w0, w9, #3
    3114:	and	w9, w9, #0x7
    3118:	sub	x0, x2, x0
    311c:	str	x0, [sp, #216]
    3120:	str	x0, [sp, #336]
    3124:	str	w9, [sp, #328]
    3128:	ldr	x0, [x0]
    312c:	str	x0, [sp, #320]
    3130:	b	214c <FSE_decompress+0xbac>
    3134:	add	x0, sp, #0x168
    3138:	mov	x2, #0x28                  	// #40
    313c:	mov	w1, #0x0                   	// #0
    3140:	mov	x24, #0xffffffffffffffb8    	// #-72
    3144:	bl	0 <grub_memset>
    3148:	b	1f08 <FSE_decompress+0x968>
    314c:	mov	w8, w21
    3150:	mov	x4, x24
    3154:	b	2b28 <FSE_decompress+0x1588>
    3158:	mov	w3, w9
    315c:	ldr	x15, [sp, #216]
    3160:	b	2e24 <FSE_decompress+0x1884>
    3164:	mov	w11, w21
    3168:	mov	x12, x24
    316c:	b	2ca8 <FSE_decompress+0x1708>
    3170:	cmp	w3, #0x40
    3174:	cset	w1, eq  // eq = none
    3178:	add	w1, w1, #0x1
    317c:	b	20a8 <FSE_decompress+0xb08>
    3180:	cmp	w9, #0x40
    3184:	b.eq	31d8 <FSE_decompress+0x1c38>  // b.none
    3188:	orr	w1, w1, #0x1
    318c:	str	x10, [sp, #216]
    3190:	b	214c <FSE_decompress+0xbac>
    3194:	cmp	w0, #0x40
    3198:	orr	w0, w1, #0x1
    319c:	orr	w1, w1, #0x2
    31a0:	csel	w1, w1, w0, eq  // eq = none
    31a4:	b	20f4 <FSE_decompress+0xb54>
    31a8:	mov	x1, x4
    31ac:	ldr	x3, [sp, #192]
    31b0:	b	29cc <FSE_decompress+0x142c>
    31b4:	cmp	w8, #0x40
    31b8:	cset	w0, eq  // eq = none
    31bc:	b	2fec <FSE_decompress+0x1a4c>
    31c0:	mov	w1, w5
    31c4:	mov	x13, x21
    31c8:	b	2f9c <FSE_decompress+0x19fc>
    31cc:	mov	x0, x8
    31d0:	ldp	x3, x1, [sp, #192]
    31d4:	b	29cc <FSE_decompress+0x142c>
    31d8:	orr	w1, w1, #0x2
    31dc:	str	x10, [sp, #216]
    31e0:	b	214c <FSE_decompress+0xbac>
    31e4:	ldp	x0, x3, [sp, #184]
    31e8:	ldr	x1, [sp, #200]
    31ec:	b	29cc <FSE_decompress+0x142c>
    31f0:	str	x11, [sp, #240]
    31f4:	str	w8, [sp, #248]
    31f8:	str	x4, [sp, #256]
    31fc:	b	2b28 <FSE_decompress+0x1588>
    3200:	str	x13, [sp, #280]
    3204:	str	w11, [sp, #288]
    3208:	str	x12, [sp, #296]
    320c:	b	2ca8 <FSE_decompress+0x1708>
    3210:	str	x16, [sp, #320]
    3214:	str	w3, [sp, #328]
    3218:	str	x15, [sp, #336]
    321c:	b	2e24 <FSE_decompress+0x1884>
    3220:	stp	x29, x30, [sp, #-304]!
    3224:	mov	x29, sp
    3228:	stp	x21, x22, [sp, #32]
    322c:	mov	x21, x2
    3230:	ldrh	w22, [x2, #2]
    3234:	stp	x25, x26, [sp, #64]
    3238:	mov	x26, x4
    323c:	ldrh	w25, [x2]
    3240:	stp	x19, x20, [sp, #16]
    3244:	and	x19, x22, #0xffff
    3248:	mov	x20, x0
    324c:	stp	x27, x28, [sp, #80]
    3250:	add	x0, sp, #0x108
    3254:	ldrh	w28, [x2, #4]
    3258:	stp	x23, x24, [sp, #48]
    325c:	mov	x23, x3
    3260:	add	x3, x19, w25, uxth
    3264:	sub	x27, x23, w28, uxth
    3268:	mov	x2, #0x4                   	// #4
    326c:	sub	x27, x27, x3
    3270:	str	x1, [sp, #112]
    3274:	mov	x1, x4
    3278:	bl	0 <grub_memmove>
    327c:	ldrb	w1, [sp, #266]
    3280:	sub	x24, x27, #0x6
    3284:	str	w1, [sp, #108]
    3288:	cmp	x23, x24
    328c:	b.cs	32b4 <FSE_decompress+0x1d14>  // b.hs, b.nlast
    3290:	mov	x24, #0xffffffffffffffec    	// #-20
    3294:	mov	x0, x24
    3298:	ldp	x19, x20, [sp, #16]
    329c:	ldp	x21, x22, [sp, #32]
    32a0:	ldp	x23, x24, [sp, #48]
    32a4:	ldp	x25, x26, [sp, #64]
    32a8:	ldp	x27, x28, [sp, #80]
    32ac:	ldp	x29, x30, [sp], #304
    32b0:	ret
    32b4:	and	x0, x25, #0xffff
    32b8:	cbz	x0, 3c2c <FSE_decompress+0x268c>
    32bc:	add	x3, x21, #0x6
    32c0:	add	x8, x21, #0xe
    32c4:	add	x2, x3, x0
    32c8:	stp	x3, x8, [sp, #168]
    32cc:	and	x7, x28, #0xffff
    32d0:	cmp	x0, #0x7
    32d4:	ldurb	w1, [x2, #-1]
    32d8:	b.ls	3ad4 <FSE_decompress+0x2534>  // b.plast
    32dc:	sub	x6, x0, #0x8
    32e0:	add	x9, x3, x6
    32e4:	str	x9, [sp, #160]
    32e8:	ldr	x6, [x3, x6]
    32ec:	str	x6, [sp, #144]
    32f0:	cbz	w1, 3b74 <FSE_decompress+0x25d4>
    32f4:	clz	w1, w1
    32f8:	sub	w1, w1, #0x17
    32fc:	str	w1, [sp, #152]
    3300:	cbz	x19, 3d84 <FSE_decompress+0x27e4>
    3304:	add	x6, x2, x19
    3308:	add	x9, x2, #0x8
    330c:	stp	x2, x9, [sp, #208]
    3310:	cmp	x19, #0x7
    3314:	ldurb	w1, [x6, #-1]
    3318:	b.ls	3b98 <FSE_decompress+0x25f8>  // b.plast
    331c:	sub	x0, x19, #0x8
    3320:	add	x5, x2, x0
    3324:	str	x5, [sp, #200]
    3328:	ldr	x0, [x2, x0]
    332c:	str	x0, [sp, #184]
    3330:	cbz	w1, 3b74 <FSE_decompress+0x25d4>
    3334:	clz	w1, w1
    3338:	sub	w1, w1, #0x17
    333c:	str	w1, [sp, #192]
    3340:	cbz	x7, 3fe4 <FSE_decompress+0x2a44>
    3344:	add	x0, x6, x7
    3348:	add	x10, x6, #0x8
    334c:	stp	x6, x10, [sp, #248]
    3350:	cmp	x7, #0x7
    3354:	ldurb	w1, [x0, #-1]
    3358:	b.ls	3c44 <FSE_decompress+0x26a4>  // b.plast
    335c:	sub	x5, x7, #0x8
    3360:	add	x11, x6, x5
    3364:	str	x11, [sp, #240]
    3368:	ldr	x5, [x6, x5]
    336c:	str	x5, [sp, #224]
    3370:	cbz	w1, 3b74 <FSE_decompress+0x25d4>
    3374:	clz	w1, w1
    3378:	sub	w5, w1, #0x17
    337c:	str	w5, [sp, #232]
    3380:	cbz	x24, 4afc <FSE_decompress+0x355c>
    3384:	add	x1, x0, x27
    3388:	add	x14, x0, #0x8
    338c:	stp	x0, x14, [sp, #288]
    3390:	cmp	x24, #0x7
    3394:	ldurb	w1, [x1, #-7]
    3398:	b.ls	3f4c <FSE_decompress+0x29ac>  // b.plast
    339c:	sub	x27, x27, #0xe
    33a0:	add	x13, x0, x27
    33a4:	str	x13, [sp, #280]
    33a8:	ldr	x7, [x0, x27]
    33ac:	str	x7, [sp, #264]
    33b0:	cbz	w1, 3b74 <FSE_decompress+0x25d4>
    33b4:	clz	w1, w1
    33b8:	cmn	x24, #0x78
    33bc:	sub	w7, w1, #0x17
    33c0:	str	w7, [sp, #272]
    33c4:	b.hi	3294 <FSE_decompress+0x1cf4>  // b.pmore
    33c8:	ldr	w1, [sp, #152]
    33cc:	mov	w12, #0x3                   	// #3
    33d0:	cmp	w1, #0x40
    33d4:	b.hi	3428 <FSE_decompress+0x1e88>  // b.pmore
    33d8:	ldr	x15, [sp, #160]
    33dc:	cmp	x8, x15
    33e0:	b.ls	4a98 <FSE_decompress+0x34f8>  // b.plast
    33e4:	cmp	x3, x15
    33e8:	b.eq	4b1c <FSE_decompress+0x357c>  // b.none
    33ec:	lsr	w8, w1, #3
    33f0:	lsr	w16, w1, #3
    33f4:	sub	x8, x15, x8
    33f8:	mov	w12, #0x0                   	// #0
    33fc:	cmp	x3, x8
    3400:	b.ls	3414 <FSE_decompress+0x1e74>  // b.plast
    3404:	sub	x3, x15, x3
    3408:	mov	w12, #0x1                   	// #1
    340c:	mov	w16, w3
    3410:	sub	x8, x15, w3, uxtw
    3414:	ldr	x3, [x8]
    3418:	sub	w1, w1, w16, lsl #3
    341c:	str	x3, [sp, #144]
    3420:	str	w1, [sp, #152]
    3424:	str	x8, [sp, #160]
    3428:	ldr	w3, [sp, #192]
    342c:	cmp	w3, #0x40
    3430:	b.hi	4b14 <FSE_decompress+0x3574>  // b.pmore
    3434:	ldr	x8, [sp, #200]
    3438:	cmp	x9, x8
    343c:	b.ls	4adc <FSE_decompress+0x353c>  // b.plast
    3440:	cmp	x2, x8
    3444:	b.eq	4b40 <FSE_decompress+0x35a0>  // b.none
    3448:	lsr	w9, w3, #3
    344c:	lsr	w15, w3, #3
    3450:	sub	x9, x8, x9
    3454:	cmp	x2, x9
    3458:	b.ls	346c <FSE_decompress+0x1ecc>  // b.plast
    345c:	sub	x2, x8, x2
    3460:	orr	w12, w12, #0x1
    3464:	mov	w15, w2
    3468:	sub	x9, x8, w2, uxtw
    346c:	ldr	x2, [x9]
    3470:	sub	w3, w3, w15, lsl #3
    3474:	str	x2, [sp, #184]
    3478:	str	w3, [sp, #192]
    347c:	str	x9, [sp, #200]
    3480:	cmp	x10, x11
    3484:	b.ls	4abc <FSE_decompress+0x351c>  // b.plast
    3488:	cmp	x6, x11
    348c:	b.eq	4b2c <FSE_decompress+0x358c>  // b.none
    3490:	lsr	w2, w5, #3
    3494:	lsr	w3, w5, #3
    3498:	sub	x2, x11, x2
    349c:	cmp	x6, x2
    34a0:	b.ls	34b4 <FSE_decompress+0x1f14>  // b.plast
    34a4:	sub	x2, x11, x6
    34a8:	orr	w12, w12, #0x1
    34ac:	mov	w3, w2
    34b0:	sub	x2, x11, w2, uxtw
    34b4:	ldr	x6, [x2]
    34b8:	sub	w3, w5, w3, lsl #3
    34bc:	str	x6, [sp, #224]
    34c0:	str	w3, [sp, #232]
    34c4:	str	x2, [sp, #240]
    34c8:	ldr	x3, [sp, #112]
    34cc:	add	x19, x26, #0x4
    34d0:	cmp	x14, x13
    34d4:	add	x2, x3, #0x3
    34d8:	add	x3, x20, x3
    34dc:	str	x3, [sp, #136]
    34e0:	lsr	x2, x2, #2
    34e4:	add	x3, x20, x2
    34e8:	add	x28, x3, x2
    34ec:	add	x2, x28, x2
    34f0:	stp	x3, x2, [sp, #120]
    34f4:	b.ls	4a78 <FSE_decompress+0x34d8>  // b.plast
    34f8:	cmp	x0, x13
    34fc:	b.eq	4b54 <FSE_decompress+0x35b4>  // b.none
    3500:	lsr	w2, w7, #3
    3504:	lsr	w3, w7, #3
    3508:	sub	x2, x13, x2
    350c:	cmp	x0, x2
    3510:	b.ls	3524 <FSE_decompress+0x1f84>  // b.plast
    3514:	sub	x0, x13, x0
    3518:	orr	w12, w12, #0x1
    351c:	mov	w3, w0
    3520:	sub	x2, x13, w0, uxtw
    3524:	ldr	x0, [x2]
    3528:	sub	w3, w7, w3, lsl #3
    352c:	str	x0, [sp, #264]
    3530:	str	w3, [sp, #272]
    3534:	str	x2, [sp, #280]
    3538:	ldp	x25, x0, [sp, #128]
    353c:	cmp	w12, #0x0
    3540:	sub	x27, x0, #0x7
    3544:	ccmp	x25, x27, #0x2, eq  // eq = none
    3548:	b.cs	3d9c <FSE_decompress+0x27fc>  // b.hs, b.nlast
    354c:	ldr	w0, [sp, #108]
    3550:	mov	x24, x28
    3554:	ldr	x23, [sp, #120]
    3558:	neg	w21, w0
    355c:	and	w21, w21, #0x3f
    3560:	b	36d4 <FSE_decompress+0x2134>
    3564:	ldr	x5, [sp, #168]
    3568:	cmp	x3, x5
    356c:	b.eq	3d60 <FSE_decompress+0x27c0>  // b.none
    3570:	lsr	w4, w1, #3
    3574:	lsr	w6, w1, #3
    3578:	sub	x4, x3, x4
    357c:	mov	w2, #0x0                   	// #0
    3580:	cmp	x5, x4
    3584:	b.ls	3598 <FSE_decompress+0x1ff8>  // b.plast
    3588:	sub	x4, x3, x5
    358c:	mov	w2, #0x1                   	// #1
    3590:	mov	w6, w4
    3594:	sub	x4, x3, w4, uxtw
    3598:	ldr	x3, [x4]
    359c:	sub	w1, w1, w6, lsl #3
    35a0:	str	x3, [sp, #144]
    35a4:	str	w1, [sp, #152]
    35a8:	str	x4, [sp, #160]
    35ac:	ldr	w3, [sp, #192]
    35b0:	cmp	w3, #0x40
    35b4:	b.hi	3d3c <FSE_decompress+0x279c>  // b.pmore
    35b8:	ldr	x4, [sp, #200]
    35bc:	ldr	x5, [sp, #216]
    35c0:	cmp	x4, x5
    35c4:	b.cs	3cdc <FSE_decompress+0x273c>  // b.hs, b.nlast
    35c8:	ldr	x6, [sp, #208]
    35cc:	cmp	x4, x6
    35d0:	b.eq	3d4c <FSE_decompress+0x27ac>  // b.none
    35d4:	lsr	w5, w3, #3
    35d8:	lsr	w7, w3, #3
    35dc:	sub	x5, x4, x5
    35e0:	cmp	x6, x5
    35e4:	b.ls	35f8 <FSE_decompress+0x2058>  // b.plast
    35e8:	sub	x5, x4, x6
    35ec:	orr	w2, w2, #0x1
    35f0:	mov	w7, w5
    35f4:	sub	x5, x4, w5, uxtw
    35f8:	ldr	x4, [x5]
    35fc:	sub	w3, w3, w7, lsl #3
    3600:	str	x4, [sp, #184]
    3604:	str	w3, [sp, #192]
    3608:	str	x5, [sp, #200]
    360c:	ldr	w3, [sp, #232]
    3610:	cmp	w3, #0x40
    3614:	b.hi	3d44 <FSE_decompress+0x27a4>  // b.pmore
    3618:	ldr	x4, [sp, #240]
    361c:	ldr	x5, [sp, #256]
    3620:	cmp	x4, x5
    3624:	b.cs	3cfc <FSE_decompress+0x275c>  // b.hs, b.nlast
    3628:	ldr	x6, [sp, #248]
    362c:	cmp	x4, x6
    3630:	b.eq	3d70 <FSE_decompress+0x27d0>  // b.none
    3634:	lsr	w5, w3, #3
    3638:	lsr	w7, w3, #3
    363c:	sub	x5, x4, x5
    3640:	cmp	x6, x5
    3644:	b.ls	3658 <FSE_decompress+0x20b8>  // b.plast
    3648:	sub	x5, x4, x6
    364c:	orr	w2, w2, #0x1
    3650:	mov	w7, w5
    3654:	sub	x5, x4, w5, uxtw
    3658:	ldr	x4, [x5]
    365c:	sub	w3, w3, w7, lsl #3
    3660:	str	x4, [sp, #224]
    3664:	str	w3, [sp, #232]
    3668:	str	x5, [sp, #240]
    366c:	cmp	w0, #0x40
    3670:	b.hi	3da8 <FSE_decompress+0x2808>  // b.pmore
    3674:	ldr	x3, [sp, #280]
    3678:	ldr	x4, [sp, #296]
    367c:	cmp	x3, x4
    3680:	b.cs	3d1c <FSE_decompress+0x277c>  // b.hs, b.nlast
    3684:	ldr	x5, [sp, #288]
    3688:	cmp	x3, x5
    368c:	b.eq	3da8 <FSE_decompress+0x2808>  // b.none
    3690:	lsr	w4, w0, #3
    3694:	lsr	w6, w0, #3
    3698:	sub	x4, x3, x4
    369c:	cmp	x5, x4
    36a0:	b.ls	36b4 <FSE_decompress+0x2114>  // b.plast
    36a4:	sub	x4, x3, x5
    36a8:	orr	w2, w2, #0x1
    36ac:	mov	w6, w4
    36b0:	sub	x4, x3, w4, uxtw
    36b4:	ldr	x3, [x4]
    36b8:	sub	w0, w0, w6, lsl #3
    36bc:	str	x3, [sp, #264]
    36c0:	str	w0, [sp, #272]
    36c4:	str	x4, [sp, #280]
    36c8:	cmp	w2, #0x0
    36cc:	ccmp	x25, x27, #0x2, eq  // eq = none
    36d0:	b.cs	3da8 <FSE_decompress+0x2808>  // b.hs, b.nlast
    36d4:	ldr	x3, [sp, #144]
    36d8:	mov	x0, x20
    36dc:	mov	x2, #0x2                   	// #2
    36e0:	lsl	x1, x3, x1
    36e4:	lsr	x1, x1, x21
    36e8:	add	x22, x19, x1, lsl #2
    36ec:	mov	x1, x22
    36f0:	bl	0 <grub_memmove>
    36f4:	ldr	x3, [sp, #184]
    36f8:	mov	x0, x23
    36fc:	ldr	w6, [sp, #192]
    3700:	mov	x2, #0x2                   	// #2
    3704:	ldrb	w4, [x22, #2]
    3708:	ldrb	w5, [x22, #3]
    370c:	lsl	x1, x3, x6
    3710:	ldr	w3, [sp, #152]
    3714:	lsr	x1, x1, x21
    3718:	add	x20, x20, x5
    371c:	add	w3, w3, w4
    3720:	add	x22, x19, x1, lsl #2
    3724:	mov	x1, x22
    3728:	str	w3, [sp, #152]
    372c:	bl	0 <grub_memmove>
    3730:	ldr	x3, [sp, #224]
    3734:	mov	x0, x24
    3738:	ldr	w6, [sp, #232]
    373c:	mov	x2, #0x2                   	// #2
    3740:	ldrb	w4, [x22, #2]
    3744:	ldrb	w5, [x22, #3]
    3748:	lsl	x1, x3, x6
    374c:	ldr	w3, [sp, #192]
    3750:	lsr	x1, x1, x21
    3754:	add	x23, x23, x5
    3758:	add	w3, w3, w4
    375c:	add	x22, x19, x1, lsl #2
    3760:	mov	x1, x22
    3764:	str	w3, [sp, #192]
    3768:	bl	0 <grub_memmove>
    376c:	ldr	x3, [sp, #264]
    3770:	mov	x0, x25
    3774:	ldr	w6, [sp, #272]
    3778:	mov	x2, #0x2                   	// #2
    377c:	ldrb	w4, [x22, #2]
    3780:	ldrb	w5, [x22, #3]
    3784:	lsl	x1, x3, x6
    3788:	ldr	w3, [sp, #232]
    378c:	lsr	x1, x1, x21
    3790:	add	x24, x24, x5
    3794:	add	w3, w3, w4
    3798:	add	x22, x19, x1, lsl #2
    379c:	mov	x1, x22
    37a0:	str	w3, [sp, #232]
    37a4:	bl	0 <grub_memmove>
    37a8:	ldr	x3, [sp, #144]
    37ac:	mov	x0, x20
    37b0:	ldr	w6, [sp, #152]
    37b4:	mov	x2, #0x2                   	// #2
    37b8:	ldrb	w4, [x22, #2]
    37bc:	ldrb	w5, [x22, #3]
    37c0:	lsl	x1, x3, x6
    37c4:	ldr	w3, [sp, #272]
    37c8:	lsr	x1, x1, x21
    37cc:	add	x25, x25, x5
    37d0:	add	w3, w3, w4
    37d4:	add	x22, x19, x1, lsl #2
    37d8:	mov	x1, x22
    37dc:	str	w3, [sp, #272]
    37e0:	bl	0 <grub_memmove>
    37e4:	ldr	x3, [sp, #184]
    37e8:	mov	x0, x23
    37ec:	ldr	w6, [sp, #192]
    37f0:	mov	x2, #0x2                   	// #2
    37f4:	ldrb	w4, [x22, #2]
    37f8:	ldrb	w5, [x22, #3]
    37fc:	lsl	x1, x3, x6
    3800:	ldr	w3, [sp, #152]
    3804:	lsr	x1, x1, x21
    3808:	add	x20, x20, x5
    380c:	add	w3, w3, w4
    3810:	add	x22, x19, x1, lsl #2
    3814:	mov	x1, x22
    3818:	str	w3, [sp, #152]
    381c:	bl	0 <grub_memmove>
    3820:	ldr	x3, [sp, #224]
    3824:	mov	x0, x24
    3828:	ldr	w6, [sp, #232]
    382c:	mov	x2, #0x2                   	// #2
    3830:	ldrb	w4, [x22, #2]
    3834:	ldrb	w5, [x22, #3]
    3838:	lsl	x1, x3, x6
    383c:	ldr	w3, [sp, #192]
    3840:	lsr	x1, x1, x21
    3844:	add	x23, x23, x5
    3848:	add	w3, w3, w4
    384c:	add	x22, x19, x1, lsl #2
    3850:	mov	x1, x22
    3854:	str	w3, [sp, #192]
    3858:	bl	0 <grub_memmove>
    385c:	ldr	x3, [sp, #264]
    3860:	mov	x0, x25
    3864:	ldr	w6, [sp, #272]
    3868:	mov	x2, #0x2                   	// #2
    386c:	ldrb	w4, [x22, #2]
    3870:	ldrb	w5, [x22, #3]
    3874:	lsl	x1, x3, x6
    3878:	ldr	w3, [sp, #232]
    387c:	lsr	x1, x1, x21
    3880:	add	x24, x24, x5
    3884:	add	w3, w3, w4
    3888:	add	x22, x19, x1, lsl #2
    388c:	mov	x1, x22
    3890:	str	w3, [sp, #232]
    3894:	bl	0 <grub_memmove>
    3898:	ldr	x3, [sp, #144]
    389c:	mov	x0, x20
    38a0:	ldr	w6, [sp, #152]
    38a4:	mov	x2, #0x2                   	// #2
    38a8:	ldrb	w4, [x22, #2]
    38ac:	ldrb	w5, [x22, #3]
    38b0:	lsl	x1, x3, x6
    38b4:	ldr	w3, [sp, #272]
    38b8:	lsr	x1, x1, x21
    38bc:	add	x25, x25, x5
    38c0:	add	w3, w3, w4
    38c4:	add	x22, x19, x1, lsl #2
    38c8:	mov	x1, x22
    38cc:	str	w3, [sp, #272]
    38d0:	bl	0 <grub_memmove>
    38d4:	ldr	x3, [sp, #184]
    38d8:	mov	x0, x23
    38dc:	ldr	w6, [sp, #192]
    38e0:	mov	x2, #0x2                   	// #2
    38e4:	ldrb	w4, [x22, #2]
    38e8:	ldrb	w5, [x22, #3]
    38ec:	lsl	x1, x3, x6
    38f0:	ldr	w3, [sp, #152]
    38f4:	lsr	x1, x1, x21
    38f8:	add	x20, x20, x5
    38fc:	add	w3, w3, w4
    3900:	add	x22, x19, x1, lsl #2
    3904:	mov	x1, x22
    3908:	str	w3, [sp, #152]
    390c:	bl	0 <grub_memmove>
    3910:	ldr	x3, [sp, #224]
    3914:	mov	x0, x24
    3918:	ldr	w6, [sp, #232]
    391c:	mov	x2, #0x2                   	// #2
    3920:	ldrb	w4, [x22, #2]
    3924:	ldrb	w5, [x22, #3]
    3928:	lsl	x1, x3, x6
    392c:	ldr	w3, [sp, #192]
    3930:	lsr	x1, x1, x21
    3934:	add	x23, x23, x5
    3938:	add	w3, w3, w4
    393c:	add	x22, x19, x1, lsl #2
    3940:	mov	x1, x22
    3944:	str	w3, [sp, #192]
    3948:	bl	0 <grub_memmove>
    394c:	ldr	x3, [sp, #264]
    3950:	mov	x0, x25
    3954:	ldr	w6, [sp, #272]
    3958:	mov	x2, #0x2                   	// #2
    395c:	ldrb	w4, [x22, #2]
    3960:	ldrb	w5, [x22, #3]
    3964:	lsl	x1, x3, x6
    3968:	ldr	w3, [sp, #232]
    396c:	lsr	x1, x1, x21
    3970:	add	x24, x24, x5
    3974:	add	w3, w3, w4
    3978:	add	x22, x19, x1, lsl #2
    397c:	mov	x1, x22
    3980:	str	w3, [sp, #232]
    3984:	bl	0 <grub_memmove>
    3988:	ldr	x3, [sp, #144]
    398c:	mov	x0, x20
    3990:	ldr	w6, [sp, #152]
    3994:	mov	x2, #0x2                   	// #2
    3998:	ldrb	w4, [x22, #2]
    399c:	ldrb	w5, [x22, #3]
    39a0:	lsl	x1, x3, x6
    39a4:	ldr	w3, [sp, #272]
    39a8:	lsr	x1, x1, x21
    39ac:	add	x25, x25, x5
    39b0:	add	w3, w3, w4
    39b4:	add	x22, x19, x1, lsl #2
    39b8:	mov	x1, x22
    39bc:	str	w3, [sp, #272]
    39c0:	bl	0 <grub_memmove>
    39c4:	ldr	x3, [sp, #184]
    39c8:	mov	x0, x23
    39cc:	ldr	w6, [sp, #192]
    39d0:	mov	x2, #0x2                   	// #2
    39d4:	ldrb	w4, [x22, #2]
    39d8:	ldrb	w5, [x22, #3]
    39dc:	lsl	x1, x3, x6
    39e0:	ldr	w3, [sp, #152]
    39e4:	lsr	x1, x1, x21
    39e8:	add	x20, x20, x5
    39ec:	add	w3, w3, w4
    39f0:	add	x22, x19, x1, lsl #2
    39f4:	mov	x1, x22
    39f8:	str	w3, [sp, #152]
    39fc:	bl	0 <grub_memmove>
    3a00:	ldr	x3, [sp, #224]
    3a04:	mov	x0, x24
    3a08:	ldr	w6, [sp, #232]
    3a0c:	mov	x2, #0x2                   	// #2
    3a10:	ldrb	w4, [x22, #2]
    3a14:	ldrb	w5, [x22, #3]
    3a18:	lsl	x1, x3, x6
    3a1c:	ldr	w3, [sp, #192]
    3a20:	lsr	x1, x1, x21
    3a24:	add	x23, x23, x5
    3a28:	add	w3, w3, w4
    3a2c:	add	x22, x19, x1, lsl #2
    3a30:	mov	x1, x22
    3a34:	str	w3, [sp, #192]
    3a38:	bl	0 <grub_memmove>
    3a3c:	ldr	x3, [sp, #264]
    3a40:	mov	x0, x25
    3a44:	ldr	w6, [sp, #272]
    3a48:	mov	x2, #0x2                   	// #2
    3a4c:	ldrb	w4, [x22, #2]
    3a50:	ldrb	w5, [x22, #3]
    3a54:	lsl	x1, x3, x6
    3a58:	ldr	w3, [sp, #232]
    3a5c:	lsr	x1, x1, x21
    3a60:	add	x24, x24, x5
    3a64:	add	w3, w3, w4
    3a68:	add	x22, x19, x1, lsl #2
    3a6c:	mov	x1, x22
    3a70:	str	w3, [sp, #232]
    3a74:	bl	0 <grub_memmove>
    3a78:	ldr	w0, [sp, #272]
    3a7c:	mov	w2, #0x3                   	// #3
    3a80:	ldrb	w4, [x22, #2]
    3a84:	ldrb	w3, [x22, #3]
    3a88:	ldr	w1, [sp, #152]
    3a8c:	add	w0, w4, w0
    3a90:	str	w0, [sp, #272]
    3a94:	add	x25, x25, x3
    3a98:	cmp	w1, #0x40
    3a9c:	b.hi	35ac <FSE_decompress+0x200c>  // b.pmore
    3aa0:	ldr	x3, [sp, #160]
    3aa4:	ldr	x2, [sp, #176]
    3aa8:	cmp	x3, x2
    3aac:	b.cc	3564 <FSE_decompress+0x1fc4>  // b.lo, b.ul, b.last
    3ab0:	lsr	w4, w1, #3
    3ab4:	mov	w2, #0x0                   	// #0
    3ab8:	sub	x3, x3, x4
    3abc:	str	x3, [sp, #160]
    3ac0:	and	w1, w1, #0x7
    3ac4:	str	w1, [sp, #152]
    3ac8:	ldr	x3, [x3]
    3acc:	str	x3, [sp, #144]
    3ad0:	b	35ac <FSE_decompress+0x200c>
    3ad4:	ldrb	w6, [x21, #6]
    3ad8:	cmp	w25, #0x5
    3adc:	str	x6, [sp, #144]
    3ae0:	str	x3, [sp, #160]
    3ae4:	b.eq	3b50 <FSE_decompress+0x25b0>  // b.none
    3ae8:	b.hi	3b38 <FSE_decompress+0x2598>  // b.pmore
    3aec:	cmp	w25, #0x3
    3af0:	b.eq	3b04 <FSE_decompress+0x2564>  // b.none
    3af4:	cmp	w25, #0x4
    3af8:	b.ne	3b5c <FSE_decompress+0x25bc>  // b.any
    3afc:	ldrb	w9, [x21, #9]
    3b00:	add	x6, x6, x9, lsl #24
    3b04:	ldrb	w9, [x21, #8]
    3b08:	add	x6, x6, x9, lsl #16
    3b0c:	ldrb	w9, [x21, #7]
    3b10:	add	x6, x6, x9, lsl #8
    3b14:	str	x6, [sp, #144]
    3b18:	cbz	w1, 3290 <FSE_decompress+0x1cf0>
    3b1c:	mov	w6, #0x9                   	// #9
    3b20:	sub	w25, w6, w25
    3b24:	clz	w1, w1
    3b28:	add	w1, w1, w25, lsl #3
    3b2c:	sub	w1, w1, #0x1f
    3b30:	str	w1, [sp, #152]
    3b34:	b	3300 <FSE_decompress+0x1d60>
    3b38:	cmp	w25, #0x6
    3b3c:	b.eq	3b48 <FSE_decompress+0x25a8>  // b.none
    3b40:	ldrb	w9, [x21, #12]
    3b44:	add	x6, x6, x9, lsl #48
    3b48:	ldrb	w9, [x21, #11]
    3b4c:	add	x6, x6, x9, lsl #40
    3b50:	ldrb	w9, [x21, #10]
    3b54:	add	x6, x6, x9, lsl #32
    3b58:	b	3afc <FSE_decompress+0x255c>
    3b5c:	cmp	w25, #0x2
    3b60:	b.ne	3b18 <FSE_decompress+0x2578>  // b.any
    3b64:	ldrb	w9, [x21, #7]
    3b68:	add	x6, x6, x9, lsl #8
    3b6c:	str	x6, [sp, #144]
    3b70:	b	3b18 <FSE_decompress+0x2578>
    3b74:	mov	x24, #0xffffffffffffffff    	// #-1
    3b78:	mov	x0, x24
    3b7c:	ldp	x19, x20, [sp, #16]
    3b80:	ldp	x21, x22, [sp, #32]
    3b84:	ldp	x23, x24, [sp, #48]
    3b88:	ldp	x25, x26, [sp, #64]
    3b8c:	ldp	x27, x28, [sp, #80]
    3b90:	ldp	x29, x30, [sp], #304
    3b94:	ret
    3b98:	ldrb	w0, [x3, x0]
    3b9c:	cmp	w22, #0x5
    3ba0:	str	x0, [sp, #184]
    3ba4:	str	x2, [sp, #200]
    3ba8:	b.eq	3c14 <FSE_decompress+0x2674>  // b.none
    3bac:	b.hi	3bfc <FSE_decompress+0x265c>  // b.pmore
    3bb0:	cmp	w22, #0x3
    3bb4:	b.eq	3bc8 <FSE_decompress+0x2628>  // b.none
    3bb8:	cmp	w22, #0x4
    3bbc:	b.ne	3c20 <FSE_decompress+0x2680>  // b.any
    3bc0:	ldrb	w10, [x2, #3]
    3bc4:	add	x0, x0, x10, lsl #24
    3bc8:	ldrb	w10, [x2, #2]
    3bcc:	add	x0, x0, x10, lsl #16
    3bd0:	ldrb	w10, [x2, #1]
    3bd4:	add	x0, x0, x10, lsl #8
    3bd8:	str	x0, [sp, #184]
    3bdc:	cbz	w1, 3290 <FSE_decompress+0x1cf0>
    3be0:	mov	w0, #0x9                   	// #9
    3be4:	sub	w5, w0, w22
    3be8:	clz	w1, w1
    3bec:	add	w1, w1, w5, lsl #3
    3bf0:	sub	w1, w1, #0x1f
    3bf4:	str	w1, [sp, #192]
    3bf8:	b	3340 <FSE_decompress+0x1da0>
    3bfc:	cmp	w22, #0x6
    3c00:	b.eq	3c0c <FSE_decompress+0x266c>  // b.none
    3c04:	ldrb	w10, [x2, #6]
    3c08:	add	x0, x0, x10, lsl #48
    3c0c:	ldrb	w10, [x2, #5]
    3c10:	add	x0, x0, x10, lsl #40
    3c14:	ldrb	w10, [x2, #4]
    3c18:	add	x0, x0, x10, lsl #32
    3c1c:	b	3bc0 <FSE_decompress+0x2620>
    3c20:	cmp	w22, #0x2
    3c24:	b.eq	3bd0 <FSE_decompress+0x2630>  // b.none
    3c28:	b	3bdc <FSE_decompress+0x263c>
    3c2c:	add	x0, sp, #0x90
    3c30:	mov	x2, #0x28                  	// #40
    3c34:	mov	w1, #0x0                   	// #0
    3c38:	mov	x24, #0xffffffffffffffb8    	// #-72
    3c3c:	bl	0 <grub_memset>
    3c40:	b	3294 <FSE_decompress+0x1cf4>
    3c44:	ldrb	w5, [x2, x19]
    3c48:	cmp	w28, #0x5
    3c4c:	str	x5, [sp, #224]
    3c50:	str	x6, [sp, #240]
    3c54:	b.eq	3cc4 <FSE_decompress+0x2724>  // b.none
    3c58:	b.hi	3cac <FSE_decompress+0x270c>  // b.pmore
    3c5c:	cmp	w28, #0x3
    3c60:	b.eq	3c74 <FSE_decompress+0x26d4>  // b.none
    3c64:	cmp	w28, #0x4
    3c68:	b.ne	3cd0 <FSE_decompress+0x2730>  // b.any
    3c6c:	ldrb	w11, [x6, #3]
    3c70:	add	x5, x5, x11, lsl #24
    3c74:	ldrb	w11, [x6, #2]
    3c78:	add	x5, x5, x11, lsl #16
    3c7c:	ldrb	w11, [x6, #1]
    3c80:	add	x5, x5, x11, lsl #8
    3c84:	str	x5, [sp, #224]
    3c88:	cbz	w1, 3290 <FSE_decompress+0x1cf0>
    3c8c:	mov	w5, #0x9                   	// #9
    3c90:	sub	w5, w5, w28
    3c94:	clz	w1, w1
    3c98:	mov	x11, x6
    3c9c:	add	w1, w1, w5, lsl #3
    3ca0:	sub	w5, w1, #0x1f
    3ca4:	str	w5, [sp, #232]
    3ca8:	b	3380 <FSE_decompress+0x1de0>
    3cac:	cmp	w28, #0x6
    3cb0:	b.eq	3cbc <FSE_decompress+0x271c>  // b.none
    3cb4:	ldrb	w11, [x6, #6]
    3cb8:	add	x5, x5, x11, lsl #48
    3cbc:	ldrb	w11, [x6, #5]
    3cc0:	add	x5, x5, x11, lsl #40
    3cc4:	ldrb	w11, [x6, #4]
    3cc8:	add	x5, x5, x11, lsl #32
    3ccc:	b	3c6c <FSE_decompress+0x26cc>
    3cd0:	cmp	w28, #0x2
    3cd4:	b.eq	3c7c <FSE_decompress+0x26dc>  // b.none
    3cd8:	b	3c88 <FSE_decompress+0x26e8>
    3cdc:	lsr	w5, w3, #3
    3ce0:	and	w3, w3, #0x7
    3ce4:	sub	x4, x4, x5
    3ce8:	str	w3, [sp, #192]
    3cec:	str	x4, [sp, #200]
    3cf0:	ldr	x3, [x4]
    3cf4:	str	x3, [sp, #184]
    3cf8:	b	360c <FSE_decompress+0x206c>
    3cfc:	lsr	w5, w3, #3
    3d00:	and	w3, w3, #0x7
    3d04:	sub	x4, x4, x5
    3d08:	str	w3, [sp, #232]
    3d0c:	str	x4, [sp, #240]
    3d10:	ldr	x3, [x4]
    3d14:	str	x3, [sp, #224]
    3d18:	b	366c <FSE_decompress+0x20cc>
    3d1c:	lsr	w4, w0, #3
    3d20:	and	w0, w0, #0x7
    3d24:	sub	x3, x3, x4
    3d28:	str	w0, [sp, #272]
    3d2c:	str	x3, [sp, #280]
    3d30:	ldr	x0, [x3]
    3d34:	str	x0, [sp, #264]
    3d38:	b	36c8 <FSE_decompress+0x2128>
    3d3c:	mov	w2, #0x3                   	// #3
    3d40:	b	360c <FSE_decompress+0x206c>
    3d44:	mov	w2, #0x3                   	// #3
    3d48:	b	366c <FSE_decompress+0x20cc>
    3d4c:	cmp	w3, #0x40
    3d50:	orr	w3, w2, #0x1
    3d54:	orr	w2, w2, #0x2
    3d58:	csel	w2, w2, w3, eq  // eq = none
    3d5c:	b	360c <FSE_decompress+0x206c>
    3d60:	cmp	w1, #0x40
    3d64:	cset	w2, eq  // eq = none
    3d68:	add	w2, w2, #0x1
    3d6c:	b	35ac <FSE_decompress+0x200c>
    3d70:	cmp	w3, #0x40
    3d74:	orr	w3, w2, #0x1
    3d78:	orr	w2, w2, #0x2
    3d7c:	csel	w2, w2, w3, eq  // eq = none
    3d80:	b	366c <FSE_decompress+0x20cc>
    3d84:	add	x0, sp, #0xb8
    3d88:	mov	x2, #0x28                  	// #40
    3d8c:	mov	w1, #0x0                   	// #0
    3d90:	mov	x24, #0xffffffffffffffb8    	// #-72
    3d94:	bl	0 <grub_memset>
    3d98:	b	3294 <FSE_decompress+0x1cf4>
    3d9c:	ldp	x23, x25, [sp, #120]
    3da0:	mov	x24, x28
    3da4:	nop
    3da8:	ldp	x0, x2, [sp, #120]
    3dac:	cmp	x0, x20
    3db0:	ccmp	x28, x23, #0x0, cs  // cs = hs, nlast
    3db4:	cset	w0, cc  // cc = lo, ul, last
    3db8:	cmp	x2, x24
    3dbc:	cset	w2, cc  // cc = lo, ul, last
    3dc0:	orr	w0, w0, w2
    3dc4:	cbnz	w0, 3290 <FSE_decompress+0x1cf0>
    3dc8:	cmp	w1, #0x40
    3dcc:	b.hi	4100 <FSE_decompress+0x2b60>  // b.pmore
    3dd0:	ldr	w0, [sp, #108]
    3dd4:	neg	w21, w0
    3dd8:	ldr	x0, [sp, #120]
    3ddc:	and	w21, w21, #0x3f
    3de0:	sub	x22, x0, #0x7
    3de4:	b	3f08 <FSE_decompress+0x2968>
    3de8:	ldr	x3, [sp, #168]
    3dec:	cmp	x0, x3
    3df0:	b.eq	4008 <FSE_decompress+0x2a68>  // b.none
    3df4:	sub	x7, x0, x3
    3df8:	cmp	x3, x2
    3dfc:	mov	w5, #0x0                   	// #0
    3e00:	b.hi	3ffc <FSE_decompress+0x2a5c>  // b.pmore
    3e04:	cmp	x20, x22
    3e08:	cset	w5, cc  // cc = lo, ul, last
    3e0c:	ldr	x3, [x2]
    3e10:	sub	w1, w1, w6, lsl #3
    3e14:	str	x3, [sp, #144]
    3e18:	str	w1, [sp, #152]
    3e1c:	str	x2, [sp, #160]
    3e20:	mov	x0, x20
    3e24:	mov	x2, #0x2                   	// #2
    3e28:	cbz	w5, 40e8 <FSE_decompress+0x2b48>
    3e2c:	lsl	x1, x3, x1
    3e30:	lsr	x1, x1, x21
    3e34:	add	x26, x19, x1, lsl #2
    3e38:	mov	x1, x26
    3e3c:	bl	0 <grub_memmove>
    3e40:	ldr	w5, [sp, #152]
    3e44:	mov	x2, #0x2                   	// #2
    3e48:	ldrb	w4, [x26, #2]
    3e4c:	ldr	x3, [sp, #144]
    3e50:	add	w1, w4, w5
    3e54:	str	w1, [sp, #152]
    3e58:	ldrb	w0, [x26, #3]
    3e5c:	lsl	x1, x3, x1
    3e60:	lsr	x1, x1, x21
    3e64:	add	x20, x20, x0
    3e68:	add	x26, x19, x1, lsl #2
    3e6c:	mov	x0, x20
    3e70:	mov	x1, x26
    3e74:	bl	0 <grub_memmove>
    3e78:	ldr	w5, [sp, #152]
    3e7c:	mov	x2, #0x2                   	// #2
    3e80:	ldrb	w3, [x26, #2]
    3e84:	ldr	x0, [sp, #144]
    3e88:	add	w1, w3, w5
    3e8c:	ldrb	w4, [x26, #3]
    3e90:	str	w1, [sp, #152]
    3e94:	lsl	x1, x0, x1
    3e98:	add	x20, x20, x4
    3e9c:	lsr	x1, x1, x21
    3ea0:	mov	x0, x20
    3ea4:	add	x26, x19, x1, lsl #2
    3ea8:	mov	x1, x26
    3eac:	bl	0 <grub_memmove>
    3eb0:	ldr	w5, [sp, #152]
    3eb4:	mov	x2, #0x2                   	// #2
    3eb8:	ldrb	w3, [x26, #2]
    3ebc:	ldr	x0, [sp, #144]
    3ec0:	add	w1, w3, w5
    3ec4:	ldrb	w4, [x26, #3]
    3ec8:	str	w1, [sp, #152]
    3ecc:	lsl	x1, x0, x1
    3ed0:	add	x20, x20, x4
    3ed4:	lsr	x1, x1, x21
    3ed8:	mov	x0, x20
    3edc:	add	x26, x19, x1, lsl #2
    3ee0:	mov	x1, x26
    3ee4:	bl	0 <grub_memmove>
    3ee8:	ldr	w2, [sp, #152]
    3eec:	ldrb	w3, [x26, #2]
    3ef0:	ldrb	w0, [x26, #3]
    3ef4:	add	w1, w3, w2
    3ef8:	str	w1, [sp, #152]
    3efc:	add	x20, x20, x0
    3f00:	cmp	w1, #0x40
    3f04:	b.hi	4100 <FSE_decompress+0x2b60>  // b.pmore
    3f08:	ldr	x0, [sp, #160]
    3f0c:	lsr	w2, w1, #3
    3f10:	ldr	x4, [sp, #176]
    3f14:	lsr	w6, w1, #3
    3f18:	sub	x2, x0, x2
    3f1c:	cmp	x0, x4
    3f20:	b.cc	3de8 <FSE_decompress+0x2848>  // b.lo, b.ul, b.last
    3f24:	lsr	w2, w1, #3
    3f28:	cmp	x20, x22
    3f2c:	sub	x0, x0, x2
    3f30:	and	w1, w1, #0x7
    3f34:	cset	w5, cc  // cc = lo, ul, last
    3f38:	ldr	x3, [x0]
    3f3c:	str	x3, [sp, #144]
    3f40:	str	w1, [sp, #152]
    3f44:	str	x0, [sp, #160]
    3f48:	b	3e20 <FSE_decompress+0x2880>
    3f4c:	ldrb	w7, [x6, x7]
    3f50:	cmp	x24, #0x5
    3f54:	str	x7, [sp, #264]
    3f58:	str	x0, [sp, #280]
    3f5c:	b.eq	3fcc <FSE_decompress+0x2a2c>  // b.none
    3f60:	b.hi	3fb4 <FSE_decompress+0x2a14>  // b.pmore
    3f64:	cmp	x24, #0x3
    3f68:	b.eq	3f7c <FSE_decompress+0x29dc>  // b.none
    3f6c:	cmp	x24, #0x4
    3f70:	b.ne	3fd8 <FSE_decompress+0x2a38>  // b.any
    3f74:	ldrb	w12, [x0, #3]
    3f78:	add	x7, x7, x12, lsl #24
    3f7c:	ldrb	w12, [x0, #2]
    3f80:	add	x7, x7, x12, lsl #16
    3f84:	ldrb	w12, [x0, #1]
    3f88:	add	x7, x7, x12, lsl #8
    3f8c:	str	x7, [sp, #264]
    3f90:	cbz	w1, 3290 <FSE_decompress+0x1cf0>
    3f94:	mov	w7, #0x9                   	// #9
    3f98:	sub	w7, w7, w24
    3f9c:	clz	w1, w1
    3fa0:	mov	x13, x0
    3fa4:	add	w1, w1, w7, lsl #3
    3fa8:	sub	w7, w1, #0x1f
    3fac:	str	w7, [sp, #272]
    3fb0:	b	33c8 <FSE_decompress+0x1e28>
    3fb4:	cmp	x24, #0x6
    3fb8:	b.eq	3fc4 <FSE_decompress+0x2a24>  // b.none
    3fbc:	ldrb	w12, [x0, #6]
    3fc0:	add	x7, x7, x12, lsl #48
    3fc4:	ldrb	w12, [x0, #5]
    3fc8:	add	x7, x7, x12, lsl #40
    3fcc:	ldrb	w12, [x0, #4]
    3fd0:	add	x7, x7, x12, lsl #32
    3fd4:	b	3f74 <FSE_decompress+0x29d4>
    3fd8:	cmp	x24, #0x2
    3fdc:	b.eq	3f84 <FSE_decompress+0x29e4>  // b.none
    3fe0:	b	3f90 <FSE_decompress+0x29f0>
    3fe4:	add	x0, sp, #0xe0
    3fe8:	mov	x2, #0x28                  	// #40
    3fec:	mov	w1, #0x0                   	// #0
    3ff0:	mov	x24, #0xffffffffffffffb8    	// #-72
    3ff4:	bl	0 <grub_memset>
    3ff8:	b	3294 <FSE_decompress+0x1cf4>
    3ffc:	sub	x2, x0, w7, uxtw
    4000:	mov	w6, w7
    4004:	b	3e0c <FSE_decompress+0x286c>
    4008:	ldr	x2, [sp, #120]
    400c:	sub	x21, x2, #0x2
    4010:	ldr	w2, [sp, #108]
    4014:	neg	w2, w2
    4018:	and	w22, w2, #0x3f
    401c:	b	40a4 <FSE_decompress+0x2b04>
    4020:	ldr	x4, [sp, #168]
    4024:	lsr	w3, w1, #3
    4028:	cmp	x0, x4
    402c:	b.eq	4108 <FSE_decompress+0x2b68>  // b.none
    4030:	sub	x6, x0, x4
    4034:	cmp	x4, x2
    4038:	mov	w5, #0x0                   	// #0
    403c:	b.hi	40dc <FSE_decompress+0x2b3c>  // b.pmore
    4040:	cmp	x21, x20
    4044:	cset	w5, cs  // cs = hs, nlast
    4048:	sub	w1, w1, w3, lsl #3
    404c:	ldr	x3, [x2]
    4050:	str	x3, [sp, #144]
    4054:	str	w1, [sp, #152]
    4058:	str	x2, [sp, #160]
    405c:	mov	x0, x20
    4060:	mov	x2, #0x2                   	// #2
    4064:	cbz	w5, 4108 <FSE_decompress+0x2b68>
    4068:	lsl	x1, x3, x1
    406c:	lsr	x1, x1, x22
    4070:	add	x26, x19, x1, lsl #2
    4074:	mov	x1, x26
    4078:	bl	0 <grub_memmove>
    407c:	ldr	w2, [sp, #152]
    4080:	ldrb	w3, [x26, #2]
    4084:	ldrb	w0, [x26, #3]
    4088:	add	w1, w3, w2
    408c:	str	w1, [sp, #152]
    4090:	add	x20, x20, x0
    4094:	cmp	w1, #0x40
    4098:	b.hi	4108 <FSE_decompress+0x2b68>  // b.pmore
    409c:	ldr	x0, [sp, #160]
    40a0:	ldr	x4, [sp, #176]
    40a4:	lsr	w2, w1, #3
    40a8:	cmp	x0, x4
    40ac:	sub	x2, x0, x2
    40b0:	b.cc	4020 <FSE_decompress+0x2a80>  // b.lo, b.ul, b.last
    40b4:	lsr	w2, w1, #3
    40b8:	cmp	x21, x20
    40bc:	sub	x0, x0, x2
    40c0:	and	w1, w1, #0x7
    40c4:	cset	w5, cs  // cs = hs, nlast
    40c8:	ldr	x3, [x0]
    40cc:	str	x3, [sp, #144]
    40d0:	str	w1, [sp, #152]
    40d4:	str	x0, [sp, #160]
    40d8:	b	405c <FSE_decompress+0x2abc>
    40dc:	sub	x2, x0, w6, uxtw
    40e0:	mov	w3, w6
    40e4:	b	4048 <FSE_decompress+0x2aa8>
    40e8:	ldr	x0, [sp, #120]
    40ec:	cmp	w1, #0x40
    40f0:	sub	x21, x0, #0x2
    40f4:	b.hi	4108 <FSE_decompress+0x2b68>  // b.pmore
    40f8:	ldr	x0, [sp, #160]
    40fc:	b	4010 <FSE_decompress+0x2a70>
    4100:	ldr	x0, [sp, #120]
    4104:	sub	x21, x0, #0x2
    4108:	cmp	x21, x20
    410c:	b.cc	4160 <FSE_decompress+0x2bc0>  // b.lo, b.ul, b.last
    4110:	ldr	w0, [sp, #108]
    4114:	ldr	w3, [sp, #152]
    4118:	neg	w0, w0
    411c:	and	w22, w0, #0x3f
    4120:	ldr	x1, [sp, #144]
    4124:	mov	x0, x20
    4128:	mov	x2, #0x2                   	// #2
    412c:	lsl	x1, x1, x3
    4130:	lsr	x1, x1, x22
    4134:	add	x26, x19, x1, lsl #2
    4138:	mov	x1, x26
    413c:	bl	0 <grub_memmove>
    4140:	ldr	w2, [sp, #152]
    4144:	ldrb	w3, [x26, #2]
    4148:	ldrb	w0, [x26, #3]
    414c:	add	w3, w3, w2
    4150:	str	w3, [sp, #152]
    4154:	add	x20, x20, x0
    4158:	cmp	x21, x20
    415c:	b.cs	4120 <FSE_decompress+0x2b80>  // b.hs, b.nlast
    4160:	ldr	x0, [sp, #120]
    4164:	cmp	x0, x20
    4168:	b.hi	4bcc <FSE_decompress+0x362c>  // b.pmore
    416c:	ldr	w1, [sp, #192]
    4170:	cmp	w1, #0x40
    4174:	b.hi	43ec <FSE_decompress+0x2e4c>  // b.pmore
    4178:	ldr	w0, [sp, #108]
    417c:	sub	x21, x28, #0x7
    4180:	neg	w20, w0
    4184:	and	w20, w20, #0x3f
    4188:	b	42ac <FSE_decompress+0x2d0c>
    418c:	ldr	x3, [sp, #208]
    4190:	cmp	x0, x3
    4194:	b.eq	42fc <FSE_decompress+0x2d5c>  // b.none
    4198:	sub	x7, x0, x3
    419c:	cmp	x3, x2
    41a0:	mov	w5, #0x0                   	// #0
    41a4:	b.hi	42f0 <FSE_decompress+0x2d50>  // b.pmore
    41a8:	cmp	x23, x21
    41ac:	cset	w5, cc  // cc = lo, ul, last
    41b0:	ldr	x3, [x2]
    41b4:	sub	w1, w1, w6, lsl #3
    41b8:	str	x3, [sp, #184]
    41bc:	str	w1, [sp, #192]
    41c0:	str	x2, [sp, #200]
    41c4:	mov	x0, x23
    41c8:	mov	x2, #0x2                   	// #2
    41cc:	cbz	w5, 43d8 <FSE_decompress+0x2e38>
    41d0:	lsl	x1, x3, x1
    41d4:	lsr	x1, x1, x20
    41d8:	add	x22, x19, x1, lsl #2
    41dc:	mov	x1, x22
    41e0:	bl	0 <grub_memmove>
    41e4:	ldr	w5, [sp, #192]
    41e8:	mov	x2, #0x2                   	// #2
    41ec:	ldrb	w4, [x22, #2]
    41f0:	ldr	x3, [sp, #184]
    41f4:	add	w1, w4, w5
    41f8:	str	w1, [sp, #192]
    41fc:	ldrb	w0, [x22, #3]
    4200:	lsl	x1, x3, x1
    4204:	lsr	x1, x1, x20
    4208:	add	x23, x23, x0
    420c:	add	x22, x19, x1, lsl #2
    4210:	mov	x0, x23
    4214:	mov	x1, x22
    4218:	bl	0 <grub_memmove>
    421c:	ldr	w5, [sp, #192]
    4220:	mov	x2, #0x2                   	// #2
    4224:	ldrb	w3, [x22, #2]
    4228:	ldr	x0, [sp, #184]
    422c:	add	w1, w3, w5
    4230:	ldrb	w4, [x22, #3]
    4234:	str	w1, [sp, #192]
    4238:	lsl	x1, x0, x1
    423c:	add	x23, x23, x4
    4240:	lsr	x1, x1, x20
    4244:	mov	x0, x23
    4248:	add	x22, x19, x1, lsl #2
    424c:	mov	x1, x22
    4250:	bl	0 <grub_memmove>
    4254:	ldr	w5, [sp, #192]
    4258:	mov	x2, #0x2                   	// #2
    425c:	ldrb	w3, [x22, #2]
    4260:	ldr	x0, [sp, #184]
    4264:	add	w1, w3, w5
    4268:	ldrb	w4, [x22, #3]
    426c:	str	w1, [sp, #192]
    4270:	lsl	x1, x0, x1
    4274:	add	x23, x23, x4
    4278:	lsr	x1, x1, x20
    427c:	mov	x0, x23
    4280:	add	x22, x19, x1, lsl #2
    4284:	mov	x1, x22
    4288:	bl	0 <grub_memmove>
    428c:	ldr	w2, [sp, #192]
    4290:	ldrb	w3, [x22, #2]
    4294:	ldrb	w0, [x22, #3]
    4298:	add	w1, w3, w2
    429c:	str	w1, [sp, #192]
    42a0:	add	x23, x23, x0
    42a4:	cmp	w1, #0x40
    42a8:	b.hi	43ec <FSE_decompress+0x2e4c>  // b.pmore
    42ac:	ldr	x0, [sp, #200]
    42b0:	lsr	w2, w1, #3
    42b4:	ldr	x4, [sp, #216]
    42b8:	lsr	w6, w1, #3
    42bc:	sub	x2, x0, x2
    42c0:	cmp	x0, x4
    42c4:	b.cc	418c <FSE_decompress+0x2bec>  // b.lo, b.ul, b.last
    42c8:	lsr	w2, w1, #3
    42cc:	cmp	x23, x21
    42d0:	sub	x0, x0, x2
    42d4:	and	w1, w1, #0x7
    42d8:	cset	w5, cc  // cc = lo, ul, last
    42dc:	ldr	x3, [x0]
    42e0:	str	x3, [sp, #184]
    42e4:	str	w1, [sp, #192]
    42e8:	str	x0, [sp, #200]
    42ec:	b	41c4 <FSE_decompress+0x2c24>
    42f0:	sub	x2, x0, w7, uxtw
    42f4:	mov	w6, w7
    42f8:	b	41b0 <FSE_decompress+0x2c10>
    42fc:	sub	x20, x28, #0x2
    4300:	ldr	w2, [sp, #108]
    4304:	neg	w21, w2
    4308:	and	w21, w21, #0x3f
    430c:	b	4394 <FSE_decompress+0x2df4>
    4310:	ldr	x4, [sp, #208]
    4314:	lsr	w3, w1, #3
    4318:	cmp	x0, x4
    431c:	b.eq	43f0 <FSE_decompress+0x2e50>  // b.none
    4320:	sub	x6, x0, x4
    4324:	cmp	x4, x2
    4328:	mov	w5, #0x0                   	// #0
    432c:	b.hi	43cc <FSE_decompress+0x2e2c>  // b.pmore
    4330:	cmp	x23, x20
    4334:	cset	w5, ls  // ls = plast
    4338:	sub	w1, w1, w3, lsl #3
    433c:	ldr	x3, [x2]
    4340:	str	x3, [sp, #184]
    4344:	str	w1, [sp, #192]
    4348:	str	x2, [sp, #200]
    434c:	mov	x0, x23
    4350:	mov	x2, #0x2                   	// #2
    4354:	cbz	w5, 43f0 <FSE_decompress+0x2e50>
    4358:	lsl	x1, x3, x1
    435c:	lsr	x1, x1, x21
    4360:	add	x22, x19, x1, lsl #2
    4364:	mov	x1, x22
    4368:	bl	0 <grub_memmove>
    436c:	ldr	w2, [sp, #192]
    4370:	ldrb	w3, [x22, #2]
    4374:	ldrb	w0, [x22, #3]
    4378:	add	w1, w3, w2
    437c:	str	w1, [sp, #192]
    4380:	add	x23, x23, x0
    4384:	cmp	w1, #0x40
    4388:	b.hi	43f0 <FSE_decompress+0x2e50>  // b.pmore
    438c:	ldr	x0, [sp, #200]
    4390:	ldr	x4, [sp, #216]
    4394:	lsr	w2, w1, #3
    4398:	cmp	x0, x4
    439c:	sub	x2, x0, x2
    43a0:	b.cc	4310 <FSE_decompress+0x2d70>  // b.lo, b.ul, b.last
    43a4:	lsr	w2, w1, #3
    43a8:	cmp	x23, x20
    43ac:	sub	x0, x0, x2
    43b0:	and	w1, w1, #0x7
    43b4:	cset	w5, ls  // ls = plast
    43b8:	ldr	x3, [x0]
    43bc:	str	x3, [sp, #184]
    43c0:	str	w1, [sp, #192]
    43c4:	str	x0, [sp, #200]
    43c8:	b	434c <FSE_decompress+0x2dac>
    43cc:	sub	x2, x0, w6, uxtw
    43d0:	mov	w3, w6
    43d4:	b	4338 <FSE_decompress+0x2d98>
    43d8:	cmp	w1, #0x40
    43dc:	sub	x20, x28, #0x2
    43e0:	b.hi	43f0 <FSE_decompress+0x2e50>  // b.pmore
    43e4:	ldr	x0, [sp, #200]
    43e8:	b	4300 <FSE_decompress+0x2d60>
    43ec:	sub	x20, x28, #0x2
    43f0:	cmp	x20, x23
    43f4:	b.cc	4448 <FSE_decompress+0x2ea8>  // b.lo, b.ul, b.last
    43f8:	ldr	w0, [sp, #108]
    43fc:	ldr	w3, [sp, #192]
    4400:	neg	w21, w0
    4404:	and	w21, w21, #0x3f
    4408:	ldr	x1, [sp, #184]
    440c:	mov	x0, x23
    4410:	mov	x2, #0x2                   	// #2
    4414:	lsl	x1, x1, x3
    4418:	lsr	x1, x1, x21
    441c:	add	x22, x19, x1, lsl #2
    4420:	mov	x1, x22
    4424:	bl	0 <grub_memmove>
    4428:	ldr	w2, [sp, #192]
    442c:	ldrb	w3, [x22, #2]
    4430:	ldrb	w0, [x22, #3]
    4434:	add	w3, w3, w2
    4438:	str	w3, [sp, #192]
    443c:	add	x23, x23, x0
    4440:	cmp	x23, x20
    4444:	b.ls	4408 <FSE_decompress+0x2e68>  // b.plast
    4448:	cmp	x28, x23
    444c:	b.hi	4c8c <FSE_decompress+0x36ec>  // b.pmore
    4450:	ldr	w4, [sp, #232]
    4454:	cmp	w4, #0x40
    4458:	b.hi	46cc <FSE_decompress+0x312c>  // b.pmore
    445c:	ldr	w0, [sp, #108]
    4460:	neg	w20, w0
    4464:	ldr	x0, [sp, #128]
    4468:	and	w20, w20, #0x3f
    446c:	sub	x21, x0, #0x7
    4470:	b	4594 <FSE_decompress+0x2ff4>
    4474:	ldr	x1, [sp, #248]
    4478:	cmp	x0, x1
    447c:	b.eq	45dc <FSE_decompress+0x303c>  // b.none
    4480:	sub	x7, x0, x1
    4484:	cmp	x1, x2
    4488:	mov	w5, #0x0                   	// #0
    448c:	b.hi	45d0 <FSE_decompress+0x3030>  // b.pmore
    4490:	cmp	x24, x21
    4494:	cset	w5, cc  // cc = lo, ul, last
    4498:	ldr	x1, [x2]
    449c:	sub	w4, w4, w6, lsl #3
    44a0:	str	x1, [sp, #224]
    44a4:	str	w4, [sp, #232]
    44a8:	str	x2, [sp, #240]
    44ac:	mov	x0, x24
    44b0:	mov	x2, #0x2                   	// #2
    44b4:	cbz	w5, 46b4 <FSE_decompress+0x3114>
    44b8:	lsl	x23, x1, x4
    44bc:	lsr	x23, x23, x20
    44c0:	add	x23, x19, x23, lsl #2
    44c4:	mov	x1, x23
    44c8:	bl	0 <grub_memmove>
    44cc:	ldr	w1, [sp, #232]
    44d0:	mov	x2, #0x2                   	// #2
    44d4:	ldrb	w0, [x23, #2]
    44d8:	ldr	x28, [sp, #224]
    44dc:	add	w0, w0, w1
    44e0:	ldrb	w23, [x23, #3]
    44e4:	str	w0, [sp, #232]
    44e8:	lsl	x28, x28, x0
    44ec:	add	x24, x24, x23
    44f0:	lsr	x28, x28, x20
    44f4:	mov	x0, x24
    44f8:	add	x28, x19, x28, lsl #2
    44fc:	mov	x1, x28
    4500:	bl	0 <grub_memmove>
    4504:	ldr	w3, [sp, #232]
    4508:	mov	x2, #0x2                   	// #2
    450c:	ldrb	w0, [x28, #2]
    4510:	ldr	x23, [sp, #224]
    4514:	add	w0, w0, w3
    4518:	ldrb	w1, [x28, #3]
    451c:	str	w0, [sp, #232]
    4520:	lsl	x23, x23, x0
    4524:	add	x24, x24, x1
    4528:	lsr	x23, x23, x20
    452c:	mov	x0, x24
    4530:	add	x23, x19, x23, lsl #2
    4534:	mov	x1, x23
    4538:	bl	0 <grub_memmove>
    453c:	ldr	w3, [sp, #232]
    4540:	mov	x2, #0x2                   	// #2
    4544:	ldrb	w1, [x23, #2]
    4548:	ldr	x0, [sp, #224]
    454c:	add	w1, w1, w3
    4550:	ldrb	w23, [x23, #3]
    4554:	str	w1, [sp, #232]
    4558:	add	x23, x24, x23
    455c:	lsl	x24, x0, x1
    4560:	lsr	x24, x24, x20
    4564:	mov	x0, x23
    4568:	add	x24, x19, x24, lsl #2
    456c:	mov	x1, x24
    4570:	bl	0 <grub_memmove>
    4574:	ldr	w0, [sp, #232]
    4578:	ldrb	w1, [x24, #2]
    457c:	ldrb	w24, [x24, #3]
    4580:	add	w4, w1, w0
    4584:	str	w4, [sp, #232]
    4588:	add	x24, x23, x24
    458c:	cmp	w4, #0x40
    4590:	b.hi	46cc <FSE_decompress+0x312c>  // b.pmore
    4594:	ldr	x0, [sp, #240]
    4598:	lsr	w2, w4, #3
    459c:	ldr	x3, [sp, #256]
    45a0:	lsr	w6, w4, #3
    45a4:	sub	x2, x0, x2
    45a8:	cmp	x0, x3
    45ac:	b.cc	4474 <FSE_decompress+0x2ed4>  // b.lo, b.ul, b.last
    45b0:	cmp	x24, x21
    45b4:	and	w4, w4, #0x7
    45b8:	ldr	x1, [x2]
    45bc:	cset	w5, cc  // cc = lo, ul, last
    45c0:	str	x1, [sp, #224]
    45c4:	str	w4, [sp, #232]
    45c8:	str	x2, [sp, #240]
    45cc:	b	44ac <FSE_decompress+0x2f0c>
    45d0:	sub	x2, x0, w7, uxtw
    45d4:	mov	w6, w7
    45d8:	b	4498 <FSE_decompress+0x2ef8>
    45dc:	ldr	x1, [sp, #128]
    45e0:	sub	x20, x1, #0x2
    45e4:	ldr	w1, [sp, #108]
    45e8:	neg	w21, w1
    45ec:	and	w21, w21, #0x3f
    45f0:	b	4678 <FSE_decompress+0x30d8>
    45f4:	ldr	x1, [sp, #248]
    45f8:	lsr	w3, w4, #3
    45fc:	cmp	x0, x1
    4600:	b.eq	46d8 <FSE_decompress+0x3138>  // b.none
    4604:	sub	x6, x0, x1
    4608:	cmp	x1, x2
    460c:	mov	w5, #0x0                   	// #0
    4610:	b.hi	46a8 <FSE_decompress+0x3108>  // b.pmore
    4614:	cmp	x20, x24
    4618:	cset	w5, cs  // cs = hs, nlast
    461c:	ldr	x1, [x2]
    4620:	sub	w23, w4, w3, lsl #3
    4624:	str	x1, [sp, #224]
    4628:	str	w23, [sp, #232]
    462c:	str	x2, [sp, #240]
    4630:	mov	x0, x24
    4634:	mov	x2, #0x2                   	// #2
    4638:	cbz	w5, 46d8 <FSE_decompress+0x3138>
    463c:	lsl	x23, x1, x23
    4640:	lsr	x23, x23, x21
    4644:	add	x23, x19, x23, lsl #2
    4648:	mov	x1, x23
    464c:	bl	0 <grub_memmove>
    4650:	ldr	w1, [sp, #232]
    4654:	ldrb	w2, [x23, #2]
    4658:	ldrb	w0, [x23, #3]
    465c:	add	w4, w2, w1
    4660:	str	w4, [sp, #232]
    4664:	add	x24, x24, x0
    4668:	cmp	w4, #0x40
    466c:	b.hi	46d8 <FSE_decompress+0x3138>  // b.pmore
    4670:	ldr	x0, [sp, #240]
    4674:	ldr	x3, [sp, #256]
    4678:	lsr	w2, w4, #3
    467c:	cmp	x0, x3
    4680:	sub	x2, x0, x2
    4684:	b.cc	45f4 <FSE_decompress+0x3054>  // b.lo, b.ul, b.last
    4688:	cmp	x20, x24
    468c:	and	w23, w4, #0x7
    4690:	ldr	x1, [x2]
    4694:	cset	w5, cs  // cs = hs, nlast
    4698:	str	x1, [sp, #224]
    469c:	str	w23, [sp, #232]
    46a0:	str	x2, [sp, #240]
    46a4:	b	4630 <FSE_decompress+0x3090>
    46a8:	sub	x2, x0, w6, uxtw
    46ac:	mov	w3, w6
    46b0:	b	461c <FSE_decompress+0x307c>
    46b4:	ldr	x0, [sp, #128]
    46b8:	cmp	w4, #0x40
    46bc:	sub	x20, x0, #0x2
    46c0:	b.hi	46d8 <FSE_decompress+0x3138>  // b.pmore
    46c4:	ldr	x0, [sp, #240]
    46c8:	b	45e4 <FSE_decompress+0x3044>
    46cc:	ldr	x0, [sp, #128]
    46d0:	sub	x20, x0, #0x2
    46d4:	nop
    46d8:	cmp	x20, x24
    46dc:	b.cc	4730 <FSE_decompress+0x3190>  // b.lo, b.ul, b.last
    46e0:	ldr	w0, [sp, #108]
    46e4:	ldr	w1, [sp, #232]
    46e8:	neg	w21, w0
    46ec:	and	w21, w21, #0x3f
    46f0:	ldr	x23, [sp, #224]
    46f4:	mov	x0, x24
    46f8:	mov	x2, #0x2                   	// #2
    46fc:	lsl	x23, x23, x1
    4700:	lsr	x23, x23, x21
    4704:	add	x23, x19, x23, lsl #2
    4708:	mov	x1, x23
    470c:	bl	0 <grub_memmove>
    4710:	ldr	w2, [sp, #232]
    4714:	ldrb	w1, [x23, #2]
    4718:	ldrb	w0, [x23, #3]
    471c:	add	w1, w1, w2
    4720:	str	w1, [sp, #232]
    4724:	add	x24, x24, x0
    4728:	cmp	x24, x20
    472c:	b.ls	46f0 <FSE_decompress+0x3150>  // b.plast
    4730:	ldr	x0, [sp, #128]
    4734:	cmp	x0, x24
    4738:	b.hi	4c2c <FSE_decompress+0x368c>  // b.pmore
    473c:	ldr	w4, [sp, #272]
    4740:	cmp	w4, #0x40
    4744:	b.hi	49b0 <FSE_decompress+0x3410>  // b.pmore
    4748:	ldr	w0, [sp, #108]
    474c:	neg	w21, w0
    4750:	and	w21, w21, #0x3f
    4754:	b	4878 <FSE_decompress+0x32d8>
    4758:	ldr	x1, [sp, #288]
    475c:	cmp	x0, x1
    4760:	b.eq	48c0 <FSE_decompress+0x3320>  // b.none
    4764:	sub	x7, x0, x1
    4768:	cmp	x1, x2
    476c:	mov	w5, #0x0                   	// #0
    4770:	b.hi	48b4 <FSE_decompress+0x3314>  // b.pmore
    4774:	cmp	x27, x25
    4778:	cset	w5, hi  // hi = pmore
    477c:	ldr	x1, [x2]
    4780:	sub	w4, w4, w6, lsl #3
    4784:	str	x1, [sp, #264]
    4788:	str	w4, [sp, #272]
    478c:	str	x2, [sp, #280]
    4790:	mov	x0, x25
    4794:	mov	x2, #0x2                   	// #2
    4798:	cbz	w5, 4998 <FSE_decompress+0x33f8>
    479c:	lsl	x20, x1, x4
    47a0:	lsr	x20, x20, x21
    47a4:	add	x20, x19, x20, lsl #2
    47a8:	mov	x1, x20
    47ac:	bl	0 <grub_memmove>
    47b0:	ldr	w1, [sp, #272]
    47b4:	mov	x2, #0x2                   	// #2
    47b8:	ldrb	w0, [x20, #2]
    47bc:	ldr	x23, [sp, #264]
    47c0:	add	w0, w0, w1
    47c4:	ldrb	w20, [x20, #3]
    47c8:	str	w0, [sp, #272]
    47cc:	lsl	x23, x23, x0
    47d0:	add	x25, x25, x20
    47d4:	lsr	x23, x23, x21
    47d8:	mov	x0, x25
    47dc:	add	x23, x19, x23, lsl #2
    47e0:	mov	x1, x23
    47e4:	bl	0 <grub_memmove>
    47e8:	ldr	w3, [sp, #272]
    47ec:	mov	x2, #0x2                   	// #2
    47f0:	ldrb	w0, [x23, #2]
    47f4:	ldr	x20, [sp, #264]
    47f8:	add	w0, w0, w3
    47fc:	ldrb	w1, [x23, #3]
    4800:	str	w0, [sp, #272]
    4804:	lsl	x20, x20, x0
    4808:	add	x25, x25, x1
    480c:	lsr	x20, x20, x21
    4810:	mov	x0, x25
    4814:	add	x20, x19, x20, lsl #2
    4818:	mov	x1, x20
    481c:	bl	0 <grub_memmove>
    4820:	ldr	w1, [sp, #272]
    4824:	mov	x2, #0x2                   	// #2
    4828:	ldrb	w0, [x20, #2]
    482c:	ldr	x23, [sp, #264]
    4830:	add	w0, w0, w1
    4834:	ldrb	w20, [x20, #3]
    4838:	str	w0, [sp, #272]
    483c:	lsl	x23, x23, x0
    4840:	add	x20, x25, x20
    4844:	lsr	x23, x23, x21
    4848:	mov	x0, x20
    484c:	add	x23, x19, x23, lsl #2
    4850:	mov	x1, x23
    4854:	bl	0 <grub_memmove>
    4858:	ldr	w0, [sp, #272]
    485c:	ldrb	w1, [x23, #2]
    4860:	ldrb	w25, [x23, #3]
    4864:	add	w4, w1, w0
    4868:	str	w4, [sp, #272]
    486c:	add	x25, x20, x25
    4870:	cmp	w4, #0x40
    4874:	b.hi	49b0 <FSE_decompress+0x3410>  // b.pmore
    4878:	ldr	x0, [sp, #280]
    487c:	lsr	w2, w4, #3
    4880:	ldr	x3, [sp, #296]
    4884:	lsr	w6, w4, #3
    4888:	sub	x2, x0, x2
    488c:	cmp	x0, x3
    4890:	b.cc	4758 <FSE_decompress+0x31b8>  // b.lo, b.ul, b.last
    4894:	cmp	x27, x25
    4898:	and	w4, w4, #0x7
    489c:	ldr	x1, [x2]
    48a0:	cset	w5, hi  // hi = pmore
    48a4:	str	x1, [sp, #264]
    48a8:	str	w4, [sp, #272]
    48ac:	str	x2, [sp, #280]
    48b0:	b	4790 <FSE_decompress+0x31f0>
    48b4:	sub	x2, x0, w7, uxtw
    48b8:	mov	w6, w7
    48bc:	b	477c <FSE_decompress+0x31dc>
    48c0:	ldr	x1, [sp, #136]
    48c4:	sub	x21, x1, #0x2
    48c8:	ldr	w1, [sp, #108]
    48cc:	neg	w23, w1
    48d0:	and	w23, w23, #0x3f
    48d4:	b	495c <FSE_decompress+0x33bc>
    48d8:	ldr	x1, [sp, #288]
    48dc:	lsr	w3, w4, #3
    48e0:	cmp	x0, x1
    48e4:	b.eq	49b8 <FSE_decompress+0x3418>  // b.none
    48e8:	sub	x6, x0, x1
    48ec:	cmp	x1, x2
    48f0:	mov	w5, #0x0                   	// #0
    48f4:	b.hi	498c <FSE_decompress+0x33ec>  // b.pmore
    48f8:	cmp	x21, x25
    48fc:	cset	w5, cs  // cs = hs, nlast
    4900:	ldr	x1, [x2]
    4904:	sub	w20, w4, w3, lsl #3
    4908:	str	x1, [sp, #264]
    490c:	str	w20, [sp, #272]
    4910:	str	x2, [sp, #280]
    4914:	mov	x0, x25
    4918:	mov	x2, #0x2                   	// #2
    491c:	cbz	w5, 49b8 <FSE_decompress+0x3418>
    4920:	lsl	x20, x1, x20
    4924:	lsr	x20, x20, x23
    4928:	add	x20, x19, x20, lsl #2
    492c:	mov	x1, x20
    4930:	bl	0 <grub_memmove>
    4934:	ldr	w1, [sp, #272]
    4938:	ldrb	w2, [x20, #2]
    493c:	ldrb	w0, [x20, #3]
    4940:	add	w4, w2, w1
    4944:	str	w4, [sp, #272]
    4948:	add	x25, x25, x0
    494c:	cmp	w4, #0x40
    4950:	b.hi	49b8 <FSE_decompress+0x3418>  // b.pmore
    4954:	ldr	x0, [sp, #280]
    4958:	ldr	x3, [sp, #296]
    495c:	lsr	w2, w4, #3
    4960:	cmp	x0, x3
    4964:	sub	x2, x0, x2
    4968:	b.cc	48d8 <FSE_decompress+0x3338>  // b.lo, b.ul, b.last
    496c:	cmp	x21, x25
    4970:	and	w20, w4, #0x7
    4974:	ldr	x1, [x2]
    4978:	cset	w5, cs  // cs = hs, nlast
    497c:	str	x1, [sp, #264]
    4980:	str	w20, [sp, #272]
    4984:	str	x2, [sp, #280]
    4988:	b	4914 <FSE_decompress+0x3374>
    498c:	sub	x2, x0, w6, uxtw
    4990:	mov	w3, w6
    4994:	b	4900 <FSE_decompress+0x3360>
    4998:	ldr	x0, [sp, #136]
    499c:	cmp	w4, #0x40
    49a0:	sub	x21, x0, #0x2
    49a4:	b.hi	49b8 <FSE_decompress+0x3418>  // b.pmore
    49a8:	ldr	x0, [sp, #280]
    49ac:	b	48c8 <FSE_decompress+0x3328>
    49b0:	ldr	x0, [sp, #136]
    49b4:	sub	x21, x0, #0x2
    49b8:	cmp	x21, x25
    49bc:	b.cc	4a10 <FSE_decompress+0x3470>  // b.lo, b.ul, b.last
    49c0:	ldr	w0, [sp, #108]
    49c4:	ldr	w1, [sp, #272]
    49c8:	neg	w23, w0
    49cc:	and	w23, w23, #0x3f
    49d0:	ldr	x20, [sp, #264]
    49d4:	mov	x0, x25
    49d8:	mov	x2, #0x2                   	// #2
    49dc:	lsl	x20, x20, x1
    49e0:	lsr	x20, x20, x23
    49e4:	add	x20, x19, x20, lsl #2
    49e8:	mov	x1, x20
    49ec:	bl	0 <grub_memmove>
    49f0:	ldr	w2, [sp, #272]
    49f4:	ldrb	w1, [x20, #2]
    49f8:	ldrb	w0, [x20, #3]
    49fc:	add	w1, w1, w2
    4a00:	str	w1, [sp, #272]
    4a04:	add	x25, x25, x0
    4a08:	cmp	x25, x21
    4a0c:	b.ls	49d0 <FSE_decompress+0x3430>  // b.plast
    4a10:	ldr	x0, [sp, #136]
    4a14:	cmp	x0, x25
    4a18:	b.hi	4b6c <FSE_decompress+0x35cc>  // b.pmore
    4a1c:	ldp	x2, x1, [sp, #160]
    4a20:	mov	w0, #0x0                   	// #0
    4a24:	cmp	x2, x1
    4a28:	b.eq	4cfc <FSE_decompress+0x375c>  // b.none
    4a2c:	ldp	x2, x1, [sp, #200]
    4a30:	cmp	x2, x1
    4a34:	b.eq	4cec <FSE_decompress+0x374c>  // b.none
    4a38:	mov	w0, #0x0                   	// #0
    4a3c:	ldp	x2, x1, [sp, #240]
    4a40:	cmp	x2, x1
    4a44:	b.ne	3290 <FSE_decompress+0x1cf0>  // b.any
    4a48:	ldr	w1, [sp, #232]
    4a4c:	cmp	w1, #0x40
    4a50:	b.ne	3290 <FSE_decompress+0x1cf0>  // b.any
    4a54:	ldp	x2, x1, [sp, #280]
    4a58:	cmp	x2, x1
    4a5c:	b.ne	3290 <FSE_decompress+0x1cf0>  // b.any
    4a60:	ldr	w1, [sp, #272]
    4a64:	cmp	w1, #0x40
    4a68:	b.ne	3290 <FSE_decompress+0x1cf0>  // b.any
    4a6c:	cbz	w0, 3290 <FSE_decompress+0x1cf0>
    4a70:	ldr	x24, [sp, #112]
    4a74:	b	3294 <FSE_decompress+0x1cf4>
    4a78:	lsr	w0, w7, #3
    4a7c:	and	w7, w7, #0x7
    4a80:	sub	x13, x13, x0
    4a84:	ldr	x0, [x13]
    4a88:	str	x0, [sp, #264]
    4a8c:	str	w7, [sp, #272]
    4a90:	str	x13, [sp, #280]
    4a94:	b	3538 <FSE_decompress+0x1f98>
    4a98:	lsr	w3, w1, #3
    4a9c:	mov	w12, #0x0                   	// #0
    4aa0:	sub	x15, x15, x3
    4aa4:	and	w1, w1, #0x7
    4aa8:	ldr	x3, [x15]
    4aac:	str	x3, [sp, #144]
    4ab0:	str	w1, [sp, #152]
    4ab4:	str	x15, [sp, #160]
    4ab8:	b	3428 <FSE_decompress+0x1e88>
    4abc:	lsr	w2, w5, #3
    4ac0:	and	w5, w5, #0x7
    4ac4:	sub	x11, x11, x2
    4ac8:	ldr	x2, [x11]
    4acc:	str	x2, [sp, #224]
    4ad0:	str	w5, [sp, #232]
    4ad4:	str	x11, [sp, #240]
    4ad8:	b	34c8 <FSE_decompress+0x1f28>
    4adc:	lsr	w2, w3, #3
    4ae0:	and	w3, w3, #0x7
    4ae4:	sub	x8, x8, x2
    4ae8:	ldr	x2, [x8]
    4aec:	str	x2, [sp, #184]
    4af0:	str	w3, [sp, #192]
    4af4:	str	x8, [sp, #200]
    4af8:	b	3480 <FSE_decompress+0x1ee0>
    4afc:	add	x0, sp, #0x108
    4b00:	mov	x2, #0x28                  	// #40
    4b04:	mov	w1, #0x0                   	// #0
    4b08:	mov	x24, #0xffffffffffffffb8    	// #-72
    4b0c:	bl	0 <grub_memset>
    4b10:	b	3294 <FSE_decompress+0x1cf4>
    4b14:	mov	w12, #0x3                   	// #3
    4b18:	b	3480 <FSE_decompress+0x1ee0>
    4b1c:	cmp	w1, #0x40
    4b20:	cset	w12, eq  // eq = none
    4b24:	add	w12, w12, #0x1
    4b28:	b	3428 <FSE_decompress+0x1e88>
    4b2c:	orr	w2, w12, #0x1
    4b30:	cmp	w5, #0x40
    4b34:	orr	w12, w12, #0x2
    4b38:	csel	w12, w12, w2, eq  // eq = none
    4b3c:	b	34c8 <FSE_decompress+0x1f28>
    4b40:	orr	w2, w12, #0x1
    4b44:	cmp	w3, #0x40
    4b48:	orr	w12, w12, #0x2
    4b4c:	csel	w12, w12, w2, eq  // eq = none
    4b50:	b	3480 <FSE_decompress+0x1ee0>
    4b54:	ldr	x0, [sp, #136]
    4b58:	mov	x25, x2
    4b5c:	mov	x23, x3
    4b60:	mov	x24, x28
    4b64:	sub	x27, x0, #0x7
    4b68:	b	3da8 <FSE_decompress+0x2808>
    4b6c:	ldr	x1, [sp, #264]
    4b70:	mov	x2, #0x1                   	// #1
    4b74:	ldr	w0, [sp, #108]
    4b78:	ldr	w3, [sp, #272]
    4b7c:	neg	w26, w0
    4b80:	mov	x0, x25
    4b84:	lsl	x1, x1, x3
    4b88:	lsr	x1, x1, x26
    4b8c:	add	x19, x19, x1, lsl #2
    4b90:	mov	x1, x19
    4b94:	bl	0 <grub_memmove>
    4b98:	ldrb	w0, [x19, #3]
    4b9c:	cmp	w0, #0x1
    4ba0:	b.eq	4d48 <FSE_decompress+0x37a8>  // b.none
    4ba4:	ldr	w1, [sp, #272]
    4ba8:	cmp	w1, #0x3f
    4bac:	b.hi	4a1c <FSE_decompress+0x347c>  // b.pmore
    4bb0:	ldrb	w0, [x19, #2]
    4bb4:	add	w0, w0, w1
    4bb8:	cmp	w0, #0x40
    4bbc:	b.ls	4bc4 <FSE_decompress+0x3624>  // b.plast
    4bc0:	mov	w0, #0x40                  	// #64
    4bc4:	str	w0, [sp, #272]
    4bc8:	b	4a1c <FSE_decompress+0x347c>
    4bcc:	ldr	x1, [sp, #144]
    4bd0:	mov	x2, #0x1                   	// #1
    4bd4:	ldr	w0, [sp, #108]
    4bd8:	ldr	w4, [sp, #152]
    4bdc:	neg	w3, w0
    4be0:	mov	x0, x20
    4be4:	lsl	x20, x1, x4
    4be8:	lsr	x20, x20, x3
    4bec:	add	x20, x19, x20, lsl #2
    4bf0:	mov	x1, x20
    4bf4:	bl	0 <grub_memmove>
    4bf8:	ldrb	w0, [x20, #3]
    4bfc:	cmp	w0, #0x1
    4c00:	b.eq	4d34 <FSE_decompress+0x3794>  // b.none
    4c04:	ldr	w1, [sp, #152]
    4c08:	cmp	w1, #0x3f
    4c0c:	b.hi	416c <FSE_decompress+0x2bcc>  // b.pmore
    4c10:	ldrb	w0, [x20, #2]
    4c14:	add	w0, w0, w1
    4c18:	cmp	w0, #0x40
    4c1c:	b.ls	4c24 <FSE_decompress+0x3684>  // b.plast
    4c20:	mov	w0, #0x40                  	// #64
    4c24:	str	w0, [sp, #152]
    4c28:	b	416c <FSE_decompress+0x2bcc>
    4c2c:	ldr	x20, [sp, #224]
    4c30:	mov	x2, #0x1                   	// #1
    4c34:	ldr	w0, [sp, #108]
    4c38:	ldr	w3, [sp, #232]
    4c3c:	neg	w1, w0
    4c40:	mov	x0, x24
    4c44:	lsl	x20, x20, x3
    4c48:	lsr	x20, x20, x1
    4c4c:	add	x20, x19, x20, lsl #2
    4c50:	mov	x1, x20
    4c54:	bl	0 <grub_memmove>
    4c58:	ldrb	w0, [x20, #3]
    4c5c:	cmp	w0, #0x1
    4c60:	b.eq	4d20 <FSE_decompress+0x3780>  // b.none
    4c64:	ldr	w1, [sp, #232]
    4c68:	cmp	w1, #0x3f
    4c6c:	b.hi	473c <FSE_decompress+0x319c>  // b.pmore
    4c70:	ldrb	w0, [x20, #2]
    4c74:	add	w0, w0, w1
    4c78:	cmp	w0, #0x40
    4c7c:	b.ls	4c84 <FSE_decompress+0x36e4>  // b.plast
    4c80:	mov	w0, #0x40                  	// #64
    4c84:	str	w0, [sp, #232]
    4c88:	b	473c <FSE_decompress+0x319c>
    4c8c:	ldr	x20, [sp, #184]
    4c90:	mov	x2, #0x1                   	// #1
    4c94:	ldr	w0, [sp, #108]
    4c98:	ldr	w3, [sp, #192]
    4c9c:	neg	w1, w0
    4ca0:	mov	x0, x23
    4ca4:	lsl	x20, x20, x3
    4ca8:	lsr	x20, x20, x1
    4cac:	add	x20, x19, x20, lsl #2
    4cb0:	mov	x1, x20
    4cb4:	bl	0 <grub_memmove>
    4cb8:	ldrb	w0, [x20, #3]
    4cbc:	cmp	w0, #0x1
    4cc0:	b.eq	4d0c <FSE_decompress+0x376c>  // b.none
    4cc4:	ldr	w1, [sp, #192]
    4cc8:	cmp	w1, #0x3f
    4ccc:	b.hi	4450 <FSE_decompress+0x2eb0>  // b.pmore
    4cd0:	ldrb	w0, [x20, #2]
    4cd4:	add	w0, w0, w1
    4cd8:	cmp	w0, #0x40
    4cdc:	b.ls	4ce4 <FSE_decompress+0x3744>  // b.plast
    4ce0:	mov	w0, #0x40                  	// #64
    4ce4:	str	w0, [sp, #192]
    4ce8:	b	4450 <FSE_decompress+0x2eb0>
    4cec:	ldr	w1, [sp, #192]
    4cf0:	cmp	w1, #0x40
    4cf4:	csel	w0, w0, wzr, eq  // eq = none
    4cf8:	b	4a3c <FSE_decompress+0x349c>
    4cfc:	ldr	w0, [sp, #152]
    4d00:	cmp	w0, #0x40
    4d04:	cset	w0, eq  // eq = none
    4d08:	b	4a2c <FSE_decompress+0x348c>
    4d0c:	ldrb	w1, [x20, #2]
    4d10:	ldr	w0, [sp, #192]
    4d14:	add	w0, w0, w1
    4d18:	str	w0, [sp, #192]
    4d1c:	b	4450 <FSE_decompress+0x2eb0>
    4d20:	ldrb	w1, [x20, #2]
    4d24:	ldr	w0, [sp, #232]
    4d28:	add	w0, w0, w1
    4d2c:	str	w0, [sp, #232]
    4d30:	b	473c <FSE_decompress+0x319c>
    4d34:	ldrb	w1, [x20, #2]
    4d38:	ldr	w0, [sp, #152]
    4d3c:	add	w0, w0, w1
    4d40:	str	w0, [sp, #152]
    4d44:	b	416c <FSE_decompress+0x2bcc>
    4d48:	ldrb	w1, [x19, #2]
    4d4c:	ldr	w0, [sp, #272]
    4d50:	add	w0, w0, w1
    4d54:	str	w0, [sp, #272]
    4d58:	b	4a1c <FSE_decompress+0x347c>
    4d5c:	nop

0000000000004d60 <HUF_readDTableX1_wksp>:
    4d60:	stp	x29, x30, [sp, #-64]!
    4d64:	cmp	x4, #0x13f
    4d68:	mov	x29, sp
    4d6c:	stp	x21, x22, [sp, #32]
    4d70:	mov	x22, #0xffffffffffffffd4    	// #-44
    4d74:	stp	wzr, wzr, [sp, #56]
    4d78:	b.ls	4dbc <HUF_readDTableX1_wksp+0x5c>  // b.plast
    4d7c:	add	x21, x3, #0x40
    4d80:	stp	x19, x20, [sp, #16]
    4d84:	mov	x20, x3
    4d88:	mov	x5, x1
    4d8c:	mov	x6, x2
    4d90:	mov	x19, x0
    4d94:	add	x4, sp, #0x38
    4d98:	mov	x0, x21
    4d9c:	add	x3, sp, #0x3c
    4da0:	mov	x2, x20
    4da4:	mov	x1, #0x100                 	// #256
    4da8:	bl	438 <HUF_readStats>
    4dac:	mov	x22, x0
    4db0:	cmn	x0, #0x78
    4db4:	b.ls	4dcc <HUF_readDTableX1_wksp+0x6c>  // b.plast
    4db8:	ldp	x19, x20, [sp, #16]
    4dbc:	mov	x0, x22
    4dc0:	ldp	x21, x22, [sp, #32]
    4dc4:	ldp	x29, x30, [sp], #64
    4dc8:	ret
    4dcc:	add	x0, sp, #0x30
    4dd0:	mov	x1, x19
    4dd4:	mov	x2, #0x4                   	// #4
    4dd8:	bl	0 <grub_memmove>
    4ddc:	ldrb	w0, [sp, #48]
    4de0:	ldr	w3, [sp, #56]
    4de4:	strb	w0, [sp, #48]
    4de8:	add	w0, w0, #0x1
    4dec:	cmp	w0, w3
    4df0:	b.cc	4f80 <HUF_readDTableX1_wksp+0x220>  // b.lo, b.ul, b.last
    4df4:	add	x1, sp, #0x30
    4df8:	mov	x0, x19
    4dfc:	mov	x2, #0x4                   	// #4
    4e00:	strb	wzr, [sp, #49]
    4e04:	strb	w3, [sp, #50]
    4e08:	bl	0 <grub_memmove>
    4e0c:	ldr	w5, [sp, #56]
    4e10:	add	w13, w5, #0x1
    4e14:	cmp	w13, #0x1
    4e18:	b.ls	4e4c <HUF_readDTableX1_wksp+0xec>  // b.plast
    4e1c:	sub	w5, w5, #0x1
    4e20:	add	x3, x20, #0x4
    4e24:	mov	x1, #0x0                   	// #0
    4e28:	mov	w2, #0x0                   	// #0
    4e2c:	nop
    4e30:	ldr	w0, [x3, x1, lsl #2]
    4e34:	cmp	x1, x5
    4e38:	str	w2, [x3, x1, lsl #2]
    4e3c:	lsl	w0, w0, w1
    4e40:	add	x1, x1, #0x1
    4e44:	add	w2, w2, w0
    4e48:	b.ne	4e30 <HUF_readDTableX1_wksp+0xd0>  // b.any
    4e4c:	ldr	w14, [sp, #60]
    4e50:	and	w13, w13, #0xff
    4e54:	add	x16, x19, #0x6
    4e58:	mov	x8, #0x0                   	// #0
    4e5c:	mov	w15, #0x1                   	// #1
    4e60:	mov	x12, #0x4                   	// #4
    4e64:	cbz	w14, 4db8 <HUF_readDTableX1_wksp+0x58>
    4e68:	ldrb	w11, [x21, x8]
    4e6c:	and	w0, w8, #0xff
    4e70:	sub	w7, w13, w11
    4e74:	lsl	w4, w15, w11
    4e78:	and	w7, w7, #0xff
    4e7c:	ldr	w6, [x20, x11, lsl #2]
    4e80:	asr	w4, w4, #1
    4e84:	add	w17, w4, w6
    4e88:	cmp	w6, w17
    4e8c:	b.cs	4f48 <HUF_readDTableX1_wksp+0x1e8>  // b.hs, b.nlast
    4e90:	mov	w5, w6
    4e94:	sub	w3, w4, #0x1
    4e98:	add	x1, x5, #0x2
    4e9c:	add	x2, x19, x1, lsl #1
    4ea0:	tst	x2, #0x7
    4ea4:	ccmp	w3, #0x9, #0x0, eq  // eq = none
    4ea8:	b.ls	4f5c <HUF_readDTableX1_wksp+0x1fc>  // b.plast
    4eac:	mov	x3, x0
    4eb0:	mov	x5, #0x0                   	// #0
    4eb4:	mov	x10, x7
    4eb8:	lsr	w9, w4, #2
    4ebc:	bfxil	x5, x3, #0, #8
    4ec0:	mov	x1, #0x0                   	// #0
    4ec4:	bfi	x5, x10, #8, #8
    4ec8:	bfi	x5, x3, #16, #8
    4ecc:	bfi	x5, x10, #24, #8
    4ed0:	bfi	x5, x3, #32, #8
    4ed4:	bfi	x5, x10, #40, #8
    4ed8:	bfi	x5, x3, #48, #8
    4edc:	bfi	x5, x10, #56, #8
    4ee0:	str	x5, [x2, x1, lsl #3]
    4ee4:	add	x1, x1, #0x1
    4ee8:	cmp	w9, w1
    4eec:	b.hi	4ee0 <HUF_readDTableX1_wksp+0x180>  // b.pmore
    4ef0:	and	w1, w4, #0xfffffffc
    4ef4:	add	w6, w6, w1
    4ef8:	cmp	w4, w1
    4efc:	b.eq	4f48 <HUF_readDTableX1_wksp+0x1e8>  // b.none
    4f00:	add	x2, x12, w6, uxtw #1
    4f04:	add	w1, w6, #0x1
    4f08:	add	x3, x19, x2
    4f0c:	cmp	w1, w17
    4f10:	strb	w0, [x19, x2]
    4f14:	strb	w7, [x3, #1]
    4f18:	b.cs	4f48 <HUF_readDTableX1_wksp+0x1e8>  // b.hs, b.nlast
    4f1c:	add	x1, x12, w1, uxtw #1
    4f20:	add	w6, w6, #0x2
    4f24:	add	x2, x19, x1
    4f28:	cmp	w6, w17
    4f2c:	strb	w0, [x19, x1]
    4f30:	strb	w7, [x2, #1]
    4f34:	b.cs	4f48 <HUF_readDTableX1_wksp+0x1e8>  // b.hs, b.nlast
    4f38:	add	x6, x12, w6, uxtw #1
    4f3c:	add	x1, x19, x6
    4f40:	strb	w0, [x19, x6]
    4f44:	strb	w7, [x1, #1]
    4f48:	str	w17, [x20, x11, lsl #2]
    4f4c:	add	x8, x8, #0x1
    4f50:	cmp	w14, w8
    4f54:	b.hi	4e68 <HUF_readDTableX1_wksp+0x108>  // b.pmore
    4f58:	b	4db8 <HUF_readDTableX1_wksp+0x58>
    4f5c:	add	x3, x5, w3, uxtw
    4f60:	mov	x1, x2
    4f64:	add	x2, x16, x3, lsl #1
    4f68:	strb	w0, [x1]
    4f6c:	add	x1, x1, #0x2
    4f70:	sturb	w7, [x1, #-1]
    4f74:	cmp	x1, x2
    4f78:	b.ne	4f68 <HUF_readDTableX1_wksp+0x208>  // b.any
    4f7c:	b	4f48 <HUF_readDTableX1_wksp+0x1e8>
    4f80:	mov	x22, #0xffffffffffffffd4    	// #-44
    4f84:	mov	x0, x22
    4f88:	ldp	x19, x20, [sp, #16]
    4f8c:	ldp	x21, x22, [sp, #32]
    4f90:	ldp	x29, x30, [sp], #64
    4f94:	ret

0000000000004f98 <HUF_decompress4X1>:
    4f98:	mov	x12, #0x2840                	// #10304
    4f9c:	sub	sp, sp, x12
    4fa0:	stp	x29, x30, [sp]
    4fa4:	mov	x29, sp
    4fa8:	stp	x19, x20, [sp, #16]
    4fac:	mov	x19, x3
    4fb0:	mov	x20, x2
    4fb4:	mov	x2, #0x2004                	// #8196
    4fb8:	stp	x21, x22, [sp, #32]
    4fbc:	mov	x21, x0
    4fc0:	mov	x22, x1
    4fc4:	add	x0, sp, #0x838
    4fc8:	mov	w1, #0x0                   	// #0
    4fcc:	bl	0 <memset>
    4fd0:	mov	w5, #0xb                   	// #11
    4fd4:	mov	x2, x19
    4fd8:	movk	w5, #0xb00, lsl #16
    4fdc:	mov	x1, x20
    4fe0:	add	x0, sp, #0x838
    4fe4:	add	x3, sp, #0x38
    4fe8:	mov	x4, #0x800                 	// #2048
    4fec:	str	w5, [sp, #2104]
    4ff0:	bl	4d60 <HUF_readDTableX1_wksp>
    4ff4:	cmn	x0, #0x78
    4ff8:	b.hi	5024 <HUF_decompress4X1+0x8c>  // b.pmore
    4ffc:	cmp	x19, x0
    5000:	b.ls	5058 <HUF_decompress4X1+0xc0>  // b.plast
    5004:	sub	x3, x19, x0
    5008:	cmp	x3, #0x9
    500c:	b.ls	503c <HUF_decompress4X1+0xa4>  // b.plast
    5010:	add	x2, x20, x0
    5014:	add	x4, sp, #0x838
    5018:	mov	x1, x22
    501c:	mov	x0, x21
    5020:	bl	1e98 <FSE_decompress+0x8f8>
    5024:	mov	x12, #0x2840                	// #10304
    5028:	ldp	x29, x30, [sp]
    502c:	ldp	x19, x20, [sp, #16]
    5030:	ldp	x21, x22, [sp, #32]
    5034:	add	sp, sp, x12
    5038:	ret
    503c:	mov	x0, #0xffffffffffffffec    	// #-20
    5040:	mov	x12, #0x2840                	// #10304
    5044:	ldp	x29, x30, [sp]
    5048:	ldp	x19, x20, [sp, #16]
    504c:	ldp	x21, x22, [sp, #32]
    5050:	add	sp, sp, x12
    5054:	ret
    5058:	mov	x0, #0xffffffffffffffb8    	// #-72
    505c:	mov	x12, #0x2840                	// #10304
    5060:	ldp	x29, x30, [sp]
    5064:	ldp	x19, x20, [sp, #16]
    5068:	ldp	x21, x22, [sp, #32]
    506c:	add	sp, sp, x12
    5070:	ret
    5074:	nop

0000000000005078 <HUF_readDTableX1>:
    5078:	sub	sp, sp, #0x810
    507c:	mov	x4, #0x800                 	// #2048
    5080:	add	x3, sp, #0x10
    5084:	stp	x29, x30, [sp]
    5088:	mov	x29, sp
    508c:	bl	4d60 <HUF_readDTableX1_wksp>
    5090:	ldp	x29, x30, [sp]
    5094:	add	sp, sp, #0x810
    5098:	ret
    509c:	nop

00000000000050a0 <HUF_decompress1X1_usingDTable>:
    50a0:	stp	x29, x30, [sp, #-80]!
    50a4:	mov	x29, sp
    50a8:	stp	x19, x20, [sp, #16]
    50ac:	mov	x19, x4
    50b0:	mov	x20, x0
    50b4:	add	x0, sp, #0x48
    50b8:	stp	x21, x22, [sp, #32]
    50bc:	mov	x21, x1
    50c0:	mov	x22, x2
    50c4:	mov	x1, x4
    50c8:	mov	x2, #0x4                   	// #4
    50cc:	str	x23, [sp, #48]
    50d0:	mov	x23, x3
    50d4:	bl	0 <grub_memmove>
    50d8:	ldrb	w0, [sp, #73]
    50dc:	cbnz	w0, 510c <HUF_decompress1X1_usingDTable+0x6c>
    50e0:	mov	x4, x19
    50e4:	mov	x3, x23
    50e8:	mov	x2, x22
    50ec:	mov	x1, x21
    50f0:	mov	x0, x20
    50f4:	bl	16a0 <FSE_decompress+0x100>
    50f8:	ldp	x19, x20, [sp, #16]
    50fc:	ldp	x21, x22, [sp, #32]
    5100:	ldr	x23, [sp, #48]
    5104:	ldp	x29, x30, [sp], #80
    5108:	ret
    510c:	mov	x0, #0xffffffffffffffff    	// #-1
    5110:	ldp	x19, x20, [sp, #16]
    5114:	ldp	x21, x22, [sp, #32]
    5118:	ldr	x23, [sp, #48]
    511c:	ldp	x29, x30, [sp], #80
    5120:	ret
    5124:	nop

0000000000005128 <HUF_decompress1X1_DCtx_wksp>:
    5128:	stp	x29, x30, [sp, #-64]!
    512c:	mov	x29, sp
    5130:	stp	x19, x20, [sp, #16]
    5134:	mov	x20, x3
    5138:	mov	x19, x4
    513c:	mov	x3, x5
    5140:	mov	x4, x6
    5144:	stp	x21, x22, [sp, #32]
    5148:	mov	x21, x1
    514c:	mov	x22, x2
    5150:	mov	x1, x20
    5154:	mov	x2, x19
    5158:	str	x23, [sp, #48]
    515c:	mov	x23, x0
    5160:	bl	4d60 <HUF_readDTableX1_wksp>
    5164:	cmn	x0, #0x78
    5168:	b.hi	51a0 <HUF_decompress1X1_DCtx_wksp+0x78>  // b.pmore
    516c:	cmp	x19, x0
    5170:	b.ls	519c <HUF_decompress1X1_DCtx_wksp+0x74>  // b.plast
    5174:	sub	x3, x19, x0
    5178:	add	x2, x20, x0
    517c:	mov	x4, x23
    5180:	mov	x1, x22
    5184:	mov	x0, x21
    5188:	ldp	x19, x20, [sp, #16]
    518c:	ldp	x21, x22, [sp, #32]
    5190:	ldr	x23, [sp, #48]
    5194:	ldp	x29, x30, [sp], #64
    5198:	b	16a0 <FSE_decompress+0x100>
    519c:	mov	x0, #0xffffffffffffffb8    	// #-72
    51a0:	ldp	x19, x20, [sp, #16]
    51a4:	ldp	x21, x22, [sp, #32]
    51a8:	ldr	x23, [sp, #48]
    51ac:	ldp	x29, x30, [sp], #64
    51b0:	ret
    51b4:	nop

00000000000051b8 <HUF_decompress1X1_DCtx>:
    51b8:	sub	sp, sp, #0x840
    51bc:	stp	x29, x30, [sp]
    51c0:	mov	x29, sp
    51c4:	stp	x19, x20, [sp, #16]
    51c8:	mov	x20, x3
    51cc:	mov	x19, x4
    51d0:	stp	x21, x22, [sp, #32]
    51d4:	mov	x21, x1
    51d8:	mov	x22, x2
    51dc:	mov	x1, x3
    51e0:	mov	x2, x4
    51e4:	add	x3, sp, #0x40
    51e8:	mov	x4, #0x800                 	// #2048
    51ec:	str	x23, [sp, #48]
    51f0:	mov	x23, x0
    51f4:	bl	4d60 <HUF_readDTableX1_wksp>
    51f8:	cmn	x0, #0x78
    51fc:	b.hi	5220 <HUF_decompress1X1_DCtx+0x68>  // b.pmore
    5200:	cmp	x19, x0
    5204:	b.ls	5238 <HUF_decompress1X1_DCtx+0x80>  // b.plast
    5208:	sub	x3, x19, x0
    520c:	add	x2, x20, x0
    5210:	mov	x4, x23
    5214:	mov	x1, x22
    5218:	mov	x0, x21
    521c:	bl	16a0 <FSE_decompress+0x100>
    5220:	ldp	x29, x30, [sp]
    5224:	ldp	x19, x20, [sp, #16]
    5228:	ldp	x21, x22, [sp, #32]
    522c:	ldr	x23, [sp, #48]
    5230:	add	sp, sp, #0x840
    5234:	ret
    5238:	mov	x0, #0xffffffffffffffb8    	// #-72
    523c:	ldp	x29, x30, [sp]
    5240:	ldp	x19, x20, [sp, #16]
    5244:	ldp	x21, x22, [sp, #32]
    5248:	ldr	x23, [sp, #48]
    524c:	add	sp, sp, #0x840
    5250:	ret
    5254:	nop

0000000000005258 <HUF_decompress1X1>:
    5258:	mov	x12, #0x2840                	// #10304
    525c:	sub	sp, sp, x12
    5260:	stp	x29, x30, [sp]
    5264:	mov	x29, sp
    5268:	stp	x19, x20, [sp, #16]
    526c:	mov	x19, x3
    5270:	mov	x20, x2
    5274:	mov	x2, #0x2004                	// #8196
    5278:	stp	x21, x22, [sp, #32]
    527c:	mov	x21, x0
    5280:	mov	x22, x1
    5284:	add	x0, sp, #0x838
    5288:	mov	w1, #0x0                   	// #0
    528c:	bl	0 <memset>
    5290:	mov	w5, #0xb                   	// #11
    5294:	mov	x2, x19
    5298:	movk	w5, #0xb00, lsl #16
    529c:	mov	x1, x20
    52a0:	add	x0, sp, #0x838
    52a4:	add	x3, sp, #0x38
    52a8:	mov	x4, #0x800                 	// #2048
    52ac:	str	w5, [sp, #2104]
    52b0:	bl	4d60 <HUF_readDTableX1_wksp>
    52b4:	cmn	x0, #0x78
    52b8:	b.hi	52dc <HUF_decompress1X1+0x84>  // b.pmore
    52bc:	cmp	x19, x0
    52c0:	b.ls	52f4 <HUF_decompress1X1+0x9c>  // b.plast
    52c4:	sub	x3, x19, x0
    52c8:	add	x2, x20, x0
    52cc:	add	x4, sp, #0x838
    52d0:	mov	x1, x22
    52d4:	mov	x0, x21
    52d8:	bl	16a0 <FSE_decompress+0x100>
    52dc:	mov	x12, #0x2840                	// #10304
    52e0:	ldp	x29, x30, [sp]
    52e4:	ldp	x19, x20, [sp, #16]
    52e8:	ldp	x21, x22, [sp, #32]
    52ec:	add	sp, sp, x12
    52f0:	ret
    52f4:	mov	x0, #0xffffffffffffffb8    	// #-72
    52f8:	mov	x12, #0x2840                	// #10304
    52fc:	ldp	x29, x30, [sp]
    5300:	ldp	x19, x20, [sp, #16]
    5304:	ldp	x21, x22, [sp, #32]
    5308:	add	sp, sp, x12
    530c:	ret

0000000000005310 <HUF_decompress4X1_usingDTable>:
    5310:	stp	x29, x30, [sp, #-80]!
    5314:	mov	x29, sp
    5318:	stp	x19, x20, [sp, #16]
    531c:	mov	x19, x4
    5320:	mov	x20, x3
    5324:	stp	x21, x22, [sp, #32]
    5328:	mov	x21, x0
    532c:	mov	x22, x1
    5330:	add	x0, sp, #0x48
    5334:	mov	x1, x4
    5338:	str	x23, [sp, #48]
    533c:	mov	x23, x2
    5340:	mov	x2, #0x4                   	// #4
    5344:	bl	0 <grub_memmove>
    5348:	ldrb	w0, [sp, #73]
    534c:	cbnz	w0, 5388 <HUF_decompress4X1_usingDTable+0x78>
    5350:	cmp	x20, #0x9
    5354:	mov	x0, #0xffffffffffffffec    	// #-20
    5358:	b.ls	5374 <HUF_decompress4X1_usingDTable+0x64>  // b.plast
    535c:	mov	x4, x19
    5360:	mov	x3, x20
    5364:	mov	x2, x23
    5368:	mov	x1, x22
    536c:	mov	x0, x21
    5370:	bl	1e98 <FSE_decompress+0x8f8>
    5374:	ldp	x19, x20, [sp, #16]
    5378:	ldp	x21, x22, [sp, #32]
    537c:	ldr	x23, [sp, #48]
    5380:	ldp	x29, x30, [sp], #80
    5384:	ret
    5388:	mov	x0, #0xffffffffffffffff    	// #-1
    538c:	ldp	x19, x20, [sp, #16]
    5390:	ldp	x21, x22, [sp, #32]
    5394:	ldr	x23, [sp, #48]
    5398:	ldp	x29, x30, [sp], #80
    539c:	ret

00000000000053a0 <HUF_decompress4X1_DCtx_wksp>:
    53a0:	stp	x29, x30, [sp, #-64]!
    53a4:	mov	x29, sp
    53a8:	stp	x19, x20, [sp, #16]
    53ac:	mov	x20, x3
    53b0:	mov	x19, x4
    53b4:	mov	x3, x5
    53b8:	mov	x4, x6
    53bc:	stp	x21, x22, [sp, #32]
    53c0:	mov	x21, x1
    53c4:	mov	x22, x2
    53c8:	mov	x1, x20
    53cc:	mov	x2, x19
    53d0:	str	x23, [sp, #48]
    53d4:	mov	x23, x0
    53d8:	bl	4d60 <HUF_readDTableX1_wksp>
    53dc:	cmn	x0, #0x78
    53e0:	b.hi	5420 <HUF_decompress4X1_DCtx_wksp+0x80>  // b.pmore
    53e4:	cmp	x19, x0
    53e8:	b.ls	5434 <HUF_decompress4X1_DCtx_wksp+0x94>  // b.plast
    53ec:	sub	x3, x19, x0
    53f0:	cmp	x3, #0x9
    53f4:	b.ls	541c <HUF_decompress4X1_DCtx_wksp+0x7c>  // b.plast
    53f8:	add	x2, x20, x0
    53fc:	mov	x4, x23
    5400:	mov	x1, x22
    5404:	mov	x0, x21
    5408:	ldp	x19, x20, [sp, #16]
    540c:	ldp	x21, x22, [sp, #32]
    5410:	ldr	x23, [sp, #48]
    5414:	ldp	x29, x30, [sp], #64
    5418:	b	1e98 <FSE_decompress+0x8f8>
    541c:	mov	x0, #0xffffffffffffffec    	// #-20
    5420:	ldp	x19, x20, [sp, #16]
    5424:	ldp	x21, x22, [sp, #32]
    5428:	ldr	x23, [sp, #48]
    542c:	ldp	x29, x30, [sp], #64
    5430:	ret
    5434:	mov	x0, #0xffffffffffffffb8    	// #-72
    5438:	ldp	x19, x20, [sp, #16]
    543c:	ldp	x21, x22, [sp, #32]
    5440:	ldr	x23, [sp, #48]
    5444:	ldp	x29, x30, [sp], #64
    5448:	ret
    544c:	nop

0000000000005450 <HUF_decompress4X1_DCtx>:
    5450:	sub	sp, sp, #0x840
    5454:	stp	x29, x30, [sp]
    5458:	mov	x29, sp
    545c:	stp	x19, x20, [sp, #16]
    5460:	mov	x20, x3
    5464:	mov	x19, x4
    5468:	stp	x21, x22, [sp, #32]
    546c:	mov	x21, x1
    5470:	mov	x22, x2
    5474:	mov	x1, x3
    5478:	mov	x2, x4
    547c:	add	x3, sp, #0x40
    5480:	mov	x4, #0x800                 	// #2048
    5484:	str	x23, [sp, #48]
    5488:	mov	x23, x0
    548c:	bl	4d60 <HUF_readDTableX1_wksp>
    5490:	cmn	x0, #0x78
    5494:	b.hi	54c0 <HUF_decompress4X1_DCtx+0x70>  // b.pmore
    5498:	cmp	x19, x0
    549c:	b.ls	54f4 <HUF_decompress4X1_DCtx+0xa4>  // b.plast
    54a0:	sub	x3, x19, x0
    54a4:	cmp	x3, #0x9
    54a8:	b.ls	54d8 <HUF_decompress4X1_DCtx+0x88>  // b.plast
    54ac:	add	x2, x20, x0
    54b0:	mov	x4, x23
    54b4:	mov	x1, x22
    54b8:	mov	x0, x21
    54bc:	bl	1e98 <FSE_decompress+0x8f8>
    54c0:	ldp	x29, x30, [sp]
    54c4:	ldp	x19, x20, [sp, #16]
    54c8:	ldp	x21, x22, [sp, #32]
    54cc:	ldr	x23, [sp, #48]
    54d0:	add	sp, sp, #0x840
    54d4:	ret
    54d8:	mov	x0, #0xffffffffffffffec    	// #-20
    54dc:	ldp	x29, x30, [sp]
    54e0:	ldp	x19, x20, [sp, #16]
    54e4:	ldp	x21, x22, [sp, #32]
    54e8:	ldr	x23, [sp, #48]
    54ec:	add	sp, sp, #0x840
    54f0:	ret
    54f4:	mov	x0, #0xffffffffffffffb8    	// #-72
    54f8:	ldp	x29, x30, [sp]
    54fc:	ldp	x19, x20, [sp, #16]
    5500:	ldp	x21, x22, [sp, #32]
    5504:	ldr	x23, [sp, #48]
    5508:	add	sp, sp, #0x840
    550c:	ret

0000000000005510 <HUF_readDTableX2_wksp>:
    5510:	stp	x29, x30, [sp, #-336]!
    5514:	mov	x29, sp
    5518:	stp	x25, x26, [sp, #64]
    551c:	add	x25, sp, #0x118
    5520:	stp	x19, x20, [sp, #16]
    5524:	mov	x19, x4
    5528:	mov	x20, x0
    552c:	stp	x21, x22, [sp, #32]
    5530:	mov	x21, x3
    5534:	stp	x23, x24, [sp, #48]
    5538:	mov	x23, x1
    553c:	mov	x24, x2
    5540:	mov	x1, x0
    5544:	mov	x2, #0x4                   	// #4
    5548:	mov	x0, x25
    554c:	bl	0 <grub_memmove>
    5550:	ldr	w0, [sp, #280]
    5554:	cmp	x19, #0x5db
    5558:	str	w0, [sp, #208]
    555c:	ldrb	w0, [sp, #280]
    5560:	str	w0, [sp, #108]
    5564:	b.ls	5958 <HUF_readDTableX2_wksp+0x448>  // b.plast
    5568:	add	x22, x21, #0x270
    556c:	mov	x2, #0x6c                  	// #108
    5570:	mov	x0, x22
    5574:	mov	w1, #0x0                   	// #0
    5578:	stp	x27, x28, [sp, #80]
    557c:	bl	0 <grub_memset>
    5580:	ldr	w27, [sp, #108]
    5584:	add	w26, w27, #0x1
    5588:	cmp	w27, #0xc
    558c:	b.hi	5954 <HUF_readDTableX2_wksp+0x444>  // b.pmore
    5590:	add	x19, x21, #0x4dc
    5594:	mov	x5, x23
    5598:	mov	x6, x24
    559c:	mov	x0, x19
    55a0:	add	x4, sp, #0xd8
    55a4:	add	x3, sp, #0xdc
    55a8:	mov	x2, x22
    55ac:	mov	x1, #0x100                 	// #256
    55b0:	bl	438 <HUF_readStats>
    55b4:	mov	x23, x0
    55b8:	cmn	x0, #0x78
    55bc:	b.hi	59c4 <HUF_readDTableX2_wksp+0x4b4>  // b.pmore
    55c0:	ldr	w4, [sp, #216]
    55c4:	cmp	w4, w27
    55c8:	b.hi	5954 <HUF_readDTableX2_wksp+0x444>  // b.pmore
    55cc:	ldr	w0, [x22, w4, uxtw #2]
    55d0:	add	w27, w4, #0x1
    55d4:	cbnz	w0, 59e4 <HUF_readDTableX2_wksp+0x4d4>
    55d8:	mov	w3, w4
    55dc:	nop
    55e0:	mov	w0, w3
    55e4:	sub	w3, w3, #0x1
    55e8:	ldr	w1, [x22, w3, uxtw #2]
    55ec:	cbz	w1, 55e0 <HUF_readDTableX2_wksp+0xd0>
    55f0:	sub	w6, w3, w27
    55f4:	sub	w3, w27, w3
    55f8:	add	w6, w6, w26
    55fc:	cmp	w0, #0x1
    5600:	add	x8, x21, #0x2a8
    5604:	b.ls	5a08 <HUF_readDTableX2_wksp+0x4f8>  // b.plast
    5608:	sub	w2, w0, #0x2
    560c:	add	x5, x21, #0x278
    5610:	add	x1, x21, #0x274
    5614:	mov	w10, #0x0                   	// #0
    5618:	add	x5, x5, w2, uxtw #2
    561c:	nop
    5620:	ldr	w2, [x1]
    5624:	add	x1, x1, #0x4
    5628:	str	w10, [x1, #52]
    562c:	cmp	x5, x1
    5630:	add	w10, w10, w2
    5634:	b.ne	5620 <HUF_readDTableX2_wksp+0x110>  // b.any
    5638:	ldr	w12, [sp, #220]
    563c:	add	x26, x21, #0x2dc
    5640:	str	w10, [x21, #680]
    5644:	cbz	w12, 59f4 <HUF_readDTableX2_wksp+0x4e4>
    5648:	mov	x2, #0x0                   	// #0
    564c:	nop
    5650:	ldrb	w7, [x19, x2]
    5654:	mov	x5, x7
    5658:	ldr	w1, [x8, x7, lsl #2]
    565c:	add	w9, w1, #0x1
    5660:	str	w9, [x8, x7, lsl #2]
    5664:	ubfiz	x1, x1, #1, #32
    5668:	add	x7, x26, x1
    566c:	strb	w2, [x26, x1]
    5670:	add	x2, x2, #0x1
    5674:	strb	w5, [x7, #1]
    5678:	cmp	w12, w2
    567c:	b.hi	5650 <HUF_readDTableX2_wksp+0x140>  // b.pmore
    5680:	ldr	w1, [sp, #108]
    5684:	cmp	w0, #0x1
    5688:	str	wzr, [x21, #680]
    568c:	sub	w1, w1, w4
    5690:	sub	w8, w1, #0x1
    5694:	b.ls	5718 <HUF_readDTableX2_wksp+0x208>  // b.plast
    5698:	add	x11, x21, #0x4
    569c:	add	w8, w8, w0
    56a0:	mov	x5, x11
    56a4:	mov	w4, #0x0                   	// #0
    56a8:	ldr	w2, [x5, #624]
    56ac:	str	w4, [x5], #4
    56b0:	lsl	w2, w2, w1
    56b4:	add	w1, w1, #0x1
    56b8:	cmp	w8, w1
    56bc:	add	w4, w4, w2
    56c0:	b.ne	56a8 <HUF_readDTableX2_wksp+0x198>  // b.any
    56c4:	cmp	w3, w6
    56c8:	b.cs	5718 <HUF_readDTableX2_wksp+0x208>  // b.hs, b.nlast
    56cc:	mov	w4, #0x34                  	// #52
    56d0:	sub	w0, w0, #0x2
    56d4:	add	x5, x21, #0x8
    56d8:	mov	w2, w3
    56dc:	umull	x4, w3, w4
    56e0:	add	x5, x5, w0, uxtw #2
    56e4:	nop
    56e8:	mov	x0, x11
    56ec:	nop
    56f0:	ldr	w1, [x0]
    56f4:	lsr	w1, w1, w2
    56f8:	str	w1, [x0, x4]
    56fc:	add	x0, x0, #0x4
    5700:	cmp	x5, x0
    5704:	b.ne	56f0 <HUF_readDTableX2_wksp+0x1e0>  // b.any
    5708:	add	w2, w2, #0x1
    570c:	add	x4, x4, #0x34
    5710:	cmp	w2, w6
    5714:	b.ne	56e8 <HUF_readDTableX2_wksp+0x1d8>  // b.any
    5718:	add	x12, sp, #0xe0
    571c:	ldr	w0, [sp, #108]
    5720:	mov	x1, x21
    5724:	mov	x2, #0x34                  	// #52
    5728:	sub	w0, w27, w0
    572c:	str	w3, [sp, #112]
    5730:	str	w10, [sp, #120]
    5734:	str	w0, [sp, #168]
    5738:	mov	x0, x12
    573c:	bl	0 <grub_memmove>
    5740:	ldr	w10, [sp, #120]
    5744:	add	x12, sp, #0xe0
    5748:	ldr	w3, [sp, #112]
    574c:	cbz	w10, 5914 <HUF_readDTableX2_wksp+0x404>
    5750:	sub	w22, w10, #0x1
    5754:	add	x0, x21, #0x2de
    5758:	str	x0, [sp, #176]
    575c:	mov	w28, #0x1                   	// #1
    5760:	add	x0, x0, w22, uxtw #1
    5764:	str	x0, [sp, #144]
    5768:	add	x0, x20, #0x4
    576c:	str	x0, [sp, #160]
    5770:	ldr	w0, [sp, #108]
    5774:	mov	w22, w28
    5778:	stp	x23, x20, [sp, #192]
    577c:	mov	x23, x26
    5780:	sub	w0, w0, w27
    5784:	mov	x26, x21
    5788:	str	w0, [sp, #152]
    578c:	add	x0, x20, #0x8
    5790:	mov	w20, w27
    5794:	str	w3, [sp, #156]
    5798:	str	w10, [sp, #172]
    579c:	str	x0, [sp, #184]
    57a0:	ldrb	w21, [x23, #1]
    57a4:	ldr	w0, [sp, #152]
    57a8:	ldrb	w19, [x23]
    57ac:	sub	w24, w20, w21
    57b0:	add	w27, w21, w0
    57b4:	ldr	w0, [sp, #156]
    57b8:	ldr	w5, [x12, x21, lsl #2]
    57bc:	cmp	w27, w0
    57c0:	lsl	w10, w28, w27
    57c4:	b.cc	5978 <HUF_readDTableX2_wksp+0x468>  // b.lo, b.ul, b.last
    57c8:	ldp	w0, w4, [sp, #168]
    57cc:	mov	x3, #0x2a4                 	// #676
    57d0:	mov	x2, #0x34                  	// #52
    57d4:	add	w6, w0, w24
    57d8:	mov	w0, #0x34                  	// #52
    57dc:	cmp	w6, #0x0
    57e0:	stp	w6, w10, [sp, #136]
    57e4:	csel	w14, w6, w28, gt
    57e8:	umaddl	x1, w24, w0, x26
    57ec:	ldr	x0, [sp, #160]
    57f0:	add	x3, x3, w14, sxtw #2
    57f4:	ldr	w3, [x26, x3]
    57f8:	add	x5, x0, w5, uxtw #2
    57fc:	mov	x0, x25
    5800:	str	x5, [sp, #128]
    5804:	mov	w15, w3
    5808:	sub	w3, w4, w3
    580c:	str	x15, [sp, #112]
    5810:	stp	w3, w14, [sp, #120]
    5814:	bl	0 <grub_memmove>
    5818:	ldp	w6, w10, [sp, #136]
    581c:	add	x12, sp, #0xe0
    5820:	ldp	w3, w14, [sp, #120]
    5824:	cmp	w6, #0x1
    5828:	ldr	x15, [sp, #112]
    582c:	ldr	x5, [sp, #128]
    5830:	b.le	5868 <HUF_readDTableX2_wksp+0x358>
    5834:	ldr	w1, [x25, w14, sxtw #2]
    5838:	and	w6, w24, #0xff
    583c:	cbz	w1, 5868 <HUF_readDTableX2_wksp+0x358>
    5840:	sub	w2, w1, #0x1
    5844:	add	x1, x5, #0x4
    5848:	mov	x0, x5
    584c:	add	x1, x1, w2, uxtw #2
    5850:	strh	w19, [x0]
    5854:	add	x0, x0, #0x4
    5858:	sturb	w6, [x0, #-2]
    585c:	sturb	w22, [x0, #-1]
    5860:	cmp	x1, x0
    5864:	b.ne	5850 <HUF_readDTableX2_wksp+0x340>  // b.any
    5868:	cbz	w3, 58f4 <HUF_readDTableX2_wksp+0x3e4>
    586c:	ldr	x0, [sp, #176]
    5870:	sub	w16, w3, #0x1
    5874:	add	x14, x15, #0x16e
    5878:	add	x16, x16, x15
    587c:	sub	w30, w27, w20
    5880:	and	w18, w24, #0xff
    5884:	add	x14, x26, x14, lsl #1
    5888:	add	x16, x0, x16, lsl #1
    588c:	mov	w17, #0x2                   	// #2
    5890:	ldrb	w6, [x14, #1]
    5894:	ldrb	w3, [x14]
    5898:	add	w4, w6, w30
    589c:	sub	w0, w20, w6
    58a0:	add	w0, w18, w0
    58a4:	ldr	w1, [x25, x6, lsl #2]
    58a8:	ubfiz	w3, w3, #8, #8
    58ac:	add	w3, w19, w3
    58b0:	lsl	w4, w28, w4
    58b4:	and	w0, w0, #0xff
    58b8:	add	w4, w4, w1
    58bc:	and	w3, w3, #0xffff
    58c0:	mov	w2, w1
    58c4:	add	w1, w1, #0x1
    58c8:	cmp	w4, w1
    58cc:	ubfiz	x2, x2, #2, #32
    58d0:	add	x7, x5, x2
    58d4:	strh	w3, [x5, x2]
    58d8:	strb	w0, [x7, #2]
    58dc:	strb	w17, [x7, #3]
    58e0:	b.hi	58c0 <HUF_readDTableX2_wksp+0x3b0>  // b.pmore
    58e4:	str	w4, [x25, x6, lsl #2]
    58e8:	add	x14, x14, #0x2
    58ec:	cmp	x16, x14
    58f0:	b.ne	5890 <HUF_readDTableX2_wksp+0x380>  // b.any
    58f4:	ldr	w0, [x12, x21, lsl #2]
    58f8:	add	w10, w10, w0
    58fc:	ldr	x0, [sp, #144]
    5900:	str	w10, [x12, x21, lsl #2]
    5904:	add	x23, x23, #0x2
    5908:	cmp	x0, x23
    590c:	b.ne	57a0 <HUF_readDTableX2_wksp+0x290>  // b.any
    5910:	ldp	x23, x20, [sp, #192]
    5914:	mov	w3, #0x1                   	// #1
    5918:	strb	w3, [sp, #209]
    591c:	add	x1, sp, #0xd0
    5920:	ldrb	w3, [sp, #108]
    5924:	mov	x0, x20
    5928:	mov	x2, #0x4                   	// #4
    592c:	strb	w3, [sp, #210]
    5930:	bl	0 <grub_memmove>
    5934:	mov	x0, x23
    5938:	ldp	x19, x20, [sp, #16]
    593c:	ldp	x21, x22, [sp, #32]
    5940:	ldp	x23, x24, [sp, #48]
    5944:	ldp	x25, x26, [sp, #64]
    5948:	ldp	x27, x28, [sp, #80]
    594c:	ldp	x29, x30, [sp], #336
    5950:	ret
    5954:	ldp	x27, x28, [sp, #80]
    5958:	mov	x23, #0xffffffffffffffd4    	// #-44
    595c:	mov	x0, x23
    5960:	ldp	x19, x20, [sp, #16]
    5964:	ldp	x21, x22, [sp, #32]
    5968:	ldp	x23, x24, [sp, #48]
    596c:	ldp	x25, x26, [sp, #64]
    5970:	ldp	x29, x30, [sp], #336
    5974:	ret
    5978:	add	w10, w5, w10
    597c:	and	w18, w24, #0xff
    5980:	cmp	w5, w10
    5984:	b.cs	58fc <HUF_readDTableX2_wksp+0x3ec>  // b.hs, b.nlast
    5988:	ldr	x1, [sp, #160]
    598c:	mvn	w0, w5
    5990:	add	w0, w0, w10
    5994:	add	x1, x1, w5, uxtw #2
    5998:	add	x5, x0, w5, uxtw
    599c:	ldr	x0, [sp, #184]
    59a0:	add	x0, x0, x5, lsl #2
    59a4:	nop
    59a8:	strh	w19, [x1]
    59ac:	add	x1, x1, #0x4
    59b0:	sturb	w18, [x1, #-2]
    59b4:	sturb	w22, [x1, #-1]
    59b8:	cmp	x0, x1
    59bc:	b.ne	59a8 <HUF_readDTableX2_wksp+0x498>  // b.any
    59c0:	b	58fc <HUF_readDTableX2_wksp+0x3ec>
    59c4:	mov	x0, x23
    59c8:	ldp	x19, x20, [sp, #16]
    59cc:	ldp	x21, x22, [sp, #32]
    59d0:	ldp	x23, x24, [sp, #48]
    59d4:	ldp	x25, x26, [sp, #64]
    59d8:	ldp	x27, x28, [sp, #80]
    59dc:	ldp	x29, x30, [sp], #336
    59e0:	ret
    59e4:	ldr	w6, [sp, #108]
    59e8:	mov	w0, w27
    59ec:	mov	w3, #0x1                   	// #1
    59f0:	b	55fc <HUF_readDTableX2_wksp+0xec>
    59f4:	ldr	w1, [sp, #108]
    59f8:	str	wzr, [x21, #680]
    59fc:	sub	w1, w1, w4
    5a00:	sub	w8, w1, #0x1
    5a04:	b	5698 <HUF_readDTableX2_wksp+0x188>
    5a08:	ldr	w12, [sp, #220]
    5a0c:	add	x26, x21, #0x2dc
    5a10:	str	wzr, [x21, #680]
    5a14:	mov	w10, #0x0                   	// #0
    5a18:	cbnz	w12, 5648 <HUF_readDTableX2_wksp+0x138>
    5a1c:	b	5718 <HUF_readDTableX2_wksp+0x208>

0000000000005a20 <HUF_decompress4X2>:
    5a20:	mov	x12, #0x4840                	// #18496
    5a24:	sub	sp, sp, x12
    5a28:	stp	x29, x30, [sp]
    5a2c:	mov	x29, sp
    5a30:	stp	x19, x20, [sp, #16]
    5a34:	mov	x19, x3
    5a38:	mov	x20, x2
    5a3c:	mov	x2, #0x4004                	// #16388
    5a40:	stp	x21, x22, [sp, #32]
    5a44:	mov	x21, x0
    5a48:	mov	x22, x1
    5a4c:	add	x0, sp, #0x838
    5a50:	mov	w1, #0x0                   	// #0
    5a54:	bl	0 <memset>
    5a58:	mov	w5, #0xc                   	// #12
    5a5c:	mov	x2, x19
    5a60:	movk	w5, #0xc00, lsl #16
    5a64:	mov	x1, x20
    5a68:	add	x0, sp, #0x838
    5a6c:	add	x3, sp, #0x38
    5a70:	mov	x4, #0x800                 	// #2048
    5a74:	str	w5, [sp, #2104]
    5a78:	bl	5510 <HUF_readDTableX2_wksp>
    5a7c:	cmn	x0, #0x78
    5a80:	b.hi	5aac <HUF_decompress4X2+0x8c>  // b.pmore
    5a84:	cmp	x19, x0
    5a88:	b.ls	5ae0 <HUF_decompress4X2+0xc0>  // b.plast
    5a8c:	sub	x3, x19, x0
    5a90:	cmp	x3, #0x9
    5a94:	b.ls	5ac4 <HUF_decompress4X2+0xa4>  // b.plast
    5a98:	add	x2, x20, x0
    5a9c:	add	x4, sp, #0x838
    5aa0:	mov	x1, x22
    5aa4:	mov	x0, x21
    5aa8:	bl	3220 <FSE_decompress+0x1c80>
    5aac:	mov	x12, #0x4840                	// #18496
    5ab0:	ldp	x29, x30, [sp]
    5ab4:	ldp	x19, x20, [sp, #16]
    5ab8:	ldp	x21, x22, [sp, #32]
    5abc:	add	sp, sp, x12
    5ac0:	ret
    5ac4:	mov	x0, #0xffffffffffffffec    	// #-20
    5ac8:	mov	x12, #0x4840                	// #18496
    5acc:	ldp	x29, x30, [sp]
    5ad0:	ldp	x19, x20, [sp, #16]
    5ad4:	ldp	x21, x22, [sp, #32]
    5ad8:	add	sp, sp, x12
    5adc:	ret
    5ae0:	mov	x0, #0xffffffffffffffb8    	// #-72
    5ae4:	mov	x12, #0x4840                	// #18496
    5ae8:	ldp	x29, x30, [sp]
    5aec:	ldp	x19, x20, [sp, #16]
    5af0:	ldp	x21, x22, [sp, #32]
    5af4:	add	sp, sp, x12
    5af8:	ret
    5afc:	nop

0000000000005b00 <HUF_readDTableX2>:
    5b00:	sub	sp, sp, #0x810
    5b04:	mov	x4, #0x800                 	// #2048
    5b08:	add	x3, sp, #0x10
    5b0c:	stp	x29, x30, [sp]
    5b10:	mov	x29, sp
    5b14:	bl	5510 <HUF_readDTableX2_wksp>
    5b18:	ldp	x29, x30, [sp]
    5b1c:	add	sp, sp, #0x810
    5b20:	ret
    5b24:	nop

0000000000005b28 <HUF_decompress1X2_usingDTable>:
    5b28:	stp	x29, x30, [sp, #-80]!
    5b2c:	mov	x29, sp
    5b30:	stp	x19, x20, [sp, #16]
    5b34:	mov	x19, x4
    5b38:	mov	x20, x0
    5b3c:	add	x0, sp, #0x48
    5b40:	stp	x21, x22, [sp, #32]
    5b44:	mov	x21, x1
    5b48:	mov	x22, x2
    5b4c:	mov	x1, x4
    5b50:	mov	x2, #0x4                   	// #4
    5b54:	str	x23, [sp, #48]
    5b58:	mov	x23, x3
    5b5c:	bl	0 <grub_memmove>
    5b60:	ldrb	w0, [sp, #73]
    5b64:	cmp	w0, #0x1
    5b68:	b.eq	5b84 <HUF_decompress1X2_usingDTable+0x5c>  // b.none
    5b6c:	mov	x0, #0xffffffffffffffff    	// #-1
    5b70:	ldp	x19, x20, [sp, #16]
    5b74:	ldp	x21, x22, [sp, #32]
    5b78:	ldr	x23, [sp, #48]
    5b7c:	ldp	x29, x30, [sp], #80
    5b80:	ret
    5b84:	mov	x4, x19
    5b88:	mov	x3, x23
    5b8c:	mov	x2, x22
    5b90:	mov	x1, x21
    5b94:	mov	x0, x20
    5b98:	bl	19a0 <FSE_decompress+0x400>
    5b9c:	ldp	x19, x20, [sp, #16]
    5ba0:	ldp	x21, x22, [sp, #32]
    5ba4:	ldr	x23, [sp, #48]
    5ba8:	ldp	x29, x30, [sp], #80
    5bac:	ret

0000000000005bb0 <HUF_decompress1X2_DCtx_wksp>:
    5bb0:	stp	x29, x30, [sp, #-64]!
    5bb4:	mov	x29, sp
    5bb8:	stp	x19, x20, [sp, #16]
    5bbc:	mov	x20, x3
    5bc0:	mov	x19, x4
    5bc4:	mov	x3, x5
    5bc8:	mov	x4, x6
    5bcc:	stp	x21, x22, [sp, #32]
    5bd0:	mov	x21, x1
    5bd4:	mov	x22, x2
    5bd8:	mov	x1, x20
    5bdc:	mov	x2, x19
    5be0:	str	x23, [sp, #48]
    5be4:	mov	x23, x0
    5be8:	bl	5510 <HUF_readDTableX2_wksp>
    5bec:	cmn	x0, #0x78
    5bf0:	b.hi	5c28 <HUF_decompress1X2_DCtx_wksp+0x78>  // b.pmore
    5bf4:	cmp	x19, x0
    5bf8:	b.ls	5c24 <HUF_decompress1X2_DCtx_wksp+0x74>  // b.plast
    5bfc:	sub	x3, x19, x0
    5c00:	add	x2, x20, x0
    5c04:	mov	x4, x23
    5c08:	mov	x1, x22
    5c0c:	mov	x0, x21
    5c10:	ldp	x19, x20, [sp, #16]
    5c14:	ldp	x21, x22, [sp, #32]
    5c18:	ldr	x23, [sp, #48]
    5c1c:	ldp	x29, x30, [sp], #64
    5c20:	b	19a0 <FSE_decompress+0x400>
    5c24:	mov	x0, #0xffffffffffffffb8    	// #-72
    5c28:	ldp	x19, x20, [sp, #16]
    5c2c:	ldp	x21, x22, [sp, #32]
    5c30:	ldr	x23, [sp, #48]
    5c34:	ldp	x29, x30, [sp], #64
    5c38:	ret
    5c3c:	nop

0000000000005c40 <HUF_decompress1X2_DCtx>:
    5c40:	sub	sp, sp, #0x840
    5c44:	stp	x29, x30, [sp]
    5c48:	mov	x29, sp
    5c4c:	stp	x19, x20, [sp, #16]
    5c50:	mov	x20, x3
    5c54:	mov	x19, x4
    5c58:	stp	x21, x22, [sp, #32]
    5c5c:	mov	x21, x1
    5c60:	mov	x22, x2
    5c64:	mov	x1, x3
    5c68:	mov	x2, x4
    5c6c:	add	x3, sp, #0x40
    5c70:	mov	x4, #0x800                 	// #2048
    5c74:	str	x23, [sp, #48]
    5c78:	mov	x23, x0
    5c7c:	bl	5510 <HUF_readDTableX2_wksp>
    5c80:	cmn	x0, #0x78
    5c84:	b.hi	5ca8 <HUF_decompress1X2_DCtx+0x68>  // b.pmore
    5c88:	cmp	x19, x0
    5c8c:	b.ls	5cc0 <HUF_decompress1X2_DCtx+0x80>  // b.plast
    5c90:	sub	x3, x19, x0
    5c94:	add	x2, x20, x0
    5c98:	mov	x4, x23
    5c9c:	mov	x1, x22
    5ca0:	mov	x0, x21
    5ca4:	bl	19a0 <FSE_decompress+0x400>
    5ca8:	ldp	x29, x30, [sp]
    5cac:	ldp	x19, x20, [sp, #16]
    5cb0:	ldp	x21, x22, [sp, #32]
    5cb4:	ldr	x23, [sp, #48]
    5cb8:	add	sp, sp, #0x840
    5cbc:	ret
    5cc0:	mov	x0, #0xffffffffffffffb8    	// #-72
    5cc4:	ldp	x29, x30, [sp]
    5cc8:	ldp	x19, x20, [sp, #16]
    5ccc:	ldp	x21, x22, [sp, #32]
    5cd0:	ldr	x23, [sp, #48]
    5cd4:	add	sp, sp, #0x840
    5cd8:	ret
    5cdc:	nop

0000000000005ce0 <HUF_decompress1X2>:
    5ce0:	mov	x12, #0x4840                	// #18496
    5ce4:	sub	sp, sp, x12
    5ce8:	stp	x29, x30, [sp]
    5cec:	mov	x29, sp
    5cf0:	stp	x19, x20, [sp, #16]
    5cf4:	mov	x19, x3
    5cf8:	mov	x20, x2
    5cfc:	mov	x2, #0x4004                	// #16388
    5d00:	stp	x21, x22, [sp, #32]
    5d04:	mov	x21, x0
    5d08:	mov	x22, x1
    5d0c:	add	x0, sp, #0x838
    5d10:	mov	w1, #0x0                   	// #0
    5d14:	bl	0 <memset>
    5d18:	mov	w5, #0xc                   	// #12
    5d1c:	mov	x2, x19
    5d20:	movk	w5, #0xc00, lsl #16
    5d24:	mov	x1, x20
    5d28:	add	x0, sp, #0x838
    5d2c:	add	x3, sp, #0x38
    5d30:	mov	x4, #0x800                 	// #2048
    5d34:	str	w5, [sp, #2104]
    5d38:	bl	5510 <HUF_readDTableX2_wksp>
    5d3c:	cmn	x0, #0x78
    5d40:	b.hi	5d64 <HUF_decompress1X2+0x84>  // b.pmore
    5d44:	cmp	x19, x0
    5d48:	b.ls	5d7c <HUF_decompress1X2+0x9c>  // b.plast
    5d4c:	sub	x3, x19, x0
    5d50:	add	x2, x20, x0
    5d54:	add	x4, sp, #0x838
    5d58:	mov	x1, x22
    5d5c:	mov	x0, x21
    5d60:	bl	19a0 <FSE_decompress+0x400>
    5d64:	mov	x12, #0x4840                	// #18496
    5d68:	ldp	x29, x30, [sp]
    5d6c:	ldp	x19, x20, [sp, #16]
    5d70:	ldp	x21, x22, [sp, #32]
    5d74:	add	sp, sp, x12
    5d78:	ret
    5d7c:	mov	x0, #0xffffffffffffffb8    	// #-72
    5d80:	mov	x12, #0x4840                	// #18496
    5d84:	ldp	x29, x30, [sp]
    5d88:	ldp	x19, x20, [sp, #16]
    5d8c:	ldp	x21, x22, [sp, #32]
    5d90:	add	sp, sp, x12
    5d94:	ret

0000000000005d98 <HUF_decompress4X2_usingDTable>:
    5d98:	stp	x29, x30, [sp, #-80]!
    5d9c:	mov	x29, sp
    5da0:	stp	x19, x20, [sp, #16]
    5da4:	mov	x19, x4
    5da8:	mov	x20, x3
    5dac:	stp	x21, x22, [sp, #32]
    5db0:	mov	x21, x0
    5db4:	mov	x22, x1
    5db8:	add	x0, sp, #0x48
    5dbc:	mov	x1, x4
    5dc0:	str	x23, [sp, #48]
    5dc4:	mov	x23, x2
    5dc8:	mov	x2, #0x4                   	// #4
    5dcc:	bl	0 <grub_memmove>
    5dd0:	ldrb	w0, [sp, #73]
    5dd4:	cmp	w0, #0x1
    5dd8:	b.ne	5e14 <HUF_decompress4X2_usingDTable+0x7c>  // b.any
    5ddc:	cmp	x20, #0x9
    5de0:	mov	x0, #0xffffffffffffffec    	// #-20
    5de4:	b.ls	5e00 <HUF_decompress4X2_usingDTable+0x68>  // b.plast
    5de8:	mov	x4, x19
    5dec:	mov	x3, x20
    5df0:	mov	x2, x23
    5df4:	mov	x1, x22
    5df8:	mov	x0, x21
    5dfc:	bl	3220 <FSE_decompress+0x1c80>
    5e00:	ldp	x19, x20, [sp, #16]
    5e04:	ldp	x21, x22, [sp, #32]
    5e08:	ldr	x23, [sp, #48]
    5e0c:	ldp	x29, x30, [sp], #80
    5e10:	ret
    5e14:	mov	x0, #0xffffffffffffffff    	// #-1
    5e18:	ldp	x19, x20, [sp, #16]
    5e1c:	ldp	x21, x22, [sp, #32]
    5e20:	ldr	x23, [sp, #48]
    5e24:	ldp	x29, x30, [sp], #80
    5e28:	ret
    5e2c:	nop

0000000000005e30 <HUF_decompress4X2_DCtx_wksp>:
    5e30:	stp	x29, x30, [sp, #-64]!
    5e34:	mov	x29, sp
    5e38:	stp	x19, x20, [sp, #16]
    5e3c:	mov	x20, x3
    5e40:	mov	x19, x4
    5e44:	mov	x3, x5
    5e48:	mov	x4, x6
    5e4c:	stp	x21, x22, [sp, #32]
    5e50:	mov	x21, x1
    5e54:	mov	x22, x2
    5e58:	mov	x1, x20
    5e5c:	mov	x2, x19
    5e60:	str	x23, [sp, #48]
    5e64:	mov	x23, x0
    5e68:	bl	5510 <HUF_readDTableX2_wksp>
    5e6c:	cmn	x0, #0x78
    5e70:	b.hi	5eb0 <HUF_decompress4X2_DCtx_wksp+0x80>  // b.pmore
    5e74:	cmp	x19, x0
    5e78:	b.ls	5ec4 <HUF_decompress4X2_DCtx_wksp+0x94>  // b.plast
    5e7c:	sub	x3, x19, x0
    5e80:	cmp	x3, #0x9
    5e84:	b.ls	5eac <HUF_decompress4X2_DCtx_wksp+0x7c>  // b.plast
    5e88:	add	x2, x20, x0
    5e8c:	mov	x4, x23
    5e90:	mov	x1, x22
    5e94:	mov	x0, x21
    5e98:	ldp	x19, x20, [sp, #16]
    5e9c:	ldp	x21, x22, [sp, #32]
    5ea0:	ldr	x23, [sp, #48]
    5ea4:	ldp	x29, x30, [sp], #64
    5ea8:	b	3220 <FSE_decompress+0x1c80>
    5eac:	mov	x0, #0xffffffffffffffec    	// #-20
    5eb0:	ldp	x19, x20, [sp, #16]
    5eb4:	ldp	x21, x22, [sp, #32]
    5eb8:	ldr	x23, [sp, #48]
    5ebc:	ldp	x29, x30, [sp], #64
    5ec0:	ret
    5ec4:	mov	x0, #0xffffffffffffffb8    	// #-72
    5ec8:	ldp	x19, x20, [sp, #16]
    5ecc:	ldp	x21, x22, [sp, #32]
    5ed0:	ldr	x23, [sp, #48]
    5ed4:	ldp	x29, x30, [sp], #64
    5ed8:	ret
    5edc:	nop

0000000000005ee0 <HUF_decompress4X2_DCtx>:
    5ee0:	sub	sp, sp, #0x840
    5ee4:	stp	x29, x30, [sp]
    5ee8:	mov	x29, sp
    5eec:	stp	x19, x20, [sp, #16]
    5ef0:	mov	x20, x3
    5ef4:	mov	x19, x4
    5ef8:	stp	x21, x22, [sp, #32]
    5efc:	mov	x21, x1
    5f00:	mov	x22, x2
    5f04:	mov	x1, x3
    5f08:	mov	x2, x4
    5f0c:	add	x3, sp, #0x40
    5f10:	mov	x4, #0x800                 	// #2048
    5f14:	str	x23, [sp, #48]
    5f18:	mov	x23, x0
    5f1c:	bl	5510 <HUF_readDTableX2_wksp>
    5f20:	cmn	x0, #0x78
    5f24:	b.hi	5f50 <HUF_decompress4X2_DCtx+0x70>  // b.pmore
    5f28:	cmp	x19, x0
    5f2c:	b.ls	5f84 <HUF_decompress4X2_DCtx+0xa4>  // b.plast
    5f30:	sub	x3, x19, x0
    5f34:	cmp	x3, #0x9
    5f38:	b.ls	5f68 <HUF_decompress4X2_DCtx+0x88>  // b.plast
    5f3c:	add	x2, x20, x0
    5f40:	mov	x4, x23
    5f44:	mov	x1, x22
    5f48:	mov	x0, x21
    5f4c:	bl	3220 <FSE_decompress+0x1c80>
    5f50:	ldp	x29, x30, [sp]
    5f54:	ldp	x19, x20, [sp, #16]
    5f58:	ldp	x21, x22, [sp, #32]
    5f5c:	ldr	x23, [sp, #48]
    5f60:	add	sp, sp, #0x840
    5f64:	ret
    5f68:	mov	x0, #0xffffffffffffffec    	// #-20
    5f6c:	ldp	x29, x30, [sp]
    5f70:	ldp	x19, x20, [sp, #16]
    5f74:	ldp	x21, x22, [sp, #32]
    5f78:	ldr	x23, [sp, #48]
    5f7c:	add	sp, sp, #0x840
    5f80:	ret
    5f84:	mov	x0, #0xffffffffffffffb8    	// #-72
    5f88:	ldp	x29, x30, [sp]
    5f8c:	ldp	x19, x20, [sp, #16]
    5f90:	ldp	x21, x22, [sp, #32]
    5f94:	ldr	x23, [sp, #48]
    5f98:	add	sp, sp, #0x840
    5f9c:	ret

0000000000005fa0 <HUF_decompress1X_usingDTable>:
    5fa0:	stp	x29, x30, [sp, #-80]!
    5fa4:	mov	x29, sp
    5fa8:	stp	x19, x20, [sp, #16]
    5fac:	mov	x19, x4
    5fb0:	mov	x20, x0
    5fb4:	add	x0, sp, #0x48
    5fb8:	stp	x21, x22, [sp, #32]
    5fbc:	mov	x21, x1
    5fc0:	mov	x22, x2
    5fc4:	mov	x1, x4
    5fc8:	mov	x2, #0x4                   	// #4
    5fcc:	str	x23, [sp, #48]
    5fd0:	mov	x23, x3
    5fd4:	bl	0 <grub_memmove>
    5fd8:	ldrb	w0, [sp, #73]
    5fdc:	mov	x4, x19
    5fe0:	mov	x3, x23
    5fe4:	mov	x2, x22
    5fe8:	mov	x1, x21
    5fec:	cbz	w0, 600c <HUF_decompress1X_usingDTable+0x6c>
    5ff0:	mov	x0, x20
    5ff4:	bl	19a0 <FSE_decompress+0x400>
    5ff8:	ldp	x19, x20, [sp, #16]
    5ffc:	ldp	x21, x22, [sp, #32]
    6000:	ldr	x23, [sp, #48]
    6004:	ldp	x29, x30, [sp], #80
    6008:	ret
    600c:	mov	x0, x20
    6010:	bl	16a0 <FSE_decompress+0x100>
    6014:	ldp	x19, x20, [sp, #16]
    6018:	ldp	x21, x22, [sp, #32]
    601c:	ldr	x23, [sp, #48]
    6020:	ldp	x29, x30, [sp], #80
    6024:	ret

0000000000006028 <HUF_decompress4X_usingDTable>:
    6028:	stp	x29, x30, [sp, #-80]!
    602c:	mov	x29, sp
    6030:	stp	x19, x20, [sp, #16]
    6034:	mov	x19, x3
    6038:	mov	x20, x4
    603c:	stp	x21, x22, [sp, #32]
    6040:	mov	x21, x0
    6044:	mov	x22, x1
    6048:	add	x0, sp, #0x48
    604c:	mov	x1, x4
    6050:	str	x23, [sp, #48]
    6054:	mov	x23, x2
    6058:	mov	x2, #0x4                   	// #4
    605c:	bl	0 <grub_memmove>
    6060:	ldrb	w0, [sp, #73]
    6064:	cmp	x19, #0x9
    6068:	cbz	w0, 60a0 <HUF_decompress4X_usingDTable+0x78>
    606c:	mov	x0, #0xffffffffffffffec    	// #-20
    6070:	b.ls	608c <HUF_decompress4X_usingDTable+0x64>  // b.plast
    6074:	mov	x4, x20
    6078:	mov	x3, x19
    607c:	mov	x2, x23
    6080:	mov	x1, x22
    6084:	mov	x0, x21
    6088:	bl	3220 <FSE_decompress+0x1c80>
    608c:	ldp	x19, x20, [sp, #16]
    6090:	ldp	x21, x22, [sp, #32]
    6094:	ldr	x23, [sp, #48]
    6098:	ldp	x29, x30, [sp], #80
    609c:	ret
    60a0:	mov	x0, #0xffffffffffffffec    	// #-20
    60a4:	b.ls	608c <HUF_decompress4X_usingDTable+0x64>  // b.plast
    60a8:	mov	x4, x20
    60ac:	mov	x3, x19
    60b0:	mov	x2, x23
    60b4:	mov	x1, x22
    60b8:	mov	x0, x21
    60bc:	bl	1e98 <FSE_decompress+0x8f8>
    60c0:	ldp	x19, x20, [sp, #16]
    60c4:	ldp	x21, x22, [sp, #32]
    60c8:	ldr	x23, [sp, #48]
    60cc:	ldp	x29, x30, [sp], #80
    60d0:	ret
    60d4:	nop

00000000000060d8 <HUF_selectDecoder>:
    60d8:	cmp	x1, x0
    60dc:	b.cs	6128 <HUF_selectDecoder+0x50>  // b.hs, b.nlast
    60e0:	lsl	x1, x1, #4
    60e4:	adrp	x2, 0 <FSE_versionNumber>
    60e8:	ldr	x2, [x2]
    60ec:	udiv	x1, x1, x0
    60f0:	lsr	x0, x0, #8
    60f4:	ubfiz	x3, x1, #1, #32
    60f8:	add	x1, x3, w1, uxtw
    60fc:	lsl	x1, x1, #3
    6100:	add	x5, x2, x1
    6104:	ldr	w3, [x2, x1]
    6108:	ldp	w2, w4, [x5, #4]
    610c:	ldr	w1, [x5, #12]
    6110:	madd	w1, w1, w0, w4
    6114:	madd	w0, w2, w0, w3
    6118:	add	w1, w1, w1, lsr #3
    611c:	cmp	w0, w1
    6120:	cset	w0, hi  // hi = pmore
    6124:	ret
    6128:	lsr	x0, x0, #8
    612c:	mov	w4, #0x763                 	// #1891
    6130:	mov	w1, #0x91                  	// #145
    6134:	mov	w2, #0x80                  	// #128
    6138:	mov	w3, #0x2d2                 	// #722
    613c:	madd	w1, w1, w0, w4
    6140:	madd	w0, w2, w0, w3
    6144:	add	w1, w1, w1, lsr #3
    6148:	cmp	w0, w1
    614c:	cset	w0, hi  // hi = pmore
    6150:	ret
    6154:	nop
	...

0000000000006160 <HUF_decompress>:
    6160:	stp	x29, x30, [sp, #-32]!
    6164:	mov	x29, sp
    6168:	str	x19, [sp, #16]
    616c:	mov	x19, x1
    6170:	cbz	x1, 6214 <HUF_decompress+0xb4>
    6174:	cmp	x1, x3
    6178:	b.cc	6238 <HUF_decompress+0xd8>  // b.lo, b.ul, b.last
    617c:	b.eq	6248 <HUF_decompress+0xe8>  // b.none
    6180:	cmp	x3, #0x1
    6184:	b.eq	6224 <HUF_decompress+0xc4>  // b.none
    6188:	mov	x1, x0
    618c:	cmp	x19, x3
    6190:	b.ls	61f8 <HUF_decompress+0x98>  // b.plast
    6194:	lsl	x0, x3, #4
    6198:	adrp	x4, 0 <FSE_versionNumber>
    619c:	ldr	x7, [x4]
    61a0:	udiv	x0, x0, x19
    61a4:	ubfiz	x4, x0, #1, #32
    61a8:	add	x0, x4, w0, uxtw
    61ac:	lsl	x0, x0, #3
    61b0:	add	x4, x7, x0
    61b4:	ldr	w8, [x7, x0]
    61b8:	ldp	w5, w9, [x4, #4]
    61bc:	ldr	w4, [x4, #12]
    61c0:	lsr	x6, x19, #8
    61c4:	mov	x0, x1
    61c8:	mov	x1, x19
    61cc:	ldr	x19, [sp, #16]
    61d0:	madd	w4, w4, w6, w9
    61d4:	madd	w5, w5, w6, w8
    61d8:	ldp	x29, x30, [sp], #32
    61dc:	add	w4, w4, w4, lsr #3
    61e0:	cmp	w5, w4
    61e4:	cset	x4, hi  // hi = pmore
    61e8:	add	x4, x7, x4, lsl #3
    61ec:	ldr	x4, [x4, #384]
    61f0:	mov	x16, x4
    61f4:	br	x16
    61f8:	adrp	x0, 0 <FSE_versionNumber>
    61fc:	mov	w4, #0x91                  	// #145
    6200:	mov	w9, #0x763                 	// #1891
    6204:	mov	w5, #0x80                  	// #128
    6208:	ldr	x7, [x0]
    620c:	mov	w8, #0x2d2                 	// #722
    6210:	b	61c0 <HUF_decompress+0x60>
    6214:	mov	x0, #0xffffffffffffffba    	// #-70
    6218:	ldr	x19, [sp, #16]
    621c:	ldp	x29, x30, [sp], #32
    6220:	ret
    6224:	ldrb	w1, [x2]
    6228:	mov	x2, x19
    622c:	bl	0 <grub_memset>
    6230:	mov	x0, x19
    6234:	b	6218 <HUF_decompress+0xb8>
    6238:	mov	x0, #0xffffffffffffffec    	// #-20
    623c:	ldr	x19, [sp, #16]
    6240:	ldp	x29, x30, [sp], #32
    6244:	ret
    6248:	mov	x1, x2
    624c:	mov	x2, x19
    6250:	bl	0 <grub_memmove>
    6254:	mov	x0, x19
    6258:	b	6218 <HUF_decompress+0xb8>
    625c:	nop
	...

0000000000006268 <HUF_decompress4X_DCtx>:
    6268:	cbz	x2, 6314 <HUF_decompress4X_DCtx+0xac>
    626c:	stp	x29, x30, [sp, #-32]!
    6270:	cmp	x2, x4
    6274:	mov	x29, sp
    6278:	str	x19, [sp, #16]
    627c:	mov	x19, x2
    6280:	b.cc	6338 <HUF_decompress4X_DCtx+0xd0>  // b.lo, b.ul, b.last
    6284:	mov	x5, x1
    6288:	b.eq	6348 <HUF_decompress4X_DCtx+0xe0>  // b.none
    628c:	cmp	x4, #0x1
    6290:	b.eq	631c <HUF_decompress4X_DCtx+0xb4>  // b.none
    6294:	cmp	x2, x4
    6298:	b.ls	6300 <HUF_decompress4X_DCtx+0x98>  // b.plast
    629c:	lsl	x1, x4, #4
    62a0:	adrp	x2, 0 <FSE_versionNumber>
    62a4:	ldr	x2, [x2]
    62a8:	udiv	x1, x1, x19
    62ac:	ubfiz	x6, x1, #1, #32
    62b0:	add	x1, x6, w1, uxtw
    62b4:	lsl	x1, x1, #3
    62b8:	add	x6, x2, x1
    62bc:	ldr	w7, [x2, x1]
    62c0:	ldp	w2, w8, [x6, #4]
    62c4:	ldr	w1, [x6, #12]
    62c8:	lsr	x6, x19, #8
    62cc:	madd	w1, w1, w6, w8
    62d0:	madd	w2, w2, w6, w7
    62d4:	add	w1, w1, w1, lsr #3
    62d8:	cmp	w2, w1
    62dc:	mov	x2, x19
    62e0:	mov	x1, x5
    62e4:	b.ls	62f4 <HUF_decompress4X_DCtx+0x8c>  // b.plast
    62e8:	ldr	x19, [sp, #16]
    62ec:	ldp	x29, x30, [sp], #32
    62f0:	b	5ee0 <HUF_decompress4X2_DCtx>
    62f4:	ldr	x19, [sp, #16]
    62f8:	ldp	x29, x30, [sp], #32
    62fc:	b	5450 <HUF_decompress4X1_DCtx>
    6300:	mov	w1, #0x91                  	// #145
    6304:	mov	w8, #0x763                 	// #1891
    6308:	mov	w2, #0x80                  	// #128
    630c:	mov	w7, #0x2d2                 	// #722
    6310:	b	62c8 <HUF_decompress4X_DCtx+0x60>
    6314:	mov	x0, #0xffffffffffffffba    	// #-70
    6318:	ret
    631c:	ldrb	w1, [x3]
    6320:	mov	x0, x5
    6324:	bl	0 <grub_memset>
    6328:	mov	x0, x19
    632c:	ldr	x19, [sp, #16]
    6330:	ldp	x29, x30, [sp], #32
    6334:	ret
    6338:	mov	x0, #0xffffffffffffffec    	// #-20
    633c:	ldr	x19, [sp, #16]
    6340:	ldp	x29, x30, [sp], #32
    6344:	ret
    6348:	mov	x1, x3
    634c:	mov	x0, x5
    6350:	bl	0 <grub_memmove>
    6354:	mov	x0, x19
    6358:	b	632c <HUF_decompress4X_DCtx+0xc4>
    635c:	nop
	...

0000000000006368 <HUF_decompress4X_hufOnly>:
    6368:	sub	sp, sp, #0x850
    636c:	stp	x29, x30, [sp]
    6370:	mov	x29, sp
    6374:	str	x0, [sp, #72]
    6378:	cbz	x2, 64c8 <HUF_decompress4X_hufOnly+0x160>
    637c:	stp	x19, x20, [sp, #16]
    6380:	mov	x19, x4
    6384:	cbz	x4, 64b4 <HUF_decompress4X_hufOnly+0x14c>
    6388:	stp	x21, x22, [sp, #32]
    638c:	mov	x20, x2
    6390:	mov	x22, x3
    6394:	str	x23, [sp, #48]
    6398:	mov	x21, x0
    639c:	cmp	x2, x4
    63a0:	mov	x23, x1
    63a4:	b.hi	6430 <HUF_decompress4X_hufOnly+0xc8>  // b.pmore
    63a8:	mov	w0, #0x91                  	// #145
    63ac:	mov	w3, #0x763                 	// #1891
    63b0:	mov	w4, #0x80                  	// #128
    63b4:	mov	w2, #0x2d2                 	// #722
    63b8:	lsr	x1, x20, #8
    63bc:	madd	w0, w0, w1, w3
    63c0:	add	x3, sp, #0x50
    63c4:	madd	w4, w4, w1, w2
    63c8:	mov	x2, x19
    63cc:	mov	x1, x22
    63d0:	add	w0, w0, w0, lsr #3
    63d4:	cmp	w4, w0
    63d8:	mov	x0, x21
    63dc:	mov	x4, #0x800                 	// #2048
    63e0:	b.ls	6460 <HUF_decompress4X_hufOnly+0xf8>  // b.plast
    63e4:	bl	5510 <HUF_readDTableX2_wksp>
    63e8:	cmn	x0, #0x78
    63ec:	b.hi	64d8 <HUF_decompress4X_hufOnly+0x170>  // b.pmore
    63f0:	cmp	x19, x0
    63f4:	b.ls	64f0 <HUF_decompress4X_hufOnly+0x188>  // b.plast
    63f8:	sub	x3, x19, x0
    63fc:	cmp	x3, #0x9
    6400:	b.ls	64ac <HUF_decompress4X_hufOnly+0x144>  // b.plast
    6404:	add	x2, x22, x0
    6408:	mov	x4, x21
    640c:	mov	x1, x20
    6410:	mov	x0, x23
    6414:	bl	3220 <FSE_decompress+0x1c80>
    6418:	ldp	x29, x30, [sp]
    641c:	ldp	x19, x20, [sp, #16]
    6420:	ldp	x21, x22, [sp, #32]
    6424:	ldr	x23, [sp, #48]
    6428:	add	sp, sp, #0x850
    642c:	ret
    6430:	lsl	x0, x4, #4
    6434:	adrp	x1, 0 <FSE_versionNumber>
    6438:	ldr	x2, [x1]
    643c:	udiv	x0, x0, x20
    6440:	ubfiz	x1, x0, #1, #32
    6444:	add	x0, x1, w0, uxtw
    6448:	lsl	x0, x0, #3
    644c:	add	x1, x2, x0
    6450:	ldr	w2, [x2, x0]
    6454:	ldp	w4, w3, [x1, #4]
    6458:	ldr	w0, [x1, #12]
    645c:	b	63b8 <HUF_decompress4X_hufOnly+0x50>
    6460:	bl	4d60 <HUF_readDTableX1_wksp>
    6464:	cmn	x0, #0x78
    6468:	b.hi	64d8 <HUF_decompress4X_hufOnly+0x170>  // b.pmore
    646c:	cmp	x19, x0
    6470:	b.ls	64f0 <HUF_decompress4X_hufOnly+0x188>  // b.plast
    6474:	sub	x3, x19, x0
    6478:	cmp	x3, #0x9
    647c:	b.ls	64ac <HUF_decompress4X_hufOnly+0x144>  // b.plast
    6480:	add	x2, x22, x0
    6484:	mov	x4, x21
    6488:	mov	x1, x20
    648c:	mov	x0, x23
    6490:	bl	1e98 <FSE_decompress+0x8f8>
    6494:	ldp	x29, x30, [sp]
    6498:	ldp	x19, x20, [sp, #16]
    649c:	ldp	x21, x22, [sp, #32]
    64a0:	ldr	x23, [sp, #48]
    64a4:	add	sp, sp, #0x850
    64a8:	ret
    64ac:	ldp	x21, x22, [sp, #32]
    64b0:	ldr	x23, [sp, #48]
    64b4:	mov	x0, #0xffffffffffffffec    	// #-20
    64b8:	ldp	x19, x20, [sp, #16]
    64bc:	ldp	x29, x30, [sp]
    64c0:	add	sp, sp, #0x850
    64c4:	ret
    64c8:	mov	x0, #0xffffffffffffffba    	// #-70
    64cc:	ldp	x29, x30, [sp]
    64d0:	add	sp, sp, #0x850
    64d4:	ret
    64d8:	ldp	x29, x30, [sp]
    64dc:	ldp	x19, x20, [sp, #16]
    64e0:	ldp	x21, x22, [sp, #32]
    64e4:	ldr	x23, [sp, #48]
    64e8:	add	sp, sp, #0x850
    64ec:	ret
    64f0:	mov	x0, #0xffffffffffffffb8    	// #-72
    64f4:	ldp	x19, x20, [sp, #16]
    64f8:	ldp	x21, x22, [sp, #32]
    64fc:	ldr	x23, [sp, #48]
    6500:	b	64bc <HUF_decompress4X_hufOnly+0x154>
    6504:	nop
	...

0000000000006510 <HUF_decompress4X_hufOnly_wksp>:
    6510:	cbz	x2, 6654 <HUF_decompress4X_hufOnly_wksp+0x144>
    6514:	stp	x29, x30, [sp, #-64]!
    6518:	mov	x29, sp
    651c:	stp	x19, x20, [sp, #16]
    6520:	mov	x19, x4
    6524:	cbz	x4, 6644 <HUF_decompress4X_hufOnly_wksp+0x134>
    6528:	stp	x21, x22, [sp, #32]
    652c:	mov	x20, x2
    6530:	mov	x21, x3
    6534:	str	x23, [sp, #48]
    6538:	mov	x22, x0
    653c:	mov	x3, x5
    6540:	mov	x4, x6
    6544:	cmp	x2, x19
    6548:	mov	x23, x1
    654c:	b.hi	65c8 <HUF_decompress4X_hufOnly_wksp+0xb8>  // b.pmore
    6550:	mov	w2, #0x91                  	// #145
    6554:	mov	w6, #0x763                 	// #1891
    6558:	mov	w0, #0x80                  	// #128
    655c:	mov	w5, #0x2d2                 	// #722
    6560:	lsr	x1, x20, #8
    6564:	madd	w2, w2, w1, w6
    6568:	madd	w0, w0, w1, w5
    656c:	mov	x1, x21
    6570:	add	w2, w2, w2, lsr #3
    6574:	cmp	w0, w2
    6578:	mov	x2, x19
    657c:	mov	x0, x22
    6580:	b.ls	65f8 <HUF_decompress4X_hufOnly_wksp+0xe8>  // b.plast
    6584:	bl	5510 <HUF_readDTableX2_wksp>
    6588:	cmn	x0, #0x78
    658c:	b.hi	665c <HUF_decompress4X_hufOnly_wksp+0x14c>  // b.pmore
    6590:	cmp	x19, x0
    6594:	b.ls	6670 <HUF_decompress4X_hufOnly_wksp+0x160>  // b.plast
    6598:	sub	x3, x19, x0
    659c:	cmp	x3, #0x9
    65a0:	b.ls	663c <HUF_decompress4X_hufOnly_wksp+0x12c>  // b.plast
    65a4:	add	x2, x21, x0
    65a8:	mov	x4, x22
    65ac:	mov	x1, x20
    65b0:	mov	x0, x23
    65b4:	ldp	x19, x20, [sp, #16]
    65b8:	ldp	x21, x22, [sp, #32]
    65bc:	ldr	x23, [sp, #48]
    65c0:	ldp	x29, x30, [sp], #64
    65c4:	b	3220 <FSE_decompress+0x1c80>
    65c8:	lsl	x0, x19, #4
    65cc:	adrp	x1, 0 <FSE_versionNumber>
    65d0:	ldr	x2, [x1]
    65d4:	udiv	x0, x0, x20
    65d8:	ubfiz	x1, x0, #1, #32
    65dc:	add	x0, x1, w0, uxtw
    65e0:	lsl	x0, x0, #3
    65e4:	add	x1, x2, x0
    65e8:	ldr	w5, [x2, x0]
    65ec:	ldp	w0, w6, [x1, #4]
    65f0:	ldr	w2, [x1, #12]
    65f4:	b	6560 <HUF_decompress4X_hufOnly_wksp+0x50>
    65f8:	bl	4d60 <HUF_readDTableX1_wksp>
    65fc:	cmn	x0, #0x78
    6600:	b.hi	665c <HUF_decompress4X_hufOnly_wksp+0x14c>  // b.pmore
    6604:	cmp	x19, x0
    6608:	b.ls	6670 <HUF_decompress4X_hufOnly_wksp+0x160>  // b.plast
    660c:	sub	x3, x19, x0
    6610:	cmp	x3, #0x9
    6614:	b.ls	663c <HUF_decompress4X_hufOnly_wksp+0x12c>  // b.plast
    6618:	add	x2, x21, x0
    661c:	mov	x4, x22
    6620:	mov	x1, x20
    6624:	mov	x0, x23
    6628:	ldp	x19, x20, [sp, #16]
    662c:	ldp	x21, x22, [sp, #32]
    6630:	ldr	x23, [sp, #48]
    6634:	ldp	x29, x30, [sp], #64
    6638:	b	1e98 <FSE_decompress+0x8f8>
    663c:	ldp	x21, x22, [sp, #32]
    6640:	ldr	x23, [sp, #48]
    6644:	mov	x0, #0xffffffffffffffec    	// #-20
    6648:	ldp	x19, x20, [sp, #16]
    664c:	ldp	x29, x30, [sp], #64
    6650:	ret
    6654:	mov	x0, #0xffffffffffffffba    	// #-70
    6658:	ret
    665c:	ldp	x19, x20, [sp, #16]
    6660:	ldp	x21, x22, [sp, #32]
    6664:	ldr	x23, [sp, #48]
    6668:	ldp	x29, x30, [sp], #64
    666c:	ret
    6670:	mov	x0, #0xffffffffffffffb8    	// #-72
    6674:	ldp	x21, x22, [sp, #32]
    6678:	ldr	x23, [sp, #48]
    667c:	b	6648 <HUF_decompress4X_hufOnly_wksp+0x138>
	...

0000000000006688 <HUF_decompress1X_DCtx_wksp>:
    6688:	stp	x29, x30, [sp, #-80]!
    668c:	mov	x29, sp
    6690:	str	x4, [sp, #72]
    6694:	cbz	x2, 67b8 <HUF_decompress1X_DCtx_wksp+0x130>
    6698:	stp	x19, x20, [sp, #16]
    669c:	cmp	x2, x4
    66a0:	mov	x20, x4
    66a4:	mov	x19, x2
    66a8:	b.cc	67f8 <HUF_decompress1X_DCtx_wksp+0x170>  // b.lo, b.ul, b.last
    66ac:	stp	x21, x22, [sp, #32]
    66b0:	mov	x21, x3
    66b4:	str	x23, [sp, #48]
    66b8:	mov	x23, x1
    66bc:	b.eq	6820 <HUF_decompress1X_DCtx_wksp+0x198>  // b.none
    66c0:	cmp	x4, #0x1
    66c4:	b.eq	67d8 <HUF_decompress1X_DCtx_wksp+0x150>  // b.none
    66c8:	mov	x22, x0
    66cc:	cmp	x2, x4
    66d0:	b.ls	67a4 <HUF_decompress1X_DCtx_wksp+0x11c>  // b.plast
    66d4:	lsl	x2, x4, #4
    66d8:	adrp	x0, 0 <FSE_versionNumber>
    66dc:	ldr	x0, [x0]
    66e0:	udiv	x2, x2, x19
    66e4:	ubfiz	x1, x2, #1, #32
    66e8:	add	x2, x1, w2, uxtw
    66ec:	lsl	x2, x2, #3
    66f0:	add	x1, x0, x2
    66f4:	ldr	w3, [x0, x2]
    66f8:	ldp	w0, w4, [x1, #4]
    66fc:	ldr	w2, [x1, #12]
    6700:	lsr	x1, x19, #8
    6704:	madd	w2, w2, w1, w4
    6708:	mov	x4, x6
    670c:	madd	w0, w0, w1, w3
    6710:	mov	x3, x5
    6714:	mov	x1, x21
    6718:	add	w2, w2, w2, lsr #3
    671c:	cmp	w0, w2
    6720:	mov	x2, x20
    6724:	mov	x0, x22
    6728:	b.ls	6768 <HUF_decompress1X_DCtx_wksp+0xe0>  // b.plast
    672c:	bl	5510 <HUF_readDTableX2_wksp>
    6730:	cmn	x0, #0x78
    6734:	b.hi	67c4 <HUF_decompress1X_DCtx_wksp+0x13c>  // b.pmore
    6738:	cmp	x20, x0
    673c:	b.ls	6808 <HUF_decompress1X_DCtx_wksp+0x180>  // b.plast
    6740:	sub	x3, x20, x0
    6744:	add	x2, x21, x0
    6748:	mov	x4, x22
    674c:	mov	x1, x19
    6750:	mov	x0, x23
    6754:	ldp	x19, x20, [sp, #16]
    6758:	ldp	x21, x22, [sp, #32]
    675c:	ldr	x23, [sp, #48]
    6760:	ldp	x29, x30, [sp], #80
    6764:	b	19a0 <FSE_decompress+0x400>
    6768:	bl	4d60 <HUF_readDTableX1_wksp>
    676c:	cmn	x0, #0x78
    6770:	b.hi	67c4 <HUF_decompress1X_DCtx_wksp+0x13c>  // b.pmore
    6774:	cmp	x20, x0
    6778:	b.ls	6808 <HUF_decompress1X_DCtx_wksp+0x180>  // b.plast
    677c:	sub	x3, x20, x0
    6780:	add	x2, x21, x0
    6784:	mov	x4, x22
    6788:	mov	x1, x19
    678c:	mov	x0, x23
    6790:	ldp	x19, x20, [sp, #16]
    6794:	ldp	x21, x22, [sp, #32]
    6798:	ldr	x23, [sp, #48]
    679c:	ldp	x29, x30, [sp], #80
    67a0:	b	16a0 <FSE_decompress+0x100>
    67a4:	mov	w2, #0x91                  	// #145
    67a8:	mov	w4, #0x763                 	// #1891
    67ac:	mov	w0, #0x80                  	// #128
    67b0:	mov	w3, #0x2d2                 	// #722
    67b4:	b	6700 <HUF_decompress1X_DCtx_wksp+0x78>
    67b8:	mov	x0, #0xffffffffffffffba    	// #-70
    67bc:	ldp	x29, x30, [sp], #80
    67c0:	ret
    67c4:	ldp	x19, x20, [sp, #16]
    67c8:	ldp	x21, x22, [sp, #32]
    67cc:	ldr	x23, [sp, #48]
    67d0:	ldp	x29, x30, [sp], #80
    67d4:	ret
    67d8:	ldrb	w1, [x3]
    67dc:	mov	x0, x23
    67e0:	bl	0 <grub_memset>
    67e4:	mov	x0, x19
    67e8:	ldp	x19, x20, [sp, #16]
    67ec:	ldp	x21, x22, [sp, #32]
    67f0:	ldr	x23, [sp, #48]
    67f4:	b	67bc <HUF_decompress1X_DCtx_wksp+0x134>
    67f8:	mov	x0, #0xffffffffffffffec    	// #-20
    67fc:	ldp	x19, x20, [sp, #16]
    6800:	ldp	x29, x30, [sp], #80
    6804:	ret
    6808:	mov	x0, #0xffffffffffffffb8    	// #-72
    680c:	ldp	x19, x20, [sp, #16]
    6810:	ldp	x21, x22, [sp, #32]
    6814:	ldr	x23, [sp, #48]
    6818:	ldp	x29, x30, [sp], #80
    681c:	ret
    6820:	mov	x0, x23
    6824:	mov	x1, x3
    6828:	bl	0 <grub_memmove>
    682c:	mov	x0, x19
    6830:	ldp	x19, x20, [sp, #16]
    6834:	ldp	x21, x22, [sp, #32]
    6838:	ldr	x23, [sp, #48]
    683c:	b	67bc <HUF_decompress1X_DCtx_wksp+0x134>
	...

0000000000006848 <HUF_decompress1X_DCtx>:
    6848:	cbz	x2, 698c <HUF_decompress1X_DCtx+0x144>
    684c:	sub	sp, sp, #0x840
    6850:	cmp	x2, x4
    6854:	stp	x29, x30, [sp]
    6858:	mov	x29, sp
    685c:	stp	x19, x20, [sp, #16]
    6860:	mov	x20, x4
    6864:	mov	x19, x2
    6868:	str	x23, [sp, #48]
    686c:	mov	x23, x0
    6870:	mov	x0, #0xffffffffffffffec    	// #-20
    6874:	b.cc	6920 <HUF_decompress1X_DCtx+0xd8>  // b.lo, b.ul, b.last
    6878:	stp	x21, x22, [sp, #32]
    687c:	mov	x22, x1
    6880:	mov	x21, x3
    6884:	b.eq	69e0 <HUF_decompress1X_DCtx+0x198>  // b.none
    6888:	cmp	x4, #0x1
    688c:	b.eq	69ac <HUF_decompress1X_DCtx+0x164>  // b.none
    6890:	cmp	x2, x4
    6894:	b.ls	6978 <HUF_decompress1X_DCtx+0x130>  // b.plast
    6898:	lsl	x2, x4, #4
    689c:	adrp	x0, 0 <FSE_versionNumber>
    68a0:	ldr	x0, [x0]
    68a4:	udiv	x2, x2, x19
    68a8:	ubfiz	x1, x2, #1, #32
    68ac:	add	x2, x1, w2, uxtw
    68b0:	lsl	x2, x2, #3
    68b4:	add	x1, x0, x2
    68b8:	ldr	w3, [x0, x2]
    68bc:	ldp	w0, w4, [x1, #4]
    68c0:	ldr	w2, [x1, #12]
    68c4:	lsr	x1, x19, #8
    68c8:	madd	w2, w2, w1, w4
    68cc:	mov	x4, #0x800                 	// #2048
    68d0:	madd	w0, w0, w1, w3
    68d4:	add	x3, sp, #0x40
    68d8:	mov	x1, x21
    68dc:	add	w2, w2, w2, lsr #3
    68e0:	cmp	w0, w2
    68e4:	mov	x2, x20
    68e8:	mov	x0, x23
    68ec:	b.ls	6934 <HUF_decompress1X_DCtx+0xec>  // b.plast
    68f0:	bl	5510 <HUF_readDTableX2_wksp>
    68f4:	cmn	x0, #0x78
    68f8:	b.hi	6994 <HUF_decompress1X_DCtx+0x14c>  // b.pmore
    68fc:	cmp	x20, x0
    6900:	b.ls	69c4 <HUF_decompress1X_DCtx+0x17c>  // b.plast
    6904:	add	x2, x21, x0
    6908:	sub	x3, x20, x0
    690c:	mov	x4, x23
    6910:	mov	x0, x22
    6914:	mov	x1, x19
    6918:	bl	19a0 <FSE_decompress+0x400>
    691c:	ldp	x21, x22, [sp, #32]
    6920:	ldp	x29, x30, [sp]
    6924:	ldp	x19, x20, [sp, #16]
    6928:	ldr	x23, [sp, #48]
    692c:	add	sp, sp, #0x840
    6930:	ret
    6934:	bl	4d60 <HUF_readDTableX1_wksp>
    6938:	cmn	x0, #0x78
    693c:	b.hi	6994 <HUF_decompress1X_DCtx+0x14c>  // b.pmore
    6940:	cmp	x20, x0
    6944:	b.ls	69c4 <HUF_decompress1X_DCtx+0x17c>  // b.plast
    6948:	sub	x3, x20, x0
    694c:	add	x2, x21, x0
    6950:	mov	x4, x23
    6954:	mov	x1, x19
    6958:	mov	x0, x22
    695c:	bl	16a0 <FSE_decompress+0x100>
    6960:	ldp	x29, x30, [sp]
    6964:	ldp	x19, x20, [sp, #16]
    6968:	ldp	x21, x22, [sp, #32]
    696c:	ldr	x23, [sp, #48]
    6970:	add	sp, sp, #0x840
    6974:	ret
    6978:	mov	w2, #0x91                  	// #145
    697c:	mov	w4, #0x763                 	// #1891
    6980:	mov	w0, #0x80                  	// #128
    6984:	mov	w3, #0x2d2                 	// #722
    6988:	b	68c4 <HUF_decompress1X_DCtx+0x7c>
    698c:	mov	x0, #0xffffffffffffffba    	// #-70
    6990:	ret
    6994:	ldp	x29, x30, [sp]
    6998:	ldp	x19, x20, [sp, #16]
    699c:	ldp	x21, x22, [sp, #32]
    69a0:	ldr	x23, [sp, #48]
    69a4:	add	sp, sp, #0x840
    69a8:	ret
    69ac:	ldrb	w1, [x3]
    69b0:	mov	x0, x22
    69b4:	bl	0 <grub_memset>
    69b8:	mov	x0, x19
    69bc:	ldp	x21, x22, [sp, #32]
    69c0:	b	6920 <HUF_decompress1X_DCtx+0xd8>
    69c4:	mov	x0, #0xffffffffffffffb8    	// #-72
    69c8:	ldp	x29, x30, [sp]
    69cc:	ldp	x19, x20, [sp, #16]
    69d0:	ldp	x21, x22, [sp, #32]
    69d4:	ldr	x23, [sp, #48]
    69d8:	add	sp, sp, #0x840
    69dc:	ret
    69e0:	mov	x0, x22
    69e4:	mov	x1, x3
    69e8:	bl	0 <grub_memmove>
    69ec:	mov	x0, x19
    69f0:	ldp	x21, x22, [sp, #32]
    69f4:	b	6920 <HUF_decompress1X_DCtx+0xd8>
	...

0000000000006a00 <HUF_decompress1X_usingDTable_bmi2>:
    6a00:	stp	x29, x30, [sp, #-80]!
    6a04:	mov	x29, sp
    6a08:	stp	x19, x20, [sp, #16]
    6a0c:	mov	x19, x4
    6a10:	mov	x20, x0
    6a14:	add	x0, sp, #0x48
    6a18:	stp	x21, x22, [sp, #32]
    6a1c:	mov	x21, x1
    6a20:	mov	x22, x2
    6a24:	mov	x1, x4
    6a28:	mov	x2, #0x4                   	// #4
    6a2c:	str	x23, [sp, #48]
    6a30:	mov	x23, x3
    6a34:	bl	0 <grub_memmove>
    6a38:	ldrb	w0, [sp, #73]
    6a3c:	mov	x4, x19
    6a40:	mov	x3, x23
    6a44:	mov	x2, x22
    6a48:	mov	x1, x21
    6a4c:	cbz	w0, 6a6c <HUF_decompress1X_usingDTable_bmi2+0x6c>
    6a50:	mov	x0, x20
    6a54:	bl	19a0 <FSE_decompress+0x400>
    6a58:	ldp	x19, x20, [sp, #16]
    6a5c:	ldp	x21, x22, [sp, #32]
    6a60:	ldr	x23, [sp, #48]
    6a64:	ldp	x29, x30, [sp], #80
    6a68:	ret
    6a6c:	mov	x0, x20
    6a70:	bl	16a0 <FSE_decompress+0x100>
    6a74:	ldp	x19, x20, [sp, #16]
    6a78:	ldp	x21, x22, [sp, #32]
    6a7c:	ldr	x23, [sp, #48]
    6a80:	ldp	x29, x30, [sp], #80
    6a84:	ret

0000000000006a88 <HUF_decompress1X1_DCtx_wksp_bmi2>:
    6a88:	stp	x29, x30, [sp, #-64]!
    6a8c:	mov	x29, sp
    6a90:	stp	x19, x20, [sp, #16]
    6a94:	mov	x20, x3
    6a98:	mov	x19, x4
    6a9c:	mov	x3, x5
    6aa0:	mov	x4, x6
    6aa4:	stp	x21, x22, [sp, #32]
    6aa8:	mov	x21, x1
    6aac:	mov	x22, x2
    6ab0:	mov	x1, x20
    6ab4:	mov	x2, x19
    6ab8:	str	x23, [sp, #48]
    6abc:	mov	x23, x0
    6ac0:	bl	4d60 <HUF_readDTableX1_wksp>
    6ac4:	cmn	x0, #0x78
    6ac8:	b.hi	6b00 <HUF_decompress1X1_DCtx_wksp_bmi2+0x78>  // b.pmore
    6acc:	cmp	x19, x0
    6ad0:	b.ls	6afc <HUF_decompress1X1_DCtx_wksp_bmi2+0x74>  // b.plast
    6ad4:	sub	x3, x19, x0
    6ad8:	add	x2, x20, x0
    6adc:	mov	x4, x23
    6ae0:	mov	x1, x22
    6ae4:	mov	x0, x21
    6ae8:	ldp	x19, x20, [sp, #16]
    6aec:	ldp	x21, x22, [sp, #32]
    6af0:	ldr	x23, [sp, #48]
    6af4:	ldp	x29, x30, [sp], #64
    6af8:	b	16a0 <FSE_decompress+0x100>
    6afc:	mov	x0, #0xffffffffffffffb8    	// #-72
    6b00:	ldp	x19, x20, [sp, #16]
    6b04:	ldp	x21, x22, [sp, #32]
    6b08:	ldr	x23, [sp, #48]
    6b0c:	ldp	x29, x30, [sp], #64
    6b10:	ret
    6b14:	nop

0000000000006b18 <HUF_decompress4X_usingDTable_bmi2>:
    6b18:	stp	x29, x30, [sp, #-80]!
    6b1c:	mov	x29, sp
    6b20:	stp	x19, x20, [sp, #16]
    6b24:	mov	x19, x3
    6b28:	mov	x20, x4
    6b2c:	stp	x21, x22, [sp, #32]
    6b30:	mov	x21, x0
    6b34:	mov	x22, x1
    6b38:	add	x0, sp, #0x48
    6b3c:	mov	x1, x4
    6b40:	str	x23, [sp, #48]
    6b44:	mov	x23, x2
    6b48:	mov	x2, #0x4                   	// #4
    6b4c:	bl	0 <grub_memmove>
    6b50:	ldrb	w0, [sp, #73]
    6b54:	cmp	x19, #0x9
    6b58:	cbz	w0, 6b90 <HUF_decompress4X_usingDTable_bmi2+0x78>
    6b5c:	mov	x0, #0xffffffffffffffec    	// #-20
    6b60:	b.ls	6b7c <HUF_decompress4X_usingDTable_bmi2+0x64>  // b.plast
    6b64:	mov	x4, x20
    6b68:	mov	x3, x19
    6b6c:	mov	x2, x23
    6b70:	mov	x1, x22
    6b74:	mov	x0, x21
    6b78:	bl	3220 <FSE_decompress+0x1c80>
    6b7c:	ldp	x19, x20, [sp, #16]
    6b80:	ldp	x21, x22, [sp, #32]
    6b84:	ldr	x23, [sp, #48]
    6b88:	ldp	x29, x30, [sp], #80
    6b8c:	ret
    6b90:	mov	x0, #0xffffffffffffffec    	// #-20
    6b94:	b.ls	6b7c <HUF_decompress4X_usingDTable_bmi2+0x64>  // b.plast
    6b98:	mov	x4, x20
    6b9c:	mov	x3, x19
    6ba0:	mov	x2, x23
    6ba4:	mov	x1, x22
    6ba8:	mov	x0, x21
    6bac:	bl	1e98 <FSE_decompress+0x8f8>
    6bb0:	ldp	x19, x20, [sp, #16]
    6bb4:	ldp	x21, x22, [sp, #32]
    6bb8:	ldr	x23, [sp, #48]
    6bbc:	ldp	x29, x30, [sp], #80
    6bc0:	ret
    6bc4:	nop

0000000000006bc8 <HUF_decompress4X_hufOnly_wksp_bmi2>:
    6bc8:	cbz	x2, 6d0c <HUF_decompress4X_hufOnly_wksp_bmi2+0x144>
    6bcc:	stp	x29, x30, [sp, #-64]!
    6bd0:	mov	x29, sp
    6bd4:	stp	x19, x20, [sp, #16]
    6bd8:	mov	x19, x4
    6bdc:	cbz	x4, 6cfc <HUF_decompress4X_hufOnly_wksp_bmi2+0x134>
    6be0:	stp	x21, x22, [sp, #32]
    6be4:	mov	x20, x2
    6be8:	mov	x21, x3
    6bec:	str	x23, [sp, #48]
    6bf0:	mov	x22, x0
    6bf4:	mov	x3, x5
    6bf8:	mov	x4, x6
    6bfc:	cmp	x2, x19
    6c00:	mov	x23, x1
    6c04:	b.hi	6c80 <HUF_decompress4X_hufOnly_wksp_bmi2+0xb8>  // b.pmore
    6c08:	mov	w2, #0x91                  	// #145
    6c0c:	mov	w6, #0x763                 	// #1891
    6c10:	mov	w0, #0x80                  	// #128
    6c14:	mov	w5, #0x2d2                 	// #722
    6c18:	lsr	x1, x20, #8
    6c1c:	madd	w2, w2, w1, w6
    6c20:	madd	w0, w0, w1, w5
    6c24:	mov	x1, x21
    6c28:	add	w2, w2, w2, lsr #3
    6c2c:	cmp	w0, w2
    6c30:	mov	x2, x19
    6c34:	mov	x0, x22
    6c38:	b.ls	6cb0 <HUF_decompress4X_hufOnly_wksp_bmi2+0xe8>  // b.plast
    6c3c:	bl	5510 <HUF_readDTableX2_wksp>
    6c40:	cmn	x0, #0x78
    6c44:	b.hi	6d14 <HUF_decompress4X_hufOnly_wksp_bmi2+0x14c>  // b.pmore
    6c48:	cmp	x19, x0
    6c4c:	b.ls	6d28 <HUF_decompress4X_hufOnly_wksp_bmi2+0x160>  // b.plast
    6c50:	sub	x3, x19, x0
    6c54:	cmp	x3, #0x9
    6c58:	b.ls	6cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0x12c>  // b.plast
    6c5c:	add	x2, x21, x0
    6c60:	mov	x4, x22
    6c64:	mov	x1, x20
    6c68:	mov	x0, x23
    6c6c:	ldp	x19, x20, [sp, #16]
    6c70:	ldp	x21, x22, [sp, #32]
    6c74:	ldr	x23, [sp, #48]
    6c78:	ldp	x29, x30, [sp], #64
    6c7c:	b	3220 <FSE_decompress+0x1c80>
    6c80:	lsl	x0, x19, #4
    6c84:	adrp	x1, 0 <FSE_versionNumber>
    6c88:	ldr	x2, [x1]
    6c8c:	udiv	x0, x0, x20
    6c90:	ubfiz	x1, x0, #1, #32
    6c94:	add	x0, x1, w0, uxtw
    6c98:	lsl	x0, x0, #3
    6c9c:	add	x1, x2, x0
    6ca0:	ldr	w5, [x2, x0]
    6ca4:	ldp	w0, w6, [x1, #4]
    6ca8:	ldr	w2, [x1, #12]
    6cac:	b	6c18 <HUF_decompress4X_hufOnly_wksp_bmi2+0x50>
    6cb0:	bl	4d60 <HUF_readDTableX1_wksp>
    6cb4:	cmn	x0, #0x78
    6cb8:	b.hi	6d14 <HUF_decompress4X_hufOnly_wksp_bmi2+0x14c>  // b.pmore
    6cbc:	cmp	x19, x0
    6cc0:	b.ls	6d28 <HUF_decompress4X_hufOnly_wksp_bmi2+0x160>  // b.plast
    6cc4:	sub	x3, x19, x0
    6cc8:	cmp	x3, #0x9
    6ccc:	b.ls	6cf4 <HUF_decompress4X_hufOnly_wksp_bmi2+0x12c>  // b.plast
    6cd0:	add	x2, x21, x0
    6cd4:	mov	x4, x22
    6cd8:	mov	x1, x20
    6cdc:	mov	x0, x23
    6ce0:	ldp	x19, x20, [sp, #16]
    6ce4:	ldp	x21, x22, [sp, #32]
    6ce8:	ldr	x23, [sp, #48]
    6cec:	ldp	x29, x30, [sp], #64
    6cf0:	b	1e98 <FSE_decompress+0x8f8>
    6cf4:	ldp	x21, x22, [sp, #32]
    6cf8:	ldr	x23, [sp, #48]
    6cfc:	mov	x0, #0xffffffffffffffec    	// #-20
    6d00:	ldp	x19, x20, [sp, #16]
    6d04:	ldp	x29, x30, [sp], #64
    6d08:	ret
    6d0c:	mov	x0, #0xffffffffffffffba    	// #-70
    6d10:	ret
    6d14:	ldp	x19, x20, [sp, #16]
    6d18:	ldp	x21, x22, [sp, #32]
    6d1c:	ldr	x23, [sp, #48]
    6d20:	ldp	x29, x30, [sp], #64
    6d24:	ret
    6d28:	mov	x0, #0xffffffffffffffb8    	// #-72
    6d2c:	ldp	x21, x22, [sp, #32]
    6d30:	ldr	x23, [sp, #48]
    6d34:	b	6d00 <HUF_decompress4X_hufOnly_wksp_bmi2+0x138>
	...

0000000000006d40 <XXH_versionNumber>:
    6d40:	mov	w0, #0x25a                 	// #602
    6d44:	ret

0000000000006d48 <XXH32_copyState>:
    6d48:	mov	x2, #0x30                  	// #48
    6d4c:	b	0 <grub_memmove>

0000000000006d50 <XXH64_copyState>:
    6d50:	mov	x2, #0x58                  	// #88
    6d54:	b	0 <grub_memmove>

0000000000006d58 <XXH32>:
    6d58:	stp	x29, x30, [sp, #-128]!
    6d5c:	mov	x29, sp
    6d60:	stp	x19, x20, [sp, #16]
    6d64:	mov	w19, w2
    6d68:	stp	x27, x28, [sp, #80]
    6d6c:	mov	x27, x0
    6d70:	add	x20, x27, x1
    6d74:	str	x1, [sp, #96]
    6d78:	tst	x27, #0x3
    6d7c:	b.ne	6e9c <XXH32+0x144>  // b.any
    6d80:	cmp	x1, #0xf
    6d84:	b.hi	7100 <XXH32+0x3a8>  // b.pmore
    6d88:	mov	w0, #0x67b1                	// #26545
    6d8c:	movk	w0, #0x1656, lsl #16
    6d90:	add	w19, w2, w0
    6d94:	ldr	w0, [sp, #96]
    6d98:	add	x5, x27, #0x4
    6d9c:	cmp	x5, x20
    6da0:	add	w19, w19, w0
    6da4:	b.hi	6dec <XXH32+0x94>  // b.pmore
    6da8:	mov	w4, #0xae3d                	// #44605
    6dac:	mov	w1, #0xeb2f                	// #60207
    6db0:	mov	x0, x5
    6db4:	movk	w4, #0xc2b2, lsl #16
    6db8:	movk	w1, #0x27d4, lsl #16
    6dbc:	nop
    6dc0:	ldur	w2, [x0, #-4]
    6dc4:	add	x0, x0, #0x4
    6dc8:	cmp	x20, x0
    6dcc:	madd	w19, w2, w4, w19
    6dd0:	ror	w19, w19, #15
    6dd4:	mul	w19, w19, w1
    6dd8:	b.cs	6dc0 <XXH32+0x68>  // b.hs, b.nlast
    6ddc:	sub	x0, x20, #0x4
    6de0:	sub	x27, x0, x27
    6de4:	and	x27, x27, #0xfffffffffffffffc
    6de8:	add	x27, x5, x27
    6dec:	cmp	x27, x20
    6df0:	b.cs	6e68 <XXH32+0x110>  // b.hs, b.nlast
    6df4:	mov	x1, x27
    6df8:	mov	w4, #0x67b1                	// #26545
    6dfc:	movk	w4, #0x1656, lsl #16
    6e00:	mov	w2, #0x79b1                	// #31153
    6e04:	movk	w2, #0x9e37, lsl #16
    6e08:	ldrb	w0, [x1], #1
    6e0c:	cmp	x20, x1
    6e10:	madd	w19, w0, w4, w19
    6e14:	ror	w19, w19, #21
    6e18:	mul	w19, w19, w2
    6e1c:	b.ls	6e68 <XXH32+0x110>  // b.plast
    6e20:	ldrb	w0, [x27, #1]
    6e24:	add	x1, x27, #0x2
    6e28:	cmp	x20, x1
    6e2c:	madd	w19, w0, w4, w19
    6e30:	ror	w19, w19, #21
    6e34:	mul	w19, w19, w2
    6e38:	b.ls	6e68 <XXH32+0x110>  // b.plast
    6e3c:	ldrb	w0, [x27, #2]
    6e40:	add	x1, x27, #0x3
    6e44:	cmp	x20, x1
    6e48:	madd	w19, w0, w4, w19
    6e4c:	ror	w19, w19, #21
    6e50:	mul	w19, w19, w2
    6e54:	b.ls	6e68 <XXH32+0x110>  // b.plast
    6e58:	ldrb	w0, [x27, #3]
    6e5c:	madd	w19, w0, w4, w19
    6e60:	ror	w19, w19, #21
    6e64:	mul	w19, w19, w2
    6e68:	eor	w19, w19, w19, lsr #15
    6e6c:	mov	w0, #0xca77                	// #51831
    6e70:	movk	w0, #0x85eb, lsl #16
    6e74:	mov	w1, #0xae3d                	// #44605
    6e78:	movk	w1, #0xc2b2, lsl #16
    6e7c:	mul	w0, w19, w0
    6e80:	ldp	x19, x20, [sp, #16]
    6e84:	eor	w0, w0, w0, lsr #13
    6e88:	ldp	x27, x28, [sp, #80]
    6e8c:	mul	w0, w0, w1
    6e90:	ldp	x29, x30, [sp], #128
    6e94:	eor	w0, w0, w0, lsr #16
    6e98:	ret
    6e9c:	stp	x21, x22, [sp, #32]
    6ea0:	cmp	x1, #0xf
    6ea4:	stp	x23, x24, [sp, #48]
    6ea8:	stp	x25, x26, [sp, #64]
    6eac:	b.hi	6fe8 <XXH32+0x290>  // b.pmore
    6eb0:	mov	w2, #0x67b1                	// #26545
    6eb4:	movk	w2, #0x1656, lsl #16
    6eb8:	add	w2, w19, w2
    6ebc:	ldr	w0, [sp, #96]
    6ec0:	add	x24, x27, #0x4
    6ec4:	cmp	x24, x20
    6ec8:	add	w19, w2, w0
    6ecc:	b.hi	6f2c <XXH32+0x1d4>  // b.pmore
    6ed0:	sub	x26, x20, #0x4
    6ed4:	mov	w25, #0xae3d                	// #44605
    6ed8:	sub	x26, x26, x27
    6edc:	mov	w23, #0xeb2f                	// #60207
    6ee0:	and	x22, x26, #0xfffffffffffffffc
    6ee4:	add	x21, sp, #0x7c
    6ee8:	add	x22, x24, x22
    6eec:	movk	w25, #0xc2b2, lsl #16
    6ef0:	movk	w23, #0x27d4, lsl #16
    6ef4:	nop
    6ef8:	mov	x1, x27
    6efc:	mov	x0, x21
    6f00:	mov	x2, #0x4                   	// #4
    6f04:	bl	0 <grub_memmove>
    6f08:	ldr	w0, [sp, #124]
    6f0c:	add	x27, x27, #0x4
    6f10:	cmp	x22, x27
    6f14:	madd	w19, w0, w25, w19
    6f18:	ror	w19, w19, #15
    6f1c:	mul	w19, w19, w23
    6f20:	b.ne	6ef8 <XXH32+0x1a0>  // b.any
    6f24:	and	x26, x26, #0xfffffffffffffffc
    6f28:	add	x27, x24, x26
    6f2c:	cmp	x27, x20
    6f30:	b.cs	6fa8 <XXH32+0x250>  // b.hs, b.nlast
    6f34:	mov	x1, x27
    6f38:	mov	w4, #0x67b1                	// #26545
    6f3c:	movk	w4, #0x1656, lsl #16
    6f40:	mov	w2, #0x79b1                	// #31153
    6f44:	movk	w2, #0x9e37, lsl #16
    6f48:	ldrb	w0, [x1], #1
    6f4c:	cmp	x20, x1
    6f50:	madd	w19, w0, w4, w19
    6f54:	ror	w19, w19, #21
    6f58:	mul	w19, w19, w2
    6f5c:	b.ls	6fa8 <XXH32+0x250>  // b.plast
    6f60:	ldrb	w0, [x27, #1]
    6f64:	add	x1, x27, #0x2
    6f68:	cmp	x20, x1
    6f6c:	madd	w19, w0, w4, w19
    6f70:	ror	w19, w19, #21
    6f74:	mul	w19, w19, w2
    6f78:	b.ls	6fa8 <XXH32+0x250>  // b.plast
    6f7c:	ldrb	w0, [x27, #2]
    6f80:	add	x1, x27, #0x3
    6f84:	cmp	x20, x1
    6f88:	madd	w19, w0, w4, w19
    6f8c:	ror	w19, w19, #21
    6f90:	mul	w19, w19, w2
    6f94:	b.ls	6fa8 <XXH32+0x250>  // b.plast
    6f98:	ldrb	w0, [x27, #3]
    6f9c:	madd	w19, w0, w4, w19
    6fa0:	ror	w19, w19, #21
    6fa4:	mul	w19, w19, w2
    6fa8:	eor	w19, w19, w19, lsr #15
    6fac:	mov	w0, #0xca77                	// #51831
    6fb0:	movk	w0, #0x85eb, lsl #16
    6fb4:	mov	w1, #0xae3d                	// #44605
    6fb8:	movk	w1, #0xc2b2, lsl #16
    6fbc:	mul	w0, w19, w0
    6fc0:	ldp	x19, x20, [sp, #16]
    6fc4:	eor	w0, w0, w0, lsr #13
    6fc8:	ldp	x21, x22, [sp, #32]
    6fcc:	mul	w0, w0, w1
    6fd0:	ldp	x23, x24, [sp, #48]
    6fd4:	eor	w0, w0, w0, lsr #16
    6fd8:	ldp	x25, x26, [sp, #64]
    6fdc:	ldp	x27, x28, [sp, #80]
    6fe0:	ldp	x29, x30, [sp], #128
    6fe4:	ret
    6fe8:	mov	w28, #0x4428                	// #17448
    6fec:	mov	w24, #0xca77                	// #51831
    6ff0:	movk	w28, #0x2423, lsl #16
    6ff4:	movk	w24, #0x85eb, lsl #16
    6ff8:	add	w28, w2, w28
    6ffc:	add	w26, w2, w24
    7000:	mov	w2, #0x864f                	// #34383
    7004:	mov	w25, #0x79b1                	// #31153
    7008:	movk	w2, #0x61c8, lsl #16
    700c:	mov	x23, x27
    7010:	add	w22, w19, w2
    7014:	add	x21, sp, #0x7c
    7018:	sub	x0, x20, #0x10
    701c:	movk	w25, #0x9e37, lsl #16
    7020:	str	x0, [sp, #104]
    7024:	nop
    7028:	mov	x1, x23
    702c:	mov	x2, #0x4                   	// #4
    7030:	mov	x0, x21
    7034:	bl	0 <grub_memmove>
    7038:	ldr	w4, [sp, #124]
    703c:	mov	x2, #0x4                   	// #4
    7040:	mov	x0, x21
    7044:	add	x1, x23, x2
    7048:	madd	w28, w4, w24, w28
    704c:	bl	0 <grub_memmove>
    7050:	ldr	w4, [sp, #124]
    7054:	add	x1, x23, #0x8
    7058:	mov	x2, #0x4                   	// #4
    705c:	mov	x0, x21
    7060:	ror	w28, w28, #19
    7064:	madd	w26, w4, w24, w26
    7068:	bl	0 <grub_memmove>
    706c:	ldr	w4, [sp, #124]
    7070:	add	x1, x23, #0xc
    7074:	mov	x2, #0x4                   	// #4
    7078:	mov	x0, x21
    707c:	add	x23, x23, #0x10
    7080:	ror	w26, w26, #19
    7084:	mul	w28, w28, w25
    7088:	madd	w19, w4, w24, w19
    708c:	bl	0 <grub_memmove>
    7090:	ldr	w2, [sp, #124]
    7094:	mul	w26, w26, w25
    7098:	ldr	x0, [sp, #104]
    709c:	ror	w19, w19, #19
    70a0:	madd	w2, w2, w24, w22
    70a4:	cmp	x0, x23
    70a8:	mul	w19, w19, w25
    70ac:	ror	w2, w2, #19
    70b0:	mul	w22, w2, w25
    70b4:	b.cs	7028 <XXH32+0x2d0>  // b.hs, b.nlast
    70b8:	ldr	x0, [sp, #96]
    70bc:	sub	x1, x20, #0xf
    70c0:	add	x4, x27, #0x1
    70c4:	ror	w2, w19, #20
    70c8:	sub	x0, x0, #0x10
    70cc:	cmp	x1, x4
    70d0:	and	x0, x0, #0xfffffffffffffff0
    70d4:	ror	w5, w22, #14
    70d8:	ror	w19, w28, #31
    70dc:	add	x0, x0, #0x10
    70e0:	ror	w26, w26, #25
    70e4:	add	w2, w2, w5
    70e8:	add	w19, w19, w26
    70ec:	mov	x1, #0x10                  	// #16
    70f0:	csel	x0, x0, x1, cs  // cs = hs, nlast
    70f4:	add	w2, w2, w19
    70f8:	add	x27, x27, x0
    70fc:	b	6ebc <XXH32+0x164>
    7100:	mov	w5, #0x4428                	// #17448
    7104:	mov	w6, #0xca77                	// #51831
    7108:	mov	w1, #0x864f                	// #34383
    710c:	movk	w5, #0x2423, lsl #16
    7110:	movk	w6, #0x85eb, lsl #16
    7114:	movk	w1, #0x61c8, lsl #16
    7118:	mov	w7, #0x79b1                	// #31153
    711c:	add	w8, w2, w5
    7120:	add	w10, w2, w6
    7124:	sub	x11, x20, #0x10
    7128:	add	w9, w2, w1
    712c:	mov	x0, x27
    7130:	movk	w7, #0x9e37, lsl #16
    7134:	nop
    7138:	ldp	w2, w1, [x0, #8]
    713c:	ldp	w5, w4, [x0]
    7140:	add	x0, x0, #0x10
    7144:	madd	w19, w2, w6, w19
    7148:	cmp	x11, x0
    714c:	madd	w1, w1, w6, w9
    7150:	madd	w5, w5, w6, w8
    7154:	madd	w4, w4, w6, w10
    7158:	ror	w19, w19, #19
    715c:	ror	w1, w1, #19
    7160:	ror	w5, w5, #19
    7164:	mul	w19, w19, w7
    7168:	ror	w2, w4, #19
    716c:	mul	w9, w1, w7
    7170:	mul	w8, w5, w7
    7174:	mul	w10, w2, w7
    7178:	b.cs	7138 <XXH32+0x3e0>  // b.hs, b.nlast
    717c:	ldr	x0, [sp, #96]
    7180:	add	x6, x27, #0x1
    7184:	sub	x4, x20, #0xf
    7188:	ror	w2, w19, #20
    718c:	sub	x0, x0, #0x10
    7190:	ror	w1, w9, #14
    7194:	and	x0, x0, #0xfffffffffffffff0
    7198:	ror	w5, w8, #31
    719c:	cmp	x4, x6
    71a0:	ror	w19, w10, #25
    71a4:	add	x0, x0, #0x10
    71a8:	add	w2, w2, w1
    71ac:	add	w19, w5, w19
    71b0:	mov	x1, #0x10                  	// #16
    71b4:	csel	x0, x0, x1, cs  // cs = hs, nlast
    71b8:	add	w19, w2, w19
    71bc:	add	x27, x27, x0
    71c0:	b	6d94 <XXH32+0x3c>
    71c4:	nop

00000000000071c8 <XXH64>:
    71c8:	stp	x29, x30, [sp, #-160]!
    71cc:	mov	x29, sp
    71d0:	stp	x19, x20, [sp, #16]
    71d4:	mov	x19, x2
    71d8:	stp	x21, x22, [sp, #32]
    71dc:	mov	x22, x0
    71e0:	mov	x0, x1
    71e4:	stp	x27, x28, [sp, #80]
    71e8:	tst	x22, #0x7
    71ec:	add	x28, x22, x1
    71f0:	str	x1, [sp, #120]
    71f4:	b.ne	74d4 <XXH64+0x30c>  // b.any
    71f8:	cmp	x1, #0x1f
    71fc:	b.hi	7374 <XXH64+0x1ac>  // b.pmore
    7200:	mov	x3, #0x67c5                	// #26565
    7204:	movk	x3, #0x1656, lsl #16
    7208:	movk	x3, #0xeb2f, lsl #32
    720c:	movk	x3, #0x27d4, lsl #48
    7210:	add	x2, x2, x3
    7214:	add	x7, x22, #0x8
    7218:	add	x19, x0, x2
    721c:	cmp	x7, x28
    7220:	b.hi	7290 <XXH64+0xc8>  // b.pmore
    7224:	mov	x6, #0xeb4f                	// #60239
    7228:	mov	x2, #0xca87                	// #51847
    722c:	mov	x3, #0xae63                	// #44643
    7230:	movk	x6, #0x27d4, lsl #16
    7234:	movk	x2, #0x85eb, lsl #16
    7238:	movk	x3, #0xc2b2, lsl #16
    723c:	movk	x6, #0xae3d, lsl #32
    7240:	movk	x2, #0x79b1, lsl #32
    7244:	movk	x3, #0xca77, lsl #32
    7248:	mov	x1, x7
    724c:	movk	x6, #0xc2b2, lsl #48
    7250:	movk	x2, #0x9e37, lsl #48
    7254:	movk	x3, #0x85eb, lsl #48
    7258:	ldur	x0, [x1, #-8]
    725c:	add	x1, x1, #0x8
    7260:	cmp	x1, x28
    7264:	mul	x0, x0, x6
    7268:	ror	x0, x0, #33
    726c:	mul	x0, x0, x2
    7270:	eor	x19, x0, x19
    7274:	ror	x19, x19, #37
    7278:	madd	x19, x19, x2, x3
    727c:	b.ls	7258 <XXH64+0x90>  // b.plast
    7280:	sub	x0, x28, #0x8
    7284:	sub	x4, x0, x22
    7288:	and	x4, x4, #0xfffffffffffffff8
    728c:	add	x22, x7, x4
    7290:	add	x1, x22, #0x4
    7294:	cmp	x1, x28
    7298:	b.hi	72e4 <XXH64+0x11c>  // b.pmore
    729c:	mov	x6, #0xca87                	// #51847
    72a0:	ldr	w0, [x22]
    72a4:	movk	x6, #0x85eb, lsl #16
    72a8:	mov	x3, #0xeb4f                	// #60239
    72ac:	movk	x6, #0x79b1, lsl #32
    72b0:	mov	x2, #0x79f9                	// #31225
    72b4:	movk	x6, #0x9e37, lsl #48
    72b8:	movk	x3, #0x27d4, lsl #16
    72bc:	movk	x2, #0x9e37, lsl #16
    72c0:	movk	x3, #0xae3d, lsl #32
    72c4:	mul	x0, x0, x6
    72c8:	movk	x2, #0x67b1, lsl #32
    72cc:	movk	x3, #0xc2b2, lsl #48
    72d0:	movk	x2, #0x1656, lsl #48
    72d4:	eor	x19, x0, x19
    72d8:	mov	x22, x1
    72dc:	ror	x19, x19, #41
    72e0:	madd	x19, x19, x3, x2
    72e4:	cmp	x22, x28
    72e8:	b.cs	732c <XXH64+0x164>  // b.hs, b.nlast
    72ec:	mov	x2, #0x67c5                	// #26565
    72f0:	mov	x1, #0xca87                	// #51847
    72f4:	movk	x2, #0x1656, lsl #16
    72f8:	movk	x1, #0x85eb, lsl #16
    72fc:	movk	x2, #0xeb2f, lsl #32
    7300:	movk	x1, #0x79b1, lsl #32
    7304:	movk	x2, #0x27d4, lsl #48
    7308:	movk	x1, #0x9e37, lsl #48
    730c:	nop
    7310:	ldrb	w0, [x22], #1
    7314:	cmp	x22, x28
    7318:	mul	x0, x0, x2
    731c:	eor	x19, x0, x19
    7320:	ror	x19, x19, #53
    7324:	mul	x19, x19, x1
    7328:	b.ne	7310 <XXH64+0x148>  // b.any
    732c:	mov	x0, #0xeb4f                	// #60239
    7330:	eor	x19, x19, x19, lsr #33
    7334:	movk	x0, #0x27d4, lsl #16
    7338:	mov	x1, #0x79f9                	// #31225
    733c:	movk	x0, #0xae3d, lsl #32
    7340:	movk	x1, #0x9e37, lsl #16
    7344:	movk	x0, #0xc2b2, lsl #48
    7348:	movk	x1, #0x67b1, lsl #32
    734c:	movk	x1, #0x1656, lsl #48
    7350:	mul	x0, x19, x0
    7354:	ldp	x19, x20, [sp, #16]
    7358:	eor	x0, x0, x0, lsr #29
    735c:	ldp	x21, x22, [sp, #32]
    7360:	mul	x0, x0, x1
    7364:	ldp	x27, x28, [sp, #80]
    7368:	eor	x0, x0, x0, lsr #32
    736c:	ldp	x29, x30, [sp], #160
    7370:	ret
    7374:	mov	x7, #0xb5d6                	// #46550
    7378:	mov	x8, #0xeb4f                	// #60239
    737c:	mov	x3, #0x3579                	// #13689
    7380:	movk	x7, #0xadc0, lsl #16
    7384:	movk	x8, #0x27d4, lsl #16
    7388:	movk	x3, #0x7a14, lsl #16
    738c:	mov	x9, #0xca87                	// #51847
    7390:	movk	x7, #0x27ee, lsl #32
    7394:	movk	x8, #0xae3d, lsl #32
    7398:	movk	x3, #0x864e, lsl #32
    739c:	movk	x9, #0x85eb, lsl #16
    73a0:	movk	x7, #0x60ea, lsl #48
    73a4:	movk	x8, #0xc2b2, lsl #48
    73a8:	movk	x3, #0x61c8, lsl #48
    73ac:	movk	x9, #0x79b1, lsl #32
    73b0:	add	x10, x2, x7
    73b4:	add	x12, x2, x8
    73b8:	sub	x13, x28, #0x20
    73bc:	add	x11, x2, x3
    73c0:	mov	x1, x22
    73c4:	movk	x9, #0x9e37, lsl #48
    73c8:	stp	x25, x26, [sp, #64]
    73cc:	nop
    73d0:	ldp	x7, x0, [x1]
    73d4:	ldp	x2, x3, [x1, #16]
    73d8:	add	x1, x1, #0x20
    73dc:	cmp	x13, x1
    73e0:	madd	x7, x7, x8, x10
    73e4:	madd	x0, x0, x8, x12
    73e8:	madd	x2, x2, x8, x19
    73ec:	madd	x3, x3, x8, x11
    73f0:	ror	x7, x7, #33
    73f4:	ror	x0, x0, #33
    73f8:	ror	x25, x2, #33
    73fc:	mul	x10, x7, x9
    7400:	ror	x3, x3, #33
    7404:	mul	x12, x0, x9
    7408:	mul	x19, x25, x9
    740c:	mul	x11, x3, x9
    7410:	b.cs	73d0 <XXH64+0x208>  // b.hs, b.nlast
    7414:	mov	x2, #0x6ca9                	// #27817
    7418:	ror	x6, x19, #52
    741c:	movk	x2, #0xf79, lsl #16
    7420:	ror	x11, x11, #46
    7424:	movk	x2, #0x5b01, lsl #32
    7428:	ror	x12, x12, #57
    742c:	movk	x2, #0xdef3, lsl #48
    7430:	add	x11, x6, x11
    7434:	mov	x19, #0xae63                	// #44643
    7438:	sub	x8, x28, #0x1f
    743c:	mul	x1, x7, x2
    7440:	ror	x7, x10, #63
    7444:	mul	x0, x0, x2
    7448:	add	x7, x7, x12
    744c:	add	x7, x11, x7
    7450:	movk	x19, #0xc2b2, lsl #16
    7454:	movk	x19, #0xca77, lsl #32
    7458:	ror	x1, x1, #33
    745c:	movk	x19, #0x85eb, lsl #48
    7460:	ror	x0, x0, #33
    7464:	mul	x25, x25, x2
    7468:	mul	x1, x1, x9
    746c:	mul	x2, x3, x2
    7470:	eor	x7, x7, x1
    7474:	mul	x0, x0, x9
    7478:	ror	x1, x25, #33
    747c:	ror	x2, x2, #33
    7480:	madd	x3, x7, x9, x19
    7484:	add	x7, x22, #0x1
    7488:	mul	x1, x1, x9
    748c:	cmp	x8, x7
    7490:	eor	x0, x0, x3
    7494:	mul	x2, x2, x9
    7498:	ldr	x4, [sp, #120]
    749c:	madd	x0, x0, x9, x19
    74a0:	sub	x6, x4, #0x20
    74a4:	eor	x0, x1, x0
    74a8:	and	x6, x6, #0xffffffffffffffe0
    74ac:	add	x3, x6, #0x20
    74b0:	mov	x6, #0x20                  	// #32
    74b4:	csel	x3, x3, x6, cs  // cs = hs, nlast
    74b8:	madd	x0, x0, x9, x19
    74bc:	add	x22, x22, x3
    74c0:	ldp	x25, x26, [sp, #64]
    74c4:	eor	x2, x2, x0
    74c8:	mov	x0, x4
    74cc:	madd	x2, x2, x9, x19
    74d0:	b	7214 <XXH64+0x4c>
    74d4:	stp	x23, x24, [sp, #48]
    74d8:	cmp	x1, #0x1f
    74dc:	stp	x25, x26, [sp, #64]
    74e0:	b.ls	7834 <XXH64+0x66c>  // b.plast
    74e4:	mov	x27, #0xb5d6                	// #46550
    74e8:	mov	x26, #0xeb4f                	// #60239
    74ec:	mov	x0, #0x3579                	// #13689
    74f0:	movk	x27, #0xadc0, lsl #16
    74f4:	movk	x26, #0x27d4, lsl #16
    74f8:	movk	x0, #0x7a14, lsl #16
    74fc:	mov	x25, #0xca87                	// #51847
    7500:	movk	x27, #0x27ee, lsl #32
    7504:	movk	x26, #0xae3d, lsl #32
    7508:	movk	x0, #0x864e, lsl #32
    750c:	movk	x25, #0x85eb, lsl #16
    7510:	movk	x27, #0x60ea, lsl #48
    7514:	movk	x26, #0xc2b2, lsl #48
    7518:	movk	x0, #0x61c8, lsl #48
    751c:	movk	x25, #0x79b1, lsl #32
    7520:	add	x27, x2, x27
    7524:	add	x20, x2, x26
    7528:	add	x7, x2, x0
    752c:	mov	x21, x22
    7530:	add	x24, sp, #0x98
    7534:	sub	x1, x28, #0x20
    7538:	movk	x25, #0x9e37, lsl #48
    753c:	str	x1, [sp, #128]
    7540:	mov	x1, x21
    7544:	mov	x2, #0x8                   	// #8
    7548:	mov	x0, x24
    754c:	str	x7, [sp, #112]
    7550:	bl	0 <grub_memmove>
    7554:	mov	x2, #0x8                   	// #8
    7558:	mov	x0, x24
    755c:	add	x1, x21, x2
    7560:	ldr	x23, [sp, #152]
    7564:	bl	0 <grub_memmove>
    7568:	ldr	x3, [sp, #152]
    756c:	add	x1, x21, #0x10
    7570:	mov	x2, #0x8                   	// #8
    7574:	mov	x0, x24
    7578:	madd	x23, x23, x26, x27
    757c:	madd	x20, x3, x26, x20
    7580:	ror	x23, x23, #33
    7584:	ror	x3, x20, #33
    7588:	mov	x20, x3
    758c:	str	x3, [sp, #136]
    7590:	mul	x27, x23, x25
    7594:	bl	0 <grub_memmove>
    7598:	ldr	x3, [sp, #152]
    759c:	add	x1, x21, #0x18
    75a0:	mov	x0, x24
    75a4:	mov	x2, #0x8                   	// #8
    75a8:	add	x21, x21, #0x20
    75ac:	mul	x20, x20, x25
    75b0:	madd	x6, x3, x26, x19
    75b4:	ror	x3, x6, #33
    75b8:	str	x3, [sp, #104]
    75bc:	bl	0 <grub_memmove>
    75c0:	ldp	x3, x7, [sp, #104]
    75c4:	ldr	x0, [sp, #152]
    75c8:	ldr	x1, [sp, #128]
    75cc:	madd	x0, x0, x26, x7
    75d0:	mul	x19, x3, x25
    75d4:	cmp	x1, x21
    75d8:	ror	x0, x0, #33
    75dc:	mul	x7, x0, x25
    75e0:	b.cs	7540 <XXH64+0x378>  // b.hs, b.nlast
    75e4:	mov	x9, #0x6ca9                	// #27817
    75e8:	ror	x6, x19, #52
    75ec:	movk	x9, #0xf79, lsl #16
    75f0:	ror	x4, x20, #57
    75f4:	movk	x9, #0x5b01, lsl #32
    75f8:	ror	x7, x7, #46
    75fc:	movk	x9, #0xdef3, lsl #48
    7600:	ror	x27, x27, #63
    7604:	ldr	x1, [sp, #136]
    7608:	mul	x2, x23, x9
    760c:	add	x7, x6, x7
    7610:	add	x27, x27, x4
    7614:	mov	x19, #0xae63                	// #44643
    7618:	add	x27, x7, x27
    761c:	mul	x1, x1, x9
    7620:	ror	x2, x2, #33
    7624:	movk	x19, #0xc2b2, lsl #16
    7628:	mul	x3, x3, x9
    762c:	movk	x19, #0xca77, lsl #32
    7630:	mul	x6, x0, x9
    7634:	mul	x2, x2, x25
    7638:	ror	x1, x1, #33
    763c:	movk	x19, #0x85eb, lsl #48
    7640:	ror	x0, x3, #33
    7644:	eor	x2, x27, x2
    7648:	ror	x6, x6, #33
    764c:	mul	x1, x1, x25
    7650:	add	x9, x22, #0x1
    7654:	mul	x0, x0, x25
    7658:	sub	x7, x28, #0x1f
    765c:	madd	x2, x2, x25, x19
    7660:	cmp	x7, x9
    7664:	ldr	x4, [sp, #120]
    7668:	eor	x1, x1, x2
    766c:	mul	x6, x6, x25
    7670:	mov	x3, #0x20                  	// #32
    7674:	sub	x8, x4, #0x20
    7678:	madd	x1, x1, x25, x19
    767c:	and	x8, x8, #0xffffffffffffffe0
    7680:	add	x2, x8, #0x20
    7684:	eor	x0, x0, x1
    7688:	csel	x2, x2, x3, cs  // cs = hs, nlast
    768c:	add	x22, x22, x2
    7690:	madd	x0, x0, x25, x19
    7694:	eor	x6, x6, x0
    7698:	madd	x19, x6, x25, x19
    769c:	ldr	x0, [sp, #120]
    76a0:	add	x23, x22, #0x8
    76a4:	cmp	x23, x28
    76a8:	add	x19, x0, x19
    76ac:	b.hi	7738 <XXH64+0x570>  // b.pmore
    76b0:	sub	x25, x28, #0x8
    76b4:	mov	x26, x22
    76b8:	sub	x25, x25, x22
    76bc:	mov	x27, #0xca87                	// #51847
    76c0:	mov	x22, #0xeb4f                	// #60239
    76c4:	mov	x21, #0xae63                	// #44643
    76c8:	and	x20, x25, #0xfffffffffffffff8
    76cc:	movk	x22, #0x27d4, lsl #16
    76d0:	movk	x27, #0x85eb, lsl #16
    76d4:	movk	x21, #0xc2b2, lsl #16
    76d8:	movk	x22, #0xae3d, lsl #32
    76dc:	movk	x27, #0x79b1, lsl #32
    76e0:	movk	x21, #0xca77, lsl #32
    76e4:	add	x24, sp, #0x98
    76e8:	add	x20, x23, x20
    76ec:	movk	x22, #0xc2b2, lsl #48
    76f0:	movk	x27, #0x9e37, lsl #48
    76f4:	movk	x21, #0x85eb, lsl #48
    76f8:	mov	x1, x26
    76fc:	mov	x0, x24
    7700:	mov	x2, #0x8                   	// #8
    7704:	bl	0 <grub_memmove>
    7708:	ldr	x0, [sp, #152]
    770c:	add	x26, x26, #0x8
    7710:	cmp	x20, x26
    7714:	mul	x0, x0, x22
    7718:	ror	x0, x0, #33
    771c:	mul	x0, x0, x27
    7720:	eor	x19, x0, x19
    7724:	ror	x19, x19, #37
    7728:	madd	x19, x19, x27, x21
    772c:	b.ne	76f8 <XXH64+0x530>  // b.any
    7730:	and	x4, x25, #0xfffffffffffffff8
    7734:	add	x22, x23, x4
    7738:	add	x20, x22, #0x4
    773c:	cmp	x20, x28
    7740:	b.hi	779c <XXH64+0x5d4>  // b.pmore
    7744:	mov	x1, x22
    7748:	mov	x2, #0x4                   	// #4
    774c:	add	x0, sp, #0x98
    7750:	bl	0 <grub_memmove>
    7754:	mov	x3, #0xca87                	// #51847
    7758:	ldr	w0, [sp, #152]
    775c:	movk	x3, #0x85eb, lsl #16
    7760:	mov	x2, #0xeb4f                	// #60239
    7764:	movk	x3, #0x79b1, lsl #32
    7768:	mov	x1, #0x79f9                	// #31225
    776c:	movk	x3, #0x9e37, lsl #48
    7770:	movk	x2, #0x27d4, lsl #16
    7774:	movk	x1, #0x9e37, lsl #16
    7778:	movk	x2, #0xae3d, lsl #32
    777c:	mul	x0, x0, x3
    7780:	movk	x1, #0x67b1, lsl #32
    7784:	movk	x2, #0xc2b2, lsl #48
    7788:	movk	x1, #0x1656, lsl #48
    778c:	eor	x19, x0, x19
    7790:	mov	x22, x20
    7794:	ror	x19, x19, #41
    7798:	madd	x19, x19, x2, x1
    779c:	cmp	x22, x28
    77a0:	b.cs	77e4 <XXH64+0x61c>  // b.hs, b.nlast
    77a4:	mov	x2, #0x67c5                	// #26565
    77a8:	mov	x1, #0xca87                	// #51847
    77ac:	movk	x2, #0x1656, lsl #16
    77b0:	movk	x1, #0x85eb, lsl #16
    77b4:	movk	x2, #0xeb2f, lsl #32
    77b8:	movk	x1, #0x79b1, lsl #32
    77bc:	movk	x2, #0x27d4, lsl #48
    77c0:	movk	x1, #0x9e37, lsl #48
    77c4:	nop
    77c8:	ldrb	w0, [x22], #1
    77cc:	cmp	x22, x28
    77d0:	mul	x0, x0, x2
    77d4:	eor	x19, x0, x19
    77d8:	ror	x19, x19, #53
    77dc:	mul	x19, x19, x1
    77e0:	b.ne	77c8 <XXH64+0x600>  // b.any
    77e4:	mov	x0, #0xeb4f                	// #60239
    77e8:	eor	x19, x19, x19, lsr #33
    77ec:	movk	x0, #0x27d4, lsl #16
    77f0:	mov	x1, #0x79f9                	// #31225
    77f4:	movk	x0, #0xae3d, lsl #32
    77f8:	movk	x1, #0x9e37, lsl #16
    77fc:	movk	x0, #0xc2b2, lsl #48
    7800:	movk	x1, #0x67b1, lsl #32
    7804:	movk	x1, #0x1656, lsl #48
    7808:	mul	x0, x19, x0
    780c:	ldp	x19, x20, [sp, #16]
    7810:	eor	x0, x0, x0, lsr #29
    7814:	ldp	x21, x22, [sp, #32]
    7818:	mul	x0, x0, x1
    781c:	ldp	x23, x24, [sp, #48]
    7820:	eor	x0, x0, x0, lsr #32
    7824:	ldp	x25, x26, [sp, #64]
    7828:	ldp	x27, x28, [sp, #80]
    782c:	ldp	x29, x30, [sp], #160
    7830:	ret
    7834:	mov	x0, #0x67c5                	// #26565
    7838:	movk	x0, #0x1656, lsl #16
    783c:	movk	x0, #0xeb2f, lsl #32
    7840:	movk	x0, #0x27d4, lsl #48
    7844:	add	x19, x2, x0
    7848:	b	769c <XXH64+0x4d4>
    784c:	nop

0000000000007850 <XXH32_createState>:
    7850:	mov	x0, #0x30                  	// #48
    7854:	b	0 <grub_malloc>

0000000000007858 <XXH32_freeState>:
    7858:	stp	x29, x30, [sp, #-16]!
    785c:	mov	x29, sp
    7860:	bl	0 <grub_free>
    7864:	mov	w0, #0x0                   	// #0
    7868:	ldp	x29, x30, [sp], #16
    786c:	ret

0000000000007870 <XXH64_createState>:
    7870:	mov	x0, #0x58                  	// #88
    7874:	b	0 <grub_malloc>

0000000000007878 <XXH64_freeState>:
    7878:	stp	x29, x30, [sp, #-16]!
    787c:	mov	x29, sp
    7880:	bl	0 <grub_free>
    7884:	mov	w0, #0x0                   	// #0
    7888:	ldp	x29, x30, [sp], #16
    788c:	ret

0000000000007890 <XXH32_reset>:
    7890:	stp	x29, x30, [sp, #-80]!
    7894:	mov	x2, #0x2c                  	// #44
    7898:	mov	x29, sp
    789c:	stp	x19, x20, [sp, #16]
    78a0:	mov	w19, w1
    78a4:	mov	x20, x0
    78a8:	mov	w1, #0x0                   	// #0
    78ac:	add	x0, sp, #0x20
    78b0:	bl	0 <grub_memset>
    78b4:	mov	w5, #0x4428                	// #17448
    78b8:	mov	w4, #0xca77                	// #51831
    78bc:	mov	w3, #0x864f                	// #34383
    78c0:	movk	w5, #0x2423, lsl #16
    78c4:	movk	w4, #0x85eb, lsl #16
    78c8:	add	w5, w19, w5
    78cc:	add	w4, w19, w4
    78d0:	movk	w3, #0x61c8, lsl #16
    78d4:	add	w3, w19, w3
    78d8:	add	x1, sp, #0x20
    78dc:	mov	x0, x20
    78e0:	mov	x2, #0x30                  	// #48
    78e4:	stp	w5, w4, [sp, #40]
    78e8:	stp	w19, w3, [sp, #48]
    78ec:	bl	0 <grub_memmove>
    78f0:	mov	w0, #0x0                   	// #0
    78f4:	ldp	x19, x20, [sp, #16]
    78f8:	ldp	x29, x30, [sp], #80
    78fc:	ret

0000000000007900 <XXH64_reset>:
    7900:	stp	x29, x30, [sp, #-128]!
    7904:	mov	x2, #0x50                  	// #80
    7908:	mov	x29, sp
    790c:	stp	x19, x20, [sp, #16]
    7910:	mov	x19, x1
    7914:	mov	x20, x0
    7918:	mov	w1, #0x0                   	// #0
    791c:	add	x0, sp, #0x28
    7920:	bl	0 <grub_memset>
    7924:	mov	x5, #0xb5d6                	// #46550
    7928:	mov	x4, #0xeb4f                	// #60239
    792c:	mov	x3, #0x3579                	// #13689
    7930:	movk	x5, #0xadc0, lsl #16
    7934:	movk	x4, #0x27d4, lsl #16
    7938:	movk	x3, #0x7a14, lsl #16
    793c:	movk	x5, #0x27ee, lsl #32
    7940:	movk	x4, #0xae3d, lsl #32
    7944:	movk	x3, #0x864e, lsl #32
    7948:	movk	x5, #0x60ea, lsl #48
    794c:	movk	x4, #0xc2b2, lsl #48
    7950:	add	x5, x19, x5
    7954:	add	x4, x19, x4
    7958:	movk	x3, #0x61c8, lsl #48
    795c:	add	x3, x19, x3
    7960:	add	x1, sp, #0x28
    7964:	mov	x0, x20
    7968:	mov	x2, #0x58                  	// #88
    796c:	stp	x5, x4, [sp, #48]
    7970:	stp	x19, x3, [sp, #64]
    7974:	bl	0 <grub_memmove>
    7978:	mov	w0, #0x0                   	// #0
    797c:	ldp	x19, x20, [sp, #16]
    7980:	ldp	x29, x30, [sp], #128
    7984:	ret

0000000000007988 <XXH32_update>:
    7988:	stp	x29, x30, [sp, #-128]!
    798c:	add	x3, x1, x2
    7990:	cmp	x2, #0xf
    7994:	mov	x29, sp
    7998:	stp	x27, x28, [sp, #80]
    799c:	mov	x28, x0
    79a0:	ldr	w0, [x0]
    79a4:	str	x3, [sp, #104]
    79a8:	add	w0, w0, w2
    79ac:	ldr	w3, [x28, #4]
    79b0:	ccmp	w0, #0xf, #0x2, ls  // ls = plast
    79b4:	ldr	w5, [x28, #40]
    79b8:	cset	w6, hi  // hi = pmore
    79bc:	stp	x19, x20, [sp, #16]
    79c0:	orr	w3, w3, w6
    79c4:	str	w0, [x28]
    79c8:	mov	w0, w5
    79cc:	str	w3, [x28, #4]
    79d0:	add	x3, x2, x0
    79d4:	cmp	x3, #0xf
    79d8:	b.ls	7c20 <XXH32_update+0x298>  // b.plast
    79dc:	stp	x23, x24, [sp, #48]
    79e0:	mov	x23, x1
    79e4:	cbnz	w5, 7b34 <XXH32_update+0x1ac>
    79e8:	ldr	x0, [sp, #104]
    79ec:	sub	x0, x0, #0x10
    79f0:	str	x0, [sp, #96]
    79f4:	cmp	x0, x23
    79f8:	b.cs	7a20 <XXH32_update+0x98>  // b.hs, b.nlast
    79fc:	ldr	x0, [sp, #104]
    7a00:	cmp	x0, x23
    7a04:	b.hi	7b04 <XXH32_update+0x17c>  // b.pmore
    7a08:	mov	w0, #0x0                   	// #0
    7a0c:	ldp	x19, x20, [sp, #16]
    7a10:	ldp	x23, x24, [sp, #48]
    7a14:	ldp	x27, x28, [sp, #80]
    7a18:	ldp	x29, x30, [sp], #128
    7a1c:	ret
    7a20:	ldp	w24, w27, [x28, #16]
    7a24:	stp	x25, x26, [sp, #64]
    7a28:	mov	x19, x23
    7a2c:	ldp	w26, w25, [x28, #8]
    7a30:	add	x20, sp, #0x7c
    7a34:	stp	x21, x22, [sp, #32]
    7a38:	mov	w22, #0xca77                	// #51831
    7a3c:	mov	w21, #0x79b1                	// #31153
    7a40:	movk	w22, #0x85eb, lsl #16
    7a44:	movk	w21, #0x9e37, lsl #16
    7a48:	mov	x1, x19
    7a4c:	mov	x2, #0x4                   	// #4
    7a50:	mov	x0, x20
    7a54:	bl	0 <grub_memmove>
    7a58:	ldr	w3, [sp, #124]
    7a5c:	mov	x2, #0x4                   	// #4
    7a60:	mov	x0, x20
    7a64:	add	x1, x19, x2
    7a68:	madd	w26, w3, w22, w26
    7a6c:	bl	0 <grub_memmove>
    7a70:	ldr	w3, [sp, #124]
    7a74:	add	x1, x19, #0x8
    7a78:	mov	x2, #0x4                   	// #4
    7a7c:	mov	x0, x20
    7a80:	ror	w26, w26, #19
    7a84:	madd	w25, w3, w22, w25
    7a88:	bl	0 <grub_memmove>
    7a8c:	ldr	w3, [sp, #124]
    7a90:	add	x1, x19, #0xc
    7a94:	mov	x0, x20
    7a98:	mov	x2, #0x4                   	// #4
    7a9c:	add	x19, x19, #0x10
    7aa0:	ror	w25, w25, #19
    7aa4:	mul	w26, w26, w21
    7aa8:	madd	w24, w3, w22, w24
    7aac:	bl	0 <grub_memmove>
    7ab0:	ldr	w1, [sp, #124]
    7ab4:	mul	w25, w25, w21
    7ab8:	ldr	x0, [sp, #96]
    7abc:	ror	w24, w24, #19
    7ac0:	madd	w1, w1, w22, w27
    7ac4:	cmp	x0, x19
    7ac8:	mul	w24, w24, w21
    7acc:	ror	w1, w1, #19
    7ad0:	mul	w27, w1, w21
    7ad4:	b.cs	7a48 <XXH32_update+0xc0>  // b.hs, b.nlast
    7ad8:	sub	x0, x0, x23
    7adc:	and	x0, x0, #0xfffffffffffffff0
    7ae0:	add	x0, x0, #0x10
    7ae4:	add	x23, x23, x0
    7ae8:	ldr	x0, [sp, #104]
    7aec:	ldp	x21, x22, [sp, #32]
    7af0:	stp	w26, w25, [x28, #8]
    7af4:	stp	w24, w27, [x28, #16]
    7af8:	cmp	x0, x23
    7afc:	ldp	x25, x26, [sp, #64]
    7b00:	b.ls	7a08 <XXH32_update+0x80>  // b.plast
    7b04:	sub	x19, x0, x23
    7b08:	mov	x1, x23
    7b0c:	mov	x2, x19
    7b10:	add	x0, x28, #0x18
    7b14:	bl	0 <grub_memmove>
    7b18:	ldp	x23, x24, [sp, #48]
    7b1c:	str	w19, [x28, #40]
    7b20:	mov	w0, #0x0                   	// #0
    7b24:	ldp	x19, x20, [sp, #16]
    7b28:	ldp	x27, x28, [sp, #80]
    7b2c:	ldp	x29, x30, [sp], #128
    7b30:	ret
    7b34:	add	x19, x28, #0x18
    7b38:	add	x20, sp, #0x7c
    7b3c:	add	x0, x19, x0
    7b40:	stp	x21, x22, [sp, #32]
    7b44:	mov	w22, #0x10                  	// #16
    7b48:	sub	w2, w22, w5
    7b4c:	stp	x25, x26, [sp, #64]
    7b50:	bl	0 <grub_memmove>
    7b54:	mov	x1, x19
    7b58:	ldr	w24, [x28, #8]
    7b5c:	mov	x0, x20
    7b60:	mov	x2, #0x4                   	// #4
    7b64:	bl	0 <grub_memmove>
    7b68:	mov	w21, #0xca77                	// #51831
    7b6c:	ldr	w3, [sp, #124]
    7b70:	movk	w21, #0x85eb, lsl #16
    7b74:	mov	w19, #0x79b1                	// #31153
    7b78:	ldr	w25, [x28, #12]
    7b7c:	movk	w19, #0x9e37, lsl #16
    7b80:	mov	x0, x20
    7b84:	add	x1, x28, #0x1c
    7b88:	mov	x2, #0x4                   	// #4
    7b8c:	madd	w3, w3, w21, w24
    7b90:	ror	w3, w3, #19
    7b94:	mul	w3, w3, w19
    7b98:	str	w3, [x28, #8]
    7b9c:	bl	0 <grub_memmove>
    7ba0:	ldr	w24, [x28, #16]
    7ba4:	ldr	w5, [sp, #124]
    7ba8:	mov	x0, x20
    7bac:	add	x1, x28, #0x20
    7bb0:	mov	x2, #0x4                   	// #4
    7bb4:	madd	w5, w5, w21, w25
    7bb8:	ror	w5, w5, #19
    7bbc:	mul	w5, w5, w19
    7bc0:	str	w5, [x28, #12]
    7bc4:	bl	0 <grub_memmove>
    7bc8:	ldr	w3, [sp, #124]
    7bcc:	mov	x0, x20
    7bd0:	add	x1, x28, #0x24
    7bd4:	ldr	w20, [x28, #20]
    7bd8:	mov	x2, #0x4                   	// #4
    7bdc:	madd	w3, w3, w21, w24
    7be0:	ror	w3, w3, #19
    7be4:	mul	w3, w3, w19
    7be8:	str	w3, [x28, #16]
    7bec:	bl	0 <grub_memmove>
    7bf0:	ldr	w0, [sp, #124]
    7bf4:	ldr	w1, [x28, #40]
    7bf8:	ldp	x25, x26, [sp, #64]
    7bfc:	sub	w22, w22, w1
    7c00:	madd	w0, w0, w21, w20
    7c04:	add	x23, x23, x22
    7c08:	ldp	x21, x22, [sp, #32]
    7c0c:	str	wzr, [x28, #40]
    7c10:	ror	w0, w0, #19
    7c14:	mul	w0, w0, w19
    7c18:	str	w0, [x28, #20]
    7c1c:	b	79e8 <XXH32_update+0x60>
    7c20:	add	x3, x28, #0x18
    7c24:	mov	x19, x2
    7c28:	add	x0, x3, x0
    7c2c:	bl	0 <grub_memmove>
    7c30:	ldr	w0, [x28, #40]
    7c34:	add	w19, w0, w19
    7c38:	str	w19, [x28, #40]
    7c3c:	mov	w0, #0x0                   	// #0
    7c40:	ldp	x19, x20, [sp, #16]
    7c44:	ldp	x27, x28, [sp, #80]
    7c48:	ldp	x29, x30, [sp], #128
    7c4c:	ret

0000000000007c50 <XXH32_digest>:
    7c50:	stp	x29, x30, [sp, #-96]!
    7c54:	mov	x29, sp
    7c58:	ldr	w1, [x0, #4]
    7c5c:	stp	x19, x20, [sp, #16]
    7c60:	ldr	w19, [x0, #16]
    7c64:	stp	x21, x22, [sp, #32]
    7c68:	ldr	w22, [x0, #40]
    7c6c:	stp	x23, x24, [sp, #48]
    7c70:	stp	x25, x26, [sp, #64]
    7c74:	add	x26, x0, #0x18
    7c78:	mov	x21, x26
    7c7c:	add	x22, x26, x22
    7c80:	cbz	w1, 7dcc <XXH32_digest+0x17c>
    7c84:	ldp	w2, w3, [x0, #8]
    7c88:	ror	w19, w19, #20
    7c8c:	ldr	w1, [x0, #20]
    7c90:	ror	w2, w2, #31
    7c94:	ror	w1, w1, #14
    7c98:	add	w19, w1, w19
    7c9c:	ror	w3, w3, #25
    7ca0:	add	w1, w2, w3
    7ca4:	add	w19, w1, w19
    7ca8:	mov	x24, x0
    7cac:	ldr	w1, [x24], #28
    7cb0:	add	w19, w19, w1
    7cb4:	cmp	x22, x24
    7cb8:	b.cc	7d14 <XXH32_digest+0xc4>  // b.lo, b.ul, b.last
    7cbc:	sub	x0, x22, x0
    7cc0:	mov	w25, #0xae3d                	// #44605
    7cc4:	sub	x21, x0, #0x1c
    7cc8:	mov	w23, #0xeb2f                	// #60207
    7ccc:	and	x20, x21, #0xfffffffffffffffc
    7cd0:	movk	w25, #0xc2b2, lsl #16
    7cd4:	add	x20, x24, x20
    7cd8:	movk	w23, #0x27d4, lsl #16
    7cdc:	nop
    7ce0:	mov	x1, x26
    7ce4:	add	x0, sp, #0x5c
    7ce8:	mov	x2, #0x4                   	// #4
    7cec:	bl	0 <grub_memmove>
    7cf0:	ldr	w0, [sp, #92]
    7cf4:	add	x26, x26, #0x4
    7cf8:	cmp	x20, x26
    7cfc:	madd	w0, w0, w25, w19
    7d00:	ror	w0, w0, #15
    7d04:	mul	w19, w0, w23
    7d08:	b.ne	7ce0 <XXH32_digest+0x90>  // b.any
    7d0c:	and	x21, x21, #0xfffffffffffffffc
    7d10:	add	x21, x24, x21
    7d14:	cmp	x22, x21
    7d18:	b.ls	7d90 <XXH32_digest+0x140>  // b.plast
    7d1c:	mov	x1, x21
    7d20:	mov	w3, #0x67b1                	// #26545
    7d24:	movk	w3, #0x1656, lsl #16
    7d28:	mov	w2, #0x79b1                	// #31153
    7d2c:	movk	w2, #0x9e37, lsl #16
    7d30:	ldrb	w0, [x1], #1
    7d34:	cmp	x22, x1
    7d38:	madd	w0, w0, w3, w19
    7d3c:	ror	w0, w0, #21
    7d40:	mul	w19, w0, w2
    7d44:	b.ls	7d90 <XXH32_digest+0x140>  // b.plast
    7d48:	ldrb	w0, [x21, #1]
    7d4c:	add	x1, x21, #0x2
    7d50:	cmp	x22, x1
    7d54:	madd	w0, w0, w3, w19
    7d58:	ror	w0, w0, #21
    7d5c:	mul	w19, w0, w2
    7d60:	b.ls	7d90 <XXH32_digest+0x140>  // b.plast
    7d64:	ldrb	w0, [x21, #2]
    7d68:	add	x1, x21, #0x3
    7d6c:	cmp	x22, x1
    7d70:	madd	w0, w0, w3, w19
    7d74:	ror	w0, w0, #21
    7d78:	mul	w19, w0, w2
    7d7c:	b.ls	7d90 <XXH32_digest+0x140>  // b.plast
    7d80:	ldrb	w0, [x21, #3]
    7d84:	madd	w0, w0, w3, w19
    7d88:	ror	w0, w0, #21
    7d8c:	mul	w19, w0, w2
    7d90:	eor	w0, w19, w19, lsr #15
    7d94:	mov	w19, #0xca77                	// #51831
    7d98:	movk	w19, #0x85eb, lsl #16
    7d9c:	mov	w1, #0xae3d                	// #44605
    7da0:	movk	w1, #0xc2b2, lsl #16
    7da4:	mul	w0, w0, w19
    7da8:	ldp	x19, x20, [sp, #16]
    7dac:	eor	w0, w0, w0, lsr #13
    7db0:	ldp	x21, x22, [sp, #32]
    7db4:	mul	w0, w0, w1
    7db8:	ldp	x23, x24, [sp, #48]
    7dbc:	eor	w0, w0, w0, lsr #16
    7dc0:	ldp	x25, x26, [sp, #64]
    7dc4:	ldp	x29, x30, [sp], #96
    7dc8:	ret
    7dcc:	mov	w1, #0x67b1                	// #26545
    7dd0:	movk	w1, #0x1656, lsl #16
    7dd4:	add	w19, w19, w1
    7dd8:	b	7ca8 <XXH32_digest+0x58>
    7ddc:	nop

0000000000007de0 <XXH64_update>:
    7de0:	stp	x29, x30, [sp, #-128]!
    7de4:	add	x3, x1, x2
    7de8:	mov	x29, sp
    7dec:	stp	x27, x28, [sp, #80]
    7df0:	mov	x28, x0
    7df4:	ldr	x0, [x0]
    7df8:	str	x3, [sp, #104]
    7dfc:	ldr	w3, [x28, #72]
    7e00:	add	x0, x0, x2
    7e04:	stp	x19, x20, [sp, #16]
    7e08:	str	x0, [x28]
    7e0c:	mov	w0, w3
    7e10:	add	x5, x2, x0
    7e14:	cmp	x5, #0x1f
    7e18:	b.ls	8088 <XXH64_update+0x2a8>  // b.plast
    7e1c:	stp	x23, x24, [sp, #48]
    7e20:	mov	x23, x1
    7e24:	cbnz	w3, 7f8c <XXH64_update+0x1ac>
    7e28:	ldr	x1, [sp, #104]
    7e2c:	add	x0, x23, #0x20
    7e30:	cmp	x1, x0
    7e34:	b.cs	7e5c <XXH64_update+0x7c>  // b.hs, b.nlast
    7e38:	ldr	x0, [sp, #104]
    7e3c:	cmp	x0, x23
    7e40:	b.hi	7f5c <XXH64_update+0x17c>  // b.pmore
    7e44:	mov	w0, #0x0                   	// #0
    7e48:	ldp	x19, x20, [sp, #16]
    7e4c:	ldp	x23, x24, [sp, #48]
    7e50:	ldp	x27, x28, [sp, #80]
    7e54:	ldp	x29, x30, [sp], #128
    7e58:	ret
    7e5c:	stp	x25, x26, [sp, #64]
    7e60:	mov	x19, x23
    7e64:	add	x20, sp, #0x78
    7e68:	ldp	x26, x25, [x28, #8]
    7e6c:	stp	x21, x22, [sp, #32]
    7e70:	mov	x22, #0xeb4f                	// #60239
    7e74:	ldp	x24, x27, [x28, #24]
    7e78:	mov	x21, #0xca87                	// #51847
    7e7c:	movk	x22, #0x27d4, lsl #16
    7e80:	movk	x21, #0x85eb, lsl #16
    7e84:	movk	x22, #0xae3d, lsl #32
    7e88:	movk	x21, #0x79b1, lsl #32
    7e8c:	sub	x0, x1, #0x20
    7e90:	movk	x22, #0xc2b2, lsl #48
    7e94:	movk	x21, #0x9e37, lsl #48
    7e98:	str	x0, [sp, #96]
    7e9c:	nop
    7ea0:	mov	x1, x19
    7ea4:	mov	x2, #0x8                   	// #8
    7ea8:	mov	x0, x20
    7eac:	bl	0 <grub_memmove>
    7eb0:	ldr	x3, [sp, #120]
    7eb4:	mov	x2, #0x8                   	// #8
    7eb8:	mov	x0, x20
    7ebc:	add	x1, x19, x2
    7ec0:	madd	x26, x3, x22, x26
    7ec4:	bl	0 <grub_memmove>
    7ec8:	ldr	x3, [sp, #120]
    7ecc:	add	x1, x19, #0x10
    7ed0:	mov	x2, #0x8                   	// #8
    7ed4:	mov	x0, x20
    7ed8:	ror	x26, x26, #33
    7edc:	madd	x25, x3, x22, x25
    7ee0:	bl	0 <grub_memmove>
    7ee4:	ldr	x3, [sp, #120]
    7ee8:	add	x1, x19, #0x18
    7eec:	mov	x0, x20
    7ef0:	mov	x2, #0x8                   	// #8
    7ef4:	add	x19, x19, #0x20
    7ef8:	ror	x25, x25, #33
    7efc:	madd	x24, x3, x22, x24
    7f00:	bl	0 <grub_memmove>
    7f04:	ldr	x1, [sp, #120]
    7f08:	mul	x26, x26, x21
    7f0c:	ror	x24, x24, #33
    7f10:	ldr	x0, [sp, #96]
    7f14:	madd	x1, x1, x22, x27
    7f18:	mul	x25, x25, x21
    7f1c:	mul	x24, x24, x21
    7f20:	cmp	x0, x19
    7f24:	ror	x1, x1, #33
    7f28:	mul	x27, x1, x21
    7f2c:	b.cs	7ea0 <XXH64_update+0xc0>  // b.hs, b.nlast
    7f30:	sub	x0, x0, x23
    7f34:	and	x0, x0, #0xffffffffffffffe0
    7f38:	add	x0, x0, #0x20
    7f3c:	add	x23, x23, x0
    7f40:	ldr	x0, [sp, #104]
    7f44:	ldp	x21, x22, [sp, #32]
    7f48:	stp	x26, x25, [x28, #8]
    7f4c:	cmp	x0, x23
    7f50:	stp	x24, x27, [x28, #24]
    7f54:	ldp	x25, x26, [sp, #64]
    7f58:	b.ls	7e44 <XXH64_update+0x64>  // b.plast
    7f5c:	sub	x19, x0, x23
    7f60:	mov	x1, x23
    7f64:	mov	x2, x19
    7f68:	add	x0, x28, #0x28
    7f6c:	bl	0 <grub_memmove>
    7f70:	ldp	x23, x24, [sp, #48]
    7f74:	str	w19, [x28, #72]
    7f78:	mov	w0, #0x0                   	// #0
    7f7c:	ldp	x19, x20, [sp, #16]
    7f80:	ldp	x27, x28, [sp, #80]
    7f84:	ldp	x29, x30, [sp], #128
    7f88:	ret
    7f8c:	add	x19, x28, #0x28
    7f90:	add	x20, sp, #0x78
    7f94:	add	x0, x19, x0
    7f98:	stp	x21, x22, [sp, #32]
    7f9c:	mov	w22, #0x20                  	// #32
    7fa0:	sub	w2, w22, w3
    7fa4:	stp	x25, x26, [sp, #64]
    7fa8:	bl	0 <grub_memmove>
    7fac:	mov	x1, x19
    7fb0:	mov	x0, x20
    7fb4:	mov	x2, #0x8                   	// #8
    7fb8:	mov	x21, #0xeb4f                	// #60239
    7fbc:	ldr	x24, [x28, #8]
    7fc0:	bl	0 <grub_memmove>
    7fc4:	movk	x21, #0x27d4, lsl #16
    7fc8:	mov	x19, #0xca87                	// #51847
    7fcc:	ldr	x3, [sp, #120]
    7fd0:	movk	x21, #0xae3d, lsl #32
    7fd4:	movk	x21, #0xc2b2, lsl #48
    7fd8:	movk	x19, #0x85eb, lsl #16
    7fdc:	movk	x19, #0x79b1, lsl #32
    7fe0:	mov	x0, x20
    7fe4:	madd	x3, x3, x21, x24
    7fe8:	movk	x19, #0x9e37, lsl #48
    7fec:	add	x1, x28, #0x30
    7ff0:	mov	x2, #0x8                   	// #8
    7ff4:	ldr	x25, [x28, #16]
    7ff8:	ror	x3, x3, #33
    7ffc:	mul	x3, x3, x19
    8000:	str	x3, [x28, #8]
    8004:	bl	0 <grub_memmove>
    8008:	ldr	x5, [sp, #120]
    800c:	mov	x0, x20
    8010:	add	x1, x28, #0x38
    8014:	mov	x2, #0x8                   	// #8
    8018:	ldr	x24, [x28, #24]
    801c:	madd	x5, x5, x21, x25
    8020:	ror	x5, x5, #33
    8024:	mul	x5, x5, x19
    8028:	str	x5, [x28, #16]
    802c:	bl	0 <grub_memmove>
    8030:	ldr	x3, [sp, #120]
    8034:	mov	x0, x20
    8038:	add	x1, x28, #0x40
    803c:	mov	x2, #0x8                   	// #8
    8040:	ldr	x20, [x28, #32]
    8044:	madd	x3, x3, x21, x24
    8048:	ror	x3, x3, #33
    804c:	mul	x3, x3, x19
    8050:	str	x3, [x28, #24]
    8054:	bl	0 <grub_memmove>
    8058:	ldr	x0, [sp, #120]
    805c:	ldr	w1, [x28, #72]
    8060:	ldp	x25, x26, [sp, #64]
    8064:	madd	x0, x0, x21, x20
    8068:	sub	w22, w22, w1
    806c:	add	x23, x23, x22
    8070:	ror	x0, x0, #33
    8074:	ldp	x21, x22, [sp, #32]
    8078:	str	wzr, [x28, #72]
    807c:	mul	x0, x0, x19
    8080:	str	x0, [x28, #32]
    8084:	b	7e28 <XXH64_update+0x48>
    8088:	add	x3, x28, #0x28
    808c:	mov	x19, x2
    8090:	add	x0, x3, x0
    8094:	bl	0 <grub_memmove>
    8098:	ldr	w0, [x28, #72]
    809c:	add	w19, w0, w19
    80a0:	str	w19, [x28, #72]
    80a4:	mov	w0, #0x0                   	// #0
    80a8:	ldp	x19, x20, [sp, #16]
    80ac:	ldp	x27, x28, [sp, #80]
    80b0:	ldp	x29, x30, [sp], #128
    80b4:	ret

00000000000080b8 <XXH64_digest>:
    80b8:	stp	x29, x30, [sp, #-112]!
    80bc:	mov	x29, sp
    80c0:	ldr	x7, [x0]
    80c4:	stp	x19, x20, [sp, #16]
    80c8:	ldr	w20, [x0, #72]
    80cc:	stp	x23, x24, [sp, #48]
    80d0:	mov	x19, x0
    80d4:	cmp	x7, #0x1f
    80d8:	stp	x25, x26, [sp, #64]
    80dc:	add	x26, x0, #0x28
    80e0:	mov	x1, x26
    80e4:	add	x20, x26, x20
    80e8:	ldr	x2, [x0, #24]
    80ec:	b.ls	8324 <XXH64_digest+0x26c>  // b.plast
    80f0:	ldp	x0, x3, [x0, #8]
    80f4:	mov	x9, #0xeb4f                	// #60239
    80f8:	movk	x9, #0x27d4, lsl #16
    80fc:	mov	x25, #0xca87                	// #51847
    8100:	movk	x9, #0xae3d, lsl #32
    8104:	movk	x25, #0x85eb, lsl #16
    8108:	movk	x9, #0xc2b2, lsl #48
    810c:	movk	x25, #0x79b1, lsl #32
    8110:	ldr	x5, [x19, #32]
    8114:	mul	x8, x0, x9
    8118:	movk	x25, #0x9e37, lsl #48
    811c:	mul	x4, x3, x9
    8120:	ror	x6, x2, #52
    8124:	ror	x8, x8, #33
    8128:	ror	x10, x3, #57
    812c:	ror	x0, x0, #63
    8130:	add	x0, x0, x10
    8134:	ror	x3, x5, #46
    8138:	add	x6, x6, x3
    813c:	mul	x3, x8, x25
    8140:	add	x6, x6, x0
    8144:	mov	x0, #0xae63                	// #44643
    8148:	movk	x0, #0xc2b2, lsl #16
    814c:	eor	x6, x6, x3
    8150:	movk	x0, #0xca77, lsl #32
    8154:	ror	x4, x4, #33
    8158:	movk	x0, #0x85eb, lsl #48
    815c:	mul	x3, x2, x9
    8160:	mul	x2, x5, x9
    8164:	madd	x6, x6, x25, x0
    8168:	mul	x4, x4, x25
    816c:	ror	x3, x3, #33
    8170:	ror	x2, x2, #33
    8174:	eor	x4, x4, x6
    8178:	mul	x3, x3, x25
    817c:	mul	x2, x2, x25
    8180:	madd	x4, x4, x25, x0
    8184:	eor	x3, x3, x4
    8188:	madd	x3, x3, x25, x0
    818c:	eor	x3, x2, x3
    8190:	madd	x0, x3, x25, x0
    8194:	add	x24, x19, #0x30
    8198:	add	x25, x7, x0
    819c:	cmp	x20, x24
    81a0:	b.cc	8238 <XXH64_digest+0x180>  // b.lo, b.ul, b.last
    81a4:	sub	x19, x20, x19
    81a8:	mov	x23, #0xeb4f                	// #60239
    81ac:	sub	x19, x19, #0x30
    81b0:	stp	x21, x22, [sp, #32]
    81b4:	mov	x22, #0xae63                	// #44643
    81b8:	str	x27, [sp, #80]
    81bc:	mov	x27, #0xca87                	// #51847
    81c0:	and	x21, x19, #0xfffffffffffffff8
    81c4:	movk	x23, #0x27d4, lsl #16
    81c8:	movk	x22, #0xc2b2, lsl #16
    81cc:	movk	x27, #0x85eb, lsl #16
    81d0:	movk	x23, #0xae3d, lsl #32
    81d4:	movk	x22, #0xca77, lsl #32
    81d8:	movk	x27, #0x79b1, lsl #32
    81dc:	add	x21, x24, x21
    81e0:	movk	x23, #0xc2b2, lsl #48
    81e4:	movk	x22, #0x85eb, lsl #48
    81e8:	movk	x27, #0x9e37, lsl #48
    81ec:	nop
    81f0:	mov	x1, x26
    81f4:	add	x0, sp, #0x68
    81f8:	mov	x2, #0x8                   	// #8
    81fc:	bl	0 <grub_memmove>
    8200:	ldr	x0, [sp, #104]
    8204:	add	x26, x26, #0x8
    8208:	cmp	x21, x26
    820c:	mul	x0, x0, x23
    8210:	ror	x0, x0, #33
    8214:	mul	x0, x0, x27
    8218:	eor	x0, x0, x25
    821c:	ror	x0, x0, #37
    8220:	madd	x25, x0, x27, x22
    8224:	b.ne	81f0 <XXH64_digest+0x138>  // b.any
    8228:	ldp	x21, x22, [sp, #32]
    822c:	and	x1, x19, #0xfffffffffffffff8
    8230:	ldr	x27, [sp, #80]
    8234:	add	x1, x24, x1
    8238:	add	x19, x1, #0x4
    823c:	cmp	x20, x19
    8240:	b.cc	8298 <XXH64_digest+0x1e0>  // b.lo, b.ul, b.last
    8244:	mov	x2, #0x4                   	// #4
    8248:	add	x0, sp, #0x68
    824c:	bl	0 <grub_memmove>
    8250:	mov	x4, #0xca87                	// #51847
    8254:	ldr	w0, [sp, #104]
    8258:	movk	x4, #0x85eb, lsl #16
    825c:	mov	x3, #0xeb4f                	// #60239
    8260:	movk	x4, #0x79b1, lsl #32
    8264:	mov	x2, #0x79f9                	// #31225
    8268:	movk	x4, #0x9e37, lsl #48
    826c:	movk	x3, #0x27d4, lsl #16
    8270:	movk	x2, #0x9e37, lsl #16
    8274:	movk	x3, #0xae3d, lsl #32
    8278:	mul	x0, x0, x4
    827c:	movk	x2, #0x67b1, lsl #32
    8280:	movk	x3, #0xc2b2, lsl #48
    8284:	movk	x2, #0x1656, lsl #48
    8288:	eor	x0, x0, x25
    828c:	mov	x1, x19
    8290:	ror	x0, x0, #41
    8294:	madd	x25, x0, x3, x2
    8298:	cmp	x20, x1
    829c:	b.ls	82dc <XXH64_digest+0x224>  // b.plast
    82a0:	mov	x3, #0x67c5                	// #26565
    82a4:	mov	x2, #0xca87                	// #51847
    82a8:	movk	x3, #0x1656, lsl #16
    82ac:	movk	x2, #0x85eb, lsl #16
    82b0:	movk	x3, #0xeb2f, lsl #32
    82b4:	movk	x2, #0x79b1, lsl #32
    82b8:	movk	x3, #0x27d4, lsl #48
    82bc:	movk	x2, #0x9e37, lsl #48
    82c0:	ldrb	w0, [x1], #1
    82c4:	cmp	x20, x1
    82c8:	mul	x0, x0, x3
    82cc:	eor	x0, x0, x25
    82d0:	ror	x0, x0, #53
    82d4:	mul	x25, x0, x2
    82d8:	b.ne	82c0 <XXH64_digest+0x208>  // b.any
    82dc:	eor	x0, x25, x25, lsr #33
    82e0:	mov	x25, #0xeb4f                	// #60239
    82e4:	movk	x25, #0x27d4, lsl #16
    82e8:	mov	x1, #0x79f9                	// #31225
    82ec:	movk	x25, #0xae3d, lsl #32
    82f0:	movk	x1, #0x9e37, lsl #16
    82f4:	movk	x25, #0xc2b2, lsl #48
    82f8:	movk	x1, #0x67b1, lsl #32
    82fc:	movk	x1, #0x1656, lsl #48
    8300:	mul	x0, x0, x25
    8304:	ldp	x19, x20, [sp, #16]
    8308:	eor	x0, x0, x0, lsr #29
    830c:	ldp	x23, x24, [sp, #48]
    8310:	mul	x0, x0, x1
    8314:	ldp	x25, x26, [sp, #64]
    8318:	eor	x0, x0, x0, lsr #32
    831c:	ldp	x29, x30, [sp], #112
    8320:	ret
    8324:	mov	x0, #0x67c5                	// #26565
    8328:	movk	x0, #0x1656, lsl #16
    832c:	movk	x0, #0xeb2f, lsl #32
    8330:	movk	x0, #0x27d4, lsl #48
    8334:	add	x0, x2, x0
    8338:	b	8194 <XXH64_digest+0xdc>
    833c:	nop

0000000000008340 <XXH32_canonicalFromHash>:
    8340:	stp	x29, x30, [sp, #-32]!
    8344:	rev	w3, w1
    8348:	mov	x2, #0x4                   	// #4
    834c:	mov	x29, sp
    8350:	add	x1, sp, #0x1c
    8354:	str	w3, [sp, #28]
    8358:	bl	0 <grub_memmove>
    835c:	ldp	x29, x30, [sp], #32
    8360:	ret
    8364:	nop

0000000000008368 <XXH64_canonicalFromHash>:
    8368:	stp	x29, x30, [sp, #-32]!
    836c:	rev	x3, x1
    8370:	mov	x2, #0x8                   	// #8
    8374:	mov	x29, sp
    8378:	add	x1, sp, #0x18
    837c:	str	x3, [sp, #24]
    8380:	bl	0 <grub_memmove>
    8384:	ldp	x29, x30, [sp], #32
    8388:	ret
    838c:	nop

0000000000008390 <XXH32_hashFromCanonical>:
    8390:	stp	x29, x30, [sp, #-32]!
    8394:	mov	x1, x0
    8398:	mov	x2, #0x4                   	// #4
    839c:	mov	x29, sp
    83a0:	add	x0, sp, #0x1c
    83a4:	bl	0 <grub_memmove>
    83a8:	ldr	w0, [sp, #28]
    83ac:	ldp	x29, x30, [sp], #32
    83b0:	rev	w0, w0
    83b4:	ret

00000000000083b8 <XXH64_hashFromCanonical>:
    83b8:	stp	x29, x30, [sp, #-32]!
    83bc:	mov	x1, x0
    83c0:	mov	x2, #0x8                   	// #8
    83c4:	mov	x29, sp
    83c8:	add	x0, sp, #0x18
    83cc:	bl	0 <grub_memmove>
    83d0:	ldr	x0, [sp, #24]
    83d4:	ldp	x29, x30, [sp], #32
    83d8:	rev	x0, x0
    83dc:	ret

00000000000083e0 <ZSTD_versionNumber>:
    83e0:	mov	w0, #0x2842                	// #10306
    83e4:	ret

00000000000083e8 <ZSTD_versionString>:
    83e8:	adrp	x0, 0 <FSE_versionNumber>
    83ec:	ldr	x0, [x0]
    83f0:	ret
    83f4:	nop
	...

0000000000008400 <ZSTD_isError>:
    8400:	cmn	x0, #0x78
    8404:	cset	w0, hi  // hi = pmore
    8408:	ret
    840c:	nop

0000000000008410 <ZSTD_getErrorName>:
    8410:	cmn	x0, #0x78
    8414:	csneg	w0, wzr, w0, ls  // ls = plast
    8418:	b	628 <ERR_getErrorString>
    841c:	nop

0000000000008420 <ZSTD_getErrorCode>:
    8420:	cmn	x0, #0x78
    8424:	csneg	w0, wzr, w0, ls  // ls = plast
    8428:	ret
    842c:	nop

0000000000008430 <ZSTD_getErrorString>:
    8430:	b	628 <ERR_getErrorString>
    8434:	nop

0000000000008438 <ZSTD_malloc>:
    8438:	mov	x2, x1
    843c:	mov	x1, x0
    8440:	ldr	x3, [x2]
    8444:	cbz	x3, 8454 <ZSTD_malloc+0x1c>
    8448:	ldr	x0, [x2, #16]
    844c:	mov	x16, x3
    8450:	br	x16
    8454:	b	0 <grub_malloc>

0000000000008458 <ZSTD_calloc>:
    8458:	ldr	x2, [x1]
    845c:	cbz	x2, 84a0 <ZSTD_calloc+0x48>
    8460:	stp	x29, x30, [sp, #-32]!
    8464:	mov	x3, x1
    8468:	mov	x1, x0
    846c:	mov	x29, sp
    8470:	str	x19, [sp, #16]
    8474:	mov	x19, x0
    8478:	ldr	x0, [x3, #16]
    847c:	blr	x2
    8480:	mov	x2, x19
    8484:	mov	w1, #0x0                   	// #0
    8488:	mov	x19, x0
    848c:	bl	0 <grub_memset>
    8490:	mov	x0, x19
    8494:	ldr	x19, [sp, #16]
    8498:	ldp	x29, x30, [sp], #32
    849c:	ret
    84a0:	b	0 <grub_zalloc>
    84a4:	nop

00000000000084a8 <ZSTD_free>:
    84a8:	mov	x2, x1
    84ac:	mov	x1, x0
    84b0:	cbz	x0, 84c8 <ZSTD_free+0x20>
    84b4:	ldr	x3, [x2, #8]
    84b8:	cbz	x3, 84cc <ZSTD_free+0x24>
    84bc:	ldr	x0, [x2, #16]
    84c0:	mov	x16, x3
    84c4:	br	x16
    84c8:	ret
    84cc:	b	0 <grub_free>
    84d0:	stp	x29, x30, [sp, #-224]!
    84d4:	mov	x29, sp
    84d8:	stp	x25, x26, [sp, #64]
    84dc:	mov	w26, w5
    84e0:	sub	w6, w26, #0x1
    84e4:	mov	w5, #0x1                   	// #1
    84e8:	stp	x19, x20, [sp, #16]
    84ec:	lsl	w6, w5, w6
    84f0:	stp	x21, x22, [sp, #32]
    84f4:	mov	x22, x3
    84f8:	add	x21, x0, #0x8
    84fc:	stp	x23, x24, [sp, #48]
    8500:	mov	w24, w2
    8504:	cmn	w24, #0x1
    8508:	stp	x27, x28, [sp, #80]
    850c:	mov	x23, x4
    8510:	lsl	w28, w5, w26
    8514:	stp	w5, w26, [sp, #104]
    8518:	mov	x27, x0
    851c:	sub	w20, w28, #0x1
    8520:	b.eq	86ac <ZSTD_free+0x204>  // b.none
    8524:	sxth	w4, w6
    8528:	mov	w3, w5
    852c:	mov	w6, w5
    8530:	mov	w7, w5
    8534:	mov	x25, x1
    8538:	add	x2, sp, #0x70
    853c:	mov	w19, w20
    8540:	mov	x0, #0x0                   	// #0
    8544:	mov	w5, #0x0                   	// #0
    8548:	b	856c <ZSTD_free+0xc4>
    854c:	strh	w1, [x2]
    8550:	cmp	w1, w4
    8554:	csel	w5, w5, w6, lt  // lt = tstop
    8558:	csel	w3, w3, wzr, lt  // lt = tstop
    855c:	add	x2, x2, #0x2
    8560:	cmp	x24, x0
    8564:	add	x0, x0, #0x1
    8568:	b.eq	8598 <ZSTD_free+0xf0>  // b.none
    856c:	ldrsh	w1, [x25, x0, lsl #1]
    8570:	cmn	w1, #0x1
    8574:	b.ne	854c <ZSTD_free+0xa4>  // b.any
    8578:	add	x1, x21, w19, uxtw #3
    857c:	strh	w7, [x2]
    8580:	cmp	x24, x0
    8584:	sub	w19, w19, #0x1
    8588:	add	x2, x2, #0x2
    858c:	str	w0, [x1, #4]
    8590:	add	x0, x0, #0x1
    8594:	b.ne	856c <ZSTD_free+0xc4>  // b.any
    8598:	cbz	w5, 85a0 <ZSTD_free+0xf8>
    859c:	str	w3, [sp, #104]
    85a0:	add	x1, sp, #0x68
    85a4:	mov	x0, x27
    85a8:	mov	x2, #0x8                   	// #8
    85ac:	bl	0 <grub_memmove>
    85b0:	lsr	w1, w28, #3
    85b4:	mov	x6, #0x0                   	// #0
    85b8:	add	w1, w1, w28, lsr #1
    85bc:	mov	w0, #0x0                   	// #0
    85c0:	add	w1, w1, #0x3
    85c4:	nop
    85c8:	ldrsh	w4, [x25, x6, lsl #1]
    85cc:	mov	w5, w6
    85d0:	mov	w2, #0x0                   	// #0
    85d4:	cmp	w4, #0x0
    85d8:	b.le	8614 <ZSTD_free+0x16c>
    85dc:	nop
    85e0:	add	x3, x21, w0, uxtw #3
    85e4:	add	w0, w1, w0
    85e8:	and	w0, w0, w20
    85ec:	cmp	w19, w0
    85f0:	str	w5, [x3, #4]
    85f4:	b.cs	8608 <ZSTD_free+0x160>  // b.hs, b.nlast
    85f8:	add	w0, w1, w0
    85fc:	and	w0, w0, w20
    8600:	cmp	w19, w0
    8604:	b.cc	85f8 <ZSTD_free+0x150>  // b.lo, b.ul, b.last
    8608:	add	w2, w2, #0x1
    860c:	cmp	w2, w4
    8610:	b.ne	85e0 <ZSTD_free+0x138>  // b.any
    8614:	cmp	x24, x6
    8618:	add	x6, x6, #0x1
    861c:	b.ne	85c8 <ZSTD_free+0x120>  // b.any
    8620:	cbz	w28, 8690 <ZSTD_free+0x1e8>
    8624:	add	x27, x27, #0x10
    8628:	and	w26, w26, #0xff
    862c:	add	x20, x27, w20, uxtw #3
    8630:	and	w28, w28, #0xffff
    8634:	add	x4, sp, #0x70
    8638:	mov	w6, #0x1f                  	// #31
    863c:	nop
    8640:	ldr	w2, [x21, #4]
    8644:	add	x21, x21, #0x8
    8648:	lsl	x3, x2, #1
    864c:	ldrh	w1, [x4, x3]
    8650:	clz	w0, w1
    8654:	add	w5, w1, #0x1
    8658:	sub	w0, w6, w0
    865c:	strh	w5, [x4, x3]
    8660:	sub	w0, w26, w0
    8664:	and	w0, w0, #0xff
    8668:	sturb	w0, [x21, #-5]
    866c:	ldr	w3, [x23, x2, lsl #2]
    8670:	lsl	w0, w1, w0
    8674:	sturb	w3, [x21, #-6]
    8678:	sub	w0, w0, w28
    867c:	sturh	w0, [x21, #-8]
    8680:	ldr	w0, [x22, x2, lsl #2]
    8684:	stur	w0, [x21, #-4]
    8688:	cmp	x20, x21
    868c:	b.ne	8640 <ZSTD_free+0x198>  // b.any
    8690:	ldp	x19, x20, [sp, #16]
    8694:	ldp	x21, x22, [sp, #32]
    8698:	ldp	x23, x24, [sp, #48]
    869c:	ldp	x25, x26, [sp, #64]
    86a0:	ldp	x27, x28, [sp, #80]
    86a4:	ldp	x29, x30, [sp], #224
    86a8:	ret
    86ac:	add	x1, sp, #0x68
    86b0:	mov	x2, #0x8                   	// #8
    86b4:	bl	0 <grub_memmove>
    86b8:	b	8620 <ZSTD_free+0x178>
    86bc:	nop
    86c0:	stp	x29, x30, [sp, #-208]!
    86c4:	cmp	w2, #0x2
    86c8:	mov	x29, sp
    86cc:	stp	x19, x20, [sp, #16]
    86d0:	mov	x19, x0
    86d4:	mov	w20, w4
    86d8:	stp	x21, x22, [sp, #32]
    86dc:	mov	x21, x7
    86e0:	str	x23, [sp, #48]
    86e4:	mov	x23, x1
    86e8:	str	w3, [sp, #76]
    86ec:	b.eq	8724 <ZSTD_free+0x27c>  // b.none
    86f0:	cmp	w2, #0x3
    86f4:	b.eq	8774 <ZSTD_free+0x2cc>  // b.none
    86f8:	cmp	w2, #0x1
    86fc:	b.eq	87c8 <ZSTD_free+0x320>  // b.none
    8700:	ldr	x0, [sp, #216]
    8704:	mov	x22, #0x0                   	// #0
    8708:	str	x0, [x1]
    870c:	mov	x0, x22
    8710:	ldp	x19, x20, [sp, #16]
    8714:	ldp	x21, x22, [sp, #32]
    8718:	ldr	x23, [sp, #48]
    871c:	ldp	x29, x30, [sp], #208
    8720:	ret
    8724:	mov	x4, x6
    8728:	mov	x3, x5
    872c:	add	x0, sp, #0x60
    8730:	add	x2, sp, #0x5c
    8734:	add	x1, sp, #0x4c
    8738:	bl	48 <FSE_readNCount>
    873c:	mov	x22, x0
    8740:	cmn	x0, #0x78
    8744:	b.hi	8820 <ZSTD_free+0x378>  // b.pmore
    8748:	ldr	w5, [sp, #92]
    874c:	cmp	w5, w20
    8750:	b.hi	8820 <ZSTD_free+0x378>  // b.pmore
    8754:	ldr	w2, [sp, #76]
    8758:	mov	x3, x21
    875c:	ldr	x4, [sp, #208]
    8760:	add	x1, sp, #0x60
    8764:	mov	x0, x19
    8768:	bl	84d0 <ZSTD_free+0x28>
    876c:	str	x19, [x23]
    8770:	b	870c <ZSTD_free+0x264>
    8774:	ldr	w0, [sp, #224]
    8778:	mov	x22, #0xffffffffffffffec    	// #-20
    877c:	cbz	w0, 870c <ZSTD_free+0x264>
    8780:	ldr	w0, [sp, #232]
    8784:	mov	x22, #0x0                   	// #0
    8788:	cmp	w0, #0x0
    878c:	ldr	w0, [sp, #240]
    8790:	ccmp	w0, #0x18, #0x4, ne  // ne = any
    8794:	b.le	870c <ZSTD_free+0x264>
    8798:	mov	w1, #0x1                   	// #1
    879c:	mov	x0, #0x0                   	// #0
    87a0:	lsl	w1, w1, w4
    87a4:	add	w1, w1, #0x1
    87a8:	ldr	x2, [x23]
    87ac:	sbfiz	x1, x1, #3, #32
    87b0:	prfm	pldl2keep, [x2, x0]
    87b4:	add	x0, x0, #0x40
    87b8:	cmp	x1, x0
    87bc:	b.hi	87b0 <ZSTD_free+0x308>  // b.pmore
    87c0:	mov	x22, #0x0                   	// #0
    87c4:	b	870c <ZSTD_free+0x264>
    87c8:	mov	x22, #0xffffffffffffffb8    	// #-72
    87cc:	cbz	x6, 870c <ZSTD_free+0x264>
    87d0:	ldrb	w0, [x5]
    87d4:	mov	x22, #0xffffffffffffffec    	// #-20
    87d8:	cmp	w0, w3
    87dc:	b.hi	870c <ZSTD_free+0x264>  // b.pmore
    87e0:	ldr	x2, [sp, #208]
    87e4:	mov	x22, #0x1                   	// #1
    87e8:	ldr	w1, [x7, x0, lsl #2]
    87ec:	ldr	w0, [x2, x0, lsl #2]
    87f0:	str	xzr, [x19]
    87f4:	strh	wzr, [x19, #8]
    87f8:	strb	w0, [x19, #10]
    87fc:	mov	x0, x22
    8800:	strb	wzr, [x19, #11]
    8804:	str	w1, [x19, #12]
    8808:	str	x19, [x23]
    880c:	ldp	x19, x20, [sp, #16]
    8810:	ldp	x21, x22, [sp, #32]
    8814:	ldr	x23, [sp, #48]
    8818:	ldp	x29, x30, [sp], #208
    881c:	ret
    8820:	mov	x22, #0xffffffffffffffec    	// #-20
    8824:	mov	x0, x22
    8828:	ldp	x19, x20, [sp, #16]
    882c:	ldp	x21, x22, [sp, #32]
    8830:	ldr	x23, [sp, #48]
    8834:	ldp	x29, x30, [sp], #208
    8838:	ret
    883c:	nop
    8840:	cmp	x2, #0x8
    8844:	b.ls	8a24 <ZSTD_free+0x57c>  // b.plast
    8848:	stp	x29, x30, [sp, #-192]!
    884c:	mov	x4, #0x2818                	// #10264
    8850:	mov	x29, sp
    8854:	stp	x19, x20, [sp, #16]
    8858:	mov	x20, x0
    885c:	mov	x19, x2
    8860:	stp	x21, x22, [sp, #32]
    8864:	add	x22, x1, #0x8
    8868:	mov	x21, x1
    886c:	add	x0, x0, x4
    8870:	mov	x1, x22
    8874:	mov	x3, x20
    8878:	sub	x2, x2, #0x8
    887c:	bl	5510 <HUF_readDTableX2_wksp>
    8880:	cmn	x0, #0x78
    8884:	b.hi	8a10 <ZSTD_free+0x568>  // b.pmore
    8888:	mov	w5, #0x1f                  	// #31
    888c:	add	x22, x22, x0
    8890:	add	x19, x21, x19
    8894:	mov	x3, x22
    8898:	sub	x4, x19, x22
    889c:	add	x2, sp, #0x4c
    88a0:	add	x1, sp, #0x48
    88a4:	add	x0, sp, #0x50
    88a8:	str	w5, [sp, #72]
    88ac:	bl	48 <FSE_readNCount>
    88b0:	cmn	x0, #0x78
    88b4:	b.hi	8a10 <ZSTD_free+0x568>  // b.pmore
    88b8:	ldr	w2, [sp, #72]
    88bc:	cmp	w2, #0x1f
    88c0:	b.hi	8a10 <ZSTD_free+0x568>  // b.pmore
    88c4:	ldr	w5, [sp, #76]
    88c8:	cmp	w5, #0x8
    88cc:	b.hi	8a10 <ZSTD_free+0x568>  // b.pmore
    88d0:	adrp	x1, 0 <FSE_versionNumber>
    88d4:	stp	x23, x24, [sp, #48]
    88d8:	mov	x3, #0x1008                	// #4104
    88dc:	ldr	x23, [x1]
    88e0:	add	x22, x22, x0
    88e4:	add	x1, sp, #0x50
    88e8:	add	x0, x20, x3
    88ec:	mov	x4, x23
    88f0:	add	x3, x23, #0x80
    88f4:	bl	84d0 <ZSTD_free+0x28>
    88f8:	mov	w5, #0x34                  	// #52
    88fc:	sub	x4, x19, x22
    8900:	mov	x3, x22
    8904:	add	x2, sp, #0x4c
    8908:	add	x1, sp, #0x48
    890c:	add	x0, sp, #0x50
    8910:	str	w5, [sp, #72]
    8914:	bl	48 <FSE_readNCount>
    8918:	cmn	x0, #0x78
    891c:	b.hi	8a2c <ZSTD_free+0x584>  // b.pmore
    8920:	ldr	w2, [sp, #72]
    8924:	cmp	w2, #0x34
    8928:	b.hi	8a2c <ZSTD_free+0x584>  // b.pmore
    892c:	ldr	w5, [sp, #76]
    8930:	cmp	w5, #0x9
    8934:	b.hi	8a2c <ZSTD_free+0x584>  // b.pmore
    8938:	add	x22, x22, x0
    893c:	add	x4, x23, #0x100
    8940:	add	x3, x23, #0x1d8
    8944:	add	x1, sp, #0x50
    8948:	mov	x0, #0x1810                	// #6160
    894c:	add	x0, x20, x0
    8950:	bl	84d0 <ZSTD_free+0x28>
    8954:	mov	w5, #0x23                  	// #35
    8958:	add	x2, sp, #0x4c
    895c:	add	x1, sp, #0x48
    8960:	sub	x4, x19, x22
    8964:	mov	x3, x22
    8968:	add	x0, sp, #0x50
    896c:	str	w5, [sp, #72]
    8970:	bl	48 <FSE_readNCount>
    8974:	mov	x24, x0
    8978:	cmn	x0, #0x78
    897c:	b.hi	8a2c <ZSTD_free+0x584>  // b.pmore
    8980:	ldr	w2, [sp, #72]
    8984:	cmp	w2, #0x23
    8988:	b.hi	8a2c <ZSTD_free+0x584>  // b.pmore
    898c:	ldr	w5, [sp, #76]
    8990:	cmp	w5, #0x9
    8994:	b.hi	8a2c <ZSTD_free+0x584>  // b.pmore
    8998:	add	x1, sp, #0x50
    899c:	mov	x0, x20
    89a0:	add	x4, x23, #0x2b0
    89a4:	add	x3, x23, #0x340
    89a8:	bl	84d0 <ZSTD_free+0x28>
    89ac:	add	x0, x22, x24
    89b0:	add	x1, x0, #0xc
    89b4:	cmp	x1, x19
    89b8:	b.hi	8a0c <ZSTD_free+0x564>  // b.pmore
    89bc:	ldr	w2, [x22, x24]
    89c0:	sub	x19, x19, x1
    89c4:	cbz	w2, 8a0c <ZSTD_free+0x564>
    89c8:	cmp	x19, w2, uxtw
    89cc:	b.ls	8a0c <ZSTD_free+0x564>  // b.plast
    89d0:	add	x20, x20, #0x4, lsl #12
    89d4:	ldr	w3, [x0, #4]
    89d8:	str	w2, [x20, #10268]
    89dc:	cbz	w3, 8a0c <ZSTD_free+0x564>
    89e0:	cmp	x19, w3, uxtw
    89e4:	b.ls	8a0c <ZSTD_free+0x564>  // b.plast
    89e8:	ldr	w2, [x0, #8]
    89ec:	str	w3, [x20, #10272]
    89f0:	cbz	w2, 8a0c <ZSTD_free+0x564>
    89f4:	cmp	x19, w2, uxtw
    89f8:	b.ls	8a0c <ZSTD_free+0x564>  // b.plast
    89fc:	sub	x0, x1, x21
    8a00:	ldp	x23, x24, [sp, #48]
    8a04:	str	w2, [x20, #10276]
    8a08:	b	8a14 <ZSTD_free+0x56c>
    8a0c:	ldp	x23, x24, [sp, #48]
    8a10:	mov	x0, #0xffffffffffffffe2    	// #-30
    8a14:	ldp	x19, x20, [sp, #16]
    8a18:	ldp	x21, x22, [sp, #32]
    8a1c:	ldp	x29, x30, [sp], #192
    8a20:	ret
    8a24:	mov	x0, #0xffffffffffffffe2    	// #-30
    8a28:	ret
    8a2c:	mov	x0, #0xffffffffffffffe2    	// #-30
    8a30:	ldp	x19, x20, [sp, #16]
    8a34:	ldp	x21, x22, [sp, #32]
    8a38:	ldp	x23, x24, [sp, #48]
    8a3c:	ldp	x29, x30, [sp], #192
    8a40:	ret
    8a44:	nop
	...
    8a50:	stp	x29, x30, [sp, #-112]!
    8a54:	mov	x29, sp
    8a58:	stp	x21, x22, [sp, #32]
    8a5c:	ldr	x21, [x5]
    8a60:	stp	x19, x20, [sp, #16]
    8a64:	mov	x19, x0
    8a68:	stp	x25, x26, [sp, #64]
    8a6c:	add	x26, x2, x3
    8a70:	add	x22, x0, x26
    8a74:	cmp	x22, x1
    8a78:	add	x0, x21, x2
    8a7c:	b.hi	8cf4 <ZSTD_free+0x84c>  // b.pmore
    8a80:	cmp	x0, x6
    8a84:	b.hi	8cd8 <ZSTD_free+0x830>  // b.pmore
    8a88:	stp	x27, x28, [sp, #80]
    8a8c:	add	x20, x19, x2
    8a90:	sub	x28, x1, #0x8
    8a94:	cmp	x20, x28
    8a98:	b.ls	8d10 <ZSTD_free+0x868>  // b.plast
    8a9c:	stp	x23, x24, [sp, #48]
    8aa0:	mov	x27, x5
    8aa4:	mov	x23, x3
    8aa8:	mov	x24, x4
    8aac:	mov	x25, x7
    8ab0:	cmp	x19, x28
    8ab4:	b.cs	8cc4 <ZSTD_free+0x81c>  // b.hs, b.nlast
    8ab8:	sub	x0, x28, x19
    8abc:	str	x0, [sp, #104]
    8ac0:	mov	x1, x21
    8ac4:	mov	x0, x19
    8ac8:	mov	x2, #0x8                   	// #8
    8acc:	add	x19, x19, x2
    8ad0:	bl	0 <grub_memmove>
    8ad4:	add	x21, x21, #0x8
    8ad8:	cmp	x28, x19
    8adc:	b.hi	8ac0 <ZSTD_free+0x618>  // b.pmore
    8ae0:	ldr	x21, [x27]
    8ae4:	mov	x19, x28
    8ae8:	ldr	x0, [sp, #104]
    8aec:	add	x21, x21, x0
    8af0:	mov	x3, x19
    8af4:	add	x0, x21, #0x1
    8af8:	str	x0, [x27]
    8afc:	ldrb	w0, [x21]
    8b00:	strb	w0, [x3], #1
    8b04:	cmp	x20, x3
    8b08:	mov	x0, x3
    8b0c:	b.ls	8b2c <ZSTD_free+0x684>  // b.plast
    8b10:	ldr	x1, [x27]
    8b14:	add	x2, x1, #0x1
    8b18:	str	x2, [x27]
    8b1c:	ldrb	w1, [x1]
    8b20:	strb	w1, [x0], #1
    8b24:	cmp	x20, x0
    8b28:	b.ne	8b10 <ZSTD_free+0x668>  // b.any
    8b2c:	sub	x0, x20, x19
    8b30:	cmp	x20, x3
    8b34:	csinc	x0, x0, xzr, cs  // cs = hs, nlast
    8b38:	add	x19, x19, x0
    8b3c:	sub	x0, x20, x25
    8b40:	sub	x2, x20, x24
    8b44:	cmp	x0, x24
    8b48:	b.cs	8b88 <ZSTD_free+0x6e0>  // b.hs, b.nlast
    8b4c:	ldr	x0, [sp, #112]
    8b50:	sub	x0, x20, x0
    8b54:	cmp	x0, x24
    8b58:	b.cc	8cd0 <ZSTD_free+0x828>  // b.lo, b.ul, b.last
    8b5c:	ldr	x0, [sp, #120]
    8b60:	sub	x2, x25, x2
    8b64:	ldr	x3, [sp, #120]
    8b68:	sub	x1, x0, x2
    8b6c:	add	x0, x1, x23
    8b70:	cmp	x3, x0
    8b74:	b.cs	8d30 <ZSTD_free+0x888>  // b.hs, b.nlast
    8b78:	add	x19, x20, x2
    8b7c:	mov	x0, x20
    8b80:	bl	0 <grub_memmove>
    8b84:	mov	x2, x25
    8b88:	cmp	x22, x19
    8b8c:	b.ls	8ca4 <ZSTD_free+0x7fc>  // b.plast
    8b90:	orr	x3, x2, x19
    8b94:	add	x1, x19, #0x7
    8b98:	sub	x1, x1, x2
    8b9c:	sub	x0, x22, #0x1
    8ba0:	tst	x3, #0x7
    8ba4:	sub	x0, x0, x19
    8ba8:	ccmp	x1, #0xe, #0x0, eq  // eq = none
    8bac:	ccmp	x0, #0x9, #0x0, hi  // hi = pmore
    8bb0:	b.ls	8c88 <ZSTD_free+0x7e0>  // b.plast
    8bb4:	sub	x4, x22, x19
    8bb8:	mov	x0, #0x0                   	// #0
    8bbc:	and	x3, x4, #0xfffffffffffffff8
    8bc0:	ldr	x1, [x2, x0]
    8bc4:	str	x1, [x19, x0]
    8bc8:	add	x0, x0, #0x8
    8bcc:	cmp	x0, x3
    8bd0:	b.ne	8bc0 <ZSTD_free+0x718>  // b.any
    8bd4:	and	x1, x4, #0xfffffffffffffff8
    8bd8:	cmp	x4, x1
    8bdc:	add	x3, x2, x1
    8be0:	add	x0, x19, x1
    8be4:	b.eq	8ca4 <ZSTD_free+0x7fc>  // b.none
    8be8:	ldrb	w4, [x2, x1]
    8bec:	add	x2, x0, #0x1
    8bf0:	strb	w4, [x19, x1]
    8bf4:	cmp	x22, x2
    8bf8:	b.ls	8ca4 <ZSTD_free+0x7fc>  // b.plast
    8bfc:	ldrb	w2, [x3, #1]
    8c00:	add	x1, x0, #0x2
    8c04:	strb	w2, [x0, #1]
    8c08:	cmp	x22, x1
    8c0c:	b.ls	8ca4 <ZSTD_free+0x7fc>  // b.plast
    8c10:	ldrb	w2, [x3, #2]
    8c14:	add	x1, x0, #0x3
    8c18:	strb	w2, [x0, #2]
    8c1c:	cmp	x22, x1
    8c20:	b.ls	8ca4 <ZSTD_free+0x7fc>  // b.plast
    8c24:	ldrb	w2, [x3, #3]
    8c28:	add	x1, x0, #0x4
    8c2c:	strb	w2, [x0, #3]
    8c30:	cmp	x22, x1
    8c34:	b.ls	8ca4 <ZSTD_free+0x7fc>  // b.plast
    8c38:	ldrb	w2, [x3, #4]
    8c3c:	add	x1, x0, #0x5
    8c40:	strb	w2, [x0, #4]
    8c44:	cmp	x22, x1
    8c48:	b.ls	8ca4 <ZSTD_free+0x7fc>  // b.plast
    8c4c:	ldrb	w2, [x3, #5]
    8c50:	add	x1, x0, #0x6
    8c54:	strb	w2, [x0, #5]
    8c58:	cmp	x22, x1
    8c5c:	b.ls	8ca4 <ZSTD_free+0x7fc>  // b.plast
    8c60:	ldrb	w1, [x3, #6]
    8c64:	strb	w1, [x0, #6]
    8c68:	mov	x0, x26
    8c6c:	ldp	x19, x20, [sp, #16]
    8c70:	ldp	x21, x22, [sp, #32]
    8c74:	ldp	x23, x24, [sp, #48]
    8c78:	ldp	x25, x26, [sp, #64]
    8c7c:	ldp	x27, x28, [sp, #80]
    8c80:	ldp	x29, x30, [sp], #112
    8c84:	ret
    8c88:	sub	x22, x22, x19
    8c8c:	mov	x0, #0x0                   	// #0
    8c90:	ldrb	w1, [x2, x0]
    8c94:	strb	w1, [x19, x0]
    8c98:	add	x0, x0, #0x1
    8c9c:	cmp	x0, x22
    8ca0:	b.ne	8c90 <ZSTD_free+0x7e8>  // b.any
    8ca4:	ldp	x23, x24, [sp, #48]
    8ca8:	ldp	x27, x28, [sp, #80]
    8cac:	mov	x0, x26
    8cb0:	ldp	x19, x20, [sp, #16]
    8cb4:	ldp	x21, x22, [sp, #32]
    8cb8:	ldp	x25, x26, [sp, #64]
    8cbc:	ldp	x29, x30, [sp], #112
    8cc0:	ret
    8cc4:	cmp	x19, x20
    8cc8:	b.cc	8af0 <ZSTD_free+0x648>  // b.lo, b.ul, b.last
    8ccc:	b	8b3c <ZSTD_free+0x694>
    8cd0:	ldp	x23, x24, [sp, #48]
    8cd4:	ldp	x27, x28, [sp, #80]
    8cd8:	mov	x26, #0xffffffffffffffec    	// #-20
    8cdc:	mov	x0, x26
    8ce0:	ldp	x19, x20, [sp, #16]
    8ce4:	ldp	x21, x22, [sp, #32]
    8ce8:	ldp	x25, x26, [sp, #64]
    8cec:	ldp	x29, x30, [sp], #112
    8cf0:	ret
    8cf4:	mov	x26, #0xffffffffffffffba    	// #-70
    8cf8:	mov	x0, x26
    8cfc:	ldp	x19, x20, [sp, #16]
    8d00:	ldp	x21, x22, [sp, #32]
    8d04:	ldp	x25, x26, [sp, #64]
    8d08:	ldp	x29, x30, [sp], #112
    8d0c:	ret
    8d10:	mov	x26, #0xffffffffffffffff    	// #-1
    8d14:	mov	x0, x26
    8d18:	ldp	x19, x20, [sp, #16]
    8d1c:	ldp	x21, x22, [sp, #32]
    8d20:	ldp	x25, x26, [sp, #64]
    8d24:	ldp	x27, x28, [sp, #80]
    8d28:	ldp	x29, x30, [sp], #112
    8d2c:	ret
    8d30:	mov	x2, x23
    8d34:	mov	x0, x20
    8d38:	bl	0 <grub_memmove>
    8d3c:	ldp	x23, x24, [sp, #48]
    8d40:	ldp	x27, x28, [sp, #80]
    8d44:	b	8cac <ZSTD_free+0x804>
    8d48:	ldr	x5, [x2]
    8d4c:	ldr	w6, [x2, #8]
    8d50:	ldr	w4, [x3, #4]
    8d54:	lsl	x5, x5, x6
    8d58:	mvn	w7, w4
    8d5c:	lsr	x5, x5, #1
    8d60:	add	w4, w4, w6
    8d64:	str	w4, [x2, #8]
    8d68:	cmp	w4, #0x40
    8d6c:	lsr	x5, x5, x7
    8d70:	str	x5, [x0]
    8d74:	b.hi	8dc8 <ZSTD_free+0x920>  // b.pmore
    8d78:	ldr	x0, [x2, #16]
    8d7c:	ldr	x5, [x2, #32]
    8d80:	cmp	x0, x5
    8d84:	b.cs	8dd4 <ZSTD_free+0x92c>  // b.hs, b.nlast
    8d88:	ldr	x6, [x2, #24]
    8d8c:	cmp	x0, x6
    8d90:	b.eq	8dc8 <ZSTD_free+0x920>  // b.none
    8d94:	lsr	w5, w4, #3
    8d98:	lsr	w7, w4, #3
    8d9c:	sub	x5, x0, x5
    8da0:	cmp	x6, x5
    8da4:	b.ls	8db4 <ZSTD_free+0x90c>  // b.plast
    8da8:	sub	x5, x0, x6
    8dac:	mov	w7, w5
    8db0:	sub	x5, x0, w5, uxtw
    8db4:	ldr	x0, [x5]
    8db8:	sub	w4, w4, w7, lsl #3
    8dbc:	str	x0, [x2]
    8dc0:	str	w4, [x2, #8]
    8dc4:	str	x5, [x2, #16]
    8dc8:	add	x3, x3, #0x8
    8dcc:	str	x3, [x1]
    8dd0:	ret
    8dd4:	lsr	w5, w4, #3
    8dd8:	and	w4, w4, #0x7
    8ddc:	sub	x0, x0, x5
    8de0:	str	x0, [x2, #16]
    8de4:	str	w4, [x2, #8]
    8de8:	add	x3, x3, #0x8
    8dec:	ldr	x0, [x0]
    8df0:	str	x0, [x2]
    8df4:	str	x3, [x1]
    8df8:	ret
    8dfc:	nop
    8e00:	sub	sp, sp, #0x150
    8e04:	stp	x29, x30, [sp, #16]
    8e08:	add	x29, sp, #0x10
    8e0c:	stp	x19, x20, [sp, #32]
    8e10:	add	x20, x1, x2
    8e14:	stp	x21, x22, [sp, #48]
    8e18:	mov	x22, x1
    8e1c:	ldr	x1, [x0, #28952]
    8e20:	stp	x23, x24, [sp, #64]
    8e24:	ldr	x19, [x0, #28984]
    8e28:	stp	x25, x26, [sp, #80]
    8e2c:	str	x1, [sp, #192]
    8e30:	add	x19, x1, x19
    8e34:	cbz	w5, 91a0 <ZSTD_free+0xcf8>
    8e38:	mov	x8, x0
    8e3c:	add	x23, x0, #0x4, lsl #12
    8e40:	mov	w21, w5
    8e44:	mov	w0, #0x1                   	// #1
    8e48:	ldr	x1, [x8, #28752]
    8e4c:	str	x1, [sp, #120]
    8e50:	ldr	w1, [x23, #10308]
    8e54:	str	x1, [sp, #304]
    8e58:	ldr	x1, [x8, #28760]
    8e5c:	str	x1, [sp, #144]
    8e60:	ldr	w5, [x23, #10300]
    8e64:	ldr	w2, [x23, #10304]
    8e68:	ldr	x1, [x8, #28768]
    8e6c:	str	x1, [sp, #152]
    8e70:	stp	x5, x2, [sp, #288]
    8e74:	str	w0, [x23, #12460]
    8e78:	cbz	x4, 92cc <ZSTD_free+0xe24>
    8e7c:	add	x0, x3, x4
    8e80:	add	x1, x3, #0x8
    8e84:	stp	x3, x1, [sp, #224]
    8e88:	cmp	x4, #0x7
    8e8c:	ldurb	w0, [x0, #-1]
    8e90:	b.ls	9214 <ZSTD_free+0xd6c>  // b.plast
    8e94:	sub	x1, x4, #0x8
    8e98:	add	x2, x3, x1
    8e9c:	str	x2, [sp, #216]
    8ea0:	ldr	x1, [x3, x1]
    8ea4:	str	x1, [sp, #200]
    8ea8:	cbz	w0, 91f0 <ZSTD_free+0xd48>
    8eac:	clz	w0, w0
    8eb0:	cmn	x4, #0x78
    8eb4:	sub	w0, w0, #0x17
    8eb8:	str	w0, [sp, #208]
    8ebc:	b.hi	91f0 <ZSTD_free+0xd48>  // b.pmore
    8ec0:	ldr	x3, [x8]
    8ec4:	add	x2, sp, #0xc8
    8ec8:	add	x1, x2, #0x30
    8ecc:	add	x0, x2, #0x28
    8ed0:	bl	8d48 <ZSTD_free+0x8a0>
    8ed4:	ldr	x3, [x8, #16]
    8ed8:	add	x2, sp, #0xc8
    8edc:	add	x1, x2, #0x40
    8ee0:	add	x0, x2, #0x38
    8ee4:	bl	8d48 <ZSTD_free+0x8a0>
    8ee8:	ldr	x3, [x8, #8]
    8eec:	add	x2, sp, #0xc8
    8ef0:	add	x1, x2, #0x50
    8ef4:	add	x0, x2, #0x48
    8ef8:	bl	8d48 <ZSTD_free+0x8a0>
    8efc:	ldr	w6, [sp, #208]
    8f00:	cmp	w6, #0x40
    8f04:	b.hi	91f0 <ZSTD_free+0xd48>  // b.pmore
    8f08:	sub	x0, x20, #0x8
    8f0c:	mov	x24, x22
    8f10:	stp	x27, x28, [sp, #96]
    8f14:	stp	x20, x19, [sp, #128]
    8f18:	str	x0, [sp, #160]
    8f1c:	sub	x0, x20, #0xd
    8f20:	str	x0, [sp, #168]
    8f24:	stp	x22, x23, [sp, #176]
    8f28:	ldr	x1, [sp, #216]
    8f2c:	ldr	x25, [sp, #232]
    8f30:	cmp	x1, x25
    8f34:	b.cs	93b4 <ZSTD_free+0xf0c>  // b.hs, b.nlast
    8f38:	ldr	x2, [sp, #224]
    8f3c:	mov	x0, x1
    8f40:	cmp	x1, x2
    8f44:	b.eq	8f7c <ZSTD_free+0xad4>  // b.none
    8f48:	lsr	w3, w6, #3
    8f4c:	lsr	w4, w6, #3
    8f50:	sub	x0, x1, x3
    8f54:	cmp	x2, x0
    8f58:	b.ls	8f68 <ZSTD_free+0xac0>  // b.plast
    8f5c:	sub	x0, x1, x2
    8f60:	mov	w4, w0
    8f64:	sub	x0, x1, w0, uxtw
    8f68:	ldr	x1, [x0]
    8f6c:	sub	w6, w6, w4, lsl #3
    8f70:	str	x1, [sp, #200]
    8f74:	str	w6, [sp, #208]
    8f78:	str	x0, [sp, #216]
    8f7c:	ldr	x18, [sp, #288]
    8f80:	cbz	w21, 966c <ZSTD_free+0x11c4>
    8f84:	ldp	x5, x17, [sp, #256]
    8f88:	ldp	x1, x15, [sp, #240]
    8f8c:	ldp	x2, x16, [sp, #272]
    8f90:	lsl	x5, x5, #3
    8f94:	add	x13, x17, x5
    8f98:	lsl	x1, x1, #3
    8f9c:	add	x8, x15, x1
    8fa0:	lsl	x2, x2, #3
    8fa4:	ldrb	w7, [x13, #2]
    8fa8:	add	x9, x16, x2
    8fac:	ldrb	w11, [x8, #2]
    8fb0:	ldr	w28, [x8, #4]
    8fb4:	ldrb	w12, [x9, #2]
    8fb8:	ldr	w3, [x9, #4]
    8fbc:	add	w10, w11, w12
    8fc0:	add	w10, w10, w7
    8fc4:	cbnz	w7, 92e4 <ZSTD_free+0xe3c>
    8fc8:	cbz	w28, 92b4 <ZSTD_free+0xe0c>
    8fcc:	mov	x23, x18
    8fd0:	mov	w22, w3
    8fd4:	cbnz	w12, 9320 <ZSTD_free+0xe78>
    8fd8:	cmp	w10, #0x1e
    8fdc:	b.hi	9344 <ZSTD_free+0xe9c>  // b.pmore
    8fe0:	ldr	x0, [sp, #200]
    8fe4:	and	w7, w6, #0x3f
    8fe8:	mov	w28, w28
    8fec:	lsl	x7, x0, x7
    8ff0:	cbnz	w11, 9398 <ZSTD_free+0xef0>
    8ff4:	ldrb	w8, [x8, #3]
    8ff8:	add	x26, x22, x28
    8ffc:	ldrh	w10, [x15, x1]
    9000:	mov	w1, #0x3f                  	// #63
    9004:	add	w6, w8, w6
    9008:	str	w6, [sp, #208]
    900c:	sub	w8, w1, w8
    9010:	add	x25, x24, x26
    9014:	ldr	x1, [sp, #128]
    9018:	mov	w3, #0x3f                  	// #63
    901c:	ldrb	w9, [x9, #3]
    9020:	lsr	x7, x7, #1
    9024:	ldrh	w2, [x16, x2]
    9028:	cmp	x1, x25
    902c:	lsl	x1, x0, x6
    9030:	add	w6, w6, w9
    9034:	str	w6, [sp, #208]
    9038:	lsr	x1, x1, #1
    903c:	lsl	x0, x0, x6
    9040:	sub	w9, w3, w9
    9044:	ldrb	w11, [x13, #3]
    9048:	lsr	x0, x0, #1
    904c:	ldrh	w5, [x17, x5]
    9050:	lsr	x1, x1, x9
    9054:	sub	w12, w3, w11
    9058:	add	x2, x1, w2, uxth
    905c:	lsr	x7, x7, x8
    9060:	add	w6, w6, w11
    9064:	lsr	x0, x0, x12
    9068:	add	x10, x7, w10, uxth
    906c:	ldr	x1, [sp, #192]
    9070:	add	x0, x0, w5, uxth
    9074:	str	w6, [sp, #208]
    9078:	str	x10, [sp, #240]
    907c:	add	x27, x1, x28
    9080:	str	x0, [sp, #256]
    9084:	str	x2, [sp, #272]
    9088:	b.cc	952c <ZSTD_free+0x1084>  // b.lo, b.ul, b.last
    908c:	ldr	x0, [sp, #136]
    9090:	cmp	x0, x27
    9094:	b.cc	9554 <ZSTD_free+0x10ac>  // b.lo, b.ul, b.last
    9098:	ldr	x0, [sp, #160]
    909c:	add	x19, x24, x28
    90a0:	cmp	x19, x0
    90a4:	b.hi	9560 <ZSTD_free+0x10b8>  // b.pmore
    90a8:	mov	x0, x24
    90ac:	mov	x2, #0x8                   	// #8
    90b0:	bl	0 <grub_memmove>
    90b4:	cmp	x28, #0x8
    90b8:	b.hi	9594 <ZSTD_free+0x10ec>  // b.pmore
    90bc:	ldr	x0, [sp, #120]
    90c0:	str	x27, [sp, #192]
    90c4:	sub	x28, x19, x23
    90c8:	sub	x0, x19, x0
    90cc:	cmp	x23, x0
    90d0:	b.ls	93d8 <ZSTD_free+0xf30>  // b.plast
    90d4:	ldr	x0, [sp, #144]
    90d8:	sub	x0, x19, x0
    90dc:	cmp	x23, x0
    90e0:	b.hi	9554 <ZSTD_free+0x10ac>  // b.pmore
    90e4:	ldr	x0, [sp, #120]
    90e8:	ldr	x2, [sp, #152]
    90ec:	sub	x1, x28, x0
    90f0:	add	x1, x2, x1
    90f4:	add	x0, x1, x22
    90f8:	cmp	x2, x0
    90fc:	b.cs	95d8 <ZSTD_free+0x1130>  // b.hs, b.nlast
    9100:	ldr	x20, [sp, #120]
    9104:	mov	x0, x19
    9108:	sub	x28, x20, x28
    910c:	mov	x2, x28
    9110:	bl	0 <grub_memmove>
    9114:	ldr	x0, [sp, #160]
    9118:	sub	x22, x22, x28
    911c:	cmp	x22, #0x2
    9120:	add	x19, x19, x28
    9124:	ccmp	x0, x19, #0x0, hi  // hi = pmore
    9128:	b.cs	93d4 <ZSTD_free+0xf2c>  // b.hs, b.nlast
    912c:	cbz	x22, 9158 <ZSTD_free+0xcb0>
    9130:	mov	x3, x20
    9134:	mov	w0, #0x0                   	// #0
    9138:	mov	x1, #0x0                   	// #0
    913c:	nop
    9140:	ldrb	w2, [x3, x1]
    9144:	add	w0, w0, #0x1
    9148:	strb	w2, [x19, x1]
    914c:	mov	w1, w0
    9150:	cmp	x22, w0, uxtw
    9154:	b.hi	9140 <ZSTD_free+0xc98>  // b.pmore
    9158:	cmn	x26, #0x78
    915c:	b.hi	9698 <ZSTD_free+0x11f0>  // b.pmore
    9160:	ldr	w6, [sp, #208]
    9164:	sub	w21, w21, #0x1
    9168:	add	x24, x24, x26
    916c:	cmp	w6, #0x40
    9170:	b.ls	8f28 <ZSTD_free+0xa80>  // b.plast
    9174:	ldp	x20, x19, [sp, #128]
    9178:	ldp	x22, x23, [sp, #176]
    917c:	cbnz	w21, 91ec <ZSTD_free+0xd44>
    9180:	ldr	x25, [sp, #288]
    9184:	ldp	x1, x0, [sp, #296]
    9188:	ldp	x27, x28, [sp, #96]
    918c:	str	w25, [x23, #10300]
    9190:	str	w1, [x23, #10304]
    9194:	str	w0, [x23, #10308]
    9198:	ldr	x1, [sp, #192]
    919c:	b	91a4 <ZSTD_free+0xcfc>
    91a0:	mov	x24, x22
    91a4:	sub	x19, x19, x1
    91a8:	sub	x20, x20, x24
    91ac:	cmp	x19, x20
    91b0:	mov	x26, #0xffffffffffffffba    	// #-70
    91b4:	b.hi	91cc <ZSTD_free+0xd24>  // b.pmore
    91b8:	mov	x2, x19
    91bc:	mov	x0, x24
    91c0:	bl	0 <grub_memmove>
    91c4:	add	x8, x24, x19
    91c8:	sub	x26, x8, x22
    91cc:	mov	x0, x26
    91d0:	ldp	x29, x30, [sp, #16]
    91d4:	ldp	x19, x20, [sp, #32]
    91d8:	ldp	x21, x22, [sp, #48]
    91dc:	ldp	x23, x24, [sp, #64]
    91e0:	ldp	x25, x26, [sp, #80]
    91e4:	add	sp, sp, #0x150
    91e8:	ret
    91ec:	ldp	x27, x28, [sp, #96]
    91f0:	mov	x26, #0xffffffffffffffec    	// #-20
    91f4:	mov	x0, x26
    91f8:	ldp	x29, x30, [sp, #16]
    91fc:	ldp	x19, x20, [sp, #32]
    9200:	ldp	x21, x22, [sp, #48]
    9204:	ldp	x23, x24, [sp, #64]
    9208:	ldp	x25, x26, [sp, #80]
    920c:	add	sp, sp, #0x150
    9210:	ret
    9214:	ldrb	w1, [x3]
    9218:	cmp	x4, #0x5
    921c:	str	x1, [sp, #200]
    9220:	str	x3, [sp, #216]
    9224:	b.eq	9290 <ZSTD_free+0xde8>  // b.none
    9228:	b.hi	9278 <ZSTD_free+0xdd0>  // b.pmore
    922c:	cmp	x4, #0x3
    9230:	b.eq	9244 <ZSTD_free+0xd9c>  // b.none
    9234:	cmp	x4, #0x4
    9238:	b.ne	929c <ZSTD_free+0xdf4>  // b.any
    923c:	ldrb	w2, [x3, #3]
    9240:	add	x1, x1, x2, lsl #24
    9244:	ldrb	w2, [x3, #2]
    9248:	add	x1, x1, x2, lsl #16
    924c:	ldrb	w2, [x3, #1]
    9250:	add	x1, x1, x2, lsl #8
    9254:	str	x1, [sp, #200]
    9258:	cbz	w0, 91f0 <ZSTD_free+0xd48>
    925c:	mov	w1, #0x9                   	// #9
    9260:	sub	w4, w1, w4
    9264:	clz	w0, w0
    9268:	add	w0, w0, w4, lsl #3
    926c:	sub	w0, w0, #0x1f
    9270:	str	w0, [sp, #208]
    9274:	b	8ec0 <ZSTD_free+0xa18>
    9278:	cmp	x4, #0x6
    927c:	b.eq	9288 <ZSTD_free+0xde0>  // b.none
    9280:	ldrb	w2, [x3, #6]
    9284:	add	x1, x1, x2, lsl #48
    9288:	ldrb	w2, [x3, #5]
    928c:	add	x1, x1, x2, lsl #40
    9290:	ldrb	w2, [x3, #4]
    9294:	add	x1, x1, x2, lsl #32
    9298:	b	923c <ZSTD_free+0xd94>
    929c:	cmp	x4, #0x2
    92a0:	b.ne	9258 <ZSTD_free+0xdb0>  // b.any
    92a4:	ldrb	w2, [x3, #1]
    92a8:	add	x1, x1, x2, lsl #8
    92ac:	str	x1, [sp, #200]
    92b0:	b	9258 <ZSTD_free+0xdb0>
    92b4:	ldr	x4, [sp, #296]
    92b8:	ldr	w6, [sp, #208]
    92bc:	cmp	x4, #0x0
    92c0:	cinc	x23, x4, eq  // eq = none
    92c4:	stp	x23, x18, [sp, #288]
    92c8:	b	8fd0 <ZSTD_free+0xb28>
    92cc:	add	x0, sp, #0xc8
    92d0:	mov	x2, #0x28                  	// #40
    92d4:	mov	w1, #0x0                   	// #0
    92d8:	mov	x26, #0xffffffffffffffec    	// #-20
    92dc:	bl	0 <grub_memset>
    92e0:	b	91cc <ZSTD_free+0xd24>
    92e4:	ldr	x14, [sp, #200]
    92e8:	neg	w26, w7
    92ec:	ldr	w4, [x13, #4]
    92f0:	cmp	w7, #0x1
    92f4:	lsl	x14, x14, x6
    92f8:	add	w6, w6, w7
    92fc:	str	w6, [sp, #208]
    9300:	lsr	x14, x14, x26
    9304:	add	x23, x4, x14
    9308:	b.eq	96a0 <ZSTD_free+0x11f8>  // b.none
    930c:	ldr	x7, [sp, #296]
    9310:	stp	x23, x18, [sp, #288]
    9314:	mov	w22, w3
    9318:	str	x7, [sp, #304]
    931c:	cbz	w12, 8fd8 <ZSTD_free+0xb30>
    9320:	ldr	x7, [sp, #200]
    9324:	neg	w14, w12
    9328:	cmp	w10, #0x1e
    932c:	lsl	x7, x7, x6
    9330:	add	w6, w6, w12
    9334:	str	w6, [sp, #208]
    9338:	lsr	x7, x7, x14
    933c:	add	x22, x22, x7
    9340:	b.ls	8fe0 <ZSTD_free+0xb38>  // b.plast
    9344:	cmp	w6, #0x40
    9348:	b.hi	8fe0 <ZSTD_free+0xb38>  // b.pmore
    934c:	cmp	x25, x0
    9350:	b.ls	95e8 <ZSTD_free+0x1140>  // b.plast
    9354:	ldr	x7, [sp, #224]
    9358:	cmp	x7, x0
    935c:	b.eq	8fe0 <ZSTD_free+0xb38>  // b.none
    9360:	lsr	w10, w6, #3
    9364:	lsr	w12, w6, #3
    9368:	sub	x10, x0, x10
    936c:	cmp	x7, x10
    9370:	b.ls	9380 <ZSTD_free+0xed8>  // b.plast
    9374:	sub	x7, x0, x7
    9378:	mov	w12, w7
    937c:	sub	x10, x0, w7, uxtw
    9380:	sub	w6, w6, w12, lsl #3
    9384:	ldr	x0, [x10]
    9388:	and	w7, w6, #0x3f
    938c:	str	x0, [sp, #200]
    9390:	str	x10, [sp, #216]
    9394:	b	8fe8 <ZSTD_free+0xb40>
    9398:	neg	w10, w11
    939c:	add	w6, w6, w11
    93a0:	str	w6, [sp, #208]
    93a4:	lsr	x7, x7, x10
    93a8:	add	x28, x28, x7
    93ac:	lsl	x7, x0, x6
    93b0:	b	8ff4 <ZSTD_free+0xb4c>
    93b4:	lsr	w0, w6, #3
    93b8:	and	w6, w6, #0x7
    93bc:	sub	x0, x1, x0
    93c0:	ldr	x1, [x0]
    93c4:	str	x1, [sp, #200]
    93c8:	str	w6, [sp, #208]
    93cc:	str	x0, [sp, #216]
    93d0:	b	8f7c <ZSTD_free+0xad4>
    93d4:	ldr	x28, [sp, #120]
    93d8:	cmp	x23, #0x7
    93dc:	b.hi	95c4 <ZSTD_free+0x111c>  // b.pmore
    93e0:	ldrb	w1, [x28]
    93e4:	adrp	x0, 0 <FSE_versionNumber>
    93e8:	strb	w1, [x19]
    93ec:	mov	x2, #0x4                   	// #4
    93f0:	ldr	x0, [x0]
    93f4:	ldrb	w1, [x28, #1]
    93f8:	strb	w1, [x19, #1]
    93fc:	add	x1, x0, #0x3f0
    9400:	add	x0, x0, #0x3d0
    9404:	ldrb	w5, [x28, #2]
    9408:	strb	w5, [x19, #2]
    940c:	ldr	w4, [x0, x23, lsl #2]
    9410:	add	x0, x19, x2
    9414:	ldrb	w5, [x28, #3]
    9418:	ldr	w1, [x1, x23, lsl #2]
    941c:	strb	w5, [x19, #3]
    9420:	add	x1, x28, x1
    9424:	sub	x28, x1, w4, sxtw
    9428:	bl	0 <grub_memmove>
    942c:	ldr	x0, [sp, #168]
    9430:	add	x28, x28, #0x8
    9434:	add	x23, x19, #0x8
    9438:	cmp	x25, x0
    943c:	b.ls	9608 <ZSTD_free+0x1160>  // b.plast
    9440:	ldr	x0, [sp, #160]
    9444:	cmp	x0, x23
    9448:	b.hi	9634 <ZSTD_free+0x118c>  // b.pmore
    944c:	cmp	x25, x23
    9450:	b.ls	9158 <ZSTD_free+0xcb0>  // b.plast
    9454:	orr	x0, x23, x28
    9458:	sub	x2, x25, x23
    945c:	sub	x1, x2, #0x1
    9460:	tst	x0, #0x7
    9464:	add	x0, x28, #0x7
    9468:	ccmp	x1, #0x9, #0x0, eq  // eq = none
    946c:	sub	x0, x0, x23
    9470:	ccmp	x0, #0xe, #0x0, hi  // hi = pmore
    9474:	b.ls	967c <ZSTD_free+0x11d4>  // b.plast
    9478:	and	x3, x2, #0xfffffffffffffff8
    947c:	mov	x0, #0x0                   	// #0
    9480:	ldr	x1, [x28, x0]
    9484:	str	x1, [x23, x0]
    9488:	add	x0, x0, #0x8
    948c:	cmp	x0, x3
    9490:	b.ne	9480 <ZSTD_free+0xfd8>  // b.any
    9494:	and	x1, x2, #0xfffffffffffffff8
    9498:	cmp	x2, x1
    949c:	add	x0, x23, x1
    94a0:	add	x2, x28, x1
    94a4:	b.eq	9158 <ZSTD_free+0xcb0>  // b.none
    94a8:	ldrb	w5, [x28, x1]
    94ac:	add	x3, x0, #0x1
    94b0:	strb	w5, [x23, x1]
    94b4:	cmp	x25, x3
    94b8:	b.ls	9158 <ZSTD_free+0xcb0>  // b.plast
    94bc:	ldrb	w3, [x2, #1]
    94c0:	add	x1, x0, #0x2
    94c4:	strb	w3, [x0, #1]
    94c8:	cmp	x25, x1
    94cc:	b.ls	9158 <ZSTD_free+0xcb0>  // b.plast
    94d0:	ldrb	w3, [x2, #2]
    94d4:	add	x1, x0, #0x3
    94d8:	strb	w3, [x0, #2]
    94dc:	cmp	x25, x1
    94e0:	b.ls	9158 <ZSTD_free+0xcb0>  // b.plast
    94e4:	ldrb	w3, [x2, #3]
    94e8:	add	x1, x0, #0x4
    94ec:	strb	w3, [x0, #3]
    94f0:	cmp	x25, x1
    94f4:	b.ls	9158 <ZSTD_free+0xcb0>  // b.plast
    94f8:	ldrb	w3, [x2, #4]
    94fc:	add	x1, x0, #0x5
    9500:	strb	w3, [x0, #4]
    9504:	cmp	x25, x1
    9508:	b.ls	9158 <ZSTD_free+0xcb0>  // b.plast
    950c:	ldrb	w3, [x2, #5]
    9510:	add	x1, x0, #0x6
    9514:	strb	w3, [x0, #5]
    9518:	cmp	x25, x1
    951c:	b.ls	9158 <ZSTD_free+0xcb0>  // b.plast
    9520:	ldrb	w1, [x2, #6]
    9524:	strb	w1, [x0, #6]
    9528:	b	9158 <ZSTD_free+0xcb0>
    952c:	mov	x26, #0xffffffffffffffba    	// #-70
    9530:	mov	x0, x26
    9534:	ldp	x29, x30, [sp, #16]
    9538:	ldp	x19, x20, [sp, #32]
    953c:	ldp	x21, x22, [sp, #48]
    9540:	ldp	x23, x24, [sp, #64]
    9544:	ldp	x25, x26, [sp, #80]
    9548:	ldp	x27, x28, [sp, #96]
    954c:	add	sp, sp, #0x150
    9550:	ret
    9554:	mov	x26, #0xffffffffffffffec    	// #-20
    9558:	ldp	x27, x28, [sp, #96]
    955c:	b	91cc <ZSTD_free+0xd24>
    9560:	ldp	x7, x1, [sp, #120]
    9564:	mov	x4, x23
    9568:	ldp	x6, x0, [sp, #136]
    956c:	str	x0, [sp]
    9570:	ldr	x0, [sp, #152]
    9574:	str	x0, [sp, #8]
    9578:	mov	x3, x22
    957c:	add	x5, sp, #0xc0
    9580:	mov	x2, x28
    9584:	mov	x0, x24
    9588:	bl	8a50 <ZSTD_free+0x5a8>
    958c:	mov	x26, x0
    9590:	b	9158 <ZSTD_free+0xcb0>
    9594:	ldr	x1, [sp, #192]
    9598:	add	x28, x24, #0x8
    959c:	add	x20, x1, #0x8
    95a0:	mov	x1, x20
    95a4:	mov	x0, x28
    95a8:	mov	x2, #0x8                   	// #8
    95ac:	add	x28, x28, x2
    95b0:	bl	0 <grub_memmove>
    95b4:	add	x20, x20, #0x8
    95b8:	cmp	x19, x28
    95bc:	b.hi	95a0 <ZSTD_free+0x10f8>  // b.pmore
    95c0:	b	90bc <ZSTD_free+0xc14>
    95c4:	mov	x1, x28
    95c8:	mov	x0, x19
    95cc:	mov	x2, #0x8                   	// #8
    95d0:	bl	0 <grub_memmove>
    95d4:	b	942c <ZSTD_free+0xf84>
    95d8:	mov	x2, x22
    95dc:	mov	x0, x19
    95e0:	bl	0 <grub_memmove>
    95e4:	b	9158 <ZSTD_free+0xcb0>
    95e8:	lsr	w7, w6, #3
    95ec:	and	w6, w6, #0x7
    95f0:	sub	x0, x0, x7
    95f4:	str	x0, [sp, #216]
    95f8:	mov	w7, w6
    95fc:	ldr	x0, [x0]
    9600:	str	x0, [sp, #200]
    9604:	b	8fe8 <ZSTD_free+0xb40>
    9608:	add	x25, x19, x22
    960c:	nop
    9610:	mov	x1, x28
    9614:	mov	x0, x23
    9618:	mov	x2, #0x8                   	// #8
    961c:	add	x23, x23, x2
    9620:	bl	0 <grub_memmove>
    9624:	add	x28, x28, #0x8
    9628:	cmp	x25, x23
    962c:	b.hi	9610 <ZSTD_free+0x1168>  // b.pmore
    9630:	b	9158 <ZSTD_free+0xcb0>
    9634:	mov	x27, x0
    9638:	sub	x19, x0, x23
    963c:	mov	x22, x28
    9640:	mov	x1, x22
    9644:	mov	x0, x23
    9648:	mov	x2, #0x8                   	// #8
    964c:	add	x23, x23, x2
    9650:	bl	0 <grub_memmove>
    9654:	add	x22, x22, #0x8
    9658:	cmp	x27, x23
    965c:	b.hi	9640 <ZSTD_free+0x1198>  // b.pmore
    9660:	add	x28, x28, x19
    9664:	ldr	x23, [sp, #160]
    9668:	b	944c <ZSTD_free+0xfa4>
    966c:	mov	x25, x18
    9670:	ldp	x20, x19, [sp, #128]
    9674:	ldp	x22, x23, [sp, #176]
    9678:	b	9184 <ZSTD_free+0xcdc>
    967c:	mov	x0, #0x0                   	// #0
    9680:	ldrb	w1, [x28, x0]
    9684:	strb	w1, [x23, x0]
    9688:	add	x0, x0, #0x1
    968c:	cmp	x2, x0
    9690:	b.ne	9680 <ZSTD_free+0x11d8>  // b.any
    9694:	b	9158 <ZSTD_free+0xcb0>
    9698:	ldp	x27, x28, [sp, #96]
    969c:	b	91cc <ZSTD_free+0xd24>
    96a0:	cmp	w28, #0x0
    96a4:	cinc	x7, x23, eq  // eq = none
    96a8:	cbz	x7, 8fcc <ZSTD_free+0xb24>
    96ac:	cmp	x7, #0x3
    96b0:	b.ne	96cc <ZSTD_free+0x1224>  // b.any
    96b4:	subs	x4, x18, #0x1
    96b8:	cinc	x23, x4, eq  // eq = none
    96bc:	ldr	x7, [sp, #296]
    96c0:	stp	x23, x18, [sp, #288]
    96c4:	str	x7, [sp, #304]
    96c8:	b	8fd0 <ZSTD_free+0xb28>
    96cc:	add	x4, x7, #0xa
    96d0:	add	x14, sp, #0xd0
    96d4:	ldr	x4, [x14, x4, lsl #3]
    96d8:	cmp	x4, #0x0
    96dc:	cinc	x23, x4, eq  // eq = none
    96e0:	cmp	x7, #0x1
    96e4:	b.ne	96bc <ZSTD_free+0x1214>  // b.any
    96e8:	ldr	w6, [sp, #208]
    96ec:	b	92c4 <ZSTD_free+0xe1c>
	...
    96f8:	sub	sp, sp, #0x220
    96fc:	add	x2, x1, x2
    9700:	mov	x8, x0
    9704:	mov	x7, x1
    9708:	stp	x29, x30, [sp, #16]
    970c:	add	x29, sp, #0x10
    9710:	stp	x2, x1, [sp, #128]
    9714:	ldr	x1, [x0, #28952]
    9718:	stp	x25, x26, [sp, #80]
    971c:	ldr	x0, [x0, #28984]
    9720:	stp	x27, x28, [sp, #96]
    9724:	add	x0, x1, x0
    9728:	str	x0, [sp, #144]
    972c:	str	w5, [sp, #156]
    9730:	str	x1, [sp, #272]
    9734:	cbz	w5, 97d4 <ZSTD_free+0x132c>
    9738:	ldr	x1, [x8, #28752]
    973c:	add	x2, x8, #0x4, lsl #12
    9740:	ldr	x9, [x8, #28768]
    9744:	stp	x1, x9, [sp, #176]
    9748:	ldr	w6, [x2, #10300]
    974c:	str	x1, [sp, #520]
    9750:	sub	x1, x7, x1
    9754:	mov	x7, x2
    9758:	ldr	w5, [x2, #10304]
    975c:	str	x2, [sp, #224]
    9760:	mov	w0, #0x1                   	// #1
    9764:	ldr	w2, [x2, #10308]
    9768:	str	x1, [sp, #536]
    976c:	ldr	x1, [x8, #28760]
    9770:	str	x1, [sp, #192]
    9774:	stp	x6, x5, [sp, #496]
    9778:	str	x2, [sp, #512]
    977c:	str	x9, [sp, #528]
    9780:	str	w0, [x7, #12460]
    9784:	cbz	x4, 9ffc <ZSTD_free+0x1b54>
    9788:	add	x0, x3, x4
    978c:	add	x1, x3, #0x8
    9790:	stp	x3, x1, [sp, #432]
    9794:	cmp	x4, #0x7
    9798:	ldurb	w0, [x0, #-1]
    979c:	b.ls	9ab4 <ZSTD_free+0x160c>  // b.plast
    97a0:	sub	x1, x4, #0x8
    97a4:	add	x2, x3, x1
    97a8:	str	x2, [sp, #424]
    97ac:	ldr	x1, [x3, x1]
    97b0:	str	x1, [sp, #408]
    97b4:	cbz	w0, 9a98 <ZSTD_free+0x15f0>
    97b8:	clz	w0, w0
    97bc:	cmn	x4, #0x78
    97c0:	sub	w0, w0, #0x17
    97c4:	str	w0, [sp, #416]
    97c8:	b.hi	9a98 <ZSTD_free+0x15f0>  // b.pmore
    97cc:	stp	x19, x20, [sp, #32]
    97d0:	b	9b18 <ZSTD_free+0x1670>
    97d4:	mov	x26, x7
    97d8:	stp	x19, x20, [sp, #32]
    97dc:	sub	x19, x0, x1
    97e0:	ldr	x0, [sp, #128]
    97e4:	mov	x27, #0xffffffffffffffba    	// #-70
    97e8:	sub	x2, x0, x26
    97ec:	cmp	x19, x2
    97f0:	b.hi	9d94 <ZSTD_free+0x18ec>  // b.pmore
    97f4:	mov	x2, x19
    97f8:	mov	x0, x26
    97fc:	bl	0 <grub_memmove>
    9800:	add	x9, x26, x19
    9804:	ldp	x19, x20, [sp, #32]
    9808:	ldr	x0, [sp, #136]
    980c:	sub	x27, x9, x0
    9810:	mov	x0, x27
    9814:	ldp	x29, x30, [sp, #16]
    9818:	ldp	x25, x26, [sp, #80]
    981c:	ldp	x27, x28, [sp, #96]
    9820:	add	sp, sp, #0x220
    9824:	ret
    9828:	cbz	w25, 9834 <ZSTD_free+0x138c>
    982c:	str	x6, [sp, #160]
    9830:	str	x6, [sp, #424]
    9834:	cbz	w1, 983c <ZSTD_free+0x1394>
    9838:	str	x2, [sp, #536]
    983c:	cmp	w0, #0x40
    9840:	ldr	x26, [sp, #136]
    9844:	b.hi	a4a4 <ZSTD_free+0x1ffc>  // b.pmore
    9848:	ldr	x1, [sp, #128]
    984c:	mov	w23, w8
    9850:	sub	x2, x1, #0x8
    9854:	sub	x1, x1, #0xd
    9858:	str	x1, [sp, #256]
    985c:	ldr	x1, [sp, #160]
    9860:	str	x2, [sp, #208]
    9864:	cmp	x1, x24
    9868:	b.cs	a184 <ZSTD_free+0x1cdc>  // b.hs, b.nlast
    986c:	ldr	x3, [sp, #432]
    9870:	cmp	x3, x1
    9874:	b.eq	98ac <ZSTD_free+0x1404>  // b.none
    9878:	lsr	w2, w0, #3
    987c:	lsr	w4, w0, #3
    9880:	sub	x2, x1, x2
    9884:	cmp	x3, x2
    9888:	b.ls	9898 <ZSTD_free+0x13f0>  // b.plast
    988c:	sub	x2, x1, x3
    9890:	mov	w4, w2
    9894:	sub	x2, x1, w2, uxtw
    9898:	ldr	x1, [x2]
    989c:	sub	w0, w0, w4, lsl #3
    98a0:	str	x1, [sp, #408]
    98a4:	str	w0, [sp, #416]
    98a8:	str	x2, [sp, #424]
    98ac:	ldr	w0, [sp, #156]
    98b0:	cmp	w0, w23
    98b4:	b.le	a550 <ZSTD_free+0x20a8>
    98b8:	ldp	x6, x8, [sp, #464]
    98bc:	ldp	x3, x13, [sp, #448]
    98c0:	ldp	x5, x11, [sp, #480]
    98c4:	lsl	x6, x6, #3
    98c8:	add	x10, x8, x6
    98cc:	lsl	x3, x3, #3
    98d0:	add	x4, x13, x3
    98d4:	lsl	x5, x5, #3
    98d8:	ldrb	w0, [x10, #2]
    98dc:	add	x7, x11, x5
    98e0:	ldrb	w9, [x4, #2]
    98e4:	ldr	w21, [x4, #4]
    98e8:	ldrb	w2, [x7, #2]
    98ec:	ldr	w16, [x7, #4]
    98f0:	add	w1, w9, w2
    98f4:	add	w1, w1, w0
    98f8:	ldr	x15, [sp, #496]
    98fc:	cbnz	w0, a06c <ZSTD_free+0x1bc4>
    9900:	cbz	w21, a444 <ZSTD_free+0x1f9c>
    9904:	ldr	w14, [sp, #416]
    9908:	mov	w0, w14
    990c:	mov	x25, x15
    9910:	mov	w12, w16
    9914:	str	x12, [sp, #160]
    9918:	cbnz	w2, a0b4 <ZSTD_free+0x1c0c>
    991c:	cmp	w1, #0x1e
    9920:	b.hi	a0e0 <ZSTD_free+0x1c38>  // b.pmore
    9924:	ldr	x2, [sp, #408]
    9928:	and	w1, w0, #0x3f
    992c:	mov	w12, w21
    9930:	str	x12, [sp, #168]
    9934:	lsl	x1, x2, x1
    9938:	cbnz	w9, a160 <ZSTD_free+0x1cb8>
    993c:	ldrb	w4, [x4, #3]
    9940:	lsr	x1, x1, #1
    9944:	ldrh	w9, [x13, x3]
    9948:	mov	w3, #0x3f                  	// #63
    994c:	add	w0, w4, w0
    9950:	str	w0, [sp, #416]
    9954:	sub	w4, w3, w4
    9958:	ubfiz	x12, x23, #5, #2
    995c:	ldrb	w7, [x7, #3]
    9960:	lsl	x3, x2, x0
    9964:	ldrh	w11, [x11, x5]
    9968:	mov	w5, #0x3f                  	// #63
    996c:	add	w0, w0, w7
    9970:	str	w0, [sp, #416]
    9974:	ldr	x13, [sp, #200]
    9978:	sub	w7, w5, w7
    997c:	ldrb	w10, [x10, #3]
    9980:	lsr	x4, x1, x4
    9984:	add	x22, x13, x12
    9988:	mov	w1, w5
    998c:	lsl	x2, x2, x0
    9990:	add	w0, w0, w10
    9994:	ldr	x5, [sp, #168]
    9998:	lsr	x3, x3, #1
    999c:	ldr	x19, [sp, #536]
    99a0:	sub	w1, w1, w10
    99a4:	ldrh	w6, [x8, x6]
    99a8:	lsr	x2, x2, #1
    99ac:	str	w0, [sp, #416]
    99b0:	add	x19, x5, x19
    99b4:	ldr	x0, [sp, #160]
    99b8:	lsr	x3, x3, x7
    99bc:	ldr	x20, [x13, x12]
    99c0:	add	x0, x19, x0
    99c4:	ldr	x24, [x22, #8]
    99c8:	lsr	x2, x2, x1
    99cc:	ldr	x7, [sp, #520]
    99d0:	add	x4, x4, w9, uxth
    99d4:	ldr	x5, [sp, #528]
    99d8:	cmp	x19, x25
    99dc:	add	x2, x2, w6, uxth
    99e0:	add	x27, x20, x24
    99e4:	str	x0, [sp, #536]
    99e8:	add	x3, x3, w11, uxth
    99ec:	ldr	x0, [sp, #128]
    99f0:	str	x4, [sp, #448]
    99f4:	ldr	x1, [sp, #272]
    99f8:	add	x4, x26, x27
    99fc:	str	x2, [sp, #464]
    9a00:	csel	x2, x5, x7, cc  // cc = lo, ul, last
    9a04:	stp	x2, x4, [sp, #232]
    9a08:	add	x28, x1, x20
    9a0c:	cmp	x0, x4
    9a10:	str	x3, [sp, #480]
    9a14:	b.cc	a2d8 <ZSTD_free+0x1e30>  // b.lo, b.ul, b.last
    9a18:	ldr	x0, [sp, #144]
    9a1c:	cmp	x0, x28
    9a20:	b.cc	9a88 <ZSTD_free+0x15e0>  // b.lo, b.ul, b.last
    9a24:	ldr	x0, [sp, #208]
    9a28:	add	x21, x26, x20
    9a2c:	cmp	x21, x0
    9a30:	ldr	x0, [x22, #16]
    9a34:	str	x0, [sp, #216]
    9a38:	b.hi	a2ec <ZSTD_free+0x1e44>  // b.pmore
    9a3c:	ldr	x3, [x22, #24]
    9a40:	mov	x0, x26
    9a44:	mov	x2, #0x8                   	// #8
    9a48:	str	x3, [sp, #248]
    9a4c:	bl	0 <grub_memmove>
    9a50:	cmp	x20, #0x8
    9a54:	b.hi	a460 <ZSTD_free+0x1fb8>  // b.pmore
    9a58:	ldr	x0, [sp, #176]
    9a5c:	str	x28, [sp, #272]
    9a60:	ldr	x1, [sp, #216]
    9a64:	sub	x0, x21, x0
    9a68:	mov	x3, x1
    9a6c:	cmp	x1, x0
    9a70:	b.ls	a1b0 <ZSTD_free+0x1d08>  // b.plast
    9a74:	ldr	x0, [sp, #192]
    9a78:	sub	x0, x21, x0
    9a7c:	cmp	x1, x0
    9a80:	b.ls	a378 <ZSTD_free+0x1ed0>  // b.plast
    9a84:	nop
    9a88:	ldp	x19, x20, [sp, #32]
    9a8c:	ldp	x21, x22, [sp, #48]
    9a90:	ldp	x23, x24, [sp, #64]
    9a94:	nop
    9a98:	mov	x27, #0xffffffffffffffec    	// #-20
    9a9c:	mov	x0, x27
    9aa0:	ldp	x29, x30, [sp, #16]
    9aa4:	ldp	x25, x26, [sp, #80]
    9aa8:	ldp	x27, x28, [sp, #96]
    9aac:	add	sp, sp, #0x220
    9ab0:	ret
    9ab4:	ldrb	w1, [x3]
    9ab8:	cmp	x4, #0x5
    9abc:	str	x1, [sp, #408]
    9ac0:	str	x3, [sp, #424]
    9ac4:	b.eq	9d70 <ZSTD_free+0x18c8>  // b.none
    9ac8:	b.hi	9d58 <ZSTD_free+0x18b0>  // b.pmore
    9acc:	cmp	x4, #0x3
    9ad0:	b.eq	9ae4 <ZSTD_free+0x163c>  // b.none
    9ad4:	cmp	x4, #0x4
    9ad8:	b.ne	9d7c <ZSTD_free+0x18d4>  // b.any
    9adc:	ldrb	w2, [x3, #3]
    9ae0:	add	x1, x1, x2, lsl #24
    9ae4:	ldrb	w2, [x3, #2]
    9ae8:	add	x1, x1, x2, lsl #16
    9aec:	ldrb	w2, [x3, #1]
    9af0:	add	x1, x1, x2, lsl #8
    9af4:	str	x1, [sp, #408]
    9af8:	cbz	w0, 9a98 <ZSTD_free+0x15f0>
    9afc:	mov	w1, #0x9                   	// #9
    9b00:	sub	w4, w1, w4
    9b04:	clz	w0, w0
    9b08:	stp	x19, x20, [sp, #32]
    9b0c:	add	w0, w0, w4, lsl #3
    9b10:	sub	w0, w0, #0x1f
    9b14:	str	w0, [sp, #416]
    9b18:	ldr	w0, [sp, #156]
    9b1c:	add	x2, sp, #0x198
    9b20:	ldr	x3, [x8]
    9b24:	cmp	w0, #0x4
    9b28:	mov	w20, #0x4                   	// #4
    9b2c:	csel	w0, w0, w20, le
    9b30:	add	x1, x2, #0x30
    9b34:	str	w0, [sp, #120]
    9b38:	add	x0, x2, #0x28
    9b3c:	bl	8d48 <ZSTD_free+0x8a0>
    9b40:	ldr	x3, [x8, #16]
    9b44:	add	x2, sp, #0x198
    9b48:	add	x1, x2, #0x40
    9b4c:	add	x0, x2, #0x38
    9b50:	bl	8d48 <ZSTD_free+0x8a0>
    9b54:	ldr	x3, [x8, #8]
    9b58:	add	x2, sp, #0x198
    9b5c:	add	x0, x2, #0x48
    9b60:	add	x1, x2, #0x50
    9b64:	bl	8d48 <ZSTD_free+0x8a0>
    9b68:	ldr	w0, [sp, #416]
    9b6c:	cmp	w0, #0x40
    9b70:	b.hi	a370 <ZSTD_free+0x1ec8>  // b.pmore
    9b74:	stp	x21, x22, [sp, #48]
    9b78:	add	x3, sp, #0x118
    9b7c:	mov	w1, #0x0                   	// #0
    9b80:	stp	x23, x24, [sp, #64]
    9b84:	mov	w25, #0x0                   	// #0
    9b88:	mov	w8, #0x0                   	// #0
    9b8c:	ldr	x24, [sp, #440]
    9b90:	mov	w18, #0x3f                  	// #63
    9b94:	ldr	x22, [sp, #456]
    9b98:	str	x3, [sp, #200]
    9b9c:	ldr	x21, [sp, #472]
    9ba0:	ldr	x20, [sp, #488]
    9ba4:	ldr	x30, [sp, #520]
    9ba8:	ldr	x28, [sp, #528]
    9bac:	ldr	x2, [sp, #536]
    9bb0:	ldp	x6, x23, [sp, #424]
    9bb4:	str	x6, [sp, #160]
    9bb8:	cmp	x6, x24
    9bbc:	b.cs	a04c <ZSTD_free+0x1ba4>  // b.hs, b.nlast
    9bc0:	cmp	x6, x23
    9bc4:	b.eq	9c00 <ZSTD_free+0x1758>  // b.none
    9bc8:	lsr	w4, w0, #3
    9bcc:	lsr	w5, w0, #3
    9bd0:	sub	x4, x6, x4
    9bd4:	cmp	x23, x4
    9bd8:	b.ls	9be8 <ZSTD_free+0x1740>  // b.plast
    9bdc:	sub	x4, x6, x23
    9be0:	mov	w5, w4
    9be4:	sub	x4, x6, w4, uxtw
    9be8:	mov	x6, x4
    9bec:	sub	w0, w0, w5, lsl #3
    9bf0:	ldr	x7, [x4]
    9bf4:	mov	w25, #0x1                   	// #1
    9bf8:	str	x7, [sp, #408]
    9bfc:	str	w0, [sp, #416]
    9c00:	ldr	w4, [sp, #120]
    9c04:	cmp	w4, w8
    9c08:	b.le	9828 <ZSTD_free+0x1380>
    9c0c:	ldr	x10, [sp, #464]
    9c10:	ldr	x7, [sp, #448]
    9c14:	ldr	x9, [sp, #480]
    9c18:	lsl	x10, x10, #3
    9c1c:	lsl	x7, x7, #3
    9c20:	add	x17, x21, x10
    9c24:	add	x12, x22, x7
    9c28:	lsl	x9, x9, #3
    9c2c:	add	x13, x20, x9
    9c30:	ldrb	w11, [x17, #2]
    9c34:	ldrb	w15, [x12, #2]
    9c38:	ldr	w4, [x12, #4]
    9c3c:	ldrb	w16, [x13, #2]
    9c40:	ldr	w5, [x13, #4]
    9c44:	add	w14, w15, w16
    9c48:	add	w14, w14, w11
    9c4c:	ldr	x19, [sp, #496]
    9c50:	cbnz	w11, a014 <ZSTD_free+0x1b6c>
    9c54:	cbz	w4, 9db0 <ZSTD_free+0x1908>
    9c58:	mov	x26, x19
    9c5c:	mov	w5, w5
    9c60:	cbnz	w16, 9dcc <ZSTD_free+0x1924>
    9c64:	cmp	w14, #0x1e
    9c68:	b.hi	9df0 <ZSTD_free+0x1948>  // b.pmore
    9c6c:	ldr	x11, [sp, #408]
    9c70:	and	w1, w0, #0x3f
    9c74:	mov	w4, w4
    9c78:	lsl	x1, x11, x1
    9c7c:	cbnz	w15, 9e48 <ZSTD_free+0x19a0>
    9c80:	ldrb	w14, [x12, #3]
    9c84:	lsr	x1, x1, #1
    9c88:	ldrh	w12, [x22, x7]
    9c8c:	add	x2, x2, x4
    9c90:	add	w0, w14, w0
    9c94:	str	w0, [sp, #416]
    9c98:	sub	w7, w18, w14
    9c9c:	cmp	x2, x26
    9ca0:	ldrb	w15, [x13, #3]
    9ca4:	lsl	x14, x11, x0
    9ca8:	ldrh	w9, [x20, x9]
    9cac:	lsr	x1, x1, x7
    9cb0:	add	w0, w0, w15
    9cb4:	str	w0, [sp, #416]
    9cb8:	lsr	x14, x14, #1
    9cbc:	sub	w15, w18, w15
    9cc0:	ldrb	w13, [x17, #3]
    9cc4:	lsl	x11, x11, x0
    9cc8:	ldrh	w10, [x21, x10]
    9ccc:	lsr	x11, x11, #1
    9cd0:	sub	w7, w18, w13
    9cd4:	sub	x16, x2, x26
    9cd8:	lsr	x14, x14, x15
    9cdc:	add	x1, x1, w12, uxth
    9ce0:	lsr	x11, x11, x7
    9ce4:	csel	x7, x30, x28, cs  // cs = hs, nlast
    9ce8:	add	w0, w0, w13
    9cec:	add	x9, x14, w9, uxth
    9cf0:	add	x11, x11, w10, uxth
    9cf4:	add	x7, x7, x16
    9cf8:	stp	x4, x5, [x3]
    9cfc:	add	w8, w8, #0x1
    9d00:	add	x2, x2, x5
    9d04:	str	x26, [x3, #16]
    9d08:	cmp	w0, #0x40
    9d0c:	str	x7, [x3, #24]
    9d10:	add	x3, x3, #0x20
    9d14:	str	w0, [sp, #416]
    9d18:	str	x1, [sp, #448]
    9d1c:	mov	w1, #0x1                   	// #1
    9d20:	str	x11, [sp, #464]
    9d24:	str	x9, [sp, #480]
    9d28:	b.ls	9bb8 <ZSTD_free+0x1710>  // b.plast
    9d2c:	cbz	w25, 9d34 <ZSTD_free+0x188c>
    9d30:	str	x6, [sp, #424]
    9d34:	ldp	x21, x22, [sp, #48]
    9d38:	str	x2, [sp, #536]
    9d3c:	ldp	x23, x24, [sp, #64]
    9d40:	ldr	w0, [sp, #120]
    9d44:	cmp	w0, w8
    9d48:	b.le	9e64 <ZSTD_free+0x19bc>
    9d4c:	mov	x27, #0xffffffffffffffec    	// #-20
    9d50:	ldp	x19, x20, [sp, #32]
    9d54:	b	9a9c <ZSTD_free+0x15f4>
    9d58:	cmp	x4, #0x6
    9d5c:	b.eq	9d68 <ZSTD_free+0x18c0>  // b.none
    9d60:	ldrb	w2, [x3, #6]
    9d64:	add	x1, x1, x2, lsl #48
    9d68:	ldrb	w2, [x3, #5]
    9d6c:	add	x1, x1, x2, lsl #40
    9d70:	ldrb	w2, [x3, #4]
    9d74:	add	x1, x1, x2, lsl #32
    9d78:	b	9adc <ZSTD_free+0x1634>
    9d7c:	cmp	x4, #0x2
    9d80:	b.ne	9af8 <ZSTD_free+0x1650>  // b.any
    9d84:	ldrb	w2, [x3, #1]
    9d88:	add	x1, x1, x2, lsl #8
    9d8c:	str	x1, [sp, #408]
    9d90:	b	9af8 <ZSTD_free+0x1650>
    9d94:	mov	x0, x27
    9d98:	ldp	x29, x30, [sp, #16]
    9d9c:	ldp	x19, x20, [sp, #32]
    9da0:	ldp	x25, x26, [sp, #80]
    9da4:	ldp	x27, x28, [sp, #96]
    9da8:	add	sp, sp, #0x220
    9dac:	ret
    9db0:	ldr	x26, [sp, #504]
    9db4:	ldr	w0, [sp, #416]
    9db8:	cmp	x26, #0x0
    9dbc:	cinc	x26, x26, eq  // eq = none
    9dc0:	stp	x26, x19, [sp, #496]
    9dc4:	mov	w5, w5
    9dc8:	cbz	w16, 9c64 <ZSTD_free+0x17bc>
    9dcc:	ldr	x1, [sp, #408]
    9dd0:	neg	w11, w16
    9dd4:	cmp	w14, #0x1e
    9dd8:	lsl	x1, x1, x0
    9ddc:	add	w0, w0, w16
    9de0:	str	w0, [sp, #416]
    9de4:	lsr	x1, x1, x11
    9de8:	add	x5, x5, x1
    9dec:	b.ls	9c6c <ZSTD_free+0x17c4>  // b.plast
    9df0:	cmp	w0, #0x40
    9df4:	b.hi	9c6c <ZSTD_free+0x17c4>  // b.pmore
    9df8:	cmp	x24, x6
    9dfc:	b.ls	a138 <ZSTD_free+0x1c90>  // b.plast
    9e00:	cmp	x23, x6
    9e04:	b.eq	9c6c <ZSTD_free+0x17c4>  // b.none
    9e08:	lsr	w1, w0, #3
    9e0c:	lsr	w11, w0, #3
    9e10:	sub	x1, x6, x1
    9e14:	cmp	x1, x23
    9e18:	b.cs	a158 <ZSTD_free+0x1cb0>  // b.hs, b.nlast
    9e1c:	sub	x1, x6, x23
    9e20:	mov	w11, w1
    9e24:	sub	x6, x6, w1, uxtw
    9e28:	sub	w0, w0, w11, lsl #3
    9e2c:	mov	w4, w4
    9e30:	ldr	x11, [x6]
    9e34:	and	w1, w0, #0x3f
    9e38:	str	x11, [sp, #408]
    9e3c:	mov	w25, #0x1                   	// #1
    9e40:	lsl	x1, x11, x1
    9e44:	cbz	w15, 9c80 <ZSTD_free+0x17d8>
    9e48:	neg	w14, w15
    9e4c:	add	w0, w0, w15
    9e50:	str	w0, [sp, #416]
    9e54:	lsr	x1, x1, x14
    9e58:	add	x4, x4, x1
    9e5c:	lsl	x1, x11, x0
    9e60:	b	9c80 <ZSTD_free+0x17d8>
    9e64:	ldr	x26, [sp, #136]
    9e68:	ldr	w0, [sp, #156]
    9e6c:	cmp	w0, w8
    9e70:	b.gt	9d4c <ZSTD_free+0x18a4>
    9e74:	ldr	w0, [sp, #120]
    9e78:	ldr	x1, [sp, #272]
    9e7c:	sub	w20, w8, w0
    9e80:	ldr	w0, [sp, #156]
    9e84:	cmp	w0, w20
    9e88:	b.le	a798 <ZSTD_free+0x22f0>
    9e8c:	add	x3, sp, #0x118
    9e90:	ubfiz	x2, x20, #5, #2
    9e94:	add	x0, x3, x2
    9e98:	stp	x21, x22, [sp, #48]
    9e9c:	ldr	x28, [x3, x2]
    9ea0:	stp	x23, x24, [sp, #64]
    9ea4:	ldr	x21, [x0, #8]
    9ea8:	str	x3, [sp, #200]
    9eac:	ldr	x4, [sp, #128]
    9eb0:	add	x27, x28, x21
    9eb4:	add	x22, x26, x27
    9eb8:	add	x25, x26, x28
    9ebc:	sub	x5, x4, #0x8
    9ec0:	str	x5, [sp, #160]
    9ec4:	add	x23, x1, x28
    9ec8:	cmp	x4, x22
    9ecc:	b.cc	a2d8 <ZSTD_free+0x1e30>  // b.lo, b.ul, b.last
    9ed0:	sub	x2, x4, #0xd
    9ed4:	ldr	x19, [x0, #24]
    9ed8:	str	x2, [sp, #168]
    9edc:	ldr	x2, [x0, #16]
    9ee0:	str	x2, [sp, #120]
    9ee4:	ldr	x0, [sp, #144]
    9ee8:	cmp	x0, x23
    9eec:	b.cc	9a88 <ZSTD_free+0x15e0>  // b.lo, b.ul, b.last
    9ef0:	ldr	x0, [sp, #160]
    9ef4:	cmp	x0, x25
    9ef8:	b.cc	a6ec <ZSTD_free+0x2244>  // b.lo, b.ul, b.last
    9efc:	mov	x0, x26
    9f00:	mov	x2, #0x8                   	// #8
    9f04:	bl	0 <grub_memmove>
    9f08:	cmp	x28, #0x8
    9f0c:	b.hi	a724 <ZSTD_free+0x227c>  // b.pmore
    9f10:	ldr	x0, [sp, #176]
    9f14:	str	x23, [sp, #272]
    9f18:	ldr	x1, [sp, #120]
    9f1c:	sub	x0, x25, x0
    9f20:	mov	x4, x1
    9f24:	cmp	x0, x1
    9f28:	b.cs	a598 <ZSTD_free+0x20f0>  // b.hs, b.nlast
    9f2c:	ldr	x0, [sp, #192]
    9f30:	sub	x0, x25, x0
    9f34:	cmp	x0, x1
    9f38:	b.cc	9a88 <ZSTD_free+0x15e0>  // b.lo, b.ul, b.last
    9f3c:	ldr	x1, [sp, #184]
    9f40:	add	x0, x19, x21
    9f44:	cmp	x1, x0
    9f48:	b.cs	a7b8 <ZSTD_free+0x2310>  // b.hs, b.nlast
    9f4c:	sub	x23, x1, x19
    9f50:	mov	x0, x25
    9f54:	mov	x1, x19
    9f58:	mov	x2, x23
    9f5c:	bl	0 <grub_memmove>
    9f60:	sub	x21, x21, x23
    9f64:	ldr	x0, [sp, #160]
    9f68:	cmp	x21, #0x2
    9f6c:	add	x25, x25, x23
    9f70:	ccmp	x25, x0, #0x2, hi  // hi = pmore
    9f74:	b.ls	a590 <ZSTD_free+0x20e8>  // b.plast
    9f78:	cbz	x21, 9fa0 <ZSTD_free+0x1af8>
    9f7c:	mov	w0, #0x0                   	// #0
    9f80:	mov	x1, #0x0                   	// #0
    9f84:	ldr	x2, [sp, #176]
    9f88:	add	w0, w0, #0x1
    9f8c:	cmp	x21, w0, uxtw
    9f90:	ldrb	w2, [x2, x1]
    9f94:	strb	w2, [x25, x1]
    9f98:	mov	w1, w0
    9f9c:	b.hi	9f84 <ZSTD_free+0x1adc>  // b.pmore
    9fa0:	cmn	x27, #0x78
    9fa4:	b.hi	a580 <ZSTD_free+0x20d8>  // b.pmore
    9fa8:	ldr	w0, [sp, #156]
    9fac:	add	w20, w20, #0x1
    9fb0:	add	x26, x26, x27
    9fb4:	cmp	w0, w20
    9fb8:	ldr	x1, [sp, #272]
    9fbc:	b.eq	a790 <ZSTD_free+0x22e8>  // b.none
    9fc0:	ldr	x3, [sp, #200]
    9fc4:	ubfiz	x2, x20, #5, #2
    9fc8:	add	x0, x3, x2
    9fcc:	ldr	x28, [x3, x2]
    9fd0:	ldr	x21, [x0, #8]
    9fd4:	add	x25, x26, x28
    9fd8:	ldr	x2, [sp, #128]
    9fdc:	add	x27, x28, x21
    9fe0:	add	x22, x26, x27
    9fe4:	add	x23, x1, x28
    9fe8:	cmp	x2, x22
    9fec:	b.cc	a2d8 <ZSTD_free+0x1e30>  // b.lo, b.ul, b.last
    9ff0:	ldp	x2, x19, [x0, #16]
    9ff4:	str	x2, [sp, #120]
    9ff8:	b	9ee4 <ZSTD_free+0x1a3c>
    9ffc:	add	x0, sp, #0x198
    a000:	mov	x2, #0x28                  	// #40
    a004:	mov	w1, #0x0                   	// #0
    a008:	mov	x27, #0xffffffffffffffec    	// #-20
    a00c:	bl	0 <grub_memset>
    a010:	b	9810 <ZSTD_free+0x1368>
    a014:	ldr	x1, [sp, #408]
    a018:	neg	w27, w11
    a01c:	ldr	w26, [x17, #4]
    a020:	cmp	w11, #0x1
    a024:	lsl	x1, x1, x0
    a028:	add	w0, w0, w11
    a02c:	str	w0, [sp, #416]
    a030:	lsr	x1, x1, x27
    a034:	add	x26, x26, x1
    a038:	b.eq	a870 <ZSTD_free+0x23c8>  // b.none
    a03c:	ldr	x1, [sp, #504]
    a040:	stp	x26, x19, [sp, #496]
    a044:	str	x1, [sp, #512]
    a048:	b	9c5c <ZSTD_free+0x17b4>
    a04c:	lsr	w4, w0, #3
    a050:	mov	w25, #0x1                   	// #1
    a054:	sub	x6, x6, x4
    a058:	and	w0, w0, #0x7
    a05c:	ldr	x4, [x6]
    a060:	str	x4, [sp, #408]
    a064:	str	w0, [sp, #416]
    a068:	b	9c00 <ZSTD_free+0x1758>
    a06c:	ldr	x12, [sp, #408]
    a070:	neg	w18, w0
    a074:	ldr	w14, [sp, #416]
    a078:	cmp	w0, #0x1
    a07c:	ldr	w17, [x10, #4]
    a080:	add	w0, w0, w14
    a084:	str	w0, [sp, #416]
    a088:	lsl	x12, x12, x14
    a08c:	mov	w14, w0
    a090:	lsr	x12, x12, x18
    a094:	add	x25, x17, x12
    a098:	b.eq	a820 <ZSTD_free+0x2378>  // b.none
    a09c:	ldr	x12, [sp, #504]
    a0a0:	stp	x25, x15, [sp, #496]
    a0a4:	str	x12, [sp, #512]
    a0a8:	mov	w12, w16
    a0ac:	str	x12, [sp, #160]
    a0b0:	cbz	w2, 991c <ZSTD_free+0x1474>
    a0b4:	ldr	x12, [sp, #408]
    a0b8:	neg	w14, w2
    a0bc:	cmp	w1, #0x1e
    a0c0:	lsl	x12, x12, x0
    a0c4:	add	w0, w0, w2
    a0c8:	lsr	x2, x12, x14
    a0cc:	str	w0, [sp, #416]
    a0d0:	ldr	x12, [sp, #160]
    a0d4:	add	x2, x12, x2
    a0d8:	str	x2, [sp, #160]
    a0dc:	b.ls	9924 <ZSTD_free+0x147c>  // b.plast
    a0e0:	cmp	w0, #0x40
    a0e4:	b.hi	9924 <ZSTD_free+0x147c>  // b.pmore
    a0e8:	ldr	x1, [sp, #424]
    a0ec:	cmp	x1, x24
    a0f0:	b.cs	a4b0 <ZSTD_free+0x2008>  // b.hs, b.nlast
    a0f4:	ldr	x12, [sp, #432]
    a0f8:	cmp	x1, x12
    a0fc:	b.eq	9924 <ZSTD_free+0x147c>  // b.none
    a100:	lsr	w2, w0, #3
    a104:	lsr	w14, w0, #3
    a108:	sub	x2, x1, x2
    a10c:	cmp	x12, x2
    a110:	b.ls	a120 <ZSTD_free+0x1c78>  // b.plast
    a114:	sub	x2, x1, x12
    a118:	mov	w14, w2
    a11c:	sub	x2, x1, w2, uxtw
    a120:	sub	w0, w0, w14, lsl #3
    a124:	str	x2, [sp, #424]
    a128:	ldr	x2, [x2]
    a12c:	and	w1, w0, #0x3f
    a130:	str	x2, [sp, #408]
    a134:	b	992c <ZSTD_free+0x1484>
    a138:	lsr	w1, w0, #3
    a13c:	and	w0, w0, #0x7
    a140:	sub	x6, x6, x1
    a144:	mov	w25, #0x1                   	// #1
    a148:	mov	w1, w0
    a14c:	ldr	x11, [x6]
    a150:	str	x11, [sp, #408]
    a154:	b	9c74 <ZSTD_free+0x17cc>
    a158:	mov	x6, x1
    a15c:	b	9e28 <ZSTD_free+0x1980>
    a160:	add	w0, w0, w9
    a164:	neg	w12, w9
    a168:	ldr	x9, [sp, #168]
    a16c:	lsr	x1, x1, x12
    a170:	str	w0, [sp, #416]
    a174:	add	x1, x9, x1
    a178:	str	x1, [sp, #168]
    a17c:	lsl	x1, x2, x0
    a180:	b	993c <ZSTD_free+0x1494>
    a184:	lsr	w2, w0, #3
    a188:	and	w0, w0, #0x7
    a18c:	sub	x1, x1, x2
    a190:	str	w0, [sp, #416]
    a194:	str	x1, [sp, #424]
    a198:	ldr	x0, [x1]
    a19c:	str	x0, [sp, #408]
    a1a0:	b	98ac <ZSTD_free+0x1404>
    a1a4:	ldr	x3, [sp, #216]
    a1a8:	ldr	x0, [sp, #176]
    a1ac:	str	x0, [sp, #248]
    a1b0:	cmp	x3, #0x7
    a1b4:	b.ls	a3ec <ZSTD_free+0x1f44>  // b.plast
    a1b8:	ldr	x1, [sp, #248]
    a1bc:	mov	x0, x21
    a1c0:	mov	x2, #0x8                   	// #8
    a1c4:	bl	0 <grub_memmove>
    a1c8:	ldp	x0, x1, [sp, #248]
    a1cc:	add	x28, x21, #0x8
    a1d0:	add	x20, x0, #0x8
    a1d4:	ldr	x0, [sp, #240]
    a1d8:	cmp	x0, x1
    a1dc:	b.ls	a4d0 <ZSTD_free+0x2028>  // b.plast
    a1e0:	ldr	x0, [sp, #208]
    a1e4:	cmp	x0, x28
    a1e8:	b.hi	a4fc <ZSTD_free+0x2054>  // b.pmore
    a1ec:	ldr	x1, [sp, #240]
    a1f0:	cmp	x28, x1
    a1f4:	b.cs	a324 <ZSTD_free+0x1e7c>  // b.hs, b.nlast
    a1f8:	orr	x0, x28, x20
    a1fc:	sub	x2, x1, x28
    a200:	sub	x1, x2, #0x1
    a204:	tst	x0, #0x7
    a208:	add	x0, x28, #0x7
    a20c:	ccmp	x1, #0x9, #0x0, eq  // eq = none
    a210:	sub	x0, x0, x20
    a214:	ccmp	x0, #0xe, #0x0, hi  // hi = pmore
    a218:	b.ls	a560 <ZSTD_free+0x20b8>  // b.plast
    a21c:	and	x3, x2, #0xfffffffffffffff8
    a220:	mov	x0, #0x0                   	// #0
    a224:	nop
    a228:	ldr	x1, [x20, x0]
    a22c:	str	x1, [x28, x0]
    a230:	add	x0, x0, #0x8
    a234:	cmp	x3, x0
    a238:	b.ne	a228 <ZSTD_free+0x1d80>  // b.any
    a23c:	and	x1, x2, #0xfffffffffffffff8
    a240:	cmp	x1, x2
    a244:	add	x0, x28, x1
    a248:	add	x2, x20, x1
    a24c:	b.eq	a324 <ZSTD_free+0x1e7c>  // b.none
    a250:	ldrb	w4, [x20, x1]
    a254:	add	x3, x0, #0x1
    a258:	strb	w4, [x28, x1]
    a25c:	ldr	x4, [sp, #240]
    a260:	cmp	x4, x3
    a264:	b.ls	a324 <ZSTD_free+0x1e7c>  // b.plast
    a268:	ldrb	w3, [x2, #1]
    a26c:	add	x1, x0, #0x2
    a270:	strb	w3, [x0, #1]
    a274:	cmp	x4, x1
    a278:	b.ls	a324 <ZSTD_free+0x1e7c>  // b.plast
    a27c:	ldrb	w3, [x2, #2]
    a280:	add	x1, x0, #0x3
    a284:	strb	w3, [x0, #2]
    a288:	cmp	x4, x1
    a28c:	b.ls	a324 <ZSTD_free+0x1e7c>  // b.plast
    a290:	ldrb	w3, [x2, #3]
    a294:	add	x1, x0, #0x4
    a298:	strb	w3, [x0, #3]
    a29c:	cmp	x4, x1
    a2a0:	b.ls	a324 <ZSTD_free+0x1e7c>  // b.plast
    a2a4:	ldrb	w3, [x2, #4]
    a2a8:	add	x1, x0, #0x5
    a2ac:	strb	w3, [x0, #4]
    a2b0:	cmp	x4, x1
    a2b4:	b.ls	a324 <ZSTD_free+0x1e7c>  // b.plast
    a2b8:	ldrb	w3, [x2, #5]
    a2bc:	add	x1, x0, #0x6
    a2c0:	strb	w3, [x0, #5]
    a2c4:	cmp	x4, x1
    a2c8:	b.ls	a324 <ZSTD_free+0x1e7c>  // b.plast
    a2cc:	ldrb	w1, [x2, #6]
    a2d0:	strb	w1, [x0, #6]
    a2d4:	b	a324 <ZSTD_free+0x1e7c>
    a2d8:	mov	x27, #0xffffffffffffffba    	// #-70
    a2dc:	ldp	x19, x20, [sp, #32]
    a2e0:	ldp	x21, x22, [sp, #48]
    a2e4:	ldp	x23, x24, [sp, #64]
    a2e8:	b	9810 <ZSTD_free+0x1368>
    a2ec:	mov	x4, x0
    a2f0:	mov	x3, x24
    a2f4:	ldr	x1, [sp, #128]
    a2f8:	mov	x2, x20
    a2fc:	ldr	x6, [sp, #144]
    a300:	add	x5, sp, #0x110
    a304:	ldr	x7, [sp, #176]
    a308:	ldr	x0, [sp, #192]
    a30c:	str	x0, [sp]
    a310:	ldr	x0, [sp, #184]
    a314:	str	x0, [sp, #8]
    a318:	mov	x0, x26
    a31c:	bl	8a50 <ZSTD_free+0x5a8>
    a320:	mov	x27, x0
    a324:	cmn	x27, #0x78
    a328:	b.hi	a580 <ZSTD_free+0x20d8>  // b.pmore
    a32c:	ldr	x0, [sp, #232]
    a330:	sub	x19, x19, x25
    a334:	ldr	x1, [sp, #168]
    a338:	add	x19, x0, x19
    a33c:	ldr	w0, [sp, #416]
    a340:	add	x26, x26, x27
    a344:	add	w23, w23, #0x1
    a348:	prfm	pldl2keep, [x19]
    a34c:	cmp	w0, #0x40
    a350:	str	x1, [x22]
    a354:	ldr	x1, [sp, #160]
    a358:	str	x1, [x22, #8]
    a35c:	stp	x25, x19, [x22, #16]
    a360:	b.hi	a4a0 <ZSTD_free+0x1ff8>  // b.pmore
    a364:	ldr	x1, [sp, #424]
    a368:	ldr	x24, [sp, #440]
    a36c:	b	9864 <ZSTD_free+0x13bc>
    a370:	mov	w8, #0x0                   	// #0
    a374:	b	9d40 <ZSTD_free+0x1898>
    a378:	ldr	x0, [sp, #248]
    a37c:	ldr	x1, [sp, #184]
    a380:	add	x0, x0, x24
    a384:	cmp	x1, x0
    a388:	b.cs	a53c <ZSTD_free+0x2094>  // b.hs, b.nlast
    a38c:	mov	x0, x1
    a390:	ldr	x1, [sp, #248]
    a394:	sub	x20, x0, x1
    a398:	mov	x0, x21
    a39c:	mov	x2, x20
    a3a0:	bl	0 <grub_memmove>
    a3a4:	ldr	x0, [sp, #208]
    a3a8:	sub	x24, x24, x20
    a3ac:	cmp	x24, #0x2
    a3b0:	add	x21, x21, x20
    a3b4:	ccmp	x0, x21, #0x0, hi  // hi = pmore
    a3b8:	b.cs	a1a4 <ZSTD_free+0x1cfc>  // b.hs, b.nlast
    a3bc:	cbz	x24, a324 <ZSTD_free+0x1e7c>
    a3c0:	ldr	x3, [sp, #176]
    a3c4:	mov	w0, #0x0                   	// #0
    a3c8:	mov	x1, #0x0                   	// #0
    a3cc:	nop
    a3d0:	ldrb	w2, [x3, x1]
    a3d4:	add	w0, w0, #0x1
    a3d8:	strb	w2, [x21, x1]
    a3dc:	mov	w1, w0
    a3e0:	cmp	x24, w0, uxtw
    a3e4:	b.hi	a3d0 <ZSTD_free+0x1f28>  // b.pmore
    a3e8:	b	a324 <ZSTD_free+0x1e7c>
    a3ec:	ldr	x5, [sp, #248]
    a3f0:	adrp	x0, 0 <FSE_versionNumber>
    a3f4:	ldr	x0, [x0]
    a3f8:	ldrb	w1, [x5]
    a3fc:	strb	w1, [x21]
    a400:	adrp	x1, 0 <FSE_versionNumber>
    a404:	ldrb	w2, [x5, #1]
    a408:	strb	w2, [x21, #1]
    a40c:	ldr	x2, [x1]
    a410:	ldrb	w1, [x5, #2]
    a414:	strb	w1, [x21, #2]
    a418:	ldr	w4, [x2, x3, lsl #2]
    a41c:	mov	x2, #0x4                   	// #4
    a420:	ldr	w1, [x0, x3, lsl #2]
    a424:	ldrb	w0, [x5, #3]
    a428:	add	x1, x5, x1
    a42c:	strb	w0, [x21, #3]
    a430:	sub	x3, x1, w4, sxtw
    a434:	add	x0, x21, x2
    a438:	str	x3, [sp, #248]
    a43c:	bl	0 <grub_memmove>
    a440:	b	a1c8 <ZSTD_free+0x1d20>
    a444:	ldr	x0, [sp, #504]
    a448:	ldr	w14, [sp, #416]
    a44c:	cmp	x0, #0x0
    a450:	cinc	x25, x0, eq  // eq = none
    a454:	mov	w0, w14
    a458:	stp	x25, x15, [sp, #496]
    a45c:	b	9910 <ZSTD_free+0x1468>
    a460:	ldr	x1, [sp, #272]
    a464:	add	x20, x26, #0x8
    a468:	str	x19, [sp, #264]
    a46c:	add	x1, x1, #0x8
    a470:	mov	x19, x1
    a474:	nop
    a478:	mov	x1, x19
    a47c:	mov	x0, x20
    a480:	mov	x2, #0x8                   	// #8
    a484:	add	x20, x20, x2
    a488:	bl	0 <grub_memmove>
    a48c:	add	x19, x19, #0x8
    a490:	cmp	x21, x20
    a494:	b.hi	a478 <ZSTD_free+0x1fd0>  // b.pmore
    a498:	ldr	x19, [sp, #264]
    a49c:	b	9a58 <ZSTD_free+0x15b0>
    a4a0:	mov	w8, w23
    a4a4:	ldp	x21, x22, [sp, #48]
    a4a8:	ldp	x23, x24, [sp, #64]
    a4ac:	b	9e68 <ZSTD_free+0x19c0>
    a4b0:	lsr	w2, w0, #3
    a4b4:	and	w0, w0, #0x7
    a4b8:	sub	x2, x1, x2
    a4bc:	str	x2, [sp, #424]
    a4c0:	mov	w1, w0
    a4c4:	ldr	x2, [x2]
    a4c8:	str	x2, [sp, #408]
    a4cc:	b	992c <ZSTD_free+0x1484>
    a4d0:	add	x24, x21, x24
    a4d4:	nop
    a4d8:	mov	x1, x20
    a4dc:	mov	x0, x28
    a4e0:	mov	x2, #0x8                   	// #8
    a4e4:	add	x28, x28, x2
    a4e8:	bl	0 <grub_memmove>
    a4ec:	add	x20, x20, #0x8
    a4f0:	cmp	x24, x28
    a4f4:	b.hi	a4d8 <ZSTD_free+0x2030>  // b.pmore
    a4f8:	b	a324 <ZSTD_free+0x1e7c>
    a4fc:	mov	x21, x20
    a500:	mov	x24, x0
    a504:	sub	x0, x0, x28
    a508:	str	x0, [sp, #216]
    a50c:	nop
    a510:	mov	x1, x21
    a514:	mov	x0, x28
    a518:	mov	x2, #0x8                   	// #8
    a51c:	add	x28, x28, x2
    a520:	bl	0 <grub_memmove>
    a524:	add	x21, x21, #0x8
    a528:	cmp	x24, x28
    a52c:	b.hi	a510 <ZSTD_free+0x2068>  // b.pmore
    a530:	ldp	x28, x0, [sp, #208]
    a534:	add	x20, x20, x0
    a538:	b	a1ec <ZSTD_free+0x1d44>
    a53c:	ldr	x1, [sp, #248]
    a540:	mov	x2, x24
    a544:	mov	x0, x21
    a548:	bl	0 <grub_memmove>
    a54c:	b	a324 <ZSTD_free+0x1e7c>
    a550:	mov	w8, w23
    a554:	ldp	x21, x22, [sp, #48]
    a558:	ldp	x23, x24, [sp, #64]
    a55c:	b	9e74 <ZSTD_free+0x19cc>
    a560:	mov	x0, #0x0                   	// #0
    a564:	nop
    a568:	ldrb	w1, [x20, x0]
    a56c:	strb	w1, [x28, x0]
    a570:	add	x0, x0, #0x1
    a574:	cmp	x0, x2
    a578:	b.ne	a568 <ZSTD_free+0x20c0>  // b.any
    a57c:	b	a324 <ZSTD_free+0x1e7c>
    a580:	ldp	x19, x20, [sp, #32]
    a584:	ldp	x21, x22, [sp, #48]
    a588:	ldp	x23, x24, [sp, #64]
    a58c:	b	9810 <ZSTD_free+0x1368>
    a590:	ldr	x4, [sp, #120]
    a594:	ldr	x19, [sp, #176]
    a598:	cmp	x4, #0x7
    a59c:	b.hi	a754 <ZSTD_free+0x22ac>  // b.pmore
    a5a0:	ldrb	w0, [x19]
    a5a4:	mov	x2, #0x4                   	// #4
    a5a8:	strb	w0, [x25]
    a5ac:	adrp	x0, 0 <FSE_versionNumber>
    a5b0:	ldrb	w1, [x19, #1]
    a5b4:	strb	w1, [x25, #1]
    a5b8:	adrp	x1, 0 <FSE_versionNumber>
    a5bc:	ldr	x0, [x0]
    a5c0:	ldr	x3, [x1]
    a5c4:	ldrb	w1, [x19, #2]
    a5c8:	strb	w1, [x25, #2]
    a5cc:	ldr	w3, [x3, x4, lsl #2]
    a5d0:	ldr	w1, [x0, x4, lsl #2]
    a5d4:	ldrb	w0, [x19, #3]
    a5d8:	strb	w0, [x25, #3]
    a5dc:	add	x1, x19, x1
    a5e0:	add	x0, x25, x2
    a5e4:	sub	x19, x1, w3, sxtw
    a5e8:	bl	0 <grub_memmove>
    a5ec:	ldr	x0, [sp, #168]
    a5f0:	add	x19, x19, #0x8
    a5f4:	add	x24, x25, #0x8
    a5f8:	cmp	x22, x0
    a5fc:	b.ls	a768 <ZSTD_free+0x22c0>  // b.plast
    a600:	ldr	x0, [sp, #160]
    a604:	cmp	x24, x0
    a608:	b.cc	a7cc <ZSTD_free+0x2324>  // b.lo, b.ul, b.last
    a60c:	cmp	x22, x24
    a610:	b.ls	9fa0 <ZSTD_free+0x1af8>  // b.plast
    a614:	orr	x0, x24, x19
    a618:	sub	x3, x22, x24
    a61c:	sub	x1, x3, #0x1
    a620:	tst	x0, #0x7
    a624:	add	x0, x19, #0x7
    a628:	ccmp	x1, #0x9, #0x0, eq  // eq = none
    a62c:	sub	x0, x0, x24
    a630:	ccmp	x0, #0xe, #0x0, hi  // hi = pmore
    a634:	b.ls	a804 <ZSTD_free+0x235c>  // b.plast
    a638:	and	x2, x3, #0xfffffffffffffff8
    a63c:	mov	x0, #0x0                   	// #0
    a640:	ldr	x1, [x19, x0]
    a644:	str	x1, [x24, x0]
    a648:	add	x0, x0, #0x8
    a64c:	cmp	x2, x0
    a650:	b.ne	a640 <ZSTD_free+0x2198>  // b.any
    a654:	and	x2, x3, #0xfffffffffffffff8
    a658:	cmp	x2, x3
    a65c:	add	x1, x19, x2
    a660:	add	x0, x24, x2
    a664:	b.eq	9fa0 <ZSTD_free+0x1af8>  // b.none
    a668:	ldrb	w4, [x19, x2]
    a66c:	add	x3, x0, #0x1
    a670:	strb	w4, [x24, x2]
    a674:	cmp	x22, x3
    a678:	b.ls	9fa0 <ZSTD_free+0x1af8>  // b.plast
    a67c:	ldrb	w3, [x1, #1]
    a680:	add	x2, x0, #0x2
    a684:	strb	w3, [x0, #1]
    a688:	cmp	x22, x2
    a68c:	b.ls	9fa0 <ZSTD_free+0x1af8>  // b.plast
    a690:	ldrb	w3, [x1, #2]
    a694:	add	x2, x0, #0x3
    a698:	strb	w3, [x0, #2]
    a69c:	cmp	x22, x2
    a6a0:	b.ls	9fa0 <ZSTD_free+0x1af8>  // b.plast
    a6a4:	ldrb	w3, [x1, #3]
    a6a8:	add	x2, x0, #0x4
    a6ac:	strb	w3, [x0, #3]
    a6b0:	cmp	x22, x2
    a6b4:	b.ls	9fa0 <ZSTD_free+0x1af8>  // b.plast
    a6b8:	ldrb	w3, [x1, #4]
    a6bc:	add	x2, x0, #0x5
    a6c0:	strb	w3, [x0, #4]
    a6c4:	cmp	x22, x2
    a6c8:	b.ls	9fa0 <ZSTD_free+0x1af8>  // b.plast
    a6cc:	ldrb	w3, [x1, #5]
    a6d0:	add	x2, x0, #0x6
    a6d4:	strb	w3, [x0, #5]
    a6d8:	cmp	x22, x2
    a6dc:	b.ls	9fa0 <ZSTD_free+0x1af8>  // b.plast
    a6e0:	ldrb	w1, [x1, #6]
    a6e4:	strb	w1, [x0, #6]
    a6e8:	b	9fa0 <ZSTD_free+0x1af8>
    a6ec:	ldp	x4, x1, [sp, #120]
    a6f0:	mov	x3, x21
    a6f4:	ldr	x6, [sp, #144]
    a6f8:	mov	x2, x28
    a6fc:	ldr	x7, [sp, #176]
    a700:	add	x5, sp, #0x110
    a704:	ldr	x0, [sp, #192]
    a708:	str	x0, [sp]
    a70c:	ldr	x0, [sp, #184]
    a710:	str	x0, [sp, #8]
    a714:	mov	x0, x26
    a718:	bl	8a50 <ZSTD_free+0x5a8>
    a71c:	mov	x27, x0
    a720:	b	9fa0 <ZSTD_free+0x1af8>
    a724:	ldr	x1, [sp, #272]
    a728:	add	x24, x26, #0x8
    a72c:	add	x28, x1, #0x8
    a730:	mov	x1, x28
    a734:	mov	x0, x24
    a738:	mov	x2, #0x8                   	// #8
    a73c:	add	x24, x24, x2
    a740:	bl	0 <grub_memmove>
    a744:	add	x28, x28, #0x8
    a748:	cmp	x24, x25
    a74c:	b.cc	a730 <ZSTD_free+0x2288>  // b.lo, b.ul, b.last
    a750:	b	9f10 <ZSTD_free+0x1a68>
    a754:	mov	x1, x19
    a758:	mov	x0, x25
    a75c:	mov	x2, #0x8                   	// #8
    a760:	bl	0 <grub_memmove>
    a764:	b	a5ec <ZSTD_free+0x2144>
    a768:	add	x21, x25, x21
    a76c:	mov	x1, x19
    a770:	mov	x0, x24
    a774:	mov	x2, #0x8                   	// #8
    a778:	add	x24, x24, x2
    a77c:	bl	0 <grub_memmove>
    a780:	add	x19, x19, #0x8
    a784:	cmp	x21, x24
    a788:	b.hi	a76c <ZSTD_free+0x22c4>  // b.pmore
    a78c:	b	9fa0 <ZSTD_free+0x1af8>
    a790:	ldp	x21, x22, [sp, #48]
    a794:	ldp	x23, x24, [sp, #64]
    a798:	ldr	x3, [sp, #224]
    a79c:	ldp	x0, x2, [sp, #496]
    a7a0:	str	w0, [x3, #10300]
    a7a4:	ldr	x0, [sp, #512]
    a7a8:	str	w2, [x3, #10304]
    a7ac:	str	w0, [x3, #10308]
    a7b0:	ldr	x0, [sp, #144]
    a7b4:	b	97dc <ZSTD_free+0x1334>
    a7b8:	mov	x2, x21
    a7bc:	mov	x1, x19
    a7c0:	mov	x0, x25
    a7c4:	bl	0 <grub_memmove>
    a7c8:	b	9fa0 <ZSTD_free+0x1af8>
    a7cc:	mov	x21, x0
    a7d0:	sub	x23, x0, x24
    a7d4:	mov	x25, x19
    a7d8:	mov	x1, x25
    a7dc:	mov	x0, x24
    a7e0:	mov	x2, #0x8                   	// #8
    a7e4:	add	x24, x24, x2
    a7e8:	bl	0 <grub_memmove>
    a7ec:	add	x25, x25, #0x8
    a7f0:	cmp	x21, x24
    a7f4:	b.hi	a7d8 <ZSTD_free+0x2330>  // b.pmore
    a7f8:	add	x19, x19, x23
    a7fc:	ldr	x24, [sp, #160]
    a800:	b	a60c <ZSTD_free+0x2164>
    a804:	mov	x0, #0x0                   	// #0
    a808:	ldrb	w1, [x19, x0]
    a80c:	strb	w1, [x24, x0]
    a810:	add	x0, x0, #0x1
    a814:	cmp	x0, x3
    a818:	b.ne	a808 <ZSTD_free+0x2360>  // b.any
    a81c:	b	9fa0 <ZSTD_free+0x1af8>
    a820:	cmp	w21, #0x0
    a824:	cinc	x12, x25, eq  // eq = none
    a828:	cbz	x12, 9908 <ZSTD_free+0x1460>
    a82c:	cmp	x12, #0x3
    a830:	b.ne	a84c <ZSTD_free+0x23a4>  // b.any
    a834:	subs	x12, x15, #0x1
    a838:	cinc	x25, x12, eq  // eq = none
    a83c:	ldr	x12, [sp, #504]
    a840:	stp	x25, x15, [sp, #496]
    a844:	str	x12, [sp, #512]
    a848:	b	9910 <ZSTD_free+0x1468>
    a84c:	add	x17, x12, #0xa
    a850:	add	x18, sp, #0x1a0
    a854:	ldr	x17, [x18, x17, lsl #3]
    a858:	cmp	x17, #0x0
    a85c:	cinc	x25, x17, eq  // eq = none
    a860:	cmp	x12, #0x1
    a864:	b.ne	a83c <ZSTD_free+0x2394>  // b.any
    a868:	mov	w0, w14
    a86c:	b	a458 <ZSTD_free+0x1fb0>
    a870:	cmp	w4, #0x0
    a874:	cinc	x11, x26, eq  // eq = none
    a878:	cbz	x11, 9c58 <ZSTD_free+0x17b0>
    a87c:	cmp	x11, #0x3
    a880:	b.ne	a89c <ZSTD_free+0x23f4>  // b.any
    a884:	subs	x26, x19, #0x1
    a888:	cinc	x26, x26, eq  // eq = none
    a88c:	ldr	x1, [sp, #504]
    a890:	stp	x26, x19, [sp, #496]
    a894:	str	x1, [sp, #512]
    a898:	b	9dc4 <ZSTD_free+0x191c>
    a89c:	add	x1, x11, #0xa
    a8a0:	add	x26, sp, #0x1a0
    a8a4:	ldr	x26, [x26, x1, lsl #3]
    a8a8:	cmp	x26, #0x0
    a8ac:	cinc	x26, x26, eq  // eq = none
    a8b0:	cmp	x11, #0x1
    a8b4:	b.ne	a88c <ZSTD_free+0x23e4>  // b.any
    a8b8:	ldr	w0, [sp, #416]
    a8bc:	b	9dc0 <ZSTD_free+0x1918>
	...

000000000000a8d0 <ZSTD_sizeof_DCtx>:
    a8d0:	cbz	x0, a904 <ZSTD_sizeof_DCtx+0x34>
    a8d4:	ldr	x1, [x0, #29016]
    a8d8:	cbz	x1, a90c <ZSTD_sizeof_DCtx+0x3c>
    a8dc:	ldr	x2, [x1]
    a8e0:	cbz	x2, a918 <ZSTD_sizeof_DCtx+0x48>
    a8e4:	ldr	x2, [x1, #16]
    a8e8:	add	x2, x2, #0x2d, lsl #12
    a8ec:	add	x2, x2, #0xa58
    a8f0:	ldr	x1, [x0, #29056]
    a8f4:	ldr	x0, [x0, #29088]
    a8f8:	add	x0, x1, x0
    a8fc:	add	x0, x0, x2
    a900:	ret
    a904:	mov	x0, #0x0                   	// #0
    a908:	ret
    a90c:	mov	x2, #0x71f8                	// #29176
    a910:	movk	x2, #0x2, lsl #16
    a914:	b	a8f0 <ZSTD_sizeof_DCtx+0x20>
    a918:	mov	x2, #0xda58                	// #55896
    a91c:	movk	x2, #0x2, lsl #16
    a920:	b	a8f0 <ZSTD_sizeof_DCtx+0x20>
    a924:	nop

000000000000a928 <ZSTD_estimateDCtxSize>:
    a928:	mov	x0, #0x71f8                	// #29176
    a92c:	movk	x0, #0x2, lsl #16
    a930:	ret
    a934:	nop

000000000000a938 <ZSTD_initStaticDCtx>:
    a938:	mov	x2, x0
    a93c:	mov	x0, #0x71f7                	// #29175
    a940:	movk	x0, #0x2, lsl #16
    a944:	tst	x2, #0x7
    a948:	ccmp	x1, x0, #0x0, eq  // eq = none
    a94c:	mov	x0, #0x0                   	// #0
    a950:	b.ls	a9ac <ZSTD_initStaticDCtx+0x74>  // b.plast
    a954:	add	x3, x2, #0x4, lsl #12
    a958:	mov	x0, #0x7200                	// #29184
    a95c:	add	x5, x2, x0
    a960:	mov	x6, #0x1                   	// #1
    a964:	movk	x6, #0x800, lsl #16
    a968:	add	x4, x2, #0x27, lsl #12
    a96c:	str	wzr, [x3, #12560]
    a970:	mov	x0, x2
    a974:	str	xzr, [x2, #28768]
    a978:	add	x4, x4, #0x1f8
    a97c:	str	xzr, [x2, #29016]
    a980:	str	xzr, [x2, #29024]
    a984:	str	xzr, [x2, #29056]
    a988:	str	x6, [x2, #29072]
    a98c:	str	xzr, [x2, #29088]
    a990:	stur	xzr, [x5, #-148]
    a994:	str	xzr, [x2, #29120]
    a998:	str	wzr, [x3, #12624]
    a99c:	str	wzr, [x3, #12744]
    a9a0:	str	wzr, [x3, #12756]
    a9a4:	str	x1, [x2, #29000]
    a9a8:	str	x4, [x2, #29048]
    a9ac:	ret

000000000000a9b0 <ZSTD_createDCtx_advanced>:
    a9b0:	stp	x29, x30, [sp, #-64]!
    a9b4:	mov	x29, sp
    a9b8:	ldr	x1, [x0]
    a9bc:	str	x19, [sp, #16]
    a9c0:	mov	x19, x0
    a9c4:	ldr	x0, [x0, #8]
    a9c8:	cmp	x1, #0x0
    a9cc:	cset	w1, eq  // eq = none
    a9d0:	cmp	x0, #0x0
    a9d4:	cset	w0, eq  // eq = none
    a9d8:	cmp	w1, w0
    a9dc:	b.ne	aa70 <ZSTD_createDCtx_advanced+0xc0>  // b.any
    a9e0:	ldp	x4, x5, [x19]
    a9e4:	mov	x0, #0x71f8                	// #29176
    a9e8:	ldr	x2, [x19, #16]
    a9ec:	add	x1, sp, #0x20
    a9f0:	movk	x0, #0x2, lsl #16
    a9f4:	stp	x4, x5, [sp, #32]
    a9f8:	str	x2, [sp, #48]
    a9fc:	bl	8438 <ZSTD_malloc>
    aa00:	cbz	x0, aa64 <ZSTD_createDCtx_advanced+0xb4>
    aa04:	add	x3, x0, #0x7, lsl #12
    aa08:	add	x1, x0, #0x4, lsl #12
    aa0c:	ldp	x6, x7, [x19]
    aa10:	mov	x2, #0x7200                	// #29184
    aa14:	stp	x6, x7, [x3, #288]
    aa18:	add	x2, x0, x2
    aa1c:	mov	x4, #0x1                   	// #1
    aa20:	ldr	x5, [x19, #16]
    aa24:	str	x5, [x0, #28976]
    aa28:	str	wzr, [x1, #12560]
    aa2c:	movk	x4, #0x800, lsl #16
    aa30:	str	xzr, [x0, #28768]
    aa34:	str	xzr, [x0, #29000]
    aa38:	str	xzr, [x0, #29016]
    aa3c:	str	xzr, [x0, #29024]
    aa40:	str	xzr, [x0, #29048]
    aa44:	str	xzr, [x0, #29056]
    aa48:	str	x4, [x0, #29072]
    aa4c:	str	xzr, [x0, #29088]
    aa50:	stur	xzr, [x2, #-148]
    aa54:	str	xzr, [x0, #29120]
    aa58:	str	wzr, [x1, #12624]
    aa5c:	str	wzr, [x1, #12744]
    aa60:	str	wzr, [x1, #12756]
    aa64:	ldr	x19, [sp, #16]
    aa68:	ldp	x29, x30, [sp], #64
    aa6c:	ret
    aa70:	mov	x0, #0x0                   	// #0
    aa74:	ldr	x19, [sp, #16]
    aa78:	ldp	x29, x30, [sp], #64
    aa7c:	ret

000000000000aa80 <ZSTD_createDCtx>:
    aa80:	stp	x29, x30, [sp, #-80]!
    aa84:	adrp	x2, 0 <FSE_versionNumber>
    aa88:	mov	x0, #0x71f8                	// #29176
    aa8c:	mov	x29, sp
    aa90:	ldr	x2, [x2]
    aa94:	add	x1, sp, #0x10
    aa98:	movk	x0, #0x2, lsl #16
    aa9c:	add	x2, x2, #0x410
    aaa0:	ldp	x4, x5, [x2]
    aaa4:	stp	x4, x5, [sp, #16]
    aaa8:	ldr	x2, [x2, #16]
    aaac:	str	x2, [sp, #32]
    aab0:	stp	x4, x5, [sp, #56]
    aab4:	str	x2, [sp, #72]
    aab8:	bl	8438 <ZSTD_malloc>
    aabc:	cbz	x0, ab20 <ZSTD_createDCtx+0xa0>
    aac0:	add	x2, x0, #0x7, lsl #12
    aac4:	add	x1, x0, #0x4, lsl #12
    aac8:	ldp	x6, x7, [sp, #56]
    aacc:	mov	x3, #0x7200                	// #29184
    aad0:	stp	x6, x7, [x2, #288]
    aad4:	add	x3, x0, x3
    aad8:	mov	x4, #0x1                   	// #1
    aadc:	ldr	x5, [sp, #72]
    aae0:	str	x5, [x0, #28976]
    aae4:	str	wzr, [x1, #12560]
    aae8:	movk	x4, #0x800, lsl #16
    aaec:	str	xzr, [x0, #28768]
    aaf0:	str	xzr, [x0, #29000]
    aaf4:	str	xzr, [x0, #29016]
    aaf8:	str	xzr, [x0, #29024]
    aafc:	str	xzr, [x0, #29048]
    ab00:	str	xzr, [x0, #29056]
    ab04:	str	x4, [x0, #29072]
    ab08:	str	xzr, [x0, #29088]
    ab0c:	stur	xzr, [x3, #-148]
    ab10:	str	xzr, [x0, #29120]
    ab14:	str	wzr, [x1, #12624]
    ab18:	str	wzr, [x1, #12744]
    ab1c:	str	wzr, [x1, #12756]
    ab20:	ldp	x29, x30, [sp], #80
    ab24:	ret
	...

000000000000ab30 <ZSTD_freeDCtx>:
    ab30:	stp	x29, x30, [sp, #-128]!
    ab34:	mov	x29, sp
    ab38:	stp	x19, x20, [sp, #16]
    ab3c:	cbz	x0, ac10 <ZSTD_freeDCtx+0xe0>
    ab40:	ldr	x20, [x0, #29000]
    ab44:	mov	x19, x0
    ab48:	cbnz	x20, ac24 <ZSTD_freeDCtx+0xf4>
    ab4c:	add	x0, x0, #0x7, lsl #12
    ab50:	stp	x21, x22, [sp, #32]
    ab54:	add	x21, sp, #0x30
    ab58:	ldr	x22, [x19, #29016]
    ab5c:	ldp	x2, x3, [x0, #288]
    ab60:	stp	x2, x3, [sp, #80]
    ab64:	ldr	x0, [x19, #28976]
    ab68:	str	x0, [sp, #96]
    ab6c:	cbz	x22, abbc <ZSTD_freeDCtx+0x8c>
    ab70:	mov	x0, #0x6800                	// #26624
    ab74:	add	x0, x22, x0
    ab78:	add	x21, sp, #0x30
    ab7c:	mov	x1, x21
    ab80:	ldp	x2, x3, [x0, #72]
    ab84:	stp	x2, x3, [sp, #104]
    ab88:	ldr	x0, [x22, #26712]
    ab8c:	stp	x2, x3, [sp, #48]
    ab90:	str	x0, [sp, #64]
    ab94:	str	x0, [sp, #120]
    ab98:	ldr	x0, [x22]
    ab9c:	bl	84a8 <ZSTD_free>
    aba0:	ldp	x4, x5, [sp, #104]
    aba4:	mov	x0, x22
    aba8:	ldr	x2, [sp, #120]
    abac:	mov	x1, x21
    abb0:	stp	x4, x5, [sp, #48]
    abb4:	str	x2, [sp, #64]
    abb8:	bl	84a8 <ZSTD_free>
    abbc:	ldp	x4, x5, [sp, #80]
    abc0:	str	xzr, [x19, #29016]
    abc4:	ldr	x2, [sp, #96]
    abc8:	mov	x1, x21
    abcc:	ldr	x0, [x19, #29048]
    abd0:	stp	x4, x5, [sp, #48]
    abd4:	str	x2, [sp, #64]
    abd8:	bl	84a8 <ZSTD_free>
    abdc:	str	xzr, [x19, #29048]
    abe0:	ldp	x4, x5, [sp, #80]
    abe4:	mov	x1, x21
    abe8:	ldr	x2, [sp, #96]
    abec:	mov	x0, x19
    abf0:	stp	x4, x5, [sp, #48]
    abf4:	str	x2, [sp, #64]
    abf8:	bl	84a8 <ZSTD_free>
    abfc:	mov	x0, x20
    ac00:	ldp	x19, x20, [sp, #16]
    ac04:	ldp	x21, x22, [sp, #32]
    ac08:	ldp	x29, x30, [sp], #128
    ac0c:	ret
    ac10:	mov	x20, #0x0                   	// #0
    ac14:	mov	x0, x20
    ac18:	ldp	x19, x20, [sp, #16]
    ac1c:	ldp	x29, x30, [sp], #128
    ac20:	ret
    ac24:	mov	x20, #0xffffffffffffffc0    	// #-64
    ac28:	mov	x0, x20
    ac2c:	ldp	x19, x20, [sp, #16]
    ac30:	ldp	x29, x30, [sp], #128
    ac34:	ret

000000000000ac38 <ZSTD_copyDCtx>:
    ac38:	mov	x2, #0x7178                	// #29048
    ac3c:	b	0 <grub_memmove>

000000000000ac40 <ZSTD_isFrame>:
    ac40:	cmp	x1, #0x3
    ac44:	b.ls	ac78 <ZSTD_isFrame+0x38>  // b.plast
    ac48:	ldr	w1, [x0]
    ac4c:	mov	w2, #0xb528                	// #46376
    ac50:	movk	w2, #0xfd2f, lsl #16
    ac54:	mov	w0, #0x1                   	// #1
    ac58:	cmp	w1, w2
    ac5c:	b.eq	ac74 <ZSTD_isFrame+0x34>  // b.none
    ac60:	and	w1, w1, #0xfffffff0
    ac64:	mov	w0, #0x2a50                	// #10832
    ac68:	movk	w0, #0x184d, lsl #16
    ac6c:	cmp	w1, w0
    ac70:	cset	w0, eq  // eq = none
    ac74:	ret
    ac78:	mov	w0, #0x0                   	// #0
    ac7c:	ret

000000000000ac80 <ZSTD_frameHeaderSize>:
    ac80:	cmp	x1, #0x4
    ac84:	b.ls	acdc <ZSTD_frameHeaderSize+0x5c>  // b.plast
    ac88:	adrp	x1, 0 <FSE_versionNumber>
    ac8c:	ldrb	w4, [x0, #4]
    ac90:	ldr	x1, [x1]
    ac94:	and	x7, x4, #0x3
    ac98:	ubfx	x5, x4, #6, #2
    ac9c:	lsr	w0, w4, #5
    aca0:	add	x6, x1, #0x428
    aca4:	add	x3, x1, #0x448
    aca8:	mvn	w2, w0
    acac:	cmp	wzr, w4, lsr #6
    acb0:	and	x2, x2, #0x1
    acb4:	and	w0, w0, #0x1
    acb8:	ldr	x1, [x6, x7, lsl #3]
    acbc:	add	x2, x2, #0x5
    acc0:	ldr	x3, [x3, x5, lsl #3]
    acc4:	csel	w0, w0, wzr, eq  // eq = none
    acc8:	and	x0, x0, #0xff
    accc:	add	x1, x1, x3
    acd0:	add	x1, x1, x2
    acd4:	add	x0, x1, x0
    acd8:	ret
    acdc:	mov	x0, #0xffffffffffffffb8    	// #-72
    ace0:	ret
    ace4:	nop
	...

000000000000acf0 <ZSTD_getFrameHeader_advanced>:
    acf0:	stp	x29, x30, [sp, #-112]!
    acf4:	cmp	w3, #0x1
    acf8:	mov	x5, #0x8                   	// #8
    acfc:	mov	x29, sp
    ad00:	stp	x21, x22, [sp, #32]
    ad04:	mov	x21, #0x4                   	// #4
    ad08:	csel	x4, x21, x5, eq  // eq = none
    ad0c:	stp	x19, x20, [sp, #16]
    ad10:	mov	w19, w3
    ad14:	mov	x3, #0x6                   	// #6
    ad18:	stp	x25, x26, [sp, #64]
    ad1c:	mov	x25, #0xa                   	// #10
    ad20:	csel	x21, xzr, x21, eq  // eq = none
    ad24:	str	x4, [sp, #104]
    ad28:	csel	x4, x3, x25, eq  // eq = none
    ad2c:	str	x4, [sp, #96]
    ad30:	mov	x4, #0x7                   	// #7
    ad34:	mov	x25, x2
    ad38:	mov	x20, #0x5                   	// #5
    ad3c:	mov	x22, #0x3                   	// #3
    ad40:	mov	x26, #0x1                   	// #1
    ad44:	csel	x22, x22, x4, eq  // eq = none
    ad48:	mov	x2, #0x28                  	// #40
    ad4c:	stp	x23, x24, [sp, #48]
    ad50:	mov	x24, #0x9                   	// #9
    ad54:	mov	x23, #0x2                   	// #2
    ad58:	csel	x24, x20, x24, eq  // eq = none
    ad5c:	csel	x23, x23, x3, eq  // eq = none
    ad60:	csel	x20, x26, x20, eq  // eq = none
    ad64:	stp	x27, x28, [sp, #80]
    ad68:	mov	x28, x1
    ad6c:	mov	x27, x0
    ad70:	mov	w1, #0x0                   	// #0
    ad74:	bl	0 <grub_memset>
    ad78:	cmp	x25, x20
    ad7c:	b.cc	ade8 <ZSTD_getFrameHeader_advanced+0xf8>  // b.lo, b.ul, b.last
    ad80:	cbz	x28, af64 <ZSTD_getFrameHeader_advanced+0x274>
    ad84:	cmp	w19, #0x1
    ad88:	b.eq	ae08 <ZSTD_getFrameHeader_advanced+0x118>  // b.none
    ad8c:	ldr	w0, [x28]
    ad90:	mov	w1, #0xb528                	// #46376
    ad94:	movk	w1, #0xfd2f, lsl #16
    ad98:	cmp	w0, w1
    ad9c:	b.eq	ae08 <ZSTD_getFrameHeader_advanced+0x118>  // b.none
    ada0:	and	w0, w0, #0xfffffff0
    ada4:	mov	w1, #0x2a50                	// #10832
    ada8:	movk	w1, #0x184d, lsl #16
    adac:	mov	x20, #0xfffffffffffffff6    	// #-10
    adb0:	cmp	w0, w1
    adb4:	b.ne	ade8 <ZSTD_getFrameHeader_advanced+0xf8>  // b.any
    adb8:	mov	x5, #0x8                   	// #8
    adbc:	cmp	x25, #0x7
    adc0:	mov	x20, x5
    adc4:	b.ls	ade8 <ZSTD_getFrameHeader_advanced+0xf8>  // b.plast
    adc8:	mov	x0, x27
    adcc:	mov	x2, #0x28                  	// #40
    add0:	mov	w1, #0x0                   	// #0
    add4:	bl	0 <grub_memset>
    add8:	ldr	w0, [x28, #4]
    addc:	mov	x20, #0x0                   	// #0
    ade0:	str	x0, [x27]
    ade4:	str	w26, [x27, #20]
    ade8:	mov	x0, x20
    adec:	ldp	x19, x20, [sp, #16]
    adf0:	ldp	x21, x22, [sp, #32]
    adf4:	ldp	x23, x24, [sp, #48]
    adf8:	ldp	x25, x26, [sp, #64]
    adfc:	ldp	x27, x28, [sp, #80]
    ae00:	ldp	x29, x30, [sp], #112
    ae04:	ret
    ae08:	adrp	x0, 0 <FSE_versionNumber>
    ae0c:	ldrb	w6, [x28, x21]
    ae10:	ldr	x0, [x0]
    ae14:	and	x9, x6, #0x3
    ae18:	ubfx	x7, x6, #6, #2
    ae1c:	lsr	w1, w6, #5
    ae20:	add	x5, x0, #0x448
    ae24:	add	x8, x0, #0x428
    ae28:	mvn	w2, w1
    ae2c:	cmp	wzr, w6, lsr #6
    ae30:	and	x2, x2, #0x1
    ae34:	and	w1, w1, #0x1
    ae38:	ldr	x0, [x8, x9, lsl #3]
    ae3c:	csel	w1, w1, wzr, eq  // eq = none
    ae40:	ldr	x5, [x5, x7, lsl #3]
    ae44:	add	x2, x2, x20
    ae48:	and	x1, x1, #0xff
    ae4c:	add	x0, x0, x5
    ae50:	add	x0, x0, x2
    ae54:	add	x0, x0, x1
    ae58:	cmp	x25, x0
    ae5c:	b.cc	af38 <ZSTD_getFrameHeader_advanced+0x248>  // b.lo, b.ul, b.last
    ae60:	str	w0, [x27, #24]
    ae64:	ldrb	w0, [x28, x21]
    ae68:	ubfx	x3, x0, #5, #1
    ae6c:	tbnz	w0, #3, af6c <ZSTD_getFrameHeader_advanced+0x27c>
    ae70:	cbnz	w3, af5c <ZSTD_getFrameHeader_advanced+0x26c>
    ae74:	ldrb	w1, [x28, x20]
    ae78:	mov	x20, #0xfffffffffffffff0    	// #-16
    ae7c:	lsr	w2, w1, #3
    ae80:	add	w2, w2, #0xa
    ae84:	cmp	w2, #0x1f
    ae88:	b.gt	ade8 <ZSTD_getFrameHeader_advanced+0xf8>
    ae8c:	mov	x6, #0x1                   	// #1
    ae90:	and	x5, x1, #0x7
    ae94:	lsl	x2, x6, x2
    ae98:	mov	x20, x23
    ae9c:	lsr	x1, x2, #3
    aea0:	mov	x23, x22
    aea4:	ldp	x24, x22, [sp, #96]
    aea8:	madd	x1, x1, x5, x2
    aeac:	and	w2, w0, #0x3
    aeb0:	cmp	w2, #0x2
    aeb4:	b.eq	af98 <ZSTD_getFrameHeader_advanced+0x2a8>  // b.none
    aeb8:	cmp	w2, #0x3
    aebc:	b.eq	afd4 <ZSTD_getFrameHeader_advanced+0x2e4>  // b.none
    aec0:	cmp	w2, #0x1
    aec4:	mov	w5, #0x0                   	// #0
    aec8:	b.eq	afa4 <ZSTD_getFrameHeader_advanced+0x2b4>  // b.none
    aecc:	lsr	w2, w0, #6
    aed0:	cmp	w2, #0x2
    aed4:	b.eq	af88 <ZSTD_getFrameHeader_advanced+0x298>  // b.none
    aed8:	cmp	w2, #0x3
    aedc:	b.eq	afb0 <ZSTD_getFrameHeader_advanced+0x2c0>  // b.none
    aee0:	cmp	w2, #0x1
    aee4:	b.eq	afb8 <ZSTD_getFrameHeader_advanced+0x2c8>  // b.none
    aee8:	cbnz	w3, af74 <ZSTD_getFrameHeader_advanced+0x284>
    aeec:	mov	x6, #0xffffffffffffffff    	// #-1
    aef0:	mov	x2, #0x1ffff               	// #131071
    aef4:	cmp	x1, x2
    aef8:	mov	w2, #0x20000               	// #131072
    aefc:	csel	w2, w1, w2, ls  // ls = plast
    af00:	stp	x6, x1, [x27]
    af04:	str	wzr, [x27, #20]
    af08:	ubfx	x0, x0, #2, #1
    af0c:	str	w2, [x27, #16]
    af10:	stp	w5, w0, [x27, #28]
    af14:	mov	x20, #0x0                   	// #0
    af18:	mov	x0, x20
    af1c:	ldp	x19, x20, [sp, #16]
    af20:	ldp	x21, x22, [sp, #32]
    af24:	ldp	x23, x24, [sp, #48]
    af28:	ldp	x25, x26, [sp, #64]
    af2c:	ldp	x27, x28, [sp, #80]
    af30:	ldp	x29, x30, [sp], #112
    af34:	ret
    af38:	mov	x20, x0
    af3c:	mov	x0, x20
    af40:	ldp	x19, x20, [sp, #16]
    af44:	ldp	x21, x22, [sp, #32]
    af48:	ldp	x23, x24, [sp, #48]
    af4c:	ldp	x25, x26, [sp, #64]
    af50:	ldp	x27, x28, [sp, #80]
    af54:	ldp	x29, x30, [sp], #112
    af58:	ret
    af5c:	mov	x1, #0x0                   	// #0
    af60:	b	aeac <ZSTD_getFrameHeader_advanced+0x1bc>
    af64:	mov	x20, #0xffffffffffffffff    	// #-1
    af68:	b	ade8 <ZSTD_getFrameHeader_advanced+0xf8>
    af6c:	mov	x20, #0xfffffffffffffff2    	// #-14
    af70:	b	ade8 <ZSTD_getFrameHeader_advanced+0xf8>
    af74:	ldrb	w2, [x28, x20]
    af78:	str	wzr, [x27, #20]
    af7c:	and	x1, x2, #0xff
    af80:	stp	x1, x1, [x27]
    af84:	b	af08 <ZSTD_getFrameHeader_advanced+0x218>
    af88:	ldr	w6, [x28, x20]
    af8c:	cmp	w3, #0x0
    af90:	csel	x1, x1, x6, eq  // eq = none
    af94:	b	aef0 <ZSTD_getFrameHeader_advanced+0x200>
    af98:	ldrh	w5, [x28, x20]
    af9c:	mov	x20, x22
    afa0:	b	aecc <ZSTD_getFrameHeader_advanced+0x1dc>
    afa4:	ldrb	w5, [x28, x20]
    afa8:	mov	x20, x23
    afac:	b	aecc <ZSTD_getFrameHeader_advanced+0x1dc>
    afb0:	ldr	x6, [x28, x20]
    afb4:	b	af8c <ZSTD_getFrameHeader_advanced+0x29c>
    afb8:	ldrh	w2, [x28, x20]
    afbc:	add	w2, w2, #0x100
    afc0:	sxtw	x6, w2
    afc4:	cbz	w3, aef0 <ZSTD_getFrameHeader_advanced+0x200>
    afc8:	stp	x6, x6, [x27]
    afcc:	str	wzr, [x27, #20]
    afd0:	b	af08 <ZSTD_getFrameHeader_advanced+0x218>
    afd4:	ldr	w5, [x28, x20]
    afd8:	mov	x20, x24
    afdc:	b	aecc <ZSTD_getFrameHeader_advanced+0x1dc>
	...

000000000000afe8 <ZSTD_getFrameHeader>:
    afe8:	stp	x29, x30, [sp, #-48]!
    afec:	mov	x29, sp
    aff0:	stp	x19, x20, [sp, #16]
    aff4:	mov	x20, x2
    aff8:	mov	x19, x1
    affc:	mov	x2, #0x28                  	// #40
    b000:	mov	w1, #0x0                   	// #0
    b004:	str	x21, [sp, #32]
    b008:	mov	x21, x0
    b00c:	bl	0 <grub_memset>
    b010:	cmp	x20, #0x4
    b014:	mov	x0, #0x5                   	// #5
    b018:	b.ls	b058 <ZSTD_getFrameHeader+0x70>  // b.plast
    b01c:	cbz	x19, b14c <ZSTD_getFrameHeader+0x164>
    b020:	ldr	w1, [x19]
    b024:	mov	w0, #0xb528                	// #46376
    b028:	movk	w0, #0xfd2f, lsl #16
    b02c:	cmp	w1, w0
    b030:	b.eq	b068 <ZSTD_getFrameHeader+0x80>  // b.none
    b034:	and	w1, w1, #0xfffffff0
    b038:	mov	w2, #0x2a50                	// #10832
    b03c:	movk	w2, #0x184d, lsl #16
    b040:	mov	x0, #0xfffffffffffffff6    	// #-10
    b044:	cmp	w1, w2
    b048:	b.ne	b058 <ZSTD_getFrameHeader+0x70>  // b.any
    b04c:	cmp	x20, #0x7
    b050:	mov	x0, #0x8                   	// #8
    b054:	b.hi	b118 <ZSTD_getFrameHeader+0x130>  // b.pmore
    b058:	ldp	x19, x20, [sp, #16]
    b05c:	ldr	x21, [sp, #32]
    b060:	ldp	x29, x30, [sp], #48
    b064:	ret
    b068:	adrp	x0, 0 <FSE_versionNumber>
    b06c:	ldrb	w1, [x19, #4]
    b070:	ldr	x0, [x0]
    b074:	lsr	w2, w1, #5
    b078:	ubfx	x5, x1, #6, #2
    b07c:	and	x7, x1, #0x3
    b080:	add	x6, x0, #0x428
    b084:	add	x4, x0, #0x448
    b088:	mvn	w3, w2
    b08c:	cmp	wzr, w1, lsr #6
    b090:	and	x3, x3, #0x1
    b094:	and	w0, w2, #0x1
    b098:	add	x2, x3, #0x5
    b09c:	csel	w0, w0, wzr, eq  // eq = none
    b0a0:	ldr	x1, [x6, x7, lsl #3]
    b0a4:	and	x0, x0, #0xff
    b0a8:	ldr	x3, [x4, x5, lsl #3]
    b0ac:	add	x1, x1, x3
    b0b0:	add	x1, x1, x2
    b0b4:	add	x0, x1, x0
    b0b8:	cmp	x20, x0
    b0bc:	b.cc	b058 <ZSTD_getFrameHeader+0x70>  // b.lo, b.ul, b.last
    b0c0:	str	w0, [x21, #24]
    b0c4:	mov	x0, #0xfffffffffffffff2    	// #-14
    b0c8:	ldrb	w1, [x19, #4]
    b0cc:	ubfx	x3, x1, #5, #1
    b0d0:	tbnz	w1, #3, b058 <ZSTD_getFrameHeader+0x70>
    b0d4:	cbnz	w3, b154 <ZSTD_getFrameHeader+0x16c>
    b0d8:	ldrb	w4, [x19, #5]
    b0dc:	mov	x0, #0xfffffffffffffff0    	// #-16
    b0e0:	lsr	w2, w4, #3
    b0e4:	add	w2, w2, #0xa
    b0e8:	cmp	w2, #0x1f
    b0ec:	b.gt	b058 <ZSTD_getFrameHeader+0x70>
    b0f0:	mov	x0, #0x1                   	// #1
    b0f4:	and	x5, x4, #0x7
    b0f8:	lsl	x2, x0, x2
    b0fc:	mov	x6, #0xa                   	// #10
    b100:	lsr	x0, x2, #3
    b104:	mov	x7, #0x8                   	// #8
    b108:	mov	x8, #0x7                   	// #7
    b10c:	mov	x4, #0x6                   	// #6
    b110:	madd	x0, x0, x5, x2
    b114:	b	b168 <ZSTD_getFrameHeader+0x180>
    b118:	mov	x0, x21
    b11c:	mov	x2, #0x28                  	// #40
    b120:	mov	w1, #0x0                   	// #0
    b124:	bl	0 <grub_memset>
    b128:	ldr	w2, [x19, #4]
    b12c:	mov	w1, #0x1                   	// #1
    b130:	str	x2, [x21]
    b134:	mov	x0, #0x0                   	// #0
    b138:	str	w1, [x21, #20]
    b13c:	ldp	x19, x20, [sp, #16]
    b140:	ldr	x21, [sp, #32]
    b144:	ldp	x29, x30, [sp], #48
    b148:	ret
    b14c:	mov	x0, #0xffffffffffffffff    	// #-1
    b150:	b	b058 <ZSTD_getFrameHeader+0x70>
    b154:	mov	x6, #0x9                   	// #9
    b158:	mov	x7, #0x7                   	// #7
    b15c:	mov	x8, #0x6                   	// #6
    b160:	mov	x0, #0x0                   	// #0
    b164:	mov	x4, #0x5                   	// #5
    b168:	and	w2, w1, #0x3
    b16c:	cmp	w2, #0x2
    b170:	b.eq	b23c <ZSTD_getFrameHeader+0x254>  // b.none
    b174:	cmp	w2, #0x3
    b178:	b.eq	b230 <ZSTD_getFrameHeader+0x248>  // b.none
    b17c:	cmp	w2, #0x1
    b180:	mov	w5, #0x0                   	// #0
    b184:	b.eq	b224 <ZSTD_getFrameHeader+0x23c>  // b.none
    b188:	lsr	w2, w1, #6
    b18c:	cmp	w2, #0x2
    b190:	b.eq	b21c <ZSTD_getFrameHeader+0x234>  // b.none
    b194:	cmp	w2, #0x3
    b198:	b.eq	b20c <ZSTD_getFrameHeader+0x224>  // b.none
    b19c:	cmp	w2, #0x1
    b1a0:	b.eq	b1f0 <ZSTD_getFrameHeader+0x208>  // b.none
    b1a4:	cbnz	w3, b1dc <ZSTD_getFrameHeader+0x1f4>
    b1a8:	mov	x4, #0xffffffffffffffff    	// #-1
    b1ac:	nop
    b1b0:	mov	x2, #0x1ffff               	// #131071
    b1b4:	cmp	x0, x2
    b1b8:	mov	w2, #0x20000               	// #131072
    b1bc:	csel	w2, w0, w2, ls  // ls = plast
    b1c0:	stp	x4, x0, [x21]
    b1c4:	str	wzr, [x21, #20]
    b1c8:	ubfx	x1, x1, #2, #1
    b1cc:	mov	x0, #0x0                   	// #0
    b1d0:	str	w2, [x21, #16]
    b1d4:	stp	w5, w1, [x21, #28]
    b1d8:	b	b058 <ZSTD_getFrameHeader+0x70>
    b1dc:	ldrb	w2, [x19, x4]
    b1e0:	str	wzr, [x21, #20]
    b1e4:	and	x0, x2, #0xff
    b1e8:	stp	x0, x0, [x21]
    b1ec:	b	b1c8 <ZSTD_getFrameHeader+0x1e0>
    b1f0:	ldrh	w2, [x19, x4]
    b1f4:	add	w2, w2, #0x100
    b1f8:	sxtw	x4, w2
    b1fc:	cbz	w3, b1b0 <ZSTD_getFrameHeader+0x1c8>
    b200:	stp	x4, x4, [x21]
    b204:	str	wzr, [x21, #20]
    b208:	b	b1c8 <ZSTD_getFrameHeader+0x1e0>
    b20c:	ldr	x4, [x19, x4]
    b210:	cmp	w3, #0x0
    b214:	csel	x0, x0, x4, eq  // eq = none
    b218:	b	b1b0 <ZSTD_getFrameHeader+0x1c8>
    b21c:	ldr	w4, [x19, x4]
    b220:	b	b210 <ZSTD_getFrameHeader+0x228>
    b224:	ldrb	w5, [x19, x4]
    b228:	mov	x4, x8
    b22c:	b	b188 <ZSTD_getFrameHeader+0x1a0>
    b230:	ldr	w5, [x19, x4]
    b234:	mov	x4, x6
    b238:	b	b188 <ZSTD_getFrameHeader+0x1a0>
    b23c:	ldrh	w5, [x19, x4]
    b240:	mov	x4, x7
    b244:	b	b188 <ZSTD_getFrameHeader+0x1a0>
	...

000000000000b250 <ZSTD_getFrameContentSize>:
    b250:	stp	x29, x30, [sp, #-80]!
    b254:	mov	x2, #0x28                  	// #40
    b258:	mov	x29, sp
    b25c:	stp	x19, x20, [sp, #16]
    b260:	mov	x19, x0
    b264:	mov	x20, x1
    b268:	add	x0, sp, #0x28
    b26c:	mov	w1, #0x0                   	// #0
    b270:	bl	0 <grub_memset>
    b274:	cmp	x19, #0x0
    b278:	ccmp	x20, #0x4, #0x0, ne  // ne = any
    b27c:	b.ls	b2ac <ZSTD_getFrameContentSize+0x5c>  // b.plast
    b280:	ldr	w0, [x19]
    b284:	mov	w1, #0xb528                	// #46376
    b288:	movk	w1, #0xfd2f, lsl #16
    b28c:	cmp	w0, w1
    b290:	b.eq	b2bc <ZSTD_getFrameContentSize+0x6c>  // b.none
    b294:	and	w0, w0, #0xfffffff0
    b298:	mov	w1, #0x2a50                	// #10832
    b29c:	movk	w1, #0x184d, lsl #16
    b2a0:	cmp	w0, w1
    b2a4:	ccmp	x20, #0x7, #0x0, eq  // eq = none
    b2a8:	b.hi	b348 <ZSTD_getFrameContentSize+0xf8>  // b.pmore
    b2ac:	mov	x0, #0xfffffffffffffffe    	// #-2
    b2b0:	ldp	x19, x20, [sp, #16]
    b2b4:	ldp	x29, x30, [sp], #80
    b2b8:	ret
    b2bc:	adrp	x0, 0 <FSE_versionNumber>
    b2c0:	ldrb	w2, [x19, #4]
    b2c4:	ldr	x0, [x0]
    b2c8:	ubfx	x6, x2, #6, #2
    b2cc:	and	x8, x2, #0x3
    b2d0:	lsr	w1, w2, #5
    b2d4:	add	x4, x0, #0x448
    b2d8:	add	x7, x0, #0x428
    b2dc:	mvn	w3, w1
    b2e0:	lsr	w5, w2, #6
    b2e4:	cmp	w5, #0x0
    b2e8:	and	x3, x3, #0x1
    b2ec:	ldr	x0, [x7, x8, lsl #3]
    b2f0:	and	w1, w1, #0x1
    b2f4:	ldr	x7, [x4, x6, lsl #3]
    b2f8:	add	x3, x3, #0x5
    b2fc:	csel	w4, w1, wzr, eq  // eq = none
    b300:	and	w6, w2, #0x3
    b304:	add	x0, x0, x7
    b308:	and	x4, x4, #0xff
    b30c:	add	x0, x0, x3
    b310:	add	x0, x0, x4
    b314:	cmp	x20, x0
    b318:	b.cc	b2ac <ZSTD_getFrameContentSize+0x5c>  // b.lo, b.ul, b.last
    b31c:	and	w1, w1, #0xff
    b320:	tbnz	w2, #3, b2ac <ZSTD_getFrameContentSize+0x5c>
    b324:	cbnz	w1, b368 <ZSTD_getFrameContentSize+0x118>
    b328:	ldrb	w0, [x19, #5]
    b32c:	cmp	w0, #0xaf
    b330:	b.hi	b2ac <ZSTD_getFrameContentSize+0x5c>  // b.pmore
    b334:	mov	x3, #0xa                   	// #10
    b338:	mov	x4, #0x8                   	// #8
    b33c:	mov	x0, #0x7                   	// #7
    b340:	mov	x2, #0x6                   	// #6
    b344:	b	b378 <ZSTD_getFrameContentSize+0x128>
    b348:	add	x0, sp, #0x28
    b34c:	mov	x2, #0x28                  	// #40
    b350:	mov	w1, #0x0                   	// #0
    b354:	bl	0 <grub_memset>
    b358:	mov	x0, #0x0                   	// #0
    b35c:	ldp	x19, x20, [sp, #16]
    b360:	ldp	x29, x30, [sp], #80
    b364:	ret
    b368:	mov	x3, #0x9                   	// #9
    b36c:	mov	x4, #0x7                   	// #7
    b370:	mov	x0, #0x6                   	// #6
    b374:	mov	x2, #0x5                   	// #5
    b378:	cmp	w6, #0x2
    b37c:	b.eq	b3cc <ZSTD_getFrameContentSize+0x17c>  // b.none
    b380:	cmp	w6, #0x3
    b384:	b.eq	b3b8 <ZSTD_getFrameContentSize+0x168>  // b.none
    b388:	cmp	w6, #0x1
    b38c:	csel	x2, x2, x0, ne  // ne = any
    b390:	cmp	w5, #0x2
    b394:	b.eq	b3dc <ZSTD_getFrameContentSize+0x18c>  // b.none
    b398:	cmp	w5, #0x3
    b39c:	b.eq	b3d4 <ZSTD_getFrameContentSize+0x184>  // b.none
    b3a0:	cmp	w5, #0x1
    b3a4:	b.eq	b3c0 <ZSTD_getFrameContentSize+0x170>  // b.none
    b3a8:	mov	x0, #0xffffffffffffffff    	// #-1
    b3ac:	cbz	w1, b2b0 <ZSTD_getFrameContentSize+0x60>
    b3b0:	ldrb	w0, [x19, x2]
    b3b4:	b	b2b0 <ZSTD_getFrameContentSize+0x60>
    b3b8:	mov	x2, x3
    b3bc:	b	b390 <ZSTD_getFrameContentSize+0x140>
    b3c0:	ldrh	w0, [x19, x2]
    b3c4:	add	x0, x0, #0x100
    b3c8:	b	b2b0 <ZSTD_getFrameContentSize+0x60>
    b3cc:	mov	x2, x4
    b3d0:	b	b390 <ZSTD_getFrameContentSize+0x140>
    b3d4:	ldr	x0, [x19, x2]
    b3d8:	b	b2b0 <ZSTD_getFrameContentSize+0x60>
    b3dc:	ldr	w0, [x19, x2]
    b3e0:	b	b2b0 <ZSTD_getFrameContentSize+0x60>
    b3e4:	nop
	...

000000000000b3f0 <ZSTD_getDecompressedSize>:
    b3f0:	stp	x29, x30, [sp, #-80]!
    b3f4:	mov	x2, #0x28                  	// #40
    b3f8:	mov	x29, sp
    b3fc:	stp	x19, x20, [sp, #16]
    b400:	mov	x19, x0
    b404:	mov	x20, x1
    b408:	add	x0, sp, #0x28
    b40c:	mov	w1, #0x0                   	// #0
    b410:	bl	0 <grub_memset>
    b414:	cmp	x19, #0x0
    b418:	ccmp	x20, #0x4, #0x0, ne  // ne = any
    b41c:	b.ls	b44c <ZSTD_getDecompressedSize+0x5c>  // b.plast
    b420:	ldr	w0, [x19]
    b424:	mov	w1, #0xb528                	// #46376
    b428:	movk	w1, #0xfd2f, lsl #16
    b42c:	cmp	w0, w1
    b430:	b.eq	b45c <ZSTD_getDecompressedSize+0x6c>  // b.none
    b434:	and	w0, w0, #0xfffffff0
    b438:	mov	w1, #0x2a50                	// #10832
    b43c:	movk	w1, #0x184d, lsl #16
    b440:	cmp	w0, w1
    b444:	ccmp	x20, #0x7, #0x0, eq  // eq = none
    b448:	b.hi	b4e8 <ZSTD_getDecompressedSize+0xf8>  // b.pmore
    b44c:	mov	x0, #0x0                   	// #0
    b450:	ldp	x19, x20, [sp, #16]
    b454:	ldp	x29, x30, [sp], #80
    b458:	ret
    b45c:	adrp	x0, 0 <FSE_versionNumber>
    b460:	ldrb	w2, [x19, #4]
    b464:	ldr	x0, [x0]
    b468:	ubfx	x6, x2, #6, #2
    b46c:	and	x8, x2, #0x3
    b470:	lsr	w1, w2, #5
    b474:	add	x4, x0, #0x448
    b478:	add	x7, x0, #0x428
    b47c:	mvn	w3, w1
    b480:	lsr	w5, w2, #6
    b484:	cmp	w5, #0x0
    b488:	and	x3, x3, #0x1
    b48c:	ldr	x0, [x7, x8, lsl #3]
    b490:	and	w1, w1, #0x1
    b494:	ldr	x7, [x4, x6, lsl #3]
    b498:	add	x3, x3, #0x5
    b49c:	csel	w4, w1, wzr, eq  // eq = none
    b4a0:	and	w6, w2, #0x3
    b4a4:	add	x0, x0, x7
    b4a8:	and	x4, x4, #0xff
    b4ac:	add	x0, x0, x3
    b4b0:	add	x0, x0, x4
    b4b4:	cmp	x20, x0
    b4b8:	b.cc	b44c <ZSTD_getDecompressedSize+0x5c>  // b.lo, b.ul, b.last
    b4bc:	and	w1, w1, #0xff
    b4c0:	tbnz	w2, #3, b44c <ZSTD_getDecompressedSize+0x5c>
    b4c4:	cbnz	w1, b4fc <ZSTD_getDecompressedSize+0x10c>
    b4c8:	ldrb	w0, [x19, #5]
    b4cc:	cmp	w0, #0xaf
    b4d0:	b.hi	b44c <ZSTD_getDecompressedSize+0x5c>  // b.pmore
    b4d4:	mov	x3, #0xa                   	// #10
    b4d8:	mov	x4, #0x8                   	// #8
    b4dc:	mov	x2, #0x7                   	// #7
    b4e0:	mov	x0, #0x6                   	// #6
    b4e4:	b	b50c <ZSTD_getDecompressedSize+0x11c>
    b4e8:	add	x0, sp, #0x28
    b4ec:	mov	x2, #0x28                  	// #40
    b4f0:	mov	w1, #0x0                   	// #0
    b4f4:	bl	0 <grub_memset>
    b4f8:	b	b44c <ZSTD_getDecompressedSize+0x5c>
    b4fc:	mov	x3, #0x9                   	// #9
    b500:	mov	x4, #0x7                   	// #7
    b504:	mov	x2, #0x6                   	// #6
    b508:	mov	x0, #0x5                   	// #5
    b50c:	cmp	w6, #0x2
    b510:	b.eq	b55c <ZSTD_getDecompressedSize+0x16c>  // b.none
    b514:	cmp	w6, #0x3
    b518:	b.eq	b548 <ZSTD_getDecompressedSize+0x158>  // b.none
    b51c:	cmp	w6, #0x1
    b520:	csel	x0, x0, x2, ne  // ne = any
    b524:	cmp	w5, #0x2
    b528:	b.eq	b57c <ZSTD_getDecompressedSize+0x18c>  // b.none
    b52c:	cmp	w5, #0x3
    b530:	b.eq	b564 <ZSTD_getDecompressedSize+0x174>  // b.none
    b534:	cmp	w5, #0x1
    b538:	b.eq	b550 <ZSTD_getDecompressedSize+0x160>  // b.none
    b53c:	cbz	w1, b44c <ZSTD_getDecompressedSize+0x5c>
    b540:	ldrb	w0, [x19, x0]
    b544:	b	b450 <ZSTD_getDecompressedSize+0x60>
    b548:	mov	x0, x3
    b54c:	b	b524 <ZSTD_getDecompressedSize+0x134>
    b550:	ldrh	w0, [x19, x0]
    b554:	add	x0, x0, #0x100
    b558:	b	b450 <ZSTD_getDecompressedSize+0x60>
    b55c:	mov	x0, x4
    b560:	b	b524 <ZSTD_getDecompressedSize+0x134>
    b564:	ldr	x0, [x19, x0]
    b568:	cmn	x0, #0x2
    b56c:	csel	x0, x0, xzr, cc  // cc = lo, ul, last
    b570:	ldp	x19, x20, [sp, #16]
    b574:	ldp	x29, x30, [sp], #80
    b578:	ret
    b57c:	ldr	w0, [x19, x0]
    b580:	b	b568 <ZSTD_getDecompressedSize+0x178>
    b584:	nop
	...

000000000000b590 <ZSTD_getcBlockSize>:
    b590:	mov	x3, x0
    b594:	cmp	x1, #0x2
    b598:	mov	x0, #0xffffffffffffffb8    	// #-72
    b59c:	b.ls	b5dc <ZSTD_getcBlockSize+0x4c>  // b.plast
    b5a0:	ldrb	w1, [x3, #2]
    b5a4:	mov	x0, #0x1                   	// #1
    b5a8:	ldrh	w3, [x3]
    b5ac:	add	w1, w3, w1, lsl #16
    b5b0:	and	w3, w1, #0x1
    b5b4:	str	w3, [x2, #4]
    b5b8:	lsr	w3, w1, #3
    b5bc:	ubfx	x1, x1, #1, #2
    b5c0:	str	w1, [x2]
    b5c4:	cmp	w1, #0x1
    b5c8:	str	w3, [x2, #8]
    b5cc:	b.eq	b5dc <ZSTD_getcBlockSize+0x4c>  // b.none
    b5d0:	cmp	w1, #0x3
    b5d4:	mov	x0, #0xffffffffffffffec    	// #-20
    b5d8:	csel	x0, x3, x0, ne  // ne = any
    b5dc:	ret

000000000000b5e0 <ZSTD_decodeLiteralsBlock>:
    b5e0:	stp	x29, x30, [sp, #-80]!
    b5e4:	cmp	x2, #0x2
    b5e8:	mov	x29, sp
    b5ec:	stp	x21, x22, [sp, #32]
    b5f0:	b.ls	b654 <ZSTD_decodeLiteralsBlock+0x74>  // b.plast
    b5f4:	stp	x19, x20, [sp, #16]
    b5f8:	mov	x20, x0
    b5fc:	ldrb	w3, [x1]
    b600:	and	w19, w3, #0x3
    b604:	cmp	w19, #0x2
    b608:	b.eq	b678 <ZSTD_decodeLiteralsBlock+0x98>  // b.none
    b60c:	cmp	w19, #0x3
    b610:	b.eq	b668 <ZSTD_decodeLiteralsBlock+0x88>  // b.none
    b614:	cmp	w19, #0x1
    b618:	b.eq	b7b8 <ZSTD_decodeLiteralsBlock+0x1d8>  // b.none
    b61c:	ubfx	x0, x3, #2, #2
    b620:	cmp	w0, #0x1
    b624:	b.eq	b7a8 <ZSTD_decodeLiteralsBlock+0x1c8>  // b.none
    b628:	cmp	w0, #0x3
    b62c:	b.eq	b820 <ZSTD_decodeLiteralsBlock+0x240>  // b.none
    b630:	ubfx	x19, x3, #3, #5
    b634:	mov	x0, #0x1                   	// #1
    b638:	add	x21, x19, x0
    b63c:	add	x3, x21, #0x8
    b640:	cmp	x3, x2
    b644:	b.ls	b80c <ZSTD_decodeLiteralsBlock+0x22c>  // b.plast
    b648:	cmp	x21, x2
    b64c:	b.ls	b8c0 <ZSTD_decodeLiteralsBlock+0x2e0>  // b.plast
    b650:	ldp	x19, x20, [sp, #16]
    b654:	mov	x21, #0xffffffffffffffec    	// #-20
    b658:	mov	x0, x21
    b65c:	ldp	x21, x22, [sp, #32]
    b660:	ldp	x29, x30, [sp], #80
    b664:	ret
    b668:	add	x0, x0, #0x4, lsl #12
    b66c:	mov	x21, #0xffffffffffffffe2    	// #-30
    b670:	ldr	w0, [x0, #12456]
    b674:	cbz	w0, b8f8 <ZSTD_decodeLiteralsBlock+0x318>
    b678:	cmp	x2, #0x4
    b67c:	b.ls	b650 <ZSTD_decodeLiteralsBlock+0x70>  // b.plast
    b680:	ldr	w0, [x1]
    b684:	ubfx	x3, x3, #2, #2
    b688:	cmp	w3, #0x2
    b68c:	lsr	w22, w0, #4
    b690:	b.eq	b794 <ZSTD_decodeLiteralsBlock+0x1b4>  // b.none
    b694:	cmp	w3, #0x3
    b698:	b.eq	b76c <ZSTD_decodeLiteralsBlock+0x18c>  // b.none
    b69c:	eor	w6, w3, #0x1
    b6a0:	and	x22, x22, #0x3ff
    b6a4:	ubfx	x3, x0, #14, #10
    b6a8:	mov	x5, #0x3                   	// #3
    b6ac:	add	x21, x5, x3
    b6b0:	cmp	x21, x2
    b6b4:	b.hi	b650 <ZSTD_decodeLiteralsBlock+0x70>  // b.pmore
    b6b8:	stp	x23, x24, [sp, #48]
    b6bc:	add	x23, x20, #0x4, lsl #12
    b6c0:	cmp	x22, #0x300
    b6c4:	ldr	w0, [x23, #12652]
    b6c8:	ccmp	w0, #0x0, #0x4, hi  // hi = pmore
    b6cc:	b.ne	b910 <ZSTD_decodeLiteralsBlock+0x330>  // b.any
    b6d0:	mov	x9, #0x71d8                	// #29144
    b6d4:	ldr	w7, [x23, #12624]
    b6d8:	add	x2, x1, x5
    b6dc:	cmp	w19, #0x3
    b6e0:	add	x24, x20, x9
    b6e4:	b.eq	b874 <ZSTD_decodeLiteralsBlock+0x294>  // b.none
    b6e8:	str	x25, [sp, #64]
    b6ec:	mov	x4, #0x6848                	// #26696
    b6f0:	mov	x8, #0x2838                	// #10296
    b6f4:	add	x5, x20, x4
    b6f8:	add	x25, x20, x8
    b6fc:	mov	x4, x3
    b700:	mov	x3, x2
    b704:	cbz	w6, b8a8 <ZSTD_decodeLiteralsBlock+0x2c8>
    b708:	mov	x2, x22
    b70c:	mov	x1, x24
    b710:	mov	x0, x25
    b714:	mov	x6, #0x800                 	// #2048
    b718:	bl	6a88 <HUF_decompress1X1_DCtx_wksp_bmi2>
    b71c:	cmn	x0, #0x78
    b720:	b.hi	b934 <ZSTD_decodeLiteralsBlock+0x354>  // b.pmore
    b724:	str	x24, [x20, #28952]
    b728:	mov	w0, #0x1                   	// #1
    b72c:	str	x22, [x20, #28984]
    b730:	cmp	w19, #0x2
    b734:	str	w0, [x23, #12456]
    b738:	b.ne	b900 <ZSTD_decodeLiteralsBlock+0x320>  // b.any
    b73c:	str	x25, [x20, #24]
    b740:	ldr	x25, [sp, #64]
    b744:	add	x0, x24, x22
    b748:	mov	x2, #0x8                   	// #8
    b74c:	mov	w1, #0x0                   	// #0
    b750:	bl	0 <grub_memset>
    b754:	mov	x0, x21
    b758:	ldp	x19, x20, [sp, #16]
    b75c:	ldp	x21, x22, [sp, #32]
    b760:	ldp	x23, x24, [sp, #48]
    b764:	ldp	x29, x30, [sp], #80
    b768:	ret
    b76c:	and	w3, w22, #0x3ffff
    b770:	and	x22, x22, #0x3ffff
    b774:	cmp	w3, #0x20, lsl #12
    b778:	ldrb	w3, [x1, #4]
    b77c:	b.hi	b650 <ZSTD_decodeLiteralsBlock+0x70>  // b.pmore
    b780:	lsl	w3, w3, #10
    b784:	mov	w6, #0x0                   	// #0
    b788:	mov	x5, #0x5                   	// #5
    b78c:	add	w3, w3, w0, lsr #22
    b790:	b	b6ac <ZSTD_decodeLiteralsBlock+0xcc>
    b794:	and	x22, x22, #0x3fff
    b798:	lsr	w3, w0, #18
    b79c:	mov	w6, #0x0                   	// #0
    b7a0:	mov	x5, #0x4                   	// #4
    b7a4:	b	b6ac <ZSTD_decodeLiteralsBlock+0xcc>
    b7a8:	ldrh	w3, [x1]
    b7ac:	mov	x0, #0x2                   	// #2
    b7b0:	ubfx	x19, x3, #4, #12
    b7b4:	b	b638 <ZSTD_decodeLiteralsBlock+0x58>
    b7b8:	ubfx	x0, x3, #2, #2
    b7bc:	cmp	w0, #0x1
    b7c0:	b.eq	b860 <ZSTD_decodeLiteralsBlock+0x280>  // b.none
    b7c4:	cmp	w0, #0x3
    b7c8:	b.eq	b838 <ZSTD_decodeLiteralsBlock+0x258>  // b.none
    b7cc:	ubfx	x19, x3, #3, #5
    b7d0:	mov	x21, #0x2                   	// #2
    b7d4:	mov	x0, #0x1                   	// #1
    b7d8:	ldrb	w1, [x1, x0]
    b7dc:	mov	x0, #0x71d8                	// #29144
    b7e0:	add	x22, x20, x0
    b7e4:	add	x2, x19, #0x8
    b7e8:	mov	x0, x22
    b7ec:	bl	0 <grub_memset>
    b7f0:	str	x22, [x20, #28952]
    b7f4:	str	x19, [x20, #28984]
    b7f8:	mov	x0, x21
    b7fc:	ldp	x19, x20, [sp, #16]
    b800:	ldp	x21, x22, [sp, #32]
    b804:	ldp	x29, x30, [sp], #80
    b808:	ret
    b80c:	add	x0, x1, x0
    b810:	str	x0, [x20, #28952]
    b814:	str	x19, [x20, #28984]
    b818:	ldp	x19, x20, [sp, #16]
    b81c:	b	b658 <ZSTD_decodeLiteralsBlock+0x78>
    b820:	ldrh	w19, [x1]
    b824:	mov	x0, #0x3                   	// #3
    b828:	ldrb	w3, [x1, #2]
    b82c:	add	w3, w19, w3, lsl #16
    b830:	ubfx	x19, x3, #4, #21
    b834:	b	b638 <ZSTD_decodeLiteralsBlock+0x58>
    b838:	ldrh	w19, [x1]
    b83c:	ldrb	w3, [x1, #2]
    b840:	add	w3, w19, w3, lsl #16
    b844:	ubfx	x19, x3, #4, #21
    b848:	cmp	x19, #0x20, lsl #12
    b84c:	ccmp	x2, #0x3, #0x4, ls  // ls = plast
    b850:	b.eq	b650 <ZSTD_decodeLiteralsBlock+0x70>  // b.none
    b854:	mov	x21, #0x4                   	// #4
    b858:	mov	x0, #0x3                   	// #3
    b85c:	b	b7d8 <ZSTD_decodeLiteralsBlock+0x1f8>
    b860:	ldrh	w3, [x1]
    b864:	mov	x21, #0x3                   	// #3
    b868:	mov	x0, #0x2                   	// #2
    b86c:	ubfx	x19, x3, #4, #12
    b870:	b	b7d8 <ZSTD_decodeLiteralsBlock+0x1f8>
    b874:	mov	w5, w7
    b878:	mov	x1, x22
    b87c:	mov	x0, x24
    b880:	ldr	x4, [x20, #24]
    b884:	cbnz	w6, b908 <ZSTD_decodeLiteralsBlock+0x328>
    b888:	bl	6b18 <HUF_decompress4X_usingDTable_bmi2>
    b88c:	cmn	x0, #0x78
    b890:	b.hi	b944 <ZSTD_decodeLiteralsBlock+0x364>  // b.pmore
    b894:	str	x24, [x20, #28952]
    b898:	mov	w0, #0x1                   	// #1
    b89c:	str	x22, [x20, #28984]
    b8a0:	str	w0, [x23, #12456]
    b8a4:	b	b744 <ZSTD_decodeLiteralsBlock+0x164>
    b8a8:	mov	x2, x22
    b8ac:	mov	x1, x24
    b8b0:	mov	x0, x25
    b8b4:	mov	x6, #0x800                 	// #2048
    b8b8:	bl	6bc8 <HUF_decompress4X_hufOnly_wksp_bmi2>
    b8bc:	b	b71c <ZSTD_decodeLiteralsBlock+0x13c>
    b8c0:	mov	x2, #0x71d8                	// #29144
    b8c4:	add	x22, x20, x2
    b8c8:	add	x1, x1, x0
    b8cc:	mov	x2, x19
    b8d0:	mov	x0, x22
    b8d4:	bl	0 <grub_memmove>
    b8d8:	str	x22, [x20, #28952]
    b8dc:	add	x0, x22, x19
    b8e0:	str	x19, [x20, #28984]
    b8e4:	mov	x2, #0x8                   	// #8
    b8e8:	mov	w1, #0x0                   	// #0
    b8ec:	bl	0 <grub_memset>
    b8f0:	ldp	x19, x20, [sp, #16]
    b8f4:	b	b658 <ZSTD_decodeLiteralsBlock+0x78>
    b8f8:	ldp	x19, x20, [sp, #16]
    b8fc:	b	b658 <ZSTD_decodeLiteralsBlock+0x78>
    b900:	ldr	x25, [sp, #64]
    b904:	b	b744 <ZSTD_decodeLiteralsBlock+0x164>
    b908:	bl	6a00 <HUF_decompress1X_usingDTable_bmi2>
    b90c:	b	b88c <ZSTD_decodeLiteralsBlock+0x2ac>
    b910:	ldr	x2, [x20, #24]
    b914:	mov	x10, #0x4040                	// #16448
    b918:	add	x4, x2, x10
    b91c:	nop
    b920:	prfm	pldl2keep, [x2]
    b924:	add	x2, x2, #0x40
    b928:	cmp	x4, x2
    b92c:	b.ne	b920 <ZSTD_decodeLiteralsBlock+0x340>  // b.any
    b930:	b	b6d0 <ZSTD_decodeLiteralsBlock+0xf0>
    b934:	ldp	x19, x20, [sp, #16]
    b938:	ldp	x23, x24, [sp, #48]
    b93c:	ldr	x25, [sp, #64]
    b940:	b	b654 <ZSTD_decodeLiteralsBlock+0x74>
    b944:	ldp	x19, x20, [sp, #16]
    b948:	ldp	x23, x24, [sp, #48]
    b94c:	b	b654 <ZSTD_decodeLiteralsBlock+0x74>

000000000000b950 <ZSTD_decodeSeqHeaders>:
    b950:	cbz	x3, bc48 <ZSTD_decodeSeqHeaders+0x2f8>
    b954:	sub	sp, sp, #0x110
    b958:	stp	x29, x30, [sp, #48]
    b95c:	add	x29, sp, #0x30
    b960:	stp	x19, x20, [sp, #64]
    b964:	mov	x20, x2
    b968:	stp	x21, x22, [sp, #80]
    b96c:	ldrb	w22, [x2]
    b970:	cbz	w22, bb44 <ZSTD_decodeSeqHeaders+0x1f4>
    b974:	stp	x23, x24, [sp, #96]
    b978:	add	x19, x2, x3
    b97c:	mov	x23, x0
    b980:	cmp	w22, #0x7f
    b984:	add	x0, x2, #0x1
    b988:	b.gt	baf8 <ZSTD_decodeSeqHeaders+0x1a8>
    b98c:	str	w22, [x1]
    b990:	add	x1, x0, #0x4
    b994:	cmp	x19, x1
    b998:	b.cc	bb28 <ZSTD_decodeSeqHeaders+0x1d8>  // b.lo, b.ul, b.last
    b99c:	add	x24, x23, #0x4, lsl #12
    b9a0:	mov	x21, x0
    b9a4:	mov	w1, #0x23                  	// #35
    b9a8:	stp	x25, x26, [sp, #112]
    b9ac:	ldr	w2, [x24, #12460]
    b9b0:	ldr	w3, [x24, #12652]
    b9b4:	str	x27, [sp, #128]
    b9b8:	add	x27, x23, #0x20
    b9bc:	str	w1, [sp, #152]
    b9c0:	ldrb	w26, [x21], #1
    b9c4:	sub	x6, x19, x21
    b9c8:	lsr	w1, w26, #6
    b9cc:	cmp	w1, #0x2
    b9d0:	b.eq	bc04 <ZSTD_decodeSeqHeaders+0x2b4>  // b.none
    b9d4:	cmp	w1, #0x3
    b9d8:	b.eq	bb60 <ZSTD_decodeSeqHeaders+0x210>  // b.none
    b9dc:	cmp	w1, #0x1
    b9e0:	b.eq	bb9c <ZSTD_decodeSeqHeaders+0x24c>  // b.none
    b9e4:	adrp	x4, 0 <FSE_versionNumber>
    b9e8:	ldr	x25, [x4]
    b9ec:	add	x0, x25, #0x468
    b9f0:	str	x0, [x23]
    b9f4:	add	x0, x25, #0x670
    b9f8:	mov	x8, #0x1028                	// #4136
    b9fc:	stp	x25, x0, [sp]
    ba00:	add	x7, x25, #0x80
    ba04:	mov	x5, x21
    ba08:	str	w2, [sp, #16]
    ba0c:	add	x1, x23, #0x10
    ba10:	str	w3, [sp, #24]
    ba14:	ubfx	x2, x26, #4, #2
    ba18:	str	w22, [sp, #32]
    ba1c:	add	x0, x23, x8
    ba20:	mov	w4, #0x8                   	// #8
    ba24:	mov	w3, #0x1f                  	// #31
    ba28:	bl	86c0 <ZSTD_free+0x218>
    ba2c:	cmn	x0, #0x78
    ba30:	b.hi	bc24 <ZSTD_decodeSeqHeaders+0x2d4>  // b.pmore
    ba34:	ldr	w2, [x24, #12460]
    ba38:	add	x3, x25, #0x778
    ba3c:	ldr	w1, [x24, #12652]
    ba40:	add	x4, x25, #0x100
    ba44:	stp	x4, x3, [sp]
    ba48:	add	x21, x21, x0
    ba4c:	sub	x6, x19, x21
    ba50:	str	w2, [sp, #16]
    ba54:	mov	x5, x21
    ba58:	str	w1, [sp, #24]
    ba5c:	add	x7, x25, #0x1d8
    ba60:	str	w22, [sp, #32]
    ba64:	ubfx	x2, x26, #2, #2
    ba68:	add	x1, x23, #0x8
    ba6c:	mov	x0, #0x1830                	// #6192
    ba70:	mov	w4, #0x9                   	// #9
    ba74:	add	x0, x23, x0
    ba78:	mov	w3, #0x34                  	// #52
    ba7c:	bl	86c0 <ZSTD_free+0x218>
    ba80:	cmn	x0, #0x78
    ba84:	b.hi	bc24 <ZSTD_decodeSeqHeaders+0x2d4>  // b.pmore
    ba88:	ldr	w1, [x24, #12652]
    ba8c:	add	x21, x21, x0
    ba90:	cbz	w1, bae4 <ZSTD_decodeSeqHeaders+0x194>
    ba94:	ldr	x0, [x23, #28752]
    ba98:	lsl	w22, w22, #6
    ba9c:	ldr	x2, [x23, #28760]
    baa0:	mov	x1, #0x20000               	// #131072
    baa4:	sxtw	x22, w22
    baa8:	sub	x0, x0, x2
    baac:	cmp	x0, x1
    bab0:	csel	x0, x0, x1, ls  // ls = plast
    bab4:	cmp	x0, x22
    bab8:	csel	x22, x0, x22, ls  // ls = plast
    babc:	ldr	x1, [x23, #28768]
    bac0:	cbz	x22, bae0 <ZSTD_decodeSeqHeaders+0x190>
    bac4:	sub	x1, x1, x22
    bac8:	mov	x0, #0x0                   	// #0
    bacc:	nop
    bad0:	prfm	pldl2keep, [x1, x0]
    bad4:	add	x0, x0, #0x40
    bad8:	cmp	x22, x0
    badc:	b.hi	bad0 <ZSTD_decodeSeqHeaders+0x180>  // b.pmore
    bae0:	str	wzr, [x24, #12652]
    bae4:	sub	x0, x21, x20
    bae8:	ldp	x23, x24, [sp, #96]
    baec:	ldp	x25, x26, [sp, #112]
    baf0:	ldr	x27, [sp, #128]
    baf4:	b	bb30 <ZSTD_decodeSeqHeaders+0x1e0>
    baf8:	cmp	w22, #0xff
    bafc:	b.eq	bbe8 <ZSTD_decodeSeqHeaders+0x298>  // b.none
    bb00:	cmp	x19, x0
    bb04:	b.ls	bb28 <ZSTD_decodeSeqHeaders+0x1d8>  // b.plast
    bb08:	ldrb	w2, [x2, #1]
    bb0c:	sub	w22, w22, #0x80
    bb10:	add	x0, x20, #0x2
    bb14:	add	w22, w2, w22, lsl #8
    bb18:	str	w22, [x1]
    bb1c:	add	x1, x0, #0x4
    bb20:	cmp	x19, x1
    bb24:	b.cs	b99c <ZSTD_decodeSeqHeaders+0x4c>  // b.hs, b.nlast
    bb28:	ldp	x23, x24, [sp, #96]
    bb2c:	mov	x0, #0xffffffffffffffb8    	// #-72
    bb30:	ldp	x29, x30, [sp, #48]
    bb34:	ldp	x19, x20, [sp, #64]
    bb38:	ldp	x21, x22, [sp, #80]
    bb3c:	add	sp, sp, #0x110
    bb40:	ret
    bb44:	str	wzr, [x1]
    bb48:	mov	x0, #0x1                   	// #1
    bb4c:	ldp	x29, x30, [sp, #48]
    bb50:	ldp	x19, x20, [sp, #64]
    bb54:	ldp	x21, x22, [sp, #80]
    bb58:	add	sp, sp, #0x110
    bb5c:	ret
    bb60:	cbz	w2, bc24 <ZSTD_decodeSeqHeaders+0x2d4>
    bb64:	cmp	w3, #0x0
    bb68:	ccmp	w22, #0x18, #0x4, ne  // ne = any
    bb6c:	b.le	bb90 <ZSTD_decodeSeqHeaders+0x240>
    bb70:	ldr	x0, [x23]
    bb74:	mov	x9, #0x1040                	// #4160
    bb78:	add	x1, x0, x9
    bb7c:	nop
    bb80:	prfm	pldl2keep, [x0]
    bb84:	add	x0, x0, #0x40
    bb88:	cmp	x1, x0
    bb8c:	b.ne	bb80 <ZSTD_decodeSeqHeaders+0x230>  // b.any
    bb90:	adrp	x0, 0 <FSE_versionNumber>
    bb94:	ldr	x25, [x0]
    bb98:	b	b9f4 <ZSTD_decodeSeqHeaders+0xa4>
    bb9c:	cbz	x6, bc24 <ZSTD_decodeSeqHeaders+0x2d4>
    bba0:	ldrb	w1, [x0, #1]
    bba4:	cmp	w1, #0x23
    bba8:	b.hi	bc24 <ZSTD_decodeSeqHeaders+0x2d4>  // b.pmore
    bbac:	adrp	x4, 0 <FSE_versionNumber>
    bbb0:	add	x21, x0, #0x2
    bbb4:	sub	x6, x19, x21
    bbb8:	ldr	x25, [x4]
    bbbc:	add	x0, x25, #0x340
    bbc0:	add	x4, x25, #0x2b0
    bbc4:	ldr	w0, [x0, x1, lsl #2]
    bbc8:	ldr	w1, [x4, x1, lsl #2]
    bbcc:	str	x27, [x23]
    bbd0:	str	xzr, [x23, #32]
    bbd4:	strh	wzr, [x23, #40]
    bbd8:	strb	w1, [x23, #42]
    bbdc:	strb	wzr, [x23, #43]
    bbe0:	str	w0, [x23, #44]
    bbe4:	b	b9f4 <ZSTD_decodeSeqHeaders+0xa4>
    bbe8:	add	x0, x2, #0x3
    bbec:	cmp	x0, x19
    bbf0:	b.hi	bb28 <ZSTD_decodeSeqHeaders+0x1d8>  // b.pmore
    bbf4:	ldurh	w22, [x2, #1]
    bbf8:	mov	w10, #0x7f00                	// #32512
    bbfc:	add	w22, w22, w10
    bc00:	b	b98c <ZSTD_decodeSeqHeaders+0x3c>
    bc04:	mov	x4, x6
    bc08:	add	x0, sp, #0xa0
    bc0c:	mov	x3, x21
    bc10:	add	x2, sp, #0x9c
    bc14:	add	x1, sp, #0x98
    bc18:	bl	48 <FSE_readNCount>
    bc1c:	cmn	x0, #0x78
    bc20:	b.ls	bc50 <ZSTD_decodeSeqHeaders+0x300>  // b.plast
    bc24:	mov	x0, #0xffffffffffffffec    	// #-20
    bc28:	ldp	x29, x30, [sp, #48]
    bc2c:	ldp	x19, x20, [sp, #64]
    bc30:	ldp	x21, x22, [sp, #80]
    bc34:	ldp	x23, x24, [sp, #96]
    bc38:	ldp	x25, x26, [sp, #112]
    bc3c:	ldr	x27, [sp, #128]
    bc40:	add	sp, sp, #0x110
    bc44:	ret
    bc48:	mov	x0, #0xffffffffffffffb8    	// #-72
    bc4c:	ret
    bc50:	ldr	w5, [sp, #156]
    bc54:	cmp	w5, #0x9
    bc58:	b.hi	bc24 <ZSTD_decodeSeqHeaders+0x2d4>  // b.pmore
    bc5c:	adrp	x4, 0 <FSE_versionNumber>
    bc60:	ldr	w2, [sp, #152]
    bc64:	add	x21, x21, x0
    bc68:	add	x1, sp, #0xa0
    bc6c:	ldr	x25, [x4]
    bc70:	mov	x0, x27
    bc74:	add	x3, x25, #0x340
    bc78:	add	x4, x25, #0x2b0
    bc7c:	bl	84d0 <ZSTD_free+0x28>
    bc80:	ldr	w2, [x24, #12460]
    bc84:	sub	x6, x19, x21
    bc88:	ldr	w3, [x24, #12652]
    bc8c:	str	x27, [x23]
    bc90:	b	b9f4 <ZSTD_decodeSeqHeaders+0xa4>
    bc94:	nop
	...
    bca0:	cmp	x4, #0x2
    bca4:	b.ls	bf8c <ZSTD_decodeSeqHeaders+0x63c>  // b.plast
    bca8:	stp	x29, x30, [sp, #-128]!
    bcac:	mov	x29, sp
    bcb0:	stp	x19, x20, [sp, #16]
    bcb4:	mov	x20, x0
    bcb8:	mov	x19, x3
    bcbc:	stp	x21, x22, [sp, #32]
    bcc0:	mov	x22, x1
    bcc4:	stp	x23, x24, [sp, #48]
    bcc8:	mov	x23, x2
    bccc:	mov	w24, w5
    bcd0:	stp	x25, x26, [sp, #64]
    bcd4:	mov	x25, x4
    bcd8:	ldrb	w6, [x3]
    bcdc:	and	w21, w6, #0x3
    bce0:	cmp	w21, #0x2
    bce4:	b.eq	bd5c <ZSTD_decodeSeqHeaders+0x40c>  // b.none
    bce8:	cmp	w21, #0x3
    bcec:	b.eq	bd4c <ZSTD_decodeSeqHeaders+0x3fc>  // b.none
    bcf0:	cmp	w21, #0x1
    bcf4:	b.eq	bf40 <ZSTD_decodeSeqHeaders+0x5f0>  // b.none
    bcf8:	ubfx	x0, x6, #2, #2
    bcfc:	cmp	w0, #0x1
    bd00:	b.eq	bf30 <ZSTD_decodeSeqHeaders+0x5e0>  // b.none
    bd04:	cmp	w0, #0x3
    bd08:	b.eq	bfa4 <ZSTD_decodeSeqHeaders+0x654>  // b.none
    bd0c:	ubfx	x21, x6, #3, #5
    bd10:	mov	x1, #0x1                   	// #1
    bd14:	add	x26, x21, x1
    bd18:	add	x0, x26, #0x8
    bd1c:	cmp	x25, x0
    bd20:	b.cs	bf94 <ZSTD_decodeSeqHeaders+0x644>  // b.hs, b.nlast
    bd24:	cmp	x25, x26
    bd28:	b.cs	c05c <ZSTD_decodeSeqHeaders+0x70c>  // b.hs, b.nlast
    bd2c:	nop
    bd30:	mov	x0, #0xffffffffffffffec    	// #-20
    bd34:	ldp	x19, x20, [sp, #16]
    bd38:	ldp	x21, x22, [sp, #32]
    bd3c:	ldp	x23, x24, [sp, #48]
    bd40:	ldp	x25, x26, [sp, #64]
    bd44:	ldp	x29, x30, [sp], #128
    bd48:	ret
    bd4c:	add	x1, x0, #0x4, lsl #12
    bd50:	mov	x0, #0xffffffffffffffe2    	// #-30
    bd54:	ldr	w1, [x1, #12456]
    bd58:	cbz	w1, bd34 <ZSTD_decodeSeqHeaders+0x3e4>
    bd5c:	cmp	x25, #0x4
    bd60:	b.ls	bd30 <ZSTD_decodeSeqHeaders+0x3e0>  // b.plast
    bd64:	ldr	w3, [x19]
    bd68:	ubfx	x6, x6, #2, #2
    bd6c:	stp	x27, x28, [sp, #80]
    bd70:	cmp	w6, #0x2
    bd74:	lsr	w27, w3, #4
    bd78:	b.eq	bf1c <ZSTD_decodeSeqHeaders+0x5cc>  // b.none
    bd7c:	cmp	w6, #0x3
    bd80:	b.eq	bf00 <ZSTD_decodeSeqHeaders+0x5b0>  // b.none
    bd84:	eor	w6, w6, #0x1
    bd88:	and	x27, x27, #0x3ff
    bd8c:	ubfx	x3, x3, #14, #10
    bd90:	mov	x2, #0x3                   	// #3
    bd94:	add	x26, x2, x3
    bd98:	cmp	x25, x26
    bd9c:	b.cc	bf14 <ZSTD_decodeSeqHeaders+0x5c4>  // b.lo, b.ul, b.last
    bda0:	add	x28, x20, #0x4, lsl #12
    bda4:	cmp	x27, #0x300
    bda8:	ldr	w0, [x28, #12652]
    bdac:	ccmp	w0, #0x0, #0x4, hi  // hi = pmore
    bdb0:	b.ne	c0b8 <ZSTD_decodeSeqHeaders+0x768>  // b.any
    bdb4:	mov	x7, #0x71d8                	// #29144
    bdb8:	add	x2, x19, x2
    bdbc:	add	x8, x20, x7
    bdc0:	cmp	w21, #0x3
    bdc4:	ldr	w7, [x28, #12624]
    bdc8:	b.eq	c000 <ZSTD_decodeSeqHeaders+0x6b0>  // b.none
    bdcc:	mov	x4, #0x2838                	// #10296
    bdd0:	mov	x5, #0x6848                	// #26696
    bdd4:	add	x9, x20, x4
    bdd8:	add	x5, x20, x5
    bddc:	mov	x4, x3
    bde0:	mov	x3, x2
    bde4:	cbz	w6, c03c <ZSTD_decodeSeqHeaders+0x6ec>
    bde8:	mov	x1, x8
    bdec:	mov	x0, x9
    bdf0:	mov	x2, x27
    bdf4:	mov	x6, #0x800                 	// #2048
    bdf8:	stp	x9, x8, [sp, #96]
    bdfc:	bl	6a88 <HUF_decompress1X1_DCtx_wksp_bmi2>
    be00:	ldp	x9, x8, [sp, #96]
    be04:	cmn	x0, #0x78
    be08:	b.hi	bf14 <ZSTD_decodeSeqHeaders+0x5c4>  // b.pmore
    be0c:	str	x8, [x20, #28952]
    be10:	mov	w0, #0x1                   	// #1
    be14:	str	x27, [x20, #28984]
    be18:	cmp	w21, #0x2
    be1c:	str	w0, [x28, #12456]
    be20:	b.ne	be28 <ZSTD_decodeSeqHeaders+0x4d8>  // b.any
    be24:	str	x9, [x20, #24]
    be28:	add	x0, x8, x27
    be2c:	mov	x2, #0x8                   	// #8
    be30:	mov	w1, #0x0                   	// #0
    be34:	bl	0 <grub_memset>
    be38:	ldp	x27, x28, [sp, #80]
    be3c:	add	x19, x19, x26
    be40:	sub	x25, x25, x26
    be44:	mov	x2, x19
    be48:	mov	x3, x25
    be4c:	add	x1, sp, #0x7c
    be50:	mov	x0, x20
    be54:	bl	b950 <ZSTD_decodeSeqHeaders>
    be58:	cmn	x0, #0x78
    be5c:	b.hi	bd34 <ZSTD_decodeSeqHeaders+0x3e4>  // b.pmore
    be60:	ldr	w5, [sp, #124]
    be64:	add	x3, x19, x0
    be68:	sub	x4, x25, x0
    be6c:	cbz	w24, be80 <ZSTD_decodeSeqHeaders+0x530>
    be70:	ldr	x1, [x20, #28792]
    be74:	mov	x0, #0x1000000             	// #16777216
    be78:	cmp	x1, x0
    be7c:	b.ls	bed8 <ZSTD_decodeSeqHeaders+0x588>  // b.plast
    be80:	cmp	w5, #0x0
    be84:	b.le	bed8 <ZSTD_decodeSeqHeaders+0x588>
    be88:	ldr	x1, [x20, #16]
    be8c:	mov	w8, #0x1                   	// #1
    be90:	ldr	w2, [x1, #4]
    be94:	lsl	w8, w8, w2
    be98:	cbz	w8, bed8 <ZSTD_decodeSeqHeaders+0x588>
    be9c:	sub	w8, w8, #0x1
    bea0:	add	x0, x1, #0x12
    bea4:	add	x1, x1, #0xa
    bea8:	mov	w6, #0x0                   	// #0
    beac:	add	x8, x0, w8, uxtw #3
    beb0:	ldrb	w7, [x1], #8
    beb4:	cmp	w7, #0x16
    beb8:	cinc	w6, w6, hi  // hi = pmore
    bebc:	cmp	x8, x1
    bec0:	b.ne	beb0 <ZSTD_decodeSeqHeaders+0x560>  // b.any
    bec4:	mov	w0, #0x8                   	// #8
    bec8:	sub	w0, w0, w2
    becc:	lsl	w6, w6, w0
    bed0:	cmp	w6, #0x6
    bed4:	b.hi	c0dc <ZSTD_decodeSeqHeaders+0x78c>  // b.pmore
    bed8:	mov	x2, x23
    bedc:	mov	x1, x22
    bee0:	mov	x0, x20
    bee4:	bl	8e00 <ZSTD_free+0x958>
    bee8:	ldp	x19, x20, [sp, #16]
    beec:	ldp	x21, x22, [sp, #32]
    bef0:	ldp	x23, x24, [sp, #48]
    bef4:	ldp	x25, x26, [sp, #64]
    bef8:	ldp	x29, x30, [sp], #128
    befc:	ret
    bf00:	and	w0, w27, #0x3ffff
    bf04:	and	x27, x27, #0x3ffff
    bf08:	cmp	w0, #0x20, lsl #12
    bf0c:	ldrb	w0, [x19, #4]
    bf10:	b.ls	c098 <ZSTD_decodeSeqHeaders+0x748>  // b.plast
    bf14:	ldp	x27, x28, [sp, #80]
    bf18:	b	bd30 <ZSTD_decodeSeqHeaders+0x3e0>
    bf1c:	and	x27, x27, #0x3fff
    bf20:	lsr	w3, w3, #18
    bf24:	mov	w6, #0x0                   	// #0
    bf28:	mov	x2, #0x4                   	// #4
    bf2c:	b	bd94 <ZSTD_decodeSeqHeaders+0x444>
    bf30:	ldrh	w6, [x3]
    bf34:	mov	x1, #0x2                   	// #2
    bf38:	ubfx	x21, x6, #4, #12
    bf3c:	b	bd14 <ZSTD_decodeSeqHeaders+0x3c4>
    bf40:	ubfx	x0, x6, #2, #2
    bf44:	cmp	w0, #0x1
    bf48:	b.eq	bfe8 <ZSTD_decodeSeqHeaders+0x698>  // b.none
    bf4c:	cmp	w0, #0x3
    bf50:	b.eq	bfbc <ZSTD_decodeSeqHeaders+0x66c>  // b.none
    bf54:	ubfx	x21, x6, #3, #5
    bf58:	mov	x26, #0x2                   	// #2
    bf5c:	mov	x0, #0x1                   	// #1
    bf60:	stp	x27, x28, [sp, #80]
    bf64:	ldrb	w1, [x19, x0]
    bf68:	mov	x0, #0x71d8                	// #29144
    bf6c:	add	x27, x20, x0
    bf70:	mov	x0, x27
    bf74:	add	x2, x21, #0x8
    bf78:	bl	0 <grub_memset>
    bf7c:	str	x27, [x20, #28952]
    bf80:	str	x21, [x20, #28984]
    bf84:	ldp	x27, x28, [sp, #80]
    bf88:	b	be3c <ZSTD_decodeSeqHeaders+0x4ec>
    bf8c:	mov	x0, #0xffffffffffffffec    	// #-20
    bf90:	ret
    bf94:	add	x1, x19, x1
    bf98:	str	x1, [x20, #28952]
    bf9c:	str	x21, [x20, #28984]
    bfa0:	b	be3c <ZSTD_decodeSeqHeaders+0x4ec>
    bfa4:	ldrh	w21, [x3]
    bfa8:	mov	x1, #0x3                   	// #3
    bfac:	ldrb	w6, [x3, #2]
    bfb0:	add	w6, w21, w6, lsl #16
    bfb4:	ubfx	x21, x6, #4, #21
    bfb8:	b	bd14 <ZSTD_decodeSeqHeaders+0x3c4>
    bfbc:	ldrh	w21, [x3]
    bfc0:	ldrb	w6, [x3, #2]
    bfc4:	add	w6, w21, w6, lsl #16
    bfc8:	ubfx	x21, x6, #4, #21
    bfcc:	cmp	x21, #0x20, lsl #12
    bfd0:	ccmp	x4, #0x3, #0x4, ls  // ls = plast
    bfd4:	b.eq	bd30 <ZSTD_decodeSeqHeaders+0x3e0>  // b.none
    bfd8:	mov	x26, #0x4                   	// #4
    bfdc:	mov	x0, #0x3                   	// #3
    bfe0:	stp	x27, x28, [sp, #80]
    bfe4:	b	bf64 <ZSTD_decodeSeqHeaders+0x614>
    bfe8:	ldrh	w6, [x3]
    bfec:	mov	x26, #0x3                   	// #3
    bff0:	mov	x0, #0x2                   	// #2
    bff4:	stp	x27, x28, [sp, #80]
    bff8:	ubfx	x21, x6, #4, #12
    bffc:	b	bf64 <ZSTD_decodeSeqHeaders+0x614>
    c000:	str	x8, [sp, #96]
    c004:	mov	w5, w7
    c008:	mov	x1, x27
    c00c:	mov	x0, x8
    c010:	ldr	x4, [x20, #24]
    c014:	cbnz	w6, c0ac <ZSTD_decodeSeqHeaders+0x75c>
    c018:	bl	6b18 <HUF_decompress4X_usingDTable_bmi2>
    c01c:	ldr	x8, [sp, #96]
    c020:	cmn	x0, #0x78
    c024:	b.hi	bf14 <ZSTD_decodeSeqHeaders+0x5c4>  // b.pmore
    c028:	str	x8, [x20, #28952]
    c02c:	mov	w0, #0x1                   	// #1
    c030:	str	x27, [x20, #28984]
    c034:	str	w0, [x28, #12456]
    c038:	b	be28 <ZSTD_decodeSeqHeaders+0x4d8>
    c03c:	mov	x1, x8
    c040:	mov	x0, x9
    c044:	mov	x2, x27
    c048:	mov	x6, #0x800                 	// #2048
    c04c:	stp	x9, x8, [sp, #96]
    c050:	bl	6bc8 <HUF_decompress4X_hufOnly_wksp_bmi2>
    c054:	ldp	x9, x8, [sp, #96]
    c058:	b	be04 <ZSTD_decodeSeqHeaders+0x4b4>
    c05c:	mov	x2, #0x71d8                	// #29144
    c060:	stp	x27, x28, [sp, #80]
    c064:	add	x27, x20, x2
    c068:	add	x1, x19, x1
    c06c:	mov	x0, x27
    c070:	mov	x2, x21
    c074:	bl	0 <grub_memmove>
    c078:	str	x27, [x20, #28952]
    c07c:	add	x0, x27, x21
    c080:	str	x21, [x20, #28984]
    c084:	mov	x2, #0x8                   	// #8
    c088:	mov	w1, #0x0                   	// #0
    c08c:	bl	0 <grub_memset>
    c090:	ldp	x27, x28, [sp, #80]
    c094:	b	be3c <ZSTD_decodeSeqHeaders+0x4ec>
    c098:	lsl	w0, w0, #10
    c09c:	mov	w6, #0x0                   	// #0
    c0a0:	mov	x2, #0x5                   	// #5
    c0a4:	add	w3, w0, w3, lsr #22
    c0a8:	b	bd94 <ZSTD_decodeSeqHeaders+0x444>
    c0ac:	bl	6a00 <HUF_decompress1X_usingDTable_bmi2>
    c0b0:	ldr	x8, [sp, #96]
    c0b4:	b	c020 <ZSTD_decodeSeqHeaders+0x6d0>
    c0b8:	ldr	x0, [x20, #24]
    c0bc:	mov	x8, #0x4040                	// #16448
    c0c0:	add	x1, x0, x8
    c0c4:	nop
    c0c8:	prfm	pldl2keep, [x0]
    c0cc:	add	x0, x0, #0x40
    c0d0:	cmp	x0, x1
    c0d4:	b.ne	c0c8 <ZSTD_decodeSeqHeaders+0x778>  // b.any
    c0d8:	b	bdb4 <ZSTD_decodeSeqHeaders+0x464>
    c0dc:	mov	x2, x23
    c0e0:	mov	x1, x22
    c0e4:	mov	x0, x20
    c0e8:	bl	96f8 <ZSTD_free+0x1250>
    c0ec:	b	bd34 <ZSTD_decodeSeqHeaders+0x3e4>
    c0f0:	stp	x29, x30, [sp, #-64]!
    c0f4:	mov	x29, sp
    c0f8:	stp	x19, x20, [sp, #16]
    c0fc:	mov	x19, x0
    c100:	mov	x20, x1
    c104:	stp	x21, x22, [sp, #32]
    c108:	cbz	x2, c134 <ZSTD_decodeSeqHeaders+0x7e4>
    c10c:	ldr	x0, [x0, #28744]
    c110:	cmp	x0, x1
    c114:	b.eq	c134 <ZSTD_decodeSeqHeaders+0x7e4>  // b.none
    c118:	ldr	x5, [x19, #28752]
    c11c:	str	x1, [x19, #28744]
    c120:	str	x1, [x19, #28752]
    c124:	sub	x5, x0, x5
    c128:	str	x0, [x19, #28768]
    c12c:	sub	x5, x1, x5
    c130:	str	x5, [x19, #28760]
    c134:	add	x22, x19, #0x4, lsl #12
    c138:	ldr	w5, [x22, #12452]
    c13c:	cmp	w5, #0x4
    c140:	b.hi	c1cc <ZSTD_decodeSeqHeaders+0x87c>  // b.pmore
    c144:	cmp	w5, #0x2
    c148:	b.hi	c408 <ZSTD_decodeSeqHeaders+0xab8>  // b.pmore
    c14c:	cmp	w5, #0x1
    c150:	b.eq	c324 <ZSTD_decodeSeqHeaders+0x9d4>  // b.none
    c154:	cmp	w5, #0x2
    c158:	b.ne	c22c <ZSTD_decodeSeqHeaders+0x8dc>  // b.any
    c15c:	ldrh	w1, [x3]
    c160:	ldrb	w0, [x3, #2]
    c164:	add	w0, w1, w0, lsl #16
    c168:	and	w2, w0, #0x1
    c16c:	ubfx	x1, x0, #1, #2
    c170:	lsr	w0, w0, #3
    c174:	cmp	w1, #0x1
    c178:	b.eq	c4a0 <ZSTD_decodeSeqHeaders+0xb50>  // b.none
    c17c:	cmp	w1, #0x3
    c180:	b.eq	c420 <ZSTD_decodeSeqHeaders+0xad0>  // b.none
    c184:	mov	w3, w0
    c188:	str	x3, [x19, #28776]
    c18c:	str	w1, [x22, #12448]
    c190:	str	x3, [x19, #28992]
    c194:	cbnz	w0, c4b0 <ZSTD_decodeSeqHeaders+0xb60>
    c198:	cbz	w2, c39c <ZSTD_decodeSeqHeaders+0xa4c>
    c19c:	ldr	w0, [x22, #12432]
    c1a0:	cbz	w0, c1dc <ZSTD_decodeSeqHeaders+0x88c>
    c1a4:	mov	x0, #0x4                   	// #4
    c1a8:	str	x0, [x19, #28776]
    c1ac:	mov	x21, #0x0                   	// #0
    c1b0:	mov	w0, #0x5                   	// #5
    c1b4:	str	w0, [x22, #12452]
    c1b8:	mov	x0, x21
    c1bc:	ldp	x19, x20, [sp, #16]
    c1c0:	ldp	x21, x22, [sp, #32]
    c1c4:	ldp	x29, x30, [sp], #64
    c1c8:	ret
    c1cc:	cmp	w5, #0x6
    c1d0:	b.eq	c3c4 <ZSTD_decodeSeqHeaders+0xa74>  // b.none
    c1d4:	cmp	w5, #0x7
    c1d8:	b.ne	c1fc <ZSTD_decodeSeqHeaders+0x8ac>  // b.any
    c1dc:	str	xzr, [x19, #28776]
    c1e0:	mov	x21, #0x0                   	// #0
    c1e4:	str	wzr, [x22, #12452]
    c1e8:	mov	x0, x21
    c1ec:	ldp	x19, x20, [sp, #16]
    c1f0:	ldp	x21, x22, [sp, #32]
    c1f4:	ldp	x29, x30, [sp], #64
    c1f8:	ret
    c1fc:	cmp	w5, #0x5
    c200:	b.ne	c2f4 <ZSTD_decodeSeqHeaders+0x9a4>  // b.any
    c204:	mov	x0, #0x70b0                	// #28848
    c208:	add	x0, x19, x0
    c20c:	str	x3, [sp, #56]
    c210:	bl	80b8 <XXH64_digest>
    c214:	ldr	x3, [sp, #56]
    c218:	mov	x21, #0xffffffffffffffea    	// #-22
    c21c:	ldr	w1, [x3]
    c220:	cmp	w1, w0
    c224:	b.eq	c1dc <ZSTD_decodeSeqHeaders+0x88c>  // b.none
    c228:	b	c1b8 <ZSTD_decodeSeqHeaders+0x868>
    c22c:	cbnz	w5, c2f4 <ZSTD_decodeSeqHeaders+0x9a4>
    c230:	ldr	w0, [x22, #12560]
    c234:	cbnz	w0, c30c <ZSTD_decodeSeqHeaders+0x9bc>
    c238:	ldr	w0, [x3]
    c23c:	mov	w2, #0x2a50                	// #10832
    c240:	movk	w2, #0x184d, lsl #16
    c244:	mov	x1, #0x4                   	// #4
    c248:	and	w0, w0, #0xfffffff0
    c24c:	mov	x6, #0x5                   	// #5
    c250:	cmp	w0, w2
    c254:	b.eq	c584 <ZSTD_decodeSeqHeaders+0xc34>  // b.none
    c258:	cmp	x4, x6
    c25c:	b.cc	c514 <ZSTD_decodeSeqHeaders+0xbc4>  // b.lo, b.ul, b.last
    c260:	adrp	x0, 0 <FSE_versionNumber>
    c264:	ldrb	w5, [x3, x1]
    c268:	ldr	x1, [x0]
    c26c:	and	x9, x5, #0x3
    c270:	ubfx	x7, x5, #6, #2
    c274:	lsr	w0, w5, #5
    c278:	add	x8, x1, #0x428
    c27c:	add	x1, x1, #0x448
    c280:	mvn	w2, w0
    c284:	cmp	wzr, w5, lsr #6
    c288:	and	x2, x2, #0x1
    c28c:	and	w0, w0, #0x1
    c290:	ldr	x21, [x8, x9, lsl #3]
    c294:	csel	w0, w0, wzr, eq  // eq = none
    c298:	ldr	x1, [x1, x7, lsl #3]
    c29c:	add	x2, x2, x6
    c2a0:	and	x0, x0, #0xff
    c2a4:	add	x21, x21, x1
    c2a8:	add	x21, x21, x2
    c2ac:	add	x21, x21, x0
    c2b0:	str	x21, [x19, #28936]
    c2b4:	cmn	x21, #0x78
    c2b8:	b.hi	c1b8 <ZSTD_decodeSeqHeaders+0x868>  // b.pmore
    c2bc:	add	x0, x19, #0x27, lsl #12
    c2c0:	mov	x1, x3
    c2c4:	mov	x2, x4
    c2c8:	add	x0, x0, #0x1e0
    c2cc:	str	x4, [sp, #56]
    c2d0:	bl	0 <grub_memmove>
    c2d4:	ldr	x4, [sp, #56]
    c2d8:	mov	w1, #0x1                   	// #1
    c2dc:	ldr	x0, [x19, #28936]
    c2e0:	mov	x21, #0x0                   	// #0
    c2e4:	sub	x4, x0, x4
    c2e8:	str	x4, [x19, #28776]
    c2ec:	str	w1, [x22, #12452]
    c2f0:	b	c1b8 <ZSTD_decodeSeqHeaders+0x868>
    c2f4:	mov	x21, #0xffffffffffffffff    	// #-1
    c2f8:	mov	x0, x21
    c2fc:	ldp	x19, x20, [sp, #16]
    c300:	ldp	x21, x22, [sp, #32]
    c304:	ldp	x29, x30, [sp], #64
    c308:	ret
    c30c:	cmp	w0, #0x1
    c310:	mov	x1, #0x4                   	// #4
    c314:	mov	x2, #0x5                   	// #5
    c318:	csel	x1, x1, xzr, ne  // ne = any
    c31c:	csinc	x6, x2, xzr, ne  // ne = any
    c320:	b	c258 <ZSTD_decodeSeqHeaders+0x908>
    c324:	ldr	x0, [x19, #28936]
    c328:	add	x20, x19, #0x27, lsl #12
    c32c:	add	x20, x20, #0x1e0
    c330:	mov	x1, x3
    c334:	sub	x0, x0, x4
    c338:	mov	x2, x4
    c33c:	add	x0, x20, x0
    c340:	bl	0 <grub_memmove>
    c344:	ldr	w3, [x22, #12560]
    c348:	mov	x5, #0x7070                	// #28784
    c34c:	ldr	x2, [x19, #28936]
    c350:	mov	x1, x20
    c354:	add	x0, x19, x5
    c358:	bl	acf0 <ZSTD_getFrameHeader_advanced>
    c35c:	mov	x21, x0
    c360:	cmn	x0, #0x78
    c364:	b.hi	c1b8 <ZSTD_decodeSeqHeaders+0x868>  // b.pmore
    c368:	cbnz	x0, c4c0 <ZSTD_decodeSeqHeaders+0xb70>
    c36c:	ldr	w0, [x22, #12428]
    c370:	cbz	w0, c384 <ZSTD_decodeSeqHeaders+0xa34>
    c374:	ldr	w1, [x22, #12648]
    c378:	mov	x21, #0xffffffffffffffe0    	// #-32
    c37c:	cmp	w0, w1
    c380:	b.ne	c1b8 <ZSTD_decodeSeqHeaders+0x868>  // b.any
    c384:	ldr	w0, [x22, #12432]
    c388:	cbz	w0, c39c <ZSTD_decodeSeqHeaders+0xa4c>
    c38c:	mov	x4, #0x70b0                	// #28848
    c390:	mov	x1, #0x0                   	// #0
    c394:	add	x0, x19, x4
    c398:	bl	7900 <XXH64_reset>
    c39c:	mov	x0, #0x3                   	// #3
    c3a0:	str	x0, [x19, #28776]
    c3a4:	mov	w0, #0x2                   	// #2
    c3a8:	str	w0, [x22, #12452]
    c3ac:	mov	x21, #0x0                   	// #0
    c3b0:	mov	x0, x21
    c3b4:	ldp	x19, x20, [sp, #16]
    c3b8:	ldp	x21, x22, [sp, #32]
    c3bc:	ldp	x29, x30, [sp], #64
    c3c0:	ret
    c3c4:	sub	x0, x19, x4
    c3c8:	mov	x1, x3
    c3cc:	add	x0, x0, #0x27, lsl #12
    c3d0:	mov	x2, x4
    c3d4:	add	x0, x0, #0x1e8
    c3d8:	bl	0 <grub_memmove>
    c3dc:	add	x1, x19, #0x24, lsl #12
    c3e0:	mov	w0, #0x7                   	// #7
    c3e4:	mov	x21, #0x0                   	// #0
    c3e8:	ldr	w1, [x1, #12772]
    c3ec:	str	x1, [x19, #28776]
    c3f0:	str	w0, [x22, #12452]
    c3f4:	mov	x0, x21
    c3f8:	ldp	x19, x20, [sp, #16]
    c3fc:	ldp	x21, x22, [sp, #32]
    c400:	ldp	x29, x30, [sp], #64
    c404:	ret
    c408:	ldr	w0, [x22, #12448]
    c40c:	cmp	w0, #0x1
    c410:	b.eq	c4ec <ZSTD_decodeSeqHeaders+0xb9c>  // b.none
    c414:	cmp	w0, #0x2
    c418:	b.eq	c4c8 <ZSTD_decodeSeqHeaders+0xb78>  // b.none
    c41c:	cbz	w0, c438 <ZSTD_decodeSeqHeaders+0xae8>
    c420:	mov	x21, #0xffffffffffffffec    	// #-20
    c424:	mov	x0, x21
    c428:	ldp	x19, x20, [sp, #16]
    c42c:	ldp	x21, x22, [sp, #32]
    c430:	ldp	x29, x30, [sp], #64
    c434:	ret
    c438:	cmp	x20, #0x0
    c43c:	mov	x21, #0xffffffffffffffba    	// #-70
    c440:	ccmp	x2, x4, #0x0, ne  // ne = any
    c444:	b.cc	c1b8 <ZSTD_decodeSeqHeaders+0x868>  // b.lo, b.ul, b.last
    c448:	mov	x1, x3
    c44c:	mov	x2, x4
    c450:	mov	x21, x4
    c454:	mov	x0, x20
    c458:	bl	0 <grub_memmove>
    c45c:	cmn	x21, #0x78
    c460:	b.hi	c1b8 <ZSTD_decodeSeqHeaders+0x868>  // b.pmore
    c464:	ldr	x0, [x19, #28824]
    c468:	ldr	w1, [x22, #12432]
    c46c:	add	x0, x0, x21
    c470:	str	x0, [x19, #28824]
    c474:	cbnz	w1, c558 <ZSTD_decodeSeqHeaders+0xc08>
    c478:	ldr	w0, [x22, #12452]
    c47c:	cmp	w0, #0x4
    c480:	b.eq	c524 <ZSTD_decodeSeqHeaders+0xbd4>  // b.none
    c484:	mov	w0, #0x2                   	// #2
    c488:	str	w0, [x22, #12452]
    c48c:	add	x20, x20, x21
    c490:	mov	x0, #0x3                   	// #3
    c494:	str	x20, [x19, #28744]
    c498:	str	x0, [x19, #28776]
    c49c:	b	c1b8 <ZSTD_decodeSeqHeaders+0x868>
    c4a0:	mov	x1, #0x1                   	// #1
    c4a4:	str	x1, [x19, #28776]
    c4a8:	str	w1, [x22, #12448]
    c4ac:	str	x0, [x19, #28992]
    c4b0:	add	w2, w2, #0x3
    c4b4:	mov	x21, #0x0                   	// #0
    c4b8:	str	w2, [x22, #12452]
    c4bc:	b	c1b8 <ZSTD_decodeSeqHeaders+0x868>
    c4c0:	mov	x21, #0xffffffffffffffb8    	// #-72
    c4c4:	b	c1b8 <ZSTD_decodeSeqHeaders+0x868>
    c4c8:	mov	x0, #0x1ffff               	// #131071
    c4cc:	cmp	x4, x0
    c4d0:	b.hi	c4c0 <ZSTD_decodeSeqHeaders+0xb70>  // b.pmore
    c4d4:	mov	x1, x20
    c4d8:	mov	x0, x19
    c4dc:	mov	w5, #0x1                   	// #1
    c4e0:	bl	bca0 <ZSTD_decodeSeqHeaders+0x350>
    c4e4:	mov	x21, x0
    c4e8:	b	c45c <ZSTD_decodeSeqHeaders+0xb0c>
    c4ec:	cmp	x4, #0x1
    c4f0:	b.ne	c4c0 <ZSTD_decodeSeqHeaders+0xb70>  // b.any
    c4f4:	ldr	x21, [x19, #28992]
    c4f8:	cmp	x2, x21
    c4fc:	b.cc	c57c <ZSTD_decodeSeqHeaders+0xc2c>  // b.lo, b.ul, b.last
    c500:	ldrb	w1, [x3]
    c504:	mov	x2, x21
    c508:	mov	x0, x20
    c50c:	bl	0 <grub_memset>
    c510:	b	c45c <ZSTD_decodeSeqHeaders+0xb0c>
    c514:	mov	x0, #0xffffffffffffffb8    	// #-72
    c518:	mov	x21, x0
    c51c:	str	x0, [x19, #28936]
    c520:	b	c1b8 <ZSTD_decodeSeqHeaders+0x868>
    c524:	ldr	x0, [x19, #28784]
    c528:	cmn	x0, #0x1
    c52c:	b.eq	c53c <ZSTD_decodeSeqHeaders+0xbec>  // b.none
    c530:	ldr	x1, [x19, #28824]
    c534:	cmp	x0, x1
    c538:	b.ne	c420 <ZSTD_decodeSeqHeaders+0xad0>  // b.any
    c53c:	ldr	w0, [x22, #12432]
    c540:	cbz	w0, c570 <ZSTD_decodeSeqHeaders+0xc20>
    c544:	mov	x0, #0x4                   	// #4
    c548:	str	x0, [x19, #28776]
    c54c:	mov	w0, #0x5                   	// #5
    c550:	str	w0, [x22, #12452]
    c554:	b	c1b8 <ZSTD_decodeSeqHeaders+0x868>
    c558:	mov	x3, #0x70b0                	// #28848
    c55c:	mov	x2, x21
    c560:	mov	x1, x20
    c564:	add	x0, x19, x3
    c568:	bl	7de0 <XXH64_update>
    c56c:	b	c478 <ZSTD_decodeSeqHeaders+0xb28>
    c570:	str	xzr, [x19, #28776]
    c574:	str	wzr, [x22, #12452]
    c578:	b	c1b8 <ZSTD_decodeSeqHeaders+0x868>
    c57c:	mov	x21, #0xffffffffffffffba    	// #-70
    c580:	b	c1b8 <ZSTD_decodeSeqHeaders+0x868>
    c584:	add	x0, x19, #0x27, lsl #12
    c588:	mov	x2, x4
    c58c:	mov	x1, x3
    c590:	add	x0, x0, #0x1e0
    c594:	str	x4, [sp, #56]
    c598:	bl	0 <grub_memmove>
    c59c:	ldr	x4, [sp, #56]
    c5a0:	mov	x0, #0x8                   	// #8
    c5a4:	mov	x21, #0x0                   	// #0
    c5a8:	sub	x4, x0, x4
    c5ac:	str	x4, [x19, #28776]
    c5b0:	mov	w0, #0x6                   	// #6
    c5b4:	str	w0, [x22, #12452]
    c5b8:	b	c1b8 <ZSTD_decodeSeqHeaders+0x868>
    c5bc:	nop
	...

000000000000c5c8 <ZSTD_decompressBlock>:
    c5c8:	stp	x29, x30, [sp, #-80]!
    c5cc:	mov	x29, sp
    c5d0:	stp	x19, x20, [sp, #16]
    c5d4:	mov	x20, x1
    c5d8:	mov	x19, x0
    c5dc:	ldr	x1, [x0, #28744]
    c5e0:	stp	x21, x22, [sp, #32]
    c5e4:	mov	x22, x2
    c5e8:	str	x23, [sp, #48]
    c5ec:	mov	x21, x4
    c5f0:	cmp	x20, x1
    c5f4:	mov	x23, x3
    c5f8:	b.eq	c618 <ZSTD_decompressBlock+0x50>  // b.none
    c5fc:	ldr	x0, [x0, #28752]
    c600:	str	x20, [x19, #28744]
    c604:	str	x20, [x19, #28752]
    c608:	sub	x0, x1, x0
    c60c:	str	x1, [x19, #28768]
    c610:	sub	x0, x20, x0
    c614:	str	x0, [x19, #28760]
    c618:	mov	x1, #0x1ffff               	// #131071
    c61c:	mov	x0, #0xffffffffffffffb8    	// #-72
    c620:	cmp	x21, x1
    c624:	b.hi	c640 <ZSTD_decompressBlock+0x78>  // b.pmore
    c628:	mov	x2, x21
    c62c:	mov	x1, x23
    c630:	mov	x0, x19
    c634:	bl	b5e0 <ZSTD_decodeLiteralsBlock>
    c638:	cmn	x0, #0x78
    c63c:	b.ls	c65c <ZSTD_decompressBlock+0x94>  // b.plast
    c640:	add	x20, x20, x0
    c644:	ldp	x21, x22, [sp, #32]
    c648:	ldr	x23, [sp, #48]
    c64c:	str	x20, [x19, #28744]
    c650:	ldp	x19, x20, [sp, #16]
    c654:	ldp	x29, x30, [sp], #80
    c658:	ret
    c65c:	add	x23, x23, x0
    c660:	sub	x21, x21, x0
    c664:	mov	x3, x21
    c668:	mov	x2, x23
    c66c:	add	x1, sp, #0x4c
    c670:	mov	x0, x19
    c674:	bl	b950 <ZSTD_decodeSeqHeaders>
    c678:	cmn	x0, #0x78
    c67c:	b.hi	c640 <ZSTD_decompressBlock+0x78>  // b.pmore
    c680:	ldr	w5, [sp, #76]
    c684:	add	x3, x23, x0
    c688:	sub	x4, x21, x0
    c68c:	cmp	w5, #0x0
    c690:	b.le	c6e8 <ZSTD_decompressBlock+0x120>
    c694:	ldr	x0, [x19, #16]
    c698:	mov	w6, #0x1                   	// #1
    c69c:	ldr	w7, [x0, #4]
    c6a0:	lsl	w6, w6, w7
    c6a4:	cbz	w6, c6e8 <ZSTD_decompressBlock+0x120>
    c6a8:	sub	w6, w6, #0x1
    c6ac:	add	x2, x0, #0x12
    c6b0:	add	x0, x0, #0xa
    c6b4:	mov	w1, #0x0                   	// #0
    c6b8:	add	x6, x2, w6, uxtw #3
    c6bc:	nop
    c6c0:	ldrb	w2, [x0], #8
    c6c4:	cmp	w2, #0x16
    c6c8:	cinc	w1, w1, hi  // hi = pmore
    c6cc:	cmp	x0, x6
    c6d0:	b.ne	c6c0 <ZSTD_decompressBlock+0xf8>  // b.any
    c6d4:	mov	w0, #0x8                   	// #8
    c6d8:	sub	w0, w0, w7
    c6dc:	lsl	w1, w1, w0
    c6e0:	cmp	w1, #0x6
    c6e4:	b.hi	c714 <ZSTD_decompressBlock+0x14c>  // b.pmore
    c6e8:	mov	x2, x22
    c6ec:	mov	x1, x20
    c6f0:	mov	x0, x19
    c6f4:	bl	8e00 <ZSTD_free+0x958>
    c6f8:	add	x20, x20, x0
    c6fc:	ldp	x21, x22, [sp, #32]
    c700:	ldr	x23, [sp, #48]
    c704:	str	x20, [x19, #28744]
    c708:	ldp	x19, x20, [sp, #16]
    c70c:	ldp	x29, x30, [sp], #80
    c710:	ret
    c714:	mov	x2, x22
    c718:	mov	x1, x20
    c71c:	mov	x0, x19
    c720:	bl	96f8 <ZSTD_free+0x1250>
    c724:	b	c640 <ZSTD_decompressBlock+0x78>

000000000000c728 <ZSTD_insertBlock>:
    c728:	mov	x3, x0
    c72c:	mov	x0, x2
    c730:	ldr	x4, [x3, #28744]
    c734:	cmp	x1, x4
    c738:	b.eq	c754 <ZSTD_insertBlock+0x2c>  // b.none
    c73c:	ldr	x2, [x3, #28752]
    c740:	str	x4, [x3, #28768]
    c744:	str	x1, [x3, #28752]
    c748:	sub	x4, x4, x2
    c74c:	sub	x4, x1, x4
    c750:	str	x4, [x3, #28760]
    c754:	add	x1, x1, x0
    c758:	str	x1, [x3, #28744]
    c75c:	ret

000000000000c760 <ZSTD_findFrameCompressedSize>:
    c760:	stp	x29, x30, [sp, #-96]!
    c764:	cmp	x1, #0x7
    c768:	mov	x29, sp
    c76c:	stp	x19, x20, [sp, #16]
    c770:	mov	x19, x1
    c774:	mov	x20, x0
    c778:	str	x21, [sp, #32]
    c77c:	b.ls	c7f4 <ZSTD_findFrameCompressedSize+0x94>  // b.plast
    c780:	ldr	w1, [x20]
    c784:	mov	w0, #0x2a50                	// #10832
    c788:	movk	w0, #0x184d, lsl #16
    c78c:	and	w1, w1, #0xfffffff0
    c790:	cmp	w1, w0
    c794:	b.eq	c93c <ZSTD_findFrameCompressedSize+0x1dc>  // b.none
    c798:	add	x21, sp, #0x38
    c79c:	mov	x2, #0x28                  	// #40
    c7a0:	mov	x0, x21
    c7a4:	mov	w1, #0x0                   	// #0
    c7a8:	bl	0 <grub_memset>
    c7ac:	ldr	w1, [x20]
    c7b0:	mov	w0, #0xb528                	// #46376
    c7b4:	movk	w0, #0xfd2f, lsl #16
    c7b8:	cmp	w1, w0
    c7bc:	b.eq	c81c <ZSTD_findFrameCompressedSize+0xbc>  // b.none
    c7c0:	and	w1, w1, #0xfffffff0
    c7c4:	mov	w2, #0x2a50                	// #10832
    c7c8:	movk	w2, #0x184d, lsl #16
    c7cc:	mov	x0, #0xfffffffffffffff6    	// #-10
    c7d0:	cmp	w1, w2
    c7d4:	b.ne	c7e4 <ZSTD_findFrameCompressedSize+0x84>  // b.any
    c7d8:	cmp	x19, #0x7
    c7dc:	b.hi	c8a4 <ZSTD_findFrameCompressedSize+0x144>  // b.pmore
    c7e0:	mov	x0, #0xffffffffffffffb8    	// #-72
    c7e4:	ldp	x19, x20, [sp, #16]
    c7e8:	ldr	x21, [sp, #32]
    c7ec:	ldp	x29, x30, [sp], #96
    c7f0:	ret
    c7f4:	add	x21, sp, #0x38
    c7f8:	mov	x2, #0x28                  	// #40
    c7fc:	mov	x0, x21
    c800:	mov	w1, #0x0                   	// #0
    c804:	bl	0 <grub_memset>
    c808:	cmp	x19, #0x4
    c80c:	b.ls	c7e0 <ZSTD_findFrameCompressedSize+0x80>  // b.plast
    c810:	mov	x0, #0xffffffffffffffff    	// #-1
    c814:	cbz	x20, c7e4 <ZSTD_findFrameCompressedSize+0x84>
    c818:	b	c7ac <ZSTD_findFrameCompressedSize+0x4c>
    c81c:	adrp	x0, 0 <FSE_versionNumber>
    c820:	ldrb	w1, [x20, #4]
    c824:	ldr	x0, [x0]
    c828:	and	x6, x1, #0x3
    c82c:	ubfx	x5, x1, #6, #2
    c830:	lsr	w3, w1, #5
    c834:	add	x4, x0, #0x448
    c838:	add	x2, x0, #0x428
    c83c:	mvn	w0, w3
    c840:	cmp	wzr, w1, lsr #6
    c844:	and	x0, x0, #0x1
    c848:	and	w3, w3, #0x1
    c84c:	ldr	x5, [x4, x5, lsl #3]
    c850:	add	x0, x0, #0x5
    c854:	ldr	x2, [x2, x6, lsl #3]
    c858:	csel	w4, w3, wzr, eq  // eq = none
    c85c:	and	x4, x4, #0xff
    c860:	add	x2, x2, x5
    c864:	add	x2, x2, x0
    c868:	add	x0, x2, x4
    c86c:	cmp	x19, x0
    c870:	b.cc	c95c <ZSTD_findFrameCompressedSize+0x1fc>  // b.lo, b.ul, b.last
    c874:	mov	w2, w0
    c878:	and	w3, w3, #0xff
    c87c:	mov	x0, #0xfffffffffffffff2    	// #-14
    c880:	tbnz	w1, #3, c7e4 <ZSTD_findFrameCompressedSize+0x84>
    c884:	cbnz	w3, c898 <ZSTD_findFrameCompressedSize+0x138>
    c888:	ldrb	w3, [x20, #5]
    c88c:	mov	x0, #0xfffffffffffffff0    	// #-16
    c890:	cmp	w3, #0xaf
    c894:	b.hi	c7e4 <ZSTD_findFrameCompressedSize+0x84>  // b.pmore
    c898:	ubfx	x1, x1, #2, #1
    c89c:	str	w1, [sp, #88]
    c8a0:	b	c8b8 <ZSTD_findFrameCompressedSize+0x158>
    c8a4:	mov	x2, #0x28                  	// #40
    c8a8:	mov	x0, x21
    c8ac:	mov	w1, #0x0                   	// #0
    c8b0:	bl	0 <grub_memset>
    c8b4:	ldr	w2, [sp, #80]
    c8b8:	mov	w2, w2
    c8bc:	mov	x6, #0xfffffffffffffffd    	// #-3
    c8c0:	sub	x3, x19, x2
    c8c4:	add	x2, x20, x2
    c8c8:	cmp	x3, #0x2
    c8cc:	b.ls	c7e0 <ZSTD_findFrameCompressedSize+0x80>  // b.plast
    c8d0:	ldrh	w4, [x2]
    c8d4:	ldrb	w1, [x2, #2]
    c8d8:	and	w0, w4, #0x1
    c8dc:	ubfx	x5, x4, #1, #2
    c8e0:	cmp	w5, #0x1
    c8e4:	add	w1, w4, w1, lsl #16
    c8e8:	b.eq	c930 <ZSTD_findFrameCompressedSize+0x1d0>  // b.none
    c8ec:	ubfx	x1, x1, #3, #22
    c8f0:	cmp	w5, #0x3
    c8f4:	b.eq	c954 <ZSTD_findFrameCompressedSize+0x1f4>  // b.none
    c8f8:	add	x4, x1, #0x3
    c8fc:	sub	x1, x6, x1
    c900:	cmp	x3, x4
    c904:	b.cc	c7e0 <ZSTD_findFrameCompressedSize+0x80>  // b.lo, b.ul, b.last
    c908:	add	x3, x3, x1
    c90c:	add	x2, x2, x4
    c910:	cbz	w0, c8c8 <ZSTD_findFrameCompressedSize+0x168>
    c914:	ldr	w0, [sp, #88]
    c918:	cbz	w0, c928 <ZSTD_findFrameCompressedSize+0x1c8>
    c91c:	cmp	x3, #0x3
    c920:	b.ls	c7e0 <ZSTD_findFrameCompressedSize+0x80>  // b.plast
    c924:	add	x2, x2, #0x4
    c928:	sub	x0, x2, x20
    c92c:	b	c7e4 <ZSTD_findFrameCompressedSize+0x84>
    c930:	mov	x4, #0x4                   	// #4
    c934:	mov	x1, #0x1                   	// #1
    c938:	b	c8fc <ZSTD_findFrameCompressedSize+0x19c>
    c93c:	ldr	w0, [x20, #4]
    c940:	ldp	x19, x20, [sp, #16]
    c944:	add	x0, x0, #0x8
    c948:	ldr	x21, [sp, #32]
    c94c:	ldp	x29, x30, [sp], #96
    c950:	ret
    c954:	mov	x0, #0xffffffffffffffec    	// #-20
    c958:	b	c7e4 <ZSTD_findFrameCompressedSize+0x84>
    c95c:	cmn	x0, #0x78
    c960:	b.ls	c7e0 <ZSTD_findFrameCompressedSize+0x80>  // b.plast
    c964:	b	c7e4 <ZSTD_findFrameCompressedSize+0x84>
	...

000000000000c970 <ZSTD_findDecompressedSize>:
    c970:	stp	x29, x30, [sp, #-112]!
    c974:	cmp	x1, #0x4
    c978:	mov	x29, sp
    c97c:	stp	x19, x20, [sp, #16]
    c980:	mov	x20, x1
    c984:	stp	x21, x22, [sp, #32]
    c988:	b.ls	cbac <ZSTD_findDecompressedSize+0x23c>  // b.plast
    c98c:	mov	w22, #0x2a50                	// #10832
    c990:	mov	x19, x0
    c994:	stp	x23, x24, [sp, #48]
    c998:	mov	w23, #0xb528                	// #46376
    c99c:	mov	x21, #0x0                   	// #0
    c9a0:	movk	w22, #0x184d, lsl #16
    c9a4:	movk	w23, #0xfd2f, lsl #16
    c9a8:	adrp	x24, 0 <FSE_versionNumber>
    c9ac:	ldr	w0, [x19]
    c9b0:	and	w0, w0, #0xfffffff0
    c9b4:	cmp	w0, w22
    c9b8:	b.ne	ca04 <ZSTD_findDecompressedSize+0x94>  // b.any
    c9bc:	cmp	x20, #0x7
    c9c0:	b.ls	cba0 <ZSTD_findDecompressedSize+0x230>  // b.plast
    c9c4:	ldr	w0, [x19, #4]
    c9c8:	add	x0, x0, #0x8
    c9cc:	cmp	x0, x20
    c9d0:	b.hi	ca60 <ZSTD_findDecompressedSize+0xf0>  // b.pmore
    c9d4:	sub	x20, x20, x0
    c9d8:	add	x19, x19, x0
    c9dc:	cmp	x20, #0x4
    c9e0:	b.hi	c9ac <ZSTD_findDecompressedSize+0x3c>  // b.pmore
    c9e4:	ldp	x23, x24, [sp, #48]
    c9e8:	cbz	x20, ca38 <ZSTD_findDecompressedSize+0xc8>
    c9ec:	mov	x21, #0xfffffffffffffffe    	// #-2
    c9f0:	mov	x0, x21
    c9f4:	ldp	x19, x20, [sp, #16]
    c9f8:	ldp	x21, x22, [sp, #32]
    c9fc:	ldp	x29, x30, [sp], #112
    ca00:	ret
    ca04:	add	x0, sp, #0x48
    ca08:	mov	x2, #0x28                  	// #40
    ca0c:	mov	w1, #0x0                   	// #0
    ca10:	bl	0 <grub_memset>
    ca14:	ldr	w0, [x19]
    ca18:	cmp	w0, w23
    ca1c:	b.eq	ca98 <ZSTD_findDecompressedSize+0x128>  // b.none
    ca20:	and	w0, w0, #0xfffffff0
    ca24:	cmp	w0, w22
    ca28:	ccmp	x20, #0x7, #0x0, eq  // eq = none
    ca2c:	b.hi	ca6c <ZSTD_findDecompressedSize+0xfc>  // b.pmore
    ca30:	ldp	x23, x24, [sp, #48]
    ca34:	mov	x21, #0xfffffffffffffffe    	// #-2
    ca38:	mov	x0, x21
    ca3c:	ldp	x19, x20, [sp, #16]
    ca40:	ldp	x21, x22, [sp, #32]
    ca44:	ldp	x29, x30, [sp], #112
    ca48:	ret
    ca4c:	ldr	x0, [x19, x0]
    ca50:	cmn	x0, #0x3
    ca54:	b.hi	cbb8 <ZSTD_findDecompressedSize+0x248>  // b.pmore
    ca58:	adds	x21, x0, x21
    ca5c:	b.cc	ca7c <ZSTD_findDecompressedSize+0x10c>  // b.lo, b.ul, b.last
    ca60:	ldp	x23, x24, [sp, #48]
    ca64:	mov	x21, #0xfffffffffffffffe    	// #-2
    ca68:	b	c9f0 <ZSTD_findDecompressedSize+0x80>
    ca6c:	add	x0, sp, #0x48
    ca70:	mov	x2, #0x28                  	// #40
    ca74:	mov	w1, #0x0                   	// #0
    ca78:	bl	0 <grub_memset>
    ca7c:	mov	x1, x20
    ca80:	mov	x0, x19
    ca84:	bl	c760 <ZSTD_findFrameCompressedSize>
    ca88:	cmn	x0, #0x78
    ca8c:	b.ls	c9d4 <ZSTD_findDecompressedSize+0x64>  // b.plast
    ca90:	ldp	x23, x24, [sp, #48]
    ca94:	b	ca64 <ZSTD_findDecompressedSize+0xf4>
    ca98:	ldrb	w2, [x19, #4]
    ca9c:	ldr	x0, [x24]
    caa0:	and	x7, x2, #0x3
    caa4:	ubfx	x6, x2, #6, #2
    caa8:	lsr	w1, w2, #5
    caac:	add	x3, x0, #0x448
    cab0:	add	x4, x0, #0x428
    cab4:	lsr	w5, w2, #6
    cab8:	mvn	w0, w1
    cabc:	cmp	w5, #0x0
    cac0:	and	x0, x0, #0x1
    cac4:	ldr	x4, [x4, x7, lsl #3]
    cac8:	and	w1, w1, #0x1
    cacc:	ldr	x7, [x3, x6, lsl #3]
    cad0:	add	x0, x0, #0x5
    cad4:	csel	w3, w1, wzr, eq  // eq = none
    cad8:	and	w6, w2, #0x3
    cadc:	add	x4, x4, x7
    cae0:	and	x3, x3, #0xff
    cae4:	add	x0, x0, x4
    cae8:	add	x0, x0, x3
    caec:	cmp	x20, x0
    caf0:	b.cc	ca30 <ZSTD_findDecompressedSize+0xc0>  // b.lo, b.ul, b.last
    caf4:	str	w0, [sp, #96]
    caf8:	and	w1, w1, #0xff
    cafc:	tbnz	w2, #3, ca30 <ZSTD_findDecompressedSize+0xc0>
    cb00:	cbz	w1, cb50 <ZSTD_findDecompressedSize+0x1e0>
    cb04:	mov	x3, #0x9                   	// #9
    cb08:	mov	x4, #0x7                   	// #7
    cb0c:	mov	x2, #0x6                   	// #6
    cb10:	mov	x0, #0x5                   	// #5
    cb14:	cmp	w6, #0x2
    cb18:	b.eq	cb8c <ZSTD_findDecompressedSize+0x21c>  // b.none
    cb1c:	cmp	w6, #0x3
    cb20:	b.eq	cb70 <ZSTD_findDecompressedSize+0x200>  // b.none
    cb24:	cmp	w6, #0x1
    cb28:	csel	x0, x0, x2, ne  // ne = any
    cb2c:	cmp	w5, #0x2
    cb30:	b.eq	cb84 <ZSTD_findDecompressedSize+0x214>  // b.none
    cb34:	cmp	w5, #0x3
    cb38:	b.eq	ca4c <ZSTD_findDecompressedSize+0xdc>  // b.none
    cb3c:	cmp	w5, #0x1
    cb40:	b.eq	cb94 <ZSTD_findDecompressedSize+0x224>  // b.none
    cb44:	cbz	w1, cb78 <ZSTD_findDecompressedSize+0x208>
    cb48:	ldrb	w0, [x19, x0]
    cb4c:	b	ca58 <ZSTD_findDecompressedSize+0xe8>
    cb50:	ldrb	w0, [x19, #5]
    cb54:	cmp	w0, #0xaf
    cb58:	b.hi	ca30 <ZSTD_findDecompressedSize+0xc0>  // b.pmore
    cb5c:	mov	x3, #0xa                   	// #10
    cb60:	mov	x4, #0x8                   	// #8
    cb64:	mov	x2, #0x7                   	// #7
    cb68:	mov	x0, #0x6                   	// #6
    cb6c:	b	cb14 <ZSTD_findDecompressedSize+0x1a4>
    cb70:	mov	x0, x3
    cb74:	b	cb2c <ZSTD_findDecompressedSize+0x1bc>
    cb78:	mov	x21, #0xffffffffffffffff    	// #-1
    cb7c:	ldp	x23, x24, [sp, #48]
    cb80:	b	ca38 <ZSTD_findDecompressedSize+0xc8>
    cb84:	ldr	w0, [x19, x0]
    cb88:	b	ca58 <ZSTD_findDecompressedSize+0xe8>
    cb8c:	mov	x0, x4
    cb90:	b	cb2c <ZSTD_findDecompressedSize+0x1bc>
    cb94:	ldrh	w0, [x19, x0]
    cb98:	add	x0, x0, #0x100
    cb9c:	b	ca58 <ZSTD_findDecompressedSize+0xe8>
    cba0:	mov	x21, #0xffffffffffffffb8    	// #-72
    cba4:	ldp	x23, x24, [sp, #48]
    cba8:	b	ca38 <ZSTD_findDecompressedSize+0xc8>
    cbac:	mov	x21, #0x0                   	// #0
    cbb0:	cbz	x20, ca38 <ZSTD_findDecompressedSize+0xc8>
    cbb4:	b	c9ec <ZSTD_findDecompressedSize+0x7c>
    cbb8:	mov	x21, x0
    cbbc:	ldp	x23, x24, [sp, #48]
    cbc0:	b	ca38 <ZSTD_findDecompressedSize+0xc8>
    cbc4:	nop
	...

000000000000cbd0 <ZSTD_nextSrcSizeToDecompress>:
    cbd0:	ldr	x0, [x0, #28776]
    cbd4:	ret

000000000000cbd8 <ZSTD_nextInputType>:
    cbd8:	add	x0, x0, #0x4, lsl #12
    cbdc:	ldr	w0, [x0, #12452]
    cbe0:	sub	w0, w0, #0x2
    cbe4:	cmp	w0, #0x5
    cbe8:	b.hi	cc00 <ZSTD_nextInputType+0x28>  // b.pmore
    cbec:	adrp	x1, 0 <FSE_versionNumber>
    cbf0:	ldr	x1, [x1]
    cbf4:	add	x1, x1, #0x980
    cbf8:	ldr	w0, [x1, w0, uxtw #2]
    cbfc:	ret
    cc00:	mov	w0, #0x0                   	// #0
    cc04:	ret
	...

000000000000cc10 <ZSTD_decompressContinue>:
    cc10:	stp	x29, x30, [sp, #-64]!
    cc14:	mov	x29, sp
    cc18:	stp	x19, x20, [sp, #16]
    cc1c:	mov	x19, x0
    cc20:	ldr	x0, [x0, #28776]
    cc24:	stp	x21, x22, [sp, #32]
    cc28:	cmp	x0, x4
    cc2c:	b.ne	ce5c <ZSTD_decompressContinue+0x24c>  // b.any
    cc30:	mov	x20, x1
    cc34:	cbz	x2, cc60 <ZSTD_decompressContinue+0x50>
    cc38:	ldr	x1, [x19, #28744]
    cc3c:	cmp	x20, x1
    cc40:	b.eq	cc60 <ZSTD_decompressContinue+0x50>  // b.none
    cc44:	ldr	x0, [x19, #28752]
    cc48:	str	x20, [x19, #28744]
    cc4c:	str	x20, [x19, #28752]
    cc50:	sub	x0, x1, x0
    cc54:	str	x1, [x19, #28768]
    cc58:	sub	x0, x20, x0
    cc5c:	str	x0, [x19, #28760]
    cc60:	add	x22, x19, #0x4, lsl #12
    cc64:	ldr	w5, [x22, #12452]
    cc68:	cmp	w5, #0x4
    cc6c:	b.hi	ccf8 <ZSTD_decompressContinue+0xe8>  // b.pmore
    cc70:	cmp	w5, #0x2
    cc74:	b.hi	cf08 <ZSTD_decompressContinue+0x2f8>  // b.pmore
    cc78:	cmp	w5, #0x1
    cc7c:	b.eq	ce14 <ZSTD_decompressContinue+0x204>  // b.none
    cc80:	cmp	w5, #0x2
    cc84:	b.ne	cd58 <ZSTD_decompressContinue+0x148>  // b.any
    cc88:	ldrh	w1, [x3]
    cc8c:	ldrb	w0, [x3, #2]
    cc90:	add	w0, w1, w0, lsl #16
    cc94:	and	w2, w0, #0x1
    cc98:	ubfx	x1, x0, #1, #2
    cc9c:	lsr	w0, w0, #3
    cca0:	cmp	w1, #0x1
    cca4:	b.eq	cfe8 <ZSTD_decompressContinue+0x3d8>  // b.none
    cca8:	cmp	w1, #0x3
    ccac:	b.eq	cf20 <ZSTD_decompressContinue+0x310>  // b.none
    ccb0:	mov	w3, w0
    ccb4:	str	x3, [x19, #28776]
    ccb8:	str	w1, [x22, #12448]
    ccbc:	str	x3, [x19, #28992]
    ccc0:	cbnz	w0, cff8 <ZSTD_decompressContinue+0x3e8>
    ccc4:	cbz	w2, cef0 <ZSTD_decompressContinue+0x2e0>
    ccc8:	ldr	w0, [x22, #12432]
    cccc:	cbz	w0, cd08 <ZSTD_decompressContinue+0xf8>
    ccd0:	mov	x0, #0x4                   	// #4
    ccd4:	str	x0, [x19, #28776]
    ccd8:	mov	x21, #0x0                   	// #0
    ccdc:	mov	w0, #0x5                   	// #5
    cce0:	str	w0, [x22, #12452]
    cce4:	mov	x0, x21
    cce8:	ldp	x19, x20, [sp, #16]
    ccec:	ldp	x21, x22, [sp, #32]
    ccf0:	ldp	x29, x30, [sp], #64
    ccf4:	ret
    ccf8:	cmp	w5, #0x6
    ccfc:	b.eq	ce8c <ZSTD_decompressContinue+0x27c>  // b.none
    cd00:	cmp	w5, #0x7
    cd04:	b.ne	cd28 <ZSTD_decompressContinue+0x118>  // b.any
    cd08:	str	xzr, [x19, #28776]
    cd0c:	mov	x21, #0x0                   	// #0
    cd10:	str	wzr, [x22, #12452]
    cd14:	mov	x0, x21
    cd18:	ldp	x19, x20, [sp, #16]
    cd1c:	ldp	x21, x22, [sp, #32]
    cd20:	ldp	x29, x30, [sp], #64
    cd24:	ret
    cd28:	cmp	w5, #0x5
    cd2c:	b.ne	ce74 <ZSTD_decompressContinue+0x264>  // b.any
    cd30:	mov	x0, #0x70b0                	// #28848
    cd34:	add	x0, x19, x0
    cd38:	str	x3, [sp, #56]
    cd3c:	bl	80b8 <XXH64_digest>
    cd40:	ldr	x3, [sp, #56]
    cd44:	mov	x21, #0xffffffffffffffea    	// #-22
    cd48:	ldr	w1, [x3]
    cd4c:	cmp	w1, w0
    cd50:	b.eq	cd08 <ZSTD_decompressContinue+0xf8>  // b.none
    cd54:	b	cce4 <ZSTD_decompressContinue+0xd4>
    cd58:	cbnz	w5, ce74 <ZSTD_decompressContinue+0x264>
    cd5c:	ldr	w0, [x22, #12560]
    cd60:	cbz	w0, cf28 <ZSTD_decompressContinue+0x318>
    cd64:	cmp	w0, #0x1
    cd68:	mov	x1, #0x4                   	// #4
    cd6c:	mov	x0, #0x5                   	// #5
    cd70:	csel	x1, x1, xzr, ne  // ne = any
    cd74:	csinc	x6, x0, xzr, ne  // ne = any
    cd78:	cmp	x4, x6
    cd7c:	b.cc	d054 <ZSTD_decompressContinue+0x444>  // b.lo, b.ul, b.last
    cd80:	adrp	x0, 0 <FSE_versionNumber>
    cd84:	ldrb	w2, [x3, x1]
    cd88:	ldr	x1, [x0]
    cd8c:	and	x9, x2, #0x3
    cd90:	lsr	w0, w2, #5
    cd94:	ubfx	x7, x2, #6, #2
    cd98:	add	x8, x1, #0x428
    cd9c:	add	x5, x1, #0x448
    cda0:	mvn	w1, w0
    cda4:	cmp	wzr, w2, lsr #6
    cda8:	and	x1, x1, #0x1
    cdac:	and	w2, w0, #0x1
    cdb0:	add	x0, x1, x6
    cdb4:	csel	w2, w2, wzr, eq  // eq = none
    cdb8:	ldr	x21, [x8, x9, lsl #3]
    cdbc:	and	x2, x2, #0xff
    cdc0:	ldr	x1, [x5, x7, lsl #3]
    cdc4:	add	x21, x21, x1
    cdc8:	add	x21, x21, x0
    cdcc:	add	x21, x21, x2
    cdd0:	str	x21, [x19, #28936]
    cdd4:	cmn	x21, #0x78
    cdd8:	b.hi	cce4 <ZSTD_decompressContinue+0xd4>  // b.pmore
    cddc:	add	x0, x19, #0x27, lsl #12
    cde0:	mov	x1, x3
    cde4:	mov	x2, x4
    cde8:	add	x0, x0, #0x1e0
    cdec:	str	x4, [sp, #56]
    cdf0:	bl	0 <grub_memmove>
    cdf4:	ldr	x4, [sp, #56]
    cdf8:	mov	w1, #0x1                   	// #1
    cdfc:	ldr	x0, [x19, #28936]
    ce00:	mov	x21, #0x0                   	// #0
    ce04:	sub	x4, x0, x4
    ce08:	str	x4, [x19, #28776]
    ce0c:	str	w1, [x22, #12452]
    ce10:	b	cce4 <ZSTD_decompressContinue+0xd4>
    ce14:	ldr	x0, [x19, #28936]
    ce18:	add	x20, x19, #0x27, lsl #12
    ce1c:	add	x20, x20, #0x1e0
    ce20:	mov	x1, x3
    ce24:	sub	x0, x0, x4
    ce28:	mov	x2, x4
    ce2c:	add	x0, x20, x0
    ce30:	bl	0 <grub_memmove>
    ce34:	ldr	w3, [x22, #12560]
    ce38:	mov	x5, #0x7070                	// #28784
    ce3c:	ldr	x2, [x19, #28936]
    ce40:	mov	x1, x20
    ce44:	add	x0, x19, x5
    ce48:	bl	acf0 <ZSTD_getFrameHeader_advanced>
    ce4c:	mov	x21, x0
    ce50:	cmn	x0, #0x78
    ce54:	b.hi	cce4 <ZSTD_decompressContinue+0xd4>  // b.pmore
    ce58:	cbz	x0, cec0 <ZSTD_decompressContinue+0x2b0>
    ce5c:	mov	x21, #0xffffffffffffffb8    	// #-72
    ce60:	mov	x0, x21
    ce64:	ldp	x19, x20, [sp, #16]
    ce68:	ldp	x21, x22, [sp, #32]
    ce6c:	ldp	x29, x30, [sp], #64
    ce70:	ret
    ce74:	mov	x21, #0xffffffffffffffff    	// #-1
    ce78:	mov	x0, x21
    ce7c:	ldp	x19, x20, [sp, #16]
    ce80:	ldp	x21, x22, [sp, #32]
    ce84:	ldp	x29, x30, [sp], #64
    ce88:	ret
    ce8c:	sub	x0, x19, x4
    ce90:	mov	x1, x3
    ce94:	add	x0, x0, #0x27, lsl #12
    ce98:	mov	x2, x4
    ce9c:	add	x0, x0, #0x1e8
    cea0:	bl	0 <grub_memmove>
    cea4:	add	x1, x19, #0x24, lsl #12
    cea8:	mov	w0, #0x7                   	// #7
    ceac:	mov	x21, #0x0                   	// #0
    ceb0:	ldr	w1, [x1, #12772]
    ceb4:	str	x1, [x19, #28776]
    ceb8:	str	w0, [x22, #12452]
    cebc:	b	cce4 <ZSTD_decompressContinue+0xd4>
    cec0:	ldr	w0, [x22, #12428]
    cec4:	cbz	w0, ced8 <ZSTD_decompressContinue+0x2c8>
    cec8:	ldr	w1, [x22, #12648]
    cecc:	mov	x21, #0xffffffffffffffe0    	// #-32
    ced0:	cmp	w0, w1
    ced4:	b.ne	cce4 <ZSTD_decompressContinue+0xd4>  // b.any
    ced8:	ldr	w0, [x22, #12432]
    cedc:	cbz	w0, cef0 <ZSTD_decompressContinue+0x2e0>
    cee0:	mov	x4, #0x70b0                	// #28848
    cee4:	mov	x1, #0x0                   	// #0
    cee8:	add	x0, x19, x4
    ceec:	bl	7900 <XXH64_reset>
    cef0:	mov	x0, #0x3                   	// #3
    cef4:	str	x0, [x19, #28776]
    cef8:	mov	x21, #0x0                   	// #0
    cefc:	mov	w0, #0x2                   	// #2
    cf00:	str	w0, [x22, #12452]
    cf04:	b	cce4 <ZSTD_decompressContinue+0xd4>
    cf08:	ldr	w0, [x22, #12448]
    cf0c:	cmp	w0, #0x1
    cf10:	b.eq	d008 <ZSTD_decompressContinue+0x3f8>  // b.none
    cf14:	cmp	w0, #0x2
    cf18:	b.eq	d030 <ZSTD_decompressContinue+0x420>  // b.none
    cf1c:	cbz	w0, cf80 <ZSTD_decompressContinue+0x370>
    cf20:	mov	x21, #0xffffffffffffffec    	// #-20
    cf24:	b	cce4 <ZSTD_decompressContinue+0xd4>
    cf28:	ldr	w0, [x3]
    cf2c:	mov	w2, #0x2a50                	// #10832
    cf30:	movk	w2, #0x184d, lsl #16
    cf34:	mov	x1, #0x4                   	// #4
    cf38:	and	w0, w0, #0xfffffff0
    cf3c:	mov	x6, #0x5                   	// #5
    cf40:	cmp	w0, w2
    cf44:	b.ne	cd78 <ZSTD_decompressContinue+0x168>  // b.any
    cf48:	add	x0, x19, #0x27, lsl #12
    cf4c:	mov	x2, x4
    cf50:	mov	x1, x3
    cf54:	add	x0, x0, #0x1e0
    cf58:	str	x4, [sp, #56]
    cf5c:	bl	0 <grub_memmove>
    cf60:	ldr	x4, [sp, #56]
    cf64:	mov	x0, #0x8                   	// #8
    cf68:	mov	x21, #0x0                   	// #0
    cf6c:	sub	x0, x0, x4
    cf70:	str	x0, [x19, #28776]
    cf74:	mov	w0, #0x6                   	// #6
    cf78:	str	w0, [x22, #12452]
    cf7c:	b	cce4 <ZSTD_decompressContinue+0xd4>
    cf80:	cmp	x20, #0x0
    cf84:	mov	x21, #0xffffffffffffffba    	// #-70
    cf88:	ccmp	x4, x2, #0x2, ne  // ne = any
    cf8c:	b.hi	cce4 <ZSTD_decompressContinue+0xd4>  // b.pmore
    cf90:	mov	x1, x3
    cf94:	mov	x2, x4
    cf98:	mov	x21, x4
    cf9c:	mov	x0, x20
    cfa0:	bl	0 <grub_memmove>
    cfa4:	cmn	x21, #0x78
    cfa8:	b.hi	cce4 <ZSTD_decompressContinue+0xd4>  // b.pmore
    cfac:	ldr	x0, [x19, #28824]
    cfb0:	ldr	w1, [x22, #12432]
    cfb4:	add	x0, x0, x21
    cfb8:	str	x0, [x19, #28824]
    cfbc:	cbnz	w1, d098 <ZSTD_decompressContinue+0x488>
    cfc0:	ldr	w0, [x22, #12452]
    cfc4:	cmp	w0, #0x4
    cfc8:	b.eq	d064 <ZSTD_decompressContinue+0x454>  // b.none
    cfcc:	mov	w0, #0x2                   	// #2
    cfd0:	str	w0, [x22, #12452]
    cfd4:	add	x20, x20, x21
    cfd8:	mov	x0, #0x3                   	// #3
    cfdc:	str	x20, [x19, #28744]
    cfe0:	str	x0, [x19, #28776]
    cfe4:	b	cce4 <ZSTD_decompressContinue+0xd4>
    cfe8:	mov	x1, #0x1                   	// #1
    cfec:	str	x1, [x19, #28776]
    cff0:	str	w1, [x22, #12448]
    cff4:	str	x0, [x19, #28992]
    cff8:	add	w2, w2, #0x3
    cffc:	mov	x21, #0x0                   	// #0
    d000:	str	w2, [x22, #12452]
    d004:	b	cce4 <ZSTD_decompressContinue+0xd4>
    d008:	cmp	x4, #0x1
    d00c:	b.ne	ce5c <ZSTD_decompressContinue+0x24c>  // b.any
    d010:	ldr	x21, [x19, #28992]
    d014:	cmp	x2, x21
    d018:	b.cc	d0bc <ZSTD_decompressContinue+0x4ac>  // b.lo, b.ul, b.last
    d01c:	ldrb	w1, [x3]
    d020:	mov	x2, x21
    d024:	mov	x0, x20
    d028:	bl	0 <grub_memset>
    d02c:	b	cfa4 <ZSTD_decompressContinue+0x394>
    d030:	mov	x0, #0x1ffff               	// #131071
    d034:	cmp	x4, x0
    d038:	b.hi	ce5c <ZSTD_decompressContinue+0x24c>  // b.pmore
    d03c:	mov	x1, x20
    d040:	mov	x0, x19
    d044:	mov	w5, #0x1                   	// #1
    d048:	bl	bca0 <ZSTD_decodeSeqHeaders+0x350>
    d04c:	mov	x21, x0
    d050:	b	cfa4 <ZSTD_decompressContinue+0x394>
    d054:	mov	x0, #0xffffffffffffffb8    	// #-72
    d058:	mov	x21, x0
    d05c:	str	x0, [x19, #28936]
    d060:	b	cce4 <ZSTD_decompressContinue+0xd4>
    d064:	ldr	x0, [x19, #28784]
    d068:	cmn	x0, #0x1
    d06c:	b.eq	d07c <ZSTD_decompressContinue+0x46c>  // b.none
    d070:	ldr	x1, [x19, #28824]
    d074:	cmp	x0, x1
    d078:	b.ne	cf20 <ZSTD_decompressContinue+0x310>  // b.any
    d07c:	ldr	w0, [x22, #12432]
    d080:	cbz	w0, d0b0 <ZSTD_decompressContinue+0x4a0>
    d084:	mov	x0, #0x4                   	// #4
    d088:	str	x0, [x19, #28776]
    d08c:	mov	w0, #0x5                   	// #5
    d090:	str	w0, [x22, #12452]
    d094:	b	cce4 <ZSTD_decompressContinue+0xd4>
    d098:	mov	x3, #0x70b0                	// #28848
    d09c:	mov	x2, x21
    d0a0:	mov	x1, x20
    d0a4:	add	x0, x19, x3
    d0a8:	bl	7de0 <XXH64_update>
    d0ac:	b	cfc0 <ZSTD_decompressContinue+0x3b0>
    d0b0:	str	xzr, [x19, #28776]
    d0b4:	str	wzr, [x22, #12452]
    d0b8:	b	cce4 <ZSTD_decompressContinue+0xd4>
    d0bc:	mov	x21, #0xffffffffffffffba    	// #-70
    d0c0:	b	cce4 <ZSTD_decompressContinue+0xd4>
    d0c4:	nop
	...

000000000000d0d0 <ZSTD_decompressBegin>:
    d0d0:	stp	x29, x30, [sp, #-32]!
    d0d4:	add	x3, x0, #0x4, lsl #12
    d0d8:	mov	w6, #0xc                   	// #12
    d0dc:	mov	x29, sp
    d0e0:	ldr	w5, [x3, #12560]
    d0e4:	movk	w6, #0xc00, lsl #16
    d0e8:	str	x19, [sp, #16]
    d0ec:	mov	x19, x0
    d0f0:	cmp	w5, #0x1
    d0f4:	mov	x4, #0x5                   	// #5
    d0f8:	adrp	x1, 0 <FSE_versionNumber>
    d0fc:	csinc	x4, x4, xzr, ne  // ne = any
    d100:	str	w6, [x19, #10296]
    d104:	mov	x2, #0xc                   	// #12
    d108:	str	xzr, [x19, #28744]
    d10c:	mov	x0, #0x683c                	// #26684
    d110:	str	xzr, [x19, #28752]
    d114:	add	x0, x19, x0
    d118:	str	xzr, [x19, #28760]
    d11c:	str	xzr, [x19, #28768]
    d120:	str	x4, [x19, #28776]
    d124:	str	xzr, [x19, #28824]
    d128:	str	wzr, [x3, #12452]
    d12c:	ldr	x1, [x1]
    d130:	str	xzr, [x19, #28840]
    d134:	str	wzr, [x3, #12648]
    d138:	add	x1, x1, #0x998
    d13c:	bl	0 <grub_memmove>
    d140:	add	x4, x19, #0x20
    d144:	mov	x7, #0x1830                	// #6192
    d148:	mov	x8, #0x1028                	// #4136
    d14c:	add	x3, x19, x7
    d150:	add	x2, x19, x8
    d154:	mov	x9, #0x2838                	// #10296
    d158:	add	x1, x19, x9
    d15c:	stp	x4, x3, [x19]
    d160:	mov	x0, #0x0                   	// #0
    d164:	stp	x2, x1, [x19, #16]
    d168:	ldr	x19, [sp, #16]
    d16c:	ldp	x29, x30, [sp], #32
    d170:	ret
    d174:	nop
	...

000000000000d180 <ZSTD_decompressBegin_usingDict>:
    d180:	stp	x29, x30, [sp, #-48]!
    d184:	adrp	x4, 0 <FSE_versionNumber>
    d188:	mov	x3, #0x5                   	// #5
    d18c:	mov	x29, sp
    d190:	stp	x19, x20, [sp, #16]
    d194:	mov	x19, x0
    d198:	mov	x20, x1
    d19c:	stp	x21, x22, [sp, #32]
    d1a0:	add	x22, x19, #0x4, lsl #12
    d1a4:	mov	w0, #0xc                   	// #12
    d1a8:	movk	w0, #0xc00, lsl #16
    d1ac:	mov	x8, #0x683c                	// #26684
    d1b0:	ldr	w1, [x22, #12560]
    d1b4:	mov	x21, x2
    d1b8:	str	w0, [x19, #10296]
    d1bc:	mov	x2, #0xc                   	// #12
    d1c0:	cmp	w1, #0x1
    d1c4:	str	xzr, [x19, #28744]
    d1c8:	csinc	x3, x3, xzr, ne  // ne = any
    d1cc:	str	xzr, [x19, #28752]
    d1d0:	str	xzr, [x19, #28760]
    d1d4:	add	x0, x19, x8
    d1d8:	str	xzr, [x19, #28768]
    d1dc:	str	x3, [x19, #28776]
    d1e0:	str	xzr, [x19, #28824]
    d1e4:	ldr	x4, [x4]
    d1e8:	str	wzr, [x22, #12452]
    d1ec:	str	xzr, [x19, #28840]
    d1f0:	str	wzr, [x22, #12648]
    d1f4:	add	x1, x4, #0x998
    d1f8:	bl	0 <grub_memmove>
    d1fc:	add	x0, x19, #0x20
    d200:	mov	x9, #0x1830                	// #6192
    d204:	mov	x10, #0x1028                	// #4136
    d208:	add	x3, x19, x9
    d20c:	add	x2, x19, x10
    d210:	mov	x11, #0x2838                	// #10296
    d214:	add	x1, x19, x11
    d218:	stp	x0, x3, [x19]
    d21c:	cmp	x20, #0x0
    d220:	stp	x2, x1, [x19, #16]
    d224:	ccmp	x21, #0x0, #0x4, ne  // ne = any
    d228:	b.ne	d240 <ZSTD_decompressBegin_usingDict+0xc0>  // b.any
    d22c:	mov	x0, #0x0                   	// #0
    d230:	ldp	x19, x20, [sp, #16]
    d234:	ldp	x21, x22, [sp, #32]
    d238:	ldp	x29, x30, [sp], #48
    d23c:	ret
    d240:	cmp	x21, #0x7
    d244:	b.ls	d25c <ZSTD_decompressBegin_usingDict+0xdc>  // b.plast
    d248:	ldr	w2, [x20]
    d24c:	mov	w1, #0xa437                	// #42039
    d250:	movk	w1, #0xec30, lsl #16
    d254:	cmp	w2, w1
    d258:	b.eq	d294 <ZSTD_decompressBegin_usingDict+0x114>  // b.none
    d25c:	ldr	x2, [x19, #28744]
    d260:	add	x21, x20, x21
    d264:	ldr	x1, [x19, #28752]
    d268:	str	x21, [x19, #28744]
    d26c:	str	x20, [x19, #28752]
    d270:	mov	x0, #0x0                   	// #0
    d274:	sub	x1, x2, x1
    d278:	str	x2, [x19, #28768]
    d27c:	sub	x20, x20, x1
    d280:	str	x20, [x19, #28760]
    d284:	ldp	x19, x20, [sp, #16]
    d288:	ldp	x21, x22, [sp, #32]
    d28c:	ldp	x29, x30, [sp], #48
    d290:	ret
    d294:	ldr	w1, [x20, #4]
    d298:	mov	x2, x21
    d29c:	str	w1, [x22, #12648]
    d2a0:	mov	x1, x20
    d2a4:	bl	8840 <ZSTD_free+0x398>
    d2a8:	mov	x1, x0
    d2ac:	cmn	x1, #0x78
    d2b0:	mov	x0, #0xffffffffffffffe2    	// #-30
    d2b4:	b.hi	d230 <ZSTD_decompressBegin_usingDict+0xb0>  // b.pmore
    d2b8:	ldr	x3, [x19, #28744]
    d2bc:	add	x1, x20, x1
    d2c0:	ldr	x2, [x19, #28752]
    d2c4:	add	x20, x20, x21
    d2c8:	mov	x4, #0x100000001           	// #4294967297
    d2cc:	mov	x0, #0x0                   	// #0
    d2d0:	sub	x2, x3, x2
    d2d4:	str	x20, [x19, #28744]
    d2d8:	sub	x2, x1, x2
    d2dc:	str	x1, [x19, #28752]
    d2e0:	str	x2, [x19, #28760]
    d2e4:	str	x3, [x19, #28768]
    d2e8:	str	x4, [x19, #28840]
    d2ec:	b	d230 <ZSTD_decompressBegin_usingDict+0xb0>
	...

000000000000d2f8 <ZSTD_decompressBegin_usingDDict>:
    d2f8:	stp	x29, x30, [sp, #-48]!
    d2fc:	mov	x29, sp
    d300:	stp	x19, x20, [sp, #16]
    d304:	mov	x19, x0
    d308:	mov	x20, x1
    d30c:	str	x21, [sp, #32]
    d310:	add	x21, x0, #0x4, lsl #12
    d314:	cbz	x1, d330 <ZSTD_decompressBegin_usingDDict+0x38>
    d318:	ldr	x1, [x0, #28768]
    d31c:	ldp	x0, x2, [x20, #8]
    d320:	add	x0, x0, x2
    d324:	cmp	x1, x0
    d328:	cset	w0, ne  // ne = any
    d32c:	str	w0, [x21, #12652]
    d330:	ldr	w2, [x21, #12560]
    d334:	mov	w0, #0xc                   	// #12
    d338:	adrp	x3, 0 <FSE_versionNumber>
    d33c:	movk	w0, #0xc00, lsl #16
    d340:	cmp	w2, #0x1
    d344:	mov	x1, #0x5                   	// #5
    d348:	csinc	x1, x1, xzr, ne  // ne = any
    d34c:	str	w0, [x19, #10296]
    d350:	str	xzr, [x19, #28744]
    d354:	mov	x8, #0x683c                	// #26684
    d358:	str	xzr, [x19, #28752]
    d35c:	mov	x2, #0xc                   	// #12
    d360:	str	xzr, [x19, #28760]
    d364:	add	x0, x19, x8
    d368:	str	xzr, [x19, #28768]
    d36c:	str	x1, [x19, #28776]
    d370:	str	xzr, [x19, #28824]
    d374:	str	wzr, [x21, #12452]
    d378:	ldr	x1, [x3]
    d37c:	str	xzr, [x19, #28840]
    d380:	str	wzr, [x21, #12648]
    d384:	add	x1, x1, #0x998
    d388:	bl	0 <grub_memmove>
    d38c:	add	x3, x19, #0x20
    d390:	mov	x9, #0x1830                	// #6192
    d394:	mov	x10, #0x1028                	// #4136
    d398:	add	x2, x19, x9
    d39c:	add	x1, x19, x10
    d3a0:	mov	x11, #0x2838                	// #10296
    d3a4:	add	x0, x19, x11
    d3a8:	stp	x3, x2, [x19]
    d3ac:	stp	x1, x0, [x19, #16]
    d3b0:	cbz	x20, d424 <ZSTD_decompressBegin_usingDDict+0x12c>
    d3b4:	ldp	x2, x0, [x20, #8]
    d3b8:	add	x1, x20, #0x4, lsl #12
    d3bc:	ldr	w4, [x1, #10304]
    d3c0:	ldr	w3, [x1, #10308]
    d3c4:	str	w4, [x21, #12648]
    d3c8:	add	x0, x2, x0
    d3cc:	str	x0, [x19, #28744]
    d3d0:	str	x2, [x19, #28752]
    d3d4:	str	x2, [x19, #28760]
    d3d8:	str	x0, [x19, #28768]
    d3dc:	cbz	w3, d438 <ZSTD_decompressBegin_usingDDict+0x140>
    d3e0:	add	x3, x20, #0x18
    d3e4:	mov	x0, #0x100000001           	// #4294967297
    d3e8:	str	x0, [x19, #28840]
    d3ec:	mov	x2, #0x1828                	// #6184
    d3f0:	add	x2, x20, x2
    d3f4:	stp	x3, x2, [x19]
    d3f8:	mov	x3, #0x1020                	// #4128
    d3fc:	add	x0, x20, x3
    d400:	ldr	w2, [x1, #10296]
    d404:	ldr	w3, [x1, #10292]
    d408:	mov	x4, #0x2830                	// #10288
    d40c:	add	x20, x20, x4
    d410:	stp	x0, x20, [x19, #16]
    d414:	ldr	w0, [x1, #10300]
    d418:	str	w3, [x21, #10300]
    d41c:	str	w2, [x21, #10304]
    d420:	str	w0, [x21, #10308]
    d424:	mov	x0, #0x0                   	// #0
    d428:	ldp	x19, x20, [sp, #16]
    d42c:	ldr	x21, [sp, #32]
    d430:	ldp	x29, x30, [sp], #48
    d434:	ret
    d438:	str	xzr, [x19, #28840]
    d43c:	mov	x0, #0x0                   	// #0
    d440:	ldp	x19, x20, [sp, #16]
    d444:	ldr	x21, [sp, #32]
    d448:	ldp	x29, x30, [sp], #48
    d44c:	ret
	...
    d458:	stp	x29, x30, [sp, #-192]!
    d45c:	mov	x29, sp
    d460:	stp	x19, x20, [sp, #16]
    d464:	mov	x20, x2
    d468:	mov	x19, x7
    d46c:	stp	x23, x24, [sp, #48]
    d470:	mov	x23, x3
    d474:	stp	x25, x26, [sp, #64]
    d478:	mov	x26, x0
    d47c:	mov	x25, x4
    d480:	stp	x27, x28, [sp, #80]
    d484:	stp	x5, x6, [sp, #104]
    d488:	str	x1, [sp, #128]
    d48c:	cbz	x7, d4a0 <ZSTD_decompressBegin_usingDDict+0x1a8>
    d490:	ldr	x0, [x7, #8]
    d494:	str	x0, [sp, #104]
    d498:	ldr	x0, [x7, #16]
    d49c:	str	x0, [sp, #112]
    d4a0:	cmp	x25, #0x4
    d4a4:	b.ls	d90c <ZSTD_decompressBegin_usingDDict+0x614>  // b.plast
    d4a8:	ldr	x28, [sp, #128]
    d4ac:	mov	x3, #0x7070                	// #28784
    d4b0:	add	x0, x26, x3
    d4b4:	stp	x21, x22, [sp, #32]
    d4b8:	mov	w21, #0x2a50                	// #10832
    d4bc:	mov	x4, #0x70b0                	// #28848
    d4c0:	mov	w22, #0x0                   	// #0
    d4c4:	movk	w21, #0x184d, lsl #16
    d4c8:	str	x0, [sp, #120]
    d4cc:	add	x0, x26, x4
    d4d0:	str	x0, [sp, #144]
    d4d4:	nop
    d4d8:	ldr	w0, [x23]
    d4dc:	and	w0, w0, #0xfffffff0
    d4e0:	cmp	w0, w21
    d4e4:	b.eq	d6e8 <ZSTD_decompressBegin_usingDDict+0x3f0>  // b.none
    d4e8:	cbz	x19, d70c <ZSTD_decompressBegin_usingDDict+0x414>
    d4ec:	mov	x1, x19
    d4f0:	mov	x0, x26
    d4f4:	bl	d2f8 <ZSTD_decompressBegin_usingDDict>
    d4f8:	mov	x27, x0
    d4fc:	cmn	x0, #0x78
    d500:	b.hi	d724 <ZSTD_decompressBegin_usingDDict+0x42c>  // b.pmore
    d504:	ldr	x1, [x26, #28744]
    d508:	cmp	x1, x28
    d50c:	b.eq	d52c <ZSTD_decompressBegin_usingDDict+0x234>  // b.none
    d510:	ldr	x0, [x26, #28752]
    d514:	str	x28, [x26, #28744]
    d518:	str	x28, [x26, #28752]
    d51c:	sub	x0, x1, x0
    d520:	str	x1, [x26, #28768]
    d524:	sub	x0, x28, x0
    d528:	str	x0, [x26, #28760]
    d52c:	cmp	x25, #0x8
    d530:	b.ls	d6d0 <ZSTD_decompressBegin_usingDDict+0x3d8>  // b.plast
    d534:	adrp	x0, 0 <FSE_versionNumber>
    d538:	ldrb	w2, [x23, #4]
    d53c:	ldr	x1, [x0]
    d540:	ubfx	x4, x2, #6, #2
    d544:	and	x7, x2, #0x3
    d548:	lsr	w0, w2, #5
    d54c:	add	x5, x1, #0x428
    d550:	add	x3, x1, #0x448
    d554:	cmp	wzr, w2, lsr #6
    d558:	mvn	w1, w0
    d55c:	and	x1, x1, #0x1
    d560:	and	w0, w0, #0x1
    d564:	ldr	x2, [x5, x7, lsl #3]
    d568:	csel	w0, w0, wzr, eq  // eq = none
    d56c:	ldr	x3, [x3, x4, lsl #3]
    d570:	add	x1, x1, #0x5
    d574:	and	x0, x0, #0xff
    d578:	add	x2, x2, x3
    d57c:	add	x2, x2, x1
    d580:	add	x27, x2, x0
    d584:	cmn	x27, #0x78
    d588:	b.hi	d678 <ZSTD_decompressBegin_usingDDict+0x380>  // b.pmore
    d58c:	add	x0, x27, #0x3
    d590:	cmp	x25, x0
    d594:	b.cc	d6d0 <ZSTD_decompressBegin_usingDDict+0x3d8>  // b.lo, b.ul, b.last
    d598:	add	x24, x26, #0x4, lsl #12
    d59c:	mov	x2, x27
    d5a0:	ldr	x0, [sp, #120]
    d5a4:	mov	x1, x23
    d5a8:	ldr	w3, [x24, #12560]
    d5ac:	bl	acf0 <ZSTD_getFrameHeader_advanced>
    d5b0:	cmn	x0, #0x78
    d5b4:	b.hi	d768 <ZSTD_decompressBegin_usingDDict+0x470>  // b.pmore
    d5b8:	cbnz	x0, d6d0 <ZSTD_decompressBegin_usingDDict+0x3d8>
    d5bc:	ldr	w0, [x24, #12428]
    d5c0:	cbz	w0, d5d0 <ZSTD_decompressBegin_usingDDict+0x2d8>
    d5c4:	ldr	w1, [x24, #12648]
    d5c8:	cmp	w0, w1
    d5cc:	b.ne	d8dc <ZSTD_decompressBegin_usingDDict+0x5e4>  // b.any
    d5d0:	ldr	w0, [x24, #12432]
    d5d4:	cbnz	w0, d8a0 <ZSTD_decompressBegin_usingDDict+0x5a8>
    d5d8:	add	x1, x23, x27
    d5dc:	sub	x7, x25, x27
    d5e0:	mov	x13, x28
    d5e4:	add	x0, x28, x20
    d5e8:	str	x0, [sp, #136]
    d5ec:	cmp	x7, #0x2
    d5f0:	b.ls	d6d0 <ZSTD_decompressBegin_usingDDict+0x3d8>  // b.plast
    d5f4:	ldrh	w0, [x1]
    d5f8:	ldrb	w11, [x1, #2]
    d5fc:	add	w11, w0, w11, lsl #16
    d600:	ubfx	x0, x11, #1, #2
    d604:	lsr	w4, w11, #3
    d608:	cmp	w0, #0x1
    d60c:	b.eq	d780 <ZSTD_decompressBegin_usingDDict+0x488>  // b.none
    d610:	cmp	w0, #0x3
    d614:	b.eq	d8f4 <ZSTD_decompressBegin_usingDDict+0x5fc>  // b.none
    d618:	sub	x7, x7, #0x3
    d61c:	add	x3, x1, #0x3
    d620:	cmp	x4, x7
    d624:	b.hi	d6d0 <ZSTD_decompressBegin_usingDDict+0x3d8>  // b.pmore
    d628:	cmp	w0, #0x2
    d62c:	b.eq	d6bc <ZSTD_decompressBegin_usingDDict+0x3c4>  // b.none
    d630:	cbz	w0, d654 <ZSTD_decompressBegin_usingDDict+0x35c>
    d634:	mov	x0, #0xffffffffffffffec    	// #-20
    d638:	bl	8420 <ZSTD_getErrorCode>
    d63c:	cmp	w0, #0xa
    d640:	b.ne	d648 <ZSTD_decompressBegin_usingDDict+0x350>  // b.any
    d644:	cbnz	w22, d744 <ZSTD_decompressBegin_usingDDict+0x44c>
    d648:	mov	x27, #0xffffffffffffffec    	// #-20
    d64c:	ldp	x21, x22, [sp, #32]
    d650:	b	d74c <ZSTD_decompressBegin_usingDDict+0x454>
    d654:	ldr	x0, [sp, #136]
    d658:	str	w11, [sp, #152]
    d65c:	str	x7, [sp, #160]
    d660:	cmp	x13, #0x0
    d664:	sub	x0, x0, x13
    d668:	ccmp	x4, x0, #0x2, ne  // ne = any
    d66c:	b.ls	d8b0 <ZSTD_decompressBegin_usingDDict+0x5b8>  // b.plast
    d670:	mov	x27, #0xffffffffffffffba    	// #-70
    d674:	nop
    d678:	mov	x0, x27
    d67c:	bl	8420 <ZSTD_getErrorCode>
    d680:	cmp	w0, #0xa
    d684:	b.ne	d724 <ZSTD_decompressBegin_usingDDict+0x42c>  // b.any
    d688:	cbnz	w22, d744 <ZSTD_decompressBegin_usingDDict+0x44c>
    d68c:	cmn	x27, #0x78
    d690:	b.hi	d724 <ZSTD_decompressBegin_usingDDict+0x42c>  // b.pmore
    d694:	add	x28, x28, x27
    d698:	sub	x20, x20, x27
    d69c:	mov	w22, #0x1                   	// #1
    d6a0:	cmp	x25, #0x4
    d6a4:	b.hi	d4d8 <ZSTD_decompressBegin_usingDDict+0x1e0>  // b.pmore
    d6a8:	ldp	x21, x22, [sp, #32]
    d6ac:	cbnz	x25, d748 <ZSTD_decompressBegin_usingDDict+0x450>
    d6b0:	ldr	x0, [sp, #128]
    d6b4:	sub	x27, x28, x0
    d6b8:	b	d74c <ZSTD_decompressBegin_usingDDict+0x454>
    d6bc:	str	w11, [sp, #152]
    d6c0:	mov	x0, #0x1ffff               	// #131071
    d6c4:	str	x7, [sp, #160]
    d6c8:	cmp	x4, x0
    d6cc:	b.ls	d834 <ZSTD_decompressBegin_usingDDict+0x53c>  // b.plast
    d6d0:	mov	x27, #0xffffffffffffffb8    	// #-72
    d6d4:	mov	x0, x27
    d6d8:	bl	8420 <ZSTD_getErrorCode>
    d6dc:	cmp	w0, #0xa
    d6e0:	b.eq	d688 <ZSTD_decompressBegin_usingDDict+0x390>  // b.none
    d6e4:	b	d724 <ZSTD_decompressBegin_usingDDict+0x42c>
    d6e8:	cmp	x25, #0x7
    d6ec:	b.ls	d744 <ZSTD_decompressBegin_usingDDict+0x44c>  // b.plast
    d6f0:	ldr	w0, [x23, #4]
    d6f4:	add	x0, x0, #0x8
    d6f8:	cmp	x0, x25
    d6fc:	b.hi	d744 <ZSTD_decompressBegin_usingDDict+0x44c>  // b.pmore
    d700:	add	x23, x23, x0
    d704:	sub	x25, x25, x0
    d708:	b	d6a0 <ZSTD_decompressBegin_usingDDict+0x3a8>
    d70c:	ldp	x1, x2, [sp, #104]
    d710:	mov	x0, x26
    d714:	bl	d180 <ZSTD_decompressBegin_usingDict>
    d718:	mov	x27, x0
    d71c:	cmn	x0, #0x78
    d720:	b.ls	d504 <ZSTD_decompressBegin_usingDDict+0x20c>  // b.plast
    d724:	mov	x0, x27
    d728:	ldp	x19, x20, [sp, #16]
    d72c:	ldp	x21, x22, [sp, #32]
    d730:	ldp	x23, x24, [sp, #48]
    d734:	ldp	x25, x26, [sp, #64]
    d738:	ldp	x27, x28, [sp, #80]
    d73c:	ldp	x29, x30, [sp], #192
    d740:	ret
    d744:	ldp	x21, x22, [sp, #32]
    d748:	mov	x27, #0xffffffffffffffb8    	// #-72
    d74c:	mov	x0, x27
    d750:	ldp	x19, x20, [sp, #16]
    d754:	ldp	x23, x24, [sp, #48]
    d758:	ldp	x25, x26, [sp, #64]
    d75c:	ldp	x27, x28, [sp, #80]
    d760:	ldp	x29, x30, [sp], #192
    d764:	ret
    d768:	mov	x27, x0
    d76c:	mov	x0, x27
    d770:	bl	8420 <ZSTD_getErrorCode>
    d774:	cmp	w0, #0xa
    d778:	b.eq	d688 <ZSTD_decompressBegin_usingDDict+0x390>  // b.none
    d77c:	b	d724 <ZSTD_decompressBegin_usingDDict+0x42c>
    d780:	subs	x7, x7, #0x3
    d784:	add	x3, x1, #0x3
    d788:	b.eq	d6d0 <ZSTD_decompressBegin_usingDDict+0x3d8>  // b.none
    d78c:	ldr	x0, [sp, #136]
    d790:	mov	w27, w4
    d794:	sub	x0, x0, x13
    d798:	cmp	x0, x27
    d79c:	b.cc	d670 <ZSTD_decompressBegin_usingDDict+0x378>  // b.lo, b.ul, b.last
    d7a0:	ldrb	w1, [x1, #3]
    d7a4:	mov	x4, #0x1                   	// #1
    d7a8:	mov	x0, x13
    d7ac:	mov	x2, x27
    d7b0:	stp	x13, x4, [sp, #152]
    d7b4:	str	x3, [sp, #168]
    d7b8:	str	w11, [sp, #176]
    d7bc:	str	x7, [sp, #184]
    d7c0:	bl	0 <grub_memset>
    d7c4:	ldp	x13, x4, [sp, #152]
    d7c8:	ldr	w11, [sp, #176]
    d7cc:	ldr	x3, [sp, #168]
    d7d0:	ldr	x7, [sp, #184]
    d7d4:	ldr	w0, [x24, #12432]
    d7d8:	cbnz	w0, d874 <ZSTD_decompressBegin_usingDDict+0x57c>
    d7dc:	add	x13, x13, x27
    d7e0:	add	x1, x3, x4
    d7e4:	sub	x7, x7, x4
    d7e8:	tbz	w11, #0, d5ec <ZSTD_decompressBegin_usingDDict+0x2f4>
    d7ec:	ldr	x0, [x26, #28784]
    d7f0:	cmn	x0, #0x1
    d7f4:	b.eq	d804 <ZSTD_decompressBegin_usingDDict+0x50c>  // b.none
    d7f8:	sub	x2, x13, x28
    d7fc:	cmp	x0, x2
    d800:	b.ne	d8f4 <ZSTD_decompressBegin_usingDDict+0x5fc>  // b.any
    d804:	ldr	w0, [x24, #12432]
    d808:	cbnz	w0, d914 <ZSTD_decompressBegin_usingDDict+0x61c>
    d80c:	sub	x27, x13, x28
    d810:	mov	x25, x7
    d814:	mov	x0, x27
    d818:	str	x1, [sp, #136]
    d81c:	bl	8420 <ZSTD_getErrorCode>
    d820:	cmp	w0, #0xa
    d824:	ldr	x1, [sp, #136]
    d828:	mov	x23, x1
    d82c:	b.ne	d68c <ZSTD_decompressBegin_usingDDict+0x394>  // b.any
    d830:	b	d688 <ZSTD_decompressBegin_usingDDict+0x390>
    d834:	ldr	x0, [sp, #136]
    d838:	mov	x1, x13
    d83c:	mov	w5, #0x1                   	// #1
    d840:	stp	x13, x3, [sp, #168]
    d844:	sub	x2, x0, x13
    d848:	mov	x0, x26
    d84c:	str	x4, [sp, #184]
    d850:	bl	bca0 <ZSTD_decodeSeqHeaders+0x350>
    d854:	mov	x27, x0
    d858:	ldr	w11, [sp, #152]
    d85c:	cmn	x0, #0x78
    d860:	ldp	x7, x13, [sp, #160]
    d864:	ldp	x3, x4, [sp, #176]
    d868:	b.hi	d678 <ZSTD_decompressBegin_usingDDict+0x380>  // b.pmore
    d86c:	ldr	w0, [x24, #12432]
    d870:	cbz	w0, d7dc <ZSTD_decompressBegin_usingDDict+0x4e4>
    d874:	ldr	x0, [sp, #144]
    d878:	mov	x1, x13
    d87c:	mov	x2, x27
    d880:	stp	x13, x3, [sp, #152]
    d884:	str	w11, [sp, #168]
    d888:	stp	x4, x7, [sp, #176]
    d88c:	bl	7de0 <XXH64_update>
    d890:	ldr	w11, [sp, #168]
    d894:	ldp	x13, x3, [sp, #152]
    d898:	ldp	x4, x7, [sp, #176]
    d89c:	b	d7dc <ZSTD_decompressBegin_usingDDict+0x4e4>
    d8a0:	ldr	x0, [sp, #144]
    d8a4:	mov	x1, #0x0                   	// #0
    d8a8:	bl	7900 <XXH64_reset>
    d8ac:	b	d5d8 <ZSTD_decompressBegin_usingDDict+0x2e0>
    d8b0:	mov	x2, x4
    d8b4:	mov	x1, x3
    d8b8:	mov	x0, x13
    d8bc:	stp	x13, x3, [sp, #168]
    d8c0:	str	x4, [sp, #184]
    d8c4:	bl	0 <grub_memmove>
    d8c8:	ldp	x3, x4, [sp, #176]
    d8cc:	ldr	w11, [sp, #152]
    d8d0:	ldp	x7, x13, [sp, #160]
    d8d4:	mov	x27, x4
    d8d8:	b	d7d4 <ZSTD_decompressBegin_usingDDict+0x4dc>
    d8dc:	mov	x27, #0xffffffffffffffe0    	// #-32
    d8e0:	mov	x0, x27
    d8e4:	bl	8420 <ZSTD_getErrorCode>
    d8e8:	cmp	w0, #0xa
    d8ec:	b.eq	d688 <ZSTD_decompressBegin_usingDDict+0x390>  // b.none
    d8f0:	b	d724 <ZSTD_decompressBegin_usingDDict+0x42c>
    d8f4:	mov	x27, #0xffffffffffffffec    	// #-20
    d8f8:	mov	x0, x27
    d8fc:	bl	8420 <ZSTD_getErrorCode>
    d900:	cmp	w0, #0xa
    d904:	b.eq	d688 <ZSTD_decompressBegin_usingDDict+0x390>  // b.none
    d908:	b	d724 <ZSTD_decompressBegin_usingDDict+0x42c>
    d90c:	ldr	x28, [sp, #128]
    d910:	b	d6ac <ZSTD_decompressBegin_usingDDict+0x3b4>
    d914:	ldr	x0, [sp, #144]
    d918:	str	x7, [sp, #136]
    d91c:	stp	x1, x13, [sp, #152]
    d920:	bl	80b8 <XXH64_digest>
    d924:	ldr	x7, [sp, #136]
    d928:	cmp	x7, #0x3
    d92c:	b.ls	d950 <ZSTD_decompressBegin_usingDDict+0x658>  // b.plast
    d930:	ldr	x1, [sp, #152]
    d934:	ldr	w2, [x1]
    d938:	cmp	w0, w2
    d93c:	b.ne	d950 <ZSTD_decompressBegin_usingDDict+0x658>  // b.any
    d940:	add	x1, x1, #0x4
    d944:	sub	x7, x7, #0x4
    d948:	ldr	x13, [sp, #160]
    d94c:	b	d80c <ZSTD_decompressBegin_usingDDict+0x514>
    d950:	mov	x27, #0xffffffffffffffea    	// #-22
    d954:	b	d678 <ZSTD_decompressBegin_usingDDict+0x380>
	...

000000000000d960 <ZSTD_decompress_usingDict>:
    d960:	mov	x7, #0x0                   	// #0
    d964:	b	d458 <ZSTD_decompressBegin_usingDDict+0x160>

000000000000d968 <ZSTD_decompressDCtx>:
    d968:	mov	x7, #0x0                   	// #0
    d96c:	mov	x6, #0x0                   	// #0
    d970:	mov	x5, #0x0                   	// #0
    d974:	b	d458 <ZSTD_decompressBegin_usingDDict+0x160>

000000000000d978 <ZSTD_decompress>:
    d978:	stp	x29, x30, [sp, #-192]!
    d97c:	adrp	x4, 0 <FSE_versionNumber>
    d980:	mov	x29, sp
    d984:	ldr	x5, [x4]
    d988:	stp	x21, x22, [sp, #32]
    d98c:	mov	x22, x2
    d990:	add	x5, x5, #0x410
    d994:	stp	x19, x20, [sp, #16]
    d998:	mov	x20, x0
    d99c:	ldr	x2, [x5, #16]
    d9a0:	mov	x0, #0x71f8                	// #29176
    d9a4:	ldp	x6, x7, [x5]
    d9a8:	mov	x21, x1
    d9ac:	movk	x0, #0x2, lsl #16
    d9b0:	add	x1, sp, #0x50
    d9b4:	stp	x23, x24, [sp, #48]
    d9b8:	mov	x23, x3
    d9bc:	stp	x6, x7, [sp, #80]
    d9c0:	str	x2, [sp, #96]
    d9c4:	stp	x6, x7, [sp, #120]
    d9c8:	str	x2, [sp, #136]
    d9cc:	bl	8438 <ZSTD_malloc>
    d9d0:	cbz	x0, db40 <ZSTD_decompress+0x1c8>
    d9d4:	add	x24, x0, #0x7, lsl #12
    d9d8:	add	x8, x0, #0x4, lsl #12
    d9dc:	mov	x1, #0x7200                	// #29184
    d9e0:	str	x25, [sp, #64]
    d9e4:	ldp	x2, x3, [sp, #120]
    d9e8:	add	x9, x0, x1
    d9ec:	stp	x2, x3, [x24, #288]
    d9f0:	mov	x10, #0x1                   	// #1
    d9f4:	movk	x10, #0x800, lsl #16
    d9f8:	ldr	x1, [sp, #136]
    d9fc:	str	x1, [x0, #28976]
    da00:	str	wzr, [x8, #12560]
    da04:	mov	x19, x0
    da08:	str	xzr, [x0, #28768]
    da0c:	mov	x1, x20
    da10:	str	xzr, [x0, #29000]
    da14:	mov	x4, x23
    da18:	str	xzr, [x0, #29016]
    da1c:	mov	x3, x22
    da20:	str	xzr, [x0, #29024]
    da24:	mov	x2, x21
    da28:	str	xzr, [x0, #29048]
    da2c:	mov	x7, #0x0                   	// #0
    da30:	str	xzr, [x0, #29056]
    da34:	mov	x6, #0x0                   	// #0
    da38:	str	x10, [x0, #29072]
    da3c:	mov	x5, #0x0                   	// #0
    da40:	str	xzr, [x0, #29088]
    da44:	stur	xzr, [x9, #-148]
    da48:	str	xzr, [x0, #29120]
    da4c:	str	wzr, [x8, #12624]
    da50:	str	wzr, [x8, #12744]
    da54:	str	wzr, [x8, #12756]
    da58:	bl	d458 <ZSTD_decompressBegin_usingDDict+0x160>
    da5c:	mov	x20, x0
    da60:	ldr	x1, [x19, #29000]
    da64:	cbnz	x1, db24 <ZSTD_decompress+0x1ac>
    da68:	ldr	x0, [x19, #28976]
    da6c:	str	x0, [sp, #160]
    da70:	ldr	x21, [x19, #29016]
    da74:	ldp	x0, x1, [x24, #288]
    da78:	stp	x0, x1, [sp, #144]
    da7c:	cbz	x21, dac8 <ZSTD_decompress+0x150>
    da80:	mov	x0, #0x6800                	// #26624
    da84:	add	x0, x21, x0
    da88:	add	x1, sp, #0x50
    da8c:	ldp	x2, x3, [x0, #72]
    da90:	stp	x2, x3, [sp, #168]
    da94:	ldr	x0, [x21, #26712]
    da98:	stp	x2, x3, [sp, #80]
    da9c:	str	x0, [sp, #96]
    daa0:	str	x0, [sp, #184]
    daa4:	ldr	x0, [x21]
    daa8:	bl	84a8 <ZSTD_free>
    daac:	ldp	x4, x5, [sp, #168]
    dab0:	mov	x0, x21
    dab4:	ldr	x2, [sp, #184]
    dab8:	add	x1, sp, #0x50
    dabc:	stp	x4, x5, [sp, #80]
    dac0:	str	x2, [sp, #96]
    dac4:	bl	84a8 <ZSTD_free>
    dac8:	str	xzr, [x19, #29016]
    dacc:	add	x1, sp, #0x50
    dad0:	ldp	x2, x3, [sp, #144]
    dad4:	stp	x2, x3, [sp, #80]
    dad8:	ldr	x0, [sp, #160]
    dadc:	str	x0, [sp, #96]
    dae0:	ldr	x0, [x19, #29048]
    dae4:	bl	84a8 <ZSTD_free>
    dae8:	str	xzr, [x19, #29048]
    daec:	ldp	x4, x5, [sp, #144]
    daf0:	add	x1, sp, #0x50
    daf4:	ldr	x2, [sp, #160]
    daf8:	mov	x0, x19
    dafc:	stp	x4, x5, [sp, #80]
    db00:	str	x2, [sp, #96]
    db04:	bl	84a8 <ZSTD_free>
    db08:	ldr	x25, [sp, #64]
    db0c:	mov	x0, x20
    db10:	ldp	x19, x20, [sp, #16]
    db14:	ldp	x21, x22, [sp, #32]
    db18:	ldp	x23, x24, [sp, #48]
    db1c:	ldp	x29, x30, [sp], #192
    db20:	ret
    db24:	mov	x0, x20
    db28:	ldp	x19, x20, [sp, #16]
    db2c:	ldp	x21, x22, [sp, #32]
    db30:	ldp	x23, x24, [sp, #48]
    db34:	ldr	x25, [sp, #64]
    db38:	ldp	x29, x30, [sp], #192
    db3c:	ret
    db40:	mov	x20, #0xffffffffffffffc0    	// #-64
    db44:	b	db0c <ZSTD_decompress+0x194>
	...

000000000000db50 <ZSTD_createDDict_advanced>:
    db50:	stp	x29, x30, [sp, #-160]!
    db54:	mov	x29, sp
    db58:	str	x4, [sp, #88]
    db5c:	str	w3, [sp, #88]
    db60:	ldr	x3, [x4]
    db64:	stp	x21, x22, [sp, #32]
    db68:	mov	x21, x0
    db6c:	ldr	x0, [x4, #8]
    db70:	cmp	x3, #0x0
    db74:	cset	w3, eq  // eq = none
    db78:	stp	x19, x20, [sp, #16]
    db7c:	cmp	x0, #0x0
    db80:	str	x25, [sp, #64]
    db84:	cset	w0, eq  // eq = none
    db88:	ldr	w25, [sp, #88]
    db8c:	cmp	w3, w0
    db90:	b.ne	dc38 <ZSTD_createDDict_advanced+0xe8>  // b.any
    db94:	mov	x19, x4
    db98:	mov	w22, w2
    db9c:	ldp	x4, x5, [x4]
    dba0:	mov	x0, #0x6860                	// #26720
    dba4:	ldr	x2, [x19, #16]
    dba8:	stp	x23, x24, [sp, #48]
    dbac:	mov	x24, x1
    dbb0:	add	x1, sp, #0x60
    dbb4:	stp	x4, x5, [sp, #96]
    dbb8:	str	x2, [sp, #112]
    dbbc:	bl	8438 <ZSTD_malloc>
    dbc0:	mov	x20, x0
    dbc4:	cbz	x0, dc30 <ZSTD_createDDict_advanced+0xe0>
    dbc8:	mov	x0, #0x6800                	// #26624
    dbcc:	add	x23, x20, x0
    dbd0:	add	x2, x23, #0x48
    dbd4:	cmp	x21, #0x0
    dbd8:	ldp	x0, x1, [x19]
    dbdc:	stp	x0, x1, [x23, #72]
    dbe0:	ccmp	w22, #0x1, #0x4, ne  // ne = any
    dbe4:	ldr	x3, [x19, #16]
    dbe8:	str	x3, [x2, #16]
    dbec:	b.eq	dc54 <ZSTD_createDDict_advanced+0x104>  // b.none
    dbf0:	cbnz	x24, dc80 <ZSTD_createDDict_advanced+0x130>
    dbf4:	mov	w0, #0xc                   	// #12
    dbf8:	stp	xzr, x21, [x20]
    dbfc:	movk	w0, #0xc00, lsl #16
    dc00:	str	xzr, [x20, #16]
    dc04:	cmp	w25, #0x1
    dc08:	str	w0, [x20, #10288]
    dc0c:	str	xzr, [x20, #26688]
    dc10:	b.ne	dcec <ZSTD_createDDict_advanced+0x19c>  // b.any
    dc14:	ldp	x23, x24, [sp, #48]
    dc18:	mov	x0, x20
    dc1c:	ldp	x19, x20, [sp, #16]
    dc20:	ldp	x21, x22, [sp, #32]
    dc24:	ldr	x25, [sp, #64]
    dc28:	ldp	x29, x30, [sp], #160
    dc2c:	ret
    dc30:	ldp	x23, x24, [sp, #48]
    dc34:	nop
    dc38:	mov	x20, #0x0                   	// #0
    dc3c:	mov	x0, x20
    dc40:	ldp	x19, x20, [sp, #16]
    dc44:	ldp	x21, x22, [sp, #32]
    dc48:	ldr	x25, [sp, #64]
    dc4c:	ldp	x29, x30, [sp], #160
    dc50:	ret
    dc54:	stp	xzr, x21, [x20]
    dc58:	cbnz	x21, dcb0 <ZSTD_createDDict_advanced+0x160>
    dc5c:	mov	w0, #0xc                   	// #12
    dc60:	str	xzr, [x20, #16]
    dc64:	movk	w0, #0xc00, lsl #16
    dc68:	str	w0, [x20, #10288]
    dc6c:	str	xzr, [x20, #26688]
    dc70:	cmp	w25, #0x1
    dc74:	b.ne	dcec <ZSTD_createDDict_advanced+0x19c>  // b.any
    dc78:	ldp	x23, x24, [sp, #48]
    dc7c:	b	dc18 <ZSTD_createDDict_advanced+0xc8>
    dc80:	stp	x0, x1, [sp, #96]
    dc84:	add	x1, sp, #0x60
    dc88:	mov	x0, x24
    dc8c:	ldr	x2, [x2, #16]
    dc90:	str	x2, [sp, #112]
    dc94:	bl	8438 <ZSTD_malloc>
    dc98:	stp	x0, x0, [x20]
    dc9c:	mov	x1, x0
    dca0:	cbz	x0, dcf8 <ZSTD_createDDict_advanced+0x1a8>
    dca4:	mov	x1, x21
    dca8:	mov	x2, x24
    dcac:	bl	0 <grub_memmove>
    dcb0:	mov	w0, #0xc                   	// #12
    dcb4:	str	x24, [x20, #16]
    dcb8:	movk	w0, #0xc00, lsl #16
    dcbc:	str	w0, [x20, #10288]
    dcc0:	str	xzr, [x20, #26688]
    dcc4:	cmp	w25, #0x1
    dcc8:	b.eq	dc14 <ZSTD_createDDict_advanced+0xc4>  // b.none
    dccc:	cmp	x24, #0x7
    dcd0:	b.ls	dcec <ZSTD_createDDict_advanced+0x19c>  // b.plast
    dcd4:	ldr	x1, [x20, #8]
    dcd8:	mov	w0, #0xa437                	// #42039
    dcdc:	movk	w0, #0xec30, lsl #16
    dce0:	ldr	w2, [x1]
    dce4:	cmp	w2, w0
    dce8:	b.eq	dd44 <ZSTD_createDDict_advanced+0x1f4>  // b.none
    dcec:	cmp	w25, #0x2
    dcf0:	b.ne	dc14 <ZSTD_createDDict_advanced+0xc4>  // b.any
    dcf4:	ldr	x1, [x20]
    dcf8:	mov	x0, x1
    dcfc:	ldp	x4, x5, [x23, #72]
    dd00:	add	x1, sp, #0x60
    dd04:	ldr	x2, [x23, #88]
    dd08:	stp	x4, x5, [sp, #96]
    dd0c:	str	x2, [sp, #112]
    dd10:	stp	x4, x5, [sp, #136]
    dd14:	str	x2, [sp, #152]
    dd18:	bl	84a8 <ZSTD_free>
    dd1c:	ldp	x4, x5, [sp, #136]
    dd20:	mov	x0, x20
    dd24:	ldr	x2, [sp, #152]
    dd28:	add	x1, sp, #0x60
    dd2c:	mov	x20, #0x0                   	// #0
    dd30:	stp	x4, x5, [sp, #96]
    dd34:	str	x2, [sp, #112]
    dd38:	bl	84a8 <ZSTD_free>
    dd3c:	ldp	x23, x24, [sp, #48]
    dd40:	b	dc3c <ZSTD_createDDict_advanced+0xec>
    dd44:	add	x19, x20, #0x4, lsl #12
    dd48:	ldr	w3, [x1, #4]
    dd4c:	mov	x2, x24
    dd50:	add	x0, x20, #0x18
    dd54:	str	w3, [x19, #10304]
    dd58:	bl	8840 <ZSTD_free+0x398>
    dd5c:	cmn	x0, #0x78
    dd60:	b.hi	dcf4 <ZSTD_createDDict_advanced+0x1a4>  // b.pmore
    dd64:	mov	w0, #0x1                   	// #1
    dd68:	ldp	x23, x24, [sp, #48]
    dd6c:	str	w0, [x19, #10308]
    dd70:	mov	x0, x20
    dd74:	ldp	x19, x20, [sp, #16]
    dd78:	ldp	x21, x22, [sp, #32]
    dd7c:	ldr	x25, [sp, #64]
    dd80:	ldp	x29, x30, [sp], #160
    dd84:	ret

000000000000dd88 <ZSTD_createDDict>:
    dd88:	stp	x29, x30, [sp, #-128]!
    dd8c:	mov	x29, sp
    dd90:	stp	x19, x20, [sp, #16]
    dd94:	mov	x20, x1
    dd98:	add	x1, sp, #0x30
    dd9c:	stp	x21, x22, [sp, #32]
    dda0:	mov	x21, x0
    dda4:	mov	x0, #0x6860                	// #26720
    dda8:	stp	xzr, xzr, [sp, #48]
    ddac:	str	xzr, [sp, #64]
    ddb0:	stp	xzr, xzr, [sp, #80]
    ddb4:	str	xzr, [sp, #96]
    ddb8:	bl	8438 <ZSTD_malloc>
    ddbc:	mov	x19, x0
    ddc0:	cbz	x0, ddec <ZSTD_createDDict+0x64>
    ddc4:	str	xzr, [x0, #26696]
    ddc8:	str	xzr, [x0, #26704]
    ddcc:	str	xzr, [x0, #26712]
    ddd0:	cbnz	x21, de00 <ZSTD_createDDict+0x78>
    ddd4:	mov	w0, #0xc                   	// #12
    ddd8:	stp	xzr, xzr, [x19]
    dddc:	movk	w0, #0xc00, lsl #16
    dde0:	str	xzr, [x19, #16]
    dde4:	str	w0, [x19, #10288]
    dde8:	str	xzr, [x19, #26688]
    ddec:	mov	x0, x19
    ddf0:	ldp	x19, x20, [sp, #16]
    ddf4:	ldp	x21, x22, [sp, #32]
    ddf8:	ldp	x29, x30, [sp], #128
    ddfc:	ret
    de00:	cbnz	x20, de30 <ZSTD_createDDict+0xa8>
    de04:	mov	w0, #0xc                   	// #12
    de08:	stp	xzr, x21, [x19]
    de0c:	movk	w0, #0xc00, lsl #16
    de10:	str	xzr, [x19, #16]
    de14:	str	w0, [x19, #10288]
    de18:	mov	x0, x19
    de1c:	str	xzr, [x19, #26688]
    de20:	ldp	x19, x20, [sp, #16]
    de24:	ldp	x21, x22, [sp, #32]
    de28:	ldp	x29, x30, [sp], #128
    de2c:	ret
    de30:	mov	x0, #0x6800                	// #26624
    de34:	add	x22, x19, x0
    de38:	add	x1, sp, #0x30
    de3c:	mov	x0, x20
    de40:	ldp	x2, x3, [x22, #72]
    de44:	stp	x2, x3, [sp, #48]
    de48:	ldr	x2, [x22, #88]
    de4c:	str	x2, [sp, #64]
    de50:	bl	8438 <ZSTD_malloc>
    de54:	stp	x0, x0, [x19]
    de58:	mov	x1, x0
    de5c:	cbz	x0, ded0 <ZSTD_createDDict+0x148>
    de60:	mov	x1, x21
    de64:	mov	x2, x20
    de68:	bl	0 <grub_memmove>
    de6c:	str	x20, [x19, #16]
    de70:	mov	w0, #0xc                   	// #12
    de74:	str	xzr, [x19, #26688]
    de78:	movk	w0, #0xc00, lsl #16
    de7c:	str	w0, [x19, #10288]
    de80:	cmp	x20, #0x7
    de84:	b.ls	ddec <ZSTD_createDDict+0x64>  // b.plast
    de88:	ldr	x1, [x19, #8]
    de8c:	mov	w0, #0xa437                	// #42039
    de90:	movk	w0, #0xec30, lsl #16
    de94:	ldr	w2, [x1]
    de98:	cmp	w2, w0
    de9c:	b.ne	ddec <ZSTD_createDDict+0x64>  // b.any
    dea0:	add	x21, x19, #0x4, lsl #12
    dea4:	ldr	w3, [x1, #4]
    dea8:	mov	x2, x20
    deac:	add	x0, x19, #0x18
    deb0:	str	w3, [x21, #10304]
    deb4:	bl	8840 <ZSTD_free+0x398>
    deb8:	cmn	x0, #0x78
    debc:	b.hi	decc <ZSTD_createDDict+0x144>  // b.pmore
    dec0:	mov	w0, #0x1                   	// #1
    dec4:	str	w0, [x21, #10308]
    dec8:	b	ddec <ZSTD_createDDict+0x64>
    decc:	ldr	x1, [x19]
    ded0:	mov	x0, x1
    ded4:	ldp	x4, x5, [x22, #72]
    ded8:	add	x1, sp, #0x30
    dedc:	ldr	x2, [x22, #88]
    dee0:	stp	x4, x5, [sp, #48]
    dee4:	str	x2, [sp, #64]
    dee8:	stp	x4, x5, [sp, #104]
    deec:	str	x2, [sp, #120]
    def0:	bl	84a8 <ZSTD_free>
    def4:	ldp	x4, x5, [sp, #104]
    def8:	mov	x0, x19
    defc:	ldr	x2, [sp, #120]
    df00:	add	x1, sp, #0x30
    df04:	mov	x19, #0x0                   	// #0
    df08:	stp	x4, x5, [sp, #48]
    df0c:	str	x2, [sp, #64]
    df10:	bl	84a8 <ZSTD_free>
    df14:	b	ddec <ZSTD_createDDict+0x64>

000000000000df18 <ZSTD_createDDict_byReference>:
    df18:	stp	x29, x30, [sp, #-128]!
    df1c:	mov	x29, sp
    df20:	stp	x19, x20, [sp, #16]
    df24:	mov	x20, x0
    df28:	mov	x0, #0x6860                	// #26720
    df2c:	stp	x21, x22, [sp, #32]
    df30:	mov	x21, x1
    df34:	add	x1, sp, #0x30
    df38:	stp	xzr, xzr, [sp, #48]
    df3c:	str	xzr, [sp, #64]
    df40:	stp	xzr, xzr, [sp, #80]
    df44:	str	xzr, [sp, #96]
    df48:	bl	8438 <ZSTD_malloc>
    df4c:	mov	x19, x0
    df50:	cbz	x0, df98 <ZSTD_createDDict_byReference+0x80>
    df54:	stp	xzr, x20, [x19]
    df58:	mov	w0, #0xc                   	// #12
    df5c:	movk	w0, #0xc00, lsl #16
    df60:	str	xzr, [x19, #26696]
    df64:	str	xzr, [x19, #26704]
    df68:	str	xzr, [x19, #26712]
    df6c:	cbz	x20, dfac <ZSTD_createDDict_byReference+0x94>
    df70:	str	x21, [x19, #16]
    df74:	cmp	x21, #0x7
    df78:	str	w0, [x19, #10288]
    df7c:	str	xzr, [x19, #26688]
    df80:	b.ls	df98 <ZSTD_createDDict_byReference+0x80>  // b.plast
    df84:	ldr	w1, [x20]
    df88:	mov	w0, #0xa437                	// #42039
    df8c:	movk	w0, #0xec30, lsl #16
    df90:	cmp	w1, w0
    df94:	b.eq	dfcc <ZSTD_createDDict_byReference+0xb4>  // b.none
    df98:	mov	x0, x19
    df9c:	ldp	x19, x20, [sp, #16]
    dfa0:	ldp	x21, x22, [sp, #32]
    dfa4:	ldp	x29, x30, [sp], #128
    dfa8:	ret
    dfac:	str	xzr, [x19, #16]
    dfb0:	str	w0, [x19, #10288]
    dfb4:	mov	x0, x19
    dfb8:	str	xzr, [x19, #26688]
    dfbc:	ldp	x19, x20, [sp, #16]
    dfc0:	ldp	x21, x22, [sp, #32]
    dfc4:	ldp	x29, x30, [sp], #128
    dfc8:	ret
    dfcc:	add	x22, x19, #0x4, lsl #12
    dfd0:	ldr	w3, [x20, #4]
    dfd4:	mov	x2, x21
    dfd8:	mov	x1, x20
    dfdc:	add	x0, x19, #0x18
    dfe0:	str	w3, [x22, #10304]
    dfe4:	bl	8840 <ZSTD_free+0x398>
    dfe8:	cmn	x0, #0x78
    dfec:	b.hi	dffc <ZSTD_createDDict_byReference+0xe4>  // b.pmore
    dff0:	mov	w0, #0x1                   	// #1
    dff4:	str	w0, [x22, #10308]
    dff8:	b	df98 <ZSTD_createDDict_byReference+0x80>
    dffc:	mov	x0, #0x6800                	// #26624
    e000:	add	x0, x19, x0
    e004:	add	x1, sp, #0x30
    e008:	ldp	x2, x3, [x0, #72]
    e00c:	stp	x2, x3, [sp, #104]
    e010:	ldr	x0, [x19, #26712]
    e014:	stp	x2, x3, [sp, #48]
    e018:	str	x0, [sp, #64]
    e01c:	str	x0, [sp, #120]
    e020:	ldr	x0, [x19]
    e024:	bl	84a8 <ZSTD_free>
    e028:	ldp	x4, x5, [sp, #104]
    e02c:	mov	x0, x19
    e030:	ldr	x2, [sp, #120]
    e034:	add	x1, sp, #0x30
    e038:	mov	x19, #0x0                   	// #0
    e03c:	stp	x4, x5, [sp, #48]
    e040:	str	x2, [sp, #64]
    e044:	bl	84a8 <ZSTD_free>
    e048:	b	df98 <ZSTD_createDDict_byReference+0x80>
    e04c:	nop

000000000000e050 <ZSTD_initStaticDDict>:
    e050:	stp	x29, x30, [sp, #-48]!
    e054:	tst	x0, #0x7
    e058:	mov	x6, x1
    e05c:	mov	x29, sp
    e060:	stp	x19, x20, [sp, #16]
    e064:	mov	x1, x2
    e068:	mov	x19, x0
    e06c:	stp	x21, x22, [sp, #32]
    e070:	cset	w0, ne  // ne = any
    e074:	mov	x20, x3
    e078:	mov	w21, w5
    e07c:	cmp	w4, #0x1
    e080:	b.eq	e108 <ZSTD_initStaticDDict+0xb8>  // b.none
    e084:	cmp	w0, #0x0
    e088:	mov	x0, #0x6860                	// #26720
    e08c:	add	x2, x3, x0
    e090:	ccmp	x2, x6, #0x2, eq  // eq = none
    e094:	b.hi	e118 <ZSTD_initStaticDDict+0xc8>  // b.pmore
    e098:	cbnz	w4, e12c <ZSTD_initStaticDDict+0xdc>
    e09c:	add	x22, x19, x0
    e0a0:	mov	x2, x3
    e0a4:	mov	x0, x22
    e0a8:	bl	0 <grub_memmove>
    e0ac:	mov	x1, x22
    e0b0:	stp	xzr, x22, [x19]
    e0b4:	mov	w0, #0xc                   	// #12
    e0b8:	movk	w0, #0xc00, lsl #16
    e0bc:	str	x20, [x19, #16]
    e0c0:	str	w0, [x19, #10288]
    e0c4:	cmp	w21, #0x1
    e0c8:	str	xzr, [x19, #26688]
    e0cc:	b.eq	e0f4 <ZSTD_initStaticDDict+0xa4>  // b.none
    e0d0:	cmp	x20, #0x7
    e0d4:	b.ls	e0ec <ZSTD_initStaticDDict+0x9c>  // b.plast
    e0d8:	ldr	w2, [x1]
    e0dc:	mov	w0, #0xa437                	// #42039
    e0e0:	movk	w0, #0xec30, lsl #16
    e0e4:	cmp	w2, w0
    e0e8:	b.eq	e154 <ZSTD_initStaticDDict+0x104>  // b.none
    e0ec:	cmp	w21, #0x2
    e0f0:	b.eq	e118 <ZSTD_initStaticDDict+0xc8>  // b.none
    e0f4:	mov	x0, x19
    e0f8:	ldp	x19, x20, [sp, #16]
    e0fc:	ldp	x21, x22, [sp, #32]
    e100:	ldp	x29, x30, [sp], #48
    e104:	ret
    e108:	cmp	w0, #0x0
    e10c:	mov	x0, #0x685f                	// #26719
    e110:	ccmp	x6, x0, #0x0, eq  // eq = none
    e114:	b.hi	e12c <ZSTD_initStaticDDict+0xdc>  // b.pmore
    e118:	mov	x0, #0x0                   	// #0
    e11c:	ldp	x19, x20, [sp, #16]
    e120:	ldp	x21, x22, [sp, #32]
    e124:	ldp	x29, x30, [sp], #48
    e128:	ret
    e12c:	stp	xzr, x1, [x19]
    e130:	cbnz	x1, e0b4 <ZSTD_initStaticDDict+0x64>
    e134:	mov	w0, #0xc                   	// #12
    e138:	str	xzr, [x19, #16]
    e13c:	movk	w0, #0xc00, lsl #16
    e140:	str	w0, [x19, #10288]
    e144:	str	xzr, [x19, #26688]
    e148:	cmp	w21, #0x1
    e14c:	b.ne	e0ec <ZSTD_initStaticDDict+0x9c>  // b.any
    e150:	b	e0f4 <ZSTD_initStaticDDict+0xa4>
    e154:	add	x21, x19, #0x4, lsl #12
    e158:	ldr	w3, [x1, #4]
    e15c:	mov	x2, x20
    e160:	add	x0, x19, #0x18
    e164:	str	w3, [x21, #10304]
    e168:	bl	8840 <ZSTD_free+0x398>
    e16c:	cmn	x0, #0x78
    e170:	b.hi	e118 <ZSTD_initStaticDDict+0xc8>  // b.pmore
    e174:	mov	w1, #0x1                   	// #1
    e178:	mov	x0, x19
    e17c:	str	w1, [x21, #10308]
    e180:	b	e0f8 <ZSTD_initStaticDDict+0xa8>
    e184:	nop

000000000000e188 <ZSTD_freeDDict>:
    e188:	cbz	x0, e1f4 <ZSTD_freeDDict+0x6c>
    e18c:	stp	x29, x30, [sp, #-96]!
    e190:	mov	x29, sp
    e194:	str	x19, [sp, #16]
    e198:	mov	x19, x0
    e19c:	mov	x0, #0x6800                	// #26624
    e1a0:	add	x2, x19, x0
    e1a4:	add	x1, sp, #0x20
    e1a8:	ldr	x0, [x19]
    e1ac:	ldp	x4, x5, [x2, #72]
    e1b0:	stp	x4, x5, [sp, #72]
    e1b4:	ldr	x2, [x19, #26712]
    e1b8:	stp	x4, x5, [sp, #32]
    e1bc:	str	x2, [sp, #48]
    e1c0:	str	x2, [sp, #88]
    e1c4:	bl	84a8 <ZSTD_free>
    e1c8:	ldp	x4, x5, [sp, #72]
    e1cc:	add	x1, sp, #0x20
    e1d0:	ldr	x2, [sp, #88]
    e1d4:	mov	x0, x19
    e1d8:	stp	x4, x5, [sp, #32]
    e1dc:	str	x2, [sp, #48]
    e1e0:	bl	84a8 <ZSTD_free>
    e1e4:	mov	x0, #0x0                   	// #0
    e1e8:	ldr	x19, [sp, #16]
    e1ec:	ldp	x29, x30, [sp], #96
    e1f0:	ret
    e1f4:	mov	x0, #0x0                   	// #0
    e1f8:	ret
    e1fc:	nop

000000000000e200 <ZSTD_estimateDDictSize>:
    e200:	cmp	w1, #0x1
    e204:	mov	x1, #0x6860                	// #26720
    e208:	add	x0, x0, x1
    e20c:	csel	x0, x0, x1, ne  // ne = any
    e210:	ret
    e214:	nop

000000000000e218 <ZSTD_sizeof_DDict>:
    e218:	cbz	x0, e234 <ZSTD_sizeof_DDict+0x1c>
    e21c:	ldr	x1, [x0]
    e220:	cbz	x1, e23c <ZSTD_sizeof_DDict+0x24>
    e224:	ldr	x0, [x0, #16]
    e228:	mov	x1, #0x6860                	// #26720
    e22c:	add	x0, x0, x1
    e230:	ret
    e234:	mov	x0, #0x0                   	// #0
    e238:	ret
    e23c:	mov	x0, #0x6860                	// #26720
    e240:	ret
    e244:	nop

000000000000e248 <ZSTD_getDictID_fromDict>:
    e248:	mov	x2, x0
    e24c:	cmp	x1, #0x7
    e250:	mov	w0, #0x0                   	// #0
    e254:	b.ls	e270 <ZSTD_getDictID_fromDict+0x28>  // b.plast
    e258:	ldr	w3, [x2]
    e25c:	mov	w1, #0xa437                	// #42039
    e260:	movk	w1, #0xec30, lsl #16
    e264:	mov	w0, #0x0                   	// #0
    e268:	cmp	w3, w1
    e26c:	b.eq	e274 <ZSTD_getDictID_fromDict+0x2c>  // b.none
    e270:	ret
    e274:	ldr	w0, [x2, #4]
    e278:	ret
    e27c:	nop

000000000000e280 <ZSTD_getDictID_fromDDict>:
    e280:	mov	x1, x0
    e284:	cbz	x0, e2bc <ZSTD_getDictID_fromDDict+0x3c>
    e288:	ldr	x2, [x1, #16]
    e28c:	mov	w0, #0x0                   	// #0
    e290:	cmp	x2, #0x7
    e294:	b.ls	e2b0 <ZSTD_getDictID_fromDDict+0x30>  // b.plast
    e298:	ldr	x1, [x1, #8]
    e29c:	mov	w2, #0xa437                	// #42039
    e2a0:	movk	w2, #0xec30, lsl #16
    e2a4:	ldr	w3, [x1]
    e2a8:	cmp	w3, w2
    e2ac:	b.eq	e2b4 <ZSTD_getDictID_fromDDict+0x34>  // b.none
    e2b0:	ret
    e2b4:	ldr	w0, [x1, #4]
    e2b8:	ret
    e2bc:	mov	w0, #0x0                   	// #0
    e2c0:	ret
    e2c4:	nop

000000000000e2c8 <ZSTD_getDictID_fromFrame>:
    e2c8:	stp	x29, x30, [sp, #-80]!
    e2cc:	mov	x2, #0x28                  	// #40
    e2d0:	mov	x29, sp
    e2d4:	stp	x19, x20, [sp, #16]
    e2d8:	mov	x20, x1
    e2dc:	mov	x19, x0
    e2e0:	mov	w1, #0x0                   	// #0
    e2e4:	add	x0, sp, #0x20
    e2e8:	stp	xzr, xzr, [sp, #32]
    e2ec:	stp	xzr, xzr, [sp, #48]
    e2f0:	str	wzr, [sp, #64]
    e2f4:	bl	0 <grub_memset>
    e2f8:	cmp	x20, #0x4
    e2fc:	b.ls	e334 <ZSTD_getDictID_fromFrame+0x6c>  // b.plast
    e300:	cbz	x19, e3e8 <ZSTD_getDictID_fromFrame+0x120>
    e304:	ldr	w0, [x19]
    e308:	mov	w1, #0xb528                	// #46376
    e30c:	movk	w1, #0xfd2f, lsl #16
    e310:	cmp	w0, w1
    e314:	b.eq	e344 <ZSTD_getDictID_fromFrame+0x7c>  // b.none
    e318:	and	w0, w0, #0xfffffff0
    e31c:	mov	w1, #0x2a50                	// #10832
    e320:	movk	w1, #0x184d, lsl #16
    e324:	cmp	w0, w1
    e328:	b.ne	e3e8 <ZSTD_getDictID_fromFrame+0x120>  // b.any
    e32c:	cmp	x20, #0x7
    e330:	b.hi	e3f8 <ZSTD_getDictID_fromFrame+0x130>  // b.pmore
    e334:	ldr	w0, [sp, #60]
    e338:	ldp	x19, x20, [sp, #16]
    e33c:	ldp	x29, x30, [sp], #80
    e340:	ret
    e344:	adrp	x0, 0 <FSE_versionNumber>
    e348:	ldrb	w2, [x19, #4]
    e34c:	ldr	x0, [x0]
    e350:	ubfx	x5, x2, #6, #2
    e354:	and	x7, x2, #0x3
    e358:	lsr	w1, w2, #5
    e35c:	add	x4, x0, #0x448
    e360:	add	x6, x0, #0x428
    e364:	mvn	w3, w1
    e368:	cmp	wzr, w2, lsr #6
    e36c:	and	x3, x3, #0x1
    e370:	and	w1, w1, #0x1
    e374:	ldr	x0, [x6, x7, lsl #3]
    e378:	add	x3, x3, #0x5
    e37c:	ldr	x6, [x4, x5, lsl #3]
    e380:	csel	w4, w1, wzr, eq  // eq = none
    e384:	and	x4, x4, #0xff
    e388:	and	w5, w2, #0x3
    e38c:	add	x0, x0, x6
    e390:	add	x0, x0, x3
    e394:	add	x0, x0, x4
    e398:	cmp	x20, x0
    e39c:	b.cc	e3e0 <ZSTD_getDictID_fromFrame+0x118>  // b.lo, b.ul, b.last
    e3a0:	and	w1, w1, #0xff
    e3a4:	tbnz	w2, #3, e3e8 <ZSTD_getDictID_fromFrame+0x120>
    e3a8:	cbnz	w1, e40c <ZSTD_getDictID_fromFrame+0x144>
    e3ac:	ldrb	w0, [x19, #5]
    e3b0:	mov	x1, #0x6                   	// #6
    e3b4:	cmp	w0, #0xaf
    e3b8:	b.hi	e3e8 <ZSTD_getDictID_fromFrame+0x120>  // b.pmore
    e3bc:	cmp	w5, #0x2
    e3c0:	b.eq	e41c <ZSTD_getDictID_fromFrame+0x154>  // b.none
    e3c4:	cmp	w5, #0x3
    e3c8:	b.eq	e414 <ZSTD_getDictID_fromFrame+0x14c>  // b.none
    e3cc:	cmp	w5, #0x1
    e3d0:	mov	w0, #0x0                   	// #0
    e3d4:	b.ne	e338 <ZSTD_getDictID_fromFrame+0x70>  // b.any
    e3d8:	ldrb	w0, [x19, x1]
    e3dc:	b	e338 <ZSTD_getDictID_fromFrame+0x70>
    e3e0:	cmn	x0, #0x78
    e3e4:	b.ls	e334 <ZSTD_getDictID_fromFrame+0x6c>  // b.plast
    e3e8:	mov	w0, #0x0                   	// #0
    e3ec:	ldp	x19, x20, [sp, #16]
    e3f0:	ldp	x29, x30, [sp], #80
    e3f4:	ret
    e3f8:	add	x0, sp, #0x20
    e3fc:	mov	x2, #0x28                  	// #40
    e400:	mov	w1, #0x0                   	// #0
    e404:	bl	0 <grub_memset>
    e408:	b	e334 <ZSTD_getDictID_fromFrame+0x6c>
    e40c:	mov	x1, #0x5                   	// #5
    e410:	b	e3bc <ZSTD_getDictID_fromFrame+0xf4>
    e414:	ldr	w0, [x19, x1]
    e418:	b	e338 <ZSTD_getDictID_fromFrame+0x70>
    e41c:	ldrh	w0, [x19, x1]
    e420:	b	e338 <ZSTD_getDictID_fromFrame+0x70>
    e424:	nop
	...

000000000000e430 <ZSTD_decompress_usingDDict>:
    e430:	mov	x7, x5
    e434:	mov	x6, #0x0                   	// #0
    e438:	mov	x5, #0x0                   	// #0
    e43c:	b	d458 <ZSTD_decompressBegin_usingDDict+0x160>

000000000000e440 <ZSTD_createDStream>:
    e440:	stp	x29, x30, [sp, #-96]!
    e444:	adrp	x2, 0 <FSE_versionNumber>
    e448:	mov	x0, #0x71f8                	// #29176
    e44c:	mov	x29, sp
    e450:	ldr	x2, [x2]
    e454:	add	x1, sp, #0x10
    e458:	movk	x0, #0x2, lsl #16
    e45c:	add	x2, x2, #0x410
    e460:	ldp	x4, x5, [x2]
    e464:	stp	x4, x5, [sp, #16]
    e468:	ldr	x2, [x2, #16]
    e46c:	str	x2, [sp, #32]
    e470:	stp	x4, x5, [sp, #72]
    e474:	str	x2, [sp, #88]
    e478:	bl	8438 <ZSTD_malloc>
    e47c:	cbz	x0, e4e0 <ZSTD_createDStream+0xa0>
    e480:	add	x2, x0, #0x7, lsl #12
    e484:	add	x1, x0, #0x4, lsl #12
    e488:	ldp	x6, x7, [sp, #72]
    e48c:	mov	x3, #0x7200                	// #29184
    e490:	stp	x6, x7, [x2, #288]
    e494:	add	x3, x0, x3
    e498:	mov	x4, #0x1                   	// #1
    e49c:	ldr	x5, [sp, #88]
    e4a0:	str	x5, [x0, #28976]
    e4a4:	str	wzr, [x1, #12560]
    e4a8:	movk	x4, #0x800, lsl #16
    e4ac:	str	xzr, [x0, #28768]
    e4b0:	str	xzr, [x0, #29000]
    e4b4:	str	xzr, [x0, #29016]
    e4b8:	str	xzr, [x0, #29024]
    e4bc:	str	xzr, [x0, #29048]
    e4c0:	str	xzr, [x0, #29056]
    e4c4:	str	x4, [x0, #29072]
    e4c8:	str	xzr, [x0, #29088]
    e4cc:	stur	xzr, [x3, #-148]
    e4d0:	str	xzr, [x0, #29120]
    e4d4:	str	wzr, [x1, #12624]
    e4d8:	str	wzr, [x1, #12744]
    e4dc:	str	wzr, [x1, #12756]
    e4e0:	ldp	x29, x30, [sp], #96
    e4e4:	ret
	...

000000000000e4f0 <ZSTD_initStaticDStream>:
    e4f0:	mov	x2, x0
    e4f4:	mov	x0, #0x71f7                	// #29175
    e4f8:	movk	x0, #0x2, lsl #16
    e4fc:	tst	x2, #0x7
    e500:	ccmp	x1, x0, #0x0, eq  // eq = none
    e504:	mov	x0, #0x0                   	// #0
    e508:	b.ls	e564 <ZSTD_initStaticDStream+0x74>  // b.plast
    e50c:	add	x3, x2, #0x4, lsl #12
    e510:	mov	x0, #0x7200                	// #29184
    e514:	add	x5, x2, x0
    e518:	mov	x6, #0x1                   	// #1
    e51c:	movk	x6, #0x800, lsl #16
    e520:	add	x4, x2, #0x27, lsl #12
    e524:	str	wzr, [x3, #12560]
    e528:	mov	x0, x2
    e52c:	str	xzr, [x2, #28768]
    e530:	add	x4, x4, #0x1f8
    e534:	str	xzr, [x2, #29016]
    e538:	str	xzr, [x2, #29024]
    e53c:	str	xzr, [x2, #29056]
    e540:	str	x6, [x2, #29072]
    e544:	str	xzr, [x2, #29088]
    e548:	stur	xzr, [x5, #-148]
    e54c:	str	xzr, [x2, #29120]
    e550:	str	wzr, [x3, #12624]
    e554:	str	wzr, [x3, #12744]
    e558:	str	wzr, [x3, #12756]
    e55c:	str	x1, [x2, #29000]
    e560:	str	x4, [x2, #29048]
    e564:	ret

000000000000e568 <ZSTD_createDStream_advanced>:
    e568:	stp	x29, x30, [sp, #-80]!
    e56c:	mov	x29, sp
    e570:	ldp	x1, x3, [x0]
    e574:	ldp	x4, x5, [x0]
    e578:	stp	x4, x5, [sp, #56]
    e57c:	ldr	x2, [x0, #16]
    e580:	cmp	x1, #0x0
    e584:	cset	w1, eq  // eq = none
    e588:	cmp	x3, #0x0
    e58c:	str	x2, [sp, #72]
    e590:	cset	w0, eq  // eq = none
    e594:	cmp	w1, w0
    e598:	b.ne	e620 <ZSTD_createDStream_advanced+0xb8>  // b.any
    e59c:	mov	x0, #0x71f8                	// #29176
    e5a0:	add	x1, sp, #0x10
    e5a4:	movk	x0, #0x2, lsl #16
    e5a8:	stp	x4, x5, [sp, #16]
    e5ac:	str	x2, [sp, #32]
    e5b0:	bl	8438 <ZSTD_malloc>
    e5b4:	cbz	x0, e618 <ZSTD_createDStream_advanced+0xb0>
    e5b8:	add	x3, x0, #0x7, lsl #12
    e5bc:	add	x1, x0, #0x4, lsl #12
    e5c0:	ldp	x6, x7, [sp, #56]
    e5c4:	mov	x2, #0x7200                	// #29184
    e5c8:	stp	x6, x7, [x3, #288]
    e5cc:	add	x2, x0, x2
    e5d0:	mov	x4, #0x1                   	// #1
    e5d4:	ldr	x5, [sp, #72]
    e5d8:	str	x5, [x0, #28976]
    e5dc:	str	wzr, [x1, #12560]
    e5e0:	movk	x4, #0x800, lsl #16
    e5e4:	str	xzr, [x0, #28768]
    e5e8:	str	xzr, [x0, #29000]
    e5ec:	str	xzr, [x0, #29016]
    e5f0:	str	xzr, [x0, #29024]
    e5f4:	str	xzr, [x0, #29048]
    e5f8:	str	xzr, [x0, #29056]
    e5fc:	str	x4, [x0, #29072]
    e600:	str	xzr, [x0, #29088]
    e604:	stur	xzr, [x2, #-148]
    e608:	str	xzr, [x0, #29120]
    e60c:	str	wzr, [x1, #12624]
    e610:	str	wzr, [x1, #12744]
    e614:	str	wzr, [x1, #12756]
    e618:	ldp	x29, x30, [sp], #80
    e61c:	ret
    e620:	mov	x0, #0x0                   	// #0
    e624:	ldp	x29, x30, [sp], #80
    e628:	ret
    e62c:	nop

000000000000e630 <ZSTD_freeDStream>:
    e630:	stp	x29, x30, [sp, #-128]!
    e634:	mov	x29, sp
    e638:	stp	x19, x20, [sp, #16]
    e63c:	cbz	x0, e710 <ZSTD_freeDStream+0xe0>
    e640:	ldr	x20, [x0, #29000]
    e644:	mov	x19, x0
    e648:	cbnz	x20, e724 <ZSTD_freeDStream+0xf4>
    e64c:	add	x0, x0, #0x7, lsl #12
    e650:	stp	x21, x22, [sp, #32]
    e654:	add	x21, sp, #0x30
    e658:	ldr	x22, [x19, #29016]
    e65c:	ldp	x2, x3, [x0, #288]
    e660:	stp	x2, x3, [sp, #80]
    e664:	ldr	x0, [x19, #28976]
    e668:	str	x0, [sp, #96]
    e66c:	cbz	x22, e6bc <ZSTD_freeDStream+0x8c>
    e670:	mov	x0, #0x6800                	// #26624
    e674:	add	x0, x22, x0
    e678:	add	x21, sp, #0x30
    e67c:	mov	x1, x21
    e680:	ldp	x2, x3, [x0, #72]
    e684:	stp	x2, x3, [sp, #104]
    e688:	ldr	x0, [x22, #26712]
    e68c:	stp	x2, x3, [sp, #48]
    e690:	str	x0, [sp, #64]
    e694:	str	x0, [sp, #120]
    e698:	ldr	x0, [x22]
    e69c:	bl	84a8 <ZSTD_free>
    e6a0:	ldp	x4, x5, [sp, #104]
    e6a4:	mov	x0, x22
    e6a8:	ldr	x2, [sp, #120]
    e6ac:	mov	x1, x21
    e6b0:	stp	x4, x5, [sp, #48]
    e6b4:	str	x2, [sp, #64]
    e6b8:	bl	84a8 <ZSTD_free>
    e6bc:	ldp	x4, x5, [sp, #80]
    e6c0:	str	xzr, [x19, #29016]
    e6c4:	ldr	x2, [sp, #96]
    e6c8:	mov	x1, x21
    e6cc:	ldr	x0, [x19, #29048]
    e6d0:	stp	x4, x5, [sp, #48]
    e6d4:	str	x2, [sp, #64]
    e6d8:	bl	84a8 <ZSTD_free>
    e6dc:	str	xzr, [x19, #29048]
    e6e0:	ldp	x4, x5, [sp, #80]
    e6e4:	mov	x1, x21
    e6e8:	ldr	x2, [sp, #96]
    e6ec:	mov	x0, x19
    e6f0:	stp	x4, x5, [sp, #48]
    e6f4:	str	x2, [sp, #64]
    e6f8:	bl	84a8 <ZSTD_free>
    e6fc:	mov	x0, x20
    e700:	ldp	x19, x20, [sp, #16]
    e704:	ldp	x21, x22, [sp, #32]
    e708:	ldp	x29, x30, [sp], #128
    e70c:	ret
    e710:	mov	x20, #0x0                   	// #0
    e714:	mov	x0, x20
    e718:	ldp	x19, x20, [sp, #16]
    e71c:	ldp	x29, x30, [sp], #128
    e720:	ret
    e724:	mov	x20, #0xffffffffffffffc0    	// #-64
    e728:	mov	x0, x20
    e72c:	ldp	x19, x20, [sp, #16]
    e730:	ldp	x29, x30, [sp], #128
    e734:	ret

000000000000e738 <ZSTD_DStreamInSize>:
    e738:	mov	x0, #0x3                   	// #3
    e73c:	movk	x0, #0x2, lsl #16
    e740:	ret
    e744:	nop

000000000000e748 <ZSTD_DStreamOutSize>:
    e748:	mov	x0, #0x20000               	// #131072
    e74c:	ret

000000000000e750 <ZSTD_DCtx_loadDictionary_advanced>:
    e750:	stp	x29, x30, [sp, #-128]!
    e754:	mov	x29, sp
    e758:	stp	x19, x20, [sp, #16]
    e75c:	mov	x19, x0
    e760:	add	x0, x0, #0x4, lsl #12
    e764:	ldr	w0, [x0, #12656]
    e768:	cbnz	w0, e84c <ZSTD_DCtx_loadDictionary_advanced+0xfc>
    e76c:	stp	x23, x24, [sp, #48]
    e770:	mov	x20, x1
    e774:	mov	w23, w4
    e778:	ldr	x24, [x19, #29016]
    e77c:	stp	x21, x22, [sp, #32]
    e780:	mov	x21, x2
    e784:	mov	w22, w3
    e788:	cbz	x24, e7d4 <ZSTD_DCtx_loadDictionary_advanced+0x84>
    e78c:	mov	x0, #0x6800                	// #26624
    e790:	add	x0, x24, x0
    e794:	add	x1, sp, #0x40
    e798:	ldp	x2, x3, [x0, #72]
    e79c:	stp	x2, x3, [sp, #104]
    e7a0:	ldr	x0, [x24, #26712]
    e7a4:	stp	x2, x3, [sp, #64]
    e7a8:	str	x0, [sp, #80]
    e7ac:	str	x0, [sp, #120]
    e7b0:	ldr	x0, [x24]
    e7b4:	bl	84a8 <ZSTD_free>
    e7b8:	ldp	x2, x3, [sp, #104]
    e7bc:	add	x1, sp, #0x40
    e7c0:	ldr	x4, [sp, #120]
    e7c4:	mov	x0, x24
    e7c8:	stp	x2, x3, [sp, #64]
    e7cc:	str	x4, [sp, #80]
    e7d0:	bl	84a8 <ZSTD_free>
    e7d4:	cmp	x20, #0x0
    e7d8:	ccmp	x21, #0x7, #0x0, ne  // ne = any
    e7dc:	b.hi	e804 <ZSTD_DCtx_loadDictionary_advanced+0xb4>  // b.pmore
    e7e0:	mov	x1, #0x0                   	// #0
    e7e4:	str	xzr, [x19, #29016]
    e7e8:	mov	x0, #0x0                   	// #0
    e7ec:	ldp	x21, x22, [sp, #32]
    e7f0:	ldp	x23, x24, [sp, #48]
    e7f4:	str	x1, [x19, #29024]
    e7f8:	ldp	x19, x20, [sp, #16]
    e7fc:	ldp	x29, x30, [sp], #128
    e800:	ret
    e804:	add	x5, x19, #0x7, lsl #12
    e808:	mov	x1, x21
    e80c:	mov	w3, w23
    e810:	mov	w2, w22
    e814:	mov	x0, x20
    e818:	add	x4, sp, #0x40
    e81c:	ldp	x6, x7, [x5, #288]
    e820:	stp	x6, x7, [sp, #64]
    e824:	ldr	x5, [x19, #28976]
    e828:	str	x5, [sp, #80]
    e82c:	bl	db50 <ZSTD_createDDict_advanced>
    e830:	str	x0, [x19, #29016]
    e834:	mov	x1, x0
    e838:	cbnz	x0, e7e8 <ZSTD_DCtx_loadDictionary_advanced+0x98>
    e83c:	mov	x0, #0xffffffffffffffc0    	// #-64
    e840:	ldp	x21, x22, [sp, #32]
    e844:	ldp	x23, x24, [sp, #48]
    e848:	b	e7f8 <ZSTD_DCtx_loadDictionary_advanced+0xa8>
    e84c:	mov	x0, #0xffffffffffffffc4    	// #-60
    e850:	ldp	x19, x20, [sp, #16]
    e854:	ldp	x29, x30, [sp], #128
    e858:	ret
    e85c:	nop

000000000000e860 <ZSTD_DCtx_loadDictionary_byReference>:
    e860:	stp	x29, x30, [sp, #-112]!
    e864:	mov	x29, sp
    e868:	stp	x19, x20, [sp, #16]
    e86c:	mov	x19, x0
    e870:	add	x0, x0, #0x4, lsl #12
    e874:	ldr	w0, [x0, #12656]
    e878:	cbnz	w0, e948 <ZSTD_DCtx_loadDictionary_byReference+0xe8>
    e87c:	stp	x21, x22, [sp, #32]
    e880:	mov	x20, x1
    e884:	mov	x21, x2
    e888:	ldr	x22, [x19, #29016]
    e88c:	cbz	x22, e8d8 <ZSTD_DCtx_loadDictionary_byReference+0x78>
    e890:	mov	x0, #0x6800                	// #26624
    e894:	add	x0, x22, x0
    e898:	add	x1, sp, #0x30
    e89c:	ldp	x2, x3, [x0, #72]
    e8a0:	stp	x2, x3, [sp, #88]
    e8a4:	ldr	x0, [x22, #26712]
    e8a8:	stp	x2, x3, [sp, #48]
    e8ac:	str	x0, [sp, #64]
    e8b0:	str	x0, [sp, #104]
    e8b4:	ldr	x0, [x22]
    e8b8:	bl	84a8 <ZSTD_free>
    e8bc:	ldp	x4, x5, [sp, #88]
    e8c0:	add	x1, sp, #0x30
    e8c4:	ldr	x2, [sp, #104]
    e8c8:	mov	x0, x22
    e8cc:	stp	x4, x5, [sp, #48]
    e8d0:	str	x2, [sp, #64]
    e8d4:	bl	84a8 <ZSTD_free>
    e8d8:	cmp	x20, #0x0
    e8dc:	ccmp	x21, #0x7, #0x0, ne  // ne = any
    e8e0:	b.hi	e904 <ZSTD_DCtx_loadDictionary_byReference+0xa4>  // b.pmore
    e8e4:	mov	x1, #0x0                   	// #0
    e8e8:	str	xzr, [x19, #29016]
    e8ec:	mov	x0, #0x0                   	// #0
    e8f0:	ldp	x21, x22, [sp, #32]
    e8f4:	str	x1, [x19, #29024]
    e8f8:	ldp	x19, x20, [sp, #16]
    e8fc:	ldp	x29, x30, [sp], #112
    e900:	ret
    e904:	add	x5, x19, #0x7, lsl #12
    e908:	mov	x1, x21
    e90c:	mov	x0, x20
    e910:	add	x4, sp, #0x30
    e914:	mov	w3, #0x0                   	// #0
    e918:	mov	w2, #0x1                   	// #1
    e91c:	ldp	x6, x7, [x5, #288]
    e920:	stp	x6, x7, [sp, #48]
    e924:	ldr	x5, [x19, #28976]
    e928:	str	x5, [sp, #64]
    e92c:	bl	db50 <ZSTD_createDDict_advanced>
    e930:	str	x0, [x19, #29016]
    e934:	mov	x1, x0
    e938:	cbnz	x0, e8ec <ZSTD_DCtx_loadDictionary_byReference+0x8c>
    e93c:	mov	x0, #0xffffffffffffffc0    	// #-64
    e940:	ldp	x21, x22, [sp, #32]
    e944:	b	e8f8 <ZSTD_DCtx_loadDictionary_byReference+0x98>
    e948:	mov	x0, #0xffffffffffffffc4    	// #-60
    e94c:	ldp	x19, x20, [sp, #16]
    e950:	ldp	x29, x30, [sp], #112
    e954:	ret

000000000000e958 <ZSTD_DCtx_loadDictionary>:
    e958:	stp	x29, x30, [sp, #-112]!
    e95c:	mov	x29, sp
    e960:	stp	x19, x20, [sp, #16]
    e964:	mov	x19, x0
    e968:	add	x0, x0, #0x4, lsl #12
    e96c:	ldr	w0, [x0, #12656]
    e970:	cbnz	w0, ea40 <ZSTD_DCtx_loadDictionary+0xe8>
    e974:	stp	x21, x22, [sp, #32]
    e978:	mov	x20, x1
    e97c:	mov	x21, x2
    e980:	ldr	x22, [x19, #29016]
    e984:	cbz	x22, e9d0 <ZSTD_DCtx_loadDictionary+0x78>
    e988:	mov	x0, #0x6800                	// #26624
    e98c:	add	x0, x22, x0
    e990:	add	x1, sp, #0x30
    e994:	ldp	x2, x3, [x0, #72]
    e998:	stp	x2, x3, [sp, #88]
    e99c:	ldr	x0, [x22, #26712]
    e9a0:	stp	x2, x3, [sp, #48]
    e9a4:	str	x0, [sp, #64]
    e9a8:	str	x0, [sp, #104]
    e9ac:	ldr	x0, [x22]
    e9b0:	bl	84a8 <ZSTD_free>
    e9b4:	ldp	x4, x5, [sp, #88]
    e9b8:	add	x1, sp, #0x30
    e9bc:	ldr	x2, [sp, #104]
    e9c0:	mov	x0, x22
    e9c4:	stp	x4, x5, [sp, #48]
    e9c8:	str	x2, [sp, #64]
    e9cc:	bl	84a8 <ZSTD_free>
    e9d0:	cmp	x20, #0x0
    e9d4:	ccmp	x21, #0x7, #0x0, ne  // ne = any
    e9d8:	b.hi	e9fc <ZSTD_DCtx_loadDictionary+0xa4>  // b.pmore
    e9dc:	mov	x1, #0x0                   	// #0
    e9e0:	str	xzr, [x19, #29016]
    e9e4:	mov	x0, #0x0                   	// #0
    e9e8:	ldp	x21, x22, [sp, #32]
    e9ec:	str	x1, [x19, #29024]
    e9f0:	ldp	x19, x20, [sp, #16]
    e9f4:	ldp	x29, x30, [sp], #112
    e9f8:	ret
    e9fc:	add	x5, x19, #0x7, lsl #12
    ea00:	mov	x1, x21
    ea04:	mov	x0, x20
    ea08:	add	x4, sp, #0x30
    ea0c:	mov	w3, #0x0                   	// #0
    ea10:	mov	w2, #0x0                   	// #0
    ea14:	ldp	x6, x7, [x5, #288]
    ea18:	stp	x6, x7, [sp, #48]
    ea1c:	ldr	x5, [x19, #28976]
    ea20:	str	x5, [sp, #64]
    ea24:	bl	db50 <ZSTD_createDDict_advanced>
    ea28:	str	x0, [x19, #29016]
    ea2c:	mov	x1, x0
    ea30:	cbnz	x0, e9e4 <ZSTD_DCtx_loadDictionary+0x8c>
    ea34:	mov	x0, #0xffffffffffffffc0    	// #-64
    ea38:	ldp	x21, x22, [sp, #32]
    ea3c:	b	e9f0 <ZSTD_DCtx_loadDictionary+0x98>
    ea40:	mov	x0, #0xffffffffffffffc4    	// #-60
    ea44:	ldp	x19, x20, [sp, #16]
    ea48:	ldp	x29, x30, [sp], #112
    ea4c:	ret

000000000000ea50 <ZSTD_DCtx_refPrefix_advanced>:
    ea50:	stp	x29, x30, [sp, #-128]!
    ea54:	mov	x29, sp
    ea58:	stp	x19, x20, [sp, #16]
    ea5c:	mov	x19, x0
    ea60:	add	x0, x0, #0x4, lsl #12
    ea64:	ldr	w0, [x0, #12656]
    ea68:	cbnz	w0, eb48 <ZSTD_DCtx_refPrefix_advanced+0xf8>
    ea6c:	str	x23, [sp, #48]
    ea70:	mov	x20, x1
    ea74:	ldr	x23, [x19, #29016]
    ea78:	stp	x21, x22, [sp, #32]
    ea7c:	mov	x21, x2
    ea80:	mov	w22, w3
    ea84:	cbz	x23, ead0 <ZSTD_DCtx_refPrefix_advanced+0x80>
    ea88:	mov	x0, #0x6800                	// #26624
    ea8c:	add	x0, x23, x0
    ea90:	add	x1, sp, #0x40
    ea94:	ldp	x2, x3, [x0, #72]
    ea98:	stp	x2, x3, [sp, #104]
    ea9c:	ldr	x0, [x23, #26712]
    eaa0:	stp	x2, x3, [sp, #64]
    eaa4:	str	x0, [sp, #80]
    eaa8:	str	x0, [sp, #120]
    eaac:	ldr	x0, [x23]
    eab0:	bl	84a8 <ZSTD_free>
    eab4:	ldp	x4, x5, [sp, #104]
    eab8:	add	x1, sp, #0x40
    eabc:	ldr	x2, [sp, #120]
    eac0:	mov	x0, x23
    eac4:	stp	x4, x5, [sp, #64]
    eac8:	str	x2, [sp, #80]
    eacc:	bl	84a8 <ZSTD_free>
    ead0:	cmp	x20, #0x0
    ead4:	ccmp	x21, #0x7, #0x0, ne  // ne = any
    ead8:	b.hi	eb00 <ZSTD_DCtx_refPrefix_advanced+0xb0>  // b.pmore
    eadc:	mov	x1, #0x0                   	// #0
    eae0:	str	xzr, [x19, #29016]
    eae4:	mov	x0, #0x0                   	// #0
    eae8:	ldp	x21, x22, [sp, #32]
    eaec:	ldr	x23, [sp, #48]
    eaf0:	str	x1, [x19, #29024]
    eaf4:	ldp	x19, x20, [sp, #16]
    eaf8:	ldp	x29, x30, [sp], #128
    eafc:	ret
    eb00:	add	x5, x19, #0x7, lsl #12
    eb04:	mov	x1, x21
    eb08:	mov	w3, w22
    eb0c:	mov	x0, x20
    eb10:	add	x4, sp, #0x40
    eb14:	mov	w2, #0x1                   	// #1
    eb18:	ldp	x6, x7, [x5, #288]
    eb1c:	stp	x6, x7, [sp, #64]
    eb20:	ldr	x5, [x19, #28976]
    eb24:	str	x5, [sp, #80]
    eb28:	bl	db50 <ZSTD_createDDict_advanced>
    eb2c:	str	x0, [x19, #29016]
    eb30:	mov	x1, x0
    eb34:	cbnz	x0, eae4 <ZSTD_DCtx_refPrefix_advanced+0x94>
    eb38:	mov	x0, #0xffffffffffffffc0    	// #-64
    eb3c:	ldp	x21, x22, [sp, #32]
    eb40:	ldr	x23, [sp, #48]
    eb44:	b	eaf4 <ZSTD_DCtx_refPrefix_advanced+0xa4>
    eb48:	mov	x0, #0xffffffffffffffc4    	// #-60
    eb4c:	ldp	x19, x20, [sp, #16]
    eb50:	ldp	x29, x30, [sp], #128
    eb54:	ret

000000000000eb58 <ZSTD_DCtx_refPrefix>:
    eb58:	stp	x29, x30, [sp, #-112]!
    eb5c:	mov	x29, sp
    eb60:	stp	x19, x20, [sp, #16]
    eb64:	mov	x19, x0
    eb68:	add	x0, x0, #0x4, lsl #12
    eb6c:	ldr	w0, [x0, #12656]
    eb70:	cbnz	w0, ec40 <ZSTD_DCtx_refPrefix+0xe8>
    eb74:	stp	x21, x22, [sp, #32]
    eb78:	mov	x20, x1
    eb7c:	mov	x21, x2
    eb80:	ldr	x22, [x19, #29016]
    eb84:	cbz	x22, ebd0 <ZSTD_DCtx_refPrefix+0x78>
    eb88:	mov	x0, #0x6800                	// #26624
    eb8c:	add	x0, x22, x0
    eb90:	add	x1, sp, #0x30
    eb94:	ldp	x2, x3, [x0, #72]
    eb98:	stp	x2, x3, [sp, #88]
    eb9c:	ldr	x0, [x22, #26712]
    eba0:	stp	x2, x3, [sp, #48]
    eba4:	str	x0, [sp, #64]
    eba8:	str	x0, [sp, #104]
    ebac:	ldr	x0, [x22]
    ebb0:	bl	84a8 <ZSTD_free>
    ebb4:	ldp	x4, x5, [sp, #88]
    ebb8:	add	x1, sp, #0x30
    ebbc:	ldr	x2, [sp, #104]
    ebc0:	mov	x0, x22
    ebc4:	stp	x4, x5, [sp, #48]
    ebc8:	str	x2, [sp, #64]
    ebcc:	bl	84a8 <ZSTD_free>
    ebd0:	cmp	x20, #0x0
    ebd4:	ccmp	x21, #0x7, #0x0, ne  // ne = any
    ebd8:	b.hi	ebfc <ZSTD_DCtx_refPrefix+0xa4>  // b.pmore
    ebdc:	mov	x1, #0x0                   	// #0
    ebe0:	str	xzr, [x19, #29016]
    ebe4:	mov	x0, #0x0                   	// #0
    ebe8:	ldp	x21, x22, [sp, #32]
    ebec:	str	x1, [x19, #29024]
    ebf0:	ldp	x19, x20, [sp, #16]
    ebf4:	ldp	x29, x30, [sp], #112
    ebf8:	ret
    ebfc:	add	x5, x19, #0x7, lsl #12
    ec00:	mov	x1, x21
    ec04:	mov	w3, #0x1                   	// #1
    ec08:	mov	x0, x20
    ec0c:	add	x4, sp, #0x30
    ec10:	mov	w2, w3
    ec14:	ldp	x6, x7, [x5, #288]
    ec18:	stp	x6, x7, [sp, #48]
    ec1c:	ldr	x5, [x19, #28976]
    ec20:	str	x5, [sp, #64]
    ec24:	bl	db50 <ZSTD_createDDict_advanced>
    ec28:	str	x0, [x19, #29016]
    ec2c:	mov	x1, x0
    ec30:	cbnz	x0, ebe4 <ZSTD_DCtx_refPrefix+0x8c>
    ec34:	mov	x0, #0xffffffffffffffc0    	// #-64
    ec38:	ldp	x21, x22, [sp, #32]
    ec3c:	b	ebf0 <ZSTD_DCtx_refPrefix+0x98>
    ec40:	mov	x0, #0xffffffffffffffc4    	// #-60
    ec44:	ldp	x19, x20, [sp, #16]
    ec48:	ldp	x29, x30, [sp], #112
    ec4c:	ret

000000000000ec50 <ZSTD_initDStream_usingDict>:
    ec50:	stp	x29, x30, [sp, #-112]!
    ec54:	mov	x29, sp
    ec58:	stp	x19, x20, [sp, #16]
    ec5c:	mov	x19, x0
    ec60:	add	x0, x0, #0x4, lsl #12
    ec64:	stp	x21, x22, [sp, #32]
    ec68:	mov	x20, x1
    ec6c:	mov	x21, x2
    ec70:	ldr	x22, [x19, #29016]
    ec74:	str	wzr, [x0, #12656]
    ec78:	str	wzr, [x0, #12756]
    ec7c:	cbz	x22, ecc8 <ZSTD_initDStream_usingDict+0x78>
    ec80:	mov	x0, #0x6800                	// #26624
    ec84:	add	x0, x22, x0
    ec88:	add	x1, sp, #0x30
    ec8c:	ldp	x2, x3, [x0, #72]
    ec90:	stp	x2, x3, [sp, #88]
    ec94:	ldr	x0, [x22, #26712]
    ec98:	stp	x2, x3, [sp, #48]
    ec9c:	str	x0, [sp, #64]
    eca0:	str	x0, [sp, #104]
    eca4:	ldr	x0, [x22]
    eca8:	bl	84a8 <ZSTD_free>
    ecac:	ldp	x4, x5, [sp, #88]
    ecb0:	add	x1, sp, #0x30
    ecb4:	ldr	x2, [sp, #104]
    ecb8:	mov	x0, x22
    ecbc:	stp	x4, x5, [sp, #48]
    ecc0:	str	x2, [sp, #64]
    ecc4:	bl	84a8 <ZSTD_free>
    ecc8:	cmp	x20, #0x0
    eccc:	ccmp	x21, #0x7, #0x0, ne  // ne = any
    ecd0:	b.hi	ecf4 <ZSTD_initDStream_usingDict+0xa4>  // b.pmore
    ecd4:	mov	x1, #0x0                   	// #0
    ecd8:	str	xzr, [x19, #29016]
    ecdc:	mov	x0, #0x5                   	// #5
    ece0:	str	x1, [x19, #29024]
    ece4:	ldp	x19, x20, [sp, #16]
    ece8:	ldp	x21, x22, [sp, #32]
    ecec:	ldp	x29, x30, [sp], #112
    ecf0:	ret
    ecf4:	add	x5, x19, #0x7, lsl #12
    ecf8:	mov	x1, x21
    ecfc:	mov	x0, x20
    ed00:	add	x4, sp, #0x30
    ed04:	mov	w3, #0x0                   	// #0
    ed08:	mov	w2, #0x0                   	// #0
    ed0c:	ldp	x6, x7, [x5, #288]
    ed10:	stp	x6, x7, [sp, #48]
    ed14:	ldr	x5, [x19, #28976]
    ed18:	str	x5, [sp, #64]
    ed1c:	bl	db50 <ZSTD_createDDict_advanced>
    ed20:	str	x0, [x19, #29016]
    ed24:	mov	x1, x0
    ed28:	cbnz	x0, ecdc <ZSTD_initDStream_usingDict+0x8c>
    ed2c:	mov	x0, #0xffffffffffffffc0    	// #-64
    ed30:	b	ece4 <ZSTD_initDStream_usingDict+0x94>
    ed34:	nop

000000000000ed38 <ZSTD_initDStream>:
    ed38:	stp	x29, x30, [sp, #-96]!
    ed3c:	mov	x29, sp
    ed40:	stp	x19, x20, [sp, #16]
    ed44:	mov	x19, x0
    ed48:	add	x0, x0, #0x4, lsl #12
    ed4c:	ldr	x20, [x19, #29016]
    ed50:	str	wzr, [x0, #12656]
    ed54:	str	wzr, [x0, #12756]
    ed58:	cbz	x20, eda4 <ZSTD_initDStream+0x6c>
    ed5c:	mov	x0, #0x6800                	// #26624
    ed60:	add	x0, x20, x0
    ed64:	add	x1, sp, #0x20
    ed68:	ldp	x2, x3, [x0, #72]
    ed6c:	stp	x2, x3, [sp, #72]
    ed70:	ldr	x0, [x20, #26712]
    ed74:	stp	x2, x3, [sp, #32]
    ed78:	str	x0, [sp, #48]
    ed7c:	str	x0, [sp, #88]
    ed80:	ldr	x0, [x20]
    ed84:	bl	84a8 <ZSTD_free>
    ed88:	ldp	x4, x5, [sp, #72]
    ed8c:	add	x1, sp, #0x20
    ed90:	ldr	x2, [sp, #88]
    ed94:	mov	x0, x20
    ed98:	stp	x4, x5, [sp, #32]
    ed9c:	str	x2, [sp, #48]
    eda0:	bl	84a8 <ZSTD_free>
    eda4:	str	xzr, [x19, #29016]
    eda8:	mov	x0, #0x5                   	// #5
    edac:	str	xzr, [x19, #29024]
    edb0:	ldp	x19, x20, [sp, #16]
    edb4:	ldp	x29, x30, [sp], #96
    edb8:	ret
    edbc:	nop

000000000000edc0 <ZSTD_initDStream_usingDDict>:
    edc0:	stp	x29, x30, [sp, #-112]!
    edc4:	mov	x29, sp
    edc8:	stp	x19, x20, [sp, #16]
    edcc:	mov	x19, x0
    edd0:	add	x0, x0, #0x4, lsl #12
    edd4:	str	x21, [sp, #32]
    edd8:	mov	x20, x1
    eddc:	ldr	x21, [x19, #29016]
    ede0:	str	wzr, [x0, #12656]
    ede4:	str	wzr, [x0, #12756]
    ede8:	cbz	x21, ee34 <ZSTD_initDStream_usingDDict+0x74>
    edec:	mov	x0, #0x6800                	// #26624
    edf0:	add	x0, x21, x0
    edf4:	add	x1, sp, #0x30
    edf8:	ldp	x2, x3, [x0, #72]
    edfc:	stp	x2, x3, [sp, #88]
    ee00:	ldr	x0, [x21, #26712]
    ee04:	stp	x2, x3, [sp, #48]
    ee08:	str	x0, [sp, #64]
    ee0c:	str	x0, [sp, #104]
    ee10:	ldr	x0, [x21]
    ee14:	bl	84a8 <ZSTD_free>
    ee18:	ldp	x4, x5, [sp, #88]
    ee1c:	add	x1, sp, #0x30
    ee20:	ldr	x2, [sp, #104]
    ee24:	mov	x0, x21
    ee28:	stp	x4, x5, [sp, #48]
    ee2c:	str	x2, [sp, #64]
    ee30:	bl	84a8 <ZSTD_free>
    ee34:	ldr	x21, [sp, #32]
    ee38:	str	xzr, [x19, #29016]
    ee3c:	str	x20, [x19, #29024]
    ee40:	mov	x0, #0x5                   	// #5
    ee44:	ldp	x19, x20, [sp, #16]
    ee48:	ldp	x29, x30, [sp], #112
    ee4c:	ret

000000000000ee50 <ZSTD_resetDStream>:
    ee50:	mov	x1, x0
    ee54:	mov	x2, #0x7200                	// #29184
    ee58:	add	x3, x1, #0x4, lsl #12
    ee5c:	add	x2, x1, x2
    ee60:	mov	w4, #0x1                   	// #1
    ee64:	mov	x0, #0x5                   	// #5
    ee68:	str	w4, [x3, #12656]
    ee6c:	str	xzr, [x1, #29064]
    ee70:	str	xzr, [x1, #29096]
    ee74:	str	xzr, [x1, #29104]
    ee78:	str	xzr, [x1, #29112]
    ee7c:	stur	xzr, [x2, #-52]
    ee80:	ret
    ee84:	nop

000000000000ee88 <ZSTD_setDStreamParameter>:
    ee88:	mov	x3, x0
    ee8c:	add	x0, x0, #0x4, lsl #12
    ee90:	ldr	w0, [x0, #12656]
    ee94:	cbnz	w0, eeb4 <ZSTD_setDStreamParameter+0x2c>
    ee98:	mov	x0, #0xffffffffffffffd8    	// #-40
    ee9c:	cbnz	w1, eeb0 <ZSTD_setDStreamParameter+0x28>
    eea0:	cmp	w2, #0x0
    eea4:	mov	x0, #0x0                   	// #0
    eea8:	csinv	w2, w2, wzr, ne  // ne = any
    eeac:	str	x2, [x3, #29072]
    eeb0:	ret
    eeb4:	mov	x0, #0xffffffffffffffc4    	// #-60
    eeb8:	ret
    eebc:	nop

000000000000eec0 <ZSTD_DCtx_refDDict>:
    eec0:	mov	x2, x0
    eec4:	add	x0, x0, #0x4, lsl #12
    eec8:	ldr	w0, [x0, #12656]
    eecc:	cbnz	w0, eedc <ZSTD_DCtx_refDDict+0x1c>
    eed0:	mov	x0, #0x0                   	// #0
    eed4:	str	x1, [x2, #29024]
    eed8:	ret
    eedc:	mov	x0, #0xffffffffffffffc4    	// #-60
    eee0:	ret
    eee4:	nop

000000000000eee8 <ZSTD_DCtx_setMaxWindowSize>:
    eee8:	mov	x2, x0
    eeec:	add	x0, x0, #0x4, lsl #12
    eef0:	ldr	w0, [x0, #12656]
    eef4:	cbnz	w0, ef04 <ZSTD_DCtx_setMaxWindowSize+0x1c>
    eef8:	mov	x0, #0x0                   	// #0
    eefc:	str	x1, [x2, #29072]
    ef00:	ret
    ef04:	mov	x0, #0xffffffffffffffc4    	// #-60
    ef08:	ret
    ef0c:	nop

000000000000ef10 <ZSTD_DCtx_setFormat>:
    ef10:	add	x2, x0, #0x4, lsl #12
    ef14:	ldr	w0, [x2, #12656]
    ef18:	cbnz	w0, ef28 <ZSTD_DCtx_setFormat+0x18>
    ef1c:	mov	x0, #0x0                   	// #0
    ef20:	str	w1, [x2, #12560]
    ef24:	ret
    ef28:	mov	x0, #0xffffffffffffffc4    	// #-60
    ef2c:	ret

000000000000ef30 <ZSTD_sizeof_DStream>:
    ef30:	cbz	x0, ef64 <ZSTD_sizeof_DStream+0x34>
    ef34:	ldr	x1, [x0, #29016]
    ef38:	cbz	x1, ef6c <ZSTD_sizeof_DStream+0x3c>
    ef3c:	ldr	x2, [x1]
    ef40:	cbz	x2, ef78 <ZSTD_sizeof_DStream+0x48>
    ef44:	ldr	x2, [x1, #16]
    ef48:	add	x2, x2, #0x2d, lsl #12
    ef4c:	add	x2, x2, #0xa58
    ef50:	ldr	x1, [x0, #29056]
    ef54:	ldr	x0, [x0, #29088]
    ef58:	add	x0, x1, x0
    ef5c:	add	x0, x0, x2
    ef60:	ret
    ef64:	mov	x0, #0x0                   	// #0
    ef68:	ret
    ef6c:	mov	x2, #0x71f8                	// #29176
    ef70:	movk	x2, #0x2, lsl #16
    ef74:	b	ef50 <ZSTD_sizeof_DStream+0x20>
    ef78:	mov	x2, #0xda58                	// #55896
    ef7c:	movk	x2, #0x2, lsl #16
    ef80:	b	ef50 <ZSTD_sizeof_DStream+0x20>
    ef84:	nop

000000000000ef88 <ZSTD_decodingBufferSize_min>:
    ef88:	mov	x2, #0x1ffff               	// #131071
    ef8c:	cmp	x0, x2
    ef90:	add	x3, x0, #0x10
    ef94:	mov	x2, #0x20000               	// #131072
    ef98:	csel	x2, x0, x2, ls  // ls = plast
    ef9c:	add	x0, x3, x2
    efa0:	cmp	x0, x1
    efa4:	csel	x0, x0, x1, ls  // ls = plast
    efa8:	ret
    efac:	nop

000000000000efb0 <ZSTD_estimateDStreamSize>:
    efb0:	mov	x2, #0x20000               	// #131072
    efb4:	cmp	x0, x2
    efb8:	csel	x1, x0, x2, ls  // ls = plast
    efbc:	mov	x4, #0x1ffff               	// #131071
    efc0:	cmp	x0, x4
    efc4:	add	x3, x0, #0x27, lsl #12
    efc8:	csel	x0, x0, x2, ls  // ls = plast
    efcc:	add	x3, x3, #0x208
    efd0:	add	x0, x1, x0
    efd4:	add	x0, x0, x3
    efd8:	ret
    efdc:	nop

000000000000efe0 <ZSTD_estimateDStreamSize_fromFrame>:
    efe0:	stp	x29, x30, [sp, #-80]!
    efe4:	mov	x2, #0x28                  	// #40
    efe8:	mov	x29, sp
    efec:	stp	x19, x20, [sp, #16]
    eff0:	mov	x20, x1
    eff4:	mov	x19, x0
    eff8:	mov	w1, #0x0                   	// #0
    effc:	add	x0, sp, #0x28
    f000:	bl	0 <grub_memset>
    f004:	cmp	x20, #0x4
    f008:	mov	x0, #0xffffffffffffffb8    	// #-72
    f00c:	b.ls	f04c <ZSTD_estimateDStreamSize_fromFrame+0x6c>  // b.plast
    f010:	cbz	x19, f178 <ZSTD_estimateDStreamSize_fromFrame+0x198>
    f014:	ldr	w0, [x19]
    f018:	mov	w1, #0xb528                	// #46376
    f01c:	movk	w1, #0xfd2f, lsl #16
    f020:	cmp	w0, w1
    f024:	b.eq	f058 <ZSTD_estimateDStreamSize_fromFrame+0x78>  // b.none
    f028:	and	w1, w0, #0xfffffff0
    f02c:	mov	w2, #0x2a50                	// #10832
    f030:	movk	w2, #0x184d, lsl #16
    f034:	mov	x0, #0xfffffffffffffff6    	// #-10
    f038:	cmp	w1, w2
    f03c:	b.ne	f04c <ZSTD_estimateDStreamSize_fromFrame+0x6c>  // b.any
    f040:	cmp	x20, #0x7
    f044:	mov	x0, #0xffffffffffffffb8    	// #-72
    f048:	b.hi	f104 <ZSTD_estimateDStreamSize_fromFrame+0x124>  // b.pmore
    f04c:	ldp	x19, x20, [sp, #16]
    f050:	ldp	x29, x30, [sp], #80
    f054:	ret
    f058:	adrp	x0, 0 <FSE_versionNumber>
    f05c:	ldrb	w4, [x19, #4]
    f060:	ldr	x1, [x0]
    f064:	ubfx	x7, x4, #6, #2
    f068:	and	x8, x4, #0x3
    f06c:	lsr	w0, w4, #5
    f070:	add	x5, x1, #0x428
    f074:	add	x1, x1, #0x448
    f078:	mvn	w2, w0
    f07c:	lsr	w6, w4, #6
    f080:	cmp	w6, #0x0
    f084:	and	x2, x2, #0x1
    f088:	ldr	x1, [x1, x7, lsl #3]
    f08c:	and	w3, w0, #0x1
    f090:	ldr	x5, [x5, x8, lsl #3]
    f094:	csel	w0, w3, wzr, eq  // eq = none
    f098:	add	x2, x2, #0x5
    f09c:	and	x0, x0, #0xff
    f0a0:	add	x1, x5, x1
    f0a4:	and	w7, w4, #0x3
    f0a8:	add	x2, x2, x1
    f0ac:	add	x0, x2, x0
    f0b0:	cmp	x20, x0
    f0b4:	b.cc	f158 <ZSTD_estimateDStreamSize_fromFrame+0x178>  // b.lo, b.ul, b.last
    f0b8:	and	w3, w3, #0xff
    f0bc:	mov	x0, #0xfffffffffffffff2    	// #-14
    f0c0:	tbnz	w4, #3, f04c <ZSTD_estimateDStreamSize_fromFrame+0x6c>
    f0c4:	cbnz	w3, f180 <ZSTD_estimateDStreamSize_fromFrame+0x1a0>
    f0c8:	ldrb	w1, [x19, #5]
    f0cc:	lsr	w0, w1, #3
    f0d0:	add	w0, w0, #0xa
    f0d4:	cmp	w0, #0x1f
    f0d8:	b.gt	f168 <ZSTD_estimateDStreamSize_fromFrame+0x188>
    f0dc:	mov	x4, #0x1                   	// #1
    f0e0:	and	x2, x1, #0x7
    f0e4:	lsl	x4, x4, x0
    f0e8:	mov	x8, #0xa                   	// #10
    f0ec:	lsr	x1, x4, #3
    f0f0:	mov	x9, #0x8                   	// #8
    f0f4:	mov	x5, #0x7                   	// #7
    f0f8:	mov	x0, #0x6                   	// #6
    f0fc:	madd	x1, x1, x2, x4
    f100:	b	f194 <ZSTD_estimateDStreamSize_fromFrame+0x1b4>
    f104:	mov	w1, #0x0                   	// #0
    f108:	add	x0, sp, #0x28
    f10c:	mov	x2, #0x28                  	// #40
    f110:	bl	0 <grub_memset>
    f114:	ldr	x1, [sp, #48]
    f118:	add	x0, x1, #0x27, lsl #12
    f11c:	mov	x2, #0x80000000            	// #2147483648
    f120:	add	x0, x0, #0x208
    f124:	cmp	x1, x2
    f128:	b.hi	f168 <ZSTD_estimateDStreamSize_fromFrame+0x188>  // b.pmore
    f12c:	cmp	x1, #0x20, lsl #12
    f130:	mov	x2, #0x20000               	// #131072
    f134:	mov	x4, #0x1ffff               	// #131071
    f138:	csel	x3, x1, x2, ls  // ls = plast
    f13c:	cmp	x1, x4
    f140:	csel	x1, x1, x2, ls  // ls = plast
    f144:	add	x1, x1, x3
    f148:	add	x0, x1, x0
    f14c:	ldp	x19, x20, [sp, #16]
    f150:	ldp	x29, x30, [sp], #80
    f154:	ret
    f158:	cmn	x0, #0x78
    f15c:	mov	x1, #0xffffffffffffffb8    	// #-72
    f160:	csel	x0, x0, x1, hi  // hi = pmore
    f164:	b	f04c <ZSTD_estimateDStreamSize_fromFrame+0x6c>
    f168:	mov	x0, #0xfffffffffffffff0    	// #-16
    f16c:	ldp	x19, x20, [sp, #16]
    f170:	ldp	x29, x30, [sp], #80
    f174:	ret
    f178:	mov	x0, #0xffffffffffffffff    	// #-1
    f17c:	b	f04c <ZSTD_estimateDStreamSize_fromFrame+0x6c>
    f180:	mov	x8, #0x9                   	// #9
    f184:	mov	x9, #0x7                   	// #7
    f188:	mov	x5, #0x6                   	// #6
    f18c:	mov	x1, #0x0                   	// #0
    f190:	mov	x0, #0x5                   	// #5
    f194:	cmp	w7, #0x2
    f198:	b.eq	f1fc <ZSTD_estimateDStreamSize_fromFrame+0x21c>  // b.none
    f19c:	cmp	w7, #0x3
    f1a0:	b.eq	f1e4 <ZSTD_estimateDStreamSize_fromFrame+0x204>  // b.none
    f1a4:	cmp	w7, #0x1
    f1a8:	csel	x0, x0, x5, ne  // ne = any
    f1ac:	cmp	w6, #0x2
    f1b0:	b.eq	f214 <ZSTD_estimateDStreamSize_fromFrame+0x234>  // b.none
    f1b4:	cmp	w6, #0x3
    f1b8:	b.eq	f204 <ZSTD_estimateDStreamSize_fromFrame+0x224>  // b.none
    f1bc:	cmp	w6, #0x1
    f1c0:	b.eq	f1ec <ZSTD_estimateDStreamSize_fromFrame+0x20c>  // b.none
    f1c4:	cbz	w3, f118 <ZSTD_estimateDStreamSize_fromFrame+0x138>
    f1c8:	ldrb	w1, [x19, x0]
    f1cc:	cmp	x1, #0x20, lsl #12
    f1d0:	add	x0, x1, #0x27, lsl #12
    f1d4:	mov	x3, #0x20000               	// #131072
    f1d8:	add	x0, x0, #0x208
    f1dc:	csel	x3, x1, x3, ls  // ls = plast
    f1e0:	b	f144 <ZSTD_estimateDStreamSize_fromFrame+0x164>
    f1e4:	mov	x0, x8
    f1e8:	b	f1ac <ZSTD_estimateDStreamSize_fromFrame+0x1cc>
    f1ec:	cbz	w3, f118 <ZSTD_estimateDStreamSize_fromFrame+0x138>
    f1f0:	ldrh	w1, [x19, x0]
    f1f4:	add	x1, x1, #0x100
    f1f8:	b	f1cc <ZSTD_estimateDStreamSize_fromFrame+0x1ec>
    f1fc:	mov	x0, x9
    f200:	b	f1ac <ZSTD_estimateDStreamSize_fromFrame+0x1cc>
    f204:	ldr	x0, [x19, x0]
    f208:	cmp	w3, #0x0
    f20c:	csel	x1, x1, x0, eq  // eq = none
    f210:	b	f118 <ZSTD_estimateDStreamSize_fromFrame+0x138>
    f214:	ldr	w0, [x19, x0]
    f218:	b	f208 <ZSTD_estimateDStreamSize_fromFrame+0x228>
    f21c:	nop
	...

000000000000f228 <ZSTD_decompressStream>:
    f228:	stp	x29, x30, [sp, #-208]!
    f22c:	mov	x29, sp
    f230:	stp	x25, x26, [sp, #64]
    f234:	stp	x27, x28, [sp, #80]
    f238:	mov	x27, x0
    f23c:	ldp	x0, x25, [x2, #8]
    f240:	str	x0, [sp, #112]
    f244:	cmp	x25, x0
    f248:	b.hi	f6a4 <ZSTD_decompressStream+0x47c>  // b.pmore
    f24c:	stp	x21, x22, [sp, #32]
    f250:	mov	x21, x1
    f254:	mov	x28, #0xffffffffffffffba    	// #-70
    f258:	ldp	x0, x1, [x1, #8]
    f25c:	cmp	x1, x0
    f260:	b.hi	f814 <ZSTD_decompressStream+0x5ec>  // b.pmore
    f264:	stp	x19, x20, [sp, #16]
    f268:	mov	x19, x2
    f26c:	add	x26, x27, #0x27, lsl #12
    f270:	ldr	x22, [x2]
    f274:	stp	x23, x24, [sp, #48]
    f278:	add	x24, x27, #0x4, lsl #12
    f27c:	ldr	x2, [x21]
    f280:	add	x20, x22, x25
    f284:	ldr	x3, [sp, #112]
    f288:	add	x0, x2, x0
    f28c:	str	x0, [sp, #120]
    f290:	add	x23, x2, x1
    f294:	ldr	w0, [x24, #12656]
    f298:	add	x3, x22, x3
    f29c:	mov	x2, #0x7070                	// #28784
    f2a0:	add	x26, x26, #0x1e0
    f2a4:	add	x22, x27, x2
    f2a8:	str	x3, [sp, #104]
    f2ac:	str	x20, [sp, #144]
    f2b0:	str	x23, [sp, #160]
    f2b4:	cmp	w0, #0x2
    f2b8:	b.eq	f320 <ZSTD_decompressStream+0xf8>  // b.none
    f2bc:	b.hi	f330 <ZSTD_decompressStream+0x108>  // b.pmore
    f2c0:	cbz	w0, f58c <ZSTD_decompressStream+0x364>
    f2c4:	ldr	x2, [x27, #29112]
    f2c8:	mov	x1, x26
    f2cc:	ldr	w3, [x24, #12560]
    f2d0:	mov	x0, x22
    f2d4:	bl	acf0 <ZSTD_getFrameHeader_advanced>
    f2d8:	mov	x28, x0
    f2dc:	cmn	x0, #0x78
    f2e0:	b.hi	f82c <ZSTD_decompressStream+0x604>  // b.pmore
    f2e4:	cbz	x0, f42c <ZSTD_decompressStream+0x204>
    f2e8:	ldr	x1, [sp, #104]
    f2ec:	ldr	x0, [x27, #29112]
    f2f0:	sub	x4, x1, x20
    f2f4:	sub	x2, x28, x0
    f2f8:	cmp	x2, x4
    f2fc:	b.hi	f994 <ZSTD_decompressStream+0x76c>  // b.pmore
    f300:	mov	x1, x20
    f304:	add	x0, x26, x0
    f308:	add	x20, x20, x2
    f30c:	bl	0 <grub_memmove>
    f310:	ldr	w0, [x24, #12656]
    f314:	str	x28, [x27, #29112]
    f318:	cmp	w0, #0x2
    f31c:	b.ne	f2bc <ZSTD_decompressStream+0x94>  // b.any
    f320:	ldr	x4, [x27, #28776]
    f324:	cbnz	x4, f52c <ZSTD_decompressStream+0x304>
    f328:	str	wzr, [x24, #12656]
    f32c:	b	f38c <ZSTD_decompressStream+0x164>
    f330:	cmp	w0, #0x3
    f334:	b.eq	f5b8 <ZSTD_decompressStream+0x390>  // b.none
    f338:	cmp	w0, #0x4
    f33c:	b.ne	fa40 <ZSTD_decompressStream+0x818>  // b.any
    f340:	ldr	x1, [x27, #29096]
    f344:	ldr	x0, [x27, #29104]
    f348:	sub	x28, x0, x1
    f34c:	ldr	x0, [sp, #120]
    f350:	ldr	x5, [x27, #29080]
    f354:	sub	x4, x0, x23
    f358:	cmp	x4, x28
    f35c:	mov	x0, x23
    f360:	csel	x2, x4, x28, ls  // ls = plast
    f364:	add	x1, x5, x1
    f368:	add	x23, x23, x2
    f36c:	stp	x2, x4, [sp, #128]
    f370:	bl	0 <grub_memmove>
    f374:	ldp	x2, x4, [sp, #128]
    f378:	ldr	x0, [x27, #29096]
    f37c:	add	x2, x2, x0
    f380:	str	x2, [x27, #29096]
    f384:	cmp	x4, x28
    f388:	b.cs	f6bc <ZSTD_decompressStream+0x494>  // b.hs, b.nlast
    f38c:	ldr	x1, [sp, #144]
    f390:	ldr	x0, [x19]
    f394:	cmp	x1, x20
    f398:	ldr	x1, [x21]
    f39c:	sub	x0, x20, x0
    f3a0:	str	x0, [x19, #16]
    f3a4:	ldr	x2, [sp, #160]
    f3a8:	sub	x1, x23, x1
    f3ac:	str	x1, [x21, #16]
    f3b0:	ccmp	x2, x23, #0x0, eq  // eq = none
    f3b4:	b.ne	f908 <ZSTD_decompressStream+0x6e0>  // b.any
    f3b8:	ldr	w1, [x24, #12756]
    f3bc:	add	w1, w1, #0x1
    f3c0:	str	w1, [x24, #12756]
    f3c4:	cmp	w1, #0xf
    f3c8:	b.le	f3e4 <ZSTD_decompressStream+0x1bc>
    f3cc:	ldr	x1, [sp, #120]
    f3d0:	cmp	x1, x23
    f3d4:	b.eq	fa2c <ZSTD_decompressStream+0x804>  // b.none
    f3d8:	ldr	x1, [sp, #104]
    f3dc:	cmp	x1, x20
    f3e0:	b.eq	f698 <ZSTD_decompressStream+0x470>  // b.none
    f3e4:	ldr	x28, [x27, #28776]
    f3e8:	cbnz	x28, f924 <ZSTD_decompressStream+0x6fc>
    f3ec:	ldr	x1, [x27, #29096]
    f3f0:	ldr	x2, [x27, #29104]
    f3f4:	ldr	w4, [x24, #12752]
    f3f8:	cmp	x2, x1
    f3fc:	b.ne	f970 <ZSTD_decompressStream+0x748>  // b.any
    f400:	cbz	w4, f82c <ZSTD_decompressStream+0x604>
    f404:	ldr	x1, [x19, #8]
    f408:	cmp	x0, x1
    f40c:	b.cc	f9ec <ZSTD_decompressStream+0x7c4>  // b.lo, b.ul, b.last
    f410:	mov	w0, #0x2                   	// #2
    f414:	mov	x28, #0x1                   	// #1
    f418:	ldp	x19, x20, [sp, #16]
    f41c:	ldp	x21, x22, [sp, #32]
    f420:	str	w0, [x24, #12656]
    f424:	ldp	x23, x24, [sp, #48]
    f428:	b	f6a8 <ZSTD_decompressStream+0x480>
    f42c:	ldr	x0, [x27, #28784]
    f430:	cbz	x0, f43c <ZSTD_decompressStream+0x214>
    f434:	ldr	x1, [x27, #28792]
    f438:	cbnz	x1, f778 <ZSTD_decompressStream+0x550>
    f43c:	ldr	x1, [x27, #29024]
    f440:	mov	x0, x27
    f444:	bl	d2f8 <ZSTD_decompressBegin_usingDDict>
    f448:	mov	x28, x0
    f44c:	cmn	x0, #0x78
    f450:	b.hi	f82c <ZSTD_decompressStream+0x604>  // b.pmore
    f454:	add	x1, x27, #0x24, lsl #12
    f458:	mov	w2, #0x2a50                	// #10832
    f45c:	movk	w2, #0x184d, lsl #16
    f460:	ldr	w0, [x1, #12768]
    f464:	and	w0, w0, #0xfffffff0
    f468:	cmp	w0, w2
    f46c:	b.ne	f72c <ZSTD_decompressStream+0x504>  // b.any
    f470:	ldr	w1, [x1, #12772]
    f474:	mov	w0, #0x7                   	// #7
    f478:	str	x1, [x27, #28776]
    f47c:	str	w0, [x24, #12452]
    f480:	ldr	x1, [x27, #28792]
    f484:	mov	x0, #0x400                 	// #1024
    f488:	ldr	x2, [x27, #29072]
    f48c:	cmp	x1, x0
    f490:	csel	x0, x1, x0, cs  // cs = hs, nlast
    f494:	str	x0, [x27, #28792]
    f498:	cmp	x0, x2
    f49c:	b.hi	f9c4 <ZSTD_decompressStream+0x79c>  // b.pmore
    f4a0:	ldr	w3, [x24, #12416]
    f4a4:	mov	w5, #0x4                   	// #4
    f4a8:	mov	x2, #0x1ffff               	// #131071
    f4ac:	mov	x4, #0x20000               	// #131072
    f4b0:	cmp	w3, w5
    f4b4:	csel	w3, w3, w5, cs  // cs = hs, nlast
    f4b8:	cmp	x1, x2
    f4bc:	ldr	x2, [x27, #28784]
    f4c0:	csel	x1, x0, x4, ls  // ls = plast
    f4c4:	add	x0, x0, #0x10
    f4c8:	ldr	x4, [x27, #29056]
    f4cc:	add	x0, x0, x1
    f4d0:	cmp	x0, x2
    f4d4:	csel	x28, x0, x2, ls  // ls = plast
    f4d8:	cmp	x4, x3
    f4dc:	b.cc	f4ec <ZSTD_decompressStream+0x2c4>  // b.lo, b.ul, b.last
    f4e0:	ldr	x0, [x27, #29088]
    f4e4:	cmp	x0, x28
    f4e8:	b.cs	f51c <ZSTD_decompressStream+0x2f4>  // b.hs, b.nlast
    f4ec:	ldr	x0, [x27, #29000]
    f4f0:	add	x6, x3, x28
    f4f4:	cbz	x0, f88c <ZSTD_decompressStream+0x664>
    f4f8:	sub	x0, x0, #0x27, lsl #12
    f4fc:	sub	x0, x0, #0x1f8
    f500:	cmp	x0, x6
    f504:	b.cc	f8f4 <ZSTD_decompressStream+0x6cc>  // b.lo, b.ul, b.last
    f508:	ldr	x0, [x27, #29048]
    f50c:	add	x0, x0, x3
    f510:	str	x3, [x27, #29056]
    f514:	str	x0, [x27, #29080]
    f518:	str	x28, [x27, #29088]
    f51c:	ldr	x4, [x27, #28776]
    f520:	mov	w0, #0x2                   	// #2
    f524:	str	w0, [x24, #12656]
    f528:	cbz	x4, f328 <ZSTD_decompressStream+0x100>
    f52c:	ldr	x0, [sp, #104]
    f530:	sub	x0, x0, x20
    f534:	cmp	x0, x4
    f538:	b.cc	f6f0 <ZSTD_decompressStream+0x4c8>  // b.lo, b.ul, b.last
    f53c:	ldr	x1, [x27, #29080]
    f540:	ldr	x0, [x27, #29096]
    f544:	ldr	w2, [x24, #12452]
    f548:	add	x1, x1, x0
    f54c:	cmp	w2, #0x7
    f550:	b.eq	f84c <ZSTD_decompressStream+0x624>  // b.none
    f554:	ldr	x2, [x27, #29088]
    f558:	mov	x3, x20
    f55c:	str	x4, [sp, #128]
    f560:	sub	x2, x2, x0
    f564:	mov	x0, x27
    f568:	bl	c0f0 <ZSTD_decodeSeqHeaders+0x7a0>
    f56c:	mov	x28, x0
    f570:	cmn	x0, #0x78
    f574:	b.hi	f82c <ZSTD_decompressStream+0x604>  // b.pmore
    f578:	ldr	x4, [sp, #128]
    f57c:	add	x20, x20, x4
    f580:	cbnz	x0, f874 <ZSTD_decompressStream+0x64c>
    f584:	ldr	w0, [x24, #12656]
    f588:	b	f2b4 <ZSTD_decompressStream+0x8c>
    f58c:	mov	x1, #0x7200                	// #29184
    f590:	add	x0, x27, x1
    f594:	mov	w1, #0x1                   	// #1
    f598:	str	w1, [x24, #12656]
    f59c:	str	xzr, [x27, #29064]
    f5a0:	mov	x2, #0x0                   	// #0
    f5a4:	str	xzr, [x27, #29096]
    f5a8:	str	xzr, [x27, #29104]
    f5ac:	str	xzr, [x27, #29112]
    f5b0:	stur	xzr, [x0, #-52]
    f5b4:	b	f2c8 <ZSTD_decompressStream+0xa0>
    f5b8:	ldr	x4, [x27, #28776]
    f5bc:	ldr	x0, [x27, #29064]
    f5c0:	ldr	w5, [x24, #12452]
    f5c4:	sub	x28, x4, x0
    f5c8:	cmp	w5, #0x7
    f5cc:	b.eq	f718 <ZSTD_decompressStream+0x4f0>  // b.none
    f5d0:	ldr	x1, [x27, #29056]
    f5d4:	str	w5, [sp, #128]
    f5d8:	str	x4, [sp, #136]
    f5dc:	sub	x1, x1, x0
    f5e0:	cmp	x1, x28
    f5e4:	b.cc	f9d8 <ZSTD_decompressStream+0x7b0>  // b.lo, b.ul, b.last
    f5e8:	ldr	x1, [sp, #104]
    f5ec:	ldr	x6, [x27, #29048]
    f5f0:	sub	x2, x1, x20
    f5f4:	cmp	x2, x28
    f5f8:	mov	x1, x20
    f5fc:	csel	x2, x2, x28, ls  // ls = plast
    f600:	add	x0, x6, x0
    f604:	str	x2, [sp, #152]
    f608:	bl	0 <grub_memmove>
    f60c:	ldr	w5, [sp, #128]
    f610:	ldr	x4, [sp, #136]
    f614:	ldr	x2, [sp, #152]
    f618:	ldr	x0, [x27, #29064]
    f61c:	add	x0, x2, x0
    f620:	str	w5, [sp, #128]
    f624:	add	x20, x20, x2
    f628:	str	x0, [x27, #29064]
    f62c:	cmp	x2, x28
    f630:	b.cc	f38c <ZSTD_decompressStream+0x164>  // b.lo, b.ul, b.last
    f634:	ldr	x0, [x27, #28776]
    f638:	cmp	x0, x4
    f63c:	b.ne	f698 <ZSTD_decompressStream+0x470>  // b.any
    f640:	ldr	x3, [x27, #29048]
    f644:	mov	x0, x27
    f648:	ldr	x6, [x27, #29080]
    f64c:	ldr	x2, [x27, #29088]
    f650:	ldr	x1, [x27, #29096]
    f654:	sub	x2, x2, x1
    f658:	add	x1, x6, x1
    f65c:	bl	c0f0 <ZSTD_decodeSeqHeaders+0x7a0>
    f660:	mov	x28, x0
    f664:	cmn	x0, #0x78
    f668:	b.hi	f82c <ZSTD_decompressStream+0x604>  // b.pmore
    f66c:	ldr	w5, [sp, #128]
    f670:	cmp	x0, #0x0
    f674:	str	xzr, [x27, #29064]
    f678:	ccmp	w5, #0x7, #0x4, eq  // eq = none
    f67c:	b.ne	f51c <ZSTD_decompressStream+0x2f4>  // b.any
    f680:	ldr	x1, [x27, #29096]
    f684:	mov	w0, #0x4                   	// #4
    f688:	add	x2, x1, x28
    f68c:	str	x2, [x27, #29104]
    f690:	str	w0, [x24, #12656]
    f694:	b	f34c <ZSTD_decompressStream+0x124>
    f698:	ldp	x19, x20, [sp, #16]
    f69c:	ldp	x21, x22, [sp, #32]
    f6a0:	ldp	x23, x24, [sp, #48]
    f6a4:	mov	x28, #0xffffffffffffffb8    	// #-72
    f6a8:	mov	x0, x28
    f6ac:	ldp	x25, x26, [sp, #64]
    f6b0:	ldp	x27, x28, [sp, #80]
    f6b4:	ldp	x29, x30, [sp], #208
    f6b8:	ret
    f6bc:	ldr	x1, [x27, #28784]
    f6c0:	mov	w3, #0x2                   	// #2
    f6c4:	ldr	x0, [x27, #29088]
    f6c8:	str	w3, [x24, #12656]
    f6cc:	cmp	x0, x1
    f6d0:	b.cs	f320 <ZSTD_decompressStream+0xf8>  // b.hs, b.nlast
    f6d4:	ldr	w1, [x24, #12416]
    f6d8:	add	x2, x1, x2
    f6dc:	cmp	x0, x2
    f6e0:	b.cs	f320 <ZSTD_decompressStream+0xf8>  // b.hs, b.nlast
    f6e4:	str	xzr, [x27, #29096]
    f6e8:	str	xzr, [x27, #29104]
    f6ec:	b	f320 <ZSTD_decompressStream+0xf8>
    f6f0:	ldr	x0, [sp, #104]
    f6f4:	cmp	x0, x20
    f6f8:	b.eq	f38c <ZSTD_decompressStream+0x164>  // b.none
    f6fc:	mov	w0, #0x3                   	// #3
    f700:	str	w0, [x24, #12656]
    f704:	ldr	x0, [x27, #29064]
    f708:	ldr	w5, [x24, #12452]
    f70c:	sub	x28, x4, x0
    f710:	cmp	w5, #0x7
    f714:	b.ne	f5d0 <ZSTD_decompressStream+0x3a8>  // b.any
    f718:	ldr	x1, [sp, #104]
    f71c:	sub	x2, x1, x20
    f720:	cmp	x2, x28
    f724:	csel	x2, x2, x28, ls  // ls = plast
    f728:	b	f61c <ZSTD_decompressStream+0x3f4>
    f72c:	ldr	w3, [x24, #12560]
    f730:	mov	x1, x26
    f734:	ldr	x2, [x27, #29112]
    f738:	mov	x0, x22
    f73c:	bl	acf0 <ZSTD_getFrameHeader_advanced>
    f740:	mov	x28, x0
    f744:	cmn	x0, #0x78
    f748:	b.hi	f82c <ZSTD_decompressStream+0x604>  // b.pmore
    f74c:	cbnz	x0, f698 <ZSTD_decompressStream+0x470>
    f750:	ldr	w0, [x24, #12428]
    f754:	cbz	w0, f7f8 <ZSTD_decompressStream+0x5d0>
    f758:	ldr	w1, [x24, #12648]
    f75c:	cmp	w0, w1
    f760:	b.eq	f7f8 <ZSTD_decompressStream+0x5d0>  // b.none
    f764:	mov	x28, #0xffffffffffffffe0    	// #-32
    f768:	ldp	x19, x20, [sp, #16]
    f76c:	ldp	x21, x22, [sp, #32]
    f770:	ldp	x23, x24, [sp, #48]
    f774:	b	f6a8 <ZSTD_decompressStream+0x480>
    f778:	ldr	x1, [sp, #120]
    f77c:	sub	x28, x1, x23
    f780:	cmp	x0, x28
    f784:	b.hi	f43c <ZSTD_decompressStream+0x214>  // b.pmore
    f788:	ldr	x0, [sp, #112]
    f78c:	sub	x1, x0, x25
    f790:	str	x1, [sp, #128]
    f794:	ldr	x0, [sp, #144]
    f798:	bl	c760 <ZSTD_findFrameCompressedSize>
    f79c:	mov	x4, x0
    f7a0:	ldr	x1, [sp, #128]
    f7a4:	cmp	x1, x0
    f7a8:	b.cc	f43c <ZSTD_decompressStream+0x214>  // b.lo, b.ul, b.last
    f7ac:	ldr	x7, [x27, #29024]
    f7b0:	mov	x2, x28
    f7b4:	ldr	x20, [sp, #144]
    f7b8:	mov	x1, x23
    f7bc:	mov	x0, x27
    f7c0:	mov	x6, #0x0                   	// #0
    f7c4:	mov	x3, x20
    f7c8:	mov	x5, #0x0                   	// #0
    f7cc:	str	x4, [sp, #112]
    f7d0:	bl	d458 <ZSTD_decompressBegin_usingDDict+0x160>
    f7d4:	mov	x28, x0
    f7d8:	cmn	x0, #0x78
    f7dc:	b.hi	f82c <ZSTD_decompressStream+0x604>  // b.pmore
    f7e0:	ldr	x4, [sp, #112]
    f7e4:	str	xzr, [x27, #28776]
    f7e8:	add	x23, x23, x0
    f7ec:	str	wzr, [x24, #12656]
    f7f0:	add	x20, x20, x4
    f7f4:	b	f38c <ZSTD_decompressStream+0x164>
    f7f8:	ldr	w0, [x24, #12432]
    f7fc:	cbnz	w0, f910 <ZSTD_decompressStream+0x6e8>
    f800:	mov	x0, #0x3                   	// #3
    f804:	str	x0, [x27, #28776]
    f808:	mov	w0, #0x2                   	// #2
    f80c:	str	w0, [x24, #12452]
    f810:	b	f480 <ZSTD_decompressStream+0x258>
    f814:	mov	x0, x28
    f818:	ldp	x21, x22, [sp, #32]
    f81c:	ldp	x25, x26, [sp, #64]
    f820:	ldp	x27, x28, [sp, #80]
    f824:	ldp	x29, x30, [sp], #208
    f828:	ret
    f82c:	mov	x0, x28
    f830:	ldp	x19, x20, [sp, #16]
    f834:	ldp	x21, x22, [sp, #32]
    f838:	ldp	x23, x24, [sp, #48]
    f83c:	ldp	x25, x26, [sp, #64]
    f840:	ldp	x27, x28, [sp, #80]
    f844:	ldp	x29, x30, [sp], #208
    f848:	ret
    f84c:	mov	x3, x20
    f850:	mov	x0, x27
    f854:	mov	x2, #0x0                   	// #0
    f858:	str	x4, [sp, #128]
    f85c:	bl	c0f0 <ZSTD_decodeSeqHeaders+0x7a0>
    f860:	mov	x28, x0
    f864:	cmn	x0, #0x78
    f868:	ldr	x4, [sp, #128]
    f86c:	b.hi	f82c <ZSTD_decompressStream+0x604>  // b.pmore
    f870:	add	x20, x20, x4
    f874:	ldr	x1, [x27, #29096]
    f878:	mov	w2, #0x4                   	// #4
    f87c:	add	x0, x1, x28
    f880:	str	x0, [x27, #29104]
    f884:	str	w2, [x24, #12656]
    f888:	b	f344 <ZSTD_decompressStream+0x11c>
    f88c:	add	x7, x27, #0x7, lsl #12
    f890:	add	x1, sp, #0xb0
    f894:	ldr	x4, [x27, #28976]
    f898:	add	x10, x7, #0x120
    f89c:	ldr	x0, [x27, #29048]
    f8a0:	str	x4, [sp, #192]
    f8a4:	stp	x7, x10, [sp, #128]
    f8a8:	ldp	x4, x5, [x7, #288]
    f8ac:	str	x3, [sp, #152]
    f8b0:	str	x6, [sp, #168]
    f8b4:	stp	x4, x5, [sp, #176]
    f8b8:	bl	84a8 <ZSTD_free>
    f8bc:	ldp	x7, x10, [sp, #128]
    f8c0:	add	x1, sp, #0xb0
    f8c4:	ldr	x6, [sp, #168]
    f8c8:	mov	x0, x6
    f8cc:	ldr	x4, [x10, #16]
    f8d0:	str	xzr, [x27, #29056]
    f8d4:	str	xzr, [x27, #29088]
    f8d8:	str	x4, [sp, #192]
    f8dc:	ldp	x4, x5, [x7, #288]
    f8e0:	stp	x4, x5, [sp, #176]
    f8e4:	bl	8438 <ZSTD_malloc>
    f8e8:	str	x0, [x27, #29048]
    f8ec:	ldr	x3, [sp, #152]
    f8f0:	cbnz	x0, f50c <ZSTD_decompressStream+0x2e4>
    f8f4:	mov	x28, #0xffffffffffffffc0    	// #-64
    f8f8:	ldp	x19, x20, [sp, #16]
    f8fc:	ldp	x21, x22, [sp, #32]
    f900:	ldp	x23, x24, [sp, #48]
    f904:	b	f6a8 <ZSTD_decompressStream+0x480>
    f908:	str	wzr, [x24, #12756]
    f90c:	b	f3e4 <ZSTD_decompressStream+0x1bc>
    f910:	mov	x1, #0x0                   	// #0
    f914:	mov	x0, #0x70b0                	// #28848
    f918:	add	x0, x27, x0
    f91c:	bl	7900 <XXH64_reset>
    f920:	b	f800 <ZSTD_decompressStream+0x5d8>
    f924:	ldr	w0, [x24, #12452]
    f928:	mov	x1, #0x0                   	// #0
    f92c:	sub	w0, w0, #0x2
    f930:	cmp	w0, #0x5
    f934:	b.hi	f954 <ZSTD_decompressStream+0x72c>  // b.pmore
    f938:	adrp	x2, 0 <FSE_versionNumber>
    f93c:	mov	x1, #0x3                   	// #3
    f940:	ldr	x2, [x2]
    f944:	add	x2, x2, #0x980
    f948:	ldr	w0, [x2, w0, uxtw #2]
    f94c:	cmp	w0, #0x2
    f950:	csel	x1, xzr, x1, ne  // ne = any
    f954:	ldr	x0, [x27, #29064]
    f958:	ldp	x19, x20, [sp, #16]
    f95c:	sub	x3, x28, x0
    f960:	add	x28, x3, x1
    f964:	ldp	x21, x22, [sp, #32]
    f968:	ldp	x23, x24, [sp, #48]
    f96c:	b	f6a8 <ZSTD_decompressStream+0x480>
    f970:	mov	x28, #0x1                   	// #1
    f974:	cbnz	w4, f82c <ZSTD_decompressStream+0x604>
    f978:	sub	x0, x0, #0x1
    f97c:	ldp	x21, x22, [sp, #32]
    f980:	str	x0, [x19, #16]
    f984:	ldp	x19, x20, [sp, #16]
    f988:	str	w28, [x24, #12752]
    f98c:	ldp	x23, x24, [sp, #48]
    f990:	b	f6a8 <ZSTD_decompressStream+0x480>
    f994:	cbnz	x4, fa04 <ZSTD_decompressStream+0x7dc>
    f998:	cmp	x28, #0x6
    f99c:	mov	x1, #0x6                   	// #6
    f9a0:	csel	x3, x28, x1, cs  // cs = hs, nlast
    f9a4:	add	x3, x3, #0x3
    f9a8:	ldr	x1, [x19, #8]
    f9ac:	sub	x28, x3, x0
    f9b0:	ldp	x21, x22, [sp, #32]
    f9b4:	ldp	x23, x24, [sp, #48]
    f9b8:	str	x1, [x19, #16]
    f9bc:	ldp	x19, x20, [sp, #16]
    f9c0:	b	f6a8 <ZSTD_decompressStream+0x480>
    f9c4:	mov	x28, #0xfffffffffffffff0    	// #-16
    f9c8:	ldp	x19, x20, [sp, #16]
    f9cc:	ldp	x21, x22, [sp, #32]
    f9d0:	ldp	x23, x24, [sp, #48]
    f9d4:	b	f6a8 <ZSTD_decompressStream+0x480>
    f9d8:	mov	x28, #0xffffffffffffffec    	// #-20
    f9dc:	ldp	x19, x20, [sp, #16]
    f9e0:	ldp	x21, x22, [sp, #32]
    f9e4:	ldp	x23, x24, [sp, #48]
    f9e8:	b	f6a8 <ZSTD_decompressStream+0x480>
    f9ec:	add	x0, x0, #0x1
    f9f0:	ldp	x21, x22, [sp, #32]
    f9f4:	ldp	x23, x24, [sp, #48]
    f9f8:	str	x0, [x19, #16]
    f9fc:	ldp	x19, x20, [sp, #16]
    fa00:	b	f6a8 <ZSTD_decompressStream+0x480>
    fa04:	mov	x2, x4
    fa08:	mov	x1, x20
    fa0c:	add	x0, x26, x0
    fa10:	str	x4, [sp, #104]
    fa14:	bl	0 <grub_memmove>
    fa18:	ldr	x4, [sp, #104]
    fa1c:	ldr	x0, [x27, #29112]
    fa20:	add	x0, x4, x0
    fa24:	str	x0, [x27, #29112]
    fa28:	b	f998 <ZSTD_decompressStream+0x770>
    fa2c:	mov	x28, #0xffffffffffffffba    	// #-70
    fa30:	ldp	x19, x20, [sp, #16]
    fa34:	ldp	x21, x22, [sp, #32]
    fa38:	ldp	x23, x24, [sp, #48]
    fa3c:	b	f6a8 <ZSTD_decompressStream+0x480>
    fa40:	mov	x28, #0xffffffffffffffff    	// #-1
    fa44:	ldp	x19, x20, [sp, #16]
    fa48:	ldp	x21, x22, [sp, #32]
    fa4c:	ldp	x23, x24, [sp, #48]
    fa50:	b	f6a8 <ZSTD_decompressStream+0x480>
    fa54:	nop
	...

000000000000fa60 <ZSTD_decompress_generic>:
    fa60:	b	f228 <ZSTD_decompressStream>
    fa64:	nop

000000000000fa68 <ZSTD_decompress_generic_simpleArgs>:
    fa68:	stp	x29, x30, [sp, #-80]!
    fa6c:	mov	x8, x1
    fa70:	mov	x7, x2
    fa74:	mov	x29, sp
    fa78:	stp	x19, x20, [sp, #16]
    fa7c:	mov	x20, x3
    fa80:	mov	x19, x6
    fa84:	ldr	x3, [x6]
    fa88:	add	x2, sp, #0x38
    fa8c:	ldr	x6, [x20]
    fa90:	add	x1, sp, #0x20
    fa94:	stp	x8, x7, [sp, #32]
    fa98:	stp	x6, x4, [sp, #48]
    fa9c:	stp	x5, x3, [sp, #64]
    faa0:	bl	f228 <ZSTD_decompressStream>
    faa4:	ldr	x1, [sp, #48]
    faa8:	str	x1, [x20]
    faac:	ldr	x1, [sp, #72]
    fab0:	str	x1, [x19]
    fab4:	ldp	x19, x20, [sp, #16]
    fab8:	ldp	x29, x30, [sp], #80
    fabc:	ret

000000000000fac0 <ZSTD_DCtx_reset>:
    fac0:	stp	x29, x30, [sp, #-112]!
    fac4:	mov	x29, sp
    fac8:	stp	x19, x20, [sp, #16]
    facc:	add	x20, x0, #0x4, lsl #12
    fad0:	mov	x19, x0
    fad4:	str	x21, [sp, #32]
    fad8:	ldr	x21, [x0, #29016]
    fadc:	str	wzr, [x20, #12656]
    fae0:	str	wzr, [x20, #12756]
    fae4:	cbz	x21, fb30 <ZSTD_DCtx_reset+0x70>
    fae8:	mov	x0, #0x6800                	// #26624
    faec:	add	x0, x21, x0
    faf0:	add	x1, sp, #0x30
    faf4:	ldp	x2, x3, [x0, #72]
    faf8:	stp	x2, x3, [sp, #88]
    fafc:	ldr	x0, [x21, #26712]
    fb00:	stp	x2, x3, [sp, #48]
    fb04:	str	x0, [sp, #64]
    fb08:	str	x0, [sp, #104]
    fb0c:	ldr	x0, [x21]
    fb10:	bl	84a8 <ZSTD_free>
    fb14:	ldp	x4, x5, [sp, #88]
    fb18:	add	x1, sp, #0x30
    fb1c:	ldr	x2, [sp, #104]
    fb20:	mov	x0, x21
    fb24:	stp	x4, x5, [sp, #48]
    fb28:	str	x2, [sp, #64]
    fb2c:	bl	84a8 <ZSTD_free>
    fb30:	ldr	x21, [sp, #32]
    fb34:	str	xzr, [x19, #29016]
    fb38:	str	xzr, [x19, #29024]
    fb3c:	mov	x0, #0x1                   	// #1
    fb40:	str	wzr, [x20, #12560]
    fb44:	movk	x0, #0x800, lsl #16
    fb48:	str	x0, [x19, #29072]
    fb4c:	ldp	x19, x20, [sp, #16]
    fb50:	ldp	x29, x30, [sp], #112
    fb54:	ret
