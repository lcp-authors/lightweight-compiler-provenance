In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libltdl.a_gcc_-O3:

libltdl_libltdl_la-preopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <vm_close>:
   0:	mov	w0, #0x0                   	// #0
   4:	ret

0000000000000008 <vl_exit>:
   8:	stp	x29, x30, [sp, #-32]!
   c:	adrp	x0, 0 <vm_close>
  10:	mov	x29, sp
  14:	stp	x19, x20, [sp, #16]
  18:	add	x20, x0, #0x0
  1c:	str	xzr, [x0]
  20:	ldr	x19, [x20, #8]
  24:	cbz	x19, 38 <vl_exit+0x30>
  28:	mov	x0, x19
  2c:	ldr	x19, [x19]
  30:	bl	0 <free>
  34:	cbnz	x19, 28 <vl_exit+0x20>
  38:	mov	w0, #0x0                   	// #0
  3c:	str	xzr, [x20, #8]
  40:	ldp	x19, x20, [sp, #16]
  44:	ldp	x29, x30, [sp], #32
  48:	ret
  4c:	nop

0000000000000050 <vm_sym>:
  50:	stp	x29, x30, [sp, #-32]!
  54:	mov	x29, sp
  58:	ldr	x0, [x1, #16]
  5c:	stp	x19, x20, [sp, #16]
  60:	mov	x19, x1
  64:	mov	x20, x2
  68:	cbz	x0, 84 <vm_sym+0x34>
  6c:	adrp	x1, 0 <vm_close>
  70:	add	x1, x1, #0x0
  74:	bl	0 <strcmp>
  78:	cmp	w0, #0x0
  7c:	add	x1, x19, #0x10
  80:	csel	x19, x1, x19, eq  // eq = none
  84:	ldr	x0, [x19, #32]
  88:	add	x19, x19, #0x20
  8c:	cbnz	x0, 9c <vm_sym+0x4c>
  90:	b	b8 <vm_sym+0x68>
  94:	ldr	x0, [x19, #16]!
  98:	cbz	x0, b8 <vm_sym+0x68>
  9c:	mov	x1, x20
  a0:	bl	0 <strcmp>
  a4:	cbnz	w0, 94 <vm_sym+0x44>
  a8:	ldr	x0, [x19, #8]
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x29, x30, [sp], #32
  b4:	ret
  b8:	mov	w0, #0xa                   	// #10
  bc:	bl	0 <lt__error_string>
  c0:	bl	0 <lt__set_last_error>
  c4:	mov	x0, #0x0                   	// #0
  c8:	ldp	x19, x20, [sp, #16]
  cc:	ldp	x29, x30, [sp], #32
  d0:	ret
  d4:	nop

00000000000000d8 <vm_open>:
  d8:	stp	x29, x30, [sp, #-64]!
  dc:	adrp	x0, 0 <vm_close>
  e0:	mov	x29, sp
  e4:	stp	x21, x22, [sp, #32]
  e8:	ldr	x22, [x0]
  ec:	str	x23, [sp, #48]
  f0:	cbz	x22, 178 <vm_open+0xa0>
  f4:	cmp	x1, #0x0
  f8:	adrp	x0, 0 <vm_close>
  fc:	add	x0, x0, #0x0
 100:	stp	x19, x20, [sp, #16]
 104:	csel	x21, x0, x1, eq  // eq = none
 108:	ldr	x23, [x22, #8]
 10c:	ldr	x20, [x23]
 110:	cbz	x20, 148 <vm_open+0x70>
 114:	mov	x19, x23
 118:	b	124 <vm_open+0x4c>
 11c:	add	x19, x19, #0x10
 120:	cbz	x20, 148 <vm_open+0x70>
 124:	mov	x0, x20
 128:	ldp	x2, x20, [x19, #8]
 12c:	cbnz	x2, 11c <vm_open+0x44>
 130:	mov	x1, x21
 134:	bl	0 <strcmp>
 138:	cbnz	w0, 11c <vm_open+0x44>
 13c:	ldr	x0, [x19, #24]
 140:	cbz	x0, 11c <vm_open+0x44>
 144:	cbnz	x20, 160 <vm_open+0x88>
 148:	ldr	x22, [x22]
 14c:	cbnz	x22, 108 <vm_open+0x30>
 150:	mov	x23, #0x0                   	// #0
 154:	mov	w0, #0x5                   	// #5
 158:	bl	0 <lt__error_string>
 15c:	bl	0 <lt__set_last_error>
 160:	ldp	x19, x20, [sp, #16]
 164:	mov	x0, x23
 168:	ldp	x21, x22, [sp, #32]
 16c:	ldr	x23, [sp, #48]
 170:	ldp	x29, x30, [sp], #64
 174:	ret
 178:	mov	x23, #0x0                   	// #0
 17c:	mov	w0, #0x7                   	// #7
 180:	bl	0 <lt__error_string>
 184:	bl	0 <lt__set_last_error>
 188:	b	164 <vm_open+0x8c>
 18c:	nop

0000000000000190 <preopen_LTX_get_vtable>:
 190:	stp	x29, x30, [sp, #-48]!
 194:	mov	x29, sp
 198:	stp	x19, x20, [sp, #16]
 19c:	adrp	x20, 0 <vm_close>
 1a0:	mov	x19, x0
 1a4:	str	x0, [sp, #40]
 1a8:	ldr	x0, [x20]
 1ac:	cbz	x0, 220 <preopen_LTX_get_vtable+0x90>
 1b0:	ldr	x1, [x0]
 1b4:	cbz	x1, 1d0 <preopen_LTX_get_vtable+0x40>
 1b8:	ldr	x1, [x0, #56]
 1bc:	cmp	x1, x19
 1c0:	b.ne	23c <preopen_LTX_get_vtable+0xac>  // b.any
 1c4:	ldp	x19, x20, [sp, #16]
 1c8:	ldp	x29, x30, [sp], #48
 1cc:	ret
 1d0:	adrp	x6, 0 <vm_close>
 1d4:	adrp	x5, 0 <vm_close>
 1d8:	add	x6, x6, #0x0
 1dc:	add	x5, x5, #0x0
 1e0:	adrp	x4, 0 <vm_close>
 1e4:	adrp	x3, 0 <vm_close>
 1e8:	add	x4, x4, #0x0
 1ec:	add	x3, x3, #0x0
 1f0:	adrp	x2, 0 <vm_close>
 1f4:	adrp	x1, 0 <vm_close>
 1f8:	add	x2, x2, #0x0
 1fc:	add	x1, x1, #0x0
 200:	stp	x6, xzr, [x0]
 204:	stp	x5, x4, [x0, #16]
 208:	stp	x3, x2, [x0, #32]
 20c:	stp	x1, x19, [x0, #48]
 210:	str	wzr, [x0, #64]
 214:	ldp	x19, x20, [sp, #16]
 218:	ldp	x29, x30, [sp], #48
 21c:	ret
 220:	mov	x0, #0x48                  	// #72
 224:	bl	0 <lt__zalloc>
 228:	str	x0, [x20]
 22c:	cbnz	x0, 1b0 <preopen_LTX_get_vtable+0x20>
 230:	ldp	x19, x20, [sp, #16]
 234:	ldp	x29, x30, [sp], #48
 238:	ret
 23c:	mov	w0, #0x3                   	// #3
 240:	bl	0 <lt__error_string>
 244:	bl	0 <lt__set_last_error>
 248:	mov	x0, #0x0                   	// #0
 24c:	ldp	x19, x20, [sp, #16]
 250:	ldp	x29, x30, [sp], #48
 254:	ret

0000000000000258 <lt_dlpreload_default>:
 258:	adrp	x1, 0 <vm_close>
 25c:	mov	x2, x0
 260:	mov	w0, #0x0                   	// #0
 264:	str	x2, [x1]
 268:	ret
 26c:	nop

0000000000000270 <lt_dlpreload>:
 270:	stp	x29, x30, [sp, #-64]!
 274:	mov	x29, sp
 278:	str	x21, [sp, #32]
 27c:	adrp	x21, 0 <vm_close>
 280:	add	x21, x21, #0x0
 284:	stp	x19, x20, [sp, #16]
 288:	ldr	x19, [x21, #8]
 28c:	cbnz	x0, 2fc <lt_dlpreload+0x8c>
 290:	cbz	x19, 2a8 <lt_dlpreload+0x38>
 294:	nop
 298:	mov	x0, x19
 29c:	ldr	x19, [x19]
 2a0:	bl	0 <free>
 2a4:	cbnz	x19, 298 <lt_dlpreload+0x28>
 2a8:	ldr	x20, [x21, #16]
 2ac:	str	xzr, [x21, #8]
 2b0:	cbz	x20, 31c <lt_dlpreload+0xac>
 2b4:	mov	x0, #0x10                  	// #16
 2b8:	bl	0 <lt__zalloc>
 2bc:	mov	x1, x0
 2c0:	cbz	x0, 330 <lt_dlpreload+0xc0>
 2c4:	ldr	x0, [x20, #16]
 2c8:	ldr	x2, [x21, #8]
 2cc:	stp	x2, x20, [x1]
 2d0:	str	x1, [x21, #8]
 2d4:	cbz	x0, 31c <lt_dlpreload+0xac>
 2d8:	adrp	x1, 0 <vm_close>
 2dc:	add	x1, x1, #0x0
 2e0:	bl	0 <strcmp>
 2e4:	str	w0, [sp, #60]
 2e8:	cbnz	w0, 31c <lt_dlpreload+0xac>
 2ec:	ldr	x1, [x20, #24]
 2f0:	blr	x1
 2f4:	ldr	w0, [sp, #60]
 2f8:	b	320 <lt_dlpreload+0xb0>
 2fc:	mov	x20, x0
 300:	cbnz	x19, 310 <lt_dlpreload+0xa0>
 304:	b	2b4 <lt_dlpreload+0x44>
 308:	ldr	x19, [x19]
 30c:	cbz	x19, 2b4 <lt_dlpreload+0x44>
 310:	ldr	x0, [x19, #8]
 314:	cmp	x20, x0
 318:	b.ne	308 <lt_dlpreload+0x98>  // b.any
 31c:	mov	w0, #0x0                   	// #0
 320:	ldp	x19, x20, [sp, #16]
 324:	ldr	x21, [sp, #32]
 328:	ldp	x29, x30, [sp], #64
 32c:	ret
 330:	mov	w0, #0x1                   	// #1
 334:	b	320 <lt_dlpreload+0xb0>

0000000000000338 <vl_init>:
 338:	adrp	x1, 0 <vm_close>
 33c:	add	x1, x1, #0x0
 340:	ldr	x0, [x1, #16]
 344:	str	xzr, [x1, #8]
 348:	cbz	x0, 350 <vl_init+0x18>
 34c:	b	270 <lt_dlpreload>
 350:	mov	w0, #0x0                   	// #0
 354:	ret

0000000000000358 <lt_dlpreload_open>:
 358:	stp	x29, x30, [sp, #-96]!
 35c:	adrp	x2, 0 <vm_close>
 360:	mov	x29, sp
 364:	stp	x21, x22, [sp, #32]
 368:	ldr	x22, [x2]
 36c:	stp	x25, x26, [sp, #64]
 370:	cbz	x22, 488 <lt_dlpreload_open+0x130>
 374:	mov	w25, #0x0                   	// #0
 378:	mov	w26, #0x0                   	// #0
 37c:	stp	x19, x20, [sp, #16]
 380:	stp	x23, x24, [sp, #48]
 384:	adrp	x24, 0 <vm_close>
 388:	mov	x23, x0
 38c:	add	x24, x24, #0x0
 390:	str	x27, [sp, #80]
 394:	mov	x27, x1
 398:	b	3b0 <lt_dlpreload_open+0x58>
 39c:	mov	x1, x23
 3a0:	bl	0 <strcmp>
 3a4:	cbz	w0, 3c8 <lt_dlpreload_open+0x70>
 3a8:	ldr	x22, [x22]
 3ac:	cbz	x22, 428 <lt_dlpreload_open+0xd0>
 3b0:	ldr	x19, [x22, #8]
 3b4:	ldr	x0, [x19]
 3b8:	cbnz	x23, 39c <lt_dlpreload_open+0x44>
 3bc:	mov	x1, x24
 3c0:	bl	0 <strcmp>
 3c4:	cbnz	w0, 3a8 <lt_dlpreload_open+0x50>
 3c8:	ldr	x21, [x19, #16]
 3cc:	add	w25, w25, #0x1
 3d0:	add	x0, x19, #0x10
 3d4:	cbz	x21, 3a8 <lt_dlpreload_open+0x50>
 3d8:	mov	w20, #0x1                   	// #1
 3dc:	b	3f4 <lt_dlpreload_open+0x9c>
 3e0:	add	w20, w20, #0x1
 3e4:	ubfiz	x2, x20, #4, #32
 3e8:	add	x0, x19, x2
 3ec:	ldr	x21, [x19, x2]
 3f0:	cbz	x21, 3a8 <lt_dlpreload_open+0x50>
 3f4:	ldr	x0, [x0, #8]
 3f8:	cbnz	x0, 3e0 <lt_dlpreload_open+0x88>
 3fc:	mov	x1, x24
 400:	mov	x0, x21
 404:	bl	0 <strcmp>
 408:	cbz	w0, 3e0 <lt_dlpreload_open+0x88>
 40c:	mov	x0, x21
 410:	bl	0 <lt_dlopen>
 414:	cbz	x0, 44c <lt_dlpreload_open+0xf4>
 418:	blr	x27
 41c:	add	w26, w26, w0
 420:	ldr	x19, [x22, #8]
 424:	b	3e0 <lt_dlpreload_open+0x88>
 428:	cbz	w25, 458 <lt_dlpreload_open+0x100>
 42c:	mov	w0, w26
 430:	ldp	x19, x20, [sp, #16]
 434:	ldp	x21, x22, [sp, #32]
 438:	ldp	x23, x24, [sp, #48]
 43c:	ldp	x25, x26, [sp, #64]
 440:	ldr	x27, [sp, #80]
 444:	ldp	x29, x30, [sp], #96
 448:	ret
 44c:	add	w26, w26, #0x1
 450:	ldr	x19, [x22, #8]
 454:	b	3e0 <lt_dlpreload_open+0x88>
 458:	ldp	x19, x20, [sp, #16]
 45c:	add	w26, w26, #0x1
 460:	ldp	x23, x24, [sp, #48]
 464:	ldr	x27, [sp, #80]
 468:	mov	w0, #0x8                   	// #8
 46c:	bl	0 <lt__error_string>
 470:	bl	0 <lt__set_last_error>
 474:	mov	w0, w26
 478:	ldp	x21, x22, [sp, #32]
 47c:	ldp	x25, x26, [sp, #64]
 480:	ldp	x29, x30, [sp], #96
 484:	ret
 488:	mov	w26, #0x1                   	// #1
 48c:	b	468 <lt_dlpreload_open+0x110>

libltdl_libltdl_la-lt__alloc.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <alloc_die_default>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x3, 0 <stderr>
   8:	mov	x2, #0xf                   	// #15
   c:	mov	x29, sp
  10:	ldr	x3, [x3]
  14:	mov	x1, #0x1                   	// #1
  18:	adrp	x0, 0 <alloc_die_default>
  1c:	add	x0, x0, #0x0
  20:	bl	0 <fwrite>
  24:	mov	w0, #0x1                   	// #1
  28:	bl	0 <exit>
  2c:	nop

0000000000000030 <lt__malloc>:
  30:	stp	x29, x30, [sp, #-32]!
  34:	mov	x29, sp
  38:	bl	0 <malloc>
  3c:	cbz	x0, 48 <lt__malloc+0x18>
  40:	ldp	x29, x30, [sp], #32
  44:	ret
  48:	adrp	x1, 0 <alloc_die_default>
  4c:	str	x0, [sp, #24]
  50:	ldr	x1, [x1]
  54:	blr	x1
  58:	ldr	x0, [sp, #24]
  5c:	b	40 <lt__malloc+0x10>

0000000000000060 <lt__zalloc>:
  60:	stp	x29, x30, [sp, #-32]!
  64:	mov	x1, #0x1                   	// #1
  68:	mov	x29, sp
  6c:	bl	0 <calloc>
  70:	cbz	x0, 7c <lt__zalloc+0x1c>
  74:	ldp	x29, x30, [sp], #32
  78:	ret
  7c:	adrp	x1, 0 <alloc_die_default>
  80:	str	x0, [sp, #24]
  84:	ldr	x1, [x1]
  88:	blr	x1
  8c:	ldr	x0, [sp, #24]
  90:	b	74 <lt__zalloc+0x14>
  94:	nop

0000000000000098 <lt__realloc>:
  98:	stp	x29, x30, [sp, #-32]!
  9c:	mov	x29, sp
  a0:	bl	0 <realloc>
  a4:	cbz	x0, b0 <lt__realloc+0x18>
  a8:	ldp	x29, x30, [sp], #32
  ac:	ret
  b0:	adrp	x1, 0 <alloc_die_default>
  b4:	str	x0, [sp, #24]
  b8:	ldr	x1, [x1]
  bc:	blr	x1
  c0:	ldr	x0, [sp, #24]
  c4:	b	a8 <lt__realloc+0x10>

00000000000000c8 <lt__memdup>:
  c8:	stp	x29, x30, [sp, #-32]!
  cc:	mov	x29, sp
  d0:	stp	x19, x20, [sp, #16]
  d4:	mov	x20, x0
  d8:	mov	x19, x1
  dc:	mov	x0, x1
  e0:	bl	0 <malloc>
  e4:	cbz	x0, fc <lt__memdup+0x34>
  e8:	mov	x2, x19
  ec:	mov	x1, x20
  f0:	ldp	x19, x20, [sp, #16]
  f4:	ldp	x29, x30, [sp], #32
  f8:	b	0 <memcpy>
  fc:	adrp	x0, 0 <alloc_die_default>
 100:	ldr	x0, [x0]
 104:	blr	x0
 108:	mov	x0, #0x0                   	// #0
 10c:	ldp	x19, x20, [sp, #16]
 110:	ldp	x29, x30, [sp], #32
 114:	ret

0000000000000118 <lt__strdup>:
 118:	stp	x29, x30, [sp, #-32]!
 11c:	mov	x29, sp
 120:	stp	x19, x20, [sp, #16]
 124:	mov	x20, x0
 128:	bl	0 <strlen>
 12c:	add	x19, x0, #0x1
 130:	mov	x0, x19
 134:	bl	0 <malloc>
 138:	cbz	x0, 150 <lt__strdup+0x38>
 13c:	mov	x2, x19
 140:	mov	x1, x20
 144:	ldp	x19, x20, [sp, #16]
 148:	ldp	x29, x30, [sp], #32
 14c:	b	0 <memcpy>
 150:	adrp	x0, 0 <alloc_die_default>
 154:	ldr	x0, [x0]
 158:	blr	x0
 15c:	mov	x0, #0x0                   	// #0
 160:	ldp	x19, x20, [sp, #16]
 164:	ldp	x29, x30, [sp], #32
 168:	ret

libltdl_libltdl_la-lt_dlloader.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <loader_callback>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	x0, [x0, #8]
  14:	cbz	x0, 34 <loader_callback+0x34>
  18:	ldr	x0, [x0]
  1c:	bl	0 <strcmp>
  20:	cmp	w0, #0x0
  24:	csel	x0, x19, xzr, eq  // eq = none
  28:	ldr	x19, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret
  34:	adrp	x3, 0 <loader_callback>
  38:	adrp	x1, 0 <loader_callback>
  3c:	adrp	x0, 0 <loader_callback>
  40:	add	x3, x3, #0x0
  44:	add	x1, x1, #0x0
  48:	add	x0, x0, #0x0
  4c:	mov	w2, #0x36                  	// #54
  50:	bl	0 <__assert_fail>
  54:	nop

0000000000000058 <lt_dlloader_add>:
  58:	stp	x29, x30, [sp, #-32]!
  5c:	mov	x29, sp
  60:	cbz	x0, 94 <lt_dlloader_add+0x3c>
  64:	ldr	x1, [x0, #16]
  68:	str	x19, [sp, #16]
  6c:	mov	x19, x0
  70:	cbz	x1, 90 <lt_dlloader_add+0x38>
  74:	ldr	x1, [x0, #24]
  78:	cbz	x1, 90 <lt_dlloader_add+0x38>
  7c:	ldr	x1, [x0, #32]
  80:	cbz	x1, 90 <lt_dlloader_add+0x38>
  84:	ldr	w1, [x0, #64]
  88:	cmp	w1, #0x1
  8c:	b.ls	ac <lt_dlloader_add+0x54>  // b.plast
  90:	ldr	x19, [sp, #16]
  94:	mov	w0, #0x2                   	// #2
  98:	bl	0 <lt__error_string>
  9c:	bl	0 <lt__set_last_error>
  a0:	mov	w0, #0x1                   	// #1
  a4:	ldp	x29, x30, [sp], #32
  a8:	ret
  ac:	bl	0 <lt__slist_box>
  b0:	mov	x1, x0
  b4:	cbz	x0, 10c <lt_dlloader_add+0xb4>
  b8:	ldr	w2, [x19, #64]
  bc:	cbz	w2, ec <lt_dlloader_add+0x94>
  c0:	cmp	w2, #0x1
  c4:	b.ne	124 <lt_dlloader_add+0xcc>  // b.any
  c8:	adrp	x19, 0 <loader_callback>
  cc:	ldr	x0, [x19]
  d0:	bl	0 <lt__slist_concat>
  d4:	mov	x1, x0
  d8:	mov	w0, #0x0                   	// #0
  dc:	str	x1, [x19]
  e0:	ldr	x19, [sp, #16]
  e4:	ldp	x29, x30, [sp], #32
  e8:	ret
  ec:	adrp	x19, 0 <loader_callback>
  f0:	ldr	x1, [x19]
  f4:	bl	0 <lt__slist_cons>
  f8:	mov	x1, x0
  fc:	mov	w0, #0x0                   	// #0
 100:	str	x1, [x19]
 104:	ldr	x19, [sp, #16]
 108:	b	a4 <lt_dlloader_add+0x4c>
 10c:	adrp	x0, 0 <lt__alloc_die>
 110:	ldr	x0, [x0]
 114:	blr	x0
 118:	mov	w0, #0x1                   	// #1
 11c:	ldr	x19, [sp, #16]
 120:	b	a4 <lt_dlloader_add+0x4c>
 124:	adrp	x3, 0 <loader_callback>
 128:	add	x3, x3, #0x0
 12c:	adrp	x1, 0 <loader_callback>
 130:	adrp	x0, 0 <loader_callback>
 134:	add	x3, x3, #0x10
 138:	add	x1, x1, #0x0
 13c:	add	x0, x0, #0x0
 140:	mov	w2, #0x5e                  	// #94
 144:	bl	0 <__assert_fail>

0000000000000148 <lt_dlloader_next>:
 148:	cbz	x0, 154 <lt_dlloader_next+0xc>
 14c:	ldr	x0, [x0]
 150:	ret
 154:	adrp	x0, 0 <loader_callback>
 158:	ldr	x0, [x0]
 15c:	ret

0000000000000160 <lt_dlloader_get>:
 160:	cbz	x0, 16c <lt_dlloader_get+0xc>
 164:	ldr	x0, [x0, #8]
 168:	ret
 16c:	mov	x0, #0x0                   	// #0
 170:	ret
 174:	nop

0000000000000178 <lt_dlloader_remove>:
 178:	stp	x29, x30, [sp, #-96]!
 17c:	mov	x29, sp
 180:	stp	x23, x24, [sp, #48]
 184:	adrp	x23, 0 <loader_callback>
 188:	stp	x21, x22, [sp, #32]
 18c:	mov	x21, x0
 190:	adrp	x22, 0 <loader_callback>
 194:	ldr	x0, [x23]
 198:	add	x22, x22, #0x0
 19c:	mov	x2, x21
 1a0:	mov	x1, x22
 1a4:	bl	0 <lt__slist_find>
 1a8:	cbz	x0, 274 <lt_dlloader_remove+0xfc>
 1ac:	stp	x19, x20, [sp, #16]
 1b0:	ldr	x20, [x0, #8]
 1b4:	cbz	x20, 270 <lt_dlloader_remove+0xf8>
 1b8:	adrp	x0, 0 <loader_callback>
 1bc:	add	x0, x0, #0x0
 1c0:	mov	x1, #0x0                   	// #0
 1c4:	add	x0, x0, #0x20
 1c8:	str	x25, [sp, #64]
 1cc:	bl	0 <lt_dlinterface_register>
 1d0:	mov	x19, x0
 1d4:	mov	w24, #0x0                   	// #0
 1d8:	mov	w25, #0x0                   	// #0
 1dc:	mov	x1, #0x0                   	// #0
 1e0:	mov	x0, x19
 1e4:	bl	0 <lt_dlhandle_iterate>
 1e8:	mov	x1, x0
 1ec:	cbz	x0, 228 <lt_dlloader_remove+0xb0>
 1f0:	ldr	x2, [x1, #8]
 1f4:	cmp	x2, x20
 1f8:	b.ne	1e0 <lt_dlloader_remove+0x68>  // b.any
 1fc:	str	x1, [sp, #88]
 200:	bl	0 <lt_dlisresident>
 204:	mov	w24, #0x1                   	// #1
 208:	ldr	x1, [sp, #88]
 20c:	cbz	w0, 1e0 <lt_dlloader_remove+0x68>
 210:	mov	x0, x19
 214:	mov	w25, w24
 218:	bl	0 <lt_dlhandle_iterate>
 21c:	mov	x1, x0
 220:	cbnz	x0, 1f0 <lt_dlloader_remove+0x78>
 224:	nop
 228:	mov	x0, x19
 22c:	bl	0 <lt_dlinterface_free>
 230:	cbnz	w24, 294 <lt_dlloader_remove+0x11c>
 234:	ldr	x1, [x20, #48]
 238:	cbz	x1, 248 <lt_dlloader_remove+0xd0>
 23c:	ldr	x0, [x20, #56]
 240:	blr	x1
 244:	cbnz	w0, 298 <lt_dlloader_remove+0x120>
 248:	mov	x2, x21
 24c:	mov	x1, x22
 250:	add	x0, x23, #0x0
 254:	bl	0 <lt__slist_remove>
 258:	ldp	x19, x20, [sp, #16]
 25c:	ldp	x21, x22, [sp, #32]
 260:	ldp	x23, x24, [sp, #48]
 264:	ldr	x25, [sp, #64]
 268:	ldp	x29, x30, [sp], #96
 26c:	b	0 <lt__slist_unbox>
 270:	ldp	x19, x20, [sp, #16]
 274:	mov	w0, #0x2                   	// #2
 278:	bl	0 <lt__error_string>
 27c:	bl	0 <lt__set_last_error>
 280:	mov	x0, #0x0                   	// #0
 284:	ldp	x21, x22, [sp, #32]
 288:	ldp	x23, x24, [sp, #48]
 28c:	ldp	x29, x30, [sp], #96
 290:	ret
 294:	cbz	w25, 2b4 <lt_dlloader_remove+0x13c>
 298:	mov	x0, #0x0                   	// #0
 29c:	ldp	x19, x20, [sp, #16]
 2a0:	ldp	x21, x22, [sp, #32]
 2a4:	ldp	x23, x24, [sp, #48]
 2a8:	ldr	x25, [sp, #64]
 2ac:	ldp	x29, x30, [sp], #96
 2b0:	ret
 2b4:	mov	w0, #0x4                   	// #4
 2b8:	bl	0 <lt__error_string>
 2bc:	bl	0 <lt__set_last_error>
 2c0:	ldp	x19, x20, [sp, #16]
 2c4:	ldr	x25, [sp, #64]
 2c8:	b	280 <lt_dlloader_remove+0x108>
 2cc:	nop

00000000000002d0 <lt_dlloader_find>:
 2d0:	stp	x29, x30, [sp, #-16]!
 2d4:	adrp	x3, 0 <loader_callback>
 2d8:	mov	x2, x0
 2dc:	mov	x29, sp
 2e0:	ldr	x0, [x3]
 2e4:	adrp	x1, 0 <loader_callback>
 2e8:	add	x1, x1, #0x0
 2ec:	bl	0 <lt__slist_find>
 2f0:	cbz	x0, 2f8 <lt_dlloader_find+0x28>
 2f4:	ldr	x0, [x0, #8]
 2f8:	ldp	x29, x30, [sp], #16
 2fc:	ret

libltdl_libltdl_la-lt_error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_dladderror>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	cbz	x0, 70 <lt_dladderror+0x70>
  14:	adrp	x21, 0 <lt_dladderror>
  18:	adrp	x22, 0 <lt_dladderror>
  1c:	mov	x20, x0
  20:	ldr	w19, [x21]
  24:	ldr	x0, [x22]
  28:	sub	w19, w19, #0x13
  2c:	sbfiz	x19, x19, #3, #32
  30:	mov	x1, x19
  34:	bl	0 <lt__realloc>
  38:	mov	x1, x0
  3c:	cbz	x0, 68 <lt_dladderror+0x68>
  40:	add	x19, x0, x19
  44:	ldr	w0, [x21]
  48:	str	x1, [x22]
  4c:	add	w1, w0, #0x1
  50:	str	w1, [x21]
  54:	stur	x20, [x19, #-8]
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x21, x22, [sp, #32]
  60:	ldp	x29, x30, [sp], #48
  64:	ret
  68:	mov	w0, #0xffffffff            	// #-1
  6c:	b	58 <lt_dladderror+0x58>
  70:	adrp	x3, 0 <lt_dladderror>
  74:	adrp	x1, 0 <lt_dladderror>
  78:	adrp	x0, 0 <lt_dladderror>
  7c:	add	x3, x3, #0x0
  80:	add	x1, x1, #0x0
  84:	add	x0, x0, #0x0
  88:	mov	w2, #0x35                  	// #53
  8c:	bl	0 <__assert_fail>

0000000000000090 <lt_dlseterror>:
  90:	adrp	x2, 0 <lt_dladderror>
  94:	mov	w1, w0
  98:	cmp	w1, #0x0
  9c:	ldr	w0, [x2]
  a0:	ccmp	w0, w1, #0x4, ge  // ge = tcont
  a4:	b.gt	c4 <lt_dlseterror+0x34>
  a8:	adrp	x2, 0 <lt_dladderror>
  ac:	adrp	x1, 0 <lt_dladderror>
  b0:	add	x1, x1, #0x0
  b4:	mov	w0, #0x1                   	// #1
  b8:	add	x1, x1, #0x25c
  bc:	str	x1, [x2]
  c0:	ret
  c4:	cmp	w1, #0x13
  c8:	b.gt	f0 <lt_dlseterror+0x60>
  cc:	adrp	x2, 0 <lt_dladderror>
  d0:	add	x2, x2, #0x0
  d4:	add	x2, x2, #0x10
  d8:	mov	w4, #0x2a                  	// #42
  dc:	adrp	x3, 0 <lt_dladderror>
  e0:	mov	w0, #0x0                   	// #0
  e4:	smaddl	x1, w1, w4, x2
  e8:	str	x1, [x3]
  ec:	ret
  f0:	adrp	x0, 0 <lt_dladderror>
  f4:	mov	x2, #0xffffffffffffff60    	// #-160
  f8:	add	x1, x2, w1, sxtw #3
  fc:	add	x2, x0, #0x0
 100:	ldr	x3, [x0]
 104:	mov	w0, #0x0                   	// #0
 108:	ldr	x1, [x3, x1]
 10c:	str	x1, [x2, #8]
 110:	ret
 114:	nop

0000000000000118 <lt__error_string>:
 118:	stp	x29, x30, [sp, #-16]!
 11c:	mov	x29, sp
 120:	tbnz	w0, #31, 148 <lt__error_string+0x30>
 124:	cmp	w0, #0x13
 128:	b.gt	16c <lt__error_string+0x54>
 12c:	adrp	x1, 0 <lt_dladderror>
 130:	add	x1, x1, #0x0
 134:	add	x1, x1, #0x10
 138:	mov	w2, #0x2a                  	// #42
 13c:	ldp	x29, x30, [sp], #16
 140:	smaddl	x0, w0, w2, x1
 144:	ret
 148:	adrp	x3, 0 <lt_dladderror>
 14c:	add	x3, x3, #0x0
 150:	adrp	x1, 0 <lt_dladderror>
 154:	adrp	x0, 0 <lt_dladderror>
 158:	add	x3, x3, #0x358
 15c:	add	x1, x1, #0x0
 160:	add	x0, x0, #0x0
 164:	mov	w2, #0x5f                  	// #95
 168:	bl	0 <__assert_fail>
 16c:	adrp	x3, 0 <lt_dladderror>
 170:	add	x3, x3, #0x0
 174:	adrp	x1, 0 <lt_dladderror>
 178:	adrp	x0, 0 <lt_dladderror>
 17c:	add	x3, x3, #0x358
 180:	add	x1, x1, #0x0
 184:	add	x0, x0, #0x0
 188:	mov	w2, #0x60                  	// #96
 18c:	bl	0 <__assert_fail>

0000000000000190 <lt__get_last_error>:
 190:	adrp	x0, 0 <lt_dladderror>
 194:	ldr	x0, [x0]
 198:	ret
 19c:	nop

00000000000001a0 <lt__set_last_error>:
 1a0:	adrp	x1, 0 <lt_dladderror>
 1a4:	str	x0, [x1]
 1a8:	ret

libltdl_libltdl_la-ltdl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__alloc_die_callback>:
       0:	stp	x29, x30, [sp, #-16]!
       4:	mov	w0, #0xb                   	// #11
       8:	mov	x29, sp
       c:	bl	0 <lt__error_string>
      10:	ldp	x29, x30, [sp], #16
      14:	b	0 <lt__set_last_error>

0000000000000018 <canonicalize_path>:
      18:	stp	x29, x30, [sp, #-32]!
      1c:	mov	x29, sp
      20:	stp	x19, x20, [sp, #16]
      24:	cbz	x0, 100 <canonicalize_path+0xe8>
      28:	mov	x20, x1
      2c:	ldrb	w1, [x0]
      30:	mov	x19, x0
      34:	cbz	w1, 100 <canonicalize_path+0xe8>
      38:	bl	0 <strlen>
      3c:	add	x0, x0, #0x1
      40:	bl	0 <lt__malloc>
      44:	mov	x5, x0
      48:	cbz	x0, e8 <canonicalize_path+0xd0>
      4c:	ldrb	w2, [x19]
      50:	cbz	w2, f8 <canonicalize_path+0xe0>
      54:	add	x3, x19, #0x1
      58:	mov	x4, #0x0                   	// #0
      5c:	mov	w1, #0x2f                  	// #47
      60:	b	80 <canonicalize_path+0x68>
      64:	cmp	w2, #0x2f
      68:	b.eq	c4 <canonicalize_path+0xac>  // b.none
      6c:	strb	w2, [x5, x4]
      70:	add	x4, x4, #0x1
      74:	ldrb	w2, [x3]
      78:	add	x3, x3, #0x1
      7c:	cbz	w2, a8 <canonicalize_path+0x90>
      80:	cmp	w2, #0x3a
      84:	b.ne	64 <canonicalize_path+0x4c>  // b.any
      88:	ldrb	w0, [x3]
      8c:	cbz	x4, 9c <canonicalize_path+0x84>
      90:	cmp	w0, #0x3a
      94:	ccmp	w0, #0x0, #0x4, ne  // ne = any
      98:	b.ne	6c <canonicalize_path+0x54>  // b.any
      9c:	mov	w2, w0
      a0:	add	x3, x3, #0x1
      a4:	cbnz	w2, 80 <canonicalize_path+0x68>
      a8:	add	x4, x5, x4
      ac:	strb	wzr, [x4]
      b0:	mov	w0, #0x0                   	// #0
      b4:	str	x5, [x20]
      b8:	ldp	x19, x20, [sp, #16]
      bc:	ldp	x29, x30, [sp], #32
      c0:	ret
      c4:	ldrb	w2, [x3]
      c8:	cmp	w2, #0x3a
      cc:	ccmp	w2, #0x0, #0x4, ne  // ne = any
      d0:	ccmp	w2, w1, #0x4, ne  // ne = any
      d4:	b.eq	78 <canonicalize_path+0x60>  // b.none
      d8:	strb	w1, [x5, x4]
      dc:	add	x4, x4, #0x1
      e0:	ldrb	w2, [x3]
      e4:	b	78 <canonicalize_path+0x60>
      e8:	mov	w0, #0x1                   	// #1
      ec:	ldp	x19, x20, [sp, #16]
      f0:	ldp	x29, x30, [sp], #32
      f4:	ret
      f8:	mov	x4, x0
      fc:	b	ac <canonicalize_path+0x94>
     100:	adrp	x3, 0 <lt__alloc_die_callback>
     104:	adrp	x1, 0 <lt__alloc_die_callback>
     108:	adrp	x0, 0 <lt__alloc_die_callback>
     10c:	add	x3, x3, #0x0
     110:	add	x1, x1, #0x0
     114:	add	x0, x0, #0x0
     118:	mov	w2, #0x24f                 	// #591
     11c:	bl	0 <__assert_fail>

0000000000000120 <tryall_dlopen>:
     120:	stp	x29, x30, [sp, #-64]!
     124:	adrp	x4, 0 <lt__alloc_die_callback>
     128:	mov	x29, sp
     12c:	stp	x19, x20, [sp, #16]
     130:	mov	x20, x1
     134:	ldr	x19, [x4]
     138:	stp	x21, x22, [sp, #32]
     13c:	mov	x22, x2
     140:	mov	x21, x3
     144:	stp	x23, x24, [sp, #48]
     148:	mov	x24, x0
     14c:	bl	0 <lt__get_last_error>
     150:	mov	x23, x0
     154:	cbnz	x19, 178 <tryall_dlopen+0x58>
     158:	b	1b0 <tryall_dlopen+0x90>
     15c:	cmp	x20, #0x0
     160:	ccmp	x0, #0x0, #0x4, ne  // ne = any
     164:	b.eq	170 <tryall_dlopen+0x50>  // b.none
     168:	bl	0 <strcmp>
     16c:	cbz	w0, 188 <tryall_dlopen+0x68>
     170:	ldr	x19, [x19]
     174:	cbz	x19, 1b0 <tryall_dlopen+0x90>
     178:	ldr	x0, [x19, #16]
     17c:	mov	x1, x20
     180:	cmp	x0, x20
     184:	b.ne	15c <tryall_dlopen+0x3c>  // b.any
     188:	ldr	w1, [x19, #32]
     18c:	mov	w0, #0x0                   	// #0
     190:	add	w1, w1, #0x1
     194:	str	w1, [x19, #32]
     198:	str	x19, [x24]
     19c:	ldp	x19, x20, [sp, #16]
     1a0:	ldp	x21, x22, [sp, #32]
     1a4:	ldp	x23, x24, [sp, #48]
     1a8:	ldp	x29, x30, [sp], #64
     1ac:	ret
     1b0:	ldr	x19, [x24]
     1b4:	cbz	x20, 2ac <tryall_dlopen+0x18c>
     1b8:	mov	x0, x20
     1bc:	bl	0 <lt__strdup>
     1c0:	str	x0, [x19, #16]
     1c4:	cbz	x0, 2b4 <tryall_dlopen+0x194>
     1c8:	mov	x0, #0x0                   	// #0
     1cc:	bl	0 <lt_dlloader_next>
     1d0:	mov	x24, x0
     1d4:	cbz	x21, 24c <tryall_dlopen+0x12c>
     1d8:	ldr	x3, [x21, #16]
     1dc:	mov	x1, x20
     1e0:	ldr	x0, [x21, #56]
     1e4:	mov	x2, x22
     1e8:	blr	x3
     1ec:	str	x0, [x19, #56]
     1f0:	cbz	x0, 288 <tryall_dlopen+0x168>
     1f4:	cbz	x22, 228 <tryall_dlopen+0x108>
     1f8:	ldrb	w1, [x22]
     1fc:	ldrb	w2, [x19, #36]
     200:	ubfx	x0, x1, #2, #1
     204:	ubfx	x3, x1, #3, #1
     208:	ubfx	x1, x1, #1, #1
     20c:	ubfiz	w0, w0, #1, #7
     210:	ubfiz	w3, w3, #2, #6
     214:	orr	w0, w0, w1
     218:	mov	w1, w2
     21c:	orr	w0, w0, w3
     220:	bfxil	w1, w0, #0, #3
     224:	strb	w1, [x19, #36]
     228:	str	x21, [x19, #8]
     22c:	mov	x0, x23
     230:	bl	0 <lt__set_last_error>
     234:	mov	w0, #0x0                   	// #0
     238:	ldp	x19, x20, [sp, #16]
     23c:	ldp	x21, x22, [sp, #32]
     240:	ldp	x23, x24, [sp, #48]
     244:	ldp	x29, x30, [sp], #64
     248:	ret
     24c:	mov	x0, x24
     250:	bl	0 <lt_dlloader_get>
     254:	mov	x21, x0
     258:	mov	x1, x20
     25c:	ldr	x3, [x0, #16]
     260:	mov	x2, x22
     264:	ldr	x0, [x0, #56]
     268:	blr	x3
     26c:	mov	x1, x0
     270:	str	x1, [x19, #56]
     274:	mov	x0, x24
     278:	cbnz	x1, 2bc <tryall_dlopen+0x19c>
     27c:	bl	0 <lt_dlloader_next>
     280:	mov	x24, x0
     284:	cbnz	x0, 24c <tryall_dlopen+0x12c>
     288:	ldr	x0, [x19, #16]
     28c:	bl	0 <free>
     290:	str	xzr, [x19, #16]
     294:	mov	w0, #0x1                   	// #1
     298:	ldp	x19, x20, [sp, #16]
     29c:	ldp	x21, x22, [sp, #32]
     2a0:	ldp	x23, x24, [sp, #48]
     2a4:	ldp	x29, x30, [sp], #64
     2a8:	ret
     2ac:	str	xzr, [x19, #16]
     2b0:	b	1c8 <tryall_dlopen+0xa8>
     2b4:	mov	w0, #0x1                   	// #1
     2b8:	b	19c <tryall_dlopen+0x7c>
     2bc:	cbz	x22, 2f0 <tryall_dlopen+0x1d0>
     2c0:	ldrb	w1, [x22]
     2c4:	ldrb	w2, [x19, #36]
     2c8:	ubfx	x0, x1, #2, #1
     2cc:	ubfx	x3, x1, #3, #1
     2d0:	ubfx	x1, x1, #1, #1
     2d4:	ubfiz	w0, w0, #1, #7
     2d8:	ubfiz	w3, w3, #2, #6
     2dc:	orr	w0, w0, w1
     2e0:	mov	w1, w2
     2e4:	orr	w0, w0, w3
     2e8:	bfxil	w1, w0, #0, #3
     2ec:	strb	w1, [x19, #36]
     2f0:	cbz	x24, 288 <tryall_dlopen+0x168>
     2f4:	b	228 <tryall_dlopen+0x108>

00000000000002f8 <tryall_dlopen_module>:
     2f8:	stp	x29, x30, [sp, #-80]!
     2fc:	mov	x29, sp
     300:	stp	x19, x20, [sp, #16]
     304:	stp	x21, x22, [sp, #32]
     308:	stp	x23, x24, [sp, #48]
     30c:	stp	x25, x26, [sp, #64]
     310:	cbz	x2, 41c <tryall_dlopen_module+0x124>
     314:	mov	x23, x0
     318:	ldrb	w0, [x2]
     31c:	mov	x22, x1
     320:	mov	x19, x2
     324:	mov	x20, x3
     328:	mov	x26, x4
     32c:	cbnz	w0, 3c0 <tryall_dlopen_module+0xc8>
     330:	cbz	x3, 440 <tryall_dlopen_module+0x148>
     334:	mov	x21, #0x2                   	// #2
     338:	mov	x25, #0x0                   	// #0
     33c:	ldrb	w0, [x20]
     340:	cbz	w0, 350 <tryall_dlopen_module+0x58>
     344:	mov	x0, x20
     348:	bl	0 <strlen>
     34c:	add	x21, x21, x0
     350:	mov	x0, x21
     354:	mov	w24, #0x1                   	// #1
     358:	bl	0 <lt__malloc>
     35c:	mov	x21, x0
     360:	cbz	x0, 3a4 <tryall_dlopen_module+0xac>
     364:	adrp	x1, 0 <lt__alloc_die_callback>
     368:	mov	x4, x20
     36c:	mov	x3, x19
     370:	mov	w2, w25
     374:	add	x1, x1, #0x0
     378:	bl	0 <sprintf>
     37c:	cbz	x22, 3f4 <tryall_dlopen_module+0xfc>
     380:	mov	x4, x26
     384:	mov	x2, x22
     388:	mov	x0, x23
     38c:	mov	x3, x21
     390:	mov	x1, #0x0                   	// #0
     394:	bl	2f8 <tryall_dlopen_module>
     398:	mov	w24, w0
     39c:	mov	x0, x21
     3a0:	bl	0 <free>
     3a4:	mov	w0, w24
     3a8:	ldp	x19, x20, [sp, #16]
     3ac:	ldp	x21, x22, [sp, #32]
     3b0:	ldp	x23, x24, [sp, #48]
     3b4:	ldp	x25, x26, [sp, #64]
     3b8:	ldp	x29, x30, [sp], #80
     3bc:	ret
     3c0:	mov	x0, x2
     3c4:	bl	0 <strlen>
     3c8:	mov	x25, x0
     3cc:	cbz	x20, 440 <tryall_dlopen_module+0x148>
     3d0:	cbz	x0, 414 <tryall_dlopen_module+0x11c>
     3d4:	sub	x0, x0, #0x1
     3d8:	add	x21, x25, #0x2
     3dc:	ldrb	w1, [x19, x0]
     3e0:	cmp	w1, #0x2f
     3e4:	b.ne	33c <tryall_dlopen_module+0x44>  // b.any
     3e8:	add	x21, x25, #0x1
     3ec:	mov	x25, x0
     3f0:	b	33c <tryall_dlopen_module+0x44>
     3f4:	mov	x2, x26
     3f8:	mov	x0, x23
     3fc:	mov	x1, x21
     400:	mov	x3, #0x0                   	// #0
     404:	bl	120 <tryall_dlopen>
     408:	cmp	w0, #0x0
     40c:	cset	w24, ne  // ne = any
     410:	b	39c <tryall_dlopen_module+0xa4>
     414:	mov	x21, #0x2                   	// #2
     418:	b	33c <tryall_dlopen_module+0x44>
     41c:	adrp	x3, 0 <lt__alloc_die_callback>
     420:	add	x3, x3, #0x0
     424:	adrp	x1, 0 <lt__alloc_die_callback>
     428:	adrp	x0, 0 <lt__alloc_die_callback>
     42c:	add	x3, x3, #0x18
     430:	add	x1, x1, #0x0
     434:	add	x0, x0, #0x0
     438:	mov	w2, #0x1f7                 	// #503
     43c:	bl	0 <__assert_fail>
     440:	adrp	x3, 0 <lt__alloc_die_callback>
     444:	add	x3, x3, #0x0
     448:	adrp	x1, 0 <lt__alloc_die_callback>
     44c:	adrp	x0, 0 <lt__alloc_die_callback>
     450:	add	x3, x3, #0x18
     454:	add	x1, x1, #0x0
     458:	add	x0, x0, #0x0
     45c:	mov	w2, #0x1f8                 	// #504
     460:	bl	0 <__assert_fail>
     464:	nop

0000000000000468 <trim>:
     468:	stp	x29, x30, [sp, #-64]!
     46c:	mov	x29, sp
     470:	stp	x19, x20, [sp, #16]
     474:	mov	x19, x1
     478:	stp	x21, x22, [sp, #32]
     47c:	mov	x21, x0
     480:	mov	x0, x1
     484:	mov	w1, #0x27                  	// #39
     488:	bl	0 <strrchr>
     48c:	ldrb	w1, [x19]
     490:	mov	x20, x0
     494:	cbz	w1, 50c <trim+0xa4>
     498:	mov	x0, x19
     49c:	bl	0 <strlen>
     4a0:	mov	x22, x0
     4a4:	ldr	x0, [x21]
     4a8:	bl	0 <free>
     4ac:	str	xzr, [x21]
     4b0:	cmp	x20, #0x0
     4b4:	ccmp	x19, x20, #0x4, ne  // ne = any
     4b8:	b.eq	540 <trim+0xd8>  // b.none
     4bc:	cmp	x22, #0x3
     4c0:	b.ls	524 <trim+0xbc>  // b.plast
     4c4:	ldrb	w0, [x19]
     4c8:	mov	w22, #0x0                   	// #0
     4cc:	cmp	w0, #0x27
     4d0:	b.ne	528 <trim+0xc0>  // b.any
     4d4:	sub	x20, x20, x19
     4d8:	str	x23, [sp, #48]
     4dc:	mov	x0, x20
     4e0:	bl	0 <lt__malloc>
     4e4:	mov	x23, x0
     4e8:	cbz	x0, 53c <trim+0xd4>
     4ec:	sub	x2, x20, #0x1
     4f0:	add	x20, x23, x20
     4f4:	add	x1, x19, #0x1
     4f8:	bl	0 <memcpy>
     4fc:	sturb	wzr, [x20, #-1]
     500:	str	x23, [x21]
     504:	ldr	x23, [sp, #48]
     508:	b	528 <trim+0xc0>
     50c:	ldr	x0, [x21]
     510:	bl	0 <free>
     514:	str	xzr, [x21]
     518:	cmp	x20, #0x0
     51c:	ccmp	x19, x20, #0x4, ne  // ne = any
     520:	b.eq	540 <trim+0xd8>  // b.none
     524:	mov	w22, #0x0                   	// #0
     528:	mov	w0, w22
     52c:	ldp	x19, x20, [sp, #16]
     530:	ldp	x21, x22, [sp, #32]
     534:	ldp	x29, x30, [sp], #64
     538:	ret
     53c:	ldr	x23, [sp, #48]
     540:	mov	w22, #0x1                   	// #1
     544:	mov	w0, w22
     548:	ldp	x19, x20, [sp, #16]
     54c:	ldp	x21, x22, [sp, #32]
     550:	ldp	x29, x30, [sp], #64
     554:	ret

0000000000000558 <find_file_callback>:
     558:	stp	x29, x30, [sp, #-48]!
     55c:	mov	x29, sp
     560:	stp	x19, x20, [sp, #16]
     564:	str	x21, [sp, #32]
     568:	cbz	x0, 5f8 <find_file_callback+0xa0>
     56c:	mov	x20, x1
     570:	ldrb	w1, [x0]
     574:	mov	x19, x0
     578:	cbz	w1, 5f8 <find_file_callback+0xa0>
     57c:	cbz	x20, 640 <find_file_callback+0xe8>
     580:	mov	x21, x2
     584:	cbz	x2, 61c <find_file_callback+0xc4>
     588:	adrp	x1, 0 <lt__alloc_die_callback>
     58c:	add	x1, x1, #0x0
     590:	bl	0 <fopen>
     594:	mov	x1, x0
     598:	str	x1, [x21]
     59c:	mov	w0, #0x0                   	// #0
     5a0:	cbz	x1, 5e0 <find_file_callback+0x88>
     5a4:	mov	x0, x19
     5a8:	mov	w1, #0x2f                  	// #47
     5ac:	bl	0 <strrchr>
     5b0:	cmp	x19, x0
     5b4:	b.cc	5f0 <find_file_callback+0x98>  // b.lo, b.ul, b.last
     5b8:	ldr	x0, [x20]
     5bc:	bl	0 <free>
     5c0:	str	xzr, [x20]
     5c4:	mov	x0, x19
     5c8:	bl	0 <lt__strdup>
     5cc:	mov	x1, x0
     5d0:	cmp	x1, #0x0
     5d4:	mov	w0, #0x1                   	// #1
     5d8:	cneg	w0, w0, eq  // eq = none
     5dc:	str	x1, [x20]
     5e0:	ldp	x19, x20, [sp, #16]
     5e4:	ldr	x21, [sp, #32]
     5e8:	ldp	x29, x30, [sp], #48
     5ec:	ret
     5f0:	strb	wzr, [x0]
     5f4:	b	5b8 <find_file_callback+0x60>
     5f8:	adrp	x3, 0 <lt__alloc_die_callback>
     5fc:	add	x3, x3, #0x0
     600:	adrp	x1, 0 <lt__alloc_die_callback>
     604:	adrp	x0, 0 <lt__alloc_die_callback>
     608:	add	x3, x3, #0x30
     60c:	add	x1, x1, #0x0
     610:	add	x0, x0, #0x0
     614:	mov	w2, #0x2f0                 	// #752
     618:	bl	0 <__assert_fail>
     61c:	adrp	x3, 0 <lt__alloc_die_callback>
     620:	add	x3, x3, #0x0
     624:	adrp	x1, 0 <lt__alloc_die_callback>
     628:	adrp	x0, 0 <lt__alloc_die_callback>
     62c:	add	x3, x3, #0x30
     630:	add	x1, x1, #0x0
     634:	add	x0, x0, #0x0
     638:	mov	w2, #0x2f2                 	// #754
     63c:	bl	0 <__assert_fail>
     640:	adrp	x3, 0 <lt__alloc_die_callback>
     644:	add	x3, x3, #0x0
     648:	adrp	x1, 0 <lt__alloc_die_callback>
     64c:	adrp	x0, 0 <lt__alloc_die_callback>
     650:	add	x3, x3, #0x30
     654:	add	x1, x1, #0x0
     658:	add	x0, x0, #0x0
     65c:	mov	w2, #0x2f1                 	// #753
     660:	bl	0 <__assert_fail>
     664:	nop

0000000000000668 <argzize_path>:
     668:	stp	x29, x30, [sp, #-16]!
     66c:	mov	x29, sp
     670:	cbz	x0, 6c8 <argzize_path+0x60>
     674:	mov	x3, x2
     678:	mov	x2, x1
     67c:	mov	w1, #0x3a                  	// #58
     680:	bl	0 <argz_create_sep>
     684:	cbnz	w0, 690 <argzize_path+0x28>
     688:	ldp	x29, x30, [sp], #16
     68c:	ret
     690:	cmp	w0, #0xc
     694:	b.eq	6b0 <argzize_path+0x48>  // b.none
     698:	mov	w0, #0x0                   	// #0
     69c:	bl	0 <lt__error_string>
     6a0:	bl	0 <lt__set_last_error>
     6a4:	mov	w0, #0x1                   	// #1
     6a8:	ldp	x29, x30, [sp], #16
     6ac:	ret
     6b0:	mov	w0, #0xb                   	// #11
     6b4:	bl	0 <lt__error_string>
     6b8:	bl	0 <lt__set_last_error>
     6bc:	mov	w0, #0x1                   	// #1
     6c0:	ldp	x29, x30, [sp], #16
     6c4:	ret
     6c8:	adrp	x3, 0 <lt__alloc_die_callback>
     6cc:	add	x3, x3, #0x0
     6d0:	adrp	x1, 0 <lt__alloc_die_callback>
     6d4:	adrp	x0, 0 <lt__alloc_die_callback>
     6d8:	add	x3, x3, #0x48
     6dc:	add	x1, x1, #0x0
     6e0:	add	x0, x0, #0x0
     6e4:	mov	w2, #0x28c                 	// #652
     6e8:	bl	0 <__assert_fail>
     6ec:	nop

00000000000006f0 <find_handle_callback>:
     6f0:	stp	x29, x30, [sp, #-48]!
     6f4:	mov	x29, sp
     6f8:	stp	x19, x20, [sp, #16]
     6fc:	mov	x19, x1
     700:	mov	x20, x0
     704:	mov	w1, #0x4                   	// #4
     708:	str	x21, [sp, #32]
     70c:	mov	x21, x2
     710:	bl	0 <access>
     714:	cbz	w0, 72c <find_handle_callback+0x3c>
     718:	mov	w0, #0x0                   	// #0
     71c:	ldp	x19, x20, [sp, #16]
     720:	ldr	x21, [sp, #32]
     724:	ldp	x29, x30, [sp], #48
     728:	ret
     72c:	mov	x1, x20
     730:	mov	x2, x21
     734:	mov	x0, x19
     738:	mov	x3, #0x0                   	// #0
     73c:	bl	120 <tryall_dlopen>
     740:	mov	w1, w0
     744:	mov	w0, #0x1                   	// #1
     748:	cbz	w1, 71c <find_handle_callback+0x2c>
     74c:	str	xzr, [x19]
     750:	ldp	x19, x20, [sp, #16]
     754:	ldr	x21, [sp, #32]
     758:	ldp	x29, x30, [sp], #48
     75c:	ret

0000000000000760 <foreachfile_callback>:
     760:	stp	x29, x30, [sp, #-112]!
     764:	mov	x29, sp
     768:	stp	x21, x22, [sp, #32]
     76c:	stp	x25, x26, [sp, #64]
     770:	stp	xzr, xzr, [sp, #96]
     774:	ldr	x25, [x1]
     778:	cbz	x0, a4c <foreachfile_callback+0x2ec>
     77c:	ldrb	w1, [x0]
     780:	mov	x21, x0
     784:	cbz	w1, a4c <foreachfile_callback+0x2ec>
     788:	stp	x23, x24, [sp, #48]
     78c:	mov	x23, x2
     790:	bl	0 <strlen>
     794:	add	x0, x21, x0
     798:	ldurb	w0, [x0, #-1]
     79c:	stp	x19, x20, [sp, #16]
     7a0:	cmp	w0, #0x2f
     7a4:	b.eq	a7c <foreachfile_callback+0x31c>  // b.none
     7a8:	mov	x0, x21
     7ac:	bl	0 <opendir>
     7b0:	mov	x22, x0
     7b4:	cbz	x0, 9c8 <foreachfile_callback+0x268>
     7b8:	adrp	x24, 0 <lt__alloc_die_callback>
     7bc:	add	x24, x24, #0x0
     7c0:	stp	x27, x28, [sp, #80]
     7c4:	b	7d4 <foreachfile_callback+0x74>
     7c8:	ldrb	w0, [x19, #19]
     7cc:	cmp	w0, #0x2e
     7d0:	b.ne	86c <foreachfile_callback+0x10c>  // b.any
     7d4:	mov	x0, x22
     7d8:	bl	0 <readdir>
     7dc:	mov	x19, x0
     7e0:	cbnz	x0, 7c8 <foreachfile_callback+0x68>
     7e4:	mov	x0, x22
     7e8:	bl	0 <closedir>
     7ec:	ldr	x20, [sp, #96]
     7f0:	cbz	x20, 864 <foreachfile_callback+0x104>
     7f4:	ldr	x0, [sp, #104]
     7f8:	cbz	x19, 860 <foreachfile_callback+0x100>
     7fc:	add	x21, x20, x0
     800:	cmp	x19, x21
     804:	b.cs	864 <foreachfile_callback+0x104>  // b.hs, b.nlast
     808:	mov	x0, x19
     80c:	bl	0 <strlen>
     810:	add	x0, x0, #0x1
     814:	add	x19, x19, x0
     818:	cmp	x21, x19
     81c:	b.ls	864 <foreachfile_callback+0x104>  // b.plast
     820:	mov	x1, x23
     824:	mov	x0, x19
     828:	blr	x25
     82c:	mov	w21, w0
     830:	ldr	x20, [sp, #96]
     834:	cbz	w0, 7f4 <foreachfile_callback+0x94>
     838:	ldp	x27, x28, [sp, #80]
     83c:	mov	x0, x20
     840:	bl	0 <free>
     844:	mov	w0, w21
     848:	ldp	x19, x20, [sp, #16]
     84c:	ldp	x21, x22, [sp, #32]
     850:	ldp	x23, x24, [sp, #48]
     854:	ldp	x25, x26, [sp, #64]
     858:	ldp	x29, x30, [sp], #112
     85c:	ret
     860:	cbnz	x0, 9dc <foreachfile_callback+0x27c>
     864:	mov	w21, #0x0                   	// #0
     868:	b	838 <foreachfile_callback+0xd8>
     86c:	ldrb	w0, [x21]
     870:	mov	x26, #0x0                   	// #0
     874:	cbz	w0, 884 <foreachfile_callback+0x124>
     878:	mov	x0, x21
     87c:	bl	0 <strlen>
     880:	mov	x26, x0
     884:	add	x19, x19, #0x13
     888:	mov	x0, x19
     88c:	bl	0 <strlen>
     890:	add	x27, x19, x0
     894:	mov	x20, x27
     898:	b	8ac <foreachfile_callback+0x14c>
     89c:	ldrb	w1, [x20]
     8a0:	mov	x0, x24
     8a4:	bl	0 <strchr>
     8a8:	cbz	x0, 9b4 <foreachfile_callback+0x254>
     8ac:	mov	x28, x20
     8b0:	sub	x20, x20, #0x1
     8b4:	cmp	x19, x20
     8b8:	b.cc	89c <foreachfile_callback+0x13c>  // b.lo, b.ul, b.last
     8bc:	ldrb	w0, [x28]
     8c0:	cmp	w0, #0x2e
     8c4:	b.eq	a44 <foreachfile_callback+0x2e4>  // b.none
     8c8:	sub	x20, x27, #0x1
     8cc:	cmp	x19, x20
     8d0:	b.cc	8e4 <foreachfile_callback+0x184>  // b.lo, b.ul, b.last
     8d4:	b	9d4 <foreachfile_callback+0x274>
     8d8:	sub	x20, x20, #0x1
     8dc:	cmp	x19, x20
     8e0:	b.eq	9d4 <foreachfile_callback+0x274>  // b.none
     8e4:	ldrb	w0, [x20]
     8e8:	cmp	w0, #0x2e
     8ec:	b.ne	8d8 <foreachfile_callback+0x178>  // b.any
     8f0:	sub	x20, x20, x19
     8f4:	add	x27, x20, x26
     8f8:	add	x0, x27, #0x2
     8fc:	bl	0 <lt__malloc>
     900:	mov	x26, x0
     904:	cbz	x0, a1c <foreachfile_callback+0x2bc>
     908:	mov	x1, x21
     90c:	bl	0 <stpcpy>
     910:	mov	x3, x0
     914:	add	x27, x26, x27
     918:	mov	w4, #0x2f                  	// #47
     91c:	mov	x2, x20
     920:	mov	x1, x19
     924:	mov	x0, x26
     928:	strh	w4, [x3]
     92c:	bl	0 <strncat>
     930:	strb	wzr, [x27, #1]
     934:	ldrb	w0, [x26]
     938:	cbz	w0, aa4 <foreachfile_callback+0x344>
     93c:	ldr	x19, [sp, #96]
     940:	cbz	x19, 988 <foreachfile_callback+0x228>
     944:	ldr	x0, [sp, #104]
     948:	add	x20, x19, x0
     94c:	cbz	x0, 988 <foreachfile_callback+0x228>
     950:	mov	x1, x19
     954:	mov	x0, x26
     958:	bl	0 <strcmp>
     95c:	cmp	w0, #0x0
     960:	b.lt	9e8 <foreachfile_callback+0x288>  // b.tstop
     964:	b.eq	9a8 <foreachfile_callback+0x248>  // b.none
     968:	cmp	x20, x19
     96c:	b.ls	988 <foreachfile_callback+0x228>  // b.plast
     970:	mov	x0, x19
     974:	bl	0 <strlen>
     978:	add	x0, x0, #0x1
     97c:	add	x19, x19, x0
     980:	cmp	x20, x19
     984:	b.hi	950 <foreachfile_callback+0x1f0>  // b.pmore
     988:	mov	x0, x26
     98c:	bl	0 <strlen>
     990:	mov	x2, x26
     994:	add	x3, x0, #0x1
     998:	add	x1, sp, #0x68
     99c:	add	x0, sp, #0x60
     9a0:	bl	0 <argz_append>
     9a4:	cbnz	w0, a00 <foreachfile_callback+0x2a0>
     9a8:	mov	x0, x26
     9ac:	bl	0 <free>
     9b0:	b	7d4 <foreachfile_callback+0x74>
     9b4:	ldrb	w0, [x28]
     9b8:	cmp	w0, #0x2e
     9bc:	b.ne	8c8 <foreachfile_callback+0x168>  // b.any
     9c0:	mov	x27, x28
     9c4:	b	8e4 <foreachfile_callback+0x184>
     9c8:	mov	w21, #0x0                   	// #0
     9cc:	ldr	x20, [sp, #96]
     9d0:	b	83c <foreachfile_callback+0xdc>
     9d4:	mov	x20, x27
     9d8:	b	8f0 <foreachfile_callback+0x190>
     9dc:	cbz	x20, 864 <foreachfile_callback+0x104>
     9e0:	mov	x19, x20
     9e4:	b	820 <foreachfile_callback+0xc0>
     9e8:	mov	x2, x19
     9ec:	mov	x3, x26
     9f0:	add	x1, sp, #0x68
     9f4:	add	x0, sp, #0x60
     9f8:	bl	0 <argz_insert>
     9fc:	cbz	w0, 9a8 <foreachfile_callback+0x248>
     a00:	cmp	w0, #0xc
     a04:	b.eq	a34 <foreachfile_callback+0x2d4>  // b.none
     a08:	mov	w0, #0x0                   	// #0
     a0c:	bl	0 <lt__error_string>
     a10:	bl	0 <lt__set_last_error>
     a14:	mov	x0, x26
     a18:	bl	0 <free>
     a1c:	mov	x0, x22
     a20:	mov	w21, #0x0                   	// #0
     a24:	bl	0 <closedir>
     a28:	ldp	x27, x28, [sp, #80]
     a2c:	ldr	x20, [sp, #96]
     a30:	b	83c <foreachfile_callback+0xdc>
     a34:	mov	w0, #0xb                   	// #11
     a38:	bl	0 <lt__error_string>
     a3c:	bl	0 <lt__set_last_error>
     a40:	b	a14 <foreachfile_callback+0x2b4>
     a44:	mov	x20, x28
     a48:	b	8f0 <foreachfile_callback+0x190>
     a4c:	adrp	x3, 0 <lt__alloc_die_callback>
     a50:	add	x3, x3, #0x0
     a54:	adrp	x1, 0 <lt__alloc_die_callback>
     a58:	adrp	x0, 0 <lt__alloc_die_callback>
     a5c:	add	x3, x3, #0x58
     a60:	add	x1, x1, #0x0
     a64:	add	x0, x0, #0x0
     a68:	mov	w2, #0x730                 	// #1840
     a6c:	stp	x19, x20, [sp, #16]
     a70:	stp	x23, x24, [sp, #48]
     a74:	stp	x27, x28, [sp, #80]
     a78:	bl	0 <__assert_fail>
     a7c:	adrp	x3, 0 <lt__alloc_die_callback>
     a80:	add	x3, x3, #0x0
     a84:	adrp	x1, 0 <lt__alloc_die_callback>
     a88:	adrp	x0, 0 <lt__alloc_die_callback>
     a8c:	add	x3, x3, #0x58
     a90:	add	x1, x1, #0x0
     a94:	add	x0, x0, #0x0
     a98:	mov	w2, #0x733                 	// #1843
     a9c:	stp	x27, x28, [sp, #80]
     aa0:	bl	0 <__assert_fail>
     aa4:	adrp	x3, 0 <lt__alloc_die_callback>
     aa8:	add	x3, x3, #0x0
     aac:	adrp	x1, 0 <lt__alloc_die_callback>
     ab0:	adrp	x0, 0 <lt__alloc_die_callback>
     ab4:	add	x3, x3, #0x70
     ab8:	add	x1, x1, #0x0
     abc:	add	x0, x0, #0x0
     ac0:	mov	w2, #0x6dd                 	// #1757
     ac4:	bl	0 <__assert_fail>

0000000000000ac8 <lt_dlinit>:
     ac8:	stp	x29, x30, [sp, #-32]!
     acc:	adrp	x2, 0 <lt__alloc_die_callback>
     ad0:	add	x1, x2, #0x0
     ad4:	mov	x29, sp
     ad8:	stp	x19, x20, [sp, #16]
     adc:	mov	w0, #0x0                   	// #0
     ae0:	ldr	w19, [x1, #8]
     ae4:	add	w19, w19, #0x1
     ae8:	str	w19, [x1, #8]
     aec:	cmp	w19, #0x1
     af0:	b.eq	b00 <lt_dlinit+0x38>  // b.none
     af4:	ldp	x19, x20, [sp, #16]
     af8:	ldp	x29, x30, [sp], #32
     afc:	ret
     b00:	str	xzr, [x2]
     b04:	adrp	x2, 0 <lt__alloc_die_callback>
     b08:	add	x2, x2, #0x0
     b0c:	adrp	x3, 0 <lt__alloc_die>
     b10:	mov	x0, #0x0                   	// #0
     b14:	str	xzr, [x1, #16]
     b18:	str	x2, [x3]
     b1c:	bl	0 <preopen_LTX_get_vtable>
     b20:	mov	x20, x0
     b24:	bl	0 <lt_dlloader_add>
     b28:	cmp	w0, #0x0
     b2c:	ccmp	x20, #0x0, #0x0, eq  // eq = none
     b30:	b.eq	b8c <lt_dlinit+0xc4>  // b.none
     b34:	cbnz	w0, af4 <lt_dlinit+0x2c>
     b38:	ldr	x1, [x20, #40]
     b3c:	cbz	x1, b4c <lt_dlinit+0x84>
     b40:	ldr	x0, [x20, #56]
     b44:	blr	x1
     b48:	cbnz	w0, b78 <lt_dlinit+0xb0>
     b4c:	adrp	x0, 0 <lt_libltdl_LTX_preloaded_symbols>
     b50:	add	x0, x0, #0x0
     b54:	bl	0 <lt_dlpreload>
     b58:	cbnz	w0, af4 <lt_dlinit+0x2c>
     b5c:	ldp	x19, x20, [sp, #16]
     b60:	adrp	x1, 0 <lt__alloc_die_callback>
     b64:	ldp	x29, x30, [sp], #32
     b68:	add	x1, x1, #0x0
     b6c:	adrp	x0, 0 <lt__alloc_die_callback>
     b70:	add	x0, x0, #0x0
     b74:	b	0 <lt_dlpreload_open>
     b78:	mov	w0, #0x3                   	// #3
     b7c:	bl	0 <lt__error_string>
     b80:	bl	0 <lt__set_last_error>
     b84:	mov	w0, w19
     b88:	b	af4 <lt_dlinit+0x2c>
     b8c:	adrp	x3, 0 <lt__alloc_die_callback>
     b90:	add	x3, x3, #0x0
     b94:	adrp	x1, 0 <lt__alloc_die_callback>
     b98:	adrp	x0, 0 <lt__alloc_die_callback>
     b9c:	add	x3, x3, #0x88
     ba0:	add	x1, x1, #0x0
     ba4:	add	x0, x0, #0x0
     ba8:	mov	w2, #0xc7                  	// #199
     bac:	bl	0 <__assert_fail>

0000000000000bb0 <lt_dladvise_init>:
     bb0:	stp	x29, x30, [sp, #-32]!
     bb4:	mov	x29, sp
     bb8:	str	x19, [sp, #16]
     bbc:	mov	x19, x0
     bc0:	mov	x0, #0x4                   	// #4
     bc4:	bl	0 <lt__zalloc>
     bc8:	cmp	x0, #0x0
     bcc:	str	x0, [x19]
     bd0:	cset	w0, eq  // eq = none
     bd4:	ldr	x19, [sp, #16]
     bd8:	ldp	x29, x30, [sp], #32
     bdc:	ret

0000000000000be0 <lt_dladvise_destroy>:
     be0:	cbz	x0, c10 <lt_dladvise_destroy+0x30>
     be4:	stp	x29, x30, [sp, #-32]!
     be8:	mov	x29, sp
     bec:	str	x19, [sp, #16]
     bf0:	mov	x19, x0
     bf4:	ldr	x0, [x0]
     bf8:	bl	0 <free>
     bfc:	str	xzr, [x19]
     c00:	mov	w0, #0x0                   	// #0
     c04:	ldr	x19, [sp, #16]
     c08:	ldp	x29, x30, [sp], #32
     c0c:	ret
     c10:	mov	w0, #0x0                   	// #0
     c14:	ret

0000000000000c18 <lt_dladvise_ext>:
     c18:	cbz	x0, c38 <lt_dladvise_ext+0x20>
     c1c:	ldr	x1, [x0]
     c20:	cbz	x1, c38 <lt_dladvise_ext+0x20>
     c24:	ldrb	w2, [x1]
     c28:	mov	w0, #0x0                   	// #0
     c2c:	orr	w2, w2, #0x1
     c30:	strb	w2, [x1]
     c34:	ret
     c38:	stp	x29, x30, [sp, #-16]!
     c3c:	adrp	x3, 0 <lt__alloc_die_callback>
     c40:	add	x3, x3, #0x0
     c44:	mov	x29, sp
     c48:	adrp	x1, 0 <lt__alloc_die_callback>
     c4c:	adrp	x0, 0 <lt__alloc_die_callback>
     c50:	add	x3, x3, #0x98
     c54:	add	x1, x1, #0x0
     c58:	add	x0, x0, #0x0
     c5c:	mov	w2, #0x631                 	// #1585
     c60:	bl	0 <__assert_fail>
     c64:	nop

0000000000000c68 <lt_dladvise_resident>:
     c68:	cbz	x0, c88 <lt_dladvise_resident+0x20>
     c6c:	ldr	x1, [x0]
     c70:	cbz	x1, c88 <lt_dladvise_resident+0x20>
     c74:	ldrb	w2, [x1]
     c78:	mov	w0, #0x0                   	// #0
     c7c:	orr	w2, w2, #0x2
     c80:	strb	w2, [x1]
     c84:	ret
     c88:	stp	x29, x30, [sp, #-16]!
     c8c:	adrp	x3, 0 <lt__alloc_die_callback>
     c90:	add	x3, x3, #0x0
     c94:	mov	x29, sp
     c98:	adrp	x1, 0 <lt__alloc_die_callback>
     c9c:	adrp	x0, 0 <lt__alloc_die_callback>
     ca0:	add	x3, x3, #0xa8
     ca4:	add	x1, x1, #0x0
     ca8:	add	x0, x0, #0x0
     cac:	mov	w2, #0x639                 	// #1593
     cb0:	bl	0 <__assert_fail>
     cb4:	nop

0000000000000cb8 <lt_dladvise_local>:
     cb8:	cbz	x0, cd8 <lt_dladvise_local+0x20>
     cbc:	ldr	x1, [x0]
     cc0:	cbz	x1, cd8 <lt_dladvise_local+0x20>
     cc4:	ldrb	w2, [x1]
     cc8:	mov	w0, #0x0                   	// #0
     ccc:	orr	w2, w2, #0x8
     cd0:	strb	w2, [x1]
     cd4:	ret
     cd8:	stp	x29, x30, [sp, #-16]!
     cdc:	adrp	x3, 0 <lt__alloc_die_callback>
     ce0:	add	x3, x3, #0x0
     ce4:	mov	x29, sp
     ce8:	adrp	x1, 0 <lt__alloc_die_callback>
     cec:	adrp	x0, 0 <lt__alloc_die_callback>
     cf0:	add	x3, x3, #0xc0
     cf4:	add	x1, x1, #0x0
     cf8:	add	x0, x0, #0x0
     cfc:	mov	w2, #0x641                 	// #1601
     d00:	bl	0 <__assert_fail>
     d04:	nop

0000000000000d08 <lt_dladvise_global>:
     d08:	cbz	x0, d28 <lt_dladvise_global+0x20>
     d0c:	ldr	x1, [x0]
     d10:	cbz	x1, d28 <lt_dladvise_global+0x20>
     d14:	ldrb	w2, [x1]
     d18:	mov	w0, #0x0                   	// #0
     d1c:	orr	w2, w2, #0x4
     d20:	strb	w2, [x1]
     d24:	ret
     d28:	stp	x29, x30, [sp, #-16]!
     d2c:	adrp	x3, 0 <lt__alloc_die_callback>
     d30:	add	x3, x3, #0x0
     d34:	mov	x29, sp
     d38:	adrp	x1, 0 <lt__alloc_die_callback>
     d3c:	adrp	x0, 0 <lt__alloc_die_callback>
     d40:	add	x3, x3, #0xd8
     d44:	add	x1, x1, #0x0
     d48:	add	x0, x0, #0x0
     d4c:	mov	w2, #0x649                 	// #1609
     d50:	bl	0 <__assert_fail>
     d54:	nop

0000000000000d58 <lt_dladvise_preload>:
     d58:	cbz	x0, d78 <lt_dladvise_preload+0x20>
     d5c:	ldr	x1, [x0]
     d60:	cbz	x1, d78 <lt_dladvise_preload+0x20>
     d64:	ldrb	w2, [x1]
     d68:	mov	w0, #0x0                   	// #0
     d6c:	orr	w2, w2, #0x10
     d70:	strb	w2, [x1]
     d74:	ret
     d78:	stp	x29, x30, [sp, #-16]!
     d7c:	adrp	x3, 0 <lt__alloc_die_callback>
     d80:	add	x3, x3, #0x0
     d84:	mov	x29, sp
     d88:	adrp	x1, 0 <lt__alloc_die_callback>
     d8c:	adrp	x0, 0 <lt__alloc_die_callback>
     d90:	add	x3, x3, #0xf0
     d94:	add	x1, x1, #0x0
     d98:	add	x0, x0, #0x0
     d9c:	mov	w2, #0x651                 	// #1617
     da0:	bl	0 <__assert_fail>
     da4:	nop

0000000000000da8 <lt_dlforeachfile>:
     da8:	stp	x29, x30, [sp, #-224]!
     dac:	mov	x29, sp
     db0:	stp	x19, x20, [sp, #16]
     db4:	mov	x19, x0
     db8:	stp	x21, x22, [sp, #32]
     dbc:	mov	x21, x2
     dc0:	str	x1, [sp, #88]
     dc4:	cbz	x0, e38 <lt_dlforeachfile+0x90>
     dc8:	ldrb	w1, [x0]
     dcc:	stp	xzr, xzr, [sp, #104]
     dd0:	str	xzr, [sp, #120]
     dd4:	cbnz	w1, e1c <lt_dlforeachfile+0x74>
     dd8:	mov	w0, #0x5                   	// #5
     ddc:	bl	0 <lt__error_string>
     de0:	bl	0 <lt__set_last_error>
     de4:	mov	x19, #0x0                   	// #0
     de8:	ldr	x22, [sp, #112]
     dec:	mov	w20, #0x0                   	// #0
     df0:	mov	x0, x22
     df4:	bl	0 <free>
     df8:	ldr	x0, [sp, #120]
     dfc:	bl	0 <free>
     e00:	mov	x0, x19
     e04:	bl	0 <free>
     e08:	mov	w0, w20
     e0c:	ldp	x19, x20, [sp, #16]
     e10:	ldp	x21, x22, [sp, #32]
     e14:	ldp	x29, x30, [sp], #224
     e18:	ret
     e1c:	add	x1, sp, #0x78
     e20:	bl	18 <canonicalize_path>
     e24:	cbz	w0, f6c <lt_dlforeachfile+0x1c4>
     e28:	mov	x19, #0x0                   	// #0
     e2c:	mov	w20, #0x0                   	// #0
     e30:	ldr	x22, [sp, #112]
     e34:	b	df0 <lt_dlforeachfile+0x48>
     e38:	adrp	x0, 0 <lt__alloc_die_callback>
     e3c:	stp	x23, x24, [sp, #48]
     e40:	ldr	x0, [x0]
     e44:	stp	xzr, xzr, [sp, #128]
     e48:	str	xzr, [sp, #144]
     e4c:	cbz	x0, e58 <lt_dlforeachfile+0xb0>
     e50:	ldrb	w1, [x0]
     e54:	cbnz	w1, 1018 <lt_dlforeachfile+0x270>
     e58:	mov	w0, #0x5                   	// #5
     e5c:	bl	0 <lt__error_string>
     e60:	bl	0 <lt__set_last_error>
     e64:	mov	x22, #0x0                   	// #0
     e68:	ldr	x20, [sp, #136]
     e6c:	mov	x0, x20
     e70:	bl	0 <free>
     e74:	ldr	x0, [sp, #144]
     e78:	bl	0 <free>
     e7c:	mov	x0, x22
     e80:	bl	0 <free>
     e84:	adrp	x0, 0 <lt__alloc_die_callback>
     e88:	add	x0, x0, #0x0
     e8c:	bl	0 <getenv>
     e90:	stp	xzr, xzr, [sp, #152]
     e94:	mov	x1, x0
     e98:	str	xzr, [sp, #168]
     e9c:	cbz	x0, ea8 <lt_dlforeachfile+0x100>
     ea0:	ldrb	w1, [x1]
     ea4:	cbnz	w1, 11ec <lt_dlforeachfile+0x444>
     ea8:	mov	w0, #0x5                   	// #5
     eac:	bl	0 <lt__error_string>
     eb0:	bl	0 <lt__set_last_error>
     eb4:	mov	x22, #0x0                   	// #0
     eb8:	ldr	x20, [sp, #160]
     ebc:	mov	x0, x20
     ec0:	bl	0 <free>
     ec4:	ldr	x0, [sp, #168]
     ec8:	bl	0 <free>
     ecc:	mov	x0, x22
     ed0:	bl	0 <free>
     ed4:	adrp	x0, 0 <lt__alloc_die_callback>
     ed8:	add	x0, x0, #0x0
     edc:	bl	0 <getenv>
     ee0:	stp	xzr, xzr, [sp, #176]
     ee4:	mov	x1, x0
     ee8:	str	xzr, [sp, #192]
     eec:	cbz	x0, ef8 <lt_dlforeachfile+0x150>
     ef0:	ldrb	w1, [x1]
     ef4:	cbnz	w1, 1134 <lt_dlforeachfile+0x38c>
     ef8:	mov	w0, #0x5                   	// #5
     efc:	bl	0 <lt__error_string>
     f00:	bl	0 <lt__set_last_error>
     f04:	mov	x22, #0x0                   	// #0
     f08:	ldr	x20, [sp, #184]
     f0c:	mov	x0, x20
     f10:	bl	0 <free>
     f14:	ldr	x0, [sp, #192]
     f18:	bl	0 <free>
     f1c:	mov	x0, x22
     f20:	adrp	x22, 0 <lt__alloc_die_callback>
     f24:	bl	0 <free>
     f28:	add	x22, x22, #0x0
     f2c:	add	x1, sp, #0xd8
     f30:	add	x0, x22, #0x120
     f34:	stp	xzr, xzr, [sp, #200]
     f38:	str	xzr, [sp, #216]
     f3c:	bl	18 <canonicalize_path>
     f40:	cbz	w0, 12f4 <lt_dlforeachfile+0x54c>
     f44:	ldr	x23, [sp, #208]
     f48:	mov	w20, #0x0                   	// #0
     f4c:	mov	x0, x23
     f50:	bl	0 <free>
     f54:	ldr	x0, [sp, #216]
     f58:	bl	0 <free>
     f5c:	mov	x0, x19
     f60:	bl	0 <free>
     f64:	ldp	x23, x24, [sp, #48]
     f68:	b	e08 <lt_dlforeachfile+0x60>
     f6c:	ldr	x0, [sp, #120]
     f70:	add	x2, sp, #0x68
     f74:	add	x1, sp, #0x70
     f78:	bl	668 <argzize_path>
     f7c:	mov	w20, w0
     f80:	cbnz	w0, 1110 <lt_dlforeachfile+0x368>
     f84:	mov	x19, #0x0                   	// #0
     f88:	stp	x23, x24, [sp, #48]
     f8c:	mov	x23, #0x0                   	// #0
     f90:	stp	x25, x26, [sp, #64]
     f94:	mov	x25, #0x0                   	// #0
     f98:	ldp	x0, x22, [sp, #104]
     f9c:	cbz	x23, 10f4 <lt_dlforeachfile+0x34c>
     fa0:	add	x24, x22, x0
     fa4:	cmp	x23, x24
     fa8:	b.cs	10f8 <lt_dlforeachfile+0x350>  // b.hs, b.nlast
     fac:	mov	x0, x23
     fb0:	bl	0 <strlen>
     fb4:	add	x0, x0, #0x1
     fb8:	add	x23, x23, x0
     fbc:	cmp	x24, x23
     fc0:	b.ls	10f8 <lt_dlforeachfile+0x350>  // b.plast
     fc4:	ldrb	w0, [x23]
     fc8:	cbnz	w0, 1120 <lt_dlforeachfile+0x378>
     fcc:	mov	x0, #0x1                   	// #1
     fd0:	mov	x1, #0x0                   	// #0
     fd4:	cmp	x25, x0
     fd8:	b.ls	12c4 <lt_dlforeachfile+0x51c>  // b.plast
     fdc:	cmp	x1, x25
     fe0:	b.cs	1500 <lt_dlforeachfile+0x758>  // b.hs, b.nlast
     fe4:	mov	x1, x23
     fe8:	mov	x0, x19
     fec:	bl	0 <strcpy>
     ff0:	mov	x2, x21
     ff4:	add	x1, sp, #0x58
     ff8:	mov	x0, x19
     ffc:	bl	760 <foreachfile_callback>
    1000:	cbz	w0, f98 <lt_dlforeachfile+0x1f0>
    1004:	mov	w20, w0
    1008:	ldp	x23, x24, [sp, #48]
    100c:	ldp	x25, x26, [sp, #64]
    1010:	ldr	x22, [sp, #112]
    1014:	b	df0 <lt_dlforeachfile+0x48>
    1018:	add	x1, sp, #0x90
    101c:	bl	18 <canonicalize_path>
    1020:	cbnz	w0, 1104 <lt_dlforeachfile+0x35c>
    1024:	ldr	x0, [sp, #144]
    1028:	add	x2, sp, #0x80
    102c:	add	x1, sp, #0x88
    1030:	bl	668 <argzize_path>
    1034:	cbnz	w0, 12b0 <lt_dlforeachfile+0x508>
    1038:	mov	x23, #0x0                   	// #0
    103c:	mov	x22, #0x0                   	// #0
    1040:	stp	x25, x26, [sp, #64]
    1044:	mov	x25, #0x0                   	// #0
    1048:	ldp	x0, x20, [sp, #128]
    104c:	cbz	x23, 12e4 <lt_dlforeachfile+0x53c>
    1050:	add	x24, x20, x0
    1054:	cmp	x23, x24
    1058:	b.cs	12bc <lt_dlforeachfile+0x514>  // b.hs, b.nlast
    105c:	mov	x0, x23
    1060:	bl	0 <strlen>
    1064:	add	x0, x0, #0x1
    1068:	add	x23, x23, x0
    106c:	cmp	x24, x23
    1070:	b.ls	12bc <lt_dlforeachfile+0x514>  // b.plast
    1074:	ldrb	w0, [x23]
    1078:	cbz	w0, 13b8 <lt_dlforeachfile+0x610>
    107c:	mov	x0, x23
    1080:	bl	0 <strlen>
    1084:	mov	x1, x0
    1088:	add	x0, x0, #0x1
    108c:	cmp	x25, x0
    1090:	b.ls	13e0 <lt_dlforeachfile+0x638>  // b.plast
    1094:	cmp	x1, x25
    1098:	b.cs	1500 <lt_dlforeachfile+0x758>  // b.hs, b.nlast
    109c:	mov	x1, x23
    10a0:	mov	x0, x22
    10a4:	bl	0 <strcpy>
    10a8:	mov	x2, x21
    10ac:	add	x1, sp, #0x58
    10b0:	mov	x0, x22
    10b4:	bl	760 <foreachfile_callback>
    10b8:	mov	w20, w0
    10bc:	cbz	w0, 1048 <lt_dlforeachfile+0x2a0>
    10c0:	ldr	x0, [sp, #136]
    10c4:	bl	0 <free>
    10c8:	ldr	x0, [sp, #144]
    10cc:	bl	0 <free>
    10d0:	mov	x0, x22
    10d4:	bl	0 <free>
    10d8:	mov	w0, w20
    10dc:	ldp	x19, x20, [sp, #16]
    10e0:	ldp	x21, x22, [sp, #32]
    10e4:	ldp	x23, x24, [sp, #48]
    10e8:	ldp	x25, x26, [sp, #64]
    10ec:	ldp	x29, x30, [sp], #224
    10f0:	ret
    10f4:	cbnz	x0, 12a4 <lt_dlforeachfile+0x4fc>
    10f8:	ldp	x23, x24, [sp, #48]
    10fc:	ldp	x25, x26, [sp, #64]
    1100:	b	df0 <lt_dlforeachfile+0x48>
    1104:	mov	x22, #0x0                   	// #0
    1108:	ldr	x20, [sp, #136]
    110c:	b	e6c <lt_dlforeachfile+0xc4>
    1110:	mov	w20, #0x0                   	// #0
    1114:	mov	x19, #0x0                   	// #0
    1118:	ldr	x22, [sp, #112]
    111c:	b	df0 <lt_dlforeachfile+0x48>
    1120:	mov	x0, x23
    1124:	bl	0 <strlen>
    1128:	mov	x1, x0
    112c:	add	x0, x0, #0x1
    1130:	b	fd4 <lt_dlforeachfile+0x22c>
    1134:	add	x1, sp, #0xc0
    1138:	bl	18 <canonicalize_path>
    113c:	cbnz	w0, 13a0 <lt_dlforeachfile+0x5f8>
    1140:	ldr	x0, [sp, #192]
    1144:	add	x2, sp, #0xb0
    1148:	add	x1, sp, #0xb8
    114c:	bl	668 <argzize_path>
    1150:	cbnz	w0, 1454 <lt_dlforeachfile+0x6ac>
    1154:	mov	x23, #0x0                   	// #0
    1158:	mov	x22, #0x0                   	// #0
    115c:	stp	x25, x26, [sp, #64]
    1160:	mov	x25, #0x0                   	// #0
    1164:	ldp	x0, x20, [sp, #176]
    1168:	cbz	x23, 1428 <lt_dlforeachfile+0x680>
    116c:	add	x24, x20, x0
    1170:	cmp	x23, x24
    1174:	b.cs	13d8 <lt_dlforeachfile+0x630>  // b.hs, b.nlast
    1178:	mov	x0, x23
    117c:	bl	0 <strlen>
    1180:	add	x0, x0, #0x1
    1184:	add	x23, x23, x0
    1188:	cmp	x24, x23
    118c:	b.ls	13d8 <lt_dlforeachfile+0x630>  // b.plast
    1190:	ldrb	w0, [x23]
    1194:	cbz	w0, 146c <lt_dlforeachfile+0x6c4>
    1198:	mov	x0, x23
    119c:	bl	0 <strlen>
    11a0:	mov	x1, x0
    11a4:	add	x0, x0, #0x1
    11a8:	cmp	x25, x0
    11ac:	b.ls	14d8 <lt_dlforeachfile+0x730>  // b.plast
    11b0:	cmp	x1, x25
    11b4:	b.cs	1500 <lt_dlforeachfile+0x758>  // b.hs, b.nlast
    11b8:	mov	x1, x23
    11bc:	mov	x0, x22
    11c0:	bl	0 <strcpy>
    11c4:	mov	x2, x21
    11c8:	add	x1, sp, #0x58
    11cc:	mov	x0, x22
    11d0:	bl	760 <foreachfile_callback>
    11d4:	mov	w20, w0
    11d8:	cbz	w0, 1164 <lt_dlforeachfile+0x3bc>
    11dc:	ldr	x0, [sp, #184]
    11e0:	bl	0 <free>
    11e4:	ldr	x0, [sp, #192]
    11e8:	b	10cc <lt_dlforeachfile+0x324>
    11ec:	add	x1, sp, #0xa8
    11f0:	bl	18 <canonicalize_path>
    11f4:	cbnz	w0, 13ac <lt_dlforeachfile+0x604>
    11f8:	ldr	x0, [sp, #168]
    11fc:	add	x2, sp, #0x98
    1200:	add	x1, sp, #0xa0
    1204:	bl	668 <argzize_path>
    1208:	cbnz	w0, 1448 <lt_dlforeachfile+0x6a0>
    120c:	mov	x23, #0x0                   	// #0
    1210:	mov	x22, #0x0                   	// #0
    1214:	stp	x25, x26, [sp, #64]
    1218:	mov	x25, #0x0                   	// #0
    121c:	ldp	x0, x20, [sp, #152]
    1220:	cbz	x23, 1418 <lt_dlforeachfile+0x670>
    1224:	add	x24, x20, x0
    1228:	cmp	x23, x24
    122c:	b.cs	13d0 <lt_dlforeachfile+0x628>  // b.hs, b.nlast
    1230:	mov	x0, x23
    1234:	bl	0 <strlen>
    1238:	add	x0, x0, #0x1
    123c:	add	x23, x23, x0
    1240:	cmp	x24, x23
    1244:	b.ls	13d0 <lt_dlforeachfile+0x628>  // b.plast
    1248:	ldrb	w0, [x23]
    124c:	cbz	w0, 1478 <lt_dlforeachfile+0x6d0>
    1250:	mov	x0, x23
    1254:	bl	0 <strlen>
    1258:	mov	x1, x0
    125c:	add	x0, x0, #0x1
    1260:	cmp	x25, x0
    1264:	b.ls	14b0 <lt_dlforeachfile+0x708>  // b.plast
    1268:	cmp	x1, x25
    126c:	b.cs	1500 <lt_dlforeachfile+0x758>  // b.hs, b.nlast
    1270:	mov	x1, x23
    1274:	mov	x0, x22
    1278:	bl	0 <strcpy>
    127c:	mov	x2, x21
    1280:	add	x1, sp, #0x58
    1284:	mov	x0, x22
    1288:	bl	760 <foreachfile_callback>
    128c:	mov	w20, w0
    1290:	cbz	w0, 121c <lt_dlforeachfile+0x474>
    1294:	ldr	x0, [sp, #160]
    1298:	bl	0 <free>
    129c:	ldr	x0, [sp, #168]
    12a0:	b	10cc <lt_dlforeachfile+0x324>
    12a4:	cbz	x22, 10f8 <lt_dlforeachfile+0x350>
    12a8:	mov	x23, x22
    12ac:	b	fc4 <lt_dlforeachfile+0x21c>
    12b0:	mov	x22, #0x0                   	// #0
    12b4:	ldr	x20, [sp, #136]
    12b8:	b	e6c <lt_dlforeachfile+0xc4>
    12bc:	ldp	x25, x26, [sp, #64]
    12c0:	b	e6c <lt_dlforeachfile+0xc4>
    12c4:	mov	x0, x19
    12c8:	add	x25, x1, #0x2
    12cc:	bl	0 <free>
    12d0:	mov	x0, x25
    12d4:	bl	0 <lt__malloc>
    12d8:	mov	x19, x0
    12dc:	cbnz	x0, fe4 <lt_dlforeachfile+0x23c>
    12e0:	b	1008 <lt_dlforeachfile+0x260>
    12e4:	cbz	x0, 12bc <lt_dlforeachfile+0x514>
    12e8:	cbz	x20, 12bc <lt_dlforeachfile+0x514>
    12ec:	mov	x23, x20
    12f0:	b	1074 <lt_dlforeachfile+0x2cc>
    12f4:	ldr	x0, [sp, #216]
    12f8:	add	x2, sp, #0xc8
    12fc:	add	x1, sp, #0xd0
    1300:	stp	x25, x26, [sp, #64]
    1304:	mov	x25, #0x0                   	// #0
    1308:	bl	668 <argzize_path>
    130c:	mov	x26, #0x0                   	// #0
    1310:	mov	w20, w0
    1314:	cbnz	w0, 1438 <lt_dlforeachfile+0x690>
    1318:	ldp	x1, x23, [sp, #200]
    131c:	cbz	x19, 1408 <lt_dlforeachfile+0x660>
    1320:	add	x24, x23, x1
    1324:	cmp	x19, x24
    1328:	b.cs	13c4 <lt_dlforeachfile+0x61c>  // b.hs, b.nlast
    132c:	mov	x0, x19
    1330:	bl	0 <strlen>
    1334:	add	x0, x0, #0x1
    1338:	add	x19, x19, x0
    133c:	cmp	x24, x19
    1340:	b.ls	13c4 <lt_dlforeachfile+0x61c>  // b.plast
    1344:	ldrb	w0, [x19]
    1348:	cbz	w0, 1460 <lt_dlforeachfile+0x6b8>
    134c:	mov	x0, x19
    1350:	bl	0 <strlen>
    1354:	mov	x1, x0
    1358:	add	x0, x0, #0x1
    135c:	cmp	x26, x0
    1360:	b.ls	1484 <lt_dlforeachfile+0x6dc>  // b.plast
    1364:	cmp	x1, x26
    1368:	b.cs	1508 <lt_dlforeachfile+0x760>  // b.hs, b.nlast
    136c:	mov	x1, x19
    1370:	mov	x0, x25
    1374:	bl	0 <strcpy>
    1378:	mov	x2, x21
    137c:	add	x1, sp, #0x58
    1380:	mov	x0, x25
    1384:	bl	760 <foreachfile_callback>
    1388:	cbz	w0, 1318 <lt_dlforeachfile+0x570>
    138c:	mov	x19, x25
    1390:	mov	w20, w0
    1394:	ldp	x25, x26, [sp, #64]
    1398:	ldr	x23, [sp, #208]
    139c:	b	f4c <lt_dlforeachfile+0x1a4>
    13a0:	mov	x22, #0x0                   	// #0
    13a4:	ldr	x20, [sp, #184]
    13a8:	b	f0c <lt_dlforeachfile+0x164>
    13ac:	mov	x22, #0x0                   	// #0
    13b0:	ldr	x20, [sp, #160]
    13b4:	b	ebc <lt_dlforeachfile+0x114>
    13b8:	mov	x0, #0x1                   	// #1
    13bc:	mov	x1, #0x0                   	// #0
    13c0:	b	108c <lt_dlforeachfile+0x2e4>
    13c4:	mov	x19, x25
    13c8:	ldp	x25, x26, [sp, #64]
    13cc:	b	f4c <lt_dlforeachfile+0x1a4>
    13d0:	ldp	x25, x26, [sp, #64]
    13d4:	b	ebc <lt_dlforeachfile+0x114>
    13d8:	ldp	x25, x26, [sp, #64]
    13dc:	b	f0c <lt_dlforeachfile+0x164>
    13e0:	mov	x0, x22
    13e4:	add	x25, x1, #0x2
    13e8:	bl	0 <free>
    13ec:	mov	x0, x25
    13f0:	bl	0 <lt__malloc>
    13f4:	mov	x22, x0
    13f8:	cbnz	x0, 109c <lt_dlforeachfile+0x2f4>
    13fc:	ldp	x25, x26, [sp, #64]
    1400:	ldr	x20, [sp, #136]
    1404:	b	e6c <lt_dlforeachfile+0xc4>
    1408:	cbz	x1, 13c4 <lt_dlforeachfile+0x61c>
    140c:	cbz	x23, 13c4 <lt_dlforeachfile+0x61c>
    1410:	mov	x19, x23
    1414:	b	1344 <lt_dlforeachfile+0x59c>
    1418:	cbz	x0, 13d0 <lt_dlforeachfile+0x628>
    141c:	cbz	x20, 13d0 <lt_dlforeachfile+0x628>
    1420:	mov	x23, x20
    1424:	b	1248 <lt_dlforeachfile+0x4a0>
    1428:	cbz	x0, 13d8 <lt_dlforeachfile+0x630>
    142c:	cbz	x20, 13d8 <lt_dlforeachfile+0x630>
    1430:	mov	x23, x20
    1434:	b	1190 <lt_dlforeachfile+0x3e8>
    1438:	mov	w20, #0x0                   	// #0
    143c:	ldp	x25, x26, [sp, #64]
    1440:	ldr	x23, [sp, #208]
    1444:	b	f4c <lt_dlforeachfile+0x1a4>
    1448:	mov	x22, #0x0                   	// #0
    144c:	ldr	x20, [sp, #160]
    1450:	b	ebc <lt_dlforeachfile+0x114>
    1454:	mov	x22, #0x0                   	// #0
    1458:	ldr	x20, [sp, #184]
    145c:	b	f0c <lt_dlforeachfile+0x164>
    1460:	mov	x0, #0x1                   	// #1
    1464:	mov	x1, #0x0                   	// #0
    1468:	b	135c <lt_dlforeachfile+0x5b4>
    146c:	mov	x0, #0x1                   	// #1
    1470:	mov	x1, #0x0                   	// #0
    1474:	b	11a8 <lt_dlforeachfile+0x400>
    1478:	mov	x0, #0x1                   	// #1
    147c:	mov	x1, #0x0                   	// #0
    1480:	b	1260 <lt_dlforeachfile+0x4b8>
    1484:	mov	x0, x25
    1488:	add	x26, x1, #0x2
    148c:	bl	0 <free>
    1490:	mov	x0, x26
    1494:	bl	0 <lt__malloc>
    1498:	mov	x25, x0
    149c:	cbnz	x0, 136c <lt_dlforeachfile+0x5c4>
    14a0:	mov	x19, #0x0                   	// #0
    14a4:	ldp	x25, x26, [sp, #64]
    14a8:	ldr	x23, [sp, #208]
    14ac:	b	f4c <lt_dlforeachfile+0x1a4>
    14b0:	mov	x0, x22
    14b4:	add	x25, x1, #0x2
    14b8:	bl	0 <free>
    14bc:	mov	x0, x25
    14c0:	bl	0 <lt__malloc>
    14c4:	mov	x22, x0
    14c8:	cbnz	x0, 1270 <lt_dlforeachfile+0x4c8>
    14cc:	ldp	x25, x26, [sp, #64]
    14d0:	ldr	x20, [sp, #160]
    14d4:	b	ebc <lt_dlforeachfile+0x114>
    14d8:	mov	x0, x22
    14dc:	add	x25, x1, #0x2
    14e0:	bl	0 <free>
    14e4:	mov	x0, x25
    14e8:	bl	0 <lt__malloc>
    14ec:	mov	x22, x0
    14f0:	cbnz	x0, 11b8 <lt_dlforeachfile+0x410>
    14f4:	ldp	x25, x26, [sp, #64]
    14f8:	ldr	x20, [sp, #184]
    14fc:	b	f0c <lt_dlforeachfile+0x164>
    1500:	adrp	x22, 0 <lt__alloc_die_callback>
    1504:	add	x22, x22, #0x0
    1508:	adrp	x1, 0 <lt__alloc_die_callback>
    150c:	adrp	x0, 0 <lt__alloc_die_callback>
    1510:	add	x3, x22, #0x108
    1514:	add	x1, x1, #0x0
    1518:	add	x0, x0, #0x0
    151c:	mov	w2, #0x2cd                 	// #717
    1520:	bl	0 <__assert_fail>
    1524:	nop

0000000000001528 <lt_dlclose>:
    1528:	stp	x29, x30, [sp, #-48]!
    152c:	adrp	x4, 0 <lt__alloc_die_callback>
    1530:	mov	x29, sp
    1534:	ldr	x3, [x4]
    1538:	stp	x19, x20, [sp, #16]
    153c:	mov	x19, x0
    1540:	cmp	x3, #0x0
    1544:	ccmp	x3, x0, #0x4, ne  // ne = any
    1548:	b.eq	1680 <lt_dlclose+0x158>  // b.none
    154c:	mov	x1, x3
    1550:	mov	x2, x1
    1554:	ldr	x1, [x1]
    1558:	cmp	x1, #0x0
    155c:	ccmp	x19, x1, #0x4, ne  // ne = any
    1560:	b.ne	1550 <lt_dlclose+0x28>  // b.any
    1564:	cbz	x1, 168c <lt_dlclose+0x164>
    1568:	ldr	w0, [x19, #32]
    156c:	ldrb	w1, [x19, #36]
    1570:	sub	w0, w0, #0x1
    1574:	str	w0, [x19, #32]
    1578:	and	w1, w1, #0x1
    157c:	cmp	w0, #0x0
    1580:	b.le	159c <lt_dlclose+0x74>
    1584:	mov	w20, #0x0                   	// #0
    1588:	cbnz	w1, 15a0 <lt_dlclose+0x78>
    158c:	mov	w0, w20
    1590:	ldp	x19, x20, [sp, #16]
    1594:	ldp	x29, x30, [sp], #48
    1598:	ret
    159c:	cbz	w1, 15c0 <lt_dlclose+0x98>
    15a0:	mov	w20, #0x1                   	// #1
    15a4:	mov	w0, #0x10                  	// #16
    15a8:	bl	0 <lt__error_string>
    15ac:	bl	0 <lt__set_last_error>
    15b0:	mov	w0, w20
    15b4:	ldp	x19, x20, [sp, #16]
    15b8:	ldp	x29, x30, [sp], #48
    15bc:	ret
    15c0:	cmp	x3, x19
    15c4:	ldp	x3, x1, [x19]
    15c8:	ldr	x0, [x1, #56]
    15cc:	b.eq	16a0 <lt_dlclose+0x178>  // b.none
    15d0:	str	x3, [x2]
    15d4:	ldr	x2, [x1, #24]
    15d8:	ldr	x1, [x19, #56]
    15dc:	blr	x2
    15e0:	mov	w20, w0
    15e4:	ldr	w1, [x19, #40]
    15e8:	cmp	w1, #0x0
    15ec:	cbz	w1, 1630 <lt_dlclose+0x108>
    15f0:	ldr	x3, [x19, #48]
    15f4:	b.le	1628 <lt_dlclose+0x100>
    15f8:	stp	x21, x22, [sp, #32]
    15fc:	mov	x21, #0x0                   	// #0
    1600:	mov	w22, #0x0                   	// #0
    1604:	nop
    1608:	ldr	x0, [x3, x21, lsl #3]
    160c:	ldrb	w2, [x0, #36]
    1610:	tbz	w2, #0, 1660 <lt_dlclose+0x138>
    1614:	add	x21, x21, #0x1
    1618:	cmp	w1, w21
    161c:	b.gt	1608 <lt_dlclose+0xe0>
    1620:	add	w20, w20, w22
    1624:	ldp	x21, x22, [sp, #32]
    1628:	mov	x0, x3
    162c:	bl	0 <free>
    1630:	ldr	x0, [x19, #72]
    1634:	bl	0 <free>
    1638:	ldr	x0, [x19, #16]
    163c:	bl	0 <free>
    1640:	ldr	x0, [x19, #24]
    1644:	bl	0 <free>
    1648:	mov	x0, x19
    164c:	bl	0 <free>
    1650:	mov	w0, w20
    1654:	ldp	x19, x20, [sp, #16]
    1658:	ldp	x29, x30, [sp], #48
    165c:	ret
    1660:	bl	1528 <lt_dlclose>
    1664:	add	x21, x21, #0x1
    1668:	ldr	w1, [x19, #40]
    166c:	add	w22, w22, w0
    1670:	ldr	x3, [x19, #48]
    1674:	cmp	w1, w21
    1678:	b.gt	1608 <lt_dlclose+0xe0>
    167c:	b	1620 <lt_dlclose+0xf8>
    1680:	mov	x2, x3
    1684:	mov	x1, x3
    1688:	b	1564 <lt_dlclose+0x3c>
    168c:	mov	w20, #0x1                   	// #1
    1690:	mov	w0, #0xc                   	// #12
    1694:	bl	0 <lt__error_string>
    1698:	bl	0 <lt__set_last_error>
    169c:	b	158c <lt_dlclose+0x64>
    16a0:	str	x3, [x4]
    16a4:	b	15d4 <lt_dlclose+0xac>

00000000000016a8 <lt_dlexit>:
    16a8:	stp	x29, x30, [sp, #-48]!
    16ac:	adrp	x3, 0 <lt__alloc_die_callback>
    16b0:	mov	x29, sp
    16b4:	stp	x21, x22, [sp, #32]
    16b8:	add	x22, x3, #0x0
    16bc:	ldr	w0, [x22, #8]
    16c0:	cbz	w0, 1740 <lt_dlexit+0x98>
    16c4:	sub	w0, w0, #0x1
    16c8:	str	w0, [x22, #8]
    16cc:	ldr	x4, [x3]
    16d0:	mov	w21, #0x0                   	// #0
    16d4:	cbnz	w0, 1750 <lt_dlexit+0xa8>
    16d8:	stp	x19, x20, [sp, #16]
    16dc:	mov	x0, x4
    16e0:	mov	w2, #0x0                   	// #0
    16e4:	cbnz	x4, 16f8 <lt_dlexit+0x50>
    16e8:	b	1840 <lt_dlexit+0x198>
    16ec:	ldr	x0, [x0]
    16f0:	mov	w2, #0x1                   	// #1
    16f4:	cbz	x0, 183c <lt_dlexit+0x194>
    16f8:	ldrb	w1, [x0, #36]
    16fc:	tbnz	w1, #0, 16ec <lt_dlexit+0x44>
    1700:	cbz	w2, 1850 <lt_dlexit+0x1a8>
    1704:	str	x0, [x3]
    1708:	mov	w21, #0x0                   	// #0
    170c:	mov	w20, #0x1                   	// #1
    1710:	mov	w2, #0x0                   	// #0
    1714:	nop
    1718:	ldrb	w1, [x0, #36]
    171c:	ldr	x19, [x0]
    1720:	tbnz	w1, #0, 1734 <lt_dlexit+0x8c>
    1724:	ldr	w1, [x0, #32]
    1728:	mov	w2, #0x1                   	// #1
    172c:	cmp	w1, w20
    1730:	b.le	1760 <lt_dlexit+0xb8>
    1734:	cbz	x19, 17dc <lt_dlexit+0x134>
    1738:	mov	x0, x19
    173c:	b	1718 <lt_dlexit+0x70>
    1740:	mov	w0, #0xf                   	// #15
    1744:	mov	w21, #0x1                   	// #1
    1748:	bl	0 <lt__error_string>
    174c:	bl	0 <lt__set_last_error>
    1750:	mov	w0, w21
    1754:	ldp	x21, x22, [sp, #32]
    1758:	ldp	x29, x30, [sp], #48
    175c:	ret
    1760:	bl	1528 <lt_dlclose>
    1764:	cmp	w0, #0x0
    1768:	cinc	w21, w21, ne  // ne = any
    176c:	cbnz	x19, 17e4 <lt_dlexit+0x13c>
    1770:	ldr	x0, [x22]
    1774:	add	w20, w20, #0x1
    1778:	cbnz	x0, 1710 <lt_dlexit+0x68>
    177c:	cbz	w21, 1840 <lt_dlexit+0x198>
    1780:	mov	x0, #0x0                   	// #0
    1784:	bl	0 <lt_dlloader_next>
    1788:	mov	x19, x0
    178c:	cbz	x19, 17bc <lt_dlexit+0x114>
    1790:	mov	x0, x19
    1794:	mov	x20, x19
    1798:	bl	0 <lt_dlloader_next>
    179c:	mov	x19, x0
    17a0:	mov	x0, x20
    17a4:	bl	0 <lt_dlloader_get>
    17a8:	ldr	x0, [x0]
    17ac:	bl	0 <lt_dlloader_remove>
    17b0:	cbz	x0, 181c <lt_dlexit+0x174>
    17b4:	bl	0 <free>
    17b8:	cbnz	x19, 1790 <lt_dlexit+0xe8>
    17bc:	ldr	x0, [x22, #16]
    17c0:	bl	0 <free>
    17c4:	str	xzr, [x22, #16]
    17c8:	mov	w0, w21
    17cc:	ldp	x19, x20, [sp, #16]
    17d0:	ldp	x21, x22, [sp, #32]
    17d4:	ldp	x29, x30, [sp], #48
    17d8:	ret
    17dc:	cbnz	w2, 1770 <lt_dlexit+0xc8>
    17e0:	b	177c <lt_dlexit+0xd4>
    17e4:	ldr	x1, [x22]
    17e8:	cbz	x1, 1770 <lt_dlexit+0xc8>
    17ec:	cmp	x19, x1
    17f0:	b.eq	180c <lt_dlexit+0x164>  // b.none
    17f4:	mov	x0, x1
    17f8:	b	1800 <lt_dlexit+0x158>
    17fc:	b.eq	182c <lt_dlexit+0x184>  // b.none
    1800:	ldr	x0, [x0]
    1804:	cmp	x19, x0
    1808:	cbnz	x0, 17fc <lt_dlexit+0x154>
    180c:	mov	x19, x1
    1810:	mov	w2, #0x1                   	// #1
    1814:	mov	x0, x19
    1818:	b	1718 <lt_dlexit+0x70>
    181c:	bl	0 <lt__get_last_error>
    1820:	cmp	x0, #0x0
    1824:	cinc	w21, w21, ne  // ne = any
    1828:	b	178c <lt_dlexit+0xe4>
    182c:	mov	x1, x19
    1830:	mov	w2, #0x1                   	// #1
    1834:	mov	x19, x1
    1838:	b	1814 <lt_dlexit+0x16c>
    183c:	str	xzr, [x3]
    1840:	mov	w21, #0x0                   	// #0
    1844:	mov	x0, #0x0                   	// #0
    1848:	bl	0 <lt__set_last_error>
    184c:	b	1780 <lt_dlexit+0xd8>
    1850:	mov	x0, x4
    1854:	b	1708 <lt_dlexit+0x60>

0000000000001858 <try_dlopen>:
    1858:	stp	x29, x30, [sp, #-448]!
    185c:	mov	x29, sp
    1860:	stp	x21, x22, [sp, #32]
    1864:	mov	x22, x0
    1868:	ldr	x0, [x0]
    186c:	stp	x19, x20, [sp, #16]
    1870:	stp	x23, x24, [sp, #48]
    1874:	str	x3, [sp, #104]
    1878:	stp	xzr, xzr, [sp, #168]
    187c:	cbnz	x0, 2f8c <try_dlopen+0x1734>
    1880:	mov	x19, x1
    1884:	mov	x21, x2
    1888:	stp	x27, x28, [sp, #80]
    188c:	bl	0 <lt__get_last_error>
    1890:	str	x0, [sp, #112]
    1894:	cbz	x19, 1cb4 <try_dlopen+0x45c>
    1898:	ldrb	w0, [x19]
    189c:	cbz	w0, 302c <try_dlopen+0x17d4>
    18a0:	mov	x0, x19
    18a4:	cbz	x21, 1bec <try_dlopen+0x394>
    18a8:	bl	0 <strlen>
    18ac:	mov	x20, x0
    18b0:	ldrb	w1, [x21]
    18b4:	mov	x0, #0x0                   	// #0
    18b8:	cbz	w1, 18c4 <try_dlopen+0x6c>
    18bc:	mov	x0, x21
    18c0:	bl	0 <strlen>
    18c4:	add	x20, x20, #0x1
    18c8:	add	x0, x20, x0
    18cc:	bl	0 <lt__malloc>
    18d0:	mov	x23, x0
    18d4:	cbz	x0, 1bf8 <try_dlopen+0x3a0>
    18d8:	adrp	x1, 0 <lt__alloc_die_callback>
    18dc:	mov	x3, x21
    18e0:	mov	x2, x19
    18e4:	add	x1, x1, #0x0
    18e8:	bl	0 <sprintf>
    18ec:	add	x1, sp, #0xa8
    18f0:	mov	x0, x23
    18f4:	bl	18 <canonicalize_path>
    18f8:	mov	w24, w0
    18fc:	cbnz	w0, 1c6c <try_dlopen+0x414>
    1900:	ldr	x21, [sp, #168]
    1904:	mov	w1, #0x2f                  	// #47
    1908:	mov	x0, x21
    190c:	bl	0 <strrchr>
    1910:	mov	x19, x0
    1914:	cbz	x0, 1cac <try_dlopen+0x454>
    1918:	add	x28, x0, #0x1
    191c:	sub	x20, x28, x21
    1920:	add	x0, x20, #0x1
    1924:	bl	0 <lt__malloc>
    1928:	str	x0, [sp, #176]
    192c:	mov	x27, x0
    1930:	cbz	x0, 1c18 <try_dlopen+0x3c0>
    1934:	ldr	x1, [sp, #168]
    1938:	mov	x2, x20
    193c:	mov	x21, x28
    1940:	bl	0 <lt_strlcpy>
    1944:	ldr	x0, [sp, #176]
    1948:	strb	wzr, [x0, x20]
    194c:	ldrb	w0, [x21]
    1950:	cbz	w0, 3004 <try_dlopen+0x17ac>
    1954:	mov	x0, x21
    1958:	mov	w1, #0x2e                  	// #46
    195c:	bl	0 <strrchr>
    1960:	mov	x20, x0
    1964:	cbz	x0, 1dc8 <try_dlopen+0x570>
    1968:	sub	x27, x20, x21
    196c:	add	x0, x27, #0x1
    1970:	bl	0 <lt__malloc>
    1974:	mov	x19, x0
    1978:	cbz	x0, 1dd8 <try_dlopen+0x580>
    197c:	cmp	x27, #0x0
    1980:	b.le	19b8 <try_dlopen+0x160>
    1984:	bl	0 <__ctype_b_loc>
    1988:	mov	x1, #0x0                   	// #0
    198c:	mov	w5, #0x5f                  	// #95
    1990:	ldrb	w2, [x21, x1]
    1994:	ldr	x4, [x0]
    1998:	ubfiz	x3, x2, #1, #8
    199c:	ldrh	w3, [x4, x3]
    19a0:	tst	x3, #0x8
    19a4:	csel	w2, w2, w5, ne  // ne = any
    19a8:	strb	w2, [x19, x1]
    19ac:	add	x1, x1, #0x1
    19b0:	cmp	x1, x27
    19b4:	b.ne	1990 <try_dlopen+0x138>  // b.any
    19b8:	strb	wzr, [x19, x27]
    19bc:	ldr	x0, [sp, #176]
    19c0:	cbz	x0, 1de8 <try_dlopen+0x590>
    19c4:	mov	x27, #0x0                   	// #0
    19c8:	ldr	x0, [sp, #104]
    19cc:	cbz	x0, 19d8 <try_dlopen+0x180>
    19d0:	ldrb	w0, [x0]
    19d4:	tbnz	w0, #4, 1dc0 <try_dlopen+0x568>
    19d8:	adrp	x28, 0 <lt__alloc_die_callback>
    19dc:	add	x0, x28, #0x0
    19e0:	mov	x1, x0
    19e4:	mov	x0, x20
    19e8:	str	x1, [sp, #128]
    19ec:	add	x1, x1, #0x168
    19f0:	bl	0 <strcmp>
    19f4:	cbnz	w0, 1d74 <try_dlopen+0x51c>
    19f8:	ldr	x20, [sp, #176]
    19fc:	stp	x25, x26, [sp, #64]
    1a00:	stp	xzr, xzr, [sp, #192]
    1a04:	stp	xzr, xzr, [sp, #208]
    1a08:	cbz	x20, 2014 <try_dlopen+0x7bc>
    1a0c:	mov	x0, x23
    1a10:	adrp	x1, 0 <lt__alloc_die_callback>
    1a14:	add	x1, x1, #0x0
    1a18:	bl	0 <fopen>
    1a1c:	mov	x24, x0
    1a20:	cbz	x24, 2680 <try_dlopen+0xe28>
    1a24:	mov	x0, #0x800                 	// #2048
    1a28:	bl	0 <lt__malloc>
    1a2c:	mov	w1, #0x1                   	// #1
    1a30:	str	w1, [sp, #144]
    1a34:	mov	x28, x0
    1a38:	mov	x20, #0x800                 	// #2048
    1a3c:	cbz	x0, 292c <try_dlopen+0x10d4>
    1a40:	adrp	x1, 0 <lt__alloc_die_callback>
    1a44:	adrp	x0, 0 <lt__alloc_die_callback>
    1a48:	add	x1, x1, #0x0
    1a4c:	add	x0, x0, #0x0
    1a50:	str	x1, [sp, #136]
    1a54:	str	x0, [sp, #152]
    1a58:	mov	x0, x24
    1a5c:	bl	0 <feof>
    1a60:	cbnz	w0, 26e8 <try_dlopen+0xe90>
    1a64:	add	x4, x28, x20
    1a68:	mov	x2, x24
    1a6c:	mov	w1, w20
    1a70:	mov	x0, x28
    1a74:	str	x4, [sp, #120]
    1a78:	sturb	wzr, [x4, #-2]
    1a7c:	bl	0 <fgets>
    1a80:	ldr	x4, [sp, #120]
    1a84:	cbnz	x0, 1ad8 <try_dlopen+0x280>
    1a88:	b	26e8 <try_dlopen+0xe90>
    1a8c:	mov	x0, x24
    1a90:	bl	0 <feof>
    1a94:	cbnz	w0, 1ae8 <try_dlopen+0x290>
    1a98:	lsl	x25, x20, #1
    1a9c:	mov	x0, x28
    1aa0:	mov	x1, x25
    1aa4:	bl	0 <lt__realloc>
    1aa8:	mov	x28, x0
    1aac:	cbz	x0, 2440 <try_dlopen+0xbe8>
    1ab0:	add	x26, x0, x25
    1ab4:	sub	x0, x20, #0x1
    1ab8:	add	x0, x28, x0
    1abc:	mov	x2, x24
    1ac0:	add	w1, w20, #0x1
    1ac4:	sturb	wzr, [x26, #-2]
    1ac8:	bl	0 <fgets>
    1acc:	cbz	x0, 1ae8 <try_dlopen+0x290>
    1ad0:	mov	x20, x25
    1ad4:	mov	x4, x26
    1ad8:	ldurb	w0, [x4, #-2]
    1adc:	cmp	w0, #0x0
    1ae0:	ccmp	w0, #0xa, #0x4, ne  // ne = any
    1ae4:	b.ne	1a8c <try_dlopen+0x234>  // b.any
    1ae8:	ldrb	w0, [x28]
    1aec:	cmp	w0, #0x23
    1af0:	ccmp	w0, #0xa, #0x4, ne  // ne = any
    1af4:	b.eq	1a58 <try_dlopen+0x200>  // b.none
    1af8:	ldr	x1, [sp, #136]
    1afc:	mov	x0, x28
    1b00:	mov	x2, #0x7                   	// #7
    1b04:	bl	0 <strncmp>
    1b08:	cbz	w0, 242c <try_dlopen+0xbd4>
    1b0c:	ldr	x1, [sp, #152]
    1b10:	mov	x0, x28
    1b14:	mov	x2, #0xc                   	// #12
    1b18:	bl	0 <strncmp>
    1b1c:	cbz	w0, 24ac <try_dlopen+0xc54>
    1b20:	adrp	x1, 0 <lt__alloc_die_callback>
    1b24:	mov	x0, x28
    1b28:	add	x1, x1, #0x0
    1b2c:	mov	x2, #0x7                   	// #7
    1b30:	bl	0 <strncmp>
    1b34:	cbz	w0, 2658 <try_dlopen+0xe00>
    1b38:	adrp	x1, 0 <lt__alloc_die_callback>
    1b3c:	mov	x0, x28
    1b40:	add	x1, x1, #0x0
    1b44:	mov	x2, #0x10                  	// #16
    1b48:	bl	0 <strncmp>
    1b4c:	cbz	w0, 26cc <try_dlopen+0xe74>
    1b50:	adrp	x1, 0 <lt__alloc_die_callback>
    1b54:	mov	x0, x28
    1b58:	add	x1, x1, #0x0
    1b5c:	bl	0 <strcmp>
    1b60:	cbz	w0, 26dc <try_dlopen+0xe84>
    1b64:	adrp	x1, 0 <lt__alloc_die_callback>
    1b68:	mov	x0, x28
    1b6c:	add	x1, x1, #0x0
    1b70:	bl	0 <strcmp>
    1b74:	cbz	w0, 2c14 <try_dlopen+0x13bc>
    1b78:	ldr	x0, [sp, #192]
    1b7c:	cbnz	x0, 1a58 <try_dlopen+0x200>
    1b80:	adrp	x1, 0 <lt__alloc_die_callback>
    1b84:	mov	x0, x28
    1b88:	add	x1, x1, #0x0
    1b8c:	mov	x2, #0xe                   	// #14
    1b90:	bl	0 <strncmp>
    1b94:	cbnz	w0, 1a58 <try_dlopen+0x200>
    1b98:	add	x1, x28, #0xe
    1b9c:	add	x0, sp, #0xc0
    1ba0:	bl	468 <trim>
    1ba4:	cbnz	w0, 2440 <try_dlopen+0xbe8>
    1ba8:	ldr	x0, [sp, #192]
    1bac:	cbz	x0, 1a58 <try_dlopen+0x200>
    1bb0:	mov	w1, #0x20                  	// #32
    1bb4:	bl	0 <strrchr>
    1bb8:	cbz	x0, 1a58 <try_dlopen+0x200>
    1bbc:	add	x0, x0, #0x1
    1bc0:	bl	0 <lt__strdup>
    1bc4:	mov	x1, x0
    1bc8:	cbz	x0, 2440 <try_dlopen+0xbe8>
    1bcc:	ldr	x0, [sp, #192]
    1bd0:	str	x1, [sp, #120]
    1bd4:	cmp	x1, x0
    1bd8:	b.eq	1a58 <try_dlopen+0x200>  // b.none
    1bdc:	bl	0 <free>
    1be0:	ldr	x1, [sp, #120]
    1be4:	str	x1, [sp, #192]
    1be8:	b	1a58 <try_dlopen+0x200>
    1bec:	bl	0 <lt__strdup>
    1bf0:	mov	x23, x0
    1bf4:	cbnz	x0, 18ec <try_dlopen+0x94>
    1bf8:	mov	w24, #0x1                   	// #1
    1bfc:	mov	w0, w24
    1c00:	ldp	x19, x20, [sp, #16]
    1c04:	ldp	x21, x22, [sp, #32]
    1c08:	ldp	x23, x24, [sp, #48]
    1c0c:	ldp	x27, x28, [sp, #80]
    1c10:	ldp	x29, x30, [sp], #448
    1c14:	ret
    1c18:	mov	x21, x19
    1c1c:	mov	x0, #0x0                   	// #0
    1c20:	mov	x19, #0x0                   	// #0
    1c24:	mov	w24, #0x1                   	// #1
    1c28:	bl	0 <free>
    1c2c:	mov	x0, x23
    1c30:	bl	0 <free>
    1c34:	mov	x0, x19
    1c38:	bl	0 <free>
    1c3c:	ldr	x0, [sp, #168]
    1c40:	cbz	x0, 1c9c <try_dlopen+0x444>
    1c44:	bl	0 <free>
    1c48:	mov	x0, x27
    1c4c:	bl	0 <free>
    1c50:	mov	w0, w24
    1c54:	ldp	x19, x20, [sp, #16]
    1c58:	ldp	x21, x22, [sp, #32]
    1c5c:	ldp	x23, x24, [sp, #48]
    1c60:	ldp	x27, x28, [sp, #80]
    1c64:	ldp	x29, x30, [sp], #448
    1c68:	ret
    1c6c:	ldr	x0, [sp, #176]
    1c70:	mov	x19, #0x0                   	// #0
    1c74:	mov	x21, #0x0                   	// #0
    1c78:	mov	x27, #0x0                   	// #0
    1c7c:	mov	w24, #0x1                   	// #1
    1c80:	bl	0 <free>
    1c84:	mov	x0, x23
    1c88:	bl	0 <free>
    1c8c:	mov	x0, x19
    1c90:	bl	0 <free>
    1c94:	ldr	x0, [sp, #168]
    1c98:	cbnz	x0, 1c44 <try_dlopen+0x3ec>
    1c9c:	mov	x0, x21
    1ca0:	bl	0 <free>
    1ca4:	ldr	x0, [sp, #168]
    1ca8:	b	1c44 <try_dlopen+0x3ec>
    1cac:	str	xzr, [sp, #168]
    1cb0:	b	194c <try_dlopen+0xf4>
    1cb4:	mov	x0, #0x58                  	// #88
    1cb8:	bl	0 <lt__zalloc>
    1cbc:	str	x0, [x22]
    1cc0:	mov	x4, x0
    1cc4:	cbz	x0, 1bf8 <try_dlopen+0x3a0>
    1cc8:	ldrb	w0, [x0, #36]
    1ccc:	mov	x3, #0x0                   	// #0
    1cd0:	ldr	x2, [sp, #104]
    1cd4:	orr	w0, w0, #0x1
    1cd8:	strb	w0, [x4, #36]
    1cdc:	mov	x1, #0x0                   	// #0
    1ce0:	add	x0, sp, #0xb8
    1ce4:	str	x4, [sp, #184]
    1ce8:	bl	120 <tryall_dlopen>
    1cec:	cbnz	w0, 2418 <try_dlopen+0xbc0>
    1cf0:	ldr	x20, [x22]
    1cf4:	mov	x23, #0x0                   	// #0
    1cf8:	ldr	x1, [sp, #184]
    1cfc:	mov	x21, #0x0                   	// #0
    1d00:	mov	x27, #0x0                   	// #0
    1d04:	cmp	x20, x1
    1d08:	b.eq	1d20 <try_dlopen+0x4c8>  // b.none
    1d0c:	mov	x0, x20
    1d10:	bl	0 <free>
    1d14:	ldr	x1, [sp, #184]
    1d18:	str	x1, [x22]
    1d1c:	str	xzr, [sp, #184]
    1d20:	ldr	w0, [x1, #32]
    1d24:	cbnz	w0, 1d60 <try_dlopen+0x508>
    1d28:	ldr	x0, [x1, #24]
    1d2c:	mov	w2, #0x1                   	// #1
    1d30:	str	w2, [x1, #32]
    1d34:	cmp	x0, x19
    1d38:	b.eq	1d4c <try_dlopen+0x4f4>  // b.none
    1d3c:	bl	0 <free>
    1d40:	ldr	x1, [x22]
    1d44:	str	x19, [x1, #24]
    1d48:	mov	x19, #0x0                   	// #0
    1d4c:	adrp	x0, 0 <lt__alloc_die_callback>
    1d50:	ldr	x2, [x0]
    1d54:	str	x2, [x1]
    1d58:	ldr	x1, [x22]
    1d5c:	str	x1, [x0]
    1d60:	ldr	x0, [sp, #112]
    1d64:	mov	w24, #0x0                   	// #0
    1d68:	bl	0 <lt__set_last_error>
    1d6c:	ldr	x0, [sp, #176]
    1d70:	b	1c28 <try_dlopen+0x3d0>
    1d74:	mov	x0, #0x58                  	// #88
    1d78:	bl	0 <lt__zalloc>
    1d7c:	str	x0, [x22]
    1d80:	cbz	x0, 24a0 <try_dlopen+0xc48>
    1d84:	ldr	x1, [sp, #176]
    1d88:	str	x0, [sp, #184]
    1d8c:	cbz	x1, 1ea0 <try_dlopen+0x648>
    1d90:	ldr	x2, [sp, #104]
    1d94:	mov	x1, x23
    1d98:	add	x0, sp, #0xb8
    1d9c:	mov	x3, #0x0                   	// #0
    1da0:	bl	120 <tryall_dlopen>
    1da4:	cbz	w0, 2000 <try_dlopen+0x7a8>
    1da8:	ldr	x0, [x22]
    1dac:	str	xzr, [sp, #184]
    1db0:	bl	0 <free>
    1db4:	mov	w24, #0x1                   	// #1
    1db8:	str	xzr, [x22]
    1dbc:	nop
    1dc0:	ldr	x0, [sp, #176]
    1dc4:	b	1c28 <try_dlopen+0x3d0>
    1dc8:	mov	x0, x21
    1dcc:	bl	0 <strlen>
    1dd0:	add	x20, x21, x0
    1dd4:	b	1968 <try_dlopen+0x110>
    1dd8:	mov	x27, #0x0                   	// #0
    1ddc:	mov	w24, #0x1                   	// #1
    1de0:	ldr	x0, [sp, #176]
    1de4:	b	1c28 <try_dlopen+0x3d0>
    1de8:	adrp	x0, 0 <lt__alloc_die_callback>
    1dec:	add	x0, x0, #0x0
    1df0:	bl	0 <lt_dlloader_find>
    1df4:	mov	x28, x0
    1df8:	cbz	x0, 19c4 <try_dlopen+0x16c>
    1dfc:	ldrb	w1, [x19]
    1e00:	mov	x0, #0x6                   	// #6
    1e04:	cbz	w1, 1e14 <try_dlopen+0x5bc>
    1e08:	mov	x0, x19
    1e0c:	bl	0 <strlen>
    1e10:	add	x0, x0, #0x6
    1e14:	bl	0 <lt__malloc>
    1e18:	mov	x27, x0
    1e1c:	mov	x0, #0x58                  	// #88
    1e20:	bl	0 <lt__zalloc>
    1e24:	str	x0, [x22]
    1e28:	cbz	x0, 24a0 <try_dlopen+0xc48>
    1e2c:	cbz	x27, 24a0 <try_dlopen+0xc48>
    1e30:	str	x0, [sp, #184]
    1e34:	ldrb	w0, [x19]
    1e38:	cmp	w0, #0x6c
    1e3c:	b.ne	2694 <try_dlopen+0xe3c>  // b.any
    1e40:	ldrb	w0, [x19, #1]
    1e44:	cmp	w0, #0x69
    1e48:	b.ne	2694 <try_dlopen+0xe3c>  // b.any
    1e4c:	ldrb	w0, [x19, #2]
    1e50:	cmp	w0, #0x62
    1e54:	b.ne	2694 <try_dlopen+0xe3c>  // b.any
    1e58:	adrp	x2, 0 <lt__alloc_die_callback>
    1e5c:	add	x2, x2, #0x0
    1e60:	add	x4, x2, #0x158
    1e64:	adrp	x1, 0 <lt__alloc_die_callback>
    1e68:	add	x2, x2, #0x160
    1e6c:	add	x3, x19, #0x3
    1e70:	add	x1, x1, #0x0
    1e74:	mov	x0, x27
    1e78:	bl	0 <sprintf>
    1e7c:	ldr	x2, [sp, #104]
    1e80:	mov	x3, x28
    1e84:	mov	x1, x27
    1e88:	add	x0, sp, #0xb8
    1e8c:	bl	120 <tryall_dlopen>
    1e90:	cbnz	w0, 26b8 <try_dlopen+0xe60>
    1e94:	ldr	x20, [x22]
    1e98:	ldr	x1, [sp, #184]
    1e9c:	b	1d04 <try_dlopen+0x4ac>
    1ea0:	adrp	x0, 0 <lt__alloc_die_callback>
    1ea4:	stp	x25, x26, [sp, #64]
    1ea8:	ldr	x20, [x0]
    1eac:	cbz	x20, 24e8 <try_dlopen+0xc90>
    1eb0:	ldrb	w0, [x21]
    1eb4:	mov	x24, #0x0                   	// #0
    1eb8:	cbz	w0, 1ec8 <try_dlopen+0x670>
    1ebc:	mov	x0, x21
    1ec0:	bl	0 <strlen>
    1ec4:	mov	x24, x0
    1ec8:	stp	xzr, xzr, [sp, #352]
    1ecc:	str	xzr, [sp, #368]
    1ed0:	ldrb	w0, [x20]
    1ed4:	cbz	w0, 24bc <try_dlopen+0xc64>
    1ed8:	mov	x0, x20
    1edc:	add	x1, sp, #0x170
    1ee0:	bl	18 <canonicalize_path>
    1ee4:	cbnz	w0, 2914 <try_dlopen+0x10bc>
    1ee8:	ldr	x0, [sp, #368]
    1eec:	add	x2, sp, #0x160
    1ef0:	add	x1, sp, #0x168
    1ef4:	bl	668 <argzize_path>
    1ef8:	cbnz	w0, 2c8c <try_dlopen+0x1434>
    1efc:	mov	x28, #0x0                   	// #0
    1f00:	mov	x20, #0x0                   	// #0
    1f04:	mov	x26, #0x0                   	// #0
    1f08:	mov	w25, #0x2f                  	// #47
    1f0c:	ldp	x0, x1, [sp, #352]
    1f10:	cbz	x28, 2c44 <try_dlopen+0x13ec>
    1f14:	add	x3, x1, x0
    1f18:	str	x3, [sp, #120]
    1f1c:	cmp	x28, x3
    1f20:	b.cs	24d0 <try_dlopen+0xc78>  // b.hs, b.nlast
    1f24:	mov	x0, x28
    1f28:	str	x1, [sp, #136]
    1f2c:	bl	0 <strlen>
    1f30:	add	x0, x0, #0x1
    1f34:	ldr	x3, [sp, #120]
    1f38:	add	x28, x28, x0
    1f3c:	ldr	x1, [sp, #136]
    1f40:	cmp	x3, x28
    1f44:	b.ls	24d0 <try_dlopen+0xc78>  // b.plast
    1f48:	ldrb	w0, [x28]
    1f4c:	cbz	w0, 2c98 <try_dlopen+0x1440>
    1f50:	mov	x0, x28
    1f54:	bl	0 <strlen>
    1f58:	mov	x3, x0
    1f5c:	add	x1, x0, x24
    1f60:	add	x0, x1, #0x1
    1f64:	cmp	x0, x26
    1f68:	b.cs	2e28 <try_dlopen+0x15d0>  // b.hs, b.nlast
    1f6c:	str	x3, [sp, #120]
    1f70:	cmp	x3, x26
    1f74:	b.cs	3054 <try_dlopen+0x17fc>  // b.hs, b.nlast
    1f78:	mov	x1, x28
    1f7c:	mov	x0, x20
    1f80:	bl	0 <strcpy>
    1f84:	ldrb	w0, [x21]
    1f88:	cbz	w0, 1fb8 <try_dlopen+0x760>
    1f8c:	ldr	x3, [sp, #120]
    1f90:	add	x1, x20, x3
    1f94:	mov	x0, x3
    1f98:	ldurb	w1, [x1, #-1]
    1f9c:	cmp	w1, #0x2f
    1fa0:	b.eq	1fac <try_dlopen+0x754>  // b.none
    1fa4:	add	x0, x3, #0x1
    1fa8:	strb	w25, [x20, x3]
    1fac:	add	x0, x20, x0
    1fb0:	mov	x1, x21
    1fb4:	bl	0 <strcpy>
    1fb8:	mov	x0, x20
    1fbc:	mov	w1, #0x4                   	// #4
    1fc0:	bl	0 <access>
    1fc4:	cbnz	w0, 1f0c <try_dlopen+0x6b4>
    1fc8:	ldr	x2, [sp, #104]
    1fcc:	mov	x1, x20
    1fd0:	add	x0, sp, #0xb8
    1fd4:	mov	x3, #0x0                   	// #0
    1fd8:	bl	120 <tryall_dlopen>
    1fdc:	cbz	w0, 1fe4 <try_dlopen+0x78c>
    1fe0:	str	xzr, [sp, #184]
    1fe4:	ldr	x0, [sp, #360]
    1fe8:	bl	0 <free>
    1fec:	ldr	x0, [sp, #368]
    1ff0:	bl	0 <free>
    1ff4:	mov	x0, x20
    1ff8:	bl	0 <free>
    1ffc:	ldp	x25, x26, [sp, #64]
    2000:	ldr	x1, [sp, #184]
    2004:	ldr	x0, [x22]
    2008:	mov	x20, x0
    200c:	cbnz	x1, 1d04 <try_dlopen+0x4ac>
    2010:	b	1db0 <try_dlopen+0x558>
    2014:	adrp	x0, 0 <lt__alloc_die_callback>
    2018:	ldr	x24, [x0]
    201c:	cbz	x24, 2178 <try_dlopen+0x920>
    2020:	str	xzr, [sp, #224]
    2024:	mov	x26, #0x0                   	// #0
    2028:	ldrb	w0, [x21]
    202c:	cbz	w0, 203c <try_dlopen+0x7e4>
    2030:	mov	x0, x21
    2034:	bl	0 <strlen>
    2038:	mov	x26, x0
    203c:	stp	xzr, xzr, [sp, #256]
    2040:	str	xzr, [sp, #272]
    2044:	ldrb	w0, [x24]
    2048:	cbz	w0, 2668 <try_dlopen+0xe10>
    204c:	mov	x0, x24
    2050:	add	x1, sp, #0x110
    2054:	bl	18 <canonicalize_path>
    2058:	cbnz	w0, 2920 <try_dlopen+0x10c8>
    205c:	ldr	x0, [sp, #272]
    2060:	add	x2, sp, #0x100
    2064:	add	x1, sp, #0x108
    2068:	bl	668 <argzize_path>
    206c:	cbnz	w0, 2920 <try_dlopen+0x10c8>
    2070:	mov	x3, #0x0                   	// #0
    2074:	mov	x24, #0x0                   	// #0
    2078:	str	xzr, [sp, #120]
    207c:	ldp	x2, x28, [sp, #256]
    2080:	cbz	x3, 2cc8 <try_dlopen+0x1470>
    2084:	add	x25, x28, x2
    2088:	cmp	x3, x25
    208c:	b.cs	2158 <try_dlopen+0x900>  // b.hs, b.nlast
    2090:	mov	x0, x3
    2094:	str	x3, [sp, #136]
    2098:	bl	0 <strlen>
    209c:	add	x0, x0, #0x1
    20a0:	ldr	x3, [sp, #136]
    20a4:	add	x3, x3, x0
    20a8:	cmp	x25, x3
    20ac:	b.ls	2158 <try_dlopen+0x900>  // b.plast
    20b0:	ldrb	w0, [x3]
    20b4:	cbz	w0, 2cd8 <try_dlopen+0x1480>
    20b8:	mov	x0, x3
    20bc:	str	x3, [sp, #136]
    20c0:	bl	0 <strlen>
    20c4:	mov	x25, x0
    20c8:	ldr	x3, [sp, #136]
    20cc:	add	x1, x0, x26
    20d0:	ldr	x2, [sp, #120]
    20d4:	add	x0, x1, #0x1
    20d8:	cmp	x0, x2
    20dc:	b.cs	2e54 <try_dlopen+0x15fc>  // b.hs, b.nlast
    20e0:	ldr	x0, [sp, #120]
    20e4:	cmp	x25, x0
    20e8:	b.cs	3054 <try_dlopen+0x17fc>  // b.hs, b.nlast
    20ec:	mov	x1, x3
    20f0:	mov	x0, x24
    20f4:	str	x3, [sp, #136]
    20f8:	bl	0 <strcpy>
    20fc:	ldrb	w0, [x21]
    2100:	ldr	x3, [sp, #136]
    2104:	cbz	w0, 2138 <try_dlopen+0x8e0>
    2108:	add	x0, x24, x25
    210c:	ldurb	w1, [x0, #-1]
    2110:	cmp	w1, #0x2f
    2114:	b.eq	2128 <try_dlopen+0x8d0>  // b.none
    2118:	add	x0, x25, #0x1
    211c:	mov	w1, #0x2f                  	// #47
    2120:	add	x0, x24, x0
    2124:	strb	w1, [x24, x25]
    2128:	mov	x1, x21
    212c:	str	x3, [sp, #136]
    2130:	bl	0 <strcpy>
    2134:	ldr	x3, [sp, #136]
    2138:	add	x2, sp, #0xe0
    213c:	add	x1, sp, #0xb0
    2140:	mov	x0, x24
    2144:	str	x3, [sp, #136]
    2148:	bl	558 <find_file_callback>
    214c:	ldr	x3, [sp, #136]
    2150:	cbz	w0, 207c <try_dlopen+0x824>
    2154:	ldr	x28, [sp, #264]
    2158:	mov	x0, x28
    215c:	bl	0 <free>
    2160:	ldr	x0, [sp, #272]
    2164:	bl	0 <free>
    2168:	mov	x0, x24
    216c:	bl	0 <free>
    2170:	ldr	x24, [sp, #224]
    2174:	cbnz	x24, 1a24 <try_dlopen+0x1cc>
    2178:	adrp	x0, 0 <lt__alloc_die_callback>
    217c:	add	x0, x0, #0x0
    2180:	bl	0 <getenv>
    2184:	mov	x24, x0
    2188:	cbz	x0, 22e8 <try_dlopen+0xa90>
    218c:	str	xzr, [sp, #232]
    2190:	mov	x26, #0x0                   	// #0
    2194:	ldrb	w0, [x21]
    2198:	cbz	w0, 21a8 <try_dlopen+0x950>
    219c:	mov	x0, x21
    21a0:	bl	0 <strlen>
    21a4:	mov	x26, x0
    21a8:	stp	xzr, xzr, [sp, #280]
    21ac:	str	xzr, [sp, #296]
    21b0:	ldrb	w0, [x24]
    21b4:	cbz	w0, 2bf4 <try_dlopen+0x139c>
    21b8:	mov	x0, x24
    21bc:	add	x1, sp, #0x128
    21c0:	bl	18 <canonicalize_path>
    21c4:	cbnz	w0, 2c80 <try_dlopen+0x1428>
    21c8:	ldr	x0, [sp, #296]
    21cc:	add	x2, sp, #0x118
    21d0:	add	x1, sp, #0x120
    21d4:	bl	668 <argzize_path>
    21d8:	cbnz	w0, 2c80 <try_dlopen+0x1428>
    21dc:	mov	x3, #0x0                   	// #0
    21e0:	mov	x24, #0x0                   	// #0
    21e4:	str	xzr, [sp, #120]
    21e8:	ldp	x2, x28, [sp, #280]
    21ec:	cbz	x3, 2f48 <try_dlopen+0x16f0>
    21f0:	add	x25, x28, x2
    21f4:	cmp	x3, x25
    21f8:	b.cs	22c8 <try_dlopen+0xa70>  // b.hs, b.nlast
    21fc:	mov	x0, x3
    2200:	str	x3, [sp, #136]
    2204:	bl	0 <strlen>
    2208:	add	x0, x0, #0x1
    220c:	ldr	x3, [sp, #136]
    2210:	add	x3, x3, x0
    2214:	cmp	x25, x3
    2218:	b.ls	22c8 <try_dlopen+0xa70>  // b.plast
    221c:	ldrb	w0, [x3]
    2220:	mov	x25, #0x0                   	// #0
    2224:	cbz	w0, 223c <try_dlopen+0x9e4>
    2228:	mov	x0, x3
    222c:	str	x3, [sp, #136]
    2230:	bl	0 <strlen>
    2234:	mov	x25, x0
    2238:	ldr	x3, [sp, #136]
    223c:	add	x1, x26, x25
    2240:	ldr	x2, [sp, #120]
    2244:	add	x0, x1, #0x1
    2248:	cmp	x0, x2
    224c:	b.cs	2c54 <try_dlopen+0x13fc>  // b.hs, b.nlast
    2250:	ldr	x0, [sp, #120]
    2254:	cmp	x25, x0
    2258:	b.cs	3054 <try_dlopen+0x17fc>  // b.hs, b.nlast
    225c:	mov	x1, x3
    2260:	mov	x0, x24
    2264:	str	x3, [sp, #136]
    2268:	bl	0 <strcpy>
    226c:	ldrb	w0, [x21]
    2270:	ldr	x3, [sp, #136]
    2274:	cbz	w0, 22a8 <try_dlopen+0xa50>
    2278:	add	x0, x24, x25
    227c:	ldurb	w1, [x0, #-1]
    2280:	cmp	w1, #0x2f
    2284:	b.eq	2298 <try_dlopen+0xa40>  // b.none
    2288:	add	x0, x25, #0x1
    228c:	mov	w1, #0x2f                  	// #47
    2290:	add	x0, x24, x0
    2294:	strb	w1, [x24, x25]
    2298:	mov	x1, x21
    229c:	str	x3, [sp, #136]
    22a0:	bl	0 <strcpy>
    22a4:	ldr	x3, [sp, #136]
    22a8:	add	x2, sp, #0xe8
    22ac:	add	x1, sp, #0xb0
    22b0:	mov	x0, x24
    22b4:	str	x3, [sp, #136]
    22b8:	bl	558 <find_file_callback>
    22bc:	ldr	x3, [sp, #136]
    22c0:	cbz	w0, 21e8 <try_dlopen+0x990>
    22c4:	ldr	x28, [sp, #288]
    22c8:	mov	x0, x28
    22cc:	bl	0 <free>
    22d0:	ldr	x0, [sp, #296]
    22d4:	bl	0 <free>
    22d8:	mov	x0, x24
    22dc:	bl	0 <free>
    22e0:	ldr	x24, [sp, #232]
    22e4:	cbnz	x24, 1a24 <try_dlopen+0x1cc>
    22e8:	adrp	x0, 0 <lt__alloc_die_callback>
    22ec:	add	x0, x0, #0x0
    22f0:	bl	0 <getenv>
    22f4:	mov	x24, x0
    22f8:	cbz	x0, 2960 <try_dlopen+0x1108>
    22fc:	str	xzr, [sp, #240]
    2300:	str	xzr, [sp, #120]
    2304:	ldrb	w0, [x21]
    2308:	cbz	w0, 2318 <try_dlopen+0xac0>
    230c:	mov	x0, x21
    2310:	bl	0 <strlen>
    2314:	str	x0, [sp, #120]
    2318:	stp	xzr, xzr, [sp, #304]
    231c:	str	xzr, [sp, #320]
    2320:	ldrb	w0, [x24]
    2324:	cbz	w0, 2cb0 <try_dlopen+0x1458>
    2328:	mov	x0, x24
    232c:	add	x1, sp, #0x140
    2330:	bl	18 <canonicalize_path>
    2334:	cbnz	w0, 2ef4 <try_dlopen+0x169c>
    2338:	ldr	x0, [sp, #320]
    233c:	add	x2, sp, #0x130
    2340:	add	x1, sp, #0x138
    2344:	bl	668 <argzize_path>
    2348:	cbnz	w0, 2ef4 <try_dlopen+0x169c>
    234c:	mov	x2, #0x0                   	// #0
    2350:	mov	x28, #0x0                   	// #0
    2354:	mov	x26, #0x0                   	// #0
    2358:	ldp	x4, x1, [sp, #304]
    235c:	mov	x24, x1
    2360:	cbz	x2, 2ff0 <try_dlopen+0x1798>
    2364:	add	x25, x1, x4
    2368:	cmp	x2, x25
    236c:	b.cs	2940 <try_dlopen+0x10e8>  // b.hs, b.nlast
    2370:	mov	x0, x2
    2374:	stp	x2, x1, [sp, #136]
    2378:	bl	0 <strlen>
    237c:	ldp	x2, x1, [sp, #136]
    2380:	add	x24, x0, #0x1
    2384:	add	x24, x2, x24
    2388:	cmp	x25, x24
    238c:	b.ls	2940 <try_dlopen+0x10e8>  // b.plast
    2390:	ldrb	w0, [x24]
    2394:	cbz	w0, 2ffc <try_dlopen+0x17a4>
    2398:	mov	x0, x24
    239c:	bl	0 <strlen>
    23a0:	mov	x25, x0
    23a4:	ldr	x0, [sp, #120]
    23a8:	add	x1, x0, x25
    23ac:	add	x0, x1, #0x1
    23b0:	cmp	x0, x26
    23b4:	b.cs	2ed4 <try_dlopen+0x167c>  // b.hs, b.nlast
    23b8:	cmp	x25, x26
    23bc:	b.cs	3054 <try_dlopen+0x17fc>  // b.hs, b.nlast
    23c0:	mov	x1, x24
    23c4:	mov	x0, x28
    23c8:	bl	0 <strcpy>
    23cc:	ldrb	w0, [x21]
    23d0:	cbz	w0, 23fc <try_dlopen+0xba4>
    23d4:	add	x0, x28, x25
    23d8:	ldurb	w1, [x0, #-1]
    23dc:	cmp	w1, #0x2f
    23e0:	b.eq	23f4 <try_dlopen+0xb9c>  // b.none
    23e4:	add	x0, x25, #0x1
    23e8:	mov	w1, #0x2f                  	// #47
    23ec:	add	x0, x28, x0
    23f0:	strb	w1, [x28, x25]
    23f4:	mov	x1, x21
    23f8:	bl	0 <strcpy>
    23fc:	add	x2, sp, #0xf0
    2400:	add	x1, sp, #0xb0
    2404:	mov	x0, x28
    2408:	bl	558 <find_file_callback>
    240c:	cbnz	w0, 293c <try_dlopen+0x10e4>
    2410:	mov	x2, x24
    2414:	b	2358 <try_dlopen+0xb00>
    2418:	ldr	x0, [x22]
    241c:	mov	w24, #0x1                   	// #1
    2420:	bl	0 <free>
    2424:	str	xzr, [x22]
    2428:	b	1bfc <try_dlopen+0x3a4>
    242c:	add	x1, x28, #0x7
    2430:	add	x0, sp, #0xc0
    2434:	bl	468 <trim>
    2438:	cbz	w0, 1a58 <try_dlopen+0x200>
    243c:	nop
    2440:	mov	x0, x28
    2444:	bl	0 <free>
    2448:	mov	x0, x24
    244c:	bl	0 <fclose>
    2450:	mov	x0, #0x58                  	// #88
    2454:	bl	0 <lt__zalloc>
    2458:	cmp	x0, #0x0
    245c:	str	x0, [x22]
    2460:	cset	w24, eq  // eq = none
    2464:	add	w24, w24, #0x1
    2468:	ldr	x0, [sp, #192]
    246c:	bl	0 <free>
    2470:	ldr	x0, [sp, #200]
    2474:	bl	0 <free>
    2478:	ldr	x0, [sp, #208]
    247c:	bl	0 <free>
    2480:	ldr	x0, [sp, #216]
    2484:	bl	0 <free>
    2488:	ldr	x0, [x22]
    248c:	bl	0 <free>
    2490:	str	xzr, [x22]
    2494:	ldp	x25, x26, [sp, #64]
    2498:	ldr	x0, [sp, #176]
    249c:	b	1c28 <try_dlopen+0x3d0>
    24a0:	mov	w24, #0x1                   	// #1
    24a4:	ldr	x0, [sp, #176]
    24a8:	b	1c28 <try_dlopen+0x3d0>
    24ac:	add	x1, x28, #0xc
    24b0:	add	x0, sp, #0xc8
    24b4:	bl	468 <trim>
    24b8:	b	2438 <try_dlopen+0xbe0>
    24bc:	mov	w0, #0x5                   	// #5
    24c0:	bl	0 <lt__error_string>
    24c4:	bl	0 <lt__set_last_error>
    24c8:	mov	x20, #0x0                   	// #0
    24cc:	ldr	x1, [sp, #360]
    24d0:	mov	x0, x1
    24d4:	bl	0 <free>
    24d8:	ldr	x0, [sp, #368]
    24dc:	bl	0 <free>
    24e0:	mov	x0, x20
    24e4:	bl	0 <free>
    24e8:	adrp	x0, 0 <lt__alloc_die_callback>
    24ec:	add	x0, x0, #0x0
    24f0:	bl	0 <getenv>
    24f4:	mov	x24, x0
    24f8:	cbz	x0, 2ac0 <try_dlopen+0x1268>
    24fc:	ldrb	w0, [x21]
    2500:	mov	x26, #0x0                   	// #0
    2504:	cbz	w0, 2514 <try_dlopen+0xcbc>
    2508:	mov	x0, x21
    250c:	bl	0 <strlen>
    2510:	mov	x26, x0
    2514:	stp	xzr, xzr, [sp, #376]
    2518:	str	xzr, [sp, #392]
    251c:	ldrb	w0, [x24]
    2520:	cbz	w0, 2a94 <try_dlopen+0x123c>
    2524:	mov	x0, x24
    2528:	add	x1, sp, #0x188
    252c:	bl	18 <canonicalize_path>
    2530:	cbnz	w0, 2ca4 <try_dlopen+0x144c>
    2534:	ldr	x0, [sp, #392]
    2538:	add	x1, sp, #0x180
    253c:	add	x2, sp, #0x178
    2540:	mov	x20, #0x0                   	// #0
    2544:	bl	668 <argzize_path>
    2548:	ldr	x1, [sp, #384]
    254c:	cbnz	w0, 2aa8 <try_dlopen+0x1250>
    2550:	mov	x28, #0x0                   	// #0
    2554:	mov	x20, #0x0                   	// #0
    2558:	mov	x24, #0x0                   	// #0
    255c:	mov	w25, #0x2f                  	// #47
    2560:	ldp	x3, x1, [sp, #376]
    2564:	cbz	x28, 2e98 <try_dlopen+0x1640>
    2568:	add	x3, x1, x3
    256c:	str	x3, [sp, #136]
    2570:	cmp	x28, x3
    2574:	b.cs	2aa8 <try_dlopen+0x1250>  // b.hs, b.nlast
    2578:	mov	x0, x28
    257c:	str	x1, [sp, #120]
    2580:	bl	0 <strlen>
    2584:	add	x0, x0, #0x1
    2588:	ldr	x3, [sp, #136]
    258c:	add	x28, x28, x0
    2590:	ldr	x1, [sp, #120]
    2594:	cmp	x3, x28
    2598:	b.ls	2aa8 <try_dlopen+0x1250>  // b.plast
    259c:	ldrb	w0, [x28]
    25a0:	mov	x3, #0x0                   	// #0
    25a4:	cbz	w0, 25b4 <try_dlopen+0xd5c>
    25a8:	mov	x0, x28
    25ac:	bl	0 <strlen>
    25b0:	mov	x3, x0
    25b4:	add	x1, x26, x3
    25b8:	add	x0, x1, #0x1
    25bc:	cmp	x0, x24
    25c0:	b.cs	2f58 <try_dlopen+0x1700>  // b.hs, b.nlast
    25c4:	str	x3, [sp, #120]
    25c8:	cmp	x3, x24
    25cc:	b.cs	3054 <try_dlopen+0x17fc>  // b.hs, b.nlast
    25d0:	mov	x1, x28
    25d4:	mov	x0, x20
    25d8:	bl	0 <strcpy>
    25dc:	ldrb	w0, [x21]
    25e0:	cbz	w0, 260c <try_dlopen+0xdb4>
    25e4:	ldr	x3, [sp, #120]
    25e8:	add	x0, x20, x3
    25ec:	ldurb	w1, [x0, #-1]
    25f0:	cmp	w1, #0x2f
    25f4:	b.eq	2604 <try_dlopen+0xdac>  // b.none
    25f8:	add	x0, x3, #0x1
    25fc:	strb	w25, [x20, x3]
    2600:	add	x0, x20, x0
    2604:	mov	x1, x21
    2608:	bl	0 <strcpy>
    260c:	mov	x0, x20
    2610:	mov	w1, #0x4                   	// #4
    2614:	bl	0 <access>
    2618:	cbnz	w0, 2560 <try_dlopen+0xd08>
    261c:	ldr	x2, [sp, #104]
    2620:	mov	x1, x20
    2624:	add	x0, sp, #0xb8
    2628:	mov	x3, #0x0                   	// #0
    262c:	bl	120 <tryall_dlopen>
    2630:	cbz	w0, 2638 <try_dlopen+0xde0>
    2634:	str	xzr, [sp, #184]
    2638:	ldr	x0, [sp, #384]
    263c:	bl	0 <free>
    2640:	ldr	x0, [sp, #392]
    2644:	bl	0 <free>
    2648:	mov	x0, x20
    264c:	bl	0 <free>
    2650:	ldp	x25, x26, [sp, #64]
    2654:	b	2000 <try_dlopen+0x7a8>
    2658:	add	x1, x28, #0x7
    265c:	add	x0, sp, #0xd0
    2660:	bl	468 <trim>
    2664:	b	2438 <try_dlopen+0xbe0>
    2668:	mov	w0, #0x5                   	// #5
    266c:	mov	x24, #0x0                   	// #0
    2670:	bl	0 <lt__error_string>
    2674:	bl	0 <lt__set_last_error>
    2678:	ldr	x28, [sp, #264]
    267c:	b	2158 <try_dlopen+0x900>
    2680:	mov	w24, #0x1                   	// #1
    2684:	mov	w0, #0x5                   	// #5
    2688:	bl	0 <lt__error_string>
    268c:	bl	0 <lt__set_last_error>
    2690:	b	2494 <try_dlopen+0xc3c>
    2694:	adrp	x3, 0 <lt__alloc_die_callback>
    2698:	add	x3, x3, #0x0
    269c:	add	x3, x3, #0x158
    26a0:	mov	x2, x19
    26a4:	mov	x0, x27
    26a8:	adrp	x1, 0 <lt__alloc_die_callback>
    26ac:	add	x1, x1, #0x0
    26b0:	bl	0 <sprintf>
    26b4:	b	1e7c <try_dlopen+0x624>
    26b8:	ldr	x0, [x22]
    26bc:	bl	0 <free>
    26c0:	str	xzr, [x22]
    26c4:	str	xzr, [sp, #184]
    26c8:	b	19c8 <try_dlopen+0x170>
    26cc:	add	x1, x28, #0x10
    26d0:	add	x0, sp, #0xd8
    26d4:	bl	468 <trim>
    26d8:	b	2438 <try_dlopen+0xbe0>
    26dc:	mov	w0, #0x1                   	// #1
    26e0:	str	w0, [sp, #144]
    26e4:	b	1a58 <try_dlopen+0x200>
    26e8:	mov	x0, x28
    26ec:	bl	0 <free>
    26f0:	mov	x0, x24
    26f4:	bl	0 <fclose>
    26f8:	mov	x0, #0x58                  	// #88
    26fc:	bl	0 <lt__zalloc>
    2700:	str	x0, [x22]
    2704:	cbz	x0, 3094 <try_dlopen+0x183c>
    2708:	ldp	x20, x24, [sp, #192]
    270c:	str	wzr, [x0, #40]
    2710:	str	x0, [sp, #184]
    2714:	ldr	x5, [sp, #176]
    2718:	ldr	x4, [sp, #208]
    271c:	cbz	x24, 28d4 <try_dlopen+0x107c>
    2720:	adrp	x0, 0 <lt__alloc_die_callback>
    2724:	add	x0, x0, #0x0
    2728:	str	x5, [sp, #120]
    272c:	str	x4, [sp, #136]
    2730:	bl	0 <lt_dlloader_find>
    2734:	ldr	x2, [sp, #104]
    2738:	mov	x3, x0
    273c:	mov	x1, x24
    2740:	add	x0, sp, #0xb8
    2744:	bl	120 <tryall_dlopen>
    2748:	cbz	w0, 2810 <try_dlopen+0xfb8>
    274c:	ldr	x5, [sp, #120]
    2750:	ldr	x4, [sp, #136]
    2754:	cbz	x20, 2790 <try_dlopen+0xf38>
    2758:	ldr	w0, [sp, #144]
    275c:	cmp	x4, #0x0
    2760:	csel	w0, w0, wzr, ne  // ne = any
    2764:	cbnz	w0, 28ec <try_dlopen+0x1094>
    2768:	ldr	w0, [sp, #144]
    276c:	cbz	w0, 27e8 <try_dlopen+0xf90>
    2770:	cbz	x5, 2790 <try_dlopen+0xf38>
    2774:	ldr	x4, [sp, #104]
    2778:	mov	x3, x20
    277c:	mov	x2, x5
    2780:	add	x0, sp, #0xb8
    2784:	mov	x1, #0x0                   	// #0
    2788:	bl	2f8 <tryall_dlopen_module>
    278c:	cbz	w0, 2810 <try_dlopen+0xfb8>
    2790:	ldr	x24, [x22]
    2794:	ldr	w2, [x24, #40]
    2798:	cmp	w2, #0x0
    279c:	cbz	w2, 2c0c <try_dlopen+0x13b4>
    27a0:	ldr	x3, [x24, #48]
    27a4:	b.le	27c8 <try_dlopen+0xf70>
    27a8:	mov	x20, #0x0                   	// #0
    27ac:	nop
    27b0:	ldr	x0, [x3, x20, lsl #3]
    27b4:	ldrb	w1, [x0, #36]
    27b8:	tbz	w1, #0, 28b8 <try_dlopen+0x1060>
    27bc:	add	x20, x20, #0x1
    27c0:	cmp	w2, w20
    27c4:	b.gt	27b0 <try_dlopen+0xf58>
    27c8:	mov	x0, x3
    27cc:	bl	0 <free>
    27d0:	ldr	x20, [sp, #192]
    27d4:	str	xzr, [x24, #48]
    27d8:	mov	x0, x20
    27dc:	mov	w24, #0x1                   	// #1
    27e0:	bl	0 <free>
    27e4:	b	2470 <try_dlopen+0xc18>
    27e8:	ldr	x4, [sp, #104]
    27ec:	mov	x1, x5
    27f0:	ldr	x0, [sp, #128]
    27f4:	mov	x3, x20
    27f8:	str	x5, [sp, #120]
    27fc:	add	x2, x0, #0x170
    2800:	add	x0, sp, #0xb8
    2804:	bl	2f8 <tryall_dlopen_module>
    2808:	ldr	x5, [sp, #120]
    280c:	cbnz	w0, 2770 <try_dlopen+0xf18>
    2810:	ldr	x0, [sp, #192]
    2814:	bl	0 <free>
    2818:	str	xzr, [sp, #192]
    281c:	ldr	x0, [sp, #200]
    2820:	bl	0 <free>
    2824:	str	xzr, [sp, #200]
    2828:	ldr	x0, [sp, #208]
    282c:	bl	0 <free>
    2830:	str	xzr, [sp, #208]
    2834:	ldr	x0, [sp, #216]
    2838:	bl	0 <free>
    283c:	str	xzr, [sp, #216]
    2840:	ldr	x20, [x22]
    2844:	ldr	x1, [sp, #184]
    2848:	cmp	x20, x1
    284c:	b.eq	28e4 <try_dlopen+0x108c>  // b.none
    2850:	ldr	w2, [x20, #40]
    2854:	cmp	w2, #0x0
    2858:	cbz	w2, 28dc <try_dlopen+0x1084>
    285c:	ldr	x3, [x20, #48]
    2860:	b.le	2880 <try_dlopen+0x1028>
    2864:	mov	x24, #0x0                   	// #0
    2868:	ldr	x0, [x3, x24, lsl #3]
    286c:	ldrb	w1, [x0, #36]
    2870:	tbz	w1, #0, 289c <try_dlopen+0x1044>
    2874:	add	x24, x24, #0x1
    2878:	cmp	w2, w24
    287c:	b.gt	2868 <try_dlopen+0x1010>
    2880:	mov	x0, x3
    2884:	bl	0 <free>
    2888:	ldp	x25, x26, [sp, #64]
    288c:	str	xzr, [x20, #48]
    2890:	ldr	x20, [x22]
    2894:	ldr	x1, [sp, #184]
    2898:	b	1d04 <try_dlopen+0x4ac>
    289c:	bl	1528 <lt_dlclose>
    28a0:	add	x24, x24, #0x1
    28a4:	ldr	w2, [x20, #40]
    28a8:	ldr	x3, [x20, #48]
    28ac:	cmp	w2, w24
    28b0:	b.gt	2868 <try_dlopen+0x1010>
    28b4:	b	2880 <try_dlopen+0x1028>
    28b8:	bl	1528 <lt_dlclose>
    28bc:	add	x20, x20, #0x1
    28c0:	ldr	w2, [x24, #40]
    28c4:	ldr	x3, [x24, #48]
    28c8:	cmp	w2, w20
    28cc:	b.gt	27b0 <try_dlopen+0xf58>
    28d0:	b	27c8 <try_dlopen+0xf70>
    28d4:	cbnz	x20, 2758 <try_dlopen+0xf00>
    28d8:	b	27d8 <try_dlopen+0xf80>
    28dc:	ldp	x25, x26, [sp, #64]
    28e0:	b	1d04 <try_dlopen+0x4ac>
    28e4:	ldp	x25, x26, [sp, #64]
    28e8:	b	1d20 <try_dlopen+0x4c8>
    28ec:	mov	x2, x4
    28f0:	mov	x3, x20
    28f4:	ldr	x4, [sp, #104]
    28f8:	add	x0, sp, #0xb8
    28fc:	mov	x1, #0x0                   	// #0
    2900:	str	x5, [sp, #120]
    2904:	bl	2f8 <tryall_dlopen_module>
    2908:	ldr	x5, [sp, #120]
    290c:	cbnz	w0, 2770 <try_dlopen+0xf18>
    2910:	b	2810 <try_dlopen+0xfb8>
    2914:	mov	x20, #0x0                   	// #0
    2918:	ldr	x1, [sp, #360]
    291c:	b	24d0 <try_dlopen+0xc78>
    2920:	mov	x24, #0x0                   	// #0
    2924:	ldr	x28, [sp, #264]
    2928:	b	2158 <try_dlopen+0x900>
    292c:	mov	w0, #0x5                   	// #5
    2930:	bl	0 <lt__error_string>
    2934:	bl	0 <lt__set_last_error>
    2938:	b	2448 <try_dlopen+0xbf0>
    293c:	ldr	x1, [sp, #312]
    2940:	mov	x0, x1
    2944:	bl	0 <free>
    2948:	ldr	x0, [sp, #320]
    294c:	bl	0 <free>
    2950:	mov	x0, x28
    2954:	bl	0 <free>
    2958:	ldr	x24, [sp, #240]
    295c:	cbnz	x24, 1a24 <try_dlopen+0x1cc>
    2960:	str	xzr, [sp, #248]
    2964:	str	xzr, [sp, #120]
    2968:	ldrb	w0, [x21]
    296c:	cbz	w0, 297c <try_dlopen+0x1124>
    2970:	mov	x0, x21
    2974:	bl	0 <strlen>
    2978:	str	x0, [sp, #120]
    297c:	ldr	x0, [sp, #128]
    2980:	add	x1, sp, #0x158
    2984:	stp	xzr, xzr, [sp, #328]
    2988:	add	x0, x0, #0x120
    298c:	str	xzr, [sp, #344]
    2990:	bl	18 <canonicalize_path>
    2994:	cbnz	w0, 2c20 <try_dlopen+0x13c8>
    2998:	ldr	x0, [sp, #344]
    299c:	add	x2, sp, #0x148
    29a0:	add	x1, sp, #0x150
    29a4:	bl	668 <argzize_path>
    29a8:	cbnz	w0, 2c20 <try_dlopen+0x13c8>
    29ac:	mov	x2, #0x0                   	// #0
    29b0:	mov	x3, #0x0                   	// #0
    29b4:	mov	x26, #0x0                   	// #0
    29b8:	ldp	x4, x28, [sp, #328]
    29bc:	mov	x24, x28
    29c0:	cbz	x2, 2e88 <try_dlopen+0x1630>
    29c4:	add	x25, x28, x4
    29c8:	cmp	x2, x25
    29cc:	b.cs	2e90 <try_dlopen+0x1638>  // b.hs, b.nlast
    29d0:	mov	x0, x2
    29d4:	stp	x2, x3, [sp, #136]
    29d8:	bl	0 <strlen>
    29dc:	ldp	x2, x3, [sp, #136]
    29e0:	add	x24, x0, #0x1
    29e4:	add	x24, x2, x24
    29e8:	cmp	x25, x24
    29ec:	b.ls	2e90 <try_dlopen+0x1638>  // b.plast
    29f0:	ldrb	w0, [x24]
    29f4:	cbz	w0, 2f84 <try_dlopen+0x172c>
    29f8:	mov	x0, x24
    29fc:	str	x3, [sp, #136]
    2a00:	bl	0 <strlen>
    2a04:	mov	x25, x0
    2a08:	ldr	x3, [sp, #136]
    2a0c:	ldr	x0, [sp, #120]
    2a10:	add	x1, x0, x25
    2a14:	add	x0, x1, #0x1
    2a18:	cmp	x0, x26
    2a1c:	b.cs	2fb8 <try_dlopen+0x1760>  // b.hs, b.nlast
    2a20:	cmp	x25, x26
    2a24:	b.cs	3054 <try_dlopen+0x17fc>  // b.hs, b.nlast
    2a28:	mov	x0, x3
    2a2c:	mov	x1, x24
    2a30:	bl	0 <strcpy>
    2a34:	mov	x3, x0
    2a38:	ldrb	w0, [x21]
    2a3c:	cbz	w0, 2a70 <try_dlopen+0x1218>
    2a40:	add	x0, x3, x25
    2a44:	ldurb	w1, [x0, #-1]
    2a48:	cmp	w1, #0x2f
    2a4c:	b.eq	2a60 <try_dlopen+0x1208>  // b.none
    2a50:	add	x0, x25, #0x1
    2a54:	mov	w1, #0x2f                  	// #47
    2a58:	add	x0, x3, x0
    2a5c:	strb	w1, [x3, x25]
    2a60:	mov	x1, x21
    2a64:	str	x3, [sp, #136]
    2a68:	bl	0 <strcpy>
    2a6c:	ldr	x3, [sp, #136]
    2a70:	mov	x0, x3
    2a74:	add	x2, sp, #0xf8
    2a78:	add	x1, sp, #0xb0
    2a7c:	str	x3, [sp, #136]
    2a80:	bl	558 <find_file_callback>
    2a84:	ldr	x3, [sp, #136]
    2a88:	cbnz	w0, 2c1c <try_dlopen+0x13c4>
    2a8c:	mov	x2, x24
    2a90:	b	29b8 <try_dlopen+0x1160>
    2a94:	mov	w0, #0x5                   	// #5
    2a98:	bl	0 <lt__error_string>
    2a9c:	bl	0 <lt__set_last_error>
    2aa0:	mov	x20, #0x0                   	// #0
    2aa4:	ldr	x1, [sp, #384]
    2aa8:	mov	x0, x1
    2aac:	bl	0 <free>
    2ab0:	ldr	x0, [sp, #392]
    2ab4:	bl	0 <free>
    2ab8:	mov	x0, x20
    2abc:	bl	0 <free>
    2ac0:	adrp	x0, 0 <lt__alloc_die_callback>
    2ac4:	add	x0, x0, #0x0
    2ac8:	bl	0 <getenv>
    2acc:	mov	x20, x0
    2ad0:	cbz	x0, 2d0c <try_dlopen+0x14b4>
    2ad4:	ldrb	w0, [x21]
    2ad8:	mov	x26, #0x0                   	// #0
    2adc:	cbz	w0, 2aec <try_dlopen+0x1294>
    2ae0:	mov	x0, x21
    2ae4:	bl	0 <strlen>
    2ae8:	mov	x26, x0
    2aec:	stp	xzr, xzr, [sp, #400]
    2af0:	str	xzr, [sp, #416]
    2af4:	ldrb	w0, [x20]
    2af8:	cbz	w0, 2ce4 <try_dlopen+0x148c>
    2afc:	mov	x0, x20
    2b00:	add	x1, sp, #0x1a0
    2b04:	bl	18 <canonicalize_path>
    2b08:	cbnz	w0, 2ecc <try_dlopen+0x1674>
    2b0c:	ldr	x0, [sp, #416]
    2b10:	add	x2, sp, #0x190
    2b14:	add	x1, sp, #0x198
    2b18:	bl	668 <argzize_path>
    2b1c:	cbnz	w0, 2ecc <try_dlopen+0x1674>
    2b20:	mov	x1, #0x0                   	// #0
    2b24:	mov	x24, #0x0                   	// #0
    2b28:	mov	x20, #0x0                   	// #0
    2b2c:	mov	w25, #0x2f                  	// #47
    2b30:	ldp	x2, x28, [sp, #400]
    2b34:	cbz	x1, 2fe4 <try_dlopen+0x178c>
    2b38:	add	x2, x28, x2
    2b3c:	str	x2, [sp, #136]
    2b40:	cmp	x1, x2
    2b44:	b.cs	2cf4 <try_dlopen+0x149c>  // b.hs, b.nlast
    2b48:	mov	x0, x1
    2b4c:	str	x1, [sp, #120]
    2b50:	bl	0 <strlen>
    2b54:	add	x4, x0, #0x1
    2b58:	ldr	x1, [sp, #120]
    2b5c:	ldr	x2, [sp, #136]
    2b60:	add	x28, x1, x4
    2b64:	cmp	x2, x28
    2b68:	b.ls	2cf4 <try_dlopen+0x149c>  // b.plast
    2b6c:	ldrb	w0, [x28]
    2b70:	cbz	w0, 2fdc <try_dlopen+0x1784>
    2b74:	mov	x0, x28
    2b78:	bl	0 <strlen>
    2b7c:	mov	x2, x0
    2b80:	add	x1, x26, x2
    2b84:	add	x0, x1, #0x1
    2b88:	cmp	x0, x20
    2b8c:	b.cs	2ea8 <try_dlopen+0x1650>  // b.hs, b.nlast
    2b90:	str	x2, [sp, #120]
    2b94:	cmp	x2, x20
    2b98:	b.cs	3054 <try_dlopen+0x17fc>  // b.hs, b.nlast
    2b9c:	mov	x1, x28
    2ba0:	mov	x0, x24
    2ba4:	bl	0 <strcpy>
    2ba8:	ldrb	w0, [x21]
    2bac:	cbz	w0, 2bd8 <try_dlopen+0x1380>
    2bb0:	ldr	x2, [sp, #120]
    2bb4:	add	x0, x24, x2
    2bb8:	ldurb	w1, [x0, #-1]
    2bbc:	cmp	w1, #0x2f
    2bc0:	b.eq	2bd0 <try_dlopen+0x1378>  // b.none
    2bc4:	add	x0, x2, #0x1
    2bc8:	strb	w25, [x24, x2]
    2bcc:	add	x0, x24, x0
    2bd0:	mov	x1, x21
    2bd4:	bl	0 <strcpy>
    2bd8:	ldr	x2, [sp, #104]
    2bdc:	add	x1, sp, #0xb8
    2be0:	mov	x0, x24
    2be4:	bl	6f0 <find_handle_callback>
    2be8:	cbnz	w0, 3074 <try_dlopen+0x181c>
    2bec:	mov	x1, x28
    2bf0:	b	2b30 <try_dlopen+0x12d8>
    2bf4:	mov	w0, #0x5                   	// #5
    2bf8:	mov	x24, #0x0                   	// #0
    2bfc:	bl	0 <lt__error_string>
    2c00:	bl	0 <lt__set_last_error>
    2c04:	ldr	x28, [sp, #288]
    2c08:	b	22c8 <try_dlopen+0xa70>
    2c0c:	ldr	x20, [sp, #192]
    2c10:	b	27d8 <try_dlopen+0xf80>
    2c14:	str	wzr, [sp, #144]
    2c18:	b	1a58 <try_dlopen+0x200>
    2c1c:	mov	x20, x3
    2c20:	ldr	x28, [sp, #336]
    2c24:	mov	x0, x28
    2c28:	bl	0 <free>
    2c2c:	ldr	x0, [sp, #344]
    2c30:	bl	0 <free>
    2c34:	mov	x0, x20
    2c38:	bl	0 <free>
    2c3c:	ldr	x24, [sp, #248]
    2c40:	b	1a20 <try_dlopen+0x1c8>
    2c44:	cbz	x0, 24d0 <try_dlopen+0xc78>
    2c48:	cbz	x1, 24d0 <try_dlopen+0xc78>
    2c4c:	mov	x28, x1
    2c50:	b	1f48 <try_dlopen+0x6f0>
    2c54:	add	x1, x1, #0x2
    2c58:	mov	x0, x24
    2c5c:	mov	x24, x1
    2c60:	str	x1, [sp, #120]
    2c64:	str	x3, [sp, #136]
    2c68:	bl	0 <free>
    2c6c:	mov	x0, x24
    2c70:	bl	0 <lt__malloc>
    2c74:	mov	x24, x0
    2c78:	ldr	x3, [sp, #136]
    2c7c:	cbnz	x0, 2250 <try_dlopen+0x9f8>
    2c80:	mov	x24, #0x0                   	// #0
    2c84:	ldr	x28, [sp, #288]
    2c88:	b	22c8 <try_dlopen+0xa70>
    2c8c:	mov	x20, #0x0                   	// #0
    2c90:	ldr	x1, [sp, #360]
    2c94:	b	24d0 <try_dlopen+0xc78>
    2c98:	mov	x1, x24
    2c9c:	mov	x3, #0x0                   	// #0
    2ca0:	b	1f60 <try_dlopen+0x708>
    2ca4:	mov	x20, #0x0                   	// #0
    2ca8:	ldr	x1, [sp, #384]
    2cac:	b	2aa8 <try_dlopen+0x1250>
    2cb0:	mov	w0, #0x5                   	// #5
    2cb4:	bl	0 <lt__error_string>
    2cb8:	bl	0 <lt__set_last_error>
    2cbc:	mov	x28, #0x0                   	// #0
    2cc0:	ldr	x1, [sp, #312]
    2cc4:	b	2940 <try_dlopen+0x10e8>
    2cc8:	cbz	x2, 2158 <try_dlopen+0x900>
    2ccc:	cbz	x28, 2158 <try_dlopen+0x900>
    2cd0:	mov	x3, x28
    2cd4:	b	20b0 <try_dlopen+0x858>
    2cd8:	mov	x1, x26
    2cdc:	mov	x25, #0x0                   	// #0
    2ce0:	b	20d0 <try_dlopen+0x878>
    2ce4:	mov	w0, #0x5                   	// #5
    2ce8:	mov	x24, #0x0                   	// #0
    2cec:	bl	0 <lt__error_string>
    2cf0:	bl	0 <lt__set_last_error>
    2cf4:	ldr	x0, [sp, #408]
    2cf8:	bl	0 <free>
    2cfc:	ldr	x0, [sp, #416]
    2d00:	bl	0 <free>
    2d04:	mov	x0, x24
    2d08:	bl	0 <free>
    2d0c:	ldrb	w0, [x21]
    2d10:	mov	x26, #0x0                   	// #0
    2d14:	cbz	w0, 2d24 <try_dlopen+0x14cc>
    2d18:	mov	x0, x21
    2d1c:	bl	0 <strlen>
    2d20:	mov	x26, x0
    2d24:	ldr	x0, [sp, #128]
    2d28:	add	x1, sp, #0x1b8
    2d2c:	stp	xzr, xzr, [sp, #424]
    2d30:	add	x0, x0, #0x120
    2d34:	str	xzr, [sp, #440]
    2d38:	bl	18 <canonicalize_path>
    2d3c:	cbnz	w0, 2f24 <try_dlopen+0x16cc>
    2d40:	ldr	x0, [sp, #440]
    2d44:	add	x2, sp, #0x1a8
    2d48:	add	x1, sp, #0x1b0
    2d4c:	bl	668 <argzize_path>
    2d50:	cbnz	w0, 2f24 <try_dlopen+0x16cc>
    2d54:	mov	x1, #0x0                   	// #0
    2d58:	mov	x24, #0x0                   	// #0
    2d5c:	mov	x20, #0x0                   	// #0
    2d60:	mov	w25, #0x2f                  	// #47
    2d64:	ldp	x2, x28, [sp, #424]
    2d68:	cbz	x1, 309c <try_dlopen+0x1844>
    2d6c:	add	x2, x28, x2
    2d70:	str	x2, [sp, #136]
    2d74:	cmp	x1, x2
    2d78:	b.cs	2f28 <try_dlopen+0x16d0>  // b.hs, b.nlast
    2d7c:	mov	x0, x1
    2d80:	str	x1, [sp, #120]
    2d84:	bl	0 <strlen>
    2d88:	add	x4, x0, #0x1
    2d8c:	ldr	x1, [sp, #120]
    2d90:	ldr	x2, [sp, #136]
    2d94:	add	x28, x1, x4
    2d98:	cmp	x2, x28
    2d9c:	b.ls	2f28 <try_dlopen+0x16d0>  // b.plast
    2da0:	ldrb	w0, [x28]
    2da4:	cbz	w0, 30a8 <try_dlopen+0x1850>
    2da8:	mov	x0, x28
    2dac:	bl	0 <strlen>
    2db0:	mov	x2, x0
    2db4:	add	x1, x26, x2
    2db8:	add	x0, x1, #0x1
    2dbc:	cmp	x0, x20
    2dc0:	b.cs	2f00 <try_dlopen+0x16a8>  // b.hs, b.nlast
    2dc4:	str	x2, [sp, #120]
    2dc8:	cmp	x2, x20
    2dcc:	b.cs	3054 <try_dlopen+0x17fc>  // b.hs, b.nlast
    2dd0:	mov	x1, x28
    2dd4:	mov	x0, x24
    2dd8:	bl	0 <strcpy>
    2ddc:	ldrb	w0, [x21]
    2de0:	cbz	w0, 2e0c <try_dlopen+0x15b4>
    2de4:	ldr	x2, [sp, #120]
    2de8:	add	x0, x24, x2
    2dec:	ldurb	w1, [x0, #-1]
    2df0:	cmp	w1, #0x2f
    2df4:	b.eq	2e04 <try_dlopen+0x15ac>  // b.none
    2df8:	add	x0, x2, #0x1
    2dfc:	strb	w25, [x24, x2]
    2e00:	add	x0, x24, x0
    2e04:	mov	x1, x21
    2e08:	bl	0 <strcpy>
    2e0c:	ldr	x2, [sp, #104]
    2e10:	add	x1, sp, #0xb8
    2e14:	mov	x0, x24
    2e18:	bl	6f0 <find_handle_callback>
    2e1c:	cbnz	w0, 30b0 <try_dlopen+0x1858>
    2e20:	mov	x1, x28
    2e24:	b	2d64 <try_dlopen+0x150c>
    2e28:	mov	x0, x20
    2e2c:	add	x26, x1, #0x2
    2e30:	str	x3, [sp, #120]
    2e34:	bl	0 <free>
    2e38:	mov	x0, x26
    2e3c:	bl	0 <lt__malloc>
    2e40:	mov	x20, x0
    2e44:	ldr	x3, [sp, #120]
    2e48:	cbnz	x0, 1f6c <try_dlopen+0x714>
    2e4c:	ldr	x1, [sp, #360]
    2e50:	b	24d0 <try_dlopen+0xc78>
    2e54:	add	x1, x1, #0x2
    2e58:	mov	x0, x24
    2e5c:	mov	x24, x1
    2e60:	str	x1, [sp, #120]
    2e64:	str	x3, [sp, #136]
    2e68:	bl	0 <free>
    2e6c:	mov	x0, x24
    2e70:	bl	0 <lt__malloc>
    2e74:	mov	x24, x0
    2e78:	ldr	x3, [sp, #136]
    2e7c:	cbnz	x0, 20e0 <try_dlopen+0x888>
    2e80:	ldr	x28, [sp, #264]
    2e84:	b	2158 <try_dlopen+0x900>
    2e88:	cbz	x4, 2e90 <try_dlopen+0x1638>
    2e8c:	cbnz	x28, 29f0 <try_dlopen+0x1198>
    2e90:	mov	x20, x3
    2e94:	b	2c24 <try_dlopen+0x13cc>
    2e98:	cbz	x3, 2aa8 <try_dlopen+0x1250>
    2e9c:	cbz	x1, 2aa8 <try_dlopen+0x1250>
    2ea0:	mov	x28, x1
    2ea4:	b	259c <try_dlopen+0xd44>
    2ea8:	mov	x0, x24
    2eac:	add	x20, x1, #0x2
    2eb0:	str	x2, [sp, #120]
    2eb4:	bl	0 <free>
    2eb8:	mov	x0, x20
    2ebc:	bl	0 <lt__malloc>
    2ec0:	mov	x24, x0
    2ec4:	ldr	x2, [sp, #120]
    2ec8:	cbnz	x0, 2b90 <try_dlopen+0x1338>
    2ecc:	mov	x24, #0x0                   	// #0
    2ed0:	b	2cf4 <try_dlopen+0x149c>
    2ed4:	add	x1, x1, #0x2
    2ed8:	mov	x0, x28
    2edc:	mov	x26, x1
    2ee0:	bl	0 <free>
    2ee4:	mov	x0, x26
    2ee8:	bl	0 <lt__malloc>
    2eec:	mov	x28, x0
    2ef0:	cbnz	x0, 23b8 <try_dlopen+0xb60>
    2ef4:	mov	x28, #0x0                   	// #0
    2ef8:	ldr	x1, [sp, #312]
    2efc:	b	2940 <try_dlopen+0x10e8>
    2f00:	mov	x0, x24
    2f04:	add	x20, x1, #0x2
    2f08:	str	x2, [sp, #120]
    2f0c:	bl	0 <free>
    2f10:	mov	x0, x20
    2f14:	bl	0 <lt__malloc>
    2f18:	mov	x24, x0
    2f1c:	ldr	x2, [sp, #120]
    2f20:	cbnz	x0, 2dc4 <try_dlopen+0x156c>
    2f24:	mov	x24, #0x0                   	// #0
    2f28:	ldr	x0, [sp, #432]
    2f2c:	bl	0 <free>
    2f30:	ldr	x0, [sp, #440]
    2f34:	bl	0 <free>
    2f38:	mov	x0, x24
    2f3c:	bl	0 <free>
    2f40:	ldp	x25, x26, [sp, #64]
    2f44:	b	1d90 <try_dlopen+0x538>
    2f48:	cbz	x2, 22c8 <try_dlopen+0xa70>
    2f4c:	cbz	x28, 22c8 <try_dlopen+0xa70>
    2f50:	mov	x3, x28
    2f54:	b	221c <try_dlopen+0x9c4>
    2f58:	mov	x0, x20
    2f5c:	add	x24, x1, #0x2
    2f60:	str	x3, [sp, #120]
    2f64:	bl	0 <free>
    2f68:	mov	x0, x24
    2f6c:	bl	0 <lt__malloc>
    2f70:	mov	x20, x0
    2f74:	ldr	x3, [sp, #120]
    2f78:	cbnz	x0, 25c4 <try_dlopen+0xd6c>
    2f7c:	ldr	x1, [sp, #384]
    2f80:	b	2aa8 <try_dlopen+0x1250>
    2f84:	mov	x25, #0x0                   	// #0
    2f88:	b	2a0c <try_dlopen+0x11b4>
    2f8c:	adrp	x3, 0 <lt__alloc_die_callback>
    2f90:	add	x3, x3, #0x0
    2f94:	adrp	x1, 0 <lt__alloc_die_callback>
    2f98:	adrp	x0, 0 <lt__alloc_die_callback>
    2f9c:	add	x3, x3, #0x148
    2fa0:	add	x1, x1, #0x0
    2fa4:	add	x0, x0, #0x0
    2fa8:	mov	w2, #0x495                 	// #1173
    2fac:	stp	x25, x26, [sp, #64]
    2fb0:	stp	x27, x28, [sp, #80]
    2fb4:	bl	0 <__assert_fail>
    2fb8:	add	x1, x1, #0x2
    2fbc:	mov	x0, x3
    2fc0:	mov	x26, x1
    2fc4:	bl	0 <free>
    2fc8:	mov	x0, x26
    2fcc:	bl	0 <lt__malloc>
    2fd0:	mov	x3, x0
    2fd4:	cbnz	x0, 2a20 <try_dlopen+0x11c8>
    2fd8:	b	2c20 <try_dlopen+0x13c8>
    2fdc:	mov	x2, #0x0                   	// #0
    2fe0:	b	2b80 <try_dlopen+0x1328>
    2fe4:	cbz	x2, 2cf4 <try_dlopen+0x149c>
    2fe8:	cbnz	x28, 2b6c <try_dlopen+0x1314>
    2fec:	b	2cf4 <try_dlopen+0x149c>
    2ff0:	cbz	x4, 2940 <try_dlopen+0x10e8>
    2ff4:	cbnz	x1, 2390 <try_dlopen+0xb38>
    2ff8:	b	2940 <try_dlopen+0x10e8>
    2ffc:	mov	x25, #0x0                   	// #0
    3000:	b	23a4 <try_dlopen+0xb4c>
    3004:	adrp	x3, 0 <lt__alloc_die_callback>
    3008:	add	x3, x3, #0x0
    300c:	adrp	x1, 0 <lt__alloc_die_callback>
    3010:	adrp	x0, 0 <lt__alloc_die_callback>
    3014:	add	x3, x3, #0x148
    3018:	add	x1, x1, #0x0
    301c:	add	x0, x0, #0x0
    3020:	mov	w2, #0x4e3                 	// #1251
    3024:	stp	x25, x26, [sp, #64]
    3028:	bl	0 <__assert_fail>
    302c:	adrp	x3, 0 <lt__alloc_die_callback>
    3030:	add	x3, x3, #0x0
    3034:	adrp	x1, 0 <lt__alloc_die_callback>
    3038:	adrp	x0, 0 <lt__alloc_die_callback>
    303c:	add	x3, x3, #0x148
    3040:	add	x1, x1, #0x0
    3044:	add	x0, x0, #0x0
    3048:	mov	w2, #0x4b4                 	// #1204
    304c:	stp	x25, x26, [sp, #64]
    3050:	bl	0 <__assert_fail>
    3054:	ldr	x0, [sp, #128]
    3058:	adrp	x1, 0 <lt__alloc_die_callback>
    305c:	mov	w2, #0x2cd                 	// #717
    3060:	add	x1, x1, #0x0
    3064:	add	x3, x0, #0x108
    3068:	adrp	x0, 0 <lt__alloc_die_callback>
    306c:	add	x0, x0, #0x0
    3070:	bl	0 <__assert_fail>
    3074:	ldr	x0, [sp, #408]
    3078:	bl	0 <free>
    307c:	ldr	x0, [sp, #416]
    3080:	bl	0 <free>
    3084:	mov	x0, x24
    3088:	bl	0 <free>
    308c:	ldp	x25, x26, [sp, #64]
    3090:	b	2000 <try_dlopen+0x7a8>
    3094:	mov	w24, #0x1                   	// #1
    3098:	b	2468 <try_dlopen+0xc10>
    309c:	cbz	x2, 2f28 <try_dlopen+0x16d0>
    30a0:	cbnz	x28, 2da0 <try_dlopen+0x1548>
    30a4:	b	2f28 <try_dlopen+0x16d0>
    30a8:	mov	x2, #0x0                   	// #0
    30ac:	b	2db4 <try_dlopen+0x155c>
    30b0:	ldr	x0, [sp, #432]
    30b4:	bl	0 <free>
    30b8:	ldr	x0, [sp, #440]
    30bc:	bl	0 <free>
    30c0:	mov	x0, x24
    30c4:	bl	0 <free>
    30c8:	ldp	x25, x26, [sp, #64]
    30cc:	b	2000 <try_dlopen+0x7a8>

00000000000030d0 <lt_dlopenadvise>:
    30d0:	stp	x29, x30, [sp, #-80]!
    30d4:	mov	x29, sp
    30d8:	stp	x19, x20, [sp, #16]
    30dc:	mov	x19, x1
    30e0:	mov	x20, x0
    30e4:	str	xzr, [sp, #72]
    30e8:	bl	0 <lt__get_last_error>
    30ec:	cbz	x19, 3114 <lt_dlopenadvise+0x44>
    30f0:	ldrb	w1, [x19]
    30f4:	stp	x21, x22, [sp, #32]
    30f8:	mov	x21, x0
    30fc:	and	w0, w1, #0xc
    3100:	cmp	w0, #0xc
    3104:	b.eq	3210 <lt_dlopenadvise+0x140>  // b.none
    3108:	cbz	x20, 3110 <lt_dlopenadvise+0x40>
    310c:	tbnz	w1, #0, 3140 <lt_dlopenadvise+0x70>
    3110:	ldp	x21, x22, [sp, #32]
    3114:	mov	x1, x20
    3118:	mov	x3, x19
    311c:	add	x0, sp, #0x48
    3120:	mov	x2, #0x0                   	// #0
    3124:	bl	1858 <try_dlopen>
    3128:	ldr	x1, [sp, #72]
    312c:	cmp	w0, #0x0
    3130:	csel	x0, x1, xzr, eq  // eq = none
    3134:	ldp	x19, x20, [sp, #16]
    3138:	ldp	x29, x30, [sp], #80
    313c:	ret
    3140:	mov	x0, x20
    3144:	mov	w1, #0x2e                  	// #46
    3148:	bl	0 <strrchr>
    314c:	mov	x22, x0
    3150:	cbz	x0, 3180 <lt_dlopenadvise+0xb0>
    3154:	str	x23, [sp, #48]
    3158:	adrp	x23, 0 <lt__alloc_die_callback>
    315c:	add	x23, x23, #0x0
    3160:	add	x1, x23, #0x168
    3164:	bl	0 <strcmp>
    3168:	cbz	w0, 31b8 <lt_dlopenadvise+0xe8>
    316c:	add	x1, x23, #0x178
    3170:	mov	x0, x22
    3174:	bl	0 <strcmp>
    3178:	cbz	w0, 31b8 <lt_dlopenadvise+0xe8>
    317c:	ldr	x23, [sp, #48]
    3180:	ldrb	w0, [x20]
    3184:	cbz	w0, 31f8 <lt_dlopenadvise+0x128>
    3188:	adrp	x22, 0 <lt__alloc_die_callback>
    318c:	add	x22, x22, #0x0
    3190:	mov	x1, x20
    3194:	add	x0, sp, #0x48
    3198:	add	x2, x22, #0x168
    319c:	mov	x3, x19
    31a0:	bl	1858 <try_dlopen>
    31a4:	mov	w1, w0
    31a8:	ldr	x0, [sp, #72]
    31ac:	cbz	x0, 31c4 <lt_dlopenadvise+0xf4>
    31b0:	ldp	x21, x22, [sp, #32]
    31b4:	b	3134 <lt_dlopenadvise+0x64>
    31b8:	ldp	x21, x22, [sp, #32]
    31bc:	ldr	x23, [sp, #48]
    31c0:	b	3114 <lt_dlopenadvise+0x44>
    31c4:	cmp	w1, #0x0
    31c8:	b.le	322c <lt_dlopenadvise+0x15c>
    31cc:	str	x23, [sp, #48]
    31d0:	bl	0 <lt__get_last_error>
    31d4:	mov	x23, x0
    31d8:	mov	w0, #0x5                   	// #5
    31dc:	bl	0 <lt__error_string>
    31e0:	cmp	x23, x0
    31e4:	b.eq	3228 <lt_dlopenadvise+0x158>  // b.none
    31e8:	ldp	x21, x22, [sp, #32]
    31ec:	ldr	x23, [sp, #48]
    31f0:	ldr	x0, [sp, #72]
    31f4:	b	3134 <lt_dlopenadvise+0x64>
    31f8:	mov	w0, #0x5                   	// #5
    31fc:	bl	0 <lt__error_string>
    3200:	bl	0 <lt__set_last_error>
    3204:	mov	x0, #0x0                   	// #0
    3208:	ldp	x21, x22, [sp, #32]
    320c:	b	3134 <lt_dlopenadvise+0x64>
    3210:	mov	w0, #0x13                  	// #19
    3214:	bl	0 <lt__error_string>
    3218:	bl	0 <lt__set_last_error>
    321c:	mov	x0, #0x0                   	// #0
    3220:	ldp	x21, x22, [sp, #32]
    3224:	b	3134 <lt_dlopenadvise+0x64>
    3228:	ldr	x23, [sp, #48]
    322c:	mov	x0, x21
    3230:	bl	0 <lt__set_last_error>
    3234:	mov	x1, x20
    3238:	mov	x3, x19
    323c:	add	x2, x22, #0x178
    3240:	add	x0, sp, #0x48
    3244:	bl	1858 <try_dlopen>
    3248:	mov	w1, w0
    324c:	ldr	x0, [sp, #72]
    3250:	cbnz	x0, 31b0 <lt_dlopenadvise+0xe0>
    3254:	cmp	w1, #0x0
    3258:	b.le	31f8 <lt_dlopenadvise+0x128>
    325c:	bl	0 <lt__get_last_error>
    3260:	mov	x19, x0
    3264:	mov	w0, #0x5                   	// #5
    3268:	bl	0 <lt__error_string>
    326c:	cmp	x19, x0
    3270:	b.eq	31f8 <lt_dlopenadvise+0x128>  // b.none
    3274:	ldp	x21, x22, [sp, #32]
    3278:	ldr	x0, [sp, #72]
    327c:	b	3134 <lt_dlopenadvise+0x64>

0000000000003280 <lt_dlopenext>:
    3280:	stp	x29, x30, [sp, #-32]!
    3284:	mov	x29, sp
    3288:	stp	x19, x20, [sp, #16]
    328c:	mov	x20, x0
    3290:	mov	x0, #0x4                   	// #4
    3294:	bl	0 <lt__zalloc>
    3298:	mov	x19, x0
    329c:	cbz	x0, 32d4 <lt_dlopenext+0x54>
    32a0:	ldrb	w2, [x0]
    32a4:	mov	x1, x19
    32a8:	mov	x0, x20
    32ac:	orr	w2, w2, #0x1
    32b0:	strb	w2, [x19]
    32b4:	bl	30d0 <lt_dlopenadvise>
    32b8:	mov	x20, x0
    32bc:	mov	x0, x19
    32c0:	bl	0 <free>
    32c4:	mov	x0, x20
    32c8:	ldp	x19, x20, [sp, #16]
    32cc:	ldp	x29, x30, [sp], #32
    32d0:	ret
    32d4:	mov	x0, x19
    32d8:	mov	x20, #0x0                   	// #0
    32dc:	bl	0 <free>
    32e0:	mov	x0, x20
    32e4:	ldp	x19, x20, [sp, #16]
    32e8:	ldp	x29, x30, [sp], #32
    32ec:	ret

00000000000032f0 <lt_dlopen>:
    32f0:	stp	x29, x30, [sp, #-48]!
    32f4:	mov	x29, sp
    32f8:	str	x19, [sp, #16]
    32fc:	mov	x19, x0
    3300:	str	xzr, [sp, #40]
    3304:	bl	0 <lt__get_last_error>
    3308:	mov	x1, x19
    330c:	add	x0, sp, #0x28
    3310:	mov	x3, #0x0                   	// #0
    3314:	mov	x2, #0x0                   	// #0
    3318:	bl	1858 <try_dlopen>
    331c:	cmp	w0, #0x0
    3320:	ldr	x1, [sp, #40]
    3324:	ldr	x19, [sp, #16]
    3328:	csel	x0, x1, xzr, eq  // eq = none
    332c:	ldp	x29, x30, [sp], #48
    3330:	ret
    3334:	nop

0000000000003338 <lt_dlsym>:
    3338:	stp	x29, x30, [sp, #-208]!
    333c:	mov	x29, sp
    3340:	stp	x21, x22, [sp, #32]
    3344:	cbz	x0, 3594 <lt_dlsym+0x25c>
    3348:	mov	x21, x1
    334c:	cbz	x1, 35a8 <lt_dlsym+0x270>
    3350:	stp	x19, x20, [sp, #16]
    3354:	mov	x19, x0
    3358:	mov	x20, #0x0                   	// #0
    335c:	stp	x23, x24, [sp, #48]
    3360:	ldrb	w0, [x1]
    3364:	cbnz	w0, 3458 <lt_dlsym+0x120>
    3368:	ldr	x24, [x19, #8]
    336c:	ldr	x22, [x24, #8]
    3370:	cbz	x22, 337c <lt_dlsym+0x44>
    3374:	ldrb	w0, [x22]
    3378:	cbnz	w0, 3468 <lt_dlsym+0x130>
    337c:	ldr	x0, [x19, #24]
    3380:	cbz	x0, 347c <lt_dlsym+0x144>
    3384:	ldrb	w1, [x0]
    3388:	cbz	w1, 3394 <lt_dlsym+0x5c>
    338c:	bl	0 <strlen>
    3390:	add	x20, x20, x0
    3394:	add	x0, x20, #0x5
    3398:	cmp	x0, #0x7f
    339c:	b.hi	34f0 <lt_dlsym+0x1b8>  // b.pmore
    33a0:	add	x23, sp, #0x50
    33a4:	mov	x20, x23
    33a8:	ldr	x24, [x24, #56]
    33ac:	str	x25, [sp, #64]
    33b0:	bl	0 <lt__get_last_error>
    33b4:	mov	x25, x0
    33b8:	ldr	x1, [x19, #8]
    33bc:	ldr	x1, [x1, #8]
    33c0:	cbz	x1, 3560 <lt_dlsym+0x228>
    33c4:	mov	x0, x20
    33c8:	bl	0 <stpcpy>
    33cc:	ldr	x1, [x19, #24]
    33d0:	bl	0 <strcpy>
    33d4:	mov	x0, x20
    33d8:	bl	0 <strlen>
    33dc:	adrp	x3, 0 <lt__alloc_die_callback>
    33e0:	add	x3, x3, #0x0
    33e4:	mov	x2, x0
    33e8:	add	x4, x20, x0
    33ec:	add	x0, x0, #0x5
    33f0:	mov	x1, x21
    33f4:	ldr	w5, [x3]
    33f8:	add	x0, x20, x0
    33fc:	str	w5, [x20, x2]
    3400:	ldrb	w2, [x3, #4]
    3404:	strb	w2, [x4, #4]
    3408:	bl	0 <strcpy>
    340c:	ldr	x3, [x19, #8]
    3410:	mov	x2, x20
    3414:	ldr	x1, [x19, #56]
    3418:	mov	x0, x24
    341c:	ldr	x3, [x3, #32]
    3420:	blr	x3
    3424:	mov	x22, x0
    3428:	cbz	x0, 3570 <lt_dlsym+0x238>
    342c:	cmp	x20, x23
    3430:	b.eq	3544 <lt_dlsym+0x20c>  // b.none
    3434:	mov	x0, x20
    3438:	bl	0 <free>
    343c:	mov	x0, x22
    3440:	ldp	x19, x20, [sp, #16]
    3444:	ldp	x21, x22, [sp, #32]
    3448:	ldp	x23, x24, [sp, #48]
    344c:	ldr	x25, [sp, #64]
    3450:	ldp	x29, x30, [sp], #208
    3454:	ret
    3458:	mov	x0, x1
    345c:	bl	0 <strlen>
    3460:	mov	x20, x0
    3464:	b	3368 <lt_dlsym+0x30>
    3468:	mov	x0, x22
    346c:	bl	0 <strlen>
    3470:	add	x20, x20, x0
    3474:	ldr	x0, [x19, #24]
    3478:	cbnz	x0, 3384 <lt_dlsym+0x4c>
    347c:	add	x0, x20, #0x5
    3480:	cmp	x0, #0x7f
    3484:	b.hi	34f0 <lt_dlsym+0x1b8>  // b.pmore
    3488:	add	x23, sp, #0x50
    348c:	ldr	x24, [x24, #56]
    3490:	mov	x20, x23
    3494:	cbz	x22, 351c <lt_dlsym+0x1e4>
    3498:	mov	x1, x22
    349c:	mov	x0, x20
    34a0:	bl	0 <stpcpy>
    34a4:	mov	x1, x21
    34a8:	bl	0 <strcpy>
    34ac:	ldr	x3, [x19, #8]
    34b0:	mov	x0, x24
    34b4:	ldr	x1, [x19, #56]
    34b8:	mov	x2, x20
    34bc:	ldr	x3, [x3, #32]
    34c0:	blr	x3
    34c4:	mov	x22, x0
    34c8:	cmp	x20, x23
    34cc:	b.eq	352c <lt_dlsym+0x1f4>  // b.none
    34d0:	mov	x0, x20
    34d4:	bl	0 <free>
    34d8:	ldp	x19, x20, [sp, #16]
    34dc:	ldp	x23, x24, [sp, #48]
    34e0:	mov	x0, x22
    34e4:	ldp	x21, x22, [sp, #32]
    34e8:	ldp	x29, x30, [sp], #208
    34ec:	ret
    34f0:	add	x0, x20, #0x6
    34f4:	bl	0 <lt__malloc>
    34f8:	mov	x20, x0
    34fc:	cbz	x0, 35bc <lt_dlsym+0x284>
    3500:	ldr	x0, [x19, #8]
    3504:	ldr	x1, [x19, #24]
    3508:	ldr	x24, [x0, #56]
    350c:	cbnz	x1, 3588 <lt_dlsym+0x250>
    3510:	ldr	x22, [x0, #8]
    3514:	add	x23, sp, #0x50
    3518:	cbnz	x22, 3498 <lt_dlsym+0x160>
    351c:	mov	x1, x21
    3520:	mov	x0, x20
    3524:	bl	0 <strcpy>
    3528:	b	34ac <lt_dlsym+0x174>
    352c:	mov	x0, x22
    3530:	ldp	x19, x20, [sp, #16]
    3534:	ldp	x21, x22, [sp, #32]
    3538:	ldp	x23, x24, [sp, #48]
    353c:	ldp	x29, x30, [sp], #208
    3540:	ret
    3544:	mov	x0, x22
    3548:	ldp	x19, x20, [sp, #16]
    354c:	ldp	x21, x22, [sp, #32]
    3550:	ldp	x23, x24, [sp, #48]
    3554:	ldr	x25, [sp, #64]
    3558:	ldp	x29, x30, [sp], #208
    355c:	ret
    3560:	ldr	x1, [x19, #24]
    3564:	mov	x0, x20
    3568:	bl	0 <strcpy>
    356c:	b	33d4 <lt_dlsym+0x9c>
    3570:	mov	x0, x25
    3574:	bl	0 <lt__set_last_error>
    3578:	ldr	x0, [x19, #8]
    357c:	ldr	x25, [sp, #64]
    3580:	ldr	x22, [x0, #8]
    3584:	b	3494 <lt_dlsym+0x15c>
    3588:	add	x23, sp, #0x50
    358c:	str	x25, [sp, #64]
    3590:	b	33b0 <lt_dlsym+0x78>
    3594:	mov	x22, #0x0                   	// #0
    3598:	mov	w0, #0xc                   	// #12
    359c:	bl	0 <lt__error_string>
    35a0:	bl	0 <lt__set_last_error>
    35a4:	b	34e0 <lt_dlsym+0x1a8>
    35a8:	mov	x22, #0x0                   	// #0
    35ac:	mov	w0, #0xa                   	// #10
    35b0:	bl	0 <lt__error_string>
    35b4:	bl	0 <lt__set_last_error>
    35b8:	b	34e0 <lt_dlsym+0x1a8>
    35bc:	mov	w0, #0xd                   	// #13
    35c0:	mov	x22, #0x0                   	// #0
    35c4:	bl	0 <lt__error_string>
    35c8:	bl	0 <lt__set_last_error>
    35cc:	ldp	x19, x20, [sp, #16]
    35d0:	ldp	x23, x24, [sp, #48]
    35d4:	b	34e0 <lt_dlsym+0x1a8>

00000000000035d8 <loader_init_callback>:
    35d8:	stp	x29, x30, [sp, #-48]!
    35dc:	adrp	x1, 0 <lt__alloc_die_callback>
    35e0:	add	x1, x1, #0x0
    35e4:	mov	x29, sp
    35e8:	stp	x19, x20, [sp, #16]
    35ec:	str	x21, [sp, #32]
    35f0:	bl	3338 <lt_dlsym>
    35f4:	cbz	x0, 3654 <loader_init_callback+0x7c>
    35f8:	mov	x1, x0
    35fc:	mov	x0, #0x0                   	// #0
    3600:	blr	x1
    3604:	cmp	x0, #0x0
    3608:	mov	x20, x0
    360c:	cset	w21, ne  // ne = any
    3610:	mov	x0, x20
    3614:	bl	0 <lt_dlloader_add>
    3618:	cmp	w0, #0x0
    361c:	mov	w19, w0
    3620:	ccmp	w21, #0x0, #0x0, eq  // eq = none
    3624:	b.eq	3684 <loader_init_callback+0xac>  // b.none
    3628:	cbnz	w0, 3640 <loader_init_callback+0x68>
    362c:	ldr	x1, [x20, #40]
    3630:	cbz	x1, 3640 <loader_init_callback+0x68>
    3634:	ldr	x0, [x20, #56]
    3638:	blr	x1
    363c:	cbnz	w0, 3660 <loader_init_callback+0x88>
    3640:	mov	w0, w19
    3644:	ldp	x19, x20, [sp, #16]
    3648:	ldr	x21, [sp, #32]
    364c:	ldp	x29, x30, [sp], #48
    3650:	ret
    3654:	mov	w21, #0x0                   	// #0
    3658:	mov	x20, #0x0                   	// #0
    365c:	b	3610 <loader_init_callback+0x38>
    3660:	mov	w19, #0x1                   	// #1
    3664:	mov	w0, #0x3                   	// #3
    3668:	bl	0 <lt__error_string>
    366c:	bl	0 <lt__set_last_error>
    3670:	mov	w0, w19
    3674:	ldp	x19, x20, [sp, #16]
    3678:	ldr	x21, [sp, #32]
    367c:	ldp	x29, x30, [sp], #48
    3680:	ret
    3684:	adrp	x3, 0 <lt__alloc_die_callback>
    3688:	add	x3, x3, #0x0
    368c:	adrp	x1, 0 <lt__alloc_die_callback>
    3690:	adrp	x0, 0 <lt__alloc_die_callback>
    3694:	add	x3, x3, #0x88
    3698:	add	x1, x1, #0x0
    369c:	add	x0, x0, #0x0
    36a0:	mov	w2, #0xc7                  	// #199
    36a4:	bl	0 <__assert_fail>

00000000000036a8 <lt_dlerror>:
    36a8:	stp	x29, x30, [sp, #-32]!
    36ac:	mov	x29, sp
    36b0:	str	x19, [sp, #16]
    36b4:	bl	0 <lt__get_last_error>
    36b8:	mov	x19, x0
    36bc:	mov	x0, #0x0                   	// #0
    36c0:	bl	0 <lt__set_last_error>
    36c4:	mov	x0, x19
    36c8:	ldr	x19, [sp, #16]
    36cc:	ldp	x29, x30, [sp], #32
    36d0:	ret
    36d4:	nop

00000000000036d8 <lt_dladdsearchdir>:
    36d8:	stp	x29, x30, [sp, #-80]!
    36dc:	mov	x29, sp
    36e0:	stp	x19, x20, [sp, #16]
    36e4:	cbz	x0, 37ac <lt_dladdsearchdir+0xd4>
    36e8:	ldrb	w1, [x0]
    36ec:	mov	x19, x0
    36f0:	mov	w20, #0x0                   	// #0
    36f4:	cbnz	w1, 3708 <lt_dladdsearchdir+0x30>
    36f8:	mov	w0, w20
    36fc:	ldp	x19, x20, [sp, #16]
    3700:	ldp	x29, x30, [sp], #80
    3704:	ret
    3708:	add	x1, sp, #0x38
    370c:	stp	xzr, xzr, [sp, #56]
    3710:	str	xzr, [sp, #72]
    3714:	bl	18 <canonicalize_path>
    3718:	mov	w20, w0
    371c:	cbnz	w0, 37c0 <lt_dladdsearchdir+0xe8>
    3720:	ldr	x0, [sp, #56]
    3724:	str	x21, [sp, #32]
    3728:	cbz	x0, 3844 <lt_dladdsearchdir+0x16c>
    372c:	ldrb	w0, [x0]
    3730:	cbz	w0, 3844 <lt_dladdsearchdir+0x16c>
    3734:	adrp	x21, 0 <lt__alloc_die_callback>
    3738:	add	x21, x21, #0x0
    373c:	ldr	x0, [x21, #16]
    3740:	cbz	x0, 37d8 <lt_dladdsearchdir+0x100>
    3744:	add	x2, sp, #0x48
    3748:	add	x1, sp, #0x40
    374c:	bl	668 <argzize_path>
    3750:	cbnz	w0, 3818 <lt_dladdsearchdir+0x140>
    3754:	mov	x0, x19
    3758:	bl	0 <strlen>
    375c:	mov	x2, x19
    3760:	add	x3, x0, #0x1
    3764:	add	x1, sp, #0x48
    3768:	add	x0, sp, #0x40
    376c:	bl	0 <argz_append>
    3770:	mov	w20, w0
    3774:	cbnz	w0, 3800 <lt_dladdsearchdir+0x128>
    3778:	ldp	x0, x1, [sp, #64]
    377c:	mov	w2, #0x3a                  	// #58
    3780:	bl	0 <argz_stringify>
    3784:	ldr	x0, [x21, #16]
    3788:	ldr	x1, [sp, #64]
    378c:	cmp	x0, x1
    3790:	b.eq	3820 <lt_dladdsearchdir+0x148>  // b.none
    3794:	bl	0 <free>
    3798:	ldp	x0, x1, [sp, #56]
    379c:	str	x1, [x21, #16]
    37a0:	bl	0 <free>
    37a4:	ldr	x21, [sp, #32]
    37a8:	b	36f8 <lt_dladdsearchdir+0x20>
    37ac:	mov	w20, #0x0                   	// #0
    37b0:	mov	w0, w20
    37b4:	ldp	x19, x20, [sp, #16]
    37b8:	ldp	x29, x30, [sp], #80
    37bc:	ret
    37c0:	ldr	x0, [sp, #64]
    37c4:	mov	w20, #0x1                   	// #1
    37c8:	bl	0 <free>
    37cc:	ldr	x0, [sp, #56]
    37d0:	bl	0 <free>
    37d4:	b	36f8 <lt_dladdsearchdir+0x20>
    37d8:	mov	x0, x19
    37dc:	bl	0 <lt__strdup>
    37e0:	str	x0, [x21, #16]
    37e4:	cbz	x0, 3818 <lt_dladdsearchdir+0x140>
    37e8:	ldr	x0, [sp, #64]
    37ec:	bl	0 <free>
    37f0:	ldr	x0, [sp, #56]
    37f4:	bl	0 <free>
    37f8:	ldr	x21, [sp, #32]
    37fc:	b	36f8 <lt_dladdsearchdir+0x20>
    3800:	cmp	w0, #0xc
    3804:	b.eq	3834 <lt_dladdsearchdir+0x15c>  // b.none
    3808:	mov	w0, #0x0                   	// #0
    380c:	bl	0 <lt__error_string>
    3810:	bl	0 <lt__set_last_error>
    3814:	nop
    3818:	ldr	x0, [sp, #64]
    381c:	mov	w20, #0x1                   	// #1
    3820:	bl	0 <free>
    3824:	ldr	x0, [sp, #56]
    3828:	bl	0 <free>
    382c:	ldr	x21, [sp, #32]
    3830:	b	36f8 <lt_dladdsearchdir+0x20>
    3834:	mov	w0, #0xb                   	// #11
    3838:	bl	0 <lt__error_string>
    383c:	bl	0 <lt__set_last_error>
    3840:	b	3818 <lt_dladdsearchdir+0x140>
    3844:	adrp	x3, 0 <lt__alloc_die_callback>
    3848:	add	x3, x3, #0x0
    384c:	adrp	x1, 0 <lt__alloc_die_callback>
    3850:	adrp	x0, 0 <lt__alloc_die_callback>
    3854:	add	x3, x3, #0x180
    3858:	add	x1, x1, #0x0
    385c:	add	x0, x0, #0x0
    3860:	mov	w2, #0x857                 	// #2135
    3864:	bl	0 <__assert_fail>

0000000000003868 <lt_dlinsertsearchdir>:
    3868:	stp	x29, x30, [sp, #-80]!
    386c:	mov	x29, sp
    3870:	stp	x19, x20, [sp, #16]
    3874:	mov	x19, x0
    3878:	mov	x20, x1
    387c:	stp	x21, x22, [sp, #32]
    3880:	cbz	x0, 38b4 <lt_dlinsertsearchdir+0x4c>
    3884:	adrp	x0, 0 <lt__alloc_die_callback>
    3888:	ldr	x21, [x0]
    388c:	cmp	x21, x19
    3890:	b.hi	38f0 <lt_dlinsertsearchdir+0x88>  // b.pmore
    3894:	cbz	x21, 38f0 <lt_dlinsertsearchdir+0x88>
    3898:	ldrb	w0, [x21]
    389c:	cbz	w0, 38f0 <lt_dlinsertsearchdir+0x88>
    38a0:	mov	x0, x21
    38a4:	bl	0 <strlen>
    38a8:	add	x21, x21, x0
    38ac:	cmp	x19, x21
    38b0:	b.cs	38f0 <lt_dlinsertsearchdir+0x88>  // b.hs, b.nlast
    38b4:	cbz	x20, 38d8 <lt_dlinsertsearchdir+0x70>
    38b8:	ldrb	w0, [x20]
    38bc:	mov	w21, #0x0                   	// #0
    38c0:	cbnz	w0, 3914 <lt_dlinsertsearchdir+0xac>
    38c4:	mov	w0, w21
    38c8:	ldp	x19, x20, [sp, #16]
    38cc:	ldp	x21, x22, [sp, #32]
    38d0:	ldp	x29, x30, [sp], #80
    38d4:	ret
    38d8:	mov	w21, #0x0                   	// #0
    38dc:	mov	w0, w21
    38e0:	ldp	x19, x20, [sp, #16]
    38e4:	ldp	x21, x22, [sp, #32]
    38e8:	ldp	x29, x30, [sp], #80
    38ec:	ret
    38f0:	mov	w21, #0x1                   	// #1
    38f4:	mov	w0, #0x12                  	// #18
    38f8:	bl	0 <lt__error_string>
    38fc:	bl	0 <lt__set_last_error>
    3900:	mov	w0, w21
    3904:	ldp	x19, x20, [sp, #16]
    3908:	ldp	x21, x22, [sp, #32]
    390c:	ldp	x29, x30, [sp], #80
    3910:	ret
    3914:	add	x1, sp, #0x38
    3918:	mov	x0, x20
    391c:	stp	xzr, xzr, [sp, #56]
    3920:	str	xzr, [sp, #72]
    3924:	bl	18 <canonicalize_path>
    3928:	mov	w21, w0
    392c:	cbnz	w0, 39e8 <lt_dlinsertsearchdir+0x180>
    3930:	ldr	x0, [sp, #56]
    3934:	cbz	x0, 3a6c <lt_dlinsertsearchdir+0x204>
    3938:	ldrb	w0, [x0]
    393c:	cbz	w0, 3a6c <lt_dlinsertsearchdir+0x204>
    3940:	adrp	x22, 0 <lt__alloc_die_callback>
    3944:	add	x22, x22, #0x0
    3948:	ldr	x0, [x22, #16]
    394c:	cbz	x0, 3a10 <lt_dlinsertsearchdir+0x1a8>
    3950:	add	x2, sp, #0x48
    3954:	add	x1, sp, #0x40
    3958:	bl	668 <argzize_path>
    395c:	cbnz	w0, 39e8 <lt_dlinsertsearchdir+0x180>
    3960:	cbz	x19, 3a38 <lt_dlinsertsearchdir+0x1d0>
    3964:	ldr	x0, [x22, #16]
    3968:	cmp	x19, x0
    396c:	b.cc	3ad8 <lt_dlinsertsearchdir+0x270>  // b.lo, b.ul, b.last
    3970:	sub	x19, x19, x0
    3974:	bl	0 <strlen>
    3978:	cmp	w19, w0
    397c:	b.gt	3ab4 <lt_dlinsertsearchdir+0x24c>
    3980:	ldr	x0, [sp, #64]
    3984:	adds	x2, x0, x19
    3988:	b.eq	3a38 <lt_dlinsertsearchdir+0x1d0>  // b.none
    398c:	mov	x3, x20
    3990:	add	x1, sp, #0x48
    3994:	add	x0, sp, #0x40
    3998:	bl	0 <argz_insert>
    399c:	mov	w21, w0
    39a0:	cbnz	w21, 39d4 <lt_dlinsertsearchdir+0x16c>
    39a4:	ldp	x0, x1, [sp, #64]
    39a8:	mov	w2, #0x3a                  	// #58
    39ac:	bl	0 <argz_stringify>
    39b0:	ldr	x0, [x22, #16]
    39b4:	ldr	x1, [sp, #64]
    39b8:	cmp	x0, x1
    39bc:	b.eq	39f0 <lt_dlinsertsearchdir+0x188>  // b.none
    39c0:	bl	0 <free>
    39c4:	ldp	x0, x1, [sp, #56]
    39c8:	str	x1, [x22, #16]
    39cc:	bl	0 <free>
    39d0:	b	38c4 <lt_dlinsertsearchdir+0x5c>
    39d4:	cmp	w21, #0xc
    39d8:	b.eq	3a5c <lt_dlinsertsearchdir+0x1f4>  // b.none
    39dc:	mov	w0, #0x0                   	// #0
    39e0:	bl	0 <lt__error_string>
    39e4:	bl	0 <lt__set_last_error>
    39e8:	ldr	x0, [sp, #64]
    39ec:	mov	w21, #0x1                   	// #1
    39f0:	bl	0 <free>
    39f4:	ldr	x0, [sp, #56]
    39f8:	bl	0 <free>
    39fc:	mov	w0, w21
    3a00:	ldp	x19, x20, [sp, #16]
    3a04:	ldp	x21, x22, [sp, #32]
    3a08:	ldp	x29, x30, [sp], #80
    3a0c:	ret
    3a10:	cbnz	x19, 3a90 <lt_dlinsertsearchdir+0x228>
    3a14:	mov	x0, x20
    3a18:	bl	0 <lt__strdup>
    3a1c:	str	x0, [x22, #16]
    3a20:	cbz	x0, 39e8 <lt_dlinsertsearchdir+0x180>
    3a24:	ldr	x0, [sp, #64]
    3a28:	bl	0 <free>
    3a2c:	ldr	x0, [sp, #56]
    3a30:	bl	0 <free>
    3a34:	b	38c4 <lt_dlinsertsearchdir+0x5c>
    3a38:	mov	x0, x20
    3a3c:	bl	0 <strlen>
    3a40:	mov	x2, x20
    3a44:	add	x3, x0, #0x1
    3a48:	add	x1, sp, #0x48
    3a4c:	add	x0, sp, #0x40
    3a50:	bl	0 <argz_append>
    3a54:	mov	w21, w0
    3a58:	b	39a0 <lt_dlinsertsearchdir+0x138>
    3a5c:	mov	w0, #0xb                   	// #11
    3a60:	bl	0 <lt__error_string>
    3a64:	bl	0 <lt__set_last_error>
    3a68:	b	39e8 <lt_dlinsertsearchdir+0x180>
    3a6c:	adrp	x3, 0 <lt__alloc_die_callback>
    3a70:	add	x3, x3, #0x0
    3a74:	adrp	x1, 0 <lt__alloc_die_callback>
    3a78:	adrp	x0, 0 <lt__alloc_die_callback>
    3a7c:	add	x3, x3, #0x180
    3a80:	add	x1, x1, #0x0
    3a84:	add	x0, x0, #0x0
    3a88:	mov	w2, #0x857                 	// #2135
    3a8c:	bl	0 <__assert_fail>
    3a90:	adrp	x3, 0 <lt__alloc_die_callback>
    3a94:	add	x3, x3, #0x0
    3a98:	adrp	x1, 0 <lt__alloc_die_callback>
    3a9c:	adrp	x0, 0 <lt__alloc_die_callback>
    3aa0:	add	x3, x3, #0x180
    3aa4:	add	x1, x1, #0x0
    3aa8:	add	x0, x0, #0x0
    3aac:	mov	w2, #0x85c                 	// #2140
    3ab0:	bl	0 <__assert_fail>
    3ab4:	adrp	x3, 0 <lt__alloc_die_callback>
    3ab8:	add	x3, x3, #0x0
    3abc:	adrp	x1, 0 <lt__alloc_die_callback>
    3ac0:	adrp	x0, 0 <lt__alloc_die_callback>
    3ac4:	add	x3, x3, #0x180
    3ac8:	add	x1, x1, #0x0
    3acc:	add	x0, x0, #0x0
    3ad0:	mov	w2, #0x876                 	// #2166
    3ad4:	bl	0 <__assert_fail>
    3ad8:	adrp	x3, 0 <lt__alloc_die_callback>
    3adc:	add	x3, x3, #0x0
    3ae0:	adrp	x1, 0 <lt__alloc_die_callback>
    3ae4:	adrp	x0, 0 <lt__alloc_die_callback>
    3ae8:	add	x3, x3, #0x180
    3aec:	add	x1, x1, #0x0
    3af0:	add	x0, x0, #0x0
    3af4:	mov	w2, #0x875                 	// #2165
    3af8:	bl	0 <__assert_fail>
    3afc:	nop

0000000000003b00 <lt_dlsetsearchpath>:
    3b00:	stp	x29, x30, [sp, #-32]!
    3b04:	mov	x29, sp
    3b08:	stp	x19, x20, [sp, #16]
    3b0c:	adrp	x19, 0 <lt__alloc_die_callback>
    3b10:	add	x19, x19, #0x0
    3b14:	mov	x20, x0
    3b18:	ldr	x0, [x19, #16]
    3b1c:	bl	0 <free>
    3b20:	str	xzr, [x19, #16]
    3b24:	cbz	x20, 3b60 <lt_dlsetsearchpath+0x60>
    3b28:	ldrb	w1, [x20]
    3b2c:	mov	w0, #0x0                   	// #0
    3b30:	cbnz	w1, 3b40 <lt_dlsetsearchpath+0x40>
    3b34:	ldp	x19, x20, [sp, #16]
    3b38:	ldp	x29, x30, [sp], #32
    3b3c:	ret
    3b40:	add	x1, x19, #0x10
    3b44:	mov	x0, x20
    3b48:	bl	18 <canonicalize_path>
    3b4c:	cmp	w0, #0x0
    3b50:	cset	w0, ne  // ne = any
    3b54:	ldp	x19, x20, [sp, #16]
    3b58:	ldp	x29, x30, [sp], #32
    3b5c:	ret
    3b60:	mov	w0, #0x0                   	// #0
    3b64:	ldp	x19, x20, [sp, #16]
    3b68:	ldp	x29, x30, [sp], #32
    3b6c:	ret

0000000000003b70 <lt_dlgetsearchpath>:
    3b70:	adrp	x0, 0 <lt__alloc_die_callback>
    3b74:	ldr	x0, [x0]
    3b78:	ret
    3b7c:	nop

0000000000003b80 <lt_dlmakeresident>:
    3b80:	cbz	x0, 3b9c <lt_dlmakeresident+0x1c>
    3b84:	mov	x1, x0
    3b88:	ldrb	w2, [x0, #36]
    3b8c:	mov	w0, #0x0                   	// #0
    3b90:	orr	w2, w2, #0x1
    3b94:	strb	w2, [x1, #36]
    3b98:	ret
    3b9c:	stp	x29, x30, [sp, #-16]!
    3ba0:	mov	w0, #0xc                   	// #12
    3ba4:	mov	x29, sp
    3ba8:	bl	0 <lt__error_string>
    3bac:	bl	0 <lt__set_last_error>
    3bb0:	mov	w0, #0x1                   	// #1
    3bb4:	ldp	x29, x30, [sp], #16
    3bb8:	ret
    3bbc:	nop

0000000000003bc0 <lt_dlisresident>:
    3bc0:	cbz	x0, 3bd0 <lt_dlisresident+0x10>
    3bc4:	ldrb	w0, [x0, #36]
    3bc8:	and	w0, w0, #0x1
    3bcc:	ret
    3bd0:	stp	x29, x30, [sp, #-16]!
    3bd4:	mov	w0, #0xc                   	// #12
    3bd8:	mov	x29, sp
    3bdc:	bl	0 <lt__error_string>
    3be0:	bl	0 <lt__set_last_error>
    3be4:	mov	w0, #0xffffffff            	// #-1
    3be8:	ldp	x29, x30, [sp], #16
    3bec:	ret

0000000000003bf0 <lt_dlinterface_register>:
    3bf0:	stp	x29, x30, [sp, #-48]!
    3bf4:	mov	x29, sp
    3bf8:	stp	x19, x20, [sp, #16]
    3bfc:	mov	x20, x0
    3c00:	mov	x0, #0x10                  	// #16
    3c04:	str	x21, [sp, #32]
    3c08:	mov	x21, x1
    3c0c:	bl	0 <lt__malloc>
    3c10:	mov	x19, x0
    3c14:	cbz	x0, 3c2c <lt_dlinterface_register+0x3c>
    3c18:	mov	x0, x20
    3c1c:	bl	0 <lt__strdup>
    3c20:	str	x0, [x19]
    3c24:	cbz	x0, 3c40 <lt_dlinterface_register+0x50>
    3c28:	str	x21, [x19, #8]
    3c2c:	mov	x0, x19
    3c30:	ldp	x19, x20, [sp, #16]
    3c34:	ldr	x21, [sp, #32]
    3c38:	ldp	x29, x30, [sp], #48
    3c3c:	ret
    3c40:	mov	x0, x19
    3c44:	mov	x19, #0x0                   	// #0
    3c48:	bl	0 <free>
    3c4c:	b	3c2c <lt_dlinterface_register+0x3c>

0000000000003c50 <lt_dlinterface_free>:
    3c50:	stp	x29, x30, [sp, #-32]!
    3c54:	mov	x29, sp
    3c58:	str	x19, [sp, #16]
    3c5c:	mov	x19, x0
    3c60:	ldr	x0, [x0]
    3c64:	bl	0 <free>
    3c68:	mov	x0, x19
    3c6c:	ldr	x19, [sp, #16]
    3c70:	ldp	x29, x30, [sp], #32
    3c74:	b	0 <free>

0000000000003c78 <lt_dlcaller_set_data>:
    3c78:	stp	x29, x30, [sp, #-64]!
    3c7c:	mov	x29, sp
    3c80:	stp	x21, x22, [sp, #32]
    3c84:	mov	x21, x0
    3c88:	mov	x22, x1
    3c8c:	ldr	x0, [x1, #72]
    3c90:	stp	x19, x20, [sp, #16]
    3c94:	str	x23, [sp, #48]
    3c98:	mov	x23, x2
    3c9c:	cbz	x0, 3d18 <lt_dlcaller_set_data+0xa0>
    3ca0:	ldr	x20, [x0]
    3ca4:	cbz	x20, 3d44 <lt_dlcaller_set_data+0xcc>
    3ca8:	add	x4, x0, #0x10
    3cac:	mov	w19, #0x0                   	// #0
    3cb0:	ldr	x20, [x4], #16
    3cb4:	mov	w7, w19
    3cb8:	add	w19, w19, #0x1
    3cbc:	cbnz	x20, 3cb0 <lt_dlcaller_set_data+0x38>
    3cc0:	mov	x4, x0
    3cc4:	mov	w6, w19
    3cc8:	mov	w3, #0x0                   	// #0
    3ccc:	b	3ce0 <lt_dlcaller_set_data+0x68>
    3cd0:	add	w3, w3, #0x1
    3cd4:	add	x4, x4, #0x10
    3cd8:	cmp	w3, w6
    3cdc:	b.eq	3cf0 <lt_dlcaller_set_data+0x78>  // b.none
    3ce0:	ldr	x5, [x4]
    3ce4:	cmp	x5, x21
    3ce8:	b.ne	3cd0 <lt_dlcaller_set_data+0x58>  // b.any
    3cec:	ldr	x20, [x4, #8]
    3cf0:	cmp	w3, w19
    3cf4:	b.eq	3d58 <lt_dlcaller_set_data+0xe0>  // b.none
    3cf8:	add	x3, x0, w3, sxtw #4
    3cfc:	str	x23, [x3, #8]
    3d00:	mov	x0, x20
    3d04:	ldp	x19, x20, [sp, #16]
    3d08:	ldp	x21, x22, [sp, #32]
    3d0c:	ldr	x23, [sp, #48]
    3d10:	ldp	x29, x30, [sp], #64
    3d14:	ret
    3d18:	mov	x20, #0x0                   	// #0
    3d1c:	mov	x1, #0x20                  	// #32
    3d20:	mov	w19, #0x0                   	// #0
    3d24:	bl	0 <lt__realloc>
    3d28:	cbz	x0, 3d50 <lt_dlcaller_set_data+0xd8>
    3d2c:	sbfiz	x19, x19, #4, #32
    3d30:	str	x0, [x22, #72]
    3d34:	add	x3, x0, x19
    3d38:	str	x21, [x0, x19]
    3d3c:	str	xzr, [x3, #16]
    3d40:	b	3cfc <lt_dlcaller_set_data+0x84>
    3d44:	mov	x1, #0x20                  	// #32
    3d48:	mov	w19, #0x0                   	// #0
    3d4c:	b	3d24 <lt_dlcaller_set_data+0xac>
    3d50:	mov	x20, #0x0                   	// #0
    3d54:	b	3d00 <lt_dlcaller_set_data+0x88>
    3d58:	add	w7, w7, #0x3
    3d5c:	sbfiz	x1, x7, #4, #32
    3d60:	b	3d24 <lt_dlcaller_set_data+0xac>
    3d64:	nop

0000000000003d68 <lt_dlcaller_get_data>:
    3d68:	ldr	x1, [x1, #72]
    3d6c:	mov	x2, x0
    3d70:	cbz	x1, 3d98 <lt_dlcaller_get_data+0x30>
    3d74:	ldr	x0, [x1]
    3d78:	cbnz	x0, 3d88 <lt_dlcaller_get_data+0x20>
    3d7c:	b	3d94 <lt_dlcaller_get_data+0x2c>
    3d80:	ldr	x0, [x1, #16]!
    3d84:	cbz	x0, 3d94 <lt_dlcaller_get_data+0x2c>
    3d88:	cmp	x2, x0
    3d8c:	b.ne	3d80 <lt_dlcaller_get_data+0x18>  // b.any
    3d90:	ldr	x0, [x1, #8]
    3d94:	ret
    3d98:	mov	x0, #0x0                   	// #0
    3d9c:	ret

0000000000003da0 <lt_dlgetinfo>:
    3da0:	cbz	x0, 3dac <lt_dlgetinfo+0xc>
    3da4:	add	x0, x0, #0x10
    3da8:	ret
    3dac:	stp	x29, x30, [sp, #-16]!
    3db0:	mov	w0, #0xc                   	// #12
    3db4:	mov	x29, sp
    3db8:	bl	0 <lt__error_string>
    3dbc:	bl	0 <lt__set_last_error>
    3dc0:	mov	x0, #0x0                   	// #0
    3dc4:	ldp	x29, x30, [sp], #16
    3dc8:	ret
    3dcc:	nop

0000000000003dd0 <lt_dlhandle_iterate>:
    3dd0:	stp	x29, x30, [sp, #-32]!
    3dd4:	mov	x29, sp
    3dd8:	stp	x19, x20, [sp, #16]
    3ddc:	cbz	x0, 3e30 <lt_dlhandle_iterate+0x60>
    3de0:	mov	x20, x0
    3de4:	cbz	x1, 3e24 <lt_dlhandle_iterate+0x54>
    3de8:	ldr	x19, [x1]
    3dec:	cbz	x19, 3e10 <lt_dlhandle_iterate+0x40>
    3df0:	ldr	x2, [x20, #8]
    3df4:	cbz	x2, 3e14 <lt_dlhandle_iterate+0x44>
    3df8:	ldr	x1, [x20]
    3dfc:	mov	x0, x19
    3e00:	blr	x2
    3e04:	cbz	w0, 3e14 <lt_dlhandle_iterate+0x44>
    3e08:	ldr	x19, [x19]
    3e0c:	cbnz	x19, 3df0 <lt_dlhandle_iterate+0x20>
    3e10:	mov	x19, #0x0                   	// #0
    3e14:	mov	x0, x19
    3e18:	ldp	x19, x20, [sp, #16]
    3e1c:	ldp	x29, x30, [sp], #32
    3e20:	ret
    3e24:	adrp	x0, 0 <lt__alloc_die_callback>
    3e28:	ldr	x19, [x0]
    3e2c:	b	3dec <lt_dlhandle_iterate+0x1c>
    3e30:	adrp	x3, 0 <lt__alloc_die_callback>
    3e34:	add	x3, x3, #0x0
    3e38:	adrp	x1, 0 <lt__alloc_die_callback>
    3e3c:	adrp	x0, 0 <lt__alloc_die_callback>
    3e40:	add	x3, x3, #0x198
    3e44:	add	x1, x1, #0x0
    3e48:	add	x0, x0, #0x0
    3e4c:	mov	w2, #0x96a                 	// #2410
    3e50:	bl	0 <__assert_fail>
    3e54:	nop

0000000000003e58 <lt_dlhandle_fetch>:
    3e58:	stp	x29, x30, [sp, #-48]!
    3e5c:	mov	x29, sp
    3e60:	stp	x19, x20, [sp, #16]
    3e64:	mov	x20, x0
    3e68:	mov	x19, #0x0                   	// #0
    3e6c:	stp	x21, x22, [sp, #32]
    3e70:	mov	x22, x1
    3e74:	adrp	x21, 0 <lt__alloc_die_callback>
    3e78:	cbz	x0, 3ef0 <lt_dlhandle_fetch+0x98>
    3e7c:	nop
    3e80:	cmp	x19, #0x0
    3e84:	add	x0, x21, #0x0
    3e88:	csel	x19, x19, x0, ne  // ne = any
    3e8c:	b	3ea8 <lt_dlhandle_fetch+0x50>
    3e90:	ldr	x2, [x20, #8]
    3e94:	cbz	x2, 3ec8 <lt_dlhandle_fetch+0x70>
    3e98:	ldr	x1, [x20]
    3e9c:	mov	x0, x19
    3ea0:	blr	x2
    3ea4:	cbz	w0, 3ec8 <lt_dlhandle_fetch+0x70>
    3ea8:	ldr	x19, [x19]
    3eac:	cbnz	x19, 3e90 <lt_dlhandle_fetch+0x38>
    3eb0:	mov	x19, #0x0                   	// #0
    3eb4:	mov	x0, x19
    3eb8:	ldp	x19, x20, [sp, #16]
    3ebc:	ldp	x21, x22, [sp, #32]
    3ec0:	ldp	x29, x30, [sp], #48
    3ec4:	ret
    3ec8:	ldr	x0, [x19, #24]
    3ecc:	cbz	x0, 3e80 <lt_dlhandle_fetch+0x28>
    3ed0:	mov	x1, x22
    3ed4:	bl	0 <strcmp>
    3ed8:	cbnz	w0, 3e80 <lt_dlhandle_fetch+0x28>
    3edc:	mov	x0, x19
    3ee0:	ldp	x19, x20, [sp, #16]
    3ee4:	ldp	x21, x22, [sp, #32]
    3ee8:	ldp	x29, x30, [sp], #48
    3eec:	ret
    3ef0:	adrp	x3, 0 <lt__alloc_die_callback>
    3ef4:	add	x3, x3, #0x0
    3ef8:	adrp	x1, 0 <lt__alloc_die_callback>
    3efc:	adrp	x0, 0 <lt__alloc_die_callback>
    3f00:	add	x3, x3, #0x1b0
    3f04:	add	x1, x1, #0x0
    3f08:	add	x0, x0, #0x0
    3f0c:	mov	w2, #0x981                 	// #2433
    3f10:	bl	0 <__assert_fail>
    3f14:	nop

0000000000003f18 <lt_dlhandle_map>:
    3f18:	stp	x29, x30, [sp, #-48]!
    3f1c:	adrp	x3, 0 <lt__alloc_die_callback>
    3f20:	mov	x29, sp
    3f24:	stp	x19, x20, [sp, #16]
    3f28:	stp	x21, x22, [sp, #32]
    3f2c:	ldr	x19, [x3]
    3f30:	cbz	x0, 3f9c <lt_dlhandle_map+0x84>
    3f34:	mov	x20, x0
    3f38:	mov	x22, x1
    3f3c:	mov	x21, x2
    3f40:	cbz	x19, 3f88 <lt_dlhandle_map+0x70>
    3f44:	nop
    3f48:	ldr	x3, [x20, #8]
    3f4c:	cbz	x3, 3f68 <lt_dlhandle_map+0x50>
    3f50:	ldr	x1, [x20]
    3f54:	mov	x0, x19
    3f58:	blr	x3
    3f5c:	cbz	w0, 3f68 <lt_dlhandle_map+0x50>
    3f60:	ldr	x19, [x19]
    3f64:	cbnz	x19, 3f48 <lt_dlhandle_map+0x30>
    3f68:	mov	x1, x21
    3f6c:	mov	x0, x19
    3f70:	blr	x22
    3f74:	cbz	w0, 3f40 <lt_dlhandle_map+0x28>
    3f78:	ldp	x19, x20, [sp, #16]
    3f7c:	ldp	x21, x22, [sp, #32]
    3f80:	ldp	x29, x30, [sp], #48
    3f84:	ret
    3f88:	mov	w0, #0x0                   	// #0
    3f8c:	ldp	x19, x20, [sp, #16]
    3f90:	ldp	x21, x22, [sp, #32]
    3f94:	ldp	x29, x30, [sp], #48
    3f98:	ret
    3f9c:	adrp	x3, 0 <lt__alloc_die_callback>
    3fa0:	add	x3, x3, #0x0
    3fa4:	adrp	x1, 0 <lt__alloc_die_callback>
    3fa8:	adrp	x0, 0 <lt__alloc_die_callback>
    3fac:	add	x3, x3, #0x1c8
    3fb0:	add	x1, x1, #0x0
    3fb4:	add	x0, x0, #0x0
    3fb8:	mov	w2, #0x995                 	// #2453
    3fbc:	bl	0 <__assert_fail>

libltdl_libltdl_la-slist.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt__slist_delete>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	cbz	x1, 40 <lt__slist_delete+0x40>
  10:	mov	x19, x0
  14:	mov	x20, x1
  18:	cbz	x0, 30 <lt__slist_delete+0x30>
  1c:	nop
  20:	mov	x0, x19
  24:	ldr	x19, [x19]
  28:	blr	x20
  2c:	cbnz	x19, 20 <lt__slist_delete+0x20>
  30:	mov	x0, #0x0                   	// #0
  34:	ldp	x19, x20, [sp, #16]
  38:	ldp	x29, x30, [sp], #32
  3c:	ret
  40:	adrp	x3, 0 <lt__slist_delete>
  44:	adrp	x1, 0 <lt__slist_delete>
  48:	adrp	x0, 0 <lt__slist_delete>
  4c:	add	x3, x3, #0x0
  50:	add	x1, x1, #0x0
  54:	add	x0, x0, #0x0
  58:	mov	w2, #0x38                  	// #56
  5c:	bl	0 <__assert_fail>

0000000000000060 <lt__slist_remove>:
  60:	stp	x29, x30, [sp, #-48]!
  64:	mov	x29, sp
  68:	stp	x19, x20, [sp, #16]
  6c:	cbz	x1, e0 <lt__slist_remove+0x80>
  70:	mov	x19, x0
  74:	cbz	x0, d0 <lt__slist_remove+0x70>
  78:	ldr	x0, [x0]
  7c:	cbz	x0, d0 <lt__slist_remove+0x70>
  80:	str	x21, [sp, #32]
  84:	mov	x20, x1
  88:	mov	x21, x2
  8c:	mov	x1, x2
  90:	blr	x20
  94:	cbz	x0, c0 <lt__slist_remove+0x60>
  98:	ldr	x1, [x19]
  9c:	ldr	x21, [sp, #32]
  a0:	ldr	x1, [x1]
  a4:	str	x1, [x19]
  a8:	ldp	x19, x20, [sp, #16]
  ac:	ldp	x29, x30, [sp], #48
  b0:	ret
  b4:	mov	x1, x21
  b8:	blr	x20
  bc:	cbnz	x0, 98 <lt__slist_remove+0x38>
  c0:	ldr	x19, [x19]
  c4:	ldr	x0, [x19]
  c8:	cbnz	x0, b4 <lt__slist_remove+0x54>
  cc:	ldr	x21, [sp, #32]
  d0:	mov	x0, #0x0                   	// #0
  d4:	ldp	x19, x20, [sp, #16]
  d8:	ldp	x29, x30, [sp], #48
  dc:	ret
  e0:	adrp	x3, 0 <lt__slist_delete>
  e4:	add	x3, x3, #0x0
  e8:	adrp	x1, 0 <lt__slist_delete>
  ec:	adrp	x0, 0 <lt__slist_delete>
  f0:	add	x3, x3, #0x18
  f4:	add	x1, x1, #0x0
  f8:	add	x0, x0, #0x0
  fc:	mov	w2, #0x53                  	// #83
 100:	str	x21, [sp, #32]
 104:	bl	0 <__assert_fail>

0000000000000108 <lt__slist_find>:
 108:	stp	x29, x30, [sp, #-48]!
 10c:	mov	x29, sp
 110:	stp	x19, x20, [sp, #16]
 114:	str	x21, [sp, #32]
 118:	cbz	x1, 16c <lt__slist_find+0x64>
 11c:	mov	x19, x0
 120:	mov	x20, x1
 124:	mov	x21, x2
 128:	cbnz	x0, 138 <lt__slist_find+0x30>
 12c:	b	158 <lt__slist_find+0x50>
 130:	ldr	x19, [x19]
 134:	cbz	x19, 158 <lt__slist_find+0x50>
 138:	mov	x1, x21
 13c:	mov	x0, x19
 140:	blr	x20
 144:	cbz	x0, 130 <lt__slist_find+0x28>
 148:	ldp	x19, x20, [sp, #16]
 14c:	ldr	x21, [sp, #32]
 150:	ldp	x29, x30, [sp], #48
 154:	ret
 158:	mov	x0, #0x0                   	// #0
 15c:	ldp	x19, x20, [sp, #16]
 160:	ldr	x21, [sp, #32]
 164:	ldp	x29, x30, [sp], #48
 168:	ret
 16c:	adrp	x3, 0 <lt__slist_delete>
 170:	add	x3, x3, #0x0
 174:	adrp	x1, 0 <lt__slist_delete>
 178:	adrp	x0, 0 <lt__slist_delete>
 17c:	add	x3, x3, #0x30
 180:	add	x1, x1, #0x0
 184:	add	x0, x0, #0x0
 188:	mov	w2, #0x7a                  	// #122
 18c:	bl	0 <__assert_fail>

0000000000000190 <lt__slist_concat>:
 190:	cbz	x0, 1ac <lt__slist_concat+0x1c>
 194:	mov	x2, x0
 198:	mov	x3, x2
 19c:	ldr	x2, [x2]
 1a0:	cbnz	x2, 198 <lt__slist_concat+0x8>
 1a4:	str	x1, [x3]
 1a8:	ret
 1ac:	mov	x0, x1
 1b0:	ret
 1b4:	nop

00000000000001b8 <lt__slist_cons>:
 1b8:	cbz	x0, 1d4 <lt__slist_cons+0x1c>
 1bc:	mov	x2, x0
 1c0:	ldr	x0, [x0]
 1c4:	cbnz	x0, 1dc <lt__slist_cons+0x24>
 1c8:	mov	x0, x2
 1cc:	str	x1, [x2]
 1d0:	ret
 1d4:	mov	x0, x1
 1d8:	ret
 1dc:	stp	x29, x30, [sp, #-16]!
 1e0:	adrp	x3, 0 <lt__slist_delete>
 1e4:	add	x3, x3, #0x0
 1e8:	mov	x29, sp
 1ec:	adrp	x1, 0 <lt__slist_delete>
 1f0:	adrp	x0, 0 <lt__slist_delete>
 1f4:	add	x3, x3, #0x40
 1f8:	add	x1, x1, #0x0
 1fc:	add	x0, x0, #0x0
 200:	mov	w2, #0xaf                  	// #175
 204:	bl	0 <__assert_fail>

0000000000000208 <lt__slist_tail>:
 208:	cbz	x0, 214 <lt__slist_tail+0xc>
 20c:	ldr	x0, [x0]
 210:	ret
 214:	mov	x0, #0x0                   	// #0
 218:	ret
 21c:	nop

0000000000000220 <lt__slist_nth>:
 220:	b	22c <lt__slist_nth+0xc>
 224:	ldr	x0, [x0]
 228:	sub	x1, x1, #0x1
 22c:	cmp	x0, #0x0
 230:	ccmp	x1, #0x1, #0x0, ne  // ne = any
 234:	b.hi	224 <lt__slist_nth+0x4>  // b.pmore
 238:	ret
 23c:	nop

0000000000000240 <lt__slist_length>:
 240:	mov	x1, x0
 244:	mov	x0, #0x0                   	// #0
 248:	cbz	x1, 25c <lt__slist_length+0x1c>
 24c:	nop
 250:	ldr	x1, [x1]
 254:	add	x0, x0, #0x1
 258:	cbnz	x1, 250 <lt__slist_length+0x10>
 25c:	ret

0000000000000260 <lt__slist_reverse>:
 260:	cbz	x0, 280 <lt__slist_reverse+0x20>
 264:	mov	x2, #0x0                   	// #0
 268:	b	270 <lt__slist_reverse+0x10>
 26c:	mov	x0, x1
 270:	ldr	x1, [x0]
 274:	str	x2, [x0]
 278:	mov	x2, x0
 27c:	cbnz	x1, 26c <lt__slist_reverse+0xc>
 280:	ret
 284:	nop

0000000000000288 <lt__slist_foreach>:
 288:	stp	x29, x30, [sp, #-48]!
 28c:	mov	x29, sp
 290:	stp	x19, x20, [sp, #16]
 294:	str	x21, [sp, #32]
 298:	cbz	x1, 2d0 <lt__slist_foreach+0x48>
 29c:	mov	x20, x1
 2a0:	mov	x21, x2
 2a4:	cbz	x0, 2c0 <lt__slist_foreach+0x38>
 2a8:	mov	x1, x21
 2ac:	ldr	x19, [x0]
 2b0:	blr	x20
 2b4:	cbnz	x0, 2c0 <lt__slist_foreach+0x38>
 2b8:	mov	x0, x19
 2bc:	cbnz	x0, 2a8 <lt__slist_foreach+0x20>
 2c0:	ldp	x19, x20, [sp, #16]
 2c4:	ldr	x21, [sp, #32]
 2c8:	ldp	x29, x30, [sp], #48
 2cc:	ret
 2d0:	adrp	x3, 0 <lt__slist_delete>
 2d4:	add	x3, x3, #0x0
 2d8:	adrp	x1, 0 <lt__slist_delete>
 2dc:	adrp	x0, 0 <lt__slist_delete>
 2e0:	add	x3, x3, #0x50
 2e4:	add	x1, x1, #0x0
 2e8:	add	x0, x0, #0x0
 2ec:	mov	w2, #0xf6                  	// #246
 2f0:	bl	0 <__assert_fail>
 2f4:	nop

00000000000002f8 <lt__slist_sort>:
 2f8:	cbz	x0, 430 <lt__slist_sort+0x138>
 2fc:	stp	x29, x30, [sp, #-80]!
 300:	mov	x29, sp
 304:	stp	x19, x20, [sp, #16]
 308:	ldr	x19, [x0]
 30c:	cbz	x19, 404 <lt__slist_sort+0x10c>
 310:	ldr	x3, [x19]
 314:	stp	x21, x22, [sp, #32]
 318:	mov	x22, x1
 31c:	str	x23, [sp, #48]
 320:	mov	x1, x0
 324:	mov	x23, x2
 328:	cbnz	x3, 344 <lt__slist_sort+0x4c>
 32c:	b	34c <lt__slist_sort+0x54>
 330:	ldr	x3, [x3]
 334:	mov	x1, x19
 338:	ldr	x4, [x19]
 33c:	mov	x19, x4
 340:	cbz	x3, 34c <lt__slist_sort+0x54>
 344:	ldr	x3, [x3]
 348:	cbnz	x3, 330 <lt__slist_sort+0x38>
 34c:	str	xzr, [x1]
 350:	mov	x2, x23
 354:	mov	x1, x22
 358:	bl	2f8 <lt__slist_sort>
 35c:	mov	x20, x0
 360:	mov	x2, x23
 364:	mov	x0, x19
 368:	mov	x1, x22
 36c:	bl	2f8 <lt__slist_sort>
 370:	cmp	x0, #0x0
 374:	mov	x19, x0
 378:	ccmp	x20, #0x0, #0x4, ne  // ne = any
 37c:	b.eq	3e0 <lt__slist_sort+0xe8>  // b.none
 380:	add	x21, sp, #0x40
 384:	mov	x2, x23
 388:	mov	x1, x19
 38c:	mov	x0, x20
 390:	blr	x22
 394:	cmp	w0, #0x0
 398:	b.le	3c8 <lt__slist_sort+0xd0>
 39c:	str	x19, [x21]
 3a0:	mov	x21, x19
 3a4:	ldr	x0, [x19]
 3a8:	cbz	x0, 3f4 <lt__slist_sort+0xfc>
 3ac:	mov	x19, x0
 3b0:	mov	x2, x23
 3b4:	mov	x1, x19
 3b8:	mov	x0, x20
 3bc:	blr	x22
 3c0:	cmp	w0, #0x0
 3c4:	b.gt	39c <lt__slist_sort+0xa4>
 3c8:	str	x20, [x21]
 3cc:	mov	x21, x20
 3d0:	ldr	x0, [x20]
 3d4:	cbz	x0, 410 <lt__slist_sort+0x118>
 3d8:	mov	x20, x0
 3dc:	b	384 <lt__slist_sort+0x8c>
 3e0:	mov	x0, x20
 3e4:	add	x20, sp, #0x40
 3e8:	cbz	x0, 410 <lt__slist_sort+0x118>
 3ec:	mov	x19, x20
 3f0:	mov	x20, x0
 3f4:	ldp	x21, x22, [sp, #32]
 3f8:	ldr	x23, [sp, #48]
 3fc:	str	x20, [x19]
 400:	ldr	x0, [sp, #64]
 404:	ldp	x19, x20, [sp, #16]
 408:	ldp	x29, x30, [sp], #80
 40c:	ret
 410:	mov	x0, x20
 414:	mov	x20, x19
 418:	mov	x19, x0
 41c:	ldp	x21, x22, [sp, #32]
 420:	ldr	x23, [sp, #48]
 424:	str	x20, [x19]
 428:	ldr	x0, [sp, #64]
 42c:	b	404 <lt__slist_sort+0x10c>
 430:	mov	x0, #0x0                   	// #0
 434:	ret

0000000000000438 <lt__slist_box>:
 438:	stp	x29, x30, [sp, #-32]!
 43c:	mov	x29, sp
 440:	str	x19, [sp, #16]
 444:	mov	x19, x0
 448:	mov	x0, #0x10                  	// #16
 44c:	bl	0 <malloc>
 450:	cbz	x0, 458 <lt__slist_box+0x20>
 454:	stp	xzr, x19, [x0]
 458:	ldr	x19, [sp, #16]
 45c:	ldp	x29, x30, [sp], #32
 460:	ret
 464:	nop

0000000000000468 <lt__slist_unbox>:
 468:	stp	x29, x30, [sp, #-32]!
 46c:	mov	x29, sp
 470:	str	x19, [sp, #16]
 474:	mov	x19, #0x0                   	// #0
 478:	cbz	x0, 484 <lt__slist_unbox+0x1c>
 47c:	ldr	x19, [x0, #8]
 480:	bl	0 <free>
 484:	mov	x0, x19
 488:	ldr	x19, [sp, #16]
 48c:	ldp	x29, x30, [sp], #32
 490:	ret

lt__strl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <lt_strlcat>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	str	x21, [sp, #32]
  10:	cbz	x0, 94 <lt_strlcat+0x94>
  14:	mov	x19, x1
  18:	cbz	x1, d4 <lt_strlcat+0xd4>
  1c:	mov	x20, x2
  20:	cbz	x2, b4 <lt_strlcat+0xb4>
  24:	mov	x21, x0
  28:	bl	0 <strlen>
  2c:	ldrb	w1, [x19]
  30:	add	x3, x21, x0
  34:	cbz	w1, 64 <lt_strlcat+0x64>
  38:	sub	x2, x20, #0x1
  3c:	cmp	x0, x2
  40:	b.cc	50 <lt_strlcat+0x50>  // b.lo, b.ul, b.last
  44:	b	64 <lt_strlcat+0x64>
  48:	cmp	x0, x2
  4c:	b.eq	60 <lt_strlcat+0x60>  // b.none
  50:	strb	w1, [x21, x0]
  54:	add	x0, x0, #0x1
  58:	ldrb	w1, [x19, #1]!
  5c:	cbnz	w1, 48 <lt_strlcat+0x48>
  60:	add	x3, x21, x0
  64:	strb	wzr, [x3]
  68:	ldrb	w1, [x19]
  6c:	cbz	w1, 84 <lt_strlcat+0x84>
  70:	sub	x19, x19, x0
  74:	nop
  78:	add	x0, x0, #0x1
  7c:	ldrb	w1, [x19, x0]
  80:	cbnz	w1, 78 <lt_strlcat+0x78>
  84:	ldp	x19, x20, [sp, #16]
  88:	ldr	x21, [sp, #32]
  8c:	ldp	x29, x30, [sp], #48
  90:	ret
  94:	adrp	x3, 0 <lt_strlcat>
  98:	adrp	x1, 0 <lt_strlcat>
  9c:	adrp	x0, 0 <lt_strlcat>
  a0:	add	x3, x3, #0x0
  a4:	add	x1, x1, #0x0
  a8:	add	x0, x0, #0x0
  ac:	mov	w2, #0x39                  	// #57
  b0:	bl	0 <__assert_fail>
  b4:	adrp	x3, 0 <lt_strlcat>
  b8:	adrp	x1, 0 <lt_strlcat>
  bc:	adrp	x0, 0 <lt_strlcat>
  c0:	add	x3, x3, #0x0
  c4:	add	x1, x1, #0x0
  c8:	add	x0, x0, #0x0
  cc:	mov	w2, #0x3b                  	// #59
  d0:	bl	0 <__assert_fail>
  d4:	adrp	x3, 0 <lt_strlcat>
  d8:	adrp	x1, 0 <lt_strlcat>
  dc:	adrp	x0, 0 <lt_strlcat>
  e0:	add	x3, x3, #0x0
  e4:	add	x1, x1, #0x0
  e8:	add	x0, x0, #0x0
  ec:	mov	w2, #0x3a                  	// #58
  f0:	bl	0 <__assert_fail>
  f4:	nop

00000000000000f8 <lt_strlcpy>:
  f8:	stp	x29, x30, [sp, #-16]!
  fc:	mov	x29, sp
 100:	cbz	x0, 1ac <lt_strlcpy+0xb4>
 104:	cbz	x1, 188 <lt_strlcpy+0x90>
 108:	cbz	x2, 1d0 <lt_strlcpy+0xd8>
 10c:	ldrb	w3, [x1]
 110:	mov	x5, x0
 114:	cbz	w3, 17c <lt_strlcpy+0x84>
 118:	subs	x0, x2, #0x1
 11c:	mov	x4, x1
 120:	mov	x2, #0x0                   	// #0
 124:	b.ne	134 <lt_strlcpy+0x3c>  // b.any
 128:	b	150 <lt_strlcpy+0x58>
 12c:	cmp	x2, x0
 130:	b.eq	174 <lt_strlcpy+0x7c>  // b.none
 134:	strb	w3, [x5, x2]
 138:	add	x2, x2, #0x1
 13c:	add	x4, x1, x2
 140:	ldrb	w3, [x1, x2]
 144:	cbnz	w3, 12c <lt_strlcpy+0x34>
 148:	add	x5, x5, x2
 14c:	mov	x0, x2
 150:	strb	wzr, [x5]
 154:	ldrb	w1, [x4]
 158:	cbz	w1, 16c <lt_strlcpy+0x74>
 15c:	sub	x4, x4, x0
 160:	add	x0, x0, #0x1
 164:	ldrb	w1, [x4, x0]
 168:	cbnz	w1, 160 <lt_strlcpy+0x68>
 16c:	ldp	x29, x30, [sp], #16
 170:	ret
 174:	add	x5, x5, x0
 178:	b	150 <lt_strlcpy+0x58>
 17c:	mov	x4, x1
 180:	mov	x0, #0x0                   	// #0
 184:	b	150 <lt_strlcpy+0x58>
 188:	adrp	x3, 0 <lt_strlcat>
 18c:	add	x3, x3, #0x0
 190:	adrp	x1, 0 <lt_strlcat>
 194:	adrp	x0, 0 <lt_strlcat>
 198:	add	x3, x3, #0x10
 19c:	add	x1, x1, #0x0
 1a0:	add	x0, x0, #0x0
 1a4:	mov	w2, #0x6a                  	// #106
 1a8:	bl	0 <__assert_fail>
 1ac:	adrp	x3, 0 <lt_strlcat>
 1b0:	add	x3, x3, #0x0
 1b4:	adrp	x1, 0 <lt_strlcat>
 1b8:	adrp	x0, 0 <lt_strlcat>
 1bc:	add	x3, x3, #0x10
 1c0:	add	x1, x1, #0x0
 1c4:	add	x0, x0, #0x0
 1c8:	mov	w2, #0x69                  	// #105
 1cc:	bl	0 <__assert_fail>
 1d0:	adrp	x3, 0 <lt_strlcat>
 1d4:	add	x3, x3, #0x0
 1d8:	adrp	x1, 0 <lt_strlcat>
 1dc:	adrp	x0, 0 <lt_strlcat>
 1e0:	add	x3, x3, #0x10
 1e4:	add	x1, x1, #0x0
 1e8:	add	x0, x0, #0x0
 1ec:	mov	w2, #0x6b                  	// #107
 1f0:	bl	0 <__assert_fail>

libltdlS.o:     file format elf64-littleaarch64


dlopen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <vl_exit>:
   0:	adrp	x1, 0 <vl_exit>
   4:	mov	w0, #0x0                   	// #0
   8:	str	xzr, [x1]
   c:	ret

0000000000000010 <vm_open>:
  10:	stp	x29, x30, [sp, #-32]!
  14:	mov	x0, x1
  18:	mov	w1, #0x1                   	// #1
  1c:	mov	x29, sp
  20:	str	x19, [sp, #16]
  24:	cbz	x2, 38 <vm_open+0x28>
  28:	ldrb	w3, [x2]
  2c:	mov	w2, #0x101                 	// #257
  30:	tst	x3, #0x4
  34:	csel	w1, w1, w2, eq  // eq = none
  38:	bl	0 <dlopen>
  3c:	mov	x19, x0
  40:	cbz	x0, 54 <vm_open+0x44>
  44:	mov	x0, x19
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret
  54:	bl	0 <dlerror>
  58:	bl	0 <lt__set_last_error>
  5c:	mov	x0, x19
  60:	ldr	x19, [sp, #16]
  64:	ldp	x29, x30, [sp], #32
  68:	ret
  6c:	nop

0000000000000070 <vm_close>:
  70:	stp	x29, x30, [sp, #-16]!
  74:	mov	x0, x1
  78:	mov	x29, sp
  7c:	bl	0 <dlclose>
  80:	cbnz	w0, 8c <vm_close+0x1c>
  84:	ldp	x29, x30, [sp], #16
  88:	ret
  8c:	bl	0 <dlerror>
  90:	bl	0 <lt__set_last_error>
  94:	mov	w0, #0x1                   	// #1
  98:	ldp	x29, x30, [sp], #16
  9c:	ret

00000000000000a0 <vm_sym>:
  a0:	stp	x29, x30, [sp, #-32]!
  a4:	mov	x0, x1
  a8:	mov	x1, x2
  ac:	mov	x29, sp
  b0:	str	x19, [sp, #16]
  b4:	bl	0 <dlsym>
  b8:	mov	x19, x0
  bc:	cbz	x0, d0 <vm_sym+0x30>
  c0:	mov	x0, x19
  c4:	ldr	x19, [sp, #16]
  c8:	ldp	x29, x30, [sp], #32
  cc:	ret
  d0:	bl	0 <dlerror>
  d4:	bl	0 <lt__set_last_error>
  d8:	mov	x0, x19
  dc:	ldr	x19, [sp, #16]
  e0:	ldp	x29, x30, [sp], #32
  e4:	ret

00000000000000e8 <dlopen_LTX_get_vtable>:
  e8:	stp	x29, x30, [sp, #-32]!
  ec:	mov	x29, sp
  f0:	stp	x19, x20, [sp, #16]
  f4:	adrp	x20, 0 <vl_exit>
  f8:	mov	x19, x0
  fc:	ldr	x0, [x20]
 100:	cbz	x0, 16c <dlopen_LTX_get_vtable+0x84>
 104:	ldr	x1, [x0]
 108:	cbz	x1, 124 <dlopen_LTX_get_vtable+0x3c>
 10c:	ldr	x1, [x0, #56]
 110:	cmp	x1, x19
 114:	b.ne	188 <dlopen_LTX_get_vtable+0xa0>  // b.any
 118:	ldp	x19, x20, [sp, #16]
 11c:	ldp	x29, x30, [sp], #32
 120:	ret
 124:	adrp	x5, 0 <vl_exit>
 128:	adrp	x4, 0 <vl_exit>
 12c:	add	x5, x5, #0x0
 130:	add	x4, x4, #0x0
 134:	adrp	x3, 0 <vl_exit>
 138:	adrp	x2, 0 <vl_exit>
 13c:	add	x3, x3, #0x0
 140:	add	x2, x2, #0x0
 144:	adrp	x1, 0 <vl_exit>
 148:	add	x1, x1, #0x0
 14c:	str	x5, [x0]
 150:	stp	x4, x3, [x0, #16]
 154:	str	x2, [x0, #32]
 158:	stp	x1, x19, [x0, #48]
 15c:	str	wzr, [x0, #64]
 160:	ldp	x19, x20, [sp, #16]
 164:	ldp	x29, x30, [sp], #32
 168:	ret
 16c:	mov	x0, #0x48                  	// #72
 170:	bl	0 <lt__zalloc>
 174:	str	x0, [x20]
 178:	cbnz	x0, 104 <dlopen_LTX_get_vtable+0x1c>
 17c:	ldp	x19, x20, [sp, #16]
 180:	ldp	x29, x30, [sp], #32
 184:	ret
 188:	mov	w0, #0x3                   	// #3
 18c:	bl	0 <lt__error_string>
 190:	bl	0 <lt__set_last_error>
 194:	mov	x0, #0x0                   	// #0
 198:	ldp	x19, x20, [sp, #16]
 19c:	ldp	x29, x30, [sp], #32
 1a0:	ret
