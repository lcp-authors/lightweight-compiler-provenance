
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//print_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000b28 <_init>:
 b28:	stp	x29, x30, [sp, #-16]!
 b2c:	mov	x29, sp
 b30:	bl	cb0 <call_weak_fn>
 b34:	ldp	x29, x30, [sp], #16
 b38:	ret

Disassembly of section .plt:

0000000000000b40 <.plt>:
 b40:	stp	x16, x30, [sp, #-16]!
 b44:	adrp	x16, 11000 <__FRAME_END__+0xfa0c>
 b48:	ldr	x17, [x16, #4088]
 b4c:	add	x16, x16, #0xff8
 b50:	br	x17
 b54:	nop
 b58:	nop
 b5c:	nop

0000000000000b60 <all_digits@plt>:
 b60:	adrp	x16, 12000 <all_digits>
 b64:	ldr	x17, [x16]
 b68:	add	x16, x16, #0x0
 b6c:	br	x17

0000000000000b70 <strlen@plt>:
 b70:	adrp	x16, 12000 <all_digits>
 b74:	ldr	x17, [x16, #8]
 b78:	add	x16, x16, #0x8
 b7c:	br	x17

0000000000000b80 <fputs@plt>:
 b80:	adrp	x16, 12000 <all_digits>
 b84:	ldr	x17, [x16, #16]
 b88:	add	x16, x16, #0x10
 b8c:	br	x17

0000000000000b90 <dup@plt>:
 b90:	adrp	x16, 12000 <all_digits>
 b94:	ldr	x17, [x16, #24]
 b98:	add	x16, x16, #0x18
 b9c:	br	x17

0000000000000ba0 <__cxa_finalize@plt>:
 ba0:	adrp	x16, 12000 <all_digits>
 ba4:	ldr	x17, [x16, #32]
 ba8:	add	x16, x16, #0x20
 bac:	br	x17

0000000000000bb0 <fputc@plt>:
 bb0:	adrp	x16, 12000 <all_digits>
 bb4:	ldr	x17, [x16, #40]
 bb8:	add	x16, x16, #0x28
 bbc:	br	x17

0000000000000bc0 <make_word@plt>:
 bc0:	adrp	x16, 12000 <all_digits>
 bc4:	ldr	x17, [x16, #48]
 bc8:	add	x16, x16, #0x30
 bcc:	br	x17

0000000000000bd0 <fclose@plt>:
 bd0:	adrp	x16, 12000 <all_digits>
 bd4:	ldr	x17, [x16, #56]
 bd8:	add	x16, x16, #0x38
 bdc:	br	x17

0000000000000be0 <builtin_help@plt>:
 be0:	adrp	x16, 12000 <all_digits>
 be4:	ldr	x17, [x16, #64]
 be8:	add	x16, x16, #0x40
 bec:	br	x17

0000000000000bf0 <fdopen@plt>:
 bf0:	adrp	x16, 12000 <all_digits>
 bf4:	ldr	x17, [x16, #72]
 bf8:	add	x16, x16, #0x48
 bfc:	br	x17

0000000000000c00 <builtin_usage@plt>:
 c00:	adrp	x16, 12000 <all_digits>
 c04:	ldr	x17, [x16, #80]
 c08:	add	x16, x16, #0x50
 c0c:	br	x17

0000000000000c10 <__gmon_start__@plt>:
 c10:	adrp	x16, 12000 <all_digits>
 c14:	ldr	x17, [x16, #88]
 c18:	add	x16, x16, #0x58
 c1c:	br	x17

0000000000000c20 <ansicstr@plt>:
 c20:	adrp	x16, 12000 <all_digits>
 c24:	ldr	x17, [x16, #96]
 c28:	add	x16, x16, #0x60
 c2c:	br	x17

0000000000000c30 <dispose_words@plt>:
 c30:	adrp	x16, 12000 <all_digits>
 c34:	ldr	x17, [x16, #104]
 c38:	add	x16, x16, #0x68
 c3c:	br	x17

0000000000000c40 <free@plt>:
 c40:	adrp	x16, 12000 <all_digits>
 c44:	ldr	x17, [x16, #112]
 c48:	add	x16, x16, #0x70
 c4c:	br	x17

0000000000000c50 <internal_getopt@plt>:
 c50:	adrp	x16, 12000 <all_digits>
 c54:	ldr	x17, [x16, #120]
 c58:	add	x16, x16, #0x78
 c5c:	br	x17

0000000000000c60 <reset_internal_getopt@plt>:
 c60:	adrp	x16, 12000 <all_digits>
 c64:	ldr	x17, [x16, #128]
 c68:	add	x16, x16, #0x80
 c6c:	br	x17

0000000000000c70 <fflush@plt>:
 c70:	adrp	x16, 12000 <all_digits>
 c74:	ldr	x17, [x16, #136]
 c78:	add	x16, x16, #0x88
 c7c:	br	x17

0000000000000c80 <legal_number@plt>:
 c80:	adrp	x16, 12000 <all_digits>
 c84:	ldr	x17, [x16, #144]
 c88:	add	x16, x16, #0x90
 c8c:	br	x17

0000000000000c90 <printf_builtin@plt>:
 c90:	adrp	x16, 12000 <all_digits>
 c94:	ldr	x17, [x16, #152]
 c98:	add	x16, x16, #0x98
 c9c:	br	x17

0000000000000ca0 <make_word_list@plt>:
 ca0:	adrp	x16, 12000 <all_digits>
 ca4:	ldr	x17, [x16, #160]
 ca8:	add	x16, x16, #0xa0
 cac:	br	x17

Disassembly of section .text:

0000000000000cb0 <call_weak_fn>:
     cb0:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
     cb4:	ldr	x0, [x0, #4040]
     cb8:	cbz	x0, cc0 <call_weak_fn+0x10>
     cbc:	b	c10 <__gmon_start__@plt>
     cc0:	ret

0000000000000cc4 <deregister_tm_clones>:
     cc4:	stp	x29, x30, [sp, #-32]!
     cc8:	mov	x29, sp
     ccc:	adrp	x0, 12000 <all_digits>
     cd0:	add	x0, x0, #0x110
     cd4:	str	x0, [sp, #24]
     cd8:	ldr	x0, [sp, #24]
     cdc:	str	x0, [sp, #24]
     ce0:	ldr	x1, [sp, #24]
     ce4:	adrp	x0, 12000 <all_digits>
     ce8:	add	x0, x0, #0x110
     cec:	cmp	x1, x0
     cf0:	b.eq	d28 <deregister_tm_clones+0x64>  // b.none
     cf4:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
     cf8:	ldr	x0, [x0, #4008]
     cfc:	str	x0, [sp, #16]
     d00:	ldr	x0, [sp, #16]
     d04:	str	x0, [sp, #16]
     d08:	ldr	x0, [sp, #16]
     d0c:	cmp	x0, #0x0
     d10:	b.eq	d2c <deregister_tm_clones+0x68>  // b.none
     d14:	ldr	x1, [sp, #16]
     d18:	adrp	x0, 12000 <all_digits>
     d1c:	add	x0, x0, #0x110
     d20:	blr	x1
     d24:	b	d2c <deregister_tm_clones+0x68>
     d28:	nop
     d2c:	ldp	x29, x30, [sp], #32
     d30:	ret

0000000000000d34 <register_tm_clones>:
     d34:	stp	x29, x30, [sp, #-48]!
     d38:	mov	x29, sp
     d3c:	adrp	x0, 12000 <all_digits>
     d40:	add	x0, x0, #0x110
     d44:	str	x0, [sp, #40]
     d48:	ldr	x0, [sp, #40]
     d4c:	str	x0, [sp, #40]
     d50:	ldr	x1, [sp, #40]
     d54:	adrp	x0, 12000 <all_digits>
     d58:	add	x0, x0, #0x110
     d5c:	sub	x0, x1, x0
     d60:	asr	x0, x0, #3
     d64:	lsr	x1, x0, #63
     d68:	add	x0, x1, x0
     d6c:	asr	x0, x0, #1
     d70:	str	x0, [sp, #32]
     d74:	ldr	x0, [sp, #32]
     d78:	cmp	x0, #0x0
     d7c:	b.eq	db8 <register_tm_clones+0x84>  // b.none
     d80:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
     d84:	ldr	x0, [x0, #4064]
     d88:	str	x0, [sp, #24]
     d8c:	ldr	x0, [sp, #24]
     d90:	str	x0, [sp, #24]
     d94:	ldr	x0, [sp, #24]
     d98:	cmp	x0, #0x0
     d9c:	b.eq	dbc <register_tm_clones+0x88>  // b.none
     da0:	ldr	x2, [sp, #24]
     da4:	ldr	x1, [sp, #32]
     da8:	adrp	x0, 12000 <all_digits>
     dac:	add	x0, x0, #0x110
     db0:	blr	x2
     db4:	b	dbc <register_tm_clones+0x88>
     db8:	nop
     dbc:	ldp	x29, x30, [sp], #48
     dc0:	ret

0000000000000dc4 <__do_global_dtors_aux>:
     dc4:	stp	x29, x30, [sp, #-16]!
     dc8:	mov	x29, sp
     dcc:	adrp	x0, 12000 <all_digits>
     dd0:	add	x0, x0, #0x110
     dd4:	ldrb	w0, [x0]
     dd8:	and	x0, x0, #0xff
     ddc:	cmp	x0, #0x0
     de0:	b.ne	e1c <__do_global_dtors_aux+0x58>  // b.any
     de4:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
     de8:	ldr	x0, [x0, #4016]
     dec:	cmp	x0, #0x0
     df0:	b.eq	e04 <__do_global_dtors_aux+0x40>  // b.none
     df4:	adrp	x0, 12000 <all_digits>
     df8:	add	x0, x0, #0xa8
     dfc:	ldr	x0, [x0]
     e00:	bl	ba0 <__cxa_finalize@plt>
     e04:	bl	cc4 <deregister_tm_clones>
     e08:	adrp	x0, 12000 <all_digits>
     e0c:	add	x0, x0, #0x110
     e10:	mov	w1, #0x1                   	// #1
     e14:	strb	w1, [x0]
     e18:	b	e20 <__do_global_dtors_aux+0x5c>
     e1c:	nop
     e20:	ldp	x29, x30, [sp], #16
     e24:	ret

0000000000000e28 <frame_dummy>:
     e28:	stp	x29, x30, [sp, #-16]!
     e2c:	mov	x29, sp
     e30:	bl	d34 <register_tm_clones>
     e34:	nop
     e38:	ldp	x29, x30, [sp], #16
     e3c:	ret

0000000000000e40 <print_builtin>:
     e40:	stp	x29, x30, [sp, #-112]!
     e44:	mov	x29, sp
     e48:	str	x0, [sp, #24]
     e4c:	str	wzr, [sp, #76]
     e50:	ldr	w0, [sp, #76]
     e54:	str	w0, [sp, #104]
     e58:	ldr	w0, [sp, #104]
     e5c:	str	w0, [sp, #108]
     e60:	mov	w0, #0x1                   	// #1
     e64:	str	w0, [sp, #100]
     e68:	str	xzr, [sp, #88]
     e6c:	bl	c60 <reset_internal_getopt@plt>
     e70:	b	10f4 <print_builtin+0x2b4>
     e74:	ldr	w0, [sp, #72]
     e78:	cmp	w0, #0x75
     e7c:	b.eq	1004 <print_builtin+0x1c4>  // b.none
     e80:	ldr	w0, [sp, #72]
     e84:	cmp	w0, #0x75
     e88:	b.gt	10e8 <print_builtin+0x2a8>
     e8c:	ldr	w0, [sp, #72]
     e90:	cmp	w0, #0x73
     e94:	b.eq	ff8 <print_builtin+0x1b8>  // b.none
     e98:	ldr	w0, [sp, #72]
     e9c:	cmp	w0, #0x73
     ea0:	b.gt	10e8 <print_builtin+0x2a8>
     ea4:	ldr	w0, [sp, #72]
     ea8:	cmp	w0, #0x72
     eac:	b.eq	fe0 <print_builtin+0x1a0>  // b.none
     eb0:	ldr	w0, [sp, #72]
     eb4:	cmp	w0, #0x72
     eb8:	b.gt	10e8 <print_builtin+0x2a8>
     ebc:	ldr	w0, [sp, #72]
     ec0:	cmp	w0, #0x70
     ec4:	b.eq	10f4 <print_builtin+0x2b4>  // b.none
     ec8:	ldr	w0, [sp, #72]
     ecc:	cmp	w0, #0x70
     ed0:	b.gt	10e8 <print_builtin+0x2a8>
     ed4:	ldr	w0, [sp, #72]
     ed8:	cmp	w0, #0x6e
     edc:	b.eq	fec <print_builtin+0x1ac>  // b.none
     ee0:	ldr	w0, [sp, #72]
     ee4:	cmp	w0, #0x6e
     ee8:	b.gt	10e8 <print_builtin+0x2a8>
     eec:	ldr	w0, [sp, #72]
     ef0:	cmp	w0, #0x66
     ef4:	b.eq	10c8 <print_builtin+0x288>  // b.none
     ef8:	ldr	w0, [sp, #72]
     efc:	cmp	w0, #0x66
     f00:	b.gt	10e8 <print_builtin+0x2a8>
     f04:	ldr	w0, [sp, #72]
     f08:	cmn	w0, #0x63
     f0c:	b.eq	10dc <print_builtin+0x29c>  // b.none
     f10:	ldr	w0, [sp, #72]
     f14:	cmp	w0, #0x52
     f18:	b.ne	10e8 <print_builtin+0x2a8>  // b.any
     f1c:	mov	w0, #0x2                   	// #2
     f20:	str	w0, [sp, #104]
     f24:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
     f28:	ldr	x0, [x0, #4024]
     f2c:	ldr	x1, [x0]
     f30:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
     f34:	ldr	x0, [x0, #4056]
     f38:	str	x1, [x0]
     f3c:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
     f40:	ldr	x0, [x0, #4056]
     f44:	ldr	x0, [x0]
     f48:	cmp	x0, #0x0
     f4c:	b.eq	1118 <print_builtin+0x2d8>  // b.none
     f50:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
     f54:	ldr	x0, [x0, #4056]
     f58:	ldr	x0, [x0]
     f5c:	ldr	x0, [x0, #8]
     f60:	ldr	x0, [x0]
     f64:	ldrb	w0, [x0]
     f68:	cmp	w0, #0x2d
     f6c:	b.ne	1118 <print_builtin+0x2d8>  // b.any
     f70:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
     f74:	ldr	x0, [x0, #4056]
     f78:	ldr	x0, [x0]
     f7c:	ldr	x0, [x0, #8]
     f80:	ldr	x0, [x0]
     f84:	add	x0, x0, #0x1
     f88:	ldrb	w0, [x0]
     f8c:	cmp	w0, #0x6e
     f90:	b.ne	1118 <print_builtin+0x2d8>  // b.any
     f94:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
     f98:	ldr	x0, [x0, #4056]
     f9c:	ldr	x0, [x0]
     fa0:	ldr	x0, [x0, #8]
     fa4:	ldr	x0, [x0]
     fa8:	add	x0, x0, #0x2
     fac:	ldrb	w0, [x0]
     fb0:	cmp	w0, #0x0
     fb4:	b.ne	1118 <print_builtin+0x2d8>  // b.any
     fb8:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
     fbc:	ldr	x0, [x0, #4056]
     fc0:	ldr	x0, [x0]
     fc4:	ldr	x1, [x0]
     fc8:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
     fcc:	ldr	x0, [x0, #4056]
     fd0:	str	x1, [x0]
     fd4:	mov	w0, #0x1                   	// #1
     fd8:	str	w0, [sp, #108]
     fdc:	b	1118 <print_builtin+0x2d8>
     fe0:	mov	w0, #0x1                   	// #1
     fe4:	str	w0, [sp, #104]
     fe8:	b	10f4 <print_builtin+0x2b4>
     fec:	mov	w0, #0x1                   	// #1
     ff0:	str	w0, [sp, #108]
     ff4:	b	10f4 <print_builtin+0x2b4>
     ff8:	mov	w0, #0x1                   	// #1
     ffc:	str	w0, [sp, #76]
    1000:	b	10f4 <print_builtin+0x2b4>
    1004:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
    1008:	ldr	x0, [x0, #4048]
    100c:	ldr	x0, [x0]
    1010:	bl	b60 <all_digits@plt>
    1014:	cmp	w0, #0x0
    1018:	b.eq	1058 <print_builtin+0x218>  // b.none
    101c:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
    1020:	ldr	x0, [x0, #4048]
    1024:	ldr	x0, [x0]
    1028:	add	x1, sp, #0x28
    102c:	bl	c80 <legal_number@plt>
    1030:	cmp	w0, #0x0
    1034:	b.eq	1058 <print_builtin+0x218>  // b.none
    1038:	ldr	x0, [sp, #40]
    103c:	sxtw	x1, w0
    1040:	ldr	x0, [sp, #40]
    1044:	cmp	x1, x0
    1048:	b.ne	1058 <print_builtin+0x218>  // b.any
    104c:	ldr	x0, [sp, #40]
    1050:	str	w0, [sp, #100]
    1054:	b	10f4 <print_builtin+0x2b4>
    1058:	ldr	x0, [sp, #24]
    105c:	str	x0, [sp, #80]
    1060:	b	1070 <print_builtin+0x230>
    1064:	ldr	x0, [sp, #80]
    1068:	ldr	x0, [x0]
    106c:	str	x0, [sp, #80]
    1070:	ldr	x0, [sp, #80]
    1074:	ldr	x0, [x0]
    1078:	cmp	x0, #0x0
    107c:	b.eq	109c <print_builtin+0x25c>  // b.none
    1080:	ldr	x0, [sp, #80]
    1084:	ldr	x1, [x0]
    1088:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
    108c:	ldr	x0, [x0, #4024]
    1090:	ldr	x0, [x0]
    1094:	cmp	x1, x0
    1098:	b.ne	1064 <print_builtin+0x224>  // b.any
    109c:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
    10a0:	ldr	x0, [x0, #4056]
    10a4:	ldr	x1, [sp, #80]
    10a8:	str	x1, [x0]
    10ac:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
    10b0:	ldr	x0, [x0, #4056]
    10b4:	ldr	x1, [x0]
    10b8:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
    10bc:	ldr	x0, [x0, #4024]
    10c0:	str	x1, [x0]
    10c4:	b	111c <print_builtin+0x2dc>
    10c8:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
    10cc:	ldr	x0, [x0, #4048]
    10d0:	ldr	x0, [x0]
    10d4:	str	x0, [sp, #88]
    10d8:	b	10f4 <print_builtin+0x2b4>
    10dc:	bl	be0 <builtin_help@plt>
    10e0:	mov	w0, #0x102                 	// #258
    10e4:	b	12d8 <print_builtin+0x498>
    10e8:	bl	c00 <builtin_usage@plt>
    10ec:	mov	w0, #0x102                 	// #258
    10f0:	b	12d8 <print_builtin+0x498>
    10f4:	adrp	x0, 1000 <print_builtin+0x1c0>
    10f8:	add	x1, x0, #0x4c8
    10fc:	ldr	x0, [sp, #24]
    1100:	bl	c50 <internal_getopt@plt>
    1104:	str	w0, [sp, #72]
    1108:	ldr	w0, [sp, #72]
    110c:	cmn	w0, #0x1
    1110:	b.ne	e74 <print_builtin+0x34>  // b.any
    1114:	b	111c <print_builtin+0x2dc>
    1118:	nop
    111c:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
    1120:	ldr	x0, [x0, #4056]
    1124:	ldr	x0, [x0]
    1128:	str	x0, [sp, #24]
    112c:	ldr	w0, [sp, #100]
    1130:	cmp	w0, #0x1
    1134:	b.eq	1158 <print_builtin+0x318>  // b.none
    1138:	ldr	w0, [sp, #100]
    113c:	bl	b90 <dup@plt>
    1140:	mov	w2, w0
    1144:	adrp	x0, 1000 <print_builtin+0x1c0>
    1148:	add	x1, x0, #0x4d8
    114c:	mov	w0, w2
    1150:	bl	bf0 <fdopen@plt>
    1154:	b	1164 <print_builtin+0x324>
    1158:	adrp	x0, 11000 <__FRAME_END__+0xfa0c>
    115c:	ldr	x0, [x0, #4032]
    1160:	ldr	x0, [x0]
    1164:	adrp	x1, 12000 <all_digits>
    1168:	add	x1, x1, #0x118
    116c:	str	x0, [x1]
    1170:	ldr	x0, [sp, #88]
    1174:	cmp	x0, #0x0
    1178:	b.eq	11bc <print_builtin+0x37c>  // b.none
    117c:	ldr	x0, [sp, #88]
    1180:	bl	bc0 <make_word@plt>
    1184:	str	x0, [sp, #56]
    1188:	ldr	x1, [sp, #24]
    118c:	ldr	x0, [sp, #56]
    1190:	bl	ca0 <make_word_list@plt>
    1194:	str	x0, [sp, #48]
    1198:	ldr	x0, [sp, #48]
    119c:	bl	c90 <printf_builtin@plt>
    11a0:	str	w0, [sp, #68]
    11a4:	ldr	x0, [sp, #48]
    11a8:	str	xzr, [x0]
    11ac:	ldr	x0, [sp, #48]
    11b0:	bl	c30 <dispose_words@plt>
    11b4:	ldr	w0, [sp, #68]
    11b8:	b	12d8 <print_builtin+0x498>
    11bc:	ldr	w0, [sp, #104]
    11c0:	cmp	w0, #0x0
    11c4:	b.eq	126c <print_builtin+0x42c>  // b.none
    11c8:	ldr	x0, [sp, #24]
    11cc:	str	x0, [sp, #80]
    11d0:	b	1224 <print_builtin+0x3e4>
    11d4:	adrp	x0, 12000 <all_digits>
    11d8:	add	x0, x0, #0x118
    11dc:	ldr	x1, [x0]
    11e0:	ldr	x0, [sp, #80]
    11e4:	ldr	x0, [x0, #8]
    11e8:	ldr	x0, [x0]
    11ec:	bl	b80 <fputs@plt>
    11f0:	ldr	x0, [sp, #80]
    11f4:	ldr	x0, [x0]
    11f8:	cmp	x0, #0x0
    11fc:	b.eq	1218 <print_builtin+0x3d8>  // b.none
    1200:	adrp	x0, 12000 <all_digits>
    1204:	add	x0, x0, #0x118
    1208:	ldr	x0, [x0]
    120c:	mov	x1, x0
    1210:	mov	w0, #0x20                  	// #32
    1214:	bl	bb0 <fputc@plt>
    1218:	ldr	x0, [sp, #80]
    121c:	ldr	x0, [x0]
    1220:	str	x0, [sp, #80]
    1224:	ldr	x0, [sp, #80]
    1228:	cmp	x0, #0x0
    122c:	b.ne	11d4 <print_builtin+0x394>  // b.any
    1230:	ldr	w0, [sp, #108]
    1234:	cmp	w0, #0x0
    1238:	b.ne	1254 <print_builtin+0x414>  // b.any
    123c:	adrp	x0, 12000 <all_digits>
    1240:	add	x0, x0, #0x118
    1244:	ldr	x0, [x0]
    1248:	mov	x1, x0
    124c:	mov	w0, #0xa                   	// #10
    1250:	bl	bb0 <fputc@plt>
    1254:	adrp	x0, 12000 <all_digits>
    1258:	add	x0, x0, #0x118
    125c:	ldr	x0, [x0]
    1260:	bl	c70 <fflush@plt>
    1264:	mov	w0, #0x0                   	// #0
    1268:	b	12d8 <print_builtin+0x498>
    126c:	adrp	x0, 12000 <all_digits>
    1270:	add	x0, x0, #0x118
    1274:	ldr	x0, [x0]
    1278:	mov	x1, x0
    127c:	ldr	x0, [sp, #24]
    1280:	bl	12e0 <printargs>
    1284:	str	w0, [sp, #68]
    1288:	ldr	w0, [sp, #68]
    128c:	cmp	w0, #0x0
    1290:	b.eq	12b8 <print_builtin+0x478>  // b.none
    1294:	ldr	w0, [sp, #108]
    1298:	cmp	w0, #0x0
    129c:	b.ne	12b8 <print_builtin+0x478>  // b.any
    12a0:	adrp	x0, 12000 <all_digits>
    12a4:	add	x0, x0, #0x118
    12a8:	ldr	x0, [x0]
    12ac:	mov	x1, x0
    12b0:	mov	w0, #0xa                   	// #10
    12b4:	bl	bb0 <fputc@plt>
    12b8:	ldr	w0, [sp, #100]
    12bc:	cmp	w0, #0x1
    12c0:	b.eq	12d4 <print_builtin+0x494>  // b.none
    12c4:	adrp	x0, 12000 <all_digits>
    12c8:	add	x0, x0, #0x118
    12cc:	ldr	x0, [x0]
    12d0:	bl	bd0 <fclose@plt>
    12d4:	mov	w0, #0x0                   	// #0
    12d8:	ldp	x29, x30, [sp], #112
    12dc:	ret

00000000000012e0 <printargs>:
    12e0:	stp	x29, x30, [sp, #-80]!
    12e4:	mov	x29, sp
    12e8:	str	x19, [sp, #16]
    12ec:	str	x0, [sp, #40]
    12f0:	str	x1, [sp, #32]
    12f4:	str	wzr, [sp, #60]
    12f8:	ldr	x0, [sp, #40]
    12fc:	str	x0, [sp, #72]
    1300:	b	1390 <printargs+0xb0>
    1304:	ldr	x0, [sp, #72]
    1308:	ldr	x0, [x0, #8]
    130c:	ldr	x19, [x0]
    1310:	ldr	x0, [sp, #72]
    1314:	ldr	x0, [x0, #8]
    1318:	ldr	x0, [x0]
    131c:	bl	b70 <strlen@plt>
    1320:	mov	w1, w0
    1324:	add	x0, sp, #0x3c
    1328:	mov	x4, #0x0                   	// #0
    132c:	mov	x3, x0
    1330:	mov	w2, #0x0                   	// #0
    1334:	mov	x0, x19
    1338:	bl	c20 <ansicstr@plt>
    133c:	str	x0, [sp, #64]
    1340:	ldr	x1, [sp, #32]
    1344:	ldr	x0, [sp, #64]
    1348:	bl	b80 <fputs@plt>
    134c:	ldr	x0, [sp, #64]
    1350:	bl	c40 <free@plt>
    1354:	ldr	w0, [sp, #60]
    1358:	cmp	w0, #0x0
    135c:	b.eq	1368 <printargs+0x88>  // b.none
    1360:	mov	w0, #0x0                   	// #0
    1364:	b	13a0 <printargs+0xc0>
    1368:	ldr	x0, [sp, #72]
    136c:	ldr	x0, [x0]
    1370:	cmp	x0, #0x0
    1374:	b.eq	1384 <printargs+0xa4>  // b.none
    1378:	ldr	x1, [sp, #32]
    137c:	mov	w0, #0x20                  	// #32
    1380:	bl	bb0 <fputc@plt>
    1384:	ldr	x0, [sp, #72]
    1388:	ldr	x0, [x0]
    138c:	str	x0, [sp, #72]
    1390:	ldr	x0, [sp, #72]
    1394:	cmp	x0, #0x0
    1398:	b.ne	1304 <printargs+0x24>  // b.any
    139c:	mov	w0, #0x1                   	// #1
    13a0:	ldr	x19, [sp, #16]
    13a4:	ldp	x29, x30, [sp], #80
    13a8:	ret

Disassembly of section .fini:

00000000000013ac <_fini>:
    13ac:	stp	x29, x30, [sp, #-16]!
    13b0:	mov	x29, sp
    13b4:	ldp	x29, x30, [sp], #16
    13b8:	ret
