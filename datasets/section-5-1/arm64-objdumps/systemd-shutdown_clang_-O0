
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-shutdown_clang_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000403560 <_init>:
  403560:	stp	x29, x30, [sp, #-16]!
  403564:	mov	x29, sp
  403568:	bl	404078 <call_weak_fn>
  40356c:	ldp	x29, x30, [sp], #16
  403570:	ret

Disassembly of section .plt:

0000000000403578 <__libc_start_main@plt-0x20>:
  403578:	stp	x16, x30, [sp, #-16]!
  40357c:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403580:	ldr	x17, [x16, #2736]
  403584:	add	x16, x16, #0xab0
  403588:	br	x17
  40358c:	nop
  403590:	nop
  403594:	nop

0000000000403598 <__libc_start_main@plt>:
  403598:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40359c:	ldr	x17, [x16, #2744]
  4035a0:	add	x16, x16, #0xab8
  4035a4:	br	x17

00000000004035a8 <abort@plt>:
  4035a8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4035ac:	ldr	x17, [x16, #2752]
  4035b0:	add	x16, x16, #0xac0
  4035b4:	br	x17

00000000004035b8 <__gmon_start__@plt>:
  4035b8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4035bc:	ldr	x17, [x16, #2760]
  4035c0:	add	x16, x16, #0xac8
  4035c4:	br	x17

00000000004035c8 <log_set_target@plt>:
  4035c8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4035cc:	ldr	x17, [x16, #2768]
  4035d0:	add	x16, x16, #0xad0
  4035d4:	br	x17

00000000004035d8 <log_set_prohibit_ipc@plt>:
  4035d8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4035dc:	ldr	x17, [x16, #2776]
  4035e0:	add	x16, x16, #0xad8
  4035e4:	br	x17

00000000004035e8 <log_parse_environment_realm@plt>:
  4035e8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4035ec:	ldr	x17, [x16, #2784]
  4035f0:	add	x16, x16, #0xae0
  4035f4:	br	x17

00000000004035f8 <log_open@plt>:
  4035f8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4035fc:	ldr	x17, [x16, #2792]
  403600:	add	x16, x16, #0xae8
  403604:	br	x17

0000000000403608 <umask@plt>:
  403608:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40360c:	ldr	x17, [x16, #2800]
  403610:	add	x16, x16, #0xaf0
  403614:	br	x17

0000000000403618 <getpid_cached@plt>:
  403618:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40361c:	ldr	x17, [x16, #2808]
  403620:	add	x16, x16, #0xaf8
  403624:	br	x17

0000000000403628 <log_get_max_level_realm@plt>:
  403628:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40362c:	ldr	x17, [x16, #2816]
  403630:	add	x16, x16, #0xb00
  403634:	br	x17

0000000000403638 <log_internal_realm@plt>:
  403638:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40363c:	ldr	x17, [x16, #2824]
  403640:	add	x16, x16, #0xb08
  403644:	br	x17

0000000000403648 <abs@plt>:
  403648:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40364c:	ldr	x17, [x16, #2832]
  403650:	add	x16, x16, #0xb10
  403654:	br	x17

0000000000403658 <strcmp@plt>:
  403658:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40365c:	ldr	x17, [x16, #2840]
  403660:	add	x16, x16, #0xb18
  403664:	br	x17

0000000000403668 <cg_get_root_path@plt>:
  403668:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40366c:	ldr	x17, [x16, #2848]
  403670:	add	x16, x16, #0xb20
  403674:	br	x17

0000000000403678 <detect_container@plt>:
  403678:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40367c:	ldr	x17, [x16, #2856]
  403680:	add	x16, x16, #0xb28
  403684:	br	x17

0000000000403688 <log_get_target@plt>:
  403688:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40368c:	ldr	x17, [x16, #2864]
  403690:	add	x16, x16, #0xb30
  403694:	br	x17

0000000000403698 <getenv@plt>:
  403698:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40369c:	ldr	x17, [x16, #2872]
  4036a0:	add	x16, x16, #0xb38
  4036a4:	br	x17

00000000004036a8 <watchdog_set_device@plt>:
  4036a8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4036ac:	ldr	x17, [x16, #2880]
  4036b0:	add	x16, x16, #0xb40
  4036b4:	br	x17

00000000004036b8 <mlockall@plt>:
  4036b8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4036bc:	ldr	x17, [x16, #2888]
  4036c0:	add	x16, x16, #0xb48
  4036c4:	br	x17

00000000004036c8 <disable_coredumps@plt>:
  4036c8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4036cc:	ldr	x17, [x16, #2896]
  4036d0:	add	x16, x16, #0xb50
  4036d4:	br	x17

00000000004036d8 <in_initrd@plt>:
  4036d8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4036dc:	ldr	x17, [x16, #2904]
  4036e0:	add	x16, x16, #0xb58
  4036e4:	br	x17

00000000004036e8 <access@plt>:
  4036e8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4036ec:	ldr	x17, [x16, #2912]
  4036f0:	add	x16, x16, #0xb60
  4036f4:	br	x17

00000000004036f8 <watchdog_ping@plt>:
  4036f8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4036fc:	ldr	x17, [x16, #2920]
  403700:	add	x16, x16, #0xb68
  403704:	br	x17

0000000000403708 <cg_trim@plt>:
  403708:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40370c:	ldr	x17, [x16, #2928]
  403710:	add	x16, x16, #0xb70
  403714:	br	x17

0000000000403718 <execute_directories@plt>:
  403718:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40371c:	ldr	x17, [x16, #2936]
  403720:	add	x16, x16, #0xb78
  403724:	br	x17

0000000000403728 <rlimit_nofile_safe@plt>:
  403728:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40372c:	ldr	x17, [x16, #2944]
  403730:	add	x16, x16, #0xb80
  403734:	br	x17

0000000000403738 <setsid@plt>:
  403738:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40373c:	ldr	x17, [x16, #2952]
  403740:	add	x16, x16, #0xb88
  403744:	br	x17

0000000000403748 <make_console_stdio@plt>:
  403748:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40374c:	ldr	x17, [x16, #2960]
  403750:	add	x16, x16, #0xb90
  403754:	br	x17

0000000000403758 <execv@plt>:
  403758:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40375c:	ldr	x17, [x16, #2968]
  403760:	add	x16, x16, #0xb98
  403764:	br	x17

0000000000403768 <__errno_location@plt>:
  403768:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40376c:	ldr	x17, [x16, #2976]
  403770:	add	x16, x16, #0xba0
  403774:	br	x17

0000000000403778 <_exit@plt>:
  403778:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40377c:	ldr	x17, [x16, #2984]
  403780:	add	x16, x16, #0xba8
  403784:	br	x17

0000000000403788 <reboot_with_parameter@plt>:
  403788:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40378c:	ldr	x17, [x16, #2992]
  403790:	add	x16, x16, #0xbb0
  403794:	br	x17

0000000000403798 <log_assert_failed_unreachable_realm@plt>:
  403798:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40379c:	ldr	x17, [x16, #3000]
  4037a0:	add	x16, x16, #0xbb8
  4037a4:	br	x17

00000000004037a8 <reboot@plt>:
  4037a8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4037ac:	ldr	x17, [x16, #3008]
  4037b0:	add	x16, x16, #0xbc0
  4037b4:	br	x17

00000000004037b8 <log_emergency_level@plt>:
  4037b8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4037bc:	ldr	x17, [x16, #3016]
  4037c0:	add	x16, x16, #0xbc8
  4037c4:	br	x17

00000000004037c8 <freeze@plt>:
  4037c8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4037cc:	ldr	x17, [x16, #3024]
  4037d0:	add	x16, x16, #0xbd0
  4037d4:	br	x17

00000000004037d8 <free@plt>:
  4037d8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4037dc:	ldr	x17, [x16, #3032]
  4037e0:	add	x16, x16, #0xbd8
  4037e4:	br	x17

00000000004037e8 <log_assert_failed_realm@plt>:
  4037e8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4037ec:	ldr	x17, [x16, #3040]
  4037f0:	add	x16, x16, #0xbe0
  4037f4:	br	x17

00000000004037f8 <getopt_long@plt>:
  4037f8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4037fc:	ldr	x17, [x16, #3048]
  403800:	add	x16, x16, #0xbe8
  403804:	br	x17

0000000000403808 <log_set_max_level_from_string_realm@plt>:
  403808:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40380c:	ldr	x17, [x16, #3056]
  403810:	add	x16, x16, #0xbf0
  403814:	br	x17

0000000000403818 <log_set_target_from_string@plt>:
  403818:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40381c:	ldr	x17, [x16, #3064]
  403820:	add	x16, x16, #0xbf8
  403824:	br	x17

0000000000403828 <log_show_color_from_string@plt>:
  403828:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40382c:	ldr	x17, [x16, #3072]
  403830:	add	x16, x16, #0xc00
  403834:	br	x17

0000000000403838 <log_show_color@plt>:
  403838:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40383c:	ldr	x17, [x16, #3080]
  403840:	add	x16, x16, #0xc08
  403844:	br	x17

0000000000403848 <log_show_location_from_string@plt>:
  403848:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40384c:	ldr	x17, [x16, #3088]
  403850:	add	x16, x16, #0xc10
  403854:	br	x17

0000000000403858 <log_show_location@plt>:
  403858:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40385c:	ldr	x17, [x16, #3096]
  403860:	add	x16, x16, #0xc18
  403864:	br	x17

0000000000403868 <safe_atou8@plt>:
  403868:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40386c:	ldr	x17, [x16, #3104]
  403870:	add	x16, x16, #0xc20
  403874:	br	x17

0000000000403878 <parse_sec@plt>:
  403878:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40387c:	ldr	x17, [x16, #3112]
  403880:	add	x16, x16, #0xc28
  403884:	br	x17

0000000000403888 <sysctl_writef@plt>:
  403888:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40388c:	ldr	x17, [x16, #3120]
  403890:	add	x16, x16, #0xc30
  403894:	br	x17

0000000000403898 <sigprocmask_many@plt>:
  403898:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40389c:	ldr	x17, [x16, #3128]
  4038a0:	add	x16, x16, #0xc38
  4038a4:	br	x17

00000000004038a8 <memcpy@plt>:
  4038a8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4038ac:	ldr	x17, [x16, #3136]
  4038b0:	add	x16, x16, #0xc40
  4038b4:	br	x17

00000000004038b8 <asynchronous_sync@plt>:
  4038b8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4038bc:	ldr	x17, [x16, #3144]
  4038c0:	add	x16, x16, #0xc48
  4038c4:	br	x17

00000000004038c8 <wait_for_terminate_with_timeout@plt>:
  4038c8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4038cc:	ldr	x17, [x16, #3152]
  4038d0:	add	x16, x16, #0xc50
  4038d4:	br	x17

00000000004038d8 <kill@plt>:
  4038d8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4038dc:	ldr	x17, [x16, #3160]
  4038e0:	add	x16, x16, #0xc58
  4038e4:	br	x17

00000000004038e8 <mount@plt>:
  4038e8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4038ec:	ldr	x17, [x16, #3168]
  4038f0:	add	x16, x16, #0xc60
  4038f4:	br	x17

00000000004038f8 <switch_root@plt>:
  4038f8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4038fc:	ldr	x17, [x16, #3176]
  403900:	add	x16, x16, #0xc68
  403904:	br	x17

0000000000403908 <safe_fork_full@plt>:
  403908:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40390c:	ldr	x17, [x16, #3184]
  403910:	add	x16, x16, #0xc70
  403914:	br	x17

0000000000403918 <sysctl_read@plt>:
  403918:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40391c:	ldr	x17, [x16, #3192]
  403920:	add	x16, x16, #0xc78
  403924:	br	x17

0000000000403928 <extract_first_word@plt>:
  403928:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40392c:	ldr	x17, [x16, #3200]
  403930:	add	x16, x16, #0xc80
  403934:	br	x17

0000000000403938 <safe_atoi@plt>:
  403938:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40393c:	ldr	x17, [x16, #3208]
  403940:	add	x16, x16, #0xc88
  403944:	br	x17

0000000000403948 <sigprocmask@plt>:
  403948:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40394c:	ldr	x17, [x16, #3216]
  403950:	add	x16, x16, #0xc90
  403954:	br	x17

0000000000403958 <fopen64@plt>:
  403958:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40395c:	ldr	x17, [x16, #3224]
  403960:	add	x16, x16, #0xc98
  403964:	br	x17

0000000000403968 <first_word@plt>:
  403968:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40396c:	ldr	x17, [x16, #3232]
  403970:	add	x16, x16, #0xca0
  403974:	br	x17

0000000000403978 <__isoc99_sscanf@plt>:
  403978:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40397c:	ldr	x17, [x16, #3240]
  403980:	add	x16, x16, #0xca8
  403984:	br	x17

0000000000403988 <safe_fclose@plt>:
  403988:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40398c:	ldr	x17, [x16, #3248]
  403990:	add	x16, x16, #0xcb0
  403994:	br	x17

0000000000403998 <read_line_full@plt>:
  403998:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40399c:	ldr	x17, [x16, #3256]
  4039a0:	add	x16, x16, #0xcb8
  4039a4:	br	x17

00000000004039a8 <mnt_table_next_fs@plt>:
  4039a8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4039ac:	ldr	x17, [x16, #3264]
  4039b0:	add	x16, x16, #0xcc0
  4039b4:	br	x17

00000000004039b8 <mnt_fs_get_target@plt>:
  4039b8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4039bc:	ldr	x17, [x16, #3272]
  4039c0:	add	x16, x16, #0xcc8
  4039c4:	br	x17

00000000004039c8 <mnt_fs_get_fstype@plt>:
  4039c8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4039cc:	ldr	x17, [x16, #3280]
  4039d0:	add	x16, x16, #0xcd0
  4039d4:	br	x17

00000000004039d8 <mnt_fs_get_vfs_options@plt>:
  4039d8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4039dc:	ldr	x17, [x16, #3288]
  4039e0:	add	x16, x16, #0xcd8
  4039e4:	br	x17

00000000004039e8 <strextend_with_separator@plt>:
  4039e8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4039ec:	ldr	x17, [x16, #3296]
  4039f0:	add	x16, x16, #0xce0
  4039f4:	br	x17

00000000004039f8 <log_oom_internal@plt>:
  4039f8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  4039fc:	ldr	x17, [x16, #3304]
  403a00:	add	x16, x16, #0xce8
  403a04:	br	x17

0000000000403a08 <mnt_fs_get_fs_options@plt>:
  403a08:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403a0c:	ldr	x17, [x16, #3312]
  403a10:	add	x16, x16, #0xcf0
  403a14:	br	x17

0000000000403a18 <path_startswith_strv@plt>:
  403a18:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403a1c:	ldr	x17, [x16, #3320]
  403a20:	add	x16, x16, #0xcf8
  403a24:	br	x17

0000000000403a28 <fstype_is_network@plt>:
  403a28:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403a2c:	ldr	x17, [x16, #3328]
  403a30:	add	x16, x16, #0xd00
  403a34:	br	x17

0000000000403a38 <fstype_is_api_vfs@plt>:
  403a38:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403a3c:	ldr	x17, [x16, #3336]
  403a40:	add	x16, x16, #0xd08
  403a44:	br	x17

0000000000403a48 <fstype_is_ro@plt>:
  403a48:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403a4c:	ldr	x17, [x16, #3344]
  403a50:	add	x16, x16, #0xd10
  403a54:	br	x17

0000000000403a58 <mnt_fs_get_propagation@plt>:
  403a58:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403a5c:	ldr	x17, [x16, #3352]
  403a60:	add	x16, x16, #0xd18
  403a64:	br	x17

0000000000403a68 <mount_option_mangle@plt>:
  403a68:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403a6c:	ldr	x17, [x16, #3360]
  403a70:	add	x16, x16, #0xd20
  403a74:	br	x17

0000000000403a78 <calloc@plt>:
  403a78:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403a7c:	ldr	x17, [x16, #3368]
  403a80:	add	x16, x16, #0xd28
  403a84:	br	x17

0000000000403a88 <strdup@plt>:
  403a88:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403a8c:	ldr	x17, [x16, #3376]
  403a90:	add	x16, x16, #0xd30
  403a94:	br	x17

0000000000403a98 <mnt_free_table@plt>:
  403a98:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403a9c:	ldr	x17, [x16, #3384]
  403aa0:	add	x16, x16, #0xd38
  403aa4:	br	x17

0000000000403aa8 <mnt_free_iter@plt>:
  403aa8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403aac:	ldr	x17, [x16, #3392]
  403ab0:	add	x16, x16, #0xd40
  403ab4:	br	x17

0000000000403ab8 <mnt_new_table@plt>:
  403ab8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403abc:	ldr	x17, [x16, #3400]
  403ac0:	add	x16, x16, #0xd48
  403ac4:	br	x17

0000000000403ac8 <mnt_new_iter@plt>:
  403ac8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403acc:	ldr	x17, [x16, #3408]
  403ad0:	add	x16, x16, #0xd50
  403ad4:	br	x17

0000000000403ad8 <mnt_table_parse_stream@plt>:
  403ad8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403adc:	ldr	x17, [x16, #3416]
  403ae0:	add	x16, x16, #0xd58
  403ae4:	br	x17

0000000000403ae8 <mnt_table_parse_file@plt>:
  403ae8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403aec:	ldr	x17, [x16, #3424]
  403af0:	add	x16, x16, #0xd60
  403af4:	br	x17

0000000000403af8 <mnt_table_parse_mtab@plt>:
  403af8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403afc:	ldr	x17, [x16, #3432]
  403b00:	add	x16, x16, #0xd68
  403b04:	br	x17

0000000000403b08 <fstab_filter_options@plt>:
  403b08:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403b0c:	ldr	x17, [x16, #3440]
  403b10:	add	x16, x16, #0xd70
  403b14:	br	x17

0000000000403b18 <mnt_table_parse_swaps@plt>:
  403b18:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403b1c:	ldr	x17, [x16, #3448]
  403b20:	add	x16, x16, #0xd78
  403b24:	br	x17

0000000000403b28 <mnt_fs_get_source@plt>:
  403b28:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403b2c:	ldr	x17, [x16, #3456]
  403b30:	add	x16, x16, #0xd80
  403b34:	br	x17

0000000000403b38 <swapoff@plt>:
  403b38:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403b3c:	ldr	x17, [x16, #3464]
  403b40:	add	x16, x16, #0xd88
  403b44:	br	x17

0000000000403b48 <sd_device_enumerator_new@plt>:
  403b48:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403b4c:	ldr	x17, [x16, #3472]
  403b50:	add	x16, x16, #0xd90
  403b54:	br	x17

0000000000403b58 <sd_device_enumerator_allow_uninitialized@plt>:
  403b58:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403b5c:	ldr	x17, [x16, #3480]
  403b60:	add	x16, x16, #0xd98
  403b64:	br	x17

0000000000403b68 <sd_device_enumerator_add_match_subsystem@plt>:
  403b68:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403b6c:	ldr	x17, [x16, #3488]
  403b70:	add	x16, x16, #0xda0
  403b74:	br	x17

0000000000403b78 <sd_device_enumerator_add_match_sysname@plt>:
  403b78:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403b7c:	ldr	x17, [x16, #3496]
  403b80:	add	x16, x16, #0xda8
  403b84:	br	x17

0000000000403b88 <sd_device_enumerator_add_match_sysattr@plt>:
  403b88:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403b8c:	ldr	x17, [x16, #3504]
  403b90:	add	x16, x16, #0xdb0
  403b94:	br	x17

0000000000403b98 <sd_device_enumerator_get_device_first@plt>:
  403b98:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403b9c:	ldr	x17, [x16, #3512]
  403ba0:	add	x16, x16, #0xdb8
  403ba4:	br	x17

0000000000403ba8 <sd_device_get_devname@plt>:
  403ba8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403bac:	ldr	x17, [x16, #3520]
  403bb0:	add	x16, x16, #0xdc0
  403bb4:	br	x17

0000000000403bb8 <memset@plt>:
  403bb8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403bbc:	ldr	x17, [x16, #3528]
  403bc0:	add	x16, x16, #0xdc8
  403bc4:	br	x17

0000000000403bc8 <sd_device_enumerator_get_device_next@plt>:
  403bc8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403bcc:	ldr	x17, [x16, #3536]
  403bd0:	add	x16, x16, #0xdd0
  403bd4:	br	x17

0000000000403bd8 <gnu_dev_major@plt>:
  403bd8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403bdc:	ldr	x17, [x16, #3544]
  403be0:	add	x16, x16, #0xdd8
  403be4:	br	x17

0000000000403be8 <sd_device_get_devnum@plt>:
  403be8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403bec:	ldr	x17, [x16, #3552]
  403bf0:	add	x16, x16, #0xde0
  403bf4:	br	x17

0000000000403bf8 <get_block_device@plt>:
  403bf8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403bfc:	ldr	x17, [x16, #3560]
  403c00:	add	x16, x16, #0xde8
  403c04:	br	x17

0000000000403c08 <gnu_dev_minor@plt>:
  403c08:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403c0c:	ldr	x17, [x16, #3568]
  403c10:	add	x16, x16, #0xdf0
  403c14:	br	x17

0000000000403c18 <path_equal@plt>:
  403c18:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403c1c:	ldr	x17, [x16, #3576]
  403c20:	add	x16, x16, #0xdf8
  403c24:	br	x17

0000000000403c28 <path_startswith@plt>:
  403c28:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403c2c:	ldr	x17, [x16, #3584]
  403c30:	add	x16, x16, #0xe00
  403c34:	br	x17

0000000000403c38 <umount2@plt>:
  403c38:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403c3c:	ldr	x17, [x16, #3592]
  403c40:	add	x16, x16, #0xe08
  403c44:	br	x17

0000000000403c48 <sd_device_enumerator_unref@plt>:
  403c48:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403c4c:	ldr	x17, [x16, #3600]
  403c50:	add	x16, x16, #0xe10
  403c54:	br	x17

0000000000403c58 <malloc@plt>:
  403c58:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403c5c:	ldr	x17, [x16, #3608]
  403c60:	add	x16, x16, #0xe18
  403c64:	br	x17

0000000000403c68 <open64@plt>:
  403c68:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403c6c:	ldr	x17, [x16, #3616]
  403c70:	add	x16, x16, #0xe20
  403c74:	br	x17

0000000000403c78 <ioctl@plt>:
  403c78:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403c7c:	ldr	x17, [x16, #3624]
  403c80:	add	x16, x16, #0xe28
  403c84:	br	x17

0000000000403c88 <safe_close@plt>:
  403c88:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403c8c:	ldr	x17, [x16, #3632]
  403c90:	add	x16, x16, #0xe30
  403c94:	br	x17

0000000000403c98 <internal_set_new@plt>:
  403c98:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403c9c:	ldr	x17, [x16, #3640]
  403ca0:	add	x16, x16, #0xe38
  403ca4:	br	x17

0000000000403ca8 <sigemptyset@plt>:
  403ca8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403cac:	ldr	x17, [x16, #3648]
  403cb0:	add	x16, x16, #0xe40
  403cb4:	br	x17

0000000000403cb8 <sigaddset@plt>:
  403cb8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403cbc:	ldr	x17, [x16, #3656]
  403cc0:	add	x16, x16, #0xe48
  403cc4:	br	x17

0000000000403cc8 <opendir@plt>:
  403cc8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403ccc:	ldr	x17, [x16, #3664]
  403cd0:	add	x16, x16, #0xe50
  403cd4:	br	x17

0000000000403cd8 <readdir64@plt>:
  403cd8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403cdc:	ldr	x17, [x16, #3672]
  403ce0:	add	x16, x16, #0xe58
  403ce4:	br	x17

0000000000403ce8 <parse_pid@plt>:
  403ce8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403cec:	ldr	x17, [x16, #3680]
  403cf0:	add	x16, x16, #0xe60
  403cf4:	br	x17

0000000000403cf8 <get_process_comm@plt>:
  403cf8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403cfc:	ldr	x17, [x16, #3688]
  403d00:	add	x16, x16, #0xe68
  403d04:	br	x17

0000000000403d08 <set_put@plt>:
  403d08:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403d0c:	ldr	x17, [x16, #3696]
  403d10:	add	x16, x16, #0xe70
  403d14:	br	x17

0000000000403d18 <get_ctty_devnr@plt>:
  403d18:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403d1c:	ldr	x17, [x16, #3704]
  403d20:	add	x16, x16, #0xe78
  403d24:	br	x17

0000000000403d28 <now@plt>:
  403d28:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403d2c:	ldr	x17, [x16, #3712]
  403d30:	add	x16, x16, #0xe80
  403d34:	br	x17

0000000000403d38 <waitpid@plt>:
  403d38:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403d3c:	ldr	x17, [x16, #3720]
  403d40:	add	x16, x16, #0xe88
  403d44:	br	x17

0000000000403d48 <set_iterate@plt>:
  403d48:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403d4c:	ldr	x17, [x16, #3728]
  403d50:	add	x16, x16, #0xe90
  403d54:	br	x17

0000000000403d58 <timespec_store@plt>:
  403d58:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403d5c:	ldr	x17, [x16, #3736]
  403d60:	add	x16, x16, #0xe98
  403d64:	br	x17

0000000000403d68 <sigtimedwait@plt>:
  403d68:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403d6c:	ldr	x17, [x16, #3744]
  403d70:	add	x16, x16, #0xea0
  403d74:	br	x17

0000000000403d78 <internal_hashmap_free@plt>:
  403d78:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403d7c:	ldr	x17, [x16, #3752]
  403d80:	add	x16, x16, #0xea8
  403d84:	br	x17

0000000000403d88 <closedir@plt>:
  403d88:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403d8c:	ldr	x17, [x16, #3760]
  403d90:	add	x16, x16, #0xeb0
  403d94:	br	x17

0000000000403d98 <is_kernel_thread@plt>:
  403d98:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403d9c:	ldr	x17, [x16, #3768]
  403da0:	add	x16, x16, #0xeb8
  403da4:	br	x17

0000000000403da8 <get_process_uid@plt>:
  403da8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403dac:	ldr	x17, [x16, #3776]
  403db0:	add	x16, x16, #0xec0
  403db4:	br	x17

0000000000403db8 <sprintf@plt>:
  403db8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403dbc:	ldr	x17, [x16, #3784]
  403dc0:	add	x16, x16, #0xec8
  403dc4:	br	x17

0000000000403dc8 <fread@plt>:
  403dc8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403dcc:	ldr	x17, [x16, #3792]
  403dd0:	add	x16, x16, #0xed0
  403dd4:	br	x17

0000000000403dd8 <pid_from_same_root_fs@plt>:
  403dd8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403ddc:	ldr	x17, [x16, #3800]
  403de0:	add	x16, x16, #0xed8
  403de4:	br	x17

0000000000403de8 <internal_hashmap_remove@plt>:
  403de8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403dec:	ldr	x17, [x16, #3808]
  403df0:	add	x16, x16, #0xee0
  403df4:	br	x17

0000000000403df8 <asprintf@plt>:
  403df8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403dfc:	ldr	x17, [x16, #3816]
  403e00:	add	x16, x16, #0xee8
  403e04:	br	x17

0000000000403e08 <internal_hashmap_size@plt>:
  403e08:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403e0c:	ldr	x17, [x16, #3824]
  403e10:	add	x16, x16, #0xef0
  403e14:	br	x17

0000000000403e18 <strchr@plt>:
  403e18:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403e1c:	ldr	x17, [x16, #3832]
  403e20:	add	x16, x16, #0xef8
  403e24:	br	x17

0000000000403e28 <cg_is_legacy_wanted@plt>:
  403e28:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403e2c:	ldr	x17, [x16, #3840]
  403e30:	add	x16, x16, #0xf00
  403e34:	br	x17

0000000000403e38 <cg_kernel_controllers@plt>:
  403e38:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403e3c:	ldr	x17, [x16, #3848]
  403e40:	add	x16, x16, #0xf08
  403e44:	br	x17

0000000000403e48 <strjoin_real@plt>:
  403e48:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403e4c:	ldr	x17, [x16, #3856]
  403e50:	add	x16, x16, #0xf10
  403e54:	br	x17

0000000000403e58 <path_join_internal@plt>:
  403e58:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403e5c:	ldr	x17, [x16, #3864]
  403e60:	add	x16, x16, #0xf18
  403e64:	br	x17

0000000000403e68 <internal_hashmap_first_key_and_value@plt>:
  403e68:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403e6c:	ldr	x17, [x16, #3872]
  403e70:	add	x16, x16, #0xf20
  403e74:	br	x17

0000000000403e78 <label_fix@plt>:
  403e78:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403e7c:	ldr	x17, [x16, #3880]
  403e80:	add	x16, x16, #0xf28
  403e84:	br	x17

0000000000403e88 <path_is_mount_point@plt>:
  403e88:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403e8c:	ldr	x17, [x16, #3888]
  403e90:	add	x16, x16, #0xf30
  403e94:	br	x17

0000000000403e98 <mkdir_p_label@plt>:
  403e98:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403e9c:	ldr	x17, [x16, #3896]
  403ea0:	add	x16, x16, #0xf38
  403ea4:	br	x17

0000000000403ea8 <mkdir_p@plt>:
  403ea8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403eac:	ldr	x17, [x16, #3904]
  403eb0:	add	x16, x16, #0xf40
  403eb4:	br	x17

0000000000403eb8 <umount@plt>:
  403eb8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403ebc:	ldr	x17, [x16, #3912]
  403ec0:	add	x16, x16, #0xf48
  403ec4:	br	x17

0000000000403ec8 <rmdir@plt>:
  403ec8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403ecc:	ldr	x17, [x16, #3920]
  403ed0:	add	x16, x16, #0xf50
  403ed4:	br	x17

0000000000403ed8 <strlen@plt>:
  403ed8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403edc:	ldr	x17, [x16, #3928]
  403ee0:	add	x16, x16, #0xf58
  403ee4:	br	x17

0000000000403ee8 <stpcpy@plt>:
  403ee8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403eec:	ldr	x17, [x16, #3936]
  403ef0:	add	x16, x16, #0xf60
  403ef4:	br	x17

0000000000403ef8 <symlink_idempotent@plt>:
  403ef8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403efc:	ldr	x17, [x16, #3944]
  403f00:	add	x16, x16, #0xf68
  403f04:	br	x17

0000000000403f08 <nftw64@plt>:
  403f08:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403f0c:	ldr	x17, [x16, #3952]
  403f10:	add	x16, x16, #0xf70
  403f14:	br	x17

0000000000403f18 <format_timespan@plt>:
  403f18:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403f1c:	ldr	x17, [x16, #3960]
  403f20:	add	x16, x16, #0xf78
  403f24:	br	x17

0000000000403f28 <dev_setup@plt>:
  403f28:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403f2c:	ldr	x17, [x16, #3968]
  403f30:	add	x16, x16, #0xf80
  403f34:	br	x17

0000000000403f38 <mkdir_label@plt>:
  403f38:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403f3c:	ldr	x17, [x16, #3976]
  403f40:	add	x16, x16, #0xf88
  403f44:	br	x17

0000000000403f48 <make_inaccessible_nodes@plt>:
  403f48:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403f4c:	ldr	x17, [x16, #3984]
  403f50:	add	x16, x16, #0xf90
  403f54:	br	x17

0000000000403f58 <cg_all_unified@plt>:
  403f58:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403f5c:	ldr	x17, [x16, #3992]
  403f60:	add	x16, x16, #0xf98
  403f64:	br	x17

0000000000403f68 <statfs64@plt>:
  403f68:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403f6c:	ldr	x17, [x16, #4000]
  403f70:	add	x16, x16, #0xfa0
  403f74:	br	x17

0000000000403f78 <conf_files_list@plt>:
  403f78:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403f7c:	ldr	x17, [x16, #4008]
  403f80:	add	x16, x16, #0xfa8
  403f84:	br	x17

0000000000403f88 <path_simplify@plt>:
  403f88:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403f8c:	ldr	x17, [x16, #4016]
  403f90:	add	x16, x16, #0xfb0
  403f94:	br	x17

0000000000403f98 <path_is_normalized@plt>:
  403f98:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403f9c:	ldr	x17, [x16, #4024]
  403fa0:	add	x16, x16, #0xfb8
  403fa4:	br	x17

0000000000403fa8 <path_is_absolute@plt>:
  403fa8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403fac:	ldr	x17, [x16, #4032]
  403fb0:	add	x16, x16, #0xfc0
  403fb4:	br	x17

0000000000403fb8 <unlink@plt>:
  403fb8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403fbc:	ldr	x17, [x16, #4040]
  403fc0:	add	x16, x16, #0xfc8
  403fc4:	br	x17

0000000000403fc8 <strv_free@plt>:
  403fc8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403fcc:	ldr	x17, [x16, #4048]
  403fd0:	add	x16, x16, #0xfd0
  403fd4:	br	x17

0000000000403fd8 <mac_smack_use@plt>:
  403fd8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403fdc:	ldr	x17, [x16, #4056]
  403fe0:	add	x16, x16, #0xfd8
  403fe4:	br	x17

0000000000403fe8 <cg_is_unified_wanted@plt>:
  403fe8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403fec:	ldr	x17, [x16, #4064]
  403ff0:	add	x16, x16, #0xfe0
  403ff4:	br	x17

0000000000403ff8 <cg_is_hybrid_wanted@plt>:
  403ff8:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  403ffc:	ldr	x17, [x16, #4072]
  404000:	add	x16, x16, #0xfe8
  404004:	br	x17

0000000000404008 <is_efi_boot@plt>:
  404008:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40400c:	ldr	x17, [x16, #4080]
  404010:	add	x16, x16, #0xff0
  404014:	br	x17

0000000000404018 <__lxstat64@plt>:
  404018:	adrp	x16, 42f000 <__FRAME_END__+0x1f368>
  40401c:	ldr	x17, [x16, #4088]
  404020:	add	x16, x16, #0xff8
  404024:	br	x17

Disassembly of section .text:

0000000000404028 <_start>:
  404028:	mov	x29, #0x0                   	// #0
  40402c:	mov	x30, #0x0                   	// #0
  404030:	mov	x5, x0
  404034:	ldr	x1, [sp]
  404038:	add	x2, sp, #0x8
  40403c:	mov	x6, sp
  404040:	movz	x0, #0x0, lsl #48
  404044:	movk	x0, #0x0, lsl #32
  404048:	movk	x0, #0x40, lsl #16
  40404c:	movk	x0, #0x41f0
  404050:	movz	x3, #0x0, lsl #48
  404054:	movk	x3, #0x0, lsl #32
  404058:	movk	x3, #0x40, lsl #16
  40405c:	movk	x3, #0xda38
  404060:	movz	x4, #0x0, lsl #48
  404064:	movk	x4, #0x0, lsl #32
  404068:	movk	x4, #0x40, lsl #16
  40406c:	movk	x4, #0xdab8
  404070:	bl	403598 <__libc_start_main@plt>
  404074:	bl	4035a8 <abort@plt>

0000000000404078 <call_weak_fn>:
  404078:	adrp	x0, 42f000 <__FRAME_END__+0x1f368>
  40407c:	ldr	x0, [x0, #2704]
  404080:	cbz	x0, 404088 <call_weak_fn+0x10>
  404084:	b	4035b8 <__gmon_start__@plt>
  404088:	ret

000000000040408c <deregister_tm_clones>:
  40408c:	stp	x29, x30, [sp, #-32]!
  404090:	mov	x29, sp
  404094:	adrp	x0, 430000 <arg_timeout>
  404098:	add	x0, x0, #0x0
  40409c:	str	x0, [sp, #24]
  4040a0:	ldr	x0, [sp, #24]
  4040a4:	str	x0, [sp, #24]
  4040a8:	ldr	x1, [sp, #24]
  4040ac:	adrp	x0, 430000 <arg_timeout>
  4040b0:	add	x0, x0, #0x0
  4040b4:	cmp	x1, x0
  4040b8:	b.eq	4040f4 <deregister_tm_clones+0x68>  // b.none
  4040bc:	adrp	x0, 40d000 <nftw_cb+0x9c>
  4040c0:	add	x0, x0, #0xae0
  4040c4:	ldr	x0, [x0]
  4040c8:	str	x0, [sp, #16]
  4040cc:	ldr	x0, [sp, #16]
  4040d0:	str	x0, [sp, #16]
  4040d4:	ldr	x0, [sp, #16]
  4040d8:	cmp	x0, #0x0
  4040dc:	b.eq	4040f8 <deregister_tm_clones+0x6c>  // b.none
  4040e0:	ldr	x1, [sp, #16]
  4040e4:	adrp	x0, 430000 <arg_timeout>
  4040e8:	add	x0, x0, #0x0
  4040ec:	blr	x1
  4040f0:	b	4040f8 <deregister_tm_clones+0x6c>
  4040f4:	nop
  4040f8:	ldp	x29, x30, [sp], #32
  4040fc:	ret

0000000000404100 <register_tm_clones>:
  404100:	stp	x29, x30, [sp, #-48]!
  404104:	mov	x29, sp
  404108:	adrp	x0, 430000 <arg_timeout>
  40410c:	add	x0, x0, #0x0
  404110:	str	x0, [sp, #40]
  404114:	ldr	x0, [sp, #40]
  404118:	str	x0, [sp, #40]
  40411c:	ldr	x1, [sp, #40]
  404120:	adrp	x0, 430000 <arg_timeout>
  404124:	add	x0, x0, #0x0
  404128:	sub	x0, x1, x0
  40412c:	asr	x0, x0, #3
  404130:	lsr	x1, x0, #63
  404134:	add	x0, x1, x0
  404138:	asr	x0, x0, #1
  40413c:	str	x0, [sp, #32]
  404140:	ldr	x0, [sp, #32]
  404144:	cmp	x0, #0x0
  404148:	b.eq	404188 <register_tm_clones+0x88>  // b.none
  40414c:	adrp	x0, 40d000 <nftw_cb+0x9c>
  404150:	add	x0, x0, #0xae8
  404154:	ldr	x0, [x0]
  404158:	str	x0, [sp, #24]
  40415c:	ldr	x0, [sp, #24]
  404160:	str	x0, [sp, #24]
  404164:	ldr	x0, [sp, #24]
  404168:	cmp	x0, #0x0
  40416c:	b.eq	40418c <register_tm_clones+0x8c>  // b.none
  404170:	ldr	x2, [sp, #24]
  404174:	ldr	x1, [sp, #32]
  404178:	adrp	x0, 430000 <arg_timeout>
  40417c:	add	x0, x0, #0x0
  404180:	blr	x2
  404184:	b	40418c <register_tm_clones+0x8c>
  404188:	nop
  40418c:	ldp	x29, x30, [sp], #48
  404190:	ret

0000000000404194 <__do_global_dtors_aux>:
  404194:	stp	x29, x30, [sp, #-16]!
  404198:	mov	x29, sp
  40419c:	adrp	x0, 430000 <arg_timeout>
  4041a0:	add	x0, x0, #0x28
  4041a4:	ldrb	w0, [x0]
  4041a8:	and	x0, x0, #0xff
  4041ac:	cmp	x0, #0x0
  4041b0:	b.ne	4041cc <__do_global_dtors_aux+0x38>  // b.any
  4041b4:	bl	40408c <deregister_tm_clones>
  4041b8:	adrp	x0, 430000 <arg_timeout>
  4041bc:	add	x0, x0, #0x28
  4041c0:	mov	w1, #0x1                   	// #1
  4041c4:	strb	w1, [x0]
  4041c8:	b	4041d0 <__do_global_dtors_aux+0x3c>
  4041cc:	nop
  4041d0:	ldp	x29, x30, [sp], #16
  4041d4:	ret

00000000004041d8 <frame_dummy>:
  4041d8:	stp	x29, x30, [sp, #-16]!
  4041dc:	mov	x29, sp
  4041e0:	bl	404100 <register_tm_clones>
  4041e4:	nop
  4041e8:	ldp	x29, x30, [sp], #16
  4041ec:	ret

00000000004041f0 <main>:
  4041f0:	stp	x29, x30, [sp, #-32]!
  4041f4:	str	x28, [sp, #16]
  4041f8:	mov	x29, sp
  4041fc:	sub	sp, sp, #0x3a0
  404200:	mov	w8, wzr
  404204:	mov	w9, #0x0                   	// #0
  404208:	mov	x10, xzr
  40420c:	mov	w11, #0x6                   	// #6
  404210:	mov	w12, #0x1                   	// #1
  404214:	adrp	x13, 430000 <arg_timeout>
  404218:	add	x13, x13, #0x30
  40421c:	adrp	x14, 40d000 <nftw_cb+0x9c>
  404220:	add	x14, x14, #0xc55
  404224:	add	x14, x14, #0x3
  404228:	adrp	x15, 40d000 <nftw_cb+0x9c>
  40422c:	add	x15, x15, #0xc70
  404230:	adrp	x16, 40d000 <nftw_cb+0x9c>
  404234:	add	x16, x16, #0xfd9
  404238:	adrp	x17, 40d000 <nftw_cb+0x9c>
  40423c:	add	x17, x17, #0xfe8
  404240:	adrp	x18, 40d000 <nftw_cb+0x9c>
  404244:	add	x18, x18, #0xfe9
  404248:	adrp	x2, 40d000 <nftw_cb+0x9c>
  40424c:	add	x2, x2, #0xff8
  404250:	adrp	x3, 40e000 <parse_argv.options+0x4a8>
  404254:	add	x3, x3, #0x7
  404258:	stur	wzr, [x29, #-4]
  40425c:	stur	w0, [x29, #-8]
  404260:	stur	x1, [x29, #-16]
  404264:	sturb	w9, [x29, #-22]
  404268:	stur	x10, [x29, #-32]
  40426c:	stur	w11, [x29, #-76]
  404270:	mov	w0, w8
  404274:	str	w8, [sp, #252]
  404278:	str	w12, [sp, #248]
  40427c:	str	x13, [sp, #240]
  404280:	str	x14, [sp, #232]
  404284:	str	x15, [sp, #224]
  404288:	str	x16, [sp, #216]
  40428c:	str	x17, [sp, #208]
  404290:	str	x18, [sp, #200]
  404294:	str	x2, [sp, #192]
  404298:	str	x3, [sp, #184]
  40429c:	bl	4035c8 <log_set_target@plt>
  4042a0:	ldr	w8, [sp, #248]
  4042a4:	and	w0, w8, #0x1
  4042a8:	bl	4035d8 <log_set_prohibit_ipc@plt>
  4042ac:	ldr	w0, [sp, #252]
  4042b0:	bl	4035e8 <log_parse_environment_realm@plt>
  4042b4:	ldur	w0, [x29, #-8]
  4042b8:	ldur	x1, [x29, #-16]
  4042bc:	bl	405b18 <parse_argv>
  4042c0:	stur	w0, [x29, #-72]
  4042c4:	ldur	w8, [x29, #-72]
  4042c8:	cmp	w8, #0x0
  4042cc:	cset	w8, ge  // ge = tcont
  4042d0:	tbnz	w8, #0, 4042d8 <main+0xe8>
  4042d4:	b	405a58 <main+0x1868>
  4042d8:	bl	4035f8 <log_open@plt>
  4042dc:	mov	w8, #0x12                  	// #18
  4042e0:	mov	w0, w8
  4042e4:	bl	403608 <umask@plt>
  4042e8:	bl	403618 <getpid_cached@plt>
  4042ec:	cmp	w0, #0x1
  4042f0:	b.eq	404374 <main+0x184>  // b.none
  4042f4:	mov	w8, #0x3                   	// #3
  4042f8:	stur	w8, [x29, #-80]
  4042fc:	stur	wzr, [x29, #-84]
  404300:	stur	wzr, [x29, #-88]
  404304:	ldur	w0, [x29, #-88]
  404308:	bl	403628 <log_get_max_level_realm@plt>
  40430c:	ldur	w8, [x29, #-80]
  404310:	and	w8, w8, #0x7
  404314:	cmp	w0, w8
  404318:	b.lt	40434c <main+0x15c>  // b.tstop
  40431c:	ldur	w8, [x29, #-88]
  404320:	ldur	w9, [x29, #-80]
  404324:	orr	w0, w9, w8, lsl #10
  404328:	ldur	w1, [x29, #-84]
  40432c:	ldr	x2, [sp, #232]
  404330:	mov	w3, #0x140                 	// #320
  404334:	ldr	x4, [sp, #224]
  404338:	adrp	x5, 40d000 <nftw_cb+0x9c>
  40433c:	add	x5, x5, #0xc75
  404340:	bl	403638 <log_internal_realm@plt>
  404344:	str	w0, [sp, #180]
  404348:	b	404360 <main+0x170>
  40434c:	ldur	w0, [x29, #-84]
  404350:	bl	403648 <abs@plt>
  404354:	mov	w8, wzr
  404358:	subs	w8, w8, w0, uxtb
  40435c:	str	w8, [sp, #180]
  404360:	ldr	w8, [sp, #180]
  404364:	stur	w8, [x29, #-92]
  404368:	mov	w8, #0xffffffff            	// #-1
  40436c:	stur	w8, [x29, #-72]
  404370:	b	405a58 <main+0x1868>
  404374:	ldr	x8, [sp, #240]
  404378:	ldr	x0, [x8]
  40437c:	adrp	x1, 40d000 <nftw_cb+0x9c>
  404380:	add	x1, x1, #0xc93
  404384:	bl	403658 <strcmp@plt>
  404388:	cbnz	w0, 40439c <main+0x1ac>
  40438c:	mov	w8, #0x4567                	// #17767
  404390:	movk	w8, #0x123, lsl #16
  404394:	stur	w8, [x29, #-68]
  404398:	b	4044bc <main+0x2cc>
  40439c:	ldr	x8, [sp, #240]
  4043a0:	ldr	x0, [x8]
  4043a4:	adrp	x1, 40d000 <nftw_cb+0x9c>
  4043a8:	add	x1, x1, #0xc9a
  4043ac:	bl	403658 <strcmp@plt>
  4043b0:	cbnz	w0, 4043c4 <main+0x1d4>
  4043b4:	mov	w8, #0xfedc                	// #65244
  4043b8:	movk	w8, #0x4321, lsl #16
  4043bc:	stur	w8, [x29, #-68]
  4043c0:	b	4044bc <main+0x2cc>
  4043c4:	ldr	x8, [sp, #240]
  4043c8:	ldr	x0, [x8]
  4043cc:	adrp	x1, 40d000 <nftw_cb+0x9c>
  4043d0:	add	x1, x1, #0xca3
  4043d4:	bl	403658 <strcmp@plt>
  4043d8:	cbnz	w0, 4043ec <main+0x1fc>
  4043dc:	mov	w8, #0x123                 	// #291
  4043e0:	movk	w8, #0xcdef, lsl #16
  4043e4:	stur	w8, [x29, #-68]
  4043e8:	b	4044bc <main+0x2cc>
  4043ec:	ldr	x8, [sp, #240]
  4043f0:	ldr	x0, [x8]
  4043f4:	adrp	x1, 40d000 <nftw_cb+0x9c>
  4043f8:	add	x1, x1, #0xca8
  4043fc:	bl	403658 <strcmp@plt>
  404400:	cbnz	w0, 404414 <main+0x224>
  404404:	mov	w8, #0x4543                	// #17731
  404408:	movk	w8, #0x4558, lsl #16
  40440c:	stur	w8, [x29, #-68]
  404410:	b	4044bc <main+0x2cc>
  404414:	ldr	x8, [sp, #240]
  404418:	ldr	x0, [x8]
  40441c:	adrp	x1, 40d000 <nftw_cb+0x9c>
  404420:	add	x1, x1, #0xcae
  404424:	bl	403658 <strcmp@plt>
  404428:	cbnz	w0, 404434 <main+0x244>
  40442c:	stur	wzr, [x29, #-68]
  404430:	b	4044bc <main+0x2cc>
  404434:	mov	w8, #0x3                   	// #3
  404438:	stur	w8, [x29, #-96]
  40443c:	stur	wzr, [x29, #-100]
  404440:	stur	wzr, [x29, #-104]
  404444:	ldur	w0, [x29, #-104]
  404448:	bl	403628 <log_get_max_level_realm@plt>
  40444c:	ldur	w8, [x29, #-96]
  404450:	and	w8, w8, #0x7
  404454:	cmp	w0, w8
  404458:	b.lt	404494 <main+0x2a4>  // b.tstop
  40445c:	ldur	w8, [x29, #-104]
  404460:	ldur	w9, [x29, #-96]
  404464:	orr	w0, w9, w8, lsl #10
  404468:	ldur	w1, [x29, #-100]
  40446c:	ldr	x10, [sp, #240]
  404470:	ldr	x6, [x10]
  404474:	ldr	x2, [sp, #232]
  404478:	mov	w3, #0x150                 	// #336
  40447c:	ldr	x4, [sp, #224]
  404480:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404484:	add	x5, x5, #0xcb3
  404488:	bl	403638 <log_internal_realm@plt>
  40448c:	str	w0, [sp, #176]
  404490:	b	4044a8 <main+0x2b8>
  404494:	ldur	w0, [x29, #-100]
  404498:	bl	403648 <abs@plt>
  40449c:	mov	w8, wzr
  4044a0:	subs	w8, w8, w0, uxtb
  4044a4:	str	w8, [sp, #176]
  4044a8:	ldr	w8, [sp, #176]
  4044ac:	stur	w8, [x29, #-108]
  4044b0:	mov	w8, #0xffffffea            	// #-22
  4044b4:	stur	w8, [x29, #-72]
  4044b8:	b	405a58 <main+0x1868>
  4044bc:	sub	x0, x29, #0x20
  4044c0:	bl	403668 <cg_get_root_path@plt>
  4044c4:	bl	403678 <detect_container@plt>
  4044c8:	cmp	w0, #0x0
  4044cc:	cset	w8, gt
  4044d0:	and	w8, w8, #0x1
  4044d4:	sturb	w8, [x29, #-21]
  4044d8:	ldurb	w8, [x29, #-21]
  4044dc:	tbnz	w8, #0, 404558 <main+0x368>
  4044e0:	mov	w8, #0x0                   	// #0
  4044e4:	sturb	w8, [x29, #-109]
  4044e8:	bl	403688 <log_get_target@plt>
  4044ec:	cmp	w0, #0x2
  4044f0:	str	w0, [sp, #172]
  4044f4:	b.eq	40452c <main+0x33c>  // b.none
  4044f8:	b	4044fc <main+0x30c>
  4044fc:	ldr	w8, [sp, #172]
  404500:	cmp	w8, #0x4
  404504:	b.eq	40452c <main+0x33c>  // b.none
  404508:	b	40450c <main+0x31c>
  40450c:	ldr	w8, [sp, #172]
  404510:	subs	w9, w8, #0x6
  404514:	mov	w10, #0x1                   	// #1
  404518:	cmp	w9, #0x1
  40451c:	cset	w9, ls  // ls = plast
  404520:	eor	w9, w9, w10
  404524:	tbnz	w9, #0, 404538 <main+0x348>
  404528:	b	40452c <main+0x33c>
  40452c:	mov	w8, #0x1                   	// #1
  404530:	sturb	w8, [x29, #-109]
  404534:	b	404538 <main+0x348>
  404538:	ldurb	w8, [x29, #-109]
  40453c:	and	w8, w8, #0x1
  404540:	sturb	w8, [x29, #-110]
  404544:	ldurb	w8, [x29, #-110]
  404548:	tbnz	w8, #0, 404550 <main+0x360>
  40454c:	b	404558 <main+0x368>
  404550:	mov	w0, #0x4                   	// #4
  404554:	bl	406254 <bump_sysctl_printk_log_level>
  404558:	adrp	x0, 40d000 <nftw_cb+0x9c>
  40455c:	add	x0, x0, #0xcc8
  404560:	bl	403698 <getenv@plt>
  404564:	cmp	x0, #0x0
  404568:	cset	w8, ne  // ne = any
  40456c:	and	w8, w8, #0x1
  404570:	sturb	w8, [x29, #-22]
  404574:	adrp	x0, 40d000 <nftw_cb+0x9c>
  404578:	add	x0, x0, #0xcd6
  40457c:	bl	403698 <getenv@plt>
  404580:	stur	x0, [x29, #-64]
  404584:	ldur	x9, [x29, #-64]
  404588:	cbz	x9, 404624 <main+0x434>
  40458c:	ldur	x0, [x29, #-64]
  404590:	bl	4036a8 <watchdog_set_device@plt>
  404594:	stur	w0, [x29, #-72]
  404598:	ldur	w8, [x29, #-72]
  40459c:	cmp	w8, #0x0
  4045a0:	cset	w8, ge  // ge = tcont
  4045a4:	tbnz	w8, #0, 404624 <main+0x434>
  4045a8:	mov	w8, #0x4                   	// #4
  4045ac:	stur	w8, [x29, #-116]
  4045b0:	ldur	w8, [x29, #-72]
  4045b4:	stur	w8, [x29, #-120]
  4045b8:	stur	wzr, [x29, #-124]
  4045bc:	ldur	w0, [x29, #-124]
  4045c0:	bl	403628 <log_get_max_level_realm@plt>
  4045c4:	ldur	w8, [x29, #-116]
  4045c8:	and	w8, w8, #0x7
  4045cc:	cmp	w0, w8
  4045d0:	b.lt	404608 <main+0x418>  // b.tstop
  4045d4:	ldur	w8, [x29, #-124]
  4045d8:	ldur	w9, [x29, #-116]
  4045dc:	orr	w0, w9, w8, lsl #10
  4045e0:	ldur	w1, [x29, #-120]
  4045e4:	ldur	x6, [x29, #-64]
  4045e8:	ldr	x2, [sp, #232]
  4045ec:	mov	w3, #0x16a                 	// #362
  4045f0:	ldr	x4, [sp, #224]
  4045f4:	adrp	x5, 40d000 <nftw_cb+0x9c>
  4045f8:	add	x5, x5, #0xce6
  4045fc:	bl	403638 <log_internal_realm@plt>
  404600:	str	w0, [sp, #168]
  404604:	b	40461c <main+0x42c>
  404608:	ldur	w0, [x29, #-120]
  40460c:	bl	403648 <abs@plt>
  404610:	mov	w8, wzr
  404614:	subs	w8, w8, w0, uxtb
  404618:	str	w8, [sp, #168]
  40461c:	ldr	w8, [sp, #168]
  404620:	stur	w8, [x29, #-128]
  404624:	mov	w0, #0x3                   	// #3
  404628:	bl	4036b8 <mlockall@plt>
  40462c:	ldurb	w8, [x29, #-21]
  404630:	tbnz	w8, #0, 404638 <main+0x448>
  404634:	bl	406364 <sync_with_progress>
  404638:	bl	4036c8 <disable_coredumps@plt>
  40463c:	mov	w8, #0x6                   	// #6
  404640:	stur	w8, [x29, #-132]
  404644:	stur	wzr, [x29, #-136]
  404648:	stur	wzr, [x29, #-140]
  40464c:	ldur	w0, [x29, #-140]
  404650:	bl	403628 <log_get_max_level_realm@plt>
  404654:	ldur	w8, [x29, #-132]
  404658:	and	w8, w8, #0x7
  40465c:	cmp	w0, w8
  404660:	b.lt	404694 <main+0x4a4>  // b.tstop
  404664:	ldur	w8, [x29, #-140]
  404668:	ldur	w9, [x29, #-132]
  40466c:	orr	w0, w9, w8, lsl #10
  404670:	ldur	w1, [x29, #-136]
  404674:	ldr	x2, [sp, #232]
  404678:	mov	w3, #0x179                 	// #377
  40467c:	ldr	x4, [sp, #224]
  404680:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404684:	add	x5, x5, #0xd18
  404688:	bl	403638 <log_internal_realm@plt>
  40468c:	str	w0, [sp, #164]
  404690:	b	4046a8 <main+0x4b8>
  404694:	ldur	w0, [x29, #-136]
  404698:	bl	403648 <abs@plt>
  40469c:	mov	w8, wzr
  4046a0:	subs	w8, w8, w0, uxtb
  4046a4:	str	w8, [sp, #164]
  4046a8:	ldr	w8, [sp, #164]
  4046ac:	stur	w8, [x29, #-144]
  4046b0:	adrp	x9, 430000 <arg_timeout>
  4046b4:	add	x9, x9, #0x0
  4046b8:	ldr	x3, [x9]
  4046bc:	mov	w0, #0xf                   	// #15
  4046c0:	mov	w8, #0x1                   	// #1
  4046c4:	and	w1, w8, #0x1
  4046c8:	and	w2, w8, #0x1
  4046cc:	bl	40a6a4 <broadcast_signal>
  4046d0:	mov	w8, #0x6                   	// #6
  4046d4:	stur	w8, [x29, #-148]
  4046d8:	stur	wzr, [x29, #-152]
  4046dc:	stur	wzr, [x29, #-156]
  4046e0:	ldur	w8, [x29, #-156]
  4046e4:	mov	w0, w8
  4046e8:	bl	403628 <log_get_max_level_realm@plt>
  4046ec:	ldur	w8, [x29, #-148]
  4046f0:	and	w8, w8, #0x7
  4046f4:	cmp	w0, w8
  4046f8:	b.lt	40472c <main+0x53c>  // b.tstop
  4046fc:	ldur	w8, [x29, #-156]
  404700:	ldur	w9, [x29, #-148]
  404704:	orr	w0, w9, w8, lsl #10
  404708:	ldur	w1, [x29, #-152]
  40470c:	ldr	x2, [sp, #232]
  404710:	mov	w3, #0x17c                 	// #380
  404714:	ldr	x4, [sp, #224]
  404718:	adrp	x5, 40d000 <nftw_cb+0x9c>
  40471c:	add	x5, x5, #0xd42
  404720:	bl	403638 <log_internal_realm@plt>
  404724:	str	w0, [sp, #160]
  404728:	b	404740 <main+0x550>
  40472c:	ldur	w0, [x29, #-152]
  404730:	bl	403648 <abs@plt>
  404734:	mov	w8, wzr
  404738:	subs	w8, w8, w0, uxtb
  40473c:	str	w8, [sp, #160]
  404740:	ldr	w8, [sp, #160]
  404744:	stur	w8, [x29, #-160]
  404748:	adrp	x9, 430000 <arg_timeout>
  40474c:	add	x9, x9, #0x0
  404750:	ldr	x3, [x9]
  404754:	mov	w0, #0x9                   	// #9
  404758:	mov	w8, #0x1                   	// #1
  40475c:	and	w1, w8, #0x1
  404760:	mov	w10, wzr
  404764:	and	w2, w10, #0x1
  404768:	str	w8, [sp, #156]
  40476c:	bl	40a6a4 <broadcast_signal>
  404770:	ldurb	w8, [x29, #-21]
  404774:	eor	w8, w8, #0x1
  404778:	ldr	w10, [sp, #156]
  40477c:	and	w8, w8, w10
  404780:	sturb	w8, [x29, #-17]
  404784:	ldurb	w8, [x29, #-21]
  404788:	eor	w8, w8, w10
  40478c:	and	w8, w8, w10
  404790:	sturb	w8, [x29, #-18]
  404794:	ldurb	w8, [x29, #-21]
  404798:	eor	w8, w8, w10
  40479c:	and	w8, w8, w10
  4047a0:	sturb	w8, [x29, #-19]
  4047a4:	ldurb	w8, [x29, #-21]
  4047a8:	eor	w8, w8, w10
  4047ac:	and	w8, w8, w10
  4047b0:	sturb	w8, [x29, #-20]
  4047b4:	ldurb	w8, [x29, #-21]
  4047b8:	mov	w11, #0x0                   	// #0
  4047bc:	str	w11, [sp, #152]
  4047c0:	tbnz	w8, #0, 4047f0 <main+0x600>
  4047c4:	bl	4036d8 <in_initrd@plt>
  4047c8:	mov	w8, #0x0                   	// #0
  4047cc:	str	w8, [sp, #152]
  4047d0:	tbnz	w0, #0, 4047f0 <main+0x600>
  4047d4:	adrp	x0, 40d000 <nftw_cb+0x9c>
  4047d8:	add	x0, x0, #0xd6c
  4047dc:	mov	w1, #0x1                   	// #1
  4047e0:	bl	4036e8 <access@plt>
  4047e4:	cmp	w0, #0x0
  4047e8:	cset	w8, eq  // eq = none
  4047ec:	str	w8, [sp, #152]
  4047f0:	ldr	w8, [sp, #152]
  4047f4:	and	w8, w8, #0x1
  4047f8:	sturb	w8, [x29, #-23]
  4047fc:	mov	w8, #0x0                   	// #0
  404800:	sturb	w8, [x29, #-161]
  404804:	ldurb	w8, [x29, #-22]
  404808:	tbnz	w8, #0, 404810 <main+0x620>
  40480c:	b	404814 <main+0x624>
  404810:	bl	4036f8 <watchdog_ping@plt>
  404814:	ldur	x8, [x29, #-32]
  404818:	cbz	x8, 404834 <main+0x644>
  40481c:	ldur	x1, [x29, #-32]
  404820:	adrp	x0, 40d000 <nftw_cb+0x9c>
  404824:	add	x0, x0, #0xd84
  404828:	mov	w8, wzr
  40482c:	and	w2, w8, #0x1
  404830:	bl	403708 <cg_trim@plt>
  404834:	ldurb	w8, [x29, #-17]
  404838:	tbnz	w8, #0, 404840 <main+0x650>
  40483c:	b	404a50 <main+0x860>
  404840:	mov	w8, #0x6                   	// #6
  404844:	stur	w8, [x29, #-168]
  404848:	stur	wzr, [x29, #-172]
  40484c:	stur	wzr, [x29, #-176]
  404850:	ldur	w0, [x29, #-176]
  404854:	bl	403628 <log_get_max_level_realm@plt>
  404858:	ldur	w8, [x29, #-168]
  40485c:	and	w8, w8, #0x7
  404860:	cmp	w0, w8
  404864:	b.lt	404898 <main+0x6a8>  // b.tstop
  404868:	ldur	w8, [x29, #-176]
  40486c:	ldur	w9, [x29, #-168]
  404870:	orr	w0, w9, w8, lsl #10
  404874:	ldur	w1, [x29, #-172]
  404878:	ldr	x2, [sp, #232]
  40487c:	mov	w3, #0x194                 	// #404
  404880:	ldr	x4, [sp, #224]
  404884:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404888:	add	x5, x5, #0xd8d
  40488c:	bl	403638 <log_internal_realm@plt>
  404890:	str	w0, [sp, #148]
  404894:	b	4048ac <main+0x6bc>
  404898:	ldur	w0, [x29, #-172]
  40489c:	bl	403648 <abs@plt>
  4048a0:	mov	w8, wzr
  4048a4:	subs	w8, w8, w0, uxtb
  4048a8:	str	w8, [sp, #148]
  4048ac:	ldr	w8, [sp, #148]
  4048b0:	stur	w8, [x29, #-180]
  4048b4:	ldur	w1, [x29, #-76]
  4048b8:	sub	x0, x29, #0xa1
  4048bc:	bl	4082c8 <umount_all>
  4048c0:	stur	w0, [x29, #-72]
  4048c4:	ldur	w8, [x29, #-72]
  4048c8:	cbnz	w8, 40494c <main+0x75c>
  4048cc:	mov	w8, #0x0                   	// #0
  4048d0:	sturb	w8, [x29, #-17]
  4048d4:	mov	w8, #0x6                   	// #6
  4048d8:	stur	w8, [x29, #-184]
  4048dc:	stur	wzr, [x29, #-188]
  4048e0:	stur	wzr, [x29, #-192]
  4048e4:	ldur	w0, [x29, #-192]
  4048e8:	bl	403628 <log_get_max_level_realm@plt>
  4048ec:	ldur	w8, [x29, #-184]
  4048f0:	and	w8, w8, #0x7
  4048f4:	cmp	w0, w8
  4048f8:	b.lt	40492c <main+0x73c>  // b.tstop
  4048fc:	ldur	w8, [x29, #-192]
  404900:	ldur	w9, [x29, #-184]
  404904:	orr	w0, w9, w8, lsl #10
  404908:	ldur	w1, [x29, #-188]
  40490c:	ldr	x2, [sp, #232]
  404910:	mov	w3, #0x198                 	// #408
  404914:	ldr	x4, [sp, #224]
  404918:	adrp	x5, 40d000 <nftw_cb+0x9c>
  40491c:	add	x5, x5, #0xda6
  404920:	bl	403638 <log_internal_realm@plt>
  404924:	str	w0, [sp, #144]
  404928:	b	404940 <main+0x750>
  40492c:	ldur	w0, [x29, #-188]
  404930:	bl	403648 <abs@plt>
  404934:	mov	w8, wzr
  404938:	subs	w8, w8, w0, uxtb
  40493c:	str	w8, [sp, #144]
  404940:	ldr	w8, [sp, #144]
  404944:	stur	w8, [x29, #-196]
  404948:	b	404a50 <main+0x860>
  40494c:	ldur	w8, [x29, #-72]
  404950:	cmp	w8, #0x0
  404954:	cset	w8, le
  404958:	tbnz	w8, #0, 4049d8 <main+0x7e8>
  40495c:	mov	w8, #0x6                   	// #6
  404960:	stur	w8, [x29, #-200]
  404964:	stur	wzr, [x29, #-204]
  404968:	stur	wzr, [x29, #-208]
  40496c:	ldur	w0, [x29, #-208]
  404970:	bl	403628 <log_get_max_level_realm@plt>
  404974:	ldur	w8, [x29, #-200]
  404978:	and	w8, w8, #0x7
  40497c:	cmp	w0, w8
  404980:	b.lt	4049b8 <main+0x7c8>  // b.tstop
  404984:	ldur	w8, [x29, #-208]
  404988:	ldur	w9, [x29, #-200]
  40498c:	orr	w0, w9, w8, lsl #10
  404990:	ldur	w1, [x29, #-204]
  404994:	ldur	w6, [x29, #-72]
  404998:	ldr	x2, [sp, #232]
  40499c:	mov	w3, #0x19a                 	// #410
  4049a0:	ldr	x4, [sp, #224]
  4049a4:	adrp	x5, 40d000 <nftw_cb+0x9c>
  4049a8:	add	x5, x5, #0xdc1
  4049ac:	bl	403638 <log_internal_realm@plt>
  4049b0:	str	w0, [sp, #140]
  4049b4:	b	4049cc <main+0x7dc>
  4049b8:	ldur	w0, [x29, #-204]
  4049bc:	bl	403648 <abs@plt>
  4049c0:	mov	w8, wzr
  4049c4:	subs	w8, w8, w0, uxtb
  4049c8:	str	w8, [sp, #140]
  4049cc:	ldr	w8, [sp, #140]
  4049d0:	stur	w8, [x29, #-212]
  4049d4:	b	404a50 <main+0x860>
  4049d8:	mov	w8, #0x3                   	// #3
  4049dc:	stur	w8, [x29, #-216]
  4049e0:	ldur	w8, [x29, #-72]
  4049e4:	stur	w8, [x29, #-220]
  4049e8:	stur	wzr, [x29, #-224]
  4049ec:	ldur	w0, [x29, #-224]
  4049f0:	bl	403628 <log_get_max_level_realm@plt>
  4049f4:	ldur	w8, [x29, #-216]
  4049f8:	and	w8, w8, #0x7
  4049fc:	cmp	w0, w8
  404a00:	b.lt	404a34 <main+0x844>  // b.tstop
  404a04:	ldur	w8, [x29, #-224]
  404a08:	ldur	w9, [x29, #-216]
  404a0c:	orr	w0, w9, w8, lsl #10
  404a10:	ldur	w1, [x29, #-220]
  404a14:	ldr	x2, [sp, #232]
  404a18:	mov	w3, #0x19c                 	// #412
  404a1c:	ldr	x4, [sp, #224]
  404a20:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404a24:	add	x5, x5, #0xdea
  404a28:	bl	403638 <log_internal_realm@plt>
  404a2c:	str	w0, [sp, #136]
  404a30:	b	404a48 <main+0x858>
  404a34:	ldur	w0, [x29, #-220]
  404a38:	bl	403648 <abs@plt>
  404a3c:	mov	w8, wzr
  404a40:	subs	w8, w8, w0, uxtb
  404a44:	str	w8, [sp, #136]
  404a48:	ldr	w8, [sp, #136]
  404a4c:	stur	w8, [x29, #-228]
  404a50:	ldurb	w8, [x29, #-18]
  404a54:	tbnz	w8, #0, 404a5c <main+0x86c>
  404a58:	b	404c68 <main+0xa78>
  404a5c:	mov	w8, #0x6                   	// #6
  404a60:	stur	w8, [x29, #-232]
  404a64:	stur	wzr, [x29, #-236]
  404a68:	stur	wzr, [x29, #-240]
  404a6c:	ldur	w0, [x29, #-240]
  404a70:	bl	403628 <log_get_max_level_realm@plt>
  404a74:	ldur	w8, [x29, #-232]
  404a78:	and	w8, w8, #0x7
  404a7c:	cmp	w0, w8
  404a80:	b.lt	404ab4 <main+0x8c4>  // b.tstop
  404a84:	ldur	w8, [x29, #-240]
  404a88:	ldur	w9, [x29, #-232]
  404a8c:	orr	w0, w9, w8, lsl #10
  404a90:	ldur	w1, [x29, #-236]
  404a94:	ldr	x2, [sp, #232]
  404a98:	mov	w3, #0x1a0                 	// #416
  404a9c:	ldr	x4, [sp, #224]
  404aa0:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404aa4:	add	x5, x5, #0xe0d
  404aa8:	bl	403638 <log_internal_realm@plt>
  404aac:	str	w0, [sp, #132]
  404ab0:	b	404ac8 <main+0x8d8>
  404ab4:	ldur	w0, [x29, #-236]
  404ab8:	bl	403648 <abs@plt>
  404abc:	mov	w8, wzr
  404ac0:	subs	w8, w8, w0, uxtb
  404ac4:	str	w8, [sp, #132]
  404ac8:	ldr	w8, [sp, #132]
  404acc:	stur	w8, [x29, #-244]
  404ad0:	sub	x0, x29, #0xa1
  404ad4:	bl	40846c <swapoff_all>
  404ad8:	stur	w0, [x29, #-72]
  404adc:	ldur	w8, [x29, #-72]
  404ae0:	cbnz	w8, 404b64 <main+0x974>
  404ae4:	mov	w8, #0x0                   	// #0
  404ae8:	sturb	w8, [x29, #-18]
  404aec:	mov	w8, #0x6                   	// #6
  404af0:	stur	w8, [x29, #-248]
  404af4:	stur	wzr, [x29, #-252]
  404af8:	stur	wzr, [x29, #-256]
  404afc:	ldur	w0, [x29, #-256]
  404b00:	bl	403628 <log_get_max_level_realm@plt>
  404b04:	ldur	w8, [x29, #-248]
  404b08:	and	w8, w8, #0x7
  404b0c:	cmp	w0, w8
  404b10:	b.lt	404b44 <main+0x954>  // b.tstop
  404b14:	ldur	w8, [x29, #-256]
  404b18:	ldur	w9, [x29, #-248]
  404b1c:	orr	w0, w9, w8, lsl #10
  404b20:	ldur	w1, [x29, #-252]
  404b24:	ldr	x2, [sp, #232]
  404b28:	mov	w3, #0x1a4                 	// #420
  404b2c:	ldr	x4, [sp, #224]
  404b30:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404b34:	add	x5, x5, #0xe21
  404b38:	bl	403638 <log_internal_realm@plt>
  404b3c:	str	w0, [sp, #128]
  404b40:	b	404b58 <main+0x968>
  404b44:	ldur	w0, [x29, #-252]
  404b48:	bl	403648 <abs@plt>
  404b4c:	mov	w8, wzr
  404b50:	subs	w8, w8, w0, uxtb
  404b54:	str	w8, [sp, #128]
  404b58:	ldr	w8, [sp, #128]
  404b5c:	str	w8, [sp, #668]
  404b60:	b	404c68 <main+0xa78>
  404b64:	ldur	w8, [x29, #-72]
  404b68:	cmp	w8, #0x0
  404b6c:	cset	w8, le
  404b70:	tbnz	w8, #0, 404bf0 <main+0xa00>
  404b74:	mov	w8, #0x6                   	// #6
  404b78:	str	w8, [sp, #664]
  404b7c:	str	wzr, [sp, #660]
  404b80:	str	wzr, [sp, #656]
  404b84:	ldr	w0, [sp, #656]
  404b88:	bl	403628 <log_get_max_level_realm@plt>
  404b8c:	ldr	w8, [sp, #664]
  404b90:	and	w8, w8, #0x7
  404b94:	cmp	w0, w8
  404b98:	b.lt	404bd0 <main+0x9e0>  // b.tstop
  404b9c:	ldr	w8, [sp, #656]
  404ba0:	ldr	w9, [sp, #664]
  404ba4:	orr	w0, w9, w8, lsl #10
  404ba8:	ldr	w1, [sp, #660]
  404bac:	ldur	w6, [x29, #-72]
  404bb0:	ldr	x2, [sp, #232]
  404bb4:	mov	w3, #0x1a6                 	// #422
  404bb8:	ldr	x4, [sp, #224]
  404bbc:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404bc0:	add	x5, x5, #0xe38
  404bc4:	bl	403638 <log_internal_realm@plt>
  404bc8:	str	w0, [sp, #124]
  404bcc:	b	404be4 <main+0x9f4>
  404bd0:	ldr	w0, [sp, #660]
  404bd4:	bl	403648 <abs@plt>
  404bd8:	mov	w8, wzr
  404bdc:	subs	w8, w8, w0, uxtb
  404be0:	str	w8, [sp, #124]
  404be4:	ldr	w8, [sp, #124]
  404be8:	str	w8, [sp, #652]
  404bec:	b	404c68 <main+0xa78>
  404bf0:	mov	w8, #0x3                   	// #3
  404bf4:	str	w8, [sp, #648]
  404bf8:	ldur	w8, [x29, #-72]
  404bfc:	str	w8, [sp, #644]
  404c00:	str	wzr, [sp, #640]
  404c04:	ldr	w0, [sp, #640]
  404c08:	bl	403628 <log_get_max_level_realm@plt>
  404c0c:	ldr	w8, [sp, #648]
  404c10:	and	w8, w8, #0x7
  404c14:	cmp	w0, w8
  404c18:	b.lt	404c4c <main+0xa5c>  // b.tstop
  404c1c:	ldr	w8, [sp, #640]
  404c20:	ldr	w9, [sp, #648]
  404c24:	orr	w0, w9, w8, lsl #10
  404c28:	ldr	w1, [sp, #644]
  404c2c:	ldr	x2, [sp, #232]
  404c30:	mov	w3, #0x1a8                 	// #424
  404c34:	ldr	x4, [sp, #224]
  404c38:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404c3c:	add	x5, x5, #0xe5c
  404c40:	bl	403638 <log_internal_realm@plt>
  404c44:	str	w0, [sp, #120]
  404c48:	b	404c60 <main+0xa70>
  404c4c:	ldr	w0, [sp, #644]
  404c50:	bl	403648 <abs@plt>
  404c54:	mov	w8, wzr
  404c58:	subs	w8, w8, w0, uxtb
  404c5c:	str	w8, [sp, #120]
  404c60:	ldr	w8, [sp, #120]
  404c64:	str	w8, [sp, #636]
  404c68:	ldurb	w8, [x29, #-19]
  404c6c:	tbnz	w8, #0, 404c74 <main+0xa84>
  404c70:	b	404e84 <main+0xc94>
  404c74:	mov	w8, #0x6                   	// #6
  404c78:	str	w8, [sp, #632]
  404c7c:	str	wzr, [sp, #628]
  404c80:	str	wzr, [sp, #624]
  404c84:	ldr	w0, [sp, #624]
  404c88:	bl	403628 <log_get_max_level_realm@plt>
  404c8c:	ldr	w8, [sp, #632]
  404c90:	and	w8, w8, #0x7
  404c94:	cmp	w0, w8
  404c98:	b.lt	404ccc <main+0xadc>  // b.tstop
  404c9c:	ldr	w8, [sp, #624]
  404ca0:	ldr	w9, [sp, #632]
  404ca4:	orr	w0, w9, w8, lsl #10
  404ca8:	ldr	w1, [sp, #628]
  404cac:	ldr	x2, [sp, #232]
  404cb0:	mov	w3, #0x1ac                 	// #428
  404cb4:	ldr	x4, [sp, #224]
  404cb8:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404cbc:	add	x5, x5, #0xe7b
  404cc0:	bl	403638 <log_internal_realm@plt>
  404cc4:	str	w0, [sp, #116]
  404cc8:	b	404ce0 <main+0xaf0>
  404ccc:	ldr	w0, [sp, #628]
  404cd0:	bl	403648 <abs@plt>
  404cd4:	mov	w8, wzr
  404cd8:	subs	w8, w8, w0, uxtb
  404cdc:	str	w8, [sp, #116]
  404ce0:	ldr	w8, [sp, #116]
  404ce4:	str	w8, [sp, #620]
  404ce8:	ldur	w1, [x29, #-76]
  404cec:	sub	x0, x29, #0xa1
  404cf0:	bl	4087ac <loopback_detach_all>
  404cf4:	stur	w0, [x29, #-72]
  404cf8:	ldur	w8, [x29, #-72]
  404cfc:	cbnz	w8, 404d80 <main+0xb90>
  404d00:	mov	w8, #0x0                   	// #0
  404d04:	sturb	w8, [x29, #-19]
  404d08:	mov	w8, #0x6                   	// #6
  404d0c:	str	w8, [sp, #616]
  404d10:	str	wzr, [sp, #612]
  404d14:	str	wzr, [sp, #608]
  404d18:	ldr	w0, [sp, #608]
  404d1c:	bl	403628 <log_get_max_level_realm@plt>
  404d20:	ldr	w8, [sp, #616]
  404d24:	and	w8, w8, #0x7
  404d28:	cmp	w0, w8
  404d2c:	b.lt	404d60 <main+0xb70>  // b.tstop
  404d30:	ldr	w8, [sp, #608]
  404d34:	ldr	w9, [sp, #616]
  404d38:	orr	w0, w9, w8, lsl #10
  404d3c:	ldr	w1, [sp, #612]
  404d40:	ldr	x2, [sp, #232]
  404d44:	mov	w3, #0x1b0                 	// #432
  404d48:	ldr	x4, [sp, #224]
  404d4c:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404d50:	add	x5, x5, #0xe93
  404d54:	bl	403638 <log_internal_realm@plt>
  404d58:	str	w0, [sp, #112]
  404d5c:	b	404d74 <main+0xb84>
  404d60:	ldr	w0, [sp, #612]
  404d64:	bl	403648 <abs@plt>
  404d68:	mov	w8, wzr
  404d6c:	subs	w8, w8, w0, uxtb
  404d70:	str	w8, [sp, #112]
  404d74:	ldr	w8, [sp, #112]
  404d78:	str	w8, [sp, #604]
  404d7c:	b	404e84 <main+0xc94>
  404d80:	ldur	w8, [x29, #-72]
  404d84:	cmp	w8, #0x0
  404d88:	cset	w8, le
  404d8c:	tbnz	w8, #0, 404e0c <main+0xc1c>
  404d90:	mov	w8, #0x6                   	// #6
  404d94:	str	w8, [sp, #600]
  404d98:	str	wzr, [sp, #596]
  404d9c:	str	wzr, [sp, #592]
  404da0:	ldr	w0, [sp, #592]
  404da4:	bl	403628 <log_get_max_level_realm@plt>
  404da8:	ldr	w8, [sp, #600]
  404dac:	and	w8, w8, #0x7
  404db0:	cmp	w0, w8
  404db4:	b.lt	404dec <main+0xbfc>  // b.tstop
  404db8:	ldr	w8, [sp, #592]
  404dbc:	ldr	w9, [sp, #600]
  404dc0:	orr	w0, w9, w8, lsl #10
  404dc4:	ldr	w1, [sp, #596]
  404dc8:	ldur	w6, [x29, #-72]
  404dcc:	ldr	x2, [sp, #232]
  404dd0:	mov	w3, #0x1b2                 	// #434
  404dd4:	ldr	x4, [sp, #224]
  404dd8:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404ddc:	add	x5, x5, #0xeae
  404de0:	bl	403638 <log_internal_realm@plt>
  404de4:	str	w0, [sp, #108]
  404de8:	b	404e00 <main+0xc10>
  404dec:	ldr	w0, [sp, #596]
  404df0:	bl	403648 <abs@plt>
  404df4:	mov	w8, wzr
  404df8:	subs	w8, w8, w0, uxtb
  404dfc:	str	w8, [sp, #108]
  404e00:	ldr	w8, [sp, #108]
  404e04:	str	w8, [sp, #588]
  404e08:	b	404e84 <main+0xc94>
  404e0c:	mov	w8, #0x3                   	// #3
  404e10:	str	w8, [sp, #584]
  404e14:	ldur	w8, [x29, #-72]
  404e18:	str	w8, [sp, #580]
  404e1c:	str	wzr, [sp, #576]
  404e20:	ldr	w0, [sp, #576]
  404e24:	bl	403628 <log_get_max_level_realm@plt>
  404e28:	ldr	w8, [sp, #584]
  404e2c:	and	w8, w8, #0x7
  404e30:	cmp	w0, w8
  404e34:	b.lt	404e68 <main+0xc78>  // b.tstop
  404e38:	ldr	w8, [sp, #576]
  404e3c:	ldr	w9, [sp, #584]
  404e40:	orr	w0, w9, w8, lsl #10
  404e44:	ldr	w1, [sp, #580]
  404e48:	ldr	x2, [sp, #232]
  404e4c:	mov	w3, #0x1b4                 	// #436
  404e50:	ldr	x4, [sp, #224]
  404e54:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404e58:	add	x5, x5, #0xed6
  404e5c:	bl	403638 <log_internal_realm@plt>
  404e60:	str	w0, [sp, #104]
  404e64:	b	404e7c <main+0xc8c>
  404e68:	ldr	w0, [sp, #580]
  404e6c:	bl	403648 <abs@plt>
  404e70:	mov	w8, wzr
  404e74:	subs	w8, w8, w0, uxtb
  404e78:	str	w8, [sp, #104]
  404e7c:	ldr	w8, [sp, #104]
  404e80:	str	w8, [sp, #572]
  404e84:	ldurb	w8, [x29, #-20]
  404e88:	tbnz	w8, #0, 404e90 <main+0xca0>
  404e8c:	b	4050a0 <main+0xeb0>
  404e90:	mov	w8, #0x6                   	// #6
  404e94:	str	w8, [sp, #568]
  404e98:	str	wzr, [sp, #564]
  404e9c:	str	wzr, [sp, #560]
  404ea0:	ldr	w0, [sp, #560]
  404ea4:	bl	403628 <log_get_max_level_realm@plt>
  404ea8:	ldr	w8, [sp, #568]
  404eac:	and	w8, w8, #0x7
  404eb0:	cmp	w0, w8
  404eb4:	b.lt	404ee8 <main+0xcf8>  // b.tstop
  404eb8:	ldr	w8, [sp, #560]
  404ebc:	ldr	w9, [sp, #568]
  404ec0:	orr	w0, w9, w8, lsl #10
  404ec4:	ldr	w1, [sp, #564]
  404ec8:	ldr	x2, [sp, #232]
  404ecc:	mov	w3, #0x1b8                 	// #440
  404ed0:	ldr	x4, [sp, #224]
  404ed4:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404ed8:	add	x5, x5, #0xef8
  404edc:	bl	403638 <log_internal_realm@plt>
  404ee0:	str	w0, [sp, #100]
  404ee4:	b	404efc <main+0xd0c>
  404ee8:	ldr	w0, [sp, #564]
  404eec:	bl	403648 <abs@plt>
  404ef0:	mov	w8, wzr
  404ef4:	subs	w8, w8, w0, uxtb
  404ef8:	str	w8, [sp, #100]
  404efc:	ldr	w8, [sp, #100]
  404f00:	str	w8, [sp, #556]
  404f04:	ldur	w1, [x29, #-76]
  404f08:	sub	x0, x29, #0xa1
  404f0c:	bl	408f00 <dm_detach_all>
  404f10:	stur	w0, [x29, #-72]
  404f14:	ldur	w8, [x29, #-72]
  404f18:	cbnz	w8, 404f9c <main+0xdac>
  404f1c:	mov	w8, #0x0                   	// #0
  404f20:	sturb	w8, [x29, #-20]
  404f24:	mov	w8, #0x6                   	// #6
  404f28:	str	w8, [sp, #552]
  404f2c:	str	wzr, [sp, #548]
  404f30:	str	wzr, [sp, #544]
  404f34:	ldr	w0, [sp, #544]
  404f38:	bl	403628 <log_get_max_level_realm@plt>
  404f3c:	ldr	w8, [sp, #552]
  404f40:	and	w8, w8, #0x7
  404f44:	cmp	w0, w8
  404f48:	b.lt	404f7c <main+0xd8c>  // b.tstop
  404f4c:	ldr	w8, [sp, #544]
  404f50:	ldr	w9, [sp, #552]
  404f54:	orr	w0, w9, w8, lsl #10
  404f58:	ldr	w1, [sp, #548]
  404f5c:	ldr	x2, [sp, #232]
  404f60:	mov	w3, #0x1bc                 	// #444
  404f64:	ldr	x4, [sp, #224]
  404f68:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404f6c:	add	x5, x5, #0xf0e
  404f70:	bl	403638 <log_internal_realm@plt>
  404f74:	str	w0, [sp, #96]
  404f78:	b	404f90 <main+0xda0>
  404f7c:	ldr	w0, [sp, #548]
  404f80:	bl	403648 <abs@plt>
  404f84:	mov	w8, wzr
  404f88:	subs	w8, w8, w0, uxtb
  404f8c:	str	w8, [sp, #96]
  404f90:	ldr	w8, [sp, #96]
  404f94:	str	w8, [sp, #540]
  404f98:	b	4050a0 <main+0xeb0>
  404f9c:	ldur	w8, [x29, #-72]
  404fa0:	cmp	w8, #0x0
  404fa4:	cset	w8, le
  404fa8:	tbnz	w8, #0, 405028 <main+0xe38>
  404fac:	mov	w8, #0x6                   	// #6
  404fb0:	str	w8, [sp, #536]
  404fb4:	str	wzr, [sp, #532]
  404fb8:	str	wzr, [sp, #528]
  404fbc:	ldr	w0, [sp, #528]
  404fc0:	bl	403628 <log_get_max_level_realm@plt>
  404fc4:	ldr	w8, [sp, #536]
  404fc8:	and	w8, w8, #0x7
  404fcc:	cmp	w0, w8
  404fd0:	b.lt	405008 <main+0xe18>  // b.tstop
  404fd4:	ldr	w8, [sp, #528]
  404fd8:	ldr	w9, [sp, #536]
  404fdc:	orr	w0, w9, w8, lsl #10
  404fe0:	ldr	w1, [sp, #532]
  404fe4:	ldur	w6, [x29, #-72]
  404fe8:	ldr	x2, [sp, #232]
  404fec:	mov	w3, #0x1be                 	// #446
  404ff0:	ldr	x4, [sp, #224]
  404ff4:	adrp	x5, 40d000 <nftw_cb+0x9c>
  404ff8:	add	x5, x5, #0xf27
  404ffc:	bl	403638 <log_internal_realm@plt>
  405000:	str	w0, [sp, #92]
  405004:	b	40501c <main+0xe2c>
  405008:	ldr	w0, [sp, #532]
  40500c:	bl	403648 <abs@plt>
  405010:	mov	w8, wzr
  405014:	subs	w8, w8, w0, uxtb
  405018:	str	w8, [sp, #92]
  40501c:	ldr	w8, [sp, #92]
  405020:	str	w8, [sp, #524]
  405024:	b	4050a0 <main+0xeb0>
  405028:	mov	w8, #0x3                   	// #3
  40502c:	str	w8, [sp, #520]
  405030:	ldur	w8, [x29, #-72]
  405034:	str	w8, [sp, #516]
  405038:	str	wzr, [sp, #512]
  40503c:	ldr	w0, [sp, #512]
  405040:	bl	403628 <log_get_max_level_realm@plt>
  405044:	ldr	w8, [sp, #520]
  405048:	and	w8, w8, #0x7
  40504c:	cmp	w0, w8
  405050:	b.lt	405084 <main+0xe94>  // b.tstop
  405054:	ldr	w8, [sp, #512]
  405058:	ldr	w9, [sp, #520]
  40505c:	orr	w0, w9, w8, lsl #10
  405060:	ldr	w1, [sp, #516]
  405064:	ldr	x2, [sp, #232]
  405068:	mov	w3, #0x1c0                 	// #448
  40506c:	ldr	x4, [sp, #224]
  405070:	adrp	x5, 40d000 <nftw_cb+0x9c>
  405074:	add	x5, x5, #0xf4d
  405078:	bl	403638 <log_internal_realm@plt>
  40507c:	str	w0, [sp, #88]
  405080:	b	405098 <main+0xea8>
  405084:	ldr	w0, [sp, #516]
  405088:	bl	403648 <abs@plt>
  40508c:	mov	w8, wzr
  405090:	subs	w8, w8, w0, uxtb
  405094:	str	w8, [sp, #88]
  405098:	ldr	w8, [sp, #88]
  40509c:	str	w8, [sp, #508]
  4050a0:	ldurb	w8, [x29, #-17]
  4050a4:	tbnz	w8, #0, 405138 <main+0xf48>
  4050a8:	ldurb	w8, [x29, #-18]
  4050ac:	tbnz	w8, #0, 405138 <main+0xf48>
  4050b0:	ldurb	w8, [x29, #-19]
  4050b4:	tbnz	w8, #0, 405138 <main+0xf48>
  4050b8:	ldurb	w8, [x29, #-20]
  4050bc:	tbnz	w8, #0, 405138 <main+0xf48>
  4050c0:	mov	w8, #0x6                   	// #6
  4050c4:	str	w8, [sp, #504]
  4050c8:	str	wzr, [sp, #500]
  4050cc:	str	wzr, [sp, #496]
  4050d0:	ldr	w0, [sp, #496]
  4050d4:	bl	403628 <log_get_max_level_realm@plt>
  4050d8:	ldr	w8, [sp, #504]
  4050dc:	and	w8, w8, #0x7
  4050e0:	cmp	w0, w8
  4050e4:	b.lt	405118 <main+0xf28>  // b.tstop
  4050e8:	ldr	w8, [sp, #496]
  4050ec:	ldr	w9, [sp, #504]
  4050f0:	orr	w0, w9, w8, lsl #10
  4050f4:	ldr	w1, [sp, #500]
  4050f8:	ldr	x2, [sp, #232]
  4050fc:	mov	w3, #0x1c4                 	// #452
  405100:	ldr	x4, [sp, #224]
  405104:	adrp	x5, 40d000 <nftw_cb+0x9c>
  405108:	add	x5, x5, #0xf6d
  40510c:	bl	403638 <log_internal_realm@plt>
  405110:	str	w0, [sp, #84]
  405114:	b	40512c <main+0xf3c>
  405118:	ldr	w0, [sp, #500]
  40511c:	bl	403648 <abs@plt>
  405120:	mov	w8, wzr
  405124:	subs	w8, w8, w0, uxtb
  405128:	str	w8, [sp, #84]
  40512c:	ldr	w8, [sp, #84]
  405130:	str	w8, [sp, #492]
  405134:	b	405300 <main+0x1110>
  405138:	ldurb	w8, [x29, #-161]
  40513c:	tbnz	w8, #0, 405160 <main+0xf70>
  405140:	ldur	w8, [x29, #-76]
  405144:	cmp	w8, #0x6
  405148:	b.ne	405160 <main+0xf70>  // b.any
  40514c:	ldurb	w8, [x29, #-23]
  405150:	tbnz	w8, #0, 405160 <main+0xf70>
  405154:	mov	w8, #0x3                   	// #3
  405158:	stur	w8, [x29, #-76]
  40515c:	b	4047fc <main+0x60c>
  405160:	ldurb	w8, [x29, #-161]
  405164:	tbnz	w8, #0, 405234 <main+0x1044>
  405168:	mov	w8, #0x6                   	// #6
  40516c:	str	w8, [sp, #488]
  405170:	str	wzr, [sp, #484]
  405174:	str	wzr, [sp, #480]
  405178:	ldr	w0, [sp, #480]
  40517c:	bl	403628 <log_get_max_level_realm@plt>
  405180:	ldr	w8, [sp, #488]
  405184:	and	w8, w8, #0x7
  405188:	cmp	w0, w8
  40518c:	b.lt	405214 <main+0x1024>  // b.tstop
  405190:	ldr	w8, [sp, #480]
  405194:	ldr	w9, [sp, #488]
  405198:	orr	w0, w9, w8, lsl #10
  40519c:	ldr	w1, [sp, #484]
  4051a0:	ldurb	w8, [x29, #-17]
  4051a4:	tst	w8, #0x1
  4051a8:	ldr	x10, [sp, #216]
  4051ac:	ldr	x11, [sp, #208]
  4051b0:	csel	x6, x10, x11, ne  // ne = any
  4051b4:	ldurb	w8, [x29, #-18]
  4051b8:	tst	w8, #0x1
  4051bc:	ldr	x12, [sp, #200]
  4051c0:	csel	x7, x12, x11, ne  // ne = any
  4051c4:	ldurb	w8, [x29, #-19]
  4051c8:	tst	w8, #0x1
  4051cc:	ldr	x13, [sp, #192]
  4051d0:	csel	x14, x13, x11, ne  // ne = any
  4051d4:	ldurb	w8, [x29, #-20]
  4051d8:	tst	w8, #0x1
  4051dc:	ldr	x15, [sp, #184]
  4051e0:	csel	x16, x15, x11, ne  // ne = any
  4051e4:	ldr	x2, [sp, #232]
  4051e8:	mov	w3, #0x1da                 	// #474
  4051ec:	ldr	x4, [sp, #224]
  4051f0:	adrp	x5, 40d000 <nftw_cb+0x9c>
  4051f4:	add	x5, x5, #0xfab
  4051f8:	mov	x17, sp
  4051fc:	str	x14, [x17]
  405200:	mov	x14, sp
  405204:	str	x16, [x14, #8]
  405208:	bl	403638 <log_internal_realm@plt>
  40520c:	str	w0, [sp, #80]
  405210:	b	405228 <main+0x1038>
  405214:	ldr	w0, [sp, #484]
  405218:	bl	403648 <abs@plt>
  40521c:	mov	w8, wzr
  405220:	subs	w8, w8, w0, uxtb
  405224:	str	w8, [sp, #80]
  405228:	ldr	w8, [sp, #80]
  40522c:	str	w8, [sp, #476]
  405230:	b	405300 <main+0x1110>
  405234:	mov	w8, #0x7                   	// #7
  405238:	str	w8, [sp, #472]
  40523c:	str	wzr, [sp, #468]
  405240:	str	wzr, [sp, #464]
  405244:	ldr	w0, [sp, #464]
  405248:	bl	403628 <log_get_max_level_realm@plt>
  40524c:	ldr	w8, [sp, #472]
  405250:	and	w8, w8, #0x7
  405254:	cmp	w0, w8
  405258:	b.lt	4052e0 <main+0x10f0>  // b.tstop
  40525c:	ldr	w8, [sp, #464]
  405260:	ldr	w9, [sp, #472]
  405264:	orr	w0, w9, w8, lsl #10
  405268:	ldr	w1, [sp, #468]
  40526c:	ldurb	w8, [x29, #-17]
  405270:	tst	w8, #0x1
  405274:	ldr	x10, [sp, #216]
  405278:	ldr	x11, [sp, #208]
  40527c:	csel	x6, x10, x11, ne  // ne = any
  405280:	ldurb	w8, [x29, #-18]
  405284:	tst	w8, #0x1
  405288:	ldr	x12, [sp, #200]
  40528c:	csel	x7, x12, x11, ne  // ne = any
  405290:	ldurb	w8, [x29, #-19]
  405294:	tst	w8, #0x1
  405298:	ldr	x13, [sp, #192]
  40529c:	csel	x14, x13, x11, ne  // ne = any
  4052a0:	ldurb	w8, [x29, #-20]
  4052a4:	tst	w8, #0x1
  4052a8:	ldr	x15, [sp, #184]
  4052ac:	csel	x16, x15, x11, ne  // ne = any
  4052b0:	ldr	x2, [sp, #232]
  4052b4:	mov	w3, #0x1e2                 	// #482
  4052b8:	ldr	x4, [sp, #224]
  4052bc:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  4052c0:	add	x5, x5, #0x14
  4052c4:	mov	x17, sp
  4052c8:	str	x14, [x17]
  4052cc:	mov	x14, sp
  4052d0:	str	x16, [x14, #8]
  4052d4:	bl	403638 <log_internal_realm@plt>
  4052d8:	str	w0, [sp, #76]
  4052dc:	b	4052f4 <main+0x1104>
  4052e0:	ldr	w0, [sp, #468]
  4052e4:	bl	403648 <abs@plt>
  4052e8:	mov	w8, wzr
  4052ec:	subs	w8, w8, w0, uxtb
  4052f0:	str	w8, [sp, #76]
  4052f4:	ldr	w8, [sp, #76]
  4052f8:	str	w8, [sp, #460]
  4052fc:	b	4047fc <main+0x60c>
  405300:	bl	4066b8 <watchdog_free_device>
  405304:	sub	x8, x29, #0x38
  405308:	mov	x9, xzr
  40530c:	stur	x9, [x29, #-56]
  405310:	ldr	x10, [sp, #240]
  405314:	ldr	x11, [x10]
  405318:	str	x11, [x8, #8]
  40531c:	str	x9, [x8, #16]
  405320:	adrp	x0, 40d000 <nftw_cb+0x9c>
  405324:	add	x0, x0, #0xaf0
  405328:	mov	x1, #0x4a80                	// #19072
  40532c:	movk	x1, #0x55d, lsl #16
  405330:	mov	x2, x9
  405334:	mov	x3, x9
  405338:	mov	x4, x8
  40533c:	mov	x5, x9
  405340:	mov	w6, #0x3                   	// #3
  405344:	bl	403718 <execute_directories@plt>
  405348:	bl	403728 <rlimit_nofile_safe@plt>
  40534c:	ldurb	w12, [x29, #-23]
  405350:	tbnz	w12, #0, 405358 <main+0x1168>
  405354:	b	405508 <main+0x1318>
  405358:	bl	4066d4 <switch_root_initramfs>
  40535c:	stur	w0, [x29, #-72]
  405360:	ldur	w8, [x29, #-72]
  405364:	cmp	w8, #0x0
  405368:	cset	w8, lt  // lt = tstop
  40536c:	tbnz	w8, #0, 405490 <main+0x12a0>
  405370:	ldur	x8, [x29, #-16]
  405374:	adrp	x9, 40e000 <parse_argv.options+0x4a8>
  405378:	add	x9, x9, #0x47
  40537c:	str	x9, [x8]
  405380:	bl	403738 <setsid@plt>
  405384:	bl	403748 <make_console_stdio@plt>
  405388:	mov	w10, #0x6                   	// #6
  40538c:	str	w10, [sp, #456]
  405390:	str	wzr, [sp, #452]
  405394:	str	wzr, [sp, #448]
  405398:	ldr	w10, [sp, #448]
  40539c:	mov	w0, w10
  4053a0:	bl	403628 <log_get_max_level_realm@plt>
  4053a4:	ldr	w10, [sp, #456]
  4053a8:	and	w10, w10, #0x7
  4053ac:	cmp	w0, w10
  4053b0:	b.lt	4053e4 <main+0x11f4>  // b.tstop
  4053b4:	ldr	w8, [sp, #448]
  4053b8:	ldr	w9, [sp, #456]
  4053bc:	orr	w0, w9, w8, lsl #10
  4053c0:	ldr	w1, [sp, #452]
  4053c4:	ldr	x2, [sp, #232]
  4053c8:	mov	w3, #0x1f8                 	// #504
  4053cc:	ldr	x4, [sp, #224]
  4053d0:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  4053d4:	add	x5, x5, #0x51
  4053d8:	bl	403638 <log_internal_realm@plt>
  4053dc:	str	w0, [sp, #72]
  4053e0:	b	4053f8 <main+0x1208>
  4053e4:	ldr	w0, [sp, #452]
  4053e8:	bl	403648 <abs@plt>
  4053ec:	mov	w8, wzr
  4053f0:	subs	w8, w8, w0, uxtb
  4053f4:	str	w8, [sp, #72]
  4053f8:	ldr	w8, [sp, #72]
  4053fc:	str	w8, [sp, #444]
  405400:	ldur	x1, [x29, #-16]
  405404:	adrp	x0, 40e000 <parse_argv.options+0x4a8>
  405408:	add	x0, x0, #0x47
  40540c:	bl	403758 <execv@plt>
  405410:	mov	w8, #0x3                   	// #3
  405414:	str	w8, [sp, #440]
  405418:	bl	403768 <__errno_location@plt>
  40541c:	ldr	w8, [x0]
  405420:	str	w8, [sp, #436]
  405424:	str	wzr, [sp, #432]
  405428:	ldr	w0, [sp, #432]
  40542c:	bl	403628 <log_get_max_level_realm@plt>
  405430:	ldr	w8, [sp, #440]
  405434:	and	w8, w8, #0x7
  405438:	cmp	w0, w8
  40543c:	b.lt	405470 <main+0x1280>  // b.tstop
  405440:	ldr	w8, [sp, #432]
  405444:	ldr	w9, [sp, #440]
  405448:	orr	w0, w9, w8, lsl #10
  40544c:	ldr	w1, [sp, #436]
  405450:	ldr	x2, [sp, #232]
  405454:	mov	w3, #0x1fb                 	// #507
  405458:	ldr	x4, [sp, #224]
  40545c:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  405460:	add	x5, x5, #0x8e
  405464:	bl	403638 <log_internal_realm@plt>
  405468:	str	w0, [sp, #68]
  40546c:	b	405484 <main+0x1294>
  405470:	ldr	w0, [sp, #436]
  405474:	bl	403648 <abs@plt>
  405478:	mov	w8, wzr
  40547c:	subs	w8, w8, w0, uxtb
  405480:	str	w8, [sp, #68]
  405484:	ldr	w8, [sp, #68]
  405488:	str	w8, [sp, #428]
  40548c:	b	405508 <main+0x1318>
  405490:	mov	w8, #0x3                   	// #3
  405494:	str	w8, [sp, #424]
  405498:	ldur	w8, [x29, #-72]
  40549c:	str	w8, [sp, #420]
  4054a0:	str	wzr, [sp, #416]
  4054a4:	ldr	w0, [sp, #416]
  4054a8:	bl	403628 <log_get_max_level_realm@plt>
  4054ac:	ldr	w8, [sp, #424]
  4054b0:	and	w8, w8, #0x7
  4054b4:	cmp	w0, w8
  4054b8:	b.lt	4054ec <main+0x12fc>  // b.tstop
  4054bc:	ldr	w8, [sp, #416]
  4054c0:	ldr	w9, [sp, #424]
  4054c4:	orr	w0, w9, w8, lsl #10
  4054c8:	ldr	w1, [sp, #420]
  4054cc:	ldr	x2, [sp, #232]
  4054d0:	mov	w3, #0x1fd                 	// #509
  4054d4:	ldr	x4, [sp, #224]
  4054d8:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  4054dc:	add	x5, x5, #0xb4
  4054e0:	bl	403638 <log_internal_realm@plt>
  4054e4:	str	w0, [sp, #64]
  4054e8:	b	405500 <main+0x1310>
  4054ec:	ldr	w0, [sp, #420]
  4054f0:	bl	403648 <abs@plt>
  4054f4:	mov	w8, wzr
  4054f8:	subs	w8, w8, w0, uxtb
  4054fc:	str	w8, [sp, #64]
  405500:	ldr	w8, [sp, #64]
  405504:	str	w8, [sp, #412]
  405508:	ldurb	w8, [x29, #-17]
  40550c:	tbnz	w8, #0, 40552c <main+0x133c>
  405510:	ldurb	w8, [x29, #-18]
  405514:	tbnz	w8, #0, 40552c <main+0x133c>
  405518:	ldurb	w8, [x29, #-19]
  40551c:	tbnz	w8, #0, 40552c <main+0x133c>
  405520:	ldurb	w8, [x29, #-20]
  405524:	tbnz	w8, #0, 40552c <main+0x133c>
  405528:	b	4055f4 <main+0x1404>
  40552c:	mov	w8, #0x3                   	// #3
  405530:	str	w8, [sp, #408]
  405534:	str	wzr, [sp, #404]
  405538:	str	wzr, [sp, #400]
  40553c:	ldr	w0, [sp, #400]
  405540:	bl	403628 <log_get_max_level_realm@plt>
  405544:	ldr	w8, [sp, #408]
  405548:	and	w8, w8, #0x7
  40554c:	cmp	w0, w8
  405550:	b.lt	4055d8 <main+0x13e8>  // b.tstop
  405554:	ldr	w8, [sp, #400]
  405558:	ldr	w9, [sp, #408]
  40555c:	orr	w0, w9, w8, lsl #10
  405560:	ldr	w1, [sp, #404]
  405564:	ldurb	w8, [x29, #-17]
  405568:	tst	w8, #0x1
  40556c:	ldr	x10, [sp, #216]
  405570:	ldr	x11, [sp, #208]
  405574:	csel	x6, x10, x11, ne  // ne = any
  405578:	ldurb	w8, [x29, #-18]
  40557c:	tst	w8, #0x1
  405580:	ldr	x12, [sp, #200]
  405584:	csel	x7, x12, x11, ne  // ne = any
  405588:	ldurb	w8, [x29, #-19]
  40558c:	tst	w8, #0x1
  405590:	ldr	x13, [sp, #192]
  405594:	csel	x14, x13, x11, ne  // ne = any
  405598:	ldurb	w8, [x29, #-20]
  40559c:	tst	w8, #0x1
  4055a0:	ldr	x15, [sp, #184]
  4055a4:	csel	x16, x15, x11, ne  // ne = any
  4055a8:	ldr	x2, [sp, #232]
  4055ac:	mov	w3, #0x205                 	// #517
  4055b0:	ldr	x4, [sp, #224]
  4055b4:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  4055b8:	add	x5, x5, #0xe2
  4055bc:	mov	x17, sp
  4055c0:	str	x14, [x17]
  4055c4:	mov	x14, sp
  4055c8:	str	x16, [x14, #8]
  4055cc:	bl	403638 <log_internal_realm@plt>
  4055d0:	str	w0, [sp, #60]
  4055d4:	b	4055ec <main+0x13fc>
  4055d8:	ldr	w0, [sp, #404]
  4055dc:	bl	403648 <abs@plt>
  4055e0:	mov	w8, wzr
  4055e4:	subs	w8, w8, w0, uxtb
  4055e8:	str	w8, [sp, #60]
  4055ec:	ldr	w8, [sp, #60]
  4055f0:	str	w8, [sp, #396]
  4055f4:	ldurb	w8, [x29, #-21]
  4055f8:	tbnz	w8, #0, 405600 <main+0x1410>
  4055fc:	bl	406364 <sync_with_progress>
  405600:	ldr	x8, [sp, #240]
  405604:	ldr	x0, [x8]
  405608:	adrp	x1, 40d000 <nftw_cb+0x9c>
  40560c:	add	x1, x1, #0xcae
  405610:	bl	403658 <strcmp@plt>
  405614:	cbnz	w0, 40564c <main+0x145c>
  405618:	ldurb	w8, [x29, #-21]
  40561c:	tbnz	w8, #0, 405624 <main+0x1434>
  405620:	b	405640 <main+0x1450>
  405624:	adrp	x8, 430000 <arg_timeout>
  405628:	add	x8, x8, #0x38
  40562c:	ldrb	w9, [x8]
  405630:	stur	w9, [x29, #-4]
  405634:	mov	w9, #0x1                   	// #1
  405638:	str	w9, [sp, #392]
  40563c:	b	405ad4 <main+0x18e4>
  405640:	mov	w8, #0xfedc                	// #65244
  405644:	movk	w8, #0x4321, lsl #16
  405648:	stur	w8, [x29, #-68]
  40564c:	ldur	w8, [x29, #-68]
  405650:	mov	w9, #0x123                 	// #291
  405654:	movk	w9, #0xcdef, lsl #16
  405658:	cmp	w8, w9
  40565c:	str	w8, [sp, #56]
  405660:	b.eq	405890 <main+0x16a0>  // b.none
  405664:	b	405668 <main+0x1478>
  405668:	mov	w8, #0x4567                	// #17767
  40566c:	movk	w8, #0x123, lsl #16
  405670:	ldr	w9, [sp, #56]
  405674:	cmp	w9, w8
  405678:	b.eq	405794 <main+0x15a4>  // b.none
  40567c:	b	405680 <main+0x1490>
  405680:	mov	w8, #0xfedc                	// #65244
  405684:	movk	w8, #0x4321, lsl #16
  405688:	ldr	w9, [sp, #56]
  40568c:	cmp	w9, w8
  405690:	b.eq	405818 <main+0x1628>  // b.none
  405694:	b	405698 <main+0x14a8>
  405698:	mov	w8, #0x4543                	// #17731
  40569c:	movk	w8, #0x4558, lsl #16
  4056a0:	ldr	w9, [sp, #56]
  4056a4:	cmp	w9, w8
  4056a8:	cset	w8, eq  // eq = none
  4056ac:	eor	w8, w8, #0x1
  4056b0:	tbnz	w8, #0, 405908 <main+0x1718>
  4056b4:	b	4056b8 <main+0x14c8>
  4056b8:	ldurb	w8, [x29, #-21]
  4056bc:	tbnz	w8, #0, 405788 <main+0x1598>
  4056c0:	mov	w8, #0x6                   	// #6
  4056c4:	str	w8, [sp, #388]
  4056c8:	str	wzr, [sp, #384]
  4056cc:	str	wzr, [sp, #380]
  4056d0:	ldr	w0, [sp, #380]
  4056d4:	bl	403628 <log_get_max_level_realm@plt>
  4056d8:	ldr	w8, [sp, #388]
  4056dc:	and	w8, w8, #0x7
  4056e0:	cmp	w0, w8
  4056e4:	b.lt	405718 <main+0x1528>  // b.tstop
  4056e8:	ldr	w8, [sp, #380]
  4056ec:	ldr	w9, [sp, #388]
  4056f0:	orr	w0, w9, w8, lsl #10
  4056f4:	ldr	w1, [sp, #384]
  4056f8:	ldr	x2, [sp, #232]
  4056fc:	mov	w3, #0x21b                 	// #539
  405700:	ldr	x4, [sp, #224]
  405704:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  405708:	add	x5, x5, #0x107
  40570c:	bl	403638 <log_internal_realm@plt>
  405710:	str	w0, [sp, #52]
  405714:	b	40572c <main+0x153c>
  405718:	ldr	w0, [sp, #384]
  40571c:	bl	403648 <abs@plt>
  405720:	mov	w8, wzr
  405724:	subs	w8, w8, w0, uxtb
  405728:	str	w8, [sp, #52]
  40572c:	ldr	w8, [sp, #52]
  405730:	str	w8, [sp, #376]
  405734:	adrp	x0, 40e000 <parse_argv.options+0x4a8>
  405738:	add	x0, x0, #0x11d
  40573c:	mov	w1, #0x63                  	// #99
  405740:	mov	x9, xzr
  405744:	mov	x2, x9
  405748:	bl	406894 <safe_fork>
  40574c:	stur	w0, [x29, #-72]
  405750:	ldur	w8, [x29, #-72]
  405754:	cbnz	w8, 405788 <main+0x1598>
  405758:	adrp	x8, 40d000 <nftw_cb+0x9c>
  40575c:	add	x8, x8, #0xb40
  405760:	ldr	q0, [x8]
  405764:	add	x1, sp, #0x160
  405768:	str	q0, [sp, #352]
  40576c:	ldr	x8, [x8, #16]
  405770:	str	x8, [sp, #368]
  405774:	ldr	x0, [sp, #352]
  405778:	bl	403758 <execv@plt>
  40577c:	mov	w9, #0x1                   	// #1
  405780:	mov	w0, w9
  405784:	bl	403778 <_exit@plt>
  405788:	mov	w8, #0x4567                	// #17767
  40578c:	movk	w8, #0x123, lsl #16
  405790:	stur	w8, [x29, #-68]
  405794:	mov	w0, #0x1                   	// #1
  405798:	bl	403788 <reboot_with_parameter@plt>
  40579c:	mov	w8, #0x6                   	// #6
  4057a0:	str	w8, [sp, #348]
  4057a4:	str	wzr, [sp, #344]
  4057a8:	str	wzr, [sp, #340]
  4057ac:	ldr	w8, [sp, #340]
  4057b0:	mov	w0, w8
  4057b4:	bl	403628 <log_get_max_level_realm@plt>
  4057b8:	ldr	w8, [sp, #348]
  4057bc:	and	w8, w8, #0x7
  4057c0:	cmp	w0, w8
  4057c4:	b.lt	4057f8 <main+0x1608>  // b.tstop
  4057c8:	ldr	w8, [sp, #340]
  4057cc:	ldr	w9, [sp, #348]
  4057d0:	orr	w0, w9, w8, lsl #10
  4057d4:	ldr	w1, [sp, #344]
  4057d8:	ldr	x2, [sp, #232]
  4057dc:	mov	w3, #0x231                 	// #561
  4057e0:	ldr	x4, [sp, #224]
  4057e4:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  4057e8:	add	x5, x5, #0x13b
  4057ec:	bl	403638 <log_internal_realm@plt>
  4057f0:	str	w0, [sp, #48]
  4057f4:	b	40580c <main+0x161c>
  4057f8:	ldr	w0, [sp, #344]
  4057fc:	bl	403648 <abs@plt>
  405800:	mov	w8, wzr
  405804:	subs	w8, w8, w0, uxtb
  405808:	str	w8, [sp, #48]
  40580c:	ldr	w8, [sp, #48]
  405810:	str	w8, [sp, #336]
  405814:	b	40592c <main+0x173c>
  405818:	mov	w8, #0x6                   	// #6
  40581c:	str	w8, [sp, #332]
  405820:	str	wzr, [sp, #328]
  405824:	str	wzr, [sp, #324]
  405828:	ldr	w0, [sp, #324]
  40582c:	bl	403628 <log_get_max_level_realm@plt>
  405830:	ldr	w8, [sp, #332]
  405834:	and	w8, w8, #0x7
  405838:	cmp	w0, w8
  40583c:	b.lt	405870 <main+0x1680>  // b.tstop
  405840:	ldr	w8, [sp, #324]
  405844:	ldr	w9, [sp, #332]
  405848:	orr	w0, w9, w8, lsl #10
  40584c:	ldr	w1, [sp, #328]
  405850:	ldr	x2, [sp, #232]
  405854:	mov	w3, #0x235                 	// #565
  405858:	ldr	x4, [sp, #224]
  40585c:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  405860:	add	x5, x5, #0x146
  405864:	bl	403638 <log_internal_realm@plt>
  405868:	str	w0, [sp, #44]
  40586c:	b	405884 <main+0x1694>
  405870:	ldr	w0, [sp, #328]
  405874:	bl	403648 <abs@plt>
  405878:	mov	w8, wzr
  40587c:	subs	w8, w8, w0, uxtb
  405880:	str	w8, [sp, #44]
  405884:	ldr	w8, [sp, #44]
  405888:	str	w8, [sp, #320]
  40588c:	b	40592c <main+0x173c>
  405890:	mov	w8, #0x6                   	// #6
  405894:	str	w8, [sp, #316]
  405898:	str	wzr, [sp, #312]
  40589c:	str	wzr, [sp, #308]
  4058a0:	ldr	w0, [sp, #308]
  4058a4:	bl	403628 <log_get_max_level_realm@plt>
  4058a8:	ldr	w8, [sp, #316]
  4058ac:	and	w8, w8, #0x7
  4058b0:	cmp	w0, w8
  4058b4:	b.lt	4058e8 <main+0x16f8>  // b.tstop
  4058b8:	ldr	w8, [sp, #308]
  4058bc:	ldr	w9, [sp, #316]
  4058c0:	orr	w0, w9, w8, lsl #10
  4058c4:	ldr	w1, [sp, #312]
  4058c8:	ldr	x2, [sp, #232]
  4058cc:	mov	w3, #0x239                 	// #569
  4058d0:	ldr	x4, [sp, #224]
  4058d4:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  4058d8:	add	x5, x5, #0x154
  4058dc:	bl	403638 <log_internal_realm@plt>
  4058e0:	str	w0, [sp, #40]
  4058e4:	b	4058fc <main+0x170c>
  4058e8:	ldr	w0, [sp, #312]
  4058ec:	bl	403648 <abs@plt>
  4058f0:	mov	w8, wzr
  4058f4:	subs	w8, w8, w0, uxtb
  4058f8:	str	w8, [sp, #40]
  4058fc:	ldr	w8, [sp, #40]
  405900:	str	w8, [sp, #304]
  405904:	b	40592c <main+0x173c>
  405908:	mov	w8, wzr
  40590c:	mov	w0, w8
  405910:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  405914:	add	x1, x1, #0x164
  405918:	ldr	x2, [sp, #232]
  40591c:	mov	w3, #0x23d                 	// #573
  405920:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  405924:	add	x4, x4, #0x172
  405928:	bl	403798 <log_assert_failed_unreachable_realm@plt>
  40592c:	ldur	w0, [x29, #-68]
  405930:	bl	4037a8 <reboot@plt>
  405934:	bl	403768 <__errno_location@plt>
  405938:	ldr	w8, [x0]
  40593c:	cmp	w8, #0x1
  405940:	b.ne	4059d4 <main+0x17e4>  // b.any
  405944:	ldurb	w8, [x29, #-21]
  405948:	tbnz	w8, #0, 405950 <main+0x1760>
  40594c:	b	4059d4 <main+0x17e4>
  405950:	mov	w8, #0x6                   	// #6
  405954:	str	w8, [sp, #300]
  405958:	str	wzr, [sp, #296]
  40595c:	str	wzr, [sp, #292]
  405960:	ldr	w0, [sp, #292]
  405964:	bl	403628 <log_get_max_level_realm@plt>
  405968:	ldr	w8, [sp, #300]
  40596c:	and	w8, w8, #0x7
  405970:	cmp	w0, w8
  405974:	b.lt	4059a8 <main+0x17b8>  // b.tstop
  405978:	ldr	w8, [sp, #292]
  40597c:	ldr	w9, [sp, #300]
  405980:	orr	w0, w9, w8, lsl #10
  405984:	ldr	w1, [sp, #296]
  405988:	ldr	x2, [sp, #232]
  40598c:	mov	w3, #0x245                 	// #581
  405990:	ldr	x4, [sp, #224]
  405994:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  405998:	add	x5, x5, #0x189
  40599c:	bl	403638 <log_internal_realm@plt>
  4059a0:	str	w0, [sp, #36]
  4059a4:	b	4059bc <main+0x17cc>
  4059a8:	ldr	w0, [sp, #296]
  4059ac:	bl	403648 <abs@plt>
  4059b0:	mov	w8, wzr
  4059b4:	subs	w8, w8, w0, uxtb
  4059b8:	str	w8, [sp, #36]
  4059bc:	ldr	w8, [sp, #36]
  4059c0:	str	w8, [sp, #288]
  4059c4:	stur	wzr, [x29, #-4]
  4059c8:	mov	w8, #0x1                   	// #1
  4059cc:	str	w8, [sp, #392]
  4059d0:	b	405ad4 <main+0x18e4>
  4059d4:	mov	w8, #0x3                   	// #3
  4059d8:	str	w8, [sp, #284]
  4059dc:	bl	403768 <__errno_location@plt>
  4059e0:	ldr	w8, [x0]
  4059e4:	str	w8, [sp, #280]
  4059e8:	str	wzr, [sp, #276]
  4059ec:	ldr	w0, [sp, #276]
  4059f0:	bl	403628 <log_get_max_level_realm@plt>
  4059f4:	ldr	w8, [sp, #284]
  4059f8:	and	w8, w8, #0x7
  4059fc:	cmp	w0, w8
  405a00:	b.lt	405a34 <main+0x1844>  // b.tstop
  405a04:	ldr	w8, [sp, #276]
  405a08:	ldr	w9, [sp, #284]
  405a0c:	orr	w0, w9, w8, lsl #10
  405a10:	ldr	w1, [sp, #280]
  405a14:	ldr	x2, [sp, #232]
  405a18:	mov	w3, #0x249                 	// #585
  405a1c:	ldr	x4, [sp, #224]
  405a20:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  405a24:	add	x5, x5, #0x19c
  405a28:	bl	403638 <log_internal_realm@plt>
  405a2c:	str	w0, [sp, #32]
  405a30:	b	405a48 <main+0x1858>
  405a34:	ldr	w0, [sp, #280]
  405a38:	bl	403648 <abs@plt>
  405a3c:	mov	w8, wzr
  405a40:	subs	w8, w8, w0, uxtb
  405a44:	str	w8, [sp, #32]
  405a48:	ldr	w8, [sp, #32]
  405a4c:	str	w8, [sp, #272]
  405a50:	ldr	w8, [sp, #272]
  405a54:	stur	w8, [x29, #-72]
  405a58:	bl	4037b8 <log_emergency_level@plt>
  405a5c:	str	w0, [sp, #268]
  405a60:	ldur	w8, [x29, #-72]
  405a64:	str	w8, [sp, #264]
  405a68:	str	wzr, [sp, #260]
  405a6c:	ldr	w0, [sp, #260]
  405a70:	bl	403628 <log_get_max_level_realm@plt>
  405a74:	ldr	w8, [sp, #268]
  405a78:	and	w8, w8, #0x7
  405a7c:	cmp	w0, w8
  405a80:	b.lt	405ab4 <main+0x18c4>  // b.tstop
  405a84:	ldr	w8, [sp, #260]
  405a88:	ldr	w9, [sp, #268]
  405a8c:	orr	w0, w9, w8, lsl #10
  405a90:	ldr	w1, [sp, #264]
  405a94:	ldr	x2, [sp, #232]
  405a98:	mov	w3, #0x24c                 	// #588
  405a9c:	ldr	x4, [sp, #224]
  405aa0:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  405aa4:	add	x5, x5, #0x1ba
  405aa8:	bl	403638 <log_internal_realm@plt>
  405aac:	str	w0, [sp, #28]
  405ab0:	b	405ac8 <main+0x18d8>
  405ab4:	ldr	w0, [sp, #264]
  405ab8:	bl	403648 <abs@plt>
  405abc:	mov	w8, wzr
  405ac0:	subs	w8, w8, w0, uxtb
  405ac4:	str	w8, [sp, #28]
  405ac8:	ldr	w8, [sp, #28]
  405acc:	str	w8, [sp, #256]
  405ad0:	bl	4037c8 <freeze@plt>
  405ad4:	sub	x0, x29, #0x20
  405ad8:	bl	405af0 <freep>
  405adc:	ldur	w0, [x29, #-4]
  405ae0:	add	sp, sp, #0x3a0
  405ae4:	ldr	x28, [sp, #16]
  405ae8:	ldp	x29, x30, [sp], #32
  405aec:	ret

0000000000405af0 <freep>:
  405af0:	sub	sp, sp, #0x20
  405af4:	stp	x29, x30, [sp, #16]
  405af8:	add	x29, sp, #0x10
  405afc:	str	x0, [sp, #8]
  405b00:	ldr	x8, [sp, #8]
  405b04:	ldr	x0, [x8]
  405b08:	bl	4037d8 <free@plt>
  405b0c:	ldp	x29, x30, [sp, #16]
  405b10:	add	sp, sp, #0x20
  405b14:	ret

0000000000405b18 <parse_argv>:
  405b18:	sub	sp, sp, #0x100
  405b1c:	stp	x29, x30, [sp, #240]
  405b20:	add	x29, sp, #0xf0
  405b24:	adrp	x8, 430000 <arg_timeout>
  405b28:	add	x8, x8, #0x30
  405b2c:	adrp	x9, 40d000 <nftw_cb+0x9c>
  405b30:	add	x9, x9, #0xc55
  405b34:	add	x9, x9, #0x3
  405b38:	adrp	x10, 40e000 <parse_argv.options+0x4a8>
  405b3c:	add	x10, x10, #0x255
  405b40:	adrp	x11, 430000 <arg_timeout>
  405b44:	add	x11, x11, #0x40
  405b48:	adrp	x12, 40e000 <parse_argv.options+0x4a8>
  405b4c:	add	x12, x12, #0x231
  405b50:	stur	w0, [x29, #-8]
  405b54:	stur	x1, [x29, #-16]
  405b58:	str	x8, [sp, #80]
  405b5c:	str	x9, [sp, #72]
  405b60:	str	x10, [sp, #64]
  405b64:	str	x11, [sp, #56]
  405b68:	str	x12, [sp, #48]
  405b6c:	ldur	w8, [x29, #-8]
  405b70:	cmp	w8, #0x1
  405b74:	cset	w8, ge  // ge = tcont
  405b78:	mov	w9, #0x1                   	// #1
  405b7c:	eor	w8, w8, #0x1
  405b80:	eor	w8, w8, w9
  405b84:	eor	w8, w8, w9
  405b88:	and	w8, w8, #0x1
  405b8c:	mov	w0, w8
  405b90:	sxtw	x10, w0
  405b94:	cbz	x10, 405bb8 <parse_argv+0xa0>
  405b98:	mov	w8, wzr
  405b9c:	mov	w0, w8
  405ba0:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  405ba4:	add	x1, x1, #0x227
  405ba8:	ldr	x2, [sp, #72]
  405bac:	mov	w3, #0x46                  	// #70
  405bb0:	ldr	x4, [sp, #48]
  405bb4:	bl	4037e8 <log_assert_failed_realm@plt>
  405bb8:	ldur	x8, [x29, #-16]
  405bbc:	cmp	x8, #0x0
  405bc0:	cset	w9, ne  // ne = any
  405bc4:	mov	w10, #0x1                   	// #1
  405bc8:	eor	w9, w9, #0x1
  405bcc:	eor	w9, w9, w10
  405bd0:	eor	w9, w9, w10
  405bd4:	and	w9, w9, #0x1
  405bd8:	mov	w0, w9
  405bdc:	sxtw	x8, w0
  405be0:	cbz	x8, 405c04 <parse_argv+0xec>
  405be4:	mov	w8, wzr
  405be8:	mov	w0, w8
  405bec:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  405bf0:	add	x1, x1, #0x24e
  405bf4:	ldr	x2, [sp, #72]
  405bf8:	mov	w3, #0x47                  	// #71
  405bfc:	ldr	x4, [sp, #48]
  405c00:	bl	4037e8 <log_assert_failed_realm@plt>
  405c04:	ldur	w0, [x29, #-8]
  405c08:	ldur	x1, [x29, #-16]
  405c0c:	adrp	x2, 40e000 <parse_argv.options+0x4a8>
  405c10:	add	x2, x2, #0x253
  405c14:	adrp	x3, 40d000 <nftw_cb+0x9c>
  405c18:	add	x3, x3, #0xb58
  405c1c:	mov	x8, xzr
  405c20:	mov	x4, x8
  405c24:	bl	4037f8 <getopt_long@plt>
  405c28:	stur	w0, [x29, #-20]
  405c2c:	cmp	w0, #0x0
  405c30:	cset	w9, lt  // lt = tstop
  405c34:	tbnz	w9, #0, 4061ac <parse_argv+0x694>
  405c38:	ldur	w8, [x29, #-20]
  405c3c:	cmp	w8, #0x1
  405c40:	str	w8, [sp, #44]
  405c44:	b.eq	4060e4 <parse_argv+0x5cc>  // b.none
  405c48:	b	405c4c <parse_argv+0x134>
  405c4c:	ldr	w8, [sp, #44]
  405c50:	cmp	w8, #0x3f
  405c54:	b.eq	40617c <parse_argv+0x664>  // b.none
  405c58:	b	405c5c <parse_argv+0x144>
  405c5c:	ldr	w8, [sp, #44]
  405c60:	cmp	w8, #0x100
  405c64:	b.eq	405cbc <parse_argv+0x1a4>  // b.none
  405c68:	b	405c6c <parse_argv+0x154>
  405c6c:	ldr	w8, [sp, #44]
  405c70:	cmp	w8, #0x101
  405c74:	b.eq	405d68 <parse_argv+0x250>  // b.none
  405c78:	b	405c7c <parse_argv+0x164>
  405c7c:	ldr	w8, [sp, #44]
  405c80:	cmp	w8, #0x102
  405c84:	b.eq	405e0c <parse_argv+0x2f4>  // b.none
  405c88:	b	405c8c <parse_argv+0x174>
  405c8c:	ldr	w8, [sp, #44]
  405c90:	cmp	w8, #0x103
  405c94:	b.eq	405ecc <parse_argv+0x3b4>  // b.none
  405c98:	b	405c9c <parse_argv+0x184>
  405c9c:	ldr	w8, [sp, #44]
  405ca0:	cmp	w8, #0x104
  405ca4:	b.eq	405f8c <parse_argv+0x474>  // b.none
  405ca8:	b	405cac <parse_argv+0x194>
  405cac:	ldr	w8, [sp, #44]
  405cb0:	cmp	w8, #0x105
  405cb4:	b.eq	406038 <parse_argv+0x520>  // b.none
  405cb8:	b	406188 <parse_argv+0x670>
  405cbc:	ldr	x8, [sp, #56]
  405cc0:	ldr	x1, [x8]
  405cc4:	mov	w9, wzr
  405cc8:	mov	w0, w9
  405ccc:	bl	403808 <log_set_max_level_from_string_realm@plt>
  405cd0:	stur	w0, [x29, #-24]
  405cd4:	ldur	w9, [x29, #-24]
  405cd8:	cmp	w9, #0x0
  405cdc:	cset	w9, ge  // ge = tcont
  405ce0:	tbnz	w9, #0, 405d64 <parse_argv+0x24c>
  405ce4:	mov	w8, #0x3                   	// #3
  405ce8:	stur	w8, [x29, #-28]
  405cec:	ldur	w8, [x29, #-24]
  405cf0:	stur	w8, [x29, #-32]
  405cf4:	stur	wzr, [x29, #-36]
  405cf8:	ldur	w0, [x29, #-36]
  405cfc:	bl	403628 <log_get_max_level_realm@plt>
  405d00:	ldur	w8, [x29, #-28]
  405d04:	and	w8, w8, #0x7
  405d08:	cmp	w0, w8
  405d0c:	b.lt	405d48 <parse_argv+0x230>  // b.tstop
  405d10:	ldur	w8, [x29, #-36]
  405d14:	ldur	w9, [x29, #-28]
  405d18:	orr	w0, w9, w8, lsl #10
  405d1c:	ldur	w1, [x29, #-32]
  405d20:	ldr	x10, [sp, #56]
  405d24:	ldr	x6, [x10]
  405d28:	ldr	x2, [sp, #72]
  405d2c:	mov	w3, #0x51                  	// #81
  405d30:	ldr	x4, [sp, #64]
  405d34:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  405d38:	add	x5, x5, #0x260
  405d3c:	bl	403638 <log_internal_realm@plt>
  405d40:	str	w0, [sp, #40]
  405d44:	b	405d5c <parse_argv+0x244>
  405d48:	ldur	w0, [x29, #-32]
  405d4c:	bl	403648 <abs@plt>
  405d50:	mov	w8, wzr
  405d54:	subs	w8, w8, w0, uxtb
  405d58:	str	w8, [sp, #40]
  405d5c:	ldr	w8, [sp, #40]
  405d60:	stur	w8, [x29, #-40]
  405d64:	b	4061a8 <parse_argv+0x690>
  405d68:	ldr	x8, [sp, #56]
  405d6c:	ldr	x0, [x8]
  405d70:	bl	403818 <log_set_target_from_string@plt>
  405d74:	stur	w0, [x29, #-24]
  405d78:	ldur	w9, [x29, #-24]
  405d7c:	cmp	w9, #0x0
  405d80:	cset	w9, ge  // ge = tcont
  405d84:	tbnz	w9, #0, 405e08 <parse_argv+0x2f0>
  405d88:	mov	w8, #0x3                   	// #3
  405d8c:	stur	w8, [x29, #-44]
  405d90:	ldur	w8, [x29, #-24]
  405d94:	stur	w8, [x29, #-48]
  405d98:	stur	wzr, [x29, #-52]
  405d9c:	ldur	w0, [x29, #-52]
  405da0:	bl	403628 <log_get_max_level_realm@plt>
  405da4:	ldur	w8, [x29, #-44]
  405da8:	and	w8, w8, #0x7
  405dac:	cmp	w0, w8
  405db0:	b.lt	405dec <parse_argv+0x2d4>  // b.tstop
  405db4:	ldur	w8, [x29, #-52]
  405db8:	ldur	w9, [x29, #-44]
  405dbc:	orr	w0, w9, w8, lsl #10
  405dc0:	ldur	w1, [x29, #-48]
  405dc4:	ldr	x10, [sp, #56]
  405dc8:	ldr	x6, [x10]
  405dcc:	ldr	x2, [sp, #72]
  405dd0:	mov	w3, #0x58                  	// #88
  405dd4:	ldr	x4, [sp, #64]
  405dd8:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  405ddc:	add	x5, x5, #0x28b
  405de0:	bl	403638 <log_internal_realm@plt>
  405de4:	str	w0, [sp, #36]
  405de8:	b	405e00 <parse_argv+0x2e8>
  405dec:	ldur	w0, [x29, #-48]
  405df0:	bl	403648 <abs@plt>
  405df4:	mov	w8, wzr
  405df8:	subs	w8, w8, w0, uxtb
  405dfc:	str	w8, [sp, #36]
  405e00:	ldr	w8, [sp, #36]
  405e04:	stur	w8, [x29, #-56]
  405e08:	b	4061a8 <parse_argv+0x690>
  405e0c:	ldr	x8, [sp, #56]
  405e10:	ldr	x9, [x8]
  405e14:	cbz	x9, 405ebc <parse_argv+0x3a4>
  405e18:	ldr	x8, [sp, #56]
  405e1c:	ldr	x0, [x8]
  405e20:	bl	403828 <log_show_color_from_string@plt>
  405e24:	stur	w0, [x29, #-24]
  405e28:	ldur	w9, [x29, #-24]
  405e2c:	cmp	w9, #0x0
  405e30:	cset	w9, ge  // ge = tcont
  405e34:	tbnz	w9, #0, 405eb8 <parse_argv+0x3a0>
  405e38:	mov	w8, #0x3                   	// #3
  405e3c:	stur	w8, [x29, #-60]
  405e40:	ldur	w8, [x29, #-24]
  405e44:	stur	w8, [x29, #-64]
  405e48:	stur	wzr, [x29, #-68]
  405e4c:	ldur	w0, [x29, #-68]
  405e50:	bl	403628 <log_get_max_level_realm@plt>
  405e54:	ldur	w8, [x29, #-60]
  405e58:	and	w8, w8, #0x7
  405e5c:	cmp	w0, w8
  405e60:	b.lt	405e9c <parse_argv+0x384>  // b.tstop
  405e64:	ldur	w8, [x29, #-68]
  405e68:	ldur	w9, [x29, #-60]
  405e6c:	orr	w0, w9, w8, lsl #10
  405e70:	ldur	w1, [x29, #-64]
  405e74:	ldr	x10, [sp, #56]
  405e78:	ldr	x6, [x10]
  405e7c:	ldr	x2, [sp, #72]
  405e80:	mov	w3, #0x61                  	// #97
  405e84:	ldr	x4, [sp, #64]
  405e88:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  405e8c:	add	x5, x5, #0x2b7
  405e90:	bl	403638 <log_internal_realm@plt>
  405e94:	str	w0, [sp, #32]
  405e98:	b	405eb0 <parse_argv+0x398>
  405e9c:	ldur	w0, [x29, #-64]
  405ea0:	bl	403648 <abs@plt>
  405ea4:	mov	w8, wzr
  405ea8:	subs	w8, w8, w0, uxtb
  405eac:	str	w8, [sp, #32]
  405eb0:	ldr	w8, [sp, #32]
  405eb4:	stur	w8, [x29, #-72]
  405eb8:	b	405ec8 <parse_argv+0x3b0>
  405ebc:	mov	w8, #0x1                   	// #1
  405ec0:	and	w0, w8, #0x1
  405ec4:	bl	403838 <log_show_color@plt>
  405ec8:	b	4061a8 <parse_argv+0x690>
  405ecc:	ldr	x8, [sp, #56]
  405ed0:	ldr	x9, [x8]
  405ed4:	cbz	x9, 405f7c <parse_argv+0x464>
  405ed8:	ldr	x8, [sp, #56]
  405edc:	ldr	x0, [x8]
  405ee0:	bl	403848 <log_show_location_from_string@plt>
  405ee4:	stur	w0, [x29, #-24]
  405ee8:	ldur	w9, [x29, #-24]
  405eec:	cmp	w9, #0x0
  405ef0:	cset	w9, ge  // ge = tcont
  405ef4:	tbnz	w9, #0, 405f78 <parse_argv+0x460>
  405ef8:	mov	w8, #0x3                   	// #3
  405efc:	stur	w8, [x29, #-76]
  405f00:	ldur	w8, [x29, #-24]
  405f04:	stur	w8, [x29, #-80]
  405f08:	stur	wzr, [x29, #-84]
  405f0c:	ldur	w0, [x29, #-84]
  405f10:	bl	403628 <log_get_max_level_realm@plt>
  405f14:	ldur	w8, [x29, #-76]
  405f18:	and	w8, w8, #0x7
  405f1c:	cmp	w0, w8
  405f20:	b.lt	405f5c <parse_argv+0x444>  // b.tstop
  405f24:	ldur	w8, [x29, #-84]
  405f28:	ldur	w9, [x29, #-76]
  405f2c:	orr	w0, w9, w8, lsl #10
  405f30:	ldur	w1, [x29, #-80]
  405f34:	ldr	x10, [sp, #56]
  405f38:	ldr	x6, [x10]
  405f3c:	ldr	x2, [sp, #72]
  405f40:	mov	w3, #0x6b                  	// #107
  405f44:	ldr	x4, [sp, #64]
  405f48:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  405f4c:	add	x5, x5, #0x2ea
  405f50:	bl	403638 <log_internal_realm@plt>
  405f54:	str	w0, [sp, #28]
  405f58:	b	405f70 <parse_argv+0x458>
  405f5c:	ldur	w0, [x29, #-80]
  405f60:	bl	403648 <abs@plt>
  405f64:	mov	w8, wzr
  405f68:	subs	w8, w8, w0, uxtb
  405f6c:	str	w8, [sp, #28]
  405f70:	ldr	w8, [sp, #28]
  405f74:	stur	w8, [x29, #-88]
  405f78:	b	405f88 <parse_argv+0x470>
  405f7c:	mov	w8, #0x1                   	// #1
  405f80:	and	w0, w8, #0x1
  405f84:	bl	403858 <log_show_location@plt>
  405f88:	b	4061a8 <parse_argv+0x690>
  405f8c:	ldr	x8, [sp, #56]
  405f90:	ldr	x0, [x8]
  405f94:	adrp	x1, 430000 <arg_timeout>
  405f98:	add	x1, x1, #0x38
  405f9c:	bl	403868 <safe_atou8@plt>
  405fa0:	stur	w0, [x29, #-24]
  405fa4:	ldur	w9, [x29, #-24]
  405fa8:	cmp	w9, #0x0
  405fac:	cset	w9, ge  // ge = tcont
  405fb0:	tbnz	w9, #0, 406034 <parse_argv+0x51c>
  405fb4:	mov	w8, #0x3                   	// #3
  405fb8:	stur	w8, [x29, #-92]
  405fbc:	ldur	w8, [x29, #-24]
  405fc0:	stur	w8, [x29, #-96]
  405fc4:	stur	wzr, [x29, #-100]
  405fc8:	ldur	w0, [x29, #-100]
  405fcc:	bl	403628 <log_get_max_level_realm@plt>
  405fd0:	ldur	w8, [x29, #-92]
  405fd4:	and	w8, w8, #0x7
  405fd8:	cmp	w0, w8
  405fdc:	b.lt	406018 <parse_argv+0x500>  // b.tstop
  405fe0:	ldur	w8, [x29, #-100]
  405fe4:	ldur	w9, [x29, #-92]
  405fe8:	orr	w0, w9, w8, lsl #10
  405fec:	ldur	w1, [x29, #-96]
  405ff0:	ldr	x10, [sp, #56]
  405ff4:	ldr	x6, [x10]
  405ff8:	ldr	x2, [sp, #72]
  405ffc:	mov	w3, #0x74                  	// #116
  406000:	ldr	x4, [sp, #64]
  406004:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  406008:	add	x5, x5, #0x320
  40600c:	bl	403638 <log_internal_realm@plt>
  406010:	str	w0, [sp, #24]
  406014:	b	40602c <parse_argv+0x514>
  406018:	ldur	w0, [x29, #-96]
  40601c:	bl	403648 <abs@plt>
  406020:	mov	w8, wzr
  406024:	subs	w8, w8, w0, uxtb
  406028:	str	w8, [sp, #24]
  40602c:	ldr	w8, [sp, #24]
  406030:	stur	w8, [x29, #-104]
  406034:	b	4061a8 <parse_argv+0x690>
  406038:	ldr	x8, [sp, #56]
  40603c:	ldr	x0, [x8]
  406040:	adrp	x1, 430000 <arg_timeout>
  406044:	add	x1, x1, #0x0
  406048:	bl	403878 <parse_sec@plt>
  40604c:	stur	w0, [x29, #-24]
  406050:	ldur	w9, [x29, #-24]
  406054:	cmp	w9, #0x0
  406058:	cset	w9, ge  // ge = tcont
  40605c:	tbnz	w9, #0, 4060e0 <parse_argv+0x5c8>
  406060:	mov	w8, #0x3                   	// #3
  406064:	stur	w8, [x29, #-108]
  406068:	ldur	w8, [x29, #-24]
  40606c:	stur	w8, [x29, #-112]
  406070:	stur	wzr, [x29, #-116]
  406074:	ldur	w0, [x29, #-116]
  406078:	bl	403628 <log_get_max_level_realm@plt>
  40607c:	ldur	w8, [x29, #-108]
  406080:	and	w8, w8, #0x7
  406084:	cmp	w0, w8
  406088:	b.lt	4060c4 <parse_argv+0x5ac>  // b.tstop
  40608c:	ldur	w8, [x29, #-116]
  406090:	ldur	w9, [x29, #-108]
  406094:	orr	w0, w9, w8, lsl #10
  406098:	ldur	w1, [x29, #-112]
  40609c:	ldr	x10, [sp, #56]
  4060a0:	ldr	x6, [x10]
  4060a4:	ldr	x2, [sp, #72]
  4060a8:	mov	w3, #0x7b                  	// #123
  4060ac:	ldr	x4, [sp, #64]
  4060b0:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  4060b4:	add	x5, x5, #0x34b
  4060b8:	bl	403638 <log_internal_realm@plt>
  4060bc:	str	w0, [sp, #20]
  4060c0:	b	4060d8 <parse_argv+0x5c0>
  4060c4:	ldur	w0, [x29, #-112]
  4060c8:	bl	403648 <abs@plt>
  4060cc:	mov	w8, wzr
  4060d0:	subs	w8, w8, w0, uxtb
  4060d4:	str	w8, [sp, #20]
  4060d8:	ldr	w8, [sp, #20]
  4060dc:	str	w8, [sp, #120]
  4060e0:	b	4061a8 <parse_argv+0x690>
  4060e4:	ldr	x8, [sp, #80]
  4060e8:	ldr	x9, [x8]
  4060ec:	cbnz	x9, 406104 <parse_argv+0x5ec>
  4060f0:	ldr	x8, [sp, #56]
  4060f4:	ldr	x9, [x8]
  4060f8:	ldr	x10, [sp, #80]
  4060fc:	str	x9, [x10]
  406100:	b	406178 <parse_argv+0x660>
  406104:	mov	w8, #0x3                   	// #3
  406108:	str	w8, [sp, #116]
  40610c:	str	wzr, [sp, #112]
  406110:	str	wzr, [sp, #108]
  406114:	ldr	w0, [sp, #108]
  406118:	bl	403628 <log_get_max_level_realm@plt>
  40611c:	ldr	w8, [sp, #116]
  406120:	and	w8, w8, #0x7
  406124:	cmp	w0, w8
  406128:	b.lt	40615c <parse_argv+0x644>  // b.tstop
  40612c:	ldr	w8, [sp, #108]
  406130:	ldr	w9, [sp, #116]
  406134:	orr	w0, w9, w8, lsl #10
  406138:	ldr	w1, [sp, #112]
  40613c:	ldr	x2, [sp, #72]
  406140:	mov	w3, #0x83                  	// #131
  406144:	ldr	x4, [sp, #64]
  406148:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  40614c:	add	x5, x5, #0x37d
  406150:	bl	403638 <log_internal_realm@plt>
  406154:	str	w0, [sp, #16]
  406158:	b	406170 <parse_argv+0x658>
  40615c:	ldr	w0, [sp, #112]
  406160:	bl	403648 <abs@plt>
  406164:	mov	w8, wzr
  406168:	subs	w8, w8, w0, uxtb
  40616c:	str	w8, [sp, #16]
  406170:	ldr	w8, [sp, #16]
  406174:	str	w8, [sp, #104]
  406178:	b	4061a8 <parse_argv+0x690>
  40617c:	mov	w8, #0xffffffea            	// #-22
  406180:	stur	w8, [x29, #-4]
  406184:	b	406244 <parse_argv+0x72c>
  406188:	mov	w8, wzr
  40618c:	mov	w0, w8
  406190:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  406194:	add	x1, x1, #0x398
  406198:	ldr	x2, [sp, #72]
  40619c:	mov	w3, #0x8a                  	// #138
  4061a0:	ldr	x4, [sp, #48]
  4061a4:	bl	403798 <log_assert_failed_unreachable_realm@plt>
  4061a8:	b	405c04 <parse_argv+0xec>
  4061ac:	ldr	x8, [sp, #80]
  4061b0:	ldr	x9, [x8]
  4061b4:	cbnz	x9, 406240 <parse_argv+0x728>
  4061b8:	mov	w8, #0x3                   	// #3
  4061bc:	str	w8, [sp, #100]
  4061c0:	mov	w8, #0x16                  	// #22
  4061c4:	movk	w8, #0x4000, lsl #16
  4061c8:	str	w8, [sp, #96]
  4061cc:	str	wzr, [sp, #92]
  4061d0:	ldr	w0, [sp, #92]
  4061d4:	bl	403628 <log_get_max_level_realm@plt>
  4061d8:	ldr	w8, [sp, #100]
  4061dc:	and	w8, w8, #0x7
  4061e0:	cmp	w0, w8
  4061e4:	b.lt	406218 <parse_argv+0x700>  // b.tstop
  4061e8:	ldr	w8, [sp, #92]
  4061ec:	ldr	w9, [sp, #100]
  4061f0:	orr	w0, w9, w8, lsl #10
  4061f4:	ldr	w1, [sp, #96]
  4061f8:	ldr	x2, [sp, #72]
  4061fc:	mov	w3, #0x8f                  	// #143
  406200:	ldr	x4, [sp, #64]
  406204:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  406208:	add	x5, x5, #0x3af
  40620c:	bl	403638 <log_internal_realm@plt>
  406210:	str	w0, [sp, #12]
  406214:	b	40622c <parse_argv+0x714>
  406218:	ldr	w0, [sp, #96]
  40621c:	bl	403648 <abs@plt>
  406220:	mov	w8, wzr
  406224:	subs	w8, w8, w0, uxtb
  406228:	str	w8, [sp, #12]
  40622c:	ldr	w8, [sp, #12]
  406230:	str	w8, [sp, #88]
  406234:	ldr	w8, [sp, #88]
  406238:	stur	w8, [x29, #-4]
  40623c:	b	406244 <parse_argv+0x72c>
  406240:	stur	wzr, [x29, #-4]
  406244:	ldur	w0, [x29, #-4]
  406248:	ldp	x29, x30, [sp, #240]
  40624c:	add	sp, sp, #0x100
  406250:	ret

0000000000406254 <bump_sysctl_printk_log_level>:
  406254:	sub	sp, sp, #0x40
  406258:	stp	x29, x30, [sp, #48]
  40625c:	add	x29, sp, #0x30
  406260:	adrp	x8, 40d000 <nftw_cb+0x9c>
  406264:	add	x8, x8, #0xc55
  406268:	add	x2, x8, #0x3
  40626c:	stur	w0, [x29, #-4]
  406270:	str	x2, [sp, #8]
  406274:	bl	4068dc <read_current_sysctl_printk_log_level>
  406278:	stur	w0, [x29, #-8]
  40627c:	ldur	w9, [x29, #-8]
  406280:	cmp	w9, #0x0
  406284:	cset	w9, lt  // lt = tstop
  406288:	tbnz	w9, #0, 4062a0 <bump_sysctl_printk_log_level+0x4c>
  40628c:	ldur	w8, [x29, #-8]
  406290:	ldur	w9, [x29, #-4]
  406294:	add	w9, w9, #0x1
  406298:	cmp	w8, w9
  40629c:	b.lt	4062a4 <bump_sysctl_printk_log_level+0x50>  // b.tstop
  4062a0:	b	406358 <bump_sysctl_printk_log_level+0x104>
  4062a4:	ldur	w8, [x29, #-4]
  4062a8:	add	w2, w8, #0x1
  4062ac:	adrp	x0, 40e000 <parse_argv.options+0x4a8>
  4062b0:	add	x0, x0, #0x3c6
  4062b4:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4062b8:	add	x1, x1, #0x3d4
  4062bc:	bl	403888 <sysctl_writef@plt>
  4062c0:	stur	w0, [x29, #-12]
  4062c4:	ldur	w8, [x29, #-12]
  4062c8:	cmp	w8, #0x0
  4062cc:	cset	w8, ge  // ge = tcont
  4062d0:	tbnz	w8, #0, 406358 <bump_sysctl_printk_log_level+0x104>
  4062d4:	mov	w8, #0x7                   	// #7
  4062d8:	stur	w8, [x29, #-16]
  4062dc:	ldur	w8, [x29, #-12]
  4062e0:	stur	w8, [x29, #-20]
  4062e4:	str	wzr, [sp, #24]
  4062e8:	ldr	w0, [sp, #24]
  4062ec:	bl	403628 <log_get_max_level_realm@plt>
  4062f0:	ldur	w8, [x29, #-16]
  4062f4:	and	w8, w8, #0x7
  4062f8:	cmp	w0, w8
  4062fc:	b.lt	40633c <bump_sysctl_printk_log_level+0xe8>  // b.tstop
  406300:	ldr	w8, [sp, #24]
  406304:	ldur	w9, [x29, #-16]
  406308:	orr	w0, w9, w8, lsl #10
  40630c:	ldur	w1, [x29, #-20]
  406310:	ldur	w8, [x29, #-4]
  406314:	add	w6, w8, #0x1
  406318:	ldr	x2, [sp, #8]
  40631c:	mov	w3, #0x125                 	// #293
  406320:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  406324:	add	x4, x4, #0x3d7
  406328:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  40632c:	add	x5, x5, #0x3f4
  406330:	bl	403638 <log_internal_realm@plt>
  406334:	str	w0, [sp, #4]
  406338:	b	406350 <bump_sysctl_printk_log_level+0xfc>
  40633c:	ldur	w0, [x29, #-20]
  406340:	bl	403648 <abs@plt>
  406344:	mov	w8, wzr
  406348:	subs	w8, w8, w0, uxtb
  40634c:	str	w8, [sp, #4]
  406350:	ldr	w8, [sp, #4]
  406354:	str	w8, [sp, #20]
  406358:	ldp	x29, x30, [sp, #48]
  40635c:	add	sp, sp, #0x40
  406360:	ret

0000000000406364 <sync_with_progress>:
  406364:	sub	sp, sp, #0x1a0
  406368:	stp	x29, x30, [sp, #384]
  40636c:	str	x28, [sp, #400]
  406370:	add	x29, sp, #0x180
  406374:	mov	x8, #0xffffffffffffffff    	// #-1
  406378:	adrp	x9, 40d000 <nftw_cb+0x9c>
  40637c:	add	x9, x9, #0xc55
  406380:	add	x9, x9, #0x3
  406384:	adrp	x10, 40e000 <parse_argv.options+0x4a8>
  406388:	add	x10, x10, #0x537
  40638c:	stur	x8, [x29, #-8]
  406390:	str	x9, [sp, #24]
  406394:	str	x10, [sp, #16]
  406398:	mov	w8, wzr
  40639c:	mov	w0, w8
  4063a0:	add	x1, sp, #0x68
  4063a4:	mov	w2, #0x11                  	// #17
  4063a8:	mov	w3, #0xffffffff            	// #-1
  4063ac:	bl	403898 <sigprocmask_many@plt>
  4063b0:	cmp	w0, #0x0
  4063b4:	cset	w8, ge  // ge = tcont
  4063b8:	mov	w9, #0x1                   	// #1
  4063bc:	eor	w8, w8, #0x1
  4063c0:	eor	w8, w8, w9
  4063c4:	eor	w8, w8, w9
  4063c8:	and	w8, w8, #0x1
  4063cc:	mov	w1, w8
  4063d0:	sxtw	x10, w1
  4063d4:	cbz	x10, 4063fc <sync_with_progress+0x98>
  4063d8:	mov	w8, wzr
  4063dc:	mov	w0, w8
  4063e0:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4063e4:	add	x1, x1, #0x4eb
  4063e8:	ldr	x2, [sp, #24]
  4063ec:	mov	w3, #0xdb                  	// #219
  4063f0:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  4063f4:	add	x4, x4, #0x519
  4063f8:	bl	4037e8 <log_assert_failed_realm@plt>
  4063fc:	sub	x0, x29, #0x98
  406400:	add	x1, sp, #0x68
  406404:	mov	x2, #0x80                  	// #128
  406408:	bl	4038a8 <memcpy@plt>
  40640c:	sub	x0, x29, #0x10
  406410:	bl	4038b8 <asynchronous_sync@plt>
  406414:	stur	w0, [x29, #-20]
  406418:	ldur	w8, [x29, #-20]
  40641c:	cmp	w8, #0x0
  406420:	cset	w8, ge  // ge = tcont
  406424:	tbnz	w8, #0, 4064ac <sync_with_progress+0x148>
  406428:	mov	w8, #0x3                   	// #3
  40642c:	str	w8, [sp, #100]
  406430:	ldur	w8, [x29, #-20]
  406434:	str	w8, [sp, #96]
  406438:	str	wzr, [sp, #92]
  40643c:	ldr	w0, [sp, #92]
  406440:	bl	403628 <log_get_max_level_realm@plt>
  406444:	ldr	w8, [sp, #100]
  406448:	and	w8, w8, #0x7
  40644c:	cmp	w0, w8
  406450:	b.lt	406484 <sync_with_progress+0x120>  // b.tstop
  406454:	ldr	w8, [sp, #92]
  406458:	ldr	w9, [sp, #100]
  40645c:	orr	w0, w9, w8, lsl #10
  406460:	ldr	w1, [sp, #96]
  406464:	ldr	x2, [sp, #24]
  406468:	mov	w3, #0xe2                  	// #226
  40646c:	ldr	x4, [sp, #16]
  406470:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  406474:	add	x5, x5, #0x54a
  406478:	bl	403638 <log_internal_realm@plt>
  40647c:	str	w0, [sp, #12]
  406480:	b	406498 <sync_with_progress+0x134>
  406484:	ldr	w0, [sp, #96]
  406488:	bl	403648 <abs@plt>
  40648c:	mov	w8, wzr
  406490:	subs	w8, w8, w0, uxtb
  406494:	str	w8, [sp, #12]
  406498:	ldr	w8, [sp, #12]
  40649c:	str	w8, [sp, #88]
  4064a0:	mov	w8, #0x1                   	// #1
  4064a4:	str	w8, [sp, #84]
  4064a8:	b	4066a0 <sync_with_progress+0x33c>
  4064ac:	mov	w8, #0x6                   	// #6
  4064b0:	str	w8, [sp, #80]
  4064b4:	str	wzr, [sp, #76]
  4064b8:	str	wzr, [sp, #72]
  4064bc:	ldr	w0, [sp, #72]
  4064c0:	bl	403628 <log_get_max_level_realm@plt>
  4064c4:	ldr	w8, [sp, #80]
  4064c8:	and	w8, w8, #0x7
  4064cc:	cmp	w0, w8
  4064d0:	b.lt	406504 <sync_with_progress+0x1a0>  // b.tstop
  4064d4:	ldr	w8, [sp, #72]
  4064d8:	ldr	w9, [sp, #80]
  4064dc:	orr	w0, w9, w8, lsl #10
  4064e0:	ldr	w1, [sp, #76]
  4064e4:	ldr	x2, [sp, #24]
  4064e8:	mov	w3, #0xe6                  	// #230
  4064ec:	ldr	x4, [sp, #16]
  4064f0:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  4064f4:	add	x5, x5, #0x564
  4064f8:	bl	403638 <log_internal_realm@plt>
  4064fc:	str	w0, [sp, #8]
  406500:	b	406518 <sync_with_progress+0x1b4>
  406504:	ldr	w0, [sp, #76]
  406508:	bl	403648 <abs@plt>
  40650c:	mov	w8, wzr
  406510:	subs	w8, w8, w0, uxtb
  406514:	str	w8, [sp, #8]
  406518:	ldr	w8, [sp, #8]
  40651c:	str	w8, [sp, #68]
  406520:	stur	wzr, [x29, #-12]
  406524:	ldur	w8, [x29, #-12]
  406528:	cmp	w8, #0x3
  40652c:	b.cs	406618 <sync_with_progress+0x2b4>  // b.hs, b.nlast
  406530:	ldur	w0, [x29, #-16]
  406534:	mov	x1, #0x9680                	// #38528
  406538:	movk	x1, #0x98, lsl #16
  40653c:	bl	4038c8 <wait_for_terminate_with_timeout@plt>
  406540:	stur	w0, [x29, #-20]
  406544:	ldur	w8, [x29, #-20]
  406548:	cbnz	w8, 406558 <sync_with_progress+0x1f4>
  40654c:	mov	w8, #0x1                   	// #1
  406550:	str	w8, [sp, #84]
  406554:	b	4066a0 <sync_with_progress+0x33c>
  406558:	ldur	w8, [x29, #-20]
  40655c:	mov	w9, #0xffffff92            	// #-110
  406560:	cmp	w8, w9
  406564:	b.ne	406584 <sync_with_progress+0x220>  // b.any
  406568:	sub	x0, x29, #0x8
  40656c:	bl	406c88 <sync_making_progress>
  406570:	cmp	w0, #0x0
  406574:	cset	w8, le
  406578:	tbnz	w8, #0, 406580 <sync_with_progress+0x21c>
  40657c:	stur	wzr, [x29, #-12]
  406580:	b	406608 <sync_with_progress+0x2a4>
  406584:	mov	w8, #0x3                   	// #3
  406588:	str	w8, [sp, #64]
  40658c:	ldur	w8, [x29, #-20]
  406590:	str	w8, [sp, #60]
  406594:	str	wzr, [sp, #56]
  406598:	ldr	w0, [sp, #56]
  40659c:	bl	403628 <log_get_max_level_realm@plt>
  4065a0:	ldr	w8, [sp, #64]
  4065a4:	and	w8, w8, #0x7
  4065a8:	cmp	w0, w8
  4065ac:	b.lt	4065e0 <sync_with_progress+0x27c>  // b.tstop
  4065b0:	ldr	w8, [sp, #56]
  4065b4:	ldr	w9, [sp, #64]
  4065b8:	orr	w0, w9, w8, lsl #10
  4065bc:	ldr	w1, [sp, #60]
  4065c0:	ldr	x2, [sp, #24]
  4065c4:	mov	w3, #0xf7                  	// #247
  4065c8:	ldr	x4, [sp, #16]
  4065cc:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  4065d0:	add	x5, x5, #0x58b
  4065d4:	bl	403638 <log_internal_realm@plt>
  4065d8:	str	w0, [sp, #4]
  4065dc:	b	4065f4 <sync_with_progress+0x290>
  4065e0:	ldr	w0, [sp, #60]
  4065e4:	bl	403648 <abs@plt>
  4065e8:	mov	w8, wzr
  4065ec:	subs	w8, w8, w0, uxtb
  4065f0:	str	w8, [sp, #4]
  4065f4:	ldr	w8, [sp, #4]
  4065f8:	str	w8, [sp, #52]
  4065fc:	mov	w8, #0x1                   	// #1
  406600:	str	w8, [sp, #84]
  406604:	b	4066a0 <sync_with_progress+0x33c>
  406608:	ldur	w8, [x29, #-12]
  40660c:	add	w8, w8, #0x1
  406610:	stur	w8, [x29, #-12]
  406614:	b	406524 <sync_with_progress+0x1c0>
  406618:	mov	w8, #0x3                   	// #3
  40661c:	str	w8, [sp, #48]
  406620:	str	wzr, [sp, #44]
  406624:	str	wzr, [sp, #40]
  406628:	ldr	w0, [sp, #40]
  40662c:	bl	403628 <log_get_max_level_realm@plt>
  406630:	ldr	w8, [sp, #48]
  406634:	and	w8, w8, #0x7
  406638:	cmp	w0, w8
  40663c:	b.lt	406674 <sync_with_progress+0x310>  // b.tstop
  406640:	ldr	w8, [sp, #40]
  406644:	ldr	w9, [sp, #48]
  406648:	orr	w0, w9, w8, lsl #10
  40664c:	ldr	w1, [sp, #44]
  406650:	ldur	w6, [x29, #-16]
  406654:	ldr	x2, [sp, #24]
  406658:	mov	w3, #0xfe                  	// #254
  40665c:	ldr	x4, [sp, #16]
  406660:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  406664:	add	x5, x5, #0x5bc
  406668:	bl	403638 <log_internal_realm@plt>
  40666c:	str	w0, [sp]
  406670:	b	406688 <sync_with_progress+0x324>
  406674:	ldr	w0, [sp, #44]
  406678:	bl	403648 <abs@plt>
  40667c:	mov	w8, wzr
  406680:	subs	w8, w8, w0, uxtb
  406684:	str	w8, [sp]
  406688:	ldr	w8, [sp]
  40668c:	str	w8, [sp, #36]
  406690:	ldur	w0, [x29, #-16]
  406694:	mov	w1, #0x9                   	// #9
  406698:	bl	4038d8 <kill@plt>
  40669c:	str	wzr, [sp, #84]
  4066a0:	sub	x0, x29, #0x98
  4066a4:	bl	406bfc <block_signals_reset>
  4066a8:	ldr	x28, [sp, #400]
  4066ac:	ldp	x29, x30, [sp, #384]
  4066b0:	add	sp, sp, #0x1a0
  4066b4:	ret

00000000004066b8 <watchdog_free_device>:
  4066b8:	stp	x29, x30, [sp, #-16]!
  4066bc:	mov	x29, sp
  4066c0:	mov	x8, xzr
  4066c4:	mov	x0, x8
  4066c8:	bl	4036a8 <watchdog_set_device@plt>
  4066cc:	ldp	x29, x30, [sp], #16
  4066d0:	ret

00000000004066d4 <switch_root_initramfs>:
  4066d4:	sub	sp, sp, #0x50
  4066d8:	stp	x29, x30, [sp, #64]
  4066dc:	add	x29, sp, #0x40
  4066e0:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  4066e4:	add	x8, x8, #0x726
  4066e8:	mov	x9, xzr
  4066ec:	mov	x3, #0x1000                	// #4096
  4066f0:	adrp	x10, 40d000 <nftw_cb+0x9c>
  4066f4:	add	x10, x10, #0xc55
  4066f8:	add	x10, x10, #0x3
  4066fc:	mov	x0, x8
  406700:	mov	x1, x8
  406704:	mov	x2, x9
  406708:	mov	x4, x9
  40670c:	str	x8, [sp, #16]
  406710:	str	x10, [sp, #8]
  406714:	bl	4038e8 <mount@plt>
  406718:	cmp	w0, #0x0
  40671c:	cset	w11, ge  // ge = tcont
  406720:	tbnz	w11, #0, 4067b0 <switch_root_initramfs+0xdc>
  406724:	mov	w8, #0x3                   	// #3
  406728:	stur	w8, [x29, #-8]
  40672c:	bl	403768 <__errno_location@plt>
  406730:	ldr	w8, [x0]
  406734:	stur	w8, [x29, #-12]
  406738:	stur	wzr, [x29, #-16]
  40673c:	ldur	w0, [x29, #-16]
  406740:	bl	403628 <log_get_max_level_realm@plt>
  406744:	ldur	w8, [x29, #-8]
  406748:	and	w8, w8, #0x7
  40674c:	cmp	w0, w8
  406750:	b.lt	406788 <switch_root_initramfs+0xb4>  // b.tstop
  406754:	ldur	w8, [x29, #-16]
  406758:	ldur	w9, [x29, #-8]
  40675c:	orr	w0, w9, w8, lsl #10
  406760:	ldur	w1, [x29, #-12]
  406764:	ldr	x2, [sp, #8]
  406768:	mov	w3, #0x96                  	// #150
  40676c:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  406770:	add	x4, x4, #0x735
  406774:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  406778:	add	x5, x5, #0x74b
  40677c:	bl	403638 <log_internal_realm@plt>
  406780:	str	w0, [sp, #4]
  406784:	b	40679c <switch_root_initramfs+0xc8>
  406788:	ldur	w0, [x29, #-12]
  40678c:	bl	403648 <abs@plt>
  406790:	mov	w8, wzr
  406794:	subs	w8, w8, w0, uxtb
  406798:	str	w8, [sp, #4]
  40679c:	ldr	w8, [sp, #4]
  4067a0:	stur	w8, [x29, #-20]
  4067a4:	ldur	w8, [x29, #-20]
  4067a8:	stur	w8, [x29, #-4]
  4067ac:	b	406884 <switch_root_initramfs+0x1b0>
  4067b0:	mov	x8, xzr
  4067b4:	mov	x0, x8
  4067b8:	ldr	x1, [sp, #16]
  4067bc:	mov	x2, x8
  4067c0:	mov	x3, #0x40000               	// #262144
  4067c4:	mov	x4, x8
  4067c8:	bl	4038e8 <mount@plt>
  4067cc:	cmp	w0, #0x0
  4067d0:	cset	w9, ge  // ge = tcont
  4067d4:	tbnz	w9, #0, 406864 <switch_root_initramfs+0x190>
  4067d8:	mov	w8, #0x3                   	// #3
  4067dc:	stur	w8, [x29, #-24]
  4067e0:	bl	403768 <__errno_location@plt>
  4067e4:	ldr	w8, [x0]
  4067e8:	stur	w8, [x29, #-28]
  4067ec:	str	wzr, [sp, #32]
  4067f0:	ldr	w0, [sp, #32]
  4067f4:	bl	403628 <log_get_max_level_realm@plt>
  4067f8:	ldur	w8, [x29, #-24]
  4067fc:	and	w8, w8, #0x7
  406800:	cmp	w0, w8
  406804:	b.lt	40683c <switch_root_initramfs+0x168>  // b.tstop
  406808:	ldr	w8, [sp, #32]
  40680c:	ldur	w9, [x29, #-24]
  406810:	orr	w0, w9, w8, lsl #10
  406814:	ldur	w1, [x29, #-28]
  406818:	ldr	x2, [sp, #8]
  40681c:	mov	w3, #0x99                  	// #153
  406820:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  406824:	add	x4, x4, #0x735
  406828:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  40682c:	add	x5, x5, #0x785
  406830:	bl	403638 <log_internal_realm@plt>
  406834:	str	w0, [sp]
  406838:	b	406850 <switch_root_initramfs+0x17c>
  40683c:	ldur	w0, [x29, #-28]
  406840:	bl	403648 <abs@plt>
  406844:	mov	w8, wzr
  406848:	subs	w8, w8, w0, uxtb
  40684c:	str	w8, [sp]
  406850:	ldr	w8, [sp]
  406854:	str	w8, [sp, #28]
  406858:	ldr	w8, [sp, #28]
  40685c:	stur	w8, [x29, #-4]
  406860:	b	406884 <switch_root_initramfs+0x1b0>
  406864:	ldr	x0, [sp, #16]
  406868:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  40686c:	add	x1, x1, #0x7b5
  406870:	mov	w8, wzr
  406874:	and	w2, w8, #0x1
  406878:	mov	x3, #0x1000                	// #4096
  40687c:	bl	4038f8 <switch_root@plt>
  406880:	stur	w0, [x29, #-4]
  406884:	ldur	w0, [x29, #-4]
  406888:	ldp	x29, x30, [sp, #64]
  40688c:	add	sp, sp, #0x50
  406890:	ret

0000000000406894 <safe_fork>:
  406894:	sub	sp, sp, #0x30
  406898:	stp	x29, x30, [sp, #32]
  40689c:	add	x29, sp, #0x20
  4068a0:	mov	x8, xzr
  4068a4:	mov	x3, x8
  4068a8:	stur	x0, [x29, #-8]
  4068ac:	stur	w1, [x29, #-12]
  4068b0:	str	x2, [sp, #8]
  4068b4:	ldur	x0, [x29, #-8]
  4068b8:	ldur	w9, [x29, #-12]
  4068bc:	ldr	x4, [sp, #8]
  4068c0:	mov	x1, x3
  4068c4:	mov	x2, x8
  4068c8:	mov	w3, w9
  4068cc:	bl	403908 <safe_fork_full@plt>
  4068d0:	ldp	x29, x30, [sp, #32]
  4068d4:	add	sp, sp, #0x30
  4068d8:	ret

00000000004068dc <read_current_sysctl_printk_log_level>:
  4068dc:	sub	sp, sp, #0xa0
  4068e0:	stp	x29, x30, [sp, #144]
  4068e4:	add	x29, sp, #0x90
  4068e8:	mov	x8, xzr
  4068ec:	adrp	x0, 40e000 <parse_argv.options+0x4a8>
  4068f0:	add	x0, x0, #0x3c6
  4068f4:	adrp	x9, 40d000 <nftw_cb+0x9c>
  4068f8:	add	x9, x9, #0xc55
  4068fc:	add	x9, x9, #0x3
  406900:	adrp	x10, 40e000 <parse_argv.options+0x4a8>
  406904:	add	x10, x10, #0x41b
  406908:	sub	x1, x29, #0x10
  40690c:	stur	x8, [x29, #-16]
  406910:	stur	x8, [x29, #-24]
  406914:	str	x9, [sp, #24]
  406918:	str	x10, [sp, #16]
  40691c:	bl	403918 <sysctl_read@plt>
  406920:	stur	w0, [x29, #-44]
  406924:	ldur	w11, [x29, #-44]
  406928:	cmp	w11, #0x0
  40692c:	cset	w11, ge  // ge = tcont
  406930:	tbnz	w11, #0, 4069c0 <read_current_sysctl_printk_log_level+0xe4>
  406934:	mov	w8, #0x7                   	// #7
  406938:	stur	w8, [x29, #-48]
  40693c:	ldur	w8, [x29, #-44]
  406940:	stur	w8, [x29, #-52]
  406944:	stur	wzr, [x29, #-56]
  406948:	ldur	w0, [x29, #-56]
  40694c:	bl	403628 <log_get_max_level_realm@plt>
  406950:	ldur	w8, [x29, #-48]
  406954:	and	w8, w8, #0x7
  406958:	cmp	w0, w8
  40695c:	b.lt	406990 <read_current_sysctl_printk_log_level+0xb4>  // b.tstop
  406960:	ldur	w8, [x29, #-56]
  406964:	ldur	w9, [x29, #-48]
  406968:	orr	w0, w9, w8, lsl #10
  40696c:	ldur	w1, [x29, #-52]
  406970:	ldr	x2, [sp, #24]
  406974:	mov	w3, #0x10a                 	// #266
  406978:	ldr	x4, [sp, #16]
  40697c:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  406980:	add	x5, x5, #0x440
  406984:	bl	403638 <log_internal_realm@plt>
  406988:	str	w0, [sp, #12]
  40698c:	b	4069a4 <read_current_sysctl_printk_log_level+0xc8>
  406990:	ldur	w0, [x29, #-52]
  406994:	bl	403648 <abs@plt>
  406998:	mov	w8, wzr
  40699c:	subs	w8, w8, w0, uxtb
  4069a0:	str	w8, [sp, #12]
  4069a4:	ldr	w8, [sp, #12]
  4069a8:	stur	w8, [x29, #-60]
  4069ac:	ldur	w8, [x29, #-60]
  4069b0:	stur	w8, [x29, #-4]
  4069b4:	mov	w8, #0x1                   	// #1
  4069b8:	stur	w8, [x29, #-64]
  4069bc:	b	406bdc <read_current_sysctl_printk_log_level+0x300>
  4069c0:	ldur	x8, [x29, #-16]
  4069c4:	sub	x0, x29, #0x28
  4069c8:	stur	x8, [x29, #-40]
  4069cc:	sub	x1, x29, #0x18
  4069d0:	mov	x8, xzr
  4069d4:	mov	x2, x8
  4069d8:	mov	w9, wzr
  4069dc:	mov	w3, w9
  4069e0:	bl	403928 <extract_first_word@plt>
  4069e4:	stur	w0, [x29, #-44]
  4069e8:	ldur	w9, [x29, #-44]
  4069ec:	cmp	w9, #0x0
  4069f0:	cset	w9, ge  // ge = tcont
  4069f4:	tbnz	w9, #0, 406a84 <read_current_sysctl_printk_log_level+0x1a8>
  4069f8:	mov	w8, #0x7                   	// #7
  4069fc:	stur	w8, [x29, #-68]
  406a00:	ldur	w8, [x29, #-44]
  406a04:	str	w8, [sp, #72]
  406a08:	str	wzr, [sp, #68]
  406a0c:	ldr	w0, [sp, #68]
  406a10:	bl	403628 <log_get_max_level_realm@plt>
  406a14:	ldur	w8, [x29, #-68]
  406a18:	and	w8, w8, #0x7
  406a1c:	cmp	w0, w8
  406a20:	b.lt	406a54 <read_current_sysctl_printk_log_level+0x178>  // b.tstop
  406a24:	ldr	w8, [sp, #68]
  406a28:	ldur	w9, [x29, #-68]
  406a2c:	orr	w0, w9, w8, lsl #10
  406a30:	ldr	w1, [sp, #72]
  406a34:	ldr	x2, [sp, #24]
  406a38:	mov	w3, #0x10f                 	// #271
  406a3c:	ldr	x4, [sp, #16]
  406a40:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  406a44:	add	x5, x5, #0x465
  406a48:	bl	403638 <log_internal_realm@plt>
  406a4c:	str	w0, [sp, #8]
  406a50:	b	406a68 <read_current_sysctl_printk_log_level+0x18c>
  406a54:	ldr	w0, [sp, #72]
  406a58:	bl	403648 <abs@plt>
  406a5c:	mov	w8, wzr
  406a60:	subs	w8, w8, w0, uxtb
  406a64:	str	w8, [sp, #8]
  406a68:	ldr	w8, [sp, #8]
  406a6c:	str	w8, [sp, #64]
  406a70:	ldr	w8, [sp, #64]
  406a74:	stur	w8, [x29, #-4]
  406a78:	mov	w8, #0x1                   	// #1
  406a7c:	stur	w8, [x29, #-64]
  406a80:	b	406bdc <read_current_sysctl_printk_log_level+0x300>
  406a84:	ldur	w8, [x29, #-44]
  406a88:	cbnz	w8, 406b1c <read_current_sysctl_printk_log_level+0x240>
  406a8c:	mov	w8, #0x7                   	// #7
  406a90:	str	w8, [sp, #60]
  406a94:	mov	w8, #0x16                  	// #22
  406a98:	movk	w8, #0x4000, lsl #16
  406a9c:	str	w8, [sp, #56]
  406aa0:	str	wzr, [sp, #52]
  406aa4:	ldr	w0, [sp, #52]
  406aa8:	bl	403628 <log_get_max_level_realm@plt>
  406aac:	ldr	w8, [sp, #60]
  406ab0:	and	w8, w8, #0x7
  406ab4:	cmp	w0, w8
  406ab8:	b.lt	406aec <read_current_sysctl_printk_log_level+0x210>  // b.tstop
  406abc:	ldr	w8, [sp, #52]
  406ac0:	ldr	w9, [sp, #60]
  406ac4:	orr	w0, w9, w8, lsl #10
  406ac8:	ldr	w1, [sp, #56]
  406acc:	ldr	x2, [sp, #24]
  406ad0:	mov	w3, #0x111                 	// #273
  406ad4:	ldr	x4, [sp, #16]
  406ad8:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  406adc:	add	x5, x5, #0x494
  406ae0:	bl	403638 <log_internal_realm@plt>
  406ae4:	str	w0, [sp, #4]
  406ae8:	b	406b00 <read_current_sysctl_printk_log_level+0x224>
  406aec:	ldr	w0, [sp, #56]
  406af0:	bl	403648 <abs@plt>
  406af4:	mov	w8, wzr
  406af8:	subs	w8, w8, w0, uxtb
  406afc:	str	w8, [sp, #4]
  406b00:	ldr	w8, [sp, #4]
  406b04:	str	w8, [sp, #48]
  406b08:	ldr	w8, [sp, #48]
  406b0c:	stur	w8, [x29, #-4]
  406b10:	mov	w8, #0x1                   	// #1
  406b14:	stur	w8, [x29, #-64]
  406b18:	b	406bdc <read_current_sysctl_printk_log_level+0x300>
  406b1c:	ldur	x0, [x29, #-24]
  406b20:	sub	x1, x29, #0x1c
  406b24:	bl	403938 <safe_atoi@plt>
  406b28:	stur	w0, [x29, #-44]
  406b2c:	ldur	w8, [x29, #-44]
  406b30:	cmp	w8, #0x0
  406b34:	cset	w8, ge  // ge = tcont
  406b38:	tbnz	w8, #0, 406bcc <read_current_sysctl_printk_log_level+0x2f0>
  406b3c:	mov	w8, #0x7                   	// #7
  406b40:	str	w8, [sp, #44]
  406b44:	ldur	w8, [x29, #-44]
  406b48:	str	w8, [sp, #40]
  406b4c:	str	wzr, [sp, #36]
  406b50:	ldr	w0, [sp, #36]
  406b54:	bl	403628 <log_get_max_level_realm@plt>
  406b58:	ldr	w8, [sp, #44]
  406b5c:	and	w8, w8, #0x7
  406b60:	cmp	w0, w8
  406b64:	b.lt	406b9c <read_current_sysctl_printk_log_level+0x2c0>  // b.tstop
  406b68:	ldr	w8, [sp, #36]
  406b6c:	ldr	w9, [sp, #44]
  406b70:	orr	w0, w9, w8, lsl #10
  406b74:	ldr	w1, [sp, #40]
  406b78:	ldur	x6, [x29, #-16]
  406b7c:	ldr	x2, [sp, #24]
  406b80:	mov	w3, #0x115                 	// #277
  406b84:	ldr	x4, [sp, #16]
  406b88:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  406b8c:	add	x5, x5, #0x4c2
  406b90:	bl	403638 <log_internal_realm@plt>
  406b94:	str	w0, [sp]
  406b98:	b	406bb0 <read_current_sysctl_printk_log_level+0x2d4>
  406b9c:	ldr	w0, [sp, #40]
  406ba0:	bl	403648 <abs@plt>
  406ba4:	mov	w8, wzr
  406ba8:	subs	w8, w8, w0, uxtb
  406bac:	str	w8, [sp]
  406bb0:	ldr	w8, [sp]
  406bb4:	str	w8, [sp, #32]
  406bb8:	ldr	w8, [sp, #32]
  406bbc:	stur	w8, [x29, #-4]
  406bc0:	mov	w8, #0x1                   	// #1
  406bc4:	stur	w8, [x29, #-64]
  406bc8:	b	406bdc <read_current_sysctl_printk_log_level+0x300>
  406bcc:	ldur	w8, [x29, #-28]
  406bd0:	stur	w8, [x29, #-4]
  406bd4:	mov	w8, #0x1                   	// #1
  406bd8:	stur	w8, [x29, #-64]
  406bdc:	sub	x0, x29, #0x18
  406be0:	bl	405af0 <freep>
  406be4:	sub	x0, x29, #0x10
  406be8:	bl	405af0 <freep>
  406bec:	ldur	w0, [x29, #-4]
  406bf0:	ldp	x29, x30, [sp, #144]
  406bf4:	add	sp, sp, #0xa0
  406bf8:	ret

0000000000406bfc <block_signals_reset>:
  406bfc:	sub	sp, sp, #0x20
  406c00:	stp	x29, x30, [sp, #16]
  406c04:	add	x29, sp, #0x10
  406c08:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  406c0c:	add	x8, x8, #0x632
  406c10:	add	x2, x8, #0x3
  406c14:	str	x0, [sp, #8]
  406c18:	str	x2, [sp]
  406c1c:	ldr	x1, [sp, #8]
  406c20:	mov	w0, #0x2                   	// #2
  406c24:	mov	x8, xzr
  406c28:	mov	x2, x8
  406c2c:	bl	403948 <sigprocmask@plt>
  406c30:	cmp	w0, #0x0
  406c34:	cset	w9, ge  // ge = tcont
  406c38:	mov	w10, #0x1                   	// #1
  406c3c:	eor	w9, w9, #0x1
  406c40:	eor	w9, w9, w10
  406c44:	eor	w9, w9, w10
  406c48:	and	w9, w9, #0x1
  406c4c:	mov	w1, w9
  406c50:	sxtw	x8, w1
  406c54:	cbz	x8, 406c7c <block_signals_reset+0x80>
  406c58:	mov	w8, wzr
  406c5c:	mov	w0, w8
  406c60:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  406c64:	add	x1, x1, #0x60a
  406c68:	ldr	x2, [sp]
  406c6c:	mov	w3, #0x18                  	// #24
  406c70:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  406c74:	add	x4, x4, #0x64d
  406c78:	bl	4037e8 <log_assert_failed_realm@plt>
  406c7c:	ldp	x29, x30, [sp, #16]
  406c80:	add	sp, sp, #0x20
  406c84:	ret

0000000000406c88 <sync_making_progress>:
  406c88:	sub	sp, sp, #0xc0
  406c8c:	stp	x29, x30, [sp, #176]
  406c90:	add	x29, sp, #0xb0
  406c94:	mov	x8, xzr
  406c98:	adrp	x9, 40e000 <parse_argv.options+0x4a8>
  406c9c:	add	x9, x9, #0x672
  406ca0:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  406ca4:	add	x1, x1, #0x680
  406ca8:	adrp	x10, 40d000 <nftw_cb+0x9c>
  406cac:	add	x10, x10, #0xc55
  406cb0:	add	x10, x10, #0x3
  406cb4:	adrp	x11, 40e000 <parse_argv.options+0x4a8>
  406cb8:	add	x11, x11, #0x683
  406cbc:	stur	x0, [x29, #-16]
  406cc0:	stur	x8, [x29, #-24]
  406cc4:	stur	xzr, [x29, #-32]
  406cc8:	mov	x0, x9
  406ccc:	str	x10, [sp, #40]
  406cd0:	str	x11, [sp, #32]
  406cd4:	bl	403958 <fopen64@plt>
  406cd8:	stur	x0, [x29, #-24]
  406cdc:	ldur	x8, [x29, #-24]
  406ce0:	cbnz	x8, 406d74 <sync_making_progress+0xec>
  406ce4:	mov	w8, #0x4                   	// #4
  406ce8:	stur	w8, [x29, #-40]
  406cec:	bl	403768 <__errno_location@plt>
  406cf0:	ldr	w8, [x0]
  406cf4:	stur	w8, [x29, #-44]
  406cf8:	stur	wzr, [x29, #-48]
  406cfc:	ldur	w0, [x29, #-48]
  406d00:	bl	403628 <log_get_max_level_realm@plt>
  406d04:	ldur	w8, [x29, #-40]
  406d08:	and	w8, w8, #0x7
  406d0c:	cmp	w0, w8
  406d10:	b.lt	406d44 <sync_making_progress+0xbc>  // b.tstop
  406d14:	ldur	w8, [x29, #-48]
  406d18:	ldur	w9, [x29, #-40]
  406d1c:	orr	w0, w9, w8, lsl #10
  406d20:	ldur	w1, [x29, #-44]
  406d24:	ldr	x2, [sp, #40]
  406d28:	mov	w3, #0xb3                  	// #179
  406d2c:	ldr	x4, [sp, #32]
  406d30:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  406d34:	add	x5, x5, #0x698
  406d38:	bl	403638 <log_internal_realm@plt>
  406d3c:	str	w0, [sp, #28]
  406d40:	b	406d58 <sync_making_progress+0xd0>
  406d44:	ldur	w0, [x29, #-44]
  406d48:	bl	403648 <abs@plt>
  406d4c:	mov	w8, wzr
  406d50:	subs	w8, w8, w0, uxtb
  406d54:	str	w8, [sp, #28]
  406d58:	ldr	w8, [sp, #28]
  406d5c:	stur	w8, [x29, #-52]
  406d60:	ldur	w8, [x29, #-52]
  406d64:	stur	w8, [x29, #-4]
  406d68:	mov	w8, #0x1                   	// #1
  406d6c:	stur	w8, [x29, #-56]
  406d70:	b	407048 <sync_making_progress+0x3c0>
  406d74:	sub	x2, x29, #0x40
  406d78:	mov	x8, xzr
  406d7c:	stur	x8, [x29, #-64]
  406d80:	stur	xzr, [x29, #-72]
  406d84:	ldur	x0, [x29, #-24]
  406d88:	mov	x1, #0x100000              	// #1048576
  406d8c:	bl	407088 <read_line>
  406d90:	stur	w0, [x29, #-76]
  406d94:	ldur	w9, [x29, #-76]
  406d98:	cmp	w9, #0x0
  406d9c:	cset	w9, ge  // ge = tcont
  406da0:	tbnz	w9, #0, 406e30 <sync_making_progress+0x1a8>
  406da4:	mov	w8, #0x4                   	// #4
  406da8:	stur	w8, [x29, #-80]
  406dac:	ldur	w8, [x29, #-76]
  406db0:	stur	w8, [x29, #-84]
  406db4:	str	wzr, [sp, #88]
  406db8:	ldr	w0, [sp, #88]
  406dbc:	bl	403628 <log_get_max_level_realm@plt>
  406dc0:	ldur	w8, [x29, #-80]
  406dc4:	and	w8, w8, #0x7
  406dc8:	cmp	w0, w8
  406dcc:	b.lt	406e00 <sync_making_progress+0x178>  // b.tstop
  406dd0:	ldr	w8, [sp, #88]
  406dd4:	ldur	w9, [x29, #-80]
  406dd8:	orr	w0, w9, w8, lsl #10
  406ddc:	ldur	w1, [x29, #-84]
  406de0:	ldr	x2, [sp, #40]
  406de4:	mov	w3, #0xbc                  	// #188
  406de8:	ldr	x4, [sp, #32]
  406dec:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  406df0:	add	x5, x5, #0x6b9
  406df4:	bl	403638 <log_internal_realm@plt>
  406df8:	str	w0, [sp, #24]
  406dfc:	b	406e14 <sync_making_progress+0x18c>
  406e00:	ldur	w0, [x29, #-84]
  406e04:	bl	403648 <abs@plt>
  406e08:	mov	w8, wzr
  406e0c:	subs	w8, w8, w0, uxtb
  406e10:	str	w8, [sp, #24]
  406e14:	ldr	w8, [sp, #24]
  406e18:	str	w8, [sp, #84]
  406e1c:	ldr	w8, [sp, #84]
  406e20:	stur	w8, [x29, #-4]
  406e24:	mov	w8, #0x1                   	// #1
  406e28:	stur	w8, [x29, #-56]
  406e2c:	b	406fd4 <sync_making_progress+0x34c>
  406e30:	ldur	w8, [x29, #-76]
  406e34:	cbnz	w8, 406e44 <sync_making_progress+0x1bc>
  406e38:	mov	w8, #0x2                   	// #2
  406e3c:	stur	w8, [x29, #-56]
  406e40:	b	406fd4 <sync_making_progress+0x34c>
  406e44:	ldur	x0, [x29, #-64]
  406e48:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  406e4c:	add	x1, x1, #0x6db
  406e50:	bl	403968 <first_word@plt>
  406e54:	cbnz	x0, 406e8c <sync_making_progress+0x204>
  406e58:	ldur	x0, [x29, #-64]
  406e5c:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  406e60:	add	x1, x1, #0x6e9
  406e64:	bl	403968 <first_word@plt>
  406e68:	cbnz	x0, 406e8c <sync_making_progress+0x204>
  406e6c:	ldur	x0, [x29, #-64]
  406e70:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  406e74:	add	x1, x1, #0x6f4
  406e78:	bl	403968 <first_word@plt>
  406e7c:	cbnz	x0, 406e8c <sync_making_progress+0x204>
  406e80:	mov	w8, #0x3                   	// #3
  406e84:	stur	w8, [x29, #-56]
  406e88:	b	406fd4 <sync_making_progress+0x34c>
  406e8c:	bl	403768 <__errno_location@plt>
  406e90:	str	wzr, [x0]
  406e94:	ldur	x0, [x29, #-64]
  406e98:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  406e9c:	add	x1, x1, #0x6fb
  406ea0:	sub	x2, x29, #0x48
  406ea4:	bl	403978 <__isoc99_sscanf@plt>
  406ea8:	cmp	w0, #0x1
  406eac:	b.eq	406fc0 <sync_making_progress+0x338>  // b.none
  406eb0:	bl	403768 <__errno_location@plt>
  406eb4:	ldr	w8, [x0]
  406eb8:	cbz	w8, 406f3c <sync_making_progress+0x2b4>
  406ebc:	mov	w8, #0x4                   	// #4
  406ec0:	str	w8, [sp, #80]
  406ec4:	bl	403768 <__errno_location@plt>
  406ec8:	ldr	w8, [x0]
  406ecc:	str	w8, [sp, #76]
  406ed0:	str	wzr, [sp, #72]
  406ed4:	ldr	w0, [sp, #72]
  406ed8:	bl	403628 <log_get_max_level_realm@plt>
  406edc:	ldr	w8, [sp, #80]
  406ee0:	and	w8, w8, #0x7
  406ee4:	cmp	w0, w8
  406ee8:	b.lt	406f1c <sync_making_progress+0x294>  // b.tstop
  406eec:	ldr	w8, [sp, #72]
  406ef0:	ldr	w9, [sp, #80]
  406ef4:	orr	w0, w9, w8, lsl #10
  406ef8:	ldr	w1, [sp, #76]
  406efc:	ldr	x2, [sp, #40]
  406f00:	mov	w3, #0xc6                  	// #198
  406f04:	ldr	x4, [sp, #32]
  406f08:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  406f0c:	add	x5, x5, #0x6b9
  406f10:	bl	403638 <log_internal_realm@plt>
  406f14:	str	w0, [sp, #20]
  406f18:	b	406f30 <sync_making_progress+0x2a8>
  406f1c:	ldr	w0, [sp, #76]
  406f20:	bl	403648 <abs@plt>
  406f24:	mov	w8, wzr
  406f28:	subs	w8, w8, w0, uxtb
  406f2c:	str	w8, [sp, #20]
  406f30:	ldr	w8, [sp, #20]
  406f34:	str	w8, [sp, #68]
  406f38:	b	406fb0 <sync_making_progress+0x328>
  406f3c:	mov	w8, #0x4                   	// #4
  406f40:	str	w8, [sp, #64]
  406f44:	str	wzr, [sp, #60]
  406f48:	str	wzr, [sp, #56]
  406f4c:	ldr	w0, [sp, #56]
  406f50:	bl	403628 <log_get_max_level_realm@plt>
  406f54:	ldr	w8, [sp, #64]
  406f58:	and	w8, w8, #0x7
  406f5c:	cmp	w0, w8
  406f60:	b.lt	406f94 <sync_making_progress+0x30c>  // b.tstop
  406f64:	ldr	w8, [sp, #56]
  406f68:	ldr	w9, [sp, #64]
  406f6c:	orr	w0, w9, w8, lsl #10
  406f70:	ldr	w1, [sp, #60]
  406f74:	ldr	x2, [sp, #40]
  406f78:	mov	w3, #0xc8                  	// #200
  406f7c:	ldr	x4, [sp, #32]
  406f80:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  406f84:	add	x5, x5, #0x708
  406f88:	bl	403638 <log_internal_realm@plt>
  406f8c:	str	w0, [sp, #16]
  406f90:	b	406fa8 <sync_making_progress+0x320>
  406f94:	ldr	w0, [sp, #60]
  406f98:	bl	403648 <abs@plt>
  406f9c:	mov	w8, wzr
  406fa0:	subs	w8, w8, w0, uxtb
  406fa4:	str	w8, [sp, #16]
  406fa8:	ldr	w8, [sp, #16]
  406fac:	str	w8, [sp, #52]
  406fb0:	stur	wzr, [x29, #-4]
  406fb4:	mov	w8, #0x1                   	// #1
  406fb8:	stur	w8, [x29, #-56]
  406fbc:	b	406fd4 <sync_making_progress+0x34c>
  406fc0:	ldur	x8, [x29, #-72]
  406fc4:	ldur	x9, [x29, #-32]
  406fc8:	add	x8, x9, x8
  406fcc:	stur	x8, [x29, #-32]
  406fd0:	stur	wzr, [x29, #-56]
  406fd4:	sub	x0, x29, #0x40
  406fd8:	bl	405af0 <freep>
  406fdc:	ldur	w8, [x29, #-56]
  406fe0:	str	w8, [sp, #12]
  406fe4:	cbz	w8, 40700c <sync_making_progress+0x384>
  406fe8:	b	406fec <sync_making_progress+0x364>
  406fec:	ldr	w8, [sp, #12]
  406ff0:	cmp	w8, #0x2
  406ff4:	b.eq	407010 <sync_making_progress+0x388>  // b.none
  406ff8:	b	406ffc <sync_making_progress+0x374>
  406ffc:	ldr	w8, [sp, #12]
  407000:	cmp	w8, #0x3
  407004:	b.eq	406d74 <sync_making_progress+0xec>  // b.none
  407008:	b	407048 <sync_making_progress+0x3c0>
  40700c:	b	406d74 <sync_making_progress+0xec>
  407010:	ldur	x8, [x29, #-16]
  407014:	ldr	x8, [x8]
  407018:	ldur	x9, [x29, #-32]
  40701c:	cmp	x8, x9
  407020:	cset	w10, hi  // hi = pmore
  407024:	and	w10, w10, #0x1
  407028:	stur	w10, [x29, #-36]
  40702c:	ldur	x8, [x29, #-32]
  407030:	ldur	x9, [x29, #-16]
  407034:	str	x8, [x9]
  407038:	ldur	w10, [x29, #-36]
  40703c:	stur	w10, [x29, #-4]
  407040:	mov	w10, #0x1                   	// #1
  407044:	stur	w10, [x29, #-56]
  407048:	sub	x0, x29, #0x18
  40704c:	bl	407060 <fclosep>
  407050:	ldur	w0, [x29, #-4]
  407054:	ldp	x29, x30, [sp, #176]
  407058:	add	sp, sp, #0xc0
  40705c:	ret

0000000000407060 <fclosep>:
  407060:	sub	sp, sp, #0x20
  407064:	stp	x29, x30, [sp, #16]
  407068:	add	x29, sp, #0x10
  40706c:	str	x0, [sp, #8]
  407070:	ldr	x8, [sp, #8]
  407074:	ldr	x0, [x8]
  407078:	bl	403988 <safe_fclose@plt>
  40707c:	ldp	x29, x30, [sp, #16]
  407080:	add	sp, sp, #0x20
  407084:	ret

0000000000407088 <read_line>:
  407088:	sub	sp, sp, #0x30
  40708c:	stp	x29, x30, [sp, #32]
  407090:	add	x29, sp, #0x20
  407094:	mov	w8, wzr
  407098:	stur	x0, [x29, #-8]
  40709c:	str	x1, [sp, #16]
  4070a0:	str	x2, [sp, #8]
  4070a4:	ldur	x0, [x29, #-8]
  4070a8:	ldr	x1, [sp, #16]
  4070ac:	ldr	x3, [sp, #8]
  4070b0:	mov	w2, w8
  4070b4:	bl	403998 <read_line_full@plt>
  4070b8:	ldp	x29, x30, [sp, #32]
  4070bc:	add	sp, sp, #0x30
  4070c0:	ret

00000000004070c4 <mount_points_list_free>:
  4070c4:	sub	sp, sp, #0x20
  4070c8:	stp	x29, x30, [sp, #16]
  4070cc:	add	x29, sp, #0x10
  4070d0:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  4070d4:	add	x8, x8, #0x7c3
  4070d8:	add	x2, x8, #0x3
  4070dc:	str	x0, [sp, #8]
  4070e0:	str	x2, [sp]
  4070e4:	ldr	x8, [sp, #8]
  4070e8:	cmp	x8, #0x0
  4070ec:	cset	w9, ne  // ne = any
  4070f0:	mov	w10, #0x1                   	// #1
  4070f4:	eor	w9, w9, #0x1
  4070f8:	eor	w9, w9, w10
  4070fc:	eor	w9, w9, w10
  407100:	and	w9, w9, #0x1
  407104:	mov	w0, w9
  407108:	sxtw	x8, w0
  40710c:	cbz	x8, 407134 <mount_points_list_free+0x70>
  407110:	mov	w8, wzr
  407114:	mov	w0, w8
  407118:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  40711c:	add	x1, x1, #0x7be
  407120:	ldr	x2, [sp]
  407124:	mov	w3, #0x32                  	// #50
  407128:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  40712c:	add	x4, x4, #0x7dc
  407130:	bl	4037e8 <log_assert_failed_realm@plt>
  407134:	ldr	x8, [sp, #8]
  407138:	ldr	x8, [x8]
  40713c:	cbz	x8, 407154 <mount_points_list_free+0x90>
  407140:	ldr	x0, [sp, #8]
  407144:	ldr	x8, [sp, #8]
  407148:	ldr	x1, [x8]
  40714c:	bl	407160 <mount_point_free>
  407150:	b	407134 <mount_points_list_free+0x70>
  407154:	ldp	x29, x30, [sp, #16]
  407158:	add	sp, sp, #0x20
  40715c:	ret

0000000000407160 <mount_point_free>:
  407160:	sub	sp, sp, #0x40
  407164:	stp	x29, x30, [sp, #48]
  407168:	add	x29, sp, #0x30
  40716c:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  407170:	add	x8, x8, #0x7c3
  407174:	add	x8, x8, #0x3
  407178:	adrp	x9, 40e000 <parse_argv.options+0x4a8>
  40717c:	add	x9, x9, #0x9ef
  407180:	stur	x0, [x29, #-8]
  407184:	stur	x1, [x29, #-16]
  407188:	str	x8, [sp, #8]
  40718c:	str	x9, [sp]
  407190:	ldur	x8, [x29, #-8]
  407194:	cmp	x8, #0x0
  407198:	cset	w9, ne  // ne = any
  40719c:	mov	w10, #0x1                   	// #1
  4071a0:	eor	w9, w9, #0x1
  4071a4:	eor	w9, w9, w10
  4071a8:	eor	w9, w9, w10
  4071ac:	and	w9, w9, #0x1
  4071b0:	mov	w0, w9
  4071b4:	sxtw	x8, w0
  4071b8:	cbz	x8, 4071dc <mount_point_free+0x7c>
  4071bc:	mov	w8, wzr
  4071c0:	mov	w0, w8
  4071c4:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4071c8:	add	x1, x1, #0x7be
  4071cc:	ldr	x2, [sp, #8]
  4071d0:	mov	w3, #0x27                  	// #39
  4071d4:	ldr	x4, [sp]
  4071d8:	bl	4037e8 <log_assert_failed_realm@plt>
  4071dc:	ldur	x8, [x29, #-16]
  4071e0:	cmp	x8, #0x0
  4071e4:	cset	w9, ne  // ne = any
  4071e8:	mov	w10, #0x1                   	// #1
  4071ec:	eor	w9, w9, #0x1
  4071f0:	eor	w9, w9, w10
  4071f4:	eor	w9, w9, w10
  4071f8:	and	w9, w9, #0x1
  4071fc:	mov	w0, w9
  407200:	sxtw	x8, w0
  407204:	cbz	x8, 407228 <mount_point_free+0xc8>
  407208:	mov	w8, wzr
  40720c:	mov	w0, w8
  407210:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  407214:	add	x1, x1, #0xa22
  407218:	ldr	x2, [sp, #8]
  40721c:	mov	w3, #0x28                  	// #40
  407220:	ldr	x4, [sp]
  407224:	bl	4037e8 <log_assert_failed_realm@plt>
  407228:	ldur	x8, [x29, #-8]
  40722c:	str	x8, [sp, #24]
  407230:	ldur	x8, [x29, #-16]
  407234:	str	x8, [sp, #16]
  407238:	ldr	x8, [sp, #16]
  40723c:	cmp	x8, #0x0
  407240:	cset	w9, ne  // ne = any
  407244:	mov	w10, #0x1                   	// #1
  407248:	eor	w9, w9, #0x1
  40724c:	eor	w9, w9, w10
  407250:	eor	w9, w9, w10
  407254:	and	w9, w9, #0x1
  407258:	mov	w0, w9
  40725c:	sxtw	x8, w0
  407260:	cbz	x8, 407284 <mount_point_free+0x124>
  407264:	mov	w8, wzr
  407268:	mov	w0, w8
  40726c:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  407270:	add	x1, x1, #0x91c
  407274:	ldr	x2, [sp, #8]
  407278:	mov	w3, #0x2a                  	// #42
  40727c:	ldr	x4, [sp]
  407280:	bl	4037e8 <log_assert_failed_realm@plt>
  407284:	ldr	x8, [sp, #16]
  407288:	ldr	x8, [x8, #40]
  40728c:	cbz	x8, 4072a4 <mount_point_free+0x144>
  407290:	ldr	x8, [sp, #16]
  407294:	ldr	x8, [x8, #48]
  407298:	ldr	x9, [sp, #16]
  40729c:	ldr	x9, [x9, #40]
  4072a0:	str	x8, [x9, #48]
  4072a4:	ldr	x8, [sp, #16]
  4072a8:	ldr	x8, [x8, #48]
  4072ac:	cbz	x8, 4072c8 <mount_point_free+0x168>
  4072b0:	ldr	x8, [sp, #16]
  4072b4:	ldr	x8, [x8, #40]
  4072b8:	ldr	x9, [sp, #16]
  4072bc:	ldr	x9, [x9, #48]
  4072c0:	str	x8, [x9, #40]
  4072c4:	b	40732c <mount_point_free+0x1cc>
  4072c8:	ldr	x8, [sp, #24]
  4072cc:	ldr	x8, [x8]
  4072d0:	ldr	x9, [sp, #16]
  4072d4:	cmp	x8, x9
  4072d8:	cset	w10, eq  // eq = none
  4072dc:	mov	w11, #0x1                   	// #1
  4072e0:	eor	w10, w10, #0x1
  4072e4:	eor	w10, w10, w11
  4072e8:	eor	w10, w10, w11
  4072ec:	and	w10, w10, #0x1
  4072f0:	mov	w0, w10
  4072f4:	sxtw	x8, w0
  4072f8:	cbz	x8, 40731c <mount_point_free+0x1bc>
  4072fc:	mov	w8, wzr
  407300:	mov	w0, w8
  407304:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  407308:	add	x1, x1, #0xa24
  40730c:	ldr	x2, [sp, #8]
  407310:	mov	w3, #0x2a                  	// #42
  407314:	ldr	x4, [sp]
  407318:	bl	4037e8 <log_assert_failed_realm@plt>
  40731c:	ldr	x8, [sp, #16]
  407320:	ldr	x8, [x8, #40]
  407324:	ldr	x9, [sp, #24]
  407328:	str	x8, [x9]
  40732c:	ldr	x8, [sp, #16]
  407330:	mov	x9, xzr
  407334:	str	x9, [x8, #48]
  407338:	ldr	x8, [sp, #16]
  40733c:	str	x9, [x8, #40]
  407340:	ldur	x8, [x29, #-16]
  407344:	ldr	x0, [x8]
  407348:	bl	4037d8 <free@plt>
  40734c:	ldur	x8, [x29, #-16]
  407350:	ldr	x0, [x8, #8]
  407354:	bl	4037d8 <free@plt>
  407358:	ldur	x0, [x29, #-16]
  40735c:	bl	4037d8 <free@plt>
  407360:	ldp	x29, x30, [sp, #48]
  407364:	add	sp, sp, #0x40
  407368:	ret

000000000040736c <mount_points_list_get>:
  40736c:	sub	sp, sp, #0x190
  407370:	stp	x29, x30, [sp, #368]
  407374:	str	x28, [sp, #384]
  407378:	add	x29, sp, #0x170
  40737c:	mov	x8, xzr
  407380:	adrp	x9, 40e000 <parse_argv.options+0x4a8>
  407384:	add	x9, x9, #0x7c3
  407388:	add	x9, x9, #0x3
  40738c:	adrp	x10, 40e000 <parse_argv.options+0x4a8>
  407390:	add	x10, x10, #0x83e
  407394:	stur	x0, [x29, #-16]
  407398:	stur	x1, [x29, #-24]
  40739c:	stur	x8, [x29, #-32]
  4073a0:	stur	x8, [x29, #-40]
  4073a4:	str	x9, [sp, #104]
  4073a8:	str	x10, [sp, #96]
  4073ac:	ldur	x8, [x29, #-24]
  4073b0:	cmp	x8, #0x0
  4073b4:	cset	w9, ne  // ne = any
  4073b8:	mov	w10, #0x1                   	// #1
  4073bc:	eor	w9, w9, #0x1
  4073c0:	eor	w9, w9, w10
  4073c4:	eor	w9, w9, w10
  4073c8:	and	w9, w9, #0x1
  4073cc:	mov	w0, w9
  4073d0:	sxtw	x8, w0
  4073d4:	cbz	x8, 4073fc <mount_points_list_get+0x90>
  4073d8:	mov	w8, wzr
  4073dc:	mov	w0, w8
  4073e0:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4073e4:	add	x1, x1, #0x7be
  4073e8:	ldr	x2, [sp, #104]
  4073ec:	mov	w3, #0x3d                  	// #61
  4073f0:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  4073f4:	add	x4, x4, #0x807
  4073f8:	bl	4037e8 <log_assert_failed_realm@plt>
  4073fc:	ldur	x0, [x29, #-16]
  407400:	mov	x8, xzr
  407404:	mov	x1, x8
  407408:	sub	x2, x29, #0x20
  40740c:	sub	x3, x29, #0x28
  407410:	bl	407b80 <libmount_parse>
  407414:	stur	w0, [x29, #-44]
  407418:	ldur	w9, [x29, #-44]
  40741c:	cmp	w9, #0x0
  407420:	cset	w9, ge  // ge = tcont
  407424:	tbnz	w9, #0, 4074f0 <mount_points_list_get+0x184>
  407428:	mov	w8, #0x3                   	// #3
  40742c:	stur	w8, [x29, #-48]
  407430:	ldur	w8, [x29, #-44]
  407434:	stur	w8, [x29, #-52]
  407438:	stur	wzr, [x29, #-56]
  40743c:	ldur	w0, [x29, #-56]
  407440:	bl	403628 <log_get_max_level_realm@plt>
  407444:	ldur	w8, [x29, #-48]
  407448:	and	w8, w8, #0x7
  40744c:	cmp	w0, w8
  407450:	b.lt	4074c0 <mount_points_list_get+0x154>  // b.tstop
  407454:	ldur	w8, [x29, #-56]
  407458:	ldur	w9, [x29, #-48]
  40745c:	orr	w0, w9, w8, lsl #10
  407460:	ldur	w1, [x29, #-52]
  407464:	ldur	x10, [x29, #-16]
  407468:	str	w0, [sp, #92]
  40746c:	str	w1, [sp, #88]
  407470:	str	x10, [sp, #80]
  407474:	cbz	x10, 407484 <mount_points_list_get+0x118>
  407478:	ldr	x8, [sp, #80]
  40747c:	str	x8, [sp, #72]
  407480:	b	407490 <mount_points_list_get+0x124>
  407484:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  407488:	add	x8, x8, #0x86b
  40748c:	str	x8, [sp, #72]
  407490:	ldr	x8, [sp, #72]
  407494:	ldr	w0, [sp, #92]
  407498:	ldr	w1, [sp, #88]
  40749c:	ldr	x2, [sp, #104]
  4074a0:	mov	w3, #0x41                  	// #65
  4074a4:	ldr	x4, [sp, #96]
  4074a8:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  4074ac:	add	x5, x5, #0x854
  4074b0:	mov	x6, x8
  4074b4:	bl	403638 <log_internal_realm@plt>
  4074b8:	str	w0, [sp, #68]
  4074bc:	b	4074d4 <mount_points_list_get+0x168>
  4074c0:	ldur	w0, [x29, #-52]
  4074c4:	bl	403648 <abs@plt>
  4074c8:	mov	w8, wzr
  4074cc:	subs	w8, w8, w0, uxtb
  4074d0:	str	w8, [sp, #68]
  4074d4:	ldr	w8, [sp, #68]
  4074d8:	stur	w8, [x29, #-60]
  4074dc:	ldur	w8, [x29, #-60]
  4074e0:	stur	w8, [x29, #-4]
  4074e4:	mov	w8, #0x1                   	// #1
  4074e8:	stur	w8, [x29, #-64]
  4074ec:	b	407af4 <mount_points_list_get+0x788>
  4074f0:	mov	x8, xzr
  4074f4:	stur	x8, [x29, #-96]
  4074f8:	stur	xzr, [x29, #-104]
  4074fc:	stur	x8, [x29, #-112]
  407500:	stur	x8, [x29, #-128]
  407504:	ldur	x0, [x29, #-32]
  407508:	ldur	x1, [x29, #-40]
  40750c:	sub	x2, x29, #0x48
  407510:	bl	4039a8 <mnt_table_next_fs@plt>
  407514:	stur	w0, [x29, #-44]
  407518:	ldur	w9, [x29, #-44]
  40751c:	cmp	w9, #0x1
  407520:	b.ne	407530 <mount_points_list_get+0x1c4>  // b.any
  407524:	mov	w8, #0x4                   	// #4
  407528:	stur	w8, [x29, #-64]
  40752c:	b	407a9c <mount_points_list_get+0x730>
  407530:	ldur	w8, [x29, #-44]
  407534:	cmp	w8, #0x0
  407538:	cset	w8, ge  // ge = tcont
  40753c:	tbnz	w8, #0, 407608 <mount_points_list_get+0x29c>
  407540:	mov	w8, #0x3                   	// #3
  407544:	stur	w8, [x29, #-132]
  407548:	ldur	w8, [x29, #-44]
  40754c:	stur	w8, [x29, #-136]
  407550:	stur	wzr, [x29, #-140]
  407554:	ldur	w0, [x29, #-140]
  407558:	bl	403628 <log_get_max_level_realm@plt>
  40755c:	ldur	w8, [x29, #-132]
  407560:	and	w8, w8, #0x7
  407564:	cmp	w0, w8
  407568:	b.lt	4075d8 <mount_points_list_get+0x26c>  // b.tstop
  40756c:	ldur	w8, [x29, #-140]
  407570:	ldur	w9, [x29, #-132]
  407574:	orr	w0, w9, w8, lsl #10
  407578:	ldur	w1, [x29, #-136]
  40757c:	ldur	x10, [x29, #-16]
  407580:	str	w0, [sp, #64]
  407584:	str	w1, [sp, #60]
  407588:	str	x10, [sp, #48]
  40758c:	cbz	x10, 40759c <mount_points_list_get+0x230>
  407590:	ldr	x8, [sp, #48]
  407594:	str	x8, [sp, #40]
  407598:	b	4075a8 <mount_points_list_get+0x23c>
  40759c:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  4075a0:	add	x8, x8, #0x86b
  4075a4:	str	x8, [sp, #40]
  4075a8:	ldr	x8, [sp, #40]
  4075ac:	ldr	w0, [sp, #64]
  4075b0:	ldr	w1, [sp, #60]
  4075b4:	ldr	x2, [sp, #104]
  4075b8:	mov	w3, #0x50                  	// #80
  4075bc:	ldr	x4, [sp, #96]
  4075c0:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  4075c4:	add	x5, x5, #0x880
  4075c8:	mov	x6, x8
  4075cc:	bl	403638 <log_internal_realm@plt>
  4075d0:	str	w0, [sp, #36]
  4075d4:	b	4075ec <mount_points_list_get+0x280>
  4075d8:	ldur	w0, [x29, #-136]
  4075dc:	bl	403648 <abs@plt>
  4075e0:	mov	w8, wzr
  4075e4:	subs	w8, w8, w0, uxtb
  4075e8:	str	w8, [sp, #36]
  4075ec:	ldr	w8, [sp, #36]
  4075f0:	stur	w8, [x29, #-144]
  4075f4:	ldur	w8, [x29, #-144]
  4075f8:	stur	w8, [x29, #-4]
  4075fc:	mov	w8, #0x1                   	// #1
  407600:	stur	w8, [x29, #-64]
  407604:	b	407a9c <mount_points_list_get+0x730>
  407608:	ldur	x0, [x29, #-72]
  40760c:	bl	4039b8 <mnt_fs_get_target@plt>
  407610:	stur	x0, [x29, #-80]
  407614:	ldur	x8, [x29, #-80]
  407618:	cbnz	x8, 407628 <mount_points_list_get+0x2bc>
  40761c:	mov	w8, #0x5                   	// #5
  407620:	stur	w8, [x29, #-64]
  407624:	b	407a9c <mount_points_list_get+0x730>
  407628:	ldur	x0, [x29, #-72]
  40762c:	bl	4039c8 <mnt_fs_get_fstype@plt>
  407630:	stur	x0, [x29, #-88]
  407634:	ldur	x0, [x29, #-72]
  407638:	bl	4039d8 <mnt_fs_get_vfs_options@plt>
  40763c:	sub	x8, x29, #0x60
  407640:	str	x0, [sp, #24]
  407644:	mov	x0, x8
  407648:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  40764c:	add	x1, x1, #0x8a5
  407650:	ldr	x2, [sp, #24]
  407654:	mov	x8, xzr
  407658:	mov	x3, x8
  40765c:	bl	4039e8 <strextend_with_separator@plt>
  407660:	cbnz	x0, 40768c <mount_points_list_get+0x320>
  407664:	mov	w8, wzr
  407668:	mov	w0, w8
  40766c:	ldr	x1, [sp, #104]
  407670:	mov	w2, #0x63                  	// #99
  407674:	ldr	x3, [sp, #96]
  407678:	bl	4039f8 <log_oom_internal@plt>
  40767c:	stur	w0, [x29, #-4]
  407680:	mov	w8, #0x1                   	// #1
  407684:	stur	w8, [x29, #-64]
  407688:	b	407a9c <mount_points_list_get+0x730>
  40768c:	ldur	x0, [x29, #-72]
  407690:	bl	403a08 <mnt_fs_get_fs_options@plt>
  407694:	sub	x8, x29, #0x60
  407698:	str	x0, [sp, #16]
  40769c:	mov	x0, x8
  4076a0:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4076a4:	add	x1, x1, #0x8a5
  4076a8:	ldr	x2, [sp, #16]
  4076ac:	mov	x8, xzr
  4076b0:	mov	x3, x8
  4076b4:	bl	4039e8 <strextend_with_separator@plt>
  4076b8:	cbnz	x0, 4076e4 <mount_points_list_get+0x378>
  4076bc:	mov	w8, wzr
  4076c0:	mov	w0, w8
  4076c4:	ldr	x1, [sp, #104]
  4076c8:	mov	w2, #0x67                  	// #103
  4076cc:	ldr	x3, [sp, #96]
  4076d0:	bl	4039f8 <log_oom_internal@plt>
  4076d4:	stur	w0, [x29, #-4]
  4076d8:	mov	w8, #0x1                   	// #1
  4076dc:	stur	w8, [x29, #-64]
  4076e0:	b	407a9c <mount_points_list_get+0x730>
  4076e4:	ldur	x0, [x29, #-80]
  4076e8:	bl	40bb68 <mount_point_is_api>
  4076ec:	tbnz	w0, #0, 407724 <mount_points_list_get+0x3b8>
  4076f0:	ldur	x0, [x29, #-80]
  4076f4:	bl	40bc10 <mount_point_ignore>
  4076f8:	tbnz	w0, #0, 407724 <mount_points_list_get+0x3b8>
  4076fc:	ldur	x0, [x29, #-80]
  407700:	adrp	x8, 430000 <arg_timeout>
  407704:	add	x8, x8, #0x8
  407708:	ldr	q0, [x8]
  40770c:	sub	x1, x29, #0xb0
  407710:	stur	q0, [x29, #-176]
  407714:	ldr	q0, [x8, #16]
  407718:	stur	q0, [x29, #-160]
  40771c:	bl	403a18 <path_startswith_strv@plt>
  407720:	cbz	x0, 407730 <mount_points_list_get+0x3c4>
  407724:	mov	w8, #0x5                   	// #5
  407728:	stur	w8, [x29, #-64]
  40772c:	b	407a9c <mount_points_list_get+0x730>
  407730:	bl	403678 <detect_container@plt>
  407734:	cmp	w0, #0x0
  407738:	cset	w8, gt
  40773c:	mov	w9, #0x0                   	// #0
  407740:	str	w9, [sp, #12]
  407744:	tbnz	w8, #0, 40779c <mount_points_list_get+0x430>
  407748:	ldur	x0, [x29, #-88]
  40774c:	bl	403a28 <fstype_is_network@plt>
  407750:	mov	w8, #0x0                   	// #0
  407754:	str	w8, [sp, #12]
  407758:	tbnz	w0, #0, 40779c <mount_points_list_get+0x430>
  40775c:	ldur	x0, [x29, #-88]
  407760:	bl	403a38 <fstype_is_api_vfs@plt>
  407764:	mov	w8, #0x0                   	// #0
  407768:	str	w8, [sp, #12]
  40776c:	tbnz	w0, #0, 40779c <mount_points_list_get+0x430>
  407770:	ldur	x0, [x29, #-88]
  407774:	bl	403a48 <fstype_is_ro@plt>
  407778:	mov	w8, #0x0                   	// #0
  40777c:	str	w8, [sp, #12]
  407780:	tbnz	w0, #0, 40779c <mount_points_list_get+0x430>
  407784:	ldur	x0, [x29, #-96]
  407788:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40778c:	add	x1, x1, #0xb51
  407790:	bl	407d68 <fstab_test_yes_no_option>
  407794:	eor	w8, w0, #0x1
  407798:	str	w8, [sp, #12]
  40779c:	ldr	w8, [sp, #12]
  4077a0:	and	w8, w8, #0x1
  4077a4:	sturb	w8, [x29, #-113]
  4077a8:	ldurb	w8, [x29, #-113]
  4077ac:	tbnz	w8, #0, 4077b4 <mount_points_list_get+0x448>
  4077b0:	b	407920 <mount_points_list_get+0x5b4>
  4077b4:	ldur	x0, [x29, #-72]
  4077b8:	sub	x1, x29, #0x68
  4077bc:	bl	403a58 <mnt_fs_get_propagation@plt>
  4077c0:	stur	w0, [x29, #-44]
  4077c4:	ldur	w8, [x29, #-44]
  4077c8:	cmp	w8, #0x0
  4077cc:	cset	w8, ge  // ge = tcont
  4077d0:	tbnz	w8, #0, 40785c <mount_points_list_get+0x4f0>
  4077d4:	mov	w8, #0x4                   	// #4
  4077d8:	stur	w8, [x29, #-180]
  4077dc:	ldur	w8, [x29, #-44]
  4077e0:	str	w8, [sp, #184]
  4077e4:	str	wzr, [sp, #180]
  4077e8:	ldr	w0, [sp, #180]
  4077ec:	bl	403628 <log_get_max_level_realm@plt>
  4077f0:	ldur	w8, [x29, #-180]
  4077f4:	and	w8, w8, #0x7
  4077f8:	cmp	w0, w8
  4077fc:	b.lt	407834 <mount_points_list_get+0x4c8>  // b.tstop
  407800:	ldr	w8, [sp, #180]
  407804:	ldur	w9, [x29, #-180]
  407808:	orr	w0, w9, w8, lsl #10
  40780c:	ldr	w1, [sp, #184]
  407810:	ldur	x6, [x29, #-80]
  407814:	ldr	x2, [sp, #104]
  407818:	mov	w3, #0x8d                  	// #141
  40781c:	ldr	x4, [sp, #96]
  407820:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  407824:	add	x5, x5, #0x8b7
  407828:	bl	403638 <log_internal_realm@plt>
  40782c:	str	w0, [sp, #8]
  407830:	b	407848 <mount_points_list_get+0x4dc>
  407834:	ldr	w0, [sp, #184]
  407838:	bl	403648 <abs@plt>
  40783c:	mov	w8, wzr
  407840:	subs	w8, w8, w0, uxtb
  407844:	str	w8, [sp, #8]
  407848:	ldr	w8, [sp, #8]
  40784c:	str	w8, [sp, #176]
  407850:	mov	w8, #0x5                   	// #5
  407854:	stur	w8, [x29, #-64]
  407858:	b	407a9c <mount_points_list_get+0x730>
  40785c:	ldur	x0, [x29, #-96]
  407860:	sub	x2, x29, #0x68
  407864:	ldur	x1, [x29, #-104]
  407868:	sub	x3, x29, #0x70
  40786c:	bl	403a68 <mount_option_mangle@plt>
  407870:	stur	w0, [x29, #-44]
  407874:	ldur	w8, [x29, #-44]
  407878:	cmp	w8, #0x0
  40787c:	cset	w8, ge  // ge = tcont
  407880:	tbnz	w8, #0, 40790c <mount_points_list_get+0x5a0>
  407884:	mov	w8, #0x4                   	// #4
  407888:	str	w8, [sp, #172]
  40788c:	ldur	w8, [x29, #-44]
  407890:	str	w8, [sp, #168]
  407894:	str	wzr, [sp, #164]
  407898:	ldr	w0, [sp, #164]
  40789c:	bl	403628 <log_get_max_level_realm@plt>
  4078a0:	ldr	w8, [sp, #172]
  4078a4:	and	w8, w8, #0x7
  4078a8:	cmp	w0, w8
  4078ac:	b.lt	4078e4 <mount_points_list_get+0x578>  // b.tstop
  4078b0:	ldr	w8, [sp, #164]
  4078b4:	ldr	w9, [sp, #172]
  4078b8:	orr	w0, w9, w8, lsl #10
  4078bc:	ldr	w1, [sp, #168]
  4078c0:	ldur	x6, [x29, #-80]
  4078c4:	ldr	x2, [sp, #104]
  4078c8:	mov	w3, #0x93                  	// #147
  4078cc:	ldr	x4, [sp, #96]
  4078d0:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  4078d4:	add	x5, x5, #0x8ec
  4078d8:	bl	403638 <log_internal_realm@plt>
  4078dc:	str	w0, [sp, #4]
  4078e0:	b	4078f8 <mount_points_list_get+0x58c>
  4078e4:	ldr	w0, [sp, #168]
  4078e8:	bl	403648 <abs@plt>
  4078ec:	mov	w8, wzr
  4078f0:	subs	w8, w8, w0, uxtb
  4078f4:	str	w8, [sp, #4]
  4078f8:	ldr	w8, [sp, #4]
  4078fc:	str	w8, [sp, #160]
  407900:	mov	w8, #0x5                   	// #5
  407904:	stur	w8, [x29, #-64]
  407908:	b	407a9c <mount_points_list_get+0x730>
  40790c:	ldur	x8, [x29, #-104]
  407910:	orr	x8, x8, #0x20
  407914:	orr	x8, x8, #0x1
  407918:	and	x8, x8, #0xffffffffffffefff
  40791c:	stur	x8, [x29, #-104]
  407920:	mov	x0, #0x1                   	// #1
  407924:	mov	x1, #0x38                  	// #56
  407928:	bl	403a78 <calloc@plt>
  40792c:	stur	x0, [x29, #-128]
  407930:	ldur	x8, [x29, #-128]
  407934:	cbnz	x8, 407960 <mount_points_list_get+0x5f4>
  407938:	mov	w8, wzr
  40793c:	mov	w0, w8
  407940:	ldr	x1, [sp, #104]
  407944:	mov	w2, #0x9e                  	// #158
  407948:	ldr	x3, [sp, #96]
  40794c:	bl	4039f8 <log_oom_internal@plt>
  407950:	stur	w0, [x29, #-4]
  407954:	mov	w8, #0x1                   	// #1
  407958:	stur	w8, [x29, #-64]
  40795c:	b	407a9c <mount_points_list_get+0x730>
  407960:	ldur	x0, [x29, #-80]
  407964:	bl	403a88 <strdup@plt>
  407968:	ldur	x8, [x29, #-128]
  40796c:	str	x0, [x8]
  407970:	ldur	x8, [x29, #-128]
  407974:	ldr	x8, [x8]
  407978:	cbnz	x8, 4079a4 <mount_points_list_get+0x638>
  40797c:	mov	w8, wzr
  407980:	mov	w0, w8
  407984:	ldr	x1, [sp, #104]
  407988:	mov	w2, #0xa2                  	// #162
  40798c:	ldr	x3, [sp, #96]
  407990:	bl	4039f8 <log_oom_internal@plt>
  407994:	stur	w0, [x29, #-4]
  407998:	mov	w8, #0x1                   	// #1
  40799c:	stur	w8, [x29, #-64]
  4079a0:	b	407a9c <mount_points_list_get+0x730>
  4079a4:	ldur	x8, [x29, #-112]
  4079a8:	str	x8, [sp, #152]
  4079ac:	mov	x8, xzr
  4079b0:	stur	x8, [x29, #-112]
  4079b4:	ldr	x8, [sp, #152]
  4079b8:	str	x8, [sp, #144]
  4079bc:	ldr	x8, [sp, #144]
  4079c0:	ldur	x9, [x29, #-128]
  4079c4:	str	x8, [x9, #8]
  4079c8:	ldur	x8, [x29, #-104]
  4079cc:	ldur	x9, [x29, #-128]
  4079d0:	str	x8, [x9, #16]
  4079d4:	ldurb	w10, [x29, #-113]
  4079d8:	ldur	x8, [x29, #-128]
  4079dc:	and	w10, w10, #0x1
  4079e0:	strb	w10, [x8, #24]
  4079e4:	ldur	x8, [x29, #-24]
  4079e8:	str	x8, [sp, #136]
  4079ec:	ldur	x8, [x29, #-128]
  4079f0:	str	x8, [sp, #120]
  4079f4:	mov	x8, xzr
  4079f8:	stur	x8, [x29, #-128]
  4079fc:	ldr	x8, [sp, #120]
  407a00:	str	x8, [sp, #112]
  407a04:	ldr	x8, [sp, #112]
  407a08:	str	x8, [sp, #128]
  407a0c:	ldr	x8, [sp, #128]
  407a10:	cmp	x8, #0x0
  407a14:	cset	w9, ne  // ne = any
  407a18:	mov	w10, #0x1                   	// #1
  407a1c:	eor	w9, w9, #0x1
  407a20:	eor	w9, w9, w10
  407a24:	eor	w9, w9, w10
  407a28:	and	w9, w9, #0x1
  407a2c:	mov	w0, w9
  407a30:	sxtw	x8, w0
  407a34:	cbz	x8, 407a5c <mount_points_list_get+0x6f0>
  407a38:	mov	w8, wzr
  407a3c:	mov	w0, w8
  407a40:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  407a44:	add	x1, x1, #0x91c
  407a48:	ldr	x2, [sp, #104]
  407a4c:	mov	w3, #0xa8                  	// #168
  407a50:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  407a54:	add	x4, x4, #0x807
  407a58:	bl	4037e8 <log_assert_failed_realm@plt>
  407a5c:	ldr	x8, [sp, #136]
  407a60:	ldr	x8, [x8]
  407a64:	ldr	x9, [sp, #128]
  407a68:	str	x8, [x9, #40]
  407a6c:	cbz	x8, 407a80 <mount_points_list_get+0x714>
  407a70:	ldr	x8, [sp, #128]
  407a74:	ldr	x9, [sp, #128]
  407a78:	ldr	x9, [x9, #40]
  407a7c:	str	x8, [x9, #48]
  407a80:	ldr	x8, [sp, #128]
  407a84:	mov	x9, xzr
  407a88:	str	x9, [x8, #48]
  407a8c:	ldr	x8, [sp, #128]
  407a90:	ldr	x9, [sp, #136]
  407a94:	str	x8, [x9]
  407a98:	stur	wzr, [x29, #-64]
  407a9c:	sub	x0, x29, #0x80
  407aa0:	bl	407d40 <freep>
  407aa4:	sub	x0, x29, #0x70
  407aa8:	bl	407d40 <freep>
  407aac:	sub	x0, x29, #0x60
  407ab0:	bl	407d40 <freep>
  407ab4:	ldur	w8, [x29, #-64]
  407ab8:	str	w8, [sp]
  407abc:	cbz	w8, 407ae4 <mount_points_list_get+0x778>
  407ac0:	b	407ac4 <mount_points_list_get+0x758>
  407ac4:	ldr	w8, [sp]
  407ac8:	cmp	w8, #0x4
  407acc:	b.eq	407ae8 <mount_points_list_get+0x77c>  // b.none
  407ad0:	b	407ad4 <mount_points_list_get+0x768>
  407ad4:	ldr	w8, [sp]
  407ad8:	cmp	w8, #0x5
  407adc:	b.eq	4074f0 <mount_points_list_get+0x184>  // b.none
  407ae0:	b	407af4 <mount_points_list_get+0x788>
  407ae4:	b	4074f0 <mount_points_list_get+0x184>
  407ae8:	stur	wzr, [x29, #-4]
  407aec:	mov	w8, #0x1                   	// #1
  407af0:	stur	w8, [x29, #-64]
  407af4:	sub	x0, x29, #0x28
  407af8:	bl	407b4c <mnt_free_iterp>
  407afc:	sub	x0, x29, #0x20
  407b00:	bl	407b18 <mnt_free_tablep>
  407b04:	ldur	w0, [x29, #-4]
  407b08:	ldr	x28, [sp, #384]
  407b0c:	ldp	x29, x30, [sp, #368]
  407b10:	add	sp, sp, #0x190
  407b14:	ret

0000000000407b18 <mnt_free_tablep>:
  407b18:	sub	sp, sp, #0x20
  407b1c:	stp	x29, x30, [sp, #16]
  407b20:	add	x29, sp, #0x10
  407b24:	str	x0, [sp, #8]
  407b28:	ldr	x8, [sp, #8]
  407b2c:	ldr	x8, [x8]
  407b30:	cbz	x8, 407b40 <mnt_free_tablep+0x28>
  407b34:	ldr	x8, [sp, #8]
  407b38:	ldr	x0, [x8]
  407b3c:	bl	403a98 <mnt_free_table@plt>
  407b40:	ldp	x29, x30, [sp, #16]
  407b44:	add	sp, sp, #0x20
  407b48:	ret

0000000000407b4c <mnt_free_iterp>:
  407b4c:	sub	sp, sp, #0x20
  407b50:	stp	x29, x30, [sp, #16]
  407b54:	add	x29, sp, #0x10
  407b58:	str	x0, [sp, #8]
  407b5c:	ldr	x8, [sp, #8]
  407b60:	ldr	x8, [x8]
  407b64:	cbz	x8, 407b74 <mnt_free_iterp+0x28>
  407b68:	ldr	x8, [sp, #8]
  407b6c:	ldr	x0, [x8]
  407b70:	bl	403aa8 <mnt_free_iter@plt>
  407b74:	ldp	x29, x30, [sp, #16]
  407b78:	add	sp, sp, #0x20
  407b7c:	ret

0000000000407b80 <libmount_parse>:
  407b80:	sub	sp, sp, #0x80
  407b84:	stp	x29, x30, [sp, #112]
  407b88:	add	x29, sp, #0x70
  407b8c:	mov	x8, xzr
  407b90:	adrp	x9, 40e000 <parse_argv.options+0x4a8>
  407b94:	add	x9, x9, #0xa44
  407b98:	add	x9, x9, #0x3
  407b9c:	stur	x0, [x29, #-16]
  407ba0:	stur	x1, [x29, #-24]
  407ba4:	stur	x2, [x29, #-32]
  407ba8:	stur	x3, [x29, #-40]
  407bac:	stur	x8, [x29, #-48]
  407bb0:	str	x8, [sp, #56]
  407bb4:	str	x9, [sp, #8]
  407bb8:	ldur	x8, [x29, #-24]
  407bbc:	mov	w9, #0x1                   	// #1
  407bc0:	str	w9, [sp, #4]
  407bc4:	cbz	x8, 407bd8 <libmount_parse+0x58>
  407bc8:	ldur	x8, [x29, #-16]
  407bcc:	cmp	x8, #0x0
  407bd0:	cset	w9, ne  // ne = any
  407bd4:	str	w9, [sp, #4]
  407bd8:	ldr	w8, [sp, #4]
  407bdc:	mov	w9, #0x1                   	// #1
  407be0:	eor	w8, w8, #0x1
  407be4:	eor	w8, w8, w9
  407be8:	eor	w8, w8, w9
  407bec:	and	w8, w8, #0x1
  407bf0:	mov	w0, w8
  407bf4:	sxtw	x10, w0
  407bf8:	cbz	x10, 407c20 <libmount_parse+0xa0>
  407bfc:	mov	w8, wzr
  407c00:	mov	w0, w8
  407c04:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  407c08:	add	x1, x1, #0xa34
  407c0c:	ldr	x2, [sp, #8]
  407c10:	mov	w3, #0x19                  	// #25
  407c14:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  407c18:	add	x4, x4, #0xa62
  407c1c:	bl	4037e8 <log_assert_failed_realm@plt>
  407c20:	bl	403ab8 <mnt_new_table@plt>
  407c24:	stur	x0, [x29, #-48]
  407c28:	mov	w8, wzr
  407c2c:	mov	w0, w8
  407c30:	bl	403ac8 <mnt_new_iter@plt>
  407c34:	str	x0, [sp, #56]
  407c38:	ldur	x9, [x29, #-48]
  407c3c:	cbz	x9, 407c48 <libmount_parse+0xc8>
  407c40:	ldr	x8, [sp, #56]
  407c44:	cbnz	x8, 407c5c <libmount_parse+0xdc>
  407c48:	mov	w8, #0xfffffff4            	// #-12
  407c4c:	stur	w8, [x29, #-4]
  407c50:	mov	w8, #0x1                   	// #1
  407c54:	str	w8, [sp, #48]
  407c58:	b	407d20 <libmount_parse+0x1a0>
  407c5c:	ldur	x8, [x29, #-24]
  407c60:	cbz	x8, 407c7c <libmount_parse+0xfc>
  407c64:	ldur	x0, [x29, #-48]
  407c68:	ldur	x1, [x29, #-24]
  407c6c:	ldur	x2, [x29, #-16]
  407c70:	bl	403ad8 <mnt_table_parse_stream@plt>
  407c74:	str	w0, [sp, #52]
  407c78:	b	407cac <libmount_parse+0x12c>
  407c7c:	ldur	x8, [x29, #-16]
  407c80:	cbz	x8, 407c98 <libmount_parse+0x118>
  407c84:	ldur	x0, [x29, #-48]
  407c88:	ldur	x1, [x29, #-16]
  407c8c:	bl	403ae8 <mnt_table_parse_file@plt>
  407c90:	str	w0, [sp, #52]
  407c94:	b	407cac <libmount_parse+0x12c>
  407c98:	ldur	x0, [x29, #-48]
  407c9c:	mov	x8, xzr
  407ca0:	mov	x1, x8
  407ca4:	bl	403af8 <mnt_table_parse_mtab@plt>
  407ca8:	str	w0, [sp, #52]
  407cac:	ldr	w8, [sp, #52]
  407cb0:	cmp	w8, #0x0
  407cb4:	cset	w8, ge  // ge = tcont
  407cb8:	tbnz	w8, #0, 407cd0 <libmount_parse+0x150>
  407cbc:	ldr	w8, [sp, #52]
  407cc0:	stur	w8, [x29, #-4]
  407cc4:	mov	w8, #0x1                   	// #1
  407cc8:	str	w8, [sp, #48]
  407ccc:	b	407d20 <libmount_parse+0x1a0>
  407cd0:	ldur	x8, [x29, #-48]
  407cd4:	str	x8, [sp, #40]
  407cd8:	mov	x8, xzr
  407cdc:	stur	x8, [x29, #-48]
  407ce0:	ldr	x9, [sp, #40]
  407ce4:	str	x9, [sp, #32]
  407ce8:	ldr	x9, [sp, #32]
  407cec:	ldur	x10, [x29, #-32]
  407cf0:	str	x9, [x10]
  407cf4:	ldr	x9, [sp, #56]
  407cf8:	str	x9, [sp, #24]
  407cfc:	str	x8, [sp, #56]
  407d00:	ldr	x8, [sp, #24]
  407d04:	str	x8, [sp, #16]
  407d08:	ldr	x8, [sp, #16]
  407d0c:	ldur	x9, [x29, #-40]
  407d10:	str	x8, [x9]
  407d14:	stur	wzr, [x29, #-4]
  407d18:	mov	w11, #0x1                   	// #1
  407d1c:	str	w11, [sp, #48]
  407d20:	add	x0, sp, #0x38
  407d24:	bl	407b4c <mnt_free_iterp>
  407d28:	sub	x0, x29, #0x30
  407d2c:	bl	407b18 <mnt_free_tablep>
  407d30:	ldur	w0, [x29, #-4]
  407d34:	ldp	x29, x30, [sp, #112]
  407d38:	add	sp, sp, #0x80
  407d3c:	ret

0000000000407d40 <freep>:
  407d40:	sub	sp, sp, #0x20
  407d44:	stp	x29, x30, [sp, #16]
  407d48:	add	x29, sp, #0x10
  407d4c:	str	x0, [sp, #8]
  407d50:	ldr	x8, [sp, #8]
  407d54:	ldr	x0, [x8]
  407d58:	bl	4037d8 <free@plt>
  407d5c:	ldp	x29, x30, [sp, #16]
  407d60:	add	sp, sp, #0x20
  407d64:	ret

0000000000407d68 <fstab_test_yes_no_option>:
  407d68:	sub	sp, sp, #0x30
  407d6c:	stp	x29, x30, [sp, #32]
  407d70:	add	x29, sp, #0x20
  407d74:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  407d78:	add	x8, x8, #0xaf4
  407d7c:	add	x2, x8, #0x3
  407d80:	stur	x0, [x29, #-8]
  407d84:	str	x1, [sp, #16]
  407d88:	str	x2, [sp]
  407d8c:	ldur	x0, [x29, #-8]
  407d90:	ldr	x1, [sp, #16]
  407d94:	add	x2, sp, #0x8
  407d98:	mov	x8, xzr
  407d9c:	mov	x3, x8
  407da0:	mov	x4, x8
  407da4:	bl	403b08 <fstab_filter_options@plt>
  407da8:	cmp	w0, #0x0
  407dac:	cset	w9, ge  // ge = tcont
  407db0:	mov	w10, #0x1                   	// #1
  407db4:	eor	w9, w9, #0x1
  407db8:	eor	w9, w9, w10
  407dbc:	eor	w9, w9, w10
  407dc0:	and	w9, w9, #0x1
  407dc4:	mov	w1, w9
  407dc8:	sxtw	x8, w1
  407dcc:	cbz	x8, 407df4 <fstab_test_yes_no_option+0x8c>
  407dd0:	mov	w8, wzr
  407dd4:	mov	w0, w8
  407dd8:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  407ddc:	add	x1, x1, #0xaba
  407de0:	ldr	x2, [sp]
  407de4:	mov	w3, #0x1c                  	// #28
  407de8:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  407dec:	add	x4, x4, #0xb0f
  407df0:	bl	4037e8 <log_assert_failed_realm@plt>
  407df4:	ldr	x8, [sp, #8]
  407df8:	ldr	x9, [sp, #16]
  407dfc:	cmp	x8, x9
  407e00:	cset	w10, eq  // eq = none
  407e04:	and	w0, w10, #0x1
  407e08:	ldp	x29, x30, [sp, #32]
  407e0c:	add	sp, sp, #0x30
  407e10:	ret

0000000000407e14 <swap_list_get>:
  407e14:	sub	sp, sp, #0xf0
  407e18:	stp	x29, x30, [sp, #224]
  407e1c:	add	x29, sp, #0xe0
  407e20:	mov	x8, xzr
  407e24:	adrp	x9, 40e000 <parse_argv.options+0x4a8>
  407e28:	add	x9, x9, #0x7c3
  407e2c:	add	x9, x9, #0x3
  407e30:	adrp	x10, 40e000 <parse_argv.options+0x4a8>
  407e34:	add	x10, x10, #0x951
  407e38:	stur	x0, [x29, #-16]
  407e3c:	stur	x1, [x29, #-24]
  407e40:	stur	x8, [x29, #-32]
  407e44:	stur	x8, [x29, #-40]
  407e48:	str	x9, [sp, #80]
  407e4c:	str	x10, [sp, #72]
  407e50:	ldur	x8, [x29, #-24]
  407e54:	cmp	x8, #0x0
  407e58:	cset	w9, ne  // ne = any
  407e5c:	mov	w10, #0x1                   	// #1
  407e60:	eor	w9, w9, #0x1
  407e64:	eor	w9, w9, w10
  407e68:	eor	w9, w9, w10
  407e6c:	and	w9, w9, #0x1
  407e70:	mov	w0, w9
  407e74:	sxtw	x8, w0
  407e78:	cbz	x8, 407ea0 <swap_list_get+0x8c>
  407e7c:	mov	w8, wzr
  407e80:	mov	w0, w8
  407e84:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  407e88:	add	x1, x1, #0x7be
  407e8c:	ldr	x2, [sp, #80]
  407e90:	mov	w3, #0xb3                  	// #179
  407e94:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  407e98:	add	x4, x4, #0x922
  407e9c:	bl	4037e8 <log_assert_failed_realm@plt>
  407ea0:	bl	403ab8 <mnt_new_table@plt>
  407ea4:	stur	x0, [x29, #-32]
  407ea8:	mov	w8, wzr
  407eac:	mov	w0, w8
  407eb0:	bl	403ac8 <mnt_new_iter@plt>
  407eb4:	stur	x0, [x29, #-40]
  407eb8:	ldur	x9, [x29, #-32]
  407ebc:	cbz	x9, 407ec8 <swap_list_get+0xb4>
  407ec0:	ldur	x8, [x29, #-40]
  407ec4:	cbnz	x8, 407ef0 <swap_list_get+0xdc>
  407ec8:	mov	w8, wzr
  407ecc:	mov	w0, w8
  407ed0:	ldr	x1, [sp, #80]
  407ed4:	mov	w2, #0xb8                  	// #184
  407ed8:	ldr	x3, [sp, #72]
  407edc:	bl	4039f8 <log_oom_internal@plt>
  407ee0:	stur	w0, [x29, #-4]
  407ee4:	mov	w8, #0x1                   	// #1
  407ee8:	stur	w8, [x29, #-48]
  407eec:	b	4082a8 <swap_list_get+0x494>
  407ef0:	ldur	x0, [x29, #-32]
  407ef4:	ldur	x1, [x29, #-16]
  407ef8:	bl	403b18 <mnt_table_parse_swaps@plt>
  407efc:	stur	w0, [x29, #-44]
  407f00:	ldur	w8, [x29, #-44]
  407f04:	mov	w9, #0xfffffffe            	// #-2
  407f08:	cmp	w8, w9
  407f0c:	b.ne	407f20 <swap_list_get+0x10c>  // b.any
  407f10:	stur	wzr, [x29, #-4]
  407f14:	mov	w8, #0x1                   	// #1
  407f18:	stur	w8, [x29, #-48]
  407f1c:	b	4082a8 <swap_list_get+0x494>
  407f20:	ldur	w8, [x29, #-44]
  407f24:	cmp	w8, #0x0
  407f28:	cset	w8, ge  // ge = tcont
  407f2c:	tbnz	w8, #0, 407ff8 <swap_list_get+0x1e4>
  407f30:	mov	w8, #0x3                   	// #3
  407f34:	stur	w8, [x29, #-52]
  407f38:	ldur	w8, [x29, #-44]
  407f3c:	stur	w8, [x29, #-56]
  407f40:	stur	wzr, [x29, #-60]
  407f44:	ldur	w0, [x29, #-60]
  407f48:	bl	403628 <log_get_max_level_realm@plt>
  407f4c:	ldur	w8, [x29, #-52]
  407f50:	and	w8, w8, #0x7
  407f54:	cmp	w0, w8
  407f58:	b.lt	407fc8 <swap_list_get+0x1b4>  // b.tstop
  407f5c:	ldur	w8, [x29, #-60]
  407f60:	ldur	w9, [x29, #-52]
  407f64:	orr	w0, w9, w8, lsl #10
  407f68:	ldur	w1, [x29, #-56]
  407f6c:	ldur	x10, [x29, #-16]
  407f70:	str	w0, [sp, #68]
  407f74:	str	w1, [sp, #64]
  407f78:	str	x10, [sp, #56]
  407f7c:	cbz	x10, 407f8c <swap_list_get+0x178>
  407f80:	ldr	x8, [sp, #56]
  407f84:	str	x8, [sp, #48]
  407f88:	b	407f98 <swap_list_get+0x184>
  407f8c:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  407f90:	add	x8, x8, #0x95f
  407f94:	str	x8, [sp, #48]
  407f98:	ldr	x8, [sp, #48]
  407f9c:	ldr	w0, [sp, #68]
  407fa0:	ldr	w1, [sp, #64]
  407fa4:	ldr	x2, [sp, #80]
  407fa8:	mov	w3, #0xbe                  	// #190
  407fac:	ldr	x4, [sp, #72]
  407fb0:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  407fb4:	add	x5, x5, #0x854
  407fb8:	mov	x6, x8
  407fbc:	bl	403638 <log_internal_realm@plt>
  407fc0:	str	w0, [sp, #44]
  407fc4:	b	407fdc <swap_list_get+0x1c8>
  407fc8:	ldur	w0, [x29, #-56]
  407fcc:	bl	403648 <abs@plt>
  407fd0:	mov	w8, wzr
  407fd4:	subs	w8, w8, w0, uxtb
  407fd8:	str	w8, [sp, #44]
  407fdc:	ldr	w8, [sp, #44]
  407fe0:	stur	w8, [x29, #-64]
  407fe4:	ldur	w8, [x29, #-64]
  407fe8:	stur	w8, [x29, #-4]
  407fec:	mov	w8, #0x1                   	// #1
  407ff0:	stur	w8, [x29, #-48]
  407ff4:	b	4082a8 <swap_list_get+0x494>
  407ff8:	mov	x8, xzr
  407ffc:	stur	x8, [x29, #-80]
  408000:	ldur	x0, [x29, #-32]
  408004:	ldur	x1, [x29, #-40]
  408008:	sub	x2, x29, #0x48
  40800c:	bl	4039a8 <mnt_table_next_fs@plt>
  408010:	stur	w0, [x29, #-44]
  408014:	ldur	w9, [x29, #-44]
  408018:	cmp	w9, #0x1
  40801c:	b.ne	40802c <swap_list_get+0x218>  // b.any
  408020:	mov	w8, #0x4                   	// #4
  408024:	stur	w8, [x29, #-48]
  408028:	b	408260 <swap_list_get+0x44c>
  40802c:	ldur	w8, [x29, #-44]
  408030:	cmp	w8, #0x0
  408034:	cset	w8, ge  // ge = tcont
  408038:	tbnz	w8, #0, 408104 <swap_list_get+0x2f0>
  40803c:	mov	w8, #0x3                   	// #3
  408040:	stur	w8, [x29, #-92]
  408044:	ldur	w8, [x29, #-44]
  408048:	stur	w8, [x29, #-96]
  40804c:	stur	wzr, [x29, #-100]
  408050:	ldur	w0, [x29, #-100]
  408054:	bl	403628 <log_get_max_level_realm@plt>
  408058:	ldur	w8, [x29, #-92]
  40805c:	and	w8, w8, #0x7
  408060:	cmp	w0, w8
  408064:	b.lt	4080d4 <swap_list_get+0x2c0>  // b.tstop
  408068:	ldur	w8, [x29, #-100]
  40806c:	ldur	w9, [x29, #-92]
  408070:	orr	w0, w9, w8, lsl #10
  408074:	ldur	w1, [x29, #-96]
  408078:	ldur	x10, [x29, #-16]
  40807c:	str	w0, [sp, #40]
  408080:	str	w1, [sp, #36]
  408084:	str	x10, [sp, #24]
  408088:	cbz	x10, 408098 <swap_list_get+0x284>
  40808c:	ldr	x8, [sp, #24]
  408090:	str	x8, [sp, #16]
  408094:	b	4080a4 <swap_list_get+0x290>
  408098:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  40809c:	add	x8, x8, #0x95f
  4080a0:	str	x8, [sp, #16]
  4080a4:	ldr	x8, [sp, #16]
  4080a8:	ldr	w0, [sp, #40]
  4080ac:	ldr	w1, [sp, #36]
  4080b0:	ldr	x2, [sp, #80]
  4080b4:	mov	w3, #0xc9                  	// #201
  4080b8:	ldr	x4, [sp, #72]
  4080bc:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  4080c0:	add	x5, x5, #0x880
  4080c4:	mov	x6, x8
  4080c8:	bl	403638 <log_internal_realm@plt>
  4080cc:	str	w0, [sp, #12]
  4080d0:	b	4080e8 <swap_list_get+0x2d4>
  4080d4:	ldur	w0, [x29, #-96]
  4080d8:	bl	403648 <abs@plt>
  4080dc:	mov	w8, wzr
  4080e0:	subs	w8, w8, w0, uxtb
  4080e4:	str	w8, [sp, #12]
  4080e8:	ldr	w8, [sp, #12]
  4080ec:	stur	w8, [x29, #-104]
  4080f0:	ldur	w8, [x29, #-104]
  4080f4:	stur	w8, [x29, #-4]
  4080f8:	mov	w8, #0x1                   	// #1
  4080fc:	stur	w8, [x29, #-48]
  408100:	b	408260 <swap_list_get+0x44c>
  408104:	ldur	x0, [x29, #-72]
  408108:	bl	403b28 <mnt_fs_get_source@plt>
  40810c:	stur	x0, [x29, #-88]
  408110:	ldur	x8, [x29, #-88]
  408114:	cbnz	x8, 408124 <swap_list_get+0x310>
  408118:	mov	w8, #0x5                   	// #5
  40811c:	stur	w8, [x29, #-48]
  408120:	b	408260 <swap_list_get+0x44c>
  408124:	mov	x0, #0x1                   	// #1
  408128:	mov	x1, #0x38                  	// #56
  40812c:	bl	403a78 <calloc@plt>
  408130:	stur	x0, [x29, #-80]
  408134:	ldur	x8, [x29, #-80]
  408138:	cbnz	x8, 408164 <swap_list_get+0x350>
  40813c:	mov	w8, wzr
  408140:	mov	w0, w8
  408144:	ldr	x1, [sp, #80]
  408148:	mov	w2, #0xd1                  	// #209
  40814c:	ldr	x3, [sp, #72]
  408150:	bl	4039f8 <log_oom_internal@plt>
  408154:	stur	w0, [x29, #-4]
  408158:	mov	w8, #0x1                   	// #1
  40815c:	stur	w8, [x29, #-48]
  408160:	b	408260 <swap_list_get+0x44c>
  408164:	ldur	x0, [x29, #-88]
  408168:	bl	403a88 <strdup@plt>
  40816c:	ldur	x8, [x29, #-80]
  408170:	str	x0, [x8]
  408174:	ldur	x8, [x29, #-80]
  408178:	ldr	x8, [x8]
  40817c:	cbnz	x8, 4081a8 <swap_list_get+0x394>
  408180:	mov	w8, wzr
  408184:	mov	w0, w8
  408188:	ldr	x1, [sp, #80]
  40818c:	mov	w2, #0xd5                  	// #213
  408190:	ldr	x3, [sp, #72]
  408194:	bl	4039f8 <log_oom_internal@plt>
  408198:	stur	w0, [x29, #-4]
  40819c:	mov	w8, #0x1                   	// #1
  4081a0:	stur	w8, [x29, #-48]
  4081a4:	b	408260 <swap_list_get+0x44c>
  4081a8:	ldur	x8, [x29, #-24]
  4081ac:	str	x8, [sp, #112]
  4081b0:	ldur	x8, [x29, #-80]
  4081b4:	str	x8, [sp, #96]
  4081b8:	mov	x8, xzr
  4081bc:	stur	x8, [x29, #-80]
  4081c0:	ldr	x8, [sp, #96]
  4081c4:	str	x8, [sp, #88]
  4081c8:	ldr	x8, [sp, #88]
  4081cc:	str	x8, [sp, #104]
  4081d0:	ldr	x8, [sp, #104]
  4081d4:	cmp	x8, #0x0
  4081d8:	cset	w9, ne  // ne = any
  4081dc:	mov	w10, #0x1                   	// #1
  4081e0:	eor	w9, w9, #0x1
  4081e4:	eor	w9, w9, w10
  4081e8:	eor	w9, w9, w10
  4081ec:	and	w9, w9, #0x1
  4081f0:	mov	w0, w9
  4081f4:	sxtw	x8, w0
  4081f8:	cbz	x8, 408220 <swap_list_get+0x40c>
  4081fc:	mov	w8, wzr
  408200:	mov	w0, w8
  408204:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  408208:	add	x1, x1, #0x91c
  40820c:	ldr	x2, [sp, #80]
  408210:	mov	w3, #0xd7                  	// #215
  408214:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  408218:	add	x4, x4, #0x922
  40821c:	bl	4037e8 <log_assert_failed_realm@plt>
  408220:	ldr	x8, [sp, #112]
  408224:	ldr	x8, [x8]
  408228:	ldr	x9, [sp, #104]
  40822c:	str	x8, [x9, #40]
  408230:	cbz	x8, 408244 <swap_list_get+0x430>
  408234:	ldr	x8, [sp, #104]
  408238:	ldr	x9, [sp, #104]
  40823c:	ldr	x9, [x9, #40]
  408240:	str	x8, [x9, #48]
  408244:	ldr	x8, [sp, #104]
  408248:	mov	x9, xzr
  40824c:	str	x9, [x8, #48]
  408250:	ldr	x8, [sp, #104]
  408254:	ldr	x9, [sp, #112]
  408258:	str	x8, [x9]
  40825c:	stur	wzr, [x29, #-48]
  408260:	sub	x0, x29, #0x50
  408264:	bl	407d40 <freep>
  408268:	ldur	w8, [x29, #-48]
  40826c:	str	w8, [sp, #8]
  408270:	cbz	w8, 408298 <swap_list_get+0x484>
  408274:	b	408278 <swap_list_get+0x464>
  408278:	ldr	w8, [sp, #8]
  40827c:	cmp	w8, #0x4
  408280:	b.eq	40829c <swap_list_get+0x488>  // b.none
  408284:	b	408288 <swap_list_get+0x474>
  408288:	ldr	w8, [sp, #8]
  40828c:	cmp	w8, #0x5
  408290:	b.eq	407ff8 <swap_list_get+0x1e4>  // b.none
  408294:	b	4082a8 <swap_list_get+0x494>
  408298:	b	407ff8 <swap_list_get+0x1e4>
  40829c:	stur	wzr, [x29, #-4]
  4082a0:	mov	w8, #0x1                   	// #1
  4082a4:	stur	w8, [x29, #-48]
  4082a8:	sub	x0, x29, #0x28
  4082ac:	bl	407b4c <mnt_free_iterp>
  4082b0:	sub	x0, x29, #0x20
  4082b4:	bl	407b18 <mnt_free_tablep>
  4082b8:	ldur	w0, [x29, #-4]
  4082bc:	ldp	x29, x30, [sp, #224]
  4082c0:	add	sp, sp, #0xf0
  4082c4:	ret

00000000004082c8 <umount_all>:
  4082c8:	sub	sp, sp, #0x30
  4082cc:	stp	x29, x30, [sp, #32]
  4082d0:	add	x29, sp, #0x20
  4082d4:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  4082d8:	add	x8, x8, #0x7c3
  4082dc:	add	x2, x8, #0x3
  4082e0:	stur	x0, [x29, #-8]
  4082e4:	stur	w1, [x29, #-12]
  4082e8:	str	x2, [sp]
  4082ec:	ldur	x8, [x29, #-8]
  4082f0:	cmp	x8, #0x0
  4082f4:	cset	w9, ne  // ne = any
  4082f8:	mov	w10, #0x1                   	// #1
  4082fc:	eor	w9, w9, #0x1
  408300:	eor	w9, w9, w10
  408304:	eor	w9, w9, w10
  408308:	and	w9, w9, #0x1
  40830c:	mov	w0, w9
  408310:	sxtw	x8, w0
  408314:	cbz	x8, 40833c <umount_all+0x74>
  408318:	mov	w8, wzr
  40831c:	mov	w0, w8
  408320:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  408324:	add	x1, x1, #0x96b
  408328:	ldr	x2, [sp]
  40832c:	mov	w3, #0x276                 	// #630
  408330:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  408334:	add	x4, x4, #0x973
  408338:	bl	4037e8 <log_assert_failed_realm@plt>
  40833c:	sub	x0, x29, #0xd
  408340:	mov	w8, #0x0                   	// #0
  408344:	sturb	w8, [x29, #-13]
  408348:	ldur	w1, [x29, #-12]
  40834c:	bl	408384 <umount_all_once>
  408350:	str	w0, [sp, #12]
  408354:	ldurb	w8, [x29, #-13]
  408358:	tbnz	w8, #0, 408360 <umount_all+0x98>
  40835c:	b	40836c <umount_all+0xa4>
  408360:	ldur	x8, [x29, #-8]
  408364:	mov	w9, #0x1                   	// #1
  408368:	strb	w9, [x8]
  40836c:	ldurb	w8, [x29, #-13]
  408370:	tbnz	w8, #0, 40833c <umount_all+0x74>
  408374:	ldr	w0, [sp, #12]
  408378:	ldp	x29, x30, [sp, #32]
  40837c:	add	sp, sp, #0x30
  408380:	ret

0000000000408384 <umount_all_once>:
  408384:	sub	sp, sp, #0x40
  408388:	stp	x29, x30, [sp, #48]
  40838c:	add	x29, sp, #0x30
  408390:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  408394:	add	x8, x8, #0x7c3
  408398:	add	x2, x8, #0x3
  40839c:	stur	x0, [x29, #-16]
  4083a0:	stur	w1, [x29, #-20]
  4083a4:	str	x2, [sp]
  4083a8:	ldur	x8, [x29, #-16]
  4083ac:	cmp	x8, #0x0
  4083b0:	cset	w9, ne  // ne = any
  4083b4:	mov	w10, #0x1                   	// #1
  4083b8:	eor	w9, w9, #0x1
  4083bc:	eor	w9, w9, w10
  4083c0:	eor	w9, w9, w10
  4083c4:	and	w9, w9, #0x1
  4083c8:	mov	w0, w9
  4083cc:	sxtw	x8, w0
  4083d0:	cbz	x8, 4083f8 <umount_all_once+0x74>
  4083d4:	mov	w8, wzr
  4083d8:	mov	w0, w8
  4083dc:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4083e0:	add	x1, x1, #0x96b
  4083e4:	ldr	x2, [sp]
  4083e8:	mov	w3, #0x268                 	// #616
  4083ec:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  4083f0:	add	x4, x4, #0xb4a
  4083f4:	bl	4037e8 <log_assert_failed_realm@plt>
  4083f8:	mov	x8, xzr
  4083fc:	str	x8, [sp, #16]
  408400:	mov	x8, xzr
  408404:	mov	x0, x8
  408408:	add	x1, sp, #0x10
  40840c:	bl	40736c <mount_points_list_get>
  408410:	str	w0, [sp, #24]
  408414:	ldr	w9, [sp, #24]
  408418:	cmp	w9, #0x0
  40841c:	cset	w9, ge  // ge = tcont
  408420:	tbnz	w9, #0, 408438 <umount_all_once+0xb4>
  408424:	ldr	w8, [sp, #24]
  408428:	stur	w8, [x29, #-4]
  40842c:	mov	w8, #0x1                   	// #1
  408430:	str	w8, [sp, #12]
  408434:	b	408454 <umount_all_once+0xd0>
  408438:	ldur	x1, [x29, #-16]
  40843c:	ldur	w2, [x29, #-20]
  408440:	add	x0, sp, #0x10
  408444:	bl	409630 <mount_points_list_umount>
  408448:	stur	w0, [x29, #-4]
  40844c:	mov	w8, #0x1                   	// #1
  408450:	str	w8, [sp, #12]
  408454:	add	x0, sp, #0x10
  408458:	bl	4070c4 <mount_points_list_free>
  40845c:	ldur	w0, [x29, #-4]
  408460:	ldp	x29, x30, [sp, #48]
  408464:	add	sp, sp, #0x40
  408468:	ret

000000000040846c <swapoff_all>:
  40846c:	sub	sp, sp, #0x40
  408470:	stp	x29, x30, [sp, #48]
  408474:	add	x29, sp, #0x30
  408478:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  40847c:	add	x8, x8, #0x7c3
  408480:	add	x2, x8, #0x3
  408484:	stur	x0, [x29, #-16]
  408488:	str	x2, [sp, #8]
  40848c:	ldur	x8, [x29, #-16]
  408490:	cmp	x8, #0x0
  408494:	cset	w9, ne  // ne = any
  408498:	mov	w10, #0x1                   	// #1
  40849c:	eor	w9, w9, #0x1
  4084a0:	eor	w9, w9, w10
  4084a4:	eor	w9, w9, w10
  4084a8:	and	w9, w9, #0x1
  4084ac:	mov	w0, w9
  4084b0:	sxtw	x8, w0
  4084b4:	cbz	x8, 4084dc <swapoff_all+0x70>
  4084b8:	mov	w8, wzr
  4084bc:	mov	w0, w8
  4084c0:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4084c4:	add	x1, x1, #0x96b
  4084c8:	ldr	x2, [sp, #8]
  4084cc:	mov	w3, #0x28a                 	// #650
  4084d0:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  4084d4:	add	x4, x4, #0x990
  4084d8:	bl	4037e8 <log_assert_failed_realm@plt>
  4084dc:	mov	x8, xzr
  4084e0:	str	x8, [sp, #24]
  4084e4:	mov	x8, xzr
  4084e8:	mov	x0, x8
  4084ec:	add	x1, sp, #0x18
  4084f0:	bl	407e14 <swap_list_get>
  4084f4:	str	w0, [sp, #20]
  4084f8:	ldr	w9, [sp, #20]
  4084fc:	cmp	w9, #0x0
  408500:	cset	w9, ge  // ge = tcont
  408504:	tbnz	w9, #0, 40851c <swapoff_all+0xb0>
  408508:	ldr	w8, [sp, #20]
  40850c:	stur	w8, [x29, #-4]
  408510:	mov	w8, #0x1                   	// #1
  408514:	str	w8, [sp, #16]
  408518:	b	408534 <swapoff_all+0xc8>
  40851c:	ldur	x1, [x29, #-16]
  408520:	add	x0, sp, #0x18
  408524:	bl	40854c <swap_points_list_off>
  408528:	stur	w0, [x29, #-4]
  40852c:	mov	w8, #0x1                   	// #1
  408530:	str	w8, [sp, #16]
  408534:	add	x0, sp, #0x18
  408538:	bl	4070c4 <mount_points_list_free>
  40853c:	ldur	w0, [x29, #-4]
  408540:	ldp	x29, x30, [sp, #48]
  408544:	add	sp, sp, #0x40
  408548:	ret

000000000040854c <swap_points_list_off>:
  40854c:	sub	sp, sp, #0x70
  408550:	stp	x29, x30, [sp, #96]
  408554:	add	x29, sp, #0x60
  408558:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  40855c:	add	x8, x8, #0x7c3
  408560:	add	x8, x8, #0x3
  408564:	stur	x0, [x29, #-8]
  408568:	stur	x1, [x29, #-16]
  40856c:	stur	wzr, [x29, #-36]
  408570:	str	x8, [sp, #16]
  408574:	ldur	x8, [x29, #-8]
  408578:	cmp	x8, #0x0
  40857c:	cset	w9, ne  // ne = any
  408580:	mov	w10, #0x1                   	// #1
  408584:	eor	w9, w9, #0x1
  408588:	eor	w9, w9, w10
  40858c:	eor	w9, w9, w10
  408590:	and	w9, w9, #0x1
  408594:	mov	w0, w9
  408598:	sxtw	x8, w0
  40859c:	cbz	x8, 4085c4 <swap_points_list_off+0x78>
  4085a0:	mov	w8, wzr
  4085a4:	mov	w0, w8
  4085a8:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4085ac:	add	x1, x1, #0x7be
  4085b0:	ldr	x2, [sp, #16]
  4085b4:	mov	w3, #0x20c                 	// #524
  4085b8:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  4085bc:	add	x4, x4, #0xe64
  4085c0:	bl	4037e8 <log_assert_failed_realm@plt>
  4085c4:	ldur	x8, [x29, #-16]
  4085c8:	cmp	x8, #0x0
  4085cc:	cset	w9, ne  // ne = any
  4085d0:	mov	w10, #0x1                   	// #1
  4085d4:	eor	w9, w9, #0x1
  4085d8:	eor	w9, w9, w10
  4085dc:	eor	w9, w9, w10
  4085e0:	and	w9, w9, #0x1
  4085e4:	mov	w0, w9
  4085e8:	sxtw	x8, w0
  4085ec:	cbz	x8, 408614 <swap_points_list_off+0xc8>
  4085f0:	mov	w8, wzr
  4085f4:	mov	w0, w8
  4085f8:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4085fc:	add	x1, x1, #0x96b
  408600:	ldr	x2, [sp, #16]
  408604:	mov	w3, #0x20d                 	// #525
  408608:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  40860c:	add	x4, x4, #0xe64
  408610:	bl	4037e8 <log_assert_failed_realm@plt>
  408614:	ldur	x8, [x29, #-8]
  408618:	ldr	x8, [x8]
  40861c:	stur	x8, [x29, #-24]
  408620:	ldur	x8, [x29, #-24]
  408624:	mov	w9, #0x0                   	// #0
  408628:	str	w9, [sp, #12]
  40862c:	cbz	x8, 408644 <swap_points_list_off+0xf8>
  408630:	ldur	x8, [x29, #-24]
  408634:	ldr	x8, [x8, #40]
  408638:	stur	x8, [x29, #-32]
  40863c:	mov	w9, #0x1                   	// #1
  408640:	str	w9, [sp, #12]
  408644:	ldr	w8, [sp, #12]
  408648:	tbnz	w8, #0, 408650 <swap_points_list_off+0x104>
  40864c:	b	40879c <swap_points_list_off+0x250>
  408650:	mov	w8, #0x6                   	// #6
  408654:	stur	w8, [x29, #-40]
  408658:	stur	wzr, [x29, #-44]
  40865c:	str	wzr, [sp, #48]
  408660:	ldr	w0, [sp, #48]
  408664:	bl	403628 <log_get_max_level_realm@plt>
  408668:	ldur	w8, [x29, #-40]
  40866c:	and	w8, w8, #0x7
  408670:	cmp	w0, w8
  408674:	b.lt	4086b4 <swap_points_list_off+0x168>  // b.tstop
  408678:	ldr	w8, [sp, #48]
  40867c:	ldur	w9, [x29, #-40]
  408680:	orr	w0, w9, w8, lsl #10
  408684:	ldur	w1, [x29, #-44]
  408688:	ldur	x10, [x29, #-24]
  40868c:	ldr	x6, [x10]
  408690:	ldr	x2, [sp, #16]
  408694:	mov	w3, #0x210                 	// #528
  408698:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  40869c:	add	x4, x4, #0xe95
  4086a0:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  4086a4:	add	x5, x5, #0xeaa
  4086a8:	bl	403638 <log_internal_realm@plt>
  4086ac:	str	w0, [sp, #8]
  4086b0:	b	4086c8 <swap_points_list_off+0x17c>
  4086b4:	ldur	w0, [x29, #-44]
  4086b8:	bl	403648 <abs@plt>
  4086bc:	mov	w8, wzr
  4086c0:	subs	w8, w8, w0, uxtb
  4086c4:	str	w8, [sp, #8]
  4086c8:	ldr	w8, [sp, #8]
  4086cc:	str	w8, [sp, #44]
  4086d0:	ldur	x9, [x29, #-24]
  4086d4:	ldr	x0, [x9]
  4086d8:	bl	403b38 <swapoff@plt>
  4086dc:	cbnz	w0, 4086fc <swap_points_list_off+0x1b0>
  4086e0:	ldur	x8, [x29, #-16]
  4086e4:	mov	w9, #0x1                   	// #1
  4086e8:	strb	w9, [x8]
  4086ec:	ldur	x0, [x29, #-8]
  4086f0:	ldur	x1, [x29, #-24]
  4086f4:	bl	407160 <mount_point_free>
  4086f8:	b	408790 <swap_points_list_off+0x244>
  4086fc:	mov	w8, #0x4                   	// #4
  408700:	str	w8, [sp, #40]
  408704:	bl	403768 <__errno_location@plt>
  408708:	ldr	w8, [x0]
  40870c:	str	w8, [sp, #36]
  408710:	str	wzr, [sp, #32]
  408714:	ldr	w0, [sp, #32]
  408718:	bl	403628 <log_get_max_level_realm@plt>
  40871c:	ldr	w8, [sp, #40]
  408720:	and	w8, w8, #0x7
  408724:	cmp	w0, w8
  408728:	b.lt	408768 <swap_points_list_off+0x21c>  // b.tstop
  40872c:	ldr	w8, [sp, #32]
  408730:	ldr	w9, [sp, #40]
  408734:	orr	w0, w9, w8, lsl #10
  408738:	ldr	w1, [sp, #36]
  40873c:	ldur	x10, [x29, #-24]
  408740:	ldr	x6, [x10]
  408744:	ldr	x2, [sp, #16]
  408748:	mov	w3, #0x215                 	// #533
  40874c:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  408750:	add	x4, x4, #0xe95
  408754:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  408758:	add	x5, x5, #0xec0
  40875c:	bl	403638 <log_internal_realm@plt>
  408760:	str	w0, [sp, #4]
  408764:	b	40877c <swap_points_list_off+0x230>
  408768:	ldr	w0, [sp, #36]
  40876c:	bl	403648 <abs@plt>
  408770:	mov	w8, wzr
  408774:	subs	w8, w8, w0, uxtb
  408778:	str	w8, [sp, #4]
  40877c:	ldr	w8, [sp, #4]
  408780:	str	w8, [sp, #28]
  408784:	ldur	w8, [x29, #-36]
  408788:	add	w8, w8, #0x1
  40878c:	stur	w8, [x29, #-36]
  408790:	ldur	x8, [x29, #-32]
  408794:	stur	x8, [x29, #-24]
  408798:	b	408620 <swap_points_list_off+0xd4>
  40879c:	ldur	w0, [x29, #-36]
  4087a0:	ldp	x29, x30, [sp, #96]
  4087a4:	add	sp, sp, #0x70
  4087a8:	ret

00000000004087ac <loopback_detach_all>:
  4087ac:	sub	sp, sp, #0x40
  4087b0:	stp	x29, x30, [sp, #48]
  4087b4:	add	x29, sp, #0x30
  4087b8:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  4087bc:	add	x8, x8, #0x7c3
  4087c0:	add	x2, x8, #0x3
  4087c4:	stur	x0, [x29, #-16]
  4087c8:	stur	w1, [x29, #-20]
  4087cc:	str	x2, [sp]
  4087d0:	ldur	x8, [x29, #-16]
  4087d4:	cmp	x8, #0x0
  4087d8:	cset	w9, ne  // ne = any
  4087dc:	mov	w10, #0x1                   	// #1
  4087e0:	eor	w9, w9, #0x1
  4087e4:	eor	w9, w9, w10
  4087e8:	eor	w9, w9, w10
  4087ec:	and	w9, w9, #0x1
  4087f0:	mov	w0, w9
  4087f4:	sxtw	x8, w0
  4087f8:	cbz	x8, 408820 <loopback_detach_all+0x74>
  4087fc:	mov	w8, wzr
  408800:	mov	w0, w8
  408804:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  408808:	add	x1, x1, #0x96b
  40880c:	ldr	x2, [sp]
  408810:	mov	w3, #0x299                 	// #665
  408814:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  408818:	add	x4, x4, #0x9a9
  40881c:	bl	4037e8 <log_assert_failed_realm@plt>
  408820:	mov	x8, xzr
  408824:	str	x8, [sp, #16]
  408828:	add	x0, sp, #0x10
  40882c:	bl	40888c <loopback_list_get>
  408830:	str	w0, [sp, #12]
  408834:	ldr	w8, [sp, #12]
  408838:	cmp	w8, #0x0
  40883c:	cset	w8, ge  // ge = tcont
  408840:	tbnz	w8, #0, 408858 <loopback_detach_all+0xac>
  408844:	ldr	w8, [sp, #12]
  408848:	stur	w8, [x29, #-4]
  40884c:	mov	w8, #0x1                   	// #1
  408850:	str	w8, [sp, #8]
  408854:	b	408874 <loopback_detach_all+0xc8>
  408858:	ldur	x1, [x29, #-16]
  40885c:	ldur	w2, [x29, #-20]
  408860:	add	x0, sp, #0x10
  408864:	bl	408c08 <loopback_points_list_detach>
  408868:	stur	w0, [x29, #-4]
  40886c:	mov	w8, #0x1                   	// #1
  408870:	str	w8, [sp, #8]
  408874:	add	x0, sp, #0x10
  408878:	bl	4070c4 <mount_points_list_free>
  40887c:	ldur	w0, [x29, #-4]
  408880:	ldp	x29, x30, [sp, #48]
  408884:	add	sp, sp, #0x40
  408888:	ret

000000000040888c <loopback_list_get>:
  40888c:	sub	sp, sp, #0xd0
  408890:	stp	x29, x30, [sp, #192]
  408894:	add	x29, sp, #0xc0
  408898:	mov	x8, xzr
  40889c:	adrp	x9, 40e000 <parse_argv.options+0x4a8>
  4088a0:	add	x9, x9, #0x7c3
  4088a4:	add	x9, x9, #0x3
  4088a8:	stur	x0, [x29, #-16]
  4088ac:	stur	x8, [x29, #-24]
  4088b0:	str	x9, [sp, #32]
  4088b4:	ldur	x8, [x29, #-16]
  4088b8:	cmp	x8, #0x0
  4088bc:	cset	w9, ne  // ne = any
  4088c0:	mov	w10, #0x1                   	// #1
  4088c4:	eor	w9, w9, #0x1
  4088c8:	eor	w9, w9, w10
  4088cc:	eor	w9, w9, w10
  4088d0:	and	w9, w9, #0x1
  4088d4:	mov	w0, w9
  4088d8:	sxtw	x8, w0
  4088dc:	cbz	x8, 408904 <loopback_list_get+0x78>
  4088e0:	mov	w8, wzr
  4088e4:	mov	w0, w8
  4088e8:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4088ec:	add	x1, x1, #0x7be
  4088f0:	ldr	x2, [sp, #32]
  4088f4:	mov	w3, #0xe2                  	// #226
  4088f8:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  4088fc:	add	x4, x4, #0xee1
  408900:	bl	4037e8 <log_assert_failed_realm@plt>
  408904:	sub	x0, x29, #0x18
  408908:	bl	403b48 <sd_device_enumerator_new@plt>
  40890c:	stur	w0, [x29, #-36]
  408910:	ldur	w8, [x29, #-36]
  408914:	cmp	w8, #0x0
  408918:	cset	w8, ge  // ge = tcont
  40891c:	tbnz	w8, #0, 408934 <loopback_list_get+0xa8>
  408920:	ldur	w8, [x29, #-36]
  408924:	stur	w8, [x29, #-4]
  408928:	mov	w8, #0x1                   	// #1
  40892c:	stur	w8, [x29, #-40]
  408930:	b	408bf0 <loopback_list_get+0x364>
  408934:	ldur	x0, [x29, #-24]
  408938:	bl	403b58 <sd_device_enumerator_allow_uninitialized@plt>
  40893c:	stur	w0, [x29, #-36]
  408940:	ldur	w8, [x29, #-36]
  408944:	cmp	w8, #0x0
  408948:	cset	w8, ge  // ge = tcont
  40894c:	tbnz	w8, #0, 408964 <loopback_list_get+0xd8>
  408950:	ldur	w8, [x29, #-36]
  408954:	stur	w8, [x29, #-4]
  408958:	mov	w8, #0x1                   	// #1
  40895c:	stur	w8, [x29, #-40]
  408960:	b	408bf0 <loopback_list_get+0x364>
  408964:	ldur	x0, [x29, #-24]
  408968:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  40896c:	add	x1, x1, #0xf06
  408970:	mov	w2, #0x1                   	// #1
  408974:	bl	403b68 <sd_device_enumerator_add_match_subsystem@plt>
  408978:	stur	w0, [x29, #-36]
  40897c:	ldur	w8, [x29, #-36]
  408980:	cmp	w8, #0x0
  408984:	cset	w8, ge  // ge = tcont
  408988:	tbnz	w8, #0, 4089a0 <loopback_list_get+0x114>
  40898c:	ldur	w8, [x29, #-36]
  408990:	stur	w8, [x29, #-4]
  408994:	mov	w8, #0x1                   	// #1
  408998:	stur	w8, [x29, #-40]
  40899c:	b	408bf0 <loopback_list_get+0x364>
  4089a0:	ldur	x0, [x29, #-24]
  4089a4:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4089a8:	add	x1, x1, #0xf0c
  4089ac:	bl	403b78 <sd_device_enumerator_add_match_sysname@plt>
  4089b0:	stur	w0, [x29, #-36]
  4089b4:	ldur	w8, [x29, #-36]
  4089b8:	cmp	w8, #0x0
  4089bc:	cset	w8, ge  // ge = tcont
  4089c0:	tbnz	w8, #0, 4089d8 <loopback_list_get+0x14c>
  4089c4:	ldur	w8, [x29, #-36]
  4089c8:	stur	w8, [x29, #-4]
  4089cc:	mov	w8, #0x1                   	// #1
  4089d0:	stur	w8, [x29, #-40]
  4089d4:	b	408bf0 <loopback_list_get+0x364>
  4089d8:	ldur	x0, [x29, #-24]
  4089dc:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4089e0:	add	x1, x1, #0xf12
  4089e4:	mov	x8, xzr
  4089e8:	mov	x2, x8
  4089ec:	mov	w3, #0x1                   	// #1
  4089f0:	bl	403b88 <sd_device_enumerator_add_match_sysattr@plt>
  4089f4:	stur	w0, [x29, #-36]
  4089f8:	ldur	w9, [x29, #-36]
  4089fc:	cmp	w9, #0x0
  408a00:	cset	w9, ge  // ge = tcont
  408a04:	tbnz	w9, #0, 408a1c <loopback_list_get+0x190>
  408a08:	ldur	w8, [x29, #-36]
  408a0c:	stur	w8, [x29, #-4]
  408a10:	mov	w8, #0x1                   	// #1
  408a14:	stur	w8, [x29, #-40]
  408a18:	b	408bf0 <loopback_list_get+0x364>
  408a1c:	ldur	x0, [x29, #-24]
  408a20:	bl	403b98 <sd_device_enumerator_get_device_first@plt>
  408a24:	stur	x0, [x29, #-32]
  408a28:	ldur	x8, [x29, #-32]
  408a2c:	cbz	x8, 408be4 <loopback_list_get+0x358>
  408a30:	mov	x8, xzr
  408a34:	stur	x8, [x29, #-48]
  408a38:	ldur	x0, [x29, #-32]
  408a3c:	sub	x1, x29, #0x38
  408a40:	bl	403ba8 <sd_device_get_devname@plt>
  408a44:	cmp	w0, #0x0
  408a48:	cset	w9, ge  // ge = tcont
  408a4c:	tbnz	w9, #0, 408a5c <loopback_list_get+0x1d0>
  408a50:	mov	w8, #0x6                   	// #6
  408a54:	stur	w8, [x29, #-40]
  408a58:	b	408bac <loopback_list_get+0x320>
  408a5c:	ldur	x0, [x29, #-56]
  408a60:	bl	403a88 <strdup@plt>
  408a64:	stur	x0, [x29, #-48]
  408a68:	ldur	x8, [x29, #-48]
  408a6c:	cbnz	x8, 408a84 <loopback_list_get+0x1f8>
  408a70:	mov	w8, #0xfffffff4            	// #-12
  408a74:	stur	w8, [x29, #-4]
  408a78:	mov	w8, #0x1                   	// #1
  408a7c:	stur	w8, [x29, #-40]
  408a80:	b	408bac <loopback_list_get+0x320>
  408a84:	mov	x0, #0x38                  	// #56
  408a88:	mov	x1, #0x1                   	// #1
  408a8c:	bl	40a2a4 <malloc_multiply>
  408a90:	stur	x0, [x29, #-64]
  408a94:	ldur	x8, [x29, #-64]
  408a98:	cbnz	x8, 408ab0 <loopback_list_get+0x224>
  408a9c:	mov	w8, #0xfffffff4            	// #-12
  408aa0:	stur	w8, [x29, #-4]
  408aa4:	mov	w8, #0x1                   	// #1
  408aa8:	stur	w8, [x29, #-40]
  408aac:	b	408bac <loopback_list_get+0x320>
  408ab0:	ldur	x0, [x29, #-64]
  408ab4:	add	x8, sp, #0x48
  408ab8:	str	x0, [sp, #24]
  408abc:	mov	x0, x8
  408ac0:	mov	w9, wzr
  408ac4:	mov	w1, w9
  408ac8:	mov	x10, #0x38                  	// #56
  408acc:	mov	x2, x10
  408ad0:	str	x8, [sp, #16]
  408ad4:	str	x10, [sp, #8]
  408ad8:	bl	403bb8 <memset@plt>
  408adc:	ldur	x8, [x29, #-48]
  408ae0:	str	x8, [sp, #64]
  408ae4:	mov	x8, xzr
  408ae8:	stur	x8, [x29, #-48]
  408aec:	ldr	x8, [sp, #64]
  408af0:	str	x8, [sp, #56]
  408af4:	ldr	x8, [sp, #56]
  408af8:	str	x8, [sp, #72]
  408afc:	ldr	x0, [sp, #24]
  408b00:	ldr	x1, [sp, #16]
  408b04:	ldr	x2, [sp, #8]
  408b08:	bl	4038a8 <memcpy@plt>
  408b0c:	ldur	x8, [x29, #-16]
  408b10:	str	x8, [sp, #48]
  408b14:	ldur	x8, [x29, #-64]
  408b18:	str	x8, [sp, #40]
  408b1c:	ldr	x8, [sp, #40]
  408b20:	cmp	x8, #0x0
  408b24:	cset	w9, ne  // ne = any
  408b28:	mov	w10, #0x1                   	// #1
  408b2c:	eor	w9, w9, #0x1
  408b30:	eor	w9, w9, w10
  408b34:	eor	w9, w9, w10
  408b38:	and	w9, w9, #0x1
  408b3c:	mov	w0, w9
  408b40:	sxtw	x8, w0
  408b44:	cbz	x8, 408b6c <loopback_list_get+0x2e0>
  408b48:	mov	w8, wzr
  408b4c:	mov	w0, w8
  408b50:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  408b54:	add	x1, x1, #0x91c
  408b58:	ldr	x2, [sp, #32]
  408b5c:	mov	w3, #0x10c                 	// #268
  408b60:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  408b64:	add	x4, x4, #0xee1
  408b68:	bl	4037e8 <log_assert_failed_realm@plt>
  408b6c:	ldr	x8, [sp, #48]
  408b70:	ldr	x8, [x8]
  408b74:	ldr	x9, [sp, #40]
  408b78:	str	x8, [x9, #40]
  408b7c:	cbz	x8, 408b90 <loopback_list_get+0x304>
  408b80:	ldr	x8, [sp, #40]
  408b84:	ldr	x9, [sp, #40]
  408b88:	ldr	x9, [x9, #40]
  408b8c:	str	x8, [x9, #48]
  408b90:	ldr	x8, [sp, #40]
  408b94:	mov	x9, xzr
  408b98:	str	x9, [x8, #48]
  408b9c:	ldr	x8, [sp, #40]
  408ba0:	ldr	x9, [sp, #48]
  408ba4:	str	x8, [x9]
  408ba8:	stur	wzr, [x29, #-40]
  408bac:	sub	x0, x29, #0x30
  408bb0:	bl	407d40 <freep>
  408bb4:	ldur	w8, [x29, #-40]
  408bb8:	str	w8, [sp, #4]
  408bbc:	cbz	w8, 408bd4 <loopback_list_get+0x348>
  408bc0:	b	408bc4 <loopback_list_get+0x338>
  408bc4:	ldr	w8, [sp, #4]
  408bc8:	cmp	w8, #0x6
  408bcc:	b.eq	408bd4 <loopback_list_get+0x348>  // b.none
  408bd0:	b	408bf0 <loopback_list_get+0x364>
  408bd4:	ldur	x0, [x29, #-24]
  408bd8:	bl	403bc8 <sd_device_enumerator_get_device_next@plt>
  408bdc:	stur	x0, [x29, #-32]
  408be0:	b	408a28 <loopback_list_get+0x19c>
  408be4:	stur	wzr, [x29, #-4]
  408be8:	mov	w8, #0x1                   	// #1
  408bec:	stur	w8, [x29, #-40]
  408bf0:	sub	x0, x29, #0x18
  408bf4:	bl	40a270 <sd_device_enumerator_unrefp>
  408bf8:	ldur	w0, [x29, #-4]
  408bfc:	ldp	x29, x30, [sp, #192]
  408c00:	add	sp, sp, #0xd0
  408c04:	ret

0000000000408c08 <loopback_points_list_detach>:
  408c08:	sub	sp, sp, #0x190
  408c0c:	stp	x29, x30, [sp, #368]
  408c10:	str	x28, [sp, #384]
  408c14:	add	x29, sp, #0x170
  408c18:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  408c1c:	add	x8, x8, #0x7c3
  408c20:	add	x8, x8, #0x3
  408c24:	stur	x0, [x29, #-8]
  408c28:	stur	x1, [x29, #-16]
  408c2c:	stur	w2, [x29, #-20]
  408c30:	stur	wzr, [x29, #-44]
  408c34:	str	x8, [sp, #16]
  408c38:	ldur	x8, [x29, #-8]
  408c3c:	cmp	x8, #0x0
  408c40:	cset	w9, ne  // ne = any
  408c44:	mov	w10, #0x1                   	// #1
  408c48:	eor	w9, w9, #0x1
  408c4c:	eor	w9, w9, w10
  408c50:	eor	w9, w9, w10
  408c54:	and	w9, w9, #0x1
  408c58:	mov	w0, w9
  408c5c:	sxtw	x8, w0
  408c60:	cbz	x8, 408c88 <loopback_points_list_detach+0x80>
  408c64:	mov	w8, wzr
  408c68:	mov	w0, w8
  408c6c:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  408c70:	add	x1, x1, #0x7be
  408c74:	ldr	x2, [sp, #16]
  408c78:	mov	w3, #0x222                 	// #546
  408c7c:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  408c80:	add	x4, x4, #0xf24
  408c84:	bl	4037e8 <log_assert_failed_realm@plt>
  408c88:	ldur	x8, [x29, #-16]
  408c8c:	cmp	x8, #0x0
  408c90:	cset	w9, ne  // ne = any
  408c94:	mov	w10, #0x1                   	// #1
  408c98:	eor	w9, w9, #0x1
  408c9c:	eor	w9, w9, w10
  408ca0:	eor	w9, w9, w10
  408ca4:	and	w9, w9, #0x1
  408ca8:	mov	w0, w9
  408cac:	sxtw	x8, w0
  408cb0:	cbz	x8, 408cd8 <loopback_points_list_detach+0xd0>
  408cb4:	mov	w8, wzr
  408cb8:	mov	w0, w8
  408cbc:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  408cc0:	add	x1, x1, #0x96b
  408cc4:	ldr	x2, [sp, #16]
  408cc8:	mov	w3, #0x223                 	// #547
  408ccc:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  408cd0:	add	x4, x4, #0xf24
  408cd4:	bl	4037e8 <log_assert_failed_realm@plt>
  408cd8:	adrp	x0, 40e000 <parse_argv.options+0x4a8>
  408cdc:	add	x0, x0, #0xd1b
  408ce0:	sub	x1, x29, #0xb0
  408ce4:	bl	40dac0 <lstat64>
  408ce8:	stur	w0, [x29, #-48]
  408cec:	ldur	x8, [x29, #-8]
  408cf0:	ldr	x8, [x8]
  408cf4:	stur	x8, [x29, #-32]
  408cf8:	ldur	x8, [x29, #-32]
  408cfc:	mov	w9, #0x0                   	// #0
  408d00:	str	w9, [sp, #12]
  408d04:	cbz	x8, 408d1c <loopback_points_list_detach+0x114>
  408d08:	ldur	x8, [x29, #-32]
  408d0c:	ldr	x8, [x8, #40]
  408d10:	stur	x8, [x29, #-40]
  408d14:	mov	w9, #0x1                   	// #1
  408d18:	str	w9, [sp, #12]
  408d1c:	ldr	w8, [sp, #12]
  408d20:	tbnz	w8, #0, 408d28 <loopback_points_list_detach+0x120>
  408d24:	b	408eec <loopback_points_list_detach+0x2e4>
  408d28:	ldur	w8, [x29, #-48]
  408d2c:	cmp	w8, #0x0
  408d30:	cset	w8, lt  // lt = tstop
  408d34:	tbnz	w8, #0, 408d80 <loopback_points_list_detach+0x178>
  408d38:	ldur	x0, [x29, #-176]
  408d3c:	bl	403bd8 <gnu_dev_major@plt>
  408d40:	cbz	w0, 408d80 <loopback_points_list_detach+0x178>
  408d44:	ldur	x8, [x29, #-32]
  408d48:	ldr	x0, [x8]
  408d4c:	add	x1, sp, #0x38
  408d50:	bl	40dac0 <lstat64>
  408d54:	cmp	w0, #0x0
  408d58:	cset	w9, lt  // lt = tstop
  408d5c:	tbnz	w9, #0, 408d80 <loopback_points_list_detach+0x178>
  408d60:	ldur	x8, [x29, #-176]
  408d64:	ldr	x9, [sp, #88]
  408d68:	cmp	x8, x9
  408d6c:	b.ne	408d80 <loopback_points_list_detach+0x178>  // b.any
  408d70:	ldur	w8, [x29, #-44]
  408d74:	add	w8, w8, #0x1
  408d78:	stur	w8, [x29, #-44]
  408d7c:	b	408ee0 <loopback_points_list_detach+0x2d8>
  408d80:	mov	w8, #0x6                   	// #6
  408d84:	str	w8, [sp, #52]
  408d88:	str	wzr, [sp, #48]
  408d8c:	str	wzr, [sp, #44]
  408d90:	ldr	w0, [sp, #44]
  408d94:	bl	403628 <log_get_max_level_realm@plt>
  408d98:	ldr	w8, [sp, #52]
  408d9c:	and	w8, w8, #0x7
  408da0:	cmp	w0, w8
  408da4:	b.lt	408de4 <loopback_points_list_detach+0x1dc>  // b.tstop
  408da8:	ldr	w8, [sp, #44]
  408dac:	ldr	w9, [sp, #52]
  408db0:	orr	w0, w9, w8, lsl #10
  408db4:	ldr	w1, [sp, #48]
  408db8:	ldur	x10, [x29, #-32]
  408dbc:	ldr	x6, [x10]
  408dc0:	ldr	x2, [sp, #16]
  408dc4:	mov	w3, #0x233                 	// #563
  408dc8:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  408dcc:	add	x4, x4, #0xf61
  408dd0:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  408dd4:	add	x5, x5, #0xf7d
  408dd8:	bl	403638 <log_internal_realm@plt>
  408ddc:	str	w0, [sp, #8]
  408de0:	b	408df8 <loopback_points_list_detach+0x1f0>
  408de4:	ldr	w0, [sp, #48]
  408de8:	bl	403648 <abs@plt>
  408dec:	mov	w8, wzr
  408df0:	subs	w8, w8, w0, uxtb
  408df4:	str	w8, [sp, #8]
  408df8:	ldr	w8, [sp, #8]
  408dfc:	str	w8, [sp, #40]
  408e00:	ldur	x9, [x29, #-32]
  408e04:	ldr	x0, [x9]
  408e08:	bl	40a388 <delete_loopback>
  408e0c:	stur	w0, [x29, #-180]
  408e10:	ldur	w8, [x29, #-180]
  408e14:	cmp	w8, #0x0
  408e18:	cset	w8, lt  // lt = tstop
  408e1c:	tbnz	w8, #0, 408e4c <loopback_points_list_detach+0x244>
  408e20:	ldur	w8, [x29, #-180]
  408e24:	cmp	w8, #0x0
  408e28:	cset	w8, le
  408e2c:	tbnz	w8, #0, 408e3c <loopback_points_list_detach+0x234>
  408e30:	ldur	x8, [x29, #-16]
  408e34:	mov	w9, #0x1                   	// #1
  408e38:	strb	w9, [x8]
  408e3c:	ldur	x0, [x29, #-8]
  408e40:	ldur	x1, [x29, #-32]
  408e44:	bl	407160 <mount_point_free>
  408e48:	b	408ee0 <loopback_points_list_detach+0x2d8>
  408e4c:	ldur	w8, [x29, #-20]
  408e50:	str	w8, [sp, #36]
  408e54:	bl	403768 <__errno_location@plt>
  408e58:	ldr	w8, [x0]
  408e5c:	str	w8, [sp, #32]
  408e60:	str	wzr, [sp, #28]
  408e64:	ldr	w0, [sp, #28]
  408e68:	bl	403628 <log_get_max_level_realm@plt>
  408e6c:	ldr	w8, [sp, #36]
  408e70:	and	w8, w8, #0x7
  408e74:	cmp	w0, w8
  408e78:	b.lt	408eb8 <loopback_points_list_detach+0x2b0>  // b.tstop
  408e7c:	ldr	w8, [sp, #28]
  408e80:	ldr	w9, [sp, #36]
  408e84:	orr	w0, w9, w8, lsl #10
  408e88:	ldr	w1, [sp, #32]
  408e8c:	ldur	x10, [x29, #-32]
  408e90:	ldr	x6, [x10]
  408e94:	ldr	x2, [sp, #16]
  408e98:	mov	w3, #0x23b                 	// #571
  408e9c:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  408ea0:	add	x4, x4, #0xf61
  408ea4:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  408ea8:	add	x5, x5, #0xf94
  408eac:	bl	403638 <log_internal_realm@plt>
  408eb0:	str	w0, [sp, #4]
  408eb4:	b	408ecc <loopback_points_list_detach+0x2c4>
  408eb8:	ldr	w0, [sp, #32]
  408ebc:	bl	403648 <abs@plt>
  408ec0:	mov	w8, wzr
  408ec4:	subs	w8, w8, w0, uxtb
  408ec8:	str	w8, [sp, #4]
  408ecc:	ldr	w8, [sp, #4]
  408ed0:	str	w8, [sp, #24]
  408ed4:	ldur	w8, [x29, #-44]
  408ed8:	add	w8, w8, #0x1
  408edc:	stur	w8, [x29, #-44]
  408ee0:	ldur	x8, [x29, #-40]
  408ee4:	stur	x8, [x29, #-32]
  408ee8:	b	408cf8 <loopback_points_list_detach+0xf0>
  408eec:	ldur	w0, [x29, #-44]
  408ef0:	ldr	x28, [sp, #384]
  408ef4:	ldp	x29, x30, [sp, #368]
  408ef8:	add	sp, sp, #0x190
  408efc:	ret

0000000000408f00 <dm_detach_all>:
  408f00:	sub	sp, sp, #0x40
  408f04:	stp	x29, x30, [sp, #48]
  408f08:	add	x29, sp, #0x30
  408f0c:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  408f10:	add	x8, x8, #0x7c3
  408f14:	add	x2, x8, #0x3
  408f18:	stur	x0, [x29, #-16]
  408f1c:	stur	w1, [x29, #-20]
  408f20:	str	x2, [sp]
  408f24:	ldur	x8, [x29, #-16]
  408f28:	cmp	x8, #0x0
  408f2c:	cset	w9, ne  // ne = any
  408f30:	mov	w10, #0x1                   	// #1
  408f34:	eor	w9, w9, #0x1
  408f38:	eor	w9, w9, w10
  408f3c:	eor	w9, w9, w10
  408f40:	and	w9, w9, #0x1
  408f44:	mov	w0, w9
  408f48:	sxtw	x8, w0
  408f4c:	cbz	x8, 408f74 <dm_detach_all+0x74>
  408f50:	mov	w8, wzr
  408f54:	mov	w0, w8
  408f58:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  408f5c:	add	x1, x1, #0x96b
  408f60:	ldr	x2, [sp]
  408f64:	mov	w3, #0x2a8                 	// #680
  408f68:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  408f6c:	add	x4, x4, #0x9cf
  408f70:	bl	4037e8 <log_assert_failed_realm@plt>
  408f74:	mov	x8, xzr
  408f78:	str	x8, [sp, #16]
  408f7c:	add	x0, sp, #0x10
  408f80:	bl	408fe0 <dm_list_get>
  408f84:	str	w0, [sp, #12]
  408f88:	ldr	w8, [sp, #12]
  408f8c:	cmp	w8, #0x0
  408f90:	cset	w8, ge  // ge = tcont
  408f94:	tbnz	w8, #0, 408fac <dm_detach_all+0xac>
  408f98:	ldr	w8, [sp, #12]
  408f9c:	stur	w8, [x29, #-4]
  408fa0:	mov	w8, #0x1                   	// #1
  408fa4:	str	w8, [sp, #8]
  408fa8:	b	408fc8 <dm_detach_all+0xc8>
  408fac:	ldur	x1, [x29, #-16]
  408fb0:	ldur	w2, [x29, #-20]
  408fb4:	add	x0, sp, #0x10
  408fb8:	bl	409328 <dm_points_list_detach>
  408fbc:	stur	w0, [x29, #-4]
  408fc0:	mov	w8, #0x1                   	// #1
  408fc4:	str	w8, [sp, #8]
  408fc8:	add	x0, sp, #0x10
  408fcc:	bl	4070c4 <mount_points_list_free>
  408fd0:	ldur	w0, [x29, #-4]
  408fd4:	ldp	x29, x30, [sp, #48]
  408fd8:	add	sp, sp, #0x40
  408fdc:	ret

0000000000408fe0 <dm_list_get>:
  408fe0:	sub	sp, sp, #0xc0
  408fe4:	stp	x29, x30, [sp, #176]
  408fe8:	add	x29, sp, #0xb0
  408fec:	mov	x8, xzr
  408ff0:	adrp	x9, 40e000 <parse_argv.options+0x4a8>
  408ff4:	add	x9, x9, #0x7c3
  408ff8:	add	x9, x9, #0x3
  408ffc:	stur	x0, [x29, #-16]
  409000:	stur	x8, [x29, #-24]
  409004:	str	x9, [sp, #8]
  409008:	ldur	x8, [x29, #-16]
  40900c:	cmp	x8, #0x0
  409010:	cset	w9, ne  // ne = any
  409014:	mov	w10, #0x1                   	// #1
  409018:	eor	w9, w9, #0x1
  40901c:	eor	w9, w9, w10
  409020:	eor	w9, w9, w10
  409024:	and	w9, w9, #0x1
  409028:	mov	w0, w9
  40902c:	sxtw	x8, w0
  409030:	cbz	x8, 409058 <dm_list_get+0x78>
  409034:	mov	w8, wzr
  409038:	mov	w0, w8
  40903c:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  409040:	add	x1, x1, #0x7be
  409044:	ldr	x2, [sp, #8]
  409048:	mov	w3, #0x117                 	// #279
  40904c:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  409050:	add	x4, x4, #0xfde
  409054:	bl	4037e8 <log_assert_failed_realm@plt>
  409058:	sub	x0, x29, #0x18
  40905c:	bl	403b48 <sd_device_enumerator_new@plt>
  409060:	stur	w0, [x29, #-36]
  409064:	ldur	w8, [x29, #-36]
  409068:	cmp	w8, #0x0
  40906c:	cset	w8, ge  // ge = tcont
  409070:	tbnz	w8, #0, 409088 <dm_list_get+0xa8>
  409074:	ldur	w8, [x29, #-36]
  409078:	stur	w8, [x29, #-4]
  40907c:	mov	w8, #0x1                   	// #1
  409080:	stur	w8, [x29, #-40]
  409084:	b	409310 <dm_list_get+0x330>
  409088:	ldur	x0, [x29, #-24]
  40908c:	bl	403b58 <sd_device_enumerator_allow_uninitialized@plt>
  409090:	stur	w0, [x29, #-36]
  409094:	ldur	w8, [x29, #-36]
  409098:	cmp	w8, #0x0
  40909c:	cset	w8, ge  // ge = tcont
  4090a0:	tbnz	w8, #0, 4090b8 <dm_list_get+0xd8>
  4090a4:	ldur	w8, [x29, #-36]
  4090a8:	stur	w8, [x29, #-4]
  4090ac:	mov	w8, #0x1                   	// #1
  4090b0:	stur	w8, [x29, #-40]
  4090b4:	b	409310 <dm_list_get+0x330>
  4090b8:	ldur	x0, [x29, #-24]
  4090bc:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4090c0:	add	x1, x1, #0xf06
  4090c4:	mov	w2, #0x1                   	// #1
  4090c8:	bl	403b68 <sd_device_enumerator_add_match_subsystem@plt>
  4090cc:	stur	w0, [x29, #-36]
  4090d0:	ldur	w8, [x29, #-36]
  4090d4:	cmp	w8, #0x0
  4090d8:	cset	w8, ge  // ge = tcont
  4090dc:	tbnz	w8, #0, 4090f4 <dm_list_get+0x114>
  4090e0:	ldur	w8, [x29, #-36]
  4090e4:	stur	w8, [x29, #-4]
  4090e8:	mov	w8, #0x1                   	// #1
  4090ec:	stur	w8, [x29, #-40]
  4090f0:	b	409310 <dm_list_get+0x330>
  4090f4:	ldur	x0, [x29, #-24]
  4090f8:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4090fc:	add	x1, x1, #0xffd
  409100:	bl	403b78 <sd_device_enumerator_add_match_sysname@plt>
  409104:	stur	w0, [x29, #-36]
  409108:	ldur	w8, [x29, #-36]
  40910c:	cmp	w8, #0x0
  409110:	cset	w8, ge  // ge = tcont
  409114:	tbnz	w8, #0, 40912c <dm_list_get+0x14c>
  409118:	ldur	w8, [x29, #-36]
  40911c:	stur	w8, [x29, #-4]
  409120:	mov	w8, #0x1                   	// #1
  409124:	stur	w8, [x29, #-40]
  409128:	b	409310 <dm_list_get+0x330>
  40912c:	ldur	x0, [x29, #-24]
  409130:	bl	403b98 <sd_device_enumerator_get_device_first@plt>
  409134:	stur	x0, [x29, #-32]
  409138:	ldur	x8, [x29, #-32]
  40913c:	cbz	x8, 409304 <dm_list_get+0x324>
  409140:	mov	x8, xzr
  409144:	stur	x8, [x29, #-48]
  409148:	ldur	x0, [x29, #-32]
  40914c:	sub	x1, x29, #0x48
  409150:	bl	403be8 <sd_device_get_devnum@plt>
  409154:	cmp	w0, #0x0
  409158:	cset	w9, lt  // lt = tstop
  40915c:	tbnz	w9, #0, 409178 <dm_list_get+0x198>
  409160:	ldur	x0, [x29, #-32]
  409164:	sub	x1, x29, #0x38
  409168:	bl	403ba8 <sd_device_get_devname@plt>
  40916c:	cmp	w0, #0x0
  409170:	cset	w8, ge  // ge = tcont
  409174:	tbnz	w8, #0, 409184 <dm_list_get+0x1a4>
  409178:	mov	w8, #0x6                   	// #6
  40917c:	stur	w8, [x29, #-40]
  409180:	b	4092cc <dm_list_get+0x2ec>
  409184:	ldur	x0, [x29, #-56]
  409188:	bl	403a88 <strdup@plt>
  40918c:	stur	x0, [x29, #-48]
  409190:	ldur	x8, [x29, #-48]
  409194:	cbnz	x8, 4091ac <dm_list_get+0x1cc>
  409198:	mov	w8, #0xfffffff4            	// #-12
  40919c:	stur	w8, [x29, #-4]
  4091a0:	mov	w8, #0x1                   	// #1
  4091a4:	stur	w8, [x29, #-40]
  4091a8:	b	4092cc <dm_list_get+0x2ec>
  4091ac:	mov	x0, #0x38                  	// #56
  4091b0:	mov	x1, #0x1                   	// #1
  4091b4:	bl	40a2a4 <malloc_multiply>
  4091b8:	stur	x0, [x29, #-64]
  4091bc:	ldur	x8, [x29, #-64]
  4091c0:	cbnz	x8, 4091d8 <dm_list_get+0x1f8>
  4091c4:	mov	w8, #0xfffffff4            	// #-12
  4091c8:	stur	w8, [x29, #-4]
  4091cc:	mov	w8, #0x1                   	// #1
  4091d0:	stur	w8, [x29, #-40]
  4091d4:	b	4092cc <dm_list_get+0x2ec>
  4091d8:	ldur	x0, [x29, #-64]
  4091dc:	ldur	x8, [x29, #-48]
  4091e0:	str	x8, [sp, #40]
  4091e4:	mov	x8, xzr
  4091e8:	stur	x8, [x29, #-48]
  4091ec:	ldr	x9, [sp, #40]
  4091f0:	str	x9, [sp, #32]
  4091f4:	ldr	x9, [sp, #32]
  4091f8:	add	x10, sp, #0x30
  4091fc:	str	x9, [sp, #48]
  409200:	str	x8, [x10, #8]
  409204:	str	xzr, [sp, #64]
  409208:	mov	w11, #0x0                   	// #0
  40920c:	strb	w11, [x10, #24]
  409210:	ldur	x9, [x29, #-72]
  409214:	str	x9, [sp, #80]
  409218:	str	x8, [x10, #40]
  40921c:	str	x8, [x10, #48]
  409220:	mov	x1, x10
  409224:	mov	x2, #0x38                  	// #56
  409228:	bl	4038a8 <memcpy@plt>
  40922c:	ldur	x8, [x29, #-16]
  409230:	str	x8, [sp, #24]
  409234:	ldur	x8, [x29, #-64]
  409238:	str	x8, [sp, #16]
  40923c:	ldr	x8, [sp, #16]
  409240:	cmp	x8, #0x0
  409244:	cset	w9, ne  // ne = any
  409248:	mov	w10, #0x1                   	// #1
  40924c:	eor	w9, w9, #0x1
  409250:	eor	w9, w9, w10
  409254:	eor	w9, w9, w10
  409258:	and	w9, w9, #0x1
  40925c:	mov	w0, w9
  409260:	sxtw	x8, w0
  409264:	cbz	x8, 40928c <dm_list_get+0x2ac>
  409268:	mov	w8, wzr
  40926c:	mov	w0, w8
  409270:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  409274:	add	x1, x1, #0x91c
  409278:	ldr	x2, [sp, #8]
  40927c:	mov	w3, #0x140                 	// #320
  409280:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  409284:	add	x4, x4, #0xfde
  409288:	bl	4037e8 <log_assert_failed_realm@plt>
  40928c:	ldr	x8, [sp, #24]
  409290:	ldr	x8, [x8]
  409294:	ldr	x9, [sp, #16]
  409298:	str	x8, [x9, #40]
  40929c:	cbz	x8, 4092b0 <dm_list_get+0x2d0>
  4092a0:	ldr	x8, [sp, #16]
  4092a4:	ldr	x9, [sp, #16]
  4092a8:	ldr	x9, [x9, #40]
  4092ac:	str	x8, [x9, #48]
  4092b0:	ldr	x8, [sp, #16]
  4092b4:	mov	x9, xzr
  4092b8:	str	x9, [x8, #48]
  4092bc:	ldr	x8, [sp, #16]
  4092c0:	ldr	x9, [sp, #24]
  4092c4:	str	x8, [x9]
  4092c8:	stur	wzr, [x29, #-40]
  4092cc:	sub	x0, x29, #0x30
  4092d0:	bl	407d40 <freep>
  4092d4:	ldur	w8, [x29, #-40]
  4092d8:	str	w8, [sp, #4]
  4092dc:	cbz	w8, 4092f4 <dm_list_get+0x314>
  4092e0:	b	4092e4 <dm_list_get+0x304>
  4092e4:	ldr	w8, [sp, #4]
  4092e8:	cmp	w8, #0x6
  4092ec:	b.eq	4092f4 <dm_list_get+0x314>  // b.none
  4092f0:	b	409310 <dm_list_get+0x330>
  4092f4:	ldur	x0, [x29, #-24]
  4092f8:	bl	403bc8 <sd_device_enumerator_get_device_next@plt>
  4092fc:	stur	x0, [x29, #-32]
  409300:	b	409138 <dm_list_get+0x158>
  409304:	stur	wzr, [x29, #-4]
  409308:	mov	w8, #0x1                   	// #1
  40930c:	stur	w8, [x29, #-40]
  409310:	sub	x0, x29, #0x18
  409314:	bl	40a270 <sd_device_enumerator_unrefp>
  409318:	ldur	w0, [x29, #-4]
  40931c:	ldp	x29, x30, [sp, #176]
  409320:	add	sp, sp, #0xc0
  409324:	ret

0000000000409328 <dm_points_list_detach>:
  409328:	sub	sp, sp, #0x90
  40932c:	stp	x29, x30, [sp, #128]
  409330:	add	x29, sp, #0x80
  409334:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  409338:	add	x8, x8, #0x7c3
  40933c:	add	x8, x8, #0x3
  409340:	stur	x0, [x29, #-8]
  409344:	stur	x1, [x29, #-16]
  409348:	stur	w2, [x29, #-20]
  40934c:	stur	wzr, [x29, #-44]
  409350:	str	x8, [sp, #32]
  409354:	ldur	x8, [x29, #-8]
  409358:	cmp	x8, #0x0
  40935c:	cset	w9, ne  // ne = any
  409360:	mov	w10, #0x1                   	// #1
  409364:	eor	w9, w9, #0x1
  409368:	eor	w9, w9, w10
  40936c:	eor	w9, w9, w10
  409370:	and	w9, w9, #0x1
  409374:	mov	w0, w9
  409378:	sxtw	x8, w0
  40937c:	cbz	x8, 4093a4 <dm_points_list_detach+0x7c>
  409380:	mov	w8, wzr
  409384:	mov	w0, w8
  409388:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  40938c:	add	x1, x1, #0x7be
  409390:	ldr	x2, [sp, #32]
  409394:	mov	w3, #0x248                 	// #584
  409398:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40939c:	add	x4, x4, #0x2
  4093a0:	bl	4037e8 <log_assert_failed_realm@plt>
  4093a4:	ldur	x8, [x29, #-16]
  4093a8:	cmp	x8, #0x0
  4093ac:	cset	w9, ne  // ne = any
  4093b0:	mov	w10, #0x1                   	// #1
  4093b4:	eor	w9, w9, #0x1
  4093b8:	eor	w9, w9, w10
  4093bc:	eor	w9, w9, w10
  4093c0:	and	w9, w9, #0x1
  4093c4:	mov	w0, w9
  4093c8:	sxtw	x8, w0
  4093cc:	cbz	x8, 4093f4 <dm_points_list_detach+0xcc>
  4093d0:	mov	w8, wzr
  4093d4:	mov	w0, w8
  4093d8:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4093dc:	add	x1, x1, #0x96b
  4093e0:	ldr	x2, [sp, #32]
  4093e4:	mov	w3, #0x249                 	// #585
  4093e8:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  4093ec:	add	x4, x4, #0x2
  4093f0:	bl	4037e8 <log_assert_failed_realm@plt>
  4093f4:	adrp	x0, 40e000 <parse_argv.options+0x4a8>
  4093f8:	add	x0, x0, #0xd1b
  4093fc:	sub	x1, x29, #0x38
  409400:	bl	403bf8 <get_block_device@plt>
  409404:	stur	w0, [x29, #-48]
  409408:	ldur	w8, [x29, #-48]
  40940c:	cmp	w8, #0x0
  409410:	cset	w8, gt
  409414:	tbnz	w8, #0, 40941c <dm_points_list_detach+0xf4>
  409418:	stur	xzr, [x29, #-56]
  40941c:	ldur	x8, [x29, #-8]
  409420:	ldr	x8, [x8]
  409424:	stur	x8, [x29, #-32]
  409428:	ldur	x8, [x29, #-32]
  40942c:	mov	w9, #0x0                   	// #0
  409430:	str	w9, [sp, #28]
  409434:	cbz	x8, 40944c <dm_points_list_detach+0x124>
  409438:	ldur	x8, [x29, #-32]
  40943c:	ldr	x8, [x8, #40]
  409440:	stur	x8, [x29, #-40]
  409444:	mov	w9, #0x1                   	// #1
  409448:	str	w9, [sp, #28]
  40944c:	ldr	w8, [sp, #28]
  409450:	tbnz	w8, #0, 409458 <dm_points_list_detach+0x130>
  409454:	b	409620 <dm_points_list_detach+0x2f8>
  409458:	ldur	x0, [x29, #-56]
  40945c:	bl	403bd8 <gnu_dev_major@plt>
  409460:	cbz	w0, 409488 <dm_points_list_detach+0x160>
  409464:	ldur	x8, [x29, #-56]
  409468:	ldur	x9, [x29, #-32]
  40946c:	ldr	x9, [x9, #32]
  409470:	cmp	x8, x9
  409474:	b.ne	409488 <dm_points_list_detach+0x160>  // b.any
  409478:	ldur	w8, [x29, #-44]
  40947c:	add	w8, w8, #0x1
  409480:	stur	w8, [x29, #-44]
  409484:	b	409614 <dm_points_list_detach+0x2ec>
  409488:	mov	w8, #0x6                   	// #6
  40948c:	stur	w8, [x29, #-60]
  409490:	str	wzr, [sp, #64]
  409494:	str	wzr, [sp, #60]
  409498:	ldr	w0, [sp, #60]
  40949c:	bl	403628 <log_get_max_level_realm@plt>
  4094a0:	ldur	w8, [x29, #-60]
  4094a4:	and	w8, w8, #0x7
  4094a8:	cmp	w0, w8
  4094ac:	b.lt	409528 <dm_points_list_detach+0x200>  // b.tstop
  4094b0:	ldr	w8, [sp, #60]
  4094b4:	ldur	w9, [x29, #-60]
  4094b8:	orr	w0, w9, w8, lsl #10
  4094bc:	ldr	w1, [sp, #64]
  4094c0:	ldur	x10, [x29, #-32]
  4094c4:	ldr	x10, [x10, #32]
  4094c8:	str	w0, [sp, #24]
  4094cc:	mov	x0, x10
  4094d0:	str	w1, [sp, #20]
  4094d4:	bl	403bd8 <gnu_dev_major@plt>
  4094d8:	ldur	x10, [x29, #-32]
  4094dc:	ldr	x10, [x10, #32]
  4094e0:	str	w0, [sp, #16]
  4094e4:	mov	x0, x10
  4094e8:	bl	403c08 <gnu_dev_minor@plt>
  4094ec:	ldr	w8, [sp, #24]
  4094f0:	str	w0, [sp, #12]
  4094f4:	mov	w0, w8
  4094f8:	ldr	w1, [sp, #20]
  4094fc:	ldr	x2, [sp, #32]
  409500:	mov	w3, #0x256                 	// #598
  409504:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  409508:	add	x4, x4, #0x39
  40950c:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  409510:	add	x5, x5, #0x4f
  409514:	ldr	w6, [sp, #16]
  409518:	ldr	w7, [sp, #12]
  40951c:	bl	403638 <log_internal_realm@plt>
  409520:	str	w0, [sp, #8]
  409524:	b	40953c <dm_points_list_detach+0x214>
  409528:	ldr	w0, [sp, #64]
  40952c:	bl	403648 <abs@plt>
  409530:	mov	w8, wzr
  409534:	subs	w8, w8, w0, uxtb
  409538:	str	w8, [sp, #8]
  40953c:	ldr	w8, [sp, #8]
  409540:	str	w8, [sp, #56]
  409544:	ldur	x9, [x29, #-32]
  409548:	ldr	x0, [x9, #32]
  40954c:	bl	40a518 <delete_dm>
  409550:	stur	w0, [x29, #-48]
  409554:	ldur	w8, [x29, #-48]
  409558:	cmp	w8, #0x0
  40955c:	cset	w8, lt  // lt = tstop
  409560:	tbnz	w8, #0, 409580 <dm_points_list_detach+0x258>
  409564:	ldur	x8, [x29, #-16]
  409568:	mov	w9, #0x1                   	// #1
  40956c:	strb	w9, [x8]
  409570:	ldur	x0, [x29, #-8]
  409574:	ldur	x1, [x29, #-32]
  409578:	bl	407160 <mount_point_free>
  40957c:	b	409614 <dm_points_list_detach+0x2ec>
  409580:	ldur	w8, [x29, #-20]
  409584:	str	w8, [sp, #52]
  409588:	bl	403768 <__errno_location@plt>
  40958c:	ldr	w8, [x0]
  409590:	str	w8, [sp, #48]
  409594:	str	wzr, [sp, #44]
  409598:	ldr	w0, [sp, #44]
  40959c:	bl	403628 <log_get_max_level_realm@plt>
  4095a0:	ldr	w8, [sp, #52]
  4095a4:	and	w8, w8, #0x7
  4095a8:	cmp	w0, w8
  4095ac:	b.lt	4095ec <dm_points_list_detach+0x2c4>  // b.tstop
  4095b0:	ldr	w8, [sp, #44]
  4095b4:	ldr	w9, [sp, #52]
  4095b8:	orr	w0, w9, w8, lsl #10
  4095bc:	ldr	w1, [sp, #48]
  4095c0:	ldur	x10, [x29, #-32]
  4095c4:	ldr	x6, [x10]
  4095c8:	ldr	x2, [sp, #32]
  4095cc:	mov	w3, #0x25c                 	// #604
  4095d0:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  4095d4:	add	x4, x4, #0x39
  4095d8:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  4095dc:	add	x5, x5, #0x63
  4095e0:	bl	403638 <log_internal_realm@plt>
  4095e4:	str	w0, [sp, #4]
  4095e8:	b	409600 <dm_points_list_detach+0x2d8>
  4095ec:	ldr	w0, [sp, #48]
  4095f0:	bl	403648 <abs@plt>
  4095f4:	mov	w8, wzr
  4095f8:	subs	w8, w8, w0, uxtb
  4095fc:	str	w8, [sp, #4]
  409600:	ldr	w8, [sp, #4]
  409604:	str	w8, [sp, #40]
  409608:	ldur	w8, [x29, #-44]
  40960c:	add	w8, w8, #0x1
  409610:	stur	w8, [x29, #-44]
  409614:	ldur	x8, [x29, #-40]
  409618:	stur	x8, [x29, #-32]
  40961c:	b	409428 <dm_points_list_detach+0x100>
  409620:	ldur	w0, [x29, #-44]
  409624:	ldp	x29, x30, [sp, #128]
  409628:	add	sp, sp, #0x90
  40962c:	ret

0000000000409630 <mount_points_list_umount>:
  409630:	sub	sp, sp, #0x40
  409634:	stp	x29, x30, [sp, #48]
  409638:	add	x29, sp, #0x30
  40963c:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  409640:	add	x8, x8, #0x7c3
  409644:	add	x8, x8, #0x3
  409648:	stur	x0, [x29, #-8]
  40964c:	stur	x1, [x29, #-16]
  409650:	stur	w2, [x29, #-20]
  409654:	str	wzr, [sp, #12]
  409658:	str	x8, [sp]
  40965c:	ldur	x8, [x29, #-8]
  409660:	cmp	x8, #0x0
  409664:	cset	w9, ne  // ne = any
  409668:	mov	w10, #0x1                   	// #1
  40966c:	eor	w9, w9, #0x1
  409670:	eor	w9, w9, w10
  409674:	eor	w9, w9, w10
  409678:	and	w9, w9, #0x1
  40967c:	mov	w0, w9
  409680:	sxtw	x8, w0
  409684:	cbz	x8, 4096ac <mount_points_list_umount+0x7c>
  409688:	mov	w8, wzr
  40968c:	mov	w0, w8
  409690:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  409694:	add	x1, x1, #0x7be
  409698:	ldr	x2, [sp]
  40969c:	mov	w3, #0x1d5                 	// #469
  4096a0:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  4096a4:	add	x4, x4, #0xb6c
  4096a8:	bl	4037e8 <log_assert_failed_realm@plt>
  4096ac:	ldur	x8, [x29, #-16]
  4096b0:	cmp	x8, #0x0
  4096b4:	cset	w9, ne  // ne = any
  4096b8:	mov	w10, #0x1                   	// #1
  4096bc:	eor	w9, w9, #0x1
  4096c0:	eor	w9, w9, w10
  4096c4:	eor	w9, w9, w10
  4096c8:	and	w9, w9, #0x1
  4096cc:	mov	w0, w9
  4096d0:	sxtw	x8, w0
  4096d4:	cbz	x8, 4096fc <mount_points_list_umount+0xcc>
  4096d8:	mov	w8, wzr
  4096dc:	mov	w0, w8
  4096e0:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4096e4:	add	x1, x1, #0x96b
  4096e8:	ldr	x2, [sp]
  4096ec:	mov	w3, #0x1d6                 	// #470
  4096f0:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  4096f4:	add	x4, x4, #0xb6c
  4096f8:	bl	4037e8 <log_assert_failed_realm@plt>
  4096fc:	ldur	x8, [x29, #-8]
  409700:	ldr	x8, [x8]
  409704:	str	x8, [sp, #16]
  409708:	ldr	x8, [sp, #16]
  40970c:	cbz	x8, 4097b8 <mount_points_list_umount+0x188>
  409710:	ldr	x8, [sp, #16]
  409714:	ldrb	w9, [x8, #24]
  409718:	tbnz	w9, #0, 409720 <mount_points_list_umount+0xf0>
  40971c:	b	40975c <mount_points_list_umount+0x12c>
  409720:	ldr	x0, [sp, #16]
  409724:	ldur	w1, [x29, #-20]
  409728:	bl	4097c8 <remount_with_timeout>
  40972c:	cmp	w0, #0x0
  409730:	cset	w8, ge  // ge = tcont
  409734:	tbnz	w8, #0, 40975c <mount_points_list_umount+0x12c>
  409738:	ldr	x8, [sp, #16]
  40973c:	ldr	x0, [x8]
  409740:	bl	409c94 <nonunmountable_path>
  409744:	tbnz	w0, #0, 40974c <mount_points_list_umount+0x11c>
  409748:	b	40975c <mount_points_list_umount+0x12c>
  40974c:	ldr	w8, [sp, #12]
  409750:	add	w8, w8, #0x1
  409754:	str	w8, [sp, #12]
  409758:	b	4097a8 <mount_points_list_umount+0x178>
  40975c:	ldr	x8, [sp, #16]
  409760:	ldr	x0, [x8]
  409764:	bl	409c94 <nonunmountable_path>
  409768:	tbnz	w0, #0, 409770 <mount_points_list_umount+0x140>
  40976c:	b	409774 <mount_points_list_umount+0x144>
  409770:	b	4097a8 <mount_points_list_umount+0x178>
  409774:	ldr	x0, [sp, #16]
  409778:	ldur	w1, [x29, #-20]
  40977c:	bl	409cf0 <umount_with_timeout>
  409780:	cmp	w0, #0x0
  409784:	cset	w8, ge  // ge = tcont
  409788:	tbnz	w8, #0, 40979c <mount_points_list_umount+0x16c>
  40978c:	ldr	w8, [sp, #12]
  409790:	add	w8, w8, #0x1
  409794:	str	w8, [sp, #12]
  409798:	b	4097a8 <mount_points_list_umount+0x178>
  40979c:	ldur	x8, [x29, #-16]
  4097a0:	mov	w9, #0x1                   	// #1
  4097a4:	strb	w9, [x8]
  4097a8:	ldr	x8, [sp, #16]
  4097ac:	ldr	x8, [x8, #40]
  4097b0:	str	x8, [sp, #16]
  4097b4:	b	409708 <mount_points_list_umount+0xd8>
  4097b8:	ldr	w0, [sp, #12]
  4097bc:	ldp	x29, x30, [sp, #48]
  4097c0:	add	sp, sp, #0x40
  4097c4:	ret

00000000004097c8 <remount_with_timeout>:
  4097c8:	sub	sp, sp, #0x1d0
  4097cc:	stp	x29, x30, [sp, #432]
  4097d0:	str	x28, [sp, #448]
  4097d4:	add	x29, sp, #0x1b0
  4097d8:	sub	x8, x29, #0x10
  4097dc:	adrp	x9, 40e000 <parse_argv.options+0x4a8>
  4097e0:	add	x9, x9, #0x7c3
  4097e4:	add	x9, x9, #0x3
  4097e8:	adrp	x10, 40e000 <parse_argv.options+0x4a8>
  4097ec:	add	x10, x10, #0xbdf
  4097f0:	str	x0, [x8]
  4097f4:	stur	w1, [x29, #-20]
  4097f8:	str	x8, [sp, #48]
  4097fc:	str	x9, [sp, #40]
  409800:	str	x10, [sp, #32]
  409804:	mov	w8, wzr
  409808:	mov	w0, w8
  40980c:	add	x1, sp, #0x90
  409810:	mov	w2, #0x11                  	// #17
  409814:	mov	w3, #0xffffffff            	// #-1
  409818:	bl	403898 <sigprocmask_many@plt>
  40981c:	cmp	w0, #0x0
  409820:	cset	w8, ge  // ge = tcont
  409824:	mov	w9, #0x1                   	// #1
  409828:	eor	w8, w8, #0x1
  40982c:	eor	w8, w8, w9
  409830:	eor	w8, w8, w9
  409834:	and	w8, w8, #0x1
  409838:	mov	w1, w8
  40983c:	sxtw	x10, w1
  409840:	cbz	x10, 409868 <remount_with_timeout+0xa0>
  409844:	mov	w8, wzr
  409848:	mov	w0, w8
  40984c:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  409850:	add	x1, x1, #0x4eb
  409854:	ldr	x2, [sp, #40]
  409858:	mov	w3, #0x181                 	// #385
  40985c:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  409860:	add	x4, x4, #0xba6
  409864:	bl	4037e8 <log_assert_failed_realm@plt>
  409868:	sub	x0, x29, #0xa0
  40986c:	add	x1, sp, #0x90
  409870:	mov	x2, #0x80                  	// #128
  409874:	bl	4038a8 <memcpy@plt>
  409878:	ldr	x8, [sp, #48]
  40987c:	ldr	x9, [x8]
  409880:	cmp	x9, #0x0
  409884:	cset	w10, ne  // ne = any
  409888:	mov	w11, #0x1                   	// #1
  40988c:	eor	w10, w10, #0x1
  409890:	eor	w10, w10, w11
  409894:	eor	w10, w10, w11
  409898:	and	w10, w10, #0x1
  40989c:	mov	w0, w10
  4098a0:	sxtw	x9, w0
  4098a4:	cbz	x9, 4098cc <remount_with_timeout+0x104>
  4098a8:	mov	w8, wzr
  4098ac:	mov	w0, w8
  4098b0:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  4098b4:	add	x1, x1, #0xa22
  4098b8:	ldr	x2, [sp, #40]
  4098bc:	mov	w3, #0x183                 	// #387
  4098c0:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  4098c4:	add	x4, x4, #0xba6
  4098c8:	bl	4037e8 <log_assert_failed_realm@plt>
  4098cc:	adrp	x0, 40e000 <parse_argv.options+0x4a8>
  4098d0:	add	x0, x0, #0xbd2
  4098d4:	mov	w1, #0x33                  	// #51
  4098d8:	sub	x2, x29, #0x18
  4098dc:	bl	40a228 <safe_fork>
  4098e0:	stur	w0, [x29, #-28]
  4098e4:	ldur	w8, [x29, #-28]
  4098e8:	cmp	w8, #0x0
  4098ec:	cset	w8, ge  // ge = tcont
  4098f0:	tbnz	w8, #0, 409908 <remount_with_timeout+0x140>
  4098f4:	ldur	w8, [x29, #-28]
  4098f8:	stur	w8, [x29, #-4]
  4098fc:	mov	w8, #0x1                   	// #1
  409900:	str	w8, [sp, #140]
  409904:	b	409c78 <remount_with_timeout+0x4b0>
  409908:	ldur	w8, [x29, #-28]
  40990c:	cbnz	w8, 409a78 <remount_with_timeout+0x2b0>
  409910:	mov	w8, #0x6                   	// #6
  409914:	str	w8, [sp, #136]
  409918:	str	wzr, [sp, #132]
  40991c:	str	wzr, [sp, #128]
  409920:	ldr	w0, [sp, #128]
  409924:	bl	403628 <log_get_max_level_realm@plt>
  409928:	ldr	w8, [sp, #136]
  40992c:	and	w8, w8, #0x7
  409930:	cmp	w0, w8
  409934:	b.lt	40997c <remount_with_timeout+0x1b4>  // b.tstop
  409938:	ldr	w8, [sp, #128]
  40993c:	ldr	w9, [sp, #136]
  409940:	orr	w0, w9, w8, lsl #10
  409944:	ldr	w1, [sp, #132]
  409948:	ldr	x10, [sp, #48]
  40994c:	ldr	x11, [x10]
  409950:	ldr	x6, [x11]
  409954:	ldr	x11, [x10]
  409958:	ldr	x7, [x11, #8]
  40995c:	ldr	x2, [sp, #40]
  409960:	mov	w3, #0x18d                 	// #397
  409964:	ldr	x4, [sp, #32]
  409968:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  40996c:	add	x5, x5, #0xbf4
  409970:	bl	403638 <log_internal_realm@plt>
  409974:	str	w0, [sp, #28]
  409978:	b	409990 <remount_with_timeout+0x1c8>
  40997c:	ldr	w0, [sp, #132]
  409980:	bl	403648 <abs@plt>
  409984:	mov	w8, wzr
  409988:	subs	w8, w8, w0, uxtb
  40998c:	str	w8, [sp, #28]
  409990:	ldr	w8, [sp, #28]
  409994:	str	w8, [sp, #124]
  409998:	ldr	x9, [sp, #48]
  40999c:	ldr	x10, [x9]
  4099a0:	ldr	x1, [x10]
  4099a4:	ldr	x10, [x9]
  4099a8:	ldr	x3, [x10, #16]
  4099ac:	ldr	x10, [x9]
  4099b0:	ldr	x4, [x10, #8]
  4099b4:	mov	x10, xzr
  4099b8:	mov	x0, x10
  4099bc:	mov	x2, x10
  4099c0:	bl	4038e8 <mount@plt>
  4099c4:	stur	w0, [x29, #-28]
  4099c8:	ldur	w8, [x29, #-28]
  4099cc:	cmp	w8, #0x0
  4099d0:	cset	w8, ge  // ge = tcont
  4099d4:	tbnz	w8, #0, 409a60 <remount_with_timeout+0x298>
  4099d8:	ldur	w8, [x29, #-20]
  4099dc:	str	w8, [sp, #120]
  4099e0:	bl	403768 <__errno_location@plt>
  4099e4:	ldr	w8, [x0]
  4099e8:	str	w8, [sp, #116]
  4099ec:	str	wzr, [sp, #112]
  4099f0:	ldr	w0, [sp, #112]
  4099f4:	bl	403628 <log_get_max_level_realm@plt>
  4099f8:	ldr	w8, [sp, #120]
  4099fc:	and	w8, w8, #0x7
  409a00:	cmp	w0, w8
  409a04:	b.lt	409a44 <remount_with_timeout+0x27c>  // b.tstop
  409a08:	ldr	w8, [sp, #112]
  409a0c:	ldr	w9, [sp, #120]
  409a10:	orr	w0, w9, w8, lsl #10
  409a14:	ldr	w1, [sp, #116]
  409a18:	ldr	x10, [sp, #48]
  409a1c:	ldr	x11, [x10]
  409a20:	ldr	x6, [x11]
  409a24:	ldr	x2, [sp, #40]
  409a28:	mov	w3, #0x192                 	// #402
  409a2c:	ldr	x4, [sp, #32]
  409a30:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  409a34:	add	x5, x5, #0xc24
  409a38:	bl	403638 <log_internal_realm@plt>
  409a3c:	str	w0, [sp, #24]
  409a40:	b	409a58 <remount_with_timeout+0x290>
  409a44:	ldr	w0, [sp, #116]
  409a48:	bl	403648 <abs@plt>
  409a4c:	mov	w8, wzr
  409a50:	subs	w8, w8, w0, uxtb
  409a54:	str	w8, [sp, #24]
  409a58:	ldr	w8, [sp, #24]
  409a5c:	str	w8, [sp, #108]
  409a60:	ldur	w8, [x29, #-28]
  409a64:	mov	w9, wzr
  409a68:	mov	w10, #0x1                   	// #1
  409a6c:	cmp	w8, #0x0
  409a70:	csel	w0, w10, w9, lt  // lt = tstop
  409a74:	bl	403778 <_exit@plt>
  409a78:	ldur	w0, [x29, #-24]
  409a7c:	mov	x1, #0x4a80                	// #19072
  409a80:	movk	x1, #0x55d, lsl #16
  409a84:	bl	4038c8 <wait_for_terminate_with_timeout@plt>
  409a88:	stur	w0, [x29, #-28]
  409a8c:	ldur	w8, [x29, #-28]
  409a90:	mov	w9, #0xffffff92            	// #-110
  409a94:	cmp	w8, w9
  409a98:	b.ne	409b34 <remount_with_timeout+0x36c>  // b.any
  409a9c:	mov	w8, #0x3                   	// #3
  409aa0:	str	w8, [sp, #104]
  409aa4:	ldur	w8, [x29, #-28]
  409aa8:	str	w8, [sp, #100]
  409aac:	str	wzr, [sp, #96]
  409ab0:	ldr	w0, [sp, #96]
  409ab4:	bl	403628 <log_get_max_level_realm@plt>
  409ab8:	ldr	w8, [sp, #104]
  409abc:	and	w8, w8, #0x7
  409ac0:	cmp	w0, w8
  409ac4:	b.lt	409b08 <remount_with_timeout+0x340>  // b.tstop
  409ac8:	ldr	w8, [sp, #96]
  409acc:	ldr	w9, [sp, #104]
  409ad0:	orr	w0, w9, w8, lsl #10
  409ad4:	ldr	w1, [sp, #100]
  409ad8:	ldr	x10, [sp, #48]
  409adc:	ldr	x11, [x10]
  409ae0:	ldr	x6, [x11]
  409ae4:	ldur	w7, [x29, #-24]
  409ae8:	ldr	x2, [sp, #40]
  409aec:	mov	w3, #0x199                 	// #409
  409af0:	ldr	x4, [sp, #32]
  409af4:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  409af8:	add	x5, x5, #0xc49
  409afc:	bl	403638 <log_internal_realm@plt>
  409b00:	str	w0, [sp, #20]
  409b04:	b	409b1c <remount_with_timeout+0x354>
  409b08:	ldr	w0, [sp, #100]
  409b0c:	bl	403648 <abs@plt>
  409b10:	mov	w8, wzr
  409b14:	subs	w8, w8, w0, uxtb
  409b18:	str	w8, [sp, #20]
  409b1c:	ldr	w8, [sp, #20]
  409b20:	str	w8, [sp, #92]
  409b24:	ldur	w0, [x29, #-24]
  409b28:	mov	w1, #0x9                   	// #9
  409b2c:	bl	4038d8 <kill@plt>
  409b30:	b	409c68 <remount_with_timeout+0x4a0>
  409b34:	ldur	w8, [x29, #-28]
  409b38:	mov	w9, #0xffffffb9            	// #-71
  409b3c:	cmp	w8, w9
  409b40:	b.ne	409bd0 <remount_with_timeout+0x408>  // b.any
  409b44:	mov	w8, #0x7                   	// #7
  409b48:	str	w8, [sp, #88]
  409b4c:	ldur	w8, [x29, #-28]
  409b50:	str	w8, [sp, #84]
  409b54:	str	wzr, [sp, #80]
  409b58:	ldr	w0, [sp, #80]
  409b5c:	bl	403628 <log_get_max_level_realm@plt>
  409b60:	ldr	w8, [sp, #88]
  409b64:	and	w8, w8, #0x7
  409b68:	cmp	w0, w8
  409b6c:	b.lt	409bb0 <remount_with_timeout+0x3e8>  // b.tstop
  409b70:	ldr	w8, [sp, #80]
  409b74:	ldr	w9, [sp, #88]
  409b78:	orr	w0, w9, w8, lsl #10
  409b7c:	ldr	w1, [sp, #84]
  409b80:	ldr	x10, [sp, #48]
  409b84:	ldr	x11, [x10]
  409b88:	ldr	x6, [x11]
  409b8c:	ldur	w7, [x29, #-24]
  409b90:	ldr	x2, [sp, #40]
  409b94:	mov	w3, #0x19c                 	// #412
  409b98:	ldr	x4, [sp, #32]
  409b9c:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  409ba0:	add	x5, x5, #0xc7f
  409ba4:	bl	403638 <log_internal_realm@plt>
  409ba8:	str	w0, [sp, #16]
  409bac:	b	409bc4 <remount_with_timeout+0x3fc>
  409bb0:	ldr	w0, [sp, #84]
  409bb4:	bl	403648 <abs@plt>
  409bb8:	mov	w8, wzr
  409bbc:	subs	w8, w8, w0, uxtb
  409bc0:	str	w8, [sp, #16]
  409bc4:	ldr	w8, [sp, #16]
  409bc8:	str	w8, [sp, #76]
  409bcc:	b	409c68 <remount_with_timeout+0x4a0>
  409bd0:	ldur	w8, [x29, #-28]
  409bd4:	cmp	w8, #0x0
  409bd8:	cset	w8, ge  // ge = tcont
  409bdc:	tbnz	w8, #0, 409c68 <remount_with_timeout+0x4a0>
  409be0:	mov	w8, #0x3                   	// #3
  409be4:	str	w8, [sp, #72]
  409be8:	ldur	w8, [x29, #-28]
  409bec:	str	w8, [sp, #68]
  409bf0:	str	wzr, [sp, #64]
  409bf4:	ldr	w0, [sp, #64]
  409bf8:	bl	403628 <log_get_max_level_realm@plt>
  409bfc:	ldr	w8, [sp, #72]
  409c00:	and	w8, w8, #0x7
  409c04:	cmp	w0, w8
  409c08:	b.lt	409c4c <remount_with_timeout+0x484>  // b.tstop
  409c0c:	ldr	w8, [sp, #64]
  409c10:	ldr	w9, [sp, #72]
  409c14:	orr	w0, w9, w8, lsl #10
  409c18:	ldr	w1, [sp, #68]
  409c1c:	ldr	x10, [sp, #48]
  409c20:	ldr	x11, [x10]
  409c24:	ldr	x6, [x11]
  409c28:	ldur	w7, [x29, #-24]
  409c2c:	ldr	x2, [sp, #40]
  409c30:	mov	w3, #0x19e                 	// #414
  409c34:	ldr	x4, [sp, #32]
  409c38:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  409c3c:	add	x5, x5, #0xccf
  409c40:	bl	403638 <log_internal_realm@plt>
  409c44:	str	w0, [sp, #12]
  409c48:	b	409c60 <remount_with_timeout+0x498>
  409c4c:	ldr	w0, [sp, #68]
  409c50:	bl	403648 <abs@plt>
  409c54:	mov	w8, wzr
  409c58:	subs	w8, w8, w0, uxtb
  409c5c:	str	w8, [sp, #12]
  409c60:	ldr	w8, [sp, #12]
  409c64:	str	w8, [sp, #60]
  409c68:	ldur	w8, [x29, #-28]
  409c6c:	stur	w8, [x29, #-4]
  409c70:	mov	w8, #0x1                   	// #1
  409c74:	str	w8, [sp, #140]
  409c78:	sub	x0, x29, #0xa0
  409c7c:	bl	40a19c <block_signals_reset>
  409c80:	ldur	w0, [x29, #-4]
  409c84:	ldr	x28, [sp, #448]
  409c88:	ldp	x29, x30, [sp, #432]
  409c8c:	add	sp, sp, #0x1d0
  409c90:	ret

0000000000409c94 <nonunmountable_path>:
  409c94:	sub	sp, sp, #0x20
  409c98:	stp	x29, x30, [sp, #16]
  409c9c:	add	x29, sp, #0x10
  409ca0:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  409ca4:	add	x1, x1, #0xd1b
  409ca8:	str	x0, [sp, #8]
  409cac:	ldr	x0, [sp, #8]
  409cb0:	bl	403c18 <path_equal@plt>
  409cb4:	mov	w8, #0x1                   	// #1
  409cb8:	str	w8, [sp, #4]
  409cbc:	tbnz	w0, #0, 409cdc <nonunmountable_path+0x48>
  409cc0:	ldr	x0, [sp, #8]
  409cc4:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  409cc8:	add	x1, x1, #0x726
  409ccc:	bl	403c28 <path_startswith@plt>
  409cd0:	cmp	x0, #0x0
  409cd4:	cset	w8, ne  // ne = any
  409cd8:	str	w8, [sp, #4]
  409cdc:	ldr	w8, [sp, #4]
  409ce0:	and	w0, w8, #0x1
  409ce4:	ldp	x29, x30, [sp, #16]
  409ce8:	add	sp, sp, #0x20
  409cec:	ret

0000000000409cf0 <umount_with_timeout>:
  409cf0:	sub	sp, sp, #0x1d0
  409cf4:	stp	x29, x30, [sp, #432]
  409cf8:	str	x28, [sp, #448]
  409cfc:	add	x29, sp, #0x1b0
  409d00:	sub	x8, x29, #0x10
  409d04:	adrp	x9, 40e000 <parse_argv.options+0x4a8>
  409d08:	add	x9, x9, #0x7c3
  409d0c:	add	x9, x9, #0x3
  409d10:	adrp	x10, 40e000 <parse_argv.options+0x4a8>
  409d14:	add	x10, x10, #0xd54
  409d18:	str	x0, [x8]
  409d1c:	stur	w1, [x29, #-20]
  409d20:	str	x8, [sp, #48]
  409d24:	str	x9, [sp, #40]
  409d28:	str	x10, [sp, #32]
  409d2c:	mov	w8, wzr
  409d30:	mov	w0, w8
  409d34:	add	x1, sp, #0x90
  409d38:	mov	w2, #0x11                  	// #17
  409d3c:	mov	w3, #0xffffffff            	// #-1
  409d40:	bl	403898 <sigprocmask_many@plt>
  409d44:	cmp	w0, #0x0
  409d48:	cset	w8, ge  // ge = tcont
  409d4c:	mov	w9, #0x1                   	// #1
  409d50:	eor	w8, w8, #0x1
  409d54:	eor	w8, w8, w9
  409d58:	eor	w8, w8, w9
  409d5c:	and	w8, w8, #0x1
  409d60:	mov	w1, w8
  409d64:	sxtw	x10, w1
  409d68:	cbz	x10, 409d90 <umount_with_timeout+0xa0>
  409d6c:	mov	w8, wzr
  409d70:	mov	w0, w8
  409d74:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  409d78:	add	x1, x1, #0x4eb
  409d7c:	ldr	x2, [sp, #40]
  409d80:	mov	w3, #0x1a7                 	// #423
  409d84:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  409d88:	add	x4, x4, #0xd1d
  409d8c:	bl	4037e8 <log_assert_failed_realm@plt>
  409d90:	sub	x0, x29, #0xa0
  409d94:	add	x1, sp, #0x90
  409d98:	mov	x2, #0x80                  	// #128
  409d9c:	bl	4038a8 <memcpy@plt>
  409da0:	ldr	x8, [sp, #48]
  409da4:	ldr	x9, [x8]
  409da8:	cmp	x9, #0x0
  409dac:	cset	w10, ne  // ne = any
  409db0:	mov	w11, #0x1                   	// #1
  409db4:	eor	w10, w10, #0x1
  409db8:	eor	w10, w10, w11
  409dbc:	eor	w10, w10, w11
  409dc0:	and	w10, w10, #0x1
  409dc4:	mov	w0, w10
  409dc8:	sxtw	x9, w0
  409dcc:	cbz	x9, 409df4 <umount_with_timeout+0x104>
  409dd0:	mov	w8, wzr
  409dd4:	mov	w0, w8
  409dd8:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  409ddc:	add	x1, x1, #0xa22
  409de0:	ldr	x2, [sp, #40]
  409de4:	mov	w3, #0x1a9                 	// #425
  409de8:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  409dec:	add	x4, x4, #0xd1d
  409df0:	bl	4037e8 <log_assert_failed_realm@plt>
  409df4:	adrp	x0, 40e000 <parse_argv.options+0x4a8>
  409df8:	add	x0, x0, #0xd48
  409dfc:	mov	w1, #0x33                  	// #51
  409e00:	sub	x2, x29, #0x18
  409e04:	bl	40a228 <safe_fork>
  409e08:	stur	w0, [x29, #-28]
  409e0c:	ldur	w8, [x29, #-28]
  409e10:	cmp	w8, #0x0
  409e14:	cset	w8, ge  // ge = tcont
  409e18:	tbnz	w8, #0, 409e30 <umount_with_timeout+0x140>
  409e1c:	ldur	w8, [x29, #-28]
  409e20:	stur	w8, [x29, #-4]
  409e24:	mov	w8, #0x1                   	// #1
  409e28:	str	w8, [sp, #140]
  409e2c:	b	40a180 <umount_with_timeout+0x490>
  409e30:	ldur	w8, [x29, #-28]
  409e34:	cbnz	w8, 409f80 <umount_with_timeout+0x290>
  409e38:	mov	w8, #0x6                   	// #6
  409e3c:	str	w8, [sp, #136]
  409e40:	str	wzr, [sp, #132]
  409e44:	str	wzr, [sp, #128]
  409e48:	ldr	w0, [sp, #128]
  409e4c:	bl	403628 <log_get_max_level_realm@plt>
  409e50:	ldr	w8, [sp, #136]
  409e54:	and	w8, w8, #0x7
  409e58:	cmp	w0, w8
  409e5c:	b.lt	409e9c <umount_with_timeout+0x1ac>  // b.tstop
  409e60:	ldr	w8, [sp, #128]
  409e64:	ldr	w9, [sp, #136]
  409e68:	orr	w0, w9, w8, lsl #10
  409e6c:	ldr	w1, [sp, #132]
  409e70:	ldr	x10, [sp, #48]
  409e74:	ldr	x11, [x10]
  409e78:	ldr	x6, [x11]
  409e7c:	ldr	x2, [sp, #40]
  409e80:	mov	w3, #0x1b3                 	// #435
  409e84:	ldr	x4, [sp, #32]
  409e88:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  409e8c:	add	x5, x5, #0xd68
  409e90:	bl	403638 <log_internal_realm@plt>
  409e94:	str	w0, [sp, #28]
  409e98:	b	409eb0 <umount_with_timeout+0x1c0>
  409e9c:	ldr	w0, [sp, #132]
  409ea0:	bl	403648 <abs@plt>
  409ea4:	mov	w8, wzr
  409ea8:	subs	w8, w8, w0, uxtb
  409eac:	str	w8, [sp, #28]
  409eb0:	ldr	w8, [sp, #28]
  409eb4:	str	w8, [sp, #124]
  409eb8:	ldr	x9, [sp, #48]
  409ebc:	ldr	x10, [x9]
  409ec0:	ldr	x0, [x10]
  409ec4:	mov	w1, #0x1                   	// #1
  409ec8:	bl	403c38 <umount2@plt>
  409ecc:	stur	w0, [x29, #-28]
  409ed0:	ldur	w8, [x29, #-28]
  409ed4:	cmp	w8, #0x0
  409ed8:	cset	w8, ge  // ge = tcont
  409edc:	tbnz	w8, #0, 409f68 <umount_with_timeout+0x278>
  409ee0:	ldur	w8, [x29, #-20]
  409ee4:	str	w8, [sp, #120]
  409ee8:	bl	403768 <__errno_location@plt>
  409eec:	ldr	w8, [x0]
  409ef0:	str	w8, [sp, #116]
  409ef4:	str	wzr, [sp, #112]
  409ef8:	ldr	w0, [sp, #112]
  409efc:	bl	403628 <log_get_max_level_realm@plt>
  409f00:	ldr	w8, [sp, #120]
  409f04:	and	w8, w8, #0x7
  409f08:	cmp	w0, w8
  409f0c:	b.lt	409f4c <umount_with_timeout+0x25c>  // b.tstop
  409f10:	ldr	w8, [sp, #112]
  409f14:	ldr	w9, [sp, #120]
  409f18:	orr	w0, w9, w8, lsl #10
  409f1c:	ldr	w1, [sp, #116]
  409f20:	ldr	x10, [sp, #48]
  409f24:	ldr	x11, [x10]
  409f28:	ldr	x6, [x11]
  409f2c:	ldr	x2, [sp, #40]
  409f30:	mov	w3, #0x1be                 	// #446
  409f34:	ldr	x4, [sp, #32]
  409f38:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  409f3c:	add	x5, x5, #0xd79
  409f40:	bl	403638 <log_internal_realm@plt>
  409f44:	str	w0, [sp, #24]
  409f48:	b	409f60 <umount_with_timeout+0x270>
  409f4c:	ldr	w0, [sp, #116]
  409f50:	bl	403648 <abs@plt>
  409f54:	mov	w8, wzr
  409f58:	subs	w8, w8, w0, uxtb
  409f5c:	str	w8, [sp, #24]
  409f60:	ldr	w8, [sp, #24]
  409f64:	str	w8, [sp, #108]
  409f68:	ldur	w8, [x29, #-28]
  409f6c:	mov	w9, wzr
  409f70:	mov	w10, #0x1                   	// #1
  409f74:	cmp	w8, #0x0
  409f78:	csel	w0, w10, w9, lt  // lt = tstop
  409f7c:	bl	403778 <_exit@plt>
  409f80:	ldur	w0, [x29, #-24]
  409f84:	mov	x1, #0x4a80                	// #19072
  409f88:	movk	x1, #0x55d, lsl #16
  409f8c:	bl	4038c8 <wait_for_terminate_with_timeout@plt>
  409f90:	stur	w0, [x29, #-28]
  409f94:	ldur	w8, [x29, #-28]
  409f98:	mov	w9, #0xffffff92            	// #-110
  409f9c:	cmp	w8, w9
  409fa0:	b.ne	40a03c <umount_with_timeout+0x34c>  // b.any
  409fa4:	mov	w8, #0x3                   	// #3
  409fa8:	str	w8, [sp, #104]
  409fac:	ldur	w8, [x29, #-28]
  409fb0:	str	w8, [sp, #100]
  409fb4:	str	wzr, [sp, #96]
  409fb8:	ldr	w0, [sp, #96]
  409fbc:	bl	403628 <log_get_max_level_realm@plt>
  409fc0:	ldr	w8, [sp, #104]
  409fc4:	and	w8, w8, #0x7
  409fc8:	cmp	w0, w8
  409fcc:	b.lt	40a010 <umount_with_timeout+0x320>  // b.tstop
  409fd0:	ldr	w8, [sp, #96]
  409fd4:	ldr	w9, [sp, #104]
  409fd8:	orr	w0, w9, w8, lsl #10
  409fdc:	ldr	w1, [sp, #100]
  409fe0:	ldr	x10, [sp, #48]
  409fe4:	ldr	x11, [x10]
  409fe8:	ldr	x6, [x11]
  409fec:	ldur	w7, [x29, #-24]
  409ff0:	ldr	x2, [sp, #40]
  409ff4:	mov	w3, #0x1c5                 	// #453
  409ff8:	ldr	x4, [sp, #32]
  409ffc:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  40a000:	add	x5, x5, #0xd92
  40a004:	bl	403638 <log_internal_realm@plt>
  40a008:	str	w0, [sp, #20]
  40a00c:	b	40a024 <umount_with_timeout+0x334>
  40a010:	ldr	w0, [sp, #100]
  40a014:	bl	403648 <abs@plt>
  40a018:	mov	w8, wzr
  40a01c:	subs	w8, w8, w0, uxtb
  40a020:	str	w8, [sp, #20]
  40a024:	ldr	w8, [sp, #20]
  40a028:	str	w8, [sp, #92]
  40a02c:	ldur	w0, [x29, #-24]
  40a030:	mov	w1, #0x9                   	// #9
  40a034:	bl	4038d8 <kill@plt>
  40a038:	b	40a170 <umount_with_timeout+0x480>
  40a03c:	ldur	w8, [x29, #-28]
  40a040:	mov	w9, #0xffffffb9            	// #-71
  40a044:	cmp	w8, w9
  40a048:	b.ne	40a0d8 <umount_with_timeout+0x3e8>  // b.any
  40a04c:	mov	w8, #0x7                   	// #7
  40a050:	str	w8, [sp, #88]
  40a054:	ldur	w8, [x29, #-28]
  40a058:	str	w8, [sp, #84]
  40a05c:	str	wzr, [sp, #80]
  40a060:	ldr	w0, [sp, #80]
  40a064:	bl	403628 <log_get_max_level_realm@plt>
  40a068:	ldr	w8, [sp, #88]
  40a06c:	and	w8, w8, #0x7
  40a070:	cmp	w0, w8
  40a074:	b.lt	40a0b8 <umount_with_timeout+0x3c8>  // b.tstop
  40a078:	ldr	w8, [sp, #80]
  40a07c:	ldr	w9, [sp, #88]
  40a080:	orr	w0, w9, w8, lsl #10
  40a084:	ldr	w1, [sp, #84]
  40a088:	ldr	x10, [sp, #48]
  40a08c:	ldr	x11, [x10]
  40a090:	ldr	x6, [x11]
  40a094:	ldur	w7, [x29, #-24]
  40a098:	ldr	x2, [sp, #40]
  40a09c:	mov	w3, #0x1c8                 	// #456
  40a0a0:	ldr	x4, [sp, #32]
  40a0a4:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  40a0a8:	add	x5, x5, #0xdc8
  40a0ac:	bl	403638 <log_internal_realm@plt>
  40a0b0:	str	w0, [sp, #16]
  40a0b4:	b	40a0cc <umount_with_timeout+0x3dc>
  40a0b8:	ldr	w0, [sp, #84]
  40a0bc:	bl	403648 <abs@plt>
  40a0c0:	mov	w8, wzr
  40a0c4:	subs	w8, w8, w0, uxtb
  40a0c8:	str	w8, [sp, #16]
  40a0cc:	ldr	w8, [sp, #16]
  40a0d0:	str	w8, [sp, #76]
  40a0d4:	b	40a170 <umount_with_timeout+0x480>
  40a0d8:	ldur	w8, [x29, #-28]
  40a0dc:	cmp	w8, #0x0
  40a0e0:	cset	w8, ge  // ge = tcont
  40a0e4:	tbnz	w8, #0, 40a170 <umount_with_timeout+0x480>
  40a0e8:	mov	w8, #0x3                   	// #3
  40a0ec:	str	w8, [sp, #72]
  40a0f0:	ldur	w8, [x29, #-28]
  40a0f4:	str	w8, [sp, #68]
  40a0f8:	str	wzr, [sp, #64]
  40a0fc:	ldr	w0, [sp, #64]
  40a100:	bl	403628 <log_get_max_level_realm@plt>
  40a104:	ldr	w8, [sp, #72]
  40a108:	and	w8, w8, #0x7
  40a10c:	cmp	w0, w8
  40a110:	b.lt	40a154 <umount_with_timeout+0x464>  // b.tstop
  40a114:	ldr	w8, [sp, #64]
  40a118:	ldr	w9, [sp, #72]
  40a11c:	orr	w0, w9, w8, lsl #10
  40a120:	ldr	w1, [sp, #68]
  40a124:	ldr	x10, [sp, #48]
  40a128:	ldr	x11, [x10]
  40a12c:	ldr	x6, [x11]
  40a130:	ldur	w7, [x29, #-24]
  40a134:	ldr	x2, [sp, #40]
  40a138:	mov	w3, #0x1ca                 	// #458
  40a13c:	ldr	x4, [sp, #32]
  40a140:	adrp	x5, 40e000 <parse_argv.options+0x4a8>
  40a144:	add	x5, x5, #0xe18
  40a148:	bl	403638 <log_internal_realm@plt>
  40a14c:	str	w0, [sp, #12]
  40a150:	b	40a168 <umount_with_timeout+0x478>
  40a154:	ldr	w0, [sp, #68]
  40a158:	bl	403648 <abs@plt>
  40a15c:	mov	w8, wzr
  40a160:	subs	w8, w8, w0, uxtb
  40a164:	str	w8, [sp, #12]
  40a168:	ldr	w8, [sp, #12]
  40a16c:	str	w8, [sp, #60]
  40a170:	ldur	w8, [x29, #-28]
  40a174:	stur	w8, [x29, #-4]
  40a178:	mov	w8, #0x1                   	// #1
  40a17c:	str	w8, [sp, #140]
  40a180:	sub	x0, x29, #0xa0
  40a184:	bl	40a19c <block_signals_reset>
  40a188:	ldur	w0, [x29, #-4]
  40a18c:	ldr	x28, [sp, #448]
  40a190:	ldp	x29, x30, [sp, #432]
  40a194:	add	sp, sp, #0x1d0
  40a198:	ret

000000000040a19c <block_signals_reset>:
  40a19c:	sub	sp, sp, #0x20
  40a1a0:	stp	x29, x30, [sp, #16]
  40a1a4:	add	x29, sp, #0x10
  40a1a8:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  40a1ac:	add	x8, x8, #0x632
  40a1b0:	add	x2, x8, #0x3
  40a1b4:	str	x0, [sp, #8]
  40a1b8:	str	x2, [sp]
  40a1bc:	ldr	x1, [sp, #8]
  40a1c0:	mov	w0, #0x2                   	// #2
  40a1c4:	mov	x8, xzr
  40a1c8:	mov	x2, x8
  40a1cc:	bl	403948 <sigprocmask@plt>
  40a1d0:	cmp	w0, #0x0
  40a1d4:	cset	w9, ge  // ge = tcont
  40a1d8:	mov	w10, #0x1                   	// #1
  40a1dc:	eor	w9, w9, #0x1
  40a1e0:	eor	w9, w9, w10
  40a1e4:	eor	w9, w9, w10
  40a1e8:	and	w9, w9, #0x1
  40a1ec:	mov	w1, w9
  40a1f0:	sxtw	x8, w1
  40a1f4:	cbz	x8, 40a21c <block_signals_reset+0x80>
  40a1f8:	mov	w8, wzr
  40a1fc:	mov	w0, w8
  40a200:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  40a204:	add	x1, x1, #0x60a
  40a208:	ldr	x2, [sp]
  40a20c:	mov	w3, #0x18                  	// #24
  40a210:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  40a214:	add	x4, x4, #0x64d
  40a218:	bl	4037e8 <log_assert_failed_realm@plt>
  40a21c:	ldp	x29, x30, [sp, #16]
  40a220:	add	sp, sp, #0x20
  40a224:	ret

000000000040a228 <safe_fork>:
  40a228:	sub	sp, sp, #0x30
  40a22c:	stp	x29, x30, [sp, #32]
  40a230:	add	x29, sp, #0x20
  40a234:	mov	x8, xzr
  40a238:	mov	x3, x8
  40a23c:	stur	x0, [x29, #-8]
  40a240:	stur	w1, [x29, #-12]
  40a244:	str	x2, [sp, #8]
  40a248:	ldur	x0, [x29, #-8]
  40a24c:	ldur	w9, [x29, #-12]
  40a250:	ldr	x4, [sp, #8]
  40a254:	mov	x1, x3
  40a258:	mov	x2, x8
  40a25c:	mov	w3, w9
  40a260:	bl	403908 <safe_fork_full@plt>
  40a264:	ldp	x29, x30, [sp, #32]
  40a268:	add	sp, sp, #0x30
  40a26c:	ret

000000000040a270 <sd_device_enumerator_unrefp>:
  40a270:	sub	sp, sp, #0x20
  40a274:	stp	x29, x30, [sp, #16]
  40a278:	add	x29, sp, #0x10
  40a27c:	str	x0, [sp, #8]
  40a280:	ldr	x8, [sp, #8]
  40a284:	ldr	x8, [x8]
  40a288:	cbz	x8, 40a298 <sd_device_enumerator_unrefp+0x28>
  40a28c:	ldr	x8, [sp, #8]
  40a290:	ldr	x0, [x8]
  40a294:	bl	403c48 <sd_device_enumerator_unref@plt>
  40a298:	ldp	x29, x30, [sp, #16]
  40a29c:	add	sp, sp, #0x20
  40a2a0:	ret

000000000040a2a4 <malloc_multiply>:
  40a2a4:	sub	sp, sp, #0x40
  40a2a8:	stp	x29, x30, [sp, #48]
  40a2ac:	add	x29, sp, #0x30
  40a2b0:	stur	x0, [x29, #-16]
  40a2b4:	str	x1, [sp, #24]
  40a2b8:	ldur	x0, [x29, #-16]
  40a2bc:	ldr	x1, [sp, #24]
  40a2c0:	bl	40a320 <size_multiply_overflow>
  40a2c4:	tbnz	w0, #0, 40a2cc <malloc_multiply+0x28>
  40a2c8:	b	40a2d8 <malloc_multiply+0x34>
  40a2cc:	mov	x8, xzr
  40a2d0:	stur	x8, [x29, #-8]
  40a2d4:	b	40a310 <malloc_multiply+0x6c>
  40a2d8:	ldur	x8, [x29, #-16]
  40a2dc:	ldr	x9, [sp, #24]
  40a2e0:	mul	x8, x8, x9
  40a2e4:	str	x8, [sp, #16]
  40a2e8:	cbz	x8, 40a2f8 <malloc_multiply+0x54>
  40a2ec:	ldr	x8, [sp, #16]
  40a2f0:	str	x8, [sp, #8]
  40a2f4:	b	40a300 <malloc_multiply+0x5c>
  40a2f8:	mov	x8, #0x1                   	// #1
  40a2fc:	str	x8, [sp, #8]
  40a300:	ldr	x8, [sp, #8]
  40a304:	mov	x0, x8
  40a308:	bl	403c58 <malloc@plt>
  40a30c:	stur	x0, [x29, #-8]
  40a310:	ldur	x0, [x29, #-8]
  40a314:	ldp	x29, x30, [sp, #48]
  40a318:	add	sp, sp, #0x40
  40a31c:	ret

000000000040a320 <size_multiply_overflow>:
  40a320:	sub	sp, sp, #0x20
  40a324:	str	x0, [sp, #24]
  40a328:	str	x1, [sp, #16]
  40a32c:	ldr	x8, [sp, #16]
  40a330:	mov	w9, #0x0                   	// #0
  40a334:	str	w9, [sp, #12]
  40a338:	cbz	x8, 40a358 <size_multiply_overflow+0x38>
  40a33c:	ldr	x8, [sp, #24]
  40a340:	ldr	x9, [sp, #16]
  40a344:	mov	x10, #0xffffffffffffffff    	// #-1
  40a348:	udiv	x9, x10, x9
  40a34c:	cmp	x8, x9
  40a350:	cset	w11, hi  // hi = pmore
  40a354:	str	w11, [sp, #12]
  40a358:	ldr	w8, [sp, #12]
  40a35c:	mov	w9, #0x1                   	// #1
  40a360:	eor	w8, w8, #0x1
  40a364:	eor	w8, w8, w9
  40a368:	and	w8, w8, #0x1
  40a36c:	mov	w0, w8
  40a370:	sxtw	x10, w0
  40a374:	cmp	x10, #0x0
  40a378:	cset	w8, ne  // ne = any
  40a37c:	and	w0, w8, #0x1
  40a380:	add	sp, sp, #0x20
  40a384:	ret

000000000040a388 <delete_loopback>:
  40a388:	sub	sp, sp, #0x40
  40a38c:	stp	x29, x30, [sp, #48]
  40a390:	add	x29, sp, #0x30
  40a394:	mov	w8, #0xffffffff            	// #-1
  40a398:	adrp	x9, 40e000 <parse_argv.options+0x4a8>
  40a39c:	add	x9, x9, #0x7c3
  40a3a0:	add	x2, x9, #0x3
  40a3a4:	stur	x0, [x29, #-16]
  40a3a8:	stur	w8, [x29, #-20]
  40a3ac:	str	x2, [sp, #8]
  40a3b0:	ldur	x8, [x29, #-16]
  40a3b4:	cmp	x8, #0x0
  40a3b8:	cset	w9, ne  // ne = any
  40a3bc:	mov	w10, #0x1                   	// #1
  40a3c0:	eor	w9, w9, #0x1
  40a3c4:	eor	w9, w9, w10
  40a3c8:	eor	w9, w9, w10
  40a3cc:	and	w9, w9, #0x1
  40a3d0:	mov	w0, w9
  40a3d4:	sxtw	x8, w0
  40a3d8:	cbz	x8, 40a400 <delete_loopback+0x78>
  40a3dc:	mov	w8, wzr
  40a3e0:	mov	w0, w8
  40a3e4:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  40a3e8:	add	x1, x1, #0xfb5
  40a3ec:	ldr	x2, [sp, #8]
  40a3f0:	mov	w3, #0x14a                 	// #330
  40a3f4:	adrp	x4, 40e000 <parse_argv.options+0x4a8>
  40a3f8:	add	x4, x4, #0xfbc
  40a3fc:	bl	4037e8 <log_assert_failed_realm@plt>
  40a400:	ldur	x0, [x29, #-16]
  40a404:	mov	w1, #0x80000               	// #524288
  40a408:	bl	403c68 <open64@plt>
  40a40c:	stur	w0, [x29, #-20]
  40a410:	ldur	w8, [x29, #-20]
  40a414:	cmp	w8, #0x0
  40a418:	cset	w8, ge  // ge = tcont
  40a41c:	tbnz	w8, #0, 40a464 <delete_loopback+0xdc>
  40a420:	bl	403768 <__errno_location@plt>
  40a424:	ldr	w8, [x0]
  40a428:	cmp	w8, #0x2
  40a42c:	b.ne	40a43c <delete_loopback+0xb4>  // b.any
  40a430:	mov	w8, wzr
  40a434:	str	w8, [sp, #4]
  40a438:	b	40a450 <delete_loopback+0xc8>
  40a43c:	bl	403768 <__errno_location@plt>
  40a440:	ldr	w8, [x0]
  40a444:	mov	w9, wzr
  40a448:	subs	w8, w9, w8
  40a44c:	str	w8, [sp, #4]
  40a450:	ldr	w8, [sp, #4]
  40a454:	stur	w8, [x29, #-4]
  40a458:	mov	w8, #0x1                   	// #1
  40a45c:	str	w8, [sp, #20]
  40a460:	b	40a4d8 <delete_loopback+0x150>
  40a464:	ldur	w0, [x29, #-20]
  40a468:	mov	x1, #0x4c01                	// #19457
  40a46c:	mov	w8, wzr
  40a470:	mov	w2, w8
  40a474:	bl	403c78 <ioctl@plt>
  40a478:	str	w0, [sp, #24]
  40a47c:	ldr	w8, [sp, #24]
  40a480:	cmp	w8, #0x0
  40a484:	cset	w8, lt  // lt = tstop
  40a488:	tbnz	w8, #0, 40a49c <delete_loopback+0x114>
  40a48c:	mov	w8, #0x1                   	// #1
  40a490:	stur	w8, [x29, #-4]
  40a494:	str	w8, [sp, #20]
  40a498:	b	40a4d8 <delete_loopback+0x150>
  40a49c:	bl	403768 <__errno_location@plt>
  40a4a0:	ldr	w8, [x0]
  40a4a4:	cmp	w8, #0x6
  40a4a8:	b.ne	40a4bc <delete_loopback+0x134>  // b.any
  40a4ac:	stur	wzr, [x29, #-4]
  40a4b0:	mov	w8, #0x1                   	// #1
  40a4b4:	str	w8, [sp, #20]
  40a4b8:	b	40a4d8 <delete_loopback+0x150>
  40a4bc:	bl	403768 <__errno_location@plt>
  40a4c0:	ldr	w8, [x0]
  40a4c4:	mov	w9, wzr
  40a4c8:	subs	w8, w9, w8
  40a4cc:	stur	w8, [x29, #-4]
  40a4d0:	mov	w8, #0x1                   	// #1
  40a4d4:	str	w8, [sp, #20]
  40a4d8:	sub	x0, x29, #0x14
  40a4dc:	bl	40a4f0 <closep>
  40a4e0:	ldur	w0, [x29, #-4]
  40a4e4:	ldp	x29, x30, [sp, #48]
  40a4e8:	add	sp, sp, #0x40
  40a4ec:	ret

000000000040a4f0 <closep>:
  40a4f0:	sub	sp, sp, #0x20
  40a4f4:	stp	x29, x30, [sp, #16]
  40a4f8:	add	x29, sp, #0x10
  40a4fc:	str	x0, [sp, #8]
  40a500:	ldr	x8, [sp, #8]
  40a504:	ldr	w0, [x8]
  40a508:	bl	403c88 <safe_close@plt>
  40a50c:	ldp	x29, x30, [sp, #16]
  40a510:	add	sp, sp, #0x20
  40a514:	ret

000000000040a518 <delete_dm>:
  40a518:	sub	sp, sp, #0x190
  40a51c:	stp	x29, x30, [sp, #368]
  40a520:	str	x28, [sp, #384]
  40a524:	add	x29, sp, #0x170
  40a528:	mov	x2, #0x138                 	// #312
  40a52c:	mov	w8, #0x4                   	// #4
  40a530:	mov	w9, #0x1b                  	// #27
  40a534:	mov	w10, wzr
  40a538:	mov	w11, #0x138                 	// #312
  40a53c:	mov	w12, #0xffffffff            	// #-1
  40a540:	adrp	x13, 40e000 <parse_argv.options+0x4a8>
  40a544:	add	x13, x13, #0x7c3
  40a548:	add	x13, x13, #0x3
  40a54c:	add	x14, sp, #0x28
  40a550:	stur	x0, [x29, #-16]
  40a554:	mov	x0, x14
  40a558:	mov	w1, w10
  40a55c:	str	w8, [sp, #28]
  40a560:	str	w9, [sp, #24]
  40a564:	str	w11, [sp, #20]
  40a568:	str	w12, [sp, #16]
  40a56c:	str	x13, [sp, #8]
  40a570:	bl	403bb8 <memset@plt>
  40a574:	ldr	w8, [sp, #28]
  40a578:	str	w8, [sp, #40]
  40a57c:	ldr	w9, [sp, #24]
  40a580:	str	w9, [sp, #44]
  40a584:	str	wzr, [sp, #48]
  40a588:	ldr	w10, [sp, #20]
  40a58c:	str	w10, [sp, #52]
  40a590:	ldur	x13, [x29, #-16]
  40a594:	str	x13, [sp, #80]
  40a598:	ldr	w11, [sp, #16]
  40a59c:	str	w11, [sp, #36]
  40a5a0:	ldur	x0, [x29, #-16]
  40a5a4:	bl	403bd8 <gnu_dev_major@plt>
  40a5a8:	cmp	w0, #0x0
  40a5ac:	cset	w8, ne  // ne = any
  40a5b0:	mov	w9, #0x1                   	// #1
  40a5b4:	eor	w8, w8, #0x1
  40a5b8:	eor	w8, w8, w9
  40a5bc:	eor	w8, w8, w9
  40a5c0:	and	w8, w8, #0x1
  40a5c4:	mov	w1, w8
  40a5c8:	sxtw	x10, w1
  40a5cc:	cbz	x10, 40a5f4 <delete_dm+0xdc>
  40a5d0:	mov	w8, wzr
  40a5d4:	mov	w0, w8
  40a5d8:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40a5dc:	add	x1, x1, #0x7e
  40a5e0:	ldr	x2, [sp, #8]
  40a5e4:	mov	w3, #0x169                 	// #361
  40a5e8:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40a5ec:	add	x4, x4, #0x91
  40a5f0:	bl	4037e8 <log_assert_failed_realm@plt>
  40a5f4:	adrp	x0, 40f000 <parse_argv.options+0x14a8>
  40a5f8:	add	x0, x0, #0xa6
  40a5fc:	mov	w1, #0x2                   	// #2
  40a600:	movk	w1, #0x8, lsl #16
  40a604:	bl	403c68 <open64@plt>
  40a608:	str	w0, [sp, #36]
  40a60c:	ldr	w8, [sp, #36]
  40a610:	cmp	w8, #0x0
  40a614:	cset	w8, ge  // ge = tcont
  40a618:	tbnz	w8, #0, 40a63c <delete_dm+0x124>
  40a61c:	bl	403768 <__errno_location@plt>
  40a620:	ldr	w8, [x0]
  40a624:	mov	w9, wzr
  40a628:	subs	w8, w9, w8
  40a62c:	stur	w8, [x29, #-4]
  40a630:	mov	w8, #0x1                   	// #1
  40a634:	str	w8, [sp, #32]
  40a638:	b	40a688 <delete_dm+0x170>
  40a63c:	ldr	w0, [sp, #36]
  40a640:	mov	x1, #0xfd04                	// #64772
  40a644:	movk	x1, #0xc138, lsl #16
  40a648:	add	x2, sp, #0x28
  40a64c:	bl	403c78 <ioctl@plt>
  40a650:	cmp	w0, #0x0
  40a654:	cset	w8, ge  // ge = tcont
  40a658:	tbnz	w8, #0, 40a67c <delete_dm+0x164>
  40a65c:	bl	403768 <__errno_location@plt>
  40a660:	ldr	w8, [x0]
  40a664:	mov	w9, wzr
  40a668:	subs	w8, w9, w8
  40a66c:	stur	w8, [x29, #-4]
  40a670:	mov	w8, #0x1                   	// #1
  40a674:	str	w8, [sp, #32]
  40a678:	b	40a688 <delete_dm+0x170>
  40a67c:	stur	wzr, [x29, #-4]
  40a680:	mov	w8, #0x1                   	// #1
  40a684:	str	w8, [sp, #32]
  40a688:	add	x0, sp, #0x24
  40a68c:	bl	40a4f0 <closep>
  40a690:	ldur	w0, [x29, #-4]
  40a694:	ldr	x28, [sp, #384]
  40a698:	ldp	x29, x30, [sp, #368]
  40a69c:	add	sp, sp, #0x190
  40a6a0:	ret

000000000040a6a4 <broadcast_signal>:
  40a6a4:	sub	sp, sp, #0x180
  40a6a8:	stp	x29, x30, [sp, #352]
  40a6ac:	str	x28, [sp, #368]
  40a6b0:	add	x29, sp, #0x160
  40a6b4:	mov	x8, xzr
  40a6b8:	adrp	x9, 40f000 <parse_argv.options+0x14a8>
  40a6bc:	add	x9, x9, #0xd2
  40a6c0:	add	x9, x9, #0x3
  40a6c4:	adrp	x10, 40f000 <parse_argv.options+0x14a8>
  40a6c8:	add	x10, x10, #0xe8
  40a6cc:	stur	w0, [x29, #-4]
  40a6d0:	mov	w11, #0x1                   	// #1
  40a6d4:	and	w11, w1, w11
  40a6d8:	sturb	w11, [x29, #-5]
  40a6dc:	and	w11, w2, #0x1
  40a6e0:	sturb	w11, [x29, #-6]
  40a6e4:	stur	x3, [x29, #-16]
  40a6e8:	str	x8, [sp, #64]
  40a6ec:	ldurb	w11, [x29, #-5]
  40a6f0:	str	x9, [sp, #24]
  40a6f4:	str	x10, [sp, #16]
  40a6f8:	tbnz	w11, #0, 40a700 <broadcast_signal+0x5c>
  40a6fc:	b	40a710 <broadcast_signal+0x6c>
  40a700:	mov	x8, xzr
  40a704:	mov	x0, x8
  40a708:	bl	403c98 <internal_set_new@plt>
  40a70c:	str	x0, [sp, #64]
  40a710:	sub	x0, x29, #0x98
  40a714:	bl	403ca8 <sigemptyset@plt>
  40a718:	cmp	w0, #0x0
  40a71c:	cset	w8, eq  // eq = none
  40a720:	mov	w9, #0x1                   	// #1
  40a724:	eor	w8, w8, #0x1
  40a728:	eor	w8, w8, w9
  40a72c:	eor	w8, w8, w9
  40a730:	and	w8, w8, #0x1
  40a734:	mov	w1, w8
  40a738:	sxtw	x10, w1
  40a73c:	cbz	x10, 40a760 <broadcast_signal+0xbc>
  40a740:	mov	w8, wzr
  40a744:	mov	w0, w8
  40a748:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40a74c:	add	x1, x1, #0xba
  40a750:	ldr	x2, [sp, #24]
  40a754:	mov	w3, #0x10b                 	// #267
  40a758:	ldr	x4, [sp, #16]
  40a75c:	bl	4037e8 <log_assert_failed_realm@plt>
  40a760:	sub	x0, x29, #0x98
  40a764:	mov	w1, #0x11                  	// #17
  40a768:	bl	403cb8 <sigaddset@plt>
  40a76c:	cmp	w0, #0x0
  40a770:	cset	w8, eq  // eq = none
  40a774:	mov	w9, #0x1                   	// #1
  40a778:	eor	w8, w8, #0x1
  40a77c:	eor	w8, w8, w9
  40a780:	eor	w8, w8, w9
  40a784:	and	w8, w8, #0x1
  40a788:	mov	w2, w8
  40a78c:	sxtw	x10, w2
  40a790:	cbz	x10, 40a7b4 <broadcast_signal+0x110>
  40a794:	mov	w8, wzr
  40a798:	mov	w0, w8
  40a79c:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40a7a0:	add	x1, x1, #0x118
  40a7a4:	ldr	x2, [sp, #24]
  40a7a8:	mov	w3, #0x10c                 	// #268
  40a7ac:	ldr	x4, [sp, #16]
  40a7b0:	bl	4037e8 <log_assert_failed_realm@plt>
  40a7b4:	mov	w8, wzr
  40a7b8:	mov	w0, w8
  40a7bc:	sub	x1, x29, #0x98
  40a7c0:	add	x2, sp, #0x48
  40a7c4:	bl	403948 <sigprocmask@plt>
  40a7c8:	cmp	w0, #0x0
  40a7cc:	cset	w8, eq  // eq = none
  40a7d0:	mov	w9, #0x1                   	// #1
  40a7d4:	eor	w8, w8, #0x1
  40a7d8:	eor	w8, w8, w9
  40a7dc:	eor	w8, w8, w9
  40a7e0:	and	w8, w8, #0x1
  40a7e4:	mov	w1, w8
  40a7e8:	sxtw	x10, w1
  40a7ec:	cbz	x10, 40a810 <broadcast_signal+0x16c>
  40a7f0:	mov	w8, wzr
  40a7f4:	mov	w0, w8
  40a7f8:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40a7fc:	add	x1, x1, #0x137
  40a800:	ldr	x2, [sp, #24]
  40a804:	mov	w3, #0x10d                 	// #269
  40a808:	ldr	x4, [sp, #16]
  40a80c:	bl	4037e8 <log_assert_failed_realm@plt>
  40a810:	mov	w0, #0xffffffff            	// #-1
  40a814:	mov	w1, #0x13                  	// #19
  40a818:	bl	4038d8 <kill@plt>
  40a81c:	cmp	w0, #0x0
  40a820:	cset	w8, ge  // ge = tcont
  40a824:	tbnz	w8, #0, 40a8b8 <broadcast_signal+0x214>
  40a828:	bl	403768 <__errno_location@plt>
  40a82c:	ldr	w8, [x0]
  40a830:	cmp	w8, #0x3
  40a834:	b.eq	40a8b8 <broadcast_signal+0x214>  // b.none
  40a838:	mov	w8, #0x4                   	// #4
  40a83c:	str	w8, [sp, #60]
  40a840:	bl	403768 <__errno_location@plt>
  40a844:	ldr	w8, [x0]
  40a848:	str	w8, [sp, #56]
  40a84c:	str	wzr, [sp, #52]
  40a850:	ldr	w0, [sp, #52]
  40a854:	bl	403628 <log_get_max_level_realm@plt>
  40a858:	ldr	w8, [sp, #60]
  40a85c:	and	w8, w8, #0x7
  40a860:	cmp	w0, w8
  40a864:	b.lt	40a89c <broadcast_signal+0x1f8>  // b.tstop
  40a868:	ldr	w8, [sp, #52]
  40a86c:	ldr	w9, [sp, #60]
  40a870:	orr	w0, w9, w8, lsl #10
  40a874:	ldr	w1, [sp, #56]
  40a878:	ldr	x2, [sp, #24]
  40a87c:	mov	w3, #0x110                 	// #272
  40a880:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40a884:	add	x4, x4, #0x164
  40a888:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40a88c:	add	x5, x5, #0x175
  40a890:	bl	403638 <log_internal_realm@plt>
  40a894:	str	w0, [sp, #12]
  40a898:	b	40a8b0 <broadcast_signal+0x20c>
  40a89c:	ldr	w0, [sp, #56]
  40a8a0:	bl	403648 <abs@plt>
  40a8a4:	mov	w8, wzr
  40a8a8:	subs	w8, w8, w0, uxtb
  40a8ac:	str	w8, [sp, #12]
  40a8b0:	ldr	w8, [sp, #12]
  40a8b4:	str	w8, [sp, #48]
  40a8b8:	ldur	w0, [x29, #-4]
  40a8bc:	ldr	x1, [sp, #64]
  40a8c0:	ldurb	w8, [x29, #-6]
  40a8c4:	and	w2, w8, #0x1
  40a8c8:	bl	40aa60 <killall>
  40a8cc:	stur	w0, [x29, #-20]
  40a8d0:	mov	w0, #0xffffffff            	// #-1
  40a8d4:	mov	w1, #0x12                  	// #18
  40a8d8:	bl	4038d8 <kill@plt>
  40a8dc:	cmp	w0, #0x0
  40a8e0:	cset	w8, ge  // ge = tcont
  40a8e4:	tbnz	w8, #0, 40a978 <broadcast_signal+0x2d4>
  40a8e8:	bl	403768 <__errno_location@plt>
  40a8ec:	ldr	w8, [x0]
  40a8f0:	cmp	w8, #0x3
  40a8f4:	b.eq	40a978 <broadcast_signal+0x2d4>  // b.none
  40a8f8:	mov	w8, #0x4                   	// #4
  40a8fc:	str	w8, [sp, #44]
  40a900:	bl	403768 <__errno_location@plt>
  40a904:	ldr	w8, [x0]
  40a908:	str	w8, [sp, #40]
  40a90c:	str	wzr, [sp, #36]
  40a910:	ldr	w0, [sp, #36]
  40a914:	bl	403628 <log_get_max_level_realm@plt>
  40a918:	ldr	w8, [sp, #44]
  40a91c:	and	w8, w8, #0x7
  40a920:	cmp	w0, w8
  40a924:	b.lt	40a95c <broadcast_signal+0x2b8>  // b.tstop
  40a928:	ldr	w8, [sp, #36]
  40a92c:	ldr	w9, [sp, #44]
  40a930:	orr	w0, w9, w8, lsl #10
  40a934:	ldr	w1, [sp, #40]
  40a938:	ldr	x2, [sp, #24]
  40a93c:	mov	w3, #0x115                 	// #277
  40a940:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40a944:	add	x4, x4, #0x164
  40a948:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40a94c:	add	x5, x5, #0x192
  40a950:	bl	403638 <log_internal_realm@plt>
  40a954:	str	w0, [sp, #8]
  40a958:	b	40a970 <broadcast_signal+0x2cc>
  40a95c:	ldr	w0, [sp, #40]
  40a960:	bl	403648 <abs@plt>
  40a964:	mov	w8, wzr
  40a968:	subs	w8, w8, w0, uxtb
  40a96c:	str	w8, [sp, #8]
  40a970:	ldr	w8, [sp, #8]
  40a974:	str	w8, [sp, #32]
  40a978:	ldurb	w8, [x29, #-5]
  40a97c:	tbnz	w8, #0, 40a984 <broadcast_signal+0x2e0>
  40a980:	b	40a9a8 <broadcast_signal+0x304>
  40a984:	ldur	w8, [x29, #-20]
  40a988:	cmp	w8, #0x0
  40a98c:	cset	w8, le
  40a990:	tbnz	w8, #0, 40a9a8 <broadcast_signal+0x304>
  40a994:	ldr	x0, [sp, #64]
  40a998:	ldur	x2, [x29, #-16]
  40a99c:	sub	x1, x29, #0x98
  40a9a0:	bl	40aea4 <wait_for_children>
  40a9a4:	stur	w0, [x29, #-20]
  40a9a8:	mov	w0, #0x2                   	// #2
  40a9ac:	add	x1, sp, #0x48
  40a9b0:	mov	x8, xzr
  40a9b4:	mov	x2, x8
  40a9b8:	bl	403948 <sigprocmask@plt>
  40a9bc:	cmp	w0, #0x0
  40a9c0:	cset	w9, eq  // eq = none
  40a9c4:	mov	w10, #0x1                   	// #1
  40a9c8:	eor	w9, w9, #0x1
  40a9cc:	eor	w9, w9, w10
  40a9d0:	eor	w9, w9, w10
  40a9d4:	and	w9, w9, #0x1
  40a9d8:	mov	w1, w9
  40a9dc:	sxtw	x8, w1
  40a9e0:	cbz	x8, 40aa04 <broadcast_signal+0x360>
  40a9e4:	mov	w8, wzr
  40a9e8:	mov	w0, w8
  40a9ec:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40a9f0:	add	x1, x1, #0x1af
  40a9f4:	ldr	x2, [sp, #24]
  40a9f8:	mov	w3, #0x11a                 	// #282
  40a9fc:	ldr	x4, [sp, #16]
  40aa00:	bl	4037e8 <log_assert_failed_realm@plt>
  40aa04:	ldur	w0, [x29, #-20]
  40aa08:	add	x8, sp, #0x40
  40aa0c:	str	w0, [sp, #4]
  40aa10:	mov	x0, x8
  40aa14:	bl	40aa2c <set_freep>
  40aa18:	ldr	w0, [sp, #4]
  40aa1c:	ldr	x28, [sp, #368]
  40aa20:	ldp	x29, x30, [sp, #352]
  40aa24:	add	sp, sp, #0x180
  40aa28:	ret

000000000040aa2c <set_freep>:
  40aa2c:	sub	sp, sp, #0x20
  40aa30:	stp	x29, x30, [sp, #16]
  40aa34:	add	x29, sp, #0x10
  40aa38:	str	x0, [sp, #8]
  40aa3c:	ldr	x8, [sp, #8]
  40aa40:	ldr	x8, [x8]
  40aa44:	cbz	x8, 40aa54 <set_freep+0x28>
  40aa48:	ldr	x8, [sp, #8]
  40aa4c:	ldr	x0, [x8]
  40aa50:	bl	40b364 <set_free>
  40aa54:	ldp	x29, x30, [sp, #16]
  40aa58:	add	sp, sp, #0x20
  40aa5c:	ret

000000000040aa60 <killall>:
  40aa60:	sub	sp, sp, #0xe0
  40aa64:	stp	x29, x30, [sp, #208]
  40aa68:	add	x29, sp, #0xd0
  40aa6c:	mov	x8, xzr
  40aa70:	adrp	x9, 40e000 <parse_argv.options+0x4a8>
  40aa74:	add	x9, x9, #0x8b1
  40aa78:	adrp	x10, 40f000 <parse_argv.options+0x14a8>
  40aa7c:	add	x10, x10, #0xd2
  40aa80:	add	x10, x10, #0x3
  40aa84:	adrp	x11, 40f000 <parse_argv.options+0x14a8>
  40aa88:	add	x11, x11, #0x1dd
  40aa8c:	mov	w12, #0x1                   	// #1
  40aa90:	stur	w0, [x29, #-8]
  40aa94:	stur	x1, [x29, #-16]
  40aa98:	and	w12, w2, w12
  40aa9c:	sturb	w12, [x29, #-17]
  40aaa0:	stur	x8, [x29, #-32]
  40aaa4:	stur	wzr, [x29, #-44]
  40aaa8:	mov	x0, x9
  40aaac:	str	x10, [sp, #80]
  40aab0:	str	x11, [sp, #72]
  40aab4:	bl	403cc8 <opendir@plt>
  40aab8:	stur	x0, [x29, #-32]
  40aabc:	ldur	x8, [x29, #-32]
  40aac0:	cbnz	x8, 40ab54 <killall+0xf4>
  40aac4:	mov	w8, #0x4                   	// #4
  40aac8:	stur	w8, [x29, #-48]
  40aacc:	bl	403768 <__errno_location@plt>
  40aad0:	ldr	w8, [x0]
  40aad4:	stur	w8, [x29, #-52]
  40aad8:	stur	wzr, [x29, #-56]
  40aadc:	ldur	w0, [x29, #-56]
  40aae0:	bl	403628 <log_get_max_level_realm@plt>
  40aae4:	ldur	w8, [x29, #-48]
  40aae8:	and	w8, w8, #0x7
  40aaec:	cmp	w0, w8
  40aaf0:	b.lt	40ab24 <killall+0xc4>  // b.tstop
  40aaf4:	ldur	w8, [x29, #-56]
  40aaf8:	ldur	w9, [x29, #-48]
  40aafc:	orr	w0, w9, w8, lsl #10
  40ab00:	ldur	w1, [x29, #-52]
  40ab04:	ldr	x2, [sp, #80]
  40ab08:	mov	w3, #0xc9                  	// #201
  40ab0c:	ldr	x4, [sp, #72]
  40ab10:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40ab14:	add	x5, x5, #0x1e5
  40ab18:	bl	403638 <log_internal_realm@plt>
  40ab1c:	str	w0, [sp, #68]
  40ab20:	b	40ab38 <killall+0xd8>
  40ab24:	ldur	w0, [x29, #-52]
  40ab28:	bl	403648 <abs@plt>
  40ab2c:	mov	w8, wzr
  40ab30:	subs	w8, w8, w0, uxtb
  40ab34:	str	w8, [sp, #68]
  40ab38:	ldr	w8, [sp, #68]
  40ab3c:	stur	w8, [x29, #-60]
  40ab40:	ldur	w8, [x29, #-60]
  40ab44:	stur	w8, [x29, #-4]
  40ab48:	mov	w8, #0x1                   	// #1
  40ab4c:	stur	w8, [x29, #-64]
  40ab50:	b	40ae8c <killall+0x42c>
  40ab54:	bl	403768 <__errno_location@plt>
  40ab58:	str	wzr, [x0]
  40ab5c:	ldur	x0, [x29, #-32]
  40ab60:	bl	403cd8 <readdir64@plt>
  40ab64:	stur	x0, [x29, #-40]
  40ab68:	ldur	x8, [x29, #-40]
  40ab6c:	cbnz	x8, 40ab8c <killall+0x12c>
  40ab70:	bl	403768 <__errno_location@plt>
  40ab74:	ldr	w8, [x0]
  40ab78:	cmp	w8, #0x0
  40ab7c:	cset	w8, le
  40ab80:	tbnz	w8, #0, 40ab88 <killall+0x128>
  40ab84:	b	40ae7c <killall+0x41c>
  40ab88:	b	40ae7c <killall+0x41c>
  40ab8c:	mov	w8, #0x0                   	// #0
  40ab90:	sturb	w8, [x29, #-73]
  40ab94:	ldur	x9, [x29, #-40]
  40ab98:	ldrb	w8, [x9, #18]
  40ab9c:	str	w8, [sp, #64]
  40aba0:	cbz	w8, 40abc0 <killall+0x160>
  40aba4:	b	40aba8 <killall+0x148>
  40aba8:	ldr	w8, [sp, #64]
  40abac:	cmp	w8, #0x4
  40abb0:	cset	w9, eq  // eq = none
  40abb4:	eor	w9, w9, #0x1
  40abb8:	tbnz	w9, #0, 40abcc <killall+0x16c>
  40abbc:	b	40abc0 <killall+0x160>
  40abc0:	mov	w8, #0x1                   	// #1
  40abc4:	sturb	w8, [x29, #-73]
  40abc8:	b	40abcc <killall+0x16c>
  40abcc:	ldurb	w8, [x29, #-73]
  40abd0:	and	w8, w8, #0x1
  40abd4:	sturb	w8, [x29, #-74]
  40abd8:	ldurb	w8, [x29, #-74]
  40abdc:	tbnz	w8, #0, 40abe4 <killall+0x184>
  40abe0:	b	40ae64 <killall+0x404>
  40abe4:	ldur	x8, [x29, #-40]
  40abe8:	add	x0, x8, #0x13
  40abec:	sub	x1, x29, #0x44
  40abf0:	bl	403ce8 <parse_pid@plt>
  40abf4:	cmp	w0, #0x0
  40abf8:	cset	w9, ge  // ge = tcont
  40abfc:	tbnz	w9, #0, 40ac04 <killall+0x1a4>
  40ac00:	b	40ae64 <killall+0x404>
  40ac04:	ldur	w0, [x29, #-68]
  40ac08:	ldur	w8, [x29, #-8]
  40ac0c:	mov	w9, #0x0                   	// #0
  40ac10:	cmp	w8, #0x9
  40ac14:	str	w0, [sp, #60]
  40ac18:	str	w9, [sp, #56]
  40ac1c:	b.ne	40ac2c <killall+0x1cc>  // b.any
  40ac20:	bl	4036d8 <in_initrd@plt>
  40ac24:	eor	w8, w0, #0x1
  40ac28:	str	w8, [sp, #56]
  40ac2c:	ldr	w8, [sp, #56]
  40ac30:	ldr	w0, [sp, #60]
  40ac34:	and	w1, w8, #0x1
  40ac38:	bl	40b3c8 <ignore_proc>
  40ac3c:	tbnz	w0, #0, 40ac44 <killall+0x1e4>
  40ac40:	b	40ac48 <killall+0x1e8>
  40ac44:	b	40ae64 <killall+0x404>
  40ac48:	ldur	w8, [x29, #-8]
  40ac4c:	cmp	w8, #0x9
  40ac50:	b.ne	40ad1c <killall+0x2bc>  // b.any
  40ac54:	sub	x1, x29, #0x58
  40ac58:	mov	x8, xzr
  40ac5c:	stur	x8, [x29, #-88]
  40ac60:	ldur	w0, [x29, #-68]
  40ac64:	bl	403cf8 <get_process_comm@plt>
  40ac68:	mov	w9, #0x5                   	// #5
  40ac6c:	stur	w9, [x29, #-92]
  40ac70:	stur	wzr, [x29, #-96]
  40ac74:	stur	wzr, [x29, #-100]
  40ac78:	ldur	w9, [x29, #-100]
  40ac7c:	mov	w0, w9
  40ac80:	bl	403628 <log_get_max_level_realm@plt>
  40ac84:	ldur	w9, [x29, #-92]
  40ac88:	and	w9, w9, #0x7
  40ac8c:	cmp	w0, w9
  40ac90:	b.lt	40acf8 <killall+0x298>  // b.tstop
  40ac94:	ldur	w8, [x29, #-100]
  40ac98:	ldur	w9, [x29, #-92]
  40ac9c:	orr	w0, w9, w8, lsl #10
  40aca0:	ldur	w1, [x29, #-96]
  40aca4:	ldur	w6, [x29, #-68]
  40aca8:	ldur	x10, [x29, #-88]
  40acac:	str	w0, [sp, #52]
  40acb0:	mov	x0, x10
  40acb4:	str	w1, [sp, #48]
  40acb8:	str	w6, [sp, #44]
  40acbc:	bl	40b780 <strna>
  40acc0:	ldr	w8, [sp, #52]
  40acc4:	str	x0, [sp, #32]
  40acc8:	mov	w0, w8
  40accc:	ldr	w1, [sp, #48]
  40acd0:	ldr	x2, [sp, #80]
  40acd4:	mov	w3, #0xdc                  	// #220
  40acd8:	ldr	x4, [sp, #72]
  40acdc:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40ace0:	add	x5, x5, #0x1ff
  40ace4:	ldr	w6, [sp, #44]
  40ace8:	ldr	x7, [sp, #32]
  40acec:	bl	403638 <log_internal_realm@plt>
  40acf0:	str	w0, [sp, #28]
  40acf4:	b	40ad0c <killall+0x2ac>
  40acf8:	ldur	w0, [x29, #-96]
  40acfc:	bl	403648 <abs@plt>
  40ad00:	mov	w8, wzr
  40ad04:	subs	w8, w8, w0, uxtb
  40ad08:	str	w8, [sp, #28]
  40ad0c:	ldr	w8, [sp, #28]
  40ad10:	str	w8, [sp, #104]
  40ad14:	sub	x0, x29, #0x58
  40ad18:	bl	40b758 <freep>
  40ad1c:	ldur	w0, [x29, #-68]
  40ad20:	ldur	w1, [x29, #-8]
  40ad24:	bl	4038d8 <kill@plt>
  40ad28:	cmp	w0, #0x0
  40ad2c:	cset	w8, lt  // lt = tstop
  40ad30:	tbnz	w8, #0, 40ada0 <killall+0x340>
  40ad34:	ldur	w8, [x29, #-44]
  40ad38:	add	w8, w8, #0x1
  40ad3c:	stur	w8, [x29, #-44]
  40ad40:	ldur	x9, [x29, #-16]
  40ad44:	cbz	x9, 40ad9c <killall+0x33c>
  40ad48:	ldur	x0, [x29, #-16]
  40ad4c:	ldur	w8, [x29, #-68]
  40ad50:	str	x0, [sp, #16]
  40ad54:	mov	w0, w8
  40ad58:	bl	40b7bc <PID_TO_PTR>
  40ad5c:	ldr	x9, [sp, #16]
  40ad60:	str	x0, [sp, #8]
  40ad64:	mov	x0, x9
  40ad68:	ldr	x1, [sp, #8]
  40ad6c:	bl	403d08 <set_put@plt>
  40ad70:	stur	w0, [x29, #-72]
  40ad74:	ldur	w8, [x29, #-72]
  40ad78:	cmp	w8, #0x0
  40ad7c:	cset	w8, ge  // ge = tcont
  40ad80:	tbnz	w8, #0, 40ad9c <killall+0x33c>
  40ad84:	mov	w8, wzr
  40ad88:	mov	w0, w8
  40ad8c:	ldr	x1, [sp, #80]
  40ad90:	mov	w2, #0xe4                  	// #228
  40ad94:	ldr	x3, [sp, #72]
  40ad98:	bl	4039f8 <log_oom_internal@plt>
  40ad9c:	b	40ae30 <killall+0x3d0>
  40ada0:	bl	403768 <__errno_location@plt>
  40ada4:	ldr	w8, [x0]
  40ada8:	cmp	w8, #0x2
  40adac:	b.eq	40ae30 <killall+0x3d0>  // b.none
  40adb0:	mov	w8, #0x4                   	// #4
  40adb4:	str	w8, [sp, #100]
  40adb8:	bl	403768 <__errno_location@plt>
  40adbc:	ldr	w8, [x0]
  40adc0:	str	w8, [sp, #96]
  40adc4:	str	wzr, [sp, #92]
  40adc8:	ldr	w0, [sp, #92]
  40adcc:	bl	403628 <log_get_max_level_realm@plt>
  40add0:	ldr	w8, [sp, #100]
  40add4:	and	w8, w8, #0x7
  40add8:	cmp	w0, w8
  40addc:	b.lt	40ae14 <killall+0x3b4>  // b.tstop
  40ade0:	ldr	w8, [sp, #92]
  40ade4:	ldr	w9, [sp, #100]
  40ade8:	orr	w0, w9, w8, lsl #10
  40adec:	ldr	w1, [sp, #96]
  40adf0:	ldur	w6, [x29, #-68]
  40adf4:	ldr	x2, [sp, #80]
  40adf8:	mov	w3, #0xe7                  	// #231
  40adfc:	ldr	x4, [sp, #72]
  40ae00:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40ae04:	add	x5, x5, #0x21f
  40ae08:	bl	403638 <log_internal_realm@plt>
  40ae0c:	str	w0, [sp, #4]
  40ae10:	b	40ae28 <killall+0x3c8>
  40ae14:	ldr	w0, [sp, #96]
  40ae18:	bl	403648 <abs@plt>
  40ae1c:	mov	w8, wzr
  40ae20:	subs	w8, w8, w0, uxtb
  40ae24:	str	w8, [sp, #4]
  40ae28:	ldr	w8, [sp, #4]
  40ae2c:	str	w8, [sp, #88]
  40ae30:	ldurb	w8, [x29, #-17]
  40ae34:	tbnz	w8, #0, 40ae3c <killall+0x3dc>
  40ae38:	b	40ae64 <killall+0x404>
  40ae3c:	ldur	w0, [x29, #-68]
  40ae40:	mov	x8, xzr
  40ae44:	mov	x1, x8
  40ae48:	bl	403d18 <get_ctty_devnr@plt>
  40ae4c:	cmp	w0, #0x0
  40ae50:	cset	w9, lt  // lt = tstop
  40ae54:	tbnz	w9, #0, 40ae64 <killall+0x404>
  40ae58:	ldur	w0, [x29, #-68]
  40ae5c:	mov	w1, #0x1                   	// #1
  40ae60:	bl	4038d8 <kill@plt>
  40ae64:	bl	403768 <__errno_location@plt>
  40ae68:	str	wzr, [x0]
  40ae6c:	ldur	x0, [x29, #-32]
  40ae70:	bl	403cd8 <readdir64@plt>
  40ae74:	stur	x0, [x29, #-40]
  40ae78:	b	40ab68 <killall+0x108>
  40ae7c:	ldur	w8, [x29, #-44]
  40ae80:	stur	w8, [x29, #-4]
  40ae84:	mov	w8, #0x1                   	// #1
  40ae88:	stur	w8, [x29, #-64]
  40ae8c:	sub	x0, x29, #0x20
  40ae90:	bl	40b394 <closedirp>
  40ae94:	ldur	w0, [x29, #-4]
  40ae98:	ldp	x29, x30, [sp, #208]
  40ae9c:	add	sp, sp, #0xe0
  40aea0:	ret

000000000040aea4 <wait_for_children>:
  40aea4:	sub	sp, sp, #0x130
  40aea8:	stp	x29, x30, [sp, #272]
  40aeac:	str	x28, [sp, #288]
  40aeb0:	add	x29, sp, #0x110
  40aeb4:	adrp	x8, 40f000 <parse_argv.options+0x14a8>
  40aeb8:	add	x8, x8, #0xd2
  40aebc:	add	x8, x8, #0x3
  40aec0:	adrp	x9, 40f000 <parse_argv.options+0x14a8>
  40aec4:	add	x9, x9, #0x3f8
  40aec8:	stur	x0, [x29, #-16]
  40aecc:	stur	x1, [x29, #-24]
  40aed0:	stur	x2, [x29, #-32]
  40aed4:	str	x8, [sp, #56]
  40aed8:	str	x9, [sp, #48]
  40aedc:	ldur	x8, [x29, #-24]
  40aee0:	cmp	x8, #0x0
  40aee4:	cset	w9, ne  // ne = any
  40aee8:	mov	w10, #0x1                   	// #1
  40aeec:	eor	w9, w9, #0x1
  40aef0:	eor	w9, w9, w10
  40aef4:	eor	w9, w9, w10
  40aef8:	and	w9, w9, #0x1
  40aefc:	mov	w0, w9
  40af00:	sxtw	x8, w0
  40af04:	cbz	x8, 40af2c <wait_for_children+0x88>
  40af08:	mov	w8, wzr
  40af0c:	mov	w0, w8
  40af10:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40af14:	add	x1, x1, #0x3c2
  40af18:	ldr	x2, [sp, #56]
  40af1c:	mov	w3, #0x6a                  	// #106
  40af20:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40af24:	add	x4, x4, #0x3c7
  40af28:	bl	4037e8 <log_assert_failed_realm@plt>
  40af2c:	ldur	x0, [x29, #-16]
  40af30:	bl	40b864 <set_isempty>
  40af34:	tbnz	w0, #0, 40af3c <wait_for_children+0x98>
  40af38:	b	40af44 <wait_for_children+0xa0>
  40af3c:	stur	wzr, [x29, #-4]
  40af40:	b	40b350 <wait_for_children+0x4ac>
  40af44:	mov	w0, #0x1                   	// #1
  40af48:	bl	403d28 <now@plt>
  40af4c:	stur	x0, [x29, #-56]
  40af50:	ldur	x0, [x29, #-56]
  40af54:	ldur	x1, [x29, #-32]
  40af58:	bl	40b894 <usec_add>
  40af5c:	stur	x0, [x29, #-40]
  40af60:	ldur	x0, [x29, #-56]
  40af64:	mov	x1, #0x9680                	// #38528
  40af68:	movk	x1, #0x98, lsl #16
  40af6c:	bl	40b894 <usec_add>
  40af70:	stur	x0, [x29, #-48]
  40af74:	ldur	x8, [x29, #-48]
  40af78:	ldur	x9, [x29, #-40]
  40af7c:	cmp	x8, x9
  40af80:	b.ls	40af9c <wait_for_children+0xf8>  // b.plast
  40af84:	ldur	x0, [x29, #-56]
  40af88:	ldur	x8, [x29, #-32]
  40af8c:	mov	x9, #0x2                   	// #2
  40af90:	udiv	x1, x8, x9
  40af94:	bl	40b894 <usec_add>
  40af98:	stur	x0, [x29, #-48]
  40af9c:	mov	w0, #0xffffffff            	// #-1
  40afa0:	mov	x8, xzr
  40afa4:	mov	x1, x8
  40afa8:	mov	w2, #0x1                   	// #1
  40afac:	bl	403d38 <waitpid@plt>
  40afb0:	stur	w0, [x29, #-116]
  40afb4:	ldur	w9, [x29, #-116]
  40afb8:	cbnz	w9, 40afc0 <wait_for_children+0x11c>
  40afbc:	b	40b098 <wait_for_children+0x1f4>
  40afc0:	ldur	w8, [x29, #-116]
  40afc4:	cmp	w8, #0x0
  40afc8:	cset	w8, ge  // ge = tcont
  40afcc:	tbnz	w8, #0, 40b06c <wait_for_children+0x1c8>
  40afd0:	bl	403768 <__errno_location@plt>
  40afd4:	ldr	w8, [x0]
  40afd8:	cmp	w8, #0xa
  40afdc:	b.ne	40afe4 <wait_for_children+0x140>  // b.any
  40afe0:	b	40b098 <wait_for_children+0x1f4>
  40afe4:	mov	w8, #0x3                   	// #3
  40afe8:	stur	w8, [x29, #-120]
  40afec:	bl	403768 <__errno_location@plt>
  40aff0:	ldr	w8, [x0]
  40aff4:	stur	w8, [x29, #-124]
  40aff8:	stur	wzr, [x29, #-128]
  40affc:	ldur	w0, [x29, #-128]
  40b000:	bl	403628 <log_get_max_level_realm@plt>
  40b004:	ldur	w8, [x29, #-120]
  40b008:	and	w8, w8, #0x7
  40b00c:	cmp	w0, w8
  40b010:	b.lt	40b044 <wait_for_children+0x1a0>  // b.tstop
  40b014:	ldur	w8, [x29, #-128]
  40b018:	ldur	w9, [x29, #-120]
  40b01c:	orr	w0, w9, w8, lsl #10
  40b020:	ldur	w1, [x29, #-124]
  40b024:	ldr	x2, [sp, #56]
  40b028:	mov	w3, #0x8c                  	// #140
  40b02c:	ldr	x4, [sp, #48]
  40b030:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40b034:	add	x5, x5, #0x40a
  40b038:	bl	403638 <log_internal_realm@plt>
  40b03c:	str	w0, [sp, #44]
  40b040:	b	40b058 <wait_for_children+0x1b4>
  40b044:	ldur	w0, [x29, #-124]
  40b048:	bl	403648 <abs@plt>
  40b04c:	mov	w8, wzr
  40b050:	subs	w8, w8, w0, uxtb
  40b054:	str	w8, [sp, #44]
  40b058:	ldr	w8, [sp, #44]
  40b05c:	stur	w8, [x29, #-132]
  40b060:	ldur	w8, [x29, #-132]
  40b064:	stur	w8, [x29, #-4]
  40b068:	b	40b350 <wait_for_children+0x4ac>
  40b06c:	ldur	x0, [x29, #-16]
  40b070:	ldur	w8, [x29, #-116]
  40b074:	str	x0, [sp, #32]
  40b078:	mov	w0, w8
  40b07c:	bl	40b7bc <PID_TO_PTR>
  40b080:	ldr	x9, [sp, #32]
  40b084:	str	x0, [sp, #24]
  40b088:	mov	x0, x9
  40b08c:	ldr	x1, [sp, #24]
  40b090:	bl	40b8f0 <set_remove>
  40b094:	b	40af9c <wait_for_children+0xf8>
  40b098:	add	x8, sp, #0x78
  40b09c:	mov	w9, #0xfffffffe            	// #-2
  40b0a0:	str	w9, [sp, #120]
  40b0a4:	mov	x10, xzr
  40b0a8:	str	x10, [x8, #8]
  40b0ac:	ldur	q0, [sp, #120]
  40b0b0:	stur	q0, [x29, #-112]
  40b0b4:	ldur	x0, [x29, #-16]
  40b0b8:	sub	x1, x29, #0x70
  40b0bc:	sub	x2, x29, #0x58
  40b0c0:	bl	403d48 <set_iterate@plt>
  40b0c4:	tbnz	w0, #0, 40b0cc <wait_for_children+0x228>
  40b0c8:	b	40b10c <wait_for_children+0x268>
  40b0cc:	ldur	x0, [x29, #-88]
  40b0d0:	bl	40b91c <PTR_TO_PID>
  40b0d4:	mov	w8, wzr
  40b0d8:	mov	w1, w8
  40b0dc:	bl	4038d8 <kill@plt>
  40b0e0:	cbnz	w0, 40b0e8 <wait_for_children+0x244>
  40b0e4:	b	40b0b4 <wait_for_children+0x210>
  40b0e8:	bl	403768 <__errno_location@plt>
  40b0ec:	ldr	w8, [x0]
  40b0f0:	cmp	w8, #0x3
  40b0f4:	b.eq	40b0fc <wait_for_children+0x258>  // b.none
  40b0f8:	b	40b0b4 <wait_for_children+0x210>
  40b0fc:	ldur	x0, [x29, #-16]
  40b100:	ldur	x1, [x29, #-88]
  40b104:	bl	40b8f0 <set_remove>
  40b108:	b	40b0b4 <wait_for_children+0x210>
  40b10c:	ldur	x0, [x29, #-16]
  40b110:	bl	40b864 <set_isempty>
  40b114:	tbnz	w0, #0, 40b11c <wait_for_children+0x278>
  40b118:	b	40b124 <wait_for_children+0x280>
  40b11c:	stur	wzr, [x29, #-4]
  40b120:	b	40b350 <wait_for_children+0x4ac>
  40b124:	mov	w0, #0x1                   	// #1
  40b128:	bl	403d28 <now@plt>
  40b12c:	stur	x0, [x29, #-56]
  40b130:	ldur	x8, [x29, #-48]
  40b134:	cmp	x8, #0x0
  40b138:	cset	w9, ls  // ls = plast
  40b13c:	tbnz	w9, #0, 40b15c <wait_for_children+0x2b8>
  40b140:	ldur	x8, [x29, #-56]
  40b144:	ldur	x9, [x29, #-48]
  40b148:	cmp	x8, x9
  40b14c:	b.cc	40b15c <wait_for_children+0x2b8>  // b.lo, b.ul, b.last
  40b150:	ldur	x0, [x29, #-16]
  40b154:	bl	40b934 <log_children_no_yet_killed>
  40b158:	stur	xzr, [x29, #-48]
  40b15c:	ldur	x8, [x29, #-56]
  40b160:	ldur	x9, [x29, #-40]
  40b164:	cmp	x8, x9
  40b168:	b.cc	40b17c <wait_for_children+0x2d8>  // b.lo, b.ul, b.last
  40b16c:	ldur	x0, [x29, #-16]
  40b170:	bl	40bb04 <set_size>
  40b174:	stur	w0, [x29, #-4]
  40b178:	b	40b350 <wait_for_children+0x4ac>
  40b17c:	ldur	x8, [x29, #-48]
  40b180:	cmp	x8, #0x0
  40b184:	cset	w9, ls  // ls = plast
  40b188:	tbnz	w9, #0, 40b1e8 <wait_for_children+0x344>
  40b18c:	ldur	x8, [x29, #-40]
  40b190:	ldur	x9, [x29, #-56]
  40b194:	subs	x8, x8, x9
  40b198:	str	x8, [sp, #112]
  40b19c:	ldur	x8, [x29, #-48]
  40b1a0:	ldur	x9, [x29, #-56]
  40b1a4:	subs	x8, x8, x9
  40b1a8:	str	x8, [sp, #104]
  40b1ac:	ldr	x8, [sp, #112]
  40b1b0:	ldr	x9, [sp, #104]
  40b1b4:	cmp	x8, x9
  40b1b8:	b.cs	40b1c8 <wait_for_children+0x324>  // b.hs, b.nlast
  40b1bc:	ldr	x8, [sp, #112]
  40b1c0:	str	x8, [sp, #16]
  40b1c4:	b	40b1d0 <wait_for_children+0x32c>
  40b1c8:	ldr	x8, [sp, #104]
  40b1cc:	str	x8, [sp, #16]
  40b1d0:	ldr	x8, [sp, #16]
  40b1d4:	str	x8, [sp, #96]
  40b1d8:	ldr	x1, [sp, #96]
  40b1dc:	sub	x0, x29, #0x48
  40b1e0:	bl	403d58 <timespec_store@plt>
  40b1e4:	b	40b1fc <wait_for_children+0x358>
  40b1e8:	ldur	x8, [x29, #-40]
  40b1ec:	ldur	x9, [x29, #-56]
  40b1f0:	subs	x1, x8, x9
  40b1f4:	sub	x0, x29, #0x48
  40b1f8:	bl	403d58 <timespec_store@plt>
  40b1fc:	ldur	x0, [x29, #-24]
  40b200:	mov	x8, xzr
  40b204:	mov	x1, x8
  40b208:	sub	x2, x29, #0x48
  40b20c:	bl	403d68 <sigtimedwait@plt>
  40b210:	stur	w0, [x29, #-76]
  40b214:	ldur	w9, [x29, #-76]
  40b218:	cmp	w9, #0x11
  40b21c:	b.eq	40b34c <wait_for_children+0x4a8>  // b.none
  40b220:	ldur	w8, [x29, #-76]
  40b224:	cmp	w8, #0x0
  40b228:	cset	w8, ge  // ge = tcont
  40b22c:	tbnz	w8, #0, 40b2c8 <wait_for_children+0x424>
  40b230:	bl	403768 <__errno_location@plt>
  40b234:	ldr	w8, [x0]
  40b238:	cmp	w8, #0xb
  40b23c:	b.eq	40b2c8 <wait_for_children+0x424>  // b.none
  40b240:	mov	w8, #0x3                   	// #3
  40b244:	str	w8, [sp, #92]
  40b248:	bl	403768 <__errno_location@plt>
  40b24c:	ldr	w8, [x0]
  40b250:	str	w8, [sp, #88]
  40b254:	str	wzr, [sp, #84]
  40b258:	ldr	w0, [sp, #84]
  40b25c:	bl	403628 <log_get_max_level_realm@plt>
  40b260:	ldr	w8, [sp, #92]
  40b264:	and	w8, w8, #0x7
  40b268:	cmp	w0, w8
  40b26c:	b.lt	40b2a0 <wait_for_children+0x3fc>  // b.tstop
  40b270:	ldr	w8, [sp, #84]
  40b274:	ldr	w9, [sp, #92]
  40b278:	orr	w0, w9, w8, lsl #10
  40b27c:	ldr	w1, [sp, #88]
  40b280:	ldr	x2, [sp, #56]
  40b284:	mov	w3, #0xb7                  	// #183
  40b288:	ldr	x4, [sp, #48]
  40b28c:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40b290:	add	x5, x5, #0x41f
  40b294:	bl	403638 <log_internal_realm@plt>
  40b298:	str	w0, [sp, #12]
  40b29c:	b	40b2b4 <wait_for_children+0x410>
  40b2a0:	ldr	w0, [sp, #88]
  40b2a4:	bl	403648 <abs@plt>
  40b2a8:	mov	w8, wzr
  40b2ac:	subs	w8, w8, w0, uxtb
  40b2b0:	str	w8, [sp, #12]
  40b2b4:	ldr	w8, [sp, #12]
  40b2b8:	str	w8, [sp, #80]
  40b2bc:	ldr	w8, [sp, #80]
  40b2c0:	stur	w8, [x29, #-4]
  40b2c4:	b	40b350 <wait_for_children+0x4ac>
  40b2c8:	ldur	w8, [x29, #-76]
  40b2cc:	cmp	w8, #0x0
  40b2d0:	cset	w8, lt  // lt = tstop
  40b2d4:	tbnz	w8, #0, 40b34c <wait_for_children+0x4a8>
  40b2d8:	mov	w8, #0x4                   	// #4
  40b2dc:	str	w8, [sp, #76]
  40b2e0:	str	wzr, [sp, #72]
  40b2e4:	str	wzr, [sp, #68]
  40b2e8:	ldr	w0, [sp, #68]
  40b2ec:	bl	403628 <log_get_max_level_realm@plt>
  40b2f0:	ldr	w8, [sp, #76]
  40b2f4:	and	w8, w8, #0x7
  40b2f8:	cmp	w0, w8
  40b2fc:	b.lt	40b330 <wait_for_children+0x48c>  // b.tstop
  40b300:	ldr	w8, [sp, #68]
  40b304:	ldr	w9, [sp, #76]
  40b308:	orr	w0, w9, w8, lsl #10
  40b30c:	ldr	w1, [sp, #72]
  40b310:	ldr	x2, [sp, #56]
  40b314:	mov	w3, #0xba                  	// #186
  40b318:	ldr	x4, [sp, #48]
  40b31c:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40b320:	add	x5, x5, #0x439
  40b324:	bl	403638 <log_internal_realm@plt>
  40b328:	str	w0, [sp, #8]
  40b32c:	b	40b344 <wait_for_children+0x4a0>
  40b330:	ldr	w0, [sp, #72]
  40b334:	bl	403648 <abs@plt>
  40b338:	mov	w8, wzr
  40b33c:	subs	w8, w8, w0, uxtb
  40b340:	str	w8, [sp, #8]
  40b344:	ldr	w8, [sp, #8]
  40b348:	str	w8, [sp, #64]
  40b34c:	b	40af9c <wait_for_children+0xf8>
  40b350:	ldur	w0, [x29, #-4]
  40b354:	ldr	x28, [sp, #288]
  40b358:	ldp	x29, x30, [sp, #272]
  40b35c:	add	sp, sp, #0x130
  40b360:	ret

000000000040b364 <set_free>:
  40b364:	sub	sp, sp, #0x20
  40b368:	stp	x29, x30, [sp, #16]
  40b36c:	add	x29, sp, #0x10
  40b370:	mov	x8, xzr
  40b374:	str	x0, [sp, #8]
  40b378:	ldr	x0, [sp, #8]
  40b37c:	mov	x1, x8
  40b380:	mov	x2, x8
  40b384:	bl	403d78 <internal_hashmap_free@plt>
  40b388:	ldp	x29, x30, [sp, #16]
  40b38c:	add	sp, sp, #0x20
  40b390:	ret

000000000040b394 <closedirp>:
  40b394:	sub	sp, sp, #0x20
  40b398:	stp	x29, x30, [sp, #16]
  40b39c:	add	x29, sp, #0x10
  40b3a0:	str	x0, [sp, #8]
  40b3a4:	ldr	x8, [sp, #8]
  40b3a8:	ldr	x8, [x8]
  40b3ac:	cbz	x8, 40b3bc <closedirp+0x28>
  40b3b0:	ldr	x8, [sp, #8]
  40b3b4:	ldr	x0, [x8]
  40b3b8:	bl	403d88 <closedir@plt>
  40b3bc:	ldp	x29, x30, [sp, #16]
  40b3c0:	add	sp, sp, #0x20
  40b3c4:	ret

000000000040b3c8 <ignore_proc>:
  40b3c8:	stp	x29, x30, [sp, #-16]!
  40b3cc:	mov	x29, sp
  40b3d0:	sub	sp, sp, #0xa0
  40b3d4:	mov	x8, xzr
  40b3d8:	mov	w9, #0x0                   	// #0
  40b3dc:	mov	w10, #0x1                   	// #1
  40b3e0:	adrp	x11, 40f000 <parse_argv.options+0x14a8>
  40b3e4:	add	x11, x11, #0xd2
  40b3e8:	add	x11, x11, #0x3
  40b3ec:	stur	w0, [x29, #-8]
  40b3f0:	and	w10, w1, w10
  40b3f4:	sturb	w10, [x29, #-9]
  40b3f8:	stur	x8, [x29, #-24]
  40b3fc:	sturb	w9, [x29, #-33]
  40b400:	ldur	w9, [x29, #-8]
  40b404:	cmp	w9, #0x1
  40b408:	stur	x11, [x29, #-120]
  40b40c:	b.gt	40b428 <ignore_proc+0x60>
  40b410:	mov	w8, #0x1                   	// #1
  40b414:	and	w8, w8, #0x1
  40b418:	sturb	w8, [x29, #-1]
  40b41c:	mov	w8, #0x1                   	// #1
  40b420:	stur	w8, [x29, #-48]
  40b424:	b	40b73c <ignore_proc+0x374>
  40b428:	ldur	w0, [x29, #-8]
  40b42c:	bl	403d98 <is_kernel_thread@plt>
  40b430:	stur	w0, [x29, #-44]
  40b434:	ldur	w8, [x29, #-44]
  40b438:	cbz	w8, 40b454 <ignore_proc+0x8c>
  40b43c:	mov	w8, #0x1                   	// #1
  40b440:	and	w8, w8, #0x1
  40b444:	sturb	w8, [x29, #-1]
  40b448:	mov	w8, #0x1                   	// #1
  40b44c:	stur	w8, [x29, #-48]
  40b450:	b	40b73c <ignore_proc+0x374>
  40b454:	ldur	w0, [x29, #-8]
  40b458:	sub	x1, x29, #0x28
  40b45c:	bl	403da8 <get_process_uid@plt>
  40b460:	stur	w0, [x29, #-44]
  40b464:	ldur	w8, [x29, #-44]
  40b468:	cmp	w8, #0x0
  40b46c:	cset	w8, ge  // ge = tcont
  40b470:	tbnz	w8, #0, 40b48c <ignore_proc+0xc4>
  40b474:	mov	w8, #0x1                   	// #1
  40b478:	and	w8, w8, #0x1
  40b47c:	sturb	w8, [x29, #-1]
  40b480:	mov	w8, #0x1                   	// #1
  40b484:	stur	w8, [x29, #-48]
  40b488:	b	40b73c <ignore_proc+0x374>
  40b48c:	ldur	w8, [x29, #-40]
  40b490:	cbz	w8, 40b4ac <ignore_proc+0xe4>
  40b494:	mov	w8, wzr
  40b498:	and	w8, w8, #0x1
  40b49c:	sturb	w8, [x29, #-1]
  40b4a0:	mov	w8, #0x1                   	// #1
  40b4a4:	stur	w8, [x29, #-48]
  40b4a8:	b	40b73c <ignore_proc+0x374>
  40b4ac:	ldur	w8, [x29, #-8]
  40b4b0:	stur	w8, [x29, #-52]
  40b4b4:	ldur	w8, [x29, #-52]
  40b4b8:	cbnz	w8, 40b4cc <ignore_proc+0x104>
  40b4bc:	adrp	x8, 40f000 <parse_argv.options+0x14a8>
  40b4c0:	add	x8, x8, #0x235
  40b4c4:	stur	x8, [x29, #-64]
  40b4c8:	b	40b5c4 <ignore_proc+0x1fc>
  40b4cc:	mov	x8, #0x1b                  	// #27
  40b4d0:	stur	x8, [x29, #-72]
  40b4d4:	ldur	x1, [x29, #-72]
  40b4d8:	mov	x0, #0x1                   	// #1
  40b4dc:	bl	40b7fc <size_multiply_overflow>
  40b4e0:	mov	w8, #0x1                   	// #1
  40b4e4:	eor	w9, w0, #0x1
  40b4e8:	eor	w9, w9, w8
  40b4ec:	eor	w9, w9, w8
  40b4f0:	eor	w8, w9, w8
  40b4f4:	and	w8, w8, #0x1
  40b4f8:	mov	w1, w8
  40b4fc:	sxtw	x10, w1
  40b500:	cbz	x10, 40b528 <ignore_proc+0x160>
  40b504:	mov	w8, wzr
  40b508:	mov	w0, w8
  40b50c:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40b510:	add	x1, x1, #0x248
  40b514:	ldur	x2, [x29, #-120]
  40b518:	mov	w3, #0x30                  	// #48
  40b51c:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40b520:	add	x4, x4, #0x273
  40b524:	bl	4037e8 <log_assert_failed_realm@plt>
  40b528:	ldur	x8, [x29, #-72]
  40b52c:	mov	x9, #0x1                   	// #1
  40b530:	mul	x8, x9, x8
  40b534:	cmp	x8, #0x400, lsl #12
  40b538:	cset	w10, ls  // ls = plast
  40b53c:	mov	w11, #0x1                   	// #1
  40b540:	eor	w10, w10, #0x1
  40b544:	eor	w10, w10, w11
  40b548:	eor	w10, w10, w11
  40b54c:	and	w10, w10, #0x1
  40b550:	mov	w0, w10
  40b554:	sxtw	x8, w0
  40b558:	cbz	x8, 40b580 <ignore_proc+0x1b8>
  40b55c:	mov	w8, wzr
  40b560:	mov	w0, w8
  40b564:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40b568:	add	x1, x1, #0x293
  40b56c:	ldur	x2, [x29, #-120]
  40b570:	mov	w3, #0x30                  	// #48
  40b574:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40b578:	add	x4, x4, #0x273
  40b57c:	bl	4037e8 <log_assert_failed_realm@plt>
  40b580:	ldur	x8, [x29, #-72]
  40b584:	mov	x9, #0x1                   	// #1
  40b588:	mul	x8, x9, x8
  40b58c:	mul	x8, x8, x9
  40b590:	add	x8, x8, #0xf
  40b594:	and	x8, x8, #0xfffffffffffffff0
  40b598:	mov	x9, sp
  40b59c:	subs	x8, x9, x8
  40b5a0:	mov	sp, x8
  40b5a4:	stur	x8, [x29, #-80]
  40b5a8:	ldur	x8, [x29, #-80]
  40b5ac:	stur	x8, [x29, #-64]
  40b5b0:	ldur	x0, [x29, #-64]
  40b5b4:	ldur	w2, [x29, #-52]
  40b5b8:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40b5bc:	add	x1, x1, #0x2b2
  40b5c0:	bl	403db8 <sprintf@plt>
  40b5c4:	ldur	x8, [x29, #-64]
  40b5c8:	stur	x8, [x29, #-88]
  40b5cc:	ldur	x8, [x29, #-88]
  40b5d0:	stur	x8, [x29, #-32]
  40b5d4:	ldur	x0, [x29, #-32]
  40b5d8:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  40b5dc:	add	x1, x1, #0x680
  40b5e0:	bl	403958 <fopen64@plt>
  40b5e4:	stur	x0, [x29, #-24]
  40b5e8:	ldur	x8, [x29, #-24]
  40b5ec:	cbnz	x8, 40b608 <ignore_proc+0x240>
  40b5f0:	mov	w8, #0x1                   	// #1
  40b5f4:	and	w8, w8, #0x1
  40b5f8:	sturb	w8, [x29, #-1]
  40b5fc:	mov	w8, #0x1                   	// #1
  40b600:	stur	w8, [x29, #-48]
  40b604:	b	40b73c <ignore_proc+0x374>
  40b608:	ldur	x3, [x29, #-24]
  40b60c:	sub	x0, x29, #0x21
  40b610:	mov	x8, #0x1                   	// #1
  40b614:	mov	x1, x8
  40b618:	mov	x2, x8
  40b61c:	bl	403dc8 <fread@plt>
  40b620:	ldurb	w9, [x29, #-33]
  40b624:	cmp	w9, #0x40
  40b628:	b.eq	40b644 <ignore_proc+0x27c>  // b.none
  40b62c:	mov	w8, wzr
  40b630:	and	w8, w8, #0x1
  40b634:	sturb	w8, [x29, #-1]
  40b638:	mov	w8, #0x1                   	// #1
  40b63c:	stur	w8, [x29, #-48]
  40b640:	b	40b73c <ignore_proc+0x374>
  40b644:	ldurb	w8, [x29, #-9]
  40b648:	tbnz	w8, #0, 40b650 <ignore_proc+0x288>
  40b64c:	b	40b728 <ignore_proc+0x360>
  40b650:	ldur	w0, [x29, #-8]
  40b654:	bl	403dd8 <pid_from_same_root_fs@plt>
  40b658:	cbnz	w0, 40b728 <ignore_proc+0x360>
  40b65c:	sub	x1, x29, #0x60
  40b660:	mov	x8, xzr
  40b664:	stur	x8, [x29, #-96]
  40b668:	ldur	w0, [x29, #-8]
  40b66c:	bl	403cf8 <get_process_comm@plt>
  40b670:	mov	w9, #0x5                   	// #5
  40b674:	stur	w9, [x29, #-100]
  40b678:	stur	wzr, [x29, #-104]
  40b67c:	stur	wzr, [x29, #-108]
  40b680:	ldur	w9, [x29, #-108]
  40b684:	mov	w0, w9
  40b688:	bl	403628 <log_get_max_level_realm@plt>
  40b68c:	ldur	w9, [x29, #-100]
  40b690:	and	w9, w9, #0x7
  40b694:	cmp	w0, w9
  40b698:	b.lt	40b704 <ignore_proc+0x33c>  // b.tstop
  40b69c:	ldur	w8, [x29, #-108]
  40b6a0:	ldur	w9, [x29, #-100]
  40b6a4:	orr	w0, w9, w8, lsl #10
  40b6a8:	ldur	w1, [x29, #-104]
  40b6ac:	ldur	w6, [x29, #-8]
  40b6b0:	ldur	x10, [x29, #-96]
  40b6b4:	stur	w0, [x29, #-124]
  40b6b8:	mov	x0, x10
  40b6bc:	stur	w1, [x29, #-128]
  40b6c0:	stur	w6, [x29, #-132]
  40b6c4:	bl	40b780 <strna>
  40b6c8:	ldur	w8, [x29, #-124]
  40b6cc:	stur	x0, [x29, #-144]
  40b6d0:	mov	w0, w8
  40b6d4:	ldur	w1, [x29, #-128]
  40b6d8:	ldur	x2, [x29, #-120]
  40b6dc:	mov	w3, #0x4a                  	// #74
  40b6e0:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40b6e4:	add	x4, x4, #0x2c3
  40b6e8:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40b6ec:	add	x5, x5, #0x2cf
  40b6f0:	ldur	w6, [x29, #-132]
  40b6f4:	ldur	x7, [x29, #-144]
  40b6f8:	bl	403638 <log_internal_realm@plt>
  40b6fc:	stur	w0, [x29, #-148]
  40b700:	b	40b718 <ignore_proc+0x350>
  40b704:	ldur	w0, [x29, #-104]
  40b708:	bl	403648 <abs@plt>
  40b70c:	mov	w8, wzr
  40b710:	subs	w8, w8, w0, uxtb
  40b714:	stur	w8, [x29, #-148]
  40b718:	ldur	w8, [x29, #-148]
  40b71c:	stur	w8, [x29, #-112]
  40b720:	sub	x0, x29, #0x60
  40b724:	bl	40b758 <freep>
  40b728:	mov	w8, #0x1                   	// #1
  40b72c:	and	w8, w8, #0x1
  40b730:	sturb	w8, [x29, #-1]
  40b734:	mov	w8, #0x1                   	// #1
  40b738:	stur	w8, [x29, #-48]
  40b73c:	sub	x0, x29, #0x18
  40b740:	bl	40b7d4 <fclosep>
  40b744:	ldurb	w8, [x29, #-1]
  40b748:	and	w0, w8, #0x1
  40b74c:	mov	sp, x29
  40b750:	ldp	x29, x30, [sp], #16
  40b754:	ret

000000000040b758 <freep>:
  40b758:	sub	sp, sp, #0x20
  40b75c:	stp	x29, x30, [sp, #16]
  40b760:	add	x29, sp, #0x10
  40b764:	str	x0, [sp, #8]
  40b768:	ldr	x8, [sp, #8]
  40b76c:	ldr	x0, [x8]
  40b770:	bl	4037d8 <free@plt>
  40b774:	ldp	x29, x30, [sp, #16]
  40b778:	add	sp, sp, #0x20
  40b77c:	ret

000000000040b780 <strna>:
  40b780:	sub	sp, sp, #0x20
  40b784:	str	x0, [sp, #24]
  40b788:	ldr	x8, [sp, #24]
  40b78c:	str	x8, [sp, #16]
  40b790:	cbz	x8, 40b7a0 <strna+0x20>
  40b794:	ldr	x8, [sp, #16]
  40b798:	str	x8, [sp, #8]
  40b79c:	b	40b7ac <strna+0x2c>
  40b7a0:	adrp	x8, 40f000 <parse_argv.options+0x14a8>
  40b7a4:	add	x8, x8, #0x3be
  40b7a8:	str	x8, [sp, #8]
  40b7ac:	ldr	x8, [sp, #8]
  40b7b0:	mov	x0, x8
  40b7b4:	add	sp, sp, #0x20
  40b7b8:	ret

000000000040b7bc <PID_TO_PTR>:
  40b7bc:	sub	sp, sp, #0x10
  40b7c0:	str	w0, [sp, #12]
  40b7c4:	ldrsw	x8, [sp, #12]
  40b7c8:	mov	x0, x8
  40b7cc:	add	sp, sp, #0x10
  40b7d0:	ret

000000000040b7d4 <fclosep>:
  40b7d4:	sub	sp, sp, #0x20
  40b7d8:	stp	x29, x30, [sp, #16]
  40b7dc:	add	x29, sp, #0x10
  40b7e0:	str	x0, [sp, #8]
  40b7e4:	ldr	x8, [sp, #8]
  40b7e8:	ldr	x0, [x8]
  40b7ec:	bl	403988 <safe_fclose@plt>
  40b7f0:	ldp	x29, x30, [sp, #16]
  40b7f4:	add	sp, sp, #0x20
  40b7f8:	ret

000000000040b7fc <size_multiply_overflow>:
  40b7fc:	sub	sp, sp, #0x20
  40b800:	str	x0, [sp, #24]
  40b804:	str	x1, [sp, #16]
  40b808:	ldr	x8, [sp, #16]
  40b80c:	mov	w9, #0x0                   	// #0
  40b810:	str	w9, [sp, #12]
  40b814:	cbz	x8, 40b834 <size_multiply_overflow+0x38>
  40b818:	ldr	x8, [sp, #24]
  40b81c:	ldr	x9, [sp, #16]
  40b820:	mov	x10, #0xffffffffffffffff    	// #-1
  40b824:	udiv	x9, x10, x9
  40b828:	cmp	x8, x9
  40b82c:	cset	w11, hi  // hi = pmore
  40b830:	str	w11, [sp, #12]
  40b834:	ldr	w8, [sp, #12]
  40b838:	mov	w9, #0x1                   	// #1
  40b83c:	eor	w8, w8, #0x1
  40b840:	eor	w8, w8, w9
  40b844:	and	w8, w8, #0x1
  40b848:	mov	w0, w8
  40b84c:	sxtw	x10, w0
  40b850:	cmp	x10, #0x0
  40b854:	cset	w8, ne  // ne = any
  40b858:	and	w0, w8, #0x1
  40b85c:	add	sp, sp, #0x20
  40b860:	ret

000000000040b864 <set_isempty>:
  40b864:	sub	sp, sp, #0x20
  40b868:	stp	x29, x30, [sp, #16]
  40b86c:	add	x29, sp, #0x10
  40b870:	str	x0, [sp, #8]
  40b874:	ldr	x0, [sp, #8]
  40b878:	bl	40bb04 <set_size>
  40b87c:	cmp	w0, #0x0
  40b880:	cset	w8, eq  // eq = none
  40b884:	and	w0, w8, #0x1
  40b888:	ldp	x29, x30, [sp, #16]
  40b88c:	add	sp, sp, #0x20
  40b890:	ret

000000000040b894 <usec_add>:
  40b894:	sub	sp, sp, #0x20
  40b898:	str	x0, [sp, #16]
  40b89c:	str	x1, [sp, #8]
  40b8a0:	ldr	x8, [sp, #16]
  40b8a4:	ldr	x9, [sp, #8]
  40b8a8:	add	x8, x8, x9
  40b8ac:	str	x8, [sp]
  40b8b0:	ldr	x8, [sp]
  40b8b4:	ldr	x9, [sp, #16]
  40b8b8:	cmp	x8, x9
  40b8bc:	b.cc	40b8d0 <usec_add+0x3c>  // b.lo, b.ul, b.last
  40b8c0:	ldr	x8, [sp]
  40b8c4:	ldr	x9, [sp, #8]
  40b8c8:	cmp	x8, x9
  40b8cc:	b.cs	40b8dc <usec_add+0x48>  // b.hs, b.nlast
  40b8d0:	mov	x8, #0xffffffffffffffff    	// #-1
  40b8d4:	str	x8, [sp, #24]
  40b8d8:	b	40b8e4 <usec_add+0x50>
  40b8dc:	ldr	x8, [sp]
  40b8e0:	str	x8, [sp, #24]
  40b8e4:	ldr	x0, [sp, #24]
  40b8e8:	add	sp, sp, #0x20
  40b8ec:	ret

000000000040b8f0 <set_remove>:
  40b8f0:	sub	sp, sp, #0x20
  40b8f4:	stp	x29, x30, [sp, #16]
  40b8f8:	add	x29, sp, #0x10
  40b8fc:	str	x0, [sp, #8]
  40b900:	str	x1, [sp]
  40b904:	ldr	x0, [sp, #8]
  40b908:	ldr	x1, [sp]
  40b90c:	bl	403de8 <internal_hashmap_remove@plt>
  40b910:	ldp	x29, x30, [sp, #16]
  40b914:	add	sp, sp, #0x20
  40b918:	ret

000000000040b91c <PTR_TO_PID>:
  40b91c:	sub	sp, sp, #0x10
  40b920:	str	x0, [sp, #8]
  40b924:	ldr	x8, [sp, #8]
  40b928:	mov	w0, w8
  40b92c:	add	sp, sp, #0x10
  40b930:	ret

000000000040b934 <log_children_no_yet_killed>:
  40b934:	sub	sp, sp, #0x80
  40b938:	stp	x29, x30, [sp, #112]
  40b93c:	add	x29, sp, #0x70
  40b940:	mov	x8, xzr
  40b944:	mov	w9, #0xfffffffe            	// #-2
  40b948:	adrp	x10, 40f000 <parse_argv.options+0x14a8>
  40b94c:	add	x10, x10, #0xd2
  40b950:	add	x10, x10, #0x3
  40b954:	add	x11, sp, #0x38
  40b958:	stur	x0, [x29, #-8]
  40b95c:	stur	x8, [x29, #-16]
  40b960:	str	w9, [sp, #56]
  40b964:	str	x8, [x11, #8]
  40b968:	ldur	q0, [sp, #56]
  40b96c:	stur	q0, [x29, #-32]
  40b970:	str	x10, [sp, #16]
  40b974:	ldur	x0, [x29, #-8]
  40b978:	sub	x1, x29, #0x20
  40b97c:	sub	x2, x29, #0x28
  40b980:	bl	403d48 <set_iterate@plt>
  40b984:	tbnz	w0, #0, 40b98c <log_children_no_yet_killed+0x58>
  40b988:	b	40ba50 <log_children_no_yet_killed+0x11c>
  40b98c:	add	x1, sp, #0x30
  40b990:	mov	x8, xzr
  40b994:	str	x8, [sp, #48]
  40b998:	ldur	x0, [x29, #-40]
  40b99c:	str	x1, [sp, #8]
  40b9a0:	bl	40b91c <PTR_TO_PID>
  40b9a4:	ldr	x1, [sp, #8]
  40b9a8:	bl	403cf8 <get_process_comm@plt>
  40b9ac:	cmp	w0, #0x0
  40b9b0:	cset	w9, ge  // ge = tcont
  40b9b4:	tbnz	w9, #0, 40b9dc <log_children_no_yet_killed+0xa8>
  40b9b8:	ldur	x0, [x29, #-40]
  40b9bc:	bl	40b91c <PTR_TO_PID>
  40b9c0:	add	x8, sp, #0x30
  40b9c4:	str	w0, [sp, #4]
  40b9c8:	mov	x0, x8
  40b9cc:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  40b9d0:	add	x1, x1, #0x3d4
  40b9d4:	ldr	w2, [sp, #4]
  40b9d8:	bl	403df8 <asprintf@plt>
  40b9dc:	ldr	x3, [sp, #48]
  40b9e0:	sub	x0, x29, #0x10
  40b9e4:	mov	x8, xzr
  40b9e8:	mov	x1, x8
  40b9ec:	adrp	x2, 40f000 <parse_argv.options+0x14a8>
  40b9f0:	add	x2, x2, #0x464
  40b9f4:	mov	x4, x8
  40b9f8:	bl	4039e8 <strextend_with_separator@plt>
  40b9fc:	cbnz	x0, 40ba28 <log_children_no_yet_killed+0xf4>
  40ba00:	mov	w8, wzr
  40ba04:	mov	w0, w8
  40ba08:	ldr	x1, [sp, #16]
  40ba0c:	mov	w2, #0x5c                  	// #92
  40ba10:	adrp	x3, 40f000 <parse_argv.options+0x14a8>
  40ba14:	add	x3, x3, #0x467
  40ba18:	bl	4039f8 <log_oom_internal@plt>
  40ba1c:	mov	w8, #0x1                   	// #1
  40ba20:	str	w8, [sp, #44]
  40ba24:	b	40ba2c <log_children_no_yet_killed+0xf8>
  40ba28:	str	wzr, [sp, #44]
  40ba2c:	add	x0, sp, #0x30
  40ba30:	bl	40b758 <freep>
  40ba34:	ldr	w8, [sp, #44]
  40ba38:	cmp	w8, #0x0
  40ba3c:	cset	w8, eq  // eq = none
  40ba40:	eor	w8, w8, #0x1
  40ba44:	tbnz	w8, #0, 40baf0 <log_children_no_yet_killed+0x1bc>
  40ba48:	b	40ba4c <log_children_no_yet_killed+0x118>
  40ba4c:	b	40b974 <log_children_no_yet_killed+0x40>
  40ba50:	ldur	x0, [x29, #-16]
  40ba54:	bl	40bb28 <isempty>
  40ba58:	tbnz	w0, #0, 40ba60 <log_children_no_yet_killed+0x12c>
  40ba5c:	b	40ba6c <log_children_no_yet_killed+0x138>
  40ba60:	mov	w8, #0x1                   	// #1
  40ba64:	str	w8, [sp, #44]
  40ba68:	b	40baf0 <log_children_no_yet_killed+0x1bc>
  40ba6c:	mov	w8, #0x4                   	// #4
  40ba70:	str	w8, [sp, #40]
  40ba74:	str	wzr, [sp, #36]
  40ba78:	str	wzr, [sp, #32]
  40ba7c:	ldr	w0, [sp, #32]
  40ba80:	bl	403628 <log_get_max_level_realm@plt>
  40ba84:	ldr	w8, [sp, #40]
  40ba88:	and	w8, w8, #0x7
  40ba8c:	cmp	w0, w8
  40ba90:	b.lt	40bad0 <log_children_no_yet_killed+0x19c>  // b.tstop
  40ba94:	ldr	w8, [sp, #32]
  40ba98:	ldr	w9, [sp, #40]
  40ba9c:	orr	w0, w9, w8, lsl #10
  40baa0:	ldr	w1, [sp, #36]
  40baa4:	ldur	x10, [x29, #-16]
  40baa8:	add	x6, x10, #0x2
  40baac:	ldr	x2, [sp, #16]
  40bab0:	mov	w3, #0x64                  	// #100
  40bab4:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40bab8:	add	x4, x4, #0x467
  40babc:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40bac0:	add	x5, x5, #0x482
  40bac4:	bl	403638 <log_internal_realm@plt>
  40bac8:	str	w0, [sp]
  40bacc:	b	40bae4 <log_children_no_yet_killed+0x1b0>
  40bad0:	ldr	w0, [sp, #36]
  40bad4:	bl	403648 <abs@plt>
  40bad8:	mov	w8, wzr
  40badc:	subs	w8, w8, w0, uxtb
  40bae0:	str	w8, [sp]
  40bae4:	ldr	w8, [sp]
  40bae8:	str	w8, [sp, #28]
  40baec:	str	wzr, [sp, #44]
  40baf0:	sub	x0, x29, #0x10
  40baf4:	bl	40b758 <freep>
  40baf8:	ldp	x29, x30, [sp, #112]
  40bafc:	add	sp, sp, #0x80
  40bb00:	ret

000000000040bb04 <set_size>:
  40bb04:	sub	sp, sp, #0x20
  40bb08:	stp	x29, x30, [sp, #16]
  40bb0c:	add	x29, sp, #0x10
  40bb10:	str	x0, [sp, #8]
  40bb14:	ldr	x0, [sp, #8]
  40bb18:	bl	403e08 <internal_hashmap_size@plt>
  40bb1c:	ldp	x29, x30, [sp, #16]
  40bb20:	add	sp, sp, #0x20
  40bb24:	ret

000000000040bb28 <isempty>:
  40bb28:	sub	sp, sp, #0x10
  40bb2c:	str	x0, [sp, #8]
  40bb30:	ldr	x8, [sp, #8]
  40bb34:	mov	w9, #0x1                   	// #1
  40bb38:	str	w9, [sp, #4]
  40bb3c:	cbz	x8, 40bb58 <isempty+0x30>
  40bb40:	ldr	x8, [sp, #8]
  40bb44:	ldrb	w9, [x8]
  40bb48:	cmp	w9, #0x0
  40bb4c:	cset	w9, ne  // ne = any
  40bb50:	eor	w9, w9, #0x1
  40bb54:	str	w9, [sp, #4]
  40bb58:	ldr	w8, [sp, #4]
  40bb5c:	and	w0, w8, #0x1
  40bb60:	add	sp, sp, #0x10
  40bb64:	ret

000000000040bb68 <mount_point_is_api>:
  40bb68:	sub	sp, sp, #0x30
  40bb6c:	stp	x29, x30, [sp, #32]
  40bb70:	add	x29, sp, #0x20
  40bb74:	str	x0, [sp, #16]
  40bb78:	str	wzr, [sp, #12]
  40bb7c:	ldr	w8, [sp, #12]
  40bb80:	mov	w9, w8
  40bb84:	cmp	x9, #0x14
  40bb88:	b.cs	40bbdc <mount_point_is_api+0x74>  // b.hs, b.nlast
  40bb8c:	ldr	x0, [sp, #16]
  40bb90:	ldr	w8, [sp, #12]
  40bb94:	mov	w9, w8
  40bb98:	mov	x10, #0x38                  	// #56
  40bb9c:	mul	x9, x10, x9
  40bba0:	adrp	x10, 42f000 <__FRAME_END__+0x1f368>
  40bba4:	add	x10, x10, #0x3d0
  40bba8:	add	x9, x10, x9
  40bbac:	ldr	x1, [x9, #8]
  40bbb0:	bl	403c18 <path_equal@plt>
  40bbb4:	tbnz	w0, #0, 40bbbc <mount_point_is_api+0x54>
  40bbb8:	b	40bbcc <mount_point_is_api+0x64>
  40bbbc:	mov	w8, #0x1                   	// #1
  40bbc0:	and	w8, w8, #0x1
  40bbc4:	sturb	w8, [x29, #-1]
  40bbc8:	b	40bbfc <mount_point_is_api+0x94>
  40bbcc:	ldr	w8, [sp, #12]
  40bbd0:	add	w8, w8, #0x1
  40bbd4:	str	w8, [sp, #12]
  40bbd8:	b	40bb7c <mount_point_is_api+0x14>
  40bbdc:	ldr	x0, [sp, #16]
  40bbe0:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40bbe4:	add	x1, x1, #0x49a
  40bbe8:	bl	403c28 <path_startswith@plt>
  40bbec:	cmp	x0, #0x0
  40bbf0:	cset	w8, ne  // ne = any
  40bbf4:	and	w8, w8, #0x1
  40bbf8:	sturb	w8, [x29, #-1]
  40bbfc:	ldurb	w8, [x29, #-1]
  40bc00:	and	w0, w8, #0x1
  40bc04:	ldp	x29, x30, [sp, #32]
  40bc08:	add	sp, sp, #0x30
  40bc0c:	ret

000000000040bc10 <mount_point_ignore>:
  40bc10:	sub	sp, sp, #0x30
  40bc14:	stp	x29, x30, [sp, #32]
  40bc18:	add	x29, sp, #0x20
  40bc1c:	adrp	x8, 40f000 <parse_argv.options+0x14a8>
  40bc20:	add	x8, x8, #0xb58
  40bc24:	str	x0, [sp, #16]
  40bc28:	str	x8, [sp, #8]
  40bc2c:	ldr	x8, [sp, #8]
  40bc30:	mov	w9, #0x0                   	// #0
  40bc34:	str	w9, [sp, #4]
  40bc38:	cbz	x8, 40bc50 <mount_point_ignore+0x40>
  40bc3c:	ldr	x8, [sp, #8]
  40bc40:	ldrb	w9, [x8]
  40bc44:	cmp	w9, #0x0
  40bc48:	cset	w9, ne  // ne = any
  40bc4c:	str	w9, [sp, #4]
  40bc50:	ldr	w8, [sp, #4]
  40bc54:	tbnz	w8, #0, 40bc5c <mount_point_ignore+0x4c>
  40bc58:	b	40bc9c <mount_point_ignore+0x8c>
  40bc5c:	ldr	x0, [sp, #16]
  40bc60:	ldr	x1, [sp, #8]
  40bc64:	bl	403c18 <path_equal@plt>
  40bc68:	tbnz	w0, #0, 40bc70 <mount_point_ignore+0x60>
  40bc6c:	b	40bc80 <mount_point_ignore+0x70>
  40bc70:	mov	w8, #0x1                   	// #1
  40bc74:	and	w8, w8, #0x1
  40bc78:	sturb	w8, [x29, #-1]
  40bc7c:	b	40bca8 <mount_point_ignore+0x98>
  40bc80:	ldr	x0, [sp, #8]
  40bc84:	mov	w8, wzr
  40bc88:	mov	w1, w8
  40bc8c:	bl	403e18 <strchr@plt>
  40bc90:	add	x9, x0, #0x1
  40bc94:	str	x9, [sp, #8]
  40bc98:	b	40bc2c <mount_point_ignore+0x1c>
  40bc9c:	mov	w8, wzr
  40bca0:	and	w8, w8, #0x1
  40bca4:	sturb	w8, [x29, #-1]
  40bca8:	ldurb	w8, [x29, #-1]
  40bcac:	and	w0, w8, #0x1
  40bcb0:	ldp	x29, x30, [sp, #32]
  40bcb4:	add	sp, sp, #0x30
  40bcb8:	ret

000000000040bcbc <mount_setup_early>:
  40bcbc:	stp	x29, x30, [sp, #-16]!
  40bcc0:	mov	x29, sp
  40bcc4:	mov	w0, #0x5                   	// #5
  40bcc8:	mov	w8, wzr
  40bccc:	and	w1, w8, #0x1
  40bcd0:	bl	40bcdc <mount_points_setup>
  40bcd4:	ldp	x29, x30, [sp], #16
  40bcd8:	ret

000000000040bcdc <mount_points_setup>:
  40bcdc:	sub	sp, sp, #0x30
  40bce0:	stp	x29, x30, [sp, #32]
  40bce4:	add	x29, sp, #0x20
  40bce8:	mov	w8, #0x1                   	// #1
  40bcec:	stur	w0, [x29, #-4]
  40bcf0:	and	w8, w1, w8
  40bcf4:	sturb	w8, [x29, #-5]
  40bcf8:	str	wzr, [sp, #16]
  40bcfc:	stur	wzr, [x29, #-12]
  40bd00:	ldur	w8, [x29, #-12]
  40bd04:	ldur	w9, [x29, #-4]
  40bd08:	cmp	w8, w9
  40bd0c:	b.cs	40bd6c <mount_points_setup+0x90>  // b.hs, b.nlast
  40bd10:	ldur	w8, [x29, #-12]
  40bd14:	mov	w9, w8
  40bd18:	mov	x10, #0x38                  	// #56
  40bd1c:	mul	x9, x10, x9
  40bd20:	adrp	x10, 42f000 <__FRAME_END__+0x1f368>
  40bd24:	add	x10, x10, #0x3d0
  40bd28:	add	x0, x10, x9
  40bd2c:	ldurb	w8, [x29, #-5]
  40bd30:	and	w1, w8, #0x1
  40bd34:	bl	40c33c <mount_one>
  40bd38:	str	w0, [sp, #12]
  40bd3c:	ldr	w8, [sp, #12]
  40bd40:	cbz	w8, 40bd5c <mount_points_setup+0x80>
  40bd44:	ldr	w8, [sp, #16]
  40bd48:	cmp	w8, #0x0
  40bd4c:	cset	w8, lt  // lt = tstop
  40bd50:	tbnz	w8, #0, 40bd5c <mount_points_setup+0x80>
  40bd54:	ldr	w8, [sp, #12]
  40bd58:	str	w8, [sp, #16]
  40bd5c:	ldur	w8, [x29, #-12]
  40bd60:	add	w8, w8, #0x1
  40bd64:	stur	w8, [x29, #-12]
  40bd68:	b	40bd00 <mount_points_setup+0x24>
  40bd6c:	ldr	w0, [sp, #16]
  40bd70:	ldp	x29, x30, [sp, #32]
  40bd74:	add	sp, sp, #0x30
  40bd78:	ret

000000000040bd7c <mount_cgroup_controllers>:
  40bd7c:	sub	sp, sp, #0xd0
  40bd80:	stp	x29, x30, [sp, #192]
  40bd84:	add	x29, sp, #0xc0
  40bd88:	mov	x8, xzr
  40bd8c:	adrp	x9, 40f000 <parse_argv.options+0x14a8>
  40bd90:	add	x9, x9, #0x4aa
  40bd94:	add	x9, x9, #0x3
  40bd98:	adrp	x10, 40f000 <parse_argv.options+0x14a8>
  40bd9c:	add	x10, x10, #0x4c4
  40bda0:	stur	x8, [x29, #-16]
  40bda4:	str	x9, [sp, #32]
  40bda8:	str	x10, [sp, #24]
  40bdac:	bl	403e28 <cg_is_legacy_wanted@plt>
  40bdb0:	tbnz	w0, #0, 40bdc4 <mount_cgroup_controllers+0x48>
  40bdb4:	stur	wzr, [x29, #-4]
  40bdb8:	mov	w8, #0x1                   	// #1
  40bdbc:	stur	w8, [x29, #-24]
  40bdc0:	b	40c120 <mount_cgroup_controllers+0x3a4>
  40bdc4:	sub	x0, x29, #0x10
  40bdc8:	bl	403e38 <cg_kernel_controllers@plt>
  40bdcc:	stur	w0, [x29, #-20]
  40bdd0:	ldur	w8, [x29, #-20]
  40bdd4:	cmp	w8, #0x0
  40bdd8:	cset	w8, ge  // ge = tcont
  40bddc:	tbnz	w8, #0, 40be6c <mount_cgroup_controllers+0xf0>
  40bde0:	mov	w8, #0x3                   	// #3
  40bde4:	stur	w8, [x29, #-28]
  40bde8:	ldur	w8, [x29, #-20]
  40bdec:	stur	w8, [x29, #-32]
  40bdf0:	stur	wzr, [x29, #-36]
  40bdf4:	ldur	w0, [x29, #-36]
  40bdf8:	bl	403628 <log_get_max_level_realm@plt>
  40bdfc:	ldur	w8, [x29, #-28]
  40be00:	and	w8, w8, #0x7
  40be04:	cmp	w0, w8
  40be08:	b.lt	40be3c <mount_cgroup_controllers+0xc0>  // b.tstop
  40be0c:	ldur	w8, [x29, #-36]
  40be10:	ldur	w9, [x29, #-28]
  40be14:	orr	w0, w9, w8, lsl #10
  40be18:	ldur	w1, [x29, #-32]
  40be1c:	ldr	x2, [sp, #32]
  40be20:	mov	w3, #0x129                 	// #297
  40be24:	ldr	x4, [sp, #24]
  40be28:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40be2c:	add	x5, x5, #0x4dd
  40be30:	bl	403638 <log_internal_realm@plt>
  40be34:	str	w0, [sp, #20]
  40be38:	b	40be50 <mount_cgroup_controllers+0xd4>
  40be3c:	ldur	w0, [x29, #-32]
  40be40:	bl	403648 <abs@plt>
  40be44:	mov	w8, wzr
  40be48:	subs	w8, w8, w0, uxtb
  40be4c:	str	w8, [sp, #20]
  40be50:	ldr	w8, [sp, #20]
  40be54:	stur	w8, [x29, #-40]
  40be58:	ldur	w8, [x29, #-40]
  40be5c:	stur	w8, [x29, #-4]
  40be60:	mov	w8, #0x1                   	// #1
  40be64:	stur	w8, [x29, #-24]
  40be68:	b	40c120 <mount_cgroup_controllers+0x3a4>
  40be6c:	mov	x8, xzr
  40be70:	stur	x8, [x29, #-48]
  40be74:	stur	x8, [x29, #-56]
  40be78:	stur	x8, [x29, #-64]
  40be7c:	add	x8, sp, #0x40
  40be80:	mov	x0, x8
  40be84:	mov	w9, wzr
  40be88:	mov	w1, w9
  40be8c:	mov	x2, #0x38                  	// #56
  40be90:	str	x8, [sp, #8]
  40be94:	bl	403bb8 <memset@plt>
  40be98:	adrp	x8, 40f000 <parse_argv.options+0x14a8>
  40be9c:	add	x8, x8, #0x508
  40bea0:	str	x8, [sp, #64]
  40bea4:	ldr	x10, [sp, #8]
  40bea8:	str	x8, [x10, #16]
  40beac:	mov	x8, #0xe                   	// #14
  40beb0:	str	x8, [sp, #96]
  40beb4:	mov	w9, #0x2                   	// #2
  40beb8:	str	w9, [sp, #112]
  40bebc:	ldur	x0, [x29, #-16]
  40bec0:	bl	40c194 <set_steal_first>
  40bec4:	stur	x0, [x29, #-56]
  40bec8:	ldur	x8, [x29, #-56]
  40becc:	cbnz	x8, 40bedc <mount_cgroup_controllers+0x160>
  40bed0:	mov	w8, #0x2                   	// #2
  40bed4:	stur	w8, [x29, #-24]
  40bed8:	b	40c0ac <mount_cgroup_controllers+0x330>
  40bedc:	ldur	x0, [x29, #-56]
  40bee0:	bl	40c1c8 <join_with>
  40bee4:	stur	x0, [x29, #-72]
  40bee8:	ldur	x8, [x29, #-72]
  40beec:	cbz	x8, 40bfc0 <mount_cgroup_controllers+0x244>
  40bef0:	mov	x8, xzr
  40bef4:	str	x8, [sp, #56]
  40bef8:	ldur	x0, [x29, #-16]
  40befc:	ldur	x1, [x29, #-72]
  40bf00:	bl	40c310 <set_remove>
  40bf04:	str	x0, [sp, #56]
  40bf08:	ldr	x8, [sp, #56]
  40bf0c:	cbz	x8, 40bf9c <mount_cgroup_controllers+0x220>
  40bf10:	ldur	x0, [x29, #-56]
  40bf14:	ldur	x1, [x29, #-72]
  40bf18:	bl	403658 <strcmp@plt>
  40bf1c:	cmp	w0, #0x0
  40bf20:	cset	w8, ge  // ge = tcont
  40bf24:	tbnz	w8, #0, 40bf4c <mount_cgroup_controllers+0x1d0>
  40bf28:	ldur	x0, [x29, #-56]
  40bf2c:	ldur	x2, [x29, #-72]
  40bf30:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  40bf34:	add	x1, x1, #0x8a5
  40bf38:	mov	x8, xzr
  40bf3c:	mov	x3, x8
  40bf40:	bl	403e48 <strjoin_real@plt>
  40bf44:	stur	x0, [x29, #-48]
  40bf48:	b	40bf6c <mount_cgroup_controllers+0x1f0>
  40bf4c:	ldur	x0, [x29, #-72]
  40bf50:	ldur	x2, [x29, #-56]
  40bf54:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  40bf58:	add	x1, x1, #0x8a5
  40bf5c:	mov	x8, xzr
  40bf60:	mov	x3, x8
  40bf64:	bl	403e48 <strjoin_real@plt>
  40bf68:	stur	x0, [x29, #-48]
  40bf6c:	ldur	x8, [x29, #-48]
  40bf70:	cbnz	x8, 40bf9c <mount_cgroup_controllers+0x220>
  40bf74:	mov	w8, wzr
  40bf78:	mov	w0, w8
  40bf7c:	ldr	x1, [sp, #32]
  40bf80:	mov	w2, #0x148                 	// #328
  40bf84:	ldr	x3, [sp, #24]
  40bf88:	bl	4039f8 <log_oom_internal@plt>
  40bf8c:	stur	w0, [x29, #-4]
  40bf90:	mov	w8, #0x1                   	// #1
  40bf94:	stur	w8, [x29, #-24]
  40bf98:	b	40bfa0 <mount_cgroup_controllers+0x224>
  40bf9c:	stur	wzr, [x29, #-24]
  40bfa0:	add	x0, sp, #0x38
  40bfa4:	bl	40c16c <freep>
  40bfa8:	ldur	w8, [x29, #-24]
  40bfac:	cmp	w8, #0x0
  40bfb0:	cset	w8, eq  // eq = none
  40bfb4:	eor	w8, w8, #0x1
  40bfb8:	tbnz	w8, #0, 40c0ac <mount_cgroup_controllers+0x330>
  40bfbc:	b	40bfc0 <mount_cgroup_controllers+0x244>
  40bfc0:	ldur	x8, [x29, #-48]
  40bfc4:	cbnz	x8, 40bfe8 <mount_cgroup_controllers+0x26c>
  40bfc8:	ldur	x8, [x29, #-56]
  40bfcc:	str	x8, [sp, #48]
  40bfd0:	mov	x8, xzr
  40bfd4:	stur	x8, [x29, #-56]
  40bfd8:	ldr	x8, [sp, #48]
  40bfdc:	str	x8, [sp, #40]
  40bfe0:	ldr	x8, [sp, #40]
  40bfe4:	stur	x8, [x29, #-48]
  40bfe8:	ldur	x1, [x29, #-48]
  40bfec:	adrp	x0, 40f000 <parse_argv.options+0x14a8>
  40bff0:	add	x0, x0, #0x50f
  40bff4:	mov	x8, #0xffffffffffffffff    	// #-1
  40bff8:	mov	x2, x8
  40bffc:	bl	403e58 <path_join_internal@plt>
  40c000:	stur	x0, [x29, #-64]
  40c004:	ldur	x8, [x29, #-64]
  40c008:	cbnz	x8, 40c034 <mount_cgroup_controllers+0x2b8>
  40c00c:	mov	w8, wzr
  40c010:	mov	w0, w8
  40c014:	ldr	x1, [sp, #32]
  40c018:	mov	w2, #0x152                 	// #338
  40c01c:	ldr	x3, [sp, #24]
  40c020:	bl	4039f8 <log_oom_internal@plt>
  40c024:	stur	w0, [x29, #-4]
  40c028:	mov	w8, #0x1                   	// #1
  40c02c:	stur	w8, [x29, #-24]
  40c030:	b	40c0ac <mount_cgroup_controllers+0x330>
  40c034:	ldur	x8, [x29, #-64]
  40c038:	add	x9, sp, #0x40
  40c03c:	str	x8, [x9, #8]
  40c040:	ldur	x8, [x29, #-48]
  40c044:	str	x8, [x9, #24]
  40c048:	mov	x0, x9
  40c04c:	mov	w10, #0x1                   	// #1
  40c050:	and	w1, w10, #0x1
  40c054:	bl	40c33c <mount_one>
  40c058:	stur	w0, [x29, #-20]
  40c05c:	ldur	w10, [x29, #-20]
  40c060:	cmp	w10, #0x0
  40c064:	cset	w10, ge  // ge = tcont
  40c068:	tbnz	w10, #0, 40c080 <mount_cgroup_controllers+0x304>
  40c06c:	ldur	w8, [x29, #-20]
  40c070:	stur	w8, [x29, #-4]
  40c074:	mov	w8, #0x1                   	// #1
  40c078:	stur	w8, [x29, #-24]
  40c07c:	b	40c0ac <mount_cgroup_controllers+0x330>
  40c080:	ldur	x8, [x29, #-56]
  40c084:	cbz	x8, 40c094 <mount_cgroup_controllers+0x318>
  40c088:	ldur	x0, [x29, #-48]
  40c08c:	ldur	x1, [x29, #-56]
  40c090:	bl	40c8a4 <symlink_controller>
  40c094:	ldur	x8, [x29, #-72]
  40c098:	cbz	x8, 40c0a8 <mount_cgroup_controllers+0x32c>
  40c09c:	ldur	x0, [x29, #-48]
  40c0a0:	ldur	x1, [x29, #-72]
  40c0a4:	bl	40c8a4 <symlink_controller>
  40c0a8:	stur	wzr, [x29, #-24]
  40c0ac:	sub	x0, x29, #0x40
  40c0b0:	bl	40c16c <freep>
  40c0b4:	sub	x0, x29, #0x38
  40c0b8:	bl	40c16c <freep>
  40c0bc:	sub	x0, x29, #0x30
  40c0c0:	bl	40c16c <freep>
  40c0c4:	ldur	w8, [x29, #-24]
  40c0c8:	str	w8, [sp, #4]
  40c0cc:	cbz	w8, 40c0e4 <mount_cgroup_controllers+0x368>
  40c0d0:	b	40c0d4 <mount_cgroup_controllers+0x358>
  40c0d4:	ldr	w8, [sp, #4]
  40c0d8:	cmp	w8, #0x2
  40c0dc:	b.eq	40c0e8 <mount_cgroup_controllers+0x36c>  // b.none
  40c0e0:	b	40c120 <mount_cgroup_controllers+0x3a4>
  40c0e4:	b	40be6c <mount_cgroup_controllers+0xf0>
  40c0e8:	adrp	x8, 40f000 <parse_argv.options+0x14a8>
  40c0ec:	add	x8, x8, #0x51e
  40c0f0:	mov	x0, x8
  40c0f4:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40c0f8:	add	x1, x1, #0x50f
  40c0fc:	mov	x2, x8
  40c100:	mov	x3, #0x2f                  	// #47
  40c104:	movk	x3, #0x100, lsl #16
  40c108:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40c10c:	add	x4, x4, #0x524
  40c110:	bl	4038e8 <mount@plt>
  40c114:	stur	wzr, [x29, #-4]
  40c118:	mov	w9, #0x1                   	// #1
  40c11c:	stur	w9, [x29, #-24]
  40c120:	sub	x0, x29, #0x10
  40c124:	bl	40c138 <set_free_freep>
  40c128:	ldur	w0, [x29, #-4]
  40c12c:	ldp	x29, x30, [sp, #192]
  40c130:	add	sp, sp, #0xd0
  40c134:	ret

000000000040c138 <set_free_freep>:
  40c138:	sub	sp, sp, #0x20
  40c13c:	stp	x29, x30, [sp, #16]
  40c140:	add	x29, sp, #0x10
  40c144:	str	x0, [sp, #8]
  40c148:	ldr	x8, [sp, #8]
  40c14c:	ldr	x8, [x8]
  40c150:	cbz	x8, 40c160 <set_free_freep+0x28>
  40c154:	ldr	x8, [sp, #8]
  40c158:	ldr	x0, [x8]
  40c15c:	bl	40d8c4 <set_free_free>
  40c160:	ldp	x29, x30, [sp, #16]
  40c164:	add	sp, sp, #0x20
  40c168:	ret

000000000040c16c <freep>:
  40c16c:	sub	sp, sp, #0x20
  40c170:	stp	x29, x30, [sp, #16]
  40c174:	add	x29, sp, #0x10
  40c178:	str	x0, [sp, #8]
  40c17c:	ldr	x8, [sp, #8]
  40c180:	ldr	x0, [x8]
  40c184:	bl	4037d8 <free@plt>
  40c188:	ldp	x29, x30, [sp, #16]
  40c18c:	add	sp, sp, #0x20
  40c190:	ret

000000000040c194 <set_steal_first>:
  40c194:	sub	sp, sp, #0x20
  40c198:	stp	x29, x30, [sp, #16]
  40c19c:	add	x29, sp, #0x10
  40c1a0:	mov	x8, xzr
  40c1a4:	str	x0, [sp, #8]
  40c1a8:	ldr	x0, [sp, #8]
  40c1ac:	mov	w9, #0x1                   	// #1
  40c1b0:	and	w1, w9, #0x1
  40c1b4:	mov	x2, x8
  40c1b8:	bl	403e68 <internal_hashmap_first_key_and_value@plt>
  40c1bc:	ldp	x29, x30, [sp, #16]
  40c1c0:	add	sp, sp, #0x20
  40c1c4:	ret

000000000040c1c8 <join_with>:
  40c1c8:	sub	sp, sp, #0x40
  40c1cc:	stp	x29, x30, [sp, #48]
  40c1d0:	add	x29, sp, #0x30
  40c1d4:	adrp	x8, 40f000 <parse_argv.options+0x14a8>
  40c1d8:	add	x8, x8, #0x4aa
  40c1dc:	add	x2, x8, #0x3
  40c1e0:	stur	x0, [x29, #-16]
  40c1e4:	str	x2, [sp, #8]
  40c1e8:	ldur	x8, [x29, #-16]
  40c1ec:	cmp	x8, #0x0
  40c1f0:	cset	w9, ne  // ne = any
  40c1f4:	mov	w10, #0x1                   	// #1
  40c1f8:	eor	w9, w9, #0x1
  40c1fc:	eor	w9, w9, w10
  40c200:	eor	w9, w9, w10
  40c204:	and	w9, w9, #0x1
  40c208:	mov	w0, w9
  40c20c:	sxtw	x8, w0
  40c210:	cbz	x8, 40c238 <join_with+0x70>
  40c214:	mov	w8, wzr
  40c218:	mov	w0, w8
  40c21c:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40c220:	add	x1, x1, #0x784
  40c224:	ldr	x2, [sp, #8]
  40c228:	mov	w3, #0xf5                  	// #245
  40c22c:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40c230:	add	x4, x4, #0x78f
  40c234:	bl	4037e8 <log_assert_failed_realm@plt>
  40c238:	adrp	x8, 42f000 <__FRAME_END__+0x1f368>
  40c23c:	add	x8, x8, #0x830
  40c240:	str	x8, [sp, #24]
  40c244:	ldr	x8, [sp, #24]
  40c248:	add	x8, x8, #0x8
  40c24c:	str	x8, [sp, #16]
  40c250:	ldr	x8, [sp, #24]
  40c254:	mov	w9, #0x0                   	// #0
  40c258:	str	w9, [sp, #4]
  40c25c:	cbz	x8, 40c288 <join_with+0xc0>
  40c260:	ldr	x8, [sp, #24]
  40c264:	ldr	x8, [x8]
  40c268:	mov	w9, #0x0                   	// #0
  40c26c:	str	w9, [sp, #4]
  40c270:	cbz	x8, 40c288 <join_with+0xc0>
  40c274:	ldr	x8, [sp, #16]
  40c278:	ldr	x8, [x8]
  40c27c:	cmp	x8, #0x0
  40c280:	cset	w9, ne  // ne = any
  40c284:	str	w9, [sp, #4]
  40c288:	ldr	w8, [sp, #4]
  40c28c:	tbnz	w8, #0, 40c294 <join_with+0xcc>
  40c290:	b	40c2f8 <join_with+0x130>
  40c294:	ldur	x0, [x29, #-16]
  40c298:	ldr	x8, [sp, #24]
  40c29c:	ldr	x1, [x8]
  40c2a0:	bl	403658 <strcmp@plt>
  40c2a4:	cbnz	w0, 40c2b8 <join_with+0xf0>
  40c2a8:	ldr	x8, [sp, #16]
  40c2ac:	ldr	x8, [x8]
  40c2b0:	stur	x8, [x29, #-8]
  40c2b4:	b	40c300 <join_with+0x138>
  40c2b8:	ldur	x0, [x29, #-16]
  40c2bc:	ldr	x8, [sp, #16]
  40c2c0:	ldr	x1, [x8]
  40c2c4:	bl	403658 <strcmp@plt>
  40c2c8:	cbnz	w0, 40c2dc <join_with+0x114>
  40c2cc:	ldr	x8, [sp, #24]
  40c2d0:	ldr	x8, [x8]
  40c2d4:	stur	x8, [x29, #-8]
  40c2d8:	b	40c300 <join_with+0x138>
  40c2dc:	ldr	x8, [sp, #24]
  40c2e0:	add	x8, x8, #0x10
  40c2e4:	str	x8, [sp, #24]
  40c2e8:	ldr	x8, [sp, #24]
  40c2ec:	add	x8, x8, #0x8
  40c2f0:	str	x8, [sp, #16]
  40c2f4:	b	40c250 <join_with+0x88>
  40c2f8:	mov	x8, xzr
  40c2fc:	stur	x8, [x29, #-8]
  40c300:	ldur	x0, [x29, #-8]
  40c304:	ldp	x29, x30, [sp, #48]
  40c308:	add	sp, sp, #0x40
  40c30c:	ret

000000000040c310 <set_remove>:
  40c310:	sub	sp, sp, #0x20
  40c314:	stp	x29, x30, [sp, #16]
  40c318:	add	x29, sp, #0x10
  40c31c:	str	x0, [sp, #8]
  40c320:	str	x1, [sp]
  40c324:	ldr	x0, [sp, #8]
  40c328:	ldr	x1, [sp]
  40c32c:	bl	403de8 <internal_hashmap_remove@plt>
  40c330:	ldp	x29, x30, [sp, #16]
  40c334:	add	sp, sp, #0x20
  40c338:	ret

000000000040c33c <mount_one>:
  40c33c:	sub	sp, sp, #0xe0
  40c340:	stp	x29, x30, [sp, #208]
  40c344:	add	x29, sp, #0xd0
  40c348:	mov	w8, #0x1                   	// #1
  40c34c:	adrp	x9, 40f000 <parse_argv.options+0x14a8>
  40c350:	add	x9, x9, #0x4aa
  40c354:	add	x9, x9, #0x3
  40c358:	adrp	x10, 40f000 <parse_argv.options+0x14a8>
  40c35c:	add	x10, x10, #0x7de
  40c360:	stur	x0, [x29, #-16]
  40c364:	and	w8, w1, w8
  40c368:	sturb	w8, [x29, #-17]
  40c36c:	str	x9, [sp, #104]
  40c370:	str	x10, [sp, #96]
  40c374:	ldur	x8, [x29, #-16]
  40c378:	cmp	x8, #0x0
  40c37c:	cset	w9, ne  // ne = any
  40c380:	mov	w10, #0x1                   	// #1
  40c384:	eor	w9, w9, #0x1
  40c388:	eor	w9, w9, w10
  40c38c:	eor	w9, w9, w10
  40c390:	and	w9, w9, #0x1
  40c394:	mov	w0, w9
  40c398:	sxtw	x8, w0
  40c39c:	cbz	x8, 40c3c4 <mount_one+0x88>
  40c3a0:	mov	w8, wzr
  40c3a4:	mov	w0, w8
  40c3a8:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40c3ac:	add	x1, x1, #0x7b3
  40c3b0:	ldr	x2, [sp, #104]
  40c3b4:	mov	w3, #0x94                  	// #148
  40c3b8:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40c3bc:	add	x4, x4, #0x7b5
  40c3c0:	bl	4037e8 <log_assert_failed_realm@plt>
  40c3c4:	ldur	x8, [x29, #-16]
  40c3c8:	ldr	w9, [x8, #48]
  40c3cc:	mov	w10, #0x7                   	// #7
  40c3d0:	mov	w11, #0x3                   	// #3
  40c3d4:	tst	w9, #0x1
  40c3d8:	csel	w9, w11, w10, ne  // ne = any
  40c3dc:	stur	w9, [x29, #-28]
  40c3e0:	ldur	x8, [x29, #-16]
  40c3e4:	ldr	x8, [x8, #40]
  40c3e8:	cbz	x8, 40c404 <mount_one+0xc8>
  40c3ec:	ldur	x8, [x29, #-16]
  40c3f0:	ldr	x8, [x8, #40]
  40c3f4:	blr	x8
  40c3f8:	tbnz	w0, #0, 40c404 <mount_one+0xc8>
  40c3fc:	stur	wzr, [x29, #-4]
  40c400:	b	40c894 <mount_one+0x558>
  40c404:	ldurb	w8, [x29, #-17]
  40c408:	tbnz	w8, #0, 40c410 <mount_one+0xd4>
  40c40c:	b	40c420 <mount_one+0xe4>
  40c410:	ldur	x8, [x29, #-16]
  40c414:	ldr	x0, [x8, #8]
  40c418:	mov	w1, #0x3                   	// #3
  40c41c:	bl	403e78 <label_fix@plt>
  40c420:	ldur	x8, [x29, #-16]
  40c424:	ldr	x0, [x8, #8]
  40c428:	mov	x8, xzr
  40c42c:	mov	x1, x8
  40c430:	mov	w2, #0x400                 	// #1024
  40c434:	bl	403e88 <path_is_mount_point@plt>
  40c438:	stur	w0, [x29, #-24]
  40c43c:	ldur	w9, [x29, #-24]
  40c440:	cmp	w9, #0x0
  40c444:	cset	w9, ge  // ge = tcont
  40c448:	tbnz	w9, #0, 40c50c <mount_one+0x1d0>
  40c44c:	ldur	w8, [x29, #-24]
  40c450:	mov	w9, #0xfffffffe            	// #-2
  40c454:	cmp	w8, w9
  40c458:	b.eq	40c50c <mount_one+0x1d0>  // b.none
  40c45c:	ldur	w8, [x29, #-28]
  40c460:	stur	w8, [x29, #-32]
  40c464:	ldur	w8, [x29, #-24]
  40c468:	stur	w8, [x29, #-36]
  40c46c:	stur	wzr, [x29, #-40]
  40c470:	ldur	w0, [x29, #-40]
  40c474:	bl	403628 <log_get_max_level_realm@plt>
  40c478:	ldur	w8, [x29, #-32]
  40c47c:	and	w8, w8, #0x7
  40c480:	cmp	w0, w8
  40c484:	b.lt	40c4c0 <mount_one+0x184>  // b.tstop
  40c488:	ldur	w8, [x29, #-40]
  40c48c:	ldur	w9, [x29, #-32]
  40c490:	orr	w0, w9, w8, lsl #10
  40c494:	ldur	w1, [x29, #-36]
  40c498:	ldur	x10, [x29, #-16]
  40c49c:	ldr	x6, [x10, #8]
  40c4a0:	ldr	x2, [sp, #104]
  40c4a4:	mov	w3, #0xa1                  	// #161
  40c4a8:	ldr	x4, [sp, #96]
  40c4ac:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40c4b0:	add	x5, x5, #0x7e8
  40c4b4:	bl	403638 <log_internal_realm@plt>
  40c4b8:	str	w0, [sp, #92]
  40c4bc:	b	40c4d4 <mount_one+0x198>
  40c4c0:	ldur	w0, [x29, #-36]
  40c4c4:	bl	403648 <abs@plt>
  40c4c8:	mov	w8, wzr
  40c4cc:	subs	w8, w8, w0, uxtb
  40c4d0:	str	w8, [sp, #92]
  40c4d4:	ldr	w8, [sp, #92]
  40c4d8:	stur	w8, [x29, #-44]
  40c4dc:	ldur	x9, [x29, #-16]
  40c4e0:	ldr	w8, [x9, #48]
  40c4e4:	and	w8, w8, #0x1
  40c4e8:	cbz	w8, 40c4f8 <mount_one+0x1bc>
  40c4ec:	ldur	w8, [x29, #-24]
  40c4f0:	str	w8, [sp, #88]
  40c4f4:	b	40c500 <mount_one+0x1c4>
  40c4f8:	mov	w8, wzr
  40c4fc:	str	w8, [sp, #88]
  40c500:	ldr	w8, [sp, #88]
  40c504:	stur	w8, [x29, #-4]
  40c508:	b	40c894 <mount_one+0x558>
  40c50c:	ldur	w8, [x29, #-24]
  40c510:	cmp	w8, #0x0
  40c514:	cset	w8, le
  40c518:	tbnz	w8, #0, 40c524 <mount_one+0x1e8>
  40c51c:	stur	wzr, [x29, #-4]
  40c520:	b	40c894 <mount_one+0x558>
  40c524:	ldur	x8, [x29, #-16]
  40c528:	ldr	w9, [x8, #48]
  40c52c:	and	w9, w9, #0x2
  40c530:	cbnz	w9, 40c54c <mount_one+0x210>
  40c534:	bl	403678 <detect_container@plt>
  40c538:	cmp	w0, #0x0
  40c53c:	cset	w8, le
  40c540:	tbnz	w8, #0, 40c54c <mount_one+0x210>
  40c544:	stur	wzr, [x29, #-4]
  40c548:	b	40c894 <mount_one+0x558>
  40c54c:	ldurb	w8, [x29, #-17]
  40c550:	tbnz	w8, #0, 40c558 <mount_one+0x21c>
  40c554:	b	40c56c <mount_one+0x230>
  40c558:	ldur	x8, [x29, #-16]
  40c55c:	ldr	x0, [x8, #8]
  40c560:	mov	w1, #0x1ed                 	// #493
  40c564:	bl	403e98 <mkdir_p_label@plt>
  40c568:	b	40c57c <mount_one+0x240>
  40c56c:	ldur	x8, [x29, #-16]
  40c570:	ldr	x0, [x8, #8]
  40c574:	mov	w1, #0x1ed                 	// #493
  40c578:	bl	403ea8 <mkdir_p@plt>
  40c57c:	mov	w8, #0x7                   	// #7
  40c580:	stur	w8, [x29, #-48]
  40c584:	stur	wzr, [x29, #-52]
  40c588:	stur	wzr, [x29, #-56]
  40c58c:	ldur	w0, [x29, #-56]
  40c590:	bl	403628 <log_get_max_level_realm@plt>
  40c594:	ldur	w8, [x29, #-48]
  40c598:	and	w8, w8, #0x7
  40c59c:	cmp	w0, w8
  40c5a0:	b.lt	40c640 <mount_one+0x304>  // b.tstop
  40c5a4:	ldur	w8, [x29, #-56]
  40c5a8:	ldur	w9, [x29, #-48]
  40c5ac:	orr	w0, w9, w8, lsl #10
  40c5b0:	ldur	w1, [x29, #-52]
  40c5b4:	ldur	x10, [x29, #-16]
  40c5b8:	ldr	x6, [x10]
  40c5bc:	ldur	x10, [x29, #-16]
  40c5c0:	ldr	x7, [x10, #8]
  40c5c4:	ldur	x10, [x29, #-16]
  40c5c8:	ldr	x10, [x10, #16]
  40c5cc:	ldur	x11, [x29, #-16]
  40c5d0:	ldr	x11, [x11, #24]
  40c5d4:	str	w0, [sp, #84]
  40c5d8:	mov	x0, x11
  40c5dc:	str	w1, [sp, #80]
  40c5e0:	str	x6, [sp, #72]
  40c5e4:	str	x7, [sp, #64]
  40c5e8:	str	x10, [sp, #56]
  40c5ec:	bl	40d8f8 <strna>
  40c5f0:	ldr	w8, [sp, #84]
  40c5f4:	str	x0, [sp, #48]
  40c5f8:	mov	w0, w8
  40c5fc:	ldr	w1, [sp, #80]
  40c600:	ldr	x2, [sp, #104]
  40c604:	mov	w3, #0xb6                  	// #182
  40c608:	ldr	x4, [sp, #96]
  40c60c:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40c610:	add	x5, x5, #0x81c
  40c614:	ldr	x6, [sp, #72]
  40c618:	ldr	x7, [sp, #64]
  40c61c:	mov	x10, sp
  40c620:	ldr	x11, [sp, #56]
  40c624:	str	x11, [x10]
  40c628:	mov	x10, sp
  40c62c:	ldr	x12, [sp, #48]
  40c630:	str	x12, [x10, #8]
  40c634:	bl	403638 <log_internal_realm@plt>
  40c638:	str	w0, [sp, #44]
  40c63c:	b	40c654 <mount_one+0x318>
  40c640:	ldur	w0, [x29, #-52]
  40c644:	bl	403648 <abs@plt>
  40c648:	mov	w8, wzr
  40c64c:	subs	w8, w8, w0, uxtb
  40c650:	str	w8, [sp, #44]
  40c654:	ldr	w8, [sp, #44]
  40c658:	stur	w8, [x29, #-60]
  40c65c:	ldur	x9, [x29, #-16]
  40c660:	ldr	x0, [x9]
  40c664:	ldur	x9, [x29, #-16]
  40c668:	ldr	x1, [x9, #8]
  40c66c:	ldur	x9, [x29, #-16]
  40c670:	ldr	x2, [x9, #16]
  40c674:	ldur	x9, [x29, #-16]
  40c678:	ldr	x3, [x9, #32]
  40c67c:	ldur	x9, [x29, #-16]
  40c680:	ldr	x4, [x9, #24]
  40c684:	bl	4038e8 <mount@plt>
  40c688:	cmp	w0, #0x0
  40c68c:	cset	w8, ge  // ge = tcont
  40c690:	tbnz	w8, #0, 40c75c <mount_one+0x420>
  40c694:	ldur	w8, [x29, #-28]
  40c698:	stur	w8, [x29, #-64]
  40c69c:	bl	403768 <__errno_location@plt>
  40c6a0:	ldr	w8, [x0]
  40c6a4:	stur	w8, [x29, #-68]
  40c6a8:	stur	wzr, [x29, #-72]
  40c6ac:	ldur	w0, [x29, #-72]
  40c6b0:	bl	403628 <log_get_max_level_realm@plt>
  40c6b4:	ldur	w8, [x29, #-64]
  40c6b8:	and	w8, w8, #0x7
  40c6bc:	cmp	w0, w8
  40c6c0:	b.lt	40c704 <mount_one+0x3c8>  // b.tstop
  40c6c4:	ldur	w8, [x29, #-72]
  40c6c8:	ldur	w9, [x29, #-64]
  40c6cc:	orr	w0, w9, w8, lsl #10
  40c6d0:	ldur	w1, [x29, #-68]
  40c6d4:	ldur	x10, [x29, #-16]
  40c6d8:	ldr	x6, [x10, #16]
  40c6dc:	ldur	x10, [x29, #-16]
  40c6e0:	ldr	x7, [x10, #8]
  40c6e4:	ldr	x2, [sp, #104]
  40c6e8:	mov	w3, #0xbd                  	// #189
  40c6ec:	ldr	x4, [sp, #96]
  40c6f0:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40c6f4:	add	x5, x5, #0x84a
  40c6f8:	bl	403638 <log_internal_realm@plt>
  40c6fc:	str	w0, [sp, #40]
  40c700:	b	40c718 <mount_one+0x3dc>
  40c704:	ldur	w0, [x29, #-68]
  40c708:	bl	403648 <abs@plt>
  40c70c:	mov	w8, wzr
  40c710:	subs	w8, w8, w0, uxtb
  40c714:	str	w8, [sp, #40]
  40c718:	ldr	w8, [sp, #40]
  40c71c:	stur	w8, [x29, #-76]
  40c720:	ldur	x9, [x29, #-16]
  40c724:	ldr	w8, [x9, #48]
  40c728:	and	w8, w8, #0x1
  40c72c:	cbz	w8, 40c748 <mount_one+0x40c>
  40c730:	bl	403768 <__errno_location@plt>
  40c734:	ldr	w8, [x0]
  40c738:	mov	w9, wzr
  40c73c:	subs	w8, w9, w8
  40c740:	str	w8, [sp, #36]
  40c744:	b	40c750 <mount_one+0x414>
  40c748:	mov	w8, wzr
  40c74c:	str	w8, [sp, #36]
  40c750:	ldr	w8, [sp, #36]
  40c754:	stur	w8, [x29, #-4]
  40c758:	b	40c894 <mount_one+0x558>
  40c75c:	ldurb	w8, [x29, #-17]
  40c760:	tbnz	w8, #0, 40c768 <mount_one+0x42c>
  40c764:	b	40c77c <mount_one+0x440>
  40c768:	ldur	x8, [x29, #-16]
  40c76c:	ldr	x0, [x8, #8]
  40c770:	mov	w9, wzr
  40c774:	mov	w1, w9
  40c778:	bl	403e78 <label_fix@plt>
  40c77c:	ldur	x8, [x29, #-16]
  40c780:	ldr	w9, [x8, #48]
  40c784:	and	w9, w9, #0x4
  40c788:	cbz	w9, 40c88c <mount_one+0x550>
  40c78c:	ldur	x8, [x29, #-16]
  40c790:	ldr	x0, [x8, #8]
  40c794:	mov	w1, #0x2                   	// #2
  40c798:	bl	4036e8 <access@plt>
  40c79c:	cmp	w0, #0x0
  40c7a0:	cset	w9, ge  // ge = tcont
  40c7a4:	tbnz	w9, #0, 40c88c <mount_one+0x550>
  40c7a8:	bl	403768 <__errno_location@plt>
  40c7ac:	ldr	w8, [x0]
  40c7b0:	mov	w9, wzr
  40c7b4:	subs	w8, w9, w8
  40c7b8:	stur	w8, [x29, #-24]
  40c7bc:	ldur	x10, [x29, #-16]
  40c7c0:	ldr	x0, [x10, #8]
  40c7c4:	bl	403eb8 <umount@plt>
  40c7c8:	ldur	x10, [x29, #-16]
  40c7cc:	ldr	x10, [x10, #8]
  40c7d0:	mov	x0, x10
  40c7d4:	bl	403ec8 <rmdir@plt>
  40c7d8:	ldur	w8, [x29, #-28]
  40c7dc:	stur	w8, [x29, #-80]
  40c7e0:	ldur	w8, [x29, #-24]
  40c7e4:	stur	w8, [x29, #-84]
  40c7e8:	stur	wzr, [x29, #-88]
  40c7ec:	ldur	w8, [x29, #-88]
  40c7f0:	mov	w0, w8
  40c7f4:	bl	403628 <log_get_max_level_realm@plt>
  40c7f8:	ldur	w8, [x29, #-80]
  40c7fc:	and	w8, w8, #0x7
  40c800:	cmp	w0, w8
  40c804:	b.lt	40c840 <mount_one+0x504>  // b.tstop
  40c808:	ldur	w8, [x29, #-88]
  40c80c:	ldur	w9, [x29, #-80]
  40c810:	orr	w0, w9, w8, lsl #10
  40c814:	ldur	w1, [x29, #-84]
  40c818:	ldur	x10, [x29, #-16]
  40c81c:	ldr	x6, [x10, #8]
  40c820:	ldr	x2, [sp, #104]
  40c824:	mov	w3, #0xcc                  	// #204
  40c828:	ldr	x4, [sp, #96]
  40c82c:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40c830:	add	x5, x5, #0x867
  40c834:	bl	403638 <log_internal_realm@plt>
  40c838:	str	w0, [sp, #32]
  40c83c:	b	40c854 <mount_one+0x518>
  40c840:	ldur	w0, [x29, #-84]
  40c844:	bl	403648 <abs@plt>
  40c848:	mov	w8, wzr
  40c84c:	subs	w8, w8, w0, uxtb
  40c850:	str	w8, [sp, #32]
  40c854:	ldr	w8, [sp, #32]
  40c858:	stur	w8, [x29, #-92]
  40c85c:	ldur	x9, [x29, #-16]
  40c860:	ldr	w8, [x9, #48]
  40c864:	and	w8, w8, #0x1
  40c868:	cbz	w8, 40c878 <mount_one+0x53c>
  40c86c:	ldur	w8, [x29, #-24]
  40c870:	str	w8, [sp, #28]
  40c874:	b	40c880 <mount_one+0x544>
  40c878:	mov	w8, wzr
  40c87c:	str	w8, [sp, #28]
  40c880:	ldr	w8, [sp, #28]
  40c884:	stur	w8, [x29, #-4]
  40c888:	b	40c894 <mount_one+0x558>
  40c88c:	mov	w8, #0x1                   	// #1
  40c890:	stur	w8, [x29, #-4]
  40c894:	ldur	w0, [x29, #-4]
  40c898:	ldp	x29, x30, [sp, #208]
  40c89c:	add	sp, sp, #0xe0
  40c8a0:	ret

000000000040c8a4 <symlink_controller>:
  40c8a4:	stp	x29, x30, [sp, #-16]!
  40c8a8:	mov	x29, sp
  40c8ac:	sub	sp, sp, #0xa0
  40c8b0:	adrp	x8, 40f000 <parse_argv.options+0x14a8>
  40c8b4:	add	x8, x8, #0x4aa
  40c8b8:	add	x8, x8, #0x3
  40c8bc:	adrp	x9, 40f000 <parse_argv.options+0x14a8>
  40c8c0:	add	x9, x9, #0x89d
  40c8c4:	stur	x0, [x29, #-16]
  40c8c8:	stur	x1, [x29, #-24]
  40c8cc:	stur	x8, [x29, #-136]
  40c8d0:	stur	x9, [x29, #-144]
  40c8d4:	ldur	x8, [x29, #-16]
  40c8d8:	cmp	x8, #0x0
  40c8dc:	cset	w9, ne  // ne = any
  40c8e0:	mov	w10, #0x1                   	// #1
  40c8e4:	eor	w9, w9, #0x1
  40c8e8:	eor	w9, w9, w10
  40c8ec:	eor	w9, w9, w10
  40c8f0:	and	w9, w9, #0x1
  40c8f4:	mov	w0, w9
  40c8f8:	sxtw	x8, w0
  40c8fc:	cbz	x8, 40c920 <symlink_controller+0x7c>
  40c900:	mov	w8, wzr
  40c904:	mov	w0, w8
  40c908:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40c90c:	add	x1, x1, #0x896
  40c910:	ldur	x2, [x29, #-136]
  40c914:	mov	w3, #0x109                 	// #265
  40c918:	ldur	x4, [x29, #-144]
  40c91c:	bl	4037e8 <log_assert_failed_realm@plt>
  40c920:	ldur	x8, [x29, #-24]
  40c924:	cmp	x8, #0x0
  40c928:	cset	w9, ne  // ne = any
  40c92c:	mov	w10, #0x1                   	// #1
  40c930:	eor	w9, w9, #0x1
  40c934:	eor	w9, w9, w10
  40c938:	eor	w9, w9, w10
  40c93c:	and	w9, w9, #0x1
  40c940:	mov	w0, w9
  40c944:	sxtw	x8, w0
  40c948:	cbz	x8, 40c96c <symlink_controller+0xc8>
  40c94c:	mov	w8, wzr
  40c950:	mov	w0, w8
  40c954:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40c958:	add	x1, x1, #0x8d0
  40c95c:	ldur	x2, [x29, #-136]
  40c960:	mov	w3, #0x10a                 	// #266
  40c964:	ldur	x4, [x29, #-144]
  40c968:	bl	4037e8 <log_assert_failed_realm@plt>
  40c96c:	sub	x8, x29, #0x38
  40c970:	adrp	x9, 40f000 <parse_argv.options+0x14a8>
  40c974:	add	x9, x9, #0x49a
  40c978:	stur	x9, [x29, #-56]
  40c97c:	ldur	x9, [x29, #-24]
  40c980:	str	x9, [x8, #8]
  40c984:	stur	xzr, [x29, #-80]
  40c988:	stur	xzr, [x29, #-88]
  40c98c:	ldur	x8, [x29, #-88]
  40c990:	mov	w9, #0x0                   	// #0
  40c994:	cmp	x8, #0x2
  40c998:	stur	w9, [x29, #-148]
  40c99c:	b.cs	40c9c4 <symlink_controller+0x120>  // b.hs, b.nlast
  40c9a0:	ldur	x8, [x29, #-88]
  40c9a4:	mov	x9, #0x8                   	// #8
  40c9a8:	mul	x8, x9, x8
  40c9ac:	sub	x9, x29, #0x38
  40c9b0:	add	x8, x9, x8
  40c9b4:	ldr	x8, [x8]
  40c9b8:	cmp	x8, #0x0
  40c9bc:	cset	w10, ne  // ne = any
  40c9c0:	stur	w10, [x29, #-148]
  40c9c4:	ldur	w8, [x29, #-148]
  40c9c8:	tbnz	w8, #0, 40c9d0 <symlink_controller+0x12c>
  40c9cc:	b	40ca08 <symlink_controller+0x164>
  40c9d0:	ldur	x8, [x29, #-88]
  40c9d4:	mov	x9, #0x8                   	// #8
  40c9d8:	mul	x8, x9, x8
  40c9dc:	sub	x9, x29, #0x38
  40c9e0:	add	x8, x9, x8
  40c9e4:	ldr	x0, [x8]
  40c9e8:	bl	403ed8 <strlen@plt>
  40c9ec:	ldur	x8, [x29, #-80]
  40c9f0:	add	x8, x8, x0
  40c9f4:	stur	x8, [x29, #-80]
  40c9f8:	ldur	x8, [x29, #-88]
  40c9fc:	add	x8, x8, #0x1
  40ca00:	stur	x8, [x29, #-88]
  40ca04:	b	40c98c <symlink_controller+0xe8>
  40ca08:	ldur	x8, [x29, #-80]
  40ca0c:	add	x8, x8, #0x1
  40ca10:	stur	x8, [x29, #-96]
  40ca14:	ldur	x1, [x29, #-96]
  40ca18:	mov	x0, #0x1                   	// #1
  40ca1c:	bl	40d934 <size_multiply_overflow>
  40ca20:	mov	w8, #0x1                   	// #1
  40ca24:	eor	w9, w0, #0x1
  40ca28:	eor	w9, w9, w8
  40ca2c:	eor	w9, w9, w8
  40ca30:	eor	w8, w9, w8
  40ca34:	and	w8, w8, #0x1
  40ca38:	mov	w1, w8
  40ca3c:	sxtw	x10, w1
  40ca40:	cbz	x10, 40ca64 <symlink_controller+0x1c0>
  40ca44:	mov	w8, wzr
  40ca48:	mov	w0, w8
  40ca4c:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40ca50:	add	x1, x1, #0x248
  40ca54:	ldur	x2, [x29, #-136]
  40ca58:	mov	w3, #0x10c                 	// #268
  40ca5c:	ldur	x4, [x29, #-144]
  40ca60:	bl	4037e8 <log_assert_failed_realm@plt>
  40ca64:	ldur	x8, [x29, #-96]
  40ca68:	mov	x9, #0x1                   	// #1
  40ca6c:	mul	x8, x9, x8
  40ca70:	cmp	x8, #0x400, lsl #12
  40ca74:	cset	w10, ls  // ls = plast
  40ca78:	mov	w11, #0x1                   	// #1
  40ca7c:	eor	w10, w10, #0x1
  40ca80:	eor	w10, w10, w11
  40ca84:	eor	w10, w10, w11
  40ca88:	and	w10, w10, #0x1
  40ca8c:	mov	w0, w10
  40ca90:	sxtw	x8, w0
  40ca94:	cbz	x8, 40cab8 <symlink_controller+0x214>
  40ca98:	mov	w8, wzr
  40ca9c:	mov	w0, w8
  40caa0:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40caa4:	add	x1, x1, #0x293
  40caa8:	ldur	x2, [x29, #-136]
  40caac:	mov	w3, #0x10c                 	// #268
  40cab0:	ldur	x4, [x29, #-144]
  40cab4:	bl	4037e8 <log_assert_failed_realm@plt>
  40cab8:	ldur	x8, [x29, #-96]
  40cabc:	mov	x9, #0x1                   	// #1
  40cac0:	mul	x8, x9, x8
  40cac4:	mul	x8, x8, x9
  40cac8:	add	x8, x8, #0xf
  40cacc:	and	x8, x8, #0xfffffffffffffff0
  40cad0:	mov	x9, sp
  40cad4:	subs	x8, x9, x8
  40cad8:	mov	sp, x8
  40cadc:	stur	x8, [x29, #-104]
  40cae0:	ldur	x8, [x29, #-104]
  40cae4:	stur	x8, [x29, #-64]
  40cae8:	stur	x8, [x29, #-72]
  40caec:	stur	xzr, [x29, #-88]
  40caf0:	ldur	x8, [x29, #-88]
  40caf4:	mov	w9, #0x0                   	// #0
  40caf8:	cmp	x8, #0x2
  40cafc:	stur	w9, [x29, #-152]
  40cb00:	b.cs	40cb28 <symlink_controller+0x284>  // b.hs, b.nlast
  40cb04:	ldur	x8, [x29, #-88]
  40cb08:	mov	x9, #0x8                   	// #8
  40cb0c:	mul	x8, x9, x8
  40cb10:	sub	x9, x29, #0x38
  40cb14:	add	x8, x9, x8
  40cb18:	ldr	x8, [x8]
  40cb1c:	cmp	x8, #0x0
  40cb20:	cset	w10, ne  // ne = any
  40cb24:	stur	w10, [x29, #-152]
  40cb28:	ldur	w8, [x29, #-152]
  40cb2c:	tbnz	w8, #0, 40cb34 <symlink_controller+0x290>
  40cb30:	b	40cb68 <symlink_controller+0x2c4>
  40cb34:	ldur	x0, [x29, #-72]
  40cb38:	ldur	x8, [x29, #-88]
  40cb3c:	mov	x9, #0x8                   	// #8
  40cb40:	mul	x8, x9, x8
  40cb44:	sub	x9, x29, #0x38
  40cb48:	add	x8, x9, x8
  40cb4c:	ldr	x1, [x8]
  40cb50:	bl	403ee8 <stpcpy@plt>
  40cb54:	stur	x0, [x29, #-72]
  40cb58:	ldur	x8, [x29, #-88]
  40cb5c:	add	x8, x8, #0x1
  40cb60:	stur	x8, [x29, #-88]
  40cb64:	b	40caf0 <symlink_controller+0x24c>
  40cb68:	ldur	x8, [x29, #-72]
  40cb6c:	mov	w9, #0x0                   	// #0
  40cb70:	strb	w9, [x8]
  40cb74:	ldur	x8, [x29, #-64]
  40cb78:	stur	x8, [x29, #-112]
  40cb7c:	ldur	x8, [x29, #-112]
  40cb80:	stur	x8, [x29, #-32]
  40cb84:	ldur	x0, [x29, #-16]
  40cb88:	ldur	x1, [x29, #-32]
  40cb8c:	mov	w9, wzr
  40cb90:	and	w2, w9, #0x1
  40cb94:	bl	403ef8 <symlink_idempotent@plt>
  40cb98:	stur	w0, [x29, #-36]
  40cb9c:	ldur	w9, [x29, #-36]
  40cba0:	cmp	w9, #0x0
  40cba4:	cset	w9, ge  // ge = tcont
  40cba8:	tbnz	w9, #0, 40cc38 <symlink_controller+0x394>
  40cbac:	mov	w8, #0x3                   	// #3
  40cbb0:	stur	w8, [x29, #-116]
  40cbb4:	ldur	w8, [x29, #-36]
  40cbb8:	stur	w8, [x29, #-120]
  40cbbc:	stur	wzr, [x29, #-124]
  40cbc0:	ldur	w0, [x29, #-124]
  40cbc4:	bl	403628 <log_get_max_level_realm@plt>
  40cbc8:	ldur	w8, [x29, #-116]
  40cbcc:	and	w8, w8, #0x7
  40cbd0:	cmp	w0, w8
  40cbd4:	b.lt	40cc10 <symlink_controller+0x36c>  // b.tstop
  40cbd8:	ldur	w8, [x29, #-124]
  40cbdc:	ldur	w9, [x29, #-116]
  40cbe0:	orr	w0, w9, w8, lsl #10
  40cbe4:	ldur	w1, [x29, #-120]
  40cbe8:	ldur	x6, [x29, #-32]
  40cbec:	ldur	x2, [x29, #-136]
  40cbf0:	mov	w3, #0x110                 	// #272
  40cbf4:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40cbf8:	add	x4, x4, #0x8d6
  40cbfc:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40cc00:	add	x5, x5, #0x8e9
  40cc04:	bl	403638 <log_internal_realm@plt>
  40cc08:	stur	w0, [x29, #-156]
  40cc0c:	b	40cc24 <symlink_controller+0x380>
  40cc10:	ldur	w0, [x29, #-120]
  40cc14:	bl	403648 <abs@plt>
  40cc18:	mov	w8, wzr
  40cc1c:	subs	w8, w8, w0, uxtb
  40cc20:	stur	w8, [x29, #-156]
  40cc24:	ldur	w8, [x29, #-156]
  40cc28:	stur	w8, [x29, #-128]
  40cc2c:	ldur	w8, [x29, #-128]
  40cc30:	stur	w8, [x29, #-4]
  40cc34:	b	40cc3c <symlink_controller+0x398>
  40cc38:	stur	wzr, [x29, #-4]
  40cc3c:	ldur	w0, [x29, #-4]
  40cc40:	mov	sp, x29
  40cc44:	ldp	x29, x30, [sp], #16
  40cc48:	ret

000000000040cc4c <mount_setup>:
  40cc4c:	sub	sp, sp, #0x100
  40cc50:	stp	x29, x30, [sp, #240]
  40cc54:	add	x29, sp, #0xf0
  40cc58:	mov	w8, #0x14                  	// #20
  40cc5c:	mov	w9, #0x1                   	// #1
  40cc60:	adrp	x10, 40f000 <parse_argv.options+0x14a8>
  40cc64:	add	x10, x10, #0x4aa
  40cc68:	add	x10, x10, #0x3
  40cc6c:	and	w9, w0, w9
  40cc70:	sturb	w9, [x29, #-5]
  40cc74:	stur	wzr, [x29, #-12]
  40cc78:	ldurb	w9, [x29, #-5]
  40cc7c:	mov	w0, w8
  40cc80:	and	w1, w9, #0x1
  40cc84:	str	x10, [sp, #40]
  40cc88:	bl	40bcdc <mount_points_setup>
  40cc8c:	stur	w0, [x29, #-12]
  40cc90:	ldur	w8, [x29, #-12]
  40cc94:	cmp	w8, #0x0
  40cc98:	cset	w8, ge  // ge = tcont
  40cc9c:	tbnz	w8, #0, 40ccac <mount_setup+0x60>
  40cca0:	ldur	w8, [x29, #-12]
  40cca4:	stur	w8, [x29, #-4]
  40cca8:	b	40cf54 <mount_setup+0x308>
  40ccac:	ldurb	w8, [x29, #-5]
  40ccb0:	tbnz	w8, #0, 40ccb8 <mount_setup+0x6c>
  40ccb4:	b	40ce34 <mount_setup+0x1e8>
  40ccb8:	mov	w0, #0x1                   	// #1
  40ccbc:	bl	403d28 <now@plt>
  40ccc0:	stur	x0, [x29, #-24]
  40ccc4:	adrp	x8, 40e000 <parse_argv.options+0x4a8>
  40ccc8:	add	x8, x8, #0x8a7
  40cccc:	stur	x8, [x29, #-104]
  40ccd0:	str	x8, [sp, #80]
  40ccd4:	ldr	x8, [sp, #80]
  40ccd8:	add	x9, sp, #0x58
  40ccdc:	str	x8, [sp, #88]
  40cce0:	adrp	x8, 40f000 <parse_argv.options+0x14a8>
  40cce4:	add	x8, x8, #0x52d
  40cce8:	str	x8, [x9, #8]
  40ccec:	adrp	x8, 40f000 <parse_argv.options+0x14a8>
  40ccf0:	add	x8, x8, #0x536
  40ccf4:	str	x8, [x9, #16]
  40ccf8:	mov	x8, xzr
  40ccfc:	str	x8, [x9, #24]
  40cd00:	str	x9, [sp, #120]
  40cd04:	ldur	x8, [x29, #-104]
  40cd08:	cbz	x8, 40cd3c <mount_setup+0xf0>
  40cd0c:	ldur	x0, [x29, #-104]
  40cd10:	adrp	x1, 40c000 <mount_cgroup_controllers+0x284>
  40cd14:	add	x1, x1, #0xf64
  40cd18:	mov	w2, #0x40                  	// #64
  40cd1c:	mov	w3, #0x13                  	// #19
  40cd20:	bl	403f08 <nftw64@plt>
  40cd24:	ldr	x8, [sp, #120]
  40cd28:	add	x9, x8, #0x8
  40cd2c:	str	x9, [sp, #120]
  40cd30:	ldr	x8, [x8, #8]
  40cd34:	stur	x8, [x29, #-104]
  40cd38:	b	40cd04 <mount_setup+0xb8>
  40cd3c:	bl	40d04c <relabel_cgroup_filesystems>
  40cd40:	bl	40d254 <relabel_extra>
  40cd44:	stur	w0, [x29, #-108]
  40cd48:	mov	w0, #0x1                   	// #1
  40cd4c:	bl	403d28 <now@plt>
  40cd50:	stur	x0, [x29, #-32]
  40cd54:	mov	w8, #0x6                   	// #6
  40cd58:	str	w8, [sp, #76]
  40cd5c:	str	wzr, [sp, #72]
  40cd60:	str	wzr, [sp, #68]
  40cd64:	ldr	w0, [sp, #68]
  40cd68:	bl	403628 <log_get_max_level_realm@plt>
  40cd6c:	ldr	w8, [sp, #76]
  40cd70:	and	w8, w8, #0x7
  40cd74:	cmp	w0, w8
  40cd78:	b.lt	40ce18 <mount_setup+0x1cc>  // b.tstop
  40cd7c:	ldr	w8, [sp, #68]
  40cd80:	ldr	w9, [sp, #76]
  40cd84:	orr	w0, w9, w8, lsl #10
  40cd88:	ldr	w1, [sp, #72]
  40cd8c:	ldur	w8, [x29, #-108]
  40cd90:	adrp	x10, 40d000 <nftw_cb+0x9c>
  40cd94:	add	x10, x10, #0xfe8
  40cd98:	adrp	x11, 40f000 <parse_argv.options+0x14a8>
  40cd9c:	add	x11, x11, #0x580
  40cda0:	cmp	w8, #0x0
  40cda4:	csel	x6, x11, x10, gt
  40cda8:	ldur	x10, [x29, #-32]
  40cdac:	ldur	x11, [x29, #-24]
  40cdb0:	subs	x2, x10, x11
  40cdb4:	sub	x10, x29, #0x60
  40cdb8:	str	w0, [sp, #36]
  40cdbc:	mov	x0, x10
  40cdc0:	mov	x10, #0x40                  	// #64
  40cdc4:	str	w1, [sp, #32]
  40cdc8:	mov	x1, x10
  40cdcc:	mov	x10, xzr
  40cdd0:	mov	x3, x10
  40cdd4:	str	x6, [sp, #24]
  40cdd8:	bl	403f18 <format_timespan@plt>
  40cddc:	ldr	w8, [sp, #36]
  40cde0:	str	x0, [sp, #16]
  40cde4:	mov	w0, w8
  40cde8:	ldr	w1, [sp, #32]
  40cdec:	ldr	x2, [sp, #40]
  40cdf0:	mov	w3, #0x200                 	// #512
  40cdf4:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40cdf8:	add	x4, x4, #0x53b
  40cdfc:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40ce00:	add	x5, x5, #0x547
  40ce04:	ldr	x6, [sp, #24]
  40ce08:	ldr	x7, [sp, #16]
  40ce0c:	bl	403638 <log_internal_realm@plt>
  40ce10:	str	w0, [sp, #12]
  40ce14:	b	40ce2c <mount_setup+0x1e0>
  40ce18:	ldr	w0, [sp, #72]
  40ce1c:	bl	403648 <abs@plt>
  40ce20:	mov	w8, wzr
  40ce24:	subs	w8, w8, w0, uxtb
  40ce28:	str	w8, [sp, #12]
  40ce2c:	ldr	w8, [sp, #12]
  40ce30:	str	w8, [sp, #64]
  40ce34:	mov	x8, xzr
  40ce38:	mov	x0, x8
  40ce3c:	mov	w9, #0xffffffff            	// #-1
  40ce40:	mov	w1, w9
  40ce44:	mov	w2, w9
  40ce48:	bl	403f28 <dev_setup@plt>
  40ce4c:	bl	403678 <detect_container@plt>
  40ce50:	cmp	w0, #0x0
  40ce54:	cset	w9, gt
  40ce58:	tbnz	w9, #0, 40cf0c <mount_setup+0x2c0>
  40ce5c:	mov	x8, xzr
  40ce60:	mov	x0, x8
  40ce64:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  40ce68:	add	x1, x1, #0xd1b
  40ce6c:	mov	x2, x8
  40ce70:	mov	x3, #0x4000                	// #16384
  40ce74:	movk	x3, #0x10, lsl #16
  40ce78:	mov	x4, x8
  40ce7c:	bl	4038e8 <mount@plt>
  40ce80:	cmp	w0, #0x0
  40ce84:	cset	w9, ge  // ge = tcont
  40ce88:	tbnz	w9, #0, 40cf0c <mount_setup+0x2c0>
  40ce8c:	mov	w8, #0x4                   	// #4
  40ce90:	str	w8, [sp, #60]
  40ce94:	bl	403768 <__errno_location@plt>
  40ce98:	ldr	w8, [x0]
  40ce9c:	str	w8, [sp, #56]
  40cea0:	str	wzr, [sp, #52]
  40cea4:	ldr	w0, [sp, #52]
  40cea8:	bl	403628 <log_get_max_level_realm@plt>
  40ceac:	ldr	w8, [sp, #60]
  40ceb0:	and	w8, w8, #0x7
  40ceb4:	cmp	w0, w8
  40ceb8:	b.lt	40cef0 <mount_setup+0x2a4>  // b.tstop
  40cebc:	ldr	w8, [sp, #52]
  40cec0:	ldr	w9, [sp, #60]
  40cec4:	orr	w0, w9, w8, lsl #10
  40cec8:	ldr	w1, [sp, #56]
  40cecc:	ldr	x2, [sp, #40]
  40ced0:	mov	w3, #0x211                 	// #529
  40ced4:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40ced8:	add	x4, x4, #0x53b
  40cedc:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40cee0:	add	x5, x5, #0x593
  40cee4:	bl	403638 <log_internal_realm@plt>
  40cee8:	str	w0, [sp, #8]
  40ceec:	b	40cf04 <mount_setup+0x2b8>
  40cef0:	ldr	w0, [sp, #56]
  40cef4:	bl	403648 <abs@plt>
  40cef8:	mov	w8, wzr
  40cefc:	subs	w8, w8, w0, uxtb
  40cf00:	str	w8, [sp, #8]
  40cf04:	ldr	w8, [sp, #8]
  40cf08:	str	w8, [sp, #48]
  40cf0c:	adrp	x0, 40f000 <parse_argv.options+0x14a8>
  40cf10:	add	x0, x0, #0x5d8
  40cf14:	mov	w8, #0x1ed                 	// #493
  40cf18:	mov	w1, w8
  40cf1c:	str	w8, [sp, #4]
  40cf20:	bl	403f38 <mkdir_label@plt>
  40cf24:	adrp	x9, 40f000 <parse_argv.options+0x14a8>
  40cf28:	add	x9, x9, #0x5e5
  40cf2c:	mov	x0, x9
  40cf30:	ldr	w1, [sp, #4]
  40cf34:	bl	403f38 <mkdir_label@plt>
  40cf38:	mov	x9, xzr
  40cf3c:	mov	x0, x9
  40cf40:	mov	w8, #0xffffffff            	// #-1
  40cf44:	mov	w1, w8
  40cf48:	mov	w2, w8
  40cf4c:	bl	403f48 <make_inaccessible_nodes@plt>
  40cf50:	stur	wzr, [x29, #-4]
  40cf54:	ldur	w0, [x29, #-4]
  40cf58:	ldp	x29, x30, [sp, #240]
  40cf5c:	add	sp, sp, #0x100
  40cf60:	ret

000000000040cf64 <nftw_cb>:
  40cf64:	sub	sp, sp, #0x40
  40cf68:	stp	x29, x30, [sp, #48]
  40cf6c:	add	x29, sp, #0x30
  40cf70:	mov	w8, #0x1                   	// #1
  40cf74:	stur	x0, [x29, #-16]
  40cf78:	str	x1, [sp, #24]
  40cf7c:	str	w2, [sp, #20]
  40cf80:	str	x3, [sp, #8]
  40cf84:	ldr	x9, [sp, #8]
  40cf88:	ldr	w10, [x9, #4]
  40cf8c:	cmp	w10, #0x0
  40cf90:	cset	w10, eq  // eq = none
  40cf94:	eor	w10, w10, w8
  40cf98:	eor	w8, w10, w8
  40cf9c:	and	w8, w8, #0x1
  40cfa0:	mov	w0, w8
  40cfa4:	sxtw	x9, w0
  40cfa8:	cbz	x9, 40cfb4 <nftw_cb+0x50>
  40cfac:	stur	wzr, [x29, #-4]
  40cfb0:	b	40d03c <nftw_cb+0xd8>
  40cfb4:	ldur	x0, [x29, #-16]
  40cfb8:	mov	w8, wzr
  40cfbc:	mov	w1, w8
  40cfc0:	bl	403e78 <label_fix@plt>
  40cfc4:	ldr	x9, [sp, #8]
  40cfc8:	ldr	w8, [x9, #4]
  40cfcc:	mov	w10, #0x0                   	// #0
  40cfd0:	cmp	w8, #0x1
  40cfd4:	str	w10, [sp, #4]
  40cfd8:	b.ne	40d00c <nftw_cb+0xa8>  // b.any
  40cfdc:	ldr	w8, [sp, #20]
  40cfe0:	mov	w9, #0x0                   	// #0
  40cfe4:	cmp	w8, #0x1
  40cfe8:	str	w9, [sp, #4]
  40cfec:	b.ne	40d00c <nftw_cb+0xa8>  // b.any
  40cff0:	ldur	x0, [x29, #-16]
  40cff4:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  40cff8:	add	x1, x1, #0x726
  40cffc:	bl	403658 <strcmp@plt>
  40d000:	cmp	w0, #0x0
  40d004:	cset	w8, eq  // eq = none
  40d008:	str	w8, [sp, #4]
  40d00c:	ldr	w8, [sp, #4]
  40d010:	mov	w9, #0x1                   	// #1
  40d014:	eor	w8, w8, #0x1
  40d018:	eor	w8, w8, w9
  40d01c:	and	w8, w8, #0x1
  40d020:	mov	w0, w8
  40d024:	sxtw	x10, w0
  40d028:	cbz	x10, 40d038 <nftw_cb+0xd4>
  40d02c:	mov	w8, #0x2                   	// #2
  40d030:	stur	w8, [x29, #-4]
  40d034:	b	40d03c <nftw_cb+0xd8>
  40d038:	stur	wzr, [x29, #-4]
  40d03c:	ldur	w0, [x29, #-4]
  40d040:	ldp	x29, x30, [sp, #48]
  40d044:	add	sp, sp, #0x40
  40d048:	ret

000000000040d04c <relabel_cgroup_filesystems>:
  40d04c:	sub	sp, sp, #0xd0
  40d050:	stp	x29, x30, [sp, #192]
  40d054:	add	x29, sp, #0xc0
  40d058:	adrp	x8, 40f000 <parse_argv.options+0x14a8>
  40d05c:	add	x8, x8, #0x4aa
  40d060:	add	x8, x8, #0x3
  40d064:	adrp	x9, 40f000 <parse_argv.options+0x14a8>
  40d068:	add	x9, x9, #0x50f
  40d06c:	str	x8, [sp, #24]
  40d070:	str	x9, [sp, #16]
  40d074:	bl	403f58 <cg_all_unified@plt>
  40d078:	stur	w0, [x29, #-8]
  40d07c:	ldur	w10, [x29, #-8]
  40d080:	cbnz	w10, 40d1a8 <relabel_cgroup_filesystems+0x15c>
  40d084:	ldr	x0, [sp, #16]
  40d088:	add	x1, sp, #0x40
  40d08c:	bl	403f68 <statfs64@plt>
  40d090:	cmp	w0, #0x0
  40d094:	cset	w8, ge  // ge = tcont
  40d098:	tbnz	w8, #0, 40d128 <relabel_cgroup_filesystems+0xdc>
  40d09c:	mov	w8, #0x3                   	// #3
  40d0a0:	str	w8, [sp, #60]
  40d0a4:	bl	403768 <__errno_location@plt>
  40d0a8:	ldr	w8, [x0]
  40d0ac:	str	w8, [sp, #56]
  40d0b0:	str	wzr, [sp, #52]
  40d0b4:	ldr	w0, [sp, #52]
  40d0b8:	bl	403628 <log_get_max_level_realm@plt>
  40d0bc:	ldr	w8, [sp, #60]
  40d0c0:	and	w8, w8, #0x7
  40d0c4:	cmp	w0, w8
  40d0c8:	b.lt	40d100 <relabel_cgroup_filesystems+0xb4>  // b.tstop
  40d0cc:	ldr	w8, [sp, #52]
  40d0d0:	ldr	w9, [sp, #60]
  40d0d4:	orr	w0, w9, w8, lsl #10
  40d0d8:	ldr	w1, [sp, #56]
  40d0dc:	ldr	x2, [sp, #24]
  40d0e0:	mov	w3, #0x18a                 	// #394
  40d0e4:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40d0e8:	add	x4, x4, #0x909
  40d0ec:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40d0f0:	add	x5, x5, #0x924
  40d0f4:	bl	403638 <log_internal_realm@plt>
  40d0f8:	str	w0, [sp, #12]
  40d0fc:	b	40d114 <relabel_cgroup_filesystems+0xc8>
  40d100:	ldr	w0, [sp, #56]
  40d104:	bl	403648 <abs@plt>
  40d108:	mov	w8, wzr
  40d10c:	subs	w8, w8, w0, uxtb
  40d110:	str	w8, [sp, #12]
  40d114:	ldr	w8, [sp, #12]
  40d118:	str	w8, [sp, #48]
  40d11c:	ldr	w8, [sp, #48]
  40d120:	stur	w8, [x29, #-4]
  40d124:	b	40d244 <relabel_cgroup_filesystems+0x1f8>
  40d128:	ldr	x8, [sp, #144]
  40d12c:	and	x8, x8, #0x1
  40d130:	cbz	x8, 40d150 <relabel_cgroup_filesystems+0x104>
  40d134:	mov	x8, xzr
  40d138:	mov	x0, x8
  40d13c:	ldr	x1, [sp, #16]
  40d140:	mov	x2, x8
  40d144:	mov	x3, #0x20                  	// #32
  40d148:	mov	x4, x8
  40d14c:	bl	4038e8 <mount@plt>
  40d150:	ldr	x0, [sp, #16]
  40d154:	mov	w8, wzr
  40d158:	mov	w1, w8
  40d15c:	bl	403e78 <label_fix@plt>
  40d160:	ldr	x9, [sp, #16]
  40d164:	mov	x0, x9
  40d168:	adrp	x1, 40c000 <mount_cgroup_controllers+0x284>
  40d16c:	add	x1, x1, #0xf64
  40d170:	mov	w2, #0x40                  	// #64
  40d174:	mov	w3, #0x13                  	// #19
  40d178:	bl	403f08 <nftw64@plt>
  40d17c:	ldr	x9, [sp, #144]
  40d180:	and	x9, x9, #0x1
  40d184:	cbz	x9, 40d1a4 <relabel_cgroup_filesystems+0x158>
  40d188:	mov	x8, xzr
  40d18c:	mov	x0, x8
  40d190:	ldr	x1, [sp, #16]
  40d194:	mov	x2, x8
  40d198:	mov	x3, #0x21                  	// #33
  40d19c:	mov	x4, x8
  40d1a0:	bl	4038e8 <mount@plt>
  40d1a4:	b	40d240 <relabel_cgroup_filesystems+0x1f4>
  40d1a8:	ldur	w8, [x29, #-8]
  40d1ac:	cmp	w8, #0x0
  40d1b0:	cset	w8, ge  // ge = tcont
  40d1b4:	tbnz	w8, #0, 40d240 <relabel_cgroup_filesystems+0x1f4>
  40d1b8:	mov	w8, #0x3                   	// #3
  40d1bc:	str	w8, [sp, #44]
  40d1c0:	ldur	w8, [x29, #-8]
  40d1c4:	str	w8, [sp, #40]
  40d1c8:	str	wzr, [sp, #36]
  40d1cc:	ldr	w0, [sp, #36]
  40d1d0:	bl	403628 <log_get_max_level_realm@plt>
  40d1d4:	ldr	w8, [sp, #44]
  40d1d8:	and	w8, w8, #0x7
  40d1dc:	cmp	w0, w8
  40d1e0:	b.lt	40d218 <relabel_cgroup_filesystems+0x1cc>  // b.tstop
  40d1e4:	ldr	w8, [sp, #36]
  40d1e8:	ldr	w9, [sp, #44]
  40d1ec:	orr	w0, w9, w8, lsl #10
  40d1f0:	ldr	w1, [sp, #40]
  40d1f4:	ldr	x2, [sp, #24]
  40d1f8:	mov	w3, #0x196                 	// #406
  40d1fc:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40d200:	add	x4, x4, #0x909
  40d204:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40d208:	add	x5, x5, #0x95b
  40d20c:	bl	403638 <log_internal_realm@plt>
  40d210:	str	w0, [sp, #8]
  40d214:	b	40d22c <relabel_cgroup_filesystems+0x1e0>
  40d218:	ldr	w0, [sp, #40]
  40d21c:	bl	403648 <abs@plt>
  40d220:	mov	w8, wzr
  40d224:	subs	w8, w8, w0, uxtb
  40d228:	str	w8, [sp, #8]
  40d22c:	ldr	w8, [sp, #8]
  40d230:	str	w8, [sp, #32]
  40d234:	ldr	w8, [sp, #32]
  40d238:	stur	w8, [x29, #-4]
  40d23c:	b	40d244 <relabel_cgroup_filesystems+0x1f8>
  40d240:	stur	wzr, [x29, #-4]
  40d244:	ldur	w0, [x29, #-4]
  40d248:	ldp	x29, x30, [sp, #192]
  40d24c:	add	sp, sp, #0xd0
  40d250:	ret

000000000040d254 <relabel_extra>:
  40d254:	sub	sp, sp, #0x120
  40d258:	stp	x29, x30, [sp, #256]
  40d25c:	str	x28, [sp, #272]
  40d260:	add	x29, sp, #0x100
  40d264:	mov	x8, xzr
  40d268:	adrp	x1, 40f000 <parse_argv.options+0x14a8>
  40d26c:	add	x1, x1, #0x996
  40d270:	mov	x0, x8
  40d274:	mov	w3, #0x12                  	// #18
  40d278:	adrp	x4, 40f000 <parse_argv.options+0x14a8>
  40d27c:	add	x4, x4, #0x99f
  40d280:	adrp	x9, 40f000 <parse_argv.options+0x14a8>
  40d284:	add	x9, x9, #0x4aa
  40d288:	add	x9, x9, #0x3
  40d28c:	adrp	x10, 40f000 <parse_argv.options+0x14a8>
  40d290:	add	x10, x10, #0x9bd
  40d294:	sub	x11, x29, #0x10
  40d298:	stur	x8, [x29, #-16]
  40d29c:	stur	wzr, [x29, #-32]
  40d2a0:	str	x0, [sp, #64]
  40d2a4:	mov	x0, x11
  40d2a8:	ldr	x2, [sp, #64]
  40d2ac:	str	x9, [sp, #56]
  40d2b0:	str	x10, [sp, #48]
  40d2b4:	bl	403f78 <conf_files_list@plt>
  40d2b8:	stur	w0, [x29, #-28]
  40d2bc:	ldur	w12, [x29, #-28]
  40d2c0:	cmp	w12, #0x0
  40d2c4:	cset	w12, ge  // ge = tcont
  40d2c8:	tbnz	w12, #0, 40d358 <relabel_extra+0x104>
  40d2cc:	mov	w8, #0x3                   	// #3
  40d2d0:	stur	w8, [x29, #-36]
  40d2d4:	ldur	w8, [x29, #-28]
  40d2d8:	stur	w8, [x29, #-40]
  40d2dc:	stur	wzr, [x29, #-44]
  40d2e0:	ldur	w0, [x29, #-44]
  40d2e4:	bl	403628 <log_get_max_level_realm@plt>
  40d2e8:	ldur	w8, [x29, #-36]
  40d2ec:	and	w8, w8, #0x7
  40d2f0:	cmp	w0, w8
  40d2f4:	b.lt	40d328 <relabel_extra+0xd4>  // b.tstop
  40d2f8:	ldur	w8, [x29, #-44]
  40d2fc:	ldur	w9, [x29, #-36]
  40d300:	orr	w0, w9, w8, lsl #10
  40d304:	ldur	w1, [x29, #-40]
  40d308:	ldr	x2, [sp, #56]
  40d30c:	mov	w3, #0x1ac                 	// #428
  40d310:	ldr	x4, [sp, #48]
  40d314:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40d318:	add	x5, x5, #0x9cb
  40d31c:	bl	403638 <log_internal_realm@plt>
  40d320:	str	w0, [sp, #44]
  40d324:	b	40d33c <relabel_extra+0xe8>
  40d328:	ldur	w0, [x29, #-40]
  40d32c:	bl	403648 <abs@plt>
  40d330:	mov	w8, wzr
  40d334:	subs	w8, w8, w0, uxtb
  40d338:	str	w8, [sp, #44]
  40d33c:	ldr	w8, [sp, #44]
  40d340:	stur	w8, [x29, #-48]
  40d344:	ldur	w8, [x29, #-48]
  40d348:	stur	w8, [x29, #-4]
  40d34c:	mov	w8, #0x1                   	// #1
  40d350:	stur	w8, [x29, #-52]
  40d354:	b	40d8a8 <relabel_extra+0x654>
  40d358:	ldur	x8, [x29, #-16]
  40d35c:	stur	x8, [x29, #-24]
  40d360:	ldur	x8, [x29, #-24]
  40d364:	mov	w9, #0x0                   	// #0
  40d368:	str	w9, [sp, #40]
  40d36c:	cbz	x8, 40d384 <relabel_extra+0x130>
  40d370:	ldur	x8, [x29, #-24]
  40d374:	ldr	x8, [x8]
  40d378:	cmp	x8, #0x0
  40d37c:	cset	w9, ne  // ne = any
  40d380:	str	w9, [sp, #40]
  40d384:	ldr	w8, [sp, #40]
  40d388:	tbnz	w8, #0, 40d390 <relabel_extra+0x13c>
  40d38c:	b	40d7f4 <relabel_extra+0x5a0>
  40d390:	mov	x8, xzr
  40d394:	stur	x8, [x29, #-64]
  40d398:	ldur	x8, [x29, #-24]
  40d39c:	ldr	x0, [x8]
  40d3a0:	adrp	x1, 40e000 <parse_argv.options+0x4a8>
  40d3a4:	add	x1, x1, #0x680
  40d3a8:	bl	403958 <fopen64@plt>
  40d3ac:	stur	x0, [x29, #-64]
  40d3b0:	ldur	x8, [x29, #-64]
  40d3b4:	cbnz	x8, 40d448 <relabel_extra+0x1f4>
  40d3b8:	mov	w8, #0x4                   	// #4
  40d3bc:	stur	w8, [x29, #-68]
  40d3c0:	bl	403768 <__errno_location@plt>
  40d3c4:	ldr	w8, [x0]
  40d3c8:	stur	w8, [x29, #-72]
  40d3cc:	stur	wzr, [x29, #-76]
  40d3d0:	ldur	w0, [x29, #-76]
  40d3d4:	bl	403628 <log_get_max_level_realm@plt>
  40d3d8:	ldur	w8, [x29, #-68]
  40d3dc:	and	w8, w8, #0x7
  40d3e0:	cmp	w0, w8
  40d3e4:	b.lt	40d420 <relabel_extra+0x1cc>  // b.tstop
  40d3e8:	ldur	w8, [x29, #-76]
  40d3ec:	ldur	w9, [x29, #-68]
  40d3f0:	orr	w0, w9, w8, lsl #10
  40d3f4:	ldur	w1, [x29, #-72]
  40d3f8:	ldur	x10, [x29, #-24]
  40d3fc:	ldr	x6, [x10]
  40d400:	ldr	x2, [sp, #56]
  40d404:	mov	w3, #0x1b3                 	// #435
  40d408:	ldr	x4, [sp, #48]
  40d40c:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40d410:	add	x5, x5, #0xa0b
  40d414:	bl	403638 <log_internal_realm@plt>
  40d418:	str	w0, [sp, #36]
  40d41c:	b	40d434 <relabel_extra+0x1e0>
  40d420:	ldur	w0, [x29, #-72]
  40d424:	bl	403648 <abs@plt>
  40d428:	mov	w8, wzr
  40d42c:	subs	w8, w8, w0, uxtb
  40d430:	str	w8, [sp, #36]
  40d434:	ldr	w8, [sp, #36]
  40d438:	stur	w8, [x29, #-80]
  40d43c:	mov	w8, #0x4                   	// #4
  40d440:	stur	w8, [x29, #-52]
  40d444:	b	40d7cc <relabel_extra+0x578>
  40d448:	sub	x2, x29, #0x58
  40d44c:	mov	x8, xzr
  40d450:	stur	x8, [x29, #-88]
  40d454:	ldur	x0, [x29, #-64]
  40d458:	mov	x1, #0x100000              	// #1048576
  40d45c:	bl	40d9f8 <read_line>
  40d460:	stur	w0, [x29, #-28]
  40d464:	ldur	w9, [x29, #-28]
  40d468:	cmp	w9, #0x0
  40d46c:	cset	w9, ge  // ge = tcont
  40d470:	tbnz	w9, #0, 40d500 <relabel_extra+0x2ac>
  40d474:	mov	w8, #0x4                   	// #4
  40d478:	stur	w8, [x29, #-92]
  40d47c:	ldur	w8, [x29, #-28]
  40d480:	stur	w8, [x29, #-96]
  40d484:	stur	wzr, [x29, #-100]
  40d488:	ldur	w0, [x29, #-100]
  40d48c:	bl	403628 <log_get_max_level_realm@plt>
  40d490:	ldur	w8, [x29, #-92]
  40d494:	and	w8, w8, #0x7
  40d498:	cmp	w0, w8
  40d49c:	b.lt	40d4d8 <relabel_extra+0x284>  // b.tstop
  40d4a0:	ldur	w8, [x29, #-100]
  40d4a4:	ldur	w9, [x29, #-92]
  40d4a8:	orr	w0, w9, w8, lsl #10
  40d4ac:	ldur	w1, [x29, #-96]
  40d4b0:	ldur	x10, [x29, #-24]
  40d4b4:	ldr	x6, [x10]
  40d4b8:	ldr	x2, [sp, #56]
  40d4bc:	mov	w3, #0x1bc                 	// #444
  40d4c0:	ldr	x4, [sp, #48]
  40d4c4:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40d4c8:	add	x5, x5, #0xa2b
  40d4cc:	bl	403638 <log_internal_realm@plt>
  40d4d0:	str	w0, [sp, #32]
  40d4d4:	b	40d4ec <relabel_extra+0x298>
  40d4d8:	ldur	w0, [x29, #-96]
  40d4dc:	bl	403648 <abs@plt>
  40d4e0:	mov	w8, wzr
  40d4e4:	subs	w8, w8, w0, uxtb
  40d4e8:	str	w8, [sp, #32]
  40d4ec:	ldr	w8, [sp, #32]
  40d4f0:	stur	w8, [x29, #-104]
  40d4f4:	mov	w8, #0x5                   	// #5
  40d4f8:	stur	w8, [x29, #-52]
  40d4fc:	b	40d6fc <relabel_extra+0x4a8>
  40d500:	ldur	w8, [x29, #-28]
  40d504:	cbnz	w8, 40d514 <relabel_extra+0x2c0>
  40d508:	mov	w8, #0x5                   	// #5
  40d50c:	stur	w8, [x29, #-52]
  40d510:	b	40d6fc <relabel_extra+0x4a8>
  40d514:	ldur	x0, [x29, #-88]
  40d518:	mov	w8, #0x1                   	// #1
  40d51c:	and	w1, w8, #0x1
  40d520:	bl	403f88 <path_simplify@plt>
  40d524:	ldur	x9, [x29, #-88]
  40d528:	mov	x0, x9
  40d52c:	bl	403f98 <path_is_normalized@plt>
  40d530:	tbnz	w0, #0, 40d5b8 <relabel_extra+0x364>
  40d534:	mov	w8, #0x4                   	// #4
  40d538:	stur	w8, [x29, #-108]
  40d53c:	stur	wzr, [x29, #-112]
  40d540:	stur	wzr, [x29, #-116]
  40d544:	ldur	w0, [x29, #-116]
  40d548:	bl	403628 <log_get_max_level_realm@plt>
  40d54c:	ldur	w8, [x29, #-108]
  40d550:	and	w8, w8, #0x7
  40d554:	cmp	w0, w8
  40d558:	b.lt	40d590 <relabel_extra+0x33c>  // b.tstop
  40d55c:	ldur	w8, [x29, #-116]
  40d560:	ldur	w9, [x29, #-108]
  40d564:	orr	w0, w9, w8, lsl #10
  40d568:	ldur	w1, [x29, #-112]
  40d56c:	ldur	x6, [x29, #-88]
  40d570:	ldr	x2, [sp, #56]
  40d574:	mov	w3, #0x1c5                 	// #453
  40d578:	ldr	x4, [sp, #48]
  40d57c:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40d580:	add	x5, x5, #0xa4b
  40d584:	bl	403638 <log_internal_realm@plt>
  40d588:	str	w0, [sp, #28]
  40d58c:	b	40d5a4 <relabel_extra+0x350>
  40d590:	ldur	w0, [x29, #-112]
  40d594:	bl	403648 <abs@plt>
  40d598:	mov	w8, wzr
  40d59c:	subs	w8, w8, w0, uxtb
  40d5a0:	str	w8, [sp, #28]
  40d5a4:	ldr	w8, [sp, #28]
  40d5a8:	stur	w8, [x29, #-120]
  40d5ac:	mov	w8, #0x6                   	// #6
  40d5b0:	stur	w8, [x29, #-52]
  40d5b4:	b	40d6fc <relabel_extra+0x4a8>
  40d5b8:	ldur	x0, [x29, #-88]
  40d5bc:	bl	403fa8 <path_is_absolute@plt>
  40d5c0:	tbnz	w0, #0, 40d648 <relabel_extra+0x3f4>
  40d5c4:	mov	w8, #0x4                   	// #4
  40d5c8:	stur	w8, [x29, #-124]
  40d5cc:	str	wzr, [sp, #128]
  40d5d0:	str	wzr, [sp, #124]
  40d5d4:	ldr	w0, [sp, #124]
  40d5d8:	bl	403628 <log_get_max_level_realm@plt>
  40d5dc:	ldur	w8, [x29, #-124]
  40d5e0:	and	w8, w8, #0x7
  40d5e4:	cmp	w0, w8
  40d5e8:	b.lt	40d620 <relabel_extra+0x3cc>  // b.tstop
  40d5ec:	ldr	w8, [sp, #124]
  40d5f0:	ldur	w9, [x29, #-124]
  40d5f4:	orr	w0, w9, w8, lsl #10
  40d5f8:	ldr	w1, [sp, #128]
  40d5fc:	ldur	x6, [x29, #-88]
  40d600:	ldr	x2, [sp, #56]
  40d604:	mov	w3, #0x1ca                 	// #458
  40d608:	ldr	x4, [sp, #48]
  40d60c:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40d610:	add	x5, x5, #0xa7b
  40d614:	bl	403638 <log_internal_realm@plt>
  40d618:	str	w0, [sp, #24]
  40d61c:	b	40d634 <relabel_extra+0x3e0>
  40d620:	ldr	w0, [sp, #128]
  40d624:	bl	403648 <abs@plt>
  40d628:	mov	w8, wzr
  40d62c:	subs	w8, w8, w0, uxtb
  40d630:	str	w8, [sp, #24]
  40d634:	ldr	w8, [sp, #24]
  40d638:	str	w8, [sp, #120]
  40d63c:	mov	w8, #0x6                   	// #6
  40d640:	stur	w8, [x29, #-52]
  40d644:	b	40d6fc <relabel_extra+0x4a8>
  40d648:	mov	w8, #0x7                   	// #7
  40d64c:	str	w8, [sp, #116]
  40d650:	str	wzr, [sp, #112]
  40d654:	str	wzr, [sp, #108]
  40d658:	ldr	w0, [sp, #108]
  40d65c:	bl	403628 <log_get_max_level_realm@plt>
  40d660:	ldr	w8, [sp, #116]
  40d664:	and	w8, w8, #0x7
  40d668:	cmp	w0, w8
  40d66c:	b.lt	40d6a4 <relabel_extra+0x450>  // b.tstop
  40d670:	ldr	w8, [sp, #108]
  40d674:	ldr	w9, [sp, #116]
  40d678:	orr	w0, w9, w8, lsl #10
  40d67c:	ldr	w1, [sp, #112]
  40d680:	ldur	x6, [x29, #-88]
  40d684:	ldr	x2, [sp, #56]
  40d688:	mov	w3, #0x1ce                 	// #462
  40d68c:	ldr	x4, [sp, #48]
  40d690:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40d694:	add	x5, x5, #0xaa9
  40d698:	bl	403638 <log_internal_realm@plt>
  40d69c:	str	w0, [sp, #20]
  40d6a0:	b	40d6b8 <relabel_extra+0x464>
  40d6a4:	ldr	w0, [sp, #112]
  40d6a8:	bl	403648 <abs@plt>
  40d6ac:	mov	w8, wzr
  40d6b0:	subs	w8, w8, w0, uxtb
  40d6b4:	str	w8, [sp, #20]
  40d6b8:	ldr	w8, [sp, #20]
  40d6bc:	str	w8, [sp, #104]
  40d6c0:	ldur	x0, [x29, #-88]
  40d6c4:	mov	w8, wzr
  40d6c8:	mov	w1, w8
  40d6cc:	bl	403e78 <label_fix@plt>
  40d6d0:	ldur	x9, [x29, #-88]
  40d6d4:	mov	x0, x9
  40d6d8:	adrp	x1, 40c000 <mount_cgroup_controllers+0x284>
  40d6dc:	add	x1, x1, #0xf64
  40d6e0:	mov	w2, #0x40                  	// #64
  40d6e4:	mov	w3, #0x13                  	// #19
  40d6e8:	bl	403f08 <nftw64@plt>
  40d6ec:	ldur	w8, [x29, #-32]
  40d6f0:	add	w8, w8, #0x1
  40d6f4:	stur	w8, [x29, #-32]
  40d6f8:	stur	wzr, [x29, #-52]
  40d6fc:	sub	x0, x29, #0x58
  40d700:	bl	40c16c <freep>
  40d704:	ldur	w8, [x29, #-52]
  40d708:	str	w8, [sp, #16]
  40d70c:	cbz	w8, 40d728 <relabel_extra+0x4d4>
  40d710:	b	40d714 <relabel_extra+0x4c0>
  40d714:	ldr	w8, [sp, #16]
  40d718:	cmp	w8, #0x5
  40d71c:	b.eq	40d72c <relabel_extra+0x4d8>  // b.none
  40d720:	b	40d724 <relabel_extra+0x4d0>
  40d724:	b	40d448 <relabel_extra+0x1f4>
  40d728:	b	40d448 <relabel_extra+0x1f4>
  40d72c:	ldur	x8, [x29, #-24]
  40d730:	ldr	x0, [x8]
  40d734:	bl	403fb8 <unlink@plt>
  40d738:	cmp	w0, #0x0
  40d73c:	cset	w9, ge  // ge = tcont
  40d740:	tbnz	w9, #0, 40d7c8 <relabel_extra+0x574>
  40d744:	mov	w8, #0x4                   	// #4
  40d748:	str	w8, [sp, #100]
  40d74c:	bl	403768 <__errno_location@plt>
  40d750:	ldr	w8, [x0]
  40d754:	str	w8, [sp, #96]
  40d758:	str	wzr, [sp, #92]
  40d75c:	ldr	w0, [sp, #92]
  40d760:	bl	403628 <log_get_max_level_realm@plt>
  40d764:	ldr	w8, [sp, #100]
  40d768:	and	w8, w8, #0x7
  40d76c:	cmp	w0, w8
  40d770:	b.lt	40d7ac <relabel_extra+0x558>  // b.tstop
  40d774:	ldr	w8, [sp, #92]
  40d778:	ldr	w9, [sp, #100]
  40d77c:	orr	w0, w9, w8, lsl #10
  40d780:	ldr	w1, [sp, #96]
  40d784:	ldur	x10, [x29, #-24]
  40d788:	ldr	x6, [x10]
  40d78c:	ldr	x2, [sp, #56]
  40d790:	mov	w3, #0x1d5                 	// #469
  40d794:	ldr	x4, [sp, #48]
  40d798:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40d79c:	add	x5, x5, #0xad5
  40d7a0:	bl	403638 <log_internal_realm@plt>
  40d7a4:	str	w0, [sp, #12]
  40d7a8:	b	40d7c0 <relabel_extra+0x56c>
  40d7ac:	ldr	w0, [sp, #96]
  40d7b0:	bl	403648 <abs@plt>
  40d7b4:	mov	w8, wzr
  40d7b8:	subs	w8, w8, w0, uxtb
  40d7bc:	str	w8, [sp, #12]
  40d7c0:	ldr	w8, [sp, #12]
  40d7c4:	str	w8, [sp, #88]
  40d7c8:	stur	wzr, [x29, #-52]
  40d7cc:	sub	x0, x29, #0x40
  40d7d0:	bl	40d9d0 <fclosep>
  40d7d4:	ldur	w8, [x29, #-52]
  40d7d8:	cbz	w8, 40d7e4 <relabel_extra+0x590>
  40d7dc:	b	40d7e0 <relabel_extra+0x58c>
  40d7e0:	b	40d7e4 <relabel_extra+0x590>
  40d7e4:	ldur	x8, [x29, #-24]
  40d7e8:	add	x8, x8, #0x8
  40d7ec:	stur	x8, [x29, #-24]
  40d7f0:	b	40d360 <relabel_extra+0x10c>
  40d7f4:	adrp	x0, 40f000 <parse_argv.options+0x14a8>
  40d7f8:	add	x0, x0, #0xaf7
  40d7fc:	bl	403ec8 <rmdir@plt>
  40d800:	cmp	w0, #0x0
  40d804:	cset	w8, ge  // ge = tcont
  40d808:	tbnz	w8, #0, 40d898 <relabel_extra+0x644>
  40d80c:	bl	403768 <__errno_location@plt>
  40d810:	ldr	w8, [x0]
  40d814:	cmp	w8, #0x2
  40d818:	b.eq	40d898 <relabel_extra+0x644>  // b.none
  40d81c:	mov	w8, #0x4                   	// #4
  40d820:	str	w8, [sp, #84]
  40d824:	bl	403768 <__errno_location@plt>
  40d828:	ldr	w8, [x0]
  40d82c:	str	w8, [sp, #80]
  40d830:	str	wzr, [sp, #76]
  40d834:	ldr	w0, [sp, #76]
  40d838:	bl	403628 <log_get_max_level_realm@plt>
  40d83c:	ldr	w8, [sp, #84]
  40d840:	and	w8, w8, #0x7
  40d844:	cmp	w0, w8
  40d848:	b.lt	40d87c <relabel_extra+0x628>  // b.tstop
  40d84c:	ldr	w8, [sp, #76]
  40d850:	ldr	w9, [sp, #84]
  40d854:	orr	w0, w9, w8, lsl #10
  40d858:	ldr	w1, [sp, #80]
  40d85c:	ldr	x2, [sp, #56]
  40d860:	mov	w3, #0x1db                 	// #475
  40d864:	ldr	x4, [sp, #48]
  40d868:	adrp	x5, 40f000 <parse_argv.options+0x14a8>
  40d86c:	add	x5, x5, #0xb14
  40d870:	bl	403638 <log_internal_realm@plt>
  40d874:	str	w0, [sp, #8]
  40d878:	b	40d890 <relabel_extra+0x63c>
  40d87c:	ldr	w0, [sp, #80]
  40d880:	bl	403648 <abs@plt>
  40d884:	mov	w8, wzr
  40d888:	subs	w8, w8, w0, uxtb
  40d88c:	str	w8, [sp, #8]
  40d890:	ldr	w8, [sp, #8]
  40d894:	str	w8, [sp, #72]
  40d898:	ldur	w8, [x29, #-32]
  40d89c:	stur	w8, [x29, #-4]
  40d8a0:	mov	w8, #0x1                   	// #1
  40d8a4:	stur	w8, [x29, #-52]
  40d8a8:	sub	x0, x29, #0x10
  40d8ac:	bl	40d99c <strv_freep>
  40d8b0:	ldur	w0, [x29, #-4]
  40d8b4:	ldr	x28, [sp, #272]
  40d8b8:	ldp	x29, x30, [sp, #256]
  40d8bc:	add	sp, sp, #0x120
  40d8c0:	ret

000000000040d8c4 <set_free_free>:
  40d8c4:	sub	sp, sp, #0x20
  40d8c8:	stp	x29, x30, [sp, #16]
  40d8cc:	add	x29, sp, #0x10
  40d8d0:	adrp	x1, 42f000 <__FRAME_END__+0x1f368>
  40d8d4:	ldr	x1, [x1, #2712]
  40d8d8:	mov	x8, xzr
  40d8dc:	str	x0, [sp, #8]
  40d8e0:	ldr	x0, [sp, #8]
  40d8e4:	mov	x2, x8
  40d8e8:	bl	403d78 <internal_hashmap_free@plt>
  40d8ec:	ldp	x29, x30, [sp, #16]
  40d8f0:	add	sp, sp, #0x20
  40d8f4:	ret

000000000040d8f8 <strna>:
  40d8f8:	sub	sp, sp, #0x20
  40d8fc:	str	x0, [sp, #24]
  40d900:	ldr	x8, [sp, #24]
  40d904:	str	x8, [sp, #16]
  40d908:	cbz	x8, 40d918 <strna+0x20>
  40d90c:	ldr	x8, [sp, #16]
  40d910:	str	x8, [sp, #8]
  40d914:	b	40d924 <strna+0x2c>
  40d918:	adrp	x8, 40f000 <parse_argv.options+0x14a8>
  40d91c:	add	x8, x8, #0x3be
  40d920:	str	x8, [sp, #8]
  40d924:	ldr	x8, [sp, #8]
  40d928:	mov	x0, x8
  40d92c:	add	sp, sp, #0x20
  40d930:	ret

000000000040d934 <size_multiply_overflow>:
  40d934:	sub	sp, sp, #0x20
  40d938:	str	x0, [sp, #24]
  40d93c:	str	x1, [sp, #16]
  40d940:	ldr	x8, [sp, #16]
  40d944:	mov	w9, #0x0                   	// #0
  40d948:	str	w9, [sp, #12]
  40d94c:	cbz	x8, 40d96c <size_multiply_overflow+0x38>
  40d950:	ldr	x8, [sp, #24]
  40d954:	ldr	x9, [sp, #16]
  40d958:	mov	x10, #0xffffffffffffffff    	// #-1
  40d95c:	udiv	x9, x10, x9
  40d960:	cmp	x8, x9
  40d964:	cset	w11, hi  // hi = pmore
  40d968:	str	w11, [sp, #12]
  40d96c:	ldr	w8, [sp, #12]
  40d970:	mov	w9, #0x1                   	// #1
  40d974:	eor	w8, w8, #0x1
  40d978:	eor	w8, w8, w9
  40d97c:	and	w8, w8, #0x1
  40d980:	mov	w0, w8
  40d984:	sxtw	x10, w0
  40d988:	cmp	x10, #0x0
  40d98c:	cset	w8, ne  // ne = any
  40d990:	and	w0, w8, #0x1
  40d994:	add	sp, sp, #0x20
  40d998:	ret

000000000040d99c <strv_freep>:
  40d99c:	sub	sp, sp, #0x20
  40d9a0:	stp	x29, x30, [sp, #16]
  40d9a4:	add	x29, sp, #0x10
  40d9a8:	str	x0, [sp, #8]
  40d9ac:	ldr	x8, [sp, #8]
  40d9b0:	ldr	x8, [x8]
  40d9b4:	cbz	x8, 40d9c4 <strv_freep+0x28>
  40d9b8:	ldr	x8, [sp, #8]
  40d9bc:	ldr	x0, [x8]
  40d9c0:	bl	403fc8 <strv_free@plt>
  40d9c4:	ldp	x29, x30, [sp, #16]
  40d9c8:	add	sp, sp, #0x20
  40d9cc:	ret

000000000040d9d0 <fclosep>:
  40d9d0:	sub	sp, sp, #0x20
  40d9d4:	stp	x29, x30, [sp, #16]
  40d9d8:	add	x29, sp, #0x10
  40d9dc:	str	x0, [sp, #8]
  40d9e0:	ldr	x8, [sp, #8]
  40d9e4:	ldr	x0, [x8]
  40d9e8:	bl	403988 <safe_fclose@plt>
  40d9ec:	ldp	x29, x30, [sp, #16]
  40d9f0:	add	sp, sp, #0x20
  40d9f4:	ret

000000000040d9f8 <read_line>:
  40d9f8:	sub	sp, sp, #0x30
  40d9fc:	stp	x29, x30, [sp, #32]
  40da00:	add	x29, sp, #0x20
  40da04:	mov	w8, wzr
  40da08:	stur	x0, [x29, #-8]
  40da0c:	str	x1, [sp, #16]
  40da10:	str	x2, [sp, #8]
  40da14:	ldur	x0, [x29, #-8]
  40da18:	ldr	x1, [sp, #16]
  40da1c:	ldr	x3, [sp, #8]
  40da20:	mov	w2, w8
  40da24:	bl	403998 <read_line_full@plt>
  40da28:	ldp	x29, x30, [sp, #32]
  40da2c:	add	sp, sp, #0x30
  40da30:	ret
  40da34:	udf	#0

000000000040da38 <__libc_csu_init>:
  40da38:	stp	x29, x30, [sp, #-64]!
  40da3c:	mov	x29, sp
  40da40:	stp	x19, x20, [sp, #16]
  40da44:	adrp	x20, 42f000 <__FRAME_END__+0x1f368>
  40da48:	add	x20, x20, #0x3d0
  40da4c:	stp	x21, x22, [sp, #32]
  40da50:	adrp	x21, 42f000 <__FRAME_END__+0x1f368>
  40da54:	add	x21, x21, #0x3c8
  40da58:	sub	x20, x20, x21
  40da5c:	mov	w22, w0
  40da60:	stp	x23, x24, [sp, #48]
  40da64:	mov	x23, x1
  40da68:	mov	x24, x2
  40da6c:	bl	403560 <_init>
  40da70:	cmp	xzr, x20, asr #3
  40da74:	b.eq	40daa0 <__libc_csu_init+0x68>  // b.none
  40da78:	asr	x20, x20, #3
  40da7c:	mov	x19, #0x0                   	// #0
  40da80:	ldr	x3, [x21, x19, lsl #3]
  40da84:	mov	x2, x24
  40da88:	add	x19, x19, #0x1
  40da8c:	mov	x1, x23
  40da90:	mov	w0, w22
  40da94:	blr	x3
  40da98:	cmp	x20, x19
  40da9c:	b.ne	40da80 <__libc_csu_init+0x48>  // b.any
  40daa0:	ldp	x19, x20, [sp, #16]
  40daa4:	ldp	x21, x22, [sp, #32]
  40daa8:	ldp	x23, x24, [sp, #48]
  40daac:	ldp	x29, x30, [sp], #64
  40dab0:	ret
  40dab4:	nop

000000000040dab8 <__libc_csu_fini>:
  40dab8:	ret
  40dabc:	udf	#0

000000000040dac0 <lstat64>:
  40dac0:	mov	x2, x1
  40dac4:	mov	x1, x0
  40dac8:	mov	w0, #0x0                   	// #0
  40dacc:	b	404018 <__lxstat64@plt>

Disassembly of section .fini:

000000000040dad0 <_fini>:
  40dad0:	stp	x29, x30, [sp, #-16]!
  40dad4:	mov	x29, sp
  40dad8:	ldp	x29, x30, [sp], #16
  40dadc:	ret
