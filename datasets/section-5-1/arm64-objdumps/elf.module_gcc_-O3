
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//elf.module_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <grub_elf32_load_phdrs.part.0>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	adrp	x3, 0 <grub_elf32_load_phdrs.part.0>
   8:	adrp	x2, 0 <grub_elf32_load_phdrs.part.0>
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	mov	x19, x0
  18:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
  1c:	ldr	x3, [x3]
  20:	mov	w1, #0x11                  	// #17
  24:	ldrh	w5, [x19, #50]
  28:	ldrh	w20, [x19, #52]
  2c:	ldr	x2, [x2]
  30:	ldr	x0, [x0]
  34:	mul	w20, w20, w5
  38:	ldr	w4, [x19, #36]
  3c:	mov	x5, x20
  40:	bl	0 <grub_real_dprintf>
  44:	mov	x0, x20
  48:	bl	0 <grub_malloc>
  4c:	str	x0, [x19, #72]
  50:	cbz	x0, c4 <grub_elf32_load_phdrs.part.0+0xc4>
  54:	ldr	w1, [x19, #36]
  58:	ldr	x0, [x19]
  5c:	bl	0 <grub_file_seek>
  60:	cmn	x0, #0x1
  64:	b.eq	90 <grub_elf32_load_phdrs.part.0+0x90>  // b.none
  68:	ldr	x0, [x19]
  6c:	mov	x2, x20
  70:	ldr	x1, [x19, #72]
  74:	bl	0 <grub_file_read>
  78:	cmp	x20, x0
  7c:	b.ne	90 <grub_elf32_load_phdrs.part.0+0x90>  // b.any
  80:	mov	w0, #0x0                   	// #0
  84:	ldp	x19, x20, [sp, #16]
  88:	ldp	x29, x30, [sp], #32
  8c:	ret
  90:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
  94:	ldr	x20, [x0]
  98:	ldr	w0, [x20]
  9c:	cbnz	w0, 84 <grub_elf32_load_phdrs.part.0+0x84>
  a0:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
  a4:	mov	w0, #0x6                   	// #6
  a8:	ldr	x2, [x19, #80]
  ac:	ldr	x1, [x1]
  b0:	bl	0 <grub_error>
  b4:	ldr	w0, [x20]
  b8:	ldp	x19, x20, [sp, #16]
  bc:	ldp	x29, x30, [sp], #32
  c0:	ret
  c4:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
  c8:	ldp	x19, x20, [sp, #16]
  cc:	ldr	x0, [x0]
  d0:	ldp	x29, x30, [sp], #32
  d4:	ldr	w0, [x0]
  d8:	ret
  dc:	nop
	...

0000000000000108 <grub_elf64_load_phdrs.part.0>:
 108:	stp	x29, x30, [sp, #-32]!
 10c:	adrp	x3, 0 <grub_elf32_load_phdrs.part.0>
 110:	adrp	x2, 0 <grub_elf32_load_phdrs.part.0>
 114:	mov	x29, sp
 118:	stp	x19, x20, [sp, #16]
 11c:	mov	x19, x0
 120:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 124:	ldr	x3, [x3]
 128:	mov	w1, #0x11                  	// #17
 12c:	ldrh	w4, [x19, #62]
 130:	ldrh	w20, [x19, #64]
 134:	ldr	x2, [x2]
 138:	ldr	x0, [x0]
 13c:	mul	w20, w20, w4
 140:	ldr	x4, [x19, #40]
 144:	mov	x5, x20
 148:	bl	0 <grub_real_dprintf>
 14c:	mov	x0, x20
 150:	bl	0 <grub_malloc>
 154:	str	x0, [x19, #72]
 158:	cbz	x0, 1cc <grub_elf64_load_phdrs.part.0+0xc4>
 15c:	ldr	x0, [x19]
 160:	ldr	x1, [x19, #40]
 164:	bl	0 <grub_file_seek>
 168:	cmn	x0, #0x1
 16c:	b.eq	198 <grub_elf64_load_phdrs.part.0+0x90>  // b.none
 170:	ldr	x0, [x19]
 174:	mov	x2, x20
 178:	ldr	x1, [x19, #72]
 17c:	bl	0 <grub_file_read>
 180:	cmp	x20, x0
 184:	b.ne	198 <grub_elf64_load_phdrs.part.0+0x90>  // b.any
 188:	mov	w0, #0x0                   	// #0
 18c:	ldp	x19, x20, [sp, #16]
 190:	ldp	x29, x30, [sp], #32
 194:	ret
 198:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 19c:	ldr	x20, [x0]
 1a0:	ldr	w0, [x20]
 1a4:	cbnz	w0, 18c <grub_elf64_load_phdrs.part.0+0x84>
 1a8:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 1ac:	mov	w0, #0x6                   	// #6
 1b0:	ldr	x2, [x19, #80]
 1b4:	ldr	x1, [x1]
 1b8:	bl	0 <grub_error>
 1bc:	ldr	w0, [x20]
 1c0:	ldp	x19, x20, [sp, #16]
 1c4:	ldp	x29, x30, [sp], #32
 1c8:	ret
 1cc:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 1d0:	ldp	x19, x20, [sp, #16]
 1d4:	ldr	x0, [x0]
 1d8:	ldp	x29, x30, [sp], #32
 1dc:	ldr	w0, [x0]
 1e0:	ret
 1e4:	nop
	...

0000000000000210 <grub_elf_close>:
 210:	stp	x29, x30, [sp, #-32]!
 214:	mov	x29, sp
 218:	stp	x19, x20, [sp, #16]
 21c:	mov	x19, x0
 220:	ldr	x0, [x0, #72]
 224:	ldr	x20, [x19]
 228:	bl	0 <grub_free>
 22c:	ldr	x0, [x19, #80]
 230:	bl	0 <grub_free>
 234:	mov	x0, x19
 238:	bl	0 <grub_free>
 23c:	cbz	x20, 248 <grub_elf_close+0x38>
 240:	mov	x0, x20
 244:	bl	0 <grub_file_close>
 248:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 24c:	ldp	x19, x20, [sp, #16]
 250:	ldr	x0, [x0]
 254:	ldp	x29, x30, [sp], #32
 258:	ldr	w0, [x0]
 25c:	ret
	...

0000000000000268 <grub_elf_file>:
 268:	stp	x29, x30, [sp, #-48]!
 26c:	mov	x29, sp
 270:	stp	x19, x20, [sp, #16]
 274:	mov	x20, x0
 278:	mov	x0, #0x58                  	// #88
 27c:	str	x21, [sp, #32]
 280:	mov	x21, x1
 284:	bl	0 <grub_zalloc>
 288:	mov	x19, x0
 28c:	cbz	x0, 328 <grub_elf_file+0xc0>
 290:	str	x20, [x19]
 294:	mov	x0, x20
 298:	mov	x1, #0x0                   	// #0
 29c:	bl	0 <grub_file_seek>
 2a0:	cmn	x0, #0x1
 2a4:	b.eq	360 <grub_elf_file+0xf8>  // b.none
 2a8:	mov	x20, x19
 2ac:	mov	x2, #0x40                  	// #64
 2b0:	ldr	x0, [x20], #8
 2b4:	mov	x1, x20
 2b8:	bl	0 <grub_file_read>
 2bc:	cmp	x0, #0x40
 2c0:	b.ne	33c <grub_elf_file+0xd4>  // b.any
 2c4:	ldr	w1, [x19, #8]
 2c8:	mov	w0, #0x457f                	// #17791
 2cc:	movk	w0, #0x464c, lsl #16
 2d0:	cmp	w1, w0
 2d4:	b.ne	3a0 <grub_elf_file+0x138>  // b.any
 2d8:	ldrb	w0, [x20, #6]
 2dc:	cmp	w0, #0x1
 2e0:	b.ne	3a0 <grub_elf_file+0x138>  // b.any
 2e4:	ldrb	w0, [x19, #12]
 2e8:	cmp	w0, #0x1
 2ec:	b.eq	2f8 <grub_elf_file+0x90>  // b.none
 2f0:	cmp	w0, #0x2
 2f4:	b.ne	3b4 <grub_elf_file+0x14c>  // b.any
 2f8:	ldrb	w0, [x20, #5]
 2fc:	cmp	w0, #0x1
 300:	b.eq	390 <grub_elf_file+0x128>  // b.none
 304:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 308:	mov	w0, #0x15                  	// #21
 30c:	ldr	x1, [x1]
 310:	bl	0 <grub_error>
 314:	cbnz	w0, 360 <grub_elf_file+0xf8>
 318:	mov	x0, x21
 31c:	bl	0 <grub_strdup>
 320:	str	x0, [x19, #80]
 324:	cbz	x0, 364 <grub_elf_file+0xfc>
 328:	mov	x0, x19
 32c:	ldp	x19, x20, [sp, #16]
 330:	ldr	x21, [sp, #32]
 334:	ldp	x29, x30, [sp], #48
 338:	ret
 33c:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 340:	ldr	x0, [x0]
 344:	ldr	w0, [x0]
 348:	cbnz	w0, 360 <grub_elf_file+0xf8>
 34c:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 350:	mov	x2, x21
 354:	mov	w0, #0x6                   	// #6
 358:	ldr	x1, [x1]
 35c:	bl	0 <grub_error>
 360:	ldr	x0, [x19, #80]
 364:	bl	0 <grub_free>
 368:	ldr	x0, [x19, #72]
 36c:	bl	0 <grub_free>
 370:	mov	x0, x19
 374:	mov	x19, #0x0                   	// #0
 378:	bl	0 <grub_free>
 37c:	mov	x0, x19
 380:	ldp	x19, x20, [sp, #16]
 384:	ldr	x21, [sp, #32]
 388:	ldp	x29, x30, [sp], #48
 38c:	ret
 390:	ldr	w0, [x20, #20]
 394:	cmp	w0, #0x1
 398:	b.eq	318 <grub_elf_file+0xb0>  // b.none
 39c:	nop
 3a0:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 3a4:	mov	w0, #0x15                  	// #21
 3a8:	ldr	x1, [x1]
 3ac:	bl	0 <grub_error>
 3b0:	b	314 <grub_elf_file+0xac>
 3b4:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 3b8:	mov	w0, #0x15                  	// #21
 3bc:	ldr	x1, [x1]
 3c0:	bl	0 <grub_error>
 3c4:	b	314 <grub_elf_file+0xac>
	...

00000000000003f0 <grub_elf_open>:
 3f0:	stp	x29, x30, [sp, #-32]!
 3f4:	mov	x29, sp
 3f8:	stp	x19, x20, [sp, #16]
 3fc:	mov	x19, x0
 400:	bl	0 <grub_file_open>
 404:	cbz	x0, 42c <grub_elf_open+0x3c>
 408:	mov	x1, x19
 40c:	mov	x20, x0
 410:	bl	268 <grub_elf_file>
 414:	mov	x19, x0
 418:	cbz	x0, 440 <grub_elf_open+0x50>
 41c:	mov	x0, x19
 420:	ldp	x19, x20, [sp, #16]
 424:	ldp	x29, x30, [sp], #32
 428:	ret
 42c:	mov	x19, #0x0                   	// #0
 430:	mov	x0, x19
 434:	ldp	x19, x20, [sp, #16]
 438:	ldp	x29, x30, [sp], #32
 43c:	ret
 440:	mov	x0, x20
 444:	bl	0 <grub_file_close>
 448:	mov	x0, x19
 44c:	ldp	x19, x20, [sp, #16]
 450:	ldp	x29, x30, [sp], #32
 454:	ret

0000000000000458 <grub_elf_is_elf32>:
 458:	ldrb	w0, [x0, #12]
 45c:	cmp	w0, #0x1
 460:	cset	w0, eq  // eq = none
 464:	ret

0000000000000468 <grub_elf32_load_phdrs>:
 468:	stp	x29, x30, [sp, #-32]!
 46c:	mov	x29, sp
 470:	stp	x19, x20, [sp, #16]
 474:	mov	x19, x0
 478:	ldr	x0, [x0, #72]
 47c:	cbz	x0, 490 <grub_elf32_load_phdrs+0x28>
 480:	mov	w0, #0x0                   	// #0
 484:	ldp	x19, x20, [sp, #16]
 488:	ldp	x29, x30, [sp], #32
 48c:	ret
 490:	ldrh	w5, [x19, #50]
 494:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 498:	ldrh	w20, [x19, #52]
 49c:	adrp	x2, 0 <grub_elf32_load_phdrs.part.0>
 4a0:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 4a4:	ldr	w4, [x19, #36]
 4a8:	ldr	x3, [x1]
 4ac:	mov	w1, #0x11                  	// #17
 4b0:	mul	w20, w20, w5
 4b4:	ldr	x2, [x2]
 4b8:	mov	x5, x20
 4bc:	ldr	x0, [x0]
 4c0:	bl	0 <grub_real_dprintf>
 4c4:	mov	x0, x20
 4c8:	bl	0 <grub_malloc>
 4cc:	str	x0, [x19, #72]
 4d0:	cbz	x0, 52c <grub_elf32_load_phdrs+0xc4>
 4d4:	ldr	w1, [x19, #36]
 4d8:	ldr	x0, [x19]
 4dc:	bl	0 <grub_file_seek>
 4e0:	cmn	x0, #0x1
 4e4:	b.eq	500 <grub_elf32_load_phdrs+0x98>  // b.none
 4e8:	ldr	x0, [x19]
 4ec:	mov	x2, x20
 4f0:	ldr	x1, [x19, #72]
 4f4:	bl	0 <grub_file_read>
 4f8:	cmp	x20, x0
 4fc:	b.eq	480 <grub_elf32_load_phdrs+0x18>  // b.none
 500:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 504:	ldr	x20, [x0]
 508:	ldr	w0, [x20]
 50c:	cbnz	w0, 484 <grub_elf32_load_phdrs+0x1c>
 510:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 514:	mov	w0, #0x6                   	// #6
 518:	ldr	x2, [x19, #80]
 51c:	ldr	x1, [x1]
 520:	bl	0 <grub_error>
 524:	ldr	w0, [x20]
 528:	b	484 <grub_elf32_load_phdrs+0x1c>
 52c:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 530:	ldr	x0, [x0]
 534:	ldr	w0, [x0]
 538:	b	484 <grub_elf32_load_phdrs+0x1c>
 53c:	nop
	...

0000000000000568 <grub_elf32_size>:
 568:	stp	x29, x30, [sp, #-48]!
 56c:	mov	x29, sp
 570:	ldr	x3, [x0, #72]
 574:	stp	x19, x20, [sp, #16]
 578:	mov	x20, x0
 57c:	str	x21, [sp, #32]
 580:	mov	x19, x1
 584:	mov	x21, x2
 588:	cbz	x3, 62c <grub_elf32_size+0xc4>
 58c:	ldrh	w9, [x20, #52]
 590:	add	x9, x3, x9, lsl #5
 594:	cmp	x9, x3
 598:	b.ls	688 <grub_elf32_size+0x120>  // b.plast
 59c:	mov	w6, #0xffffffff            	// #-1
 5a0:	mov	w10, #0x0                   	// #0
 5a4:	mov	w7, #0x1                   	// #1
 5a8:	mov	w0, #0x0                   	// #0
 5ac:	nop
 5b0:	ldr	w4, [x3]
 5b4:	cmp	w4, #0x1
 5b8:	b.ne	5e8 <grub_elf32_size+0x80>  // b.any
 5bc:	ldr	w5, [x3, #12]
 5c0:	add	w10, w10, #0x1
 5c4:	ldr	w4, [x3, #20]
 5c8:	ldr	w8, [x3, #28]
 5cc:	cmp	w6, w5
 5d0:	add	w4, w5, w4
 5d4:	csel	w6, w6, w5, ls  // ls = plast
 5d8:	cmp	w0, w4
 5dc:	csel	w0, w0, w4, cs  // cs = hs, nlast
 5e0:	cmp	w7, w8
 5e4:	csel	w7, w7, w8, cs  // cs = hs, nlast
 5e8:	add	x3, x3, #0x20
 5ec:	cmp	x9, x3
 5f0:	b.hi	5b0 <grub_elf32_size+0x48>  // b.pmore
 5f4:	cbz	x19, 5fc <grub_elf32_size+0x94>
 5f8:	str	wzr, [x19]
 5fc:	cbz	w10, 640 <grub_elf32_size+0xd8>
 600:	cmp	w6, w0
 604:	b.hi	664 <grub_elf32_size+0xfc>  // b.pmore
 608:	cbz	x19, 610 <grub_elf32_size+0xa8>
 60c:	str	w6, [x19]
 610:	cbz	x21, 618 <grub_elf32_size+0xb0>
 614:	str	w7, [x21]
 618:	sub	w0, w0, w6
 61c:	ldp	x19, x20, [sp, #16]
 620:	ldr	x21, [sp, #32]
 624:	ldp	x29, x30, [sp], #48
 628:	ret
 62c:	bl	0 <grub_elf32_load_phdrs.part.0>
 630:	ldr	x3, [x20, #72]
 634:	cbnz	x3, 58c <grub_elf32_size+0x24>
 638:	cbz	x19, 640 <grub_elf32_size+0xd8>
 63c:	str	wzr, [x19]
 640:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 644:	mov	w0, #0x15                  	// #21
 648:	ldr	x1, [x1]
 64c:	bl	0 <grub_error>
 650:	mov	x0, #0x0                   	// #0
 654:	ldp	x19, x20, [sp, #16]
 658:	ldr	x21, [sp, #32]
 65c:	ldp	x29, x30, [sp], #48
 660:	ret
 664:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 668:	mov	w0, #0x15                  	// #21
 66c:	ldr	x1, [x1]
 670:	bl	0 <grub_error>
 674:	mov	x0, #0x0                   	// #0
 678:	ldp	x19, x20, [sp, #16]
 67c:	ldr	x21, [sp, #32]
 680:	ldp	x29, x30, [sp], #48
 684:	ret
 688:	cbz	x19, 640 <grub_elf32_size+0xd8>
 68c:	mov	w0, #0x0                   	// #0
 690:	mov	w7, #0x1                   	// #1
 694:	mov	w10, #0x0                   	// #0
 698:	mov	w6, #0xffffffff            	// #-1
 69c:	str	wzr, [x19]
 6a0:	b	5fc <grub_elf32_size+0x94>
 6a4:	nop
	...

00000000000006b8 <grub_elf32_load>:
 6b8:	stp	x29, x30, [sp, #-128]!
 6bc:	mov	x29, sp
 6c0:	str	x1, [sp, #120]
 6c4:	ldr	x1, [x0, #72]
 6c8:	stp	x19, x20, [sp, #16]
 6cc:	mov	x19, x0
 6d0:	stp	x21, x22, [sp, #32]
 6d4:	mov	w21, w3
 6d8:	stp	x23, x24, [sp, #48]
 6dc:	mov	x24, x2
 6e0:	stp	x4, x5, [sp, #104]
 6e4:	cbz	x1, 860 <grub_elf32_load+0x1a8>
 6e8:	ldrh	w4, [x19, #52]
 6ec:	mvn	w23, w21
 6f0:	stp	x25, x26, [sp, #64]
 6f4:	and	w23, w23, #0x1
 6f8:	and	w21, w21, #0x6
 6fc:	stp	x27, x28, [sp, #80]
 700:	add	x0, x1, x4, lsl #5
 704:	mov	x27, x1
 708:	cmp	x27, x0
 70c:	mov	x22, #0x0                   	// #0
 710:	mov	x20, #0xffffffffffffffff    	// #-1
 714:	adrp	x26, 0 <grub_elf32_load_phdrs.part.0>
 718:	adrp	x25, 0 <grub_elf32_load_phdrs.part.0>
 71c:	b.cs	748 <grub_elf32_load+0x90>  // b.hs, b.nlast
 720:	ldr	w0, [x27]
 724:	cmp	w0, #0x1
 728:	b.eq	788 <grub_elf32_load+0xd0>  // b.none
 72c:	cmp	w0, #0x2
 730:	csinc	w0, w23, wzr, eq  // eq = none
 734:	cbz	w0, 788 <grub_elf32_load+0xd0>
 738:	add	x27, x27, #0x20
 73c:	add	x0, x1, x4, lsl #5
 740:	cmp	x27, x0
 744:	b.cc	720 <grub_elf32_load+0x68>  // b.lo, b.ul, b.last
 748:	ldp	x25, x26, [sp, #64]
 74c:	ldp	x27, x28, [sp, #80]
 750:	ldr	x0, [sp, #104]
 754:	cbz	x0, 75c <grub_elf32_load+0xa4>
 758:	str	x20, [x0]
 75c:	ldr	x0, [sp, #112]
 760:	cbz	x0, 768 <grub_elf32_load+0xb0>
 764:	str	x22, [x0]
 768:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 76c:	ldr	x0, [x0]
 770:	ldr	w0, [x0]
 774:	ldp	x19, x20, [sp, #16]
 778:	ldp	x21, x22, [sp, #32]
 77c:	ldp	x23, x24, [sp, #48]
 780:	ldp	x29, x30, [sp], #128
 784:	ret
 788:	ldr	w0, [x27, #12]
 78c:	cmp	w21, #0x2
 790:	and	x4, x0, #0xfffffff
 794:	b.eq	7a8 <grub_elf32_load+0xf0>  // b.none
 798:	mov	w4, w0
 79c:	cmp	w21, #0x4
 7a0:	and	x0, x0, #0x3fffffff
 7a4:	csel	x4, x0, x4, eq  // eq = none
 7a8:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 7ac:	add	x28, x24, x4
 7b0:	ldr	x3, [x26]
 7b4:	cmp	x20, x28
 7b8:	ldr	x0, [x0]
 7bc:	csel	x20, x20, x28, ls  // ls = plast
 7c0:	ldr	x2, [x25]
 7c4:	mov	x4, x28
 7c8:	ldr	w5, [x27, #20]
 7cc:	mov	w1, #0x8e                  	// #142
 7d0:	bl	0 <grub_real_dprintf>
 7d4:	ldr	w1, [x27, #4]
 7d8:	ldr	x0, [x19]
 7dc:	bl	0 <grub_file_seek>
 7e0:	cmn	x0, #0x1
 7e4:	b.eq	878 <grub_elf32_load+0x1c0>  // b.none
 7e8:	ldr	w1, [x27, #16]
 7ec:	cbnz	w1, 810 <grub_elf32_load+0x158>
 7f0:	ldr	w2, [x27, #20]
 7f4:	cmp	w2, w1
 7f8:	b.hi	848 <grub_elf32_load+0x190>  // b.pmore
 7fc:	ldrh	w4, [x19, #52]
 800:	add	x22, x22, w2, uxtw
 804:	add	x27, x27, #0x20
 808:	ldr	x1, [x19, #72]
 80c:	b	73c <grub_elf32_load+0x84>
 810:	ldr	x0, [x19]
 814:	mov	w2, w1
 818:	mov	x1, x28
 81c:	bl	0 <grub_file_read>
 820:	ldr	w1, [x27, #16]
 824:	cmp	x0, w1, uxtw
 828:	b.eq	7f0 <grub_elf32_load+0x138>  // b.none
 82c:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 830:	ldr	x19, [x0]
 834:	ldr	w0, [x19]
 838:	cbz	w0, 8a0 <grub_elf32_load+0x1e8>
 83c:	ldp	x25, x26, [sp, #64]
 840:	ldp	x27, x28, [sp, #80]
 844:	b	774 <grub_elf32_load+0xbc>
 848:	sub	w2, w2, w1
 84c:	add	x0, x28, w1, uxtw
 850:	mov	w1, #0x0                   	// #0
 854:	bl	0 <grub_memset>
 858:	ldr	w2, [x27, #20]
 85c:	b	7fc <grub_elf32_load+0x144>
 860:	bl	0 <grub_elf32_load_phdrs.part.0>
 864:	mov	x22, #0x0                   	// #0
 868:	ldr	x1, [x19, #72]
 86c:	mov	x20, #0xffffffffffffffff    	// #-1
 870:	cbnz	x1, 6e8 <grub_elf32_load+0x30>
 874:	b	750 <grub_elf32_load+0x98>
 878:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 87c:	ldp	x19, x20, [sp, #16]
 880:	ldr	x0, [x0]
 884:	ldp	x21, x22, [sp, #32]
 888:	ldr	w0, [x0]
 88c:	ldp	x23, x24, [sp, #48]
 890:	ldp	x25, x26, [sp, #64]
 894:	ldp	x27, x28, [sp, #80]
 898:	ldp	x29, x30, [sp], #128
 89c:	ret
 8a0:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 8a4:	mov	w0, #0x6                   	// #6
 8a8:	ldr	x2, [sp, #120]
 8ac:	ldr	x1, [x1]
 8b0:	bl	0 <grub_error>
 8b4:	ldr	w0, [x19]
 8b8:	ldp	x25, x26, [sp, #64]
 8bc:	ldp	x27, x28, [sp, #80]
 8c0:	b	774 <grub_elf32_load+0xbc>
 8c4:	nop
	...

00000000000008f0 <grub_elf_is_elf64>:
 8f0:	ldrb	w0, [x0, #12]
 8f4:	cmp	w0, #0x2
 8f8:	cset	w0, eq  // eq = none
 8fc:	ret

0000000000000900 <grub_elf64_load_phdrs>:
 900:	stp	x29, x30, [sp, #-32]!
 904:	mov	x29, sp
 908:	stp	x19, x20, [sp, #16]
 90c:	mov	x19, x0
 910:	ldr	x0, [x0, #72]
 914:	cbz	x0, 928 <grub_elf64_load_phdrs+0x28>
 918:	mov	w0, #0x0                   	// #0
 91c:	ldp	x19, x20, [sp, #16]
 920:	ldp	x29, x30, [sp], #32
 924:	ret
 928:	ldrh	w4, [x19, #62]
 92c:	adrp	x3, 0 <grub_elf32_load_phdrs.part.0>
 930:	ldrh	w20, [x19, #64]
 934:	adrp	x2, 0 <grub_elf32_load_phdrs.part.0>
 938:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 93c:	mov	w1, #0x11                  	// #17
 940:	ldr	x3, [x3]
 944:	mul	w20, w20, w4
 948:	ldr	x2, [x2]
 94c:	mov	x5, x20
 950:	ldr	x0, [x0]
 954:	ldr	x4, [x19, #40]
 958:	bl	0 <grub_real_dprintf>
 95c:	mov	x0, x20
 960:	bl	0 <grub_malloc>
 964:	str	x0, [x19, #72]
 968:	cbz	x0, 9c4 <grub_elf64_load_phdrs+0xc4>
 96c:	ldr	x0, [x19]
 970:	ldr	x1, [x19, #40]
 974:	bl	0 <grub_file_seek>
 978:	cmn	x0, #0x1
 97c:	b.eq	998 <grub_elf64_load_phdrs+0x98>  // b.none
 980:	ldr	x0, [x19]
 984:	mov	x2, x20
 988:	ldr	x1, [x19, #72]
 98c:	bl	0 <grub_file_read>
 990:	cmp	x20, x0
 994:	b.eq	918 <grub_elf64_load_phdrs+0x18>  // b.none
 998:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 99c:	ldr	x20, [x0]
 9a0:	ldr	w0, [x20]
 9a4:	cbnz	w0, 91c <grub_elf64_load_phdrs+0x1c>
 9a8:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 9ac:	mov	w0, #0x6                   	// #6
 9b0:	ldr	x2, [x19, #80]
 9b4:	ldr	x1, [x1]
 9b8:	bl	0 <grub_error>
 9bc:	ldr	w0, [x20]
 9c0:	b	91c <grub_elf64_load_phdrs+0x1c>
 9c4:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 9c8:	ldr	x0, [x0]
 9cc:	ldr	w0, [x0]
 9d0:	b	91c <grub_elf64_load_phdrs+0x1c>
 9d4:	nop
	...

0000000000000a00 <grub_elf64_size>:
 a00:	stp	x29, x30, [sp, #-48]!
 a04:	mov	x29, sp
 a08:	ldr	x3, [x0, #72]
 a0c:	stp	x19, x20, [sp, #16]
 a10:	mov	x20, x0
 a14:	str	x21, [sp, #32]
 a18:	mov	x19, x1
 a1c:	mov	x21, x2
 a20:	cbz	x3, ac4 <grub_elf64_size+0xc4>
 a24:	ldrh	w9, [x20, #64]
 a28:	mov	w0, #0x38                  	// #56
 a2c:	umaddl	x9, w9, w0, x3
 a30:	cmp	x9, x3
 a34:	b.ls	b20 <grub_elf64_size+0x120>  // b.plast
 a38:	mov	x6, #0xffffffffffffffff    	// #-1
 a3c:	mov	w10, #0x0                   	// #0
 a40:	mov	x0, #0x0                   	// #0
 a44:	mov	w7, #0x1                   	// #1
 a48:	ldr	w4, [x3]
 a4c:	cmp	w4, #0x1
 a50:	b.ne	a7c <grub_elf64_size+0x7c>  // b.any
 a54:	ldp	x4, x8, [x3, #40]
 a58:	add	w10, w10, #0x1
 a5c:	ldr	x5, [x3, #24]
 a60:	cmp	x6, x5
 a64:	add	x4, x5, x4
 a68:	csel	x6, x6, x5, ls  // ls = plast
 a6c:	cmp	x0, x4
 a70:	csel	x0, x0, x4, cs  // cs = hs, nlast
 a74:	cmp	x8, w7, uxtw
 a78:	csel	w7, w7, w8, ls  // ls = plast
 a7c:	add	x3, x3, #0x38
 a80:	cmp	x9, x3
 a84:	b.hi	a48 <grub_elf64_size+0x48>  // b.pmore
 a88:	cbz	x19, a90 <grub_elf64_size+0x90>
 a8c:	str	xzr, [x19]
 a90:	cbz	w10, ad8 <grub_elf64_size+0xd8>
 a94:	cmp	x0, x6
 a98:	b.cc	afc <grub_elf64_size+0xfc>  // b.lo, b.ul, b.last
 a9c:	cbz	x19, aa4 <grub_elf64_size+0xa4>
 aa0:	str	x6, [x19]
 aa4:	cbz	x21, ab0 <grub_elf64_size+0xb0>
 aa8:	mov	w7, w7
 aac:	str	x7, [x21]
 ab0:	sub	x0, x0, x6
 ab4:	ldp	x19, x20, [sp, #16]
 ab8:	ldr	x21, [sp, #32]
 abc:	ldp	x29, x30, [sp], #48
 ac0:	ret
 ac4:	bl	108 <grub_elf64_load_phdrs.part.0>
 ac8:	ldr	x3, [x20, #72]
 acc:	cbnz	x3, a24 <grub_elf64_size+0x24>
 ad0:	cbz	x19, ad8 <grub_elf64_size+0xd8>
 ad4:	str	xzr, [x19]
 ad8:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 adc:	mov	w0, #0x15                  	// #21
 ae0:	ldr	x1, [x1]
 ae4:	bl	0 <grub_error>
 ae8:	mov	x0, #0x0                   	// #0
 aec:	ldp	x19, x20, [sp, #16]
 af0:	ldr	x21, [sp, #32]
 af4:	ldp	x29, x30, [sp], #48
 af8:	ret
 afc:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 b00:	mov	w0, #0x15                  	// #21
 b04:	ldr	x1, [x1]
 b08:	bl	0 <grub_error>
 b0c:	mov	x0, #0x0                   	// #0
 b10:	ldp	x19, x20, [sp, #16]
 b14:	ldr	x21, [sp, #32]
 b18:	ldp	x29, x30, [sp], #48
 b1c:	ret
 b20:	cbz	x19, ad8 <grub_elf64_size+0xd8>
 b24:	mov	w7, #0x1                   	// #1
 b28:	mov	x0, #0x0                   	// #0
 b2c:	mov	w10, #0x0                   	// #0
 b30:	mov	x6, #0xffffffffffffffff    	// #-1
 b34:	str	xzr, [x19]
 b38:	b	a90 <grub_elf64_size+0x90>
 b3c:	nop
	...

0000000000000b50 <grub_elf64_load>:
 b50:	stp	x29, x30, [sp, #-128]!
 b54:	mov	x29, sp
 b58:	str	x1, [sp, #120]
 b5c:	ldr	x1, [x0, #72]
 b60:	stp	x19, x20, [sp, #16]
 b64:	mov	x19, x0
 b68:	stp	x21, x22, [sp, #32]
 b6c:	mov	w20, w3
 b70:	stp	x25, x26, [sp, #64]
 b74:	mov	x25, x2
 b78:	stp	x4, x5, [sp, #104]
 b7c:	cbz	x1, d10 <grub_elf64_load+0x1c0>
 b80:	ldrh	w2, [x19, #64]
 b84:	mov	x22, #0x0                   	// #0
 b88:	stp	x23, x24, [sp, #48]
 b8c:	mov	w23, #0x38                  	// #56
 b90:	mvn	w24, w20
 b94:	stp	x27, x28, [sp, #80]
 b98:	mov	x27, x1
 b9c:	umaddl	x0, w2, w23, x1
 ba0:	and	w24, w24, #0x1
 ba4:	and	w20, w20, #0x6
 ba8:	cmp	x27, x0
 bac:	mov	x21, #0xffffffffffffffff    	// #-1
 bb0:	adrp	x26, 0 <grub_elf32_load_phdrs.part.0>
 bb4:	b.cs	be0 <grub_elf64_load+0x90>  // b.hs, b.nlast
 bb8:	ldr	w0, [x27]
 bbc:	cmp	w0, #0x1
 bc0:	b.eq	c20 <grub_elf64_load+0xd0>  // b.none
 bc4:	cmp	w0, #0x2
 bc8:	csinc	w0, w24, wzr, eq  // eq = none
 bcc:	cbz	w0, c20 <grub_elf64_load+0xd0>
 bd0:	add	x27, x27, #0x38
 bd4:	umaddl	x0, w2, w23, x1
 bd8:	cmp	x27, x0
 bdc:	b.cc	bb8 <grub_elf64_load+0x68>  // b.lo, b.ul, b.last
 be0:	ldp	x23, x24, [sp, #48]
 be4:	ldp	x27, x28, [sp, #80]
 be8:	ldr	x0, [sp, #104]
 bec:	cbz	x0, bf4 <grub_elf64_load+0xa4>
 bf0:	str	x21, [x0]
 bf4:	ldr	x0, [sp, #112]
 bf8:	cbz	x0, c00 <grub_elf64_load+0xb0>
 bfc:	str	x22, [x0]
 c00:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 c04:	ldr	x0, [x0]
 c08:	ldr	w0, [x0]
 c0c:	ldp	x19, x20, [sp, #16]
 c10:	ldp	x21, x22, [sp, #32]
 c14:	ldp	x25, x26, [sp, #64]
 c18:	ldp	x29, x30, [sp], #128
 c1c:	ret
 c20:	cmp	w20, #0x4
 c24:	ldr	x4, [x27, #24]
 c28:	b.eq	d08 <grub_elf64_load+0x1b8>  // b.none
 c2c:	cmp	w20, #0x6
 c30:	b.eq	d00 <grub_elf64_load+0x1b0>  // b.none
 c34:	cmp	w20, #0x2
 c38:	and	x0, x4, #0xfffffff
 c3c:	csel	x4, x0, x4, eq  // eq = none
 c40:	adrp	x2, 0 <grub_elf32_load_phdrs.part.0>
 c44:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 c48:	add	x28, x25, x4
 c4c:	mov	w1, #0x8e                  	// #142
 c50:	ldr	x2, [x2]
 c54:	cmp	x21, x28
 c58:	ldr	x0, [x0]
 c5c:	csel	x21, x21, x28, ls  // ls = plast
 c60:	ldr	x3, [x26]
 c64:	mov	x4, x28
 c68:	ldr	x5, [x27, #40]
 c6c:	bl	0 <grub_real_dprintf>
 c70:	ldr	x0, [x19]
 c74:	ldr	x1, [x27, #8]
 c78:	bl	0 <grub_file_seek>
 c7c:	cmn	x0, #0x1
 c80:	b.eq	d28 <grub_elf64_load+0x1d8>  // b.none
 c84:	ldr	x1, [x27, #32]
 c88:	cbnz	x1, cac <grub_elf64_load+0x15c>
 c8c:	ldr	x2, [x27, #40]
 c90:	cmp	x2, x1
 c94:	b.hi	ce8 <grub_elf64_load+0x198>  // b.pmore
 c98:	add	x22, x22, x2
 c9c:	add	x27, x27, #0x38
 ca0:	ldrh	w2, [x19, #64]
 ca4:	ldr	x1, [x19, #72]
 ca8:	b	bd4 <grub_elf64_load+0x84>
 cac:	ldr	x0, [x19]
 cb0:	mov	x2, x1
 cb4:	mov	x1, x28
 cb8:	bl	0 <grub_file_read>
 cbc:	mov	x1, x0
 cc0:	ldr	x2, [x27, #32]
 cc4:	cmp	x2, x0
 cc8:	b.eq	c8c <grub_elf64_load+0x13c>  // b.none
 ccc:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 cd0:	ldr	x19, [x0]
 cd4:	ldr	w0, [x19]
 cd8:	cbz	w0, d50 <grub_elf64_load+0x200>
 cdc:	ldp	x23, x24, [sp, #48]
 ce0:	ldp	x27, x28, [sp, #80]
 ce4:	b	c0c <grub_elf64_load+0xbc>
 ce8:	sub	x2, x2, x1
 cec:	add	x0, x28, x1
 cf0:	mov	w1, #0x0                   	// #0
 cf4:	bl	0 <grub_memset>
 cf8:	ldr	x2, [x27, #40]
 cfc:	b	c98 <grub_elf64_load+0x148>
 d00:	and	x4, x4, #0x3fffffffffffffff
 d04:	b	c40 <grub_elf64_load+0xf0>
 d08:	and	x4, x4, #0x3fffffff
 d0c:	b	c40 <grub_elf64_load+0xf0>
 d10:	bl	108 <grub_elf64_load_phdrs.part.0>
 d14:	mov	x22, #0x0                   	// #0
 d18:	ldr	x1, [x19, #72]
 d1c:	mov	x21, #0xffffffffffffffff    	// #-1
 d20:	cbnz	x1, b80 <grub_elf64_load+0x30>
 d24:	b	be8 <grub_elf64_load+0x98>
 d28:	adrp	x0, 0 <grub_elf32_load_phdrs.part.0>
 d2c:	ldp	x19, x20, [sp, #16]
 d30:	ldr	x0, [x0]
 d34:	ldp	x21, x22, [sp, #32]
 d38:	ldr	w0, [x0]
 d3c:	ldp	x23, x24, [sp, #48]
 d40:	ldp	x25, x26, [sp, #64]
 d44:	ldp	x27, x28, [sp, #80]
 d48:	ldp	x29, x30, [sp], #128
 d4c:	ret
 d50:	adrp	x1, 0 <grub_elf32_load_phdrs.part.0>
 d54:	mov	w0, #0x6                   	// #6
 d58:	ldr	x2, [sp, #120]
 d5c:	ldr	x1, [x1]
 d60:	bl	0 <grub_error>
 d64:	ldr	w0, [x19]
 d68:	ldp	x23, x24, [sp, #48]
 d6c:	ldp	x27, x28, [sp, #80]
 d70:	b	c0c <grub_elf64_load+0xbc>
 d74:	nop
	...
