In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.a_gcc_-O0:

blocksort.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fallbackSimpleSort>:
       0:	sub	sp, sp, #0x30
       4:	str	x0, [sp, #24]
       8:	str	x1, [sp, #16]
       c:	str	w2, [sp, #12]
      10:	str	w3, [sp, #8]
      14:	ldr	w1, [sp, #12]
      18:	ldr	w0, [sp, #8]
      1c:	cmp	w1, w0
      20:	b.eq	244 <fallbackSimpleSort+0x244>  // b.none
      24:	ldr	w1, [sp, #8]
      28:	ldr	w0, [sp, #12]
      2c:	sub	w0, w1, w0
      30:	cmp	w0, #0x3
      34:	b.le	13c <fallbackSimpleSort+0x13c>
      38:	ldr	w0, [sp, #8]
      3c:	sub	w0, w0, #0x4
      40:	str	w0, [sp, #44]
      44:	b	12c <fallbackSimpleSort+0x12c>
      48:	ldrsw	x0, [sp, #44]
      4c:	lsl	x0, x0, #2
      50:	ldr	x1, [sp, #24]
      54:	add	x0, x1, x0
      58:	ldr	w0, [x0]
      5c:	str	w0, [sp, #36]
      60:	ldrsw	x0, [sp, #36]
      64:	lsl	x0, x0, #2
      68:	ldr	x1, [sp, #16]
      6c:	add	x0, x1, x0
      70:	ldr	w0, [x0]
      74:	str	w0, [sp, #32]
      78:	ldr	w0, [sp, #44]
      7c:	add	w0, w0, #0x4
      80:	str	w0, [sp, #40]
      84:	b	c0 <fallbackSimpleSort+0xc0>
      88:	ldrsw	x0, [sp, #40]
      8c:	lsl	x0, x0, #2
      90:	ldr	x1, [sp, #24]
      94:	add	x1, x1, x0
      98:	ldrsw	x0, [sp, #40]
      9c:	lsl	x0, x0, #2
      a0:	sub	x0, x0, #0x10
      a4:	ldr	x2, [sp, #24]
      a8:	add	x0, x2, x0
      ac:	ldr	w1, [x1]
      b0:	str	w1, [x0]
      b4:	ldr	w0, [sp, #40]
      b8:	add	w0, w0, #0x4
      bc:	str	w0, [sp, #40]
      c0:	ldr	w1, [sp, #40]
      c4:	ldr	w0, [sp, #8]
      c8:	cmp	w1, w0
      cc:	b.gt	104 <fallbackSimpleSort+0x104>
      d0:	ldrsw	x0, [sp, #40]
      d4:	lsl	x0, x0, #2
      d8:	ldr	x1, [sp, #24]
      dc:	add	x0, x1, x0
      e0:	ldr	w0, [x0]
      e4:	mov	w0, w0
      e8:	lsl	x0, x0, #2
      ec:	ldr	x1, [sp, #16]
      f0:	add	x0, x1, x0
      f4:	ldr	w0, [x0]
      f8:	ldr	w1, [sp, #32]
      fc:	cmp	w1, w0
     100:	b.hi	88 <fallbackSimpleSort+0x88>  // b.pmore
     104:	ldrsw	x0, [sp, #40]
     108:	lsl	x0, x0, #2
     10c:	sub	x0, x0, #0x10
     110:	ldr	x1, [sp, #24]
     114:	add	x0, x1, x0
     118:	ldr	w1, [sp, #36]
     11c:	str	w1, [x0]
     120:	ldr	w0, [sp, #44]
     124:	sub	w0, w0, #0x1
     128:	str	w0, [sp, #44]
     12c:	ldr	w1, [sp, #44]
     130:	ldr	w0, [sp, #12]
     134:	cmp	w1, w0
     138:	b.ge	48 <fallbackSimpleSort+0x48>  // b.tcont
     13c:	ldr	w0, [sp, #8]
     140:	sub	w0, w0, #0x1
     144:	str	w0, [sp, #44]
     148:	b	230 <fallbackSimpleSort+0x230>
     14c:	ldrsw	x0, [sp, #44]
     150:	lsl	x0, x0, #2
     154:	ldr	x1, [sp, #24]
     158:	add	x0, x1, x0
     15c:	ldr	w0, [x0]
     160:	str	w0, [sp, #36]
     164:	ldrsw	x0, [sp, #36]
     168:	lsl	x0, x0, #2
     16c:	ldr	x1, [sp, #16]
     170:	add	x0, x1, x0
     174:	ldr	w0, [x0]
     178:	str	w0, [sp, #32]
     17c:	ldr	w0, [sp, #44]
     180:	add	w0, w0, #0x1
     184:	str	w0, [sp, #40]
     188:	b	1c4 <fallbackSimpleSort+0x1c4>
     18c:	ldrsw	x0, [sp, #40]
     190:	lsl	x0, x0, #2
     194:	ldr	x1, [sp, #24]
     198:	add	x1, x1, x0
     19c:	ldrsw	x0, [sp, #40]
     1a0:	lsl	x0, x0, #2
     1a4:	sub	x0, x0, #0x4
     1a8:	ldr	x2, [sp, #24]
     1ac:	add	x0, x2, x0
     1b0:	ldr	w1, [x1]
     1b4:	str	w1, [x0]
     1b8:	ldr	w0, [sp, #40]
     1bc:	add	w0, w0, #0x1
     1c0:	str	w0, [sp, #40]
     1c4:	ldr	w1, [sp, #40]
     1c8:	ldr	w0, [sp, #8]
     1cc:	cmp	w1, w0
     1d0:	b.gt	208 <fallbackSimpleSort+0x208>
     1d4:	ldrsw	x0, [sp, #40]
     1d8:	lsl	x0, x0, #2
     1dc:	ldr	x1, [sp, #24]
     1e0:	add	x0, x1, x0
     1e4:	ldr	w0, [x0]
     1e8:	mov	w0, w0
     1ec:	lsl	x0, x0, #2
     1f0:	ldr	x1, [sp, #16]
     1f4:	add	x0, x1, x0
     1f8:	ldr	w0, [x0]
     1fc:	ldr	w1, [sp, #32]
     200:	cmp	w1, w0
     204:	b.hi	18c <fallbackSimpleSort+0x18c>  // b.pmore
     208:	ldrsw	x0, [sp, #40]
     20c:	lsl	x0, x0, #2
     210:	sub	x0, x0, #0x4
     214:	ldr	x1, [sp, #24]
     218:	add	x0, x1, x0
     21c:	ldr	w1, [sp, #36]
     220:	str	w1, [x0]
     224:	ldr	w0, [sp, #44]
     228:	sub	w0, w0, #0x1
     22c:	str	w0, [sp, #44]
     230:	ldr	w1, [sp, #44]
     234:	ldr	w0, [sp, #12]
     238:	cmp	w1, w0
     23c:	b.ge	14c <fallbackSimpleSort+0x14c>  // b.tcont
     240:	b	248 <fallbackSimpleSort+0x248>
     244:	nop
     248:	add	sp, sp, #0x30
     24c:	ret

0000000000000250 <fallbackQSort3>:
     250:	sub	sp, sp, #0x3b0
     254:	stp	x29, x30, [sp]
     258:	mov	x29, sp
     25c:	str	x0, [sp, #40]
     260:	str	x1, [sp, #32]
     264:	str	w2, [sp, #28]
     268:	str	w3, [sp, #24]
     26c:	str	wzr, [sp, #916]
     270:	str	wzr, [sp, #924]
     274:	ldrsw	x0, [sp, #924]
     278:	lsl	x0, x0, #2
     27c:	add	x1, sp, #0x1c0
     280:	ldr	w2, [sp, #28]
     284:	str	w2, [x1, x0]
     288:	ldrsw	x0, [sp, #924]
     28c:	lsl	x0, x0, #2
     290:	add	x1, sp, #0x30
     294:	ldr	w2, [sp, #24]
     298:	str	w2, [x1, x0]
     29c:	ldr	w0, [sp, #924]
     2a0:	add	w0, w0, #0x1
     2a4:	str	w0, [sp, #924]
     2a8:	b	984 <fallbackQSort3+0x734>
     2ac:	ldr	w0, [sp, #924]
     2b0:	cmp	w0, #0x62
     2b4:	b.le	2c0 <fallbackQSort3+0x70>
     2b8:	mov	w0, #0x3ec                 	// #1004
     2bc:	bl	0 <BZ2_bz__AssertH__fail>
     2c0:	ldr	w0, [sp, #924]
     2c4:	sub	w0, w0, #0x1
     2c8:	str	w0, [sp, #924]
     2cc:	ldrsw	x0, [sp, #924]
     2d0:	lsl	x0, x0, #2
     2d4:	add	x1, sp, #0x1c0
     2d8:	ldr	w0, [x1, x0]
     2dc:	str	w0, [sp, #888]
     2e0:	ldrsw	x0, [sp, #924]
     2e4:	lsl	x0, x0, #2
     2e8:	add	x1, sp, #0x30
     2ec:	ldr	w0, [x1, x0]
     2f0:	str	w0, [sp, #884]
     2f4:	ldr	w1, [sp, #884]
     2f8:	ldr	w0, [sp, #888]
     2fc:	sub	w0, w1, w0
     300:	cmp	w0, #0x9
     304:	b.gt	320 <fallbackQSort3+0xd0>
     308:	ldr	w3, [sp, #884]
     30c:	ldr	w2, [sp, #888]
     310:	ldr	x1, [sp, #32]
     314:	ldr	x0, [sp, #40]
     318:	bl	0 <fallbackSimpleSort>
     31c:	b	984 <fallbackQSort3+0x734>
     320:	ldr	w1, [sp, #916]
     324:	mov	w0, #0x1dc5                	// #7621
     328:	mul	w0, w1, w0
     32c:	add	w0, w0, #0x1
     330:	and	w0, w0, #0x7fff
     334:	str	w0, [sp, #916]
     338:	ldr	w1, [sp, #916]
     33c:	mov	w0, #0xaaab                	// #43691
     340:	movk	w0, #0xaaaa, lsl #16
     344:	umull	x0, w1, w0
     348:	lsr	x0, x0, #32
     34c:	lsr	w2, w0, #1
     350:	mov	w0, w2
     354:	lsl	w0, w0, #1
     358:	add	w0, w0, w2
     35c:	sub	w0, w1, w0
     360:	str	w0, [sp, #880]
     364:	ldr	w0, [sp, #880]
     368:	cmp	w0, #0x0
     36c:	b.ne	3a0 <fallbackQSort3+0x150>  // b.any
     370:	ldrsw	x0, [sp, #888]
     374:	lsl	x0, x0, #2
     378:	ldr	x1, [sp, #40]
     37c:	add	x0, x1, x0
     380:	ldr	w0, [x0]
     384:	mov	w0, w0
     388:	lsl	x0, x0, #2
     38c:	ldr	x1, [sp, #32]
     390:	add	x0, x1, x0
     394:	ldr	w0, [x0]
     398:	str	w0, [sp, #920]
     39c:	b	418 <fallbackQSort3+0x1c8>
     3a0:	ldr	w0, [sp, #880]
     3a4:	cmp	w0, #0x1
     3a8:	b.ne	3ec <fallbackQSort3+0x19c>  // b.any
     3ac:	ldr	w1, [sp, #888]
     3b0:	ldr	w0, [sp, #884]
     3b4:	add	w0, w1, w0
     3b8:	asr	w0, w0, #1
     3bc:	sxtw	x0, w0
     3c0:	lsl	x0, x0, #2
     3c4:	ldr	x1, [sp, #40]
     3c8:	add	x0, x1, x0
     3cc:	ldr	w0, [x0]
     3d0:	mov	w0, w0
     3d4:	lsl	x0, x0, #2
     3d8:	ldr	x1, [sp, #32]
     3dc:	add	x0, x1, x0
     3e0:	ldr	w0, [x0]
     3e4:	str	w0, [sp, #920]
     3e8:	b	418 <fallbackQSort3+0x1c8>
     3ec:	ldrsw	x0, [sp, #884]
     3f0:	lsl	x0, x0, #2
     3f4:	ldr	x1, [sp, #40]
     3f8:	add	x0, x1, x0
     3fc:	ldr	w0, [x0]
     400:	mov	w0, w0
     404:	lsl	x0, x0, #2
     408:	ldr	x1, [sp, #32]
     40c:	add	x0, x1, x0
     410:	ldr	w0, [x0]
     414:	str	w0, [sp, #920]
     418:	ldr	w0, [sp, #888]
     41c:	str	w0, [sp, #932]
     420:	ldr	w0, [sp, #932]
     424:	str	w0, [sp, #940]
     428:	ldr	w0, [sp, #884]
     42c:	str	w0, [sp, #928]
     430:	ldr	w0, [sp, #928]
     434:	str	w0, [sp, #936]
     438:	ldr	w1, [sp, #940]
     43c:	ldr	w0, [sp, #936]
     440:	cmp	w1, w0
     444:	b.gt	51c <fallbackQSort3+0x2cc>
     448:	ldrsw	x0, [sp, #940]
     44c:	lsl	x0, x0, #2
     450:	ldr	x1, [sp, #40]
     454:	add	x0, x1, x0
     458:	ldr	w0, [x0]
     45c:	mov	w0, w0
     460:	lsl	x0, x0, #2
     464:	ldr	x1, [sp, #32]
     468:	add	x0, x1, x0
     46c:	ldr	w0, [x0]
     470:	mov	w1, w0
     474:	ldr	w0, [sp, #920]
     478:	sub	w0, w1, w0
     47c:	str	w0, [sp, #876]
     480:	ldr	w0, [sp, #876]
     484:	cmp	w0, #0x0
     488:	b.ne	500 <fallbackQSort3+0x2b0>  // b.any
     48c:	ldrsw	x0, [sp, #940]
     490:	lsl	x0, x0, #2
     494:	ldr	x1, [sp, #40]
     498:	add	x0, x1, x0
     49c:	ldr	w0, [x0]
     4a0:	str	w0, [sp, #872]
     4a4:	ldrsw	x0, [sp, #932]
     4a8:	lsl	x0, x0, #2
     4ac:	ldr	x1, [sp, #40]
     4b0:	add	x1, x1, x0
     4b4:	ldrsw	x0, [sp, #940]
     4b8:	lsl	x0, x0, #2
     4bc:	ldr	x2, [sp, #40]
     4c0:	add	x0, x2, x0
     4c4:	ldr	w1, [x1]
     4c8:	str	w1, [x0]
     4cc:	ldrsw	x0, [sp, #932]
     4d0:	lsl	x0, x0, #2
     4d4:	ldr	x1, [sp, #40]
     4d8:	add	x0, x1, x0
     4dc:	ldr	w1, [sp, #872]
     4e0:	str	w1, [x0]
     4e4:	ldr	w0, [sp, #932]
     4e8:	add	w0, w0, #0x1
     4ec:	str	w0, [sp, #932]
     4f0:	ldr	w0, [sp, #940]
     4f4:	add	w0, w0, #0x1
     4f8:	str	w0, [sp, #940]
     4fc:	b	518 <fallbackQSort3+0x2c8>
     500:	ldr	w0, [sp, #876]
     504:	cmp	w0, #0x0
     508:	b.gt	524 <fallbackQSort3+0x2d4>
     50c:	ldr	w0, [sp, #940]
     510:	add	w0, w0, #0x1
     514:	str	w0, [sp, #940]
     518:	b	438 <fallbackQSort3+0x1e8>
     51c:	nop
     520:	b	528 <fallbackQSort3+0x2d8>
     524:	nop
     528:	ldr	w1, [sp, #940]
     52c:	ldr	w0, [sp, #936]
     530:	cmp	w1, w0
     534:	b.gt	60c <fallbackQSort3+0x3bc>
     538:	ldrsw	x0, [sp, #936]
     53c:	lsl	x0, x0, #2
     540:	ldr	x1, [sp, #40]
     544:	add	x0, x1, x0
     548:	ldr	w0, [x0]
     54c:	mov	w0, w0
     550:	lsl	x0, x0, #2
     554:	ldr	x1, [sp, #32]
     558:	add	x0, x1, x0
     55c:	ldr	w0, [x0]
     560:	mov	w1, w0
     564:	ldr	w0, [sp, #920]
     568:	sub	w0, w1, w0
     56c:	str	w0, [sp, #876]
     570:	ldr	w0, [sp, #876]
     574:	cmp	w0, #0x0
     578:	b.ne	5f0 <fallbackQSort3+0x3a0>  // b.any
     57c:	ldrsw	x0, [sp, #936]
     580:	lsl	x0, x0, #2
     584:	ldr	x1, [sp, #40]
     588:	add	x0, x1, x0
     58c:	ldr	w0, [x0]
     590:	str	w0, [sp, #868]
     594:	ldrsw	x0, [sp, #928]
     598:	lsl	x0, x0, #2
     59c:	ldr	x1, [sp, #40]
     5a0:	add	x1, x1, x0
     5a4:	ldrsw	x0, [sp, #936]
     5a8:	lsl	x0, x0, #2
     5ac:	ldr	x2, [sp, #40]
     5b0:	add	x0, x2, x0
     5b4:	ldr	w1, [x1]
     5b8:	str	w1, [x0]
     5bc:	ldrsw	x0, [sp, #928]
     5c0:	lsl	x0, x0, #2
     5c4:	ldr	x1, [sp, #40]
     5c8:	add	x0, x1, x0
     5cc:	ldr	w1, [sp, #868]
     5d0:	str	w1, [x0]
     5d4:	ldr	w0, [sp, #928]
     5d8:	sub	w0, w0, #0x1
     5dc:	str	w0, [sp, #928]
     5e0:	ldr	w0, [sp, #936]
     5e4:	sub	w0, w0, #0x1
     5e8:	str	w0, [sp, #936]
     5ec:	b	608 <fallbackQSort3+0x3b8>
     5f0:	ldr	w0, [sp, #876]
     5f4:	cmp	w0, #0x0
     5f8:	b.lt	614 <fallbackQSort3+0x3c4>  // b.tstop
     5fc:	ldr	w0, [sp, #936]
     600:	sub	w0, w0, #0x1
     604:	str	w0, [sp, #936]
     608:	b	528 <fallbackQSort3+0x2d8>
     60c:	nop
     610:	b	618 <fallbackQSort3+0x3c8>
     614:	nop
     618:	ldr	w1, [sp, #940]
     61c:	ldr	w0, [sp, #936]
     620:	cmp	w1, w0
     624:	b.gt	69c <fallbackQSort3+0x44c>
     628:	ldrsw	x0, [sp, #940]
     62c:	lsl	x0, x0, #2
     630:	ldr	x1, [sp, #40]
     634:	add	x0, x1, x0
     638:	ldr	w0, [x0]
     63c:	str	w0, [sp, #864]
     640:	ldrsw	x0, [sp, #936]
     644:	lsl	x0, x0, #2
     648:	ldr	x1, [sp, #40]
     64c:	add	x1, x1, x0
     650:	ldrsw	x0, [sp, #940]
     654:	lsl	x0, x0, #2
     658:	ldr	x2, [sp, #40]
     65c:	add	x0, x2, x0
     660:	ldr	w1, [x1]
     664:	str	w1, [x0]
     668:	ldrsw	x0, [sp, #936]
     66c:	lsl	x0, x0, #2
     670:	ldr	x1, [sp, #40]
     674:	add	x0, x1, x0
     678:	ldr	w1, [sp, #864]
     67c:	str	w1, [x0]
     680:	ldr	w0, [sp, #940]
     684:	add	w0, w0, #0x1
     688:	str	w0, [sp, #940]
     68c:	ldr	w0, [sp, #936]
     690:	sub	w0, w0, #0x1
     694:	str	w0, [sp, #936]
     698:	b	438 <fallbackQSort3+0x1e8>
     69c:	nop
     6a0:	ldr	w1, [sp, #928]
     6a4:	ldr	w0, [sp, #932]
     6a8:	cmp	w1, w0
     6ac:	b.ge	6b4 <fallbackQSort3+0x464>  // b.tcont
     6b0:	b	984 <fallbackQSort3+0x734>
     6b4:	ldr	w1, [sp, #940]
     6b8:	ldr	w0, [sp, #932]
     6bc:	sub	w1, w1, w0
     6c0:	ldr	w2, [sp, #932]
     6c4:	ldr	w0, [sp, #888]
     6c8:	sub	w0, w2, w0
     6cc:	cmp	w1, w0
     6d0:	csel	w0, w1, w0, le
     6d4:	str	w0, [sp, #876]
     6d8:	ldr	w0, [sp, #888]
     6dc:	str	w0, [sp, #912]
     6e0:	ldr	w1, [sp, #940]
     6e4:	ldr	w0, [sp, #876]
     6e8:	sub	w0, w1, w0
     6ec:	str	w0, [sp, #908]
     6f0:	ldr	w0, [sp, #876]
     6f4:	str	w0, [sp, #904]
     6f8:	b	778 <fallbackQSort3+0x528>
     6fc:	ldrsw	x0, [sp, #912]
     700:	lsl	x0, x0, #2
     704:	ldr	x1, [sp, #40]
     708:	add	x0, x1, x0
     70c:	ldr	w0, [x0]
     710:	str	w0, [sp, #852]
     714:	ldrsw	x0, [sp, #908]
     718:	lsl	x0, x0, #2
     71c:	ldr	x1, [sp, #40]
     720:	add	x1, x1, x0
     724:	ldrsw	x0, [sp, #912]
     728:	lsl	x0, x0, #2
     72c:	ldr	x2, [sp, #40]
     730:	add	x0, x2, x0
     734:	ldr	w1, [x1]
     738:	str	w1, [x0]
     73c:	ldrsw	x0, [sp, #908]
     740:	lsl	x0, x0, #2
     744:	ldr	x1, [sp, #40]
     748:	add	x0, x1, x0
     74c:	ldr	w1, [sp, #852]
     750:	str	w1, [x0]
     754:	ldr	w0, [sp, #912]
     758:	add	w0, w0, #0x1
     75c:	str	w0, [sp, #912]
     760:	ldr	w0, [sp, #908]
     764:	add	w0, w0, #0x1
     768:	str	w0, [sp, #908]
     76c:	ldr	w0, [sp, #904]
     770:	sub	w0, w0, #0x1
     774:	str	w0, [sp, #904]
     778:	ldr	w0, [sp, #904]
     77c:	cmp	w0, #0x0
     780:	b.gt	6fc <fallbackQSort3+0x4ac>
     784:	ldr	w1, [sp, #928]
     788:	ldr	w0, [sp, #936]
     78c:	sub	w1, w1, w0
     790:	ldr	w2, [sp, #884]
     794:	ldr	w0, [sp, #928]
     798:	sub	w0, w2, w0
     79c:	cmp	w1, w0
     7a0:	csel	w0, w1, w0, le
     7a4:	str	w0, [sp, #860]
     7a8:	ldr	w0, [sp, #940]
     7ac:	str	w0, [sp, #900]
     7b0:	ldr	w1, [sp, #884]
     7b4:	ldr	w0, [sp, #860]
     7b8:	sub	w0, w1, w0
     7bc:	add	w0, w0, #0x1
     7c0:	str	w0, [sp, #896]
     7c4:	ldr	w0, [sp, #860]
     7c8:	str	w0, [sp, #892]
     7cc:	b	84c <fallbackQSort3+0x5fc>
     7d0:	ldrsw	x0, [sp, #900]
     7d4:	lsl	x0, x0, #2
     7d8:	ldr	x1, [sp, #40]
     7dc:	add	x0, x1, x0
     7e0:	ldr	w0, [x0]
     7e4:	str	w0, [sp, #856]
     7e8:	ldrsw	x0, [sp, #896]
     7ec:	lsl	x0, x0, #2
     7f0:	ldr	x1, [sp, #40]
     7f4:	add	x1, x1, x0
     7f8:	ldrsw	x0, [sp, #900]
     7fc:	lsl	x0, x0, #2
     800:	ldr	x2, [sp, #40]
     804:	add	x0, x2, x0
     808:	ldr	w1, [x1]
     80c:	str	w1, [x0]
     810:	ldrsw	x0, [sp, #896]
     814:	lsl	x0, x0, #2
     818:	ldr	x1, [sp, #40]
     81c:	add	x0, x1, x0
     820:	ldr	w1, [sp, #856]
     824:	str	w1, [x0]
     828:	ldr	w0, [sp, #900]
     82c:	add	w0, w0, #0x1
     830:	str	w0, [sp, #900]
     834:	ldr	w0, [sp, #896]
     838:	add	w0, w0, #0x1
     83c:	str	w0, [sp, #896]
     840:	ldr	w0, [sp, #892]
     844:	sub	w0, w0, #0x1
     848:	str	w0, [sp, #892]
     84c:	ldr	w0, [sp, #892]
     850:	cmp	w0, #0x0
     854:	b.gt	7d0 <fallbackQSort3+0x580>
     858:	ldr	w1, [sp, #888]
     85c:	ldr	w0, [sp, #940]
     860:	add	w1, w1, w0
     864:	ldr	w0, [sp, #932]
     868:	sub	w0, w1, w0
     86c:	sub	w0, w0, #0x1
     870:	str	w0, [sp, #876]
     874:	ldr	w1, [sp, #928]
     878:	ldr	w0, [sp, #936]
     87c:	sub	w0, w1, w0
     880:	ldr	w1, [sp, #884]
     884:	sub	w0, w1, w0
     888:	add	w0, w0, #0x1
     88c:	str	w0, [sp, #860]
     890:	ldr	w1, [sp, #876]
     894:	ldr	w0, [sp, #888]
     898:	sub	w1, w1, w0
     89c:	ldr	w2, [sp, #884]
     8a0:	ldr	w0, [sp, #860]
     8a4:	sub	w0, w2, w0
     8a8:	cmp	w1, w0
     8ac:	b.le	91c <fallbackQSort3+0x6cc>
     8b0:	ldrsw	x0, [sp, #924]
     8b4:	lsl	x0, x0, #2
     8b8:	add	x1, sp, #0x1c0
     8bc:	ldr	w2, [sp, #888]
     8c0:	str	w2, [x1, x0]
     8c4:	ldrsw	x0, [sp, #924]
     8c8:	lsl	x0, x0, #2
     8cc:	add	x1, sp, #0x30
     8d0:	ldr	w2, [sp, #876]
     8d4:	str	w2, [x1, x0]
     8d8:	ldr	w0, [sp, #924]
     8dc:	add	w0, w0, #0x1
     8e0:	str	w0, [sp, #924]
     8e4:	ldrsw	x0, [sp, #924]
     8e8:	lsl	x0, x0, #2
     8ec:	add	x1, sp, #0x1c0
     8f0:	ldr	w2, [sp, #860]
     8f4:	str	w2, [x1, x0]
     8f8:	ldrsw	x0, [sp, #924]
     8fc:	lsl	x0, x0, #2
     900:	add	x1, sp, #0x30
     904:	ldr	w2, [sp, #884]
     908:	str	w2, [x1, x0]
     90c:	ldr	w0, [sp, #924]
     910:	add	w0, w0, #0x1
     914:	str	w0, [sp, #924]
     918:	b	984 <fallbackQSort3+0x734>
     91c:	ldrsw	x0, [sp, #924]
     920:	lsl	x0, x0, #2
     924:	add	x1, sp, #0x1c0
     928:	ldr	w2, [sp, #860]
     92c:	str	w2, [x1, x0]
     930:	ldrsw	x0, [sp, #924]
     934:	lsl	x0, x0, #2
     938:	add	x1, sp, #0x30
     93c:	ldr	w2, [sp, #884]
     940:	str	w2, [x1, x0]
     944:	ldr	w0, [sp, #924]
     948:	add	w0, w0, #0x1
     94c:	str	w0, [sp, #924]
     950:	ldrsw	x0, [sp, #924]
     954:	lsl	x0, x0, #2
     958:	add	x1, sp, #0x1c0
     95c:	ldr	w2, [sp, #888]
     960:	str	w2, [x1, x0]
     964:	ldrsw	x0, [sp, #924]
     968:	lsl	x0, x0, #2
     96c:	add	x1, sp, #0x30
     970:	ldr	w2, [sp, #876]
     974:	str	w2, [x1, x0]
     978:	ldr	w0, [sp, #924]
     97c:	add	w0, w0, #0x1
     980:	str	w0, [sp, #924]
     984:	ldr	w0, [sp, #924]
     988:	cmp	w0, #0x0
     98c:	b.gt	2ac <fallbackQSort3+0x5c>
     990:	nop
     994:	nop
     998:	ldp	x29, x30, [sp]
     99c:	add	sp, sp, #0x3b0
     9a0:	ret

00000000000009a4 <fallbackSort>:
     9a4:	sub	sp, sp, #0x870
     9a8:	stp	x29, x30, [sp]
     9ac:	mov	x29, sp
     9b0:	str	x0, [sp, #40]
     9b4:	str	x1, [sp, #32]
     9b8:	str	x2, [sp, #24]
     9bc:	str	w3, [sp, #20]
     9c0:	str	w4, [sp, #16]
     9c4:	ldr	x0, [sp, #32]
     9c8:	str	x0, [sp, #2120]
     9cc:	ldr	w0, [sp, #16]
     9d0:	cmp	w0, #0x3
     9d4:	b.le	9fc <fallbackSort+0x58>
     9d8:	adrp	x0, 0 <stderr>
     9dc:	add	x0, x0, #0x0
     9e0:	ldr	x0, [x0]
     9e4:	mov	x3, x0
     9e8:	mov	x2, #0x1b                  	// #27
     9ec:	mov	x1, #0x1                   	// #1
     9f0:	adrp	x0, 0 <fallbackSimpleSort>
     9f4:	add	x0, x0, #0x0
     9f8:	bl	0 <fwrite>
     9fc:	str	wzr, [sp, #2152]
     a00:	b	a20 <fallbackSort+0x7c>
     a04:	ldrsw	x0, [sp, #2152]
     a08:	lsl	x0, x0, #2
     a0c:	add	x1, sp, #0x438
     a10:	str	wzr, [x1, x0]
     a14:	ldr	w0, [sp, #2152]
     a18:	add	w0, w0, #0x1
     a1c:	str	w0, [sp, #2152]
     a20:	ldr	w0, [sp, #2152]
     a24:	cmp	w0, #0x100
     a28:	b.le	a04 <fallbackSort+0x60>
     a2c:	str	wzr, [sp, #2152]
     a30:	b	a78 <fallbackSort+0xd4>
     a34:	ldrsw	x0, [sp, #2152]
     a38:	ldr	x1, [sp, #2120]
     a3c:	add	x0, x1, x0
     a40:	ldrb	w0, [x0]
     a44:	mov	w3, w0
     a48:	sxtw	x0, w3
     a4c:	lsl	x0, x0, #2
     a50:	add	x1, sp, #0x438
     a54:	ldr	w0, [x1, x0]
     a58:	add	w2, w0, #0x1
     a5c:	sxtw	x0, w3
     a60:	lsl	x0, x0, #2
     a64:	add	x1, sp, #0x438
     a68:	str	w2, [x1, x0]
     a6c:	ldr	w0, [sp, #2152]
     a70:	add	w0, w0, #0x1
     a74:	str	w0, [sp, #2152]
     a78:	ldr	w1, [sp, #2152]
     a7c:	ldr	w0, [sp, #20]
     a80:	cmp	w1, w0
     a84:	b.lt	a34 <fallbackSort+0x90>  // b.tstop
     a88:	str	wzr, [sp, #2152]
     a8c:	b	abc <fallbackSort+0x118>
     a90:	ldrsw	x0, [sp, #2152]
     a94:	lsl	x0, x0, #2
     a98:	add	x1, sp, #0x438
     a9c:	ldr	w2, [x1, x0]
     aa0:	ldrsw	x0, [sp, #2152]
     aa4:	lsl	x0, x0, #2
     aa8:	add	x1, sp, #0x38
     aac:	str	w2, [x1, x0]
     ab0:	ldr	w0, [sp, #2152]
     ab4:	add	w0, w0, #0x1
     ab8:	str	w0, [sp, #2152]
     abc:	ldr	w0, [sp, #2152]
     ac0:	cmp	w0, #0xff
     ac4:	b.le	a90 <fallbackSort+0xec>
     ac8:	mov	w0, #0x1                   	// #1
     acc:	str	w0, [sp, #2152]
     ad0:	b	b1c <fallbackSort+0x178>
     ad4:	ldrsw	x0, [sp, #2152]
     ad8:	lsl	x0, x0, #2
     adc:	add	x1, sp, #0x438
     ae0:	ldr	w1, [x1, x0]
     ae4:	ldr	w0, [sp, #2152]
     ae8:	sub	w0, w0, #0x1
     aec:	sxtw	x0, w0
     af0:	lsl	x0, x0, #2
     af4:	add	x2, sp, #0x438
     af8:	ldr	w0, [x2, x0]
     afc:	add	w2, w1, w0
     b00:	ldrsw	x0, [sp, #2152]
     b04:	lsl	x0, x0, #2
     b08:	add	x1, sp, #0x438
     b0c:	str	w2, [x1, x0]
     b10:	ldr	w0, [sp, #2152]
     b14:	add	w0, w0, #0x1
     b18:	str	w0, [sp, #2152]
     b1c:	ldr	w0, [sp, #2152]
     b20:	cmp	w0, #0x100
     b24:	b.le	ad4 <fallbackSort+0x130>
     b28:	str	wzr, [sp, #2152]
     b2c:	b	b94 <fallbackSort+0x1f0>
     b30:	ldrsw	x0, [sp, #2152]
     b34:	ldr	x1, [sp, #2120]
     b38:	add	x0, x1, x0
     b3c:	ldrb	w0, [x0]
     b40:	str	w0, [sp, #2148]
     b44:	ldrsw	x0, [sp, #2148]
     b48:	lsl	x0, x0, #2
     b4c:	add	x1, sp, #0x438
     b50:	ldr	w0, [x1, x0]
     b54:	sub	w0, w0, #0x1
     b58:	str	w0, [sp, #2144]
     b5c:	ldrsw	x0, [sp, #2148]
     b60:	lsl	x0, x0, #2
     b64:	add	x1, sp, #0x438
     b68:	ldr	w2, [sp, #2144]
     b6c:	str	w2, [x1, x0]
     b70:	ldrsw	x0, [sp, #2144]
     b74:	lsl	x0, x0, #2
     b78:	ldr	x1, [sp, #40]
     b7c:	add	x0, x1, x0
     b80:	ldr	w1, [sp, #2152]
     b84:	str	w1, [x0]
     b88:	ldr	w0, [sp, #2152]
     b8c:	add	w0, w0, #0x1
     b90:	str	w0, [sp, #2152]
     b94:	ldr	w1, [sp, #2152]
     b98:	ldr	w0, [sp, #20]
     b9c:	cmp	w1, w0
     ba0:	b.lt	b30 <fallbackSort+0x18c>  // b.tstop
     ba4:	ldr	w0, [sp, #20]
     ba8:	add	w1, w0, #0x1f
     bac:	cmp	w0, #0x0
     bb0:	csel	w0, w1, w0, lt  // lt = tstop
     bb4:	asr	w0, w0, #5
     bb8:	add	w0, w0, #0x2
     bbc:	str	w0, [sp, #2116]
     bc0:	str	wzr, [sp, #2152]
     bc4:	b	be8 <fallbackSort+0x244>
     bc8:	ldrsw	x0, [sp, #2152]
     bcc:	lsl	x0, x0, #2
     bd0:	ldr	x1, [sp, #24]
     bd4:	add	x0, x1, x0
     bd8:	str	wzr, [x0]
     bdc:	ldr	w0, [sp, #2152]
     be0:	add	w0, w0, #0x1
     be4:	str	w0, [sp, #2152]
     be8:	ldr	w1, [sp, #2152]
     bec:	ldr	w0, [sp, #2116]
     bf0:	cmp	w1, w0
     bf4:	b.lt	bc8 <fallbackSort+0x224>  // b.tstop
     bf8:	str	wzr, [sp, #2152]
     bfc:	b	c7c <fallbackSort+0x2d8>
     c00:	ldrsw	x0, [sp, #2152]
     c04:	lsl	x0, x0, #2
     c08:	add	x1, sp, #0x438
     c0c:	ldr	w0, [x1, x0]
     c10:	asr	w0, w0, #5
     c14:	sxtw	x0, w0
     c18:	lsl	x0, x0, #2
     c1c:	ldr	x1, [sp, #24]
     c20:	add	x0, x1, x0
     c24:	ldr	w2, [x0]
     c28:	ldrsw	x0, [sp, #2152]
     c2c:	lsl	x0, x0, #2
     c30:	add	x1, sp, #0x438
     c34:	ldr	w0, [x1, x0]
     c38:	and	w0, w0, #0x1f
     c3c:	mov	w1, #0x1                   	// #1
     c40:	lsl	w1, w1, w0
     c44:	ldrsw	x0, [sp, #2152]
     c48:	lsl	x0, x0, #2
     c4c:	add	x3, sp, #0x438
     c50:	ldr	w0, [x3, x0]
     c54:	asr	w0, w0, #5
     c58:	sxtw	x0, w0
     c5c:	lsl	x0, x0, #2
     c60:	ldr	x3, [sp, #24]
     c64:	add	x0, x3, x0
     c68:	orr	w1, w2, w1
     c6c:	str	w1, [x0]
     c70:	ldr	w0, [sp, #2152]
     c74:	add	w0, w0, #0x1
     c78:	str	w0, [sp, #2152]
     c7c:	ldr	w0, [sp, #2152]
     c80:	cmp	w0, #0xff
     c84:	b.le	c00 <fallbackSort+0x25c>
     c88:	str	wzr, [sp, #2152]
     c8c:	b	d8c <fallbackSort+0x3e8>
     c90:	ldr	w0, [sp, #2152]
     c94:	lsl	w1, w0, #1
     c98:	ldr	w0, [sp, #20]
     c9c:	add	w0, w1, w0
     ca0:	asr	w0, w0, #5
     ca4:	sxtw	x0, w0
     ca8:	lsl	x0, x0, #2
     cac:	ldr	x1, [sp, #24]
     cb0:	add	x0, x1, x0
     cb4:	ldr	w2, [x0]
     cb8:	ldr	w0, [sp, #2152]
     cbc:	lsl	w1, w0, #1
     cc0:	ldr	w0, [sp, #20]
     cc4:	add	w0, w1, w0
     cc8:	and	w0, w0, #0x1f
     ccc:	mov	w1, #0x1                   	// #1
     cd0:	lsl	w1, w1, w0
     cd4:	ldr	w0, [sp, #2152]
     cd8:	lsl	w3, w0, #1
     cdc:	ldr	w0, [sp, #20]
     ce0:	add	w0, w3, w0
     ce4:	asr	w0, w0, #5
     ce8:	sxtw	x0, w0
     cec:	lsl	x0, x0, #2
     cf0:	ldr	x3, [sp, #24]
     cf4:	add	x0, x3, x0
     cf8:	orr	w1, w2, w1
     cfc:	str	w1, [x0]
     d00:	ldr	w0, [sp, #2152]
     d04:	lsl	w1, w0, #1
     d08:	ldr	w0, [sp, #20]
     d0c:	add	w0, w1, w0
     d10:	add	w0, w0, #0x1
     d14:	asr	w0, w0, #5
     d18:	sxtw	x0, w0
     d1c:	lsl	x0, x0, #2
     d20:	ldr	x1, [sp, #24]
     d24:	add	x0, x1, x0
     d28:	ldr	w2, [x0]
     d2c:	ldr	w0, [sp, #2152]
     d30:	lsl	w1, w0, #1
     d34:	ldr	w0, [sp, #20]
     d38:	add	w0, w1, w0
     d3c:	add	w0, w0, #0x1
     d40:	and	w0, w0, #0x1f
     d44:	mov	w1, #0x1                   	// #1
     d48:	lsl	w0, w1, w0
     d4c:	mvn	w1, w0
     d50:	ldr	w0, [sp, #2152]
     d54:	lsl	w3, w0, #1
     d58:	ldr	w0, [sp, #20]
     d5c:	add	w0, w3, w0
     d60:	add	w0, w0, #0x1
     d64:	asr	w0, w0, #5
     d68:	sxtw	x0, w0
     d6c:	lsl	x0, x0, #2
     d70:	ldr	x3, [sp, #24]
     d74:	add	x0, x3, x0
     d78:	and	w1, w2, w1
     d7c:	str	w1, [x0]
     d80:	ldr	w0, [sp, #2152]
     d84:	add	w0, w0, #0x1
     d88:	str	w0, [sp, #2152]
     d8c:	ldr	w0, [sp, #2152]
     d90:	cmp	w0, #0x1f
     d94:	b.le	c90 <fallbackSort+0x2ec>
     d98:	mov	w0, #0x1                   	// #1
     d9c:	str	w0, [sp, #2156]
     da0:	ldr	w0, [sp, #16]
     da4:	cmp	w0, #0x3
     da8:	b.le	dcc <fallbackSort+0x428>
     dac:	adrp	x0, 0 <stderr>
     db0:	add	x0, x0, #0x0
     db4:	ldr	x3, [x0]
     db8:	ldr	w2, [sp, #2156]
     dbc:	adrp	x0, 0 <fallbackSimpleSort>
     dc0:	add	x1, x0, #0x0
     dc4:	mov	x0, x3
     dc8:	bl	0 <fprintf>
     dcc:	str	wzr, [sp, #2148]
     dd0:	str	wzr, [sp, #2152]
     dd4:	b	e78 <fallbackSort+0x4d4>
     dd8:	ldr	w0, [sp, #2152]
     ddc:	asr	w0, w0, #5
     de0:	sxtw	x0, w0
     de4:	lsl	x0, x0, #2
     de8:	ldr	x1, [sp, #24]
     dec:	add	x0, x1, x0
     df0:	ldr	w1, [x0]
     df4:	ldr	w0, [sp, #2152]
     df8:	and	w0, w0, #0x1f
     dfc:	mov	w2, #0x1                   	// #1
     e00:	lsl	w0, w2, w0
     e04:	and	w0, w1, w0
     e08:	cmp	w0, #0x0
     e0c:	b.eq	e18 <fallbackSort+0x474>  // b.none
     e10:	ldr	w0, [sp, #2152]
     e14:	str	w0, [sp, #2148]
     e18:	ldrsw	x0, [sp, #2152]
     e1c:	lsl	x0, x0, #2
     e20:	ldr	x1, [sp, #40]
     e24:	add	x0, x1, x0
     e28:	ldr	w1, [x0]
     e2c:	ldr	w0, [sp, #2156]
     e30:	sub	w0, w1, w0
     e34:	str	w0, [sp, #2144]
     e38:	ldr	w0, [sp, #2144]
     e3c:	cmp	w0, #0x0
     e40:	b.ge	e54 <fallbackSort+0x4b0>  // b.tcont
     e44:	ldr	w1, [sp, #2144]
     e48:	ldr	w0, [sp, #20]
     e4c:	add	w0, w1, w0
     e50:	str	w0, [sp, #2144]
     e54:	ldrsw	x0, [sp, #2144]
     e58:	lsl	x0, x0, #2
     e5c:	ldr	x1, [sp, #32]
     e60:	add	x0, x1, x0
     e64:	ldr	w1, [sp, #2148]
     e68:	str	w1, [x0]
     e6c:	ldr	w0, [sp, #2152]
     e70:	add	w0, w0, #0x1
     e74:	str	w0, [sp, #2152]
     e78:	ldr	w1, [sp, #2152]
     e7c:	ldr	w0, [sp, #20]
     e80:	cmp	w1, w0
     e84:	b.lt	dd8 <fallbackSort+0x434>  // b.tstop
     e88:	str	wzr, [sp, #2132]
     e8c:	mov	w0, #0xffffffff            	// #-1
     e90:	str	w0, [sp, #2140]
     e94:	ldr	w0, [sp, #2140]
     e98:	add	w0, w0, #0x1
     e9c:	str	w0, [sp, #2144]
     ea0:	b	eb0 <fallbackSort+0x50c>
     ea4:	ldr	w0, [sp, #2144]
     ea8:	add	w0, w0, #0x1
     eac:	str	w0, [sp, #2144]
     eb0:	ldr	w0, [sp, #2144]
     eb4:	asr	w0, w0, #5
     eb8:	sxtw	x0, w0
     ebc:	lsl	x0, x0, #2
     ec0:	ldr	x1, [sp, #24]
     ec4:	add	x0, x1, x0
     ec8:	ldr	w1, [x0]
     ecc:	ldr	w0, [sp, #2144]
     ed0:	and	w0, w0, #0x1f
     ed4:	mov	w2, #0x1                   	// #1
     ed8:	lsl	w0, w2, w0
     edc:	and	w0, w1, w0
     ee0:	cmp	w0, #0x0
     ee4:	b.eq	ef8 <fallbackSort+0x554>  // b.none
     ee8:	ldr	w0, [sp, #2144]
     eec:	and	w0, w0, #0x1f
     ef0:	cmp	w0, #0x0
     ef4:	b.ne	ea4 <fallbackSort+0x500>  // b.any
     ef8:	ldr	w0, [sp, #2144]
     efc:	asr	w0, w0, #5
     f00:	sxtw	x0, w0
     f04:	lsl	x0, x0, #2
     f08:	ldr	x1, [sp, #24]
     f0c:	add	x0, x1, x0
     f10:	ldr	w1, [x0]
     f14:	ldr	w0, [sp, #2144]
     f18:	and	w0, w0, #0x1f
     f1c:	mov	w2, #0x1                   	// #1
     f20:	lsl	w0, w2, w0
     f24:	and	w0, w1, w0
     f28:	cmp	w0, #0x0
     f2c:	b.eq	fac <fallbackSort+0x608>  // b.none
     f30:	b	f40 <fallbackSort+0x59c>
     f34:	ldr	w0, [sp, #2144]
     f38:	add	w0, w0, #0x20
     f3c:	str	w0, [sp, #2144]
     f40:	ldr	w0, [sp, #2144]
     f44:	asr	w0, w0, #5
     f48:	sxtw	x0, w0
     f4c:	lsl	x0, x0, #2
     f50:	ldr	x1, [sp, #24]
     f54:	add	x0, x1, x0
     f58:	ldr	w0, [x0]
     f5c:	cmn	w0, #0x1
     f60:	b.eq	f34 <fallbackSort+0x590>  // b.none
     f64:	b	f74 <fallbackSort+0x5d0>
     f68:	ldr	w0, [sp, #2144]
     f6c:	add	w0, w0, #0x1
     f70:	str	w0, [sp, #2144]
     f74:	ldr	w0, [sp, #2144]
     f78:	asr	w0, w0, #5
     f7c:	sxtw	x0, w0
     f80:	lsl	x0, x0, #2
     f84:	ldr	x1, [sp, #24]
     f88:	add	x0, x1, x0
     f8c:	ldr	w1, [x0]
     f90:	ldr	w0, [sp, #2144]
     f94:	and	w0, w0, #0x1f
     f98:	mov	w2, #0x1                   	// #1
     f9c:	lsl	w0, w2, w0
     fa0:	and	w0, w1, w0
     fa4:	cmp	w0, #0x0
     fa8:	b.ne	f68 <fallbackSort+0x5c4>  // b.any
     fac:	ldr	w0, [sp, #2144]
     fb0:	sub	w0, w0, #0x1
     fb4:	str	w0, [sp, #2112]
     fb8:	ldr	w1, [sp, #2112]
     fbc:	ldr	w0, [sp, #20]
     fc0:	cmp	w1, w0
     fc4:	b.ge	11f4 <fallbackSort+0x850>  // b.tcont
     fc8:	b	fd8 <fallbackSort+0x634>
     fcc:	ldr	w0, [sp, #2144]
     fd0:	add	w0, w0, #0x1
     fd4:	str	w0, [sp, #2144]
     fd8:	ldr	w0, [sp, #2144]
     fdc:	asr	w0, w0, #5
     fe0:	sxtw	x0, w0
     fe4:	lsl	x0, x0, #2
     fe8:	ldr	x1, [sp, #24]
     fec:	add	x0, x1, x0
     ff0:	ldr	w1, [x0]
     ff4:	ldr	w0, [sp, #2144]
     ff8:	and	w0, w0, #0x1f
     ffc:	mov	w2, #0x1                   	// #1
    1000:	lsl	w0, w2, w0
    1004:	and	w0, w1, w0
    1008:	cmp	w0, #0x0
    100c:	b.ne	1020 <fallbackSort+0x67c>  // b.any
    1010:	ldr	w0, [sp, #2144]
    1014:	and	w0, w0, #0x1f
    1018:	cmp	w0, #0x0
    101c:	b.ne	fcc <fallbackSort+0x628>  // b.any
    1020:	ldr	w0, [sp, #2144]
    1024:	asr	w0, w0, #5
    1028:	sxtw	x0, w0
    102c:	lsl	x0, x0, #2
    1030:	ldr	x1, [sp, #24]
    1034:	add	x0, x1, x0
    1038:	ldr	w1, [x0]
    103c:	ldr	w0, [sp, #2144]
    1040:	and	w0, w0, #0x1f
    1044:	mov	w2, #0x1                   	// #1
    1048:	lsl	w0, w2, w0
    104c:	and	w0, w1, w0
    1050:	cmp	w0, #0x0
    1054:	b.ne	10d4 <fallbackSort+0x730>  // b.any
    1058:	b	1068 <fallbackSort+0x6c4>
    105c:	ldr	w0, [sp, #2144]
    1060:	add	w0, w0, #0x20
    1064:	str	w0, [sp, #2144]
    1068:	ldr	w0, [sp, #2144]
    106c:	asr	w0, w0, #5
    1070:	sxtw	x0, w0
    1074:	lsl	x0, x0, #2
    1078:	ldr	x1, [sp, #24]
    107c:	add	x0, x1, x0
    1080:	ldr	w0, [x0]
    1084:	cmp	w0, #0x0
    1088:	b.eq	105c <fallbackSort+0x6b8>  // b.none
    108c:	b	109c <fallbackSort+0x6f8>
    1090:	ldr	w0, [sp, #2144]
    1094:	add	w0, w0, #0x1
    1098:	str	w0, [sp, #2144]
    109c:	ldr	w0, [sp, #2144]
    10a0:	asr	w0, w0, #5
    10a4:	sxtw	x0, w0
    10a8:	lsl	x0, x0, #2
    10ac:	ldr	x1, [sp, #24]
    10b0:	add	x0, x1, x0
    10b4:	ldr	w1, [x0]
    10b8:	ldr	w0, [sp, #2144]
    10bc:	and	w0, w0, #0x1f
    10c0:	mov	w2, #0x1                   	// #1
    10c4:	lsl	w0, w2, w0
    10c8:	and	w0, w1, w0
    10cc:	cmp	w0, #0x0
    10d0:	b.eq	1090 <fallbackSort+0x6ec>  // b.none
    10d4:	ldr	w0, [sp, #2144]
    10d8:	sub	w0, w0, #0x1
    10dc:	str	w0, [sp, #2140]
    10e0:	ldr	w1, [sp, #2140]
    10e4:	ldr	w0, [sp, #20]
    10e8:	cmp	w1, w0
    10ec:	b.ge	11fc <fallbackSort+0x858>  // b.tcont
    10f0:	ldr	w1, [sp, #2140]
    10f4:	ldr	w0, [sp, #2112]
    10f8:	cmp	w1, w0
    10fc:	b.le	e94 <fallbackSort+0x4f0>
    1100:	ldr	w1, [sp, #2140]
    1104:	ldr	w0, [sp, #2112]
    1108:	sub	w0, w1, w0
    110c:	add	w0, w0, #0x1
    1110:	ldr	w1, [sp, #2132]
    1114:	add	w0, w1, w0
    1118:	str	w0, [sp, #2132]
    111c:	ldr	w3, [sp, #2140]
    1120:	ldr	w2, [sp, #2112]
    1124:	ldr	x1, [sp, #32]
    1128:	ldr	x0, [sp, #40]
    112c:	bl	250 <fallbackQSort3>
    1130:	mov	w0, #0xffffffff            	// #-1
    1134:	str	w0, [sp, #2136]
    1138:	ldr	w0, [sp, #2112]
    113c:	str	w0, [sp, #2152]
    1140:	b	11e0 <fallbackSort+0x83c>
    1144:	ldrsw	x0, [sp, #2152]
    1148:	lsl	x0, x0, #2
    114c:	ldr	x1, [sp, #40]
    1150:	add	x0, x1, x0
    1154:	ldr	w0, [x0]
    1158:	mov	w0, w0
    115c:	lsl	x0, x0, #2
    1160:	ldr	x1, [sp, #32]
    1164:	add	x0, x1, x0
    1168:	ldr	w0, [x0]
    116c:	str	w0, [sp, #2108]
    1170:	ldr	w1, [sp, #2136]
    1174:	ldr	w0, [sp, #2108]
    1178:	cmp	w1, w0
    117c:	b.eq	11d4 <fallbackSort+0x830>  // b.none
    1180:	ldr	w0, [sp, #2152]
    1184:	asr	w0, w0, #5
    1188:	sxtw	x0, w0
    118c:	lsl	x0, x0, #2
    1190:	ldr	x1, [sp, #24]
    1194:	add	x0, x1, x0
    1198:	ldr	w2, [x0]
    119c:	ldr	w0, [sp, #2152]
    11a0:	and	w0, w0, #0x1f
    11a4:	mov	w1, #0x1                   	// #1
    11a8:	lsl	w1, w1, w0
    11ac:	ldr	w0, [sp, #2152]
    11b0:	asr	w0, w0, #5
    11b4:	sxtw	x0, w0
    11b8:	lsl	x0, x0, #2
    11bc:	ldr	x3, [sp, #24]
    11c0:	add	x0, x3, x0
    11c4:	orr	w1, w2, w1
    11c8:	str	w1, [x0]
    11cc:	ldr	w0, [sp, #2108]
    11d0:	str	w0, [sp, #2136]
    11d4:	ldr	w0, [sp, #2152]
    11d8:	add	w0, w0, #0x1
    11dc:	str	w0, [sp, #2152]
    11e0:	ldr	w1, [sp, #2152]
    11e4:	ldr	w0, [sp, #2140]
    11e8:	cmp	w1, w0
    11ec:	b.le	1144 <fallbackSort+0x7a0>
    11f0:	b	e94 <fallbackSort+0x4f0>
    11f4:	nop
    11f8:	b	1200 <fallbackSort+0x85c>
    11fc:	nop
    1200:	ldr	w0, [sp, #16]
    1204:	cmp	w0, #0x3
    1208:	b.le	122c <fallbackSort+0x888>
    120c:	adrp	x0, 0 <stderr>
    1210:	add	x0, x0, #0x0
    1214:	ldr	x3, [x0]
    1218:	ldr	w2, [sp, #2132]
    121c:	adrp	x0, 0 <fallbackSimpleSort>
    1220:	add	x1, x0, #0x0
    1224:	mov	x0, x3
    1228:	bl	0 <fprintf>
    122c:	ldr	w0, [sp, #2156]
    1230:	lsl	w0, w0, #1
    1234:	str	w0, [sp, #2156]
    1238:	ldr	w1, [sp, #2156]
    123c:	ldr	w0, [sp, #20]
    1240:	cmp	w1, w0
    1244:	b.gt	1258 <fallbackSort+0x8b4>
    1248:	ldr	w0, [sp, #2132]
    124c:	cmp	w0, #0x0
    1250:	b.eq	1258 <fallbackSort+0x8b4>  // b.none
    1254:	b	da0 <fallbackSort+0x3fc>
    1258:	ldr	w0, [sp, #16]
    125c:	cmp	w0, #0x3
    1260:	b.le	1288 <fallbackSort+0x8e4>
    1264:	adrp	x0, 0 <stderr>
    1268:	add	x0, x0, #0x0
    126c:	ldr	x0, [x0]
    1270:	mov	x3, x0
    1274:	mov	x2, #0x21                  	// #33
    1278:	mov	x1, #0x1                   	// #1
    127c:	adrp	x0, 0 <fallbackSimpleSort>
    1280:	add	x0, x0, #0x0
    1284:	bl	0 <fwrite>
    1288:	str	wzr, [sp, #2148]
    128c:	str	wzr, [sp, #2152]
    1290:	b	1314 <fallbackSort+0x970>
    1294:	ldr	w0, [sp, #2148]
    1298:	add	w0, w0, #0x1
    129c:	str	w0, [sp, #2148]
    12a0:	ldrsw	x0, [sp, #2148]
    12a4:	lsl	x0, x0, #2
    12a8:	add	x1, sp, #0x38
    12ac:	ldr	w0, [x1, x0]
    12b0:	cmp	w0, #0x0
    12b4:	b.eq	1294 <fallbackSort+0x8f0>  // b.none
    12b8:	ldrsw	x0, [sp, #2148]
    12bc:	lsl	x0, x0, #2
    12c0:	add	x1, sp, #0x38
    12c4:	ldr	w0, [x1, x0]
    12c8:	sub	w2, w0, #0x1
    12cc:	ldrsw	x0, [sp, #2148]
    12d0:	lsl	x0, x0, #2
    12d4:	add	x1, sp, #0x38
    12d8:	str	w2, [x1, x0]
    12dc:	ldrsw	x0, [sp, #2152]
    12e0:	lsl	x0, x0, #2
    12e4:	ldr	x1, [sp, #40]
    12e8:	add	x0, x1, x0
    12ec:	ldr	w0, [x0]
    12f0:	mov	w0, w0
    12f4:	ldr	x1, [sp, #2120]
    12f8:	add	x0, x1, x0
    12fc:	ldr	w1, [sp, #2148]
    1300:	and	w1, w1, #0xff
    1304:	strb	w1, [x0]
    1308:	ldr	w0, [sp, #2152]
    130c:	add	w0, w0, #0x1
    1310:	str	w0, [sp, #2152]
    1314:	ldr	w1, [sp, #2152]
    1318:	ldr	w0, [sp, #20]
    131c:	cmp	w1, w0
    1320:	b.lt	12a0 <fallbackSort+0x8fc>  // b.tstop
    1324:	ldr	w0, [sp, #2148]
    1328:	cmp	w0, #0xff
    132c:	b.le	1338 <fallbackSort+0x994>
    1330:	mov	w0, #0x3ed                 	// #1005
    1334:	bl	0 <BZ2_bz__AssertH__fail>
    1338:	nop
    133c:	ldp	x29, x30, [sp]
    1340:	add	sp, sp, #0x870
    1344:	ret

0000000000001348 <mainGtU>:
    1348:	sub	sp, sp, #0x40
    134c:	str	w0, [sp, #44]
    1350:	str	w1, [sp, #40]
    1354:	str	x2, [sp, #32]
    1358:	str	x3, [sp, #24]
    135c:	str	w4, [sp, #20]
    1360:	str	x5, [sp, #8]
    1364:	ldr	w0, [sp, #44]
    1368:	ldr	x1, [sp, #32]
    136c:	add	x0, x1, x0
    1370:	ldrb	w0, [x0]
    1374:	strb	w0, [sp, #59]
    1378:	ldr	w0, [sp, #40]
    137c:	ldr	x1, [sp, #32]
    1380:	add	x0, x1, x0
    1384:	ldrb	w0, [x0]
    1388:	strb	w0, [sp, #58]
    138c:	ldrb	w1, [sp, #59]
    1390:	ldrb	w0, [sp, #58]
    1394:	cmp	w1, w0
    1398:	b.eq	13b4 <mainGtU+0x6c>  // b.none
    139c:	ldrb	w1, [sp, #59]
    13a0:	ldrb	w0, [sp, #58]
    13a4:	cmp	w1, w0
    13a8:	cset	w0, hi  // hi = pmore
    13ac:	and	w0, w0, #0xff
    13b0:	b	1ec0 <mainGtU+0xb78>
    13b4:	ldr	w0, [sp, #44]
    13b8:	add	w0, w0, #0x1
    13bc:	str	w0, [sp, #44]
    13c0:	ldr	w0, [sp, #40]
    13c4:	add	w0, w0, #0x1
    13c8:	str	w0, [sp, #40]
    13cc:	ldr	w0, [sp, #44]
    13d0:	ldr	x1, [sp, #32]
    13d4:	add	x0, x1, x0
    13d8:	ldrb	w0, [x0]
    13dc:	strb	w0, [sp, #59]
    13e0:	ldr	w0, [sp, #40]
    13e4:	ldr	x1, [sp, #32]
    13e8:	add	x0, x1, x0
    13ec:	ldrb	w0, [x0]
    13f0:	strb	w0, [sp, #58]
    13f4:	ldrb	w1, [sp, #59]
    13f8:	ldrb	w0, [sp, #58]
    13fc:	cmp	w1, w0
    1400:	b.eq	141c <mainGtU+0xd4>  // b.none
    1404:	ldrb	w1, [sp, #59]
    1408:	ldrb	w0, [sp, #58]
    140c:	cmp	w1, w0
    1410:	cset	w0, hi  // hi = pmore
    1414:	and	w0, w0, #0xff
    1418:	b	1ec0 <mainGtU+0xb78>
    141c:	ldr	w0, [sp, #44]
    1420:	add	w0, w0, #0x1
    1424:	str	w0, [sp, #44]
    1428:	ldr	w0, [sp, #40]
    142c:	add	w0, w0, #0x1
    1430:	str	w0, [sp, #40]
    1434:	ldr	w0, [sp, #44]
    1438:	ldr	x1, [sp, #32]
    143c:	add	x0, x1, x0
    1440:	ldrb	w0, [x0]
    1444:	strb	w0, [sp, #59]
    1448:	ldr	w0, [sp, #40]
    144c:	ldr	x1, [sp, #32]
    1450:	add	x0, x1, x0
    1454:	ldrb	w0, [x0]
    1458:	strb	w0, [sp, #58]
    145c:	ldrb	w1, [sp, #59]
    1460:	ldrb	w0, [sp, #58]
    1464:	cmp	w1, w0
    1468:	b.eq	1484 <mainGtU+0x13c>  // b.none
    146c:	ldrb	w1, [sp, #59]
    1470:	ldrb	w0, [sp, #58]
    1474:	cmp	w1, w0
    1478:	cset	w0, hi  // hi = pmore
    147c:	and	w0, w0, #0xff
    1480:	b	1ec0 <mainGtU+0xb78>
    1484:	ldr	w0, [sp, #44]
    1488:	add	w0, w0, #0x1
    148c:	str	w0, [sp, #44]
    1490:	ldr	w0, [sp, #40]
    1494:	add	w0, w0, #0x1
    1498:	str	w0, [sp, #40]
    149c:	ldr	w0, [sp, #44]
    14a0:	ldr	x1, [sp, #32]
    14a4:	add	x0, x1, x0
    14a8:	ldrb	w0, [x0]
    14ac:	strb	w0, [sp, #59]
    14b0:	ldr	w0, [sp, #40]
    14b4:	ldr	x1, [sp, #32]
    14b8:	add	x0, x1, x0
    14bc:	ldrb	w0, [x0]
    14c0:	strb	w0, [sp, #58]
    14c4:	ldrb	w1, [sp, #59]
    14c8:	ldrb	w0, [sp, #58]
    14cc:	cmp	w1, w0
    14d0:	b.eq	14ec <mainGtU+0x1a4>  // b.none
    14d4:	ldrb	w1, [sp, #59]
    14d8:	ldrb	w0, [sp, #58]
    14dc:	cmp	w1, w0
    14e0:	cset	w0, hi  // hi = pmore
    14e4:	and	w0, w0, #0xff
    14e8:	b	1ec0 <mainGtU+0xb78>
    14ec:	ldr	w0, [sp, #44]
    14f0:	add	w0, w0, #0x1
    14f4:	str	w0, [sp, #44]
    14f8:	ldr	w0, [sp, #40]
    14fc:	add	w0, w0, #0x1
    1500:	str	w0, [sp, #40]
    1504:	ldr	w0, [sp, #44]
    1508:	ldr	x1, [sp, #32]
    150c:	add	x0, x1, x0
    1510:	ldrb	w0, [x0]
    1514:	strb	w0, [sp, #59]
    1518:	ldr	w0, [sp, #40]
    151c:	ldr	x1, [sp, #32]
    1520:	add	x0, x1, x0
    1524:	ldrb	w0, [x0]
    1528:	strb	w0, [sp, #58]
    152c:	ldrb	w1, [sp, #59]
    1530:	ldrb	w0, [sp, #58]
    1534:	cmp	w1, w0
    1538:	b.eq	1554 <mainGtU+0x20c>  // b.none
    153c:	ldrb	w1, [sp, #59]
    1540:	ldrb	w0, [sp, #58]
    1544:	cmp	w1, w0
    1548:	cset	w0, hi  // hi = pmore
    154c:	and	w0, w0, #0xff
    1550:	b	1ec0 <mainGtU+0xb78>
    1554:	ldr	w0, [sp, #44]
    1558:	add	w0, w0, #0x1
    155c:	str	w0, [sp, #44]
    1560:	ldr	w0, [sp, #40]
    1564:	add	w0, w0, #0x1
    1568:	str	w0, [sp, #40]
    156c:	ldr	w0, [sp, #44]
    1570:	ldr	x1, [sp, #32]
    1574:	add	x0, x1, x0
    1578:	ldrb	w0, [x0]
    157c:	strb	w0, [sp, #59]
    1580:	ldr	w0, [sp, #40]
    1584:	ldr	x1, [sp, #32]
    1588:	add	x0, x1, x0
    158c:	ldrb	w0, [x0]
    1590:	strb	w0, [sp, #58]
    1594:	ldrb	w1, [sp, #59]
    1598:	ldrb	w0, [sp, #58]
    159c:	cmp	w1, w0
    15a0:	b.eq	15bc <mainGtU+0x274>  // b.none
    15a4:	ldrb	w1, [sp, #59]
    15a8:	ldrb	w0, [sp, #58]
    15ac:	cmp	w1, w0
    15b0:	cset	w0, hi  // hi = pmore
    15b4:	and	w0, w0, #0xff
    15b8:	b	1ec0 <mainGtU+0xb78>
    15bc:	ldr	w0, [sp, #44]
    15c0:	add	w0, w0, #0x1
    15c4:	str	w0, [sp, #44]
    15c8:	ldr	w0, [sp, #40]
    15cc:	add	w0, w0, #0x1
    15d0:	str	w0, [sp, #40]
    15d4:	ldr	w0, [sp, #44]
    15d8:	ldr	x1, [sp, #32]
    15dc:	add	x0, x1, x0
    15e0:	ldrb	w0, [x0]
    15e4:	strb	w0, [sp, #59]
    15e8:	ldr	w0, [sp, #40]
    15ec:	ldr	x1, [sp, #32]
    15f0:	add	x0, x1, x0
    15f4:	ldrb	w0, [x0]
    15f8:	strb	w0, [sp, #58]
    15fc:	ldrb	w1, [sp, #59]
    1600:	ldrb	w0, [sp, #58]
    1604:	cmp	w1, w0
    1608:	b.eq	1624 <mainGtU+0x2dc>  // b.none
    160c:	ldrb	w1, [sp, #59]
    1610:	ldrb	w0, [sp, #58]
    1614:	cmp	w1, w0
    1618:	cset	w0, hi  // hi = pmore
    161c:	and	w0, w0, #0xff
    1620:	b	1ec0 <mainGtU+0xb78>
    1624:	ldr	w0, [sp, #44]
    1628:	add	w0, w0, #0x1
    162c:	str	w0, [sp, #44]
    1630:	ldr	w0, [sp, #40]
    1634:	add	w0, w0, #0x1
    1638:	str	w0, [sp, #40]
    163c:	ldr	w0, [sp, #44]
    1640:	ldr	x1, [sp, #32]
    1644:	add	x0, x1, x0
    1648:	ldrb	w0, [x0]
    164c:	strb	w0, [sp, #59]
    1650:	ldr	w0, [sp, #40]
    1654:	ldr	x1, [sp, #32]
    1658:	add	x0, x1, x0
    165c:	ldrb	w0, [x0]
    1660:	strb	w0, [sp, #58]
    1664:	ldrb	w1, [sp, #59]
    1668:	ldrb	w0, [sp, #58]
    166c:	cmp	w1, w0
    1670:	b.eq	168c <mainGtU+0x344>  // b.none
    1674:	ldrb	w1, [sp, #59]
    1678:	ldrb	w0, [sp, #58]
    167c:	cmp	w1, w0
    1680:	cset	w0, hi  // hi = pmore
    1684:	and	w0, w0, #0xff
    1688:	b	1ec0 <mainGtU+0xb78>
    168c:	ldr	w0, [sp, #44]
    1690:	add	w0, w0, #0x1
    1694:	str	w0, [sp, #44]
    1698:	ldr	w0, [sp, #40]
    169c:	add	w0, w0, #0x1
    16a0:	str	w0, [sp, #40]
    16a4:	ldr	w0, [sp, #44]
    16a8:	ldr	x1, [sp, #32]
    16ac:	add	x0, x1, x0
    16b0:	ldrb	w0, [x0]
    16b4:	strb	w0, [sp, #59]
    16b8:	ldr	w0, [sp, #40]
    16bc:	ldr	x1, [sp, #32]
    16c0:	add	x0, x1, x0
    16c4:	ldrb	w0, [x0]
    16c8:	strb	w0, [sp, #58]
    16cc:	ldrb	w1, [sp, #59]
    16d0:	ldrb	w0, [sp, #58]
    16d4:	cmp	w1, w0
    16d8:	b.eq	16f4 <mainGtU+0x3ac>  // b.none
    16dc:	ldrb	w1, [sp, #59]
    16e0:	ldrb	w0, [sp, #58]
    16e4:	cmp	w1, w0
    16e8:	cset	w0, hi  // hi = pmore
    16ec:	and	w0, w0, #0xff
    16f0:	b	1ec0 <mainGtU+0xb78>
    16f4:	ldr	w0, [sp, #44]
    16f8:	add	w0, w0, #0x1
    16fc:	str	w0, [sp, #44]
    1700:	ldr	w0, [sp, #40]
    1704:	add	w0, w0, #0x1
    1708:	str	w0, [sp, #40]
    170c:	ldr	w0, [sp, #44]
    1710:	ldr	x1, [sp, #32]
    1714:	add	x0, x1, x0
    1718:	ldrb	w0, [x0]
    171c:	strb	w0, [sp, #59]
    1720:	ldr	w0, [sp, #40]
    1724:	ldr	x1, [sp, #32]
    1728:	add	x0, x1, x0
    172c:	ldrb	w0, [x0]
    1730:	strb	w0, [sp, #58]
    1734:	ldrb	w1, [sp, #59]
    1738:	ldrb	w0, [sp, #58]
    173c:	cmp	w1, w0
    1740:	b.eq	175c <mainGtU+0x414>  // b.none
    1744:	ldrb	w1, [sp, #59]
    1748:	ldrb	w0, [sp, #58]
    174c:	cmp	w1, w0
    1750:	cset	w0, hi  // hi = pmore
    1754:	and	w0, w0, #0xff
    1758:	b	1ec0 <mainGtU+0xb78>
    175c:	ldr	w0, [sp, #44]
    1760:	add	w0, w0, #0x1
    1764:	str	w0, [sp, #44]
    1768:	ldr	w0, [sp, #40]
    176c:	add	w0, w0, #0x1
    1770:	str	w0, [sp, #40]
    1774:	ldr	w0, [sp, #44]
    1778:	ldr	x1, [sp, #32]
    177c:	add	x0, x1, x0
    1780:	ldrb	w0, [x0]
    1784:	strb	w0, [sp, #59]
    1788:	ldr	w0, [sp, #40]
    178c:	ldr	x1, [sp, #32]
    1790:	add	x0, x1, x0
    1794:	ldrb	w0, [x0]
    1798:	strb	w0, [sp, #58]
    179c:	ldrb	w1, [sp, #59]
    17a0:	ldrb	w0, [sp, #58]
    17a4:	cmp	w1, w0
    17a8:	b.eq	17c4 <mainGtU+0x47c>  // b.none
    17ac:	ldrb	w1, [sp, #59]
    17b0:	ldrb	w0, [sp, #58]
    17b4:	cmp	w1, w0
    17b8:	cset	w0, hi  // hi = pmore
    17bc:	and	w0, w0, #0xff
    17c0:	b	1ec0 <mainGtU+0xb78>
    17c4:	ldr	w0, [sp, #44]
    17c8:	add	w0, w0, #0x1
    17cc:	str	w0, [sp, #44]
    17d0:	ldr	w0, [sp, #40]
    17d4:	add	w0, w0, #0x1
    17d8:	str	w0, [sp, #40]
    17dc:	ldr	w0, [sp, #44]
    17e0:	ldr	x1, [sp, #32]
    17e4:	add	x0, x1, x0
    17e8:	ldrb	w0, [x0]
    17ec:	strb	w0, [sp, #59]
    17f0:	ldr	w0, [sp, #40]
    17f4:	ldr	x1, [sp, #32]
    17f8:	add	x0, x1, x0
    17fc:	ldrb	w0, [x0]
    1800:	strb	w0, [sp, #58]
    1804:	ldrb	w1, [sp, #59]
    1808:	ldrb	w0, [sp, #58]
    180c:	cmp	w1, w0
    1810:	b.eq	182c <mainGtU+0x4e4>  // b.none
    1814:	ldrb	w1, [sp, #59]
    1818:	ldrb	w0, [sp, #58]
    181c:	cmp	w1, w0
    1820:	cset	w0, hi  // hi = pmore
    1824:	and	w0, w0, #0xff
    1828:	b	1ec0 <mainGtU+0xb78>
    182c:	ldr	w0, [sp, #44]
    1830:	add	w0, w0, #0x1
    1834:	str	w0, [sp, #44]
    1838:	ldr	w0, [sp, #40]
    183c:	add	w0, w0, #0x1
    1840:	str	w0, [sp, #40]
    1844:	ldr	w0, [sp, #20]
    1848:	add	w0, w0, #0x8
    184c:	str	w0, [sp, #60]
    1850:	ldr	w0, [sp, #44]
    1854:	ldr	x1, [sp, #32]
    1858:	add	x0, x1, x0
    185c:	ldrb	w0, [x0]
    1860:	strb	w0, [sp, #59]
    1864:	ldr	w0, [sp, #40]
    1868:	ldr	x1, [sp, #32]
    186c:	add	x0, x1, x0
    1870:	ldrb	w0, [x0]
    1874:	strb	w0, [sp, #58]
    1878:	ldrb	w1, [sp, #59]
    187c:	ldrb	w0, [sp, #58]
    1880:	cmp	w1, w0
    1884:	b.eq	18a0 <mainGtU+0x558>  // b.none
    1888:	ldrb	w1, [sp, #59]
    188c:	ldrb	w0, [sp, #58]
    1890:	cmp	w1, w0
    1894:	cset	w0, hi  // hi = pmore
    1898:	and	w0, w0, #0xff
    189c:	b	1ec0 <mainGtU+0xb78>
    18a0:	ldr	w0, [sp, #44]
    18a4:	lsl	x0, x0, #1
    18a8:	ldr	x1, [sp, #24]
    18ac:	add	x0, x1, x0
    18b0:	ldrh	w0, [x0]
    18b4:	strh	w0, [sp, #56]
    18b8:	ldr	w0, [sp, #40]
    18bc:	lsl	x0, x0, #1
    18c0:	ldr	x1, [sp, #24]
    18c4:	add	x0, x1, x0
    18c8:	ldrh	w0, [x0]
    18cc:	strh	w0, [sp, #54]
    18d0:	ldrh	w1, [sp, #56]
    18d4:	ldrh	w0, [sp, #54]
    18d8:	cmp	w1, w0
    18dc:	b.eq	18f8 <mainGtU+0x5b0>  // b.none
    18e0:	ldrh	w1, [sp, #56]
    18e4:	ldrh	w0, [sp, #54]
    18e8:	cmp	w1, w0
    18ec:	cset	w0, hi  // hi = pmore
    18f0:	and	w0, w0, #0xff
    18f4:	b	1ec0 <mainGtU+0xb78>
    18f8:	ldr	w0, [sp, #44]
    18fc:	add	w0, w0, #0x1
    1900:	str	w0, [sp, #44]
    1904:	ldr	w0, [sp, #40]
    1908:	add	w0, w0, #0x1
    190c:	str	w0, [sp, #40]
    1910:	ldr	w0, [sp, #44]
    1914:	ldr	x1, [sp, #32]
    1918:	add	x0, x1, x0
    191c:	ldrb	w0, [x0]
    1920:	strb	w0, [sp, #59]
    1924:	ldr	w0, [sp, #40]
    1928:	ldr	x1, [sp, #32]
    192c:	add	x0, x1, x0
    1930:	ldrb	w0, [x0]
    1934:	strb	w0, [sp, #58]
    1938:	ldrb	w1, [sp, #59]
    193c:	ldrb	w0, [sp, #58]
    1940:	cmp	w1, w0
    1944:	b.eq	1960 <mainGtU+0x618>  // b.none
    1948:	ldrb	w1, [sp, #59]
    194c:	ldrb	w0, [sp, #58]
    1950:	cmp	w1, w0
    1954:	cset	w0, hi  // hi = pmore
    1958:	and	w0, w0, #0xff
    195c:	b	1ec0 <mainGtU+0xb78>
    1960:	ldr	w0, [sp, #44]
    1964:	lsl	x0, x0, #1
    1968:	ldr	x1, [sp, #24]
    196c:	add	x0, x1, x0
    1970:	ldrh	w0, [x0]
    1974:	strh	w0, [sp, #56]
    1978:	ldr	w0, [sp, #40]
    197c:	lsl	x0, x0, #1
    1980:	ldr	x1, [sp, #24]
    1984:	add	x0, x1, x0
    1988:	ldrh	w0, [x0]
    198c:	strh	w0, [sp, #54]
    1990:	ldrh	w1, [sp, #56]
    1994:	ldrh	w0, [sp, #54]
    1998:	cmp	w1, w0
    199c:	b.eq	19b8 <mainGtU+0x670>  // b.none
    19a0:	ldrh	w1, [sp, #56]
    19a4:	ldrh	w0, [sp, #54]
    19a8:	cmp	w1, w0
    19ac:	cset	w0, hi  // hi = pmore
    19b0:	and	w0, w0, #0xff
    19b4:	b	1ec0 <mainGtU+0xb78>
    19b8:	ldr	w0, [sp, #44]
    19bc:	add	w0, w0, #0x1
    19c0:	str	w0, [sp, #44]
    19c4:	ldr	w0, [sp, #40]
    19c8:	add	w0, w0, #0x1
    19cc:	str	w0, [sp, #40]
    19d0:	ldr	w0, [sp, #44]
    19d4:	ldr	x1, [sp, #32]
    19d8:	add	x0, x1, x0
    19dc:	ldrb	w0, [x0]
    19e0:	strb	w0, [sp, #59]
    19e4:	ldr	w0, [sp, #40]
    19e8:	ldr	x1, [sp, #32]
    19ec:	add	x0, x1, x0
    19f0:	ldrb	w0, [x0]
    19f4:	strb	w0, [sp, #58]
    19f8:	ldrb	w1, [sp, #59]
    19fc:	ldrb	w0, [sp, #58]
    1a00:	cmp	w1, w0
    1a04:	b.eq	1a20 <mainGtU+0x6d8>  // b.none
    1a08:	ldrb	w1, [sp, #59]
    1a0c:	ldrb	w0, [sp, #58]
    1a10:	cmp	w1, w0
    1a14:	cset	w0, hi  // hi = pmore
    1a18:	and	w0, w0, #0xff
    1a1c:	b	1ec0 <mainGtU+0xb78>
    1a20:	ldr	w0, [sp, #44]
    1a24:	lsl	x0, x0, #1
    1a28:	ldr	x1, [sp, #24]
    1a2c:	add	x0, x1, x0
    1a30:	ldrh	w0, [x0]
    1a34:	strh	w0, [sp, #56]
    1a38:	ldr	w0, [sp, #40]
    1a3c:	lsl	x0, x0, #1
    1a40:	ldr	x1, [sp, #24]
    1a44:	add	x0, x1, x0
    1a48:	ldrh	w0, [x0]
    1a4c:	strh	w0, [sp, #54]
    1a50:	ldrh	w1, [sp, #56]
    1a54:	ldrh	w0, [sp, #54]
    1a58:	cmp	w1, w0
    1a5c:	b.eq	1a78 <mainGtU+0x730>  // b.none
    1a60:	ldrh	w1, [sp, #56]
    1a64:	ldrh	w0, [sp, #54]
    1a68:	cmp	w1, w0
    1a6c:	cset	w0, hi  // hi = pmore
    1a70:	and	w0, w0, #0xff
    1a74:	b	1ec0 <mainGtU+0xb78>
    1a78:	ldr	w0, [sp, #44]
    1a7c:	add	w0, w0, #0x1
    1a80:	str	w0, [sp, #44]
    1a84:	ldr	w0, [sp, #40]
    1a88:	add	w0, w0, #0x1
    1a8c:	str	w0, [sp, #40]
    1a90:	ldr	w0, [sp, #44]
    1a94:	ldr	x1, [sp, #32]
    1a98:	add	x0, x1, x0
    1a9c:	ldrb	w0, [x0]
    1aa0:	strb	w0, [sp, #59]
    1aa4:	ldr	w0, [sp, #40]
    1aa8:	ldr	x1, [sp, #32]
    1aac:	add	x0, x1, x0
    1ab0:	ldrb	w0, [x0]
    1ab4:	strb	w0, [sp, #58]
    1ab8:	ldrb	w1, [sp, #59]
    1abc:	ldrb	w0, [sp, #58]
    1ac0:	cmp	w1, w0
    1ac4:	b.eq	1ae0 <mainGtU+0x798>  // b.none
    1ac8:	ldrb	w1, [sp, #59]
    1acc:	ldrb	w0, [sp, #58]
    1ad0:	cmp	w1, w0
    1ad4:	cset	w0, hi  // hi = pmore
    1ad8:	and	w0, w0, #0xff
    1adc:	b	1ec0 <mainGtU+0xb78>
    1ae0:	ldr	w0, [sp, #44]
    1ae4:	lsl	x0, x0, #1
    1ae8:	ldr	x1, [sp, #24]
    1aec:	add	x0, x1, x0
    1af0:	ldrh	w0, [x0]
    1af4:	strh	w0, [sp, #56]
    1af8:	ldr	w0, [sp, #40]
    1afc:	lsl	x0, x0, #1
    1b00:	ldr	x1, [sp, #24]
    1b04:	add	x0, x1, x0
    1b08:	ldrh	w0, [x0]
    1b0c:	strh	w0, [sp, #54]
    1b10:	ldrh	w1, [sp, #56]
    1b14:	ldrh	w0, [sp, #54]
    1b18:	cmp	w1, w0
    1b1c:	b.eq	1b38 <mainGtU+0x7f0>  // b.none
    1b20:	ldrh	w1, [sp, #56]
    1b24:	ldrh	w0, [sp, #54]
    1b28:	cmp	w1, w0
    1b2c:	cset	w0, hi  // hi = pmore
    1b30:	and	w0, w0, #0xff
    1b34:	b	1ec0 <mainGtU+0xb78>
    1b38:	ldr	w0, [sp, #44]
    1b3c:	add	w0, w0, #0x1
    1b40:	str	w0, [sp, #44]
    1b44:	ldr	w0, [sp, #40]
    1b48:	add	w0, w0, #0x1
    1b4c:	str	w0, [sp, #40]
    1b50:	ldr	w0, [sp, #44]
    1b54:	ldr	x1, [sp, #32]
    1b58:	add	x0, x1, x0
    1b5c:	ldrb	w0, [x0]
    1b60:	strb	w0, [sp, #59]
    1b64:	ldr	w0, [sp, #40]
    1b68:	ldr	x1, [sp, #32]
    1b6c:	add	x0, x1, x0
    1b70:	ldrb	w0, [x0]
    1b74:	strb	w0, [sp, #58]
    1b78:	ldrb	w1, [sp, #59]
    1b7c:	ldrb	w0, [sp, #58]
    1b80:	cmp	w1, w0
    1b84:	b.eq	1ba0 <mainGtU+0x858>  // b.none
    1b88:	ldrb	w1, [sp, #59]
    1b8c:	ldrb	w0, [sp, #58]
    1b90:	cmp	w1, w0
    1b94:	cset	w0, hi  // hi = pmore
    1b98:	and	w0, w0, #0xff
    1b9c:	b	1ec0 <mainGtU+0xb78>
    1ba0:	ldr	w0, [sp, #44]
    1ba4:	lsl	x0, x0, #1
    1ba8:	ldr	x1, [sp, #24]
    1bac:	add	x0, x1, x0
    1bb0:	ldrh	w0, [x0]
    1bb4:	strh	w0, [sp, #56]
    1bb8:	ldr	w0, [sp, #40]
    1bbc:	lsl	x0, x0, #1
    1bc0:	ldr	x1, [sp, #24]
    1bc4:	add	x0, x1, x0
    1bc8:	ldrh	w0, [x0]
    1bcc:	strh	w0, [sp, #54]
    1bd0:	ldrh	w1, [sp, #56]
    1bd4:	ldrh	w0, [sp, #54]
    1bd8:	cmp	w1, w0
    1bdc:	b.eq	1bf8 <mainGtU+0x8b0>  // b.none
    1be0:	ldrh	w1, [sp, #56]
    1be4:	ldrh	w0, [sp, #54]
    1be8:	cmp	w1, w0
    1bec:	cset	w0, hi  // hi = pmore
    1bf0:	and	w0, w0, #0xff
    1bf4:	b	1ec0 <mainGtU+0xb78>
    1bf8:	ldr	w0, [sp, #44]
    1bfc:	add	w0, w0, #0x1
    1c00:	str	w0, [sp, #44]
    1c04:	ldr	w0, [sp, #40]
    1c08:	add	w0, w0, #0x1
    1c0c:	str	w0, [sp, #40]
    1c10:	ldr	w0, [sp, #44]
    1c14:	ldr	x1, [sp, #32]
    1c18:	add	x0, x1, x0
    1c1c:	ldrb	w0, [x0]
    1c20:	strb	w0, [sp, #59]
    1c24:	ldr	w0, [sp, #40]
    1c28:	ldr	x1, [sp, #32]
    1c2c:	add	x0, x1, x0
    1c30:	ldrb	w0, [x0]
    1c34:	strb	w0, [sp, #58]
    1c38:	ldrb	w1, [sp, #59]
    1c3c:	ldrb	w0, [sp, #58]
    1c40:	cmp	w1, w0
    1c44:	b.eq	1c60 <mainGtU+0x918>  // b.none
    1c48:	ldrb	w1, [sp, #59]
    1c4c:	ldrb	w0, [sp, #58]
    1c50:	cmp	w1, w0
    1c54:	cset	w0, hi  // hi = pmore
    1c58:	and	w0, w0, #0xff
    1c5c:	b	1ec0 <mainGtU+0xb78>
    1c60:	ldr	w0, [sp, #44]
    1c64:	lsl	x0, x0, #1
    1c68:	ldr	x1, [sp, #24]
    1c6c:	add	x0, x1, x0
    1c70:	ldrh	w0, [x0]
    1c74:	strh	w0, [sp, #56]
    1c78:	ldr	w0, [sp, #40]
    1c7c:	lsl	x0, x0, #1
    1c80:	ldr	x1, [sp, #24]
    1c84:	add	x0, x1, x0
    1c88:	ldrh	w0, [x0]
    1c8c:	strh	w0, [sp, #54]
    1c90:	ldrh	w1, [sp, #56]
    1c94:	ldrh	w0, [sp, #54]
    1c98:	cmp	w1, w0
    1c9c:	b.eq	1cb8 <mainGtU+0x970>  // b.none
    1ca0:	ldrh	w1, [sp, #56]
    1ca4:	ldrh	w0, [sp, #54]
    1ca8:	cmp	w1, w0
    1cac:	cset	w0, hi  // hi = pmore
    1cb0:	and	w0, w0, #0xff
    1cb4:	b	1ec0 <mainGtU+0xb78>
    1cb8:	ldr	w0, [sp, #44]
    1cbc:	add	w0, w0, #0x1
    1cc0:	str	w0, [sp, #44]
    1cc4:	ldr	w0, [sp, #40]
    1cc8:	add	w0, w0, #0x1
    1ccc:	str	w0, [sp, #40]
    1cd0:	ldr	w0, [sp, #44]
    1cd4:	ldr	x1, [sp, #32]
    1cd8:	add	x0, x1, x0
    1cdc:	ldrb	w0, [x0]
    1ce0:	strb	w0, [sp, #59]
    1ce4:	ldr	w0, [sp, #40]
    1ce8:	ldr	x1, [sp, #32]
    1cec:	add	x0, x1, x0
    1cf0:	ldrb	w0, [x0]
    1cf4:	strb	w0, [sp, #58]
    1cf8:	ldrb	w1, [sp, #59]
    1cfc:	ldrb	w0, [sp, #58]
    1d00:	cmp	w1, w0
    1d04:	b.eq	1d20 <mainGtU+0x9d8>  // b.none
    1d08:	ldrb	w1, [sp, #59]
    1d0c:	ldrb	w0, [sp, #58]
    1d10:	cmp	w1, w0
    1d14:	cset	w0, hi  // hi = pmore
    1d18:	and	w0, w0, #0xff
    1d1c:	b	1ec0 <mainGtU+0xb78>
    1d20:	ldr	w0, [sp, #44]
    1d24:	lsl	x0, x0, #1
    1d28:	ldr	x1, [sp, #24]
    1d2c:	add	x0, x1, x0
    1d30:	ldrh	w0, [x0]
    1d34:	strh	w0, [sp, #56]
    1d38:	ldr	w0, [sp, #40]
    1d3c:	lsl	x0, x0, #1
    1d40:	ldr	x1, [sp, #24]
    1d44:	add	x0, x1, x0
    1d48:	ldrh	w0, [x0]
    1d4c:	strh	w0, [sp, #54]
    1d50:	ldrh	w1, [sp, #56]
    1d54:	ldrh	w0, [sp, #54]
    1d58:	cmp	w1, w0
    1d5c:	b.eq	1d78 <mainGtU+0xa30>  // b.none
    1d60:	ldrh	w1, [sp, #56]
    1d64:	ldrh	w0, [sp, #54]
    1d68:	cmp	w1, w0
    1d6c:	cset	w0, hi  // hi = pmore
    1d70:	and	w0, w0, #0xff
    1d74:	b	1ec0 <mainGtU+0xb78>
    1d78:	ldr	w0, [sp, #44]
    1d7c:	add	w0, w0, #0x1
    1d80:	str	w0, [sp, #44]
    1d84:	ldr	w0, [sp, #40]
    1d88:	add	w0, w0, #0x1
    1d8c:	str	w0, [sp, #40]
    1d90:	ldr	w0, [sp, #44]
    1d94:	ldr	x1, [sp, #32]
    1d98:	add	x0, x1, x0
    1d9c:	ldrb	w0, [x0]
    1da0:	strb	w0, [sp, #59]
    1da4:	ldr	w0, [sp, #40]
    1da8:	ldr	x1, [sp, #32]
    1dac:	add	x0, x1, x0
    1db0:	ldrb	w0, [x0]
    1db4:	strb	w0, [sp, #58]
    1db8:	ldrb	w1, [sp, #59]
    1dbc:	ldrb	w0, [sp, #58]
    1dc0:	cmp	w1, w0
    1dc4:	b.eq	1de0 <mainGtU+0xa98>  // b.none
    1dc8:	ldrb	w1, [sp, #59]
    1dcc:	ldrb	w0, [sp, #58]
    1dd0:	cmp	w1, w0
    1dd4:	cset	w0, hi  // hi = pmore
    1dd8:	and	w0, w0, #0xff
    1ddc:	b	1ec0 <mainGtU+0xb78>
    1de0:	ldr	w0, [sp, #44]
    1de4:	lsl	x0, x0, #1
    1de8:	ldr	x1, [sp, #24]
    1dec:	add	x0, x1, x0
    1df0:	ldrh	w0, [x0]
    1df4:	strh	w0, [sp, #56]
    1df8:	ldr	w0, [sp, #40]
    1dfc:	lsl	x0, x0, #1
    1e00:	ldr	x1, [sp, #24]
    1e04:	add	x0, x1, x0
    1e08:	ldrh	w0, [x0]
    1e0c:	strh	w0, [sp, #54]
    1e10:	ldrh	w1, [sp, #56]
    1e14:	ldrh	w0, [sp, #54]
    1e18:	cmp	w1, w0
    1e1c:	b.eq	1e38 <mainGtU+0xaf0>  // b.none
    1e20:	ldrh	w1, [sp, #56]
    1e24:	ldrh	w0, [sp, #54]
    1e28:	cmp	w1, w0
    1e2c:	cset	w0, hi  // hi = pmore
    1e30:	and	w0, w0, #0xff
    1e34:	b	1ec0 <mainGtU+0xb78>
    1e38:	ldr	w0, [sp, #44]
    1e3c:	add	w0, w0, #0x1
    1e40:	str	w0, [sp, #44]
    1e44:	ldr	w0, [sp, #40]
    1e48:	add	w0, w0, #0x1
    1e4c:	str	w0, [sp, #40]
    1e50:	ldr	w1, [sp, #44]
    1e54:	ldr	w0, [sp, #20]
    1e58:	cmp	w1, w0
    1e5c:	b.cc	1e70 <mainGtU+0xb28>  // b.lo, b.ul, b.last
    1e60:	ldr	w1, [sp, #44]
    1e64:	ldr	w0, [sp, #20]
    1e68:	sub	w0, w1, w0
    1e6c:	str	w0, [sp, #44]
    1e70:	ldr	w1, [sp, #40]
    1e74:	ldr	w0, [sp, #20]
    1e78:	cmp	w1, w0
    1e7c:	b.cc	1e90 <mainGtU+0xb48>  // b.lo, b.ul, b.last
    1e80:	ldr	w1, [sp, #40]
    1e84:	ldr	w0, [sp, #20]
    1e88:	sub	w0, w1, w0
    1e8c:	str	w0, [sp, #40]
    1e90:	ldr	w0, [sp, #60]
    1e94:	sub	w0, w0, #0x8
    1e98:	str	w0, [sp, #60]
    1e9c:	ldr	x0, [sp, #8]
    1ea0:	ldr	w0, [x0]
    1ea4:	sub	w1, w0, #0x1
    1ea8:	ldr	x0, [sp, #8]
    1eac:	str	w1, [x0]
    1eb0:	ldr	w0, [sp, #60]
    1eb4:	cmp	w0, #0x0
    1eb8:	b.ge	1850 <mainGtU+0x508>  // b.tcont
    1ebc:	mov	w0, #0x0                   	// #0
    1ec0:	add	sp, sp, #0x40
    1ec4:	ret

0000000000001ec8 <mainSimpleSort>:
    1ec8:	stp	x29, x30, [sp, #-96]!
    1ecc:	mov	x29, sp
    1ed0:	str	x0, [sp, #56]
    1ed4:	str	x1, [sp, #48]
    1ed8:	str	x2, [sp, #40]
    1edc:	str	w3, [sp, #36]
    1ee0:	str	w4, [sp, #32]
    1ee4:	str	w5, [sp, #28]
    1ee8:	str	w6, [sp, #24]
    1eec:	str	x7, [sp, #16]
    1ef0:	ldr	w1, [sp, #28]
    1ef4:	ldr	w0, [sp, #32]
    1ef8:	sub	w0, w1, w0
    1efc:	add	w0, w0, #0x1
    1f00:	str	w0, [sp, #80]
    1f04:	ldr	w0, [sp, #80]
    1f08:	cmp	w0, #0x1
    1f0c:	b.le	230c <mainSimpleSort+0x444>
    1f10:	str	wzr, [sp, #84]
    1f14:	b	1f24 <mainSimpleSort+0x5c>
    1f18:	ldr	w0, [sp, #84]
    1f1c:	add	w0, w0, #0x1
    1f20:	str	w0, [sp, #84]
    1f24:	adrp	x0, 0 <fallbackSimpleSort>
    1f28:	add	x0, x0, #0x0
    1f2c:	ldrsw	x1, [sp, #84]
    1f30:	ldr	w0, [x0, x1, lsl #2]
    1f34:	ldr	w1, [sp, #80]
    1f38:	cmp	w1, w0
    1f3c:	b.gt	1f18 <mainSimpleSort+0x50>
    1f40:	ldr	w0, [sp, #84]
    1f44:	sub	w0, w0, #0x1
    1f48:	str	w0, [sp, #84]
    1f4c:	b	22fc <mainSimpleSort+0x434>
    1f50:	adrp	x0, 0 <fallbackSimpleSort>
    1f54:	add	x0, x0, #0x0
    1f58:	ldrsw	x1, [sp, #84]
    1f5c:	ldr	w0, [x0, x1, lsl #2]
    1f60:	str	w0, [sp, #76]
    1f64:	ldr	w1, [sp, #32]
    1f68:	ldr	w0, [sp, #76]
    1f6c:	add	w0, w1, w0
    1f70:	str	w0, [sp, #92]
    1f74:	ldr	w1, [sp, #92]
    1f78:	ldr	w0, [sp, #28]
    1f7c:	cmp	w1, w0
    1f80:	b.gt	22dc <mainSimpleSort+0x414>
    1f84:	ldrsw	x0, [sp, #92]
    1f88:	lsl	x0, x0, #2
    1f8c:	ldr	x1, [sp, #56]
    1f90:	add	x0, x1, x0
    1f94:	ldr	w0, [x0]
    1f98:	str	w0, [sp, #72]
    1f9c:	ldr	w0, [sp, #92]
    1fa0:	str	w0, [sp, #88]
    1fa4:	b	2004 <mainSimpleSort+0x13c>
    1fa8:	ldr	w1, [sp, #88]
    1fac:	ldr	w0, [sp, #76]
    1fb0:	sub	w0, w1, w0
    1fb4:	sxtw	x0, w0
    1fb8:	lsl	x0, x0, #2
    1fbc:	ldr	x1, [sp, #56]
    1fc0:	add	x1, x1, x0
    1fc4:	ldrsw	x0, [sp, #88]
    1fc8:	lsl	x0, x0, #2
    1fcc:	ldr	x2, [sp, #56]
    1fd0:	add	x0, x2, x0
    1fd4:	ldr	w1, [x1]
    1fd8:	str	w1, [x0]
    1fdc:	ldr	w1, [sp, #88]
    1fe0:	ldr	w0, [sp, #76]
    1fe4:	sub	w0, w1, w0
    1fe8:	str	w0, [sp, #88]
    1fec:	ldr	w1, [sp, #32]
    1ff0:	ldr	w0, [sp, #76]
    1ff4:	add	w0, w1, w0
    1ff8:	ldr	w1, [sp, #88]
    1ffc:	cmp	w1, w0
    2000:	b.lt	2068 <mainSimpleSort+0x1a0>  // b.tstop
    2004:	ldr	w1, [sp, #88]
    2008:	ldr	w0, [sp, #76]
    200c:	sub	w0, w1, w0
    2010:	sxtw	x0, w0
    2014:	lsl	x0, x0, #2
    2018:	ldr	x1, [sp, #56]
    201c:	add	x0, x1, x0
    2020:	ldr	w1, [x0]
    2024:	ldr	w0, [sp, #24]
    2028:	add	w6, w1, w0
    202c:	ldr	w1, [sp, #24]
    2030:	ldr	w0, [sp, #72]
    2034:	add	w0, w1, w0
    2038:	ldr	w1, [sp, #36]
    203c:	ldr	x5, [sp, #16]
    2040:	mov	w4, w1
    2044:	ldr	x3, [sp, #40]
    2048:	ldr	x2, [sp, #48]
    204c:	mov	w1, w0
    2050:	mov	w0, w6
    2054:	bl	1348 <mainGtU>
    2058:	and	w0, w0, #0xff
    205c:	cmp	w0, #0x0
    2060:	b.ne	1fa8 <mainSimpleSort+0xe0>  // b.any
    2064:	b	206c <mainSimpleSort+0x1a4>
    2068:	nop
    206c:	ldrsw	x0, [sp, #88]
    2070:	lsl	x0, x0, #2
    2074:	ldr	x1, [sp, #56]
    2078:	add	x0, x1, x0
    207c:	ldr	w1, [sp, #72]
    2080:	str	w1, [x0]
    2084:	ldr	w0, [sp, #92]
    2088:	add	w0, w0, #0x1
    208c:	str	w0, [sp, #92]
    2090:	ldr	w1, [sp, #92]
    2094:	ldr	w0, [sp, #28]
    2098:	cmp	w1, w0
    209c:	b.gt	22e4 <mainSimpleSort+0x41c>
    20a0:	ldrsw	x0, [sp, #92]
    20a4:	lsl	x0, x0, #2
    20a8:	ldr	x1, [sp, #56]
    20ac:	add	x0, x1, x0
    20b0:	ldr	w0, [x0]
    20b4:	str	w0, [sp, #72]
    20b8:	ldr	w0, [sp, #92]
    20bc:	str	w0, [sp, #88]
    20c0:	b	2120 <mainSimpleSort+0x258>
    20c4:	ldr	w1, [sp, #88]
    20c8:	ldr	w0, [sp, #76]
    20cc:	sub	w0, w1, w0
    20d0:	sxtw	x0, w0
    20d4:	lsl	x0, x0, #2
    20d8:	ldr	x1, [sp, #56]
    20dc:	add	x1, x1, x0
    20e0:	ldrsw	x0, [sp, #88]
    20e4:	lsl	x0, x0, #2
    20e8:	ldr	x2, [sp, #56]
    20ec:	add	x0, x2, x0
    20f0:	ldr	w1, [x1]
    20f4:	str	w1, [x0]
    20f8:	ldr	w1, [sp, #88]
    20fc:	ldr	w0, [sp, #76]
    2100:	sub	w0, w1, w0
    2104:	str	w0, [sp, #88]
    2108:	ldr	w1, [sp, #32]
    210c:	ldr	w0, [sp, #76]
    2110:	add	w0, w1, w0
    2114:	ldr	w1, [sp, #88]
    2118:	cmp	w1, w0
    211c:	b.lt	2184 <mainSimpleSort+0x2bc>  // b.tstop
    2120:	ldr	w1, [sp, #88]
    2124:	ldr	w0, [sp, #76]
    2128:	sub	w0, w1, w0
    212c:	sxtw	x0, w0
    2130:	lsl	x0, x0, #2
    2134:	ldr	x1, [sp, #56]
    2138:	add	x0, x1, x0
    213c:	ldr	w1, [x0]
    2140:	ldr	w0, [sp, #24]
    2144:	add	w6, w1, w0
    2148:	ldr	w1, [sp, #24]
    214c:	ldr	w0, [sp, #72]
    2150:	add	w0, w1, w0
    2154:	ldr	w1, [sp, #36]
    2158:	ldr	x5, [sp, #16]
    215c:	mov	w4, w1
    2160:	ldr	x3, [sp, #40]
    2164:	ldr	x2, [sp, #48]
    2168:	mov	w1, w0
    216c:	mov	w0, w6
    2170:	bl	1348 <mainGtU>
    2174:	and	w0, w0, #0xff
    2178:	cmp	w0, #0x0
    217c:	b.ne	20c4 <mainSimpleSort+0x1fc>  // b.any
    2180:	b	2188 <mainSimpleSort+0x2c0>
    2184:	nop
    2188:	ldrsw	x0, [sp, #88]
    218c:	lsl	x0, x0, #2
    2190:	ldr	x1, [sp, #56]
    2194:	add	x0, x1, x0
    2198:	ldr	w1, [sp, #72]
    219c:	str	w1, [x0]
    21a0:	ldr	w0, [sp, #92]
    21a4:	add	w0, w0, #0x1
    21a8:	str	w0, [sp, #92]
    21ac:	ldr	w1, [sp, #92]
    21b0:	ldr	w0, [sp, #28]
    21b4:	cmp	w1, w0
    21b8:	b.gt	22ec <mainSimpleSort+0x424>
    21bc:	ldrsw	x0, [sp, #92]
    21c0:	lsl	x0, x0, #2
    21c4:	ldr	x1, [sp, #56]
    21c8:	add	x0, x1, x0
    21cc:	ldr	w0, [x0]
    21d0:	str	w0, [sp, #72]
    21d4:	ldr	w0, [sp, #92]
    21d8:	str	w0, [sp, #88]
    21dc:	b	223c <mainSimpleSort+0x374>
    21e0:	ldr	w1, [sp, #88]
    21e4:	ldr	w0, [sp, #76]
    21e8:	sub	w0, w1, w0
    21ec:	sxtw	x0, w0
    21f0:	lsl	x0, x0, #2
    21f4:	ldr	x1, [sp, #56]
    21f8:	add	x1, x1, x0
    21fc:	ldrsw	x0, [sp, #88]
    2200:	lsl	x0, x0, #2
    2204:	ldr	x2, [sp, #56]
    2208:	add	x0, x2, x0
    220c:	ldr	w1, [x1]
    2210:	str	w1, [x0]
    2214:	ldr	w1, [sp, #88]
    2218:	ldr	w0, [sp, #76]
    221c:	sub	w0, w1, w0
    2220:	str	w0, [sp, #88]
    2224:	ldr	w1, [sp, #32]
    2228:	ldr	w0, [sp, #76]
    222c:	add	w0, w1, w0
    2230:	ldr	w1, [sp, #88]
    2234:	cmp	w1, w0
    2238:	b.lt	22a0 <mainSimpleSort+0x3d8>  // b.tstop
    223c:	ldr	w1, [sp, #88]
    2240:	ldr	w0, [sp, #76]
    2244:	sub	w0, w1, w0
    2248:	sxtw	x0, w0
    224c:	lsl	x0, x0, #2
    2250:	ldr	x1, [sp, #56]
    2254:	add	x0, x1, x0
    2258:	ldr	w1, [x0]
    225c:	ldr	w0, [sp, #24]
    2260:	add	w6, w1, w0
    2264:	ldr	w1, [sp, #24]
    2268:	ldr	w0, [sp, #72]
    226c:	add	w0, w1, w0
    2270:	ldr	w1, [sp, #36]
    2274:	ldr	x5, [sp, #16]
    2278:	mov	w4, w1
    227c:	ldr	x3, [sp, #40]
    2280:	ldr	x2, [sp, #48]
    2284:	mov	w1, w0
    2288:	mov	w0, w6
    228c:	bl	1348 <mainGtU>
    2290:	and	w0, w0, #0xff
    2294:	cmp	w0, #0x0
    2298:	b.ne	21e0 <mainSimpleSort+0x318>  // b.any
    229c:	b	22a4 <mainSimpleSort+0x3dc>
    22a0:	nop
    22a4:	ldrsw	x0, [sp, #88]
    22a8:	lsl	x0, x0, #2
    22ac:	ldr	x1, [sp, #56]
    22b0:	add	x0, x1, x0
    22b4:	ldr	w1, [sp, #72]
    22b8:	str	w1, [x0]
    22bc:	ldr	w0, [sp, #92]
    22c0:	add	w0, w0, #0x1
    22c4:	str	w0, [sp, #92]
    22c8:	ldr	x0, [sp, #16]
    22cc:	ldr	w0, [x0]
    22d0:	cmp	w0, #0x0
    22d4:	b.lt	2314 <mainSimpleSort+0x44c>  // b.tstop
    22d8:	b	1f74 <mainSimpleSort+0xac>
    22dc:	nop
    22e0:	b	22f0 <mainSimpleSort+0x428>
    22e4:	nop
    22e8:	b	22f0 <mainSimpleSort+0x428>
    22ec:	nop
    22f0:	ldr	w0, [sp, #84]
    22f4:	sub	w0, w0, #0x1
    22f8:	str	w0, [sp, #84]
    22fc:	ldr	w0, [sp, #84]
    2300:	cmp	w0, #0x0
    2304:	b.ge	1f50 <mainSimpleSort+0x88>  // b.tcont
    2308:	b	2318 <mainSimpleSort+0x450>
    230c:	nop
    2310:	b	2318 <mainSimpleSort+0x450>
    2314:	nop
    2318:	ldp	x29, x30, [sp], #96
    231c:	ret

0000000000002320 <mmed3>:
    2320:	sub	sp, sp, #0x20
    2324:	strb	w0, [sp, #15]
    2328:	strb	w1, [sp, #14]
    232c:	strb	w2, [sp, #13]
    2330:	ldrb	w1, [sp, #15]
    2334:	ldrb	w0, [sp, #14]
    2338:	cmp	w1, w0
    233c:	b.ls	2358 <mmed3+0x38>  // b.plast
    2340:	ldrb	w0, [sp, #15]
    2344:	strb	w0, [sp, #31]
    2348:	ldrb	w0, [sp, #14]
    234c:	strb	w0, [sp, #15]
    2350:	ldrb	w0, [sp, #31]
    2354:	strb	w0, [sp, #14]
    2358:	ldrb	w1, [sp, #14]
    235c:	ldrb	w0, [sp, #13]
    2360:	cmp	w1, w0
    2364:	b.ls	2388 <mmed3+0x68>  // b.plast
    2368:	ldrb	w0, [sp, #13]
    236c:	strb	w0, [sp, #14]
    2370:	ldrb	w1, [sp, #15]
    2374:	ldrb	w0, [sp, #14]
    2378:	cmp	w1, w0
    237c:	b.ls	2388 <mmed3+0x68>  // b.plast
    2380:	ldrb	w0, [sp, #15]
    2384:	strb	w0, [sp, #14]
    2388:	ldrb	w0, [sp, #14]
    238c:	add	sp, sp, #0x20
    2390:	ret

0000000000002394 <mainQSort3>:
    2394:	sub	sp, sp, #0x590
    2398:	stp	x29, x30, [sp]
    239c:	mov	x29, sp
    23a0:	str	x0, [sp, #56]
    23a4:	str	x1, [sp, #48]
    23a8:	str	x2, [sp, #40]
    23ac:	str	w3, [sp, #36]
    23b0:	str	w4, [sp, #32]
    23b4:	str	w5, [sp, #28]
    23b8:	str	w6, [sp, #24]
    23bc:	str	x7, [sp, #16]
    23c0:	str	wzr, [sp, #1404]
    23c4:	ldrsw	x0, [sp, #1404]
    23c8:	lsl	x0, x0, #2
    23cc:	add	x1, sp, #0x398
    23d0:	ldr	w2, [sp, #32]
    23d4:	str	w2, [x1, x0]
    23d8:	ldrsw	x0, [sp, #1404]
    23dc:	lsl	x0, x0, #2
    23e0:	add	x1, sp, #0x208
    23e4:	ldr	w2, [sp, #28]
    23e8:	str	w2, [x1, x0]
    23ec:	ldrsw	x0, [sp, #1404]
    23f0:	lsl	x0, x0, #2
    23f4:	add	x1, sp, #0x78
    23f8:	ldr	w2, [sp, #24]
    23fc:	str	w2, [x1, x0]
    2400:	ldr	w0, [sp, #1404]
    2404:	add	w0, w0, #0x1
    2408:	str	w0, [sp, #1404]
    240c:	b	2ca0 <mainQSort3+0x90c>
    2410:	ldr	w0, [sp, #1404]
    2414:	cmp	w0, #0x61
    2418:	b.le	2424 <mainQSort3+0x90>
    241c:	mov	w0, #0x3e9                 	// #1001
    2420:	bl	0 <BZ2_bz__AssertH__fail>
    2424:	ldr	w0, [sp, #1404]
    2428:	sub	w0, w0, #0x1
    242c:	str	w0, [sp, #1404]
    2430:	ldrsw	x0, [sp, #1404]
    2434:	lsl	x0, x0, #2
    2438:	add	x1, sp, #0x398
    243c:	ldr	w0, [x1, x0]
    2440:	str	w0, [sp, #1376]
    2444:	ldrsw	x0, [sp, #1404]
    2448:	lsl	x0, x0, #2
    244c:	add	x1, sp, #0x208
    2450:	ldr	w0, [x1, x0]
    2454:	str	w0, [sp, #1372]
    2458:	ldrsw	x0, [sp, #1404]
    245c:	lsl	x0, x0, #2
    2460:	add	x1, sp, #0x78
    2464:	ldr	w0, [x1, x0]
    2468:	str	w0, [sp, #1368]
    246c:	ldr	w1, [sp, #1372]
    2470:	ldr	w0, [sp, #1376]
    2474:	sub	w0, w1, w0
    2478:	cmp	w0, #0x13
    247c:	b.le	248c <mainQSort3+0xf8>
    2480:	ldr	w0, [sp, #1368]
    2484:	cmp	w0, #0xe
    2488:	b.le	24c4 <mainQSort3+0x130>
    248c:	ldr	x7, [sp, #16]
    2490:	ldr	w6, [sp, #1368]
    2494:	ldr	w5, [sp, #1372]
    2498:	ldr	w4, [sp, #1376]
    249c:	ldr	w3, [sp, #36]
    24a0:	ldr	x2, [sp, #40]
    24a4:	ldr	x1, [sp, #48]
    24a8:	ldr	x0, [sp, #56]
    24ac:	bl	1ec8 <mainSimpleSort>
    24b0:	ldr	x0, [sp, #16]
    24b4:	ldr	w0, [x0]
    24b8:	cmp	w0, #0x0
    24bc:	b.lt	2cb0 <mainQSort3+0x91c>  // b.tstop
    24c0:	b	2ca0 <mainQSort3+0x90c>
    24c4:	ldrsw	x0, [sp, #1376]
    24c8:	lsl	x0, x0, #2
    24cc:	ldr	x1, [sp, #56]
    24d0:	add	x0, x1, x0
    24d4:	ldr	w1, [x0]
    24d8:	ldr	w0, [sp, #1368]
    24dc:	add	w0, w1, w0
    24e0:	mov	w0, w0
    24e4:	ldr	x1, [sp, #48]
    24e8:	add	x0, x1, x0
    24ec:	ldrb	w3, [x0]
    24f0:	ldrsw	x0, [sp, #1372]
    24f4:	lsl	x0, x0, #2
    24f8:	ldr	x1, [sp, #56]
    24fc:	add	x0, x1, x0
    2500:	ldr	w1, [x0]
    2504:	ldr	w0, [sp, #1368]
    2508:	add	w0, w1, w0
    250c:	mov	w0, w0
    2510:	ldr	x1, [sp, #48]
    2514:	add	x0, x1, x0
    2518:	ldrb	w4, [x0]
    251c:	ldr	w1, [sp, #1376]
    2520:	ldr	w0, [sp, #1372]
    2524:	add	w0, w1, w0
    2528:	asr	w0, w0, #1
    252c:	sxtw	x0, w0
    2530:	lsl	x0, x0, #2
    2534:	ldr	x1, [sp, #56]
    2538:	add	x0, x1, x0
    253c:	ldr	w1, [x0]
    2540:	ldr	w0, [sp, #1368]
    2544:	add	w0, w1, w0
    2548:	mov	w0, w0
    254c:	ldr	x1, [sp, #48]
    2550:	add	x0, x1, x0
    2554:	ldrb	w0, [x0]
    2558:	mov	w2, w0
    255c:	mov	w1, w4
    2560:	mov	w0, w3
    2564:	bl	2320 <mmed3>
    2568:	and	w0, w0, #0xff
    256c:	str	w0, [sp, #1364]
    2570:	ldr	w0, [sp, #1376]
    2574:	str	w0, [sp, #1412]
    2578:	ldr	w0, [sp, #1412]
    257c:	str	w0, [sp, #1420]
    2580:	ldr	w0, [sp, #1372]
    2584:	str	w0, [sp, #1408]
    2588:	ldr	w0, [sp, #1408]
    258c:	str	w0, [sp, #1416]
    2590:	ldr	w1, [sp, #1420]
    2594:	ldr	w0, [sp, #1416]
    2598:	cmp	w1, w0
    259c:	b.gt	2678 <mainQSort3+0x2e4>
    25a0:	ldrsw	x0, [sp, #1420]
    25a4:	lsl	x0, x0, #2
    25a8:	ldr	x1, [sp, #56]
    25ac:	add	x0, x1, x0
    25b0:	ldr	w1, [x0]
    25b4:	ldr	w0, [sp, #1368]
    25b8:	add	w0, w1, w0
    25bc:	mov	w0, w0
    25c0:	ldr	x1, [sp, #48]
    25c4:	add	x0, x1, x0
    25c8:	ldrb	w0, [x0]
    25cc:	mov	w1, w0
    25d0:	ldr	w0, [sp, #1364]
    25d4:	sub	w0, w1, w0
    25d8:	str	w0, [sp, #1360]
    25dc:	ldr	w0, [sp, #1360]
    25e0:	cmp	w0, #0x0
    25e4:	b.ne	265c <mainQSort3+0x2c8>  // b.any
    25e8:	ldrsw	x0, [sp, #1420]
    25ec:	lsl	x0, x0, #2
    25f0:	ldr	x1, [sp, #56]
    25f4:	add	x0, x1, x0
    25f8:	ldr	w0, [x0]
    25fc:	str	w0, [sp, #1356]
    2600:	ldrsw	x0, [sp, #1412]
    2604:	lsl	x0, x0, #2
    2608:	ldr	x1, [sp, #56]
    260c:	add	x1, x1, x0
    2610:	ldrsw	x0, [sp, #1420]
    2614:	lsl	x0, x0, #2
    2618:	ldr	x2, [sp, #56]
    261c:	add	x0, x2, x0
    2620:	ldr	w1, [x1]
    2624:	str	w1, [x0]
    2628:	ldrsw	x0, [sp, #1412]
    262c:	lsl	x0, x0, #2
    2630:	ldr	x1, [sp, #56]
    2634:	add	x0, x1, x0
    2638:	ldr	w1, [sp, #1356]
    263c:	str	w1, [x0]
    2640:	ldr	w0, [sp, #1412]
    2644:	add	w0, w0, #0x1
    2648:	str	w0, [sp, #1412]
    264c:	ldr	w0, [sp, #1420]
    2650:	add	w0, w0, #0x1
    2654:	str	w0, [sp, #1420]
    2658:	b	2674 <mainQSort3+0x2e0>
    265c:	ldr	w0, [sp, #1360]
    2660:	cmp	w0, #0x0
    2664:	b.gt	2680 <mainQSort3+0x2ec>
    2668:	ldr	w0, [sp, #1420]
    266c:	add	w0, w0, #0x1
    2670:	str	w0, [sp, #1420]
    2674:	b	2590 <mainQSort3+0x1fc>
    2678:	nop
    267c:	b	2684 <mainQSort3+0x2f0>
    2680:	nop
    2684:	ldr	w1, [sp, #1420]
    2688:	ldr	w0, [sp, #1416]
    268c:	cmp	w1, w0
    2690:	b.gt	276c <mainQSort3+0x3d8>
    2694:	ldrsw	x0, [sp, #1416]
    2698:	lsl	x0, x0, #2
    269c:	ldr	x1, [sp, #56]
    26a0:	add	x0, x1, x0
    26a4:	ldr	w1, [x0]
    26a8:	ldr	w0, [sp, #1368]
    26ac:	add	w0, w1, w0
    26b0:	mov	w0, w0
    26b4:	ldr	x1, [sp, #48]
    26b8:	add	x0, x1, x0
    26bc:	ldrb	w0, [x0]
    26c0:	mov	w1, w0
    26c4:	ldr	w0, [sp, #1364]
    26c8:	sub	w0, w1, w0
    26cc:	str	w0, [sp, #1360]
    26d0:	ldr	w0, [sp, #1360]
    26d4:	cmp	w0, #0x0
    26d8:	b.ne	2750 <mainQSort3+0x3bc>  // b.any
    26dc:	ldrsw	x0, [sp, #1416]
    26e0:	lsl	x0, x0, #2
    26e4:	ldr	x1, [sp, #56]
    26e8:	add	x0, x1, x0
    26ec:	ldr	w0, [x0]
    26f0:	str	w0, [sp, #1352]
    26f4:	ldrsw	x0, [sp, #1408]
    26f8:	lsl	x0, x0, #2
    26fc:	ldr	x1, [sp, #56]
    2700:	add	x1, x1, x0
    2704:	ldrsw	x0, [sp, #1416]
    2708:	lsl	x0, x0, #2
    270c:	ldr	x2, [sp, #56]
    2710:	add	x0, x2, x0
    2714:	ldr	w1, [x1]
    2718:	str	w1, [x0]
    271c:	ldrsw	x0, [sp, #1408]
    2720:	lsl	x0, x0, #2
    2724:	ldr	x1, [sp, #56]
    2728:	add	x0, x1, x0
    272c:	ldr	w1, [sp, #1352]
    2730:	str	w1, [x0]
    2734:	ldr	w0, [sp, #1408]
    2738:	sub	w0, w0, #0x1
    273c:	str	w0, [sp, #1408]
    2740:	ldr	w0, [sp, #1416]
    2744:	sub	w0, w0, #0x1
    2748:	str	w0, [sp, #1416]
    274c:	b	2768 <mainQSort3+0x3d4>
    2750:	ldr	w0, [sp, #1360]
    2754:	cmp	w0, #0x0
    2758:	b.lt	2774 <mainQSort3+0x3e0>  // b.tstop
    275c:	ldr	w0, [sp, #1416]
    2760:	sub	w0, w0, #0x1
    2764:	str	w0, [sp, #1416]
    2768:	b	2684 <mainQSort3+0x2f0>
    276c:	nop
    2770:	b	2778 <mainQSort3+0x3e4>
    2774:	nop
    2778:	ldr	w1, [sp, #1420]
    277c:	ldr	w0, [sp, #1416]
    2780:	cmp	w1, w0
    2784:	b.gt	27fc <mainQSort3+0x468>
    2788:	ldrsw	x0, [sp, #1420]
    278c:	lsl	x0, x0, #2
    2790:	ldr	x1, [sp, #56]
    2794:	add	x0, x1, x0
    2798:	ldr	w0, [x0]
    279c:	str	w0, [sp, #1348]
    27a0:	ldrsw	x0, [sp, #1416]
    27a4:	lsl	x0, x0, #2
    27a8:	ldr	x1, [sp, #56]
    27ac:	add	x1, x1, x0
    27b0:	ldrsw	x0, [sp, #1420]
    27b4:	lsl	x0, x0, #2
    27b8:	ldr	x2, [sp, #56]
    27bc:	add	x0, x2, x0
    27c0:	ldr	w1, [x1]
    27c4:	str	w1, [x0]
    27c8:	ldrsw	x0, [sp, #1416]
    27cc:	lsl	x0, x0, #2
    27d0:	ldr	x1, [sp, #56]
    27d4:	add	x0, x1, x0
    27d8:	ldr	w1, [sp, #1348]
    27dc:	str	w1, [x0]
    27e0:	ldr	w0, [sp, #1420]
    27e4:	add	w0, w0, #0x1
    27e8:	str	w0, [sp, #1420]
    27ec:	ldr	w0, [sp, #1416]
    27f0:	sub	w0, w0, #0x1
    27f4:	str	w0, [sp, #1416]
    27f8:	b	2590 <mainQSort3+0x1fc>
    27fc:	nop
    2800:	ldr	w1, [sp, #1408]
    2804:	ldr	w0, [sp, #1412]
    2808:	cmp	w1, w0
    280c:	b.ge	2860 <mainQSort3+0x4cc>  // b.tcont
    2810:	ldrsw	x0, [sp, #1404]
    2814:	lsl	x0, x0, #2
    2818:	add	x1, sp, #0x398
    281c:	ldr	w2, [sp, #1376]
    2820:	str	w2, [x1, x0]
    2824:	ldrsw	x0, [sp, #1404]
    2828:	lsl	x0, x0, #2
    282c:	add	x1, sp, #0x208
    2830:	ldr	w2, [sp, #1372]
    2834:	str	w2, [x1, x0]
    2838:	ldr	w0, [sp, #1368]
    283c:	add	w2, w0, #0x1
    2840:	ldrsw	x0, [sp, #1404]
    2844:	lsl	x0, x0, #2
    2848:	add	x1, sp, #0x78
    284c:	str	w2, [x1, x0]
    2850:	ldr	w0, [sp, #1404]
    2854:	add	w0, w0, #0x1
    2858:	str	w0, [sp, #1404]
    285c:	b	2ca0 <mainQSort3+0x90c>
    2860:	ldr	w1, [sp, #1420]
    2864:	ldr	w0, [sp, #1412]
    2868:	sub	w1, w1, w0
    286c:	ldr	w2, [sp, #1412]
    2870:	ldr	w0, [sp, #1376]
    2874:	sub	w0, w2, w0
    2878:	cmp	w1, w0
    287c:	csel	w0, w1, w0, le
    2880:	str	w0, [sp, #1360]
    2884:	ldr	w0, [sp, #1376]
    2888:	str	w0, [sp, #1400]
    288c:	ldr	w1, [sp, #1420]
    2890:	ldr	w0, [sp, #1360]
    2894:	sub	w0, w1, w0
    2898:	str	w0, [sp, #1396]
    289c:	ldr	w0, [sp, #1360]
    28a0:	str	w0, [sp, #1392]
    28a4:	b	2924 <mainQSort3+0x590>
    28a8:	ldrsw	x0, [sp, #1400]
    28ac:	lsl	x0, x0, #2
    28b0:	ldr	x1, [sp, #56]
    28b4:	add	x0, x1, x0
    28b8:	ldr	w0, [x0]
    28bc:	str	w0, [sp, #1324]
    28c0:	ldrsw	x0, [sp, #1396]
    28c4:	lsl	x0, x0, #2
    28c8:	ldr	x1, [sp, #56]
    28cc:	add	x1, x1, x0
    28d0:	ldrsw	x0, [sp, #1400]
    28d4:	lsl	x0, x0, #2
    28d8:	ldr	x2, [sp, #56]
    28dc:	add	x0, x2, x0
    28e0:	ldr	w1, [x1]
    28e4:	str	w1, [x0]
    28e8:	ldrsw	x0, [sp, #1396]
    28ec:	lsl	x0, x0, #2
    28f0:	ldr	x1, [sp, #56]
    28f4:	add	x0, x1, x0
    28f8:	ldr	w1, [sp, #1324]
    28fc:	str	w1, [x0]
    2900:	ldr	w0, [sp, #1400]
    2904:	add	w0, w0, #0x1
    2908:	str	w0, [sp, #1400]
    290c:	ldr	w0, [sp, #1396]
    2910:	add	w0, w0, #0x1
    2914:	str	w0, [sp, #1396]
    2918:	ldr	w0, [sp, #1392]
    291c:	sub	w0, w0, #0x1
    2920:	str	w0, [sp, #1392]
    2924:	ldr	w0, [sp, #1392]
    2928:	cmp	w0, #0x0
    292c:	b.gt	28a8 <mainQSort3+0x514>
    2930:	ldr	w1, [sp, #1408]
    2934:	ldr	w0, [sp, #1416]
    2938:	sub	w1, w1, w0
    293c:	ldr	w2, [sp, #1372]
    2940:	ldr	w0, [sp, #1408]
    2944:	sub	w0, w2, w0
    2948:	cmp	w1, w0
    294c:	csel	w0, w1, w0, le
    2950:	str	w0, [sp, #1344]
    2954:	ldr	w0, [sp, #1420]
    2958:	str	w0, [sp, #1388]
    295c:	ldr	w1, [sp, #1372]
    2960:	ldr	w0, [sp, #1344]
    2964:	sub	w0, w1, w0
    2968:	add	w0, w0, #0x1
    296c:	str	w0, [sp, #1384]
    2970:	ldr	w0, [sp, #1344]
    2974:	str	w0, [sp, #1380]
    2978:	b	29f8 <mainQSort3+0x664>
    297c:	ldrsw	x0, [sp, #1388]
    2980:	lsl	x0, x0, #2
    2984:	ldr	x1, [sp, #56]
    2988:	add	x0, x1, x0
    298c:	ldr	w0, [x0]
    2990:	str	w0, [sp, #1328]
    2994:	ldrsw	x0, [sp, #1384]
    2998:	lsl	x0, x0, #2
    299c:	ldr	x1, [sp, #56]
    29a0:	add	x1, x1, x0
    29a4:	ldrsw	x0, [sp, #1388]
    29a8:	lsl	x0, x0, #2
    29ac:	ldr	x2, [sp, #56]
    29b0:	add	x0, x2, x0
    29b4:	ldr	w1, [x1]
    29b8:	str	w1, [x0]
    29bc:	ldrsw	x0, [sp, #1384]
    29c0:	lsl	x0, x0, #2
    29c4:	ldr	x1, [sp, #56]
    29c8:	add	x0, x1, x0
    29cc:	ldr	w1, [sp, #1328]
    29d0:	str	w1, [x0]
    29d4:	ldr	w0, [sp, #1388]
    29d8:	add	w0, w0, #0x1
    29dc:	str	w0, [sp, #1388]
    29e0:	ldr	w0, [sp, #1384]
    29e4:	add	w0, w0, #0x1
    29e8:	str	w0, [sp, #1384]
    29ec:	ldr	w0, [sp, #1380]
    29f0:	sub	w0, w0, #0x1
    29f4:	str	w0, [sp, #1380]
    29f8:	ldr	w0, [sp, #1380]
    29fc:	cmp	w0, #0x0
    2a00:	b.gt	297c <mainQSort3+0x5e8>
    2a04:	ldr	w1, [sp, #1376]
    2a08:	ldr	w0, [sp, #1420]
    2a0c:	add	w1, w1, w0
    2a10:	ldr	w0, [sp, #1412]
    2a14:	sub	w0, w1, w0
    2a18:	sub	w0, w0, #0x1
    2a1c:	str	w0, [sp, #1360]
    2a20:	ldr	w1, [sp, #1408]
    2a24:	ldr	w0, [sp, #1416]
    2a28:	sub	w0, w1, w0
    2a2c:	ldr	w1, [sp, #1372]
    2a30:	sub	w0, w1, w0
    2a34:	add	w0, w0, #0x1
    2a38:	str	w0, [sp, #1344]
    2a3c:	ldr	w0, [sp, #1376]
    2a40:	str	w0, [sp, #104]
    2a44:	ldr	w0, [sp, #1360]
    2a48:	str	w0, [sp, #88]
    2a4c:	ldr	w0, [sp, #1368]
    2a50:	str	w0, [sp, #72]
    2a54:	ldr	w0, [sp, #1344]
    2a58:	str	w0, [sp, #108]
    2a5c:	ldr	w0, [sp, #1372]
    2a60:	str	w0, [sp, #92]
    2a64:	ldr	w0, [sp, #1368]
    2a68:	str	w0, [sp, #76]
    2a6c:	ldr	w0, [sp, #1360]
    2a70:	add	w0, w0, #0x1
    2a74:	str	w0, [sp, #112]
    2a78:	ldr	w0, [sp, #1344]
    2a7c:	sub	w0, w0, #0x1
    2a80:	str	w0, [sp, #96]
    2a84:	ldr	w0, [sp, #1368]
    2a88:	add	w0, w0, #0x1
    2a8c:	str	w0, [sp, #80]
    2a90:	ldr	w1, [sp, #88]
    2a94:	ldr	w0, [sp, #104]
    2a98:	sub	w1, w1, w0
    2a9c:	ldr	w2, [sp, #92]
    2aa0:	ldr	w0, [sp, #108]
    2aa4:	sub	w0, w2, w0
    2aa8:	cmp	w1, w0
    2aac:	b.ge	2af8 <mainQSort3+0x764>  // b.tcont
    2ab0:	ldr	w0, [sp, #104]
    2ab4:	str	w0, [sp, #1340]
    2ab8:	ldr	w0, [sp, #108]
    2abc:	str	w0, [sp, #104]
    2ac0:	ldr	w0, [sp, #1340]
    2ac4:	str	w0, [sp, #108]
    2ac8:	ldr	w0, [sp, #88]
    2acc:	str	w0, [sp, #1340]
    2ad0:	ldr	w0, [sp, #92]
    2ad4:	str	w0, [sp, #88]
    2ad8:	ldr	w0, [sp, #1340]
    2adc:	str	w0, [sp, #92]
    2ae0:	ldr	w0, [sp, #72]
    2ae4:	str	w0, [sp, #1340]
    2ae8:	ldr	w0, [sp, #76]
    2aec:	str	w0, [sp, #72]
    2af0:	ldr	w0, [sp, #1340]
    2af4:	str	w0, [sp, #76]
    2af8:	ldr	w1, [sp, #92]
    2afc:	ldr	w0, [sp, #108]
    2b00:	sub	w1, w1, w0
    2b04:	ldr	w2, [sp, #96]
    2b08:	ldr	w0, [sp, #112]
    2b0c:	sub	w0, w2, w0
    2b10:	cmp	w1, w0
    2b14:	b.ge	2b60 <mainQSort3+0x7cc>  // b.tcont
    2b18:	ldr	w0, [sp, #108]
    2b1c:	str	w0, [sp, #1336]
    2b20:	ldr	w0, [sp, #112]
    2b24:	str	w0, [sp, #108]
    2b28:	ldr	w0, [sp, #1336]
    2b2c:	str	w0, [sp, #112]
    2b30:	ldr	w0, [sp, #92]
    2b34:	str	w0, [sp, #1336]
    2b38:	ldr	w0, [sp, #96]
    2b3c:	str	w0, [sp, #92]
    2b40:	ldr	w0, [sp, #1336]
    2b44:	str	w0, [sp, #96]
    2b48:	ldr	w0, [sp, #76]
    2b4c:	str	w0, [sp, #1336]
    2b50:	ldr	w0, [sp, #80]
    2b54:	str	w0, [sp, #76]
    2b58:	ldr	w0, [sp, #1336]
    2b5c:	str	w0, [sp, #80]
    2b60:	ldr	w1, [sp, #88]
    2b64:	ldr	w0, [sp, #104]
    2b68:	sub	w1, w1, w0
    2b6c:	ldr	w2, [sp, #92]
    2b70:	ldr	w0, [sp, #108]
    2b74:	sub	w0, w2, w0
    2b78:	cmp	w1, w0
    2b7c:	b.ge	2bc8 <mainQSort3+0x834>  // b.tcont
    2b80:	ldr	w0, [sp, #104]
    2b84:	str	w0, [sp, #1332]
    2b88:	ldr	w0, [sp, #108]
    2b8c:	str	w0, [sp, #104]
    2b90:	ldr	w0, [sp, #1332]
    2b94:	str	w0, [sp, #108]
    2b98:	ldr	w0, [sp, #88]
    2b9c:	str	w0, [sp, #1332]
    2ba0:	ldr	w0, [sp, #92]
    2ba4:	str	w0, [sp, #88]
    2ba8:	ldr	w0, [sp, #1332]
    2bac:	str	w0, [sp, #92]
    2bb0:	ldr	w0, [sp, #72]
    2bb4:	str	w0, [sp, #1332]
    2bb8:	ldr	w0, [sp, #76]
    2bbc:	str	w0, [sp, #72]
    2bc0:	ldr	w0, [sp, #1332]
    2bc4:	str	w0, [sp, #76]
    2bc8:	ldr	w2, [sp, #104]
    2bcc:	ldrsw	x0, [sp, #1404]
    2bd0:	lsl	x0, x0, #2
    2bd4:	add	x1, sp, #0x398
    2bd8:	str	w2, [x1, x0]
    2bdc:	ldr	w2, [sp, #88]
    2be0:	ldrsw	x0, [sp, #1404]
    2be4:	lsl	x0, x0, #2
    2be8:	add	x1, sp, #0x208
    2bec:	str	w2, [x1, x0]
    2bf0:	ldr	w2, [sp, #72]
    2bf4:	ldrsw	x0, [sp, #1404]
    2bf8:	lsl	x0, x0, #2
    2bfc:	add	x1, sp, #0x78
    2c00:	str	w2, [x1, x0]
    2c04:	ldr	w0, [sp, #1404]
    2c08:	add	w0, w0, #0x1
    2c0c:	str	w0, [sp, #1404]
    2c10:	ldr	w2, [sp, #108]
    2c14:	ldrsw	x0, [sp, #1404]
    2c18:	lsl	x0, x0, #2
    2c1c:	add	x1, sp, #0x398
    2c20:	str	w2, [x1, x0]
    2c24:	ldr	w2, [sp, #92]
    2c28:	ldrsw	x0, [sp, #1404]
    2c2c:	lsl	x0, x0, #2
    2c30:	add	x1, sp, #0x208
    2c34:	str	w2, [x1, x0]
    2c38:	ldr	w2, [sp, #76]
    2c3c:	ldrsw	x0, [sp, #1404]
    2c40:	lsl	x0, x0, #2
    2c44:	add	x1, sp, #0x78
    2c48:	str	w2, [x1, x0]
    2c4c:	ldr	w0, [sp, #1404]
    2c50:	add	w0, w0, #0x1
    2c54:	str	w0, [sp, #1404]
    2c58:	ldr	w2, [sp, #112]
    2c5c:	ldrsw	x0, [sp, #1404]
    2c60:	lsl	x0, x0, #2
    2c64:	add	x1, sp, #0x398
    2c68:	str	w2, [x1, x0]
    2c6c:	ldr	w2, [sp, #96]
    2c70:	ldrsw	x0, [sp, #1404]
    2c74:	lsl	x0, x0, #2
    2c78:	add	x1, sp, #0x208
    2c7c:	str	w2, [x1, x0]
    2c80:	ldr	w2, [sp, #80]
    2c84:	ldrsw	x0, [sp, #1404]
    2c88:	lsl	x0, x0, #2
    2c8c:	add	x1, sp, #0x78
    2c90:	str	w2, [x1, x0]
    2c94:	ldr	w0, [sp, #1404]
    2c98:	add	w0, w0, #0x1
    2c9c:	str	w0, [sp, #1404]
    2ca0:	ldr	w0, [sp, #1404]
    2ca4:	cmp	w0, #0x0
    2ca8:	b.gt	2410 <mainQSort3+0x7c>
    2cac:	b	2cb4 <mainQSort3+0x920>
    2cb0:	nop
    2cb4:	ldp	x29, x30, [sp]
    2cb8:	add	sp, sp, #0x590
    2cbc:	ret

0000000000002cc0 <mainSort>:
    2cc0:	sub	sp, sp, #0xd80
    2cc4:	stp	x29, x30, [sp]
    2cc8:	mov	x29, sp
    2ccc:	str	x0, [sp, #56]
    2cd0:	str	x1, [sp, #48]
    2cd4:	str	x2, [sp, #40]
    2cd8:	str	x3, [sp, #32]
    2cdc:	str	w4, [sp, #28]
    2ce0:	str	w5, [sp, #24]
    2ce4:	str	x6, [sp, #16]
    2ce8:	ldr	w0, [sp, #24]
    2cec:	cmp	w0, #0x3
    2cf0:	b.le	2d18 <mainSort+0x58>
    2cf4:	adrp	x0, 0 <stderr>
    2cf8:	add	x0, x0, #0x0
    2cfc:	ldr	x0, [x0]
    2d00:	mov	x3, x0
    2d04:	mov	x2, #0x21                  	// #33
    2d08:	mov	x1, #0x1                   	// #1
    2d0c:	adrp	x0, 0 <fallbackSimpleSort>
    2d10:	add	x0, x0, #0x0
    2d14:	bl	0 <fwrite>
    2d18:	mov	w0, #0x10000               	// #65536
    2d1c:	str	w0, [sp, #3452]
    2d20:	b	2d44 <mainSort+0x84>
    2d24:	ldrsw	x0, [sp, #3452]
    2d28:	lsl	x0, x0, #2
    2d2c:	ldr	x1, [sp, #32]
    2d30:	add	x0, x1, x0
    2d34:	str	wzr, [x0]
    2d38:	ldr	w0, [sp, #3452]
    2d3c:	sub	w0, w0, #0x1
    2d40:	str	w0, [sp, #3452]
    2d44:	ldr	w0, [sp, #3452]
    2d48:	cmp	w0, #0x0
    2d4c:	b.ge	2d24 <mainSort+0x64>  // b.tcont
    2d50:	ldr	x0, [sp, #48]
    2d54:	ldrb	w0, [x0]
    2d58:	lsl	w0, w0, #8
    2d5c:	str	w0, [sp, #3448]
    2d60:	ldr	w0, [sp, #28]
    2d64:	sub	w0, w0, #0x1
    2d68:	str	w0, [sp, #3452]
    2d6c:	b	2ee4 <mainSort+0x224>
    2d70:	ldrsw	x0, [sp, #3452]
    2d74:	lsl	x0, x0, #1
    2d78:	ldr	x1, [sp, #40]
    2d7c:	add	x0, x1, x0
    2d80:	strh	wzr, [x0]
    2d84:	ldr	w0, [sp, #3448]
    2d88:	asr	w1, w0, #8
    2d8c:	ldrsw	x0, [sp, #3452]
    2d90:	ldr	x2, [sp, #48]
    2d94:	add	x0, x2, x0
    2d98:	ldrb	w0, [x0]
    2d9c:	lsl	w0, w0, #8
    2da0:	orr	w0, w1, w0
    2da4:	str	w0, [sp, #3448]
    2da8:	ldrsw	x0, [sp, #3448]
    2dac:	lsl	x0, x0, #2
    2db0:	ldr	x1, [sp, #32]
    2db4:	add	x0, x1, x0
    2db8:	ldr	w1, [x0]
    2dbc:	add	w1, w1, #0x1
    2dc0:	str	w1, [x0]
    2dc4:	ldrsw	x0, [sp, #3452]
    2dc8:	lsl	x0, x0, #1
    2dcc:	sub	x0, x0, #0x2
    2dd0:	ldr	x1, [sp, #40]
    2dd4:	add	x0, x1, x0
    2dd8:	strh	wzr, [x0]
    2ddc:	ldr	w0, [sp, #3448]
    2de0:	asr	w1, w0, #8
    2de4:	ldrsw	x0, [sp, #3452]
    2de8:	sub	x0, x0, #0x1
    2dec:	ldr	x2, [sp, #48]
    2df0:	add	x0, x2, x0
    2df4:	ldrb	w0, [x0]
    2df8:	lsl	w0, w0, #8
    2dfc:	orr	w0, w1, w0
    2e00:	str	w0, [sp, #3448]
    2e04:	ldrsw	x0, [sp, #3448]
    2e08:	lsl	x0, x0, #2
    2e0c:	ldr	x1, [sp, #32]
    2e10:	add	x0, x1, x0
    2e14:	ldr	w1, [x0]
    2e18:	add	w1, w1, #0x1
    2e1c:	str	w1, [x0]
    2e20:	ldrsw	x0, [sp, #3452]
    2e24:	lsl	x0, x0, #1
    2e28:	sub	x0, x0, #0x4
    2e2c:	ldr	x1, [sp, #40]
    2e30:	add	x0, x1, x0
    2e34:	strh	wzr, [x0]
    2e38:	ldr	w0, [sp, #3448]
    2e3c:	asr	w1, w0, #8
    2e40:	ldrsw	x0, [sp, #3452]
    2e44:	sub	x0, x0, #0x2
    2e48:	ldr	x2, [sp, #48]
    2e4c:	add	x0, x2, x0
    2e50:	ldrb	w0, [x0]
    2e54:	lsl	w0, w0, #8
    2e58:	orr	w0, w1, w0
    2e5c:	str	w0, [sp, #3448]
    2e60:	ldrsw	x0, [sp, #3448]
    2e64:	lsl	x0, x0, #2
    2e68:	ldr	x1, [sp, #32]
    2e6c:	add	x0, x1, x0
    2e70:	ldr	w1, [x0]
    2e74:	add	w1, w1, #0x1
    2e78:	str	w1, [x0]
    2e7c:	ldrsw	x0, [sp, #3452]
    2e80:	lsl	x0, x0, #1
    2e84:	sub	x0, x0, #0x6
    2e88:	ldr	x1, [sp, #40]
    2e8c:	add	x0, x1, x0
    2e90:	strh	wzr, [x0]
    2e94:	ldr	w0, [sp, #3448]
    2e98:	asr	w1, w0, #8
    2e9c:	ldrsw	x0, [sp, #3452]
    2ea0:	sub	x0, x0, #0x3
    2ea4:	ldr	x2, [sp, #48]
    2ea8:	add	x0, x2, x0
    2eac:	ldrb	w0, [x0]
    2eb0:	lsl	w0, w0, #8
    2eb4:	orr	w0, w1, w0
    2eb8:	str	w0, [sp, #3448]
    2ebc:	ldrsw	x0, [sp, #3448]
    2ec0:	lsl	x0, x0, #2
    2ec4:	ldr	x1, [sp, #32]
    2ec8:	add	x0, x1, x0
    2ecc:	ldr	w1, [x0]
    2ed0:	add	w1, w1, #0x1
    2ed4:	str	w1, [x0]
    2ed8:	ldr	w0, [sp, #3452]
    2edc:	sub	w0, w0, #0x4
    2ee0:	str	w0, [sp, #3452]
    2ee4:	ldr	w0, [sp, #3452]
    2ee8:	cmp	w0, #0x2
    2eec:	b.gt	2d70 <mainSort+0xb0>
    2ef0:	b	2f54 <mainSort+0x294>
    2ef4:	ldrsw	x0, [sp, #3452]
    2ef8:	lsl	x0, x0, #1
    2efc:	ldr	x1, [sp, #40]
    2f00:	add	x0, x1, x0
    2f04:	strh	wzr, [x0]
    2f08:	ldr	w0, [sp, #3448]
    2f0c:	asr	w1, w0, #8
    2f10:	ldrsw	x0, [sp, #3452]
    2f14:	ldr	x2, [sp, #48]
    2f18:	add	x0, x2, x0
    2f1c:	ldrb	w0, [x0]
    2f20:	lsl	w0, w0, #8
    2f24:	orr	w0, w1, w0
    2f28:	str	w0, [sp, #3448]
    2f2c:	ldrsw	x0, [sp, #3448]
    2f30:	lsl	x0, x0, #2
    2f34:	ldr	x1, [sp, #32]
    2f38:	add	x0, x1, x0
    2f3c:	ldr	w1, [x0]
    2f40:	add	w1, w1, #0x1
    2f44:	str	w1, [x0]
    2f48:	ldr	w0, [sp, #3452]
    2f4c:	sub	w0, w0, #0x1
    2f50:	str	w0, [sp, #3452]
    2f54:	ldr	w0, [sp, #3452]
    2f58:	cmp	w0, #0x0
    2f5c:	b.ge	2ef4 <mainSort+0x234>  // b.tcont
    2f60:	str	wzr, [sp, #3452]
    2f64:	b	2fc0 <mainSort+0x300>
    2f68:	ldrsw	x0, [sp, #3452]
    2f6c:	ldr	x1, [sp, #48]
    2f70:	add	x1, x1, x0
    2f74:	ldr	w2, [sp, #28]
    2f78:	ldr	w0, [sp, #3452]
    2f7c:	add	w0, w2, w0
    2f80:	sxtw	x0, w0
    2f84:	ldr	x2, [sp, #48]
    2f88:	add	x0, x2, x0
    2f8c:	ldrb	w1, [x1]
    2f90:	strb	w1, [x0]
    2f94:	ldr	w1, [sp, #28]
    2f98:	ldr	w0, [sp, #3452]
    2f9c:	add	w0, w1, w0
    2fa0:	sxtw	x0, w0
    2fa4:	lsl	x0, x0, #1
    2fa8:	ldr	x1, [sp, #40]
    2fac:	add	x0, x1, x0
    2fb0:	strh	wzr, [x0]
    2fb4:	ldr	w0, [sp, #3452]
    2fb8:	add	w0, w0, #0x1
    2fbc:	str	w0, [sp, #3452]
    2fc0:	ldr	w0, [sp, #3452]
    2fc4:	cmp	w0, #0x21
    2fc8:	b.le	2f68 <mainSort+0x2a8>
    2fcc:	ldr	w0, [sp, #24]
    2fd0:	cmp	w0, #0x3
    2fd4:	b.le	2ffc <mainSort+0x33c>
    2fd8:	adrp	x0, 0 <stderr>
    2fdc:	add	x0, x0, #0x0
    2fe0:	ldr	x0, [x0]
    2fe4:	mov	x3, x0
    2fe8:	mov	x2, #0x1b                  	// #27
    2fec:	mov	x1, #0x1                   	// #1
    2ff0:	adrp	x0, 0 <fallbackSimpleSort>
    2ff4:	add	x0, x0, #0x0
    2ff8:	bl	0 <fwrite>
    2ffc:	mov	w0, #0x1                   	// #1
    3000:	str	w0, [sp, #3452]
    3004:	b	3058 <mainSort+0x398>
    3008:	ldrsw	x0, [sp, #3452]
    300c:	lsl	x0, x0, #2
    3010:	ldr	x1, [sp, #32]
    3014:	add	x0, x1, x0
    3018:	ldr	w2, [x0]
    301c:	ldrsw	x0, [sp, #3452]
    3020:	lsl	x0, x0, #2
    3024:	sub	x0, x0, #0x4
    3028:	ldr	x1, [sp, #32]
    302c:	add	x0, x1, x0
    3030:	ldr	w1, [x0]
    3034:	ldrsw	x0, [sp, #3452]
    3038:	lsl	x0, x0, #2
    303c:	ldr	x3, [sp, #32]
    3040:	add	x0, x3, x0
    3044:	add	w1, w2, w1
    3048:	str	w1, [x0]
    304c:	ldr	w0, [sp, #3452]
    3050:	add	w0, w0, #0x1
    3054:	str	w0, [sp, #3452]
    3058:	ldr	w0, [sp, #3452]
    305c:	cmp	w0, #0x10, lsl #12
    3060:	b.le	3008 <mainSort+0x348>
    3064:	ldr	x0, [sp, #48]
    3068:	ldrb	w0, [x0]
    306c:	and	w0, w0, #0xffff
    3070:	ubfiz	w0, w0, #8, #8
    3074:	strh	w0, [sp, #3438]
    3078:	ldr	w0, [sp, #28]
    307c:	sub	w0, w0, #0x1
    3080:	str	w0, [sp, #3452]
    3084:	b	32b8 <mainSort+0x5f8>
    3088:	ldrh	w0, [sp, #3438]
    308c:	lsr	w0, w0, #8
    3090:	and	w0, w0, #0xffff
    3094:	sxth	w1, w0
    3098:	ldrsw	x0, [sp, #3452]
    309c:	ldr	x2, [sp, #48]
    30a0:	add	x0, x2, x0
    30a4:	ldrb	w0, [x0]
    30a8:	lsl	w0, w0, #8
    30ac:	sxth	w0, w0
    30b0:	orr	w0, w1, w0
    30b4:	sxth	w0, w0
    30b8:	strh	w0, [sp, #3438]
    30bc:	ldrh	w0, [sp, #3438]
    30c0:	lsl	x0, x0, #2
    30c4:	ldr	x1, [sp, #32]
    30c8:	add	x0, x1, x0
    30cc:	ldr	w0, [x0]
    30d0:	sub	w0, w0, #0x1
    30d4:	str	w0, [sp, #3448]
    30d8:	ldrh	w0, [sp, #3438]
    30dc:	lsl	x0, x0, #2
    30e0:	ldr	x1, [sp, #32]
    30e4:	add	x0, x1, x0
    30e8:	ldr	w1, [sp, #3448]
    30ec:	str	w1, [x0]
    30f0:	ldrsw	x0, [sp, #3448]
    30f4:	lsl	x0, x0, #2
    30f8:	ldr	x1, [sp, #56]
    30fc:	add	x0, x1, x0
    3100:	ldr	w1, [sp, #3452]
    3104:	str	w1, [x0]
    3108:	ldrh	w0, [sp, #3438]
    310c:	lsr	w0, w0, #8
    3110:	and	w0, w0, #0xffff
    3114:	sxth	w1, w0
    3118:	ldrsw	x0, [sp, #3452]
    311c:	sub	x0, x0, #0x1
    3120:	ldr	x2, [sp, #48]
    3124:	add	x0, x2, x0
    3128:	ldrb	w0, [x0]
    312c:	lsl	w0, w0, #8
    3130:	sxth	w0, w0
    3134:	orr	w0, w1, w0
    3138:	sxth	w0, w0
    313c:	strh	w0, [sp, #3438]
    3140:	ldrh	w0, [sp, #3438]
    3144:	lsl	x0, x0, #2
    3148:	ldr	x1, [sp, #32]
    314c:	add	x0, x1, x0
    3150:	ldr	w0, [x0]
    3154:	sub	w0, w0, #0x1
    3158:	str	w0, [sp, #3448]
    315c:	ldrh	w0, [sp, #3438]
    3160:	lsl	x0, x0, #2
    3164:	ldr	x1, [sp, #32]
    3168:	add	x0, x1, x0
    316c:	ldr	w1, [sp, #3448]
    3170:	str	w1, [x0]
    3174:	ldr	w0, [sp, #3452]
    3178:	sub	w2, w0, #0x1
    317c:	ldrsw	x0, [sp, #3448]
    3180:	lsl	x0, x0, #2
    3184:	ldr	x1, [sp, #56]
    3188:	add	x0, x1, x0
    318c:	mov	w1, w2
    3190:	str	w1, [x0]
    3194:	ldrh	w0, [sp, #3438]
    3198:	lsr	w0, w0, #8
    319c:	and	w0, w0, #0xffff
    31a0:	sxth	w1, w0
    31a4:	ldrsw	x0, [sp, #3452]
    31a8:	sub	x0, x0, #0x2
    31ac:	ldr	x2, [sp, #48]
    31b0:	add	x0, x2, x0
    31b4:	ldrb	w0, [x0]
    31b8:	lsl	w0, w0, #8
    31bc:	sxth	w0, w0
    31c0:	orr	w0, w1, w0
    31c4:	sxth	w0, w0
    31c8:	strh	w0, [sp, #3438]
    31cc:	ldrh	w0, [sp, #3438]
    31d0:	lsl	x0, x0, #2
    31d4:	ldr	x1, [sp, #32]
    31d8:	add	x0, x1, x0
    31dc:	ldr	w0, [x0]
    31e0:	sub	w0, w0, #0x1
    31e4:	str	w0, [sp, #3448]
    31e8:	ldrh	w0, [sp, #3438]
    31ec:	lsl	x0, x0, #2
    31f0:	ldr	x1, [sp, #32]
    31f4:	add	x0, x1, x0
    31f8:	ldr	w1, [sp, #3448]
    31fc:	str	w1, [x0]
    3200:	ldr	w0, [sp, #3452]
    3204:	sub	w2, w0, #0x2
    3208:	ldrsw	x0, [sp, #3448]
    320c:	lsl	x0, x0, #2
    3210:	ldr	x1, [sp, #56]
    3214:	add	x0, x1, x0
    3218:	mov	w1, w2
    321c:	str	w1, [x0]
    3220:	ldrh	w0, [sp, #3438]
    3224:	lsr	w0, w0, #8
    3228:	and	w0, w0, #0xffff
    322c:	sxth	w1, w0
    3230:	ldrsw	x0, [sp, #3452]
    3234:	sub	x0, x0, #0x3
    3238:	ldr	x2, [sp, #48]
    323c:	add	x0, x2, x0
    3240:	ldrb	w0, [x0]
    3244:	lsl	w0, w0, #8
    3248:	sxth	w0, w0
    324c:	orr	w0, w1, w0
    3250:	sxth	w0, w0
    3254:	strh	w0, [sp, #3438]
    3258:	ldrh	w0, [sp, #3438]
    325c:	lsl	x0, x0, #2
    3260:	ldr	x1, [sp, #32]
    3264:	add	x0, x1, x0
    3268:	ldr	w0, [x0]
    326c:	sub	w0, w0, #0x1
    3270:	str	w0, [sp, #3448]
    3274:	ldrh	w0, [sp, #3438]
    3278:	lsl	x0, x0, #2
    327c:	ldr	x1, [sp, #32]
    3280:	add	x0, x1, x0
    3284:	ldr	w1, [sp, #3448]
    3288:	str	w1, [x0]
    328c:	ldr	w0, [sp, #3452]
    3290:	sub	w2, w0, #0x3
    3294:	ldrsw	x0, [sp, #3448]
    3298:	lsl	x0, x0, #2
    329c:	ldr	x1, [sp, #56]
    32a0:	add	x0, x1, x0
    32a4:	mov	w1, w2
    32a8:	str	w1, [x0]
    32ac:	ldr	w0, [sp, #3452]
    32b0:	sub	w0, w0, #0x4
    32b4:	str	w0, [sp, #3452]
    32b8:	ldr	w0, [sp, #3452]
    32bc:	cmp	w0, #0x2
    32c0:	b.gt	3088 <mainSort+0x3c8>
    32c4:	b	3354 <mainSort+0x694>
    32c8:	ldrh	w0, [sp, #3438]
    32cc:	lsr	w0, w0, #8
    32d0:	and	w0, w0, #0xffff
    32d4:	sxth	w1, w0
    32d8:	ldrsw	x0, [sp, #3452]
    32dc:	ldr	x2, [sp, #48]
    32e0:	add	x0, x2, x0
    32e4:	ldrb	w0, [x0]
    32e8:	lsl	w0, w0, #8
    32ec:	sxth	w0, w0
    32f0:	orr	w0, w1, w0
    32f4:	sxth	w0, w0
    32f8:	strh	w0, [sp, #3438]
    32fc:	ldrh	w0, [sp, #3438]
    3300:	lsl	x0, x0, #2
    3304:	ldr	x1, [sp, #32]
    3308:	add	x0, x1, x0
    330c:	ldr	w0, [x0]
    3310:	sub	w0, w0, #0x1
    3314:	str	w0, [sp, #3448]
    3318:	ldrh	w0, [sp, #3438]
    331c:	lsl	x0, x0, #2
    3320:	ldr	x1, [sp, #32]
    3324:	add	x0, x1, x0
    3328:	ldr	w1, [sp, #3448]
    332c:	str	w1, [x0]
    3330:	ldrsw	x0, [sp, #3448]
    3334:	lsl	x0, x0, #2
    3338:	ldr	x1, [sp, #56]
    333c:	add	x0, x1, x0
    3340:	ldr	w1, [sp, #3452]
    3344:	str	w1, [x0]
    3348:	ldr	w0, [sp, #3452]
    334c:	sub	w0, w0, #0x1
    3350:	str	w0, [sp, #3452]
    3354:	ldr	w0, [sp, #3452]
    3358:	cmp	w0, #0x0
    335c:	b.ge	32c8 <mainSort+0x608>  // b.tcont
    3360:	str	wzr, [sp, #3452]
    3364:	b	3394 <mainSort+0x6d4>
    3368:	ldrsw	x0, [sp, #3452]
    336c:	add	x1, sp, #0x840
    3370:	strb	wzr, [x1, x0]
    3374:	ldrsw	x0, [sp, #3452]
    3378:	lsl	x0, x0, #2
    337c:	add	x1, sp, #0x940
    3380:	ldr	w2, [sp, #3452]
    3384:	str	w2, [x1, x0]
    3388:	ldr	w0, [sp, #3452]
    338c:	add	w0, w0, #0x1
    3390:	str	w0, [sp, #3452]
    3394:	ldr	w0, [sp, #3452]
    3398:	cmp	w0, #0xff
    339c:	b.le	3368 <mainSort+0x6a8>
    33a0:	mov	w0, #0x1                   	// #1
    33a4:	str	w0, [sp, #3432]
    33a8:	ldr	w1, [sp, #3432]
    33ac:	mov	w0, w1
    33b0:	lsl	w0, w0, #1
    33b4:	add	w0, w0, w1
    33b8:	add	w0, w0, #0x1
    33bc:	str	w0, [sp, #3432]
    33c0:	ldr	w0, [sp, #3432]
    33c4:	cmp	w0, #0x100
    33c8:	b.le	33a8 <mainSort+0x6e8>
    33cc:	ldr	w0, [sp, #3432]
    33d0:	mov	w1, #0x5556                	// #21846
    33d4:	movk	w1, #0x5555, lsl #16
    33d8:	smull	x1, w0, w1
    33dc:	lsr	x1, x1, #32
    33e0:	asr	w0, w0, #31
    33e4:	sub	w0, w1, w0
    33e8:	str	w0, [sp, #3432]
    33ec:	ldr	w0, [sp, #3432]
    33f0:	str	w0, [sp, #3452]
    33f4:	b	3544 <mainSort+0x884>
    33f8:	ldrsw	x0, [sp, #3452]
    33fc:	lsl	x0, x0, #2
    3400:	add	x1, sp, #0x940
    3404:	ldr	w0, [x1, x0]
    3408:	str	w0, [sp, #3392]
    340c:	ldr	w0, [sp, #3452]
    3410:	str	w0, [sp, #3448]
    3414:	b	3464 <mainSort+0x7a4>
    3418:	ldr	w1, [sp, #3448]
    341c:	ldr	w0, [sp, #3432]
    3420:	sub	w0, w1, w0
    3424:	sxtw	x0, w0
    3428:	lsl	x0, x0, #2
    342c:	add	x1, sp, #0x940
    3430:	ldr	w2, [x1, x0]
    3434:	ldrsw	x0, [sp, #3448]
    3438:	lsl	x0, x0, #2
    343c:	add	x1, sp, #0x940
    3440:	str	w2, [x1, x0]
    3444:	ldr	w1, [sp, #3448]
    3448:	ldr	w0, [sp, #3432]
    344c:	sub	w0, w1, w0
    3450:	str	w0, [sp, #3448]
    3454:	ldr	w1, [sp, #3432]
    3458:	ldr	w0, [sp, #3448]
    345c:	cmp	w1, w0
    3460:	b.gt	3520 <mainSort+0x860>
    3464:	ldr	w1, [sp, #3448]
    3468:	ldr	w0, [sp, #3432]
    346c:	sub	w0, w1, w0
    3470:	sxtw	x0, w0
    3474:	lsl	x0, x0, #2
    3478:	add	x1, sp, #0x940
    347c:	ldr	w0, [x1, x0]
    3480:	add	w0, w0, #0x1
    3484:	lsl	w0, w0, #8
    3488:	sxtw	x0, w0
    348c:	lsl	x0, x0, #2
    3490:	ldr	x1, [sp, #32]
    3494:	add	x0, x1, x0
    3498:	ldr	w1, [x0]
    349c:	ldr	w2, [sp, #3448]
    34a0:	ldr	w0, [sp, #3432]
    34a4:	sub	w0, w2, w0
    34a8:	sxtw	x0, w0
    34ac:	lsl	x0, x0, #2
    34b0:	add	x2, sp, #0x940
    34b4:	ldr	w0, [x2, x0]
    34b8:	lsl	w0, w0, #8
    34bc:	sxtw	x0, w0
    34c0:	lsl	x0, x0, #2
    34c4:	ldr	x2, [sp, #32]
    34c8:	add	x0, x2, x0
    34cc:	ldr	w0, [x0]
    34d0:	sub	w1, w1, w0
    34d4:	ldr	w0, [sp, #3392]
    34d8:	add	w0, w0, #0x1
    34dc:	lsl	w0, w0, #8
    34e0:	sxtw	x0, w0
    34e4:	lsl	x0, x0, #2
    34e8:	ldr	x2, [sp, #32]
    34ec:	add	x0, x2, x0
    34f0:	ldr	w2, [x0]
    34f4:	ldr	w0, [sp, #3392]
    34f8:	lsl	w0, w0, #8
    34fc:	sxtw	x0, w0
    3500:	lsl	x0, x0, #2
    3504:	ldr	x3, [sp, #32]
    3508:	add	x0, x3, x0
    350c:	ldr	w0, [x0]
    3510:	sub	w0, w2, w0
    3514:	cmp	w1, w0
    3518:	b.hi	3418 <mainSort+0x758>  // b.pmore
    351c:	b	3524 <mainSort+0x864>
    3520:	nop
    3524:	ldrsw	x0, [sp, #3448]
    3528:	lsl	x0, x0, #2
    352c:	add	x1, sp, #0x940
    3530:	ldr	w2, [sp, #3392]
    3534:	str	w2, [x1, x0]
    3538:	ldr	w0, [sp, #3452]
    353c:	add	w0, w0, #0x1
    3540:	str	w0, [sp, #3452]
    3544:	ldr	w0, [sp, #3452]
    3548:	cmp	w0, #0xff
    354c:	b.le	33f8 <mainSort+0x738>
    3550:	ldr	w0, [sp, #3432]
    3554:	cmp	w0, #0x1
    3558:	b.ne	33cc <mainSort+0x70c>  // b.any
    355c:	str	wzr, [sp, #3440]
    3560:	str	wzr, [sp, #3452]
    3564:	b	3be4 <mainSort+0xf24>
    3568:	ldrsw	x0, [sp, #3452]
    356c:	lsl	x0, x0, #2
    3570:	add	x1, sp, #0x940
    3574:	ldr	w0, [x1, x0]
    3578:	str	w0, [sp, #3424]
    357c:	str	wzr, [sp, #3448]
    3580:	b	36e8 <mainSort+0xa28>
    3584:	ldr	w1, [sp, #3448]
    3588:	ldr	w0, [sp, #3424]
    358c:	cmp	w1, w0
    3590:	b.eq	36dc <mainSort+0xa1c>  // b.none
    3594:	ldr	w0, [sp, #3424]
    3598:	lsl	w0, w0, #8
    359c:	ldr	w1, [sp, #3448]
    35a0:	add	w0, w1, w0
    35a4:	str	w0, [sp, #3404]
    35a8:	ldrsw	x0, [sp, #3404]
    35ac:	lsl	x0, x0, #2
    35b0:	ldr	x1, [sp, #32]
    35b4:	add	x0, x1, x0
    35b8:	ldr	w0, [x0]
    35bc:	and	w0, w0, #0x200000
    35c0:	cmp	w0, #0x0
    35c4:	b.ne	36b0 <mainSort+0x9f0>  // b.any
    35c8:	ldrsw	x0, [sp, #3404]
    35cc:	lsl	x0, x0, #2
    35d0:	ldr	x1, [sp, #32]
    35d4:	add	x0, x1, x0
    35d8:	ldr	w0, [x0]
    35dc:	and	w0, w0, #0xffdfffff
    35e0:	str	w0, [sp, #3400]
    35e4:	ldrsw	x0, [sp, #3404]
    35e8:	add	x0, x0, #0x1
    35ec:	lsl	x0, x0, #2
    35f0:	ldr	x1, [sp, #32]
    35f4:	add	x0, x1, x0
    35f8:	ldr	w0, [x0]
    35fc:	and	w0, w0, #0xffdfffff
    3600:	sub	w0, w0, #0x1
    3604:	str	w0, [sp, #3396]
    3608:	ldr	w1, [sp, #3396]
    360c:	ldr	w0, [sp, #3400]
    3610:	cmp	w1, w0
    3614:	b.le	36b0 <mainSort+0x9f0>
    3618:	ldr	w0, [sp, #24]
    361c:	cmp	w0, #0x3
    3620:	b.le	3660 <mainSort+0x9a0>
    3624:	adrp	x0, 0 <stderr>
    3628:	add	x0, x0, #0x0
    362c:	ldr	x6, [x0]
    3630:	ldr	w1, [sp, #3396]
    3634:	ldr	w0, [sp, #3400]
    3638:	sub	w0, w1, w0
    363c:	add	w0, w0, #0x1
    3640:	mov	w5, w0
    3644:	ldr	w4, [sp, #3440]
    3648:	ldr	w3, [sp, #3448]
    364c:	ldr	w2, [sp, #3424]
    3650:	adrp	x0, 0 <fallbackSimpleSort>
    3654:	add	x1, x0, #0x0
    3658:	mov	x0, x6
    365c:	bl	0 <fprintf>
    3660:	ldr	x7, [sp, #16]
    3664:	mov	w6, #0x2                   	// #2
    3668:	ldr	w5, [sp, #3396]
    366c:	ldr	w4, [sp, #3400]
    3670:	ldr	w3, [sp, #28]
    3674:	ldr	x2, [sp, #40]
    3678:	ldr	x1, [sp, #48]
    367c:	ldr	x0, [sp, #56]
    3680:	bl	2394 <mainQSort3>
    3684:	ldr	w1, [sp, #3396]
    3688:	ldr	w0, [sp, #3400]
    368c:	sub	w0, w1, w0
    3690:	add	w0, w0, #0x1
    3694:	ldr	w1, [sp, #3440]
    3698:	add	w0, w1, w0
    369c:	str	w0, [sp, #3440]
    36a0:	ldr	x0, [sp, #16]
    36a4:	ldr	w0, [x0]
    36a8:	cmp	w0, #0x0
    36ac:	b.lt	3c34 <mainSort+0xf74>  // b.tstop
    36b0:	ldrsw	x0, [sp, #3404]
    36b4:	lsl	x0, x0, #2
    36b8:	ldr	x1, [sp, #32]
    36bc:	add	x0, x1, x0
    36c0:	ldr	w1, [x0]
    36c4:	ldrsw	x0, [sp, #3404]
    36c8:	lsl	x0, x0, #2
    36cc:	ldr	x2, [sp, #32]
    36d0:	add	x0, x2, x0
    36d4:	orr	w1, w1, #0x200000
    36d8:	str	w1, [x0]
    36dc:	ldr	w0, [sp, #3448]
    36e0:	add	w0, w0, #0x1
    36e4:	str	w0, [sp, #3448]
    36e8:	ldr	w0, [sp, #3448]
    36ec:	cmp	w0, #0xff
    36f0:	b.le	3584 <mainSort+0x8c4>
    36f4:	ldrsw	x0, [sp, #3424]
    36f8:	add	x1, sp, #0x840
    36fc:	ldrb	w0, [x1, x0]
    3700:	cmp	w0, #0x0
    3704:	b.eq	3710 <mainSort+0xa50>  // b.none
    3708:	mov	w0, #0x3ee                 	// #1006
    370c:	bl	0 <BZ2_bz__AssertH__fail>
    3710:	str	wzr, [sp, #3448]
    3714:	b	37a0 <mainSort+0xae0>
    3718:	ldr	w0, [sp, #3448]
    371c:	lsl	w1, w0, #8
    3720:	ldr	w0, [sp, #3424]
    3724:	add	w0, w1, w0
    3728:	sxtw	x0, w0
    372c:	lsl	x0, x0, #2
    3730:	ldr	x1, [sp, #32]
    3734:	add	x0, x1, x0
    3738:	ldr	w0, [x0]
    373c:	and	w2, w0, #0xffdfffff
    3740:	ldrsw	x0, [sp, #3448]
    3744:	lsl	x0, x0, #2
    3748:	add	x1, sp, #0x440
    374c:	str	w2, [x1, x0]
    3750:	ldr	w0, [sp, #3448]
    3754:	lsl	w1, w0, #8
    3758:	ldr	w0, [sp, #3424]
    375c:	add	w0, w1, w0
    3760:	sxtw	x0, w0
    3764:	add	x0, x0, #0x1
    3768:	lsl	x0, x0, #2
    376c:	ldr	x1, [sp, #32]
    3770:	add	x0, x1, x0
    3774:	ldr	w0, [x0]
    3778:	and	w0, w0, #0xffdfffff
    377c:	sub	w0, w0, #0x1
    3780:	mov	w2, w0
    3784:	ldrsw	x0, [sp, #3448]
    3788:	lsl	x0, x0, #2
    378c:	add	x1, sp, #0x40
    3790:	str	w2, [x1, x0]
    3794:	ldr	w0, [sp, #3448]
    3798:	add	w0, w0, #0x1
    379c:	str	w0, [sp, #3448]
    37a0:	ldr	w0, [sp, #3448]
    37a4:	cmp	w0, #0xff
    37a8:	b.le	3718 <mainSort+0xa58>
    37ac:	ldr	w0, [sp, #3424]
    37b0:	lsl	w0, w0, #8
    37b4:	sxtw	x0, w0
    37b8:	lsl	x0, x0, #2
    37bc:	ldr	x1, [sp, #32]
    37c0:	add	x0, x1, x0
    37c4:	ldr	w0, [x0]
    37c8:	and	w0, w0, #0xffdfffff
    37cc:	str	w0, [sp, #3448]
    37d0:	b	3884 <mainSort+0xbc4>
    37d4:	ldrsw	x0, [sp, #3448]
    37d8:	lsl	x0, x0, #2
    37dc:	ldr	x1, [sp, #56]
    37e0:	add	x0, x1, x0
    37e4:	ldr	w0, [x0]
    37e8:	sub	w0, w0, #0x1
    37ec:	str	w0, [sp, #3444]
    37f0:	ldr	w0, [sp, #3444]
    37f4:	cmp	w0, #0x0
    37f8:	b.ge	380c <mainSort+0xb4c>  // b.tcont
    37fc:	ldr	w1, [sp, #3444]
    3800:	ldr	w0, [sp, #28]
    3804:	add	w0, w1, w0
    3808:	str	w0, [sp, #3444]
    380c:	ldrsw	x0, [sp, #3444]
    3810:	ldr	x1, [sp, #48]
    3814:	add	x0, x1, x0
    3818:	ldrb	w0, [x0]
    381c:	strb	w0, [sp, #3409]
    3820:	ldrb	w0, [sp, #3409]
    3824:	sxtw	x0, w0
    3828:	add	x1, sp, #0x840
    382c:	ldrb	w0, [x1, x0]
    3830:	cmp	w0, #0x0
    3834:	b.ne	3878 <mainSort+0xbb8>  // b.any
    3838:	ldrb	w2, [sp, #3409]
    383c:	sxtw	x0, w2
    3840:	lsl	x0, x0, #2
    3844:	add	x1, sp, #0x440
    3848:	ldr	w0, [x1, x0]
    384c:	add	w3, w0, #0x1
    3850:	sxtw	x1, w2
    3854:	lsl	x1, x1, #2
    3858:	add	x2, sp, #0x440
    385c:	str	w3, [x2, x1]
    3860:	sxtw	x0, w0
    3864:	lsl	x0, x0, #2
    3868:	ldr	x1, [sp, #56]
    386c:	add	x0, x1, x0
    3870:	ldr	w1, [sp, #3444]
    3874:	str	w1, [x0]
    3878:	ldr	w0, [sp, #3448]
    387c:	add	w0, w0, #0x1
    3880:	str	w0, [sp, #3448]
    3884:	ldrsw	x0, [sp, #3424]
    3888:	lsl	x0, x0, #2
    388c:	add	x1, sp, #0x440
    3890:	ldr	w0, [x1, x0]
    3894:	ldr	w1, [sp, #3448]
    3898:	cmp	w1, w0
    389c:	b.lt	37d4 <mainSort+0xb14>  // b.tstop
    38a0:	ldr	w0, [sp, #3424]
    38a4:	add	w0, w0, #0x1
    38a8:	lsl	w0, w0, #8
    38ac:	sxtw	x0, w0
    38b0:	lsl	x0, x0, #2
    38b4:	ldr	x1, [sp, #32]
    38b8:	add	x0, x1, x0
    38bc:	ldr	w0, [x0]
    38c0:	and	w0, w0, #0xffdfffff
    38c4:	sub	w0, w0, #0x1
    38c8:	str	w0, [sp, #3448]
    38cc:	b	3980 <mainSort+0xcc0>
    38d0:	ldrsw	x0, [sp, #3448]
    38d4:	lsl	x0, x0, #2
    38d8:	ldr	x1, [sp, #56]
    38dc:	add	x0, x1, x0
    38e0:	ldr	w0, [x0]
    38e4:	sub	w0, w0, #0x1
    38e8:	str	w0, [sp, #3444]
    38ec:	ldr	w0, [sp, #3444]
    38f0:	cmp	w0, #0x0
    38f4:	b.ge	3908 <mainSort+0xc48>  // b.tcont
    38f8:	ldr	w1, [sp, #3444]
    38fc:	ldr	w0, [sp, #28]
    3900:	add	w0, w1, w0
    3904:	str	w0, [sp, #3444]
    3908:	ldrsw	x0, [sp, #3444]
    390c:	ldr	x1, [sp, #48]
    3910:	add	x0, x1, x0
    3914:	ldrb	w0, [x0]
    3918:	strb	w0, [sp, #3409]
    391c:	ldrb	w0, [sp, #3409]
    3920:	sxtw	x0, w0
    3924:	add	x1, sp, #0x840
    3928:	ldrb	w0, [x1, x0]
    392c:	cmp	w0, #0x0
    3930:	b.ne	3974 <mainSort+0xcb4>  // b.any
    3934:	ldrb	w2, [sp, #3409]
    3938:	sxtw	x0, w2
    393c:	lsl	x0, x0, #2
    3940:	add	x1, sp, #0x40
    3944:	ldr	w0, [x1, x0]
    3948:	sub	w3, w0, #0x1
    394c:	sxtw	x1, w2
    3950:	lsl	x1, x1, #2
    3954:	add	x2, sp, #0x40
    3958:	str	w3, [x2, x1]
    395c:	sxtw	x0, w0
    3960:	lsl	x0, x0, #2
    3964:	ldr	x1, [sp, #56]
    3968:	add	x0, x1, x0
    396c:	ldr	w1, [sp, #3444]
    3970:	str	w1, [x0]
    3974:	ldr	w0, [sp, #3448]
    3978:	sub	w0, w0, #0x1
    397c:	str	w0, [sp, #3448]
    3980:	ldrsw	x0, [sp, #3424]
    3984:	lsl	x0, x0, #2
    3988:	add	x1, sp, #0x40
    398c:	ldr	w0, [x1, x0]
    3990:	ldr	w1, [sp, #3448]
    3994:	cmp	w1, w0
    3998:	b.gt	38d0 <mainSort+0xc10>
    399c:	ldrsw	x0, [sp, #3424]
    39a0:	lsl	x0, x0, #2
    39a4:	add	x1, sp, #0x440
    39a8:	ldr	w0, [x1, x0]
    39ac:	sub	w1, w0, #0x1
    39b0:	ldrsw	x0, [sp, #3424]
    39b4:	lsl	x0, x0, #2
    39b8:	add	x2, sp, #0x40
    39bc:	ldr	w0, [x2, x0]
    39c0:	cmp	w1, w0
    39c4:	b.eq	3a08 <mainSort+0xd48>  // b.none
    39c8:	ldrsw	x0, [sp, #3424]
    39cc:	lsl	x0, x0, #2
    39d0:	add	x1, sp, #0x440
    39d4:	ldr	w0, [x1, x0]
    39d8:	cmp	w0, #0x0
    39dc:	b.ne	3a00 <mainSort+0xd40>  // b.any
    39e0:	ldrsw	x0, [sp, #3424]
    39e4:	lsl	x0, x0, #2
    39e8:	add	x1, sp, #0x40
    39ec:	ldr	w1, [x1, x0]
    39f0:	ldr	w0, [sp, #28]
    39f4:	sub	w0, w0, #0x1
    39f8:	cmp	w1, w0
    39fc:	b.eq	3a08 <mainSort+0xd48>  // b.none
    3a00:	mov	w0, #0x3ef                 	// #1007
    3a04:	bl	0 <BZ2_bz__AssertH__fail>
    3a08:	str	wzr, [sp, #3448]
    3a0c:	b	3a68 <mainSort+0xda8>
    3a10:	ldr	w0, [sp, #3448]
    3a14:	lsl	w1, w0, #8
    3a18:	ldr	w0, [sp, #3424]
    3a1c:	add	w0, w1, w0
    3a20:	sxtw	x0, w0
    3a24:	lsl	x0, x0, #2
    3a28:	ldr	x1, [sp, #32]
    3a2c:	add	x0, x1, x0
    3a30:	ldr	w1, [x0]
    3a34:	ldr	w0, [sp, #3448]
    3a38:	lsl	w2, w0, #8
    3a3c:	ldr	w0, [sp, #3424]
    3a40:	add	w0, w2, w0
    3a44:	sxtw	x0, w0
    3a48:	lsl	x0, x0, #2
    3a4c:	ldr	x2, [sp, #32]
    3a50:	add	x0, x2, x0
    3a54:	orr	w1, w1, #0x200000
    3a58:	str	w1, [x0]
    3a5c:	ldr	w0, [sp, #3448]
    3a60:	add	w0, w0, #0x1
    3a64:	str	w0, [sp, #3448]
    3a68:	ldr	w0, [sp, #3448]
    3a6c:	cmp	w0, #0xff
    3a70:	b.le	3a10 <mainSort+0xd50>
    3a74:	ldrsw	x0, [sp, #3424]
    3a78:	add	x1, sp, #0x840
    3a7c:	mov	w2, #0x1                   	// #1
    3a80:	strb	w2, [x1, x0]
    3a84:	ldr	w0, [sp, #3452]
    3a88:	cmp	w0, #0xfe
    3a8c:	b.gt	3bd8 <mainSort+0xf18>
    3a90:	ldr	w0, [sp, #3424]
    3a94:	lsl	w0, w0, #8
    3a98:	sxtw	x0, w0
    3a9c:	lsl	x0, x0, #2
    3aa0:	ldr	x1, [sp, #32]
    3aa4:	add	x0, x1, x0
    3aa8:	ldr	w0, [x0]
    3aac:	and	w0, w0, #0xffdfffff
    3ab0:	str	w0, [sp, #3420]
    3ab4:	ldr	w0, [sp, #3424]
    3ab8:	add	w0, w0, #0x1
    3abc:	lsl	w0, w0, #8
    3ac0:	sxtw	x0, w0
    3ac4:	lsl	x0, x0, #2
    3ac8:	ldr	x1, [sp, #32]
    3acc:	add	x0, x1, x0
    3ad0:	ldr	w0, [x0]
    3ad4:	and	w1, w0, #0xffdfffff
    3ad8:	ldr	w0, [sp, #3420]
    3adc:	sub	w0, w1, w0
    3ae0:	str	w0, [sp, #3416]
    3ae4:	str	wzr, [sp, #3428]
    3ae8:	b	3af8 <mainSort+0xe38>
    3aec:	ldr	w0, [sp, #3428]
    3af0:	add	w0, w0, #0x1
    3af4:	str	w0, [sp, #3428]
    3af8:	ldr	w0, [sp, #3428]
    3afc:	ldr	w1, [sp, #3416]
    3b00:	asr	w1, w1, w0
    3b04:	mov	w0, #0xfffe                	// #65534
    3b08:	cmp	w1, w0
    3b0c:	b.gt	3aec <mainSort+0xe2c>
    3b10:	ldr	w0, [sp, #3416]
    3b14:	sub	w0, w0, #0x1
    3b18:	str	w0, [sp, #3448]
    3b1c:	b	3ba8 <mainSort+0xee8>
    3b20:	ldr	w1, [sp, #3420]
    3b24:	ldr	w0, [sp, #3448]
    3b28:	add	w0, w1, w0
    3b2c:	sxtw	x0, w0
    3b30:	lsl	x0, x0, #2
    3b34:	ldr	x1, [sp, #56]
    3b38:	add	x0, x1, x0
    3b3c:	ldr	w0, [x0]
    3b40:	str	w0, [sp, #3412]
    3b44:	ldr	w0, [sp, #3428]
    3b48:	ldr	w1, [sp, #3448]
    3b4c:	asr	w0, w1, w0
    3b50:	strh	w0, [sp, #3410]
    3b54:	ldrsw	x0, [sp, #3412]
    3b58:	lsl	x0, x0, #1
    3b5c:	ldr	x1, [sp, #40]
    3b60:	add	x0, x1, x0
    3b64:	ldrh	w1, [sp, #3410]
    3b68:	strh	w1, [x0]
    3b6c:	ldr	w0, [sp, #3412]
    3b70:	cmp	w0, #0x21
    3b74:	b.gt	3b9c <mainSort+0xedc>
    3b78:	ldr	w1, [sp, #3412]
    3b7c:	ldr	w0, [sp, #28]
    3b80:	add	w0, w1, w0
    3b84:	sxtw	x0, w0
    3b88:	lsl	x0, x0, #1
    3b8c:	ldr	x1, [sp, #40]
    3b90:	add	x0, x1, x0
    3b94:	ldrh	w1, [sp, #3410]
    3b98:	strh	w1, [x0]
    3b9c:	ldr	w0, [sp, #3448]
    3ba0:	sub	w0, w0, #0x1
    3ba4:	str	w0, [sp, #3448]
    3ba8:	ldr	w0, [sp, #3448]
    3bac:	cmp	w0, #0x0
    3bb0:	b.ge	3b20 <mainSort+0xe60>  // b.tcont
    3bb4:	ldr	w0, [sp, #3416]
    3bb8:	sub	w1, w0, #0x1
    3bbc:	ldr	w0, [sp, #3428]
    3bc0:	asr	w1, w1, w0
    3bc4:	mov	w0, #0xffff                	// #65535
    3bc8:	cmp	w1, w0
    3bcc:	b.le	3bd8 <mainSort+0xf18>
    3bd0:	mov	w0, #0x3ea                 	// #1002
    3bd4:	bl	0 <BZ2_bz__AssertH__fail>
    3bd8:	ldr	w0, [sp, #3452]
    3bdc:	add	w0, w0, #0x1
    3be0:	str	w0, [sp, #3452]
    3be4:	ldr	w0, [sp, #3452]
    3be8:	cmp	w0, #0xff
    3bec:	b.le	3568 <mainSort+0x8a8>
    3bf0:	ldr	w0, [sp, #24]
    3bf4:	cmp	w0, #0x3
    3bf8:	b.le	3c38 <mainSort+0xf78>
    3bfc:	adrp	x0, 0 <stderr>
    3c00:	add	x0, x0, #0x0
    3c04:	ldr	x5, [x0]
    3c08:	ldr	w1, [sp, #28]
    3c0c:	ldr	w0, [sp, #3440]
    3c10:	sub	w0, w1, w0
    3c14:	mov	w4, w0
    3c18:	ldr	w3, [sp, #3440]
    3c1c:	ldr	w2, [sp, #28]
    3c20:	adrp	x0, 0 <fallbackSimpleSort>
    3c24:	add	x1, x0, #0x0
    3c28:	mov	x0, x5
    3c2c:	bl	0 <fprintf>
    3c30:	b	3c38 <mainSort+0xf78>
    3c34:	nop
    3c38:	ldp	x29, x30, [sp]
    3c3c:	add	sp, sp, #0xd80
    3c40:	ret

0000000000003c44 <BZ2_blockSort>:
    3c44:	stp	x29, x30, [sp, #-96]!
    3c48:	mov	x29, sp
    3c4c:	str	x0, [sp, #24]
    3c50:	ldr	x0, [sp, #24]
    3c54:	ldr	x0, [x0, #56]
    3c58:	str	x0, [sp, #80]
    3c5c:	ldr	x0, [sp, #24]
    3c60:	ldr	x0, [x0, #64]
    3c64:	str	x0, [sp, #72]
    3c68:	ldr	x0, [sp, #24]
    3c6c:	ldr	x0, [x0, #40]
    3c70:	str	x0, [sp, #64]
    3c74:	ldr	x0, [sp, #24]
    3c78:	ldr	w0, [x0, #108]
    3c7c:	str	w0, [sp, #60]
    3c80:	ldr	x0, [sp, #24]
    3c84:	ldr	w0, [x0, #656]
    3c88:	str	w0, [sp, #56]
    3c8c:	ldr	x0, [sp, #24]
    3c90:	ldr	w0, [x0, #88]
    3c94:	str	w0, [sp, #92]
    3c98:	ldr	w1, [sp, #60]
    3c9c:	mov	w0, #0x270f                	// #9999
    3ca0:	cmp	w1, w0
    3ca4:	b.gt	3cd4 <BZ2_blockSort+0x90>
    3ca8:	ldr	x0, [sp, #24]
    3cac:	ldr	x5, [x0, #24]
    3cb0:	ldr	x0, [sp, #24]
    3cb4:	ldr	x0, [x0, #32]
    3cb8:	ldr	w4, [sp, #56]
    3cbc:	ldr	w3, [sp, #60]
    3cc0:	ldr	x2, [sp, #64]
    3cc4:	mov	x1, x0
    3cc8:	mov	x0, x5
    3ccc:	bl	9a4 <fallbackSort>
    3cd0:	b	3e5c <BZ2_blockSort+0x218>
    3cd4:	ldr	w0, [sp, #60]
    3cd8:	add	w0, w0, #0x22
    3cdc:	str	w0, [sp, #88]
    3ce0:	ldr	w0, [sp, #88]
    3ce4:	and	w0, w0, #0x1
    3ce8:	cmp	w0, #0x0
    3cec:	b.eq	3cfc <BZ2_blockSort+0xb8>  // b.none
    3cf0:	ldr	w0, [sp, #88]
    3cf4:	add	w0, w0, #0x1
    3cf8:	str	w0, [sp, #88]
    3cfc:	ldrsw	x0, [sp, #88]
    3d00:	ldr	x1, [sp, #72]
    3d04:	add	x0, x1, x0
    3d08:	str	x0, [sp, #48]
    3d0c:	ldr	w0, [sp, #92]
    3d10:	cmp	w0, #0x0
    3d14:	b.gt	3d20 <BZ2_blockSort+0xdc>
    3d18:	mov	w0, #0x1                   	// #1
    3d1c:	str	w0, [sp, #92]
    3d20:	ldr	w0, [sp, #92]
    3d24:	cmp	w0, #0x64
    3d28:	b.le	3d34 <BZ2_blockSort+0xf0>
    3d2c:	mov	w0, #0x64                  	// #100
    3d30:	str	w0, [sp, #92]
    3d34:	ldr	w0, [sp, #92]
    3d38:	sub	w0, w0, #0x1
    3d3c:	mov	w1, #0x5556                	// #21846
    3d40:	movk	w1, #0x5555, lsl #16
    3d44:	smull	x1, w0, w1
    3d48:	lsr	x1, x1, #32
    3d4c:	asr	w0, w0, #31
    3d50:	sub	w0, w1, w0
    3d54:	ldr	w1, [sp, #60]
    3d58:	mul	w0, w1, w0
    3d5c:	str	w0, [sp, #44]
    3d60:	ldr	w0, [sp, #44]
    3d64:	str	w0, [sp, #40]
    3d68:	add	x0, sp, #0x28
    3d6c:	mov	x6, x0
    3d70:	ldr	w5, [sp, #56]
    3d74:	ldr	w4, [sp, #60]
    3d78:	ldr	x3, [sp, #64]
    3d7c:	ldr	x2, [sp, #48]
    3d80:	ldr	x1, [sp, #72]
    3d84:	ldr	x0, [sp, #80]
    3d88:	bl	2cc0 <mainSort>
    3d8c:	ldr	w0, [sp, #56]
    3d90:	cmp	w0, #0x2
    3d94:	b.le	3df8 <BZ2_blockSort+0x1b4>
    3d98:	adrp	x0, 0 <stderr>
    3d9c:	add	x0, x0, #0x0
    3da0:	ldr	x4, [x0]
    3da4:	ldr	w0, [sp, #40]
    3da8:	ldr	w1, [sp, #44]
    3dac:	sub	w2, w1, w0
    3db0:	ldr	w0, [sp, #40]
    3db4:	ldr	w1, [sp, #44]
    3db8:	sub	w0, w1, w0
    3dbc:	scvtf	s1, w0
    3dc0:	ldr	w0, [sp, #60]
    3dc4:	cmp	w0, #0x0
    3dc8:	b.eq	3dd8 <BZ2_blockSort+0x194>  // b.none
    3dcc:	ldr	s0, [sp, #60]
    3dd0:	scvtf	s0, s0
    3dd4:	b	3ddc <BZ2_blockSort+0x198>
    3dd8:	fmov	s0, #1.000000000000000000e+00
    3ddc:	fdiv	s0, s1, s0
    3de0:	fcvt	d0, s0
    3de4:	ldr	w3, [sp, #60]
    3de8:	adrp	x0, 0 <fallbackSimpleSort>
    3dec:	add	x1, x0, #0x0
    3df0:	mov	x0, x4
    3df4:	bl	0 <fprintf>
    3df8:	ldr	w0, [sp, #40]
    3dfc:	cmp	w0, #0x0
    3e00:	b.ge	3e5c <BZ2_blockSort+0x218>  // b.tcont
    3e04:	ldr	w0, [sp, #56]
    3e08:	cmp	w0, #0x1
    3e0c:	b.le	3e34 <BZ2_blockSort+0x1f0>
    3e10:	adrp	x0, 0 <stderr>
    3e14:	add	x0, x0, #0x0
    3e18:	ldr	x0, [x0]
    3e1c:	mov	x3, x0
    3e20:	mov	x2, #0x35                  	// #53
    3e24:	mov	x1, #0x1                   	// #1
    3e28:	adrp	x0, 0 <fallbackSimpleSort>
    3e2c:	add	x0, x0, #0x0
    3e30:	bl	0 <fwrite>
    3e34:	ldr	x0, [sp, #24]
    3e38:	ldr	x5, [x0, #24]
    3e3c:	ldr	x0, [sp, #24]
    3e40:	ldr	x0, [x0, #32]
    3e44:	ldr	w4, [sp, #56]
    3e48:	ldr	w3, [sp, #60]
    3e4c:	ldr	x2, [sp, #64]
    3e50:	mov	x1, x0
    3e54:	mov	x0, x5
    3e58:	bl	9a4 <fallbackSort>
    3e5c:	ldr	x0, [sp, #24]
    3e60:	mov	w1, #0xffffffff            	// #-1
    3e64:	str	w1, [x0, #48]
    3e68:	str	wzr, [sp, #88]
    3e6c:	b	3ea8 <BZ2_blockSort+0x264>
    3e70:	ldrsw	x0, [sp, #88]
    3e74:	lsl	x0, x0, #2
    3e78:	ldr	x1, [sp, #80]
    3e7c:	add	x0, x1, x0
    3e80:	ldr	w0, [x0]
    3e84:	cmp	w0, #0x0
    3e88:	b.ne	3e9c <BZ2_blockSort+0x258>  // b.any
    3e8c:	ldr	x0, [sp, #24]
    3e90:	ldr	w1, [sp, #88]
    3e94:	str	w1, [x0, #48]
    3e98:	b	3ebc <BZ2_blockSort+0x278>
    3e9c:	ldr	w0, [sp, #88]
    3ea0:	add	w0, w0, #0x1
    3ea4:	str	w0, [sp, #88]
    3ea8:	ldr	x0, [sp, #24]
    3eac:	ldr	w0, [x0, #108]
    3eb0:	ldr	w1, [sp, #88]
    3eb4:	cmp	w1, w0
    3eb8:	b.lt	3e70 <BZ2_blockSort+0x22c>  // b.tstop
    3ebc:	ldr	x0, [sp, #24]
    3ec0:	ldr	w0, [x0, #48]
    3ec4:	cmn	w0, #0x1
    3ec8:	b.ne	3ed4 <BZ2_blockSort+0x290>  // b.any
    3ecc:	mov	w0, #0x3eb                 	// #1003
    3ed0:	bl	0 <BZ2_bz__AssertH__fail>
    3ed4:	nop
    3ed8:	ldp	x29, x30, [sp], #96
    3edc:	ret

huffman.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_hbMakeCodeLengths>:
   0:	mov	x12, #0x14b0                	// #5296
   4:	sub	sp, sp, x12
   8:	stp	x29, x30, [sp]
   c:	mov	x29, sp
  10:	str	x0, [sp, #40]
  14:	str	x1, [sp, #32]
  18:	str	w2, [sp, #28]
  1c:	str	w3, [sp, #24]
  20:	str	wzr, [sp, #5284]
  24:	b	88 <BZ2_hbMakeCodeLengths+0x88>
  28:	ldrsw	x0, [sp, #5284]
  2c:	lsl	x0, x0, #2
  30:	ldr	x1, [sp, #32]
  34:	add	x0, x1, x0
  38:	ldr	w0, [x0]
  3c:	cmp	w0, #0x0
  40:	b.eq	60 <BZ2_hbMakeCodeLengths+0x60>  // b.none
  44:	ldrsw	x0, [sp, #5284]
  48:	lsl	x0, x0, #2
  4c:	ldr	x1, [sp, #32]
  50:	add	x0, x1, x0
  54:	ldr	w0, [x0]
  58:	lsl	w0, w0, #8
  5c:	b	64 <BZ2_hbMakeCodeLengths+0x64>
  60:	mov	w0, #0x100                 	// #256
  64:	ldr	w1, [sp, #5284]
  68:	add	w1, w1, #0x1
  6c:	sxtw	x1, w1
  70:	lsl	x1, x1, #2
  74:	add	x2, sp, #0x848
  78:	str	w0, [x2, x1]
  7c:	ldr	w0, [sp, #5284]
  80:	add	w0, w0, #0x1
  84:	str	w0, [sp, #5284]
  88:	ldr	w1, [sp, #5284]
  8c:	ldr	w0, [sp, #28]
  90:	cmp	w1, w0
  94:	b.lt	28 <BZ2_hbMakeCodeLengths+0x28>  // b.tstop
  98:	ldr	w0, [sp, #28]
  9c:	str	w0, [sp, #5292]
  a0:	str	wzr, [sp, #5288]
  a4:	str	wzr, [sp, #4184]
  a8:	str	wzr, [sp, #2120]
  ac:	mov	w0, #0xfffffffe            	// #-2
  b0:	str	w0, [sp, #56]
  b4:	mov	w0, #0x1                   	// #1
  b8:	str	w0, [sp, #5284]
  bc:	b	1c0 <BZ2_hbMakeCodeLengths+0x1c0>
  c0:	ldrsw	x0, [sp, #5284]
  c4:	lsl	x0, x0, #2
  c8:	add	x1, sp, #0x38
  cc:	mov	w2, #0xffffffff            	// #-1
  d0:	str	w2, [x1, x0]
  d4:	ldr	w0, [sp, #5288]
  d8:	add	w0, w0, #0x1
  dc:	str	w0, [sp, #5288]
  e0:	ldrsw	x0, [sp, #5288]
  e4:	lsl	x0, x0, #2
  e8:	add	x1, sp, #0x1, lsl #12
  ec:	add	x1, x1, #0x58
  f0:	ldr	w2, [sp, #5284]
  f4:	str	w2, [x1, x0]
  f8:	ldr	w0, [sp, #5288]
  fc:	str	w0, [sp, #5268]
 100:	ldrsw	x0, [sp, #5268]
 104:	lsl	x0, x0, #2
 108:	add	x1, sp, #0x1, lsl #12
 10c:	add	x1, x1, #0x58
 110:	ldr	w0, [x1, x0]
 114:	str	w0, [sp, #5224]
 118:	b	158 <BZ2_hbMakeCodeLengths+0x158>
 11c:	ldr	w0, [sp, #5268]
 120:	asr	w0, w0, #1
 124:	sxtw	x0, w0
 128:	lsl	x0, x0, #2
 12c:	add	x1, sp, #0x1, lsl #12
 130:	add	x1, x1, #0x58
 134:	ldr	w2, [x1, x0]
 138:	ldrsw	x0, [sp, #5268]
 13c:	lsl	x0, x0, #2
 140:	add	x1, sp, #0x1, lsl #12
 144:	add	x1, x1, #0x58
 148:	str	w2, [x1, x0]
 14c:	ldr	w0, [sp, #5268]
 150:	asr	w0, w0, #1
 154:	str	w0, [sp, #5268]
 158:	ldrsw	x0, [sp, #5224]
 15c:	lsl	x0, x0, #2
 160:	add	x1, sp, #0x848
 164:	ldr	w1, [x1, x0]
 168:	ldr	w0, [sp, #5268]
 16c:	asr	w0, w0, #1
 170:	sxtw	x0, w0
 174:	lsl	x0, x0, #2
 178:	add	x2, sp, #0x1, lsl #12
 17c:	add	x2, x2, #0x58
 180:	ldr	w0, [x2, x0]
 184:	sxtw	x0, w0
 188:	lsl	x0, x0, #2
 18c:	add	x2, sp, #0x848
 190:	ldr	w0, [x2, x0]
 194:	cmp	w1, w0
 198:	b.lt	11c <BZ2_hbMakeCodeLengths+0x11c>  // b.tstop
 19c:	ldrsw	x0, [sp, #5268]
 1a0:	lsl	x0, x0, #2
 1a4:	add	x1, sp, #0x1, lsl #12
 1a8:	add	x1, x1, #0x58
 1ac:	ldr	w2, [sp, #5224]
 1b0:	str	w2, [x1, x0]
 1b4:	ldr	w0, [sp, #5284]
 1b8:	add	w0, w0, #0x1
 1bc:	str	w0, [sp, #5284]
 1c0:	ldr	w1, [sp, #5284]
 1c4:	ldr	w0, [sp, #28]
 1c8:	cmp	w1, w0
 1cc:	b.le	c0 <BZ2_hbMakeCodeLengths+0xc0>
 1d0:	ldr	w0, [sp, #5288]
 1d4:	cmp	w0, #0x103
 1d8:	b.le	664 <BZ2_hbMakeCodeLengths+0x664>
 1dc:	mov	w0, #0x7d1                 	// #2001
 1e0:	bl	0 <BZ2_bz__AssertH__fail>
 1e4:	b	664 <BZ2_hbMakeCodeLengths+0x664>
 1e8:	ldr	w0, [sp, #4188]
 1ec:	str	w0, [sp, #5244]
 1f0:	ldrsw	x0, [sp, #5288]
 1f4:	lsl	x0, x0, #2
 1f8:	add	x1, sp, #0x1, lsl #12
 1fc:	add	x1, x1, #0x58
 200:	ldr	w0, [x1, x0]
 204:	str	w0, [sp, #4188]
 208:	ldr	w0, [sp, #5288]
 20c:	sub	w0, w0, #0x1
 210:	str	w0, [sp, #5288]
 214:	mov	w0, #0x1                   	// #1
 218:	str	w0, [sp, #5264]
 21c:	ldrsw	x0, [sp, #5264]
 220:	lsl	x0, x0, #2
 224:	add	x1, sp, #0x1, lsl #12
 228:	add	x1, x1, #0x58
 22c:	ldr	w0, [x1, x0]
 230:	str	w0, [sp, #5240]
 234:	ldr	w0, [sp, #5264]
 238:	lsl	w0, w0, #1
 23c:	str	w0, [sp, #5260]
 240:	ldr	w1, [sp, #5260]
 244:	ldr	w0, [sp, #5288]
 248:	cmp	w1, w0
 24c:	b.gt	334 <BZ2_hbMakeCodeLengths+0x334>
 250:	ldr	w1, [sp, #5260]
 254:	ldr	w0, [sp, #5288]
 258:	cmp	w1, w0
 25c:	b.ge	2c4 <BZ2_hbMakeCodeLengths+0x2c4>  // b.tcont
 260:	ldr	w0, [sp, #5260]
 264:	add	w0, w0, #0x1
 268:	sxtw	x0, w0
 26c:	lsl	x0, x0, #2
 270:	add	x1, sp, #0x1, lsl #12
 274:	add	x1, x1, #0x58
 278:	ldr	w0, [x1, x0]
 27c:	sxtw	x0, w0
 280:	lsl	x0, x0, #2
 284:	add	x1, sp, #0x848
 288:	ldr	w1, [x1, x0]
 28c:	ldrsw	x0, [sp, #5260]
 290:	lsl	x0, x0, #2
 294:	add	x2, sp, #0x1, lsl #12
 298:	add	x2, x2, #0x58
 29c:	ldr	w0, [x2, x0]
 2a0:	sxtw	x0, w0
 2a4:	lsl	x0, x0, #2
 2a8:	add	x2, sp, #0x848
 2ac:	ldr	w0, [x2, x0]
 2b0:	cmp	w1, w0
 2b4:	b.ge	2c4 <BZ2_hbMakeCodeLengths+0x2c4>  // b.tcont
 2b8:	ldr	w0, [sp, #5260]
 2bc:	add	w0, w0, #0x1
 2c0:	str	w0, [sp, #5260]
 2c4:	ldrsw	x0, [sp, #5240]
 2c8:	lsl	x0, x0, #2
 2cc:	add	x1, sp, #0x848
 2d0:	ldr	w1, [x1, x0]
 2d4:	ldrsw	x0, [sp, #5260]
 2d8:	lsl	x0, x0, #2
 2dc:	add	x2, sp, #0x1, lsl #12
 2e0:	add	x2, x2, #0x58
 2e4:	ldr	w0, [x2, x0]
 2e8:	sxtw	x0, w0
 2ec:	lsl	x0, x0, #2
 2f0:	add	x2, sp, #0x848
 2f4:	ldr	w0, [x2, x0]
 2f8:	cmp	w1, w0
 2fc:	b.lt	334 <BZ2_hbMakeCodeLengths+0x334>  // b.tstop
 300:	ldrsw	x0, [sp, #5260]
 304:	lsl	x0, x0, #2
 308:	add	x1, sp, #0x1, lsl #12
 30c:	add	x1, x1, #0x58
 310:	ldr	w2, [x1, x0]
 314:	ldrsw	x0, [sp, #5264]
 318:	lsl	x0, x0, #2
 31c:	add	x1, sp, #0x1, lsl #12
 320:	add	x1, x1, #0x58
 324:	str	w2, [x1, x0]
 328:	ldr	w0, [sp, #5260]
 32c:	str	w0, [sp, #5264]
 330:	b	234 <BZ2_hbMakeCodeLengths+0x234>
 334:	nop
 338:	ldrsw	x0, [sp, #5264]
 33c:	lsl	x0, x0, #2
 340:	add	x1, sp, #0x1, lsl #12
 344:	add	x1, x1, #0x58
 348:	ldr	w2, [sp, #5240]
 34c:	str	w2, [x1, x0]
 350:	ldr	w0, [sp, #4188]
 354:	str	w0, [sp, #5236]
 358:	ldrsw	x0, [sp, #5288]
 35c:	lsl	x0, x0, #2
 360:	add	x1, sp, #0x1, lsl #12
 364:	add	x1, x1, #0x58
 368:	ldr	w0, [x1, x0]
 36c:	str	w0, [sp, #4188]
 370:	ldr	w0, [sp, #5288]
 374:	sub	w0, w0, #0x1
 378:	str	w0, [sp, #5288]
 37c:	mov	w0, #0x1                   	// #1
 380:	str	w0, [sp, #5256]
 384:	ldrsw	x0, [sp, #5256]
 388:	lsl	x0, x0, #2
 38c:	add	x1, sp, #0x1, lsl #12
 390:	add	x1, x1, #0x58
 394:	ldr	w0, [x1, x0]
 398:	str	w0, [sp, #5232]
 39c:	ldr	w0, [sp, #5256]
 3a0:	lsl	w0, w0, #1
 3a4:	str	w0, [sp, #5252]
 3a8:	ldr	w1, [sp, #5252]
 3ac:	ldr	w0, [sp, #5288]
 3b0:	cmp	w1, w0
 3b4:	b.gt	49c <BZ2_hbMakeCodeLengths+0x49c>
 3b8:	ldr	w1, [sp, #5252]
 3bc:	ldr	w0, [sp, #5288]
 3c0:	cmp	w1, w0
 3c4:	b.ge	42c <BZ2_hbMakeCodeLengths+0x42c>  // b.tcont
 3c8:	ldr	w0, [sp, #5252]
 3cc:	add	w0, w0, #0x1
 3d0:	sxtw	x0, w0
 3d4:	lsl	x0, x0, #2
 3d8:	add	x1, sp, #0x1, lsl #12
 3dc:	add	x1, x1, #0x58
 3e0:	ldr	w0, [x1, x0]
 3e4:	sxtw	x0, w0
 3e8:	lsl	x0, x0, #2
 3ec:	add	x1, sp, #0x848
 3f0:	ldr	w1, [x1, x0]
 3f4:	ldrsw	x0, [sp, #5252]
 3f8:	lsl	x0, x0, #2
 3fc:	add	x2, sp, #0x1, lsl #12
 400:	add	x2, x2, #0x58
 404:	ldr	w0, [x2, x0]
 408:	sxtw	x0, w0
 40c:	lsl	x0, x0, #2
 410:	add	x2, sp, #0x848
 414:	ldr	w0, [x2, x0]
 418:	cmp	w1, w0
 41c:	b.ge	42c <BZ2_hbMakeCodeLengths+0x42c>  // b.tcont
 420:	ldr	w0, [sp, #5252]
 424:	add	w0, w0, #0x1
 428:	str	w0, [sp, #5252]
 42c:	ldrsw	x0, [sp, #5232]
 430:	lsl	x0, x0, #2
 434:	add	x1, sp, #0x848
 438:	ldr	w1, [x1, x0]
 43c:	ldrsw	x0, [sp, #5252]
 440:	lsl	x0, x0, #2
 444:	add	x2, sp, #0x1, lsl #12
 448:	add	x2, x2, #0x58
 44c:	ldr	w0, [x2, x0]
 450:	sxtw	x0, w0
 454:	lsl	x0, x0, #2
 458:	add	x2, sp, #0x848
 45c:	ldr	w0, [x2, x0]
 460:	cmp	w1, w0
 464:	b.lt	49c <BZ2_hbMakeCodeLengths+0x49c>  // b.tstop
 468:	ldrsw	x0, [sp, #5252]
 46c:	lsl	x0, x0, #2
 470:	add	x1, sp, #0x1, lsl #12
 474:	add	x1, x1, #0x58
 478:	ldr	w2, [x1, x0]
 47c:	ldrsw	x0, [sp, #5256]
 480:	lsl	x0, x0, #2
 484:	add	x1, sp, #0x1, lsl #12
 488:	add	x1, x1, #0x58
 48c:	str	w2, [x1, x0]
 490:	ldr	w0, [sp, #5252]
 494:	str	w0, [sp, #5256]
 498:	b	39c <BZ2_hbMakeCodeLengths+0x39c>
 49c:	nop
 4a0:	ldrsw	x0, [sp, #5256]
 4a4:	lsl	x0, x0, #2
 4a8:	add	x1, sp, #0x1, lsl #12
 4ac:	add	x1, x1, #0x58
 4b0:	ldr	w2, [sp, #5232]
 4b4:	str	w2, [x1, x0]
 4b8:	ldr	w0, [sp, #5292]
 4bc:	add	w0, w0, #0x1
 4c0:	str	w0, [sp, #5292]
 4c4:	ldrsw	x0, [sp, #5236]
 4c8:	lsl	x0, x0, #2
 4cc:	add	x1, sp, #0x38
 4d0:	ldr	w2, [sp, #5292]
 4d4:	str	w2, [x1, x0]
 4d8:	ldrsw	x0, [sp, #5236]
 4dc:	lsl	x0, x0, #2
 4e0:	add	x1, sp, #0x38
 4e4:	ldr	w2, [x1, x0]
 4e8:	ldrsw	x0, [sp, #5244]
 4ec:	lsl	x0, x0, #2
 4f0:	add	x1, sp, #0x38
 4f4:	str	w2, [x1, x0]
 4f8:	ldrsw	x0, [sp, #5244]
 4fc:	lsl	x0, x0, #2
 500:	add	x1, sp, #0x848
 504:	ldr	w0, [x1, x0]
 508:	and	w1, w0, #0xffffff00
 50c:	ldrsw	x0, [sp, #5236]
 510:	lsl	x0, x0, #2
 514:	add	x2, sp, #0x848
 518:	ldr	w0, [x2, x0]
 51c:	and	w0, w0, #0xffffff00
 520:	add	w2, w1, w0
 524:	ldrsw	x0, [sp, #5236]
 528:	lsl	x0, x0, #2
 52c:	add	x1, sp, #0x848
 530:	ldr	w0, [x1, x0]
 534:	and	w1, w0, #0xff
 538:	ldrsw	x0, [sp, #5244]
 53c:	lsl	x0, x0, #2
 540:	add	x3, sp, #0x848
 544:	ldr	w0, [x3, x0]
 548:	and	w0, w0, #0xff
 54c:	cmp	w1, w0
 550:	csel	w0, w1, w0, ge  // ge = tcont
 554:	add	w0, w0, #0x1
 558:	orr	w0, w2, w0
 55c:	mov	w2, w0
 560:	ldrsw	x0, [sp, #5292]
 564:	lsl	x0, x0, #2
 568:	add	x1, sp, #0x848
 56c:	str	w2, [x1, x0]
 570:	ldrsw	x0, [sp, #5292]
 574:	lsl	x0, x0, #2
 578:	add	x1, sp, #0x38
 57c:	mov	w2, #0xffffffff            	// #-1
 580:	str	w2, [x1, x0]
 584:	ldr	w0, [sp, #5288]
 588:	add	w0, w0, #0x1
 58c:	str	w0, [sp, #5288]
 590:	ldrsw	x0, [sp, #5288]
 594:	lsl	x0, x0, #2
 598:	add	x1, sp, #0x1, lsl #12
 59c:	add	x1, x1, #0x58
 5a0:	ldr	w2, [sp, #5292]
 5a4:	str	w2, [x1, x0]
 5a8:	ldr	w0, [sp, #5288]
 5ac:	str	w0, [sp, #5248]
 5b0:	ldrsw	x0, [sp, #5248]
 5b4:	lsl	x0, x0, #2
 5b8:	add	x1, sp, #0x1, lsl #12
 5bc:	add	x1, x1, #0x58
 5c0:	ldr	w0, [x1, x0]
 5c4:	str	w0, [sp, #5228]
 5c8:	b	608 <BZ2_hbMakeCodeLengths+0x608>
 5cc:	ldr	w0, [sp, #5248]
 5d0:	asr	w0, w0, #1
 5d4:	sxtw	x0, w0
 5d8:	lsl	x0, x0, #2
 5dc:	add	x1, sp, #0x1, lsl #12
 5e0:	add	x1, x1, #0x58
 5e4:	ldr	w2, [x1, x0]
 5e8:	ldrsw	x0, [sp, #5248]
 5ec:	lsl	x0, x0, #2
 5f0:	add	x1, sp, #0x1, lsl #12
 5f4:	add	x1, x1, #0x58
 5f8:	str	w2, [x1, x0]
 5fc:	ldr	w0, [sp, #5248]
 600:	asr	w0, w0, #1
 604:	str	w0, [sp, #5248]
 608:	ldrsw	x0, [sp, #5228]
 60c:	lsl	x0, x0, #2
 610:	add	x1, sp, #0x848
 614:	ldr	w1, [x1, x0]
 618:	ldr	w0, [sp, #5248]
 61c:	asr	w0, w0, #1
 620:	sxtw	x0, w0
 624:	lsl	x0, x0, #2
 628:	add	x2, sp, #0x1, lsl #12
 62c:	add	x2, x2, #0x58
 630:	ldr	w0, [x2, x0]
 634:	sxtw	x0, w0
 638:	lsl	x0, x0, #2
 63c:	add	x2, sp, #0x848
 640:	ldr	w0, [x2, x0]
 644:	cmp	w1, w0
 648:	b.lt	5cc <BZ2_hbMakeCodeLengths+0x5cc>  // b.tstop
 64c:	ldrsw	x0, [sp, #5248]
 650:	lsl	x0, x0, #2
 654:	add	x1, sp, #0x1, lsl #12
 658:	add	x1, x1, #0x58
 65c:	ldr	w2, [sp, #5228]
 660:	str	w2, [x1, x0]
 664:	ldr	w0, [sp, #5288]
 668:	cmp	w0, #0x1
 66c:	b.gt	1e8 <BZ2_hbMakeCodeLengths+0x1e8>
 670:	ldr	w0, [sp, #5292]
 674:	cmp	w0, #0x203
 678:	b.le	684 <BZ2_hbMakeCodeLengths+0x684>
 67c:	mov	w0, #0x7d2                 	// #2002
 680:	bl	0 <BZ2_bz__AssertH__fail>
 684:	add	x0, sp, #0x1, lsl #12
 688:	strb	wzr, [x0, #1179]
 68c:	mov	w0, #0x1                   	// #1
 690:	str	w0, [sp, #5284]
 694:	b	724 <BZ2_hbMakeCodeLengths+0x724>
 698:	str	wzr, [sp, #5280]
 69c:	ldr	w0, [sp, #5284]
 6a0:	str	w0, [sp, #5276]
 6a4:	b	6c8 <BZ2_hbMakeCodeLengths+0x6c8>
 6a8:	ldrsw	x0, [sp, #5276]
 6ac:	lsl	x0, x0, #2
 6b0:	add	x1, sp, #0x38
 6b4:	ldr	w0, [x1, x0]
 6b8:	str	w0, [sp, #5276]
 6bc:	ldr	w0, [sp, #5280]
 6c0:	add	w0, w0, #0x1
 6c4:	str	w0, [sp, #5280]
 6c8:	ldrsw	x0, [sp, #5276]
 6cc:	lsl	x0, x0, #2
 6d0:	add	x1, sp, #0x38
 6d4:	ldr	w0, [x1, x0]
 6d8:	cmp	w0, #0x0
 6dc:	b.ge	6a8 <BZ2_hbMakeCodeLengths+0x6a8>  // b.tcont
 6e0:	ldrsw	x0, [sp, #5284]
 6e4:	sub	x0, x0, #0x1
 6e8:	ldr	x1, [sp, #40]
 6ec:	add	x0, x1, x0
 6f0:	ldr	w1, [sp, #5280]
 6f4:	and	w1, w1, #0xff
 6f8:	strb	w1, [x0]
 6fc:	ldr	w1, [sp, #5280]
 700:	ldr	w0, [sp, #24]
 704:	cmp	w1, w0
 708:	b.le	718 <BZ2_hbMakeCodeLengths+0x718>
 70c:	mov	w0, #0x1                   	// #1
 710:	add	x1, sp, #0x1, lsl #12
 714:	strb	w0, [x1, #1179]
 718:	ldr	w0, [sp, #5284]
 71c:	add	w0, w0, #0x1
 720:	str	w0, [sp, #5284]
 724:	ldr	w1, [sp, #5284]
 728:	ldr	w0, [sp, #28]
 72c:	cmp	w1, w0
 730:	b.le	698 <BZ2_hbMakeCodeLengths+0x698>
 734:	add	x0, sp, #0x1, lsl #12
 738:	ldrb	w0, [x0, #1179]
 73c:	cmp	w0, #0x0
 740:	b.eq	7b8 <BZ2_hbMakeCodeLengths+0x7b8>  // b.none
 744:	mov	w0, #0x1                   	// #1
 748:	str	w0, [sp, #5284]
 74c:	b	7a4 <BZ2_hbMakeCodeLengths+0x7a4>
 750:	ldrsw	x0, [sp, #5284]
 754:	lsl	x0, x0, #2
 758:	add	x1, sp, #0x848
 75c:	ldr	w0, [x1, x0]
 760:	asr	w0, w0, #8
 764:	str	w0, [sp, #5280]
 768:	ldr	w0, [sp, #5280]
 76c:	lsr	w1, w0, #31
 770:	add	w0, w1, w0
 774:	asr	w0, w0, #1
 778:	add	w0, w0, #0x1
 77c:	str	w0, [sp, #5280]
 780:	ldr	w0, [sp, #5280]
 784:	lsl	w2, w0, #8
 788:	ldrsw	x0, [sp, #5284]
 78c:	lsl	x0, x0, #2
 790:	add	x1, sp, #0x848
 794:	str	w2, [x1, x0]
 798:	ldr	w0, [sp, #5284]
 79c:	add	w0, w0, #0x1
 7a0:	str	w0, [sp, #5284]
 7a4:	ldr	w1, [sp, #5284]
 7a8:	ldr	w0, [sp, #28]
 7ac:	cmp	w1, w0
 7b0:	b.le	750 <BZ2_hbMakeCodeLengths+0x750>
 7b4:	b	98 <BZ2_hbMakeCodeLengths+0x98>
 7b8:	nop
 7bc:	nop
 7c0:	ldp	x29, x30, [sp]
 7c4:	mov	x12, #0x14b0                	// #5296
 7c8:	add	sp, sp, x12
 7cc:	ret

00000000000007d0 <BZ2_hbAssignCodes>:
 7d0:	sub	sp, sp, #0x30
 7d4:	str	x0, [sp, #24]
 7d8:	str	x1, [sp, #16]
 7dc:	str	w2, [sp, #12]
 7e0:	str	w3, [sp, #8]
 7e4:	str	w4, [sp, #4]
 7e8:	str	wzr, [sp, #40]
 7ec:	ldr	w0, [sp, #12]
 7f0:	str	w0, [sp, #44]
 7f4:	b	878 <BZ2_hbAssignCodes+0xa8>
 7f8:	str	wzr, [sp, #36]
 7fc:	b	850 <BZ2_hbAssignCodes+0x80>
 800:	ldrsw	x0, [sp, #36]
 804:	ldr	x1, [sp, #16]
 808:	add	x0, x1, x0
 80c:	ldrb	w0, [x0]
 810:	mov	w1, w0
 814:	ldr	w0, [sp, #44]
 818:	cmp	w0, w1
 81c:	b.ne	844 <BZ2_hbAssignCodes+0x74>  // b.any
 820:	ldrsw	x0, [sp, #36]
 824:	lsl	x0, x0, #2
 828:	ldr	x1, [sp, #24]
 82c:	add	x0, x1, x0
 830:	ldr	w1, [sp, #40]
 834:	str	w1, [x0]
 838:	ldr	w0, [sp, #40]
 83c:	add	w0, w0, #0x1
 840:	str	w0, [sp, #40]
 844:	ldr	w0, [sp, #36]
 848:	add	w0, w0, #0x1
 84c:	str	w0, [sp, #36]
 850:	ldr	w1, [sp, #36]
 854:	ldr	w0, [sp, #4]
 858:	cmp	w1, w0
 85c:	b.lt	800 <BZ2_hbAssignCodes+0x30>  // b.tstop
 860:	ldr	w0, [sp, #40]
 864:	lsl	w0, w0, #1
 868:	str	w0, [sp, #40]
 86c:	ldr	w0, [sp, #44]
 870:	add	w0, w0, #0x1
 874:	str	w0, [sp, #44]
 878:	ldr	w1, [sp, #44]
 87c:	ldr	w0, [sp, #8]
 880:	cmp	w1, w0
 884:	b.le	7f8 <BZ2_hbAssignCodes+0x28>
 888:	nop
 88c:	nop
 890:	add	sp, sp, #0x30
 894:	ret

0000000000000898 <BZ2_hbCreateDecodeTables>:
 898:	sub	sp, sp, #0x40
 89c:	str	x0, [sp, #40]
 8a0:	str	x1, [sp, #32]
 8a4:	str	x2, [sp, #24]
 8a8:	str	x3, [sp, #16]
 8ac:	str	w4, [sp, #12]
 8b0:	str	w5, [sp, #8]
 8b4:	str	w6, [sp, #4]
 8b8:	str	wzr, [sp, #60]
 8bc:	ldr	w0, [sp, #12]
 8c0:	str	w0, [sp, #56]
 8c4:	b	93c <BZ2_hbCreateDecodeTables+0xa4>
 8c8:	str	wzr, [sp, #52]
 8cc:	b	920 <BZ2_hbCreateDecodeTables+0x88>
 8d0:	ldrsw	x0, [sp, #52]
 8d4:	ldr	x1, [sp, #16]
 8d8:	add	x0, x1, x0
 8dc:	ldrb	w0, [x0]
 8e0:	mov	w1, w0
 8e4:	ldr	w0, [sp, #56]
 8e8:	cmp	w0, w1
 8ec:	b.ne	914 <BZ2_hbCreateDecodeTables+0x7c>  // b.any
 8f0:	ldrsw	x0, [sp, #60]
 8f4:	lsl	x0, x0, #2
 8f8:	ldr	x1, [sp, #24]
 8fc:	add	x0, x1, x0
 900:	ldr	w1, [sp, #52]
 904:	str	w1, [x0]
 908:	ldr	w0, [sp, #60]
 90c:	add	w0, w0, #0x1
 910:	str	w0, [sp, #60]
 914:	ldr	w0, [sp, #52]
 918:	add	w0, w0, #0x1
 91c:	str	w0, [sp, #52]
 920:	ldr	w1, [sp, #52]
 924:	ldr	w0, [sp, #4]
 928:	cmp	w1, w0
 92c:	b.lt	8d0 <BZ2_hbCreateDecodeTables+0x38>  // b.tstop
 930:	ldr	w0, [sp, #56]
 934:	add	w0, w0, #0x1
 938:	str	w0, [sp, #56]
 93c:	ldr	w1, [sp, #56]
 940:	ldr	w0, [sp, #8]
 944:	cmp	w1, w0
 948:	b.le	8c8 <BZ2_hbCreateDecodeTables+0x30>
 94c:	str	wzr, [sp, #56]
 950:	b	974 <BZ2_hbCreateDecodeTables+0xdc>
 954:	ldrsw	x0, [sp, #56]
 958:	lsl	x0, x0, #2
 95c:	ldr	x1, [sp, #32]
 960:	add	x0, x1, x0
 964:	str	wzr, [x0]
 968:	ldr	w0, [sp, #56]
 96c:	add	w0, w0, #0x1
 970:	str	w0, [sp, #56]
 974:	ldr	w0, [sp, #56]
 978:	cmp	w0, #0x16
 97c:	b.le	954 <BZ2_hbCreateDecodeTables+0xbc>
 980:	str	wzr, [sp, #56]
 984:	b	9c4 <BZ2_hbCreateDecodeTables+0x12c>
 988:	ldrsw	x0, [sp, #56]
 98c:	ldr	x1, [sp, #16]
 990:	add	x0, x1, x0
 994:	ldrb	w0, [x0]
 998:	and	x0, x0, #0xff
 99c:	add	x0, x0, #0x1
 9a0:	lsl	x0, x0, #2
 9a4:	ldr	x1, [sp, #32]
 9a8:	add	x0, x1, x0
 9ac:	ldr	w1, [x0]
 9b0:	add	w1, w1, #0x1
 9b4:	str	w1, [x0]
 9b8:	ldr	w0, [sp, #56]
 9bc:	add	w0, w0, #0x1
 9c0:	str	w0, [sp, #56]
 9c4:	ldr	w1, [sp, #56]
 9c8:	ldr	w0, [sp, #4]
 9cc:	cmp	w1, w0
 9d0:	b.lt	988 <BZ2_hbCreateDecodeTables+0xf0>  // b.tstop
 9d4:	mov	w0, #0x1                   	// #1
 9d8:	str	w0, [sp, #56]
 9dc:	b	a30 <BZ2_hbCreateDecodeTables+0x198>
 9e0:	ldrsw	x0, [sp, #56]
 9e4:	lsl	x0, x0, #2
 9e8:	ldr	x1, [sp, #32]
 9ec:	add	x0, x1, x0
 9f0:	ldr	w2, [x0]
 9f4:	ldrsw	x0, [sp, #56]
 9f8:	lsl	x0, x0, #2
 9fc:	sub	x0, x0, #0x4
 a00:	ldr	x1, [sp, #32]
 a04:	add	x0, x1, x0
 a08:	ldr	w1, [x0]
 a0c:	ldrsw	x0, [sp, #56]
 a10:	lsl	x0, x0, #2
 a14:	ldr	x3, [sp, #32]
 a18:	add	x0, x3, x0
 a1c:	add	w1, w2, w1
 a20:	str	w1, [x0]
 a24:	ldr	w0, [sp, #56]
 a28:	add	w0, w0, #0x1
 a2c:	str	w0, [sp, #56]
 a30:	ldr	w0, [sp, #56]
 a34:	cmp	w0, #0x16
 a38:	b.le	9e0 <BZ2_hbCreateDecodeTables+0x148>
 a3c:	str	wzr, [sp, #56]
 a40:	b	a64 <BZ2_hbCreateDecodeTables+0x1cc>
 a44:	ldrsw	x0, [sp, #56]
 a48:	lsl	x0, x0, #2
 a4c:	ldr	x1, [sp, #40]
 a50:	add	x0, x1, x0
 a54:	str	wzr, [x0]
 a58:	ldr	w0, [sp, #56]
 a5c:	add	w0, w0, #0x1
 a60:	str	w0, [sp, #56]
 a64:	ldr	w0, [sp, #56]
 a68:	cmp	w0, #0x16
 a6c:	b.le	a44 <BZ2_hbCreateDecodeTables+0x1ac>
 a70:	str	wzr, [sp, #48]
 a74:	ldr	w0, [sp, #12]
 a78:	str	w0, [sp, #56]
 a7c:	b	af0 <BZ2_hbCreateDecodeTables+0x258>
 a80:	ldrsw	x0, [sp, #56]
 a84:	add	x0, x0, #0x1
 a88:	lsl	x0, x0, #2
 a8c:	ldr	x1, [sp, #32]
 a90:	add	x0, x1, x0
 a94:	ldr	w1, [x0]
 a98:	ldrsw	x0, [sp, #56]
 a9c:	lsl	x0, x0, #2
 aa0:	ldr	x2, [sp, #32]
 aa4:	add	x0, x2, x0
 aa8:	ldr	w0, [x0]
 aac:	sub	w0, w1, w0
 ab0:	ldr	w1, [sp, #48]
 ab4:	add	w0, w1, w0
 ab8:	str	w0, [sp, #48]
 abc:	ldrsw	x0, [sp, #56]
 ac0:	lsl	x0, x0, #2
 ac4:	ldr	x1, [sp, #40]
 ac8:	add	x0, x1, x0
 acc:	ldr	w1, [sp, #48]
 ad0:	sub	w1, w1, #0x1
 ad4:	str	w1, [x0]
 ad8:	ldr	w0, [sp, #48]
 adc:	lsl	w0, w0, #1
 ae0:	str	w0, [sp, #48]
 ae4:	ldr	w0, [sp, #56]
 ae8:	add	w0, w0, #0x1
 aec:	str	w0, [sp, #56]
 af0:	ldr	w1, [sp, #56]
 af4:	ldr	w0, [sp, #8]
 af8:	cmp	w1, w0
 afc:	b.le	a80 <BZ2_hbCreateDecodeTables+0x1e8>
 b00:	ldr	w0, [sp, #12]
 b04:	add	w0, w0, #0x1
 b08:	str	w0, [sp, #56]
 b0c:	b	b68 <BZ2_hbCreateDecodeTables+0x2d0>
 b10:	ldrsw	x0, [sp, #56]
 b14:	lsl	x0, x0, #2
 b18:	sub	x0, x0, #0x4
 b1c:	ldr	x1, [sp, #40]
 b20:	add	x0, x1, x0
 b24:	ldr	w0, [x0]
 b28:	add	w0, w0, #0x1
 b2c:	lsl	w2, w0, #1
 b30:	ldrsw	x0, [sp, #56]
 b34:	lsl	x0, x0, #2
 b38:	ldr	x1, [sp, #32]
 b3c:	add	x0, x1, x0
 b40:	ldr	w1, [x0]
 b44:	ldrsw	x0, [sp, #56]
 b48:	lsl	x0, x0, #2
 b4c:	ldr	x3, [sp, #32]
 b50:	add	x0, x3, x0
 b54:	sub	w1, w2, w1
 b58:	str	w1, [x0]
 b5c:	ldr	w0, [sp, #56]
 b60:	add	w0, w0, #0x1
 b64:	str	w0, [sp, #56]
 b68:	ldr	w1, [sp, #56]
 b6c:	ldr	w0, [sp, #8]
 b70:	cmp	w1, w0
 b74:	b.le	b10 <BZ2_hbCreateDecodeTables+0x278>
 b78:	nop
 b7c:	nop
 b80:	add	sp, sp, #0x40
 b84:	ret

crctable.o:     file format elf64-littleaarch64


randtable.o:     file format elf64-littleaarch64


compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_bsInitWrite>:
       0:	sub	sp, sp, #0x10
       4:	str	x0, [sp, #8]
       8:	ldr	x0, [sp, #8]
       c:	str	wzr, [x0, #644]
      10:	ldr	x0, [sp, #8]
      14:	str	wzr, [x0, #640]
      18:	nop
      1c:	add	sp, sp, #0x10
      20:	ret

0000000000000024 <bsFinishWrite>:
      24:	sub	sp, sp, #0x10
      28:	str	x0, [sp, #8]
      2c:	b	98 <bsFinishWrite+0x74>
      30:	ldr	x0, [sp, #8]
      34:	ldr	w0, [x0, #640]
      38:	lsr	w2, w0, #24
      3c:	ldr	x0, [sp, #8]
      40:	ldr	x1, [x0, #80]
      44:	ldr	x0, [sp, #8]
      48:	ldr	w0, [x0, #116]
      4c:	sxtw	x0, w0
      50:	add	x0, x1, x0
      54:	and	w1, w2, #0xff
      58:	strb	w1, [x0]
      5c:	ldr	x0, [sp, #8]
      60:	ldr	w0, [x0, #116]
      64:	add	w1, w0, #0x1
      68:	ldr	x0, [sp, #8]
      6c:	str	w1, [x0, #116]
      70:	ldr	x0, [sp, #8]
      74:	ldr	w0, [x0, #640]
      78:	lsl	w1, w0, #8
      7c:	ldr	x0, [sp, #8]
      80:	str	w1, [x0, #640]
      84:	ldr	x0, [sp, #8]
      88:	ldr	w0, [x0, #644]
      8c:	sub	w1, w0, #0x8
      90:	ldr	x0, [sp, #8]
      94:	str	w1, [x0, #644]
      98:	ldr	x0, [sp, #8]
      9c:	ldr	w0, [x0, #644]
      a0:	cmp	w0, #0x0
      a4:	b.gt	30 <bsFinishWrite+0xc>
      a8:	nop
      ac:	nop
      b0:	add	sp, sp, #0x10
      b4:	ret

00000000000000b8 <bsW>:
      b8:	sub	sp, sp, #0x10
      bc:	str	x0, [sp, #8]
      c0:	str	w1, [sp, #4]
      c4:	str	w2, [sp]
      c8:	b	134 <bsW+0x7c>
      cc:	ldr	x0, [sp, #8]
      d0:	ldr	w0, [x0, #640]
      d4:	lsr	w2, w0, #24
      d8:	ldr	x0, [sp, #8]
      dc:	ldr	x1, [x0, #80]
      e0:	ldr	x0, [sp, #8]
      e4:	ldr	w0, [x0, #116]
      e8:	sxtw	x0, w0
      ec:	add	x0, x1, x0
      f0:	and	w1, w2, #0xff
      f4:	strb	w1, [x0]
      f8:	ldr	x0, [sp, #8]
      fc:	ldr	w0, [x0, #116]
     100:	add	w1, w0, #0x1
     104:	ldr	x0, [sp, #8]
     108:	str	w1, [x0, #116]
     10c:	ldr	x0, [sp, #8]
     110:	ldr	w0, [x0, #640]
     114:	lsl	w1, w0, #8
     118:	ldr	x0, [sp, #8]
     11c:	str	w1, [x0, #640]
     120:	ldr	x0, [sp, #8]
     124:	ldr	w0, [x0, #644]
     128:	sub	w1, w0, #0x8
     12c:	ldr	x0, [sp, #8]
     130:	str	w1, [x0, #644]
     134:	ldr	x0, [sp, #8]
     138:	ldr	w0, [x0, #644]
     13c:	cmp	w0, #0x7
     140:	b.gt	cc <bsW+0x14>
     144:	ldr	x0, [sp, #8]
     148:	ldr	w1, [x0, #640]
     14c:	ldr	x0, [sp, #8]
     150:	ldr	w0, [x0, #644]
     154:	mov	w2, #0x20                  	// #32
     158:	sub	w2, w2, w0
     15c:	ldr	w0, [sp, #4]
     160:	sub	w0, w2, w0
     164:	ldr	w2, [sp]
     168:	lsl	w0, w2, w0
     16c:	orr	w1, w1, w0
     170:	ldr	x0, [sp, #8]
     174:	str	w1, [x0, #640]
     178:	ldr	x0, [sp, #8]
     17c:	ldr	w1, [x0, #644]
     180:	ldr	w0, [sp, #4]
     184:	add	w1, w1, w0
     188:	ldr	x0, [sp, #8]
     18c:	str	w1, [x0, #644]
     190:	nop
     194:	add	sp, sp, #0x10
     198:	ret

000000000000019c <bsPutUInt32>:
     19c:	stp	x29, x30, [sp, #-32]!
     1a0:	mov	x29, sp
     1a4:	str	x0, [sp, #24]
     1a8:	str	w1, [sp, #20]
     1ac:	ldr	w0, [sp, #20]
     1b0:	lsr	w0, w0, #24
     1b4:	mov	w2, w0
     1b8:	mov	w1, #0x8                   	// #8
     1bc:	ldr	x0, [sp, #24]
     1c0:	bl	b8 <bsW>
     1c4:	ldr	w0, [sp, #20]
     1c8:	lsr	w0, w0, #16
     1cc:	and	w0, w0, #0xff
     1d0:	mov	w2, w0
     1d4:	mov	w1, #0x8                   	// #8
     1d8:	ldr	x0, [sp, #24]
     1dc:	bl	b8 <bsW>
     1e0:	ldr	w0, [sp, #20]
     1e4:	lsr	w0, w0, #8
     1e8:	and	w0, w0, #0xff
     1ec:	mov	w2, w0
     1f0:	mov	w1, #0x8                   	// #8
     1f4:	ldr	x0, [sp, #24]
     1f8:	bl	b8 <bsW>
     1fc:	ldr	w0, [sp, #20]
     200:	and	w0, w0, #0xff
     204:	mov	w2, w0
     208:	mov	w1, #0x8                   	// #8
     20c:	ldr	x0, [sp, #24]
     210:	bl	b8 <bsW>
     214:	nop
     218:	ldp	x29, x30, [sp], #32
     21c:	ret

0000000000000220 <bsPutUChar>:
     220:	stp	x29, x30, [sp, #-32]!
     224:	mov	x29, sp
     228:	str	x0, [sp, #24]
     22c:	strb	w1, [sp, #23]
     230:	ldrb	w0, [sp, #23]
     234:	mov	w2, w0
     238:	mov	w1, #0x8                   	// #8
     23c:	ldr	x0, [sp, #24]
     240:	bl	b8 <bsW>
     244:	nop
     248:	ldp	x29, x30, [sp], #32
     24c:	ret

0000000000000250 <makeMaps_e>:
     250:	sub	sp, sp, #0x20
     254:	str	x0, [sp, #8]
     258:	ldr	x0, [sp, #8]
     25c:	str	wzr, [x0, #124]
     260:	str	wzr, [sp, #28]
     264:	b	2c0 <makeMaps_e+0x70>
     268:	ldr	x1, [sp, #8]
     26c:	ldrsw	x0, [sp, #28]
     270:	add	x0, x1, x0
     274:	ldrb	w0, [x0, #128]
     278:	cmp	w0, #0x0
     27c:	b.eq	2b4 <makeMaps_e+0x64>  // b.none
     280:	ldr	x0, [sp, #8]
     284:	ldr	w0, [x0, #124]
     288:	and	w2, w0, #0xff
     28c:	ldr	x1, [sp, #8]
     290:	ldrsw	x0, [sp, #28]
     294:	add	x0, x1, x0
     298:	mov	w1, w2
     29c:	strb	w1, [x0, #384]
     2a0:	ldr	x0, [sp, #8]
     2a4:	ldr	w0, [x0, #124]
     2a8:	add	w1, w0, #0x1
     2ac:	ldr	x0, [sp, #8]
     2b0:	str	w1, [x0, #124]
     2b4:	ldr	w0, [sp, #28]
     2b8:	add	w0, w0, #0x1
     2bc:	str	w0, [sp, #28]
     2c0:	ldr	w0, [sp, #28]
     2c4:	cmp	w0, #0xff
     2c8:	b.le	268 <makeMaps_e+0x18>
     2cc:	nop
     2d0:	nop
     2d4:	add	sp, sp, #0x20
     2d8:	ret

00000000000002dc <generateMTFValues>:
     2dc:	stp	x29, x30, [sp, #-368]!
     2e0:	mov	x29, sp
     2e4:	stp	x19, x20, [sp, #16]
     2e8:	stp	x21, x22, [sp, #32]
     2ec:	str	x0, [sp, #56]
     2f0:	ldr	x0, [sp, #56]
     2f4:	ldr	x0, [x0, #56]
     2f8:	str	x0, [sp, #344]
     2fc:	ldr	x0, [sp, #56]
     300:	ldr	x0, [x0, #64]
     304:	str	x0, [sp, #336]
     308:	ldr	x0, [sp, #56]
     30c:	ldr	x0, [x0, #72]
     310:	str	x0, [sp, #328]
     314:	ldr	x0, [sp, #56]
     318:	bl	250 <makeMaps_e>
     31c:	ldr	x0, [sp, #56]
     320:	ldr	w0, [x0, #124]
     324:	add	w0, w0, #0x1
     328:	str	w0, [sp, #324]
     32c:	str	wzr, [sp, #364]
     330:	b	350 <generateMTFValues+0x74>
     334:	ldr	x0, [sp, #56]
     338:	ldrsw	x1, [sp, #364]
     33c:	add	x1, x1, #0xa8
     340:	str	wzr, [x0, x1, lsl #2]
     344:	ldr	w0, [sp, #364]
     348:	add	w0, w0, #0x1
     34c:	str	w0, [sp, #364]
     350:	ldr	w1, [sp, #364]
     354:	ldr	w0, [sp, #324]
     358:	cmp	w1, w0
     35c:	b.le	334 <generateMTFValues+0x58>
     360:	str	wzr, [sp, #352]
     364:	str	wzr, [sp, #356]
     368:	str	wzr, [sp, #364]
     36c:	b	390 <generateMTFValues+0xb4>
     370:	ldr	w0, [sp, #364]
     374:	and	w2, w0, #0xff
     378:	ldrsw	x0, [sp, #364]
     37c:	add	x1, sp, #0x40
     380:	strb	w2, [x1, x0]
     384:	ldr	w0, [sp, #364]
     388:	add	w0, w0, #0x1
     38c:	str	w0, [sp, #364]
     390:	ldr	x0, [sp, #56]
     394:	ldr	w0, [x0, #124]
     398:	ldr	w1, [sp, #364]
     39c:	cmp	w1, w0
     3a0:	b.lt	370 <generateMTFValues+0x94>  // b.tstop
     3a4:	str	wzr, [sp, #364]
     3a8:	b	5a8 <generateMTFValues+0x2cc>
     3ac:	ldrsw	x0, [sp, #364]
     3b0:	lsl	x0, x0, #2
     3b4:	ldr	x1, [sp, #344]
     3b8:	add	x0, x1, x0
     3bc:	ldr	w0, [x0]
     3c0:	sub	w0, w0, #0x1
     3c4:	str	w0, [sp, #360]
     3c8:	ldr	w0, [sp, #360]
     3cc:	cmp	w0, #0x0
     3d0:	b.ge	3e8 <generateMTFValues+0x10c>  // b.tcont
     3d4:	ldr	x0, [sp, #56]
     3d8:	ldr	w0, [x0, #108]
     3dc:	ldr	w1, [sp, #360]
     3e0:	add	w0, w1, w0
     3e4:	str	w0, [sp, #360]
     3e8:	ldrsw	x0, [sp, #360]
     3ec:	ldr	x1, [sp, #336]
     3f0:	add	x0, x1, x0
     3f4:	ldrb	w0, [x0]
     3f8:	ldr	x1, [sp, #56]
     3fc:	sxtw	x0, w0
     400:	add	x0, x1, x0
     404:	ldrb	w0, [x0, #384]
     408:	strb	w0, [sp, #323]
     40c:	ldrb	w0, [sp, #64]
     410:	ldrb	w1, [sp, #323]
     414:	cmp	w1, w0
     418:	b.ne	42c <generateMTFValues+0x150>  // b.any
     41c:	ldr	w0, [sp, #356]
     420:	add	w0, w0, #0x1
     424:	str	w0, [sp, #356]
     428:	b	59c <generateMTFValues+0x2c0>
     42c:	ldr	w0, [sp, #356]
     430:	cmp	w0, #0x0
     434:	b.le	4f4 <generateMTFValues+0x218>
     438:	ldr	w0, [sp, #356]
     43c:	sub	w0, w0, #0x1
     440:	str	w0, [sp, #356]
     444:	ldr	w0, [sp, #356]
     448:	and	w0, w0, #0x1
     44c:	cmp	w0, #0x0
     450:	b.eq	490 <generateMTFValues+0x1b4>  // b.none
     454:	ldrsw	x0, [sp, #352]
     458:	lsl	x0, x0, #1
     45c:	ldr	x1, [sp, #328]
     460:	add	x0, x1, x0
     464:	mov	w1, #0x1                   	// #1
     468:	strh	w1, [x0]
     46c:	ldr	w0, [sp, #352]
     470:	add	w0, w0, #0x1
     474:	str	w0, [sp, #352]
     478:	ldr	x0, [sp, #56]
     47c:	ldr	w0, [x0, #676]
     480:	add	w1, w0, #0x1
     484:	ldr	x0, [sp, #56]
     488:	str	w1, [x0, #676]
     48c:	b	4c4 <generateMTFValues+0x1e8>
     490:	ldrsw	x0, [sp, #352]
     494:	lsl	x0, x0, #1
     498:	ldr	x1, [sp, #328]
     49c:	add	x0, x1, x0
     4a0:	strh	wzr, [x0]
     4a4:	ldr	w0, [sp, #352]
     4a8:	add	w0, w0, #0x1
     4ac:	str	w0, [sp, #352]
     4b0:	ldr	x0, [sp, #56]
     4b4:	ldr	w0, [x0, #672]
     4b8:	add	w1, w0, #0x1
     4bc:	ldr	x0, [sp, #56]
     4c0:	str	w1, [x0, #672]
     4c4:	ldr	w0, [sp, #356]
     4c8:	cmp	w0, #0x1
     4cc:	b.le	4ec <generateMTFValues+0x210>
     4d0:	ldr	w0, [sp, #356]
     4d4:	sub	w0, w0, #0x2
     4d8:	lsr	w1, w0, #31
     4dc:	add	w0, w1, w0
     4e0:	asr	w0, w0, #1
     4e4:	str	w0, [sp, #356]
     4e8:	b	444 <generateMTFValues+0x168>
     4ec:	nop
     4f0:	str	wzr, [sp, #356]
     4f4:	ldrb	w20, [sp, #65]
     4f8:	ldrb	w0, [sp, #64]
     4fc:	strb	w0, [sp, #65]
     500:	add	x0, sp, #0x40
     504:	add	x19, x0, #0x1
     508:	ldrb	w21, [sp, #323]
     50c:	b	524 <generateMTFValues+0x248>
     510:	add	x19, x19, #0x1
     514:	mov	w22, w20
     518:	ldrb	w20, [x19]
     51c:	mov	w0, w22
     520:	strb	w0, [x19]
     524:	cmp	w21, w20
     528:	b.ne	510 <generateMTFValues+0x234>  // b.any
     52c:	mov	w0, w20
     530:	strb	w0, [sp, #64]
     534:	add	x0, sp, #0x40
     538:	sub	x0, x19, x0
     53c:	str	w0, [sp, #360]
     540:	ldr	w0, [sp, #360]
     544:	and	w1, w0, #0xffff
     548:	ldrsw	x0, [sp, #352]
     54c:	lsl	x0, x0, #1
     550:	ldr	x2, [sp, #328]
     554:	add	x0, x2, x0
     558:	add	w1, w1, #0x1
     55c:	and	w1, w1, #0xffff
     560:	strh	w1, [x0]
     564:	ldr	w0, [sp, #352]
     568:	add	w0, w0, #0x1
     56c:	str	w0, [sp, #352]
     570:	ldr	w0, [sp, #360]
     574:	add	w3, w0, #0x1
     578:	ldr	x0, [sp, #56]
     57c:	sxtw	x1, w3
     580:	add	x1, x1, #0xa8
     584:	ldr	w0, [x0, x1, lsl #2]
     588:	add	w2, w0, #0x1
     58c:	ldr	x0, [sp, #56]
     590:	sxtw	x1, w3
     594:	add	x1, x1, #0xa8
     598:	str	w2, [x0, x1, lsl #2]
     59c:	ldr	w0, [sp, #364]
     5a0:	add	w0, w0, #0x1
     5a4:	str	w0, [sp, #364]
     5a8:	ldr	x0, [sp, #56]
     5ac:	ldr	w0, [x0, #108]
     5b0:	ldr	w1, [sp, #364]
     5b4:	cmp	w1, w0
     5b8:	b.lt	3ac <generateMTFValues+0xd0>  // b.tstop
     5bc:	ldr	w0, [sp, #356]
     5c0:	cmp	w0, #0x0
     5c4:	b.le	684 <generateMTFValues+0x3a8>
     5c8:	ldr	w0, [sp, #356]
     5cc:	sub	w0, w0, #0x1
     5d0:	str	w0, [sp, #356]
     5d4:	ldr	w0, [sp, #356]
     5d8:	and	w0, w0, #0x1
     5dc:	cmp	w0, #0x0
     5e0:	b.eq	620 <generateMTFValues+0x344>  // b.none
     5e4:	ldrsw	x0, [sp, #352]
     5e8:	lsl	x0, x0, #1
     5ec:	ldr	x1, [sp, #328]
     5f0:	add	x0, x1, x0
     5f4:	mov	w1, #0x1                   	// #1
     5f8:	strh	w1, [x0]
     5fc:	ldr	w0, [sp, #352]
     600:	add	w0, w0, #0x1
     604:	str	w0, [sp, #352]
     608:	ldr	x0, [sp, #56]
     60c:	ldr	w0, [x0, #676]
     610:	add	w1, w0, #0x1
     614:	ldr	x0, [sp, #56]
     618:	str	w1, [x0, #676]
     61c:	b	654 <generateMTFValues+0x378>
     620:	ldrsw	x0, [sp, #352]
     624:	lsl	x0, x0, #1
     628:	ldr	x1, [sp, #328]
     62c:	add	x0, x1, x0
     630:	strh	wzr, [x0]
     634:	ldr	w0, [sp, #352]
     638:	add	w0, w0, #0x1
     63c:	str	w0, [sp, #352]
     640:	ldr	x0, [sp, #56]
     644:	ldr	w0, [x0, #672]
     648:	add	w1, w0, #0x1
     64c:	ldr	x0, [sp, #56]
     650:	str	w1, [x0, #672]
     654:	ldr	w0, [sp, #356]
     658:	cmp	w0, #0x1
     65c:	b.le	67c <generateMTFValues+0x3a0>
     660:	ldr	w0, [sp, #356]
     664:	sub	w0, w0, #0x2
     668:	lsr	w1, w0, #31
     66c:	add	w0, w1, w0
     670:	asr	w0, w0, #1
     674:	str	w0, [sp, #356]
     678:	b	5d4 <generateMTFValues+0x2f8>
     67c:	nop
     680:	str	wzr, [sp, #356]
     684:	ldrsw	x0, [sp, #352]
     688:	lsl	x0, x0, #1
     68c:	ldr	x1, [sp, #328]
     690:	add	x0, x1, x0
     694:	ldr	w1, [sp, #324]
     698:	and	w1, w1, #0xffff
     69c:	strh	w1, [x0]
     6a0:	ldr	w0, [sp, #352]
     6a4:	add	w0, w0, #0x1
     6a8:	str	w0, [sp, #352]
     6ac:	ldr	x0, [sp, #56]
     6b0:	ldrsw	x1, [sp, #324]
     6b4:	add	x1, x1, #0xa8
     6b8:	ldr	w0, [x0, x1, lsl #2]
     6bc:	add	w2, w0, #0x1
     6c0:	ldr	x0, [sp, #56]
     6c4:	ldrsw	x1, [sp, #324]
     6c8:	add	x1, x1, #0xa8
     6cc:	str	w2, [x0, x1, lsl #2]
     6d0:	ldr	x0, [sp, #56]
     6d4:	ldr	w1, [sp, #352]
     6d8:	str	w1, [x0, #668]
     6dc:	nop
     6e0:	ldp	x19, x20, [sp, #16]
     6e4:	ldp	x21, x22, [sp, #32]
     6e8:	ldp	x29, x30, [sp], #368
     6ec:	ret

00000000000006f0 <sendMTFValues>:
     6f0:	stp	x29, x30, [sp, #-256]!
     6f4:	mov	x29, sp
     6f8:	stp	x19, x20, [sp, #16]
     6fc:	stp	x21, x22, [sp, #32]
     700:	str	x0, [sp, #56]
     704:	ldr	x0, [sp, #56]
     708:	ldr	x0, [x0, #72]
     70c:	str	x0, [sp, #168]
     710:	ldr	x0, [sp, #56]
     714:	ldr	w0, [x0, #656]
     718:	cmp	w0, #0x2
     71c:	b.le	760 <sendMTFValues+0x70>
     720:	adrp	x0, 0 <stderr>
     724:	add	x0, x0, #0x0
     728:	ldr	x5, [x0]
     72c:	ldr	x0, [sp, #56]
     730:	ldr	w1, [x0, #108]
     734:	ldr	x0, [sp, #56]
     738:	ldr	w2, [x0, #668]
     73c:	ldr	x0, [sp, #56]
     740:	ldr	w0, [x0, #124]
     744:	mov	w4, w0
     748:	mov	w3, w2
     74c:	mov	w2, w1
     750:	adrp	x0, 0 <BZ2_bsInitWrite>
     754:	add	x1, x0, #0x0
     758:	mov	x0, x5
     75c:	bl	0 <fprintf>
     760:	ldr	x0, [sp, #56]
     764:	ldr	w0, [x0, #124]
     768:	add	w0, w0, #0x2
     76c:	str	w0, [sp, #164]
     770:	str	wzr, [sp, #248]
     774:	b	7d8 <sendMTFValues+0xe8>
     778:	str	wzr, [sp, #252]
     77c:	b	7bc <sendMTFValues+0xcc>
     780:	ldr	x3, [sp, #56]
     784:	ldrsw	x2, [sp, #252]
     788:	ldrsw	x1, [sp, #248]
     78c:	mov	x0, x1
     790:	lsl	x0, x0, #7
     794:	add	x0, x0, x1
     798:	lsl	x0, x0, #1
     79c:	add	x0, x3, x0
     7a0:	add	x0, x0, x2
     7a4:	add	x0, x0, #0x9, lsl #12
     7a8:	mov	w1, #0xf                   	// #15
     7ac:	strb	w1, [x0, #844]
     7b0:	ldr	w0, [sp, #252]
     7b4:	add	w0, w0, #0x1
     7b8:	str	w0, [sp, #252]
     7bc:	ldr	w1, [sp, #252]
     7c0:	ldr	w0, [sp, #164]
     7c4:	cmp	w1, w0
     7c8:	b.lt	780 <sendMTFValues+0x90>  // b.tstop
     7cc:	ldr	w0, [sp, #248]
     7d0:	add	w0, w0, #0x1
     7d4:	str	w0, [sp, #248]
     7d8:	ldr	w0, [sp, #248]
     7dc:	cmp	w0, #0x5
     7e0:	b.le	778 <sendMTFValues+0x88>
     7e4:	ldr	x0, [sp, #56]
     7e8:	ldr	w0, [x0, #668]
     7ec:	cmp	w0, #0x0
     7f0:	b.gt	7fc <sendMTFValues+0x10c>
     7f4:	mov	w0, #0xbb9                 	// #3001
     7f8:	bl	0 <BZ2_bz__AssertH__fail>
     7fc:	ldr	x0, [sp, #56]
     800:	ldr	w0, [x0, #668]
     804:	cmp	w0, #0xc7
     808:	b.gt	818 <sendMTFValues+0x128>
     80c:	mov	w0, #0x2                   	// #2
     810:	str	w0, [sp, #196]
     814:	b	874 <sendMTFValues+0x184>
     818:	ldr	x0, [sp, #56]
     81c:	ldr	w0, [x0, #668]
     820:	cmp	w0, #0x257
     824:	b.gt	834 <sendMTFValues+0x144>
     828:	mov	w0, #0x3                   	// #3
     82c:	str	w0, [sp, #196]
     830:	b	874 <sendMTFValues+0x184>
     834:	ldr	x0, [sp, #56]
     838:	ldr	w0, [x0, #668]
     83c:	cmp	w0, #0x4af
     840:	b.gt	850 <sendMTFValues+0x160>
     844:	mov	w0, #0x4                   	// #4
     848:	str	w0, [sp, #196]
     84c:	b	874 <sendMTFValues+0x184>
     850:	ldr	x0, [sp, #56]
     854:	ldr	w0, [x0, #668]
     858:	cmp	w0, #0x95f
     85c:	b.gt	86c <sendMTFValues+0x17c>
     860:	mov	w0, #0x5                   	// #5
     864:	str	w0, [sp, #196]
     868:	b	874 <sendMTFValues+0x184>
     86c:	mov	w0, #0x6                   	// #6
     870:	str	w0, [sp, #196]
     874:	ldr	w0, [sp, #196]
     878:	str	w0, [sp, #192]
     87c:	ldr	x0, [sp, #56]
     880:	ldr	w0, [x0, #668]
     884:	str	w0, [sp, #188]
     888:	str	wzr, [sp, #236]
     88c:	b	ab8 <sendMTFValues+0x3c8>
     890:	ldr	w1, [sp, #188]
     894:	ldr	w0, [sp, #192]
     898:	sdiv	w0, w1, w0
     89c:	str	w0, [sp, #132]
     8a0:	ldr	w0, [sp, #236]
     8a4:	sub	w0, w0, #0x1
     8a8:	str	w0, [sp, #232]
     8ac:	str	wzr, [sp, #184]
     8b0:	b	8dc <sendMTFValues+0x1ec>
     8b4:	ldr	w0, [sp, #232]
     8b8:	add	w0, w0, #0x1
     8bc:	str	w0, [sp, #232]
     8c0:	ldr	x0, [sp, #56]
     8c4:	ldrsw	x1, [sp, #232]
     8c8:	add	x1, x1, #0xa8
     8cc:	ldr	w0, [x0, x1, lsl #2]
     8d0:	ldr	w1, [sp, #184]
     8d4:	add	w0, w1, w0
     8d8:	str	w0, [sp, #184]
     8dc:	ldr	w1, [sp, #184]
     8e0:	ldr	w0, [sp, #132]
     8e4:	cmp	w1, w0
     8e8:	b.ge	900 <sendMTFValues+0x210>  // b.tcont
     8ec:	ldr	w0, [sp, #164]
     8f0:	sub	w0, w0, #0x1
     8f4:	ldr	w1, [sp, #232]
     8f8:	cmp	w1, w0
     8fc:	b.lt	8b4 <sendMTFValues+0x1c4>  // b.tstop
     900:	ldr	w1, [sp, #232]
     904:	ldr	w0, [sp, #236]
     908:	cmp	w1, w0
     90c:	b.le	974 <sendMTFValues+0x284>
     910:	ldr	w1, [sp, #192]
     914:	ldr	w0, [sp, #196]
     918:	cmp	w1, w0
     91c:	b.eq	974 <sendMTFValues+0x284>  // b.none
     920:	ldr	w0, [sp, #192]
     924:	cmp	w0, #0x1
     928:	b.eq	974 <sendMTFValues+0x284>  // b.none
     92c:	ldr	w1, [sp, #196]
     930:	ldr	w0, [sp, #192]
     934:	sub	w0, w1, w0
     938:	cmp	w0, #0x0
     93c:	and	w0, w0, #0x1
     940:	cneg	w0, w0, lt  // lt = tstop
     944:	cmp	w0, #0x1
     948:	b.ne	974 <sendMTFValues+0x284>  // b.any
     94c:	ldr	x0, [sp, #56]
     950:	ldrsw	x1, [sp, #232]
     954:	add	x1, x1, #0xa8
     958:	ldr	w0, [x0, x1, lsl #2]
     95c:	ldr	w1, [sp, #184]
     960:	sub	w0, w1, w0
     964:	str	w0, [sp, #184]
     968:	ldr	w0, [sp, #232]
     96c:	sub	w0, w0, #0x1
     970:	str	w0, [sp, #232]
     974:	ldr	x0, [sp, #56]
     978:	ldr	w0, [x0, #656]
     97c:	cmp	w0, #0x2
     980:	b.le	9dc <sendMTFValues+0x2ec>
     984:	adrp	x0, 0 <stderr>
     988:	add	x0, x0, #0x0
     98c:	ldr	x6, [x0]
     990:	ldr	s0, [sp, #184]
     994:	scvtf	s0, s0
     998:	fcvt	d0, s0
     99c:	mov	x0, #0x4059000000000000    	// #4636737291354636288
     9a0:	fmov	d1, x0
     9a4:	fmul	d1, d0, d1
     9a8:	ldr	x0, [sp, #56]
     9ac:	ldr	s0, [x0, #668]
     9b0:	scvtf	s0, s0
     9b4:	fcvt	d0, s0
     9b8:	fdiv	d0, d1, d0
     9bc:	ldr	w5, [sp, #184]
     9c0:	ldr	w4, [sp, #232]
     9c4:	ldr	w3, [sp, #236]
     9c8:	ldr	w2, [sp, #192]
     9cc:	adrp	x0, 0 <BZ2_bsInitWrite>
     9d0:	add	x1, x0, #0x0
     9d4:	mov	x0, x6
     9d8:	bl	0 <fprintf>
     9dc:	str	wzr, [sp, #252]
     9e0:	b	a80 <sendMTFValues+0x390>
     9e4:	ldr	w1, [sp, #252]
     9e8:	ldr	w0, [sp, #236]
     9ec:	cmp	w1, w0
     9f0:	b.lt	a3c <sendMTFValues+0x34c>  // b.tstop
     9f4:	ldr	w1, [sp, #252]
     9f8:	ldr	w0, [sp, #232]
     9fc:	cmp	w1, w0
     a00:	b.gt	a3c <sendMTFValues+0x34c>
     a04:	ldr	w0, [sp, #192]
     a08:	sub	w0, w0, #0x1
     a0c:	ldr	x3, [sp, #56]
     a10:	ldrsw	x2, [sp, #252]
     a14:	sxtw	x1, w0
     a18:	mov	x0, x1
     a1c:	lsl	x0, x0, #7
     a20:	add	x0, x0, x1
     a24:	lsl	x0, x0, #1
     a28:	add	x0, x3, x0
     a2c:	add	x0, x0, x2
     a30:	add	x0, x0, #0x9, lsl #12
     a34:	strb	wzr, [x0, #844]
     a38:	b	a74 <sendMTFValues+0x384>
     a3c:	ldr	w0, [sp, #192]
     a40:	sub	w0, w0, #0x1
     a44:	ldr	x3, [sp, #56]
     a48:	ldrsw	x2, [sp, #252]
     a4c:	sxtw	x1, w0
     a50:	mov	x0, x1
     a54:	lsl	x0, x0, #7
     a58:	add	x0, x0, x1
     a5c:	lsl	x0, x0, #1
     a60:	add	x0, x3, x0
     a64:	add	x0, x0, x2
     a68:	add	x0, x0, #0x9, lsl #12
     a6c:	mov	w1, #0xf                   	// #15
     a70:	strb	w1, [x0, #844]
     a74:	ldr	w0, [sp, #252]
     a78:	add	w0, w0, #0x1
     a7c:	str	w0, [sp, #252]
     a80:	ldr	w1, [sp, #252]
     a84:	ldr	w0, [sp, #164]
     a88:	cmp	w1, w0
     a8c:	b.lt	9e4 <sendMTFValues+0x2f4>  // b.tstop
     a90:	ldr	w0, [sp, #192]
     a94:	sub	w0, w0, #0x1
     a98:	str	w0, [sp, #192]
     a9c:	ldr	w0, [sp, #232]
     aa0:	add	w0, w0, #0x1
     aa4:	str	w0, [sp, #236]
     aa8:	ldr	w1, [sp, #188]
     aac:	ldr	w0, [sp, #184]
     ab0:	sub	w0, w1, w0
     ab4:	str	w0, [sp, #188]
     ab8:	ldr	w0, [sp, #192]
     abc:	cmp	w0, #0x0
     ac0:	b.gt	890 <sendMTFValues+0x1a0>
     ac4:	str	wzr, [sp, #216]
     ac8:	b	4338 <sendMTFValues+0x3c48>
     acc:	str	wzr, [sp, #248]
     ad0:	b	af0 <sendMTFValues+0x400>
     ad4:	ldrsw	x0, [sp, #248]
     ad8:	lsl	x0, x0, #2
     adc:	add	x1, sp, #0x60
     ae0:	str	wzr, [x1, x0]
     ae4:	ldr	w0, [sp, #248]
     ae8:	add	w0, w0, #0x1
     aec:	str	w0, [sp, #248]
     af0:	ldr	w1, [sp, #248]
     af4:	ldr	w0, [sp, #196]
     af8:	cmp	w1, w0
     afc:	b.lt	ad4 <sendMTFValues+0x3e4>  // b.tstop
     b00:	str	wzr, [sp, #248]
     b04:	b	b6c <sendMTFValues+0x47c>
     b08:	str	wzr, [sp, #252]
     b0c:	b	b50 <sendMTFValues+0x460>
     b10:	ldr	x2, [sp, #56]
     b14:	ldrsw	x3, [sp, #252]
     b18:	ldrsw	x1, [sp, #248]
     b1c:	mov	x0, x1
     b20:	lsl	x0, x0, #7
     b24:	add	x0, x0, x1
     b28:	lsl	x0, x0, #1
     b2c:	add	x1, x0, x3
     b30:	mov	x0, #0x2c60                	// #11360
     b34:	add	x0, x1, x0
     b38:	lsl	x0, x0, #2
     b3c:	add	x0, x2, x0
     b40:	str	wzr, [x0, #8]
     b44:	ldr	w0, [sp, #252]
     b48:	add	w0, w0, #0x1
     b4c:	str	w0, [sp, #252]
     b50:	ldr	w1, [sp, #252]
     b54:	ldr	w0, [sp, #164]
     b58:	cmp	w1, w0
     b5c:	b.lt	b10 <sendMTFValues+0x420>  // b.tstop
     b60:	ldr	w0, [sp, #248]
     b64:	add	w0, w0, #0x1
     b68:	str	w0, [sp, #248]
     b6c:	ldr	w1, [sp, #248]
     b70:	ldr	w0, [sp, #196]
     b74:	cmp	w1, w0
     b78:	b.lt	b08 <sendMTFValues+0x418>  // b.tstop
     b7c:	ldr	w0, [sp, #196]
     b80:	cmp	w0, #0x6
     b84:	b.ne	c90 <sendMTFValues+0x5a0>  // b.any
     b88:	str	wzr, [sp, #252]
     b8c:	b	c80 <sendMTFValues+0x590>
     b90:	ldr	x1, [sp, #56]
     b94:	ldrsw	x0, [sp, #252]
     b98:	add	x0, x1, x0
     b9c:	add	x0, x0, #0x9, lsl #12
     ba0:	ldrb	w0, [x0, #1102]
     ba4:	lsl	w0, w0, #16
     ba8:	ldr	x2, [sp, #56]
     bac:	ldrsw	x1, [sp, #252]
     bb0:	add	x1, x2, x1
     bb4:	add	x1, x1, #0x9, lsl #12
     bb8:	ldrb	w1, [x1, #844]
     bbc:	orr	w0, w0, w1
     bc0:	mov	w2, w0
     bc4:	ldr	x1, [sp, #56]
     bc8:	ldrsw	x0, [sp, #252]
     bcc:	add	x0, x0, #0xc9b
     bd0:	lsl	x0, x0, #4
     bd4:	add	x0, x1, x0
     bd8:	str	w2, [x0, #8]
     bdc:	ldr	x1, [sp, #56]
     be0:	ldrsw	x0, [sp, #252]
     be4:	add	x0, x1, x0
     be8:	add	x0, x0, #0x9, lsl #12
     bec:	ldrb	w0, [x0, #1618]
     bf0:	lsl	w0, w0, #16
     bf4:	ldr	x2, [sp, #56]
     bf8:	ldrsw	x1, [sp, #252]
     bfc:	add	x1, x2, x1
     c00:	add	x1, x1, #0x9, lsl #12
     c04:	ldrb	w1, [x1, #1360]
     c08:	orr	w0, w0, w1
     c0c:	mov	w2, w0
     c10:	ldr	x1, [sp, #56]
     c14:	ldrsw	x0, [sp, #252]
     c18:	lsl	x0, x0, #4
     c1c:	add	x0, x1, x0
     c20:	add	x0, x0, #0xc, lsl #12
     c24:	str	w2, [x0, #2492]
     c28:	ldr	x1, [sp, #56]
     c2c:	ldrsw	x0, [sp, #252]
     c30:	add	x0, x1, x0
     c34:	add	x0, x0, #0x9, lsl #12
     c38:	ldrb	w0, [x0, #2134]
     c3c:	lsl	w0, w0, #16
     c40:	ldr	x2, [sp, #56]
     c44:	ldrsw	x1, [sp, #252]
     c48:	add	x1, x2, x1
     c4c:	add	x1, x1, #0x9, lsl #12
     c50:	ldrb	w1, [x1, #1876]
     c54:	orr	w0, w0, w1
     c58:	mov	w2, w0
     c5c:	ldr	x1, [sp, #56]
     c60:	ldrsw	x0, [sp, #252]
     c64:	lsl	x0, x0, #4
     c68:	add	x0, x1, x0
     c6c:	add	x0, x0, #0xc, lsl #12
     c70:	str	w2, [x0, #2496]
     c74:	ldr	w0, [sp, #252]
     c78:	add	w0, w0, #0x1
     c7c:	str	w0, [sp, #252]
     c80:	ldr	w1, [sp, #252]
     c84:	ldr	w0, [sp, #164]
     c88:	cmp	w1, w0
     c8c:	b.lt	b90 <sendMTFValues+0x4a0>  // b.tstop
     c90:	str	wzr, [sp, #212]
     c94:	str	wzr, [sp, #228]
     c98:	str	wzr, [sp, #236]
     c9c:	ldr	x0, [sp, #56]
     ca0:	ldr	w0, [x0, #668]
     ca4:	ldr	w1, [sp, #236]
     ca8:	cmp	w1, w0
     cac:	b.ge	41e8 <sendMTFValues+0x3af8>  // b.tcont
     cb0:	ldr	w0, [sp, #236]
     cb4:	add	w0, w0, #0x31
     cb8:	str	w0, [sp, #232]
     cbc:	ldr	x0, [sp, #56]
     cc0:	ldr	w0, [x0, #668]
     cc4:	ldr	w1, [sp, #232]
     cc8:	cmp	w1, w0
     ccc:	b.lt	ce0 <sendMTFValues+0x5f0>  // b.tstop
     cd0:	ldr	x0, [sp, #56]
     cd4:	ldr	w0, [x0, #668]
     cd8:	sub	w0, w0, #0x1
     cdc:	str	w0, [sp, #232]
     ce0:	str	wzr, [sp, #248]
     ce4:	b	d04 <sendMTFValues+0x614>
     ce8:	ldrsw	x0, [sp, #248]
     cec:	lsl	x0, x0, #1
     cf0:	add	x1, sp, #0x78
     cf4:	strh	wzr, [x1, x0]
     cf8:	ldr	w0, [sp, #248]
     cfc:	add	w0, w0, #0x1
     d00:	str	w0, [sp, #248]
     d04:	ldr	w1, [sp, #248]
     d08:	ldr	w0, [sp, #196]
     d0c:	cmp	w1, w0
     d10:	b.lt	ce8 <sendMTFValues+0x5f8>  // b.tstop
     d14:	ldr	w0, [sp, #196]
     d18:	cmp	w0, #0x6
     d1c:	b.ne	24ec <sendMTFValues+0x1dfc>  // b.any
     d20:	ldr	w1, [sp, #232]
     d24:	ldr	w0, [sp, #236]
     d28:	sub	w0, w1, w0
     d2c:	cmp	w0, #0x31
     d30:	b.ne	24ec <sendMTFValues+0x1dfc>  // b.any
     d34:	mov	w19, #0x0                   	// #0
     d38:	mov	w20, w19
     d3c:	mov	w21, w20
     d40:	ldrsw	x0, [sp, #236]
     d44:	lsl	x0, x0, #1
     d48:	ldr	x1, [sp, #168]
     d4c:	add	x0, x1, x0
     d50:	ldrh	w22, [x0]
     d54:	mov	w0, w22
     d58:	ldr	x1, [sp, #56]
     d5c:	sxtw	x0, w0
     d60:	add	x0, x0, #0xc9b
     d64:	lsl	x0, x0, #4
     d68:	add	x0, x1, x0
     d6c:	ldr	w0, [x0, #8]
     d70:	add	w21, w21, w0
     d74:	mov	w0, w22
     d78:	ldr	x1, [sp, #56]
     d7c:	sxtw	x0, w0
     d80:	lsl	x0, x0, #4
     d84:	add	x0, x1, x0
     d88:	add	x0, x0, #0xc, lsl #12
     d8c:	ldr	w0, [x0, #2492]
     d90:	add	w20, w20, w0
     d94:	mov	w0, w22
     d98:	ldr	x1, [sp, #56]
     d9c:	sxtw	x0, w0
     da0:	lsl	x0, x0, #4
     da4:	add	x0, x1, x0
     da8:	add	x0, x0, #0xc, lsl #12
     dac:	ldr	w0, [x0, #2496]
     db0:	add	w19, w19, w0
     db4:	ldrsw	x0, [sp, #236]
     db8:	add	x0, x0, #0x1
     dbc:	lsl	x0, x0, #1
     dc0:	ldr	x1, [sp, #168]
     dc4:	add	x0, x1, x0
     dc8:	ldrh	w22, [x0]
     dcc:	mov	w0, w22
     dd0:	ldr	x1, [sp, #56]
     dd4:	sxtw	x0, w0
     dd8:	add	x0, x0, #0xc9b
     ddc:	lsl	x0, x0, #4
     de0:	add	x0, x1, x0
     de4:	ldr	w0, [x0, #8]
     de8:	add	w21, w21, w0
     dec:	mov	w0, w22
     df0:	ldr	x1, [sp, #56]
     df4:	sxtw	x0, w0
     df8:	lsl	x0, x0, #4
     dfc:	add	x0, x1, x0
     e00:	add	x0, x0, #0xc, lsl #12
     e04:	ldr	w0, [x0, #2492]
     e08:	add	w20, w20, w0
     e0c:	mov	w0, w22
     e10:	ldr	x1, [sp, #56]
     e14:	sxtw	x0, w0
     e18:	lsl	x0, x0, #4
     e1c:	add	x0, x1, x0
     e20:	add	x0, x0, #0xc, lsl #12
     e24:	ldr	w0, [x0, #2496]
     e28:	add	w19, w19, w0
     e2c:	ldrsw	x0, [sp, #236]
     e30:	add	x0, x0, #0x2
     e34:	lsl	x0, x0, #1
     e38:	ldr	x1, [sp, #168]
     e3c:	add	x0, x1, x0
     e40:	ldrh	w22, [x0]
     e44:	mov	w0, w22
     e48:	ldr	x1, [sp, #56]
     e4c:	sxtw	x0, w0
     e50:	add	x0, x0, #0xc9b
     e54:	lsl	x0, x0, #4
     e58:	add	x0, x1, x0
     e5c:	ldr	w0, [x0, #8]
     e60:	add	w21, w21, w0
     e64:	mov	w0, w22
     e68:	ldr	x1, [sp, #56]
     e6c:	sxtw	x0, w0
     e70:	lsl	x0, x0, #4
     e74:	add	x0, x1, x0
     e78:	add	x0, x0, #0xc, lsl #12
     e7c:	ldr	w0, [x0, #2492]
     e80:	add	w20, w20, w0
     e84:	mov	w0, w22
     e88:	ldr	x1, [sp, #56]
     e8c:	sxtw	x0, w0
     e90:	lsl	x0, x0, #4
     e94:	add	x0, x1, x0
     e98:	add	x0, x0, #0xc, lsl #12
     e9c:	ldr	w0, [x0, #2496]
     ea0:	add	w19, w19, w0
     ea4:	ldrsw	x0, [sp, #236]
     ea8:	add	x0, x0, #0x3
     eac:	lsl	x0, x0, #1
     eb0:	ldr	x1, [sp, #168]
     eb4:	add	x0, x1, x0
     eb8:	ldrh	w22, [x0]
     ebc:	mov	w0, w22
     ec0:	ldr	x1, [sp, #56]
     ec4:	sxtw	x0, w0
     ec8:	add	x0, x0, #0xc9b
     ecc:	lsl	x0, x0, #4
     ed0:	add	x0, x1, x0
     ed4:	ldr	w0, [x0, #8]
     ed8:	add	w21, w21, w0
     edc:	mov	w0, w22
     ee0:	ldr	x1, [sp, #56]
     ee4:	sxtw	x0, w0
     ee8:	lsl	x0, x0, #4
     eec:	add	x0, x1, x0
     ef0:	add	x0, x0, #0xc, lsl #12
     ef4:	ldr	w0, [x0, #2492]
     ef8:	add	w20, w20, w0
     efc:	mov	w0, w22
     f00:	ldr	x1, [sp, #56]
     f04:	sxtw	x0, w0
     f08:	lsl	x0, x0, #4
     f0c:	add	x0, x1, x0
     f10:	add	x0, x0, #0xc, lsl #12
     f14:	ldr	w0, [x0, #2496]
     f18:	add	w19, w19, w0
     f1c:	ldrsw	x0, [sp, #236]
     f20:	add	x0, x0, #0x4
     f24:	lsl	x0, x0, #1
     f28:	ldr	x1, [sp, #168]
     f2c:	add	x0, x1, x0
     f30:	ldrh	w22, [x0]
     f34:	mov	w0, w22
     f38:	ldr	x1, [sp, #56]
     f3c:	sxtw	x0, w0
     f40:	add	x0, x0, #0xc9b
     f44:	lsl	x0, x0, #4
     f48:	add	x0, x1, x0
     f4c:	ldr	w0, [x0, #8]
     f50:	add	w21, w21, w0
     f54:	mov	w0, w22
     f58:	ldr	x1, [sp, #56]
     f5c:	sxtw	x0, w0
     f60:	lsl	x0, x0, #4
     f64:	add	x0, x1, x0
     f68:	add	x0, x0, #0xc, lsl #12
     f6c:	ldr	w0, [x0, #2492]
     f70:	add	w20, w20, w0
     f74:	mov	w0, w22
     f78:	ldr	x1, [sp, #56]
     f7c:	sxtw	x0, w0
     f80:	lsl	x0, x0, #4
     f84:	add	x0, x1, x0
     f88:	add	x0, x0, #0xc, lsl #12
     f8c:	ldr	w0, [x0, #2496]
     f90:	add	w19, w19, w0
     f94:	ldrsw	x0, [sp, #236]
     f98:	add	x0, x0, #0x5
     f9c:	lsl	x0, x0, #1
     fa0:	ldr	x1, [sp, #168]
     fa4:	add	x0, x1, x0
     fa8:	ldrh	w22, [x0]
     fac:	mov	w0, w22
     fb0:	ldr	x1, [sp, #56]
     fb4:	sxtw	x0, w0
     fb8:	add	x0, x0, #0xc9b
     fbc:	lsl	x0, x0, #4
     fc0:	add	x0, x1, x0
     fc4:	ldr	w0, [x0, #8]
     fc8:	add	w21, w21, w0
     fcc:	mov	w0, w22
     fd0:	ldr	x1, [sp, #56]
     fd4:	sxtw	x0, w0
     fd8:	lsl	x0, x0, #4
     fdc:	add	x0, x1, x0
     fe0:	add	x0, x0, #0xc, lsl #12
     fe4:	ldr	w0, [x0, #2492]
     fe8:	add	w20, w20, w0
     fec:	mov	w0, w22
     ff0:	ldr	x1, [sp, #56]
     ff4:	sxtw	x0, w0
     ff8:	lsl	x0, x0, #4
     ffc:	add	x0, x1, x0
    1000:	add	x0, x0, #0xc, lsl #12
    1004:	ldr	w0, [x0, #2496]
    1008:	add	w19, w19, w0
    100c:	ldrsw	x0, [sp, #236]
    1010:	add	x0, x0, #0x6
    1014:	lsl	x0, x0, #1
    1018:	ldr	x1, [sp, #168]
    101c:	add	x0, x1, x0
    1020:	ldrh	w22, [x0]
    1024:	mov	w0, w22
    1028:	ldr	x1, [sp, #56]
    102c:	sxtw	x0, w0
    1030:	add	x0, x0, #0xc9b
    1034:	lsl	x0, x0, #4
    1038:	add	x0, x1, x0
    103c:	ldr	w0, [x0, #8]
    1040:	add	w21, w21, w0
    1044:	mov	w0, w22
    1048:	ldr	x1, [sp, #56]
    104c:	sxtw	x0, w0
    1050:	lsl	x0, x0, #4
    1054:	add	x0, x1, x0
    1058:	add	x0, x0, #0xc, lsl #12
    105c:	ldr	w0, [x0, #2492]
    1060:	add	w20, w20, w0
    1064:	mov	w0, w22
    1068:	ldr	x1, [sp, #56]
    106c:	sxtw	x0, w0
    1070:	lsl	x0, x0, #4
    1074:	add	x0, x1, x0
    1078:	add	x0, x0, #0xc, lsl #12
    107c:	ldr	w0, [x0, #2496]
    1080:	add	w19, w19, w0
    1084:	ldrsw	x0, [sp, #236]
    1088:	add	x0, x0, #0x7
    108c:	lsl	x0, x0, #1
    1090:	ldr	x1, [sp, #168]
    1094:	add	x0, x1, x0
    1098:	ldrh	w22, [x0]
    109c:	mov	w0, w22
    10a0:	ldr	x1, [sp, #56]
    10a4:	sxtw	x0, w0
    10a8:	add	x0, x0, #0xc9b
    10ac:	lsl	x0, x0, #4
    10b0:	add	x0, x1, x0
    10b4:	ldr	w0, [x0, #8]
    10b8:	add	w21, w21, w0
    10bc:	mov	w0, w22
    10c0:	ldr	x1, [sp, #56]
    10c4:	sxtw	x0, w0
    10c8:	lsl	x0, x0, #4
    10cc:	add	x0, x1, x0
    10d0:	add	x0, x0, #0xc, lsl #12
    10d4:	ldr	w0, [x0, #2492]
    10d8:	add	w20, w20, w0
    10dc:	mov	w0, w22
    10e0:	ldr	x1, [sp, #56]
    10e4:	sxtw	x0, w0
    10e8:	lsl	x0, x0, #4
    10ec:	add	x0, x1, x0
    10f0:	add	x0, x0, #0xc, lsl #12
    10f4:	ldr	w0, [x0, #2496]
    10f8:	add	w19, w19, w0
    10fc:	ldrsw	x0, [sp, #236]
    1100:	add	x0, x0, #0x8
    1104:	lsl	x0, x0, #1
    1108:	ldr	x1, [sp, #168]
    110c:	add	x0, x1, x0
    1110:	ldrh	w22, [x0]
    1114:	mov	w0, w22
    1118:	ldr	x1, [sp, #56]
    111c:	sxtw	x0, w0
    1120:	add	x0, x0, #0xc9b
    1124:	lsl	x0, x0, #4
    1128:	add	x0, x1, x0
    112c:	ldr	w0, [x0, #8]
    1130:	add	w21, w21, w0
    1134:	mov	w0, w22
    1138:	ldr	x1, [sp, #56]
    113c:	sxtw	x0, w0
    1140:	lsl	x0, x0, #4
    1144:	add	x0, x1, x0
    1148:	add	x0, x0, #0xc, lsl #12
    114c:	ldr	w0, [x0, #2492]
    1150:	add	w20, w20, w0
    1154:	mov	w0, w22
    1158:	ldr	x1, [sp, #56]
    115c:	sxtw	x0, w0
    1160:	lsl	x0, x0, #4
    1164:	add	x0, x1, x0
    1168:	add	x0, x0, #0xc, lsl #12
    116c:	ldr	w0, [x0, #2496]
    1170:	add	w19, w19, w0
    1174:	ldrsw	x0, [sp, #236]
    1178:	add	x0, x0, #0x9
    117c:	lsl	x0, x0, #1
    1180:	ldr	x1, [sp, #168]
    1184:	add	x0, x1, x0
    1188:	ldrh	w22, [x0]
    118c:	mov	w0, w22
    1190:	ldr	x1, [sp, #56]
    1194:	sxtw	x0, w0
    1198:	add	x0, x0, #0xc9b
    119c:	lsl	x0, x0, #4
    11a0:	add	x0, x1, x0
    11a4:	ldr	w0, [x0, #8]
    11a8:	add	w21, w21, w0
    11ac:	mov	w0, w22
    11b0:	ldr	x1, [sp, #56]
    11b4:	sxtw	x0, w0
    11b8:	lsl	x0, x0, #4
    11bc:	add	x0, x1, x0
    11c0:	add	x0, x0, #0xc, lsl #12
    11c4:	ldr	w0, [x0, #2492]
    11c8:	add	w20, w20, w0
    11cc:	mov	w0, w22
    11d0:	ldr	x1, [sp, #56]
    11d4:	sxtw	x0, w0
    11d8:	lsl	x0, x0, #4
    11dc:	add	x0, x1, x0
    11e0:	add	x0, x0, #0xc, lsl #12
    11e4:	ldr	w0, [x0, #2496]
    11e8:	add	w19, w19, w0
    11ec:	ldrsw	x0, [sp, #236]
    11f0:	add	x0, x0, #0xa
    11f4:	lsl	x0, x0, #1
    11f8:	ldr	x1, [sp, #168]
    11fc:	add	x0, x1, x0
    1200:	ldrh	w22, [x0]
    1204:	mov	w0, w22
    1208:	ldr	x1, [sp, #56]
    120c:	sxtw	x0, w0
    1210:	add	x0, x0, #0xc9b
    1214:	lsl	x0, x0, #4
    1218:	add	x0, x1, x0
    121c:	ldr	w0, [x0, #8]
    1220:	add	w21, w21, w0
    1224:	mov	w0, w22
    1228:	ldr	x1, [sp, #56]
    122c:	sxtw	x0, w0
    1230:	lsl	x0, x0, #4
    1234:	add	x0, x1, x0
    1238:	add	x0, x0, #0xc, lsl #12
    123c:	ldr	w0, [x0, #2492]
    1240:	add	w20, w20, w0
    1244:	mov	w0, w22
    1248:	ldr	x1, [sp, #56]
    124c:	sxtw	x0, w0
    1250:	lsl	x0, x0, #4
    1254:	add	x0, x1, x0
    1258:	add	x0, x0, #0xc, lsl #12
    125c:	ldr	w0, [x0, #2496]
    1260:	add	w19, w19, w0
    1264:	ldrsw	x0, [sp, #236]
    1268:	add	x0, x0, #0xb
    126c:	lsl	x0, x0, #1
    1270:	ldr	x1, [sp, #168]
    1274:	add	x0, x1, x0
    1278:	ldrh	w22, [x0]
    127c:	mov	w0, w22
    1280:	ldr	x1, [sp, #56]
    1284:	sxtw	x0, w0
    1288:	add	x0, x0, #0xc9b
    128c:	lsl	x0, x0, #4
    1290:	add	x0, x1, x0
    1294:	ldr	w0, [x0, #8]
    1298:	add	w21, w21, w0
    129c:	mov	w0, w22
    12a0:	ldr	x1, [sp, #56]
    12a4:	sxtw	x0, w0
    12a8:	lsl	x0, x0, #4
    12ac:	add	x0, x1, x0
    12b0:	add	x0, x0, #0xc, lsl #12
    12b4:	ldr	w0, [x0, #2492]
    12b8:	add	w20, w20, w0
    12bc:	mov	w0, w22
    12c0:	ldr	x1, [sp, #56]
    12c4:	sxtw	x0, w0
    12c8:	lsl	x0, x0, #4
    12cc:	add	x0, x1, x0
    12d0:	add	x0, x0, #0xc, lsl #12
    12d4:	ldr	w0, [x0, #2496]
    12d8:	add	w19, w19, w0
    12dc:	ldrsw	x0, [sp, #236]
    12e0:	add	x0, x0, #0xc
    12e4:	lsl	x0, x0, #1
    12e8:	ldr	x1, [sp, #168]
    12ec:	add	x0, x1, x0
    12f0:	ldrh	w22, [x0]
    12f4:	mov	w0, w22
    12f8:	ldr	x1, [sp, #56]
    12fc:	sxtw	x0, w0
    1300:	add	x0, x0, #0xc9b
    1304:	lsl	x0, x0, #4
    1308:	add	x0, x1, x0
    130c:	ldr	w0, [x0, #8]
    1310:	add	w21, w21, w0
    1314:	mov	w0, w22
    1318:	ldr	x1, [sp, #56]
    131c:	sxtw	x0, w0
    1320:	lsl	x0, x0, #4
    1324:	add	x0, x1, x0
    1328:	add	x0, x0, #0xc, lsl #12
    132c:	ldr	w0, [x0, #2492]
    1330:	add	w20, w20, w0
    1334:	mov	w0, w22
    1338:	ldr	x1, [sp, #56]
    133c:	sxtw	x0, w0
    1340:	lsl	x0, x0, #4
    1344:	add	x0, x1, x0
    1348:	add	x0, x0, #0xc, lsl #12
    134c:	ldr	w0, [x0, #2496]
    1350:	add	w19, w19, w0
    1354:	ldrsw	x0, [sp, #236]
    1358:	add	x0, x0, #0xd
    135c:	lsl	x0, x0, #1
    1360:	ldr	x1, [sp, #168]
    1364:	add	x0, x1, x0
    1368:	ldrh	w22, [x0]
    136c:	mov	w0, w22
    1370:	ldr	x1, [sp, #56]
    1374:	sxtw	x0, w0
    1378:	add	x0, x0, #0xc9b
    137c:	lsl	x0, x0, #4
    1380:	add	x0, x1, x0
    1384:	ldr	w0, [x0, #8]
    1388:	add	w21, w21, w0
    138c:	mov	w0, w22
    1390:	ldr	x1, [sp, #56]
    1394:	sxtw	x0, w0
    1398:	lsl	x0, x0, #4
    139c:	add	x0, x1, x0
    13a0:	add	x0, x0, #0xc, lsl #12
    13a4:	ldr	w0, [x0, #2492]
    13a8:	add	w20, w20, w0
    13ac:	mov	w0, w22
    13b0:	ldr	x1, [sp, #56]
    13b4:	sxtw	x0, w0
    13b8:	lsl	x0, x0, #4
    13bc:	add	x0, x1, x0
    13c0:	add	x0, x0, #0xc, lsl #12
    13c4:	ldr	w0, [x0, #2496]
    13c8:	add	w19, w19, w0
    13cc:	ldrsw	x0, [sp, #236]
    13d0:	add	x0, x0, #0xe
    13d4:	lsl	x0, x0, #1
    13d8:	ldr	x1, [sp, #168]
    13dc:	add	x0, x1, x0
    13e0:	ldrh	w22, [x0]
    13e4:	mov	w0, w22
    13e8:	ldr	x1, [sp, #56]
    13ec:	sxtw	x0, w0
    13f0:	add	x0, x0, #0xc9b
    13f4:	lsl	x0, x0, #4
    13f8:	add	x0, x1, x0
    13fc:	ldr	w0, [x0, #8]
    1400:	add	w21, w21, w0
    1404:	mov	w0, w22
    1408:	ldr	x1, [sp, #56]
    140c:	sxtw	x0, w0
    1410:	lsl	x0, x0, #4
    1414:	add	x0, x1, x0
    1418:	add	x0, x0, #0xc, lsl #12
    141c:	ldr	w0, [x0, #2492]
    1420:	add	w20, w20, w0
    1424:	mov	w0, w22
    1428:	ldr	x1, [sp, #56]
    142c:	sxtw	x0, w0
    1430:	lsl	x0, x0, #4
    1434:	add	x0, x1, x0
    1438:	add	x0, x0, #0xc, lsl #12
    143c:	ldr	w0, [x0, #2496]
    1440:	add	w19, w19, w0
    1444:	ldrsw	x0, [sp, #236]
    1448:	add	x0, x0, #0xf
    144c:	lsl	x0, x0, #1
    1450:	ldr	x1, [sp, #168]
    1454:	add	x0, x1, x0
    1458:	ldrh	w22, [x0]
    145c:	mov	w0, w22
    1460:	ldr	x1, [sp, #56]
    1464:	sxtw	x0, w0
    1468:	add	x0, x0, #0xc9b
    146c:	lsl	x0, x0, #4
    1470:	add	x0, x1, x0
    1474:	ldr	w0, [x0, #8]
    1478:	add	w21, w21, w0
    147c:	mov	w0, w22
    1480:	ldr	x1, [sp, #56]
    1484:	sxtw	x0, w0
    1488:	lsl	x0, x0, #4
    148c:	add	x0, x1, x0
    1490:	add	x0, x0, #0xc, lsl #12
    1494:	ldr	w0, [x0, #2492]
    1498:	add	w20, w20, w0
    149c:	mov	w0, w22
    14a0:	ldr	x1, [sp, #56]
    14a4:	sxtw	x0, w0
    14a8:	lsl	x0, x0, #4
    14ac:	add	x0, x1, x0
    14b0:	add	x0, x0, #0xc, lsl #12
    14b4:	ldr	w0, [x0, #2496]
    14b8:	add	w19, w19, w0
    14bc:	ldrsw	x0, [sp, #236]
    14c0:	add	x0, x0, #0x10
    14c4:	lsl	x0, x0, #1
    14c8:	ldr	x1, [sp, #168]
    14cc:	add	x0, x1, x0
    14d0:	ldrh	w22, [x0]
    14d4:	mov	w0, w22
    14d8:	ldr	x1, [sp, #56]
    14dc:	sxtw	x0, w0
    14e0:	add	x0, x0, #0xc9b
    14e4:	lsl	x0, x0, #4
    14e8:	add	x0, x1, x0
    14ec:	ldr	w0, [x0, #8]
    14f0:	add	w21, w21, w0
    14f4:	mov	w0, w22
    14f8:	ldr	x1, [sp, #56]
    14fc:	sxtw	x0, w0
    1500:	lsl	x0, x0, #4
    1504:	add	x0, x1, x0
    1508:	add	x0, x0, #0xc, lsl #12
    150c:	ldr	w0, [x0, #2492]
    1510:	add	w20, w20, w0
    1514:	mov	w0, w22
    1518:	ldr	x1, [sp, #56]
    151c:	sxtw	x0, w0
    1520:	lsl	x0, x0, #4
    1524:	add	x0, x1, x0
    1528:	add	x0, x0, #0xc, lsl #12
    152c:	ldr	w0, [x0, #2496]
    1530:	add	w19, w19, w0
    1534:	ldrsw	x0, [sp, #236]
    1538:	add	x0, x0, #0x11
    153c:	lsl	x0, x0, #1
    1540:	ldr	x1, [sp, #168]
    1544:	add	x0, x1, x0
    1548:	ldrh	w22, [x0]
    154c:	mov	w0, w22
    1550:	ldr	x1, [sp, #56]
    1554:	sxtw	x0, w0
    1558:	add	x0, x0, #0xc9b
    155c:	lsl	x0, x0, #4
    1560:	add	x0, x1, x0
    1564:	ldr	w0, [x0, #8]
    1568:	add	w21, w21, w0
    156c:	mov	w0, w22
    1570:	ldr	x1, [sp, #56]
    1574:	sxtw	x0, w0
    1578:	lsl	x0, x0, #4
    157c:	add	x0, x1, x0
    1580:	add	x0, x0, #0xc, lsl #12
    1584:	ldr	w0, [x0, #2492]
    1588:	add	w20, w20, w0
    158c:	mov	w0, w22
    1590:	ldr	x1, [sp, #56]
    1594:	sxtw	x0, w0
    1598:	lsl	x0, x0, #4
    159c:	add	x0, x1, x0
    15a0:	add	x0, x0, #0xc, lsl #12
    15a4:	ldr	w0, [x0, #2496]
    15a8:	add	w19, w19, w0
    15ac:	ldrsw	x0, [sp, #236]
    15b0:	add	x0, x0, #0x12
    15b4:	lsl	x0, x0, #1
    15b8:	ldr	x1, [sp, #168]
    15bc:	add	x0, x1, x0
    15c0:	ldrh	w22, [x0]
    15c4:	mov	w0, w22
    15c8:	ldr	x1, [sp, #56]
    15cc:	sxtw	x0, w0
    15d0:	add	x0, x0, #0xc9b
    15d4:	lsl	x0, x0, #4
    15d8:	add	x0, x1, x0
    15dc:	ldr	w0, [x0, #8]
    15e0:	add	w21, w21, w0
    15e4:	mov	w0, w22
    15e8:	ldr	x1, [sp, #56]
    15ec:	sxtw	x0, w0
    15f0:	lsl	x0, x0, #4
    15f4:	add	x0, x1, x0
    15f8:	add	x0, x0, #0xc, lsl #12
    15fc:	ldr	w0, [x0, #2492]
    1600:	add	w20, w20, w0
    1604:	mov	w0, w22
    1608:	ldr	x1, [sp, #56]
    160c:	sxtw	x0, w0
    1610:	lsl	x0, x0, #4
    1614:	add	x0, x1, x0
    1618:	add	x0, x0, #0xc, lsl #12
    161c:	ldr	w0, [x0, #2496]
    1620:	add	w19, w19, w0
    1624:	ldrsw	x0, [sp, #236]
    1628:	add	x0, x0, #0x13
    162c:	lsl	x0, x0, #1
    1630:	ldr	x1, [sp, #168]
    1634:	add	x0, x1, x0
    1638:	ldrh	w22, [x0]
    163c:	mov	w0, w22
    1640:	ldr	x1, [sp, #56]
    1644:	sxtw	x0, w0
    1648:	add	x0, x0, #0xc9b
    164c:	lsl	x0, x0, #4
    1650:	add	x0, x1, x0
    1654:	ldr	w0, [x0, #8]
    1658:	add	w21, w21, w0
    165c:	mov	w0, w22
    1660:	ldr	x1, [sp, #56]
    1664:	sxtw	x0, w0
    1668:	lsl	x0, x0, #4
    166c:	add	x0, x1, x0
    1670:	add	x0, x0, #0xc, lsl #12
    1674:	ldr	w0, [x0, #2492]
    1678:	add	w20, w20, w0
    167c:	mov	w0, w22
    1680:	ldr	x1, [sp, #56]
    1684:	sxtw	x0, w0
    1688:	lsl	x0, x0, #4
    168c:	add	x0, x1, x0
    1690:	add	x0, x0, #0xc, lsl #12
    1694:	ldr	w0, [x0, #2496]
    1698:	add	w19, w19, w0
    169c:	ldrsw	x0, [sp, #236]
    16a0:	add	x0, x0, #0x14
    16a4:	lsl	x0, x0, #1
    16a8:	ldr	x1, [sp, #168]
    16ac:	add	x0, x1, x0
    16b0:	ldrh	w22, [x0]
    16b4:	mov	w0, w22
    16b8:	ldr	x1, [sp, #56]
    16bc:	sxtw	x0, w0
    16c0:	add	x0, x0, #0xc9b
    16c4:	lsl	x0, x0, #4
    16c8:	add	x0, x1, x0
    16cc:	ldr	w0, [x0, #8]
    16d0:	add	w21, w21, w0
    16d4:	mov	w0, w22
    16d8:	ldr	x1, [sp, #56]
    16dc:	sxtw	x0, w0
    16e0:	lsl	x0, x0, #4
    16e4:	add	x0, x1, x0
    16e8:	add	x0, x0, #0xc, lsl #12
    16ec:	ldr	w0, [x0, #2492]
    16f0:	add	w20, w20, w0
    16f4:	mov	w0, w22
    16f8:	ldr	x1, [sp, #56]
    16fc:	sxtw	x0, w0
    1700:	lsl	x0, x0, #4
    1704:	add	x0, x1, x0
    1708:	add	x0, x0, #0xc, lsl #12
    170c:	ldr	w0, [x0, #2496]
    1710:	add	w19, w19, w0
    1714:	ldrsw	x0, [sp, #236]
    1718:	add	x0, x0, #0x15
    171c:	lsl	x0, x0, #1
    1720:	ldr	x1, [sp, #168]
    1724:	add	x0, x1, x0
    1728:	ldrh	w22, [x0]
    172c:	mov	w0, w22
    1730:	ldr	x1, [sp, #56]
    1734:	sxtw	x0, w0
    1738:	add	x0, x0, #0xc9b
    173c:	lsl	x0, x0, #4
    1740:	add	x0, x1, x0
    1744:	ldr	w0, [x0, #8]
    1748:	add	w21, w21, w0
    174c:	mov	w0, w22
    1750:	ldr	x1, [sp, #56]
    1754:	sxtw	x0, w0
    1758:	lsl	x0, x0, #4
    175c:	add	x0, x1, x0
    1760:	add	x0, x0, #0xc, lsl #12
    1764:	ldr	w0, [x0, #2492]
    1768:	add	w20, w20, w0
    176c:	mov	w0, w22
    1770:	ldr	x1, [sp, #56]
    1774:	sxtw	x0, w0
    1778:	lsl	x0, x0, #4
    177c:	add	x0, x1, x0
    1780:	add	x0, x0, #0xc, lsl #12
    1784:	ldr	w0, [x0, #2496]
    1788:	add	w19, w19, w0
    178c:	ldrsw	x0, [sp, #236]
    1790:	add	x0, x0, #0x16
    1794:	lsl	x0, x0, #1
    1798:	ldr	x1, [sp, #168]
    179c:	add	x0, x1, x0
    17a0:	ldrh	w22, [x0]
    17a4:	mov	w0, w22
    17a8:	ldr	x1, [sp, #56]
    17ac:	sxtw	x0, w0
    17b0:	add	x0, x0, #0xc9b
    17b4:	lsl	x0, x0, #4
    17b8:	add	x0, x1, x0
    17bc:	ldr	w0, [x0, #8]
    17c0:	add	w21, w21, w0
    17c4:	mov	w0, w22
    17c8:	ldr	x1, [sp, #56]
    17cc:	sxtw	x0, w0
    17d0:	lsl	x0, x0, #4
    17d4:	add	x0, x1, x0
    17d8:	add	x0, x0, #0xc, lsl #12
    17dc:	ldr	w0, [x0, #2492]
    17e0:	add	w20, w20, w0
    17e4:	mov	w0, w22
    17e8:	ldr	x1, [sp, #56]
    17ec:	sxtw	x0, w0
    17f0:	lsl	x0, x0, #4
    17f4:	add	x0, x1, x0
    17f8:	add	x0, x0, #0xc, lsl #12
    17fc:	ldr	w0, [x0, #2496]
    1800:	add	w19, w19, w0
    1804:	ldrsw	x0, [sp, #236]
    1808:	add	x0, x0, #0x17
    180c:	lsl	x0, x0, #1
    1810:	ldr	x1, [sp, #168]
    1814:	add	x0, x1, x0
    1818:	ldrh	w22, [x0]
    181c:	mov	w0, w22
    1820:	ldr	x1, [sp, #56]
    1824:	sxtw	x0, w0
    1828:	add	x0, x0, #0xc9b
    182c:	lsl	x0, x0, #4
    1830:	add	x0, x1, x0
    1834:	ldr	w0, [x0, #8]
    1838:	add	w21, w21, w0
    183c:	mov	w0, w22
    1840:	ldr	x1, [sp, #56]
    1844:	sxtw	x0, w0
    1848:	lsl	x0, x0, #4
    184c:	add	x0, x1, x0
    1850:	add	x0, x0, #0xc, lsl #12
    1854:	ldr	w0, [x0, #2492]
    1858:	add	w20, w20, w0
    185c:	mov	w0, w22
    1860:	ldr	x1, [sp, #56]
    1864:	sxtw	x0, w0
    1868:	lsl	x0, x0, #4
    186c:	add	x0, x1, x0
    1870:	add	x0, x0, #0xc, lsl #12
    1874:	ldr	w0, [x0, #2496]
    1878:	add	w19, w19, w0
    187c:	ldrsw	x0, [sp, #236]
    1880:	add	x0, x0, #0x18
    1884:	lsl	x0, x0, #1
    1888:	ldr	x1, [sp, #168]
    188c:	add	x0, x1, x0
    1890:	ldrh	w22, [x0]
    1894:	mov	w0, w22
    1898:	ldr	x1, [sp, #56]
    189c:	sxtw	x0, w0
    18a0:	add	x0, x0, #0xc9b
    18a4:	lsl	x0, x0, #4
    18a8:	add	x0, x1, x0
    18ac:	ldr	w0, [x0, #8]
    18b0:	add	w21, w21, w0
    18b4:	mov	w0, w22
    18b8:	ldr	x1, [sp, #56]
    18bc:	sxtw	x0, w0
    18c0:	lsl	x0, x0, #4
    18c4:	add	x0, x1, x0
    18c8:	add	x0, x0, #0xc, lsl #12
    18cc:	ldr	w0, [x0, #2492]
    18d0:	add	w20, w20, w0
    18d4:	mov	w0, w22
    18d8:	ldr	x1, [sp, #56]
    18dc:	sxtw	x0, w0
    18e0:	lsl	x0, x0, #4
    18e4:	add	x0, x1, x0
    18e8:	add	x0, x0, #0xc, lsl #12
    18ec:	ldr	w0, [x0, #2496]
    18f0:	add	w19, w19, w0
    18f4:	ldrsw	x0, [sp, #236]
    18f8:	add	x0, x0, #0x19
    18fc:	lsl	x0, x0, #1
    1900:	ldr	x1, [sp, #168]
    1904:	add	x0, x1, x0
    1908:	ldrh	w22, [x0]
    190c:	mov	w0, w22
    1910:	ldr	x1, [sp, #56]
    1914:	sxtw	x0, w0
    1918:	add	x0, x0, #0xc9b
    191c:	lsl	x0, x0, #4
    1920:	add	x0, x1, x0
    1924:	ldr	w0, [x0, #8]
    1928:	add	w21, w21, w0
    192c:	mov	w0, w22
    1930:	ldr	x1, [sp, #56]
    1934:	sxtw	x0, w0
    1938:	lsl	x0, x0, #4
    193c:	add	x0, x1, x0
    1940:	add	x0, x0, #0xc, lsl #12
    1944:	ldr	w0, [x0, #2492]
    1948:	add	w20, w20, w0
    194c:	mov	w0, w22
    1950:	ldr	x1, [sp, #56]
    1954:	sxtw	x0, w0
    1958:	lsl	x0, x0, #4
    195c:	add	x0, x1, x0
    1960:	add	x0, x0, #0xc, lsl #12
    1964:	ldr	w0, [x0, #2496]
    1968:	add	w19, w19, w0
    196c:	ldrsw	x0, [sp, #236]
    1970:	add	x0, x0, #0x1a
    1974:	lsl	x0, x0, #1
    1978:	ldr	x1, [sp, #168]
    197c:	add	x0, x1, x0
    1980:	ldrh	w22, [x0]
    1984:	mov	w0, w22
    1988:	ldr	x1, [sp, #56]
    198c:	sxtw	x0, w0
    1990:	add	x0, x0, #0xc9b
    1994:	lsl	x0, x0, #4
    1998:	add	x0, x1, x0
    199c:	ldr	w0, [x0, #8]
    19a0:	add	w21, w21, w0
    19a4:	mov	w0, w22
    19a8:	ldr	x1, [sp, #56]
    19ac:	sxtw	x0, w0
    19b0:	lsl	x0, x0, #4
    19b4:	add	x0, x1, x0
    19b8:	add	x0, x0, #0xc, lsl #12
    19bc:	ldr	w0, [x0, #2492]
    19c0:	add	w20, w20, w0
    19c4:	mov	w0, w22
    19c8:	ldr	x1, [sp, #56]
    19cc:	sxtw	x0, w0
    19d0:	lsl	x0, x0, #4
    19d4:	add	x0, x1, x0
    19d8:	add	x0, x0, #0xc, lsl #12
    19dc:	ldr	w0, [x0, #2496]
    19e0:	add	w19, w19, w0
    19e4:	ldrsw	x0, [sp, #236]
    19e8:	add	x0, x0, #0x1b
    19ec:	lsl	x0, x0, #1
    19f0:	ldr	x1, [sp, #168]
    19f4:	add	x0, x1, x0
    19f8:	ldrh	w22, [x0]
    19fc:	mov	w0, w22
    1a00:	ldr	x1, [sp, #56]
    1a04:	sxtw	x0, w0
    1a08:	add	x0, x0, #0xc9b
    1a0c:	lsl	x0, x0, #4
    1a10:	add	x0, x1, x0
    1a14:	ldr	w0, [x0, #8]
    1a18:	add	w21, w21, w0
    1a1c:	mov	w0, w22
    1a20:	ldr	x1, [sp, #56]
    1a24:	sxtw	x0, w0
    1a28:	lsl	x0, x0, #4
    1a2c:	add	x0, x1, x0
    1a30:	add	x0, x0, #0xc, lsl #12
    1a34:	ldr	w0, [x0, #2492]
    1a38:	add	w20, w20, w0
    1a3c:	mov	w0, w22
    1a40:	ldr	x1, [sp, #56]
    1a44:	sxtw	x0, w0
    1a48:	lsl	x0, x0, #4
    1a4c:	add	x0, x1, x0
    1a50:	add	x0, x0, #0xc, lsl #12
    1a54:	ldr	w0, [x0, #2496]
    1a58:	add	w19, w19, w0
    1a5c:	ldrsw	x0, [sp, #236]
    1a60:	add	x0, x0, #0x1c
    1a64:	lsl	x0, x0, #1
    1a68:	ldr	x1, [sp, #168]
    1a6c:	add	x0, x1, x0
    1a70:	ldrh	w22, [x0]
    1a74:	mov	w0, w22
    1a78:	ldr	x1, [sp, #56]
    1a7c:	sxtw	x0, w0
    1a80:	add	x0, x0, #0xc9b
    1a84:	lsl	x0, x0, #4
    1a88:	add	x0, x1, x0
    1a8c:	ldr	w0, [x0, #8]
    1a90:	add	w21, w21, w0
    1a94:	mov	w0, w22
    1a98:	ldr	x1, [sp, #56]
    1a9c:	sxtw	x0, w0
    1aa0:	lsl	x0, x0, #4
    1aa4:	add	x0, x1, x0
    1aa8:	add	x0, x0, #0xc, lsl #12
    1aac:	ldr	w0, [x0, #2492]
    1ab0:	add	w20, w20, w0
    1ab4:	mov	w0, w22
    1ab8:	ldr	x1, [sp, #56]
    1abc:	sxtw	x0, w0
    1ac0:	lsl	x0, x0, #4
    1ac4:	add	x0, x1, x0
    1ac8:	add	x0, x0, #0xc, lsl #12
    1acc:	ldr	w0, [x0, #2496]
    1ad0:	add	w19, w19, w0
    1ad4:	ldrsw	x0, [sp, #236]
    1ad8:	add	x0, x0, #0x1d
    1adc:	lsl	x0, x0, #1
    1ae0:	ldr	x1, [sp, #168]
    1ae4:	add	x0, x1, x0
    1ae8:	ldrh	w22, [x0]
    1aec:	mov	w0, w22
    1af0:	ldr	x1, [sp, #56]
    1af4:	sxtw	x0, w0
    1af8:	add	x0, x0, #0xc9b
    1afc:	lsl	x0, x0, #4
    1b00:	add	x0, x1, x0
    1b04:	ldr	w0, [x0, #8]
    1b08:	add	w21, w21, w0
    1b0c:	mov	w0, w22
    1b10:	ldr	x1, [sp, #56]
    1b14:	sxtw	x0, w0
    1b18:	lsl	x0, x0, #4
    1b1c:	add	x0, x1, x0
    1b20:	add	x0, x0, #0xc, lsl #12
    1b24:	ldr	w0, [x0, #2492]
    1b28:	add	w20, w20, w0
    1b2c:	mov	w0, w22
    1b30:	ldr	x1, [sp, #56]
    1b34:	sxtw	x0, w0
    1b38:	lsl	x0, x0, #4
    1b3c:	add	x0, x1, x0
    1b40:	add	x0, x0, #0xc, lsl #12
    1b44:	ldr	w0, [x0, #2496]
    1b48:	add	w19, w19, w0
    1b4c:	ldrsw	x0, [sp, #236]
    1b50:	add	x0, x0, #0x1e
    1b54:	lsl	x0, x0, #1
    1b58:	ldr	x1, [sp, #168]
    1b5c:	add	x0, x1, x0
    1b60:	ldrh	w22, [x0]
    1b64:	mov	w0, w22
    1b68:	ldr	x1, [sp, #56]
    1b6c:	sxtw	x0, w0
    1b70:	add	x0, x0, #0xc9b
    1b74:	lsl	x0, x0, #4
    1b78:	add	x0, x1, x0
    1b7c:	ldr	w0, [x0, #8]
    1b80:	add	w21, w21, w0
    1b84:	mov	w0, w22
    1b88:	ldr	x1, [sp, #56]
    1b8c:	sxtw	x0, w0
    1b90:	lsl	x0, x0, #4
    1b94:	add	x0, x1, x0
    1b98:	add	x0, x0, #0xc, lsl #12
    1b9c:	ldr	w0, [x0, #2492]
    1ba0:	add	w20, w20, w0
    1ba4:	mov	w0, w22
    1ba8:	ldr	x1, [sp, #56]
    1bac:	sxtw	x0, w0
    1bb0:	lsl	x0, x0, #4
    1bb4:	add	x0, x1, x0
    1bb8:	add	x0, x0, #0xc, lsl #12
    1bbc:	ldr	w0, [x0, #2496]
    1bc0:	add	w19, w19, w0
    1bc4:	ldrsw	x0, [sp, #236]
    1bc8:	add	x0, x0, #0x1f
    1bcc:	lsl	x0, x0, #1
    1bd0:	ldr	x1, [sp, #168]
    1bd4:	add	x0, x1, x0
    1bd8:	ldrh	w22, [x0]
    1bdc:	mov	w0, w22
    1be0:	ldr	x1, [sp, #56]
    1be4:	sxtw	x0, w0
    1be8:	add	x0, x0, #0xc9b
    1bec:	lsl	x0, x0, #4
    1bf0:	add	x0, x1, x0
    1bf4:	ldr	w0, [x0, #8]
    1bf8:	add	w21, w21, w0
    1bfc:	mov	w0, w22
    1c00:	ldr	x1, [sp, #56]
    1c04:	sxtw	x0, w0
    1c08:	lsl	x0, x0, #4
    1c0c:	add	x0, x1, x0
    1c10:	add	x0, x0, #0xc, lsl #12
    1c14:	ldr	w0, [x0, #2492]
    1c18:	add	w20, w20, w0
    1c1c:	mov	w0, w22
    1c20:	ldr	x1, [sp, #56]
    1c24:	sxtw	x0, w0
    1c28:	lsl	x0, x0, #4
    1c2c:	add	x0, x1, x0
    1c30:	add	x0, x0, #0xc, lsl #12
    1c34:	ldr	w0, [x0, #2496]
    1c38:	add	w19, w19, w0
    1c3c:	ldrsw	x0, [sp, #236]
    1c40:	add	x0, x0, #0x20
    1c44:	lsl	x0, x0, #1
    1c48:	ldr	x1, [sp, #168]
    1c4c:	add	x0, x1, x0
    1c50:	ldrh	w22, [x0]
    1c54:	mov	w0, w22
    1c58:	ldr	x1, [sp, #56]
    1c5c:	sxtw	x0, w0
    1c60:	add	x0, x0, #0xc9b
    1c64:	lsl	x0, x0, #4
    1c68:	add	x0, x1, x0
    1c6c:	ldr	w0, [x0, #8]
    1c70:	add	w21, w21, w0
    1c74:	mov	w0, w22
    1c78:	ldr	x1, [sp, #56]
    1c7c:	sxtw	x0, w0
    1c80:	lsl	x0, x0, #4
    1c84:	add	x0, x1, x0
    1c88:	add	x0, x0, #0xc, lsl #12
    1c8c:	ldr	w0, [x0, #2492]
    1c90:	add	w20, w20, w0
    1c94:	mov	w0, w22
    1c98:	ldr	x1, [sp, #56]
    1c9c:	sxtw	x0, w0
    1ca0:	lsl	x0, x0, #4
    1ca4:	add	x0, x1, x0
    1ca8:	add	x0, x0, #0xc, lsl #12
    1cac:	ldr	w0, [x0, #2496]
    1cb0:	add	w19, w19, w0
    1cb4:	ldrsw	x0, [sp, #236]
    1cb8:	add	x0, x0, #0x21
    1cbc:	lsl	x0, x0, #1
    1cc0:	ldr	x1, [sp, #168]
    1cc4:	add	x0, x1, x0
    1cc8:	ldrh	w22, [x0]
    1ccc:	mov	w0, w22
    1cd0:	ldr	x1, [sp, #56]
    1cd4:	sxtw	x0, w0
    1cd8:	add	x0, x0, #0xc9b
    1cdc:	lsl	x0, x0, #4
    1ce0:	add	x0, x1, x0
    1ce4:	ldr	w0, [x0, #8]
    1ce8:	add	w21, w21, w0
    1cec:	mov	w0, w22
    1cf0:	ldr	x1, [sp, #56]
    1cf4:	sxtw	x0, w0
    1cf8:	lsl	x0, x0, #4
    1cfc:	add	x0, x1, x0
    1d00:	add	x0, x0, #0xc, lsl #12
    1d04:	ldr	w0, [x0, #2492]
    1d08:	add	w20, w20, w0
    1d0c:	mov	w0, w22
    1d10:	ldr	x1, [sp, #56]
    1d14:	sxtw	x0, w0
    1d18:	lsl	x0, x0, #4
    1d1c:	add	x0, x1, x0
    1d20:	add	x0, x0, #0xc, lsl #12
    1d24:	ldr	w0, [x0, #2496]
    1d28:	add	w19, w19, w0
    1d2c:	ldrsw	x0, [sp, #236]
    1d30:	add	x0, x0, #0x22
    1d34:	lsl	x0, x0, #1
    1d38:	ldr	x1, [sp, #168]
    1d3c:	add	x0, x1, x0
    1d40:	ldrh	w22, [x0]
    1d44:	mov	w0, w22
    1d48:	ldr	x1, [sp, #56]
    1d4c:	sxtw	x0, w0
    1d50:	add	x0, x0, #0xc9b
    1d54:	lsl	x0, x0, #4
    1d58:	add	x0, x1, x0
    1d5c:	ldr	w0, [x0, #8]
    1d60:	add	w21, w21, w0
    1d64:	mov	w0, w22
    1d68:	ldr	x1, [sp, #56]
    1d6c:	sxtw	x0, w0
    1d70:	lsl	x0, x0, #4
    1d74:	add	x0, x1, x0
    1d78:	add	x0, x0, #0xc, lsl #12
    1d7c:	ldr	w0, [x0, #2492]
    1d80:	add	w20, w20, w0
    1d84:	mov	w0, w22
    1d88:	ldr	x1, [sp, #56]
    1d8c:	sxtw	x0, w0
    1d90:	lsl	x0, x0, #4
    1d94:	add	x0, x1, x0
    1d98:	add	x0, x0, #0xc, lsl #12
    1d9c:	ldr	w0, [x0, #2496]
    1da0:	add	w19, w19, w0
    1da4:	ldrsw	x0, [sp, #236]
    1da8:	add	x0, x0, #0x23
    1dac:	lsl	x0, x0, #1
    1db0:	ldr	x1, [sp, #168]
    1db4:	add	x0, x1, x0
    1db8:	ldrh	w22, [x0]
    1dbc:	mov	w0, w22
    1dc0:	ldr	x1, [sp, #56]
    1dc4:	sxtw	x0, w0
    1dc8:	add	x0, x0, #0xc9b
    1dcc:	lsl	x0, x0, #4
    1dd0:	add	x0, x1, x0
    1dd4:	ldr	w0, [x0, #8]
    1dd8:	add	w21, w21, w0
    1ddc:	mov	w0, w22
    1de0:	ldr	x1, [sp, #56]
    1de4:	sxtw	x0, w0
    1de8:	lsl	x0, x0, #4
    1dec:	add	x0, x1, x0
    1df0:	add	x0, x0, #0xc, lsl #12
    1df4:	ldr	w0, [x0, #2492]
    1df8:	add	w20, w20, w0
    1dfc:	mov	w0, w22
    1e00:	ldr	x1, [sp, #56]
    1e04:	sxtw	x0, w0
    1e08:	lsl	x0, x0, #4
    1e0c:	add	x0, x1, x0
    1e10:	add	x0, x0, #0xc, lsl #12
    1e14:	ldr	w0, [x0, #2496]
    1e18:	add	w19, w19, w0
    1e1c:	ldrsw	x0, [sp, #236]
    1e20:	add	x0, x0, #0x24
    1e24:	lsl	x0, x0, #1
    1e28:	ldr	x1, [sp, #168]
    1e2c:	add	x0, x1, x0
    1e30:	ldrh	w22, [x0]
    1e34:	mov	w0, w22
    1e38:	ldr	x1, [sp, #56]
    1e3c:	sxtw	x0, w0
    1e40:	add	x0, x0, #0xc9b
    1e44:	lsl	x0, x0, #4
    1e48:	add	x0, x1, x0
    1e4c:	ldr	w0, [x0, #8]
    1e50:	add	w21, w21, w0
    1e54:	mov	w0, w22
    1e58:	ldr	x1, [sp, #56]
    1e5c:	sxtw	x0, w0
    1e60:	lsl	x0, x0, #4
    1e64:	add	x0, x1, x0
    1e68:	add	x0, x0, #0xc, lsl #12
    1e6c:	ldr	w0, [x0, #2492]
    1e70:	add	w20, w20, w0
    1e74:	mov	w0, w22
    1e78:	ldr	x1, [sp, #56]
    1e7c:	sxtw	x0, w0
    1e80:	lsl	x0, x0, #4
    1e84:	add	x0, x1, x0
    1e88:	add	x0, x0, #0xc, lsl #12
    1e8c:	ldr	w0, [x0, #2496]
    1e90:	add	w19, w19, w0
    1e94:	ldrsw	x0, [sp, #236]
    1e98:	add	x0, x0, #0x25
    1e9c:	lsl	x0, x0, #1
    1ea0:	ldr	x1, [sp, #168]
    1ea4:	add	x0, x1, x0
    1ea8:	ldrh	w22, [x0]
    1eac:	mov	w0, w22
    1eb0:	ldr	x1, [sp, #56]
    1eb4:	sxtw	x0, w0
    1eb8:	add	x0, x0, #0xc9b
    1ebc:	lsl	x0, x0, #4
    1ec0:	add	x0, x1, x0
    1ec4:	ldr	w0, [x0, #8]
    1ec8:	add	w21, w21, w0
    1ecc:	mov	w0, w22
    1ed0:	ldr	x1, [sp, #56]
    1ed4:	sxtw	x0, w0
    1ed8:	lsl	x0, x0, #4
    1edc:	add	x0, x1, x0
    1ee0:	add	x0, x0, #0xc, lsl #12
    1ee4:	ldr	w0, [x0, #2492]
    1ee8:	add	w20, w20, w0
    1eec:	mov	w0, w22
    1ef0:	ldr	x1, [sp, #56]
    1ef4:	sxtw	x0, w0
    1ef8:	lsl	x0, x0, #4
    1efc:	add	x0, x1, x0
    1f00:	add	x0, x0, #0xc, lsl #12
    1f04:	ldr	w0, [x0, #2496]
    1f08:	add	w19, w19, w0
    1f0c:	ldrsw	x0, [sp, #236]
    1f10:	add	x0, x0, #0x26
    1f14:	lsl	x0, x0, #1
    1f18:	ldr	x1, [sp, #168]
    1f1c:	add	x0, x1, x0
    1f20:	ldrh	w22, [x0]
    1f24:	mov	w0, w22
    1f28:	ldr	x1, [sp, #56]
    1f2c:	sxtw	x0, w0
    1f30:	add	x0, x0, #0xc9b
    1f34:	lsl	x0, x0, #4
    1f38:	add	x0, x1, x0
    1f3c:	ldr	w0, [x0, #8]
    1f40:	add	w21, w21, w0
    1f44:	mov	w0, w22
    1f48:	ldr	x1, [sp, #56]
    1f4c:	sxtw	x0, w0
    1f50:	lsl	x0, x0, #4
    1f54:	add	x0, x1, x0
    1f58:	add	x0, x0, #0xc, lsl #12
    1f5c:	ldr	w0, [x0, #2492]
    1f60:	add	w20, w20, w0
    1f64:	mov	w0, w22
    1f68:	ldr	x1, [sp, #56]
    1f6c:	sxtw	x0, w0
    1f70:	lsl	x0, x0, #4
    1f74:	add	x0, x1, x0
    1f78:	add	x0, x0, #0xc, lsl #12
    1f7c:	ldr	w0, [x0, #2496]
    1f80:	add	w19, w19, w0
    1f84:	ldrsw	x0, [sp, #236]
    1f88:	add	x0, x0, #0x27
    1f8c:	lsl	x0, x0, #1
    1f90:	ldr	x1, [sp, #168]
    1f94:	add	x0, x1, x0
    1f98:	ldrh	w22, [x0]
    1f9c:	mov	w0, w22
    1fa0:	ldr	x1, [sp, #56]
    1fa4:	sxtw	x0, w0
    1fa8:	add	x0, x0, #0xc9b
    1fac:	lsl	x0, x0, #4
    1fb0:	add	x0, x1, x0
    1fb4:	ldr	w0, [x0, #8]
    1fb8:	add	w21, w21, w0
    1fbc:	mov	w0, w22
    1fc0:	ldr	x1, [sp, #56]
    1fc4:	sxtw	x0, w0
    1fc8:	lsl	x0, x0, #4
    1fcc:	add	x0, x1, x0
    1fd0:	add	x0, x0, #0xc, lsl #12
    1fd4:	ldr	w0, [x0, #2492]
    1fd8:	add	w20, w20, w0
    1fdc:	mov	w0, w22
    1fe0:	ldr	x1, [sp, #56]
    1fe4:	sxtw	x0, w0
    1fe8:	lsl	x0, x0, #4
    1fec:	add	x0, x1, x0
    1ff0:	add	x0, x0, #0xc, lsl #12
    1ff4:	ldr	w0, [x0, #2496]
    1ff8:	add	w19, w19, w0
    1ffc:	ldrsw	x0, [sp, #236]
    2000:	add	x0, x0, #0x28
    2004:	lsl	x0, x0, #1
    2008:	ldr	x1, [sp, #168]
    200c:	add	x0, x1, x0
    2010:	ldrh	w22, [x0]
    2014:	mov	w0, w22
    2018:	ldr	x1, [sp, #56]
    201c:	sxtw	x0, w0
    2020:	add	x0, x0, #0xc9b
    2024:	lsl	x0, x0, #4
    2028:	add	x0, x1, x0
    202c:	ldr	w0, [x0, #8]
    2030:	add	w21, w21, w0
    2034:	mov	w0, w22
    2038:	ldr	x1, [sp, #56]
    203c:	sxtw	x0, w0
    2040:	lsl	x0, x0, #4
    2044:	add	x0, x1, x0
    2048:	add	x0, x0, #0xc, lsl #12
    204c:	ldr	w0, [x0, #2492]
    2050:	add	w20, w20, w0
    2054:	mov	w0, w22
    2058:	ldr	x1, [sp, #56]
    205c:	sxtw	x0, w0
    2060:	lsl	x0, x0, #4
    2064:	add	x0, x1, x0
    2068:	add	x0, x0, #0xc, lsl #12
    206c:	ldr	w0, [x0, #2496]
    2070:	add	w19, w19, w0
    2074:	ldrsw	x0, [sp, #236]
    2078:	add	x0, x0, #0x29
    207c:	lsl	x0, x0, #1
    2080:	ldr	x1, [sp, #168]
    2084:	add	x0, x1, x0
    2088:	ldrh	w22, [x0]
    208c:	mov	w0, w22
    2090:	ldr	x1, [sp, #56]
    2094:	sxtw	x0, w0
    2098:	add	x0, x0, #0xc9b
    209c:	lsl	x0, x0, #4
    20a0:	add	x0, x1, x0
    20a4:	ldr	w0, [x0, #8]
    20a8:	add	w21, w21, w0
    20ac:	mov	w0, w22
    20b0:	ldr	x1, [sp, #56]
    20b4:	sxtw	x0, w0
    20b8:	lsl	x0, x0, #4
    20bc:	add	x0, x1, x0
    20c0:	add	x0, x0, #0xc, lsl #12
    20c4:	ldr	w0, [x0, #2492]
    20c8:	add	w20, w20, w0
    20cc:	mov	w0, w22
    20d0:	ldr	x1, [sp, #56]
    20d4:	sxtw	x0, w0
    20d8:	lsl	x0, x0, #4
    20dc:	add	x0, x1, x0
    20e0:	add	x0, x0, #0xc, lsl #12
    20e4:	ldr	w0, [x0, #2496]
    20e8:	add	w19, w19, w0
    20ec:	ldrsw	x0, [sp, #236]
    20f0:	add	x0, x0, #0x2a
    20f4:	lsl	x0, x0, #1
    20f8:	ldr	x1, [sp, #168]
    20fc:	add	x0, x1, x0
    2100:	ldrh	w22, [x0]
    2104:	mov	w0, w22
    2108:	ldr	x1, [sp, #56]
    210c:	sxtw	x0, w0
    2110:	add	x0, x0, #0xc9b
    2114:	lsl	x0, x0, #4
    2118:	add	x0, x1, x0
    211c:	ldr	w0, [x0, #8]
    2120:	add	w21, w21, w0
    2124:	mov	w0, w22
    2128:	ldr	x1, [sp, #56]
    212c:	sxtw	x0, w0
    2130:	lsl	x0, x0, #4
    2134:	add	x0, x1, x0
    2138:	add	x0, x0, #0xc, lsl #12
    213c:	ldr	w0, [x0, #2492]
    2140:	add	w20, w20, w0
    2144:	mov	w0, w22
    2148:	ldr	x1, [sp, #56]
    214c:	sxtw	x0, w0
    2150:	lsl	x0, x0, #4
    2154:	add	x0, x1, x0
    2158:	add	x0, x0, #0xc, lsl #12
    215c:	ldr	w0, [x0, #2496]
    2160:	add	w19, w19, w0
    2164:	ldrsw	x0, [sp, #236]
    2168:	add	x0, x0, #0x2b
    216c:	lsl	x0, x0, #1
    2170:	ldr	x1, [sp, #168]
    2174:	add	x0, x1, x0
    2178:	ldrh	w22, [x0]
    217c:	mov	w0, w22
    2180:	ldr	x1, [sp, #56]
    2184:	sxtw	x0, w0
    2188:	add	x0, x0, #0xc9b
    218c:	lsl	x0, x0, #4
    2190:	add	x0, x1, x0
    2194:	ldr	w0, [x0, #8]
    2198:	add	w21, w21, w0
    219c:	mov	w0, w22
    21a0:	ldr	x1, [sp, #56]
    21a4:	sxtw	x0, w0
    21a8:	lsl	x0, x0, #4
    21ac:	add	x0, x1, x0
    21b0:	add	x0, x0, #0xc, lsl #12
    21b4:	ldr	w0, [x0, #2492]
    21b8:	add	w20, w20, w0
    21bc:	mov	w0, w22
    21c0:	ldr	x1, [sp, #56]
    21c4:	sxtw	x0, w0
    21c8:	lsl	x0, x0, #4
    21cc:	add	x0, x1, x0
    21d0:	add	x0, x0, #0xc, lsl #12
    21d4:	ldr	w0, [x0, #2496]
    21d8:	add	w19, w19, w0
    21dc:	ldrsw	x0, [sp, #236]
    21e0:	add	x0, x0, #0x2c
    21e4:	lsl	x0, x0, #1
    21e8:	ldr	x1, [sp, #168]
    21ec:	add	x0, x1, x0
    21f0:	ldrh	w22, [x0]
    21f4:	mov	w0, w22
    21f8:	ldr	x1, [sp, #56]
    21fc:	sxtw	x0, w0
    2200:	add	x0, x0, #0xc9b
    2204:	lsl	x0, x0, #4
    2208:	add	x0, x1, x0
    220c:	ldr	w0, [x0, #8]
    2210:	add	w21, w21, w0
    2214:	mov	w0, w22
    2218:	ldr	x1, [sp, #56]
    221c:	sxtw	x0, w0
    2220:	lsl	x0, x0, #4
    2224:	add	x0, x1, x0
    2228:	add	x0, x0, #0xc, lsl #12
    222c:	ldr	w0, [x0, #2492]
    2230:	add	w20, w20, w0
    2234:	mov	w0, w22
    2238:	ldr	x1, [sp, #56]
    223c:	sxtw	x0, w0
    2240:	lsl	x0, x0, #4
    2244:	add	x0, x1, x0
    2248:	add	x0, x0, #0xc, lsl #12
    224c:	ldr	w0, [x0, #2496]
    2250:	add	w19, w19, w0
    2254:	ldrsw	x0, [sp, #236]
    2258:	add	x0, x0, #0x2d
    225c:	lsl	x0, x0, #1
    2260:	ldr	x1, [sp, #168]
    2264:	add	x0, x1, x0
    2268:	ldrh	w22, [x0]
    226c:	mov	w0, w22
    2270:	ldr	x1, [sp, #56]
    2274:	sxtw	x0, w0
    2278:	add	x0, x0, #0xc9b
    227c:	lsl	x0, x0, #4
    2280:	add	x0, x1, x0
    2284:	ldr	w0, [x0, #8]
    2288:	add	w21, w21, w0
    228c:	mov	w0, w22
    2290:	ldr	x1, [sp, #56]
    2294:	sxtw	x0, w0
    2298:	lsl	x0, x0, #4
    229c:	add	x0, x1, x0
    22a0:	add	x0, x0, #0xc, lsl #12
    22a4:	ldr	w0, [x0, #2492]
    22a8:	add	w20, w20, w0
    22ac:	mov	w0, w22
    22b0:	ldr	x1, [sp, #56]
    22b4:	sxtw	x0, w0
    22b8:	lsl	x0, x0, #4
    22bc:	add	x0, x1, x0
    22c0:	add	x0, x0, #0xc, lsl #12
    22c4:	ldr	w0, [x0, #2496]
    22c8:	add	w19, w19, w0
    22cc:	ldrsw	x0, [sp, #236]
    22d0:	add	x0, x0, #0x2e
    22d4:	lsl	x0, x0, #1
    22d8:	ldr	x1, [sp, #168]
    22dc:	add	x0, x1, x0
    22e0:	ldrh	w22, [x0]
    22e4:	mov	w0, w22
    22e8:	ldr	x1, [sp, #56]
    22ec:	sxtw	x0, w0
    22f0:	add	x0, x0, #0xc9b
    22f4:	lsl	x0, x0, #4
    22f8:	add	x0, x1, x0
    22fc:	ldr	w0, [x0, #8]
    2300:	add	w21, w21, w0
    2304:	mov	w0, w22
    2308:	ldr	x1, [sp, #56]
    230c:	sxtw	x0, w0
    2310:	lsl	x0, x0, #4
    2314:	add	x0, x1, x0
    2318:	add	x0, x0, #0xc, lsl #12
    231c:	ldr	w0, [x0, #2492]
    2320:	add	w20, w20, w0
    2324:	mov	w0, w22
    2328:	ldr	x1, [sp, #56]
    232c:	sxtw	x0, w0
    2330:	lsl	x0, x0, #4
    2334:	add	x0, x1, x0
    2338:	add	x0, x0, #0xc, lsl #12
    233c:	ldr	w0, [x0, #2496]
    2340:	add	w19, w19, w0
    2344:	ldrsw	x0, [sp, #236]
    2348:	add	x0, x0, #0x2f
    234c:	lsl	x0, x0, #1
    2350:	ldr	x1, [sp, #168]
    2354:	add	x0, x1, x0
    2358:	ldrh	w22, [x0]
    235c:	mov	w0, w22
    2360:	ldr	x1, [sp, #56]
    2364:	sxtw	x0, w0
    2368:	add	x0, x0, #0xc9b
    236c:	lsl	x0, x0, #4
    2370:	add	x0, x1, x0
    2374:	ldr	w0, [x0, #8]
    2378:	add	w21, w21, w0
    237c:	mov	w0, w22
    2380:	ldr	x1, [sp, #56]
    2384:	sxtw	x0, w0
    2388:	lsl	x0, x0, #4
    238c:	add	x0, x1, x0
    2390:	add	x0, x0, #0xc, lsl #12
    2394:	ldr	w0, [x0, #2492]
    2398:	add	w20, w20, w0
    239c:	mov	w0, w22
    23a0:	ldr	x1, [sp, #56]
    23a4:	sxtw	x0, w0
    23a8:	lsl	x0, x0, #4
    23ac:	add	x0, x1, x0
    23b0:	add	x0, x0, #0xc, lsl #12
    23b4:	ldr	w0, [x0, #2496]
    23b8:	add	w19, w19, w0
    23bc:	ldrsw	x0, [sp, #236]
    23c0:	add	x0, x0, #0x30
    23c4:	lsl	x0, x0, #1
    23c8:	ldr	x1, [sp, #168]
    23cc:	add	x0, x1, x0
    23d0:	ldrh	w22, [x0]
    23d4:	mov	w0, w22
    23d8:	ldr	x1, [sp, #56]
    23dc:	sxtw	x0, w0
    23e0:	add	x0, x0, #0xc9b
    23e4:	lsl	x0, x0, #4
    23e8:	add	x0, x1, x0
    23ec:	ldr	w0, [x0, #8]
    23f0:	add	w21, w21, w0
    23f4:	mov	w0, w22
    23f8:	ldr	x1, [sp, #56]
    23fc:	sxtw	x0, w0
    2400:	lsl	x0, x0, #4
    2404:	add	x0, x1, x0
    2408:	add	x0, x0, #0xc, lsl #12
    240c:	ldr	w0, [x0, #2492]
    2410:	add	w20, w20, w0
    2414:	mov	w0, w22
    2418:	ldr	x1, [sp, #56]
    241c:	sxtw	x0, w0
    2420:	lsl	x0, x0, #4
    2424:	add	x0, x1, x0
    2428:	add	x0, x0, #0xc, lsl #12
    242c:	ldr	w0, [x0, #2496]
    2430:	add	w19, w19, w0
    2434:	ldrsw	x0, [sp, #236]
    2438:	add	x0, x0, #0x31
    243c:	lsl	x0, x0, #1
    2440:	ldr	x1, [sp, #168]
    2444:	add	x0, x1, x0
    2448:	ldrh	w22, [x0]
    244c:	mov	w0, w22
    2450:	ldr	x1, [sp, #56]
    2454:	sxtw	x0, w0
    2458:	add	x0, x0, #0xc9b
    245c:	lsl	x0, x0, #4
    2460:	add	x0, x1, x0
    2464:	ldr	w0, [x0, #8]
    2468:	add	w21, w21, w0
    246c:	mov	w0, w22
    2470:	ldr	x1, [sp, #56]
    2474:	sxtw	x0, w0
    2478:	lsl	x0, x0, #4
    247c:	add	x0, x1, x0
    2480:	add	x0, x0, #0xc, lsl #12
    2484:	ldr	w0, [x0, #2492]
    2488:	add	w20, w20, w0
    248c:	mov	w0, w22
    2490:	ldr	x1, [sp, #56]
    2494:	sxtw	x0, w0
    2498:	lsl	x0, x0, #4
    249c:	add	x0, x1, x0
    24a0:	add	x0, x0, #0xc, lsl #12
    24a4:	ldr	w0, [x0, #2496]
    24a8:	add	w19, w19, w0
    24ac:	and	w0, w21, #0xffff
    24b0:	strh	w0, [sp, #120]
    24b4:	lsr	w0, w21, #16
    24b8:	and	w0, w0, #0xffff
    24bc:	strh	w0, [sp, #122]
    24c0:	and	w0, w20, #0xffff
    24c4:	strh	w0, [sp, #124]
    24c8:	lsr	w0, w20, #16
    24cc:	and	w0, w0, #0xffff
    24d0:	strh	w0, [sp, #126]
    24d4:	and	w0, w19, #0xffff
    24d8:	strh	w0, [sp, #128]
    24dc:	lsr	w0, w19, #16
    24e0:	and	w0, w0, #0xffff
    24e4:	strh	w0, [sp, #130]
    24e8:	b	25ac <sendMTFValues+0x1ebc>
    24ec:	ldr	w0, [sp, #236]
    24f0:	str	w0, [sp, #244]
    24f4:	b	259c <sendMTFValues+0x1eac>
    24f8:	ldrsw	x0, [sp, #244]
    24fc:	lsl	x0, x0, #1
    2500:	ldr	x1, [sp, #168]
    2504:	add	x0, x1, x0
    2508:	ldrh	w0, [x0]
    250c:	strh	w0, [sp, #138]
    2510:	str	wzr, [sp, #248]
    2514:	b	2580 <sendMTFValues+0x1e90>
    2518:	ldrsw	x0, [sp, #248]
    251c:	lsl	x0, x0, #1
    2520:	add	x1, sp, #0x78
    2524:	ldrh	w2, [x1, x0]
    2528:	ldrh	w0, [sp, #138]
    252c:	ldr	x4, [sp, #56]
    2530:	sxtw	x3, w0
    2534:	ldrsw	x1, [sp, #248]
    2538:	mov	x0, x1
    253c:	lsl	x0, x0, #7
    2540:	add	x0, x0, x1
    2544:	lsl	x0, x0, #1
    2548:	add	x0, x4, x0
    254c:	add	x0, x0, x3
    2550:	add	x0, x0, #0x9, lsl #12
    2554:	ldrb	w0, [x0, #844]
    2558:	and	w0, w0, #0xffff
    255c:	add	w0, w2, w0
    2560:	and	w2, w0, #0xffff
    2564:	ldrsw	x0, [sp, #248]
    2568:	lsl	x0, x0, #1
    256c:	add	x1, sp, #0x78
    2570:	strh	w2, [x1, x0]
    2574:	ldr	w0, [sp, #248]
    2578:	add	w0, w0, #0x1
    257c:	str	w0, [sp, #248]
    2580:	ldr	w1, [sp, #248]
    2584:	ldr	w0, [sp, #196]
    2588:	cmp	w1, w0
    258c:	b.lt	2518 <sendMTFValues+0x1e28>  // b.tstop
    2590:	ldr	w0, [sp, #244]
    2594:	add	w0, w0, #0x1
    2598:	str	w0, [sp, #244]
    259c:	ldr	w1, [sp, #244]
    25a0:	ldr	w0, [sp, #232]
    25a4:	cmp	w1, w0
    25a8:	b.le	24f8 <sendMTFValues+0x1e08>
    25ac:	mov	w0, #0xc9ff                	// #51711
    25b0:	movk	w0, #0x3b9a, lsl #16
    25b4:	str	w0, [sp, #220]
    25b8:	mov	w0, #0xffffffff            	// #-1
    25bc:	str	w0, [sp, #224]
    25c0:	str	wzr, [sp, #248]
    25c4:	b	2610 <sendMTFValues+0x1f20>
    25c8:	ldrsw	x0, [sp, #248]
    25cc:	lsl	x0, x0, #1
    25d0:	add	x1, sp, #0x78
    25d4:	ldrh	w0, [x1, x0]
    25d8:	mov	w1, w0
    25dc:	ldr	w0, [sp, #220]
    25e0:	cmp	w0, w1
    25e4:	b.le	2604 <sendMTFValues+0x1f14>
    25e8:	ldrsw	x0, [sp, #248]
    25ec:	lsl	x0, x0, #1
    25f0:	add	x1, sp, #0x78
    25f4:	ldrh	w0, [x1, x0]
    25f8:	str	w0, [sp, #220]
    25fc:	ldr	w0, [sp, #248]
    2600:	str	w0, [sp, #224]
    2604:	ldr	w0, [sp, #248]
    2608:	add	w0, w0, #0x1
    260c:	str	w0, [sp, #248]
    2610:	ldr	w1, [sp, #248]
    2614:	ldr	w0, [sp, #196]
    2618:	cmp	w1, w0
    261c:	b.lt	25c8 <sendMTFValues+0x1ed8>  // b.tstop
    2620:	ldr	w1, [sp, #228]
    2624:	ldr	w0, [sp, #220]
    2628:	add	w0, w1, w0
    262c:	str	w0, [sp, #228]
    2630:	ldrsw	x0, [sp, #224]
    2634:	lsl	x0, x0, #2
    2638:	add	x1, sp, #0x60
    263c:	ldr	w0, [x1, x0]
    2640:	add	w2, w0, #0x1
    2644:	ldrsw	x0, [sp, #224]
    2648:	lsl	x0, x0, #2
    264c:	add	x1, sp, #0x60
    2650:	str	w2, [x1, x0]
    2654:	ldr	w0, [sp, #224]
    2658:	and	w2, w0, #0xff
    265c:	ldr	x1, [sp, #56]
    2660:	ldrsw	x0, [sp, #212]
    2664:	add	x0, x1, x0
    2668:	mov	w1, w2
    266c:	strb	w1, [x0, #1704]
    2670:	ldr	w0, [sp, #212]
    2674:	add	w0, w0, #0x1
    2678:	str	w0, [sp, #212]
    267c:	ldr	w0, [sp, #196]
    2680:	cmp	w0, #0x6
    2684:	b.ne	412c <sendMTFValues+0x3a3c>  // b.any
    2688:	ldr	w1, [sp, #232]
    268c:	ldr	w0, [sp, #236]
    2690:	sub	w0, w1, w0
    2694:	cmp	w0, #0x31
    2698:	b.ne	412c <sendMTFValues+0x3a3c>  // b.any
    269c:	ldrsw	x0, [sp, #236]
    26a0:	lsl	x0, x0, #1
    26a4:	ldr	x1, [sp, #168]
    26a8:	add	x0, x1, x0
    26ac:	ldrh	w0, [x0]
    26b0:	mov	w4, w0
    26b4:	ldr	x2, [sp, #56]
    26b8:	sxtw	x3, w4
    26bc:	ldrsw	x1, [sp, #224]
    26c0:	mov	x0, x1
    26c4:	lsl	x0, x0, #7
    26c8:	add	x0, x0, x1
    26cc:	lsl	x0, x0, #1
    26d0:	add	x1, x0, x3
    26d4:	mov	x0, #0x2c60                	// #11360
    26d8:	add	x0, x1, x0
    26dc:	lsl	x0, x0, #2
    26e0:	add	x0, x2, x0
    26e4:	ldr	w0, [x0, #8]
    26e8:	add	w2, w0, #0x1
    26ec:	ldr	x3, [sp, #56]
    26f0:	sxtw	x4, w4
    26f4:	ldrsw	x1, [sp, #224]
    26f8:	mov	x0, x1
    26fc:	lsl	x0, x0, #7
    2700:	add	x0, x0, x1
    2704:	lsl	x0, x0, #1
    2708:	add	x1, x0, x4
    270c:	mov	x0, #0x2c60                	// #11360
    2710:	add	x0, x1, x0
    2714:	lsl	x0, x0, #2
    2718:	add	x0, x3, x0
    271c:	str	w2, [x0, #8]
    2720:	ldrsw	x0, [sp, #236]
    2724:	add	x0, x0, #0x1
    2728:	lsl	x0, x0, #1
    272c:	ldr	x1, [sp, #168]
    2730:	add	x0, x1, x0
    2734:	ldrh	w0, [x0]
    2738:	mov	w4, w0
    273c:	ldr	x2, [sp, #56]
    2740:	sxtw	x3, w4
    2744:	ldrsw	x1, [sp, #224]
    2748:	mov	x0, x1
    274c:	lsl	x0, x0, #7
    2750:	add	x0, x0, x1
    2754:	lsl	x0, x0, #1
    2758:	add	x1, x0, x3
    275c:	mov	x0, #0x2c60                	// #11360
    2760:	add	x0, x1, x0
    2764:	lsl	x0, x0, #2
    2768:	add	x0, x2, x0
    276c:	ldr	w0, [x0, #8]
    2770:	add	w2, w0, #0x1
    2774:	ldr	x3, [sp, #56]
    2778:	sxtw	x4, w4
    277c:	ldrsw	x1, [sp, #224]
    2780:	mov	x0, x1
    2784:	lsl	x0, x0, #7
    2788:	add	x0, x0, x1
    278c:	lsl	x0, x0, #1
    2790:	add	x1, x0, x4
    2794:	mov	x0, #0x2c60                	// #11360
    2798:	add	x0, x1, x0
    279c:	lsl	x0, x0, #2
    27a0:	add	x0, x3, x0
    27a4:	str	w2, [x0, #8]
    27a8:	ldrsw	x0, [sp, #236]
    27ac:	add	x0, x0, #0x2
    27b0:	lsl	x0, x0, #1
    27b4:	ldr	x1, [sp, #168]
    27b8:	add	x0, x1, x0
    27bc:	ldrh	w0, [x0]
    27c0:	mov	w4, w0
    27c4:	ldr	x2, [sp, #56]
    27c8:	sxtw	x3, w4
    27cc:	ldrsw	x1, [sp, #224]
    27d0:	mov	x0, x1
    27d4:	lsl	x0, x0, #7
    27d8:	add	x0, x0, x1
    27dc:	lsl	x0, x0, #1
    27e0:	add	x1, x0, x3
    27e4:	mov	x0, #0x2c60                	// #11360
    27e8:	add	x0, x1, x0
    27ec:	lsl	x0, x0, #2
    27f0:	add	x0, x2, x0
    27f4:	ldr	w0, [x0, #8]
    27f8:	add	w2, w0, #0x1
    27fc:	ldr	x3, [sp, #56]
    2800:	sxtw	x4, w4
    2804:	ldrsw	x1, [sp, #224]
    2808:	mov	x0, x1
    280c:	lsl	x0, x0, #7
    2810:	add	x0, x0, x1
    2814:	lsl	x0, x0, #1
    2818:	add	x1, x0, x4
    281c:	mov	x0, #0x2c60                	// #11360
    2820:	add	x0, x1, x0
    2824:	lsl	x0, x0, #2
    2828:	add	x0, x3, x0
    282c:	str	w2, [x0, #8]
    2830:	ldrsw	x0, [sp, #236]
    2834:	add	x0, x0, #0x3
    2838:	lsl	x0, x0, #1
    283c:	ldr	x1, [sp, #168]
    2840:	add	x0, x1, x0
    2844:	ldrh	w0, [x0]
    2848:	mov	w4, w0
    284c:	ldr	x2, [sp, #56]
    2850:	sxtw	x3, w4
    2854:	ldrsw	x1, [sp, #224]
    2858:	mov	x0, x1
    285c:	lsl	x0, x0, #7
    2860:	add	x0, x0, x1
    2864:	lsl	x0, x0, #1
    2868:	add	x1, x0, x3
    286c:	mov	x0, #0x2c60                	// #11360
    2870:	add	x0, x1, x0
    2874:	lsl	x0, x0, #2
    2878:	add	x0, x2, x0
    287c:	ldr	w0, [x0, #8]
    2880:	add	w2, w0, #0x1
    2884:	ldr	x3, [sp, #56]
    2888:	sxtw	x4, w4
    288c:	ldrsw	x1, [sp, #224]
    2890:	mov	x0, x1
    2894:	lsl	x0, x0, #7
    2898:	add	x0, x0, x1
    289c:	lsl	x0, x0, #1
    28a0:	add	x1, x0, x4
    28a4:	mov	x0, #0x2c60                	// #11360
    28a8:	add	x0, x1, x0
    28ac:	lsl	x0, x0, #2
    28b0:	add	x0, x3, x0
    28b4:	str	w2, [x0, #8]
    28b8:	ldrsw	x0, [sp, #236]
    28bc:	add	x0, x0, #0x4
    28c0:	lsl	x0, x0, #1
    28c4:	ldr	x1, [sp, #168]
    28c8:	add	x0, x1, x0
    28cc:	ldrh	w0, [x0]
    28d0:	mov	w4, w0
    28d4:	ldr	x2, [sp, #56]
    28d8:	sxtw	x3, w4
    28dc:	ldrsw	x1, [sp, #224]
    28e0:	mov	x0, x1
    28e4:	lsl	x0, x0, #7
    28e8:	add	x0, x0, x1
    28ec:	lsl	x0, x0, #1
    28f0:	add	x1, x0, x3
    28f4:	mov	x0, #0x2c60                	// #11360
    28f8:	add	x0, x1, x0
    28fc:	lsl	x0, x0, #2
    2900:	add	x0, x2, x0
    2904:	ldr	w0, [x0, #8]
    2908:	add	w2, w0, #0x1
    290c:	ldr	x3, [sp, #56]
    2910:	sxtw	x4, w4
    2914:	ldrsw	x1, [sp, #224]
    2918:	mov	x0, x1
    291c:	lsl	x0, x0, #7
    2920:	add	x0, x0, x1
    2924:	lsl	x0, x0, #1
    2928:	add	x1, x0, x4
    292c:	mov	x0, #0x2c60                	// #11360
    2930:	add	x0, x1, x0
    2934:	lsl	x0, x0, #2
    2938:	add	x0, x3, x0
    293c:	str	w2, [x0, #8]
    2940:	ldrsw	x0, [sp, #236]
    2944:	add	x0, x0, #0x5
    2948:	lsl	x0, x0, #1
    294c:	ldr	x1, [sp, #168]
    2950:	add	x0, x1, x0
    2954:	ldrh	w0, [x0]
    2958:	mov	w4, w0
    295c:	ldr	x2, [sp, #56]
    2960:	sxtw	x3, w4
    2964:	ldrsw	x1, [sp, #224]
    2968:	mov	x0, x1
    296c:	lsl	x0, x0, #7
    2970:	add	x0, x0, x1
    2974:	lsl	x0, x0, #1
    2978:	add	x1, x0, x3
    297c:	mov	x0, #0x2c60                	// #11360
    2980:	add	x0, x1, x0
    2984:	lsl	x0, x0, #2
    2988:	add	x0, x2, x0
    298c:	ldr	w0, [x0, #8]
    2990:	add	w2, w0, #0x1
    2994:	ldr	x3, [sp, #56]
    2998:	sxtw	x4, w4
    299c:	ldrsw	x1, [sp, #224]
    29a0:	mov	x0, x1
    29a4:	lsl	x0, x0, #7
    29a8:	add	x0, x0, x1
    29ac:	lsl	x0, x0, #1
    29b0:	add	x1, x0, x4
    29b4:	mov	x0, #0x2c60                	// #11360
    29b8:	add	x0, x1, x0
    29bc:	lsl	x0, x0, #2
    29c0:	add	x0, x3, x0
    29c4:	str	w2, [x0, #8]
    29c8:	ldrsw	x0, [sp, #236]
    29cc:	add	x0, x0, #0x6
    29d0:	lsl	x0, x0, #1
    29d4:	ldr	x1, [sp, #168]
    29d8:	add	x0, x1, x0
    29dc:	ldrh	w0, [x0]
    29e0:	mov	w4, w0
    29e4:	ldr	x2, [sp, #56]
    29e8:	sxtw	x3, w4
    29ec:	ldrsw	x1, [sp, #224]
    29f0:	mov	x0, x1
    29f4:	lsl	x0, x0, #7
    29f8:	add	x0, x0, x1
    29fc:	lsl	x0, x0, #1
    2a00:	add	x1, x0, x3
    2a04:	mov	x0, #0x2c60                	// #11360
    2a08:	add	x0, x1, x0
    2a0c:	lsl	x0, x0, #2
    2a10:	add	x0, x2, x0
    2a14:	ldr	w0, [x0, #8]
    2a18:	add	w2, w0, #0x1
    2a1c:	ldr	x3, [sp, #56]
    2a20:	sxtw	x4, w4
    2a24:	ldrsw	x1, [sp, #224]
    2a28:	mov	x0, x1
    2a2c:	lsl	x0, x0, #7
    2a30:	add	x0, x0, x1
    2a34:	lsl	x0, x0, #1
    2a38:	add	x1, x0, x4
    2a3c:	mov	x0, #0x2c60                	// #11360
    2a40:	add	x0, x1, x0
    2a44:	lsl	x0, x0, #2
    2a48:	add	x0, x3, x0
    2a4c:	str	w2, [x0, #8]
    2a50:	ldrsw	x0, [sp, #236]
    2a54:	add	x0, x0, #0x7
    2a58:	lsl	x0, x0, #1
    2a5c:	ldr	x1, [sp, #168]
    2a60:	add	x0, x1, x0
    2a64:	ldrh	w0, [x0]
    2a68:	mov	w4, w0
    2a6c:	ldr	x2, [sp, #56]
    2a70:	sxtw	x3, w4
    2a74:	ldrsw	x1, [sp, #224]
    2a78:	mov	x0, x1
    2a7c:	lsl	x0, x0, #7
    2a80:	add	x0, x0, x1
    2a84:	lsl	x0, x0, #1
    2a88:	add	x1, x0, x3
    2a8c:	mov	x0, #0x2c60                	// #11360
    2a90:	add	x0, x1, x0
    2a94:	lsl	x0, x0, #2
    2a98:	add	x0, x2, x0
    2a9c:	ldr	w0, [x0, #8]
    2aa0:	add	w2, w0, #0x1
    2aa4:	ldr	x3, [sp, #56]
    2aa8:	sxtw	x4, w4
    2aac:	ldrsw	x1, [sp, #224]
    2ab0:	mov	x0, x1
    2ab4:	lsl	x0, x0, #7
    2ab8:	add	x0, x0, x1
    2abc:	lsl	x0, x0, #1
    2ac0:	add	x1, x0, x4
    2ac4:	mov	x0, #0x2c60                	// #11360
    2ac8:	add	x0, x1, x0
    2acc:	lsl	x0, x0, #2
    2ad0:	add	x0, x3, x0
    2ad4:	str	w2, [x0, #8]
    2ad8:	ldrsw	x0, [sp, #236]
    2adc:	add	x0, x0, #0x8
    2ae0:	lsl	x0, x0, #1
    2ae4:	ldr	x1, [sp, #168]
    2ae8:	add	x0, x1, x0
    2aec:	ldrh	w0, [x0]
    2af0:	mov	w4, w0
    2af4:	ldr	x2, [sp, #56]
    2af8:	sxtw	x3, w4
    2afc:	ldrsw	x1, [sp, #224]
    2b00:	mov	x0, x1
    2b04:	lsl	x0, x0, #7
    2b08:	add	x0, x0, x1
    2b0c:	lsl	x0, x0, #1
    2b10:	add	x1, x0, x3
    2b14:	mov	x0, #0x2c60                	// #11360
    2b18:	add	x0, x1, x0
    2b1c:	lsl	x0, x0, #2
    2b20:	add	x0, x2, x0
    2b24:	ldr	w0, [x0, #8]
    2b28:	add	w2, w0, #0x1
    2b2c:	ldr	x3, [sp, #56]
    2b30:	sxtw	x4, w4
    2b34:	ldrsw	x1, [sp, #224]
    2b38:	mov	x0, x1
    2b3c:	lsl	x0, x0, #7
    2b40:	add	x0, x0, x1
    2b44:	lsl	x0, x0, #1
    2b48:	add	x1, x0, x4
    2b4c:	mov	x0, #0x2c60                	// #11360
    2b50:	add	x0, x1, x0
    2b54:	lsl	x0, x0, #2
    2b58:	add	x0, x3, x0
    2b5c:	str	w2, [x0, #8]
    2b60:	ldrsw	x0, [sp, #236]
    2b64:	add	x0, x0, #0x9
    2b68:	lsl	x0, x0, #1
    2b6c:	ldr	x1, [sp, #168]
    2b70:	add	x0, x1, x0
    2b74:	ldrh	w0, [x0]
    2b78:	mov	w4, w0
    2b7c:	ldr	x2, [sp, #56]
    2b80:	sxtw	x3, w4
    2b84:	ldrsw	x1, [sp, #224]
    2b88:	mov	x0, x1
    2b8c:	lsl	x0, x0, #7
    2b90:	add	x0, x0, x1
    2b94:	lsl	x0, x0, #1
    2b98:	add	x1, x0, x3
    2b9c:	mov	x0, #0x2c60                	// #11360
    2ba0:	add	x0, x1, x0
    2ba4:	lsl	x0, x0, #2
    2ba8:	add	x0, x2, x0
    2bac:	ldr	w0, [x0, #8]
    2bb0:	add	w2, w0, #0x1
    2bb4:	ldr	x3, [sp, #56]
    2bb8:	sxtw	x4, w4
    2bbc:	ldrsw	x1, [sp, #224]
    2bc0:	mov	x0, x1
    2bc4:	lsl	x0, x0, #7
    2bc8:	add	x0, x0, x1
    2bcc:	lsl	x0, x0, #1
    2bd0:	add	x1, x0, x4
    2bd4:	mov	x0, #0x2c60                	// #11360
    2bd8:	add	x0, x1, x0
    2bdc:	lsl	x0, x0, #2
    2be0:	add	x0, x3, x0
    2be4:	str	w2, [x0, #8]
    2be8:	ldrsw	x0, [sp, #236]
    2bec:	add	x0, x0, #0xa
    2bf0:	lsl	x0, x0, #1
    2bf4:	ldr	x1, [sp, #168]
    2bf8:	add	x0, x1, x0
    2bfc:	ldrh	w0, [x0]
    2c00:	mov	w4, w0
    2c04:	ldr	x2, [sp, #56]
    2c08:	sxtw	x3, w4
    2c0c:	ldrsw	x1, [sp, #224]
    2c10:	mov	x0, x1
    2c14:	lsl	x0, x0, #7
    2c18:	add	x0, x0, x1
    2c1c:	lsl	x0, x0, #1
    2c20:	add	x1, x0, x3
    2c24:	mov	x0, #0x2c60                	// #11360
    2c28:	add	x0, x1, x0
    2c2c:	lsl	x0, x0, #2
    2c30:	add	x0, x2, x0
    2c34:	ldr	w0, [x0, #8]
    2c38:	add	w2, w0, #0x1
    2c3c:	ldr	x3, [sp, #56]
    2c40:	sxtw	x4, w4
    2c44:	ldrsw	x1, [sp, #224]
    2c48:	mov	x0, x1
    2c4c:	lsl	x0, x0, #7
    2c50:	add	x0, x0, x1
    2c54:	lsl	x0, x0, #1
    2c58:	add	x1, x0, x4
    2c5c:	mov	x0, #0x2c60                	// #11360
    2c60:	add	x0, x1, x0
    2c64:	lsl	x0, x0, #2
    2c68:	add	x0, x3, x0
    2c6c:	str	w2, [x0, #8]
    2c70:	ldrsw	x0, [sp, #236]
    2c74:	add	x0, x0, #0xb
    2c78:	lsl	x0, x0, #1
    2c7c:	ldr	x1, [sp, #168]
    2c80:	add	x0, x1, x0
    2c84:	ldrh	w0, [x0]
    2c88:	mov	w4, w0
    2c8c:	ldr	x2, [sp, #56]
    2c90:	sxtw	x3, w4
    2c94:	ldrsw	x1, [sp, #224]
    2c98:	mov	x0, x1
    2c9c:	lsl	x0, x0, #7
    2ca0:	add	x0, x0, x1
    2ca4:	lsl	x0, x0, #1
    2ca8:	add	x1, x0, x3
    2cac:	mov	x0, #0x2c60                	// #11360
    2cb0:	add	x0, x1, x0
    2cb4:	lsl	x0, x0, #2
    2cb8:	add	x0, x2, x0
    2cbc:	ldr	w0, [x0, #8]
    2cc0:	add	w2, w0, #0x1
    2cc4:	ldr	x3, [sp, #56]
    2cc8:	sxtw	x4, w4
    2ccc:	ldrsw	x1, [sp, #224]
    2cd0:	mov	x0, x1
    2cd4:	lsl	x0, x0, #7
    2cd8:	add	x0, x0, x1
    2cdc:	lsl	x0, x0, #1
    2ce0:	add	x1, x0, x4
    2ce4:	mov	x0, #0x2c60                	// #11360
    2ce8:	add	x0, x1, x0
    2cec:	lsl	x0, x0, #2
    2cf0:	add	x0, x3, x0
    2cf4:	str	w2, [x0, #8]
    2cf8:	ldrsw	x0, [sp, #236]
    2cfc:	add	x0, x0, #0xc
    2d00:	lsl	x0, x0, #1
    2d04:	ldr	x1, [sp, #168]
    2d08:	add	x0, x1, x0
    2d0c:	ldrh	w0, [x0]
    2d10:	mov	w4, w0
    2d14:	ldr	x2, [sp, #56]
    2d18:	sxtw	x3, w4
    2d1c:	ldrsw	x1, [sp, #224]
    2d20:	mov	x0, x1
    2d24:	lsl	x0, x0, #7
    2d28:	add	x0, x0, x1
    2d2c:	lsl	x0, x0, #1
    2d30:	add	x1, x0, x3
    2d34:	mov	x0, #0x2c60                	// #11360
    2d38:	add	x0, x1, x0
    2d3c:	lsl	x0, x0, #2
    2d40:	add	x0, x2, x0
    2d44:	ldr	w0, [x0, #8]
    2d48:	add	w2, w0, #0x1
    2d4c:	ldr	x3, [sp, #56]
    2d50:	sxtw	x4, w4
    2d54:	ldrsw	x1, [sp, #224]
    2d58:	mov	x0, x1
    2d5c:	lsl	x0, x0, #7
    2d60:	add	x0, x0, x1
    2d64:	lsl	x0, x0, #1
    2d68:	add	x1, x0, x4
    2d6c:	mov	x0, #0x2c60                	// #11360
    2d70:	add	x0, x1, x0
    2d74:	lsl	x0, x0, #2
    2d78:	add	x0, x3, x0
    2d7c:	str	w2, [x0, #8]
    2d80:	ldrsw	x0, [sp, #236]
    2d84:	add	x0, x0, #0xd
    2d88:	lsl	x0, x0, #1
    2d8c:	ldr	x1, [sp, #168]
    2d90:	add	x0, x1, x0
    2d94:	ldrh	w0, [x0]
    2d98:	mov	w4, w0
    2d9c:	ldr	x2, [sp, #56]
    2da0:	sxtw	x3, w4
    2da4:	ldrsw	x1, [sp, #224]
    2da8:	mov	x0, x1
    2dac:	lsl	x0, x0, #7
    2db0:	add	x0, x0, x1
    2db4:	lsl	x0, x0, #1
    2db8:	add	x1, x0, x3
    2dbc:	mov	x0, #0x2c60                	// #11360
    2dc0:	add	x0, x1, x0
    2dc4:	lsl	x0, x0, #2
    2dc8:	add	x0, x2, x0
    2dcc:	ldr	w0, [x0, #8]
    2dd0:	add	w2, w0, #0x1
    2dd4:	ldr	x3, [sp, #56]
    2dd8:	sxtw	x4, w4
    2ddc:	ldrsw	x1, [sp, #224]
    2de0:	mov	x0, x1
    2de4:	lsl	x0, x0, #7
    2de8:	add	x0, x0, x1
    2dec:	lsl	x0, x0, #1
    2df0:	add	x1, x0, x4
    2df4:	mov	x0, #0x2c60                	// #11360
    2df8:	add	x0, x1, x0
    2dfc:	lsl	x0, x0, #2
    2e00:	add	x0, x3, x0
    2e04:	str	w2, [x0, #8]
    2e08:	ldrsw	x0, [sp, #236]
    2e0c:	add	x0, x0, #0xe
    2e10:	lsl	x0, x0, #1
    2e14:	ldr	x1, [sp, #168]
    2e18:	add	x0, x1, x0
    2e1c:	ldrh	w0, [x0]
    2e20:	mov	w4, w0
    2e24:	ldr	x2, [sp, #56]
    2e28:	sxtw	x3, w4
    2e2c:	ldrsw	x1, [sp, #224]
    2e30:	mov	x0, x1
    2e34:	lsl	x0, x0, #7
    2e38:	add	x0, x0, x1
    2e3c:	lsl	x0, x0, #1
    2e40:	add	x1, x0, x3
    2e44:	mov	x0, #0x2c60                	// #11360
    2e48:	add	x0, x1, x0
    2e4c:	lsl	x0, x0, #2
    2e50:	add	x0, x2, x0
    2e54:	ldr	w0, [x0, #8]
    2e58:	add	w2, w0, #0x1
    2e5c:	ldr	x3, [sp, #56]
    2e60:	sxtw	x4, w4
    2e64:	ldrsw	x1, [sp, #224]
    2e68:	mov	x0, x1
    2e6c:	lsl	x0, x0, #7
    2e70:	add	x0, x0, x1
    2e74:	lsl	x0, x0, #1
    2e78:	add	x1, x0, x4
    2e7c:	mov	x0, #0x2c60                	// #11360
    2e80:	add	x0, x1, x0
    2e84:	lsl	x0, x0, #2
    2e88:	add	x0, x3, x0
    2e8c:	str	w2, [x0, #8]
    2e90:	ldrsw	x0, [sp, #236]
    2e94:	add	x0, x0, #0xf
    2e98:	lsl	x0, x0, #1
    2e9c:	ldr	x1, [sp, #168]
    2ea0:	add	x0, x1, x0
    2ea4:	ldrh	w0, [x0]
    2ea8:	mov	w4, w0
    2eac:	ldr	x2, [sp, #56]
    2eb0:	sxtw	x3, w4
    2eb4:	ldrsw	x1, [sp, #224]
    2eb8:	mov	x0, x1
    2ebc:	lsl	x0, x0, #7
    2ec0:	add	x0, x0, x1
    2ec4:	lsl	x0, x0, #1
    2ec8:	add	x1, x0, x3
    2ecc:	mov	x0, #0x2c60                	// #11360
    2ed0:	add	x0, x1, x0
    2ed4:	lsl	x0, x0, #2
    2ed8:	add	x0, x2, x0
    2edc:	ldr	w0, [x0, #8]
    2ee0:	add	w2, w0, #0x1
    2ee4:	ldr	x3, [sp, #56]
    2ee8:	sxtw	x4, w4
    2eec:	ldrsw	x1, [sp, #224]
    2ef0:	mov	x0, x1
    2ef4:	lsl	x0, x0, #7
    2ef8:	add	x0, x0, x1
    2efc:	lsl	x0, x0, #1
    2f00:	add	x1, x0, x4
    2f04:	mov	x0, #0x2c60                	// #11360
    2f08:	add	x0, x1, x0
    2f0c:	lsl	x0, x0, #2
    2f10:	add	x0, x3, x0
    2f14:	str	w2, [x0, #8]
    2f18:	ldrsw	x0, [sp, #236]
    2f1c:	add	x0, x0, #0x10
    2f20:	lsl	x0, x0, #1
    2f24:	ldr	x1, [sp, #168]
    2f28:	add	x0, x1, x0
    2f2c:	ldrh	w0, [x0]
    2f30:	mov	w4, w0
    2f34:	ldr	x2, [sp, #56]
    2f38:	sxtw	x3, w4
    2f3c:	ldrsw	x1, [sp, #224]
    2f40:	mov	x0, x1
    2f44:	lsl	x0, x0, #7
    2f48:	add	x0, x0, x1
    2f4c:	lsl	x0, x0, #1
    2f50:	add	x1, x0, x3
    2f54:	mov	x0, #0x2c60                	// #11360
    2f58:	add	x0, x1, x0
    2f5c:	lsl	x0, x0, #2
    2f60:	add	x0, x2, x0
    2f64:	ldr	w0, [x0, #8]
    2f68:	add	w2, w0, #0x1
    2f6c:	ldr	x3, [sp, #56]
    2f70:	sxtw	x4, w4
    2f74:	ldrsw	x1, [sp, #224]
    2f78:	mov	x0, x1
    2f7c:	lsl	x0, x0, #7
    2f80:	add	x0, x0, x1
    2f84:	lsl	x0, x0, #1
    2f88:	add	x1, x0, x4
    2f8c:	mov	x0, #0x2c60                	// #11360
    2f90:	add	x0, x1, x0
    2f94:	lsl	x0, x0, #2
    2f98:	add	x0, x3, x0
    2f9c:	str	w2, [x0, #8]
    2fa0:	ldrsw	x0, [sp, #236]
    2fa4:	add	x0, x0, #0x11
    2fa8:	lsl	x0, x0, #1
    2fac:	ldr	x1, [sp, #168]
    2fb0:	add	x0, x1, x0
    2fb4:	ldrh	w0, [x0]
    2fb8:	mov	w4, w0
    2fbc:	ldr	x2, [sp, #56]
    2fc0:	sxtw	x3, w4
    2fc4:	ldrsw	x1, [sp, #224]
    2fc8:	mov	x0, x1
    2fcc:	lsl	x0, x0, #7
    2fd0:	add	x0, x0, x1
    2fd4:	lsl	x0, x0, #1
    2fd8:	add	x1, x0, x3
    2fdc:	mov	x0, #0x2c60                	// #11360
    2fe0:	add	x0, x1, x0
    2fe4:	lsl	x0, x0, #2
    2fe8:	add	x0, x2, x0
    2fec:	ldr	w0, [x0, #8]
    2ff0:	add	w2, w0, #0x1
    2ff4:	ldr	x3, [sp, #56]
    2ff8:	sxtw	x4, w4
    2ffc:	ldrsw	x1, [sp, #224]
    3000:	mov	x0, x1
    3004:	lsl	x0, x0, #7
    3008:	add	x0, x0, x1
    300c:	lsl	x0, x0, #1
    3010:	add	x1, x0, x4
    3014:	mov	x0, #0x2c60                	// #11360
    3018:	add	x0, x1, x0
    301c:	lsl	x0, x0, #2
    3020:	add	x0, x3, x0
    3024:	str	w2, [x0, #8]
    3028:	ldrsw	x0, [sp, #236]
    302c:	add	x0, x0, #0x12
    3030:	lsl	x0, x0, #1
    3034:	ldr	x1, [sp, #168]
    3038:	add	x0, x1, x0
    303c:	ldrh	w0, [x0]
    3040:	mov	w4, w0
    3044:	ldr	x2, [sp, #56]
    3048:	sxtw	x3, w4
    304c:	ldrsw	x1, [sp, #224]
    3050:	mov	x0, x1
    3054:	lsl	x0, x0, #7
    3058:	add	x0, x0, x1
    305c:	lsl	x0, x0, #1
    3060:	add	x1, x0, x3
    3064:	mov	x0, #0x2c60                	// #11360
    3068:	add	x0, x1, x0
    306c:	lsl	x0, x0, #2
    3070:	add	x0, x2, x0
    3074:	ldr	w0, [x0, #8]
    3078:	add	w2, w0, #0x1
    307c:	ldr	x3, [sp, #56]
    3080:	sxtw	x4, w4
    3084:	ldrsw	x1, [sp, #224]
    3088:	mov	x0, x1
    308c:	lsl	x0, x0, #7
    3090:	add	x0, x0, x1
    3094:	lsl	x0, x0, #1
    3098:	add	x1, x0, x4
    309c:	mov	x0, #0x2c60                	// #11360
    30a0:	add	x0, x1, x0
    30a4:	lsl	x0, x0, #2
    30a8:	add	x0, x3, x0
    30ac:	str	w2, [x0, #8]
    30b0:	ldrsw	x0, [sp, #236]
    30b4:	add	x0, x0, #0x13
    30b8:	lsl	x0, x0, #1
    30bc:	ldr	x1, [sp, #168]
    30c0:	add	x0, x1, x0
    30c4:	ldrh	w0, [x0]
    30c8:	mov	w4, w0
    30cc:	ldr	x2, [sp, #56]
    30d0:	sxtw	x3, w4
    30d4:	ldrsw	x1, [sp, #224]
    30d8:	mov	x0, x1
    30dc:	lsl	x0, x0, #7
    30e0:	add	x0, x0, x1
    30e4:	lsl	x0, x0, #1
    30e8:	add	x1, x0, x3
    30ec:	mov	x0, #0x2c60                	// #11360
    30f0:	add	x0, x1, x0
    30f4:	lsl	x0, x0, #2
    30f8:	add	x0, x2, x0
    30fc:	ldr	w0, [x0, #8]
    3100:	add	w2, w0, #0x1
    3104:	ldr	x3, [sp, #56]
    3108:	sxtw	x4, w4
    310c:	ldrsw	x1, [sp, #224]
    3110:	mov	x0, x1
    3114:	lsl	x0, x0, #7
    3118:	add	x0, x0, x1
    311c:	lsl	x0, x0, #1
    3120:	add	x1, x0, x4
    3124:	mov	x0, #0x2c60                	// #11360
    3128:	add	x0, x1, x0
    312c:	lsl	x0, x0, #2
    3130:	add	x0, x3, x0
    3134:	str	w2, [x0, #8]
    3138:	ldrsw	x0, [sp, #236]
    313c:	add	x0, x0, #0x14
    3140:	lsl	x0, x0, #1
    3144:	ldr	x1, [sp, #168]
    3148:	add	x0, x1, x0
    314c:	ldrh	w0, [x0]
    3150:	mov	w4, w0
    3154:	ldr	x2, [sp, #56]
    3158:	sxtw	x3, w4
    315c:	ldrsw	x1, [sp, #224]
    3160:	mov	x0, x1
    3164:	lsl	x0, x0, #7
    3168:	add	x0, x0, x1
    316c:	lsl	x0, x0, #1
    3170:	add	x1, x0, x3
    3174:	mov	x0, #0x2c60                	// #11360
    3178:	add	x0, x1, x0
    317c:	lsl	x0, x0, #2
    3180:	add	x0, x2, x0
    3184:	ldr	w0, [x0, #8]
    3188:	add	w2, w0, #0x1
    318c:	ldr	x3, [sp, #56]
    3190:	sxtw	x4, w4
    3194:	ldrsw	x1, [sp, #224]
    3198:	mov	x0, x1
    319c:	lsl	x0, x0, #7
    31a0:	add	x0, x0, x1
    31a4:	lsl	x0, x0, #1
    31a8:	add	x1, x0, x4
    31ac:	mov	x0, #0x2c60                	// #11360
    31b0:	add	x0, x1, x0
    31b4:	lsl	x0, x0, #2
    31b8:	add	x0, x3, x0
    31bc:	str	w2, [x0, #8]
    31c0:	ldrsw	x0, [sp, #236]
    31c4:	add	x0, x0, #0x15
    31c8:	lsl	x0, x0, #1
    31cc:	ldr	x1, [sp, #168]
    31d0:	add	x0, x1, x0
    31d4:	ldrh	w0, [x0]
    31d8:	mov	w4, w0
    31dc:	ldr	x2, [sp, #56]
    31e0:	sxtw	x3, w4
    31e4:	ldrsw	x1, [sp, #224]
    31e8:	mov	x0, x1
    31ec:	lsl	x0, x0, #7
    31f0:	add	x0, x0, x1
    31f4:	lsl	x0, x0, #1
    31f8:	add	x1, x0, x3
    31fc:	mov	x0, #0x2c60                	// #11360
    3200:	add	x0, x1, x0
    3204:	lsl	x0, x0, #2
    3208:	add	x0, x2, x0
    320c:	ldr	w0, [x0, #8]
    3210:	add	w2, w0, #0x1
    3214:	ldr	x3, [sp, #56]
    3218:	sxtw	x4, w4
    321c:	ldrsw	x1, [sp, #224]
    3220:	mov	x0, x1
    3224:	lsl	x0, x0, #7
    3228:	add	x0, x0, x1
    322c:	lsl	x0, x0, #1
    3230:	add	x1, x0, x4
    3234:	mov	x0, #0x2c60                	// #11360
    3238:	add	x0, x1, x0
    323c:	lsl	x0, x0, #2
    3240:	add	x0, x3, x0
    3244:	str	w2, [x0, #8]
    3248:	ldrsw	x0, [sp, #236]
    324c:	add	x0, x0, #0x16
    3250:	lsl	x0, x0, #1
    3254:	ldr	x1, [sp, #168]
    3258:	add	x0, x1, x0
    325c:	ldrh	w0, [x0]
    3260:	mov	w4, w0
    3264:	ldr	x2, [sp, #56]
    3268:	sxtw	x3, w4
    326c:	ldrsw	x1, [sp, #224]
    3270:	mov	x0, x1
    3274:	lsl	x0, x0, #7
    3278:	add	x0, x0, x1
    327c:	lsl	x0, x0, #1
    3280:	add	x1, x0, x3
    3284:	mov	x0, #0x2c60                	// #11360
    3288:	add	x0, x1, x0
    328c:	lsl	x0, x0, #2
    3290:	add	x0, x2, x0
    3294:	ldr	w0, [x0, #8]
    3298:	add	w2, w0, #0x1
    329c:	ldr	x3, [sp, #56]
    32a0:	sxtw	x4, w4
    32a4:	ldrsw	x1, [sp, #224]
    32a8:	mov	x0, x1
    32ac:	lsl	x0, x0, #7
    32b0:	add	x0, x0, x1
    32b4:	lsl	x0, x0, #1
    32b8:	add	x1, x0, x4
    32bc:	mov	x0, #0x2c60                	// #11360
    32c0:	add	x0, x1, x0
    32c4:	lsl	x0, x0, #2
    32c8:	add	x0, x3, x0
    32cc:	str	w2, [x0, #8]
    32d0:	ldrsw	x0, [sp, #236]
    32d4:	add	x0, x0, #0x17
    32d8:	lsl	x0, x0, #1
    32dc:	ldr	x1, [sp, #168]
    32e0:	add	x0, x1, x0
    32e4:	ldrh	w0, [x0]
    32e8:	mov	w4, w0
    32ec:	ldr	x2, [sp, #56]
    32f0:	sxtw	x3, w4
    32f4:	ldrsw	x1, [sp, #224]
    32f8:	mov	x0, x1
    32fc:	lsl	x0, x0, #7
    3300:	add	x0, x0, x1
    3304:	lsl	x0, x0, #1
    3308:	add	x1, x0, x3
    330c:	mov	x0, #0x2c60                	// #11360
    3310:	add	x0, x1, x0
    3314:	lsl	x0, x0, #2
    3318:	add	x0, x2, x0
    331c:	ldr	w0, [x0, #8]
    3320:	add	w2, w0, #0x1
    3324:	ldr	x3, [sp, #56]
    3328:	sxtw	x4, w4
    332c:	ldrsw	x1, [sp, #224]
    3330:	mov	x0, x1
    3334:	lsl	x0, x0, #7
    3338:	add	x0, x0, x1
    333c:	lsl	x0, x0, #1
    3340:	add	x1, x0, x4
    3344:	mov	x0, #0x2c60                	// #11360
    3348:	add	x0, x1, x0
    334c:	lsl	x0, x0, #2
    3350:	add	x0, x3, x0
    3354:	str	w2, [x0, #8]
    3358:	ldrsw	x0, [sp, #236]
    335c:	add	x0, x0, #0x18
    3360:	lsl	x0, x0, #1
    3364:	ldr	x1, [sp, #168]
    3368:	add	x0, x1, x0
    336c:	ldrh	w0, [x0]
    3370:	mov	w4, w0
    3374:	ldr	x2, [sp, #56]
    3378:	sxtw	x3, w4
    337c:	ldrsw	x1, [sp, #224]
    3380:	mov	x0, x1
    3384:	lsl	x0, x0, #7
    3388:	add	x0, x0, x1
    338c:	lsl	x0, x0, #1
    3390:	add	x1, x0, x3
    3394:	mov	x0, #0x2c60                	// #11360
    3398:	add	x0, x1, x0
    339c:	lsl	x0, x0, #2
    33a0:	add	x0, x2, x0
    33a4:	ldr	w0, [x0, #8]
    33a8:	add	w2, w0, #0x1
    33ac:	ldr	x3, [sp, #56]
    33b0:	sxtw	x4, w4
    33b4:	ldrsw	x1, [sp, #224]
    33b8:	mov	x0, x1
    33bc:	lsl	x0, x0, #7
    33c0:	add	x0, x0, x1
    33c4:	lsl	x0, x0, #1
    33c8:	add	x1, x0, x4
    33cc:	mov	x0, #0x2c60                	// #11360
    33d0:	add	x0, x1, x0
    33d4:	lsl	x0, x0, #2
    33d8:	add	x0, x3, x0
    33dc:	str	w2, [x0, #8]
    33e0:	ldrsw	x0, [sp, #236]
    33e4:	add	x0, x0, #0x19
    33e8:	lsl	x0, x0, #1
    33ec:	ldr	x1, [sp, #168]
    33f0:	add	x0, x1, x0
    33f4:	ldrh	w0, [x0]
    33f8:	mov	w4, w0
    33fc:	ldr	x2, [sp, #56]
    3400:	sxtw	x3, w4
    3404:	ldrsw	x1, [sp, #224]
    3408:	mov	x0, x1
    340c:	lsl	x0, x0, #7
    3410:	add	x0, x0, x1
    3414:	lsl	x0, x0, #1
    3418:	add	x1, x0, x3
    341c:	mov	x0, #0x2c60                	// #11360
    3420:	add	x0, x1, x0
    3424:	lsl	x0, x0, #2
    3428:	add	x0, x2, x0
    342c:	ldr	w0, [x0, #8]
    3430:	add	w2, w0, #0x1
    3434:	ldr	x3, [sp, #56]
    3438:	sxtw	x4, w4
    343c:	ldrsw	x1, [sp, #224]
    3440:	mov	x0, x1
    3444:	lsl	x0, x0, #7
    3448:	add	x0, x0, x1
    344c:	lsl	x0, x0, #1
    3450:	add	x1, x0, x4
    3454:	mov	x0, #0x2c60                	// #11360
    3458:	add	x0, x1, x0
    345c:	lsl	x0, x0, #2
    3460:	add	x0, x3, x0
    3464:	str	w2, [x0, #8]
    3468:	ldrsw	x0, [sp, #236]
    346c:	add	x0, x0, #0x1a
    3470:	lsl	x0, x0, #1
    3474:	ldr	x1, [sp, #168]
    3478:	add	x0, x1, x0
    347c:	ldrh	w0, [x0]
    3480:	mov	w4, w0
    3484:	ldr	x2, [sp, #56]
    3488:	sxtw	x3, w4
    348c:	ldrsw	x1, [sp, #224]
    3490:	mov	x0, x1
    3494:	lsl	x0, x0, #7
    3498:	add	x0, x0, x1
    349c:	lsl	x0, x0, #1
    34a0:	add	x1, x0, x3
    34a4:	mov	x0, #0x2c60                	// #11360
    34a8:	add	x0, x1, x0
    34ac:	lsl	x0, x0, #2
    34b0:	add	x0, x2, x0
    34b4:	ldr	w0, [x0, #8]
    34b8:	add	w2, w0, #0x1
    34bc:	ldr	x3, [sp, #56]
    34c0:	sxtw	x4, w4
    34c4:	ldrsw	x1, [sp, #224]
    34c8:	mov	x0, x1
    34cc:	lsl	x0, x0, #7
    34d0:	add	x0, x0, x1
    34d4:	lsl	x0, x0, #1
    34d8:	add	x1, x0, x4
    34dc:	mov	x0, #0x2c60                	// #11360
    34e0:	add	x0, x1, x0
    34e4:	lsl	x0, x0, #2
    34e8:	add	x0, x3, x0
    34ec:	str	w2, [x0, #8]
    34f0:	ldrsw	x0, [sp, #236]
    34f4:	add	x0, x0, #0x1b
    34f8:	lsl	x0, x0, #1
    34fc:	ldr	x1, [sp, #168]
    3500:	add	x0, x1, x0
    3504:	ldrh	w0, [x0]
    3508:	mov	w4, w0
    350c:	ldr	x2, [sp, #56]
    3510:	sxtw	x3, w4
    3514:	ldrsw	x1, [sp, #224]
    3518:	mov	x0, x1
    351c:	lsl	x0, x0, #7
    3520:	add	x0, x0, x1
    3524:	lsl	x0, x0, #1
    3528:	add	x1, x0, x3
    352c:	mov	x0, #0x2c60                	// #11360
    3530:	add	x0, x1, x0
    3534:	lsl	x0, x0, #2
    3538:	add	x0, x2, x0
    353c:	ldr	w0, [x0, #8]
    3540:	add	w2, w0, #0x1
    3544:	ldr	x3, [sp, #56]
    3548:	sxtw	x4, w4
    354c:	ldrsw	x1, [sp, #224]
    3550:	mov	x0, x1
    3554:	lsl	x0, x0, #7
    3558:	add	x0, x0, x1
    355c:	lsl	x0, x0, #1
    3560:	add	x1, x0, x4
    3564:	mov	x0, #0x2c60                	// #11360
    3568:	add	x0, x1, x0
    356c:	lsl	x0, x0, #2
    3570:	add	x0, x3, x0
    3574:	str	w2, [x0, #8]
    3578:	ldrsw	x0, [sp, #236]
    357c:	add	x0, x0, #0x1c
    3580:	lsl	x0, x0, #1
    3584:	ldr	x1, [sp, #168]
    3588:	add	x0, x1, x0
    358c:	ldrh	w0, [x0]
    3590:	mov	w4, w0
    3594:	ldr	x2, [sp, #56]
    3598:	sxtw	x3, w4
    359c:	ldrsw	x1, [sp, #224]
    35a0:	mov	x0, x1
    35a4:	lsl	x0, x0, #7
    35a8:	add	x0, x0, x1
    35ac:	lsl	x0, x0, #1
    35b0:	add	x1, x0, x3
    35b4:	mov	x0, #0x2c60                	// #11360
    35b8:	add	x0, x1, x0
    35bc:	lsl	x0, x0, #2
    35c0:	add	x0, x2, x0
    35c4:	ldr	w0, [x0, #8]
    35c8:	add	w2, w0, #0x1
    35cc:	ldr	x3, [sp, #56]
    35d0:	sxtw	x4, w4
    35d4:	ldrsw	x1, [sp, #224]
    35d8:	mov	x0, x1
    35dc:	lsl	x0, x0, #7
    35e0:	add	x0, x0, x1
    35e4:	lsl	x0, x0, #1
    35e8:	add	x1, x0, x4
    35ec:	mov	x0, #0x2c60                	// #11360
    35f0:	add	x0, x1, x0
    35f4:	lsl	x0, x0, #2
    35f8:	add	x0, x3, x0
    35fc:	str	w2, [x0, #8]
    3600:	ldrsw	x0, [sp, #236]
    3604:	add	x0, x0, #0x1d
    3608:	lsl	x0, x0, #1
    360c:	ldr	x1, [sp, #168]
    3610:	add	x0, x1, x0
    3614:	ldrh	w0, [x0]
    3618:	mov	w4, w0
    361c:	ldr	x2, [sp, #56]
    3620:	sxtw	x3, w4
    3624:	ldrsw	x1, [sp, #224]
    3628:	mov	x0, x1
    362c:	lsl	x0, x0, #7
    3630:	add	x0, x0, x1
    3634:	lsl	x0, x0, #1
    3638:	add	x1, x0, x3
    363c:	mov	x0, #0x2c60                	// #11360
    3640:	add	x0, x1, x0
    3644:	lsl	x0, x0, #2
    3648:	add	x0, x2, x0
    364c:	ldr	w0, [x0, #8]
    3650:	add	w2, w0, #0x1
    3654:	ldr	x3, [sp, #56]
    3658:	sxtw	x4, w4
    365c:	ldrsw	x1, [sp, #224]
    3660:	mov	x0, x1
    3664:	lsl	x0, x0, #7
    3668:	add	x0, x0, x1
    366c:	lsl	x0, x0, #1
    3670:	add	x1, x0, x4
    3674:	mov	x0, #0x2c60                	// #11360
    3678:	add	x0, x1, x0
    367c:	lsl	x0, x0, #2
    3680:	add	x0, x3, x0
    3684:	str	w2, [x0, #8]
    3688:	ldrsw	x0, [sp, #236]
    368c:	add	x0, x0, #0x1e
    3690:	lsl	x0, x0, #1
    3694:	ldr	x1, [sp, #168]
    3698:	add	x0, x1, x0
    369c:	ldrh	w0, [x0]
    36a0:	mov	w4, w0
    36a4:	ldr	x2, [sp, #56]
    36a8:	sxtw	x3, w4
    36ac:	ldrsw	x1, [sp, #224]
    36b0:	mov	x0, x1
    36b4:	lsl	x0, x0, #7
    36b8:	add	x0, x0, x1
    36bc:	lsl	x0, x0, #1
    36c0:	add	x1, x0, x3
    36c4:	mov	x0, #0x2c60                	// #11360
    36c8:	add	x0, x1, x0
    36cc:	lsl	x0, x0, #2
    36d0:	add	x0, x2, x0
    36d4:	ldr	w0, [x0, #8]
    36d8:	add	w2, w0, #0x1
    36dc:	ldr	x3, [sp, #56]
    36e0:	sxtw	x4, w4
    36e4:	ldrsw	x1, [sp, #224]
    36e8:	mov	x0, x1
    36ec:	lsl	x0, x0, #7
    36f0:	add	x0, x0, x1
    36f4:	lsl	x0, x0, #1
    36f8:	add	x1, x0, x4
    36fc:	mov	x0, #0x2c60                	// #11360
    3700:	add	x0, x1, x0
    3704:	lsl	x0, x0, #2
    3708:	add	x0, x3, x0
    370c:	str	w2, [x0, #8]
    3710:	ldrsw	x0, [sp, #236]
    3714:	add	x0, x0, #0x1f
    3718:	lsl	x0, x0, #1
    371c:	ldr	x1, [sp, #168]
    3720:	add	x0, x1, x0
    3724:	ldrh	w0, [x0]
    3728:	mov	w4, w0
    372c:	ldr	x2, [sp, #56]
    3730:	sxtw	x3, w4
    3734:	ldrsw	x1, [sp, #224]
    3738:	mov	x0, x1
    373c:	lsl	x0, x0, #7
    3740:	add	x0, x0, x1
    3744:	lsl	x0, x0, #1
    3748:	add	x1, x0, x3
    374c:	mov	x0, #0x2c60                	// #11360
    3750:	add	x0, x1, x0
    3754:	lsl	x0, x0, #2
    3758:	add	x0, x2, x0
    375c:	ldr	w0, [x0, #8]
    3760:	add	w2, w0, #0x1
    3764:	ldr	x3, [sp, #56]
    3768:	sxtw	x4, w4
    376c:	ldrsw	x1, [sp, #224]
    3770:	mov	x0, x1
    3774:	lsl	x0, x0, #7
    3778:	add	x0, x0, x1
    377c:	lsl	x0, x0, #1
    3780:	add	x1, x0, x4
    3784:	mov	x0, #0x2c60                	// #11360
    3788:	add	x0, x1, x0
    378c:	lsl	x0, x0, #2
    3790:	add	x0, x3, x0
    3794:	str	w2, [x0, #8]
    3798:	ldrsw	x0, [sp, #236]
    379c:	add	x0, x0, #0x20
    37a0:	lsl	x0, x0, #1
    37a4:	ldr	x1, [sp, #168]
    37a8:	add	x0, x1, x0
    37ac:	ldrh	w0, [x0]
    37b0:	mov	w4, w0
    37b4:	ldr	x2, [sp, #56]
    37b8:	sxtw	x3, w4
    37bc:	ldrsw	x1, [sp, #224]
    37c0:	mov	x0, x1
    37c4:	lsl	x0, x0, #7
    37c8:	add	x0, x0, x1
    37cc:	lsl	x0, x0, #1
    37d0:	add	x1, x0, x3
    37d4:	mov	x0, #0x2c60                	// #11360
    37d8:	add	x0, x1, x0
    37dc:	lsl	x0, x0, #2
    37e0:	add	x0, x2, x0
    37e4:	ldr	w0, [x0, #8]
    37e8:	add	w2, w0, #0x1
    37ec:	ldr	x3, [sp, #56]
    37f0:	sxtw	x4, w4
    37f4:	ldrsw	x1, [sp, #224]
    37f8:	mov	x0, x1
    37fc:	lsl	x0, x0, #7
    3800:	add	x0, x0, x1
    3804:	lsl	x0, x0, #1
    3808:	add	x1, x0, x4
    380c:	mov	x0, #0x2c60                	// #11360
    3810:	add	x0, x1, x0
    3814:	lsl	x0, x0, #2
    3818:	add	x0, x3, x0
    381c:	str	w2, [x0, #8]
    3820:	ldrsw	x0, [sp, #236]
    3824:	add	x0, x0, #0x21
    3828:	lsl	x0, x0, #1
    382c:	ldr	x1, [sp, #168]
    3830:	add	x0, x1, x0
    3834:	ldrh	w0, [x0]
    3838:	mov	w4, w0
    383c:	ldr	x2, [sp, #56]
    3840:	sxtw	x3, w4
    3844:	ldrsw	x1, [sp, #224]
    3848:	mov	x0, x1
    384c:	lsl	x0, x0, #7
    3850:	add	x0, x0, x1
    3854:	lsl	x0, x0, #1
    3858:	add	x1, x0, x3
    385c:	mov	x0, #0x2c60                	// #11360
    3860:	add	x0, x1, x0
    3864:	lsl	x0, x0, #2
    3868:	add	x0, x2, x0
    386c:	ldr	w0, [x0, #8]
    3870:	add	w2, w0, #0x1
    3874:	ldr	x3, [sp, #56]
    3878:	sxtw	x4, w4
    387c:	ldrsw	x1, [sp, #224]
    3880:	mov	x0, x1
    3884:	lsl	x0, x0, #7
    3888:	add	x0, x0, x1
    388c:	lsl	x0, x0, #1
    3890:	add	x1, x0, x4
    3894:	mov	x0, #0x2c60                	// #11360
    3898:	add	x0, x1, x0
    389c:	lsl	x0, x0, #2
    38a0:	add	x0, x3, x0
    38a4:	str	w2, [x0, #8]
    38a8:	ldrsw	x0, [sp, #236]
    38ac:	add	x0, x0, #0x22
    38b0:	lsl	x0, x0, #1
    38b4:	ldr	x1, [sp, #168]
    38b8:	add	x0, x1, x0
    38bc:	ldrh	w0, [x0]
    38c0:	mov	w4, w0
    38c4:	ldr	x2, [sp, #56]
    38c8:	sxtw	x3, w4
    38cc:	ldrsw	x1, [sp, #224]
    38d0:	mov	x0, x1
    38d4:	lsl	x0, x0, #7
    38d8:	add	x0, x0, x1
    38dc:	lsl	x0, x0, #1
    38e0:	add	x1, x0, x3
    38e4:	mov	x0, #0x2c60                	// #11360
    38e8:	add	x0, x1, x0
    38ec:	lsl	x0, x0, #2
    38f0:	add	x0, x2, x0
    38f4:	ldr	w0, [x0, #8]
    38f8:	add	w2, w0, #0x1
    38fc:	ldr	x3, [sp, #56]
    3900:	sxtw	x4, w4
    3904:	ldrsw	x1, [sp, #224]
    3908:	mov	x0, x1
    390c:	lsl	x0, x0, #7
    3910:	add	x0, x0, x1
    3914:	lsl	x0, x0, #1
    3918:	add	x1, x0, x4
    391c:	mov	x0, #0x2c60                	// #11360
    3920:	add	x0, x1, x0
    3924:	lsl	x0, x0, #2
    3928:	add	x0, x3, x0
    392c:	str	w2, [x0, #8]
    3930:	ldrsw	x0, [sp, #236]
    3934:	add	x0, x0, #0x23
    3938:	lsl	x0, x0, #1
    393c:	ldr	x1, [sp, #168]
    3940:	add	x0, x1, x0
    3944:	ldrh	w0, [x0]
    3948:	mov	w4, w0
    394c:	ldr	x2, [sp, #56]
    3950:	sxtw	x3, w4
    3954:	ldrsw	x1, [sp, #224]
    3958:	mov	x0, x1
    395c:	lsl	x0, x0, #7
    3960:	add	x0, x0, x1
    3964:	lsl	x0, x0, #1
    3968:	add	x1, x0, x3
    396c:	mov	x0, #0x2c60                	// #11360
    3970:	add	x0, x1, x0
    3974:	lsl	x0, x0, #2
    3978:	add	x0, x2, x0
    397c:	ldr	w0, [x0, #8]
    3980:	add	w2, w0, #0x1
    3984:	ldr	x3, [sp, #56]
    3988:	sxtw	x4, w4
    398c:	ldrsw	x1, [sp, #224]
    3990:	mov	x0, x1
    3994:	lsl	x0, x0, #7
    3998:	add	x0, x0, x1
    399c:	lsl	x0, x0, #1
    39a0:	add	x1, x0, x4
    39a4:	mov	x0, #0x2c60                	// #11360
    39a8:	add	x0, x1, x0
    39ac:	lsl	x0, x0, #2
    39b0:	add	x0, x3, x0
    39b4:	str	w2, [x0, #8]
    39b8:	ldrsw	x0, [sp, #236]
    39bc:	add	x0, x0, #0x24
    39c0:	lsl	x0, x0, #1
    39c4:	ldr	x1, [sp, #168]
    39c8:	add	x0, x1, x0
    39cc:	ldrh	w0, [x0]
    39d0:	mov	w4, w0
    39d4:	ldr	x2, [sp, #56]
    39d8:	sxtw	x3, w4
    39dc:	ldrsw	x1, [sp, #224]
    39e0:	mov	x0, x1
    39e4:	lsl	x0, x0, #7
    39e8:	add	x0, x0, x1
    39ec:	lsl	x0, x0, #1
    39f0:	add	x1, x0, x3
    39f4:	mov	x0, #0x2c60                	// #11360
    39f8:	add	x0, x1, x0
    39fc:	lsl	x0, x0, #2
    3a00:	add	x0, x2, x0
    3a04:	ldr	w0, [x0, #8]
    3a08:	add	w2, w0, #0x1
    3a0c:	ldr	x3, [sp, #56]
    3a10:	sxtw	x4, w4
    3a14:	ldrsw	x1, [sp, #224]
    3a18:	mov	x0, x1
    3a1c:	lsl	x0, x0, #7
    3a20:	add	x0, x0, x1
    3a24:	lsl	x0, x0, #1
    3a28:	add	x1, x0, x4
    3a2c:	mov	x0, #0x2c60                	// #11360
    3a30:	add	x0, x1, x0
    3a34:	lsl	x0, x0, #2
    3a38:	add	x0, x3, x0
    3a3c:	str	w2, [x0, #8]
    3a40:	ldrsw	x0, [sp, #236]
    3a44:	add	x0, x0, #0x25
    3a48:	lsl	x0, x0, #1
    3a4c:	ldr	x1, [sp, #168]
    3a50:	add	x0, x1, x0
    3a54:	ldrh	w0, [x0]
    3a58:	mov	w4, w0
    3a5c:	ldr	x2, [sp, #56]
    3a60:	sxtw	x3, w4
    3a64:	ldrsw	x1, [sp, #224]
    3a68:	mov	x0, x1
    3a6c:	lsl	x0, x0, #7
    3a70:	add	x0, x0, x1
    3a74:	lsl	x0, x0, #1
    3a78:	add	x1, x0, x3
    3a7c:	mov	x0, #0x2c60                	// #11360
    3a80:	add	x0, x1, x0
    3a84:	lsl	x0, x0, #2
    3a88:	add	x0, x2, x0
    3a8c:	ldr	w0, [x0, #8]
    3a90:	add	w2, w0, #0x1
    3a94:	ldr	x3, [sp, #56]
    3a98:	sxtw	x4, w4
    3a9c:	ldrsw	x1, [sp, #224]
    3aa0:	mov	x0, x1
    3aa4:	lsl	x0, x0, #7
    3aa8:	add	x0, x0, x1
    3aac:	lsl	x0, x0, #1
    3ab0:	add	x1, x0, x4
    3ab4:	mov	x0, #0x2c60                	// #11360
    3ab8:	add	x0, x1, x0
    3abc:	lsl	x0, x0, #2
    3ac0:	add	x0, x3, x0
    3ac4:	str	w2, [x0, #8]
    3ac8:	ldrsw	x0, [sp, #236]
    3acc:	add	x0, x0, #0x26
    3ad0:	lsl	x0, x0, #1
    3ad4:	ldr	x1, [sp, #168]
    3ad8:	add	x0, x1, x0
    3adc:	ldrh	w0, [x0]
    3ae0:	mov	w4, w0
    3ae4:	ldr	x2, [sp, #56]
    3ae8:	sxtw	x3, w4
    3aec:	ldrsw	x1, [sp, #224]
    3af0:	mov	x0, x1
    3af4:	lsl	x0, x0, #7
    3af8:	add	x0, x0, x1
    3afc:	lsl	x0, x0, #1
    3b00:	add	x1, x0, x3
    3b04:	mov	x0, #0x2c60                	// #11360
    3b08:	add	x0, x1, x0
    3b0c:	lsl	x0, x0, #2
    3b10:	add	x0, x2, x0
    3b14:	ldr	w0, [x0, #8]
    3b18:	add	w2, w0, #0x1
    3b1c:	ldr	x3, [sp, #56]
    3b20:	sxtw	x4, w4
    3b24:	ldrsw	x1, [sp, #224]
    3b28:	mov	x0, x1
    3b2c:	lsl	x0, x0, #7
    3b30:	add	x0, x0, x1
    3b34:	lsl	x0, x0, #1
    3b38:	add	x1, x0, x4
    3b3c:	mov	x0, #0x2c60                	// #11360
    3b40:	add	x0, x1, x0
    3b44:	lsl	x0, x0, #2
    3b48:	add	x0, x3, x0
    3b4c:	str	w2, [x0, #8]
    3b50:	ldrsw	x0, [sp, #236]
    3b54:	add	x0, x0, #0x27
    3b58:	lsl	x0, x0, #1
    3b5c:	ldr	x1, [sp, #168]
    3b60:	add	x0, x1, x0
    3b64:	ldrh	w0, [x0]
    3b68:	mov	w4, w0
    3b6c:	ldr	x2, [sp, #56]
    3b70:	sxtw	x3, w4
    3b74:	ldrsw	x1, [sp, #224]
    3b78:	mov	x0, x1
    3b7c:	lsl	x0, x0, #7
    3b80:	add	x0, x0, x1
    3b84:	lsl	x0, x0, #1
    3b88:	add	x1, x0, x3
    3b8c:	mov	x0, #0x2c60                	// #11360
    3b90:	add	x0, x1, x0
    3b94:	lsl	x0, x0, #2
    3b98:	add	x0, x2, x0
    3b9c:	ldr	w0, [x0, #8]
    3ba0:	add	w2, w0, #0x1
    3ba4:	ldr	x3, [sp, #56]
    3ba8:	sxtw	x4, w4
    3bac:	ldrsw	x1, [sp, #224]
    3bb0:	mov	x0, x1
    3bb4:	lsl	x0, x0, #7
    3bb8:	add	x0, x0, x1
    3bbc:	lsl	x0, x0, #1
    3bc0:	add	x1, x0, x4
    3bc4:	mov	x0, #0x2c60                	// #11360
    3bc8:	add	x0, x1, x0
    3bcc:	lsl	x0, x0, #2
    3bd0:	add	x0, x3, x0
    3bd4:	str	w2, [x0, #8]
    3bd8:	ldrsw	x0, [sp, #236]
    3bdc:	add	x0, x0, #0x28
    3be0:	lsl	x0, x0, #1
    3be4:	ldr	x1, [sp, #168]
    3be8:	add	x0, x1, x0
    3bec:	ldrh	w0, [x0]
    3bf0:	mov	w4, w0
    3bf4:	ldr	x2, [sp, #56]
    3bf8:	sxtw	x3, w4
    3bfc:	ldrsw	x1, [sp, #224]
    3c00:	mov	x0, x1
    3c04:	lsl	x0, x0, #7
    3c08:	add	x0, x0, x1
    3c0c:	lsl	x0, x0, #1
    3c10:	add	x1, x0, x3
    3c14:	mov	x0, #0x2c60                	// #11360
    3c18:	add	x0, x1, x0
    3c1c:	lsl	x0, x0, #2
    3c20:	add	x0, x2, x0
    3c24:	ldr	w0, [x0, #8]
    3c28:	add	w2, w0, #0x1
    3c2c:	ldr	x3, [sp, #56]
    3c30:	sxtw	x4, w4
    3c34:	ldrsw	x1, [sp, #224]
    3c38:	mov	x0, x1
    3c3c:	lsl	x0, x0, #7
    3c40:	add	x0, x0, x1
    3c44:	lsl	x0, x0, #1
    3c48:	add	x1, x0, x4
    3c4c:	mov	x0, #0x2c60                	// #11360
    3c50:	add	x0, x1, x0
    3c54:	lsl	x0, x0, #2
    3c58:	add	x0, x3, x0
    3c5c:	str	w2, [x0, #8]
    3c60:	ldrsw	x0, [sp, #236]
    3c64:	add	x0, x0, #0x29
    3c68:	lsl	x0, x0, #1
    3c6c:	ldr	x1, [sp, #168]
    3c70:	add	x0, x1, x0
    3c74:	ldrh	w0, [x0]
    3c78:	mov	w4, w0
    3c7c:	ldr	x2, [sp, #56]
    3c80:	sxtw	x3, w4
    3c84:	ldrsw	x1, [sp, #224]
    3c88:	mov	x0, x1
    3c8c:	lsl	x0, x0, #7
    3c90:	add	x0, x0, x1
    3c94:	lsl	x0, x0, #1
    3c98:	add	x1, x0, x3
    3c9c:	mov	x0, #0x2c60                	// #11360
    3ca0:	add	x0, x1, x0
    3ca4:	lsl	x0, x0, #2
    3ca8:	add	x0, x2, x0
    3cac:	ldr	w0, [x0, #8]
    3cb0:	add	w2, w0, #0x1
    3cb4:	ldr	x3, [sp, #56]
    3cb8:	sxtw	x4, w4
    3cbc:	ldrsw	x1, [sp, #224]
    3cc0:	mov	x0, x1
    3cc4:	lsl	x0, x0, #7
    3cc8:	add	x0, x0, x1
    3ccc:	lsl	x0, x0, #1
    3cd0:	add	x1, x0, x4
    3cd4:	mov	x0, #0x2c60                	// #11360
    3cd8:	add	x0, x1, x0
    3cdc:	lsl	x0, x0, #2
    3ce0:	add	x0, x3, x0
    3ce4:	str	w2, [x0, #8]
    3ce8:	ldrsw	x0, [sp, #236]
    3cec:	add	x0, x0, #0x2a
    3cf0:	lsl	x0, x0, #1
    3cf4:	ldr	x1, [sp, #168]
    3cf8:	add	x0, x1, x0
    3cfc:	ldrh	w0, [x0]
    3d00:	mov	w4, w0
    3d04:	ldr	x2, [sp, #56]
    3d08:	sxtw	x3, w4
    3d0c:	ldrsw	x1, [sp, #224]
    3d10:	mov	x0, x1
    3d14:	lsl	x0, x0, #7
    3d18:	add	x0, x0, x1
    3d1c:	lsl	x0, x0, #1
    3d20:	add	x1, x0, x3
    3d24:	mov	x0, #0x2c60                	// #11360
    3d28:	add	x0, x1, x0
    3d2c:	lsl	x0, x0, #2
    3d30:	add	x0, x2, x0
    3d34:	ldr	w0, [x0, #8]
    3d38:	add	w2, w0, #0x1
    3d3c:	ldr	x3, [sp, #56]
    3d40:	sxtw	x4, w4
    3d44:	ldrsw	x1, [sp, #224]
    3d48:	mov	x0, x1
    3d4c:	lsl	x0, x0, #7
    3d50:	add	x0, x0, x1
    3d54:	lsl	x0, x0, #1
    3d58:	add	x1, x0, x4
    3d5c:	mov	x0, #0x2c60                	// #11360
    3d60:	add	x0, x1, x0
    3d64:	lsl	x0, x0, #2
    3d68:	add	x0, x3, x0
    3d6c:	str	w2, [x0, #8]
    3d70:	ldrsw	x0, [sp, #236]
    3d74:	add	x0, x0, #0x2b
    3d78:	lsl	x0, x0, #1
    3d7c:	ldr	x1, [sp, #168]
    3d80:	add	x0, x1, x0
    3d84:	ldrh	w0, [x0]
    3d88:	mov	w4, w0
    3d8c:	ldr	x2, [sp, #56]
    3d90:	sxtw	x3, w4
    3d94:	ldrsw	x1, [sp, #224]
    3d98:	mov	x0, x1
    3d9c:	lsl	x0, x0, #7
    3da0:	add	x0, x0, x1
    3da4:	lsl	x0, x0, #1
    3da8:	add	x1, x0, x3
    3dac:	mov	x0, #0x2c60                	// #11360
    3db0:	add	x0, x1, x0
    3db4:	lsl	x0, x0, #2
    3db8:	add	x0, x2, x0
    3dbc:	ldr	w0, [x0, #8]
    3dc0:	add	w2, w0, #0x1
    3dc4:	ldr	x3, [sp, #56]
    3dc8:	sxtw	x4, w4
    3dcc:	ldrsw	x1, [sp, #224]
    3dd0:	mov	x0, x1
    3dd4:	lsl	x0, x0, #7
    3dd8:	add	x0, x0, x1
    3ddc:	lsl	x0, x0, #1
    3de0:	add	x1, x0, x4
    3de4:	mov	x0, #0x2c60                	// #11360
    3de8:	add	x0, x1, x0
    3dec:	lsl	x0, x0, #2
    3df0:	add	x0, x3, x0
    3df4:	str	w2, [x0, #8]
    3df8:	ldrsw	x0, [sp, #236]
    3dfc:	add	x0, x0, #0x2c
    3e00:	lsl	x0, x0, #1
    3e04:	ldr	x1, [sp, #168]
    3e08:	add	x0, x1, x0
    3e0c:	ldrh	w0, [x0]
    3e10:	mov	w4, w0
    3e14:	ldr	x2, [sp, #56]
    3e18:	sxtw	x3, w4
    3e1c:	ldrsw	x1, [sp, #224]
    3e20:	mov	x0, x1
    3e24:	lsl	x0, x0, #7
    3e28:	add	x0, x0, x1
    3e2c:	lsl	x0, x0, #1
    3e30:	add	x1, x0, x3
    3e34:	mov	x0, #0x2c60                	// #11360
    3e38:	add	x0, x1, x0
    3e3c:	lsl	x0, x0, #2
    3e40:	add	x0, x2, x0
    3e44:	ldr	w0, [x0, #8]
    3e48:	add	w2, w0, #0x1
    3e4c:	ldr	x3, [sp, #56]
    3e50:	sxtw	x4, w4
    3e54:	ldrsw	x1, [sp, #224]
    3e58:	mov	x0, x1
    3e5c:	lsl	x0, x0, #7
    3e60:	add	x0, x0, x1
    3e64:	lsl	x0, x0, #1
    3e68:	add	x1, x0, x4
    3e6c:	mov	x0, #0x2c60                	// #11360
    3e70:	add	x0, x1, x0
    3e74:	lsl	x0, x0, #2
    3e78:	add	x0, x3, x0
    3e7c:	str	w2, [x0, #8]
    3e80:	ldrsw	x0, [sp, #236]
    3e84:	add	x0, x0, #0x2d
    3e88:	lsl	x0, x0, #1
    3e8c:	ldr	x1, [sp, #168]
    3e90:	add	x0, x1, x0
    3e94:	ldrh	w0, [x0]
    3e98:	mov	w4, w0
    3e9c:	ldr	x2, [sp, #56]
    3ea0:	sxtw	x3, w4
    3ea4:	ldrsw	x1, [sp, #224]
    3ea8:	mov	x0, x1
    3eac:	lsl	x0, x0, #7
    3eb0:	add	x0, x0, x1
    3eb4:	lsl	x0, x0, #1
    3eb8:	add	x1, x0, x3
    3ebc:	mov	x0, #0x2c60                	// #11360
    3ec0:	add	x0, x1, x0
    3ec4:	lsl	x0, x0, #2
    3ec8:	add	x0, x2, x0
    3ecc:	ldr	w0, [x0, #8]
    3ed0:	add	w2, w0, #0x1
    3ed4:	ldr	x3, [sp, #56]
    3ed8:	sxtw	x4, w4
    3edc:	ldrsw	x1, [sp, #224]
    3ee0:	mov	x0, x1
    3ee4:	lsl	x0, x0, #7
    3ee8:	add	x0, x0, x1
    3eec:	lsl	x0, x0, #1
    3ef0:	add	x1, x0, x4
    3ef4:	mov	x0, #0x2c60                	// #11360
    3ef8:	add	x0, x1, x0
    3efc:	lsl	x0, x0, #2
    3f00:	add	x0, x3, x0
    3f04:	str	w2, [x0, #8]
    3f08:	ldrsw	x0, [sp, #236]
    3f0c:	add	x0, x0, #0x2e
    3f10:	lsl	x0, x0, #1
    3f14:	ldr	x1, [sp, #168]
    3f18:	add	x0, x1, x0
    3f1c:	ldrh	w0, [x0]
    3f20:	mov	w4, w0
    3f24:	ldr	x2, [sp, #56]
    3f28:	sxtw	x3, w4
    3f2c:	ldrsw	x1, [sp, #224]
    3f30:	mov	x0, x1
    3f34:	lsl	x0, x0, #7
    3f38:	add	x0, x0, x1
    3f3c:	lsl	x0, x0, #1
    3f40:	add	x1, x0, x3
    3f44:	mov	x0, #0x2c60                	// #11360
    3f48:	add	x0, x1, x0
    3f4c:	lsl	x0, x0, #2
    3f50:	add	x0, x2, x0
    3f54:	ldr	w0, [x0, #8]
    3f58:	add	w2, w0, #0x1
    3f5c:	ldr	x3, [sp, #56]
    3f60:	sxtw	x4, w4
    3f64:	ldrsw	x1, [sp, #224]
    3f68:	mov	x0, x1
    3f6c:	lsl	x0, x0, #7
    3f70:	add	x0, x0, x1
    3f74:	lsl	x0, x0, #1
    3f78:	add	x1, x0, x4
    3f7c:	mov	x0, #0x2c60                	// #11360
    3f80:	add	x0, x1, x0
    3f84:	lsl	x0, x0, #2
    3f88:	add	x0, x3, x0
    3f8c:	str	w2, [x0, #8]
    3f90:	ldrsw	x0, [sp, #236]
    3f94:	add	x0, x0, #0x2f
    3f98:	lsl	x0, x0, #1
    3f9c:	ldr	x1, [sp, #168]
    3fa0:	add	x0, x1, x0
    3fa4:	ldrh	w0, [x0]
    3fa8:	mov	w4, w0
    3fac:	ldr	x2, [sp, #56]
    3fb0:	sxtw	x3, w4
    3fb4:	ldrsw	x1, [sp, #224]
    3fb8:	mov	x0, x1
    3fbc:	lsl	x0, x0, #7
    3fc0:	add	x0, x0, x1
    3fc4:	lsl	x0, x0, #1
    3fc8:	add	x1, x0, x3
    3fcc:	mov	x0, #0x2c60                	// #11360
    3fd0:	add	x0, x1, x0
    3fd4:	lsl	x0, x0, #2
    3fd8:	add	x0, x2, x0
    3fdc:	ldr	w0, [x0, #8]
    3fe0:	add	w2, w0, #0x1
    3fe4:	ldr	x3, [sp, #56]
    3fe8:	sxtw	x4, w4
    3fec:	ldrsw	x1, [sp, #224]
    3ff0:	mov	x0, x1
    3ff4:	lsl	x0, x0, #7
    3ff8:	add	x0, x0, x1
    3ffc:	lsl	x0, x0, #1
    4000:	add	x1, x0, x4
    4004:	mov	x0, #0x2c60                	// #11360
    4008:	add	x0, x1, x0
    400c:	lsl	x0, x0, #2
    4010:	add	x0, x3, x0
    4014:	str	w2, [x0, #8]
    4018:	ldrsw	x0, [sp, #236]
    401c:	add	x0, x0, #0x30
    4020:	lsl	x0, x0, #1
    4024:	ldr	x1, [sp, #168]
    4028:	add	x0, x1, x0
    402c:	ldrh	w0, [x0]
    4030:	mov	w4, w0
    4034:	ldr	x2, [sp, #56]
    4038:	sxtw	x3, w4
    403c:	ldrsw	x1, [sp, #224]
    4040:	mov	x0, x1
    4044:	lsl	x0, x0, #7
    4048:	add	x0, x0, x1
    404c:	lsl	x0, x0, #1
    4050:	add	x1, x0, x3
    4054:	mov	x0, #0x2c60                	// #11360
    4058:	add	x0, x1, x0
    405c:	lsl	x0, x0, #2
    4060:	add	x0, x2, x0
    4064:	ldr	w0, [x0, #8]
    4068:	add	w2, w0, #0x1
    406c:	ldr	x3, [sp, #56]
    4070:	sxtw	x4, w4
    4074:	ldrsw	x1, [sp, #224]
    4078:	mov	x0, x1
    407c:	lsl	x0, x0, #7
    4080:	add	x0, x0, x1
    4084:	lsl	x0, x0, #1
    4088:	add	x1, x0, x4
    408c:	mov	x0, #0x2c60                	// #11360
    4090:	add	x0, x1, x0
    4094:	lsl	x0, x0, #2
    4098:	add	x0, x3, x0
    409c:	str	w2, [x0, #8]
    40a0:	ldrsw	x0, [sp, #236]
    40a4:	add	x0, x0, #0x31
    40a8:	lsl	x0, x0, #1
    40ac:	ldr	x1, [sp, #168]
    40b0:	add	x0, x1, x0
    40b4:	ldrh	w0, [x0]
    40b8:	mov	w4, w0
    40bc:	ldr	x2, [sp, #56]
    40c0:	sxtw	x3, w4
    40c4:	ldrsw	x1, [sp, #224]
    40c8:	mov	x0, x1
    40cc:	lsl	x0, x0, #7
    40d0:	add	x0, x0, x1
    40d4:	lsl	x0, x0, #1
    40d8:	add	x1, x0, x3
    40dc:	mov	x0, #0x2c60                	// #11360
    40e0:	add	x0, x1, x0
    40e4:	lsl	x0, x0, #2
    40e8:	add	x0, x2, x0
    40ec:	ldr	w0, [x0, #8]
    40f0:	add	w2, w0, #0x1
    40f4:	ldr	x3, [sp, #56]
    40f8:	sxtw	x4, w4
    40fc:	ldrsw	x1, [sp, #224]
    4100:	mov	x0, x1
    4104:	lsl	x0, x0, #7
    4108:	add	x0, x0, x1
    410c:	lsl	x0, x0, #1
    4110:	add	x1, x0, x4
    4114:	mov	x0, #0x2c60                	// #11360
    4118:	add	x0, x1, x0
    411c:	lsl	x0, x0, #2
    4120:	add	x0, x3, x0
    4124:	str	w2, [x0, #8]
    4128:	b	41d8 <sendMTFValues+0x3ae8>
    412c:	ldr	w0, [sp, #236]
    4130:	str	w0, [sp, #244]
    4134:	b	41c8 <sendMTFValues+0x3ad8>
    4138:	ldrsw	x0, [sp, #244]
    413c:	lsl	x0, x0, #1
    4140:	ldr	x1, [sp, #168]
    4144:	add	x0, x1, x0
    4148:	ldrh	w0, [x0]
    414c:	mov	w4, w0
    4150:	ldr	x2, [sp, #56]
    4154:	sxtw	x3, w4
    4158:	ldrsw	x1, [sp, #224]
    415c:	mov	x0, x1
    4160:	lsl	x0, x0, #7
    4164:	add	x0, x0, x1
    4168:	lsl	x0, x0, #1
    416c:	add	x1, x0, x3
    4170:	mov	x0, #0x2c60                	// #11360
    4174:	add	x0, x1, x0
    4178:	lsl	x0, x0, #2
    417c:	add	x0, x2, x0
    4180:	ldr	w0, [x0, #8]
    4184:	add	w2, w0, #0x1
    4188:	ldr	x3, [sp, #56]
    418c:	sxtw	x4, w4
    4190:	ldrsw	x1, [sp, #224]
    4194:	mov	x0, x1
    4198:	lsl	x0, x0, #7
    419c:	add	x0, x0, x1
    41a0:	lsl	x0, x0, #1
    41a4:	add	x1, x0, x4
    41a8:	mov	x0, #0x2c60                	// #11360
    41ac:	add	x0, x1, x0
    41b0:	lsl	x0, x0, #2
    41b4:	add	x0, x3, x0
    41b8:	str	w2, [x0, #8]
    41bc:	ldr	w0, [sp, #244]
    41c0:	add	w0, w0, #0x1
    41c4:	str	w0, [sp, #244]
    41c8:	ldr	w1, [sp, #244]
    41cc:	ldr	w0, [sp, #232]
    41d0:	cmp	w1, w0
    41d4:	b.le	4138 <sendMTFValues+0x3a48>
    41d8:	ldr	w0, [sp, #232]
    41dc:	add	w0, w0, #0x1
    41e0:	str	w0, [sp, #236]
    41e4:	b	c9c <sendMTFValues+0x5ac>
    41e8:	nop
    41ec:	ldr	x0, [sp, #56]
    41f0:	ldr	w0, [x0, #656]
    41f4:	cmp	w0, #0x2
    41f8:	b.le	42a4 <sendMTFValues+0x3bb4>
    41fc:	adrp	x0, 0 <stderr>
    4200:	add	x0, x0, #0x0
    4204:	ldr	x4, [x0]
    4208:	ldr	w0, [sp, #216]
    420c:	add	w2, w0, #0x1
    4210:	ldr	w0, [sp, #228]
    4214:	add	w1, w0, #0x7
    4218:	cmp	w0, #0x0
    421c:	csel	w0, w1, w0, lt  // lt = tstop
    4220:	asr	w0, w0, #3
    4224:	mov	w3, w0
    4228:	adrp	x0, 0 <BZ2_bsInitWrite>
    422c:	add	x1, x0, #0x0
    4230:	mov	x0, x4
    4234:	bl	0 <fprintf>
    4238:	str	wzr, [sp, #248]
    423c:	b	427c <sendMTFValues+0x3b8c>
    4240:	adrp	x0, 0 <stderr>
    4244:	add	x0, x0, #0x0
    4248:	ldr	x3, [x0]
    424c:	ldrsw	x0, [sp, #248]
    4250:	lsl	x0, x0, #2
    4254:	add	x1, sp, #0x60
    4258:	ldr	w0, [x1, x0]
    425c:	mov	w2, w0
    4260:	adrp	x0, 0 <BZ2_bsInitWrite>
    4264:	add	x1, x0, #0x0
    4268:	mov	x0, x3
    426c:	bl	0 <fprintf>
    4270:	ldr	w0, [sp, #248]
    4274:	add	w0, w0, #0x1
    4278:	str	w0, [sp, #248]
    427c:	ldr	w1, [sp, #248]
    4280:	ldr	w0, [sp, #196]
    4284:	cmp	w1, w0
    4288:	b.lt	4240 <sendMTFValues+0x3b50>  // b.tstop
    428c:	adrp	x0, 0 <stderr>
    4290:	add	x0, x0, #0x0
    4294:	ldr	x0, [x0]
    4298:	mov	x1, x0
    429c:	mov	w0, #0xa                   	// #10
    42a0:	bl	0 <fputc>
    42a4:	str	wzr, [sp, #248]
    42a8:	b	431c <sendMTFValues+0x3c2c>
    42ac:	ldrsw	x1, [sp, #248]
    42b0:	mov	x0, x1
    42b4:	lsl	x0, x0, #7
    42b8:	add	x0, x0, x1
    42bc:	lsl	x0, x0, #1
    42c0:	mov	x1, #0x9340                	// #37696
    42c4:	add	x0, x0, x1
    42c8:	ldr	x1, [sp, #56]
    42cc:	add	x0, x1, x0
    42d0:	add	x4, x0, #0xc
    42d4:	ldrsw	x1, [sp, #248]
    42d8:	mov	x0, x1
    42dc:	lsl	x0, x0, #7
    42e0:	add	x0, x0, x1
    42e4:	lsl	x0, x0, #3
    42e8:	mov	x1, #0xb180                	// #45440
    42ec:	add	x0, x0, x1
    42f0:	ldr	x1, [sp, #56]
    42f4:	add	x0, x1, x0
    42f8:	add	x0, x0, #0x8
    42fc:	mov	w3, #0x11                  	// #17
    4300:	ldr	w2, [sp, #164]
    4304:	mov	x1, x0
    4308:	mov	x0, x4
    430c:	bl	0 <BZ2_hbMakeCodeLengths>
    4310:	ldr	w0, [sp, #248]
    4314:	add	w0, w0, #0x1
    4318:	str	w0, [sp, #248]
    431c:	ldr	w1, [sp, #248]
    4320:	ldr	w0, [sp, #196]
    4324:	cmp	w1, w0
    4328:	b.lt	42ac <sendMTFValues+0x3bbc>  // b.tstop
    432c:	ldr	w0, [sp, #216]
    4330:	add	w0, w0, #0x1
    4334:	str	w0, [sp, #216]
    4338:	ldr	w0, [sp, #216]
    433c:	cmp	w0, #0x3
    4340:	b.le	acc <sendMTFValues+0x3dc>
    4344:	ldr	w0, [sp, #196]
    4348:	cmp	w0, #0x7
    434c:	b.le	4358 <sendMTFValues+0x3c68>
    4350:	mov	w0, #0xbba                 	// #3002
    4354:	bl	0 <BZ2_bz__AssertH__fail>
    4358:	ldr	w1, [sp, #212]
    435c:	mov	w0, #0x7fff                	// #32767
    4360:	cmp	w1, w0
    4364:	b.gt	4378 <sendMTFValues+0x3c88>
    4368:	ldr	w1, [sp, #212]
    436c:	mov	w0, #0x4652                	// #18002
    4370:	cmp	w1, w0
    4374:	b.le	4380 <sendMTFValues+0x3c90>
    4378:	mov	w0, #0xbbb                 	// #3003
    437c:	bl	0 <BZ2_bz__AssertH__fail>
    4380:	str	wzr, [sp, #244]
    4384:	b	43a8 <sendMTFValues+0x3cb8>
    4388:	ldr	w0, [sp, #244]
    438c:	and	w2, w0, #0xff
    4390:	ldrsw	x0, [sp, #244]
    4394:	add	x1, sp, #0x58
    4398:	strb	w2, [x1, x0]
    439c:	ldr	w0, [sp, #244]
    43a0:	add	w0, w0, #0x1
    43a4:	str	w0, [sp, #244]
    43a8:	ldr	w1, [sp, #244]
    43ac:	ldr	w0, [sp, #196]
    43b0:	cmp	w1, w0
    43b4:	b.lt	4388 <sendMTFValues+0x3c98>  // b.tstop
    43b8:	str	wzr, [sp, #244]
    43bc:	b	4464 <sendMTFValues+0x3d74>
    43c0:	ldr	x1, [sp, #56]
    43c4:	ldrsw	x0, [sp, #244]
    43c8:	add	x0, x1, x0
    43cc:	ldrb	w0, [x0, #1704]
    43d0:	strb	w0, [sp, #141]
    43d4:	str	wzr, [sp, #240]
    43d8:	ldrsw	x0, [sp, #240]
    43dc:	add	x1, sp, #0x58
    43e0:	ldrb	w0, [x1, x0]
    43e4:	strb	w0, [sp, #183]
    43e8:	b	4420 <sendMTFValues+0x3d30>
    43ec:	ldr	w0, [sp, #240]
    43f0:	add	w0, w0, #0x1
    43f4:	str	w0, [sp, #240]
    43f8:	ldrb	w0, [sp, #183]
    43fc:	strb	w0, [sp, #140]
    4400:	ldrsw	x0, [sp, #240]
    4404:	add	x1, sp, #0x58
    4408:	ldrb	w0, [x1, x0]
    440c:	strb	w0, [sp, #183]
    4410:	ldrsw	x0, [sp, #240]
    4414:	add	x1, sp, #0x58
    4418:	ldrb	w2, [sp, #140]
    441c:	strb	w2, [x1, x0]
    4420:	ldrb	w1, [sp, #141]
    4424:	ldrb	w0, [sp, #183]
    4428:	cmp	w1, w0
    442c:	b.ne	43ec <sendMTFValues+0x3cfc>  // b.any
    4430:	ldrb	w0, [sp, #183]
    4434:	strb	w0, [sp, #88]
    4438:	ldr	w0, [sp, #240]
    443c:	and	w2, w0, #0xff
    4440:	ldr	x1, [sp, #56]
    4444:	ldrsw	x0, [sp, #244]
    4448:	add	x0, x1, x0
    444c:	add	x0, x0, #0x4, lsl #12
    4450:	mov	w1, w2
    4454:	strb	w1, [x0, #3322]
    4458:	ldr	w0, [sp, #244]
    445c:	add	w0, w0, #0x1
    4460:	str	w0, [sp, #244]
    4464:	ldr	w1, [sp, #244]
    4468:	ldr	w0, [sp, #212]
    446c:	cmp	w1, w0
    4470:	b.lt	43c0 <sendMTFValues+0x3cd0>  // b.tstop
    4474:	str	wzr, [sp, #248]
    4478:	b	4620 <sendMTFValues+0x3f30>
    447c:	mov	w0, #0x20                  	// #32
    4480:	str	w0, [sp, #208]
    4484:	str	wzr, [sp, #204]
    4488:	str	wzr, [sp, #244]
    448c:	b	4574 <sendMTFValues+0x3e84>
    4490:	ldr	x3, [sp, #56]
    4494:	ldrsw	x2, [sp, #244]
    4498:	ldrsw	x1, [sp, #248]
    449c:	mov	x0, x1
    44a0:	lsl	x0, x0, #7
    44a4:	add	x0, x0, x1
    44a8:	lsl	x0, x0, #1
    44ac:	add	x0, x3, x0
    44b0:	add	x0, x0, x2
    44b4:	add	x0, x0, #0x9, lsl #12
    44b8:	ldrb	w0, [x0, #844]
    44bc:	mov	w1, w0
    44c0:	ldr	w0, [sp, #204]
    44c4:	cmp	w0, w1
    44c8:	b.ge	44fc <sendMTFValues+0x3e0c>  // b.tcont
    44cc:	ldr	x3, [sp, #56]
    44d0:	ldrsw	x2, [sp, #244]
    44d4:	ldrsw	x1, [sp, #248]
    44d8:	mov	x0, x1
    44dc:	lsl	x0, x0, #7
    44e0:	add	x0, x0, x1
    44e4:	lsl	x0, x0, #1
    44e8:	add	x0, x3, x0
    44ec:	add	x0, x0, x2
    44f0:	add	x0, x0, #0x9, lsl #12
    44f4:	ldrb	w0, [x0, #844]
    44f8:	str	w0, [sp, #204]
    44fc:	ldr	x3, [sp, #56]
    4500:	ldrsw	x2, [sp, #244]
    4504:	ldrsw	x1, [sp, #248]
    4508:	mov	x0, x1
    450c:	lsl	x0, x0, #7
    4510:	add	x0, x0, x1
    4514:	lsl	x0, x0, #1
    4518:	add	x0, x3, x0
    451c:	add	x0, x0, x2
    4520:	add	x0, x0, #0x9, lsl #12
    4524:	ldrb	w0, [x0, #844]
    4528:	mov	w1, w0
    452c:	ldr	w0, [sp, #208]
    4530:	cmp	w0, w1
    4534:	b.le	4568 <sendMTFValues+0x3e78>
    4538:	ldr	x3, [sp, #56]
    453c:	ldrsw	x2, [sp, #244]
    4540:	ldrsw	x1, [sp, #248]
    4544:	mov	x0, x1
    4548:	lsl	x0, x0, #7
    454c:	add	x0, x0, x1
    4550:	lsl	x0, x0, #1
    4554:	add	x0, x3, x0
    4558:	add	x0, x0, x2
    455c:	add	x0, x0, #0x9, lsl #12
    4560:	ldrb	w0, [x0, #844]
    4564:	str	w0, [sp, #208]
    4568:	ldr	w0, [sp, #244]
    456c:	add	w0, w0, #0x1
    4570:	str	w0, [sp, #244]
    4574:	ldr	w1, [sp, #244]
    4578:	ldr	w0, [sp, #164]
    457c:	cmp	w1, w0
    4580:	b.lt	4490 <sendMTFValues+0x3da0>  // b.tstop
    4584:	ldr	w0, [sp, #204]
    4588:	cmp	w0, #0x11
    458c:	b.le	4598 <sendMTFValues+0x3ea8>
    4590:	mov	w0, #0xbbc                 	// #3004
    4594:	bl	0 <BZ2_bz__AssertH__fail>
    4598:	ldr	w0, [sp, #208]
    459c:	cmp	w0, #0x0
    45a0:	b.gt	45ac <sendMTFValues+0x3ebc>
    45a4:	mov	w0, #0xbbd                 	// #3005
    45a8:	bl	0 <BZ2_bz__AssertH__fail>
    45ac:	ldrsw	x1, [sp, #248]
    45b0:	mov	x0, x1
    45b4:	lsl	x0, x0, #7
    45b8:	add	x0, x0, x1
    45bc:	lsl	x0, x0, #3
    45c0:	mov	x1, #0x9950                	// #39248
    45c4:	add	x0, x0, x1
    45c8:	ldr	x1, [sp, #56]
    45cc:	add	x0, x1, x0
    45d0:	add	x5, x0, #0x8
    45d4:	ldrsw	x1, [sp, #248]
    45d8:	mov	x0, x1
    45dc:	lsl	x0, x0, #7
    45e0:	add	x0, x0, x1
    45e4:	lsl	x0, x0, #1
    45e8:	mov	x1, #0x9340                	// #37696
    45ec:	add	x0, x0, x1
    45f0:	ldr	x1, [sp, #56]
    45f4:	add	x0, x1, x0
    45f8:	add	x0, x0, #0xc
    45fc:	ldr	w4, [sp, #164]
    4600:	ldr	w3, [sp, #204]
    4604:	ldr	w2, [sp, #208]
    4608:	mov	x1, x0
    460c:	mov	x0, x5
    4610:	bl	0 <BZ2_hbAssignCodes>
    4614:	ldr	w0, [sp, #248]
    4618:	add	w0, w0, #0x1
    461c:	str	w0, [sp, #248]
    4620:	ldr	w1, [sp, #248]
    4624:	ldr	w0, [sp, #196]
    4628:	cmp	w1, w0
    462c:	b.lt	447c <sendMTFValues+0x3d8c>  // b.tstop
    4630:	str	wzr, [sp, #244]
    4634:	b	46a8 <sendMTFValues+0x3fb8>
    4638:	ldrsw	x0, [sp, #244]
    463c:	add	x1, sp, #0x48
    4640:	strb	wzr, [x1, x0]
    4644:	str	wzr, [sp, #240]
    4648:	b	4690 <sendMTFValues+0x3fa0>
    464c:	ldr	w0, [sp, #244]
    4650:	lsl	w1, w0, #4
    4654:	ldr	w0, [sp, #240]
    4658:	add	w0, w1, w0
    465c:	ldr	x1, [sp, #56]
    4660:	sxtw	x0, w0
    4664:	add	x0, x1, x0
    4668:	ldrb	w0, [x0, #128]
    466c:	cmp	w0, #0x0
    4670:	b.eq	4684 <sendMTFValues+0x3f94>  // b.none
    4674:	ldrsw	x0, [sp, #244]
    4678:	add	x1, sp, #0x48
    467c:	mov	w2, #0x1                   	// #1
    4680:	strb	w2, [x1, x0]
    4684:	ldr	w0, [sp, #240]
    4688:	add	w0, w0, #0x1
    468c:	str	w0, [sp, #240]
    4690:	ldr	w0, [sp, #240]
    4694:	cmp	w0, #0xf
    4698:	b.le	464c <sendMTFValues+0x3f5c>
    469c:	ldr	w0, [sp, #244]
    46a0:	add	w0, w0, #0x1
    46a4:	str	w0, [sp, #244]
    46a8:	ldr	w0, [sp, #244]
    46ac:	cmp	w0, #0xf
    46b0:	b.le	4638 <sendMTFValues+0x3f48>
    46b4:	ldr	x0, [sp, #56]
    46b8:	ldr	w0, [x0, #116]
    46bc:	str	w0, [sp, #160]
    46c0:	str	wzr, [sp, #244]
    46c4:	b	470c <sendMTFValues+0x401c>
    46c8:	ldrsw	x0, [sp, #244]
    46cc:	add	x1, sp, #0x48
    46d0:	ldrb	w0, [x1, x0]
    46d4:	cmp	w0, #0x0
    46d8:	b.eq	46f0 <sendMTFValues+0x4000>  // b.none
    46dc:	mov	w2, #0x1                   	// #1
    46e0:	mov	w1, #0x1                   	// #1
    46e4:	ldr	x0, [sp, #56]
    46e8:	bl	b8 <bsW>
    46ec:	b	4700 <sendMTFValues+0x4010>
    46f0:	mov	w2, #0x0                   	// #0
    46f4:	mov	w1, #0x1                   	// #1
    46f8:	ldr	x0, [sp, #56]
    46fc:	bl	b8 <bsW>
    4700:	ldr	w0, [sp, #244]
    4704:	add	w0, w0, #0x1
    4708:	str	w0, [sp, #244]
    470c:	ldr	w0, [sp, #244]
    4710:	cmp	w0, #0xf
    4714:	b.le	46c8 <sendMTFValues+0x3fd8>
    4718:	str	wzr, [sp, #244]
    471c:	b	47ac <sendMTFValues+0x40bc>
    4720:	ldrsw	x0, [sp, #244]
    4724:	add	x1, sp, #0x48
    4728:	ldrb	w0, [x1, x0]
    472c:	cmp	w0, #0x0
    4730:	b.eq	47a0 <sendMTFValues+0x40b0>  // b.none
    4734:	str	wzr, [sp, #240]
    4738:	b	4794 <sendMTFValues+0x40a4>
    473c:	ldr	w0, [sp, #244]
    4740:	lsl	w1, w0, #4
    4744:	ldr	w0, [sp, #240]
    4748:	add	w0, w1, w0
    474c:	ldr	x1, [sp, #56]
    4750:	sxtw	x0, w0
    4754:	add	x0, x1, x0
    4758:	ldrb	w0, [x0, #128]
    475c:	cmp	w0, #0x0
    4760:	b.eq	4778 <sendMTFValues+0x4088>  // b.none
    4764:	mov	w2, #0x1                   	// #1
    4768:	mov	w1, #0x1                   	// #1
    476c:	ldr	x0, [sp, #56]
    4770:	bl	b8 <bsW>
    4774:	b	4788 <sendMTFValues+0x4098>
    4778:	mov	w2, #0x0                   	// #0
    477c:	mov	w1, #0x1                   	// #1
    4780:	ldr	x0, [sp, #56]
    4784:	bl	b8 <bsW>
    4788:	ldr	w0, [sp, #240]
    478c:	add	w0, w0, #0x1
    4790:	str	w0, [sp, #240]
    4794:	ldr	w0, [sp, #240]
    4798:	cmp	w0, #0xf
    479c:	b.le	473c <sendMTFValues+0x404c>
    47a0:	ldr	w0, [sp, #244]
    47a4:	add	w0, w0, #0x1
    47a8:	str	w0, [sp, #244]
    47ac:	ldr	w0, [sp, #244]
    47b0:	cmp	w0, #0xf
    47b4:	b.le	4720 <sendMTFValues+0x4030>
    47b8:	ldr	x0, [sp, #56]
    47bc:	ldr	w0, [x0, #656]
    47c0:	cmp	w0, #0x2
    47c4:	b.le	47f8 <sendMTFValues+0x4108>
    47c8:	adrp	x0, 0 <stderr>
    47cc:	add	x0, x0, #0x0
    47d0:	ldr	x3, [x0]
    47d4:	ldr	x0, [sp, #56]
    47d8:	ldr	w1, [x0, #116]
    47dc:	ldr	w0, [sp, #160]
    47e0:	sub	w0, w1, w0
    47e4:	mov	w2, w0
    47e8:	adrp	x0, 0 <BZ2_bsInitWrite>
    47ec:	add	x1, x0, #0x0
    47f0:	mov	x0, x3
    47f4:	bl	0 <fprintf>
    47f8:	ldr	x0, [sp, #56]
    47fc:	ldr	w0, [x0, #116]
    4800:	str	w0, [sp, #160]
    4804:	ldr	w0, [sp, #196]
    4808:	mov	w2, w0
    480c:	mov	w1, #0x3                   	// #3
    4810:	ldr	x0, [sp, #56]
    4814:	bl	b8 <bsW>
    4818:	ldr	w0, [sp, #212]
    481c:	mov	w2, w0
    4820:	mov	w1, #0xf                   	// #15
    4824:	ldr	x0, [sp, #56]
    4828:	bl	b8 <bsW>
    482c:	str	wzr, [sp, #244]
    4830:	b	4898 <sendMTFValues+0x41a8>
    4834:	str	wzr, [sp, #240]
    4838:	b	4858 <sendMTFValues+0x4168>
    483c:	mov	w2, #0x1                   	// #1
    4840:	mov	w1, #0x1                   	// #1
    4844:	ldr	x0, [sp, #56]
    4848:	bl	b8 <bsW>
    484c:	ldr	w0, [sp, #240]
    4850:	add	w0, w0, #0x1
    4854:	str	w0, [sp, #240]
    4858:	ldr	x1, [sp, #56]
    485c:	ldrsw	x0, [sp, #244]
    4860:	add	x0, x1, x0
    4864:	add	x0, x0, #0x4, lsl #12
    4868:	ldrb	w0, [x0, #3322]
    486c:	mov	w1, w0
    4870:	ldr	w0, [sp, #240]
    4874:	cmp	w0, w1
    4878:	b.lt	483c <sendMTFValues+0x414c>  // b.tstop
    487c:	mov	w2, #0x0                   	// #0
    4880:	mov	w1, #0x1                   	// #1
    4884:	ldr	x0, [sp, #56]
    4888:	bl	b8 <bsW>
    488c:	ldr	w0, [sp, #244]
    4890:	add	w0, w0, #0x1
    4894:	str	w0, [sp, #244]
    4898:	ldr	w1, [sp, #244]
    489c:	ldr	w0, [sp, #212]
    48a0:	cmp	w1, w0
    48a4:	b.lt	4834 <sendMTFValues+0x4144>  // b.tstop
    48a8:	ldr	x0, [sp, #56]
    48ac:	ldr	w0, [x0, #656]
    48b0:	cmp	w0, #0x2
    48b4:	b.le	48e8 <sendMTFValues+0x41f8>
    48b8:	adrp	x0, 0 <stderr>
    48bc:	add	x0, x0, #0x0
    48c0:	ldr	x3, [x0]
    48c4:	ldr	x0, [sp, #56]
    48c8:	ldr	w1, [x0, #116]
    48cc:	ldr	w0, [sp, #160]
    48d0:	sub	w0, w1, w0
    48d4:	mov	w2, w0
    48d8:	adrp	x0, 0 <BZ2_bsInitWrite>
    48dc:	add	x1, x0, #0x0
    48e0:	mov	x0, x3
    48e4:	bl	0 <fprintf>
    48e8:	ldr	x0, [sp, #56]
    48ec:	ldr	w0, [x0, #116]
    48f0:	str	w0, [sp, #160]
    48f4:	str	wzr, [sp, #248]
    48f8:	b	4a2c <sendMTFValues+0x433c>
    48fc:	ldr	x2, [sp, #56]
    4900:	ldrsw	x1, [sp, #248]
    4904:	mov	x0, x1
    4908:	lsl	x0, x0, #7
    490c:	add	x0, x0, x1
    4910:	lsl	x0, x0, #1
    4914:	add	x0, x2, x0
    4918:	add	x0, x0, #0x9, lsl #12
    491c:	ldrb	w0, [x0, #844]
    4920:	str	w0, [sp, #176]
    4924:	ldr	w0, [sp, #176]
    4928:	mov	w2, w0
    492c:	mov	w1, #0x5                   	// #5
    4930:	ldr	x0, [sp, #56]
    4934:	bl	b8 <bsW>
    4938:	str	wzr, [sp, #244]
    493c:	b	4a10 <sendMTFValues+0x4320>
    4940:	mov	w2, #0x2                   	// #2
    4944:	mov	w1, #0x2                   	// #2
    4948:	ldr	x0, [sp, #56]
    494c:	bl	b8 <bsW>
    4950:	ldr	w0, [sp, #176]
    4954:	add	w0, w0, #0x1
    4958:	str	w0, [sp, #176]
    495c:	ldr	x3, [sp, #56]
    4960:	ldrsw	x2, [sp, #244]
    4964:	ldrsw	x1, [sp, #248]
    4968:	mov	x0, x1
    496c:	lsl	x0, x0, #7
    4970:	add	x0, x0, x1
    4974:	lsl	x0, x0, #1
    4978:	add	x0, x3, x0
    497c:	add	x0, x0, x2
    4980:	add	x0, x0, #0x9, lsl #12
    4984:	ldrb	w0, [x0, #844]
    4988:	mov	w1, w0
    498c:	ldr	w0, [sp, #176]
    4990:	cmp	w0, w1
    4994:	b.lt	4940 <sendMTFValues+0x4250>  // b.tstop
    4998:	b	49b8 <sendMTFValues+0x42c8>
    499c:	mov	w2, #0x3                   	// #3
    49a0:	mov	w1, #0x2                   	// #2
    49a4:	ldr	x0, [sp, #56]
    49a8:	bl	b8 <bsW>
    49ac:	ldr	w0, [sp, #176]
    49b0:	sub	w0, w0, #0x1
    49b4:	str	w0, [sp, #176]
    49b8:	ldr	x3, [sp, #56]
    49bc:	ldrsw	x2, [sp, #244]
    49c0:	ldrsw	x1, [sp, #248]
    49c4:	mov	x0, x1
    49c8:	lsl	x0, x0, #7
    49cc:	add	x0, x0, x1
    49d0:	lsl	x0, x0, #1
    49d4:	add	x0, x3, x0
    49d8:	add	x0, x0, x2
    49dc:	add	x0, x0, #0x9, lsl #12
    49e0:	ldrb	w0, [x0, #844]
    49e4:	mov	w1, w0
    49e8:	ldr	w0, [sp, #176]
    49ec:	cmp	w0, w1
    49f0:	b.gt	499c <sendMTFValues+0x42ac>
    49f4:	mov	w2, #0x0                   	// #0
    49f8:	mov	w1, #0x1                   	// #1
    49fc:	ldr	x0, [sp, #56]
    4a00:	bl	b8 <bsW>
    4a04:	ldr	w0, [sp, #244]
    4a08:	add	w0, w0, #0x1
    4a0c:	str	w0, [sp, #244]
    4a10:	ldr	w1, [sp, #244]
    4a14:	ldr	w0, [sp, #164]
    4a18:	cmp	w1, w0
    4a1c:	b.lt	495c <sendMTFValues+0x426c>  // b.tstop
    4a20:	ldr	w0, [sp, #248]
    4a24:	add	w0, w0, #0x1
    4a28:	str	w0, [sp, #248]
    4a2c:	ldr	w1, [sp, #248]
    4a30:	ldr	w0, [sp, #196]
    4a34:	cmp	w1, w0
    4a38:	b.lt	48fc <sendMTFValues+0x420c>  // b.tstop
    4a3c:	ldr	x0, [sp, #56]
    4a40:	ldr	w0, [x0, #656]
    4a44:	cmp	w0, #0x2
    4a48:	b.le	4a7c <sendMTFValues+0x438c>
    4a4c:	adrp	x0, 0 <stderr>
    4a50:	add	x0, x0, #0x0
    4a54:	ldr	x3, [x0]
    4a58:	ldr	x0, [sp, #56]
    4a5c:	ldr	w1, [x0, #116]
    4a60:	ldr	w0, [sp, #160]
    4a64:	sub	w0, w1, w0
    4a68:	mov	w2, w0
    4a6c:	adrp	x0, 0 <BZ2_bsInitWrite>
    4a70:	add	x1, x0, #0x0
    4a74:	mov	x0, x3
    4a78:	bl	0 <fprintf>
    4a7c:	ldr	x0, [sp, #56]
    4a80:	ldr	w0, [x0, #116]
    4a84:	str	w0, [sp, #160]
    4a88:	str	wzr, [sp, #200]
    4a8c:	str	wzr, [sp, #236]
    4a90:	ldr	x0, [sp, #56]
    4a94:	ldr	w0, [x0, #668]
    4a98:	ldr	w1, [sp, #236]
    4a9c:	cmp	w1, w0
    4aa0:	b.ge	5d04 <sendMTFValues+0x5614>  // b.tcont
    4aa4:	ldr	w0, [sp, #236]
    4aa8:	add	w0, w0, #0x31
    4aac:	str	w0, [sp, #232]
    4ab0:	ldr	x0, [sp, #56]
    4ab4:	ldr	w0, [x0, #668]
    4ab8:	ldr	w1, [sp, #232]
    4abc:	cmp	w1, w0
    4ac0:	b.lt	4ad4 <sendMTFValues+0x43e4>  // b.tstop
    4ac4:	ldr	x0, [sp, #56]
    4ac8:	ldr	w0, [x0, #668]
    4acc:	sub	w0, w0, #0x1
    4ad0:	str	w0, [sp, #232]
    4ad4:	ldr	x1, [sp, #56]
    4ad8:	ldrsw	x0, [sp, #200]
    4adc:	add	x0, x1, x0
    4ae0:	ldrb	w0, [x0, #1704]
    4ae4:	mov	w1, w0
    4ae8:	ldr	w0, [sp, #196]
    4aec:	cmp	w0, w1
    4af0:	b.gt	4afc <sendMTFValues+0x440c>
    4af4:	mov	w0, #0xbbe                 	// #3006
    4af8:	bl	0 <BZ2_bz__AssertH__fail>
    4afc:	ldr	w0, [sp, #196]
    4b00:	cmp	w0, #0x6
    4b04:	b.ne	5bfc <sendMTFValues+0x550c>  // b.any
    4b08:	ldr	w1, [sp, #232]
    4b0c:	ldr	w0, [sp, #236]
    4b10:	sub	w0, w1, w0
    4b14:	cmp	w0, #0x31
    4b18:	b.ne	5bfc <sendMTFValues+0x550c>  // b.any
    4b1c:	ldr	x1, [sp, #56]
    4b20:	ldrsw	x0, [sp, #200]
    4b24:	add	x0, x1, x0
    4b28:	ldrb	w0, [x0, #1704]
    4b2c:	sxtw	x1, w0
    4b30:	mov	x0, x1
    4b34:	lsl	x0, x0, #7
    4b38:	add	x0, x0, x1
    4b3c:	lsl	x0, x0, #1
    4b40:	mov	x1, #0x9340                	// #37696
    4b44:	add	x0, x0, x1
    4b48:	ldr	x1, [sp, #56]
    4b4c:	add	x0, x1, x0
    4b50:	add	x0, x0, #0xc
    4b54:	str	x0, [sp, #152]
    4b58:	ldr	x1, [sp, #56]
    4b5c:	ldrsw	x0, [sp, #200]
    4b60:	add	x0, x1, x0
    4b64:	ldrb	w0, [x0, #1704]
    4b68:	sxtw	x1, w0
    4b6c:	mov	x0, x1
    4b70:	lsl	x0, x0, #7
    4b74:	add	x0, x0, x1
    4b78:	lsl	x0, x0, #3
    4b7c:	mov	x1, #0x9950                	// #39248
    4b80:	add	x0, x0, x1
    4b84:	ldr	x1, [sp, #56]
    4b88:	add	x0, x1, x0
    4b8c:	add	x0, x0, #0x8
    4b90:	str	x0, [sp, #144]
    4b94:	ldrsw	x0, [sp, #236]
    4b98:	lsl	x0, x0, #1
    4b9c:	ldr	x1, [sp, #168]
    4ba0:	add	x0, x1, x0
    4ba4:	ldrh	w0, [x0]
    4ba8:	strh	w0, [sp, #142]
    4bac:	ldrh	w0, [sp, #142]
    4bb0:	ldr	x1, [sp, #152]
    4bb4:	add	x0, x1, x0
    4bb8:	ldrb	w0, [x0]
    4bbc:	mov	w3, w0
    4bc0:	ldrh	w0, [sp, #142]
    4bc4:	lsl	x0, x0, #2
    4bc8:	ldr	x1, [sp, #144]
    4bcc:	add	x0, x1, x0
    4bd0:	ldr	w0, [x0]
    4bd4:	mov	w2, w0
    4bd8:	mov	w1, w3
    4bdc:	ldr	x0, [sp, #56]
    4be0:	bl	b8 <bsW>
    4be4:	ldrsw	x0, [sp, #236]
    4be8:	add	x0, x0, #0x1
    4bec:	lsl	x0, x0, #1
    4bf0:	ldr	x1, [sp, #168]
    4bf4:	add	x0, x1, x0
    4bf8:	ldrh	w0, [x0]
    4bfc:	strh	w0, [sp, #142]
    4c00:	ldrh	w0, [sp, #142]
    4c04:	ldr	x1, [sp, #152]
    4c08:	add	x0, x1, x0
    4c0c:	ldrb	w0, [x0]
    4c10:	mov	w3, w0
    4c14:	ldrh	w0, [sp, #142]
    4c18:	lsl	x0, x0, #2
    4c1c:	ldr	x1, [sp, #144]
    4c20:	add	x0, x1, x0
    4c24:	ldr	w0, [x0]
    4c28:	mov	w2, w0
    4c2c:	mov	w1, w3
    4c30:	ldr	x0, [sp, #56]
    4c34:	bl	b8 <bsW>
    4c38:	ldrsw	x0, [sp, #236]
    4c3c:	add	x0, x0, #0x2
    4c40:	lsl	x0, x0, #1
    4c44:	ldr	x1, [sp, #168]
    4c48:	add	x0, x1, x0
    4c4c:	ldrh	w0, [x0]
    4c50:	strh	w0, [sp, #142]
    4c54:	ldrh	w0, [sp, #142]
    4c58:	ldr	x1, [sp, #152]
    4c5c:	add	x0, x1, x0
    4c60:	ldrb	w0, [x0]
    4c64:	mov	w3, w0
    4c68:	ldrh	w0, [sp, #142]
    4c6c:	lsl	x0, x0, #2
    4c70:	ldr	x1, [sp, #144]
    4c74:	add	x0, x1, x0
    4c78:	ldr	w0, [x0]
    4c7c:	mov	w2, w0
    4c80:	mov	w1, w3
    4c84:	ldr	x0, [sp, #56]
    4c88:	bl	b8 <bsW>
    4c8c:	ldrsw	x0, [sp, #236]
    4c90:	add	x0, x0, #0x3
    4c94:	lsl	x0, x0, #1
    4c98:	ldr	x1, [sp, #168]
    4c9c:	add	x0, x1, x0
    4ca0:	ldrh	w0, [x0]
    4ca4:	strh	w0, [sp, #142]
    4ca8:	ldrh	w0, [sp, #142]
    4cac:	ldr	x1, [sp, #152]
    4cb0:	add	x0, x1, x0
    4cb4:	ldrb	w0, [x0]
    4cb8:	mov	w3, w0
    4cbc:	ldrh	w0, [sp, #142]
    4cc0:	lsl	x0, x0, #2
    4cc4:	ldr	x1, [sp, #144]
    4cc8:	add	x0, x1, x0
    4ccc:	ldr	w0, [x0]
    4cd0:	mov	w2, w0
    4cd4:	mov	w1, w3
    4cd8:	ldr	x0, [sp, #56]
    4cdc:	bl	b8 <bsW>
    4ce0:	ldrsw	x0, [sp, #236]
    4ce4:	add	x0, x0, #0x4
    4ce8:	lsl	x0, x0, #1
    4cec:	ldr	x1, [sp, #168]
    4cf0:	add	x0, x1, x0
    4cf4:	ldrh	w0, [x0]
    4cf8:	strh	w0, [sp, #142]
    4cfc:	ldrh	w0, [sp, #142]
    4d00:	ldr	x1, [sp, #152]
    4d04:	add	x0, x1, x0
    4d08:	ldrb	w0, [x0]
    4d0c:	mov	w3, w0
    4d10:	ldrh	w0, [sp, #142]
    4d14:	lsl	x0, x0, #2
    4d18:	ldr	x1, [sp, #144]
    4d1c:	add	x0, x1, x0
    4d20:	ldr	w0, [x0]
    4d24:	mov	w2, w0
    4d28:	mov	w1, w3
    4d2c:	ldr	x0, [sp, #56]
    4d30:	bl	b8 <bsW>
    4d34:	ldrsw	x0, [sp, #236]
    4d38:	add	x0, x0, #0x5
    4d3c:	lsl	x0, x0, #1
    4d40:	ldr	x1, [sp, #168]
    4d44:	add	x0, x1, x0
    4d48:	ldrh	w0, [x0]
    4d4c:	strh	w0, [sp, #142]
    4d50:	ldrh	w0, [sp, #142]
    4d54:	ldr	x1, [sp, #152]
    4d58:	add	x0, x1, x0
    4d5c:	ldrb	w0, [x0]
    4d60:	mov	w3, w0
    4d64:	ldrh	w0, [sp, #142]
    4d68:	lsl	x0, x0, #2
    4d6c:	ldr	x1, [sp, #144]
    4d70:	add	x0, x1, x0
    4d74:	ldr	w0, [x0]
    4d78:	mov	w2, w0
    4d7c:	mov	w1, w3
    4d80:	ldr	x0, [sp, #56]
    4d84:	bl	b8 <bsW>
    4d88:	ldrsw	x0, [sp, #236]
    4d8c:	add	x0, x0, #0x6
    4d90:	lsl	x0, x0, #1
    4d94:	ldr	x1, [sp, #168]
    4d98:	add	x0, x1, x0
    4d9c:	ldrh	w0, [x0]
    4da0:	strh	w0, [sp, #142]
    4da4:	ldrh	w0, [sp, #142]
    4da8:	ldr	x1, [sp, #152]
    4dac:	add	x0, x1, x0
    4db0:	ldrb	w0, [x0]
    4db4:	mov	w3, w0
    4db8:	ldrh	w0, [sp, #142]
    4dbc:	lsl	x0, x0, #2
    4dc0:	ldr	x1, [sp, #144]
    4dc4:	add	x0, x1, x0
    4dc8:	ldr	w0, [x0]
    4dcc:	mov	w2, w0
    4dd0:	mov	w1, w3
    4dd4:	ldr	x0, [sp, #56]
    4dd8:	bl	b8 <bsW>
    4ddc:	ldrsw	x0, [sp, #236]
    4de0:	add	x0, x0, #0x7
    4de4:	lsl	x0, x0, #1
    4de8:	ldr	x1, [sp, #168]
    4dec:	add	x0, x1, x0
    4df0:	ldrh	w0, [x0]
    4df4:	strh	w0, [sp, #142]
    4df8:	ldrh	w0, [sp, #142]
    4dfc:	ldr	x1, [sp, #152]
    4e00:	add	x0, x1, x0
    4e04:	ldrb	w0, [x0]
    4e08:	mov	w3, w0
    4e0c:	ldrh	w0, [sp, #142]
    4e10:	lsl	x0, x0, #2
    4e14:	ldr	x1, [sp, #144]
    4e18:	add	x0, x1, x0
    4e1c:	ldr	w0, [x0]
    4e20:	mov	w2, w0
    4e24:	mov	w1, w3
    4e28:	ldr	x0, [sp, #56]
    4e2c:	bl	b8 <bsW>
    4e30:	ldrsw	x0, [sp, #236]
    4e34:	add	x0, x0, #0x8
    4e38:	lsl	x0, x0, #1
    4e3c:	ldr	x1, [sp, #168]
    4e40:	add	x0, x1, x0
    4e44:	ldrh	w0, [x0]
    4e48:	strh	w0, [sp, #142]
    4e4c:	ldrh	w0, [sp, #142]
    4e50:	ldr	x1, [sp, #152]
    4e54:	add	x0, x1, x0
    4e58:	ldrb	w0, [x0]
    4e5c:	mov	w3, w0
    4e60:	ldrh	w0, [sp, #142]
    4e64:	lsl	x0, x0, #2
    4e68:	ldr	x1, [sp, #144]
    4e6c:	add	x0, x1, x0
    4e70:	ldr	w0, [x0]
    4e74:	mov	w2, w0
    4e78:	mov	w1, w3
    4e7c:	ldr	x0, [sp, #56]
    4e80:	bl	b8 <bsW>
    4e84:	ldrsw	x0, [sp, #236]
    4e88:	add	x0, x0, #0x9
    4e8c:	lsl	x0, x0, #1
    4e90:	ldr	x1, [sp, #168]
    4e94:	add	x0, x1, x0
    4e98:	ldrh	w0, [x0]
    4e9c:	strh	w0, [sp, #142]
    4ea0:	ldrh	w0, [sp, #142]
    4ea4:	ldr	x1, [sp, #152]
    4ea8:	add	x0, x1, x0
    4eac:	ldrb	w0, [x0]
    4eb0:	mov	w3, w0
    4eb4:	ldrh	w0, [sp, #142]
    4eb8:	lsl	x0, x0, #2
    4ebc:	ldr	x1, [sp, #144]
    4ec0:	add	x0, x1, x0
    4ec4:	ldr	w0, [x0]
    4ec8:	mov	w2, w0
    4ecc:	mov	w1, w3
    4ed0:	ldr	x0, [sp, #56]
    4ed4:	bl	b8 <bsW>
    4ed8:	ldrsw	x0, [sp, #236]
    4edc:	add	x0, x0, #0xa
    4ee0:	lsl	x0, x0, #1
    4ee4:	ldr	x1, [sp, #168]
    4ee8:	add	x0, x1, x0
    4eec:	ldrh	w0, [x0]
    4ef0:	strh	w0, [sp, #142]
    4ef4:	ldrh	w0, [sp, #142]
    4ef8:	ldr	x1, [sp, #152]
    4efc:	add	x0, x1, x0
    4f00:	ldrb	w0, [x0]
    4f04:	mov	w3, w0
    4f08:	ldrh	w0, [sp, #142]
    4f0c:	lsl	x0, x0, #2
    4f10:	ldr	x1, [sp, #144]
    4f14:	add	x0, x1, x0
    4f18:	ldr	w0, [x0]
    4f1c:	mov	w2, w0
    4f20:	mov	w1, w3
    4f24:	ldr	x0, [sp, #56]
    4f28:	bl	b8 <bsW>
    4f2c:	ldrsw	x0, [sp, #236]
    4f30:	add	x0, x0, #0xb
    4f34:	lsl	x0, x0, #1
    4f38:	ldr	x1, [sp, #168]
    4f3c:	add	x0, x1, x0
    4f40:	ldrh	w0, [x0]
    4f44:	strh	w0, [sp, #142]
    4f48:	ldrh	w0, [sp, #142]
    4f4c:	ldr	x1, [sp, #152]
    4f50:	add	x0, x1, x0
    4f54:	ldrb	w0, [x0]
    4f58:	mov	w3, w0
    4f5c:	ldrh	w0, [sp, #142]
    4f60:	lsl	x0, x0, #2
    4f64:	ldr	x1, [sp, #144]
    4f68:	add	x0, x1, x0
    4f6c:	ldr	w0, [x0]
    4f70:	mov	w2, w0
    4f74:	mov	w1, w3
    4f78:	ldr	x0, [sp, #56]
    4f7c:	bl	b8 <bsW>
    4f80:	ldrsw	x0, [sp, #236]
    4f84:	add	x0, x0, #0xc
    4f88:	lsl	x0, x0, #1
    4f8c:	ldr	x1, [sp, #168]
    4f90:	add	x0, x1, x0
    4f94:	ldrh	w0, [x0]
    4f98:	strh	w0, [sp, #142]
    4f9c:	ldrh	w0, [sp, #142]
    4fa0:	ldr	x1, [sp, #152]
    4fa4:	add	x0, x1, x0
    4fa8:	ldrb	w0, [x0]
    4fac:	mov	w3, w0
    4fb0:	ldrh	w0, [sp, #142]
    4fb4:	lsl	x0, x0, #2
    4fb8:	ldr	x1, [sp, #144]
    4fbc:	add	x0, x1, x0
    4fc0:	ldr	w0, [x0]
    4fc4:	mov	w2, w0
    4fc8:	mov	w1, w3
    4fcc:	ldr	x0, [sp, #56]
    4fd0:	bl	b8 <bsW>
    4fd4:	ldrsw	x0, [sp, #236]
    4fd8:	add	x0, x0, #0xd
    4fdc:	lsl	x0, x0, #1
    4fe0:	ldr	x1, [sp, #168]
    4fe4:	add	x0, x1, x0
    4fe8:	ldrh	w0, [x0]
    4fec:	strh	w0, [sp, #142]
    4ff0:	ldrh	w0, [sp, #142]
    4ff4:	ldr	x1, [sp, #152]
    4ff8:	add	x0, x1, x0
    4ffc:	ldrb	w0, [x0]
    5000:	mov	w3, w0
    5004:	ldrh	w0, [sp, #142]
    5008:	lsl	x0, x0, #2
    500c:	ldr	x1, [sp, #144]
    5010:	add	x0, x1, x0
    5014:	ldr	w0, [x0]
    5018:	mov	w2, w0
    501c:	mov	w1, w3
    5020:	ldr	x0, [sp, #56]
    5024:	bl	b8 <bsW>
    5028:	ldrsw	x0, [sp, #236]
    502c:	add	x0, x0, #0xe
    5030:	lsl	x0, x0, #1
    5034:	ldr	x1, [sp, #168]
    5038:	add	x0, x1, x0
    503c:	ldrh	w0, [x0]
    5040:	strh	w0, [sp, #142]
    5044:	ldrh	w0, [sp, #142]
    5048:	ldr	x1, [sp, #152]
    504c:	add	x0, x1, x0
    5050:	ldrb	w0, [x0]
    5054:	mov	w3, w0
    5058:	ldrh	w0, [sp, #142]
    505c:	lsl	x0, x0, #2
    5060:	ldr	x1, [sp, #144]
    5064:	add	x0, x1, x0
    5068:	ldr	w0, [x0]
    506c:	mov	w2, w0
    5070:	mov	w1, w3
    5074:	ldr	x0, [sp, #56]
    5078:	bl	b8 <bsW>
    507c:	ldrsw	x0, [sp, #236]
    5080:	add	x0, x0, #0xf
    5084:	lsl	x0, x0, #1
    5088:	ldr	x1, [sp, #168]
    508c:	add	x0, x1, x0
    5090:	ldrh	w0, [x0]
    5094:	strh	w0, [sp, #142]
    5098:	ldrh	w0, [sp, #142]
    509c:	ldr	x1, [sp, #152]
    50a0:	add	x0, x1, x0
    50a4:	ldrb	w0, [x0]
    50a8:	mov	w3, w0
    50ac:	ldrh	w0, [sp, #142]
    50b0:	lsl	x0, x0, #2
    50b4:	ldr	x1, [sp, #144]
    50b8:	add	x0, x1, x0
    50bc:	ldr	w0, [x0]
    50c0:	mov	w2, w0
    50c4:	mov	w1, w3
    50c8:	ldr	x0, [sp, #56]
    50cc:	bl	b8 <bsW>
    50d0:	ldrsw	x0, [sp, #236]
    50d4:	add	x0, x0, #0x10
    50d8:	lsl	x0, x0, #1
    50dc:	ldr	x1, [sp, #168]
    50e0:	add	x0, x1, x0
    50e4:	ldrh	w0, [x0]
    50e8:	strh	w0, [sp, #142]
    50ec:	ldrh	w0, [sp, #142]
    50f0:	ldr	x1, [sp, #152]
    50f4:	add	x0, x1, x0
    50f8:	ldrb	w0, [x0]
    50fc:	mov	w3, w0
    5100:	ldrh	w0, [sp, #142]
    5104:	lsl	x0, x0, #2
    5108:	ldr	x1, [sp, #144]
    510c:	add	x0, x1, x0
    5110:	ldr	w0, [x0]
    5114:	mov	w2, w0
    5118:	mov	w1, w3
    511c:	ldr	x0, [sp, #56]
    5120:	bl	b8 <bsW>
    5124:	ldrsw	x0, [sp, #236]
    5128:	add	x0, x0, #0x11
    512c:	lsl	x0, x0, #1
    5130:	ldr	x1, [sp, #168]
    5134:	add	x0, x1, x0
    5138:	ldrh	w0, [x0]
    513c:	strh	w0, [sp, #142]
    5140:	ldrh	w0, [sp, #142]
    5144:	ldr	x1, [sp, #152]
    5148:	add	x0, x1, x0
    514c:	ldrb	w0, [x0]
    5150:	mov	w3, w0
    5154:	ldrh	w0, [sp, #142]
    5158:	lsl	x0, x0, #2
    515c:	ldr	x1, [sp, #144]
    5160:	add	x0, x1, x0
    5164:	ldr	w0, [x0]
    5168:	mov	w2, w0
    516c:	mov	w1, w3
    5170:	ldr	x0, [sp, #56]
    5174:	bl	b8 <bsW>
    5178:	ldrsw	x0, [sp, #236]
    517c:	add	x0, x0, #0x12
    5180:	lsl	x0, x0, #1
    5184:	ldr	x1, [sp, #168]
    5188:	add	x0, x1, x0
    518c:	ldrh	w0, [x0]
    5190:	strh	w0, [sp, #142]
    5194:	ldrh	w0, [sp, #142]
    5198:	ldr	x1, [sp, #152]
    519c:	add	x0, x1, x0
    51a0:	ldrb	w0, [x0]
    51a4:	mov	w3, w0
    51a8:	ldrh	w0, [sp, #142]
    51ac:	lsl	x0, x0, #2
    51b0:	ldr	x1, [sp, #144]
    51b4:	add	x0, x1, x0
    51b8:	ldr	w0, [x0]
    51bc:	mov	w2, w0
    51c0:	mov	w1, w3
    51c4:	ldr	x0, [sp, #56]
    51c8:	bl	b8 <bsW>
    51cc:	ldrsw	x0, [sp, #236]
    51d0:	add	x0, x0, #0x13
    51d4:	lsl	x0, x0, #1
    51d8:	ldr	x1, [sp, #168]
    51dc:	add	x0, x1, x0
    51e0:	ldrh	w0, [x0]
    51e4:	strh	w0, [sp, #142]
    51e8:	ldrh	w0, [sp, #142]
    51ec:	ldr	x1, [sp, #152]
    51f0:	add	x0, x1, x0
    51f4:	ldrb	w0, [x0]
    51f8:	mov	w3, w0
    51fc:	ldrh	w0, [sp, #142]
    5200:	lsl	x0, x0, #2
    5204:	ldr	x1, [sp, #144]
    5208:	add	x0, x1, x0
    520c:	ldr	w0, [x0]
    5210:	mov	w2, w0
    5214:	mov	w1, w3
    5218:	ldr	x0, [sp, #56]
    521c:	bl	b8 <bsW>
    5220:	ldrsw	x0, [sp, #236]
    5224:	add	x0, x0, #0x14
    5228:	lsl	x0, x0, #1
    522c:	ldr	x1, [sp, #168]
    5230:	add	x0, x1, x0
    5234:	ldrh	w0, [x0]
    5238:	strh	w0, [sp, #142]
    523c:	ldrh	w0, [sp, #142]
    5240:	ldr	x1, [sp, #152]
    5244:	add	x0, x1, x0
    5248:	ldrb	w0, [x0]
    524c:	mov	w3, w0
    5250:	ldrh	w0, [sp, #142]
    5254:	lsl	x0, x0, #2
    5258:	ldr	x1, [sp, #144]
    525c:	add	x0, x1, x0
    5260:	ldr	w0, [x0]
    5264:	mov	w2, w0
    5268:	mov	w1, w3
    526c:	ldr	x0, [sp, #56]
    5270:	bl	b8 <bsW>
    5274:	ldrsw	x0, [sp, #236]
    5278:	add	x0, x0, #0x15
    527c:	lsl	x0, x0, #1
    5280:	ldr	x1, [sp, #168]
    5284:	add	x0, x1, x0
    5288:	ldrh	w0, [x0]
    528c:	strh	w0, [sp, #142]
    5290:	ldrh	w0, [sp, #142]
    5294:	ldr	x1, [sp, #152]
    5298:	add	x0, x1, x0
    529c:	ldrb	w0, [x0]
    52a0:	mov	w3, w0
    52a4:	ldrh	w0, [sp, #142]
    52a8:	lsl	x0, x0, #2
    52ac:	ldr	x1, [sp, #144]
    52b0:	add	x0, x1, x0
    52b4:	ldr	w0, [x0]
    52b8:	mov	w2, w0
    52bc:	mov	w1, w3
    52c0:	ldr	x0, [sp, #56]
    52c4:	bl	b8 <bsW>
    52c8:	ldrsw	x0, [sp, #236]
    52cc:	add	x0, x0, #0x16
    52d0:	lsl	x0, x0, #1
    52d4:	ldr	x1, [sp, #168]
    52d8:	add	x0, x1, x0
    52dc:	ldrh	w0, [x0]
    52e0:	strh	w0, [sp, #142]
    52e4:	ldrh	w0, [sp, #142]
    52e8:	ldr	x1, [sp, #152]
    52ec:	add	x0, x1, x0
    52f0:	ldrb	w0, [x0]
    52f4:	mov	w3, w0
    52f8:	ldrh	w0, [sp, #142]
    52fc:	lsl	x0, x0, #2
    5300:	ldr	x1, [sp, #144]
    5304:	add	x0, x1, x0
    5308:	ldr	w0, [x0]
    530c:	mov	w2, w0
    5310:	mov	w1, w3
    5314:	ldr	x0, [sp, #56]
    5318:	bl	b8 <bsW>
    531c:	ldrsw	x0, [sp, #236]
    5320:	add	x0, x0, #0x17
    5324:	lsl	x0, x0, #1
    5328:	ldr	x1, [sp, #168]
    532c:	add	x0, x1, x0
    5330:	ldrh	w0, [x0]
    5334:	strh	w0, [sp, #142]
    5338:	ldrh	w0, [sp, #142]
    533c:	ldr	x1, [sp, #152]
    5340:	add	x0, x1, x0
    5344:	ldrb	w0, [x0]
    5348:	mov	w3, w0
    534c:	ldrh	w0, [sp, #142]
    5350:	lsl	x0, x0, #2
    5354:	ldr	x1, [sp, #144]
    5358:	add	x0, x1, x0
    535c:	ldr	w0, [x0]
    5360:	mov	w2, w0
    5364:	mov	w1, w3
    5368:	ldr	x0, [sp, #56]
    536c:	bl	b8 <bsW>
    5370:	ldrsw	x0, [sp, #236]
    5374:	add	x0, x0, #0x18
    5378:	lsl	x0, x0, #1
    537c:	ldr	x1, [sp, #168]
    5380:	add	x0, x1, x0
    5384:	ldrh	w0, [x0]
    5388:	strh	w0, [sp, #142]
    538c:	ldrh	w0, [sp, #142]
    5390:	ldr	x1, [sp, #152]
    5394:	add	x0, x1, x0
    5398:	ldrb	w0, [x0]
    539c:	mov	w3, w0
    53a0:	ldrh	w0, [sp, #142]
    53a4:	lsl	x0, x0, #2
    53a8:	ldr	x1, [sp, #144]
    53ac:	add	x0, x1, x0
    53b0:	ldr	w0, [x0]
    53b4:	mov	w2, w0
    53b8:	mov	w1, w3
    53bc:	ldr	x0, [sp, #56]
    53c0:	bl	b8 <bsW>
    53c4:	ldrsw	x0, [sp, #236]
    53c8:	add	x0, x0, #0x19
    53cc:	lsl	x0, x0, #1
    53d0:	ldr	x1, [sp, #168]
    53d4:	add	x0, x1, x0
    53d8:	ldrh	w0, [x0]
    53dc:	strh	w0, [sp, #142]
    53e0:	ldrh	w0, [sp, #142]
    53e4:	ldr	x1, [sp, #152]
    53e8:	add	x0, x1, x0
    53ec:	ldrb	w0, [x0]
    53f0:	mov	w3, w0
    53f4:	ldrh	w0, [sp, #142]
    53f8:	lsl	x0, x0, #2
    53fc:	ldr	x1, [sp, #144]
    5400:	add	x0, x1, x0
    5404:	ldr	w0, [x0]
    5408:	mov	w2, w0
    540c:	mov	w1, w3
    5410:	ldr	x0, [sp, #56]
    5414:	bl	b8 <bsW>
    5418:	ldrsw	x0, [sp, #236]
    541c:	add	x0, x0, #0x1a
    5420:	lsl	x0, x0, #1
    5424:	ldr	x1, [sp, #168]
    5428:	add	x0, x1, x0
    542c:	ldrh	w0, [x0]
    5430:	strh	w0, [sp, #142]
    5434:	ldrh	w0, [sp, #142]
    5438:	ldr	x1, [sp, #152]
    543c:	add	x0, x1, x0
    5440:	ldrb	w0, [x0]
    5444:	mov	w3, w0
    5448:	ldrh	w0, [sp, #142]
    544c:	lsl	x0, x0, #2
    5450:	ldr	x1, [sp, #144]
    5454:	add	x0, x1, x0
    5458:	ldr	w0, [x0]
    545c:	mov	w2, w0
    5460:	mov	w1, w3
    5464:	ldr	x0, [sp, #56]
    5468:	bl	b8 <bsW>
    546c:	ldrsw	x0, [sp, #236]
    5470:	add	x0, x0, #0x1b
    5474:	lsl	x0, x0, #1
    5478:	ldr	x1, [sp, #168]
    547c:	add	x0, x1, x0
    5480:	ldrh	w0, [x0]
    5484:	strh	w0, [sp, #142]
    5488:	ldrh	w0, [sp, #142]
    548c:	ldr	x1, [sp, #152]
    5490:	add	x0, x1, x0
    5494:	ldrb	w0, [x0]
    5498:	mov	w3, w0
    549c:	ldrh	w0, [sp, #142]
    54a0:	lsl	x0, x0, #2
    54a4:	ldr	x1, [sp, #144]
    54a8:	add	x0, x1, x0
    54ac:	ldr	w0, [x0]
    54b0:	mov	w2, w0
    54b4:	mov	w1, w3
    54b8:	ldr	x0, [sp, #56]
    54bc:	bl	b8 <bsW>
    54c0:	ldrsw	x0, [sp, #236]
    54c4:	add	x0, x0, #0x1c
    54c8:	lsl	x0, x0, #1
    54cc:	ldr	x1, [sp, #168]
    54d0:	add	x0, x1, x0
    54d4:	ldrh	w0, [x0]
    54d8:	strh	w0, [sp, #142]
    54dc:	ldrh	w0, [sp, #142]
    54e0:	ldr	x1, [sp, #152]
    54e4:	add	x0, x1, x0
    54e8:	ldrb	w0, [x0]
    54ec:	mov	w3, w0
    54f0:	ldrh	w0, [sp, #142]
    54f4:	lsl	x0, x0, #2
    54f8:	ldr	x1, [sp, #144]
    54fc:	add	x0, x1, x0
    5500:	ldr	w0, [x0]
    5504:	mov	w2, w0
    5508:	mov	w1, w3
    550c:	ldr	x0, [sp, #56]
    5510:	bl	b8 <bsW>
    5514:	ldrsw	x0, [sp, #236]
    5518:	add	x0, x0, #0x1d
    551c:	lsl	x0, x0, #1
    5520:	ldr	x1, [sp, #168]
    5524:	add	x0, x1, x0
    5528:	ldrh	w0, [x0]
    552c:	strh	w0, [sp, #142]
    5530:	ldrh	w0, [sp, #142]
    5534:	ldr	x1, [sp, #152]
    5538:	add	x0, x1, x0
    553c:	ldrb	w0, [x0]
    5540:	mov	w3, w0
    5544:	ldrh	w0, [sp, #142]
    5548:	lsl	x0, x0, #2
    554c:	ldr	x1, [sp, #144]
    5550:	add	x0, x1, x0
    5554:	ldr	w0, [x0]
    5558:	mov	w2, w0
    555c:	mov	w1, w3
    5560:	ldr	x0, [sp, #56]
    5564:	bl	b8 <bsW>
    5568:	ldrsw	x0, [sp, #236]
    556c:	add	x0, x0, #0x1e
    5570:	lsl	x0, x0, #1
    5574:	ldr	x1, [sp, #168]
    5578:	add	x0, x1, x0
    557c:	ldrh	w0, [x0]
    5580:	strh	w0, [sp, #142]
    5584:	ldrh	w0, [sp, #142]
    5588:	ldr	x1, [sp, #152]
    558c:	add	x0, x1, x0
    5590:	ldrb	w0, [x0]
    5594:	mov	w3, w0
    5598:	ldrh	w0, [sp, #142]
    559c:	lsl	x0, x0, #2
    55a0:	ldr	x1, [sp, #144]
    55a4:	add	x0, x1, x0
    55a8:	ldr	w0, [x0]
    55ac:	mov	w2, w0
    55b0:	mov	w1, w3
    55b4:	ldr	x0, [sp, #56]
    55b8:	bl	b8 <bsW>
    55bc:	ldrsw	x0, [sp, #236]
    55c0:	add	x0, x0, #0x1f
    55c4:	lsl	x0, x0, #1
    55c8:	ldr	x1, [sp, #168]
    55cc:	add	x0, x1, x0
    55d0:	ldrh	w0, [x0]
    55d4:	strh	w0, [sp, #142]
    55d8:	ldrh	w0, [sp, #142]
    55dc:	ldr	x1, [sp, #152]
    55e0:	add	x0, x1, x0
    55e4:	ldrb	w0, [x0]
    55e8:	mov	w3, w0
    55ec:	ldrh	w0, [sp, #142]
    55f0:	lsl	x0, x0, #2
    55f4:	ldr	x1, [sp, #144]
    55f8:	add	x0, x1, x0
    55fc:	ldr	w0, [x0]
    5600:	mov	w2, w0
    5604:	mov	w1, w3
    5608:	ldr	x0, [sp, #56]
    560c:	bl	b8 <bsW>
    5610:	ldrsw	x0, [sp, #236]
    5614:	add	x0, x0, #0x20
    5618:	lsl	x0, x0, #1
    561c:	ldr	x1, [sp, #168]
    5620:	add	x0, x1, x0
    5624:	ldrh	w0, [x0]
    5628:	strh	w0, [sp, #142]
    562c:	ldrh	w0, [sp, #142]
    5630:	ldr	x1, [sp, #152]
    5634:	add	x0, x1, x0
    5638:	ldrb	w0, [x0]
    563c:	mov	w3, w0
    5640:	ldrh	w0, [sp, #142]
    5644:	lsl	x0, x0, #2
    5648:	ldr	x1, [sp, #144]
    564c:	add	x0, x1, x0
    5650:	ldr	w0, [x0]
    5654:	mov	w2, w0
    5658:	mov	w1, w3
    565c:	ldr	x0, [sp, #56]
    5660:	bl	b8 <bsW>
    5664:	ldrsw	x0, [sp, #236]
    5668:	add	x0, x0, #0x21
    566c:	lsl	x0, x0, #1
    5670:	ldr	x1, [sp, #168]
    5674:	add	x0, x1, x0
    5678:	ldrh	w0, [x0]
    567c:	strh	w0, [sp, #142]
    5680:	ldrh	w0, [sp, #142]
    5684:	ldr	x1, [sp, #152]
    5688:	add	x0, x1, x0
    568c:	ldrb	w0, [x0]
    5690:	mov	w3, w0
    5694:	ldrh	w0, [sp, #142]
    5698:	lsl	x0, x0, #2
    569c:	ldr	x1, [sp, #144]
    56a0:	add	x0, x1, x0
    56a4:	ldr	w0, [x0]
    56a8:	mov	w2, w0
    56ac:	mov	w1, w3
    56b0:	ldr	x0, [sp, #56]
    56b4:	bl	b8 <bsW>
    56b8:	ldrsw	x0, [sp, #236]
    56bc:	add	x0, x0, #0x22
    56c0:	lsl	x0, x0, #1
    56c4:	ldr	x1, [sp, #168]
    56c8:	add	x0, x1, x0
    56cc:	ldrh	w0, [x0]
    56d0:	strh	w0, [sp, #142]
    56d4:	ldrh	w0, [sp, #142]
    56d8:	ldr	x1, [sp, #152]
    56dc:	add	x0, x1, x0
    56e0:	ldrb	w0, [x0]
    56e4:	mov	w3, w0
    56e8:	ldrh	w0, [sp, #142]
    56ec:	lsl	x0, x0, #2
    56f0:	ldr	x1, [sp, #144]
    56f4:	add	x0, x1, x0
    56f8:	ldr	w0, [x0]
    56fc:	mov	w2, w0
    5700:	mov	w1, w3
    5704:	ldr	x0, [sp, #56]
    5708:	bl	b8 <bsW>
    570c:	ldrsw	x0, [sp, #236]
    5710:	add	x0, x0, #0x23
    5714:	lsl	x0, x0, #1
    5718:	ldr	x1, [sp, #168]
    571c:	add	x0, x1, x0
    5720:	ldrh	w0, [x0]
    5724:	strh	w0, [sp, #142]
    5728:	ldrh	w0, [sp, #142]
    572c:	ldr	x1, [sp, #152]
    5730:	add	x0, x1, x0
    5734:	ldrb	w0, [x0]
    5738:	mov	w3, w0
    573c:	ldrh	w0, [sp, #142]
    5740:	lsl	x0, x0, #2
    5744:	ldr	x1, [sp, #144]
    5748:	add	x0, x1, x0
    574c:	ldr	w0, [x0]
    5750:	mov	w2, w0
    5754:	mov	w1, w3
    5758:	ldr	x0, [sp, #56]
    575c:	bl	b8 <bsW>
    5760:	ldrsw	x0, [sp, #236]
    5764:	add	x0, x0, #0x24
    5768:	lsl	x0, x0, #1
    576c:	ldr	x1, [sp, #168]
    5770:	add	x0, x1, x0
    5774:	ldrh	w0, [x0]
    5778:	strh	w0, [sp, #142]
    577c:	ldrh	w0, [sp, #142]
    5780:	ldr	x1, [sp, #152]
    5784:	add	x0, x1, x0
    5788:	ldrb	w0, [x0]
    578c:	mov	w3, w0
    5790:	ldrh	w0, [sp, #142]
    5794:	lsl	x0, x0, #2
    5798:	ldr	x1, [sp, #144]
    579c:	add	x0, x1, x0
    57a0:	ldr	w0, [x0]
    57a4:	mov	w2, w0
    57a8:	mov	w1, w3
    57ac:	ldr	x0, [sp, #56]
    57b0:	bl	b8 <bsW>
    57b4:	ldrsw	x0, [sp, #236]
    57b8:	add	x0, x0, #0x25
    57bc:	lsl	x0, x0, #1
    57c0:	ldr	x1, [sp, #168]
    57c4:	add	x0, x1, x0
    57c8:	ldrh	w0, [x0]
    57cc:	strh	w0, [sp, #142]
    57d0:	ldrh	w0, [sp, #142]
    57d4:	ldr	x1, [sp, #152]
    57d8:	add	x0, x1, x0
    57dc:	ldrb	w0, [x0]
    57e0:	mov	w3, w0
    57e4:	ldrh	w0, [sp, #142]
    57e8:	lsl	x0, x0, #2
    57ec:	ldr	x1, [sp, #144]
    57f0:	add	x0, x1, x0
    57f4:	ldr	w0, [x0]
    57f8:	mov	w2, w0
    57fc:	mov	w1, w3
    5800:	ldr	x0, [sp, #56]
    5804:	bl	b8 <bsW>
    5808:	ldrsw	x0, [sp, #236]
    580c:	add	x0, x0, #0x26
    5810:	lsl	x0, x0, #1
    5814:	ldr	x1, [sp, #168]
    5818:	add	x0, x1, x0
    581c:	ldrh	w0, [x0]
    5820:	strh	w0, [sp, #142]
    5824:	ldrh	w0, [sp, #142]
    5828:	ldr	x1, [sp, #152]
    582c:	add	x0, x1, x0
    5830:	ldrb	w0, [x0]
    5834:	mov	w3, w0
    5838:	ldrh	w0, [sp, #142]
    583c:	lsl	x0, x0, #2
    5840:	ldr	x1, [sp, #144]
    5844:	add	x0, x1, x0
    5848:	ldr	w0, [x0]
    584c:	mov	w2, w0
    5850:	mov	w1, w3
    5854:	ldr	x0, [sp, #56]
    5858:	bl	b8 <bsW>
    585c:	ldrsw	x0, [sp, #236]
    5860:	add	x0, x0, #0x27
    5864:	lsl	x0, x0, #1
    5868:	ldr	x1, [sp, #168]
    586c:	add	x0, x1, x0
    5870:	ldrh	w0, [x0]
    5874:	strh	w0, [sp, #142]
    5878:	ldrh	w0, [sp, #142]
    587c:	ldr	x1, [sp, #152]
    5880:	add	x0, x1, x0
    5884:	ldrb	w0, [x0]
    5888:	mov	w3, w0
    588c:	ldrh	w0, [sp, #142]
    5890:	lsl	x0, x0, #2
    5894:	ldr	x1, [sp, #144]
    5898:	add	x0, x1, x0
    589c:	ldr	w0, [x0]
    58a0:	mov	w2, w0
    58a4:	mov	w1, w3
    58a8:	ldr	x0, [sp, #56]
    58ac:	bl	b8 <bsW>
    58b0:	ldrsw	x0, [sp, #236]
    58b4:	add	x0, x0, #0x28
    58b8:	lsl	x0, x0, #1
    58bc:	ldr	x1, [sp, #168]
    58c0:	add	x0, x1, x0
    58c4:	ldrh	w0, [x0]
    58c8:	strh	w0, [sp, #142]
    58cc:	ldrh	w0, [sp, #142]
    58d0:	ldr	x1, [sp, #152]
    58d4:	add	x0, x1, x0
    58d8:	ldrb	w0, [x0]
    58dc:	mov	w3, w0
    58e0:	ldrh	w0, [sp, #142]
    58e4:	lsl	x0, x0, #2
    58e8:	ldr	x1, [sp, #144]
    58ec:	add	x0, x1, x0
    58f0:	ldr	w0, [x0]
    58f4:	mov	w2, w0
    58f8:	mov	w1, w3
    58fc:	ldr	x0, [sp, #56]
    5900:	bl	b8 <bsW>
    5904:	ldrsw	x0, [sp, #236]
    5908:	add	x0, x0, #0x29
    590c:	lsl	x0, x0, #1
    5910:	ldr	x1, [sp, #168]
    5914:	add	x0, x1, x0
    5918:	ldrh	w0, [x0]
    591c:	strh	w0, [sp, #142]
    5920:	ldrh	w0, [sp, #142]
    5924:	ldr	x1, [sp, #152]
    5928:	add	x0, x1, x0
    592c:	ldrb	w0, [x0]
    5930:	mov	w3, w0
    5934:	ldrh	w0, [sp, #142]
    5938:	lsl	x0, x0, #2
    593c:	ldr	x1, [sp, #144]
    5940:	add	x0, x1, x0
    5944:	ldr	w0, [x0]
    5948:	mov	w2, w0
    594c:	mov	w1, w3
    5950:	ldr	x0, [sp, #56]
    5954:	bl	b8 <bsW>
    5958:	ldrsw	x0, [sp, #236]
    595c:	add	x0, x0, #0x2a
    5960:	lsl	x0, x0, #1
    5964:	ldr	x1, [sp, #168]
    5968:	add	x0, x1, x0
    596c:	ldrh	w0, [x0]
    5970:	strh	w0, [sp, #142]
    5974:	ldrh	w0, [sp, #142]
    5978:	ldr	x1, [sp, #152]
    597c:	add	x0, x1, x0
    5980:	ldrb	w0, [x0]
    5984:	mov	w3, w0
    5988:	ldrh	w0, [sp, #142]
    598c:	lsl	x0, x0, #2
    5990:	ldr	x1, [sp, #144]
    5994:	add	x0, x1, x0
    5998:	ldr	w0, [x0]
    599c:	mov	w2, w0
    59a0:	mov	w1, w3
    59a4:	ldr	x0, [sp, #56]
    59a8:	bl	b8 <bsW>
    59ac:	ldrsw	x0, [sp, #236]
    59b0:	add	x0, x0, #0x2b
    59b4:	lsl	x0, x0, #1
    59b8:	ldr	x1, [sp, #168]
    59bc:	add	x0, x1, x0
    59c0:	ldrh	w0, [x0]
    59c4:	strh	w0, [sp, #142]
    59c8:	ldrh	w0, [sp, #142]
    59cc:	ldr	x1, [sp, #152]
    59d0:	add	x0, x1, x0
    59d4:	ldrb	w0, [x0]
    59d8:	mov	w3, w0
    59dc:	ldrh	w0, [sp, #142]
    59e0:	lsl	x0, x0, #2
    59e4:	ldr	x1, [sp, #144]
    59e8:	add	x0, x1, x0
    59ec:	ldr	w0, [x0]
    59f0:	mov	w2, w0
    59f4:	mov	w1, w3
    59f8:	ldr	x0, [sp, #56]
    59fc:	bl	b8 <bsW>
    5a00:	ldrsw	x0, [sp, #236]
    5a04:	add	x0, x0, #0x2c
    5a08:	lsl	x0, x0, #1
    5a0c:	ldr	x1, [sp, #168]
    5a10:	add	x0, x1, x0
    5a14:	ldrh	w0, [x0]
    5a18:	strh	w0, [sp, #142]
    5a1c:	ldrh	w0, [sp, #142]
    5a20:	ldr	x1, [sp, #152]
    5a24:	add	x0, x1, x0
    5a28:	ldrb	w0, [x0]
    5a2c:	mov	w3, w0
    5a30:	ldrh	w0, [sp, #142]
    5a34:	lsl	x0, x0, #2
    5a38:	ldr	x1, [sp, #144]
    5a3c:	add	x0, x1, x0
    5a40:	ldr	w0, [x0]
    5a44:	mov	w2, w0
    5a48:	mov	w1, w3
    5a4c:	ldr	x0, [sp, #56]
    5a50:	bl	b8 <bsW>
    5a54:	ldrsw	x0, [sp, #236]
    5a58:	add	x0, x0, #0x2d
    5a5c:	lsl	x0, x0, #1
    5a60:	ldr	x1, [sp, #168]
    5a64:	add	x0, x1, x0
    5a68:	ldrh	w0, [x0]
    5a6c:	strh	w0, [sp, #142]
    5a70:	ldrh	w0, [sp, #142]
    5a74:	ldr	x1, [sp, #152]
    5a78:	add	x0, x1, x0
    5a7c:	ldrb	w0, [x0]
    5a80:	mov	w3, w0
    5a84:	ldrh	w0, [sp, #142]
    5a88:	lsl	x0, x0, #2
    5a8c:	ldr	x1, [sp, #144]
    5a90:	add	x0, x1, x0
    5a94:	ldr	w0, [x0]
    5a98:	mov	w2, w0
    5a9c:	mov	w1, w3
    5aa0:	ldr	x0, [sp, #56]
    5aa4:	bl	b8 <bsW>
    5aa8:	ldrsw	x0, [sp, #236]
    5aac:	add	x0, x0, #0x2e
    5ab0:	lsl	x0, x0, #1
    5ab4:	ldr	x1, [sp, #168]
    5ab8:	add	x0, x1, x0
    5abc:	ldrh	w0, [x0]
    5ac0:	strh	w0, [sp, #142]
    5ac4:	ldrh	w0, [sp, #142]
    5ac8:	ldr	x1, [sp, #152]
    5acc:	add	x0, x1, x0
    5ad0:	ldrb	w0, [x0]
    5ad4:	mov	w3, w0
    5ad8:	ldrh	w0, [sp, #142]
    5adc:	lsl	x0, x0, #2
    5ae0:	ldr	x1, [sp, #144]
    5ae4:	add	x0, x1, x0
    5ae8:	ldr	w0, [x0]
    5aec:	mov	w2, w0
    5af0:	mov	w1, w3
    5af4:	ldr	x0, [sp, #56]
    5af8:	bl	b8 <bsW>
    5afc:	ldrsw	x0, [sp, #236]
    5b00:	add	x0, x0, #0x2f
    5b04:	lsl	x0, x0, #1
    5b08:	ldr	x1, [sp, #168]
    5b0c:	add	x0, x1, x0
    5b10:	ldrh	w0, [x0]
    5b14:	strh	w0, [sp, #142]
    5b18:	ldrh	w0, [sp, #142]
    5b1c:	ldr	x1, [sp, #152]
    5b20:	add	x0, x1, x0
    5b24:	ldrb	w0, [x0]
    5b28:	mov	w3, w0
    5b2c:	ldrh	w0, [sp, #142]
    5b30:	lsl	x0, x0, #2
    5b34:	ldr	x1, [sp, #144]
    5b38:	add	x0, x1, x0
    5b3c:	ldr	w0, [x0]
    5b40:	mov	w2, w0
    5b44:	mov	w1, w3
    5b48:	ldr	x0, [sp, #56]
    5b4c:	bl	b8 <bsW>
    5b50:	ldrsw	x0, [sp, #236]
    5b54:	add	x0, x0, #0x30
    5b58:	lsl	x0, x0, #1
    5b5c:	ldr	x1, [sp, #168]
    5b60:	add	x0, x1, x0
    5b64:	ldrh	w0, [x0]
    5b68:	strh	w0, [sp, #142]
    5b6c:	ldrh	w0, [sp, #142]
    5b70:	ldr	x1, [sp, #152]
    5b74:	add	x0, x1, x0
    5b78:	ldrb	w0, [x0]
    5b7c:	mov	w3, w0
    5b80:	ldrh	w0, [sp, #142]
    5b84:	lsl	x0, x0, #2
    5b88:	ldr	x1, [sp, #144]
    5b8c:	add	x0, x1, x0
    5b90:	ldr	w0, [x0]
    5b94:	mov	w2, w0
    5b98:	mov	w1, w3
    5b9c:	ldr	x0, [sp, #56]
    5ba0:	bl	b8 <bsW>
    5ba4:	ldrsw	x0, [sp, #236]
    5ba8:	add	x0, x0, #0x31
    5bac:	lsl	x0, x0, #1
    5bb0:	ldr	x1, [sp, #168]
    5bb4:	add	x0, x1, x0
    5bb8:	ldrh	w0, [x0]
    5bbc:	strh	w0, [sp, #142]
    5bc0:	ldrh	w0, [sp, #142]
    5bc4:	ldr	x1, [sp, #152]
    5bc8:	add	x0, x1, x0
    5bcc:	ldrb	w0, [x0]
    5bd0:	mov	w3, w0
    5bd4:	ldrh	w0, [sp, #142]
    5bd8:	lsl	x0, x0, #2
    5bdc:	ldr	x1, [sp, #144]
    5be0:	add	x0, x1, x0
    5be4:	ldr	w0, [x0]
    5be8:	mov	w2, w0
    5bec:	mov	w1, w3
    5bf0:	ldr	x0, [sp, #56]
    5bf4:	bl	b8 <bsW>
    5bf8:	b	5ce8 <sendMTFValues+0x55f8>
    5bfc:	ldr	w0, [sp, #236]
    5c00:	str	w0, [sp, #244]
    5c04:	b	5cd8 <sendMTFValues+0x55e8>
    5c08:	ldr	x1, [sp, #56]
    5c0c:	ldrsw	x0, [sp, #200]
    5c10:	add	x0, x1, x0
    5c14:	ldrb	w0, [x0, #1704]
    5c18:	mov	w4, w0
    5c1c:	ldrsw	x0, [sp, #244]
    5c20:	lsl	x0, x0, #1
    5c24:	ldr	x1, [sp, #168]
    5c28:	add	x0, x1, x0
    5c2c:	ldrh	w0, [x0]
    5c30:	ldr	x3, [sp, #56]
    5c34:	sxtw	x2, w0
    5c38:	sxtw	x1, w4
    5c3c:	mov	x0, x1
    5c40:	lsl	x0, x0, #7
    5c44:	add	x0, x0, x1
    5c48:	lsl	x0, x0, #1
    5c4c:	add	x0, x3, x0
    5c50:	add	x0, x0, x2
    5c54:	add	x0, x0, #0x9, lsl #12
    5c58:	ldrb	w0, [x0, #844]
    5c5c:	mov	w4, w0
    5c60:	ldr	x1, [sp, #56]
    5c64:	ldrsw	x0, [sp, #200]
    5c68:	add	x0, x1, x0
    5c6c:	ldrb	w0, [x0, #1704]
    5c70:	mov	w5, w0
    5c74:	ldrsw	x0, [sp, #244]
    5c78:	lsl	x0, x0, #1
    5c7c:	ldr	x1, [sp, #168]
    5c80:	add	x0, x1, x0
    5c84:	ldrh	w0, [x0]
    5c88:	ldr	x2, [sp, #56]
    5c8c:	sxtw	x3, w0
    5c90:	sxtw	x1, w5
    5c94:	mov	x0, x1
    5c98:	lsl	x0, x0, #7
    5c9c:	add	x0, x0, x1
    5ca0:	lsl	x0, x0, #1
    5ca4:	add	x1, x0, x3
    5ca8:	mov	x0, #0x2654                	// #9812
    5cac:	add	x0, x1, x0
    5cb0:	lsl	x0, x0, #2
    5cb4:	add	x0, x2, x0
    5cb8:	ldr	w0, [x0, #8]
    5cbc:	mov	w2, w0
    5cc0:	mov	w1, w4
    5cc4:	ldr	x0, [sp, #56]
    5cc8:	bl	b8 <bsW>
    5ccc:	ldr	w0, [sp, #244]
    5cd0:	add	w0, w0, #0x1
    5cd4:	str	w0, [sp, #244]
    5cd8:	ldr	w1, [sp, #244]
    5cdc:	ldr	w0, [sp, #232]
    5ce0:	cmp	w1, w0
    5ce4:	b.le	5c08 <sendMTFValues+0x5518>
    5ce8:	ldr	w0, [sp, #232]
    5cec:	add	w0, w0, #0x1
    5cf0:	str	w0, [sp, #236]
    5cf4:	ldr	w0, [sp, #200]
    5cf8:	add	w0, w0, #0x1
    5cfc:	str	w0, [sp, #200]
    5d00:	b	4a90 <sendMTFValues+0x43a0>
    5d04:	nop
    5d08:	ldr	w1, [sp, #200]
    5d0c:	ldr	w0, [sp, #212]
    5d10:	cmp	w1, w0
    5d14:	b.eq	5d20 <sendMTFValues+0x5630>  // b.none
    5d18:	mov	w0, #0xbbf                 	// #3007
    5d1c:	bl	0 <BZ2_bz__AssertH__fail>
    5d20:	ldr	x0, [sp, #56]
    5d24:	ldr	w0, [x0, #656]
    5d28:	cmp	w0, #0x2
    5d2c:	b.le	5d60 <sendMTFValues+0x5670>
    5d30:	adrp	x0, 0 <stderr>
    5d34:	add	x0, x0, #0x0
    5d38:	ldr	x3, [x0]
    5d3c:	ldr	x0, [sp, #56]
    5d40:	ldr	w1, [x0, #116]
    5d44:	ldr	w0, [sp, #160]
    5d48:	sub	w0, w1, w0
    5d4c:	mov	w2, w0
    5d50:	adrp	x0, 0 <BZ2_bsInitWrite>
    5d54:	add	x1, x0, #0x0
    5d58:	mov	x0, x3
    5d5c:	bl	0 <fprintf>
    5d60:	nop
    5d64:	ldp	x19, x20, [sp, #16]
    5d68:	ldp	x21, x22, [sp, #32]
    5d6c:	ldp	x29, x30, [sp], #256
    5d70:	ret

0000000000005d74 <BZ2_compressBlock>:
    5d74:	stp	x29, x30, [sp, #-32]!
    5d78:	mov	x29, sp
    5d7c:	str	x0, [sp, #24]
    5d80:	strb	w1, [sp, #23]
    5d84:	ldr	x0, [sp, #24]
    5d88:	ldr	w0, [x0, #108]
    5d8c:	cmp	w0, #0x0
    5d90:	b.le	5e54 <BZ2_compressBlock+0xe0>
    5d94:	ldr	x0, [sp, #24]
    5d98:	ldr	w0, [x0, #648]
    5d9c:	mvn	w1, w0
    5da0:	ldr	x0, [sp, #24]
    5da4:	str	w1, [x0, #648]
    5da8:	ldr	x0, [sp, #24]
    5dac:	ldr	w0, [x0, #652]
    5db0:	ror	w1, w0, #31
    5db4:	ldr	x0, [sp, #24]
    5db8:	str	w1, [x0, #652]
    5dbc:	ldr	x0, [sp, #24]
    5dc0:	ldr	w1, [x0, #652]
    5dc4:	ldr	x0, [sp, #24]
    5dc8:	ldr	w0, [x0, #648]
    5dcc:	eor	w1, w1, w0
    5dd0:	ldr	x0, [sp, #24]
    5dd4:	str	w1, [x0, #652]
    5dd8:	ldr	x0, [sp, #24]
    5ddc:	ldr	w0, [x0, #660]
    5de0:	cmp	w0, #0x1
    5de4:	b.le	5df0 <BZ2_compressBlock+0x7c>
    5de8:	ldr	x0, [sp, #24]
    5dec:	str	wzr, [x0, #116]
    5df0:	ldr	x0, [sp, #24]
    5df4:	ldr	w0, [x0, #656]
    5df8:	cmp	w0, #0x1
    5dfc:	b.le	5e4c <BZ2_compressBlock+0xd8>
    5e00:	adrp	x0, 0 <stderr>
    5e04:	add	x0, x0, #0x0
    5e08:	ldr	x6, [x0]
    5e0c:	ldr	x0, [sp, #24]
    5e10:	ldr	w1, [x0, #660]
    5e14:	ldr	x0, [sp, #24]
    5e18:	ldr	w2, [x0, #648]
    5e1c:	ldr	x0, [sp, #24]
    5e20:	ldr	w3, [x0, #652]
    5e24:	ldr	x0, [sp, #24]
    5e28:	ldr	w0, [x0, #108]
    5e2c:	mov	w5, w0
    5e30:	mov	w4, w3
    5e34:	mov	w3, w2
    5e38:	mov	w2, w1
    5e3c:	adrp	x0, 0 <BZ2_bsInitWrite>
    5e40:	add	x1, x0, #0x0
    5e44:	mov	x0, x6
    5e48:	bl	0 <fprintf>
    5e4c:	ldr	x0, [sp, #24]
    5e50:	bl	0 <BZ2_blockSort>
    5e54:	ldr	x0, [sp, #24]
    5e58:	ldr	x1, [x0, #32]
    5e5c:	ldr	x0, [sp, #24]
    5e60:	ldr	w0, [x0, #108]
    5e64:	sxtw	x0, w0
    5e68:	add	x1, x1, x0
    5e6c:	ldr	x0, [sp, #24]
    5e70:	str	x1, [x0, #80]
    5e74:	ldr	x0, [sp, #24]
    5e78:	ldr	w0, [x0, #660]
    5e7c:	cmp	w0, #0x1
    5e80:	b.ne	5ed0 <BZ2_compressBlock+0x15c>  // b.any
    5e84:	ldr	x0, [sp, #24]
    5e88:	bl	0 <BZ2_bsInitWrite>
    5e8c:	mov	w1, #0x42                  	// #66
    5e90:	ldr	x0, [sp, #24]
    5e94:	bl	220 <bsPutUChar>
    5e98:	mov	w1, #0x5a                  	// #90
    5e9c:	ldr	x0, [sp, #24]
    5ea0:	bl	220 <bsPutUChar>
    5ea4:	mov	w1, #0x68                  	// #104
    5ea8:	ldr	x0, [sp, #24]
    5eac:	bl	220 <bsPutUChar>
    5eb0:	ldr	x0, [sp, #24]
    5eb4:	ldr	w0, [x0, #664]
    5eb8:	and	w0, w0, #0xff
    5ebc:	add	w0, w0, #0x30
    5ec0:	and	w0, w0, #0xff
    5ec4:	mov	w1, w0
    5ec8:	ldr	x0, [sp, #24]
    5ecc:	bl	220 <bsPutUChar>
    5ed0:	ldr	x0, [sp, #24]
    5ed4:	ldr	w0, [x0, #108]
    5ed8:	cmp	w0, #0x0
    5edc:	b.le	5f74 <BZ2_compressBlock+0x200>
    5ee0:	mov	w1, #0x31                  	// #49
    5ee4:	ldr	x0, [sp, #24]
    5ee8:	bl	220 <bsPutUChar>
    5eec:	mov	w1, #0x41                  	// #65
    5ef0:	ldr	x0, [sp, #24]
    5ef4:	bl	220 <bsPutUChar>
    5ef8:	mov	w1, #0x59                  	// #89
    5efc:	ldr	x0, [sp, #24]
    5f00:	bl	220 <bsPutUChar>
    5f04:	mov	w1, #0x26                  	// #38
    5f08:	ldr	x0, [sp, #24]
    5f0c:	bl	220 <bsPutUChar>
    5f10:	mov	w1, #0x53                  	// #83
    5f14:	ldr	x0, [sp, #24]
    5f18:	bl	220 <bsPutUChar>
    5f1c:	mov	w1, #0x59                  	// #89
    5f20:	ldr	x0, [sp, #24]
    5f24:	bl	220 <bsPutUChar>
    5f28:	ldr	x0, [sp, #24]
    5f2c:	ldr	w0, [x0, #648]
    5f30:	mov	w1, w0
    5f34:	ldr	x0, [sp, #24]
    5f38:	bl	19c <bsPutUInt32>
    5f3c:	mov	w2, #0x0                   	// #0
    5f40:	mov	w1, #0x1                   	// #1
    5f44:	ldr	x0, [sp, #24]
    5f48:	bl	b8 <bsW>
    5f4c:	ldr	x0, [sp, #24]
    5f50:	ldr	w0, [x0, #48]
    5f54:	mov	w2, w0
    5f58:	mov	w1, #0x18                  	// #24
    5f5c:	ldr	x0, [sp, #24]
    5f60:	bl	b8 <bsW>
    5f64:	ldr	x0, [sp, #24]
    5f68:	bl	2dc <generateMTFValues>
    5f6c:	ldr	x0, [sp, #24]
    5f70:	bl	6f0 <sendMTFValues>
    5f74:	ldrb	w0, [sp, #23]
    5f78:	cmp	w0, #0x0
    5f7c:	b.eq	601c <BZ2_compressBlock+0x2a8>  // b.none
    5f80:	mov	w1, #0x17                  	// #23
    5f84:	ldr	x0, [sp, #24]
    5f88:	bl	220 <bsPutUChar>
    5f8c:	mov	w1, #0x72                  	// #114
    5f90:	ldr	x0, [sp, #24]
    5f94:	bl	220 <bsPutUChar>
    5f98:	mov	w1, #0x45                  	// #69
    5f9c:	ldr	x0, [sp, #24]
    5fa0:	bl	220 <bsPutUChar>
    5fa4:	mov	w1, #0x38                  	// #56
    5fa8:	ldr	x0, [sp, #24]
    5fac:	bl	220 <bsPutUChar>
    5fb0:	mov	w1, #0x50                  	// #80
    5fb4:	ldr	x0, [sp, #24]
    5fb8:	bl	220 <bsPutUChar>
    5fbc:	mov	w1, #0xffffff90            	// #-112
    5fc0:	ldr	x0, [sp, #24]
    5fc4:	bl	220 <bsPutUChar>
    5fc8:	ldr	x0, [sp, #24]
    5fcc:	ldr	w0, [x0, #652]
    5fd0:	mov	w1, w0
    5fd4:	ldr	x0, [sp, #24]
    5fd8:	bl	19c <bsPutUInt32>
    5fdc:	ldr	x0, [sp, #24]
    5fe0:	ldr	w0, [x0, #656]
    5fe4:	cmp	w0, #0x1
    5fe8:	b.le	6014 <BZ2_compressBlock+0x2a0>
    5fec:	adrp	x0, 0 <stderr>
    5ff0:	add	x0, x0, #0x0
    5ff4:	ldr	x3, [x0]
    5ff8:	ldr	x0, [sp, #24]
    5ffc:	ldr	w0, [x0, #652]
    6000:	mov	w2, w0
    6004:	adrp	x0, 0 <BZ2_bsInitWrite>
    6008:	add	x1, x0, #0x0
    600c:	mov	x0, x3
    6010:	bl	0 <fprintf>
    6014:	ldr	x0, [sp, #24]
    6018:	bl	24 <bsFinishWrite>
    601c:	nop
    6020:	ldp	x29, x30, [sp], #32
    6024:	ret

decompress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <makeMaps_d>:
       0:	sub	sp, sp, #0x20
       4:	str	x0, [sp, #8]
       8:	ldr	x0, [sp, #8]
       c:	str	wzr, [x0, #3192]
      10:	str	wzr, [sp, #28]
      14:	b	74 <makeMaps_d+0x74>
      18:	ldr	x1, [sp, #8]
      1c:	ldrsw	x0, [sp, #28]
      20:	add	x0, x1, x0
      24:	ldrb	w0, [x0, #3196]
      28:	cmp	w0, #0x0
      2c:	b.eq	68 <makeMaps_d+0x68>  // b.none
      30:	ldr	x0, [sp, #8]
      34:	ldr	w0, [x0, #3192]
      38:	ldr	w1, [sp, #28]
      3c:	and	w2, w1, #0xff
      40:	ldr	x1, [sp, #8]
      44:	sxtw	x0, w0
      48:	add	x0, x1, x0
      4c:	mov	w1, w2
      50:	strb	w1, [x0, #3468]
      54:	ldr	x0, [sp, #8]
      58:	ldr	w0, [x0, #3192]
      5c:	add	w1, w0, #0x1
      60:	ldr	x0, [sp, #8]
      64:	str	w1, [x0, #3192]
      68:	ldr	w0, [sp, #28]
      6c:	add	w0, w0, #0x1
      70:	str	w0, [sp, #28]
      74:	ldr	w0, [sp, #28]
      78:	cmp	w0, #0xff
      7c:	b.le	18 <makeMaps_d+0x18>
      80:	nop
      84:	nop
      88:	add	sp, sp, #0x20
      8c:	ret

0000000000000090 <BZ2_decompress>:
      90:	stp	x29, x30, [sp, #-400]!
      94:	mov	x29, sp
      98:	str	x0, [sp, #24]
      9c:	ldr	x0, [sp, #24]
      a0:	ldr	x0, [x0]
      a4:	str	x0, [sp, #232]
      a8:	ldr	x0, [sp, #24]
      ac:	ldr	w0, [x0, #8]
      b0:	cmp	w0, #0xa
      b4:	b.ne	1d8 <BZ2_decompress+0x148>  // b.any
      b8:	ldr	x0, [sp, #24]
      bc:	add	x0, x0, #0xc, lsl #12
      c0:	str	wzr, [x0, #14884]
      c4:	ldr	x0, [sp, #24]
      c8:	add	x0, x0, #0xc, lsl #12
      cc:	str	wzr, [x0, #14888]
      d0:	ldr	x0, [sp, #24]
      d4:	add	x0, x0, #0xc, lsl #12
      d8:	str	wzr, [x0, #14892]
      dc:	ldr	x0, [sp, #24]
      e0:	add	x0, x0, #0xc, lsl #12
      e4:	str	wzr, [x0, #14896]
      e8:	ldr	x0, [sp, #24]
      ec:	add	x0, x0, #0xc, lsl #12
      f0:	str	wzr, [x0, #14900]
      f4:	ldr	x0, [sp, #24]
      f8:	add	x0, x0, #0xc, lsl #12
      fc:	str	wzr, [x0, #14904]
     100:	ldr	x0, [sp, #24]
     104:	add	x0, x0, #0xc, lsl #12
     108:	str	wzr, [x0, #14908]
     10c:	ldr	x0, [sp, #24]
     110:	add	x0, x0, #0xc, lsl #12
     114:	str	wzr, [x0, #14912]
     118:	ldr	x0, [sp, #24]
     11c:	add	x0, x0, #0xc, lsl #12
     120:	str	wzr, [x0, #14916]
     124:	ldr	x0, [sp, #24]
     128:	add	x0, x0, #0xc, lsl #12
     12c:	str	wzr, [x0, #14920]
     130:	ldr	x0, [sp, #24]
     134:	add	x0, x0, #0xc, lsl #12
     138:	str	wzr, [x0, #14924]
     13c:	ldr	x0, [sp, #24]
     140:	add	x0, x0, #0xc, lsl #12
     144:	str	wzr, [x0, #14928]
     148:	ldr	x0, [sp, #24]
     14c:	add	x0, x0, #0xc, lsl #12
     150:	str	wzr, [x0, #14932]
     154:	ldr	x0, [sp, #24]
     158:	add	x0, x0, #0xc, lsl #12
     15c:	str	wzr, [x0, #14936]
     160:	ldr	x0, [sp, #24]
     164:	add	x0, x0, #0xc, lsl #12
     168:	str	wzr, [x0, #14940]
     16c:	ldr	x0, [sp, #24]
     170:	add	x0, x0, #0xc, lsl #12
     174:	str	wzr, [x0, #14944]
     178:	ldr	x0, [sp, #24]
     17c:	add	x0, x0, #0xc, lsl #12
     180:	str	wzr, [x0, #14948]
     184:	ldr	x0, [sp, #24]
     188:	add	x0, x0, #0xc, lsl #12
     18c:	str	wzr, [x0, #14952]
     190:	ldr	x0, [sp, #24]
     194:	add	x0, x0, #0xc, lsl #12
     198:	str	wzr, [x0, #14956]
     19c:	ldr	x0, [sp, #24]
     1a0:	add	x0, x0, #0xc, lsl #12
     1a4:	str	wzr, [x0, #14960]
     1a8:	ldr	x0, [sp, #24]
     1ac:	add	x0, x0, #0xc, lsl #12
     1b0:	str	wzr, [x0, #14964]
     1b4:	ldr	x0, [sp, #24]
     1b8:	add	x0, x0, #0x8, lsl #12
     1bc:	str	xzr, [x0, #31352]
     1c0:	ldr	x0, [sp, #24]
     1c4:	add	x0, x0, #0x8, lsl #12
     1c8:	str	xzr, [x0, #31360]
     1cc:	ldr	x0, [sp, #24]
     1d0:	add	x0, x0, #0x8, lsl #12
     1d4:	str	xzr, [x0, #31368]
     1d8:	ldr	x0, [sp, #24]
     1dc:	add	x0, x0, #0xc, lsl #12
     1e0:	ldr	w0, [x0, #14884]
     1e4:	str	w0, [sp, #380]
     1e8:	ldr	x0, [sp, #24]
     1ec:	add	x0, x0, #0xc, lsl #12
     1f0:	ldr	w0, [x0, #14888]
     1f4:	str	w0, [sp, #376]
     1f8:	ldr	x0, [sp, #24]
     1fc:	add	x0, x0, #0xc, lsl #12
     200:	ldr	w0, [x0, #14892]
     204:	str	w0, [sp, #372]
     208:	ldr	x0, [sp, #24]
     20c:	add	x0, x0, #0xc, lsl #12
     210:	ldr	w0, [x0, #14896]
     214:	str	w0, [sp, #368]
     218:	ldr	x0, [sp, #24]
     21c:	add	x0, x0, #0xc, lsl #12
     220:	ldr	w0, [x0, #14900]
     224:	str	w0, [sp, #364]
     228:	ldr	x0, [sp, #24]
     22c:	add	x0, x0, #0xc, lsl #12
     230:	ldr	w0, [x0, #14904]
     234:	str	w0, [sp, #360]
     238:	ldr	x0, [sp, #24]
     23c:	add	x0, x0, #0xc, lsl #12
     240:	ldr	w0, [x0, #14908]
     244:	str	w0, [sp, #356]
     248:	ldr	x0, [sp, #24]
     24c:	add	x0, x0, #0xc, lsl #12
     250:	ldr	w0, [x0, #14912]
     254:	str	w0, [sp, #352]
     258:	ldr	x0, [sp, #24]
     25c:	add	x0, x0, #0xc, lsl #12
     260:	ldr	w0, [x0, #14916]
     264:	str	w0, [sp, #348]
     268:	ldr	x0, [sp, #24]
     26c:	add	x0, x0, #0xc, lsl #12
     270:	ldr	w0, [x0, #14920]
     274:	str	w0, [sp, #344]
     278:	ldr	x0, [sp, #24]
     27c:	add	x0, x0, #0xc, lsl #12
     280:	ldr	w0, [x0, #14924]
     284:	str	w0, [sp, #340]
     288:	ldr	x0, [sp, #24]
     28c:	add	x0, x0, #0xc, lsl #12
     290:	ldr	w0, [x0, #14928]
     294:	str	w0, [sp, #336]
     298:	ldr	x0, [sp, #24]
     29c:	add	x0, x0, #0xc, lsl #12
     2a0:	ldr	w0, [x0, #14932]
     2a4:	str	w0, [sp, #332]
     2a8:	ldr	x0, [sp, #24]
     2ac:	add	x0, x0, #0xc, lsl #12
     2b0:	ldr	w0, [x0, #14936]
     2b4:	str	w0, [sp, #328]
     2b8:	ldr	x0, [sp, #24]
     2bc:	add	x0, x0, #0xc, lsl #12
     2c0:	ldr	w0, [x0, #14940]
     2c4:	str	w0, [sp, #324]
     2c8:	ldr	x0, [sp, #24]
     2cc:	add	x0, x0, #0xc, lsl #12
     2d0:	ldr	w0, [x0, #14944]
     2d4:	str	w0, [sp, #228]
     2d8:	ldr	x0, [sp, #24]
     2dc:	add	x0, x0, #0xc, lsl #12
     2e0:	ldr	w0, [x0, #14948]
     2e4:	str	w0, [sp, #320]
     2e8:	ldr	x0, [sp, #24]
     2ec:	add	x0, x0, #0xc, lsl #12
     2f0:	ldr	w0, [x0, #14952]
     2f4:	str	w0, [sp, #316]
     2f8:	ldr	x0, [sp, #24]
     2fc:	add	x0, x0, #0xc, lsl #12
     300:	ldr	w0, [x0, #14956]
     304:	str	w0, [sp, #312]
     308:	ldr	x0, [sp, #24]
     30c:	add	x0, x0, #0xc, lsl #12
     310:	ldr	w0, [x0, #14960]
     314:	str	w0, [sp, #308]
     318:	ldr	x0, [sp, #24]
     31c:	add	x0, x0, #0xc, lsl #12
     320:	ldr	w0, [x0, #14964]
     324:	str	w0, [sp, #304]
     328:	ldr	x0, [sp, #24]
     32c:	add	x0, x0, #0x8, lsl #12
     330:	ldr	x0, [x0, #31352]
     334:	str	x0, [sp, #296]
     338:	ldr	x0, [sp, #24]
     33c:	add	x0, x0, #0x8, lsl #12
     340:	ldr	x0, [x0, #31360]
     344:	str	x0, [sp, #288]
     348:	ldr	x0, [sp, #24]
     34c:	add	x0, x0, #0x8, lsl #12
     350:	ldr	x0, [x0, #31368]
     354:	str	x0, [sp, #280]
     358:	str	wzr, [sp, #392]
     35c:	ldr	x0, [sp, #24]
     360:	ldr	w0, [x0, #8]
     364:	sub	w0, w0, #0xa
     368:	cmp	w0, #0x28
     36c:	b.hi	5728 <BZ2_decompress+0x5698>  // b.pmore
     370:	adrp	x1, 0 <makeMaps_d>
     374:	add	x1, x1, #0x0
     378:	ldr	w0, [x1, w0, uxtw #2]
     37c:	adr	x1, 388 <BZ2_decompress+0x2f8>
     380:	add	x0, x1, w0, sxtw #2
     384:	br	x0
     388:	ldr	x0, [sp, #24]
     38c:	mov	w1, #0xa                   	// #10
     390:	str	w1, [x0, #8]
     394:	ldr	x0, [sp, #24]
     398:	ldr	w0, [x0, #36]
     39c:	cmp	w0, #0x7
     3a0:	b.le	3f4 <BZ2_decompress+0x364>
     3a4:	ldr	x0, [sp, #24]
     3a8:	ldr	w1, [x0, #32]
     3ac:	ldr	x0, [sp, #24]
     3b0:	ldr	w0, [x0, #36]
     3b4:	sub	w0, w0, #0x8
     3b8:	lsr	w0, w1, w0
     3bc:	and	w0, w0, #0xff
     3c0:	str	w0, [sp, #224]
     3c4:	ldr	x0, [sp, #24]
     3c8:	ldr	w0, [x0, #36]
     3cc:	sub	w1, w0, #0x8
     3d0:	ldr	x0, [sp, #24]
     3d4:	str	w1, [x0, #36]
     3d8:	ldr	w0, [sp, #224]
     3dc:	strb	w0, [sp, #399]
     3e0:	nop
     3e4:	ldrb	w0, [sp, #399]
     3e8:	cmp	w0, #0x42
     3ec:	b.eq	4c0 <BZ2_decompress+0x430>  // b.none
     3f0:	b	4b4 <BZ2_decompress+0x424>
     3f4:	ldr	x0, [sp, #24]
     3f8:	ldr	x0, [x0]
     3fc:	ldr	w0, [x0, #8]
     400:	cmp	w0, #0x0
     404:	b.ne	410 <BZ2_decompress+0x380>  // b.any
     408:	str	wzr, [sp, #392]
     40c:	b	5738 <BZ2_decompress+0x56a8>
     410:	ldr	x0, [sp, #24]
     414:	ldr	w0, [x0, #32]
     418:	lsl	w0, w0, #8
     41c:	ldr	x1, [sp, #24]
     420:	ldr	x1, [x1]
     424:	ldr	x1, [x1]
     428:	ldrb	w1, [x1]
     42c:	orr	w1, w0, w1
     430:	ldr	x0, [sp, #24]
     434:	str	w1, [x0, #32]
     438:	ldr	x0, [sp, #24]
     43c:	ldr	w0, [x0, #36]
     440:	add	w1, w0, #0x8
     444:	ldr	x0, [sp, #24]
     448:	str	w1, [x0, #36]
     44c:	ldr	x0, [sp, #24]
     450:	ldr	x0, [x0]
     454:	ldr	x1, [x0]
     458:	add	x1, x1, #0x1
     45c:	str	x1, [x0]
     460:	ldr	x0, [sp, #24]
     464:	ldr	x0, [x0]
     468:	ldr	w1, [x0, #8]
     46c:	sub	w1, w1, #0x1
     470:	str	w1, [x0, #8]
     474:	ldr	x0, [sp, #24]
     478:	ldr	x0, [x0]
     47c:	ldr	w1, [x0, #12]
     480:	add	w1, w1, #0x1
     484:	str	w1, [x0, #12]
     488:	ldr	x0, [sp, #24]
     48c:	ldr	x0, [x0]
     490:	ldr	w0, [x0, #12]
     494:	cmp	w0, #0x0
     498:	b.ne	394 <BZ2_decompress+0x304>  // b.any
     49c:	ldr	x0, [sp, #24]
     4a0:	ldr	x0, [x0]
     4a4:	ldr	w1, [x0, #16]
     4a8:	add	w1, w1, #0x1
     4ac:	str	w1, [x0, #16]
     4b0:	b	394 <BZ2_decompress+0x304>
     4b4:	mov	w0, #0xfffffffb            	// #-5
     4b8:	str	w0, [sp, #392]
     4bc:	b	5738 <BZ2_decompress+0x56a8>
     4c0:	ldr	x0, [sp, #24]
     4c4:	mov	w1, #0xb                   	// #11
     4c8:	str	w1, [x0, #8]
     4cc:	ldr	x0, [sp, #24]
     4d0:	ldr	w0, [x0, #36]
     4d4:	cmp	w0, #0x7
     4d8:	b.le	52c <BZ2_decompress+0x49c>
     4dc:	ldr	x0, [sp, #24]
     4e0:	ldr	w1, [x0, #32]
     4e4:	ldr	x0, [sp, #24]
     4e8:	ldr	w0, [x0, #36]
     4ec:	sub	w0, w0, #0x8
     4f0:	lsr	w0, w1, w0
     4f4:	and	w0, w0, #0xff
     4f8:	str	w0, [sp, #220]
     4fc:	ldr	x0, [sp, #24]
     500:	ldr	w0, [x0, #36]
     504:	sub	w1, w0, #0x8
     508:	ldr	x0, [sp, #24]
     50c:	str	w1, [x0, #36]
     510:	ldr	w0, [sp, #220]
     514:	strb	w0, [sp, #399]
     518:	nop
     51c:	ldrb	w0, [sp, #399]
     520:	cmp	w0, #0x5a
     524:	b.eq	5f8 <BZ2_decompress+0x568>  // b.none
     528:	b	5ec <BZ2_decompress+0x55c>
     52c:	ldr	x0, [sp, #24]
     530:	ldr	x0, [x0]
     534:	ldr	w0, [x0, #8]
     538:	cmp	w0, #0x0
     53c:	b.ne	548 <BZ2_decompress+0x4b8>  // b.any
     540:	str	wzr, [sp, #392]
     544:	b	5738 <BZ2_decompress+0x56a8>
     548:	ldr	x0, [sp, #24]
     54c:	ldr	w0, [x0, #32]
     550:	lsl	w0, w0, #8
     554:	ldr	x1, [sp, #24]
     558:	ldr	x1, [x1]
     55c:	ldr	x1, [x1]
     560:	ldrb	w1, [x1]
     564:	orr	w1, w0, w1
     568:	ldr	x0, [sp, #24]
     56c:	str	w1, [x0, #32]
     570:	ldr	x0, [sp, #24]
     574:	ldr	w0, [x0, #36]
     578:	add	w1, w0, #0x8
     57c:	ldr	x0, [sp, #24]
     580:	str	w1, [x0, #36]
     584:	ldr	x0, [sp, #24]
     588:	ldr	x0, [x0]
     58c:	ldr	x1, [x0]
     590:	add	x1, x1, #0x1
     594:	str	x1, [x0]
     598:	ldr	x0, [sp, #24]
     59c:	ldr	x0, [x0]
     5a0:	ldr	w1, [x0, #8]
     5a4:	sub	w1, w1, #0x1
     5a8:	str	w1, [x0, #8]
     5ac:	ldr	x0, [sp, #24]
     5b0:	ldr	x0, [x0]
     5b4:	ldr	w1, [x0, #12]
     5b8:	add	w1, w1, #0x1
     5bc:	str	w1, [x0, #12]
     5c0:	ldr	x0, [sp, #24]
     5c4:	ldr	x0, [x0]
     5c8:	ldr	w0, [x0, #12]
     5cc:	cmp	w0, #0x0
     5d0:	b.ne	4cc <BZ2_decompress+0x43c>  // b.any
     5d4:	ldr	x0, [sp, #24]
     5d8:	ldr	x0, [x0]
     5dc:	ldr	w1, [x0, #16]
     5e0:	add	w1, w1, #0x1
     5e4:	str	w1, [x0, #16]
     5e8:	b	4cc <BZ2_decompress+0x43c>
     5ec:	mov	w0, #0xfffffffb            	// #-5
     5f0:	str	w0, [sp, #392]
     5f4:	b	5738 <BZ2_decompress+0x56a8>
     5f8:	ldr	x0, [sp, #24]
     5fc:	mov	w1, #0xc                   	// #12
     600:	str	w1, [x0, #8]
     604:	ldr	x0, [sp, #24]
     608:	ldr	w0, [x0, #36]
     60c:	cmp	w0, #0x7
     610:	b.le	664 <BZ2_decompress+0x5d4>
     614:	ldr	x0, [sp, #24]
     618:	ldr	w1, [x0, #32]
     61c:	ldr	x0, [sp, #24]
     620:	ldr	w0, [x0, #36]
     624:	sub	w0, w0, #0x8
     628:	lsr	w0, w1, w0
     62c:	and	w0, w0, #0xff
     630:	str	w0, [sp, #216]
     634:	ldr	x0, [sp, #24]
     638:	ldr	w0, [x0, #36]
     63c:	sub	w1, w0, #0x8
     640:	ldr	x0, [sp, #24]
     644:	str	w1, [x0, #36]
     648:	ldr	w0, [sp, #216]
     64c:	strb	w0, [sp, #399]
     650:	nop
     654:	ldrb	w0, [sp, #399]
     658:	cmp	w0, #0x68
     65c:	b.eq	730 <BZ2_decompress+0x6a0>  // b.none
     660:	b	724 <BZ2_decompress+0x694>
     664:	ldr	x0, [sp, #24]
     668:	ldr	x0, [x0]
     66c:	ldr	w0, [x0, #8]
     670:	cmp	w0, #0x0
     674:	b.ne	680 <BZ2_decompress+0x5f0>  // b.any
     678:	str	wzr, [sp, #392]
     67c:	b	5738 <BZ2_decompress+0x56a8>
     680:	ldr	x0, [sp, #24]
     684:	ldr	w0, [x0, #32]
     688:	lsl	w0, w0, #8
     68c:	ldr	x1, [sp, #24]
     690:	ldr	x1, [x1]
     694:	ldr	x1, [x1]
     698:	ldrb	w1, [x1]
     69c:	orr	w1, w0, w1
     6a0:	ldr	x0, [sp, #24]
     6a4:	str	w1, [x0, #32]
     6a8:	ldr	x0, [sp, #24]
     6ac:	ldr	w0, [x0, #36]
     6b0:	add	w1, w0, #0x8
     6b4:	ldr	x0, [sp, #24]
     6b8:	str	w1, [x0, #36]
     6bc:	ldr	x0, [sp, #24]
     6c0:	ldr	x0, [x0]
     6c4:	ldr	x1, [x0]
     6c8:	add	x1, x1, #0x1
     6cc:	str	x1, [x0]
     6d0:	ldr	x0, [sp, #24]
     6d4:	ldr	x0, [x0]
     6d8:	ldr	w1, [x0, #8]
     6dc:	sub	w1, w1, #0x1
     6e0:	str	w1, [x0, #8]
     6e4:	ldr	x0, [sp, #24]
     6e8:	ldr	x0, [x0]
     6ec:	ldr	w1, [x0, #12]
     6f0:	add	w1, w1, #0x1
     6f4:	str	w1, [x0, #12]
     6f8:	ldr	x0, [sp, #24]
     6fc:	ldr	x0, [x0]
     700:	ldr	w0, [x0, #12]
     704:	cmp	w0, #0x0
     708:	b.ne	604 <BZ2_decompress+0x574>  // b.any
     70c:	ldr	x0, [sp, #24]
     710:	ldr	x0, [x0]
     714:	ldr	w1, [x0, #16]
     718:	add	w1, w1, #0x1
     71c:	str	w1, [x0, #16]
     720:	b	604 <BZ2_decompress+0x574>
     724:	mov	w0, #0xfffffffb            	// #-5
     728:	str	w0, [sp, #392]
     72c:	b	5738 <BZ2_decompress+0x56a8>
     730:	ldr	x0, [sp, #24]
     734:	mov	w1, #0xd                   	// #13
     738:	str	w1, [x0, #8]
     73c:	ldr	x0, [sp, #24]
     740:	ldr	w0, [x0, #36]
     744:	cmp	w0, #0x7
     748:	b.le	7a4 <BZ2_decompress+0x714>
     74c:	ldr	x0, [sp, #24]
     750:	ldr	w1, [x0, #32]
     754:	ldr	x0, [sp, #24]
     758:	ldr	w0, [x0, #36]
     75c:	sub	w0, w0, #0x8
     760:	lsr	w0, w1, w0
     764:	and	w0, w0, #0xff
     768:	str	w0, [sp, #212]
     76c:	ldr	x0, [sp, #24]
     770:	ldr	w0, [x0, #36]
     774:	sub	w1, w0, #0x8
     778:	ldr	x0, [sp, #24]
     77c:	str	w1, [x0, #36]
     780:	ldr	w1, [sp, #212]
     784:	ldr	x0, [sp, #24]
     788:	str	w1, [x0, #40]
     78c:	nop
     790:	ldr	x0, [sp, #24]
     794:	ldr	w0, [x0, #40]
     798:	cmp	w0, #0x30
     79c:	b.le	874 <BZ2_decompress+0x7e4>
     7a0:	b	864 <BZ2_decompress+0x7d4>
     7a4:	ldr	x0, [sp, #24]
     7a8:	ldr	x0, [x0]
     7ac:	ldr	w0, [x0, #8]
     7b0:	cmp	w0, #0x0
     7b4:	b.ne	7c0 <BZ2_decompress+0x730>  // b.any
     7b8:	str	wzr, [sp, #392]
     7bc:	b	5738 <BZ2_decompress+0x56a8>
     7c0:	ldr	x0, [sp, #24]
     7c4:	ldr	w0, [x0, #32]
     7c8:	lsl	w0, w0, #8
     7cc:	ldr	x1, [sp, #24]
     7d0:	ldr	x1, [x1]
     7d4:	ldr	x1, [x1]
     7d8:	ldrb	w1, [x1]
     7dc:	orr	w1, w0, w1
     7e0:	ldr	x0, [sp, #24]
     7e4:	str	w1, [x0, #32]
     7e8:	ldr	x0, [sp, #24]
     7ec:	ldr	w0, [x0, #36]
     7f0:	add	w1, w0, #0x8
     7f4:	ldr	x0, [sp, #24]
     7f8:	str	w1, [x0, #36]
     7fc:	ldr	x0, [sp, #24]
     800:	ldr	x0, [x0]
     804:	ldr	x1, [x0]
     808:	add	x1, x1, #0x1
     80c:	str	x1, [x0]
     810:	ldr	x0, [sp, #24]
     814:	ldr	x0, [x0]
     818:	ldr	w1, [x0, #8]
     81c:	sub	w1, w1, #0x1
     820:	str	w1, [x0, #8]
     824:	ldr	x0, [sp, #24]
     828:	ldr	x0, [x0]
     82c:	ldr	w1, [x0, #12]
     830:	add	w1, w1, #0x1
     834:	str	w1, [x0, #12]
     838:	ldr	x0, [sp, #24]
     83c:	ldr	x0, [x0]
     840:	ldr	w0, [x0, #12]
     844:	cmp	w0, #0x0
     848:	b.ne	73c <BZ2_decompress+0x6ac>  // b.any
     84c:	ldr	x0, [sp, #24]
     850:	ldr	x0, [x0]
     854:	ldr	w1, [x0, #16]
     858:	add	w1, w1, #0x1
     85c:	str	w1, [x0, #16]
     860:	b	73c <BZ2_decompress+0x6ac>
     864:	ldr	x0, [sp, #24]
     868:	ldr	w0, [x0, #40]
     86c:	cmp	w0, #0x39
     870:	b.le	880 <BZ2_decompress+0x7f0>
     874:	mov	w0, #0xfffffffb            	// #-5
     878:	str	w0, [sp, #392]
     87c:	b	5738 <BZ2_decompress+0x56a8>
     880:	ldr	x0, [sp, #24]
     884:	ldr	w0, [x0, #40]
     888:	sub	w1, w0, #0x30
     88c:	ldr	x0, [sp, #24]
     890:	str	w1, [x0, #40]
     894:	ldr	x0, [sp, #24]
     898:	ldrb	w0, [x0, #44]
     89c:	cmp	w0, #0x0
     8a0:	b.eq	960 <BZ2_decompress+0x8d0>  // b.none
     8a4:	ldr	x0, [sp, #232]
     8a8:	ldr	x3, [x0, #56]
     8ac:	ldr	x0, [sp, #232]
     8b0:	ldr	x4, [x0, #72]
     8b4:	ldr	x0, [sp, #24]
     8b8:	ldr	w1, [x0, #40]
     8bc:	mov	w0, #0x86a0                	// #34464
     8c0:	movk	w0, #0x1, lsl #16
     8c4:	mul	w0, w1, w0
     8c8:	sxtw	x0, w0
     8cc:	lsl	w0, w0, #1
     8d0:	mov	w2, #0x1                   	// #1
     8d4:	mov	w1, w0
     8d8:	mov	x0, x4
     8dc:	blr	x3
     8e0:	mov	x1, x0
     8e4:	ldr	x0, [sp, #24]
     8e8:	str	x1, [x0, #3160]
     8ec:	ldr	x0, [sp, #232]
     8f0:	ldr	x3, [x0, #56]
     8f4:	ldr	x0, [sp, #232]
     8f8:	ldr	x4, [x0, #72]
     8fc:	ldr	x0, [sp, #24]
     900:	ldr	w1, [x0, #40]
     904:	mov	w0, #0x86a0                	// #34464
     908:	movk	w0, #0x1, lsl #16
     90c:	mul	w0, w1, w0
     910:	add	w0, w0, #0x1
     914:	asr	w0, w0, #1
     918:	mov	w2, #0x1                   	// #1
     91c:	mov	w1, w0
     920:	mov	x0, x4
     924:	blr	x3
     928:	mov	x1, x0
     92c:	ldr	x0, [sp, #24]
     930:	str	x1, [x0, #3168]
     934:	ldr	x0, [sp, #24]
     938:	ldr	x0, [x0, #3160]
     93c:	cmp	x0, #0x0
     940:	b.eq	954 <BZ2_decompress+0x8c4>  // b.none
     944:	ldr	x0, [sp, #24]
     948:	ldr	x0, [x0, #3168]
     94c:	cmp	x0, #0x0
     950:	b.ne	9c4 <BZ2_decompress+0x934>  // b.any
     954:	mov	w0, #0xfffffffd            	// #-3
     958:	str	w0, [sp, #392]
     95c:	b	5738 <BZ2_decompress+0x56a8>
     960:	ldr	x0, [sp, #232]
     964:	ldr	x3, [x0, #56]
     968:	ldr	x0, [sp, #232]
     96c:	ldr	x4, [x0, #72]
     970:	ldr	x0, [sp, #24]
     974:	ldr	w1, [x0, #40]
     978:	mov	w0, #0x86a0                	// #34464
     97c:	movk	w0, #0x1, lsl #16
     980:	mul	w0, w1, w0
     984:	sxtw	x0, w0
     988:	lsl	w0, w0, #2
     98c:	mov	w2, #0x1                   	// #1
     990:	mov	w1, w0
     994:	mov	x0, x4
     998:	blr	x3
     99c:	mov	x1, x0
     9a0:	ldr	x0, [sp, #24]
     9a4:	str	x1, [x0, #3152]
     9a8:	ldr	x0, [sp, #24]
     9ac:	ldr	x0, [x0, #3152]
     9b0:	cmp	x0, #0x0
     9b4:	b.ne	9c4 <BZ2_decompress+0x934>  // b.any
     9b8:	mov	w0, #0xfffffffd            	// #-3
     9bc:	str	w0, [sp, #392]
     9c0:	b	5738 <BZ2_decompress+0x56a8>
     9c4:	ldr	x0, [sp, #24]
     9c8:	mov	w1, #0xe                   	// #14
     9cc:	str	w1, [x0, #8]
     9d0:	ldr	x0, [sp, #24]
     9d4:	ldr	w0, [x0, #36]
     9d8:	cmp	w0, #0x7
     9dc:	b.le	a30 <BZ2_decompress+0x9a0>
     9e0:	ldr	x0, [sp, #24]
     9e4:	ldr	w1, [x0, #32]
     9e8:	ldr	x0, [sp, #24]
     9ec:	ldr	w0, [x0, #36]
     9f0:	sub	w0, w0, #0x8
     9f4:	lsr	w0, w1, w0
     9f8:	and	w0, w0, #0xff
     9fc:	str	w0, [sp, #208]
     a00:	ldr	x0, [sp, #24]
     a04:	ldr	w0, [x0, #36]
     a08:	sub	w1, w0, #0x8
     a0c:	ldr	x0, [sp, #24]
     a10:	str	w1, [x0, #36]
     a14:	ldr	w0, [sp, #208]
     a18:	strb	w0, [sp, #399]
     a1c:	nop
     a20:	ldrb	w0, [sp, #399]
     a24:	cmp	w0, #0x17
     a28:	b.ne	af0 <BZ2_decompress+0xa60>  // b.any
     a2c:	b	4c04 <BZ2_decompress+0x4b74>
     a30:	ldr	x0, [sp, #24]
     a34:	ldr	x0, [x0]
     a38:	ldr	w0, [x0, #8]
     a3c:	cmp	w0, #0x0
     a40:	b.ne	a4c <BZ2_decompress+0x9bc>  // b.any
     a44:	str	wzr, [sp, #392]
     a48:	b	5738 <BZ2_decompress+0x56a8>
     a4c:	ldr	x0, [sp, #24]
     a50:	ldr	w0, [x0, #32]
     a54:	lsl	w0, w0, #8
     a58:	ldr	x1, [sp, #24]
     a5c:	ldr	x1, [x1]
     a60:	ldr	x1, [x1]
     a64:	ldrb	w1, [x1]
     a68:	orr	w1, w0, w1
     a6c:	ldr	x0, [sp, #24]
     a70:	str	w1, [x0, #32]
     a74:	ldr	x0, [sp, #24]
     a78:	ldr	w0, [x0, #36]
     a7c:	add	w1, w0, #0x8
     a80:	ldr	x0, [sp, #24]
     a84:	str	w1, [x0, #36]
     a88:	ldr	x0, [sp, #24]
     a8c:	ldr	x0, [x0]
     a90:	ldr	x1, [x0]
     a94:	add	x1, x1, #0x1
     a98:	str	x1, [x0]
     a9c:	ldr	x0, [sp, #24]
     aa0:	ldr	x0, [x0]
     aa4:	ldr	w1, [x0, #8]
     aa8:	sub	w1, w1, #0x1
     aac:	str	w1, [x0, #8]
     ab0:	ldr	x0, [sp, #24]
     ab4:	ldr	x0, [x0]
     ab8:	ldr	w1, [x0, #12]
     abc:	add	w1, w1, #0x1
     ac0:	str	w1, [x0, #12]
     ac4:	ldr	x0, [sp, #24]
     ac8:	ldr	x0, [x0]
     acc:	ldr	w0, [x0, #12]
     ad0:	cmp	w0, #0x0
     ad4:	b.ne	9d0 <BZ2_decompress+0x940>  // b.any
     ad8:	ldr	x0, [sp, #24]
     adc:	ldr	x0, [x0]
     ae0:	ldr	w1, [x0, #16]
     ae4:	add	w1, w1, #0x1
     ae8:	str	w1, [x0, #16]
     aec:	b	9d0 <BZ2_decompress+0x940>
     af0:	ldrb	w0, [sp, #399]
     af4:	cmp	w0, #0x31
     af8:	b.eq	b08 <BZ2_decompress+0xa78>  // b.none
     afc:	mov	w0, #0xfffffffc            	// #-4
     b00:	str	w0, [sp, #392]
     b04:	b	5738 <BZ2_decompress+0x56a8>
     b08:	ldr	x0, [sp, #24]
     b0c:	mov	w1, #0xf                   	// #15
     b10:	str	w1, [x0, #8]
     b14:	ldr	x0, [sp, #24]
     b18:	ldr	w0, [x0, #36]
     b1c:	cmp	w0, #0x7
     b20:	b.le	b74 <BZ2_decompress+0xae4>
     b24:	ldr	x0, [sp, #24]
     b28:	ldr	w1, [x0, #32]
     b2c:	ldr	x0, [sp, #24]
     b30:	ldr	w0, [x0, #36]
     b34:	sub	w0, w0, #0x8
     b38:	lsr	w0, w1, w0
     b3c:	and	w0, w0, #0xff
     b40:	str	w0, [sp, #204]
     b44:	ldr	x0, [sp, #24]
     b48:	ldr	w0, [x0, #36]
     b4c:	sub	w1, w0, #0x8
     b50:	ldr	x0, [sp, #24]
     b54:	str	w1, [x0, #36]
     b58:	ldr	w0, [sp, #204]
     b5c:	strb	w0, [sp, #399]
     b60:	nop
     b64:	ldrb	w0, [sp, #399]
     b68:	cmp	w0, #0x41
     b6c:	b.eq	c40 <BZ2_decompress+0xbb0>  // b.none
     b70:	b	c34 <BZ2_decompress+0xba4>
     b74:	ldr	x0, [sp, #24]
     b78:	ldr	x0, [x0]
     b7c:	ldr	w0, [x0, #8]
     b80:	cmp	w0, #0x0
     b84:	b.ne	b90 <BZ2_decompress+0xb00>  // b.any
     b88:	str	wzr, [sp, #392]
     b8c:	b	5738 <BZ2_decompress+0x56a8>
     b90:	ldr	x0, [sp, #24]
     b94:	ldr	w0, [x0, #32]
     b98:	lsl	w0, w0, #8
     b9c:	ldr	x1, [sp, #24]
     ba0:	ldr	x1, [x1]
     ba4:	ldr	x1, [x1]
     ba8:	ldrb	w1, [x1]
     bac:	orr	w1, w0, w1
     bb0:	ldr	x0, [sp, #24]
     bb4:	str	w1, [x0, #32]
     bb8:	ldr	x0, [sp, #24]
     bbc:	ldr	w0, [x0, #36]
     bc0:	add	w1, w0, #0x8
     bc4:	ldr	x0, [sp, #24]
     bc8:	str	w1, [x0, #36]
     bcc:	ldr	x0, [sp, #24]
     bd0:	ldr	x0, [x0]
     bd4:	ldr	x1, [x0]
     bd8:	add	x1, x1, #0x1
     bdc:	str	x1, [x0]
     be0:	ldr	x0, [sp, #24]
     be4:	ldr	x0, [x0]
     be8:	ldr	w1, [x0, #8]
     bec:	sub	w1, w1, #0x1
     bf0:	str	w1, [x0, #8]
     bf4:	ldr	x0, [sp, #24]
     bf8:	ldr	x0, [x0]
     bfc:	ldr	w1, [x0, #12]
     c00:	add	w1, w1, #0x1
     c04:	str	w1, [x0, #12]
     c08:	ldr	x0, [sp, #24]
     c0c:	ldr	x0, [x0]
     c10:	ldr	w0, [x0, #12]
     c14:	cmp	w0, #0x0
     c18:	b.ne	b14 <BZ2_decompress+0xa84>  // b.any
     c1c:	ldr	x0, [sp, #24]
     c20:	ldr	x0, [x0]
     c24:	ldr	w1, [x0, #16]
     c28:	add	w1, w1, #0x1
     c2c:	str	w1, [x0, #16]
     c30:	b	b14 <BZ2_decompress+0xa84>
     c34:	mov	w0, #0xfffffffc            	// #-4
     c38:	str	w0, [sp, #392]
     c3c:	b	5738 <BZ2_decompress+0x56a8>
     c40:	ldr	x0, [sp, #24]
     c44:	mov	w1, #0x10                  	// #16
     c48:	str	w1, [x0, #8]
     c4c:	ldr	x0, [sp, #24]
     c50:	ldr	w0, [x0, #36]
     c54:	cmp	w0, #0x7
     c58:	b.le	cac <BZ2_decompress+0xc1c>
     c5c:	ldr	x0, [sp, #24]
     c60:	ldr	w1, [x0, #32]
     c64:	ldr	x0, [sp, #24]
     c68:	ldr	w0, [x0, #36]
     c6c:	sub	w0, w0, #0x8
     c70:	lsr	w0, w1, w0
     c74:	and	w0, w0, #0xff
     c78:	str	w0, [sp, #200]
     c7c:	ldr	x0, [sp, #24]
     c80:	ldr	w0, [x0, #36]
     c84:	sub	w1, w0, #0x8
     c88:	ldr	x0, [sp, #24]
     c8c:	str	w1, [x0, #36]
     c90:	ldr	w0, [sp, #200]
     c94:	strb	w0, [sp, #399]
     c98:	nop
     c9c:	ldrb	w0, [sp, #399]
     ca0:	cmp	w0, #0x59
     ca4:	b.eq	d78 <BZ2_decompress+0xce8>  // b.none
     ca8:	b	d6c <BZ2_decompress+0xcdc>
     cac:	ldr	x0, [sp, #24]
     cb0:	ldr	x0, [x0]
     cb4:	ldr	w0, [x0, #8]
     cb8:	cmp	w0, #0x0
     cbc:	b.ne	cc8 <BZ2_decompress+0xc38>  // b.any
     cc0:	str	wzr, [sp, #392]
     cc4:	b	5738 <BZ2_decompress+0x56a8>
     cc8:	ldr	x0, [sp, #24]
     ccc:	ldr	w0, [x0, #32]
     cd0:	lsl	w0, w0, #8
     cd4:	ldr	x1, [sp, #24]
     cd8:	ldr	x1, [x1]
     cdc:	ldr	x1, [x1]
     ce0:	ldrb	w1, [x1]
     ce4:	orr	w1, w0, w1
     ce8:	ldr	x0, [sp, #24]
     cec:	str	w1, [x0, #32]
     cf0:	ldr	x0, [sp, #24]
     cf4:	ldr	w0, [x0, #36]
     cf8:	add	w1, w0, #0x8
     cfc:	ldr	x0, [sp, #24]
     d00:	str	w1, [x0, #36]
     d04:	ldr	x0, [sp, #24]
     d08:	ldr	x0, [x0]
     d0c:	ldr	x1, [x0]
     d10:	add	x1, x1, #0x1
     d14:	str	x1, [x0]
     d18:	ldr	x0, [sp, #24]
     d1c:	ldr	x0, [x0]
     d20:	ldr	w1, [x0, #8]
     d24:	sub	w1, w1, #0x1
     d28:	str	w1, [x0, #8]
     d2c:	ldr	x0, [sp, #24]
     d30:	ldr	x0, [x0]
     d34:	ldr	w1, [x0, #12]
     d38:	add	w1, w1, #0x1
     d3c:	str	w1, [x0, #12]
     d40:	ldr	x0, [sp, #24]
     d44:	ldr	x0, [x0]
     d48:	ldr	w0, [x0, #12]
     d4c:	cmp	w0, #0x0
     d50:	b.ne	c4c <BZ2_decompress+0xbbc>  // b.any
     d54:	ldr	x0, [sp, #24]
     d58:	ldr	x0, [x0]
     d5c:	ldr	w1, [x0, #16]
     d60:	add	w1, w1, #0x1
     d64:	str	w1, [x0, #16]
     d68:	b	c4c <BZ2_decompress+0xbbc>
     d6c:	mov	w0, #0xfffffffc            	// #-4
     d70:	str	w0, [sp, #392]
     d74:	b	5738 <BZ2_decompress+0x56a8>
     d78:	ldr	x0, [sp, #24]
     d7c:	mov	w1, #0x11                  	// #17
     d80:	str	w1, [x0, #8]
     d84:	ldr	x0, [sp, #24]
     d88:	ldr	w0, [x0, #36]
     d8c:	cmp	w0, #0x7
     d90:	b.le	de4 <BZ2_decompress+0xd54>
     d94:	ldr	x0, [sp, #24]
     d98:	ldr	w1, [x0, #32]
     d9c:	ldr	x0, [sp, #24]
     da0:	ldr	w0, [x0, #36]
     da4:	sub	w0, w0, #0x8
     da8:	lsr	w0, w1, w0
     dac:	and	w0, w0, #0xff
     db0:	str	w0, [sp, #196]
     db4:	ldr	x0, [sp, #24]
     db8:	ldr	w0, [x0, #36]
     dbc:	sub	w1, w0, #0x8
     dc0:	ldr	x0, [sp, #24]
     dc4:	str	w1, [x0, #36]
     dc8:	ldr	w0, [sp, #196]
     dcc:	strb	w0, [sp, #399]
     dd0:	nop
     dd4:	ldrb	w0, [sp, #399]
     dd8:	cmp	w0, #0x26
     ddc:	b.eq	eb0 <BZ2_decompress+0xe20>  // b.none
     de0:	b	ea4 <BZ2_decompress+0xe14>
     de4:	ldr	x0, [sp, #24]
     de8:	ldr	x0, [x0]
     dec:	ldr	w0, [x0, #8]
     df0:	cmp	w0, #0x0
     df4:	b.ne	e00 <BZ2_decompress+0xd70>  // b.any
     df8:	str	wzr, [sp, #392]
     dfc:	b	5738 <BZ2_decompress+0x56a8>
     e00:	ldr	x0, [sp, #24]
     e04:	ldr	w0, [x0, #32]
     e08:	lsl	w0, w0, #8
     e0c:	ldr	x1, [sp, #24]
     e10:	ldr	x1, [x1]
     e14:	ldr	x1, [x1]
     e18:	ldrb	w1, [x1]
     e1c:	orr	w1, w0, w1
     e20:	ldr	x0, [sp, #24]
     e24:	str	w1, [x0, #32]
     e28:	ldr	x0, [sp, #24]
     e2c:	ldr	w0, [x0, #36]
     e30:	add	w1, w0, #0x8
     e34:	ldr	x0, [sp, #24]
     e38:	str	w1, [x0, #36]
     e3c:	ldr	x0, [sp, #24]
     e40:	ldr	x0, [x0]
     e44:	ldr	x1, [x0]
     e48:	add	x1, x1, #0x1
     e4c:	str	x1, [x0]
     e50:	ldr	x0, [sp, #24]
     e54:	ldr	x0, [x0]
     e58:	ldr	w1, [x0, #8]
     e5c:	sub	w1, w1, #0x1
     e60:	str	w1, [x0, #8]
     e64:	ldr	x0, [sp, #24]
     e68:	ldr	x0, [x0]
     e6c:	ldr	w1, [x0, #12]
     e70:	add	w1, w1, #0x1
     e74:	str	w1, [x0, #12]
     e78:	ldr	x0, [sp, #24]
     e7c:	ldr	x0, [x0]
     e80:	ldr	w0, [x0, #12]
     e84:	cmp	w0, #0x0
     e88:	b.ne	d84 <BZ2_decompress+0xcf4>  // b.any
     e8c:	ldr	x0, [sp, #24]
     e90:	ldr	x0, [x0]
     e94:	ldr	w1, [x0, #16]
     e98:	add	w1, w1, #0x1
     e9c:	str	w1, [x0, #16]
     ea0:	b	d84 <BZ2_decompress+0xcf4>
     ea4:	mov	w0, #0xfffffffc            	// #-4
     ea8:	str	w0, [sp, #392]
     eac:	b	5738 <BZ2_decompress+0x56a8>
     eb0:	ldr	x0, [sp, #24]
     eb4:	mov	w1, #0x12                  	// #18
     eb8:	str	w1, [x0, #8]
     ebc:	ldr	x0, [sp, #24]
     ec0:	ldr	w0, [x0, #36]
     ec4:	cmp	w0, #0x7
     ec8:	b.le	f1c <BZ2_decompress+0xe8c>
     ecc:	ldr	x0, [sp, #24]
     ed0:	ldr	w1, [x0, #32]
     ed4:	ldr	x0, [sp, #24]
     ed8:	ldr	w0, [x0, #36]
     edc:	sub	w0, w0, #0x8
     ee0:	lsr	w0, w1, w0
     ee4:	and	w0, w0, #0xff
     ee8:	str	w0, [sp, #192]
     eec:	ldr	x0, [sp, #24]
     ef0:	ldr	w0, [x0, #36]
     ef4:	sub	w1, w0, #0x8
     ef8:	ldr	x0, [sp, #24]
     efc:	str	w1, [x0, #36]
     f00:	ldr	w0, [sp, #192]
     f04:	strb	w0, [sp, #399]
     f08:	nop
     f0c:	ldrb	w0, [sp, #399]
     f10:	cmp	w0, #0x53
     f14:	b.eq	fe8 <BZ2_decompress+0xf58>  // b.none
     f18:	b	fdc <BZ2_decompress+0xf4c>
     f1c:	ldr	x0, [sp, #24]
     f20:	ldr	x0, [x0]
     f24:	ldr	w0, [x0, #8]
     f28:	cmp	w0, #0x0
     f2c:	b.ne	f38 <BZ2_decompress+0xea8>  // b.any
     f30:	str	wzr, [sp, #392]
     f34:	b	5738 <BZ2_decompress+0x56a8>
     f38:	ldr	x0, [sp, #24]
     f3c:	ldr	w0, [x0, #32]
     f40:	lsl	w0, w0, #8
     f44:	ldr	x1, [sp, #24]
     f48:	ldr	x1, [x1]
     f4c:	ldr	x1, [x1]
     f50:	ldrb	w1, [x1]
     f54:	orr	w1, w0, w1
     f58:	ldr	x0, [sp, #24]
     f5c:	str	w1, [x0, #32]
     f60:	ldr	x0, [sp, #24]
     f64:	ldr	w0, [x0, #36]
     f68:	add	w1, w0, #0x8
     f6c:	ldr	x0, [sp, #24]
     f70:	str	w1, [x0, #36]
     f74:	ldr	x0, [sp, #24]
     f78:	ldr	x0, [x0]
     f7c:	ldr	x1, [x0]
     f80:	add	x1, x1, #0x1
     f84:	str	x1, [x0]
     f88:	ldr	x0, [sp, #24]
     f8c:	ldr	x0, [x0]
     f90:	ldr	w1, [x0, #8]
     f94:	sub	w1, w1, #0x1
     f98:	str	w1, [x0, #8]
     f9c:	ldr	x0, [sp, #24]
     fa0:	ldr	x0, [x0]
     fa4:	ldr	w1, [x0, #12]
     fa8:	add	w1, w1, #0x1
     fac:	str	w1, [x0, #12]
     fb0:	ldr	x0, [sp, #24]
     fb4:	ldr	x0, [x0]
     fb8:	ldr	w0, [x0, #12]
     fbc:	cmp	w0, #0x0
     fc0:	b.ne	ebc <BZ2_decompress+0xe2c>  // b.any
     fc4:	ldr	x0, [sp, #24]
     fc8:	ldr	x0, [x0]
     fcc:	ldr	w1, [x0, #16]
     fd0:	add	w1, w1, #0x1
     fd4:	str	w1, [x0, #16]
     fd8:	b	ebc <BZ2_decompress+0xe2c>
     fdc:	mov	w0, #0xfffffffc            	// #-4
     fe0:	str	w0, [sp, #392]
     fe4:	b	5738 <BZ2_decompress+0x56a8>
     fe8:	ldr	x0, [sp, #24]
     fec:	mov	w1, #0x13                  	// #19
     ff0:	str	w1, [x0, #8]
     ff4:	ldr	x0, [sp, #24]
     ff8:	ldr	w0, [x0, #36]
     ffc:	cmp	w0, #0x7
    1000:	b.le	1054 <BZ2_decompress+0xfc4>
    1004:	ldr	x0, [sp, #24]
    1008:	ldr	w1, [x0, #32]
    100c:	ldr	x0, [sp, #24]
    1010:	ldr	w0, [x0, #36]
    1014:	sub	w0, w0, #0x8
    1018:	lsr	w0, w1, w0
    101c:	and	w0, w0, #0xff
    1020:	str	w0, [sp, #188]
    1024:	ldr	x0, [sp, #24]
    1028:	ldr	w0, [x0, #36]
    102c:	sub	w1, w0, #0x8
    1030:	ldr	x0, [sp, #24]
    1034:	str	w1, [x0, #36]
    1038:	ldr	w0, [sp, #188]
    103c:	strb	w0, [sp, #399]
    1040:	nop
    1044:	ldrb	w0, [sp, #399]
    1048:	cmp	w0, #0x59
    104c:	b.eq	1120 <BZ2_decompress+0x1090>  // b.none
    1050:	b	1114 <BZ2_decompress+0x1084>
    1054:	ldr	x0, [sp, #24]
    1058:	ldr	x0, [x0]
    105c:	ldr	w0, [x0, #8]
    1060:	cmp	w0, #0x0
    1064:	b.ne	1070 <BZ2_decompress+0xfe0>  // b.any
    1068:	str	wzr, [sp, #392]
    106c:	b	5738 <BZ2_decompress+0x56a8>
    1070:	ldr	x0, [sp, #24]
    1074:	ldr	w0, [x0, #32]
    1078:	lsl	w0, w0, #8
    107c:	ldr	x1, [sp, #24]
    1080:	ldr	x1, [x1]
    1084:	ldr	x1, [x1]
    1088:	ldrb	w1, [x1]
    108c:	orr	w1, w0, w1
    1090:	ldr	x0, [sp, #24]
    1094:	str	w1, [x0, #32]
    1098:	ldr	x0, [sp, #24]
    109c:	ldr	w0, [x0, #36]
    10a0:	add	w1, w0, #0x8
    10a4:	ldr	x0, [sp, #24]
    10a8:	str	w1, [x0, #36]
    10ac:	ldr	x0, [sp, #24]
    10b0:	ldr	x0, [x0]
    10b4:	ldr	x1, [x0]
    10b8:	add	x1, x1, #0x1
    10bc:	str	x1, [x0]
    10c0:	ldr	x0, [sp, #24]
    10c4:	ldr	x0, [x0]
    10c8:	ldr	w1, [x0, #8]
    10cc:	sub	w1, w1, #0x1
    10d0:	str	w1, [x0, #8]
    10d4:	ldr	x0, [sp, #24]
    10d8:	ldr	x0, [x0]
    10dc:	ldr	w1, [x0, #12]
    10e0:	add	w1, w1, #0x1
    10e4:	str	w1, [x0, #12]
    10e8:	ldr	x0, [sp, #24]
    10ec:	ldr	x0, [x0]
    10f0:	ldr	w0, [x0, #12]
    10f4:	cmp	w0, #0x0
    10f8:	b.ne	ff4 <BZ2_decompress+0xf64>  // b.any
    10fc:	ldr	x0, [sp, #24]
    1100:	ldr	x0, [x0]
    1104:	ldr	w1, [x0, #16]
    1108:	add	w1, w1, #0x1
    110c:	str	w1, [x0, #16]
    1110:	b	ff4 <BZ2_decompress+0xf64>
    1114:	mov	w0, #0xfffffffc            	// #-4
    1118:	str	w0, [sp, #392]
    111c:	b	5738 <BZ2_decompress+0x56a8>
    1120:	ldr	x0, [sp, #24]
    1124:	ldr	w0, [x0, #48]
    1128:	add	w1, w0, #0x1
    112c:	ldr	x0, [sp, #24]
    1130:	str	w1, [x0, #48]
    1134:	ldr	x0, [sp, #24]
    1138:	ldr	w0, [x0, #52]
    113c:	cmp	w0, #0x1
    1140:	b.le	116c <BZ2_decompress+0x10dc>
    1144:	adrp	x0, 0 <stderr>
    1148:	add	x0, x0, #0x0
    114c:	ldr	x3, [x0]
    1150:	ldr	x0, [sp, #24]
    1154:	ldr	w0, [x0, #48]
    1158:	mov	w2, w0
    115c:	adrp	x0, 0 <makeMaps_d>
    1160:	add	x1, x0, #0x0
    1164:	mov	x0, x3
    1168:	bl	0 <fprintf>
    116c:	ldr	x0, [sp, #24]
    1170:	str	wzr, [x0, #3176]
    1174:	ldr	x0, [sp, #24]
    1178:	mov	w1, #0x14                  	// #20
    117c:	str	w1, [x0, #8]
    1180:	ldr	x0, [sp, #24]
    1184:	ldr	w0, [x0, #36]
    1188:	cmp	w0, #0x7
    118c:	b.le	11f0 <BZ2_decompress+0x1160>
    1190:	ldr	x0, [sp, #24]
    1194:	ldr	w1, [x0, #32]
    1198:	ldr	x0, [sp, #24]
    119c:	ldr	w0, [x0, #36]
    11a0:	sub	w0, w0, #0x8
    11a4:	lsr	w0, w1, w0
    11a8:	and	w0, w0, #0xff
    11ac:	str	w0, [sp, #184]
    11b0:	ldr	x0, [sp, #24]
    11b4:	ldr	w0, [x0, #36]
    11b8:	sub	w1, w0, #0x8
    11bc:	ldr	x0, [sp, #24]
    11c0:	str	w1, [x0, #36]
    11c4:	ldr	w0, [sp, #184]
    11c8:	strb	w0, [sp, #399]
    11cc:	nop
    11d0:	ldr	x0, [sp, #24]
    11d4:	ldr	w0, [x0, #3176]
    11d8:	lsl	w1, w0, #8
    11dc:	ldrb	w0, [sp, #399]
    11e0:	orr	w1, w1, w0
    11e4:	ldr	x0, [sp, #24]
    11e8:	str	w1, [x0, #3176]
    11ec:	b	12b0 <BZ2_decompress+0x1220>
    11f0:	ldr	x0, [sp, #24]
    11f4:	ldr	x0, [x0]
    11f8:	ldr	w0, [x0, #8]
    11fc:	cmp	w0, #0x0
    1200:	b.ne	120c <BZ2_decompress+0x117c>  // b.any
    1204:	str	wzr, [sp, #392]
    1208:	b	5738 <BZ2_decompress+0x56a8>
    120c:	ldr	x0, [sp, #24]
    1210:	ldr	w0, [x0, #32]
    1214:	lsl	w0, w0, #8
    1218:	ldr	x1, [sp, #24]
    121c:	ldr	x1, [x1]
    1220:	ldr	x1, [x1]
    1224:	ldrb	w1, [x1]
    1228:	orr	w1, w0, w1
    122c:	ldr	x0, [sp, #24]
    1230:	str	w1, [x0, #32]
    1234:	ldr	x0, [sp, #24]
    1238:	ldr	w0, [x0, #36]
    123c:	add	w1, w0, #0x8
    1240:	ldr	x0, [sp, #24]
    1244:	str	w1, [x0, #36]
    1248:	ldr	x0, [sp, #24]
    124c:	ldr	x0, [x0]
    1250:	ldr	x1, [x0]
    1254:	add	x1, x1, #0x1
    1258:	str	x1, [x0]
    125c:	ldr	x0, [sp, #24]
    1260:	ldr	x0, [x0]
    1264:	ldr	w1, [x0, #8]
    1268:	sub	w1, w1, #0x1
    126c:	str	w1, [x0, #8]
    1270:	ldr	x0, [sp, #24]
    1274:	ldr	x0, [x0]
    1278:	ldr	w1, [x0, #12]
    127c:	add	w1, w1, #0x1
    1280:	str	w1, [x0, #12]
    1284:	ldr	x0, [sp, #24]
    1288:	ldr	x0, [x0]
    128c:	ldr	w0, [x0, #12]
    1290:	cmp	w0, #0x0
    1294:	b.ne	1180 <BZ2_decompress+0x10f0>  // b.any
    1298:	ldr	x0, [sp, #24]
    129c:	ldr	x0, [x0]
    12a0:	ldr	w1, [x0, #16]
    12a4:	add	w1, w1, #0x1
    12a8:	str	w1, [x0, #16]
    12ac:	b	1180 <BZ2_decompress+0x10f0>
    12b0:	ldr	x0, [sp, #24]
    12b4:	mov	w1, #0x15                  	// #21
    12b8:	str	w1, [x0, #8]
    12bc:	ldr	x0, [sp, #24]
    12c0:	ldr	w0, [x0, #36]
    12c4:	cmp	w0, #0x7
    12c8:	b.le	132c <BZ2_decompress+0x129c>
    12cc:	ldr	x0, [sp, #24]
    12d0:	ldr	w1, [x0, #32]
    12d4:	ldr	x0, [sp, #24]
    12d8:	ldr	w0, [x0, #36]
    12dc:	sub	w0, w0, #0x8
    12e0:	lsr	w0, w1, w0
    12e4:	and	w0, w0, #0xff
    12e8:	str	w0, [sp, #180]
    12ec:	ldr	x0, [sp, #24]
    12f0:	ldr	w0, [x0, #36]
    12f4:	sub	w1, w0, #0x8
    12f8:	ldr	x0, [sp, #24]
    12fc:	str	w1, [x0, #36]
    1300:	ldr	w0, [sp, #180]
    1304:	strb	w0, [sp, #399]
    1308:	nop
    130c:	ldr	x0, [sp, #24]
    1310:	ldr	w0, [x0, #3176]
    1314:	lsl	w1, w0, #8
    1318:	ldrb	w0, [sp, #399]
    131c:	orr	w1, w1, w0
    1320:	ldr	x0, [sp, #24]
    1324:	str	w1, [x0, #3176]
    1328:	b	13ec <BZ2_decompress+0x135c>
    132c:	ldr	x0, [sp, #24]
    1330:	ldr	x0, [x0]
    1334:	ldr	w0, [x0, #8]
    1338:	cmp	w0, #0x0
    133c:	b.ne	1348 <BZ2_decompress+0x12b8>  // b.any
    1340:	str	wzr, [sp, #392]
    1344:	b	5738 <BZ2_decompress+0x56a8>
    1348:	ldr	x0, [sp, #24]
    134c:	ldr	w0, [x0, #32]
    1350:	lsl	w0, w0, #8
    1354:	ldr	x1, [sp, #24]
    1358:	ldr	x1, [x1]
    135c:	ldr	x1, [x1]
    1360:	ldrb	w1, [x1]
    1364:	orr	w1, w0, w1
    1368:	ldr	x0, [sp, #24]
    136c:	str	w1, [x0, #32]
    1370:	ldr	x0, [sp, #24]
    1374:	ldr	w0, [x0, #36]
    1378:	add	w1, w0, #0x8
    137c:	ldr	x0, [sp, #24]
    1380:	str	w1, [x0, #36]
    1384:	ldr	x0, [sp, #24]
    1388:	ldr	x0, [x0]
    138c:	ldr	x1, [x0]
    1390:	add	x1, x1, #0x1
    1394:	str	x1, [x0]
    1398:	ldr	x0, [sp, #24]
    139c:	ldr	x0, [x0]
    13a0:	ldr	w1, [x0, #8]
    13a4:	sub	w1, w1, #0x1
    13a8:	str	w1, [x0, #8]
    13ac:	ldr	x0, [sp, #24]
    13b0:	ldr	x0, [x0]
    13b4:	ldr	w1, [x0, #12]
    13b8:	add	w1, w1, #0x1
    13bc:	str	w1, [x0, #12]
    13c0:	ldr	x0, [sp, #24]
    13c4:	ldr	x0, [x0]
    13c8:	ldr	w0, [x0, #12]
    13cc:	cmp	w0, #0x0
    13d0:	b.ne	12bc <BZ2_decompress+0x122c>  // b.any
    13d4:	ldr	x0, [sp, #24]
    13d8:	ldr	x0, [x0]
    13dc:	ldr	w1, [x0, #16]
    13e0:	add	w1, w1, #0x1
    13e4:	str	w1, [x0, #16]
    13e8:	b	12bc <BZ2_decompress+0x122c>
    13ec:	ldr	x0, [sp, #24]
    13f0:	mov	w1, #0x16                  	// #22
    13f4:	str	w1, [x0, #8]
    13f8:	ldr	x0, [sp, #24]
    13fc:	ldr	w0, [x0, #36]
    1400:	cmp	w0, #0x7
    1404:	b.le	1468 <BZ2_decompress+0x13d8>
    1408:	ldr	x0, [sp, #24]
    140c:	ldr	w1, [x0, #32]
    1410:	ldr	x0, [sp, #24]
    1414:	ldr	w0, [x0, #36]
    1418:	sub	w0, w0, #0x8
    141c:	lsr	w0, w1, w0
    1420:	and	w0, w0, #0xff
    1424:	str	w0, [sp, #176]
    1428:	ldr	x0, [sp, #24]
    142c:	ldr	w0, [x0, #36]
    1430:	sub	w1, w0, #0x8
    1434:	ldr	x0, [sp, #24]
    1438:	str	w1, [x0, #36]
    143c:	ldr	w0, [sp, #176]
    1440:	strb	w0, [sp, #399]
    1444:	nop
    1448:	ldr	x0, [sp, #24]
    144c:	ldr	w0, [x0, #3176]
    1450:	lsl	w1, w0, #8
    1454:	ldrb	w0, [sp, #399]
    1458:	orr	w1, w1, w0
    145c:	ldr	x0, [sp, #24]
    1460:	str	w1, [x0, #3176]
    1464:	b	1528 <BZ2_decompress+0x1498>
    1468:	ldr	x0, [sp, #24]
    146c:	ldr	x0, [x0]
    1470:	ldr	w0, [x0, #8]
    1474:	cmp	w0, #0x0
    1478:	b.ne	1484 <BZ2_decompress+0x13f4>  // b.any
    147c:	str	wzr, [sp, #392]
    1480:	b	5738 <BZ2_decompress+0x56a8>
    1484:	ldr	x0, [sp, #24]
    1488:	ldr	w0, [x0, #32]
    148c:	lsl	w0, w0, #8
    1490:	ldr	x1, [sp, #24]
    1494:	ldr	x1, [x1]
    1498:	ldr	x1, [x1]
    149c:	ldrb	w1, [x1]
    14a0:	orr	w1, w0, w1
    14a4:	ldr	x0, [sp, #24]
    14a8:	str	w1, [x0, #32]
    14ac:	ldr	x0, [sp, #24]
    14b0:	ldr	w0, [x0, #36]
    14b4:	add	w1, w0, #0x8
    14b8:	ldr	x0, [sp, #24]
    14bc:	str	w1, [x0, #36]
    14c0:	ldr	x0, [sp, #24]
    14c4:	ldr	x0, [x0]
    14c8:	ldr	x1, [x0]
    14cc:	add	x1, x1, #0x1
    14d0:	str	x1, [x0]
    14d4:	ldr	x0, [sp, #24]
    14d8:	ldr	x0, [x0]
    14dc:	ldr	w1, [x0, #8]
    14e0:	sub	w1, w1, #0x1
    14e4:	str	w1, [x0, #8]
    14e8:	ldr	x0, [sp, #24]
    14ec:	ldr	x0, [x0]
    14f0:	ldr	w1, [x0, #12]
    14f4:	add	w1, w1, #0x1
    14f8:	str	w1, [x0, #12]
    14fc:	ldr	x0, [sp, #24]
    1500:	ldr	x0, [x0]
    1504:	ldr	w0, [x0, #12]
    1508:	cmp	w0, #0x0
    150c:	b.ne	13f8 <BZ2_decompress+0x1368>  // b.any
    1510:	ldr	x0, [sp, #24]
    1514:	ldr	x0, [x0]
    1518:	ldr	w1, [x0, #16]
    151c:	add	w1, w1, #0x1
    1520:	str	w1, [x0, #16]
    1524:	b	13f8 <BZ2_decompress+0x1368>
    1528:	ldr	x0, [sp, #24]
    152c:	mov	w1, #0x17                  	// #23
    1530:	str	w1, [x0, #8]
    1534:	ldr	x0, [sp, #24]
    1538:	ldr	w0, [x0, #36]
    153c:	cmp	w0, #0x7
    1540:	b.le	15a4 <BZ2_decompress+0x1514>
    1544:	ldr	x0, [sp, #24]
    1548:	ldr	w1, [x0, #32]
    154c:	ldr	x0, [sp, #24]
    1550:	ldr	w0, [x0, #36]
    1554:	sub	w0, w0, #0x8
    1558:	lsr	w0, w1, w0
    155c:	and	w0, w0, #0xff
    1560:	str	w0, [sp, #172]
    1564:	ldr	x0, [sp, #24]
    1568:	ldr	w0, [x0, #36]
    156c:	sub	w1, w0, #0x8
    1570:	ldr	x0, [sp, #24]
    1574:	str	w1, [x0, #36]
    1578:	ldr	w0, [sp, #172]
    157c:	strb	w0, [sp, #399]
    1580:	nop
    1584:	ldr	x0, [sp, #24]
    1588:	ldr	w0, [x0, #3176]
    158c:	lsl	w1, w0, #8
    1590:	ldrb	w0, [sp, #399]
    1594:	orr	w1, w1, w0
    1598:	ldr	x0, [sp, #24]
    159c:	str	w1, [x0, #3176]
    15a0:	b	1664 <BZ2_decompress+0x15d4>
    15a4:	ldr	x0, [sp, #24]
    15a8:	ldr	x0, [x0]
    15ac:	ldr	w0, [x0, #8]
    15b0:	cmp	w0, #0x0
    15b4:	b.ne	15c0 <BZ2_decompress+0x1530>  // b.any
    15b8:	str	wzr, [sp, #392]
    15bc:	b	5738 <BZ2_decompress+0x56a8>
    15c0:	ldr	x0, [sp, #24]
    15c4:	ldr	w0, [x0, #32]
    15c8:	lsl	w0, w0, #8
    15cc:	ldr	x1, [sp, #24]
    15d0:	ldr	x1, [x1]
    15d4:	ldr	x1, [x1]
    15d8:	ldrb	w1, [x1]
    15dc:	orr	w1, w0, w1
    15e0:	ldr	x0, [sp, #24]
    15e4:	str	w1, [x0, #32]
    15e8:	ldr	x0, [sp, #24]
    15ec:	ldr	w0, [x0, #36]
    15f0:	add	w1, w0, #0x8
    15f4:	ldr	x0, [sp, #24]
    15f8:	str	w1, [x0, #36]
    15fc:	ldr	x0, [sp, #24]
    1600:	ldr	x0, [x0]
    1604:	ldr	x1, [x0]
    1608:	add	x1, x1, #0x1
    160c:	str	x1, [x0]
    1610:	ldr	x0, [sp, #24]
    1614:	ldr	x0, [x0]
    1618:	ldr	w1, [x0, #8]
    161c:	sub	w1, w1, #0x1
    1620:	str	w1, [x0, #8]
    1624:	ldr	x0, [sp, #24]
    1628:	ldr	x0, [x0]
    162c:	ldr	w1, [x0, #12]
    1630:	add	w1, w1, #0x1
    1634:	str	w1, [x0, #12]
    1638:	ldr	x0, [sp, #24]
    163c:	ldr	x0, [x0]
    1640:	ldr	w0, [x0, #12]
    1644:	cmp	w0, #0x0
    1648:	b.ne	1534 <BZ2_decompress+0x14a4>  // b.any
    164c:	ldr	x0, [sp, #24]
    1650:	ldr	x0, [x0]
    1654:	ldr	w1, [x0, #16]
    1658:	add	w1, w1, #0x1
    165c:	str	w1, [x0, #16]
    1660:	b	1534 <BZ2_decompress+0x14a4>
    1664:	ldr	x0, [sp, #24]
    1668:	mov	w1, #0x18                  	// #24
    166c:	str	w1, [x0, #8]
    1670:	ldr	x0, [sp, #24]
    1674:	ldr	w0, [x0, #36]
    1678:	cmp	w0, #0x0
    167c:	b.le	16d4 <BZ2_decompress+0x1644>
    1680:	ldr	x0, [sp, #24]
    1684:	ldr	w1, [x0, #32]
    1688:	ldr	x0, [sp, #24]
    168c:	ldr	w0, [x0, #36]
    1690:	sub	w0, w0, #0x1
    1694:	lsr	w0, w1, w0
    1698:	and	w0, w0, #0x1
    169c:	str	w0, [sp, #168]
    16a0:	ldr	x0, [sp, #24]
    16a4:	ldr	w0, [x0, #36]
    16a8:	sub	w1, w0, #0x1
    16ac:	ldr	x0, [sp, #24]
    16b0:	str	w1, [x0, #36]
    16b4:	ldr	w0, [sp, #168]
    16b8:	and	w1, w0, #0xff
    16bc:	ldr	x0, [sp, #24]
    16c0:	strb	w1, [x0, #20]
    16c4:	nop
    16c8:	ldr	x0, [sp, #24]
    16cc:	str	wzr, [x0, #56]
    16d0:	b	1794 <BZ2_decompress+0x1704>
    16d4:	ldr	x0, [sp, #24]
    16d8:	ldr	x0, [x0]
    16dc:	ldr	w0, [x0, #8]
    16e0:	cmp	w0, #0x0
    16e4:	b.ne	16f0 <BZ2_decompress+0x1660>  // b.any
    16e8:	str	wzr, [sp, #392]
    16ec:	b	5738 <BZ2_decompress+0x56a8>
    16f0:	ldr	x0, [sp, #24]
    16f4:	ldr	w0, [x0, #32]
    16f8:	lsl	w0, w0, #8
    16fc:	ldr	x1, [sp, #24]
    1700:	ldr	x1, [x1]
    1704:	ldr	x1, [x1]
    1708:	ldrb	w1, [x1]
    170c:	orr	w1, w0, w1
    1710:	ldr	x0, [sp, #24]
    1714:	str	w1, [x0, #32]
    1718:	ldr	x0, [sp, #24]
    171c:	ldr	w0, [x0, #36]
    1720:	add	w1, w0, #0x8
    1724:	ldr	x0, [sp, #24]
    1728:	str	w1, [x0, #36]
    172c:	ldr	x0, [sp, #24]
    1730:	ldr	x0, [x0]
    1734:	ldr	x1, [x0]
    1738:	add	x1, x1, #0x1
    173c:	str	x1, [x0]
    1740:	ldr	x0, [sp, #24]
    1744:	ldr	x0, [x0]
    1748:	ldr	w1, [x0, #8]
    174c:	sub	w1, w1, #0x1
    1750:	str	w1, [x0, #8]
    1754:	ldr	x0, [sp, #24]
    1758:	ldr	x0, [x0]
    175c:	ldr	w1, [x0, #12]
    1760:	add	w1, w1, #0x1
    1764:	str	w1, [x0, #12]
    1768:	ldr	x0, [sp, #24]
    176c:	ldr	x0, [x0]
    1770:	ldr	w0, [x0, #12]
    1774:	cmp	w0, #0x0
    1778:	b.ne	1670 <BZ2_decompress+0x15e0>  // b.any
    177c:	ldr	x0, [sp, #24]
    1780:	ldr	x0, [x0]
    1784:	ldr	w1, [x0, #16]
    1788:	add	w1, w1, #0x1
    178c:	str	w1, [x0, #16]
    1790:	b	1670 <BZ2_decompress+0x15e0>
    1794:	ldr	x0, [sp, #24]
    1798:	mov	w1, #0x19                  	// #25
    179c:	str	w1, [x0, #8]
    17a0:	ldr	x0, [sp, #24]
    17a4:	ldr	w0, [x0, #36]
    17a8:	cmp	w0, #0x7
    17ac:	b.le	1810 <BZ2_decompress+0x1780>
    17b0:	ldr	x0, [sp, #24]
    17b4:	ldr	w1, [x0, #32]
    17b8:	ldr	x0, [sp, #24]
    17bc:	ldr	w0, [x0, #36]
    17c0:	sub	w0, w0, #0x8
    17c4:	lsr	w0, w1, w0
    17c8:	and	w0, w0, #0xff
    17cc:	str	w0, [sp, #164]
    17d0:	ldr	x0, [sp, #24]
    17d4:	ldr	w0, [x0, #36]
    17d8:	sub	w1, w0, #0x8
    17dc:	ldr	x0, [sp, #24]
    17e0:	str	w1, [x0, #36]
    17e4:	ldr	w0, [sp, #164]
    17e8:	strb	w0, [sp, #399]
    17ec:	nop
    17f0:	ldr	x0, [sp, #24]
    17f4:	ldr	w0, [x0, #56]
    17f8:	lsl	w1, w0, #8
    17fc:	ldrb	w0, [sp, #399]
    1800:	orr	w1, w1, w0
    1804:	ldr	x0, [sp, #24]
    1808:	str	w1, [x0, #56]
    180c:	b	18d0 <BZ2_decompress+0x1840>
    1810:	ldr	x0, [sp, #24]
    1814:	ldr	x0, [x0]
    1818:	ldr	w0, [x0, #8]
    181c:	cmp	w0, #0x0
    1820:	b.ne	182c <BZ2_decompress+0x179c>  // b.any
    1824:	str	wzr, [sp, #392]
    1828:	b	5738 <BZ2_decompress+0x56a8>
    182c:	ldr	x0, [sp, #24]
    1830:	ldr	w0, [x0, #32]
    1834:	lsl	w0, w0, #8
    1838:	ldr	x1, [sp, #24]
    183c:	ldr	x1, [x1]
    1840:	ldr	x1, [x1]
    1844:	ldrb	w1, [x1]
    1848:	orr	w1, w0, w1
    184c:	ldr	x0, [sp, #24]
    1850:	str	w1, [x0, #32]
    1854:	ldr	x0, [sp, #24]
    1858:	ldr	w0, [x0, #36]
    185c:	add	w1, w0, #0x8
    1860:	ldr	x0, [sp, #24]
    1864:	str	w1, [x0, #36]
    1868:	ldr	x0, [sp, #24]
    186c:	ldr	x0, [x0]
    1870:	ldr	x1, [x0]
    1874:	add	x1, x1, #0x1
    1878:	str	x1, [x0]
    187c:	ldr	x0, [sp, #24]
    1880:	ldr	x0, [x0]
    1884:	ldr	w1, [x0, #8]
    1888:	sub	w1, w1, #0x1
    188c:	str	w1, [x0, #8]
    1890:	ldr	x0, [sp, #24]
    1894:	ldr	x0, [x0]
    1898:	ldr	w1, [x0, #12]
    189c:	add	w1, w1, #0x1
    18a0:	str	w1, [x0, #12]
    18a4:	ldr	x0, [sp, #24]
    18a8:	ldr	x0, [x0]
    18ac:	ldr	w0, [x0, #12]
    18b0:	cmp	w0, #0x0
    18b4:	b.ne	17a0 <BZ2_decompress+0x1710>  // b.any
    18b8:	ldr	x0, [sp, #24]
    18bc:	ldr	x0, [x0]
    18c0:	ldr	w1, [x0, #16]
    18c4:	add	w1, w1, #0x1
    18c8:	str	w1, [x0, #16]
    18cc:	b	17a0 <BZ2_decompress+0x1710>
    18d0:	ldr	x0, [sp, #24]
    18d4:	mov	w1, #0x1a                  	// #26
    18d8:	str	w1, [x0, #8]
    18dc:	ldr	x0, [sp, #24]
    18e0:	ldr	w0, [x0, #36]
    18e4:	cmp	w0, #0x7
    18e8:	b.le	194c <BZ2_decompress+0x18bc>
    18ec:	ldr	x0, [sp, #24]
    18f0:	ldr	w1, [x0, #32]
    18f4:	ldr	x0, [sp, #24]
    18f8:	ldr	w0, [x0, #36]
    18fc:	sub	w0, w0, #0x8
    1900:	lsr	w0, w1, w0
    1904:	and	w0, w0, #0xff
    1908:	str	w0, [sp, #160]
    190c:	ldr	x0, [sp, #24]
    1910:	ldr	w0, [x0, #36]
    1914:	sub	w1, w0, #0x8
    1918:	ldr	x0, [sp, #24]
    191c:	str	w1, [x0, #36]
    1920:	ldr	w0, [sp, #160]
    1924:	strb	w0, [sp, #399]
    1928:	nop
    192c:	ldr	x0, [sp, #24]
    1930:	ldr	w0, [x0, #56]
    1934:	lsl	w1, w0, #8
    1938:	ldrb	w0, [sp, #399]
    193c:	orr	w1, w1, w0
    1940:	ldr	x0, [sp, #24]
    1944:	str	w1, [x0, #56]
    1948:	b	1a0c <BZ2_decompress+0x197c>
    194c:	ldr	x0, [sp, #24]
    1950:	ldr	x0, [x0]
    1954:	ldr	w0, [x0, #8]
    1958:	cmp	w0, #0x0
    195c:	b.ne	1968 <BZ2_decompress+0x18d8>  // b.any
    1960:	str	wzr, [sp, #392]
    1964:	b	5738 <BZ2_decompress+0x56a8>
    1968:	ldr	x0, [sp, #24]
    196c:	ldr	w0, [x0, #32]
    1970:	lsl	w0, w0, #8
    1974:	ldr	x1, [sp, #24]
    1978:	ldr	x1, [x1]
    197c:	ldr	x1, [x1]
    1980:	ldrb	w1, [x1]
    1984:	orr	w1, w0, w1
    1988:	ldr	x0, [sp, #24]
    198c:	str	w1, [x0, #32]
    1990:	ldr	x0, [sp, #24]
    1994:	ldr	w0, [x0, #36]
    1998:	add	w1, w0, #0x8
    199c:	ldr	x0, [sp, #24]
    19a0:	str	w1, [x0, #36]
    19a4:	ldr	x0, [sp, #24]
    19a8:	ldr	x0, [x0]
    19ac:	ldr	x1, [x0]
    19b0:	add	x1, x1, #0x1
    19b4:	str	x1, [x0]
    19b8:	ldr	x0, [sp, #24]
    19bc:	ldr	x0, [x0]
    19c0:	ldr	w1, [x0, #8]
    19c4:	sub	w1, w1, #0x1
    19c8:	str	w1, [x0, #8]
    19cc:	ldr	x0, [sp, #24]
    19d0:	ldr	x0, [x0]
    19d4:	ldr	w1, [x0, #12]
    19d8:	add	w1, w1, #0x1
    19dc:	str	w1, [x0, #12]
    19e0:	ldr	x0, [sp, #24]
    19e4:	ldr	x0, [x0]
    19e8:	ldr	w0, [x0, #12]
    19ec:	cmp	w0, #0x0
    19f0:	b.ne	18dc <BZ2_decompress+0x184c>  // b.any
    19f4:	ldr	x0, [sp, #24]
    19f8:	ldr	x0, [x0]
    19fc:	ldr	w1, [x0, #16]
    1a00:	add	w1, w1, #0x1
    1a04:	str	w1, [x0, #16]
    1a08:	b	18dc <BZ2_decompress+0x184c>
    1a0c:	ldr	x0, [sp, #24]
    1a10:	mov	w1, #0x1b                  	// #27
    1a14:	str	w1, [x0, #8]
    1a18:	ldr	x0, [sp, #24]
    1a1c:	ldr	w0, [x0, #36]
    1a20:	cmp	w0, #0x7
    1a24:	b.le	1a98 <BZ2_decompress+0x1a08>
    1a28:	ldr	x0, [sp, #24]
    1a2c:	ldr	w1, [x0, #32]
    1a30:	ldr	x0, [sp, #24]
    1a34:	ldr	w0, [x0, #36]
    1a38:	sub	w0, w0, #0x8
    1a3c:	lsr	w0, w1, w0
    1a40:	and	w0, w0, #0xff
    1a44:	str	w0, [sp, #156]
    1a48:	ldr	x0, [sp, #24]
    1a4c:	ldr	w0, [x0, #36]
    1a50:	sub	w1, w0, #0x8
    1a54:	ldr	x0, [sp, #24]
    1a58:	str	w1, [x0, #36]
    1a5c:	ldr	w0, [sp, #156]
    1a60:	strb	w0, [sp, #399]
    1a64:	nop
    1a68:	ldr	x0, [sp, #24]
    1a6c:	ldr	w0, [x0, #56]
    1a70:	lsl	w1, w0, #8
    1a74:	ldrb	w0, [sp, #399]
    1a78:	orr	w1, w1, w0
    1a7c:	ldr	x0, [sp, #24]
    1a80:	str	w1, [x0, #56]
    1a84:	ldr	x0, [sp, #24]
    1a88:	ldr	w0, [x0, #56]
    1a8c:	cmp	w0, #0x0
    1a90:	b.ge	1b64 <BZ2_decompress+0x1ad4>  // b.tcont
    1a94:	b	1b58 <BZ2_decompress+0x1ac8>
    1a98:	ldr	x0, [sp, #24]
    1a9c:	ldr	x0, [x0]
    1aa0:	ldr	w0, [x0, #8]
    1aa4:	cmp	w0, #0x0
    1aa8:	b.ne	1ab4 <BZ2_decompress+0x1a24>  // b.any
    1aac:	str	wzr, [sp, #392]
    1ab0:	b	5738 <BZ2_decompress+0x56a8>
    1ab4:	ldr	x0, [sp, #24]
    1ab8:	ldr	w0, [x0, #32]
    1abc:	lsl	w0, w0, #8
    1ac0:	ldr	x1, [sp, #24]
    1ac4:	ldr	x1, [x1]
    1ac8:	ldr	x1, [x1]
    1acc:	ldrb	w1, [x1]
    1ad0:	orr	w1, w0, w1
    1ad4:	ldr	x0, [sp, #24]
    1ad8:	str	w1, [x0, #32]
    1adc:	ldr	x0, [sp, #24]
    1ae0:	ldr	w0, [x0, #36]
    1ae4:	add	w1, w0, #0x8
    1ae8:	ldr	x0, [sp, #24]
    1aec:	str	w1, [x0, #36]
    1af0:	ldr	x0, [sp, #24]
    1af4:	ldr	x0, [x0]
    1af8:	ldr	x1, [x0]
    1afc:	add	x1, x1, #0x1
    1b00:	str	x1, [x0]
    1b04:	ldr	x0, [sp, #24]
    1b08:	ldr	x0, [x0]
    1b0c:	ldr	w1, [x0, #8]
    1b10:	sub	w1, w1, #0x1
    1b14:	str	w1, [x0, #8]
    1b18:	ldr	x0, [sp, #24]
    1b1c:	ldr	x0, [x0]
    1b20:	ldr	w1, [x0, #12]
    1b24:	add	w1, w1, #0x1
    1b28:	str	w1, [x0, #12]
    1b2c:	ldr	x0, [sp, #24]
    1b30:	ldr	x0, [x0]
    1b34:	ldr	w0, [x0, #12]
    1b38:	cmp	w0, #0x0
    1b3c:	b.ne	1a18 <BZ2_decompress+0x1988>  // b.any
    1b40:	ldr	x0, [sp, #24]
    1b44:	ldr	x0, [x0]
    1b48:	ldr	w1, [x0, #16]
    1b4c:	add	w1, w1, #0x1
    1b50:	str	w1, [x0, #16]
    1b54:	b	1a18 <BZ2_decompress+0x1988>
    1b58:	mov	w0, #0xfffffffc            	// #-4
    1b5c:	str	w0, [sp, #392]
    1b60:	b	5738 <BZ2_decompress+0x56a8>
    1b64:	ldr	x0, [sp, #24]
    1b68:	ldr	w1, [x0, #56]
    1b6c:	ldr	x0, [sp, #24]
    1b70:	ldr	w2, [x0, #40]
    1b74:	mov	w0, #0x86a0                	// #34464
    1b78:	movk	w0, #0x1, lsl #16
    1b7c:	mul	w0, w2, w0
    1b80:	add	w0, w0, #0xa
    1b84:	cmp	w1, w0
    1b88:	b.le	1b98 <BZ2_decompress+0x1b08>
    1b8c:	mov	w0, #0xfffffffc            	// #-4
    1b90:	str	w0, [sp, #392]
    1b94:	b	5738 <BZ2_decompress+0x56a8>
    1b98:	str	wzr, [sp, #380]
    1b9c:	b	1d00 <BZ2_decompress+0x1c70>
    1ba0:	ldr	x0, [sp, #24]
    1ba4:	mov	w1, #0x1c                  	// #28
    1ba8:	str	w1, [x0, #8]
    1bac:	ldr	x0, [sp, #24]
    1bb0:	ldr	w0, [x0, #36]
    1bb4:	cmp	w0, #0x0
    1bb8:	b.le	1c0c <BZ2_decompress+0x1b7c>
    1bbc:	ldr	x0, [sp, #24]
    1bc0:	ldr	w1, [x0, #32]
    1bc4:	ldr	x0, [sp, #24]
    1bc8:	ldr	w0, [x0, #36]
    1bcc:	sub	w0, w0, #0x1
    1bd0:	lsr	w0, w1, w0
    1bd4:	and	w0, w0, #0x1
    1bd8:	str	w0, [sp, #84]
    1bdc:	ldr	x0, [sp, #24]
    1be0:	ldr	w0, [x0, #36]
    1be4:	sub	w1, w0, #0x1
    1be8:	ldr	x0, [sp, #24]
    1bec:	str	w1, [x0, #36]
    1bf0:	ldr	w0, [sp, #84]
    1bf4:	strb	w0, [sp, #399]
    1bf8:	nop
    1bfc:	ldrb	w0, [sp, #399]
    1c00:	cmp	w0, #0x1
    1c04:	b.ne	1ce4 <BZ2_decompress+0x1c54>  // b.any
    1c08:	b	1ccc <BZ2_decompress+0x1c3c>
    1c0c:	ldr	x0, [sp, #24]
    1c10:	ldr	x0, [x0]
    1c14:	ldr	w0, [x0, #8]
    1c18:	cmp	w0, #0x0
    1c1c:	b.ne	1c28 <BZ2_decompress+0x1b98>  // b.any
    1c20:	str	wzr, [sp, #392]
    1c24:	b	5738 <BZ2_decompress+0x56a8>
    1c28:	ldr	x0, [sp, #24]
    1c2c:	ldr	w0, [x0, #32]
    1c30:	lsl	w0, w0, #8
    1c34:	ldr	x1, [sp, #24]
    1c38:	ldr	x1, [x1]
    1c3c:	ldr	x1, [x1]
    1c40:	ldrb	w1, [x1]
    1c44:	orr	w1, w0, w1
    1c48:	ldr	x0, [sp, #24]
    1c4c:	str	w1, [x0, #32]
    1c50:	ldr	x0, [sp, #24]
    1c54:	ldr	w0, [x0, #36]
    1c58:	add	w1, w0, #0x8
    1c5c:	ldr	x0, [sp, #24]
    1c60:	str	w1, [x0, #36]
    1c64:	ldr	x0, [sp, #24]
    1c68:	ldr	x0, [x0]
    1c6c:	ldr	x1, [x0]
    1c70:	add	x1, x1, #0x1
    1c74:	str	x1, [x0]
    1c78:	ldr	x0, [sp, #24]
    1c7c:	ldr	x0, [x0]
    1c80:	ldr	w1, [x0, #8]
    1c84:	sub	w1, w1, #0x1
    1c88:	str	w1, [x0, #8]
    1c8c:	ldr	x0, [sp, #24]
    1c90:	ldr	x0, [x0]
    1c94:	ldr	w1, [x0, #12]
    1c98:	add	w1, w1, #0x1
    1c9c:	str	w1, [x0, #12]
    1ca0:	ldr	x0, [sp, #24]
    1ca4:	ldr	x0, [x0]
    1ca8:	ldr	w0, [x0, #12]
    1cac:	cmp	w0, #0x0
    1cb0:	b.ne	1bac <BZ2_decompress+0x1b1c>  // b.any
    1cb4:	ldr	x0, [sp, #24]
    1cb8:	ldr	x0, [x0]
    1cbc:	ldr	w1, [x0, #16]
    1cc0:	add	w1, w1, #0x1
    1cc4:	str	w1, [x0, #16]
    1cc8:	b	1bac <BZ2_decompress+0x1b1c>
    1ccc:	ldr	x1, [sp, #24]
    1cd0:	ldrsw	x0, [sp, #380]
    1cd4:	add	x0, x1, x0
    1cd8:	mov	w1, #0x1                   	// #1
    1cdc:	strb	w1, [x0, #3452]
    1ce0:	b	1cf4 <BZ2_decompress+0x1c64>
    1ce4:	ldr	x1, [sp, #24]
    1ce8:	ldrsw	x0, [sp, #380]
    1cec:	add	x0, x1, x0
    1cf0:	strb	wzr, [x0, #3452]
    1cf4:	ldr	w0, [sp, #380]
    1cf8:	add	w0, w0, #0x1
    1cfc:	str	w0, [sp, #380]
    1d00:	ldr	w0, [sp, #380]
    1d04:	cmp	w0, #0xf
    1d08:	b.le	1ba0 <BZ2_decompress+0x1b10>
    1d0c:	str	wzr, [sp, #380]
    1d10:	b	1d30 <BZ2_decompress+0x1ca0>
    1d14:	ldr	x1, [sp, #24]
    1d18:	ldrsw	x0, [sp, #380]
    1d1c:	add	x0, x1, x0
    1d20:	strb	wzr, [x0, #3196]
    1d24:	ldr	w0, [sp, #380]
    1d28:	add	w0, w0, #0x1
    1d2c:	str	w0, [sp, #380]
    1d30:	ldr	w0, [sp, #380]
    1d34:	cmp	w0, #0xff
    1d38:	b.le	1d14 <BZ2_decompress+0x1c84>
    1d3c:	str	wzr, [sp, #380]
    1d40:	b	1ed8 <BZ2_decompress+0x1e48>
    1d44:	ldr	x1, [sp, #24]
    1d48:	ldrsw	x0, [sp, #380]
    1d4c:	add	x0, x1, x0
    1d50:	ldrb	w0, [x0, #3452]
    1d54:	cmp	w0, #0x0
    1d58:	b.eq	1ecc <BZ2_decompress+0x1e3c>  // b.none
    1d5c:	str	wzr, [sp, #376]
    1d60:	b	1ec0 <BZ2_decompress+0x1e30>
    1d64:	ldr	x0, [sp, #24]
    1d68:	mov	w1, #0x1d                  	// #29
    1d6c:	str	w1, [x0, #8]
    1d70:	ldr	x0, [sp, #24]
    1d74:	ldr	w0, [x0, #36]
    1d78:	cmp	w0, #0x0
    1d7c:	b.le	1dd0 <BZ2_decompress+0x1d40>
    1d80:	ldr	x0, [sp, #24]
    1d84:	ldr	w1, [x0, #32]
    1d88:	ldr	x0, [sp, #24]
    1d8c:	ldr	w0, [x0, #36]
    1d90:	sub	w0, w0, #0x1
    1d94:	lsr	w0, w1, w0
    1d98:	and	w0, w0, #0x1
    1d9c:	str	w0, [sp, #88]
    1da0:	ldr	x0, [sp, #24]
    1da4:	ldr	w0, [x0, #36]
    1da8:	sub	w1, w0, #0x1
    1dac:	ldr	x0, [sp, #24]
    1db0:	str	w1, [x0, #36]
    1db4:	ldr	w0, [sp, #88]
    1db8:	strb	w0, [sp, #399]
    1dbc:	nop
    1dc0:	ldrb	w0, [sp, #399]
    1dc4:	cmp	w0, #0x1
    1dc8:	b.ne	1eb4 <BZ2_decompress+0x1e24>  // b.any
    1dcc:	b	1e90 <BZ2_decompress+0x1e00>
    1dd0:	ldr	x0, [sp, #24]
    1dd4:	ldr	x0, [x0]
    1dd8:	ldr	w0, [x0, #8]
    1ddc:	cmp	w0, #0x0
    1de0:	b.ne	1dec <BZ2_decompress+0x1d5c>  // b.any
    1de4:	str	wzr, [sp, #392]
    1de8:	b	5738 <BZ2_decompress+0x56a8>
    1dec:	ldr	x0, [sp, #24]
    1df0:	ldr	w0, [x0, #32]
    1df4:	lsl	w0, w0, #8
    1df8:	ldr	x1, [sp, #24]
    1dfc:	ldr	x1, [x1]
    1e00:	ldr	x1, [x1]
    1e04:	ldrb	w1, [x1]
    1e08:	orr	w1, w0, w1
    1e0c:	ldr	x0, [sp, #24]
    1e10:	str	w1, [x0, #32]
    1e14:	ldr	x0, [sp, #24]
    1e18:	ldr	w0, [x0, #36]
    1e1c:	add	w1, w0, #0x8
    1e20:	ldr	x0, [sp, #24]
    1e24:	str	w1, [x0, #36]
    1e28:	ldr	x0, [sp, #24]
    1e2c:	ldr	x0, [x0]
    1e30:	ldr	x1, [x0]
    1e34:	add	x1, x1, #0x1
    1e38:	str	x1, [x0]
    1e3c:	ldr	x0, [sp, #24]
    1e40:	ldr	x0, [x0]
    1e44:	ldr	w1, [x0, #8]
    1e48:	sub	w1, w1, #0x1
    1e4c:	str	w1, [x0, #8]
    1e50:	ldr	x0, [sp, #24]
    1e54:	ldr	x0, [x0]
    1e58:	ldr	w1, [x0, #12]
    1e5c:	add	w1, w1, #0x1
    1e60:	str	w1, [x0, #12]
    1e64:	ldr	x0, [sp, #24]
    1e68:	ldr	x0, [x0]
    1e6c:	ldr	w0, [x0, #12]
    1e70:	cmp	w0, #0x0
    1e74:	b.ne	1d70 <BZ2_decompress+0x1ce0>  // b.any
    1e78:	ldr	x0, [sp, #24]
    1e7c:	ldr	x0, [x0]
    1e80:	ldr	w1, [x0, #16]
    1e84:	add	w1, w1, #0x1
    1e88:	str	w1, [x0, #16]
    1e8c:	b	1d70 <BZ2_decompress+0x1ce0>
    1e90:	ldr	w0, [sp, #380]
    1e94:	lsl	w1, w0, #4
    1e98:	ldr	w0, [sp, #376]
    1e9c:	add	w0, w1, w0
    1ea0:	ldr	x1, [sp, #24]
    1ea4:	sxtw	x0, w0
    1ea8:	add	x0, x1, x0
    1eac:	mov	w1, #0x1                   	// #1
    1eb0:	strb	w1, [x0, #3196]
    1eb4:	ldr	w0, [sp, #376]
    1eb8:	add	w0, w0, #0x1
    1ebc:	str	w0, [sp, #376]
    1ec0:	ldr	w0, [sp, #376]
    1ec4:	cmp	w0, #0xf
    1ec8:	b.le	1d64 <BZ2_decompress+0x1cd4>
    1ecc:	ldr	w0, [sp, #380]
    1ed0:	add	w0, w0, #0x1
    1ed4:	str	w0, [sp, #380]
    1ed8:	ldr	w0, [sp, #380]
    1edc:	cmp	w0, #0xf
    1ee0:	b.le	1d44 <BZ2_decompress+0x1cb4>
    1ee4:	ldr	x0, [sp, #24]
    1ee8:	bl	0 <makeMaps_d>
    1eec:	ldr	x0, [sp, #24]
    1ef0:	ldr	w0, [x0, #3192]
    1ef4:	cmp	w0, #0x0
    1ef8:	b.ne	1f08 <BZ2_decompress+0x1e78>  // b.any
    1efc:	mov	w0, #0xfffffffc            	// #-4
    1f00:	str	w0, [sp, #392]
    1f04:	b	5738 <BZ2_decompress+0x56a8>
    1f08:	ldr	x0, [sp, #24]
    1f0c:	ldr	w0, [x0, #3192]
    1f10:	add	w0, w0, #0x2
    1f14:	str	w0, [sp, #368]
    1f18:	ldr	x0, [sp, #24]
    1f1c:	mov	w1, #0x1e                  	// #30
    1f20:	str	w1, [x0, #8]
    1f24:	ldr	x0, [sp, #24]
    1f28:	ldr	w0, [x0, #36]
    1f2c:	cmp	w0, #0x2
    1f30:	b.le	1f84 <BZ2_decompress+0x1ef4>
    1f34:	ldr	x0, [sp, #24]
    1f38:	ldr	w1, [x0, #32]
    1f3c:	ldr	x0, [sp, #24]
    1f40:	ldr	w0, [x0, #36]
    1f44:	sub	w0, w0, #0x3
    1f48:	lsr	w0, w1, w0
    1f4c:	and	w0, w0, #0x7
    1f50:	str	w0, [sp, #152]
    1f54:	ldr	x0, [sp, #24]
    1f58:	ldr	w0, [x0, #36]
    1f5c:	sub	w1, w0, #0x3
    1f60:	ldr	x0, [sp, #24]
    1f64:	str	w1, [x0, #36]
    1f68:	ldr	w0, [sp, #152]
    1f6c:	str	w0, [sp, #364]
    1f70:	nop
    1f74:	ldr	w0, [sp, #364]
    1f78:	cmp	w0, #0x1
    1f7c:	b.le	2050 <BZ2_decompress+0x1fc0>
    1f80:	b	2044 <BZ2_decompress+0x1fb4>
    1f84:	ldr	x0, [sp, #24]
    1f88:	ldr	x0, [x0]
    1f8c:	ldr	w0, [x0, #8]
    1f90:	cmp	w0, #0x0
    1f94:	b.ne	1fa0 <BZ2_decompress+0x1f10>  // b.any
    1f98:	str	wzr, [sp, #392]
    1f9c:	b	5738 <BZ2_decompress+0x56a8>
    1fa0:	ldr	x0, [sp, #24]
    1fa4:	ldr	w0, [x0, #32]
    1fa8:	lsl	w0, w0, #8
    1fac:	ldr	x1, [sp, #24]
    1fb0:	ldr	x1, [x1]
    1fb4:	ldr	x1, [x1]
    1fb8:	ldrb	w1, [x1]
    1fbc:	orr	w1, w0, w1
    1fc0:	ldr	x0, [sp, #24]
    1fc4:	str	w1, [x0, #32]
    1fc8:	ldr	x0, [sp, #24]
    1fcc:	ldr	w0, [x0, #36]
    1fd0:	add	w1, w0, #0x8
    1fd4:	ldr	x0, [sp, #24]
    1fd8:	str	w1, [x0, #36]
    1fdc:	ldr	x0, [sp, #24]
    1fe0:	ldr	x0, [x0]
    1fe4:	ldr	x1, [x0]
    1fe8:	add	x1, x1, #0x1
    1fec:	str	x1, [x0]
    1ff0:	ldr	x0, [sp, #24]
    1ff4:	ldr	x0, [x0]
    1ff8:	ldr	w1, [x0, #8]
    1ffc:	sub	w1, w1, #0x1
    2000:	str	w1, [x0, #8]
    2004:	ldr	x0, [sp, #24]
    2008:	ldr	x0, [x0]
    200c:	ldr	w1, [x0, #12]
    2010:	add	w1, w1, #0x1
    2014:	str	w1, [x0, #12]
    2018:	ldr	x0, [sp, #24]
    201c:	ldr	x0, [x0]
    2020:	ldr	w0, [x0, #12]
    2024:	cmp	w0, #0x0
    2028:	b.ne	1f24 <BZ2_decompress+0x1e94>  // b.any
    202c:	ldr	x0, [sp, #24]
    2030:	ldr	x0, [x0]
    2034:	ldr	w1, [x0, #16]
    2038:	add	w1, w1, #0x1
    203c:	str	w1, [x0, #16]
    2040:	b	1f24 <BZ2_decompress+0x1e94>
    2044:	ldr	w0, [sp, #364]
    2048:	cmp	w0, #0x6
    204c:	b.le	205c <BZ2_decompress+0x1fcc>
    2050:	mov	w0, #0xfffffffc            	// #-4
    2054:	str	w0, [sp, #392]
    2058:	b	5738 <BZ2_decompress+0x56a8>
    205c:	ldr	x0, [sp, #24]
    2060:	mov	w1, #0x1f                  	// #31
    2064:	str	w1, [x0, #8]
    2068:	ldr	x0, [sp, #24]
    206c:	ldr	w0, [x0, #36]
    2070:	cmp	w0, #0xe
    2074:	b.le	20c8 <BZ2_decompress+0x2038>
    2078:	ldr	x0, [sp, #24]
    207c:	ldr	w1, [x0, #32]
    2080:	ldr	x0, [sp, #24]
    2084:	ldr	w0, [x0, #36]
    2088:	sub	w0, w0, #0xf
    208c:	lsr	w0, w1, w0
    2090:	and	w0, w0, #0x7fff
    2094:	str	w0, [sp, #148]
    2098:	ldr	x0, [sp, #24]
    209c:	ldr	w0, [x0, #36]
    20a0:	sub	w1, w0, #0xf
    20a4:	ldr	x0, [sp, #24]
    20a8:	str	w1, [x0, #36]
    20ac:	ldr	w0, [sp, #148]
    20b0:	str	w0, [sp, #360]
    20b4:	nop
    20b8:	ldr	w0, [sp, #360]
    20bc:	cmp	w0, #0x0
    20c0:	b.gt	2194 <BZ2_decompress+0x2104>
    20c4:	b	2188 <BZ2_decompress+0x20f8>
    20c8:	ldr	x0, [sp, #24]
    20cc:	ldr	x0, [x0]
    20d0:	ldr	w0, [x0, #8]
    20d4:	cmp	w0, #0x0
    20d8:	b.ne	20e4 <BZ2_decompress+0x2054>  // b.any
    20dc:	str	wzr, [sp, #392]
    20e0:	b	5738 <BZ2_decompress+0x56a8>
    20e4:	ldr	x0, [sp, #24]
    20e8:	ldr	w0, [x0, #32]
    20ec:	lsl	w0, w0, #8
    20f0:	ldr	x1, [sp, #24]
    20f4:	ldr	x1, [x1]
    20f8:	ldr	x1, [x1]
    20fc:	ldrb	w1, [x1]
    2100:	orr	w1, w0, w1
    2104:	ldr	x0, [sp, #24]
    2108:	str	w1, [x0, #32]
    210c:	ldr	x0, [sp, #24]
    2110:	ldr	w0, [x0, #36]
    2114:	add	w1, w0, #0x8
    2118:	ldr	x0, [sp, #24]
    211c:	str	w1, [x0, #36]
    2120:	ldr	x0, [sp, #24]
    2124:	ldr	x0, [x0]
    2128:	ldr	x1, [x0]
    212c:	add	x1, x1, #0x1
    2130:	str	x1, [x0]
    2134:	ldr	x0, [sp, #24]
    2138:	ldr	x0, [x0]
    213c:	ldr	w1, [x0, #8]
    2140:	sub	w1, w1, #0x1
    2144:	str	w1, [x0, #8]
    2148:	ldr	x0, [sp, #24]
    214c:	ldr	x0, [x0]
    2150:	ldr	w1, [x0, #12]
    2154:	add	w1, w1, #0x1
    2158:	str	w1, [x0, #12]
    215c:	ldr	x0, [sp, #24]
    2160:	ldr	x0, [x0]
    2164:	ldr	w0, [x0, #12]
    2168:	cmp	w0, #0x0
    216c:	b.ne	2068 <BZ2_decompress+0x1fd8>  // b.any
    2170:	ldr	x0, [sp, #24]
    2174:	ldr	x0, [x0]
    2178:	ldr	w1, [x0, #16]
    217c:	add	w1, w1, #0x1
    2180:	str	w1, [x0, #16]
    2184:	b	2068 <BZ2_decompress+0x1fd8>
    2188:	mov	w0, #0xfffffffc            	// #-4
    218c:	str	w0, [sp, #392]
    2190:	b	5738 <BZ2_decompress+0x56a8>
    2194:	str	wzr, [sp, #380]
    2198:	b	2330 <BZ2_decompress+0x22a0>
    219c:	str	wzr, [sp, #376]
    21a0:	ldr	x0, [sp, #24]
    21a4:	mov	w1, #0x20                  	// #32
    21a8:	str	w1, [x0, #8]
    21ac:	ldr	x0, [sp, #24]
    21b0:	ldr	w0, [x0, #36]
    21b4:	cmp	w0, #0x0
    21b8:	b.le	220c <BZ2_decompress+0x217c>
    21bc:	ldr	x0, [sp, #24]
    21c0:	ldr	w1, [x0, #32]
    21c4:	ldr	x0, [sp, #24]
    21c8:	ldr	w0, [x0, #36]
    21cc:	sub	w0, w0, #0x1
    21d0:	lsr	w0, w1, w0
    21d4:	and	w0, w0, #0x1
    21d8:	str	w0, [sp, #92]
    21dc:	ldr	x0, [sp, #24]
    21e0:	ldr	w0, [x0, #36]
    21e4:	sub	w1, w0, #0x1
    21e8:	ldr	x0, [sp, #24]
    21ec:	str	w1, [x0, #36]
    21f0:	ldr	w0, [sp, #92]
    21f4:	strb	w0, [sp, #399]
    21f8:	nop
    21fc:	ldrb	w0, [sp, #399]
    2200:	cmp	w0, #0x0
    2204:	b.ne	22cc <BZ2_decompress+0x223c>  // b.any
    2208:	b	22f4 <BZ2_decompress+0x2264>
    220c:	ldr	x0, [sp, #24]
    2210:	ldr	x0, [x0]
    2214:	ldr	w0, [x0, #8]
    2218:	cmp	w0, #0x0
    221c:	b.ne	2228 <BZ2_decompress+0x2198>  // b.any
    2220:	str	wzr, [sp, #392]
    2224:	b	5738 <BZ2_decompress+0x56a8>
    2228:	ldr	x0, [sp, #24]
    222c:	ldr	w0, [x0, #32]
    2230:	lsl	w0, w0, #8
    2234:	ldr	x1, [sp, #24]
    2238:	ldr	x1, [x1]
    223c:	ldr	x1, [x1]
    2240:	ldrb	w1, [x1]
    2244:	orr	w1, w0, w1
    2248:	ldr	x0, [sp, #24]
    224c:	str	w1, [x0, #32]
    2250:	ldr	x0, [sp, #24]
    2254:	ldr	w0, [x0, #36]
    2258:	add	w1, w0, #0x8
    225c:	ldr	x0, [sp, #24]
    2260:	str	w1, [x0, #36]
    2264:	ldr	x0, [sp, #24]
    2268:	ldr	x0, [x0]
    226c:	ldr	x1, [x0]
    2270:	add	x1, x1, #0x1
    2274:	str	x1, [x0]
    2278:	ldr	x0, [sp, #24]
    227c:	ldr	x0, [x0]
    2280:	ldr	w1, [x0, #8]
    2284:	sub	w1, w1, #0x1
    2288:	str	w1, [x0, #8]
    228c:	ldr	x0, [sp, #24]
    2290:	ldr	x0, [x0]
    2294:	ldr	w1, [x0, #12]
    2298:	add	w1, w1, #0x1
    229c:	str	w1, [x0, #12]
    22a0:	ldr	x0, [sp, #24]
    22a4:	ldr	x0, [x0]
    22a8:	ldr	w0, [x0, #12]
    22ac:	cmp	w0, #0x0
    22b0:	b.ne	21ac <BZ2_decompress+0x211c>  // b.any
    22b4:	ldr	x0, [sp, #24]
    22b8:	ldr	x0, [x0]
    22bc:	ldr	w1, [x0, #16]
    22c0:	add	w1, w1, #0x1
    22c4:	str	w1, [x0, #16]
    22c8:	b	21ac <BZ2_decompress+0x211c>
    22cc:	ldr	w0, [sp, #376]
    22d0:	add	w0, w0, #0x1
    22d4:	str	w0, [sp, #376]
    22d8:	ldr	w1, [sp, #376]
    22dc:	ldr	w0, [sp, #364]
    22e0:	cmp	w1, w0
    22e4:	b.lt	21a0 <BZ2_decompress+0x2110>  // b.tstop
    22e8:	mov	w0, #0xfffffffc            	// #-4
    22ec:	str	w0, [sp, #392]
    22f0:	b	5738 <BZ2_decompress+0x56a8>
    22f4:	ldr	w1, [sp, #380]
    22f8:	mov	w0, #0x4651                	// #18001
    22fc:	cmp	w1, w0
    2300:	b.gt	2324 <BZ2_decompress+0x2294>
    2304:	ldr	w0, [sp, #376]
    2308:	and	w2, w0, #0xff
    230c:	ldr	x1, [sp, #24]
    2310:	ldrsw	x0, [sp, #380]
    2314:	add	x0, x1, x0
    2318:	add	x0, x0, #0x6, lsl #12
    231c:	mov	w1, w2
    2320:	strb	w1, [x0, #1310]
    2324:	ldr	w0, [sp, #380]
    2328:	add	w0, w0, #0x1
    232c:	str	w0, [sp, #380]
    2330:	ldr	w1, [sp, #380]
    2334:	ldr	w0, [sp, #360]
    2338:	cmp	w1, w0
    233c:	b.lt	219c <BZ2_decompress+0x210c>  // b.tstop
    2340:	ldr	w1, [sp, #360]
    2344:	mov	w0, #0x4652                	// #18002
    2348:	cmp	w1, w0
    234c:	b.le	2358 <BZ2_decompress+0x22c8>
    2350:	mov	w0, #0x4652                	// #18002
    2354:	str	w0, [sp, #360]
    2358:	strb	wzr, [sp, #279]
    235c:	b	2380 <BZ2_decompress+0x22f0>
    2360:	ldrb	w0, [sp, #279]
    2364:	sxtw	x0, w0
    2368:	add	x1, sp, #0x28
    236c:	ldrb	w2, [sp, #279]
    2370:	strb	w2, [x1, x0]
    2374:	ldrb	w0, [sp, #279]
    2378:	add	w0, w0, #0x1
    237c:	strb	w0, [sp, #279]
    2380:	ldrb	w0, [sp, #279]
    2384:	ldr	w1, [sp, #364]
    2388:	cmp	w1, w0
    238c:	b.gt	2360 <BZ2_decompress+0x22d0>
    2390:	str	wzr, [sp, #380]
    2394:	b	2430 <BZ2_decompress+0x23a0>
    2398:	ldr	x1, [sp, #24]
    239c:	ldrsw	x0, [sp, #380]
    23a0:	add	x0, x1, x0
    23a4:	add	x0, x0, #0x6, lsl #12
    23a8:	ldrb	w0, [x0, #1310]
    23ac:	strb	w0, [sp, #279]
    23b0:	ldrb	w0, [sp, #279]
    23b4:	sxtw	x0, w0
    23b8:	add	x1, sp, #0x28
    23bc:	ldrb	w0, [x1, x0]
    23c0:	strb	w0, [sp, #147]
    23c4:	b	23f8 <BZ2_decompress+0x2368>
    23c8:	ldrb	w0, [sp, #279]
    23cc:	sub	w0, w0, #0x1
    23d0:	ldrb	w3, [sp, #279]
    23d4:	sxtw	x0, w0
    23d8:	add	x1, sp, #0x28
    23dc:	ldrb	w2, [x1, x0]
    23e0:	sxtw	x0, w3
    23e4:	add	x1, sp, #0x28
    23e8:	strb	w2, [x1, x0]
    23ec:	ldrb	w0, [sp, #279]
    23f0:	sub	w0, w0, #0x1
    23f4:	strb	w0, [sp, #279]
    23f8:	ldrb	w0, [sp, #279]
    23fc:	cmp	w0, #0x0
    2400:	b.ne	23c8 <BZ2_decompress+0x2338>  // b.any
    2404:	ldrb	w0, [sp, #147]
    2408:	strb	w0, [sp, #40]
    240c:	ldr	x1, [sp, #24]
    2410:	ldrsw	x0, [sp, #380]
    2414:	add	x0, x1, x0
    2418:	add	x0, x0, #0x1, lsl #12
    241c:	ldrb	w1, [sp, #147]
    2420:	strb	w1, [x0, #3788]
    2424:	ldr	w0, [sp, #380]
    2428:	add	w0, w0, #0x1
    242c:	str	w0, [sp, #380]
    2430:	ldr	w1, [sp, #380]
    2434:	ldr	w0, [sp, #360]
    2438:	cmp	w1, w0
    243c:	b.lt	2398 <BZ2_decompress+0x2308>  // b.tstop
    2440:	str	wzr, [sp, #372]
    2444:	b	2868 <BZ2_decompress+0x27d8>
    2448:	ldr	x0, [sp, #24]
    244c:	mov	w1, #0x21                  	// #33
    2450:	str	w1, [x0, #8]
    2454:	ldr	x0, [sp, #24]
    2458:	ldr	w0, [x0, #36]
    245c:	cmp	w0, #0x4
    2460:	b.le	24ac <BZ2_decompress+0x241c>
    2464:	ldr	x0, [sp, #24]
    2468:	ldr	w1, [x0, #32]
    246c:	ldr	x0, [sp, #24]
    2470:	ldr	w0, [x0, #36]
    2474:	sub	w0, w0, #0x5
    2478:	lsr	w0, w1, w0
    247c:	and	w0, w0, #0x1f
    2480:	str	w0, [sp, #104]
    2484:	ldr	x0, [sp, #24]
    2488:	ldr	w0, [x0, #36]
    248c:	sub	w1, w0, #0x5
    2490:	ldr	x0, [sp, #24]
    2494:	str	w1, [x0, #36]
    2498:	ldr	w0, [sp, #104]
    249c:	str	w0, [sp, #324]
    24a0:	nop
    24a4:	str	wzr, [sp, #380]
    24a8:	b	284c <BZ2_decompress+0x27bc>
    24ac:	ldr	x0, [sp, #24]
    24b0:	ldr	x0, [x0]
    24b4:	ldr	w0, [x0, #8]
    24b8:	cmp	w0, #0x0
    24bc:	b.ne	24c8 <BZ2_decompress+0x2438>  // b.any
    24c0:	str	wzr, [sp, #392]
    24c4:	b	5738 <BZ2_decompress+0x56a8>
    24c8:	ldr	x0, [sp, #24]
    24cc:	ldr	w0, [x0, #32]
    24d0:	lsl	w0, w0, #8
    24d4:	ldr	x1, [sp, #24]
    24d8:	ldr	x1, [x1]
    24dc:	ldr	x1, [x1]
    24e0:	ldrb	w1, [x1]
    24e4:	orr	w1, w0, w1
    24e8:	ldr	x0, [sp, #24]
    24ec:	str	w1, [x0, #32]
    24f0:	ldr	x0, [sp, #24]
    24f4:	ldr	w0, [x0, #36]
    24f8:	add	w1, w0, #0x8
    24fc:	ldr	x0, [sp, #24]
    2500:	str	w1, [x0, #36]
    2504:	ldr	x0, [sp, #24]
    2508:	ldr	x0, [x0]
    250c:	ldr	x1, [x0]
    2510:	add	x1, x1, #0x1
    2514:	str	x1, [x0]
    2518:	ldr	x0, [sp, #24]
    251c:	ldr	x0, [x0]
    2520:	ldr	w1, [x0, #8]
    2524:	sub	w1, w1, #0x1
    2528:	str	w1, [x0, #8]
    252c:	ldr	x0, [sp, #24]
    2530:	ldr	x0, [x0]
    2534:	ldr	w1, [x0, #12]
    2538:	add	w1, w1, #0x1
    253c:	str	w1, [x0, #12]
    2540:	ldr	x0, [sp, #24]
    2544:	ldr	x0, [x0]
    2548:	ldr	w0, [x0, #12]
    254c:	cmp	w0, #0x0
    2550:	b.ne	2454 <BZ2_decompress+0x23c4>  // b.any
    2554:	ldr	x0, [sp, #24]
    2558:	ldr	x0, [x0]
    255c:	ldr	w1, [x0, #16]
    2560:	add	w1, w1, #0x1
    2564:	str	w1, [x0, #16]
    2568:	b	2454 <BZ2_decompress+0x23c4>
    256c:	ldr	w0, [sp, #324]
    2570:	cmp	w0, #0x0
    2574:	b.le	2584 <BZ2_decompress+0x24f4>
    2578:	ldr	w0, [sp, #324]
    257c:	cmp	w0, #0x14
    2580:	b.le	2590 <BZ2_decompress+0x2500>
    2584:	mov	w0, #0xfffffffc            	// #-4
    2588:	str	w0, [sp, #392]
    258c:	b	5738 <BZ2_decompress+0x56a8>
    2590:	ldr	x0, [sp, #24]
    2594:	mov	w1, #0x22                  	// #34
    2598:	str	w1, [x0, #8]
    259c:	ldr	x0, [sp, #24]
    25a0:	ldr	w0, [x0, #36]
    25a4:	cmp	w0, #0x0
    25a8:	b.le	25fc <BZ2_decompress+0x256c>
    25ac:	ldr	x0, [sp, #24]
    25b0:	ldr	w1, [x0, #32]
    25b4:	ldr	x0, [sp, #24]
    25b8:	ldr	w0, [x0, #36]
    25bc:	sub	w0, w0, #0x1
    25c0:	lsr	w0, w1, w0
    25c4:	and	w0, w0, #0x1
    25c8:	str	w0, [sp, #100]
    25cc:	ldr	x0, [sp, #24]
    25d0:	ldr	w0, [x0, #36]
    25d4:	sub	w1, w0, #0x1
    25d8:	ldr	x0, [sp, #24]
    25dc:	str	w1, [x0, #36]
    25e0:	ldr	w0, [sp, #100]
    25e4:	strb	w0, [sp, #399]
    25e8:	nop
    25ec:	ldrb	w0, [sp, #399]
    25f0:	cmp	w0, #0x0
    25f4:	b.ne	26bc <BZ2_decompress+0x262c>  // b.any
    25f8:	b	2808 <BZ2_decompress+0x2778>
    25fc:	ldr	x0, [sp, #24]
    2600:	ldr	x0, [x0]
    2604:	ldr	w0, [x0, #8]
    2608:	cmp	w0, #0x0
    260c:	b.ne	2618 <BZ2_decompress+0x2588>  // b.any
    2610:	str	wzr, [sp, #392]
    2614:	b	5738 <BZ2_decompress+0x56a8>
    2618:	ldr	x0, [sp, #24]
    261c:	ldr	w0, [x0, #32]
    2620:	lsl	w0, w0, #8
    2624:	ldr	x1, [sp, #24]
    2628:	ldr	x1, [x1]
    262c:	ldr	x1, [x1]
    2630:	ldrb	w1, [x1]
    2634:	orr	w1, w0, w1
    2638:	ldr	x0, [sp, #24]
    263c:	str	w1, [x0, #32]
    2640:	ldr	x0, [sp, #24]
    2644:	ldr	w0, [x0, #36]
    2648:	add	w1, w0, #0x8
    264c:	ldr	x0, [sp, #24]
    2650:	str	w1, [x0, #36]
    2654:	ldr	x0, [sp, #24]
    2658:	ldr	x0, [x0]
    265c:	ldr	x1, [x0]
    2660:	add	x1, x1, #0x1
    2664:	str	x1, [x0]
    2668:	ldr	x0, [sp, #24]
    266c:	ldr	x0, [x0]
    2670:	ldr	w1, [x0, #8]
    2674:	sub	w1, w1, #0x1
    2678:	str	w1, [x0, #8]
    267c:	ldr	x0, [sp, #24]
    2680:	ldr	x0, [x0]
    2684:	ldr	w1, [x0, #12]
    2688:	add	w1, w1, #0x1
    268c:	str	w1, [x0, #12]
    2690:	ldr	x0, [sp, #24]
    2694:	ldr	x0, [x0]
    2698:	ldr	w0, [x0, #12]
    269c:	cmp	w0, #0x0
    26a0:	b.ne	259c <BZ2_decompress+0x250c>  // b.any
    26a4:	ldr	x0, [sp, #24]
    26a8:	ldr	x0, [x0]
    26ac:	ldr	w1, [x0, #16]
    26b0:	add	w1, w1, #0x1
    26b4:	str	w1, [x0, #16]
    26b8:	b	259c <BZ2_decompress+0x250c>
    26bc:	ldr	x0, [sp, #24]
    26c0:	mov	w1, #0x23                  	// #35
    26c4:	str	w1, [x0, #8]
    26c8:	ldr	x0, [sp, #24]
    26cc:	ldr	w0, [x0, #36]
    26d0:	cmp	w0, #0x0
    26d4:	b.le	2728 <BZ2_decompress+0x2698>
    26d8:	ldr	x0, [sp, #24]
    26dc:	ldr	w1, [x0, #32]
    26e0:	ldr	x0, [sp, #24]
    26e4:	ldr	w0, [x0, #36]
    26e8:	sub	w0, w0, #0x1
    26ec:	lsr	w0, w1, w0
    26f0:	and	w0, w0, #0x1
    26f4:	str	w0, [sp, #96]
    26f8:	ldr	x0, [sp, #24]
    26fc:	ldr	w0, [x0, #36]
    2700:	sub	w1, w0, #0x1
    2704:	ldr	x0, [sp, #24]
    2708:	str	w1, [x0, #36]
    270c:	ldr	w0, [sp, #96]
    2710:	strb	w0, [sp, #399]
    2714:	nop
    2718:	ldrb	w0, [sp, #399]
    271c:	cmp	w0, #0x0
    2720:	b.ne	27f8 <BZ2_decompress+0x2768>  // b.any
    2724:	b	27e8 <BZ2_decompress+0x2758>
    2728:	ldr	x0, [sp, #24]
    272c:	ldr	x0, [x0]
    2730:	ldr	w0, [x0, #8]
    2734:	cmp	w0, #0x0
    2738:	b.ne	2744 <BZ2_decompress+0x26b4>  // b.any
    273c:	str	wzr, [sp, #392]
    2740:	b	5738 <BZ2_decompress+0x56a8>
    2744:	ldr	x0, [sp, #24]
    2748:	ldr	w0, [x0, #32]
    274c:	lsl	w0, w0, #8
    2750:	ldr	x1, [sp, #24]
    2754:	ldr	x1, [x1]
    2758:	ldr	x1, [x1]
    275c:	ldrb	w1, [x1]
    2760:	orr	w1, w0, w1
    2764:	ldr	x0, [sp, #24]
    2768:	str	w1, [x0, #32]
    276c:	ldr	x0, [sp, #24]
    2770:	ldr	w0, [x0, #36]
    2774:	add	w1, w0, #0x8
    2778:	ldr	x0, [sp, #24]
    277c:	str	w1, [x0, #36]
    2780:	ldr	x0, [sp, #24]
    2784:	ldr	x0, [x0]
    2788:	ldr	x1, [x0]
    278c:	add	x1, x1, #0x1
    2790:	str	x1, [x0]
    2794:	ldr	x0, [sp, #24]
    2798:	ldr	x0, [x0]
    279c:	ldr	w1, [x0, #8]
    27a0:	sub	w1, w1, #0x1
    27a4:	str	w1, [x0, #8]
    27a8:	ldr	x0, [sp, #24]
    27ac:	ldr	x0, [x0]
    27b0:	ldr	w1, [x0, #12]
    27b4:	add	w1, w1, #0x1
    27b8:	str	w1, [x0, #12]
    27bc:	ldr	x0, [sp, #24]
    27c0:	ldr	x0, [x0]
    27c4:	ldr	w0, [x0, #12]
    27c8:	cmp	w0, #0x0
    27cc:	b.ne	26c8 <BZ2_decompress+0x2638>  // b.any
    27d0:	ldr	x0, [sp, #24]
    27d4:	ldr	x0, [x0]
    27d8:	ldr	w1, [x0, #16]
    27dc:	add	w1, w1, #0x1
    27e0:	str	w1, [x0, #16]
    27e4:	b	26c8 <BZ2_decompress+0x2638>
    27e8:	ldr	w0, [sp, #324]
    27ec:	add	w0, w0, #0x1
    27f0:	str	w0, [sp, #324]
    27f4:	b	256c <BZ2_decompress+0x24dc>
    27f8:	ldr	w0, [sp, #324]
    27fc:	sub	w0, w0, #0x1
    2800:	str	w0, [sp, #324]
    2804:	b	256c <BZ2_decompress+0x24dc>
    2808:	ldr	w0, [sp, #324]
    280c:	and	w4, w0, #0xff
    2810:	ldr	x3, [sp, #24]
    2814:	ldrsw	x2, [sp, #380]
    2818:	ldrsw	x1, [sp, #372]
    281c:	mov	x0, x1
    2820:	lsl	x0, x0, #7
    2824:	add	x0, x0, x1
    2828:	lsl	x0, x0, #1
    282c:	add	x0, x3, x0
    2830:	add	x0, x0, x2
    2834:	add	x0, x0, #0xa, lsl #12
    2838:	mov	w1, w4
    283c:	strb	w1, [x0, #2928]
    2840:	ldr	w0, [sp, #380]
    2844:	add	w0, w0, #0x1
    2848:	str	w0, [sp, #380]
    284c:	ldr	w1, [sp, #380]
    2850:	ldr	w0, [sp, #368]
    2854:	cmp	w1, w0
    2858:	b.lt	256c <BZ2_decompress+0x24dc>  // b.tstop
    285c:	ldr	w0, [sp, #372]
    2860:	add	w0, w0, #0x1
    2864:	str	w0, [sp, #372]
    2868:	ldr	w1, [sp, #372]
    286c:	ldr	w0, [sp, #364]
    2870:	cmp	w1, w0
    2874:	b.lt	2448 <BZ2_decompress+0x23b8>  // b.tstop
    2878:	str	wzr, [sp, #372]
    287c:	b	2a6c <BZ2_decompress+0x29dc>
    2880:	mov	w0, #0x20                  	// #32
    2884:	str	w0, [sp, #388]
    2888:	str	wzr, [sp, #384]
    288c:	str	wzr, [sp, #380]
    2890:	b	2978 <BZ2_decompress+0x28e8>
    2894:	ldr	x3, [sp, #24]
    2898:	ldrsw	x2, [sp, #380]
    289c:	ldrsw	x1, [sp, #372]
    28a0:	mov	x0, x1
    28a4:	lsl	x0, x0, #7
    28a8:	add	x0, x0, x1
    28ac:	lsl	x0, x0, #1
    28b0:	add	x0, x3, x0
    28b4:	add	x0, x0, x2
    28b8:	add	x0, x0, #0xa, lsl #12
    28bc:	ldrb	w0, [x0, #2928]
    28c0:	mov	w1, w0
    28c4:	ldr	w0, [sp, #384]
    28c8:	cmp	w0, w1
    28cc:	b.ge	2900 <BZ2_decompress+0x2870>  // b.tcont
    28d0:	ldr	x3, [sp, #24]
    28d4:	ldrsw	x2, [sp, #380]
    28d8:	ldrsw	x1, [sp, #372]
    28dc:	mov	x0, x1
    28e0:	lsl	x0, x0, #7
    28e4:	add	x0, x0, x1
    28e8:	lsl	x0, x0, #1
    28ec:	add	x0, x3, x0
    28f0:	add	x0, x0, x2
    28f4:	add	x0, x0, #0xa, lsl #12
    28f8:	ldrb	w0, [x0, #2928]
    28fc:	str	w0, [sp, #384]
    2900:	ldr	x3, [sp, #24]
    2904:	ldrsw	x2, [sp, #380]
    2908:	ldrsw	x1, [sp, #372]
    290c:	mov	x0, x1
    2910:	lsl	x0, x0, #7
    2914:	add	x0, x0, x1
    2918:	lsl	x0, x0, #1
    291c:	add	x0, x3, x0
    2920:	add	x0, x0, x2
    2924:	add	x0, x0, #0xa, lsl #12
    2928:	ldrb	w0, [x0, #2928]
    292c:	mov	w1, w0
    2930:	ldr	w0, [sp, #388]
    2934:	cmp	w0, w1
    2938:	b.le	296c <BZ2_decompress+0x28dc>
    293c:	ldr	x3, [sp, #24]
    2940:	ldrsw	x2, [sp, #380]
    2944:	ldrsw	x1, [sp, #372]
    2948:	mov	x0, x1
    294c:	lsl	x0, x0, #7
    2950:	add	x0, x0, x1
    2954:	lsl	x0, x0, #1
    2958:	add	x0, x3, x0
    295c:	add	x0, x0, x2
    2960:	add	x0, x0, #0xa, lsl #12
    2964:	ldrb	w0, [x0, #2928]
    2968:	str	w0, [sp, #388]
    296c:	ldr	w0, [sp, #380]
    2970:	add	w0, w0, #0x1
    2974:	str	w0, [sp, #380]
    2978:	ldr	w1, [sp, #380]
    297c:	ldr	w0, [sp, #368]
    2980:	cmp	w1, w0
    2984:	b.lt	2894 <BZ2_decompress+0x2804>  // b.tstop
    2988:	ldrsw	x1, [sp, #372]
    298c:	mov	x0, x1
    2990:	lsl	x0, x0, #7
    2994:	add	x0, x0, x1
    2998:	lsl	x0, x0, #3
    299c:	mov	x1, #0xb170                	// #45424
    29a0:	add	x0, x0, x1
    29a4:	ldr	x1, [sp, #24]
    29a8:	add	x0, x1, x0
    29ac:	add	x7, x0, #0xc
    29b0:	ldrsw	x1, [sp, #372]
    29b4:	mov	x0, x1
    29b8:	lsl	x0, x0, #7
    29bc:	add	x0, x0, x1
    29c0:	lsl	x0, x0, #3
    29c4:	mov	x1, #0xc9a0                	// #51616
    29c8:	add	x0, x0, x1
    29cc:	ldr	x1, [sp, #24]
    29d0:	add	x0, x1, x0
    29d4:	add	x8, x0, #0xc
    29d8:	ldrsw	x1, [sp, #372]
    29dc:	mov	x0, x1
    29e0:	lsl	x0, x0, #7
    29e4:	add	x0, x0, x1
    29e8:	lsl	x0, x0, #3
    29ec:	mov	x1, #0xe1d0                	// #57808
    29f0:	add	x0, x0, x1
    29f4:	ldr	x1, [sp, #24]
    29f8:	add	x0, x1, x0
    29fc:	add	x2, x0, #0xc
    2a00:	ldrsw	x1, [sp, #372]
    2a04:	mov	x0, x1
    2a08:	lsl	x0, x0, #7
    2a0c:	add	x0, x0, x1
    2a10:	lsl	x0, x0, #1
    2a14:	mov	x1, #0xab70                	// #43888
    2a18:	add	x0, x0, x1
    2a1c:	ldr	x1, [sp, #24]
    2a20:	add	x0, x1, x0
    2a24:	ldr	w6, [sp, #368]
    2a28:	ldr	w5, [sp, #384]
    2a2c:	ldr	w4, [sp, #388]
    2a30:	mov	x3, x0
    2a34:	mov	x1, x8
    2a38:	mov	x0, x7
    2a3c:	bl	0 <BZ2_hbCreateDecodeTables>
    2a40:	ldr	x1, [sp, #24]
    2a44:	ldrsw	x2, [sp, #372]
    2a48:	mov	x0, #0x3e80                	// #16000
    2a4c:	add	x0, x2, x0
    2a50:	lsl	x0, x0, #2
    2a54:	add	x0, x1, x0
    2a58:	ldr	w1, [sp, #388]
    2a5c:	str	w1, [x0, #12]
    2a60:	ldr	w0, [sp, #372]
    2a64:	add	w0, w0, #0x1
    2a68:	str	w0, [sp, #372]
    2a6c:	ldr	w1, [sp, #372]
    2a70:	ldr	w0, [sp, #364]
    2a74:	cmp	w1, w0
    2a78:	b.lt	2880 <BZ2_decompress+0x27f0>  // b.tstop
    2a7c:	ldr	x0, [sp, #24]
    2a80:	ldr	w0, [x0, #3192]
    2a84:	add	w0, w0, #0x1
    2a88:	str	w0, [sp, #356]
    2a8c:	ldr	x0, [sp, #24]
    2a90:	ldr	w1, [x0, #40]
    2a94:	mov	w0, #0x86a0                	// #34464
    2a98:	movk	w0, #0x1, lsl #16
    2a9c:	mul	w0, w1, w0
    2aa0:	str	w0, [sp, #340]
    2aa4:	mov	w0, #0xffffffff            	// #-1
    2aa8:	str	w0, [sp, #352]
    2aac:	str	wzr, [sp, #348]
    2ab0:	str	wzr, [sp, #380]
    2ab4:	b	2adc <BZ2_decompress+0x2a4c>
    2ab8:	ldr	x1, [sp, #24]
    2abc:	ldrsw	x0, [sp, #380]
    2ac0:	add	x0, x0, #0x10
    2ac4:	lsl	x0, x0, #2
    2ac8:	add	x0, x1, x0
    2acc:	str	wzr, [x0, #4]
    2ad0:	ldr	w0, [sp, #380]
    2ad4:	add	w0, w0, #0x1
    2ad8:	str	w0, [sp, #380]
    2adc:	ldr	w0, [sp, #380]
    2ae0:	cmp	w0, #0xff
    2ae4:	b.le	2ab8 <BZ2_decompress+0x2a28>
    2ae8:	mov	w0, #0xfff                 	// #4095
    2aec:	str	w0, [sp, #264]
    2af0:	mov	w0, #0xf                   	// #15
    2af4:	str	w0, [sp, #272]
    2af8:	b	2b8c <BZ2_decompress+0x2afc>
    2afc:	mov	w0, #0xf                   	// #15
    2b00:	str	w0, [sp, #268]
    2b04:	b	2b54 <BZ2_decompress+0x2ac4>
    2b08:	ldr	w0, [sp, #272]
    2b0c:	and	w0, w0, #0xff
    2b10:	ubfiz	w0, w0, #4, #4
    2b14:	and	w1, w0, #0xff
    2b18:	ldr	w0, [sp, #268]
    2b1c:	and	w0, w0, #0xff
    2b20:	add	w0, w1, w0
    2b24:	and	w2, w0, #0xff
    2b28:	ldr	x1, [sp, #24]
    2b2c:	ldrsw	x0, [sp, #264]
    2b30:	add	x0, x1, x0
    2b34:	mov	w1, w2
    2b38:	strb	w1, [x0, #3724]
    2b3c:	ldr	w0, [sp, #264]
    2b40:	sub	w0, w0, #0x1
    2b44:	str	w0, [sp, #264]
    2b48:	ldr	w0, [sp, #268]
    2b4c:	sub	w0, w0, #0x1
    2b50:	str	w0, [sp, #268]
    2b54:	ldr	w0, [sp, #268]
    2b58:	cmp	w0, #0x0
    2b5c:	b.ge	2b08 <BZ2_decompress+0x2a78>  // b.tcont
    2b60:	ldr	w0, [sp, #264]
    2b64:	add	w1, w0, #0x1
    2b68:	ldr	x2, [sp, #24]
    2b6c:	ldrsw	x0, [sp, #272]
    2b70:	add	x0, x0, #0x7a0
    2b74:	lsl	x0, x0, #2
    2b78:	add	x0, x2, x0
    2b7c:	str	w1, [x0, #12]
    2b80:	ldr	w0, [sp, #272]
    2b84:	sub	w0, w0, #0x1
    2b88:	str	w0, [sp, #272]
    2b8c:	ldr	w0, [sp, #272]
    2b90:	cmp	w0, #0x0
    2b94:	b.ge	2afc <BZ2_decompress+0x2a6c>  // b.tcont
    2b98:	str	wzr, [sp, #336]
    2b9c:	ldr	w0, [sp, #348]
    2ba0:	cmp	w0, #0x0
    2ba4:	b.ne	2c94 <BZ2_decompress+0x2c04>  // b.any
    2ba8:	ldr	w0, [sp, #352]
    2bac:	add	w0, w0, #0x1
    2bb0:	str	w0, [sp, #352]
    2bb4:	ldr	w1, [sp, #352]
    2bb8:	ldr	w0, [sp, #360]
    2bbc:	cmp	w1, w0
    2bc0:	b.lt	2bd0 <BZ2_decompress+0x2b40>  // b.tstop
    2bc4:	mov	w0, #0xfffffffc            	// #-4
    2bc8:	str	w0, [sp, #392]
    2bcc:	b	5738 <BZ2_decompress+0x56a8>
    2bd0:	mov	w0, #0x32                  	// #50
    2bd4:	str	w0, [sp, #348]
    2bd8:	ldr	x1, [sp, #24]
    2bdc:	ldrsw	x0, [sp, #352]
    2be0:	add	x0, x1, x0
    2be4:	add	x0, x0, #0x1, lsl #12
    2be8:	ldrb	w0, [x0, #3788]
    2bec:	str	w0, [sp, #308]
    2bf0:	ldr	x1, [sp, #24]
    2bf4:	ldrsw	x2, [sp, #308]
    2bf8:	mov	x0, #0x3e80                	// #16000
    2bfc:	add	x0, x2, x0
    2c00:	lsl	x0, x0, #2
    2c04:	add	x0, x1, x0
    2c08:	ldr	w0, [x0, #12]
    2c0c:	str	w0, [sp, #304]
    2c10:	ldrsw	x1, [sp, #308]
    2c14:	mov	x0, x1
    2c18:	lsl	x0, x0, #7
    2c1c:	add	x0, x0, x1
    2c20:	lsl	x0, x0, #3
    2c24:	mov	x1, #0xb170                	// #45424
    2c28:	add	x0, x0, x1
    2c2c:	ldr	x1, [sp, #24]
    2c30:	add	x0, x1, x0
    2c34:	add	x0, x0, #0xc
    2c38:	str	x0, [sp, #296]
    2c3c:	ldrsw	x1, [sp, #308]
    2c40:	mov	x0, x1
    2c44:	lsl	x0, x0, #7
    2c48:	add	x0, x0, x1
    2c4c:	lsl	x0, x0, #3
    2c50:	mov	x1, #0xe1d0                	// #57808
    2c54:	add	x0, x0, x1
    2c58:	ldr	x1, [sp, #24]
    2c5c:	add	x0, x1, x0
    2c60:	add	x0, x0, #0xc
    2c64:	str	x0, [sp, #280]
    2c68:	ldrsw	x1, [sp, #308]
    2c6c:	mov	x0, x1
    2c70:	lsl	x0, x0, #7
    2c74:	add	x0, x0, x1
    2c78:	lsl	x0, x0, #3
    2c7c:	mov	x1, #0xc9a0                	// #51616
    2c80:	add	x0, x0, x1
    2c84:	ldr	x1, [sp, #24]
    2c88:	add	x0, x1, x0
    2c8c:	add	x0, x0, #0xc
    2c90:	str	x0, [sp, #288]
    2c94:	ldr	w0, [sp, #348]
    2c98:	sub	w0, w0, #0x1
    2c9c:	str	w0, [sp, #348]
    2ca0:	ldr	w0, [sp, #304]
    2ca4:	str	w0, [sp, #320]
    2ca8:	ldr	x0, [sp, #24]
    2cac:	mov	w1, #0x24                  	// #36
    2cb0:	str	w1, [x0, #8]
    2cb4:	ldr	x0, [sp, #24]
    2cb8:	ldr	w0, [x0, #36]
    2cbc:	ldr	w1, [sp, #320]
    2cc0:	cmp	w1, w0
    2cc4:	b.gt	2d20 <BZ2_decompress+0x2c90>
    2cc8:	ldr	x0, [sp, #24]
    2ccc:	ldr	w1, [x0, #32]
    2cd0:	ldr	x0, [sp, #24]
    2cd4:	ldr	w2, [x0, #36]
    2cd8:	ldr	w0, [sp, #320]
    2cdc:	sub	w0, w2, w0
    2ce0:	lsr	w0, w1, w0
    2ce4:	ldr	w1, [sp, #320]
    2ce8:	mov	w2, #0x1                   	// #1
    2cec:	lsl	w1, w2, w1
    2cf0:	sub	w1, w1, #0x1
    2cf4:	and	w0, w0, w1
    2cf8:	str	w0, [sp, #140]
    2cfc:	ldr	x0, [sp, #24]
    2d00:	ldr	w1, [x0, #36]
    2d04:	ldr	w0, [sp, #320]
    2d08:	sub	w1, w1, w0
    2d0c:	ldr	x0, [sp, #24]
    2d10:	str	w1, [x0, #36]
    2d14:	ldr	w0, [sp, #140]
    2d18:	str	w0, [sp, #316]
    2d1c:	b	2de0 <BZ2_decompress+0x2d50>
    2d20:	ldr	x0, [sp, #24]
    2d24:	ldr	x0, [x0]
    2d28:	ldr	w0, [x0, #8]
    2d2c:	cmp	w0, #0x0
    2d30:	b.ne	2d3c <BZ2_decompress+0x2cac>  // b.any
    2d34:	str	wzr, [sp, #392]
    2d38:	b	5738 <BZ2_decompress+0x56a8>
    2d3c:	ldr	x0, [sp, #24]
    2d40:	ldr	w0, [x0, #32]
    2d44:	lsl	w0, w0, #8
    2d48:	ldr	x1, [sp, #24]
    2d4c:	ldr	x1, [x1]
    2d50:	ldr	x1, [x1]
    2d54:	ldrb	w1, [x1]
    2d58:	orr	w1, w0, w1
    2d5c:	ldr	x0, [sp, #24]
    2d60:	str	w1, [x0, #32]
    2d64:	ldr	x0, [sp, #24]
    2d68:	ldr	w0, [x0, #36]
    2d6c:	add	w1, w0, #0x8
    2d70:	ldr	x0, [sp, #24]
    2d74:	str	w1, [x0, #36]
    2d78:	ldr	x0, [sp, #24]
    2d7c:	ldr	x0, [x0]
    2d80:	ldr	x1, [x0]
    2d84:	add	x1, x1, #0x1
    2d88:	str	x1, [x0]
    2d8c:	ldr	x0, [sp, #24]
    2d90:	ldr	x0, [x0]
    2d94:	ldr	w1, [x0, #8]
    2d98:	sub	w1, w1, #0x1
    2d9c:	str	w1, [x0, #8]
    2da0:	ldr	x0, [sp, #24]
    2da4:	ldr	x0, [x0]
    2da8:	ldr	w1, [x0, #12]
    2dac:	add	w1, w1, #0x1
    2db0:	str	w1, [x0, #12]
    2db4:	ldr	x0, [sp, #24]
    2db8:	ldr	x0, [x0]
    2dbc:	ldr	w0, [x0, #12]
    2dc0:	cmp	w0, #0x0
    2dc4:	b.ne	2cb4 <BZ2_decompress+0x2c24>  // b.any
    2dc8:	ldr	x0, [sp, #24]
    2dcc:	ldr	x0, [x0]
    2dd0:	ldr	w1, [x0, #16]
    2dd4:	add	w1, w1, #0x1
    2dd8:	str	w1, [x0, #16]
    2ddc:	b	2cb4 <BZ2_decompress+0x2c24>
    2de0:	ldr	w0, [sp, #320]
    2de4:	cmp	w0, #0x14
    2de8:	b.le	2df8 <BZ2_decompress+0x2d68>
    2dec:	mov	w0, #0xfffffffc            	// #-4
    2df0:	str	w0, [sp, #392]
    2df4:	b	5738 <BZ2_decompress+0x56a8>
    2df8:	ldrsw	x0, [sp, #320]
    2dfc:	lsl	x0, x0, #2
    2e00:	ldr	x1, [sp, #296]
    2e04:	add	x0, x1, x0
    2e08:	ldr	w0, [x0]
    2e0c:	ldr	w1, [sp, #316]
    2e10:	cmp	w1, w0
    2e14:	b.le	2f58 <BZ2_decompress+0x2ec8>
    2e18:	ldr	w0, [sp, #320]
    2e1c:	add	w0, w0, #0x1
    2e20:	str	w0, [sp, #320]
    2e24:	ldr	x0, [sp, #24]
    2e28:	mov	w1, #0x25                  	// #37
    2e2c:	str	w1, [x0, #8]
    2e30:	ldr	x0, [sp, #24]
    2e34:	ldr	w0, [x0, #36]
    2e38:	cmp	w0, #0x0
    2e3c:	b.le	2e98 <BZ2_decompress+0x2e08>
    2e40:	ldr	x0, [sp, #24]
    2e44:	ldr	w1, [x0, #32]
    2e48:	ldr	x0, [sp, #24]
    2e4c:	ldr	w0, [x0, #36]
    2e50:	sub	w0, w0, #0x1
    2e54:	lsr	w0, w1, w0
    2e58:	and	w0, w0, #0x1
    2e5c:	str	w0, [sp, #136]
    2e60:	ldr	x0, [sp, #24]
    2e64:	ldr	w0, [x0, #36]
    2e68:	sub	w1, w0, #0x1
    2e6c:	ldr	x0, [sp, #24]
    2e70:	str	w1, [x0, #36]
    2e74:	ldr	w0, [sp, #136]
    2e78:	str	w0, [sp, #312]
    2e7c:	nop
    2e80:	ldr	w0, [sp, #316]
    2e84:	lsl	w0, w0, #1
    2e88:	ldr	w1, [sp, #312]
    2e8c:	orr	w0, w1, w0
    2e90:	str	w0, [sp, #316]
    2e94:	b	2de0 <BZ2_decompress+0x2d50>
    2e98:	ldr	x0, [sp, #24]
    2e9c:	ldr	x0, [x0]
    2ea0:	ldr	w0, [x0, #8]
    2ea4:	cmp	w0, #0x0
    2ea8:	b.ne	2eb4 <BZ2_decompress+0x2e24>  // b.any
    2eac:	str	wzr, [sp, #392]
    2eb0:	b	5738 <BZ2_decompress+0x56a8>
    2eb4:	ldr	x0, [sp, #24]
    2eb8:	ldr	w0, [x0, #32]
    2ebc:	lsl	w0, w0, #8
    2ec0:	ldr	x1, [sp, #24]
    2ec4:	ldr	x1, [x1]
    2ec8:	ldr	x1, [x1]
    2ecc:	ldrb	w1, [x1]
    2ed0:	orr	w1, w0, w1
    2ed4:	ldr	x0, [sp, #24]
    2ed8:	str	w1, [x0, #32]
    2edc:	ldr	x0, [sp, #24]
    2ee0:	ldr	w0, [x0, #36]
    2ee4:	add	w1, w0, #0x8
    2ee8:	ldr	x0, [sp, #24]
    2eec:	str	w1, [x0, #36]
    2ef0:	ldr	x0, [sp, #24]
    2ef4:	ldr	x0, [x0]
    2ef8:	ldr	x1, [x0]
    2efc:	add	x1, x1, #0x1
    2f00:	str	x1, [x0]
    2f04:	ldr	x0, [sp, #24]
    2f08:	ldr	x0, [x0]
    2f0c:	ldr	w1, [x0, #8]
    2f10:	sub	w1, w1, #0x1
    2f14:	str	w1, [x0, #8]
    2f18:	ldr	x0, [sp, #24]
    2f1c:	ldr	x0, [x0]
    2f20:	ldr	w1, [x0, #12]
    2f24:	add	w1, w1, #0x1
    2f28:	str	w1, [x0, #12]
    2f2c:	ldr	x0, [sp, #24]
    2f30:	ldr	x0, [x0]
    2f34:	ldr	w0, [x0, #12]
    2f38:	cmp	w0, #0x0
    2f3c:	b.ne	2e30 <BZ2_decompress+0x2da0>  // b.any
    2f40:	ldr	x0, [sp, #24]
    2f44:	ldr	x0, [x0]
    2f48:	ldr	w1, [x0, #16]
    2f4c:	add	w1, w1, #0x1
    2f50:	str	w1, [x0, #16]
    2f54:	b	2e30 <BZ2_decompress+0x2da0>
    2f58:	nop
    2f5c:	ldrsw	x0, [sp, #320]
    2f60:	lsl	x0, x0, #2
    2f64:	ldr	x1, [sp, #288]
    2f68:	add	x0, x1, x0
    2f6c:	ldr	w0, [x0]
    2f70:	ldr	w1, [sp, #316]
    2f74:	sub	w0, w1, w0
    2f78:	cmp	w0, #0x0
    2f7c:	b.lt	2fa4 <BZ2_decompress+0x2f14>  // b.tstop
    2f80:	ldrsw	x0, [sp, #320]
    2f84:	lsl	x0, x0, #2
    2f88:	ldr	x1, [sp, #288]
    2f8c:	add	x0, x1, x0
    2f90:	ldr	w0, [x0]
    2f94:	ldr	w1, [sp, #316]
    2f98:	sub	w0, w1, w0
    2f9c:	cmp	w0, #0x101
    2fa0:	b.le	2fb0 <BZ2_decompress+0x2f20>
    2fa4:	mov	w0, #0xfffffffc            	// #-4
    2fa8:	str	w0, [sp, #392]
    2fac:	b	5738 <BZ2_decompress+0x56a8>
    2fb0:	ldrsw	x0, [sp, #320]
    2fb4:	lsl	x0, x0, #2
    2fb8:	ldr	x1, [sp, #288]
    2fbc:	add	x0, x1, x0
    2fc0:	ldr	w0, [x0]
    2fc4:	ldr	w1, [sp, #316]
    2fc8:	sub	w0, w1, w0
    2fcc:	sxtw	x0, w0
    2fd0:	lsl	x0, x0, #2
    2fd4:	ldr	x1, [sp, #280]
    2fd8:	add	x0, x1, x0
    2fdc:	ldr	w0, [x0]
    2fe0:	str	w0, [sp, #344]
    2fe4:	ldr	w1, [sp, #344]
    2fe8:	ldr	w0, [sp, #356]
    2fec:	cmp	w1, w0
    2ff0:	b.eq	3fac <BZ2_decompress+0x3f1c>  // b.none
    2ff4:	ldr	w0, [sp, #344]
    2ff8:	cmp	w0, #0x0
    2ffc:	b.eq	300c <BZ2_decompress+0x2f7c>  // b.none
    3000:	ldr	w0, [sp, #344]
    3004:	cmp	w0, #0x1
    3008:	b.ne	3634 <BZ2_decompress+0x35a4>  // b.any
    300c:	mov	w0, #0xffffffff            	// #-1
    3010:	str	w0, [sp, #332]
    3014:	mov	w0, #0x1                   	// #1
    3018:	str	w0, [sp, #328]
    301c:	ldr	w1, [sp, #328]
    3020:	mov	w0, #0x1fffff              	// #2097151
    3024:	cmp	w1, w0
    3028:	b.le	3038 <BZ2_decompress+0x2fa8>
    302c:	mov	w0, #0xfffffffc            	// #-4
    3030:	str	w0, [sp, #392]
    3034:	b	5738 <BZ2_decompress+0x56a8>
    3038:	ldr	w0, [sp, #344]
    303c:	cmp	w0, #0x0
    3040:	b.ne	3058 <BZ2_decompress+0x2fc8>  // b.any
    3044:	ldr	w1, [sp, #332]
    3048:	ldr	w0, [sp, #328]
    304c:	add	w0, w1, w0
    3050:	str	w0, [sp, #332]
    3054:	b	3078 <BZ2_decompress+0x2fe8>
    3058:	ldr	w0, [sp, #344]
    305c:	cmp	w0, #0x1
    3060:	b.ne	3078 <BZ2_decompress+0x2fe8>  // b.any
    3064:	ldr	w0, [sp, #328]
    3068:	lsl	w0, w0, #1
    306c:	ldr	w1, [sp, #332]
    3070:	add	w0, w1, w0
    3074:	str	w0, [sp, #332]
    3078:	ldr	w0, [sp, #328]
    307c:	lsl	w0, w0, #1
    3080:	str	w0, [sp, #328]
    3084:	ldr	w0, [sp, #348]
    3088:	cmp	w0, #0x0
    308c:	b.ne	317c <BZ2_decompress+0x30ec>  // b.any
    3090:	ldr	w0, [sp, #352]
    3094:	add	w0, w0, #0x1
    3098:	str	w0, [sp, #352]
    309c:	ldr	w1, [sp, #352]
    30a0:	ldr	w0, [sp, #360]
    30a4:	cmp	w1, w0
    30a8:	b.lt	30b8 <BZ2_decompress+0x3028>  // b.tstop
    30ac:	mov	w0, #0xfffffffc            	// #-4
    30b0:	str	w0, [sp, #392]
    30b4:	b	5738 <BZ2_decompress+0x56a8>
    30b8:	mov	w0, #0x32                  	// #50
    30bc:	str	w0, [sp, #348]
    30c0:	ldr	x1, [sp, #24]
    30c4:	ldrsw	x0, [sp, #352]
    30c8:	add	x0, x1, x0
    30cc:	add	x0, x0, #0x1, lsl #12
    30d0:	ldrb	w0, [x0, #3788]
    30d4:	str	w0, [sp, #308]
    30d8:	ldr	x1, [sp, #24]
    30dc:	ldrsw	x2, [sp, #308]
    30e0:	mov	x0, #0x3e80                	// #16000
    30e4:	add	x0, x2, x0
    30e8:	lsl	x0, x0, #2
    30ec:	add	x0, x1, x0
    30f0:	ldr	w0, [x0, #12]
    30f4:	str	w0, [sp, #304]
    30f8:	ldrsw	x1, [sp, #308]
    30fc:	mov	x0, x1
    3100:	lsl	x0, x0, #7
    3104:	add	x0, x0, x1
    3108:	lsl	x0, x0, #3
    310c:	mov	x1, #0xb170                	// #45424
    3110:	add	x0, x0, x1
    3114:	ldr	x1, [sp, #24]
    3118:	add	x0, x1, x0
    311c:	add	x0, x0, #0xc
    3120:	str	x0, [sp, #296]
    3124:	ldrsw	x1, [sp, #308]
    3128:	mov	x0, x1
    312c:	lsl	x0, x0, #7
    3130:	add	x0, x0, x1
    3134:	lsl	x0, x0, #3
    3138:	mov	x1, #0xe1d0                	// #57808
    313c:	add	x0, x0, x1
    3140:	ldr	x1, [sp, #24]
    3144:	add	x0, x1, x0
    3148:	add	x0, x0, #0xc
    314c:	str	x0, [sp, #280]
    3150:	ldrsw	x1, [sp, #308]
    3154:	mov	x0, x1
    3158:	lsl	x0, x0, #7
    315c:	add	x0, x0, x1
    3160:	lsl	x0, x0, #3
    3164:	mov	x1, #0xc9a0                	// #51616
    3168:	add	x0, x0, x1
    316c:	ldr	x1, [sp, #24]
    3170:	add	x0, x1, x0
    3174:	add	x0, x0, #0xc
    3178:	str	x0, [sp, #288]
    317c:	ldr	w0, [sp, #348]
    3180:	sub	w0, w0, #0x1
    3184:	str	w0, [sp, #348]
    3188:	ldr	w0, [sp, #304]
    318c:	str	w0, [sp, #320]
    3190:	ldr	x0, [sp, #24]
    3194:	mov	w1, #0x26                  	// #38
    3198:	str	w1, [x0, #8]
    319c:	ldr	x0, [sp, #24]
    31a0:	ldr	w0, [x0, #36]
    31a4:	ldr	w1, [sp, #320]
    31a8:	cmp	w1, w0
    31ac:	b.gt	3208 <BZ2_decompress+0x3178>
    31b0:	ldr	x0, [sp, #24]
    31b4:	ldr	w1, [x0, #32]
    31b8:	ldr	x0, [sp, #24]
    31bc:	ldr	w2, [x0, #36]
    31c0:	ldr	w0, [sp, #320]
    31c4:	sub	w0, w2, w0
    31c8:	lsr	w0, w1, w0
    31cc:	ldr	w1, [sp, #320]
    31d0:	mov	w2, #0x1                   	// #1
    31d4:	lsl	w1, w2, w1
    31d8:	sub	w1, w1, #0x1
    31dc:	and	w0, w0, w1
    31e0:	str	w0, [sp, #112]
    31e4:	ldr	x0, [sp, #24]
    31e8:	ldr	w1, [x0, #36]
    31ec:	ldr	w0, [sp, #320]
    31f0:	sub	w1, w1, w0
    31f4:	ldr	x0, [sp, #24]
    31f8:	str	w1, [x0, #36]
    31fc:	ldr	w0, [sp, #112]
    3200:	str	w0, [sp, #316]
    3204:	b	32c8 <BZ2_decompress+0x3238>
    3208:	ldr	x0, [sp, #24]
    320c:	ldr	x0, [x0]
    3210:	ldr	w0, [x0, #8]
    3214:	cmp	w0, #0x0
    3218:	b.ne	3224 <BZ2_decompress+0x3194>  // b.any
    321c:	str	wzr, [sp, #392]
    3220:	b	5738 <BZ2_decompress+0x56a8>
    3224:	ldr	x0, [sp, #24]
    3228:	ldr	w0, [x0, #32]
    322c:	lsl	w0, w0, #8
    3230:	ldr	x1, [sp, #24]
    3234:	ldr	x1, [x1]
    3238:	ldr	x1, [x1]
    323c:	ldrb	w1, [x1]
    3240:	orr	w1, w0, w1
    3244:	ldr	x0, [sp, #24]
    3248:	str	w1, [x0, #32]
    324c:	ldr	x0, [sp, #24]
    3250:	ldr	w0, [x0, #36]
    3254:	add	w1, w0, #0x8
    3258:	ldr	x0, [sp, #24]
    325c:	str	w1, [x0, #36]
    3260:	ldr	x0, [sp, #24]
    3264:	ldr	x0, [x0]
    3268:	ldr	x1, [x0]
    326c:	add	x1, x1, #0x1
    3270:	str	x1, [x0]
    3274:	ldr	x0, [sp, #24]
    3278:	ldr	x0, [x0]
    327c:	ldr	w1, [x0, #8]
    3280:	sub	w1, w1, #0x1
    3284:	str	w1, [x0, #8]
    3288:	ldr	x0, [sp, #24]
    328c:	ldr	x0, [x0]
    3290:	ldr	w1, [x0, #12]
    3294:	add	w1, w1, #0x1
    3298:	str	w1, [x0, #12]
    329c:	ldr	x0, [sp, #24]
    32a0:	ldr	x0, [x0]
    32a4:	ldr	w0, [x0, #12]
    32a8:	cmp	w0, #0x0
    32ac:	b.ne	319c <BZ2_decompress+0x310c>  // b.any
    32b0:	ldr	x0, [sp, #24]
    32b4:	ldr	x0, [x0]
    32b8:	ldr	w1, [x0, #16]
    32bc:	add	w1, w1, #0x1
    32c0:	str	w1, [x0, #16]
    32c4:	b	319c <BZ2_decompress+0x310c>
    32c8:	ldr	w0, [sp, #320]
    32cc:	cmp	w0, #0x14
    32d0:	b.le	32e0 <BZ2_decompress+0x3250>
    32d4:	mov	w0, #0xfffffffc            	// #-4
    32d8:	str	w0, [sp, #392]
    32dc:	b	5738 <BZ2_decompress+0x56a8>
    32e0:	ldrsw	x0, [sp, #320]
    32e4:	lsl	x0, x0, #2
    32e8:	ldr	x1, [sp, #296]
    32ec:	add	x0, x1, x0
    32f0:	ldr	w0, [x0]
    32f4:	ldr	w1, [sp, #316]
    32f8:	cmp	w1, w0
    32fc:	b.le	3440 <BZ2_decompress+0x33b0>
    3300:	ldr	w0, [sp, #320]
    3304:	add	w0, w0, #0x1
    3308:	str	w0, [sp, #320]
    330c:	ldr	x0, [sp, #24]
    3310:	mov	w1, #0x27                  	// #39
    3314:	str	w1, [x0, #8]
    3318:	ldr	x0, [sp, #24]
    331c:	ldr	w0, [x0, #36]
    3320:	cmp	w0, #0x0
    3324:	b.le	3380 <BZ2_decompress+0x32f0>
    3328:	ldr	x0, [sp, #24]
    332c:	ldr	w1, [x0, #32]
    3330:	ldr	x0, [sp, #24]
    3334:	ldr	w0, [x0, #36]
    3338:	sub	w0, w0, #0x1
    333c:	lsr	w0, w1, w0
    3340:	and	w0, w0, #0x1
    3344:	str	w0, [sp, #108]
    3348:	ldr	x0, [sp, #24]
    334c:	ldr	w0, [x0, #36]
    3350:	sub	w1, w0, #0x1
    3354:	ldr	x0, [sp, #24]
    3358:	str	w1, [x0, #36]
    335c:	ldr	w0, [sp, #108]
    3360:	str	w0, [sp, #312]
    3364:	nop
    3368:	ldr	w0, [sp, #316]
    336c:	lsl	w0, w0, #1
    3370:	ldr	w1, [sp, #312]
    3374:	orr	w0, w1, w0
    3378:	str	w0, [sp, #316]
    337c:	b	32c8 <BZ2_decompress+0x3238>
    3380:	ldr	x0, [sp, #24]
    3384:	ldr	x0, [x0]
    3388:	ldr	w0, [x0, #8]
    338c:	cmp	w0, #0x0
    3390:	b.ne	339c <BZ2_decompress+0x330c>  // b.any
    3394:	str	wzr, [sp, #392]
    3398:	b	5738 <BZ2_decompress+0x56a8>
    339c:	ldr	x0, [sp, #24]
    33a0:	ldr	w0, [x0, #32]
    33a4:	lsl	w0, w0, #8
    33a8:	ldr	x1, [sp, #24]
    33ac:	ldr	x1, [x1]
    33b0:	ldr	x1, [x1]
    33b4:	ldrb	w1, [x1]
    33b8:	orr	w1, w0, w1
    33bc:	ldr	x0, [sp, #24]
    33c0:	str	w1, [x0, #32]
    33c4:	ldr	x0, [sp, #24]
    33c8:	ldr	w0, [x0, #36]
    33cc:	add	w1, w0, #0x8
    33d0:	ldr	x0, [sp, #24]
    33d4:	str	w1, [x0, #36]
    33d8:	ldr	x0, [sp, #24]
    33dc:	ldr	x0, [x0]
    33e0:	ldr	x1, [x0]
    33e4:	add	x1, x1, #0x1
    33e8:	str	x1, [x0]
    33ec:	ldr	x0, [sp, #24]
    33f0:	ldr	x0, [x0]
    33f4:	ldr	w1, [x0, #8]
    33f8:	sub	w1, w1, #0x1
    33fc:	str	w1, [x0, #8]
    3400:	ldr	x0, [sp, #24]
    3404:	ldr	x0, [x0]
    3408:	ldr	w1, [x0, #12]
    340c:	add	w1, w1, #0x1
    3410:	str	w1, [x0, #12]
    3414:	ldr	x0, [sp, #24]
    3418:	ldr	x0, [x0]
    341c:	ldr	w0, [x0, #12]
    3420:	cmp	w0, #0x0
    3424:	b.ne	3318 <BZ2_decompress+0x3288>  // b.any
    3428:	ldr	x0, [sp, #24]
    342c:	ldr	x0, [x0]
    3430:	ldr	w1, [x0, #16]
    3434:	add	w1, w1, #0x1
    3438:	str	w1, [x0, #16]
    343c:	b	3318 <BZ2_decompress+0x3288>
    3440:	nop
    3444:	ldrsw	x0, [sp, #320]
    3448:	lsl	x0, x0, #2
    344c:	ldr	x1, [sp, #288]
    3450:	add	x0, x1, x0
    3454:	ldr	w0, [x0]
    3458:	ldr	w1, [sp, #316]
    345c:	sub	w0, w1, w0
    3460:	cmp	w0, #0x0
    3464:	b.lt	348c <BZ2_decompress+0x33fc>  // b.tstop
    3468:	ldrsw	x0, [sp, #320]
    346c:	lsl	x0, x0, #2
    3470:	ldr	x1, [sp, #288]
    3474:	add	x0, x1, x0
    3478:	ldr	w0, [x0]
    347c:	ldr	w1, [sp, #316]
    3480:	sub	w0, w1, w0
    3484:	cmp	w0, #0x101
    3488:	b.le	3498 <BZ2_decompress+0x3408>
    348c:	mov	w0, #0xfffffffc            	// #-4
    3490:	str	w0, [sp, #392]
    3494:	b	5738 <BZ2_decompress+0x56a8>
    3498:	ldrsw	x0, [sp, #320]
    349c:	lsl	x0, x0, #2
    34a0:	ldr	x1, [sp, #288]
    34a4:	add	x0, x1, x0
    34a8:	ldr	w0, [x0]
    34ac:	ldr	w1, [sp, #316]
    34b0:	sub	w0, w1, w0
    34b4:	sxtw	x0, w0
    34b8:	lsl	x0, x0, #2
    34bc:	ldr	x1, [sp, #280]
    34c0:	add	x0, x1, x0
    34c4:	ldr	w0, [x0]
    34c8:	str	w0, [sp, #344]
    34cc:	ldr	w0, [sp, #344]
    34d0:	cmp	w0, #0x0
    34d4:	b.eq	301c <BZ2_decompress+0x2f8c>  // b.none
    34d8:	ldr	w0, [sp, #344]
    34dc:	cmp	w0, #0x1
    34e0:	b.eq	301c <BZ2_decompress+0x2f8c>  // b.none
    34e4:	ldr	w0, [sp, #332]
    34e8:	add	w0, w0, #0x1
    34ec:	str	w0, [sp, #332]
    34f0:	ldr	x0, [sp, #24]
    34f4:	ldr	w0, [x0, #7820]
    34f8:	ldr	x1, [sp, #24]
    34fc:	sxtw	x0, w0
    3500:	add	x0, x1, x0
    3504:	ldrb	w0, [x0, #3724]
    3508:	ldr	x1, [sp, #24]
    350c:	sxtw	x0, w0
    3510:	add	x0, x1, x0
    3514:	ldrb	w0, [x0, #3468]
    3518:	strb	w0, [sp, #399]
    351c:	ldrb	w0, [sp, #399]
    3520:	ldr	x1, [sp, #24]
    3524:	sxtw	x0, w0
    3528:	add	x0, x0, #0x10
    352c:	lsl	x0, x0, #2
    3530:	add	x0, x1, x0
    3534:	ldr	w1, [x0, #4]
    3538:	ldrb	w3, [sp, #399]
    353c:	ldr	w0, [sp, #332]
    3540:	add	w1, w1, w0
    3544:	ldr	x2, [sp, #24]
    3548:	sxtw	x0, w3
    354c:	add	x0, x0, #0x10
    3550:	lsl	x0, x0, #2
    3554:	add	x0, x2, x0
    3558:	str	w1, [x0, #4]
    355c:	ldr	x0, [sp, #24]
    3560:	ldrb	w0, [x0, #44]
    3564:	cmp	w0, #0x0
    3568:	b.eq	3624 <BZ2_decompress+0x3594>  // b.none
    356c:	b	35c4 <BZ2_decompress+0x3534>
    3570:	ldr	w1, [sp, #336]
    3574:	ldr	w0, [sp, #340]
    3578:	cmp	w1, w0
    357c:	b.lt	358c <BZ2_decompress+0x34fc>  // b.tstop
    3580:	mov	w0, #0xfffffffc            	// #-4
    3584:	str	w0, [sp, #392]
    3588:	b	5738 <BZ2_decompress+0x56a8>
    358c:	ldr	x0, [sp, #24]
    3590:	ldr	x1, [x0, #3160]
    3594:	ldrsw	x0, [sp, #336]
    3598:	lsl	x0, x0, #1
    359c:	add	x0, x1, x0
    35a0:	ldrb	w1, [sp, #399]
    35a4:	and	w1, w1, #0xffff
    35a8:	strh	w1, [x0]
    35ac:	ldr	w0, [sp, #336]
    35b0:	add	w0, w0, #0x1
    35b4:	str	w0, [sp, #336]
    35b8:	ldr	w0, [sp, #332]
    35bc:	sub	w0, w0, #0x1
    35c0:	str	w0, [sp, #332]
    35c4:	ldr	w0, [sp, #332]
    35c8:	cmp	w0, #0x0
    35cc:	b.gt	3570 <BZ2_decompress+0x34e0>
    35d0:	b	3fa8 <BZ2_decompress+0x3f18>
    35d4:	ldr	w1, [sp, #336]
    35d8:	ldr	w0, [sp, #340]
    35dc:	cmp	w1, w0
    35e0:	b.lt	35f0 <BZ2_decompress+0x3560>  // b.tstop
    35e4:	mov	w0, #0xfffffffc            	// #-4
    35e8:	str	w0, [sp, #392]
    35ec:	b	5738 <BZ2_decompress+0x56a8>
    35f0:	ldr	x0, [sp, #24]
    35f4:	ldr	x1, [x0, #3152]
    35f8:	ldrsw	x0, [sp, #336]
    35fc:	lsl	x0, x0, #2
    3600:	add	x0, x1, x0
    3604:	ldrb	w1, [sp, #399]
    3608:	str	w1, [x0]
    360c:	ldr	w0, [sp, #336]
    3610:	add	w0, w0, #0x1
    3614:	str	w0, [sp, #336]
    3618:	ldr	w0, [sp, #332]
    361c:	sub	w0, w0, #0x1
    3620:	str	w0, [sp, #332]
    3624:	ldr	w0, [sp, #332]
    3628:	cmp	w0, #0x0
    362c:	b.gt	35d4 <BZ2_decompress+0x3544>
    3630:	b	3fa8 <BZ2_decompress+0x3f18>
    3634:	ldr	w1, [sp, #336]
    3638:	ldr	w0, [sp, #340]
    363c:	cmp	w1, w0
    3640:	b.lt	3650 <BZ2_decompress+0x35c0>  // b.tstop
    3644:	mov	w0, #0xfffffffc            	// #-4
    3648:	str	w0, [sp, #392]
    364c:	b	5738 <BZ2_decompress+0x56a8>
    3650:	ldr	w0, [sp, #344]
    3654:	sub	w0, w0, #0x1
    3658:	str	w0, [sp, #240]
    365c:	ldr	w0, [sp, #240]
    3660:	cmp	w0, #0xf
    3664:	b.hi	37fc <BZ2_decompress+0x376c>  // b.pmore
    3668:	ldr	x0, [sp, #24]
    366c:	ldr	w0, [x0, #7820]
    3670:	str	w0, [sp, #248]
    3674:	ldr	w1, [sp, #248]
    3678:	ldr	w0, [sp, #240]
    367c:	add	w0, w1, w0
    3680:	ldr	x1, [sp, #24]
    3684:	mov	w0, w0
    3688:	add	x0, x1, x0
    368c:	ldrb	w0, [x0, #3724]
    3690:	strb	w0, [sp, #399]
    3694:	b	377c <BZ2_decompress+0x36ec>
    3698:	ldr	w1, [sp, #248]
    369c:	ldr	w0, [sp, #240]
    36a0:	add	w0, w1, w0
    36a4:	str	w0, [sp, #128]
    36a8:	ldr	w0, [sp, #128]
    36ac:	sub	w0, w0, #0x1
    36b0:	ldr	x1, [sp, #24]
    36b4:	sxtw	x0, w0
    36b8:	add	x0, x1, x0
    36bc:	ldrb	w2, [x0, #3724]
    36c0:	ldr	x1, [sp, #24]
    36c4:	ldrsw	x0, [sp, #128]
    36c8:	add	x0, x1, x0
    36cc:	mov	w1, w2
    36d0:	strb	w1, [x0, #3724]
    36d4:	ldr	w0, [sp, #128]
    36d8:	sub	w2, w0, #0x2
    36dc:	ldr	w0, [sp, #128]
    36e0:	sub	w3, w0, #0x1
    36e4:	ldr	x1, [sp, #24]
    36e8:	sxtw	x0, w2
    36ec:	add	x0, x1, x0
    36f0:	ldrb	w2, [x0, #3724]
    36f4:	ldr	x1, [sp, #24]
    36f8:	sxtw	x0, w3
    36fc:	add	x0, x1, x0
    3700:	mov	w1, w2
    3704:	strb	w1, [x0, #3724]
    3708:	ldr	w0, [sp, #128]
    370c:	sub	w2, w0, #0x3
    3710:	ldr	w0, [sp, #128]
    3714:	sub	w3, w0, #0x2
    3718:	ldr	x1, [sp, #24]
    371c:	sxtw	x0, w2
    3720:	add	x0, x1, x0
    3724:	ldrb	w2, [x0, #3724]
    3728:	ldr	x1, [sp, #24]
    372c:	sxtw	x0, w3
    3730:	add	x0, x1, x0
    3734:	mov	w1, w2
    3738:	strb	w1, [x0, #3724]
    373c:	ldr	w0, [sp, #128]
    3740:	sub	w2, w0, #0x4
    3744:	ldr	w0, [sp, #128]
    3748:	sub	w3, w0, #0x3
    374c:	ldr	x1, [sp, #24]
    3750:	sxtw	x0, w2
    3754:	add	x0, x1, x0
    3758:	ldrb	w2, [x0, #3724]
    375c:	ldr	x1, [sp, #24]
    3760:	sxtw	x0, w3
    3764:	add	x0, x1, x0
    3768:	mov	w1, w2
    376c:	strb	w1, [x0, #3724]
    3770:	ldr	w0, [sp, #240]
    3774:	sub	w0, w0, #0x4
    3778:	str	w0, [sp, #240]
    377c:	ldr	w0, [sp, #240]
    3780:	cmp	w0, #0x3
    3784:	b.hi	3698 <BZ2_decompress+0x3608>  // b.pmore
    3788:	b	37d8 <BZ2_decompress+0x3748>
    378c:	ldr	w1, [sp, #248]
    3790:	ldr	w0, [sp, #240]
    3794:	add	w0, w1, w0
    3798:	sub	w2, w0, #0x1
    379c:	ldr	w1, [sp, #248]
    37a0:	ldr	w0, [sp, #240]
    37a4:	add	w3, w1, w0
    37a8:	ldr	x1, [sp, #24]
    37ac:	mov	w0, w2
    37b0:	add	x0, x1, x0
    37b4:	ldrb	w2, [x0, #3724]
    37b8:	ldr	x1, [sp, #24]
    37bc:	mov	w0, w3
    37c0:	add	x0, x1, x0
    37c4:	mov	w1, w2
    37c8:	strb	w1, [x0, #3724]
    37cc:	ldr	w0, [sp, #240]
    37d0:	sub	w0, w0, #0x1
    37d4:	str	w0, [sp, #240]
    37d8:	ldr	w0, [sp, #240]
    37dc:	cmp	w0, #0x0
    37e0:	b.ne	378c <BZ2_decompress+0x36fc>  // b.any
    37e4:	ldr	x1, [sp, #24]
    37e8:	ldrsw	x0, [sp, #248]
    37ec:	add	x0, x1, x0
    37f0:	ldrb	w1, [sp, #399]
    37f4:	strb	w1, [x0, #3724]
    37f8:	b	3a90 <BZ2_decompress+0x3a00>
    37fc:	ldr	w0, [sp, #240]
    3800:	lsr	w0, w0, #4
    3804:	str	w0, [sp, #244]
    3808:	ldr	w0, [sp, #240]
    380c:	and	w0, w0, #0xf
    3810:	str	w0, [sp, #132]
    3814:	ldr	x1, [sp, #24]
    3818:	ldrsw	x0, [sp, #244]
    381c:	add	x0, x0, #0x7a0
    3820:	lsl	x0, x0, #2
    3824:	add	x0, x1, x0
    3828:	ldr	w0, [x0, #12]
    382c:	ldr	w1, [sp, #132]
    3830:	add	w0, w1, w0
    3834:	str	w0, [sp, #248]
    3838:	ldr	x1, [sp, #24]
    383c:	ldrsw	x0, [sp, #248]
    3840:	add	x0, x1, x0
    3844:	ldrb	w0, [x0, #3724]
    3848:	strb	w0, [sp, #399]
    384c:	b	3888 <BZ2_decompress+0x37f8>
    3850:	ldr	w0, [sp, #248]
    3854:	sub	w0, w0, #0x1
    3858:	ldr	x1, [sp, #24]
    385c:	sxtw	x0, w0
    3860:	add	x0, x1, x0
    3864:	ldrb	w2, [x0, #3724]
    3868:	ldr	x1, [sp, #24]
    386c:	ldrsw	x0, [sp, #248]
    3870:	add	x0, x1, x0
    3874:	mov	w1, w2
    3878:	strb	w1, [x0, #3724]
    387c:	ldr	w0, [sp, #248]
    3880:	sub	w0, w0, #0x1
    3884:	str	w0, [sp, #248]
    3888:	ldr	x1, [sp, #24]
    388c:	ldrsw	x0, [sp, #244]
    3890:	add	x0, x0, #0x7a0
    3894:	lsl	x0, x0, #2
    3898:	add	x0, x1, x0
    389c:	ldr	w0, [x0, #12]
    38a0:	ldr	w1, [sp, #248]
    38a4:	cmp	w1, w0
    38a8:	b.gt	3850 <BZ2_decompress+0x37c0>
    38ac:	ldr	x1, [sp, #24]
    38b0:	ldrsw	x0, [sp, #244]
    38b4:	add	x0, x0, #0x7a0
    38b8:	lsl	x0, x0, #2
    38bc:	add	x0, x1, x0
    38c0:	ldr	w0, [x0, #12]
    38c4:	add	w1, w0, #0x1
    38c8:	ldr	x2, [sp, #24]
    38cc:	ldrsw	x0, [sp, #244]
    38d0:	add	x0, x0, #0x7a0
    38d4:	lsl	x0, x0, #2
    38d8:	add	x0, x2, x0
    38dc:	str	w1, [x0, #12]
    38e0:	b	3984 <BZ2_decompress+0x38f4>
    38e4:	ldr	x1, [sp, #24]
    38e8:	ldrsw	x0, [sp, #244]
    38ec:	add	x0, x0, #0x7a0
    38f0:	lsl	x0, x0, #2
    38f4:	add	x0, x1, x0
    38f8:	ldr	w0, [x0, #12]
    38fc:	sub	w1, w0, #0x1
    3900:	ldr	x2, [sp, #24]
    3904:	ldrsw	x0, [sp, #244]
    3908:	add	x0, x0, #0x7a0
    390c:	lsl	x0, x0, #2
    3910:	add	x0, x2, x0
    3914:	str	w1, [x0, #12]
    3918:	ldr	w0, [sp, #244]
    391c:	sub	w0, w0, #0x1
    3920:	ldr	x1, [sp, #24]
    3924:	sxtw	x0, w0
    3928:	add	x0, x0, #0x7a0
    392c:	lsl	x0, x0, #2
    3930:	add	x0, x1, x0
    3934:	ldr	w0, [x0, #12]
    3938:	add	w2, w0, #0xf
    393c:	ldr	x1, [sp, #24]
    3940:	ldrsw	x0, [sp, #244]
    3944:	add	x0, x0, #0x7a0
    3948:	lsl	x0, x0, #2
    394c:	add	x0, x1, x0
    3950:	ldr	w3, [x0, #12]
    3954:	ldr	x1, [sp, #24]
    3958:	sxtw	x0, w2
    395c:	add	x0, x1, x0
    3960:	ldrb	w2, [x0, #3724]
    3964:	ldr	x1, [sp, #24]
    3968:	sxtw	x0, w3
    396c:	add	x0, x1, x0
    3970:	mov	w1, w2
    3974:	strb	w1, [x0, #3724]
    3978:	ldr	w0, [sp, #244]
    397c:	sub	w0, w0, #0x1
    3980:	str	w0, [sp, #244]
    3984:	ldr	w0, [sp, #244]
    3988:	cmp	w0, #0x0
    398c:	b.gt	38e4 <BZ2_decompress+0x3854>
    3990:	ldr	x0, [sp, #24]
    3994:	ldr	w0, [x0, #7820]
    3998:	sub	w1, w0, #0x1
    399c:	ldr	x0, [sp, #24]
    39a0:	str	w1, [x0, #7820]
    39a4:	ldr	x0, [sp, #24]
    39a8:	ldr	w0, [x0, #7820]
    39ac:	ldr	x1, [sp, #24]
    39b0:	sxtw	x0, w0
    39b4:	add	x0, x1, x0
    39b8:	ldrb	w1, [sp, #399]
    39bc:	strb	w1, [x0, #3724]
    39c0:	ldr	x0, [sp, #24]
    39c4:	ldr	w0, [x0, #7820]
    39c8:	cmp	w0, #0x0
    39cc:	b.ne	3a90 <BZ2_decompress+0x3a00>  // b.any
    39d0:	mov	w0, #0xfff                 	// #4095
    39d4:	str	w0, [sp, #252]
    39d8:	mov	w0, #0xf                   	// #15
    39dc:	str	w0, [sp, #260]
    39e0:	b	3a84 <BZ2_decompress+0x39f4>
    39e4:	mov	w0, #0xf                   	// #15
    39e8:	str	w0, [sp, #256]
    39ec:	b	3a4c <BZ2_decompress+0x39bc>
    39f0:	ldr	x1, [sp, #24]
    39f4:	ldrsw	x0, [sp, #260]
    39f8:	add	x0, x0, #0x7a0
    39fc:	lsl	x0, x0, #2
    3a00:	add	x0, x1, x0
    3a04:	ldr	w1, [x0, #12]
    3a08:	ldr	w0, [sp, #256]
    3a0c:	add	w0, w1, w0
    3a10:	ldr	x1, [sp, #24]
    3a14:	sxtw	x0, w0
    3a18:	add	x0, x1, x0
    3a1c:	ldrb	w2, [x0, #3724]
    3a20:	ldr	x1, [sp, #24]
    3a24:	ldrsw	x0, [sp, #252]
    3a28:	add	x0, x1, x0
    3a2c:	mov	w1, w2
    3a30:	strb	w1, [x0, #3724]
    3a34:	ldr	w0, [sp, #252]
    3a38:	sub	w0, w0, #0x1
    3a3c:	str	w0, [sp, #252]
    3a40:	ldr	w0, [sp, #256]
    3a44:	sub	w0, w0, #0x1
    3a48:	str	w0, [sp, #256]
    3a4c:	ldr	w0, [sp, #256]
    3a50:	cmp	w0, #0x0
    3a54:	b.ge	39f0 <BZ2_decompress+0x3960>  // b.tcont
    3a58:	ldr	w0, [sp, #252]
    3a5c:	add	w1, w0, #0x1
    3a60:	ldr	x2, [sp, #24]
    3a64:	ldrsw	x0, [sp, #260]
    3a68:	add	x0, x0, #0x7a0
    3a6c:	lsl	x0, x0, #2
    3a70:	add	x0, x2, x0
    3a74:	str	w1, [x0, #12]
    3a78:	ldr	w0, [sp, #260]
    3a7c:	sub	w0, w0, #0x1
    3a80:	str	w0, [sp, #260]
    3a84:	ldr	w0, [sp, #260]
    3a88:	cmp	w0, #0x0
    3a8c:	b.ge	39e4 <BZ2_decompress+0x3954>  // b.tcont
    3a90:	ldrb	w0, [sp, #399]
    3a94:	ldr	x1, [sp, #24]
    3a98:	sxtw	x0, w0
    3a9c:	add	x0, x1, x0
    3aa0:	ldrb	w0, [x0, #3468]
    3aa4:	mov	w3, w0
    3aa8:	ldr	x1, [sp, #24]
    3aac:	sxtw	x0, w3
    3ab0:	add	x0, x0, #0x10
    3ab4:	lsl	x0, x0, #2
    3ab8:	add	x0, x1, x0
    3abc:	ldr	w0, [x0, #4]
    3ac0:	add	w1, w0, #0x1
    3ac4:	ldr	x2, [sp, #24]
    3ac8:	sxtw	x0, w3
    3acc:	add	x0, x0, #0x10
    3ad0:	lsl	x0, x0, #2
    3ad4:	add	x0, x2, x0
    3ad8:	str	w1, [x0, #4]
    3adc:	ldr	x0, [sp, #24]
    3ae0:	ldrb	w0, [x0, #44]
    3ae4:	cmp	w0, #0x0
    3ae8:	b.eq	3b20 <BZ2_decompress+0x3a90>  // b.none
    3aec:	ldrb	w0, [sp, #399]
    3af0:	ldr	x1, [sp, #24]
    3af4:	sxtw	x0, w0
    3af8:	add	x0, x1, x0
    3afc:	ldrb	w2, [x0, #3468]
    3b00:	ldr	x0, [sp, #24]
    3b04:	ldr	x1, [x0, #3160]
    3b08:	ldrsw	x0, [sp, #336]
    3b0c:	lsl	x0, x0, #1
    3b10:	add	x0, x1, x0
    3b14:	and	w1, w2, #0xffff
    3b18:	strh	w1, [x0]
    3b1c:	b	3b50 <BZ2_decompress+0x3ac0>
    3b20:	ldrb	w0, [sp, #399]
    3b24:	ldr	x1, [sp, #24]
    3b28:	sxtw	x0, w0
    3b2c:	add	x0, x1, x0
    3b30:	ldrb	w2, [x0, #3468]
    3b34:	ldr	x0, [sp, #24]
    3b38:	ldr	x1, [x0, #3152]
    3b3c:	ldrsw	x0, [sp, #336]
    3b40:	lsl	x0, x0, #2
    3b44:	add	x0, x1, x0
    3b48:	mov	w1, w2
    3b4c:	str	w1, [x0]
    3b50:	ldr	w0, [sp, #336]
    3b54:	add	w0, w0, #0x1
    3b58:	str	w0, [sp, #336]
    3b5c:	ldr	w0, [sp, #348]
    3b60:	cmp	w0, #0x0
    3b64:	b.ne	3c54 <BZ2_decompress+0x3bc4>  // b.any
    3b68:	ldr	w0, [sp, #352]
    3b6c:	add	w0, w0, #0x1
    3b70:	str	w0, [sp, #352]
    3b74:	ldr	w1, [sp, #352]
    3b78:	ldr	w0, [sp, #360]
    3b7c:	cmp	w1, w0
    3b80:	b.lt	3b90 <BZ2_decompress+0x3b00>  // b.tstop
    3b84:	mov	w0, #0xfffffffc            	// #-4
    3b88:	str	w0, [sp, #392]
    3b8c:	b	5738 <BZ2_decompress+0x56a8>
    3b90:	mov	w0, #0x32                  	// #50
    3b94:	str	w0, [sp, #348]
    3b98:	ldr	x1, [sp, #24]
    3b9c:	ldrsw	x0, [sp, #352]
    3ba0:	add	x0, x1, x0
    3ba4:	add	x0, x0, #0x1, lsl #12
    3ba8:	ldrb	w0, [x0, #3788]
    3bac:	str	w0, [sp, #308]
    3bb0:	ldr	x1, [sp, #24]
    3bb4:	ldrsw	x2, [sp, #308]
    3bb8:	mov	x0, #0x3e80                	// #16000
    3bbc:	add	x0, x2, x0
    3bc0:	lsl	x0, x0, #2
    3bc4:	add	x0, x1, x0
    3bc8:	ldr	w0, [x0, #12]
    3bcc:	str	w0, [sp, #304]
    3bd0:	ldrsw	x1, [sp, #308]
    3bd4:	mov	x0, x1
    3bd8:	lsl	x0, x0, #7
    3bdc:	add	x0, x0, x1
    3be0:	lsl	x0, x0, #3
    3be4:	mov	x1, #0xb170                	// #45424
    3be8:	add	x0, x0, x1
    3bec:	ldr	x1, [sp, #24]
    3bf0:	add	x0, x1, x0
    3bf4:	add	x0, x0, #0xc
    3bf8:	str	x0, [sp, #296]
    3bfc:	ldrsw	x1, [sp, #308]
    3c00:	mov	x0, x1
    3c04:	lsl	x0, x0, #7
    3c08:	add	x0, x0, x1
    3c0c:	lsl	x0, x0, #3
    3c10:	mov	x1, #0xe1d0                	// #57808
    3c14:	add	x0, x0, x1
    3c18:	ldr	x1, [sp, #24]
    3c1c:	add	x0, x1, x0
    3c20:	add	x0, x0, #0xc
    3c24:	str	x0, [sp, #280]
    3c28:	ldrsw	x1, [sp, #308]
    3c2c:	mov	x0, x1
    3c30:	lsl	x0, x0, #7
    3c34:	add	x0, x0, x1
    3c38:	lsl	x0, x0, #3
    3c3c:	mov	x1, #0xc9a0                	// #51616
    3c40:	add	x0, x0, x1
    3c44:	ldr	x1, [sp, #24]
    3c48:	add	x0, x1, x0
    3c4c:	add	x0, x0, #0xc
    3c50:	str	x0, [sp, #288]
    3c54:	ldr	w0, [sp, #348]
    3c58:	sub	w0, w0, #0x1
    3c5c:	str	w0, [sp, #348]
    3c60:	ldr	w0, [sp, #304]
    3c64:	str	w0, [sp, #320]
    3c68:	ldr	x0, [sp, #24]
    3c6c:	mov	w1, #0x28                  	// #40
    3c70:	str	w1, [x0, #8]
    3c74:	ldr	x0, [sp, #24]
    3c78:	ldr	w0, [x0, #36]
    3c7c:	ldr	w1, [sp, #320]
    3c80:	cmp	w1, w0
    3c84:	b.gt	3ce0 <BZ2_decompress+0x3c50>
    3c88:	ldr	x0, [sp, #24]
    3c8c:	ldr	w1, [x0, #32]
    3c90:	ldr	x0, [sp, #24]
    3c94:	ldr	w2, [x0, #36]
    3c98:	ldr	w0, [sp, #320]
    3c9c:	sub	w0, w2, w0
    3ca0:	lsr	w0, w1, w0
    3ca4:	ldr	w1, [sp, #320]
    3ca8:	mov	w2, #0x1                   	// #1
    3cac:	lsl	w1, w2, w1
    3cb0:	sub	w1, w1, #0x1
    3cb4:	and	w0, w0, w1
    3cb8:	str	w0, [sp, #120]
    3cbc:	ldr	x0, [sp, #24]
    3cc0:	ldr	w1, [x0, #36]
    3cc4:	ldr	w0, [sp, #320]
    3cc8:	sub	w1, w1, w0
    3ccc:	ldr	x0, [sp, #24]
    3cd0:	str	w1, [x0, #36]
    3cd4:	ldr	w0, [sp, #120]
    3cd8:	str	w0, [sp, #316]
    3cdc:	b	3da0 <BZ2_decompress+0x3d10>
    3ce0:	ldr	x0, [sp, #24]
    3ce4:	ldr	x0, [x0]
    3ce8:	ldr	w0, [x0, #8]
    3cec:	cmp	w0, #0x0
    3cf0:	b.ne	3cfc <BZ2_decompress+0x3c6c>  // b.any
    3cf4:	str	wzr, [sp, #392]
    3cf8:	b	5738 <BZ2_decompress+0x56a8>
    3cfc:	ldr	x0, [sp, #24]
    3d00:	ldr	w0, [x0, #32]
    3d04:	lsl	w0, w0, #8
    3d08:	ldr	x1, [sp, #24]
    3d0c:	ldr	x1, [x1]
    3d10:	ldr	x1, [x1]
    3d14:	ldrb	w1, [x1]
    3d18:	orr	w1, w0, w1
    3d1c:	ldr	x0, [sp, #24]
    3d20:	str	w1, [x0, #32]
    3d24:	ldr	x0, [sp, #24]
    3d28:	ldr	w0, [x0, #36]
    3d2c:	add	w1, w0, #0x8
    3d30:	ldr	x0, [sp, #24]
    3d34:	str	w1, [x0, #36]
    3d38:	ldr	x0, [sp, #24]
    3d3c:	ldr	x0, [x0]
    3d40:	ldr	x1, [x0]
    3d44:	add	x1, x1, #0x1
    3d48:	str	x1, [x0]
    3d4c:	ldr	x0, [sp, #24]
    3d50:	ldr	x0, [x0]
    3d54:	ldr	w1, [x0, #8]
    3d58:	sub	w1, w1, #0x1
    3d5c:	str	w1, [x0, #8]
    3d60:	ldr	x0, [sp, #24]
    3d64:	ldr	x0, [x0]
    3d68:	ldr	w1, [x0, #12]
    3d6c:	add	w1, w1, #0x1
    3d70:	str	w1, [x0, #12]
    3d74:	ldr	x0, [sp, #24]
    3d78:	ldr	x0, [x0]
    3d7c:	ldr	w0, [x0, #12]
    3d80:	cmp	w0, #0x0
    3d84:	b.ne	3c74 <BZ2_decompress+0x3be4>  // b.any
    3d88:	ldr	x0, [sp, #24]
    3d8c:	ldr	x0, [x0]
    3d90:	ldr	w1, [x0, #16]
    3d94:	add	w1, w1, #0x1
    3d98:	str	w1, [x0, #16]
    3d9c:	b	3c74 <BZ2_decompress+0x3be4>
    3da0:	ldr	w0, [sp, #320]
    3da4:	cmp	w0, #0x14
    3da8:	b.le	3db8 <BZ2_decompress+0x3d28>
    3dac:	mov	w0, #0xfffffffc            	// #-4
    3db0:	str	w0, [sp, #392]
    3db4:	b	5738 <BZ2_decompress+0x56a8>
    3db8:	ldrsw	x0, [sp, #320]
    3dbc:	lsl	x0, x0, #2
    3dc0:	ldr	x1, [sp, #296]
    3dc4:	add	x0, x1, x0
    3dc8:	ldr	w0, [x0]
    3dcc:	ldr	w1, [sp, #316]
    3dd0:	cmp	w1, w0
    3dd4:	b.le	3f18 <BZ2_decompress+0x3e88>
    3dd8:	ldr	w0, [sp, #320]
    3ddc:	add	w0, w0, #0x1
    3de0:	str	w0, [sp, #320]
    3de4:	ldr	x0, [sp, #24]
    3de8:	mov	w1, #0x29                  	// #41
    3dec:	str	w1, [x0, #8]
    3df0:	ldr	x0, [sp, #24]
    3df4:	ldr	w0, [x0, #36]
    3df8:	cmp	w0, #0x0
    3dfc:	b.le	3e58 <BZ2_decompress+0x3dc8>
    3e00:	ldr	x0, [sp, #24]
    3e04:	ldr	w1, [x0, #32]
    3e08:	ldr	x0, [sp, #24]
    3e0c:	ldr	w0, [x0, #36]
    3e10:	sub	w0, w0, #0x1
    3e14:	lsr	w0, w1, w0
    3e18:	and	w0, w0, #0x1
    3e1c:	str	w0, [sp, #116]
    3e20:	ldr	x0, [sp, #24]
    3e24:	ldr	w0, [x0, #36]
    3e28:	sub	w1, w0, #0x1
    3e2c:	ldr	x0, [sp, #24]
    3e30:	str	w1, [x0, #36]
    3e34:	ldr	w0, [sp, #116]
    3e38:	str	w0, [sp, #312]
    3e3c:	nop
    3e40:	ldr	w0, [sp, #316]
    3e44:	lsl	w0, w0, #1
    3e48:	ldr	w1, [sp, #312]
    3e4c:	orr	w0, w1, w0
    3e50:	str	w0, [sp, #316]
    3e54:	b	3da0 <BZ2_decompress+0x3d10>
    3e58:	ldr	x0, [sp, #24]
    3e5c:	ldr	x0, [x0]
    3e60:	ldr	w0, [x0, #8]
    3e64:	cmp	w0, #0x0
    3e68:	b.ne	3e74 <BZ2_decompress+0x3de4>  // b.any
    3e6c:	str	wzr, [sp, #392]
    3e70:	b	5738 <BZ2_decompress+0x56a8>
    3e74:	ldr	x0, [sp, #24]
    3e78:	ldr	w0, [x0, #32]
    3e7c:	lsl	w0, w0, #8
    3e80:	ldr	x1, [sp, #24]
    3e84:	ldr	x1, [x1]
    3e88:	ldr	x1, [x1]
    3e8c:	ldrb	w1, [x1]
    3e90:	orr	w1, w0, w1
    3e94:	ldr	x0, [sp, #24]
    3e98:	str	w1, [x0, #32]
    3e9c:	ldr	x0, [sp, #24]
    3ea0:	ldr	w0, [x0, #36]
    3ea4:	add	w1, w0, #0x8
    3ea8:	ldr	x0, [sp, #24]
    3eac:	str	w1, [x0, #36]
    3eb0:	ldr	x0, [sp, #24]
    3eb4:	ldr	x0, [x0]
    3eb8:	ldr	x1, [x0]
    3ebc:	add	x1, x1, #0x1
    3ec0:	str	x1, [x0]
    3ec4:	ldr	x0, [sp, #24]
    3ec8:	ldr	x0, [x0]
    3ecc:	ldr	w1, [x0, #8]
    3ed0:	sub	w1, w1, #0x1
    3ed4:	str	w1, [x0, #8]
    3ed8:	ldr	x0, [sp, #24]
    3edc:	ldr	x0, [x0]
    3ee0:	ldr	w1, [x0, #12]
    3ee4:	add	w1, w1, #0x1
    3ee8:	str	w1, [x0, #12]
    3eec:	ldr	x0, [sp, #24]
    3ef0:	ldr	x0, [x0]
    3ef4:	ldr	w0, [x0, #12]
    3ef8:	cmp	w0, #0x0
    3efc:	b.ne	3df0 <BZ2_decompress+0x3d60>  // b.any
    3f00:	ldr	x0, [sp, #24]
    3f04:	ldr	x0, [x0]
    3f08:	ldr	w1, [x0, #16]
    3f0c:	add	w1, w1, #0x1
    3f10:	str	w1, [x0, #16]
    3f14:	b	3df0 <BZ2_decompress+0x3d60>
    3f18:	nop
    3f1c:	ldrsw	x0, [sp, #320]
    3f20:	lsl	x0, x0, #2
    3f24:	ldr	x1, [sp, #288]
    3f28:	add	x0, x1, x0
    3f2c:	ldr	w0, [x0]
    3f30:	ldr	w1, [sp, #316]
    3f34:	sub	w0, w1, w0
    3f38:	cmp	w0, #0x0
    3f3c:	b.lt	3f64 <BZ2_decompress+0x3ed4>  // b.tstop
    3f40:	ldrsw	x0, [sp, #320]
    3f44:	lsl	x0, x0, #2
    3f48:	ldr	x1, [sp, #288]
    3f4c:	add	x0, x1, x0
    3f50:	ldr	w0, [x0]
    3f54:	ldr	w1, [sp, #316]
    3f58:	sub	w0, w1, w0
    3f5c:	cmp	w0, #0x101
    3f60:	b.le	3f70 <BZ2_decompress+0x3ee0>
    3f64:	mov	w0, #0xfffffffc            	// #-4
    3f68:	str	w0, [sp, #392]
    3f6c:	b	5738 <BZ2_decompress+0x56a8>
    3f70:	ldrsw	x0, [sp, #320]
    3f74:	lsl	x0, x0, #2
    3f78:	ldr	x1, [sp, #288]
    3f7c:	add	x0, x1, x0
    3f80:	ldr	w0, [x0]
    3f84:	ldr	w1, [sp, #316]
    3f88:	sub	w0, w1, w0
    3f8c:	sxtw	x0, w0
    3f90:	lsl	x0, x0, #2
    3f94:	ldr	x1, [sp, #280]
    3f98:	add	x0, x1, x0
    3f9c:	ldr	w0, [x0]
    3fa0:	str	w0, [sp, #344]
    3fa4:	nop
    3fa8:	b	2fe4 <BZ2_decompress+0x2f54>
    3fac:	nop
    3fb0:	ldr	x0, [sp, #24]
    3fb4:	ldr	w0, [x0, #56]
    3fb8:	cmp	w0, #0x0
    3fbc:	b.lt	3fd4 <BZ2_decompress+0x3f44>  // b.tstop
    3fc0:	ldr	x0, [sp, #24]
    3fc4:	ldr	w0, [x0, #56]
    3fc8:	ldr	w1, [sp, #336]
    3fcc:	cmp	w1, w0
    3fd0:	b.gt	3fe0 <BZ2_decompress+0x3f50>
    3fd4:	mov	w0, #0xfffffffc            	// #-4
    3fd8:	str	w0, [sp, #392]
    3fdc:	b	5738 <BZ2_decompress+0x56a8>
    3fe0:	str	wzr, [sp, #380]
    3fe4:	b	4044 <BZ2_decompress+0x3fb4>
    3fe8:	ldr	x1, [sp, #24]
    3fec:	ldrsw	x0, [sp, #380]
    3ff0:	add	x0, x0, #0x10
    3ff4:	lsl	x0, x0, #2
    3ff8:	add	x0, x1, x0
    3ffc:	ldr	w0, [x0, #4]
    4000:	cmp	w0, #0x0
    4004:	b.lt	402c <BZ2_decompress+0x3f9c>  // b.tstop
    4008:	ldr	x1, [sp, #24]
    400c:	ldrsw	x0, [sp, #380]
    4010:	add	x0, x0, #0x10
    4014:	lsl	x0, x0, #2
    4018:	add	x0, x1, x0
    401c:	ldr	w0, [x0, #4]
    4020:	ldr	w1, [sp, #336]
    4024:	cmp	w1, w0
    4028:	b.ge	4038 <BZ2_decompress+0x3fa8>  // b.tcont
    402c:	mov	w0, #0xfffffffc            	// #-4
    4030:	str	w0, [sp, #392]
    4034:	b	5738 <BZ2_decompress+0x56a8>
    4038:	ldr	w0, [sp, #380]
    403c:	add	w0, w0, #0x1
    4040:	str	w0, [sp, #380]
    4044:	ldr	w0, [sp, #380]
    4048:	cmp	w0, #0xff
    404c:	b.le	3fe8 <BZ2_decompress+0x3f58>
    4050:	ldr	x0, [sp, #24]
    4054:	str	wzr, [x0, #1096]
    4058:	mov	w0, #0x1                   	// #1
    405c:	str	w0, [sp, #380]
    4060:	b	40a8 <BZ2_decompress+0x4018>
    4064:	ldr	w0, [sp, #380]
    4068:	sub	w0, w0, #0x1
    406c:	ldr	x1, [sp, #24]
    4070:	sxtw	x0, w0
    4074:	add	x0, x0, #0x10
    4078:	lsl	x0, x0, #2
    407c:	add	x0, x1, x0
    4080:	ldr	w1, [x0, #4]
    4084:	ldr	x2, [sp, #24]
    4088:	ldrsw	x0, [sp, #380]
    408c:	add	x0, x0, #0x110
    4090:	lsl	x0, x0, #2
    4094:	add	x0, x2, x0
    4098:	str	w1, [x0, #8]
    409c:	ldr	w0, [sp, #380]
    40a0:	add	w0, w0, #0x1
    40a4:	str	w0, [sp, #380]
    40a8:	ldr	w0, [sp, #380]
    40ac:	cmp	w0, #0x100
    40b0:	b.le	4064 <BZ2_decompress+0x3fd4>
    40b4:	mov	w0, #0x1                   	// #1
    40b8:	str	w0, [sp, #380]
    40bc:	b	4120 <BZ2_decompress+0x4090>
    40c0:	ldr	x1, [sp, #24]
    40c4:	ldrsw	x0, [sp, #380]
    40c8:	add	x0, x0, #0x110
    40cc:	lsl	x0, x0, #2
    40d0:	add	x0, x1, x0
    40d4:	ldr	w1, [x0, #8]
    40d8:	ldr	w0, [sp, #380]
    40dc:	sub	w0, w0, #0x1
    40e0:	ldr	x2, [sp, #24]
    40e4:	sxtw	x0, w0
    40e8:	add	x0, x0, #0x110
    40ec:	lsl	x0, x0, #2
    40f0:	add	x0, x2, x0
    40f4:	ldr	w0, [x0, #8]
    40f8:	add	w1, w1, w0
    40fc:	ldr	x2, [sp, #24]
    4100:	ldrsw	x0, [sp, #380]
    4104:	add	x0, x0, #0x110
    4108:	lsl	x0, x0, #2
    410c:	add	x0, x2, x0
    4110:	str	w1, [x0, #8]
    4114:	ldr	w0, [sp, #380]
    4118:	add	w0, w0, #0x1
    411c:	str	w0, [sp, #380]
    4120:	ldr	w0, [sp, #380]
    4124:	cmp	w0, #0x100
    4128:	b.le	40c0 <BZ2_decompress+0x4030>
    412c:	str	wzr, [sp, #380]
    4130:	b	4190 <BZ2_decompress+0x4100>
    4134:	ldr	x1, [sp, #24]
    4138:	ldrsw	x0, [sp, #380]
    413c:	add	x0, x0, #0x110
    4140:	lsl	x0, x0, #2
    4144:	add	x0, x1, x0
    4148:	ldr	w0, [x0, #8]
    414c:	cmp	w0, #0x0
    4150:	b.lt	4178 <BZ2_decompress+0x40e8>  // b.tstop
    4154:	ldr	x1, [sp, #24]
    4158:	ldrsw	x0, [sp, #380]
    415c:	add	x0, x0, #0x110
    4160:	lsl	x0, x0, #2
    4164:	add	x0, x1, x0
    4168:	ldr	w0, [x0, #8]
    416c:	ldr	w1, [sp, #336]
    4170:	cmp	w1, w0
    4174:	b.ge	4184 <BZ2_decompress+0x40f4>  // b.tcont
    4178:	mov	w0, #0xfffffffc            	// #-4
    417c:	str	w0, [sp, #392]
    4180:	b	5738 <BZ2_decompress+0x56a8>
    4184:	ldr	w0, [sp, #380]
    4188:	add	w0, w0, #0x1
    418c:	str	w0, [sp, #380]
    4190:	ldr	w0, [sp, #380]
    4194:	cmp	w0, #0x100
    4198:	b.le	4134 <BZ2_decompress+0x40a4>
    419c:	mov	w0, #0x1                   	// #1
    41a0:	str	w0, [sp, #380]
    41a4:	b	4200 <BZ2_decompress+0x4170>
    41a8:	ldr	w0, [sp, #380]
    41ac:	sub	w0, w0, #0x1
    41b0:	ldr	x1, [sp, #24]
    41b4:	sxtw	x0, w0
    41b8:	add	x0, x0, #0x110
    41bc:	lsl	x0, x0, #2
    41c0:	add	x0, x1, x0
    41c4:	ldr	w1, [x0, #8]
    41c8:	ldr	x2, [sp, #24]
    41cc:	ldrsw	x0, [sp, #380]
    41d0:	add	x0, x0, #0x110
    41d4:	lsl	x0, x0, #2
    41d8:	add	x0, x2, x0
    41dc:	ldr	w0, [x0, #8]
    41e0:	cmp	w1, w0
    41e4:	b.le	41f4 <BZ2_decompress+0x4164>
    41e8:	mov	w0, #0xfffffffc            	// #-4
    41ec:	str	w0, [sp, #392]
    41f0:	b	5738 <BZ2_decompress+0x56a8>
    41f4:	ldr	w0, [sp, #380]
    41f8:	add	w0, w0, #0x1
    41fc:	str	w0, [sp, #380]
    4200:	ldr	w0, [sp, #380]
    4204:	cmp	w0, #0x100
    4208:	b.le	41a8 <BZ2_decompress+0x4118>
    420c:	ldr	x0, [sp, #24]
    4210:	str	wzr, [x0, #16]
    4214:	ldr	x0, [sp, #24]
    4218:	strb	wzr, [x0, #12]
    421c:	ldr	x0, [sp, #24]
    4220:	mov	w1, #0xffffffff            	// #-1
    4224:	str	w1, [x0, #3184]
    4228:	ldr	x0, [sp, #24]
    422c:	mov	w1, #0x2                   	// #2
    4230:	str	w1, [x0, #8]
    4234:	ldr	x0, [sp, #24]
    4238:	ldr	w0, [x0, #52]
    423c:	cmp	w0, #0x1
    4240:	b.le	4268 <BZ2_decompress+0x41d8>
    4244:	adrp	x0, 0 <stderr>
    4248:	add	x0, x0, #0x0
    424c:	ldr	x0, [x0]
    4250:	mov	x3, x0
    4254:	mov	x2, #0x6                   	// #6
    4258:	mov	x1, #0x1                   	// #1
    425c:	adrp	x0, 0 <makeMaps_d>
    4260:	add	x0, x0, #0x0
    4264:	bl	0 <fwrite>
    4268:	ldr	x0, [sp, #24]
    426c:	ldrb	w0, [x0, #44]
    4270:	cmp	w0, #0x0
    4274:	b.eq	48ec <BZ2_decompress+0x485c>  // b.none
    4278:	str	wzr, [sp, #380]
    427c:	b	42bc <BZ2_decompress+0x422c>
    4280:	ldr	x1, [sp, #24]
    4284:	ldrsw	x0, [sp, #380]
    4288:	add	x0, x0, #0x110
    428c:	lsl	x0, x0, #2
    4290:	add	x0, x1, x0
    4294:	ldr	w1, [x0, #8]
    4298:	ldr	x2, [sp, #24]
    429c:	ldrsw	x0, [sp, #380]
    42a0:	add	x0, x0, #0x210
    42a4:	lsl	x0, x0, #2
    42a8:	add	x0, x2, x0
    42ac:	str	w1, [x0, #12]
    42b0:	ldr	w0, [sp, #380]
    42b4:	add	w0, w0, #0x1
    42b8:	str	w0, [sp, #380]
    42bc:	ldr	w0, [sp, #380]
    42c0:	cmp	w0, #0x100
    42c4:	b.le	4280 <BZ2_decompress+0x41f0>
    42c8:	str	wzr, [sp, #380]
    42cc:	b	4468 <BZ2_decompress+0x43d8>
    42d0:	ldr	x0, [sp, #24]
    42d4:	ldr	x1, [x0, #3160]
    42d8:	ldrsw	x0, [sp, #380]
    42dc:	lsl	x0, x0, #1
    42e0:	add	x0, x1, x0
    42e4:	ldrh	w0, [x0]
    42e8:	strb	w0, [sp, #399]
    42ec:	ldrb	w0, [sp, #399]
    42f0:	ldr	x1, [sp, #24]
    42f4:	sxtw	x0, w0
    42f8:	add	x0, x0, #0x210
    42fc:	lsl	x0, x0, #2
    4300:	add	x0, x1, x0
    4304:	ldr	w2, [x0, #12]
    4308:	ldr	x0, [sp, #24]
    430c:	ldr	x1, [x0, #3160]
    4310:	ldrsw	x0, [sp, #380]
    4314:	lsl	x0, x0, #1
    4318:	add	x0, x1, x0
    431c:	and	w1, w2, #0xffff
    4320:	strh	w1, [x0]
    4324:	ldr	w0, [sp, #380]
    4328:	and	w0, w0, #0x1
    432c:	cmp	w0, #0x0
    4330:	b.ne	43ac <BZ2_decompress+0x431c>  // b.any
    4334:	ldr	x0, [sp, #24]
    4338:	ldr	x1, [x0, #3168]
    433c:	ldr	w0, [sp, #380]
    4340:	asr	w0, w0, #1
    4344:	sxtw	x0, w0
    4348:	add	x0, x1, x0
    434c:	ldrb	w0, [x0]
    4350:	sxtb	w0, w0
    4354:	and	w0, w0, #0xfffffff0
    4358:	sxtb	w1, w0
    435c:	ldrb	w0, [sp, #399]
    4360:	ldr	x2, [sp, #24]
    4364:	sxtw	x0, w0
    4368:	add	x0, x0, #0x210
    436c:	lsl	x0, x0, #2
    4370:	add	x0, x2, x0
    4374:	ldr	w0, [x0, #12]
    4378:	asr	w0, w0, #16
    437c:	sxtb	w0, w0
    4380:	orr	w0, w1, w0
    4384:	sxtb	w2, w0
    4388:	ldr	x0, [sp, #24]
    438c:	ldr	x1, [x0, #3168]
    4390:	ldr	w0, [sp, #380]
    4394:	asr	w0, w0, #1
    4398:	sxtw	x0, w0
    439c:	add	x0, x1, x0
    43a0:	and	w1, w2, #0xff
    43a4:	strb	w1, [x0]
    43a8:	b	4424 <BZ2_decompress+0x4394>
    43ac:	ldr	x0, [sp, #24]
    43b0:	ldr	x1, [x0, #3168]
    43b4:	ldr	w0, [sp, #380]
    43b8:	asr	w0, w0, #1
    43bc:	sxtw	x0, w0
    43c0:	add	x0, x1, x0
    43c4:	ldrb	w0, [x0]
    43c8:	sxtb	w0, w0
    43cc:	and	w0, w0, #0xf
    43d0:	sxtb	w1, w0
    43d4:	ldrb	w0, [sp, #399]
    43d8:	ldr	x2, [sp, #24]
    43dc:	sxtw	x0, w0
    43e0:	add	x0, x0, #0x210
    43e4:	lsl	x0, x0, #2
    43e8:	add	x0, x2, x0
    43ec:	ldr	w0, [x0, #12]
    43f0:	asr	w0, w0, #16
    43f4:	lsl	w0, w0, #4
    43f8:	sxtb	w0, w0
    43fc:	orr	w0, w1, w0
    4400:	sxtb	w2, w0
    4404:	ldr	x0, [sp, #24]
    4408:	ldr	x1, [x0, #3168]
    440c:	ldr	w0, [sp, #380]
    4410:	asr	w0, w0, #1
    4414:	sxtw	x0, w0
    4418:	add	x0, x1, x0
    441c:	and	w1, w2, #0xff
    4420:	strb	w1, [x0]
    4424:	ldrb	w3, [sp, #399]
    4428:	ldr	x1, [sp, #24]
    442c:	sxtw	x0, w3
    4430:	add	x0, x0, #0x210
    4434:	lsl	x0, x0, #2
    4438:	add	x0, x1, x0
    443c:	ldr	w0, [x0, #12]
    4440:	add	w1, w0, #0x1
    4444:	ldr	x2, [sp, #24]
    4448:	sxtw	x0, w3
    444c:	add	x0, x0, #0x210
    4450:	lsl	x0, x0, #2
    4454:	add	x0, x2, x0
    4458:	str	w1, [x0, #12]
    445c:	ldr	w0, [sp, #380]
    4460:	add	w0, w0, #0x1
    4464:	str	w0, [sp, #380]
    4468:	ldr	w1, [sp, #380]
    446c:	ldr	w0, [sp, #336]
    4470:	cmp	w1, w0
    4474:	b.lt	42d0 <BZ2_decompress+0x4240>  // b.tstop
    4478:	ldr	x0, [sp, #24]
    447c:	ldr	w0, [x0, #56]
    4480:	str	w0, [sp, #380]
    4484:	ldr	x0, [sp, #24]
    4488:	ldr	x1, [x0, #3160]
    448c:	ldrsw	x0, [sp, #380]
    4490:	lsl	x0, x0, #1
    4494:	add	x0, x1, x0
    4498:	ldrh	w0, [x0]
    449c:	mov	w2, w0
    44a0:	ldr	x0, [sp, #24]
    44a4:	ldr	x1, [x0, #3168]
    44a8:	ldr	w0, [sp, #380]
    44ac:	asr	w0, w0, #1
    44b0:	sxtw	x0, w0
    44b4:	add	x0, x1, x0
    44b8:	ldrb	w0, [x0]
    44bc:	mov	w1, w0
    44c0:	ldr	w0, [sp, #380]
    44c4:	lsl	w0, w0, #2
    44c8:	and	w0, w0, #0x4
    44cc:	lsr	w0, w1, w0
    44d0:	lsl	w0, w0, #16
    44d4:	and	w0, w0, #0xf0000
    44d8:	orr	w0, w2, w0
    44dc:	str	w0, [sp, #376]
    44e0:	ldr	x0, [sp, #24]
    44e4:	ldr	x1, [x0, #3160]
    44e8:	ldrsw	x0, [sp, #376]
    44ec:	lsl	x0, x0, #1
    44f0:	add	x0, x1, x0
    44f4:	ldrh	w0, [x0]
    44f8:	mov	w2, w0
    44fc:	ldr	x0, [sp, #24]
    4500:	ldr	x1, [x0, #3168]
    4504:	ldr	w0, [sp, #376]
    4508:	asr	w0, w0, #1
    450c:	sxtw	x0, w0
    4510:	add	x0, x1, x0
    4514:	ldrb	w0, [x0]
    4518:	mov	w1, w0
    451c:	ldr	w0, [sp, #376]
    4520:	lsl	w0, w0, #2
    4524:	and	w0, w0, #0x4
    4528:	lsr	w0, w1, w0
    452c:	lsl	w0, w0, #16
    4530:	and	w0, w0, #0xf0000
    4534:	orr	w0, w2, w0
    4538:	str	w0, [sp, #124]
    453c:	ldr	x0, [sp, #24]
    4540:	ldr	x1, [x0, #3160]
    4544:	ldrsw	x0, [sp, #376]
    4548:	lsl	x0, x0, #1
    454c:	add	x0, x1, x0
    4550:	ldr	w1, [sp, #380]
    4554:	and	w1, w1, #0xffff
    4558:	strh	w1, [x0]
    455c:	ldr	w0, [sp, #376]
    4560:	and	w0, w0, #0x1
    4564:	cmp	w0, #0x0
    4568:	b.ne	45cc <BZ2_decompress+0x453c>  // b.any
    456c:	ldr	x0, [sp, #24]
    4570:	ldr	x1, [x0, #3168]
    4574:	ldr	w0, [sp, #376]
    4578:	asr	w0, w0, #1
    457c:	sxtw	x0, w0
    4580:	add	x0, x1, x0
    4584:	ldrb	w0, [x0]
    4588:	sxtb	w0, w0
    458c:	and	w0, w0, #0xfffffff0
    4590:	sxtb	w1, w0
    4594:	ldr	w0, [sp, #380]
    4598:	asr	w0, w0, #16
    459c:	sxtb	w0, w0
    45a0:	orr	w0, w1, w0
    45a4:	sxtb	w2, w0
    45a8:	ldr	x0, [sp, #24]
    45ac:	ldr	x1, [x0, #3168]
    45b0:	ldr	w0, [sp, #376]
    45b4:	asr	w0, w0, #1
    45b8:	sxtw	x0, w0
    45bc:	add	x0, x1, x0
    45c0:	and	w1, w2, #0xff
    45c4:	strb	w1, [x0]
    45c8:	b	462c <BZ2_decompress+0x459c>
    45cc:	ldr	x0, [sp, #24]
    45d0:	ldr	x1, [x0, #3168]
    45d4:	ldr	w0, [sp, #376]
    45d8:	asr	w0, w0, #1
    45dc:	sxtw	x0, w0
    45e0:	add	x0, x1, x0
    45e4:	ldrb	w0, [x0]
    45e8:	sxtb	w0, w0
    45ec:	and	w0, w0, #0xf
    45f0:	sxtb	w1, w0
    45f4:	ldr	w0, [sp, #380]
    45f8:	asr	w0, w0, #16
    45fc:	lsl	w0, w0, #4
    4600:	sxtb	w0, w0
    4604:	orr	w0, w1, w0
    4608:	sxtb	w2, w0
    460c:	ldr	x0, [sp, #24]
    4610:	ldr	x1, [x0, #3168]
    4614:	ldr	w0, [sp, #376]
    4618:	asr	w0, w0, #1
    461c:	sxtw	x0, w0
    4620:	add	x0, x1, x0
    4624:	and	w1, w2, #0xff
    4628:	strb	w1, [x0]
    462c:	ldr	w0, [sp, #376]
    4630:	str	w0, [sp, #380]
    4634:	ldr	w0, [sp, #124]
    4638:	str	w0, [sp, #376]
    463c:	ldr	x0, [sp, #24]
    4640:	ldr	w0, [x0, #56]
    4644:	ldr	w1, [sp, #380]
    4648:	cmp	w1, w0
    464c:	b.ne	44e0 <BZ2_decompress+0x4450>  // b.any
    4650:	ldr	x0, [sp, #24]
    4654:	ldr	w0, [x0, #56]
    4658:	mov	w1, w0
    465c:	ldr	x0, [sp, #24]
    4660:	str	w1, [x0, #60]
    4664:	ldr	x0, [sp, #24]
    4668:	str	wzr, [x0, #1092]
    466c:	ldr	x0, [sp, #24]
    4670:	ldrb	w0, [x0, #20]
    4674:	cmp	w0, #0x0
    4678:	b.eq	4808 <BZ2_decompress+0x4778>  // b.none
    467c:	ldr	x0, [sp, #24]
    4680:	str	wzr, [x0, #24]
    4684:	ldr	x0, [sp, #24]
    4688:	str	wzr, [x0, #28]
    468c:	ldr	x0, [sp, #24]
    4690:	ldr	w1, [x0, #60]
    4694:	ldr	x0, [sp, #24]
    4698:	ldr	w0, [x0, #40]
    469c:	mov	w2, w0
    46a0:	mov	w0, #0x86a0                	// #34464
    46a4:	movk	w0, #0x1, lsl #16
    46a8:	mul	w0, w2, w0
    46ac:	cmp	w1, w0
    46b0:	b.cc	46bc <BZ2_decompress+0x462c>  // b.lo, b.ul, b.last
    46b4:	mov	w0, #0x1                   	// #1
    46b8:	b	58bc <BZ2_decompress+0x582c>
    46bc:	ldr	x0, [sp, #24]
    46c0:	ldr	w0, [x0, #60]
    46c4:	mov	w2, w0
    46c8:	ldr	x0, [sp, #24]
    46cc:	add	x0, x0, #0x448
    46d0:	mov	x1, x0
    46d4:	mov	w0, w2
    46d8:	bl	0 <BZ2_indexIntoF>
    46dc:	mov	w1, w0
    46e0:	ldr	x0, [sp, #24]
    46e4:	str	w1, [x0, #64]
    46e8:	ldr	x0, [sp, #24]
    46ec:	ldr	x1, [x0, #3160]
    46f0:	ldr	x0, [sp, #24]
    46f4:	ldr	w0, [x0, #60]
    46f8:	mov	w0, w0
    46fc:	lsl	x0, x0, #1
    4700:	add	x0, x1, x0
    4704:	ldrh	w0, [x0]
    4708:	mov	w2, w0
    470c:	ldr	x0, [sp, #24]
    4710:	ldr	x1, [x0, #3168]
    4714:	ldr	x0, [sp, #24]
    4718:	ldr	w0, [x0, #60]
    471c:	lsr	w0, w0, #1
    4720:	mov	w0, w0
    4724:	add	x0, x1, x0
    4728:	ldrb	w0, [x0]
    472c:	mov	w1, w0
    4730:	ldr	x0, [sp, #24]
    4734:	ldr	w0, [x0, #60]
    4738:	lsl	w0, w0, #2
    473c:	and	w0, w0, #0x4
    4740:	lsr	w0, w1, w0
    4744:	lsl	w0, w0, #16
    4748:	and	w0, w0, #0xf0000
    474c:	orr	w1, w2, w0
    4750:	ldr	x0, [sp, #24]
    4754:	str	w1, [x0, #60]
    4758:	ldr	x0, [sp, #24]
    475c:	ldr	w0, [x0, #1092]
    4760:	add	w1, w0, #0x1
    4764:	ldr	x0, [sp, #24]
    4768:	str	w1, [x0, #1092]
    476c:	ldr	x0, [sp, #24]
    4770:	ldr	w0, [x0, #24]
    4774:	cmp	w0, #0x0
    4778:	b.ne	47c8 <BZ2_decompress+0x4738>  // b.any
    477c:	ldr	x0, [sp, #24]
    4780:	ldr	w1, [x0, #28]
    4784:	adrp	x0, 0 <BZ2_rNums>
    4788:	add	x0, x0, #0x0
    478c:	sxtw	x1, w1
    4790:	ldr	w1, [x0, x1, lsl #2]
    4794:	ldr	x0, [sp, #24]
    4798:	str	w1, [x0, #24]
    479c:	ldr	x0, [sp, #24]
    47a0:	ldr	w0, [x0, #28]
    47a4:	add	w1, w0, #0x1
    47a8:	ldr	x0, [sp, #24]
    47ac:	str	w1, [x0, #28]
    47b0:	ldr	x0, [sp, #24]
    47b4:	ldr	w0, [x0, #28]
    47b8:	cmp	w0, #0x200
    47bc:	b.ne	47c8 <BZ2_decompress+0x4738>  // b.any
    47c0:	ldr	x0, [sp, #24]
    47c4:	str	wzr, [x0, #28]
    47c8:	ldr	x0, [sp, #24]
    47cc:	ldr	w0, [x0, #24]
    47d0:	sub	w1, w0, #0x1
    47d4:	ldr	x0, [sp, #24]
    47d8:	str	w1, [x0, #24]
    47dc:	ldr	x0, [sp, #24]
    47e0:	ldr	w0, [x0, #64]
    47e4:	ldr	x1, [sp, #24]
    47e8:	ldr	w1, [x1, #24]
    47ec:	cmp	w1, #0x1
    47f0:	cset	w1, eq  // eq = none
    47f4:	and	w1, w1, #0xff
    47f8:	eor	w1, w0, w1
    47fc:	ldr	x0, [sp, #24]
    4800:	str	w1, [x0, #64]
    4804:	b	4bfc <BZ2_decompress+0x4b6c>
    4808:	ldr	x0, [sp, #24]
    480c:	ldr	w1, [x0, #60]
    4810:	ldr	x0, [sp, #24]
    4814:	ldr	w0, [x0, #40]
    4818:	mov	w2, w0
    481c:	mov	w0, #0x86a0                	// #34464
    4820:	movk	w0, #0x1, lsl #16
    4824:	mul	w0, w2, w0
    4828:	cmp	w1, w0
    482c:	b.cc	4838 <BZ2_decompress+0x47a8>  // b.lo, b.ul, b.last
    4830:	mov	w0, #0x1                   	// #1
    4834:	b	58bc <BZ2_decompress+0x582c>
    4838:	ldr	x0, [sp, #24]
    483c:	ldr	w0, [x0, #60]
    4840:	mov	w2, w0
    4844:	ldr	x0, [sp, #24]
    4848:	add	x0, x0, #0x448
    484c:	mov	x1, x0
    4850:	mov	w0, w2
    4854:	bl	0 <BZ2_indexIntoF>
    4858:	mov	w1, w0
    485c:	ldr	x0, [sp, #24]
    4860:	str	w1, [x0, #64]
    4864:	ldr	x0, [sp, #24]
    4868:	ldr	x1, [x0, #3160]
    486c:	ldr	x0, [sp, #24]
    4870:	ldr	w0, [x0, #60]
    4874:	mov	w0, w0
    4878:	lsl	x0, x0, #1
    487c:	add	x0, x1, x0
    4880:	ldrh	w0, [x0]
    4884:	mov	w2, w0
    4888:	ldr	x0, [sp, #24]
    488c:	ldr	x1, [x0, #3168]
    4890:	ldr	x0, [sp, #24]
    4894:	ldr	w0, [x0, #60]
    4898:	lsr	w0, w0, #1
    489c:	mov	w0, w0
    48a0:	add	x0, x1, x0
    48a4:	ldrb	w0, [x0]
    48a8:	mov	w1, w0
    48ac:	ldr	x0, [sp, #24]
    48b0:	ldr	w0, [x0, #60]
    48b4:	lsl	w0, w0, #2
    48b8:	and	w0, w0, #0x4
    48bc:	lsr	w0, w1, w0
    48c0:	lsl	w0, w0, #16
    48c4:	and	w0, w0, #0xf0000
    48c8:	orr	w1, w2, w0
    48cc:	ldr	x0, [sp, #24]
    48d0:	str	w1, [x0, #60]
    48d4:	ldr	x0, [sp, #24]
    48d8:	ldr	w0, [x0, #1092]
    48dc:	add	w1, w0, #0x1
    48e0:	ldr	x0, [sp, #24]
    48e4:	str	w1, [x0, #1092]
    48e8:	b	4bfc <BZ2_decompress+0x4b6c>
    48ec:	str	wzr, [sp, #380]
    48f0:	b	49cc <BZ2_decompress+0x493c>
    48f4:	ldr	x0, [sp, #24]
    48f8:	ldr	x1, [x0, #3152]
    48fc:	ldrsw	x0, [sp, #380]
    4900:	lsl	x0, x0, #2
    4904:	add	x0, x1, x0
    4908:	ldr	w0, [x0]
    490c:	strb	w0, [sp, #399]
    4910:	ldr	x0, [sp, #24]
    4914:	ldr	x1, [x0, #3152]
    4918:	ldrb	w0, [sp, #399]
    491c:	ldr	x2, [sp, #24]
    4920:	sxtw	x0, w0
    4924:	add	x0, x0, #0x110
    4928:	lsl	x0, x0, #2
    492c:	add	x0, x2, x0
    4930:	ldr	w0, [x0, #8]
    4934:	sxtw	x0, w0
    4938:	lsl	x0, x0, #2
    493c:	add	x0, x1, x0
    4940:	ldr	w1, [x0]
    4944:	ldr	w0, [sp, #380]
    4948:	lsl	w0, w0, #8
    494c:	mov	w4, w0
    4950:	ldr	x0, [sp, #24]
    4954:	ldr	x2, [x0, #3152]
    4958:	ldrb	w0, [sp, #399]
    495c:	ldr	x3, [sp, #24]
    4960:	sxtw	x0, w0
    4964:	add	x0, x0, #0x110
    4968:	lsl	x0, x0, #2
    496c:	add	x0, x3, x0
    4970:	ldr	w0, [x0, #8]
    4974:	sxtw	x0, w0
    4978:	lsl	x0, x0, #2
    497c:	add	x0, x2, x0
    4980:	orr	w1, w1, w4
    4984:	str	w1, [x0]
    4988:	ldrb	w3, [sp, #399]
    498c:	ldr	x1, [sp, #24]
    4990:	sxtw	x0, w3
    4994:	add	x0, x0, #0x110
    4998:	lsl	x0, x0, #2
    499c:	add	x0, x1, x0
    49a0:	ldr	w0, [x0, #8]
    49a4:	add	w1, w0, #0x1
    49a8:	ldr	x2, [sp, #24]
    49ac:	sxtw	x0, w3
    49b0:	add	x0, x0, #0x110
    49b4:	lsl	x0, x0, #2
    49b8:	add	x0, x2, x0
    49bc:	str	w1, [x0, #8]
    49c0:	ldr	w0, [sp, #380]
    49c4:	add	w0, w0, #0x1
    49c8:	str	w0, [sp, #380]
    49cc:	ldr	w1, [sp, #380]
    49d0:	ldr	w0, [sp, #336]
    49d4:	cmp	w1, w0
    49d8:	b.lt	48f4 <BZ2_decompress+0x4864>  // b.tstop
    49dc:	ldr	x0, [sp, #24]
    49e0:	ldr	x1, [x0, #3152]
    49e4:	ldr	x0, [sp, #24]
    49e8:	ldr	w0, [x0, #56]
    49ec:	sxtw	x0, w0
    49f0:	lsl	x0, x0, #2
    49f4:	add	x0, x1, x0
    49f8:	ldr	w0, [x0]
    49fc:	lsr	w1, w0, #8
    4a00:	ldr	x0, [sp, #24]
    4a04:	str	w1, [x0, #60]
    4a08:	ldr	x0, [sp, #24]
    4a0c:	str	wzr, [x0, #1092]
    4a10:	ldr	x0, [sp, #24]
    4a14:	ldrb	w0, [x0, #20]
    4a18:	cmp	w0, #0x0
    4a1c:	b.eq	4b64 <BZ2_decompress+0x4ad4>  // b.none
    4a20:	ldr	x0, [sp, #24]
    4a24:	str	wzr, [x0, #24]
    4a28:	ldr	x0, [sp, #24]
    4a2c:	str	wzr, [x0, #28]
    4a30:	ldr	x0, [sp, #24]
    4a34:	ldr	w1, [x0, #60]
    4a38:	ldr	x0, [sp, #24]
    4a3c:	ldr	w0, [x0, #40]
    4a40:	mov	w2, w0
    4a44:	mov	w0, #0x86a0                	// #34464
    4a48:	movk	w0, #0x1, lsl #16
    4a4c:	mul	w0, w2, w0
    4a50:	cmp	w1, w0
    4a54:	b.cc	4a60 <BZ2_decompress+0x49d0>  // b.lo, b.ul, b.last
    4a58:	mov	w0, #0x1                   	// #1
    4a5c:	b	58bc <BZ2_decompress+0x582c>
    4a60:	ldr	x0, [sp, #24]
    4a64:	ldr	x1, [x0, #3152]
    4a68:	ldr	x0, [sp, #24]
    4a6c:	ldr	w0, [x0, #60]
    4a70:	mov	w0, w0
    4a74:	lsl	x0, x0, #2
    4a78:	add	x0, x1, x0
    4a7c:	ldr	w1, [x0]
    4a80:	ldr	x0, [sp, #24]
    4a84:	str	w1, [x0, #60]
    4a88:	ldr	x0, [sp, #24]
    4a8c:	ldr	w0, [x0, #60]
    4a90:	and	w0, w0, #0xff
    4a94:	mov	w1, w0
    4a98:	ldr	x0, [sp, #24]
    4a9c:	str	w1, [x0, #64]
    4aa0:	ldr	x0, [sp, #24]
    4aa4:	ldr	w0, [x0, #60]
    4aa8:	lsr	w1, w0, #8
    4aac:	ldr	x0, [sp, #24]
    4ab0:	str	w1, [x0, #60]
    4ab4:	ldr	x0, [sp, #24]
    4ab8:	ldr	w0, [x0, #1092]
    4abc:	add	w1, w0, #0x1
    4ac0:	ldr	x0, [sp, #24]
    4ac4:	str	w1, [x0, #1092]
    4ac8:	ldr	x0, [sp, #24]
    4acc:	ldr	w0, [x0, #24]
    4ad0:	cmp	w0, #0x0
    4ad4:	b.ne	4b24 <BZ2_decompress+0x4a94>  // b.any
    4ad8:	ldr	x0, [sp, #24]
    4adc:	ldr	w1, [x0, #28]
    4ae0:	adrp	x0, 0 <BZ2_rNums>
    4ae4:	add	x0, x0, #0x0
    4ae8:	sxtw	x1, w1
    4aec:	ldr	w1, [x0, x1, lsl #2]
    4af0:	ldr	x0, [sp, #24]
    4af4:	str	w1, [x0, #24]
    4af8:	ldr	x0, [sp, #24]
    4afc:	ldr	w0, [x0, #28]
    4b00:	add	w1, w0, #0x1
    4b04:	ldr	x0, [sp, #24]
    4b08:	str	w1, [x0, #28]
    4b0c:	ldr	x0, [sp, #24]
    4b10:	ldr	w0, [x0, #28]
    4b14:	cmp	w0, #0x200
    4b18:	b.ne	4b24 <BZ2_decompress+0x4a94>  // b.any
    4b1c:	ldr	x0, [sp, #24]
    4b20:	str	wzr, [x0, #28]
    4b24:	ldr	x0, [sp, #24]
    4b28:	ldr	w0, [x0, #24]
    4b2c:	sub	w1, w0, #0x1
    4b30:	ldr	x0, [sp, #24]
    4b34:	str	w1, [x0, #24]
    4b38:	ldr	x0, [sp, #24]
    4b3c:	ldr	w0, [x0, #64]
    4b40:	ldr	x1, [sp, #24]
    4b44:	ldr	w1, [x1, #24]
    4b48:	cmp	w1, #0x1
    4b4c:	cset	w1, eq  // eq = none
    4b50:	and	w1, w1, #0xff
    4b54:	eor	w1, w0, w1
    4b58:	ldr	x0, [sp, #24]
    4b5c:	str	w1, [x0, #64]
    4b60:	b	4bfc <BZ2_decompress+0x4b6c>
    4b64:	ldr	x0, [sp, #24]
    4b68:	ldr	w1, [x0, #60]
    4b6c:	ldr	x0, [sp, #24]
    4b70:	ldr	w0, [x0, #40]
    4b74:	mov	w2, w0
    4b78:	mov	w0, #0x86a0                	// #34464
    4b7c:	movk	w0, #0x1, lsl #16
    4b80:	mul	w0, w2, w0
    4b84:	cmp	w1, w0
    4b88:	b.cc	4b94 <BZ2_decompress+0x4b04>  // b.lo, b.ul, b.last
    4b8c:	mov	w0, #0x1                   	// #1
    4b90:	b	58bc <BZ2_decompress+0x582c>
    4b94:	ldr	x0, [sp, #24]
    4b98:	ldr	x1, [x0, #3152]
    4b9c:	ldr	x0, [sp, #24]
    4ba0:	ldr	w0, [x0, #60]
    4ba4:	mov	w0, w0
    4ba8:	lsl	x0, x0, #2
    4bac:	add	x0, x1, x0
    4bb0:	ldr	w1, [x0]
    4bb4:	ldr	x0, [sp, #24]
    4bb8:	str	w1, [x0, #60]
    4bbc:	ldr	x0, [sp, #24]
    4bc0:	ldr	w0, [x0, #60]
    4bc4:	and	w0, w0, #0xff
    4bc8:	mov	w1, w0
    4bcc:	ldr	x0, [sp, #24]
    4bd0:	str	w1, [x0, #64]
    4bd4:	ldr	x0, [sp, #24]
    4bd8:	ldr	w0, [x0, #60]
    4bdc:	lsr	w1, w0, #8
    4be0:	ldr	x0, [sp, #24]
    4be4:	str	w1, [x0, #60]
    4be8:	ldr	x0, [sp, #24]
    4bec:	ldr	w0, [x0, #1092]
    4bf0:	add	w1, w0, #0x1
    4bf4:	ldr	x0, [sp, #24]
    4bf8:	str	w1, [x0, #1092]
    4bfc:	str	wzr, [sp, #392]
    4c00:	b	5738 <BZ2_decompress+0x56a8>
    4c04:	ldr	x0, [sp, #24]
    4c08:	mov	w1, #0x2a                  	// #42
    4c0c:	str	w1, [x0, #8]
    4c10:	ldr	x0, [sp, #24]
    4c14:	ldr	w0, [x0, #36]
    4c18:	cmp	w0, #0x7
    4c1c:	b.le	4c70 <BZ2_decompress+0x4be0>
    4c20:	ldr	x0, [sp, #24]
    4c24:	ldr	w1, [x0, #32]
    4c28:	ldr	x0, [sp, #24]
    4c2c:	ldr	w0, [x0, #36]
    4c30:	sub	w0, w0, #0x8
    4c34:	lsr	w0, w1, w0
    4c38:	and	w0, w0, #0xff
    4c3c:	str	w0, [sp, #80]
    4c40:	ldr	x0, [sp, #24]
    4c44:	ldr	w0, [x0, #36]
    4c48:	sub	w1, w0, #0x8
    4c4c:	ldr	x0, [sp, #24]
    4c50:	str	w1, [x0, #36]
    4c54:	ldr	w0, [sp, #80]
    4c58:	strb	w0, [sp, #399]
    4c5c:	nop
    4c60:	ldrb	w0, [sp, #399]
    4c64:	cmp	w0, #0x72
    4c68:	b.eq	4d3c <BZ2_decompress+0x4cac>  // b.none
    4c6c:	b	4d30 <BZ2_decompress+0x4ca0>
    4c70:	ldr	x0, [sp, #24]
    4c74:	ldr	x0, [x0]
    4c78:	ldr	w0, [x0, #8]
    4c7c:	cmp	w0, #0x0
    4c80:	b.ne	4c8c <BZ2_decompress+0x4bfc>  // b.any
    4c84:	str	wzr, [sp, #392]
    4c88:	b	5738 <BZ2_decompress+0x56a8>
    4c8c:	ldr	x0, [sp, #24]
    4c90:	ldr	w0, [x0, #32]
    4c94:	lsl	w0, w0, #8
    4c98:	ldr	x1, [sp, #24]
    4c9c:	ldr	x1, [x1]
    4ca0:	ldr	x1, [x1]
    4ca4:	ldrb	w1, [x1]
    4ca8:	orr	w1, w0, w1
    4cac:	ldr	x0, [sp, #24]
    4cb0:	str	w1, [x0, #32]
    4cb4:	ldr	x0, [sp, #24]
    4cb8:	ldr	w0, [x0, #36]
    4cbc:	add	w1, w0, #0x8
    4cc0:	ldr	x0, [sp, #24]
    4cc4:	str	w1, [x0, #36]
    4cc8:	ldr	x0, [sp, #24]
    4ccc:	ldr	x0, [x0]
    4cd0:	ldr	x1, [x0]
    4cd4:	add	x1, x1, #0x1
    4cd8:	str	x1, [x0]
    4cdc:	ldr	x0, [sp, #24]
    4ce0:	ldr	x0, [x0]
    4ce4:	ldr	w1, [x0, #8]
    4ce8:	sub	w1, w1, #0x1
    4cec:	str	w1, [x0, #8]
    4cf0:	ldr	x0, [sp, #24]
    4cf4:	ldr	x0, [x0]
    4cf8:	ldr	w1, [x0, #12]
    4cfc:	add	w1, w1, #0x1
    4d00:	str	w1, [x0, #12]
    4d04:	ldr	x0, [sp, #24]
    4d08:	ldr	x0, [x0]
    4d0c:	ldr	w0, [x0, #12]
    4d10:	cmp	w0, #0x0
    4d14:	b.ne	4c10 <BZ2_decompress+0x4b80>  // b.any
    4d18:	ldr	x0, [sp, #24]
    4d1c:	ldr	x0, [x0]
    4d20:	ldr	w1, [x0, #16]
    4d24:	add	w1, w1, #0x1
    4d28:	str	w1, [x0, #16]
    4d2c:	b	4c10 <BZ2_decompress+0x4b80>
    4d30:	mov	w0, #0xfffffffc            	// #-4
    4d34:	str	w0, [sp, #392]
    4d38:	b	5738 <BZ2_decompress+0x56a8>
    4d3c:	ldr	x0, [sp, #24]
    4d40:	mov	w1, #0x2b                  	// #43
    4d44:	str	w1, [x0, #8]
    4d48:	ldr	x0, [sp, #24]
    4d4c:	ldr	w0, [x0, #36]
    4d50:	cmp	w0, #0x7
    4d54:	b.le	4da8 <BZ2_decompress+0x4d18>
    4d58:	ldr	x0, [sp, #24]
    4d5c:	ldr	w1, [x0, #32]
    4d60:	ldr	x0, [sp, #24]
    4d64:	ldr	w0, [x0, #36]
    4d68:	sub	w0, w0, #0x8
    4d6c:	lsr	w0, w1, w0
    4d70:	and	w0, w0, #0xff
    4d74:	str	w0, [sp, #76]
    4d78:	ldr	x0, [sp, #24]
    4d7c:	ldr	w0, [x0, #36]
    4d80:	sub	w1, w0, #0x8
    4d84:	ldr	x0, [sp, #24]
    4d88:	str	w1, [x0, #36]
    4d8c:	ldr	w0, [sp, #76]
    4d90:	strb	w0, [sp, #399]
    4d94:	nop
    4d98:	ldrb	w0, [sp, #399]
    4d9c:	cmp	w0, #0x45
    4da0:	b.eq	4e74 <BZ2_decompress+0x4de4>  // b.none
    4da4:	b	4e68 <BZ2_decompress+0x4dd8>
    4da8:	ldr	x0, [sp, #24]
    4dac:	ldr	x0, [x0]
    4db0:	ldr	w0, [x0, #8]
    4db4:	cmp	w0, #0x0
    4db8:	b.ne	4dc4 <BZ2_decompress+0x4d34>  // b.any
    4dbc:	str	wzr, [sp, #392]
    4dc0:	b	5738 <BZ2_decompress+0x56a8>
    4dc4:	ldr	x0, [sp, #24]
    4dc8:	ldr	w0, [x0, #32]
    4dcc:	lsl	w0, w0, #8
    4dd0:	ldr	x1, [sp, #24]
    4dd4:	ldr	x1, [x1]
    4dd8:	ldr	x1, [x1]
    4ddc:	ldrb	w1, [x1]
    4de0:	orr	w1, w0, w1
    4de4:	ldr	x0, [sp, #24]
    4de8:	str	w1, [x0, #32]
    4dec:	ldr	x0, [sp, #24]
    4df0:	ldr	w0, [x0, #36]
    4df4:	add	w1, w0, #0x8
    4df8:	ldr	x0, [sp, #24]
    4dfc:	str	w1, [x0, #36]
    4e00:	ldr	x0, [sp, #24]
    4e04:	ldr	x0, [x0]
    4e08:	ldr	x1, [x0]
    4e0c:	add	x1, x1, #0x1
    4e10:	str	x1, [x0]
    4e14:	ldr	x0, [sp, #24]
    4e18:	ldr	x0, [x0]
    4e1c:	ldr	w1, [x0, #8]
    4e20:	sub	w1, w1, #0x1
    4e24:	str	w1, [x0, #8]
    4e28:	ldr	x0, [sp, #24]
    4e2c:	ldr	x0, [x0]
    4e30:	ldr	w1, [x0, #12]
    4e34:	add	w1, w1, #0x1
    4e38:	str	w1, [x0, #12]
    4e3c:	ldr	x0, [sp, #24]
    4e40:	ldr	x0, [x0]
    4e44:	ldr	w0, [x0, #12]
    4e48:	cmp	w0, #0x0
    4e4c:	b.ne	4d48 <BZ2_decompress+0x4cb8>  // b.any
    4e50:	ldr	x0, [sp, #24]
    4e54:	ldr	x0, [x0]
    4e58:	ldr	w1, [x0, #16]
    4e5c:	add	w1, w1, #0x1
    4e60:	str	w1, [x0, #16]
    4e64:	b	4d48 <BZ2_decompress+0x4cb8>
    4e68:	mov	w0, #0xfffffffc            	// #-4
    4e6c:	str	w0, [sp, #392]
    4e70:	b	5738 <BZ2_decompress+0x56a8>
    4e74:	ldr	x0, [sp, #24]
    4e78:	mov	w1, #0x2c                  	// #44
    4e7c:	str	w1, [x0, #8]
    4e80:	ldr	x0, [sp, #24]
    4e84:	ldr	w0, [x0, #36]
    4e88:	cmp	w0, #0x7
    4e8c:	b.le	4ee0 <BZ2_decompress+0x4e50>
    4e90:	ldr	x0, [sp, #24]
    4e94:	ldr	w1, [x0, #32]
    4e98:	ldr	x0, [sp, #24]
    4e9c:	ldr	w0, [x0, #36]
    4ea0:	sub	w0, w0, #0x8
    4ea4:	lsr	w0, w1, w0
    4ea8:	and	w0, w0, #0xff
    4eac:	str	w0, [sp, #72]
    4eb0:	ldr	x0, [sp, #24]
    4eb4:	ldr	w0, [x0, #36]
    4eb8:	sub	w1, w0, #0x8
    4ebc:	ldr	x0, [sp, #24]
    4ec0:	str	w1, [x0, #36]
    4ec4:	ldr	w0, [sp, #72]
    4ec8:	strb	w0, [sp, #399]
    4ecc:	nop
    4ed0:	ldrb	w0, [sp, #399]
    4ed4:	cmp	w0, #0x38
    4ed8:	b.eq	4fac <BZ2_decompress+0x4f1c>  // b.none
    4edc:	b	4fa0 <BZ2_decompress+0x4f10>
    4ee0:	ldr	x0, [sp, #24]
    4ee4:	ldr	x0, [x0]
    4ee8:	ldr	w0, [x0, #8]
    4eec:	cmp	w0, #0x0
    4ef0:	b.ne	4efc <BZ2_decompress+0x4e6c>  // b.any
    4ef4:	str	wzr, [sp, #392]
    4ef8:	b	5738 <BZ2_decompress+0x56a8>
    4efc:	ldr	x0, [sp, #24]
    4f00:	ldr	w0, [x0, #32]
    4f04:	lsl	w0, w0, #8
    4f08:	ldr	x1, [sp, #24]
    4f0c:	ldr	x1, [x1]
    4f10:	ldr	x1, [x1]
    4f14:	ldrb	w1, [x1]
    4f18:	orr	w1, w0, w1
    4f1c:	ldr	x0, [sp, #24]
    4f20:	str	w1, [x0, #32]
    4f24:	ldr	x0, [sp, #24]
    4f28:	ldr	w0, [x0, #36]
    4f2c:	add	w1, w0, #0x8
    4f30:	ldr	x0, [sp, #24]
    4f34:	str	w1, [x0, #36]
    4f38:	ldr	x0, [sp, #24]
    4f3c:	ldr	x0, [x0]
    4f40:	ldr	x1, [x0]
    4f44:	add	x1, x1, #0x1
    4f48:	str	x1, [x0]
    4f4c:	ldr	x0, [sp, #24]
    4f50:	ldr	x0, [x0]
    4f54:	ldr	w1, [x0, #8]
    4f58:	sub	w1, w1, #0x1
    4f5c:	str	w1, [x0, #8]
    4f60:	ldr	x0, [sp, #24]
    4f64:	ldr	x0, [x0]
    4f68:	ldr	w1, [x0, #12]
    4f6c:	add	w1, w1, #0x1
    4f70:	str	w1, [x0, #12]
    4f74:	ldr	x0, [sp, #24]
    4f78:	ldr	x0, [x0]
    4f7c:	ldr	w0, [x0, #12]
    4f80:	cmp	w0, #0x0
    4f84:	b.ne	4e80 <BZ2_decompress+0x4df0>  // b.any
    4f88:	ldr	x0, [sp, #24]
    4f8c:	ldr	x0, [x0]
    4f90:	ldr	w1, [x0, #16]
    4f94:	add	w1, w1, #0x1
    4f98:	str	w1, [x0, #16]
    4f9c:	b	4e80 <BZ2_decompress+0x4df0>
    4fa0:	mov	w0, #0xfffffffc            	// #-4
    4fa4:	str	w0, [sp, #392]
    4fa8:	b	5738 <BZ2_decompress+0x56a8>
    4fac:	ldr	x0, [sp, #24]
    4fb0:	mov	w1, #0x2d                  	// #45
    4fb4:	str	w1, [x0, #8]
    4fb8:	ldr	x0, [sp, #24]
    4fbc:	ldr	w0, [x0, #36]
    4fc0:	cmp	w0, #0x7
    4fc4:	b.le	5018 <BZ2_decompress+0x4f88>
    4fc8:	ldr	x0, [sp, #24]
    4fcc:	ldr	w1, [x0, #32]
    4fd0:	ldr	x0, [sp, #24]
    4fd4:	ldr	w0, [x0, #36]
    4fd8:	sub	w0, w0, #0x8
    4fdc:	lsr	w0, w1, w0
    4fe0:	and	w0, w0, #0xff
    4fe4:	str	w0, [sp, #68]
    4fe8:	ldr	x0, [sp, #24]
    4fec:	ldr	w0, [x0, #36]
    4ff0:	sub	w1, w0, #0x8
    4ff4:	ldr	x0, [sp, #24]
    4ff8:	str	w1, [x0, #36]
    4ffc:	ldr	w0, [sp, #68]
    5000:	strb	w0, [sp, #399]
    5004:	nop
    5008:	ldrb	w0, [sp, #399]
    500c:	cmp	w0, #0x50
    5010:	b.eq	50e4 <BZ2_decompress+0x5054>  // b.none
    5014:	b	50d8 <BZ2_decompress+0x5048>
    5018:	ldr	x0, [sp, #24]
    501c:	ldr	x0, [x0]
    5020:	ldr	w0, [x0, #8]
    5024:	cmp	w0, #0x0
    5028:	b.ne	5034 <BZ2_decompress+0x4fa4>  // b.any
    502c:	str	wzr, [sp, #392]
    5030:	b	5738 <BZ2_decompress+0x56a8>
    5034:	ldr	x0, [sp, #24]
    5038:	ldr	w0, [x0, #32]
    503c:	lsl	w0, w0, #8
    5040:	ldr	x1, [sp, #24]
    5044:	ldr	x1, [x1]
    5048:	ldr	x1, [x1]
    504c:	ldrb	w1, [x1]
    5050:	orr	w1, w0, w1
    5054:	ldr	x0, [sp, #24]
    5058:	str	w1, [x0, #32]
    505c:	ldr	x0, [sp, #24]
    5060:	ldr	w0, [x0, #36]
    5064:	add	w1, w0, #0x8
    5068:	ldr	x0, [sp, #24]
    506c:	str	w1, [x0, #36]
    5070:	ldr	x0, [sp, #24]
    5074:	ldr	x0, [x0]
    5078:	ldr	x1, [x0]
    507c:	add	x1, x1, #0x1
    5080:	str	x1, [x0]
    5084:	ldr	x0, [sp, #24]
    5088:	ldr	x0, [x0]
    508c:	ldr	w1, [x0, #8]
    5090:	sub	w1, w1, #0x1
    5094:	str	w1, [x0, #8]
    5098:	ldr	x0, [sp, #24]
    509c:	ldr	x0, [x0]
    50a0:	ldr	w1, [x0, #12]
    50a4:	add	w1, w1, #0x1
    50a8:	str	w1, [x0, #12]
    50ac:	ldr	x0, [sp, #24]
    50b0:	ldr	x0, [x0]
    50b4:	ldr	w0, [x0, #12]
    50b8:	cmp	w0, #0x0
    50bc:	b.ne	4fb8 <BZ2_decompress+0x4f28>  // b.any
    50c0:	ldr	x0, [sp, #24]
    50c4:	ldr	x0, [x0]
    50c8:	ldr	w1, [x0, #16]
    50cc:	add	w1, w1, #0x1
    50d0:	str	w1, [x0, #16]
    50d4:	b	4fb8 <BZ2_decompress+0x4f28>
    50d8:	mov	w0, #0xfffffffc            	// #-4
    50dc:	str	w0, [sp, #392]
    50e0:	b	5738 <BZ2_decompress+0x56a8>
    50e4:	ldr	x0, [sp, #24]
    50e8:	mov	w1, #0x2e                  	// #46
    50ec:	str	w1, [x0, #8]
    50f0:	ldr	x0, [sp, #24]
    50f4:	ldr	w0, [x0, #36]
    50f8:	cmp	w0, #0x7
    50fc:	b.le	5150 <BZ2_decompress+0x50c0>
    5100:	ldr	x0, [sp, #24]
    5104:	ldr	w1, [x0, #32]
    5108:	ldr	x0, [sp, #24]
    510c:	ldr	w0, [x0, #36]
    5110:	sub	w0, w0, #0x8
    5114:	lsr	w0, w1, w0
    5118:	and	w0, w0, #0xff
    511c:	str	w0, [sp, #64]
    5120:	ldr	x0, [sp, #24]
    5124:	ldr	w0, [x0, #36]
    5128:	sub	w1, w0, #0x8
    512c:	ldr	x0, [sp, #24]
    5130:	str	w1, [x0, #36]
    5134:	ldr	w0, [sp, #64]
    5138:	strb	w0, [sp, #399]
    513c:	nop
    5140:	ldrb	w0, [sp, #399]
    5144:	cmp	w0, #0x90
    5148:	b.eq	521c <BZ2_decompress+0x518c>  // b.none
    514c:	b	5210 <BZ2_decompress+0x5180>
    5150:	ldr	x0, [sp, #24]
    5154:	ldr	x0, [x0]
    5158:	ldr	w0, [x0, #8]
    515c:	cmp	w0, #0x0
    5160:	b.ne	516c <BZ2_decompress+0x50dc>  // b.any
    5164:	str	wzr, [sp, #392]
    5168:	b	5738 <BZ2_decompress+0x56a8>
    516c:	ldr	x0, [sp, #24]
    5170:	ldr	w0, [x0, #32]
    5174:	lsl	w0, w0, #8
    5178:	ldr	x1, [sp, #24]
    517c:	ldr	x1, [x1]
    5180:	ldr	x1, [x1]
    5184:	ldrb	w1, [x1]
    5188:	orr	w1, w0, w1
    518c:	ldr	x0, [sp, #24]
    5190:	str	w1, [x0, #32]
    5194:	ldr	x0, [sp, #24]
    5198:	ldr	w0, [x0, #36]
    519c:	add	w1, w0, #0x8
    51a0:	ldr	x0, [sp, #24]
    51a4:	str	w1, [x0, #36]
    51a8:	ldr	x0, [sp, #24]
    51ac:	ldr	x0, [x0]
    51b0:	ldr	x1, [x0]
    51b4:	add	x1, x1, #0x1
    51b8:	str	x1, [x0]
    51bc:	ldr	x0, [sp, #24]
    51c0:	ldr	x0, [x0]
    51c4:	ldr	w1, [x0, #8]
    51c8:	sub	w1, w1, #0x1
    51cc:	str	w1, [x0, #8]
    51d0:	ldr	x0, [sp, #24]
    51d4:	ldr	x0, [x0]
    51d8:	ldr	w1, [x0, #12]
    51dc:	add	w1, w1, #0x1
    51e0:	str	w1, [x0, #12]
    51e4:	ldr	x0, [sp, #24]
    51e8:	ldr	x0, [x0]
    51ec:	ldr	w0, [x0, #12]
    51f0:	cmp	w0, #0x0
    51f4:	b.ne	50f0 <BZ2_decompress+0x5060>  // b.any
    51f8:	ldr	x0, [sp, #24]
    51fc:	ldr	x0, [x0]
    5200:	ldr	w1, [x0, #16]
    5204:	add	w1, w1, #0x1
    5208:	str	w1, [x0, #16]
    520c:	b	50f0 <BZ2_decompress+0x5060>
    5210:	mov	w0, #0xfffffffc            	// #-4
    5214:	str	w0, [sp, #392]
    5218:	b	5738 <BZ2_decompress+0x56a8>
    521c:	ldr	x0, [sp, #24]
    5220:	str	wzr, [x0, #3180]
    5224:	ldr	x0, [sp, #24]
    5228:	mov	w1, #0x2f                  	// #47
    522c:	str	w1, [x0, #8]
    5230:	ldr	x0, [sp, #24]
    5234:	ldr	w0, [x0, #36]
    5238:	cmp	w0, #0x7
    523c:	b.le	52a0 <BZ2_decompress+0x5210>
    5240:	ldr	x0, [sp, #24]
    5244:	ldr	w1, [x0, #32]
    5248:	ldr	x0, [sp, #24]
    524c:	ldr	w0, [x0, #36]
    5250:	sub	w0, w0, #0x8
    5254:	lsr	w0, w1, w0
    5258:	and	w0, w0, #0xff
    525c:	str	w0, [sp, #60]
    5260:	ldr	x0, [sp, #24]
    5264:	ldr	w0, [x0, #36]
    5268:	sub	w1, w0, #0x8
    526c:	ldr	x0, [sp, #24]
    5270:	str	w1, [x0, #36]
    5274:	ldr	w0, [sp, #60]
    5278:	strb	w0, [sp, #399]
    527c:	nop
    5280:	ldr	x0, [sp, #24]
    5284:	ldr	w0, [x0, #3180]
    5288:	lsl	w1, w0, #8
    528c:	ldrb	w0, [sp, #399]
    5290:	orr	w1, w1, w0
    5294:	ldr	x0, [sp, #24]
    5298:	str	w1, [x0, #3180]
    529c:	b	5360 <BZ2_decompress+0x52d0>
    52a0:	ldr	x0, [sp, #24]
    52a4:	ldr	x0, [x0]
    52a8:	ldr	w0, [x0, #8]
    52ac:	cmp	w0, #0x0
    52b0:	b.ne	52bc <BZ2_decompress+0x522c>  // b.any
    52b4:	str	wzr, [sp, #392]
    52b8:	b	5738 <BZ2_decompress+0x56a8>
    52bc:	ldr	x0, [sp, #24]
    52c0:	ldr	w0, [x0, #32]
    52c4:	lsl	w0, w0, #8
    52c8:	ldr	x1, [sp, #24]
    52cc:	ldr	x1, [x1]
    52d0:	ldr	x1, [x1]
    52d4:	ldrb	w1, [x1]
    52d8:	orr	w1, w0, w1
    52dc:	ldr	x0, [sp, #24]
    52e0:	str	w1, [x0, #32]
    52e4:	ldr	x0, [sp, #24]
    52e8:	ldr	w0, [x0, #36]
    52ec:	add	w1, w0, #0x8
    52f0:	ldr	x0, [sp, #24]
    52f4:	str	w1, [x0, #36]
    52f8:	ldr	x0, [sp, #24]
    52fc:	ldr	x0, [x0]
    5300:	ldr	x1, [x0]
    5304:	add	x1, x1, #0x1
    5308:	str	x1, [x0]
    530c:	ldr	x0, [sp, #24]
    5310:	ldr	x0, [x0]
    5314:	ldr	w1, [x0, #8]
    5318:	sub	w1, w1, #0x1
    531c:	str	w1, [x0, #8]
    5320:	ldr	x0, [sp, #24]
    5324:	ldr	x0, [x0]
    5328:	ldr	w1, [x0, #12]
    532c:	add	w1, w1, #0x1
    5330:	str	w1, [x0, #12]
    5334:	ldr	x0, [sp, #24]
    5338:	ldr	x0, [x0]
    533c:	ldr	w0, [x0, #12]
    5340:	cmp	w0, #0x0
    5344:	b.ne	5230 <BZ2_decompress+0x51a0>  // b.any
    5348:	ldr	x0, [sp, #24]
    534c:	ldr	x0, [x0]
    5350:	ldr	w1, [x0, #16]
    5354:	add	w1, w1, #0x1
    5358:	str	w1, [x0, #16]
    535c:	b	5230 <BZ2_decompress+0x51a0>
    5360:	ldr	x0, [sp, #24]
    5364:	mov	w1, #0x30                  	// #48
    5368:	str	w1, [x0, #8]
    536c:	ldr	x0, [sp, #24]
    5370:	ldr	w0, [x0, #36]
    5374:	cmp	w0, #0x7
    5378:	b.le	53dc <BZ2_decompress+0x534c>
    537c:	ldr	x0, [sp, #24]
    5380:	ldr	w1, [x0, #32]
    5384:	ldr	x0, [sp, #24]
    5388:	ldr	w0, [x0, #36]
    538c:	sub	w0, w0, #0x8
    5390:	lsr	w0, w1, w0
    5394:	and	w0, w0, #0xff
    5398:	str	w0, [sp, #56]
    539c:	ldr	x0, [sp, #24]
    53a0:	ldr	w0, [x0, #36]
    53a4:	sub	w1, w0, #0x8
    53a8:	ldr	x0, [sp, #24]
    53ac:	str	w1, [x0, #36]
    53b0:	ldr	w0, [sp, #56]
    53b4:	strb	w0, [sp, #399]
    53b8:	nop
    53bc:	ldr	x0, [sp, #24]
    53c0:	ldr	w0, [x0, #3180]
    53c4:	lsl	w1, w0, #8
    53c8:	ldrb	w0, [sp, #399]
    53cc:	orr	w1, w1, w0
    53d0:	ldr	x0, [sp, #24]
    53d4:	str	w1, [x0, #3180]
    53d8:	b	549c <BZ2_decompress+0x540c>
    53dc:	ldr	x0, [sp, #24]
    53e0:	ldr	x0, [x0]
    53e4:	ldr	w0, [x0, #8]
    53e8:	cmp	w0, #0x0
    53ec:	b.ne	53f8 <BZ2_decompress+0x5368>  // b.any
    53f0:	str	wzr, [sp, #392]
    53f4:	b	5738 <BZ2_decompress+0x56a8>
    53f8:	ldr	x0, [sp, #24]
    53fc:	ldr	w0, [x0, #32]
    5400:	lsl	w0, w0, #8
    5404:	ldr	x1, [sp, #24]
    5408:	ldr	x1, [x1]
    540c:	ldr	x1, [x1]
    5410:	ldrb	w1, [x1]
    5414:	orr	w1, w0, w1
    5418:	ldr	x0, [sp, #24]
    541c:	str	w1, [x0, #32]
    5420:	ldr	x0, [sp, #24]
    5424:	ldr	w0, [x0, #36]
    5428:	add	w1, w0, #0x8
    542c:	ldr	x0, [sp, #24]
    5430:	str	w1, [x0, #36]
    5434:	ldr	x0, [sp, #24]
    5438:	ldr	x0, [x0]
    543c:	ldr	x1, [x0]
    5440:	add	x1, x1, #0x1
    5444:	str	x1, [x0]
    5448:	ldr	x0, [sp, #24]
    544c:	ldr	x0, [x0]
    5450:	ldr	w1, [x0, #8]
    5454:	sub	w1, w1, #0x1
    5458:	str	w1, [x0, #8]
    545c:	ldr	x0, [sp, #24]
    5460:	ldr	x0, [x0]
    5464:	ldr	w1, [x0, #12]
    5468:	add	w1, w1, #0x1
    546c:	str	w1, [x0, #12]
    5470:	ldr	x0, [sp, #24]
    5474:	ldr	x0, [x0]
    5478:	ldr	w0, [x0, #12]
    547c:	cmp	w0, #0x0
    5480:	b.ne	536c <BZ2_decompress+0x52dc>  // b.any
    5484:	ldr	x0, [sp, #24]
    5488:	ldr	x0, [x0]
    548c:	ldr	w1, [x0, #16]
    5490:	add	w1, w1, #0x1
    5494:	str	w1, [x0, #16]
    5498:	b	536c <BZ2_decompress+0x52dc>
    549c:	ldr	x0, [sp, #24]
    54a0:	mov	w1, #0x31                  	// #49
    54a4:	str	w1, [x0, #8]
    54a8:	ldr	x0, [sp, #24]
    54ac:	ldr	w0, [x0, #36]
    54b0:	cmp	w0, #0x7
    54b4:	b.le	5518 <BZ2_decompress+0x5488>
    54b8:	ldr	x0, [sp, #24]
    54bc:	ldr	w1, [x0, #32]
    54c0:	ldr	x0, [sp, #24]
    54c4:	ldr	w0, [x0, #36]
    54c8:	sub	w0, w0, #0x8
    54cc:	lsr	w0, w1, w0
    54d0:	and	w0, w0, #0xff
    54d4:	str	w0, [sp, #52]
    54d8:	ldr	x0, [sp, #24]
    54dc:	ldr	w0, [x0, #36]
    54e0:	sub	w1, w0, #0x8
    54e4:	ldr	x0, [sp, #24]
    54e8:	str	w1, [x0, #36]
    54ec:	ldr	w0, [sp, #52]
    54f0:	strb	w0, [sp, #399]
    54f4:	nop
    54f8:	ldr	x0, [sp, #24]
    54fc:	ldr	w0, [x0, #3180]
    5500:	lsl	w1, w0, #8
    5504:	ldrb	w0, [sp, #399]
    5508:	orr	w1, w1, w0
    550c:	ldr	x0, [sp, #24]
    5510:	str	w1, [x0, #3180]
    5514:	b	55d8 <BZ2_decompress+0x5548>
    5518:	ldr	x0, [sp, #24]
    551c:	ldr	x0, [x0]
    5520:	ldr	w0, [x0, #8]
    5524:	cmp	w0, #0x0
    5528:	b.ne	5534 <BZ2_decompress+0x54a4>  // b.any
    552c:	str	wzr, [sp, #392]
    5530:	b	5738 <BZ2_decompress+0x56a8>
    5534:	ldr	x0, [sp, #24]
    5538:	ldr	w0, [x0, #32]
    553c:	lsl	w0, w0, #8
    5540:	ldr	x1, [sp, #24]
    5544:	ldr	x1, [x1]
    5548:	ldr	x1, [x1]
    554c:	ldrb	w1, [x1]
    5550:	orr	w1, w0, w1
    5554:	ldr	x0, [sp, #24]
    5558:	str	w1, [x0, #32]
    555c:	ldr	x0, [sp, #24]
    5560:	ldr	w0, [x0, #36]
    5564:	add	w1, w0, #0x8
    5568:	ldr	x0, [sp, #24]
    556c:	str	w1, [x0, #36]
    5570:	ldr	x0, [sp, #24]
    5574:	ldr	x0, [x0]
    5578:	ldr	x1, [x0]
    557c:	add	x1, x1, #0x1
    5580:	str	x1, [x0]
    5584:	ldr	x0, [sp, #24]
    5588:	ldr	x0, [x0]
    558c:	ldr	w1, [x0, #8]
    5590:	sub	w1, w1, #0x1
    5594:	str	w1, [x0, #8]
    5598:	ldr	x0, [sp, #24]
    559c:	ldr	x0, [x0]
    55a0:	ldr	w1, [x0, #12]
    55a4:	add	w1, w1, #0x1
    55a8:	str	w1, [x0, #12]
    55ac:	ldr	x0, [sp, #24]
    55b0:	ldr	x0, [x0]
    55b4:	ldr	w0, [x0, #12]
    55b8:	cmp	w0, #0x0
    55bc:	b.ne	54a8 <BZ2_decompress+0x5418>  // b.any
    55c0:	ldr	x0, [sp, #24]
    55c4:	ldr	x0, [x0]
    55c8:	ldr	w1, [x0, #16]
    55cc:	add	w1, w1, #0x1
    55d0:	str	w1, [x0, #16]
    55d4:	b	54a8 <BZ2_decompress+0x5418>
    55d8:	ldr	x0, [sp, #24]
    55dc:	mov	w1, #0x32                  	// #50
    55e0:	str	w1, [x0, #8]
    55e4:	ldr	x0, [sp, #24]
    55e8:	ldr	w0, [x0, #36]
    55ec:	cmp	w0, #0x7
    55f0:	b.le	5668 <BZ2_decompress+0x55d8>
    55f4:	ldr	x0, [sp, #24]
    55f8:	ldr	w1, [x0, #32]
    55fc:	ldr	x0, [sp, #24]
    5600:	ldr	w0, [x0, #36]
    5604:	sub	w0, w0, #0x8
    5608:	lsr	w0, w1, w0
    560c:	and	w0, w0, #0xff
    5610:	str	w0, [sp, #48]
    5614:	ldr	x0, [sp, #24]
    5618:	ldr	w0, [x0, #36]
    561c:	sub	w1, w0, #0x8
    5620:	ldr	x0, [sp, #24]
    5624:	str	w1, [x0, #36]
    5628:	ldr	w0, [sp, #48]
    562c:	strb	w0, [sp, #399]
    5630:	nop
    5634:	ldr	x0, [sp, #24]
    5638:	ldr	w0, [x0, #3180]
    563c:	lsl	w1, w0, #8
    5640:	ldrb	w0, [sp, #399]
    5644:	orr	w1, w1, w0
    5648:	ldr	x0, [sp, #24]
    564c:	str	w1, [x0, #3180]
    5650:	ldr	x0, [sp, #24]
    5654:	mov	w1, #0x1                   	// #1
    5658:	str	w1, [x0, #8]
    565c:	mov	w0, #0x4                   	// #4
    5660:	str	w0, [sp, #392]
    5664:	b	5738 <BZ2_decompress+0x56a8>
    5668:	ldr	x0, [sp, #24]
    566c:	ldr	x0, [x0]
    5670:	ldr	w0, [x0, #8]
    5674:	cmp	w0, #0x0
    5678:	b.ne	5684 <BZ2_decompress+0x55f4>  // b.any
    567c:	str	wzr, [sp, #392]
    5680:	b	5738 <BZ2_decompress+0x56a8>
    5684:	ldr	x0, [sp, #24]
    5688:	ldr	w0, [x0, #32]
    568c:	lsl	w0, w0, #8
    5690:	ldr	x1, [sp, #24]
    5694:	ldr	x1, [x1]
    5698:	ldr	x1, [x1]
    569c:	ldrb	w1, [x1]
    56a0:	orr	w1, w0, w1
    56a4:	ldr	x0, [sp, #24]
    56a8:	str	w1, [x0, #32]
    56ac:	ldr	x0, [sp, #24]
    56b0:	ldr	w0, [x0, #36]
    56b4:	add	w1, w0, #0x8
    56b8:	ldr	x0, [sp, #24]
    56bc:	str	w1, [x0, #36]
    56c0:	ldr	x0, [sp, #24]
    56c4:	ldr	x0, [x0]
    56c8:	ldr	x1, [x0]
    56cc:	add	x1, x1, #0x1
    56d0:	str	x1, [x0]
    56d4:	ldr	x0, [sp, #24]
    56d8:	ldr	x0, [x0]
    56dc:	ldr	w1, [x0, #8]
    56e0:	sub	w1, w1, #0x1
    56e4:	str	w1, [x0, #8]
    56e8:	ldr	x0, [sp, #24]
    56ec:	ldr	x0, [x0]
    56f0:	ldr	w1, [x0, #12]
    56f4:	add	w1, w1, #0x1
    56f8:	str	w1, [x0, #12]
    56fc:	ldr	x0, [sp, #24]
    5700:	ldr	x0, [x0]
    5704:	ldr	w0, [x0, #12]
    5708:	cmp	w0, #0x0
    570c:	b.ne	55e4 <BZ2_decompress+0x5554>  // b.any
    5710:	ldr	x0, [sp, #24]
    5714:	ldr	x0, [x0]
    5718:	ldr	w1, [x0, #16]
    571c:	add	w1, w1, #0x1
    5720:	str	w1, [x0, #16]
    5724:	b	55e4 <BZ2_decompress+0x5554>
    5728:	mov	w0, #0xfa1                 	// #4001
    572c:	bl	0 <BZ2_bz__AssertH__fail>
    5730:	mov	w0, #0xfa2                 	// #4002
    5734:	bl	0 <BZ2_bz__AssertH__fail>
    5738:	ldr	x0, [sp, #24]
    573c:	add	x0, x0, #0xc, lsl #12
    5740:	ldr	w1, [sp, #380]
    5744:	str	w1, [x0, #14884]
    5748:	ldr	x0, [sp, #24]
    574c:	add	x0, x0, #0xc, lsl #12
    5750:	ldr	w1, [sp, #376]
    5754:	str	w1, [x0, #14888]
    5758:	ldr	x0, [sp, #24]
    575c:	add	x0, x0, #0xc, lsl #12
    5760:	ldr	w1, [sp, #372]
    5764:	str	w1, [x0, #14892]
    5768:	ldr	x0, [sp, #24]
    576c:	add	x0, x0, #0xc, lsl #12
    5770:	ldr	w1, [sp, #368]
    5774:	str	w1, [x0, #14896]
    5778:	ldr	x0, [sp, #24]
    577c:	add	x0, x0, #0xc, lsl #12
    5780:	ldr	w1, [sp, #364]
    5784:	str	w1, [x0, #14900]
    5788:	ldr	x0, [sp, #24]
    578c:	add	x0, x0, #0xc, lsl #12
    5790:	ldr	w1, [sp, #360]
    5794:	str	w1, [x0, #14904]
    5798:	ldr	x0, [sp, #24]
    579c:	add	x0, x0, #0xc, lsl #12
    57a0:	ldr	w1, [sp, #356]
    57a4:	str	w1, [x0, #14908]
    57a8:	ldr	x0, [sp, #24]
    57ac:	add	x0, x0, #0xc, lsl #12
    57b0:	ldr	w1, [sp, #352]
    57b4:	str	w1, [x0, #14912]
    57b8:	ldr	x0, [sp, #24]
    57bc:	add	x0, x0, #0xc, lsl #12
    57c0:	ldr	w1, [sp, #348]
    57c4:	str	w1, [x0, #14916]
    57c8:	ldr	x0, [sp, #24]
    57cc:	add	x0, x0, #0xc, lsl #12
    57d0:	ldr	w1, [sp, #344]
    57d4:	str	w1, [x0, #14920]
    57d8:	ldr	x0, [sp, #24]
    57dc:	add	x0, x0, #0xc, lsl #12
    57e0:	ldr	w1, [sp, #340]
    57e4:	str	w1, [x0, #14924]
    57e8:	ldr	x0, [sp, #24]
    57ec:	add	x0, x0, #0xc, lsl #12
    57f0:	ldr	w1, [sp, #336]
    57f4:	str	w1, [x0, #14928]
    57f8:	ldr	x0, [sp, #24]
    57fc:	add	x0, x0, #0xc, lsl #12
    5800:	ldr	w1, [sp, #332]
    5804:	str	w1, [x0, #14932]
    5808:	ldr	x0, [sp, #24]
    580c:	add	x0, x0, #0xc, lsl #12
    5810:	ldr	w1, [sp, #328]
    5814:	str	w1, [x0, #14936]
    5818:	ldr	x0, [sp, #24]
    581c:	add	x0, x0, #0xc, lsl #12
    5820:	ldr	w1, [sp, #324]
    5824:	str	w1, [x0, #14940]
    5828:	ldr	x0, [sp, #24]
    582c:	add	x0, x0, #0xc, lsl #12
    5830:	ldr	w1, [sp, #228]
    5834:	str	w1, [x0, #14944]
    5838:	ldr	x0, [sp, #24]
    583c:	add	x0, x0, #0xc, lsl #12
    5840:	ldr	w1, [sp, #320]
    5844:	str	w1, [x0, #14948]
    5848:	ldr	x0, [sp, #24]
    584c:	add	x0, x0, #0xc, lsl #12
    5850:	ldr	w1, [sp, #316]
    5854:	str	w1, [x0, #14952]
    5858:	ldr	x0, [sp, #24]
    585c:	add	x0, x0, #0xc, lsl #12
    5860:	ldr	w1, [sp, #312]
    5864:	str	w1, [x0, #14956]
    5868:	ldr	x0, [sp, #24]
    586c:	add	x0, x0, #0xc, lsl #12
    5870:	ldr	w1, [sp, #308]
    5874:	str	w1, [x0, #14960]
    5878:	ldr	x0, [sp, #24]
    587c:	add	x0, x0, #0xc, lsl #12
    5880:	ldr	w1, [sp, #304]
    5884:	str	w1, [x0, #14964]
    5888:	ldr	x0, [sp, #24]
    588c:	add	x0, x0, #0x8, lsl #12
    5890:	ldr	x1, [sp, #296]
    5894:	str	x1, [x0, #31352]
    5898:	ldr	x0, [sp, #24]
    589c:	add	x0, x0, #0x8, lsl #12
    58a0:	ldr	x1, [sp, #288]
    58a4:	str	x1, [x0, #31360]
    58a8:	ldr	x0, [sp, #24]
    58ac:	add	x0, x0, #0x8, lsl #12
    58b0:	ldr	x1, [sp, #280]
    58b4:	str	x1, [x0, #31368]
    58b8:	ldr	w0, [sp, #392]
    58bc:	ldp	x29, x30, [sp], #400
    58c0:	ret

bzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <BZ2_bz__AssertH__fail>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	str	x19, [sp, #16]
       c:	str	w0, [sp, #44]
      10:	adrp	x0, 0 <stderr>
      14:	add	x0, x0, #0x0
      18:	ldr	x19, [x0]
      1c:	bl	4e30 <BZ2_bzlibVersion>
      20:	mov	x3, x0
      24:	ldr	w2, [sp, #44]
      28:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
      2c:	add	x1, x0, #0x0
      30:	mov	x0, x19
      34:	bl	0 <fprintf>
      38:	ldr	w0, [sp, #44]
      3c:	cmp	w0, #0x3ef
      40:	b.ne	68 <BZ2_bz__AssertH__fail+0x68>  // b.any
      44:	adrp	x0, 0 <stderr>
      48:	add	x0, x0, #0x0
      4c:	ldr	x0, [x0]
      50:	mov	x3, x0
      54:	mov	x2, #0x420                 	// #1056
      58:	mov	x1, #0x1                   	// #1
      5c:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
      60:	add	x0, x0, #0x0
      64:	bl	0 <fwrite>
      68:	mov	w0, #0x3                   	// #3
      6c:	bl	0 <exit>

0000000000000070 <bz_config_ok>:
      70:	mov	w0, #0x1                   	// #1
      74:	ret

0000000000000078 <default_bzalloc>:
      78:	stp	x29, x30, [sp, #-48]!
      7c:	mov	x29, sp
      80:	str	x0, [sp, #24]
      84:	str	w1, [sp, #20]
      88:	str	w2, [sp, #16]
      8c:	ldr	w1, [sp, #20]
      90:	ldr	w0, [sp, #16]
      94:	mul	w0, w1, w0
      98:	sxtw	x0, w0
      9c:	bl	0 <malloc>
      a0:	str	x0, [sp, #40]
      a4:	ldr	x0, [sp, #40]
      a8:	ldp	x29, x30, [sp], #48
      ac:	ret

00000000000000b0 <default_bzfree>:
      b0:	stp	x29, x30, [sp, #-32]!
      b4:	mov	x29, sp
      b8:	str	x0, [sp, #24]
      bc:	str	x1, [sp, #16]
      c0:	ldr	x0, [sp, #16]
      c4:	cmp	x0, #0x0
      c8:	b.eq	d4 <default_bzfree+0x24>  // b.none
      cc:	ldr	x0, [sp, #16]
      d0:	bl	0 <free>
      d4:	nop
      d8:	ldp	x29, x30, [sp], #32
      dc:	ret

00000000000000e0 <prepare_new_block>:
      e0:	sub	sp, sp, #0x20
      e4:	str	x0, [sp, #8]
      e8:	ldr	x0, [sp, #8]
      ec:	str	wzr, [x0, #108]
      f0:	ldr	x0, [sp, #8]
      f4:	str	wzr, [x0, #116]
      f8:	ldr	x0, [sp, #8]
      fc:	str	wzr, [x0, #120]
     100:	ldr	x0, [sp, #8]
     104:	mov	w1, #0xffffffff            	// #-1
     108:	str	w1, [x0, #648]
     10c:	str	wzr, [sp, #28]
     110:	b	130 <prepare_new_block+0x50>
     114:	ldr	x1, [sp, #8]
     118:	ldrsw	x0, [sp, #28]
     11c:	add	x0, x1, x0
     120:	strb	wzr, [x0, #128]
     124:	ldr	w0, [sp, #28]
     128:	add	w0, w0, #0x1
     12c:	str	w0, [sp, #28]
     130:	ldr	w0, [sp, #28]
     134:	cmp	w0, #0xff
     138:	b.le	114 <prepare_new_block+0x34>
     13c:	ldr	x0, [sp, #8]
     140:	ldr	w0, [x0, #660]
     144:	add	w1, w0, #0x1
     148:	ldr	x0, [sp, #8]
     14c:	str	w1, [x0, #660]
     150:	nop
     154:	add	sp, sp, #0x20
     158:	ret

000000000000015c <init_RL>:
     15c:	sub	sp, sp, #0x10
     160:	str	x0, [sp, #8]
     164:	ldr	x0, [sp, #8]
     168:	mov	w1, #0x100                 	// #256
     16c:	str	w1, [x0, #92]
     170:	ldr	x0, [sp, #8]
     174:	str	wzr, [x0, #96]
     178:	nop
     17c:	add	sp, sp, #0x10
     180:	ret

0000000000000184 <isempty_RL>:
     184:	sub	sp, sp, #0x10
     188:	str	x0, [sp, #8]
     18c:	ldr	x0, [sp, #8]
     190:	ldr	w0, [x0, #92]
     194:	cmp	w0, #0xff
     198:	b.hi	1b4 <isempty_RL+0x30>  // b.pmore
     19c:	ldr	x0, [sp, #8]
     1a0:	ldr	w0, [x0, #96]
     1a4:	cmp	w0, #0x0
     1a8:	b.le	1b4 <isempty_RL+0x30>
     1ac:	mov	w0, #0x0                   	// #0
     1b0:	b	1b8 <isempty_RL+0x34>
     1b4:	mov	w0, #0x1                   	// #1
     1b8:	add	sp, sp, #0x10
     1bc:	ret

00000000000001c0 <BZ2_bzCompressInit>:
     1c0:	stp	x29, x30, [sp, #-64]!
     1c4:	mov	x29, sp
     1c8:	str	x0, [sp, #40]
     1cc:	str	w1, [sp, #36]
     1d0:	str	w2, [sp, #32]
     1d4:	str	w3, [sp, #28]
     1d8:	bl	70 <bz_config_ok>
     1dc:	cmp	w0, #0x0
     1e0:	b.ne	1ec <BZ2_bzCompressInit+0x2c>  // b.any
     1e4:	mov	w0, #0xfffffff7            	// #-9
     1e8:	b	558 <BZ2_bzCompressInit+0x398>
     1ec:	ldr	x0, [sp, #40]
     1f0:	cmp	x0, #0x0
     1f4:	b.eq	228 <BZ2_bzCompressInit+0x68>  // b.none
     1f8:	ldr	w0, [sp, #36]
     1fc:	cmp	w0, #0x0
     200:	b.le	228 <BZ2_bzCompressInit+0x68>
     204:	ldr	w0, [sp, #36]
     208:	cmp	w0, #0x9
     20c:	b.gt	228 <BZ2_bzCompressInit+0x68>
     210:	ldr	w0, [sp, #28]
     214:	cmp	w0, #0x0
     218:	b.lt	228 <BZ2_bzCompressInit+0x68>  // b.tstop
     21c:	ldr	w0, [sp, #28]
     220:	cmp	w0, #0xfa
     224:	b.le	230 <BZ2_bzCompressInit+0x70>
     228:	mov	w0, #0xfffffffe            	// #-2
     22c:	b	558 <BZ2_bzCompressInit+0x398>
     230:	ldr	w0, [sp, #28]
     234:	cmp	w0, #0x0
     238:	b.ne	244 <BZ2_bzCompressInit+0x84>  // b.any
     23c:	mov	w0, #0x1e                  	// #30
     240:	str	w0, [sp, #28]
     244:	ldr	x0, [sp, #40]
     248:	ldr	x0, [x0, #56]
     24c:	cmp	x0, #0x0
     250:	b.ne	264 <BZ2_bzCompressInit+0xa4>  // b.any
     254:	ldr	x0, [sp, #40]
     258:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
     25c:	add	x1, x1, #0x0
     260:	str	x1, [x0, #56]
     264:	ldr	x0, [sp, #40]
     268:	ldr	x0, [x0, #64]
     26c:	cmp	x0, #0x0
     270:	b.ne	284 <BZ2_bzCompressInit+0xc4>  // b.any
     274:	ldr	x0, [sp, #40]
     278:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
     27c:	add	x1, x1, #0x0
     280:	str	x1, [x0, #64]
     284:	ldr	x0, [sp, #40]
     288:	ldr	x3, [x0, #56]
     28c:	ldr	x0, [sp, #40]
     290:	ldr	x0, [x0, #72]
     294:	mov	w2, #0x1                   	// #1
     298:	mov	w1, #0xd9d8                	// #55768
     29c:	blr	x3
     2a0:	str	x0, [sp, #56]
     2a4:	ldr	x0, [sp, #56]
     2a8:	cmp	x0, #0x0
     2ac:	b.ne	2b8 <BZ2_bzCompressInit+0xf8>  // b.any
     2b0:	mov	w0, #0xfffffffd            	// #-3
     2b4:	b	558 <BZ2_bzCompressInit+0x398>
     2b8:	ldr	x0, [sp, #56]
     2bc:	ldr	x1, [sp, #40]
     2c0:	str	x1, [x0]
     2c4:	ldr	x0, [sp, #56]
     2c8:	str	xzr, [x0, #24]
     2cc:	ldr	x0, [sp, #56]
     2d0:	str	xzr, [x0, #32]
     2d4:	ldr	x0, [sp, #56]
     2d8:	str	xzr, [x0, #40]
     2dc:	ldr	w1, [sp, #36]
     2e0:	mov	w0, #0x86a0                	// #34464
     2e4:	movk	w0, #0x1, lsl #16
     2e8:	mul	w0, w1, w0
     2ec:	str	w0, [sp, #52]
     2f0:	ldr	x0, [sp, #40]
     2f4:	ldr	x3, [x0, #56]
     2f8:	ldr	x0, [sp, #40]
     2fc:	ldr	x0, [x0, #72]
     300:	ldrsw	x1, [sp, #52]
     304:	lsl	w1, w1, #2
     308:	mov	w2, #0x1                   	// #1
     30c:	blr	x3
     310:	mov	x1, x0
     314:	ldr	x0, [sp, #56]
     318:	str	x1, [x0, #24]
     31c:	ldr	x0, [sp, #40]
     320:	ldr	x3, [x0, #56]
     324:	ldr	x0, [sp, #40]
     328:	ldr	x4, [x0, #72]
     32c:	ldr	w0, [sp, #52]
     330:	add	w0, w0, #0x22
     334:	sxtw	x0, w0
     338:	lsl	w0, w0, #2
     33c:	mov	w2, #0x1                   	// #1
     340:	mov	w1, w0
     344:	mov	x0, x4
     348:	blr	x3
     34c:	mov	x1, x0
     350:	ldr	x0, [sp, #56]
     354:	str	x1, [x0, #32]
     358:	ldr	x0, [sp, #40]
     35c:	ldr	x3, [x0, #56]
     360:	ldr	x0, [sp, #40]
     364:	ldr	x0, [x0, #72]
     368:	mov	w2, #0x1                   	// #1
     36c:	mov	w1, #0x40004               	// #262148
     370:	blr	x3
     374:	mov	x1, x0
     378:	ldr	x0, [sp, #56]
     37c:	str	x1, [x0, #40]
     380:	ldr	x0, [sp, #56]
     384:	ldr	x0, [x0, #24]
     388:	cmp	x0, #0x0
     38c:	b.eq	3b0 <BZ2_bzCompressInit+0x1f0>  // b.none
     390:	ldr	x0, [sp, #56]
     394:	ldr	x0, [x0, #32]
     398:	cmp	x0, #0x0
     39c:	b.eq	3b0 <BZ2_bzCompressInit+0x1f0>  // b.none
     3a0:	ldr	x0, [sp, #56]
     3a4:	ldr	x0, [x0, #40]
     3a8:	cmp	x0, #0x0
     3ac:	b.ne	478 <BZ2_bzCompressInit+0x2b8>  // b.any
     3b0:	ldr	x0, [sp, #56]
     3b4:	ldr	x0, [x0, #24]
     3b8:	cmp	x0, #0x0
     3bc:	b.eq	3e4 <BZ2_bzCompressInit+0x224>  // b.none
     3c0:	ldr	x0, [sp, #40]
     3c4:	ldr	x2, [x0, #64]
     3c8:	ldr	x0, [sp, #40]
     3cc:	ldr	x3, [x0, #72]
     3d0:	ldr	x0, [sp, #56]
     3d4:	ldr	x0, [x0, #24]
     3d8:	mov	x1, x0
     3dc:	mov	x0, x3
     3e0:	blr	x2
     3e4:	ldr	x0, [sp, #56]
     3e8:	ldr	x0, [x0, #32]
     3ec:	cmp	x0, #0x0
     3f0:	b.eq	418 <BZ2_bzCompressInit+0x258>  // b.none
     3f4:	ldr	x0, [sp, #40]
     3f8:	ldr	x2, [x0, #64]
     3fc:	ldr	x0, [sp, #40]
     400:	ldr	x3, [x0, #72]
     404:	ldr	x0, [sp, #56]
     408:	ldr	x0, [x0, #32]
     40c:	mov	x1, x0
     410:	mov	x0, x3
     414:	blr	x2
     418:	ldr	x0, [sp, #56]
     41c:	ldr	x0, [x0, #40]
     420:	cmp	x0, #0x0
     424:	b.eq	44c <BZ2_bzCompressInit+0x28c>  // b.none
     428:	ldr	x0, [sp, #40]
     42c:	ldr	x2, [x0, #64]
     430:	ldr	x0, [sp, #40]
     434:	ldr	x3, [x0, #72]
     438:	ldr	x0, [sp, #56]
     43c:	ldr	x0, [x0, #40]
     440:	mov	x1, x0
     444:	mov	x0, x3
     448:	blr	x2
     44c:	ldr	x0, [sp, #56]
     450:	cmp	x0, #0x0
     454:	b.eq	470 <BZ2_bzCompressInit+0x2b0>  // b.none
     458:	ldr	x0, [sp, #40]
     45c:	ldr	x2, [x0, #64]
     460:	ldr	x0, [sp, #40]
     464:	ldr	x0, [x0, #72]
     468:	ldr	x1, [sp, #56]
     46c:	blr	x2
     470:	mov	w0, #0xfffffffd            	// #-3
     474:	b	558 <BZ2_bzCompressInit+0x398>
     478:	ldr	x0, [sp, #56]
     47c:	str	wzr, [x0, #660]
     480:	ldr	x0, [sp, #56]
     484:	mov	w1, #0x2                   	// #2
     488:	str	w1, [x0, #12]
     48c:	ldr	x0, [sp, #56]
     490:	mov	w1, #0x2                   	// #2
     494:	str	w1, [x0, #8]
     498:	ldr	x0, [sp, #56]
     49c:	str	wzr, [x0, #652]
     4a0:	ldr	x0, [sp, #56]
     4a4:	ldr	w1, [sp, #36]
     4a8:	str	w1, [x0, #664]
     4ac:	ldr	w1, [sp, #36]
     4b0:	mov	w0, #0x86a0                	// #34464
     4b4:	movk	w0, #0x1, lsl #16
     4b8:	mul	w0, w1, w0
     4bc:	sub	w1, w0, #0x13
     4c0:	ldr	x0, [sp, #56]
     4c4:	str	w1, [x0, #112]
     4c8:	ldr	x0, [sp, #56]
     4cc:	ldr	w1, [sp, #32]
     4d0:	str	w1, [x0, #656]
     4d4:	ldr	x0, [sp, #56]
     4d8:	ldr	w1, [sp, #28]
     4dc:	str	w1, [x0, #88]
     4e0:	ldr	x0, [sp, #56]
     4e4:	ldr	x1, [x0, #32]
     4e8:	ldr	x0, [sp, #56]
     4ec:	str	x1, [x0, #64]
     4f0:	ldr	x0, [sp, #56]
     4f4:	ldr	x1, [x0, #24]
     4f8:	ldr	x0, [sp, #56]
     4fc:	str	x1, [x0, #72]
     500:	ldr	x0, [sp, #56]
     504:	str	xzr, [x0, #80]
     508:	ldr	x0, [sp, #56]
     50c:	ldr	x1, [x0, #24]
     510:	ldr	x0, [sp, #56]
     514:	str	x1, [x0, #56]
     518:	ldr	x0, [sp, #40]
     51c:	ldr	x1, [sp, #56]
     520:	str	x1, [x0, #48]
     524:	ldr	x0, [sp, #40]
     528:	str	wzr, [x0, #12]
     52c:	ldr	x0, [sp, #40]
     530:	str	wzr, [x0, #16]
     534:	ldr	x0, [sp, #40]
     538:	str	wzr, [x0, #36]
     53c:	ldr	x0, [sp, #40]
     540:	str	wzr, [x0, #40]
     544:	ldr	x0, [sp, #56]
     548:	bl	15c <init_RL>
     54c:	ldr	x0, [sp, #56]
     550:	bl	e0 <prepare_new_block>
     554:	mov	w0, #0x0                   	// #0
     558:	ldp	x29, x30, [sp], #64
     55c:	ret

0000000000000560 <add_pair_to_block>:
     560:	sub	sp, sp, #0x20
     564:	str	x0, [sp, #8]
     568:	ldr	x0, [sp, #8]
     56c:	ldr	w0, [x0, #92]
     570:	strb	w0, [sp, #27]
     574:	str	wzr, [sp, #28]
     578:	b	5c4 <add_pair_to_block+0x64>
     57c:	ldr	x0, [sp, #8]
     580:	ldr	w0, [x0, #648]
     584:	lsl	w1, w0, #8
     588:	ldr	x0, [sp, #8]
     58c:	ldr	w0, [x0, #648]
     590:	lsr	w2, w0, #24
     594:	ldrb	w0, [sp, #27]
     598:	eor	w2, w2, w0
     59c:	adrp	x0, 0 <BZ2_crc32Table>
     5a0:	add	x0, x0, #0x0
     5a4:	mov	w2, w2
     5a8:	ldr	w0, [x0, x2, lsl #2]
     5ac:	eor	w1, w1, w0
     5b0:	ldr	x0, [sp, #8]
     5b4:	str	w1, [x0, #648]
     5b8:	ldr	w0, [sp, #28]
     5bc:	add	w0, w0, #0x1
     5c0:	str	w0, [sp, #28]
     5c4:	ldr	x0, [sp, #8]
     5c8:	ldr	w0, [x0, #96]
     5cc:	ldr	w1, [sp, #28]
     5d0:	cmp	w1, w0
     5d4:	b.lt	57c <add_pair_to_block+0x1c>  // b.tstop
     5d8:	ldr	x0, [sp, #8]
     5dc:	ldr	w0, [x0, #92]
     5e0:	ldr	x1, [sp, #8]
     5e4:	mov	w0, w0
     5e8:	add	x0, x1, x0
     5ec:	mov	w1, #0x1                   	// #1
     5f0:	strb	w1, [x0, #128]
     5f4:	ldr	x0, [sp, #8]
     5f8:	ldr	w0, [x0, #96]
     5fc:	cmp	w0, #0x3
     600:	b.eq	6c4 <add_pair_to_block+0x164>  // b.none
     604:	cmp	w0, #0x3
     608:	b.gt	764 <add_pair_to_block+0x204>
     60c:	cmp	w0, #0x1
     610:	b.eq	620 <add_pair_to_block+0xc0>  // b.none
     614:	cmp	w0, #0x2
     618:	b.eq	658 <add_pair_to_block+0xf8>  // b.none
     61c:	b	764 <add_pair_to_block+0x204>
     620:	ldr	x0, [sp, #8]
     624:	ldr	x1, [x0, #64]
     628:	ldr	x0, [sp, #8]
     62c:	ldr	w0, [x0, #108]
     630:	sxtw	x0, w0
     634:	add	x0, x1, x0
     638:	ldrb	w1, [sp, #27]
     63c:	strb	w1, [x0]
     640:	ldr	x0, [sp, #8]
     644:	ldr	w0, [x0, #108]
     648:	add	w1, w0, #0x1
     64c:	ldr	x0, [sp, #8]
     650:	str	w1, [x0, #108]
     654:	b	89c <add_pair_to_block+0x33c>
     658:	ldr	x0, [sp, #8]
     65c:	ldr	x1, [x0, #64]
     660:	ldr	x0, [sp, #8]
     664:	ldr	w0, [x0, #108]
     668:	sxtw	x0, w0
     66c:	add	x0, x1, x0
     670:	ldrb	w1, [sp, #27]
     674:	strb	w1, [x0]
     678:	ldr	x0, [sp, #8]
     67c:	ldr	w0, [x0, #108]
     680:	add	w1, w0, #0x1
     684:	ldr	x0, [sp, #8]
     688:	str	w1, [x0, #108]
     68c:	ldr	x0, [sp, #8]
     690:	ldr	x1, [x0, #64]
     694:	ldr	x0, [sp, #8]
     698:	ldr	w0, [x0, #108]
     69c:	sxtw	x0, w0
     6a0:	add	x0, x1, x0
     6a4:	ldrb	w1, [sp, #27]
     6a8:	strb	w1, [x0]
     6ac:	ldr	x0, [sp, #8]
     6b0:	ldr	w0, [x0, #108]
     6b4:	add	w1, w0, #0x1
     6b8:	ldr	x0, [sp, #8]
     6bc:	str	w1, [x0, #108]
     6c0:	b	89c <add_pair_to_block+0x33c>
     6c4:	ldr	x0, [sp, #8]
     6c8:	ldr	x1, [x0, #64]
     6cc:	ldr	x0, [sp, #8]
     6d0:	ldr	w0, [x0, #108]
     6d4:	sxtw	x0, w0
     6d8:	add	x0, x1, x0
     6dc:	ldrb	w1, [sp, #27]
     6e0:	strb	w1, [x0]
     6e4:	ldr	x0, [sp, #8]
     6e8:	ldr	w0, [x0, #108]
     6ec:	add	w1, w0, #0x1
     6f0:	ldr	x0, [sp, #8]
     6f4:	str	w1, [x0, #108]
     6f8:	ldr	x0, [sp, #8]
     6fc:	ldr	x1, [x0, #64]
     700:	ldr	x0, [sp, #8]
     704:	ldr	w0, [x0, #108]
     708:	sxtw	x0, w0
     70c:	add	x0, x1, x0
     710:	ldrb	w1, [sp, #27]
     714:	strb	w1, [x0]
     718:	ldr	x0, [sp, #8]
     71c:	ldr	w0, [x0, #108]
     720:	add	w1, w0, #0x1
     724:	ldr	x0, [sp, #8]
     728:	str	w1, [x0, #108]
     72c:	ldr	x0, [sp, #8]
     730:	ldr	x1, [x0, #64]
     734:	ldr	x0, [sp, #8]
     738:	ldr	w0, [x0, #108]
     73c:	sxtw	x0, w0
     740:	add	x0, x1, x0
     744:	ldrb	w1, [sp, #27]
     748:	strb	w1, [x0]
     74c:	ldr	x0, [sp, #8]
     750:	ldr	w0, [x0, #108]
     754:	add	w1, w0, #0x1
     758:	ldr	x0, [sp, #8]
     75c:	str	w1, [x0, #108]
     760:	b	89c <add_pair_to_block+0x33c>
     764:	ldr	x0, [sp, #8]
     768:	ldr	w0, [x0, #96]
     76c:	sub	w0, w0, #0x4
     770:	ldr	x1, [sp, #8]
     774:	sxtw	x0, w0
     778:	add	x0, x1, x0
     77c:	mov	w1, #0x1                   	// #1
     780:	strb	w1, [x0, #128]
     784:	ldr	x0, [sp, #8]
     788:	ldr	x1, [x0, #64]
     78c:	ldr	x0, [sp, #8]
     790:	ldr	w0, [x0, #108]
     794:	sxtw	x0, w0
     798:	add	x0, x1, x0
     79c:	ldrb	w1, [sp, #27]
     7a0:	strb	w1, [x0]
     7a4:	ldr	x0, [sp, #8]
     7a8:	ldr	w0, [x0, #108]
     7ac:	add	w1, w0, #0x1
     7b0:	ldr	x0, [sp, #8]
     7b4:	str	w1, [x0, #108]
     7b8:	ldr	x0, [sp, #8]
     7bc:	ldr	x1, [x0, #64]
     7c0:	ldr	x0, [sp, #8]
     7c4:	ldr	w0, [x0, #108]
     7c8:	sxtw	x0, w0
     7cc:	add	x0, x1, x0
     7d0:	ldrb	w1, [sp, #27]
     7d4:	strb	w1, [x0]
     7d8:	ldr	x0, [sp, #8]
     7dc:	ldr	w0, [x0, #108]
     7e0:	add	w1, w0, #0x1
     7e4:	ldr	x0, [sp, #8]
     7e8:	str	w1, [x0, #108]
     7ec:	ldr	x0, [sp, #8]
     7f0:	ldr	x1, [x0, #64]
     7f4:	ldr	x0, [sp, #8]
     7f8:	ldr	w0, [x0, #108]
     7fc:	sxtw	x0, w0
     800:	add	x0, x1, x0
     804:	ldrb	w1, [sp, #27]
     808:	strb	w1, [x0]
     80c:	ldr	x0, [sp, #8]
     810:	ldr	w0, [x0, #108]
     814:	add	w1, w0, #0x1
     818:	ldr	x0, [sp, #8]
     81c:	str	w1, [x0, #108]
     820:	ldr	x0, [sp, #8]
     824:	ldr	x1, [x0, #64]
     828:	ldr	x0, [sp, #8]
     82c:	ldr	w0, [x0, #108]
     830:	sxtw	x0, w0
     834:	add	x0, x1, x0
     838:	ldrb	w1, [sp, #27]
     83c:	strb	w1, [x0]
     840:	ldr	x0, [sp, #8]
     844:	ldr	w0, [x0, #108]
     848:	add	w1, w0, #0x1
     84c:	ldr	x0, [sp, #8]
     850:	str	w1, [x0, #108]
     854:	ldr	x0, [sp, #8]
     858:	ldr	w0, [x0, #96]
     85c:	and	w1, w0, #0xff
     860:	ldr	x0, [sp, #8]
     864:	ldr	x2, [x0, #64]
     868:	ldr	x0, [sp, #8]
     86c:	ldr	w0, [x0, #108]
     870:	sxtw	x0, w0
     874:	add	x0, x2, x0
     878:	sub	w1, w1, #0x4
     87c:	and	w1, w1, #0xff
     880:	strb	w1, [x0]
     884:	ldr	x0, [sp, #8]
     888:	ldr	w0, [x0, #108]
     88c:	add	w1, w0, #0x1
     890:	ldr	x0, [sp, #8]
     894:	str	w1, [x0, #108]
     898:	nop
     89c:	nop
     8a0:	add	sp, sp, #0x20
     8a4:	ret

00000000000008a8 <flush_RL>:
     8a8:	stp	x29, x30, [sp, #-32]!
     8ac:	mov	x29, sp
     8b0:	str	x0, [sp, #24]
     8b4:	ldr	x0, [sp, #24]
     8b8:	ldr	w0, [x0, #92]
     8bc:	cmp	w0, #0xff
     8c0:	b.hi	8cc <flush_RL+0x24>  // b.pmore
     8c4:	ldr	x0, [sp, #24]
     8c8:	bl	560 <add_pair_to_block>
     8cc:	ldr	x0, [sp, #24]
     8d0:	bl	15c <init_RL>
     8d4:	nop
     8d8:	ldp	x29, x30, [sp], #32
     8dc:	ret

00000000000008e0 <copy_input_until_stop>:
     8e0:	stp	x29, x30, [sp, #-64]!
     8e4:	mov	x29, sp
     8e8:	str	x0, [sp, #24]
     8ec:	strb	wzr, [sp, #63]
     8f0:	ldr	x0, [sp, #24]
     8f4:	ldr	w0, [x0, #8]
     8f8:	cmp	w0, #0x2
     8fc:	b.ne	ae8 <copy_input_until_stop+0x208>  // b.any
     900:	ldr	x0, [sp, #24]
     904:	ldr	w1, [x0, #108]
     908:	ldr	x0, [sp, #24]
     90c:	ldr	w0, [x0, #112]
     910:	cmp	w1, w0
     914:	b.ge	cf4 <copy_input_until_stop+0x414>  // b.tcont
     918:	ldr	x0, [sp, #24]
     91c:	ldr	x0, [x0]
     920:	ldr	w0, [x0, #8]
     924:	cmp	w0, #0x0
     928:	b.eq	cfc <copy_input_until_stop+0x41c>  // b.none
     92c:	mov	w0, #0x1                   	// #1
     930:	strb	w0, [sp, #63]
     934:	ldr	x0, [sp, #24]
     938:	ldr	x0, [x0]
     93c:	ldr	x0, [x0]
     940:	ldrb	w0, [x0]
     944:	str	w0, [sp, #48]
     948:	ldr	x0, [sp, #24]
     94c:	ldr	w0, [x0, #92]
     950:	ldr	w1, [sp, #48]
     954:	cmp	w1, w0
     958:	b.eq	a14 <copy_input_until_stop+0x134>  // b.none
     95c:	ldr	x0, [sp, #24]
     960:	ldr	w0, [x0, #96]
     964:	cmp	w0, #0x1
     968:	b.ne	a14 <copy_input_until_stop+0x134>  // b.any
     96c:	ldr	x0, [sp, #24]
     970:	ldr	w0, [x0, #92]
     974:	strb	w0, [sp, #47]
     978:	ldr	x0, [sp, #24]
     97c:	ldr	w0, [x0, #648]
     980:	lsl	w1, w0, #8
     984:	ldr	x0, [sp, #24]
     988:	ldr	w0, [x0, #648]
     98c:	lsr	w2, w0, #24
     990:	ldrb	w0, [sp, #47]
     994:	eor	w2, w2, w0
     998:	adrp	x0, 0 <BZ2_crc32Table>
     99c:	add	x0, x0, #0x0
     9a0:	mov	w2, w2
     9a4:	ldr	w0, [x0, x2, lsl #2]
     9a8:	eor	w1, w1, w0
     9ac:	ldr	x0, [sp, #24]
     9b0:	str	w1, [x0, #648]
     9b4:	ldr	x0, [sp, #24]
     9b8:	ldr	w0, [x0, #92]
     9bc:	ldr	x1, [sp, #24]
     9c0:	mov	w0, w0
     9c4:	add	x0, x1, x0
     9c8:	mov	w1, #0x1                   	// #1
     9cc:	strb	w1, [x0, #128]
     9d0:	ldr	x0, [sp, #24]
     9d4:	ldr	x1, [x0, #64]
     9d8:	ldr	x0, [sp, #24]
     9dc:	ldr	w0, [x0, #108]
     9e0:	sxtw	x0, w0
     9e4:	add	x0, x1, x0
     9e8:	ldrb	w1, [sp, #47]
     9ec:	strb	w1, [x0]
     9f0:	ldr	x0, [sp, #24]
     9f4:	ldr	w0, [x0, #108]
     9f8:	add	w1, w0, #0x1
     9fc:	ldr	x0, [sp, #24]
     a00:	str	w1, [x0, #108]
     a04:	ldr	x0, [sp, #24]
     a08:	ldr	w1, [sp, #48]
     a0c:	str	w1, [x0, #92]
     a10:	b	a80 <copy_input_until_stop+0x1a0>
     a14:	ldr	x0, [sp, #24]
     a18:	ldr	w0, [x0, #92]
     a1c:	ldr	w1, [sp, #48]
     a20:	cmp	w1, w0
     a24:	b.ne	a38 <copy_input_until_stop+0x158>  // b.any
     a28:	ldr	x0, [sp, #24]
     a2c:	ldr	w0, [x0, #96]
     a30:	cmp	w0, #0xff
     a34:	b.ne	a6c <copy_input_until_stop+0x18c>  // b.any
     a38:	ldr	x0, [sp, #24]
     a3c:	ldr	w0, [x0, #92]
     a40:	cmp	w0, #0xff
     a44:	b.hi	a50 <copy_input_until_stop+0x170>  // b.pmore
     a48:	ldr	x0, [sp, #24]
     a4c:	bl	560 <add_pair_to_block>
     a50:	ldr	x0, [sp, #24]
     a54:	ldr	w1, [sp, #48]
     a58:	str	w1, [x0, #92]
     a5c:	ldr	x0, [sp, #24]
     a60:	mov	w1, #0x1                   	// #1
     a64:	str	w1, [x0, #96]
     a68:	b	a80 <copy_input_until_stop+0x1a0>
     a6c:	ldr	x0, [sp, #24]
     a70:	ldr	w0, [x0, #96]
     a74:	add	w1, w0, #0x1
     a78:	ldr	x0, [sp, #24]
     a7c:	str	w1, [x0, #96]
     a80:	ldr	x0, [sp, #24]
     a84:	ldr	x0, [x0]
     a88:	ldr	x1, [x0]
     a8c:	add	x1, x1, #0x1
     a90:	str	x1, [x0]
     a94:	ldr	x0, [sp, #24]
     a98:	ldr	x0, [x0]
     a9c:	ldr	w1, [x0, #8]
     aa0:	sub	w1, w1, #0x1
     aa4:	str	w1, [x0, #8]
     aa8:	ldr	x0, [sp, #24]
     aac:	ldr	x0, [x0]
     ab0:	ldr	w1, [x0, #12]
     ab4:	add	w1, w1, #0x1
     ab8:	str	w1, [x0, #12]
     abc:	ldr	x0, [sp, #24]
     ac0:	ldr	x0, [x0]
     ac4:	ldr	w0, [x0, #12]
     ac8:	cmp	w0, #0x0
     acc:	b.ne	900 <copy_input_until_stop+0x20>  // b.any
     ad0:	ldr	x0, [sp, #24]
     ad4:	ldr	x0, [x0]
     ad8:	ldr	w1, [x0, #16]
     adc:	add	w1, w1, #0x1
     ae0:	str	w1, [x0, #16]
     ae4:	b	900 <copy_input_until_stop+0x20>
     ae8:	ldr	x0, [sp, #24]
     aec:	ldr	w1, [x0, #108]
     af0:	ldr	x0, [sp, #24]
     af4:	ldr	w0, [x0, #112]
     af8:	cmp	w1, w0
     afc:	b.ge	d04 <copy_input_until_stop+0x424>  // b.tcont
     b00:	ldr	x0, [sp, #24]
     b04:	ldr	x0, [x0]
     b08:	ldr	w0, [x0, #8]
     b0c:	cmp	w0, #0x0
     b10:	b.eq	d0c <copy_input_until_stop+0x42c>  // b.none
     b14:	ldr	x0, [sp, #24]
     b18:	ldr	w0, [x0, #16]
     b1c:	cmp	w0, #0x0
     b20:	b.eq	d14 <copy_input_until_stop+0x434>  // b.none
     b24:	mov	w0, #0x1                   	// #1
     b28:	strb	w0, [sp, #63]
     b2c:	ldr	x0, [sp, #24]
     b30:	ldr	x0, [x0]
     b34:	ldr	x0, [x0]
     b38:	ldrb	w0, [x0]
     b3c:	str	w0, [sp, #56]
     b40:	ldr	x0, [sp, #24]
     b44:	ldr	w0, [x0, #92]
     b48:	ldr	w1, [sp, #56]
     b4c:	cmp	w1, w0
     b50:	b.eq	c0c <copy_input_until_stop+0x32c>  // b.none
     b54:	ldr	x0, [sp, #24]
     b58:	ldr	w0, [x0, #96]
     b5c:	cmp	w0, #0x1
     b60:	b.ne	c0c <copy_input_until_stop+0x32c>  // b.any
     b64:	ldr	x0, [sp, #24]
     b68:	ldr	w0, [x0, #92]
     b6c:	strb	w0, [sp, #55]
     b70:	ldr	x0, [sp, #24]
     b74:	ldr	w0, [x0, #648]
     b78:	lsl	w1, w0, #8
     b7c:	ldr	x0, [sp, #24]
     b80:	ldr	w0, [x0, #648]
     b84:	lsr	w2, w0, #24
     b88:	ldrb	w0, [sp, #55]
     b8c:	eor	w2, w2, w0
     b90:	adrp	x0, 0 <BZ2_crc32Table>
     b94:	add	x0, x0, #0x0
     b98:	mov	w2, w2
     b9c:	ldr	w0, [x0, x2, lsl #2]
     ba0:	eor	w1, w1, w0
     ba4:	ldr	x0, [sp, #24]
     ba8:	str	w1, [x0, #648]
     bac:	ldr	x0, [sp, #24]
     bb0:	ldr	w0, [x0, #92]
     bb4:	ldr	x1, [sp, #24]
     bb8:	mov	w0, w0
     bbc:	add	x0, x1, x0
     bc0:	mov	w1, #0x1                   	// #1
     bc4:	strb	w1, [x0, #128]
     bc8:	ldr	x0, [sp, #24]
     bcc:	ldr	x1, [x0, #64]
     bd0:	ldr	x0, [sp, #24]
     bd4:	ldr	w0, [x0, #108]
     bd8:	sxtw	x0, w0
     bdc:	add	x0, x1, x0
     be0:	ldrb	w1, [sp, #55]
     be4:	strb	w1, [x0]
     be8:	ldr	x0, [sp, #24]
     bec:	ldr	w0, [x0, #108]
     bf0:	add	w1, w0, #0x1
     bf4:	ldr	x0, [sp, #24]
     bf8:	str	w1, [x0, #108]
     bfc:	ldr	x0, [sp, #24]
     c00:	ldr	w1, [sp, #56]
     c04:	str	w1, [x0, #92]
     c08:	b	c78 <copy_input_until_stop+0x398>
     c0c:	ldr	x0, [sp, #24]
     c10:	ldr	w0, [x0, #92]
     c14:	ldr	w1, [sp, #56]
     c18:	cmp	w1, w0
     c1c:	b.ne	c30 <copy_input_until_stop+0x350>  // b.any
     c20:	ldr	x0, [sp, #24]
     c24:	ldr	w0, [x0, #96]
     c28:	cmp	w0, #0xff
     c2c:	b.ne	c64 <copy_input_until_stop+0x384>  // b.any
     c30:	ldr	x0, [sp, #24]
     c34:	ldr	w0, [x0, #92]
     c38:	cmp	w0, #0xff
     c3c:	b.hi	c48 <copy_input_until_stop+0x368>  // b.pmore
     c40:	ldr	x0, [sp, #24]
     c44:	bl	560 <add_pair_to_block>
     c48:	ldr	x0, [sp, #24]
     c4c:	ldr	w1, [sp, #56]
     c50:	str	w1, [x0, #92]
     c54:	ldr	x0, [sp, #24]
     c58:	mov	w1, #0x1                   	// #1
     c5c:	str	w1, [x0, #96]
     c60:	b	c78 <copy_input_until_stop+0x398>
     c64:	ldr	x0, [sp, #24]
     c68:	ldr	w0, [x0, #96]
     c6c:	add	w1, w0, #0x1
     c70:	ldr	x0, [sp, #24]
     c74:	str	w1, [x0, #96]
     c78:	ldr	x0, [sp, #24]
     c7c:	ldr	x0, [x0]
     c80:	ldr	x1, [x0]
     c84:	add	x1, x1, #0x1
     c88:	str	x1, [x0]
     c8c:	ldr	x0, [sp, #24]
     c90:	ldr	x0, [x0]
     c94:	ldr	w1, [x0, #8]
     c98:	sub	w1, w1, #0x1
     c9c:	str	w1, [x0, #8]
     ca0:	ldr	x0, [sp, #24]
     ca4:	ldr	x0, [x0]
     ca8:	ldr	w1, [x0, #12]
     cac:	add	w1, w1, #0x1
     cb0:	str	w1, [x0, #12]
     cb4:	ldr	x0, [sp, #24]
     cb8:	ldr	x0, [x0]
     cbc:	ldr	w0, [x0, #12]
     cc0:	cmp	w0, #0x0
     cc4:	b.ne	cdc <copy_input_until_stop+0x3fc>  // b.any
     cc8:	ldr	x0, [sp, #24]
     ccc:	ldr	x0, [x0]
     cd0:	ldr	w1, [x0, #16]
     cd4:	add	w1, w1, #0x1
     cd8:	str	w1, [x0, #16]
     cdc:	ldr	x0, [sp, #24]
     ce0:	ldr	w0, [x0, #16]
     ce4:	sub	w1, w0, #0x1
     ce8:	ldr	x0, [sp, #24]
     cec:	str	w1, [x0, #16]
     cf0:	b	ae8 <copy_input_until_stop+0x208>
     cf4:	nop
     cf8:	b	d18 <copy_input_until_stop+0x438>
     cfc:	nop
     d00:	b	d18 <copy_input_until_stop+0x438>
     d04:	nop
     d08:	b	d18 <copy_input_until_stop+0x438>
     d0c:	nop
     d10:	b	d18 <copy_input_until_stop+0x438>
     d14:	nop
     d18:	ldrb	w0, [sp, #63]
     d1c:	ldp	x29, x30, [sp], #64
     d20:	ret

0000000000000d24 <copy_output_until_stop>:
     d24:	sub	sp, sp, #0x20
     d28:	str	x0, [sp, #8]
     d2c:	strb	wzr, [sp, #31]
     d30:	ldr	x0, [sp, #8]
     d34:	ldr	x0, [x0]
     d38:	ldr	w0, [x0, #32]
     d3c:	cmp	w0, #0x0
     d40:	b.eq	e0c <copy_output_until_stop+0xe8>  // b.none
     d44:	ldr	x0, [sp, #8]
     d48:	ldr	w1, [x0, #120]
     d4c:	ldr	x0, [sp, #8]
     d50:	ldr	w0, [x0, #116]
     d54:	cmp	w1, w0
     d58:	b.ge	e14 <copy_output_until_stop+0xf0>  // b.tcont
     d5c:	mov	w0, #0x1                   	// #1
     d60:	strb	w0, [sp, #31]
     d64:	ldr	x0, [sp, #8]
     d68:	ldr	x1, [x0, #80]
     d6c:	ldr	x0, [sp, #8]
     d70:	ldr	w0, [x0, #120]
     d74:	sxtw	x0, w0
     d78:	add	x1, x1, x0
     d7c:	ldr	x0, [sp, #8]
     d80:	ldr	x0, [x0]
     d84:	ldr	x0, [x0, #24]
     d88:	ldrb	w1, [x1]
     d8c:	strb	w1, [x0]
     d90:	ldr	x0, [sp, #8]
     d94:	ldr	w0, [x0, #120]
     d98:	add	w1, w0, #0x1
     d9c:	ldr	x0, [sp, #8]
     da0:	str	w1, [x0, #120]
     da4:	ldr	x0, [sp, #8]
     da8:	ldr	x0, [x0]
     dac:	ldr	w1, [x0, #32]
     db0:	sub	w1, w1, #0x1
     db4:	str	w1, [x0, #32]
     db8:	ldr	x0, [sp, #8]
     dbc:	ldr	x0, [x0]
     dc0:	ldr	x1, [x0, #24]
     dc4:	add	x1, x1, #0x1
     dc8:	str	x1, [x0, #24]
     dcc:	ldr	x0, [sp, #8]
     dd0:	ldr	x0, [x0]
     dd4:	ldr	w1, [x0, #36]
     dd8:	add	w1, w1, #0x1
     ddc:	str	w1, [x0, #36]
     de0:	ldr	x0, [sp, #8]
     de4:	ldr	x0, [x0]
     de8:	ldr	w0, [x0, #36]
     dec:	cmp	w0, #0x0
     df0:	b.ne	d30 <copy_output_until_stop+0xc>  // b.any
     df4:	ldr	x0, [sp, #8]
     df8:	ldr	x0, [x0]
     dfc:	ldr	w1, [x0, #40]
     e00:	add	w1, w1, #0x1
     e04:	str	w1, [x0, #40]
     e08:	b	d30 <copy_output_until_stop+0xc>
     e0c:	nop
     e10:	b	e18 <copy_output_until_stop+0xf4>
     e14:	nop
     e18:	ldrb	w0, [sp, #31]
     e1c:	add	sp, sp, #0x20
     e20:	ret

0000000000000e24 <handle_compress>:
     e24:	stp	x29, x30, [sp, #-48]!
     e28:	mov	x29, sp
     e2c:	str	x0, [sp, #24]
     e30:	strb	wzr, [sp, #47]
     e34:	strb	wzr, [sp, #46]
     e38:	ldr	x0, [sp, #24]
     e3c:	ldr	x0, [x0, #48]
     e40:	str	x0, [sp, #32]
     e44:	ldr	x0, [sp, #32]
     e48:	ldr	w0, [x0, #12]
     e4c:	cmp	w0, #0x1
     e50:	b.ne	f00 <handle_compress+0xdc>  // b.any
     e54:	ldr	x0, [sp, #32]
     e58:	bl	d24 <copy_output_until_stop>
     e5c:	and	w1, w0, #0xff
     e60:	ldrb	w0, [sp, #46]
     e64:	orr	w0, w1, w0
     e68:	strb	w0, [sp, #46]
     e6c:	ldr	x0, [sp, #32]
     e70:	ldr	w1, [x0, #120]
     e74:	ldr	x0, [sp, #32]
     e78:	ldr	w0, [x0, #116]
     e7c:	cmp	w1, w0
     e80:	b.lt	fcc <handle_compress+0x1a8>  // b.tstop
     e84:	ldr	x0, [sp, #32]
     e88:	ldr	w0, [x0, #8]
     e8c:	cmp	w0, #0x4
     e90:	b.ne	eb8 <handle_compress+0x94>  // b.any
     e94:	ldr	x0, [sp, #32]
     e98:	ldr	w0, [x0, #16]
     e9c:	cmp	w0, #0x0
     ea0:	b.ne	eb8 <handle_compress+0x94>  // b.any
     ea4:	ldr	x0, [sp, #32]
     ea8:	bl	184 <isempty_RL>
     eac:	and	w0, w0, #0xff
     eb0:	cmp	w0, #0x0
     eb4:	b.ne	fd4 <handle_compress+0x1b0>  // b.any
     eb8:	ldr	x0, [sp, #32]
     ebc:	bl	e0 <prepare_new_block>
     ec0:	ldr	x0, [sp, #32]
     ec4:	mov	w1, #0x2                   	// #2
     ec8:	str	w1, [x0, #12]
     ecc:	ldr	x0, [sp, #32]
     ed0:	ldr	w0, [x0, #8]
     ed4:	cmp	w0, #0x3
     ed8:	b.ne	f00 <handle_compress+0xdc>  // b.any
     edc:	ldr	x0, [sp, #32]
     ee0:	ldr	w0, [x0, #16]
     ee4:	cmp	w0, #0x0
     ee8:	b.ne	f00 <handle_compress+0xdc>  // b.any
     eec:	ldr	x0, [sp, #32]
     ef0:	bl	184 <isempty_RL>
     ef4:	and	w0, w0, #0xff
     ef8:	cmp	w0, #0x0
     efc:	b.ne	fdc <handle_compress+0x1b8>  // b.any
     f00:	ldr	x0, [sp, #32]
     f04:	ldr	w0, [x0, #12]
     f08:	cmp	w0, #0x2
     f0c:	b.ne	e44 <handle_compress+0x20>  // b.any
     f10:	ldr	x0, [sp, #32]
     f14:	bl	8e0 <copy_input_until_stop>
     f18:	and	w1, w0, #0xff
     f1c:	ldrb	w0, [sp, #47]
     f20:	orr	w0, w1, w0
     f24:	strb	w0, [sp, #47]
     f28:	ldr	x0, [sp, #32]
     f2c:	ldr	w0, [x0, #8]
     f30:	cmp	w0, #0x2
     f34:	b.eq	f80 <handle_compress+0x15c>  // b.none
     f38:	ldr	x0, [sp, #32]
     f3c:	ldr	w0, [x0, #16]
     f40:	cmp	w0, #0x0
     f44:	b.ne	f80 <handle_compress+0x15c>  // b.any
     f48:	ldr	x0, [sp, #32]
     f4c:	bl	8a8 <flush_RL>
     f50:	ldr	x0, [sp, #32]
     f54:	ldr	w0, [x0, #8]
     f58:	cmp	w0, #0x4
     f5c:	cset	w0, eq  // eq = none
     f60:	and	w0, w0, #0xff
     f64:	mov	w1, w0
     f68:	ldr	x0, [sp, #32]
     f6c:	bl	0 <BZ2_compressBlock>
     f70:	ldr	x0, [sp, #32]
     f74:	mov	w1, #0x1                   	// #1
     f78:	str	w1, [x0, #12]
     f7c:	b	fc8 <handle_compress+0x1a4>
     f80:	ldr	x0, [sp, #32]
     f84:	ldr	w1, [x0, #108]
     f88:	ldr	x0, [sp, #32]
     f8c:	ldr	w0, [x0, #112]
     f90:	cmp	w1, w0
     f94:	b.lt	fb4 <handle_compress+0x190>  // b.tstop
     f98:	mov	w1, #0x0                   	// #0
     f9c:	ldr	x0, [sp, #32]
     fa0:	bl	0 <BZ2_compressBlock>
     fa4:	ldr	x0, [sp, #32]
     fa8:	mov	w1, #0x1                   	// #1
     fac:	str	w1, [x0, #12]
     fb0:	b	e44 <handle_compress+0x20>
     fb4:	ldr	x0, [sp, #32]
     fb8:	ldr	x0, [x0]
     fbc:	ldr	w0, [x0, #8]
     fc0:	cmp	w0, #0x0
     fc4:	b.eq	fe4 <handle_compress+0x1c0>  // b.none
     fc8:	b	e44 <handle_compress+0x20>
     fcc:	nop
     fd0:	b	fe8 <handle_compress+0x1c4>
     fd4:	nop
     fd8:	b	fe8 <handle_compress+0x1c4>
     fdc:	nop
     fe0:	b	fe8 <handle_compress+0x1c4>
     fe4:	nop
     fe8:	ldrb	w0, [sp, #47]
     fec:	cmp	w0, #0x0
     ff0:	b.ne	1000 <handle_compress+0x1dc>  // b.any
     ff4:	ldrb	w0, [sp, #46]
     ff8:	cmp	w0, #0x0
     ffc:	b.eq	1008 <handle_compress+0x1e4>  // b.none
    1000:	mov	w0, #0x1                   	// #1
    1004:	b	100c <handle_compress+0x1e8>
    1008:	mov	w0, #0x0                   	// #0
    100c:	and	w0, w0, #0xff
    1010:	ldp	x29, x30, [sp], #48
    1014:	ret

0000000000001018 <BZ2_bzCompress>:
    1018:	stp	x29, x30, [sp, #-48]!
    101c:	mov	x29, sp
    1020:	str	x0, [sp, #24]
    1024:	str	w1, [sp, #20]
    1028:	ldr	x0, [sp, #24]
    102c:	cmp	x0, #0x0
    1030:	b.ne	103c <BZ2_bzCompress+0x24>  // b.any
    1034:	mov	w0, #0xfffffffe            	// #-2
    1038:	b	12a4 <BZ2_bzCompress+0x28c>
    103c:	ldr	x0, [sp, #24]
    1040:	ldr	x0, [x0, #48]
    1044:	str	x0, [sp, #40]
    1048:	ldr	x0, [sp, #40]
    104c:	cmp	x0, #0x0
    1050:	b.ne	105c <BZ2_bzCompress+0x44>  // b.any
    1054:	mov	w0, #0xfffffffe            	// #-2
    1058:	b	12a4 <BZ2_bzCompress+0x28c>
    105c:	ldr	x0, [sp, #40]
    1060:	ldr	x0, [x0]
    1064:	ldr	x1, [sp, #24]
    1068:	cmp	x1, x0
    106c:	b.eq	1078 <BZ2_bzCompress+0x60>  // b.none
    1070:	mov	w0, #0xfffffffe            	// #-2
    1074:	b	12a4 <BZ2_bzCompress+0x28c>
    1078:	nop
    107c:	ldr	x0, [sp, #40]
    1080:	ldr	w0, [x0, #8]
    1084:	cmp	w0, #0x4
    1088:	b.eq	11f0 <BZ2_bzCompress+0x1d8>  // b.none
    108c:	cmp	w0, #0x4
    1090:	b.gt	12a0 <BZ2_bzCompress+0x288>
    1094:	cmp	w0, #0x3
    1098:	b.eq	1154 <BZ2_bzCompress+0x13c>  // b.none
    109c:	cmp	w0, #0x3
    10a0:	b.gt	12a0 <BZ2_bzCompress+0x288>
    10a4:	cmp	w0, #0x1
    10a8:	b.eq	10b8 <BZ2_bzCompress+0xa0>  // b.none
    10ac:	cmp	w0, #0x2
    10b0:	b.eq	10c0 <BZ2_bzCompress+0xa8>  // b.none
    10b4:	b	12a0 <BZ2_bzCompress+0x288>
    10b8:	mov	w0, #0xffffffff            	// #-1
    10bc:	b	12a4 <BZ2_bzCompress+0x28c>
    10c0:	ldr	w0, [sp, #20]
    10c4:	cmp	w0, #0x0
    10c8:	b.ne	10f4 <BZ2_bzCompress+0xdc>  // b.any
    10cc:	ldr	x0, [sp, #24]
    10d0:	bl	e24 <handle_compress>
    10d4:	strb	w0, [sp, #39]
    10d8:	ldrb	w0, [sp, #39]
    10dc:	cmp	w0, #0x0
    10e0:	b.eq	10ec <BZ2_bzCompress+0xd4>  // b.none
    10e4:	mov	w0, #0x1                   	// #1
    10e8:	b	12a4 <BZ2_bzCompress+0x28c>
    10ec:	mov	w0, #0xfffffffe            	// #-2
    10f0:	b	12a4 <BZ2_bzCompress+0x28c>
    10f4:	ldr	w0, [sp, #20]
    10f8:	cmp	w0, #0x1
    10fc:	b.ne	1120 <BZ2_bzCompress+0x108>  // b.any
    1100:	ldr	x0, [sp, #24]
    1104:	ldr	w1, [x0, #8]
    1108:	ldr	x0, [sp, #40]
    110c:	str	w1, [x0, #16]
    1110:	ldr	x0, [sp, #40]
    1114:	mov	w1, #0x3                   	// #3
    1118:	str	w1, [x0, #8]
    111c:	b	107c <BZ2_bzCompress+0x64>
    1120:	ldr	w0, [sp, #20]
    1124:	cmp	w0, #0x2
    1128:	b.ne	114c <BZ2_bzCompress+0x134>  // b.any
    112c:	ldr	x0, [sp, #24]
    1130:	ldr	w1, [x0, #8]
    1134:	ldr	x0, [sp, #40]
    1138:	str	w1, [x0, #16]
    113c:	ldr	x0, [sp, #40]
    1140:	mov	w1, #0x4                   	// #4
    1144:	str	w1, [x0, #8]
    1148:	b	107c <BZ2_bzCompress+0x64>
    114c:	mov	w0, #0xfffffffe            	// #-2
    1150:	b	12a4 <BZ2_bzCompress+0x28c>
    1154:	ldr	w0, [sp, #20]
    1158:	cmp	w0, #0x1
    115c:	b.eq	1168 <BZ2_bzCompress+0x150>  // b.none
    1160:	mov	w0, #0xffffffff            	// #-1
    1164:	b	12a4 <BZ2_bzCompress+0x28c>
    1168:	ldr	x0, [sp, #40]
    116c:	ldr	w1, [x0, #16]
    1170:	ldr	x0, [sp, #40]
    1174:	ldr	x0, [x0]
    1178:	ldr	w0, [x0, #8]
    117c:	cmp	w1, w0
    1180:	b.eq	118c <BZ2_bzCompress+0x174>  // b.none
    1184:	mov	w0, #0xffffffff            	// #-1
    1188:	b	12a4 <BZ2_bzCompress+0x28c>
    118c:	ldr	x0, [sp, #24]
    1190:	bl	e24 <handle_compress>
    1194:	strb	w0, [sp, #39]
    1198:	ldr	x0, [sp, #40]
    119c:	ldr	w0, [x0, #16]
    11a0:	cmp	w0, #0x0
    11a4:	b.ne	11d4 <BZ2_bzCompress+0x1bc>  // b.any
    11a8:	ldr	x0, [sp, #40]
    11ac:	bl	184 <isempty_RL>
    11b0:	and	w0, w0, #0xff
    11b4:	cmp	w0, #0x0
    11b8:	b.eq	11d4 <BZ2_bzCompress+0x1bc>  // b.none
    11bc:	ldr	x0, [sp, #40]
    11c0:	ldr	w1, [x0, #120]
    11c4:	ldr	x0, [sp, #40]
    11c8:	ldr	w0, [x0, #116]
    11cc:	cmp	w1, w0
    11d0:	b.ge	11dc <BZ2_bzCompress+0x1c4>  // b.tcont
    11d4:	mov	w0, #0x2                   	// #2
    11d8:	b	12a4 <BZ2_bzCompress+0x28c>
    11dc:	ldr	x0, [sp, #40]
    11e0:	mov	w1, #0x2                   	// #2
    11e4:	str	w1, [x0, #8]
    11e8:	mov	w0, #0x1                   	// #1
    11ec:	b	12a4 <BZ2_bzCompress+0x28c>
    11f0:	ldr	w0, [sp, #20]
    11f4:	cmp	w0, #0x2
    11f8:	b.eq	1204 <BZ2_bzCompress+0x1ec>  // b.none
    11fc:	mov	w0, #0xffffffff            	// #-1
    1200:	b	12a4 <BZ2_bzCompress+0x28c>
    1204:	ldr	x0, [sp, #40]
    1208:	ldr	w1, [x0, #16]
    120c:	ldr	x0, [sp, #40]
    1210:	ldr	x0, [x0]
    1214:	ldr	w0, [x0, #8]
    1218:	cmp	w1, w0
    121c:	b.eq	1228 <BZ2_bzCompress+0x210>  // b.none
    1220:	mov	w0, #0xffffffff            	// #-1
    1224:	b	12a4 <BZ2_bzCompress+0x28c>
    1228:	ldr	x0, [sp, #24]
    122c:	bl	e24 <handle_compress>
    1230:	strb	w0, [sp, #39]
    1234:	ldrb	w0, [sp, #39]
    1238:	cmp	w0, #0x0
    123c:	b.ne	1248 <BZ2_bzCompress+0x230>  // b.any
    1240:	mov	w0, #0xffffffff            	// #-1
    1244:	b	12a4 <BZ2_bzCompress+0x28c>
    1248:	ldr	x0, [sp, #40]
    124c:	ldr	w0, [x0, #16]
    1250:	cmp	w0, #0x0
    1254:	b.ne	1284 <BZ2_bzCompress+0x26c>  // b.any
    1258:	ldr	x0, [sp, #40]
    125c:	bl	184 <isempty_RL>
    1260:	and	w0, w0, #0xff
    1264:	cmp	w0, #0x0
    1268:	b.eq	1284 <BZ2_bzCompress+0x26c>  // b.none
    126c:	ldr	x0, [sp, #40]
    1270:	ldr	w1, [x0, #120]
    1274:	ldr	x0, [sp, #40]
    1278:	ldr	w0, [x0, #116]
    127c:	cmp	w1, w0
    1280:	b.ge	128c <BZ2_bzCompress+0x274>  // b.tcont
    1284:	mov	w0, #0x3                   	// #3
    1288:	b	12a4 <BZ2_bzCompress+0x28c>
    128c:	ldr	x0, [sp, #40]
    1290:	mov	w1, #0x1                   	// #1
    1294:	str	w1, [x0, #8]
    1298:	mov	w0, #0x4                   	// #4
    129c:	b	12a4 <BZ2_bzCompress+0x28c>
    12a0:	mov	w0, #0x0                   	// #0
    12a4:	ldp	x29, x30, [sp], #48
    12a8:	ret

00000000000012ac <BZ2_bzCompressEnd>:
    12ac:	stp	x29, x30, [sp, #-48]!
    12b0:	mov	x29, sp
    12b4:	str	x0, [sp, #24]
    12b8:	ldr	x0, [sp, #24]
    12bc:	cmp	x0, #0x0
    12c0:	b.ne	12cc <BZ2_bzCompressEnd+0x20>  // b.any
    12c4:	mov	w0, #0xfffffffe            	// #-2
    12c8:	b	13d4 <BZ2_bzCompressEnd+0x128>
    12cc:	ldr	x0, [sp, #24]
    12d0:	ldr	x0, [x0, #48]
    12d4:	str	x0, [sp, #40]
    12d8:	ldr	x0, [sp, #40]
    12dc:	cmp	x0, #0x0
    12e0:	b.ne	12ec <BZ2_bzCompressEnd+0x40>  // b.any
    12e4:	mov	w0, #0xfffffffe            	// #-2
    12e8:	b	13d4 <BZ2_bzCompressEnd+0x128>
    12ec:	ldr	x0, [sp, #40]
    12f0:	ldr	x0, [x0]
    12f4:	ldr	x1, [sp, #24]
    12f8:	cmp	x1, x0
    12fc:	b.eq	1308 <BZ2_bzCompressEnd+0x5c>  // b.none
    1300:	mov	w0, #0xfffffffe            	// #-2
    1304:	b	13d4 <BZ2_bzCompressEnd+0x128>
    1308:	ldr	x0, [sp, #40]
    130c:	ldr	x0, [x0, #24]
    1310:	cmp	x0, #0x0
    1314:	b.eq	133c <BZ2_bzCompressEnd+0x90>  // b.none
    1318:	ldr	x0, [sp, #24]
    131c:	ldr	x2, [x0, #64]
    1320:	ldr	x0, [sp, #24]
    1324:	ldr	x3, [x0, #72]
    1328:	ldr	x0, [sp, #40]
    132c:	ldr	x0, [x0, #24]
    1330:	mov	x1, x0
    1334:	mov	x0, x3
    1338:	blr	x2
    133c:	ldr	x0, [sp, #40]
    1340:	ldr	x0, [x0, #32]
    1344:	cmp	x0, #0x0
    1348:	b.eq	1370 <BZ2_bzCompressEnd+0xc4>  // b.none
    134c:	ldr	x0, [sp, #24]
    1350:	ldr	x2, [x0, #64]
    1354:	ldr	x0, [sp, #24]
    1358:	ldr	x3, [x0, #72]
    135c:	ldr	x0, [sp, #40]
    1360:	ldr	x0, [x0, #32]
    1364:	mov	x1, x0
    1368:	mov	x0, x3
    136c:	blr	x2
    1370:	ldr	x0, [sp, #40]
    1374:	ldr	x0, [x0, #40]
    1378:	cmp	x0, #0x0
    137c:	b.eq	13a4 <BZ2_bzCompressEnd+0xf8>  // b.none
    1380:	ldr	x0, [sp, #24]
    1384:	ldr	x2, [x0, #64]
    1388:	ldr	x0, [sp, #24]
    138c:	ldr	x3, [x0, #72]
    1390:	ldr	x0, [sp, #40]
    1394:	ldr	x0, [x0, #40]
    1398:	mov	x1, x0
    139c:	mov	x0, x3
    13a0:	blr	x2
    13a4:	ldr	x0, [sp, #24]
    13a8:	ldr	x2, [x0, #64]
    13ac:	ldr	x0, [sp, #24]
    13b0:	ldr	x3, [x0, #72]
    13b4:	ldr	x0, [sp, #24]
    13b8:	ldr	x0, [x0, #48]
    13bc:	mov	x1, x0
    13c0:	mov	x0, x3
    13c4:	blr	x2
    13c8:	ldr	x0, [sp, #24]
    13cc:	str	xzr, [x0, #48]
    13d0:	mov	w0, #0x0                   	// #0
    13d4:	ldp	x29, x30, [sp], #48
    13d8:	ret

00000000000013dc <BZ2_bzDecompressInit>:
    13dc:	stp	x29, x30, [sp, #-48]!
    13e0:	mov	x29, sp
    13e4:	str	x0, [sp, #24]
    13e8:	str	w1, [sp, #20]
    13ec:	str	w2, [sp, #16]
    13f0:	bl	70 <bz_config_ok>
    13f4:	cmp	w0, #0x0
    13f8:	b.ne	1404 <BZ2_bzDecompressInit+0x28>  // b.any
    13fc:	mov	w0, #0xfffffff7            	// #-9
    1400:	b	1568 <BZ2_bzDecompressInit+0x18c>
    1404:	ldr	x0, [sp, #24]
    1408:	cmp	x0, #0x0
    140c:	b.ne	1418 <BZ2_bzDecompressInit+0x3c>  // b.any
    1410:	mov	w0, #0xfffffffe            	// #-2
    1414:	b	1568 <BZ2_bzDecompressInit+0x18c>
    1418:	ldr	w0, [sp, #16]
    141c:	cmp	w0, #0x0
    1420:	b.eq	1438 <BZ2_bzDecompressInit+0x5c>  // b.none
    1424:	ldr	w0, [sp, #16]
    1428:	cmp	w0, #0x1
    142c:	b.eq	1438 <BZ2_bzDecompressInit+0x5c>  // b.none
    1430:	mov	w0, #0xfffffffe            	// #-2
    1434:	b	1568 <BZ2_bzDecompressInit+0x18c>
    1438:	ldr	w0, [sp, #20]
    143c:	cmp	w0, #0x0
    1440:	b.lt	1450 <BZ2_bzDecompressInit+0x74>  // b.tstop
    1444:	ldr	w0, [sp, #20]
    1448:	cmp	w0, #0x4
    144c:	b.le	1458 <BZ2_bzDecompressInit+0x7c>
    1450:	mov	w0, #0xfffffffe            	// #-2
    1454:	b	1568 <BZ2_bzDecompressInit+0x18c>
    1458:	ldr	x0, [sp, #24]
    145c:	ldr	x0, [x0, #56]
    1460:	cmp	x0, #0x0
    1464:	b.ne	1478 <BZ2_bzDecompressInit+0x9c>  // b.any
    1468:	ldr	x0, [sp, #24]
    146c:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
    1470:	add	x1, x1, #0x0
    1474:	str	x1, [x0, #56]
    1478:	ldr	x0, [sp, #24]
    147c:	ldr	x0, [x0, #64]
    1480:	cmp	x0, #0x0
    1484:	b.ne	1498 <BZ2_bzDecompressInit+0xbc>  // b.any
    1488:	ldr	x0, [sp, #24]
    148c:	adrp	x1, 0 <BZ2_bz__AssertH__fail>
    1490:	add	x1, x1, #0x0
    1494:	str	x1, [x0, #64]
    1498:	ldr	x0, [sp, #24]
    149c:	ldr	x3, [x0, #56]
    14a0:	ldr	x0, [sp, #24]
    14a4:	ldr	x0, [x0, #72]
    14a8:	mov	w2, #0x1                   	// #1
    14ac:	mov	w1, #0xfa90                	// #64144
    14b0:	blr	x3
    14b4:	str	x0, [sp, #40]
    14b8:	ldr	x0, [sp, #40]
    14bc:	cmp	x0, #0x0
    14c0:	b.ne	14cc <BZ2_bzDecompressInit+0xf0>  // b.any
    14c4:	mov	w0, #0xfffffffd            	// #-3
    14c8:	b	1568 <BZ2_bzDecompressInit+0x18c>
    14cc:	ldr	x0, [sp, #40]
    14d0:	ldr	x1, [sp, #24]
    14d4:	str	x1, [x0]
    14d8:	ldr	x0, [sp, #24]
    14dc:	ldr	x1, [sp, #40]
    14e0:	str	x1, [x0, #48]
    14e4:	ldr	x0, [sp, #40]
    14e8:	mov	w1, #0xa                   	// #10
    14ec:	str	w1, [x0, #8]
    14f0:	ldr	x0, [sp, #40]
    14f4:	str	wzr, [x0, #36]
    14f8:	ldr	x0, [sp, #40]
    14fc:	str	wzr, [x0, #32]
    1500:	ldr	x0, [sp, #40]
    1504:	str	wzr, [x0, #3188]
    1508:	ldr	x0, [sp, #24]
    150c:	str	wzr, [x0, #12]
    1510:	ldr	x0, [sp, #24]
    1514:	str	wzr, [x0, #16]
    1518:	ldr	x0, [sp, #24]
    151c:	str	wzr, [x0, #36]
    1520:	ldr	x0, [sp, #24]
    1524:	str	wzr, [x0, #40]
    1528:	ldr	w0, [sp, #16]
    152c:	and	w1, w0, #0xff
    1530:	ldr	x0, [sp, #40]
    1534:	strb	w1, [x0, #44]
    1538:	ldr	x0, [sp, #40]
    153c:	str	xzr, [x0, #3168]
    1540:	ldr	x0, [sp, #40]
    1544:	str	xzr, [x0, #3160]
    1548:	ldr	x0, [sp, #40]
    154c:	str	xzr, [x0, #3152]
    1550:	ldr	x0, [sp, #40]
    1554:	str	wzr, [x0, #48]
    1558:	ldr	x0, [sp, #40]
    155c:	ldr	w1, [sp, #20]
    1560:	str	w1, [x0, #52]
    1564:	mov	w0, #0x0                   	// #0
    1568:	ldp	x29, x30, [sp], #48
    156c:	ret

0000000000001570 <unRLE_obuf_to_output_FAST>:
    1570:	sub	sp, sp, #0x60
    1574:	str	x0, [sp, #8]
    1578:	ldr	x0, [sp, #8]
    157c:	ldrb	w0, [x0, #20]
    1580:	cmp	w0, #0x0
    1584:	b.eq	1dcc <unRLE_obuf_to_output_FAST+0x85c>  // b.none
    1588:	ldr	x0, [sp, #8]
    158c:	ldr	x0, [x0]
    1590:	ldr	w0, [x0, #32]
    1594:	cmp	w0, #0x0
    1598:	b.ne	15a4 <unRLE_obuf_to_output_FAST+0x34>  // b.any
    159c:	mov	w0, #0x0                   	// #0
    15a0:	b	2304 <unRLE_obuf_to_output_FAST+0xd94>
    15a4:	ldr	x0, [sp, #8]
    15a8:	ldr	w0, [x0, #16]
    15ac:	cmp	w0, #0x0
    15b0:	b.eq	1688 <unRLE_obuf_to_output_FAST+0x118>  // b.none
    15b4:	ldr	x0, [sp, #8]
    15b8:	ldr	x0, [x0]
    15bc:	ldr	x0, [x0, #24]
    15c0:	ldr	x1, [sp, #8]
    15c4:	ldrb	w1, [x1, #12]
    15c8:	strb	w1, [x0]
    15cc:	ldr	x0, [sp, #8]
    15d0:	ldr	w0, [x0, #3184]
    15d4:	lsl	w1, w0, #8
    15d8:	ldr	x0, [sp, #8]
    15dc:	ldr	w0, [x0, #3184]
    15e0:	lsr	w0, w0, #24
    15e4:	ldr	x2, [sp, #8]
    15e8:	ldrb	w2, [x2, #12]
    15ec:	eor	w2, w0, w2
    15f0:	adrp	x0, 0 <BZ2_crc32Table>
    15f4:	add	x0, x0, #0x0
    15f8:	mov	w2, w2
    15fc:	ldr	w0, [x0, x2, lsl #2]
    1600:	eor	w1, w1, w0
    1604:	ldr	x0, [sp, #8]
    1608:	str	w1, [x0, #3184]
    160c:	ldr	x0, [sp, #8]
    1610:	ldr	w0, [x0, #16]
    1614:	sub	w1, w0, #0x1
    1618:	ldr	x0, [sp, #8]
    161c:	str	w1, [x0, #16]
    1620:	ldr	x0, [sp, #8]
    1624:	ldr	x0, [x0]
    1628:	ldr	x1, [x0, #24]
    162c:	add	x1, x1, #0x1
    1630:	str	x1, [x0, #24]
    1634:	ldr	x0, [sp, #8]
    1638:	ldr	x0, [x0]
    163c:	ldr	w1, [x0, #32]
    1640:	sub	w1, w1, #0x1
    1644:	str	w1, [x0, #32]
    1648:	ldr	x0, [sp, #8]
    164c:	ldr	x0, [x0]
    1650:	ldr	w1, [x0, #36]
    1654:	add	w1, w1, #0x1
    1658:	str	w1, [x0, #36]
    165c:	ldr	x0, [sp, #8]
    1660:	ldr	x0, [x0]
    1664:	ldr	w0, [x0, #36]
    1668:	cmp	w0, #0x0
    166c:	b.ne	1588 <unRLE_obuf_to_output_FAST+0x18>  // b.any
    1670:	ldr	x0, [sp, #8]
    1674:	ldr	x0, [x0]
    1678:	ldr	w1, [x0, #40]
    167c:	add	w1, w1, #0x1
    1680:	str	w1, [x0, #40]
    1684:	b	1588 <unRLE_obuf_to_output_FAST+0x18>
    1688:	nop
    168c:	ldr	x0, [sp, #8]
    1690:	ldr	w1, [x0, #1092]
    1694:	ldr	x0, [sp, #8]
    1698:	add	x0, x0, #0xc, lsl #12
    169c:	ldr	w0, [x0, #14928]
    16a0:	add	w0, w0, #0x1
    16a4:	cmp	w1, w0
    16a8:	b.ne	16b4 <unRLE_obuf_to_output_FAST+0x144>  // b.any
    16ac:	mov	w0, #0x0                   	// #0
    16b0:	b	2304 <unRLE_obuf_to_output_FAST+0xd94>
    16b4:	ldr	x0, [sp, #8]
    16b8:	ldr	w1, [x0, #1092]
    16bc:	ldr	x0, [sp, #8]
    16c0:	add	x0, x0, #0xc, lsl #12
    16c4:	ldr	w0, [x0, #14928]
    16c8:	add	w0, w0, #0x1
    16cc:	cmp	w1, w0
    16d0:	b.le	16dc <unRLE_obuf_to_output_FAST+0x16c>
    16d4:	mov	w0, #0x1                   	// #1
    16d8:	b	2304 <unRLE_obuf_to_output_FAST+0xd94>
    16dc:	ldr	x0, [sp, #8]
    16e0:	mov	w1, #0x1                   	// #1
    16e4:	str	w1, [x0, #16]
    16e8:	ldr	x0, [sp, #8]
    16ec:	ldr	w0, [x0, #64]
    16f0:	and	w1, w0, #0xff
    16f4:	ldr	x0, [sp, #8]
    16f8:	strb	w1, [x0, #12]
    16fc:	ldr	x0, [sp, #8]
    1700:	ldr	w1, [x0, #60]
    1704:	ldr	x0, [sp, #8]
    1708:	ldr	w0, [x0, #40]
    170c:	mov	w2, w0
    1710:	mov	w0, #0x86a0                	// #34464
    1714:	movk	w0, #0x1, lsl #16
    1718:	mul	w0, w2, w0
    171c:	cmp	w1, w0
    1720:	b.cc	172c <unRLE_obuf_to_output_FAST+0x1bc>  // b.lo, b.ul, b.last
    1724:	mov	w0, #0x1                   	// #1
    1728:	b	2304 <unRLE_obuf_to_output_FAST+0xd94>
    172c:	ldr	x0, [sp, #8]
    1730:	ldr	x1, [x0, #3152]
    1734:	ldr	x0, [sp, #8]
    1738:	ldr	w0, [x0, #60]
    173c:	mov	w0, w0
    1740:	lsl	x0, x0, #2
    1744:	add	x0, x1, x0
    1748:	ldr	w1, [x0]
    174c:	ldr	x0, [sp, #8]
    1750:	str	w1, [x0, #60]
    1754:	ldr	x0, [sp, #8]
    1758:	ldr	w0, [x0, #60]
    175c:	strb	w0, [sp, #35]
    1760:	ldr	x0, [sp, #8]
    1764:	ldr	w0, [x0, #60]
    1768:	lsr	w1, w0, #8
    176c:	ldr	x0, [sp, #8]
    1770:	str	w1, [x0, #60]
    1774:	ldr	x0, [sp, #8]
    1778:	ldr	w0, [x0, #24]
    177c:	cmp	w0, #0x0
    1780:	b.ne	17d0 <unRLE_obuf_to_output_FAST+0x260>  // b.any
    1784:	ldr	x0, [sp, #8]
    1788:	ldr	w1, [x0, #28]
    178c:	adrp	x0, 0 <BZ2_rNums>
    1790:	add	x0, x0, #0x0
    1794:	sxtw	x1, w1
    1798:	ldr	w1, [x0, x1, lsl #2]
    179c:	ldr	x0, [sp, #8]
    17a0:	str	w1, [x0, #24]
    17a4:	ldr	x0, [sp, #8]
    17a8:	ldr	w0, [x0, #28]
    17ac:	add	w1, w0, #0x1
    17b0:	ldr	x0, [sp, #8]
    17b4:	str	w1, [x0, #28]
    17b8:	ldr	x0, [sp, #8]
    17bc:	ldr	w0, [x0, #28]
    17c0:	cmp	w0, #0x200
    17c4:	b.ne	17d0 <unRLE_obuf_to_output_FAST+0x260>  // b.any
    17c8:	ldr	x0, [sp, #8]
    17cc:	str	wzr, [x0, #28]
    17d0:	ldr	x0, [sp, #8]
    17d4:	ldr	w0, [x0, #24]
    17d8:	sub	w1, w0, #0x1
    17dc:	ldr	x0, [sp, #8]
    17e0:	str	w1, [x0, #24]
    17e4:	ldr	x0, [sp, #8]
    17e8:	ldr	w0, [x0, #24]
    17ec:	cmp	w0, #0x1
    17f0:	cset	w0, eq  // eq = none
    17f4:	and	w0, w0, #0xff
    17f8:	sxtb	w1, w0
    17fc:	ldrsb	w0, [sp, #35]
    1800:	eor	w0, w1, w0
    1804:	sxtb	w0, w0
    1808:	strb	w0, [sp, #35]
    180c:	ldr	x0, [sp, #8]
    1810:	ldr	w0, [x0, #1092]
    1814:	add	w1, w0, #0x1
    1818:	ldr	x0, [sp, #8]
    181c:	str	w1, [x0, #1092]
    1820:	ldr	x0, [sp, #8]
    1824:	ldr	w1, [x0, #1092]
    1828:	ldr	x0, [sp, #8]
    182c:	add	x0, x0, #0xc, lsl #12
    1830:	ldr	w0, [x0, #14928]
    1834:	add	w0, w0, #0x1
    1838:	cmp	w1, w0
    183c:	b.eq	1db4 <unRLE_obuf_to_output_FAST+0x844>  // b.none
    1840:	ldrb	w1, [sp, #35]
    1844:	ldr	x0, [sp, #8]
    1848:	ldr	w0, [x0, #64]
    184c:	cmp	w1, w0
    1850:	b.eq	1864 <unRLE_obuf_to_output_FAST+0x2f4>  // b.none
    1854:	ldrb	w1, [sp, #35]
    1858:	ldr	x0, [sp, #8]
    185c:	str	w1, [x0, #64]
    1860:	b	1dc8 <unRLE_obuf_to_output_FAST+0x858>
    1864:	ldr	x0, [sp, #8]
    1868:	mov	w1, #0x2                   	// #2
    186c:	str	w1, [x0, #16]
    1870:	ldr	x0, [sp, #8]
    1874:	ldr	w1, [x0, #60]
    1878:	ldr	x0, [sp, #8]
    187c:	ldr	w0, [x0, #40]
    1880:	mov	w2, w0
    1884:	mov	w0, #0x86a0                	// #34464
    1888:	movk	w0, #0x1, lsl #16
    188c:	mul	w0, w2, w0
    1890:	cmp	w1, w0
    1894:	b.cc	18a0 <unRLE_obuf_to_output_FAST+0x330>  // b.lo, b.ul, b.last
    1898:	mov	w0, #0x1                   	// #1
    189c:	b	2304 <unRLE_obuf_to_output_FAST+0xd94>
    18a0:	ldr	x0, [sp, #8]
    18a4:	ldr	x1, [x0, #3152]
    18a8:	ldr	x0, [sp, #8]
    18ac:	ldr	w0, [x0, #60]
    18b0:	mov	w0, w0
    18b4:	lsl	x0, x0, #2
    18b8:	add	x0, x1, x0
    18bc:	ldr	w1, [x0]
    18c0:	ldr	x0, [sp, #8]
    18c4:	str	w1, [x0, #60]
    18c8:	ldr	x0, [sp, #8]
    18cc:	ldr	w0, [x0, #60]
    18d0:	strb	w0, [sp, #35]
    18d4:	ldr	x0, [sp, #8]
    18d8:	ldr	w0, [x0, #60]
    18dc:	lsr	w1, w0, #8
    18e0:	ldr	x0, [sp, #8]
    18e4:	str	w1, [x0, #60]
    18e8:	ldr	x0, [sp, #8]
    18ec:	ldr	w0, [x0, #24]
    18f0:	cmp	w0, #0x0
    18f4:	b.ne	1944 <unRLE_obuf_to_output_FAST+0x3d4>  // b.any
    18f8:	ldr	x0, [sp, #8]
    18fc:	ldr	w1, [x0, #28]
    1900:	adrp	x0, 0 <BZ2_rNums>
    1904:	add	x0, x0, #0x0
    1908:	sxtw	x1, w1
    190c:	ldr	w1, [x0, x1, lsl #2]
    1910:	ldr	x0, [sp, #8]
    1914:	str	w1, [x0, #24]
    1918:	ldr	x0, [sp, #8]
    191c:	ldr	w0, [x0, #28]
    1920:	add	w1, w0, #0x1
    1924:	ldr	x0, [sp, #8]
    1928:	str	w1, [x0, #28]
    192c:	ldr	x0, [sp, #8]
    1930:	ldr	w0, [x0, #28]
    1934:	cmp	w0, #0x200
    1938:	b.ne	1944 <unRLE_obuf_to_output_FAST+0x3d4>  // b.any
    193c:	ldr	x0, [sp, #8]
    1940:	str	wzr, [x0, #28]
    1944:	ldr	x0, [sp, #8]
    1948:	ldr	w0, [x0, #24]
    194c:	sub	w1, w0, #0x1
    1950:	ldr	x0, [sp, #8]
    1954:	str	w1, [x0, #24]
    1958:	ldr	x0, [sp, #8]
    195c:	ldr	w0, [x0, #24]
    1960:	cmp	w0, #0x1
    1964:	cset	w0, eq  // eq = none
    1968:	and	w0, w0, #0xff
    196c:	sxtb	w1, w0
    1970:	ldrsb	w0, [sp, #35]
    1974:	eor	w0, w1, w0
    1978:	sxtb	w0, w0
    197c:	strb	w0, [sp, #35]
    1980:	ldr	x0, [sp, #8]
    1984:	ldr	w0, [x0, #1092]
    1988:	add	w1, w0, #0x1
    198c:	ldr	x0, [sp, #8]
    1990:	str	w1, [x0, #1092]
    1994:	ldr	x0, [sp, #8]
    1998:	ldr	w1, [x0, #1092]
    199c:	ldr	x0, [sp, #8]
    19a0:	add	x0, x0, #0xc, lsl #12
    19a4:	ldr	w0, [x0, #14928]
    19a8:	add	w0, w0, #0x1
    19ac:	cmp	w1, w0
    19b0:	b.eq	1dbc <unRLE_obuf_to_output_FAST+0x84c>  // b.none
    19b4:	ldrb	w1, [sp, #35]
    19b8:	ldr	x0, [sp, #8]
    19bc:	ldr	w0, [x0, #64]
    19c0:	cmp	w1, w0
    19c4:	b.eq	19d8 <unRLE_obuf_to_output_FAST+0x468>  // b.none
    19c8:	ldrb	w1, [sp, #35]
    19cc:	ldr	x0, [sp, #8]
    19d0:	str	w1, [x0, #64]
    19d4:	b	1dc8 <unRLE_obuf_to_output_FAST+0x858>
    19d8:	ldr	x0, [sp, #8]
    19dc:	mov	w1, #0x3                   	// #3
    19e0:	str	w1, [x0, #16]
    19e4:	ldr	x0, [sp, #8]
    19e8:	ldr	w1, [x0, #60]
    19ec:	ldr	x0, [sp, #8]
    19f0:	ldr	w0, [x0, #40]
    19f4:	mov	w2, w0
    19f8:	mov	w0, #0x86a0                	// #34464
    19fc:	movk	w0, #0x1, lsl #16
    1a00:	mul	w0, w2, w0
    1a04:	cmp	w1, w0
    1a08:	b.cc	1a14 <unRLE_obuf_to_output_FAST+0x4a4>  // b.lo, b.ul, b.last
    1a0c:	mov	w0, #0x1                   	// #1
    1a10:	b	2304 <unRLE_obuf_to_output_FAST+0xd94>
    1a14:	ldr	x0, [sp, #8]
    1a18:	ldr	x1, [x0, #3152]
    1a1c:	ldr	x0, [sp, #8]
    1a20:	ldr	w0, [x0, #60]
    1a24:	mov	w0, w0
    1a28:	lsl	x0, x0, #2
    1a2c:	add	x0, x1, x0
    1a30:	ldr	w1, [x0]
    1a34:	ldr	x0, [sp, #8]
    1a38:	str	w1, [x0, #60]
    1a3c:	ldr	x0, [sp, #8]
    1a40:	ldr	w0, [x0, #60]
    1a44:	strb	w0, [sp, #35]
    1a48:	ldr	x0, [sp, #8]
    1a4c:	ldr	w0, [x0, #60]
    1a50:	lsr	w1, w0, #8
    1a54:	ldr	x0, [sp, #8]
    1a58:	str	w1, [x0, #60]
    1a5c:	ldr	x0, [sp, #8]
    1a60:	ldr	w0, [x0, #24]
    1a64:	cmp	w0, #0x0
    1a68:	b.ne	1ab8 <unRLE_obuf_to_output_FAST+0x548>  // b.any
    1a6c:	ldr	x0, [sp, #8]
    1a70:	ldr	w1, [x0, #28]
    1a74:	adrp	x0, 0 <BZ2_rNums>
    1a78:	add	x0, x0, #0x0
    1a7c:	sxtw	x1, w1
    1a80:	ldr	w1, [x0, x1, lsl #2]
    1a84:	ldr	x0, [sp, #8]
    1a88:	str	w1, [x0, #24]
    1a8c:	ldr	x0, [sp, #8]
    1a90:	ldr	w0, [x0, #28]
    1a94:	add	w1, w0, #0x1
    1a98:	ldr	x0, [sp, #8]
    1a9c:	str	w1, [x0, #28]
    1aa0:	ldr	x0, [sp, #8]
    1aa4:	ldr	w0, [x0, #28]
    1aa8:	cmp	w0, #0x200
    1aac:	b.ne	1ab8 <unRLE_obuf_to_output_FAST+0x548>  // b.any
    1ab0:	ldr	x0, [sp, #8]
    1ab4:	str	wzr, [x0, #28]
    1ab8:	ldr	x0, [sp, #8]
    1abc:	ldr	w0, [x0, #24]
    1ac0:	sub	w1, w0, #0x1
    1ac4:	ldr	x0, [sp, #8]
    1ac8:	str	w1, [x0, #24]
    1acc:	ldr	x0, [sp, #8]
    1ad0:	ldr	w0, [x0, #24]
    1ad4:	cmp	w0, #0x1
    1ad8:	cset	w0, eq  // eq = none
    1adc:	and	w0, w0, #0xff
    1ae0:	sxtb	w1, w0
    1ae4:	ldrsb	w0, [sp, #35]
    1ae8:	eor	w0, w1, w0
    1aec:	sxtb	w0, w0
    1af0:	strb	w0, [sp, #35]
    1af4:	ldr	x0, [sp, #8]
    1af8:	ldr	w0, [x0, #1092]
    1afc:	add	w1, w0, #0x1
    1b00:	ldr	x0, [sp, #8]
    1b04:	str	w1, [x0, #1092]
    1b08:	ldr	x0, [sp, #8]
    1b0c:	ldr	w1, [x0, #1092]
    1b10:	ldr	x0, [sp, #8]
    1b14:	add	x0, x0, #0xc, lsl #12
    1b18:	ldr	w0, [x0, #14928]
    1b1c:	add	w0, w0, #0x1
    1b20:	cmp	w1, w0
    1b24:	b.eq	1dc4 <unRLE_obuf_to_output_FAST+0x854>  // b.none
    1b28:	ldrb	w1, [sp, #35]
    1b2c:	ldr	x0, [sp, #8]
    1b30:	ldr	w0, [x0, #64]
    1b34:	cmp	w1, w0
    1b38:	b.eq	1b4c <unRLE_obuf_to_output_FAST+0x5dc>  // b.none
    1b3c:	ldrb	w1, [sp, #35]
    1b40:	ldr	x0, [sp, #8]
    1b44:	str	w1, [x0, #64]
    1b48:	b	1dc8 <unRLE_obuf_to_output_FAST+0x858>
    1b4c:	ldr	x0, [sp, #8]
    1b50:	ldr	w1, [x0, #60]
    1b54:	ldr	x0, [sp, #8]
    1b58:	ldr	w0, [x0, #40]
    1b5c:	mov	w2, w0
    1b60:	mov	w0, #0x86a0                	// #34464
    1b64:	movk	w0, #0x1, lsl #16
    1b68:	mul	w0, w2, w0
    1b6c:	cmp	w1, w0
    1b70:	b.cc	1b7c <unRLE_obuf_to_output_FAST+0x60c>  // b.lo, b.ul, b.last
    1b74:	mov	w0, #0x1                   	// #1
    1b78:	b	2304 <unRLE_obuf_to_output_FAST+0xd94>
    1b7c:	ldr	x0, [sp, #8]
    1b80:	ldr	x1, [x0, #3152]
    1b84:	ldr	x0, [sp, #8]
    1b88:	ldr	w0, [x0, #60]
    1b8c:	mov	w0, w0
    1b90:	lsl	x0, x0, #2
    1b94:	add	x0, x1, x0
    1b98:	ldr	w1, [x0]
    1b9c:	ldr	x0, [sp, #8]
    1ba0:	str	w1, [x0, #60]
    1ba4:	ldr	x0, [sp, #8]
    1ba8:	ldr	w0, [x0, #60]
    1bac:	strb	w0, [sp, #35]
    1bb0:	ldr	x0, [sp, #8]
    1bb4:	ldr	w0, [x0, #60]
    1bb8:	lsr	w1, w0, #8
    1bbc:	ldr	x0, [sp, #8]
    1bc0:	str	w1, [x0, #60]
    1bc4:	ldr	x0, [sp, #8]
    1bc8:	ldr	w0, [x0, #24]
    1bcc:	cmp	w0, #0x0
    1bd0:	b.ne	1c20 <unRLE_obuf_to_output_FAST+0x6b0>  // b.any
    1bd4:	ldr	x0, [sp, #8]
    1bd8:	ldr	w1, [x0, #28]
    1bdc:	adrp	x0, 0 <BZ2_rNums>
    1be0:	add	x0, x0, #0x0
    1be4:	sxtw	x1, w1
    1be8:	ldr	w1, [x0, x1, lsl #2]
    1bec:	ldr	x0, [sp, #8]
    1bf0:	str	w1, [x0, #24]
    1bf4:	ldr	x0, [sp, #8]
    1bf8:	ldr	w0, [x0, #28]
    1bfc:	add	w1, w0, #0x1
    1c00:	ldr	x0, [sp, #8]
    1c04:	str	w1, [x0, #28]
    1c08:	ldr	x0, [sp, #8]
    1c0c:	ldr	w0, [x0, #28]
    1c10:	cmp	w0, #0x200
    1c14:	b.ne	1c20 <unRLE_obuf_to_output_FAST+0x6b0>  // b.any
    1c18:	ldr	x0, [sp, #8]
    1c1c:	str	wzr, [x0, #28]
    1c20:	ldr	x0, [sp, #8]
    1c24:	ldr	w0, [x0, #24]
    1c28:	sub	w1, w0, #0x1
    1c2c:	ldr	x0, [sp, #8]
    1c30:	str	w1, [x0, #24]
    1c34:	ldr	x0, [sp, #8]
    1c38:	ldr	w0, [x0, #24]
    1c3c:	cmp	w0, #0x1
    1c40:	cset	w0, eq  // eq = none
    1c44:	and	w0, w0, #0xff
    1c48:	sxtb	w1, w0
    1c4c:	ldrsb	w0, [sp, #35]
    1c50:	eor	w0, w1, w0
    1c54:	sxtb	w0, w0
    1c58:	strb	w0, [sp, #35]
    1c5c:	ldr	x0, [sp, #8]
    1c60:	ldr	w0, [x0, #1092]
    1c64:	add	w1, w0, #0x1
    1c68:	ldr	x0, [sp, #8]
    1c6c:	str	w1, [x0, #1092]
    1c70:	ldrb	w0, [sp, #35]
    1c74:	add	w1, w0, #0x4
    1c78:	ldr	x0, [sp, #8]
    1c7c:	str	w1, [x0, #16]
    1c80:	ldr	x0, [sp, #8]
    1c84:	ldr	w1, [x0, #60]
    1c88:	ldr	x0, [sp, #8]
    1c8c:	ldr	w0, [x0, #40]
    1c90:	mov	w2, w0
    1c94:	mov	w0, #0x86a0                	// #34464
    1c98:	movk	w0, #0x1, lsl #16
    1c9c:	mul	w0, w2, w0
    1ca0:	cmp	w1, w0
    1ca4:	b.cc	1cb0 <unRLE_obuf_to_output_FAST+0x740>  // b.lo, b.ul, b.last
    1ca8:	mov	w0, #0x1                   	// #1
    1cac:	b	2304 <unRLE_obuf_to_output_FAST+0xd94>
    1cb0:	ldr	x0, [sp, #8]
    1cb4:	ldr	x1, [x0, #3152]
    1cb8:	ldr	x0, [sp, #8]
    1cbc:	ldr	w0, [x0, #60]
    1cc0:	mov	w0, w0
    1cc4:	lsl	x0, x0, #2
    1cc8:	add	x0, x1, x0
    1ccc:	ldr	w1, [x0]
    1cd0:	ldr	x0, [sp, #8]
    1cd4:	str	w1, [x0, #60]
    1cd8:	ldr	x0, [sp, #8]
    1cdc:	ldr	w0, [x0, #60]
    1ce0:	and	w0, w0, #0xff
    1ce4:	mov	w1, w0
    1ce8:	ldr	x0, [sp, #8]
    1cec:	str	w1, [x0, #64]
    1cf0:	ldr	x0, [sp, #8]
    1cf4:	ldr	w0, [x0, #60]
    1cf8:	lsr	w1, w0, #8
    1cfc:	ldr	x0, [sp, #8]
    1d00:	str	w1, [x0, #60]
    1d04:	ldr	x0, [sp, #8]
    1d08:	ldr	w0, [x0, #24]
    1d0c:	cmp	w0, #0x0
    1d10:	b.ne	1d60 <unRLE_obuf_to_output_FAST+0x7f0>  // b.any
    1d14:	ldr	x0, [sp, #8]
    1d18:	ldr	w1, [x0, #28]
    1d1c:	adrp	x0, 0 <BZ2_rNums>
    1d20:	add	x0, x0, #0x0
    1d24:	sxtw	x1, w1
    1d28:	ldr	w1, [x0, x1, lsl #2]
    1d2c:	ldr	x0, [sp, #8]
    1d30:	str	w1, [x0, #24]
    1d34:	ldr	x0, [sp, #8]
    1d38:	ldr	w0, [x0, #28]
    1d3c:	add	w1, w0, #0x1
    1d40:	ldr	x0, [sp, #8]
    1d44:	str	w1, [x0, #28]
    1d48:	ldr	x0, [sp, #8]
    1d4c:	ldr	w0, [x0, #28]
    1d50:	cmp	w0, #0x200
    1d54:	b.ne	1d60 <unRLE_obuf_to_output_FAST+0x7f0>  // b.any
    1d58:	ldr	x0, [sp, #8]
    1d5c:	str	wzr, [x0, #28]
    1d60:	ldr	x0, [sp, #8]
    1d64:	ldr	w0, [x0, #24]
    1d68:	sub	w1, w0, #0x1
    1d6c:	ldr	x0, [sp, #8]
    1d70:	str	w1, [x0, #24]
    1d74:	ldr	x0, [sp, #8]
    1d78:	ldr	w0, [x0, #64]
    1d7c:	ldr	x1, [sp, #8]
    1d80:	ldr	w1, [x1, #24]
    1d84:	cmp	w1, #0x1
    1d88:	cset	w1, eq  // eq = none
    1d8c:	and	w1, w1, #0xff
    1d90:	eor	w1, w0, w1
    1d94:	ldr	x0, [sp, #8]
    1d98:	str	w1, [x0, #64]
    1d9c:	ldr	x0, [sp, #8]
    1da0:	ldr	w0, [x0, #1092]
    1da4:	add	w1, w0, #0x1
    1da8:	ldr	x0, [sp, #8]
    1dac:	str	w1, [x0, #1092]
    1db0:	b	1588 <unRLE_obuf_to_output_FAST+0x18>
    1db4:	nop
    1db8:	b	1588 <unRLE_obuf_to_output_FAST+0x18>
    1dbc:	nop
    1dc0:	b	1588 <unRLE_obuf_to_output_FAST+0x18>
    1dc4:	nop
    1dc8:	b	1588 <unRLE_obuf_to_output_FAST+0x18>
    1dcc:	ldr	x0, [sp, #8]
    1dd0:	ldr	w0, [x0, #3184]
    1dd4:	str	w0, [sp, #92]
    1dd8:	ldr	x0, [sp, #8]
    1ddc:	ldrb	w0, [x0, #12]
    1de0:	strb	w0, [sp, #91]
    1de4:	ldr	x0, [sp, #8]
    1de8:	ldr	w0, [x0, #16]
    1dec:	str	w0, [sp, #84]
    1df0:	ldr	x0, [sp, #8]
    1df4:	ldr	w0, [x0, #1092]
    1df8:	str	w0, [sp, #80]
    1dfc:	ldr	x0, [sp, #8]
    1e00:	ldr	w0, [x0, #64]
    1e04:	str	w0, [sp, #76]
    1e08:	ldr	x0, [sp, #8]
    1e0c:	ldr	x0, [x0, #3152]
    1e10:	str	x0, [sp, #48]
    1e14:	ldr	x0, [sp, #8]
    1e18:	ldr	w0, [x0, #60]
    1e1c:	str	w0, [sp, #72]
    1e20:	ldr	x0, [sp, #8]
    1e24:	ldr	x0, [x0]
    1e28:	ldr	x0, [x0, #24]
    1e2c:	str	x0, [sp, #64]
    1e30:	ldr	x0, [sp, #8]
    1e34:	ldr	x0, [x0]
    1e38:	ldr	w0, [x0, #32]
    1e3c:	str	w0, [sp, #60]
    1e40:	ldr	x0, [sp, #8]
    1e44:	ldr	w0, [x0, #40]
    1e48:	str	w0, [sp, #44]
    1e4c:	ldr	w0, [sp, #60]
    1e50:	str	w0, [sp, #40]
    1e54:	ldr	x0, [sp, #8]
    1e58:	add	x0, x0, #0xc, lsl #12
    1e5c:	ldr	w0, [x0, #14928]
    1e60:	add	w0, w0, #0x1
    1e64:	str	w0, [sp, #36]
    1e68:	ldr	w0, [sp, #84]
    1e6c:	cmp	w0, #0x0
    1e70:	b.le	1f68 <unRLE_obuf_to_output_FAST+0x9f8>
    1e74:	ldr	w0, [sp, #60]
    1e78:	cmp	w0, #0x0
    1e7c:	b.eq	2224 <unRLE_obuf_to_output_FAST+0xcb4>  // b.none
    1e80:	ldr	w0, [sp, #84]
    1e84:	cmp	w0, #0x1
    1e88:	b.eq	1ef0 <unRLE_obuf_to_output_FAST+0x980>  // b.none
    1e8c:	ldr	x0, [sp, #64]
    1e90:	ldrb	w1, [sp, #91]
    1e94:	strb	w1, [x0]
    1e98:	ldr	w0, [sp, #92]
    1e9c:	lsl	w1, w0, #8
    1ea0:	ldr	w0, [sp, #92]
    1ea4:	lsr	w2, w0, #24
    1ea8:	ldrb	w0, [sp, #91]
    1eac:	eor	w2, w2, w0
    1eb0:	adrp	x0, 0 <BZ2_crc32Table>
    1eb4:	add	x0, x0, #0x0
    1eb8:	mov	w2, w2
    1ebc:	ldr	w0, [x0, x2, lsl #2]
    1ec0:	eor	w0, w1, w0
    1ec4:	str	w0, [sp, #92]
    1ec8:	ldr	w0, [sp, #84]
    1ecc:	sub	w0, w0, #0x1
    1ed0:	str	w0, [sp, #84]
    1ed4:	ldr	x0, [sp, #64]
    1ed8:	add	x0, x0, #0x1
    1edc:	str	x0, [sp, #64]
    1ee0:	ldr	w0, [sp, #60]
    1ee4:	sub	w0, w0, #0x1
    1ee8:	str	w0, [sp, #60]
    1eec:	b	1e74 <unRLE_obuf_to_output_FAST+0x904>
    1ef0:	nop
    1ef4:	b	1efc <unRLE_obuf_to_output_FAST+0x98c>
    1ef8:	nop
    1efc:	ldr	w0, [sp, #60]
    1f00:	cmp	w0, #0x0
    1f04:	b.ne	1f14 <unRLE_obuf_to_output_FAST+0x9a4>  // b.any
    1f08:	mov	w0, #0x1                   	// #1
    1f0c:	str	w0, [sp, #84]
    1f10:	b	2228 <unRLE_obuf_to_output_FAST+0xcb8>
    1f14:	ldr	x0, [sp, #64]
    1f18:	ldrb	w1, [sp, #91]
    1f1c:	strb	w1, [x0]
    1f20:	ldr	w0, [sp, #92]
    1f24:	lsl	w1, w0, #8
    1f28:	ldr	w0, [sp, #92]
    1f2c:	lsr	w2, w0, #24
    1f30:	ldrb	w0, [sp, #91]
    1f34:	eor	w2, w2, w0
    1f38:	adrp	x0, 0 <BZ2_crc32Table>
    1f3c:	add	x0, x0, #0x0
    1f40:	mov	w2, w2
    1f44:	ldr	w0, [x0, x2, lsl #2]
    1f48:	eor	w0, w1, w0
    1f4c:	str	w0, [sp, #92]
    1f50:	ldr	x0, [sp, #64]
    1f54:	add	x0, x0, #0x1
    1f58:	str	x0, [sp, #64]
    1f5c:	ldr	w0, [sp, #60]
    1f60:	sub	w0, w0, #0x1
    1f64:	str	w0, [sp, #60]
    1f68:	ldr	w1, [sp, #80]
    1f6c:	ldr	w0, [sp, #36]
    1f70:	cmp	w1, w0
    1f74:	b.le	1f80 <unRLE_obuf_to_output_FAST+0xa10>
    1f78:	mov	w0, #0x1                   	// #1
    1f7c:	b	2304 <unRLE_obuf_to_output_FAST+0xd94>
    1f80:	ldr	w1, [sp, #80]
    1f84:	ldr	w0, [sp, #36]
    1f88:	cmp	w1, w0
    1f8c:	b.ne	1f98 <unRLE_obuf_to_output_FAST+0xa28>  // b.any
    1f90:	str	wzr, [sp, #84]
    1f94:	b	2228 <unRLE_obuf_to_output_FAST+0xcb8>
    1f98:	ldr	w0, [sp, #76]
    1f9c:	strb	w0, [sp, #91]
    1fa0:	ldr	w1, [sp, #44]
    1fa4:	mov	w0, #0x86a0                	// #34464
    1fa8:	movk	w0, #0x1, lsl #16
    1fac:	mul	w0, w1, w0
    1fb0:	ldr	w1, [sp, #72]
    1fb4:	cmp	w1, w0
    1fb8:	b.cc	1fc4 <unRLE_obuf_to_output_FAST+0xa54>  // b.lo, b.ul, b.last
    1fbc:	mov	w0, #0x1                   	// #1
    1fc0:	b	2304 <unRLE_obuf_to_output_FAST+0xd94>
    1fc4:	ldr	w0, [sp, #72]
    1fc8:	lsl	x0, x0, #2
    1fcc:	ldr	x1, [sp, #48]
    1fd0:	add	x0, x1, x0
    1fd4:	ldr	w0, [x0]
    1fd8:	str	w0, [sp, #72]
    1fdc:	ldr	w0, [sp, #72]
    1fe0:	strb	w0, [sp, #35]
    1fe4:	ldr	w0, [sp, #72]
    1fe8:	lsr	w0, w0, #8
    1fec:	str	w0, [sp, #72]
    1ff0:	ldr	w0, [sp, #80]
    1ff4:	add	w0, w0, #0x1
    1ff8:	str	w0, [sp, #80]
    1ffc:	ldrb	w0, [sp, #35]
    2000:	ldr	w1, [sp, #76]
    2004:	cmp	w1, w0
    2008:	b.eq	2018 <unRLE_obuf_to_output_FAST+0xaa8>  // b.none
    200c:	ldrb	w0, [sp, #35]
    2010:	str	w0, [sp, #76]
    2014:	b	1efc <unRLE_obuf_to_output_FAST+0x98c>
    2018:	ldr	w1, [sp, #80]
    201c:	ldr	w0, [sp, #36]
    2020:	cmp	w1, w0
    2024:	b.eq	1ef8 <unRLE_obuf_to_output_FAST+0x988>  // b.none
    2028:	mov	w0, #0x2                   	// #2
    202c:	str	w0, [sp, #84]
    2030:	ldr	w1, [sp, #44]
    2034:	mov	w0, #0x86a0                	// #34464
    2038:	movk	w0, #0x1, lsl #16
    203c:	mul	w0, w1, w0
    2040:	ldr	w1, [sp, #72]
    2044:	cmp	w1, w0
    2048:	b.cc	2054 <unRLE_obuf_to_output_FAST+0xae4>  // b.lo, b.ul, b.last
    204c:	mov	w0, #0x1                   	// #1
    2050:	b	2304 <unRLE_obuf_to_output_FAST+0xd94>
    2054:	ldr	w0, [sp, #72]
    2058:	lsl	x0, x0, #2
    205c:	ldr	x1, [sp, #48]
    2060:	add	x0, x1, x0
    2064:	ldr	w0, [x0]
    2068:	str	w0, [sp, #72]
    206c:	ldr	w0, [sp, #72]
    2070:	strb	w0, [sp, #35]
    2074:	ldr	w0, [sp, #72]
    2078:	lsr	w0, w0, #8
    207c:	str	w0, [sp, #72]
    2080:	ldr	w0, [sp, #80]
    2084:	add	w0, w0, #0x1
    2088:	str	w0, [sp, #80]
    208c:	ldr	w1, [sp, #80]
    2090:	ldr	w0, [sp, #36]
    2094:	cmp	w1, w0
    2098:	b.eq	2214 <unRLE_obuf_to_output_FAST+0xca4>  // b.none
    209c:	ldrb	w0, [sp, #35]
    20a0:	ldr	w1, [sp, #76]
    20a4:	cmp	w1, w0
    20a8:	b.eq	20b8 <unRLE_obuf_to_output_FAST+0xb48>  // b.none
    20ac:	ldrb	w0, [sp, #35]
    20b0:	str	w0, [sp, #76]
    20b4:	b	2220 <unRLE_obuf_to_output_FAST+0xcb0>
    20b8:	mov	w0, #0x3                   	// #3
    20bc:	str	w0, [sp, #84]
    20c0:	ldr	w1, [sp, #44]
    20c4:	mov	w0, #0x86a0                	// #34464
    20c8:	movk	w0, #0x1, lsl #16
    20cc:	mul	w0, w1, w0
    20d0:	ldr	w1, [sp, #72]
    20d4:	cmp	w1, w0
    20d8:	b.cc	20e4 <unRLE_obuf_to_output_FAST+0xb74>  // b.lo, b.ul, b.last
    20dc:	mov	w0, #0x1                   	// #1
    20e0:	b	2304 <unRLE_obuf_to_output_FAST+0xd94>
    20e4:	ldr	w0, [sp, #72]
    20e8:	lsl	x0, x0, #2
    20ec:	ldr	x1, [sp, #48]
    20f0:	add	x0, x1, x0
    20f4:	ldr	w0, [x0]
    20f8:	str	w0, [sp, #72]
    20fc:	ldr	w0, [sp, #72]
    2100:	strb	w0, [sp, #35]
    2104:	ldr	w0, [sp, #72]
    2108:	lsr	w0, w0, #8
    210c:	str	w0, [sp, #72]
    2110:	ldr	w0, [sp, #80]
    2114:	add	w0, w0, #0x1
    2118:	str	w0, [sp, #80]
    211c:	ldr	w1, [sp, #80]
    2120:	ldr	w0, [sp, #36]
    2124:	cmp	w1, w0
    2128:	b.eq	221c <unRLE_obuf_to_output_FAST+0xcac>  // b.none
    212c:	ldrb	w0, [sp, #35]
    2130:	ldr	w1, [sp, #76]
    2134:	cmp	w1, w0
    2138:	b.eq	2148 <unRLE_obuf_to_output_FAST+0xbd8>  // b.none
    213c:	ldrb	w0, [sp, #35]
    2140:	str	w0, [sp, #76]
    2144:	b	2220 <unRLE_obuf_to_output_FAST+0xcb0>
    2148:	ldr	w1, [sp, #44]
    214c:	mov	w0, #0x86a0                	// #34464
    2150:	movk	w0, #0x1, lsl #16
    2154:	mul	w0, w1, w0
    2158:	ldr	w1, [sp, #72]
    215c:	cmp	w1, w0
    2160:	b.cc	216c <unRLE_obuf_to_output_FAST+0xbfc>  // b.lo, b.ul, b.last
    2164:	mov	w0, #0x1                   	// #1
    2168:	b	2304 <unRLE_obuf_to_output_FAST+0xd94>
    216c:	ldr	w0, [sp, #72]
    2170:	lsl	x0, x0, #2
    2174:	ldr	x1, [sp, #48]
    2178:	add	x0, x1, x0
    217c:	ldr	w0, [x0]
    2180:	str	w0, [sp, #72]
    2184:	ldr	w0, [sp, #72]
    2188:	strb	w0, [sp, #35]
    218c:	ldr	w0, [sp, #72]
    2190:	lsr	w0, w0, #8
    2194:	str	w0, [sp, #72]
    2198:	ldr	w0, [sp, #80]
    219c:	add	w0, w0, #0x1
    21a0:	str	w0, [sp, #80]
    21a4:	ldrb	w0, [sp, #35]
    21a8:	add	w0, w0, #0x4
    21ac:	str	w0, [sp, #84]
    21b0:	ldr	w1, [sp, #44]
    21b4:	mov	w0, #0x86a0                	// #34464
    21b8:	movk	w0, #0x1, lsl #16
    21bc:	mul	w0, w1, w0
    21c0:	ldr	w1, [sp, #72]
    21c4:	cmp	w1, w0
    21c8:	b.cc	21d4 <unRLE_obuf_to_output_FAST+0xc64>  // b.lo, b.ul, b.last
    21cc:	mov	w0, #0x1                   	// #1
    21d0:	b	2304 <unRLE_obuf_to_output_FAST+0xd94>
    21d4:	ldr	w0, [sp, #72]
    21d8:	lsl	x0, x0, #2
    21dc:	ldr	x1, [sp, #48]
    21e0:	add	x0, x1, x0
    21e4:	ldr	w0, [x0]
    21e8:	str	w0, [sp, #72]
    21ec:	ldr	w0, [sp, #72]
    21f0:	and	w0, w0, #0xff
    21f4:	str	w0, [sp, #76]
    21f8:	ldr	w0, [sp, #72]
    21fc:	lsr	w0, w0, #8
    2200:	str	w0, [sp, #72]
    2204:	ldr	w0, [sp, #80]
    2208:	add	w0, w0, #0x1
    220c:	str	w0, [sp, #80]
    2210:	b	1e68 <unRLE_obuf_to_output_FAST+0x8f8>
    2214:	nop
    2218:	b	1e68 <unRLE_obuf_to_output_FAST+0x8f8>
    221c:	nop
    2220:	b	1e68 <unRLE_obuf_to_output_FAST+0x8f8>
    2224:	nop
    2228:	ldr	x0, [sp, #8]
    222c:	ldr	x0, [x0]
    2230:	ldr	w0, [x0, #36]
    2234:	str	w0, [sp, #28]
    2238:	ldr	x0, [sp, #8]
    223c:	ldr	x0, [x0]
    2240:	ldr	w2, [x0, #36]
    2244:	ldr	w1, [sp, #40]
    2248:	ldr	w0, [sp, #60]
    224c:	sub	w1, w1, w0
    2250:	ldr	x0, [sp, #8]
    2254:	ldr	x0, [x0]
    2258:	add	w1, w2, w1
    225c:	str	w1, [x0, #36]
    2260:	ldr	x0, [sp, #8]
    2264:	ldr	x0, [x0]
    2268:	ldr	w0, [x0, #36]
    226c:	ldr	w1, [sp, #28]
    2270:	cmp	w1, w0
    2274:	b.ls	228c <unRLE_obuf_to_output_FAST+0xd1c>  // b.plast
    2278:	ldr	x0, [sp, #8]
    227c:	ldr	x0, [x0]
    2280:	ldr	w1, [x0, #40]
    2284:	add	w1, w1, #0x1
    2288:	str	w1, [x0, #40]
    228c:	ldr	x0, [sp, #8]
    2290:	ldr	w1, [sp, #92]
    2294:	str	w1, [x0, #3184]
    2298:	ldr	x0, [sp, #8]
    229c:	ldrb	w1, [sp, #91]
    22a0:	strb	w1, [x0, #12]
    22a4:	ldr	x0, [sp, #8]
    22a8:	ldr	w1, [sp, #84]
    22ac:	str	w1, [x0, #16]
    22b0:	ldr	x0, [sp, #8]
    22b4:	ldr	w1, [sp, #80]
    22b8:	str	w1, [x0, #1092]
    22bc:	ldr	x0, [sp, #8]
    22c0:	ldr	w1, [sp, #76]
    22c4:	str	w1, [x0, #64]
    22c8:	ldr	x0, [sp, #8]
    22cc:	ldr	x1, [sp, #48]
    22d0:	str	x1, [x0, #3152]
    22d4:	ldr	x0, [sp, #8]
    22d8:	ldr	w1, [sp, #72]
    22dc:	str	w1, [x0, #60]
    22e0:	ldr	x0, [sp, #8]
    22e4:	ldr	x0, [x0]
    22e8:	ldr	x1, [sp, #64]
    22ec:	str	x1, [x0, #24]
    22f0:	ldr	x0, [sp, #8]
    22f4:	ldr	x0, [x0]
    22f8:	ldr	w1, [sp, #60]
    22fc:	str	w1, [x0, #32]
    2300:	mov	w0, #0x0                   	// #0
    2304:	add	sp, sp, #0x60
    2308:	ret

000000000000230c <BZ2_indexIntoF>:
    230c:	sub	sp, sp, #0x20
    2310:	str	w0, [sp, #12]
    2314:	str	x1, [sp]
    2318:	str	wzr, [sp, #28]
    231c:	mov	w0, #0x100                 	// #256
    2320:	str	w0, [sp, #24]
    2324:	ldr	w1, [sp, #28]
    2328:	ldr	w0, [sp, #24]
    232c:	add	w0, w1, w0
    2330:	asr	w0, w0, #1
    2334:	str	w0, [sp, #20]
    2338:	ldrsw	x0, [sp, #20]
    233c:	lsl	x0, x0, #2
    2340:	ldr	x1, [sp]
    2344:	add	x0, x1, x0
    2348:	ldr	w0, [x0]
    234c:	ldr	w1, [sp, #12]
    2350:	cmp	w1, w0
    2354:	b.lt	2364 <BZ2_indexIntoF+0x58>  // b.tstop
    2358:	ldr	w0, [sp, #20]
    235c:	str	w0, [sp, #28]
    2360:	b	236c <BZ2_indexIntoF+0x60>
    2364:	ldr	w0, [sp, #20]
    2368:	str	w0, [sp, #24]
    236c:	ldr	w1, [sp, #24]
    2370:	ldr	w0, [sp, #28]
    2374:	sub	w0, w1, w0
    2378:	cmp	w0, #0x1
    237c:	b.ne	2324 <BZ2_indexIntoF+0x18>  // b.any
    2380:	ldr	w0, [sp, #28]
    2384:	add	sp, sp, #0x20
    2388:	ret

000000000000238c <unRLE_obuf_to_output_SMALL>:
    238c:	stp	x29, x30, [sp, #-48]!
    2390:	mov	x29, sp
    2394:	str	x0, [sp, #24]
    2398:	ldr	x0, [sp, #24]
    239c:	ldrb	w0, [x0, #20]
    23a0:	cmp	w0, #0x0
    23a4:	b.eq	2d64 <unRLE_obuf_to_output_SMALL+0x9d8>  // b.none
    23a8:	ldr	x0, [sp, #24]
    23ac:	ldr	x0, [x0]
    23b0:	ldr	w0, [x0, #32]
    23b4:	cmp	w0, #0x0
    23b8:	b.ne	23c4 <unRLE_obuf_to_output_SMALL+0x38>  // b.any
    23bc:	mov	w0, #0x0                   	// #0
    23c0:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    23c4:	ldr	x0, [sp, #24]
    23c8:	ldr	w0, [x0, #16]
    23cc:	cmp	w0, #0x0
    23d0:	b.eq	24a8 <unRLE_obuf_to_output_SMALL+0x11c>  // b.none
    23d4:	ldr	x0, [sp, #24]
    23d8:	ldr	x0, [x0]
    23dc:	ldr	x0, [x0, #24]
    23e0:	ldr	x1, [sp, #24]
    23e4:	ldrb	w1, [x1, #12]
    23e8:	strb	w1, [x0]
    23ec:	ldr	x0, [sp, #24]
    23f0:	ldr	w0, [x0, #3184]
    23f4:	lsl	w1, w0, #8
    23f8:	ldr	x0, [sp, #24]
    23fc:	ldr	w0, [x0, #3184]
    2400:	lsr	w0, w0, #24
    2404:	ldr	x2, [sp, #24]
    2408:	ldrb	w2, [x2, #12]
    240c:	eor	w2, w0, w2
    2410:	adrp	x0, 0 <BZ2_crc32Table>
    2414:	add	x0, x0, #0x0
    2418:	mov	w2, w2
    241c:	ldr	w0, [x0, x2, lsl #2]
    2420:	eor	w1, w1, w0
    2424:	ldr	x0, [sp, #24]
    2428:	str	w1, [x0, #3184]
    242c:	ldr	x0, [sp, #24]
    2430:	ldr	w0, [x0, #16]
    2434:	sub	w1, w0, #0x1
    2438:	ldr	x0, [sp, #24]
    243c:	str	w1, [x0, #16]
    2440:	ldr	x0, [sp, #24]
    2444:	ldr	x0, [x0]
    2448:	ldr	x1, [x0, #24]
    244c:	add	x1, x1, #0x1
    2450:	str	x1, [x0, #24]
    2454:	ldr	x0, [sp, #24]
    2458:	ldr	x0, [x0]
    245c:	ldr	w1, [x0, #32]
    2460:	sub	w1, w1, #0x1
    2464:	str	w1, [x0, #32]
    2468:	ldr	x0, [sp, #24]
    246c:	ldr	x0, [x0]
    2470:	ldr	w1, [x0, #36]
    2474:	add	w1, w1, #0x1
    2478:	str	w1, [x0, #36]
    247c:	ldr	x0, [sp, #24]
    2480:	ldr	x0, [x0]
    2484:	ldr	w0, [x0, #36]
    2488:	cmp	w0, #0x0
    248c:	b.ne	23a8 <unRLE_obuf_to_output_SMALL+0x1c>  // b.any
    2490:	ldr	x0, [sp, #24]
    2494:	ldr	x0, [x0]
    2498:	ldr	w1, [x0, #40]
    249c:	add	w1, w1, #0x1
    24a0:	str	w1, [x0, #40]
    24a4:	b	23a8 <unRLE_obuf_to_output_SMALL+0x1c>
    24a8:	nop
    24ac:	ldr	x0, [sp, #24]
    24b0:	ldr	w1, [x0, #1092]
    24b4:	ldr	x0, [sp, #24]
    24b8:	add	x0, x0, #0xc, lsl #12
    24bc:	ldr	w0, [x0, #14928]
    24c0:	add	w0, w0, #0x1
    24c4:	cmp	w1, w0
    24c8:	b.ne	24d4 <unRLE_obuf_to_output_SMALL+0x148>  // b.any
    24cc:	mov	w0, #0x0                   	// #0
    24d0:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    24d4:	ldr	x0, [sp, #24]
    24d8:	ldr	w1, [x0, #1092]
    24dc:	ldr	x0, [sp, #24]
    24e0:	add	x0, x0, #0xc, lsl #12
    24e4:	ldr	w0, [x0, #14928]
    24e8:	add	w0, w0, #0x1
    24ec:	cmp	w1, w0
    24f0:	b.le	24fc <unRLE_obuf_to_output_SMALL+0x170>
    24f4:	mov	w0, #0x1                   	// #1
    24f8:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    24fc:	ldr	x0, [sp, #24]
    2500:	mov	w1, #0x1                   	// #1
    2504:	str	w1, [x0, #16]
    2508:	ldr	x0, [sp, #24]
    250c:	ldr	w0, [x0, #64]
    2510:	and	w1, w0, #0xff
    2514:	ldr	x0, [sp, #24]
    2518:	strb	w1, [x0, #12]
    251c:	ldr	x0, [sp, #24]
    2520:	ldr	w1, [x0, #60]
    2524:	ldr	x0, [sp, #24]
    2528:	ldr	w0, [x0, #40]
    252c:	mov	w2, w0
    2530:	mov	w0, #0x86a0                	// #34464
    2534:	movk	w0, #0x1, lsl #16
    2538:	mul	w0, w2, w0
    253c:	cmp	w1, w0
    2540:	b.cc	254c <unRLE_obuf_to_output_SMALL+0x1c0>  // b.lo, b.ul, b.last
    2544:	mov	w0, #0x1                   	// #1
    2548:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    254c:	ldr	x0, [sp, #24]
    2550:	ldr	w0, [x0, #60]
    2554:	mov	w2, w0
    2558:	ldr	x0, [sp, #24]
    255c:	add	x0, x0, #0x448
    2560:	mov	x1, x0
    2564:	mov	w0, w2
    2568:	bl	230c <BZ2_indexIntoF>
    256c:	strb	w0, [sp, #47]
    2570:	ldr	x0, [sp, #24]
    2574:	ldr	x1, [x0, #3160]
    2578:	ldr	x0, [sp, #24]
    257c:	ldr	w0, [x0, #60]
    2580:	mov	w0, w0
    2584:	lsl	x0, x0, #1
    2588:	add	x0, x1, x0
    258c:	ldrh	w0, [x0]
    2590:	mov	w2, w0
    2594:	ldr	x0, [sp, #24]
    2598:	ldr	x1, [x0, #3168]
    259c:	ldr	x0, [sp, #24]
    25a0:	ldr	w0, [x0, #60]
    25a4:	lsr	w0, w0, #1
    25a8:	mov	w0, w0
    25ac:	add	x0, x1, x0
    25b0:	ldrb	w0, [x0]
    25b4:	mov	w1, w0
    25b8:	ldr	x0, [sp, #24]
    25bc:	ldr	w0, [x0, #60]
    25c0:	lsl	w0, w0, #2
    25c4:	and	w0, w0, #0x4
    25c8:	lsr	w0, w1, w0
    25cc:	lsl	w0, w0, #16
    25d0:	and	w0, w0, #0xf0000
    25d4:	orr	w1, w2, w0
    25d8:	ldr	x0, [sp, #24]
    25dc:	str	w1, [x0, #60]
    25e0:	ldr	x0, [sp, #24]
    25e4:	ldr	w0, [x0, #24]
    25e8:	cmp	w0, #0x0
    25ec:	b.ne	263c <unRLE_obuf_to_output_SMALL+0x2b0>  // b.any
    25f0:	ldr	x0, [sp, #24]
    25f4:	ldr	w1, [x0, #28]
    25f8:	adrp	x0, 0 <BZ2_rNums>
    25fc:	add	x0, x0, #0x0
    2600:	sxtw	x1, w1
    2604:	ldr	w1, [x0, x1, lsl #2]
    2608:	ldr	x0, [sp, #24]
    260c:	str	w1, [x0, #24]
    2610:	ldr	x0, [sp, #24]
    2614:	ldr	w0, [x0, #28]
    2618:	add	w1, w0, #0x1
    261c:	ldr	x0, [sp, #24]
    2620:	str	w1, [x0, #28]
    2624:	ldr	x0, [sp, #24]
    2628:	ldr	w0, [x0, #28]
    262c:	cmp	w0, #0x200
    2630:	b.ne	263c <unRLE_obuf_to_output_SMALL+0x2b0>  // b.any
    2634:	ldr	x0, [sp, #24]
    2638:	str	wzr, [x0, #28]
    263c:	ldr	x0, [sp, #24]
    2640:	ldr	w0, [x0, #24]
    2644:	sub	w1, w0, #0x1
    2648:	ldr	x0, [sp, #24]
    264c:	str	w1, [x0, #24]
    2650:	ldr	x0, [sp, #24]
    2654:	ldr	w0, [x0, #24]
    2658:	cmp	w0, #0x1
    265c:	cset	w0, eq  // eq = none
    2660:	and	w0, w0, #0xff
    2664:	sxtb	w1, w0
    2668:	ldrsb	w0, [sp, #47]
    266c:	eor	w0, w1, w0
    2670:	sxtb	w0, w0
    2674:	strb	w0, [sp, #47]
    2678:	ldr	x0, [sp, #24]
    267c:	ldr	w0, [x0, #1092]
    2680:	add	w1, w0, #0x1
    2684:	ldr	x0, [sp, #24]
    2688:	str	w1, [x0, #1092]
    268c:	ldr	x0, [sp, #24]
    2690:	ldr	w1, [x0, #1092]
    2694:	ldr	x0, [sp, #24]
    2698:	add	x0, x0, #0xc, lsl #12
    269c:	ldr	w0, [x0, #14928]
    26a0:	add	w0, w0, #0x1
    26a4:	cmp	w1, w0
    26a8:	b.eq	2d4c <unRLE_obuf_to_output_SMALL+0x9c0>  // b.none
    26ac:	ldrb	w1, [sp, #47]
    26b0:	ldr	x0, [sp, #24]
    26b4:	ldr	w0, [x0, #64]
    26b8:	cmp	w1, w0
    26bc:	b.eq	26d0 <unRLE_obuf_to_output_SMALL+0x344>  // b.none
    26c0:	ldrb	w1, [sp, #47]
    26c4:	ldr	x0, [sp, #24]
    26c8:	str	w1, [x0, #64]
    26cc:	b	2d60 <unRLE_obuf_to_output_SMALL+0x9d4>
    26d0:	ldr	x0, [sp, #24]
    26d4:	mov	w1, #0x2                   	// #2
    26d8:	str	w1, [x0, #16]
    26dc:	ldr	x0, [sp, #24]
    26e0:	ldr	w1, [x0, #60]
    26e4:	ldr	x0, [sp, #24]
    26e8:	ldr	w0, [x0, #40]
    26ec:	mov	w2, w0
    26f0:	mov	w0, #0x86a0                	// #34464
    26f4:	movk	w0, #0x1, lsl #16
    26f8:	mul	w0, w2, w0
    26fc:	cmp	w1, w0
    2700:	b.cc	270c <unRLE_obuf_to_output_SMALL+0x380>  // b.lo, b.ul, b.last
    2704:	mov	w0, #0x1                   	// #1
    2708:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    270c:	ldr	x0, [sp, #24]
    2710:	ldr	w0, [x0, #60]
    2714:	mov	w2, w0
    2718:	ldr	x0, [sp, #24]
    271c:	add	x0, x0, #0x448
    2720:	mov	x1, x0
    2724:	mov	w0, w2
    2728:	bl	230c <BZ2_indexIntoF>
    272c:	strb	w0, [sp, #47]
    2730:	ldr	x0, [sp, #24]
    2734:	ldr	x1, [x0, #3160]
    2738:	ldr	x0, [sp, #24]
    273c:	ldr	w0, [x0, #60]
    2740:	mov	w0, w0
    2744:	lsl	x0, x0, #1
    2748:	add	x0, x1, x0
    274c:	ldrh	w0, [x0]
    2750:	mov	w2, w0
    2754:	ldr	x0, [sp, #24]
    2758:	ldr	x1, [x0, #3168]
    275c:	ldr	x0, [sp, #24]
    2760:	ldr	w0, [x0, #60]
    2764:	lsr	w0, w0, #1
    2768:	mov	w0, w0
    276c:	add	x0, x1, x0
    2770:	ldrb	w0, [x0]
    2774:	mov	w1, w0
    2778:	ldr	x0, [sp, #24]
    277c:	ldr	w0, [x0, #60]
    2780:	lsl	w0, w0, #2
    2784:	and	w0, w0, #0x4
    2788:	lsr	w0, w1, w0
    278c:	lsl	w0, w0, #16
    2790:	and	w0, w0, #0xf0000
    2794:	orr	w1, w2, w0
    2798:	ldr	x0, [sp, #24]
    279c:	str	w1, [x0, #60]
    27a0:	ldr	x0, [sp, #24]
    27a4:	ldr	w0, [x0, #24]
    27a8:	cmp	w0, #0x0
    27ac:	b.ne	27fc <unRLE_obuf_to_output_SMALL+0x470>  // b.any
    27b0:	ldr	x0, [sp, #24]
    27b4:	ldr	w1, [x0, #28]
    27b8:	adrp	x0, 0 <BZ2_rNums>
    27bc:	add	x0, x0, #0x0
    27c0:	sxtw	x1, w1
    27c4:	ldr	w1, [x0, x1, lsl #2]
    27c8:	ldr	x0, [sp, #24]
    27cc:	str	w1, [x0, #24]
    27d0:	ldr	x0, [sp, #24]
    27d4:	ldr	w0, [x0, #28]
    27d8:	add	w1, w0, #0x1
    27dc:	ldr	x0, [sp, #24]
    27e0:	str	w1, [x0, #28]
    27e4:	ldr	x0, [sp, #24]
    27e8:	ldr	w0, [x0, #28]
    27ec:	cmp	w0, #0x200
    27f0:	b.ne	27fc <unRLE_obuf_to_output_SMALL+0x470>  // b.any
    27f4:	ldr	x0, [sp, #24]
    27f8:	str	wzr, [x0, #28]
    27fc:	ldr	x0, [sp, #24]
    2800:	ldr	w0, [x0, #24]
    2804:	sub	w1, w0, #0x1
    2808:	ldr	x0, [sp, #24]
    280c:	str	w1, [x0, #24]
    2810:	ldr	x0, [sp, #24]
    2814:	ldr	w0, [x0, #24]
    2818:	cmp	w0, #0x1
    281c:	cset	w0, eq  // eq = none
    2820:	and	w0, w0, #0xff
    2824:	sxtb	w1, w0
    2828:	ldrsb	w0, [sp, #47]
    282c:	eor	w0, w1, w0
    2830:	sxtb	w0, w0
    2834:	strb	w0, [sp, #47]
    2838:	ldr	x0, [sp, #24]
    283c:	ldr	w0, [x0, #1092]
    2840:	add	w1, w0, #0x1
    2844:	ldr	x0, [sp, #24]
    2848:	str	w1, [x0, #1092]
    284c:	ldr	x0, [sp, #24]
    2850:	ldr	w1, [x0, #1092]
    2854:	ldr	x0, [sp, #24]
    2858:	add	x0, x0, #0xc, lsl #12
    285c:	ldr	w0, [x0, #14928]
    2860:	add	w0, w0, #0x1
    2864:	cmp	w1, w0
    2868:	b.eq	2d54 <unRLE_obuf_to_output_SMALL+0x9c8>  // b.none
    286c:	ldrb	w1, [sp, #47]
    2870:	ldr	x0, [sp, #24]
    2874:	ldr	w0, [x0, #64]
    2878:	cmp	w1, w0
    287c:	b.eq	2890 <unRLE_obuf_to_output_SMALL+0x504>  // b.none
    2880:	ldrb	w1, [sp, #47]
    2884:	ldr	x0, [sp, #24]
    2888:	str	w1, [x0, #64]
    288c:	b	2d60 <unRLE_obuf_to_output_SMALL+0x9d4>
    2890:	ldr	x0, [sp, #24]
    2894:	mov	w1, #0x3                   	// #3
    2898:	str	w1, [x0, #16]
    289c:	ldr	x0, [sp, #24]
    28a0:	ldr	w1, [x0, #60]
    28a4:	ldr	x0, [sp, #24]
    28a8:	ldr	w0, [x0, #40]
    28ac:	mov	w2, w0
    28b0:	mov	w0, #0x86a0                	// #34464
    28b4:	movk	w0, #0x1, lsl #16
    28b8:	mul	w0, w2, w0
    28bc:	cmp	w1, w0
    28c0:	b.cc	28cc <unRLE_obuf_to_output_SMALL+0x540>  // b.lo, b.ul, b.last
    28c4:	mov	w0, #0x1                   	// #1
    28c8:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    28cc:	ldr	x0, [sp, #24]
    28d0:	ldr	w0, [x0, #60]
    28d4:	mov	w2, w0
    28d8:	ldr	x0, [sp, #24]
    28dc:	add	x0, x0, #0x448
    28e0:	mov	x1, x0
    28e4:	mov	w0, w2
    28e8:	bl	230c <BZ2_indexIntoF>
    28ec:	strb	w0, [sp, #47]
    28f0:	ldr	x0, [sp, #24]
    28f4:	ldr	x1, [x0, #3160]
    28f8:	ldr	x0, [sp, #24]
    28fc:	ldr	w0, [x0, #60]
    2900:	mov	w0, w0
    2904:	lsl	x0, x0, #1
    2908:	add	x0, x1, x0
    290c:	ldrh	w0, [x0]
    2910:	mov	w2, w0
    2914:	ldr	x0, [sp, #24]
    2918:	ldr	x1, [x0, #3168]
    291c:	ldr	x0, [sp, #24]
    2920:	ldr	w0, [x0, #60]
    2924:	lsr	w0, w0, #1
    2928:	mov	w0, w0
    292c:	add	x0, x1, x0
    2930:	ldrb	w0, [x0]
    2934:	mov	w1, w0
    2938:	ldr	x0, [sp, #24]
    293c:	ldr	w0, [x0, #60]
    2940:	lsl	w0, w0, #2
    2944:	and	w0, w0, #0x4
    2948:	lsr	w0, w1, w0
    294c:	lsl	w0, w0, #16
    2950:	and	w0, w0, #0xf0000
    2954:	orr	w1, w2, w0
    2958:	ldr	x0, [sp, #24]
    295c:	str	w1, [x0, #60]
    2960:	ldr	x0, [sp, #24]
    2964:	ldr	w0, [x0, #24]
    2968:	cmp	w0, #0x0
    296c:	b.ne	29bc <unRLE_obuf_to_output_SMALL+0x630>  // b.any
    2970:	ldr	x0, [sp, #24]
    2974:	ldr	w1, [x0, #28]
    2978:	adrp	x0, 0 <BZ2_rNums>
    297c:	add	x0, x0, #0x0
    2980:	sxtw	x1, w1
    2984:	ldr	w1, [x0, x1, lsl #2]
    2988:	ldr	x0, [sp, #24]
    298c:	str	w1, [x0, #24]
    2990:	ldr	x0, [sp, #24]
    2994:	ldr	w0, [x0, #28]
    2998:	add	w1, w0, #0x1
    299c:	ldr	x0, [sp, #24]
    29a0:	str	w1, [x0, #28]
    29a4:	ldr	x0, [sp, #24]
    29a8:	ldr	w0, [x0, #28]
    29ac:	cmp	w0, #0x200
    29b0:	b.ne	29bc <unRLE_obuf_to_output_SMALL+0x630>  // b.any
    29b4:	ldr	x0, [sp, #24]
    29b8:	str	wzr, [x0, #28]
    29bc:	ldr	x0, [sp, #24]
    29c0:	ldr	w0, [x0, #24]
    29c4:	sub	w1, w0, #0x1
    29c8:	ldr	x0, [sp, #24]
    29cc:	str	w1, [x0, #24]
    29d0:	ldr	x0, [sp, #24]
    29d4:	ldr	w0, [x0, #24]
    29d8:	cmp	w0, #0x1
    29dc:	cset	w0, eq  // eq = none
    29e0:	and	w0, w0, #0xff
    29e4:	sxtb	w1, w0
    29e8:	ldrsb	w0, [sp, #47]
    29ec:	eor	w0, w1, w0
    29f0:	sxtb	w0, w0
    29f4:	strb	w0, [sp, #47]
    29f8:	ldr	x0, [sp, #24]
    29fc:	ldr	w0, [x0, #1092]
    2a00:	add	w1, w0, #0x1
    2a04:	ldr	x0, [sp, #24]
    2a08:	str	w1, [x0, #1092]
    2a0c:	ldr	x0, [sp, #24]
    2a10:	ldr	w1, [x0, #1092]
    2a14:	ldr	x0, [sp, #24]
    2a18:	add	x0, x0, #0xc, lsl #12
    2a1c:	ldr	w0, [x0, #14928]
    2a20:	add	w0, w0, #0x1
    2a24:	cmp	w1, w0
    2a28:	b.eq	2d5c <unRLE_obuf_to_output_SMALL+0x9d0>  // b.none
    2a2c:	ldrb	w1, [sp, #47]
    2a30:	ldr	x0, [sp, #24]
    2a34:	ldr	w0, [x0, #64]
    2a38:	cmp	w1, w0
    2a3c:	b.eq	2a50 <unRLE_obuf_to_output_SMALL+0x6c4>  // b.none
    2a40:	ldrb	w1, [sp, #47]
    2a44:	ldr	x0, [sp, #24]
    2a48:	str	w1, [x0, #64]
    2a4c:	b	2d60 <unRLE_obuf_to_output_SMALL+0x9d4>
    2a50:	ldr	x0, [sp, #24]
    2a54:	ldr	w1, [x0, #60]
    2a58:	ldr	x0, [sp, #24]
    2a5c:	ldr	w0, [x0, #40]
    2a60:	mov	w2, w0
    2a64:	mov	w0, #0x86a0                	// #34464
    2a68:	movk	w0, #0x1, lsl #16
    2a6c:	mul	w0, w2, w0
    2a70:	cmp	w1, w0
    2a74:	b.cc	2a80 <unRLE_obuf_to_output_SMALL+0x6f4>  // b.lo, b.ul, b.last
    2a78:	mov	w0, #0x1                   	// #1
    2a7c:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    2a80:	ldr	x0, [sp, #24]
    2a84:	ldr	w0, [x0, #60]
    2a88:	mov	w2, w0
    2a8c:	ldr	x0, [sp, #24]
    2a90:	add	x0, x0, #0x448
    2a94:	mov	x1, x0
    2a98:	mov	w0, w2
    2a9c:	bl	230c <BZ2_indexIntoF>
    2aa0:	strb	w0, [sp, #47]
    2aa4:	ldr	x0, [sp, #24]
    2aa8:	ldr	x1, [x0, #3160]
    2aac:	ldr	x0, [sp, #24]
    2ab0:	ldr	w0, [x0, #60]
    2ab4:	mov	w0, w0
    2ab8:	lsl	x0, x0, #1
    2abc:	add	x0, x1, x0
    2ac0:	ldrh	w0, [x0]
    2ac4:	mov	w2, w0
    2ac8:	ldr	x0, [sp, #24]
    2acc:	ldr	x1, [x0, #3168]
    2ad0:	ldr	x0, [sp, #24]
    2ad4:	ldr	w0, [x0, #60]
    2ad8:	lsr	w0, w0, #1
    2adc:	mov	w0, w0
    2ae0:	add	x0, x1, x0
    2ae4:	ldrb	w0, [x0]
    2ae8:	mov	w1, w0
    2aec:	ldr	x0, [sp, #24]
    2af0:	ldr	w0, [x0, #60]
    2af4:	lsl	w0, w0, #2
    2af8:	and	w0, w0, #0x4
    2afc:	lsr	w0, w1, w0
    2b00:	lsl	w0, w0, #16
    2b04:	and	w0, w0, #0xf0000
    2b08:	orr	w1, w2, w0
    2b0c:	ldr	x0, [sp, #24]
    2b10:	str	w1, [x0, #60]
    2b14:	ldr	x0, [sp, #24]
    2b18:	ldr	w0, [x0, #24]
    2b1c:	cmp	w0, #0x0
    2b20:	b.ne	2b70 <unRLE_obuf_to_output_SMALL+0x7e4>  // b.any
    2b24:	ldr	x0, [sp, #24]
    2b28:	ldr	w1, [x0, #28]
    2b2c:	adrp	x0, 0 <BZ2_rNums>
    2b30:	add	x0, x0, #0x0
    2b34:	sxtw	x1, w1
    2b38:	ldr	w1, [x0, x1, lsl #2]
    2b3c:	ldr	x0, [sp, #24]
    2b40:	str	w1, [x0, #24]
    2b44:	ldr	x0, [sp, #24]
    2b48:	ldr	w0, [x0, #28]
    2b4c:	add	w1, w0, #0x1
    2b50:	ldr	x0, [sp, #24]
    2b54:	str	w1, [x0, #28]
    2b58:	ldr	x0, [sp, #24]
    2b5c:	ldr	w0, [x0, #28]
    2b60:	cmp	w0, #0x200
    2b64:	b.ne	2b70 <unRLE_obuf_to_output_SMALL+0x7e4>  // b.any
    2b68:	ldr	x0, [sp, #24]
    2b6c:	str	wzr, [x0, #28]
    2b70:	ldr	x0, [sp, #24]
    2b74:	ldr	w0, [x0, #24]
    2b78:	sub	w1, w0, #0x1
    2b7c:	ldr	x0, [sp, #24]
    2b80:	str	w1, [x0, #24]
    2b84:	ldr	x0, [sp, #24]
    2b88:	ldr	w0, [x0, #24]
    2b8c:	cmp	w0, #0x1
    2b90:	cset	w0, eq  // eq = none
    2b94:	and	w0, w0, #0xff
    2b98:	sxtb	w1, w0
    2b9c:	ldrsb	w0, [sp, #47]
    2ba0:	eor	w0, w1, w0
    2ba4:	sxtb	w0, w0
    2ba8:	strb	w0, [sp, #47]
    2bac:	ldr	x0, [sp, #24]
    2bb0:	ldr	w0, [x0, #1092]
    2bb4:	add	w1, w0, #0x1
    2bb8:	ldr	x0, [sp, #24]
    2bbc:	str	w1, [x0, #1092]
    2bc0:	ldrb	w0, [sp, #47]
    2bc4:	add	w1, w0, #0x4
    2bc8:	ldr	x0, [sp, #24]
    2bcc:	str	w1, [x0, #16]
    2bd0:	ldr	x0, [sp, #24]
    2bd4:	ldr	w1, [x0, #60]
    2bd8:	ldr	x0, [sp, #24]
    2bdc:	ldr	w0, [x0, #40]
    2be0:	mov	w2, w0
    2be4:	mov	w0, #0x86a0                	// #34464
    2be8:	movk	w0, #0x1, lsl #16
    2bec:	mul	w0, w2, w0
    2bf0:	cmp	w1, w0
    2bf4:	b.cc	2c00 <unRLE_obuf_to_output_SMALL+0x874>  // b.lo, b.ul, b.last
    2bf8:	mov	w0, #0x1                   	// #1
    2bfc:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    2c00:	ldr	x0, [sp, #24]
    2c04:	ldr	w0, [x0, #60]
    2c08:	mov	w2, w0
    2c0c:	ldr	x0, [sp, #24]
    2c10:	add	x0, x0, #0x448
    2c14:	mov	x1, x0
    2c18:	mov	w0, w2
    2c1c:	bl	230c <BZ2_indexIntoF>
    2c20:	mov	w1, w0
    2c24:	ldr	x0, [sp, #24]
    2c28:	str	w1, [x0, #64]
    2c2c:	ldr	x0, [sp, #24]
    2c30:	ldr	x1, [x0, #3160]
    2c34:	ldr	x0, [sp, #24]
    2c38:	ldr	w0, [x0, #60]
    2c3c:	mov	w0, w0
    2c40:	lsl	x0, x0, #1
    2c44:	add	x0, x1, x0
    2c48:	ldrh	w0, [x0]
    2c4c:	mov	w2, w0
    2c50:	ldr	x0, [sp, #24]
    2c54:	ldr	x1, [x0, #3168]
    2c58:	ldr	x0, [sp, #24]
    2c5c:	ldr	w0, [x0, #60]
    2c60:	lsr	w0, w0, #1
    2c64:	mov	w0, w0
    2c68:	add	x0, x1, x0
    2c6c:	ldrb	w0, [x0]
    2c70:	mov	w1, w0
    2c74:	ldr	x0, [sp, #24]
    2c78:	ldr	w0, [x0, #60]
    2c7c:	lsl	w0, w0, #2
    2c80:	and	w0, w0, #0x4
    2c84:	lsr	w0, w1, w0
    2c88:	lsl	w0, w0, #16
    2c8c:	and	w0, w0, #0xf0000
    2c90:	orr	w1, w2, w0
    2c94:	ldr	x0, [sp, #24]
    2c98:	str	w1, [x0, #60]
    2c9c:	ldr	x0, [sp, #24]
    2ca0:	ldr	w0, [x0, #24]
    2ca4:	cmp	w0, #0x0
    2ca8:	b.ne	2cf8 <unRLE_obuf_to_output_SMALL+0x96c>  // b.any
    2cac:	ldr	x0, [sp, #24]
    2cb0:	ldr	w1, [x0, #28]
    2cb4:	adrp	x0, 0 <BZ2_rNums>
    2cb8:	add	x0, x0, #0x0
    2cbc:	sxtw	x1, w1
    2cc0:	ldr	w1, [x0, x1, lsl #2]
    2cc4:	ldr	x0, [sp, #24]
    2cc8:	str	w1, [x0, #24]
    2ccc:	ldr	x0, [sp, #24]
    2cd0:	ldr	w0, [x0, #28]
    2cd4:	add	w1, w0, #0x1
    2cd8:	ldr	x0, [sp, #24]
    2cdc:	str	w1, [x0, #28]
    2ce0:	ldr	x0, [sp, #24]
    2ce4:	ldr	w0, [x0, #28]
    2ce8:	cmp	w0, #0x200
    2cec:	b.ne	2cf8 <unRLE_obuf_to_output_SMALL+0x96c>  // b.any
    2cf0:	ldr	x0, [sp, #24]
    2cf4:	str	wzr, [x0, #28]
    2cf8:	ldr	x0, [sp, #24]
    2cfc:	ldr	w0, [x0, #24]
    2d00:	sub	w1, w0, #0x1
    2d04:	ldr	x0, [sp, #24]
    2d08:	str	w1, [x0, #24]
    2d0c:	ldr	x0, [sp, #24]
    2d10:	ldr	w0, [x0, #64]
    2d14:	ldr	x1, [sp, #24]
    2d18:	ldr	w1, [x1, #24]
    2d1c:	cmp	w1, #0x1
    2d20:	cset	w1, eq  // eq = none
    2d24:	and	w1, w1, #0xff
    2d28:	eor	w1, w0, w1
    2d2c:	ldr	x0, [sp, #24]
    2d30:	str	w1, [x0, #64]
    2d34:	ldr	x0, [sp, #24]
    2d38:	ldr	w0, [x0, #1092]
    2d3c:	add	w1, w0, #0x1
    2d40:	ldr	x0, [sp, #24]
    2d44:	str	w1, [x0, #1092]
    2d48:	b	23a8 <unRLE_obuf_to_output_SMALL+0x1c>
    2d4c:	nop
    2d50:	b	23a8 <unRLE_obuf_to_output_SMALL+0x1c>
    2d54:	nop
    2d58:	b	23a8 <unRLE_obuf_to_output_SMALL+0x1c>
    2d5c:	nop
    2d60:	b	23a8 <unRLE_obuf_to_output_SMALL+0x1c>
    2d64:	ldr	x0, [sp, #24]
    2d68:	ldr	x0, [x0]
    2d6c:	ldr	w0, [x0, #32]
    2d70:	cmp	w0, #0x0
    2d74:	b.ne	2d80 <unRLE_obuf_to_output_SMALL+0x9f4>  // b.any
    2d78:	mov	w0, #0x0                   	// #0
    2d7c:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    2d80:	ldr	x0, [sp, #24]
    2d84:	ldr	w0, [x0, #16]
    2d88:	cmp	w0, #0x0
    2d8c:	b.eq	2e64 <unRLE_obuf_to_output_SMALL+0xad8>  // b.none
    2d90:	ldr	x0, [sp, #24]
    2d94:	ldr	x0, [x0]
    2d98:	ldr	x0, [x0, #24]
    2d9c:	ldr	x1, [sp, #24]
    2da0:	ldrb	w1, [x1, #12]
    2da4:	strb	w1, [x0]
    2da8:	ldr	x0, [sp, #24]
    2dac:	ldr	w0, [x0, #3184]
    2db0:	lsl	w1, w0, #8
    2db4:	ldr	x0, [sp, #24]
    2db8:	ldr	w0, [x0, #3184]
    2dbc:	lsr	w0, w0, #24
    2dc0:	ldr	x2, [sp, #24]
    2dc4:	ldrb	w2, [x2, #12]
    2dc8:	eor	w2, w0, w2
    2dcc:	adrp	x0, 0 <BZ2_crc32Table>
    2dd0:	add	x0, x0, #0x0
    2dd4:	mov	w2, w2
    2dd8:	ldr	w0, [x0, x2, lsl #2]
    2ddc:	eor	w1, w1, w0
    2de0:	ldr	x0, [sp, #24]
    2de4:	str	w1, [x0, #3184]
    2de8:	ldr	x0, [sp, #24]
    2dec:	ldr	w0, [x0, #16]
    2df0:	sub	w1, w0, #0x1
    2df4:	ldr	x0, [sp, #24]
    2df8:	str	w1, [x0, #16]
    2dfc:	ldr	x0, [sp, #24]
    2e00:	ldr	x0, [x0]
    2e04:	ldr	x1, [x0, #24]
    2e08:	add	x1, x1, #0x1
    2e0c:	str	x1, [x0, #24]
    2e10:	ldr	x0, [sp, #24]
    2e14:	ldr	x0, [x0]
    2e18:	ldr	w1, [x0, #32]
    2e1c:	sub	w1, w1, #0x1
    2e20:	str	w1, [x0, #32]
    2e24:	ldr	x0, [sp, #24]
    2e28:	ldr	x0, [x0]
    2e2c:	ldr	w1, [x0, #36]
    2e30:	add	w1, w1, #0x1
    2e34:	str	w1, [x0, #36]
    2e38:	ldr	x0, [sp, #24]
    2e3c:	ldr	x0, [x0]
    2e40:	ldr	w0, [x0, #36]
    2e44:	cmp	w0, #0x0
    2e48:	b.ne	2d64 <unRLE_obuf_to_output_SMALL+0x9d8>  // b.any
    2e4c:	ldr	x0, [sp, #24]
    2e50:	ldr	x0, [x0]
    2e54:	ldr	w1, [x0, #40]
    2e58:	add	w1, w1, #0x1
    2e5c:	str	w1, [x0, #40]
    2e60:	b	2d64 <unRLE_obuf_to_output_SMALL+0x9d8>
    2e64:	nop
    2e68:	ldr	x0, [sp, #24]
    2e6c:	ldr	w1, [x0, #1092]
    2e70:	ldr	x0, [sp, #24]
    2e74:	add	x0, x0, #0xc, lsl #12
    2e78:	ldr	w0, [x0, #14928]
    2e7c:	add	w0, w0, #0x1
    2e80:	cmp	w1, w0
    2e84:	b.ne	2e90 <unRLE_obuf_to_output_SMALL+0xb04>  // b.any
    2e88:	mov	w0, #0x0                   	// #0
    2e8c:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    2e90:	ldr	x0, [sp, #24]
    2e94:	ldr	w1, [x0, #1092]
    2e98:	ldr	x0, [sp, #24]
    2e9c:	add	x0, x0, #0xc, lsl #12
    2ea0:	ldr	w0, [x0, #14928]
    2ea4:	add	w0, w0, #0x1
    2ea8:	cmp	w1, w0
    2eac:	b.le	2eb8 <unRLE_obuf_to_output_SMALL+0xb2c>
    2eb0:	mov	w0, #0x1                   	// #1
    2eb4:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    2eb8:	ldr	x0, [sp, #24]
    2ebc:	mov	w1, #0x1                   	// #1
    2ec0:	str	w1, [x0, #16]
    2ec4:	ldr	x0, [sp, #24]
    2ec8:	ldr	w0, [x0, #64]
    2ecc:	and	w1, w0, #0xff
    2ed0:	ldr	x0, [sp, #24]
    2ed4:	strb	w1, [x0, #12]
    2ed8:	ldr	x0, [sp, #24]
    2edc:	ldr	w1, [x0, #60]
    2ee0:	ldr	x0, [sp, #24]
    2ee4:	ldr	w0, [x0, #40]
    2ee8:	mov	w2, w0
    2eec:	mov	w0, #0x86a0                	// #34464
    2ef0:	movk	w0, #0x1, lsl #16
    2ef4:	mul	w0, w2, w0
    2ef8:	cmp	w1, w0
    2efc:	b.cc	2f08 <unRLE_obuf_to_output_SMALL+0xb7c>  // b.lo, b.ul, b.last
    2f00:	mov	w0, #0x1                   	// #1
    2f04:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    2f08:	ldr	x0, [sp, #24]
    2f0c:	ldr	w0, [x0, #60]
    2f10:	mov	w2, w0
    2f14:	ldr	x0, [sp, #24]
    2f18:	add	x0, x0, #0x448
    2f1c:	mov	x1, x0
    2f20:	mov	w0, w2
    2f24:	bl	230c <BZ2_indexIntoF>
    2f28:	strb	w0, [sp, #47]
    2f2c:	ldr	x0, [sp, #24]
    2f30:	ldr	x1, [x0, #3160]
    2f34:	ldr	x0, [sp, #24]
    2f38:	ldr	w0, [x0, #60]
    2f3c:	mov	w0, w0
    2f40:	lsl	x0, x0, #1
    2f44:	add	x0, x1, x0
    2f48:	ldrh	w0, [x0]
    2f4c:	mov	w2, w0
    2f50:	ldr	x0, [sp, #24]
    2f54:	ldr	x1, [x0, #3168]
    2f58:	ldr	x0, [sp, #24]
    2f5c:	ldr	w0, [x0, #60]
    2f60:	lsr	w0, w0, #1
    2f64:	mov	w0, w0
    2f68:	add	x0, x1, x0
    2f6c:	ldrb	w0, [x0]
    2f70:	mov	w1, w0
    2f74:	ldr	x0, [sp, #24]
    2f78:	ldr	w0, [x0, #60]
    2f7c:	lsl	w0, w0, #2
    2f80:	and	w0, w0, #0x4
    2f84:	lsr	w0, w1, w0
    2f88:	lsl	w0, w0, #16
    2f8c:	and	w0, w0, #0xf0000
    2f90:	orr	w1, w2, w0
    2f94:	ldr	x0, [sp, #24]
    2f98:	str	w1, [x0, #60]
    2f9c:	ldr	x0, [sp, #24]
    2fa0:	ldr	w0, [x0, #1092]
    2fa4:	add	w1, w0, #0x1
    2fa8:	ldr	x0, [sp, #24]
    2fac:	str	w1, [x0, #1092]
    2fb0:	ldr	x0, [sp, #24]
    2fb4:	ldr	w1, [x0, #1092]
    2fb8:	ldr	x0, [sp, #24]
    2fbc:	add	x0, x0, #0xc, lsl #12
    2fc0:	ldr	w0, [x0, #14928]
    2fc4:	add	w0, w0, #0x1
    2fc8:	cmp	w1, w0
    2fcc:	b.eq	3410 <unRLE_obuf_to_output_SMALL+0x1084>  // b.none
    2fd0:	ldrb	w1, [sp, #47]
    2fd4:	ldr	x0, [sp, #24]
    2fd8:	ldr	w0, [x0, #64]
    2fdc:	cmp	w1, w0
    2fe0:	b.eq	2ff4 <unRLE_obuf_to_output_SMALL+0xc68>  // b.none
    2fe4:	ldrb	w1, [sp, #47]
    2fe8:	ldr	x0, [sp, #24]
    2fec:	str	w1, [x0, #64]
    2ff0:	b	3424 <unRLE_obuf_to_output_SMALL+0x1098>
    2ff4:	ldr	x0, [sp, #24]
    2ff8:	mov	w1, #0x2                   	// #2
    2ffc:	str	w1, [x0, #16]
    3000:	ldr	x0, [sp, #24]
    3004:	ldr	w1, [x0, #60]
    3008:	ldr	x0, [sp, #24]
    300c:	ldr	w0, [x0, #40]
    3010:	mov	w2, w0
    3014:	mov	w0, #0x86a0                	// #34464
    3018:	movk	w0, #0x1, lsl #16
    301c:	mul	w0, w2, w0
    3020:	cmp	w1, w0
    3024:	b.cc	3030 <unRLE_obuf_to_output_SMALL+0xca4>  // b.lo, b.ul, b.last
    3028:	mov	w0, #0x1                   	// #1
    302c:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    3030:	ldr	x0, [sp, #24]
    3034:	ldr	w0, [x0, #60]
    3038:	mov	w2, w0
    303c:	ldr	x0, [sp, #24]
    3040:	add	x0, x0, #0x448
    3044:	mov	x1, x0
    3048:	mov	w0, w2
    304c:	bl	230c <BZ2_indexIntoF>
    3050:	strb	w0, [sp, #47]
    3054:	ldr	x0, [sp, #24]
    3058:	ldr	x1, [x0, #3160]
    305c:	ldr	x0, [sp, #24]
    3060:	ldr	w0, [x0, #60]
    3064:	mov	w0, w0
    3068:	lsl	x0, x0, #1
    306c:	add	x0, x1, x0
    3070:	ldrh	w0, [x0]
    3074:	mov	w2, w0
    3078:	ldr	x0, [sp, #24]
    307c:	ldr	x1, [x0, #3168]
    3080:	ldr	x0, [sp, #24]
    3084:	ldr	w0, [x0, #60]
    3088:	lsr	w0, w0, #1
    308c:	mov	w0, w0
    3090:	add	x0, x1, x0
    3094:	ldrb	w0, [x0]
    3098:	mov	w1, w0
    309c:	ldr	x0, [sp, #24]
    30a0:	ldr	w0, [x0, #60]
    30a4:	lsl	w0, w0, #2
    30a8:	and	w0, w0, #0x4
    30ac:	lsr	w0, w1, w0
    30b0:	lsl	w0, w0, #16
    30b4:	and	w0, w0, #0xf0000
    30b8:	orr	w1, w2, w0
    30bc:	ldr	x0, [sp, #24]
    30c0:	str	w1, [x0, #60]
    30c4:	ldr	x0, [sp, #24]
    30c8:	ldr	w0, [x0, #1092]
    30cc:	add	w1, w0, #0x1
    30d0:	ldr	x0, [sp, #24]
    30d4:	str	w1, [x0, #1092]
    30d8:	ldr	x0, [sp, #24]
    30dc:	ldr	w1, [x0, #1092]
    30e0:	ldr	x0, [sp, #24]
    30e4:	add	x0, x0, #0xc, lsl #12
    30e8:	ldr	w0, [x0, #14928]
    30ec:	add	w0, w0, #0x1
    30f0:	cmp	w1, w0
    30f4:	b.eq	3418 <unRLE_obuf_to_output_SMALL+0x108c>  // b.none
    30f8:	ldrb	w1, [sp, #47]
    30fc:	ldr	x0, [sp, #24]
    3100:	ldr	w0, [x0, #64]
    3104:	cmp	w1, w0
    3108:	b.eq	311c <unRLE_obuf_to_output_SMALL+0xd90>  // b.none
    310c:	ldrb	w1, [sp, #47]
    3110:	ldr	x0, [sp, #24]
    3114:	str	w1, [x0, #64]
    3118:	b	3424 <unRLE_obuf_to_output_SMALL+0x1098>
    311c:	ldr	x0, [sp, #24]
    3120:	mov	w1, #0x3                   	// #3
    3124:	str	w1, [x0, #16]
    3128:	ldr	x0, [sp, #24]
    312c:	ldr	w1, [x0, #60]
    3130:	ldr	x0, [sp, #24]
    3134:	ldr	w0, [x0, #40]
    3138:	mov	w2, w0
    313c:	mov	w0, #0x86a0                	// #34464
    3140:	movk	w0, #0x1, lsl #16
    3144:	mul	w0, w2, w0
    3148:	cmp	w1, w0
    314c:	b.cc	3158 <unRLE_obuf_to_output_SMALL+0xdcc>  // b.lo, b.ul, b.last
    3150:	mov	w0, #0x1                   	// #1
    3154:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    3158:	ldr	x0, [sp, #24]
    315c:	ldr	w0, [x0, #60]
    3160:	mov	w2, w0
    3164:	ldr	x0, [sp, #24]
    3168:	add	x0, x0, #0x448
    316c:	mov	x1, x0
    3170:	mov	w0, w2
    3174:	bl	230c <BZ2_indexIntoF>
    3178:	strb	w0, [sp, #47]
    317c:	ldr	x0, [sp, #24]
    3180:	ldr	x1, [x0, #3160]
    3184:	ldr	x0, [sp, #24]
    3188:	ldr	w0, [x0, #60]
    318c:	mov	w0, w0
    3190:	lsl	x0, x0, #1
    3194:	add	x0, x1, x0
    3198:	ldrh	w0, [x0]
    319c:	mov	w2, w0
    31a0:	ldr	x0, [sp, #24]
    31a4:	ldr	x1, [x0, #3168]
    31a8:	ldr	x0, [sp, #24]
    31ac:	ldr	w0, [x0, #60]
    31b0:	lsr	w0, w0, #1
    31b4:	mov	w0, w0
    31b8:	add	x0, x1, x0
    31bc:	ldrb	w0, [x0]
    31c0:	mov	w1, w0
    31c4:	ldr	x0, [sp, #24]
    31c8:	ldr	w0, [x0, #60]
    31cc:	lsl	w0, w0, #2
    31d0:	and	w0, w0, #0x4
    31d4:	lsr	w0, w1, w0
    31d8:	lsl	w0, w0, #16
    31dc:	and	w0, w0, #0xf0000
    31e0:	orr	w1, w2, w0
    31e4:	ldr	x0, [sp, #24]
    31e8:	str	w1, [x0, #60]
    31ec:	ldr	x0, [sp, #24]
    31f0:	ldr	w0, [x0, #1092]
    31f4:	add	w1, w0, #0x1
    31f8:	ldr	x0, [sp, #24]
    31fc:	str	w1, [x0, #1092]
    3200:	ldr	x0, [sp, #24]
    3204:	ldr	w1, [x0, #1092]
    3208:	ldr	x0, [sp, #24]
    320c:	add	x0, x0, #0xc, lsl #12
    3210:	ldr	w0, [x0, #14928]
    3214:	add	w0, w0, #0x1
    3218:	cmp	w1, w0
    321c:	b.eq	3420 <unRLE_obuf_to_output_SMALL+0x1094>  // b.none
    3220:	ldrb	w1, [sp, #47]
    3224:	ldr	x0, [sp, #24]
    3228:	ldr	w0, [x0, #64]
    322c:	cmp	w1, w0
    3230:	b.eq	3244 <unRLE_obuf_to_output_SMALL+0xeb8>  // b.none
    3234:	ldrb	w1, [sp, #47]
    3238:	ldr	x0, [sp, #24]
    323c:	str	w1, [x0, #64]
    3240:	b	3424 <unRLE_obuf_to_output_SMALL+0x1098>
    3244:	ldr	x0, [sp, #24]
    3248:	ldr	w1, [x0, #60]
    324c:	ldr	x0, [sp, #24]
    3250:	ldr	w0, [x0, #40]
    3254:	mov	w2, w0
    3258:	mov	w0, #0x86a0                	// #34464
    325c:	movk	w0, #0x1, lsl #16
    3260:	mul	w0, w2, w0
    3264:	cmp	w1, w0
    3268:	b.cc	3274 <unRLE_obuf_to_output_SMALL+0xee8>  // b.lo, b.ul, b.last
    326c:	mov	w0, #0x1                   	// #1
    3270:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    3274:	ldr	x0, [sp, #24]
    3278:	ldr	w0, [x0, #60]
    327c:	mov	w2, w0
    3280:	ldr	x0, [sp, #24]
    3284:	add	x0, x0, #0x448
    3288:	mov	x1, x0
    328c:	mov	w0, w2
    3290:	bl	230c <BZ2_indexIntoF>
    3294:	strb	w0, [sp, #47]
    3298:	ldr	x0, [sp, #24]
    329c:	ldr	x1, [x0, #3160]
    32a0:	ldr	x0, [sp, #24]
    32a4:	ldr	w0, [x0, #60]
    32a8:	mov	w0, w0
    32ac:	lsl	x0, x0, #1
    32b0:	add	x0, x1, x0
    32b4:	ldrh	w0, [x0]
    32b8:	mov	w2, w0
    32bc:	ldr	x0, [sp, #24]
    32c0:	ldr	x1, [x0, #3168]
    32c4:	ldr	x0, [sp, #24]
    32c8:	ldr	w0, [x0, #60]
    32cc:	lsr	w0, w0, #1
    32d0:	mov	w0, w0
    32d4:	add	x0, x1, x0
    32d8:	ldrb	w0, [x0]
    32dc:	mov	w1, w0
    32e0:	ldr	x0, [sp, #24]
    32e4:	ldr	w0, [x0, #60]
    32e8:	lsl	w0, w0, #2
    32ec:	and	w0, w0, #0x4
    32f0:	lsr	w0, w1, w0
    32f4:	lsl	w0, w0, #16
    32f8:	and	w0, w0, #0xf0000
    32fc:	orr	w1, w2, w0
    3300:	ldr	x0, [sp, #24]
    3304:	str	w1, [x0, #60]
    3308:	ldr	x0, [sp, #24]
    330c:	ldr	w0, [x0, #1092]
    3310:	add	w1, w0, #0x1
    3314:	ldr	x0, [sp, #24]
    3318:	str	w1, [x0, #1092]
    331c:	ldrb	w0, [sp, #47]
    3320:	add	w1, w0, #0x4
    3324:	ldr	x0, [sp, #24]
    3328:	str	w1, [x0, #16]
    332c:	ldr	x0, [sp, #24]
    3330:	ldr	w1, [x0, #60]
    3334:	ldr	x0, [sp, #24]
    3338:	ldr	w0, [x0, #40]
    333c:	mov	w2, w0
    3340:	mov	w0, #0x86a0                	// #34464
    3344:	movk	w0, #0x1, lsl #16
    3348:	mul	w0, w2, w0
    334c:	cmp	w1, w0
    3350:	b.cc	335c <unRLE_obuf_to_output_SMALL+0xfd0>  // b.lo, b.ul, b.last
    3354:	mov	w0, #0x1                   	// #1
    3358:	b	3428 <unRLE_obuf_to_output_SMALL+0x109c>
    335c:	ldr	x0, [sp, #24]
    3360:	ldr	w0, [x0, #60]
    3364:	mov	w2, w0
    3368:	ldr	x0, [sp, #24]
    336c:	add	x0, x0, #0x448
    3370:	mov	x1, x0
    3374:	mov	w0, w2
    3378:	bl	230c <BZ2_indexIntoF>
    337c:	mov	w1, w0
    3380:	ldr	x0, [sp, #24]
    3384:	str	w1, [x0, #64]
    3388:	ldr	x0, [sp, #24]
    338c:	ldr	x1, [x0, #3160]
    3390:	ldr	x0, [sp, #24]
    3394:	ldr	w0, [x0, #60]
    3398:	mov	w0, w0
    339c:	lsl	x0, x0, #1
    33a0:	add	x0, x1, x0
    33a4:	ldrh	w0, [x0]
    33a8:	mov	w2, w0
    33ac:	ldr	x0, [sp, #24]
    33b0:	ldr	x1, [x0, #3168]
    33b4:	ldr	x0, [sp, #24]
    33b8:	ldr	w0, [x0, #60]
    33bc:	lsr	w0, w0, #1
    33c0:	mov	w0, w0
    33c4:	add	x0, x1, x0
    33c8:	ldrb	w0, [x0]
    33cc:	mov	w1, w0
    33d0:	ldr	x0, [sp, #24]
    33d4:	ldr	w0, [x0, #60]
    33d8:	lsl	w0, w0, #2
    33dc:	and	w0, w0, #0x4
    33e0:	lsr	w0, w1, w0
    33e4:	lsl	w0, w0, #16
    33e8:	and	w0, w0, #0xf0000
    33ec:	orr	w1, w2, w0
    33f0:	ldr	x0, [sp, #24]
    33f4:	str	w1, [x0, #60]
    33f8:	ldr	x0, [sp, #24]
    33fc:	ldr	w0, [x0, #1092]
    3400:	add	w1, w0, #0x1
    3404:	ldr	x0, [sp, #24]
    3408:	str	w1, [x0, #1092]
    340c:	b	2d64 <unRLE_obuf_to_output_SMALL+0x9d8>
    3410:	nop
    3414:	b	2d64 <unRLE_obuf_to_output_SMALL+0x9d8>
    3418:	nop
    341c:	b	2d64 <unRLE_obuf_to_output_SMALL+0x9d8>
    3420:	nop
    3424:	b	2d64 <unRLE_obuf_to_output_SMALL+0x9d8>
    3428:	ldp	x29, x30, [sp], #48
    342c:	ret

0000000000003430 <BZ2_bzDecompress>:
    3430:	stp	x29, x30, [sp, #-64]!
    3434:	mov	x29, sp
    3438:	str	x0, [sp, #24]
    343c:	ldr	x0, [sp, #24]
    3440:	cmp	x0, #0x0
    3444:	b.ne	3450 <BZ2_bzDecompress+0x20>  // b.any
    3448:	mov	w0, #0xfffffffe            	// #-2
    344c:	b	36b4 <BZ2_bzDecompress+0x284>
    3450:	ldr	x0, [sp, #24]
    3454:	ldr	x0, [x0, #48]
    3458:	str	x0, [sp, #48]
    345c:	ldr	x0, [sp, #48]
    3460:	cmp	x0, #0x0
    3464:	b.ne	3470 <BZ2_bzDecompress+0x40>  // b.any
    3468:	mov	w0, #0xfffffffe            	// #-2
    346c:	b	36b4 <BZ2_bzDecompress+0x284>
    3470:	ldr	x0, [sp, #48]
    3474:	ldr	x0, [x0]
    3478:	ldr	x1, [sp, #24]
    347c:	cmp	x1, x0
    3480:	b.eq	348c <BZ2_bzDecompress+0x5c>  // b.none
    3484:	mov	w0, #0xfffffffe            	// #-2
    3488:	b	36b4 <BZ2_bzDecompress+0x284>
    348c:	ldr	x0, [sp, #48]
    3490:	ldr	w0, [x0, #8]
    3494:	cmp	w0, #0x1
    3498:	b.ne	34a4 <BZ2_bzDecompress+0x74>  // b.any
    349c:	mov	w0, #0xffffffff            	// #-1
    34a0:	b	36b4 <BZ2_bzDecompress+0x284>
    34a4:	ldr	x0, [sp, #48]
    34a8:	ldr	w0, [x0, #8]
    34ac:	cmp	w0, #0x2
    34b0:	b.ne	360c <BZ2_bzDecompress+0x1dc>  // b.any
    34b4:	ldr	x0, [sp, #48]
    34b8:	ldrb	w0, [x0, #44]
    34bc:	cmp	w0, #0x0
    34c0:	b.eq	34d4 <BZ2_bzDecompress+0xa4>  // b.none
    34c4:	ldr	x0, [sp, #48]
    34c8:	bl	238c <unRLE_obuf_to_output_SMALL>
    34cc:	strb	w0, [sp, #63]
    34d0:	b	34e0 <BZ2_bzDecompress+0xb0>
    34d4:	ldr	x0, [sp, #48]
    34d8:	bl	1570 <unRLE_obuf_to_output_FAST>
    34dc:	strb	w0, [sp, #63]
    34e0:	ldrb	w0, [sp, #63]
    34e4:	cmp	w0, #0x0
    34e8:	b.eq	34f4 <BZ2_bzDecompress+0xc4>  // b.none
    34ec:	mov	w0, #0xfffffffc            	// #-4
    34f0:	b	36b4 <BZ2_bzDecompress+0x284>
    34f4:	ldr	x0, [sp, #48]
    34f8:	ldr	w1, [x0, #1092]
    34fc:	ldr	x0, [sp, #48]
    3500:	add	x0, x0, #0xc, lsl #12
    3504:	ldr	w0, [x0, #14928]
    3508:	add	w0, w0, #0x1
    350c:	cmp	w1, w0
    3510:	b.ne	3604 <BZ2_bzDecompress+0x1d4>  // b.any
    3514:	ldr	x0, [sp, #48]
    3518:	ldr	w0, [x0, #16]
    351c:	cmp	w0, #0x0
    3520:	b.ne	3604 <BZ2_bzDecompress+0x1d4>  // b.any
    3524:	ldr	x0, [sp, #48]
    3528:	ldr	w0, [x0, #3184]
    352c:	mvn	w1, w0
    3530:	ldr	x0, [sp, #48]
    3534:	str	w1, [x0, #3184]
    3538:	ldr	x0, [sp, #48]
    353c:	ldr	w0, [x0, #52]
    3540:	cmp	w0, #0x2
    3544:	b.le	357c <BZ2_bzDecompress+0x14c>
    3548:	adrp	x0, 0 <stderr>
    354c:	add	x0, x0, #0x0
    3550:	ldr	x4, [x0]
    3554:	ldr	x0, [sp, #48]
    3558:	ldr	w1, [x0, #3176]
    355c:	ldr	x0, [sp, #48]
    3560:	ldr	w0, [x0, #3184]
    3564:	mov	w3, w0
    3568:	mov	w2, w1
    356c:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
    3570:	add	x1, x0, #0x0
    3574:	mov	x0, x4
    3578:	bl	0 <fprintf>
    357c:	ldr	x0, [sp, #48]
    3580:	ldr	w0, [x0, #52]
    3584:	cmp	w0, #0x1
    3588:	b.le	35a4 <BZ2_bzDecompress+0x174>
    358c:	adrp	x0, 0 <stderr>
    3590:	add	x0, x0, #0x0
    3594:	ldr	x0, [x0]
    3598:	mov	x1, x0
    359c:	mov	w0, #0x5d                  	// #93
    35a0:	bl	0 <fputc>
    35a4:	ldr	x0, [sp, #48]
    35a8:	ldr	w1, [x0, #3184]
    35ac:	ldr	x0, [sp, #48]
    35b0:	ldr	w0, [x0, #3176]
    35b4:	cmp	w1, w0
    35b8:	b.eq	35c4 <BZ2_bzDecompress+0x194>  // b.none
    35bc:	mov	w0, #0xfffffffc            	// #-4
    35c0:	b	36b4 <BZ2_bzDecompress+0x284>
    35c4:	ldr	x0, [sp, #48]
    35c8:	ldr	w0, [x0, #3188]
    35cc:	ror	w1, w0, #31
    35d0:	ldr	x0, [sp, #48]
    35d4:	str	w1, [x0, #3188]
    35d8:	ldr	x0, [sp, #48]
    35dc:	ldr	w1, [x0, #3188]
    35e0:	ldr	x0, [sp, #48]
    35e4:	ldr	w0, [x0, #3184]
    35e8:	eor	w1, w1, w0
    35ec:	ldr	x0, [sp, #48]
    35f0:	str	w1, [x0, #3188]
    35f4:	ldr	x0, [sp, #48]
    35f8:	mov	w1, #0xe                   	// #14
    35fc:	str	w1, [x0, #8]
    3600:	b	360c <BZ2_bzDecompress+0x1dc>
    3604:	mov	w0, #0x0                   	// #0
    3608:	b	36b4 <BZ2_bzDecompress+0x284>
    360c:	ldr	x0, [sp, #48]
    3610:	ldr	w0, [x0, #8]
    3614:	cmp	w0, #0x9
    3618:	b.le	348c <BZ2_bzDecompress+0x5c>
    361c:	ldr	x0, [sp, #48]
    3620:	bl	0 <BZ2_decompress>
    3624:	str	w0, [sp, #44]
    3628:	ldr	w0, [sp, #44]
    362c:	cmp	w0, #0x4
    3630:	b.ne	36a0 <BZ2_bzDecompress+0x270>  // b.any
    3634:	ldr	x0, [sp, #48]
    3638:	ldr	w0, [x0, #52]
    363c:	cmp	w0, #0x2
    3640:	b.le	3678 <BZ2_bzDecompress+0x248>
    3644:	adrp	x0, 0 <stderr>
    3648:	add	x0, x0, #0x0
    364c:	ldr	x4, [x0]
    3650:	ldr	x0, [sp, #48]
    3654:	ldr	w1, [x0, #3180]
    3658:	ldr	x0, [sp, #48]
    365c:	ldr	w0, [x0, #3188]
    3660:	mov	w3, w0
    3664:	mov	w2, w1
    3668:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
    366c:	add	x1, x0, #0x0
    3670:	mov	x0, x4
    3674:	bl	0 <fprintf>
    3678:	ldr	x0, [sp, #48]
    367c:	ldr	w1, [x0, #3188]
    3680:	ldr	x0, [sp, #48]
    3684:	ldr	w0, [x0, #3180]
    3688:	cmp	w1, w0
    368c:	b.eq	3698 <BZ2_bzDecompress+0x268>  // b.none
    3690:	mov	w0, #0xfffffffc            	// #-4
    3694:	b	36b4 <BZ2_bzDecompress+0x284>
    3698:	ldr	w0, [sp, #44]
    369c:	b	36b4 <BZ2_bzDecompress+0x284>
    36a0:	ldr	x0, [sp, #48]
    36a4:	ldr	w0, [x0, #8]
    36a8:	cmp	w0, #0x2
    36ac:	b.eq	348c <BZ2_bzDecompress+0x5c>  // b.none
    36b0:	ldr	w0, [sp, #44]
    36b4:	ldp	x29, x30, [sp], #64
    36b8:	ret

00000000000036bc <BZ2_bzDecompressEnd>:
    36bc:	stp	x29, x30, [sp, #-48]!
    36c0:	mov	x29, sp
    36c4:	str	x0, [sp, #24]
    36c8:	ldr	x0, [sp, #24]
    36cc:	cmp	x0, #0x0
    36d0:	b.ne	36dc <BZ2_bzDecompressEnd+0x20>  // b.any
    36d4:	mov	w0, #0xfffffffe            	// #-2
    36d8:	b	37e4 <BZ2_bzDecompressEnd+0x128>
    36dc:	ldr	x0, [sp, #24]
    36e0:	ldr	x0, [x0, #48]
    36e4:	str	x0, [sp, #40]
    36e8:	ldr	x0, [sp, #40]
    36ec:	cmp	x0, #0x0
    36f0:	b.ne	36fc <BZ2_bzDecompressEnd+0x40>  // b.any
    36f4:	mov	w0, #0xfffffffe            	// #-2
    36f8:	b	37e4 <BZ2_bzDecompressEnd+0x128>
    36fc:	ldr	x0, [sp, #40]
    3700:	ldr	x0, [x0]
    3704:	ldr	x1, [sp, #24]
    3708:	cmp	x1, x0
    370c:	b.eq	3718 <BZ2_bzDecompressEnd+0x5c>  // b.none
    3710:	mov	w0, #0xfffffffe            	// #-2
    3714:	b	37e4 <BZ2_bzDecompressEnd+0x128>
    3718:	ldr	x0, [sp, #40]
    371c:	ldr	x0, [x0, #3152]
    3720:	cmp	x0, #0x0
    3724:	b.eq	374c <BZ2_bzDecompressEnd+0x90>  // b.none
    3728:	ldr	x0, [sp, #24]
    372c:	ldr	x2, [x0, #64]
    3730:	ldr	x0, [sp, #24]
    3734:	ldr	x3, [x0, #72]
    3738:	ldr	x0, [sp, #40]
    373c:	ldr	x0, [x0, #3152]
    3740:	mov	x1, x0
    3744:	mov	x0, x3
    3748:	blr	x2
    374c:	ldr	x0, [sp, #40]
    3750:	ldr	x0, [x0, #3160]
    3754:	cmp	x0, #0x0
    3758:	b.eq	3780 <BZ2_bzDecompressEnd+0xc4>  // b.none
    375c:	ldr	x0, [sp, #24]
    3760:	ldr	x2, [x0, #64]
    3764:	ldr	x0, [sp, #24]
    3768:	ldr	x3, [x0, #72]
    376c:	ldr	x0, [sp, #40]
    3770:	ldr	x0, [x0, #3160]
    3774:	mov	x1, x0
    3778:	mov	x0, x3
    377c:	blr	x2
    3780:	ldr	x0, [sp, #40]
    3784:	ldr	x0, [x0, #3168]
    3788:	cmp	x0, #0x0
    378c:	b.eq	37b4 <BZ2_bzDecompressEnd+0xf8>  // b.none
    3790:	ldr	x0, [sp, #24]
    3794:	ldr	x2, [x0, #64]
    3798:	ldr	x0, [sp, #24]
    379c:	ldr	x3, [x0, #72]
    37a0:	ldr	x0, [sp, #40]
    37a4:	ldr	x0, [x0, #3168]
    37a8:	mov	x1, x0
    37ac:	mov	x0, x3
    37b0:	blr	x2
    37b4:	ldr	x0, [sp, #24]
    37b8:	ldr	x2, [x0, #64]
    37bc:	ldr	x0, [sp, #24]
    37c0:	ldr	x3, [x0, #72]
    37c4:	ldr	x0, [sp, #24]
    37c8:	ldr	x0, [x0, #48]
    37cc:	mov	x1, x0
    37d0:	mov	x0, x3
    37d4:	blr	x2
    37d8:	ldr	x0, [sp, #24]
    37dc:	str	xzr, [x0, #48]
    37e0:	mov	w0, #0x0                   	// #0
    37e4:	ldp	x29, x30, [sp], #48
    37e8:	ret

00000000000037ec <myfeof>:
    37ec:	stp	x29, x30, [sp, #-48]!
    37f0:	mov	x29, sp
    37f4:	str	x0, [sp, #24]
    37f8:	ldr	x0, [sp, #24]
    37fc:	bl	0 <fgetc>
    3800:	str	w0, [sp, #44]
    3804:	ldr	w0, [sp, #44]
    3808:	cmn	w0, #0x1
    380c:	b.ne	3818 <myfeof+0x2c>  // b.any
    3810:	mov	w0, #0x1                   	// #1
    3814:	b	3828 <myfeof+0x3c>
    3818:	ldr	x1, [sp, #24]
    381c:	ldr	w0, [sp, #44]
    3820:	bl	0 <ungetc>
    3824:	mov	w0, #0x0                   	// #0
    3828:	ldp	x29, x30, [sp], #48
    382c:	ret

0000000000003830 <BZ2_bzWriteOpen>:
    3830:	stp	x29, x30, [sp, #-64]!
    3834:	mov	x29, sp
    3838:	str	x0, [sp, #40]
    383c:	str	x1, [sp, #32]
    3840:	str	w2, [sp, #28]
    3844:	str	w3, [sp, #24]
    3848:	str	w4, [sp, #20]
    384c:	str	xzr, [sp, #56]
    3850:	ldr	x0, [sp, #40]
    3854:	cmp	x0, #0x0
    3858:	b.eq	3864 <BZ2_bzWriteOpen+0x34>  // b.none
    385c:	ldr	x0, [sp, #40]
    3860:	str	wzr, [x0]
    3864:	ldr	x0, [sp, #56]
    3868:	cmp	x0, #0x0
    386c:	b.eq	3878 <BZ2_bzWriteOpen+0x48>  // b.none
    3870:	ldr	x0, [sp, #56]
    3874:	str	wzr, [x0, #5096]
    3878:	ldr	x0, [sp, #32]
    387c:	cmp	x0, #0x0
    3880:	b.eq	38cc <BZ2_bzWriteOpen+0x9c>  // b.none
    3884:	ldr	w0, [sp, #28]
    3888:	cmp	w0, #0x0
    388c:	b.le	38cc <BZ2_bzWriteOpen+0x9c>
    3890:	ldr	w0, [sp, #28]
    3894:	cmp	w0, #0x9
    3898:	b.gt	38cc <BZ2_bzWriteOpen+0x9c>
    389c:	ldr	w0, [sp, #20]
    38a0:	cmp	w0, #0x0
    38a4:	b.lt	38cc <BZ2_bzWriteOpen+0x9c>  // b.tstop
    38a8:	ldr	w0, [sp, #20]
    38ac:	cmp	w0, #0xfa
    38b0:	b.gt	38cc <BZ2_bzWriteOpen+0x9c>
    38b4:	ldr	w0, [sp, #24]
    38b8:	cmp	w0, #0x0
    38bc:	b.lt	38cc <BZ2_bzWriteOpen+0x9c>  // b.tstop
    38c0:	ldr	w0, [sp, #24]
    38c4:	cmp	w0, #0x4
    38c8:	b.le	3904 <BZ2_bzWriteOpen+0xd4>
    38cc:	ldr	x0, [sp, #40]
    38d0:	cmp	x0, #0x0
    38d4:	b.eq	38e4 <BZ2_bzWriteOpen+0xb4>  // b.none
    38d8:	ldr	x0, [sp, #40]
    38dc:	mov	w1, #0xfffffffe            	// #-2
    38e0:	str	w1, [x0]
    38e4:	ldr	x0, [sp, #56]
    38e8:	cmp	x0, #0x0
    38ec:	b.eq	38fc <BZ2_bzWriteOpen+0xcc>  // b.none
    38f0:	ldr	x0, [sp, #56]
    38f4:	mov	w1, #0xfffffffe            	// #-2
    38f8:	str	w1, [x0, #5096]
    38fc:	mov	x0, #0x0                   	// #0
    3900:	b	3aa8 <BZ2_bzWriteOpen+0x278>
    3904:	ldr	x0, [sp, #32]
    3908:	bl	0 <ferror>
    390c:	cmp	w0, #0x0
    3910:	b.eq	394c <BZ2_bzWriteOpen+0x11c>  // b.none
    3914:	ldr	x0, [sp, #40]
    3918:	cmp	x0, #0x0
    391c:	b.eq	392c <BZ2_bzWriteOpen+0xfc>  // b.none
    3920:	ldr	x0, [sp, #40]
    3924:	mov	w1, #0xfffffffa            	// #-6
    3928:	str	w1, [x0]
    392c:	ldr	x0, [sp, #56]
    3930:	cmp	x0, #0x0
    3934:	b.eq	3944 <BZ2_bzWriteOpen+0x114>  // b.none
    3938:	ldr	x0, [sp, #56]
    393c:	mov	w1, #0xfffffffa            	// #-6
    3940:	str	w1, [x0, #5096]
    3944:	mov	x0, #0x0                   	// #0
    3948:	b	3aa8 <BZ2_bzWriteOpen+0x278>
    394c:	mov	x0, #0x13f0                	// #5104
    3950:	bl	0 <malloc>
    3954:	str	x0, [sp, #56]
    3958:	ldr	x0, [sp, #56]
    395c:	cmp	x0, #0x0
    3960:	b.ne	399c <BZ2_bzWriteOpen+0x16c>  // b.any
    3964:	ldr	x0, [sp, #40]
    3968:	cmp	x0, #0x0
    396c:	b.eq	397c <BZ2_bzWriteOpen+0x14c>  // b.none
    3970:	ldr	x0, [sp, #40]
    3974:	mov	w1, #0xfffffffd            	// #-3
    3978:	str	w1, [x0]
    397c:	ldr	x0, [sp, #56]
    3980:	cmp	x0, #0x0
    3984:	b.eq	3994 <BZ2_bzWriteOpen+0x164>  // b.none
    3988:	ldr	x0, [sp, #56]
    398c:	mov	w1, #0xfffffffd            	// #-3
    3990:	str	w1, [x0, #5096]
    3994:	mov	x0, #0x0                   	// #0
    3998:	b	3aa8 <BZ2_bzWriteOpen+0x278>
    399c:	ldr	x0, [sp, #40]
    39a0:	cmp	x0, #0x0
    39a4:	b.eq	39b0 <BZ2_bzWriteOpen+0x180>  // b.none
    39a8:	ldr	x0, [sp, #40]
    39ac:	str	wzr, [x0]
    39b0:	ldr	x0, [sp, #56]
    39b4:	cmp	x0, #0x0
    39b8:	b.eq	39c4 <BZ2_bzWriteOpen+0x194>  // b.none
    39bc:	ldr	x0, [sp, #56]
    39c0:	str	wzr, [x0, #5096]
    39c4:	ldr	x0, [sp, #56]
    39c8:	add	x0, x0, #0x1, lsl #12
    39cc:	strb	wzr, [x0, #1004]
    39d0:	ldr	x0, [sp, #56]
    39d4:	str	wzr, [x0, #5008]
    39d8:	ldr	x0, [sp, #56]
    39dc:	ldr	x1, [sp, #32]
    39e0:	str	x1, [x0]
    39e4:	ldr	x0, [sp, #56]
    39e8:	add	x0, x0, #0x1, lsl #12
    39ec:	mov	w1, #0x1                   	// #1
    39f0:	strb	w1, [x0, #916]
    39f4:	ldr	x0, [sp, #56]
    39f8:	str	xzr, [x0, #5072]
    39fc:	ldr	x0, [sp, #56]
    3a00:	str	xzr, [x0, #5080]
    3a04:	ldr	x0, [sp, #56]
    3a08:	str	xzr, [x0, #5088]
    3a0c:	ldr	w0, [sp, #20]
    3a10:	cmp	w0, #0x0
    3a14:	b.ne	3a20 <BZ2_bzWriteOpen+0x1f0>  // b.any
    3a18:	mov	w0, #0x1e                  	// #30
    3a1c:	str	w0, [sp, #20]
    3a20:	ldr	x1, [sp, #56]
    3a24:	mov	x0, #0x1398                	// #5016
    3a28:	add	x0, x1, x0
    3a2c:	ldr	w3, [sp, #20]
    3a30:	ldr	w2, [sp, #24]
    3a34:	ldr	w1, [sp, #28]
    3a38:	bl	1c0 <BZ2_bzCompressInit>
    3a3c:	str	w0, [sp, #52]
    3a40:	ldr	w0, [sp, #52]
    3a44:	cmp	w0, #0x0
    3a48:	b.eq	3a8c <BZ2_bzWriteOpen+0x25c>  // b.none
    3a4c:	ldr	x0, [sp, #40]
    3a50:	cmp	x0, #0x0
    3a54:	b.eq	3a64 <BZ2_bzWriteOpen+0x234>  // b.none
    3a58:	ldr	x0, [sp, #40]
    3a5c:	ldr	w1, [sp, #52]
    3a60:	str	w1, [x0]
    3a64:	ldr	x0, [sp, #56]
    3a68:	cmp	x0, #0x0
    3a6c:	b.eq	3a7c <BZ2_bzWriteOpen+0x24c>  // b.none
    3a70:	ldr	x0, [sp, #56]
    3a74:	ldr	w1, [sp, #52]
    3a78:	str	w1, [x0, #5096]
    3a7c:	ldr	x0, [sp, #56]
    3a80:	bl	0 <free>
    3a84:	mov	x0, #0x0                   	// #0
    3a88:	b	3aa8 <BZ2_bzWriteOpen+0x278>
    3a8c:	ldr	x0, [sp, #56]
    3a90:	str	wzr, [x0, #5024]
    3a94:	ldr	x0, [sp, #56]
    3a98:	add	x0, x0, #0x1, lsl #12
    3a9c:	mov	w1, #0x1                   	// #1
    3aa0:	strb	w1, [x0, #1004]
    3aa4:	ldr	x0, [sp, #56]
    3aa8:	ldp	x29, x30, [sp], #64
    3aac:	ret

0000000000003ab0 <BZ2_bzWrite>:
    3ab0:	stp	x29, x30, [sp, #-80]!
    3ab4:	mov	x29, sp
    3ab8:	str	x0, [sp, #40]
    3abc:	str	x1, [sp, #32]
    3ac0:	str	x2, [sp, #24]
    3ac4:	str	w3, [sp, #20]
    3ac8:	ldr	x0, [sp, #32]
    3acc:	str	x0, [sp, #72]
    3ad0:	ldr	x0, [sp, #40]
    3ad4:	cmp	x0, #0x0
    3ad8:	b.eq	3ae4 <BZ2_bzWrite+0x34>  // b.none
    3adc:	ldr	x0, [sp, #40]
    3ae0:	str	wzr, [x0]
    3ae4:	ldr	x0, [sp, #72]
    3ae8:	cmp	x0, #0x0
    3aec:	b.eq	3af8 <BZ2_bzWrite+0x48>  // b.none
    3af0:	ldr	x0, [sp, #72]
    3af4:	str	wzr, [x0, #5096]
    3af8:	ldr	x0, [sp, #72]
    3afc:	cmp	x0, #0x0
    3b00:	b.eq	3b1c <BZ2_bzWrite+0x6c>  // b.none
    3b04:	ldr	x0, [sp, #24]
    3b08:	cmp	x0, #0x0
    3b0c:	b.eq	3b1c <BZ2_bzWrite+0x6c>  // b.none
    3b10:	ldr	w0, [sp, #20]
    3b14:	cmp	w0, #0x0
    3b18:	b.ge	3b50 <BZ2_bzWrite+0xa0>  // b.tcont
    3b1c:	ldr	x0, [sp, #40]
    3b20:	cmp	x0, #0x0
    3b24:	b.eq	3b34 <BZ2_bzWrite+0x84>  // b.none
    3b28:	ldr	x0, [sp, #40]
    3b2c:	mov	w1, #0xfffffffe            	// #-2
    3b30:	str	w1, [x0]
    3b34:	ldr	x0, [sp, #72]
    3b38:	cmp	x0, #0x0
    3b3c:	b.eq	3d8c <BZ2_bzWrite+0x2dc>  // b.none
    3b40:	ldr	x0, [sp, #72]
    3b44:	mov	w1, #0xfffffffe            	// #-2
    3b48:	str	w1, [x0, #5096]
    3b4c:	b	3d8c <BZ2_bzWrite+0x2dc>
    3b50:	ldr	x0, [sp, #72]
    3b54:	add	x0, x0, #0x1, lsl #12
    3b58:	ldrb	w0, [x0, #916]
    3b5c:	cmp	w0, #0x0
    3b60:	b.ne	3b98 <BZ2_bzWrite+0xe8>  // b.any
    3b64:	ldr	x0, [sp, #40]
    3b68:	cmp	x0, #0x0
    3b6c:	b.eq	3b7c <BZ2_bzWrite+0xcc>  // b.none
    3b70:	ldr	x0, [sp, #40]
    3b74:	mov	w1, #0xffffffff            	// #-1
    3b78:	str	w1, [x0]
    3b7c:	ldr	x0, [sp, #72]
    3b80:	cmp	x0, #0x0
    3b84:	b.eq	3d94 <BZ2_bzWrite+0x2e4>  // b.none
    3b88:	ldr	x0, [sp, #72]
    3b8c:	mov	w1, #0xffffffff            	// #-1
    3b90:	str	w1, [x0, #5096]
    3b94:	b	3d94 <BZ2_bzWrite+0x2e4>
    3b98:	ldr	x0, [sp, #72]
    3b9c:	ldr	x0, [x0]
    3ba0:	bl	0 <ferror>
    3ba4:	cmp	w0, #0x0
    3ba8:	b.eq	3be0 <BZ2_bzWrite+0x130>  // b.none
    3bac:	ldr	x0, [sp, #40]
    3bb0:	cmp	x0, #0x0
    3bb4:	b.eq	3bc4 <BZ2_bzWrite+0x114>  // b.none
    3bb8:	ldr	x0, [sp, #40]
    3bbc:	mov	w1, #0xfffffffa            	// #-6
    3bc0:	str	w1, [x0]
    3bc4:	ldr	x0, [sp, #72]
    3bc8:	cmp	x0, #0x0
    3bcc:	b.eq	3d9c <BZ2_bzWrite+0x2ec>  // b.none
    3bd0:	ldr	x0, [sp, #72]
    3bd4:	mov	w1, #0xfffffffa            	// #-6
    3bd8:	str	w1, [x0, #5096]
    3bdc:	b	3d9c <BZ2_bzWrite+0x2ec>
    3be0:	ldr	w0, [sp, #20]
    3be4:	cmp	w0, #0x0
    3be8:	b.ne	3c18 <BZ2_bzWrite+0x168>  // b.any
    3bec:	ldr	x0, [sp, #40]
    3bf0:	cmp	x0, #0x0
    3bf4:	b.eq	3c00 <BZ2_bzWrite+0x150>  // b.none
    3bf8:	ldr	x0, [sp, #40]
    3bfc:	str	wzr, [x0]
    3c00:	ldr	x0, [sp, #72]
    3c04:	cmp	x0, #0x0
    3c08:	b.eq	3da4 <BZ2_bzWrite+0x2f4>  // b.none
    3c0c:	ldr	x0, [sp, #72]
    3c10:	str	wzr, [x0, #5096]
    3c14:	b	3da4 <BZ2_bzWrite+0x2f4>
    3c18:	ldr	w1, [sp, #20]
    3c1c:	ldr	x0, [sp, #72]
    3c20:	str	w1, [x0, #5024]
    3c24:	ldr	x0, [sp, #72]
    3c28:	ldr	x1, [sp, #24]
    3c2c:	str	x1, [x0, #5016]
    3c30:	ldr	x0, [sp, #72]
    3c34:	mov	w1, #0x1388                	// #5000
    3c38:	str	w1, [x0, #5048]
    3c3c:	ldr	x0, [sp, #72]
    3c40:	add	x1, x0, #0x8
    3c44:	ldr	x0, [sp, #72]
    3c48:	str	x1, [x0, #5040]
    3c4c:	ldr	x1, [sp, #72]
    3c50:	mov	x0, #0x1398                	// #5016
    3c54:	add	x0, x1, x0
    3c58:	mov	w1, #0x0                   	// #0
    3c5c:	bl	1018 <BZ2_bzCompress>
    3c60:	str	w0, [sp, #68]
    3c64:	ldr	w0, [sp, #68]
    3c68:	cmp	w0, #0x1
    3c6c:	b.eq	3ca4 <BZ2_bzWrite+0x1f4>  // b.none
    3c70:	ldr	x0, [sp, #40]
    3c74:	cmp	x0, #0x0
    3c78:	b.eq	3c88 <BZ2_bzWrite+0x1d8>  // b.none
    3c7c:	ldr	x0, [sp, #40]
    3c80:	ldr	w1, [sp, #68]
    3c84:	str	w1, [x0]
    3c88:	ldr	x0, [sp, #72]
    3c8c:	cmp	x0, #0x0
    3c90:	b.eq	3dac <BZ2_bzWrite+0x2fc>  // b.none
    3c94:	ldr	x0, [sp, #72]
    3c98:	ldr	w1, [sp, #68]
    3c9c:	str	w1, [x0, #5096]
    3ca0:	b	3dac <BZ2_bzWrite+0x2fc>
    3ca4:	ldr	x0, [sp, #72]
    3ca8:	ldr	w1, [x0, #5048]
    3cac:	mov	w0, #0x1387                	// #4999
    3cb0:	cmp	w1, w0
    3cb4:	b.hi	3d50 <BZ2_bzWrite+0x2a0>  // b.pmore
    3cb8:	ldr	x0, [sp, #72]
    3cbc:	ldr	w0, [x0, #5048]
    3cc0:	mov	w1, #0x1388                	// #5000
    3cc4:	sub	w0, w1, w0
    3cc8:	str	w0, [sp, #64]
    3ccc:	ldr	x0, [sp, #72]
    3cd0:	add	x4, x0, #0x8
    3cd4:	ldrsw	x1, [sp, #64]
    3cd8:	ldr	x0, [sp, #72]
    3cdc:	ldr	x0, [x0]
    3ce0:	mov	x3, x0
    3ce4:	mov	x2, x1
    3ce8:	mov	x1, #0x1                   	// #1
    3cec:	mov	x0, x4
    3cf0:	bl	0 <fwrite>
    3cf4:	str	w0, [sp, #60]
    3cf8:	ldr	w1, [sp, #64]
    3cfc:	ldr	w0, [sp, #60]
    3d00:	cmp	w1, w0
    3d04:	b.ne	3d1c <BZ2_bzWrite+0x26c>  // b.any
    3d08:	ldr	x0, [sp, #72]
    3d0c:	ldr	x0, [x0]
    3d10:	bl	0 <ferror>
    3d14:	cmp	w0, #0x0
    3d18:	b.eq	3d50 <BZ2_bzWrite+0x2a0>  // b.none
    3d1c:	ldr	x0, [sp, #40]
    3d20:	cmp	x0, #0x0
    3d24:	b.eq	3d34 <BZ2_bzWrite+0x284>  // b.none
    3d28:	ldr	x0, [sp, #40]
    3d2c:	mov	w1, #0xfffffffa            	// #-6
    3d30:	str	w1, [x0]
    3d34:	ldr	x0, [sp, #72]
    3d38:	cmp	x0, #0x0
    3d3c:	b.eq	3db4 <BZ2_bzWrite+0x304>  // b.none
    3d40:	ldr	x0, [sp, #72]
    3d44:	mov	w1, #0xfffffffa            	// #-6
    3d48:	str	w1, [x0, #5096]
    3d4c:	b	3db4 <BZ2_bzWrite+0x304>
    3d50:	ldr	x0, [sp, #72]
    3d54:	ldr	w0, [x0, #5024]
    3d58:	cmp	w0, #0x0
    3d5c:	b.ne	3c30 <BZ2_bzWrite+0x180>  // b.any
    3d60:	ldr	x0, [sp, #40]
    3d64:	cmp	x0, #0x0
    3d68:	b.eq	3d74 <BZ2_bzWrite+0x2c4>  // b.none
    3d6c:	ldr	x0, [sp, #40]
    3d70:	str	wzr, [x0]
    3d74:	ldr	x0, [sp, #72]
    3d78:	cmp	x0, #0x0
    3d7c:	b.eq	3dbc <BZ2_bzWrite+0x30c>  // b.none
    3d80:	ldr	x0, [sp, #72]
    3d84:	str	wzr, [x0, #5096]
    3d88:	b	3dbc <BZ2_bzWrite+0x30c>
    3d8c:	nop
    3d90:	b	3dc0 <BZ2_bzWrite+0x310>
    3d94:	nop
    3d98:	b	3dc0 <BZ2_bzWrite+0x310>
    3d9c:	nop
    3da0:	b	3dc0 <BZ2_bzWrite+0x310>
    3da4:	nop
    3da8:	b	3dc0 <BZ2_bzWrite+0x310>
    3dac:	nop
    3db0:	b	3dc0 <BZ2_bzWrite+0x310>
    3db4:	nop
    3db8:	b	3dc0 <BZ2_bzWrite+0x310>
    3dbc:	nop
    3dc0:	ldp	x29, x30, [sp], #80
    3dc4:	ret

0000000000003dc8 <BZ2_bzWriteClose>:
    3dc8:	stp	x29, x30, [sp, #-64]!
    3dcc:	mov	x29, sp
    3dd0:	str	x0, [sp, #56]
    3dd4:	str	x1, [sp, #48]
    3dd8:	str	w2, [sp, #44]
    3ddc:	str	x3, [sp, #32]
    3de0:	str	x4, [sp, #24]
    3de4:	mov	x6, #0x0                   	// #0
    3de8:	ldr	x5, [sp, #24]
    3dec:	mov	x4, #0x0                   	// #0
    3df0:	ldr	x3, [sp, #32]
    3df4:	ldr	w2, [sp, #44]
    3df8:	ldr	x1, [sp, #48]
    3dfc:	ldr	x0, [sp, #56]
    3e00:	bl	3e10 <BZ2_bzWriteClose64>
    3e04:	nop
    3e08:	ldp	x29, x30, [sp], #64
    3e0c:	ret

0000000000003e10 <BZ2_bzWriteClose64>:
    3e10:	stp	x29, x30, [sp, #-112]!
    3e14:	mov	x29, sp
    3e18:	str	x0, [sp, #72]
    3e1c:	str	x1, [sp, #64]
    3e20:	str	w2, [sp, #60]
    3e24:	str	x3, [sp, #48]
    3e28:	str	x4, [sp, #40]
    3e2c:	str	x5, [sp, #32]
    3e30:	str	x6, [sp, #24]
    3e34:	ldr	x0, [sp, #64]
    3e38:	str	x0, [sp, #104]
    3e3c:	ldr	x0, [sp, #104]
    3e40:	cmp	x0, #0x0
    3e44:	b.ne	3e74 <BZ2_bzWriteClose64+0x64>  // b.any
    3e48:	ldr	x0, [sp, #72]
    3e4c:	cmp	x0, #0x0
    3e50:	b.eq	3e5c <BZ2_bzWriteClose64+0x4c>  // b.none
    3e54:	ldr	x0, [sp, #72]
    3e58:	str	wzr, [x0]
    3e5c:	ldr	x0, [sp, #104]
    3e60:	cmp	x0, #0x0
    3e64:	b.eq	41d8 <BZ2_bzWriteClose64+0x3c8>  // b.none
    3e68:	ldr	x0, [sp, #104]
    3e6c:	str	wzr, [x0, #5096]
    3e70:	b	41d8 <BZ2_bzWriteClose64+0x3c8>
    3e74:	ldr	x0, [sp, #104]
    3e78:	add	x0, x0, #0x1, lsl #12
    3e7c:	ldrb	w0, [x0, #916]
    3e80:	cmp	w0, #0x0
    3e84:	b.ne	3ebc <BZ2_bzWriteClose64+0xac>  // b.any
    3e88:	ldr	x0, [sp, #72]
    3e8c:	cmp	x0, #0x0
    3e90:	b.eq	3ea0 <BZ2_bzWriteClose64+0x90>  // b.none
    3e94:	ldr	x0, [sp, #72]
    3e98:	mov	w1, #0xffffffff            	// #-1
    3e9c:	str	w1, [x0]
    3ea0:	ldr	x0, [sp, #104]
    3ea4:	cmp	x0, #0x0
    3ea8:	b.eq	41e0 <BZ2_bzWriteClose64+0x3d0>  // b.none
    3eac:	ldr	x0, [sp, #104]
    3eb0:	mov	w1, #0xffffffff            	// #-1
    3eb4:	str	w1, [x0, #5096]
    3eb8:	b	41e0 <BZ2_bzWriteClose64+0x3d0>
    3ebc:	ldr	x0, [sp, #104]
    3ec0:	ldr	x0, [x0]
    3ec4:	bl	0 <ferror>
    3ec8:	cmp	w0, #0x0
    3ecc:	b.eq	3f04 <BZ2_bzWriteClose64+0xf4>  // b.none
    3ed0:	ldr	x0, [sp, #72]
    3ed4:	cmp	x0, #0x0
    3ed8:	b.eq	3ee8 <BZ2_bzWriteClose64+0xd8>  // b.none
    3edc:	ldr	x0, [sp, #72]
    3ee0:	mov	w1, #0xfffffffa            	// #-6
    3ee4:	str	w1, [x0]
    3ee8:	ldr	x0, [sp, #104]
    3eec:	cmp	x0, #0x0
    3ef0:	b.eq	41e8 <BZ2_bzWriteClose64+0x3d8>  // b.none
    3ef4:	ldr	x0, [sp, #104]
    3ef8:	mov	w1, #0xfffffffa            	// #-6
    3efc:	str	w1, [x0, #5096]
    3f00:	b	41e8 <BZ2_bzWriteClose64+0x3d8>
    3f04:	ldr	x0, [sp, #48]
    3f08:	cmp	x0, #0x0
    3f0c:	b.eq	3f18 <BZ2_bzWriteClose64+0x108>  // b.none
    3f10:	ldr	x0, [sp, #48]
    3f14:	str	wzr, [x0]
    3f18:	ldr	x0, [sp, #40]
    3f1c:	cmp	x0, #0x0
    3f20:	b.eq	3f2c <BZ2_bzWriteClose64+0x11c>  // b.none
    3f24:	ldr	x0, [sp, #40]
    3f28:	str	wzr, [x0]
    3f2c:	ldr	x0, [sp, #32]
    3f30:	cmp	x0, #0x0
    3f34:	b.eq	3f40 <BZ2_bzWriteClose64+0x130>  // b.none
    3f38:	ldr	x0, [sp, #32]
    3f3c:	str	wzr, [x0]
    3f40:	ldr	x0, [sp, #24]
    3f44:	cmp	x0, #0x0
    3f48:	b.eq	3f54 <BZ2_bzWriteClose64+0x144>  // b.none
    3f4c:	ldr	x0, [sp, #24]
    3f50:	str	wzr, [x0]
    3f54:	ldr	w0, [sp, #60]
    3f58:	cmp	w0, #0x0
    3f5c:	b.ne	40b0 <BZ2_bzWriteClose64+0x2a0>  // b.any
    3f60:	ldr	x0, [sp, #104]
    3f64:	ldr	w0, [x0, #5096]
    3f68:	cmp	w0, #0x0
    3f6c:	b.ne	40b0 <BZ2_bzWriteClose64+0x2a0>  // b.any
    3f70:	ldr	x0, [sp, #104]
    3f74:	mov	w1, #0x1388                	// #5000
    3f78:	str	w1, [x0, #5048]
    3f7c:	ldr	x0, [sp, #104]
    3f80:	add	x1, x0, #0x8
    3f84:	ldr	x0, [sp, #104]
    3f88:	str	x1, [x0, #5040]
    3f8c:	ldr	x1, [sp, #104]
    3f90:	mov	x0, #0x1398                	// #5016
    3f94:	add	x0, x1, x0
    3f98:	mov	w1, #0x2                   	// #2
    3f9c:	bl	1018 <BZ2_bzCompress>
    3fa0:	str	w0, [sp, #100]
    3fa4:	ldr	w0, [sp, #100]
    3fa8:	cmp	w0, #0x3
    3fac:	b.eq	3ff0 <BZ2_bzWriteClose64+0x1e0>  // b.none
    3fb0:	ldr	w0, [sp, #100]
    3fb4:	cmp	w0, #0x4
    3fb8:	b.eq	3ff0 <BZ2_bzWriteClose64+0x1e0>  // b.none
    3fbc:	ldr	x0, [sp, #72]
    3fc0:	cmp	x0, #0x0
    3fc4:	b.eq	3fd4 <BZ2_bzWriteClose64+0x1c4>  // b.none
    3fc8:	ldr	x0, [sp, #72]
    3fcc:	ldr	w1, [sp, #100]
    3fd0:	str	w1, [x0]
    3fd4:	ldr	x0, [sp, #104]
    3fd8:	cmp	x0, #0x0
    3fdc:	b.eq	41f0 <BZ2_bzWriteClose64+0x3e0>  // b.none
    3fe0:	ldr	x0, [sp, #104]
    3fe4:	ldr	w1, [sp, #100]
    3fe8:	str	w1, [x0, #5096]
    3fec:	b	41f0 <BZ2_bzWriteClose64+0x3e0>
    3ff0:	ldr	x0, [sp, #104]
    3ff4:	ldr	w1, [x0, #5048]
    3ff8:	mov	w0, #0x1387                	// #4999
    3ffc:	cmp	w1, w0
    4000:	b.hi	409c <BZ2_bzWriteClose64+0x28c>  // b.pmore
    4004:	ldr	x0, [sp, #104]
    4008:	ldr	w0, [x0, #5048]
    400c:	mov	w1, #0x1388                	// #5000
    4010:	sub	w0, w1, w0
    4014:	str	w0, [sp, #96]
    4018:	ldr	x0, [sp, #104]
    401c:	add	x4, x0, #0x8
    4020:	ldrsw	x1, [sp, #96]
    4024:	ldr	x0, [sp, #104]
    4028:	ldr	x0, [x0]
    402c:	mov	x3, x0
    4030:	mov	x2, x1
    4034:	mov	x1, #0x1                   	// #1
    4038:	mov	x0, x4
    403c:	bl	0 <fwrite>
    4040:	str	w0, [sp, #92]
    4044:	ldr	w1, [sp, #96]
    4048:	ldr	w0, [sp, #92]
    404c:	cmp	w1, w0
    4050:	b.ne	4068 <BZ2_bzWriteClose64+0x258>  // b.any
    4054:	ldr	x0, [sp, #104]
    4058:	ldr	x0, [x0]
    405c:	bl	0 <ferror>
    4060:	cmp	w0, #0x0
    4064:	b.eq	409c <BZ2_bzWriteClose64+0x28c>  // b.none
    4068:	ldr	x0, [sp, #72]
    406c:	cmp	x0, #0x0
    4070:	b.eq	4080 <BZ2_bzWriteClose64+0x270>  // b.none
    4074:	ldr	x0, [sp, #72]
    4078:	mov	w1, #0xfffffffa            	// #-6
    407c:	str	w1, [x0]
    4080:	ldr	x0, [sp, #104]
    4084:	cmp	x0, #0x0
    4088:	b.eq	41f8 <BZ2_bzWriteClose64+0x3e8>  // b.none
    408c:	ldr	x0, [sp, #104]
    4090:	mov	w1, #0xfffffffa            	// #-6
    4094:	str	w1, [x0, #5096]
    4098:	b	41f8 <BZ2_bzWriteClose64+0x3e8>
    409c:	ldr	w0, [sp, #100]
    40a0:	cmp	w0, #0x4
    40a4:	b.eq	40ac <BZ2_bzWriteClose64+0x29c>  // b.none
    40a8:	b	3f70 <BZ2_bzWriteClose64+0x160>
    40ac:	nop
    40b0:	ldr	w0, [sp, #60]
    40b4:	cmp	w0, #0x0
    40b8:	b.ne	4124 <BZ2_bzWriteClose64+0x314>  // b.any
    40bc:	ldr	x0, [sp, #104]
    40c0:	ldr	x0, [x0]
    40c4:	bl	0 <ferror>
    40c8:	cmp	w0, #0x0
    40cc:	b.ne	4124 <BZ2_bzWriteClose64+0x314>  // b.any
    40d0:	ldr	x0, [sp, #104]
    40d4:	ldr	x0, [x0]
    40d8:	bl	0 <fflush>
    40dc:	ldr	x0, [sp, #104]
    40e0:	ldr	x0, [x0]
    40e4:	bl	0 <ferror>
    40e8:	cmp	w0, #0x0
    40ec:	b.eq	4124 <BZ2_bzWriteClose64+0x314>  // b.none
    40f0:	ldr	x0, [sp, #72]
    40f4:	cmp	x0, #0x0
    40f8:	b.eq	4108 <BZ2_bzWriteClose64+0x2f8>  // b.none
    40fc:	ldr	x0, [sp, #72]
    4100:	mov	w1, #0xfffffffa            	// #-6
    4104:	str	w1, [x0]
    4108:	ldr	x0, [sp, #104]
    410c:	cmp	x0, #0x0
    4110:	b.eq	4200 <BZ2_bzWriteClose64+0x3f0>  // b.none
    4114:	ldr	x0, [sp, #104]
    4118:	mov	w1, #0xfffffffa            	// #-6
    411c:	str	w1, [x0, #5096]
    4120:	b	4200 <BZ2_bzWriteClose64+0x3f0>
    4124:	ldr	x0, [sp, #48]
    4128:	cmp	x0, #0x0
    412c:	b.eq	4140 <BZ2_bzWriteClose64+0x330>  // b.none
    4130:	ldr	x0, [sp, #104]
    4134:	ldr	w1, [x0, #5028]
    4138:	ldr	x0, [sp, #48]
    413c:	str	w1, [x0]
    4140:	ldr	x0, [sp, #40]
    4144:	cmp	x0, #0x0
    4148:	b.eq	415c <BZ2_bzWriteClose64+0x34c>  // b.none
    414c:	ldr	x0, [sp, #104]
    4150:	ldr	w1, [x0, #5032]
    4154:	ldr	x0, [sp, #40]
    4158:	str	w1, [x0]
    415c:	ldr	x0, [sp, #32]
    4160:	cmp	x0, #0x0
    4164:	b.eq	4178 <BZ2_bzWriteClose64+0x368>  // b.none
    4168:	ldr	x0, [sp, #104]
    416c:	ldr	w1, [x0, #5052]
    4170:	ldr	x0, [sp, #32]
    4174:	str	w1, [x0]
    4178:	ldr	x0, [sp, #24]
    417c:	cmp	x0, #0x0
    4180:	b.eq	4194 <BZ2_bzWriteClose64+0x384>  // b.none
    4184:	ldr	x0, [sp, #104]
    4188:	ldr	w1, [x0, #5056]
    418c:	ldr	x0, [sp, #24]
    4190:	str	w1, [x0]
    4194:	ldr	x0, [sp, #72]
    4198:	cmp	x0, #0x0
    419c:	b.eq	41a8 <BZ2_bzWriteClose64+0x398>  // b.none
    41a0:	ldr	x0, [sp, #72]
    41a4:	str	wzr, [x0]
    41a8:	ldr	x0, [sp, #104]
    41ac:	cmp	x0, #0x0
    41b0:	b.eq	41bc <BZ2_bzWriteClose64+0x3ac>  // b.none
    41b4:	ldr	x0, [sp, #104]
    41b8:	str	wzr, [x0, #5096]
    41bc:	ldr	x1, [sp, #104]
    41c0:	mov	x0, #0x1398                	// #5016
    41c4:	add	x0, x1, x0
    41c8:	bl	12ac <BZ2_bzCompressEnd>
    41cc:	ldr	x0, [sp, #104]
    41d0:	bl	0 <free>
    41d4:	b	4204 <BZ2_bzWriteClose64+0x3f4>
    41d8:	nop
    41dc:	b	4204 <BZ2_bzWriteClose64+0x3f4>
    41e0:	nop
    41e4:	b	4204 <BZ2_bzWriteClose64+0x3f4>
    41e8:	nop
    41ec:	b	4204 <BZ2_bzWriteClose64+0x3f4>
    41f0:	nop
    41f4:	b	4204 <BZ2_bzWriteClose64+0x3f4>
    41f8:	nop
    41fc:	b	4204 <BZ2_bzWriteClose64+0x3f4>
    4200:	nop
    4204:	ldp	x29, x30, [sp], #112
    4208:	ret

000000000000420c <BZ2_bzReadOpen>:
    420c:	stp	x29, x30, [sp, #-80]!
    4210:	mov	x29, sp
    4214:	str	x0, [sp, #56]
    4218:	str	x1, [sp, #48]
    421c:	str	w2, [sp, #44]
    4220:	str	w3, [sp, #40]
    4224:	str	x4, [sp, #32]
    4228:	str	w5, [sp, #28]
    422c:	str	xzr, [sp, #72]
    4230:	ldr	x0, [sp, #56]
    4234:	cmp	x0, #0x0
    4238:	b.eq	4244 <BZ2_bzReadOpen+0x38>  // b.none
    423c:	ldr	x0, [sp, #56]
    4240:	str	wzr, [x0]
    4244:	ldr	x0, [sp, #72]
    4248:	cmp	x0, #0x0
    424c:	b.eq	4258 <BZ2_bzReadOpen+0x4c>  // b.none
    4250:	ldr	x0, [sp, #72]
    4254:	str	wzr, [x0, #5096]
    4258:	ldr	x0, [sp, #48]
    425c:	cmp	x0, #0x0
    4260:	b.eq	42d4 <BZ2_bzReadOpen+0xc8>  // b.none
    4264:	ldr	w0, [sp, #40]
    4268:	cmp	w0, #0x0
    426c:	b.eq	427c <BZ2_bzReadOpen+0x70>  // b.none
    4270:	ldr	w0, [sp, #40]
    4274:	cmp	w0, #0x1
    4278:	b.ne	42d4 <BZ2_bzReadOpen+0xc8>  // b.any
    427c:	ldr	w0, [sp, #44]
    4280:	cmp	w0, #0x0
    4284:	b.lt	42d4 <BZ2_bzReadOpen+0xc8>  // b.tstop
    4288:	ldr	w0, [sp, #44]
    428c:	cmp	w0, #0x4
    4290:	b.gt	42d4 <BZ2_bzReadOpen+0xc8>
    4294:	ldr	x0, [sp, #32]
    4298:	cmp	x0, #0x0
    429c:	b.ne	42ac <BZ2_bzReadOpen+0xa0>  // b.any
    42a0:	ldr	w0, [sp, #28]
    42a4:	cmp	w0, #0x0
    42a8:	b.ne	42d4 <BZ2_bzReadOpen+0xc8>  // b.any
    42ac:	ldr	x0, [sp, #32]
    42b0:	cmp	x0, #0x0
    42b4:	b.eq	430c <BZ2_bzReadOpen+0x100>  // b.none
    42b8:	ldr	w0, [sp, #28]
    42bc:	cmp	w0, #0x0
    42c0:	b.lt	42d4 <BZ2_bzReadOpen+0xc8>  // b.tstop
    42c4:	ldr	w1, [sp, #28]
    42c8:	mov	w0, #0x1388                	// #5000
    42cc:	cmp	w1, w0
    42d0:	b.le	430c <BZ2_bzReadOpen+0x100>
    42d4:	ldr	x0, [sp, #56]
    42d8:	cmp	x0, #0x0
    42dc:	b.eq	42ec <BZ2_bzReadOpen+0xe0>  // b.none
    42e0:	ldr	x0, [sp, #56]
    42e4:	mov	w1, #0xfffffffe            	// #-2
    42e8:	str	w1, [x0]
    42ec:	ldr	x0, [sp, #72]
    42f0:	cmp	x0, #0x0
    42f4:	b.eq	4304 <BZ2_bzReadOpen+0xf8>  // b.none
    42f8:	ldr	x0, [sp, #72]
    42fc:	mov	w1, #0xfffffffe            	// #-2
    4300:	str	w1, [x0, #5096]
    4304:	mov	x0, #0x0                   	// #0
    4308:	b	4510 <BZ2_bzReadOpen+0x304>
    430c:	ldr	x0, [sp, #48]
    4310:	bl	0 <ferror>
    4314:	cmp	w0, #0x0
    4318:	b.eq	4354 <BZ2_bzReadOpen+0x148>  // b.none
    431c:	ldr	x0, [sp, #56]
    4320:	cmp	x0, #0x0
    4324:	b.eq	4334 <BZ2_bzReadOpen+0x128>  // b.none
    4328:	ldr	x0, [sp, #56]
    432c:	mov	w1, #0xfffffffa            	// #-6
    4330:	str	w1, [x0]
    4334:	ldr	x0, [sp, #72]
    4338:	cmp	x0, #0x0
    433c:	b.eq	434c <BZ2_bzReadOpen+0x140>  // b.none
    4340:	ldr	x0, [sp, #72]
    4344:	mov	w1, #0xfffffffa            	// #-6
    4348:	str	w1, [x0, #5096]
    434c:	mov	x0, #0x0                   	// #0
    4350:	b	4510 <BZ2_bzReadOpen+0x304>
    4354:	mov	x0, #0x13f0                	// #5104
    4358:	bl	0 <malloc>
    435c:	str	x0, [sp, #72]
    4360:	ldr	x0, [sp, #72]
    4364:	cmp	x0, #0x0
    4368:	b.ne	43a4 <BZ2_bzReadOpen+0x198>  // b.any
    436c:	ldr	x0, [sp, #56]
    4370:	cmp	x0, #0x0
    4374:	b.eq	4384 <BZ2_bzReadOpen+0x178>  // b.none
    4378:	ldr	x0, [sp, #56]
    437c:	mov	w1, #0xfffffffd            	// #-3
    4380:	str	w1, [x0]
    4384:	ldr	x0, [sp, #72]
    4388:	cmp	x0, #0x0
    438c:	b.eq	439c <BZ2_bzReadOpen+0x190>  // b.none
    4390:	ldr	x0, [sp, #72]
    4394:	mov	w1, #0xfffffffd            	// #-3
    4398:	str	w1, [x0, #5096]
    439c:	mov	x0, #0x0                   	// #0
    43a0:	b	4510 <BZ2_bzReadOpen+0x304>
    43a4:	ldr	x0, [sp, #56]
    43a8:	cmp	x0, #0x0
    43ac:	b.eq	43b8 <BZ2_bzReadOpen+0x1ac>  // b.none
    43b0:	ldr	x0, [sp, #56]
    43b4:	str	wzr, [x0]
    43b8:	ldr	x0, [sp, #72]
    43bc:	cmp	x0, #0x0
    43c0:	b.eq	43cc <BZ2_bzReadOpen+0x1c0>  // b.none
    43c4:	ldr	x0, [sp, #72]
    43c8:	str	wzr, [x0, #5096]
    43cc:	ldr	x0, [sp, #72]
    43d0:	add	x0, x0, #0x1, lsl #12
    43d4:	strb	wzr, [x0, #1004]
    43d8:	ldr	x0, [sp, #72]
    43dc:	ldr	x1, [sp, #48]
    43e0:	str	x1, [x0]
    43e4:	ldr	x0, [sp, #72]
    43e8:	str	wzr, [x0, #5008]
    43ec:	ldr	x0, [sp, #72]
    43f0:	add	x0, x0, #0x1, lsl #12
    43f4:	strb	wzr, [x0, #916]
    43f8:	ldr	x0, [sp, #72]
    43fc:	str	xzr, [x0, #5072]
    4400:	ldr	x0, [sp, #72]
    4404:	str	xzr, [x0, #5080]
    4408:	ldr	x0, [sp, #72]
    440c:	str	xzr, [x0, #5088]
    4410:	b	4464 <BZ2_bzReadOpen+0x258>
    4414:	ldr	x0, [sp, #72]
    4418:	ldr	w3, [x0, #5008]
    441c:	ldr	x0, [sp, #32]
    4420:	ldrb	w2, [x0]
    4424:	ldr	x1, [sp, #72]
    4428:	sxtw	x0, w3
    442c:	add	x0, x1, x0
    4430:	mov	w1, w2
    4434:	strb	w1, [x0, #8]
    4438:	ldr	x0, [sp, #72]
    443c:	ldr	w0, [x0, #5008]
    4440:	add	w1, w0, #0x1
    4444:	ldr	x0, [sp, #72]
    4448:	str	w1, [x0, #5008]
    444c:	ldr	x0, [sp, #32]
    4450:	add	x0, x0, #0x1
    4454:	str	x0, [sp, #32]
    4458:	ldr	w0, [sp, #28]
    445c:	sub	w0, w0, #0x1
    4460:	str	w0, [sp, #28]
    4464:	ldr	w0, [sp, #28]
    4468:	cmp	w0, #0x0
    446c:	b.gt	4414 <BZ2_bzReadOpen+0x208>
    4470:	ldr	x1, [sp, #72]
    4474:	mov	x0, #0x1398                	// #5016
    4478:	add	x0, x1, x0
    447c:	ldr	w2, [sp, #40]
    4480:	ldr	w1, [sp, #44]
    4484:	bl	13dc <BZ2_bzDecompressInit>
    4488:	str	w0, [sp, #68]
    448c:	ldr	w0, [sp, #68]
    4490:	cmp	w0, #0x0
    4494:	b.eq	44d8 <BZ2_bzReadOpen+0x2cc>  // b.none
    4498:	ldr	x0, [sp, #56]
    449c:	cmp	x0, #0x0
    44a0:	b.eq	44b0 <BZ2_bzReadOpen+0x2a4>  // b.none
    44a4:	ldr	x0, [sp, #56]
    44a8:	ldr	w1, [sp, #68]
    44ac:	str	w1, [x0]
    44b0:	ldr	x0, [sp, #72]
    44b4:	cmp	x0, #0x0
    44b8:	b.eq	44c8 <BZ2_bzReadOpen+0x2bc>  // b.none
    44bc:	ldr	x0, [sp, #72]
    44c0:	ldr	w1, [sp, #68]
    44c4:	str	w1, [x0, #5096]
    44c8:	ldr	x0, [sp, #72]
    44cc:	bl	0 <free>
    44d0:	mov	x0, #0x0                   	// #0
    44d4:	b	4510 <BZ2_bzReadOpen+0x304>
    44d8:	ldr	x0, [sp, #72]
    44dc:	ldr	w0, [x0, #5008]
    44e0:	mov	w1, w0
    44e4:	ldr	x0, [sp, #72]
    44e8:	str	w1, [x0, #5024]
    44ec:	ldr	x0, [sp, #72]
    44f0:	add	x1, x0, #0x8
    44f4:	ldr	x0, [sp, #72]
    44f8:	str	x1, [x0, #5016]
    44fc:	ldr	x0, [sp, #72]
    4500:	add	x0, x0, #0x1, lsl #12
    4504:	mov	w1, #0x1                   	// #1
    4508:	strb	w1, [x0, #1004]
    450c:	ldr	x0, [sp, #72]
    4510:	ldp	x29, x30, [sp], #80
    4514:	ret

0000000000004518 <BZ2_bzReadClose>:
    4518:	stp	x29, x30, [sp, #-48]!
    451c:	mov	x29, sp
    4520:	str	x0, [sp, #24]
    4524:	str	x1, [sp, #16]
    4528:	ldr	x0, [sp, #16]
    452c:	str	x0, [sp, #40]
    4530:	ldr	x0, [sp, #24]
    4534:	cmp	x0, #0x0
    4538:	b.eq	4544 <BZ2_bzReadClose+0x2c>  // b.none
    453c:	ldr	x0, [sp, #24]
    4540:	str	wzr, [x0]
    4544:	ldr	x0, [sp, #40]
    4548:	cmp	x0, #0x0
    454c:	b.eq	4558 <BZ2_bzReadClose+0x40>  // b.none
    4550:	ldr	x0, [sp, #40]
    4554:	str	wzr, [x0, #5096]
    4558:	ldr	x0, [sp, #40]
    455c:	cmp	x0, #0x0
    4560:	b.ne	4590 <BZ2_bzReadClose+0x78>  // b.any
    4564:	ldr	x0, [sp, #24]
    4568:	cmp	x0, #0x0
    456c:	b.eq	4578 <BZ2_bzReadClose+0x60>  // b.none
    4570:	ldr	x0, [sp, #24]
    4574:	str	wzr, [x0]
    4578:	ldr	x0, [sp, #40]
    457c:	cmp	x0, #0x0
    4580:	b.eq	4608 <BZ2_bzReadClose+0xf0>  // b.none
    4584:	ldr	x0, [sp, #40]
    4588:	str	wzr, [x0, #5096]
    458c:	b	4608 <BZ2_bzReadClose+0xf0>
    4590:	ldr	x0, [sp, #40]
    4594:	add	x0, x0, #0x1, lsl #12
    4598:	ldrb	w0, [x0, #916]
    459c:	cmp	w0, #0x0
    45a0:	b.eq	45d8 <BZ2_bzReadClose+0xc0>  // b.none
    45a4:	ldr	x0, [sp, #24]
    45a8:	cmp	x0, #0x0
    45ac:	b.eq	45bc <BZ2_bzReadClose+0xa4>  // b.none
    45b0:	ldr	x0, [sp, #24]
    45b4:	mov	w1, #0xffffffff            	// #-1
    45b8:	str	w1, [x0]
    45bc:	ldr	x0, [sp, #40]
    45c0:	cmp	x0, #0x0
    45c4:	b.eq	4610 <BZ2_bzReadClose+0xf8>  // b.none
    45c8:	ldr	x0, [sp, #40]
    45cc:	mov	w1, #0xffffffff            	// #-1
    45d0:	str	w1, [x0, #5096]
    45d4:	b	4610 <BZ2_bzReadClose+0xf8>
    45d8:	ldr	x0, [sp, #40]
    45dc:	add	x0, x0, #0x1, lsl #12
    45e0:	ldrb	w0, [x0, #1004]
    45e4:	cmp	w0, #0x0
    45e8:	b.eq	45fc <BZ2_bzReadClose+0xe4>  // b.none
    45ec:	ldr	x1, [sp, #40]
    45f0:	mov	x0, #0x1398                	// #5016
    45f4:	add	x0, x1, x0
    45f8:	bl	36bc <BZ2_bzDecompressEnd>
    45fc:	ldr	x0, [sp, #40]
    4600:	bl	0 <free>
    4604:	b	4614 <BZ2_bzReadClose+0xfc>
    4608:	nop
    460c:	b	4614 <BZ2_bzReadClose+0xfc>
    4610:	nop
    4614:	ldp	x29, x30, [sp], #48
    4618:	ret

000000000000461c <BZ2_bzRead>:
    461c:	stp	x29, x30, [sp, #-64]!
    4620:	mov	x29, sp
    4624:	str	x0, [sp, #40]
    4628:	str	x1, [sp, #32]
    462c:	str	x2, [sp, #24]
    4630:	str	w3, [sp, #20]
    4634:	ldr	x0, [sp, #32]
    4638:	str	x0, [sp, #56]
    463c:	ldr	x0, [sp, #40]
    4640:	cmp	x0, #0x0
    4644:	b.eq	4650 <BZ2_bzRead+0x34>  // b.none
    4648:	ldr	x0, [sp, #40]
    464c:	str	wzr, [x0]
    4650:	ldr	x0, [sp, #56]
    4654:	cmp	x0, #0x0
    4658:	b.eq	4664 <BZ2_bzRead+0x48>  // b.none
    465c:	ldr	x0, [sp, #56]
    4660:	str	wzr, [x0, #5096]
    4664:	ldr	x0, [sp, #56]
    4668:	cmp	x0, #0x0
    466c:	b.eq	4688 <BZ2_bzRead+0x6c>  // b.none
    4670:	ldr	x0, [sp, #24]
    4674:	cmp	x0, #0x0
    4678:	b.eq	4688 <BZ2_bzRead+0x6c>  // b.none
    467c:	ldr	w0, [sp, #20]
    4680:	cmp	w0, #0x0
    4684:	b.ge	46c0 <BZ2_bzRead+0xa4>  // b.tcont
    4688:	ldr	x0, [sp, #40]
    468c:	cmp	x0, #0x0
    4690:	b.eq	46a0 <BZ2_bzRead+0x84>  // b.none
    4694:	ldr	x0, [sp, #40]
    4698:	mov	w1, #0xfffffffe            	// #-2
    469c:	str	w1, [x0]
    46a0:	ldr	x0, [sp, #56]
    46a4:	cmp	x0, #0x0
    46a8:	b.eq	46b8 <BZ2_bzRead+0x9c>  // b.none
    46ac:	ldr	x0, [sp, #56]
    46b0:	mov	w1, #0xfffffffe            	// #-2
    46b4:	str	w1, [x0, #5096]
    46b8:	mov	w0, #0x0                   	// #0
    46bc:	b	49e4 <BZ2_bzRead+0x3c8>
    46c0:	ldr	x0, [sp, #56]
    46c4:	add	x0, x0, #0x1, lsl #12
    46c8:	ldrb	w0, [x0, #916]
    46cc:	cmp	w0, #0x0
    46d0:	b.eq	470c <BZ2_bzRead+0xf0>  // b.none
    46d4:	ldr	x0, [sp, #40]
    46d8:	cmp	x0, #0x0
    46dc:	b.eq	46ec <BZ2_bzRead+0xd0>  // b.none
    46e0:	ldr	x0, [sp, #40]
    46e4:	mov	w1, #0xffffffff            	// #-1
    46e8:	str	w1, [x0]
    46ec:	ldr	x0, [sp, #56]
    46f0:	cmp	x0, #0x0
    46f4:	b.eq	4704 <BZ2_bzRead+0xe8>  // b.none
    46f8:	ldr	x0, [sp, #56]
    46fc:	mov	w1, #0xffffffff            	// #-1
    4700:	str	w1, [x0, #5096]
    4704:	mov	w0, #0x0                   	// #0
    4708:	b	49e4 <BZ2_bzRead+0x3c8>
    470c:	ldr	w0, [sp, #20]
    4710:	cmp	w0, #0x0
    4714:	b.ne	4748 <BZ2_bzRead+0x12c>  // b.any
    4718:	ldr	x0, [sp, #40]
    471c:	cmp	x0, #0x0
    4720:	b.eq	472c <BZ2_bzRead+0x110>  // b.none
    4724:	ldr	x0, [sp, #40]
    4728:	str	wzr, [x0]
    472c:	ldr	x0, [sp, #56]
    4730:	cmp	x0, #0x0
    4734:	b.eq	4740 <BZ2_bzRead+0x124>  // b.none
    4738:	ldr	x0, [sp, #56]
    473c:	str	wzr, [x0, #5096]
    4740:	mov	w0, #0x0                   	// #0
    4744:	b	49e4 <BZ2_bzRead+0x3c8>
    4748:	ldr	w1, [sp, #20]
    474c:	ldr	x0, [sp, #56]
    4750:	str	w1, [x0, #5048]
    4754:	ldr	x0, [sp, #56]
    4758:	ldr	x1, [sp, #24]
    475c:	str	x1, [x0, #5040]
    4760:	ldr	x0, [sp, #56]
    4764:	ldr	x0, [x0]
    4768:	bl	0 <ferror>
    476c:	cmp	w0, #0x0
    4770:	b.eq	47ac <BZ2_bzRead+0x190>  // b.none
    4774:	ldr	x0, [sp, #40]
    4778:	cmp	x0, #0x0
    477c:	b.eq	478c <BZ2_bzRead+0x170>  // b.none
    4780:	ldr	x0, [sp, #40]
    4784:	mov	w1, #0xfffffffa            	// #-6
    4788:	str	w1, [x0]
    478c:	ldr	x0, [sp, #56]
    4790:	cmp	x0, #0x0
    4794:	b.eq	47a4 <BZ2_bzRead+0x188>  // b.none
    4798:	ldr	x0, [sp, #56]
    479c:	mov	w1, #0xfffffffa            	// #-6
    47a0:	str	w1, [x0, #5096]
    47a4:	mov	w0, #0x0                   	// #0
    47a8:	b	49e4 <BZ2_bzRead+0x3c8>
    47ac:	ldr	x0, [sp, #56]
    47b0:	ldr	w0, [x0, #5024]
    47b4:	cmp	w0, #0x0
    47b8:	b.ne	4878 <BZ2_bzRead+0x25c>  // b.any
    47bc:	ldr	x0, [sp, #56]
    47c0:	ldr	x0, [x0]
    47c4:	bl	37ec <myfeof>
    47c8:	and	w0, w0, #0xff
    47cc:	cmp	w0, #0x0
    47d0:	b.ne	4878 <BZ2_bzRead+0x25c>  // b.any
    47d4:	ldr	x0, [sp, #56]
    47d8:	add	x4, x0, #0x8
    47dc:	ldr	x0, [sp, #56]
    47e0:	ldr	x0, [x0]
    47e4:	mov	x3, x0
    47e8:	mov	x2, #0x1388                	// #5000
    47ec:	mov	x1, #0x1                   	// #1
    47f0:	mov	x0, x4
    47f4:	bl	0 <fread>
    47f8:	str	w0, [sp, #52]
    47fc:	ldr	x0, [sp, #56]
    4800:	ldr	x0, [x0]
    4804:	bl	0 <ferror>
    4808:	cmp	w0, #0x0
    480c:	b.eq	4848 <BZ2_bzRead+0x22c>  // b.none
    4810:	ldr	x0, [sp, #40]
    4814:	cmp	x0, #0x0
    4818:	b.eq	4828 <BZ2_bzRead+0x20c>  // b.none
    481c:	ldr	x0, [sp, #40]
    4820:	mov	w1, #0xfffffffa            	// #-6
    4824:	str	w1, [x0]
    4828:	ldr	x0, [sp, #56]
    482c:	cmp	x0, #0x0
    4830:	b.eq	4840 <BZ2_bzRead+0x224>  // b.none
    4834:	ldr	x0, [sp, #56]
    4838:	mov	w1, #0xfffffffa            	// #-6
    483c:	str	w1, [x0, #5096]
    4840:	mov	w0, #0x0                   	// #0
    4844:	b	49e4 <BZ2_bzRead+0x3c8>
    4848:	ldr	x0, [sp, #56]
    484c:	ldr	w1, [sp, #52]
    4850:	str	w1, [x0, #5008]
    4854:	ldr	x0, [sp, #56]
    4858:	ldr	w0, [x0, #5008]
    485c:	mov	w1, w0
    4860:	ldr	x0, [sp, #56]
    4864:	str	w1, [x0, #5024]
    4868:	ldr	x0, [sp, #56]
    486c:	add	x1, x0, #0x8
    4870:	ldr	x0, [sp, #56]
    4874:	str	x1, [x0, #5016]
    4878:	ldr	x1, [sp, #56]
    487c:	mov	x0, #0x1398                	// #5016
    4880:	add	x0, x1, x0
    4884:	bl	3430 <BZ2_bzDecompress>
    4888:	str	w0, [sp, #48]
    488c:	ldr	w0, [sp, #48]
    4890:	cmp	w0, #0x0
    4894:	b.eq	48dc <BZ2_bzRead+0x2c0>  // b.none
    4898:	ldr	w0, [sp, #48]
    489c:	cmp	w0, #0x4
    48a0:	b.eq	48dc <BZ2_bzRead+0x2c0>  // b.none
    48a4:	ldr	x0, [sp, #40]
    48a8:	cmp	x0, #0x0
    48ac:	b.eq	48bc <BZ2_bzRead+0x2a0>  // b.none
    48b0:	ldr	x0, [sp, #40]
    48b4:	ldr	w1, [sp, #48]
    48b8:	str	w1, [x0]
    48bc:	ldr	x0, [sp, #56]
    48c0:	cmp	x0, #0x0
    48c4:	b.eq	48d4 <BZ2_bzRead+0x2b8>  // b.none
    48c8:	ldr	x0, [sp, #56]
    48cc:	ldr	w1, [sp, #48]
    48d0:	str	w1, [x0, #5096]
    48d4:	mov	w0, #0x0                   	// #0
    48d8:	b	49e4 <BZ2_bzRead+0x3c8>
    48dc:	ldr	w0, [sp, #48]
    48e0:	cmp	w0, #0x0
    48e4:	b.ne	4958 <BZ2_bzRead+0x33c>  // b.any
    48e8:	ldr	x0, [sp, #56]
    48ec:	ldr	x0, [x0]
    48f0:	bl	37ec <myfeof>
    48f4:	and	w0, w0, #0xff
    48f8:	cmp	w0, #0x0
    48fc:	b.eq	4958 <BZ2_bzRead+0x33c>  // b.none
    4900:	ldr	x0, [sp, #56]
    4904:	ldr	w0, [x0, #5024]
    4908:	cmp	w0, #0x0
    490c:	b.ne	4958 <BZ2_bzRead+0x33c>  // b.any
    4910:	ldr	x0, [sp, #56]
    4914:	ldr	w0, [x0, #5048]
    4918:	cmp	w0, #0x0
    491c:	b.eq	4958 <BZ2_bzRead+0x33c>  // b.none
    4920:	ldr	x0, [sp, #40]
    4924:	cmp	x0, #0x0
    4928:	b.eq	4938 <BZ2_bzRead+0x31c>  // b.none
    492c:	ldr	x0, [sp, #40]
    4930:	mov	w1, #0xfffffff9            	// #-7
    4934:	str	w1, [x0]
    4938:	ldr	x0, [sp, #56]
    493c:	cmp	x0, #0x0
    4940:	b.eq	4950 <BZ2_bzRead+0x334>  // b.none
    4944:	ldr	x0, [sp, #56]
    4948:	mov	w1, #0xfffffff9            	// #-7
    494c:	str	w1, [x0, #5096]
    4950:	mov	w0, #0x0                   	// #0
    4954:	b	49e4 <BZ2_bzRead+0x3c8>
    4958:	ldr	w0, [sp, #48]
    495c:	cmp	w0, #0x4
    4960:	b.ne	49a8 <BZ2_bzRead+0x38c>  // b.any
    4964:	ldr	x0, [sp, #40]
    4968:	cmp	x0, #0x0
    496c:	b.eq	497c <BZ2_bzRead+0x360>  // b.none
    4970:	ldr	x0, [sp, #40]
    4974:	mov	w1, #0x4                   	// #4
    4978:	str	w1, [x0]
    497c:	ldr	x0, [sp, #56]
    4980:	cmp	x0, #0x0
    4984:	b.eq	4994 <BZ2_bzRead+0x378>  // b.none
    4988:	ldr	x0, [sp, #56]
    498c:	mov	w1, #0x4                   	// #4
    4990:	str	w1, [x0, #5096]
    4994:	ldr	w1, [sp, #20]
    4998:	ldr	x0, [sp, #56]
    499c:	ldr	w0, [x0, #5048]
    49a0:	sub	w0, w1, w0
    49a4:	b	49e4 <BZ2_bzRead+0x3c8>
    49a8:	ldr	x0, [sp, #56]
    49ac:	ldr	w0, [x0, #5048]
    49b0:	cmp	w0, #0x0
    49b4:	b.ne	4760 <BZ2_bzRead+0x144>  // b.any
    49b8:	ldr	x0, [sp, #40]
    49bc:	cmp	x0, #0x0
    49c0:	b.eq	49cc <BZ2_bzRead+0x3b0>  // b.none
    49c4:	ldr	x0, [sp, #40]
    49c8:	str	wzr, [x0]
    49cc:	ldr	x0, [sp, #56]
    49d0:	cmp	x0, #0x0
    49d4:	b.eq	49e0 <BZ2_bzRead+0x3c4>  // b.none
    49d8:	ldr	x0, [sp, #56]
    49dc:	str	wzr, [x0, #5096]
    49e0:	ldr	w0, [sp, #20]
    49e4:	ldp	x29, x30, [sp], #64
    49e8:	ret

00000000000049ec <BZ2_bzReadGetUnused>:
    49ec:	sub	sp, sp, #0x30
    49f0:	str	x0, [sp, #24]
    49f4:	str	x1, [sp, #16]
    49f8:	str	x2, [sp, #8]
    49fc:	str	x3, [sp]
    4a00:	ldr	x0, [sp, #16]
    4a04:	str	x0, [sp, #40]
    4a08:	ldr	x0, [sp, #40]
    4a0c:	cmp	x0, #0x0
    4a10:	b.ne	4a48 <BZ2_bzReadGetUnused+0x5c>  // b.any
    4a14:	ldr	x0, [sp, #24]
    4a18:	cmp	x0, #0x0
    4a1c:	b.eq	4a2c <BZ2_bzReadGetUnused+0x40>  // b.none
    4a20:	ldr	x0, [sp, #24]
    4a24:	mov	w1, #0xfffffffe            	// #-2
    4a28:	str	w1, [x0]
    4a2c:	ldr	x0, [sp, #40]
    4a30:	cmp	x0, #0x0
    4a34:	b.eq	4b28 <BZ2_bzReadGetUnused+0x13c>  // b.none
    4a38:	ldr	x0, [sp, #40]
    4a3c:	mov	w1, #0xfffffffe            	// #-2
    4a40:	str	w1, [x0, #5096]
    4a44:	b	4b28 <BZ2_bzReadGetUnused+0x13c>
    4a48:	ldr	x0, [sp, #40]
    4a4c:	ldr	w0, [x0, #5096]
    4a50:	cmp	w0, #0x4
    4a54:	b.eq	4a8c <BZ2_bzReadGetUnused+0xa0>  // b.none
    4a58:	ldr	x0, [sp, #24]
    4a5c:	cmp	x0, #0x0
    4a60:	b.eq	4a70 <BZ2_bzReadGetUnused+0x84>  // b.none
    4a64:	ldr	x0, [sp, #24]
    4a68:	mov	w1, #0xffffffff            	// #-1
    4a6c:	str	w1, [x0]
    4a70:	ldr	x0, [sp, #40]
    4a74:	cmp	x0, #0x0
    4a78:	b.eq	4b30 <BZ2_bzReadGetUnused+0x144>  // b.none
    4a7c:	ldr	x0, [sp, #40]
    4a80:	mov	w1, #0xffffffff            	// #-1
    4a84:	str	w1, [x0, #5096]
    4a88:	b	4b30 <BZ2_bzReadGetUnused+0x144>
    4a8c:	ldr	x0, [sp, #8]
    4a90:	cmp	x0, #0x0
    4a94:	b.eq	4aa4 <BZ2_bzReadGetUnused+0xb8>  // b.none
    4a98:	ldr	x0, [sp]
    4a9c:	cmp	x0, #0x0
    4aa0:	b.ne	4ad8 <BZ2_bzReadGetUnused+0xec>  // b.any
    4aa4:	ldr	x0, [sp, #24]
    4aa8:	cmp	x0, #0x0
    4aac:	b.eq	4abc <BZ2_bzReadGetUnused+0xd0>  // b.none
    4ab0:	ldr	x0, [sp, #24]
    4ab4:	mov	w1, #0xfffffffe            	// #-2
    4ab8:	str	w1, [x0]
    4abc:	ldr	x0, [sp, #40]
    4ac0:	cmp	x0, #0x0
    4ac4:	b.eq	4b38 <BZ2_bzReadGetUnused+0x14c>  // b.none
    4ac8:	ldr	x0, [sp, #40]
    4acc:	mov	w1, #0xfffffffe            	// #-2
    4ad0:	str	w1, [x0, #5096]
    4ad4:	b	4b38 <BZ2_bzReadGetUnused+0x14c>
    4ad8:	ldr	x0, [sp, #24]
    4adc:	cmp	x0, #0x0
    4ae0:	b.eq	4aec <BZ2_bzReadGetUnused+0x100>  // b.none
    4ae4:	ldr	x0, [sp, #24]
    4ae8:	str	wzr, [x0]
    4aec:	ldr	x0, [sp, #40]
    4af0:	cmp	x0, #0x0
    4af4:	b.eq	4b00 <BZ2_bzReadGetUnused+0x114>  // b.none
    4af8:	ldr	x0, [sp, #40]
    4afc:	str	wzr, [x0, #5096]
    4b00:	ldr	x0, [sp, #40]
    4b04:	ldr	w0, [x0, #5024]
    4b08:	mov	w1, w0
    4b0c:	ldr	x0, [sp]
    4b10:	str	w1, [x0]
    4b14:	ldr	x0, [sp, #40]
    4b18:	ldr	x1, [x0, #5016]
    4b1c:	ldr	x0, [sp, #8]
    4b20:	str	x1, [x0]
    4b24:	b	4b3c <BZ2_bzReadGetUnused+0x150>
    4b28:	nop
    4b2c:	b	4b3c <BZ2_bzReadGetUnused+0x150>
    4b30:	nop
    4b34:	b	4b3c <BZ2_bzReadGetUnused+0x150>
    4b38:	nop
    4b3c:	add	sp, sp, #0x30
    4b40:	ret

0000000000004b44 <BZ2_bzBuffToBuffCompress>:
    4b44:	stp	x29, x30, [sp, #-160]!
    4b48:	mov	x29, sp
    4b4c:	str	x0, [sp, #56]
    4b50:	str	x1, [sp, #48]
    4b54:	str	x2, [sp, #40]
    4b58:	str	w3, [sp, #36]
    4b5c:	str	w4, [sp, #32]
    4b60:	str	w5, [sp, #28]
    4b64:	str	w6, [sp, #24]
    4b68:	ldr	x0, [sp, #56]
    4b6c:	cmp	x0, #0x0
    4b70:	b.eq	4bd4 <BZ2_bzBuffToBuffCompress+0x90>  // b.none
    4b74:	ldr	x0, [sp, #48]
    4b78:	cmp	x0, #0x0
    4b7c:	b.eq	4bd4 <BZ2_bzBuffToBuffCompress+0x90>  // b.none
    4b80:	ldr	x0, [sp, #40]
    4b84:	cmp	x0, #0x0
    4b88:	b.eq	4bd4 <BZ2_bzBuffToBuffCompress+0x90>  // b.none
    4b8c:	ldr	w0, [sp, #32]
    4b90:	cmp	w0, #0x0
    4b94:	b.le	4bd4 <BZ2_bzBuffToBuffCompress+0x90>
    4b98:	ldr	w0, [sp, #32]
    4b9c:	cmp	w0, #0x9
    4ba0:	b.gt	4bd4 <BZ2_bzBuffToBuffCompress+0x90>
    4ba4:	ldr	w0, [sp, #28]
    4ba8:	cmp	w0, #0x0
    4bac:	b.lt	4bd4 <BZ2_bzBuffToBuffCompress+0x90>  // b.tstop
    4bb0:	ldr	w0, [sp, #28]
    4bb4:	cmp	w0, #0x4
    4bb8:	b.gt	4bd4 <BZ2_bzBuffToBuffCompress+0x90>
    4bbc:	ldr	w0, [sp, #24]
    4bc0:	cmp	w0, #0x0
    4bc4:	b.lt	4bd4 <BZ2_bzBuffToBuffCompress+0x90>  // b.tstop
    4bc8:	ldr	w0, [sp, #24]
    4bcc:	cmp	w0, #0xfa
    4bd0:	b.le	4bdc <BZ2_bzBuffToBuffCompress+0x98>
    4bd4:	mov	w0, #0xfffffffe            	// #-2
    4bd8:	b	4cc0 <BZ2_bzBuffToBuffCompress+0x17c>
    4bdc:	ldr	w0, [sp, #24]
    4be0:	cmp	w0, #0x0
    4be4:	b.ne	4bf0 <BZ2_bzBuffToBuffCompress+0xac>  // b.any
    4be8:	mov	w0, #0x1e                  	// #30
    4bec:	str	w0, [sp, #24]
    4bf0:	str	xzr, [sp, #128]
    4bf4:	str	xzr, [sp, #136]
    4bf8:	str	xzr, [sp, #144]
    4bfc:	add	x0, sp, #0x48
    4c00:	ldr	w3, [sp, #24]
    4c04:	ldr	w2, [sp, #28]
    4c08:	ldr	w1, [sp, #32]
    4c0c:	bl	1c0 <BZ2_bzCompressInit>
    4c10:	str	w0, [sp, #156]
    4c14:	ldr	w0, [sp, #156]
    4c18:	cmp	w0, #0x0
    4c1c:	b.eq	4c28 <BZ2_bzBuffToBuffCompress+0xe4>  // b.none
    4c20:	ldr	w0, [sp, #156]
    4c24:	b	4cc0 <BZ2_bzBuffToBuffCompress+0x17c>
    4c28:	ldr	x0, [sp, #40]
    4c2c:	str	x0, [sp, #72]
    4c30:	ldr	x0, [sp, #56]
    4c34:	str	x0, [sp, #96]
    4c38:	ldr	w0, [sp, #36]
    4c3c:	str	w0, [sp, #80]
    4c40:	ldr	x0, [sp, #48]
    4c44:	ldr	w0, [x0]
    4c48:	str	w0, [sp, #104]
    4c4c:	add	x0, sp, #0x48
    4c50:	mov	w1, #0x2                   	// #2
    4c54:	bl	1018 <BZ2_bzCompress>
    4c58:	str	w0, [sp, #156]
    4c5c:	ldr	w0, [sp, #156]
    4c60:	cmp	w0, #0x3
    4c64:	b.eq	4c9c <BZ2_bzBuffToBuffCompress+0x158>  // b.none
    4c68:	ldr	w0, [sp, #156]
    4c6c:	cmp	w0, #0x4
    4c70:	b.ne	4cb0 <BZ2_bzBuffToBuffCompress+0x16c>  // b.any
    4c74:	ldr	x0, [sp, #48]
    4c78:	ldr	w1, [x0]
    4c7c:	ldr	w0, [sp, #104]
    4c80:	sub	w1, w1, w0
    4c84:	ldr	x0, [sp, #48]
    4c88:	str	w1, [x0]
    4c8c:	add	x0, sp, #0x48
    4c90:	bl	12ac <BZ2_bzCompressEnd>
    4c94:	mov	w0, #0x0                   	// #0
    4c98:	b	4cc0 <BZ2_bzBuffToBuffCompress+0x17c>
    4c9c:	nop
    4ca0:	add	x0, sp, #0x48
    4ca4:	bl	12ac <BZ2_bzCompressEnd>
    4ca8:	mov	w0, #0xfffffff8            	// #-8
    4cac:	b	4cc0 <BZ2_bzBuffToBuffCompress+0x17c>
    4cb0:	nop
    4cb4:	add	x0, sp, #0x48
    4cb8:	bl	12ac <BZ2_bzCompressEnd>
    4cbc:	ldr	w0, [sp, #156]
    4cc0:	ldp	x29, x30, [sp], #160
    4cc4:	ret

0000000000004cc8 <BZ2_bzBuffToBuffDecompress>:
    4cc8:	stp	x29, x30, [sp, #-160]!
    4ccc:	mov	x29, sp
    4cd0:	str	x0, [sp, #56]
    4cd4:	str	x1, [sp, #48]
    4cd8:	str	x2, [sp, #40]
    4cdc:	str	w3, [sp, #36]
    4ce0:	str	w4, [sp, #32]
    4ce4:	str	w5, [sp, #28]
    4ce8:	ldr	x0, [sp, #56]
    4cec:	cmp	x0, #0x0
    4cf0:	b.eq	4d3c <BZ2_bzBuffToBuffDecompress+0x74>  // b.none
    4cf4:	ldr	x0, [sp, #48]
    4cf8:	cmp	x0, #0x0
    4cfc:	b.eq	4d3c <BZ2_bzBuffToBuffDecompress+0x74>  // b.none
    4d00:	ldr	x0, [sp, #40]
    4d04:	cmp	x0, #0x0
    4d08:	b.eq	4d3c <BZ2_bzBuffToBuffDecompress+0x74>  // b.none
    4d0c:	ldr	w0, [sp, #32]
    4d10:	cmp	w0, #0x0
    4d14:	b.eq	4d24 <BZ2_bzBuffToBuffDecompress+0x5c>  // b.none
    4d18:	ldr	w0, [sp, #32]
    4d1c:	cmp	w0, #0x1
    4d20:	b.ne	4d3c <BZ2_bzBuffToBuffDecompress+0x74>  // b.any
    4d24:	ldr	w0, [sp, #28]
    4d28:	cmp	w0, #0x0
    4d2c:	b.lt	4d3c <BZ2_bzBuffToBuffDecompress+0x74>  // b.tstop
    4d30:	ldr	w0, [sp, #28]
    4d34:	cmp	w0, #0x4
    4d38:	b.le	4d44 <BZ2_bzBuffToBuffDecompress+0x7c>
    4d3c:	mov	w0, #0xfffffffe            	// #-2
    4d40:	b	4e28 <BZ2_bzBuffToBuffDecompress+0x160>
    4d44:	str	xzr, [sp, #128]
    4d48:	str	xzr, [sp, #136]
    4d4c:	str	xzr, [sp, #144]
    4d50:	add	x0, sp, #0x48
    4d54:	ldr	w2, [sp, #32]
    4d58:	ldr	w1, [sp, #28]
    4d5c:	bl	13dc <BZ2_bzDecompressInit>
    4d60:	str	w0, [sp, #156]
    4d64:	ldr	w0, [sp, #156]
    4d68:	cmp	w0, #0x0
    4d6c:	b.eq	4d78 <BZ2_bzBuffToBuffDecompress+0xb0>  // b.none
    4d70:	ldr	w0, [sp, #156]
    4d74:	b	4e28 <BZ2_bzBuffToBuffDecompress+0x160>
    4d78:	ldr	x0, [sp, #40]
    4d7c:	str	x0, [sp, #72]
    4d80:	ldr	x0, [sp, #56]
    4d84:	str	x0, [sp, #96]
    4d88:	ldr	w0, [sp, #36]
    4d8c:	str	w0, [sp, #80]
    4d90:	ldr	x0, [sp, #48]
    4d94:	ldr	w0, [x0]
    4d98:	str	w0, [sp, #104]
    4d9c:	add	x0, sp, #0x48
    4da0:	bl	3430 <BZ2_bzDecompress>
    4da4:	str	w0, [sp, #156]
    4da8:	ldr	w0, [sp, #156]
    4dac:	cmp	w0, #0x0
    4db0:	b.eq	4de8 <BZ2_bzBuffToBuffDecompress+0x120>  // b.none
    4db4:	ldr	w0, [sp, #156]
    4db8:	cmp	w0, #0x4
    4dbc:	b.ne	4e18 <BZ2_bzBuffToBuffDecompress+0x150>  // b.any
    4dc0:	ldr	x0, [sp, #48]
    4dc4:	ldr	w1, [x0]
    4dc8:	ldr	w0, [sp, #104]
    4dcc:	sub	w1, w1, w0
    4dd0:	ldr	x0, [sp, #48]
    4dd4:	str	w1, [x0]
    4dd8:	add	x0, sp, #0x48
    4ddc:	bl	36bc <BZ2_bzDecompressEnd>
    4de0:	mov	w0, #0x0                   	// #0
    4de4:	b	4e28 <BZ2_bzBuffToBuffDecompress+0x160>
    4de8:	nop
    4dec:	ldr	w0, [sp, #104]
    4df0:	cmp	w0, #0x0
    4df4:	b.eq	4e08 <BZ2_bzBuffToBuffDecompress+0x140>  // b.none
    4df8:	add	x0, sp, #0x48
    4dfc:	bl	36bc <BZ2_bzDecompressEnd>
    4e00:	mov	w0, #0xfffffff9            	// #-7
    4e04:	b	4e28 <BZ2_bzBuffToBuffDecompress+0x160>
    4e08:	add	x0, sp, #0x48
    4e0c:	bl	36bc <BZ2_bzDecompressEnd>
    4e10:	mov	w0, #0xfffffff8            	// #-8
    4e14:	b	4e28 <BZ2_bzBuffToBuffDecompress+0x160>
    4e18:	nop
    4e1c:	add	x0, sp, #0x48
    4e20:	bl	36bc <BZ2_bzDecompressEnd>
    4e24:	ldr	w0, [sp, #156]
    4e28:	ldp	x29, x30, [sp], #160
    4e2c:	ret

0000000000004e30 <BZ2_bzlibVersion>:
    4e30:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
    4e34:	add	x0, x0, #0x0
    4e38:	ret

0000000000004e3c <bzopen_or_bzdopen>:
    4e3c:	mov	x12, #0x1400                	// #5120
    4e40:	sub	sp, sp, x12
    4e44:	stp	x29, x30, [sp]
    4e48:	mov	x29, sp
    4e4c:	str	x0, [sp, #40]
    4e50:	str	w1, [sp, #36]
    4e54:	str	x2, [sp, #24]
    4e58:	str	w3, [sp, #32]
    4e5c:	mov	w0, #0x9                   	// #9
    4e60:	str	w0, [sp, #5116]
    4e64:	str	wzr, [sp, #5112]
    4e68:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
    4e6c:	add	x0, x0, #0x0
    4e70:	ldrb	w0, [x0]
    4e74:	strb	w0, [sp, #56]
    4e78:	stur	xzr, [sp, #57]
    4e7c:	strb	wzr, [sp, #65]
    4e80:	str	xzr, [sp, #5104]
    4e84:	str	xzr, [sp, #5096]
    4e88:	str	wzr, [sp, #5088]
    4e8c:	mov	w0, #0x1e                  	// #30
    4e90:	str	w0, [sp, #5084]
    4e94:	str	wzr, [sp, #5092]
    4e98:	str	wzr, [sp, #5080]
    4e9c:	ldr	x0, [sp, #24]
    4ea0:	cmp	x0, #0x0
    4ea4:	b.ne	4f44 <bzopen_or_bzdopen+0x108>  // b.any
    4ea8:	mov	x0, #0x0                   	// #0
    4eac:	b	5108 <bzopen_or_bzdopen+0x2cc>
    4eb0:	ldr	x0, [sp, #24]
    4eb4:	ldrb	w0, [x0]
    4eb8:	cmp	w0, #0x77
    4ebc:	b.eq	4ee4 <bzopen_or_bzdopen+0xa8>  // b.none
    4ec0:	cmp	w0, #0x77
    4ec4:	b.gt	4efc <bzopen_or_bzdopen+0xc0>
    4ec8:	cmp	w0, #0x72
    4ecc:	b.eq	4edc <bzopen_or_bzdopen+0xa0>  // b.none
    4ed0:	cmp	w0, #0x73
    4ed4:	b.eq	4ef0 <bzopen_or_bzdopen+0xb4>  // b.none
    4ed8:	b	4efc <bzopen_or_bzdopen+0xc0>
    4edc:	str	wzr, [sp, #5112]
    4ee0:	b	4f38 <bzopen_or_bzdopen+0xfc>
    4ee4:	mov	w0, #0x1                   	// #1
    4ee8:	str	w0, [sp, #5112]
    4eec:	b	4f38 <bzopen_or_bzdopen+0xfc>
    4ef0:	mov	w0, #0x1                   	// #1
    4ef4:	str	w0, [sp, #5092]
    4ef8:	b	4f38 <bzopen_or_bzdopen+0xfc>
    4efc:	bl	0 <__ctype_b_loc>
    4f00:	ldr	x1, [x0]
    4f04:	ldr	x0, [sp, #24]
    4f08:	ldrb	w0, [x0]
    4f0c:	and	x0, x0, #0xff
    4f10:	lsl	x0, x0, #1
    4f14:	add	x0, x1, x0
    4f18:	ldrh	w0, [x0]
    4f1c:	and	w0, w0, #0x800
    4f20:	cmp	w0, #0x0
    4f24:	b.eq	4f38 <bzopen_or_bzdopen+0xfc>  // b.none
    4f28:	ldr	x0, [sp, #24]
    4f2c:	ldrb	w0, [x0]
    4f30:	sub	w0, w0, #0x30
    4f34:	str	w0, [sp, #5116]
    4f38:	ldr	x0, [sp, #24]
    4f3c:	add	x0, x0, #0x1
    4f40:	str	x0, [sp, #24]
    4f44:	ldr	x0, [sp, #24]
    4f48:	ldrb	w0, [x0]
    4f4c:	cmp	w0, #0x0
    4f50:	b.ne	4eb0 <bzopen_or_bzdopen+0x74>  // b.any
    4f54:	ldr	w0, [sp, #5112]
    4f58:	cmp	w0, #0x0
    4f5c:	b.eq	4f6c <bzopen_or_bzdopen+0x130>  // b.none
    4f60:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
    4f64:	add	x0, x0, #0x0
    4f68:	b	4f74 <bzopen_or_bzdopen+0x138>
    4f6c:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
    4f70:	add	x0, x0, #0x0
    4f74:	add	x2, sp, #0x38
    4f78:	mov	x1, x0
    4f7c:	mov	x0, x2
    4f80:	bl	0 <strcat>
    4f84:	add	x0, sp, #0x38
    4f88:	bl	0 <strlen>
    4f8c:	mov	x1, x0
    4f90:	add	x0, sp, #0x38
    4f94:	add	x0, x0, x1
    4f98:	mov	w1, #0x62                  	// #98
    4f9c:	strh	w1, [x0]
    4fa0:	ldr	w0, [sp, #32]
    4fa4:	cmp	w0, #0x0
    4fa8:	b.ne	5010 <bzopen_or_bzdopen+0x1d4>  // b.any
    4fac:	ldr	x0, [sp, #40]
    4fb0:	cmp	x0, #0x0
    4fb4:	b.eq	4fc8 <bzopen_or_bzdopen+0x18c>  // b.none
    4fb8:	ldr	x0, [sp, #40]
    4fbc:	ldrb	w0, [x0]
    4fc0:	cmp	w0, #0x0
    4fc4:	b.ne	4ff8 <bzopen_or_bzdopen+0x1bc>  // b.any
    4fc8:	ldr	w0, [sp, #5112]
    4fcc:	cmp	w0, #0x0
    4fd0:	b.eq	4fe4 <bzopen_or_bzdopen+0x1a8>  // b.none
    4fd4:	adrp	x0, 0 <stdout>
    4fd8:	add	x0, x0, #0x0
    4fdc:	ldr	x0, [x0]
    4fe0:	b	4ff0 <bzopen_or_bzdopen+0x1b4>
    4fe4:	adrp	x0, 0 <stdin>
    4fe8:	add	x0, x0, #0x0
    4fec:	ldr	x0, [x0]
    4ff0:	str	x0, [sp, #5104]
    4ff4:	b	5024 <bzopen_or_bzdopen+0x1e8>
    4ff8:	add	x0, sp, #0x38
    4ffc:	mov	x1, x0
    5000:	ldr	x0, [sp, #40]
    5004:	bl	0 <fopen64>
    5008:	str	x0, [sp, #5104]
    500c:	b	5024 <bzopen_or_bzdopen+0x1e8>
    5010:	add	x0, sp, #0x38
    5014:	mov	x1, x0
    5018:	ldr	w0, [sp, #36]
    501c:	bl	0 <fdopen>
    5020:	str	x0, [sp, #5104]
    5024:	ldr	x0, [sp, #5104]
    5028:	cmp	x0, #0x0
    502c:	b.ne	5038 <bzopen_or_bzdopen+0x1fc>  // b.any
    5030:	mov	x0, #0x0                   	// #0
    5034:	b	5108 <bzopen_or_bzdopen+0x2cc>
    5038:	ldr	w0, [sp, #5112]
    503c:	cmp	w0, #0x0
    5040:	b.eq	5090 <bzopen_or_bzdopen+0x254>  // b.none
    5044:	ldr	w0, [sp, #5116]
    5048:	cmp	w0, #0x0
    504c:	b.gt	5058 <bzopen_or_bzdopen+0x21c>
    5050:	mov	w0, #0x1                   	// #1
    5054:	str	w0, [sp, #5116]
    5058:	ldr	w0, [sp, #5116]
    505c:	cmp	w0, #0x9
    5060:	b.le	506c <bzopen_or_bzdopen+0x230>
    5064:	mov	w0, #0x9                   	// #9
    5068:	str	w0, [sp, #5116]
    506c:	add	x0, sp, #0x1, lsl #12
    5070:	add	x0, x0, #0x3d4
    5074:	ldr	w4, [sp, #5084]
    5078:	ldr	w3, [sp, #5088]
    507c:	ldr	w2, [sp, #5116]
    5080:	ldr	x1, [sp, #5104]
    5084:	bl	3830 <BZ2_bzWriteOpen>
    5088:	str	x0, [sp, #5096]
    508c:	b	50b8 <bzopen_or_bzdopen+0x27c>
    5090:	add	x1, sp, #0x48
    5094:	add	x0, sp, #0x1, lsl #12
    5098:	add	x0, x0, #0x3d4
    509c:	ldr	w5, [sp, #5080]
    50a0:	mov	x4, x1
    50a4:	ldr	w3, [sp, #5092]
    50a8:	ldr	w2, [sp, #5088]
    50ac:	ldr	x1, [sp, #5104]
    50b0:	bl	420c <BZ2_bzReadOpen>
    50b4:	str	x0, [sp, #5096]
    50b8:	ldr	x0, [sp, #5096]
    50bc:	cmp	x0, #0x0
    50c0:	b.ne	5104 <bzopen_or_bzdopen+0x2c8>  // b.any
    50c4:	adrp	x0, 0 <stdin>
    50c8:	add	x0, x0, #0x0
    50cc:	ldr	x0, [x0]
    50d0:	ldr	x1, [sp, #5104]
    50d4:	cmp	x1, x0
    50d8:	b.eq	50fc <bzopen_or_bzdopen+0x2c0>  // b.none
    50dc:	adrp	x0, 0 <stdout>
    50e0:	add	x0, x0, #0x0
    50e4:	ldr	x0, [x0]
    50e8:	ldr	x1, [sp, #5104]
    50ec:	cmp	x1, x0
    50f0:	b.eq	50fc <bzopen_or_bzdopen+0x2c0>  // b.none
    50f4:	ldr	x0, [sp, #5104]
    50f8:	bl	0 <fclose>
    50fc:	mov	x0, #0x0                   	// #0
    5100:	b	5108 <bzopen_or_bzdopen+0x2cc>
    5104:	ldr	x0, [sp, #5096]
    5108:	ldp	x29, x30, [sp]
    510c:	mov	x12, #0x1400                	// #5120
    5110:	add	sp, sp, x12
    5114:	ret

0000000000005118 <BZ2_bzopen>:
    5118:	stp	x29, x30, [sp, #-32]!
    511c:	mov	x29, sp
    5120:	str	x0, [sp, #24]
    5124:	str	x1, [sp, #16]
    5128:	mov	w3, #0x0                   	// #0
    512c:	ldr	x2, [sp, #16]
    5130:	mov	w1, #0xffffffff            	// #-1
    5134:	ldr	x0, [sp, #24]
    5138:	bl	4e3c <bzopen_or_bzdopen>
    513c:	ldp	x29, x30, [sp], #32
    5140:	ret

0000000000005144 <BZ2_bzdopen>:
    5144:	stp	x29, x30, [sp, #-32]!
    5148:	mov	x29, sp
    514c:	str	w0, [sp, #28]
    5150:	str	x1, [sp, #16]
    5154:	mov	w3, #0x1                   	// #1
    5158:	ldr	x2, [sp, #16]
    515c:	ldr	w1, [sp, #28]
    5160:	mov	x0, #0x0                   	// #0
    5164:	bl	4e3c <bzopen_or_bzdopen>
    5168:	ldp	x29, x30, [sp], #32
    516c:	ret

0000000000005170 <BZ2_bzread>:
    5170:	stp	x29, x30, [sp, #-64]!
    5174:	mov	x29, sp
    5178:	str	x0, [sp, #40]
    517c:	str	x1, [sp, #32]
    5180:	str	w2, [sp, #28]
    5184:	ldr	x0, [sp, #40]
    5188:	ldr	w0, [x0, #5096]
    518c:	cmp	w0, #0x4
    5190:	b.ne	519c <BZ2_bzread+0x2c>  // b.any
    5194:	mov	w0, #0x0                   	// #0
    5198:	b	51d8 <BZ2_bzread+0x68>
    519c:	add	x0, sp, #0x38
    51a0:	ldr	w3, [sp, #28]
    51a4:	ldr	x2, [sp, #32]
    51a8:	ldr	x1, [sp, #40]
    51ac:	bl	461c <BZ2_bzRead>
    51b0:	str	w0, [sp, #60]
    51b4:	ldr	w0, [sp, #56]
    51b8:	cmp	w0, #0x0
    51bc:	b.eq	51cc <BZ2_bzread+0x5c>  // b.none
    51c0:	ldr	w0, [sp, #56]
    51c4:	cmp	w0, #0x4
    51c8:	b.ne	51d4 <BZ2_bzread+0x64>  // b.any
    51cc:	ldr	w0, [sp, #60]
    51d0:	b	51d8 <BZ2_bzread+0x68>
    51d4:	mov	w0, #0xffffffff            	// #-1
    51d8:	ldp	x29, x30, [sp], #64
    51dc:	ret

00000000000051e0 <BZ2_bzwrite>:
    51e0:	stp	x29, x30, [sp, #-64]!
    51e4:	mov	x29, sp
    51e8:	str	x0, [sp, #40]
    51ec:	str	x1, [sp, #32]
    51f0:	str	w2, [sp, #28]
    51f4:	add	x0, sp, #0x3c
    51f8:	ldr	w3, [sp, #28]
    51fc:	ldr	x2, [sp, #32]
    5200:	ldr	x1, [sp, #40]
    5204:	bl	3ab0 <BZ2_bzWrite>
    5208:	ldr	w0, [sp, #60]
    520c:	cmp	w0, #0x0
    5210:	b.ne	521c <BZ2_bzwrite+0x3c>  // b.any
    5214:	ldr	w0, [sp, #28]
    5218:	b	5220 <BZ2_bzwrite+0x40>
    521c:	mov	w0, #0xffffffff            	// #-1
    5220:	ldp	x29, x30, [sp], #64
    5224:	ret

0000000000005228 <BZ2_bzflush>:
    5228:	sub	sp, sp, #0x10
    522c:	str	x0, [sp, #8]
    5230:	mov	w0, #0x0                   	// #0
    5234:	add	sp, sp, #0x10
    5238:	ret

000000000000523c <BZ2_bzclose>:
    523c:	stp	x29, x30, [sp, #-48]!
    5240:	mov	x29, sp
    5244:	str	x0, [sp, #24]
    5248:	ldr	x0, [sp, #24]
    524c:	cmp	x0, #0x0
    5250:	b.eq	52fc <BZ2_bzclose+0xc0>  // b.none
    5254:	ldr	x0, [sp, #24]
    5258:	ldr	x0, [x0]
    525c:	str	x0, [sp, #40]
    5260:	ldr	x0, [sp, #24]
    5264:	add	x0, x0, #0x1, lsl #12
    5268:	ldrb	w0, [x0, #916]
    526c:	cmp	w0, #0x0
    5270:	b.eq	52b4 <BZ2_bzclose+0x78>  // b.none
    5274:	add	x0, sp, #0x24
    5278:	mov	x4, #0x0                   	// #0
    527c:	mov	x3, #0x0                   	// #0
    5280:	mov	w2, #0x0                   	// #0
    5284:	ldr	x1, [sp, #24]
    5288:	bl	3dc8 <BZ2_bzWriteClose>
    528c:	ldr	w0, [sp, #36]
    5290:	cmp	w0, #0x0
    5294:	b.eq	52c0 <BZ2_bzclose+0x84>  // b.none
    5298:	mov	x4, #0x0                   	// #0
    529c:	mov	x3, #0x0                   	// #0
    52a0:	mov	w2, #0x1                   	// #1
    52a4:	ldr	x1, [sp, #24]
    52a8:	mov	x0, #0x0                   	// #0
    52ac:	bl	3dc8 <BZ2_bzWriteClose>
    52b0:	b	52c0 <BZ2_bzclose+0x84>
    52b4:	add	x0, sp, #0x24
    52b8:	ldr	x1, [sp, #24]
    52bc:	bl	4518 <BZ2_bzReadClose>
    52c0:	adrp	x0, 0 <stdin>
    52c4:	add	x0, x0, #0x0
    52c8:	ldr	x0, [x0]
    52cc:	ldr	x1, [sp, #40]
    52d0:	cmp	x1, x0
    52d4:	b.eq	5300 <BZ2_bzclose+0xc4>  // b.none
    52d8:	adrp	x0, 0 <stdout>
    52dc:	add	x0, x0, #0x0
    52e0:	ldr	x0, [x0]
    52e4:	ldr	x1, [sp, #40]
    52e8:	cmp	x1, x0
    52ec:	b.eq	5300 <BZ2_bzclose+0xc4>  // b.none
    52f0:	ldr	x0, [sp, #40]
    52f4:	bl	0 <fclose>
    52f8:	b	5300 <BZ2_bzclose+0xc4>
    52fc:	nop
    5300:	ldp	x29, x30, [sp], #48
    5304:	ret

0000000000005308 <BZ2_bzerror>:
    5308:	sub	sp, sp, #0x20
    530c:	str	x0, [sp, #8]
    5310:	str	x1, [sp]
    5314:	ldr	x0, [sp, #8]
    5318:	ldr	w0, [x0, #5096]
    531c:	str	w0, [sp, #28]
    5320:	ldr	w0, [sp, #28]
    5324:	cmp	w0, #0x0
    5328:	b.le	5330 <BZ2_bzerror+0x28>
    532c:	str	wzr, [sp, #28]
    5330:	ldr	x0, [sp]
    5334:	ldr	w1, [sp, #28]
    5338:	str	w1, [x0]
    533c:	ldr	w0, [sp, #28]
    5340:	neg	w1, w0
    5344:	adrp	x0, 0 <BZ2_bz__AssertH__fail>
    5348:	add	x0, x0, #0x0
    534c:	sxtw	x1, w1
    5350:	ldr	x0, [x0, x1, lsl #3]
    5354:	add	sp, sp, #0x20
    5358:	ret
