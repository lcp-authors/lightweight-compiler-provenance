
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-dissect_clang_-O1:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000211778 <_start>:
  211778:	mov	x29, #0x0                   	// #0
  21177c:	mov	x30, #0x0                   	// #0
  211780:	mov	x5, x0
  211784:	ldr	x1, [sp]
  211788:	add	x2, sp, #0x8
  21178c:	mov	x6, sp
  211790:	movz	x0, #0x0, lsl #48
  211794:	movk	x0, #0x0, lsl #32
  211798:	movk	x0, #0x21, lsl #16
  21179c:	movk	x0, #0x18dc
  2117a0:	movz	x3, #0x0, lsl #48
  2117a4:	movk	x3, #0x0, lsl #32
  2117a8:	movk	x3, #0x21, lsl #16
  2117ac:	movk	x3, #0x2500
  2117b0:	movz	x4, #0x0, lsl #48
  2117b4:	movk	x4, #0x0, lsl #32
  2117b8:	movk	x4, #0x21, lsl #16
  2117bc:	movk	x4, #0x2580
  2117c0:	bl	2125d0 <__libc_start_main@plt>
  2117c4:	bl	2125e0 <abort@plt>

00000000002117c8 <call_weak_fn>:
  2117c8:	adrp	x0, 222000 <unhexmem_full@plt+0xf820>
  2117cc:	ldr	x0, [x0, #2512]
  2117d0:	cbz	x0, 2117d8 <call_weak_fn+0x10>
  2117d4:	b	2125f0 <__gmon_start__@plt>
  2117d8:	ret

00000000002117dc <deregister_tm_clones>:
  2117dc:	adrp	x0, 232000 <_DYNAMIC+0xf800>
  2117e0:	add	x0, x0, #0xb10
  2117e4:	adrp	x1, 232000 <_DYNAMIC+0xf800>
  2117e8:	add	x1, x1, #0xb10
  2117ec:	cmp	x0, x1
  2117f0:	b.eq	211824 <deregister_tm_clones+0x48>  // b.none
  2117f4:	stp	x29, x30, [sp, #-32]!
  2117f8:	mov	x29, sp
  2117fc:	adrp	x0, 201000 <parse_argv.options-0x550>
  211800:	ldr	x0, [x0, #56]
  211804:	str	x0, [sp, #24]
  211808:	mov	x1, x0
  21180c:	cbz	x1, 21181c <deregister_tm_clones+0x40>
  211810:	adrp	x0, 232000 <_DYNAMIC+0xf800>
  211814:	add	x0, x0, #0xb10
  211818:	blr	x1
  21181c:	ldp	x29, x30, [sp], #32
  211820:	ret
  211824:	ret

0000000000211828 <register_tm_clones>:
  211828:	adrp	x0, 232000 <_DYNAMIC+0xf800>
  21182c:	add	x0, x0, #0xb10
  211830:	adrp	x1, 232000 <_DYNAMIC+0xf800>
  211834:	add	x1, x1, #0xb10
  211838:	sub	x0, x0, x1
  21183c:	lsr	x1, x0, #63
  211840:	add	x0, x1, x0, asr #3
  211844:	cmp	xzr, x0, asr #1
  211848:	b.eq	211880 <register_tm_clones+0x58>  // b.none
  21184c:	stp	x29, x30, [sp, #-32]!
  211850:	mov	x29, sp
  211854:	asr	x1, x0, #1
  211858:	adrp	x0, 201000 <parse_argv.options-0x550>
  21185c:	ldr	x0, [x0, #64]
  211860:	str	x0, [sp, #24]
  211864:	mov	x2, x0
  211868:	cbz	x2, 211878 <register_tm_clones+0x50>
  21186c:	adrp	x0, 232000 <_DYNAMIC+0xf800>
  211870:	add	x0, x0, #0xb10
  211874:	blr	x2
  211878:	ldp	x29, x30, [sp], #32
  21187c:	ret
  211880:	ret

0000000000211884 <__do_global_dtors_aux>:
  211884:	adrp	x0, 232000 <_DYNAMIC+0xf800>
  211888:	ldrb	w0, [x0, #2840]
  21188c:	cbnz	w0, 2118b0 <__do_global_dtors_aux+0x2c>
  211890:	stp	x29, x30, [sp, #-16]!
  211894:	mov	x29, sp
  211898:	bl	2117dc <deregister_tm_clones>
  21189c:	adrp	x0, 232000 <_DYNAMIC+0xf800>
  2118a0:	mov	w1, #0x1                   	// #1
  2118a4:	strb	w1, [x0, #2840]
  2118a8:	ldp	x29, x30, [sp], #16
  2118ac:	ret
  2118b0:	ret

00000000002118b4 <frame_dummy>:
  2118b4:	stp	x29, x30, [sp, #-16]!
  2118b8:	mov	x29, sp
  2118bc:	bl	211828 <register_tm_clones>
  2118c0:	ldp	x29, x30, [sp], #16
  2118c4:	ret

00000000002118c8 <__unique_prefix_static_destructor_wrapper0>:
  2118c8:	stp	x29, x30, [sp, #-16]!
  2118cc:	mov	x29, sp
  2118d0:	bl	211f84 <freep>
  2118d4:	ldp	x29, x30, [sp], #16
  2118d8:	ret

00000000002118dc <main>:
  2118dc:	stp	x29, x30, [sp, #-32]!
  2118e0:	stp	x20, x19, [sp, #16]
  2118e4:	mov	x29, sp
  2118e8:	mov	x19, x1
  2118ec:	mov	w20, w0
  2118f0:	bl	211928 <save_argc_argv>
  2118f4:	mov	w0, w20
  2118f8:	mov	x1, x19
  2118fc:	bl	21193c <run>
  211900:	mov	w19, w0
  211904:	bl	212600 <ask_password_agent_close@plt>
  211908:	bl	212610 <polkit_agent_close@plt>
  21190c:	bl	212620 <pager_close@plt>
  211910:	bl	212630 <mac_selinux_finish@plt>
  211914:	bl	211f24 <static_destruct>
  211918:	lsr	w0, w19, #31
  21191c:	ldp	x20, x19, [sp, #16]
  211920:	ldp	x29, x30, [sp], #32
  211924:	ret

0000000000211928 <save_argc_argv>:
  211928:	adrp	x8, 232000 <_DYNAMIC+0xf800>
  21192c:	adrp	x9, 232000 <_DYNAMIC+0xf800>
  211930:	str	w0, [x8, #2888]
  211934:	str	x1, [x9, #2896]
  211938:	ret

000000000021193c <run>:
  21193c:	sub	sp, sp, #0xc0
  211940:	stp	x29, x30, [sp, #96]
  211944:	stp	x20, x19, [sp, #176]
  211948:	add	x29, sp, #0x60
  21194c:	mov	w20, w0
  211950:	mov	w0, wzr
  211954:	stp	x28, x27, [sp, #112]
  211958:	stp	x26, x25, [sp, #128]
  21195c:	stp	x24, x23, [sp, #144]
  211960:	stp	x22, x21, [sp, #160]
  211964:	mov	x19, x1
  211968:	stp	xzr, xzr, [x29, #-16]
  21196c:	stur	xzr, [x29, #-24]
  211970:	bl	212640 <log_parse_environment_realm@plt>
  211974:	bl	212650 <log_open@plt>
  211978:	mov	w0, w20
  21197c:	mov	x1, x19
  211980:	bl	211ff0 <parse_argv>
  211984:	cmp	w0, #0x1
  211988:	b.lt	211e00 <run+0x4c4>  // b.tstop
  21198c:	adrp	x20, 232000 <_DYNAMIC+0xf800>
  211990:	adrp	x21, 232000 <_DYNAMIC+0xf800>
  211994:	ldr	w8, [x20, #2832]
  211998:	ldr	x0, [x21, #2856]
  21199c:	mov	w9, #0x2                   	// #2
  2119a0:	sub	x2, x29, #0x8
  2119a4:	bic	w1, w9, w8, lsl #1
  2119a8:	bl	212660 <loop_device_make_by_path@plt>
  2119ac:	tbnz	w0, #31, 211a68 <run+0x12c>
  2119b0:	adrp	x22, 232000 <_DYNAMIC+0xf800>
  2119b4:	ldr	x8, [x22, #2848]
  2119b8:	cbnz	x8, 2119d8 <run+0x9c>
  2119bc:	ldr	x0, [x21, #2856]
  2119c0:	adrp	x1, 232000 <_DYNAMIC+0xf800>
  2119c4:	adrp	x2, 232000 <_DYNAMIC+0xf800>
  2119c8:	add	x1, x1, #0xb20
  2119cc:	add	x2, x2, #0xb30
  2119d0:	bl	212670 <root_hash_load@plt>
  2119d4:	tbnz	w0, #31, 211dc0 <run+0x484>
  2119d8:	ldur	x8, [x29, #-8]
  2119dc:	ldr	x1, [x21, #2856]
  2119e0:	adrp	x21, 232000 <_DYNAMIC+0xf800>
  2119e4:	ldr	x2, [x22, #2848]
  2119e8:	ldr	x3, [x21, #2864]
  2119ec:	ldr	w0, [x8]
  2119f0:	ldr	w4, [x20, #2832]
  2119f4:	sub	x5, x29, #0x18
  2119f8:	bl	212680 <dissect_image_and_warn@plt>
  2119fc:	tbnz	w0, #31, 211e00 <run+0x4c4>
  211a00:	adrp	x8, 232000 <_DYNAMIC+0xf800>
  211a04:	ldrb	w8, [x8, #2872]
  211a08:	ldur	x19, [x29, #-24]
  211a0c:	tbz	w8, #0, 211aac <run+0x170>
  211a10:	ldr	x2, [x22, #2848]
  211a14:	ldr	x3, [x21, #2864]
  211a18:	ldr	w4, [x20, #2832]
  211a1c:	sub	x5, x29, #0x10
  211a20:	mov	x0, x19
  211a24:	mov	x1, xzr
  211a28:	bl	212690 <dissected_image_decrypt_interactively@plt>
  211a2c:	tbnz	w0, #31, 211e00 <run+0x4c4>
  211a30:	adrp	x8, 232000 <_DYNAMIC+0xf800>
  211a34:	ldur	x0, [x29, #-24]
  211a38:	ldr	x1, [x8, #2880]
  211a3c:	ldr	w3, [x20, #2832]
  211a40:	mov	w2, #0xffffffff            	// #-1
  211a44:	bl	2126a0 <dissected_image_mount@plt>
  211a48:	tbnz	w0, #31, 211e54 <run+0x518>
  211a4c:	ldur	x0, [x29, #-16]
  211a50:	cbz	x0, 211a5c <run+0x120>
  211a54:	bl	2126b0 <decrypted_image_relinquish@plt>
  211a58:	tbnz	w0, #31, 211ea4 <run+0x568>
  211a5c:	ldur	x0, [x29, #-8]
  211a60:	bl	2126c0 <loop_device_relinquish@plt>
  211a64:	b	211e9c <run+0x560>
  211a68:	mov	w19, w0
  211a6c:	mov	w0, wzr
  211a70:	bl	2126d0 <log_get_max_level_realm@plt>
  211a74:	cmp	w0, #0x3
  211a78:	b.lt	211edc <run+0x5a0>  // b.tstop
  211a7c:	adrp	x2, 201000 <parse_argv.options-0x550>
  211a80:	adrp	x4, 201000 <parse_argv.options-0x550>
  211a84:	adrp	x5, 201000 <parse_argv.options-0x550>
  211a88:	add	x2, x2, #0x4a0
  211a8c:	add	x4, x4, #0x42b
  211a90:	add	x5, x5, #0x324
  211a94:	mov	w0, #0x3                   	// #3
  211a98:	mov	w3, #0xb0                  	// #176
  211a9c:	mov	w1, w19
  211aa0:	bl	2126e0 <log_internal_realm@plt>
  211aa4:	mov	w19, w0
  211aa8:	b	211ee8 <run+0x5ac>
  211aac:	adrp	x23, 201000 <parse_argv.options-0x550>
  211ab0:	adrp	x24, 201000 <parse_argv.options-0x550>
  211ab4:	adrp	x21, 201000 <parse_argv.options-0x550>
  211ab8:	adrp	x26, 201000 <parse_argv.options-0x550>
  211abc:	adrp	x27, 201000 <parse_argv.options-0x550>
  211ac0:	mov	w20, wzr
  211ac4:	mov	w22, #0x30                  	// #48
  211ac8:	add	x23, x23, #0x39d
  211acc:	add	x24, x24, #0x100
  211ad0:	add	x21, x21, #0x3a6
  211ad4:	add	x26, x26, #0x312
  211ad8:	add	x27, x27, #0x2b3
  211adc:	b	211afc <run+0x1c0>
  211ae0:	mov	w0, #0xa                   	// #10
  211ae4:	bl	2126f0 <putchar@plt>
  211ae8:	ldur	x19, [x29, #-24]
  211aec:	add	x22, x22, #0x40
  211af0:	cmp	x22, #0x270
  211af4:	add	w20, w20, #0x1
  211af8:	b.eq	211c48 <run+0x30c>  // b.none
  211afc:	add	x25, x19, x22
  211b00:	ldurb	w8, [x25, #-40]
  211b04:	tbz	w8, #0, 211ae8 <run+0x1ac>
  211b08:	tst	w8, #0x2
  211b0c:	mov	w0, w20
  211b10:	csel	x28, x24, x23, eq  // eq = none
  211b14:	bl	212700 <partition_designator_to_string@plt>
  211b18:	mov	x2, x0
  211b1c:	mov	x0, x21
  211b20:	mov	x1, x28
  211b24:	bl	212710 <printf@plt>
  211b28:	ldp	x0, x1, [x25, #-24]
  211b2c:	bl	212464 <sd_id128_is_null>
  211b30:	cbnz	w0, 211ba8 <run+0x26c>
  211b34:	add	x8, x19, x22
  211b38:	ldurb	w1, [x8, #-24]
  211b3c:	ldurb	w2, [x8, #-23]
  211b40:	ldurb	w3, [x8, #-22]
  211b44:	ldurb	w4, [x8, #-21]
  211b48:	ldurb	w5, [x8, #-20]
  211b4c:	ldurb	w6, [x8, #-19]
  211b50:	ldurb	w7, [x8, #-18]
  211b54:	ldurb	w9, [x8, #-17]
  211b58:	ldurb	w10, [x8, #-16]
  211b5c:	ldurb	w11, [x8, #-15]
  211b60:	ldurb	w12, [x8, #-14]
  211b64:	ldurb	w13, [x8, #-13]
  211b68:	ldurb	w14, [x8, #-12]
  211b6c:	ldurb	w15, [x8, #-11]
  211b70:	ldurb	w16, [x8, #-10]
  211b74:	ldurb	w8, [x8, #-9]
  211b78:	adrp	x0, 201000 <parse_argv.options-0x550>
  211b7c:	add	x0, x0, #0x4b6
  211b80:	str	w16, [sp, #56]
  211b84:	str	w8, [sp, #64]
  211b88:	str	w15, [sp, #48]
  211b8c:	str	w14, [sp, #40]
  211b90:	str	w13, [sp, #32]
  211b94:	str	w12, [sp, #24]
  211b98:	str	w11, [sp, #16]
  211b9c:	str	w10, [sp, #8]
  211ba0:	str	w9, [sp]
  211ba4:	bl	212710 <printf@plt>
  211ba8:	add	x25, x19, x22
  211bac:	ldur	x1, [x25, #-8]
  211bb0:	cbz	x1, 211bbc <run+0x280>
  211bb4:	mov	x0, x27
  211bb8:	bl	212710 <printf@plt>
  211bbc:	ldur	w0, [x25, #-32]
  211bc0:	cmn	w0, #0x1
  211bc4:	b.eq	211bd8 <run+0x29c>  // b.none
  211bc8:	bl	212720 <architecture_to_string@plt>
  211bcc:	mov	x1, x0
  211bd0:	mov	x0, x26
  211bd4:	bl	212710 <printf@plt>
  211bd8:	mov	w0, w20
  211bdc:	bl	212474 <PARTITION_VERITY_OF>
  211be0:	tbnz	w0, #31, 211c18 <run+0x2dc>
  211be4:	ldur	x8, [x29, #-24]
  211be8:	sxtw	x9, w0
  211bec:	adrp	x0, 201000 <parse_argv.options-0x550>
  211bf0:	add	x0, x0, #0x3be
  211bf4:	add	x8, x8, x9, lsl #6
  211bf8:	ldrb	w8, [x8, #8]
  211bfc:	adrp	x9, 201000 <parse_argv.options-0x550>
  211c00:	add	x9, x9, #0x2ab
  211c04:	tst	w8, #0x1
  211c08:	adrp	x8, 201000 <parse_argv.options-0x550>
  211c0c:	add	x8, x8, #0x2bf
  211c10:	csel	x1, x9, x8, eq  // eq = none
  211c14:	bl	212710 <printf@plt>
  211c18:	add	x8, x19, x22
  211c1c:	ldur	w1, [x8, #-36]
  211c20:	tbnz	w1, #31, 211c30 <run+0x2f4>
  211c24:	adrp	x0, 201000 <parse_argv.options-0x550>
  211c28:	add	x0, x0, #0x91
  211c2c:	bl	212710 <printf@plt>
  211c30:	ldr	x1, [x19, x22]
  211c34:	cbz	x1, 211ae0 <run+0x1a4>
  211c38:	adrp	x0, 201000 <parse_argv.options-0x550>
  211c3c:	add	x0, x0, #0x3f0
  211c40:	bl	212710 <printf@plt>
  211c44:	b	211ae0 <run+0x1a4>
  211c48:	mov	x0, x19
  211c4c:	bl	212730 <dissected_image_acquire_metadata@plt>
  211c50:	tbnz	w0, #31, 211e08 <run+0x4cc>
  211c54:	ldur	x8, [x29, #-24]
  211c58:	ldr	x1, [x8, #584]
  211c5c:	cbz	x1, 211c6c <run+0x330>
  211c60:	adrp	x0, 201000 <parse_argv.options-0x550>
  211c64:	add	x0, x0, #0x481
  211c68:	bl	212710 <printf@plt>
  211c6c:	ldur	x19, [x29, #-24]
  211c70:	ldr	x0, [x19, #592]
  211c74:	ldr	x1, [x19, #600]
  211c78:	bl	212464 <sd_id128_is_null>
  211c7c:	cbnz	w0, 211cf0 <run+0x3b4>
  211c80:	ldrb	w1, [x19, #592]
  211c84:	ldrb	w2, [x19, #593]
  211c88:	ldrb	w3, [x19, #594]
  211c8c:	ldrb	w4, [x19, #595]
  211c90:	ldrb	w5, [x19, #596]
  211c94:	ldrb	w6, [x19, #597]
  211c98:	ldrb	w7, [x19, #598]
  211c9c:	ldrb	w8, [x19, #599]
  211ca0:	ldrb	w9, [x19, #600]
  211ca4:	ldrb	w10, [x19, #601]
  211ca8:	ldrb	w11, [x19, #602]
  211cac:	ldrb	w12, [x19, #603]
  211cb0:	ldrb	w13, [x19, #604]
  211cb4:	ldrb	w14, [x19, #605]
  211cb8:	ldrb	w15, [x19, #606]
  211cbc:	ldrb	w16, [x19, #607]
  211cc0:	adrp	x0, 201000 <parse_argv.options-0x550>
  211cc4:	add	x0, x0, #0x2c4
  211cc8:	str	w15, [sp, #56]
  211ccc:	str	w16, [sp, #64]
  211cd0:	str	w14, [sp, #48]
  211cd4:	str	w13, [sp, #40]
  211cd8:	str	w12, [sp, #32]
  211cdc:	str	w11, [sp, #24]
  211ce0:	str	w10, [sp, #16]
  211ce4:	str	w9, [sp, #8]
  211ce8:	str	w8, [sp]
  211cec:	bl	212710 <printf@plt>
  211cf0:	ldur	x8, [x29, #-24]
  211cf4:	ldr	x19, [x8, #608]
  211cf8:	mov	x0, x19
  211cfc:	bl	212490 <strv_isempty>
  211d00:	tbnz	w0, #0, 211d50 <run+0x414>
  211d04:	cbz	x19, 211d50 <run+0x414>
  211d08:	ldr	x2, [x19]
  211d0c:	cbz	x2, 211d50 <run+0x414>
  211d10:	adrp	x21, 201000 <parse_argv.options-0x550>
  211d14:	adrp	x22, 201000 <parse_argv.options-0x550>
  211d18:	adrp	x20, 201000 <parse_argv.options-0x550>
  211d1c:	add	x21, x21, #0x491
  211d20:	add	x22, x22, #0x48
  211d24:	add	x20, x20, #0x3f6
  211d28:	ldr	x3, [x19, #8]
  211d2c:	cbz	x3, 211d50 <run+0x414>
  211d30:	ldur	x8, [x29, #-24]
  211d34:	mov	x0, x20
  211d38:	ldr	x8, [x8, #608]
  211d3c:	cmp	x19, x8
  211d40:	csel	x1, x22, x21, eq  // eq = none
  211d44:	bl	212710 <printf@plt>
  211d48:	ldr	x2, [x19, #16]!
  211d4c:	cbnz	x2, 211d28 <run+0x3ec>
  211d50:	ldur	x8, [x29, #-24]
  211d54:	ldr	x20, [x8, #616]
  211d58:	mov	x0, x20
  211d5c:	bl	212490 <strv_isempty>
  211d60:	mov	w8, #0x1                   	// #1
  211d64:	tbnz	w0, #0, 211db8 <run+0x47c>
  211d68:	cbz	x20, 211db8 <run+0x47c>
  211d6c:	ldr	x2, [x20]
  211d70:	cbz	x2, 211db4 <run+0x478>
  211d74:	adrp	x21, 201000 <parse_argv.options-0x550>
  211d78:	adrp	x22, 201000 <parse_argv.options-0x550>
  211d7c:	adrp	x19, 201000 <parse_argv.options-0x550>
  211d80:	add	x21, x21, #0x491
  211d84:	add	x22, x22, #0x10a
  211d88:	add	x19, x19, #0x3f6
  211d8c:	ldr	x3, [x20, #8]
  211d90:	cbz	x3, 211db4 <run+0x478>
  211d94:	ldur	x8, [x29, #-24]
  211d98:	mov	x0, x19
  211d9c:	ldr	x8, [x8, #616]
  211da0:	cmp	x20, x8
  211da4:	csel	x1, x22, x21, eq  // eq = none
  211da8:	bl	212710 <printf@plt>
  211dac:	ldr	x2, [x20, #16]!
  211db0:	cbnz	x2, 211d8c <run+0x450>
  211db4:	mov	w8, #0x1                   	// #1
  211db8:	tbnz	w8, #0, 211e9c <run+0x560>
  211dbc:	b	211ee8 <run+0x5ac>
  211dc0:	mov	w19, w0
  211dc4:	mov	w0, wzr
  211dc8:	bl	2126d0 <log_get_max_level_realm@plt>
  211dcc:	cmp	w0, #0x3
  211dd0:	b.lt	211edc <run+0x5a0>  // b.tstop
  211dd4:	ldr	x6, [x21, #2856]
  211dd8:	adrp	x2, 201000 <parse_argv.options-0x550>
  211ddc:	adrp	x4, 201000 <parse_argv.options-0x550>
  211de0:	adrp	x5, 201000 <parse_argv.options-0x550>
  211de4:	add	x2, x2, #0x4a0
  211de8:	add	x4, x4, #0x42b
  211dec:	add	x5, x5, #0x51c
  211df0:	mov	w0, #0x3                   	// #3
  211df4:	mov	w3, #0xb5                  	// #181
  211df8:	mov	w1, w19
  211dfc:	bl	2126e0 <log_internal_realm@plt>
  211e00:	mov	w19, w0
  211e04:	b	211ee8 <run+0x5ac>
  211e08:	mov	w19, w0
  211e0c:	mov	w0, wzr
  211e10:	bl	2126d0 <log_get_max_level_realm@plt>
  211e14:	cmp	w0, #0x3
  211e18:	b.lt	211e8c <run+0x550>  // b.tstop
  211e1c:	adrp	x2, 201000 <parse_argv.options-0x550>
  211e20:	adrp	x4, 201000 <parse_argv.options-0x550>
  211e24:	adrp	x5, 201000 <parse_argv.options-0x550>
  211e28:	add	x2, x2, #0x4a0
  211e2c:	add	x4, x4, #0x42b
  211e30:	add	x5, x5, #0xa3
  211e34:	mov	w0, #0x3                   	// #3
  211e38:	mov	w3, #0xe4                  	// #228
  211e3c:	mov	w1, w19
  211e40:	bl	2126e0 <log_internal_realm@plt>
  211e44:	mov	w19, w0
  211e48:	mov	w8, wzr
  211e4c:	tbnz	wzr, #0, 211e9c <run+0x560>
  211e50:	b	211ee8 <run+0x5ac>
  211e54:	mov	w19, w0
  211e58:	mov	w0, wzr
  211e5c:	bl	2126d0 <log_get_max_level_realm@plt>
  211e60:	cmp	w0, #0x3
  211e64:	b.lt	211edc <run+0x5a0>  // b.tstop
  211e68:	adrp	x2, 201000 <parse_argv.options-0x550>
  211e6c:	adrp	x4, 201000 <parse_argv.options-0x550>
  211e70:	adrp	x5, 201000 <parse_argv.options-0x550>
  211e74:	add	x2, x2, #0x4a0
  211e78:	add	x4, x4, #0x42b
  211e7c:	add	x5, x5, #0x400
  211e80:	mov	w0, #0x3                   	// #3
  211e84:	mov	w3, #0x108                 	// #264
  211e88:	b	211a9c <run+0x160>
  211e8c:	mov	w8, wzr
  211e90:	neg	w9, w19
  211e94:	sub	w19, w8, w9, uxtb
  211e98:	tbz	wzr, #0, 211ee8 <run+0x5ac>
  211e9c:	mov	w19, wzr
  211ea0:	b	211ee8 <run+0x5ac>
  211ea4:	mov	w19, w0
  211ea8:	mov	w0, wzr
  211eac:	bl	2126d0 <log_get_max_level_realm@plt>
  211eb0:	cmp	w0, #0x3
  211eb4:	b.lt	211edc <run+0x5a0>  // b.tstop
  211eb8:	adrp	x2, 201000 <parse_argv.options-0x550>
  211ebc:	adrp	x4, 201000 <parse_argv.options-0x550>
  211ec0:	adrp	x5, 201000 <parse_argv.options-0x550>
  211ec4:	add	x2, x2, #0x4a0
  211ec8:	add	x4, x4, #0x42b
  211ecc:	add	x5, x5, #0xd8
  211ed0:	mov	w0, #0x3                   	// #3
  211ed4:	mov	w3, #0x10d                 	// #269
  211ed8:	b	211a9c <run+0x160>
  211edc:	mov	w8, wzr
  211ee0:	neg	w9, w19
  211ee4:	sub	w19, w8, w9, uxtb
  211ee8:	sub	x0, x29, #0x18
  211eec:	bl	211fd4 <dissected_image_unrefp>
  211ef0:	sub	x0, x29, #0x10
  211ef4:	bl	211fb8 <decrypted_image_unrefp>
  211ef8:	sub	x0, x29, #0x8
  211efc:	bl	211f9c <loop_device_unrefp>
  211f00:	mov	w0, w19
  211f04:	ldp	x20, x19, [sp, #176]
  211f08:	ldp	x22, x21, [sp, #160]
  211f0c:	ldp	x24, x23, [sp, #144]
  211f10:	ldp	x26, x25, [sp, #128]
  211f14:	ldp	x28, x27, [sp, #112]
  211f18:	ldp	x29, x30, [sp, #96]
  211f1c:	add	sp, sp, #0xc0
  211f20:	ret

0000000000211f24 <static_destruct>:
  211f24:	stp	x29, x30, [sp, #-32]!
  211f28:	stp	x20, x19, [sp, #16]
  211f2c:	adrp	x8, 222000 <unhexmem_full@plt+0xf820>
  211f30:	ldr	x8, [x8, #2520]
  211f34:	mov	x29, sp
  211f38:	cbz	x8, 211f78 <static_destruct+0x54>
  211f3c:	adrp	x0, 222000 <unhexmem_full@plt+0xf820>
  211f40:	ldr	x0, [x0, #2520]
  211f44:	bl	2124f4 <ALIGN_TO>
  211f48:	adrp	x20, 222000 <unhexmem_full@plt+0xf820>
  211f4c:	ldr	x20, [x20, #2528]
  211f50:	cmp	x0, x20
  211f54:	b.cs	211f78 <static_destruct+0x54>  // b.hs, b.nlast
  211f58:	mov	x19, x0
  211f5c:	ldp	x0, x8, [x19]
  211f60:	blr	x8
  211f64:	add	x0, x19, #0x10
  211f68:	bl	2124f4 <ALIGN_TO>
  211f6c:	mov	x19, x0
  211f70:	cmp	x0, x20
  211f74:	b.cc	211f5c <static_destruct+0x38>  // b.lo, b.ul, b.last
  211f78:	ldp	x20, x19, [sp, #16]
  211f7c:	ldp	x29, x30, [sp], #32
  211f80:	ret

0000000000211f84 <freep>:
  211f84:	stp	x29, x30, [sp, #-16]!
  211f88:	ldr	x0, [x0]
  211f8c:	mov	x29, sp
  211f90:	bl	212740 <free@plt>
  211f94:	ldp	x29, x30, [sp], #16
  211f98:	ret

0000000000211f9c <loop_device_unrefp>:
  211f9c:	stp	x29, x30, [sp, #-16]!
  211fa0:	ldr	x0, [x0]
  211fa4:	mov	x29, sp
  211fa8:	cbz	x0, 211fb0 <loop_device_unrefp+0x14>
  211fac:	bl	212750 <loop_device_unref@plt>
  211fb0:	ldp	x29, x30, [sp], #16
  211fb4:	ret

0000000000211fb8 <decrypted_image_unrefp>:
  211fb8:	stp	x29, x30, [sp, #-16]!
  211fbc:	ldr	x0, [x0]
  211fc0:	mov	x29, sp
  211fc4:	cbz	x0, 211fcc <decrypted_image_unrefp+0x14>
  211fc8:	bl	212760 <decrypted_image_unref@plt>
  211fcc:	ldp	x29, x30, [sp], #16
  211fd0:	ret

0000000000211fd4 <dissected_image_unrefp>:
  211fd4:	stp	x29, x30, [sp, #-16]!
  211fd8:	ldr	x0, [x0]
  211fdc:	mov	x29, sp
  211fe0:	cbz	x0, 211fe8 <dissected_image_unrefp+0x14>
  211fe4:	bl	212770 <dissected_image_unref@plt>
  211fe8:	ldp	x29, x30, [sp], #16
  211fec:	ret

0000000000211ff0 <parse_argv>:
  211ff0:	sub	sp, sp, #0x70
  211ff4:	stp	x29, x30, [sp, #16]
  211ff8:	stp	x28, x27, [sp, #32]
  211ffc:	stp	x26, x25, [sp, #48]
  212000:	stp	x24, x23, [sp, #64]
  212004:	stp	x22, x21, [sp, #80]
  212008:	stp	x20, x19, [sp, #96]
  21200c:	add	x29, sp, #0x10
  212010:	tbnz	w0, #31, 2123f8 <parse_argv+0x408>
  212014:	mov	x19, x1
  212018:	cbz	x1, 21241c <parse_argv+0x42c>
  21201c:	adrp	x2, 201000 <parse_argv.options-0x550>
  212020:	adrp	x3, 201000 <parse_argv.options-0x550>
  212024:	add	x2, x2, #0xfc
  212028:	add	x3, x3, #0x550
  21202c:	mov	x1, x19
  212030:	mov	x4, xzr
  212034:	mov	w20, w0
  212038:	bl	212780 <getopt_long@plt>
  21203c:	adrp	x27, 232000 <_DYNAMIC+0xf800>
  212040:	tbnz	w0, #31, 2122c4 <parse_argv+0x2d4>
  212044:	adrp	x21, 201000 <parse_argv.options-0x550>
  212048:	adrp	x22, 201000 <parse_argv.options-0x550>
  21204c:	mov	w28, #0x1                   	// #1
  212050:	add	x21, x21, #0xfc
  212054:	add	x22, x22, #0x550
  212058:	adrp	x24, 232000 <_DYNAMIC+0xf800>
  21205c:	adrp	x23, 232000 <_DYNAMIC+0xf800>
  212060:	cmp	w0, #0x71
  212064:	b.le	212088 <parse_argv+0x98>
  212068:	cmp	w0, #0x100
  21206c:	b.gt	2120a8 <parse_argv+0xb8>
  212070:	cmp	w0, #0x72
  212074:	b.ne	212330 <parse_argv+0x340>  // b.any
  212078:	ldr	w8, [x24, #2832]
  21207c:	orr	w8, w8, #0x1
  212080:	str	w8, [x24, #2832]
  212084:	b	212294 <parse_argv+0x2a4>
  212088:	cmp	w0, #0x3f
  21208c:	b.eq	2123d0 <parse_argv+0x3e0>  // b.none
  212090:	cmp	w0, #0x68
  212094:	b.eq	212344 <parse_argv+0x354>  // b.none
  212098:	cmp	w0, #0x6d
  21209c:	b.ne	212440 <parse_argv+0x450>  // b.any
  2120a0:	strb	w28, [x27, #2872]
  2120a4:	b	212294 <parse_argv+0x2a4>
  2120a8:	cmp	w0, #0x101
  2120ac:	b.ne	212154 <parse_argv+0x164>  // b.any
  2120b0:	ldr	x25, [x23, #2904]
  2120b4:	adrp	x1, 201000 <parse_argv.options-0x550>
  2120b8:	add	x1, x1, #0x455
  2120bc:	mov	x0, x25
  2120c0:	bl	212790 <strcmp@plt>
  2120c4:	cbz	w0, 2121dc <parse_argv+0x1ec>
  2120c8:	adrp	x1, 201000 <parse_argv.options-0x550>
  2120cc:	mov	x0, x25
  2120d0:	add	x1, x1, #0x35a
  2120d4:	bl	212790 <strcmp@plt>
  2120d8:	cbz	w0, 212254 <parse_argv+0x264>
  2120dc:	adrp	x1, 201000 <parse_argv.options-0x550>
  2120e0:	mov	x0, x25
  2120e4:	add	x1, x1, #0x356
  2120e8:	bl	212790 <strcmp@plt>
  2120ec:	cbz	w0, 212270 <parse_argv+0x280>
  2120f0:	adrp	x1, 201000 <parse_argv.options-0x550>
  2120f4:	mov	x0, x25
  2120f8:	add	x1, x1, #0x545
  2120fc:	bl	212790 <strcmp@plt>
  212100:	cbz	w0, 212278 <parse_argv+0x288>
  212104:	mov	w0, wzr
  212108:	bl	2126d0 <log_get_max_level_realm@plt>
  21210c:	cmp	w0, #0x3
  212110:	b.lt	2122b4 <parse_argv+0x2c4>  // b.tstop
  212114:	mov	w1, #0x16                  	// #22
  212118:	adrp	x2, 201000 <parse_argv.options-0x550>
  21211c:	adrp	x4, 201000 <parse_argv.options-0x550>
  212120:	adrp	x5, 201000 <parse_argv.options-0x550>
  212124:	mov	w0, #0x3                   	// #3
  212128:	movk	w1, #0x4000, lsl #16
  21212c:	mov	w3, #0x64                  	// #100
  212130:	add	x2, x2, #0x4a0
  212134:	add	x4, x4, #0x35f
  212138:	add	x5, x5, #0x42f
  21213c:	mov	x6, x25
  212140:	bl	2126e0 <log_internal_realm@plt>
  212144:	mov	w26, w0
  212148:	mov	w8, wzr
  21214c:	tbnz	wzr, #0, 212294 <parse_argv+0x2a4>
  212150:	b	2123d4 <parse_argv+0x3e4>
  212154:	cmp	w0, #0x102
  212158:	b.ne	212440 <parse_argv+0x450>  // b.any
  21215c:	ldr	x25, [x23, #2904]
  212160:	mov	x0, x25
  212164:	bl	2127a0 <strlen@plt>
  212168:	mov	x1, x0
  21216c:	add	x2, sp, #0x8
  212170:	mov	x3, sp
  212174:	mov	x0, x25
  212178:	bl	2124d4 <unhexmem>
  21217c:	tbnz	w0, #31, 2121e4 <parse_argv+0x1f4>
  212180:	ldr	x8, [sp]
  212184:	cmp	x8, #0xf
  212188:	b.hi	212230 <parse_argv+0x240>  // b.pmore
  21218c:	mov	w0, wzr
  212190:	bl	2126d0 <log_get_max_level_realm@plt>
  212194:	cmp	w0, #0x3
  212198:	b.lt	2121c8 <parse_argv+0x1d8>  // b.tstop
  21219c:	ldr	x6, [x23, #2904]
  2121a0:	adrp	x2, 201000 <parse_argv.options-0x550>
  2121a4:	adrp	x4, 201000 <parse_argv.options-0x550>
  2121a8:	adrp	x5, 201000 <parse_argv.options-0x550>
  2121ac:	mov	w0, #0x3                   	// #3
  2121b0:	mov	w3, #0x72                  	// #114
  2121b4:	mov	w1, wzr
  2121b8:	add	x2, x2, #0x4a0
  2121bc:	add	x4, x4, #0x35f
  2121c0:	add	x5, x5, #0x36a
  2121c4:	bl	2126e0 <log_internal_realm@plt>
  2121c8:	ldr	x0, [sp, #8]
  2121cc:	bl	212740 <free@plt>
  2121d0:	mov	w26, #0xffffffea            	// #-22
  2121d4:	tbnz	wzr, #0, 212294 <parse_argv+0x2a4>
  2121d8:	b	2123d4 <parse_argv+0x3e4>
  2121dc:	mov	w8, wzr
  2121e0:	b	21227c <parse_argv+0x28c>
  2121e4:	mov	w25, w0
  2121e8:	mov	w0, wzr
  2121ec:	bl	2126d0 <log_get_max_level_realm@plt>
  2121f0:	cmp	w0, #0x3
  2121f4:	b.lt	21225c <parse_argv+0x26c>  // b.tstop
  2121f8:	ldr	x6, [x23, #2904]
  2121fc:	adrp	x2, 201000 <parse_argv.options-0x550>
  212200:	adrp	x4, 201000 <parse_argv.options-0x550>
  212204:	adrp	x5, 201000 <parse_argv.options-0x550>
  212208:	mov	w0, #0x3                   	// #3
  21220c:	mov	w3, #0x70                  	// #112
  212210:	mov	w1, w25
  212214:	add	x2, x2, #0x4a0
  212218:	add	x4, x4, #0x35f
  21221c:	add	x5, x5, #0x45e
  212220:	bl	2126e0 <log_internal_realm@plt>
  212224:	mov	w26, w0
  212228:	tbnz	wzr, #0, 212294 <parse_argv+0x2a4>
  21222c:	b	2123d4 <parse_argv+0x3e4>
  212230:	adrp	x25, 232000 <_DYNAMIC+0xf800>
  212234:	ldr	x0, [x25, #2848]
  212238:	bl	212740 <free@plt>
  21223c:	ldp	x9, x8, [sp]
  212240:	str	x8, [x25, #2848]
  212244:	adrp	x8, 232000 <_DYNAMIC+0xf800>
  212248:	str	x9, [x8, #2864]
  21224c:	tbnz	w28, #0, 212294 <parse_argv+0x2a4>
  212250:	b	2123d4 <parse_argv+0x3e4>
  212254:	mov	w8, #0x2                   	// #2
  212258:	b	21227c <parse_argv+0x28c>
  21225c:	mov	w8, wzr
  212260:	neg	w9, w25
  212264:	sub	w26, w8, w9, uxtb
  212268:	tbnz	wzr, #0, 212294 <parse_argv+0x2a4>
  21226c:	b	2123d4 <parse_argv+0x3e4>
  212270:	mov	w8, #0x6                   	// #6
  212274:	b	21227c <parse_argv+0x28c>
  212278:	mov	w8, #0xe                   	// #14
  21227c:	ldr	w9, [x24, #2832]
  212280:	and	w9, w9, #0xfffffff1
  212284:	orr	w8, w9, w8
  212288:	str	w8, [x24, #2832]
  21228c:	mov	w8, #0x1                   	// #1
  212290:	tbz	w8, #0, 2123d4 <parse_argv+0x3e4>
  212294:	mov	w0, w20
  212298:	mov	x1, x19
  21229c:	mov	x2, x21
  2122a0:	mov	x3, x22
  2122a4:	mov	x4, xzr
  2122a8:	bl	212780 <getopt_long@plt>
  2122ac:	tbz	w0, #31, 212060 <parse_argv+0x70>
  2122b0:	b	2122c4 <parse_argv+0x2d4>
  2122b4:	mov	w26, #0xffffffea            	// #-22
  2122b8:	mov	w8, wzr
  2122bc:	tbnz	wzr, #0, 212294 <parse_argv+0x2a4>
  2122c0:	b	2123d4 <parse_argv+0x3e4>
  2122c4:	adrp	x8, 232000 <_DYNAMIC+0xf800>
  2122c8:	ldrb	w9, [x27, #2872]
  2122cc:	ldrsw	x8, [x8, #2912]
  2122d0:	tbz	w9, #0, 212300 <parse_argv+0x310>
  2122d4:	add	w9, w8, #0x2
  2122d8:	cmp	w9, w20
  2122dc:	b.ne	212350 <parse_argv+0x360>  // b.any
  2122e0:	ldr	x9, [x19, x8, lsl #3]
  2122e4:	adrp	x10, 232000 <_DYNAMIC+0xf800>
  2122e8:	add	w8, w8, #0x1
  2122ec:	str	x9, [x10, #2856]
  2122f0:	ldr	x8, [x19, w8, sxtw #3]
  2122f4:	adrp	x9, 232000 <_DYNAMIC+0xf800>
  2122f8:	str	x8, [x9, #2880]
  2122fc:	b	212328 <parse_argv+0x338>
  212300:	add	w9, w8, #0x1
  212304:	cmp	w9, w20
  212308:	b.ne	21238c <parse_argv+0x39c>  // b.any
  21230c:	adrp	x9, 232000 <_DYNAMIC+0xf800>
  212310:	ldr	x8, [x19, x8, lsl #3]
  212314:	ldr	w10, [x9, #2832]
  212318:	adrp	x11, 232000 <_DYNAMIC+0xf800>
  21231c:	str	x8, [x11, #2856]
  212320:	orr	w8, w10, #0x1
  212324:	str	w8, [x9, #2832]
  212328:	mov	w26, #0x1                   	// #1
  21232c:	b	2123d4 <parse_argv+0x3e4>
  212330:	cmp	w0, #0x100
  212334:	b.ne	212440 <parse_argv+0x450>  // b.any
  212338:	bl	2127b0 <version@plt>
  21233c:	mov	w26, w0
  212340:	b	2123d4 <parse_argv+0x3e4>
  212344:	bl	2124ac <help>
  212348:	mov	w26, wzr
  21234c:	b	2123d4 <parse_argv+0x3e4>
  212350:	mov	w0, wzr
  212354:	bl	2126d0 <log_get_max_level_realm@plt>
  212358:	cmp	w0, #0x3
  21235c:	b.lt	2123d0 <parse_argv+0x3e0>  // b.tstop
  212360:	adrp	x2, 201000 <parse_argv.options-0x550>
  212364:	adrp	x4, 201000 <parse_argv.options-0x550>
  212368:	adrp	x5, 201000 <parse_argv.options-0x550>
  21236c:	mov	w1, #0x16                  	// #22
  212370:	add	x2, x2, #0x4a0
  212374:	add	x4, x4, #0x35f
  212378:	add	x5, x5, #0x54
  21237c:	mov	w0, #0x3                   	// #3
  212380:	movk	w1, #0x4000, lsl #16
  212384:	mov	w3, #0x94                  	// #148
  212388:	b	2123c4 <parse_argv+0x3d4>
  21238c:	mov	w0, wzr
  212390:	bl	2126d0 <log_get_max_level_realm@plt>
  212394:	cmp	w0, #0x3
  212398:	b.lt	2123d0 <parse_argv+0x3e0>  // b.tstop
  21239c:	adrp	x2, 201000 <parse_argv.options-0x550>
  2123a0:	adrp	x4, 201000 <parse_argv.options-0x550>
  2123a4:	adrp	x5, 201000 <parse_argv.options-0x550>
  2123a8:	mov	w1, #0x16                  	// #22
  2123ac:	add	x2, x2, #0x4a0
  2123b0:	add	x4, x4, #0x35f
  2123b4:	add	x5, x5, #0x3c9
  2123b8:	mov	w0, #0x3                   	// #3
  2123bc:	movk	w1, #0x4000, lsl #16
  2123c0:	mov	w3, #0x8b                  	// #139
  2123c4:	bl	2126e0 <log_internal_realm@plt>
  2123c8:	mov	w26, w0
  2123cc:	b	2123d4 <parse_argv+0x3e4>
  2123d0:	mov	w26, #0xffffffea            	// #-22
  2123d4:	mov	w0, w26
  2123d8:	ldp	x20, x19, [sp, #96]
  2123dc:	ldp	x22, x21, [sp, #80]
  2123e0:	ldp	x24, x23, [sp, #64]
  2123e4:	ldp	x26, x25, [sp, #48]
  2123e8:	ldp	x28, x27, [sp, #32]
  2123ec:	ldp	x29, x30, [sp, #16]
  2123f0:	add	sp, sp, #0x70
  2123f4:	ret
  2123f8:	adrp	x1, 201000 <parse_argv.options-0x550>
  2123fc:	adrp	x2, 201000 <parse_argv.options-0x550>
  212400:	adrp	x4, 201000 <parse_argv.options-0x550>
  212404:	add	x1, x1, #0x31a
  212408:	add	x2, x2, #0x4a0
  21240c:	add	x4, x4, #0x4ff
  212410:	mov	w3, #0x40                  	// #64
  212414:	mov	w0, wzr
  212418:	bl	2127c0 <log_assert_failed_realm@plt>
  21241c:	adrp	x1, 201000 <parse_argv.options-0x550>
  212420:	adrp	x2, 201000 <parse_argv.options-0x550>
  212424:	adrp	x4, 201000 <parse_argv.options-0x550>
  212428:	add	x1, x1, #0x349
  21242c:	add	x2, x2, #0x4a0
  212430:	add	x4, x4, #0x4ff
  212434:	mov	w3, #0x41                  	// #65
  212438:	mov	w0, wzr
  21243c:	bl	2127c0 <log_assert_failed_realm@plt>
  212440:	adrp	x1, 201000 <parse_argv.options-0x550>
  212444:	adrp	x2, 201000 <parse_argv.options-0x550>
  212448:	adrp	x4, 201000 <parse_argv.options-0x550>
  21244c:	add	x1, x1, #0x41a
  212450:	add	x2, x2, #0x4a0
  212454:	add	x4, x4, #0x4ff
  212458:	mov	w3, #0x81                  	// #129
  21245c:	mov	w0, wzr
  212460:	bl	2127d0 <log_assert_failed_unreachable_realm@plt>

0000000000212464 <sd_id128_is_null>:
  212464:	orr	x8, x0, x1
  212468:	cmp	x8, #0x0
  21246c:	cset	w0, eq  // eq = none
  212470:	ret

0000000000212474 <PARTITION_VERITY_OF>:
  212474:	cmp	w0, #0x1
  212478:	mov	w8, #0x8                   	// #8
  21247c:	csinv	w8, w8, wzr, eq  // eq = none
  212480:	cmp	w0, #0x0
  212484:	mov	w9, #0x7                   	// #7
  212488:	csel	w0, w9, w8, eq  // eq = none
  21248c:	ret

0000000000212490 <strv_isempty>:
  212490:	cbz	x0, 2124a4 <strv_isempty+0x14>
  212494:	ldr	x8, [x0]
  212498:	cmp	x8, #0x0
  21249c:	cset	w0, eq  // eq = none
  2124a0:	ret
  2124a4:	mov	w0, #0x1                   	// #1
  2124a8:	ret

00000000002124ac <help>:
  2124ac:	stp	x29, x30, [sp, #-16]!
  2124b0:	adrp	x8, 232000 <_DYNAMIC+0xf800>
  2124b4:	ldr	x1, [x8, #2920]
  2124b8:	adrp	x0, 201000 <parse_argv.options-0x550>
  2124bc:	add	x0, x0, #0x116
  2124c0:	mov	x29, sp
  2124c4:	mov	x2, x1
  2124c8:	bl	212710 <printf@plt>
  2124cc:	ldp	x29, x30, [sp], #16
  2124d0:	ret

00000000002124d4 <unhexmem>:
  2124d4:	stp	x29, x30, [sp, #-16]!
  2124d8:	mov	x4, x3
  2124dc:	mov	x3, x2
  2124e0:	mov	w2, wzr
  2124e4:	mov	x29, sp
  2124e8:	bl	2127e0 <unhexmem_full@plt>
  2124ec:	ldp	x29, x30, [sp], #16
  2124f0:	ret

00000000002124f4 <ALIGN_TO>:
  2124f4:	add	x8, x0, #0x7
  2124f8:	and	x0, x8, #0xfffffffffffffff8
  2124fc:	ret

0000000000212500 <__libc_csu_init>:
  212500:	stp	x29, x30, [sp, #-64]!
  212504:	mov	x29, sp
  212508:	stp	x19, x20, [sp, #16]
  21250c:	adrp	x20, 222000 <unhexmem_full@plt+0xf820>
  212510:	add	x20, x20, #0x800
  212514:	stp	x21, x22, [sp, #32]
  212518:	adrp	x21, 222000 <unhexmem_full@plt+0xf820>
  21251c:	add	x21, x21, #0x7f8
  212520:	sub	x20, x20, x21
  212524:	mov	w22, w0
  212528:	stp	x23, x24, [sp, #48]
  21252c:	mov	x23, x1
  212530:	mov	x24, x2
  212534:	bl	212584 <_init>
  212538:	cmp	xzr, x20, asr #3
  21253c:	b.eq	212568 <__libc_csu_init+0x68>  // b.none
  212540:	asr	x20, x20, #3
  212544:	mov	x19, #0x0                   	// #0
  212548:	ldr	x3, [x21, x19, lsl #3]
  21254c:	mov	x2, x24
  212550:	add	x19, x19, #0x1
  212554:	mov	x1, x23
  212558:	mov	w0, w22
  21255c:	blr	x3
  212560:	cmp	x20, x19
  212564:	b.ne	212548 <__libc_csu_init+0x48>  // b.any
  212568:	ldp	x19, x20, [sp, #16]
  21256c:	ldp	x21, x22, [sp, #32]
  212570:	ldp	x23, x24, [sp, #48]
  212574:	ldp	x29, x30, [sp], #64
  212578:	ret
  21257c:	nop

0000000000212580 <__libc_csu_fini>:
  212580:	ret

Disassembly of section .init:

0000000000212584 <_init>:
  212584:	stp	x29, x30, [sp, #-16]!
  212588:	mov	x29, sp
  21258c:	bl	2117c8 <call_weak_fn>
  212590:	ldp	x29, x30, [sp], #16
  212594:	ret

Disassembly of section .fini:

0000000000212598 <_fini>:
  212598:	stp	x29, x30, [sp, #-16]!
  21259c:	mov	x29, sp
  2125a0:	ldp	x29, x30, [sp], #16
  2125a4:	ret

Disassembly of section .plt:

00000000002125b0 <__libc_start_main@plt-0x20>:
  2125b0:	stp	x16, x30, [sp, #-16]!
  2125b4:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2125b8:	ldr	x17, [x16, #2552]
  2125bc:	add	x16, x16, #0x9f8
  2125c0:	br	x17
  2125c4:	nop
  2125c8:	nop
  2125cc:	nop

00000000002125d0 <__libc_start_main@plt>:
  2125d0:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2125d4:	ldr	x17, [x16, #2560]
  2125d8:	add	x16, x16, #0xa00
  2125dc:	br	x17

00000000002125e0 <abort@plt>:
  2125e0:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2125e4:	ldr	x17, [x16, #2568]
  2125e8:	add	x16, x16, #0xa08
  2125ec:	br	x17

00000000002125f0 <__gmon_start__@plt>:
  2125f0:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2125f4:	ldr	x17, [x16, #2576]
  2125f8:	add	x16, x16, #0xa10
  2125fc:	br	x17

0000000000212600 <ask_password_agent_close@plt>:
  212600:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212604:	ldr	x17, [x16, #2584]
  212608:	add	x16, x16, #0xa18
  21260c:	br	x17

0000000000212610 <polkit_agent_close@plt>:
  212610:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212614:	ldr	x17, [x16, #2592]
  212618:	add	x16, x16, #0xa20
  21261c:	br	x17

0000000000212620 <pager_close@plt>:
  212620:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212624:	ldr	x17, [x16, #2600]
  212628:	add	x16, x16, #0xa28
  21262c:	br	x17

0000000000212630 <mac_selinux_finish@plt>:
  212630:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212634:	ldr	x17, [x16, #2608]
  212638:	add	x16, x16, #0xa30
  21263c:	br	x17

0000000000212640 <log_parse_environment_realm@plt>:
  212640:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212644:	ldr	x17, [x16, #2616]
  212648:	add	x16, x16, #0xa38
  21264c:	br	x17

0000000000212650 <log_open@plt>:
  212650:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212654:	ldr	x17, [x16, #2624]
  212658:	add	x16, x16, #0xa40
  21265c:	br	x17

0000000000212660 <loop_device_make_by_path@plt>:
  212660:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212664:	ldr	x17, [x16, #2632]
  212668:	add	x16, x16, #0xa48
  21266c:	br	x17

0000000000212670 <root_hash_load@plt>:
  212670:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212674:	ldr	x17, [x16, #2640]
  212678:	add	x16, x16, #0xa50
  21267c:	br	x17

0000000000212680 <dissect_image_and_warn@plt>:
  212680:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212684:	ldr	x17, [x16, #2648]
  212688:	add	x16, x16, #0xa58
  21268c:	br	x17

0000000000212690 <dissected_image_decrypt_interactively@plt>:
  212690:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212694:	ldr	x17, [x16, #2656]
  212698:	add	x16, x16, #0xa60
  21269c:	br	x17

00000000002126a0 <dissected_image_mount@plt>:
  2126a0:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2126a4:	ldr	x17, [x16, #2664]
  2126a8:	add	x16, x16, #0xa68
  2126ac:	br	x17

00000000002126b0 <decrypted_image_relinquish@plt>:
  2126b0:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2126b4:	ldr	x17, [x16, #2672]
  2126b8:	add	x16, x16, #0xa70
  2126bc:	br	x17

00000000002126c0 <loop_device_relinquish@plt>:
  2126c0:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2126c4:	ldr	x17, [x16, #2680]
  2126c8:	add	x16, x16, #0xa78
  2126cc:	br	x17

00000000002126d0 <log_get_max_level_realm@plt>:
  2126d0:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2126d4:	ldr	x17, [x16, #2688]
  2126d8:	add	x16, x16, #0xa80
  2126dc:	br	x17

00000000002126e0 <log_internal_realm@plt>:
  2126e0:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2126e4:	ldr	x17, [x16, #2696]
  2126e8:	add	x16, x16, #0xa88
  2126ec:	br	x17

00000000002126f0 <putchar@plt>:
  2126f0:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2126f4:	ldr	x17, [x16, #2704]
  2126f8:	add	x16, x16, #0xa90
  2126fc:	br	x17

0000000000212700 <partition_designator_to_string@plt>:
  212700:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212704:	ldr	x17, [x16, #2712]
  212708:	add	x16, x16, #0xa98
  21270c:	br	x17

0000000000212710 <printf@plt>:
  212710:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212714:	ldr	x17, [x16, #2720]
  212718:	add	x16, x16, #0xaa0
  21271c:	br	x17

0000000000212720 <architecture_to_string@plt>:
  212720:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212724:	ldr	x17, [x16, #2728]
  212728:	add	x16, x16, #0xaa8
  21272c:	br	x17

0000000000212730 <dissected_image_acquire_metadata@plt>:
  212730:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212734:	ldr	x17, [x16, #2736]
  212738:	add	x16, x16, #0xab0
  21273c:	br	x17

0000000000212740 <free@plt>:
  212740:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212744:	ldr	x17, [x16, #2744]
  212748:	add	x16, x16, #0xab8
  21274c:	br	x17

0000000000212750 <loop_device_unref@plt>:
  212750:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212754:	ldr	x17, [x16, #2752]
  212758:	add	x16, x16, #0xac0
  21275c:	br	x17

0000000000212760 <decrypted_image_unref@plt>:
  212760:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212764:	ldr	x17, [x16, #2760]
  212768:	add	x16, x16, #0xac8
  21276c:	br	x17

0000000000212770 <dissected_image_unref@plt>:
  212770:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212774:	ldr	x17, [x16, #2768]
  212778:	add	x16, x16, #0xad0
  21277c:	br	x17

0000000000212780 <getopt_long@plt>:
  212780:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212784:	ldr	x17, [x16, #2776]
  212788:	add	x16, x16, #0xad8
  21278c:	br	x17

0000000000212790 <strcmp@plt>:
  212790:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  212794:	ldr	x17, [x16, #2784]
  212798:	add	x16, x16, #0xae0
  21279c:	br	x17

00000000002127a0 <strlen@plt>:
  2127a0:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2127a4:	ldr	x17, [x16, #2792]
  2127a8:	add	x16, x16, #0xae8
  2127ac:	br	x17

00000000002127b0 <version@plt>:
  2127b0:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2127b4:	ldr	x17, [x16, #2800]
  2127b8:	add	x16, x16, #0xaf0
  2127bc:	br	x17

00000000002127c0 <log_assert_failed_realm@plt>:
  2127c0:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2127c4:	ldr	x17, [x16, #2808]
  2127c8:	add	x16, x16, #0xaf8
  2127cc:	br	x17

00000000002127d0 <log_assert_failed_unreachable_realm@plt>:
  2127d0:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2127d4:	ldr	x17, [x16, #2816]
  2127d8:	add	x16, x16, #0xb00
  2127dc:	br	x17

00000000002127e0 <unhexmem_full@plt>:
  2127e0:	adrp	x16, 222000 <unhexmem_full@plt+0xf820>
  2127e4:	ldr	x17, [x16, #2824]
  2127e8:	add	x16, x16, #0xb08
  2127ec:	br	x17
