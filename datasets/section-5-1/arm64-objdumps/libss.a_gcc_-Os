In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libss.a_gcc_-Os:

ss_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <initialize_ss_error_table_r>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	adrp	x1, 0 <initialize_ss_error_table_r>
   8:	add	x1, x1, #0x0
   c:	mov	x29, sp
  10:	str	x19, [sp, #16]
  14:	mov	x19, x0
  18:	ldr	x0, [x0]
  1c:	cbnz	x0, 5c <initialize_ss_error_table_r+0x5c>
  20:	mov	x0, #0x10                  	// #16
  24:	bl	0 <malloc>
  28:	cbnz	x0, 3c <initialize_ss_error_table_r+0x3c>
  2c:	adrp	x0, 0 <initialize_ss_error_table_r>
  30:	add	x0, x0, #0x0
  34:	ldr	x1, [x0, #8]
  38:	cbnz	x1, 50 <initialize_ss_error_table_r+0x50>
  3c:	adrp	x1, 0 <initialize_ss_error_table_r>
  40:	add	x1, x1, #0x0
  44:	add	x1, x1, #0x68
  48:	stp	xzr, x1, [x0]
  4c:	str	x0, [x19]
  50:	ldr	x19, [sp, #16]
  54:	ldp	x29, x30, [sp], #32
  58:	ret
  5c:	ldr	x2, [x0, #8]
  60:	ldr	x2, [x2]
  64:	cmp	x2, x1
  68:	b.eq	50 <initialize_ss_error_table_r+0x50>  // b.none
  6c:	mov	x19, x0
  70:	ldr	x0, [x0]
  74:	b	1c <initialize_ss_error_table_r+0x1c>

0000000000000078 <initialize_ss_error_table>:
  78:	adrp	x0, 0 <_et_list>
  7c:	add	x0, x0, #0x0
  80:	b	0 <initialize_ss_error_table_r>

std_rqs.o:     file format elf64-littleaarch64


invocation.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_create_invocation>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	adrp	x22, 0 <_ss_table>
  10:	mov	x21, x0
  14:	stp	x19, x20, [sp, #16]
  18:	mov	x0, #0x90                  	// #144
  1c:	ldr	x20, [x22]
  20:	str	wzr, [x4]
  24:	stp	x23, x24, [sp, #48]
  28:	mov	x24, x3
  2c:	mov	x23, x4
  30:	stp	x25, x26, [sp, #64]
  34:	mov	x26, x1
  38:	mov	x25, x2
  3c:	stp	x27, x28, [sp, #80]
  40:	bl	0 <malloc>
  44:	mov	x19, x0
  48:	cbnz	x20, 5c <ss_create_invocation+0x5c>
  4c:	mov	x0, #0x10                  	// #16
  50:	bl	0 <malloc>
  54:	mov	x20, x0
  58:	stp	xzr, xzr, [x0]
  5c:	bl	0 <initialize_ss_error_table>
  60:	sub	x3, x20, #0x8
  64:	mov	x0, #0x1                   	// #1
  68:	mov	w27, w0
  6c:	lsl	x2, x0, #3
  70:	mov	x28, x0
  74:	add	x0, x0, #0x1
  78:	ldr	x1, [x3, x0, lsl #3]
  7c:	cbnz	x1, 68 <ss_create_invocation+0x68>
  80:	add	w1, w27, #0x2
  84:	mov	x0, x20
  88:	str	x2, [sp, #104]
  8c:	lsl	x1, x1, #3
  90:	bl	0 <realloc>
  94:	mov	x20, x0
  98:	ldr	x2, [sp, #104]
  9c:	cbnz	x0, d4 <ss_create_invocation+0xd4>
  a0:	mov	w0, #0xc                   	// #12
  a4:	str	w0, [x23]
  a8:	mov	w27, #0x0                   	// #0
  ac:	mov	x0, x19
  b0:	bl	0 <free>
  b4:	mov	w0, w27
  b8:	ldp	x19, x20, [sp, #16]
  bc:	ldp	x21, x22, [sp, #32]
  c0:	ldp	x23, x24, [sp, #48]
  c4:	ldp	x25, x26, [sp, #64]
  c8:	ldp	x27, x28, [sp, #80]
  cc:	ldp	x29, x30, [sp], #112
  d0:	ret
  d4:	add	x28, x28, #0x1
  d8:	str	xzr, [x0, x28, lsl #3]
  dc:	str	x19, [x0, x2]
  e0:	mov	x0, #0x8                   	// #8
  e4:	stp	x21, x26, [x19]
  e8:	stp	xzr, xzr, [x19, #24]
  ec:	bl	0 <malloc>
  f0:	str	xzr, [x0]
  f4:	stp	x0, x25, [x19, #40]
  f8:	mov	x0, x21
  fc:	bl	0 <strlen>
 100:	add	w0, w0, #0x4
 104:	bl	0 <malloc>
 108:	mov	x1, x21
 10c:	mov	x23, x0
 110:	str	x0, [x19, #56]
 114:	bl	0 <strcpy>
 118:	mov	x0, x23
 11c:	adrp	x1, 0 <ss_create_invocation>
 120:	add	x1, x1, #0x0
 124:	bl	0 <strcat>
 128:	ldrb	w0, [x19, #80]
 12c:	mov	x1, #0x8                   	// #8
 130:	str	xzr, [x19, #72]
 134:	and	w0, w0, #0xfffffffc
 138:	strb	w0, [x19, #80]
 13c:	mov	x0, #0x2                   	// #2
 140:	bl	0 <calloc>
 144:	str	x20, [x22]
 148:	stp	x24, xzr, [x0]
 14c:	str	x0, [x19, #64]
 150:	stp	xzr, xzr, [x19, #88]
 154:	stp	xzr, xzr, [x19, #104]
 158:	stp	xzr, xzr, [x19, #120]
 15c:	b	b4 <ss_create_invocation+0xb4>

0000000000000160 <ss_delete_invocation>:
 160:	stp	x29, x30, [sp, #-48]!
 164:	mov	x29, sp
 168:	stp	x19, x20, [sp, #16]
 16c:	mov	w20, w0
 170:	adrp	x0, 0 <_ss_table>
 174:	ldr	x0, [x0]
 178:	ldr	x19, [x0, w20, sxtw #3]
 17c:	ldr	x0, [x19, #56]
 180:	bl	0 <free>
 184:	ldr	x0, [x19, #64]
 188:	bl	0 <free>
 18c:	ldr	x0, [x19, #40]
 190:	ldr	x1, [x0]
 194:	cbnz	x1, 1b0 <ss_delete_invocation+0x50>
 198:	bl	0 <free>
 19c:	mov	x0, x19
 1a0:	bl	0 <free>
 1a4:	ldp	x19, x20, [sp, #16]
 1a8:	ldp	x29, x30, [sp], #48
 1ac:	ret
 1b0:	add	x2, sp, #0x2c
 1b4:	mov	w0, w20
 1b8:	bl	0 <ss_delete_info_dir>
 1bc:	b	18c <ss_delete_invocation+0x2c>

help.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_help>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	adrp	x5, 0 <_ss_table>
   8:	cmp	w0, #0x1
   c:	mov	x29, sp
  10:	ldr	x5, [x5]
  14:	stp	x19, x20, [sp, #16]
  18:	mov	w19, w2
  1c:	stp	x21, x22, [sp, #32]
  20:	stp	x23, x24, [sp, #48]
  24:	stp	x25, x26, [sp, #64]
  28:	str	x27, [sp, #80]
  2c:	ldr	x27, [x5, w19, sxtw #3]
  30:	b.ne	50 <ss_help+0x50>  // b.any
  34:	ldp	x19, x20, [sp, #16]
  38:	ldp	x21, x22, [sp, #32]
  3c:	ldp	x23, x24, [sp, #48]
  40:	ldp	x25, x26, [sp, #64]
  44:	ldr	x27, [sp, #80]
  48:	ldp	x29, x30, [sp], #96
  4c:	b	0 <ss_list_requests>
  50:	cmp	w0, #0x2
  54:	b.eq	cc <ss_help+0xcc>  // b.none
  58:	ldr	x21, [x27, #32]
  5c:	mov	x0, x21
  60:	bl	0 <strlen>
  64:	add	x0, x0, #0x28
  68:	lsl	x0, x0, #1
  6c:	bl	0 <malloc>
  70:	mov	x20, x0
  74:	cbnz	x0, 88 <ss_help+0x88>
  78:	adrp	x2, 0 <ss_help>
  7c:	add	x2, x2, #0x0
  80:	mov	x1, #0x0                   	// #0
  84:	b	e0 <ss_help+0xe0>
  88:	adrp	x1, 0 <ss_help>
  8c:	mov	x3, x21
  90:	mov	x2, x21
  94:	add	x1, x1, #0x0
  98:	bl	0 <sprintf>
  9c:	mov	x2, x20
  a0:	mov	w0, w19
  a4:	mov	x1, #0x0                   	// #0
  a8:	bl	0 <ss_perror>
  ac:	mov	x0, x20
  b0:	ldp	x19, x20, [sp, #16]
  b4:	ldp	x21, x22, [sp, #32]
  b8:	ldp	x23, x24, [sp, #48]
  bc:	ldp	x25, x26, [sp, #64]
  c0:	ldr	x27, [sp, #80]
  c4:	ldp	x29, x30, [sp], #96
  c8:	b	0 <free>
  cc:	ldr	x0, [x27, #40]
  d0:	cbnz	x0, 100 <ss_help+0x100>
  d4:	mov	x1, #0x6d03                	// #27907
  d8:	mov	x2, #0x0                   	// #0
  dc:	movk	x1, #0xb, lsl #16
  e0:	mov	w0, w19
  e4:	ldp	x19, x20, [sp, #16]
  e8:	ldp	x21, x22, [sp, #32]
  ec:	ldp	x23, x24, [sp, #48]
  f0:	ldp	x25, x26, [sp, #64]
  f4:	ldr	x27, [sp, #80]
  f8:	ldp	x29, x30, [sp], #96
  fc:	b	0 <ss_perror>
 100:	ldr	x0, [x0]
 104:	cbz	x0, d4 <ss_help+0xd4>
 108:	adrp	x23, 0 <ss_help>
 10c:	adrp	x24, 0 <ss_help>
 110:	mov	x22, x1
 114:	add	x23, x23, #0x0
 118:	add	x24, x24, #0x0
 11c:	mov	x26, #0x0                   	// #0
 120:	ldr	x0, [x27, #40]
 124:	ldr	x21, [x22, #8]
 128:	ldr	x25, [x0, x26]
 12c:	cbnz	x25, 160 <ss_help+0x160>
 130:	mov	x0, x21
 134:	bl	0 <strlen>
 138:	add	x0, x0, #0x13
 13c:	bl	0 <malloc>
 140:	adrp	x1, 0 <ss_help>
 144:	mov	x20, x0
 148:	add	x1, x1, #0x0
 14c:	bl	0 <strcpy>
 150:	mov	x1, x21
 154:	mov	x0, x20
 158:	bl	0 <strcat>
 15c:	b	9c <ss_help+0x9c>
 160:	mov	x0, x25
 164:	bl	0 <strlen>
 168:	mov	x20, x0
 16c:	mov	x0, x21
 170:	bl	0 <strlen>
 174:	add	x0, x20, x0
 178:	add	x0, x0, #0x7
 17c:	bl	0 <malloc>
 180:	mov	x20, x0
 184:	cbnz	x0, 194 <ss_help+0x194>
 188:	adrp	x2, 0 <ss_help>
 18c:	add	x2, x2, #0x0
 190:	b	80 <ss_help+0x80>
 194:	mov	x1, x25
 198:	bl	0 <strcpy>
 19c:	mov	x1, x23
 1a0:	mov	x0, x20
 1a4:	bl	0 <strcat>
 1a8:	add	x26, x26, #0x8
 1ac:	mov	x1, x21
 1b0:	mov	x0, x20
 1b4:	bl	0 <strcat>
 1b8:	mov	x1, x24
 1bc:	mov	x0, x20
 1c0:	bl	0 <strcat>
 1c4:	mov	w1, #0x0                   	// #0
 1c8:	mov	x0, x20
 1cc:	bl	0 <open>
 1d0:	mov	w21, w0
 1d4:	mov	x0, x20
 1d8:	bl	0 <free>
 1dc:	tbnz	w21, #31, 120 <ss_help+0x120>
 1e0:	bl	0 <fork>
 1e4:	mov	w20, w0
 1e8:	cmn	w0, #0x1
 1ec:	b.eq	238 <ss_help+0x238>  // b.none
 1f0:	cbnz	w0, 204 <ss_help+0x204>
 1f4:	mov	w1, #0x0                   	// #0
 1f8:	mov	w0, w21
 1fc:	bl	0 <dup2>
 200:	bl	0 <ss_page_stdin>
 204:	mov	w0, w21
 208:	bl	0 <close>
 20c:	mov	x0, #0x0                   	// #0
 210:	bl	0 <wait>
 214:	cmp	w0, w20
 218:	b.ne	20c <ss_help+0x20c>  // b.any
 21c:	ldp	x19, x20, [sp, #16]
 220:	ldp	x21, x22, [sp, #32]
 224:	ldp	x23, x24, [sp, #48]
 228:	ldp	x25, x26, [sp, #64]
 22c:	ldr	x27, [sp, #80]
 230:	ldp	x29, x30, [sp], #96
 234:	ret
 238:	bl	0 <__errno_location>
 23c:	ldrsw	x1, [x0]
 240:	adrp	x2, 0 <ss_help>
 244:	mov	w0, w19
 248:	add	x2, x2, #0x0
 24c:	bl	0 <ss_perror>
 250:	mov	w0, w21
 254:	ldp	x19, x20, [sp, #16]
 258:	ldp	x21, x22, [sp, #32]
 25c:	ldp	x23, x24, [sp, #48]
 260:	ldp	x25, x26, [sp, #64]
 264:	ldr	x27, [sp, #80]
 268:	ldp	x29, x30, [sp], #96
 26c:	b	0 <close>

0000000000000270 <ss_add_info_dir>:
 270:	stp	x29, x30, [sp, #-64]!
 274:	mov	x29, sp
 278:	stp	x19, x20, [sp, #16]
 27c:	mov	x20, x2
 280:	stp	x21, x22, [sp, #32]
 284:	stp	x23, x24, [sp, #48]
 288:	cbz	x1, 298 <ss_add_info_dir+0x28>
 28c:	mov	x19, x1
 290:	ldrb	w1, [x1]
 294:	cbnz	w1, 2b8 <ss_add_info_dir+0x48>
 298:	mov	w0, #0x6d03                	// #27907
 29c:	movk	w0, #0xb, lsl #16
 2a0:	str	w0, [x20]
 2a4:	ldp	x19, x20, [sp, #16]
 2a8:	ldp	x21, x22, [sp, #32]
 2ac:	ldp	x23, x24, [sp, #48]
 2b0:	ldp	x29, x30, [sp], #64
 2b4:	ret
 2b8:	adrp	x1, 0 <_ss_table>
 2bc:	ldr	x1, [x1]
 2c0:	ldr	x23, [x1, w0, sxtw #3]
 2c4:	mov	x0, x19
 2c8:	bl	0 <opendir>
 2cc:	cbnz	x0, 2dc <ss_add_info_dir+0x6c>
 2d0:	bl	0 <__errno_location>
 2d4:	ldr	w0, [x0]
 2d8:	b	2a0 <ss_add_info_dir+0x30>
 2dc:	bl	0 <closedir>
 2e0:	ldr	x0, [x23, #40]
 2e4:	mov	x2, #0x0                   	// #0
 2e8:	sub	x4, x0, #0x8
 2ec:	mov	w1, w2
 2f0:	lsl	x24, x2, #3
 2f4:	mov	x22, x2
 2f8:	add	x2, x2, #0x1
 2fc:	ldr	x3, [x4, x2, lsl #3]
 300:	cbnz	x3, 2ec <ss_add_info_dir+0x7c>
 304:	add	w1, w1, #0x2
 308:	sbfiz	x1, x1, #3, #32
 30c:	bl	0 <realloc>
 310:	mov	x21, x0
 314:	cbnz	x0, 320 <ss_add_info_dir+0xb0>
 318:	str	xzr, [x23, #40]
 31c:	b	2d0 <ss_add_info_dir+0x60>
 320:	add	x22, x22, #0x1
 324:	str	x21, [x23, #40]
 328:	mov	x0, x19
 32c:	str	xzr, [x21, x22, lsl #3]
 330:	bl	0 <strlen>
 334:	add	w0, w0, #0x1
 338:	bl	0 <malloc>
 33c:	str	x0, [x21, x24]
 340:	mov	x1, x19
 344:	bl	0 <strcpy>
 348:	str	wzr, [x20]
 34c:	b	2a4 <ss_add_info_dir+0x34>

0000000000000350 <ss_delete_info_dir>:
 350:	stp	x29, x30, [sp, #-48]!
 354:	mov	x29, sp
 358:	str	x21, [sp, #32]
 35c:	mov	x21, x1
 360:	adrp	x1, 0 <_ss_table>
 364:	stp	x19, x20, [sp, #16]
 368:	mov	x20, x2
 36c:	ldr	x1, [x1]
 370:	ldr	x0, [x1, w0, sxtw #3]
 374:	ldr	x19, [x0, #40]
 378:	ldr	x0, [x19]
 37c:	cbnz	x0, 390 <ss_delete_info_dir+0x40>
 380:	mov	w0, #0x6d03                	// #27907
 384:	movk	w0, #0xb, lsl #16
 388:	str	w0, [x20]
 38c:	b	3b0 <ss_delete_info_dir+0x60>
 390:	mov	x1, x21
 394:	bl	0 <strcmp>
 398:	add	x1, x19, #0x8
 39c:	cbnz	w0, 3c0 <ss_delete_info_dir+0x70>
 3a0:	ldr	x0, [x19, #8]
 3a4:	str	x0, [x19], #8
 3a8:	cbnz	x0, 3a0 <ss_delete_info_dir+0x50>
 3ac:	str	wzr, [x20]
 3b0:	ldp	x19, x20, [sp, #16]
 3b4:	ldr	x21, [sp, #32]
 3b8:	ldp	x29, x30, [sp], #48
 3bc:	ret
 3c0:	mov	x19, x1
 3c4:	b	378 <ss_delete_info_dir+0x28>

execute_cmd.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <really_execute_command>:
   0:	stp	x29, x30, [sp, #-112]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	mov	w22, w0
  10:	adrp	x0, 0 <_ss_table>
  14:	stp	x19, x20, [sp, #16]
  18:	ldr	x0, [x0]
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	w23, w1
  24:	stp	x25, x26, [sp, #64]
  28:	mov	x25, x2
  2c:	ldr	x19, [x0, w22, sxtw #3]
  30:	stp	x27, x28, [sp, #80]
  34:	ldr	x24, [x19, #64]
  38:	ldr	x0, [x24]
  3c:	cbnz	x0, 4c <really_execute_command+0x4c>
  40:	mov	w21, #0x6d04                	// #27908
  44:	movk	w21, #0xb, lsl #16
  48:	b	a8 <really_execute_command+0xa8>
  4c:	ldr	x27, [x25]
  50:	ldr	x20, [x0, #8]
  54:	ldr	x1, [x27]
  58:	str	w23, [x19, #16]
  5c:	str	x27, [x19, #24]
  60:	ldr	x26, [x20]
  64:	cbnz	x26, dc <really_execute_command+0xdc>
  68:	add	x24, x24, #0x8
  6c:	b	38 <really_execute_command+0x38>
  70:	str	x1, [sp, #104]
  74:	bl	0 <strcmp>
  78:	mov	w21, w0
  7c:	ldr	x1, [sp, #104]
  80:	cbnz	w0, c8 <really_execute_command+0xc8>
  84:	ldr	x4, [x20, #8]
  88:	mov	w2, w22
  8c:	ldr	x3, [x19, #48]
  90:	mov	x1, x27
  94:	ldr	x0, [x26]
  98:	str	x0, [x19, #32]
  9c:	mov	w0, w23
  a0:	blr	x4
  a4:	str	xzr, [x19, #32]
  a8:	mov	w0, w21
  ac:	ldp	x19, x20, [sp, #16]
  b0:	ldp	x21, x22, [sp, #32]
  b4:	ldp	x23, x24, [sp, #48]
  b8:	ldp	x25, x26, [sp, #64]
  bc:	ldp	x27, x28, [sp, #80]
  c0:	ldp	x29, x30, [sp], #112
  c4:	ret
  c8:	add	x28, x28, #0x8
  cc:	ldr	x0, [x28]
  d0:	cbnz	x0, 70 <really_execute_command+0x70>
  d4:	add	x20, x20, #0x20
  d8:	b	60 <really_execute_command+0x60>
  dc:	mov	x28, x26
  e0:	b	cc <really_execute_command+0xcc>

00000000000000e4 <ss_execute_command>:
  e4:	stp	x29, x30, [sp, #-64]!
  e8:	mov	x29, sp
  ec:	stp	x19, x20, [sp, #16]
  f0:	mov	x19, x1
  f4:	mov	w20, w0
  f8:	mov	w0, #0x0                   	// #0
  fc:	str	x21, [sp, #32]
 100:	ldr	x2, [x1], #8
 104:	mov	w21, w0
 108:	add	w0, w0, #0x1
 10c:	cbnz	x2, 100 <ss_execute_command+0x1c>
 110:	sbfiz	x0, x0, #3, #32
 114:	bl	0 <malloc>
 118:	mov	x2, #0x0                   	// #0
 11c:	str	x0, [sp, #56]
 120:	ldr	x1, [x19, x2, lsl #3]
 124:	str	x1, [x0, x2, lsl #3]
 128:	add	x2, x2, #0x1
 12c:	cmp	w21, w2
 130:	b.ge	120 <ss_execute_command+0x3c>  // b.tcont
 134:	add	x2, sp, #0x38
 138:	mov	w1, w21
 13c:	mov	w0, w20
 140:	bl	0 <really_execute_command>
 144:	mov	w19, w0
 148:	ldr	x0, [sp, #56]
 14c:	bl	0 <free>
 150:	mov	w0, w19
 154:	ldp	x19, x20, [sp, #16]
 158:	ldr	x21, [sp, #32]
 15c:	ldp	x29, x30, [sp], #64
 160:	ret

0000000000000164 <ss_execute_line>:
 164:	stp	x29, x30, [sp, #-48]!
 168:	mov	x29, sp
 16c:	stp	x19, x20, [sp, #16]
 170:	mov	w20, w0
 174:	ldrb	w0, [x1]
 178:	cmp	w0, #0x20
 17c:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 180:	b.eq	1c4 <ss_execute_line+0x60>  // b.none
 184:	cmp	w0, #0x21
 188:	b.ne	1cc <ss_execute_line+0x68>  // b.any
 18c:	adrp	x0, 0 <_ss_table>
 190:	ldr	x0, [x0]
 194:	ldr	x0, [x0, w20, sxtw #3]
 198:	ldrb	w0, [x0, #80]
 19c:	tbnz	w0, #0, 208 <ss_execute_line+0xa4>
 1a0:	add	x0, x1, #0x1
 1a4:	bl	0 <system>
 1a8:	tbz	w0, #31, 214 <ss_execute_line+0xb0>
 1ac:	bl	0 <__errno_location>
 1b0:	ldr	w19, [x0]
 1b4:	mov	w0, w19
 1b8:	ldp	x19, x20, [sp, #16]
 1bc:	ldp	x29, x30, [sp], #48
 1c0:	ret
 1c4:	add	x1, x1, #0x1
 1c8:	b	174 <ss_execute_line+0x10>
 1cc:	add	x2, sp, #0x24
 1d0:	mov	w0, w20
 1d4:	bl	0 <ss_parse>
 1d8:	ldr	w19, [sp, #36]
 1dc:	str	x0, [sp, #40]
 1e0:	cbnz	w19, 1ec <ss_execute_line+0x88>
 1e4:	bl	0 <free>
 1e8:	b	1b4 <ss_execute_line+0x50>
 1ec:	mov	w1, w19
 1f0:	add	x2, sp, #0x28
 1f4:	mov	w0, w20
 1f8:	bl	0 <really_execute_command>
 1fc:	mov	w19, w0
 200:	ldr	x0, [sp, #40]
 204:	b	1e4 <ss_execute_line+0x80>
 208:	mov	w19, #0x6d0a                	// #27914
 20c:	movk	w19, #0xb, lsl #16
 210:	b	1b4 <ss_execute_line+0x50>
 214:	mov	w19, #0x0                   	// #0
 218:	b	1b4 <ss_execute_line+0x50>

listen.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <listen_int_handler>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x0, 0 <stdout>
   8:	mov	x29, sp
   c:	ldr	x1, [x0]
  10:	mov	w0, #0xa                   	// #10
  14:	bl	0 <putc>
  18:	adrp	x1, 0 <listen_int_handler>
  1c:	mov	w0, #0x2                   	// #2
  20:	add	x1, x1, #0x0
  24:	bl	0 <signal>
  28:	adrp	x0, 0 <listen_int_handler>
  2c:	mov	w1, #0x1                   	// #1
  30:	add	x0, x0, #0x0
  34:	bl	0 <longjmp>

0000000000000038 <print_prompt>:
  38:	adrp	x0, 0 <listen_int_handler>
  3c:	ldr	x0, [x0]
  40:	ldr	x1, [x0, #120]
  44:	cbz	x1, 50 <print_prompt+0x18>
  48:	mov	x16, x1
  4c:	br	x16
  50:	stp	x29, x30, [sp, #-32]!
  54:	mov	x29, sp
  58:	ldr	x0, [x0, #56]
  5c:	str	x19, [sp, #16]
  60:	adrp	x19, 0 <stdout>
  64:	ldr	x1, [x19]
  68:	bl	0 <fputs>
  6c:	ldr	x0, [x19]
  70:	ldr	x19, [sp, #16]
  74:	ldp	x29, x30, [sp], #32
  78:	b	0 <fflush>

000000000000007c <cmd_generator>:
  7c:	stp	x29, x30, [sp, #-64]!
  80:	mov	x29, sp
  84:	stp	x19, x20, [sp, #16]
  88:	adrp	x19, 0 <listen_int_handler>
  8c:	mov	x20, x0
  90:	stp	x21, x22, [sp, #32]
  94:	add	x19, x19, #0x0
  98:	str	x23, [sp, #48]
  9c:	cbnz	w1, c8 <cmd_generator+0x4c>
  a0:	bl	0 <strlen>
  a4:	str	w0, [x19, #320]
  a8:	ldr	x0, [x19, #312]
  ac:	ldr	x0, [x0, #64]
  b0:	str	x0, [x19, #328]
  b4:	cbz	x0, 17c <cmd_generator+0x100>
  b8:	ldr	x0, [x0]
  bc:	cbz	x0, 17c <cmd_generator+0x100>
  c0:	str	wzr, [x19, #336]
  c4:	str	xzr, [x19, #344]
  c8:	ldrsw	x23, [x19, #320]
  cc:	ldr	x0, [x19, #344]
  d0:	cbz	x0, dc <cmd_generator+0x60>
  d4:	ldr	x0, [x0]
  d8:	cbnz	x0, 11c <cmd_generator+0xa0>
  dc:	ldr	x0, [x19, #328]
  e0:	ldr	x1, [x0]
  e4:	ldr	x2, [x1, #8]
  e8:	ldr	w1, [x19, #336]
  ec:	add	w3, w1, #0x1
  f0:	str	w3, [x19, #336]
  f4:	sbfiz	x1, x1, #5, #32
  f8:	ldr	x1, [x2, x1]
  fc:	str	x1, [x19, #344]
 100:	cbnz	x1, 11c <cmd_generator+0xa0>
 104:	add	x1, x0, #0x8
 108:	str	x1, [x19, #328]
 10c:	ldr	x0, [x0, #8]
 110:	cbz	x0, 17c <cmd_generator+0x100>
 114:	str	wzr, [x19, #336]
 118:	b	cc <cmd_generator+0x50>
 11c:	ldr	x21, [x19, #344]
 120:	mov	x2, x23
 124:	mov	x1, x20
 128:	ldr	x22, [x21], #8
 12c:	mov	x0, x22
 130:	bl	0 <strncmp>
 134:	cbnz	w0, 174 <cmd_generator+0xf8>
 138:	mov	x0, x22
 13c:	bl	0 <strlen>
 140:	add	x0, x0, #0x1
 144:	bl	0 <malloc>
 148:	mov	x20, x0
 14c:	cbz	x0, 158 <cmd_generator+0xdc>
 150:	mov	x1, x22
 154:	bl	0 <strcpy>
 158:	str	x21, [x19, #344]
 15c:	mov	x0, x20
 160:	ldp	x19, x20, [sp, #16]
 164:	ldp	x21, x22, [sp, #32]
 168:	ldr	x23, [sp, #48]
 16c:	ldp	x29, x30, [sp], #64
 170:	ret
 174:	str	x21, [x19, #344]
 178:	b	cc <cmd_generator+0x50>
 17c:	mov	x20, #0x0                   	// #0
 180:	b	15c <cmd_generator+0xe0>

0000000000000184 <ss_listen>:
 184:	mov	x12, #0x22a0                	// #8864
 188:	sub	sp, sp, x12
 18c:	stp	x29, x30, [sp]
 190:	mov	x29, sp
 194:	stp	x19, x20, [sp, #16]
 198:	adrp	x19, 0 <listen_int_handler>
 19c:	add	x19, x19, #0x0
 1a0:	str	w0, [sp, #76]
 1a4:	stp	x21, x22, [sp, #32]
 1a8:	ldr	w1, [sp, #76]
 1ac:	ldr	x0, [x19, #312]
 1b0:	str	x0, [sp, #80]
 1b4:	adrp	x0, 0 <_ss_table>
 1b8:	str	x23, [sp, #48]
 1bc:	str	xzr, [x19, #352]
 1c0:	ldr	x0, [x0]
 1c4:	ldr	x0, [x0, w1, sxtw #3]
 1c8:	str	x0, [sp, #64]
 1cc:	str	x0, [x19, #312]
 1d0:	str	wzr, [x0, #136]
 1d4:	add	x0, sp, #0xe8
 1d8:	bl	0 <sigemptyset>
 1dc:	add	x0, sp, #0xe8
 1e0:	mov	w1, #0x2                   	// #2
 1e4:	bl	0 <sigaddset>
 1e8:	add	x2, sp, #0x68
 1ec:	add	x1, sp, #0xe8
 1f0:	mov	w0, #0x0                   	// #0
 1f4:	bl	0 <sigprocmask>
 1f8:	mov	x2, #0x138                 	// #312
 1fc:	mov	x1, x19
 200:	add	x0, sp, #0x168
 204:	bl	0 <memcpy>
 208:	adrp	x1, 0 <listen_int_handler>
 20c:	mov	w0, #0x2                   	// #2
 210:	add	x1, x1, #0x0
 214:	bl	0 <signal>
 218:	str	x0, [sp, #88]
 21c:	mov	x0, x19
 220:	bl	0 <_setjmp>
 224:	add	x23, sp, #0x2a0
 228:	adrp	x22, 0 <listen_int_handler>
 22c:	adrp	x21, 0 <listen_int_handler>
 230:	add	x22, x22, #0x0
 234:	add	x21, x21, #0x0
 238:	add	x1, sp, #0x68
 23c:	mov	x2, #0x0                   	// #0
 240:	mov	w0, #0x2                   	// #2
 244:	bl	0 <sigprocmask>
 248:	ldr	x0, [sp, #64]
 24c:	ldr	w0, [x0, #136]
 250:	cbz	w0, 25c <ss_listen+0xd8>
 254:	mov	w19, #0x0                   	// #0
 258:	b	2ac <ss_listen+0x128>
 25c:	mov	x1, x22
 260:	mov	w0, #0x12                  	// #18
 264:	bl	0 <signal>
 268:	cmp	x0, x22
 26c:	b.eq	274 <ss_listen+0xf0>  // b.none
 270:	str	x0, [x21, #352]
 274:	ldr	x0, [sp, #64]
 278:	ldr	x1, [x0, #104]
 27c:	cbz	x1, 2fc <ss_listen+0x178>
 280:	ldr	x0, [x21, #312]
 284:	ldr	x0, [x0, #56]
 288:	blr	x1
 28c:	mov	x19, x0
 290:	cbnz	x0, 330 <ss_listen+0x1ac>
 294:	adrp	x0, 0 <listen_int_handler>
 298:	mov	w19, #0x6d06                	// #27910
 29c:	movk	w19, #0xb, lsl #16
 2a0:	ldr	x1, [x0]
 2a4:	mov	w0, #0x12                  	// #18
 2a8:	bl	0 <signal>
 2ac:	ldr	x1, [sp, #88]
 2b0:	mov	w0, #0x2                   	// #2
 2b4:	bl	0 <signal>
 2b8:	adrp	x3, 0 <listen_int_handler>
 2bc:	add	x3, x3, #0x0
 2c0:	add	x1, sp, #0x168
 2c4:	mov	x0, x3
 2c8:	mov	x2, #0x138                 	// #312
 2cc:	bl	0 <memcpy>
 2d0:	mov	x3, x0
 2d4:	ldr	x0, [sp, #80]
 2d8:	mov	x12, #0x22a0                	// #8864
 2dc:	ldp	x29, x30, [sp]
 2e0:	ldp	x21, x22, [sp, #32]
 2e4:	ldr	x23, [sp, #48]
 2e8:	str	x0, [x3, #312]
 2ec:	mov	w0, w19
 2f0:	ldp	x19, x20, [sp, #16]
 2f4:	add	sp, sp, x12
 2f8:	ret
 2fc:	mov	w0, #0x0                   	// #0
 300:	bl	38 <print_prompt>
 304:	adrp	x0, 0 <stdin>
 308:	mov	w1, #0x2000                	// #8192
 30c:	ldr	x2, [x0]
 310:	mov	x0, x23
 314:	bl	0 <fgets>
 318:	cmp	x23, x0
 31c:	mov	x0, #0x2020                	// #8224
 320:	add	x0, sp, x0
 324:	strb	wzr, [x0, #639]
 328:	b.ne	294 <ss_listen+0x110>  // b.any
 32c:	mov	x19, x23
 330:	mov	x0, x19
 334:	mov	w1, #0xa                   	// #10
 338:	bl	0 <strchr>
 33c:	cbnz	x0, 378 <ss_listen+0x1f4>
 340:	ldr	x1, [x21, #352]
 344:	mov	w0, #0x12                  	// #18
 348:	bl	0 <signal>
 34c:	ldr	x0, [sp, #64]
 350:	ldr	x1, [x0, #112]
 354:	cbnz	x1, 388 <ss_listen+0x204>
 358:	ldr	w0, [sp, #76]
 35c:	mov	x1, x19
 360:	bl	0 <ss_execute_line>
 364:	sub	w0, w0, #0xb6, lsl #12
 368:	subs	w0, w0, #0xd04
 36c:	b.ne	3e8 <ss_listen+0x264>  // b.any
 370:	mov	x20, x19
 374:	b	398 <ss_listen+0x214>
 378:	strb	wzr, [x0]
 37c:	cmp	x0, x19
 380:	b.ne	340 <ss_listen+0x1bc>  // b.any
 384:	b	248 <ss_listen+0xc4>
 388:	mov	x0, x19
 38c:	blr	x1
 390:	b	358 <ss_listen+0x1d4>
 394:	add	x20, x20, #0x1
 398:	ldrb	w0, [x20]
 39c:	cmp	w0, #0x20
 3a0:	ccmp	w0, #0x9, #0x4, ne  // ne = any
 3a4:	b.eq	394 <ss_listen+0x210>  // b.none
 3a8:	mov	x0, x20
 3ac:	mov	w1, #0x20                  	// #32
 3b0:	bl	0 <strchr>
 3b4:	cbz	x0, 3bc <ss_listen+0x238>
 3b8:	strb	wzr, [x0]
 3bc:	mov	x0, x20
 3c0:	mov	w1, #0x9                   	// #9
 3c4:	bl	0 <strchr>
 3c8:	cbz	x0, 3d0 <ss_listen+0x24c>
 3cc:	strb	wzr, [x0]
 3d0:	ldr	w0, [sp, #76]
 3d4:	adrp	x2, 0 <listen_int_handler>
 3d8:	mov	x3, x20
 3dc:	add	x2, x2, #0x0
 3e0:	mov	x1, #0x0                   	// #0
 3e4:	bl	0 <ss_error>
 3e8:	ldr	x0, [sp, #64]
 3ec:	ldr	x0, [x0, #104]
 3f0:	cbz	x0, 248 <ss_listen+0xc4>
 3f4:	mov	x0, x19
 3f8:	bl	0 <free>
 3fc:	b	248 <ss_listen+0xc4>

0000000000000400 <ss_abort_subsystem>:
 400:	adrp	x2, 0 <_ss_table>
 404:	ldr	x2, [x2]
 408:	ldr	x0, [x2, w0, sxtw #3]
 40c:	mov	w2, #0x1                   	// #1
 410:	stp	w2, w1, [x0, #136]
 414:	ret

0000000000000418 <ss_quit>:
 418:	mov	w0, w2
 41c:	mov	w1, #0x0                   	// #0
 420:	b	400 <ss_abort_subsystem>

0000000000000424 <ss_rl_completion>:
 424:	cbnz	w1, 448 <ss_rl_completion+0x24>
 428:	adrp	x1, 0 <listen_int_handler>
 42c:	ldr	x1, [x1]
 430:	ldr	x2, [x1, #128]
 434:	cbz	x2, 448 <ss_rl_completion+0x24>
 438:	mov	x16, x2
 43c:	adrp	x1, 0 <listen_int_handler>
 440:	add	x1, x1, #0x0
 444:	br	x16
 448:	mov	x0, #0x0                   	// #0
 44c:	ret

parse.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_parse>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x1
  10:	stp	x21, x22, [sp, #32]
  14:	mov	w22, w0
  18:	mov	x0, #0x8                   	// #8
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	x23, x2
  24:	stp	x25, x26, [sp, #64]
  28:	bl	0 <malloc>
  2c:	mov	x20, x0
  30:	cbnz	x0, 6c <ss_parse+0x6c>
  34:	bl	0 <__errno_location>
  38:	ldrsw	x1, [x0]
  3c:	adrp	x2, 0 <ss_parse>
  40:	mov	w0, w22
  44:	add	x2, x2, #0x0
  48:	bl	0 <ss_error>
  4c:	str	wzr, [x23]
  50:	mov	x0, x20
  54:	ldp	x19, x20, [sp, #16]
  58:	ldp	x21, x22, [sp, #32]
  5c:	ldp	x23, x24, [sp, #48]
  60:	ldp	x25, x26, [sp, #64]
  64:	ldp	x29, x30, [sp], #80
  68:	ret
  6c:	mov	x1, x19
  70:	mov	x26, x0
  74:	mov	w25, #0x0                   	// #0
  78:	mov	w0, #0x0                   	// #0
  7c:	str	xzr, [x20]
  80:	cbz	w0, d0 <ss_parse+0xd0>
  84:	ldrb	w2, [x19]
  88:	cmp	w0, #0x1
  8c:	b.eq	174 <ss_parse+0x174>  // b.none
  90:	mov	x24, x19
  94:	mov	x19, x1
  98:	ldrb	w1, [x24]
  9c:	cmp	w0, #0x2
  a0:	b.ne	ec <ss_parse+0xec>  // b.any
  a4:	cbnz	w1, 1b8 <ss_parse+0x1b8>
  a8:	adrp	x2, 0 <ss_parse>
  ac:	add	x2, x2, #0x0
  b0:	mov	x1, #0x0                   	// #0
  b4:	mov	w0, w22
  b8:	bl	0 <ss_error>
  bc:	mov	x0, x20
  c0:	mov	x20, #0x0                   	// #0
  c4:	bl	0 <free>
  c8:	str	wzr, [x23]
  cc:	b	50 <ss_parse+0x50>
  d0:	ldrb	w2, [x19]
  d4:	cbz	w2, 17c <ss_parse+0x17c>
  d8:	cmp	w2, #0x20
  dc:	ccmp	w2, #0x9, #0x4, ne  // ne = any
  e0:	b.ne	f8 <ss_parse+0xf8>  // b.any
  e4:	add	x24, x19, #0x1
  e8:	mov	x19, x1
  ec:	mov	x1, x19
  f0:	mov	x19, x24
  f4:	b	80 <ss_parse+0x80>
  f8:	add	w21, w25, #0x2
  fc:	cmp	w2, #0x22
 100:	sbfiz	x21, x21, #3, #32
 104:	b.ne	144 <ss_parse+0x144>  // b.any
 108:	mov	x0, x20
 10c:	mov	x1, x21
 110:	add	x24, x19, #0x1
 114:	bl	0 <realloc>
 118:	mov	x20, x0
 11c:	cbnz	x0, 12c <ss_parse+0x12c>
 120:	mov	x0, x26
 124:	bl	0 <free>
 128:	b	4c <ss_parse+0x4c>
 12c:	add	x21, x0, x21
 130:	mov	x26, x0
 134:	add	w25, w25, #0x1
 138:	mov	w0, #0x2                   	// #2
 13c:	stp	x19, xzr, [x21, #-16]
 140:	b	ec <ss_parse+0xec>
 144:	mov	x0, x20
 148:	mov	x1, x21
 14c:	bl	0 <realloc>
 150:	mov	x20, x0
 154:	cbz	x0, 120 <ss_parse+0x120>
 158:	add	x21, x0, x21
 15c:	mov	x26, x0
 160:	add	w25, w25, #0x1
 164:	mov	x24, x19
 168:	mov	w0, #0x1                   	// #1
 16c:	stp	x19, xzr, [x21, #-16]
 170:	b	ec <ss_parse+0xec>
 174:	cbnz	w2, 184 <ss_parse+0x184>
 178:	strb	wzr, [x1]
 17c:	str	w25, [x23]
 180:	b	50 <ss_parse+0x50>
 184:	cmp	w2, #0x20
 188:	add	x19, x19, #0x1
 18c:	ccmp	w2, #0x9, #0x4, ne  // ne = any
 190:	b.ne	1a0 <ss_parse+0x1a0>  // b.any
 194:	mov	w0, #0x0                   	// #0
 198:	strb	wzr, [x1], #1
 19c:	b	84 <ss_parse+0x84>
 1a0:	cmp	w2, #0x22
 1a4:	b.eq	1b0 <ss_parse+0x1b0>  // b.none
 1a8:	strb	w2, [x1], #1
 1ac:	b	84 <ss_parse+0x84>
 1b0:	mov	w0, #0x2                   	// #2
 1b4:	b	84 <ss_parse+0x84>
 1b8:	add	x2, x24, #0x1
 1bc:	cmp	w1, #0x22
 1c0:	b.ne	1e0 <ss_parse+0x1e0>  // b.any
 1c4:	ldrb	w1, [x24, #1]
 1c8:	cmp	w1, #0x22
 1cc:	b.ne	1e8 <ss_parse+0x1e8>  // b.any
 1d0:	add	x2, x24, #0x2
 1d4:	strb	w1, [x19], #1
 1d8:	mov	x24, x2
 1dc:	b	98 <ss_parse+0x98>
 1e0:	strb	w1, [x19], #1
 1e4:	b	1d8 <ss_parse+0x1d8>
 1e8:	mov	w0, #0x1                   	// #1
 1ec:	b	1d8 <ss_parse+0x1d8>

error.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_name>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	adrp	x1, 0 <_ss_table>
   8:	mov	x29, sp
   c:	ldr	x1, [x1]
  10:	stp	x19, x20, [sp, #16]
  14:	stp	x21, x22, [sp, #32]
  18:	ldr	x20, [x1, w0, sxtw #3]
  1c:	ldr	x22, [x20, #32]
  20:	ldr	x21, [x20]
  24:	mov	x0, x21
  28:	bl	0 <strlen>
  2c:	mov	x19, x0
  30:	cbnz	x22, 60 <ss_name+0x60>
  34:	add	w0, w0, #0x1
  38:	bl	0 <malloc>
  3c:	mov	x19, x0
  40:	cbz	x0, 4c <ss_name+0x4c>
  44:	mov	x1, x21
  48:	bl	0 <strcpy>
  4c:	mov	x0, x19
  50:	ldp	x19, x20, [sp, #16]
  54:	ldp	x21, x22, [sp, #32]
  58:	ldp	x29, x30, [sp], #48
  5c:	ret
  60:	add	x19, x19, #0x4
  64:	mov	x0, x22
  68:	bl	0 <strlen>
  6c:	add	x0, x19, x0
  70:	bl	0 <malloc>
  74:	mov	x19, x0
  78:	mov	x2, #0x0                   	// #0
  7c:	ldrb	w1, [x21, x2]
  80:	add	x0, x19, x2
  84:	cbnz	w1, a8 <ss_name+0xa8>
  88:	mov	w1, #0x2820                	// #10272
  8c:	strh	w1, [x0], #2
  90:	ldr	x1, [x20, #32]
  94:	ldrb	w2, [x1]
  98:	cbnz	w2, b4 <ss_name+0xb4>
  9c:	mov	w1, #0x29                  	// #41
  a0:	strh	w1, [x0]
  a4:	b	4c <ss_name+0x4c>
  a8:	strb	w1, [x19, x2]
  ac:	add	x2, x2, #0x1
  b0:	b	7c <ss_name+0x7c>
  b4:	add	x1, x1, #0x1
  b8:	strb	w2, [x0], #1
  bc:	b	94 <ss_name+0x94>

00000000000000c0 <ss_error>:
  c0:	stp	x29, x30, [sp, #-288]!
  c4:	mov	x29, sp
  c8:	stp	x19, x20, [sp, #16]
  cc:	mov	x20, x1
  d0:	add	x1, sp, #0x120
  d4:	stp	x1, x1, [sp, #80]
  d8:	add	x1, sp, #0xf0
  dc:	str	x1, [sp, #96]
  e0:	mov	w1, #0xffffffd8            	// #-40
  e4:	str	w1, [sp, #104]
  e8:	mov	w1, #0xffffff80            	// #-128
  ec:	str	x21, [sp, #32]
  f0:	mov	x21, x2
  f4:	str	w1, [sp, #108]
  f8:	str	q0, [sp, #112]
  fc:	str	q1, [sp, #128]
 100:	str	q2, [sp, #144]
 104:	str	q3, [sp, #160]
 108:	str	q4, [sp, #176]
 10c:	str	q5, [sp, #192]
 110:	str	q6, [sp, #208]
 114:	str	q7, [sp, #224]
 118:	stp	x3, x4, [sp, #248]
 11c:	stp	x5, x6, [sp, #264]
 120:	str	x7, [sp, #280]
 124:	bl	0 <ss_name>
 128:	ldp	x2, x3, [sp, #80]
 12c:	stp	x2, x3, [sp, #48]
 130:	mov	x1, x20
 134:	ldp	x2, x3, [sp, #96]
 138:	stp	x2, x3, [sp, #64]
 13c:	mov	x19, x0
 140:	add	x3, sp, #0x30
 144:	mov	x2, x21
 148:	bl	0 <com_err_va>
 14c:	mov	x0, x19
 150:	bl	0 <free>
 154:	ldp	x19, x20, [sp, #16]
 158:	ldr	x21, [sp, #32]
 15c:	ldp	x29, x30, [sp], #288
 160:	ret

0000000000000164 <ss_perror>:
 164:	mov	x3, x2
 168:	adrp	x2, 0 <ss_name>
 16c:	add	x2, x2, #0x0
 170:	b	c0 <ss_error>

prompt.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_set_prompt>:
   0:	adrp	x2, 0 <_ss_table>
   4:	ldr	x2, [x2]
   8:	ldr	x0, [x2, w0, sxtw #3]
   c:	str	x1, [x0, #56]
  10:	ret

0000000000000014 <ss_get_prompt>:
  14:	adrp	x1, 0 <_ss_table>
  18:	ldr	x1, [x1]
  1c:	ldr	x0, [x1, w0, sxtw #3]
  20:	ldr	x0, [x0, #56]
  24:	ret

request_tbl.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_add_request_table>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x23, x24, [sp, #48]
   c:	mov	x23, x1
  10:	adrp	x1, 0 <_ss_table>
  14:	stp	x21, x22, [sp, #32]
  18:	mov	x21, x3
  1c:	ldr	x1, [x1]
  20:	stp	x19, x20, [sp, #16]
  24:	mov	w20, w2
  28:	mov	x2, #0x0                   	// #0
  2c:	ldr	x24, [x1, w0, sxtw #3]
  30:	ldr	x0, [x24, #64]
  34:	sub	x3, x0, #0x8
  38:	mov	w19, w2
  3c:	add	x2, x2, #0x1
  40:	ldr	x1, [x3, x2, lsl #3]
  44:	cbnz	x1, 38 <ss_add_request_table+0x38>
  48:	add	w22, w19, #0x2
  4c:	sbfiz	x22, x22, #3, #32
  50:	mov	x1, x22
  54:	bl	0 <realloc>
  58:	cbnz	x0, 7c <ss_add_request_table+0x7c>
  5c:	bl	0 <__errno_location>
  60:	ldr	w0, [x0]
  64:	str	w0, [x21]
  68:	ldp	x19, x20, [sp, #16]
  6c:	ldp	x21, x22, [sp, #32]
  70:	ldp	x23, x24, [sp, #48]
  74:	ldp	x29, x30, [sp], #64
  78:	ret
  7c:	cmp	w19, w20
  80:	sxtw	x4, w19
  84:	csel	w20, w19, w20, le
  88:	add	x1, x0, #0x8
  8c:	str	x0, [x24, #64]
  90:	cmp	w20, w4
  94:	b.le	ac <ss_add_request_table+0xac>
  98:	str	x23, [x0, w20, sxtw #3]
  9c:	add	x0, x0, x22
  a0:	stur	xzr, [x0, #-8]
  a4:	str	wzr, [x21]
  a8:	b	68 <ss_add_request_table+0x68>
  ac:	ldr	x2, [x0, x4, lsl #3]
  b0:	str	x2, [x1, x4, lsl #3]
  b4:	sub	x4, x4, #0x1
  b8:	b	90 <ss_add_request_table+0x90>

00000000000000bc <ss_delete_request_table>:
  bc:	mov	w3, #0x6d08                	// #27912
  c0:	movk	w3, #0xb, lsl #16
  c4:	str	w3, [x2]
  c8:	adrp	x3, 0 <_ss_table>
  cc:	ldr	x3, [x3]
  d0:	ldr	x0, [x3, w0, sxtw #3]
  d4:	ldr	x0, [x0, #64]
  d8:	mov	x4, x0
  dc:	ldr	x3, [x4]
  e0:	cbnz	x3, ec <ss_delete_request_table+0x30>
  e4:	str	xzr, [x0]
  e8:	ret
  ec:	cmp	x3, x1
  f0:	b.eq	fc <ss_delete_request_table+0x40>  // b.none
  f4:	str	x3, [x0], #8
  f8:	str	wzr, [x2]
  fc:	add	x4, x4, #0x8
 100:	b	dc <ss_delete_request_table+0x20>

list_rqs.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_list_requests>:
   0:	stp	x29, x30, [sp, #-384]!
   4:	mov	x29, sp
   8:	add	x0, sp, #0x100
   c:	stp	x19, x20, [sp, #16]
  10:	mov	w20, w2
  14:	stp	x21, x22, [sp, #32]
  18:	stp	x23, x24, [sp, #48]
  1c:	stp	x25, x26, [sp, #64]
  20:	stp	x27, x28, [sp, #80]
  24:	bl	0 <sigemptyset>
  28:	mov	w1, #0x2                   	// #2
  2c:	add	x0, sp, #0x100
  30:	bl	0 <sigaddset>
  34:	add	x2, sp, #0x80
  38:	add	x1, sp, #0x100
  3c:	mov	w0, #0x0                   	// #0
  40:	bl	0 <sigprocmask>
  44:	mov	x1, #0x1                   	// #1
  48:	mov	w0, #0x2                   	// #2
  4c:	bl	0 <signal>
  50:	mov	x23, x0
  54:	bl	0 <ss_pager_create>
  58:	tbz	w0, #31, 90 <ss_list_requests+0x90>
  5c:	adrp	x0, 0 <ss_list_requests>
  60:	add	x0, x0, #0x0
  64:	bl	0 <perror>
  68:	mov	x1, x23
  6c:	mov	w0, #0x2                   	// #2
  70:	bl	0 <signal>
  74:	ldp	x19, x20, [sp, #16]
  78:	ldp	x21, x22, [sp, #32]
  7c:	ldp	x23, x24, [sp, #48]
  80:	ldp	x25, x26, [sp, #64]
  84:	ldp	x27, x28, [sp, #80]
  88:	ldp	x29, x30, [sp], #384
  8c:	ret
  90:	adrp	x21, 0 <_ss_table>
  94:	adrp	x1, 0 <ss_list_requests>
  98:	add	x1, x1, #0x0
  9c:	bl	0 <fdopen>
  a0:	add	x1, sp, #0x80
  a4:	mov	x19, x0
  a8:	mov	x2, #0x0                   	// #0
  ac:	mov	w0, #0x2                   	// #2
  b0:	bl	0 <sigprocmask>
  b4:	sbfiz	x20, x20, #3, #32
  b8:	ldr	x0, [x21]
  bc:	adrp	x1, 0 <ss_list_requests>
  c0:	add	x1, x1, #0x0
  c4:	adrp	x25, 0 <ss_list_requests>
  c8:	add	x25, x25, #0x0
  cc:	ldr	x0, [x0, x20]
  d0:	ldr	x2, [x0]
  d4:	mov	x0, x19
  d8:	bl	0 <fprintf>
  dc:	ldr	x0, [x21]
  e0:	ldr	x0, [x0, x20]
  e4:	ldr	x24, [x0, #64]
  e8:	ldr	x0, [x24]
  ec:	cbnz	x0, 104 <ss_list_requests+0x104>
  f0:	mov	x0, x19
  f4:	bl	0 <fclose>
  f8:	add	x0, sp, #0x7c
  fc:	bl	0 <wait>
 100:	b	68 <ss_list_requests+0x68>
 104:	ldr	x22, [x0, #8]
 108:	mov	w27, #0x19                  	// #25
 10c:	ldr	x21, [x22]
 110:	cbnz	x21, 11c <ss_list_requests+0x11c>
 114:	add	x24, x24, #0x8
 118:	b	e8 <ss_list_requests+0xe8>
 11c:	ldr	w0, [x22, #24]
 120:	and	w26, w0, #0x1
 124:	tbnz	w0, #0, 180 <ss_list_requests+0x180>
 128:	mov	w20, #0xfffffffe            	// #-2
 12c:	ldr	x2, [x21]
 130:	cbnz	x2, 188 <ss_list_requests+0x188>
 134:	cmp	w20, #0x17
 138:	b.le	14c <ss_list_requests+0x14c>
 13c:	mov	w20, #0x0                   	// #0
 140:	mov	x1, x19
 144:	mov	w0, #0xa                   	// #10
 148:	bl	0 <fputc>
 14c:	sub	w20, w27, w20
 150:	mov	x1, x19
 154:	add	w26, w26, #0x1
 158:	mov	w0, #0x20                  	// #32
 15c:	bl	0 <fputc>
 160:	cmp	w20, w26
 164:	b.gt	150 <ss_list_requests+0x150>
 168:	ldr	x0, [x22, #16]
 16c:	mov	x1, x19
 170:	bl	0 <fputs>
 174:	mov	x1, x19
 178:	mov	w0, #0xa                   	// #10
 17c:	bl	0 <fputc>
 180:	add	x22, x22, #0x20
 184:	b	10c <ss_list_requests+0x10c>
 188:	mov	x0, x2
 18c:	str	x2, [sp, #104]
 190:	bl	0 <strlen>
 194:	add	w28, w0, #0x2
 198:	ldr	x2, [sp, #104]
 19c:	mov	x1, x19
 1a0:	add	w20, w20, w28
 1a4:	mov	x0, x2
 1a8:	bl	0 <fputs>
 1ac:	ldr	x0, [x21, #8]
 1b0:	cbz	x0, 1c0 <ss_list_requests+0x1c0>
 1b4:	mov	x1, x19
 1b8:	mov	x0, x25
 1bc:	bl	0 <fputs>
 1c0:	add	x21, x21, #0x8
 1c4:	b	12c <ss_list_requests+0x12c>

pager.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_safe_getenv>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	mov	x19, x0
  10:	bl	0 <getuid>
  14:	mov	w20, w0
  18:	bl	0 <geteuid>
  1c:	cmp	w20, w0
  20:	b.ne	64 <ss_safe_getenv+0x64>  // b.any
  24:	bl	0 <getgid>
  28:	mov	w20, w0
  2c:	bl	0 <getegid>
  30:	cmp	w20, w0
  34:	b.ne	64 <ss_safe_getenv+0x64>  // b.any
  38:	mov	w4, #0x0                   	// #0
  3c:	mov	w3, #0x0                   	// #0
  40:	mov	w2, #0x0                   	// #0
  44:	mov	w1, #0x0                   	// #0
  48:	mov	w0, #0x3                   	// #3
  4c:	bl	0 <prctl>
  50:	cbz	w0, 64 <ss_safe_getenv+0x64>
  54:	mov	x0, x19
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x29, x30, [sp], #32
  60:	b	0 <secure_getenv>
  64:	mov	x0, #0x0                   	// #0
  68:	ldp	x19, x20, [sp, #16]
  6c:	ldp	x29, x30, [sp], #32
  70:	ret

0000000000000074 <ss_page_stdin>:
  74:	stp	x29, x30, [sp, #-240]!
  78:	mov	x29, sp
  7c:	stp	x19, x20, [sp, #16]
  80:	mov	w19, #0x3                   	// #3
  84:	mov	w0, w19
  88:	add	w19, w19, #0x1
  8c:	bl	0 <close>
  90:	cmp	w19, #0x20
  94:	b.ne	84 <ss_page_stdin+0x10>  // b.any
  98:	mov	x1, #0x0                   	// #0
  9c:	mov	w0, #0x2                   	// #2
  a0:	bl	0 <signal>
  a4:	adrp	x19, 0 <_ss_pager_name>
  a8:	add	x2, sp, #0x70
  ac:	mov	x1, #0x0                   	// #0
  b0:	mov	w0, #0x0                   	// #0
  b4:	bl	0 <sigprocmask>
  b8:	mov	w1, #0x2                   	// #2
  bc:	add	x0, sp, #0x70
  c0:	bl	0 <sigdelset>
  c4:	add	x1, sp, #0x70
  c8:	mov	x2, #0x0                   	// #0
  cc:	mov	w0, #0x2                   	// #2
  d0:	bl	0 <sigprocmask>
  d4:	ldr	x0, [x19]
  d8:	cbnz	x0, fc <ss_page_stdin+0x88>
  dc:	adrp	x0, 0 <ss_safe_getenv>
  e0:	add	x0, x0, #0x0
  e4:	bl	0 <ss_safe_getenv>
  e8:	cmp	x0, #0x0
  ec:	adrp	x1, 0 <ss_safe_getenv>
  f0:	add	x1, x1, #0x0
  f4:	csel	x0, x1, x0, eq  // eq = none
  f8:	str	x0, [x19]
  fc:	ldr	x1, [x19]
 100:	mov	x2, #0x0                   	// #0
 104:	mov	x0, x1
 108:	bl	0 <execlp>
 10c:	add	x1, sp, #0x20
 110:	mov	x2, #0x50                  	// #80
 114:	mov	w0, #0x0                   	// #0
 118:	bl	0 <read>
 11c:	cmp	w0, #0x0
 120:	b.gt	130 <ss_page_stdin+0xbc>
 124:	bl	0 <__errno_location>
 128:	ldr	w0, [x0]
 12c:	bl	0 <exit>
 130:	sxtw	x19, w0
 134:	add	x20, sp, #0x20
 138:	mov	x2, x19
 13c:	mov	x1, x20
 140:	mov	w0, #0x1                   	// #1
 144:	bl	0 <write>
 148:	tbz	x0, #63, 164 <ss_page_stdin+0xf0>
 14c:	bl	0 <__errno_location>
 150:	ldr	w0, [x0]
 154:	cmp	w0, #0xb
 158:	ccmp	w0, #0x4, #0x4, ne  // ne = any
 15c:	b.eq	138 <ss_page_stdin+0xc4>  // b.none
 160:	b	10c <ss_page_stdin+0x98>
 164:	add	x20, x20, x0
 168:	subs	x19, x19, x0
 16c:	b.ne	138 <ss_page_stdin+0xc4>  // b.any
 170:	b	10c <ss_page_stdin+0x98>

0000000000000174 <ss_pager_create>:
 174:	stp	x29, x30, [sp, #-32]!
 178:	mov	x29, sp
 17c:	add	x0, sp, #0x18
 180:	bl	0 <pipe>
 184:	cbnz	w0, 1cc <ss_pager_create+0x58>
 188:	bl	0 <fork>
 18c:	cmn	w0, #0x1
 190:	b.eq	1c4 <ss_pager_create+0x50>  // b.none
 194:	cbnz	w0, 1b8 <ss_pager_create+0x44>
 198:	ldr	w0, [sp, #24]
 19c:	mov	w1, #0x0                   	// #0
 1a0:	bl	0 <dup2>
 1a4:	cmn	w0, #0x1
 1a8:	b.ne	1b4 <ss_pager_create+0x40>  // b.any
 1ac:	mov	w0, #0x1                   	// #1
 1b0:	bl	0 <exit>
 1b4:	bl	74 <ss_page_stdin>
 1b8:	ldr	w0, [sp, #24]
 1bc:	bl	0 <close>
 1c0:	ldr	w0, [sp, #28]
 1c4:	ldp	x29, x30, [sp], #32
 1c8:	ret
 1cc:	mov	w0, #0xffffffff            	// #-1
 1d0:	b	1c4 <ss_pager_create+0x50>

requests.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_self_identify>:
   0:	adrp	x0, 0 <_ss_table>
   4:	ldr	x0, [x0]
   8:	ldr	x0, [x0, w2, sxtw #3]
   c:	ldp	x1, x2, [x0]
  10:	adrp	x0, 0 <ss_self_identify>
  14:	add	x0, x0, #0x0
  18:	b	0 <printf>

000000000000001c <ss_subsystem_name>:
  1c:	adrp	x0, 0 <_ss_table>
  20:	ldr	x0, [x0]
  24:	ldr	x0, [x0, w2, sxtw #3]
  28:	ldr	x0, [x0]
  2c:	b	0 <puts>

0000000000000030 <ss_subsystem_version>:
  30:	adrp	x0, 0 <_ss_table>
  34:	ldr	x0, [x0]
  38:	ldr	x0, [x0, w2, sxtw #3]
  3c:	ldr	x0, [x0, #8]
  40:	b	0 <puts>

0000000000000044 <ss_unimplemented>:
  44:	mov	x1, #0x6d0b                	// #27915
  48:	mov	w0, w2
  4c:	movk	x1, #0xb, lsl #16
  50:	adrp	x2, 0 <ss_self_identify>
  54:	add	x2, x2, #0x0
  58:	b	0 <ss_perror>

data.o:     file format elf64-littleaarch64


get_readline.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <ss_release_readline>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	x19, x0
  10:	ldr	x0, [x0, #88]
  14:	cbz	x0, 28 <ss_release_readline+0x28>
  18:	stp	xzr, xzr, [x19, #104]
  1c:	stp	xzr, xzr, [x19, #120]
  20:	bl	0 <dlclose>
  24:	str	xzr, [x19, #88]
  28:	ldr	x19, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

0000000000000034 <ss_get_readline>:
  34:	stp	x29, x30, [sp, #-48]!
  38:	adrp	x1, 0 <_ss_table>
  3c:	mov	x29, sp
  40:	ldr	x1, [x1]
  44:	stp	x21, x22, [sp, #32]
  48:	stp	x19, x20, [sp, #16]
  4c:	ldr	x21, [x1, w0, sxtw #3]
  50:	ldr	x0, [x21, #88]
  54:	cbnz	x0, 178 <ss_get_readline+0x144>
  58:	adrp	x0, 0 <ss_release_readline>
  5c:	add	x0, x0, #0x0
  60:	bl	0 <ss_safe_getenv>
  64:	mov	x19, x0
  68:	cbz	x0, 188 <ss_get_readline+0x154>
  6c:	ldrb	w1, [x0]
  70:	cbz	w1, 178 <ss_get_readline+0x144>
  74:	adrp	x1, 0 <ss_release_readline>
  78:	add	x1, x1, #0x0
  7c:	bl	0 <strcmp>
  80:	cbz	w0, 178 <ss_get_readline+0x144>
  84:	mov	x0, x19
  88:	bl	0 <strlen>
  8c:	add	x0, x0, #0x1
  90:	bl	0 <malloc>
  94:	mov	x22, x0
  98:	cbz	x0, 178 <ss_get_readline+0x144>
  9c:	mov	x1, x19
  a0:	mov	x19, x22
  a4:	bl	0 <strcpy>
  a8:	mov	x0, x19
  ac:	mov	w1, #0x3a                  	// #58
  b0:	bl	0 <strchr>
  b4:	mov	x20, x0
  b8:	cbz	x0, c0 <ss_get_readline+0x8c>
  bc:	strb	wzr, [x20], #1
  c0:	ldrb	w0, [x19]
  c4:	cbnz	w0, 19c <ss_get_readline+0x168>
  c8:	cbnz	x20, 194 <ss_get_readline+0x160>
  cc:	mov	x19, #0x0                   	// #0
  d0:	mov	x0, x22
  d4:	bl	0 <free>
  d8:	cbz	x19, 178 <ss_get_readline+0x144>
  dc:	str	x19, [x21, #88]
  e0:	mov	x0, x19
  e4:	adrp	x1, 0 <ss_release_readline>
  e8:	add	x1, x1, #0x0
  ec:	bl	0 <dlsym>
  f0:	str	x0, [x21, #104]
  f4:	adrp	x1, 0 <ss_release_readline>
  f8:	mov	x0, x19
  fc:	add	x1, x1, #0x0
 100:	bl	0 <dlsym>
 104:	str	x0, [x21, #112]
 108:	adrp	x1, 0 <ss_release_readline>
 10c:	mov	x0, x19
 110:	add	x1, x1, #0x0
 114:	bl	0 <dlsym>
 118:	str	x0, [x21, #120]
 11c:	adrp	x1, 0 <ss_release_readline>
 120:	mov	x0, x19
 124:	add	x1, x1, #0x0
 128:	bl	0 <dlsym>
 12c:	str	x0, [x21, #128]
 130:	adrp	x1, 0 <ss_release_readline>
 134:	mov	x0, x19
 138:	add	x1, x1, #0x0
 13c:	bl	0 <dlsym>
 140:	cbz	x0, 14c <ss_get_readline+0x118>
 144:	ldr	x1, [x21]
 148:	str	x1, [x0]
 14c:	adrp	x1, 0 <ss_release_readline>
 150:	mov	x0, x19
 154:	add	x1, x1, #0x0
 158:	bl	0 <dlsym>
 15c:	cbz	x0, 16c <ss_get_readline+0x138>
 160:	adrp	x1, 0 <ss_rl_completion>
 164:	add	x1, x1, #0x0
 168:	str	x1, [x0]
 16c:	adrp	x0, 0 <ss_release_readline>
 170:	add	x0, x0, #0x0
 174:	str	x0, [x21, #96]
 178:	ldp	x19, x20, [sp, #16]
 17c:	ldp	x21, x22, [sp, #32]
 180:	ldp	x29, x30, [sp], #48
 184:	ret
 188:	adrp	x19, 0 <ss_release_readline>
 18c:	add	x19, x19, #0x0
 190:	b	84 <ss_get_readline+0x50>
 194:	mov	x19, x20
 198:	b	a8 <ss_get_readline+0x74>
 19c:	mov	x0, x19
 1a0:	mov	w1, #0x2                   	// #2
 1a4:	bl	0 <dlopen>
 1a8:	mov	x19, x0
 1ac:	cbz	x0, c8 <ss_get_readline+0x94>
 1b0:	b	d0 <ss_get_readline+0x9c>
