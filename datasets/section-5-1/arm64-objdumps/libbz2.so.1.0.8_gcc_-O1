
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libbz2.so.1.0.8_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000001430 <.init>:
    1430:	stp	x29, x30, [sp, #-16]!
    1434:	mov	x29, sp
    1438:	bl	1700 <ferror@plt+0x10>
    143c:	ldp	x29, x30, [sp], #16
    1440:	ret

Disassembly of section .plt:

0000000000001450 <strlen@plt-0x20>:
    1450:	stp	x16, x30, [sp, #-16]!
    1454:	adrp	x16, 1f000 <BZ2_bzerror@@Base+0x10d58>
    1458:	ldr	x17, [x16, #4088]
    145c:	add	x16, x16, #0xff8
    1460:	br	x17
    1464:	nop
    1468:	nop
    146c:	nop

0000000000001470 <strlen@plt>:
    1470:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1474:	ldr	x17, [x16]
    1478:	add	x16, x16, #0x0
    147c:	br	x17

0000000000001480 <BZ2_hbMakeCodeLengths@plt>:
    1480:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1484:	ldr	x17, [x16, #8]
    1488:	add	x16, x16, #0x8
    148c:	br	x17

0000000000001490 <exit@plt>:
    1490:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1494:	ldr	x17, [x16, #16]
    1498:	add	x16, x16, #0x10
    149c:	br	x17

00000000000014a0 <__cxa_finalize@plt>:
    14a0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    14a4:	ldr	x17, [x16, #24]
    14a8:	add	x16, x16, #0x18
    14ac:	br	x17

00000000000014b0 <BZ2_bzlibVersion@plt>:
    14b0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    14b4:	ldr	x17, [x16, #32]
    14b8:	add	x16, x16, #0x20
    14bc:	br	x17

00000000000014c0 <fputc@plt>:
    14c0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    14c4:	ldr	x17, [x16, #40]
    14c8:	add	x16, x16, #0x28
    14cc:	br	x17

00000000000014d0 <fclose@plt>:
    14d0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    14d4:	ldr	x17, [x16, #48]
    14d8:	add	x16, x16, #0x30
    14dc:	br	x17

00000000000014e0 <malloc@plt>:
    14e0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    14e4:	ldr	x17, [x16, #56]
    14e8:	add	x16, x16, #0x38
    14ec:	br	x17

00000000000014f0 <BZ2_bzDecompressInit@plt>:
    14f0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    14f4:	ldr	x17, [x16, #64]
    14f8:	add	x16, x16, #0x40
    14fc:	br	x17

0000000000001500 <BZ2_bzDecompressEnd@plt>:
    1500:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1504:	ldr	x17, [x16, #72]
    1508:	add	x16, x16, #0x48
    150c:	br	x17

0000000000001510 <BZ2_bzReadClose@plt>:
    1510:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1514:	ldr	x17, [x16, #80]
    1518:	add	x16, x16, #0x50
    151c:	br	x17

0000000000001520 <fgetc@plt>:
    1520:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1524:	ldr	x17, [x16, #88]
    1528:	add	x16, x16, #0x58
    152c:	br	x17

0000000000001530 <fdopen@plt>:
    1530:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1534:	ldr	x17, [x16, #96]
    1538:	add	x16, x16, #0x60
    153c:	br	x17

0000000000001540 <BZ2_bzWriteOpen@plt>:
    1540:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1544:	ldr	x17, [x16, #104]
    1548:	add	x16, x16, #0x68
    154c:	br	x17

0000000000001550 <BZ2_bzCompressInit@plt>:
    1550:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1554:	ldr	x17, [x16, #112]
    1558:	add	x16, x16, #0x70
    155c:	br	x17

0000000000001560 <BZ2_bzCompressEnd@plt>:
    1560:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1564:	ldr	x17, [x16, #120]
    1568:	add	x16, x16, #0x78
    156c:	br	x17

0000000000001570 <BZ2_hbCreateDecodeTables@plt>:
    1570:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1574:	ldr	x17, [x16, #128]
    1578:	add	x16, x16, #0x80
    157c:	br	x17

0000000000001580 <__gmon_start__@plt>:
    1580:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1584:	ldr	x17, [x16, #136]
    1588:	add	x16, x16, #0x88
    158c:	br	x17

0000000000001590 <BZ2_decompress@plt>:
    1590:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1594:	ldr	x17, [x16, #144]
    1598:	add	x16, x16, #0x90
    159c:	br	x17

00000000000015a0 <BZ2_bzWriteClose@plt>:
    15a0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    15a4:	ldr	x17, [x16, #152]
    15a8:	add	x16, x16, #0x98
    15ac:	br	x17

00000000000015b0 <BZ2_bzCompress@plt>:
    15b0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    15b4:	ldr	x17, [x16, #160]
    15b8:	add	x16, x16, #0xa0
    15bc:	br	x17

00000000000015c0 <BZ2_bzWrite@plt>:
    15c0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    15c4:	ldr	x17, [x16, #168]
    15c8:	add	x16, x16, #0xa8
    15cc:	br	x17

00000000000015d0 <__ctype_b_loc@plt>:
    15d0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    15d4:	ldr	x17, [x16, #176]
    15d8:	add	x16, x16, #0xb0
    15dc:	br	x17

00000000000015e0 <BZ2_compressBlock@plt>:
    15e0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    15e4:	ldr	x17, [x16, #184]
    15e8:	add	x16, x16, #0xb8
    15ec:	br	x17

00000000000015f0 <fread@plt>:
    15f0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    15f4:	ldr	x17, [x16, #192]
    15f8:	add	x16, x16, #0xc0
    15fc:	br	x17

0000000000001600 <BZ2_bsInitWrite@plt>:
    1600:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1604:	ldr	x17, [x16, #200]
    1608:	add	x16, x16, #0xc8
    160c:	br	x17

0000000000001610 <free@plt>:
    1610:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1614:	ldr	x17, [x16, #208]
    1618:	add	x16, x16, #0xd0
    161c:	br	x17

0000000000001620 <ungetc@plt>:
    1620:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1624:	ldr	x17, [x16, #216]
    1628:	add	x16, x16, #0xd8
    162c:	br	x17

0000000000001630 <BZ2_bzDecompress@plt>:
    1630:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1634:	ldr	x17, [x16, #224]
    1638:	add	x16, x16, #0xe0
    163c:	br	x17

0000000000001640 <BZ2_blockSort@plt>:
    1640:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1644:	ldr	x17, [x16, #232]
    1648:	add	x16, x16, #0xe8
    164c:	br	x17

0000000000001650 <BZ2_bzWriteClose64@plt>:
    1650:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1654:	ldr	x17, [x16, #240]
    1658:	add	x16, x16, #0xf0
    165c:	br	x17

0000000000001660 <BZ2_indexIntoF@plt>:
    1660:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1664:	ldr	x17, [x16, #248]
    1668:	add	x16, x16, #0xf8
    166c:	br	x17

0000000000001670 <BZ2_hbAssignCodes@plt>:
    1670:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1674:	ldr	x17, [x16, #256]
    1678:	add	x16, x16, #0x100
    167c:	br	x17

0000000000001680 <fwrite@plt>:
    1680:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1684:	ldr	x17, [x16, #264]
    1688:	add	x16, x16, #0x108
    168c:	br	x17

0000000000001690 <fflush@plt>:
    1690:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    1694:	ldr	x17, [x16, #272]
    1698:	add	x16, x16, #0x110
    169c:	br	x17

00000000000016a0 <fopen64@plt>:
    16a0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    16a4:	ldr	x17, [x16, #280]
    16a8:	add	x16, x16, #0x118
    16ac:	br	x17

00000000000016b0 <BZ2_bzReadOpen@plt>:
    16b0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    16b4:	ldr	x17, [x16, #288]
    16b8:	add	x16, x16, #0x120
    16bc:	br	x17

00000000000016c0 <BZ2_bzRead@plt>:
    16c0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    16c4:	ldr	x17, [x16, #296]
    16c8:	add	x16, x16, #0x128
    16cc:	br	x17

00000000000016d0 <BZ2_bz__AssertH__fail@plt>:
    16d0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    16d4:	ldr	x17, [x16, #304]
    16d8:	add	x16, x16, #0x130
    16dc:	br	x17

00000000000016e0 <fprintf@plt>:
    16e0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    16e4:	ldr	x17, [x16, #312]
    16e8:	add	x16, x16, #0x138
    16ec:	br	x17

00000000000016f0 <ferror@plt>:
    16f0:	adrp	x16, 20000 <strlen@GLIBC_2.17>
    16f4:	ldr	x17, [x16, #320]
    16f8:	add	x16, x16, #0x140
    16fc:	br	x17

Disassembly of section .text:

0000000000001700 <BZ2_blockSort@@Base-0x28f0>:
    1700:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    1704:	ldr	x0, [x0, #4056]
    1708:	cbz	x0, 1710 <ferror@plt+0x20>
    170c:	b	1580 <__gmon_start__@plt>
    1710:	ret
    1714:	nop
    1718:	adrp	x0, 20000 <BZ2_bzerror@@Base+0x11d58>
    171c:	add	x0, x0, #0xd50
    1720:	adrp	x1, 20000 <BZ2_bzerror@@Base+0x11d58>
    1724:	add	x1, x1, #0xd50
    1728:	cmp	x1, x0
    172c:	b.eq	1744 <ferror@plt+0x54>  // b.none
    1730:	adrp	x1, 1f000 <BZ2_bzerror@@Base+0x10d58>
    1734:	ldr	x1, [x1, #4000]
    1738:	cbz	x1, 1744 <ferror@plt+0x54>
    173c:	mov	x16, x1
    1740:	br	x16
    1744:	ret
    1748:	adrp	x0, 20000 <BZ2_bzerror@@Base+0x11d58>
    174c:	add	x0, x0, #0xd50
    1750:	adrp	x1, 20000 <BZ2_bzerror@@Base+0x11d58>
    1754:	add	x1, x1, #0xd50
    1758:	sub	x1, x1, x0
    175c:	lsr	x2, x1, #63
    1760:	add	x1, x2, x1, asr #3
    1764:	cmp	xzr, x1, asr #1
    1768:	asr	x1, x1, #1
    176c:	b.eq	1784 <ferror@plt+0x94>  // b.none
    1770:	adrp	x2, 1f000 <BZ2_bzerror@@Base+0x10d58>
    1774:	ldr	x2, [x2, #4064]
    1778:	cbz	x2, 1784 <ferror@plt+0x94>
    177c:	mov	x16, x2
    1780:	br	x16
    1784:	ret
    1788:	stp	x29, x30, [sp, #-32]!
    178c:	mov	x29, sp
    1790:	str	x19, [sp, #16]
    1794:	adrp	x19, 20000 <BZ2_bzerror@@Base+0x11d58>
    1798:	ldrb	w0, [x19, #3408]
    179c:	cbnz	w0, 17c4 <ferror@plt+0xd4>
    17a0:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    17a4:	ldr	x0, [x0, #4008]
    17a8:	cbz	x0, 17b8 <ferror@plt+0xc8>
    17ac:	adrp	x0, 20000 <BZ2_bzerror@@Base+0x11d58>
    17b0:	ldr	x0, [x0, #328]
    17b4:	bl	14a0 <__cxa_finalize@plt>
    17b8:	bl	1718 <ferror@plt+0x28>
    17bc:	mov	w0, #0x1                   	// #1
    17c0:	strb	w0, [x19, #3408]
    17c4:	ldr	x19, [sp, #16]
    17c8:	ldp	x29, x30, [sp], #32
    17cc:	ret
    17d0:	b	1748 <ferror@plt+0x58>
    17d4:	sub	sp, sp, #0xbb0
    17d8:	stp	x29, x30, [sp]
    17dc:	mov	x29, sp
    17e0:	stp	x19, x20, [sp, #16]
    17e4:	stp	x21, x22, [sp, #32]
    17e8:	stp	x23, x24, [sp, #48]
    17ec:	stp	x25, x26, [sp, #64]
    17f0:	stp	x27, x28, [sp, #80]
    17f4:	mov	x19, x0
    17f8:	mov	x20, x1
    17fc:	mov	x21, x2
    1800:	mov	w28, w3
    1804:	str	w4, [sp, #124]
    1808:	cmp	w4, #0x3
    180c:	b.gt	1988 <ferror@plt+0x298>
    1810:	add	x3, sp, #0x7a8
    1814:	add	x2, x3, #0x404
    1818:	mov	x0, x3
    181c:	str	wzr, [x0], #4
    1820:	cmp	x0, x2
    1824:	b.ne	181c <ferror@plt+0x12c>  // b.any
    1828:	cmp	w28, #0x0
    182c:	b.le	185c <ferror@plt+0x16c>
    1830:	mov	x1, x20
    1834:	sub	w6, w28, #0x1
    1838:	add	x6, x6, #0x1
    183c:	add	x6, x6, x20
    1840:	add	x5, sp, #0x7a8
    1844:	ldrb	w4, [x1], #1
    1848:	ldr	w0, [x5, x4, lsl #2]
    184c:	add	w0, w0, #0x1
    1850:	str	w0, [x5, x4, lsl #2]
    1854:	cmp	x1, x6
    1858:	b.ne	1844 <ferror@plt+0x154>  // b.any
    185c:	mov	x1, #0x1                   	// #1
    1860:	add	x6, sp, #0x3a8
    1864:	add	x5, sp, #0x7a8
    1868:	lsl	x0, x1, #2
    186c:	add	x4, x0, x6
    1870:	add	x0, x0, x5
    1874:	ldur	w0, [x0, #-4]
    1878:	stur	w0, [x4, #-4]
    187c:	add	x1, x1, #0x1
    1880:	cmp	x1, #0x101
    1884:	b.ne	1868 <ferror@plt+0x178>  // b.any
    1888:	add	x0, sp, #0x7ac
    188c:	ldr	w1, [x0]
    1890:	ldur	w4, [x0, #-4]
    1894:	add	w1, w1, w4
    1898:	str	w1, [x0], #4
    189c:	cmp	x0, x2
    18a0:	b.ne	188c <ferror@plt+0x19c>  // b.any
    18a4:	cmp	w28, #0x0
    18a8:	b.le	19ac <ferror@plt+0x2bc>
    18ac:	mov	x0, #0x0                   	// #0
    18b0:	add	x4, sp, #0x7a8
    18b4:	ldrb	w2, [x20, x0]
    18b8:	ldr	w1, [x4, x2, lsl #2]
    18bc:	sub	w1, w1, #0x1
    18c0:	str	w1, [x4, x2, lsl #2]
    18c4:	str	w0, [x19, w1, sxtw #2]
    18c8:	add	x0, x0, #0x1
    18cc:	cmp	w28, w0
    18d0:	b.gt	18b4 <ferror@plt+0x1c4>
    18d4:	add	w1, w28, #0x1f
    18d8:	cmp	w28, #0x0
    18dc:	csel	w1, w1, w28, lt  // lt = tstop
    18e0:	asr	w1, w1, #5
    18e4:	add	w1, w1, #0x2
    18e8:	mov	x0, #0x0                   	// #0
    18ec:	str	wzr, [x21, x0, lsl #2]
    18f0:	add	x0, x0, #0x1
    18f4:	cmp	w1, w0
    18f8:	b.gt	18ec <ferror@plt+0x1fc>
    18fc:	add	x5, x3, #0x400
    1900:	mov	w4, #0x1                   	// #1
    1904:	ldr	w1, [x3], #4
    1908:	asr	w0, w1, #5
    190c:	sxtw	x0, w0
    1910:	lsl	w1, w4, w1
    1914:	ldr	w2, [x21, x0, lsl #2]
    1918:	orr	w1, w2, w1
    191c:	str	w1, [x21, x0, lsl #2]
    1920:	cmp	x3, x5
    1924:	b.ne	1904 <ferror@plt+0x214>  // b.any
    1928:	mov	w1, w28
    192c:	add	w5, w28, #0x40
    1930:	mov	w3, #0x1                   	// #1
    1934:	asr	w0, w1, #5
    1938:	sxtw	x0, w0
    193c:	lsl	w4, w3, w1
    1940:	ldr	w2, [x21, x0, lsl #2]
    1944:	orr	w2, w2, w4
    1948:	str	w2, [x21, x0, lsl #2]
    194c:	add	w0, w1, #0x1
    1950:	asr	w2, w0, #5
    1954:	sxtw	x2, w2
    1958:	lsl	w0, w3, w0
    195c:	ldr	w4, [x21, x2, lsl #2]
    1960:	bic	w0, w4, w0
    1964:	str	w0, [x21, x2, lsl #2]
    1968:	add	w1, w1, #0x2
    196c:	cmp	w1, w5
    1970:	b.ne	1934 <ferror@plt+0x244>  // b.any
    1974:	mov	w0, #0x1                   	// #1
    1978:	str	w0, [sp, #120]
    197c:	add	x27, sp, #0x88
    1980:	mov	x26, x27
    1984:	b	1f64 <ferror@plt+0x874>
    1988:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    198c:	ldr	x0, [x0, #4016]
    1990:	ldr	x3, [x0]
    1994:	mov	x2, #0x1b                  	// #27
    1998:	mov	x1, #0x1                   	// #1
    199c:	adrp	x0, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    19a0:	add	x0, x0, #0x2e0
    19a4:	bl	1680 <fwrite@plt>
    19a8:	b	1810 <ferror@plt+0x120>
    19ac:	add	w1, w28, #0x1f
    19b0:	csel	w1, w1, w28, lt  // lt = tstop
    19b4:	asr	w1, w1, #5
    19b8:	add	w1, w1, #0x2
    19bc:	cmp	w1, #0x0
    19c0:	b.le	18fc <ferror@plt+0x20c>
    19c4:	b	18e8 <ferror@plt+0x1f8>
    19c8:	ldr	w2, [sp, #120]
    19cc:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    19d0:	add	x1, x1, #0x300
    19d4:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    19d8:	ldr	x0, [x0, #4016]
    19dc:	ldr	x0, [x0]
    19e0:	bl	16e0 <fprintf@plt>
    19e4:	b	1f70 <ferror@plt+0x880>
    19e8:	asr	w1, w0, #5
    19ec:	ldr	w1, [x21, w1, sxtw #2]
    19f0:	cmn	w1, #0x1
    19f4:	b.ne	1a0c <ferror@plt+0x31c>  // b.any
    19f8:	add	w0, w0, #0x20
    19fc:	asr	w1, w0, #5
    1a00:	ldr	w1, [x21, w1, sxtw #2]
    1a04:	cmn	w1, #0x1
    1a08:	b.eq	19f8 <ferror@plt+0x308>  // b.none
    1a0c:	asr	w2, w0, #5
    1a10:	mov	w1, #0x1                   	// #1
    1a14:	lsl	w1, w1, w0
    1a18:	ldr	w2, [x21, w2, sxtw #2]
    1a1c:	tst	w1, w2
    1a20:	b.eq	1ac0 <ferror@plt+0x3d0>  // b.none
    1a24:	mov	w3, #0x1                   	// #1
    1a28:	add	w0, w0, #0x1
    1a2c:	asr	w1, w0, #5
    1a30:	lsl	w2, w3, w0
    1a34:	ldr	w1, [x21, w1, sxtw #2]
    1a38:	tst	w2, w1
    1a3c:	b.ne	1a28 <ferror@plt+0x338>  // b.any
    1a40:	b	1ac0 <ferror@plt+0x3d0>
    1a44:	mov	w4, #0x1                   	// #1
    1a48:	add	w1, w1, #0x1
    1a4c:	asr	w2, w1, #5
    1a50:	lsl	w3, w4, w1
    1a54:	ldr	w2, [x21, w2, sxtw #2]
    1a58:	tst	w3, w2
    1a5c:	b.eq	1a48 <ferror@plt+0x358>  // b.none
    1a60:	sub	w25, w1, #0x1
    1a64:	cmp	w28, w25
    1a68:	b.le	1f3c <ferror@plt+0x84c>
    1a6c:	cmp	w0, w1
    1a70:	b.lt	1b50 <ferror@plt+0x460>  // b.tstop
    1a74:	add	w0, w25, #0x1
    1a78:	ands	w2, w0, #0x1f
    1a7c:	asr	w3, w0, #5
    1a80:	mov	w1, #0x1                   	// #1
    1a84:	lsl	w1, w1, w2
    1a88:	ldr	w3, [x21, w3, sxtw #2]
    1a8c:	and	w1, w1, w3
    1a90:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    1a94:	b.eq	1abc <ferror@plt+0x3cc>  // b.none
    1a98:	mov	w4, #0x1                   	// #1
    1a9c:	add	w0, w0, #0x1
    1aa0:	ands	w2, w0, #0x1f
    1aa4:	asr	w3, w0, #5
    1aa8:	lsl	w1, w4, w2
    1aac:	ldr	w3, [x21, w3, sxtw #2]
    1ab0:	and	w1, w1, w3
    1ab4:	ccmp	w1, #0x0, #0x4, ne  // ne = any
    1ab8:	b.ne	1a9c <ferror@plt+0x3ac>  // b.any
    1abc:	cbnz	w1, 19e8 <ferror@plt+0x2f8>
    1ac0:	sub	w22, w0, #0x1
    1ac4:	cmp	w28, w22
    1ac8:	b.le	1f3c <ferror@plt+0x84c>
    1acc:	ands	w3, w0, #0x1f
    1ad0:	asr	w2, w0, #5
    1ad4:	mov	w1, #0x1                   	// #1
    1ad8:	lsl	w1, w1, w3
    1adc:	ldr	w2, [x21, w2, sxtw #2]
    1ae0:	and	w1, w1, w2
    1ae4:	ccmp	w1, #0x0, #0x0, ne  // ne = any
    1ae8:	b.ne	20ac <ferror@plt+0x9bc>  // b.any
    1aec:	mov	w1, w0
    1af0:	mov	w5, #0x1                   	// #1
    1af4:	add	w1, w1, #0x1
    1af8:	ands	w3, w1, #0x1f
    1afc:	asr	w4, w1, #5
    1b00:	lsl	w2, w5, w3
    1b04:	ldr	w4, [x21, w4, sxtw #2]
    1b08:	and	w2, w2, w4
    1b0c:	ccmp	w2, #0x0, #0x0, ne  // ne = any
    1b10:	b.eq	1af4 <ferror@plt+0x404>  // b.none
    1b14:	cbnz	w2, 1a60 <ferror@plt+0x370>
    1b18:	asr	w2, w1, #5
    1b1c:	ldr	w2, [x21, w2, sxtw #2]
    1b20:	cbnz	w2, 1a44 <ferror@plt+0x354>
    1b24:	add	w1, w1, #0x20
    1b28:	asr	w2, w1, #5
    1b2c:	ldr	w2, [x21, w2, sxtw #2]
    1b30:	cbz	w2, 1b24 <ferror@plt+0x434>
    1b34:	asr	w3, w1, #5
    1b38:	mov	w2, #0x1                   	// #1
    1b3c:	lsl	w2, w2, w1
    1b40:	ldr	w3, [x21, w3, sxtw #2]
    1b44:	tst	w2, w3
    1b48:	b.eq	1a44 <ferror@plt+0x354>  // b.none
    1b4c:	b	1a60 <ferror@plt+0x370>
    1b50:	sub	w0, w1, w0
    1b54:	add	w0, w0, #0x1
    1b58:	ldr	w1, [sp, #108]
    1b5c:	add	w0, w1, w0
    1b60:	str	w0, [sp, #108]
    1b64:	str	w22, [sp, #136]
    1b68:	str	w25, [sp, #536]
    1b6c:	mov	w23, #0x0                   	// #0
    1b70:	mov	w11, #0x1                   	// #1
    1b74:	add	x0, x19, #0x4
    1b78:	str	x21, [sp, #112]
    1b7c:	mov	x21, x0
    1b80:	b	1d80 <ferror@plt+0x690>
    1b84:	mov	w0, #0x3ec                 	// #1004
    1b88:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    1b8c:	b	1d7c <ferror@plt+0x68c>
    1b90:	cmp	w7, w6
    1b94:	b.eq	1d6c <ferror@plt+0x67c>  // b.none
    1b98:	cmp	w0, #0x3
    1b9c:	b.le	1c10 <ferror@plt+0x520>
    1ba0:	sub	w8, w6, #0x4
    1ba4:	cmp	w7, w8
    1ba8:	b.gt	1c10 <ferror@plt+0x520>
    1bac:	sxtw	x8, w8
    1bb0:	mov	w5, w6
    1bb4:	b	1bd0 <ferror@plt+0x4e0>
    1bb8:	add	x1, x19, w1, sxtw #2
    1bbc:	stur	w9, [x1, #-16]
    1bc0:	sub	x8, x8, #0x1
    1bc4:	sub	w5, w5, #0x1
    1bc8:	cmp	w7, w8
    1bcc:	b.gt	1c10 <ferror@plt+0x520>
    1bd0:	ldr	w9, [x19, x8, lsl #2]
    1bd4:	ldr	w4, [x20, w9, sxtw #2]
    1bd8:	mov	w1, w5
    1bdc:	cmp	w6, w5
    1be0:	b.lt	1bb8 <ferror@plt+0x4c8>  // b.tstop
    1be4:	add	x0, x19, w5, sxtw #2
    1be8:	ldr	w2, [x0]
    1bec:	ldr	w3, [x20, w2, uxtw #2]
    1bf0:	cmp	w4, w3
    1bf4:	b.ls	1bb8 <ferror@plt+0x4c8>  // b.plast
    1bf8:	stur	w2, [x0, #-16]
    1bfc:	add	w1, w1, #0x4
    1c00:	add	x0, x0, #0x10
    1c04:	cmp	w6, w1
    1c08:	b.ge	1be8 <ferror@plt+0x4f8>  // b.tcont
    1c0c:	b	1bb8 <ferror@plt+0x4c8>
    1c10:	sub	w5, w6, #0x1
    1c14:	cmp	w7, w5
    1c18:	b.gt	1d6c <ferror@plt+0x67c>
    1c1c:	sxtw	x5, w5
    1c20:	mov	w4, w6
    1c24:	b	1c40 <ferror@plt+0x550>
    1c28:	add	x1, x19, w1, sxtw #2
    1c2c:	stur	w9, [x1, #-4]
    1c30:	sub	x5, x5, #0x1
    1c34:	sub	w4, w4, #0x1
    1c38:	cmp	w7, w5
    1c3c:	b.gt	1d6c <ferror@plt+0x67c>
    1c40:	ldr	w9, [x19, x5, lsl #2]
    1c44:	ldr	w8, [x20, w9, sxtw #2]
    1c48:	mov	w1, w4
    1c4c:	cmp	w6, w4
    1c50:	b.lt	1c28 <ferror@plt+0x538>  // b.tstop
    1c54:	add	x0, x19, w4, sxtw #2
    1c58:	ldr	w2, [x0]
    1c5c:	ldr	w3, [x20, w2, uxtw #2]
    1c60:	cmp	w8, w3
    1c64:	b.ls	1c28 <ferror@plt+0x538>  // b.plast
    1c68:	stur	w2, [x0, #-4]
    1c6c:	add	w1, w1, #0x1
    1c70:	add	x0, x0, #0x4
    1c74:	cmp	w6, w1
    1c78:	b.ge	1c58 <ferror@plt+0x568>  // b.tcont
    1c7c:	b	1c28 <ferror@plt+0x538>
    1c80:	cmp	w0, #0x1
    1c84:	b.eq	1c94 <ferror@plt+0x5a4>  // b.none
    1c88:	ldr	w0, [x19, w6, sxtw #2]
    1c8c:	ldr	w16, [x20, x0, lsl #2]
    1c90:	b	1dd0 <ferror@plt+0x6e0>
    1c94:	add	w0, w7, w6
    1c98:	asr	w0, w0, #1
    1c9c:	ldr	w0, [x19, w0, sxtw #2]
    1ca0:	ldr	w16, [x20, x0, lsl #2]
    1ca4:	b	1dd0 <ferror@plt+0x6e0>
    1ca8:	sxtw	x1, w12
    1cac:	ldr	w3, [x19, x1, lsl #2]
    1cb0:	str	w3, [x9]
    1cb4:	str	w2, [x19, x1, lsl #2]
    1cb8:	add	w12, w12, #0x1
    1cbc:	b	1d28 <ferror@plt+0x638>
    1cc0:	sxtw	x0, w4
    1cc4:	ldr	w2, [x19, x0, lsl #2]
    1cc8:	str	w2, [x3]
    1ccc:	str	w8, [x19, x0, lsl #2]
    1cd0:	sub	w4, w4, #0x1
    1cd4:	mov	w0, w1
    1cd8:	sub	x3, x3, #0x4
    1cdc:	sub	w1, w1, #0x1
    1ce0:	cmp	w10, w0
    1ce4:	b.gt	1d64 <ferror@plt+0x674>
    1ce8:	add	w0, w1, #0x1
    1cec:	ldr	w8, [x3]
    1cf0:	ldr	w2, [x20, w8, uxtw #2]
    1cf4:	subs	w2, w2, w13
    1cf8:	b.eq	1cc0 <ferror@plt+0x5d0>  // b.none
    1cfc:	tbnz	w2, #31, 1d08 <ferror@plt+0x618>
    1d00:	mov	w0, w1
    1d04:	b	1cd8 <ferror@plt+0x5e8>
    1d08:	cmp	w10, w0
    1d0c:	b.gt	1d64 <ferror@plt+0x674>
    1d10:	ldr	w2, [x15]
    1d14:	sxtw	x0, w0
    1d18:	ldr	w3, [x19, x0, lsl #2]
    1d1c:	str	w3, [x15]
    1d20:	str	w2, [x19, x0, lsl #2]
    1d24:	mov	w0, w1
    1d28:	add	w5, w5, #0x1
    1d2c:	add	x9, x9, #0x4
    1d30:	mov	w10, w5
    1d34:	cmp	w5, w0
    1d38:	b.gt	1d64 <ferror@plt+0x674>
    1d3c:	mov	x15, x9
    1d40:	ldr	w2, [x9]
    1d44:	ldr	w1, [x20, w2, uxtw #2]
    1d48:	subs	w1, w1, w16
    1d4c:	b.eq	1ca8 <ferror@plt+0x5b8>  // b.none
    1d50:	cmp	w1, #0x0
    1d54:	b.le	1d28 <ferror@plt+0x638>
    1d58:	add	x3, x19, w0, sxtw #2
    1d5c:	sub	w1, w0, #0x1
    1d60:	b	1ce8 <ferror@plt+0x5f8>
    1d64:	cmp	w12, w4
    1d68:	b.le	1df4 <ferror@plt+0x704>
    1d6c:	cmp	w24, #0x0
    1d70:	b.le	1eec <ferror@plt+0x7fc>
    1d74:	cmp	w24, #0x62
    1d78:	b.gt	1b84 <ferror@plt+0x494>
    1d7c:	mov	w11, w24
    1d80:	sub	w24, w11, #0x1
    1d84:	sxtw	x0, w24
    1d88:	ldr	w7, [x26, x0, lsl #2]
    1d8c:	ldr	w6, [x27, x0, lsl #2]
    1d90:	sub	w0, w6, w7
    1d94:	cmp	w0, #0x9
    1d98:	b.le	1b90 <ferror@plt+0x4a0>
    1d9c:	mov	w0, #0x1dc5                	// #7621
    1da0:	mul	w23, w23, w0
    1da4:	add	w23, w23, #0x1
    1da8:	and	w23, w23, #0x7fff
    1dac:	mov	w0, #0xaaab                	// #43691
    1db0:	movk	w0, #0xaaaa, lsl #16
    1db4:	umull	x0, w23, w0
    1db8:	lsr	x0, x0, #33
    1dbc:	add	w0, w0, w0, lsl #1
    1dc0:	subs	w0, w23, w0
    1dc4:	b.ne	1c80 <ferror@plt+0x590>  // b.any
    1dc8:	ldr	w0, [x19, w7, sxtw #2]
    1dcc:	ldr	w16, [x20, x0, lsl #2]
    1dd0:	mov	w5, w7
    1dd4:	sxtw	x17, w7
    1dd8:	add	x14, x19, w7, sxtw #2
    1ddc:	mov	x9, x14
    1de0:	mov	w4, w6
    1de4:	mov	w12, w7
    1de8:	mov	w0, w6
    1dec:	mov	w13, w16
    1df0:	b	1d30 <ferror@plt+0x640>
    1df4:	sub	w1, w10, w12
    1df8:	sub	w2, w12, w7
    1dfc:	cmp	w1, w2
    1e00:	csel	w1, w1, w2, le
    1e04:	sub	w2, w10, w1
    1e08:	cmp	w1, #0x0
    1e0c:	b.le	1e40 <ferror@plt+0x750>
    1e10:	sub	w1, w1, #0x1
    1e14:	add	x1, x1, x17
    1e18:	add	x1, x21, x1, lsl #2
    1e1c:	sxtw	x2, w2
    1e20:	sub	x17, x2, x17
    1e24:	ldr	w2, [x14]
    1e28:	ldr	w3, [x14, x17, lsl #2]
    1e2c:	str	w3, [x14]
    1e30:	str	w2, [x14, x17, lsl #2]
    1e34:	add	x14, x14, #0x4
    1e38:	cmp	x14, x1
    1e3c:	b.ne	1e24 <ferror@plt+0x734>  // b.any
    1e40:	sub	w0, w4, w0
    1e44:	sub	w1, w6, w4
    1e48:	cmp	w1, w0
    1e4c:	csel	w1, w1, w0, le
    1e50:	sub	w2, w6, w1
    1e54:	cmp	w1, #0x0
    1e58:	b.le	1e98 <ferror@plt+0x7a8>
    1e5c:	sxtw	x4, w10
    1e60:	add	x3, x19, w10, sxtw #2
    1e64:	sub	w1, w1, #0x1
    1e68:	add	x1, x1, x4
    1e6c:	add	x1, x21, x1, lsl #2
    1e70:	sxtw	x2, w2
    1e74:	sub	x4, x2, x4
    1e78:	mov	x2, x3
    1e7c:	ldr	w5, [x2], #4
    1e80:	ldr	w8, [x2, x4, lsl #2]
    1e84:	str	w8, [x3]
    1e88:	str	w5, [x2, x4, lsl #2]
    1e8c:	mov	x3, x2
    1e90:	cmp	x2, x1
    1e94:	b.ne	1e78 <ferror@plt+0x788>  // b.any
    1e98:	add	w1, w7, w10
    1e9c:	sub	w1, w1, w12
    1ea0:	sub	w1, w1, #0x1
    1ea4:	sub	w0, w6, w0
    1ea8:	add	w0, w0, #0x1
    1eac:	sub	w3, w1, w7
    1eb0:	sub	w2, w6, w0
    1eb4:	cmp	w3, w2
    1eb8:	b.le	1ed4 <ferror@plt+0x7e4>
    1ebc:	str	w1, [x27, w24, sxtw #2]
    1ec0:	sxtw	x1, w11
    1ec4:	str	w0, [x26, x1, lsl #2]
    1ec8:	str	w6, [x27, x1, lsl #2]
    1ecc:	add	w24, w11, #0x1
    1ed0:	b	1d6c <ferror@plt+0x67c>
    1ed4:	str	w0, [x26, w24, sxtw #2]
    1ed8:	sxtw	x0, w11
    1edc:	str	w7, [x26, x0, lsl #2]
    1ee0:	str	w1, [x27, x0, lsl #2]
    1ee4:	add	w24, w11, #0x1
    1ee8:	b	1d6c <ferror@plt+0x67c>
    1eec:	ldr	x21, [sp, #112]
    1ef0:	sxtw	x22, w22
    1ef4:	mov	w1, #0xffffffff            	// #-1
    1ef8:	mov	w4, #0x1                   	// #1
    1efc:	b	1f0c <ferror@plt+0x81c>
    1f00:	add	x22, x22, #0x1
    1f04:	cmp	w25, w22
    1f08:	b.lt	1a74 <ferror@plt+0x384>  // b.tstop
    1f0c:	mov	w0, w1
    1f10:	ldr	w1, [x19, x22, lsl #2]
    1f14:	ldr	w1, [x20, x1, lsl #2]
    1f18:	cmp	w1, w0
    1f1c:	b.eq	1f00 <ferror@plt+0x810>  // b.none
    1f20:	asr	w0, w22, #5
    1f24:	sxtw	x0, w0
    1f28:	lsl	w2, w4, w22
    1f2c:	ldr	w3, [x21, x0, lsl #2]
    1f30:	orr	w2, w3, w2
    1f34:	str	w2, [x21, x0, lsl #2]
    1f38:	b	1f00 <ferror@plt+0x810>
    1f3c:	ldr	w0, [sp, #124]
    1f40:	cmp	w0, #0x3
    1f44:	b.gt	1fd4 <ferror@plt+0x8e4>
    1f48:	ldr	w0, [sp, #120]
    1f4c:	lsl	w0, w0, #1
    1f50:	str	w0, [sp, #120]
    1f54:	ldr	w1, [sp, #108]
    1f58:	cmp	w1, #0x0
    1f5c:	ccmp	w28, w0, #0x1, ne  // ne = any
    1f60:	b.lt	1ff4 <ferror@plt+0x904>  // b.tstop
    1f64:	ldr	w0, [sp, #124]
    1f68:	cmp	w0, #0x3
    1f6c:	b.gt	19c8 <ferror@plt+0x2d8>
    1f70:	cmp	w28, #0x0
    1f74:	b.le	1fbc <ferror@plt+0x8cc>
    1f78:	mov	x1, #0x0                   	// #0
    1f7c:	mov	w2, #0x0                   	// #0
    1f80:	mov	w4, #0x1                   	// #1
    1f84:	ldr	w5, [sp, #120]
    1f88:	asr	w0, w1, #5
    1f8c:	lsl	w3, w4, w1
    1f90:	ldr	w0, [x21, w0, sxtw #2]
    1f94:	tst	w3, w0
    1f98:	csel	w2, w2, w1, eq  // eq = none
    1f9c:	ldr	w0, [x19, x1, lsl #2]
    1fa0:	subs	w0, w0, w5
    1fa4:	add	w3, w0, w28
    1fa8:	csel	w0, w3, w0, mi  // mi = first
    1fac:	str	w2, [x20, w0, sxtw #2]
    1fb0:	add	x1, x1, #0x1
    1fb4:	cmp	w28, w1
    1fb8:	b.gt	1f88 <ferror@plt+0x898>
    1fbc:	ldr	w1, [x21]
    1fc0:	and	w1, w1, #0x1
    1fc4:	str	wzr, [sp, #108]
    1fc8:	mov	w0, #0x0                   	// #0
    1fcc:	add	x27, sp, #0x218
    1fd0:	b	1abc <ferror@plt+0x3cc>
    1fd4:	ldr	w2, [sp, #108]
    1fd8:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    1fdc:	add	x1, x1, #0x318
    1fe0:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    1fe4:	ldr	x0, [x0, #4016]
    1fe8:	ldr	x0, [x0]
    1fec:	bl	16e0 <fprintf@plt>
    1ff0:	b	1f48 <ferror@plt+0x858>
    1ff4:	ldr	w0, [sp, #124]
    1ff8:	cmp	w0, #0x3
    1ffc:	b.gt	2018 <ferror@plt+0x928>
    2000:	mov	x4, #0x0                   	// #0
    2004:	mov	w2, #0x0                   	// #0
    2008:	add	x3, sp, #0x3a8
    200c:	cmp	w28, #0x0
    2010:	b.gt	2068 <ferror@plt+0x978>
    2014:	b	2080 <ferror@plt+0x990>
    2018:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    201c:	ldr	x0, [x0, #4016]
    2020:	ldr	x3, [x0]
    2024:	mov	x2, #0x21                  	// #33
    2028:	mov	x1, #0x1                   	// #1
    202c:	adrp	x0, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    2030:	add	x0, x0, #0x330
    2034:	bl	1680 <fwrite@plt>
    2038:	b	2000 <ferror@plt+0x910>
    203c:	add	w2, w0, #0x1
    2040:	add	x0, x0, #0x1
    2044:	ldr	w1, [x3, x0, lsl #2]
    2048:	cbz	w1, 203c <ferror@plt+0x94c>
    204c:	sub	w1, w1, #0x1
    2050:	str	w1, [x3, w2, sxtw #2]
    2054:	ldr	w0, [x19, x4, lsl #2]
    2058:	strb	w2, [x20, x0]
    205c:	add	x4, x4, #0x1
    2060:	cmp	w28, w4
    2064:	b.le	2078 <ferror@plt+0x988>
    2068:	ldr	w1, [x3, w2, sxtw #2]
    206c:	sxtw	x0, w2
    2070:	cbz	w1, 203c <ferror@plt+0x94c>
    2074:	b	204c <ferror@plt+0x95c>
    2078:	cmp	w2, #0xff
    207c:	b.gt	20a0 <ferror@plt+0x9b0>
    2080:	ldp	x19, x20, [sp, #16]
    2084:	ldp	x21, x22, [sp, #32]
    2088:	ldp	x23, x24, [sp, #48]
    208c:	ldp	x25, x26, [sp, #64]
    2090:	ldp	x27, x28, [sp, #80]
    2094:	ldp	x29, x30, [sp]
    2098:	add	sp, sp, #0xbb0
    209c:	ret
    20a0:	mov	w0, #0x3ed                 	// #1005
    20a4:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    20a8:	b	2080 <ferror@plt+0x990>
    20ac:	mov	w25, w22
    20b0:	cbnz	w1, 1a74 <ferror@plt+0x384>
    20b4:	mov	w1, w0
    20b8:	b	1b18 <ferror@plt+0x428>
    20bc:	mov	x12, #0x1300                	// #4864
    20c0:	sub	sp, sp, x12
    20c4:	stp	x29, x30, [sp]
    20c8:	mov	x29, sp
    20cc:	stp	x19, x20, [sp, #16]
    20d0:	stp	x21, x22, [sp, #32]
    20d4:	stp	x23, x24, [sp, #48]
    20d8:	stp	x25, x26, [sp, #64]
    20dc:	stp	x27, x28, [sp, #80]
    20e0:	mov	x23, x0
    20e4:	mov	x28, x1
    20e8:	str	x2, [sp, #296]
    20ec:	str	x3, [sp, #168]
    20f0:	str	w4, [sp, #292]
    20f4:	str	w5, [sp, #256]
    20f8:	str	x6, [sp, #192]
    20fc:	cmp	w5, #0x3
    2100:	b.gt	23fc <ferror@plt+0xd0c>
    2104:	ldr	x2, [sp, #168]
    2108:	add	x0, x2, #0x40, lsl #12
    210c:	str	x2, [sp, #328]
    2110:	str	wzr, [x0]
    2114:	cmp	x0, x2
    2118:	sub	x0, x0, #0x4
    211c:	b.ne	2110 <ferror@plt+0xa20>  // b.any
    2120:	ldrb	w0, [x28]
    2124:	lsl	w0, w0, #8
    2128:	ldr	w4, [sp, #292]
    212c:	sub	w1, w4, #0x1
    2130:	str	w1, [sp, #308]
    2134:	cmp	w1, #0x2
    2138:	b.le	2420 <ferror@plt+0xd30>
    213c:	sbfiz	x5, x1, #1, #32
    2140:	ldr	x7, [sp, #296]
    2144:	add	x2, x7, x5
    2148:	add	x3, x28, w1, sxtw
    214c:	sub	w1, w4, #0x4
    2150:	lsr	w4, w1, #2
    2154:	add	x6, x5, #0x2
    2158:	lsr	w5, w1, #2
    215c:	sub	x5, x6, x5, lsl #3
    2160:	sub	x1, x7, #0xa
    2164:	add	x5, x5, x1
    2168:	ldr	x1, [sp, #168]
    216c:	strh	wzr, [x2]
    2170:	ldrb	w6, [x3]
    2174:	lsl	w6, w6, #8
    2178:	orr	w0, w6, w0, asr #8
    217c:	sxtw	x7, w0
    2180:	ldr	w6, [x1, x7, lsl #2]
    2184:	add	w6, w6, #0x1
    2188:	str	w6, [x1, x7, lsl #2]
    218c:	sturh	wzr, [x2, #-2]
    2190:	ldurb	w6, [x3, #-1]
    2194:	lsl	w6, w6, #8
    2198:	orr	w0, w6, w0, asr #8
    219c:	sxtw	x7, w0
    21a0:	ldr	w6, [x1, x7, lsl #2]
    21a4:	add	w6, w6, #0x1
    21a8:	str	w6, [x1, x7, lsl #2]
    21ac:	sturh	wzr, [x2, #-4]
    21b0:	ldurb	w6, [x3, #-2]
    21b4:	lsl	w6, w6, #8
    21b8:	orr	w0, w6, w0, asr #8
    21bc:	sxtw	x7, w0
    21c0:	ldr	w6, [x1, x7, lsl #2]
    21c4:	add	w6, w6, #0x1
    21c8:	str	w6, [x1, x7, lsl #2]
    21cc:	sturh	wzr, [x2, #-6]
    21d0:	ldurb	w6, [x3, #-3]
    21d4:	lsl	w6, w6, #8
    21d8:	orr	w0, w6, w0, asr #8
    21dc:	sxtw	x7, w0
    21e0:	ldr	w6, [x1, x7, lsl #2]
    21e4:	add	w6, w6, #0x1
    21e8:	str	w6, [x1, x7, lsl #2]
    21ec:	sub	x2, x2, #0x8
    21f0:	sub	x3, x3, #0x4
    21f4:	cmp	x2, x5
    21f8:	b.ne	216c <ferror@plt+0xa7c>  // b.any
    21fc:	ldr	w1, [sp, #292]
    2200:	sub	w1, w1, #0x5
    2204:	sub	w1, w1, w4, lsl #2
    2208:	tbnz	w1, #31, 2240 <ferror@plt+0xb50>
    220c:	sxtw	x1, w1
    2210:	ldr	x5, [sp, #296]
    2214:	ldr	x4, [sp, #168]
    2218:	strh	wzr, [x5, x1, lsl #1]
    221c:	ldrb	w2, [x28, x1]
    2220:	lsl	w2, w2, #8
    2224:	orr	w0, w2, w0, asr #8
    2228:	sxtw	x3, w0
    222c:	ldr	w2, [x4, x3, lsl #2]
    2230:	add	w2, w2, #0x1
    2234:	str	w2, [x4, x3, lsl #2]
    2238:	sub	x1, x1, #0x1
    223c:	tbz	w1, #31, 2218 <ferror@plt+0xb28>
    2240:	ldr	w1, [sp, #292]
    2244:	ldr	x0, [sp, #296]
    2248:	add	x3, x0, w1, sxtw #1
    224c:	mov	x0, #0x0                   	// #0
    2250:	add	x2, x28, w1, sxtw
    2254:	ldrb	w1, [x28, x0]
    2258:	strb	w1, [x2, x0]
    225c:	strh	wzr, [x3, x0, lsl #1]
    2260:	add	x0, x0, #0x1
    2264:	cmp	x0, #0x22
    2268:	b.ne	2254 <ferror@plt+0xb64>  // b.any
    226c:	ldr	w0, [sp, #256]
    2270:	cmp	w0, #0x3
    2274:	b.gt	2428 <ferror@plt+0xd38>
    2278:	ldr	x1, [sp, #168]
    227c:	add	x0, x1, #0x4
    2280:	add	x3, x1, #0x40, lsl #12
    2284:	add	x3, x3, #0x4
    2288:	ldr	w1, [x0]
    228c:	ldur	w2, [x0, #-4]
    2290:	add	w1, w1, w2
    2294:	str	w1, [x0], #4
    2298:	cmp	x0, x3
    229c:	b.ne	2288 <ferror@plt+0xb98>  // b.any
    22a0:	ldrb	w0, [x28]
    22a4:	ubfiz	w0, w0, #8, #8
    22a8:	ldr	w1, [sp, #308]
    22ac:	cmp	w1, #0x2
    22b0:	b.le	244c <ferror@plt+0xd5c>
    22b4:	add	x3, x28, w1, sxtw
    22b8:	ldr	x2, [sp, #168]
    22bc:	ldrb	w4, [x3]
    22c0:	lsr	w0, w0, #8
    22c4:	orr	w4, w0, w4, lsl #8
    22c8:	and	x5, x4, #0xffff
    22cc:	ldr	w0, [x2, x5, lsl #2]
    22d0:	sub	w0, w0, #0x1
    22d4:	str	w0, [x2, x5, lsl #2]
    22d8:	str	w1, [x23, w0, sxtw #2]
    22dc:	ldurb	w0, [x3, #-1]
    22e0:	lsr	w4, w4, #8
    22e4:	orr	w0, w4, w0, lsl #8
    22e8:	and	x5, x0, #0xffff
    22ec:	ldr	w4, [x2, x5, lsl #2]
    22f0:	sub	w4, w4, #0x1
    22f4:	str	w4, [x2, x5, lsl #2]
    22f8:	sub	w5, w1, #0x1
    22fc:	str	w5, [x23, w4, sxtw #2]
    2300:	ldurb	w4, [x3, #-2]
    2304:	lsr	w0, w0, #8
    2308:	orr	w4, w0, w4, lsl #8
    230c:	and	x5, x4, #0xffff
    2310:	ldr	w0, [x2, x5, lsl #2]
    2314:	sub	w0, w0, #0x1
    2318:	str	w0, [x2, x5, lsl #2]
    231c:	sub	w5, w1, #0x2
    2320:	str	w5, [x23, w0, sxtw #2]
    2324:	ldurb	w0, [x3, #-3]
    2328:	lsr	w4, w4, #8
    232c:	orr	w0, w4, w0, lsl #8
    2330:	and	x5, x0, #0xffff
    2334:	ldr	w4, [x2, x5, lsl #2]
    2338:	sub	w4, w4, #0x1
    233c:	str	w4, [x2, x5, lsl #2]
    2340:	sub	w5, w1, #0x3
    2344:	str	w5, [x23, w4, sxtw #2]
    2348:	sub	w1, w1, #0x4
    234c:	sub	x3, x3, #0x4
    2350:	cmp	w1, #0x2
    2354:	b.gt	22bc <ferror@plt+0xbcc>
    2358:	ldr	w2, [sp, #292]
    235c:	sub	w1, w2, #0x4
    2360:	neg	w1, w1, lsr #2
    2364:	sub	w2, w2, #0x5
    2368:	add	w1, w2, w1, lsl #2
    236c:	tbnz	w1, #31, 23a0 <ferror@plt+0xcb0>
    2370:	sxtw	x1, w1
    2374:	ldr	x4, [sp, #168]
    2378:	ldrb	w2, [x28, x1]
    237c:	lsr	w0, w0, #8
    2380:	orr	w0, w0, w2, lsl #8
    2384:	and	x3, x0, #0xffff
    2388:	ldr	w2, [x4, x3, lsl #2]
    238c:	sub	w2, w2, #0x1
    2390:	str	w2, [x4, x3, lsl #2]
    2394:	str	w1, [x23, w2, sxtw #2]
    2398:	sub	x1, x1, #0x1
    239c:	tbz	w1, #31, 2378 <ferror@plt+0xc88>
    23a0:	mov	x0, #0x1                   	// #1
    23a4:	add	x4, sp, #0xe00
    23a8:	add	x3, sp, #0xf00
    23ac:	add	x1, x0, x4
    23b0:	sturb	wzr, [x1, #-1]
    23b4:	add	x1, x3, x0, lsl #2
    23b8:	sub	w2, w0, #0x1
    23bc:	stur	w2, [x1, #-4]
    23c0:	add	x0, x0, #0x1
    23c4:	cmp	x0, #0x101
    23c8:	b.ne	23ac <ferror@plt+0xcbc>  // b.any
    23cc:	mov	w0, #0x5                   	// #5
    23d0:	mov	w1, #0x1                   	// #1
    23d4:	add	w1, w1, w1, lsl #1
    23d8:	add	w1, w1, #0x1
    23dc:	subs	w0, w0, #0x1
    23e0:	b.ne	23d4 <ferror@plt+0xce4>  // b.any
    23e4:	mov	w14, #0x5556                	// #21846
    23e8:	movk	w14, #0x5555, lsl #16
    23ec:	add	x13, sp, #0xf00
    23f0:	mov	w5, w1
    23f4:	ldr	x4, [sp, #168]
    23f8:	b	24e0 <ferror@plt+0xdf0>
    23fc:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    2400:	ldr	x0, [x0, #4016]
    2404:	ldr	x3, [x0]
    2408:	mov	x2, #0x21                  	// #33
    240c:	mov	x1, #0x1                   	// #1
    2410:	adrp	x0, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    2414:	add	x0, x0, #0x358
    2418:	bl	1680 <fwrite@plt>
    241c:	b	2104 <ferror@plt+0xa14>
    2420:	ldr	w1, [sp, #308]
    2424:	b	2208 <ferror@plt+0xb18>
    2428:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    242c:	ldr	x0, [x0, #4016]
    2430:	ldr	x3, [x0]
    2434:	mov	x2, #0x1b                  	// #27
    2438:	mov	x1, #0x1                   	// #1
    243c:	adrp	x0, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    2440:	add	x0, x0, #0x2e0
    2444:	bl	1680 <fwrite@plt>
    2448:	b	2278 <ferror@plt+0xb88>
    244c:	ldr	w1, [sp, #308]
    2450:	b	236c <ferror@plt+0xc7c>
    2454:	str	w15, [x13, w8, sxtw #2]
    2458:	add	x16, x16, #0x1
    245c:	add	x11, x11, #0x1
    2460:	add	x12, x12, #0x4
    2464:	cmp	w11, #0xff
    2468:	b.gt	24d8 <ferror@plt+0xde8>
    246c:	mov	w0, w11
    2470:	ldr	w15, [x12]
    2474:	add	w1, w15, #0x1
    2478:	lsl	w1, w1, #8
    247c:	lsl	w2, w15, #8
    2480:	ldr	w7, [x4, w1, sxtw #2]
    2484:	ldr	w1, [x4, w2, sxtw #2]
    2488:	sub	w7, w7, w1
    248c:	mov	x3, x12
    2490:	sub	x9, x16, x11
    2494:	mov	w8, w0
    2498:	sub	w0, w0, w5
    249c:	ldr	w2, [x3, x9, lsl #2]
    24a0:	add	w1, w2, #0x1
    24a4:	lsl	w1, w1, #8
    24a8:	lsl	w6, w2, #8
    24ac:	ldr	w1, [x4, w1, sxtw #2]
    24b0:	ldr	w6, [x4, w6, sxtw #2]
    24b4:	sub	w1, w1, w6
    24b8:	cmp	w1, w7
    24bc:	b.ls	2454 <ferror@plt+0xd64>  // b.plast
    24c0:	str	w2, [x3]
    24c4:	add	x3, x3, x10
    24c8:	cmp	w0, w5
    24cc:	b.ge	2494 <ferror@plt+0xda4>  // b.tcont
    24d0:	mov	w8, w0
    24d4:	b	2454 <ferror@plt+0xd64>
    24d8:	cmp	w5, #0x1
    24dc:	b.eq	2510 <ferror@plt+0xe20>  // b.none
    24e0:	mov	w1, w5
    24e4:	smull	x0, w5, w14
    24e8:	lsr	x0, x0, #32
    24ec:	sub	w5, w0, w5, asr #31
    24f0:	cmp	w1, #0x2ff
    24f4:	b.gt	24d8 <ferror@plt+0xde8>
    24f8:	sxtw	x11, w5
    24fc:	add	x12, x13, w5, sxtw #2
    2500:	neg	w10, w5
    2504:	sbfiz	x10, x10, #2, #32
    2508:	mov	x16, #0x0                   	// #0
    250c:	b	246c <ferror@plt+0xd7c>
    2510:	str	w5, [sp, #260]
    2514:	add	x0, sp, #0xf00
    2518:	str	x0, [sp, #320]
    251c:	str	xzr, [sp, #312]
    2520:	str	wzr, [sp, #252]
    2524:	add	x0, sp, #0x150
    2528:	str	x0, [sp, #240]
    252c:	ldr	w0, [sp, #292]
    2530:	str	w0, [sp, #304]
    2534:	mov	x24, x23
    2538:	mov	x19, x28
    253c:	ldr	x0, [sp, #320]
    2540:	ldr	w0, [x0]
    2544:	str	w0, [sp, #220]
    2548:	lsl	w0, w0, #8
    254c:	str	w0, [sp, #248]
    2550:	str	wzr, [sp, #160]
    2554:	b	3c44 <ferror@plt+0x2554>
    2558:	ldr	w0, [sp, #228]
    255c:	sub	w5, w0, w1
    2560:	add	w5, w5, #0x1
    2564:	ldr	w4, [sp, #252]
    2568:	ldr	w3, [sp, #160]
    256c:	ldr	w2, [sp, #220]
    2570:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    2574:	add	x1, x1, #0x380
    2578:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    257c:	ldr	x0, [x0, #4016]
    2580:	ldr	x0, [x0]
    2584:	bl	16e0 <fprintf@plt>
    2588:	b	3ca4 <ferror@plt+0x25b4>
    258c:	add	w8, w7, #0x1
    2590:	ldrb	w15, [x24, w8, uxtw]
    2594:	ldrb	w8, [x24, x11]
    2598:	cmp	w15, w8
    259c:	b.eq	25e8 <ferror@plt+0xef8>  // b.none
    25a0:	cset	w7, hi  // hi = pmore
    25a4:	cbz	w7, 2b14 <ferror@plt+0x1424>
    25a8:	ldr	w7, [x1]
    25ac:	str	w7, [x1, x30, lsl #2]
    25b0:	add	x5, x5, x27
    25b4:	cmp	w19, w3
    25b8:	b.gt	2b80 <ferror@plt+0x1490>
    25bc:	mov	w16, w3
    25c0:	sub	w3, w3, w21
    25c4:	mov	x1, x5
    25c8:	ldr	w7, [x5]
    25cc:	add	w7, w22, w7
    25d0:	ldrb	w15, [x24, w7, uxtw]
    25d4:	ldrb	w8, [x24, w0, uxtw]
    25d8:	cmp	w15, w8
    25dc:	b.eq	258c <ferror@plt+0xe9c>  // b.none
    25e0:	cset	w7, hi  // hi = pmore
    25e4:	b	25a4 <ferror@plt+0xeb4>
    25e8:	add	w8, w7, #0x2
    25ec:	ldrb	w15, [x24, w8, uxtw]
    25f0:	ldrb	w8, [x24, x10]
    25f4:	cmp	w15, w8
    25f8:	b.eq	2604 <ferror@plt+0xf14>  // b.none
    25fc:	cset	w7, hi  // hi = pmore
    2600:	b	25a4 <ferror@plt+0xeb4>
    2604:	add	w8, w7, #0x3
    2608:	ldrb	w15, [x24, w8, uxtw]
    260c:	ldrb	w8, [x24, x9]
    2610:	cmp	w15, w8
    2614:	b.eq	2620 <ferror@plt+0xf30>  // b.none
    2618:	cset	w7, hi  // hi = pmore
    261c:	b	25a4 <ferror@plt+0xeb4>
    2620:	add	w8, w7, #0x4
    2624:	ldrb	w15, [x24, w8, uxtw]
    2628:	ldrb	w8, [x24, x12]
    262c:	cmp	w15, w8
    2630:	b.eq	263c <ferror@plt+0xf4c>  // b.none
    2634:	cset	w7, hi  // hi = pmore
    2638:	b	25a4 <ferror@plt+0xeb4>
    263c:	add	w8, w7, #0x5
    2640:	ldrb	w15, [x24, w8, uxtw]
    2644:	ldrb	w8, [x24, x13]
    2648:	cmp	w15, w8
    264c:	b.eq	2658 <ferror@plt+0xf68>  // b.none
    2650:	cset	w7, hi  // hi = pmore
    2654:	b	25a4 <ferror@plt+0xeb4>
    2658:	add	w8, w7, #0x6
    265c:	ldrb	w15, [x24, w8, uxtw]
    2660:	ldrb	w8, [x24, x14]
    2664:	cmp	w15, w8
    2668:	b.eq	2674 <ferror@plt+0xf84>  // b.none
    266c:	cset	w7, hi  // hi = pmore
    2670:	b	25a4 <ferror@plt+0xeb4>
    2674:	add	w8, w7, #0x7
    2678:	ldrb	w15, [x24, w8, uxtw]
    267c:	ldrb	w8, [x24, x17]
    2680:	cmp	w15, w8
    2684:	b.eq	2690 <ferror@plt+0xfa0>  // b.none
    2688:	cset	w7, hi  // hi = pmore
    268c:	b	25a4 <ferror@plt+0xeb4>
    2690:	add	w8, w7, #0x8
    2694:	ldrb	w15, [x24, w8, uxtw]
    2698:	ldr	x8, [sp, #96]
    269c:	ldrb	w8, [x24, x8]
    26a0:	cmp	w15, w8
    26a4:	b.eq	26b0 <ferror@plt+0xfc0>  // b.none
    26a8:	cset	w7, hi  // hi = pmore
    26ac:	b	25a4 <ferror@plt+0xeb4>
    26b0:	add	w8, w7, #0x9
    26b4:	ldrb	w15, [x24, w8, uxtw]
    26b8:	ldr	x8, [sp, #104]
    26bc:	ldrb	w8, [x24, x8]
    26c0:	cmp	w15, w8
    26c4:	b.eq	26d0 <ferror@plt+0xfe0>  // b.none
    26c8:	cset	w7, hi  // hi = pmore
    26cc:	b	25a4 <ferror@plt+0xeb4>
    26d0:	add	w8, w7, #0xa
    26d4:	ldrb	w15, [x24, w8, uxtw]
    26d8:	ldr	x8, [sp, #128]
    26dc:	ldrb	w8, [x24, x8]
    26e0:	cmp	w15, w8
    26e4:	b.eq	26f0 <ferror@plt+0x1000>  // b.none
    26e8:	cset	w7, hi  // hi = pmore
    26ec:	b	25a4 <ferror@plt+0xeb4>
    26f0:	add	w8, w7, #0xb
    26f4:	ldrb	w15, [x24, w8, uxtw]
    26f8:	ldr	x8, [sp, #136]
    26fc:	ldrb	w8, [x24, x8]
    2700:	cmp	w15, w8
    2704:	b.eq	2714 <ferror@plt+0x1024>  // b.none
    2708:	cmp	w15, w8
    270c:	cset	w7, hi  // hi = pmore
    2710:	b	25a4 <ferror@plt+0xeb4>
    2714:	add	w7, w7, #0xc
    2718:	add	w15, w0, #0xc
    271c:	ldr	w8, [sp, #292]
    2720:	add	w8, w8, #0x8
    2724:	str	w20, [sp, #144]
    2728:	str	w22, [sp, #268]
    272c:	str	w21, [sp, #272]
    2730:	str	w19, [sp, #276]
    2734:	str	w6, [sp, #280]
    2738:	str	w0, [sp, #284]
    273c:	mov	w6, w7
    2740:	mov	w0, w8
    2744:	ldr	x19, [sp, #296]
    2748:	ldr	w20, [sp, #304]
    274c:	mov	w22, w6
    2750:	ldrb	w8, [x24, w6, uxtw]
    2754:	mov	w21, w15
    2758:	ldrb	w7, [x24, w15, uxtw]
    275c:	cmp	w8, w7
    2760:	b.ne	2914 <ferror@plt+0x1224>  // b.any
    2764:	ldrh	w7, [x19, x22, lsl #1]
    2768:	ldrh	w8, [x19, x21, lsl #1]
    276c:	cmp	w7, w8
    2770:	b.ne	2934 <ferror@plt+0x1244>  // b.any
    2774:	add	w7, w6, #0x1
    2778:	add	w22, w6, #0x1
    277c:	ldrb	w8, [x24, w7, uxtw]
    2780:	add	w7, w15, #0x1
    2784:	add	w21, w15, #0x1
    2788:	ldrb	w7, [x24, w7, uxtw]
    278c:	cmp	w8, w7
    2790:	b.ne	2954 <ferror@plt+0x1264>  // b.any
    2794:	ldrh	w7, [x19, x22, lsl #1]
    2798:	ldrh	w8, [x19, x21, lsl #1]
    279c:	cmp	w7, w8
    27a0:	b.ne	2974 <ferror@plt+0x1284>  // b.any
    27a4:	add	w7, w6, #0x2
    27a8:	add	w22, w6, #0x2
    27ac:	ldrb	w8, [x24, w7, uxtw]
    27b0:	add	w7, w15, #0x2
    27b4:	add	w21, w15, #0x2
    27b8:	ldrb	w7, [x24, w7, uxtw]
    27bc:	cmp	w8, w7
    27c0:	b.ne	2994 <ferror@plt+0x12a4>  // b.any
    27c4:	ldrh	w7, [x19, x22, lsl #1]
    27c8:	ldrh	w8, [x19, x21, lsl #1]
    27cc:	cmp	w7, w8
    27d0:	b.ne	29b4 <ferror@plt+0x12c4>  // b.any
    27d4:	add	w7, w6, #0x3
    27d8:	add	w22, w6, #0x3
    27dc:	ldrb	w8, [x24, w7, uxtw]
    27e0:	add	w7, w15, #0x3
    27e4:	add	w21, w15, #0x3
    27e8:	ldrb	w7, [x24, w7, uxtw]
    27ec:	cmp	w8, w7
    27f0:	b.ne	29d4 <ferror@plt+0x12e4>  // b.any
    27f4:	ldrh	w7, [x19, x22, lsl #1]
    27f8:	ldrh	w8, [x19, x21, lsl #1]
    27fc:	cmp	w7, w8
    2800:	b.ne	29f4 <ferror@plt+0x1304>  // b.any
    2804:	add	w7, w6, #0x4
    2808:	add	w22, w6, #0x4
    280c:	ldrb	w8, [x24, w7, uxtw]
    2810:	add	w7, w15, #0x4
    2814:	add	w21, w15, #0x4
    2818:	ldrb	w7, [x24, w7, uxtw]
    281c:	cmp	w8, w7
    2820:	b.ne	2a14 <ferror@plt+0x1324>  // b.any
    2824:	ldrh	w7, [x19, x22, lsl #1]
    2828:	ldrh	w8, [x19, x21, lsl #1]
    282c:	cmp	w7, w8
    2830:	b.ne	2a34 <ferror@plt+0x1344>  // b.any
    2834:	add	w7, w6, #0x5
    2838:	add	w22, w6, #0x5
    283c:	ldrb	w8, [x24, w7, uxtw]
    2840:	add	w7, w15, #0x5
    2844:	add	w21, w15, #0x5
    2848:	ldrb	w7, [x24, w7, uxtw]
    284c:	cmp	w8, w7
    2850:	b.ne	2a54 <ferror@plt+0x1364>  // b.any
    2854:	ldrh	w7, [x19, x22, lsl #1]
    2858:	ldrh	w8, [x19, x21, lsl #1]
    285c:	cmp	w7, w8
    2860:	b.ne	2a74 <ferror@plt+0x1384>  // b.any
    2864:	add	w7, w6, #0x6
    2868:	add	w22, w6, #0x6
    286c:	ldrb	w8, [x24, w7, uxtw]
    2870:	add	w7, w15, #0x6
    2874:	add	w21, w15, #0x6
    2878:	ldrb	w7, [x24, w7, uxtw]
    287c:	cmp	w8, w7
    2880:	b.ne	2a94 <ferror@plt+0x13a4>  // b.any
    2884:	ldrh	w7, [x19, x22, lsl #1]
    2888:	ldrh	w8, [x19, x21, lsl #1]
    288c:	cmp	w7, w8
    2890:	b.ne	2ab4 <ferror@plt+0x13c4>  // b.any
    2894:	add	w7, w6, #0x7
    2898:	add	w22, w6, #0x7
    289c:	ldrb	w8, [x24, w7, uxtw]
    28a0:	add	w7, w15, #0x7
    28a4:	add	w21, w15, #0x7
    28a8:	ldrb	w7, [x24, w7, uxtw]
    28ac:	cmp	w8, w7
    28b0:	b.ne	2ad4 <ferror@plt+0x13e4>  // b.any
    28b4:	ldrh	w7, [x19, x22, lsl #1]
    28b8:	ldrh	w8, [x19, x21, lsl #1]
    28bc:	cmp	w7, w8
    28c0:	b.ne	2af4 <ferror@plt+0x1404>  // b.any
    28c4:	add	w6, w6, #0x8
    28c8:	add	w15, w15, #0x8
    28cc:	sub	w7, w6, w20
    28d0:	cmp	w20, w6
    28d4:	csel	w6, w7, w6, ls  // ls = plast
    28d8:	sub	w7, w15, w20
    28dc:	cmp	w20, w15
    28e0:	csel	w15, w7, w15, ls  // ls = plast
    28e4:	ldr	w7, [x26]
    28e8:	sub	w7, w7, #0x1
    28ec:	str	w7, [x26]
    28f0:	subs	w0, w0, #0x8
    28f4:	b.pl	274c <ferror@plt+0x105c>  // b.nfrst
    28f8:	ldr	w20, [sp, #144]
    28fc:	ldr	w22, [sp, #268]
    2900:	ldr	w21, [sp, #272]
    2904:	ldr	w19, [sp, #276]
    2908:	ldr	w6, [sp, #280]
    290c:	mov	w8, w16
    2910:	b	2b18 <ferror@plt+0x1428>
    2914:	ldr	w20, [sp, #144]
    2918:	ldr	w22, [sp, #268]
    291c:	ldr	w21, [sp, #272]
    2920:	ldr	w19, [sp, #276]
    2924:	ldr	w6, [sp, #280]
    2928:	ldr	w0, [sp, #284]
    292c:	cset	w7, hi  // hi = pmore
    2930:	b	25a4 <ferror@plt+0xeb4>
    2934:	ldr	w20, [sp, #144]
    2938:	ldr	w22, [sp, #268]
    293c:	ldr	w21, [sp, #272]
    2940:	ldr	w19, [sp, #276]
    2944:	ldr	w6, [sp, #280]
    2948:	ldr	w0, [sp, #284]
    294c:	cset	w7, hi  // hi = pmore
    2950:	b	25a4 <ferror@plt+0xeb4>
    2954:	ldr	w20, [sp, #144]
    2958:	ldr	w22, [sp, #268]
    295c:	ldr	w21, [sp, #272]
    2960:	ldr	w19, [sp, #276]
    2964:	ldr	w6, [sp, #280]
    2968:	ldr	w0, [sp, #284]
    296c:	cset	w7, hi  // hi = pmore
    2970:	b	25a4 <ferror@plt+0xeb4>
    2974:	ldr	w20, [sp, #144]
    2978:	ldr	w22, [sp, #268]
    297c:	ldr	w21, [sp, #272]
    2980:	ldr	w19, [sp, #276]
    2984:	ldr	w6, [sp, #280]
    2988:	ldr	w0, [sp, #284]
    298c:	cset	w7, hi  // hi = pmore
    2990:	b	25a4 <ferror@plt+0xeb4>
    2994:	ldr	w20, [sp, #144]
    2998:	ldr	w22, [sp, #268]
    299c:	ldr	w21, [sp, #272]
    29a0:	ldr	w19, [sp, #276]
    29a4:	ldr	w6, [sp, #280]
    29a8:	ldr	w0, [sp, #284]
    29ac:	cset	w7, hi  // hi = pmore
    29b0:	b	25a4 <ferror@plt+0xeb4>
    29b4:	ldr	w20, [sp, #144]
    29b8:	ldr	w22, [sp, #268]
    29bc:	ldr	w21, [sp, #272]
    29c0:	ldr	w19, [sp, #276]
    29c4:	ldr	w6, [sp, #280]
    29c8:	ldr	w0, [sp, #284]
    29cc:	cset	w7, hi  // hi = pmore
    29d0:	b	25a4 <ferror@plt+0xeb4>
    29d4:	ldr	w20, [sp, #144]
    29d8:	ldr	w22, [sp, #268]
    29dc:	ldr	w21, [sp, #272]
    29e0:	ldr	w19, [sp, #276]
    29e4:	ldr	w6, [sp, #280]
    29e8:	ldr	w0, [sp, #284]
    29ec:	cset	w7, hi  // hi = pmore
    29f0:	b	25a4 <ferror@plt+0xeb4>
    29f4:	ldr	w20, [sp, #144]
    29f8:	ldr	w22, [sp, #268]
    29fc:	ldr	w21, [sp, #272]
    2a00:	ldr	w19, [sp, #276]
    2a04:	ldr	w6, [sp, #280]
    2a08:	ldr	w0, [sp, #284]
    2a0c:	cset	w7, hi  // hi = pmore
    2a10:	b	25a4 <ferror@plt+0xeb4>
    2a14:	ldr	w20, [sp, #144]
    2a18:	ldr	w22, [sp, #268]
    2a1c:	ldr	w21, [sp, #272]
    2a20:	ldr	w19, [sp, #276]
    2a24:	ldr	w6, [sp, #280]
    2a28:	ldr	w0, [sp, #284]
    2a2c:	cset	w7, hi  // hi = pmore
    2a30:	b	25a4 <ferror@plt+0xeb4>
    2a34:	ldr	w20, [sp, #144]
    2a38:	ldr	w22, [sp, #268]
    2a3c:	ldr	w21, [sp, #272]
    2a40:	ldr	w19, [sp, #276]
    2a44:	ldr	w6, [sp, #280]
    2a48:	ldr	w0, [sp, #284]
    2a4c:	cset	w7, hi  // hi = pmore
    2a50:	b	25a4 <ferror@plt+0xeb4>
    2a54:	ldr	w20, [sp, #144]
    2a58:	ldr	w22, [sp, #268]
    2a5c:	ldr	w21, [sp, #272]
    2a60:	ldr	w19, [sp, #276]
    2a64:	ldr	w6, [sp, #280]
    2a68:	ldr	w0, [sp, #284]
    2a6c:	cset	w7, hi  // hi = pmore
    2a70:	b	25a4 <ferror@plt+0xeb4>
    2a74:	ldr	w20, [sp, #144]
    2a78:	ldr	w22, [sp, #268]
    2a7c:	ldr	w21, [sp, #272]
    2a80:	ldr	w19, [sp, #276]
    2a84:	ldr	w6, [sp, #280]
    2a88:	ldr	w0, [sp, #284]
    2a8c:	cset	w7, hi  // hi = pmore
    2a90:	b	25a4 <ferror@plt+0xeb4>
    2a94:	ldr	w20, [sp, #144]
    2a98:	ldr	w22, [sp, #268]
    2a9c:	ldr	w21, [sp, #272]
    2aa0:	ldr	w19, [sp, #276]
    2aa4:	ldr	w6, [sp, #280]
    2aa8:	ldr	w0, [sp, #284]
    2aac:	cset	w7, hi  // hi = pmore
    2ab0:	b	25a4 <ferror@plt+0xeb4>
    2ab4:	ldr	w20, [sp, #144]
    2ab8:	ldr	w22, [sp, #268]
    2abc:	ldr	w21, [sp, #272]
    2ac0:	ldr	w19, [sp, #276]
    2ac4:	ldr	w6, [sp, #280]
    2ac8:	ldr	w0, [sp, #284]
    2acc:	cset	w7, hi  // hi = pmore
    2ad0:	b	25a4 <ferror@plt+0xeb4>
    2ad4:	ldr	w20, [sp, #144]
    2ad8:	ldr	w22, [sp, #268]
    2adc:	ldr	w21, [sp, #272]
    2ae0:	ldr	w19, [sp, #276]
    2ae4:	ldr	w6, [sp, #280]
    2ae8:	ldr	w0, [sp, #284]
    2aec:	cset	w7, hi  // hi = pmore
    2af0:	b	25a4 <ferror@plt+0xeb4>
    2af4:	ldr	w20, [sp, #144]
    2af8:	ldr	w22, [sp, #268]
    2afc:	ldr	w21, [sp, #272]
    2b00:	ldr	w19, [sp, #276]
    2b04:	ldr	w6, [sp, #280]
    2b08:	ldr	w0, [sp, #284]
    2b0c:	cset	w7, hi  // hi = pmore
    2b10:	b	25a4 <ferror@plt+0xeb4>
    2b14:	mov	w8, w16
    2b18:	str	w6, [x25, w8, sxtw #2]
    2b1c:	mov	w3, w28
    2b20:	cmp	w20, w28
    2b24:	b.lt	3794 <ferror@plt+0x20a4>  // b.tstop
    2b28:	ldr	x0, [sp, #112]
    2b2c:	ldr	w6, [x0, x2, lsl #2]
    2b30:	sub	x5, x4, #0x4
    2b34:	add	w0, w23, w6
    2b38:	add	w12, w23, w6
    2b3c:	add	w11, w0, #0x1
    2b40:	add	w10, w0, #0x2
    2b44:	add	w9, w0, #0x3
    2b48:	add	w13, w0, #0x4
    2b4c:	add	w14, w0, #0x5
    2b50:	add	w15, w0, #0x6
    2b54:	add	w1, w0, #0x7
    2b58:	str	x1, [sp, #96]
    2b5c:	add	w1, w0, #0x8
    2b60:	str	x1, [sp, #104]
    2b64:	add	w1, w0, #0x9
    2b68:	str	x1, [sp, #128]
    2b6c:	add	w1, w0, #0xa
    2b70:	str	x1, [sp, #136]
    2b74:	add	w1, w0, #0xb
    2b78:	str	x1, [sp, #144]
    2b7c:	b	2bb8 <ferror@plt+0x14c8>
    2b80:	mov	w8, w3
    2b84:	b	2b18 <ferror@plt+0x1428>
    2b88:	add	w8, w7, #0x1
    2b8c:	ldrb	w16, [x24, w8, uxtw]
    2b90:	ldrb	w8, [x24, x11]
    2b94:	cmp	w16, w8
    2b98:	b.eq	2be4 <ferror@plt+0x14f4>  // b.none
    2b9c:	cset	w7, hi  // hi = pmore
    2ba0:	cbz	w7, 3114 <ferror@plt+0x1a24>
    2ba4:	ldr	w7, [x1]
    2ba8:	str	w7, [x1, x30, lsl #2]
    2bac:	add	x5, x5, x27
    2bb0:	cmp	w19, w3
    2bb4:	b.gt	3180 <ferror@plt+0x1a90>
    2bb8:	mov	w17, w3
    2bbc:	sub	w3, w3, w21
    2bc0:	mov	x1, x5
    2bc4:	ldr	w7, [x5]
    2bc8:	add	w7, w23, w7
    2bcc:	ldrb	w16, [x24, w7, uxtw]
    2bd0:	ldrb	w8, [x24, x12]
    2bd4:	cmp	w16, w8
    2bd8:	b.eq	2b88 <ferror@plt+0x1498>  // b.none
    2bdc:	cset	w7, hi  // hi = pmore
    2be0:	b	2ba0 <ferror@plt+0x14b0>
    2be4:	add	w8, w7, #0x2
    2be8:	ldrb	w16, [x24, w8, uxtw]
    2bec:	ldrb	w8, [x24, x10]
    2bf0:	cmp	w16, w8
    2bf4:	b.eq	2c00 <ferror@plt+0x1510>  // b.none
    2bf8:	cset	w7, hi  // hi = pmore
    2bfc:	b	2ba0 <ferror@plt+0x14b0>
    2c00:	add	w8, w7, #0x3
    2c04:	ldrb	w16, [x24, w8, uxtw]
    2c08:	ldrb	w8, [x24, x9]
    2c0c:	cmp	w16, w8
    2c10:	b.eq	2c1c <ferror@plt+0x152c>  // b.none
    2c14:	cset	w7, hi  // hi = pmore
    2c18:	b	2ba0 <ferror@plt+0x14b0>
    2c1c:	add	w8, w7, #0x4
    2c20:	ldrb	w16, [x24, w8, uxtw]
    2c24:	ldrb	w8, [x24, x13]
    2c28:	cmp	w16, w8
    2c2c:	b.eq	2c38 <ferror@plt+0x1548>  // b.none
    2c30:	cset	w7, hi  // hi = pmore
    2c34:	b	2ba0 <ferror@plt+0x14b0>
    2c38:	add	w8, w7, #0x5
    2c3c:	ldrb	w16, [x24, w8, uxtw]
    2c40:	ldrb	w8, [x24, x14]
    2c44:	cmp	w16, w8
    2c48:	b.eq	2c54 <ferror@plt+0x1564>  // b.none
    2c4c:	cset	w7, hi  // hi = pmore
    2c50:	b	2ba0 <ferror@plt+0x14b0>
    2c54:	add	w8, w7, #0x6
    2c58:	ldrb	w16, [x24, w8, uxtw]
    2c5c:	ldrb	w8, [x24, x15]
    2c60:	cmp	w16, w8
    2c64:	b.eq	2c70 <ferror@plt+0x1580>  // b.none
    2c68:	cset	w7, hi  // hi = pmore
    2c6c:	b	2ba0 <ferror@plt+0x14b0>
    2c70:	add	w8, w7, #0x7
    2c74:	ldrb	w16, [x24, w8, uxtw]
    2c78:	ldr	x8, [sp, #96]
    2c7c:	ldrb	w8, [x24, x8]
    2c80:	cmp	w16, w8
    2c84:	b.eq	2c90 <ferror@plt+0x15a0>  // b.none
    2c88:	cset	w7, hi  // hi = pmore
    2c8c:	b	2ba0 <ferror@plt+0x14b0>
    2c90:	add	w8, w7, #0x8
    2c94:	ldrb	w16, [x24, w8, uxtw]
    2c98:	ldr	x8, [sp, #104]
    2c9c:	ldrb	w8, [x24, x8]
    2ca0:	cmp	w16, w8
    2ca4:	b.eq	2cb0 <ferror@plt+0x15c0>  // b.none
    2ca8:	cset	w7, hi  // hi = pmore
    2cac:	b	2ba0 <ferror@plt+0x14b0>
    2cb0:	add	w8, w7, #0x9
    2cb4:	ldrb	w16, [x24, w8, uxtw]
    2cb8:	ldr	x8, [sp, #128]
    2cbc:	ldrb	w8, [x24, x8]
    2cc0:	cmp	w16, w8
    2cc4:	b.eq	2cd0 <ferror@plt+0x15e0>  // b.none
    2cc8:	cset	w7, hi  // hi = pmore
    2ccc:	b	2ba0 <ferror@plt+0x14b0>
    2cd0:	add	w8, w7, #0xa
    2cd4:	ldrb	w16, [x24, w8, uxtw]
    2cd8:	ldr	x8, [sp, #136]
    2cdc:	ldrb	w8, [x24, x8]
    2ce0:	cmp	w16, w8
    2ce4:	b.eq	2cf0 <ferror@plt+0x1600>  // b.none
    2ce8:	cset	w7, hi  // hi = pmore
    2cec:	b	2ba0 <ferror@plt+0x14b0>
    2cf0:	add	w8, w7, #0xb
    2cf4:	ldrb	w16, [x24, w8, uxtw]
    2cf8:	ldr	x8, [sp, #144]
    2cfc:	ldrb	w8, [x24, x8]
    2d00:	cmp	w16, w8
    2d04:	b.eq	2d14 <ferror@plt+0x1624>  // b.none
    2d08:	cmp	w16, w8
    2d0c:	cset	w7, hi  // hi = pmore
    2d10:	b	2ba0 <ferror@plt+0x14b0>
    2d14:	add	w8, w7, #0xc
    2d18:	add	w16, w0, #0xc
    2d1c:	ldr	w7, [sp, #304]
    2d20:	add	w7, w7, #0x8
    2d24:	str	w20, [sp, #268]
    2d28:	str	w22, [sp, #272]
    2d2c:	str	w21, [sp, #276]
    2d30:	str	w19, [sp, #280]
    2d34:	str	w6, [sp, #284]
    2d38:	str	w0, [sp, #288]
    2d3c:	mov	w6, w8
    2d40:	mov	w0, w7
    2d44:	ldr	x19, [sp, #296]
    2d48:	ldr	w20, [sp, #304]
    2d4c:	mov	w22, w6
    2d50:	ldrb	w8, [x24, w6, uxtw]
    2d54:	mov	w21, w16
    2d58:	ldrb	w7, [x24, w16, uxtw]
    2d5c:	cmp	w8, w7
    2d60:	b.ne	2f14 <ferror@plt+0x1824>  // b.any
    2d64:	ldrh	w7, [x19, x22, lsl #1]
    2d68:	ldrh	w8, [x19, x21, lsl #1]
    2d6c:	cmp	w7, w8
    2d70:	b.ne	2f34 <ferror@plt+0x1844>  // b.any
    2d74:	add	w7, w6, #0x1
    2d78:	add	w22, w6, #0x1
    2d7c:	ldrb	w8, [x24, w7, uxtw]
    2d80:	add	w7, w16, #0x1
    2d84:	add	w21, w16, #0x1
    2d88:	ldrb	w7, [x24, w7, uxtw]
    2d8c:	cmp	w8, w7
    2d90:	b.ne	2f54 <ferror@plt+0x1864>  // b.any
    2d94:	ldrh	w7, [x19, x22, lsl #1]
    2d98:	ldrh	w8, [x19, x21, lsl #1]
    2d9c:	cmp	w7, w8
    2da0:	b.ne	2f74 <ferror@plt+0x1884>  // b.any
    2da4:	add	w7, w6, #0x2
    2da8:	add	w22, w6, #0x2
    2dac:	ldrb	w8, [x24, w7, uxtw]
    2db0:	add	w7, w16, #0x2
    2db4:	add	w21, w16, #0x2
    2db8:	ldrb	w7, [x24, w7, uxtw]
    2dbc:	cmp	w8, w7
    2dc0:	b.ne	2f94 <ferror@plt+0x18a4>  // b.any
    2dc4:	ldrh	w7, [x19, x22, lsl #1]
    2dc8:	ldrh	w8, [x19, x21, lsl #1]
    2dcc:	cmp	w7, w8
    2dd0:	b.ne	2fb4 <ferror@plt+0x18c4>  // b.any
    2dd4:	add	w7, w6, #0x3
    2dd8:	add	w22, w6, #0x3
    2ddc:	ldrb	w8, [x24, w7, uxtw]
    2de0:	add	w7, w16, #0x3
    2de4:	add	w21, w16, #0x3
    2de8:	ldrb	w7, [x24, w7, uxtw]
    2dec:	cmp	w8, w7
    2df0:	b.ne	2fd4 <ferror@plt+0x18e4>  // b.any
    2df4:	ldrh	w7, [x19, x22, lsl #1]
    2df8:	ldrh	w8, [x19, x21, lsl #1]
    2dfc:	cmp	w7, w8
    2e00:	b.ne	2ff4 <ferror@plt+0x1904>  // b.any
    2e04:	add	w7, w6, #0x4
    2e08:	add	w22, w6, #0x4
    2e0c:	ldrb	w8, [x24, w7, uxtw]
    2e10:	add	w7, w16, #0x4
    2e14:	add	w21, w16, #0x4
    2e18:	ldrb	w7, [x24, w7, uxtw]
    2e1c:	cmp	w8, w7
    2e20:	b.ne	3014 <ferror@plt+0x1924>  // b.any
    2e24:	ldrh	w7, [x19, x22, lsl #1]
    2e28:	ldrh	w8, [x19, x21, lsl #1]
    2e2c:	cmp	w7, w8
    2e30:	b.ne	3034 <ferror@plt+0x1944>  // b.any
    2e34:	add	w7, w6, #0x5
    2e38:	add	w22, w6, #0x5
    2e3c:	ldrb	w8, [x24, w7, uxtw]
    2e40:	add	w7, w16, #0x5
    2e44:	add	w21, w16, #0x5
    2e48:	ldrb	w7, [x24, w7, uxtw]
    2e4c:	cmp	w8, w7
    2e50:	b.ne	3054 <ferror@plt+0x1964>  // b.any
    2e54:	ldrh	w7, [x19, x22, lsl #1]
    2e58:	ldrh	w8, [x19, x21, lsl #1]
    2e5c:	cmp	w7, w8
    2e60:	b.ne	3074 <ferror@plt+0x1984>  // b.any
    2e64:	add	w7, w6, #0x6
    2e68:	add	w22, w6, #0x6
    2e6c:	ldrb	w8, [x24, w7, uxtw]
    2e70:	add	w7, w16, #0x6
    2e74:	add	w21, w16, #0x6
    2e78:	ldrb	w7, [x24, w7, uxtw]
    2e7c:	cmp	w8, w7
    2e80:	b.ne	3094 <ferror@plt+0x19a4>  // b.any
    2e84:	ldrh	w7, [x19, x22, lsl #1]
    2e88:	ldrh	w8, [x19, x21, lsl #1]
    2e8c:	cmp	w7, w8
    2e90:	b.ne	30b4 <ferror@plt+0x19c4>  // b.any
    2e94:	add	w7, w6, #0x7
    2e98:	add	w22, w6, #0x7
    2e9c:	ldrb	w8, [x24, w7, uxtw]
    2ea0:	add	w7, w16, #0x7
    2ea4:	add	w21, w16, #0x7
    2ea8:	ldrb	w7, [x24, w7, uxtw]
    2eac:	cmp	w8, w7
    2eb0:	b.ne	30d4 <ferror@plt+0x19e4>  // b.any
    2eb4:	ldrh	w7, [x19, x22, lsl #1]
    2eb8:	ldrh	w8, [x19, x21, lsl #1]
    2ebc:	cmp	w7, w8
    2ec0:	b.ne	30f4 <ferror@plt+0x1a04>  // b.any
    2ec4:	add	w6, w6, #0x8
    2ec8:	add	w16, w16, #0x8
    2ecc:	sub	w7, w6, w20
    2ed0:	cmp	w20, w6
    2ed4:	csel	w6, w7, w6, ls  // ls = plast
    2ed8:	sub	w7, w16, w20
    2edc:	cmp	w20, w16
    2ee0:	csel	w16, w7, w16, ls  // ls = plast
    2ee4:	ldr	w7, [x26]
    2ee8:	sub	w7, w7, #0x1
    2eec:	str	w7, [x26]
    2ef0:	subs	w0, w0, #0x8
    2ef4:	b.pl	2d4c <ferror@plt+0x165c>  // b.nfrst
    2ef8:	ldr	w20, [sp, #268]
    2efc:	ldr	w22, [sp, #272]
    2f00:	ldr	w21, [sp, #276]
    2f04:	ldr	w19, [sp, #280]
    2f08:	ldr	w6, [sp, #284]
    2f0c:	mov	w8, w17
    2f10:	b	3118 <ferror@plt+0x1a28>
    2f14:	ldr	w20, [sp, #268]
    2f18:	ldr	w22, [sp, #272]
    2f1c:	ldr	w21, [sp, #276]
    2f20:	ldr	w19, [sp, #280]
    2f24:	ldr	w6, [sp, #284]
    2f28:	ldr	w0, [sp, #288]
    2f2c:	cset	w7, hi  // hi = pmore
    2f30:	b	2ba0 <ferror@plt+0x14b0>
    2f34:	ldr	w20, [sp, #268]
    2f38:	ldr	w22, [sp, #272]
    2f3c:	ldr	w21, [sp, #276]
    2f40:	ldr	w19, [sp, #280]
    2f44:	ldr	w6, [sp, #284]
    2f48:	ldr	w0, [sp, #288]
    2f4c:	cset	w7, hi  // hi = pmore
    2f50:	b	2ba0 <ferror@plt+0x14b0>
    2f54:	ldr	w20, [sp, #268]
    2f58:	ldr	w22, [sp, #272]
    2f5c:	ldr	w21, [sp, #276]
    2f60:	ldr	w19, [sp, #280]
    2f64:	ldr	w6, [sp, #284]
    2f68:	ldr	w0, [sp, #288]
    2f6c:	cset	w7, hi  // hi = pmore
    2f70:	b	2ba0 <ferror@plt+0x14b0>
    2f74:	ldr	w20, [sp, #268]
    2f78:	ldr	w22, [sp, #272]
    2f7c:	ldr	w21, [sp, #276]
    2f80:	ldr	w19, [sp, #280]
    2f84:	ldr	w6, [sp, #284]
    2f88:	ldr	w0, [sp, #288]
    2f8c:	cset	w7, hi  // hi = pmore
    2f90:	b	2ba0 <ferror@plt+0x14b0>
    2f94:	ldr	w20, [sp, #268]
    2f98:	ldr	w22, [sp, #272]
    2f9c:	ldr	w21, [sp, #276]
    2fa0:	ldr	w19, [sp, #280]
    2fa4:	ldr	w6, [sp, #284]
    2fa8:	ldr	w0, [sp, #288]
    2fac:	cset	w7, hi  // hi = pmore
    2fb0:	b	2ba0 <ferror@plt+0x14b0>
    2fb4:	ldr	w20, [sp, #268]
    2fb8:	ldr	w22, [sp, #272]
    2fbc:	ldr	w21, [sp, #276]
    2fc0:	ldr	w19, [sp, #280]
    2fc4:	ldr	w6, [sp, #284]
    2fc8:	ldr	w0, [sp, #288]
    2fcc:	cset	w7, hi  // hi = pmore
    2fd0:	b	2ba0 <ferror@plt+0x14b0>
    2fd4:	ldr	w20, [sp, #268]
    2fd8:	ldr	w22, [sp, #272]
    2fdc:	ldr	w21, [sp, #276]
    2fe0:	ldr	w19, [sp, #280]
    2fe4:	ldr	w6, [sp, #284]
    2fe8:	ldr	w0, [sp, #288]
    2fec:	cset	w7, hi  // hi = pmore
    2ff0:	b	2ba0 <ferror@plt+0x14b0>
    2ff4:	ldr	w20, [sp, #268]
    2ff8:	ldr	w22, [sp, #272]
    2ffc:	ldr	w21, [sp, #276]
    3000:	ldr	w19, [sp, #280]
    3004:	ldr	w6, [sp, #284]
    3008:	ldr	w0, [sp, #288]
    300c:	cset	w7, hi  // hi = pmore
    3010:	b	2ba0 <ferror@plt+0x14b0>
    3014:	ldr	w20, [sp, #268]
    3018:	ldr	w22, [sp, #272]
    301c:	ldr	w21, [sp, #276]
    3020:	ldr	w19, [sp, #280]
    3024:	ldr	w6, [sp, #284]
    3028:	ldr	w0, [sp, #288]
    302c:	cset	w7, hi  // hi = pmore
    3030:	b	2ba0 <ferror@plt+0x14b0>
    3034:	ldr	w20, [sp, #268]
    3038:	ldr	w22, [sp, #272]
    303c:	ldr	w21, [sp, #276]
    3040:	ldr	w19, [sp, #280]
    3044:	ldr	w6, [sp, #284]
    3048:	ldr	w0, [sp, #288]
    304c:	cset	w7, hi  // hi = pmore
    3050:	b	2ba0 <ferror@plt+0x14b0>
    3054:	ldr	w20, [sp, #268]
    3058:	ldr	w22, [sp, #272]
    305c:	ldr	w21, [sp, #276]
    3060:	ldr	w19, [sp, #280]
    3064:	ldr	w6, [sp, #284]
    3068:	ldr	w0, [sp, #288]
    306c:	cset	w7, hi  // hi = pmore
    3070:	b	2ba0 <ferror@plt+0x14b0>
    3074:	ldr	w20, [sp, #268]
    3078:	ldr	w22, [sp, #272]
    307c:	ldr	w21, [sp, #276]
    3080:	ldr	w19, [sp, #280]
    3084:	ldr	w6, [sp, #284]
    3088:	ldr	w0, [sp, #288]
    308c:	cset	w7, hi  // hi = pmore
    3090:	b	2ba0 <ferror@plt+0x14b0>
    3094:	ldr	w20, [sp, #268]
    3098:	ldr	w22, [sp, #272]
    309c:	ldr	w21, [sp, #276]
    30a0:	ldr	w19, [sp, #280]
    30a4:	ldr	w6, [sp, #284]
    30a8:	ldr	w0, [sp, #288]
    30ac:	cset	w7, hi  // hi = pmore
    30b0:	b	2ba0 <ferror@plt+0x14b0>
    30b4:	ldr	w20, [sp, #268]
    30b8:	ldr	w22, [sp, #272]
    30bc:	ldr	w21, [sp, #276]
    30c0:	ldr	w19, [sp, #280]
    30c4:	ldr	w6, [sp, #284]
    30c8:	ldr	w0, [sp, #288]
    30cc:	cset	w7, hi  // hi = pmore
    30d0:	b	2ba0 <ferror@plt+0x14b0>
    30d4:	ldr	w20, [sp, #268]
    30d8:	ldr	w22, [sp, #272]
    30dc:	ldr	w21, [sp, #276]
    30e0:	ldr	w19, [sp, #280]
    30e4:	ldr	w6, [sp, #284]
    30e8:	ldr	w0, [sp, #288]
    30ec:	cset	w7, hi  // hi = pmore
    30f0:	b	2ba0 <ferror@plt+0x14b0>
    30f4:	ldr	w20, [sp, #268]
    30f8:	ldr	w22, [sp, #272]
    30fc:	ldr	w21, [sp, #276]
    3100:	ldr	w19, [sp, #280]
    3104:	ldr	w6, [sp, #284]
    3108:	ldr	w0, [sp, #288]
    310c:	cset	w7, hi  // hi = pmore
    3110:	b	2ba0 <ferror@plt+0x14b0>
    3114:	mov	w8, w17
    3118:	str	w6, [x25, w8, sxtw #2]
    311c:	mov	w3, w18
    3120:	cmp	w20, w18
    3124:	b.lt	3794 <ferror@plt+0x20a4>  // b.tstop
    3128:	ldr	x0, [sp, #120]
    312c:	ldr	w6, [x0, x2, lsl #2]
    3130:	mov	x5, x4
    3134:	add	w0, w23, w6
    3138:	add	w12, w23, w6
    313c:	add	w11, w0, #0x1
    3140:	add	w10, w0, #0x2
    3144:	add	w9, w0, #0x3
    3148:	add	w13, w0, #0x4
    314c:	add	w14, w0, #0x5
    3150:	add	w15, w0, #0x6
    3154:	add	w1, w0, #0x7
    3158:	str	x1, [sp, #96]
    315c:	add	w1, w0, #0x8
    3160:	str	x1, [sp, #104]
    3164:	add	w1, w0, #0x9
    3168:	str	x1, [sp, #128]
    316c:	add	w1, w0, #0xa
    3170:	str	x1, [sp, #136]
    3174:	add	w1, w0, #0xb
    3178:	str	x1, [sp, #144]
    317c:	b	31b8 <ferror@plt+0x1ac8>
    3180:	mov	w8, w3
    3184:	b	3118 <ferror@plt+0x1a28>
    3188:	add	w8, w7, #0x1
    318c:	ldrb	w16, [x24, w8, uxtw]
    3190:	ldrb	w8, [x24, x11]
    3194:	cmp	w16, w8
    3198:	b.eq	31e4 <ferror@plt+0x1af4>  // b.none
    319c:	cset	w7, hi  // hi = pmore
    31a0:	cbz	w7, 3714 <ferror@plt+0x2024>
    31a4:	ldr	w7, [x1]
    31a8:	str	w7, [x1, x30, lsl #2]
    31ac:	add	x5, x5, x27
    31b0:	cmp	w19, w3
    31b4:	b.gt	378c <ferror@plt+0x209c>
    31b8:	mov	w17, w3
    31bc:	sub	w3, w3, w21
    31c0:	mov	x1, x5
    31c4:	ldr	w7, [x5]
    31c8:	add	w7, w23, w7
    31cc:	ldrb	w16, [x24, w7, uxtw]
    31d0:	ldrb	w8, [x24, x12]
    31d4:	cmp	w16, w8
    31d8:	b.eq	3188 <ferror@plt+0x1a98>  // b.none
    31dc:	cset	w7, hi  // hi = pmore
    31e0:	b	31a0 <ferror@plt+0x1ab0>
    31e4:	add	w8, w7, #0x2
    31e8:	ldrb	w16, [x24, w8, uxtw]
    31ec:	ldrb	w8, [x24, x10]
    31f0:	cmp	w16, w8
    31f4:	b.eq	3200 <ferror@plt+0x1b10>  // b.none
    31f8:	cset	w7, hi  // hi = pmore
    31fc:	b	31a0 <ferror@plt+0x1ab0>
    3200:	add	w8, w7, #0x3
    3204:	ldrb	w16, [x24, w8, uxtw]
    3208:	ldrb	w8, [x24, x9]
    320c:	cmp	w16, w8
    3210:	b.eq	321c <ferror@plt+0x1b2c>  // b.none
    3214:	cset	w7, hi  // hi = pmore
    3218:	b	31a0 <ferror@plt+0x1ab0>
    321c:	add	w8, w7, #0x4
    3220:	ldrb	w16, [x24, w8, uxtw]
    3224:	ldrb	w8, [x24, x13]
    3228:	cmp	w16, w8
    322c:	b.eq	3238 <ferror@plt+0x1b48>  // b.none
    3230:	cset	w7, hi  // hi = pmore
    3234:	b	31a0 <ferror@plt+0x1ab0>
    3238:	add	w8, w7, #0x5
    323c:	ldrb	w16, [x24, w8, uxtw]
    3240:	ldrb	w8, [x24, x14]
    3244:	cmp	w16, w8
    3248:	b.eq	3254 <ferror@plt+0x1b64>  // b.none
    324c:	cset	w7, hi  // hi = pmore
    3250:	b	31a0 <ferror@plt+0x1ab0>
    3254:	add	w8, w7, #0x6
    3258:	ldrb	w16, [x24, w8, uxtw]
    325c:	ldrb	w8, [x24, x15]
    3260:	cmp	w16, w8
    3264:	b.eq	3270 <ferror@plt+0x1b80>  // b.none
    3268:	cset	w7, hi  // hi = pmore
    326c:	b	31a0 <ferror@plt+0x1ab0>
    3270:	add	w8, w7, #0x7
    3274:	ldrb	w16, [x24, w8, uxtw]
    3278:	ldr	x8, [sp, #96]
    327c:	ldrb	w8, [x24, x8]
    3280:	cmp	w16, w8
    3284:	b.eq	3290 <ferror@plt+0x1ba0>  // b.none
    3288:	cset	w7, hi  // hi = pmore
    328c:	b	31a0 <ferror@plt+0x1ab0>
    3290:	add	w8, w7, #0x8
    3294:	ldrb	w16, [x24, w8, uxtw]
    3298:	ldr	x8, [sp, #104]
    329c:	ldrb	w8, [x24, x8]
    32a0:	cmp	w16, w8
    32a4:	b.eq	32b0 <ferror@plt+0x1bc0>  // b.none
    32a8:	cset	w7, hi  // hi = pmore
    32ac:	b	31a0 <ferror@plt+0x1ab0>
    32b0:	add	w8, w7, #0x9
    32b4:	ldrb	w16, [x24, w8, uxtw]
    32b8:	ldr	x8, [sp, #128]
    32bc:	ldrb	w8, [x24, x8]
    32c0:	cmp	w16, w8
    32c4:	b.eq	32d0 <ferror@plt+0x1be0>  // b.none
    32c8:	cset	w7, hi  // hi = pmore
    32cc:	b	31a0 <ferror@plt+0x1ab0>
    32d0:	add	w8, w7, #0xa
    32d4:	ldrb	w16, [x24, w8, uxtw]
    32d8:	ldr	x8, [sp, #136]
    32dc:	ldrb	w8, [x24, x8]
    32e0:	cmp	w16, w8
    32e4:	b.eq	32f0 <ferror@plt+0x1c00>  // b.none
    32e8:	cset	w7, hi  // hi = pmore
    32ec:	b	31a0 <ferror@plt+0x1ab0>
    32f0:	add	w8, w7, #0xb
    32f4:	ldrb	w16, [x24, w8, uxtw]
    32f8:	ldr	x8, [sp, #144]
    32fc:	ldrb	w8, [x24, x8]
    3300:	cmp	w16, w8
    3304:	b.eq	3314 <ferror@plt+0x1c24>  // b.none
    3308:	cmp	w16, w8
    330c:	cset	w7, hi  // hi = pmore
    3310:	b	31a0 <ferror@plt+0x1ab0>
    3314:	add	w8, w7, #0xc
    3318:	add	w16, w0, #0xc
    331c:	ldr	w7, [sp, #304]
    3320:	add	w7, w7, #0x8
    3324:	str	w20, [sp, #268]
    3328:	str	w22, [sp, #272]
    332c:	str	w21, [sp, #276]
    3330:	str	w19, [sp, #280]
    3334:	str	w6, [sp, #284]
    3338:	str	w0, [sp, #288]
    333c:	mov	w6, w8
    3340:	mov	w0, w7
    3344:	ldr	x19, [sp, #296]
    3348:	ldr	w20, [sp, #304]
    334c:	mov	w22, w6
    3350:	ldrb	w8, [x24, w6, uxtw]
    3354:	mov	w21, w16
    3358:	ldrb	w7, [x24, w16, uxtw]
    335c:	cmp	w8, w7
    3360:	b.ne	3514 <ferror@plt+0x1e24>  // b.any
    3364:	ldrh	w7, [x19, x22, lsl #1]
    3368:	ldrh	w8, [x19, x21, lsl #1]
    336c:	cmp	w7, w8
    3370:	b.ne	3534 <ferror@plt+0x1e44>  // b.any
    3374:	add	w7, w6, #0x1
    3378:	add	w22, w6, #0x1
    337c:	ldrb	w8, [x24, w7, uxtw]
    3380:	add	w7, w16, #0x1
    3384:	add	w21, w16, #0x1
    3388:	ldrb	w7, [x24, w7, uxtw]
    338c:	cmp	w8, w7
    3390:	b.ne	3554 <ferror@plt+0x1e64>  // b.any
    3394:	ldrh	w7, [x19, x22, lsl #1]
    3398:	ldrh	w8, [x19, x21, lsl #1]
    339c:	cmp	w7, w8
    33a0:	b.ne	3574 <ferror@plt+0x1e84>  // b.any
    33a4:	add	w7, w6, #0x2
    33a8:	add	w22, w6, #0x2
    33ac:	ldrb	w8, [x24, w7, uxtw]
    33b0:	add	w7, w16, #0x2
    33b4:	add	w21, w16, #0x2
    33b8:	ldrb	w7, [x24, w7, uxtw]
    33bc:	cmp	w8, w7
    33c0:	b.ne	3594 <ferror@plt+0x1ea4>  // b.any
    33c4:	ldrh	w7, [x19, x22, lsl #1]
    33c8:	ldrh	w8, [x19, x21, lsl #1]
    33cc:	cmp	w7, w8
    33d0:	b.ne	35b4 <ferror@plt+0x1ec4>  // b.any
    33d4:	add	w7, w6, #0x3
    33d8:	add	w22, w6, #0x3
    33dc:	ldrb	w8, [x24, w7, uxtw]
    33e0:	add	w7, w16, #0x3
    33e4:	add	w21, w16, #0x3
    33e8:	ldrb	w7, [x24, w7, uxtw]
    33ec:	cmp	w8, w7
    33f0:	b.ne	35d4 <ferror@plt+0x1ee4>  // b.any
    33f4:	ldrh	w7, [x19, x22, lsl #1]
    33f8:	ldrh	w8, [x19, x21, lsl #1]
    33fc:	cmp	w7, w8
    3400:	b.ne	35f4 <ferror@plt+0x1f04>  // b.any
    3404:	add	w7, w6, #0x4
    3408:	add	w22, w6, #0x4
    340c:	ldrb	w8, [x24, w7, uxtw]
    3410:	add	w7, w16, #0x4
    3414:	add	w21, w16, #0x4
    3418:	ldrb	w7, [x24, w7, uxtw]
    341c:	cmp	w8, w7
    3420:	b.ne	3614 <ferror@plt+0x1f24>  // b.any
    3424:	ldrh	w7, [x19, x22, lsl #1]
    3428:	ldrh	w8, [x19, x21, lsl #1]
    342c:	cmp	w7, w8
    3430:	b.ne	3634 <ferror@plt+0x1f44>  // b.any
    3434:	add	w7, w6, #0x5
    3438:	add	w22, w6, #0x5
    343c:	ldrb	w8, [x24, w7, uxtw]
    3440:	add	w7, w16, #0x5
    3444:	add	w21, w16, #0x5
    3448:	ldrb	w7, [x24, w7, uxtw]
    344c:	cmp	w8, w7
    3450:	b.ne	3654 <ferror@plt+0x1f64>  // b.any
    3454:	ldrh	w7, [x19, x22, lsl #1]
    3458:	ldrh	w8, [x19, x21, lsl #1]
    345c:	cmp	w7, w8
    3460:	b.ne	3674 <ferror@plt+0x1f84>  // b.any
    3464:	add	w7, w6, #0x6
    3468:	add	w22, w6, #0x6
    346c:	ldrb	w8, [x24, w7, uxtw]
    3470:	add	w7, w16, #0x6
    3474:	add	w21, w16, #0x6
    3478:	ldrb	w7, [x24, w7, uxtw]
    347c:	cmp	w8, w7
    3480:	b.ne	3694 <ferror@plt+0x1fa4>  // b.any
    3484:	ldrh	w7, [x19, x22, lsl #1]
    3488:	ldrh	w8, [x19, x21, lsl #1]
    348c:	cmp	w7, w8
    3490:	b.ne	36b4 <ferror@plt+0x1fc4>  // b.any
    3494:	add	w7, w6, #0x7
    3498:	add	w22, w6, #0x7
    349c:	ldrb	w8, [x24, w7, uxtw]
    34a0:	add	w7, w16, #0x7
    34a4:	add	w21, w16, #0x7
    34a8:	ldrb	w7, [x24, w7, uxtw]
    34ac:	cmp	w8, w7
    34b0:	b.ne	36d4 <ferror@plt+0x1fe4>  // b.any
    34b4:	ldrh	w7, [x19, x22, lsl #1]
    34b8:	ldrh	w8, [x19, x21, lsl #1]
    34bc:	cmp	w7, w8
    34c0:	b.ne	36f4 <ferror@plt+0x2004>  // b.any
    34c4:	add	w6, w6, #0x8
    34c8:	add	w16, w16, #0x8
    34cc:	sub	w7, w6, w20
    34d0:	cmp	w20, w6
    34d4:	csel	w6, w7, w6, ls  // ls = plast
    34d8:	sub	w7, w16, w20
    34dc:	cmp	w20, w16
    34e0:	csel	w16, w7, w16, ls  // ls = plast
    34e4:	ldr	w7, [x26]
    34e8:	sub	w7, w7, #0x1
    34ec:	str	w7, [x26]
    34f0:	subs	w0, w0, #0x8
    34f4:	b.pl	334c <ferror@plt+0x1c5c>  // b.nfrst
    34f8:	ldr	w20, [sp, #268]
    34fc:	ldr	w22, [sp, #272]
    3500:	ldr	w21, [sp, #276]
    3504:	ldr	w19, [sp, #280]
    3508:	ldr	w6, [sp, #284]
    350c:	mov	w8, w17
    3510:	b	3718 <ferror@plt+0x2028>
    3514:	ldr	w20, [sp, #268]
    3518:	ldr	w22, [sp, #272]
    351c:	ldr	w21, [sp, #276]
    3520:	ldr	w19, [sp, #280]
    3524:	ldr	w6, [sp, #284]
    3528:	ldr	w0, [sp, #288]
    352c:	cset	w7, hi  // hi = pmore
    3530:	b	31a0 <ferror@plt+0x1ab0>
    3534:	ldr	w20, [sp, #268]
    3538:	ldr	w22, [sp, #272]
    353c:	ldr	w21, [sp, #276]
    3540:	ldr	w19, [sp, #280]
    3544:	ldr	w6, [sp, #284]
    3548:	ldr	w0, [sp, #288]
    354c:	cset	w7, hi  // hi = pmore
    3550:	b	31a0 <ferror@plt+0x1ab0>
    3554:	ldr	w20, [sp, #268]
    3558:	ldr	w22, [sp, #272]
    355c:	ldr	w21, [sp, #276]
    3560:	ldr	w19, [sp, #280]
    3564:	ldr	w6, [sp, #284]
    3568:	ldr	w0, [sp, #288]
    356c:	cset	w7, hi  // hi = pmore
    3570:	b	31a0 <ferror@plt+0x1ab0>
    3574:	ldr	w20, [sp, #268]
    3578:	ldr	w22, [sp, #272]
    357c:	ldr	w21, [sp, #276]
    3580:	ldr	w19, [sp, #280]
    3584:	ldr	w6, [sp, #284]
    3588:	ldr	w0, [sp, #288]
    358c:	cset	w7, hi  // hi = pmore
    3590:	b	31a0 <ferror@plt+0x1ab0>
    3594:	ldr	w20, [sp, #268]
    3598:	ldr	w22, [sp, #272]
    359c:	ldr	w21, [sp, #276]
    35a0:	ldr	w19, [sp, #280]
    35a4:	ldr	w6, [sp, #284]
    35a8:	ldr	w0, [sp, #288]
    35ac:	cset	w7, hi  // hi = pmore
    35b0:	b	31a0 <ferror@plt+0x1ab0>
    35b4:	ldr	w20, [sp, #268]
    35b8:	ldr	w22, [sp, #272]
    35bc:	ldr	w21, [sp, #276]
    35c0:	ldr	w19, [sp, #280]
    35c4:	ldr	w6, [sp, #284]
    35c8:	ldr	w0, [sp, #288]
    35cc:	cset	w7, hi  // hi = pmore
    35d0:	b	31a0 <ferror@plt+0x1ab0>
    35d4:	ldr	w20, [sp, #268]
    35d8:	ldr	w22, [sp, #272]
    35dc:	ldr	w21, [sp, #276]
    35e0:	ldr	w19, [sp, #280]
    35e4:	ldr	w6, [sp, #284]
    35e8:	ldr	w0, [sp, #288]
    35ec:	cset	w7, hi  // hi = pmore
    35f0:	b	31a0 <ferror@plt+0x1ab0>
    35f4:	ldr	w20, [sp, #268]
    35f8:	ldr	w22, [sp, #272]
    35fc:	ldr	w21, [sp, #276]
    3600:	ldr	w19, [sp, #280]
    3604:	ldr	w6, [sp, #284]
    3608:	ldr	w0, [sp, #288]
    360c:	cset	w7, hi  // hi = pmore
    3610:	b	31a0 <ferror@plt+0x1ab0>
    3614:	ldr	w20, [sp, #268]
    3618:	ldr	w22, [sp, #272]
    361c:	ldr	w21, [sp, #276]
    3620:	ldr	w19, [sp, #280]
    3624:	ldr	w6, [sp, #284]
    3628:	ldr	w0, [sp, #288]
    362c:	cset	w7, hi  // hi = pmore
    3630:	b	31a0 <ferror@plt+0x1ab0>
    3634:	ldr	w20, [sp, #268]
    3638:	ldr	w22, [sp, #272]
    363c:	ldr	w21, [sp, #276]
    3640:	ldr	w19, [sp, #280]
    3644:	ldr	w6, [sp, #284]
    3648:	ldr	w0, [sp, #288]
    364c:	cset	w7, hi  // hi = pmore
    3650:	b	31a0 <ferror@plt+0x1ab0>
    3654:	ldr	w20, [sp, #268]
    3658:	ldr	w22, [sp, #272]
    365c:	ldr	w21, [sp, #276]
    3660:	ldr	w19, [sp, #280]
    3664:	ldr	w6, [sp, #284]
    3668:	ldr	w0, [sp, #288]
    366c:	cset	w7, hi  // hi = pmore
    3670:	b	31a0 <ferror@plt+0x1ab0>
    3674:	ldr	w20, [sp, #268]
    3678:	ldr	w22, [sp, #272]
    367c:	ldr	w21, [sp, #276]
    3680:	ldr	w19, [sp, #280]
    3684:	ldr	w6, [sp, #284]
    3688:	ldr	w0, [sp, #288]
    368c:	cset	w7, hi  // hi = pmore
    3690:	b	31a0 <ferror@plt+0x1ab0>
    3694:	ldr	w20, [sp, #268]
    3698:	ldr	w22, [sp, #272]
    369c:	ldr	w21, [sp, #276]
    36a0:	ldr	w19, [sp, #280]
    36a4:	ldr	w6, [sp, #284]
    36a8:	ldr	w0, [sp, #288]
    36ac:	cset	w7, hi  // hi = pmore
    36b0:	b	31a0 <ferror@plt+0x1ab0>
    36b4:	ldr	w20, [sp, #268]
    36b8:	ldr	w22, [sp, #272]
    36bc:	ldr	w21, [sp, #276]
    36c0:	ldr	w19, [sp, #280]
    36c4:	ldr	w6, [sp, #284]
    36c8:	ldr	w0, [sp, #288]
    36cc:	cset	w7, hi  // hi = pmore
    36d0:	b	31a0 <ferror@plt+0x1ab0>
    36d4:	ldr	w20, [sp, #268]
    36d8:	ldr	w22, [sp, #272]
    36dc:	ldr	w21, [sp, #276]
    36e0:	ldr	w19, [sp, #280]
    36e4:	ldr	w6, [sp, #284]
    36e8:	ldr	w0, [sp, #288]
    36ec:	cset	w7, hi  // hi = pmore
    36f0:	b	31a0 <ferror@plt+0x1ab0>
    36f4:	ldr	w20, [sp, #268]
    36f8:	ldr	w22, [sp, #272]
    36fc:	ldr	w21, [sp, #276]
    3700:	ldr	w19, [sp, #280]
    3704:	ldr	w6, [sp, #284]
    3708:	ldr	w0, [sp, #288]
    370c:	cset	w7, hi  // hi = pmore
    3710:	b	31a0 <ferror@plt+0x1ab0>
    3714:	mov	w8, w17
    3718:	str	w6, [x25, w8, sxtw #2]
    371c:	add	x2, x2, #0x3
    3720:	add	w18, w18, #0x3
    3724:	add	x4, x4, #0xc
    3728:	add	w28, w28, #0x3
    372c:	ldr	w0, [x26]
    3730:	tbnz	w0, #31, 3f9c <ferror@plt+0x28ac>
    3734:	mov	w3, w2
    3738:	cmp	w20, w2
    373c:	b.lt	3794 <ferror@plt+0x20a4>  // b.tstop
    3740:	ldr	w6, [x25, x2, lsl #2]
    3744:	sub	x5, x4, #0x8
    3748:	add	w0, w6, w22
    374c:	add	w11, w0, #0x1
    3750:	add	w10, w0, #0x2
    3754:	add	w9, w0, #0x3
    3758:	add	w12, w0, #0x4
    375c:	add	w13, w0, #0x5
    3760:	add	w14, w0, #0x6
    3764:	add	w17, w0, #0x7
    3768:	add	w1, w0, #0x8
    376c:	str	x1, [sp, #96]
    3770:	add	w1, w0, #0x9
    3774:	str	x1, [sp, #104]
    3778:	add	w1, w0, #0xa
    377c:	str	x1, [sp, #128]
    3780:	add	w1, w0, #0xb
    3784:	str	x1, [sp, #136]
    3788:	b	25bc <ferror@plt+0xecc>
    378c:	mov	w8, w3
    3790:	b	3718 <ferror@plt+0x2028>
    3794:	ldr	x0, [sp, #152]
    3798:	sub	x0, x0, #0x1
    379c:	str	x0, [sp, #152]
    37a0:	tbnz	w0, #31, 37ec <ferror@plt+0x20fc>
    37a4:	ldr	x0, [sp, #200]
    37a8:	ldr	x1, [sp, #152]
    37ac:	ldr	w26, [x0, x1, lsl #2]
    37b0:	ldr	w0, [sp, #164]
    37b4:	add	w19, w0, w26
    37b8:	sxtw	x2, w19
    37bc:	add	w18, w19, #0x2
    37c0:	sxtw	x30, w26
    37c4:	ldr	x0, [sp, #208]
    37c8:	add	x4, x25, x0
    37cc:	add	w28, w19, #0x1
    37d0:	neg	w0, w26
    37d4:	sbfiz	x27, x0, #2, #32
    37d8:	ldr	w20, [sp, #216]
    37dc:	ldr	w22, [sp, #184]
    37e0:	mov	w21, w26
    37e4:	ldr	x26, [sp, #192]
    37e8:	b	3734 <ferror@plt+0x2044>
    37ec:	ldr	x0, [sp, #192]
    37f0:	ldr	w0, [x0]
    37f4:	tbnz	w0, #31, 3f9c <ferror@plt+0x28ac>
    37f8:	ldr	w0, [sp, #188]
    37fc:	cmp	w0, #0x0
    3800:	b.le	3bec <ferror@plt+0x24fc>
    3804:	ldr	w0, [sp, #188]
    3808:	cmp	w0, #0x61
    380c:	b.le	3818 <ferror@plt+0x2128>
    3810:	mov	w0, #0x3e9                 	// #1001
    3814:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    3818:	ldr	w14, [sp, #188]
    381c:	sub	w0, w14, #0x1
    3820:	str	w0, [sp, #188]
    3824:	sxtw	x0, w0
    3828:	ldr	x1, [sp, #240]
    382c:	ldr	w2, [x1, x0, lsl #2]
    3830:	str	w2, [sp, #164]
    3834:	ldr	x1, [sp, #232]
    3838:	ldr	w30, [x1, x0, lsl #2]
    383c:	add	x1, sp, #0x470
    3840:	ldr	w0, [x1, x0, lsl #2]
    3844:	str	w0, [sp, #184]
    3848:	sub	w2, w30, w2
    384c:	cmp	w2, #0x13
    3850:	ccmp	w0, #0xe, #0x0, gt
    3854:	b.le	38c8 <ferror@plt+0x21d8>
    3858:	add	w2, w2, #0x1
    385c:	cmp	w2, #0x1
    3860:	b.le	37ec <ferror@plt+0x20fc>
    3864:	mov	x0, #0x0                   	// #0
    3868:	adrp	x3, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    386c:	add	x3, x3, #0x440
    3870:	mov	w4, w0
    3874:	add	x0, x0, #0x1
    3878:	ldr	w1, [x3, x0, lsl #2]
    387c:	cmp	w2, w1
    3880:	b.gt	3870 <ferror@plt+0x2180>
    3884:	tbnz	w4, #31, 37ec <ferror@plt+0x20fc>
    3888:	sxtw	x0, w4
    388c:	str	x0, [sp, #152]
    3890:	adrp	x0, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    3894:	add	x0, x0, #0x440
    3898:	str	x0, [sp, #200]
    389c:	ldrsw	x0, [sp, #164]
    38a0:	add	x0, x0, #0x2
    38a4:	lsl	x0, x0, #2
    38a8:	str	x0, [sp, #208]
    38ac:	ldr	w23, [sp, #184]
    38b0:	add	x0, x25, #0x4
    38b4:	str	x0, [sp, #112]
    38b8:	add	x0, x25, #0x8
    38bc:	str	x0, [sp, #120]
    38c0:	str	w30, [sp, #216]
    38c4:	b	37a4 <ferror@plt+0x20b4>
    38c8:	ldr	w3, [sp, #164]
    38cc:	sxtw	x15, w3
    38d0:	add	x11, x25, w3, sxtw #2
    38d4:	ldr	w2, [sp, #184]
    38d8:	mov	w9, w2
    38dc:	ldr	w0, [x25, x15, lsl #2]
    38e0:	add	w0, w2, w0
    38e4:	ldrb	w0, [x24, w0, uxtw]
    38e8:	ldr	w1, [x25, w30, sxtw #2]
    38ec:	add	w1, w2, w1
    38f0:	ldrb	w5, [x24, w1, uxtw]
    38f4:	add	w1, w3, w30
    38f8:	asr	w1, w1, #1
    38fc:	ldr	w1, [x25, w1, sxtw #2]
    3900:	add	w1, w2, w1
    3904:	ldrb	w1, [x24, w1, uxtw]
    3908:	cmp	w0, w5
    390c:	ldr	w2, [sp, #264]
    3910:	csel	w3, w2, w0, ls  // ls = plast
    3914:	csel	w2, w0, w5, ls  // ls = plast
    3918:	csel	w5, w5, w0, ls  // ls = plast
    391c:	str	w3, [sp, #264]
    3920:	cmp	w1, w5
    3924:	b.cs	3934 <ferror@plt+0x2244>  // b.hs, b.nlast
    3928:	cmp	w2, w1
    392c:	csel	w5, w2, w1, hi  // hi = pmore
    3930:	and	w5, w5, #0xff
    3934:	ldr	w8, [sp, #164]
    3938:	mov	w10, w8
    393c:	mov	x12, x11
    3940:	mov	w7, w30
    3944:	mov	w2, w30
    3948:	b	39d8 <ferror@plt+0x22e8>
    394c:	sxtw	x0, w8
    3950:	ldr	w3, [x25, x0, lsl #2]
    3954:	str	w3, [x11]
    3958:	str	w1, [x25, x0, lsl #2]
    395c:	add	w8, w8, #0x1
    3960:	b	39d0 <ferror@plt+0x22e0>
    3964:	sxtw	x0, w7
    3968:	ldr	w2, [x25, x0, lsl #2]
    396c:	str	w2, [x3]
    3970:	str	w4, [x25, x0, lsl #2]
    3974:	sub	w7, w7, #0x1
    3978:	sub	w2, w1, #0x1
    397c:	sub	x3, x3, #0x4
    3980:	sub	w1, w1, #0x1
    3984:	cmp	w6, w2
    3988:	b.gt	3a10 <ferror@plt+0x2320>
    398c:	mov	w2, w1
    3990:	ldr	w4, [x3]
    3994:	add	w0, w9, w4
    3998:	ldrb	w0, [x24, w0, uxtw]
    399c:	subs	w0, w0, w5
    39a0:	b.eq	3964 <ferror@plt+0x2274>  // b.none
    39a4:	tbnz	w0, #31, 39b0 <ferror@plt+0x22c0>
    39a8:	sub	w2, w1, #0x1
    39ac:	b	397c <ferror@plt+0x228c>
    39b0:	cmp	w6, w1
    39b4:	b.gt	3a10 <ferror@plt+0x2320>
    39b8:	ldr	w1, [x13]
    39bc:	sxtw	x0, w2
    39c0:	ldr	w3, [x25, x0, lsl #2]
    39c4:	str	w3, [x13]
    39c8:	str	w1, [x25, x0, lsl #2]
    39cc:	sub	w2, w2, #0x1
    39d0:	add	w10, w10, #0x1
    39d4:	add	x11, x11, #0x4
    39d8:	mov	w6, w10
    39dc:	cmp	w10, w2
    39e0:	b.gt	3a10 <ferror@plt+0x2320>
    39e4:	mov	x13, x11
    39e8:	ldr	w1, [x11]
    39ec:	add	w0, w9, w1
    39f0:	ldrb	w0, [x24, w0, uxtw]
    39f4:	subs	w0, w0, w5
    39f8:	b.eq	394c <ferror@plt+0x225c>  // b.none
    39fc:	cmp	w0, #0x0
    3a00:	b.le	39d0 <ferror@plt+0x22e0>
    3a04:	add	x3, x25, w2, sxtw #2
    3a08:	mov	w1, w2
    3a0c:	b	398c <ferror@plt+0x229c>
    3a10:	cmp	w8, w7
    3a14:	b.le	3a34 <ferror@plt+0x2344>
    3a18:	ldr	w0, [sp, #184]
    3a1c:	add	w1, w0, #0x1
    3a20:	add	x0, sp, #0x470
    3a24:	ldr	w2, [sp, #188]
    3a28:	str	w1, [x0, w2, sxtw #2]
    3a2c:	str	w14, [sp, #188]
    3a30:	b	37f8 <ferror@plt+0x2108>
    3a34:	sub	w0, w6, w8
    3a38:	ldr	w1, [sp, #164]
    3a3c:	sub	w1, w8, w1
    3a40:	cmp	w0, w1
    3a44:	csel	w0, w0, w1, le
    3a48:	sub	w1, w6, w0
    3a4c:	cmp	w0, #0x0
    3a50:	b.le	3a88 <ferror@plt+0x2398>
    3a54:	sub	w0, w0, #0x1
    3a58:	add	x0, x0, x15
    3a5c:	add	x3, x25, #0x4
    3a60:	add	x0, x3, x0, lsl #2
    3a64:	sxtw	x1, w1
    3a68:	sub	x15, x1, x15
    3a6c:	ldr	w1, [x12]
    3a70:	ldr	w3, [x12, x15, lsl #2]
    3a74:	str	w3, [x12]
    3a78:	str	w1, [x12, x15, lsl #2]
    3a7c:	add	x12, x12, #0x4
    3a80:	cmp	x12, x0
    3a84:	b.ne	3a6c <ferror@plt+0x237c>  // b.any
    3a88:	sub	w2, w7, w2
    3a8c:	sub	w0, w30, w7
    3a90:	cmp	w0, w2
    3a94:	csel	w0, w0, w2, le
    3a98:	sub	w1, w30, w0
    3a9c:	cmp	w0, #0x0
    3aa0:	b.le	3ae4 <ferror@plt+0x23f4>
    3aa4:	sxtw	x4, w6
    3aa8:	add	x3, x25, w6, sxtw #2
    3aac:	sub	w0, w0, #0x1
    3ab0:	add	x0, x0, x4
    3ab4:	add	x5, x25, #0x4
    3ab8:	add	x0, x5, x0, lsl #2
    3abc:	sxtw	x1, w1
    3ac0:	sub	x4, x1, x4
    3ac4:	mov	x1, x3
    3ac8:	ldr	w5, [x1], #4
    3acc:	ldr	w7, [x1, x4, lsl #2]
    3ad0:	str	w7, [x3]
    3ad4:	str	w5, [x1, x4, lsl #2]
    3ad8:	mov	x3, x1
    3adc:	cmp	x1, x0
    3ae0:	b.ne	3ac4 <ferror@plt+0x23d4>  // b.any
    3ae4:	ldr	w4, [sp, #164]
    3ae8:	add	w0, w4, w6
    3aec:	sub	w0, w0, w8
    3af0:	sub	w3, w0, #0x1
    3af4:	sub	w2, w30, w2
    3af8:	add	w1, w2, #0x1
    3afc:	ldr	w5, [sp, #184]
    3b00:	add	w7, w5, #0x1
    3b04:	mov	w6, w4
    3b08:	sub	w5, w3, w4
    3b0c:	sub	w4, w30, w1
    3b10:	cmp	w5, w4
    3b14:	b.ge	3b2c <ferror@plt+0x243c>  // b.tcont
    3b18:	mov	w4, w3
    3b1c:	mov	w3, w30
    3b20:	mov	w30, w4
    3b24:	str	w1, [sp, #164]
    3b28:	mov	w1, w6
    3b2c:	sub	w5, w30, w1
    3b30:	sub	w4, w2, w0
    3b34:	ldr	w8, [sp, #184]
    3b38:	mov	w6, w8
    3b3c:	cmp	w5, w4
    3b40:	b.ge	3b64 <ferror@plt+0x2474>  // b.tcont
    3b44:	mov	w6, w7
    3b48:	mov	w7, w8
    3b4c:	mov	w4, w30
    3b50:	mov	w30, w2
    3b54:	mov	w2, w4
    3b58:	mov	w4, w1
    3b5c:	mov	w1, w0
    3b60:	mov	w0, w4
    3b64:	ldr	w8, [sp, #164]
    3b68:	sub	w4, w3, w8
    3b6c:	sub	w5, w30, w1
    3b70:	cmp	w4, w5
    3b74:	b.ge	3b98 <ferror@plt+0x24a8>  // b.tcont
    3b78:	ldr	w4, [sp, #184]
    3b7c:	str	w6, [sp, #184]
    3b80:	mov	w6, w4
    3b84:	mov	w4, w3
    3b88:	mov	w3, w30
    3b8c:	mov	w30, w4
    3b90:	str	w1, [sp, #164]
    3b94:	mov	w1, w8
    3b98:	ldrsw	x4, [sp, #188]
    3b9c:	ldr	x5, [sp, #240]
    3ba0:	ldr	w8, [sp, #164]
    3ba4:	str	w8, [x5, x4, lsl #2]
    3ba8:	ldr	x8, [sp, #232]
    3bac:	str	w3, [x8, x4, lsl #2]
    3bb0:	add	x3, sp, #0x470
    3bb4:	ldr	w9, [sp, #184]
    3bb8:	str	w9, [x3, x4, lsl #2]
    3bbc:	sxtw	x4, w14
    3bc0:	str	w1, [x5, x4, lsl #2]
    3bc4:	str	w30, [x8, x4, lsl #2]
    3bc8:	str	w6, [x3, x4, lsl #2]
    3bcc:	add	w1, w14, #0x1
    3bd0:	sxtw	x1, w1
    3bd4:	str	w0, [x5, x1, lsl #2]
    3bd8:	str	w2, [x8, x1, lsl #2]
    3bdc:	str	w7, [x3, x1, lsl #2]
    3be0:	add	w0, w14, #0x2
    3be4:	str	w0, [sp, #188]
    3be8:	b	37f8 <ferror@plt+0x2108>
    3bec:	mov	x19, x24
    3bf0:	mov	x24, x25
    3bf4:	ldr	w0, [sp, #228]
    3bf8:	ldr	w1, [sp, #224]
    3bfc:	sub	w0, w0, w1
    3c00:	add	w0, w0, #0x1
    3c04:	ldr	w1, [sp, #252]
    3c08:	add	w0, w1, w0
    3c0c:	str	w0, [sp, #252]
    3c10:	ldr	x0, [sp, #192]
    3c14:	ldr	w0, [x0]
    3c18:	tbnz	w0, #31, 3f9c <ferror@plt+0x28ac>
    3c1c:	ldr	x1, [sp, #168]
    3c20:	ldr	x2, [sp, #176]
    3c24:	ldr	w0, [x1, x2, lsl #2]
    3c28:	orr	w0, w0, #0x200000
    3c2c:	str	w0, [x1, x2, lsl #2]
    3c30:	ldr	w0, [sp, #160]
    3c34:	add	w0, w0, #0x1
    3c38:	str	w0, [sp, #160]
    3c3c:	cmp	w0, #0x100
    3c40:	b.eq	3cd4 <ferror@plt+0x25e4>  // b.none
    3c44:	ldr	w1, [sp, #220]
    3c48:	ldr	w0, [sp, #160]
    3c4c:	cmp	w1, w0
    3c50:	b.eq	3c30 <ferror@plt+0x2540>  // b.none
    3c54:	ldr	w1, [sp, #248]
    3c58:	add	w0, w1, w0
    3c5c:	sxtw	x1, w0
    3c60:	str	x1, [sp, #176]
    3c64:	sbfiz	x0, x0, #2, #32
    3c68:	ldr	x2, [sp, #168]
    3c6c:	ldr	w1, [x2, x1, lsl #2]
    3c70:	tbnz	w1, #21, 3c1c <ferror@plt+0x252c>
    3c74:	and	w1, w1, #0xffdfffff
    3c78:	str	w1, [sp, #224]
    3c7c:	add	x0, x2, x0
    3c80:	ldr	w0, [x0, #4]
    3c84:	and	w0, w0, #0xffdfffff
    3c88:	sub	w0, w0, #0x1
    3c8c:	str	w0, [sp, #228]
    3c90:	cmp	w1, w0
    3c94:	b.ge	3c1c <ferror@plt+0x252c>  // b.tcont
    3c98:	ldr	w0, [sp, #256]
    3c9c:	cmp	w0, #0x3
    3ca0:	b.gt	2558 <ferror@plt+0xe68>
    3ca4:	ldr	w0, [sp, #224]
    3ca8:	str	w0, [sp, #336]
    3cac:	ldr	w0, [sp, #228]
    3cb0:	str	w0, [sp, #736]
    3cb4:	mov	w0, #0x2                   	// #2
    3cb8:	str	w0, [sp, #1136]
    3cbc:	ldr	w14, [sp, #260]
    3cc0:	add	x0, sp, #0x2e0
    3cc4:	str	x0, [sp, #232]
    3cc8:	mov	x25, x24
    3ccc:	mov	x24, x19
    3cd0:	b	381c <ferror@plt+0x212c>
    3cd4:	add	x0, sp, #0xe00
    3cd8:	ldr	w1, [sp, #220]
    3cdc:	ldrb	w0, [x0, w1, sxtw]
    3ce0:	cbnz	w0, 3d78 <ferror@plt+0x2688>
    3ce4:	ldr	w0, [sp, #220]
    3ce8:	sbfiz	x21, x0, #2, #32
    3cec:	ldr	x0, [sp, #168]
    3cf0:	add	x23, x0, x21
    3cf4:	mov	x3, x23
    3cf8:	mov	x2, #0x1                   	// #1
    3cfc:	add	x6, sp, #0xa00
    3d00:	add	x5, sp, #0x600
    3d04:	lsl	x0, x2, #2
    3d08:	add	x4, x0, x6
    3d0c:	ldr	w1, [x3]
    3d10:	and	w1, w1, #0xffdfffff
    3d14:	stur	w1, [x4, #-4]
    3d18:	add	x1, x0, x5
    3d1c:	ldr	w0, [x3, #4]
    3d20:	and	w0, w0, #0xffdfffff
    3d24:	sub	w0, w0, #0x1
    3d28:	stur	w0, [x1, #-4]
    3d2c:	add	x2, x2, #0x1
    3d30:	add	x3, x3, #0x400
    3d34:	cmp	x2, #0x101
    3d38:	b.ne	3d04 <ferror@plt+0x2614>  // b.any
    3d3c:	ldrsw	x20, [sp, #248]
    3d40:	ldr	x0, [sp, #168]
    3d44:	ldr	w1, [x0, x20, lsl #2]
    3d48:	and	w1, w1, #0xffdfffff
    3d4c:	add	x0, sp, #0xa00
    3d50:	ldr	w2, [sp, #220]
    3d54:	ldr	w3, [x0, w2, sxtw #2]
    3d58:	cmp	w1, w3
    3d5c:	b.ge	3dc8 <ferror@plt+0x26d8>  // b.tcont
    3d60:	sxtw	x1, w1
    3d64:	add	x6, sp, #0xe00
    3d68:	mov	x4, x0
    3d6c:	sbfiz	x5, x2, #2, #32
    3d70:	ldr	w7, [sp, #292]
    3d74:	b	3d94 <ferror@plt+0x26a4>
    3d78:	mov	w0, #0x3ee                 	// #1006
    3d7c:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    3d80:	b	3ce4 <ferror@plt+0x25f4>
    3d84:	ldr	w3, [x4, x5]
    3d88:	add	x1, x1, #0x1
    3d8c:	cmp	w3, w1
    3d90:	b.le	3dc8 <ferror@plt+0x26d8>
    3d94:	ldr	w0, [x24, x1, lsl #2]
    3d98:	subs	w0, w0, #0x1
    3d9c:	add	w2, w0, w7
    3da0:	csel	w0, w2, w0, mi  // mi = first
    3da4:	ldrb	w2, [x19, w0, sxtw]
    3da8:	ldrb	w3, [x6, w2, sxtw]
    3dac:	cbnz	w3, 3d84 <ferror@plt+0x2694>
    3db0:	sxtw	x2, w2
    3db4:	ldr	w3, [x4, x2, lsl #2]
    3db8:	add	w8, w3, #0x1
    3dbc:	str	w8, [x4, x2, lsl #2]
    3dc0:	str	w0, [x24, w3, sxtw #2]
    3dc4:	b	3d84 <ferror@plt+0x2694>
    3dc8:	ldr	w2, [sp, #220]
    3dcc:	add	w22, w2, #0x1
    3dd0:	lsl	w22, w22, #8
    3dd4:	sxtw	x22, w22
    3dd8:	ldr	x0, [sp, #168]
    3ddc:	ldr	w1, [x0, x22, lsl #2]
    3de0:	and	w1, w1, #0xffdfffff
    3de4:	sub	w1, w1, #0x1
    3de8:	add	x0, sp, #0x600
    3dec:	ldr	w0, [x0, w2, sxtw #2]
    3df0:	cmp	w1, w0
    3df4:	b.le	3e54 <ferror@plt+0x2764>
    3df8:	sxtw	x1, w1
    3dfc:	add	x7, sp, #0xe00
    3e00:	add	x4, sp, #0x600
    3e04:	sbfiz	x6, x2, #2, #32
    3e08:	ldr	w8, [sp, #292]
    3e0c:	b	3e20 <ferror@plt+0x2730>
    3e10:	ldr	w0, [x4, x6]
    3e14:	sub	x1, x1, #0x1
    3e18:	cmp	w0, w1
    3e1c:	b.ge	3e54 <ferror@plt+0x2764>  // b.tcont
    3e20:	ldr	w0, [x24, x1, lsl #2]
    3e24:	subs	w0, w0, #0x1
    3e28:	add	w2, w0, w8
    3e2c:	csel	w0, w2, w0, mi  // mi = first
    3e30:	ldrb	w2, [x19, w0, sxtw]
    3e34:	ldrb	w5, [x7, w2, sxtw]
    3e38:	cbnz	w5, 3e10 <ferror@plt+0x2720>
    3e3c:	sxtw	x2, w2
    3e40:	ldr	w5, [x4, x2, lsl #2]
    3e44:	sub	w9, w5, #0x1
    3e48:	str	w9, [x4, x2, lsl #2]
    3e4c:	str	w0, [x24, w5, sxtw #2]
    3e50:	b	3e10 <ferror@plt+0x2720>
    3e54:	sub	w1, w3, #0x1
    3e58:	cmp	w1, w0
    3e5c:	b.eq	3e78 <ferror@plt+0x2788>  // b.none
    3e60:	cmp	w3, #0x0
    3e64:	ldr	w1, [sp, #308]
    3e68:	ccmp	w1, w0, #0x0, eq  // eq = none
    3e6c:	b.eq	3e78 <ferror@plt+0x2788>  // b.none
    3e70:	mov	w0, #0x3ef                 	// #1007
    3e74:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    3e78:	ldr	x0, [sp, #328]
    3e7c:	add	x0, x0, #0x40, lsl #12
    3e80:	add	x21, x0, x21
    3e84:	ldr	w0, [x23]
    3e88:	orr	w0, w0, #0x200000
    3e8c:	str	w0, [x23]
    3e90:	add	x23, x23, #0x400
    3e94:	cmp	x23, x21
    3e98:	b.ne	3e84 <ferror@plt+0x2794>  // b.any
    3e9c:	add	x0, sp, #0xe00
    3ea0:	mov	w1, #0x1                   	// #1
    3ea4:	ldr	w2, [sp, #220]
    3ea8:	strb	w1, [x0, w2, sxtw]
    3eac:	ldr	w0, [sp, #312]
    3eb0:	cmp	w0, #0xfe
    3eb4:	b.gt	3f80 <ferror@plt+0x2890>
    3eb8:	ldr	x0, [sp, #168]
    3ebc:	ldr	w5, [x0, x20, lsl #2]
    3ec0:	and	w5, w5, #0xffdfffff
    3ec4:	ldr	w0, [x0, x22, lsl #2]
    3ec8:	and	w0, w0, #0xffdfffff
    3ecc:	sub	w0, w0, w5
    3ed0:	mov	w1, #0xfffe                	// #65534
    3ed4:	cmp	w0, w1
    3ed8:	b.le	3f0c <ferror@plt+0x281c>
    3edc:	mov	w3, #0x0                   	// #0
    3ee0:	mov	w2, w1
    3ee4:	add	w3, w3, #0x1
    3ee8:	asr	w1, w0, w3
    3eec:	cmp	w1, w2
    3ef0:	b.gt	3ee4 <ferror@plt+0x27f4>
    3ef4:	sub	w4, w0, #0x1
    3ef8:	sxtw	x0, w4
    3efc:	add	x5, x24, w5, sxtw #2
    3f00:	ldr	x6, [sp, #296]
    3f04:	ldr	w7, [sp, #292]
    3f08:	b	3f24 <ferror@plt+0x2834>
    3f0c:	subs	w4, w0, #0x1
    3f10:	b.mi	3f58 <ferror@plt+0x2868>  // b.first
    3f14:	mov	w3, #0x0                   	// #0
    3f18:	b	3ef8 <ferror@plt+0x2808>
    3f1c:	sub	x0, x0, #0x1
    3f20:	tbnz	w0, #31, 3f48 <ferror@plt+0x2858>
    3f24:	ldr	w1, [x5, x0, lsl #2]
    3f28:	asr	w2, w0, w3
    3f2c:	and	w2, w2, #0xffff
    3f30:	strh	w2, [x6, w1, sxtw #1]
    3f34:	cmp	w1, #0x21
    3f38:	b.gt	3f1c <ferror@plt+0x282c>
    3f3c:	add	w1, w7, w1
    3f40:	strh	w2, [x6, w1, sxtw #1]
    3f44:	b	3f1c <ferror@plt+0x282c>
    3f48:	asr	w0, w4, w3
    3f4c:	mov	w1, #0xffff                	// #65535
    3f50:	cmp	w0, w1
    3f54:	b.gt	3f74 <ferror@plt+0x2884>
    3f58:	ldr	x0, [sp, #312]
    3f5c:	add	x0, x0, #0x1
    3f60:	str	x0, [sp, #312]
    3f64:	ldr	x0, [sp, #320]
    3f68:	add	x0, x0, #0x4
    3f6c:	str	x0, [sp, #320]
    3f70:	b	253c <ferror@plt+0xe4c>
    3f74:	mov	w0, #0x3ea                 	// #1002
    3f78:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    3f7c:	b	3f58 <ferror@plt+0x2868>
    3f80:	ldr	w0, [sp, #312]
    3f84:	add	w0, w0, #0x1
    3f88:	cmp	w0, #0xff
    3f8c:	b.le	3f58 <ferror@plt+0x2868>
    3f90:	ldr	w0, [sp, #256]
    3f94:	cmp	w0, #0x3
    3f98:	b.gt	3fc0 <ferror@plt+0x28d0>
    3f9c:	ldp	x19, x20, [sp, #16]
    3fa0:	ldp	x21, x22, [sp, #32]
    3fa4:	ldp	x23, x24, [sp, #48]
    3fa8:	ldp	x25, x26, [sp, #64]
    3fac:	ldp	x27, x28, [sp, #80]
    3fb0:	ldp	x29, x30, [sp]
    3fb4:	mov	x12, #0x1300                	// #4864
    3fb8:	add	sp, sp, x12
    3fbc:	ret
    3fc0:	ldr	w0, [sp, #292]
    3fc4:	ldr	w1, [sp, #252]
    3fc8:	sub	w4, w0, w1
    3fcc:	mov	w3, w1
    3fd0:	mov	w2, w0
    3fd4:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    3fd8:	add	x1, x1, #0x3b0
    3fdc:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    3fe0:	ldr	x0, [x0, #4016]
    3fe4:	ldr	x0, [x0]
    3fe8:	bl	16e0 <fprintf@plt>
    3fec:	b	3f9c <ferror@plt+0x28ac>

0000000000003ff0 <BZ2_blockSort@@Base>:
    3ff0:	stp	x29, x30, [sp, #-80]!
    3ff4:	mov	x29, sp
    3ff8:	stp	x19, x20, [sp, #16]
    3ffc:	stp	x21, x22, [sp, #32]
    4000:	stp	x23, x24, [sp, #48]
    4004:	mov	x19, x0
    4008:	ldr	x21, [x0, #56]
    400c:	ldr	x24, [x0, #40]
    4010:	ldr	w22, [x0, #108]
    4014:	ldr	w23, [x0, #656]
    4018:	mov	w0, #0x270f                	// #9999
    401c:	cmp	w22, w0
    4020:	b.le	40f0 <BZ2_blockSort@@Base+0x100>
    4024:	and	w2, w22, #0x1
    4028:	add	w2, w2, w22
    402c:	add	w2, w2, #0x22
    4030:	ldr	x1, [x19, #64]
    4034:	ldr	w0, [x19, #88]
    4038:	cmp	w0, #0x64
    403c:	mov	w3, #0x64                  	// #100
    4040:	csel	w0, w0, w3, le
    4044:	cmp	w0, #0x0
    4048:	csinc	w0, w0, wzr, gt
    404c:	sub	w0, w0, #0x1
    4050:	mov	w20, #0x5556                	// #21846
    4054:	movk	w20, #0x5555, lsl #16
    4058:	smull	x20, w0, w20
    405c:	lsr	x20, x20, #32
    4060:	sub	w0, w20, w0, asr #31
    4064:	mul	w20, w0, w22
    4068:	str	w20, [sp, #76]
    406c:	add	x6, sp, #0x4c
    4070:	mov	w5, w23
    4074:	mov	w4, w22
    4078:	mov	x3, x24
    407c:	add	x2, x1, w2, sxtw
    4080:	mov	x0, x21
    4084:	bl	20bc <ferror@plt+0x9cc>
    4088:	cmp	w23, #0x2
    408c:	b.le	4140 <BZ2_blockSort@@Base+0x150>
    4090:	ldr	w2, [sp, #76]
    4094:	sub	w2, w20, w2
    4098:	scvtf	s0, w2
    409c:	scvtf	s1, w22
    40a0:	fdiv	s0, s0, s1
    40a4:	fcvt	d0, s0
    40a8:	mov	w3, w22
    40ac:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    40b0:	add	x1, x1, #0x3e0
    40b4:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    40b8:	ldr	x0, [x0, #4016]
    40bc:	ldr	x0, [x0]
    40c0:	bl	16e0 <fprintf@plt>
    40c4:	ldr	w0, [sp, #76]
    40c8:	tbz	w0, #31, 4108 <BZ2_blockSort@@Base+0x118>
    40cc:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    40d0:	ldr	x0, [x0, #4016]
    40d4:	ldr	x3, [x0]
    40d8:	mov	x2, #0x35                  	// #53
    40dc:	mov	x1, #0x1                   	// #1
    40e0:	adrp	x0, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    40e4:	add	x0, x0, #0x408
    40e8:	bl	1680 <fwrite@plt>
    40ec:	b	4150 <BZ2_blockSort@@Base+0x160>
    40f0:	mov	w4, w23
    40f4:	mov	w3, w22
    40f8:	mov	x2, x24
    40fc:	ldr	x1, [x19, #32]
    4100:	ldr	x0, [x19, #24]
    4104:	bl	17d4 <ferror@plt+0xe4>
    4108:	mov	w0, #0xffffffff            	// #-1
    410c:	str	w0, [x19, #48]
    4110:	ldr	w3, [x19, #108]
    4114:	cmp	w3, #0x0
    4118:	b.le	4134 <BZ2_blockSort@@Base+0x144>
    411c:	mov	x1, #0x0                   	// #0
    4120:	ldr	w2, [x21, x1, lsl #2]
    4124:	cbz	w2, 416c <BZ2_blockSort@@Base+0x17c>
    4128:	add	x1, x1, #0x1
    412c:	cmp	w3, w1
    4130:	b.gt	4120 <BZ2_blockSort@@Base+0x130>
    4134:	mov	w0, #0x3eb                 	// #1003
    4138:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    413c:	b	4178 <BZ2_blockSort@@Base+0x188>
    4140:	ldr	w0, [sp, #76]
    4144:	tbz	w0, #31, 4108 <BZ2_blockSort@@Base+0x118>
    4148:	cmp	w23, #0x2
    414c:	b.eq	40cc <BZ2_blockSort@@Base+0xdc>  // b.none
    4150:	mov	w4, w23
    4154:	mov	w3, w22
    4158:	mov	x2, x24
    415c:	ldr	x1, [x19, #32]
    4160:	ldr	x0, [x19, #24]
    4164:	bl	17d4 <ferror@plt+0xe4>
    4168:	b	4108 <BZ2_blockSort@@Base+0x118>
    416c:	str	w1, [x19, #48]
    4170:	cmn	w1, #0x1
    4174:	b.eq	4134 <BZ2_blockSort@@Base+0x144>  // b.none
    4178:	ldp	x19, x20, [sp, #16]
    417c:	ldp	x21, x22, [sp, #32]
    4180:	ldp	x23, x24, [sp, #48]
    4184:	ldp	x29, x30, [sp], #80
    4188:	ret

000000000000418c <BZ2_hbMakeCodeLengths@@Base>:
    418c:	mov	x12, #0x1490                	// #5264
    4190:	sub	sp, sp, x12
    4194:	stp	x29, x30, [sp]
    4198:	mov	x29, sp
    419c:	stp	x19, x20, [sp, #16]
    41a0:	stp	x21, x22, [sp, #32]
    41a4:	stp	x23, x24, [sp, #48]
    41a8:	stp	x25, x26, [sp, #64]
    41ac:	str	x27, [sp, #80]
    41b0:	mov	x21, x0
    41b4:	mov	w25, w2
    41b8:	mov	w22, w3
    41bc:	cmp	w2, #0x0
    41c0:	b.le	41f8 <BZ2_hbMakeCodeLengths@@Base+0x6c>
    41c4:	mov	x4, x1
    41c8:	mov	x0, #0x0                   	// #0
    41cc:	mov	w5, #0x100                 	// #256
    41d0:	add	x3, sp, #0x870
    41d4:	ldr	w2, [x4, x0, lsl #2]
    41d8:	lsl	w1, w2, #8
    41dc:	cmp	w2, #0x0
    41e0:	csel	w1, w1, w5, ne  // ne = any
    41e4:	add	x2, x3, x0, lsl #2
    41e8:	str	w1, [x2, #4]
    41ec:	add	x0, x0, #0x1
    41f0:	cmp	w25, w0
    41f4:	b.gt	41d4 <BZ2_hbMakeCodeLengths@@Base+0x48>
    41f8:	cmp	w25, #0x0
    41fc:	csel	w27, w25, wzr, ge  // ge = tcont
    4200:	mov	w26, w25
    4204:	sub	w23, w25, #0x1
    4208:	add	x24, sp, #0x878
    420c:	add	x24, x24, x23, lsl #2
    4210:	add	x19, sp, #0x1, lsl #12
    4214:	add	x19, x19, #0x80
    4218:	add	x20, sp, #0x870
    421c:	b	4554 <BZ2_hbMakeCodeLengths@@Base+0x3c8>
    4220:	mov	w0, w2
    4224:	str	w1, [x19, w3, sxtw #2]
    4228:	asr	w2, w0, #1
    422c:	ldr	w1, [x19, w2, sxtw #2]
    4230:	mov	w3, w0
    4234:	ldr	w4, [x20, w1, sxtw #2]
    4238:	cmp	w4, w5
    423c:	b.gt	4220 <BZ2_hbMakeCodeLengths@@Base+0x94>
    4240:	str	w6, [x19, w0, sxtw #2]
    4244:	add	w6, w6, #0x1
    4248:	add	x7, x7, #0x4
    424c:	cmp	w6, w10
    4250:	b.eq	4290 <BZ2_hbMakeCodeLengths@@Base+0x104>  // b.none
    4254:	add	x0, x7, x9
    4258:	str	w8, [x0, #4]
    425c:	add	x0, x7, x19
    4260:	str	w6, [x0, #4]
    4264:	add	x0, x7, x20
    4268:	ldr	w5, [x0, #4]
    426c:	asr	w0, w6, #1
    4270:	ldr	w1, [x19, w0, sxtw #2]
    4274:	ldr	w2, [x20, w1, sxtw #2]
    4278:	cmp	w5, w2
    427c:	b.ge	4288 <BZ2_hbMakeCodeLengths@@Base+0xfc>  // b.tcont
    4280:	mov	w3, w6
    4284:	b	4224 <BZ2_hbMakeCodeLengths@@Base+0x98>
    4288:	mov	w0, w6
    428c:	b	4240 <BZ2_hbMakeCodeLengths@@Base+0xb4>
    4290:	cmp	w25, #0x103
    4294:	b.gt	42c8 <BZ2_hbMakeCodeLengths@@Base+0x13c>
    4298:	cmp	w25, #0x1
    429c:	b.le	44d8 <BZ2_hbMakeCodeLengths@@Base+0x34c>
    42a0:	mov	w12, w27
    42a4:	sxtw	x7, w25
    42a8:	add	x6, x19, w12, sxtw #2
    42ac:	sub	w5, w12, #0x2
    42b0:	mov	w3, w12
    42b4:	mov	w9, #0x1                   	// #1
    42b8:	mov	w10, #0x2                   	// #2
    42bc:	add	x8, sp, #0x60
    42c0:	mov	w11, #0xffffffff            	// #-1
    42c4:	b	446c <BZ2_hbMakeCodeLengths@@Base+0x2e0>
    42c8:	mov	w0, #0x7d1                 	// #2001
    42cc:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    42d0:	mov	w12, w25
    42d4:	b	42a4 <BZ2_hbMakeCodeLengths@@Base+0x118>
    42d8:	ldr	w1, [x19, w0, sxtw #2]
    42dc:	ldr	w4, [x20, w1, sxtw #2]
    42e0:	cmp	w13, w4
    42e4:	b.lt	432c <BZ2_hbMakeCodeLengths@@Base+0x1a0>  // b.tstop
    42e8:	str	w1, [x19, w2, sxtw #2]
    42ec:	lsl	w1, w0, #1
    42f0:	cmp	w3, w0, lsl #1
    42f4:	b.lt	4328 <BZ2_hbMakeCodeLengths@@Base+0x19c>  // b.tstop
    42f8:	mov	w2, w0
    42fc:	mov	w0, w1
    4300:	cmp	w3, w1
    4304:	b.le	42d8 <BZ2_hbMakeCodeLengths@@Base+0x14c>
    4308:	add	w0, w1, #0x1
    430c:	ldrsw	x4, [x19, w0, sxtw #2]
    4310:	ldrsw	x0, [x19, w1, sxtw #2]
    4314:	ldr	w4, [x20, x4, lsl #2]
    4318:	ldr	w0, [x20, x0, lsl #2]
    431c:	cmp	w4, w0
    4320:	cinc	w0, w1, lt  // lt = tstop
    4324:	b	42d8 <BZ2_hbMakeCodeLengths@@Base+0x14c>
    4328:	mov	w2, w0
    432c:	str	w16, [x19, w2, sxtw #2]
    4330:	ldr	w17, [sp, #4228]
    4334:	ldur	w18, [x15, #-4]
    4338:	str	w18, [sp, #4228]
    433c:	mov	w4, w5
    4340:	cmp	w5, #0x1
    4344:	b.le	442c <BZ2_hbMakeCodeLengths@@Base+0x2a0>
    4348:	ldr	w16, [x20, w18, sxtw #2]
    434c:	mov	w1, w10
    4350:	mov	w2, w9
    4354:	b	4384 <BZ2_hbMakeCodeLengths@@Base+0x1f8>
    4358:	mov	w2, w9
    435c:	b	432c <BZ2_hbMakeCodeLengths@@Base+0x1a0>
    4360:	ldr	w1, [x19, w0, sxtw #2]
    4364:	ldr	w13, [x20, w1, sxtw #2]
    4368:	cmp	w16, w13
    436c:	b.lt	43b4 <BZ2_hbMakeCodeLengths@@Base+0x228>  // b.tstop
    4370:	str	w1, [x19, w2, sxtw #2]
    4374:	lsl	w1, w0, #1
    4378:	cmp	w4, w0, lsl #1
    437c:	b.lt	43b0 <BZ2_hbMakeCodeLengths@@Base+0x224>  // b.tstop
    4380:	mov	w2, w0
    4384:	mov	w0, w1
    4388:	cmp	w4, w1
    438c:	b.le	4360 <BZ2_hbMakeCodeLengths@@Base+0x1d4>
    4390:	add	w0, w1, #0x1
    4394:	ldrsw	x13, [x19, w0, sxtw #2]
    4398:	ldrsw	x0, [x19, w1, sxtw #2]
    439c:	ldr	w13, [x20, x13, lsl #2]
    43a0:	ldr	w0, [x20, x0, lsl #2]
    43a4:	cmp	w13, w0
    43a8:	cinc	w0, w1, lt  // lt = tstop
    43ac:	b	4360 <BZ2_hbMakeCodeLengths@@Base+0x1d4>
    43b0:	mov	w2, w0
    43b4:	str	w18, [x19, w2, sxtw #2]
    43b8:	add	w16, w7, #0x1
    43bc:	sxtw	x17, w17
    43c0:	str	w16, [x8, x17, lsl #2]
    43c4:	sxtw	x14, w14
    43c8:	str	w16, [x8, x14, lsl #2]
    43cc:	ldr	w0, [x20, x14, lsl #2]
    43d0:	ldr	w1, [x20, x17, lsl #2]
    43d4:	and	w4, w1, #0xff
    43d8:	and	w2, w0, #0xff
    43dc:	cmp	w2, w1, uxtb
    43e0:	csel	w4, w4, w2, le
    43e4:	add	w4, w4, #0x1
    43e8:	and	w0, w0, #0xffffff00
    43ec:	and	w1, w1, #0xffffff00
    43f0:	add	w0, w0, w1
    43f4:	orr	w4, w4, w0
    43f8:	lsl	x0, x7, #2
    43fc:	add	x1, x0, x20
    4400:	str	w4, [x1, #4]
    4404:	add	x0, x0, x8
    4408:	str	w11, [x0, #4]
    440c:	stur	w16, [x15, #-4]
    4410:	asr	w0, w3, #1
    4414:	ldr	w1, [x19, w0, sxtw #2]
    4418:	ldr	w2, [x20, w1, sxtw #2]
    441c:	cmp	w4, w2
    4420:	b.ge	4498 <BZ2_hbMakeCodeLengths@@Base+0x30c>  // b.tcont
    4424:	mov	w13, w3
    4428:	b	4438 <BZ2_hbMakeCodeLengths@@Base+0x2ac>
    442c:	mov	w2, w9
    4430:	b	43b4 <BZ2_hbMakeCodeLengths@@Base+0x228>
    4434:	mov	w0, w2
    4438:	str	w1, [x19, w13, sxtw #2]
    443c:	asr	w2, w0, #1
    4440:	ldr	w1, [x19, w2, sxtw #2]
    4444:	mov	w13, w0
    4448:	ldr	w14, [x20, w1, sxtw #2]
    444c:	cmp	w4, w14
    4450:	b.lt	4434 <BZ2_hbMakeCodeLengths@@Base+0x2a8>  // b.tstop
    4454:	str	w16, [x19, w0, sxtw #2]
    4458:	add	x7, x7, #0x1
    445c:	sub	x6, x6, #0x4
    4460:	sub	w5, w5, #0x1
    4464:	cmp	w3, #0x1
    4468:	b.le	44a0 <BZ2_hbMakeCodeLengths@@Base+0x314>
    446c:	ldr	w14, [sp, #4228]
    4470:	mov	x15, x6
    4474:	ldr	w16, [x6]
    4478:	str	w16, [sp, #4228]
    447c:	sub	w3, w3, #0x1
    4480:	cmp	w3, #0x1
    4484:	b.le	4358 <BZ2_hbMakeCodeLengths@@Base+0x1cc>
    4488:	ldr	w13, [x20, w16, sxtw #2]
    448c:	mov	w1, w10
    4490:	mov	w2, w9
    4494:	b	42fc <BZ2_hbMakeCodeLengths@@Base+0x170>
    4498:	mov	w0, w3
    449c:	b	4454 <BZ2_hbMakeCodeLengths@@Base+0x2c8>
    44a0:	sub	w0, w12, #0x2
    44a4:	cmp	w12, #0x1
    44a8:	csel	w0, w0, wzr, gt
    44ac:	add	w1, w25, #0x1
    44b0:	add	w0, w0, w1
    44b4:	cmp	w0, #0x203
    44b8:	b.gt	44e0 <BZ2_hbMakeCodeLengths@@Base+0x354>
    44bc:	cmp	w25, #0x0
    44c0:	b.le	4584 <BZ2_hbMakeCodeLengths@@Base+0x3f8>
    44c4:	mov	x3, #0x0                   	// #0
    44c8:	mov	w4, #0x0                   	// #0
    44cc:	add	x2, sp, #0x60
    44d0:	mov	w5, #0x1                   	// #1
    44d4:	b	4514 <BZ2_hbMakeCodeLengths@@Base+0x388>
    44d8:	mov	w0, w25
    44dc:	b	44b4 <BZ2_hbMakeCodeLengths@@Base+0x328>
    44e0:	mov	w0, #0x7d2                 	// #2002
    44e4:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    44e8:	b	44bc <BZ2_hbMakeCodeLengths@@Base+0x330>
    44ec:	add	w1, w1, #0x1
    44f0:	ldr	w0, [x2, w0, sxtw #2]
    44f4:	tbz	w0, #31, 44ec <BZ2_hbMakeCodeLengths@@Base+0x360>
    44f8:	strb	w1, [x21, x3]
    44fc:	cmp	w22, w1
    4500:	csel	w4, w4, w5, ge  // ge = tcont
    4504:	add	x0, x3, #0x1
    4508:	cmp	x23, x3
    450c:	b.eq	4528 <BZ2_hbMakeCodeLengths@@Base+0x39c>  // b.none
    4510:	mov	x3, x0
    4514:	add	x0, x2, x3, lsl #2
    4518:	ldr	w0, [x0, #4]
    451c:	mov	w1, #0x0                   	// #0
    4520:	tbz	w0, #31, 44ec <BZ2_hbMakeCodeLengths@@Base+0x360>
    4524:	b	44f8 <BZ2_hbMakeCodeLengths@@Base+0x36c>
    4528:	cbz	w4, 4584 <BZ2_hbMakeCodeLengths@@Base+0x3f8>
    452c:	add	x1, x20, #0x4
    4530:	ldr	w0, [x1]
    4534:	lsr	w2, w0, #31
    4538:	add	w0, w2, w0, asr #8
    453c:	asr	w0, w0, #1
    4540:	add	w0, w0, #0x1
    4544:	lsl	w0, w0, #8
    4548:	str	w0, [x1], #4
    454c:	cmp	x1, x24
    4550:	b.ne	4530 <BZ2_hbMakeCodeLengths@@Base+0x3a4>  // b.any
    4554:	str	wzr, [sp, #4224]
    4558:	str	wzr, [sp, #2160]
    455c:	mov	w0, #0xfffffffe            	// #-2
    4560:	str	w0, [sp, #96]
    4564:	cmp	w25, #0x0
    4568:	b.le	4298 <BZ2_hbMakeCodeLengths@@Base+0x10c>
    456c:	add	w10, w26, #0x1
    4570:	mov	x7, #0x0                   	// #0
    4574:	mov	w6, #0x1                   	// #1
    4578:	add	x9, sp, #0x60
    457c:	mov	w8, #0xffffffff            	// #-1
    4580:	b	4254 <BZ2_hbMakeCodeLengths@@Base+0xc8>
    4584:	ldp	x19, x20, [sp, #16]
    4588:	ldp	x21, x22, [sp, #32]
    458c:	ldp	x23, x24, [sp, #48]
    4590:	ldp	x25, x26, [sp, #64]
    4594:	ldr	x27, [sp, #80]
    4598:	ldp	x29, x30, [sp]
    459c:	mov	x12, #0x1490                	// #5264
    45a0:	add	sp, sp, x12
    45a4:	ret

00000000000045a8 <BZ2_hbAssignCodes@@Base>:
    45a8:	cmp	w2, w3
    45ac:	b.gt	4600 <BZ2_hbAssignCodes@@Base+0x58>
    45b0:	add	w7, w3, #0x1
    45b4:	mov	w6, #0x0                   	// #0
    45b8:	b	45f0 <BZ2_hbAssignCodes@@Base+0x48>
    45bc:	add	x3, x3, #0x1
    45c0:	cmp	w4, w3
    45c4:	b.le	45e0 <BZ2_hbAssignCodes@@Base+0x38>
    45c8:	ldrb	w5, [x1, x3]
    45cc:	cmp	w5, w2
    45d0:	b.ne	45bc <BZ2_hbAssignCodes@@Base+0x14>  // b.any
    45d4:	str	w6, [x0, x3, lsl #2]
    45d8:	add	w6, w6, #0x1
    45dc:	b	45bc <BZ2_hbAssignCodes@@Base+0x14>
    45e0:	lsl	w6, w6, #1
    45e4:	add	w2, w2, #0x1
    45e8:	cmp	w7, w2
    45ec:	b.eq	4600 <BZ2_hbAssignCodes@@Base+0x58>  // b.none
    45f0:	mov	x3, #0x0                   	// #0
    45f4:	cmp	w4, #0x0
    45f8:	b.gt	45c8 <BZ2_hbAssignCodes@@Base+0x20>
    45fc:	b	45e0 <BZ2_hbAssignCodes@@Base+0x38>
    4600:	ret

0000000000004604 <BZ2_hbCreateDecodeTables@@Base>:
    4604:	cmp	w4, w5
    4608:	b.gt	465c <BZ2_hbCreateDecodeTables@@Base+0x58>
    460c:	add	w11, w5, #0x1
    4610:	mov	w9, w4
    4614:	mov	w10, #0x0                   	// #0
    4618:	b	464c <BZ2_hbCreateDecodeTables@@Base+0x48>
    461c:	add	x7, x7, #0x1
    4620:	cmp	w6, w7
    4624:	b.le	4640 <BZ2_hbCreateDecodeTables@@Base+0x3c>
    4628:	ldrb	w8, [x3, x7]
    462c:	cmp	w8, w9
    4630:	b.ne	461c <BZ2_hbCreateDecodeTables@@Base+0x18>  // b.any
    4634:	str	w7, [x2, w10, sxtw #2]
    4638:	add	w10, w10, #0x1
    463c:	b	461c <BZ2_hbCreateDecodeTables@@Base+0x18>
    4640:	add	w9, w9, #0x1
    4644:	cmp	w9, w11
    4648:	b.eq	465c <BZ2_hbCreateDecodeTables@@Base+0x58>  // b.none
    464c:	mov	x7, #0x0                   	// #0
    4650:	cmp	w6, #0x0
    4654:	b.gt	4628 <BZ2_hbCreateDecodeTables@@Base+0x24>
    4658:	b	4640 <BZ2_hbCreateDecodeTables@@Base+0x3c>
    465c:	mov	x2, x1
    4660:	add	x7, x1, #0x5c
    4664:	str	wzr, [x2], #4
    4668:	cmp	x2, x7
    466c:	b.ne	4664 <BZ2_hbCreateDecodeTables@@Base+0x60>  // b.any
    4670:	cmp	w6, #0x0
    4674:	b.le	46a4 <BZ2_hbCreateDecodeTables@@Base+0xa0>
    4678:	mov	x8, x3
    467c:	sub	w2, w6, #0x1
    4680:	add	x3, x3, #0x1
    4684:	add	x2, x2, x3
    4688:	ldrb	w3, [x8], #1
    468c:	add	x3, x3, #0x1
    4690:	ldr	w6, [x1, x3, lsl #2]
    4694:	add	w6, w6, #0x1
    4698:	str	w6, [x1, x3, lsl #2]
    469c:	cmp	x8, x2
    46a0:	b.ne	4688 <BZ2_hbCreateDecodeTables@@Base+0x84>  // b.any
    46a4:	add	x8, x1, #0x4
    46a8:	mov	x2, x8
    46ac:	ldr	w3, [x2]
    46b0:	ldur	w6, [x2, #-4]
    46b4:	add	w3, w3, w6
    46b8:	str	w3, [x2], #4
    46bc:	cmp	x2, x7
    46c0:	b.ne	46ac <BZ2_hbCreateDecodeTables@@Base+0xa8>  // b.any
    46c4:	mov	x2, x0
    46c8:	add	x3, x0, #0x5c
    46cc:	str	wzr, [x2], #4
    46d0:	cmp	x3, x2
    46d4:	b.ne	46cc <BZ2_hbCreateDecodeTables@@Base+0xc8>  // b.any
    46d8:	cmp	w4, w5
    46dc:	b.gt	4710 <BZ2_hbCreateDecodeTables@@Base+0x10c>
    46e0:	sxtw	x2, w4
    46e4:	mov	w3, #0x0                   	// #0
    46e8:	ldr	w6, [x8, x2, lsl #2]
    46ec:	ldr	w7, [x1, x2, lsl #2]
    46f0:	sub	w6, w6, w7
    46f4:	add	w3, w6, w3
    46f8:	sub	w6, w3, #0x1
    46fc:	str	w6, [x0, x2, lsl #2]
    4700:	lsl	w3, w3, #1
    4704:	add	x2, x2, #0x1
    4708:	cmp	w5, w2
    470c:	b.ge	46e8 <BZ2_hbCreateDecodeTables@@Base+0xe4>  // b.tcont
    4710:	add	w2, w4, #0x1
    4714:	cmp	w5, w2
    4718:	b.lt	4748 <BZ2_hbCreateDecodeTables@@Base+0x144>  // b.tstop
    471c:	sxtw	x2, w2
    4720:	sub	x3, x0, #0x4
    4724:	ldr	w0, [x3, x2, lsl #2]
    4728:	add	w0, w0, #0x1
    472c:	lsl	w0, w0, #1
    4730:	ldr	w4, [x1, x2, lsl #2]
    4734:	sub	w0, w0, w4
    4738:	str	w0, [x1, x2, lsl #2]
    473c:	add	x2, x2, #0x1
    4740:	cmp	w5, w2
    4744:	b.ge	4724 <BZ2_hbCreateDecodeTables@@Base+0x120>  // b.tcont
    4748:	ret
    474c:	ldr	w1, [x0, #644]
    4750:	cmp	w1, #0x0
    4754:	b.le	4794 <BZ2_hbCreateDecodeTables@@Base+0x190>
    4758:	ldrsw	x1, [x0, #116]
    475c:	ldr	x2, [x0, #80]
    4760:	ldrb	w3, [x0, #643]
    4764:	strb	w3, [x2, x1]
    4768:	ldr	w1, [x0, #116]
    476c:	add	w1, w1, #0x1
    4770:	str	w1, [x0, #116]
    4774:	ldr	w1, [x0, #640]
    4778:	lsl	w1, w1, #8
    477c:	str	w1, [x0, #640]
    4780:	ldr	w1, [x0, #644]
    4784:	sub	w1, w1, #0x8
    4788:	str	w1, [x0, #644]
    478c:	cmp	w1, #0x0
    4790:	b.gt	4758 <BZ2_hbCreateDecodeTables@@Base+0x154>
    4794:	ret
    4798:	sub	sp, sp, #0x100
    479c:	ldr	x9, [x0, #56]
    47a0:	ldr	x10, [x0, #64]
    47a4:	ldr	x8, [x0, #72]
    47a8:	str	wzr, [x0, #124]
    47ac:	add	x1, x0, #0x80
    47b0:	add	x3, x0, #0x180
    47b4:	b	47c4 <BZ2_hbCreateDecodeTables@@Base+0x1c0>
    47b8:	add	x1, x1, #0x1
    47bc:	cmp	x1, x3
    47c0:	b.eq	47e0 <BZ2_hbCreateDecodeTables@@Base+0x1dc>  // b.none
    47c4:	ldrb	w2, [x1]
    47c8:	cbz	w2, 47b8 <BZ2_hbCreateDecodeTables@@Base+0x1b4>
    47cc:	ldr	w2, [x0, #124]
    47d0:	strb	w2, [x1, #256]
    47d4:	add	w2, w2, #0x1
    47d8:	str	w2, [x0, #124]
    47dc:	b	47b8 <BZ2_hbCreateDecodeTables@@Base+0x1b4>
    47e0:	ldr	w11, [x0, #124]
    47e4:	adds	w12, w11, #0x1
    47e8:	b.mi	4808 <BZ2_hbCreateDecodeTables@@Base+0x204>  // b.first
    47ec:	add	x1, x0, #0x2a0
    47f0:	add	w2, w11, #0x1
    47f4:	add	x3, x0, #0x2a4
    47f8:	add	x2, x3, x2, lsl #2
    47fc:	str	wzr, [x1], #4
    4800:	cmp	x1, x2
    4804:	b.ne	47fc <BZ2_hbCreateDecodeTables@@Base+0x1f8>  // b.any
    4808:	cmp	w11, #0x0
    480c:	b.le	4828 <BZ2_hbCreateDecodeTables@@Base+0x224>
    4810:	mov	x2, sp
    4814:	mov	w1, #0x0                   	// #0
    4818:	strb	w1, [x2], #1
    481c:	add	w1, w1, #0x1
    4820:	cmp	w11, w1
    4824:	b.ne	4818 <BZ2_hbCreateDecodeTables@@Base+0x214>  // b.any
    4828:	ldr	w3, [x0, #108]
    482c:	cmp	w3, #0x0
    4830:	b.le	49b8 <BZ2_hbCreateDecodeTables@@Base+0x3b4>
    4834:	mov	x7, #0x0                   	// #0
    4838:	mov	w6, #0x0                   	// #0
    483c:	mov	w1, #0x0                   	// #0
    4840:	mov	x13, sp
    4844:	mov	w14, #0x1                   	// #1
    4848:	b	4860 <BZ2_hbCreateDecodeTables@@Base+0x25c>
    484c:	add	w1, w1, #0x1
    4850:	ldr	w3, [x0, #108]
    4854:	add	x7, x7, #0x1
    4858:	cmp	w3, w7
    485c:	b.le	4950 <BZ2_hbCreateDecodeTables@@Base+0x34c>
    4860:	ldr	w2, [x9, x7, lsl #2]
    4864:	subs	w2, w2, #0x1
    4868:	add	w3, w2, w3
    486c:	csel	w2, w3, w2, mi  // mi = first
    4870:	ldrb	w2, [x10, w2, sxtw]
    4874:	add	x2, x0, x2
    4878:	ldrb	w5, [x2, #384]
    487c:	ldrb	w2, [sp]
    4880:	cmp	w2, w5
    4884:	b.eq	484c <BZ2_hbCreateDecodeTables@@Base+0x248>  // b.none
    4888:	cmp	w1, #0x0
    488c:	b.gt	48e4 <BZ2_hbCreateDecodeTables@@Base+0x2e0>
    4890:	ldrb	w3, [sp, #1]
    4894:	ldrb	w2, [sp]
    4898:	strb	w2, [sp, #1]
    489c:	cmp	w5, w3
    48a0:	b.eq	4948 <BZ2_hbCreateDecodeTables@@Base+0x344>  // b.none
    48a4:	add	x2, x13, #0x1
    48a8:	mov	w4, w3
    48ac:	ldrb	w3, [x2, #1]!
    48b0:	strb	w4, [x2]
    48b4:	cmp	w5, w3
    48b8:	b.ne	48a8 <BZ2_hbCreateDecodeTables@@Base+0x2a4>  // b.any
    48bc:	strb	w3, [sp]
    48c0:	sub	x2, x2, x13
    48c4:	add	w3, w2, #0x1
    48c8:	strh	w3, [x8, w6, sxtw #1]
    48cc:	add	w6, w6, #0x1
    48d0:	add	x2, x0, w2, sxtw #2
    48d4:	ldr	w3, [x2, #676]
    48d8:	add	w3, w3, #0x1
    48dc:	str	w3, [x2, #676]
    48e0:	b	4850 <BZ2_hbCreateDecodeTables@@Base+0x24c>
    48e4:	sub	w1, w1, #0x1
    48e8:	add	w3, w6, #0x1
    48ec:	add	x2, x8, w6, sxtw #1
    48f0:	b	4924 <BZ2_hbCreateDecodeTables@@Base+0x320>
    48f4:	strh	w14, [x2]
    48f8:	mov	w6, w3
    48fc:	ldr	w4, [x0, #676]
    4900:	add	w4, w4, #0x1
    4904:	str	w4, [x0, #676]
    4908:	add	w3, w3, #0x1
    490c:	add	x2, x2, #0x2
    4910:	cmp	w1, #0x1
    4914:	b.le	4940 <BZ2_hbCreateDecodeTables@@Base+0x33c>
    4918:	sub	w1, w1, #0x2
    491c:	add	w1, w1, w1, lsr #31
    4920:	asr	w1, w1, #1
    4924:	tbnz	w1, #0, 48f4 <BZ2_hbCreateDecodeTables@@Base+0x2f0>
    4928:	strh	wzr, [x2]
    492c:	mov	w6, w3
    4930:	ldr	w4, [x0, #672]
    4934:	add	w4, w4, #0x1
    4938:	str	w4, [x0, #672]
    493c:	b	4908 <BZ2_hbCreateDecodeTables@@Base+0x304>
    4940:	mov	w1, #0x0                   	// #0
    4944:	b	4890 <BZ2_hbCreateDecodeTables@@Base+0x28c>
    4948:	add	x2, x13, #0x1
    494c:	b	48bc <BZ2_hbCreateDecodeTables@@Base+0x2b8>
    4950:	cmp	w1, #0x0
    4954:	b.le	49bc <BZ2_hbCreateDecodeTables@@Base+0x3b8>
    4958:	sub	w1, w1, #0x1
    495c:	add	w3, w6, #0x1
    4960:	add	x2, x8, w6, sxtw #1
    4964:	mov	w5, #0x1                   	// #1
    4968:	b	499c <BZ2_hbCreateDecodeTables@@Base+0x398>
    496c:	strh	w5, [x2]
    4970:	mov	w6, w3
    4974:	ldr	w4, [x0, #676]
    4978:	add	w4, w4, #0x1
    497c:	str	w4, [x0, #676]
    4980:	add	w3, w3, #0x1
    4984:	add	x2, x2, #0x2
    4988:	cmp	w1, #0x1
    498c:	b.le	49bc <BZ2_hbCreateDecodeTables@@Base+0x3b8>
    4990:	sub	w1, w1, #0x2
    4994:	add	w1, w1, w1, lsr #31
    4998:	asr	w1, w1, #1
    499c:	tbnz	w1, #0, 496c <BZ2_hbCreateDecodeTables@@Base+0x368>
    49a0:	strh	wzr, [x2]
    49a4:	mov	w6, w3
    49a8:	ldr	w4, [x0, #672]
    49ac:	add	w4, w4, #0x1
    49b0:	str	w4, [x0, #672]
    49b4:	b	4980 <BZ2_hbCreateDecodeTables@@Base+0x37c>
    49b8:	mov	w6, #0x0                   	// #0
    49bc:	strh	w12, [x8, w6, sxtw #1]
    49c0:	add	x11, x0, w11, sxtw #2
    49c4:	ldr	w1, [x11, #676]
    49c8:	add	w1, w1, #0x1
    49cc:	str	w1, [x11, #676]
    49d0:	add	w6, w6, #0x1
    49d4:	str	w6, [x0, #668]
    49d8:	add	sp, sp, #0x100
    49dc:	ret
    49e0:	and	w1, w1, #0xff
    49e4:	ldr	w2, [x0, #644]
    49e8:	cmp	w2, #0x7
    49ec:	b.le	4a2c <BZ2_hbCreateDecodeTables@@Base+0x428>
    49f0:	ldrsw	x2, [x0, #116]
    49f4:	ldr	x3, [x0, #80]
    49f8:	ldrb	w4, [x0, #643]
    49fc:	strb	w4, [x3, x2]
    4a00:	ldr	w2, [x0, #116]
    4a04:	add	w2, w2, #0x1
    4a08:	str	w2, [x0, #116]
    4a0c:	ldr	w2, [x0, #640]
    4a10:	lsl	w2, w2, #8
    4a14:	str	w2, [x0, #640]
    4a18:	ldr	w2, [x0, #644]
    4a1c:	sub	w2, w2, #0x8
    4a20:	str	w2, [x0, #644]
    4a24:	cmp	w2, #0x7
    4a28:	b.gt	49f0 <BZ2_hbCreateDecodeTables@@Base+0x3ec>
    4a2c:	mov	w3, #0x18                  	// #24
    4a30:	sub	w3, w3, w2
    4a34:	lsl	w3, w1, w3
    4a38:	ldr	w1, [x0, #640]
    4a3c:	orr	w1, w1, w3
    4a40:	str	w1, [x0, #640]
    4a44:	add	w2, w2, #0x8
    4a48:	str	w2, [x0, #644]
    4a4c:	ret
    4a50:	lsr	w3, w1, #24
    4a54:	ldr	w2, [x0, #644]
    4a58:	cmp	w2, #0x7
    4a5c:	b.le	4a9c <BZ2_hbCreateDecodeTables@@Base+0x498>
    4a60:	ldrsw	x2, [x0, #116]
    4a64:	ldr	x4, [x0, #80]
    4a68:	ldrb	w5, [x0, #643]
    4a6c:	strb	w5, [x4, x2]
    4a70:	ldr	w2, [x0, #116]
    4a74:	add	w2, w2, #0x1
    4a78:	str	w2, [x0, #116]
    4a7c:	ldr	w2, [x0, #640]
    4a80:	lsl	w2, w2, #8
    4a84:	str	w2, [x0, #640]
    4a88:	ldr	w2, [x0, #644]
    4a8c:	sub	w2, w2, #0x8
    4a90:	str	w2, [x0, #644]
    4a94:	cmp	w2, #0x7
    4a98:	b.gt	4a60 <BZ2_hbCreateDecodeTables@@Base+0x45c>
    4a9c:	mov	w4, #0x18                  	// #24
    4aa0:	sub	w4, w4, w2
    4aa4:	lsl	w4, w3, w4
    4aa8:	ldr	w3, [x0, #640]
    4aac:	orr	w3, w3, w4
    4ab0:	str	w3, [x0, #640]
    4ab4:	add	w2, w2, #0x8
    4ab8:	str	w2, [x0, #644]
    4abc:	ubfx	x3, x1, #16, #8
    4ac0:	cmp	w2, #0x7
    4ac4:	b.le	4b04 <BZ2_hbCreateDecodeTables@@Base+0x500>
    4ac8:	ldrsw	x2, [x0, #116]
    4acc:	ldr	x4, [x0, #80]
    4ad0:	ldrb	w5, [x0, #643]
    4ad4:	strb	w5, [x4, x2]
    4ad8:	ldr	w2, [x0, #116]
    4adc:	add	w2, w2, #0x1
    4ae0:	str	w2, [x0, #116]
    4ae4:	ldr	w2, [x0, #640]
    4ae8:	lsl	w2, w2, #8
    4aec:	str	w2, [x0, #640]
    4af0:	ldr	w2, [x0, #644]
    4af4:	sub	w2, w2, #0x8
    4af8:	str	w2, [x0, #644]
    4afc:	cmp	w2, #0x7
    4b00:	b.gt	4ac8 <BZ2_hbCreateDecodeTables@@Base+0x4c4>
    4b04:	mov	w4, #0x18                  	// #24
    4b08:	sub	w4, w4, w2
    4b0c:	lsl	w4, w3, w4
    4b10:	ldr	w3, [x0, #640]
    4b14:	orr	w3, w3, w4
    4b18:	str	w3, [x0, #640]
    4b1c:	add	w2, w2, #0x8
    4b20:	str	w2, [x0, #644]
    4b24:	ubfx	x3, x1, #8, #8
    4b28:	cmp	w2, #0x7
    4b2c:	b.le	4b6c <BZ2_hbCreateDecodeTables@@Base+0x568>
    4b30:	ldrsw	x2, [x0, #116]
    4b34:	ldr	x4, [x0, #80]
    4b38:	ldrb	w5, [x0, #643]
    4b3c:	strb	w5, [x4, x2]
    4b40:	ldr	w2, [x0, #116]
    4b44:	add	w2, w2, #0x1
    4b48:	str	w2, [x0, #116]
    4b4c:	ldr	w2, [x0, #640]
    4b50:	lsl	w2, w2, #8
    4b54:	str	w2, [x0, #640]
    4b58:	ldr	w2, [x0, #644]
    4b5c:	sub	w2, w2, #0x8
    4b60:	str	w2, [x0, #644]
    4b64:	cmp	w2, #0x7
    4b68:	b.gt	4b30 <BZ2_hbCreateDecodeTables@@Base+0x52c>
    4b6c:	mov	w4, #0x18                  	// #24
    4b70:	sub	w4, w4, w2
    4b74:	lsl	w4, w3, w4
    4b78:	ldr	w3, [x0, #640]
    4b7c:	orr	w3, w3, w4
    4b80:	str	w3, [x0, #640]
    4b84:	add	w2, w2, #0x8
    4b88:	str	w2, [x0, #644]
    4b8c:	and	w1, w1, #0xff
    4b90:	cmp	w2, #0x7
    4b94:	b.le	4bd4 <BZ2_hbCreateDecodeTables@@Base+0x5d0>
    4b98:	ldrsw	x2, [x0, #116]
    4b9c:	ldr	x3, [x0, #80]
    4ba0:	ldrb	w4, [x0, #643]
    4ba4:	strb	w4, [x3, x2]
    4ba8:	ldr	w2, [x0, #116]
    4bac:	add	w2, w2, #0x1
    4bb0:	str	w2, [x0, #116]
    4bb4:	ldr	w2, [x0, #640]
    4bb8:	lsl	w2, w2, #8
    4bbc:	str	w2, [x0, #640]
    4bc0:	ldr	w2, [x0, #644]
    4bc4:	sub	w2, w2, #0x8
    4bc8:	str	w2, [x0, #644]
    4bcc:	cmp	w2, #0x7
    4bd0:	b.gt	4b98 <BZ2_hbCreateDecodeTables@@Base+0x594>
    4bd4:	mov	w3, #0x18                  	// #24
    4bd8:	sub	w3, w3, w2
    4bdc:	lsl	w1, w1, w3
    4be0:	ldr	w3, [x0, #640]
    4be4:	orr	w1, w3, w1
    4be8:	str	w1, [x0, #640]
    4bec:	add	w2, w2, #0x8
    4bf0:	str	w2, [x0, #644]
    4bf4:	ret

0000000000004bf8 <BZ2_bsInitWrite@@Base>:
    4bf8:	str	wzr, [x0, #644]
    4bfc:	str	wzr, [x0, #640]
    4c00:	ret

0000000000004c04 <BZ2_compressBlock@@Base>:
    4c04:	sub	sp, sp, #0x260
    4c08:	stp	x29, x30, [sp]
    4c0c:	mov	x29, sp
    4c10:	stp	x25, x26, [sp, #64]
    4c14:	mov	x26, x0
    4c18:	and	w0, w1, #0xff
    4c1c:	str	w0, [sp, #488]
    4c20:	ldr	w5, [x26, #108]
    4c24:	cmp	w5, #0x0
    4c28:	b.le	4c68 <BZ2_compressBlock@@Base+0x64>
    4c2c:	ldr	w3, [x26, #648]
    4c30:	mvn	w3, w3
    4c34:	str	w3, [x26, #648]
    4c38:	ldr	w4, [x26, #652]
    4c3c:	eor	w4, w3, w4, ror #31
    4c40:	str	w4, [x26, #652]
    4c44:	ldr	w2, [x26, #660]
    4c48:	cmp	w2, #0x1
    4c4c:	b.le	4c54 <BZ2_compressBlock@@Base+0x50>
    4c50:	str	wzr, [x26, #116]
    4c54:	ldr	w0, [x26, #656]
    4c58:	cmp	w0, #0x1
    4c5c:	b.gt	4ca8 <BZ2_compressBlock@@Base+0xa4>
    4c60:	mov	x0, x26
    4c64:	bl	1640 <BZ2_blockSort@plt>
    4c68:	ldrsw	x1, [x26, #108]
    4c6c:	ldr	x0, [x26, #32]
    4c70:	add	x0, x0, x1
    4c74:	str	x0, [x26, #80]
    4c78:	ldr	w0, [x26, #660]
    4c7c:	cmp	w0, #0x1
    4c80:	b.eq	4cc4 <BZ2_compressBlock@@Base+0xc0>  // b.none
    4c84:	ldr	w0, [x26, #108]
    4c88:	cmp	w0, #0x0
    4c8c:	b.gt	4d04 <BZ2_compressBlock@@Base+0x100>
    4c90:	ldr	w0, [sp, #488]
    4c94:	cbnz	w0, 85a0 <BZ2_compressBlock@@Base+0x399c>
    4c98:	ldp	x25, x26, [sp, #64]
    4c9c:	ldp	x29, x30, [sp]
    4ca0:	add	sp, sp, #0x260
    4ca4:	ret
    4ca8:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    4cac:	add	x1, x1, #0x478
    4cb0:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    4cb4:	ldr	x0, [x0, #4016]
    4cb8:	ldr	x0, [x0]
    4cbc:	bl	16e0 <fprintf@plt>
    4cc0:	b	4c60 <BZ2_compressBlock@@Base+0x5c>
    4cc4:	mov	x0, x26
    4cc8:	bl	1600 <BZ2_bsInitWrite@plt>
    4ccc:	mov	w1, #0x42                  	// #66
    4cd0:	mov	x0, x26
    4cd4:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    4cd8:	mov	w1, #0x5a                  	// #90
    4cdc:	mov	x0, x26
    4ce0:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    4ce4:	mov	w1, #0x68                  	// #104
    4ce8:	mov	x0, x26
    4cec:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    4cf0:	ldr	w1, [x26, #664]
    4cf4:	add	w1, w1, #0x30
    4cf8:	mov	x0, x26
    4cfc:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    4d00:	b	4c84 <BZ2_compressBlock@@Base+0x80>
    4d04:	stp	x19, x20, [sp, #16]
    4d08:	stp	x21, x22, [sp, #32]
    4d0c:	stp	x23, x24, [sp, #48]
    4d10:	stp	x27, x28, [sp, #80]
    4d14:	str	d8, [sp, #96]
    4d18:	mov	w1, #0x31                  	// #49
    4d1c:	mov	x0, x26
    4d20:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    4d24:	mov	w1, #0x41                  	// #65
    4d28:	mov	x0, x26
    4d2c:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    4d30:	mov	w1, #0x59                  	// #89
    4d34:	mov	x0, x26
    4d38:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    4d3c:	mov	w1, #0x26                  	// #38
    4d40:	mov	x0, x26
    4d44:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    4d48:	mov	w1, #0x53                  	// #83
    4d4c:	mov	x0, x26
    4d50:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    4d54:	mov	w1, #0x59                  	// #89
    4d58:	mov	x0, x26
    4d5c:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    4d60:	ldr	w1, [x26, #648]
    4d64:	mov	x0, x26
    4d68:	bl	4a50 <BZ2_hbCreateDecodeTables@@Base+0x44c>
    4d6c:	ldr	w0, [x26, #644]
    4d70:	cmp	w0, #0x7
    4d74:	b.le	4db4 <BZ2_compressBlock@@Base+0x1b0>
    4d78:	ldrsw	x0, [x26, #116]
    4d7c:	ldr	x1, [x26, #80]
    4d80:	ldrb	w2, [x26, #643]
    4d84:	strb	w2, [x1, x0]
    4d88:	ldr	w0, [x26, #116]
    4d8c:	add	w0, w0, #0x1
    4d90:	str	w0, [x26, #116]
    4d94:	ldr	w0, [x26, #640]
    4d98:	lsl	w0, w0, #8
    4d9c:	str	w0, [x26, #640]
    4da0:	ldr	w0, [x26, #644]
    4da4:	sub	w0, w0, #0x8
    4da8:	str	w0, [x26, #644]
    4dac:	cmp	w0, #0x7
    4db0:	b.gt	4d78 <BZ2_compressBlock@@Base+0x174>
    4db4:	add	w0, w0, #0x1
    4db8:	str	w0, [x26, #644]
    4dbc:	ldr	w3, [x26, #48]
    4dc0:	cmp	w0, #0x7
    4dc4:	b.le	4e04 <BZ2_compressBlock@@Base+0x200>
    4dc8:	ldrsw	x0, [x26, #116]
    4dcc:	ldr	x1, [x26, #80]
    4dd0:	ldrb	w2, [x26, #643]
    4dd4:	strb	w2, [x1, x0]
    4dd8:	ldr	w0, [x26, #116]
    4ddc:	add	w0, w0, #0x1
    4de0:	str	w0, [x26, #116]
    4de4:	ldr	w0, [x26, #640]
    4de8:	lsl	w0, w0, #8
    4dec:	str	w0, [x26, #640]
    4df0:	ldr	w0, [x26, #644]
    4df4:	sub	w0, w0, #0x8
    4df8:	str	w0, [x26, #644]
    4dfc:	cmp	w0, #0x7
    4e00:	b.gt	4dc8 <BZ2_compressBlock@@Base+0x1c4>
    4e04:	mov	w1, #0x8                   	// #8
    4e08:	sub	w1, w1, w0
    4e0c:	lsl	w2, w3, w1
    4e10:	ldr	w1, [x26, #640]
    4e14:	orr	w1, w1, w2
    4e18:	str	w1, [x26, #640]
    4e1c:	add	w0, w0, #0x18
    4e20:	str	w0, [x26, #644]
    4e24:	mov	x0, x26
    4e28:	bl	4798 <BZ2_hbCreateDecodeTables@@Base+0x194>
    4e2c:	ldr	x27, [x26, #72]
    4e30:	ldr	w0, [x26, #656]
    4e34:	cmp	w0, #0x2
    4e38:	b.gt	4f1c <BZ2_compressBlock@@Base+0x318>
    4e3c:	ldr	w0, [x26, #124]
    4e40:	str	w0, [sp, #492]
    4e44:	add	w4, w0, #0x2
    4e48:	str	w4, [sp, #152]
    4e4c:	add	x0, x26, #0x9, lsl #12
    4e50:	add	x0, x0, #0x34c
    4e54:	str	x0, [sp, #256]
    4e58:	str	x26, [sp, #528]
    4e5c:	add	x3, x26, #0x9, lsl #12
    4e60:	add	x3, x3, #0x958
    4e64:	mov	x1, x0
    4e68:	mov	w2, #0xf                   	// #15
    4e6c:	mov	x0, #0x0                   	// #0
    4e70:	cmp	w4, #0x0
    4e74:	b.le	4e88 <BZ2_compressBlock@@Base+0x284>
    4e78:	strb	w2, [x1, x0]
    4e7c:	add	x0, x0, #0x1
    4e80:	cmp	w4, w0
    4e84:	b.gt	4e78 <BZ2_compressBlock@@Base+0x274>
    4e88:	add	x1, x1, #0x102
    4e8c:	cmp	x3, x1
    4e90:	b.ne	4e6c <BZ2_compressBlock@@Base+0x268>  // b.any
    4e94:	ldr	w0, [x26, #668]
    4e98:	cmp	w0, #0x0
    4e9c:	b.le	4f44 <BZ2_compressBlock@@Base+0x340>
    4ea0:	ldr	w22, [x26, #668]
    4ea4:	mov	w0, #0x2                   	// #2
    4ea8:	str	w0, [sp, #136]
    4eac:	cmp	w22, #0xc7
    4eb0:	b.le	4ee4 <BZ2_compressBlock@@Base+0x2e0>
    4eb4:	mov	w0, #0x3                   	// #3
    4eb8:	str	w0, [sp, #136]
    4ebc:	cmp	w22, #0x257
    4ec0:	b.le	4ee4 <BZ2_compressBlock@@Base+0x2e0>
    4ec4:	mov	w0, #0x4                   	// #4
    4ec8:	str	w0, [sp, #136]
    4ecc:	cmp	w22, #0x4af
    4ed0:	b.le	4ee4 <BZ2_compressBlock@@Base+0x2e0>
    4ed4:	cmp	w22, #0x95f
    4ed8:	cset	w0, gt
    4edc:	add	w0, w0, #0x5
    4ee0:	str	w0, [sp, #136]
    4ee4:	ldr	w28, [sp, #136]
    4ee8:	mov	w19, w28
    4eec:	mov	w21, #0x0                   	// #0
    4ef0:	adrp	x0, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    4ef4:	ldr	d8, [x0, #1520]
    4ef8:	adrp	x24, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    4efc:	add	x24, x24, #0x4f8
    4f00:	adrp	x23, 1f000 <BZ2_bzerror@@Base+0x10d58>
    4f04:	ldr	x23, [x23, #4016]
    4f08:	str	x27, [sp, #128]
    4f0c:	ldr	w27, [sp, #492]
    4f10:	str	x24, [sp, #120]
    4f14:	ldr	w24, [sp, #152]
    4f18:	b	4fc8 <BZ2_compressBlock@@Base+0x3c4>
    4f1c:	ldr	w4, [x26, #124]
    4f20:	ldr	w3, [x26, #668]
    4f24:	ldr	w2, [x26, #108]
    4f28:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    4f2c:	add	x1, x1, #0x4b8
    4f30:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    4f34:	ldr	x0, [x0, #4016]
    4f38:	ldr	x0, [x0]
    4f3c:	bl	16e0 <fprintf@plt>
    4f40:	b	4e3c <BZ2_compressBlock@@Base+0x238>
    4f44:	mov	w0, #0xbb9                 	// #3001
    4f48:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    4f4c:	b	4ea0 <BZ2_compressBlock@@Base+0x29c>
    4f50:	mov	w25, #0x0                   	// #0
    4f54:	cmp	w21, w20
    4f58:	ccmp	w28, w19, #0x4, lt  // lt = tstop
    4f5c:	ccmp	w19, #0x1, #0x4, ne  // ne = any
    4f60:	b.ne	502c <BZ2_compressBlock@@Base+0x428>  // b.any
    4f64:	ldr	w0, [x26, #656]
    4f68:	cmp	w0, #0x2
    4f6c:	b.gt	5054 <BZ2_compressBlock@@Base+0x450>
    4f70:	cmp	w24, #0x0
    4f74:	b.le	4fb8 <BZ2_compressBlock@@Base+0x3b4>
    4f78:	sub	w0, w19, #0x1
    4f7c:	sbfiz	x1, x0, #7, #32
    4f80:	add	x0, x1, w0, sxtw
    4f84:	add	x0, x26, x0, lsl #1
    4f88:	add	x0, x0, #0x9, lsl #12
    4f8c:	add	x0, x0, #0x34c
    4f90:	mov	x1, #0x0                   	// #0
    4f94:	mov	w3, #0xf                   	// #15
    4f98:	mov	w2, #0x0                   	// #0
    4f9c:	cmp	w1, w21
    4fa0:	ccmp	w20, w1, #0x1, ge  // ge = tcont
    4fa4:	csel	w4, w2, w3, ge  // ge = tcont
    4fa8:	strb	w4, [x0, x1]
    4fac:	add	x1, x1, #0x1
    4fb0:	cmp	w24, w1
    4fb4:	b.gt	4f9c <BZ2_compressBlock@@Base+0x398>
    4fb8:	add	w21, w20, #0x1
    4fbc:	sub	w22, w22, w25
    4fc0:	subs	w19, w19, #0x1
    4fc4:	b.eq	5090 <BZ2_compressBlock@@Base+0x48c>  // b.none
    4fc8:	sdiv	w2, w22, w19
    4fcc:	sub	w20, w21, #0x1
    4fd0:	cmp	w2, #0x0
    4fd4:	b.le	4f50 <BZ2_compressBlock@@Base+0x34c>
    4fd8:	add	w0, w27, #0x1
    4fdc:	cmp	w20, w0
    4fe0:	b.ge	5024 <BZ2_compressBlock@@Base+0x420>  // b.tcont
    4fe4:	sxtw	x0, w21
    4fe8:	add	w1, w27, #0x1
    4fec:	sub	w1, w1, w21
    4ff0:	add	x3, x0, #0x1
    4ff4:	add	x1, x1, x3
    4ff8:	mov	w25, #0x0                   	// #0
    4ffc:	add	x3, x26, #0x2a0
    5000:	mov	w20, w0
    5004:	ldr	w4, [x3, x0, lsl #2]
    5008:	add	w25, w25, w4
    500c:	cmp	w2, w25
    5010:	b.le	4f54 <BZ2_compressBlock@@Base+0x350>
    5014:	add	x0, x0, #0x1
    5018:	cmp	x0, x1
    501c:	b.ne	5000 <BZ2_compressBlock@@Base+0x3fc>  // b.any
    5020:	b	4f54 <BZ2_compressBlock@@Base+0x350>
    5024:	mov	w25, #0x0                   	// #0
    5028:	b	4f54 <BZ2_compressBlock@@Base+0x350>
    502c:	subs	w0, w28, w19
    5030:	and	w0, w0, #0x1
    5034:	cneg	w0, w0, mi  // mi = first
    5038:	cmp	w0, #0x1
    503c:	b.ne	4f64 <BZ2_compressBlock@@Base+0x360>  // b.any
    5040:	add	x0, x26, w20, sxtw #2
    5044:	ldr	w0, [x0, #672]
    5048:	sub	w25, w25, w0
    504c:	sub	w20, w20, #0x1
    5050:	b	4f64 <BZ2_compressBlock@@Base+0x360>
    5054:	scvtf	s1, w25
    5058:	fcvt	d1, s1
    505c:	fmul	d1, d1, d8
    5060:	ldr	s0, [x26, #668]
    5064:	scvtf	s0, s0
    5068:	fcvt	d0, s0
    506c:	fdiv	d0, d1, d0
    5070:	mov	w5, w25
    5074:	mov	w4, w20
    5078:	mov	w3, w21
    507c:	mov	w2, w19
    5080:	ldr	x1, [sp, #120]
    5084:	ldr	x0, [x23]
    5088:	bl	16e0 <fprintf@plt>
    508c:	b	4f70 <BZ2_compressBlock@@Base+0x36c>
    5090:	str	w19, [sp, #120]
    5094:	ldr	w0, [sp, #136]
    5098:	sub	w3, w0, #0x1
    509c:	str	x3, [sp, #520]
    50a0:	lsl	x0, x3, #7
    50a4:	add	x2, x0, x3
    50a8:	add	x1, x26, #0xb, lsl #12
    50ac:	add	x1, x1, #0x590
    50b0:	add	x1, x1, x2, lsl #3
    50b4:	str	x1, [sp, #496]
    50b8:	lsl	x0, x2, #1
    50bc:	str	x0, [sp, #504]
    50c0:	add	x1, x26, #0x9, lsl #12
    50c4:	add	x1, x1, #0x44e
    50c8:	str	x1, [sp, #480]
    50cc:	add	x0, x0, x1
    50d0:	str	x0, [sp, #512]
    50d4:	mov	w0, #0x4                   	// #4
    50d8:	str	w0, [sp, #264]
    50dc:	ldr	w0, [sp, #492]
    50e0:	add	w0, w0, #0x1
    50e4:	ldr	x1, [sp, #528]
    50e8:	add	x1, x1, #0x9, lsl #12
    50ec:	add	x1, x1, #0x34d
    50f0:	add	x0, x0, x1
    50f4:	str	x0, [sp, #536]
    50f8:	mov	x24, x26
    50fc:	b	6394 <BZ2_compressBlock@@Base+0x1790>
    5100:	add	x1, x24, #0xc, lsl #12
    5104:	add	x1, x1, #0x9b8
    5108:	ldr	x0, [sp, #256]
    510c:	ldr	w2, [sp, #152]
    5110:	cmp	w2, #0x0
    5114:	b.le	6408 <BZ2_compressBlock@@Base+0x1804>
    5118:	ldr	x4, [sp, #536]
    511c:	ldrb	w2, [x0, #258]
    5120:	ldrb	w3, [x0]
    5124:	orr	w2, w3, w2, lsl #16
    5128:	str	w2, [x1]
    512c:	ldrb	w2, [x0, #774]
    5130:	ldrb	w3, [x0, #516]
    5134:	orr	w2, w3, w2, lsl #16
    5138:	str	w2, [x1, #4]
    513c:	ldrb	w2, [x0, #1290]
    5140:	ldrb	w3, [x0, #1032]
    5144:	orr	w2, w3, w2, lsl #16
    5148:	str	w2, [x1, #8]
    514c:	add	x0, x0, #0x1
    5150:	add	x1, x1, #0x10
    5154:	cmp	x0, x4
    5158:	b.ne	511c <BZ2_compressBlock@@Base+0x518>  // b.any
    515c:	b	6408 <BZ2_compressBlock@@Base+0x1804>
    5160:	sxtw	x2, w23
    5164:	cmp	w25, w23
    5168:	b.ge	517c <BZ2_compressBlock@@Base+0x578>  // b.tcont
    516c:	b	5d28 <BZ2_compressBlock@@Base+0x1124>
    5170:	add	x2, x2, #0x1
    5174:	cmp	w25, w2
    5178:	b.lt	5d28 <BZ2_compressBlock@@Base+0x1124>  // b.tstop
    517c:	add	x3, sp, #0x228
    5180:	ldr	x0, [sp, #128]
    5184:	ldrh	w0, [x0, x2, lsl #1]
    5188:	add	x1, x0, #0x9, lsl #12
    518c:	add	x1, x1, #0x34c
    5190:	add	x1, x24, x1
    5194:	ldr	x4, [sp, #504]
    5198:	add	x0, x4, x0
    519c:	ldr	x4, [sp, #480]
    51a0:	add	x0, x0, x4
    51a4:	ldrb	w5, [x1]
    51a8:	ldrh	w4, [x3]
    51ac:	add	w4, w4, w5
    51b0:	strh	w4, [x3], #2
    51b4:	add	x1, x1, #0x102
    51b8:	cmp	x0, x1
    51bc:	b.ne	51a4 <BZ2_compressBlock@@Base+0x5a0>  // b.any
    51c0:	b	5170 <BZ2_compressBlock@@Base+0x56c>
    51c4:	sxtw	x2, w23
    51c8:	cmp	w25, w23
    51cc:	b.lt	5208 <BZ2_compressBlock@@Base+0x604>  // b.tstop
    51d0:	sbfiz	x1, x0, #7, #32
    51d4:	add	x0, x1, w0, sxtw
    51d8:	lsl	x0, x0, #1
    51dc:	ldr	x1, [sp, #128]
    51e0:	ldrh	w1, [x1, x2, lsl #1]
    51e4:	add	x1, x1, x0
    51e8:	add	x1, x24, x1, lsl #2
    51ec:	add	x1, x1, #0x8, lsl #12
    51f0:	ldr	w3, [x1, #12680]
    51f4:	add	w3, w3, #0x1
    51f8:	str	w3, [x1, #12680]
    51fc:	add	x2, x2, #0x1
    5200:	cmp	w25, w2
    5204:	b.ge	51dc <BZ2_compressBlock@@Base+0x5d8>  // b.tcont
    5208:	add	w23, w25, #0x1
    520c:	ldr	w1, [x24, #668]
    5210:	ldr	x0, [sp, #144]
    5214:	add	x0, x0, #0x1
    5218:	str	x0, [sp, #144]
    521c:	cmp	w1, w23
    5220:	b.le	6344 <BZ2_compressBlock@@Base+0x1740>
    5224:	add	w25, w23, #0x31
    5228:	sub	w0, w1, #0x1
    522c:	cmp	w25, w1
    5230:	csel	w25, w0, w25, ge  // ge = tcont
    5234:	mov	x0, #0x1                   	// #1
    5238:	ldr	x1, [sp, #280]
    523c:	add	x1, x1, x0, lsl #1
    5240:	sturh	wzr, [x1, #-2]
    5244:	add	x0, x0, #0x1
    5248:	ldr	x1, [sp, #160]
    524c:	cmp	x0, x1
    5250:	b.ne	5238 <BZ2_compressBlock@@Base+0x634>  // b.any
    5254:	ldr	w0, [sp, #136]
    5258:	cmp	w0, #0x6
    525c:	b.ne	5160 <BZ2_compressBlock@@Base+0x55c>  // b.any
    5260:	sub	w0, w25, w23
    5264:	cmp	w0, #0x31
    5268:	b.ne	5160 <BZ2_compressBlock@@Base+0x55c>  // b.any
    526c:	sbfiz	x28, x23, #1, #32
    5270:	ldr	x0, [sp, #128]
    5274:	add	x2, x0, x28
    5278:	ldrh	w3, [x2, #2]
    527c:	str	x3, [sp, #168]
    5280:	add	x0, x3, #0xc9b
    5284:	add	x0, x24, x0, lsl #4
    5288:	ldrh	w4, [x2, #4]
    528c:	str	x4, [sp, #176]
    5290:	add	x1, x4, #0xc9b
    5294:	add	x1, x24, x1, lsl #4
    5298:	ldr	w0, [x0, #8]
    529c:	ldr	w1, [x1, #8]
    52a0:	add	w0, w0, w1
    52a4:	ldrh	w30, [x2, #6]
    52a8:	add	x1, x30, #0xc9b
    52ac:	add	x1, x24, x1, lsl #4
    52b0:	ldrh	w5, [x2, #8]
    52b4:	str	x5, [sp, #184]
    52b8:	add	x3, x5, #0xc9b
    52bc:	add	x3, x24, x3, lsl #4
    52c0:	ldr	w1, [x1, #8]
    52c4:	ldr	w3, [x3, #8]
    52c8:	add	w1, w1, w3
    52cc:	add	w0, w0, w1
    52d0:	ldrh	w6, [x2, #10]
    52d4:	str	x6, [sp, #192]
    52d8:	add	x1, x6, #0xc9b
    52dc:	add	x1, x24, x1, lsl #4
    52e0:	ldrh	w7, [x2, #12]
    52e4:	str	x7, [sp, #200]
    52e8:	add	x3, x7, #0xc9b
    52ec:	add	x3, x24, x3, lsl #4
    52f0:	ldr	w1, [x1, #8]
    52f4:	ldr	w3, [x3, #8]
    52f8:	add	w1, w1, w3
    52fc:	add	w0, w0, w1
    5300:	ldrh	w8, [x2, #14]
    5304:	str	x8, [sp, #208]
    5308:	add	x1, x8, #0xc9b
    530c:	add	x1, x24, x1, lsl #4
    5310:	ldrh	w9, [x2, #16]
    5314:	str	x9, [sp, #216]
    5318:	add	x3, x9, #0xc9b
    531c:	add	x3, x24, x3, lsl #4
    5320:	ldr	w1, [x1, #8]
    5324:	ldr	w3, [x3, #8]
    5328:	add	w1, w1, w3
    532c:	add	w0, w0, w1
    5330:	ldrh	w10, [x2, #18]
    5334:	str	x10, [sp, #224]
    5338:	add	x1, x10, #0xc9b
    533c:	add	x1, x24, x1, lsl #4
    5340:	ldrh	w11, [x2, #20]
    5344:	str	x11, [sp, #232]
    5348:	add	x3, x11, #0xc9b
    534c:	add	x3, x24, x3, lsl #4
    5350:	ldr	w1, [x1, #8]
    5354:	ldr	w3, [x3, #8]
    5358:	add	w1, w1, w3
    535c:	add	w0, w0, w1
    5360:	ldrh	w12, [x2, #22]
    5364:	str	x12, [sp, #240]
    5368:	add	x1, x12, #0xc9b
    536c:	add	x1, x24, x1, lsl #4
    5370:	ldrh	w13, [x2, #24]
    5374:	str	x13, [sp, #248]
    5378:	add	x3, x13, #0xc9b
    537c:	add	x3, x24, x3, lsl #4
    5380:	ldr	w1, [x1, #8]
    5384:	ldr	w3, [x3, #8]
    5388:	add	w1, w1, w3
    538c:	add	w0, w0, w1
    5390:	ldrh	w14, [x2, #26]
    5394:	str	x14, [sp, #288]
    5398:	add	x1, x14, #0xc9b
    539c:	add	x1, x24, x1, lsl #4
    53a0:	ldrh	w15, [x2, #28]
    53a4:	str	x15, [sp, #296]
    53a8:	add	x3, x15, #0xc9b
    53ac:	add	x3, x24, x3, lsl #4
    53b0:	ldr	w1, [x1, #8]
    53b4:	ldr	w3, [x3, #8]
    53b8:	add	w1, w1, w3
    53bc:	add	w0, w0, w1
    53c0:	ldrh	w16, [x2, #30]
    53c4:	str	x16, [sp, #304]
    53c8:	add	x1, x16, #0xc9b
    53cc:	add	x1, x24, x1, lsl #4
    53d0:	ldrh	w17, [x2, #32]
    53d4:	str	x17, [sp, #312]
    53d8:	add	x3, x17, #0xc9b
    53dc:	add	x3, x24, x3, lsl #4
    53e0:	ldr	w1, [x1, #8]
    53e4:	ldr	w3, [x3, #8]
    53e8:	add	w1, w1, w3
    53ec:	add	w0, w0, w1
    53f0:	ldrh	w18, [x2, #34]
    53f4:	str	x18, [sp, #320]
    53f8:	add	x1, x18, #0xc9b
    53fc:	add	x1, x24, x1, lsl #4
    5400:	ldrh	w19, [x2, #36]
    5404:	str	x19, [sp, #328]
    5408:	add	x3, x19, #0xc9b
    540c:	add	x3, x24, x3, lsl #4
    5410:	ldr	w1, [x1, #8]
    5414:	ldr	w3, [x3, #8]
    5418:	add	w1, w1, w3
    541c:	add	w0, w0, w1
    5420:	ldrh	w20, [x2, #38]
    5424:	str	x20, [sp, #336]
    5428:	add	x1, x20, #0xc9b
    542c:	add	x1, x24, x1, lsl #4
    5430:	ldrh	w21, [x2, #40]
    5434:	str	x21, [sp, #344]
    5438:	add	x3, x21, #0xc9b
    543c:	add	x3, x24, x3, lsl #4
    5440:	ldr	w1, [x1, #8]
    5444:	ldr	w3, [x3, #8]
    5448:	add	w1, w1, w3
    544c:	add	w0, w0, w1
    5450:	ldrh	w22, [x2, #42]
    5454:	str	x22, [sp, #352]
    5458:	add	x1, x22, #0xc9b
    545c:	add	x1, x24, x1, lsl #4
    5460:	ldrh	w26, [x2, #44]
    5464:	str	x26, [sp, #360]
    5468:	add	x3, x26, #0xc9b
    546c:	add	x3, x24, x3, lsl #4
    5470:	ldr	w1, [x1, #8]
    5474:	ldr	w3, [x3, #8]
    5478:	add	w1, w1, w3
    547c:	add	w0, w0, w1
    5480:	ldrh	w27, [x2, #46]
    5484:	str	x27, [sp, #368]
    5488:	add	x1, x27, #0xc9b
    548c:	add	x1, x24, x1, lsl #4
    5490:	ldrh	w3, [x2, #48]
    5494:	str	x3, [sp, #376]
    5498:	add	x3, x3, #0xc9b
    549c:	add	x3, x24, x3, lsl #4
    54a0:	ldr	w1, [x1, #8]
    54a4:	ldr	w3, [x3, #8]
    54a8:	add	w1, w1, w3
    54ac:	add	w0, w0, w1
    54b0:	ldrh	w26, [x2, #50]
    54b4:	add	x1, x26, #0xc9b
    54b8:	add	x1, x24, x1, lsl #4
    54bc:	ldrh	w4, [x2, #52]
    54c0:	str	x4, [sp, #384]
    54c4:	add	x3, x4, #0xc9b
    54c8:	add	x3, x24, x3, lsl #4
    54cc:	ldr	w1, [x1, #8]
    54d0:	ldr	w3, [x3, #8]
    54d4:	add	w1, w1, w3
    54d8:	add	w0, w0, w1
    54dc:	ldrh	w5, [x2, #54]
    54e0:	str	x5, [sp, #392]
    54e4:	add	x1, x5, #0xc9b
    54e8:	add	x1, x24, x1, lsl #4
    54ec:	ldrh	w6, [x2, #56]
    54f0:	str	x6, [sp, #400]
    54f4:	add	x3, x6, #0xc9b
    54f8:	add	x3, x24, x3, lsl #4
    54fc:	ldr	w1, [x1, #8]
    5500:	ldr	w3, [x3, #8]
    5504:	add	w1, w1, w3
    5508:	add	w0, w0, w1
    550c:	ldrh	w22, [x2, #58]
    5510:	add	x1, x22, #0xc9b
    5514:	add	x1, x24, x1, lsl #4
    5518:	ldrh	w21, [x2, #60]
    551c:	add	x3, x21, #0xc9b
    5520:	add	x3, x24, x3, lsl #4
    5524:	ldr	w1, [x1, #8]
    5528:	ldr	w3, [x3, #8]
    552c:	add	w1, w1, w3
    5530:	add	w0, w0, w1
    5534:	ldrh	w20, [x2, #62]
    5538:	add	x1, x20, #0xc9b
    553c:	add	x1, x24, x1, lsl #4
    5540:	ldrh	w19, [x2, #64]
    5544:	add	x3, x19, #0xc9b
    5548:	add	x3, x24, x3, lsl #4
    554c:	ldr	w1, [x1, #8]
    5550:	ldr	w3, [x3, #8]
    5554:	add	w1, w1, w3
    5558:	add	w0, w0, w1
    555c:	ldrh	w18, [x2, #66]
    5560:	add	x1, x18, #0xc9b
    5564:	add	x1, x24, x1, lsl #4
    5568:	ldrh	w17, [x2, #68]
    556c:	add	x3, x17, #0xc9b
    5570:	add	x3, x24, x3, lsl #4
    5574:	ldr	w1, [x1, #8]
    5578:	ldr	w3, [x3, #8]
    557c:	add	w1, w1, w3
    5580:	add	w0, w0, w1
    5584:	ldrh	w16, [x2, #70]
    5588:	add	x1, x16, #0xc9b
    558c:	add	x1, x24, x1, lsl #4
    5590:	ldrh	w15, [x2, #72]
    5594:	add	x3, x15, #0xc9b
    5598:	add	x3, x24, x3, lsl #4
    559c:	ldr	w1, [x1, #8]
    55a0:	ldr	w3, [x3, #8]
    55a4:	add	w1, w1, w3
    55a8:	add	w0, w0, w1
    55ac:	ldrh	w14, [x2, #74]
    55b0:	add	x1, x14, #0xc9b
    55b4:	add	x1, x24, x1, lsl #4
    55b8:	ldrh	w13, [x2, #76]
    55bc:	add	x3, x13, #0xc9b
    55c0:	add	x3, x24, x3, lsl #4
    55c4:	ldr	w1, [x1, #8]
    55c8:	ldr	w3, [x3, #8]
    55cc:	add	w1, w1, w3
    55d0:	add	w0, w0, w1
    55d4:	ldrh	w12, [x2, #78]
    55d8:	add	x1, x12, #0xc9b
    55dc:	add	x1, x24, x1, lsl #4
    55e0:	ldrh	w11, [x2, #80]
    55e4:	add	x3, x11, #0xc9b
    55e8:	add	x3, x24, x3, lsl #4
    55ec:	ldr	w1, [x1, #8]
    55f0:	ldr	w3, [x3, #8]
    55f4:	add	w1, w1, w3
    55f8:	add	w0, w0, w1
    55fc:	ldrh	w10, [x2, #82]
    5600:	add	x1, x10, #0xc9b
    5604:	add	x1, x24, x1, lsl #4
    5608:	ldrh	w9, [x2, #84]
    560c:	add	x3, x9, #0xc9b
    5610:	add	x3, x24, x3, lsl #4
    5614:	ldr	w1, [x1, #8]
    5618:	ldr	w3, [x3, #8]
    561c:	add	w1, w1, w3
    5620:	add	w0, w0, w1
    5624:	ldrh	w8, [x2, #86]
    5628:	add	x1, x8, #0xc9b
    562c:	add	x1, x24, x1, lsl #4
    5630:	ldrh	w7, [x2, #88]
    5634:	add	x3, x7, #0xc9b
    5638:	add	x3, x24, x3, lsl #4
    563c:	ldr	w1, [x1, #8]
    5640:	ldr	w3, [x3, #8]
    5644:	add	w1, w1, w3
    5648:	add	w0, w0, w1
    564c:	ldrh	w6, [x2, #90]
    5650:	add	x1, x6, #0xc9b
    5654:	add	x1, x24, x1, lsl #4
    5658:	ldrh	w5, [x2, #92]
    565c:	add	x3, x5, #0xc9b
    5660:	add	x3, x24, x3, lsl #4
    5664:	ldr	w1, [x1, #8]
    5668:	ldr	w3, [x3, #8]
    566c:	add	w1, w1, w3
    5670:	add	w0, w0, w1
    5674:	ldrh	w4, [x2, #94]
    5678:	add	x1, x4, #0xc9b
    567c:	add	x1, x24, x1, lsl #4
    5680:	ldrh	w3, [x2, #96]
    5684:	add	x27, x3, #0xc9b
    5688:	add	x27, x24, x27, lsl #4
    568c:	ldr	w1, [x1, #8]
    5690:	ldr	w27, [x27, #8]
    5694:	add	w1, w1, w27
    5698:	add	w0, w0, w1
    569c:	ldr	x1, [sp, #128]
    56a0:	ldrh	w27, [x1, x28]
    56a4:	add	x1, x27, #0xc9b
    56a8:	add	x1, x24, x1, lsl #4
    56ac:	ldrh	w2, [x2, #98]
    56b0:	str	x2, [sp, #408]
    56b4:	add	x2, x2, #0xc9b
    56b8:	add	x2, x24, x2, lsl #4
    56bc:	ldr	w1, [x1, #8]
    56c0:	ldr	w2, [x2, #8]
    56c4:	add	w1, w1, w2
    56c8:	add	w28, w0, w1
    56cc:	str	w28, [sp, #268]
    56d0:	ldr	x0, [sp, #168]
    56d4:	add	x0, x24, x0, lsl #4
    56d8:	add	x28, x0, #0xc, lsl #12
    56dc:	ldr	x0, [sp, #176]
    56e0:	add	x0, x24, x0, lsl #4
    56e4:	add	x0, x0, #0xc, lsl #12
    56e8:	ldr	w1, [x28, #2492]
    56ec:	str	x0, [sp, #416]
    56f0:	ldr	w0, [x0, #2492]
    56f4:	add	w0, w1, w0
    56f8:	add	x30, x24, x30, lsl #4
    56fc:	add	x30, x30, #0xc, lsl #12
    5700:	ldr	x1, [sp, #184]
    5704:	add	x1, x24, x1, lsl #4
    5708:	add	x2, x1, #0xc, lsl #12
    570c:	ldr	w1, [x30, #2492]
    5710:	str	x2, [sp, #424]
    5714:	ldr	w2, [x2, #2492]
    5718:	add	w1, w1, w2
    571c:	add	w0, w0, w1
    5720:	ldr	x1, [sp, #192]
    5724:	add	x1, x24, x1, lsl #4
    5728:	add	x2, x1, #0xc, lsl #12
    572c:	ldr	x1, [sp, #200]
    5730:	add	x1, x24, x1, lsl #4
    5734:	add	x1, x1, #0xc, lsl #12
    5738:	str	x1, [sp, #168]
    573c:	str	x2, [sp, #432]
    5740:	ldr	w1, [x2, #2492]
    5744:	ldr	x2, [sp, #168]
    5748:	ldr	w2, [x2, #2492]
    574c:	add	w1, w1, w2
    5750:	add	w0, w0, w1
    5754:	ldr	x1, [sp, #208]
    5758:	add	x1, x24, x1, lsl #4
    575c:	add	x2, x1, #0xc, lsl #12
    5760:	ldr	x1, [sp, #216]
    5764:	add	x1, x24, x1, lsl #4
    5768:	add	x1, x1, #0xc, lsl #12
    576c:	str	x1, [sp, #176]
    5770:	str	x2, [sp, #440]
    5774:	ldr	w1, [x2, #2492]
    5778:	ldr	x2, [sp, #176]
    577c:	ldr	w2, [x2, #2492]
    5780:	add	w1, w1, w2
    5784:	add	w0, w0, w1
    5788:	ldr	x1, [sp, #224]
    578c:	add	x1, x24, x1, lsl #4
    5790:	add	x2, x1, #0xc, lsl #12
    5794:	ldr	x1, [sp, #232]
    5798:	add	x1, x24, x1, lsl #4
    579c:	add	x1, x1, #0xc, lsl #12
    57a0:	str	x1, [sp, #184]
    57a4:	str	x2, [sp, #448]
    57a8:	ldr	w1, [x2, #2492]
    57ac:	ldr	x2, [sp, #184]
    57b0:	ldr	w2, [x2, #2492]
    57b4:	add	w1, w1, w2
    57b8:	add	w0, w0, w1
    57bc:	ldr	x1, [sp, #240]
    57c0:	add	x1, x24, x1, lsl #4
    57c4:	add	x2, x1, #0xc, lsl #12
    57c8:	ldr	x1, [sp, #248]
    57cc:	add	x1, x24, x1, lsl #4
    57d0:	add	x1, x1, #0xc, lsl #12
    57d4:	str	x1, [sp, #192]
    57d8:	str	x2, [sp, #456]
    57dc:	ldr	w1, [x2, #2492]
    57e0:	ldr	x2, [sp, #192]
    57e4:	ldr	w2, [x2, #2492]
    57e8:	add	w1, w1, w2
    57ec:	add	w0, w0, w1
    57f0:	ldr	x1, [sp, #288]
    57f4:	add	x1, x24, x1, lsl #4
    57f8:	add	x1, x1, #0xc, lsl #12
    57fc:	mov	x2, x1
    5800:	ldr	x1, [sp, #296]
    5804:	add	x1, x24, x1, lsl #4
    5808:	add	x1, x1, #0xc, lsl #12
    580c:	str	x1, [sp, #200]
    5810:	str	x2, [sp, #288]
    5814:	ldr	w1, [x2, #2492]
    5818:	ldr	x2, [sp, #200]
    581c:	ldr	w2, [x2, #2492]
    5820:	add	w1, w1, w2
    5824:	add	w0, w0, w1
    5828:	ldr	x1, [sp, #304]
    582c:	add	x1, x24, x1, lsl #4
    5830:	add	x1, x1, #0xc, lsl #12
    5834:	mov	x2, x1
    5838:	ldr	x1, [sp, #312]
    583c:	add	x1, x24, x1, lsl #4
    5840:	add	x1, x1, #0xc, lsl #12
    5844:	str	x1, [sp, #208]
    5848:	str	x2, [sp, #296]
    584c:	ldr	w1, [x2, #2492]
    5850:	ldr	x2, [sp, #208]
    5854:	ldr	w2, [x2, #2492]
    5858:	add	w1, w1, w2
    585c:	add	w0, w0, w1
    5860:	ldr	x1, [sp, #320]
    5864:	add	x1, x24, x1, lsl #4
    5868:	add	x1, x1, #0xc, lsl #12
    586c:	mov	x2, x1
    5870:	ldr	x1, [sp, #328]
    5874:	add	x1, x24, x1, lsl #4
    5878:	add	x1, x1, #0xc, lsl #12
    587c:	str	x1, [sp, #216]
    5880:	str	x2, [sp, #304]
    5884:	ldr	w1, [x2, #2492]
    5888:	ldr	x2, [sp, #216]
    588c:	ldr	w2, [x2, #2492]
    5890:	add	w1, w1, w2
    5894:	add	w0, w0, w1
    5898:	ldr	x1, [sp, #336]
    589c:	add	x1, x24, x1, lsl #4
    58a0:	add	x1, x1, #0xc, lsl #12
    58a4:	mov	x2, x1
    58a8:	ldr	x1, [sp, #344]
    58ac:	add	x1, x24, x1, lsl #4
    58b0:	add	x1, x1, #0xc, lsl #12
    58b4:	str	x1, [sp, #224]
    58b8:	str	x2, [sp, #312]
    58bc:	ldr	w1, [x2, #2492]
    58c0:	ldr	x2, [sp, #224]
    58c4:	ldr	w2, [x2, #2492]
    58c8:	add	w1, w1, w2
    58cc:	add	w0, w0, w1
    58d0:	ldr	x1, [sp, #352]
    58d4:	add	x1, x24, x1, lsl #4
    58d8:	add	x1, x1, #0xc, lsl #12
    58dc:	mov	x2, x1
    58e0:	ldr	x1, [sp, #360]
    58e4:	add	x1, x24, x1, lsl #4
    58e8:	add	x1, x1, #0xc, lsl #12
    58ec:	str	x1, [sp, #232]
    58f0:	str	x2, [sp, #320]
    58f4:	ldr	w1, [x2, #2492]
    58f8:	ldr	x2, [sp, #232]
    58fc:	ldr	w2, [x2, #2492]
    5900:	add	w1, w1, w2
    5904:	add	w0, w0, w1
    5908:	ldr	x1, [sp, #368]
    590c:	add	x1, x24, x1, lsl #4
    5910:	add	x1, x1, #0xc, lsl #12
    5914:	mov	x2, x1
    5918:	ldr	x1, [sp, #376]
    591c:	add	x1, x24, x1, lsl #4
    5920:	add	x1, x1, #0xc, lsl #12
    5924:	str	x1, [sp, #240]
    5928:	str	x2, [sp, #328]
    592c:	ldr	w1, [x2, #2492]
    5930:	ldr	x2, [sp, #240]
    5934:	ldr	w2, [x2, #2492]
    5938:	add	w1, w1, w2
    593c:	add	w0, w0, w1
    5940:	add	x26, x24, x26, lsl #4
    5944:	add	x26, x26, #0xc, lsl #12
    5948:	ldr	x1, [sp, #384]
    594c:	add	x1, x24, x1, lsl #4
    5950:	add	x1, x1, #0xc, lsl #12
    5954:	mov	x2, x1
    5958:	ldr	w1, [x26, #2492]
    595c:	str	x2, [sp, #336]
    5960:	ldr	w2, [x2, #2492]
    5964:	add	w1, w1, w2
    5968:	add	w0, w0, w1
    596c:	ldr	x1, [sp, #392]
    5970:	add	x1, x24, x1, lsl #4
    5974:	add	x1, x1, #0xc, lsl #12
    5978:	mov	x2, x1
    597c:	ldr	x1, [sp, #400]
    5980:	add	x1, x24, x1, lsl #4
    5984:	add	x1, x1, #0xc, lsl #12
    5988:	str	x1, [sp, #248]
    598c:	str	x2, [sp, #344]
    5990:	ldr	w1, [x2, #2492]
    5994:	ldr	x2, [sp, #248]
    5998:	ldr	w2, [x2, #2492]
    599c:	add	w1, w1, w2
    59a0:	add	w0, w0, w1
    59a4:	add	x22, x24, x22, lsl #4
    59a8:	add	x22, x22, #0xc, lsl #12
    59ac:	add	x21, x24, x21, lsl #4
    59b0:	add	x21, x21, #0xc, lsl #12
    59b4:	ldr	w1, [x22, #2492]
    59b8:	ldr	w2, [x21, #2492]
    59bc:	add	w1, w1, w2
    59c0:	add	w0, w0, w1
    59c4:	add	x20, x24, x20, lsl #4
    59c8:	add	x20, x20, #0xc, lsl #12
    59cc:	add	x19, x24, x19, lsl #4
    59d0:	add	x19, x19, #0xc, lsl #12
    59d4:	ldr	w1, [x20, #2492]
    59d8:	ldr	w2, [x19, #2492]
    59dc:	add	w1, w1, w2
    59e0:	add	w0, w0, w1
    59e4:	add	x18, x24, x18, lsl #4
    59e8:	add	x18, x18, #0xc, lsl #12
    59ec:	add	x17, x24, x17, lsl #4
    59f0:	add	x17, x17, #0xc, lsl #12
    59f4:	ldr	w1, [x18, #2492]
    59f8:	ldr	w2, [x17, #2492]
    59fc:	add	w1, w1, w2
    5a00:	add	w0, w0, w1
    5a04:	add	x16, x24, x16, lsl #4
    5a08:	add	x16, x16, #0xc, lsl #12
    5a0c:	add	x15, x24, x15, lsl #4
    5a10:	add	x15, x15, #0xc, lsl #12
    5a14:	ldr	w1, [x16, #2492]
    5a18:	ldr	w2, [x15, #2492]
    5a1c:	add	w1, w1, w2
    5a20:	add	w0, w0, w1
    5a24:	add	x14, x24, x14, lsl #4
    5a28:	add	x14, x14, #0xc, lsl #12
    5a2c:	add	x13, x24, x13, lsl #4
    5a30:	add	x13, x13, #0xc, lsl #12
    5a34:	ldr	w1, [x14, #2492]
    5a38:	ldr	w2, [x13, #2492]
    5a3c:	add	w1, w1, w2
    5a40:	add	w0, w0, w1
    5a44:	add	x12, x24, x12, lsl #4
    5a48:	add	x12, x12, #0xc, lsl #12
    5a4c:	add	x11, x24, x11, lsl #4
    5a50:	add	x11, x11, #0xc, lsl #12
    5a54:	ldr	w1, [x12, #2492]
    5a58:	ldr	w2, [x11, #2492]
    5a5c:	add	w1, w1, w2
    5a60:	add	w0, w0, w1
    5a64:	add	x10, x24, x10, lsl #4
    5a68:	add	x10, x10, #0xc, lsl #12
    5a6c:	add	x9, x24, x9, lsl #4
    5a70:	add	x9, x9, #0xc, lsl #12
    5a74:	ldr	w1, [x10, #2492]
    5a78:	ldr	w2, [x9, #2492]
    5a7c:	add	w1, w1, w2
    5a80:	add	w0, w0, w1
    5a84:	add	x8, x24, x8, lsl #4
    5a88:	add	x8, x8, #0xc, lsl #12
    5a8c:	add	x7, x24, x7, lsl #4
    5a90:	add	x7, x7, #0xc, lsl #12
    5a94:	ldr	w1, [x8, #2492]
    5a98:	ldr	w2, [x7, #2492]
    5a9c:	add	w1, w1, w2
    5aa0:	add	w0, w0, w1
    5aa4:	add	x6, x24, x6, lsl #4
    5aa8:	add	x6, x6, #0xc, lsl #12
    5aac:	add	x5, x24, x5, lsl #4
    5ab0:	add	x5, x5, #0xc, lsl #12
    5ab4:	ldr	w1, [x6, #2492]
    5ab8:	ldr	w2, [x5, #2492]
    5abc:	add	w1, w1, w2
    5ac0:	add	w0, w0, w1
    5ac4:	add	x4, x24, x4, lsl #4
    5ac8:	add	x4, x4, #0xc, lsl #12
    5acc:	add	x3, x24, x3, lsl #4
    5ad0:	add	x3, x3, #0xc, lsl #12
    5ad4:	ldr	w1, [x4, #2492]
    5ad8:	str	x3, [sp, #352]
    5adc:	ldr	w2, [x3, #2492]
    5ae0:	add	w1, w1, w2
    5ae4:	add	w0, w0, w1
    5ae8:	add	x2, x24, x27, lsl #4
    5aec:	add	x2, x2, #0xc, lsl #12
    5af0:	ldr	x1, [sp, #408]
    5af4:	add	x1, x24, x1, lsl #4
    5af8:	add	x1, x1, #0xc, lsl #12
    5afc:	ldr	w27, [x2, #2492]
    5b00:	ldr	w3, [x1, #2492]
    5b04:	add	w27, w27, w3
    5b08:	add	w0, w0, w27
    5b0c:	ldr	w28, [x28, #2496]
    5b10:	ldr	x27, [sp, #416]
    5b14:	ldr	w27, [x27, #2496]
    5b18:	add	w28, w28, w27
    5b1c:	ldr	w27, [x30, #2496]
    5b20:	ldr	x30, [sp, #424]
    5b24:	ldr	w30, [x30, #2496]
    5b28:	add	w30, w27, w30
    5b2c:	add	w30, w28, w30
    5b30:	ldr	x27, [sp, #432]
    5b34:	ldr	w27, [x27, #2496]
    5b38:	ldr	x28, [sp, #168]
    5b3c:	ldr	w28, [x28, #2496]
    5b40:	add	w28, w27, w28
    5b44:	add	w28, w30, w28
    5b48:	ldr	x27, [sp, #440]
    5b4c:	ldr	w27, [x27, #2496]
    5b50:	ldr	x30, [sp, #176]
    5b54:	ldr	w30, [x30, #2496]
    5b58:	add	w30, w27, w30
    5b5c:	add	w30, w28, w30
    5b60:	ldr	x27, [sp, #448]
    5b64:	ldr	w27, [x27, #2496]
    5b68:	ldr	x28, [sp, #184]
    5b6c:	ldr	w28, [x28, #2496]
    5b70:	add	w28, w27, w28
    5b74:	add	w28, w30, w28
    5b78:	ldr	x27, [sp, #456]
    5b7c:	ldr	w27, [x27, #2496]
    5b80:	ldr	x30, [sp, #192]
    5b84:	ldr	w30, [x30, #2496]
    5b88:	add	w30, w27, w30
    5b8c:	add	w30, w28, w30
    5b90:	ldr	x27, [sp, #288]
    5b94:	ldr	w27, [x27, #2496]
    5b98:	ldr	x28, [sp, #200]
    5b9c:	ldr	w28, [x28, #2496]
    5ba0:	add	w28, w27, w28
    5ba4:	add	w28, w30, w28
    5ba8:	ldr	x27, [sp, #296]
    5bac:	ldr	w27, [x27, #2496]
    5bb0:	ldr	x30, [sp, #208]
    5bb4:	ldr	w30, [x30, #2496]
    5bb8:	add	w30, w27, w30
    5bbc:	add	w30, w28, w30
    5bc0:	ldr	x27, [sp, #304]
    5bc4:	ldr	w27, [x27, #2496]
    5bc8:	ldr	x28, [sp, #216]
    5bcc:	ldr	w28, [x28, #2496]
    5bd0:	add	w28, w27, w28
    5bd4:	add	w28, w30, w28
    5bd8:	ldr	x27, [sp, #312]
    5bdc:	ldr	w27, [x27, #2496]
    5be0:	ldr	x30, [sp, #224]
    5be4:	ldr	w30, [x30, #2496]
    5be8:	add	w30, w27, w30
    5bec:	add	w30, w28, w30
    5bf0:	ldr	x27, [sp, #320]
    5bf4:	ldr	w27, [x27, #2496]
    5bf8:	ldr	x28, [sp, #232]
    5bfc:	ldr	w28, [x28, #2496]
    5c00:	add	w28, w27, w28
    5c04:	add	w28, w30, w28
    5c08:	ldr	x27, [sp, #328]
    5c0c:	ldr	w27, [x27, #2496]
    5c10:	ldr	x30, [sp, #240]
    5c14:	ldr	w30, [x30, #2496]
    5c18:	add	w27, w27, w30
    5c1c:	add	w27, w28, w27
    5c20:	ldr	w28, [x26, #2496]
    5c24:	ldr	x26, [sp, #336]
    5c28:	ldr	w30, [x26, #2496]
    5c2c:	add	w28, w28, w30
    5c30:	add	w28, w27, w28
    5c34:	ldr	x26, [sp, #344]
    5c38:	ldr	w27, [x26, #2496]
    5c3c:	ldr	x26, [sp, #248]
    5c40:	ldr	w30, [x26, #2496]
    5c44:	add	w27, w27, w30
    5c48:	add	w27, w28, w27
    5c4c:	ldr	w28, [x22, #2496]
    5c50:	ldr	w30, [x21, #2496]
    5c54:	add	w28, w28, w30
    5c58:	add	w28, w27, w28
    5c5c:	ldr	w27, [x20, #2496]
    5c60:	ldr	w30, [x19, #2496]
    5c64:	add	w27, w27, w30
    5c68:	add	w28, w28, w27
    5c6c:	ldr	w27, [x18, #2496]
    5c70:	ldr	w30, [x17, #2496]
    5c74:	add	w27, w27, w30
    5c78:	add	w28, w28, w27
    5c7c:	ldr	w27, [x16, #2496]
    5c80:	ldr	w15, [x15, #2496]
    5c84:	add	w27, w27, w15
    5c88:	add	w28, w28, w27
    5c8c:	ldr	w14, [x14, #2496]
    5c90:	ldr	w13, [x13, #2496]
    5c94:	add	w13, w14, w13
    5c98:	add	w28, w28, w13
    5c9c:	ldr	w12, [x12, #2496]
    5ca0:	ldr	w11, [x11, #2496]
    5ca4:	add	w11, w12, w11
    5ca8:	add	w11, w28, w11
    5cac:	ldr	w10, [x10, #2496]
    5cb0:	ldr	w9, [x9, #2496]
    5cb4:	add	w9, w10, w9
    5cb8:	add	w9, w11, w9
    5cbc:	ldr	w8, [x8, #2496]
    5cc0:	ldr	w7, [x7, #2496]
    5cc4:	add	w7, w8, w7
    5cc8:	add	w7, w9, w7
    5ccc:	ldr	w6, [x6, #2496]
    5cd0:	ldr	w5, [x5, #2496]
    5cd4:	add	w5, w6, w5
    5cd8:	add	w5, w7, w5
    5cdc:	ldr	w4, [x4, #2496]
    5ce0:	ldr	x3, [sp, #352]
    5ce4:	ldr	w3, [x3, #2496]
    5ce8:	add	w3, w4, w3
    5cec:	add	w3, w5, w3
    5cf0:	ldr	w2, [x2, #2496]
    5cf4:	ldr	w1, [x1, #2496]
    5cf8:	add	w1, w2, w1
    5cfc:	add	w3, w3, w1
    5d00:	ldr	w28, [sp, #268]
    5d04:	strh	w28, [sp, #552]
    5d08:	lsr	w1, w28, #16
    5d0c:	strh	w1, [sp, #554]
    5d10:	strh	w0, [sp, #556]
    5d14:	lsr	w0, w0, #16
    5d18:	strh	w0, [sp, #558]
    5d1c:	strh	w3, [sp, #560]
    5d20:	lsr	w3, w3, #16
    5d24:	strh	w3, [sp, #562]
    5d28:	add	x4, sp, #0x228
    5d2c:	ldr	w1, [sp, #120]
    5d30:	mov	w0, #0xffffffff            	// #-1
    5d34:	mov	w2, #0xc9ff                	// #51711
    5d38:	movk	w2, #0x3b9a, lsl #16
    5d3c:	ldrh	w3, [x4], #2
    5d40:	cmp	w3, w2
    5d44:	csel	w5, w2, w3, ge  // ge = tcont
    5d48:	mov	w2, w5
    5d4c:	csel	w0, w0, w1, ge  // ge = tcont
    5d50:	add	w1, w1, #0x1
    5d54:	ldr	w3, [sp, #136]
    5d58:	cmp	w3, w1
    5d5c:	b.ne	5d3c <BZ2_compressBlock@@Base+0x1138>  // b.any
    5d60:	ldr	w3, [sp, #156]
    5d64:	add	w2, w3, w5
    5d68:	str	w2, [sp, #156]
    5d6c:	sxtw	x3, w0
    5d70:	ldr	x4, [sp, #464]
    5d74:	ldr	w2, [x4, x3, lsl #2]
    5d78:	add	w2, w2, #0x1
    5d7c:	str	w2, [x4, x3, lsl #2]
    5d80:	ldr	x3, [sp, #472]
    5d84:	ldr	x2, [sp, #144]
    5d88:	strb	w0, [x3, x2]
    5d8c:	mov	w28, w2
    5d90:	cmp	w1, #0x6
    5d94:	b.ne	51c4 <BZ2_compressBlock@@Base+0x5c0>  // b.any
    5d98:	sub	w1, w25, w23
    5d9c:	cmp	w1, #0x31
    5da0:	b.ne	51c4 <BZ2_compressBlock@@Base+0x5c0>  // b.any
    5da4:	sbfiz	x1, x23, #1, #32
    5da8:	sbfiz	x2, x0, #7, #32
    5dac:	add	x0, x2, w0, sxtw
    5db0:	lsl	x0, x0, #1
    5db4:	ldr	x4, [sp, #128]
    5db8:	ldrh	w2, [x4, x1]
    5dbc:	add	x2, x2, x0
    5dc0:	add	x2, x24, x2, lsl #2
    5dc4:	add	x2, x2, #0x8, lsl #12
    5dc8:	ldr	w3, [x2, #12680]
    5dcc:	add	w3, w3, #0x1
    5dd0:	str	w3, [x2, #12680]
    5dd4:	add	x1, x4, x1
    5dd8:	ldrh	w2, [x1, #2]
    5ddc:	add	x2, x2, x0
    5de0:	add	x2, x24, x2, lsl #2
    5de4:	add	x2, x2, #0x8, lsl #12
    5de8:	ldr	w3, [x2, #12680]
    5dec:	add	w3, w3, #0x1
    5df0:	str	w3, [x2, #12680]
    5df4:	ldrh	w2, [x1, #4]
    5df8:	add	x2, x2, x0
    5dfc:	add	x2, x24, x2, lsl #2
    5e00:	add	x2, x2, #0x8, lsl #12
    5e04:	ldr	w3, [x2, #12680]
    5e08:	add	w3, w3, #0x1
    5e0c:	str	w3, [x2, #12680]
    5e10:	ldrh	w2, [x1, #6]
    5e14:	add	x2, x2, x0
    5e18:	add	x2, x24, x2, lsl #2
    5e1c:	add	x2, x2, #0x8, lsl #12
    5e20:	ldr	w3, [x2, #12680]
    5e24:	add	w3, w3, #0x1
    5e28:	str	w3, [x2, #12680]
    5e2c:	ldrh	w2, [x1, #8]
    5e30:	add	x2, x2, x0
    5e34:	add	x2, x24, x2, lsl #2
    5e38:	add	x2, x2, #0x8, lsl #12
    5e3c:	ldr	w3, [x2, #12680]
    5e40:	add	w3, w3, #0x1
    5e44:	str	w3, [x2, #12680]
    5e48:	ldrh	w2, [x1, #10]
    5e4c:	add	x2, x2, x0
    5e50:	add	x2, x24, x2, lsl #2
    5e54:	add	x2, x2, #0x8, lsl #12
    5e58:	ldr	w3, [x2, #12680]
    5e5c:	add	w3, w3, #0x1
    5e60:	str	w3, [x2, #12680]
    5e64:	ldrh	w2, [x1, #12]
    5e68:	add	x2, x2, x0
    5e6c:	add	x2, x24, x2, lsl #2
    5e70:	add	x2, x2, #0x8, lsl #12
    5e74:	ldr	w3, [x2, #12680]
    5e78:	add	w3, w3, #0x1
    5e7c:	str	w3, [x2, #12680]
    5e80:	ldrh	w2, [x1, #14]
    5e84:	add	x2, x2, x0
    5e88:	add	x2, x24, x2, lsl #2
    5e8c:	add	x2, x2, #0x8, lsl #12
    5e90:	ldr	w3, [x2, #12680]
    5e94:	add	w3, w3, #0x1
    5e98:	str	w3, [x2, #12680]
    5e9c:	ldrh	w2, [x1, #16]
    5ea0:	add	x2, x2, x0
    5ea4:	add	x2, x24, x2, lsl #2
    5ea8:	add	x2, x2, #0x8, lsl #12
    5eac:	ldr	w3, [x2, #12680]
    5eb0:	add	w3, w3, #0x1
    5eb4:	str	w3, [x2, #12680]
    5eb8:	ldrh	w2, [x1, #18]
    5ebc:	add	x2, x2, x0
    5ec0:	add	x2, x24, x2, lsl #2
    5ec4:	add	x2, x2, #0x8, lsl #12
    5ec8:	ldr	w3, [x2, #12680]
    5ecc:	add	w3, w3, #0x1
    5ed0:	str	w3, [x2, #12680]
    5ed4:	ldrh	w2, [x1, #20]
    5ed8:	add	x2, x2, x0
    5edc:	add	x2, x24, x2, lsl #2
    5ee0:	add	x2, x2, #0x8, lsl #12
    5ee4:	ldr	w3, [x2, #12680]
    5ee8:	add	w3, w3, #0x1
    5eec:	str	w3, [x2, #12680]
    5ef0:	ldrh	w2, [x1, #22]
    5ef4:	add	x2, x2, x0
    5ef8:	add	x2, x24, x2, lsl #2
    5efc:	add	x2, x2, #0x8, lsl #12
    5f00:	ldr	w3, [x2, #12680]
    5f04:	add	w3, w3, #0x1
    5f08:	str	w3, [x2, #12680]
    5f0c:	ldrh	w2, [x1, #24]
    5f10:	add	x2, x2, x0
    5f14:	add	x2, x24, x2, lsl #2
    5f18:	add	x2, x2, #0x8, lsl #12
    5f1c:	ldr	w3, [x2, #12680]
    5f20:	add	w3, w3, #0x1
    5f24:	str	w3, [x2, #12680]
    5f28:	ldrh	w2, [x1, #26]
    5f2c:	add	x2, x2, x0
    5f30:	add	x2, x24, x2, lsl #2
    5f34:	add	x2, x2, #0x8, lsl #12
    5f38:	ldr	w3, [x2, #12680]
    5f3c:	add	w3, w3, #0x1
    5f40:	str	w3, [x2, #12680]
    5f44:	ldrh	w2, [x1, #28]
    5f48:	add	x2, x2, x0
    5f4c:	add	x2, x24, x2, lsl #2
    5f50:	add	x2, x2, #0x8, lsl #12
    5f54:	ldr	w3, [x2, #12680]
    5f58:	add	w3, w3, #0x1
    5f5c:	str	w3, [x2, #12680]
    5f60:	ldrh	w2, [x1, #30]
    5f64:	add	x2, x2, x0
    5f68:	add	x2, x24, x2, lsl #2
    5f6c:	add	x2, x2, #0x8, lsl #12
    5f70:	ldr	w3, [x2, #12680]
    5f74:	add	w3, w3, #0x1
    5f78:	str	w3, [x2, #12680]
    5f7c:	ldrh	w2, [x1, #32]
    5f80:	add	x2, x2, x0
    5f84:	add	x2, x24, x2, lsl #2
    5f88:	add	x2, x2, #0x8, lsl #12
    5f8c:	ldr	w3, [x2, #12680]
    5f90:	add	w3, w3, #0x1
    5f94:	str	w3, [x2, #12680]
    5f98:	ldrh	w2, [x1, #34]
    5f9c:	add	x2, x2, x0
    5fa0:	add	x2, x24, x2, lsl #2
    5fa4:	add	x2, x2, #0x8, lsl #12
    5fa8:	ldr	w3, [x2, #12680]
    5fac:	add	w3, w3, #0x1
    5fb0:	str	w3, [x2, #12680]
    5fb4:	ldrh	w2, [x1, #36]
    5fb8:	add	x2, x2, x0
    5fbc:	add	x2, x24, x2, lsl #2
    5fc0:	add	x2, x2, #0x8, lsl #12
    5fc4:	ldr	w3, [x2, #12680]
    5fc8:	add	w3, w3, #0x1
    5fcc:	str	w3, [x2, #12680]
    5fd0:	ldrh	w2, [x1, #38]
    5fd4:	add	x2, x2, x0
    5fd8:	add	x2, x24, x2, lsl #2
    5fdc:	add	x2, x2, #0x8, lsl #12
    5fe0:	ldr	w3, [x2, #12680]
    5fe4:	add	w3, w3, #0x1
    5fe8:	str	w3, [x2, #12680]
    5fec:	ldrh	w2, [x1, #40]
    5ff0:	add	x2, x2, x0
    5ff4:	add	x2, x24, x2, lsl #2
    5ff8:	add	x2, x2, #0x8, lsl #12
    5ffc:	ldr	w3, [x2, #12680]
    6000:	add	w3, w3, #0x1
    6004:	str	w3, [x2, #12680]
    6008:	ldrh	w2, [x1, #42]
    600c:	add	x2, x2, x0
    6010:	add	x2, x24, x2, lsl #2
    6014:	add	x2, x2, #0x8, lsl #12
    6018:	ldr	w3, [x2, #12680]
    601c:	add	w3, w3, #0x1
    6020:	str	w3, [x2, #12680]
    6024:	ldrh	w2, [x1, #44]
    6028:	add	x2, x2, x0
    602c:	add	x2, x24, x2, lsl #2
    6030:	add	x2, x2, #0x8, lsl #12
    6034:	ldr	w3, [x2, #12680]
    6038:	add	w3, w3, #0x1
    603c:	str	w3, [x2, #12680]
    6040:	ldrh	w2, [x1, #46]
    6044:	add	x2, x2, x0
    6048:	add	x2, x24, x2, lsl #2
    604c:	add	x2, x2, #0x8, lsl #12
    6050:	ldr	w3, [x2, #12680]
    6054:	add	w3, w3, #0x1
    6058:	str	w3, [x2, #12680]
    605c:	ldrh	w2, [x1, #48]
    6060:	add	x2, x2, x0
    6064:	add	x2, x24, x2, lsl #2
    6068:	add	x2, x2, #0x8, lsl #12
    606c:	ldr	w3, [x2, #12680]
    6070:	add	w3, w3, #0x1
    6074:	str	w3, [x2, #12680]
    6078:	ldrh	w2, [x1, #50]
    607c:	add	x2, x2, x0
    6080:	add	x2, x24, x2, lsl #2
    6084:	add	x2, x2, #0x8, lsl #12
    6088:	ldr	w3, [x2, #12680]
    608c:	add	w3, w3, #0x1
    6090:	str	w3, [x2, #12680]
    6094:	ldrh	w2, [x1, #52]
    6098:	add	x2, x2, x0
    609c:	add	x2, x24, x2, lsl #2
    60a0:	add	x2, x2, #0x8, lsl #12
    60a4:	ldr	w3, [x2, #12680]
    60a8:	add	w3, w3, #0x1
    60ac:	str	w3, [x2, #12680]
    60b0:	ldrh	w2, [x1, #54]
    60b4:	add	x2, x2, x0
    60b8:	add	x2, x24, x2, lsl #2
    60bc:	add	x2, x2, #0x8, lsl #12
    60c0:	ldr	w3, [x2, #12680]
    60c4:	add	w3, w3, #0x1
    60c8:	str	w3, [x2, #12680]
    60cc:	ldrh	w2, [x1, #56]
    60d0:	add	x2, x2, x0
    60d4:	add	x2, x24, x2, lsl #2
    60d8:	add	x2, x2, #0x8, lsl #12
    60dc:	ldr	w3, [x2, #12680]
    60e0:	add	w3, w3, #0x1
    60e4:	str	w3, [x2, #12680]
    60e8:	ldrh	w2, [x1, #58]
    60ec:	add	x2, x2, x0
    60f0:	add	x2, x24, x2, lsl #2
    60f4:	add	x2, x2, #0x8, lsl #12
    60f8:	ldr	w3, [x2, #12680]
    60fc:	add	w3, w3, #0x1
    6100:	str	w3, [x2, #12680]
    6104:	ldrh	w2, [x1, #60]
    6108:	add	x2, x2, x0
    610c:	add	x2, x24, x2, lsl #2
    6110:	add	x2, x2, #0x8, lsl #12
    6114:	ldr	w3, [x2, #12680]
    6118:	add	w3, w3, #0x1
    611c:	str	w3, [x2, #12680]
    6120:	ldrh	w2, [x1, #62]
    6124:	add	x2, x2, x0
    6128:	add	x2, x24, x2, lsl #2
    612c:	add	x2, x2, #0x8, lsl #12
    6130:	ldr	w3, [x2, #12680]
    6134:	add	w3, w3, #0x1
    6138:	str	w3, [x2, #12680]
    613c:	ldrh	w2, [x1, #64]
    6140:	add	x2, x2, x0
    6144:	add	x2, x24, x2, lsl #2
    6148:	add	x2, x2, #0x8, lsl #12
    614c:	ldr	w3, [x2, #12680]
    6150:	add	w3, w3, #0x1
    6154:	str	w3, [x2, #12680]
    6158:	ldrh	w2, [x1, #66]
    615c:	add	x2, x2, x0
    6160:	add	x2, x24, x2, lsl #2
    6164:	add	x2, x2, #0x8, lsl #12
    6168:	ldr	w3, [x2, #12680]
    616c:	add	w3, w3, #0x1
    6170:	str	w3, [x2, #12680]
    6174:	ldrh	w2, [x1, #68]
    6178:	add	x2, x2, x0
    617c:	add	x2, x24, x2, lsl #2
    6180:	add	x2, x2, #0x8, lsl #12
    6184:	ldr	w3, [x2, #12680]
    6188:	add	w3, w3, #0x1
    618c:	str	w3, [x2, #12680]
    6190:	ldrh	w2, [x1, #70]
    6194:	add	x2, x2, x0
    6198:	add	x2, x24, x2, lsl #2
    619c:	add	x2, x2, #0x8, lsl #12
    61a0:	ldr	w3, [x2, #12680]
    61a4:	add	w3, w3, #0x1
    61a8:	str	w3, [x2, #12680]
    61ac:	ldrh	w2, [x1, #72]
    61b0:	add	x2, x2, x0
    61b4:	add	x2, x24, x2, lsl #2
    61b8:	add	x2, x2, #0x8, lsl #12
    61bc:	ldr	w3, [x2, #12680]
    61c0:	add	w3, w3, #0x1
    61c4:	str	w3, [x2, #12680]
    61c8:	ldrh	w2, [x1, #74]
    61cc:	add	x2, x2, x0
    61d0:	add	x2, x24, x2, lsl #2
    61d4:	add	x2, x2, #0x8, lsl #12
    61d8:	ldr	w3, [x2, #12680]
    61dc:	add	w3, w3, #0x1
    61e0:	str	w3, [x2, #12680]
    61e4:	ldrh	w2, [x1, #76]
    61e8:	add	x2, x2, x0
    61ec:	add	x2, x24, x2, lsl #2
    61f0:	add	x2, x2, #0x8, lsl #12
    61f4:	ldr	w3, [x2, #12680]
    61f8:	add	w3, w3, #0x1
    61fc:	str	w3, [x2, #12680]
    6200:	ldrh	w2, [x1, #78]
    6204:	add	x2, x2, x0
    6208:	add	x2, x24, x2, lsl #2
    620c:	add	x2, x2, #0x8, lsl #12
    6210:	ldr	w3, [x2, #12680]
    6214:	add	w3, w3, #0x1
    6218:	str	w3, [x2, #12680]
    621c:	ldrh	w2, [x1, #80]
    6220:	add	x2, x2, x0
    6224:	add	x2, x24, x2, lsl #2
    6228:	add	x2, x2, #0x8, lsl #12
    622c:	ldr	w3, [x2, #12680]
    6230:	add	w3, w3, #0x1
    6234:	str	w3, [x2, #12680]
    6238:	ldrh	w2, [x1, #82]
    623c:	add	x2, x2, x0
    6240:	add	x2, x24, x2, lsl #2
    6244:	add	x2, x2, #0x8, lsl #12
    6248:	ldr	w3, [x2, #12680]
    624c:	add	w3, w3, #0x1
    6250:	str	w3, [x2, #12680]
    6254:	ldrh	w2, [x1, #84]
    6258:	add	x2, x2, x0
    625c:	add	x2, x24, x2, lsl #2
    6260:	add	x2, x2, #0x8, lsl #12
    6264:	ldr	w3, [x2, #12680]
    6268:	add	w3, w3, #0x1
    626c:	str	w3, [x2, #12680]
    6270:	ldrh	w2, [x1, #86]
    6274:	add	x2, x2, x0
    6278:	add	x2, x24, x2, lsl #2
    627c:	add	x2, x2, #0x8, lsl #12
    6280:	ldr	w3, [x2, #12680]
    6284:	add	w3, w3, #0x1
    6288:	str	w3, [x2, #12680]
    628c:	ldrh	w2, [x1, #88]
    6290:	add	x2, x2, x0
    6294:	add	x2, x24, x2, lsl #2
    6298:	add	x2, x2, #0x8, lsl #12
    629c:	ldr	w3, [x2, #12680]
    62a0:	add	w3, w3, #0x1
    62a4:	str	w3, [x2, #12680]
    62a8:	ldrh	w2, [x1, #90]
    62ac:	add	x2, x2, x0
    62b0:	add	x2, x24, x2, lsl #2
    62b4:	add	x2, x2, #0x8, lsl #12
    62b8:	ldr	w3, [x2, #12680]
    62bc:	add	w3, w3, #0x1
    62c0:	str	w3, [x2, #12680]
    62c4:	ldrh	w2, [x1, #92]
    62c8:	add	x2, x2, x0
    62cc:	add	x2, x24, x2, lsl #2
    62d0:	add	x2, x2, #0x8, lsl #12
    62d4:	ldr	w3, [x2, #12680]
    62d8:	add	w3, w3, #0x1
    62dc:	str	w3, [x2, #12680]
    62e0:	ldrh	w2, [x1, #94]
    62e4:	add	x2, x2, x0
    62e8:	add	x2, x24, x2, lsl #2
    62ec:	add	x2, x2, #0x8, lsl #12
    62f0:	ldr	w3, [x2, #12680]
    62f4:	add	w3, w3, #0x1
    62f8:	str	w3, [x2, #12680]
    62fc:	ldrh	w2, [x1, #96]
    6300:	add	x2, x2, x0
    6304:	add	x2, x24, x2, lsl #2
    6308:	add	x2, x2, #0x8, lsl #12
    630c:	ldr	w3, [x2, #12680]
    6310:	add	w3, w3, #0x1
    6314:	str	w3, [x2, #12680]
    6318:	ldrh	w1, [x1, #98]
    631c:	add	x0, x1, x0
    6320:	add	x0, x24, x0, lsl #2
    6324:	add	x0, x0, #0x8, lsl #12
    6328:	ldr	w1, [x0, #12680]
    632c:	add	w1, w1, #0x1
    6330:	str	w1, [x0, #12680]
    6334:	b	5208 <BZ2_compressBlock@@Base+0x604>
    6338:	ldr	w0, [sp, #120]
    633c:	mov	w28, w0
    6340:	str	w0, [sp, #156]
    6344:	ldr	w0, [x24, #656]
    6348:	cmp	w0, #0x2
    634c:	b.gt	6444 <BZ2_compressBlock@@Base+0x1840>
    6350:	ldr	x19, [sp, #256]
    6354:	mov	w20, #0x11                  	// #17
    6358:	ldr	x21, [sp, #272]
    635c:	mov	w3, w20
    6360:	ldr	w2, [sp, #152]
    6364:	mov	x1, x21
    6368:	mov	x0, x19
    636c:	bl	1480 <BZ2_hbMakeCodeLengths@plt>
    6370:	add	x19, x19, #0x102
    6374:	add	x21, x21, #0x408
    6378:	ldr	x0, [sp, #512]
    637c:	cmp	x19, x0
    6380:	b.ne	635c <BZ2_compressBlock@@Base+0x1758>  // b.any
    6384:	ldr	w0, [sp, #264]
    6388:	subs	w0, w0, #0x1
    638c:	str	w0, [sp, #264]
    6390:	b.eq	64d0 <BZ2_compressBlock@@Base+0x18cc>  // b.none
    6394:	ldr	x0, [sp, #520]
    6398:	add	x0, x0, #0x2
    639c:	str	x0, [sp, #160]
    63a0:	mov	x0, #0x1                   	// #1
    63a4:	add	x1, sp, #0x248
    63a8:	add	x2, x1, x0, lsl #2
    63ac:	stur	wzr, [x2, #-4]
    63b0:	add	x0, x0, #0x1
    63b4:	ldr	x2, [sp, #160]
    63b8:	cmp	x2, x0
    63bc:	b.ne	63a8 <BZ2_compressBlock@@Base+0x17a4>  // b.any
    63c0:	add	x0, x24, #0xb, lsl #12
    63c4:	add	x0, x0, #0x188
    63c8:	str	x0, [sp, #272]
    63cc:	ldr	w2, [sp, #152]
    63d0:	mov	x1, #0x0                   	// #0
    63d4:	cmp	w2, #0x0
    63d8:	b.le	63ec <BZ2_compressBlock@@Base+0x17e8>
    63dc:	str	wzr, [x0, x1, lsl #2]
    63e0:	add	x1, x1, #0x1
    63e4:	cmp	w2, w1
    63e8:	b.gt	63dc <BZ2_compressBlock@@Base+0x17d8>
    63ec:	add	x0, x0, #0x408
    63f0:	ldr	x1, [sp, #496]
    63f4:	cmp	x1, x0
    63f8:	b.ne	63d0 <BZ2_compressBlock@@Base+0x17cc>  // b.any
    63fc:	ldr	w0, [sp, #136]
    6400:	cmp	w0, #0x6
    6404:	b.eq	5100 <BZ2_compressBlock@@Base+0x4fc>  // b.none
    6408:	ldr	w1, [x24, #668]
    640c:	cmp	w1, #0x0
    6410:	b.le	6338 <BZ2_compressBlock@@Base+0x1734>
    6414:	ldr	w8, [sp, #120]
    6418:	str	w8, [sp, #156]
    641c:	mov	x0, #0x1                   	// #1
    6420:	str	x0, [sp, #144]
    6424:	add	x0, sp, #0x228
    6428:	str	x0, [sp, #280]
    642c:	add	x0, sp, #0x248
    6430:	str	x0, [sp, #464]
    6434:	add	x0, x24, #0x6a7
    6438:	str	x0, [sp, #472]
    643c:	mov	w23, w8
    6440:	b	5224 <BZ2_compressBlock@@Base+0x620>
    6444:	ldr	w0, [sp, #156]
    6448:	add	w3, w0, #0x7
    644c:	cmp	w0, #0x0
    6450:	csel	w3, w3, w0, lt  // lt = tstop
    6454:	asr	w3, w3, #3
    6458:	mov	w2, #0x5                   	// #5
    645c:	ldr	w0, [sp, #264]
    6460:	sub	w2, w2, w0
    6464:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    6468:	add	x1, x1, #0x538
    646c:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    6470:	ldr	x0, [x0, #4016]
    6474:	ldr	x0, [x0]
    6478:	bl	16e0 <fprintf@plt>
    647c:	mov	x19, #0x1                   	// #1
    6480:	add	x22, sp, #0x248
    6484:	adrp	x21, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    6488:	add	x21, x21, #0x568
    648c:	adrp	x20, 1f000 <BZ2_bzerror@@Base+0x10d58>
    6490:	ldr	x20, [x20, #4016]
    6494:	ldr	x23, [sp, #160]
    6498:	add	x0, x22, x19, lsl #2
    649c:	ldur	w2, [x0, #-4]
    64a0:	mov	x1, x21
    64a4:	ldr	x0, [x20]
    64a8:	bl	16e0 <fprintf@plt>
    64ac:	add	x19, x19, #0x1
    64b0:	cmp	x19, x23
    64b4:	b.ne	6498 <BZ2_compressBlock@@Base+0x1894>  // b.any
    64b8:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    64bc:	ldr	x0, [x0, #4016]
    64c0:	ldr	x1, [x0]
    64c4:	mov	w0, #0xa                   	// #10
    64c8:	bl	14c0 <fputc@plt>
    64cc:	b	6350 <BZ2_compressBlock@@Base+0x174c>
    64d0:	ldr	x27, [sp, #128]
    64d4:	mov	x26, x24
    64d8:	mov	w0, #0x4652                	// #18002
    64dc:	cmp	w28, w0
    64e0:	b.gt	6524 <BZ2_compressBlock@@Base+0x1920>
    64e4:	add	x0, sp, #0x238
    64e8:	ldr	w21, [sp, #120]
    64ec:	ldr	w1, [sp, #136]
    64f0:	strb	w21, [x0], #1
    64f4:	mov	w23, w21
    64f8:	add	w21, w21, #0x1
    64fc:	cmp	w1, w21
    6500:	b.ne	64f0 <BZ2_compressBlock@@Base+0x18ec>  // b.any
    6504:	cmp	w28, #0x0
    6508:	b.le	6580 <BZ2_compressBlock@@Base+0x197c>
    650c:	mov	x1, #0x0                   	// #0
    6510:	add	x8, x26, #0x6a8
    6514:	add	x7, sp, #0x238
    6518:	add	x6, x26, #0x4, lsl #12
    651c:	add	x6, x6, #0xcfa
    6520:	b	655c <BZ2_compressBlock@@Base+0x1958>
    6524:	mov	w0, #0xbbb                 	// #3003
    6528:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    652c:	b	64e4 <BZ2_compressBlock@@Base+0x18e0>
    6530:	add	w2, w2, #0x1
    6534:	mov	w5, w0
    6538:	ldrb	w0, [x3]
    653c:	strb	w5, [x3], #1
    6540:	cmp	w4, w0
    6544:	b.ne	6530 <BZ2_compressBlock@@Base+0x192c>  // b.any
    6548:	strb	w0, [sp, #568]
    654c:	strb	w2, [x6, x1]
    6550:	add	x1, x1, #0x1
    6554:	cmp	w28, w1
    6558:	b.le	6580 <BZ2_compressBlock@@Base+0x197c>
    655c:	ldrb	w4, [x8, x1]
    6560:	ldrb	w0, [sp, #568]
    6564:	cmp	w4, w0
    6568:	b.eq	6578 <BZ2_compressBlock@@Base+0x1974>  // b.none
    656c:	add	x3, x7, #0x1
    6570:	ldr	w2, [sp, #120]
    6574:	b	6530 <BZ2_compressBlock@@Base+0x192c>
    6578:	ldr	w2, [sp, #120]
    657c:	b	6548 <BZ2_compressBlock@@Base+0x1944>
    6580:	add	x24, x26, #0x9, lsl #12
    6584:	add	x24, x24, #0x958
    6588:	str	w21, [sp, #128]
    658c:	ubfiz	x0, x23, #7, #32
    6590:	add	x23, x0, w23, uxtw
    6594:	ldr	x0, [sp, #480]
    6598:	add	x23, x0, x23, lsl #1
    659c:	ldr	x22, [sp, #256]
    65a0:	mov	w25, #0xbbc                 	// #3004
    65a4:	str	x27, [sp, #136]
    65a8:	ldr	w27, [sp, #152]
    65ac:	b	65e8 <BZ2_compressBlock@@Base+0x19e4>
    65b0:	mov	w0, w25
    65b4:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    65b8:	cmp	w19, #0x0
    65bc:	b.le	6628 <BZ2_compressBlock@@Base+0x1a24>
    65c0:	mov	w4, w27
    65c4:	mov	w3, w20
    65c8:	mov	w2, w19
    65cc:	mov	x1, x22
    65d0:	mov	x0, x24
    65d4:	bl	1670 <BZ2_hbAssignCodes@plt>
    65d8:	add	x24, x24, #0x408
    65dc:	add	x22, x22, #0x102
    65e0:	cmp	x23, x22
    65e4:	b.eq	663c <BZ2_compressBlock@@Base+0x1a38>  // b.none
    65e8:	ldr	w20, [sp, #120]
    65ec:	mov	x0, #0x0                   	// #0
    65f0:	mov	w19, #0x20                  	// #32
    65f4:	cmp	w27, #0x0
    65f8:	b.le	6634 <BZ2_compressBlock@@Base+0x1a30>
    65fc:	ldrb	w1, [x22, x0]
    6600:	cmp	w20, w1
    6604:	csel	w20, w20, w1, ge  // ge = tcont
    6608:	cmp	w19, w1
    660c:	csel	w19, w19, w1, le
    6610:	add	x0, x0, #0x1
    6614:	cmp	w27, w0
    6618:	b.gt	65fc <BZ2_compressBlock@@Base+0x19f8>
    661c:	cmp	w20, #0x11
    6620:	b.le	65b8 <BZ2_compressBlock@@Base+0x19b4>
    6624:	b	65b0 <BZ2_compressBlock@@Base+0x19ac>
    6628:	mov	w0, #0xbbd                 	// #3005
    662c:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    6630:	b	65c0 <BZ2_compressBlock@@Base+0x19bc>
    6634:	ldr	w20, [sp, #120]
    6638:	b	65c0 <BZ2_compressBlock@@Base+0x19bc>
    663c:	ldr	x27, [sp, #136]
    6640:	add	x4, sp, #0x238
    6644:	mov	x2, x4
    6648:	mov	x0, #0x0                   	// #0
    664c:	ldr	x1, [sp, #528]
    6650:	add	x6, x1, #0x80
    6654:	mov	w9, #0x1                   	// #1
    6658:	add	x5, x1, #0x90
    665c:	b	668c <BZ2_compressBlock@@Base+0x1a88>
    6660:	strb	w9, [x7]
    6664:	add	x1, x1, #0x1
    6668:	cmp	x1, x3
    666c:	b.eq	667c <BZ2_compressBlock@@Base+0x1a78>  // b.none
    6670:	ldrb	w8, [x1]
    6674:	cbz	w8, 6664 <BZ2_compressBlock@@Base+0x1a60>
    6678:	b	6660 <BZ2_compressBlock@@Base+0x1a5c>
    667c:	add	x2, x2, #0x1
    6680:	add	x0, x0, #0x10
    6684:	cmp	x0, #0x100
    6688:	b.eq	66a0 <BZ2_compressBlock@@Base+0x1a9c>  // b.none
    668c:	mov	x7, x2
    6690:	strb	wzr, [x2]
    6694:	add	x1, x6, x0
    6698:	add	x3, x5, x0
    669c:	b	6670 <BZ2_compressBlock@@Base+0x1a6c>
    66a0:	ldr	w2, [x26, #116]
    66a4:	add	x8, x4, #0x10
    66a8:	mov	x1, x4
    66ac:	mov	w7, #0x80000000            	// #-2147483648
    66b0:	b	6720 <BZ2_compressBlock@@Base+0x1b1c>
    66b4:	ldr	w0, [x26, #644]
    66b8:	cmp	w0, #0x7
    66bc:	b.le	66fc <BZ2_compressBlock@@Base+0x1af8>
    66c0:	ldrsw	x0, [x26, #116]
    66c4:	ldr	x3, [x26, #80]
    66c8:	ldrb	w9, [x26, #643]
    66cc:	strb	w9, [x3, x0]
    66d0:	ldr	w0, [x26, #116]
    66d4:	add	w0, w0, #0x1
    66d8:	str	w0, [x26, #116]
    66dc:	ldr	w0, [x26, #640]
    66e0:	lsl	w0, w0, #8
    66e4:	str	w0, [x26, #640]
    66e8:	ldr	w0, [x26, #644]
    66ec:	sub	w0, w0, #0x8
    66f0:	str	w0, [x26, #644]
    66f4:	cmp	w0, #0x7
    66f8:	b.gt	66c0 <BZ2_compressBlock@@Base+0x1abc>
    66fc:	lsr	w9, w7, w0
    6700:	ldr	w3, [x26, #640]
    6704:	orr	w3, w3, w9
    6708:	str	w3, [x26, #640]
    670c:	add	w0, w0, #0x1
    6710:	str	w0, [x26, #644]
    6714:	add	x1, x1, #0x1
    6718:	cmp	x1, x8
    671c:	b.eq	677c <BZ2_compressBlock@@Base+0x1b78>  // b.none
    6720:	ldrb	w0, [x1]
    6724:	cbnz	w0, 66b4 <BZ2_compressBlock@@Base+0x1ab0>
    6728:	ldr	w0, [x26, #644]
    672c:	cmp	w0, #0x7
    6730:	b.le	6770 <BZ2_compressBlock@@Base+0x1b6c>
    6734:	ldrsw	x0, [x26, #116]
    6738:	ldr	x3, [x26, #80]
    673c:	ldrb	w9, [x26, #643]
    6740:	strb	w9, [x3, x0]
    6744:	ldr	w0, [x26, #116]
    6748:	add	w0, w0, #0x1
    674c:	str	w0, [x26, #116]
    6750:	ldr	w0, [x26, #640]
    6754:	lsl	w0, w0, #8
    6758:	str	w0, [x26, #640]
    675c:	ldr	w0, [x26, #644]
    6760:	sub	w0, w0, #0x8
    6764:	str	w0, [x26, #644]
    6768:	cmp	w0, #0x7
    676c:	b.gt	6734 <BZ2_compressBlock@@Base+0x1b30>
    6770:	add	w0, w0, #0x1
    6774:	str	w0, [x26, #644]
    6778:	b	6714 <BZ2_compressBlock@@Base+0x1b10>
    677c:	mov	x1, #0x0                   	// #0
    6780:	mov	w9, #0x80000000            	// #-2147483648
    6784:	b	6860 <BZ2_compressBlock@@Base+0x1c5c>
    6788:	ldr	w0, [x26, #644]
    678c:	cmp	w0, #0x7
    6790:	b.le	67d0 <BZ2_compressBlock@@Base+0x1bcc>
    6794:	ldrsw	x0, [x26, #116]
    6798:	ldr	x7, [x26, #80]
    679c:	ldrb	w10, [x26, #643]
    67a0:	strb	w10, [x7, x0]
    67a4:	ldr	w0, [x26, #116]
    67a8:	add	w0, w0, #0x1
    67ac:	str	w0, [x26, #116]
    67b0:	ldr	w0, [x26, #640]
    67b4:	lsl	w0, w0, #8
    67b8:	str	w0, [x26, #640]
    67bc:	ldr	w0, [x26, #644]
    67c0:	sub	w0, w0, #0x8
    67c4:	str	w0, [x26, #644]
    67c8:	cmp	w0, #0x7
    67cc:	b.gt	6794 <BZ2_compressBlock@@Base+0x1b90>
    67d0:	lsr	w10, w9, w0
    67d4:	ldr	w7, [x26, #640]
    67d8:	orr	w7, w7, w10
    67dc:	str	w7, [x26, #640]
    67e0:	add	w0, w0, #0x1
    67e4:	str	w0, [x26, #644]
    67e8:	add	x3, x3, #0x1
    67ec:	cmp	x8, x3
    67f0:	b.eq	6850 <BZ2_compressBlock@@Base+0x1c4c>  // b.none
    67f4:	ldrb	w0, [x3]
    67f8:	cbnz	w0, 6788 <BZ2_compressBlock@@Base+0x1b84>
    67fc:	ldr	w0, [x26, #644]
    6800:	cmp	w0, #0x7
    6804:	b.le	6844 <BZ2_compressBlock@@Base+0x1c40>
    6808:	ldrsw	x0, [x26, #116]
    680c:	ldr	x7, [x26, #80]
    6810:	ldrb	w10, [x26, #643]
    6814:	strb	w10, [x7, x0]
    6818:	ldr	w0, [x26, #116]
    681c:	add	w0, w0, #0x1
    6820:	str	w0, [x26, #116]
    6824:	ldr	w0, [x26, #640]
    6828:	lsl	w0, w0, #8
    682c:	str	w0, [x26, #640]
    6830:	ldr	w0, [x26, #644]
    6834:	sub	w0, w0, #0x8
    6838:	str	w0, [x26, #644]
    683c:	cmp	w0, #0x7
    6840:	b.gt	6808 <BZ2_compressBlock@@Base+0x1c04>
    6844:	add	w0, w0, #0x1
    6848:	str	w0, [x26, #644]
    684c:	b	67e8 <BZ2_compressBlock@@Base+0x1be4>
    6850:	add	x4, x4, #0x1
    6854:	add	x1, x1, #0x10
    6858:	cmp	x1, #0x100
    685c:	b.eq	6874 <BZ2_compressBlock@@Base+0x1c70>  // b.none
    6860:	ldrb	w0, [x4]
    6864:	cbz	w0, 6850 <BZ2_compressBlock@@Base+0x1c4c>
    6868:	add	x3, x6, x1
    686c:	add	x8, x5, x1
    6870:	b	67f4 <BZ2_compressBlock@@Base+0x1bf0>
    6874:	ldr	w0, [x26, #656]
    6878:	cmp	w0, #0x2
    687c:	b.gt	6980 <BZ2_compressBlock@@Base+0x1d7c>
    6880:	ldr	w2, [x26, #116]
    6884:	ldr	w0, [x26, #644]
    6888:	cmp	w0, #0x7
    688c:	b.le	68cc <BZ2_compressBlock@@Base+0x1cc8>
    6890:	ldrsw	x0, [x26, #116]
    6894:	ldr	x1, [x26, #80]
    6898:	ldrb	w3, [x26, #643]
    689c:	strb	w3, [x1, x0]
    68a0:	ldr	w0, [x26, #116]
    68a4:	add	w0, w0, #0x1
    68a8:	str	w0, [x26, #116]
    68ac:	ldr	w0, [x26, #640]
    68b0:	lsl	w0, w0, #8
    68b4:	str	w0, [x26, #640]
    68b8:	ldr	w0, [x26, #644]
    68bc:	sub	w0, w0, #0x8
    68c0:	str	w0, [x26, #644]
    68c4:	cmp	w0, #0x7
    68c8:	b.gt	6890 <BZ2_compressBlock@@Base+0x1c8c>
    68cc:	mov	w1, #0x1d                  	// #29
    68d0:	sub	w1, w1, w0
    68d4:	ldr	w3, [sp, #128]
    68d8:	lsl	w25, w3, w1
    68dc:	ldr	w1, [x26, #640]
    68e0:	orr	w25, w1, w25
    68e4:	str	w25, [x26, #640]
    68e8:	add	w0, w0, #0x3
    68ec:	str	w0, [x26, #644]
    68f0:	mov	w4, w28
    68f4:	cmp	w0, #0x7
    68f8:	b.le	6938 <BZ2_compressBlock@@Base+0x1d34>
    68fc:	ldrsw	x0, [x26, #116]
    6900:	ldr	x1, [x26, #80]
    6904:	ldrb	w3, [x26, #643]
    6908:	strb	w3, [x1, x0]
    690c:	ldr	w0, [x26, #116]
    6910:	add	w0, w0, #0x1
    6914:	str	w0, [x26, #116]
    6918:	ldr	w0, [x26, #640]
    691c:	lsl	w0, w0, #8
    6920:	str	w0, [x26, #640]
    6924:	ldr	w0, [x26, #644]
    6928:	sub	w0, w0, #0x8
    692c:	str	w0, [x26, #644]
    6930:	cmp	w0, #0x7
    6934:	b.gt	68fc <BZ2_compressBlock@@Base+0x1cf8>
    6938:	mov	w1, #0x11                  	// #17
    693c:	sub	w1, w1, w0
    6940:	lsl	w1, w4, w1
    6944:	ldr	w3, [x26, #640]
    6948:	orr	w1, w3, w1
    694c:	str	w1, [x26, #640]
    6950:	add	w0, w0, #0xf
    6954:	str	w0, [x26, #644]
    6958:	cmp	w28, #0x0
    695c:	b.le	6a88 <BZ2_compressBlock@@Base+0x1e84>
    6960:	add	x1, x26, #0x4, lsl #12
    6964:	add	x1, x1, #0xcfa
    6968:	add	x5, x26, #0x4, lsl #12
    696c:	add	x5, x5, #0xcfb
    6970:	sub	w4, w4, #0x1
    6974:	add	x5, x5, x4
    6978:	mov	w6, #0x80000000            	// #-2147483648
    697c:	b	6a74 <BZ2_compressBlock@@Base+0x1e70>
    6980:	ldr	w0, [x26, #116]
    6984:	sub	w2, w0, w2
    6988:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    698c:	add	x1, x1, #0x570
    6990:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    6994:	ldr	x0, [x0, #4016]
    6998:	ldr	x0, [x0]
    699c:	bl	16e0 <fprintf@plt>
    69a0:	b	6880 <BZ2_compressBlock@@Base+0x1c7c>
    69a4:	ldrsw	x0, [x26, #116]
    69a8:	ldr	x4, [x26, #80]
    69ac:	ldrb	w8, [x26, #643]
    69b0:	strb	w8, [x4, x0]
    69b4:	ldr	w0, [x26, #116]
    69b8:	add	w0, w0, #0x1
    69bc:	str	w0, [x26, #116]
    69c0:	ldr	w0, [x26, #640]
    69c4:	lsl	w0, w0, #8
    69c8:	str	w0, [x26, #640]
    69cc:	ldr	w0, [x26, #644]
    69d0:	sub	w0, w0, #0x8
    69d4:	str	w0, [x26, #644]
    69d8:	cmp	w0, #0x7
    69dc:	b.gt	69a4 <BZ2_compressBlock@@Base+0x1da0>
    69e0:	lsr	w8, w6, w0
    69e4:	ldr	w4, [x26, #640]
    69e8:	orr	w4, w4, w8
    69ec:	str	w4, [x26, #640]
    69f0:	add	w0, w0, #0x1
    69f4:	str	w0, [x26, #644]
    69f8:	add	w3, w3, #0x1
    69fc:	ldrb	w0, [x7]
    6a00:	cmp	w3, w0
    6a04:	b.ge	6a18 <BZ2_compressBlock@@Base+0x1e14>  // b.tcont
    6a08:	ldr	w0, [x26, #644]
    6a0c:	cmp	w0, #0x7
    6a10:	b.gt	69a4 <BZ2_compressBlock@@Base+0x1da0>
    6a14:	b	69e0 <BZ2_compressBlock@@Base+0x1ddc>
    6a18:	ldr	w0, [x26, #644]
    6a1c:	cmp	w0, #0x7
    6a20:	b.le	6a60 <BZ2_compressBlock@@Base+0x1e5c>
    6a24:	ldrsw	x0, [x26, #116]
    6a28:	ldr	x3, [x26, #80]
    6a2c:	ldrb	w4, [x26, #643]
    6a30:	strb	w4, [x3, x0]
    6a34:	ldr	w0, [x26, #116]
    6a38:	add	w0, w0, #0x1
    6a3c:	str	w0, [x26, #116]
    6a40:	ldr	w0, [x26, #640]
    6a44:	lsl	w0, w0, #8
    6a48:	str	w0, [x26, #640]
    6a4c:	ldr	w0, [x26, #644]
    6a50:	sub	w0, w0, #0x8
    6a54:	str	w0, [x26, #644]
    6a58:	cmp	w0, #0x7
    6a5c:	b.gt	6a24 <BZ2_compressBlock@@Base+0x1e20>
    6a60:	add	w0, w0, #0x1
    6a64:	str	w0, [x26, #644]
    6a68:	add	x1, x1, #0x1
    6a6c:	cmp	x5, x1
    6a70:	b.eq	6a88 <BZ2_compressBlock@@Base+0x1e84>  // b.none
    6a74:	mov	x7, x1
    6a78:	ldrb	w0, [x1]
    6a7c:	ldr	w3, [sp, #120]
    6a80:	cbnz	w0, 6a08 <BZ2_compressBlock@@Base+0x1e04>
    6a84:	b	6a18 <BZ2_compressBlock@@Base+0x1e14>
    6a88:	ldr	w0, [x26, #656]
    6a8c:	cmp	w0, #0x2
    6a90:	b.gt	6ac0 <BZ2_compressBlock@@Base+0x1ebc>
    6a94:	ldr	w2, [x26, #116]
    6a98:	mov	w7, #0x1b                  	// #27
    6a9c:	ldr	w0, [sp, #492]
    6aa0:	add	w4, w0, #0x1
    6aa4:	mov	w5, #0x1e                  	// #30
    6aa8:	mov	w8, #0x2                   	// #2
    6aac:	mov	w6, #0x3                   	// #3
    6ab0:	add	x4, x4, #0x1
    6ab4:	ldr	w11, [sp, #152]
    6ab8:	ldr	x3, [sp, #256]
    6abc:	b	6c5c <BZ2_compressBlock@@Base+0x2058>
    6ac0:	ldr	w0, [x26, #116]
    6ac4:	sub	w2, w0, w2
    6ac8:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    6acc:	add	x1, x1, #0x590
    6ad0:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    6ad4:	ldr	x0, [x0, #4016]
    6ad8:	ldr	x0, [x0]
    6adc:	bl	16e0 <fprintf@plt>
    6ae0:	b	6a94 <BZ2_compressBlock@@Base+0x1e90>
    6ae4:	sub	w13, w5, w0
    6ae8:	lsl	w14, w8, w13
    6aec:	ldr	w13, [x26, #640]
    6af0:	orr	w13, w13, w14
    6af4:	str	w13, [x26, #640]
    6af8:	add	w0, w0, #0x2
    6afc:	str	w0, [x26, #644]
    6b00:	add	w1, w1, #0x1
    6b04:	ldrb	w0, [x10]
    6b08:	cmp	w1, w0
    6b0c:	b.ge	6b5c <BZ2_compressBlock@@Base+0x1f58>  // b.tcont
    6b10:	ldr	w0, [x26, #644]
    6b14:	cmp	w0, #0x7
    6b18:	b.le	6ae4 <BZ2_compressBlock@@Base+0x1ee0>
    6b1c:	ldrsw	x0, [x26, #116]
    6b20:	ldr	x13, [x26, #80]
    6b24:	ldrb	w14, [x26, #643]
    6b28:	strb	w14, [x13, x0]
    6b2c:	ldr	w0, [x26, #116]
    6b30:	add	w0, w0, #0x1
    6b34:	str	w0, [x26, #116]
    6b38:	ldr	w0, [x26, #640]
    6b3c:	lsl	w0, w0, #8
    6b40:	str	w0, [x26, #640]
    6b44:	ldr	w0, [x26, #644]
    6b48:	sub	w0, w0, #0x8
    6b4c:	str	w0, [x26, #644]
    6b50:	cmp	w0, #0x7
    6b54:	b.gt	6b1c <BZ2_compressBlock@@Base+0x1f18>
    6b58:	b	6ae4 <BZ2_compressBlock@@Base+0x1ee0>
    6b5c:	ldrb	w0, [x10]
    6b60:	cmp	w0, w1
    6b64:	b.lt	6c04 <BZ2_compressBlock@@Base+0x2000>  // b.tstop
    6b68:	ldr	w0, [x26, #644]
    6b6c:	cmp	w0, #0x7
    6b70:	b.le	6bb0 <BZ2_compressBlock@@Base+0x1fac>
    6b74:	ldrsw	x0, [x26, #116]
    6b78:	ldr	x10, [x26, #80]
    6b7c:	ldrb	w13, [x26, #643]
    6b80:	strb	w13, [x10, x0]
    6b84:	ldr	w0, [x26, #116]
    6b88:	add	w0, w0, #0x1
    6b8c:	str	w0, [x26, #116]
    6b90:	ldr	w0, [x26, #640]
    6b94:	lsl	w0, w0, #8
    6b98:	str	w0, [x26, #640]
    6b9c:	ldr	w0, [x26, #644]
    6ba0:	sub	w0, w0, #0x8
    6ba4:	str	w0, [x26, #644]
    6ba8:	cmp	w0, #0x7
    6bac:	b.gt	6b74 <BZ2_compressBlock@@Base+0x1f70>
    6bb0:	add	w0, w0, #0x1
    6bb4:	str	w0, [x26, #644]
    6bb8:	add	x9, x9, #0x1
    6bbc:	cmp	x9, x12
    6bc0:	b.eq	6c50 <BZ2_compressBlock@@Base+0x204c>  // b.none
    6bc4:	mov	x10, x9
    6bc8:	ldrb	w0, [x9]
    6bcc:	cmp	w0, w1
    6bd0:	b.gt	6b10 <BZ2_compressBlock@@Base+0x1f0c>
    6bd4:	b	6b5c <BZ2_compressBlock@@Base+0x1f58>
    6bd8:	sub	w13, w5, w0
    6bdc:	lsl	w14, w6, w13
    6be0:	ldr	w13, [x26, #640]
    6be4:	orr	w13, w13, w14
    6be8:	str	w13, [x26, #640]
    6bec:	add	w0, w0, #0x2
    6bf0:	str	w0, [x26, #644]
    6bf4:	sub	w1, w1, #0x1
    6bf8:	ldrb	w0, [x10]
    6bfc:	cmp	w1, w0
    6c00:	b.le	6b68 <BZ2_compressBlock@@Base+0x1f64>
    6c04:	ldr	w0, [x26, #644]
    6c08:	cmp	w0, #0x7
    6c0c:	b.le	6bd8 <BZ2_compressBlock@@Base+0x1fd4>
    6c10:	ldrsw	x0, [x26, #116]
    6c14:	ldr	x13, [x26, #80]
    6c18:	ldrb	w14, [x26, #643]
    6c1c:	strb	w14, [x13, x0]
    6c20:	ldr	w0, [x26, #116]
    6c24:	add	w0, w0, #0x1
    6c28:	str	w0, [x26, #116]
    6c2c:	ldr	w0, [x26, #640]
    6c30:	lsl	w0, w0, #8
    6c34:	str	w0, [x26, #640]
    6c38:	ldr	w0, [x26, #644]
    6c3c:	sub	w0, w0, #0x8
    6c40:	str	w0, [x26, #644]
    6c44:	cmp	w0, #0x7
    6c48:	b.gt	6c10 <BZ2_compressBlock@@Base+0x200c>
    6c4c:	b	6bd8 <BZ2_compressBlock@@Base+0x1fd4>
    6c50:	add	x3, x3, #0x102
    6c54:	cmp	x3, x23
    6c58:	b.eq	6cdc <BZ2_compressBlock@@Base+0x20d8>  // b.none
    6c5c:	ldrb	w1, [x3]
    6c60:	mov	w9, w1
    6c64:	ldr	w0, [x26, #644]
    6c68:	cmp	w0, #0x7
    6c6c:	b.le	6cac <BZ2_compressBlock@@Base+0x20a8>
    6c70:	ldrsw	x0, [x26, #116]
    6c74:	ldr	x10, [x26, #80]
    6c78:	ldrb	w12, [x26, #643]
    6c7c:	strb	w12, [x10, x0]
    6c80:	ldr	w0, [x26, #116]
    6c84:	add	w0, w0, #0x1
    6c88:	str	w0, [x26, #116]
    6c8c:	ldr	w0, [x26, #640]
    6c90:	lsl	w0, w0, #8
    6c94:	str	w0, [x26, #640]
    6c98:	ldr	w0, [x26, #644]
    6c9c:	sub	w0, w0, #0x8
    6ca0:	str	w0, [x26, #644]
    6ca4:	cmp	w0, #0x7
    6ca8:	b.gt	6c70 <BZ2_compressBlock@@Base+0x206c>
    6cac:	sub	w10, w7, w0
    6cb0:	lsl	w10, w9, w10
    6cb4:	ldr	w9, [x26, #640]
    6cb8:	orr	w9, w9, w10
    6cbc:	str	w9, [x26, #640]
    6cc0:	add	w0, w0, #0x5
    6cc4:	str	w0, [x26, #644]
    6cc8:	cmp	w11, #0x0
    6ccc:	b.le	6c50 <BZ2_compressBlock@@Base+0x204c>
    6cd0:	mov	x9, x3
    6cd4:	add	x12, x4, x3
    6cd8:	b	6bc4 <BZ2_compressBlock@@Base+0x1fc0>
    6cdc:	ldr	w0, [x26, #656]
    6ce0:	cmp	w0, #0x2
    6ce4:	b.gt	6d1c <BZ2_compressBlock@@Base+0x2118>
    6ce8:	ldr	w0, [x26, #116]
    6cec:	str	w0, [sp, #128]
    6cf0:	ldr	w0, [x26, #668]
    6cf4:	cmp	w0, #0x0
    6cf8:	b.le	8550 <BZ2_compressBlock@@Base+0x394c>
    6cfc:	mov	x22, #0x1                   	// #1
    6d00:	add	x23, x26, #0x6a7
    6d04:	mov	x24, #0x2654                	// #9812
    6d08:	mov	w19, #0x20                  	// #32
    6d0c:	mov	x25, #0x934c                	// #37708
    6d10:	ldr	w20, [sp, #120]
    6d14:	str	w28, [sp, #120]
    6d18:	b	8434 <BZ2_compressBlock@@Base+0x3830>
    6d1c:	ldr	w0, [x26, #116]
    6d20:	sub	w2, w0, w2
    6d24:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    6d28:	add	x1, x1, #0x5a0
    6d2c:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    6d30:	ldr	x0, [x0, #4016]
    6d34:	ldr	x0, [x0]
    6d38:	bl	16e0 <fprintf@plt>
    6d3c:	b	6ce8 <BZ2_compressBlock@@Base+0x20e4>
    6d40:	mov	w0, #0xbbe                 	// #3006
    6d44:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    6d48:	b	8450 <BZ2_compressBlock@@Base+0x384c>
    6d4c:	ldrb	w2, [x23, x22]
    6d50:	lsl	x0, x2, #7
    6d54:	add	x1, x0, x2
    6d58:	add	x1, x25, x1, lsl #1
    6d5c:	add	x1, x26, x1
    6d60:	add	x0, x0, x2
    6d64:	add	x0, x26, x0, lsl #3
    6d68:	add	x0, x0, #0x9, lsl #12
    6d6c:	add	x0, x0, #0x958
    6d70:	sbfiz	x20, x20, #1, #32
    6d74:	ldrh	w3, [x27, x20]
    6d78:	ldrb	w2, [x1, x3]
    6d7c:	ldr	w4, [x0, x3, lsl #2]
    6d80:	ldr	w3, [x26, #644]
    6d84:	cmp	w3, #0x7
    6d88:	b.le	6dc8 <BZ2_compressBlock@@Base+0x21c4>
    6d8c:	ldrsw	x3, [x26, #116]
    6d90:	ldr	x5, [x26, #80]
    6d94:	ldrb	w6, [x26, #643]
    6d98:	strb	w6, [x5, x3]
    6d9c:	ldr	w3, [x26, #116]
    6da0:	add	w3, w3, #0x1
    6da4:	str	w3, [x26, #116]
    6da8:	ldr	w3, [x26, #640]
    6dac:	lsl	w3, w3, #8
    6db0:	str	w3, [x26, #640]
    6db4:	ldr	w3, [x26, #644]
    6db8:	sub	w3, w3, #0x8
    6dbc:	str	w3, [x26, #644]
    6dc0:	cmp	w3, #0x7
    6dc4:	b.gt	6d8c <BZ2_compressBlock@@Base+0x2188>
    6dc8:	sub	w5, w19, w3
    6dcc:	sub	w5, w5, w2
    6dd0:	lsl	w5, w4, w5
    6dd4:	ldr	w4, [x26, #640]
    6dd8:	orr	w4, w4, w5
    6ddc:	str	w4, [x26, #640]
    6de0:	add	w2, w2, w3
    6de4:	str	w2, [x26, #644]
    6de8:	add	x3, x27, x20
    6dec:	ldrh	w4, [x3, #2]
    6df0:	ldrb	w3, [x1, x4]
    6df4:	ldr	w4, [x0, x4, lsl #2]
    6df8:	cmp	w2, #0x7
    6dfc:	b.le	6e3c <BZ2_compressBlock@@Base+0x2238>
    6e00:	ldrsw	x2, [x26, #116]
    6e04:	ldr	x5, [x26, #80]
    6e08:	ldrb	w6, [x26, #643]
    6e0c:	strb	w6, [x5, x2]
    6e10:	ldr	w2, [x26, #116]
    6e14:	add	w2, w2, #0x1
    6e18:	str	w2, [x26, #116]
    6e1c:	ldr	w2, [x26, #640]
    6e20:	lsl	w2, w2, #8
    6e24:	str	w2, [x26, #640]
    6e28:	ldr	w2, [x26, #644]
    6e2c:	sub	w2, w2, #0x8
    6e30:	str	w2, [x26, #644]
    6e34:	cmp	w2, #0x7
    6e38:	b.gt	6e00 <BZ2_compressBlock@@Base+0x21fc>
    6e3c:	sub	w5, w19, w2
    6e40:	sub	w5, w5, w3
    6e44:	lsl	w5, w4, w5
    6e48:	ldr	w4, [x26, #640]
    6e4c:	orr	w4, w4, w5
    6e50:	str	w4, [x26, #640]
    6e54:	add	w2, w3, w2
    6e58:	str	w2, [x26, #644]
    6e5c:	add	x3, x27, x20
    6e60:	ldrh	w4, [x3, #4]
    6e64:	ldrb	w3, [x1, x4]
    6e68:	ldr	w4, [x0, x4, lsl #2]
    6e6c:	cmp	w2, #0x7
    6e70:	b.le	6eb0 <BZ2_compressBlock@@Base+0x22ac>
    6e74:	ldrsw	x2, [x26, #116]
    6e78:	ldr	x5, [x26, #80]
    6e7c:	ldrb	w6, [x26, #643]
    6e80:	strb	w6, [x5, x2]
    6e84:	ldr	w2, [x26, #116]
    6e88:	add	w2, w2, #0x1
    6e8c:	str	w2, [x26, #116]
    6e90:	ldr	w2, [x26, #640]
    6e94:	lsl	w2, w2, #8
    6e98:	str	w2, [x26, #640]
    6e9c:	ldr	w2, [x26, #644]
    6ea0:	sub	w2, w2, #0x8
    6ea4:	str	w2, [x26, #644]
    6ea8:	cmp	w2, #0x7
    6eac:	b.gt	6e74 <BZ2_compressBlock@@Base+0x2270>
    6eb0:	sub	w5, w19, w2
    6eb4:	sub	w5, w5, w3
    6eb8:	lsl	w5, w4, w5
    6ebc:	ldr	w4, [x26, #640]
    6ec0:	orr	w4, w4, w5
    6ec4:	str	w4, [x26, #640]
    6ec8:	add	w3, w3, w2
    6ecc:	str	w3, [x26, #644]
    6ed0:	add	x2, x27, x20
    6ed4:	ldrh	w4, [x2, #6]
    6ed8:	ldrb	w2, [x1, x4]
    6edc:	ldr	w4, [x0, x4, lsl #2]
    6ee0:	cmp	w3, #0x7
    6ee4:	b.le	6f24 <BZ2_compressBlock@@Base+0x2320>
    6ee8:	ldrsw	x3, [x26, #116]
    6eec:	ldr	x5, [x26, #80]
    6ef0:	ldrb	w6, [x26, #643]
    6ef4:	strb	w6, [x5, x3]
    6ef8:	ldr	w3, [x26, #116]
    6efc:	add	w3, w3, #0x1
    6f00:	str	w3, [x26, #116]
    6f04:	ldr	w3, [x26, #640]
    6f08:	lsl	w3, w3, #8
    6f0c:	str	w3, [x26, #640]
    6f10:	ldr	w3, [x26, #644]
    6f14:	sub	w3, w3, #0x8
    6f18:	str	w3, [x26, #644]
    6f1c:	cmp	w3, #0x7
    6f20:	b.gt	6ee8 <BZ2_compressBlock@@Base+0x22e4>
    6f24:	sub	w5, w19, w3
    6f28:	sub	w5, w5, w2
    6f2c:	lsl	w5, w4, w5
    6f30:	ldr	w4, [x26, #640]
    6f34:	orr	w4, w4, w5
    6f38:	str	w4, [x26, #640]
    6f3c:	add	w3, w2, w3
    6f40:	str	w3, [x26, #644]
    6f44:	add	x2, x27, x20
    6f48:	ldrh	w4, [x2, #8]
    6f4c:	ldrb	w2, [x1, x4]
    6f50:	ldr	w4, [x0, x4, lsl #2]
    6f54:	cmp	w3, #0x7
    6f58:	b.le	6f98 <BZ2_compressBlock@@Base+0x2394>
    6f5c:	ldrsw	x3, [x26, #116]
    6f60:	ldr	x5, [x26, #80]
    6f64:	ldrb	w6, [x26, #643]
    6f68:	strb	w6, [x5, x3]
    6f6c:	ldr	w3, [x26, #116]
    6f70:	add	w3, w3, #0x1
    6f74:	str	w3, [x26, #116]
    6f78:	ldr	w3, [x26, #640]
    6f7c:	lsl	w3, w3, #8
    6f80:	str	w3, [x26, #640]
    6f84:	ldr	w3, [x26, #644]
    6f88:	sub	w3, w3, #0x8
    6f8c:	str	w3, [x26, #644]
    6f90:	cmp	w3, #0x7
    6f94:	b.gt	6f5c <BZ2_compressBlock@@Base+0x2358>
    6f98:	sub	w5, w19, w3
    6f9c:	sub	w5, w5, w2
    6fa0:	lsl	w5, w4, w5
    6fa4:	ldr	w4, [x26, #640]
    6fa8:	orr	w4, w4, w5
    6fac:	str	w4, [x26, #640]
    6fb0:	add	w2, w2, w3
    6fb4:	str	w2, [x26, #644]
    6fb8:	add	x3, x27, x20
    6fbc:	ldrh	w4, [x3, #10]
    6fc0:	ldrb	w3, [x1, x4]
    6fc4:	ldr	w4, [x0, x4, lsl #2]
    6fc8:	cmp	w2, #0x7
    6fcc:	b.le	700c <BZ2_compressBlock@@Base+0x2408>
    6fd0:	ldrsw	x2, [x26, #116]
    6fd4:	ldr	x5, [x26, #80]
    6fd8:	ldrb	w6, [x26, #643]
    6fdc:	strb	w6, [x5, x2]
    6fe0:	ldr	w2, [x26, #116]
    6fe4:	add	w2, w2, #0x1
    6fe8:	str	w2, [x26, #116]
    6fec:	ldr	w2, [x26, #640]
    6ff0:	lsl	w2, w2, #8
    6ff4:	str	w2, [x26, #640]
    6ff8:	ldr	w2, [x26, #644]
    6ffc:	sub	w2, w2, #0x8
    7000:	str	w2, [x26, #644]
    7004:	cmp	w2, #0x7
    7008:	b.gt	6fd0 <BZ2_compressBlock@@Base+0x23cc>
    700c:	sub	w5, w19, w2
    7010:	sub	w5, w5, w3
    7014:	lsl	w5, w4, w5
    7018:	ldr	w4, [x26, #640]
    701c:	orr	w4, w4, w5
    7020:	str	w4, [x26, #640]
    7024:	add	w2, w3, w2
    7028:	str	w2, [x26, #644]
    702c:	add	x3, x27, x20
    7030:	ldrh	w4, [x3, #12]
    7034:	ldrb	w3, [x1, x4]
    7038:	ldr	w4, [x0, x4, lsl #2]
    703c:	cmp	w2, #0x7
    7040:	b.le	7080 <BZ2_compressBlock@@Base+0x247c>
    7044:	ldrsw	x2, [x26, #116]
    7048:	ldr	x5, [x26, #80]
    704c:	ldrb	w6, [x26, #643]
    7050:	strb	w6, [x5, x2]
    7054:	ldr	w2, [x26, #116]
    7058:	add	w2, w2, #0x1
    705c:	str	w2, [x26, #116]
    7060:	ldr	w2, [x26, #640]
    7064:	lsl	w2, w2, #8
    7068:	str	w2, [x26, #640]
    706c:	ldr	w2, [x26, #644]
    7070:	sub	w2, w2, #0x8
    7074:	str	w2, [x26, #644]
    7078:	cmp	w2, #0x7
    707c:	b.gt	7044 <BZ2_compressBlock@@Base+0x2440>
    7080:	sub	w5, w19, w2
    7084:	sub	w5, w5, w3
    7088:	lsl	w5, w4, w5
    708c:	ldr	w4, [x26, #640]
    7090:	orr	w4, w4, w5
    7094:	str	w4, [x26, #640]
    7098:	add	w3, w3, w2
    709c:	str	w3, [x26, #644]
    70a0:	add	x2, x27, x20
    70a4:	ldrh	w4, [x2, #14]
    70a8:	ldrb	w2, [x1, x4]
    70ac:	ldr	w4, [x0, x4, lsl #2]
    70b0:	cmp	w3, #0x7
    70b4:	b.le	70f4 <BZ2_compressBlock@@Base+0x24f0>
    70b8:	ldrsw	x3, [x26, #116]
    70bc:	ldr	x5, [x26, #80]
    70c0:	ldrb	w6, [x26, #643]
    70c4:	strb	w6, [x5, x3]
    70c8:	ldr	w3, [x26, #116]
    70cc:	add	w3, w3, #0x1
    70d0:	str	w3, [x26, #116]
    70d4:	ldr	w3, [x26, #640]
    70d8:	lsl	w3, w3, #8
    70dc:	str	w3, [x26, #640]
    70e0:	ldr	w3, [x26, #644]
    70e4:	sub	w3, w3, #0x8
    70e8:	str	w3, [x26, #644]
    70ec:	cmp	w3, #0x7
    70f0:	b.gt	70b8 <BZ2_compressBlock@@Base+0x24b4>
    70f4:	sub	w5, w19, w3
    70f8:	sub	w5, w5, w2
    70fc:	lsl	w5, w4, w5
    7100:	ldr	w4, [x26, #640]
    7104:	orr	w4, w4, w5
    7108:	str	w4, [x26, #640]
    710c:	add	w3, w2, w3
    7110:	str	w3, [x26, #644]
    7114:	add	x2, x27, x20
    7118:	ldrh	w4, [x2, #16]
    711c:	ldrb	w2, [x1, x4]
    7120:	ldr	w4, [x0, x4, lsl #2]
    7124:	cmp	w3, #0x7
    7128:	b.le	7168 <BZ2_compressBlock@@Base+0x2564>
    712c:	ldrsw	x3, [x26, #116]
    7130:	ldr	x5, [x26, #80]
    7134:	ldrb	w6, [x26, #643]
    7138:	strb	w6, [x5, x3]
    713c:	ldr	w3, [x26, #116]
    7140:	add	w3, w3, #0x1
    7144:	str	w3, [x26, #116]
    7148:	ldr	w3, [x26, #640]
    714c:	lsl	w3, w3, #8
    7150:	str	w3, [x26, #640]
    7154:	ldr	w3, [x26, #644]
    7158:	sub	w3, w3, #0x8
    715c:	str	w3, [x26, #644]
    7160:	cmp	w3, #0x7
    7164:	b.gt	712c <BZ2_compressBlock@@Base+0x2528>
    7168:	sub	w5, w19, w3
    716c:	sub	w5, w5, w2
    7170:	lsl	w5, w4, w5
    7174:	ldr	w4, [x26, #640]
    7178:	orr	w4, w4, w5
    717c:	str	w4, [x26, #640]
    7180:	add	w2, w2, w3
    7184:	str	w2, [x26, #644]
    7188:	add	x3, x27, x20
    718c:	ldrh	w4, [x3, #18]
    7190:	ldrb	w3, [x1, x4]
    7194:	ldr	w4, [x0, x4, lsl #2]
    7198:	cmp	w2, #0x7
    719c:	b.le	71dc <BZ2_compressBlock@@Base+0x25d8>
    71a0:	ldrsw	x2, [x26, #116]
    71a4:	ldr	x5, [x26, #80]
    71a8:	ldrb	w6, [x26, #643]
    71ac:	strb	w6, [x5, x2]
    71b0:	ldr	w2, [x26, #116]
    71b4:	add	w2, w2, #0x1
    71b8:	str	w2, [x26, #116]
    71bc:	ldr	w2, [x26, #640]
    71c0:	lsl	w2, w2, #8
    71c4:	str	w2, [x26, #640]
    71c8:	ldr	w2, [x26, #644]
    71cc:	sub	w2, w2, #0x8
    71d0:	str	w2, [x26, #644]
    71d4:	cmp	w2, #0x7
    71d8:	b.gt	71a0 <BZ2_compressBlock@@Base+0x259c>
    71dc:	sub	w5, w19, w2
    71e0:	sub	w5, w5, w3
    71e4:	lsl	w5, w4, w5
    71e8:	ldr	w4, [x26, #640]
    71ec:	orr	w4, w4, w5
    71f0:	str	w4, [x26, #640]
    71f4:	add	w2, w3, w2
    71f8:	str	w2, [x26, #644]
    71fc:	add	x3, x27, x20
    7200:	ldrh	w4, [x3, #20]
    7204:	ldrb	w3, [x1, x4]
    7208:	ldr	w4, [x0, x4, lsl #2]
    720c:	cmp	w2, #0x7
    7210:	b.le	7250 <BZ2_compressBlock@@Base+0x264c>
    7214:	ldrsw	x2, [x26, #116]
    7218:	ldr	x5, [x26, #80]
    721c:	ldrb	w6, [x26, #643]
    7220:	strb	w6, [x5, x2]
    7224:	ldr	w2, [x26, #116]
    7228:	add	w2, w2, #0x1
    722c:	str	w2, [x26, #116]
    7230:	ldr	w2, [x26, #640]
    7234:	lsl	w2, w2, #8
    7238:	str	w2, [x26, #640]
    723c:	ldr	w2, [x26, #644]
    7240:	sub	w2, w2, #0x8
    7244:	str	w2, [x26, #644]
    7248:	cmp	w2, #0x7
    724c:	b.gt	7214 <BZ2_compressBlock@@Base+0x2610>
    7250:	sub	w5, w19, w2
    7254:	sub	w5, w5, w3
    7258:	lsl	w5, w4, w5
    725c:	ldr	w4, [x26, #640]
    7260:	orr	w4, w4, w5
    7264:	str	w4, [x26, #640]
    7268:	add	w3, w3, w2
    726c:	str	w3, [x26, #644]
    7270:	add	x2, x27, x20
    7274:	ldrh	w4, [x2, #22]
    7278:	ldrb	w2, [x1, x4]
    727c:	ldr	w4, [x0, x4, lsl #2]
    7280:	cmp	w3, #0x7
    7284:	b.le	72c4 <BZ2_compressBlock@@Base+0x26c0>
    7288:	ldrsw	x3, [x26, #116]
    728c:	ldr	x5, [x26, #80]
    7290:	ldrb	w6, [x26, #643]
    7294:	strb	w6, [x5, x3]
    7298:	ldr	w3, [x26, #116]
    729c:	add	w3, w3, #0x1
    72a0:	str	w3, [x26, #116]
    72a4:	ldr	w3, [x26, #640]
    72a8:	lsl	w3, w3, #8
    72ac:	str	w3, [x26, #640]
    72b0:	ldr	w3, [x26, #644]
    72b4:	sub	w3, w3, #0x8
    72b8:	str	w3, [x26, #644]
    72bc:	cmp	w3, #0x7
    72c0:	b.gt	7288 <BZ2_compressBlock@@Base+0x2684>
    72c4:	sub	w5, w19, w3
    72c8:	sub	w5, w5, w2
    72cc:	lsl	w5, w4, w5
    72d0:	ldr	w4, [x26, #640]
    72d4:	orr	w4, w4, w5
    72d8:	str	w4, [x26, #640]
    72dc:	add	w3, w2, w3
    72e0:	str	w3, [x26, #644]
    72e4:	add	x2, x27, x20
    72e8:	ldrh	w4, [x2, #24]
    72ec:	ldrb	w2, [x1, x4]
    72f0:	ldr	w4, [x0, x4, lsl #2]
    72f4:	cmp	w3, #0x7
    72f8:	b.le	7338 <BZ2_compressBlock@@Base+0x2734>
    72fc:	ldrsw	x3, [x26, #116]
    7300:	ldr	x5, [x26, #80]
    7304:	ldrb	w6, [x26, #643]
    7308:	strb	w6, [x5, x3]
    730c:	ldr	w3, [x26, #116]
    7310:	add	w3, w3, #0x1
    7314:	str	w3, [x26, #116]
    7318:	ldr	w3, [x26, #640]
    731c:	lsl	w3, w3, #8
    7320:	str	w3, [x26, #640]
    7324:	ldr	w3, [x26, #644]
    7328:	sub	w3, w3, #0x8
    732c:	str	w3, [x26, #644]
    7330:	cmp	w3, #0x7
    7334:	b.gt	72fc <BZ2_compressBlock@@Base+0x26f8>
    7338:	sub	w5, w19, w3
    733c:	sub	w5, w5, w2
    7340:	lsl	w5, w4, w5
    7344:	ldr	w4, [x26, #640]
    7348:	orr	w4, w4, w5
    734c:	str	w4, [x26, #640]
    7350:	add	w2, w2, w3
    7354:	str	w2, [x26, #644]
    7358:	add	x3, x27, x20
    735c:	ldrh	w4, [x3, #26]
    7360:	ldrb	w3, [x1, x4]
    7364:	ldr	w4, [x0, x4, lsl #2]
    7368:	cmp	w2, #0x7
    736c:	b.le	73ac <BZ2_compressBlock@@Base+0x27a8>
    7370:	ldrsw	x2, [x26, #116]
    7374:	ldr	x5, [x26, #80]
    7378:	ldrb	w6, [x26, #643]
    737c:	strb	w6, [x5, x2]
    7380:	ldr	w2, [x26, #116]
    7384:	add	w2, w2, #0x1
    7388:	str	w2, [x26, #116]
    738c:	ldr	w2, [x26, #640]
    7390:	lsl	w2, w2, #8
    7394:	str	w2, [x26, #640]
    7398:	ldr	w2, [x26, #644]
    739c:	sub	w2, w2, #0x8
    73a0:	str	w2, [x26, #644]
    73a4:	cmp	w2, #0x7
    73a8:	b.gt	7370 <BZ2_compressBlock@@Base+0x276c>
    73ac:	sub	w5, w19, w2
    73b0:	sub	w5, w5, w3
    73b4:	lsl	w5, w4, w5
    73b8:	ldr	w4, [x26, #640]
    73bc:	orr	w4, w4, w5
    73c0:	str	w4, [x26, #640]
    73c4:	add	w2, w3, w2
    73c8:	str	w2, [x26, #644]
    73cc:	add	x3, x27, x20
    73d0:	ldrh	w4, [x3, #28]
    73d4:	ldrb	w3, [x1, x4]
    73d8:	ldr	w4, [x0, x4, lsl #2]
    73dc:	cmp	w2, #0x7
    73e0:	b.le	7420 <BZ2_compressBlock@@Base+0x281c>
    73e4:	ldrsw	x2, [x26, #116]
    73e8:	ldr	x5, [x26, #80]
    73ec:	ldrb	w6, [x26, #643]
    73f0:	strb	w6, [x5, x2]
    73f4:	ldr	w2, [x26, #116]
    73f8:	add	w2, w2, #0x1
    73fc:	str	w2, [x26, #116]
    7400:	ldr	w2, [x26, #640]
    7404:	lsl	w2, w2, #8
    7408:	str	w2, [x26, #640]
    740c:	ldr	w2, [x26, #644]
    7410:	sub	w2, w2, #0x8
    7414:	str	w2, [x26, #644]
    7418:	cmp	w2, #0x7
    741c:	b.gt	73e4 <BZ2_compressBlock@@Base+0x27e0>
    7420:	sub	w5, w19, w2
    7424:	sub	w5, w5, w3
    7428:	lsl	w5, w4, w5
    742c:	ldr	w4, [x26, #640]
    7430:	orr	w4, w4, w5
    7434:	str	w4, [x26, #640]
    7438:	add	w3, w3, w2
    743c:	str	w3, [x26, #644]
    7440:	add	x2, x27, x20
    7444:	ldrh	w4, [x2, #30]
    7448:	ldrb	w2, [x1, x4]
    744c:	ldr	w4, [x0, x4, lsl #2]
    7450:	cmp	w3, #0x7
    7454:	b.le	7494 <BZ2_compressBlock@@Base+0x2890>
    7458:	ldrsw	x3, [x26, #116]
    745c:	ldr	x5, [x26, #80]
    7460:	ldrb	w6, [x26, #643]
    7464:	strb	w6, [x5, x3]
    7468:	ldr	w3, [x26, #116]
    746c:	add	w3, w3, #0x1
    7470:	str	w3, [x26, #116]
    7474:	ldr	w3, [x26, #640]
    7478:	lsl	w3, w3, #8
    747c:	str	w3, [x26, #640]
    7480:	ldr	w3, [x26, #644]
    7484:	sub	w3, w3, #0x8
    7488:	str	w3, [x26, #644]
    748c:	cmp	w3, #0x7
    7490:	b.gt	7458 <BZ2_compressBlock@@Base+0x2854>
    7494:	sub	w5, w19, w3
    7498:	sub	w5, w5, w2
    749c:	lsl	w5, w4, w5
    74a0:	ldr	w4, [x26, #640]
    74a4:	orr	w4, w4, w5
    74a8:	str	w4, [x26, #640]
    74ac:	add	w3, w2, w3
    74b0:	str	w3, [x26, #644]
    74b4:	add	x2, x27, x20
    74b8:	ldrh	w4, [x2, #32]
    74bc:	ldrb	w2, [x1, x4]
    74c0:	ldr	w4, [x0, x4, lsl #2]
    74c4:	cmp	w3, #0x7
    74c8:	b.le	7508 <BZ2_compressBlock@@Base+0x2904>
    74cc:	ldrsw	x3, [x26, #116]
    74d0:	ldr	x5, [x26, #80]
    74d4:	ldrb	w6, [x26, #643]
    74d8:	strb	w6, [x5, x3]
    74dc:	ldr	w3, [x26, #116]
    74e0:	add	w3, w3, #0x1
    74e4:	str	w3, [x26, #116]
    74e8:	ldr	w3, [x26, #640]
    74ec:	lsl	w3, w3, #8
    74f0:	str	w3, [x26, #640]
    74f4:	ldr	w3, [x26, #644]
    74f8:	sub	w3, w3, #0x8
    74fc:	str	w3, [x26, #644]
    7500:	cmp	w3, #0x7
    7504:	b.gt	74cc <BZ2_compressBlock@@Base+0x28c8>
    7508:	sub	w5, w19, w3
    750c:	sub	w5, w5, w2
    7510:	lsl	w5, w4, w5
    7514:	ldr	w4, [x26, #640]
    7518:	orr	w4, w4, w5
    751c:	str	w4, [x26, #640]
    7520:	add	w2, w2, w3
    7524:	str	w2, [x26, #644]
    7528:	add	x3, x27, x20
    752c:	ldrh	w4, [x3, #34]
    7530:	ldrb	w3, [x1, x4]
    7534:	ldr	w4, [x0, x4, lsl #2]
    7538:	cmp	w2, #0x7
    753c:	b.le	757c <BZ2_compressBlock@@Base+0x2978>
    7540:	ldrsw	x2, [x26, #116]
    7544:	ldr	x5, [x26, #80]
    7548:	ldrb	w6, [x26, #643]
    754c:	strb	w6, [x5, x2]
    7550:	ldr	w2, [x26, #116]
    7554:	add	w2, w2, #0x1
    7558:	str	w2, [x26, #116]
    755c:	ldr	w2, [x26, #640]
    7560:	lsl	w2, w2, #8
    7564:	str	w2, [x26, #640]
    7568:	ldr	w2, [x26, #644]
    756c:	sub	w2, w2, #0x8
    7570:	str	w2, [x26, #644]
    7574:	cmp	w2, #0x7
    7578:	b.gt	7540 <BZ2_compressBlock@@Base+0x293c>
    757c:	sub	w5, w19, w2
    7580:	sub	w5, w5, w3
    7584:	lsl	w5, w4, w5
    7588:	ldr	w4, [x26, #640]
    758c:	orr	w4, w4, w5
    7590:	str	w4, [x26, #640]
    7594:	add	w2, w3, w2
    7598:	str	w2, [x26, #644]
    759c:	add	x3, x27, x20
    75a0:	ldrh	w4, [x3, #36]
    75a4:	ldrb	w3, [x1, x4]
    75a8:	ldr	w4, [x0, x4, lsl #2]
    75ac:	cmp	w2, #0x7
    75b0:	b.le	75f0 <BZ2_compressBlock@@Base+0x29ec>
    75b4:	ldrsw	x2, [x26, #116]
    75b8:	ldr	x5, [x26, #80]
    75bc:	ldrb	w6, [x26, #643]
    75c0:	strb	w6, [x5, x2]
    75c4:	ldr	w2, [x26, #116]
    75c8:	add	w2, w2, #0x1
    75cc:	str	w2, [x26, #116]
    75d0:	ldr	w2, [x26, #640]
    75d4:	lsl	w2, w2, #8
    75d8:	str	w2, [x26, #640]
    75dc:	ldr	w2, [x26, #644]
    75e0:	sub	w2, w2, #0x8
    75e4:	str	w2, [x26, #644]
    75e8:	cmp	w2, #0x7
    75ec:	b.gt	75b4 <BZ2_compressBlock@@Base+0x29b0>
    75f0:	sub	w5, w19, w2
    75f4:	sub	w5, w5, w3
    75f8:	lsl	w5, w4, w5
    75fc:	ldr	w4, [x26, #640]
    7600:	orr	w4, w4, w5
    7604:	str	w4, [x26, #640]
    7608:	add	w3, w3, w2
    760c:	str	w3, [x26, #644]
    7610:	add	x2, x27, x20
    7614:	ldrh	w4, [x2, #38]
    7618:	ldrb	w2, [x1, x4]
    761c:	ldr	w4, [x0, x4, lsl #2]
    7620:	cmp	w3, #0x7
    7624:	b.le	7664 <BZ2_compressBlock@@Base+0x2a60>
    7628:	ldrsw	x3, [x26, #116]
    762c:	ldr	x5, [x26, #80]
    7630:	ldrb	w6, [x26, #643]
    7634:	strb	w6, [x5, x3]
    7638:	ldr	w3, [x26, #116]
    763c:	add	w3, w3, #0x1
    7640:	str	w3, [x26, #116]
    7644:	ldr	w3, [x26, #640]
    7648:	lsl	w3, w3, #8
    764c:	str	w3, [x26, #640]
    7650:	ldr	w3, [x26, #644]
    7654:	sub	w3, w3, #0x8
    7658:	str	w3, [x26, #644]
    765c:	cmp	w3, #0x7
    7660:	b.gt	7628 <BZ2_compressBlock@@Base+0x2a24>
    7664:	sub	w5, w19, w3
    7668:	sub	w5, w5, w2
    766c:	lsl	w5, w4, w5
    7670:	ldr	w4, [x26, #640]
    7674:	orr	w4, w4, w5
    7678:	str	w4, [x26, #640]
    767c:	add	w3, w2, w3
    7680:	str	w3, [x26, #644]
    7684:	add	x2, x27, x20
    7688:	ldrh	w4, [x2, #40]
    768c:	ldrb	w2, [x1, x4]
    7690:	ldr	w4, [x0, x4, lsl #2]
    7694:	cmp	w3, #0x7
    7698:	b.le	76d8 <BZ2_compressBlock@@Base+0x2ad4>
    769c:	ldrsw	x3, [x26, #116]
    76a0:	ldr	x5, [x26, #80]
    76a4:	ldrb	w6, [x26, #643]
    76a8:	strb	w6, [x5, x3]
    76ac:	ldr	w3, [x26, #116]
    76b0:	add	w3, w3, #0x1
    76b4:	str	w3, [x26, #116]
    76b8:	ldr	w3, [x26, #640]
    76bc:	lsl	w3, w3, #8
    76c0:	str	w3, [x26, #640]
    76c4:	ldr	w3, [x26, #644]
    76c8:	sub	w3, w3, #0x8
    76cc:	str	w3, [x26, #644]
    76d0:	cmp	w3, #0x7
    76d4:	b.gt	769c <BZ2_compressBlock@@Base+0x2a98>
    76d8:	sub	w5, w19, w3
    76dc:	sub	w5, w5, w2
    76e0:	lsl	w5, w4, w5
    76e4:	ldr	w4, [x26, #640]
    76e8:	orr	w4, w4, w5
    76ec:	str	w4, [x26, #640]
    76f0:	add	w2, w2, w3
    76f4:	str	w2, [x26, #644]
    76f8:	add	x3, x27, x20
    76fc:	ldrh	w4, [x3, #42]
    7700:	ldrb	w3, [x1, x4]
    7704:	ldr	w4, [x0, x4, lsl #2]
    7708:	cmp	w2, #0x7
    770c:	b.le	774c <BZ2_compressBlock@@Base+0x2b48>
    7710:	ldrsw	x2, [x26, #116]
    7714:	ldr	x5, [x26, #80]
    7718:	ldrb	w6, [x26, #643]
    771c:	strb	w6, [x5, x2]
    7720:	ldr	w2, [x26, #116]
    7724:	add	w2, w2, #0x1
    7728:	str	w2, [x26, #116]
    772c:	ldr	w2, [x26, #640]
    7730:	lsl	w2, w2, #8
    7734:	str	w2, [x26, #640]
    7738:	ldr	w2, [x26, #644]
    773c:	sub	w2, w2, #0x8
    7740:	str	w2, [x26, #644]
    7744:	cmp	w2, #0x7
    7748:	b.gt	7710 <BZ2_compressBlock@@Base+0x2b0c>
    774c:	sub	w5, w19, w2
    7750:	sub	w5, w5, w3
    7754:	lsl	w5, w4, w5
    7758:	ldr	w4, [x26, #640]
    775c:	orr	w4, w4, w5
    7760:	str	w4, [x26, #640]
    7764:	add	w2, w3, w2
    7768:	str	w2, [x26, #644]
    776c:	add	x3, x27, x20
    7770:	ldrh	w4, [x3, #44]
    7774:	ldrb	w3, [x1, x4]
    7778:	ldr	w4, [x0, x4, lsl #2]
    777c:	cmp	w2, #0x7
    7780:	b.le	77c0 <BZ2_compressBlock@@Base+0x2bbc>
    7784:	ldrsw	x2, [x26, #116]
    7788:	ldr	x5, [x26, #80]
    778c:	ldrb	w6, [x26, #643]
    7790:	strb	w6, [x5, x2]
    7794:	ldr	w2, [x26, #116]
    7798:	add	w2, w2, #0x1
    779c:	str	w2, [x26, #116]
    77a0:	ldr	w2, [x26, #640]
    77a4:	lsl	w2, w2, #8
    77a8:	str	w2, [x26, #640]
    77ac:	ldr	w2, [x26, #644]
    77b0:	sub	w2, w2, #0x8
    77b4:	str	w2, [x26, #644]
    77b8:	cmp	w2, #0x7
    77bc:	b.gt	7784 <BZ2_compressBlock@@Base+0x2b80>
    77c0:	sub	w5, w19, w2
    77c4:	sub	w5, w5, w3
    77c8:	lsl	w5, w4, w5
    77cc:	ldr	w4, [x26, #640]
    77d0:	orr	w4, w4, w5
    77d4:	str	w4, [x26, #640]
    77d8:	add	w3, w3, w2
    77dc:	str	w3, [x26, #644]
    77e0:	add	x2, x27, x20
    77e4:	ldrh	w4, [x2, #46]
    77e8:	ldrb	w2, [x1, x4]
    77ec:	ldr	w4, [x0, x4, lsl #2]
    77f0:	cmp	w3, #0x7
    77f4:	b.le	7834 <BZ2_compressBlock@@Base+0x2c30>
    77f8:	ldrsw	x3, [x26, #116]
    77fc:	ldr	x5, [x26, #80]
    7800:	ldrb	w6, [x26, #643]
    7804:	strb	w6, [x5, x3]
    7808:	ldr	w3, [x26, #116]
    780c:	add	w3, w3, #0x1
    7810:	str	w3, [x26, #116]
    7814:	ldr	w3, [x26, #640]
    7818:	lsl	w3, w3, #8
    781c:	str	w3, [x26, #640]
    7820:	ldr	w3, [x26, #644]
    7824:	sub	w3, w3, #0x8
    7828:	str	w3, [x26, #644]
    782c:	cmp	w3, #0x7
    7830:	b.gt	77f8 <BZ2_compressBlock@@Base+0x2bf4>
    7834:	sub	w5, w19, w3
    7838:	sub	w5, w5, w2
    783c:	lsl	w5, w4, w5
    7840:	ldr	w4, [x26, #640]
    7844:	orr	w4, w4, w5
    7848:	str	w4, [x26, #640]
    784c:	add	w3, w2, w3
    7850:	str	w3, [x26, #644]
    7854:	add	x2, x27, x20
    7858:	ldrh	w4, [x2, #48]
    785c:	ldrb	w2, [x1, x4]
    7860:	ldr	w4, [x0, x4, lsl #2]
    7864:	cmp	w3, #0x7
    7868:	b.le	78a8 <BZ2_compressBlock@@Base+0x2ca4>
    786c:	ldrsw	x3, [x26, #116]
    7870:	ldr	x5, [x26, #80]
    7874:	ldrb	w6, [x26, #643]
    7878:	strb	w6, [x5, x3]
    787c:	ldr	w3, [x26, #116]
    7880:	add	w3, w3, #0x1
    7884:	str	w3, [x26, #116]
    7888:	ldr	w3, [x26, #640]
    788c:	lsl	w3, w3, #8
    7890:	str	w3, [x26, #640]
    7894:	ldr	w3, [x26, #644]
    7898:	sub	w3, w3, #0x8
    789c:	str	w3, [x26, #644]
    78a0:	cmp	w3, #0x7
    78a4:	b.gt	786c <BZ2_compressBlock@@Base+0x2c68>
    78a8:	sub	w5, w19, w3
    78ac:	sub	w5, w5, w2
    78b0:	lsl	w5, w4, w5
    78b4:	ldr	w4, [x26, #640]
    78b8:	orr	w4, w4, w5
    78bc:	str	w4, [x26, #640]
    78c0:	add	w2, w2, w3
    78c4:	str	w2, [x26, #644]
    78c8:	add	x3, x27, x20
    78cc:	ldrh	w4, [x3, #50]
    78d0:	ldrb	w3, [x1, x4]
    78d4:	ldr	w4, [x0, x4, lsl #2]
    78d8:	cmp	w2, #0x7
    78dc:	b.le	791c <BZ2_compressBlock@@Base+0x2d18>
    78e0:	ldrsw	x2, [x26, #116]
    78e4:	ldr	x5, [x26, #80]
    78e8:	ldrb	w6, [x26, #643]
    78ec:	strb	w6, [x5, x2]
    78f0:	ldr	w2, [x26, #116]
    78f4:	add	w2, w2, #0x1
    78f8:	str	w2, [x26, #116]
    78fc:	ldr	w2, [x26, #640]
    7900:	lsl	w2, w2, #8
    7904:	str	w2, [x26, #640]
    7908:	ldr	w2, [x26, #644]
    790c:	sub	w2, w2, #0x8
    7910:	str	w2, [x26, #644]
    7914:	cmp	w2, #0x7
    7918:	b.gt	78e0 <BZ2_compressBlock@@Base+0x2cdc>
    791c:	sub	w5, w19, w2
    7920:	sub	w5, w5, w3
    7924:	lsl	w5, w4, w5
    7928:	ldr	w4, [x26, #640]
    792c:	orr	w4, w4, w5
    7930:	str	w4, [x26, #640]
    7934:	add	w2, w3, w2
    7938:	str	w2, [x26, #644]
    793c:	add	x3, x27, x20
    7940:	ldrh	w4, [x3, #52]
    7944:	ldrb	w3, [x1, x4]
    7948:	ldr	w4, [x0, x4, lsl #2]
    794c:	cmp	w2, #0x7
    7950:	b.le	7990 <BZ2_compressBlock@@Base+0x2d8c>
    7954:	ldrsw	x2, [x26, #116]
    7958:	ldr	x5, [x26, #80]
    795c:	ldrb	w6, [x26, #643]
    7960:	strb	w6, [x5, x2]
    7964:	ldr	w2, [x26, #116]
    7968:	add	w2, w2, #0x1
    796c:	str	w2, [x26, #116]
    7970:	ldr	w2, [x26, #640]
    7974:	lsl	w2, w2, #8
    7978:	str	w2, [x26, #640]
    797c:	ldr	w2, [x26, #644]
    7980:	sub	w2, w2, #0x8
    7984:	str	w2, [x26, #644]
    7988:	cmp	w2, #0x7
    798c:	b.gt	7954 <BZ2_compressBlock@@Base+0x2d50>
    7990:	sub	w5, w19, w2
    7994:	sub	w5, w5, w3
    7998:	lsl	w5, w4, w5
    799c:	ldr	w4, [x26, #640]
    79a0:	orr	w4, w4, w5
    79a4:	str	w4, [x26, #640]
    79a8:	add	w3, w3, w2
    79ac:	str	w3, [x26, #644]
    79b0:	add	x2, x27, x20
    79b4:	ldrh	w4, [x2, #54]
    79b8:	ldrb	w2, [x1, x4]
    79bc:	ldr	w4, [x0, x4, lsl #2]
    79c0:	cmp	w3, #0x7
    79c4:	b.le	7a04 <BZ2_compressBlock@@Base+0x2e00>
    79c8:	ldrsw	x3, [x26, #116]
    79cc:	ldr	x5, [x26, #80]
    79d0:	ldrb	w6, [x26, #643]
    79d4:	strb	w6, [x5, x3]
    79d8:	ldr	w3, [x26, #116]
    79dc:	add	w3, w3, #0x1
    79e0:	str	w3, [x26, #116]
    79e4:	ldr	w3, [x26, #640]
    79e8:	lsl	w3, w3, #8
    79ec:	str	w3, [x26, #640]
    79f0:	ldr	w3, [x26, #644]
    79f4:	sub	w3, w3, #0x8
    79f8:	str	w3, [x26, #644]
    79fc:	cmp	w3, #0x7
    7a00:	b.gt	79c8 <BZ2_compressBlock@@Base+0x2dc4>
    7a04:	sub	w5, w19, w3
    7a08:	sub	w5, w5, w2
    7a0c:	lsl	w5, w4, w5
    7a10:	ldr	w4, [x26, #640]
    7a14:	orr	w4, w4, w5
    7a18:	str	w4, [x26, #640]
    7a1c:	add	w3, w2, w3
    7a20:	str	w3, [x26, #644]
    7a24:	add	x2, x27, x20
    7a28:	ldrh	w4, [x2, #56]
    7a2c:	ldrb	w2, [x1, x4]
    7a30:	ldr	w4, [x0, x4, lsl #2]
    7a34:	cmp	w3, #0x7
    7a38:	b.le	7a78 <BZ2_compressBlock@@Base+0x2e74>
    7a3c:	ldrsw	x3, [x26, #116]
    7a40:	ldr	x5, [x26, #80]
    7a44:	ldrb	w6, [x26, #643]
    7a48:	strb	w6, [x5, x3]
    7a4c:	ldr	w3, [x26, #116]
    7a50:	add	w3, w3, #0x1
    7a54:	str	w3, [x26, #116]
    7a58:	ldr	w3, [x26, #640]
    7a5c:	lsl	w3, w3, #8
    7a60:	str	w3, [x26, #640]
    7a64:	ldr	w3, [x26, #644]
    7a68:	sub	w3, w3, #0x8
    7a6c:	str	w3, [x26, #644]
    7a70:	cmp	w3, #0x7
    7a74:	b.gt	7a3c <BZ2_compressBlock@@Base+0x2e38>
    7a78:	sub	w5, w19, w3
    7a7c:	sub	w5, w5, w2
    7a80:	lsl	w5, w4, w5
    7a84:	ldr	w4, [x26, #640]
    7a88:	orr	w4, w4, w5
    7a8c:	str	w4, [x26, #640]
    7a90:	add	w2, w2, w3
    7a94:	str	w2, [x26, #644]
    7a98:	add	x3, x27, x20
    7a9c:	ldrh	w4, [x3, #58]
    7aa0:	ldrb	w3, [x1, x4]
    7aa4:	ldr	w4, [x0, x4, lsl #2]
    7aa8:	cmp	w2, #0x7
    7aac:	b.le	7aec <BZ2_compressBlock@@Base+0x2ee8>
    7ab0:	ldrsw	x2, [x26, #116]
    7ab4:	ldr	x5, [x26, #80]
    7ab8:	ldrb	w6, [x26, #643]
    7abc:	strb	w6, [x5, x2]
    7ac0:	ldr	w2, [x26, #116]
    7ac4:	add	w2, w2, #0x1
    7ac8:	str	w2, [x26, #116]
    7acc:	ldr	w2, [x26, #640]
    7ad0:	lsl	w2, w2, #8
    7ad4:	str	w2, [x26, #640]
    7ad8:	ldr	w2, [x26, #644]
    7adc:	sub	w2, w2, #0x8
    7ae0:	str	w2, [x26, #644]
    7ae4:	cmp	w2, #0x7
    7ae8:	b.gt	7ab0 <BZ2_compressBlock@@Base+0x2eac>
    7aec:	sub	w5, w19, w2
    7af0:	sub	w5, w5, w3
    7af4:	lsl	w5, w4, w5
    7af8:	ldr	w4, [x26, #640]
    7afc:	orr	w4, w4, w5
    7b00:	str	w4, [x26, #640]
    7b04:	add	w2, w3, w2
    7b08:	str	w2, [x26, #644]
    7b0c:	add	x3, x27, x20
    7b10:	ldrh	w4, [x3, #60]
    7b14:	ldrb	w3, [x1, x4]
    7b18:	ldr	w4, [x0, x4, lsl #2]
    7b1c:	cmp	w2, #0x7
    7b20:	b.le	7b60 <BZ2_compressBlock@@Base+0x2f5c>
    7b24:	ldrsw	x2, [x26, #116]
    7b28:	ldr	x5, [x26, #80]
    7b2c:	ldrb	w6, [x26, #643]
    7b30:	strb	w6, [x5, x2]
    7b34:	ldr	w2, [x26, #116]
    7b38:	add	w2, w2, #0x1
    7b3c:	str	w2, [x26, #116]
    7b40:	ldr	w2, [x26, #640]
    7b44:	lsl	w2, w2, #8
    7b48:	str	w2, [x26, #640]
    7b4c:	ldr	w2, [x26, #644]
    7b50:	sub	w2, w2, #0x8
    7b54:	str	w2, [x26, #644]
    7b58:	cmp	w2, #0x7
    7b5c:	b.gt	7b24 <BZ2_compressBlock@@Base+0x2f20>
    7b60:	sub	w5, w19, w2
    7b64:	sub	w5, w5, w3
    7b68:	lsl	w5, w4, w5
    7b6c:	ldr	w4, [x26, #640]
    7b70:	orr	w4, w4, w5
    7b74:	str	w4, [x26, #640]
    7b78:	add	w3, w3, w2
    7b7c:	str	w3, [x26, #644]
    7b80:	add	x2, x27, x20
    7b84:	ldrh	w4, [x2, #62]
    7b88:	ldrb	w2, [x1, x4]
    7b8c:	ldr	w4, [x0, x4, lsl #2]
    7b90:	cmp	w3, #0x7
    7b94:	b.le	7bd4 <BZ2_compressBlock@@Base+0x2fd0>
    7b98:	ldrsw	x3, [x26, #116]
    7b9c:	ldr	x5, [x26, #80]
    7ba0:	ldrb	w6, [x26, #643]
    7ba4:	strb	w6, [x5, x3]
    7ba8:	ldr	w3, [x26, #116]
    7bac:	add	w3, w3, #0x1
    7bb0:	str	w3, [x26, #116]
    7bb4:	ldr	w3, [x26, #640]
    7bb8:	lsl	w3, w3, #8
    7bbc:	str	w3, [x26, #640]
    7bc0:	ldr	w3, [x26, #644]
    7bc4:	sub	w3, w3, #0x8
    7bc8:	str	w3, [x26, #644]
    7bcc:	cmp	w3, #0x7
    7bd0:	b.gt	7b98 <BZ2_compressBlock@@Base+0x2f94>
    7bd4:	sub	w5, w19, w3
    7bd8:	sub	w5, w5, w2
    7bdc:	lsl	w5, w4, w5
    7be0:	ldr	w4, [x26, #640]
    7be4:	orr	w4, w4, w5
    7be8:	str	w4, [x26, #640]
    7bec:	add	w3, w2, w3
    7bf0:	str	w3, [x26, #644]
    7bf4:	add	x2, x27, x20
    7bf8:	ldrh	w4, [x2, #64]
    7bfc:	ldrb	w2, [x1, x4]
    7c00:	ldr	w4, [x0, x4, lsl #2]
    7c04:	cmp	w3, #0x7
    7c08:	b.le	7c48 <BZ2_compressBlock@@Base+0x3044>
    7c0c:	ldrsw	x3, [x26, #116]
    7c10:	ldr	x5, [x26, #80]
    7c14:	ldrb	w6, [x26, #643]
    7c18:	strb	w6, [x5, x3]
    7c1c:	ldr	w3, [x26, #116]
    7c20:	add	w3, w3, #0x1
    7c24:	str	w3, [x26, #116]
    7c28:	ldr	w3, [x26, #640]
    7c2c:	lsl	w3, w3, #8
    7c30:	str	w3, [x26, #640]
    7c34:	ldr	w3, [x26, #644]
    7c38:	sub	w3, w3, #0x8
    7c3c:	str	w3, [x26, #644]
    7c40:	cmp	w3, #0x7
    7c44:	b.gt	7c0c <BZ2_compressBlock@@Base+0x3008>
    7c48:	sub	w5, w19, w3
    7c4c:	sub	w5, w5, w2
    7c50:	lsl	w5, w4, w5
    7c54:	ldr	w4, [x26, #640]
    7c58:	orr	w4, w4, w5
    7c5c:	str	w4, [x26, #640]
    7c60:	add	w2, w2, w3
    7c64:	str	w2, [x26, #644]
    7c68:	add	x3, x27, x20
    7c6c:	ldrh	w4, [x3, #66]
    7c70:	ldrb	w3, [x1, x4]
    7c74:	ldr	w4, [x0, x4, lsl #2]
    7c78:	cmp	w2, #0x7
    7c7c:	b.le	7cbc <BZ2_compressBlock@@Base+0x30b8>
    7c80:	ldrsw	x2, [x26, #116]
    7c84:	ldr	x5, [x26, #80]
    7c88:	ldrb	w6, [x26, #643]
    7c8c:	strb	w6, [x5, x2]
    7c90:	ldr	w2, [x26, #116]
    7c94:	add	w2, w2, #0x1
    7c98:	str	w2, [x26, #116]
    7c9c:	ldr	w2, [x26, #640]
    7ca0:	lsl	w2, w2, #8
    7ca4:	str	w2, [x26, #640]
    7ca8:	ldr	w2, [x26, #644]
    7cac:	sub	w2, w2, #0x8
    7cb0:	str	w2, [x26, #644]
    7cb4:	cmp	w2, #0x7
    7cb8:	b.gt	7c80 <BZ2_compressBlock@@Base+0x307c>
    7cbc:	sub	w5, w19, w2
    7cc0:	sub	w5, w5, w3
    7cc4:	lsl	w5, w4, w5
    7cc8:	ldr	w4, [x26, #640]
    7ccc:	orr	w4, w4, w5
    7cd0:	str	w4, [x26, #640]
    7cd4:	add	w2, w3, w2
    7cd8:	str	w2, [x26, #644]
    7cdc:	add	x3, x27, x20
    7ce0:	ldrh	w4, [x3, #68]
    7ce4:	ldrb	w3, [x1, x4]
    7ce8:	ldr	w4, [x0, x4, lsl #2]
    7cec:	cmp	w2, #0x7
    7cf0:	b.le	7d30 <BZ2_compressBlock@@Base+0x312c>
    7cf4:	ldrsw	x2, [x26, #116]
    7cf8:	ldr	x5, [x26, #80]
    7cfc:	ldrb	w6, [x26, #643]
    7d00:	strb	w6, [x5, x2]
    7d04:	ldr	w2, [x26, #116]
    7d08:	add	w2, w2, #0x1
    7d0c:	str	w2, [x26, #116]
    7d10:	ldr	w2, [x26, #640]
    7d14:	lsl	w2, w2, #8
    7d18:	str	w2, [x26, #640]
    7d1c:	ldr	w2, [x26, #644]
    7d20:	sub	w2, w2, #0x8
    7d24:	str	w2, [x26, #644]
    7d28:	cmp	w2, #0x7
    7d2c:	b.gt	7cf4 <BZ2_compressBlock@@Base+0x30f0>
    7d30:	sub	w5, w19, w2
    7d34:	sub	w5, w5, w3
    7d38:	lsl	w5, w4, w5
    7d3c:	ldr	w4, [x26, #640]
    7d40:	orr	w4, w4, w5
    7d44:	str	w4, [x26, #640]
    7d48:	add	w3, w3, w2
    7d4c:	str	w3, [x26, #644]
    7d50:	add	x2, x27, x20
    7d54:	ldrh	w4, [x2, #70]
    7d58:	ldrb	w2, [x1, x4]
    7d5c:	ldr	w4, [x0, x4, lsl #2]
    7d60:	cmp	w3, #0x7
    7d64:	b.le	7da4 <BZ2_compressBlock@@Base+0x31a0>
    7d68:	ldrsw	x3, [x26, #116]
    7d6c:	ldr	x5, [x26, #80]
    7d70:	ldrb	w6, [x26, #643]
    7d74:	strb	w6, [x5, x3]
    7d78:	ldr	w3, [x26, #116]
    7d7c:	add	w3, w3, #0x1
    7d80:	str	w3, [x26, #116]
    7d84:	ldr	w3, [x26, #640]
    7d88:	lsl	w3, w3, #8
    7d8c:	str	w3, [x26, #640]
    7d90:	ldr	w3, [x26, #644]
    7d94:	sub	w3, w3, #0x8
    7d98:	str	w3, [x26, #644]
    7d9c:	cmp	w3, #0x7
    7da0:	b.gt	7d68 <BZ2_compressBlock@@Base+0x3164>
    7da4:	sub	w5, w19, w3
    7da8:	sub	w5, w5, w2
    7dac:	lsl	w5, w4, w5
    7db0:	ldr	w4, [x26, #640]
    7db4:	orr	w4, w4, w5
    7db8:	str	w4, [x26, #640]
    7dbc:	add	w3, w2, w3
    7dc0:	str	w3, [x26, #644]
    7dc4:	add	x2, x27, x20
    7dc8:	ldrh	w4, [x2, #72]
    7dcc:	ldrb	w2, [x1, x4]
    7dd0:	ldr	w4, [x0, x4, lsl #2]
    7dd4:	cmp	w3, #0x7
    7dd8:	b.le	7e18 <BZ2_compressBlock@@Base+0x3214>
    7ddc:	ldrsw	x3, [x26, #116]
    7de0:	ldr	x5, [x26, #80]
    7de4:	ldrb	w6, [x26, #643]
    7de8:	strb	w6, [x5, x3]
    7dec:	ldr	w3, [x26, #116]
    7df0:	add	w3, w3, #0x1
    7df4:	str	w3, [x26, #116]
    7df8:	ldr	w3, [x26, #640]
    7dfc:	lsl	w3, w3, #8
    7e00:	str	w3, [x26, #640]
    7e04:	ldr	w3, [x26, #644]
    7e08:	sub	w3, w3, #0x8
    7e0c:	str	w3, [x26, #644]
    7e10:	cmp	w3, #0x7
    7e14:	b.gt	7ddc <BZ2_compressBlock@@Base+0x31d8>
    7e18:	sub	w5, w19, w3
    7e1c:	sub	w5, w5, w2
    7e20:	lsl	w5, w4, w5
    7e24:	ldr	w4, [x26, #640]
    7e28:	orr	w4, w4, w5
    7e2c:	str	w4, [x26, #640]
    7e30:	add	w2, w2, w3
    7e34:	str	w2, [x26, #644]
    7e38:	add	x3, x27, x20
    7e3c:	ldrh	w4, [x3, #74]
    7e40:	ldrb	w3, [x1, x4]
    7e44:	ldr	w4, [x0, x4, lsl #2]
    7e48:	cmp	w2, #0x7
    7e4c:	b.le	7e8c <BZ2_compressBlock@@Base+0x3288>
    7e50:	ldrsw	x2, [x26, #116]
    7e54:	ldr	x5, [x26, #80]
    7e58:	ldrb	w6, [x26, #643]
    7e5c:	strb	w6, [x5, x2]
    7e60:	ldr	w2, [x26, #116]
    7e64:	add	w2, w2, #0x1
    7e68:	str	w2, [x26, #116]
    7e6c:	ldr	w2, [x26, #640]
    7e70:	lsl	w2, w2, #8
    7e74:	str	w2, [x26, #640]
    7e78:	ldr	w2, [x26, #644]
    7e7c:	sub	w2, w2, #0x8
    7e80:	str	w2, [x26, #644]
    7e84:	cmp	w2, #0x7
    7e88:	b.gt	7e50 <BZ2_compressBlock@@Base+0x324c>
    7e8c:	sub	w5, w19, w2
    7e90:	sub	w5, w5, w3
    7e94:	lsl	w5, w4, w5
    7e98:	ldr	w4, [x26, #640]
    7e9c:	orr	w4, w4, w5
    7ea0:	str	w4, [x26, #640]
    7ea4:	add	w2, w3, w2
    7ea8:	str	w2, [x26, #644]
    7eac:	add	x3, x27, x20
    7eb0:	ldrh	w4, [x3, #76]
    7eb4:	ldrb	w3, [x1, x4]
    7eb8:	ldr	w4, [x0, x4, lsl #2]
    7ebc:	cmp	w2, #0x7
    7ec0:	b.le	7f00 <BZ2_compressBlock@@Base+0x32fc>
    7ec4:	ldrsw	x2, [x26, #116]
    7ec8:	ldr	x5, [x26, #80]
    7ecc:	ldrb	w6, [x26, #643]
    7ed0:	strb	w6, [x5, x2]
    7ed4:	ldr	w2, [x26, #116]
    7ed8:	add	w2, w2, #0x1
    7edc:	str	w2, [x26, #116]
    7ee0:	ldr	w2, [x26, #640]
    7ee4:	lsl	w2, w2, #8
    7ee8:	str	w2, [x26, #640]
    7eec:	ldr	w2, [x26, #644]
    7ef0:	sub	w2, w2, #0x8
    7ef4:	str	w2, [x26, #644]
    7ef8:	cmp	w2, #0x7
    7efc:	b.gt	7ec4 <BZ2_compressBlock@@Base+0x32c0>
    7f00:	sub	w5, w19, w2
    7f04:	sub	w5, w5, w3
    7f08:	lsl	w5, w4, w5
    7f0c:	ldr	w4, [x26, #640]
    7f10:	orr	w4, w4, w5
    7f14:	str	w4, [x26, #640]
    7f18:	add	w3, w3, w2
    7f1c:	str	w3, [x26, #644]
    7f20:	add	x2, x27, x20
    7f24:	ldrh	w4, [x2, #78]
    7f28:	ldrb	w2, [x1, x4]
    7f2c:	ldr	w4, [x0, x4, lsl #2]
    7f30:	cmp	w3, #0x7
    7f34:	b.le	7f74 <BZ2_compressBlock@@Base+0x3370>
    7f38:	ldrsw	x3, [x26, #116]
    7f3c:	ldr	x5, [x26, #80]
    7f40:	ldrb	w6, [x26, #643]
    7f44:	strb	w6, [x5, x3]
    7f48:	ldr	w3, [x26, #116]
    7f4c:	add	w3, w3, #0x1
    7f50:	str	w3, [x26, #116]
    7f54:	ldr	w3, [x26, #640]
    7f58:	lsl	w3, w3, #8
    7f5c:	str	w3, [x26, #640]
    7f60:	ldr	w3, [x26, #644]
    7f64:	sub	w3, w3, #0x8
    7f68:	str	w3, [x26, #644]
    7f6c:	cmp	w3, #0x7
    7f70:	b.gt	7f38 <BZ2_compressBlock@@Base+0x3334>
    7f74:	sub	w5, w19, w3
    7f78:	sub	w5, w5, w2
    7f7c:	lsl	w5, w4, w5
    7f80:	ldr	w4, [x26, #640]
    7f84:	orr	w4, w4, w5
    7f88:	str	w4, [x26, #640]
    7f8c:	add	w3, w2, w3
    7f90:	str	w3, [x26, #644]
    7f94:	add	x2, x27, x20
    7f98:	ldrh	w4, [x2, #80]
    7f9c:	ldrb	w2, [x1, x4]
    7fa0:	ldr	w4, [x0, x4, lsl #2]
    7fa4:	cmp	w3, #0x7
    7fa8:	b.le	7fe8 <BZ2_compressBlock@@Base+0x33e4>
    7fac:	ldrsw	x3, [x26, #116]
    7fb0:	ldr	x5, [x26, #80]
    7fb4:	ldrb	w6, [x26, #643]
    7fb8:	strb	w6, [x5, x3]
    7fbc:	ldr	w3, [x26, #116]
    7fc0:	add	w3, w3, #0x1
    7fc4:	str	w3, [x26, #116]
    7fc8:	ldr	w3, [x26, #640]
    7fcc:	lsl	w3, w3, #8
    7fd0:	str	w3, [x26, #640]
    7fd4:	ldr	w3, [x26, #644]
    7fd8:	sub	w3, w3, #0x8
    7fdc:	str	w3, [x26, #644]
    7fe0:	cmp	w3, #0x7
    7fe4:	b.gt	7fac <BZ2_compressBlock@@Base+0x33a8>
    7fe8:	sub	w5, w19, w3
    7fec:	sub	w5, w5, w2
    7ff0:	lsl	w5, w4, w5
    7ff4:	ldr	w4, [x26, #640]
    7ff8:	orr	w4, w4, w5
    7ffc:	str	w4, [x26, #640]
    8000:	add	w2, w2, w3
    8004:	str	w2, [x26, #644]
    8008:	add	x3, x27, x20
    800c:	ldrh	w4, [x3, #82]
    8010:	ldrb	w3, [x1, x4]
    8014:	ldr	w4, [x0, x4, lsl #2]
    8018:	cmp	w2, #0x7
    801c:	b.le	805c <BZ2_compressBlock@@Base+0x3458>
    8020:	ldrsw	x2, [x26, #116]
    8024:	ldr	x5, [x26, #80]
    8028:	ldrb	w6, [x26, #643]
    802c:	strb	w6, [x5, x2]
    8030:	ldr	w2, [x26, #116]
    8034:	add	w2, w2, #0x1
    8038:	str	w2, [x26, #116]
    803c:	ldr	w2, [x26, #640]
    8040:	lsl	w2, w2, #8
    8044:	str	w2, [x26, #640]
    8048:	ldr	w2, [x26, #644]
    804c:	sub	w2, w2, #0x8
    8050:	str	w2, [x26, #644]
    8054:	cmp	w2, #0x7
    8058:	b.gt	8020 <BZ2_compressBlock@@Base+0x341c>
    805c:	sub	w5, w19, w2
    8060:	sub	w5, w5, w3
    8064:	lsl	w5, w4, w5
    8068:	ldr	w4, [x26, #640]
    806c:	orr	w4, w4, w5
    8070:	str	w4, [x26, #640]
    8074:	add	w2, w3, w2
    8078:	str	w2, [x26, #644]
    807c:	add	x3, x27, x20
    8080:	ldrh	w4, [x3, #84]
    8084:	ldrb	w3, [x1, x4]
    8088:	ldr	w4, [x0, x4, lsl #2]
    808c:	cmp	w2, #0x7
    8090:	b.le	80d0 <BZ2_compressBlock@@Base+0x34cc>
    8094:	ldrsw	x2, [x26, #116]
    8098:	ldr	x5, [x26, #80]
    809c:	ldrb	w6, [x26, #643]
    80a0:	strb	w6, [x5, x2]
    80a4:	ldr	w2, [x26, #116]
    80a8:	add	w2, w2, #0x1
    80ac:	str	w2, [x26, #116]
    80b0:	ldr	w2, [x26, #640]
    80b4:	lsl	w2, w2, #8
    80b8:	str	w2, [x26, #640]
    80bc:	ldr	w2, [x26, #644]
    80c0:	sub	w2, w2, #0x8
    80c4:	str	w2, [x26, #644]
    80c8:	cmp	w2, #0x7
    80cc:	b.gt	8094 <BZ2_compressBlock@@Base+0x3490>
    80d0:	sub	w5, w19, w2
    80d4:	sub	w5, w5, w3
    80d8:	lsl	w5, w4, w5
    80dc:	ldr	w4, [x26, #640]
    80e0:	orr	w4, w4, w5
    80e4:	str	w4, [x26, #640]
    80e8:	add	w3, w3, w2
    80ec:	str	w3, [x26, #644]
    80f0:	add	x2, x27, x20
    80f4:	ldrh	w4, [x2, #86]
    80f8:	ldrb	w2, [x1, x4]
    80fc:	ldr	w4, [x0, x4, lsl #2]
    8100:	cmp	w3, #0x7
    8104:	b.le	8144 <BZ2_compressBlock@@Base+0x3540>
    8108:	ldrsw	x3, [x26, #116]
    810c:	ldr	x5, [x26, #80]
    8110:	ldrb	w6, [x26, #643]
    8114:	strb	w6, [x5, x3]
    8118:	ldr	w3, [x26, #116]
    811c:	add	w3, w3, #0x1
    8120:	str	w3, [x26, #116]
    8124:	ldr	w3, [x26, #640]
    8128:	lsl	w3, w3, #8
    812c:	str	w3, [x26, #640]
    8130:	ldr	w3, [x26, #644]
    8134:	sub	w3, w3, #0x8
    8138:	str	w3, [x26, #644]
    813c:	cmp	w3, #0x7
    8140:	b.gt	8108 <BZ2_compressBlock@@Base+0x3504>
    8144:	sub	w5, w19, w3
    8148:	sub	w5, w5, w2
    814c:	lsl	w5, w4, w5
    8150:	ldr	w4, [x26, #640]
    8154:	orr	w4, w4, w5
    8158:	str	w4, [x26, #640]
    815c:	add	w3, w2, w3
    8160:	str	w3, [x26, #644]
    8164:	add	x2, x27, x20
    8168:	ldrh	w4, [x2, #88]
    816c:	ldrb	w2, [x1, x4]
    8170:	ldr	w4, [x0, x4, lsl #2]
    8174:	cmp	w3, #0x7
    8178:	b.le	81b8 <BZ2_compressBlock@@Base+0x35b4>
    817c:	ldrsw	x3, [x26, #116]
    8180:	ldr	x5, [x26, #80]
    8184:	ldrb	w6, [x26, #643]
    8188:	strb	w6, [x5, x3]
    818c:	ldr	w3, [x26, #116]
    8190:	add	w3, w3, #0x1
    8194:	str	w3, [x26, #116]
    8198:	ldr	w3, [x26, #640]
    819c:	lsl	w3, w3, #8
    81a0:	str	w3, [x26, #640]
    81a4:	ldr	w3, [x26, #644]
    81a8:	sub	w3, w3, #0x8
    81ac:	str	w3, [x26, #644]
    81b0:	cmp	w3, #0x7
    81b4:	b.gt	817c <BZ2_compressBlock@@Base+0x3578>
    81b8:	sub	w5, w19, w3
    81bc:	sub	w5, w5, w2
    81c0:	lsl	w5, w4, w5
    81c4:	ldr	w4, [x26, #640]
    81c8:	orr	w4, w4, w5
    81cc:	str	w4, [x26, #640]
    81d0:	add	w2, w2, w3
    81d4:	str	w2, [x26, #644]
    81d8:	add	x3, x27, x20
    81dc:	ldrh	w4, [x3, #90]
    81e0:	ldrb	w3, [x1, x4]
    81e4:	ldr	w4, [x0, x4, lsl #2]
    81e8:	cmp	w2, #0x7
    81ec:	b.le	822c <BZ2_compressBlock@@Base+0x3628>
    81f0:	ldrsw	x2, [x26, #116]
    81f4:	ldr	x5, [x26, #80]
    81f8:	ldrb	w6, [x26, #643]
    81fc:	strb	w6, [x5, x2]
    8200:	ldr	w2, [x26, #116]
    8204:	add	w2, w2, #0x1
    8208:	str	w2, [x26, #116]
    820c:	ldr	w2, [x26, #640]
    8210:	lsl	w2, w2, #8
    8214:	str	w2, [x26, #640]
    8218:	ldr	w2, [x26, #644]
    821c:	sub	w2, w2, #0x8
    8220:	str	w2, [x26, #644]
    8224:	cmp	w2, #0x7
    8228:	b.gt	81f0 <BZ2_compressBlock@@Base+0x35ec>
    822c:	sub	w5, w19, w2
    8230:	sub	w5, w5, w3
    8234:	lsl	w5, w4, w5
    8238:	ldr	w4, [x26, #640]
    823c:	orr	w4, w4, w5
    8240:	str	w4, [x26, #640]
    8244:	add	w2, w3, w2
    8248:	str	w2, [x26, #644]
    824c:	add	x3, x27, x20
    8250:	ldrh	w4, [x3, #92]
    8254:	ldrb	w3, [x1, x4]
    8258:	ldr	w4, [x0, x4, lsl #2]
    825c:	cmp	w2, #0x7
    8260:	b.le	82a0 <BZ2_compressBlock@@Base+0x369c>
    8264:	ldrsw	x2, [x26, #116]
    8268:	ldr	x5, [x26, #80]
    826c:	ldrb	w6, [x26, #643]
    8270:	strb	w6, [x5, x2]
    8274:	ldr	w2, [x26, #116]
    8278:	add	w2, w2, #0x1
    827c:	str	w2, [x26, #116]
    8280:	ldr	w2, [x26, #640]
    8284:	lsl	w2, w2, #8
    8288:	str	w2, [x26, #640]
    828c:	ldr	w2, [x26, #644]
    8290:	sub	w2, w2, #0x8
    8294:	str	w2, [x26, #644]
    8298:	cmp	w2, #0x7
    829c:	b.gt	8264 <BZ2_compressBlock@@Base+0x3660>
    82a0:	sub	w5, w19, w2
    82a4:	sub	w5, w5, w3
    82a8:	lsl	w5, w4, w5
    82ac:	ldr	w4, [x26, #640]
    82b0:	orr	w4, w4, w5
    82b4:	str	w4, [x26, #640]
    82b8:	add	w3, w3, w2
    82bc:	str	w3, [x26, #644]
    82c0:	add	x2, x27, x20
    82c4:	ldrh	w4, [x2, #94]
    82c8:	ldrb	w2, [x1, x4]
    82cc:	ldr	w4, [x0, x4, lsl #2]
    82d0:	cmp	w3, #0x7
    82d4:	b.le	8314 <BZ2_compressBlock@@Base+0x3710>
    82d8:	ldrsw	x3, [x26, #116]
    82dc:	ldr	x5, [x26, #80]
    82e0:	ldrb	w6, [x26, #643]
    82e4:	strb	w6, [x5, x3]
    82e8:	ldr	w3, [x26, #116]
    82ec:	add	w3, w3, #0x1
    82f0:	str	w3, [x26, #116]
    82f4:	ldr	w3, [x26, #640]
    82f8:	lsl	w3, w3, #8
    82fc:	str	w3, [x26, #640]
    8300:	ldr	w3, [x26, #644]
    8304:	sub	w3, w3, #0x8
    8308:	str	w3, [x26, #644]
    830c:	cmp	w3, #0x7
    8310:	b.gt	82d8 <BZ2_compressBlock@@Base+0x36d4>
    8314:	sub	w5, w19, w3
    8318:	sub	w5, w5, w2
    831c:	lsl	w5, w4, w5
    8320:	ldr	w4, [x26, #640]
    8324:	orr	w4, w4, w5
    8328:	str	w4, [x26, #640]
    832c:	add	w3, w2, w3
    8330:	str	w3, [x26, #644]
    8334:	add	x2, x27, x20
    8338:	ldrh	w4, [x2, #96]
    833c:	ldrb	w2, [x1, x4]
    8340:	ldr	w4, [x0, x4, lsl #2]
    8344:	cmp	w3, #0x7
    8348:	b.le	8388 <BZ2_compressBlock@@Base+0x3784>
    834c:	ldrsw	x3, [x26, #116]
    8350:	ldr	x5, [x26, #80]
    8354:	ldrb	w6, [x26, #643]
    8358:	strb	w6, [x5, x3]
    835c:	ldr	w3, [x26, #116]
    8360:	add	w3, w3, #0x1
    8364:	str	w3, [x26, #116]
    8368:	ldr	w3, [x26, #640]
    836c:	lsl	w3, w3, #8
    8370:	str	w3, [x26, #640]
    8374:	ldr	w3, [x26, #644]
    8378:	sub	w3, w3, #0x8
    837c:	str	w3, [x26, #644]
    8380:	cmp	w3, #0x7
    8384:	b.gt	834c <BZ2_compressBlock@@Base+0x3748>
    8388:	sub	w5, w19, w3
    838c:	sub	w5, w5, w2
    8390:	lsl	w5, w4, w5
    8394:	ldr	w4, [x26, #640]
    8398:	orr	w4, w4, w5
    839c:	str	w4, [x26, #640]
    83a0:	add	w2, w2, w3
    83a4:	str	w2, [x26, #644]
    83a8:	add	x20, x27, x20
    83ac:	ldrh	w3, [x20, #98]
    83b0:	ldrb	w1, [x1, x3]
    83b4:	ldr	w3, [x0, x3, lsl #2]
    83b8:	cmp	w2, #0x7
    83bc:	b.le	83fc <BZ2_compressBlock@@Base+0x37f8>
    83c0:	ldrsw	x0, [x26, #116]
    83c4:	ldr	x2, [x26, #80]
    83c8:	ldrb	w4, [x26, #643]
    83cc:	strb	w4, [x2, x0]
    83d0:	ldr	w0, [x26, #116]
    83d4:	add	w0, w0, #0x1
    83d8:	str	w0, [x26, #116]
    83dc:	ldr	w0, [x26, #640]
    83e0:	lsl	w0, w0, #8
    83e4:	str	w0, [x26, #640]
    83e8:	ldr	w2, [x26, #644]
    83ec:	sub	w2, w2, #0x8
    83f0:	str	w2, [x26, #644]
    83f4:	cmp	w2, #0x7
    83f8:	b.gt	83c0 <BZ2_compressBlock@@Base+0x37bc>
    83fc:	sub	w0, w19, w2
    8400:	sub	w0, w0, w1
    8404:	lsl	w3, w3, w0
    8408:	ldr	w0, [x26, #640]
    840c:	orr	w0, w0, w3
    8410:	str	w0, [x26, #640]
    8414:	add	w2, w1, w2
    8418:	str	w2, [x26, #644]
    841c:	add	w20, w28, #0x1
    8420:	mov	w1, w22
    8424:	ldr	w0, [x26, #668]
    8428:	add	x22, x22, #0x1
    842c:	cmp	w0, w20
    8430:	b.le	8520 <BZ2_compressBlock@@Base+0x391c>
    8434:	add	w28, w20, #0x31
    8438:	sub	w1, w0, #0x1
    843c:	cmp	w28, w0
    8440:	csel	w28, w1, w28, ge  // ge = tcont
    8444:	ldrb	w0, [x23, x22]
    8448:	cmp	w21, w0
    844c:	b.le	6d40 <BZ2_compressBlock@@Base+0x213c>
    8450:	cmp	w21, #0x6
    8454:	b.ne	8464 <BZ2_compressBlock@@Base+0x3860>  // b.any
    8458:	sub	w0, w28, w20
    845c:	cmp	w0, #0x31
    8460:	b.eq	6d4c <BZ2_compressBlock@@Base+0x2148>  // b.none
    8464:	sxtw	x2, w20
    8468:	cmp	w28, w20
    846c:	b.ge	84a0 <BZ2_compressBlock@@Base+0x389c>  // b.tcont
    8470:	b	841c <BZ2_compressBlock@@Base+0x3818>
    8474:	sub	w4, w19, w0
    8478:	sub	w4, w4, w1
    847c:	lsl	w4, w3, w4
    8480:	ldr	w3, [x26, #640]
    8484:	orr	w3, w3, w4
    8488:	str	w3, [x26, #640]
    848c:	add	w0, w1, w0
    8490:	str	w0, [x26, #644]
    8494:	add	x2, x2, #0x1
    8498:	cmp	w28, w2
    849c:	b.lt	841c <BZ2_compressBlock@@Base+0x3818>  // b.tstop
    84a0:	ldrh	w4, [x27, x2, lsl #1]
    84a4:	ldrb	w3, [x23, x22]
    84a8:	lsl	x0, x3, #7
    84ac:	add	x1, x0, x3
    84b0:	add	x1, x26, x1, lsl #1
    84b4:	add	x1, x1, x4
    84b8:	add	x1, x1, #0x9, lsl #12
    84bc:	ldrb	w1, [x1, #844]
    84c0:	add	x0, x0, x3
    84c4:	add	x0, x4, x0, lsl #1
    84c8:	add	x0, x0, x24
    84cc:	add	x0, x26, x0, lsl #2
    84d0:	ldr	w3, [x0, #8]
    84d4:	ldr	w0, [x26, #644]
    84d8:	cmp	w0, #0x7
    84dc:	b.le	8474 <BZ2_compressBlock@@Base+0x3870>
    84e0:	ldrsw	x0, [x26, #116]
    84e4:	ldr	x4, [x26, #80]
    84e8:	ldrb	w5, [x26, #643]
    84ec:	strb	w5, [x4, x0]
    84f0:	ldr	w0, [x26, #116]
    84f4:	add	w0, w0, #0x1
    84f8:	str	w0, [x26, #116]
    84fc:	ldr	w0, [x26, #640]
    8500:	lsl	w0, w0, #8
    8504:	str	w0, [x26, #640]
    8508:	ldr	w0, [x26, #644]
    850c:	sub	w0, w0, #0x8
    8510:	str	w0, [x26, #644]
    8514:	cmp	w0, #0x7
    8518:	b.gt	84e0 <BZ2_compressBlock@@Base+0x38dc>
    851c:	b	8474 <BZ2_compressBlock@@Base+0x3870>
    8520:	ldr	w28, [sp, #120]
    8524:	cmp	w28, w1
    8528:	b.ne	8558 <BZ2_compressBlock@@Base+0x3954>  // b.any
    852c:	ldr	w0, [x26, #656]
    8530:	cmp	w0, #0x2
    8534:	b.gt	8564 <BZ2_compressBlock@@Base+0x3960>
    8538:	ldp	x19, x20, [sp, #16]
    853c:	ldp	x21, x22, [sp, #32]
    8540:	ldp	x23, x24, [sp, #48]
    8544:	ldp	x27, x28, [sp, #80]
    8548:	ldr	d8, [sp, #96]
    854c:	b	4c90 <BZ2_compressBlock@@Base+0x8c>
    8550:	ldr	w1, [sp, #120]
    8554:	b	8524 <BZ2_compressBlock@@Base+0x3920>
    8558:	mov	w0, #0xbbf                 	// #3007
    855c:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    8560:	b	852c <BZ2_compressBlock@@Base+0x3928>
    8564:	ldr	w2, [x26, #116]
    8568:	ldr	w0, [sp, #128]
    856c:	sub	w2, w2, w0
    8570:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    8574:	add	x1, x1, #0x5b8
    8578:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    857c:	ldr	x0, [x0, #4016]
    8580:	ldr	x0, [x0]
    8584:	bl	16e0 <fprintf@plt>
    8588:	ldp	x19, x20, [sp, #16]
    858c:	ldp	x21, x22, [sp, #32]
    8590:	ldp	x23, x24, [sp, #48]
    8594:	ldp	x27, x28, [sp, #80]
    8598:	ldr	d8, [sp, #96]
    859c:	b	4c90 <BZ2_compressBlock@@Base+0x8c>
    85a0:	mov	w1, #0x17                  	// #23
    85a4:	mov	x0, x26
    85a8:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    85ac:	mov	w1, #0x72                  	// #114
    85b0:	mov	x0, x26
    85b4:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    85b8:	mov	w1, #0x45                  	// #69
    85bc:	mov	x0, x26
    85c0:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    85c4:	mov	w1, #0x38                  	// #56
    85c8:	mov	x0, x26
    85cc:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    85d0:	mov	w1, #0x50                  	// #80
    85d4:	mov	x0, x26
    85d8:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    85dc:	mov	w1, #0xffffff90            	// #-112
    85e0:	mov	x0, x26
    85e4:	bl	49e0 <BZ2_hbCreateDecodeTables@@Base+0x3dc>
    85e8:	ldr	w1, [x26, #652]
    85ec:	mov	x0, x26
    85f0:	bl	4a50 <BZ2_hbCreateDecodeTables@@Base+0x44c>
    85f4:	ldr	w0, [x26, #656]
    85f8:	cmp	w0, #0x1
    85fc:	b.gt	860c <BZ2_compressBlock@@Base+0x3a08>
    8600:	mov	x0, x26
    8604:	bl	474c <BZ2_hbCreateDecodeTables@@Base+0x148>
    8608:	b	4c98 <BZ2_compressBlock@@Base+0x94>
    860c:	ldr	w2, [x26, #652]
    8610:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    8614:	add	x1, x1, #0x5c8
    8618:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    861c:	ldr	x0, [x0, #4016]
    8620:	ldr	x0, [x0]
    8624:	bl	16e0 <fprintf@plt>
    8628:	b	8600 <BZ2_compressBlock@@Base+0x39fc>

000000000000862c <BZ2_decompress@@Base>:
    862c:	stp	x29, x30, [sp, #-208]!
    8630:	mov	x29, sp
    8634:	stp	x19, x20, [sp, #16]
    8638:	stp	x21, x22, [sp, #32]
    863c:	stp	x23, x24, [sp, #48]
    8640:	stp	x25, x26, [sp, #64]
    8644:	stp	x27, x28, [sp, #80]
    8648:	mov	x19, x0
    864c:	ldr	x0, [x0]
    8650:	str	x0, [sp, #176]
    8654:	ldr	w1, [x19, #8]
    8658:	cmp	w1, #0xa
    865c:	b.eq	8728 <BZ2_decompress@@Base+0xfc>  // b.none
    8660:	add	x0, x19, #0xc, lsl #12
    8664:	ldr	w25, [x0, #14884]
    8668:	ldr	w23, [x0, #14888]
    866c:	ldr	w26, [x0, #14892]
    8670:	ldr	w22, [x0, #14896]
    8674:	ldr	w24, [x0, #14900]
    8678:	ldr	w2, [x0, #14904]
    867c:	str	w2, [sp, #108]
    8680:	ldr	w2, [x0, #14908]
    8684:	str	w2, [sp, #164]
    8688:	ldr	w2, [x0, #14912]
    868c:	str	w2, [sp, #148]
    8690:	ldr	w2, [x0, #14916]
    8694:	str	w2, [sp, #144]
    8698:	ldr	w2, [x0, #14920]
    869c:	str	w2, [sp, #132]
    86a0:	ldr	w2, [x0, #14924]
    86a4:	str	w2, [sp, #152]
    86a8:	ldr	w28, [x0, #14928]
    86ac:	ldr	w2, [x0, #14932]
    86b0:	str	w2, [sp, #128]
    86b4:	ldr	w2, [x0, #14936]
    86b8:	str	w2, [sp, #156]
    86bc:	ldr	w27, [x0, #14940]
    86c0:	ldr	w2, [x0, #14944]
    86c4:	str	w2, [sp, #172]
    86c8:	ldr	w20, [x0, #14948]
    86cc:	ldr	w21, [x0, #14952]
    86d0:	ldr	w2, [x0, #14956]
    86d4:	str	w2, [sp, #104]
    86d8:	ldr	w2, [x0, #14960]
    86dc:	str	w2, [sp, #168]
    86e0:	ldr	w0, [x0, #14964]
    86e4:	str	w0, [sp, #160]
    86e8:	add	x0, x19, #0x8, lsl #12
    86ec:	ldr	x2, [x0, #31352]
    86f0:	str	x2, [sp, #112]
    86f4:	ldr	x2, [x0, #31360]
    86f8:	str	x2, [sp, #120]
    86fc:	ldr	x0, [x0, #31368]
    8700:	str	x0, [sp, #136]
    8704:	sub	w1, w1, #0xa
    8708:	cmp	w1, #0x28
    870c:	b.hi	b0c4 <BZ2_decompress@@Base+0x2a98>  // b.pmore
    8710:	adrp	x0, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    8714:	add	x0, x0, #0x618
    8718:	ldrh	w0, [x0, w1, uxtw #1]
    871c:	adr	x1, 8728 <BZ2_decompress@@Base+0xfc>
    8720:	add	x0, x1, w0, sxth #2
    8724:	br	x0
    8728:	add	x0, x19, #0xc, lsl #12
    872c:	str	wzr, [x0, #14884]
    8730:	str	wzr, [x0, #14888]
    8734:	str	wzr, [x0, #14892]
    8738:	str	wzr, [x0, #14896]
    873c:	str	wzr, [x0, #14900]
    8740:	str	wzr, [x0, #14904]
    8744:	str	wzr, [x0, #14908]
    8748:	str	wzr, [x0, #14912]
    874c:	str	wzr, [x0, #14916]
    8750:	str	wzr, [x0, #14920]
    8754:	str	wzr, [x0, #14924]
    8758:	str	wzr, [x0, #14928]
    875c:	str	wzr, [x0, #14932]
    8760:	str	wzr, [x0, #14936]
    8764:	str	wzr, [x0, #14940]
    8768:	str	wzr, [x0, #14944]
    876c:	str	wzr, [x0, #14948]
    8770:	str	wzr, [x0, #14952]
    8774:	str	wzr, [x0, #14956]
    8778:	str	wzr, [x0, #14960]
    877c:	str	wzr, [x0, #14964]
    8780:	add	x0, x19, #0x8, lsl #12
    8784:	str	xzr, [x0, #31352]
    8788:	str	xzr, [x0, #31360]
    878c:	str	xzr, [x0, #31368]
    8790:	b	8660 <BZ2_decompress@@Base+0x34>
    8794:	mov	w0, #0xa                   	// #10
    8798:	str	w0, [x19, #8]
    879c:	ldr	w0, [x19, #36]
    87a0:	cmp	w0, #0x7
    87a4:	b.gt	8818 <BZ2_decompress@@Base+0x1ec>
    87a8:	ldr	x1, [x19]
    87ac:	ldr	w2, [x1, #8]
    87b0:	cbz	w2, b0e4 <BZ2_decompress@@Base+0x2ab8>
    87b4:	ldr	w2, [x19, #32]
    87b8:	ldr	x3, [x1]
    87bc:	ldrb	w3, [x3]
    87c0:	orr	w2, w3, w2, lsl #8
    87c4:	str	w2, [x19, #32]
    87c8:	add	w0, w0, #0x8
    87cc:	str	w0, [x19, #36]
    87d0:	ldr	x0, [x1]
    87d4:	add	x0, x0, #0x1
    87d8:	str	x0, [x1]
    87dc:	ldr	x1, [x19]
    87e0:	ldr	w0, [x1, #8]
    87e4:	sub	w0, w0, #0x1
    87e8:	str	w0, [x1, #8]
    87ec:	ldr	x1, [x19]
    87f0:	ldr	w0, [x1, #12]
    87f4:	add	w0, w0, #0x1
    87f8:	str	w0, [x1, #12]
    87fc:	ldr	x0, [x19]
    8800:	ldr	w1, [x0, #12]
    8804:	cbnz	w1, 879c <BZ2_decompress@@Base+0x170>
    8808:	ldr	w1, [x0, #16]
    880c:	add	w1, w1, #0x1
    8810:	str	w1, [x0, #16]
    8814:	b	879c <BZ2_decompress@@Base+0x170>
    8818:	sub	w0, w0, #0x8
    881c:	ldr	w1, [x19, #32]
    8820:	lsr	w1, w1, w0
    8824:	str	w0, [x19, #36]
    8828:	and	w0, w1, #0xff
    882c:	cmp	w0, #0x42
    8830:	b.ne	b0dc <BZ2_decompress@@Base+0x2ab0>  // b.any
    8834:	mov	w0, #0xb                   	// #11
    8838:	str	w0, [x19, #8]
    883c:	ldr	w0, [x19, #36]
    8840:	cmp	w0, #0x7
    8844:	b.gt	88b8 <BZ2_decompress@@Base+0x28c>
    8848:	ldr	x1, [x19]
    884c:	ldr	w2, [x1, #8]
    8850:	cbz	w2, b0f4 <BZ2_decompress@@Base+0x2ac8>
    8854:	ldr	w2, [x19, #32]
    8858:	ldr	x3, [x1]
    885c:	ldrb	w3, [x3]
    8860:	orr	w2, w3, w2, lsl #8
    8864:	str	w2, [x19, #32]
    8868:	add	w0, w0, #0x8
    886c:	str	w0, [x19, #36]
    8870:	ldr	x0, [x1]
    8874:	add	x0, x0, #0x1
    8878:	str	x0, [x1]
    887c:	ldr	x1, [x19]
    8880:	ldr	w0, [x1, #8]
    8884:	sub	w0, w0, #0x1
    8888:	str	w0, [x1, #8]
    888c:	ldr	x1, [x19]
    8890:	ldr	w0, [x1, #12]
    8894:	add	w0, w0, #0x1
    8898:	str	w0, [x1, #12]
    889c:	ldr	x0, [x19]
    88a0:	ldr	w1, [x0, #12]
    88a4:	cbnz	w1, 883c <BZ2_decompress@@Base+0x210>
    88a8:	ldr	w1, [x0, #16]
    88ac:	add	w1, w1, #0x1
    88b0:	str	w1, [x0, #16]
    88b4:	b	883c <BZ2_decompress@@Base+0x210>
    88b8:	sub	w0, w0, #0x8
    88bc:	ldr	w1, [x19, #32]
    88c0:	lsr	w1, w1, w0
    88c4:	str	w0, [x19, #36]
    88c8:	and	w0, w1, #0xff
    88cc:	cmp	w0, #0x5a
    88d0:	b.ne	b0ec <BZ2_decompress@@Base+0x2ac0>  // b.any
    88d4:	mov	w0, #0xc                   	// #12
    88d8:	str	w0, [x19, #8]
    88dc:	ldr	w0, [x19, #36]
    88e0:	cmp	w0, #0x7
    88e4:	b.gt	8958 <BZ2_decompress@@Base+0x32c>
    88e8:	ldr	x1, [x19]
    88ec:	ldr	w2, [x1, #8]
    88f0:	cbz	w2, b104 <BZ2_decompress@@Base+0x2ad8>
    88f4:	ldr	w2, [x19, #32]
    88f8:	ldr	x3, [x1]
    88fc:	ldrb	w3, [x3]
    8900:	orr	w2, w3, w2, lsl #8
    8904:	str	w2, [x19, #32]
    8908:	add	w0, w0, #0x8
    890c:	str	w0, [x19, #36]
    8910:	ldr	x0, [x1]
    8914:	add	x0, x0, #0x1
    8918:	str	x0, [x1]
    891c:	ldr	x1, [x19]
    8920:	ldr	w0, [x1, #8]
    8924:	sub	w0, w0, #0x1
    8928:	str	w0, [x1, #8]
    892c:	ldr	x1, [x19]
    8930:	ldr	w0, [x1, #12]
    8934:	add	w0, w0, #0x1
    8938:	str	w0, [x1, #12]
    893c:	ldr	x0, [x19]
    8940:	ldr	w1, [x0, #12]
    8944:	cbnz	w1, 88dc <BZ2_decompress@@Base+0x2b0>
    8948:	ldr	w1, [x0, #16]
    894c:	add	w1, w1, #0x1
    8950:	str	w1, [x0, #16]
    8954:	b	88dc <BZ2_decompress@@Base+0x2b0>
    8958:	sub	w0, w0, #0x8
    895c:	ldr	w1, [x19, #32]
    8960:	lsr	w1, w1, w0
    8964:	str	w0, [x19, #36]
    8968:	and	w0, w1, #0xff
    896c:	cmp	w0, #0x68
    8970:	b.ne	b0fc <BZ2_decompress@@Base+0x2ad0>  // b.any
    8974:	mov	w0, #0xd                   	// #13
    8978:	str	w0, [x19, #8]
    897c:	ldr	w0, [x19, #36]
    8980:	cmp	w0, #0x7
    8984:	b.gt	89f8 <BZ2_decompress@@Base+0x3cc>
    8988:	ldr	x1, [x19]
    898c:	ldr	w2, [x1, #8]
    8990:	cbz	w2, b10c <BZ2_decompress@@Base+0x2ae0>
    8994:	ldr	w2, [x19, #32]
    8998:	ldr	x3, [x1]
    899c:	ldrb	w3, [x3]
    89a0:	orr	w2, w3, w2, lsl #8
    89a4:	str	w2, [x19, #32]
    89a8:	add	w0, w0, #0x8
    89ac:	str	w0, [x19, #36]
    89b0:	ldr	x0, [x1]
    89b4:	add	x0, x0, #0x1
    89b8:	str	x0, [x1]
    89bc:	ldr	x1, [x19]
    89c0:	ldr	w0, [x1, #8]
    89c4:	sub	w0, w0, #0x1
    89c8:	str	w0, [x1, #8]
    89cc:	ldr	x1, [x19]
    89d0:	ldr	w0, [x1, #12]
    89d4:	add	w0, w0, #0x1
    89d8:	str	w0, [x1, #12]
    89dc:	ldr	x0, [x19]
    89e0:	ldr	w1, [x0, #12]
    89e4:	cbnz	w1, 897c <BZ2_decompress@@Base+0x350>
    89e8:	ldr	w1, [x0, #16]
    89ec:	add	w1, w1, #0x1
    89f0:	str	w1, [x0, #16]
    89f4:	b	897c <BZ2_decompress@@Base+0x350>
    89f8:	sub	w0, w0, #0x8
    89fc:	ldr	w1, [x19, #32]
    8a00:	lsr	w1, w1, w0
    8a04:	and	w1, w1, #0xff
    8a08:	str	w0, [x19, #36]
    8a0c:	sub	w0, w1, #0x31
    8a10:	cmp	w0, #0x8
    8a14:	b.hi	8a94 <BZ2_decompress@@Base+0x468>  // b.pmore
    8a18:	sub	w1, w1, #0x30
    8a1c:	str	w1, [x19, #40]
    8a20:	ldrb	w0, [x19, #44]
    8a24:	cbz	w0, 8aa0 <BZ2_decompress@@Base+0x474>
    8a28:	mov	w0, #0x86a0                	// #34464
    8a2c:	movk	w0, #0x1, lsl #16
    8a30:	mul	w1, w1, w0
    8a34:	ldr	x0, [sp, #176]
    8a38:	ldr	x3, [x0, #56]
    8a3c:	mov	w2, #0x1                   	// #1
    8a40:	lsl	w1, w1, #1
    8a44:	ldr	x0, [x0, #72]
    8a48:	blr	x3
    8a4c:	str	x0, [x19, #3160]
    8a50:	ldr	w1, [x19, #40]
    8a54:	mov	w2, #0x86a0                	// #34464
    8a58:	movk	w2, #0x1, lsl #16
    8a5c:	mul	w1, w1, w2
    8a60:	ldr	x0, [sp, #176]
    8a64:	ldr	x3, [x0, #56]
    8a68:	mov	w2, #0x1                   	// #1
    8a6c:	asr	w1, w1, #1
    8a70:	ldr	x0, [x0, #72]
    8a74:	blr	x3
    8a78:	str	x0, [x19, #3168]
    8a7c:	ldr	x1, [x19, #3160]
    8a80:	cmp	x1, #0x0
    8a84:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    8a88:	b.ne	8acc <BZ2_decompress@@Base+0x4a0>  // b.any
    8a8c:	mov	w0, #0xfffffffd            	// #-3
    8a90:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    8a94:	str	w1, [x19, #40]
    8a98:	mov	w0, #0xfffffffb            	// #-5
    8a9c:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    8aa0:	mov	w0, #0x86a0                	// #34464
    8aa4:	movk	w0, #0x1, lsl #16
    8aa8:	mul	w1, w1, w0
    8aac:	ldr	x0, [sp, #176]
    8ab0:	ldr	x3, [x0, #56]
    8ab4:	mov	w2, #0x1                   	// #1
    8ab8:	lsl	w1, w1, #2
    8abc:	ldr	x0, [x0, #72]
    8ac0:	blr	x3
    8ac4:	str	x0, [x19, #3152]
    8ac8:	cbz	x0, b114 <BZ2_decompress@@Base+0x2ae8>
    8acc:	mov	w0, #0xe                   	// #14
    8ad0:	str	w0, [x19, #8]
    8ad4:	ldr	w0, [x19, #36]
    8ad8:	cmp	w0, #0x7
    8adc:	b.gt	8b50 <BZ2_decompress@@Base+0x524>
    8ae0:	ldr	x1, [x19]
    8ae4:	ldr	w2, [x1, #8]
    8ae8:	cbz	w2, b11c <BZ2_decompress@@Base+0x2af0>
    8aec:	ldr	w2, [x19, #32]
    8af0:	ldr	x3, [x1]
    8af4:	ldrb	w3, [x3]
    8af8:	orr	w2, w3, w2, lsl #8
    8afc:	str	w2, [x19, #32]
    8b00:	add	w0, w0, #0x8
    8b04:	str	w0, [x19, #36]
    8b08:	ldr	x0, [x1]
    8b0c:	add	x0, x0, #0x1
    8b10:	str	x0, [x1]
    8b14:	ldr	x1, [x19]
    8b18:	ldr	w0, [x1, #8]
    8b1c:	sub	w0, w0, #0x1
    8b20:	str	w0, [x1, #8]
    8b24:	ldr	x1, [x19]
    8b28:	ldr	w0, [x1, #12]
    8b2c:	add	w0, w0, #0x1
    8b30:	str	w0, [x1, #12]
    8b34:	ldr	x0, [x19]
    8b38:	ldr	w1, [x0, #12]
    8b3c:	cbnz	w1, 8ad4 <BZ2_decompress@@Base+0x4a8>
    8b40:	ldr	w1, [x0, #16]
    8b44:	add	w1, w1, #0x1
    8b48:	str	w1, [x0, #16]
    8b4c:	b	8ad4 <BZ2_decompress@@Base+0x4a8>
    8b50:	sub	w0, w0, #0x8
    8b54:	ldr	w1, [x19, #32]
    8b58:	lsr	w1, w1, w0
    8b5c:	str	w0, [x19, #36]
    8b60:	and	w0, w1, #0xff
    8b64:	cmp	w0, #0x17
    8b68:	b.eq	aafc <BZ2_decompress@@Base+0x24d0>  // b.none
    8b6c:	cmp	w0, #0x31
    8b70:	b.ne	b124 <BZ2_decompress@@Base+0x2af8>  // b.any
    8b74:	mov	w0, #0xf                   	// #15
    8b78:	str	w0, [x19, #8]
    8b7c:	ldr	w0, [x19, #36]
    8b80:	cmp	w0, #0x7
    8b84:	b.gt	8bf8 <BZ2_decompress@@Base+0x5cc>
    8b88:	ldr	x1, [x19]
    8b8c:	ldr	w2, [x1, #8]
    8b90:	cbz	w2, b134 <BZ2_decompress@@Base+0x2b08>
    8b94:	ldr	w2, [x19, #32]
    8b98:	ldr	x3, [x1]
    8b9c:	ldrb	w3, [x3]
    8ba0:	orr	w2, w3, w2, lsl #8
    8ba4:	str	w2, [x19, #32]
    8ba8:	add	w0, w0, #0x8
    8bac:	str	w0, [x19, #36]
    8bb0:	ldr	x0, [x1]
    8bb4:	add	x0, x0, #0x1
    8bb8:	str	x0, [x1]
    8bbc:	ldr	x1, [x19]
    8bc0:	ldr	w0, [x1, #8]
    8bc4:	sub	w0, w0, #0x1
    8bc8:	str	w0, [x1, #8]
    8bcc:	ldr	x1, [x19]
    8bd0:	ldr	w0, [x1, #12]
    8bd4:	add	w0, w0, #0x1
    8bd8:	str	w0, [x1, #12]
    8bdc:	ldr	x0, [x19]
    8be0:	ldr	w1, [x0, #12]
    8be4:	cbnz	w1, 8b7c <BZ2_decompress@@Base+0x550>
    8be8:	ldr	w1, [x0, #16]
    8bec:	add	w1, w1, #0x1
    8bf0:	str	w1, [x0, #16]
    8bf4:	b	8b7c <BZ2_decompress@@Base+0x550>
    8bf8:	sub	w0, w0, #0x8
    8bfc:	ldr	w1, [x19, #32]
    8c00:	lsr	w1, w1, w0
    8c04:	str	w0, [x19, #36]
    8c08:	and	w0, w1, #0xff
    8c0c:	cmp	w0, #0x41
    8c10:	b.ne	b12c <BZ2_decompress@@Base+0x2b00>  // b.any
    8c14:	mov	w0, #0x10                  	// #16
    8c18:	str	w0, [x19, #8]
    8c1c:	ldr	w0, [x19, #36]
    8c20:	cmp	w0, #0x7
    8c24:	b.gt	8c98 <BZ2_decompress@@Base+0x66c>
    8c28:	ldr	x1, [x19]
    8c2c:	ldr	w2, [x1, #8]
    8c30:	cbz	w2, b144 <BZ2_decompress@@Base+0x2b18>
    8c34:	ldr	w2, [x19, #32]
    8c38:	ldr	x3, [x1]
    8c3c:	ldrb	w3, [x3]
    8c40:	orr	w2, w3, w2, lsl #8
    8c44:	str	w2, [x19, #32]
    8c48:	add	w0, w0, #0x8
    8c4c:	str	w0, [x19, #36]
    8c50:	ldr	x0, [x1]
    8c54:	add	x0, x0, #0x1
    8c58:	str	x0, [x1]
    8c5c:	ldr	x1, [x19]
    8c60:	ldr	w0, [x1, #8]
    8c64:	sub	w0, w0, #0x1
    8c68:	str	w0, [x1, #8]
    8c6c:	ldr	x1, [x19]
    8c70:	ldr	w0, [x1, #12]
    8c74:	add	w0, w0, #0x1
    8c78:	str	w0, [x1, #12]
    8c7c:	ldr	x0, [x19]
    8c80:	ldr	w1, [x0, #12]
    8c84:	cbnz	w1, 8c1c <BZ2_decompress@@Base+0x5f0>
    8c88:	ldr	w1, [x0, #16]
    8c8c:	add	w1, w1, #0x1
    8c90:	str	w1, [x0, #16]
    8c94:	b	8c1c <BZ2_decompress@@Base+0x5f0>
    8c98:	sub	w0, w0, #0x8
    8c9c:	ldr	w1, [x19, #32]
    8ca0:	lsr	w1, w1, w0
    8ca4:	str	w0, [x19, #36]
    8ca8:	and	w0, w1, #0xff
    8cac:	cmp	w0, #0x59
    8cb0:	b.ne	b13c <BZ2_decompress@@Base+0x2b10>  // b.any
    8cb4:	mov	w0, #0x11                  	// #17
    8cb8:	str	w0, [x19, #8]
    8cbc:	ldr	w0, [x19, #36]
    8cc0:	cmp	w0, #0x7
    8cc4:	b.gt	8d38 <BZ2_decompress@@Base+0x70c>
    8cc8:	ldr	x1, [x19]
    8ccc:	ldr	w2, [x1, #8]
    8cd0:	cbz	w2, b154 <BZ2_decompress@@Base+0x2b28>
    8cd4:	ldr	w2, [x19, #32]
    8cd8:	ldr	x3, [x1]
    8cdc:	ldrb	w3, [x3]
    8ce0:	orr	w2, w3, w2, lsl #8
    8ce4:	str	w2, [x19, #32]
    8ce8:	add	w0, w0, #0x8
    8cec:	str	w0, [x19, #36]
    8cf0:	ldr	x0, [x1]
    8cf4:	add	x0, x0, #0x1
    8cf8:	str	x0, [x1]
    8cfc:	ldr	x1, [x19]
    8d00:	ldr	w0, [x1, #8]
    8d04:	sub	w0, w0, #0x1
    8d08:	str	w0, [x1, #8]
    8d0c:	ldr	x1, [x19]
    8d10:	ldr	w0, [x1, #12]
    8d14:	add	w0, w0, #0x1
    8d18:	str	w0, [x1, #12]
    8d1c:	ldr	x0, [x19]
    8d20:	ldr	w1, [x0, #12]
    8d24:	cbnz	w1, 8cbc <BZ2_decompress@@Base+0x690>
    8d28:	ldr	w1, [x0, #16]
    8d2c:	add	w1, w1, #0x1
    8d30:	str	w1, [x0, #16]
    8d34:	b	8cbc <BZ2_decompress@@Base+0x690>
    8d38:	sub	w0, w0, #0x8
    8d3c:	ldr	w1, [x19, #32]
    8d40:	lsr	w1, w1, w0
    8d44:	str	w0, [x19, #36]
    8d48:	and	w0, w1, #0xff
    8d4c:	cmp	w0, #0x26
    8d50:	b.ne	b14c <BZ2_decompress@@Base+0x2b20>  // b.any
    8d54:	mov	w0, #0x12                  	// #18
    8d58:	str	w0, [x19, #8]
    8d5c:	ldr	w0, [x19, #36]
    8d60:	cmp	w0, #0x7
    8d64:	b.gt	8dd8 <BZ2_decompress@@Base+0x7ac>
    8d68:	ldr	x1, [x19]
    8d6c:	ldr	w2, [x1, #8]
    8d70:	cbz	w2, b164 <BZ2_decompress@@Base+0x2b38>
    8d74:	ldr	w2, [x19, #32]
    8d78:	ldr	x3, [x1]
    8d7c:	ldrb	w3, [x3]
    8d80:	orr	w2, w3, w2, lsl #8
    8d84:	str	w2, [x19, #32]
    8d88:	add	w0, w0, #0x8
    8d8c:	str	w0, [x19, #36]
    8d90:	ldr	x0, [x1]
    8d94:	add	x0, x0, #0x1
    8d98:	str	x0, [x1]
    8d9c:	ldr	x1, [x19]
    8da0:	ldr	w0, [x1, #8]
    8da4:	sub	w0, w0, #0x1
    8da8:	str	w0, [x1, #8]
    8dac:	ldr	x1, [x19]
    8db0:	ldr	w0, [x1, #12]
    8db4:	add	w0, w0, #0x1
    8db8:	str	w0, [x1, #12]
    8dbc:	ldr	x0, [x19]
    8dc0:	ldr	w1, [x0, #12]
    8dc4:	cbnz	w1, 8d5c <BZ2_decompress@@Base+0x730>
    8dc8:	ldr	w1, [x0, #16]
    8dcc:	add	w1, w1, #0x1
    8dd0:	str	w1, [x0, #16]
    8dd4:	b	8d5c <BZ2_decompress@@Base+0x730>
    8dd8:	sub	w0, w0, #0x8
    8ddc:	ldr	w1, [x19, #32]
    8de0:	lsr	w1, w1, w0
    8de4:	str	w0, [x19, #36]
    8de8:	and	w0, w1, #0xff
    8dec:	cmp	w0, #0x53
    8df0:	b.ne	b15c <BZ2_decompress@@Base+0x2b30>  // b.any
    8df4:	mov	w0, #0x13                  	// #19
    8df8:	str	w0, [x19, #8]
    8dfc:	ldr	w0, [x19, #36]
    8e00:	cmp	w0, #0x7
    8e04:	b.gt	8e78 <BZ2_decompress@@Base+0x84c>
    8e08:	ldr	x1, [x19]
    8e0c:	ldr	w2, [x1, #8]
    8e10:	cbz	w2, b174 <BZ2_decompress@@Base+0x2b48>
    8e14:	ldr	w2, [x19, #32]
    8e18:	ldr	x3, [x1]
    8e1c:	ldrb	w3, [x3]
    8e20:	orr	w2, w3, w2, lsl #8
    8e24:	str	w2, [x19, #32]
    8e28:	add	w0, w0, #0x8
    8e2c:	str	w0, [x19, #36]
    8e30:	ldr	x0, [x1]
    8e34:	add	x0, x0, #0x1
    8e38:	str	x0, [x1]
    8e3c:	ldr	x1, [x19]
    8e40:	ldr	w0, [x1, #8]
    8e44:	sub	w0, w0, #0x1
    8e48:	str	w0, [x1, #8]
    8e4c:	ldr	x1, [x19]
    8e50:	ldr	w0, [x1, #12]
    8e54:	add	w0, w0, #0x1
    8e58:	str	w0, [x1, #12]
    8e5c:	ldr	x0, [x19]
    8e60:	ldr	w1, [x0, #12]
    8e64:	cbnz	w1, 8dfc <BZ2_decompress@@Base+0x7d0>
    8e68:	ldr	w1, [x0, #16]
    8e6c:	add	w1, w1, #0x1
    8e70:	str	w1, [x0, #16]
    8e74:	b	8dfc <BZ2_decompress@@Base+0x7d0>
    8e78:	sub	w0, w0, #0x8
    8e7c:	ldr	w1, [x19, #32]
    8e80:	lsr	w1, w1, w0
    8e84:	str	w0, [x19, #36]
    8e88:	and	w0, w1, #0xff
    8e8c:	cmp	w0, #0x59
    8e90:	b.ne	b16c <BZ2_decompress@@Base+0x2b40>  // b.any
    8e94:	ldr	w2, [x19, #48]
    8e98:	add	w2, w2, #0x1
    8e9c:	str	w2, [x19, #48]
    8ea0:	ldr	w0, [x19, #52]
    8ea4:	cmp	w0, #0x1
    8ea8:	b.gt	8f34 <BZ2_decompress@@Base+0x908>
    8eac:	str	wzr, [x19, #3176]
    8eb0:	mov	w0, #0x14                  	// #20
    8eb4:	str	w0, [x19, #8]
    8eb8:	ldr	w0, [x19, #36]
    8ebc:	cmp	w0, #0x7
    8ec0:	b.gt	8f50 <BZ2_decompress@@Base+0x924>
    8ec4:	ldr	x1, [x19]
    8ec8:	ldr	w2, [x1, #8]
    8ecc:	cbz	w2, b17c <BZ2_decompress@@Base+0x2b50>
    8ed0:	ldr	w2, [x19, #32]
    8ed4:	ldr	x3, [x1]
    8ed8:	ldrb	w3, [x3]
    8edc:	orr	w2, w3, w2, lsl #8
    8ee0:	str	w2, [x19, #32]
    8ee4:	add	w0, w0, #0x8
    8ee8:	str	w0, [x19, #36]
    8eec:	ldr	x0, [x1]
    8ef0:	add	x0, x0, #0x1
    8ef4:	str	x0, [x1]
    8ef8:	ldr	x1, [x19]
    8efc:	ldr	w0, [x1, #8]
    8f00:	sub	w0, w0, #0x1
    8f04:	str	w0, [x1, #8]
    8f08:	ldr	x1, [x19]
    8f0c:	ldr	w0, [x1, #12]
    8f10:	add	w0, w0, #0x1
    8f14:	str	w0, [x1, #12]
    8f18:	ldr	x0, [x19]
    8f1c:	ldr	w1, [x0, #12]
    8f20:	cbnz	w1, 8eb8 <BZ2_decompress@@Base+0x88c>
    8f24:	ldr	w1, [x0, #16]
    8f28:	add	w1, w1, #0x1
    8f2c:	str	w1, [x0, #16]
    8f30:	b	8eb8 <BZ2_decompress@@Base+0x88c>
    8f34:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    8f38:	add	x1, x1, #0x5f8
    8f3c:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    8f40:	ldr	x0, [x0, #4016]
    8f44:	ldr	x0, [x0]
    8f48:	bl	16e0 <fprintf@plt>
    8f4c:	b	8eac <BZ2_decompress@@Base+0x880>
    8f50:	sub	w0, w0, #0x8
    8f54:	ldr	w1, [x19, #32]
    8f58:	lsr	w1, w1, w0
    8f5c:	str	w0, [x19, #36]
    8f60:	ldr	w0, [x19, #3176]
    8f64:	bfi	w1, w0, #8, #24
    8f68:	str	w1, [x19, #3176]
    8f6c:	mov	w0, #0x15                  	// #21
    8f70:	str	w0, [x19, #8]
    8f74:	ldr	w0, [x19, #36]
    8f78:	cmp	w0, #0x7
    8f7c:	b.gt	8ff0 <BZ2_decompress@@Base+0x9c4>
    8f80:	ldr	x1, [x19]
    8f84:	ldr	w2, [x1, #8]
    8f88:	cbz	w2, b184 <BZ2_decompress@@Base+0x2b58>
    8f8c:	ldr	w2, [x19, #32]
    8f90:	ldr	x3, [x1]
    8f94:	ldrb	w3, [x3]
    8f98:	orr	w2, w3, w2, lsl #8
    8f9c:	str	w2, [x19, #32]
    8fa0:	add	w0, w0, #0x8
    8fa4:	str	w0, [x19, #36]
    8fa8:	ldr	x0, [x1]
    8fac:	add	x0, x0, #0x1
    8fb0:	str	x0, [x1]
    8fb4:	ldr	x1, [x19]
    8fb8:	ldr	w0, [x1, #8]
    8fbc:	sub	w0, w0, #0x1
    8fc0:	str	w0, [x1, #8]
    8fc4:	ldr	x1, [x19]
    8fc8:	ldr	w0, [x1, #12]
    8fcc:	add	w0, w0, #0x1
    8fd0:	str	w0, [x1, #12]
    8fd4:	ldr	x0, [x19]
    8fd8:	ldr	w1, [x0, #12]
    8fdc:	cbnz	w1, 8f74 <BZ2_decompress@@Base+0x948>
    8fe0:	ldr	w1, [x0, #16]
    8fe4:	add	w1, w1, #0x1
    8fe8:	str	w1, [x0, #16]
    8fec:	b	8f74 <BZ2_decompress@@Base+0x948>
    8ff0:	sub	w0, w0, #0x8
    8ff4:	ldr	w1, [x19, #32]
    8ff8:	lsr	w1, w1, w0
    8ffc:	str	w0, [x19, #36]
    9000:	ldr	w0, [x19, #3176]
    9004:	bfi	w1, w0, #8, #24
    9008:	str	w1, [x19, #3176]
    900c:	mov	w0, #0x16                  	// #22
    9010:	str	w0, [x19, #8]
    9014:	ldr	w0, [x19, #36]
    9018:	cmp	w0, #0x7
    901c:	b.gt	9090 <BZ2_decompress@@Base+0xa64>
    9020:	ldr	x1, [x19]
    9024:	ldr	w2, [x1, #8]
    9028:	cbz	w2, b18c <BZ2_decompress@@Base+0x2b60>
    902c:	ldr	w2, [x19, #32]
    9030:	ldr	x3, [x1]
    9034:	ldrb	w3, [x3]
    9038:	orr	w2, w3, w2, lsl #8
    903c:	str	w2, [x19, #32]
    9040:	add	w0, w0, #0x8
    9044:	str	w0, [x19, #36]
    9048:	ldr	x0, [x1]
    904c:	add	x0, x0, #0x1
    9050:	str	x0, [x1]
    9054:	ldr	x1, [x19]
    9058:	ldr	w0, [x1, #8]
    905c:	sub	w0, w0, #0x1
    9060:	str	w0, [x1, #8]
    9064:	ldr	x1, [x19]
    9068:	ldr	w0, [x1, #12]
    906c:	add	w0, w0, #0x1
    9070:	str	w0, [x1, #12]
    9074:	ldr	x0, [x19]
    9078:	ldr	w1, [x0, #12]
    907c:	cbnz	w1, 9014 <BZ2_decompress@@Base+0x9e8>
    9080:	ldr	w1, [x0, #16]
    9084:	add	w1, w1, #0x1
    9088:	str	w1, [x0, #16]
    908c:	b	9014 <BZ2_decompress@@Base+0x9e8>
    9090:	sub	w0, w0, #0x8
    9094:	ldr	w1, [x19, #32]
    9098:	lsr	w1, w1, w0
    909c:	str	w0, [x19, #36]
    90a0:	ldr	w0, [x19, #3176]
    90a4:	bfi	w1, w0, #8, #24
    90a8:	str	w1, [x19, #3176]
    90ac:	mov	w0, #0x17                  	// #23
    90b0:	str	w0, [x19, #8]
    90b4:	ldr	w0, [x19, #36]
    90b8:	cmp	w0, #0x7
    90bc:	b.gt	9130 <BZ2_decompress@@Base+0xb04>
    90c0:	ldr	x1, [x19]
    90c4:	ldr	w2, [x1, #8]
    90c8:	cbz	w2, b194 <BZ2_decompress@@Base+0x2b68>
    90cc:	ldr	w2, [x19, #32]
    90d0:	ldr	x3, [x1]
    90d4:	ldrb	w3, [x3]
    90d8:	orr	w2, w3, w2, lsl #8
    90dc:	str	w2, [x19, #32]
    90e0:	add	w0, w0, #0x8
    90e4:	str	w0, [x19, #36]
    90e8:	ldr	x0, [x1]
    90ec:	add	x0, x0, #0x1
    90f0:	str	x0, [x1]
    90f4:	ldr	x1, [x19]
    90f8:	ldr	w0, [x1, #8]
    90fc:	sub	w0, w0, #0x1
    9100:	str	w0, [x1, #8]
    9104:	ldr	x1, [x19]
    9108:	ldr	w0, [x1, #12]
    910c:	add	w0, w0, #0x1
    9110:	str	w0, [x1, #12]
    9114:	ldr	x0, [x19]
    9118:	ldr	w1, [x0, #12]
    911c:	cbnz	w1, 90b4 <BZ2_decompress@@Base+0xa88>
    9120:	ldr	w1, [x0, #16]
    9124:	add	w1, w1, #0x1
    9128:	str	w1, [x0, #16]
    912c:	b	90b4 <BZ2_decompress@@Base+0xa88>
    9130:	sub	w0, w0, #0x8
    9134:	ldr	w1, [x19, #32]
    9138:	lsr	w1, w1, w0
    913c:	str	w0, [x19, #36]
    9140:	ldr	w0, [x19, #3176]
    9144:	bfi	w1, w0, #8, #24
    9148:	str	w1, [x19, #3176]
    914c:	mov	w0, #0x18                  	// #24
    9150:	str	w0, [x19, #8]
    9154:	ldr	w0, [x19, #36]
    9158:	cmp	w0, #0x0
    915c:	b.gt	91d0 <BZ2_decompress@@Base+0xba4>
    9160:	ldr	x1, [x19]
    9164:	ldr	w2, [x1, #8]
    9168:	cbz	w2, b19c <BZ2_decompress@@Base+0x2b70>
    916c:	ldr	w2, [x19, #32]
    9170:	ldr	x3, [x1]
    9174:	ldrb	w3, [x3]
    9178:	orr	w2, w3, w2, lsl #8
    917c:	str	w2, [x19, #32]
    9180:	add	w0, w0, #0x8
    9184:	str	w0, [x19, #36]
    9188:	ldr	x0, [x1]
    918c:	add	x0, x0, #0x1
    9190:	str	x0, [x1]
    9194:	ldr	x1, [x19]
    9198:	ldr	w0, [x1, #8]
    919c:	sub	w0, w0, #0x1
    91a0:	str	w0, [x1, #8]
    91a4:	ldr	x1, [x19]
    91a8:	ldr	w0, [x1, #12]
    91ac:	add	w0, w0, #0x1
    91b0:	str	w0, [x1, #12]
    91b4:	ldr	x0, [x19]
    91b8:	ldr	w1, [x0, #12]
    91bc:	cbnz	w1, 9154 <BZ2_decompress@@Base+0xb28>
    91c0:	ldr	w1, [x0, #16]
    91c4:	add	w1, w1, #0x1
    91c8:	str	w1, [x0, #16]
    91cc:	b	9154 <BZ2_decompress@@Base+0xb28>
    91d0:	sub	w0, w0, #0x1
    91d4:	ldr	w1, [x19, #32]
    91d8:	lsr	w1, w1, w0
    91dc:	and	w1, w1, #0x1
    91e0:	str	w0, [x19, #36]
    91e4:	strb	w1, [x19, #20]
    91e8:	str	wzr, [x19, #56]
    91ec:	mov	w0, #0x19                  	// #25
    91f0:	str	w0, [x19, #8]
    91f4:	ldr	w0, [x19, #36]
    91f8:	cmp	w0, #0x7
    91fc:	b.gt	9270 <BZ2_decompress@@Base+0xc44>
    9200:	ldr	x1, [x19]
    9204:	ldr	w2, [x1, #8]
    9208:	cbz	w2, b1a4 <BZ2_decompress@@Base+0x2b78>
    920c:	ldr	w2, [x19, #32]
    9210:	ldr	x3, [x1]
    9214:	ldrb	w3, [x3]
    9218:	orr	w2, w3, w2, lsl #8
    921c:	str	w2, [x19, #32]
    9220:	add	w0, w0, #0x8
    9224:	str	w0, [x19, #36]
    9228:	ldr	x0, [x1]
    922c:	add	x0, x0, #0x1
    9230:	str	x0, [x1]
    9234:	ldr	x1, [x19]
    9238:	ldr	w0, [x1, #8]
    923c:	sub	w0, w0, #0x1
    9240:	str	w0, [x1, #8]
    9244:	ldr	x1, [x19]
    9248:	ldr	w0, [x1, #12]
    924c:	add	w0, w0, #0x1
    9250:	str	w0, [x1, #12]
    9254:	ldr	x0, [x19]
    9258:	ldr	w1, [x0, #12]
    925c:	cbnz	w1, 91f4 <BZ2_decompress@@Base+0xbc8>
    9260:	ldr	w1, [x0, #16]
    9264:	add	w1, w1, #0x1
    9268:	str	w1, [x0, #16]
    926c:	b	91f4 <BZ2_decompress@@Base+0xbc8>
    9270:	sub	w0, w0, #0x8
    9274:	ldr	w1, [x19, #32]
    9278:	lsr	w1, w1, w0
    927c:	str	w0, [x19, #36]
    9280:	ldr	w0, [x19, #56]
    9284:	bfi	w1, w0, #8, #24
    9288:	str	w1, [x19, #56]
    928c:	mov	w0, #0x1a                  	// #26
    9290:	str	w0, [x19, #8]
    9294:	ldr	w0, [x19, #36]
    9298:	cmp	w0, #0x7
    929c:	b.gt	9310 <BZ2_decompress@@Base+0xce4>
    92a0:	ldr	x1, [x19]
    92a4:	ldr	w2, [x1, #8]
    92a8:	cbz	w2, b1ac <BZ2_decompress@@Base+0x2b80>
    92ac:	ldr	w2, [x19, #32]
    92b0:	ldr	x3, [x1]
    92b4:	ldrb	w3, [x3]
    92b8:	orr	w2, w3, w2, lsl #8
    92bc:	str	w2, [x19, #32]
    92c0:	add	w0, w0, #0x8
    92c4:	str	w0, [x19, #36]
    92c8:	ldr	x0, [x1]
    92cc:	add	x0, x0, #0x1
    92d0:	str	x0, [x1]
    92d4:	ldr	x1, [x19]
    92d8:	ldr	w0, [x1, #8]
    92dc:	sub	w0, w0, #0x1
    92e0:	str	w0, [x1, #8]
    92e4:	ldr	x1, [x19]
    92e8:	ldr	w0, [x1, #12]
    92ec:	add	w0, w0, #0x1
    92f0:	str	w0, [x1, #12]
    92f4:	ldr	x0, [x19]
    92f8:	ldr	w1, [x0, #12]
    92fc:	cbnz	w1, 9294 <BZ2_decompress@@Base+0xc68>
    9300:	ldr	w1, [x0, #16]
    9304:	add	w1, w1, #0x1
    9308:	str	w1, [x0, #16]
    930c:	b	9294 <BZ2_decompress@@Base+0xc68>
    9310:	sub	w0, w0, #0x8
    9314:	ldr	w1, [x19, #32]
    9318:	lsr	w1, w1, w0
    931c:	str	w0, [x19, #36]
    9320:	ldr	w0, [x19, #56]
    9324:	bfi	w1, w0, #8, #24
    9328:	str	w1, [x19, #56]
    932c:	mov	w0, #0x1b                  	// #27
    9330:	str	w0, [x19, #8]
    9334:	ldr	w0, [x19, #36]
    9338:	cmp	w0, #0x7
    933c:	b.gt	93b0 <BZ2_decompress@@Base+0xd84>
    9340:	ldr	x1, [x19]
    9344:	ldr	w2, [x1, #8]
    9348:	cbz	w2, b1bc <BZ2_decompress@@Base+0x2b90>
    934c:	ldr	w2, [x19, #32]
    9350:	ldr	x3, [x1]
    9354:	ldrb	w3, [x3]
    9358:	orr	w2, w3, w2, lsl #8
    935c:	str	w2, [x19, #32]
    9360:	add	w0, w0, #0x8
    9364:	str	w0, [x19, #36]
    9368:	ldr	x0, [x1]
    936c:	add	x0, x0, #0x1
    9370:	str	x0, [x1]
    9374:	ldr	x1, [x19]
    9378:	ldr	w0, [x1, #8]
    937c:	sub	w0, w0, #0x1
    9380:	str	w0, [x1, #8]
    9384:	ldr	x1, [x19]
    9388:	ldr	w0, [x1, #12]
    938c:	add	w0, w0, #0x1
    9390:	str	w0, [x1, #12]
    9394:	ldr	x0, [x19]
    9398:	ldr	w1, [x0, #12]
    939c:	cbnz	w1, 9334 <BZ2_decompress@@Base+0xd08>
    93a0:	ldr	w1, [x0, #16]
    93a4:	add	w1, w1, #0x1
    93a8:	str	w1, [x0, #16]
    93ac:	b	9334 <BZ2_decompress@@Base+0xd08>
    93b0:	sub	w0, w0, #0x8
    93b4:	ldr	w1, [x19, #32]
    93b8:	lsr	w1, w1, w0
    93bc:	str	w0, [x19, #36]
    93c0:	ldr	w0, [x19, #56]
    93c4:	bfi	w1, w0, #8, #24
    93c8:	mov	w0, w1
    93cc:	str	w1, [x19, #56]
    93d0:	tbnz	w1, #31, b1b4 <BZ2_decompress@@Base+0x2b88>
    93d4:	ldr	w1, [x19, #40]
    93d8:	mov	w2, #0x86a0                	// #34464
    93dc:	movk	w2, #0x1, lsl #16
    93e0:	mul	w1, w1, w2
    93e4:	add	w1, w1, #0xa
    93e8:	cmp	w0, w1
    93ec:	b.gt	b1c4 <BZ2_decompress@@Base+0x2b98>
    93f0:	mov	w25, #0x0                   	// #0
    93f4:	sxtw	x3, w25
    93f8:	mov	w4, #0x1c                  	// #28
    93fc:	add	x5, x19, #0xd7c
    9400:	mov	w25, w3
    9404:	str	w4, [x19, #8]
    9408:	ldr	w0, [x19, #36]
    940c:	cmp	w0, #0x0
    9410:	b.gt	9484 <BZ2_decompress@@Base+0xe58>
    9414:	ldr	x1, [x19]
    9418:	ldr	w2, [x1, #8]
    941c:	cbz	w2, b1cc <BZ2_decompress@@Base+0x2ba0>
    9420:	ldr	w2, [x19, #32]
    9424:	ldr	x6, [x1]
    9428:	ldrb	w6, [x6]
    942c:	orr	w2, w6, w2, lsl #8
    9430:	str	w2, [x19, #32]
    9434:	add	w0, w0, #0x8
    9438:	str	w0, [x19, #36]
    943c:	ldr	x0, [x1]
    9440:	add	x0, x0, #0x1
    9444:	str	x0, [x1]
    9448:	ldr	x1, [x19]
    944c:	ldr	w0, [x1, #8]
    9450:	sub	w0, w0, #0x1
    9454:	str	w0, [x1, #8]
    9458:	ldr	x1, [x19]
    945c:	ldr	w0, [x1, #12]
    9460:	add	w0, w0, #0x1
    9464:	str	w0, [x1, #12]
    9468:	ldr	x0, [x19]
    946c:	ldr	w1, [x0, #12]
    9470:	cbnz	w1, 9408 <BZ2_decompress@@Base+0xddc>
    9474:	ldr	w1, [x0, #16]
    9478:	add	w1, w1, #0x1
    947c:	str	w1, [x0, #16]
    9480:	b	9408 <BZ2_decompress@@Base+0xddc>
    9484:	sub	w0, w0, #0x1
    9488:	ldr	w1, [x19, #32]
    948c:	lsr	w1, w1, w0
    9490:	str	w0, [x19, #36]
    9494:	and	w0, w1, #0x1
    9498:	strb	w0, [x5, x3]
    949c:	add	x3, x3, #0x1
    94a0:	cmp	w3, #0xf
    94a4:	b.le	9400 <BZ2_decompress@@Base+0xdd4>
    94a8:	add	x0, x19, #0xc7c
    94ac:	add	x1, x19, #0xd7c
    94b0:	strb	wzr, [x0], #1
    94b4:	cmp	x0, x1
    94b8:	b.ne	94b0 <BZ2_decompress@@Base+0xe84>  // b.any
    94bc:	mov	w25, #0x0                   	// #0
    94c0:	add	x0, x19, w25, sxtw
    94c4:	ldrb	w0, [x0, #3452]
    94c8:	cbz	w0, 957c <BZ2_decompress@@Base+0xf50>
    94cc:	mov	w23, #0x0                   	// #0
    94d0:	lsl	w5, w25, #4
    94d4:	mov	w3, #0x1d                  	// #29
    94d8:	mov	w4, #0x1                   	// #1
    94dc:	str	w3, [x19, #8]
    94e0:	ldr	w0, [x19, #36]
    94e4:	cmp	w0, #0x0
    94e8:	b.gt	955c <BZ2_decompress@@Base+0xf30>
    94ec:	ldr	x1, [x19]
    94f0:	ldr	w2, [x1, #8]
    94f4:	cbz	w2, b290 <BZ2_decompress@@Base+0x2c64>
    94f8:	ldr	w2, [x19, #32]
    94fc:	ldr	x6, [x1]
    9500:	ldrb	w6, [x6]
    9504:	orr	w2, w6, w2, lsl #8
    9508:	str	w2, [x19, #32]
    950c:	add	w0, w0, #0x8
    9510:	str	w0, [x19, #36]
    9514:	ldr	x0, [x1]
    9518:	add	x0, x0, #0x1
    951c:	str	x0, [x1]
    9520:	ldr	x1, [x19]
    9524:	ldr	w0, [x1, #8]
    9528:	sub	w0, w0, #0x1
    952c:	str	w0, [x1, #8]
    9530:	ldr	x1, [x19]
    9534:	ldr	w0, [x1, #12]
    9538:	add	w0, w0, #0x1
    953c:	str	w0, [x1, #12]
    9540:	ldr	x0, [x19]
    9544:	ldr	w1, [x0, #12]
    9548:	cbnz	w1, 94e0 <BZ2_decompress@@Base+0xeb4>
    954c:	ldr	w1, [x0, #16]
    9550:	add	w1, w1, #0x1
    9554:	str	w1, [x0, #16]
    9558:	b	94e0 <BZ2_decompress@@Base+0xeb4>
    955c:	sub	w0, w0, #0x1
    9560:	ldr	w1, [x19, #32]
    9564:	lsr	w1, w1, w0
    9568:	str	w0, [x19, #36]
    956c:	tbnz	w1, #0, 9598 <BZ2_decompress@@Base+0xf6c>
    9570:	add	w23, w23, #0x1
    9574:	cmp	w23, #0xf
    9578:	b.le	94dc <BZ2_decompress@@Base+0xeb0>
    957c:	add	w25, w25, #0x1
    9580:	cmp	w25, #0xf
    9584:	b.le	94c0 <BZ2_decompress@@Base+0xe94>
    9588:	str	wzr, [x19, #3192]
    958c:	mov	x0, #0x0                   	// #0
    9590:	add	x2, x19, #0xc7c
    9594:	b	95b4 <BZ2_decompress@@Base+0xf88>
    9598:	add	w0, w23, w5
    959c:	add	x0, x19, w0, sxtw
    95a0:	strb	w4, [x0, #3196]
    95a4:	b	9570 <BZ2_decompress@@Base+0xf44>
    95a8:	add	x0, x0, #0x1
    95ac:	cmp	x0, #0x100
    95b0:	b.eq	95d4 <BZ2_decompress@@Base+0xfa8>  // b.none
    95b4:	ldrb	w1, [x2, x0]
    95b8:	cbz	w1, 95a8 <BZ2_decompress@@Base+0xf7c>
    95bc:	ldr	w1, [x19, #3192]
    95c0:	add	x3, x19, w1, sxtw
    95c4:	strb	w0, [x3, #3468]
    95c8:	add	w1, w1, #0x1
    95cc:	str	w1, [x19, #3192]
    95d0:	b	95a8 <BZ2_decompress@@Base+0xf7c>
    95d4:	ldr	w0, [x19, #3192]
    95d8:	cbz	w0, b298 <BZ2_decompress@@Base+0x2c6c>
    95dc:	add	w22, w0, #0x2
    95e0:	mov	w0, #0x1e                  	// #30
    95e4:	str	w0, [x19, #8]
    95e8:	ldr	w0, [x19, #36]
    95ec:	cmp	w0, #0x2
    95f0:	b.gt	9664 <BZ2_decompress@@Base+0x1038>
    95f4:	ldr	x1, [x19]
    95f8:	ldr	w2, [x1, #8]
    95fc:	cbz	w2, b2a8 <BZ2_decompress@@Base+0x2c7c>
    9600:	ldr	w2, [x19, #32]
    9604:	ldr	x3, [x1]
    9608:	ldrb	w3, [x3]
    960c:	orr	w2, w3, w2, lsl #8
    9610:	str	w2, [x19, #32]
    9614:	add	w0, w0, #0x8
    9618:	str	w0, [x19, #36]
    961c:	ldr	x0, [x1]
    9620:	add	x0, x0, #0x1
    9624:	str	x0, [x1]
    9628:	ldr	x1, [x19]
    962c:	ldr	w0, [x1, #8]
    9630:	sub	w0, w0, #0x1
    9634:	str	w0, [x1, #8]
    9638:	ldr	x1, [x19]
    963c:	ldr	w0, [x1, #12]
    9640:	add	w0, w0, #0x1
    9644:	str	w0, [x1, #12]
    9648:	ldr	x0, [x19]
    964c:	ldr	w1, [x0, #12]
    9650:	cbnz	w1, 95e8 <BZ2_decompress@@Base+0xfbc>
    9654:	ldr	w1, [x0, #16]
    9658:	add	w1, w1, #0x1
    965c:	str	w1, [x0, #16]
    9660:	b	95e8 <BZ2_decompress@@Base+0xfbc>
    9664:	sub	w0, w0, #0x3
    9668:	ldr	w1, [x19, #32]
    966c:	lsr	w1, w1, w0
    9670:	and	w1, w1, #0x7
    9674:	str	w0, [x19, #36]
    9678:	mov	w24, w1
    967c:	sub	w1, w1, #0x2
    9680:	cmp	w1, #0x4
    9684:	b.hi	b2a0 <BZ2_decompress@@Base+0x2c74>  // b.pmore
    9688:	mov	w0, #0x1f                  	// #31
    968c:	str	w0, [x19, #8]
    9690:	ldr	w0, [x19, #36]
    9694:	cmp	w0, #0xe
    9698:	b.gt	970c <BZ2_decompress@@Base+0x10e0>
    969c:	ldr	x1, [x19]
    96a0:	ldr	w2, [x1, #8]
    96a4:	cbz	w2, b2b8 <BZ2_decompress@@Base+0x2c8c>
    96a8:	ldr	w2, [x19, #32]
    96ac:	ldr	x3, [x1]
    96b0:	ldrb	w3, [x3]
    96b4:	orr	w2, w3, w2, lsl #8
    96b8:	str	w2, [x19, #32]
    96bc:	add	w0, w0, #0x8
    96c0:	str	w0, [x19, #36]
    96c4:	ldr	x0, [x1]
    96c8:	add	x0, x0, #0x1
    96cc:	str	x0, [x1]
    96d0:	ldr	x1, [x19]
    96d4:	ldr	w0, [x1, #8]
    96d8:	sub	w0, w0, #0x1
    96dc:	str	w0, [x1, #8]
    96e0:	ldr	x1, [x19]
    96e4:	ldr	w0, [x1, #12]
    96e8:	add	w0, w0, #0x1
    96ec:	str	w0, [x1, #12]
    96f0:	ldr	x0, [x19]
    96f4:	ldr	w1, [x0, #12]
    96f8:	cbnz	w1, 9690 <BZ2_decompress@@Base+0x1064>
    96fc:	ldr	w1, [x0, #16]
    9700:	add	w1, w1, #0x1
    9704:	str	w1, [x0, #16]
    9708:	b	9690 <BZ2_decompress@@Base+0x1064>
    970c:	sub	w0, w0, #0xf
    9710:	ldr	w1, [x19, #32]
    9714:	lsr	w1, w1, w0
    9718:	and	w1, w1, #0x7fff
    971c:	str	w0, [x19, #36]
    9720:	str	w1, [sp, #108]
    9724:	cbz	w1, b2b0 <BZ2_decompress@@Base+0x2c84>
    9728:	mov	w23, #0x0                   	// #0
    972c:	mov	w25, #0x0                   	// #0
    9730:	sxtw	x4, w25
    9734:	mov	w3, #0x20                  	// #32
    9738:	mov	w6, #0x4651                	// #18001
    973c:	add	x5, x19, #0x6, lsl #12
    9740:	add	x5, x5, #0x51e
    9744:	mov	w25, w4
    9748:	str	w3, [x19, #8]
    974c:	ldr	w0, [x19, #36]
    9750:	cmp	w0, #0x0
    9754:	b.gt	97d0 <BZ2_decompress@@Base+0x11a4>
    9758:	ldr	x1, [x19]
    975c:	ldr	w2, [x1, #8]
    9760:	cbz	w2, b2c0 <BZ2_decompress@@Base+0x2c94>
    9764:	ldr	w2, [x19, #32]
    9768:	ldr	x7, [x1]
    976c:	ldrb	w7, [x7]
    9770:	orr	w2, w7, w2, lsl #8
    9774:	str	w2, [x19, #32]
    9778:	add	w0, w0, #0x8
    977c:	str	w0, [x19, #36]
    9780:	ldr	x0, [x1]
    9784:	add	x0, x0, #0x1
    9788:	str	x0, [x1]
    978c:	ldr	x1, [x19]
    9790:	ldr	w0, [x1, #8]
    9794:	sub	w0, w0, #0x1
    9798:	str	w0, [x1, #8]
    979c:	ldr	x1, [x19]
    97a0:	ldr	w0, [x1, #12]
    97a4:	add	w0, w0, #0x1
    97a8:	str	w0, [x1, #12]
    97ac:	ldr	x0, [x19]
    97b0:	ldr	w1, [x0, #12]
    97b4:	cbnz	w1, 974c <BZ2_decompress@@Base+0x1120>
    97b8:	ldr	w1, [x0, #16]
    97bc:	add	w1, w1, #0x1
    97c0:	str	w1, [x0, #16]
    97c4:	b	974c <BZ2_decompress@@Base+0x1120>
    97c8:	mov	w23, #0x0                   	// #0
    97cc:	b	9744 <BZ2_decompress@@Base+0x1118>
    97d0:	sub	w0, w0, #0x1
    97d4:	ldr	w1, [x19, #32]
    97d8:	lsr	w1, w1, w0
    97dc:	str	w0, [x19, #36]
    97e0:	and	w0, w1, #0x1
    97e4:	tbz	w1, #0, 97fc <BZ2_decompress@@Base+0x11d0>
    97e8:	add	w23, w23, #0x1
    97ec:	cmp	w24, w23
    97f0:	b.gt	9748 <BZ2_decompress@@Base+0x111c>
    97f4:	mov	w0, #0xfffffffc            	// #-4
    97f8:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    97fc:	cmp	w4, w6
    9800:	b.gt	9808 <BZ2_decompress@@Base+0x11dc>
    9804:	strb	w23, [x5, x4]
    9808:	add	x4, x4, #0x1
    980c:	ldr	w1, [sp, #108]
    9810:	cmp	w1, w4
    9814:	b.gt	97c8 <BZ2_decompress@@Base+0x119c>
    9818:	mov	w6, #0x4652                	// #18002
    981c:	cmp	w1, w6
    9820:	csel	w6, w1, w6, le
    9824:	cmp	w24, #0x0
    9828:	b.le	984c <BZ2_decompress@@Base+0x1220>
    982c:	mov	w1, #0x0                   	// #0
    9830:	add	x2, sp, #0xc8
    9834:	strb	w0, [x2, w1, sxtw]
    9838:	add	w0, w0, #0x1
    983c:	and	w0, w0, #0xff
    9840:	mov	w1, w0
    9844:	cmp	w0, w24
    9848:	b.lt	9834 <BZ2_decompress@@Base+0x1208>  // b.tstop
    984c:	ldr	w0, [sp, #108]
    9850:	cmp	w0, #0x0
    9854:	b.le	98c4 <BZ2_decompress@@Base+0x1298>
    9858:	mov	x3, #0x0                   	// #0
    985c:	add	x8, x19, #0x6, lsl #12
    9860:	add	x8, x8, #0x51e
    9864:	add	x5, sp, #0xc8
    9868:	add	x7, x19, #0x1, lsl #12
    986c:	add	x7, x7, #0xecc
    9870:	b	9888 <BZ2_decompress@@Base+0x125c>
    9874:	strb	w4, [sp, #200]
    9878:	strb	w4, [x7, x3]
    987c:	add	x3, x3, #0x1
    9880:	cmp	w6, w3
    9884:	b.le	98b0 <BZ2_decompress@@Base+0x1284>
    9888:	ldrb	w0, [x8, x3]
    988c:	ldrb	w4, [x5, w0, sxtw]
    9890:	cbz	w0, 9874 <BZ2_decompress@@Base+0x1248>
    9894:	add	x1, x5, w0, uxtb
    9898:	ldurb	w2, [x1, #-1]
    989c:	strb	w2, [x1], #-1
    98a0:	sub	w0, w0, #0x1
    98a4:	ands	w0, w0, #0xff
    98a8:	b.ne	9898 <BZ2_decompress@@Base+0x126c>  // b.any
    98ac:	b	9874 <BZ2_decompress@@Base+0x1248>
    98b0:	cmp	w6, #0x0
    98b4:	csinc	w25, w6, wzr, gt
    98b8:	str	w6, [sp, #108]
    98bc:	mov	w26, #0x0                   	// #0
    98c0:	b	9974 <BZ2_decompress@@Base+0x1348>
    98c4:	mov	w25, #0x0                   	// #0
    98c8:	b	98b8 <BZ2_decompress@@Base+0x128c>
    98cc:	mov	w0, #0x21                  	// #33
    98d0:	str	w0, [x19, #8]
    98d4:	ldr	w0, [x19, #36]
    98d8:	cmp	w0, #0x4
    98dc:	b.gt	9950 <BZ2_decompress@@Base+0x1324>
    98e0:	ldr	x1, [x19]
    98e4:	ldr	w2, [x1, #8]
    98e8:	cbz	w2, b2c8 <BZ2_decompress@@Base+0x2c9c>
    98ec:	ldr	w2, [x19, #32]
    98f0:	ldr	x3, [x1]
    98f4:	ldrb	w3, [x3]
    98f8:	orr	w2, w3, w2, lsl #8
    98fc:	str	w2, [x19, #32]
    9900:	add	w0, w0, #0x8
    9904:	str	w0, [x19, #36]
    9908:	ldr	x0, [x1]
    990c:	add	x0, x0, #0x1
    9910:	str	x0, [x1]
    9914:	ldr	x1, [x19]
    9918:	ldr	w0, [x1, #8]
    991c:	sub	w0, w0, #0x1
    9920:	str	w0, [x1, #8]
    9924:	ldr	x1, [x19]
    9928:	ldr	w0, [x1, #12]
    992c:	add	w0, w0, #0x1
    9930:	str	w0, [x1, #12]
    9934:	ldr	x0, [x19]
    9938:	ldr	w1, [x0, #12]
    993c:	cbnz	w1, 98d4 <BZ2_decompress@@Base+0x12a8>
    9940:	ldr	w1, [x0, #16]
    9944:	add	w1, w1, #0x1
    9948:	str	w1, [x0, #16]
    994c:	b	98d4 <BZ2_decompress@@Base+0x12a8>
    9950:	sub	w0, w0, #0x5
    9954:	ldr	w1, [x19, #32]
    9958:	lsr	w1, w1, w0
    995c:	str	w0, [x19, #36]
    9960:	and	w27, w1, #0x1f
    9964:	mov	w25, #0x0                   	// #0
    9968:	cmp	w25, w22
    996c:	b.lt	9b30 <BZ2_decompress@@Base+0x1504>  // b.tstop
    9970:	add	w26, w26, #0x1
    9974:	cmp	w26, w24
    9978:	b.lt	98cc <BZ2_decompress@@Base+0x12a0>  // b.tstop
    997c:	cmp	w24, #0x0
    9980:	b.le	9be0 <BZ2_decompress@@Base+0x15b4>
    9984:	add	x28, x19, #0xb, lsl #12
    9988:	add	x28, x28, #0x17c
    998c:	add	x26, x19, #0xa, lsl #12
    9990:	add	x26, x26, #0xb70
    9994:	mov	x25, #0x0                   	// #0
    9998:	add	x0, x19, #0xf, lsl #12
    999c:	add	x0, x0, #0xa0c
    99a0:	str	w23, [sp, #144]
    99a4:	str	w27, [sp, #148]
    99a8:	mov	x27, x0
    99ac:	mov	x1, #0x0                   	// #0
    99b0:	mov	w5, #0x0                   	// #0
    99b4:	mov	w23, #0x20                  	// #32
    99b8:	cmp	w22, #0x0
    99bc:	b.le	99e0 <BZ2_decompress@@Base+0x13b4>
    99c0:	ldrb	w0, [x26, x1]
    99c4:	cmp	w5, w0
    99c8:	csel	w5, w5, w0, ge  // ge = tcont
    99cc:	cmp	w23, w0
    99d0:	csel	w23, w23, w0, le
    99d4:	add	x1, x1, #0x1
    99d8:	cmp	w22, w1
    99dc:	b.gt	99c0 <BZ2_decompress@@Base+0x1394>
    99e0:	mov	w6, w22
    99e4:	mov	w4, w23
    99e8:	mov	x3, x26
    99ec:	add	x2, x28, #0x3, lsl #12
    99f0:	add	x2, x2, #0x60
    99f4:	add	x1, x28, #0x1, lsl #12
    99f8:	add	x1, x1, #0x830
    99fc:	mov	x0, x28
    9a00:	bl	1570 <BZ2_hbCreateDecodeTables@plt>
    9a04:	str	w23, [x27, x25, lsl #2]
    9a08:	add	x25, x25, #0x1
    9a0c:	add	x28, x28, #0x408
    9a10:	add	x26, x26, #0x102
    9a14:	cmp	w24, w25
    9a18:	b.gt	99ac <BZ2_decompress@@Base+0x1380>
    9a1c:	ldr	w23, [sp, #144]
    9a20:	ldr	w27, [sp, #148]
    9a24:	mov	w26, w24
    9a28:	ldr	w0, [x19, #3192]
    9a2c:	add	w0, w0, #0x1
    9a30:	str	w0, [sp, #164]
    9a34:	ldr	w1, [x19, #40]
    9a38:	mov	w0, #0x86a0                	// #34464
    9a3c:	movk	w0, #0x1, lsl #16
    9a40:	mul	w0, w1, w0
    9a44:	str	w0, [sp, #152]
    9a48:	add	x0, x19, #0x44
    9a4c:	add	x1, x19, #0x444
    9a50:	str	wzr, [x0], #4
    9a54:	cmp	x0, x1
    9a58:	b.ne	9a50 <BZ2_decompress@@Base+0x1424>  // b.any
    9a5c:	add	x6, x19, #0x1, lsl #12
    9a60:	add	x6, x6, #0xec8
    9a64:	add	x2, x19, #0x1, lsl #12
    9a68:	add	x2, x2, #0xe8b
    9a6c:	add	x4, x19, #0x1, lsl #12
    9a70:	add	x4, x4, #0xe7b
    9a74:	mov	w5, #0xff0                 	// #4080
    9a78:	b	9c00 <BZ2_decompress@@Base+0x15d4>
    9a7c:	sub	w0, w0, #0x1
    9a80:	ldr	w1, [x19, #32]
    9a84:	lsr	w1, w1, w0
    9a88:	str	w0, [x19, #36]
    9a8c:	tbz	w1, #0, 9bc0 <BZ2_decompress@@Base+0x1594>
    9a90:	mov	w0, #0x23                  	// #35
    9a94:	str	w0, [x19, #8]
    9a98:	ldr	w0, [x19, #36]
    9a9c:	cmp	w0, #0x0
    9aa0:	b.gt	9b14 <BZ2_decompress@@Base+0x14e8>
    9aa4:	ldr	x1, [x19]
    9aa8:	ldr	w2, [x1, #8]
    9aac:	cbz	w2, b2e0 <BZ2_decompress@@Base+0x2cb4>
    9ab0:	ldr	w2, [x19, #32]
    9ab4:	ldr	x3, [x1]
    9ab8:	ldrb	w3, [x3]
    9abc:	orr	w2, w3, w2, lsl #8
    9ac0:	str	w2, [x19, #32]
    9ac4:	add	w0, w0, #0x8
    9ac8:	str	w0, [x19, #36]
    9acc:	ldr	x0, [x1]
    9ad0:	add	x0, x0, #0x1
    9ad4:	str	x0, [x1]
    9ad8:	ldr	x1, [x19]
    9adc:	ldr	w0, [x1, #8]
    9ae0:	sub	w0, w0, #0x1
    9ae4:	str	w0, [x1, #8]
    9ae8:	ldr	x1, [x19]
    9aec:	ldr	w0, [x1, #12]
    9af0:	add	w0, w0, #0x1
    9af4:	str	w0, [x1, #12]
    9af8:	ldr	x0, [x19]
    9afc:	ldr	w1, [x0, #12]
    9b00:	cbnz	w1, 9a98 <BZ2_decompress@@Base+0x146c>
    9b04:	ldr	w1, [x0, #16]
    9b08:	add	w1, w1, #0x1
    9b0c:	str	w1, [x0, #16]
    9b10:	b	9a98 <BZ2_decompress@@Base+0x146c>
    9b14:	sub	w0, w0, #0x1
    9b18:	ldr	w1, [x19, #32]
    9b1c:	lsr	w1, w1, w0
    9b20:	str	w0, [x19, #36]
    9b24:	sub	w0, w27, #0x1
    9b28:	tst	x1, #0x1
    9b2c:	csinc	w27, w0, w27, ne  // ne = any
    9b30:	sub	w0, w27, #0x1
    9b34:	cmp	w0, #0x13
    9b38:	b.hi	b2d0 <BZ2_decompress@@Base+0x2ca4>  // b.pmore
    9b3c:	mov	w0, #0x22                  	// #34
    9b40:	str	w0, [x19, #8]
    9b44:	ldr	w0, [x19, #36]
    9b48:	cmp	w0, #0x0
    9b4c:	b.gt	9a7c <BZ2_decompress@@Base+0x1450>
    9b50:	ldr	x1, [x19]
    9b54:	ldr	w2, [x1, #8]
    9b58:	cbz	w2, b2d8 <BZ2_decompress@@Base+0x2cac>
    9b5c:	ldr	w2, [x19, #32]
    9b60:	ldr	x3, [x1]
    9b64:	ldrb	w3, [x3]
    9b68:	orr	w2, w3, w2, lsl #8
    9b6c:	str	w2, [x19, #32]
    9b70:	add	w0, w0, #0x8
    9b74:	str	w0, [x19, #36]
    9b78:	ldr	x0, [x1]
    9b7c:	add	x0, x0, #0x1
    9b80:	str	x0, [x1]
    9b84:	ldr	x1, [x19]
    9b88:	ldr	w0, [x1, #8]
    9b8c:	sub	w0, w0, #0x1
    9b90:	str	w0, [x1, #8]
    9b94:	ldr	x1, [x19]
    9b98:	ldr	w0, [x1, #12]
    9b9c:	add	w0, w0, #0x1
    9ba0:	str	w0, [x1, #12]
    9ba4:	ldr	x0, [x19]
    9ba8:	ldr	w1, [x0, #12]
    9bac:	cbnz	w1, 9b44 <BZ2_decompress@@Base+0x1518>
    9bb0:	ldr	w1, [x0, #16]
    9bb4:	add	w1, w1, #0x1
    9bb8:	str	w1, [x0, #16]
    9bbc:	b	9b44 <BZ2_decompress@@Base+0x1518>
    9bc0:	sbfiz	x0, x26, #7, #32
    9bc4:	add	x0, x0, w26, sxtw
    9bc8:	add	x0, x19, x0, lsl #1
    9bcc:	add	x0, x0, w25, sxtw
    9bd0:	add	x0, x0, #0xa, lsl #12
    9bd4:	strb	w27, [x0, #2928]
    9bd8:	add	w25, w25, #0x1
    9bdc:	b	9968 <BZ2_decompress@@Base+0x133c>
    9be0:	mov	w26, #0x0                   	// #0
    9be4:	b	9a28 <BZ2_decompress@@Base+0x13fc>
    9be8:	str	w5, [x6], #-4
    9bec:	sub	w5, w5, #0x10
    9bf0:	sub	x2, x2, #0x10
    9bf4:	sub	x4, x4, #0x10
    9bf8:	cmp	w5, #0xef0
    9bfc:	b.eq	9c24 <BZ2_decompress@@Base+0x15f8>  // b.none
    9c00:	add	w3, w5, #0xf
    9c04:	and	w3, w3, #0xff
    9c08:	mov	x0, x2
    9c0c:	sub	w1, w0, w2
    9c10:	add	w1, w3, w1
    9c14:	strb	w1, [x0], #-1
    9c18:	cmp	x0, x4
    9c1c:	b.ne	9c0c <BZ2_decompress@@Base+0x15e0>  // b.any
    9c20:	b	9be8 <BZ2_decompress@@Base+0x15bc>
    9c24:	ldr	w0, [sp, #108]
    9c28:	cmp	w0, #0x0
    9c2c:	b.le	b2e8 <BZ2_decompress@@Base+0x2cbc>
    9c30:	add	x0, x19, #0x1, lsl #12
    9c34:	ldrb	w1, [x0, #3788]
    9c38:	str	w1, [sp, #168]
    9c3c:	add	x0, x19, w1, sxtw #2
    9c40:	add	x0, x0, #0xf, lsl #12
    9c44:	add	x0, x0, #0xa00
    9c48:	ldr	w20, [x0, #12]
    9c4c:	mov	x0, x1
    9c50:	ubfiz	x0, x0, #7, #8
    9c54:	add	x0, x0, w1, uxtb
    9c58:	lsl	x0, x0, #3
    9c5c:	add	x1, x0, #0xb, lsl #12
    9c60:	add	x1, x1, #0x17c
    9c64:	add	x1, x19, x1
    9c68:	str	x1, [sp, #112]
    9c6c:	add	x1, x0, #0xe, lsl #12
    9c70:	add	x1, x1, #0x1dc
    9c74:	add	x1, x19, x1
    9c78:	str	x1, [sp, #136]
    9c7c:	add	x0, x0, #0xc, lsl #12
    9c80:	add	x0, x0, #0x9ac
    9c84:	add	x0, x19, x0
    9c88:	str	x0, [sp, #120]
    9c8c:	str	w20, [sp, #160]
    9c90:	mov	w28, #0x0                   	// #0
    9c94:	mov	w0, #0x31                  	// #49
    9c98:	str	w0, [sp, #144]
    9c9c:	str	wzr, [sp, #148]
    9ca0:	mov	w25, #0x100                 	// #256
    9ca4:	mov	w0, #0x24                  	// #36
    9ca8:	str	w0, [x19, #8]
    9cac:	ldr	w0, [x19, #36]
    9cb0:	cmp	w0, w20
    9cb4:	b.ge	9d28 <BZ2_decompress@@Base+0x16fc>  // b.tcont
    9cb8:	ldr	x1, [x19]
    9cbc:	ldr	w2, [x1, #8]
    9cc0:	cbz	w2, b300 <BZ2_decompress@@Base+0x2cd4>
    9cc4:	ldr	w2, [x19, #32]
    9cc8:	ldr	x3, [x1]
    9ccc:	ldrb	w3, [x3]
    9cd0:	orr	w2, w3, w2, lsl #8
    9cd4:	str	w2, [x19, #32]
    9cd8:	add	w0, w0, #0x8
    9cdc:	str	w0, [x19, #36]
    9ce0:	ldr	x0, [x1]
    9ce4:	add	x0, x0, #0x1
    9ce8:	str	x0, [x1]
    9cec:	ldr	x1, [x19]
    9cf0:	ldr	w0, [x1, #8]
    9cf4:	sub	w0, w0, #0x1
    9cf8:	str	w0, [x1, #8]
    9cfc:	ldr	x1, [x19]
    9d00:	ldr	w0, [x1, #12]
    9d04:	add	w0, w0, #0x1
    9d08:	str	w0, [x1, #12]
    9d0c:	ldr	x0, [x19]
    9d10:	ldr	w1, [x0, #12]
    9d14:	cbnz	w1, 9cac <BZ2_decompress@@Base+0x1680>
    9d18:	ldr	w1, [x0, #16]
    9d1c:	add	w1, w1, #0x1
    9d20:	str	w1, [x0, #16]
    9d24:	b	9cac <BZ2_decompress@@Base+0x1680>
    9d28:	sub	w0, w0, w20
    9d2c:	ldr	w21, [x19, #32]
    9d30:	lsr	w21, w21, w0
    9d34:	mov	w1, #0x1                   	// #1
    9d38:	lsl	w1, w1, w20
    9d3c:	sub	w1, w1, #0x1
    9d40:	str	w0, [x19, #36]
    9d44:	and	w21, w21, w1
    9d48:	b	9d68 <BZ2_decompress@@Base+0x173c>
    9d4c:	sub	w0, w0, #0x1
    9d50:	ldr	w1, [x19, #32]
    9d54:	lsr	w1, w1, w0
    9d58:	and	w1, w1, #0x1
    9d5c:	str	w0, [x19, #36]
    9d60:	str	w1, [sp, #104]
    9d64:	orr	w21, w1, w21, lsl #1
    9d68:	cmp	w20, #0x14
    9d6c:	b.gt	b308 <BZ2_decompress@@Base+0x2cdc>
    9d70:	sxtw	x0, w20
    9d74:	ldr	x1, [sp, #112]
    9d78:	ldr	w1, [x1, x0, lsl #2]
    9d7c:	cmp	w1, w21
    9d80:	b.ge	9e0c <BZ2_decompress@@Base+0x17e0>  // b.tcont
    9d84:	add	w20, w20, #0x1
    9d88:	mov	w0, #0x25                  	// #37
    9d8c:	str	w0, [x19, #8]
    9d90:	ldr	w0, [x19, #36]
    9d94:	cmp	w0, #0x0
    9d98:	b.gt	9d4c <BZ2_decompress@@Base+0x1720>
    9d9c:	ldr	x1, [x19]
    9da0:	ldr	w2, [x1, #8]
    9da4:	cbz	w2, b310 <BZ2_decompress@@Base+0x2ce4>
    9da8:	ldr	w2, [x19, #32]
    9dac:	ldr	x3, [x1]
    9db0:	ldrb	w3, [x3]
    9db4:	orr	w2, w3, w2, lsl #8
    9db8:	str	w2, [x19, #32]
    9dbc:	add	w0, w0, #0x8
    9dc0:	str	w0, [x19, #36]
    9dc4:	ldr	x0, [x1]
    9dc8:	add	x0, x0, #0x1
    9dcc:	str	x0, [x1]
    9dd0:	ldr	x1, [x19]
    9dd4:	ldr	w0, [x1, #8]
    9dd8:	sub	w0, w0, #0x1
    9ddc:	str	w0, [x1, #8]
    9de0:	ldr	x1, [x19]
    9de4:	ldr	w0, [x1, #12]
    9de8:	add	w0, w0, #0x1
    9dec:	str	w0, [x1, #12]
    9df0:	ldr	x0, [x19]
    9df4:	ldr	w1, [x0, #12]
    9df8:	cbnz	w1, 9d90 <BZ2_decompress@@Base+0x1764>
    9dfc:	ldr	w1, [x0, #16]
    9e00:	add	w1, w1, #0x1
    9e04:	str	w1, [x0, #16]
    9e08:	b	9d90 <BZ2_decompress@@Base+0x1764>
    9e0c:	ldr	x1, [sp, #120]
    9e10:	ldr	w0, [x1, x0, lsl #2]
    9e14:	sub	w0, w21, w0
    9e18:	cmp	w0, #0x101
    9e1c:	b.hi	b318 <BZ2_decompress@@Base+0x2cec>  // b.pmore
    9e20:	ldr	x1, [sp, #136]
    9e24:	ldr	w0, [x1, w0, sxtw #2]
    9e28:	str	w0, [sp, #132]
    9e2c:	ldr	w1, [sp, #164]
    9e30:	ldr	w0, [sp, #132]
    9e34:	cmp	w1, w0
    9e38:	b.eq	a644 <BZ2_decompress@@Base+0x2018>  // b.none
    9e3c:	mov	w2, w0
    9e40:	cmp	w0, #0x1
    9e44:	b.ls	a0a8 <BZ2_decompress@@Base+0x1a7c>  // b.plast
    9e48:	ldr	w0, [sp, #152]
    9e4c:	cmp	w0, w28
    9e50:	b.le	b360 <BZ2_decompress@@Base+0x2d34>
    9e54:	ldr	w0, [sp, #132]
    9e58:	sub	w1, w0, #0x1
    9e5c:	mov	w0, w1
    9e60:	cmp	w1, #0xf
    9e64:	b.hi	a428 <BZ2_decompress@@Base+0x1dfc>  // b.pmore
    9e68:	ldr	w3, [x19, #7820]
    9e6c:	mov	w6, w3
    9e70:	add	w4, w3, w1
    9e74:	add	x4, x19, x4
    9e78:	ldrb	w7, [x4, #3724]
    9e7c:	cmp	w1, #0x3
    9e80:	b.ls	9f00 <BZ2_decompress@@Base+0x18d4>  // b.plast
    9e84:	sub	w0, w3, #0x2
    9e88:	add	w0, w0, w2
    9e8c:	mov	w5, #0x1                   	// #1
    9e90:	sub	w5, w5, w3
    9e94:	add	x8, x19, w0, sxtw
    9e98:	ldrb	w4, [x8, #3724]
    9e9c:	add	w1, w0, #0x1
    9ea0:	add	x1, x19, w1, sxtw
    9ea4:	strb	w4, [x1, #3724]
    9ea8:	sub	w4, w0, #0x1
    9eac:	add	x4, x19, w4, sxtw
    9eb0:	ldrb	w1, [x4, #3724]
    9eb4:	strb	w1, [x8, #3724]
    9eb8:	sub	w1, w0, #0x2
    9ebc:	add	x1, x19, w1, sxtw
    9ec0:	ldrb	w8, [x1, #3724]
    9ec4:	strb	w8, [x4, #3724]
    9ec8:	sub	w4, w0, #0x3
    9ecc:	add	x4, x19, w4, sxtw
    9ed0:	ldrb	w4, [x4, #3724]
    9ed4:	strb	w4, [x1, #3724]
    9ed8:	sub	w0, w0, #0x4
    9edc:	add	w1, w5, w0
    9ee0:	cmp	w1, #0x3
    9ee4:	b.hi	9e94 <BZ2_decompress@@Base+0x1868>  // b.pmore
    9ee8:	sub	w1, w2, #0x5
    9eec:	lsr	w1, w1, #2
    9ef0:	ldr	w0, [sp, #132]
    9ef4:	sub	w2, w0, #0x5
    9ef8:	mov	w0, #0xfffffffc            	// #-4
    9efc:	madd	w0, w1, w0, w2
    9f00:	cbz	w0, 9f28 <BZ2_decompress@@Base+0x18fc>
    9f04:	add	w0, w3, w0
    9f08:	sub	w1, w0, #0x1
    9f0c:	add	x2, x19, w1, uxtw
    9f10:	ldrb	w2, [x2, #3724]
    9f14:	add	x0, x19, w0, uxtw
    9f18:	strb	w2, [x0, #3724]
    9f1c:	mov	w0, w1
    9f20:	cmp	w6, w1
    9f24:	b.ne	9f08 <BZ2_decompress@@Base+0x18dc>  // b.any
    9f28:	add	x0, x19, w3, sxtw
    9f2c:	strb	w7, [x0, #3724]
    9f30:	add	x7, x19, w7, sxtw
    9f34:	ldrb	w2, [x7, #3468]
    9f38:	ldrb	w0, [x7, #3468]
    9f3c:	add	x0, x19, x0, lsl #2
    9f40:	ldr	w1, [x0, #68]
    9f44:	add	w1, w1, #0x1
    9f48:	str	w1, [x0, #68]
    9f4c:	ldrb	w0, [x19, #44]
    9f50:	cbz	w0, a52c <BZ2_decompress@@Base+0x1f00>
    9f54:	ldr	x0, [x19, #3160]
    9f58:	strh	w2, [x0, w28, sxtw #1]
    9f5c:	add	w28, w28, #0x1
    9f60:	ldr	w0, [sp, #144]
    9f64:	cbnz	w0, 9fec <BZ2_decompress@@Base+0x19c0>
    9f68:	ldr	w0, [sp, #148]
    9f6c:	add	w0, w0, #0x1
    9f70:	str	w0, [sp, #148]
    9f74:	ldr	w1, [sp, #108]
    9f78:	cmp	w1, w0
    9f7c:	b.le	b368 <BZ2_decompress@@Base+0x2d3c>
    9f80:	add	x0, x19, w0, sxtw
    9f84:	add	x0, x0, #0x1, lsl #12
    9f88:	ldrb	w1, [x0, #3788]
    9f8c:	str	w1, [sp, #168]
    9f90:	ldrb	w1, [x0, #3788]
    9f94:	add	x1, x1, #0x3, lsl #12
    9f98:	add	x1, x1, #0xe80
    9f9c:	add	x1, x19, x1, lsl #2
    9fa0:	ldr	w1, [x1, #12]
    9fa4:	str	w1, [sp, #160]
    9fa8:	ldrb	w0, [x0, #3788]
    9fac:	mov	x1, #0x408                 	// #1032
    9fb0:	mul	x0, x0, x1
    9fb4:	add	x1, x0, #0xb, lsl #12
    9fb8:	add	x1, x1, #0x17c
    9fbc:	add	x1, x19, x1
    9fc0:	str	x1, [sp, #112]
    9fc4:	add	x1, x0, #0xe, lsl #12
    9fc8:	add	x1, x1, #0x1dc
    9fcc:	add	x1, x19, x1
    9fd0:	str	x1, [sp, #136]
    9fd4:	add	x0, x0, #0xc, lsl #12
    9fd8:	add	x0, x0, #0x9ac
    9fdc:	add	x0, x19, x0
    9fe0:	str	x0, [sp, #120]
    9fe4:	mov	w0, #0x32                  	// #50
    9fe8:	str	w0, [sp, #144]
    9fec:	ldr	w0, [sp, #144]
    9ff0:	sub	w0, w0, #0x1
    9ff4:	str	w0, [sp, #144]
    9ff8:	ldr	w20, [sp, #160]
    9ffc:	mov	w0, #0x28                  	// #40
    a000:	str	w0, [x19, #8]
    a004:	ldr	w0, [x19, #36]
    a008:	cmp	w0, w20
    a00c:	b.ge	a538 <BZ2_decompress@@Base+0x1f0c>  // b.tcont
    a010:	ldr	x1, [x19]
    a014:	ldr	w2, [x1, #8]
    a018:	cbz	w2, b370 <BZ2_decompress@@Base+0x2d44>
    a01c:	ldr	w2, [x19, #32]
    a020:	ldr	x3, [x1]
    a024:	ldrb	w3, [x3]
    a028:	orr	w2, w3, w2, lsl #8
    a02c:	str	w2, [x19, #32]
    a030:	add	w0, w0, #0x8
    a034:	str	w0, [x19, #36]
    a038:	ldr	x0, [x1]
    a03c:	add	x0, x0, #0x1
    a040:	str	x0, [x1]
    a044:	ldr	x1, [x19]
    a048:	ldr	w0, [x1, #8]
    a04c:	sub	w0, w0, #0x1
    a050:	str	w0, [x1, #8]
    a054:	ldr	x1, [x19]
    a058:	ldr	w0, [x1, #12]
    a05c:	add	w0, w0, #0x1
    a060:	str	w0, [x1, #12]
    a064:	ldr	x0, [x19]
    a068:	ldr	w1, [x0, #12]
    a06c:	cbnz	w1, a004 <BZ2_decompress@@Base+0x19d8>
    a070:	ldr	w1, [x0, #16]
    a074:	add	w1, w1, #0x1
    a078:	str	w1, [x0, #16]
    a07c:	b	a004 <BZ2_decompress@@Base+0x19d8>
    a080:	str	w0, [sp, #128]
    a084:	b	9e2c <BZ2_decompress@@Base+0x1800>
    a088:	str	w0, [sp, #128]
    a08c:	b	9e2c <BZ2_decompress@@Base+0x1800>
    a090:	mov	w0, #0xfffffffc            	// #-4
    a094:	mov	w1, #0x1fffff              	// #2097151
    a098:	ldr	w2, [sp, #156]
    a09c:	cmp	w2, w1
    a0a0:	b.gt	b1d0 <BZ2_decompress@@Base+0x2ba4>
    a0a4:	b	a0b8 <BZ2_decompress@@Base+0x1a8c>
    a0a8:	mov	w0, #0x1                   	// #1
    a0ac:	str	w0, [sp, #156]
    a0b0:	mov	w0, #0xffffffff            	// #-1
    a0b4:	str	w0, [sp, #128]
    a0b8:	ldr	w0, [sp, #132]
    a0bc:	cbnz	w0, a1fc <BZ2_decompress@@Base+0x1bd0>
    a0c0:	ldr	w0, [sp, #128]
    a0c4:	ldr	w1, [sp, #156]
    a0c8:	add	w0, w0, w1
    a0cc:	str	w0, [sp, #128]
    a0d0:	ldr	w0, [sp, #156]
    a0d4:	lsl	w0, w0, #1
    a0d8:	str	w0, [sp, #156]
    a0dc:	ldr	w0, [sp, #144]
    a0e0:	cbnz	w0, a168 <BZ2_decompress@@Base+0x1b3c>
    a0e4:	ldr	w0, [sp, #148]
    a0e8:	add	w0, w0, #0x1
    a0ec:	str	w0, [sp, #148]
    a0f0:	ldr	w1, [sp, #108]
    a0f4:	cmp	w1, w0
    a0f8:	b.le	b320 <BZ2_decompress@@Base+0x2cf4>
    a0fc:	add	x0, x19, w0, sxtw
    a100:	add	x0, x0, #0x1, lsl #12
    a104:	ldrb	w1, [x0, #3788]
    a108:	str	w1, [sp, #168]
    a10c:	ldrb	w1, [x0, #3788]
    a110:	add	x1, x1, #0x3, lsl #12
    a114:	add	x1, x1, #0xe80
    a118:	add	x1, x19, x1, lsl #2
    a11c:	ldr	w1, [x1, #12]
    a120:	str	w1, [sp, #160]
    a124:	ldrb	w0, [x0, #3788]
    a128:	mov	x1, #0x408                 	// #1032
    a12c:	mul	x0, x0, x1
    a130:	add	x1, x0, #0xb, lsl #12
    a134:	add	x1, x1, #0x17c
    a138:	add	x1, x19, x1
    a13c:	str	x1, [sp, #112]
    a140:	add	x1, x0, #0xe, lsl #12
    a144:	add	x1, x1, #0x1dc
    a148:	add	x1, x19, x1
    a14c:	str	x1, [sp, #136]
    a150:	add	x0, x0, #0xc, lsl #12
    a154:	add	x0, x0, #0x9ac
    a158:	add	x0, x19, x0
    a15c:	str	x0, [sp, #120]
    a160:	mov	w0, #0x32                  	// #50
    a164:	str	w0, [sp, #144]
    a168:	ldr	w0, [sp, #144]
    a16c:	sub	w0, w0, #0x1
    a170:	str	w0, [sp, #144]
    a174:	ldr	w20, [sp, #160]
    a178:	mov	w0, #0x26                  	// #38
    a17c:	str	w0, [x19, #8]
    a180:	ldr	w0, [x19, #36]
    a184:	cmp	w0, w20
    a188:	b.ge	a21c <BZ2_decompress@@Base+0x1bf0>  // b.tcont
    a18c:	ldr	x1, [x19]
    a190:	ldr	w2, [x1, #8]
    a194:	cbz	w2, b328 <BZ2_decompress@@Base+0x2cfc>
    a198:	ldr	w2, [x19, #32]
    a19c:	ldr	x3, [x1]
    a1a0:	ldrb	w3, [x3]
    a1a4:	orr	w2, w3, w2, lsl #8
    a1a8:	str	w2, [x19, #32]
    a1ac:	add	w0, w0, #0x8
    a1b0:	str	w0, [x19, #36]
    a1b4:	ldr	x0, [x1]
    a1b8:	add	x0, x0, #0x1
    a1bc:	str	x0, [x1]
    a1c0:	ldr	x1, [x19]
    a1c4:	ldr	w0, [x1, #8]
    a1c8:	sub	w0, w0, #0x1
    a1cc:	str	w0, [x1, #8]
    a1d0:	ldr	x1, [x19]
    a1d4:	ldr	w0, [x1, #12]
    a1d8:	add	w0, w0, #0x1
    a1dc:	str	w0, [x1, #12]
    a1e0:	ldr	x0, [x19]
    a1e4:	ldr	w1, [x0, #12]
    a1e8:	cbnz	w1, a180 <BZ2_decompress@@Base+0x1b54>
    a1ec:	ldr	w1, [x0, #16]
    a1f0:	add	w1, w1, #0x1
    a1f4:	str	w1, [x0, #16]
    a1f8:	b	a180 <BZ2_decompress@@Base+0x1b54>
    a1fc:	ldr	w0, [sp, #132]
    a200:	cmp	w0, #0x1
    a204:	b.ne	a0d0 <BZ2_decompress@@Base+0x1aa4>  // b.any
    a208:	ldr	w0, [sp, #156]
    a20c:	ldr	w1, [sp, #128]
    a210:	add	w0, w1, w0, lsl #1
    a214:	str	w0, [sp, #128]
    a218:	b	a0d0 <BZ2_decompress@@Base+0x1aa4>
    a21c:	sub	w0, w0, w20
    a220:	ldr	w21, [x19, #32]
    a224:	lsr	w21, w21, w0
    a228:	mov	w1, #0x1                   	// #1
    a22c:	lsl	w1, w1, w20
    a230:	sub	w1, w1, #0x1
    a234:	str	w0, [x19, #36]
    a238:	and	w21, w21, w1
    a23c:	b	a25c <BZ2_decompress@@Base+0x1c30>
    a240:	sub	w0, w0, #0x1
    a244:	ldr	w1, [x19, #32]
    a248:	lsr	w1, w1, w0
    a24c:	and	w1, w1, #0x1
    a250:	str	w0, [x19, #36]
    a254:	str	w1, [sp, #104]
    a258:	orr	w21, w1, w21, lsl #1
    a25c:	cmp	w20, #0x14
    a260:	b.gt	b330 <BZ2_decompress@@Base+0x2d04>
    a264:	sxtw	x0, w20
    a268:	ldr	x1, [sp, #112]
    a26c:	ldr	w1, [x1, x0, lsl #2]
    a270:	cmp	w1, w21
    a274:	b.ge	a300 <BZ2_decompress@@Base+0x1cd4>  // b.tcont
    a278:	add	w20, w20, #0x1
    a27c:	mov	w0, #0x27                  	// #39
    a280:	str	w0, [x19, #8]
    a284:	ldr	w0, [x19, #36]
    a288:	cmp	w0, #0x0
    a28c:	b.gt	a240 <BZ2_decompress@@Base+0x1c14>
    a290:	ldr	x1, [x19]
    a294:	ldr	w2, [x1, #8]
    a298:	cbz	w2, b338 <BZ2_decompress@@Base+0x2d0c>
    a29c:	ldr	w2, [x19, #32]
    a2a0:	ldr	x3, [x1]
    a2a4:	ldrb	w3, [x3]
    a2a8:	orr	w2, w3, w2, lsl #8
    a2ac:	str	w2, [x19, #32]
    a2b0:	add	w0, w0, #0x8
    a2b4:	str	w0, [x19, #36]
    a2b8:	ldr	x0, [x1]
    a2bc:	add	x0, x0, #0x1
    a2c0:	str	x0, [x1]
    a2c4:	ldr	x1, [x19]
    a2c8:	ldr	w0, [x1, #8]
    a2cc:	sub	w0, w0, #0x1
    a2d0:	str	w0, [x1, #8]
    a2d4:	ldr	x1, [x19]
    a2d8:	ldr	w0, [x1, #12]
    a2dc:	add	w0, w0, #0x1
    a2e0:	str	w0, [x1, #12]
    a2e4:	ldr	x0, [x19]
    a2e8:	ldr	w1, [x0, #12]
    a2ec:	cbnz	w1, a284 <BZ2_decompress@@Base+0x1c58>
    a2f0:	ldr	w1, [x0, #16]
    a2f4:	add	w1, w1, #0x1
    a2f8:	str	w1, [x0, #16]
    a2fc:	b	a284 <BZ2_decompress@@Base+0x1c58>
    a300:	ldr	x1, [sp, #120]
    a304:	ldr	w0, [x1, x0, lsl #2]
    a308:	sub	w0, w21, w0
    a30c:	cmp	w0, #0x101
    a310:	b.hi	b340 <BZ2_decompress@@Base+0x2d14>  // b.pmore
    a314:	ldr	x1, [sp, #136]
    a318:	ldr	w0, [x1, w0, sxtw #2]
    a31c:	str	w0, [sp, #132]
    a320:	cmp	w0, #0x1
    a324:	b.ls	a090 <BZ2_decompress@@Base+0x1a64>  // b.plast
    a328:	ldr	w4, [sp, #128]
    a32c:	add	w0, w4, #0x1
    a330:	ldrsw	x1, [x19, #7820]
    a334:	add	x1, x19, x1
    a338:	ldrb	w1, [x1, #3724]
    a33c:	add	x1, x19, x1
    a340:	ldrb	w3, [x1, #3468]
    a344:	add	x2, x19, w3, uxtb #2
    a348:	ldr	w1, [x2, #68]
    a34c:	add	w1, w1, w0
    a350:	str	w1, [x2, #68]
    a354:	ldrb	w1, [x19, #44]
    a358:	cbnz	w1, a3b8 <BZ2_decompress@@Base+0x1d8c>
    a35c:	cmp	w0, #0x0
    a360:	b.le	a080 <BZ2_decompress@@Base+0x1a54>
    a364:	ldr	w1, [sp, #152]
    a368:	cmp	w1, w28
    a36c:	b.le	b348 <BZ2_decompress@@Base+0x2d1c>
    a370:	sbfiz	x2, x28, #2, #32
    a374:	add	w4, w4, w28
    a378:	sub	w1, w4, w1
    a37c:	add	w1, w1, #0x1
    a380:	mov	w5, w0
    a384:	mov	w0, #0x2                   	// #2
    a388:	ldr	x6, [x19, #3152]
    a38c:	str	w3, [x6, x2]
    a390:	sub	w6, w0, w5
    a394:	add	w28, w6, w4
    a398:	subs	w5, w5, #0x1
    a39c:	b.eq	a420 <BZ2_decompress@@Base+0x1df4>  // b.none
    a3a0:	add	x2, x2, #0x4
    a3a4:	cmp	w5, w1
    a3a8:	b.ne	a388 <BZ2_decompress@@Base+0x1d5c>  // b.any
    a3ac:	str	w1, [sp, #128]
    a3b0:	mov	w0, #0xfffffffc            	// #-4
    a3b4:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    a3b8:	cmp	w0, #0x0
    a3bc:	b.le	a088 <BZ2_decompress@@Base+0x1a5c>
    a3c0:	ldr	w1, [sp, #152]
    a3c4:	cmp	w1, w28
    a3c8:	b.le	b354 <BZ2_decompress@@Base+0x2d28>
    a3cc:	sbfiz	x2, x28, #1, #32
    a3d0:	ldr	w4, [sp, #128]
    a3d4:	add	w4, w4, w28
    a3d8:	sub	w1, w4, w1
    a3dc:	add	w1, w1, #0x1
    a3e0:	mov	w5, w0
    a3e4:	mov	w0, #0x2                   	// #2
    a3e8:	ldr	x6, [x19, #3160]
    a3ec:	strh	w3, [x6, x2]
    a3f0:	sub	w6, w0, w5
    a3f4:	add	w28, w6, w4
    a3f8:	subs	w5, w5, #0x1
    a3fc:	b.eq	a418 <BZ2_decompress@@Base+0x1dec>  // b.none
    a400:	add	x2, x2, #0x2
    a404:	cmp	w5, w1
    a408:	b.ne	a3e8 <BZ2_decompress@@Base+0x1dbc>  // b.any
    a40c:	str	w1, [sp, #128]
    a410:	mov	w0, #0xfffffffc            	// #-4
    a414:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    a418:	str	w5, [sp, #128]
    a41c:	b	9e2c <BZ2_decompress@@Base+0x1800>
    a420:	str	w5, [sp, #128]
    a424:	b	9e2c <BZ2_decompress@@Base+0x1800>
    a428:	and	w4, w1, #0xf
    a42c:	lsr	w0, w1, #4
    a430:	add	x5, x19, x0, lsl #2
    a434:	ldr	w3, [x5, #7820]
    a438:	add	w1, w3, w4
    a43c:	add	x2, x19, w1, sxtw
    a440:	ldrb	w7, [x2, #3724]
    a444:	cmp	w3, w1
    a448:	b.ge	a478 <BZ2_decompress@@Base+0x1e4c>  // b.tcont
    a44c:	sxtw	x2, w1
    a450:	add	x1, x19, w1, sxtw
    a454:	sub	w4, w4, #0x1
    a458:	sub	x2, x2, x4
    a45c:	sub	x4, x19, #0x1
    a460:	add	x2, x2, x4
    a464:	ldrb	w4, [x1, #3723]
    a468:	strb	w4, [x1, #3724]
    a46c:	sub	x1, x1, #0x1
    a470:	cmp	x1, x2
    a474:	b.ne	a464 <BZ2_decompress@@Base+0x1e38>  // b.any
    a478:	add	w3, w3, #0x1
    a47c:	str	w3, [x5, #7820]
    a480:	add	x3, x19, #0x1, lsl #12
    a484:	add	x3, x3, #0xe8c
    a488:	add	x4, x19, #0x1, lsl #12
    a48c:	add	x4, x4, #0xe88
    a490:	ldr	w1, [x3, x0, lsl #2]
    a494:	sub	w1, w1, #0x1
    a498:	str	w1, [x3, x0, lsl #2]
    a49c:	ldr	w2, [x4, x0, lsl #2]
    a4a0:	add	w2, w2, #0xf
    a4a4:	add	x2, x19, w2, sxtw
    a4a8:	ldrb	w2, [x2, #3724]
    a4ac:	add	x1, x19, w1, sxtw
    a4b0:	strb	w2, [x1, #3724]
    a4b4:	sub	x0, x0, #0x1
    a4b8:	cmp	w0, #0x0
    a4bc:	b.gt	a490 <BZ2_decompress@@Base+0x1e64>
    a4c0:	ldr	w0, [x19, #7820]
    a4c4:	sub	w0, w0, #0x1
    a4c8:	str	w0, [x19, #7820]
    a4cc:	add	x1, x19, w0, sxtw
    a4d0:	strb	w7, [x1, #3724]
    a4d4:	cbnz	w0, 9f30 <BZ2_decompress@@Base+0x1904>
    a4d8:	add	x6, x19, #0x1, lsl #12
    a4dc:	add	x6, x6, #0xec8
    a4e0:	mov	x3, #0xff0                 	// #4080
    a4e4:	add	x9, x19, #0xe8b
    a4e8:	mov	x8, x6
    a4ec:	ldrsw	x4, [x6]
    a4f0:	add	x0, x4, #0xe9b
    a4f4:	add	x0, x19, x0
    a4f8:	add	x5, x9, x4
    a4fc:	ldrb	w2, [x0]
    a500:	sub	x1, x0, x4
    a504:	strb	w2, [x1, x3]
    a508:	sub	x0, x0, #0x1
    a50c:	cmp	x0, x5
    a510:	b.ne	a4fc <BZ2_decompress@@Base+0x1ed0>  // b.any
    a514:	str	w3, [x8]
    a518:	sub	x6, x6, #0x4
    a51c:	sub	x3, x3, #0x10
    a520:	cmp	x3, #0xef0
    a524:	b.ne	a4e8 <BZ2_decompress@@Base+0x1ebc>  // b.any
    a528:	b	9f30 <BZ2_decompress@@Base+0x1904>
    a52c:	ldr	x0, [x19, #3152]
    a530:	str	w2, [x0, w28, sxtw #2]
    a534:	b	9f5c <BZ2_decompress@@Base+0x1930>
    a538:	sub	w0, w0, w20
    a53c:	ldr	w21, [x19, #32]
    a540:	lsr	w21, w21, w0
    a544:	mov	w1, #0x1                   	// #1
    a548:	lsl	w1, w1, w20
    a54c:	sub	w1, w1, #0x1
    a550:	str	w0, [x19, #36]
    a554:	and	w21, w21, w1
    a558:	b	a578 <BZ2_decompress@@Base+0x1f4c>
    a55c:	sub	w0, w0, #0x1
    a560:	ldr	w1, [x19, #32]
    a564:	lsr	w1, w1, w0
    a568:	and	w1, w1, #0x1
    a56c:	str	w0, [x19, #36]
    a570:	str	w1, [sp, #104]
    a574:	orr	w21, w1, w21, lsl #1
    a578:	cmp	w20, #0x14
    a57c:	b.gt	b378 <BZ2_decompress@@Base+0x2d4c>
    a580:	sxtw	x0, w20
    a584:	ldr	x1, [sp, #112]
    a588:	ldr	w1, [x1, x0, lsl #2]
    a58c:	cmp	w1, w21
    a590:	b.ge	a61c <BZ2_decompress@@Base+0x1ff0>  // b.tcont
    a594:	add	w20, w20, #0x1
    a598:	mov	w0, #0x29                  	// #41
    a59c:	str	w0, [x19, #8]
    a5a0:	ldr	w0, [x19, #36]
    a5a4:	cmp	w0, #0x0
    a5a8:	b.gt	a55c <BZ2_decompress@@Base+0x1f30>
    a5ac:	ldr	x1, [x19]
    a5b0:	ldr	w2, [x1, #8]
    a5b4:	cbz	w2, b380 <BZ2_decompress@@Base+0x2d54>
    a5b8:	ldr	w2, [x19, #32]
    a5bc:	ldr	x3, [x1]
    a5c0:	ldrb	w3, [x3]
    a5c4:	orr	w2, w3, w2, lsl #8
    a5c8:	str	w2, [x19, #32]
    a5cc:	add	w0, w0, #0x8
    a5d0:	str	w0, [x19, #36]
    a5d4:	ldr	x0, [x1]
    a5d8:	add	x0, x0, #0x1
    a5dc:	str	x0, [x1]
    a5e0:	ldr	x1, [x19]
    a5e4:	ldr	w0, [x1, #8]
    a5e8:	sub	w0, w0, #0x1
    a5ec:	str	w0, [x1, #8]
    a5f0:	ldr	x1, [x19]
    a5f4:	ldr	w0, [x1, #12]
    a5f8:	add	w0, w0, #0x1
    a5fc:	str	w0, [x1, #12]
    a600:	ldr	x0, [x19]
    a604:	ldr	w1, [x0, #12]
    a608:	cbnz	w1, a5a0 <BZ2_decompress@@Base+0x1f74>
    a60c:	ldr	w1, [x0, #16]
    a610:	add	w1, w1, #0x1
    a614:	str	w1, [x0, #16]
    a618:	b	a5a0 <BZ2_decompress@@Base+0x1f74>
    a61c:	ldr	x1, [sp, #120]
    a620:	ldr	w1, [x1, x0, lsl #2]
    a624:	sub	w1, w21, w1
    a628:	mov	w0, #0xfffffffc            	// #-4
    a62c:	cmp	w1, #0x101
    a630:	b.hi	b1d0 <BZ2_decompress@@Base+0x2ba4>  // b.pmore
    a634:	ldr	x0, [sp, #136]
    a638:	ldr	w0, [x0, w1, sxtw #2]
    a63c:	str	w0, [sp, #132]
    a640:	b	9e2c <BZ2_decompress@@Base+0x1800>
    a644:	ldr	w0, [x19, #56]
    a648:	cmp	w0, #0x0
    a64c:	ccmp	w0, w28, #0x0, ge  // ge = tcont
    a650:	b.lt	a65c <BZ2_decompress@@Base+0x2030>  // b.tstop
    a654:	mov	w0, #0xfffffffc            	// #-4
    a658:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    a65c:	mov	x1, #0x0                   	// #0
    a660:	add	x0, x19, #0x44
    a664:	mov	w25, w1
    a668:	ldr	w2, [x0, x1, lsl #2]
    a66c:	cmp	w2, #0x0
    a670:	ccmp	w2, w28, #0x0, ge  // ge = tcont
    a674:	b.gt	b388 <BZ2_decompress@@Base+0x2d5c>
    a678:	add	x1, x1, #0x1
    a67c:	cmp	x1, #0x100
    a680:	b.ne	a664 <BZ2_decompress@@Base+0x2038>  // b.any
    a684:	str	wzr, [x19, #1096]
    a688:	add	x2, x19, #0x444
    a68c:	ldr	w1, [x0]
    a690:	str	w1, [x0, #1032]
    a694:	add	x0, x0, #0x4
    a698:	cmp	x0, x2
    a69c:	b.ne	a68c <BZ2_decompress@@Base+0x2060>  // b.any
    a6a0:	add	x0, x19, #0x44c
    a6a4:	add	x3, x19, #0x84c
    a6a8:	str	x3, [sp, #184]
    a6ac:	ldr	w1, [x0]
    a6b0:	ldur	w2, [x0, #-4]
    a6b4:	add	w1, w1, w2
    a6b8:	str	w1, [x0], #4
    a6bc:	cmp	x0, x3
    a6c0:	b.ne	a6ac <BZ2_decompress@@Base+0x2080>  // b.any
    a6c4:	mov	x1, #0x0                   	// #0
    a6c8:	add	x0, x19, #0x448
    a6cc:	mov	w25, w1
    a6d0:	ldr	w2, [x0, x1, lsl #2]
    a6d4:	cmp	w2, #0x0
    a6d8:	ccmp	w2, w28, #0x0, ge  // ge = tcont
    a6dc:	b.gt	b390 <BZ2_decompress@@Base+0x2d64>
    a6e0:	add	x1, x1, #0x1
    a6e4:	cmp	x1, #0x101
    a6e8:	b.ne	a6cc <BZ2_decompress@@Base+0x20a0>  // b.any
    a6ec:	str	x0, [sp, #176]
    a6f0:	mov	w25, #0x1                   	// #1
    a6f4:	ldr	w2, [x0]
    a6f8:	ldr	w1, [x0, #4]
    a6fc:	cmp	w2, w1
    a700:	b.gt	b398 <BZ2_decompress@@Base+0x2d6c>
    a704:	add	w25, w25, #0x1
    a708:	add	x0, x0, #0x4
    a70c:	cmp	w25, #0x101
    a710:	b.ne	a6f4 <BZ2_decompress@@Base+0x20c8>  // b.any
    a714:	str	wzr, [x19, #16]
    a718:	strb	wzr, [x19, #12]
    a71c:	mov	w0, #0xffffffff            	// #-1
    a720:	str	w0, [x19, #3184]
    a724:	mov	w0, #0x2                   	// #2
    a728:	str	w0, [x19, #8]
    a72c:	ldr	w0, [x19, #52]
    a730:	cmp	w0, #0x1
    a734:	b.gt	a764 <BZ2_decompress@@Base+0x2138>
    a738:	ldrb	w0, [x19, #44]
    a73c:	cbz	w0, aab4 <BZ2_decompress@@Base+0x2488>
    a740:	ldr	x0, [sp, #176]
    a744:	ldr	w1, [x0]
    a748:	str	w1, [x0, #1028]
    a74c:	add	x0, x0, #0x4
    a750:	ldr	x1, [sp, #184]
    a754:	cmp	x0, x1
    a758:	b.ne	a744 <BZ2_decompress@@Base+0x2118>  // b.any
    a75c:	mov	x4, #0x0                   	// #0
    a760:	b	a7b8 <BZ2_decompress@@Base+0x218c>
    a764:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    a768:	ldr	x0, [x0, #4016]
    a76c:	ldr	x3, [x0]
    a770:	mov	x2, #0x6                   	// #6
    a774:	mov	x1, #0x1                   	// #1
    a778:	adrp	x0, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    a77c:	add	x0, x0, #0x610
    a780:	bl	1680 <fwrite@plt>
    a784:	b	a738 <BZ2_decompress@@Base+0x210c>
    a788:	asr	w0, w0, #1
    a78c:	sxtw	x0, w0
    a790:	ldr	x5, [x19, #3168]
    a794:	ldrsh	w2, [x1, #2126]
    a798:	ldrb	w3, [x5, x0]
    a79c:	and	w3, w3, #0xf
    a7a0:	orr	w2, w3, w2, lsl #4
    a7a4:	strb	w2, [x5, x0]
    a7a8:	ldr	w0, [x1, #2124]
    a7ac:	add	w0, w0, #0x1
    a7b0:	str	w0, [x1, #2124]
    a7b4:	add	x4, x4, #0x1
    a7b8:	mov	w0, w4
    a7bc:	cmp	w28, w4
    a7c0:	b.le	a804 <BZ2_decompress@@Base+0x21d8>
    a7c4:	lsl	x2, x4, #1
    a7c8:	ldr	x3, [x19, #3160]
    a7cc:	ldrb	w1, [x3, x2]
    a7d0:	add	x1, x19, x1, lsl #2
    a7d4:	ldr	w5, [x1, #2124]
    a7d8:	strh	w5, [x3, x2]
    a7dc:	tbnz	w4, #0, a788 <BZ2_decompress@@Base+0x215c>
    a7e0:	asr	w0, w0, #1
    a7e4:	sxtw	x0, w0
    a7e8:	ldr	x3, [x19, #3168]
    a7ec:	ldrb	w2, [x3, x0]
    a7f0:	and	w2, w2, #0xfffffff0
    a7f4:	ldrsh	w5, [x1, #2126]
    a7f8:	orr	w2, w2, w5
    a7fc:	strb	w2, [x3, x0]
    a800:	b	a7a8 <BZ2_decompress@@Base+0x217c>
    a804:	ldr	w0, [x19, #56]
    a808:	asr	w2, w0, #1
    a80c:	ldr	x1, [x19, #3168]
    a810:	ldrb	w23, [x1, w2, sxtw]
    a814:	ubfiz	w1, w0, #2, #1
    a818:	lsr	w23, w23, w1
    a81c:	ubfiz	w23, w23, #16, #4
    a820:	ldr	x1, [x19, #3160]
    a824:	ldrh	w1, [x1, w0, sxtw #1]
    a828:	orr	w23, w23, w1
    a82c:	b	a858 <BZ2_decompress@@Base+0x222c>
    a830:	ldr	x3, [x19, #3168]
    a834:	ldrb	w1, [x3, x2]
    a838:	and	w1, w1, #0xf
    a83c:	asr	w0, w0, #16
    a840:	orr	w0, w1, w0, lsl #4
    a844:	strb	w0, [x3, x2]
    a848:	mov	w0, w25
    a84c:	ldr	w1, [x19, #56]
    a850:	cmp	w1, w25
    a854:	b.eq	a8a8 <BZ2_decompress@@Base+0x227c>  // b.none
    a858:	sbfiz	x4, x23, #1, #32
    a85c:	ldr	x3, [x19, #3160]
    a860:	asr	w1, w23, #1
    a864:	sxtw	x2, w1
    a868:	mov	w25, w23
    a86c:	ldr	x5, [x19, #3168]
    a870:	ldrb	w1, [x5, w1, sxtw]
    a874:	ubfiz	w5, w23, #2, #1
    a878:	lsr	w1, w1, w5
    a87c:	ubfiz	w1, w1, #16, #4
    a880:	ldrh	w23, [x3, w23, sxtw #1]
    a884:	orr	w23, w1, w23
    a888:	strh	w0, [x3, x4]
    a88c:	tbnz	w25, #0, a830 <BZ2_decompress@@Base+0x2204>
    a890:	ldr	x3, [x19, #3168]
    a894:	ldrb	w1, [x3, x2]
    a898:	and	w1, w1, #0xfffffff0
    a89c:	orr	w0, w1, w0, asr #16
    a8a0:	strb	w0, [x3, x2]
    a8a4:	b	a848 <BZ2_decompress@@Base+0x221c>
    a8a8:	str	w25, [x19, #60]
    a8ac:	str	wzr, [x19, #1092]
    a8b0:	ldrb	w0, [x19, #20]
    a8b4:	cbz	w0, a978 <BZ2_decompress@@Base+0x234c>
    a8b8:	str	wzr, [x19, #24]
    a8bc:	str	wzr, [x19, #28]
    a8c0:	ldr	w0, [x19, #40]
    a8c4:	mov	w1, #0x86a0                	// #34464
    a8c8:	movk	w1, #0x1, lsl #16
    a8cc:	mul	w0, w0, w1
    a8d0:	cmp	w25, w0
    a8d4:	b.cc	a8e0 <BZ2_decompress@@Base+0x22b4>  // b.lo, b.ul, b.last
    a8d8:	mov	w0, #0x1                   	// #1
    a8dc:	b	b274 <BZ2_decompress@@Base+0x2c48>
    a8e0:	add	x1, x19, #0x448
    a8e4:	mov	w0, w25
    a8e8:	bl	1660 <BZ2_indexIntoF@plt>
    a8ec:	mov	w2, w0
    a8f0:	str	w0, [x19, #64]
    a8f4:	ldr	w1, [x19, #60]
    a8f8:	lsr	w0, w1, #1
    a8fc:	ldr	x3, [x19, #3168]
    a900:	ldrb	w0, [x3, x0]
    a904:	ubfiz	w3, w1, #2, #1
    a908:	lsr	w0, w0, w3
    a90c:	ubfiz	w0, w0, #16, #4
    a910:	ldr	x3, [x19, #3160]
    a914:	ldrh	w1, [x3, w1, uxtw #1]
    a918:	orr	w0, w0, w1
    a91c:	str	w0, [x19, #60]
    a920:	ldr	w0, [x19, #1092]
    a924:	add	w0, w0, #0x1
    a928:	str	w0, [x19, #1092]
    a92c:	ldr	w0, [x19, #24]
    a930:	cbnz	w0, a954 <BZ2_decompress@@Base+0x2328>
    a934:	ldr	w0, [x19, #28]
    a938:	adrp	x1, 1f000 <BZ2_bzerror@@Base+0x10d58>
    a93c:	ldr	x1, [x1, #4048]
    a940:	ldr	w1, [x1, w0, sxtw #2]
    a944:	str	w1, [x19, #24]
    a948:	cmp	w0, #0x1ff
    a94c:	csinc	w0, wzr, w0, eq  // eq = none
    a950:	str	w0, [x19, #28]
    a954:	ldr	w0, [x19, #24]
    a958:	sub	w0, w0, #0x1
    a95c:	str	w0, [x19, #24]
    a960:	cmp	w0, #0x1
    a964:	cset	w0, eq  // eq = none
    a968:	eor	w0, w0, w2
    a96c:	str	w0, [x19, #64]
    a970:	mov	w0, #0x0                   	// #0
    a974:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    a978:	ldr	w0, [x19, #40]
    a97c:	mov	w1, #0x86a0                	// #34464
    a980:	movk	w1, #0x1, lsl #16
    a984:	mul	w0, w0, w1
    a988:	cmp	w25, w0
    a98c:	b.cc	a998 <BZ2_decompress@@Base+0x236c>  // b.lo, b.ul, b.last
    a990:	mov	w0, #0x1                   	// #1
    a994:	b	b274 <BZ2_decompress@@Base+0x2c48>
    a998:	add	x1, x19, #0x448
    a99c:	mov	w0, w25
    a9a0:	bl	1660 <BZ2_indexIntoF@plt>
    a9a4:	str	w0, [x19, #64]
    a9a8:	ldr	w1, [x19, #60]
    a9ac:	lsr	w0, w1, #1
    a9b0:	ldr	x2, [x19, #3168]
    a9b4:	ldrb	w0, [x2, x0]
    a9b8:	ubfiz	w2, w1, #2, #1
    a9bc:	lsr	w0, w0, w2
    a9c0:	ubfiz	w0, w0, #16, #4
    a9c4:	ldr	x2, [x19, #3160]
    a9c8:	ldrh	w1, [x2, w1, uxtw #1]
    a9cc:	orr	w0, w0, w1
    a9d0:	str	w0, [x19, #60]
    a9d4:	ldr	w0, [x19, #1092]
    a9d8:	add	w0, w0, #0x1
    a9dc:	str	w0, [x19, #1092]
    a9e0:	mov	w0, #0x0                   	// #0
    a9e4:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    a9e8:	ldr	x3, [x19, #3152]
    a9ec:	ldr	w1, [x3, x0, lsl #2]
    a9f0:	add	x1, x19, w1, uxtb #2
    a9f4:	ldrsw	x2, [x1, #1096]
    a9f8:	lsl	x2, x2, #2
    a9fc:	ldr	w4, [x3, x2]
    aa00:	orr	w4, w4, w0, lsl #8
    aa04:	str	w4, [x3, x2]
    aa08:	ldr	w2, [x1, #1096]
    aa0c:	add	w2, w2, #0x1
    aa10:	str	w2, [x1, #1096]
    aa14:	add	x0, x0, #0x1
    aa18:	cmp	w28, w0
    aa1c:	b.gt	a9e8 <BZ2_decompress@@Base+0x23bc>
    aa20:	cmp	w28, #0x0
    aa24:	csel	w25, w28, wzr, ge  // ge = tcont
    aa28:	ldr	x1, [x19, #3152]
    aa2c:	ldrsw	x0, [x19, #56]
    aa30:	ldr	w0, [x1, x0, lsl #2]
    aa34:	lsr	w0, w0, #8
    aa38:	str	w0, [x19, #60]
    aa3c:	str	wzr, [x19, #1092]
    aa40:	ldrb	w2, [x19, #20]
    aa44:	cbz	w2, aabc <BZ2_decompress@@Base+0x2490>
    aa48:	str	wzr, [x19, #24]
    aa4c:	str	wzr, [x19, #28]
    aa50:	ldr	w2, [x19, #40]
    aa54:	mov	w3, #0x86a0                	// #34464
    aa58:	movk	w3, #0x1, lsl #16
    aa5c:	mul	w2, w2, w3
    aa60:	cmp	w0, w2
    aa64:	b.cs	b3e8 <BZ2_decompress@@Base+0x2dbc>  // b.hs, b.nlast
    aa68:	mov	w0, w0
    aa6c:	ldr	w0, [x1, x0, lsl #2]
    aa70:	lsr	w1, w0, #8
    aa74:	str	w1, [x19, #60]
    aa78:	mov	w2, #0x1                   	// #1
    aa7c:	str	w2, [x19, #1092]
    aa80:	adrp	x1, 1f000 <BZ2_bzerror@@Base+0x10d58>
    aa84:	ldr	x1, [x1, #4048]
    aa88:	ldr	w1, [x1]
    aa8c:	str	w2, [x19, #28]
    aa90:	sub	w1, w1, #0x1
    aa94:	str	w1, [x19, #24]
    aa98:	and	w0, w0, #0xff
    aa9c:	cmp	w1, w2
    aaa0:	cset	w1, eq  // eq = none
    aaa4:	eor	w0, w0, w1
    aaa8:	str	w0, [x19, #64]
    aaac:	mov	w0, #0x0                   	// #0
    aab0:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    aab4:	mov	x0, #0x0                   	// #0
    aab8:	b	aa18 <BZ2_decompress@@Base+0x23ec>
    aabc:	ldr	w2, [x19, #40]
    aac0:	mov	w3, #0x86a0                	// #34464
    aac4:	movk	w3, #0x1, lsl #16
    aac8:	mul	w2, w2, w3
    aacc:	cmp	w0, w2
    aad0:	b.cs	b3f0 <BZ2_decompress@@Base+0x2dc4>  // b.hs, b.nlast
    aad4:	mov	w0, w0
    aad8:	ldr	w0, [x1, x0, lsl #2]
    aadc:	and	w1, w0, #0xff
    aae0:	str	w1, [x19, #64]
    aae4:	lsr	w0, w0, #8
    aae8:	str	w0, [x19, #60]
    aaec:	mov	w0, #0x1                   	// #1
    aaf0:	str	w0, [x19, #1092]
    aaf4:	mov	w0, #0x0                   	// #0
    aaf8:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    aafc:	mov	w0, #0x2a                  	// #42
    ab00:	str	w0, [x19, #8]
    ab04:	ldr	w0, [x19, #36]
    ab08:	cmp	w0, #0x7
    ab0c:	b.gt	ab80 <BZ2_decompress@@Base+0x2554>
    ab10:	ldr	x1, [x19]
    ab14:	ldr	w2, [x1, #8]
    ab18:	cbz	w2, b3a0 <BZ2_decompress@@Base+0x2d74>
    ab1c:	ldr	w2, [x19, #32]
    ab20:	ldr	x3, [x1]
    ab24:	ldrb	w3, [x3]
    ab28:	orr	w2, w3, w2, lsl #8
    ab2c:	str	w2, [x19, #32]
    ab30:	add	w0, w0, #0x8
    ab34:	str	w0, [x19, #36]
    ab38:	ldr	x0, [x1]
    ab3c:	add	x0, x0, #0x1
    ab40:	str	x0, [x1]
    ab44:	ldr	x1, [x19]
    ab48:	ldr	w0, [x1, #8]
    ab4c:	sub	w0, w0, #0x1
    ab50:	str	w0, [x1, #8]
    ab54:	ldr	x1, [x19]
    ab58:	ldr	w0, [x1, #12]
    ab5c:	add	w0, w0, #0x1
    ab60:	str	w0, [x1, #12]
    ab64:	ldr	x0, [x19]
    ab68:	ldr	w1, [x0, #12]
    ab6c:	cbnz	w1, ab04 <BZ2_decompress@@Base+0x24d8>
    ab70:	ldr	w1, [x0, #16]
    ab74:	add	w1, w1, #0x1
    ab78:	str	w1, [x0, #16]
    ab7c:	b	ab04 <BZ2_decompress@@Base+0x24d8>
    ab80:	sub	w0, w0, #0x8
    ab84:	ldr	w1, [x19, #32]
    ab88:	lsr	w1, w1, w0
    ab8c:	str	w0, [x19, #36]
    ab90:	and	w1, w1, #0xff
    ab94:	mov	w0, #0xfffffffc            	// #-4
    ab98:	cmp	w1, #0x72
    ab9c:	b.ne	b1d0 <BZ2_decompress@@Base+0x2ba4>  // b.any
    aba0:	mov	w0, #0x2b                  	// #43
    aba4:	str	w0, [x19, #8]
    aba8:	ldr	w0, [x19, #36]
    abac:	cmp	w0, #0x7
    abb0:	b.gt	ac24 <BZ2_decompress@@Base+0x25f8>
    abb4:	ldr	x1, [x19]
    abb8:	ldr	w2, [x1, #8]
    abbc:	cbz	w2, b3a8 <BZ2_decompress@@Base+0x2d7c>
    abc0:	ldr	w2, [x19, #32]
    abc4:	ldr	x3, [x1]
    abc8:	ldrb	w3, [x3]
    abcc:	orr	w2, w3, w2, lsl #8
    abd0:	str	w2, [x19, #32]
    abd4:	add	w0, w0, #0x8
    abd8:	str	w0, [x19, #36]
    abdc:	ldr	x0, [x1]
    abe0:	add	x0, x0, #0x1
    abe4:	str	x0, [x1]
    abe8:	ldr	x1, [x19]
    abec:	ldr	w0, [x1, #8]
    abf0:	sub	w0, w0, #0x1
    abf4:	str	w0, [x1, #8]
    abf8:	ldr	x1, [x19]
    abfc:	ldr	w0, [x1, #12]
    ac00:	add	w0, w0, #0x1
    ac04:	str	w0, [x1, #12]
    ac08:	ldr	x0, [x19]
    ac0c:	ldr	w1, [x0, #12]
    ac10:	cbnz	w1, aba8 <BZ2_decompress@@Base+0x257c>
    ac14:	ldr	w1, [x0, #16]
    ac18:	add	w1, w1, #0x1
    ac1c:	str	w1, [x0, #16]
    ac20:	b	aba8 <BZ2_decompress@@Base+0x257c>
    ac24:	sub	w0, w0, #0x8
    ac28:	ldr	w1, [x19, #32]
    ac2c:	lsr	w1, w1, w0
    ac30:	str	w0, [x19, #36]
    ac34:	and	w1, w1, #0xff
    ac38:	mov	w0, #0xfffffffc            	// #-4
    ac3c:	cmp	w1, #0x45
    ac40:	b.ne	b1d0 <BZ2_decompress@@Base+0x2ba4>  // b.any
    ac44:	mov	w0, #0x2c                  	// #44
    ac48:	str	w0, [x19, #8]
    ac4c:	ldr	w0, [x19, #36]
    ac50:	cmp	w0, #0x7
    ac54:	b.gt	acc8 <BZ2_decompress@@Base+0x269c>
    ac58:	ldr	x1, [x19]
    ac5c:	ldr	w2, [x1, #8]
    ac60:	cbz	w2, b3b0 <BZ2_decompress@@Base+0x2d84>
    ac64:	ldr	w2, [x19, #32]
    ac68:	ldr	x3, [x1]
    ac6c:	ldrb	w3, [x3]
    ac70:	orr	w2, w3, w2, lsl #8
    ac74:	str	w2, [x19, #32]
    ac78:	add	w0, w0, #0x8
    ac7c:	str	w0, [x19, #36]
    ac80:	ldr	x0, [x1]
    ac84:	add	x0, x0, #0x1
    ac88:	str	x0, [x1]
    ac8c:	ldr	x1, [x19]
    ac90:	ldr	w0, [x1, #8]
    ac94:	sub	w0, w0, #0x1
    ac98:	str	w0, [x1, #8]
    ac9c:	ldr	x1, [x19]
    aca0:	ldr	w0, [x1, #12]
    aca4:	add	w0, w0, #0x1
    aca8:	str	w0, [x1, #12]
    acac:	ldr	x0, [x19]
    acb0:	ldr	w1, [x0, #12]
    acb4:	cbnz	w1, ac4c <BZ2_decompress@@Base+0x2620>
    acb8:	ldr	w1, [x0, #16]
    acbc:	add	w1, w1, #0x1
    acc0:	str	w1, [x0, #16]
    acc4:	b	ac4c <BZ2_decompress@@Base+0x2620>
    acc8:	sub	w0, w0, #0x8
    accc:	ldr	w1, [x19, #32]
    acd0:	lsr	w1, w1, w0
    acd4:	str	w0, [x19, #36]
    acd8:	and	w1, w1, #0xff
    acdc:	mov	w0, #0xfffffffc            	// #-4
    ace0:	cmp	w1, #0x38
    ace4:	b.ne	b1d0 <BZ2_decompress@@Base+0x2ba4>  // b.any
    ace8:	mov	w0, #0x2d                  	// #45
    acec:	str	w0, [x19, #8]
    acf0:	ldr	w0, [x19, #36]
    acf4:	cmp	w0, #0x7
    acf8:	b.gt	ad6c <BZ2_decompress@@Base+0x2740>
    acfc:	ldr	x1, [x19]
    ad00:	ldr	w2, [x1, #8]
    ad04:	cbz	w2, b3b8 <BZ2_decompress@@Base+0x2d8c>
    ad08:	ldr	w2, [x19, #32]
    ad0c:	ldr	x3, [x1]
    ad10:	ldrb	w3, [x3]
    ad14:	orr	w2, w3, w2, lsl #8
    ad18:	str	w2, [x19, #32]
    ad1c:	add	w0, w0, #0x8
    ad20:	str	w0, [x19, #36]
    ad24:	ldr	x0, [x1]
    ad28:	add	x0, x0, #0x1
    ad2c:	str	x0, [x1]
    ad30:	ldr	x1, [x19]
    ad34:	ldr	w0, [x1, #8]
    ad38:	sub	w0, w0, #0x1
    ad3c:	str	w0, [x1, #8]
    ad40:	ldr	x1, [x19]
    ad44:	ldr	w0, [x1, #12]
    ad48:	add	w0, w0, #0x1
    ad4c:	str	w0, [x1, #12]
    ad50:	ldr	x0, [x19]
    ad54:	ldr	w1, [x0, #12]
    ad58:	cbnz	w1, acf0 <BZ2_decompress@@Base+0x26c4>
    ad5c:	ldr	w1, [x0, #16]
    ad60:	add	w1, w1, #0x1
    ad64:	str	w1, [x0, #16]
    ad68:	b	acf0 <BZ2_decompress@@Base+0x26c4>
    ad6c:	sub	w0, w0, #0x8
    ad70:	ldr	w1, [x19, #32]
    ad74:	lsr	w1, w1, w0
    ad78:	str	w0, [x19, #36]
    ad7c:	and	w1, w1, #0xff
    ad80:	mov	w0, #0xfffffffc            	// #-4
    ad84:	cmp	w1, #0x50
    ad88:	b.ne	b1d0 <BZ2_decompress@@Base+0x2ba4>  // b.any
    ad8c:	mov	w0, #0x2e                  	// #46
    ad90:	str	w0, [x19, #8]
    ad94:	ldr	w0, [x19, #36]
    ad98:	cmp	w0, #0x7
    ad9c:	b.gt	ae10 <BZ2_decompress@@Base+0x27e4>
    ada0:	ldr	x1, [x19]
    ada4:	ldr	w2, [x1, #8]
    ada8:	cbz	w2, b3c0 <BZ2_decompress@@Base+0x2d94>
    adac:	ldr	w2, [x19, #32]
    adb0:	ldr	x3, [x1]
    adb4:	ldrb	w3, [x3]
    adb8:	orr	w2, w3, w2, lsl #8
    adbc:	str	w2, [x19, #32]
    adc0:	add	w0, w0, #0x8
    adc4:	str	w0, [x19, #36]
    adc8:	ldr	x0, [x1]
    adcc:	add	x0, x0, #0x1
    add0:	str	x0, [x1]
    add4:	ldr	x1, [x19]
    add8:	ldr	w0, [x1, #8]
    addc:	sub	w0, w0, #0x1
    ade0:	str	w0, [x1, #8]
    ade4:	ldr	x1, [x19]
    ade8:	ldr	w0, [x1, #12]
    adec:	add	w0, w0, #0x1
    adf0:	str	w0, [x1, #12]
    adf4:	ldr	x0, [x19]
    adf8:	ldr	w1, [x0, #12]
    adfc:	cbnz	w1, ad94 <BZ2_decompress@@Base+0x2768>
    ae00:	ldr	w1, [x0, #16]
    ae04:	add	w1, w1, #0x1
    ae08:	str	w1, [x0, #16]
    ae0c:	b	ad94 <BZ2_decompress@@Base+0x2768>
    ae10:	sub	w0, w0, #0x8
    ae14:	ldr	w1, [x19, #32]
    ae18:	lsr	w1, w1, w0
    ae1c:	str	w0, [x19, #36]
    ae20:	and	w1, w1, #0xff
    ae24:	mov	w0, #0xfffffffc            	// #-4
    ae28:	cmp	w1, #0x90
    ae2c:	b.ne	b1d0 <BZ2_decompress@@Base+0x2ba4>  // b.any
    ae30:	str	wzr, [x19, #3180]
    ae34:	mov	w0, #0x2f                  	// #47
    ae38:	str	w0, [x19, #8]
    ae3c:	ldr	w0, [x19, #36]
    ae40:	cmp	w0, #0x7
    ae44:	b.gt	aeb8 <BZ2_decompress@@Base+0x288c>
    ae48:	ldr	x1, [x19]
    ae4c:	ldr	w2, [x1, #8]
    ae50:	cbz	w2, b3c8 <BZ2_decompress@@Base+0x2d9c>
    ae54:	ldr	w2, [x19, #32]
    ae58:	ldr	x3, [x1]
    ae5c:	ldrb	w3, [x3]
    ae60:	orr	w2, w3, w2, lsl #8
    ae64:	str	w2, [x19, #32]
    ae68:	add	w0, w0, #0x8
    ae6c:	str	w0, [x19, #36]
    ae70:	ldr	x0, [x1]
    ae74:	add	x0, x0, #0x1
    ae78:	str	x0, [x1]
    ae7c:	ldr	x1, [x19]
    ae80:	ldr	w0, [x1, #8]
    ae84:	sub	w0, w0, #0x1
    ae88:	str	w0, [x1, #8]
    ae8c:	ldr	x1, [x19]
    ae90:	ldr	w0, [x1, #12]
    ae94:	add	w0, w0, #0x1
    ae98:	str	w0, [x1, #12]
    ae9c:	ldr	x0, [x19]
    aea0:	ldr	w1, [x0, #12]
    aea4:	cbnz	w1, ae3c <BZ2_decompress@@Base+0x2810>
    aea8:	ldr	w1, [x0, #16]
    aeac:	add	w1, w1, #0x1
    aeb0:	str	w1, [x0, #16]
    aeb4:	b	ae3c <BZ2_decompress@@Base+0x2810>
    aeb8:	sub	w0, w0, #0x8
    aebc:	ldr	w1, [x19, #32]
    aec0:	lsr	w1, w1, w0
    aec4:	str	w0, [x19, #36]
    aec8:	ldr	w0, [x19, #3180]
    aecc:	bfi	w1, w0, #8, #24
    aed0:	str	w1, [x19, #3180]
    aed4:	mov	w0, #0x30                  	// #48
    aed8:	str	w0, [x19, #8]
    aedc:	ldr	w0, [x19, #36]
    aee0:	cmp	w0, #0x7
    aee4:	b.gt	af58 <BZ2_decompress@@Base+0x292c>
    aee8:	ldr	x1, [x19]
    aeec:	ldr	w2, [x1, #8]
    aef0:	cbz	w2, b3d0 <BZ2_decompress@@Base+0x2da4>
    aef4:	ldr	w2, [x19, #32]
    aef8:	ldr	x3, [x1]
    aefc:	ldrb	w3, [x3]
    af00:	orr	w2, w3, w2, lsl #8
    af04:	str	w2, [x19, #32]
    af08:	add	w0, w0, #0x8
    af0c:	str	w0, [x19, #36]
    af10:	ldr	x0, [x1]
    af14:	add	x0, x0, #0x1
    af18:	str	x0, [x1]
    af1c:	ldr	x1, [x19]
    af20:	ldr	w0, [x1, #8]
    af24:	sub	w0, w0, #0x1
    af28:	str	w0, [x1, #8]
    af2c:	ldr	x1, [x19]
    af30:	ldr	w0, [x1, #12]
    af34:	add	w0, w0, #0x1
    af38:	str	w0, [x1, #12]
    af3c:	ldr	x0, [x19]
    af40:	ldr	w1, [x0, #12]
    af44:	cbnz	w1, aedc <BZ2_decompress@@Base+0x28b0>
    af48:	ldr	w1, [x0, #16]
    af4c:	add	w1, w1, #0x1
    af50:	str	w1, [x0, #16]
    af54:	b	aedc <BZ2_decompress@@Base+0x28b0>
    af58:	sub	w0, w0, #0x8
    af5c:	ldr	w1, [x19, #32]
    af60:	lsr	w1, w1, w0
    af64:	str	w0, [x19, #36]
    af68:	ldr	w0, [x19, #3180]
    af6c:	bfi	w1, w0, #8, #24
    af70:	str	w1, [x19, #3180]
    af74:	mov	w0, #0x31                  	// #49
    af78:	str	w0, [x19, #8]
    af7c:	ldr	w0, [x19, #36]
    af80:	cmp	w0, #0x7
    af84:	b.gt	aff8 <BZ2_decompress@@Base+0x29cc>
    af88:	ldr	x1, [x19]
    af8c:	ldr	w2, [x1, #8]
    af90:	cbz	w2, b3d8 <BZ2_decompress@@Base+0x2dac>
    af94:	ldr	w2, [x19, #32]
    af98:	ldr	x3, [x1]
    af9c:	ldrb	w3, [x3]
    afa0:	orr	w2, w3, w2, lsl #8
    afa4:	str	w2, [x19, #32]
    afa8:	add	w0, w0, #0x8
    afac:	str	w0, [x19, #36]
    afb0:	ldr	x0, [x1]
    afb4:	add	x0, x0, #0x1
    afb8:	str	x0, [x1]
    afbc:	ldr	x1, [x19]
    afc0:	ldr	w0, [x1, #8]
    afc4:	sub	w0, w0, #0x1
    afc8:	str	w0, [x1, #8]
    afcc:	ldr	x1, [x19]
    afd0:	ldr	w0, [x1, #12]
    afd4:	add	w0, w0, #0x1
    afd8:	str	w0, [x1, #12]
    afdc:	ldr	x0, [x19]
    afe0:	ldr	w1, [x0, #12]
    afe4:	cbnz	w1, af7c <BZ2_decompress@@Base+0x2950>
    afe8:	ldr	w1, [x0, #16]
    afec:	add	w1, w1, #0x1
    aff0:	str	w1, [x0, #16]
    aff4:	b	af7c <BZ2_decompress@@Base+0x2950>
    aff8:	sub	w0, w0, #0x8
    affc:	ldr	w1, [x19, #32]
    b000:	lsr	w1, w1, w0
    b004:	str	w0, [x19, #36]
    b008:	ldr	w0, [x19, #3180]
    b00c:	bfi	w1, w0, #8, #24
    b010:	str	w1, [x19, #3180]
    b014:	mov	w0, #0x32                  	// #50
    b018:	str	w0, [x19, #8]
    b01c:	ldr	w0, [x19, #36]
    b020:	cmp	w0, #0x7
    b024:	b.gt	b098 <BZ2_decompress@@Base+0x2a6c>
    b028:	ldr	x1, [x19]
    b02c:	ldr	w2, [x1, #8]
    b030:	cbz	w2, b3e0 <BZ2_decompress@@Base+0x2db4>
    b034:	ldr	w2, [x19, #32]
    b038:	ldr	x3, [x1]
    b03c:	ldrb	w3, [x3]
    b040:	orr	w2, w3, w2, lsl #8
    b044:	str	w2, [x19, #32]
    b048:	add	w0, w0, #0x8
    b04c:	str	w0, [x19, #36]
    b050:	ldr	x0, [x1]
    b054:	add	x0, x0, #0x1
    b058:	str	x0, [x1]
    b05c:	ldr	x1, [x19]
    b060:	ldr	w0, [x1, #8]
    b064:	sub	w0, w0, #0x1
    b068:	str	w0, [x1, #8]
    b06c:	ldr	x1, [x19]
    b070:	ldr	w0, [x1, #12]
    b074:	add	w0, w0, #0x1
    b078:	str	w0, [x1, #12]
    b07c:	ldr	x0, [x19]
    b080:	ldr	w1, [x0, #12]
    b084:	cbnz	w1, b01c <BZ2_decompress@@Base+0x29f0>
    b088:	ldr	w1, [x0, #16]
    b08c:	add	w1, w1, #0x1
    b090:	str	w1, [x0, #16]
    b094:	b	b01c <BZ2_decompress@@Base+0x29f0>
    b098:	sub	w0, w0, #0x8
    b09c:	ldr	w1, [x19, #32]
    b0a0:	lsr	w1, w1, w0
    b0a4:	str	w0, [x19, #36]
    b0a8:	ldr	w0, [x19, #3180]
    b0ac:	bfi	w1, w0, #8, #24
    b0b0:	str	w1, [x19, #3180]
    b0b4:	mov	w0, #0x1                   	// #1
    b0b8:	str	w0, [x19, #8]
    b0bc:	mov	w0, #0x4                   	// #4
    b0c0:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b0c4:	mov	w0, #0xfa1                 	// #4001
    b0c8:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    b0cc:	mov	w0, #0xfa2                 	// #4002
    b0d0:	bl	16d0 <BZ2_bz__AssertH__fail@plt>
    b0d4:	mov	w0, #0x0                   	// #0
    b0d8:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b0dc:	mov	w0, #0xfffffffb            	// #-5
    b0e0:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b0e4:	mov	w0, #0x0                   	// #0
    b0e8:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b0ec:	mov	w0, #0xfffffffb            	// #-5
    b0f0:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b0f4:	mov	w0, #0x0                   	// #0
    b0f8:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b0fc:	mov	w0, #0xfffffffb            	// #-5
    b100:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b104:	mov	w0, #0x0                   	// #0
    b108:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b10c:	mov	w0, #0x0                   	// #0
    b110:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b114:	mov	w0, #0xfffffffd            	// #-3
    b118:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b11c:	mov	w0, #0x0                   	// #0
    b120:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b124:	mov	w0, #0xfffffffc            	// #-4
    b128:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b12c:	mov	w0, #0xfffffffc            	// #-4
    b130:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b134:	mov	w0, #0x0                   	// #0
    b138:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b13c:	mov	w0, #0xfffffffc            	// #-4
    b140:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b144:	mov	w0, #0x0                   	// #0
    b148:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b14c:	mov	w0, #0xfffffffc            	// #-4
    b150:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b154:	mov	w0, #0x0                   	// #0
    b158:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b15c:	mov	w0, #0xfffffffc            	// #-4
    b160:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b164:	mov	w0, #0x0                   	// #0
    b168:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b16c:	mov	w0, #0xfffffffc            	// #-4
    b170:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b174:	mov	w0, #0x0                   	// #0
    b178:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b17c:	mov	w0, #0x0                   	// #0
    b180:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b184:	mov	w0, #0x0                   	// #0
    b188:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b18c:	mov	w0, #0x0                   	// #0
    b190:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b194:	mov	w0, #0x0                   	// #0
    b198:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b19c:	mov	w0, #0x0                   	// #0
    b1a0:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b1a4:	mov	w0, #0x0                   	// #0
    b1a8:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b1ac:	mov	w0, #0x0                   	// #0
    b1b0:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b1b4:	mov	w0, #0xfffffffc            	// #-4
    b1b8:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b1bc:	mov	w0, #0x0                   	// #0
    b1c0:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b1c4:	mov	w0, #0xfffffffc            	// #-4
    b1c8:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b1cc:	mov	w0, #0x0                   	// #0
    b1d0:	add	x1, x19, #0xc, lsl #12
    b1d4:	str	w25, [x1, #14884]
    b1d8:	str	w23, [x1, #14888]
    b1dc:	str	w26, [x1, #14892]
    b1e0:	str	w22, [x1, #14896]
    b1e4:	str	w24, [x1, #14900]
    b1e8:	ldr	w2, [sp, #108]
    b1ec:	str	w2, [x1, #14904]
    b1f0:	ldr	w2, [sp, #164]
    b1f4:	str	w2, [x1, #14908]
    b1f8:	ldr	w2, [sp, #148]
    b1fc:	str	w2, [x1, #14912]
    b200:	ldr	w2, [sp, #144]
    b204:	str	w2, [x1, #14916]
    b208:	ldr	w2, [sp, #132]
    b20c:	str	w2, [x1, #14920]
    b210:	ldr	w2, [sp, #152]
    b214:	str	w2, [x1, #14924]
    b218:	str	w28, [x1, #14928]
    b21c:	ldr	w2, [sp, #128]
    b220:	str	w2, [x1, #14932]
    b224:	ldr	w2, [sp, #156]
    b228:	str	w2, [x1, #14936]
    b22c:	str	w27, [x1, #14940]
    b230:	ldr	w2, [sp, #172]
    b234:	str	w2, [x1, #14944]
    b238:	str	w20, [x1, #14948]
    b23c:	str	w21, [x1, #14952]
    b240:	ldr	w2, [sp, #104]
    b244:	str	w2, [x1, #14956]
    b248:	ldr	w2, [sp, #168]
    b24c:	str	w2, [x1, #14960]
    b250:	ldr	w2, [sp, #160]
    b254:	str	w2, [x1, #14964]
    b258:	add	x19, x19, #0x8, lsl #12
    b25c:	ldr	x1, [sp, #112]
    b260:	str	x1, [x19, #31352]
    b264:	ldr	x1, [sp, #120]
    b268:	str	x1, [x19, #31360]
    b26c:	ldr	x1, [sp, #136]
    b270:	str	x1, [x19, #31368]
    b274:	ldp	x19, x20, [sp, #16]
    b278:	ldp	x21, x22, [sp, #32]
    b27c:	ldp	x23, x24, [sp, #48]
    b280:	ldp	x25, x26, [sp, #64]
    b284:	ldp	x27, x28, [sp, #80]
    b288:	ldp	x29, x30, [sp], #208
    b28c:	ret
    b290:	mov	w0, #0x0                   	// #0
    b294:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b298:	mov	w0, #0xfffffffc            	// #-4
    b29c:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b2a0:	mov	w0, #0xfffffffc            	// #-4
    b2a4:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b2a8:	mov	w0, #0x0                   	// #0
    b2ac:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b2b0:	mov	w0, #0xfffffffc            	// #-4
    b2b4:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b2b8:	mov	w0, #0x0                   	// #0
    b2bc:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b2c0:	mov	w0, #0x0                   	// #0
    b2c4:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b2c8:	mov	w0, #0x0                   	// #0
    b2cc:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b2d0:	mov	w0, #0xfffffffc            	// #-4
    b2d4:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b2d8:	mov	w0, #0x0                   	// #0
    b2dc:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b2e0:	mov	w0, #0x0                   	// #0
    b2e4:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b2e8:	mov	w28, #0x0                   	// #0
    b2ec:	str	wzr, [sp, #144]
    b2f0:	str	wzr, [sp, #148]
    b2f4:	mov	w25, #0x100                 	// #256
    b2f8:	mov	w0, #0xfffffffc            	// #-4
    b2fc:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b300:	mov	w0, #0x0                   	// #0
    b304:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b308:	mov	w0, #0xfffffffc            	// #-4
    b30c:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b310:	mov	w0, #0x0                   	// #0
    b314:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b318:	mov	w0, #0xfffffffc            	// #-4
    b31c:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b320:	mov	w0, #0xfffffffc            	// #-4
    b324:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b328:	mov	w0, #0x0                   	// #0
    b32c:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b330:	mov	w0, #0xfffffffc            	// #-4
    b334:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b338:	mov	w0, #0x0                   	// #0
    b33c:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b340:	mov	w0, #0xfffffffc            	// #-4
    b344:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b348:	str	w0, [sp, #128]
    b34c:	mov	w0, #0xfffffffc            	// #-4
    b350:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b354:	str	w0, [sp, #128]
    b358:	mov	w0, #0xfffffffc            	// #-4
    b35c:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b360:	mov	w0, #0xfffffffc            	// #-4
    b364:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b368:	mov	w0, #0xfffffffc            	// #-4
    b36c:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b370:	mov	w0, #0x0                   	// #0
    b374:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b378:	mov	w0, #0xfffffffc            	// #-4
    b37c:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b380:	mov	w0, #0x0                   	// #0
    b384:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b388:	mov	w0, #0xfffffffc            	// #-4
    b38c:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b390:	mov	w0, #0xfffffffc            	// #-4
    b394:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b398:	mov	w0, #0xfffffffc            	// #-4
    b39c:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b3a0:	mov	w0, #0x0                   	// #0
    b3a4:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b3a8:	mov	w0, #0x0                   	// #0
    b3ac:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b3b0:	mov	w0, #0x0                   	// #0
    b3b4:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b3b8:	mov	w0, #0x0                   	// #0
    b3bc:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b3c0:	mov	w0, #0x0                   	// #0
    b3c4:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b3c8:	mov	w0, #0x0                   	// #0
    b3cc:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b3d0:	mov	w0, #0x0                   	// #0
    b3d4:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b3d8:	mov	w0, #0x0                   	// #0
    b3dc:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b3e0:	mov	w0, #0x0                   	// #0
    b3e4:	b	b1d0 <BZ2_decompress@@Base+0x2ba4>
    b3e8:	mov	w0, #0x1                   	// #1
    b3ec:	b	b274 <BZ2_decompress@@Base+0x2c48>
    b3f0:	mov	w0, #0x1                   	// #1
    b3f4:	b	b274 <BZ2_decompress@@Base+0x2c48>
    b3f8:	ldr	w7, [x0, #92]
    b3fc:	and	w8, w7, #0xff
    b400:	ldr	w4, [x0, #96]
    b404:	cmp	w4, #0x0
    b408:	b.le	b440 <BZ2_decompress@@Base+0x2e14>
    b40c:	mov	w3, #0x0                   	// #0
    b410:	adrp	x5, 1f000 <BZ2_bzerror@@Base+0x10d58>
    b414:	ldr	x5, [x5, #4024]
    b418:	and	w6, w7, #0xff
    b41c:	ldr	w1, [x0, #648]
    b420:	eor	w2, w6, w1, lsr #24
    b424:	mov	w2, w2
    b428:	ldr	w2, [x5, x2, lsl #2]
    b42c:	eor	w1, w2, w1, lsl #8
    b430:	str	w1, [x0, #648]
    b434:	add	w3, w3, #0x1
    b438:	cmp	w3, w4
    b43c:	b.ne	b41c <BZ2_decompress@@Base+0x2df0>  // b.any
    b440:	add	x7, x0, w7, uxtw
    b444:	mov	w1, #0x1                   	// #1
    b448:	strb	w1, [x7, #128]
    b44c:	cmp	w4, #0x2
    b450:	b.eq	b504 <BZ2_decompress@@Base+0x2ed8>  // b.none
    b454:	cmp	w4, #0x3
    b458:	b.eq	b534 <BZ2_decompress@@Base+0x2f08>  // b.none
    b45c:	cmp	w4, #0x1
    b460:	b.eq	b4e8 <BZ2_decompress@@Base+0x2ebc>  // b.none
    b464:	sub	w1, w4, #0x4
    b468:	add	x1, x0, w1, sxtw
    b46c:	mov	w2, #0x1                   	// #1
    b470:	strb	w2, [x1, #128]
    b474:	ldrsw	x1, [x0, #108]
    b478:	ldr	x2, [x0, #64]
    b47c:	strb	w8, [x2, x1]
    b480:	ldr	w1, [x0, #108]
    b484:	add	w1, w1, #0x1
    b488:	str	w1, [x0, #108]
    b48c:	ldr	x2, [x0, #64]
    b490:	strb	w8, [x2, w1, sxtw]
    b494:	ldr	w1, [x0, #108]
    b498:	add	w1, w1, #0x1
    b49c:	str	w1, [x0, #108]
    b4a0:	ldr	x2, [x0, #64]
    b4a4:	strb	w8, [x2, w1, sxtw]
    b4a8:	ldr	w1, [x0, #108]
    b4ac:	add	w1, w1, #0x1
    b4b0:	str	w1, [x0, #108]
    b4b4:	ldr	x2, [x0, #64]
    b4b8:	strb	w8, [x2, w1, sxtw]
    b4bc:	ldr	w1, [x0, #108]
    b4c0:	add	w1, w1, #0x1
    b4c4:	str	w1, [x0, #108]
    b4c8:	ldr	x3, [x0, #64]
    b4cc:	ldr	w2, [x0, #96]
    b4d0:	sub	w2, w2, #0x4
    b4d4:	strb	w2, [x3, w1, sxtw]
    b4d8:	ldr	w1, [x0, #108]
    b4dc:	add	w1, w1, #0x1
    b4e0:	str	w1, [x0, #108]
    b4e4:	b	b500 <BZ2_decompress@@Base+0x2ed4>
    b4e8:	ldrsw	x1, [x0, #108]
    b4ec:	ldr	x2, [x0, #64]
    b4f0:	strb	w8, [x2, x1]
    b4f4:	ldr	w1, [x0, #108]
    b4f8:	add	w1, w1, #0x1
    b4fc:	str	w1, [x0, #108]
    b500:	ret
    b504:	ldrsw	x1, [x0, #108]
    b508:	ldr	x2, [x0, #64]
    b50c:	strb	w8, [x2, x1]
    b510:	ldr	w1, [x0, #108]
    b514:	add	w1, w1, #0x1
    b518:	str	w1, [x0, #108]
    b51c:	ldr	x2, [x0, #64]
    b520:	strb	w8, [x2, w1, sxtw]
    b524:	ldr	w1, [x0, #108]
    b528:	add	w1, w1, #0x1
    b52c:	str	w1, [x0, #108]
    b530:	b	b500 <BZ2_decompress@@Base+0x2ed4>
    b534:	ldrsw	x1, [x0, #108]
    b538:	ldr	x2, [x0, #64]
    b53c:	strb	w8, [x2, x1]
    b540:	ldr	w1, [x0, #108]
    b544:	add	w1, w1, #0x1
    b548:	str	w1, [x0, #108]
    b54c:	ldr	x2, [x0, #64]
    b550:	strb	w8, [x2, w1, sxtw]
    b554:	ldr	w1, [x0, #108]
    b558:	add	w1, w1, #0x1
    b55c:	str	w1, [x0, #108]
    b560:	ldr	x2, [x0, #64]
    b564:	strb	w8, [x2, w1, sxtw]
    b568:	ldr	w1, [x0, #108]
    b56c:	add	w1, w1, #0x1
    b570:	str	w1, [x0, #108]
    b574:	b	b500 <BZ2_decompress@@Base+0x2ed4>
    b578:	cbz	x1, b594 <BZ2_decompress@@Base+0x2f68>
    b57c:	stp	x29, x30, [sp, #-16]!
    b580:	mov	x29, sp
    b584:	mov	x0, x1
    b588:	bl	1610 <free@plt>
    b58c:	ldp	x29, x30, [sp], #16
    b590:	ret
    b594:	ret
    b598:	stp	x29, x30, [sp, #-16]!
    b59c:	mov	x29, sp
    b5a0:	mul	w0, w1, w2
    b5a4:	sxtw	x0, w0
    b5a8:	bl	14e0 <malloc@plt>
    b5ac:	ldp	x29, x30, [sp], #16
    b5b0:	ret
    b5b4:	stp	x29, x30, [sp, #-96]!
    b5b8:	mov	x29, sp
    b5bc:	stp	x19, x20, [sp, #16]
    b5c0:	stp	x21, x22, [sp, #32]
    b5c4:	stp	x23, x24, [sp, #48]
    b5c8:	stp	x25, x26, [sp, #64]
    b5cc:	str	x27, [sp, #80]
    b5d0:	ldr	x19, [x0, #48]
    b5d4:	mov	w22, #0x0                   	// #0
    b5d8:	mov	w21, #0x0                   	// #0
    b5dc:	mov	w20, #0x1                   	// #1
    b5e0:	adrp	x26, 1f000 <BZ2_bzerror@@Base+0x10d58>
    b5e4:	ldr	x25, [x26, #4024]
    b5e8:	b	b9d8 <BZ2_decompress@@Base+0x33ac>
    b5ec:	mov	w3, #0x0                   	// #0
    b5f0:	mov	w4, w20
    b5f4:	ldr	x1, [x19]
    b5f8:	ldr	w0, [x1, #32]
    b5fc:	cbz	w0, b680 <BZ2_decompress@@Base+0x3054>
    b600:	ldr	w0, [x19, #120]
    b604:	ldr	w2, [x19, #116]
    b608:	cmp	w0, w2
    b60c:	b.ge	b9f0 <BZ2_decompress@@Base+0x33c4>  // b.tcont
    b610:	ldr	x1, [x1, #24]
    b614:	ldr	x2, [x19, #80]
    b618:	ldrb	w0, [x2, w0, sxtw]
    b61c:	strb	w0, [x1]
    b620:	ldr	w0, [x19, #120]
    b624:	add	w0, w0, #0x1
    b628:	str	w0, [x19, #120]
    b62c:	ldr	x1, [x19]
    b630:	ldr	w0, [x1, #32]
    b634:	sub	w0, w0, #0x1
    b638:	str	w0, [x1, #32]
    b63c:	ldr	x1, [x19]
    b640:	ldr	x0, [x1, #24]
    b644:	add	x0, x0, #0x1
    b648:	str	x0, [x1, #24]
    b64c:	ldr	x1, [x19]
    b650:	ldr	w0, [x1, #36]
    b654:	add	w0, w0, #0x1
    b658:	str	w0, [x1, #36]
    b65c:	ldr	x0, [x19]
    b660:	mov	w3, w4
    b664:	ldr	w1, [x0, #36]
    b668:	cbnz	w1, b5f4 <BZ2_decompress@@Base+0x2fc8>
    b66c:	ldr	w1, [x0, #40]
    b670:	add	w1, w1, #0x1
    b674:	str	w1, [x0, #40]
    b678:	mov	w3, w20
    b67c:	b	b5f4 <BZ2_decompress@@Base+0x2fc8>
    b680:	orr	w22, w22, w3
    b684:	ldr	w1, [x19, #120]
    b688:	ldr	w0, [x19, #116]
    b68c:	cmp	w1, w0
    b690:	b.ge	b9f4 <BZ2_decompress@@Base+0x33c8>  // b.tcont
    b694:	b	b6b8 <BZ2_decompress@@Base+0x308c>
    b698:	ldr	w0, [x19, #16]
    b69c:	cbnz	w0, ba64 <BZ2_decompress@@Base+0x3438>
    b6a0:	ldr	w0, [x19, #92]
    b6a4:	cmp	w0, #0xff
    b6a8:	b.hi	b6b8 <BZ2_decompress@@Base+0x308c>  // b.pmore
    b6ac:	ldr	w0, [x19, #96]
    b6b0:	cmp	w0, #0x0
    b6b4:	b.gt	ba64 <BZ2_decompress@@Base+0x3438>
    b6b8:	orr	w21, w21, w22
    b6bc:	cmp	w21, #0x0
    b6c0:	cset	w0, ne  // ne = any
    b6c4:	ldp	x19, x20, [sp, #16]
    b6c8:	ldp	x21, x22, [sp, #32]
    b6cc:	ldp	x23, x24, [sp, #48]
    b6d0:	ldp	x25, x26, [sp, #64]
    b6d4:	ldr	x27, [sp, #80]
    b6d8:	ldp	x29, x30, [sp], #96
    b6dc:	ret
    b6e0:	mov	w3, #0x0                   	// #0
    b6e4:	mov	w23, w20
    b6e8:	mov	w24, #0x1                   	// #1
    b6ec:	b	b798 <BZ2_decompress@@Base+0x316c>
    b6f0:	ldr	w3, [x19, #648]
    b6f4:	and	w2, w0, #0xff
    b6f8:	eor	w2, w2, w3, lsr #24
    b6fc:	mov	w2, w2
    b700:	ldr	w2, [x25, x2, lsl #2]
    b704:	eor	w3, w2, w3, lsl #8
    b708:	str	w3, [x19, #648]
    b70c:	add	x2, x19, w0, uxtw
    b710:	strb	w24, [x2, #128]
    b714:	ldr	x2, [x19, #64]
    b718:	strb	w0, [x2, w1, sxtw]
    b71c:	ldr	w0, [x19, #108]
    b720:	add	w0, w0, #0x1
    b724:	str	w0, [x19, #108]
    b728:	str	w27, [x19, #92]
    b72c:	b	b758 <BZ2_decompress@@Base+0x312c>
    b730:	ldr	w0, [x19, #96]
    b734:	cmp	w0, #0xff
    b738:	b.eq	b748 <BZ2_decompress@@Base+0x311c>  // b.none
    b73c:	add	w0, w0, #0x1
    b740:	str	w0, [x19, #96]
    b744:	b	b758 <BZ2_decompress@@Base+0x312c>
    b748:	mov	x0, x19
    b74c:	bl	b3f8 <BZ2_decompress@@Base+0x2dcc>
    b750:	str	w27, [x19, #92]
    b754:	str	w20, [x19, #96]
    b758:	ldr	x1, [x19]
    b75c:	ldr	x0, [x1]
    b760:	add	x0, x0, #0x1
    b764:	str	x0, [x1]
    b768:	ldr	x1, [x19]
    b76c:	ldr	w0, [x1, #8]
    b770:	sub	w0, w0, #0x1
    b774:	str	w0, [x1, #8]
    b778:	ldr	x1, [x19]
    b77c:	ldr	w0, [x1, #12]
    b780:	add	w0, w0, #0x1
    b784:	str	w0, [x1, #12]
    b788:	ldr	x0, [x19]
    b78c:	mov	w3, w23
    b790:	ldr	w1, [x0, #12]
    b794:	cbz	w1, b7e0 <BZ2_decompress@@Base+0x31b4>
    b798:	ldr	w1, [x19, #108]
    b79c:	ldr	w0, [x19, #112]
    b7a0:	cmp	w1, w0
    b7a4:	b.ge	b9a4 <BZ2_decompress@@Base+0x3378>  // b.tcont
    b7a8:	ldr	x0, [x19]
    b7ac:	ldr	w2, [x0, #8]
    b7b0:	cbz	w2, b944 <BZ2_decompress@@Base+0x3318>
    b7b4:	ldr	x0, [x0]
    b7b8:	ldrb	w27, [x0]
    b7bc:	ldr	w0, [x19, #92]
    b7c0:	cmp	w27, w0
    b7c4:	b.eq	b730 <BZ2_decompress@@Base+0x3104>  // b.none
    b7c8:	ldr	w2, [x19, #96]
    b7cc:	cmp	w2, #0x1
    b7d0:	b.eq	b6f0 <BZ2_decompress@@Base+0x30c4>  // b.none
    b7d4:	cmp	w0, #0xff
    b7d8:	b.hi	b750 <BZ2_decompress@@Base+0x3124>  // b.pmore
    b7dc:	b	b748 <BZ2_decompress@@Base+0x311c>
    b7e0:	ldr	w1, [x0, #16]
    b7e4:	add	w1, w1, #0x1
    b7e8:	str	w1, [x0, #16]
    b7ec:	mov	w3, w20
    b7f0:	b	b6e8 <BZ2_decompress@@Base+0x30bc>
    b7f4:	ldr	w3, [x19, #648]
    b7f8:	and	w2, w0, #0xff
    b7fc:	eor	w2, w2, w3, lsr #24
    b800:	mov	w2, w2
    b804:	ldr	w2, [x24, x2, lsl #2]
    b808:	eor	w3, w2, w3, lsl #8
    b80c:	str	w3, [x19, #648]
    b810:	add	x2, x19, w0, uxtw
    b814:	strb	w23, [x2, #128]
    b818:	ldr	x2, [x19, #64]
    b81c:	strb	w0, [x2, w1, sxtw]
    b820:	ldr	w0, [x19, #108]
    b824:	add	w0, w0, #0x1
    b828:	str	w0, [x19, #108]
    b82c:	str	w27, [x19, #92]
    b830:	b	b85c <BZ2_decompress@@Base+0x3230>
    b834:	ldr	w0, [x19, #96]
    b838:	cmp	w0, #0xff
    b83c:	b.eq	b84c <BZ2_decompress@@Base+0x3220>  // b.none
    b840:	add	w0, w0, #0x1
    b844:	str	w0, [x19, #96]
    b848:	b	b85c <BZ2_decompress@@Base+0x3230>
    b84c:	mov	x0, x19
    b850:	bl	b3f8 <BZ2_decompress@@Base+0x2dcc>
    b854:	str	w27, [x19, #92]
    b858:	str	w20, [x19, #96]
    b85c:	ldr	x1, [x19]
    b860:	ldr	x0, [x1]
    b864:	add	x0, x0, #0x1
    b868:	str	x0, [x1]
    b86c:	ldr	x1, [x19]
    b870:	ldr	w0, [x1, #8]
    b874:	sub	w0, w0, #0x1
    b878:	str	w0, [x1, #8]
    b87c:	ldr	x1, [x19]
    b880:	ldr	w0, [x1, #12]
    b884:	add	w0, w0, #0x1
    b888:	str	w0, [x1, #12]
    b88c:	ldr	x0, [x19]
    b890:	ldr	w1, [x0, #12]
    b894:	cbnz	w1, b8a4 <BZ2_decompress@@Base+0x3278>
    b898:	ldr	w1, [x0, #16]
    b89c:	add	w1, w1, #0x1
    b8a0:	str	w1, [x0, #16]
    b8a4:	ldr	w0, [x19, #16]
    b8a8:	sub	w0, w0, #0x1
    b8ac:	str	w0, [x19, #16]
    b8b0:	ldr	w1, [x19, #108]
    b8b4:	mov	w3, w20
    b8b8:	ldr	w0, [x19, #112]
    b8bc:	cmp	w1, w0
    b8c0:	b.ge	b9a4 <BZ2_decompress@@Base+0x3378>  // b.tcont
    b8c4:	ldr	x0, [x19]
    b8c8:	ldr	w2, [x0, #8]
    b8cc:	cbz	w2, b904 <BZ2_decompress@@Base+0x32d8>
    b8d0:	ldr	w2, [x19, #16]
    b8d4:	cbz	w2, b960 <BZ2_decompress@@Base+0x3334>
    b8d8:	ldr	x0, [x0]
    b8dc:	ldrb	w27, [x0]
    b8e0:	ldr	w0, [x19, #92]
    b8e4:	cmp	w27, w0
    b8e8:	b.eq	b834 <BZ2_decompress@@Base+0x3208>  // b.none
    b8ec:	ldr	w2, [x19, #96]
    b8f0:	cmp	w2, #0x1
    b8f4:	b.eq	b7f4 <BZ2_decompress@@Base+0x31c8>  // b.none
    b8f8:	cmp	w0, #0xff
    b8fc:	b.hi	b854 <BZ2_decompress@@Base+0x3228>  // b.pmore
    b900:	b	b84c <BZ2_decompress@@Base+0x3220>
    b904:	orr	w21, w21, w3
    b908:	ldr	w0, [x19, #8]
    b90c:	cmp	w0, #0x2
    b910:	b.ne	b9b4 <BZ2_decompress@@Base+0x3388>  // b.any
    b914:	ldr	w1, [x19, #112]
    b918:	ldr	w0, [x19, #108]
    b91c:	cmp	w1, w0
    b920:	b.gt	b6b8 <BZ2_decompress@@Base+0x308c>
    b924:	mov	w1, #0x0                   	// #0
    b928:	mov	x0, x19
    b92c:	bl	15e0 <BZ2_compressBlock@plt>
    b930:	str	w20, [x19, #12]
    b934:	b	b9d8 <BZ2_decompress@@Base+0x33ac>
    b938:	mov	x0, x19
    b93c:	bl	b3f8 <BZ2_decompress@@Base+0x2dcc>
    b940:	b	b97c <BZ2_decompress@@Base+0x3350>
    b944:	orr	w21, w21, w3
    b948:	ldr	w0, [x19, #8]
    b94c:	cmp	w0, #0x2
    b950:	b.eq	b6b8 <BZ2_decompress@@Base+0x308c>  // b.none
    b954:	ldr	w0, [x19, #16]
    b958:	cbnz	w0, b9cc <BZ2_decompress@@Base+0x33a0>
    b95c:	b	b970 <BZ2_decompress@@Base+0x3344>
    b960:	orr	w21, w21, w3
    b964:	ldr	w0, [x19, #8]
    b968:	cmp	w0, #0x2
    b96c:	b.eq	ba90 <BZ2_decompress@@Base+0x3464>  // b.none
    b970:	ldr	w0, [x19, #92]
    b974:	cmp	w0, #0xff
    b978:	b.ls	b938 <BZ2_decompress@@Base+0x330c>  // b.plast
    b97c:	mov	w0, #0x100                 	// #256
    b980:	str	w0, [x19, #92]
    b984:	str	wzr, [x19, #96]
    b988:	ldr	w0, [x19, #8]
    b98c:	cmp	w0, #0x4
    b990:	cset	w1, eq  // eq = none
    b994:	mov	x0, x19
    b998:	bl	15e0 <BZ2_compressBlock@plt>
    b99c:	str	w20, [x19, #12]
    b9a0:	b	b9d8 <BZ2_decompress@@Base+0x33ac>
    b9a4:	orr	w21, w21, w3
    b9a8:	ldr	w0, [x19, #8]
    b9ac:	cmp	w0, #0x2
    b9b0:	b.eq	b924 <BZ2_decompress@@Base+0x32f8>  // b.none
    b9b4:	ldr	w0, [x19, #16]
    b9b8:	cbz	w0, b970 <BZ2_decompress@@Base+0x3344>
    b9bc:	ldr	w1, [x19, #108]
    b9c0:	ldr	w0, [x19, #112]
    b9c4:	cmp	w1, w0
    b9c8:	b.ge	b924 <BZ2_decompress@@Base+0x32f8>  // b.tcont
    b9cc:	ldr	x0, [x19]
    b9d0:	ldr	w0, [x0, #8]
    b9d4:	cbz	w0, b6b8 <BZ2_decompress@@Base+0x308c>
    b9d8:	ldr	w0, [x19, #12]
    b9dc:	cmp	w0, #0x1
    b9e0:	b.eq	b5ec <BZ2_decompress@@Base+0x2fc0>  // b.none
    b9e4:	cmp	w0, #0x2
    b9e8:	b.ne	b9d8 <BZ2_decompress@@Base+0x33ac>  // b.any
    b9ec:	b	ba64 <BZ2_decompress@@Base+0x3438>
    b9f0:	orr	w22, w22, w3
    b9f4:	ldr	w2, [x19, #8]
    b9f8:	cmp	w2, #0x4
    b9fc:	b.ne	ba20 <BZ2_decompress@@Base+0x33f4>  // b.any
    ba00:	ldr	w0, [x19, #16]
    ba04:	cbnz	w0, ba20 <BZ2_decompress@@Base+0x33f4>
    ba08:	ldr	w0, [x19, #92]
    ba0c:	cmp	w0, #0xff
    ba10:	b.hi	b6b8 <BZ2_decompress@@Base+0x308c>  // b.pmore
    ba14:	ldr	w0, [x19, #96]
    ba18:	cmp	w0, #0x0
    ba1c:	b.le	b6b8 <BZ2_decompress@@Base+0x308c>
    ba20:	str	wzr, [x19, #108]
    ba24:	str	wzr, [x19, #116]
    ba28:	str	wzr, [x19, #120]
    ba2c:	mov	w0, #0xffffffff            	// #-1
    ba30:	str	w0, [x19, #648]
    ba34:	add	x0, x19, #0x80
    ba38:	add	x1, x19, #0x180
    ba3c:	strb	wzr, [x0], #1
    ba40:	cmp	x0, x1
    ba44:	b.ne	ba3c <BZ2_decompress@@Base+0x3410>  // b.any
    ba48:	ldr	w0, [x19, #660]
    ba4c:	add	w0, w0, #0x1
    ba50:	str	w0, [x19, #660]
    ba54:	mov	w0, #0x2                   	// #2
    ba58:	str	w0, [x19, #12]
    ba5c:	cmp	w2, #0x3
    ba60:	b.eq	b698 <BZ2_decompress@@Base+0x306c>  // b.none
    ba64:	ldr	w0, [x19, #8]
    ba68:	cmp	w0, #0x2
    ba6c:	b.eq	b6e0 <BZ2_decompress@@Base+0x30b4>  // b.none
    ba70:	ldr	w1, [x19, #108]
    ba74:	ldr	w0, [x19, #112]
    ba78:	cmp	w1, w0
    ba7c:	b.ge	baa4 <BZ2_decompress@@Base+0x3478>  // b.tcont
    ba80:	mov	w3, #0x0                   	// #0
    ba84:	ldr	x24, [x26, #4024]
    ba88:	mov	w23, #0x1                   	// #1
    ba8c:	b	b8c4 <BZ2_decompress@@Base+0x3298>
    ba90:	ldr	w1, [x19, #108]
    ba94:	ldr	w0, [x19, #112]
    ba98:	cmp	w1, w0
    ba9c:	b.lt	b9d8 <BZ2_decompress@@Base+0x33ac>  // b.tstop
    baa0:	b	b924 <BZ2_decompress@@Base+0x32f8>
    baa4:	ldr	w0, [x19, #16]
    baa8:	cbnz	w0, b924 <BZ2_decompress@@Base+0x32f8>
    baac:	b	b970 <BZ2_decompress@@Base+0x3344>

000000000000bab0 <BZ2_bzCompressInit@@Base>:
    bab0:	stp	x29, x30, [sp, #-64]!
    bab4:	mov	x29, sp
    bab8:	stp	x19, x20, [sp, #16]
    babc:	mov	x20, x0
    bac0:	sub	w0, w1, #0x1
    bac4:	cmp	x20, #0x0
    bac8:	ccmp	w0, #0x8, #0x2, ne  // ne = any
    bacc:	b.hi	bcb8 <BZ2_bzCompressInit@@Base+0x208>  // b.pmore
    bad0:	stp	x21, x22, [sp, #32]
    bad4:	stp	x23, x24, [sp, #48]
    bad8:	mov	w23, w1
    badc:	mov	w24, w2
    bae0:	cmp	w3, #0xfa
    bae4:	b.hi	bcc0 <BZ2_bzCompressInit@@Base+0x210>  // b.pmore
    bae8:	cmp	w3, #0x0
    baec:	mov	w0, #0x1e                  	// #30
    baf0:	csel	w21, w3, w0, ne  // ne = any
    baf4:	ldr	x0, [x20, #56]
    baf8:	cbz	x0, bc44 <BZ2_bzCompressInit@@Base+0x194>
    bafc:	ldr	x0, [x20, #64]
    bb00:	cbz	x0, bc54 <BZ2_bzCompressInit@@Base+0x1a4>
    bb04:	ldr	x3, [x20, #56]
    bb08:	mov	w2, #0x1                   	// #1
    bb0c:	mov	w1, #0xd9d8                	// #55768
    bb10:	ldr	x0, [x20, #72]
    bb14:	blr	x3
    bb18:	mov	x19, x0
    bb1c:	cbz	x0, bcd0 <BZ2_bzCompressInit@@Base+0x220>
    bb20:	str	x20, [x0]
    bb24:	str	xzr, [x0, #24]
    bb28:	str	xzr, [x0, #32]
    bb2c:	str	xzr, [x0, #40]
    bb30:	mov	w22, #0x86a0                	// #34464
    bb34:	movk	w22, #0x1, lsl #16
    bb38:	mul	w22, w23, w22
    bb3c:	ldr	x3, [x20, #56]
    bb40:	mov	w2, #0x1                   	// #1
    bb44:	lsl	w1, w22, #2
    bb48:	ldr	x0, [x20, #72]
    bb4c:	blr	x3
    bb50:	str	x0, [x19, #24]
    bb54:	add	w1, w22, #0x22
    bb58:	ldr	x3, [x20, #56]
    bb5c:	mov	w2, #0x1                   	// #1
    bb60:	lsl	w1, w1, #2
    bb64:	ldr	x0, [x20, #72]
    bb68:	blr	x3
    bb6c:	str	x0, [x19, #32]
    bb70:	ldr	x3, [x20, #56]
    bb74:	mov	w2, #0x1                   	// #1
    bb78:	mov	w1, #0x40004               	// #262148
    bb7c:	ldr	x0, [x20, #72]
    bb80:	blr	x3
    bb84:	str	x0, [x19, #40]
    bb88:	ldr	x1, [x19, #24]
    bb8c:	cbz	x1, bc70 <BZ2_bzCompressInit@@Base+0x1c0>
    bb90:	ldr	x2, [x19, #32]
    bb94:	cmp	x0, #0x0
    bb98:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    bb9c:	b.eq	bc64 <BZ2_bzCompressInit@@Base+0x1b4>  // b.none
    bba0:	str	wzr, [x19, #660]
    bba4:	mov	w0, #0x2                   	// #2
    bba8:	str	w0, [x19, #12]
    bbac:	str	w0, [x19, #8]
    bbb0:	str	wzr, [x19, #652]
    bbb4:	str	w23, [x19, #664]
    bbb8:	sub	w22, w22, #0x13
    bbbc:	str	w22, [x19, #112]
    bbc0:	str	w24, [x19, #656]
    bbc4:	str	w21, [x19, #88]
    bbc8:	str	x2, [x19, #64]
    bbcc:	str	x1, [x19, #72]
    bbd0:	str	xzr, [x19, #80]
    bbd4:	str	x1, [x19, #56]
    bbd8:	str	x19, [x20, #48]
    bbdc:	str	wzr, [x20, #12]
    bbe0:	str	wzr, [x20, #16]
    bbe4:	str	wzr, [x20, #36]
    bbe8:	str	wzr, [x20, #40]
    bbec:	mov	w0, #0x100                 	// #256
    bbf0:	str	w0, [x19, #92]
    bbf4:	str	wzr, [x19, #96]
    bbf8:	str	wzr, [x19, #108]
    bbfc:	str	wzr, [x19, #116]
    bc00:	str	wzr, [x19, #120]
    bc04:	mov	w0, #0xffffffff            	// #-1
    bc08:	str	w0, [x19, #648]
    bc0c:	add	x0, x19, #0x80
    bc10:	add	x1, x19, #0x180
    bc14:	strb	wzr, [x0], #1
    bc18:	cmp	x0, x1
    bc1c:	b.ne	bc14 <BZ2_bzCompressInit@@Base+0x164>  // b.any
    bc20:	ldr	w0, [x19, #660]
    bc24:	add	w0, w0, #0x1
    bc28:	str	w0, [x19, #660]
    bc2c:	mov	w0, #0x0                   	// #0
    bc30:	ldp	x21, x22, [sp, #32]
    bc34:	ldp	x23, x24, [sp, #48]
    bc38:	ldp	x19, x20, [sp, #16]
    bc3c:	ldp	x29, x30, [sp], #64
    bc40:	ret
    bc44:	adrp	x0, b000 <BZ2_decompress@@Base+0x29d4>
    bc48:	add	x0, x0, #0x598
    bc4c:	str	x0, [x20, #56]
    bc50:	b	bafc <BZ2_bzCompressInit@@Base+0x4c>
    bc54:	adrp	x0, b000 <BZ2_decompress@@Base+0x29d4>
    bc58:	add	x0, x0, #0x578
    bc5c:	str	x0, [x20, #64]
    bc60:	b	bb04 <BZ2_bzCompressInit@@Base+0x54>
    bc64:	ldr	x2, [x20, #64]
    bc68:	ldr	x0, [x20, #72]
    bc6c:	blr	x2
    bc70:	ldr	x1, [x19, #32]
    bc74:	cbz	x1, bc84 <BZ2_bzCompressInit@@Base+0x1d4>
    bc78:	ldr	x2, [x20, #64]
    bc7c:	ldr	x0, [x20, #72]
    bc80:	blr	x2
    bc84:	ldr	x1, [x19, #40]
    bc88:	cbz	x1, bc98 <BZ2_bzCompressInit@@Base+0x1e8>
    bc8c:	ldr	x2, [x20, #64]
    bc90:	ldr	x0, [x20, #72]
    bc94:	blr	x2
    bc98:	ldr	x2, [x20, #64]
    bc9c:	mov	x1, x19
    bca0:	ldr	x0, [x20, #72]
    bca4:	blr	x2
    bca8:	mov	w0, #0xfffffffd            	// #-3
    bcac:	ldp	x21, x22, [sp, #32]
    bcb0:	ldp	x23, x24, [sp, #48]
    bcb4:	b	bc38 <BZ2_bzCompressInit@@Base+0x188>
    bcb8:	mov	w0, #0xfffffffe            	// #-2
    bcbc:	b	bc38 <BZ2_bzCompressInit@@Base+0x188>
    bcc0:	mov	w0, #0xfffffffe            	// #-2
    bcc4:	ldp	x21, x22, [sp, #32]
    bcc8:	ldp	x23, x24, [sp, #48]
    bccc:	b	bc38 <BZ2_bzCompressInit@@Base+0x188>
    bcd0:	mov	w0, #0xfffffffd            	// #-3
    bcd4:	ldp	x21, x22, [sp, #32]
    bcd8:	ldp	x23, x24, [sp, #48]
    bcdc:	b	bc38 <BZ2_bzCompressInit@@Base+0x188>

000000000000bce0 <BZ2_bzCompress@@Base>:
    bce0:	stp	x29, x30, [sp, #-48]!
    bce4:	mov	x29, sp
    bce8:	stp	x19, x20, [sp, #16]
    bcec:	cbz	x0, be38 <BZ2_bzCompress@@Base+0x158>
    bcf0:	str	x21, [sp, #32]
    bcf4:	mov	w21, w1
    bcf8:	ldr	x20, [x0, #48]
    bcfc:	cbz	x20, be40 <BZ2_bzCompress@@Base+0x160>
    bd00:	ldr	x1, [x20]
    bd04:	cmp	x1, x0
    bd08:	b.ne	be4c <BZ2_bzCompress@@Base+0x16c>  // b.any
    bd0c:	mov	w1, #0x4                   	// #4
    bd10:	mov	w2, #0x3                   	// #3
    bd14:	ldr	w19, [x20, #8]
    bd18:	cmp	w19, #0x3
    bd1c:	b.eq	bdf0 <BZ2_bzCompress@@Base+0x110>  // b.none
    bd20:	b.gt	bd64 <BZ2_bzCompress@@Base+0x84>
    bd24:	cmp	w19, #0x1
    bd28:	b.eq	be58 <BZ2_bzCompress@@Base+0x178>  // b.none
    bd2c:	cmp	w19, #0x2
    bd30:	b.ne	bd58 <BZ2_bzCompress@@Base+0x78>  // b.any
    bd34:	cbz	w21, bdc8 <BZ2_bzCompress@@Base+0xe8>
    bd38:	cmp	w21, #0x1
    bd3c:	b.eq	bde0 <BZ2_bzCompress@@Base+0x100>  // b.none
    bd40:	cmp	w21, #0x2
    bd44:	b.ne	be70 <BZ2_bzCompress@@Base+0x190>  // b.any
    bd48:	ldr	w3, [x0, #8]
    bd4c:	str	w3, [x20, #16]
    bd50:	str	w1, [x20, #8]
    bd54:	b	bd14 <BZ2_bzCompress@@Base+0x34>
    bd58:	mov	w19, #0x0                   	// #0
    bd5c:	ldr	x21, [sp, #32]
    bd60:	b	be60 <BZ2_bzCompress@@Base+0x180>
    bd64:	cmp	w19, #0x4
    bd68:	b.ne	bdbc <BZ2_bzCompress@@Base+0xdc>  // b.any
    bd6c:	cmp	w21, #0x2
    bd70:	b.ne	be94 <BZ2_bzCompress@@Base+0x1b4>  // b.any
    bd74:	ldr	w2, [x20, #16]
    bd78:	ldr	w1, [x0, #8]
    bd7c:	cmp	w2, w1
    bd80:	b.ne	bea0 <BZ2_bzCompress@@Base+0x1c0>  // b.any
    bd84:	bl	b5b4 <BZ2_decompress@@Base+0x2f88>
    bd88:	and	w0, w0, #0xff
    bd8c:	cbz	w0, beac <BZ2_bzCompress@@Base+0x1cc>
    bd90:	ldr	w0, [x20, #16]
    bd94:	cbnz	w0, beb8 <BZ2_bzCompress@@Base+0x1d8>
    bd98:	ldr	w0, [x20, #92]
    bd9c:	cmp	w0, #0xff
    bda0:	b.hi	bf00 <BZ2_bzCompress@@Base+0x220>  // b.pmore
    bda4:	ldr	w0, [x20, #96]
    bda8:	cmp	w0, #0x0
    bdac:	b.le	bf00 <BZ2_bzCompress@@Base+0x220>
    bdb0:	mov	w19, #0x3                   	// #3
    bdb4:	ldr	x21, [sp, #32]
    bdb8:	b	be60 <BZ2_bzCompress@@Base+0x180>
    bdbc:	mov	w19, #0x0                   	// #0
    bdc0:	ldr	x21, [sp, #32]
    bdc4:	b	be60 <BZ2_bzCompress@@Base+0x180>
    bdc8:	bl	b5b4 <BZ2_decompress@@Base+0x2f88>
    bdcc:	ands	w0, w0, #0xff
    bdd0:	mov	w19, #0xfffffffe            	// #-2
    bdd4:	cinv	w19, w19, ne  // ne = any
    bdd8:	ldr	x21, [sp, #32]
    bddc:	b	be60 <BZ2_bzCompress@@Base+0x180>
    bde0:	ldr	w3, [x0, #8]
    bde4:	str	w3, [x20, #16]
    bde8:	str	w2, [x20, #8]
    bdec:	b	bd14 <BZ2_bzCompress@@Base+0x34>
    bdf0:	cmp	w21, #0x1
    bdf4:	b.ne	be7c <BZ2_bzCompress@@Base+0x19c>  // b.any
    bdf8:	ldr	w2, [x20, #16]
    bdfc:	ldr	w1, [x0, #8]
    be00:	cmp	w2, w1
    be04:	b.ne	be88 <BZ2_bzCompress@@Base+0x1a8>  // b.any
    be08:	bl	b5b4 <BZ2_decompress@@Base+0x2f88>
    be0c:	ldr	w0, [x20, #16]
    be10:	mov	w19, #0x2                   	// #2
    be14:	cbnz	w0, bf20 <BZ2_bzCompress@@Base+0x240>
    be18:	ldr	w0, [x20, #92]
    be1c:	cmp	w0, #0xff
    be20:	b.hi	bed0 <BZ2_bzCompress@@Base+0x1f0>  // b.pmore
    be24:	ldr	w0, [x20, #96]
    be28:	cmp	w0, #0x0
    be2c:	b.le	bed0 <BZ2_bzCompress@@Base+0x1f0>
    be30:	ldr	x21, [sp, #32]
    be34:	b	be60 <BZ2_bzCompress@@Base+0x180>
    be38:	mov	w19, #0xfffffffe            	// #-2
    be3c:	b	be60 <BZ2_bzCompress@@Base+0x180>
    be40:	mov	w19, #0xfffffffe            	// #-2
    be44:	ldr	x21, [sp, #32]
    be48:	b	be60 <BZ2_bzCompress@@Base+0x180>
    be4c:	mov	w19, #0xfffffffe            	// #-2
    be50:	ldr	x21, [sp, #32]
    be54:	b	be60 <BZ2_bzCompress@@Base+0x180>
    be58:	mov	w19, #0xffffffff            	// #-1
    be5c:	ldr	x21, [sp, #32]
    be60:	mov	w0, w19
    be64:	ldp	x19, x20, [sp, #16]
    be68:	ldp	x29, x30, [sp], #48
    be6c:	ret
    be70:	mov	w19, #0xfffffffe            	// #-2
    be74:	ldr	x21, [sp, #32]
    be78:	b	be60 <BZ2_bzCompress@@Base+0x180>
    be7c:	mov	w19, #0xffffffff            	// #-1
    be80:	ldr	x21, [sp, #32]
    be84:	b	be60 <BZ2_bzCompress@@Base+0x180>
    be88:	mov	w19, #0xffffffff            	// #-1
    be8c:	ldr	x21, [sp, #32]
    be90:	b	be60 <BZ2_bzCompress@@Base+0x180>
    be94:	mov	w19, #0xffffffff            	// #-1
    be98:	ldr	x21, [sp, #32]
    be9c:	b	be60 <BZ2_bzCompress@@Base+0x180>
    bea0:	mov	w19, #0xffffffff            	// #-1
    bea4:	ldr	x21, [sp, #32]
    bea8:	b	be60 <BZ2_bzCompress@@Base+0x180>
    beac:	mov	w19, #0xffffffff            	// #-1
    beb0:	ldr	x21, [sp, #32]
    beb4:	b	be60 <BZ2_bzCompress@@Base+0x180>
    beb8:	mov	w19, #0x3                   	// #3
    bebc:	ldr	x21, [sp, #32]
    bec0:	b	be60 <BZ2_bzCompress@@Base+0x180>
    bec4:	mov	w19, #0x3                   	// #3
    bec8:	ldr	x21, [sp, #32]
    becc:	b	be60 <BZ2_bzCompress@@Base+0x180>
    bed0:	ldr	w1, [x20, #120]
    bed4:	ldr	w0, [x20, #116]
    bed8:	mov	w19, #0x2                   	// #2
    bedc:	cmp	w1, w0
    bee0:	b.lt	bef8 <BZ2_bzCompress@@Base+0x218>  // b.tstop
    bee4:	mov	w0, #0x2                   	// #2
    bee8:	str	w0, [x20, #8]
    beec:	mov	w19, w21
    bef0:	ldr	x21, [sp, #32]
    bef4:	b	be60 <BZ2_bzCompress@@Base+0x180>
    bef8:	ldr	x21, [sp, #32]
    befc:	b	be60 <BZ2_bzCompress@@Base+0x180>
    bf00:	ldr	w1, [x20, #120]
    bf04:	ldr	w0, [x20, #116]
    bf08:	cmp	w1, w0
    bf0c:	b.lt	bec4 <BZ2_bzCompress@@Base+0x1e4>  // b.tstop
    bf10:	mov	w0, #0x1                   	// #1
    bf14:	str	w0, [x20, #8]
    bf18:	ldr	x21, [sp, #32]
    bf1c:	b	be60 <BZ2_bzCompress@@Base+0x180>
    bf20:	ldr	x21, [sp, #32]
    bf24:	b	be60 <BZ2_bzCompress@@Base+0x180>

000000000000bf28 <BZ2_bzCompressEnd@@Base>:
    bf28:	cbz	x0, bfb0 <BZ2_bzCompressEnd@@Base+0x88>
    bf2c:	stp	x29, x30, [sp, #-32]!
    bf30:	mov	x29, sp
    bf34:	stp	x19, x20, [sp, #16]
    bf38:	mov	x19, x0
    bf3c:	ldr	x20, [x0, #48]
    bf40:	cbz	x20, bfb8 <BZ2_bzCompressEnd@@Base+0x90>
    bf44:	ldr	x0, [x20]
    bf48:	cmp	x0, x19
    bf4c:	b.ne	bfc0 <BZ2_bzCompressEnd@@Base+0x98>  // b.any
    bf50:	ldr	x1, [x20, #24]
    bf54:	cbz	x1, bf64 <BZ2_bzCompressEnd@@Base+0x3c>
    bf58:	ldr	x2, [x19, #64]
    bf5c:	ldr	x0, [x19, #72]
    bf60:	blr	x2
    bf64:	ldr	x1, [x20, #32]
    bf68:	cbz	x1, bf78 <BZ2_bzCompressEnd@@Base+0x50>
    bf6c:	ldr	x2, [x19, #64]
    bf70:	ldr	x0, [x19, #72]
    bf74:	blr	x2
    bf78:	ldr	x1, [x20, #40]
    bf7c:	cbz	x1, bf8c <BZ2_bzCompressEnd@@Base+0x64>
    bf80:	ldr	x2, [x19, #64]
    bf84:	ldr	x0, [x19, #72]
    bf88:	blr	x2
    bf8c:	ldr	x2, [x19, #64]
    bf90:	ldr	x1, [x19, #48]
    bf94:	ldr	x0, [x19, #72]
    bf98:	blr	x2
    bf9c:	str	xzr, [x19, #48]
    bfa0:	mov	w0, #0x0                   	// #0
    bfa4:	ldp	x19, x20, [sp, #16]
    bfa8:	ldp	x29, x30, [sp], #32
    bfac:	ret
    bfb0:	mov	w0, #0xfffffffe            	// #-2
    bfb4:	ret
    bfb8:	mov	w0, #0xfffffffe            	// #-2
    bfbc:	b	bfa4 <BZ2_bzCompressEnd@@Base+0x7c>
    bfc0:	mov	w0, #0xfffffffe            	// #-2
    bfc4:	b	bfa4 <BZ2_bzCompressEnd@@Base+0x7c>

000000000000bfc8 <BZ2_bzDecompressInit@@Base>:
    bfc8:	cbz	x0, c098 <BZ2_bzDecompressInit@@Base+0xd0>
    bfcc:	stp	x29, x30, [sp, #-48]!
    bfd0:	mov	x29, sp
    bfd4:	stp	x19, x20, [sp, #16]
    bfd8:	str	x21, [sp, #32]
    bfdc:	mov	x19, x0
    bfe0:	mov	w21, w1
    bfe4:	mov	w20, w2
    bfe8:	cmp	w2, #0x1
    bfec:	b.hi	c0a0 <BZ2_bzDecompressInit@@Base+0xd8>  // b.pmore
    bff0:	cmp	w1, #0x4
    bff4:	b.hi	c0a8 <BZ2_bzDecompressInit@@Base+0xe0>  // b.pmore
    bff8:	ldr	x0, [x0, #56]
    bffc:	cbz	x0, c078 <BZ2_bzDecompressInit@@Base+0xb0>
    c000:	ldr	x0, [x19, #64]
    c004:	cbz	x0, c088 <BZ2_bzDecompressInit@@Base+0xc0>
    c008:	ldr	x3, [x19, #56]
    c00c:	mov	w2, #0x1                   	// #1
    c010:	mov	w1, #0xfa90                	// #64144
    c014:	ldr	x0, [x19, #72]
    c018:	blr	x3
    c01c:	cbz	x0, c0b0 <BZ2_bzDecompressInit@@Base+0xe8>
    c020:	str	x19, [x0]
    c024:	str	x0, [x19, #48]
    c028:	mov	w1, #0xa                   	// #10
    c02c:	str	w1, [x0, #8]
    c030:	str	wzr, [x0, #36]
    c034:	str	wzr, [x0, #32]
    c038:	str	wzr, [x0, #3188]
    c03c:	str	wzr, [x19, #12]
    c040:	str	wzr, [x19, #16]
    c044:	str	wzr, [x19, #36]
    c048:	str	wzr, [x19, #40]
    c04c:	strb	w20, [x0, #44]
    c050:	str	xzr, [x0, #3168]
    c054:	str	xzr, [x0, #3160]
    c058:	str	xzr, [x0, #3152]
    c05c:	str	wzr, [x0, #48]
    c060:	str	w21, [x0, #52]
    c064:	mov	w0, #0x0                   	// #0
    c068:	ldp	x19, x20, [sp, #16]
    c06c:	ldr	x21, [sp, #32]
    c070:	ldp	x29, x30, [sp], #48
    c074:	ret
    c078:	adrp	x0, b000 <BZ2_decompress@@Base+0x29d4>
    c07c:	add	x0, x0, #0x598
    c080:	str	x0, [x19, #56]
    c084:	b	c000 <BZ2_bzDecompressInit@@Base+0x38>
    c088:	adrp	x0, b000 <BZ2_decompress@@Base+0x29d4>
    c08c:	add	x0, x0, #0x578
    c090:	str	x0, [x19, #64]
    c094:	b	c008 <BZ2_bzDecompressInit@@Base+0x40>
    c098:	mov	w0, #0xfffffffe            	// #-2
    c09c:	ret
    c0a0:	mov	w0, #0xfffffffe            	// #-2
    c0a4:	b	c068 <BZ2_bzDecompressInit@@Base+0xa0>
    c0a8:	mov	w0, #0xfffffffe            	// #-2
    c0ac:	b	c068 <BZ2_bzDecompressInit@@Base+0xa0>
    c0b0:	mov	w0, #0xfffffffd            	// #-3
    c0b4:	b	c068 <BZ2_bzDecompressInit@@Base+0xa0>

000000000000c0b8 <BZ2_indexIntoF@@Base>:
    c0b8:	mov	w5, w0
    c0bc:	mov	w3, #0x100                 	// #256
    c0c0:	mov	w0, #0x0                   	// #0
    c0c4:	add	w2, w0, w3
    c0c8:	asr	w2, w2, #1
    c0cc:	ldr	w4, [x1, w2, sxtw #2]
    c0d0:	cmp	w4, w5
    c0d4:	csel	w3, w3, w2, le
    c0d8:	csel	w0, w2, w0, le
    c0dc:	sub	w2, w3, w0
    c0e0:	cmp	w2, #0x1
    c0e4:	b.ne	c0c4 <BZ2_indexIntoF@@Base+0xc>  // b.any
    c0e8:	ret

000000000000c0ec <BZ2_bzDecompress@@Base>:
    c0ec:	stp	x29, x30, [sp, #-96]!
    c0f0:	mov	x29, sp
    c0f4:	stp	x19, x20, [sp, #16]
    c0f8:	cbz	x0, cf20 <BZ2_bzDecompress@@Base+0xe34>
    c0fc:	ldr	x19, [x0, #48]
    c100:	cbz	x19, cf28 <BZ2_bzDecompress@@Base+0xe3c>
    c104:	ldr	x1, [x19]
    c108:	cmp	x1, x0
    c10c:	b.ne	cf30 <BZ2_bzDecompress@@Base+0xe44>  // b.any
    c110:	stp	x21, x22, [sp, #32]
    c114:	stp	x23, x24, [sp, #48]
    c118:	mov	w21, #0x86a0                	// #34464
    c11c:	movk	w21, #0x1, lsl #16
    c120:	adrp	x22, 1f000 <BZ2_bzerror@@Base+0x10d58>
    c124:	ldr	x23, [x22, #4024]
    c128:	ldr	w0, [x19, #8]
    c12c:	b	ce88 <BZ2_bzDecompress@@Base+0xd9c>
    c130:	ldr	x0, [x19]
    c134:	ldr	w1, [x0, #32]
    c138:	cbz	w1, cfd0 <BZ2_bzDecompress@@Base+0xee4>
    c13c:	stp	x25, x26, [sp, #64]
    c140:	str	x27, [sp, #80]
    c144:	add	x6, x19, #0xc, lsl #12
    c148:	mov	w7, #0x1                   	// #1
    c14c:	add	x3, x19, #0x448
    c150:	mov	w8, #0x2                   	// #2
    c154:	mov	w10, #0x3                   	// #3
    c158:	adrp	x5, 1f000 <BZ2_bzerror@@Base+0x10d58>
    c15c:	ldr	x13, [x5, #4048]
    c160:	mov	x12, x13
    c164:	mov	x11, x13
    c168:	mov	x9, x13
    c16c:	mov	x5, x13
    c170:	ldr	x4, [x22, #4024]
    c174:	b	c26c <BZ2_bzDecompress@@Base+0x180>
    c178:	ldr	w16, [x19, #1092]
    c17c:	ldr	w30, [x6, #14928]
    c180:	add	w18, w30, #0x1
    c184:	cmp	w16, w18
    c188:	b.eq	ce3c <BZ2_bzDecompress@@Base+0xd50>  // b.none
    c18c:	b.gt	cf74 <BZ2_bzDecompress@@Base+0xe88>
    c190:	str	w7, [x19, #16]
    c194:	ldr	w24, [x19, #64]
    c198:	strb	w24, [x19, #12]
    c19c:	ldr	w25, [x19, #60]
    c1a0:	ldr	w17, [x19, #40]
    c1a4:	mul	w17, w17, w21
    c1a8:	cmp	w25, w17
    c1ac:	b.cs	cf8c <BZ2_bzDecompress@@Base+0xea0>  // b.hs, b.nlast
    c1b0:	mov	w15, w25
    c1b4:	mov	w1, w20
    c1b8:	mov	w2, #0x100                 	// #256
    c1bc:	add	w0, w2, w1
    c1c0:	asr	w0, w0, #1
    c1c4:	ldr	w14, [x3, w0, sxtw #2]
    c1c8:	cmp	w15, w14
    c1cc:	csel	w2, w2, w0, ge  // ge = tcont
    c1d0:	csel	w1, w0, w1, ge  // ge = tcont
    c1d4:	sub	w0, w2, w1
    c1d8:	cmp	w0, #0x1
    c1dc:	b.ne	c1bc <BZ2_bzDecompress@@Base+0xd0>  // b.any
    c1e0:	ldr	x15, [x19, #3160]
    c1e4:	ldr	x26, [x19, #3168]
    c1e8:	lsr	w0, w25, #1
    c1ec:	ldrb	w2, [x26, w0, uxtw]
    c1f0:	ubfiz	w0, w25, #2, #1
    c1f4:	lsr	w2, w2, w0
    c1f8:	ubfiz	w2, w2, #16, #4
    c1fc:	ldrh	w0, [x15, w25, uxtw #1]
    c200:	orr	w2, w2, w0
    c204:	str	w2, [x19, #60]
    c208:	ldr	w0, [x19, #24]
    c20c:	cbnz	w0, c228 <BZ2_bzDecompress@@Base+0x13c>
    c210:	ldr	w0, [x19, #28]
    c214:	ldr	w14, [x5, w0, sxtw #2]
    c218:	str	w14, [x19, #24]
    c21c:	cmp	w0, #0x1ff
    c220:	csinc	w0, wzr, w0, eq  // eq = none
    c224:	str	w0, [x19, #28]
    c228:	ldr	w25, [x19, #24]
    c22c:	sub	w25, w25, #0x1
    c230:	str	w25, [x19, #24]
    c234:	cmp	w25, #0x1
    c238:	cset	w0, eq  // eq = none
    c23c:	eor	w1, w0, w1
    c240:	and	w1, w1, #0xff
    c244:	add	w0, w16, #0x1
    c248:	str	w0, [x19, #1092]
    c24c:	cmp	w16, w30
    c250:	b.eq	c260 <BZ2_bzDecompress@@Base+0x174>  // b.none
    c254:	cmp	w24, w1
    c258:	b.eq	c2f0 <BZ2_bzDecompress@@Base+0x204>  // b.none
    c25c:	str	w1, [x19, #64]
    c260:	ldr	x0, [x19]
    c264:	ldr	w1, [x0, #32]
    c268:	cbz	w1, cfc8 <BZ2_bzDecompress@@Base+0xedc>
    c26c:	ldr	w20, [x19, #16]
    c270:	cbz	w20, c178 <BZ2_bzDecompress@@Base+0x8c>
    c274:	ldr	x1, [x0, #24]
    c278:	ldrb	w0, [x19, #12]
    c27c:	strb	w0, [x1]
    c280:	ldr	w1, [x19, #3184]
    c284:	eor	w0, w0, w1, lsr #24
    c288:	mov	w0, w0
    c28c:	ldr	w0, [x4, x0, lsl #2]
    c290:	eor	w1, w0, w1, lsl #8
    c294:	str	w1, [x19, #3184]
    c298:	ldr	w0, [x19, #16]
    c29c:	sub	w0, w0, #0x1
    c2a0:	str	w0, [x19, #16]
    c2a4:	ldr	x1, [x19]
    c2a8:	ldr	x0, [x1, #24]
    c2ac:	add	x0, x0, #0x1
    c2b0:	str	x0, [x1, #24]
    c2b4:	ldr	x1, [x19]
    c2b8:	ldr	w0, [x1, #32]
    c2bc:	sub	w0, w0, #0x1
    c2c0:	str	w0, [x1, #32]
    c2c4:	ldr	x1, [x19]
    c2c8:	ldr	w0, [x1, #36]
    c2cc:	add	w0, w0, #0x1
    c2d0:	str	w0, [x1, #36]
    c2d4:	ldr	x0, [x19]
    c2d8:	ldr	w1, [x0, #36]
    c2dc:	cbnz	w1, c260 <BZ2_bzDecompress@@Base+0x174>
    c2e0:	ldr	w1, [x0, #40]
    c2e4:	add	w1, w1, #0x1
    c2e8:	str	w1, [x0, #40]
    c2ec:	b	c260 <BZ2_bzDecompress@@Base+0x174>
    c2f0:	str	w8, [x19, #16]
    c2f4:	cmp	w17, w2
    c2f8:	b.ls	cf98 <BZ2_bzDecompress@@Base+0xeac>  // b.plast
    c2fc:	mov	w27, w2
    c300:	mov	w14, w20
    c304:	mov	w30, #0x100                 	// #256
    c308:	add	w0, w14, w30
    c30c:	asr	w0, w0, #1
    c310:	ldr	w24, [x3, w0, sxtw #2]
    c314:	cmp	w27, w24
    c318:	csel	w30, w30, w0, ge  // ge = tcont
    c31c:	csel	w14, w0, w14, ge  // ge = tcont
    c320:	sub	w0, w30, w14
    c324:	cmp	w0, #0x1
    c328:	b.ne	c308 <BZ2_bzDecompress@@Base+0x21c>  // b.any
    c32c:	lsr	w0, w2, #1
    c330:	ldrb	w0, [x26, w0, uxtw]
    c334:	ubfiz	w24, w2, #2, #1
    c338:	lsr	w0, w0, w24
    c33c:	ubfiz	w0, w0, #16, #4
    c340:	mov	w2, w2
    c344:	ldrh	w2, [x15, x2, lsl #1]
    c348:	orr	w2, w0, w2
    c34c:	str	w2, [x19, #60]
    c350:	cbnz	w25, c36c <BZ2_bzDecompress@@Base+0x280>
    c354:	ldr	w0, [x19, #28]
    c358:	ldr	w24, [x9, w0, sxtw #2]
    c35c:	str	w24, [x19, #24]
    c360:	cmp	w0, #0x1ff
    c364:	csinc	w0, wzr, w0, eq  // eq = none
    c368:	str	w0, [x19, #28]
    c36c:	ldr	w24, [x19, #24]
    c370:	sub	w24, w24, #0x1
    c374:	str	w24, [x19, #24]
    c378:	cmp	w24, #0x1
    c37c:	cset	w0, eq  // eq = none
    c380:	eor	w14, w0, w14
    c384:	and	w14, w14, #0xff
    c388:	add	w0, w16, #0x2
    c38c:	str	w0, [x19, #1092]
    c390:	cmp	w18, w0
    c394:	b.eq	c260 <BZ2_bzDecompress@@Base+0x174>  // b.none
    c398:	cmp	w1, w14
    c39c:	b.eq	c3c4 <BZ2_bzDecompress@@Base+0x2d8>  // b.none
    c3a0:	str	w14, [x19, #64]
    c3a4:	ldr	x0, [x19]
    c3a8:	ldr	w1, [x0, #32]
    c3ac:	cbnz	w1, c26c <BZ2_bzDecompress@@Base+0x180>
    c3b0:	ldp	x21, x22, [sp, #32]
    c3b4:	ldp	x23, x24, [sp, #48]
    c3b8:	ldp	x25, x26, [sp, #64]
    c3bc:	ldr	x27, [sp, #80]
    c3c0:	b	cf44 <BZ2_bzDecompress@@Base+0xe58>
    c3c4:	str	w10, [x19, #16]
    c3c8:	cmp	w17, w2
    c3cc:	b.ls	cfa4 <BZ2_bzDecompress@@Base+0xeb8>  // b.plast
    c3d0:	mov	w30, w2
    c3d4:	mov	w14, w20
    c3d8:	mov	w25, #0x100                 	// #256
    c3dc:	add	w0, w14, w25
    c3e0:	asr	w0, w0, #1
    c3e4:	ldr	w27, [x3, w0, sxtw #2]
    c3e8:	cmp	w30, w27
    c3ec:	csel	w25, w25, w0, ge  // ge = tcont
    c3f0:	csel	w14, w0, w14, ge  // ge = tcont
    c3f4:	sub	w0, w25, w14
    c3f8:	cmp	w0, #0x1
    c3fc:	b.ne	c3dc <BZ2_bzDecompress@@Base+0x2f0>  // b.any
    c400:	lsr	w0, w2, #1
    c404:	ldrb	w0, [x26, w0, uxtw]
    c408:	ubfiz	w25, w2, #2, #1
    c40c:	lsr	w0, w0, w25
    c410:	ubfiz	w0, w0, #16, #4
    c414:	mov	w2, w2
    c418:	ldrh	w2, [x15, x2, lsl #1]
    c41c:	orr	w2, w0, w2
    c420:	str	w2, [x19, #60]
    c424:	cbnz	w24, c440 <BZ2_bzDecompress@@Base+0x354>
    c428:	ldr	w0, [x19, #28]
    c42c:	ldr	w24, [x11, w0, sxtw #2]
    c430:	str	w24, [x19, #24]
    c434:	cmp	w0, #0x1ff
    c438:	csinc	w0, wzr, w0, eq  // eq = none
    c43c:	str	w0, [x19, #28]
    c440:	ldr	w24, [x19, #24]
    c444:	sub	w24, w24, #0x1
    c448:	str	w24, [x19, #24]
    c44c:	cmp	w24, #0x1
    c450:	cset	w0, eq  // eq = none
    c454:	eor	w0, w0, w14
    c458:	and	w0, w0, #0xff
    c45c:	add	w14, w16, #0x3
    c460:	str	w14, [x19, #1092]
    c464:	cmp	w18, w14
    c468:	b.eq	c260 <BZ2_bzDecompress@@Base+0x174>  // b.none
    c46c:	cmp	w1, w0
    c470:	b.eq	c47c <BZ2_bzDecompress@@Base+0x390>  // b.none
    c474:	str	w0, [x19, #64]
    c478:	b	c3a4 <BZ2_bzDecompress@@Base+0x2b8>
    c47c:	cmp	w17, w2
    c480:	b.ls	cfb0 <BZ2_bzDecompress@@Base+0xec4>  // b.plast
    c484:	mov	w18, w2
    c488:	mov	w25, w20
    c48c:	mov	w1, #0x100                 	// #256
    c490:	add	w0, w25, w1
    c494:	asr	w0, w0, #1
    c498:	ldr	w14, [x3, w0, sxtw #2]
    c49c:	cmp	w18, w14
    c4a0:	csel	w1, w1, w0, ge  // ge = tcont
    c4a4:	csel	w25, w0, w25, ge  // ge = tcont
    c4a8:	sub	w0, w1, w25
    c4ac:	cmp	w0, #0x1
    c4b0:	b.ne	c490 <BZ2_bzDecompress@@Base+0x3a4>  // b.any
    c4b4:	lsr	w0, w2, #1
    c4b8:	ldrb	w18, [x26, w0, uxtw]
    c4bc:	ubfiz	w0, w2, #2, #1
    c4c0:	lsr	w18, w18, w0
    c4c4:	ubfiz	w18, w18, #16, #4
    c4c8:	mov	w2, w2
    c4cc:	ldrh	w0, [x15, x2, lsl #1]
    c4d0:	orr	w18, w18, w0
    c4d4:	str	w18, [x19, #60]
    c4d8:	cbnz	w24, c4f4 <BZ2_bzDecompress@@Base+0x408>
    c4dc:	ldr	w0, [x19, #28]
    c4e0:	ldr	w1, [x12, w0, sxtw #2]
    c4e4:	str	w1, [x19, #24]
    c4e8:	cmp	w0, #0x1ff
    c4ec:	csinc	w0, wzr, w0, eq  // eq = none
    c4f0:	str	w0, [x19, #28]
    c4f4:	ldr	w24, [x19, #24]
    c4f8:	sub	w24, w24, #0x1
    c4fc:	str	w24, [x19, #24]
    c500:	add	w0, w16, #0x4
    c504:	str	w0, [x19, #1092]
    c508:	cmp	w24, #0x1
    c50c:	cset	w0, eq  // eq = none
    c510:	eor	w0, w0, w25
    c514:	and	w0, w0, #0xff
    c518:	add	w0, w0, #0x4
    c51c:	str	w0, [x19, #16]
    c520:	cmp	w17, w18
    c524:	b.ls	cfbc <BZ2_bzDecompress@@Base+0xed0>  // b.plast
    c528:	mov	w14, w18
    c52c:	mov	w1, #0x100                 	// #256
    c530:	add	w0, w20, w1
    c534:	asr	w0, w0, #1
    c538:	ldr	w2, [x3, w0, sxtw #2]
    c53c:	cmp	w14, w2
    c540:	csel	w1, w1, w0, ge  // ge = tcont
    c544:	csel	w20, w0, w20, ge  // ge = tcont
    c548:	sub	w0, w1, w20
    c54c:	cmp	w0, #0x1
    c550:	b.ne	c530 <BZ2_bzDecompress@@Base+0x444>  // b.any
    c554:	str	w20, [x19, #64]
    c558:	lsr	w0, w18, #1
    c55c:	ldrb	w0, [x26, w0, uxtw]
    c560:	ubfiz	w1, w18, #2, #1
    c564:	lsr	w0, w0, w1
    c568:	ubfiz	w0, w0, #16, #4
    c56c:	mov	w18, w18
    c570:	ldrh	w1, [x15, x18, lsl #1]
    c574:	orr	w0, w0, w1
    c578:	str	w0, [x19, #60]
    c57c:	cbnz	w24, c598 <BZ2_bzDecompress@@Base+0x4ac>
    c580:	ldr	w0, [x19, #28]
    c584:	ldr	w1, [x13, w0, sxtw #2]
    c588:	str	w1, [x19, #24]
    c58c:	cmp	w0, #0x1ff
    c590:	csinc	w0, wzr, w0, eq  // eq = none
    c594:	str	w0, [x19, #28]
    c598:	ldr	w0, [x19, #24]
    c59c:	sub	w0, w0, #0x1
    c5a0:	str	w0, [x19, #24]
    c5a4:	cmp	w0, #0x1
    c5a8:	cset	w0, eq  // eq = none
    c5ac:	eor	w20, w0, w20
    c5b0:	str	w20, [x19, #64]
    c5b4:	add	w16, w16, #0x5
    c5b8:	str	w16, [x19, #1092]
    c5bc:	b	c260 <BZ2_bzDecompress@@Base+0x174>
    c5c0:	ldr	w11, [x19, #1092]
    c5c4:	ldr	w18, [x5, #14928]
    c5c8:	add	w13, w18, #0x1
    c5cc:	cmp	w11, w13
    c5d0:	b.eq	cfe8 <BZ2_bzDecompress@@Base+0xefc>  // b.none
    c5d4:	b.gt	cf7c <BZ2_bzDecompress@@Base+0xe90>
    c5d8:	str	w6, [x19, #16]
    c5dc:	ldr	w14, [x19, #64]
    c5e0:	strb	w14, [x19, #12]
    c5e4:	ldr	w15, [x19, #60]
    c5e8:	ldr	w12, [x19, #40]
    c5ec:	mul	w12, w12, w21
    c5f0:	cmp	w15, w12
    c5f4:	b.cs	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.hs, b.nlast
    c5f8:	mov	w10, w15
    c5fc:	mov	w1, w20
    c600:	mov	w2, #0x100                 	// #256
    c604:	add	w0, w1, w2
    c608:	asr	w0, w0, #1
    c60c:	ldr	w9, [x3, w0, sxtw #2]
    c610:	cmp	w10, w9
    c614:	csel	w2, w2, w0, ge  // ge = tcont
    c618:	csel	w1, w0, w1, ge  // ge = tcont
    c61c:	sub	w0, w2, w1
    c620:	cmp	w0, #0x1
    c624:	b.ne	c604 <BZ2_bzDecompress@@Base+0x518>  // b.any
    c628:	ldr	x16, [x19, #3160]
    c62c:	ldr	x17, [x19, #3168]
    c630:	lsr	w0, w15, #1
    c634:	ldrb	w2, [x17, w0, uxtw]
    c638:	ubfiz	w0, w15, #2, #1
    c63c:	lsr	w2, w2, w0
    c640:	ubfiz	w2, w2, #16, #4
    c644:	ldrh	w0, [x16, w15, uxtw #1]
    c648:	orr	w2, w2, w0
    c64c:	str	w2, [x19, #60]
    c650:	add	w0, w11, #0x1
    c654:	str	w0, [x19, #1092]
    c658:	cmp	w11, w18
    c65c:	b.eq	c670 <BZ2_bzDecompress@@Base+0x584>  // b.none
    c660:	and	w0, w1, #0xff
    c664:	cmp	w14, w1, uxtb
    c668:	b.eq	c700 <BZ2_bzDecompress@@Base+0x614>  // b.none
    c66c:	str	w0, [x19, #64]
    c670:	ldr	x0, [x19]
    c674:	ldr	w1, [x0, #32]
    c678:	cbz	w1, cfd0 <BZ2_bzDecompress@@Base+0xee4>
    c67c:	ldr	w20, [x19, #16]
    c680:	cbz	w20, c5c0 <BZ2_bzDecompress@@Base+0x4d4>
    c684:	ldr	x1, [x0, #24]
    c688:	ldrb	w0, [x19, #12]
    c68c:	strb	w0, [x1]
    c690:	ldr	w1, [x19, #3184]
    c694:	eor	w0, w0, w1, lsr #24
    c698:	mov	w0, w0
    c69c:	ldr	w0, [x4, x0, lsl #2]
    c6a0:	eor	w1, w0, w1, lsl #8
    c6a4:	str	w1, [x19, #3184]
    c6a8:	ldr	w0, [x19, #16]
    c6ac:	sub	w0, w0, #0x1
    c6b0:	str	w0, [x19, #16]
    c6b4:	ldr	x1, [x19]
    c6b8:	ldr	x0, [x1, #24]
    c6bc:	add	x0, x0, #0x1
    c6c0:	str	x0, [x1, #24]
    c6c4:	ldr	x1, [x19]
    c6c8:	ldr	w0, [x1, #32]
    c6cc:	sub	w0, w0, #0x1
    c6d0:	str	w0, [x1, #32]
    c6d4:	ldr	x1, [x19]
    c6d8:	ldr	w0, [x1, #36]
    c6dc:	add	w0, w0, #0x1
    c6e0:	str	w0, [x1, #36]
    c6e4:	ldr	x0, [x19]
    c6e8:	ldr	w1, [x0, #36]
    c6ec:	cbnz	w1, c670 <BZ2_bzDecompress@@Base+0x584>
    c6f0:	ldr	w1, [x0, #40]
    c6f4:	add	w1, w1, #0x1
    c6f8:	str	w1, [x0, #40]
    c6fc:	b	c670 <BZ2_bzDecompress@@Base+0x584>
    c700:	str	w7, [x19, #16]
    c704:	cmp	w12, w2
    c708:	b.ls	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.plast
    c70c:	mov	w15, w2
    c710:	mov	w1, w20
    c714:	mov	w9, #0x100                 	// #256
    c718:	add	w0, w1, w9
    c71c:	asr	w0, w0, #1
    c720:	ldr	w10, [x3, w0, sxtw #2]
    c724:	cmp	w15, w10
    c728:	csel	w9, w9, w0, ge  // ge = tcont
    c72c:	csel	w1, w0, w1, ge  // ge = tcont
    c730:	sub	w0, w9, w1
    c734:	cmp	w0, #0x1
    c738:	b.ne	c718 <BZ2_bzDecompress@@Base+0x62c>  // b.any
    c73c:	lsr	w0, w2, #1
    c740:	ldrb	w0, [x17, w0, uxtw]
    c744:	ubfiz	w9, w2, #2, #1
    c748:	lsr	w0, w0, w9
    c74c:	ubfiz	w0, w0, #16, #4
    c750:	mov	w2, w2
    c754:	ldrh	w2, [x16, x2, lsl #1]
    c758:	orr	w2, w0, w2
    c75c:	str	w2, [x19, #60]
    c760:	add	w0, w11, #0x2
    c764:	str	w0, [x19, #1092]
    c768:	cmp	w13, w0
    c76c:	b.eq	c670 <BZ2_bzDecompress@@Base+0x584>  // b.none
    c770:	and	w0, w1, #0xff
    c774:	cmp	w14, w1, uxtb
    c778:	b.eq	c798 <BZ2_bzDecompress@@Base+0x6ac>  // b.none
    c77c:	str	w0, [x19, #64]
    c780:	ldr	x0, [x19]
    c784:	ldr	w1, [x0, #32]
    c788:	cbnz	w1, c67c <BZ2_bzDecompress@@Base+0x590>
    c78c:	ldp	x21, x22, [sp, #32]
    c790:	ldp	x23, x24, [sp, #48]
    c794:	b	cf44 <BZ2_bzDecompress@@Base+0xe58>
    c798:	str	w8, [x19, #16]
    c79c:	cmp	w12, w2
    c7a0:	b.ls	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.plast
    c7a4:	mov	w15, w2
    c7a8:	mov	w1, w20
    c7ac:	mov	w9, #0x100                 	// #256
    c7b0:	add	w0, w1, w9
    c7b4:	asr	w0, w0, #1
    c7b8:	ldr	w10, [x3, w0, sxtw #2]
    c7bc:	cmp	w15, w10
    c7c0:	csel	w9, w9, w0, ge  // ge = tcont
    c7c4:	csel	w1, w0, w1, ge  // ge = tcont
    c7c8:	sub	w0, w9, w1
    c7cc:	cmp	w0, #0x1
    c7d0:	b.ne	c7b0 <BZ2_bzDecompress@@Base+0x6c4>  // b.any
    c7d4:	lsr	w0, w2, #1
    c7d8:	ldrb	w0, [x17, w0, uxtw]
    c7dc:	ubfiz	w9, w2, #2, #1
    c7e0:	lsr	w0, w0, w9
    c7e4:	ubfiz	w0, w0, #16, #4
    c7e8:	mov	w2, w2
    c7ec:	ldrh	w2, [x16, x2, lsl #1]
    c7f0:	orr	w2, w0, w2
    c7f4:	str	w2, [x19, #60]
    c7f8:	add	w0, w11, #0x3
    c7fc:	str	w0, [x19, #1092]
    c800:	cmp	w13, w0
    c804:	b.eq	c670 <BZ2_bzDecompress@@Base+0x584>  // b.none
    c808:	and	w0, w1, #0xff
    c80c:	cmp	w14, w1, uxtb
    c810:	b.eq	c81c <BZ2_bzDecompress@@Base+0x730>  // b.none
    c814:	str	w0, [x19, #64]
    c818:	b	c780 <BZ2_bzDecompress@@Base+0x694>
    c81c:	cmp	w12, w2
    c820:	b.ls	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.plast
    c824:	mov	w13, w2
    c828:	mov	w1, w20
    c82c:	mov	w9, #0x100                 	// #256
    c830:	add	w0, w1, w9
    c834:	asr	w0, w0, #1
    c838:	ldr	w10, [x3, w0, sxtw #2]
    c83c:	cmp	w13, w10
    c840:	csel	w9, w9, w0, ge  // ge = tcont
    c844:	csel	w1, w0, w1, ge  // ge = tcont
    c848:	sub	w0, w9, w1
    c84c:	cmp	w0, #0x1
    c850:	b.ne	c830 <BZ2_bzDecompress@@Base+0x744>  // b.any
    c854:	lsr	w0, w2, #1
    c858:	ldrb	w10, [x17, w0, uxtw]
    c85c:	ubfiz	w0, w2, #2, #1
    c860:	lsr	w10, w10, w0
    c864:	ubfiz	w10, w10, #16, #4
    c868:	mov	w2, w2
    c86c:	ldrh	w0, [x16, x2, lsl #1]
    c870:	orr	w10, w10, w0
    c874:	str	w10, [x19, #60]
    c878:	add	w0, w11, #0x4
    c87c:	str	w0, [x19, #1092]
    c880:	and	w0, w1, #0xff
    c884:	add	w0, w0, #0x4
    c888:	str	w0, [x19, #16]
    c88c:	cmp	w12, w10
    c890:	b.ls	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.plast
    c894:	mov	w9, w10
    c898:	mov	w1, #0x100                 	// #256
    c89c:	add	w0, w20, w1
    c8a0:	asr	w0, w0, #1
    c8a4:	ldr	w2, [x3, w0, sxtw #2]
    c8a8:	cmp	w9, w2
    c8ac:	csel	w1, w1, w0, ge  // ge = tcont
    c8b0:	csel	w20, w0, w20, ge  // ge = tcont
    c8b4:	sub	w0, w1, w20
    c8b8:	cmp	w0, #0x1
    c8bc:	b.ne	c89c <BZ2_bzDecompress@@Base+0x7b0>  // b.any
    c8c0:	str	w20, [x19, #64]
    c8c4:	lsr	w0, w10, #1
    c8c8:	ldrb	w0, [x17, w0, uxtw]
    c8cc:	ubfiz	w1, w10, #2, #1
    c8d0:	lsr	w0, w0, w1
    c8d4:	ubfiz	w0, w0, #16, #4
    c8d8:	mov	w10, w10
    c8dc:	ldrh	w1, [x16, x10, lsl #1]
    c8e0:	orr	w0, w0, w1
    c8e4:	str	w0, [x19, #60]
    c8e8:	add	w11, w11, #0x5
    c8ec:	str	w11, [x19, #1092]
    c8f0:	b	c670 <BZ2_bzDecompress@@Base+0x584>
    c8f4:	ldrb	w1, [x19, #20]
    c8f8:	cbz	w1, cc28 <BZ2_bzDecompress@@Base+0xb3c>
    c8fc:	ldr	x0, [x19]
    c900:	ldr	w1, [x0, #32]
    c904:	cbz	w1, cfd0 <BZ2_bzDecompress@@Base+0xee4>
    c908:	add	x4, x19, #0xc, lsl #12
    c90c:	mov	w5, #0x1                   	// #1
    c910:	mov	w6, #0x2                   	// #2
    c914:	mov	w8, #0x3                   	// #3
    c918:	adrp	x2, 1f000 <BZ2_bzerror@@Base+0x10d58>
    c91c:	ldr	x11, [x2, #4048]
    c920:	mov	x10, x11
    c924:	mov	x9, x11
    c928:	mov	x7, x11
    c92c:	mov	x2, x11
    c930:	ldr	x3, [x22, #4024]
    c934:	b	cb80 <BZ2_bzDecompress@@Base+0xa94>
    c938:	ldr	w0, [x19, #1092]
    c93c:	ldr	w17, [x4, #14928]
    c940:	add	w16, w17, #0x1
    c944:	cmp	w0, w16
    c948:	b.eq	cfe8 <BZ2_bzDecompress@@Base+0xefc>  // b.none
    c94c:	b.gt	cf7c <BZ2_bzDecompress@@Base+0xe90>
    c950:	str	w5, [x19, #16]
    c954:	ldr	w24, [x19, #64]
    c958:	strb	w24, [x19, #12]
    c95c:	ldr	w1, [x19, #60]
    c960:	ldr	w15, [x19, #40]
    c964:	mul	w15, w15, w21
    c968:	cmp	w1, w15
    c96c:	b.cs	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.hs, b.nlast
    c970:	ldr	x18, [x19, #3152]
    c974:	ldr	w13, [x18, w1, uxtw #2]
    c978:	lsr	w12, w13, #8
    c97c:	str	w12, [x19, #60]
    c980:	ldr	w1, [x19, #24]
    c984:	cbnz	w1, c9a0 <BZ2_bzDecompress@@Base+0x8b4>
    c988:	ldr	w1, [x19, #28]
    c98c:	ldr	w14, [x2, w1, sxtw #2]
    c990:	str	w14, [x19, #24]
    c994:	cmp	w1, #0x1ff
    c998:	csinc	w1, wzr, w1, eq  // eq = none
    c99c:	str	w1, [x19, #28]
    c9a0:	ldr	w14, [x19, #24]
    c9a4:	sub	w14, w14, #0x1
    c9a8:	str	w14, [x19, #24]
    c9ac:	cmp	w14, #0x1
    c9b0:	cset	w1, eq  // eq = none
    c9b4:	eor	w1, w1, w13
    c9b8:	and	w1, w1, #0xff
    c9bc:	add	w13, w0, #0x1
    c9c0:	str	w13, [x19, #1092]
    c9c4:	cmp	w0, w17
    c9c8:	b.eq	cb74 <BZ2_bzDecompress@@Base+0xa88>  // b.none
    c9cc:	cmp	w24, w1
    c9d0:	b.ne	cb70 <BZ2_bzDecompress@@Base+0xa84>  // b.any
    c9d4:	str	w6, [x19, #16]
    c9d8:	cmp	w15, w12
    c9dc:	b.ls	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.plast
    c9e0:	mov	w12, w12
    c9e4:	ldr	w24, [x18, x12, lsl #2]
    c9e8:	lsr	w17, w24, #8
    c9ec:	str	w17, [x19, #60]
    c9f0:	cbnz	w14, ca0c <BZ2_bzDecompress@@Base+0x920>
    c9f4:	ldr	w12, [x19, #28]
    c9f8:	ldr	w13, [x7, w12, sxtw #2]
    c9fc:	str	w13, [x19, #24]
    ca00:	cmp	w12, #0x1ff
    ca04:	csinc	w12, wzr, w12, eq  // eq = none
    ca08:	str	w12, [x19, #28]
    ca0c:	ldr	w13, [x19, #24]
    ca10:	sub	w13, w13, #0x1
    ca14:	str	w13, [x19, #24]
    ca18:	cmp	w13, #0x1
    ca1c:	cset	w12, eq  // eq = none
    ca20:	eor	w12, w12, w24
    ca24:	and	w12, w12, #0xff
    ca28:	add	w14, w0, #0x2
    ca2c:	str	w14, [x19, #1092]
    ca30:	cmp	w16, w14
    ca34:	b.eq	cb74 <BZ2_bzDecompress@@Base+0xa88>  // b.none
    ca38:	cmp	w1, w12
    ca3c:	b.ne	cc04 <BZ2_bzDecompress@@Base+0xb18>  // b.any
    ca40:	str	w8, [x19, #16]
    ca44:	cmp	w15, w17
    ca48:	b.ls	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.plast
    ca4c:	mov	w17, w17
    ca50:	ldr	w17, [x18, x17, lsl #2]
    ca54:	lsr	w14, w17, #8
    ca58:	str	w14, [x19, #60]
    ca5c:	cbnz	w13, ca78 <BZ2_bzDecompress@@Base+0x98c>
    ca60:	ldr	w12, [x19, #28]
    ca64:	ldr	w13, [x9, w12, sxtw #2]
    ca68:	str	w13, [x19, #24]
    ca6c:	cmp	w12, #0x1ff
    ca70:	csinc	w12, wzr, w12, eq  // eq = none
    ca74:	str	w12, [x19, #28]
    ca78:	ldr	w13, [x19, #24]
    ca7c:	sub	w13, w13, #0x1
    ca80:	str	w13, [x19, #24]
    ca84:	cmp	w13, #0x1
    ca88:	cset	w12, eq  // eq = none
    ca8c:	eor	w12, w12, w17
    ca90:	and	w12, w12, #0xff
    ca94:	add	w17, w0, #0x3
    ca98:	str	w17, [x19, #1092]
    ca9c:	cmp	w16, w17
    caa0:	b.eq	cb74 <BZ2_bzDecompress@@Base+0xa88>  // b.none
    caa4:	cmp	w1, w12
    caa8:	b.ne	cc20 <BZ2_bzDecompress@@Base+0xb34>  // b.any
    caac:	cmp	w15, w14
    cab0:	b.ls	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.plast
    cab4:	mov	w14, w14
    cab8:	ldr	w16, [x18, x14, lsl #2]
    cabc:	lsr	w14, w16, #8
    cac0:	str	w14, [x19, #60]
    cac4:	cbnz	w13, cae0 <BZ2_bzDecompress@@Base+0x9f4>
    cac8:	ldr	w1, [x19, #28]
    cacc:	ldr	w12, [x10, w1, sxtw #2]
    cad0:	str	w12, [x19, #24]
    cad4:	cmp	w1, #0x1ff
    cad8:	csinc	w1, wzr, w1, eq  // eq = none
    cadc:	str	w1, [x19, #28]
    cae0:	ldr	w12, [x19, #24]
    cae4:	sub	w12, w12, #0x1
    cae8:	str	w12, [x19, #24]
    caec:	add	w1, w0, #0x4
    caf0:	str	w1, [x19, #1092]
    caf4:	cmp	w12, #0x1
    caf8:	cset	w1, eq  // eq = none
    cafc:	eor	w1, w1, w16
    cb00:	and	w1, w1, #0xff
    cb04:	add	w1, w1, #0x4
    cb08:	str	w1, [x19, #16]
    cb0c:	cmp	w15, w14
    cb10:	b.ls	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.plast
    cb14:	mov	w14, w14
    cb18:	ldr	w1, [x18, x14, lsl #2]
    cb1c:	and	w13, w1, #0xff
    cb20:	str	w13, [x19, #64]
    cb24:	lsr	w1, w1, #8
    cb28:	str	w1, [x19, #60]
    cb2c:	cbnz	w12, cb48 <BZ2_bzDecompress@@Base+0xa5c>
    cb30:	ldr	w1, [x19, #28]
    cb34:	ldr	w12, [x11, w1, sxtw #2]
    cb38:	str	w12, [x19, #24]
    cb3c:	cmp	w1, #0x1ff
    cb40:	csinc	w1, wzr, w1, eq  // eq = none
    cb44:	str	w1, [x19, #28]
    cb48:	ldr	w1, [x19, #24]
    cb4c:	sub	w1, w1, #0x1
    cb50:	str	w1, [x19, #24]
    cb54:	cmp	w1, #0x1
    cb58:	cset	w1, eq  // eq = none
    cb5c:	eor	w1, w1, w13
    cb60:	str	w1, [x19, #64]
    cb64:	add	w0, w0, #0x5
    cb68:	str	w0, [x19, #1092]
    cb6c:	b	cb74 <BZ2_bzDecompress@@Base+0xa88>
    cb70:	str	w1, [x19, #64]
    cb74:	ldr	x0, [x19]
    cb78:	ldr	w1, [x0, #32]
    cb7c:	cbz	w1, cfd0 <BZ2_bzDecompress@@Base+0xee4>
    cb80:	ldr	w20, [x19, #16]
    cb84:	cbz	w20, c938 <BZ2_bzDecompress@@Base+0x84c>
    cb88:	ldr	x1, [x0, #24]
    cb8c:	ldrb	w0, [x19, #12]
    cb90:	strb	w0, [x1]
    cb94:	ldr	w1, [x19, #3184]
    cb98:	eor	w0, w0, w1, lsr #24
    cb9c:	mov	w0, w0
    cba0:	ldr	w0, [x3, x0, lsl #2]
    cba4:	eor	w1, w0, w1, lsl #8
    cba8:	str	w1, [x19, #3184]
    cbac:	ldr	w0, [x19, #16]
    cbb0:	sub	w0, w0, #0x1
    cbb4:	str	w0, [x19, #16]
    cbb8:	ldr	x1, [x19]
    cbbc:	ldr	x0, [x1, #24]
    cbc0:	add	x0, x0, #0x1
    cbc4:	str	x0, [x1, #24]
    cbc8:	ldr	x1, [x19]
    cbcc:	ldr	w0, [x1, #32]
    cbd0:	sub	w0, w0, #0x1
    cbd4:	str	w0, [x1, #32]
    cbd8:	ldr	x1, [x19]
    cbdc:	ldr	w0, [x1, #36]
    cbe0:	add	w0, w0, #0x1
    cbe4:	str	w0, [x1, #36]
    cbe8:	ldr	x0, [x19]
    cbec:	ldr	w1, [x0, #36]
    cbf0:	cbnz	w1, cb74 <BZ2_bzDecompress@@Base+0xa88>
    cbf4:	ldr	w1, [x0, #40]
    cbf8:	add	w1, w1, #0x1
    cbfc:	str	w1, [x0, #40]
    cc00:	b	cb74 <BZ2_bzDecompress@@Base+0xa88>
    cc04:	str	w12, [x19, #64]
    cc08:	ldr	x0, [x19]
    cc0c:	ldr	w1, [x0, #32]
    cc10:	cbnz	w1, cb80 <BZ2_bzDecompress@@Base+0xa94>
    cc14:	ldp	x21, x22, [sp, #32]
    cc18:	ldp	x23, x24, [sp, #48]
    cc1c:	b	cf44 <BZ2_bzDecompress@@Base+0xe58>
    cc20:	str	w12, [x19, #64]
    cc24:	b	cc08 <BZ2_bzDecompress@@Base+0xb1c>
    cc28:	ldr	w4, [x19, #3184]
    cc2c:	ldrb	w5, [x19, #12]
    cc30:	ldr	w2, [x19, #16]
    cc34:	ldr	w8, [x19, #1092]
    cc38:	ldr	w11, [x19, #64]
    cc3c:	ldr	x14, [x19, #3152]
    cc40:	ldr	w7, [x19, #60]
    cc44:	ldr	x1, [x19]
    cc48:	ldr	x6, [x1, #24]
    cc4c:	ldr	w13, [x1, #32]
    cc50:	add	x1, x19, #0xc, lsl #12
    cc54:	ldr	w15, [x1, #14928]
    cc58:	add	w12, w15, #0x1
    cc5c:	ldr	w10, [x19, #40]
    cc60:	mul	w10, w10, w21
    cc64:	mov	w3, w13
    cc68:	ldr	x9, [x22, #4024]
    cc6c:	cmp	w2, #0x0
    cc70:	b.gt	cd68 <BZ2_bzDecompress@@Base+0xc7c>
    cc74:	cmp	w12, w8
    cc78:	b.lt	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.tstop
    cc7c:	b.eq	cdd8 <BZ2_bzDecompress@@Base+0xcec>  // b.none
    cc80:	and	w5, w11, #0xff
    cc84:	cmp	w10, w7
    cc88:	b.ls	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.plast
    cc8c:	ldr	w1, [x14, w7, uxtw #2]
    cc90:	lsr	w7, w1, #8
    cc94:	and	w2, w1, #0xff
    cc98:	cmp	w11, w1, uxtb
    cc9c:	b.ne	cdbc <BZ2_bzDecompress@@Base+0xcd0>  // b.any
    cca0:	cmp	w15, w8
    cca4:	b.eq	cdb8 <BZ2_bzDecompress@@Base+0xccc>  // b.none
    cca8:	cmp	w10, w7
    ccac:	b.ls	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.plast
    ccb0:	mov	w7, w7
    ccb4:	ldr	w2, [x14, x7, lsl #2]
    ccb8:	lsr	w7, w2, #8
    ccbc:	add	w1, w8, #0x2
    ccc0:	cmp	w12, w1
    ccc4:	b.eq	cd3c <BZ2_bzDecompress@@Base+0xc50>  // b.none
    ccc8:	and	w16, w2, #0xff
    cccc:	cmp	w11, w2, uxtb
    ccd0:	b.ne	cd44 <BZ2_bzDecompress@@Base+0xc58>  // b.any
    ccd4:	cmp	w10, w7
    ccd8:	b.ls	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.plast
    ccdc:	mov	w7, w7
    cce0:	ldr	w2, [x14, x7, lsl #2]
    cce4:	lsr	w7, w2, #8
    cce8:	add	w1, w8, #0x3
    ccec:	cmp	w12, w1
    ccf0:	b.eq	cd54 <BZ2_bzDecompress@@Base+0xc68>  // b.none
    ccf4:	and	w16, w2, #0xff
    ccf8:	cmp	w11, w2, uxtb
    ccfc:	b.ne	cd5c <BZ2_bzDecompress@@Base+0xc70>  // b.any
    cd00:	cmp	w10, w7
    cd04:	b.ls	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.plast
    cd08:	mov	w7, w7
    cd0c:	ldr	w7, [x14, x7, lsl #2]
    cd10:	lsr	w1, w7, #8
    cd14:	and	w2, w7, #0xff
    cd18:	add	w2, w2, #0x4
    cd1c:	cmp	w10, w7, lsr #8
    cd20:	b.ls	cf7c <BZ2_bzDecompress@@Base+0xe90>  // b.plast
    cd24:	mov	w1, w1
    cd28:	ldr	w7, [x14, x1, lsl #2]
    cd2c:	and	w11, w7, #0xff
    cd30:	lsr	w7, w7, #8
    cd34:	add	w1, w8, #0x5
    cd38:	b	cd4c <BZ2_bzDecompress@@Base+0xc60>
    cd3c:	mov	w2, w0
    cd40:	b	cd4c <BZ2_bzDecompress@@Base+0xc60>
    cd44:	mov	w11, w16
    cd48:	mov	w2, w0
    cd4c:	mov	w8, w1
    cd50:	b	cc6c <BZ2_bzDecompress@@Base+0xb80>
    cd54:	mov	w2, #0x3                   	// #3
    cd58:	b	cd4c <BZ2_bzDecompress@@Base+0xc60>
    cd5c:	mov	w11, w16
    cd60:	mov	w2, #0x3                   	// #3
    cd64:	b	cd4c <BZ2_bzDecompress@@Base+0xc60>
    cd68:	cbz	w3, cddc <BZ2_bzDecompress@@Base+0xcf0>
    cd6c:	cmp	w2, #0x1
    cd70:	b.eq	cd9c <BZ2_bzDecompress@@Base+0xcb0>  // b.none
    cd74:	strb	w5, [x6], #1
    cd78:	eor	w1, w5, w4, lsr #24
    cd7c:	mov	w1, w1
    cd80:	ldr	w1, [x9, x1, lsl #2]
    cd84:	eor	w4, w1, w4, lsl #8
    cd88:	sub	w2, w2, #0x1
    cd8c:	subs	w3, w3, #0x1
    cd90:	b.eq	cddc <BZ2_bzDecompress@@Base+0xcf0>  // b.none
    cd94:	cmp	w2, #0x1
    cd98:	b.ne	cd74 <BZ2_bzDecompress@@Base+0xc88>  // b.any
    cd9c:	strb	w5, [x6], #1
    cda0:	eor	w1, w5, w4, lsr #24
    cda4:	mov	w1, w1
    cda8:	ldr	w1, [x23, x1, lsl #2]
    cdac:	eor	w4, w1, w4, lsl #8
    cdb0:	sub	w3, w3, #0x1
    cdb4:	b	cc74 <BZ2_bzDecompress@@Base+0xb88>
    cdb8:	mov	w2, w11
    cdbc:	add	w8, w8, #0x1
    cdc0:	cbnz	w3, cdd0 <BZ2_bzDecompress@@Base+0xce4>
    cdc4:	mov	w11, w2
    cdc8:	mov	w2, #0x1                   	// #1
    cdcc:	b	cddc <BZ2_bzDecompress@@Base+0xcf0>
    cdd0:	mov	w11, w2
    cdd4:	b	cd9c <BZ2_bzDecompress@@Base+0xcb0>
    cdd8:	mov	w2, #0x0                   	// #0
    cddc:	ldr	x9, [x19]
    cde0:	ldr	w1, [x9, #36]
    cde4:	add	w0, w13, w1
    cde8:	sub	w0, w0, w3
    cdec:	str	w0, [x9, #36]
    cdf0:	ldr	x0, [x19]
    cdf4:	ldr	w9, [x0, #36]
    cdf8:	cmp	w1, w9
    cdfc:	b.ls	ce0c <BZ2_bzDecompress@@Base+0xd20>  // b.plast
    ce00:	ldr	w1, [x0, #40]
    ce04:	add	w1, w1, #0x1
    ce08:	str	w1, [x0, #40]
    ce0c:	str	w4, [x19, #3184]
    ce10:	strb	w5, [x19, #12]
    ce14:	str	w2, [x19, #16]
    ce18:	str	w8, [x19, #1092]
    ce1c:	str	w11, [x19, #64]
    ce20:	str	x14, [x19, #3152]
    ce24:	str	w7, [x19, #60]
    ce28:	ldr	x0, [x19]
    ce2c:	str	x6, [x0, #24]
    ce30:	ldr	x0, [x19]
    ce34:	str	w3, [x0, #32]
    ce38:	b	cfd0 <BZ2_bzDecompress@@Base+0xee4>
    ce3c:	ldp	x25, x26, [sp, #64]
    ce40:	ldr	x27, [sp, #80]
    ce44:	b	cfe8 <BZ2_bzDecompress@@Base+0xefc>
    ce48:	ldr	w2, [x19, #3176]
    ce4c:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    ce50:	add	x1, x1, #0x670
    ce54:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    ce58:	ldr	x0, [x0, #4016]
    ce5c:	ldr	x0, [x0]
    ce60:	bl	16e0 <fprintf@plt>
    ce64:	b	d008 <BZ2_bzDecompress@@Base+0xf1c>
    ce68:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    ce6c:	ldr	x0, [x0, #4016]
    ce70:	ldr	x1, [x0]
    ce74:	mov	w0, #0x5d                  	// #93
    ce78:	bl	14c0 <fputc@plt>
    ce7c:	b	d014 <BZ2_bzDecompress@@Base+0xf28>
    ce80:	cmp	w0, #0x9
    ce84:	b.gt	d038 <BZ2_bzDecompress@@Base+0xf4c>
    ce88:	cmp	w0, #0x1
    ce8c:	b.eq	cf38 <BZ2_bzDecompress@@Base+0xe4c>  // b.none
    ce90:	cmp	w0, #0x2
    ce94:	b.ne	ce80 <BZ2_bzDecompress@@Base+0xd94>  // b.any
    ce98:	ldrb	w1, [x19, #44]
    ce9c:	cbz	w1, c8f4 <BZ2_bzDecompress@@Base+0x808>
    cea0:	ldrb	w0, [x19, #20]
    cea4:	cbnz	w0, c130 <BZ2_bzDecompress@@Base+0x44>
    cea8:	ldr	x0, [x19]
    ceac:	ldr	w1, [x0, #32]
    ceb0:	cbz	w1, cfd0 <BZ2_bzDecompress@@Base+0xee4>
    ceb4:	add	x5, x19, #0xc, lsl #12
    ceb8:	mov	w6, #0x1                   	// #1
    cebc:	add	x3, x19, #0x448
    cec0:	mov	w7, #0x2                   	// #2
    cec4:	mov	w8, #0x3                   	// #3
    cec8:	ldr	x4, [x22, #4024]
    cecc:	b	c67c <BZ2_bzDecompress@@Base+0x590>
    ced0:	ldr	w0, [x19, #52]
    ced4:	cmp	w0, #0x2
    ced8:	b.gt	cefc <BZ2_bzDecompress@@Base+0xe10>
    cedc:	ldr	w1, [x19, #3188]
    cee0:	ldr	w0, [x19, #3180]
    cee4:	cmp	w1, w0
    cee8:	mov	w0, #0xfffffffc            	// #-4
    ceec:	csel	w20, w20, w0, eq  // eq = none
    cef0:	ldp	x21, x22, [sp, #32]
    cef4:	ldp	x23, x24, [sp, #48]
    cef8:	b	cf44 <BZ2_bzDecompress@@Base+0xe58>
    cefc:	ldr	w3, [x19, #3188]
    cf00:	ldr	w2, [x19, #3180]
    cf04:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    cf08:	add	x1, x1, #0x688
    cf0c:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    cf10:	ldr	x0, [x0, #4016]
    cf14:	ldr	x0, [x0]
    cf18:	bl	16e0 <fprintf@plt>
    cf1c:	b	cedc <BZ2_bzDecompress@@Base+0xdf0>
    cf20:	mov	w20, #0xfffffffe            	// #-2
    cf24:	b	cf44 <BZ2_bzDecompress@@Base+0xe58>
    cf28:	mov	w20, #0xfffffffe            	// #-2
    cf2c:	b	cf44 <BZ2_bzDecompress@@Base+0xe58>
    cf30:	mov	w20, #0xfffffffe            	// #-2
    cf34:	b	cf44 <BZ2_bzDecompress@@Base+0xe58>
    cf38:	mov	w20, #0xffffffff            	// #-1
    cf3c:	ldp	x21, x22, [sp, #32]
    cf40:	ldp	x23, x24, [sp, #48]
    cf44:	mov	w0, w20
    cf48:	ldp	x19, x20, [sp, #16]
    cf4c:	ldp	x29, x30, [sp], #96
    cf50:	ret
    cf54:	mov	w20, #0x0                   	// #0
    cf58:	ldp	x21, x22, [sp, #32]
    cf5c:	ldp	x23, x24, [sp, #48]
    cf60:	b	cf44 <BZ2_bzDecompress@@Base+0xe58>
    cf64:	mov	w20, #0xfffffffc            	// #-4
    cf68:	ldp	x21, x22, [sp, #32]
    cf6c:	ldp	x23, x24, [sp, #48]
    cf70:	b	cf44 <BZ2_bzDecompress@@Base+0xe58>
    cf74:	ldp	x25, x26, [sp, #64]
    cf78:	ldr	x27, [sp, #80]
    cf7c:	mov	w20, #0xfffffffc            	// #-4
    cf80:	ldp	x21, x22, [sp, #32]
    cf84:	ldp	x23, x24, [sp, #48]
    cf88:	b	cf44 <BZ2_bzDecompress@@Base+0xe58>
    cf8c:	ldp	x25, x26, [sp, #64]
    cf90:	ldr	x27, [sp, #80]
    cf94:	b	cf7c <BZ2_bzDecompress@@Base+0xe90>
    cf98:	ldp	x25, x26, [sp, #64]
    cf9c:	ldr	x27, [sp, #80]
    cfa0:	b	cf7c <BZ2_bzDecompress@@Base+0xe90>
    cfa4:	ldp	x25, x26, [sp, #64]
    cfa8:	ldr	x27, [sp, #80]
    cfac:	b	cf7c <BZ2_bzDecompress@@Base+0xe90>
    cfb0:	ldp	x25, x26, [sp, #64]
    cfb4:	ldr	x27, [sp, #80]
    cfb8:	b	cf7c <BZ2_bzDecompress@@Base+0xe90>
    cfbc:	ldp	x25, x26, [sp, #64]
    cfc0:	ldr	x27, [sp, #80]
    cfc4:	b	cf7c <BZ2_bzDecompress@@Base+0xe90>
    cfc8:	ldp	x25, x26, [sp, #64]
    cfcc:	ldr	x27, [sp, #80]
    cfd0:	add	x0, x19, #0xc, lsl #12
    cfd4:	ldr	w0, [x0, #14928]
    cfd8:	add	w0, w0, #0x1
    cfdc:	ldr	w1, [x19, #1092]
    cfe0:	cmp	w1, w0
    cfe4:	b.ne	d064 <BZ2_bzDecompress@@Base+0xf78>  // b.any
    cfe8:	ldr	w0, [x19, #16]
    cfec:	cbnz	w0, cf54 <BZ2_bzDecompress@@Base+0xe68>
    cff0:	ldr	w3, [x19, #3184]
    cff4:	mvn	w3, w3
    cff8:	str	w3, [x19, #3184]
    cffc:	ldr	w0, [x19, #52]
    d000:	cmp	w0, #0x2
    d004:	b.gt	ce48 <BZ2_bzDecompress@@Base+0xd5c>
    d008:	ldr	w0, [x19, #52]
    d00c:	cmp	w0, #0x1
    d010:	b.gt	ce68 <BZ2_bzDecompress@@Base+0xd7c>
    d014:	ldr	w1, [x19, #3184]
    d018:	ldr	w0, [x19, #3176]
    d01c:	cmp	w1, w0
    d020:	b.ne	cf64 <BZ2_bzDecompress@@Base+0xe78>  // b.any
    d024:	ldr	w0, [x19, #3188]
    d028:	eor	w0, w1, w0, ror #31
    d02c:	str	w0, [x19, #3188]
    d030:	mov	w0, #0xe                   	// #14
    d034:	str	w0, [x19, #8]
    d038:	mov	x0, x19
    d03c:	bl	1590 <BZ2_decompress@plt>
    d040:	mov	w20, w0
    d044:	cmp	w0, #0x4
    d048:	b.eq	ced0 <BZ2_bzDecompress@@Base+0xde4>  // b.none
    d04c:	ldr	w0, [x19, #8]
    d050:	cmp	w0, #0x2
    d054:	b.eq	c128 <BZ2_bzDecompress@@Base+0x3c>  // b.none
    d058:	ldp	x21, x22, [sp, #32]
    d05c:	ldp	x23, x24, [sp, #48]
    d060:	b	cf44 <BZ2_bzDecompress@@Base+0xe58>
    d064:	mov	w20, #0x0                   	// #0
    d068:	ldp	x21, x22, [sp, #32]
    d06c:	ldp	x23, x24, [sp, #48]
    d070:	b	cf44 <BZ2_bzDecompress@@Base+0xe58>

000000000000d074 <BZ2_bzDecompressEnd@@Base>:
    d074:	cbz	x0, d0fc <BZ2_bzDecompressEnd@@Base+0x88>
    d078:	stp	x29, x30, [sp, #-32]!
    d07c:	mov	x29, sp
    d080:	stp	x19, x20, [sp, #16]
    d084:	mov	x19, x0
    d088:	ldr	x20, [x0, #48]
    d08c:	cbz	x20, d104 <BZ2_bzDecompressEnd@@Base+0x90>
    d090:	ldr	x0, [x20]
    d094:	cmp	x0, x19
    d098:	b.ne	d10c <BZ2_bzDecompressEnd@@Base+0x98>  // b.any
    d09c:	ldr	x1, [x20, #3152]
    d0a0:	cbz	x1, d0b0 <BZ2_bzDecompressEnd@@Base+0x3c>
    d0a4:	ldr	x2, [x19, #64]
    d0a8:	ldr	x0, [x19, #72]
    d0ac:	blr	x2
    d0b0:	ldr	x1, [x20, #3160]
    d0b4:	cbz	x1, d0c4 <BZ2_bzDecompressEnd@@Base+0x50>
    d0b8:	ldr	x2, [x19, #64]
    d0bc:	ldr	x0, [x19, #72]
    d0c0:	blr	x2
    d0c4:	ldr	x1, [x20, #3168]
    d0c8:	cbz	x1, d0d8 <BZ2_bzDecompressEnd@@Base+0x64>
    d0cc:	ldr	x2, [x19, #64]
    d0d0:	ldr	x0, [x19, #72]
    d0d4:	blr	x2
    d0d8:	ldr	x2, [x19, #64]
    d0dc:	ldr	x1, [x19, #48]
    d0e0:	ldr	x0, [x19, #72]
    d0e4:	blr	x2
    d0e8:	str	xzr, [x19, #48]
    d0ec:	mov	w0, #0x0                   	// #0
    d0f0:	ldp	x19, x20, [sp, #16]
    d0f4:	ldp	x29, x30, [sp], #32
    d0f8:	ret
    d0fc:	mov	w0, #0xfffffffe            	// #-2
    d100:	ret
    d104:	mov	w0, #0xfffffffe            	// #-2
    d108:	b	d0f0 <BZ2_bzDecompressEnd@@Base+0x7c>
    d10c:	mov	w0, #0xfffffffe            	// #-2
    d110:	b	d0f0 <BZ2_bzDecompressEnd@@Base+0x7c>

000000000000d114 <BZ2_bzWriteOpen@@Base>:
    d114:	stp	x29, x30, [sp, #-64]!
    d118:	mov	x29, sp
    d11c:	stp	x19, x20, [sp, #16]
    d120:	stp	x21, x22, [sp, #32]
    d124:	stp	x23, x24, [sp, #48]
    d128:	mov	x20, x0
    d12c:	mov	x21, x1
    d130:	mov	w23, w2
    d134:	mov	w24, w3
    d138:	mov	w22, w4
    d13c:	cbz	x0, d260 <BZ2_bzWriteOpen@@Base+0x14c>
    d140:	str	wzr, [x0]
    d144:	cbz	x1, d1ec <BZ2_bzWriteOpen@@Base+0xd8>
    d148:	sub	w0, w2, #0x1
    d14c:	cmp	w0, #0x8
    d150:	b.hi	d1ec <BZ2_bzWriteOpen@@Base+0xd8>  // b.pmore
    d154:	cmp	w22, #0xfa
    d158:	ccmp	w24, #0x4, #0x2, ls  // ls = plast
    d15c:	b.hi	d1e4 <BZ2_bzWriteOpen@@Base+0xd0>  // b.pmore
    d160:	mov	x0, x21
    d164:	bl	16f0 <ferror@plt>
    d168:	cbnz	w0, d210 <BZ2_bzWriteOpen@@Base+0xfc>
    d16c:	mov	x0, #0x13f0                	// #5104
    d170:	bl	14e0 <malloc@plt>
    d174:	mov	x19, x0
    d178:	cbz	x0, d228 <BZ2_bzWriteOpen@@Base+0x114>
    d17c:	cbz	x20, d184 <BZ2_bzWriteOpen@@Base+0x70>
    d180:	str	wzr, [x20]
    d184:	str	wzr, [x19, #5096]
    d188:	add	x0, x19, #0x1, lsl #12
    d18c:	strb	wzr, [x0, #1004]
    d190:	str	wzr, [x19, #5008]
    d194:	str	x21, [x19]
    d198:	mov	w1, #0x1                   	// #1
    d19c:	strb	w1, [x0, #916]
    d1a0:	str	xzr, [x19, #5072]
    d1a4:	str	xzr, [x19, #5080]
    d1a8:	str	xzr, [x19, #5088]
    d1ac:	cmp	w22, #0x0
    d1b0:	mov	w3, #0x1e                  	// #30
    d1b4:	csel	w3, w22, w3, ne  // ne = any
    d1b8:	mov	w2, w24
    d1bc:	mov	w1, w23
    d1c0:	add	x0, x19, #0x1, lsl #12
    d1c4:	add	x0, x0, #0x398
    d1c8:	bl	1550 <BZ2_bzCompressInit@plt>
    d1cc:	cbnz	w0, d238 <BZ2_bzWriteOpen@@Base+0x124>
    d1d0:	str	wzr, [x19, #5024]
    d1d4:	add	x0, x19, #0x1, lsl #12
    d1d8:	mov	w1, #0x1                   	// #1
    d1dc:	strb	w1, [x0, #1004]
    d1e0:	b	d1f8 <BZ2_bzWriteOpen@@Base+0xe4>
    d1e4:	mov	x19, x20
    d1e8:	cbz	x20, d1f8 <BZ2_bzWriteOpen@@Base+0xe4>
    d1ec:	mov	w0, #0xfffffffe            	// #-2
    d1f0:	str	w0, [x20]
    d1f4:	mov	x19, #0x0                   	// #0
    d1f8:	mov	x0, x19
    d1fc:	ldp	x19, x20, [sp, #16]
    d200:	ldp	x21, x22, [sp, #32]
    d204:	ldp	x23, x24, [sp, #48]
    d208:	ldp	x29, x30, [sp], #64
    d20c:	ret
    d210:	mov	x19, x20
    d214:	cbz	x20, d1f8 <BZ2_bzWriteOpen@@Base+0xe4>
    d218:	mov	w0, #0xfffffffa            	// #-6
    d21c:	str	w0, [x20]
    d220:	mov	x19, #0x0                   	// #0
    d224:	b	d1f8 <BZ2_bzWriteOpen@@Base+0xe4>
    d228:	cbz	x20, d250 <BZ2_bzWriteOpen@@Base+0x13c>
    d22c:	mov	w0, #0xfffffffd            	// #-3
    d230:	str	w0, [x20]
    d234:	b	d1f8 <BZ2_bzWriteOpen@@Base+0xe4>
    d238:	cbz	x20, d240 <BZ2_bzWriteOpen@@Base+0x12c>
    d23c:	str	w0, [x20]
    d240:	mov	x0, x19
    d244:	bl	1610 <free@plt>
    d248:	mov	x19, #0x0                   	// #0
    d24c:	b	d1f8 <BZ2_bzWriteOpen@@Base+0xe4>
    d250:	mov	x19, x20
    d254:	b	d1f8 <BZ2_bzWriteOpen@@Base+0xe4>
    d258:	mov	x19, x21
    d25c:	b	d1f8 <BZ2_bzWriteOpen@@Base+0xe4>
    d260:	cbz	x1, d258 <BZ2_bzWriteOpen@@Base+0x144>
    d264:	sub	w0, w2, #0x1
    d268:	cmp	w0, #0x8
    d26c:	b.ls	d154 <BZ2_bzWriteOpen@@Base+0x40>  // b.plast
    d270:	mov	x19, x20
    d274:	b	d1f8 <BZ2_bzWriteOpen@@Base+0xe4>

000000000000d278 <BZ2_bzWrite@@Base>:
    d278:	stp	x29, x30, [sp, #-80]!
    d27c:	mov	x29, sp
    d280:	stp	x19, x20, [sp, #16]
    d284:	stp	x21, x22, [sp, #32]
    d288:	mov	x20, x0
    d28c:	mov	x19, x1
    d290:	mov	x22, x2
    d294:	mov	w21, w3
    d298:	cbz	x0, d2a0 <BZ2_bzWrite@@Base+0x28>
    d29c:	str	wzr, [x0]
    d2a0:	cbz	x19, d3f0 <BZ2_bzWrite@@Base+0x178>
    d2a4:	str	wzr, [x19, #5096]
    d2a8:	cmp	x22, #0x0
    d2ac:	ccmp	w21, #0x0, #0x1, ne  // ne = any
    d2b0:	b.lt	d3e8 <BZ2_bzWrite@@Base+0x170>  // b.tstop
    d2b4:	add	x0, x19, #0x1, lsl #12
    d2b8:	ldrb	w0, [x0, #916]
    d2bc:	cbnz	w0, d2d8 <BZ2_bzWrite@@Base+0x60>
    d2c0:	cbz	x20, d2cc <BZ2_bzWrite@@Base+0x54>
    d2c4:	mov	w0, #0xffffffff            	// #-1
    d2c8:	str	w0, [x20]
    d2cc:	mov	w0, #0xffffffff            	// #-1
    d2d0:	str	w0, [x19, #5096]
    d2d4:	b	d408 <BZ2_bzWrite@@Base+0x190>
    d2d8:	ldr	x0, [x19]
    d2dc:	bl	16f0 <ferror@plt>
    d2e0:	cbnz	w0, d314 <BZ2_bzWrite@@Base+0x9c>
    d2e4:	cbz	w21, d32c <BZ2_bzWrite@@Base+0xb4>
    d2e8:	stp	x23, x24, [sp, #48]
    d2ec:	stp	x25, x26, [sp, #64]
    d2f0:	str	w21, [x19, #5024]
    d2f4:	str	x22, [x19, #5016]
    d2f8:	mov	w22, #0x1388                	// #5000
    d2fc:	add	x21, x19, #0x8
    d300:	add	x23, x19, #0x1, lsl #12
    d304:	add	x23, x23, #0x398
    d308:	mov	w24, #0x1387                	// #4999
    d30c:	mov	x25, #0x1                   	// #1
    d310:	b	d35c <BZ2_bzWrite@@Base+0xe4>
    d314:	cbz	x20, d320 <BZ2_bzWrite@@Base+0xa8>
    d318:	mov	w0, #0xfffffffa            	// #-6
    d31c:	str	w0, [x20]
    d320:	mov	w0, #0xfffffffa            	// #-6
    d324:	str	w0, [x19, #5096]
    d328:	b	d408 <BZ2_bzWrite@@Base+0x190>
    d32c:	cbz	x20, d334 <BZ2_bzWrite@@Base+0xbc>
    d330:	str	wzr, [x20]
    d334:	str	wzr, [x19, #5096]
    d338:	b	d408 <BZ2_bzWrite@@Base+0x190>
    d33c:	cbz	x20, d344 <BZ2_bzWrite@@Base+0xcc>
    d340:	str	w0, [x20]
    d344:	str	w0, [x19, #5096]
    d348:	ldp	x23, x24, [sp, #48]
    d34c:	ldp	x25, x26, [sp, #64]
    d350:	b	d408 <BZ2_bzWrite@@Base+0x190>
    d354:	ldr	w0, [x19, #5024]
    d358:	cbz	w0, d3d0 <BZ2_bzWrite@@Base+0x158>
    d35c:	str	w22, [x19, #5048]
    d360:	str	x21, [x19, #5040]
    d364:	mov	w1, #0x0                   	// #0
    d368:	mov	x0, x23
    d36c:	bl	15b0 <BZ2_bzCompress@plt>
    d370:	cmp	w0, #0x1
    d374:	b.ne	d33c <BZ2_bzWrite@@Base+0xc4>  // b.any
    d378:	ldr	w0, [x19, #5048]
    d37c:	cmp	w0, w24
    d380:	b.hi	d354 <BZ2_bzWrite@@Base+0xdc>  // b.pmore
    d384:	sub	w26, w22, w0
    d388:	ldr	x3, [x19]
    d38c:	sxtw	x2, w26
    d390:	mov	x1, x25
    d394:	mov	x0, x21
    d398:	bl	1680 <fwrite@plt>
    d39c:	cmp	w26, w0
    d3a0:	b.ne	d3b0 <BZ2_bzWrite@@Base+0x138>  // b.any
    d3a4:	ldr	x0, [x19]
    d3a8:	bl	16f0 <ferror@plt>
    d3ac:	cbz	w0, d354 <BZ2_bzWrite@@Base+0xdc>
    d3b0:	cbz	x20, d3bc <BZ2_bzWrite@@Base+0x144>
    d3b4:	mov	w0, #0xfffffffa            	// #-6
    d3b8:	str	w0, [x20]
    d3bc:	mov	w0, #0xfffffffa            	// #-6
    d3c0:	str	w0, [x19, #5096]
    d3c4:	ldp	x23, x24, [sp, #48]
    d3c8:	ldp	x25, x26, [sp, #64]
    d3cc:	b	d408 <BZ2_bzWrite@@Base+0x190>
    d3d0:	cbz	x20, d3d8 <BZ2_bzWrite@@Base+0x160>
    d3d4:	str	wzr, [x20]
    d3d8:	str	wzr, [x19, #5096]
    d3dc:	ldp	x23, x24, [sp, #48]
    d3e0:	ldp	x25, x26, [sp, #64]
    d3e4:	b	d408 <BZ2_bzWrite@@Base+0x190>
    d3e8:	cbnz	x20, d3f4 <BZ2_bzWrite@@Base+0x17c>
    d3ec:	b	d400 <BZ2_bzWrite@@Base+0x188>
    d3f0:	cbz	x20, d408 <BZ2_bzWrite@@Base+0x190>
    d3f4:	mov	w0, #0xfffffffe            	// #-2
    d3f8:	str	w0, [x20]
    d3fc:	cbz	x19, d408 <BZ2_bzWrite@@Base+0x190>
    d400:	mov	w0, #0xfffffffe            	// #-2
    d404:	str	w0, [x19, #5096]
    d408:	ldp	x19, x20, [sp, #16]
    d40c:	ldp	x21, x22, [sp, #32]
    d410:	ldp	x29, x30, [sp], #80
    d414:	ret

000000000000d418 <BZ2_bzWriteClose64@@Base>:
    d418:	stp	x29, x30, [sp, #-112]!
    d41c:	mov	x29, sp
    d420:	stp	x19, x20, [sp, #16]
    d424:	mov	x20, x0
    d428:	cbz	x1, d488 <BZ2_bzWriteClose64@@Base+0x70>
    d42c:	stp	x21, x22, [sp, #32]
    d430:	stp	x23, x24, [sp, #48]
    d434:	stp	x25, x26, [sp, #64]
    d438:	mov	x19, x1
    d43c:	mov	w21, w2
    d440:	mov	x22, x3
    d444:	mov	x23, x4
    d448:	mov	x24, x5
    d44c:	mov	x25, x6
    d450:	add	x0, x1, #0x1, lsl #12
    d454:	ldrb	w0, [x0, #916]
    d458:	cbnz	w0, d494 <BZ2_bzWriteClose64@@Base+0x7c>
    d45c:	cbz	x20, d468 <BZ2_bzWriteClose64@@Base+0x50>
    d460:	mov	w0, #0xffffffff            	// #-1
    d464:	str	w0, [x20]
    d468:	mov	w0, #0xffffffff            	// #-1
    d46c:	str	w0, [x19, #5096]
    d470:	ldp	x21, x22, [sp, #32]
    d474:	ldp	x23, x24, [sp, #48]
    d478:	ldp	x25, x26, [sp, #64]
    d47c:	ldp	x19, x20, [sp, #16]
    d480:	ldp	x29, x30, [sp], #112
    d484:	ret
    d488:	cbz	x0, d47c <BZ2_bzWriteClose64@@Base+0x64>
    d48c:	str	wzr, [x0]
    d490:	b	d47c <BZ2_bzWriteClose64@@Base+0x64>
    d494:	ldr	x0, [x1]
    d498:	bl	16f0 <ferror@plt>
    d49c:	cbnz	w0, d4e8 <BZ2_bzWriteClose64@@Base+0xd0>
    d4a0:	cbz	x22, d4a8 <BZ2_bzWriteClose64@@Base+0x90>
    d4a4:	str	wzr, [x22]
    d4a8:	cbz	x23, d4b0 <BZ2_bzWriteClose64@@Base+0x98>
    d4ac:	str	wzr, [x23]
    d4b0:	cbz	x24, d4b8 <BZ2_bzWriteClose64@@Base+0xa0>
    d4b4:	str	wzr, [x24]
    d4b8:	cbz	x25, d4c0 <BZ2_bzWriteClose64@@Base+0xa8>
    d4bc:	str	wzr, [x25]
    d4c0:	cbnz	w21, d5cc <BZ2_bzWriteClose64@@Base+0x1b4>
    d4c4:	ldr	w0, [x19, #5096]
    d4c8:	cbnz	w0, d5c0 <BZ2_bzWriteClose64@@Base+0x1a8>
    d4cc:	stp	x27, x28, [sp, #80]
    d4d0:	mov	w28, #0x1388                	// #5000
    d4d4:	add	x27, x19, #0x8
    d4d8:	add	x0, x19, #0x1, lsl #12
    d4dc:	add	x0, x0, #0x398
    d4e0:	str	x0, [sp, #104]
    d4e4:	b	d534 <BZ2_bzWriteClose64@@Base+0x11c>
    d4e8:	cbz	x20, d4f4 <BZ2_bzWriteClose64@@Base+0xdc>
    d4ec:	mov	w0, #0xfffffffa            	// #-6
    d4f0:	str	w0, [x20]
    d4f4:	mov	w0, #0xfffffffa            	// #-6
    d4f8:	str	w0, [x19, #5096]
    d4fc:	ldp	x21, x22, [sp, #32]
    d500:	ldp	x23, x24, [sp, #48]
    d504:	ldp	x25, x26, [sp, #64]
    d508:	b	d47c <BZ2_bzWriteClose64@@Base+0x64>
    d50c:	cbz	x20, d514 <BZ2_bzWriteClose64@@Base+0xfc>
    d510:	str	w21, [x20]
    d514:	str	w21, [x19, #5096]
    d518:	ldp	x21, x22, [sp, #32]
    d51c:	ldp	x23, x24, [sp, #48]
    d520:	ldp	x25, x26, [sp, #64]
    d524:	ldp	x27, x28, [sp, #80]
    d528:	b	d47c <BZ2_bzWriteClose64@@Base+0x64>
    d52c:	cmp	w21, #0x4
    d530:	b.eq	d5bc <BZ2_bzWriteClose64@@Base+0x1a4>  // b.none
    d534:	str	w28, [x19, #5048]
    d538:	str	x27, [x19, #5040]
    d53c:	mov	w1, #0x2                   	// #2
    d540:	ldr	x0, [sp, #104]
    d544:	bl	15b0 <BZ2_bzCompress@plt>
    d548:	mov	w21, w0
    d54c:	sub	w0, w0, #0x3
    d550:	cmp	w0, #0x1
    d554:	b.hi	d50c <BZ2_bzWriteClose64@@Base+0xf4>  // b.pmore
    d558:	ldr	w26, [x19, #5048]
    d55c:	mov	w0, #0x1387                	// #4999
    d560:	cmp	w26, w0
    d564:	b.hi	d52c <BZ2_bzWriteClose64@@Base+0x114>  // b.pmore
    d568:	sub	w26, w28, w26
    d56c:	ldr	x3, [x19]
    d570:	sxtw	x2, w26
    d574:	mov	x1, #0x1                   	// #1
    d578:	mov	x0, x27
    d57c:	bl	1680 <fwrite@plt>
    d580:	cmp	w26, w0
    d584:	b.ne	d594 <BZ2_bzWriteClose64@@Base+0x17c>  // b.any
    d588:	ldr	x0, [x19]
    d58c:	bl	16f0 <ferror@plt>
    d590:	cbz	w0, d52c <BZ2_bzWriteClose64@@Base+0x114>
    d594:	cbz	x20, d5a0 <BZ2_bzWriteClose64@@Base+0x188>
    d598:	mov	w0, #0xfffffffa            	// #-6
    d59c:	str	w0, [x20]
    d5a0:	mov	w0, #0xfffffffa            	// #-6
    d5a4:	str	w0, [x19, #5096]
    d5a8:	ldp	x21, x22, [sp, #32]
    d5ac:	ldp	x23, x24, [sp, #48]
    d5b0:	ldp	x25, x26, [sp, #64]
    d5b4:	ldp	x27, x28, [sp, #80]
    d5b8:	b	d47c <BZ2_bzWriteClose64@@Base+0x64>
    d5bc:	ldp	x27, x28, [sp, #80]
    d5c0:	ldr	x0, [x19]
    d5c4:	bl	16f0 <ferror@plt>
    d5c8:	cbz	w0, d62c <BZ2_bzWriteClose64@@Base+0x214>
    d5cc:	cbz	x22, d5d8 <BZ2_bzWriteClose64@@Base+0x1c0>
    d5d0:	ldr	w0, [x19, #5028]
    d5d4:	str	w0, [x22]
    d5d8:	cbz	x23, d5e4 <BZ2_bzWriteClose64@@Base+0x1cc>
    d5dc:	ldr	w0, [x19, #5032]
    d5e0:	str	w0, [x23]
    d5e4:	cbz	x24, d5f0 <BZ2_bzWriteClose64@@Base+0x1d8>
    d5e8:	ldr	w0, [x19, #5052]
    d5ec:	str	w0, [x24]
    d5f0:	cbz	x25, d5fc <BZ2_bzWriteClose64@@Base+0x1e4>
    d5f4:	ldr	w0, [x19, #5056]
    d5f8:	str	w0, [x25]
    d5fc:	cbz	x20, d604 <BZ2_bzWriteClose64@@Base+0x1ec>
    d600:	str	wzr, [x20]
    d604:	str	wzr, [x19, #5096]
    d608:	add	x0, x19, #0x1, lsl #12
    d60c:	add	x0, x0, #0x398
    d610:	bl	1560 <BZ2_bzCompressEnd@plt>
    d614:	mov	x0, x19
    d618:	bl	1610 <free@plt>
    d61c:	ldp	x21, x22, [sp, #32]
    d620:	ldp	x23, x24, [sp, #48]
    d624:	ldp	x25, x26, [sp, #64]
    d628:	b	d47c <BZ2_bzWriteClose64@@Base+0x64>
    d62c:	ldr	x0, [x19]
    d630:	bl	1690 <fflush@plt>
    d634:	ldr	x0, [x19]
    d638:	bl	16f0 <ferror@plt>
    d63c:	cbz	w0, d5cc <BZ2_bzWriteClose64@@Base+0x1b4>
    d640:	cbz	x20, d64c <BZ2_bzWriteClose64@@Base+0x234>
    d644:	mov	w0, #0xfffffffa            	// #-6
    d648:	str	w0, [x20]
    d64c:	mov	w0, #0xfffffffa            	// #-6
    d650:	str	w0, [x19, #5096]
    d654:	ldp	x21, x22, [sp, #32]
    d658:	ldp	x23, x24, [sp, #48]
    d65c:	ldp	x25, x26, [sp, #64]
    d660:	b	d47c <BZ2_bzWriteClose64@@Base+0x64>

000000000000d664 <BZ2_bzWriteClose@@Base>:
    d664:	stp	x29, x30, [sp, #-16]!
    d668:	mov	x29, sp
    d66c:	mov	x6, #0x0                   	// #0
    d670:	mov	x5, x4
    d674:	mov	x4, #0x0                   	// #0
    d678:	bl	1650 <BZ2_bzWriteClose64@plt>
    d67c:	ldp	x29, x30, [sp], #16
    d680:	ret

000000000000d684 <BZ2_bzReadOpen@@Base>:
    d684:	stp	x29, x30, [sp, #-80]!
    d688:	mov	x29, sp
    d68c:	stp	x19, x20, [sp, #16]
    d690:	stp	x21, x22, [sp, #32]
    d694:	stp	x23, x24, [sp, #48]
    d698:	str	x25, [sp, #64]
    d69c:	mov	x20, x0
    d6a0:	mov	x23, x1
    d6a4:	mov	w25, w2
    d6a8:	mov	w24, w3
    d6ac:	mov	x21, x4
    d6b0:	mov	w22, w5
    d6b4:	cbz	x0, d818 <BZ2_bzReadOpen@@Base+0x194>
    d6b8:	str	wzr, [x0]
    d6bc:	cmp	x1, #0x0
    d6c0:	ccmp	w3, #0x1, #0x2, ne  // ne = any
    d6c4:	b.hi	d7a0 <BZ2_bzReadOpen@@Base+0x11c>  // b.pmore
    d6c8:	cmp	w2, #0x4
    d6cc:	b.hi	d7a0 <BZ2_bzReadOpen@@Base+0x11c>  // b.pmore
    d6d0:	cmp	x21, #0x0
    d6d4:	ccmp	w22, #0x0, #0x4, eq  // eq = none
    d6d8:	b.ne	d798 <BZ2_bzReadOpen@@Base+0x114>  // b.any
    d6dc:	cmp	x21, #0x0
    d6e0:	mov	w0, #0x1388                	// #5000
    d6e4:	ccmp	w22, w0, #0x0, ne  // ne = any
    d6e8:	b.hi	d798 <BZ2_bzReadOpen@@Base+0x114>  // b.pmore
    d6ec:	mov	x0, x23
    d6f0:	bl	16f0 <ferror@plt>
    d6f4:	cbnz	w0, d7c8 <BZ2_bzReadOpen@@Base+0x144>
    d6f8:	mov	x0, #0x13f0                	// #5104
    d6fc:	bl	14e0 <malloc@plt>
    d700:	mov	x19, x0
    d704:	cbz	x0, d7e0 <BZ2_bzReadOpen@@Base+0x15c>
    d708:	cbz	x20, d710 <BZ2_bzReadOpen@@Base+0x8c>
    d70c:	str	wzr, [x20]
    d710:	str	wzr, [x19, #5096]
    d714:	add	x0, x19, #0x1, lsl #12
    d718:	strb	wzr, [x0, #1004]
    d71c:	str	x23, [x19]
    d720:	str	wzr, [x19, #5008]
    d724:	strb	wzr, [x0, #916]
    d728:	str	xzr, [x19, #5072]
    d72c:	str	xzr, [x19, #5080]
    d730:	str	xzr, [x19, #5088]
    d734:	cmp	w22, #0x0
    d738:	b.le	d760 <BZ2_bzReadOpen@@Base+0xdc>
    d73c:	sub	w3, w22, #0x1
    d740:	mov	x1, #0x0                   	// #0
    d744:	add	x2, x19, #0x8
    d748:	ldrb	w0, [x21, x1]
    d74c:	strb	w0, [x2, x1]
    d750:	cmp	x1, x3
    d754:	add	x1, x1, #0x1
    d758:	b.ne	d748 <BZ2_bzReadOpen@@Base+0xc4>  // b.any
    d75c:	str	w22, [x19, #5008]
    d760:	mov	w2, w24
    d764:	mov	w1, w25
    d768:	add	x0, x19, #0x1, lsl #12
    d76c:	add	x0, x0, #0x398
    d770:	bl	14f0 <BZ2_bzDecompressInit@plt>
    d774:	cbnz	w0, d7f0 <BZ2_bzReadOpen@@Base+0x16c>
    d778:	ldr	w0, [x19, #5008]
    d77c:	str	w0, [x19, #5024]
    d780:	add	x0, x19, #0x8
    d784:	str	x0, [x19, #5016]
    d788:	add	x0, x19, #0x1, lsl #12
    d78c:	mov	w1, #0x1                   	// #1
    d790:	strb	w1, [x0, #1004]
    d794:	b	d7ac <BZ2_bzReadOpen@@Base+0x128>
    d798:	mov	x19, x20
    d79c:	cbz	x20, d7ac <BZ2_bzReadOpen@@Base+0x128>
    d7a0:	mov	w0, #0xfffffffe            	// #-2
    d7a4:	str	w0, [x20]
    d7a8:	mov	x19, #0x0                   	// #0
    d7ac:	mov	x0, x19
    d7b0:	ldp	x19, x20, [sp, #16]
    d7b4:	ldp	x21, x22, [sp, #32]
    d7b8:	ldp	x23, x24, [sp, #48]
    d7bc:	ldr	x25, [sp, #64]
    d7c0:	ldp	x29, x30, [sp], #80
    d7c4:	ret
    d7c8:	mov	x19, x20
    d7cc:	cbz	x20, d7ac <BZ2_bzReadOpen@@Base+0x128>
    d7d0:	mov	w0, #0xfffffffa            	// #-6
    d7d4:	str	w0, [x20]
    d7d8:	mov	x19, #0x0                   	// #0
    d7dc:	b	d7ac <BZ2_bzReadOpen@@Base+0x128>
    d7e0:	cbz	x20, d808 <BZ2_bzReadOpen@@Base+0x184>
    d7e4:	mov	w0, #0xfffffffd            	// #-3
    d7e8:	str	w0, [x20]
    d7ec:	b	d7ac <BZ2_bzReadOpen@@Base+0x128>
    d7f0:	cbz	x20, d7f8 <BZ2_bzReadOpen@@Base+0x174>
    d7f4:	str	w0, [x20]
    d7f8:	mov	x0, x19
    d7fc:	bl	1610 <free@plt>
    d800:	mov	x19, #0x0                   	// #0
    d804:	b	d7ac <BZ2_bzReadOpen@@Base+0x128>
    d808:	mov	x19, x20
    d80c:	b	d7ac <BZ2_bzReadOpen@@Base+0x128>
    d810:	mov	x19, x20
    d814:	b	d7ac <BZ2_bzReadOpen@@Base+0x128>
    d818:	cmp	x1, #0x0
    d81c:	ccmp	w3, #0x1, #0x2, ne  // ne = any
    d820:	b.hi	d810 <BZ2_bzReadOpen@@Base+0x18c>  // b.pmore
    d824:	cmp	w2, #0x4
    d828:	b.ls	d6d0 <BZ2_bzReadOpen@@Base+0x4c>  // b.plast
    d82c:	mov	x19, x20
    d830:	b	d7ac <BZ2_bzReadOpen@@Base+0x128>
    d834:	mov	x12, #0x1400                	// #5120
    d838:	sub	sp, sp, x12
    d83c:	stp	x29, x30, [sp]
    d840:	mov	x29, sp
    d844:	stp	x19, x20, [sp, #16]
    d848:	stp	x23, x24, [sp, #48]
    d84c:	mov	x24, x0
    d850:	mov	x20, x2
    d854:	adrp	x0, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    d858:	ldrb	w0, [x0, #3400]
    d85c:	strb	w0, [sp, #96]
    d860:	stur	xzr, [sp, #97]
    d864:	strb	wzr, [sp, #105]
    d868:	cbz	x2, d988 <BZ2_bzReadOpen@@Base+0x304>
    d86c:	stp	x21, x22, [sp, #32]
    d870:	stp	x25, x26, [sp, #64]
    d874:	stp	x27, x28, [sp, #80]
    d878:	mov	w27, w1
    d87c:	mov	w25, w3
    d880:	ldrb	w19, [x2]
    d884:	cbz	w19, d9a4 <BZ2_bzReadOpen@@Base+0x320>
    d888:	mov	w26, #0x0                   	// #0
    d88c:	mov	w21, #0x0                   	// #0
    d890:	mov	w22, #0x9                   	// #9
    d894:	mov	w23, #0x1                   	// #1
    d898:	mov	w28, #0x0                   	// #0
    d89c:	b	d8b4 <BZ2_bzReadOpen@@Base+0x230>
    d8a0:	mov	w26, w23
    d8a4:	b	d8ac <BZ2_bzReadOpen@@Base+0x228>
    d8a8:	mov	w21, w23
    d8ac:	ldrb	w19, [x20, #1]!
    d8b0:	cbz	w19, d8f4 <BZ2_bzReadOpen@@Base+0x270>
    d8b4:	cmp	w19, #0x73
    d8b8:	b.eq	d8a0 <BZ2_bzReadOpen@@Base+0x21c>  // b.none
    d8bc:	cmp	w19, #0x77
    d8c0:	b.eq	d8a8 <BZ2_bzReadOpen@@Base+0x224>  // b.none
    d8c4:	cmp	w19, #0x72
    d8c8:	b.eq	d8ec <BZ2_bzReadOpen@@Base+0x268>  // b.none
    d8cc:	bl	15d0 <__ctype_b_loc@plt>
    d8d0:	and	x1, x19, #0xff
    d8d4:	ldr	x0, [x0]
    d8d8:	ldrh	w0, [x0, x1, lsl #1]
    d8dc:	sub	w19, w19, #0x30
    d8e0:	tst	x0, #0x800
    d8e4:	csel	w22, w19, w22, ne  // ne = any
    d8e8:	b	d8ac <BZ2_bzReadOpen@@Base+0x228>
    d8ec:	mov	w21, w28
    d8f0:	b	d8ac <BZ2_bzReadOpen@@Base+0x228>
    d8f4:	cmp	w21, #0x0
    d8f8:	mov	w20, #0x72                  	// #114
    d8fc:	mov	w0, #0x77                  	// #119
    d900:	csel	w20, w20, w0, eq  // eq = none
    d904:	add	x19, sp, #0x60
    d908:	mov	x0, x19
    d90c:	bl	1470 <strlen@plt>
    d910:	strh	w20, [x19, x0]
    d914:	mov	x0, x19
    d918:	bl	1470 <strlen@plt>
    d91c:	mov	w1, #0x62                  	// #98
    d920:	strh	w1, [x19, x0]
    d924:	cbnz	w25, da04 <BZ2_bzReadOpen@@Base+0x380>
    d928:	cbz	x24, d934 <BZ2_bzReadOpen@@Base+0x2b0>
    d92c:	ldrb	w0, [x24]
    d930:	cbnz	w0, d9f0 <BZ2_bzReadOpen@@Base+0x36c>
    d934:	cbz	w21, d9b8 <BZ2_bzReadOpen@@Base+0x334>
    d938:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    d93c:	ldr	x0, [x0, #4032]
    d940:	ldr	x19, [x0]
    d944:	cbz	x19, da60 <BZ2_bzReadOpen@@Base+0x3dc>
    d948:	cmp	w22, #0x9
    d94c:	mov	w2, #0x9                   	// #9
    d950:	csel	w2, w22, w2, le
    d954:	cmp	w2, #0x0
    d958:	mov	w4, #0x1e                  	// #30
    d95c:	mov	w3, #0x0                   	// #0
    d960:	csinc	w2, w2, wzr, gt
    d964:	mov	x1, x19
    d968:	add	x0, sp, #0x1, lsl #12
    d96c:	add	x0, x0, #0x3fc
    d970:	bl	1540 <BZ2_bzWriteOpen@plt>
    d974:	mov	x20, x0
    d978:	cbz	x20, da20 <BZ2_bzReadOpen@@Base+0x39c>
    d97c:	ldp	x21, x22, [sp, #32]
    d980:	ldp	x25, x26, [sp, #64]
    d984:	ldp	x27, x28, [sp, #80]
    d988:	mov	x0, x20
    d98c:	ldp	x19, x20, [sp, #16]
    d990:	ldp	x23, x24, [sp, #48]
    d994:	ldp	x29, x30, [sp]
    d998:	mov	x12, #0x1400                	// #5120
    d99c:	add	sp, sp, x12
    d9a0:	ret
    d9a4:	mov	w26, #0x0                   	// #0
    d9a8:	mov	w21, #0x0                   	// #0
    d9ac:	mov	w22, #0x9                   	// #9
    d9b0:	mov	w20, #0x72                  	// #114
    d9b4:	b	d904 <BZ2_bzReadOpen@@Base+0x280>
    d9b8:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    d9bc:	ldr	x0, [x0, #4040]
    d9c0:	ldr	x19, [x0]
    d9c4:	cbz	x19, da74 <BZ2_bzReadOpen@@Base+0x3f0>
    d9c8:	mov	w5, #0x0                   	// #0
    d9cc:	add	x4, sp, #0x70
    d9d0:	mov	w3, w26
    d9d4:	mov	w2, #0x0                   	// #0
    d9d8:	mov	x1, x19
    d9dc:	add	x0, sp, #0x1, lsl #12
    d9e0:	add	x0, x0, #0x3fc
    d9e4:	bl	16b0 <BZ2_bzReadOpen@plt>
    d9e8:	mov	x20, x0
    d9ec:	b	d978 <BZ2_bzReadOpen@@Base+0x2f4>
    d9f0:	add	x1, sp, #0x60
    d9f4:	mov	x0, x24
    d9f8:	bl	16a0 <fopen64@plt>
    d9fc:	mov	x19, x0
    da00:	b	da14 <BZ2_bzReadOpen@@Base+0x390>
    da04:	add	x1, sp, #0x60
    da08:	mov	w0, w27
    da0c:	bl	1530 <fdopen@plt>
    da10:	mov	x19, x0
    da14:	cbz	x19, da88 <BZ2_bzReadOpen@@Base+0x404>
    da18:	cbz	w21, d9c8 <BZ2_bzReadOpen@@Base+0x344>
    da1c:	b	d948 <BZ2_bzReadOpen@@Base+0x2c4>
    da20:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    da24:	ldr	x0, [x0, #4040]
    da28:	ldr	x0, [x0]
    da2c:	cmp	x0, x19
    da30:	b.eq	da9c <BZ2_bzReadOpen@@Base+0x418>  // b.none
    da34:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    da38:	ldr	x0, [x0, #4032]
    da3c:	ldr	x0, [x0]
    da40:	cmp	x0, x19
    da44:	b.eq	daac <BZ2_bzReadOpen@@Base+0x428>  // b.none
    da48:	mov	x0, x19
    da4c:	bl	14d0 <fclose@plt>
    da50:	ldp	x21, x22, [sp, #32]
    da54:	ldp	x25, x26, [sp, #64]
    da58:	ldp	x27, x28, [sp, #80]
    da5c:	b	d988 <BZ2_bzReadOpen@@Base+0x304>
    da60:	mov	x20, x19
    da64:	ldp	x21, x22, [sp, #32]
    da68:	ldp	x25, x26, [sp, #64]
    da6c:	ldp	x27, x28, [sp, #80]
    da70:	b	d988 <BZ2_bzReadOpen@@Base+0x304>
    da74:	mov	x20, x19
    da78:	ldp	x21, x22, [sp, #32]
    da7c:	ldp	x25, x26, [sp, #64]
    da80:	ldp	x27, x28, [sp, #80]
    da84:	b	d988 <BZ2_bzReadOpen@@Base+0x304>
    da88:	mov	x20, x19
    da8c:	ldp	x21, x22, [sp, #32]
    da90:	ldp	x25, x26, [sp, #64]
    da94:	ldp	x27, x28, [sp, #80]
    da98:	b	d988 <BZ2_bzReadOpen@@Base+0x304>
    da9c:	ldp	x21, x22, [sp, #32]
    daa0:	ldp	x25, x26, [sp, #64]
    daa4:	ldp	x27, x28, [sp, #80]
    daa8:	b	d988 <BZ2_bzReadOpen@@Base+0x304>
    daac:	ldp	x21, x22, [sp, #32]
    dab0:	ldp	x25, x26, [sp, #64]
    dab4:	ldp	x27, x28, [sp, #80]
    dab8:	b	d988 <BZ2_bzReadOpen@@Base+0x304>

000000000000dabc <BZ2_bzReadClose@@Base>:
    dabc:	stp	x29, x30, [sp, #-32]!
    dac0:	mov	x29, sp
    dac4:	str	x19, [sp, #16]
    dac8:	mov	x19, x1
    dacc:	cbz	x0, db38 <BZ2_bzReadClose@@Base+0x7c>
    dad0:	str	wzr, [x0]
    dad4:	cbz	x1, db08 <BZ2_bzReadClose@@Base+0x4c>
    dad8:	str	wzr, [x19, #5096]
    dadc:	add	x1, x19, #0x1, lsl #12
    dae0:	ldrb	w1, [x1, #916]
    dae4:	cbnz	w1, db10 <BZ2_bzReadClose@@Base+0x54>
    dae8:	add	x0, x19, #0x1, lsl #12
    daec:	ldrb	w0, [x0, #1004]
    daf0:	cbnz	w0, db28 <BZ2_bzReadClose@@Base+0x6c>
    daf4:	mov	x0, x19
    daf8:	bl	1610 <free@plt>
    dafc:	ldr	x19, [sp, #16]
    db00:	ldp	x29, x30, [sp], #32
    db04:	ret
    db08:	str	wzr, [x0]
    db0c:	b	dafc <BZ2_bzReadClose@@Base+0x40>
    db10:	cbz	x0, db1c <BZ2_bzReadClose@@Base+0x60>
    db14:	mov	w1, #0xffffffff            	// #-1
    db18:	str	w1, [x0]
    db1c:	mov	w0, #0xffffffff            	// #-1
    db20:	str	w0, [x19, #5096]
    db24:	b	dafc <BZ2_bzReadClose@@Base+0x40>
    db28:	add	x0, x19, #0x1, lsl #12
    db2c:	add	x0, x0, #0x398
    db30:	bl	1500 <BZ2_bzDecompressEnd@plt>
    db34:	b	daf4 <BZ2_bzReadClose@@Base+0x38>
    db38:	cbnz	x1, dad8 <BZ2_bzReadClose@@Base+0x1c>
    db3c:	b	dafc <BZ2_bzReadClose@@Base+0x40>

000000000000db40 <BZ2_bzRead@@Base>:
    db40:	stp	x29, x30, [sp, #-96]!
    db44:	mov	x29, sp
    db48:	stp	x19, x20, [sp, #16]
    db4c:	stp	x21, x22, [sp, #32]
    db50:	stp	x23, x24, [sp, #48]
    db54:	mov	x22, x0
    db58:	mov	x19, x1
    db5c:	mov	w23, w3
    db60:	cbz	x0, db68 <BZ2_bzRead@@Base+0x28>
    db64:	str	wzr, [x0]
    db68:	cbz	x19, dd70 <BZ2_bzRead@@Base+0x230>
    db6c:	str	wzr, [x19, #5096]
    db70:	cmp	x2, #0x0
    db74:	ccmp	w23, #0x0, #0x1, ne  // ne = any
    db78:	b.lt	dda8 <BZ2_bzRead@@Base+0x268>  // b.tstop
    db7c:	add	x0, x19, #0x1, lsl #12
    db80:	ldrb	w0, [x0, #916]
    db84:	cbnz	w0, dbb4 <BZ2_bzRead@@Base+0x74>
    db88:	cbz	w23, dbd0 <BZ2_bzRead@@Base+0x90>
    db8c:	stp	x25, x26, [sp, #64]
    db90:	str	x27, [sp, #80]
    db94:	str	w23, [x19, #5048]
    db98:	str	x2, [x19, #5040]
    db9c:	add	x25, x19, #0x8
    dba0:	mov	x27, #0x1388                	// #5000
    dba4:	mov	x26, #0x1                   	// #1
    dba8:	add	x24, x19, #0x1, lsl #12
    dbac:	add	x24, x24, #0x398
    dbb0:	b	dc50 <BZ2_bzRead@@Base+0x110>
    dbb4:	cbz	x22, dbc0 <BZ2_bzRead@@Base+0x80>
    dbb8:	mov	w0, #0xffffffff            	// #-1
    dbbc:	str	w0, [x22]
    dbc0:	mov	w0, #0xffffffff            	// #-1
    dbc4:	str	w0, [x19, #5096]
    dbc8:	mov	w21, #0x0                   	// #0
    dbcc:	b	dd90 <BZ2_bzRead@@Base+0x250>
    dbd0:	cbz	x22, dbd8 <BZ2_bzRead@@Base+0x98>
    dbd4:	str	wzr, [x22]
    dbd8:	str	wzr, [x19, #5096]
    dbdc:	mov	w21, w23
    dbe0:	b	dd90 <BZ2_bzRead@@Base+0x250>
    dbe4:	cbz	x22, dbf0 <BZ2_bzRead@@Base+0xb0>
    dbe8:	mov	w0, #0xfffffffa            	// #-6
    dbec:	str	w0, [x22]
    dbf0:	mov	w0, #0xfffffffa            	// #-6
    dbf4:	str	w0, [x19, #5096]
    dbf8:	mov	w21, #0x0                   	// #0
    dbfc:	ldp	x25, x26, [sp, #64]
    dc00:	ldr	x27, [sp, #80]
    dc04:	b	dd90 <BZ2_bzRead@@Base+0x250>
    dc08:	cbz	x22, dc14 <BZ2_bzRead@@Base+0xd4>
    dc0c:	mov	w0, #0xfffffffa            	// #-6
    dc10:	str	w0, [x22]
    dc14:	mov	w0, #0xfffffffa            	// #-6
    dc18:	str	w0, [x19, #5096]
    dc1c:	ldp	x25, x26, [sp, #64]
    dc20:	ldr	x27, [sp, #80]
    dc24:	b	dd90 <BZ2_bzRead@@Base+0x250>
    dc28:	mov	x0, x24
    dc2c:	bl	1630 <BZ2_bzDecompress@plt>
    dc30:	mov	w20, w0
    dc34:	tst	w0, #0xfffffffb
    dc38:	b.ne	dcb8 <BZ2_bzRead@@Base+0x178>  // b.any
    dc3c:	cbz	w0, dcd0 <BZ2_bzRead@@Base+0x190>
    dc40:	cmp	w0, #0x4
    dc44:	b.eq	dd14 <BZ2_bzRead@@Base+0x1d4>  // b.none
    dc48:	ldr	w0, [x19, #5048]
    dc4c:	cbz	w0, dd54 <BZ2_bzRead@@Base+0x214>
    dc50:	ldr	x0, [x19]
    dc54:	bl	16f0 <ferror@plt>
    dc58:	mov	w21, w0
    dc5c:	cbnz	w0, dbe4 <BZ2_bzRead@@Base+0xa4>
    dc60:	ldr	w0, [x19, #5024]
    dc64:	cbnz	w0, dc28 <BZ2_bzRead@@Base+0xe8>
    dc68:	ldr	x20, [x19]
    dc6c:	mov	x0, x20
    dc70:	bl	1520 <fgetc@plt>
    dc74:	cmn	w0, #0x1
    dc78:	b.eq	dc28 <BZ2_bzRead@@Base+0xe8>  // b.none
    dc7c:	mov	x1, x20
    dc80:	bl	1620 <ungetc@plt>
    dc84:	ldr	x3, [x19]
    dc88:	mov	x2, x27
    dc8c:	mov	x1, x26
    dc90:	mov	x0, x25
    dc94:	bl	15f0 <fread@plt>
    dc98:	mov	x20, x0
    dc9c:	ldr	x0, [x19]
    dca0:	bl	16f0 <ferror@plt>
    dca4:	cbnz	w0, dc08 <BZ2_bzRead@@Base+0xc8>
    dca8:	str	w20, [x19, #5008]
    dcac:	str	w20, [x19, #5024]
    dcb0:	str	x25, [x19, #5016]
    dcb4:	b	dc28 <BZ2_bzRead@@Base+0xe8>
    dcb8:	cbz	x22, dcc0 <BZ2_bzRead@@Base+0x180>
    dcbc:	str	w0, [x22]
    dcc0:	str	w20, [x19, #5096]
    dcc4:	ldp	x25, x26, [sp, #64]
    dcc8:	ldr	x27, [sp, #80]
    dccc:	b	dd90 <BZ2_bzRead@@Base+0x250>
    dcd0:	ldr	x21, [x19]
    dcd4:	mov	x0, x21
    dcd8:	bl	1520 <fgetc@plt>
    dcdc:	cmn	w0, #0x1
    dce0:	b.eq	dd44 <BZ2_bzRead@@Base+0x204>  // b.none
    dce4:	mov	x1, x21
    dce8:	bl	1620 <ungetc@plt>
    dcec:	b	dc48 <BZ2_bzRead@@Base+0x108>
    dcf0:	cbz	x22, dcfc <BZ2_bzRead@@Base+0x1bc>
    dcf4:	mov	w0, #0xfffffff9            	// #-7
    dcf8:	str	w0, [x22]
    dcfc:	mov	w0, #0xfffffff9            	// #-7
    dd00:	str	w0, [x19, #5096]
    dd04:	mov	w21, w20
    dd08:	ldp	x25, x26, [sp, #64]
    dd0c:	ldr	x27, [sp, #80]
    dd10:	b	dd90 <BZ2_bzRead@@Base+0x250>
    dd14:	cbz	x22, dd20 <BZ2_bzRead@@Base+0x1e0>
    dd18:	mov	w0, #0x4                   	// #4
    dd1c:	str	w0, [x22]
    dd20:	mov	w0, #0x4                   	// #4
    dd24:	str	w0, [x19, #5096]
    dd28:	ldr	w21, [x19, #5048]
    dd2c:	sub	w21, w23, w21
    dd30:	ldp	x25, x26, [sp, #64]
    dd34:	ldr	x27, [sp, #80]
    dd38:	b	dd90 <BZ2_bzRead@@Base+0x250>
    dd3c:	mov	w21, #0x0                   	// #0
    dd40:	b	dd90 <BZ2_bzRead@@Base+0x250>
    dd44:	ldr	w0, [x19, #5024]
    dd48:	cbnz	w0, dc48 <BZ2_bzRead@@Base+0x108>
    dd4c:	ldr	w0, [x19, #5048]
    dd50:	cbnz	w0, dcf0 <BZ2_bzRead@@Base+0x1b0>
    dd54:	cbz	x22, dd5c <BZ2_bzRead@@Base+0x21c>
    dd58:	str	wzr, [x22]
    dd5c:	str	wzr, [x19, #5096]
    dd60:	mov	w21, w23
    dd64:	ldp	x25, x26, [sp, #64]
    dd68:	ldr	x27, [sp, #80]
    dd6c:	b	dd90 <BZ2_bzRead@@Base+0x250>
    dd70:	mov	w21, #0x0                   	// #0
    dd74:	cbz	x22, dd90 <BZ2_bzRead@@Base+0x250>
    dd78:	mov	w0, #0xfffffffe            	// #-2
    dd7c:	str	w0, [x22]
    dd80:	cbz	x19, dd3c <BZ2_bzRead@@Base+0x1fc>
    dd84:	mov	w0, #0xfffffffe            	// #-2
    dd88:	str	w0, [x19, #5096]
    dd8c:	mov	w21, #0x0                   	// #0
    dd90:	mov	w0, w21
    dd94:	ldp	x19, x20, [sp, #16]
    dd98:	ldp	x21, x22, [sp, #32]
    dd9c:	ldp	x23, x24, [sp, #48]
    dda0:	ldp	x29, x30, [sp], #96
    dda4:	ret
    dda8:	cbnz	x22, dd78 <BZ2_bzRead@@Base+0x238>
    ddac:	b	dd84 <BZ2_bzRead@@Base+0x244>

000000000000ddb0 <BZ2_bzReadGetUnused@@Base>:
    ddb0:	cbz	x1, ddd8 <BZ2_bzReadGetUnused@@Base+0x28>
    ddb4:	ldr	w4, [x1, #5096]
    ddb8:	cmp	w4, #0x4
    ddbc:	b.eq	dde8 <BZ2_bzReadGetUnused@@Base+0x38>  // b.none
    ddc0:	cbz	x0, ddcc <BZ2_bzReadGetUnused@@Base+0x1c>
    ddc4:	mov	w2, #0xffffffff            	// #-1
    ddc8:	str	w2, [x0]
    ddcc:	mov	w0, #0xffffffff            	// #-1
    ddd0:	str	w0, [x1, #5096]
    ddd4:	ret
    ddd8:	cbz	x0, ddd4 <BZ2_bzReadGetUnused@@Base+0x24>
    dddc:	mov	w1, #0xfffffffe            	// #-2
    dde0:	str	w1, [x0]
    dde4:	b	ddd4 <BZ2_bzReadGetUnused@@Base+0x24>
    dde8:	cmp	x2, #0x0
    ddec:	ccmp	x3, #0x0, #0x4, ne  // ne = any
    ddf0:	b.eq	de14 <BZ2_bzReadGetUnused@@Base+0x64>  // b.none
    ddf4:	cbz	x0, ddfc <BZ2_bzReadGetUnused@@Base+0x4c>
    ddf8:	str	wzr, [x0]
    ddfc:	str	wzr, [x1, #5096]
    de00:	ldr	w0, [x1, #5024]
    de04:	str	w0, [x3]
    de08:	ldr	x0, [x1, #5016]
    de0c:	str	x0, [x2]
    de10:	b	ddd4 <BZ2_bzReadGetUnused@@Base+0x24>
    de14:	cbz	x0, de20 <BZ2_bzReadGetUnused@@Base+0x70>
    de18:	mov	w2, #0xfffffffe            	// #-2
    de1c:	str	w2, [x0]
    de20:	mov	w0, #0xfffffffe            	// #-2
    de24:	str	w0, [x1, #5096]
    de28:	b	ddd4 <BZ2_bzReadGetUnused@@Base+0x24>

000000000000de2c <BZ2_bzBuffToBuffCompress@@Base>:
    de2c:	stp	x29, x30, [sp, #-144]!
    de30:	mov	x29, sp
    de34:	stp	x19, x20, [sp, #16]
    de38:	mov	x20, x1
    de3c:	cmp	x0, #0x0
    de40:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    de44:	b.eq	df48 <BZ2_bzBuffToBuffCompress@@Base+0x11c>  // b.none
    de48:	stp	x21, x22, [sp, #32]
    de4c:	str	x23, [sp, #48]
    de50:	mov	x21, x0
    de54:	mov	x22, x2
    de58:	mov	w23, w3
    de5c:	mov	w1, w4
    de60:	mov	w2, w5
    de64:	sub	w0, w4, #0x1
    de68:	cmp	x22, #0x0
    de6c:	ccmp	w0, #0x8, #0x2, ne  // ne = any
    de70:	b.hi	df50 <BZ2_bzBuffToBuffCompress@@Base+0x124>  // b.pmore
    de74:	cmp	w6, #0xfa
    de78:	ccmp	w5, #0x4, #0x2, ls  // ls = plast
    de7c:	b.hi	df60 <BZ2_bzBuffToBuffCompress@@Base+0x134>  // b.pmore
    de80:	cmp	w6, #0x0
    de84:	str	xzr, [sp, #120]
    de88:	str	xzr, [sp, #128]
    de8c:	str	xzr, [sp, #136]
    de90:	mov	w3, #0x1e                  	// #30
    de94:	csel	w3, w6, w3, ne  // ne = any
    de98:	add	x0, sp, #0x40
    de9c:	bl	1550 <BZ2_bzCompressInit@plt>
    dea0:	mov	w19, w0
    dea4:	cbz	w0, dec0 <BZ2_bzBuffToBuffCompress@@Base+0x94>
    dea8:	ldp	x21, x22, [sp, #32]
    deac:	ldr	x23, [sp, #48]
    deb0:	mov	w0, w19
    deb4:	ldp	x19, x20, [sp, #16]
    deb8:	ldp	x29, x30, [sp], #144
    debc:	ret
    dec0:	str	x22, [sp, #64]
    dec4:	str	x21, [sp, #88]
    dec8:	str	w23, [sp, #72]
    decc:	ldr	w0, [x20]
    ded0:	str	w0, [sp, #96]
    ded4:	mov	w1, #0x2                   	// #2
    ded8:	add	x0, sp, #0x40
    dedc:	bl	15b0 <BZ2_bzCompress@plt>
    dee0:	mov	w21, w0
    dee4:	cmp	w0, #0x3
    dee8:	b.eq	df0c <BZ2_bzBuffToBuffCompress@@Base+0xe0>  // b.none
    deec:	cmp	w0, #0x4
    def0:	b.eq	df24 <BZ2_bzBuffToBuffCompress@@Base+0xf8>  // b.none
    def4:	add	x0, sp, #0x40
    def8:	bl	1560 <BZ2_bzCompressEnd@plt>
    defc:	mov	w19, w21
    df00:	ldp	x21, x22, [sp, #32]
    df04:	ldr	x23, [sp, #48]
    df08:	b	deb0 <BZ2_bzBuffToBuffCompress@@Base+0x84>
    df0c:	add	x0, sp, #0x40
    df10:	bl	1560 <BZ2_bzCompressEnd@plt>
    df14:	mov	w19, #0xfffffff8            	// #-8
    df18:	ldp	x21, x22, [sp, #32]
    df1c:	ldr	x23, [sp, #48]
    df20:	b	deb0 <BZ2_bzBuffToBuffCompress@@Base+0x84>
    df24:	ldr	w0, [x20]
    df28:	ldr	w1, [sp, #96]
    df2c:	sub	w0, w0, w1
    df30:	str	w0, [x20]
    df34:	add	x0, sp, #0x40
    df38:	bl	1560 <BZ2_bzCompressEnd@plt>
    df3c:	ldp	x21, x22, [sp, #32]
    df40:	ldr	x23, [sp, #48]
    df44:	b	deb0 <BZ2_bzBuffToBuffCompress@@Base+0x84>
    df48:	mov	w19, #0xfffffffe            	// #-2
    df4c:	b	deb0 <BZ2_bzBuffToBuffCompress@@Base+0x84>
    df50:	mov	w19, #0xfffffffe            	// #-2
    df54:	ldp	x21, x22, [sp, #32]
    df58:	ldr	x23, [sp, #48]
    df5c:	b	deb0 <BZ2_bzBuffToBuffCompress@@Base+0x84>
    df60:	mov	w19, #0xfffffffe            	// #-2
    df64:	ldp	x21, x22, [sp, #32]
    df68:	ldr	x23, [sp, #48]
    df6c:	b	deb0 <BZ2_bzBuffToBuffCompress@@Base+0x84>

000000000000df70 <BZ2_bzBuffToBuffDecompress@@Base>:
    df70:	stp	x29, x30, [sp, #-144]!
    df74:	mov	x29, sp
    df78:	stp	x19, x20, [sp, #16]
    df7c:	mov	x20, x1
    df80:	cmp	x0, #0x0
    df84:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    df88:	b.eq	e090 <BZ2_bzBuffToBuffDecompress@@Base+0x120>  // b.none
    df8c:	stp	x21, x22, [sp, #32]
    df90:	str	x23, [sp, #48]
    df94:	mov	x21, x0
    df98:	mov	x22, x2
    df9c:	mov	w23, w3
    dfa0:	mov	w2, w4
    dfa4:	mov	w1, w5
    dfa8:	cmp	x22, #0x0
    dfac:	ccmp	w4, #0x1, #0x2, ne  // ne = any
    dfb0:	b.hi	e098 <BZ2_bzBuffToBuffDecompress@@Base+0x128>  // b.pmore
    dfb4:	cmp	w5, #0x4
    dfb8:	b.hi	e0a8 <BZ2_bzBuffToBuffDecompress@@Base+0x138>  // b.pmore
    dfbc:	str	xzr, [sp, #120]
    dfc0:	str	xzr, [sp, #128]
    dfc4:	str	xzr, [sp, #136]
    dfc8:	add	x0, sp, #0x40
    dfcc:	bl	14f0 <BZ2_bzDecompressInit@plt>
    dfd0:	mov	w19, w0
    dfd4:	cbz	w0, dff0 <BZ2_bzBuffToBuffDecompress@@Base+0x80>
    dfd8:	ldp	x21, x22, [sp, #32]
    dfdc:	ldr	x23, [sp, #48]
    dfe0:	mov	w0, w19
    dfe4:	ldp	x19, x20, [sp, #16]
    dfe8:	ldp	x29, x30, [sp], #144
    dfec:	ret
    dff0:	str	x22, [sp, #64]
    dff4:	str	x21, [sp, #88]
    dff8:	str	w23, [sp, #72]
    dffc:	ldr	w0, [x20]
    e000:	str	w0, [sp, #96]
    e004:	add	x0, sp, #0x40
    e008:	bl	1630 <BZ2_bzDecompress@plt>
    e00c:	mov	w21, w0
    e010:	cbz	w0, e034 <BZ2_bzBuffToBuffDecompress@@Base+0xc4>
    e014:	cmp	w0, #0x4
    e018:	b.eq	e054 <BZ2_bzBuffToBuffDecompress@@Base+0xe4>  // b.none
    e01c:	add	x0, sp, #0x40
    e020:	bl	1500 <BZ2_bzDecompressEnd@plt>
    e024:	mov	w19, w21
    e028:	ldp	x21, x22, [sp, #32]
    e02c:	ldr	x23, [sp, #48]
    e030:	b	dfe0 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    e034:	ldr	w0, [sp, #96]
    e038:	cbnz	w0, e078 <BZ2_bzBuffToBuffDecompress@@Base+0x108>
    e03c:	add	x0, sp, #0x40
    e040:	bl	1500 <BZ2_bzDecompressEnd@plt>
    e044:	mov	w19, #0xfffffff8            	// #-8
    e048:	ldp	x21, x22, [sp, #32]
    e04c:	ldr	x23, [sp, #48]
    e050:	b	dfe0 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    e054:	ldr	w0, [x20]
    e058:	ldr	w1, [sp, #96]
    e05c:	sub	w0, w0, w1
    e060:	str	w0, [x20]
    e064:	add	x0, sp, #0x40
    e068:	bl	1500 <BZ2_bzDecompressEnd@plt>
    e06c:	ldp	x21, x22, [sp, #32]
    e070:	ldr	x23, [sp, #48]
    e074:	b	dfe0 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    e078:	add	x0, sp, #0x40
    e07c:	bl	1500 <BZ2_bzDecompressEnd@plt>
    e080:	mov	w19, #0xfffffff9            	// #-7
    e084:	ldp	x21, x22, [sp, #32]
    e088:	ldr	x23, [sp, #48]
    e08c:	b	dfe0 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    e090:	mov	w19, #0xfffffffe            	// #-2
    e094:	b	dfe0 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    e098:	mov	w19, #0xfffffffe            	// #-2
    e09c:	ldp	x21, x22, [sp, #32]
    e0a0:	ldr	x23, [sp, #48]
    e0a4:	b	dfe0 <BZ2_bzBuffToBuffDecompress@@Base+0x70>
    e0a8:	mov	w19, #0xfffffffe            	// #-2
    e0ac:	ldp	x21, x22, [sp, #32]
    e0b0:	ldr	x23, [sp, #48]
    e0b4:	b	dfe0 <BZ2_bzBuffToBuffDecompress@@Base+0x70>

000000000000e0b8 <BZ2_bzlibVersion@@Base>:
    e0b8:	adrp	x0, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    e0bc:	add	x0, x0, #0x6c0
    e0c0:	ret

000000000000e0c4 <BZ2_bz__AssertH__fail@@Base>:
    e0c4:	stp	x29, x30, [sp, #-32]!
    e0c8:	mov	x29, sp
    e0cc:	stp	x19, x20, [sp, #16]
    e0d0:	mov	w19, w0
    e0d4:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    e0d8:	ldr	x0, [x0, #4016]
    e0dc:	ldr	x20, [x0]
    e0e0:	bl	14b0 <BZ2_bzlibVersion@plt>
    e0e4:	mov	x3, x0
    e0e8:	mov	w2, w19
    e0ec:	adrp	x1, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    e0f0:	add	x1, x1, #0x6d8
    e0f4:	mov	x0, x20
    e0f8:	bl	16e0 <fprintf@plt>
    e0fc:	cmp	w19, #0x3ef
    e100:	b.eq	e10c <BZ2_bz__AssertH__fail@@Base+0x48>  // b.none
    e104:	mov	w0, #0x3                   	// #3
    e108:	bl	1490 <exit@plt>
    e10c:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    e110:	ldr	x0, [x0, #4016]
    e114:	ldr	x3, [x0]
    e118:	mov	x2, #0x420                 	// #1056
    e11c:	mov	x1, #0x1                   	// #1
    e120:	adrp	x0, e000 <BZ2_bzBuffToBuffDecompress@@Base+0x90>
    e124:	add	x0, x0, #0x878
    e128:	bl	1680 <fwrite@plt>
    e12c:	b	e104 <BZ2_bz__AssertH__fail@@Base+0x40>

000000000000e130 <BZ2_bzopen@@Base>:
    e130:	stp	x29, x30, [sp, #-16]!
    e134:	mov	x29, sp
    e138:	mov	w3, #0x0                   	// #0
    e13c:	mov	x2, x1
    e140:	mov	w1, #0xffffffff            	// #-1
    e144:	bl	d834 <BZ2_bzReadOpen@@Base+0x1b0>
    e148:	ldp	x29, x30, [sp], #16
    e14c:	ret

000000000000e150 <BZ2_bzdopen@@Base>:
    e150:	stp	x29, x30, [sp, #-16]!
    e154:	mov	x29, sp
    e158:	mov	w3, #0x1                   	// #1
    e15c:	mov	x2, x1
    e160:	mov	w1, w0
    e164:	mov	x0, #0x0                   	// #0
    e168:	bl	d834 <BZ2_bzReadOpen@@Base+0x1b0>
    e16c:	ldp	x29, x30, [sp], #16
    e170:	ret

000000000000e174 <BZ2_bzread@@Base>:
    e174:	mov	w3, w2
    e178:	ldr	w2, [x0, #5096]
    e17c:	cmp	w2, #0x4
    e180:	b.eq	e1b0 <BZ2_bzread@@Base+0x3c>  // b.none
    e184:	stp	x29, x30, [sp, #-32]!
    e188:	mov	x29, sp
    e18c:	mov	x2, x1
    e190:	mov	x1, x0
    e194:	add	x0, sp, #0x1c
    e198:	bl	16c0 <BZ2_bzRead@plt>
    e19c:	ldr	w1, [sp, #28]
    e1a0:	tst	w1, #0xfffffffb
    e1a4:	csinv	w0, w0, wzr, eq  // eq = none
    e1a8:	ldp	x29, x30, [sp], #32
    e1ac:	ret
    e1b0:	mov	w0, #0x0                   	// #0
    e1b4:	ret

000000000000e1b8 <BZ2_bzwrite@@Base>:
    e1b8:	stp	x29, x30, [sp, #-48]!
    e1bc:	mov	x29, sp
    e1c0:	str	x19, [sp, #16]
    e1c4:	mov	w19, w2
    e1c8:	mov	w3, w2
    e1cc:	mov	x2, x1
    e1d0:	mov	x1, x0
    e1d4:	add	x0, sp, #0x2c
    e1d8:	bl	15c0 <BZ2_bzWrite@plt>
    e1dc:	ldr	w0, [sp, #44]
    e1e0:	cmp	w0, #0x0
    e1e4:	csinv	w0, w19, wzr, eq  // eq = none
    e1e8:	ldr	x19, [sp, #16]
    e1ec:	ldp	x29, x30, [sp], #48
    e1f0:	ret

000000000000e1f4 <BZ2_bzflush@@Base>:
    e1f4:	mov	w0, #0x0                   	// #0
    e1f8:	ret

000000000000e1fc <BZ2_bzclose@@Base>:
    e1fc:	cbz	x0, e2a4 <BZ2_bzclose@@Base+0xa8>
    e200:	stp	x29, x30, [sp, #-48]!
    e204:	mov	x29, sp
    e208:	stp	x19, x20, [sp, #16]
    e20c:	mov	x19, x0
    e210:	ldr	x20, [x0]
    e214:	add	x0, x0, #0x1, lsl #12
    e218:	ldrb	w0, [x0, #916]
    e21c:	cbz	w0, e25c <BZ2_bzclose@@Base+0x60>
    e220:	mov	x4, #0x0                   	// #0
    e224:	mov	x3, #0x0                   	// #0
    e228:	mov	w2, #0x0                   	// #0
    e22c:	mov	x1, x19
    e230:	add	x0, sp, #0x2c
    e234:	bl	15a0 <BZ2_bzWriteClose@plt>
    e238:	ldr	w0, [sp, #44]
    e23c:	cbz	w0, e268 <BZ2_bzclose@@Base+0x6c>
    e240:	mov	x4, #0x0                   	// #0
    e244:	mov	x3, #0x0                   	// #0
    e248:	mov	w2, #0x1                   	// #1
    e24c:	mov	x1, x19
    e250:	mov	x0, #0x0                   	// #0
    e254:	bl	15a0 <BZ2_bzWriteClose@plt>
    e258:	b	e268 <BZ2_bzclose@@Base+0x6c>
    e25c:	mov	x1, x19
    e260:	add	x0, sp, #0x2c
    e264:	bl	1510 <BZ2_bzReadClose@plt>
    e268:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    e26c:	ldr	x0, [x0, #4040]
    e270:	ldr	x0, [x0]
    e274:	cmp	x0, x20
    e278:	b.eq	e298 <BZ2_bzclose@@Base+0x9c>  // b.none
    e27c:	adrp	x0, 1f000 <BZ2_bzerror@@Base+0x10d58>
    e280:	ldr	x0, [x0, #4032]
    e284:	ldr	x0, [x0]
    e288:	cmp	x0, x20
    e28c:	b.eq	e298 <BZ2_bzclose@@Base+0x9c>  // b.none
    e290:	mov	x0, x20
    e294:	bl	14d0 <fclose@plt>
    e298:	ldp	x19, x20, [sp, #16]
    e29c:	ldp	x29, x30, [sp], #48
    e2a0:	ret
    e2a4:	ret

000000000000e2a8 <BZ2_bzerror@@Base>:
    e2a8:	ldr	w0, [x0, #5096]
    e2ac:	cmp	w0, #0x0
    e2b0:	csel	w0, w0, wzr, le
    e2b4:	str	w0, [x1]
    e2b8:	neg	w0, w0
    e2bc:	adrp	x1, 1f000 <BZ2_bzerror@@Base+0x10d58>
    e2c0:	add	x1, x1, #0xd38
    e2c4:	ldr	x0, [x1, w0, sxtw #3]
    e2c8:	ret

Disassembly of section .fini:

000000000000e2cc <.fini>:
    e2cc:	stp	x29, x30, [sp, #-16]!
    e2d0:	mov	x29, sp
    e2d4:	ldp	x29, x30, [sp], #16
    e2d8:	ret
