
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//systemd-cgroups-agent_gcc_-O0:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000400898 <_init>:
  400898:	stp	x29, x30, [sp, #-16]!
  40089c:	mov	x29, sp
  4008a0:	bl	400a00 <call_weak_fn>
  4008a4:	ldp	x29, x30, [sp], #16
  4008a8:	ret

Disassembly of section .plt:

00000000004008b0 <.plt>:
  4008b0:	stp	x16, x30, [sp, #-16]!
  4008b4:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  4008b8:	ldr	x17, [x16, #3960]
  4008bc:	add	x16, x16, #0xf78
  4008c0:	br	x17
  4008c4:	nop
  4008c8:	nop
  4008cc:	nop

00000000004008d0 <sendto@plt>:
  4008d0:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  4008d4:	ldr	x17, [x16, #3968]
  4008d8:	add	x16, x16, #0xf80
  4008dc:	br	x17

00000000004008e0 <__libc_start_main@plt>:
  4008e0:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  4008e4:	ldr	x17, [x16, #3976]
  4008e8:	add	x16, x16, #0xf88
  4008ec:	br	x17

00000000004008f0 <__gmon_start__@plt>:
  4008f0:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  4008f4:	ldr	x17, [x16, #3984]
  4008f8:	add	x16, x16, #0xf90
  4008fc:	br	x17

0000000000400900 <strnlen@plt>:
  400900:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  400904:	ldr	x17, [x16, #3992]
  400908:	add	x16, x16, #0xf98
  40090c:	br	x17

0000000000400910 <socket@plt>:
  400910:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  400914:	ldr	x17, [x16, #4000]
  400918:	add	x16, x16, #0xfa0
  40091c:	br	x17

0000000000400920 <log_setup_service@plt>:
  400920:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  400924:	ldr	x17, [x16, #4008]
  400928:	add	x16, x16, #0xfa8
  40092c:	br	x17

0000000000400930 <safe_close@plt>:
  400930:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  400934:	ldr	x17, [x16, #4016]
  400938:	add	x16, x16, #0xfb0
  40093c:	br	x17

0000000000400940 <log_assert_failed_realm@plt>:
  400940:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  400944:	ldr	x17, [x16, #4024]
  400948:	add	x16, x16, #0xfb8
  40094c:	br	x17

0000000000400950 <abort@plt>:
  400950:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  400954:	ldr	x17, [x16, #4032]
  400958:	add	x16, x16, #0xfc0
  40095c:	br	x17

0000000000400960 <__errno_location@plt>:
  400960:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  400964:	ldr	x17, [x16, #4040]
  400968:	add	x16, x16, #0xfc8
  40096c:	br	x17

0000000000400970 <__stack_chk_fail@plt>:
  400970:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  400974:	ldr	x17, [x16, #4048]
  400978:	add	x16, x16, #0xfd0
  40097c:	br	x17

0000000000400980 <log_internal_realm@plt>:
  400980:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  400984:	ldr	x17, [x16, #4056]
  400988:	add	x16, x16, #0xfd8
  40098c:	br	x17

0000000000400990 <strlen@plt>:
  400990:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  400994:	ldr	x17, [x16, #4064]
  400998:	add	x16, x16, #0xfe0
  40099c:	br	x17

00000000004009a0 <log_get_max_level_realm@plt>:
  4009a0:	adrp	x16, 411000 <__FRAME_END__+0xfd30>
  4009a4:	ldr	x17, [x16, #4072]
  4009a8:	add	x16, x16, #0xfe8
  4009ac:	br	x17

Disassembly of section .text:

00000000004009b0 <_start>:
  4009b0:	mov	x29, #0x0                   	// #0
  4009b4:	mov	x30, #0x0                   	// #0
  4009b8:	mov	x5, x0
  4009bc:	ldr	x1, [sp]
  4009c0:	add	x2, sp, #0x8
  4009c4:	mov	x6, sp
  4009c8:	movz	x0, #0x0, lsl #48
  4009cc:	movk	x0, #0x0, lsl #32
  4009d0:	movk	x0, #0x40, lsl #16
  4009d4:	movk	x0, #0xb9c
  4009d8:	movz	x3, #0x0, lsl #48
  4009dc:	movk	x3, #0x0, lsl #32
  4009e0:	movk	x3, #0x40, lsl #16
  4009e4:	movk	x3, #0xf48
  4009e8:	movz	x4, #0x0, lsl #48
  4009ec:	movk	x4, #0x0, lsl #32
  4009f0:	movk	x4, #0x40, lsl #16
  4009f4:	movk	x4, #0xfc8
  4009f8:	bl	4008e0 <__libc_start_main@plt>
  4009fc:	bl	400950 <abort@plt>

0000000000400a00 <call_weak_fn>:
  400a00:	adrp	x0, 411000 <__FRAME_END__+0xfd30>
  400a04:	ldr	x0, [x0, #4088]
  400a08:	cbz	x0, 400a10 <call_weak_fn+0x10>
  400a0c:	b	4008f0 <__gmon_start__@plt>
  400a10:	ret

0000000000400a14 <deregister_tm_clones>:
  400a14:	stp	x29, x30, [sp, #-32]!
  400a18:	mov	x29, sp
  400a1c:	adrp	x0, 412000 <__TMC_END__>
  400a20:	add	x0, x0, #0x0
  400a24:	str	x0, [sp, #24]
  400a28:	ldr	x0, [sp, #24]
  400a2c:	str	x0, [sp, #24]
  400a30:	ldr	x1, [sp, #24]
  400a34:	adrp	x0, 412000 <__TMC_END__>
  400a38:	add	x0, x0, #0x0
  400a3c:	cmp	x1, x0
  400a40:	b.eq	400a7c <deregister_tm_clones+0x68>  // b.none
  400a44:	adrp	x0, 400000 <_init-0x898>
  400a48:	add	x0, x0, #0xfe0
  400a4c:	ldr	x0, [x0]
  400a50:	str	x0, [sp, #16]
  400a54:	ldr	x0, [sp, #16]
  400a58:	str	x0, [sp, #16]
  400a5c:	ldr	x0, [sp, #16]
  400a60:	cmp	x0, #0x0
  400a64:	b.eq	400a80 <deregister_tm_clones+0x6c>  // b.none
  400a68:	ldr	x1, [sp, #16]
  400a6c:	adrp	x0, 412000 <__TMC_END__>
  400a70:	add	x0, x0, #0x0
  400a74:	blr	x1
  400a78:	b	400a80 <deregister_tm_clones+0x6c>
  400a7c:	nop
  400a80:	ldp	x29, x30, [sp], #32
  400a84:	ret

0000000000400a88 <register_tm_clones>:
  400a88:	stp	x29, x30, [sp, #-48]!
  400a8c:	mov	x29, sp
  400a90:	adrp	x0, 412000 <__TMC_END__>
  400a94:	add	x0, x0, #0x0
  400a98:	str	x0, [sp, #40]
  400a9c:	ldr	x0, [sp, #40]
  400aa0:	str	x0, [sp, #40]
  400aa4:	ldr	x1, [sp, #40]
  400aa8:	adrp	x0, 412000 <__TMC_END__>
  400aac:	add	x0, x0, #0x0
  400ab0:	sub	x0, x1, x0
  400ab4:	asr	x0, x0, #3
  400ab8:	lsr	x1, x0, #63
  400abc:	add	x0, x1, x0
  400ac0:	asr	x0, x0, #1
  400ac4:	str	x0, [sp, #32]
  400ac8:	ldr	x0, [sp, #32]
  400acc:	cmp	x0, #0x0
  400ad0:	b.eq	400b10 <register_tm_clones+0x88>  // b.none
  400ad4:	adrp	x0, 400000 <_init-0x898>
  400ad8:	add	x0, x0, #0xfe8
  400adc:	ldr	x0, [x0]
  400ae0:	str	x0, [sp, #24]
  400ae4:	ldr	x0, [sp, #24]
  400ae8:	str	x0, [sp, #24]
  400aec:	ldr	x0, [sp, #24]
  400af0:	cmp	x0, #0x0
  400af4:	b.eq	400b14 <register_tm_clones+0x8c>  // b.none
  400af8:	ldr	x2, [sp, #24]
  400afc:	ldr	x1, [sp, #32]
  400b00:	adrp	x0, 412000 <__TMC_END__>
  400b04:	add	x0, x0, #0x0
  400b08:	blr	x2
  400b0c:	b	400b14 <register_tm_clones+0x8c>
  400b10:	nop
  400b14:	ldp	x29, x30, [sp], #48
  400b18:	ret

0000000000400b1c <__do_global_dtors_aux>:
  400b1c:	stp	x29, x30, [sp, #-16]!
  400b20:	mov	x29, sp
  400b24:	adrp	x0, 412000 <__TMC_END__>
  400b28:	add	x0, x0, #0x0
  400b2c:	ldrb	w0, [x0]
  400b30:	and	x0, x0, #0xff
  400b34:	cmp	x0, #0x0
  400b38:	b.ne	400b54 <__do_global_dtors_aux+0x38>  // b.any
  400b3c:	bl	400a14 <deregister_tm_clones>
  400b40:	adrp	x0, 412000 <__TMC_END__>
  400b44:	add	x0, x0, #0x0
  400b48:	mov	w1, #0x1                   	// #1
  400b4c:	strb	w1, [x0]
  400b50:	b	400b58 <__do_global_dtors_aux+0x3c>
  400b54:	nop
  400b58:	ldp	x29, x30, [sp], #16
  400b5c:	ret

0000000000400b60 <frame_dummy>:
  400b60:	stp	x29, x30, [sp, #-16]!
  400b64:	mov	x29, sp
  400b68:	bl	400a88 <register_tm_clones>
  400b6c:	nop
  400b70:	ldp	x29, x30, [sp], #16
  400b74:	ret

0000000000400b78 <closep>:
  400b78:	stp	x29, x30, [sp, #-32]!
  400b7c:	mov	x29, sp
  400b80:	str	x0, [sp, #24]
  400b84:	ldr	x0, [sp, #24]
  400b88:	ldr	w0, [x0]
  400b8c:	bl	400930 <safe_close@plt>
  400b90:	nop
  400b94:	ldp	x29, x30, [sp], #32
  400b98:	ret

0000000000400b9c <main>:
  400b9c:	stp	x29, x30, [sp, #-160]!
  400ba0:	mov	x29, sp
  400ba4:	stp	x19, x20, [sp, #16]
  400ba8:	str	x21, [sp, #32]
  400bac:	str	w0, [sp, #60]
  400bb0:	str	x1, [sp, #48]
  400bb4:	adrp	x0, 411000 <__FRAME_END__+0xfd30>
  400bb8:	add	x0, x0, #0xd30
  400bbc:	ldr	x1, [x0]
  400bc0:	str	x1, [sp, #152]
  400bc4:	mov	x1, #0x0                   	// #0
  400bc8:	mov	w0, #0xffffffff            	// #-1
  400bcc:	str	w0, [sp, #76]
  400bd0:	ldr	w0, [sp, #60]
  400bd4:	cmp	w0, #0x2
  400bd8:	b.eq	400c58 <main+0xbc>  // b.none
  400bdc:	mov	w0, #0x3                   	// #3
  400be0:	str	w0, [sp, #116]
  400be4:	str	wzr, [sp, #120]
  400be8:	str	wzr, [sp, #124]
  400bec:	ldr	w0, [sp, #124]
  400bf0:	bl	4009a0 <log_get_max_level_realm@plt>
  400bf4:	mov	w1, w0
  400bf8:	ldr	w0, [sp, #116]
  400bfc:	and	w0, w0, #0x7
  400c00:	cmp	w1, w0
  400c04:	b.lt	400c48 <main+0xac>  // b.tstop
  400c08:	ldr	w0, [sp, #124]
  400c0c:	lsl	w1, w0, #10
  400c10:	ldr	w0, [sp, #116]
  400c14:	orr	w6, w1, w0
  400c18:	adrp	x0, 400000 <_init-0x898>
  400c1c:	add	x1, x0, #0xff3
  400c20:	adrp	x0, 401000 <_fini+0x34>
  400c24:	add	x5, x0, #0x18
  400c28:	adrp	x0, 401000 <_fini+0x34>
  400c2c:	add	x4, x0, #0xc0
  400c30:	mov	w3, #0x15                  	// #21
  400c34:	mov	x2, x1
  400c38:	ldr	w1, [sp, #120]
  400c3c:	mov	w0, w6
  400c40:	bl	400980 <log_internal_realm@plt>
  400c44:	b	400c50 <main+0xb4>
  400c48:	ldr	w0, [sp, #120]
  400c4c:	cmp	w0, #0x0
  400c50:	mov	w19, #0x1                   	// #1
  400c54:	b	400f04 <main+0x368>
  400c58:	bl	400920 <log_setup_service@plt>
  400c5c:	mov	w2, #0x0                   	// #0
  400c60:	mov	w1, #0x2                   	// #2
  400c64:	movk	w1, #0x8, lsl #16
  400c68:	mov	w0, #0x1                   	// #1
  400c6c:	bl	400910 <socket@plt>
  400c70:	str	w0, [sp, #76]
  400c74:	ldr	w0, [sp, #76]
  400c78:	cmp	w0, #0x0
  400c7c:	b.ge	400d04 <main+0x168>  // b.tcont
  400c80:	mov	w0, #0x7                   	// #7
  400c84:	str	w0, [sp, #104]
  400c88:	bl	400960 <__errno_location@plt>
  400c8c:	ldr	w0, [x0]
  400c90:	str	w0, [sp, #108]
  400c94:	str	wzr, [sp, #112]
  400c98:	ldr	w0, [sp, #112]
  400c9c:	bl	4009a0 <log_get_max_level_realm@plt>
  400ca0:	mov	w1, w0
  400ca4:	ldr	w0, [sp, #104]
  400ca8:	and	w0, w0, #0x7
  400cac:	cmp	w1, w0
  400cb0:	b.lt	400cf4 <main+0x158>  // b.tstop
  400cb4:	ldr	w0, [sp, #112]
  400cb8:	lsl	w1, w0, #10
  400cbc:	ldr	w0, [sp, #104]
  400cc0:	orr	w6, w1, w0
  400cc4:	adrp	x0, 400000 <_init-0x898>
  400cc8:	add	x1, x0, #0xff3
  400ccc:	adrp	x0, 401000 <_fini+0x34>
  400cd0:	add	x5, x0, #0x38
  400cd4:	adrp	x0, 401000 <_fini+0x34>
  400cd8:	add	x4, x0, #0xc0
  400cdc:	mov	w3, #0x1d                  	// #29
  400ce0:	mov	x2, x1
  400ce4:	ldr	w1, [sp, #108]
  400ce8:	mov	w0, w6
  400cec:	bl	400980 <log_internal_realm@plt>
  400cf0:	b	400cfc <main+0x160>
  400cf4:	ldr	w0, [sp, #108]
  400cf8:	cmp	w0, #0x0
  400cfc:	mov	w19, #0x1                   	// #1
  400d00:	b	400f04 <main+0x368>
  400d04:	ldr	x0, [sp, #48]
  400d08:	add	x0, x0, #0x8
  400d0c:	ldr	x0, [x0]
  400d10:	bl	400990 <strlen@plt>
  400d14:	str	x0, [sp, #128]
  400d18:	ldr	w19, [sp, #76]
  400d1c:	ldr	x0, [sp, #48]
  400d20:	add	x0, x0, #0x8
  400d24:	ldr	x20, [x0]
  400d28:	adrp	x0, 401000 <_fini+0x34>
  400d2c:	add	x21, x0, #0xc8
  400d30:	adrp	x0, 401000 <_fini+0x34>
  400d34:	add	x0, x0, #0xc8
  400d38:	str	x0, [sp, #136]
  400d3c:	ldr	x0, [sp, #136]
  400d40:	ldrh	w0, [x0]
  400d44:	cmp	w0, #0x1
  400d48:	cset	w0, ne  // ne = any
  400d4c:	and	w0, w0, #0xff
  400d50:	and	x0, x0, #0xff
  400d54:	cmp	x0, #0x0
  400d58:	b.eq	400d84 <main+0x1e8>  // b.none
  400d5c:	adrp	x0, 400000 <_init-0x898>
  400d60:	add	x1, x0, #0xff3
  400d64:	adrp	x0, 401000 <_fini+0x34>
  400d68:	add	x4, x0, #0x148
  400d6c:	mov	w3, #0x23                  	// #35
  400d70:	mov	x2, x1
  400d74:	adrp	x0, 401000 <_fini+0x34>
  400d78:	add	x1, x0, #0x58
  400d7c:	mov	w0, #0x0                   	// #0
  400d80:	bl	400940 <log_assert_failed_realm@plt>
  400d84:	ldr	x0, [sp, #136]
  400d88:	ldrb	w0, [x0, #2]
  400d8c:	cmp	w0, #0x0
  400d90:	b.ne	400db0 <main+0x214>  // b.any
  400d94:	ldr	x0, [sp, #136]
  400d98:	add	x0, x0, #0x2
  400d9c:	add	x0, x0, #0x1
  400da0:	mov	x1, #0x6b                  	// #107
  400da4:	bl	400900 <strnlen@plt>
  400da8:	add	x0, x0, #0x3
  400dac:	b	400dc4 <main+0x228>
  400db0:	ldr	x0, [sp, #136]
  400db4:	add	x0, x0, #0x2
  400db8:	mov	x1, #0x6c                  	// #108
  400dbc:	bl	400900 <strnlen@plt>
  400dc0:	add	x0, x0, #0x3
  400dc4:	mov	w5, w0
  400dc8:	mov	x4, x21
  400dcc:	mov	w3, #0x0                   	// #0
  400dd0:	ldr	x2, [sp, #128]
  400dd4:	mov	x1, x20
  400dd8:	mov	w0, w19
  400ddc:	bl	4008d0 <sendto@plt>
  400de0:	str	x0, [sp, #144]
  400de4:	ldr	x0, [sp, #144]
  400de8:	cmp	x0, #0x0
  400dec:	b.ge	400e74 <main+0x2d8>  // b.tcont
  400df0:	mov	w0, #0x7                   	// #7
  400df4:	str	w0, [sp, #92]
  400df8:	bl	400960 <__errno_location@plt>
  400dfc:	ldr	w0, [x0]
  400e00:	str	w0, [sp, #96]
  400e04:	str	wzr, [sp, #100]
  400e08:	ldr	w0, [sp, #100]
  400e0c:	bl	4009a0 <log_get_max_level_realm@plt>
  400e10:	mov	w1, w0
  400e14:	ldr	w0, [sp, #92]
  400e18:	and	w0, w0, #0x7
  400e1c:	cmp	w1, w0
  400e20:	b.lt	400e64 <main+0x2c8>  // b.tstop
  400e24:	ldr	w0, [sp, #100]
  400e28:	lsl	w1, w0, #10
  400e2c:	ldr	w0, [sp, #92]
  400e30:	orr	w6, w1, w0
  400e34:	adrp	x0, 400000 <_init-0x898>
  400e38:	add	x1, x0, #0xff3
  400e3c:	adrp	x0, 401000 <_fini+0x34>
  400e40:	add	x5, x0, #0x78
  400e44:	adrp	x0, 401000 <_fini+0x34>
  400e48:	add	x4, x0, #0xc0
  400e4c:	mov	w3, #0x25                  	// #37
  400e50:	mov	x2, x1
  400e54:	ldr	w1, [sp, #96]
  400e58:	mov	w0, w6
  400e5c:	bl	400980 <log_internal_realm@plt>
  400e60:	b	400e6c <main+0x2d0>
  400e64:	ldr	w0, [sp, #96]
  400e68:	cmp	w0, #0x0
  400e6c:	mov	w19, #0x1                   	// #1
  400e70:	b	400f04 <main+0x368>
  400e74:	ldr	x0, [sp, #128]
  400e78:	ldr	x1, [sp, #144]
  400e7c:	cmp	x1, x0
  400e80:	b.eq	400f00 <main+0x364>  // b.none
  400e84:	mov	w0, #0x7                   	// #7
  400e88:	str	w0, [sp, #80]
  400e8c:	str	wzr, [sp, #84]
  400e90:	str	wzr, [sp, #88]
  400e94:	ldr	w0, [sp, #88]
  400e98:	bl	4009a0 <log_get_max_level_realm@plt>
  400e9c:	mov	w1, w0
  400ea0:	ldr	w0, [sp, #80]
  400ea4:	and	w0, w0, #0x7
  400ea8:	cmp	w1, w0
  400eac:	b.lt	400ef0 <main+0x354>  // b.tstop
  400eb0:	ldr	w0, [sp, #88]
  400eb4:	lsl	w1, w0, #10
  400eb8:	ldr	w0, [sp, #80]
  400ebc:	orr	w6, w1, w0
  400ec0:	adrp	x0, 400000 <_init-0x898>
  400ec4:	add	x1, x0, #0xff3
  400ec8:	adrp	x0, 401000 <_fini+0x34>
  400ecc:	add	x5, x0, #0xa8
  400ed0:	adrp	x0, 401000 <_fini+0x34>
  400ed4:	add	x4, x0, #0xc0
  400ed8:	mov	w3, #0x2a                  	// #42
  400edc:	mov	x2, x1
  400ee0:	ldr	w1, [sp, #84]
  400ee4:	mov	w0, w6
  400ee8:	bl	400980 <log_internal_realm@plt>
  400eec:	b	400ef8 <main+0x35c>
  400ef0:	ldr	w0, [sp, #84]
  400ef4:	cmp	w0, #0x0
  400ef8:	mov	w19, #0x1                   	// #1
  400efc:	b	400f04 <main+0x368>
  400f00:	mov	w19, #0x0                   	// #0
  400f04:	add	x0, sp, #0x4c
  400f08:	bl	400b78 <closep>
  400f0c:	mov	w1, w19
  400f10:	adrp	x0, 411000 <__FRAME_END__+0xfd30>
  400f14:	add	x0, x0, #0xd30
  400f18:	ldr	x2, [sp, #152]
  400f1c:	ldr	x0, [x0]
  400f20:	eor	x0, x2, x0
  400f24:	cmp	x0, #0x0
  400f28:	b.eq	400f30 <main+0x394>  // b.none
  400f2c:	bl	400970 <__stack_chk_fail@plt>
  400f30:	mov	w0, w1
  400f34:	ldp	x19, x20, [sp, #16]
  400f38:	ldr	x21, [sp, #32]
  400f3c:	ldp	x29, x30, [sp], #160
  400f40:	ret
  400f44:	nop

0000000000400f48 <__libc_csu_init>:
  400f48:	stp	x29, x30, [sp, #-64]!
  400f4c:	mov	x29, sp
  400f50:	stp	x19, x20, [sp, #16]
  400f54:	adrp	x20, 411000 <__FRAME_END__+0xfd30>
  400f58:	add	x20, x20, #0xd28
  400f5c:	stp	x21, x22, [sp, #32]
  400f60:	adrp	x21, 411000 <__FRAME_END__+0xfd30>
  400f64:	add	x21, x21, #0xd20
  400f68:	sub	x20, x20, x21
  400f6c:	mov	w22, w0
  400f70:	stp	x23, x24, [sp, #48]
  400f74:	mov	x23, x1
  400f78:	mov	x24, x2
  400f7c:	bl	400898 <_init>
  400f80:	cmp	xzr, x20, asr #3
  400f84:	b.eq	400fb0 <__libc_csu_init+0x68>  // b.none
  400f88:	asr	x20, x20, #3
  400f8c:	mov	x19, #0x0                   	// #0
  400f90:	ldr	x3, [x21, x19, lsl #3]
  400f94:	mov	x2, x24
  400f98:	add	x19, x19, #0x1
  400f9c:	mov	x1, x23
  400fa0:	mov	w0, w22
  400fa4:	blr	x3
  400fa8:	cmp	x20, x19
  400fac:	b.ne	400f90 <__libc_csu_init+0x48>  // b.any
  400fb0:	ldp	x19, x20, [sp, #16]
  400fb4:	ldp	x21, x22, [sp, #32]
  400fb8:	ldp	x23, x24, [sp, #48]
  400fbc:	ldp	x29, x30, [sp], #64
  400fc0:	ret
  400fc4:	nop

0000000000400fc8 <__libc_csu_fini>:
  400fc8:	ret

Disassembly of section .fini:

0000000000400fcc <_fini>:
  400fcc:	stp	x29, x30, [sp, #-16]!
  400fd0:	mov	x29, sp
  400fd4:	ldp	x29, x30, [sp], #16
  400fd8:	ret
