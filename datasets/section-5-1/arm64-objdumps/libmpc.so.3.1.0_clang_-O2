
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libmpc.so.3.1.0_clang_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000004958 <.init>:
    4958:	stp	x29, x30, [sp, #-16]!
    495c:	mov	x29, sp
    4960:	bl	55d0 <mpfr_get_emin_min@plt+0x10>
    4964:	ldp	x29, x30, [sp], #16
    4968:	ret

Disassembly of section .plt:

0000000000004970 <mpfr_set_underflow@plt-0x20>:
    4970:	stp	x16, x30, [sp, #-16]!
    4974:	adrp	x16, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    4978:	ldr	x17, [x16, #4088]
    497c:	add	x16, x16, #0xff8
    4980:	br	x17
    4984:	nop
    4988:	nop
    498c:	nop

0000000000004990 <mpfr_set_underflow@plt>:
    4990:	adrp	x16, 24000 <mpfr_set_underflow>
    4994:	ldr	x17, [x16]
    4998:	add	x16, x16, #0x0
    499c:	br	x17

00000000000049a0 <__gmpz_get_si@plt>:
    49a0:	adrp	x16, 24000 <mpfr_set_underflow>
    49a4:	ldr	x17, [x16, #8]
    49a8:	add	x16, x16, #0x8
    49ac:	br	x17

00000000000049b0 <mpfr_set_ld@plt>:
    49b0:	adrp	x16, 24000 <mpfr_set_underflow>
    49b4:	ldr	x17, [x16, #16]
    49b8:	add	x16, x16, #0x10
    49bc:	br	x17

00000000000049c0 <mpfr_mul_ui@plt>:
    49c0:	adrp	x16, 24000 <mpfr_set_underflow>
    49c4:	ldr	x17, [x16, #24]
    49c8:	add	x16, x16, #0x18
    49cc:	br	x17

00000000000049d0 <mpfr_mul_q@plt>:
    49d0:	adrp	x16, 24000 <mpfr_set_underflow>
    49d4:	ldr	x17, [x16, #32]
    49d8:	add	x16, x16, #0x20
    49dc:	br	x17

00000000000049e0 <mpfr_set_si_2exp@plt>:
    49e0:	adrp	x16, 24000 <mpfr_set_underflow>
    49e4:	ldr	x17, [x16, #40]
    49e8:	add	x16, x16, #0x28
    49ec:	br	x17

00000000000049f0 <__gmpz_scan1@plt>:
    49f0:	adrp	x16, 24000 <mpfr_set_underflow>
    49f4:	ldr	x17, [x16, #48]
    49f8:	add	x16, x16, #0x30
    49fc:	br	x17

0000000000004a00 <strlen@plt>:
    4a00:	adrp	x16, 24000 <mpfr_set_underflow>
    4a04:	ldr	x17, [x16, #56]
    4a08:	add	x16, x16, #0x38
    4a0c:	br	x17

0000000000004a10 <mpc_clear@plt>:
    4a10:	adrp	x16, 24000 <mpfr_set_underflow>
    4a14:	ldr	x17, [x16, #64]
    4a18:	add	x16, x16, #0x40
    4a1c:	br	x17

0000000000004a20 <mpfr_cosh@plt>:
    4a20:	adrp	x16, 24000 <mpfr_set_underflow>
    4a24:	ldr	x17, [x16, #72]
    4a28:	add	x16, x16, #0x48
    4a2c:	br	x17

0000000000004a30 <mpfr_tanh@plt>:
    4a30:	adrp	x16, 24000 <mpfr_set_underflow>
    4a34:	ldr	x17, [x16, #80]
    4a38:	add	x16, x16, #0x50
    4a3c:	br	x17

0000000000004a40 <mpfr_set_nan@plt>:
    4a40:	adrp	x16, 24000 <mpfr_set_underflow>
    4a44:	ldr	x17, [x16, #88]
    4a48:	add	x16, x16, #0x58
    4a4c:	br	x17

0000000000004a50 <mpfr_clear_overflow@plt>:
    4a50:	adrp	x16, 24000 <mpfr_set_underflow>
    4a54:	ldr	x17, [x16, #96]
    4a58:	add	x16, x16, #0x60
    4a5c:	br	x17

0000000000004a60 <mpfr_sub@plt>:
    4a60:	adrp	x16, 24000 <mpfr_set_underflow>
    4a64:	ldr	x17, [x16, #104]
    4a68:	add	x16, x16, #0x68
    4a6c:	br	x17

0000000000004a70 <mpfr_mul_2si@plt>:
    4a70:	adrp	x16, 24000 <mpfr_set_underflow>
    4a74:	ldr	x17, [x16, #112]
    4a78:	add	x16, x16, #0x70
    4a7c:	br	x17

0000000000004a80 <mpfr_const_pi@plt>:
    4a80:	adrp	x16, 24000 <mpfr_set_underflow>
    4a84:	ldr	x17, [x16, #120]
    4a88:	add	x16, x16, #0x78
    4a8c:	br	x17

0000000000004a90 <mpfr_fmms@plt>:
    4a90:	adrp	x16, 24000 <mpfr_set_underflow>
    4a94:	ldr	x17, [x16, #128]
    4a98:	add	x16, x16, #0x80
    4a9c:	br	x17

0000000000004aa0 <mpfr_init@plt>:
    4aa0:	adrp	x16, 24000 <mpfr_set_underflow>
    4aa4:	ldr	x17, [x16, #136]
    4aa8:	add	x16, x16, #0x88
    4aac:	br	x17

0000000000004ab0 <mpfr_tan@plt>:
    4ab0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ab4:	ldr	x17, [x16, #144]
    4ab8:	add	x16, x16, #0x90
    4abc:	br	x17

0000000000004ac0 <mpfr_strtofr@plt>:
    4ac0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ac4:	ldr	x17, [x16, #152]
    4ac8:	add	x16, x16, #0x98
    4acc:	br	x17

0000000000004ad0 <__gmpz_sub_ui@plt>:
    4ad0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ad4:	ldr	x17, [x16, #160]
    4ad8:	add	x16, x16, #0xa0
    4adc:	br	x17

0000000000004ae0 <__gmp_get_memory_functions@plt>:
    4ae0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ae4:	ldr	x17, [x16, #168]
    4ae8:	add	x16, x16, #0xa8
    4aec:	br	x17

0000000000004af0 <__gmpz_sqrt@plt>:
    4af0:	adrp	x16, 24000 <mpfr_set_underflow>
    4af4:	ldr	x17, [x16, #176]
    4af8:	add	x16, x16, #0xb0
    4afc:	br	x17

0000000000004b00 <mpfr_set_erangeflag@plt>:
    4b00:	adrp	x16, 24000 <mpfr_set_underflow>
    4b04:	ldr	x17, [x16, #184]
    4b08:	add	x16, x16, #0xb8
    4b0c:	br	x17

0000000000004b10 <__gmpz_set_ui@plt>:
    4b10:	adrp	x16, 24000 <mpfr_set_underflow>
    4b14:	ldr	x17, [x16, #192]
    4b18:	add	x16, x16, #0xc0
    4b1c:	br	x17

0000000000004b20 <__cxa_finalize@plt>:
    4b20:	adrp	x16, 24000 <mpfr_set_underflow>
    4b24:	ldr	x17, [x16, #200]
    4b28:	add	x16, x16, #0xc8
    4b2c:	br	x17

0000000000004b30 <sprintf@plt>:
    4b30:	adrp	x16, 24000 <mpfr_set_underflow>
    4b34:	ldr	x17, [x16, #208]
    4b38:	add	x16, x16, #0xd0
    4b3c:	br	x17

0000000000004b40 <mpc_sqrt@plt>:
    4b40:	adrp	x16, 24000 <mpfr_set_underflow>
    4b44:	ldr	x17, [x16, #216]
    4b48:	add	x16, x16, #0xd8
    4b4c:	br	x17

0000000000004b50 <mpfr_get_d@plt>:
    4b50:	adrp	x16, 24000 <mpfr_set_underflow>
    4b54:	ldr	x17, [x16, #224]
    4b58:	add	x16, x16, #0xe0
    4b5c:	br	x17

0000000000004b60 <mpfr_set_f@plt>:
    4b60:	adrp	x16, 24000 <mpfr_set_underflow>
    4b64:	ldr	x17, [x16, #232]
    4b68:	add	x16, x16, #0xe8
    4b6c:	br	x17

0000000000004b70 <mpfr_mul@plt>:
    4b70:	adrp	x16, 24000 <mpfr_set_underflow>
    4b74:	ldr	x17, [x16, #240]
    4b78:	add	x16, x16, #0xf0
    4b7c:	br	x17

0000000000004b80 <mpfr_neg@plt>:
    4b80:	adrp	x16, 24000 <mpfr_set_underflow>
    4b84:	ldr	x17, [x16, #248]
    4b88:	add	x16, x16, #0xf8
    4b8c:	br	x17

0000000000004b90 <mpfr_pow@plt>:
    4b90:	adrp	x16, 24000 <mpfr_set_underflow>
    4b94:	ldr	x17, [x16, #256]
    4b98:	add	x16, x16, #0x100
    4b9c:	br	x17

0000000000004ba0 <fputc@plt>:
    4ba0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ba4:	ldr	x17, [x16, #264]
    4ba8:	add	x16, x16, #0x108
    4bac:	br	x17

0000000000004bb0 <mpfr_nextbelow@plt>:
    4bb0:	adrp	x16, 24000 <mpfr_set_underflow>
    4bb4:	ldr	x17, [x16, #272]
    4bb8:	add	x16, x16, #0x110
    4bbc:	br	x17

0000000000004bc0 <__gmpz_sub@plt>:
    4bc0:	adrp	x16, 24000 <mpfr_set_underflow>
    4bc4:	ldr	x17, [x16, #280]
    4bc8:	add	x16, x16, #0x118
    4bcc:	br	x17

0000000000004bd0 <mpfr_get_z@plt>:
    4bd0:	adrp	x16, 24000 <mpfr_set_underflow>
    4bd4:	ldr	x17, [x16, #288]
    4bd8:	add	x16, x16, #0x120
    4bdc:	br	x17

0000000000004be0 <mpfr_sinh_cosh@plt>:
    4be0:	adrp	x16, 24000 <mpfr_set_underflow>
    4be4:	ldr	x17, [x16, #296]
    4be8:	add	x16, x16, #0x128
    4bec:	br	x17

0000000000004bf0 <mpc_alloc_str@plt>:
    4bf0:	adrp	x16, 24000 <mpfr_set_underflow>
    4bf4:	ldr	x17, [x16, #304]
    4bf8:	add	x16, x16, #0x130
    4bfc:	br	x17

0000000000004c00 <mpc_set_prec@plt>:
    4c00:	adrp	x16, 24000 <mpfr_set_underflow>
    4c04:	ldr	x17, [x16, #312]
    4c08:	add	x16, x16, #0x138
    4c0c:	br	x17

0000000000004c10 <mpfr_set_exp@plt>:
    4c10:	adrp	x16, 24000 <mpfr_set_underflow>
    4c14:	ldr	x17, [x16, #320]
    4c18:	add	x16, x16, #0x140
    4c1c:	br	x17

0000000000004c20 <mpc_tan@plt>:
    4c20:	adrp	x16, 24000 <mpfr_set_underflow>
    4c24:	ldr	x17, [x16, #328]
    4c28:	add	x16, x16, #0x148
    4c2c:	br	x17

0000000000004c30 <mpfr_set_d@plt>:
    4c30:	adrp	x16, 24000 <mpfr_set_underflow>
    4c34:	ldr	x17, [x16, #336]
    4c38:	add	x16, x16, #0x150
    4c3c:	br	x17

0000000000004c40 <__gmpz_divisible_2exp_p@plt>:
    4c40:	adrp	x16, 24000 <mpfr_set_underflow>
    4c44:	ldr	x17, [x16, #344]
    4c48:	add	x16, x16, #0x158
    4c4c:	br	x17

0000000000004c50 <__ctype_tolower_loc@plt>:
    4c50:	adrp	x16, 24000 <mpfr_set_underflow>
    4c54:	ldr	x17, [x16, #352]
    4c58:	add	x16, x16, #0x160
    4c5c:	br	x17

0000000000004c60 <__gmpz_fits_slong_p@plt>:
    4c60:	adrp	x16, 24000 <mpfr_set_underflow>
    4c64:	ldr	x17, [x16, #360]
    4c68:	add	x16, x16, #0x168
    4c6c:	br	x17

0000000000004c70 <localeconv@plt>:
    4c70:	adrp	x16, 24000 <mpfr_set_underflow>
    4c74:	ldr	x17, [x16, #368]
    4c78:	add	x16, x16, #0x170
    4c7c:	br	x17

0000000000004c80 <mpfr_set_prec@plt>:
    4c80:	adrp	x16, 24000 <mpfr_set_underflow>
    4c84:	ldr	x17, [x16, #376]
    4c88:	add	x16, x16, #0x178
    4c8c:	br	x17

0000000000004c90 <mpfr_fmma@plt>:
    4c90:	adrp	x16, 24000 <mpfr_set_underflow>
    4c94:	ldr	x17, [x16, #384]
    4c98:	add	x16, x16, #0x180
    4c9c:	br	x17

0000000000004ca0 <mpfr_atan2@plt>:
    4ca0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ca4:	ldr	x17, [x16, #392]
    4ca8:	add	x16, x16, #0x188
    4cac:	br	x17

0000000000004cb0 <mpfr_cmp_ui_2exp@plt>:
    4cb0:	adrp	x16, 24000 <mpfr_set_underflow>
    4cb4:	ldr	x17, [x16, #400]
    4cb8:	add	x16, x16, #0x190
    4cbc:	br	x17

0000000000004cc0 <__gmpz_divexact@plt>:
    4cc0:	adrp	x16, 24000 <mpfr_set_underflow>
    4cc4:	ldr	x17, [x16, #408]
    4cc8:	add	x16, x16, #0x198
    4ccc:	br	x17

0000000000004cd0 <mpc_add@plt>:
    4cd0:	adrp	x16, 24000 <mpfr_set_underflow>
    4cd4:	ldr	x17, [x16, #416]
    4cd8:	add	x16, x16, #0x1a0
    4cdc:	br	x17

0000000000004ce0 <mpc_set_ui@plt>:
    4ce0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ce4:	ldr	x17, [x16, #424]
    4ce8:	add	x16, x16, #0x1a8
    4cec:	br	x17

0000000000004cf0 <mpc_init2@plt>:
    4cf0:	adrp	x16, 24000 <mpfr_set_underflow>
    4cf4:	ldr	x17, [x16, #432]
    4cf8:	add	x16, x16, #0x1b0
    4cfc:	br	x17

0000000000004d00 <__gmpz_set@plt>:
    4d00:	adrp	x16, 24000 <mpfr_set_underflow>
    4d04:	ldr	x17, [x16, #440]
    4d08:	add	x16, x16, #0x1b8
    4d0c:	br	x17

0000000000004d10 <mpfr_set_zero@plt>:
    4d10:	adrp	x16, 24000 <mpfr_set_underflow>
    4d14:	ldr	x17, [x16, #448]
    4d18:	add	x16, x16, #0x1c0
    4d1c:	br	x17

0000000000004d20 <mpc_ceil_log2@plt>:
    4d20:	adrp	x16, 24000 <mpfr_set_underflow>
    4d24:	ldr	x17, [x16, #456]
    4d28:	add	x16, x16, #0x1c8
    4d2c:	br	x17

0000000000004d30 <__gmpz_tstbit@plt>:
    4d30:	adrp	x16, 24000 <mpfr_set_underflow>
    4d34:	ldr	x17, [x16, #464]
    4d38:	add	x16, x16, #0x1d0
    4d3c:	br	x17

0000000000004d40 <__gmpz_mul@plt>:
    4d40:	adrp	x16, 24000 <mpfr_set_underflow>
    4d44:	ldr	x17, [x16, #472]
    4d48:	add	x16, x16, #0x1d8
    4d4c:	br	x17

0000000000004d50 <mpc_set_ld_ld@plt>:
    4d50:	adrp	x16, 24000 <mpfr_set_underflow>
    4d54:	ldr	x17, [x16, #480]
    4d58:	add	x16, x16, #0x1e0
    4d5c:	br	x17

0000000000004d60 <mpfr_clear@plt>:
    4d60:	adrp	x16, 24000 <mpfr_set_underflow>
    4d64:	ldr	x17, [x16, #488]
    4d68:	add	x16, x16, #0x1e8
    4d6c:	br	x17

0000000000004d70 <__gmpfr_set_sj@plt>:
    4d70:	adrp	x16, 24000 <mpfr_set_underflow>
    4d74:	ldr	x17, [x16, #496]
    4d78:	add	x16, x16, #0x1f0
    4d7c:	br	x17

0000000000004d80 <mpfr_log@plt>:
    4d80:	adrp	x16, 24000 <mpfr_set_underflow>
    4d84:	ldr	x17, [x16, #504]
    4d88:	add	x16, x16, #0x1f8
    4d8c:	br	x17

0000000000004d90 <mpfr_atanh@plt>:
    4d90:	adrp	x16, 24000 <mpfr_set_underflow>
    4d94:	ldr	x17, [x16, #512]
    4d98:	add	x16, x16, #0x200
    4d9c:	br	x17

0000000000004da0 <__gmpz_swap@plt>:
    4da0:	adrp	x16, 24000 <mpfr_set_underflow>
    4da4:	ldr	x17, [x16, #520]
    4da8:	add	x16, x16, #0x208
    4dac:	br	x17

0000000000004db0 <mpc_log@plt>:
    4db0:	adrp	x16, 24000 <mpfr_set_underflow>
    4db4:	ldr	x17, [x16, #528]
    4db8:	add	x16, x16, #0x210
    4dbc:	br	x17

0000000000004dc0 <mpfr_asinh@plt>:
    4dc0:	adrp	x16, 24000 <mpfr_set_underflow>
    4dc4:	ldr	x17, [x16, #536]
    4dc8:	add	x16, x16, #0x218
    4dcc:	br	x17

0000000000004dd0 <mpc_fix_inf@plt>:
    4dd0:	adrp	x16, 24000 <mpfr_set_underflow>
    4dd4:	ldr	x17, [x16, #544]
    4dd8:	add	x16, x16, #0x220
    4ddc:	br	x17

0000000000004de0 <strcat@plt>:
    4de0:	adrp	x16, 24000 <mpfr_set_underflow>
    4de4:	ldr	x17, [x16, #552]
    4de8:	add	x16, x16, #0x228
    4dec:	br	x17

0000000000004df0 <mpc_pow_usi@plt>:
    4df0:	adrp	x16, 24000 <mpfr_set_underflow>
    4df4:	ldr	x17, [x16, #560]
    4df8:	add	x16, x16, #0x230
    4dfc:	br	x17

0000000000004e00 <mpfr_nextabove@plt>:
    4e00:	adrp	x16, 24000 <mpfr_set_underflow>
    4e04:	ldr	x17, [x16, #568]
    4e08:	add	x16, x16, #0x238
    4e0c:	br	x17

0000000000004e10 <__gmpz_fdiv_q_2exp@plt>:
    4e10:	adrp	x16, 24000 <mpfr_set_underflow>
    4e14:	ldr	x17, [x16, #576]
    4e18:	add	x16, x16, #0x240
    4e1c:	br	x17

0000000000004e20 <mpfr_clear_underflow@plt>:
    4e20:	adrp	x16, 24000 <mpfr_set_underflow>
    4e24:	ldr	x17, [x16, #584]
    4e28:	add	x16, x16, #0x248
    4e2c:	br	x17

0000000000004e30 <mpfr_integer_p@plt>:
    4e30:	adrp	x16, 24000 <mpfr_set_underflow>
    4e34:	ldr	x17, [x16, #592]
    4e38:	add	x16, x16, #0x250
    4e3c:	br	x17

0000000000004e40 <mpfr_asin@plt>:
    4e40:	adrp	x16, 24000 <mpfr_set_underflow>
    4e44:	ldr	x17, [x16, #600]
    4e48:	add	x16, x16, #0x258
    4e4c:	br	x17

0000000000004e50 <mpc_set_ld@plt>:
    4e50:	adrp	x16, 24000 <mpfr_set_underflow>
    4e54:	ldr	x17, [x16, #608]
    4e58:	add	x16, x16, #0x260
    4e5c:	br	x17

0000000000004e60 <mpfr_add@plt>:
    4e60:	adrp	x16, 24000 <mpfr_set_underflow>
    4e64:	ldr	x17, [x16, #616]
    4e68:	add	x16, x16, #0x268
    4e6c:	br	x17

0000000000004e70 <mpfr_clears@plt>:
    4e70:	adrp	x16, 24000 <mpfr_set_underflow>
    4e74:	ldr	x17, [x16, #624]
    4e78:	add	x16, x16, #0x270
    4e7c:	br	x17

0000000000004e80 <mpfr_set@plt>:
    4e80:	adrp	x16, 24000 <mpfr_set_underflow>
    4e84:	ldr	x17, [x16, #632]
    4e88:	add	x16, x16, #0x278
    4e8c:	br	x17

0000000000004e90 <__gmpz_mul_2exp@plt>:
    4e90:	adrp	x16, 24000 <mpfr_set_underflow>
    4e94:	ldr	x17, [x16, #640]
    4e98:	add	x16, x16, #0x280
    4e9c:	br	x17

0000000000004ea0 <mpc_norm@plt>:
    4ea0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ea4:	ldr	x17, [x16, #648]
    4ea8:	add	x16, x16, #0x288
    4eac:	br	x17

0000000000004eb0 <mpc_mul_naive@plt>:
    4eb0:	adrp	x16, 24000 <mpfr_set_underflow>
    4eb4:	ldr	x17, [x16, #656]
    4eb8:	add	x16, x16, #0x290
    4ebc:	br	x17

0000000000004ec0 <mpfr_set_z@plt>:
    4ec0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ec4:	ldr	x17, [x16, #664]
    4ec8:	add	x16, x16, #0x298
    4ecc:	br	x17

0000000000004ed0 <mpc_mul@plt>:
    4ed0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ed4:	ldr	x17, [x16, #672]
    4ed8:	add	x16, x16, #0x2a0
    4edc:	br	x17

0000000000004ee0 <mpfr_add_ui@plt>:
    4ee0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ee4:	ldr	x17, [x16, #680]
    4ee8:	add	x16, x16, #0x2a8
    4eec:	br	x17

0000000000004ef0 <mpc_set_nan@plt>:
    4ef0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ef4:	ldr	x17, [x16, #688]
    4ef8:	add	x16, x16, #0x2b0
    4efc:	br	x17

0000000000004f00 <mpc_strtoc@plt>:
    4f00:	adrp	x16, 24000 <mpfr_set_underflow>
    4f04:	ldr	x17, [x16, #696]
    4f08:	add	x16, x16, #0x2b8
    4f0c:	br	x17

0000000000004f10 <__gmpz_addmul@plt>:
    4f10:	adrp	x16, 24000 <mpfr_set_underflow>
    4f14:	ldr	x17, [x16, #704]
    4f18:	add	x16, x16, #0x2c0
    4f1c:	br	x17

0000000000004f20 <getc@plt>:
    4f20:	adrp	x16, 24000 <mpfr_set_underflow>
    4f24:	ldr	x17, [x16, #712]
    4f28:	add	x16, x16, #0x2c8
    4f2c:	br	x17

0000000000004f30 <mpc_sqr@plt>:
    4f30:	adrp	x16, 24000 <mpfr_set_underflow>
    4f34:	ldr	x17, [x16, #720]
    4f38:	add	x16, x16, #0x2d0
    4f3c:	br	x17

0000000000004f40 <mpfr_mul_2ui@plt>:
    4f40:	adrp	x16, 24000 <mpfr_set_underflow>
    4f44:	ldr	x17, [x16, #728]
    4f48:	add	x16, x16, #0x2d8
    4f4c:	br	x17

0000000000004f50 <mpc_sin@plt>:
    4f50:	adrp	x16, 24000 <mpfr_set_underflow>
    4f54:	ldr	x17, [x16, #736]
    4f58:	add	x16, x16, #0x2e0
    4f5c:	br	x17

0000000000004f60 <mpc_conj@plt>:
    4f60:	adrp	x16, 24000 <mpfr_set_underflow>
    4f64:	ldr	x17, [x16, #744]
    4f68:	add	x16, x16, #0x2e8
    4f6c:	br	x17

0000000000004f70 <mpfr_ui_div@plt>:
    4f70:	adrp	x16, 24000 <mpfr_set_underflow>
    4f74:	ldr	x17, [x16, #752]
    4f78:	add	x16, x16, #0x2f0
    4f7c:	br	x17

0000000000004f80 <mpfr_sinh@plt>:
    4f80:	adrp	x16, 24000 <mpfr_set_underflow>
    4f84:	ldr	x17, [x16, #760]
    4f88:	add	x16, x16, #0x2f8
    4f8c:	br	x17

0000000000004f90 <mpc_set_d_d@plt>:
    4f90:	adrp	x16, 24000 <mpfr_set_underflow>
    4f94:	ldr	x17, [x16, #768]
    4f98:	add	x16, x16, #0x300
    4f9c:	br	x17

0000000000004fa0 <__gmpz_add_ui@plt>:
    4fa0:	adrp	x16, 24000 <mpfr_set_underflow>
    4fa4:	ldr	x17, [x16, #776]
    4fa8:	add	x16, x16, #0x308
    4fac:	br	x17

0000000000004fb0 <__gmpq_clear@plt>:
    4fb0:	adrp	x16, 24000 <mpfr_set_underflow>
    4fb4:	ldr	x17, [x16, #784]
    4fb8:	add	x16, x16, #0x310
    4fbc:	br	x17

0000000000004fc0 <__gmon_start__@plt>:
    4fc0:	adrp	x16, 24000 <mpfr_set_underflow>
    4fc4:	ldr	x17, [x16, #792]
    4fc8:	add	x16, x16, #0x318
    4fcc:	br	x17

0000000000004fd0 <mpfr_acos@plt>:
    4fd0:	adrp	x16, 24000 <mpfr_set_underflow>
    4fd4:	ldr	x17, [x16, #800]
    4fd8:	add	x16, x16, #0x320
    4fdc:	br	x17

0000000000004fe0 <mpfr_cmp_si_2exp@plt>:
    4fe0:	adrp	x16, 24000 <mpfr_set_underflow>
    4fe4:	ldr	x17, [x16, #808]
    4fe8:	add	x16, x16, #0x328
    4fec:	br	x17

0000000000004ff0 <mpc_free_str@plt>:
    4ff0:	adrp	x16, 24000 <mpfr_set_underflow>
    4ff4:	ldr	x17, [x16, #816]
    4ff8:	add	x16, x16, #0x330
    4ffc:	br	x17

0000000000005000 <abort@plt>:
    5000:	adrp	x16, 24000 <mpfr_set_underflow>
    5004:	ldr	x17, [x16, #824]
    5008:	add	x16, x16, #0x338
    500c:	br	x17

0000000000005010 <mpfr_sqr@plt>:
    5010:	adrp	x16, 24000 <mpfr_set_underflow>
    5014:	ldr	x17, [x16, #832]
    5018:	add	x16, x16, #0x340
    501c:	br	x17

0000000000005020 <mpc_set_si@plt>:
    5020:	adrp	x16, 24000 <mpfr_set_underflow>
    5024:	ldr	x17, [x16, #840]
    5028:	add	x16, x16, #0x348
    502c:	br	x17

0000000000005030 <mpfr_div_2si@plt>:
    5030:	adrp	x16, 24000 <mpfr_set_underflow>
    5034:	ldr	x17, [x16, #848]
    5038:	add	x16, x16, #0x350
    503c:	br	x17

0000000000005040 <mpc_set_ui_ui@plt>:
    5040:	adrp	x16, 24000 <mpfr_set_underflow>
    5044:	ldr	x17, [x16, #856]
    5048:	add	x16, x16, #0x358
    504c:	br	x17

0000000000005050 <mpfr_cos@plt>:
    5050:	adrp	x16, 24000 <mpfr_set_underflow>
    5054:	ldr	x17, [x16, #864]
    5058:	add	x16, x16, #0x360
    505c:	br	x17

0000000000005060 <mpfr_get_emin@plt>:
    5060:	adrp	x16, 24000 <mpfr_set_underflow>
    5064:	ldr	x17, [x16, #872]
    5068:	add	x16, x16, #0x368
    506c:	br	x17

0000000000005070 <mpc_acos@plt>:
    5070:	adrp	x16, 24000 <mpfr_set_underflow>
    5074:	ldr	x17, [x16, #880]
    5078:	add	x16, x16, #0x370
    507c:	br	x17

0000000000005080 <mpfr_sin@plt>:
    5080:	adrp	x16, 24000 <mpfr_set_underflow>
    5084:	ldr	x17, [x16, #888]
    5088:	add	x16, x16, #0x378
    508c:	br	x17

0000000000005090 <mpfr_swap@plt>:
    5090:	adrp	x16, 24000 <mpfr_set_underflow>
    5094:	ldr	x17, [x16, #896]
    5098:	add	x16, x16, #0x380
    509c:	br	x17

00000000000050a0 <mpc_set_z@plt>:
    50a0:	adrp	x16, 24000 <mpfr_set_underflow>
    50a4:	ldr	x17, [x16, #904]
    50a8:	add	x16, x16, #0x388
    50ac:	br	x17

00000000000050b0 <__gmpz_ui_pow_ui@plt>:
    50b0:	adrp	x16, 24000 <mpfr_set_underflow>
    50b4:	ldr	x17, [x16, #912]
    50b8:	add	x16, x16, #0x390
    50bc:	br	x17

00000000000050c0 <mpfr_get_str@plt>:
    50c0:	adrp	x16, 24000 <mpfr_set_underflow>
    50c4:	ldr	x17, [x16, #920]
    50c8:	add	x16, x16, #0x398
    50cc:	br	x17

00000000000050d0 <mpc_fix_zero@plt>:
    50d0:	adrp	x16, 24000 <mpfr_set_underflow>
    50d4:	ldr	x17, [x16, #928]
    50d8:	add	x16, x16, #0x3a0
    50dc:	br	x17

00000000000050e0 <mpfr_acosh@plt>:
    50e0:	adrp	x16, 24000 <mpfr_set_underflow>
    50e4:	ldr	x17, [x16, #936]
    50e8:	add	x16, x16, #0x3a8
    50ec:	br	x17

00000000000050f0 <mpfr_sub_ui@plt>:
    50f0:	adrp	x16, 24000 <mpfr_set_underflow>
    50f4:	ldr	x17, [x16, #944]
    50f8:	add	x16, x16, #0x3b0
    50fc:	br	x17

0000000000005100 <__gmpq_set_ui@plt>:
    5100:	adrp	x16, 24000 <mpfr_set_underflow>
    5104:	ldr	x17, [x16, #952]
    5108:	add	x16, x16, #0x3b8
    510c:	br	x17

0000000000005110 <mpfr_get_ld@plt>:
    5110:	adrp	x16, 24000 <mpfr_set_underflow>
    5114:	ldr	x17, [x16, #960]
    5118:	add	x16, x16, #0x3c0
    511c:	br	x17

0000000000005120 <mpfr_set_inf@plt>:
    5120:	adrp	x16, 24000 <mpfr_set_underflow>
    5124:	ldr	x17, [x16, #968]
    5128:	add	x16, x16, #0x3c8
    512c:	br	x17

0000000000005130 <mpfr_set_ui_2exp@plt>:
    5130:	adrp	x16, 24000 <mpfr_set_underflow>
    5134:	ldr	x17, [x16, #976]
    5138:	add	x16, x16, #0x3d0
    513c:	br	x17

0000000000005140 <mpc_sin_cos@plt>:
    5140:	adrp	x16, 24000 <mpfr_set_underflow>
    5144:	ldr	x17, [x16, #984]
    5148:	add	x16, x16, #0x3d8
    514c:	br	x17

0000000000005150 <mpfr_div@plt>:
    5150:	adrp	x16, 24000 <mpfr_set_underflow>
    5154:	ldr	x17, [x16, #992]
    5158:	add	x16, x16, #0x3e0
    515c:	br	x17

0000000000005160 <mpc_mul_fr@plt>:
    5160:	adrp	x16, 24000 <mpfr_set_underflow>
    5164:	ldr	x17, [x16, #1000]
    5168:	add	x16, x16, #0x3e8
    516c:	br	x17

0000000000005170 <__ctype_b_loc@plt>:
    5170:	adrp	x16, 24000 <mpfr_set_underflow>
    5174:	ldr	x17, [x16, #1008]
    5178:	add	x16, x16, #0x3f0
    517c:	br	x17

0000000000005180 <__gmpz_clear@plt>:
    5180:	adrp	x16, 24000 <mpfr_set_underflow>
    5184:	ldr	x17, [x16, #1016]
    5188:	add	x16, x16, #0x3f8
    518c:	br	x17

0000000000005190 <__gmpfr_out_str@plt>:
    5190:	adrp	x16, 24000 <mpfr_set_underflow>
    5194:	ldr	x17, [x16, #1024]
    5198:	add	x16, x16, #0x400
    519c:	br	x17

00000000000051a0 <mpc_abs@plt>:
    51a0:	adrp	x16, 24000 <mpfr_set_underflow>
    51a4:	ldr	x17, [x16, #1032]
    51a8:	add	x16, x16, #0x408
    51ac:	br	x17

00000000000051b0 <mpfr_atan@plt>:
    51b0:	adrp	x16, 24000 <mpfr_set_underflow>
    51b4:	ldr	x17, [x16, #1040]
    51b8:	add	x16, x16, #0x410
    51bc:	br	x17

00000000000051c0 <mpfr_nexttoward@plt>:
    51c0:	adrp	x16, 24000 <mpfr_set_underflow>
    51c4:	ldr	x17, [x16, #1048]
    51c8:	add	x16, x16, #0x418
    51cc:	br	x17

00000000000051d0 <mpfr_set4@plt>:
    51d0:	adrp	x16, 24000 <mpfr_set_underflow>
    51d4:	ldr	x17, [x16, #1056]
    51d8:	add	x16, x16, #0x420
    51dc:	br	x17

00000000000051e0 <mpfr_log1p@plt>:
    51e0:	adrp	x16, 24000 <mpfr_set_underflow>
    51e4:	ldr	x17, [x16, #1064]
    51e8:	add	x16, x16, #0x428
    51ec:	br	x17

00000000000051f0 <mpfr_sgn@plt>:
    51f0:	adrp	x16, 24000 <mpfr_set_underflow>
    51f4:	ldr	x17, [x16, #1072]
    51f8:	add	x16, x16, #0x430
    51fc:	br	x17

0000000000005200 <mpfr_get_emax@plt>:
    5200:	adrp	x16, 24000 <mpfr_set_underflow>
    5204:	ldr	x17, [x16, #1080]
    5208:	add	x16, x16, #0x438
    520c:	br	x17

0000000000005210 <ungetc@plt>:
    5210:	adrp	x16, 24000 <mpfr_set_underflow>
    5214:	ldr	x17, [x16, #1088]
    5218:	add	x16, x16, #0x440
    521c:	br	x17

0000000000005220 <__gmpz_tdiv_q_2exp@plt>:
    5220:	adrp	x16, 24000 <mpfr_set_underflow>
    5224:	ldr	x17, [x16, #1096]
    5228:	add	x16, x16, #0x448
    522c:	br	x17

0000000000005230 <mpfr_exp@plt>:
    5230:	adrp	x16, 24000 <mpfr_set_underflow>
    5234:	ldr	x17, [x16, #1104]
    5238:	add	x16, x16, #0x450
    523c:	br	x17

0000000000005240 <mpc_pow@plt>:
    5240:	adrp	x16, 24000 <mpfr_set_underflow>
    5244:	ldr	x17, [x16, #1112]
    5248:	add	x16, x16, #0x458
    524c:	br	x17

0000000000005250 <mpc_div@plt>:
    5250:	adrp	x16, 24000 <mpfr_set_underflow>
    5254:	ldr	x17, [x16, #1120]
    5258:	add	x16, x16, #0x460
    525c:	br	x17

0000000000005260 <mpfr_add_si@plt>:
    5260:	adrp	x16, 24000 <mpfr_set_underflow>
    5264:	ldr	x17, [x16, #1128]
    5268:	add	x16, x16, #0x468
    526c:	br	x17

0000000000005270 <mpfr_set_si@plt>:
    5270:	adrp	x16, 24000 <mpfr_set_underflow>
    5274:	ldr	x17, [x16, #1136]
    5278:	add	x16, x16, #0x470
    527c:	br	x17

0000000000005280 <mpfr_sqrt_ui@plt>:
    5280:	adrp	x16, 24000 <mpfr_set_underflow>
    5284:	ldr	x17, [x16, #1144]
    5288:	add	x16, x16, #0x478
    528c:	br	x17

0000000000005290 <mpfr_set_q@plt>:
    5290:	adrp	x16, 24000 <mpfr_set_underflow>
    5294:	ldr	x17, [x16, #1152]
    5298:	add	x16, x16, #0x480
    529c:	br	x17

00000000000052a0 <mpc_exp@plt>:
    52a0:	adrp	x16, 24000 <mpfr_set_underflow>
    52a4:	ldr	x17, [x16, #1160]
    52a8:	add	x16, x16, #0x488
    52ac:	br	x17

00000000000052b0 <__gmpq_init@plt>:
    52b0:	adrp	x16, 24000 <mpfr_set_underflow>
    52b4:	ldr	x17, [x16, #1168]
    52b8:	add	x16, x16, #0x490
    52bc:	br	x17

00000000000052c0 <mpc_set_si_si@plt>:
    52c0:	adrp	x16, 24000 <mpfr_set_underflow>
    52c4:	ldr	x17, [x16, #1176]
    52c8:	add	x16, x16, #0x498
    52cc:	br	x17

00000000000052d0 <__gmpz_submul@plt>:
    52d0:	adrp	x16, 24000 <mpfr_set_underflow>
    52d4:	ldr	x17, [x16, #1184]
    52d8:	add	x16, x16, #0x4a0
    52dc:	br	x17

00000000000052e0 <mpfr_free_str@plt>:
    52e0:	adrp	x16, 24000 <mpfr_set_underflow>
    52e4:	ldr	x17, [x16, #1192]
    52e8:	add	x16, x16, #0x4a8
    52ec:	br	x17

00000000000052f0 <mpfr_underflow_p@plt>:
    52f0:	adrp	x16, 24000 <mpfr_set_underflow>
    52f4:	ldr	x17, [x16, #1200]
    52f8:	add	x16, x16, #0x4b0
    52fc:	br	x17

0000000000005300 <__gmpz_cmp@plt>:
    5300:	adrp	x16, 24000 <mpfr_set_underflow>
    5304:	ldr	x17, [x16, #1208]
    5308:	add	x16, x16, #0x4b8
    530c:	br	x17

0000000000005310 <mpc_cmp_si_si@plt>:
    5310:	adrp	x16, 24000 <mpfr_set_underflow>
    5314:	ldr	x17, [x16, #1216]
    5318:	add	x16, x16, #0x4c0
    531c:	br	x17

0000000000005320 <mpfr_div_2ui@plt>:
    5320:	adrp	x16, 24000 <mpfr_set_underflow>
    5324:	ldr	x17, [x16, #1224]
    5328:	add	x16, x16, #0x4c8
    532c:	br	x17

0000000000005330 <mpc_realloc_str@plt>:
    5330:	adrp	x16, 24000 <mpfr_set_underflow>
    5334:	ldr	x17, [x16, #1232]
    5338:	add	x16, x16, #0x4d0
    533c:	br	x17

0000000000005340 <strcpy@plt>:
    5340:	adrp	x16, 24000 <mpfr_set_underflow>
    5344:	ldr	x17, [x16, #1240]
    5348:	add	x16, x16, #0x4d8
    534c:	br	x17

0000000000005350 <mpfr_sqrt@plt>:
    5350:	adrp	x16, 24000 <mpfr_set_underflow>
    5354:	ldr	x17, [x16, #1248]
    5358:	add	x16, x16, #0x4e0
    535c:	br	x17

0000000000005360 <mpfr_mul_si@plt>:
    5360:	adrp	x16, 24000 <mpfr_set_underflow>
    5364:	ldr	x17, [x16, #1256]
    5368:	add	x16, x16, #0x4e8
    536c:	br	x17

0000000000005370 <mpfr_prec_round@plt>:
    5370:	adrp	x16, 24000 <mpfr_set_underflow>
    5374:	ldr	x17, [x16, #1264]
    5378:	add	x16, x16, #0x4f0
    537c:	br	x17

0000000000005380 <mpc_set_str@plt>:
    5380:	adrp	x16, 24000 <mpfr_set_underflow>
    5384:	ldr	x17, [x16, #1272]
    5388:	add	x16, x16, #0x4f8
    538c:	br	x17

0000000000005390 <mpfr_min_prec@plt>:
    5390:	adrp	x16, 24000 <mpfr_set_underflow>
    5394:	ldr	x17, [x16, #1280]
    5398:	add	x16, x16, #0x500
    539c:	br	x17

00000000000053a0 <mpfr_cmp3@plt>:
    53a0:	adrp	x16, 24000 <mpfr_set_underflow>
    53a4:	ldr	x17, [x16, #1288]
    53a8:	add	x16, x16, #0x508
    53ac:	br	x17

00000000000053b0 <mpfr_cmpabs@plt>:
    53b0:	adrp	x16, 24000 <mpfr_set_underflow>
    53b4:	ldr	x17, [x16, #1296]
    53b8:	add	x16, x16, #0x510
    53bc:	br	x17

00000000000053c0 <mpc_init3@plt>:
    53c0:	adrp	x16, 24000 <mpfr_set_underflow>
    53c4:	ldr	x17, [x16, #1304]
    53c8:	add	x16, x16, #0x518
    53cc:	br	x17

00000000000053d0 <__gmpz_add@plt>:
    53d0:	adrp	x16, 24000 <mpfr_set_underflow>
    53d4:	ldr	x17, [x16, #1312]
    53d8:	add	x16, x16, #0x520
    53dc:	br	x17

00000000000053e0 <mpc_cos@plt>:
    53e0:	adrp	x16, 24000 <mpfr_set_underflow>
    53e4:	ldr	x17, [x16, #1320]
    53e8:	add	x16, x16, #0x528
    53ec:	br	x17

00000000000053f0 <set_pi_over_2@plt>:
    53f0:	adrp	x16, 24000 <mpfr_set_underflow>
    53f4:	ldr	x17, [x16, #1328]
    53f8:	add	x16, x16, #0x530
    53fc:	br	x17

0000000000005400 <__gmpfr_set_uj@plt>:
    5400:	adrp	x16, 24000 <mpfr_set_underflow>
    5404:	ldr	x17, [x16, #1336]
    5408:	add	x16, x16, #0x538
    540c:	br	x17

0000000000005410 <mpc_atan@plt>:
    5410:	adrp	x16, 24000 <mpfr_set_underflow>
    5414:	ldr	x17, [x16, #1344]
    5418:	add	x16, x16, #0x540
    541c:	br	x17

0000000000005420 <__gmpn_perfect_square_p@plt>:
    5420:	adrp	x16, 24000 <mpfr_set_underflow>
    5424:	ldr	x17, [x16, #1352]
    5428:	add	x16, x16, #0x548
    542c:	br	x17

0000000000005430 <mpfr_ui_sub@plt>:
    5430:	adrp	x16, 24000 <mpfr_set_underflow>
    5434:	ldr	x17, [x16, #1360]
    5438:	add	x16, x16, #0x550
    543c:	br	x17

0000000000005440 <mpfr_init2@plt>:
    5440:	adrp	x16, 24000 <mpfr_set_underflow>
    5444:	ldr	x17, [x16, #1368]
    5448:	add	x16, x16, #0x558
    544c:	br	x17

0000000000005450 <mpfr_can_round@plt>:
    5450:	adrp	x16, 24000 <mpfr_set_underflow>
    5454:	ldr	x17, [x16, #1376]
    5458:	add	x16, x16, #0x560
    545c:	br	x17

0000000000005460 <mpc_set_d@plt>:
    5460:	adrp	x16, 24000 <mpfr_set_underflow>
    5464:	ldr	x17, [x16, #1384]
    5468:	add	x16, x16, #0x568
    546c:	br	x17

0000000000005470 <mpfr_get_z_2exp@plt>:
    5470:	adrp	x16, 24000 <mpfr_set_underflow>
    5474:	ldr	x17, [x16, #1392]
    5478:	add	x16, x16, #0x570
    547c:	br	x17

0000000000005480 <mpc_asin@plt>:
    5480:	adrp	x16, 24000 <mpfr_set_underflow>
    5484:	ldr	x17, [x16, #1400]
    5488:	add	x16, x16, #0x578
    548c:	br	x17

0000000000005490 <mpfr_set_overflow@plt>:
    5490:	adrp	x16, 24000 <mpfr_set_underflow>
    5494:	ldr	x17, [x16, #1408]
    5498:	add	x16, x16, #0x580
    549c:	br	x17

00000000000054a0 <__gmpz_init@plt>:
    54a0:	adrp	x16, 24000 <mpfr_set_underflow>
    54a4:	ldr	x17, [x16, #1416]
    54a8:	add	x16, x16, #0x588
    54ac:	br	x17

00000000000054b0 <__gmpz_sizeinbase@plt>:
    54b0:	adrp	x16, 24000 <mpfr_set_underflow>
    54b4:	ldr	x17, [x16, #1424]
    54b8:	add	x16, x16, #0x590
    54bc:	br	x17

00000000000054c0 <__gmpz_set_si@plt>:
    54c0:	adrp	x16, 24000 <mpfr_set_underflow>
    54c4:	ldr	x17, [x16, #1432]
    54c8:	add	x16, x16, #0x598
    54cc:	br	x17

00000000000054d0 <mpfr_number_p@plt>:
    54d0:	adrp	x16, 24000 <mpfr_set_underflow>
    54d4:	ldr	x17, [x16, #1440]
    54d8:	add	x16, x16, #0x5a0
    54dc:	br	x17

00000000000054e0 <mpfr_overflow_p@plt>:
    54e0:	adrp	x16, 24000 <mpfr_set_underflow>
    54e4:	ldr	x17, [x16, #1448]
    54e8:	add	x16, x16, #0x5a8
    54ec:	br	x17

00000000000054f0 <mpc_set_fr_fr@plt>:
    54f0:	adrp	x16, 24000 <mpfr_set_underflow>
    54f4:	ldr	x17, [x16, #1456]
    54f8:	add	x16, x16, #0x5b0
    54fc:	br	x17

0000000000005500 <mpfr_urandomb@plt>:
    5500:	adrp	x16, 24000 <mpfr_set_underflow>
    5504:	ldr	x17, [x16, #1464]
    5508:	add	x16, x16, #0x5b8
    550c:	br	x17

0000000000005510 <mpfr_set_ui@plt>:
    5510:	adrp	x16, 24000 <mpfr_set_underflow>
    5514:	ldr	x17, [x16, #1472]
    5518:	add	x16, x16, #0x5c0
    551c:	br	x17

0000000000005520 <mpfr_sin_cos@plt>:
    5520:	adrp	x16, 24000 <mpfr_set_underflow>
    5524:	ldr	x17, [x16, #1480]
    5528:	add	x16, x16, #0x5c8
    552c:	br	x17

0000000000005530 <mpc_div_2ui@plt>:
    5530:	adrp	x16, 24000 <mpfr_set_underflow>
    5534:	ldr	x17, [x16, #1488]
    5538:	add	x16, x16, #0x5d0
    553c:	br	x17

0000000000005540 <mpfr_inits2@plt>:
    5540:	adrp	x16, 24000 <mpfr_set_underflow>
    5544:	ldr	x17, [x16, #1496]
    5548:	add	x16, x16, #0x5d8
    554c:	br	x17

0000000000005550 <mpfr_div_ui@plt>:
    5550:	adrp	x16, 24000 <mpfr_set_underflow>
    5554:	ldr	x17, [x16, #1504]
    5558:	add	x16, x16, #0x5e0
    555c:	br	x17

0000000000005560 <mpc_fma_naive@plt>:
    5560:	adrp	x16, 24000 <mpfr_set_underflow>
    5564:	ldr	x17, [x16, #1512]
    5568:	add	x16, x16, #0x5e8
    556c:	br	x17

0000000000005570 <__gmpq_mul_2exp@plt>:
    5570:	adrp	x16, 24000 <mpfr_set_underflow>
    5574:	ldr	x17, [x16, #1520]
    5578:	add	x16, x16, #0x5f0
    557c:	br	x17

0000000000005580 <mpc_set@plt>:
    5580:	adrp	x16, 24000 <mpfr_set_underflow>
    5584:	ldr	x17, [x16, #1528]
    5588:	add	x16, x16, #0x5f8
    558c:	br	x17

0000000000005590 <mpfr_hypot@plt>:
    5590:	adrp	x16, 24000 <mpfr_set_underflow>
    5594:	ldr	x17, [x16, #1536]
    5598:	add	x16, x16, #0x600
    559c:	br	x17

00000000000055a0 <fprintf@plt>:
    55a0:	adrp	x16, 24000 <mpfr_set_underflow>
    55a4:	ldr	x17, [x16, #1544]
    55a8:	add	x16, x16, #0x608
    55ac:	br	x17

00000000000055b0 <mpc_ui_div@plt>:
    55b0:	adrp	x16, 24000 <mpfr_set_underflow>
    55b4:	ldr	x17, [x16, #1552]
    55b8:	add	x16, x16, #0x610
    55bc:	br	x17

00000000000055c0 <mpfr_get_emin_min@plt>:
    55c0:	adrp	x16, 24000 <mpfr_set_underflow>
    55c4:	ldr	x17, [x16, #1560]
    55c8:	add	x16, x16, #0x618
    55cc:	br	x17

Disassembly of section .text:

00000000000055d0 <mpc_abs@@Base-0xd4>:
    55d0:	adrp	x0, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    55d4:	ldr	x0, [x0, #4048]
    55d8:	cbz	x0, 55e0 <mpfr_get_emin_min@plt+0x20>
    55dc:	b	4fc0 <__gmon_start__@plt>
    55e0:	ret
    55e4:	nop
    55e8:	adrp	x0, 24000 <mpc_ui_ui_sub@@Base+0x11c54>
    55ec:	add	x0, x0, #0x628
    55f0:	adrp	x1, 24000 <mpc_ui_ui_sub@@Base+0x11c54>
    55f4:	add	x1, x1, #0x628
    55f8:	cmp	x1, x0
    55fc:	b.eq	5614 <mpfr_get_emin_min@plt+0x54>  // b.none
    5600:	adrp	x1, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    5604:	ldr	x1, [x1, #3992]
    5608:	cbz	x1, 5614 <mpfr_get_emin_min@plt+0x54>
    560c:	mov	x16, x1
    5610:	br	x16
    5614:	ret
    5618:	adrp	x0, 24000 <mpc_ui_ui_sub@@Base+0x11c54>
    561c:	add	x0, x0, #0x628
    5620:	adrp	x1, 24000 <mpc_ui_ui_sub@@Base+0x11c54>
    5624:	add	x1, x1, #0x628
    5628:	sub	x1, x1, x0
    562c:	lsr	x2, x1, #63
    5630:	add	x1, x2, x1, asr #3
    5634:	cmp	xzr, x1, asr #1
    5638:	asr	x1, x1, #1
    563c:	b.eq	5654 <mpfr_get_emin_min@plt+0x94>  // b.none
    5640:	adrp	x2, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    5644:	ldr	x2, [x2, #4064]
    5648:	cbz	x2, 5654 <mpfr_get_emin_min@plt+0x94>
    564c:	mov	x16, x2
    5650:	br	x16
    5654:	ret
    5658:	stp	x29, x30, [sp, #-32]!
    565c:	mov	x29, sp
    5660:	str	x19, [sp, #16]
    5664:	adrp	x19, 24000 <mpc_ui_ui_sub@@Base+0x11c54>
    5668:	ldrb	w0, [x19, #1576]
    566c:	cbnz	w0, 5694 <mpfr_get_emin_min@plt+0xd4>
    5670:	adrp	x0, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    5674:	ldr	x0, [x0, #4000]
    5678:	cbz	x0, 5688 <mpfr_get_emin_min@plt+0xc8>
    567c:	adrp	x0, 24000 <mpc_ui_ui_sub@@Base+0x11c54>
    5680:	ldr	x0, [x0, #1568]
    5684:	bl	4b20 <__cxa_finalize@plt>
    5688:	bl	55e8 <mpfr_get_emin_min@plt+0x28>
    568c:	mov	w0, #0x1                   	// #1
    5690:	strb	w0, [x19, #1576]
    5694:	ldr	x19, [sp, #16]
    5698:	ldp	x29, x30, [sp], #32
    569c:	ret
    56a0:	b	5618 <mpfr_get_emin_min@plt+0x58>

00000000000056a4 <mpc_abs@@Base>:
    56a4:	mov	w3, w2
    56a8:	add	x2, x1, #0x20
    56ac:	b	5590 <mpfr_hypot@plt>

00000000000056b0 <mpc_acos@@Base>:
    56b0:	sub	sp, sp, #0xd0
    56b4:	stp	x29, x30, [sp, #112]
    56b8:	stp	x28, x27, [sp, #128]
    56bc:	stp	x26, x25, [sp, #144]
    56c0:	stp	x24, x23, [sp, #160]
    56c4:	stp	x22, x21, [sp, #176]
    56c8:	stp	x20, x19, [sp, #192]
    56cc:	ldr	x8, [x1, #16]
    56d0:	mov	x27, #0x2                   	// #2
    56d4:	movk	x27, #0x8000, lsl #48
    56d8:	mov	x20, x1
    56dc:	cmp	x8, x27
    56e0:	mov	x24, x0
    56e4:	add	x29, sp, #0x70
    56e8:	b.ne	570c <mpc_acos@@Base+0x5c>  // b.any
    56ec:	ldr	x8, [x20, #48]
    56f0:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    56f4:	cmp	x8, x9
    56f8:	b.eq	5728 <mpc_acos@@Base+0x78>  // b.none
    56fc:	mov	x0, x24
    5700:	bl	4a40 <mpfr_set_nan@plt>
    5704:	add	x0, x24, #0x20
    5708:	b	5744 <mpc_acos@@Base+0x94>
    570c:	ldr	x9, [x20, #48]
    5710:	mov	w19, w2
    5714:	cmp	x9, x27
    5718:	b.ne	5750 <mpc_acos@@Base+0xa0>  // b.any
    571c:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    5720:	cmp	x8, x9
    5724:	b.ne	57c0 <mpc_acos@@Base+0x110>  // b.any
    5728:	ldr	w8, [x20, #40]
    572c:	add	x0, x24, #0x20
    5730:	cmp	w8, #0x0
    5734:	mov	w8, #0xffffffff            	// #-1
    5738:	cneg	w1, w8, lt  // lt = tstop
    573c:	bl	5120 <mpfr_set_inf@plt>
    5740:	mov	x0, x24
    5744:	bl	4a40 <mpfr_set_nan@plt>
    5748:	mov	w0, wzr
    574c:	b	5cd8 <mpc_acos@@Base+0x628>
    5750:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    5754:	cmp	x8, x10
    5758:	b.eq	57f0 <mpc_acos@@Base+0x140>  // b.none
    575c:	cmp	x9, x10
    5760:	b.eq	57f0 <mpc_acos@@Base+0x140>  // b.none
    5764:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    5768:	cmp	x9, x10
    576c:	b.ne	583c <mpc_acos@@Base+0x18c>  // b.any
    5770:	ldr	w22, [x20, #40]
    5774:	mov	w1, #0x1                   	// #1
    5778:	mov	x0, x20
    577c:	mov	x2, xzr
    5780:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    5784:	cmp	w0, #0x1
    5788:	b.lt	5944 <mpc_acos@@Base+0x294>  // b.tstop
    578c:	add	x0, x24, #0x20
    5790:	asr	w2, w19, #4
    5794:	tbnz	w22, #31, 59a4 <mpc_acos@@Base+0x2f4>
    5798:	cmp	w2, #0x3
    579c:	mov	w8, #0x2                   	// #2
    57a0:	csel	w8, w8, w2, eq  // eq = none
    57a4:	cmp	w2, #0x2
    57a8:	mov	w9, #0x3                   	// #3
    57ac:	csel	w2, w9, w8, eq  // eq = none
    57b0:	mov	x1, x20
    57b4:	bl	50e0 <mpfr_acosh@plt>
    57b8:	neg	w20, w0
    57bc:	b	59b0 <mpc_acos@@Base+0x300>
    57c0:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    57c4:	cmp	x8, x9
    57c8:	b.ne	56fc <mpc_acos@@Base+0x4c>  // b.any
    57cc:	and	w2, w19, #0xf
    57d0:	mov	w1, #0x1                   	// #1
    57d4:	mov	x0, x24
    57d8:	bl	53f0 <set_pi_over_2@plt>
    57dc:	mov	w20, w0
    57e0:	add	x0, x24, #0x20
    57e4:	bl	4a40 <mpfr_set_nan@plt>
    57e8:	cmp	w20, #0x0
    57ec:	b	5aa8 <mpc_acos@@Base+0x3f8>
    57f0:	cmp	x8, x10
    57f4:	b.ne	58c0 <mpc_acos@@Base+0x210>  // b.any
    57f8:	ldr	w8, [x20, #8]
    57fc:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    5800:	cmp	x9, x10
    5804:	b.ne	58d8 <mpc_acos@@Base+0x228>  // b.any
    5808:	cmp	w8, #0x1
    580c:	b.lt	5a00 <mpc_acos@@Base+0x350>  // b.tstop
    5810:	and	w2, w19, #0xf
    5814:	mov	w1, #0x1                   	// #1
    5818:	mov	x0, x24
    581c:	bl	53f0 <set_pi_over_2@plt>
    5820:	mov	w21, w0
    5824:	mov	w2, #0x1                   	// #1
    5828:	mov	x0, x24
    582c:	mov	x1, x24
    5830:	mov	w3, wzr
    5834:	bl	5320 <mpfr_div_2ui@plt>
    5838:	b	5a8c <mpc_acos@@Base+0x3dc>
    583c:	cmp	x8, x10
    5840:	b.ne	58f8 <mpc_acos@@Base+0x248>  // b.any
    5844:	and	w2, w19, #0xf
    5848:	mov	w1, #0x1                   	// #1
    584c:	mov	x0, x24
    5850:	add	x20, x20, #0x20
    5854:	bl	53f0 <set_pi_over_2@plt>
    5858:	asr	w8, w19, #4
    585c:	mov	w19, #0x2                   	// #2
    5860:	cmp	w8, #0x3
    5864:	csel	w9, w19, w8, eq  // eq = none
    5868:	cmp	w8, #0x2
    586c:	mov	w8, #0x3                   	// #3
    5870:	mov	w22, w0
    5874:	add	x0, x24, #0x20
    5878:	csel	w2, w8, w9, eq  // eq = none
    587c:	mov	x1, x20
    5880:	bl	4dc0 <mpfr_asinh@plt>
    5884:	mov	w20, w0
    5888:	mov	x0, x24
    588c:	mov	x1, x24
    5890:	mov	w2, wzr
    5894:	bl	4f60 <mpc_conj@plt>
    5898:	cmp	w22, #0x0
    589c:	cset	w8, ne  // ne = any
    58a0:	csel	w8, w19, w8, lt  // lt = tstop
    58a4:	cmp	w20, #0x0
    58a8:	cset	w9, ne  // ne = any
    58ac:	lsl	w9, w9, #2
    58b0:	mov	w10, #0x8                   	// #8
    58b4:	csel	w9, w10, w9, gt
    58b8:	orr	w0, w9, w8
    58bc:	b	5cd8 <mpc_acos@@Base+0x628>
    58c0:	and	w2, w19, #0xf
    58c4:	mov	w1, #0x1                   	// #1
    58c8:	mov	x0, x24
    58cc:	bl	53f0 <set_pi_over_2@plt>
    58d0:	mov	w21, w0
    58d4:	b	5a8c <mpc_acos@@Base+0x3dc>
    58d8:	cmp	w8, #0x1
    58dc:	b.lt	5ab8 <mpc_acos@@Base+0x408>  // b.tstop
    58e0:	mov	w8, #0x1                   	// #1
    58e4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    58e8:	mov	w21, wzr
    58ec:	str	w8, [x24, #8]
    58f0:	str	x9, [x24, #16]
    58f4:	b	5a8c <mpc_acos@@Base+0x3dc>
    58f8:	ldr	x22, [x24]
    58fc:	ldr	x2, [x24, #32]
    5900:	add	x0, sp, #0x30
    5904:	mov	x1, x22
    5908:	bl	53c0 <mpc_init3@plt>
    590c:	asr	w8, w19, #4
    5910:	cmp	w8, #0x1
    5914:	str	x24, [sp, #8]
    5918:	b.ne	5988 <mpc_acos@@Base+0x2d8>  // b.any
    591c:	ldr	x8, [x20, #48]
    5920:	mov	x9, #0x2                   	// #2
    5924:	movk	x9, #0x8000, lsl #48
    5928:	cmp	x8, x9
    592c:	b.gt	5b14 <mpc_acos@@Base+0x464>
    5930:	cmp	x8, x27
    5934:	b.ne	593c <mpc_acos@@Base+0x28c>  // b.any
    5938:	bl	4b00 <mpfr_set_erangeflag@plt>
    593c:	mov	w8, #0x2                   	// #2
    5940:	b	5b24 <mpc_acos@@Base+0x474>
    5944:	mov	x1, #0xffffffffffffffff    	// #-1
    5948:	mov	x0, x20
    594c:	mov	x2, xzr
    5950:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    5954:	tbnz	w0, #31, 5ac8 <mpc_acos@@Base+0x418>
    5958:	and	w2, w19, #0xf
    595c:	mov	x0, x24
    5960:	mov	x1, x20
    5964:	bl	4fd0 <mpfr_acos@plt>
    5968:	mov	w21, w0
    596c:	mov	w20, wzr
    5970:	mov	w8, #0x1                   	// #1
    5974:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    5978:	str	w8, [x24, #40]
    597c:	str	x9, [x24, #48]
    5980:	tbz	w22, #31, 59c8 <mpc_acos@@Base+0x318>
    5984:	b	59d8 <mpc_acos@@Base+0x328>
    5988:	cmp	w8, #0x3
    598c:	mov	w9, #0x2                   	// #2
    5990:	csel	w9, w9, w8, eq  // eq = none
    5994:	cmp	w8, #0x2
    5998:	mov	w8, #0x3                   	// #3
    599c:	csel	w8, w8, w9, eq  // eq = none
    59a0:	b	5b24 <mpc_acos@@Base+0x474>
    59a4:	mov	x1, x20
    59a8:	bl	50e0 <mpfr_acosh@plt>
    59ac:	mov	w20, w0
    59b0:	mov	w8, #0x1                   	// #1
    59b4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    59b8:	mov	w21, wzr
    59bc:	str	w8, [x24, #8]
    59c0:	str	x9, [x24, #16]
    59c4:	tbnz	w22, #31, 59d8 <mpc_acos@@Base+0x328>
    59c8:	mov	x0, x24
    59cc:	mov	x1, x24
    59d0:	mov	w2, wzr
    59d4:	bl	4f60 <mpc_conj@plt>
    59d8:	cmp	w21, #0x0
    59dc:	mov	w8, #0x2                   	// #2
    59e0:	cset	w9, ne  // ne = any
    59e4:	csel	w8, w8, w9, lt  // lt = tstop
    59e8:	cmp	w20, #0x0
    59ec:	cset	w9, ne  // ne = any
    59f0:	lsl	w9, w9, #2
    59f4:	mov	w10, #0x8                   	// #8
    59f8:	csel	w9, w10, w9, lt  // lt = tstop
    59fc:	b	5cd4 <mpc_acos@@Base+0x624>
    5a00:	add	x0, sp, #0x30
    5a04:	bl	4aa0 <mpfr_init@plt>
    5a08:	ldr	x23, [x24]
    5a0c:	tst	w19, #0xf
    5a10:	and	w22, w19, #0xf
    5a14:	cinc	x21, x23, eq  // eq = none
    5a18:	mov	x0, x23
    5a1c:	bl	4d20 <mpc_ceil_log2@plt>
    5a20:	add	x23, x0, x23
    5a24:	add	x0, sp, #0x30
    5a28:	mov	x1, x23
    5a2c:	bl	4c80 <mpfr_set_prec@plt>
    5a30:	add	x0, sp, #0x30
    5a34:	mov	w1, #0x3                   	// #3
    5a38:	bl	4a80 <mpfr_const_pi@plt>
    5a3c:	add	x0, sp, #0x30
    5a40:	add	x1, sp, #0x30
    5a44:	mov	w2, #0x3                   	// #3
    5a48:	mov	w3, #0x3                   	// #3
    5a4c:	bl	49c0 <mpfr_mul_ui@plt>
    5a50:	sub	x1, x23, #0x1
    5a54:	add	x0, sp, #0x30
    5a58:	mov	w2, #0x3                   	// #3
    5a5c:	mov	w3, w22
    5a60:	mov	x4, x21
    5a64:	bl	5450 <mpfr_can_round@plt>
    5a68:	cbz	w0, 5a18 <mpc_acos@@Base+0x368>
    5a6c:	add	x1, sp, #0x30
    5a70:	mov	w2, #0x2                   	// #2
    5a74:	mov	x0, x24
    5a78:	mov	w3, w22
    5a7c:	bl	5320 <mpfr_div_2ui@plt>
    5a80:	mov	w21, w0
    5a84:	add	x0, sp, #0x30
    5a88:	bl	4d60 <mpfr_clear@plt>
    5a8c:	ldr	w8, [x20, #40]
    5a90:	add	x0, x24, #0x20
    5a94:	cmp	w8, #0x0
    5a98:	mov	w8, #0xffffffff            	// #-1
    5a9c:	cneg	w1, w8, lt  // lt = tstop
    5aa0:	bl	5120 <mpfr_set_inf@plt>
    5aa4:	cmp	w21, #0x0
    5aa8:	cset	w8, ne  // ne = any
    5aac:	mov	w9, #0x2                   	// #2
    5ab0:	csel	w0, w9, w8, lt  // lt = tstop
    5ab4:	b	5cd8 <mpc_acos@@Base+0x628>
    5ab8:	and	w1, w19, #0xf
    5abc:	mov	x0, x24
    5ac0:	bl	4a80 <mpfr_const_pi@plt>
    5ac4:	b	58d0 <mpc_acos@@Base+0x220>
    5ac8:	ldp	q1, q0, [x20]
    5acc:	add	x0, sp, #0x30
    5ad0:	add	x1, sp, #0x30
    5ad4:	mov	w2, wzr
    5ad8:	stp	q1, q0, [sp, #48]
    5adc:	bl	4b80 <mpfr_neg@plt>
    5ae0:	add	x0, x24, #0x20
    5ae4:	asr	w2, w19, #4
    5ae8:	tbnz	w22, #31, 5cf8 <mpc_acos@@Base+0x648>
    5aec:	cmp	w2, #0x3
    5af0:	mov	w8, #0x2                   	// #2
    5af4:	csel	w8, w8, w2, eq  // eq = none
    5af8:	cmp	w2, #0x2
    5afc:	mov	w9, #0x3                   	// #3
    5b00:	csel	w2, w9, w8, eq  // eq = none
    5b04:	add	x1, sp, #0x30
    5b08:	bl	50e0 <mpfr_acosh@plt>
    5b0c:	neg	w20, w0
    5b10:	b	5d04 <mpc_acos@@Base+0x654>
    5b14:	ldr	w8, [x20, #40]
    5b18:	cmp	w8, #0x0
    5b1c:	mov	w8, #0x2                   	// #2
    5b20:	cinc	w8, w8, gt
    5b24:	add	x0, sp, #0x10
    5b28:	mov	x1, x22
    5b2c:	lsl	w23, w8, #4
    5b30:	bl	5440 <mpfr_init2@plt>
    5b34:	add	x8, sp, #0x30
    5b38:	tst	w19, #0xf
    5b3c:	mov	x21, #0x2                   	// #2
    5b40:	mov	w28, wzr
    5b44:	movk	x21, #0x8000, lsl #48
    5b48:	add	x24, x8, #0x20
    5b4c:	cinc	x25, x22, eq  // eq = none
    5b50:	str	w19, [sp, #4]
    5b54:	cmp	w28, #0x1
    5b58:	b.hi	5b6c <mpc_acos@@Base+0x4bc>  // b.pmore
    5b5c:	mov	x0, x22
    5b60:	bl	4d20 <mpc_ceil_log2@plt>
    5b64:	add	x8, x0, #0x3
    5b68:	b	5b78 <mpc_acos@@Base+0x4c8>
    5b6c:	cmp	x22, #0x0
    5b70:	cinc	x8, x22, lt  // lt = tstop
    5b74:	asr	x8, x8, #1
    5b78:	add	x22, x8, x22
    5b7c:	add	x0, sp, #0x30
    5b80:	mov	x1, x22
    5b84:	bl	4c80 <mpfr_set_prec@plt>
    5b88:	add	x0, sp, #0x10
    5b8c:	mov	x1, x22
    5b90:	bl	4c80 <mpfr_set_prec@plt>
    5b94:	add	x0, sp, #0x10
    5b98:	mov	w1, #0x1                   	// #1
    5b9c:	mov	w2, wzr
    5ba0:	bl	53f0 <set_pi_over_2@plt>
    5ba4:	add	x0, sp, #0x30
    5ba8:	mov	x1, x20
    5bac:	mov	w2, w23
    5bb0:	bl	5480 <mpc_asin@plt>
    5bb4:	ldr	x8, [sp, #96]
    5bb8:	mov	w26, w0
    5bbc:	cmp	x8, x21
    5bc0:	b.gt	5bd8 <mpc_acos@@Base+0x528>
    5bc4:	cmp	x8, x27
    5bc8:	b.ne	5bd0 <mpc_acos@@Base+0x520>  // b.any
    5bcc:	bl	4b00 <mpfr_set_erangeflag@plt>
    5bd0:	mov	w19, wzr
    5bd4:	b	5bdc <mpc_acos@@Base+0x52c>
    5bd8:	ldr	w19, [sp, #88]
    5bdc:	ldr	x8, [x20, #48]
    5be0:	cmp	x8, x21
    5be4:	b.gt	5bfc <mpc_acos@@Base+0x54c>
    5be8:	cmp	x8, x27
    5bec:	b.ne	5bf4 <mpc_acos@@Base+0x544>  // b.any
    5bf0:	bl	4b00 <mpfr_set_erangeflag@plt>
    5bf4:	mov	w8, wzr
    5bf8:	b	5c00 <mpc_acos@@Base+0x550>
    5bfc:	ldr	w8, [x20, #40]
    5c00:	mul	w8, w8, w19
    5c04:	cmp	w8, #0x0
    5c08:	b.le	5d1c <mpc_acos@@Base+0x66c>
    5c0c:	ldr	x19, [sp, #64]
    5c10:	add	x0, sp, #0x30
    5c14:	add	x1, sp, #0x10
    5c18:	add	x2, sp, #0x30
    5c1c:	mov	w3, wzr
    5c20:	add	w28, w28, #0x1
    5c24:	bl	4a60 <mpfr_sub@plt>
    5c28:	ldr	x8, [sp, #64]
    5c2c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    5c30:	cmp	x8, x9
    5c34:	b.eq	5b54 <mpc_acos@@Base+0x4a4>  // b.none
    5c38:	cmp	x19, #0x2
    5c3c:	mov	w9, #0x2                   	// #2
    5c40:	csinc	x9, x9, x19, lt  // lt = tstop
    5c44:	sub	x8, x9, x8
    5c48:	mov	x0, x24
    5c4c:	mov	x1, x24
    5c50:	mov	w2, wzr
    5c54:	bic	x19, x8, x8, asr #63
    5c58:	bl	4b80 <mpfr_neg@plt>
    5c5c:	sub	x1, x22, x19
    5c60:	add	x0, sp, #0x30
    5c64:	mov	w3, #0x1                   	// #1
    5c68:	mov	w2, wzr
    5c6c:	mov	x4, x25
    5c70:	bl	5450 <mpfr_can_round@plt>
    5c74:	cbz	w0, 5b54 <mpc_acos@@Base+0x4a4>
    5c78:	ldr	x0, [sp, #8]
    5c7c:	ldr	w2, [sp, #4]
    5c80:	asr	w8, w26, #2
    5c84:	cmp	w8, #0x0
    5c88:	cset	w9, ne  // ne = any
    5c8c:	cmp	w8, #0x2
    5c90:	add	x1, sp, #0x30
    5c94:	csinv	w19, w9, wzr, ne  // ne = any
    5c98:	bl	5580 <mpc_set@plt>
    5c9c:	and	w20, w0, #0x3
    5ca0:	tst	w0, #0x3
    5ca4:	add	x0, sp, #0x30
    5ca8:	cset	w21, ne  // ne = any
    5cac:	bl	4a10 <mpc_clear@plt>
    5cb0:	add	x0, sp, #0x10
    5cb4:	bl	4d60 <mpfr_clear@plt>
    5cb8:	cmp	w20, #0x2
    5cbc:	csel	w8, w20, w21, eq  // eq = none
    5cc0:	cmp	w19, #0x0
    5cc4:	cset	w9, ne  // ne = any
    5cc8:	lsl	w9, w9, #2
    5ccc:	mov	w10, #0x8                   	// #8
    5cd0:	csel	w9, w10, w9, gt
    5cd4:	orr	w0, w8, w9
    5cd8:	ldp	x20, x19, [sp, #192]
    5cdc:	ldp	x22, x21, [sp, #176]
    5ce0:	ldp	x24, x23, [sp, #160]
    5ce4:	ldp	x26, x25, [sp, #144]
    5ce8:	ldp	x28, x27, [sp, #128]
    5cec:	ldp	x29, x30, [sp, #112]
    5cf0:	add	sp, sp, #0xd0
    5cf4:	ret
    5cf8:	add	x1, sp, #0x30
    5cfc:	bl	50e0 <mpfr_acosh@plt>
    5d00:	mov	w20, w0
    5d04:	and	w1, w19, #0xf
    5d08:	mov	x0, x24
    5d0c:	bl	4a80 <mpfr_const_pi@plt>
    5d10:	mov	w21, w0
    5d14:	tbz	w22, #31, 59c8 <mpc_acos@@Base+0x318>
    5d18:	b	59d8 <mpc_acos@@Base+0x328>
    5d1c:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    5d20:	ldr	x8, [x8, #4008]
    5d24:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    5d28:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    5d2c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    5d30:	ldr	x0, [x8]
    5d34:	add	x1, x1, #0x7c0
    5d38:	add	x2, x2, #0x7e1
    5d3c:	add	x4, x4, #0x7e8
    5d40:	mov	w3, #0xca                  	// #202
    5d44:	bl	55a0 <fprintf@plt>
    5d48:	bl	5000 <abort@plt>

0000000000005d4c <mpc_acosh@@Base>:
    5d4c:	sub	sp, sp, #0x90
    5d50:	stp	x29, x30, [sp, #96]
    5d54:	stp	x22, x21, [sp, #112]
    5d58:	stp	x20, x19, [sp, #128]
    5d5c:	ldr	x8, [x1, #16]
    5d60:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    5d64:	mov	w19, w2
    5d68:	mov	x21, x1
    5d6c:	cmp	x8, x9
    5d70:	mov	x20, x0
    5d74:	add	x29, sp, #0x60
    5d78:	b.ne	5da8 <mpc_acosh@@Base+0x5c>  // b.any
    5d7c:	ldr	x8, [x21, #48]
    5d80:	mov	x9, #0x2                   	// #2
    5d84:	movk	x9, #0x8000, lsl #48
    5d88:	cmp	x8, x9
    5d8c:	b.ne	5da8 <mpc_acosh@@Base+0x5c>  // b.any
    5d90:	mov	x0, x20
    5d94:	bl	4a40 <mpfr_set_nan@plt>
    5d98:	add	x0, x20, #0x20
    5d9c:	bl	4a40 <mpfr_set_nan@plt>
    5da0:	mov	w21, wzr
    5da4:	b	5ef4 <mpc_acosh@@Base+0x1a8>
    5da8:	ldr	x1, [x20, #32]
    5dac:	ldr	x2, [x20]
    5db0:	add	x0, sp, #0x20
    5db4:	add	x22, sp, #0x20
    5db8:	bl	53c0 <mpc_init3@plt>
    5dbc:	ldr	w9, [x21, #40]
    5dc0:	asr	w8, w19, #4
    5dc4:	tbnz	w9, #31, 5e58 <mpc_acosh@@Base+0x10c>
    5dc8:	and	w9, w19, #0xf
    5dcc:	mov	w10, #0x20                  	// #32
    5dd0:	lsl	w11, w9, #4
    5dd4:	cmp	w9, #0x3
    5dd8:	csel	w10, w10, w11, eq  // eq = none
    5ddc:	cmp	w9, #0x2
    5de0:	mov	w9, #0x30                  	// #48
    5de4:	csel	w9, w9, w10, eq  // eq = none
    5de8:	add	w2, w9, w8
    5dec:	add	x0, sp, #0x20
    5df0:	mov	x1, x21
    5df4:	bl	5070 <mpc_acos@plt>
    5df8:	ldp	q0, q1, [sp, #32]
    5dfc:	ldp	q2, q3, [sp, #64]
    5e00:	mov	w21, w0
    5e04:	add	x0, sp, #0x20
    5e08:	add	x1, sp, #0x20
    5e0c:	mov	w2, wzr
    5e10:	stp	q0, q1, [sp]
    5e14:	stp	q2, q3, [sp, #32]
    5e18:	stp	q0, q1, [sp, #64]
    5e1c:	bl	4b80 <mpfr_neg@plt>
    5e20:	asr	w8, w21, #2
    5e24:	cmp	w8, #0x0
    5e28:	mov	w9, #0x2                   	// #2
    5e2c:	cset	w11, ne  // ne = any
    5e30:	tst	w8, #0xfffffffd
    5e34:	csel	w8, w11, w9, eq  // eq = none
    5e38:	tst	w21, #0x3
    5e3c:	and	w10, w21, #0x3
    5e40:	cset	w9, ne  // ne = any
    5e44:	cmp	w10, #0x2
    5e48:	lsl	w9, w9, #2
    5e4c:	mov	w10, #0x8                   	// #8
    5e50:	csel	w9, w10, w9, eq  // eq = none
    5e54:	b	5ed8 <mpc_acosh@@Base+0x18c>
    5e58:	cmp	w8, #0x3
    5e5c:	mov	w9, #0x2                   	// #2
    5e60:	mov	w10, #0x3                   	// #3
    5e64:	csel	w9, w9, w8, eq  // eq = none
    5e68:	cmp	w8, #0x2
    5e6c:	csel	w8, w10, w9, eq  // eq = none
    5e70:	ubfiz	w9, w19, #4, #4
    5e74:	add	w2, w8, w9
    5e78:	add	x0, sp, #0x20
    5e7c:	mov	x1, x21
    5e80:	bl	5070 <mpc_acos@plt>
    5e84:	ldp	q0, q1, [sp, #32]
    5e88:	ldp	q2, q3, [sp, #64]
    5e8c:	mov	w21, w0
    5e90:	add	x0, x22, #0x20
    5e94:	mov	x1, x0
    5e98:	mov	w2, wzr
    5e9c:	stp	q0, q1, [sp]
    5ea0:	stp	q2, q3, [sp, #32]
    5ea4:	stp	q0, q1, [sp, #64]
    5ea8:	bl	4b80 <mpfr_neg@plt>
    5eac:	asr	w8, w21, #2
    5eb0:	cmp	w8, #0x0
    5eb4:	cset	w9, ne  // ne = any
    5eb8:	cmp	w8, #0x2
    5ebc:	csel	w8, w8, w9, eq  // eq = none
    5ec0:	tst	w21, #0x3
    5ec4:	cset	w9, ne  // ne = any
    5ec8:	tst	w21, #0x1
    5ecc:	lsl	w9, w9, #2
    5ed0:	mov	w10, #0x8                   	// #8
    5ed4:	csel	w9, w9, w10, eq  // eq = none
    5ed8:	add	x1, sp, #0x20
    5edc:	mov	x0, x20
    5ee0:	mov	w2, w19
    5ee4:	orr	w21, w8, w9
    5ee8:	bl	5580 <mpc_set@plt>
    5eec:	add	x0, sp, #0x20
    5ef0:	bl	4a10 <mpc_clear@plt>
    5ef4:	mov	w0, w21
    5ef8:	ldp	x20, x19, [sp, #128]
    5efc:	ldp	x22, x21, [sp, #112]
    5f00:	ldp	x29, x30, [sp, #96]
    5f04:	add	sp, sp, #0x90
    5f08:	ret

0000000000005f0c <mpc_add@@Base>:
    5f0c:	stp	x29, x30, [sp, #-64]!
    5f10:	stp	x20, x19, [sp, #48]
    5f14:	mov	w19, w3
    5f18:	and	w3, w3, #0xf
    5f1c:	str	x23, [sp, #16]
    5f20:	stp	x22, x21, [sp, #32]
    5f24:	mov	x29, sp
    5f28:	mov	x20, x2
    5f2c:	mov	x21, x1
    5f30:	mov	x22, x0
    5f34:	bl	4e60 <mpfr_add@plt>
    5f38:	mov	w23, w0
    5f3c:	add	x0, x22, #0x20
    5f40:	add	x1, x21, #0x20
    5f44:	add	x2, x20, #0x20
    5f48:	asr	w3, w19, #4
    5f4c:	bl	4e60 <mpfr_add@plt>
    5f50:	cmp	w23, #0x0
    5f54:	mov	w8, #0x2                   	// #2
    5f58:	cset	w9, ne  // ne = any
    5f5c:	csel	w8, w8, w9, lt  // lt = tstop
    5f60:	cmp	w0, #0x0
    5f64:	cset	w9, ne  // ne = any
    5f68:	ldp	x20, x19, [sp, #48]
    5f6c:	ldp	x22, x21, [sp, #32]
    5f70:	ldr	x23, [sp, #16]
    5f74:	lsl	w9, w9, #2
    5f78:	mov	w10, #0x8                   	// #8
    5f7c:	csel	w9, w10, w9, lt  // lt = tstop
    5f80:	orr	w0, w9, w8
    5f84:	ldp	x29, x30, [sp], #64
    5f88:	ret

0000000000005f8c <mpc_add_fr@@Base>:
    5f8c:	stp	x29, x30, [sp, #-48]!
    5f90:	stp	x20, x19, [sp, #32]
    5f94:	mov	w19, w3
    5f98:	and	w3, w3, #0xf
    5f9c:	stp	x22, x21, [sp, #16]
    5fa0:	mov	x29, sp
    5fa4:	mov	x20, x1
    5fa8:	mov	x21, x0
    5fac:	bl	4e60 <mpfr_add@plt>
    5fb0:	ldr	w3, [x20, #40]
    5fb4:	mov	w22, w0
    5fb8:	add	x0, x21, #0x20
    5fbc:	add	x1, x20, #0x20
    5fc0:	asr	w2, w19, #4
    5fc4:	bl	51d0 <mpfr_set4@plt>
    5fc8:	cmp	w22, #0x0
    5fcc:	mov	w8, #0x2                   	// #2
    5fd0:	cset	w9, ne  // ne = any
    5fd4:	csel	w8, w8, w9, lt  // lt = tstop
    5fd8:	cmp	w0, #0x0
    5fdc:	cset	w9, ne  // ne = any
    5fe0:	ldp	x20, x19, [sp, #32]
    5fe4:	ldp	x22, x21, [sp, #16]
    5fe8:	lsl	w9, w9, #2
    5fec:	mov	w10, #0x8                   	// #8
    5ff0:	csel	w9, w10, w9, lt  // lt = tstop
    5ff4:	orr	w0, w9, w8
    5ff8:	ldp	x29, x30, [sp], #48
    5ffc:	ret

0000000000006000 <mpc_add_si@@Base>:
    6000:	stp	x29, x30, [sp, #-48]!
    6004:	stp	x20, x19, [sp, #32]
    6008:	mov	w19, w3
    600c:	and	w3, w3, #0xf
    6010:	stp	x22, x21, [sp, #16]
    6014:	mov	x29, sp
    6018:	mov	x20, x1
    601c:	mov	x21, x0
    6020:	bl	5260 <mpfr_add_si@plt>
    6024:	ldr	w3, [x20, #40]
    6028:	mov	w22, w0
    602c:	add	x0, x21, #0x20
    6030:	add	x1, x20, #0x20
    6034:	asr	w2, w19, #4
    6038:	bl	51d0 <mpfr_set4@plt>
    603c:	cmp	w22, #0x0
    6040:	mov	w8, #0x2                   	// #2
    6044:	cset	w9, ne  // ne = any
    6048:	csel	w8, w8, w9, lt  // lt = tstop
    604c:	cmp	w0, #0x0
    6050:	cset	w9, ne  // ne = any
    6054:	ldp	x20, x19, [sp, #32]
    6058:	ldp	x22, x21, [sp, #16]
    605c:	lsl	w9, w9, #2
    6060:	mov	w10, #0x8                   	// #8
    6064:	csel	w9, w10, w9, lt  // lt = tstop
    6068:	orr	w0, w9, w8
    606c:	ldp	x29, x30, [sp], #48
    6070:	ret

0000000000006074 <mpc_add_ui@@Base>:
    6074:	stp	x29, x30, [sp, #-48]!
    6078:	stp	x20, x19, [sp, #32]
    607c:	mov	w19, w3
    6080:	and	w3, w3, #0xf
    6084:	stp	x22, x21, [sp, #16]
    6088:	mov	x29, sp
    608c:	mov	x20, x1
    6090:	mov	x21, x0
    6094:	bl	4ee0 <mpfr_add_ui@plt>
    6098:	ldr	w3, [x20, #40]
    609c:	mov	w22, w0
    60a0:	add	x0, x21, #0x20
    60a4:	add	x1, x20, #0x20
    60a8:	asr	w2, w19, #4
    60ac:	bl	51d0 <mpfr_set4@plt>
    60b0:	cmp	w22, #0x0
    60b4:	mov	w8, #0x2                   	// #2
    60b8:	cset	w9, ne  // ne = any
    60bc:	csel	w8, w8, w9, lt  // lt = tstop
    60c0:	cmp	w0, #0x0
    60c4:	cset	w9, ne  // ne = any
    60c8:	ldp	x20, x19, [sp, #32]
    60cc:	ldp	x22, x21, [sp, #16]
    60d0:	lsl	w9, w9, #2
    60d4:	mov	w10, #0x8                   	// #8
    60d8:	csel	w9, w10, w9, lt  // lt = tstop
    60dc:	orr	w0, w9, w8
    60e0:	ldp	x29, x30, [sp], #48
    60e4:	ret

00000000000060e8 <mpc_arg@@Base>:
    60e8:	mov	w3, w2
    60ec:	mov	x2, x1
    60f0:	add	x1, x1, #0x20
    60f4:	b	4ca0 <mpfr_atan2@plt>

00000000000060f8 <mpc_asin@@Base>:
    60f8:	sub	sp, sp, #0xf0
    60fc:	stp	x29, x30, [sp, #144]
    6100:	stp	x28, x27, [sp, #160]
    6104:	stp	x26, x25, [sp, #176]
    6108:	stp	x24, x23, [sp, #192]
    610c:	stp	x22, x21, [sp, #208]
    6110:	stp	x20, x19, [sp, #224]
    6114:	ldr	x8, [x1, #16]
    6118:	mov	x9, #0x2                   	// #2
    611c:	movk	x9, #0x8000, lsl #48
    6120:	mov	x20, x1
    6124:	cmp	x8, x9
    6128:	mov	x19, x0
    612c:	add	x29, sp, #0x90
    6130:	b.ne	6158 <mpc_asin@@Base+0x60>  // b.any
    6134:	ldr	x8, [x20, #48]
    6138:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    613c:	cmp	x8, x9
    6140:	b.eq	6170 <mpc_asin@@Base+0x78>  // b.none
    6144:	mov	x0, x19
    6148:	bl	4a40 <mpfr_set_nan@plt>
    614c:	add	x0, x19, #0x20
    6150:	bl	4a40 <mpfr_set_nan@plt>
    6154:	b	6190 <mpc_asin@@Base+0x98>
    6158:	ldr	x22, [x20, #48]
    615c:	cmp	x22, x9
    6160:	b.ne	61b8 <mpc_asin@@Base+0xc0>  // b.any
    6164:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    6168:	cmp	x8, x9
    616c:	b.ne	6214 <mpc_asin@@Base+0x11c>  // b.any
    6170:	mov	x0, x19
    6174:	bl	4a40 <mpfr_set_nan@plt>
    6178:	ldr	w8, [x20, #40]
    617c:	add	x0, x19, #0x20
    6180:	cmp	w8, #0x0
    6184:	mov	w8, #0x1                   	// #1
    6188:	cneg	w1, w8, lt  // lt = tstop
    618c:	bl	5120 <mpfr_set_inf@plt>
    6190:	mov	w19, wzr
    6194:	mov	w0, w19
    6198:	ldp	x20, x19, [sp, #224]
    619c:	ldp	x22, x21, [sp, #208]
    61a0:	ldp	x24, x23, [sp, #192]
    61a4:	ldp	x26, x25, [sp, #176]
    61a8:	ldp	x28, x27, [sp, #160]
    61ac:	ldp	x29, x30, [sp, #144]
    61b0:	add	sp, sp, #0xf0
    61b4:	ret
    61b8:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    61bc:	mov	w26, w2
    61c0:	cmp	x8, x9
    61c4:	b.eq	6238 <mpc_asin@@Base+0x140>  // b.none
    61c8:	cmp	x22, x9
    61cc:	b.eq	6238 <mpc_asin@@Base+0x140>  // b.none
    61d0:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    61d4:	cmp	x22, x9
    61d8:	b.ne	62a8 <mpc_asin@@Base+0x1b0>  // b.any
    61dc:	ldr	w23, [x20, #40]
    61e0:	mov	w1, #0x1                   	// #1
    61e4:	mov	x0, x20
    61e8:	mov	x2, xzr
    61ec:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    61f0:	cmp	w0, #0x1
    61f4:	b.lt	6660 <mpc_asin@@Base+0x568>  // b.tstop
    61f8:	add	x0, x19, #0x20
    61fc:	asr	w2, w26, #4
    6200:	tbnz	w23, #31, 66c0 <mpc_asin@@Base+0x5c8>
    6204:	mov	x1, x20
    6208:	bl	50e0 <mpfr_acosh@plt>
    620c:	mov	w22, w0
    6210:	b	66e4 <mpc_asin@@Base+0x5ec>
    6214:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    6218:	cmp	x8, x9
    621c:	b.ne	6144 <mpc_asin@@Base+0x4c>  // b.any
    6220:	ldr	w3, [x20, #8]
    6224:	mov	x0, x19
    6228:	mov	x1, x20
    622c:	mov	w2, wzr
    6230:	bl	51d0 <mpfr_set4@plt>
    6234:	b	614c <mpc_asin@@Base+0x54>
    6238:	ldr	w10, [x20, #8]
    623c:	mov	w23, #0x1                   	// #1
    6240:	cmp	w10, #0x0
    6244:	cneg	w1, w23, lt  // lt = tstop
    6248:	cmp	x8, x9
    624c:	b.ne	6304 <mpc_asin@@Base+0x20c>  // b.any
    6250:	and	w2, w26, #0xf
    6254:	mov	x0, x19
    6258:	bl	53f0 <set_pi_over_2@plt>
    625c:	ldr	w8, [x20, #40]
    6260:	mov	w21, w0
    6264:	add	x0, x19, #0x20
    6268:	cmp	w8, #0x0
    626c:	cneg	w1, w23, lt  // lt = tstop
    6270:	bl	5120 <mpfr_set_inf@plt>
    6274:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    6278:	cmp	x22, x8
    627c:	b.ne	6294 <mpc_asin@@Base+0x19c>  // b.any
    6280:	mov	w2, #0x1                   	// #1
    6284:	mov	x0, x19
    6288:	mov	x1, x19
    628c:	mov	w3, wzr
    6290:	bl	5320 <mpfr_div_2ui@plt>
    6294:	cmp	w21, #0x0
    6298:	cset	w8, ne  // ne = any
    629c:	mov	w9, #0x2                   	// #2
    62a0:	csel	w19, w9, w8, lt  // lt = tstop
    62a4:	b	6194 <mpc_asin@@Base+0x9c>
    62a8:	cmp	x8, x9
    62ac:	add	x22, x20, #0x20
    62b0:	b.ne	6320 <mpc_asin@@Base+0x228>  // b.any
    62b4:	ldr	w8, [x20, #8]
    62b8:	mov	w9, #0x1                   	// #1
    62bc:	str	w9, [x19, #8]
    62c0:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    62c4:	str	x9, [x19, #16]
    62c8:	tbz	w8, #31, 62dc <mpc_asin@@Base+0x1e4>
    62cc:	mov	x0, x19
    62d0:	mov	x1, x19
    62d4:	mov	w2, wzr
    62d8:	bl	4b80 <mpfr_neg@plt>
    62dc:	add	x0, x19, #0x20
    62e0:	asr	w2, w26, #4
    62e4:	mov	x1, x22
    62e8:	bl	4dc0 <mpfr_asinh@plt>
    62ec:	cmp	w0, #0x0
    62f0:	cset	w8, ne  // ne = any
    62f4:	lsl	w8, w8, #2
    62f8:	mov	w9, #0x8                   	// #8
    62fc:	csel	w19, w9, w8, lt  // lt = tstop
    6300:	b	6194 <mpc_asin@@Base+0x9c>
    6304:	mov	x0, x19
    6308:	bl	4d10 <mpfr_set_zero@plt>
    630c:	ldr	w8, [x20, #40]
    6310:	add	x0, x19, #0x20
    6314:	cmp	w8, #0x0
    6318:	cneg	w1, w23, lt  // lt = tstop
    631c:	b	618c <mpc_asin@@Base+0x94>
    6320:	ldr	x21, [x19]
    6324:	ldr	x25, [x19, #32]
    6328:	add	x0, sp, #0x30
    632c:	str	x19, [sp, #24]
    6330:	add	x23, sp, #0x30
    6334:	cmp	x21, x25
    6338:	csel	x24, x25, x21, lt  // lt = tstop
    633c:	mov	x1, x24
    6340:	bl	4cf0 <mpc_init2@plt>
    6344:	tst	w26, #0xf
    6348:	cset	w8, eq  // eq = none
    634c:	str	x8, [sp, #16]
    6350:	cinc	x8, x21, eq  // eq = none
    6354:	cmp	w26, #0x10
    6358:	str	x8, [sp, #40]
    635c:	cset	w8, cc  // cc = lo, ul, last
    6360:	mov	w28, wzr
    6364:	add	x23, x23, #0x20
    6368:	str	w26, [sp, #4]
    636c:	str	x8, [sp, #8]
    6370:	cinc	x8, x25, cc  // cc = lo, ul, last
    6374:	mov	w26, #0x1                   	// #1
    6378:	str	x8, [sp, #32]
    637c:	cmp	w28, #0x1
    6380:	b.hi	6394 <mpc_asin@@Base+0x29c>  // b.pmore
    6384:	mov	x0, x24
    6388:	bl	4d20 <mpc_ceil_log2@plt>
    638c:	add	x8, x0, #0x3
    6390:	b	63a0 <mpc_asin@@Base+0x2a8>
    6394:	cmp	x24, #0x0
    6398:	cinc	x8, x24, lt  // lt = tstop
    639c:	asr	x8, x8, #1
    63a0:	add	x24, x8, x24
    63a4:	add	x0, sp, #0x30
    63a8:	mov	x1, x24
    63ac:	bl	4c80 <mpfr_set_prec@plt>
    63b0:	mov	x0, x23
    63b4:	mov	x1, x24
    63b8:	bl	4c80 <mpfr_set_prec@plt>
    63bc:	cbnz	w28, 64a0 <mpc_asin@@Base+0x3a8>
    63c0:	ldr	x8, [x20, #48]
    63c4:	tbz	x8, #63, 64a0 <mpc_asin@@Base+0x3a8>
    63c8:	ldr	x9, [sp, #48]
    63cc:	cmp	x8, #0x0
    63d0:	cinc	x8, x8, lt  // lt = tstop
    63d4:	neg	x8, x8, asr #1
    63d8:	cmp	x8, x9
    63dc:	b.lt	64a0 <mpc_asin@@Base+0x3a8>  // b.tstop
    63e0:	add	x0, sp, #0x30
    63e4:	mov	w1, wzr
    63e8:	bl	4a80 <mpfr_const_pi@plt>
    63ec:	add	x0, sp, #0x30
    63f0:	add	x1, sp, #0x30
    63f4:	mov	w2, #0x1                   	// #1
    63f8:	mov	w3, wzr
    63fc:	bl	5320 <mpfr_div_2ui@plt>
    6400:	ldp	x9, x8, [sp, #16]
    6404:	ldr	x1, [sp, #48]
    6408:	add	x0, sp, #0x30
    640c:	mov	w3, #0x1                   	// #1
    6410:	ldr	x8, [x8]
    6414:	mov	w2, wzr
    6418:	add	x4, x8, x9
    641c:	bl	5450 <mpfr_can_round@plt>
    6420:	cbz	w0, 64a0 <mpc_asin@@Base+0x3a8>
    6424:	ldp	q1, q0, [x22]
    6428:	stp	q1, q0, [x29, #-32]
    642c:	ldr	w8, [x20, #40]
    6430:	tbz	w8, #31, 6444 <mpc_asin@@Base+0x34c>
    6434:	sub	x0, x29, #0x20
    6438:	sub	x1, x29, #0x20
    643c:	mov	w2, wzr
    6440:	bl	4b80 <mpfr_neg@plt>
    6444:	sub	x1, x29, #0x20
    6448:	mov	x0, x23
    644c:	mov	w2, wzr
    6450:	bl	5350 <mpfr_sqrt@plt>
    6454:	ldr	w8, [x20, #40]
    6458:	mov	w27, w0
    645c:	tbz	w8, #31, 6470 <mpc_asin@@Base+0x378>
    6460:	mov	x0, x23
    6464:	mov	x1, x23
    6468:	mov	w2, wzr
    646c:	bl	4b80 <mpfr_neg@plt>
    6470:	cbz	w27, 677c <mpc_asin@@Base+0x684>
    6474:	ldr	x8, [sp, #80]
    6478:	ldr	x9, [sp, #24]
    647c:	mov	w2, #0x4                   	// #4
    6480:	mov	w3, #0x1                   	// #1
    6484:	sub	x1, x8, #0x1
    6488:	ldr	x9, [x9, #32]
    648c:	ldr	x8, [sp, #8]
    6490:	mov	x0, x23
    6494:	add	x4, x9, x8
    6498:	bl	5450 <mpfr_can_round@plt>
    649c:	cbnz	w0, 6640 <mpc_asin@@Base+0x548>
    64a0:	add	x0, sp, #0x30
    64a4:	mov	x1, x20
    64a8:	mov	w2, wzr
    64ac:	add	w28, w28, #0x1
    64b0:	bl	4f30 <mpc_sqr@plt>
    64b4:	ldr	x21, [sp, #64]
    64b8:	add	x0, sp, #0x30
    64bc:	add	x2, sp, #0x30
    64c0:	mov	w1, #0x1                   	// #1
    64c4:	mov	w3, wzr
    64c8:	bl	5430 <mpfr_ui_sub@plt>
    64cc:	mov	x0, x23
    64d0:	mov	x1, x23
    64d4:	mov	w2, wzr
    64d8:	bl	4b80 <mpfr_neg@plt>
    64dc:	ldr	x8, [sp, #64]
    64e0:	ldr	x9, [sp, #96]
    64e4:	mvn	x10, x24
    64e8:	add	x0, sp, #0x30
    64ec:	cmp	x21, x8
    64f0:	csel	x11, x21, x8, gt
    64f4:	add	x10, x9, x10
    64f8:	sub	x11, x11, x24
    64fc:	cmp	x11, x10
    6500:	csel	x25, x10, x11, lt  // lt = tstop
    6504:	cmp	x8, x9
    6508:	add	x1, sp, #0x30
    650c:	mov	w2, wzr
    6510:	csel	x19, x9, x8, lt  // lt = tstop
    6514:	bl	4b40 <mpc_sqrt@plt>
    6518:	mov	w8, #0x1                   	// #1
    651c:	ldr	x27, [sp, #64]
    6520:	ldr	x21, [sp, #96]
    6524:	bfi	x8, x25, #1, #63
    6528:	sub	x8, x8, x19
    652c:	cmp	x8, #0x0
    6530:	cinc	x8, x8, lt  // lt = tstop
    6534:	cmp	x27, x21
    6538:	asr	x8, x8, #1
    653c:	csel	x9, x21, x27, gt
    6540:	sub	x8, x8, x9
    6544:	add	x8, x8, x24
    6548:	cmp	x8, #0x1
    654c:	add	x0, sp, #0x30
    6550:	add	x1, sp, #0x30
    6554:	mov	x2, x22
    6558:	mov	w3, wzr
    655c:	csinc	x25, x26, x8, lt  // lt = tstop
    6560:	bl	4a60 <mpfr_sub@plt>
    6564:	mov	x0, x23
    6568:	mov	x1, x23
    656c:	mov	x2, x20
    6570:	mov	w3, wzr
    6574:	bl	4e60 <mpfr_add@plt>
    6578:	add	x0, sp, #0x30
    657c:	bl	51f0 <mpfr_sgn@plt>
    6580:	cbz	w0, 637c <mpc_asin@@Base+0x284>
    6584:	mov	x0, x23
    6588:	bl	51f0 <mpfr_sgn@plt>
    658c:	cbz	w0, 637c <mpc_asin@@Base+0x284>
    6590:	ldr	x8, [sp, #64]
    6594:	ldr	x9, [sp, #96]
    6598:	add	x0, sp, #0x30
    659c:	add	x1, sp, #0x30
    65a0:	sub	x8, x27, x8
    65a4:	sub	x9, x21, x9
    65a8:	cmp	x8, x9
    65ac:	csel	x8, x9, x8, lt  // lt = tstop
    65b0:	add	x8, x8, x25
    65b4:	cmp	x8, #0x1
    65b8:	mov	w2, wzr
    65bc:	csinc	x19, x26, x8, lt  // lt = tstop
    65c0:	bl	4db0 <mpc_log@plt>
    65c4:	ldr	x8, [sp, #64]
    65c8:	ldr	x9, [sp, #96]
    65cc:	add	x0, sp, #0x30
    65d0:	mov	x1, x23
    65d4:	cmp	x8, x9
    65d8:	csel	x8, x9, x8, gt
    65dc:	sub	x8, x19, x8
    65e0:	add	x9, x8, #0x1
    65e4:	add	x8, x8, #0x2
    65e8:	cmp	x9, #0x1
    65ec:	csinc	x19, x8, xzr, ge  // ge = tcont
    65f0:	bl	5090 <mpfr_swap@plt>
    65f4:	mov	x0, x23
    65f8:	mov	x1, x23
    65fc:	mov	w2, wzr
    6600:	bl	4b80 <mpfr_neg@plt>
    6604:	ldr	x4, [sp, #40]
    6608:	sub	x27, x24, x19
    660c:	add	x0, sp, #0x30
    6610:	mov	w3, #0x1                   	// #1
    6614:	mov	x1, x27
    6618:	mov	w2, wzr
    661c:	bl	5450 <mpfr_can_round@plt>
    6620:	cbz	w0, 637c <mpc_asin@@Base+0x284>
    6624:	ldr	x4, [sp, #32]
    6628:	mov	w3, #0x1                   	// #1
    662c:	mov	x0, x23
    6630:	mov	x1, x27
    6634:	mov	w2, wzr
    6638:	bl	5450 <mpfr_can_round@plt>
    663c:	cbz	w0, 637c <mpc_asin@@Base+0x284>
    6640:	ldr	x0, [sp, #24]
    6644:	ldr	w2, [sp, #4]
    6648:	add	x1, sp, #0x30
    664c:	bl	5580 <mpc_set@plt>
    6650:	mov	w19, w0
    6654:	add	x0, sp, #0x30
    6658:	bl	4a10 <mpc_clear@plt>
    665c:	b	6194 <mpc_asin@@Base+0x9c>
    6660:	mov	x1, #0xffffffffffffffff    	// #-1
    6664:	mov	x0, x20
    6668:	mov	x2, xzr
    666c:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    6670:	tbnz	w0, #31, 6750 <mpc_asin@@Base+0x658>
    6674:	mov	w8, #0x1                   	// #1
    6678:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    667c:	str	w8, [x19, #40]
    6680:	str	x9, [x19, #48]
    6684:	tbz	w23, #31, 6698 <mpc_asin@@Base+0x5a0>
    6688:	add	x0, x19, #0x20
    668c:	mov	x1, x0
    6690:	mov	w2, wzr
    6694:	bl	4b80 <mpfr_neg@plt>
    6698:	and	w2, w26, #0xf
    669c:	mov	x0, x19
    66a0:	mov	x1, x20
    66a4:	bl	4e40 <mpfr_asin@plt>
    66a8:	cmp	w0, #0x0
    66ac:	cset	w8, ne  // ne = any
    66b0:	mov	w10, #0x2                   	// #2
    66b4:	mov	w9, wzr
    66b8:	csel	w8, w10, w8, lt  // lt = tstop
    66bc:	b	6738 <mpc_asin@@Base+0x640>
    66c0:	cmp	w2, #0x3
    66c4:	mov	w8, #0x2                   	// #2
    66c8:	csel	w8, w8, w2, eq  // eq = none
    66cc:	cmp	w2, #0x2
    66d0:	mov	w9, #0x3                   	// #3
    66d4:	csel	w2, w9, w8, eq  // eq = none
    66d8:	mov	x1, x20
    66dc:	bl	50e0 <mpfr_acosh@plt>
    66e0:	neg	w22, w0
    66e4:	ldr	w8, [x20, #8]
    66e8:	mov	w9, #0x1                   	// #1
    66ec:	and	w2, w26, #0xf
    66f0:	mov	x0, x19
    66f4:	cmp	w8, #0x0
    66f8:	cneg	w1, w9, lt  // lt = tstop
    66fc:	bl	53f0 <set_pi_over_2@plt>
    6700:	mov	w20, w0
    6704:	tbz	w23, #31, 6718 <mpc_asin@@Base+0x620>
    6708:	mov	x0, x19
    670c:	mov	x1, x19
    6710:	mov	w2, wzr
    6714:	bl	4f60 <mpc_conj@plt>
    6718:	cmp	w20, #0x0
    671c:	mov	w8, #0x2                   	// #2
    6720:	cset	w9, ne  // ne = any
    6724:	csel	w8, w8, w9, lt  // lt = tstop
    6728:	lsr	w9, w22, #31
    672c:	cbz	w22, 6738 <mpc_asin@@Base+0x640>
    6730:	mov	w10, #0x4                   	// #4
    6734:	b	673c <mpc_asin@@Base+0x644>
    6738:	mov	w10, wzr
    673c:	cmp	w9, #0x0
    6740:	mov	w9, #0x8                   	// #8
    6744:	csel	w9, w9, w10, ne  // ne = any
    6748:	orr	w19, w9, w8
    674c:	b	6194 <mpc_asin@@Base+0x9c>
    6750:	ldp	q1, q0, [x20]
    6754:	add	x0, sp, #0x30
    6758:	add	x1, sp, #0x30
    675c:	mov	w2, wzr
    6760:	stp	q1, q0, [sp, #48]
    6764:	bl	4b80 <mpfr_neg@plt>
    6768:	add	x0, x19, #0x20
    676c:	asr	w2, w26, #4
    6770:	tbnz	w23, #31, 6790 <mpc_asin@@Base+0x698>
    6774:	add	x1, sp, #0x30
    6778:	b	6208 <mpc_asin@@Base+0x110>
    677c:	ldr	w8, [x20, #40]
    6780:	tbnz	w8, #31, 67b0 <mpc_asin@@Base+0x6b8>
    6784:	mov	x0, x23
    6788:	bl	4e00 <mpfr_nextabove@plt>
    678c:	b	6640 <mpc_asin@@Base+0x548>
    6790:	cmp	w2, #0x3
    6794:	mov	w8, #0x2                   	// #2
    6798:	csel	w8, w8, w2, eq  // eq = none
    679c:	cmp	w2, #0x2
    67a0:	mov	w9, #0x3                   	// #3
    67a4:	csel	w2, w9, w8, eq  // eq = none
    67a8:	add	x1, sp, #0x30
    67ac:	b	66dc <mpc_asin@@Base+0x5e4>
    67b0:	mov	x0, x23
    67b4:	bl	4bb0 <mpfr_nextbelow@plt>
    67b8:	b	6640 <mpc_asin@@Base+0x548>

00000000000067bc <mpc_asinh@@Base>:
    67bc:	sub	sp, sp, #0xd0
    67c0:	stp	x29, x30, [sp, #160]
    67c4:	str	x21, [sp, #176]
    67c8:	stp	x20, x19, [sp, #192]
    67cc:	ldp	q1, q0, [x1, #32]
    67d0:	add	x29, sp, #0xa0
    67d4:	mov	w19, w2
    67d8:	mov	x20, x0
    67dc:	stp	q1, q0, [x29, #-64]
    67e0:	ldp	q1, q0, [x1]
    67e4:	sub	x0, x29, #0x40
    67e8:	sub	x1, x29, #0x40
    67ec:	mov	w2, wzr
    67f0:	stp	q1, q0, [x29, #-32]
    67f4:	bl	4b80 <mpfr_neg@plt>
    67f8:	ldr	x1, [x20, #32]
    67fc:	ldr	x2, [x20]
    6800:	add	x0, sp, #0x20
    6804:	add	x21, sp, #0x20
    6808:	bl	53c0 <mpc_init3@plt>
    680c:	asr	w8, w19, #4
    6810:	mov	w9, #0x2                   	// #2
    6814:	cmp	w8, #0x3
    6818:	mov	w10, #0x3                   	// #3
    681c:	csel	w9, w9, w8, eq  // eq = none
    6820:	cmp	w8, #0x2
    6824:	csel	w8, w10, w9, eq  // eq = none
    6828:	ubfiz	w9, w19, #4, #4
    682c:	add	w2, w8, w9
    6830:	add	x0, sp, #0x20
    6834:	sub	x1, x29, #0x40
    6838:	bl	5480 <mpc_asin@plt>
    683c:	ldp	q0, q1, [sp, #32]
    6840:	ldp	q2, q3, [sp, #64]
    6844:	mov	w19, w0
    6848:	add	x0, x21, #0x20
    684c:	mov	x1, x0
    6850:	mov	w2, wzr
    6854:	stp	q0, q1, [sp]
    6858:	stp	q2, q3, [sp, #32]
    685c:	stp	q0, q1, [sp, #64]
    6860:	bl	4b80 <mpfr_neg@plt>
    6864:	add	x1, sp, #0x20
    6868:	mov	x0, x20
    686c:	mov	w2, wzr
    6870:	bl	5580 <mpc_set@plt>
    6874:	add	x0, sp, #0x20
    6878:	bl	4a10 <mpc_clear@plt>
    687c:	asr	w8, w19, #2
    6880:	cmp	w8, #0x0
    6884:	cset	w9, ne  // ne = any
    6888:	cmp	w8, #0x2
    688c:	csel	w8, w8, w9, eq  // eq = none
    6890:	tst	w19, #0x3
    6894:	cset	w9, ne  // ne = any
    6898:	tst	w19, #0x1
    689c:	ldp	x20, x19, [sp, #192]
    68a0:	ldr	x21, [sp, #176]
    68a4:	ldp	x29, x30, [sp, #160]
    68a8:	lsl	w9, w9, #2
    68ac:	mov	w10, #0x8                   	// #8
    68b0:	csel	w9, w9, w10, eq  // eq = none
    68b4:	orr	w0, w8, w9
    68b8:	add	sp, sp, #0xd0
    68bc:	ret

00000000000068c0 <set_pi_over_2@@Base>:
    68c0:	stp	x29, x30, [sp, #-48]!
    68c4:	stp	x20, x19, [sp, #32]
    68c8:	mov	w20, w1
    68cc:	mov	x19, x0
    68d0:	str	x21, [sp, #16]
    68d4:	mov	x29, sp
    68d8:	tbz	w1, #31, 68f8 <set_pi_over_2@@Base+0x38>
    68dc:	cmp	w2, #0x2
    68e0:	b.ne	68ec <set_pi_over_2@@Base+0x2c>  // b.any
    68e4:	mov	w2, #0x3                   	// #3
    68e8:	b	68f8 <set_pi_over_2@@Base+0x38>
    68ec:	cmp	w2, #0x3
    68f0:	mov	w8, #0x2                   	// #2
    68f4:	csel	w2, w8, w2, eq  // eq = none
    68f8:	mov	x0, x19
    68fc:	mov	w1, w2
    6900:	bl	4a80 <mpfr_const_pi@plt>
    6904:	mov	w21, w0
    6908:	mov	w2, #0x1                   	// #1
    690c:	mov	x0, x19
    6910:	mov	x1, x19
    6914:	mov	w3, wzr
    6918:	bl	5320 <mpfr_div_2ui@plt>
    691c:	tbz	w20, #31, 6934 <set_pi_over_2@@Base+0x74>
    6920:	mov	x0, x19
    6924:	mov	x1, x19
    6928:	mov	w2, wzr
    692c:	neg	w21, w21
    6930:	bl	4b80 <mpfr_neg@plt>
    6934:	mov	w0, w21
    6938:	ldp	x20, x19, [sp, #32]
    693c:	ldr	x21, [sp, #16]
    6940:	ldp	x29, x30, [sp], #48
    6944:	ret

0000000000006948 <mpc_atan@@Base>:
    6948:	sub	sp, sp, #0x130
    694c:	stp	x29, x30, [sp, #208]
    6950:	stp	x28, x27, [sp, #224]
    6954:	stp	x26, x25, [sp, #240]
    6958:	stp	x24, x23, [sp, #256]
    695c:	stp	x22, x21, [sp, #272]
    6960:	stp	x20, x19, [sp, #288]
    6964:	ldr	x8, [x1, #16]
    6968:	ldr	w24, [x1, #40]
    696c:	mov	x27, #0x2                   	// #2
    6970:	movk	x27, #0x8000, lsl #48
    6974:	mov	x22, x1
    6978:	cmp	x8, x27
    697c:	mov	x19, x0
    6980:	add	x29, sp, #0xd0
    6984:	b.ne	69c0 <mpc_atan@@Base+0x78>  // b.any
    6988:	mov	x0, x19
    698c:	bl	4a40 <mpfr_set_nan@plt>
    6990:	ldr	x8, [x22, #48]
    6994:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    6998:	orr	x8, x8, #0x2
    699c:	cmp	x8, x9
    69a0:	b.ne	6a60 <mpc_atan@@Base+0x118>  // b.any
    69a4:	mov	w8, #0x1                   	// #1
    69a8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    69ac:	str	w8, [x19, #40]
    69b0:	str	x9, [x19, #48]
    69b4:	tbnz	w24, #31, 6a70 <mpc_atan@@Base+0x128>
    69b8:	mov	w19, wzr
    69bc:	b	6c30 <mpc_atan@@Base+0x2e8>
    69c0:	ldr	x9, [x22, #48]
    69c4:	ldr	w28, [x22, #8]
    69c8:	mov	w25, w2
    69cc:	cmp	x9, x27
    69d0:	b.ne	69f8 <mpc_atan@@Base+0xb0>  // b.any
    69d4:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    69d8:	cmp	x8, x9
    69dc:	b.ne	6a58 <mpc_atan@@Base+0x110>  // b.any
    69e0:	and	w1, w25, #0xf
    69e4:	tbz	w28, #31, 6b5c <mpc_atan@@Base+0x214>
    69e8:	cmp	w1, #0x2
    69ec:	b.ne	6b50 <mpc_atan@@Base+0x208>  // b.any
    69f0:	mov	w1, #0x3                   	// #3
    69f4:	b	6b5c <mpc_atan@@Base+0x214>
    69f8:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    69fc:	cmp	x8, x10
    6a00:	b.eq	6a40 <mpc_atan@@Base+0xf8>  // b.none
    6a04:	cmp	x9, x10
    6a08:	b.eq	6a40 <mpc_atan@@Base+0xf8>  // b.none
    6a0c:	mov	x21, #0x8000000000000001    	// #-9223372036854775807
    6a10:	cmp	x9, x21
    6a14:	b.ne	6a88 <mpc_atan@@Base+0x140>  // b.any
    6a18:	and	w2, w25, #0xf
    6a1c:	mov	x0, x19
    6a20:	mov	x1, x22
    6a24:	bl	51b0 <mpfr_atan@plt>
    6a28:	mov	w20, w0
    6a2c:	mov	w8, #0x1                   	// #1
    6a30:	str	w8, [x19, #40]
    6a34:	str	x21, [x19, #48]
    6a38:	tbz	w24, #31, 6c20 <mpc_atan@@Base+0x2d8>
    6a3c:	b	6c10 <mpc_atan@@Base+0x2c8>
    6a40:	and	w1, w25, #0xf
    6a44:	tbz	w28, #31, 6bc4 <mpc_atan@@Base+0x27c>
    6a48:	cmp	w1, #0x2
    6a4c:	b.ne	6bb8 <mpc_atan@@Base+0x270>  // b.any
    6a50:	mov	w1, #0x3                   	// #3
    6a54:	b	6bc4 <mpc_atan@@Base+0x27c>
    6a58:	mov	x0, x19
    6a5c:	bl	4a40 <mpfr_set_nan@plt>
    6a60:	add	x0, x19, #0x20
    6a64:	bl	4a40 <mpfr_set_nan@plt>
    6a68:	mov	w19, wzr
    6a6c:	b	6c30 <mpc_atan@@Base+0x2e8>
    6a70:	mov	x0, x19
    6a74:	mov	x1, x19
    6a78:	mov	w2, wzr
    6a7c:	bl	4f60 <mpc_conj@plt>
    6a80:	mov	w19, wzr
    6a84:	b	6c30 <mpc_atan@@Base+0x2e8>
    6a88:	cmp	x8, x21
    6a8c:	add	x21, x22, #0x20
    6a90:	b.ne	6aac <mpc_atan@@Base+0x164>  // b.any
    6a94:	tbnz	w24, #31, 6fc8 <mpc_atan@@Base+0x680>
    6a98:	mov	w1, #0x1                   	// #1
    6a9c:	mov	x0, x21
    6aa0:	mov	x2, xzr
    6aa4:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    6aa8:	b	6fdc <mpc_atan@@Base+0x694>
    6aac:	sub	x1, x29, #0x28
    6ab0:	sub	x2, x29, #0x48
    6ab4:	add	x3, sp, #0x68
    6ab8:	add	x4, sp, #0x48
    6abc:	mov	w0, #0x1                   	// #1
    6ac0:	mov	x5, xzr
    6ac4:	bl	5540 <mpfr_inits2@plt>
    6ac8:	ldp	q1, q0, [x22]
    6acc:	add	x0, sp, #0x20
    6ad0:	add	x1, sp, #0x20
    6ad4:	mov	w2, wzr
    6ad8:	stp	q1, q0, [sp, #32]
    6adc:	bl	4b80 <mpfr_neg@plt>
    6ae0:	ldr	x8, [x22, #48]
    6ae4:	ldr	x20, [x19]
    6ae8:	ldr	x26, [x22, #16]
    6aec:	mov	x9, #0x2                   	// #2
    6af0:	neg	x10, x8
    6af4:	cmp	x20, x10
    6af8:	ccmp	x8, #0x0, #0x0, le
    6afc:	movk	x9, #0x8000, lsl #48
    6b00:	csel	x8, xzr, x8, gt
    6b04:	cmp	x26, x9
    6b08:	sub	x23, x20, x8
    6b0c:	b.gt	6c54 <mpc_atan@@Base+0x30c>
    6b10:	cmp	x26, x27
    6b14:	b.ne	6b3c <mpc_atan@@Base+0x1f4>  // b.any
    6b18:	bl	4b00 <mpfr_set_erangeflag@plt>
    6b1c:	ldr	x8, [x22, #16]
    6b20:	mov	x9, #0x2                   	// #2
    6b24:	movk	x9, #0x8000, lsl #48
    6b28:	cmp	x8, x9
    6b2c:	b.gt	71ac <mpc_atan@@Base+0x864>
    6b30:	cmp	x8, x27
    6b34:	b.ne	6b3c <mpc_atan@@Base+0x1f4>  // b.any
    6b38:	bl	4b00 <mpfr_set_erangeflag@plt>
    6b3c:	mov	w8, #0x3                   	// #3
    6b40:	str	w8, [sp, #16]
    6b44:	mov	w8, #0x2                   	// #2
    6b48:	str	w8, [sp, #28]
    6b4c:	b	6c7c <mpc_atan@@Base+0x334>
    6b50:	cmp	w1, #0x3
    6b54:	mov	w8, #0x2                   	// #2
    6b58:	csel	w1, w8, w1, eq  // eq = none
    6b5c:	mov	x0, x19
    6b60:	bl	4a80 <mpfr_const_pi@plt>
    6b64:	mov	w20, w0
    6b68:	mov	w2, #0x1                   	// #1
    6b6c:	mov	x0, x19
    6b70:	mov	x1, x19
    6b74:	mov	w3, wzr
    6b78:	mov	w21, #0x1                   	// #1
    6b7c:	bl	5320 <mpfr_div_2ui@plt>
    6b80:	tbz	w28, #31, 6b98 <mpc_atan@@Base+0x250>
    6b84:	mov	x0, x19
    6b88:	mov	x1, x19
    6b8c:	mov	w2, wzr
    6b90:	neg	w20, w20
    6b94:	bl	4b80 <mpfr_neg@plt>
    6b98:	cmp	w20, #0x0
    6b9c:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    6ba0:	cset	w9, ne  // ne = any
    6ba4:	mov	w10, #0x2                   	// #2
    6ba8:	str	w21, [x19, #40]
    6bac:	csel	w0, w10, w9, lt  // lt = tstop
    6bb0:	str	x8, [x19, #48]
    6bb4:	b	6c34 <mpc_atan@@Base+0x2ec>
    6bb8:	cmp	w1, #0x3
    6bbc:	mov	w8, #0x2                   	// #2
    6bc0:	csel	w1, w8, w1, eq  // eq = none
    6bc4:	mov	x0, x19
    6bc8:	bl	4a80 <mpfr_const_pi@plt>
    6bcc:	mov	w20, w0
    6bd0:	mov	w2, #0x1                   	// #1
    6bd4:	mov	x0, x19
    6bd8:	mov	x1, x19
    6bdc:	mov	w3, wzr
    6be0:	mov	w21, #0x1                   	// #1
    6be4:	bl	5320 <mpfr_div_2ui@plt>
    6be8:	tbz	w28, #31, 6c00 <mpc_atan@@Base+0x2b8>
    6bec:	mov	x0, x19
    6bf0:	mov	x1, x19
    6bf4:	mov	w2, wzr
    6bf8:	neg	w20, w20
    6bfc:	bl	4b80 <mpfr_neg@plt>
    6c00:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    6c04:	str	w21, [x19, #40]
    6c08:	str	x8, [x19, #48]
    6c0c:	tbz	w24, #31, 6c20 <mpc_atan@@Base+0x2d8>
    6c10:	mov	x0, x19
    6c14:	mov	x1, x19
    6c18:	mov	w2, wzr
    6c1c:	bl	4f60 <mpc_conj@plt>
    6c20:	cmp	w20, #0x0
    6c24:	cset	w8, ne  // ne = any
    6c28:	mov	w9, #0x2                   	// #2
    6c2c:	csel	w19, w9, w8, lt  // lt = tstop
    6c30:	mov	w0, w19
    6c34:	ldp	x20, x19, [sp, #288]
    6c38:	ldp	x22, x21, [sp, #272]
    6c3c:	ldp	x24, x23, [sp, #256]
    6c40:	ldp	x26, x25, [sp, #240]
    6c44:	ldp	x28, x27, [sp, #224]
    6c48:	ldp	x29, x30, [sp, #208]
    6c4c:	add	sp, sp, #0x130
    6c50:	ret
    6c54:	ldr	w8, [x22, #8]
    6c58:	cmp	w8, #0x0
    6c5c:	mov	w8, #0x2                   	// #2
    6c60:	cinc	w8, w8, gt
    6c64:	str	w8, [sp, #28]
    6c68:	ldr	w8, [x22, #8]
    6c6c:	cmp	w8, #0x0
    6c70:	mov	w8, #0x2                   	// #2
    6c74:	cinc	w8, w8, ge  // ge = tcont
    6c78:	str	w8, [sp, #16]
    6c7c:	tst	w25, #0xf
    6c80:	add	x28, x26, #0x5
    6c84:	cinc	x26, x20, eq  // eq = none
    6c88:	mov	x20, #0x2                   	// #2
    6c8c:	movk	x20, #0x8000, lsl #48
    6c90:	str	w25, [sp, #12]
    6c94:	b	6d28 <mpc_atan@@Base+0x3e0>
    6c98:	mov	x1, #0xffffffffffffffff    	// #-1
    6c9c:	mov	x0, x21
    6ca0:	mov	x2, xzr
    6ca4:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    6ca8:	mov	x24, x25
    6cac:	cbnz	w0, 7258 <mpc_atan@@Base+0x910>
    6cb0:	sub	x0, x29, #0x48
    6cb4:	add	x1, sp, #0x20
    6cb8:	sub	x2, x29, #0x28
    6cbc:	mov	w3, #0x3                   	// #3
    6cc0:	bl	4ca0 <mpfr_atan2@plt>
    6cc4:	cmp	x25, x24
    6cc8:	add	x0, sp, #0x68
    6ccc:	add	x1, sp, #0x68
    6cd0:	sub	x2, x29, #0x48
    6cd4:	mov	w3, #0x2                   	// #2
    6cd8:	csel	x24, x25, x24, lt  // lt = tstop
    6cdc:	bl	4a60 <mpfr_sub@plt>
    6ce0:	ldr	x8, [sp, #120]
    6ce4:	sub	x9, x28, x24
    6ce8:	add	x0, sp, #0x68
    6cec:	add	x1, sp, #0x68
    6cf0:	sub	x8, x9, x8
    6cf4:	cmp	x8, #0x0
    6cf8:	mov	w9, #0x1                   	// #1
    6cfc:	mov	w2, #0x1                   	// #1
    6d00:	mov	w3, #0x2                   	// #2
    6d04:	csinc	x24, x9, x8, lt  // lt = tstop
    6d08:	bl	5320 <mpfr_div_2ui@plt>
    6d0c:	sub	x1, x23, x24
    6d10:	add	x0, sp, #0x68
    6d14:	mov	w2, #0x2                   	// #2
    6d18:	mov	w3, #0x3                   	// #3
    6d1c:	mov	x4, x26
    6d20:	bl	5450 <mpfr_can_round@plt>
    6d24:	cbnz	w0, 6dfc <mpc_atan@@Base+0x4b4>
    6d28:	mov	x0, x23
    6d2c:	bl	4d20 <mpc_ceil_log2@plt>
    6d30:	add	x8, x23, x0
    6d34:	add	x23, x8, #0x2
    6d38:	sub	x0, x29, #0x28
    6d3c:	mov	x1, x23
    6d40:	bl	4c80 <mpfr_set_prec@plt>
    6d44:	sub	x0, x29, #0x48
    6d48:	mov	x1, x23
    6d4c:	bl	4c80 <mpfr_set_prec@plt>
    6d50:	add	x0, sp, #0x68
    6d54:	mov	x1, x23
    6d58:	bl	4c80 <mpfr_set_prec@plt>
    6d5c:	ldr	w3, [sp, #28]
    6d60:	sub	x0, x29, #0x28
    6d64:	mov	w1, #0x1                   	// #1
    6d68:	mov	x2, x21
    6d6c:	bl	5430 <mpfr_ui_sub@plt>
    6d70:	ldur	x25, [x29, #-24]
    6d74:	cmp	x25, x20
    6d78:	b.gt	6d8c <mpc_atan@@Base+0x444>
    6d7c:	cmp	x25, x27
    6d80:	b.ne	6d94 <mpc_atan@@Base+0x44c>  // b.any
    6d84:	bl	4b00 <mpfr_set_erangeflag@plt>
    6d88:	b	6d94 <mpc_atan@@Base+0x44c>
    6d8c:	ldur	w8, [x29, #-32]
    6d90:	cbnz	w8, 6dac <mpc_atan@@Base+0x464>
    6d94:	mov	w1, #0x1                   	// #1
    6d98:	mov	x0, x21
    6d9c:	mov	x2, xzr
    6da0:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    6da4:	cbnz	w0, 7288 <mpc_atan@@Base+0x940>
    6da8:	mov	w25, #0x2                   	// #2
    6dac:	add	x0, sp, #0x68
    6db0:	sub	x2, x29, #0x28
    6db4:	mov	w3, #0x2                   	// #2
    6db8:	mov	x1, x22
    6dbc:	bl	4ca0 <mpfr_atan2@plt>
    6dc0:	ldr	w3, [sp, #16]
    6dc4:	sub	x0, x29, #0x28
    6dc8:	mov	w2, #0x1                   	// #1
    6dcc:	mov	x1, x21
    6dd0:	bl	4ee0 <mpfr_add_ui@plt>
    6dd4:	ldur	x24, [x29, #-24]
    6dd8:	cmp	x24, x20
    6ddc:	b.gt	6df0 <mpc_atan@@Base+0x4a8>
    6de0:	cmp	x24, x27
    6de4:	b.ne	6c98 <mpc_atan@@Base+0x350>  // b.any
    6de8:	bl	4b00 <mpfr_set_erangeflag@plt>
    6dec:	b	6c98 <mpc_atan@@Base+0x350>
    6df0:	ldur	w8, [x29, #-32]
    6df4:	cbnz	w8, 6cb0 <mpc_atan@@Base+0x368>
    6df8:	b	6c98 <mpc_atan@@Base+0x350>
    6dfc:	ldr	w8, [sp, #12]
    6e00:	ldr	x23, [x19, #32]
    6e04:	mov	w20, #0x2                   	// #2
    6e08:	mov	x25, #0x8000000000000001    	// #-9223372036854775807
    6e0c:	cmp	w8, #0x10
    6e10:	cinc	x24, x23, cc  // cc = lo, ul, last
    6e14:	mov	w26, #0x5                   	// #5
    6e18:	b	6e24 <mpc_atan@@Base+0x4dc>
    6e1c:	mov	w0, wzr
    6e20:	cbnz	w0, 6f94 <mpc_atan@@Base+0x64c>
    6e24:	mov	x0, x23
    6e28:	bl	4d20 <mpc_ceil_log2@plt>
    6e2c:	add	x8, x20, x23
    6e30:	add	x23, x8, x0
    6e34:	sub	x0, x29, #0x28
    6e38:	mov	x1, x23
    6e3c:	bl	4c80 <mpfr_set_prec@plt>
    6e40:	sub	x0, x29, #0x48
    6e44:	mov	x1, x23
    6e48:	bl	4c80 <mpfr_set_prec@plt>
    6e4c:	add	x0, sp, #0x48
    6e50:	mov	x1, x23
    6e54:	bl	4c80 <mpfr_set_prec@plt>
    6e58:	sub	x0, x29, #0x28
    6e5c:	mov	w2, #0x1                   	// #1
    6e60:	mov	w3, #0x4                   	// #4
    6e64:	mov	x1, x21
    6e68:	bl	4ee0 <mpfr_add_ui@plt>
    6e6c:	sub	x0, x29, #0x28
    6e70:	sub	x1, x29, #0x28
    6e74:	mov	w2, #0x2                   	// #2
    6e78:	bl	5010 <mpfr_sqr@plt>
    6e7c:	add	x0, sp, #0x48
    6e80:	mov	w2, #0x2                   	// #2
    6e84:	mov	x1, x22
    6e88:	bl	5010 <mpfr_sqr@plt>
    6e8c:	sub	x0, x29, #0x28
    6e90:	sub	x1, x29, #0x28
    6e94:	add	x2, sp, #0x48
    6e98:	mov	w3, #0x2                   	// #2
    6e9c:	bl	4e60 <mpfr_add@plt>
    6ea0:	sub	x0, x29, #0x28
    6ea4:	sub	x1, x29, #0x28
    6ea8:	mov	w2, #0x2                   	// #2
    6eac:	bl	4d80 <mpfr_log@plt>
    6eb0:	sub	x0, x29, #0x48
    6eb4:	mov	w1, #0x1                   	// #1
    6eb8:	mov	w3, #0x1                   	// #1
    6ebc:	mov	x2, x21
    6ec0:	bl	5430 <mpfr_ui_sub@plt>
    6ec4:	sub	x0, x29, #0x48
    6ec8:	sub	x1, x29, #0x48
    6ecc:	mov	w2, #0x1                   	// #1
    6ed0:	bl	5010 <mpfr_sqr@plt>
    6ed4:	add	x0, sp, #0x48
    6ed8:	bl	4bb0 <mpfr_nextbelow@plt>
    6edc:	sub	x0, x29, #0x48
    6ee0:	sub	x1, x29, #0x48
    6ee4:	add	x2, sp, #0x48
    6ee8:	mov	w3, #0x1                   	// #1
    6eec:	bl	4e60 <mpfr_add@plt>
    6ef0:	sub	x0, x29, #0x48
    6ef4:	sub	x1, x29, #0x48
    6ef8:	mov	w2, #0x1                   	// #1
    6efc:	bl	4d80 <mpfr_log@plt>
    6f00:	add	x0, sp, #0x48
    6f04:	sub	x1, x29, #0x28
    6f08:	sub	x2, x29, #0x48
    6f0c:	mov	w3, #0x2                   	// #2
    6f10:	bl	4a60 <mpfr_sub@plt>
    6f14:	ldr	x8, [sp, #88]
    6f18:	cmp	x8, x25
    6f1c:	b.eq	6e1c <mpc_atan@@Base+0x4d4>  // b.none
    6f20:	ldur	x9, [x29, #-24]
    6f24:	ldur	x10, [x29, #-56]
    6f28:	cmp	x9, x10
    6f2c:	csel	x9, x9, x10, gt
    6f30:	cmp	x9, #0x2
    6f34:	b.gt	6f48 <mpc_atan@@Base+0x600>
    6f38:	sub	x9, x26, x8
    6f3c:	cmp	x8, #0x3
    6f40:	csinc	x20, x9, xzr, le
    6f44:	b	6f58 <mpc_atan@@Base+0x610>
    6f48:	sub	x8, x9, x8
    6f4c:	add	x9, x8, #0x3
    6f50:	cmn	x8, #0x1
    6f54:	csinc	x20, x9, xzr, ge  // ge = tcont
    6f58:	add	x0, sp, #0x48
    6f5c:	add	x1, sp, #0x48
    6f60:	mov	w2, #0x2                   	// #2
    6f64:	mov	w3, wzr
    6f68:	bl	5320 <mpfr_div_2ui@plt>
    6f6c:	ldr	x8, [sp, #88]
    6f70:	cmp	x8, x25
    6f74:	b.eq	72b8 <mpc_atan@@Base+0x970>  // b.none
    6f78:	sub	x1, x23, x20
    6f7c:	add	x0, sp, #0x48
    6f80:	mov	w2, #0x2                   	// #2
    6f84:	mov	w3, #0x3                   	// #3
    6f88:	mov	x4, x24
    6f8c:	bl	5450 <mpfr_can_round@plt>
    6f90:	cbz	w0, 6e24 <mpc_atan@@Base+0x4dc>
    6f94:	ldr	w3, [sp, #12]
    6f98:	add	x1, sp, #0x68
    6f9c:	add	x2, sp, #0x48
    6fa0:	mov	x0, x19
    6fa4:	bl	54f0 <mpc_set_fr_fr@plt>
    6fa8:	mov	w19, w0
    6fac:	sub	x0, x29, #0x28
    6fb0:	sub	x1, x29, #0x48
    6fb4:	add	x2, sp, #0x68
    6fb8:	add	x3, sp, #0x48
    6fbc:	mov	x4, xzr
    6fc0:	bl	4e70 <mpfr_clears@plt>
    6fc4:	b	6c30 <mpc_atan@@Base+0x2e8>
    6fc8:	mov	x1, #0xffffffffffffffff    	// #-1
    6fcc:	mov	x0, x21
    6fd0:	mov	x2, xzr
    6fd4:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    6fd8:	neg	w0, w0
    6fdc:	tbnz	w0, #31, 713c <mpc_atan@@Base+0x7f4>
    6fe0:	cbz	w0, 717c <mpc_atan@@Base+0x834>
    6fe4:	sub	x0, x29, #0x28
    6fe8:	str	w25, [sp, #12]
    6fec:	asr	w20, w25, #4
    6ff0:	bl	4aa0 <mpfr_init@plt>
    6ff4:	sub	x0, x29, #0x48
    6ff8:	bl	4aa0 <mpfr_init@plt>
    6ffc:	mov	x8, x19
    7000:	cmp	w24, #0x0
    7004:	ldr	x24, [x8, #32]!
    7008:	str	w20, [sp, #28]
    700c:	str	x8, [sp, #16]
    7010:	mov	w8, #0x2                   	// #2
    7014:	cinc	w25, w8, lt  // lt = tstop
    7018:	cmp	w20, #0x0
    701c:	cinc	x26, x24, eq  // eq = none
    7020:	mov	w20, #0x1                   	// #1
    7024:	b	7030 <mpc_atan@@Base+0x6e8>
    7028:	mov	w23, wzr
    702c:	cbnz	w23, 7120 <mpc_atan@@Base+0x7d8>
    7030:	mov	x0, x24
    7034:	bl	4d20 <mpc_ceil_log2@plt>
    7038:	add	x8, x24, x0
    703c:	add	x24, x8, #0x2
    7040:	sub	x0, x29, #0x28
    7044:	mov	x1, x24
    7048:	bl	4c80 <mpfr_set_prec@plt>
    704c:	sub	x0, x29, #0x48
    7050:	mov	x1, x24
    7054:	bl	4c80 <mpfr_set_prec@plt>
    7058:	sub	x0, x29, #0x28
    705c:	mov	w1, #0x1                   	// #1
    7060:	mov	x2, x21
    7064:	mov	w3, w25
    7068:	bl	4f70 <mpfr_ui_div@plt>
    706c:	ldur	x22, [x29, #-24]
    7070:	mov	w27, w0
    7074:	sub	x0, x29, #0x48
    7078:	sub	x1, x29, #0x28
    707c:	mov	w2, #0x2                   	// #2
    7080:	bl	5010 <mpfr_sqr@plt>
    7084:	sub	x0, x29, #0x48
    7088:	mov	w1, #0x1                   	// #1
    708c:	mov	x2, xzr
    7090:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    7094:	cmp	w0, #0x1
    7098:	b.ge	72e8 <mpc_atan@@Base+0x9a0>  // b.tcont
    709c:	sub	x0, x29, #0x48
    70a0:	mov	w1, #0x1                   	// #1
    70a4:	mov	x2, xzr
    70a8:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    70ac:	cbz	w0, 7028 <mpc_atan@@Base+0x6e0>
    70b0:	sub	x0, x29, #0x48
    70b4:	sub	x2, x29, #0x48
    70b8:	mov	w1, #0x1                   	// #1
    70bc:	mov	w3, #0x1                   	// #1
    70c0:	mov	w23, #0x1                   	// #1
    70c4:	bl	5430 <mpfr_ui_sub@plt>
    70c8:	sub	x0, x29, #0x28
    70cc:	sub	x1, x29, #0x28
    70d0:	mov	w2, w25
    70d4:	bl	4d90 <mpfr_atanh@plt>
    70d8:	orr	w8, w0, w27
    70dc:	cbz	w8, 702c <mpc_atan@@Base+0x6e4>
    70e0:	ldur	x8, [x29, #-24]
    70e4:	ldur	x9, [x29, #-56]
    70e8:	sub	x0, x29, #0x28
    70ec:	mov	w3, #0x1                   	// #1
    70f0:	sub	x8, x22, x8
    70f4:	sub	x8, x8, x9
    70f8:	add	x8, x8, #0x1
    70fc:	cmp	x8, #0x0
    7100:	csinc	x8, x20, x8, lt  // lt = tstop
    7104:	sub	x1, x24, x8
    7108:	mov	w2, w25
    710c:	mov	x4, x26
    7110:	bl	5450 <mpfr_can_round@plt>
    7114:	cmp	w0, #0x0
    7118:	cset	w23, ne  // ne = any
    711c:	b	702c <mpc_atan@@Base+0x6e4>
    7120:	ldr	w8, [sp, #12]
    7124:	and	w1, w8, #0xf
    7128:	tbz	w28, #31, 71c0 <mpc_atan@@Base+0x878>
    712c:	cmp	w1, #0x2
    7130:	b.ne	71b4 <mpc_atan@@Base+0x86c>  // b.any
    7134:	mov	w1, #0x3                   	// #3
    7138:	b	71c0 <mpc_atan@@Base+0x878>
    713c:	mov	w8, #0x1                   	// #1
    7140:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    7144:	str	w8, [x19, #8]
    7148:	str	x9, [x19, #16]
    714c:	tbz	w28, #31, 7160 <mpc_atan@@Base+0x818>
    7150:	mov	x0, x19
    7154:	mov	x1, x19
    7158:	mov	w2, wzr
    715c:	bl	4b80 <mpfr_neg@plt>
    7160:	add	x0, x19, #0x20
    7164:	asr	w2, w25, #4
    7168:	mov	x1, x21
    716c:	bl	4d90 <mpfr_atanh@plt>
    7170:	mov	w19, w0
    7174:	mov	w8, wzr
    7178:	b	7230 <mpc_atan@@Base+0x8e8>
    717c:	cmp	w28, #0x0
    7180:	mov	w20, #0xffffffff            	// #-1
    7184:	cneg	w1, w20, ge  // ge = tcont
    7188:	mov	x0, x19
    718c:	bl	4d10 <mpfr_set_zero@plt>
    7190:	cmp	w24, #0x0
    7194:	add	x0, x19, #0x20
    7198:	cneg	w1, w20, ge  // ge = tcont
    719c:	bl	5120 <mpfr_set_inf@plt>
    71a0:	mov	w9, wzr
    71a4:	mov	w8, wzr
    71a8:	b	7240 <mpc_atan@@Base+0x8f8>
    71ac:	mov	w8, #0x2                   	// #2
    71b0:	b	6c64 <mpc_atan@@Base+0x31c>
    71b4:	cmp	w1, #0x3
    71b8:	mov	w8, #0x2                   	// #2
    71bc:	csel	w1, w8, w1, eq  // eq = none
    71c0:	mov	x0, x19
    71c4:	bl	4a80 <mpfr_const_pi@plt>
    71c8:	mov	w20, w0
    71cc:	mov	w2, #0x1                   	// #1
    71d0:	mov	x0, x19
    71d4:	mov	x1, x19
    71d8:	mov	w3, wzr
    71dc:	bl	5320 <mpfr_div_2ui@plt>
    71e0:	tbz	w28, #31, 71f8 <mpc_atan@@Base+0x8b0>
    71e4:	mov	x0, x19
    71e8:	mov	x1, x19
    71ec:	mov	w2, wzr
    71f0:	neg	w20, w20
    71f4:	bl	4b80 <mpfr_neg@plt>
    71f8:	ldur	w3, [x29, #-32]
    71fc:	ldr	x0, [sp, #16]
    7200:	ldr	w2, [sp, #28]
    7204:	sub	x1, x29, #0x28
    7208:	bl	51d0 <mpfr_set4@plt>
    720c:	mov	w19, w0
    7210:	sub	x0, x29, #0x28
    7214:	bl	4d60 <mpfr_clear@plt>
    7218:	sub	x0, x29, #0x48
    721c:	bl	4d60 <mpfr_clear@plt>
    7220:	cmp	w20, #0x0
    7224:	cset	w8, ne  // ne = any
    7228:	mov	w9, #0x2                   	// #2
    722c:	csel	w8, w9, w8, lt  // lt = tstop
    7230:	lsr	w9, w19, #31
    7234:	cbz	w19, 7240 <mpc_atan@@Base+0x8f8>
    7238:	mov	w10, #0x4                   	// #4
    723c:	b	7244 <mpc_atan@@Base+0x8fc>
    7240:	mov	w10, wzr
    7244:	cmp	w9, #0x0
    7248:	mov	w9, #0x8                   	// #8
    724c:	csel	w9, w9, w10, ne  // ne = any
    7250:	orr	w19, w9, w8
    7254:	b	6c30 <mpc_atan@@Base+0x2e8>
    7258:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    725c:	ldr	x8, [x8, #4008]
    7260:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    7264:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    7268:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    726c:	ldr	x0, [x8]
    7270:	add	x1, x1, #0x7c0
    7274:	add	x2, x2, #0x824
    7278:	add	x4, x4, #0x869
    727c:	mov	w3, #0x122                 	// #290
    7280:	bl	55a0 <fprintf@plt>
    7284:	bl	5000 <abort@plt>
    7288:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    728c:	ldr	x8, [x8, #4008]
    7290:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    7294:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    7298:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    729c:	ldr	x0, [x8]
    72a0:	add	x1, x1, #0x7c0
    72a4:	add	x2, x2, #0x824
    72a8:	add	x4, x4, #0x843
    72ac:	mov	w3, #0x113                 	// #275
    72b0:	bl	55a0 <fprintf@plt>
    72b4:	bl	5000 <abort@plt>
    72b8:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    72bc:	ldr	x8, [x8, #4008]
    72c0:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    72c4:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    72c8:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    72cc:	ldr	x0, [x8]
    72d0:	add	x1, x1, #0x7c0
    72d4:	add	x2, x2, #0x824
    72d8:	add	x4, x4, #0x890
    72dc:	mov	w3, #0x17b                 	// #379
    72e0:	bl	55a0 <fprintf@plt>
    72e4:	bl	5000 <abort@plt>
    72e8:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    72ec:	ldr	x8, [x8, #4008]
    72f0:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    72f4:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    72f8:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    72fc:	ldr	x0, [x8]
    7300:	add	x1, x1, #0x7c0
    7304:	add	x2, x2, #0x824
    7308:	add	x4, x4, #0x82b
    730c:	mov	w3, #0xba                  	// #186
    7310:	bl	55a0 <fprintf@plt>
    7314:	bl	5000 <abort@plt>

0000000000007318 <mpc_atanh@@Base>:
    7318:	sub	sp, sp, #0xd0
    731c:	stp	x29, x30, [sp, #160]
    7320:	stp	x22, x21, [sp, #176]
    7324:	stp	x20, x19, [sp, #192]
    7328:	ldp	q1, q0, [x1, #32]
    732c:	mov	w19, w2
    7330:	mov	x20, x0
    7334:	add	x0, sp, #0x40
    7338:	stp	q1, q0, [sp, #64]
    733c:	ldp	q1, q0, [x1]
    7340:	add	x1, sp, #0x40
    7344:	mov	w2, wzr
    7348:	add	x29, sp, #0xa0
    734c:	stp	q1, q0, [sp, #96]
    7350:	bl	4b80 <mpfr_neg@plt>
    7354:	ldr	x1, [x20, #32]
    7358:	ldr	x2, [x20]
    735c:	mov	x0, sp
    7360:	mov	x22, sp
    7364:	bl	53c0 <mpc_init3@plt>
    7368:	asr	w8, w19, #4
    736c:	mov	w9, #0x2                   	// #2
    7370:	cmp	w8, #0x3
    7374:	mov	w10, #0x3                   	// #3
    7378:	csel	w9, w9, w8, eq  // eq = none
    737c:	cmp	w8, #0x2
    7380:	csel	w8, w10, w9, eq  // eq = none
    7384:	ubfiz	w9, w19, #4, #4
    7388:	add	w2, w8, w9
    738c:	mov	x0, sp
    7390:	add	x1, sp, #0x40
    7394:	bl	5410 <mpc_atan@plt>
    7398:	ldp	q0, q1, [sp]
    739c:	ldp	q2, q3, [sp, #32]
    73a0:	mov	w21, w0
    73a4:	add	x0, x22, #0x20
    73a8:	mov	x1, x0
    73ac:	mov	w2, wzr
    73b0:	stp	q0, q1, [x29, #-32]
    73b4:	stp	q2, q3, [sp]
    73b8:	stp	q0, q1, [sp, #32]
    73bc:	bl	4b80 <mpfr_neg@plt>
    73c0:	mov	x1, sp
    73c4:	mov	x0, x20
    73c8:	mov	w2, w19
    73cc:	bl	5580 <mpc_set@plt>
    73d0:	mov	x0, sp
    73d4:	bl	4a10 <mpc_clear@plt>
    73d8:	asr	w8, w21, #2
    73dc:	cmp	w8, #0x0
    73e0:	cset	w9, ne  // ne = any
    73e4:	cmp	w8, #0x2
    73e8:	csel	w8, w8, w9, eq  // eq = none
    73ec:	tst	w21, #0x3
    73f0:	cset	w9, ne  // ne = any
    73f4:	tst	w21, #0x1
    73f8:	ldp	x20, x19, [sp, #192]
    73fc:	ldp	x22, x21, [sp, #176]
    7400:	ldp	x29, x30, [sp, #160]
    7404:	lsl	w9, w9, #2
    7408:	mov	w10, #0x8                   	// #8
    740c:	csel	w9, w9, w10, eq  // eq = none
    7410:	orr	w0, w8, w9
    7414:	add	sp, sp, #0xd0
    7418:	ret

000000000000741c <mpc_clear@@Base>:
    741c:	stp	x29, x30, [sp, #-32]!
    7420:	str	x19, [sp, #16]
    7424:	mov	x29, sp
    7428:	mov	x19, x0
    742c:	bl	4d60 <mpfr_clear@plt>
    7430:	add	x0, x19, #0x20
    7434:	ldr	x19, [sp, #16]
    7438:	ldp	x29, x30, [sp], #32
    743c:	b	4d60 <mpfr_clear@plt>

0000000000007440 <mpc_cmp@@Base>:
    7440:	stp	x29, x30, [sp, #-48]!
    7444:	mov	w2, #0x1                   	// #1
    7448:	str	x21, [sp, #16]
    744c:	stp	x20, x19, [sp, #32]
    7450:	mov	x29, sp
    7454:	mov	x19, x1
    7458:	mov	x20, x0
    745c:	bl	53a0 <mpfr_cmp3@plt>
    7460:	mov	w21, w0
    7464:	add	x0, x20, #0x20
    7468:	add	x1, x19, #0x20
    746c:	mov	w2, #0x1                   	// #1
    7470:	bl	53a0 <mpfr_cmp3@plt>
    7474:	cmp	w21, #0x0
    7478:	mov	w8, #0x2                   	// #2
    747c:	cset	w9, ne  // ne = any
    7480:	csel	w8, w8, w9, lt  // lt = tstop
    7484:	cmp	w0, #0x0
    7488:	cset	w9, ne  // ne = any
    748c:	ldp	x20, x19, [sp, #32]
    7490:	ldr	x21, [sp, #16]
    7494:	lsl	w9, w9, #2
    7498:	mov	w10, #0x8                   	// #8
    749c:	csel	w9, w10, w9, lt  // lt = tstop
    74a0:	orr	w0, w9, w8
    74a4:	ldp	x29, x30, [sp], #48
    74a8:	ret

00000000000074ac <mpc_cmp_abs@@Base>:
    74ac:	sub	sp, sp, #0xf0
    74b0:	stp	x29, x30, [sp, #192]
    74b4:	stp	x22, x21, [sp, #208]
    74b8:	stp	x20, x19, [sp, #224]
    74bc:	ldr	x10, [x0, #16]
    74c0:	mov	x12, #0x2                   	// #2
    74c4:	movk	x12, #0x8000, lsl #48
    74c8:	add	x29, sp, #0xc0
    74cc:	cmp	x10, x12
    74d0:	b.eq	7500 <mpc_cmp_abs@@Base+0x54>  // b.none
    74d4:	ldr	x11, [x0, #48]
    74d8:	mov	x20, x0
    74dc:	cmp	x11, x12
    74e0:	b.eq	7500 <mpc_cmp_abs@@Base+0x54>  // b.none
    74e4:	ldr	x9, [x1, #16]
    74e8:	mov	x19, x1
    74ec:	cmp	x9, x12
    74f0:	b.eq	7500 <mpc_cmp_abs@@Base+0x54>  // b.none
    74f4:	ldr	x8, [x19, #48]
    74f8:	cmp	x8, x12
    74fc:	b.ne	7544 <mpc_cmp_abs@@Base+0x98>  // b.any
    7500:	sub	x0, x29, #0x40
    7504:	bl	4aa0 <mpfr_init@plt>
    7508:	sub	x0, x29, #0x40
    750c:	bl	4a40 <mpfr_set_nan@plt>
    7510:	sub	x0, x29, #0x40
    7514:	sub	x1, x29, #0x40
    7518:	mov	w2, #0x1                   	// #1
    751c:	bl	53a0 <mpfr_cmp3@plt>
    7520:	mov	w21, w0
    7524:	sub	x0, x29, #0x40
    7528:	bl	4d60 <mpfr_clear@plt>
    752c:	mov	w0, w21
    7530:	ldp	x20, x19, [sp, #224]
    7534:	ldp	x22, x21, [sp, #208]
    7538:	ldp	x29, x30, [sp, #192]
    753c:	add	sp, sp, #0xf0
    7540:	ret
    7544:	mov	x12, #0x8000000000000003    	// #-9223372036854775805
    7548:	cmp	x10, x12
    754c:	b.eq	7704 <mpc_cmp_abs@@Base+0x258>  // b.none
    7550:	cmp	x11, x12
    7554:	b.eq	7704 <mpc_cmp_abs@@Base+0x258>  // b.none
    7558:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    755c:	cmp	x9, x10
    7560:	mov	w21, #0xffffffff            	// #-1
    7564:	b.eq	752c <mpc_cmp_abs@@Base+0x80>  // b.none
    7568:	cmp	x8, x10
    756c:	b.eq	752c <mpc_cmp_abs@@Base+0x80>  // b.none
    7570:	ldp	q1, q0, [x20, #32]
    7574:	ldp	q3, q2, [x20]
    7578:	stp	q1, q0, [x29, #-32]
    757c:	stp	q3, q2, [x29, #-64]
    7580:	ldp	q1, q0, [x19, #32]
    7584:	ldp	q3, q2, [x19]
    7588:	stp	q1, q0, [sp, #96]
    758c:	stp	q3, q2, [sp, #64]
    7590:	ldr	w8, [x20, #8]
    7594:	tbnz	w8, #31, 7724 <mpc_cmp_abs@@Base+0x278>
    7598:	ldr	w8, [x20, #40]
    759c:	tbnz	w8, #31, 773c <mpc_cmp_abs@@Base+0x290>
    75a0:	ldr	w8, [x19, #8]
    75a4:	tbnz	w8, #31, 7758 <mpc_cmp_abs@@Base+0x2ac>
    75a8:	ldr	w8, [x19, #40]
    75ac:	tbnz	w8, #31, 7770 <mpc_cmp_abs@@Base+0x2c4>
    75b0:	sub	x8, x29, #0x40
    75b4:	add	x19, x8, #0x20
    75b8:	sub	x0, x29, #0x40
    75bc:	mov	w2, #0x1                   	// #1
    75c0:	mov	x1, x19
    75c4:	bl	53a0 <mpfr_cmp3@plt>
    75c8:	cmp	w0, #0x1
    75cc:	b.lt	75dc <mpc_cmp_abs@@Base+0x130>  // b.tstop
    75d0:	sub	x0, x29, #0x40
    75d4:	mov	x1, x19
    75d8:	bl	5090 <mpfr_swap@plt>
    75dc:	add	x8, sp, #0x40
    75e0:	add	x20, x8, #0x20
    75e4:	add	x0, sp, #0x40
    75e8:	mov	w2, #0x1                   	// #1
    75ec:	mov	x1, x20
    75f0:	bl	53a0 <mpfr_cmp3@plt>
    75f4:	cmp	w0, #0x1
    75f8:	b.lt	7608 <mpc_cmp_abs@@Base+0x15c>  // b.tstop
    75fc:	add	x0, sp, #0x40
    7600:	mov	x1, x20
    7604:	bl	5090 <mpfr_swap@plt>
    7608:	sub	x0, x29, #0x40
    760c:	add	x1, sp, #0x40
    7610:	mov	w2, #0x1                   	// #1
    7614:	bl	53a0 <mpfr_cmp3@plt>
    7618:	mov	w22, w0
    761c:	mov	w2, #0x1                   	// #1
    7620:	mov	x0, x19
    7624:	mov	x1, x20
    7628:	bl	53a0 <mpfr_cmp3@plt>
    762c:	mov	w21, w0
    7630:	cbz	w22, 752c <mpc_cmp_abs@@Base+0x80>
    7634:	cbz	w21, 7788 <mpc_cmp_abs@@Base+0x2dc>
    7638:	add	x0, sp, #0x20
    763c:	bl	4aa0 <mpfr_init@plt>
    7640:	mov	x0, sp
    7644:	bl	4aa0 <mpfr_init@plt>
    7648:	ldur	x8, [x29, #-64]
    764c:	ldur	x9, [x29, #-32]
    7650:	ldr	x10, [sp, #64]
    7654:	ldr	x11, [sp, #96]
    7658:	cmp	x8, x9
    765c:	csel	x8, x8, x9, gt
    7660:	cmp	x10, x11
    7664:	csel	x9, x10, x11, gt
    7668:	mov	x10, #0xf5c3                	// #62915
    766c:	movk	x10, #0x5c28, lsl #16
    7670:	cmp	x8, x9
    7674:	movk	x10, #0xc28f, lsl #32
    7678:	csel	x8, x8, x9, gt
    767c:	mov	w9, #0x1388                	// #5000
    7680:	movk	x10, #0x28f5, lsl #48
    7684:	cmp	x8, x9
    7688:	lsr	x8, x8, #2
    768c:	umulh	x8, x8, x10
    7690:	lsr	x8, x8, #2
    7694:	mov	w9, #0x32                  	// #50
    7698:	csel	x19, x9, x8, lt  // lt = tstop
    769c:	add	x0, sp, #0x20
    76a0:	mov	x1, x19
    76a4:	bl	4c80 <mpfr_set_prec@plt>
    76a8:	mov	x0, sp
    76ac:	mov	x1, x19
    76b0:	bl	4c80 <mpfr_set_prec@plt>
    76b4:	add	x0, sp, #0x20
    76b8:	sub	x1, x29, #0x40
    76bc:	mov	w2, #0x3                   	// #3
    76c0:	bl	4ea0 <mpc_norm@plt>
    76c4:	mov	w22, w0
    76c8:	mov	x0, sp
    76cc:	add	x1, sp, #0x40
    76d0:	mov	w2, #0x3                   	// #3
    76d4:	bl	4ea0 <mpc_norm@plt>
    76d8:	mov	w20, w0
    76dc:	add	x0, sp, #0x20
    76e0:	mov	x1, sp
    76e4:	mov	w2, #0x1                   	// #1
    76e8:	bl	53a0 <mpfr_cmp3@plt>
    76ec:	cbnz	w0, 77a0 <mpc_cmp_abs@@Base+0x2f4>
    76f0:	cbz	w22, 77a8 <mpc_cmp_abs@@Base+0x2fc>
    76f4:	lsl	x19, x19, #1
    76f8:	cbnz	w20, 769c <mpc_cmp_abs@@Base+0x1f0>
    76fc:	mov	w21, #0x1                   	// #1
    7700:	b	77b0 <mpc_cmp_abs@@Base+0x304>
    7704:	cmp	x9, x12
    7708:	b.ne	7714 <mpc_cmp_abs@@Base+0x268>  // b.any
    770c:	mov	w21, wzr
    7710:	b	752c <mpc_cmp_abs@@Base+0x80>
    7714:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    7718:	cmp	x8, x9
    771c:	cset	w21, ne  // ne = any
    7720:	b	752c <mpc_cmp_abs@@Base+0x80>
    7724:	sub	x0, x29, #0x40
    7728:	sub	x1, x29, #0x40
    772c:	mov	w2, wzr
    7730:	bl	4b80 <mpfr_neg@plt>
    7734:	ldr	w8, [x20, #40]
    7738:	tbz	w8, #31, 75a0 <mpc_cmp_abs@@Base+0xf4>
    773c:	sub	x8, x29, #0x40
    7740:	add	x0, x8, #0x20
    7744:	mov	x1, x0
    7748:	mov	w2, wzr
    774c:	bl	4b80 <mpfr_neg@plt>
    7750:	ldr	w8, [x19, #8]
    7754:	tbz	w8, #31, 75a8 <mpc_cmp_abs@@Base+0xfc>
    7758:	add	x0, sp, #0x40
    775c:	add	x1, sp, #0x40
    7760:	mov	w2, wzr
    7764:	bl	4b80 <mpfr_neg@plt>
    7768:	ldr	w8, [x19, #40]
    776c:	tbz	w8, #31, 75b0 <mpc_cmp_abs@@Base+0x104>
    7770:	add	x8, sp, #0x40
    7774:	add	x0, x8, #0x20
    7778:	mov	x1, x0
    777c:	mov	w2, wzr
    7780:	bl	4b80 <mpfr_neg@plt>
    7784:	b	75b0 <mpc_cmp_abs@@Base+0x104>
    7788:	sub	x0, x29, #0x40
    778c:	add	x1, sp, #0x40
    7790:	mov	w2, #0x1                   	// #1
    7794:	bl	53a0 <mpfr_cmp3@plt>
    7798:	mov	w21, w0
    779c:	b	752c <mpc_cmp_abs@@Base+0x80>
    77a0:	mov	w21, w0
    77a4:	b	77b0 <mpc_cmp_abs@@Base+0x304>
    77a8:	cmp	w20, #0x0
    77ac:	csetm	w21, ne  // ne = any
    77b0:	add	x0, sp, #0x20
    77b4:	bl	4d60 <mpfr_clear@plt>
    77b8:	mov	x0, sp
    77bc:	b	7528 <mpc_cmp_abs@@Base+0x7c>

00000000000077c0 <mpc_cmp_si_si@@Base>:
    77c0:	stp	x29, x30, [sp, #-48]!
    77c4:	stp	x20, x19, [sp, #32]
    77c8:	mov	x19, x2
    77cc:	mov	x2, xzr
    77d0:	str	x21, [sp, #16]
    77d4:	mov	x29, sp
    77d8:	mov	x20, x0
    77dc:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    77e0:	mov	w21, w0
    77e4:	add	x0, x20, #0x20
    77e8:	mov	x1, x19
    77ec:	mov	x2, xzr
    77f0:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    77f4:	cmp	w21, #0x0
    77f8:	mov	w8, #0x2                   	// #2
    77fc:	cset	w9, ne  // ne = any
    7800:	csel	w8, w8, w9, lt  // lt = tstop
    7804:	cmp	w0, #0x0
    7808:	cset	w9, ne  // ne = any
    780c:	ldp	x20, x19, [sp, #32]
    7810:	ldr	x21, [sp, #16]
    7814:	lsl	w9, w9, #2
    7818:	mov	w10, #0x8                   	// #8
    781c:	csel	w9, w10, w9, lt  // lt = tstop
    7820:	orr	w0, w9, w8
    7824:	ldp	x29, x30, [sp], #48
    7828:	ret

000000000000782c <mpc_conj@@Base>:
    782c:	stp	x29, x30, [sp, #-48]!
    7830:	stp	x22, x21, [sp, #16]
    7834:	stp	x20, x19, [sp, #32]
    7838:	ldr	w3, [x1, #8]
    783c:	mov	w19, w2
    7840:	and	w2, w2, #0xf
    7844:	mov	x29, sp
    7848:	mov	x20, x1
    784c:	mov	x21, x0
    7850:	bl	51d0 <mpfr_set4@plt>
    7854:	mov	w22, w0
    7858:	add	x0, x21, #0x20
    785c:	add	x1, x20, #0x20
    7860:	asr	w2, w19, #4
    7864:	bl	4b80 <mpfr_neg@plt>
    7868:	cmp	w22, #0x0
    786c:	mov	w8, #0x2                   	// #2
    7870:	cset	w9, ne  // ne = any
    7874:	csel	w8, w8, w9, lt  // lt = tstop
    7878:	cmp	w0, #0x0
    787c:	cset	w9, ne  // ne = any
    7880:	ldp	x20, x19, [sp, #32]
    7884:	ldp	x22, x21, [sp, #16]
    7888:	lsl	w9, w9, #2
    788c:	mov	w10, #0x8                   	// #8
    7890:	csel	w9, w10, w9, lt  // lt = tstop
    7894:	orr	w0, w9, w8
    7898:	ldp	x29, x30, [sp], #48
    789c:	ret

00000000000078a0 <mpc_cos@@Base>:
    78a0:	stp	x29, x30, [sp, #-16]!
    78a4:	mov	w4, w2
    78a8:	mov	x2, x1
    78ac:	mov	x1, x0
    78b0:	mov	x0, xzr
    78b4:	mov	w3, wzr
    78b8:	mov	x29, sp
    78bc:	bl	5140 <mpc_sin_cos@plt>
    78c0:	asr	w0, w0, #4
    78c4:	ldp	x29, x30, [sp], #16
    78c8:	ret

00000000000078cc <mpc_cosh@@Base>:
    78cc:	sub	sp, sp, #0x60
    78d0:	stp	x29, x30, [sp, #64]
    78d4:	stp	x20, x19, [sp, #80]
    78d8:	ldp	q1, q0, [x1, #32]
    78dc:	mov	w19, w2
    78e0:	mov	x20, x0
    78e4:	mov	x0, sp
    78e8:	stp	q1, q0, [sp]
    78ec:	ldp	q1, q0, [x1]
    78f0:	mov	x1, sp
    78f4:	mov	w2, wzr
    78f8:	add	x29, sp, #0x40
    78fc:	stp	q1, q0, [sp, #32]
    7900:	bl	4b80 <mpfr_neg@plt>
    7904:	mov	x1, sp
    7908:	mov	x0, x20
    790c:	mov	w2, w19
    7910:	bl	53e0 <mpc_cos@plt>
    7914:	ldp	x20, x19, [sp, #80]
    7918:	ldp	x29, x30, [sp, #64]
    791c:	add	sp, sp, #0x60
    7920:	ret

0000000000007924 <mpc_div_2si@@Base>:
    7924:	stp	x29, x30, [sp, #-64]!
    7928:	stp	x20, x19, [sp, #48]
    792c:	mov	w19, w3
    7930:	and	w3, w3, #0xf
    7934:	str	x23, [sp, #16]
    7938:	stp	x22, x21, [sp, #32]
    793c:	mov	x29, sp
    7940:	mov	x20, x2
    7944:	mov	x21, x1
    7948:	mov	x22, x0
    794c:	bl	5030 <mpfr_div_2si@plt>
    7950:	mov	w23, w0
    7954:	add	x0, x22, #0x20
    7958:	add	x1, x21, #0x20
    795c:	asr	w3, w19, #4
    7960:	mov	x2, x20
    7964:	bl	5030 <mpfr_div_2si@plt>
    7968:	cmp	w23, #0x0
    796c:	mov	w8, #0x2                   	// #2
    7970:	cset	w9, ne  // ne = any
    7974:	csel	w8, w8, w9, lt  // lt = tstop
    7978:	cmp	w0, #0x0
    797c:	cset	w9, ne  // ne = any
    7980:	ldp	x20, x19, [sp, #48]
    7984:	ldp	x22, x21, [sp, #32]
    7988:	ldr	x23, [sp, #16]
    798c:	lsl	w9, w9, #2
    7990:	mov	w10, #0x8                   	// #8
    7994:	csel	w9, w10, w9, lt  // lt = tstop
    7998:	orr	w0, w9, w8
    799c:	ldp	x29, x30, [sp], #64
    79a0:	ret

00000000000079a4 <mpc_div_2ui@@Base>:
    79a4:	stp	x29, x30, [sp, #-64]!
    79a8:	stp	x20, x19, [sp, #48]
    79ac:	mov	w19, w3
    79b0:	and	w3, w3, #0xf
    79b4:	str	x23, [sp, #16]
    79b8:	stp	x22, x21, [sp, #32]
    79bc:	mov	x29, sp
    79c0:	mov	x20, x2
    79c4:	mov	x21, x1
    79c8:	mov	x22, x0
    79cc:	bl	5320 <mpfr_div_2ui@plt>
    79d0:	mov	w23, w0
    79d4:	add	x0, x22, #0x20
    79d8:	add	x1, x21, #0x20
    79dc:	asr	w3, w19, #4
    79e0:	mov	x2, x20
    79e4:	bl	5320 <mpfr_div_2ui@plt>
    79e8:	cmp	w23, #0x0
    79ec:	mov	w8, #0x2                   	// #2
    79f0:	cset	w9, ne  // ne = any
    79f4:	csel	w8, w8, w9, lt  // lt = tstop
    79f8:	cmp	w0, #0x0
    79fc:	cset	w9, ne  // ne = any
    7a00:	ldp	x20, x19, [sp, #48]
    7a04:	ldp	x22, x21, [sp, #32]
    7a08:	ldr	x23, [sp, #16]
    7a0c:	lsl	w9, w9, #2
    7a10:	mov	w10, #0x8                   	// #8
    7a14:	csel	w9, w10, w9, lt  // lt = tstop
    7a18:	orr	w0, w9, w8
    7a1c:	ldp	x29, x30, [sp], #64
    7a20:	ret

0000000000007a24 <mpc_div@@Base>:
    7a24:	sub	sp, sp, #0x1e0
    7a28:	stp	x29, x30, [sp, #384]
    7a2c:	stp	x28, x27, [sp, #400]
    7a30:	stp	x26, x25, [sp, #416]
    7a34:	stp	x24, x23, [sp, #432]
    7a38:	stp	x22, x21, [sp, #448]
    7a3c:	stp	x20, x19, [sp, #464]
    7a40:	ldr	x9, [x2, #16]
    7a44:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    7a48:	mov	w25, w3
    7a4c:	mov	x20, x2
    7a50:	mov	x21, x1
    7a54:	mov	x19, x0
    7a58:	and	w24, w3, #0xf
    7a5c:	cmp	x9, x8
    7a60:	asr	w23, w3, #4
    7a64:	add	x29, sp, #0x180
    7a68:	b.ne	7ad0 <mpc_div@@Base+0xac>  // b.any
    7a6c:	ldr	x9, [x20, #48]
    7a70:	cmp	x9, x8
    7a74:	b.ne	7ad0 <mpc_div@@Base+0xac>  // b.any
    7a78:	ldr	w8, [x20, #8]
    7a7c:	add	x0, sp, #0x90
    7a80:	mov	w1, #0x1                   	// #1
    7a84:	cmp	w8, #0x0
    7a88:	mov	w8, #0x1                   	// #1
    7a8c:	cneg	w20, w8, lt  // lt = tstop
    7a90:	bl	5440 <mpfr_init2@plt>
    7a94:	add	x0, sp, #0x90
    7a98:	mov	w1, w20
    7a9c:	bl	5120 <mpfr_set_inf@plt>
    7aa0:	add	x1, sp, #0x90
    7aa4:	mov	x0, x19
    7aa8:	mov	x2, x21
    7aac:	mov	w3, w24
    7ab0:	bl	4b70 <mpfr_mul@plt>
    7ab4:	add	x0, x19, #0x20
    7ab8:	add	x2, x21, #0x20
    7abc:	add	x1, sp, #0x90
    7ac0:	mov	w3, w23
    7ac4:	bl	4b70 <mpfr_mul@plt>
    7ac8:	add	x0, sp, #0x90
    7acc:	b	7f48 <mpc_div@@Base+0x524>
    7ad0:	ldr	x9, [x21, #16]
    7ad4:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    7ad8:	cmp	x9, x8
    7adc:	b.eq	7aec <mpc_div@@Base+0xc8>  // b.none
    7ae0:	ldr	x9, [x21, #48]
    7ae4:	cmp	x9, x8
    7ae8:	b.ne	7b2c <mpc_div@@Base+0x108>  // b.any
    7aec:	mov	x0, x20
    7af0:	bl	54d0 <mpfr_number_p@plt>
    7af4:	cbz	w0, 7b2c <mpc_div@@Base+0x108>
    7af8:	add	x22, x20, #0x20
    7afc:	mov	x0, x22
    7b00:	bl	54d0 <mpfr_number_p@plt>
    7b04:	cbz	w0, 7b2c <mpc_div@@Base+0x108>
    7b08:	ldr	x9, [x21, #16]
    7b0c:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    7b10:	cmp	x9, x8
    7b14:	b.ne	7da4 <mpc_div@@Base+0x380>  // b.any
    7b18:	ldr	w9, [x21, #8]
    7b1c:	cmp	w9, #0x0
    7b20:	mov	w9, #0x1                   	// #1
    7b24:	cneg	w23, w9, lt  // lt = tstop
    7b28:	b	7da8 <mpc_div@@Base+0x384>
    7b2c:	mov	x0, x21
    7b30:	bl	54d0 <mpfr_number_p@plt>
    7b34:	cbz	w0, 7c44 <mpc_div@@Base+0x220>
    7b38:	add	x22, x21, #0x20
    7b3c:	mov	x0, x22
    7b40:	bl	54d0 <mpfr_number_p@plt>
    7b44:	cbz	w0, 7c44 <mpc_div@@Base+0x220>
    7b48:	ldr	x8, [x20, #16]
    7b4c:	mov	x26, #0x8000000000000003    	// #-9223372036854775805
    7b50:	cmp	x8, x26
    7b54:	b.eq	7b64 <mpc_div@@Base+0x140>  // b.none
    7b58:	ldr	x8, [x20, #48]
    7b5c:	cmp	x8, x26
    7b60:	b.ne	7c44 <mpc_div@@Base+0x220>  // b.any
    7b64:	mov	x24, #0x2                   	// #2
    7b68:	add	x0, sp, #0x90
    7b6c:	mov	w1, #0x2                   	// #2
    7b70:	movk	x24, #0x8000, lsl #48
    7b74:	bl	5440 <mpfr_init2@plt>
    7b78:	sub	x0, x29, #0x48
    7b7c:	mov	w1, #0x2                   	// #2
    7b80:	bl	5440 <mpfr_init2@plt>
    7b84:	sub	x0, x29, #0x88
    7b88:	mov	w1, #0x2                   	// #2
    7b8c:	bl	5440 <mpfr_init2@plt>
    7b90:	sub	x0, x29, #0xa8
    7b94:	mov	w1, #0x2                   	// #2
    7b98:	bl	5440 <mpfr_init2@plt>
    7b9c:	add	x0, sp, #0xb8
    7ba0:	mov	w1, #0x2                   	// #2
    7ba4:	bl	5440 <mpfr_init2@plt>
    7ba8:	mov	w23, #0x1                   	// #1
    7bac:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    7bb0:	str	w23, [sp, #192]
    7bb4:	str	x8, [sp, #200]
    7bb8:	ldr	x1, [x21]
    7bbc:	add	x0, sp, #0x50
    7bc0:	bl	5440 <mpfr_init2@plt>
    7bc4:	ldr	x1, [x21, #32]
    7bc8:	sub	x0, x29, #0x68
    7bcc:	bl	5440 <mpfr_init2@plt>
    7bd0:	ldr	x8, [x20, #16]
    7bd4:	add	x0, sp, #0x90
    7bd8:	mov	x2, xzr
    7bdc:	mov	w3, wzr
    7be0:	cmp	x8, x26
    7be4:	cset	w1, eq  // eq = none
    7be8:	bl	5130 <mpfr_set_ui_2exp@plt>
    7bec:	ldr	x8, [x20, #16]
    7bf0:	cmp	x8, x24
    7bf4:	b.eq	7bfc <mpc_div@@Base+0x1d8>  // b.none
    7bf8:	ldr	w23, [x20, #8]
    7bfc:	add	x0, sp, #0x90
    7c00:	add	x1, sp, #0x90
    7c04:	mov	w2, wzr
    7c08:	mov	w3, w23
    7c0c:	bl	51d0 <mpfr_set4@plt>
    7c10:	ldr	x8, [x20, #48]
    7c14:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    7c18:	sub	x0, x29, #0x48
    7c1c:	mov	x2, xzr
    7c20:	cmp	x8, x9
    7c24:	cset	w1, eq  // eq = none
    7c28:	mov	w3, wzr
    7c2c:	bl	5130 <mpfr_set_ui_2exp@plt>
    7c30:	ldr	x8, [x20, #48]
    7c34:	cmp	x8, x24
    7c38:	b.ne	7e48 <mpc_div@@Base+0x424>  // b.any
    7c3c:	mov	w3, #0x1                   	// #1
    7c40:	b	7e4c <mpc_div@@Base+0x428>
    7c44:	mov	x0, x21
    7c48:	bl	54d0 <mpfr_number_p@plt>
    7c4c:	cbz	w0, 7d94 <mpc_div@@Base+0x370>
    7c50:	add	x22, x21, #0x20
    7c54:	mov	x0, x22
    7c58:	bl	54d0 <mpfr_number_p@plt>
    7c5c:	cbz	w0, 7d94 <mpc_div@@Base+0x370>
    7c60:	mov	x0, x20
    7c64:	bl	54d0 <mpfr_number_p@plt>
    7c68:	cbz	w0, 7d94 <mpc_div@@Base+0x370>
    7c6c:	add	x26, x20, #0x20
    7c70:	mov	x0, x26
    7c74:	bl	54d0 <mpfr_number_p@plt>
    7c78:	cbz	w0, 7d94 <mpc_div@@Base+0x370>
    7c7c:	ldr	x8, [x20, #48]
    7c80:	mov	x27, #0x8000000000000001    	// #-9223372036854775807
    7c84:	cmp	x8, x27
    7c88:	b.ne	809c <mpc_div@@Base+0x678>  // b.any
    7c8c:	ldr	w8, [x21, #8]
    7c90:	ldr	w10, [x21, #40]
    7c94:	ldr	w11, [x20, #8]
    7c98:	ldr	w12, [x20, #40]
    7c9c:	mov	w9, #0x1                   	// #1
    7ca0:	cmp	w8, #0x0
    7ca4:	cneg	w8, w9, lt  // lt = tstop
    7ca8:	cmp	w10, #0x0
    7cac:	str	w8, [sp, #72]
    7cb0:	cneg	w8, w9, lt  // lt = tstop
    7cb4:	cmp	w11, #0x0
    7cb8:	add	x25, x19, #0x20
    7cbc:	cneg	w28, w9, lt  // lt = tstop
    7cc0:	cmp	w12, #0x0
    7cc4:	mov	x0, x25
    7cc8:	mov	x1, x22
    7ccc:	mov	x2, x20
    7cd0:	mov	w3, w23
    7cd4:	str	w8, [sp, #68]
    7cd8:	cneg	w26, w9, lt  // lt = tstop
    7cdc:	bl	5150 <mpfr_div@plt>
    7ce0:	mov	w22, w0
    7ce4:	mov	x0, x19
    7ce8:	mov	x1, x21
    7cec:	mov	x2, x20
    7cf0:	mov	w3, w24
    7cf4:	bl	5150 <mpfr_div@plt>
    7cf8:	ldr	x8, [x19, #16]
    7cfc:	mov	w20, w0
    7d00:	cmp	x8, x27
    7d04:	b.ne	7d30 <mpc_div@@Base+0x30c>  // b.any
    7d08:	ldr	w8, [sp, #68]
    7d0c:	mov	x0, x19
    7d10:	mov	x1, x19
    7d14:	mov	w2, wzr
    7d18:	cmp	w8, w26
    7d1c:	ldr	w8, [sp, #72]
    7d20:	ccmp	w8, w28, #0x4, ne  // ne = any
    7d24:	mov	w8, #0xffffffff            	// #-1
    7d28:	cneg	w3, w8, eq  // eq = none
    7d2c:	bl	51d0 <mpfr_set4@plt>
    7d30:	ldr	x8, [x19, #48]
    7d34:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    7d38:	cmp	x8, x9
    7d3c:	b.ne	7d68 <mpc_div@@Base+0x344>  // b.any
    7d40:	ldr	w8, [sp, #72]
    7d44:	mov	x0, x25
    7d48:	mov	x1, x25
    7d4c:	mov	w2, wzr
    7d50:	cmp	w8, w26
    7d54:	ldr	w8, [sp, #68]
    7d58:	ccmp	w8, w28, #0x4, eq  // eq = none
    7d5c:	mov	w8, #0xffffffff            	// #-1
    7d60:	cneg	w3, w8, eq  // eq = none
    7d64:	bl	51d0 <mpfr_set4@plt>
    7d68:	cmp	w20, #0x0
    7d6c:	mov	w8, #0x2                   	// #2
    7d70:	cset	w9, ne  // ne = any
    7d74:	csel	w8, w8, w9, lt  // lt = tstop
    7d78:	cmp	w22, #0x0
    7d7c:	cset	w9, ne  // ne = any
    7d80:	lsl	w9, w9, #2
    7d84:	mov	w10, #0x8                   	// #8
    7d88:	csel	w9, w10, w9, lt  // lt = tstop
    7d8c:	orr	w0, w8, w9
    7d90:	b	8020 <mpc_div@@Base+0x5fc>
    7d94:	mov	x0, x19
    7d98:	bl	4ef0 <mpc_set_nan@plt>
    7d9c:	mov	w0, wzr
    7da0:	b	8020 <mpc_div@@Base+0x5fc>
    7da4:	mov	w23, wzr
    7da8:	ldr	x9, [x21, #48]
    7dac:	cmp	x9, x8
    7db0:	b.ne	7e2c <mpc_div@@Base+0x408>  // b.any
    7db4:	ldr	w21, [x21, #40]
    7db8:	mov	w8, #0x1                   	// #1
    7dbc:	cmp	w21, #0x0
    7dc0:	cneg	w8, w8, lt  // lt = tstop
    7dc4:	cbz	w23, 7e30 <mpc_div@@Base+0x40c>
    7dc8:	add	x0, sp, #0x90
    7dcc:	mov	w1, #0x2                   	// #2
    7dd0:	bl	5440 <mpfr_init2@plt>
    7dd4:	add	x0, sp, #0x90
    7dd8:	cmp	w23, #0x1
    7ddc:	b.ne	8040 <mpc_div@@Base+0x61c>  // b.any
    7de0:	mov	x1, x20
    7de4:	mov	x2, x22
    7de8:	mov	w3, wzr
    7dec:	tbnz	w21, #31, 8570 <mpc_div@@Base+0xb4c>
    7df0:	bl	4e60 <mpfr_add@plt>
    7df4:	ldr	w8, [sp, #152]
    7df8:	ldr	x9, [sp, #160]
    7dfc:	mov	w23, #0x1                   	// #1
    7e00:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    7e04:	cmp	w8, #0x0
    7e08:	cneg	w8, w23, lt  // lt = tstop
    7e0c:	cmp	x9, x10
    7e10:	add	x0, sp, #0x90
    7e14:	mov	x1, x20
    7e18:	mov	x2, x22
    7e1c:	mov	w3, wzr
    7e20:	csel	w21, wzr, w8, eq  // eq = none
    7e24:	bl	4a60 <mpfr_sub@plt>
    7e28:	b	8088 <mpc_div@@Base+0x664>
    7e2c:	mov	w8, wzr
    7e30:	ldr	x9, [x20, #16]
    7e34:	mov	x12, #0x8000000000000001    	// #-9223372036854775807
    7e38:	cmp	x9, x12
    7e3c:	b.ne	7f54 <mpc_div@@Base+0x530>  // b.any
    7e40:	mov	w11, wzr
    7e44:	b	7f64 <mpc_div@@Base+0x540>
    7e48:	ldr	w3, [x20, #40]
    7e4c:	sub	x0, x29, #0x48
    7e50:	sub	x1, x29, #0x48
    7e54:	mov	w2, wzr
    7e58:	bl	51d0 <mpfr_set4@plt>
    7e5c:	add	x0, sp, #0x50
    7e60:	add	x2, sp, #0x90
    7e64:	mov	x1, x21
    7e68:	mov	w3, wzr
    7e6c:	bl	4b70 <mpfr_mul@plt>
    7e70:	sub	x0, x29, #0x68
    7e74:	sub	x2, x29, #0x48
    7e78:	mov	x1, x22
    7e7c:	mov	w3, wzr
    7e80:	bl	4b70 <mpfr_mul@plt>
    7e84:	sub	x0, x29, #0x88
    7e88:	add	x1, sp, #0x50
    7e8c:	sub	x2, x29, #0x68
    7e90:	mov	w3, wzr
    7e94:	bl	4e60 <mpfr_add@plt>
    7e98:	sub	x0, x29, #0x68
    7e9c:	add	x2, sp, #0x90
    7ea0:	mov	x1, x22
    7ea4:	mov	w3, wzr
    7ea8:	bl	4b70 <mpfr_mul@plt>
    7eac:	add	x0, sp, #0x50
    7eb0:	sub	x2, x29, #0x48
    7eb4:	mov	x1, x21
    7eb8:	mov	w3, wzr
    7ebc:	bl	4b70 <mpfr_mul@plt>
    7ec0:	sub	x0, x29, #0xa8
    7ec4:	sub	x1, x29, #0x68
    7ec8:	add	x2, sp, #0x50
    7ecc:	mov	w3, wzr
    7ed0:	bl	4a60 <mpfr_sub@plt>
    7ed4:	ldur	x8, [x29, #-120]
    7ed8:	ldur	w9, [x29, #-128]
    7edc:	add	x1, sp, #0xb8
    7ee0:	mov	x0, x19
    7ee4:	cmp	x8, x24
    7ee8:	csinc	w3, w9, wzr, ne  // ne = any
    7eec:	mov	w2, wzr
    7ef0:	bl	51d0 <mpfr_set4@plt>
    7ef4:	ldur	x8, [x29, #-152]
    7ef8:	ldur	w9, [x29, #-160]
    7efc:	add	x0, x19, #0x20
    7f00:	add	x1, sp, #0xb8
    7f04:	cmp	x8, x24
    7f08:	csinc	w3, w9, wzr, ne  // ne = any
    7f0c:	mov	w2, wzr
    7f10:	bl	51d0 <mpfr_set4@plt>
    7f14:	add	x0, sp, #0x90
    7f18:	bl	4d60 <mpfr_clear@plt>
    7f1c:	sub	x0, x29, #0x48
    7f20:	bl	4d60 <mpfr_clear@plt>
    7f24:	sub	x0, x29, #0x88
    7f28:	bl	4d60 <mpfr_clear@plt>
    7f2c:	sub	x0, x29, #0xa8
    7f30:	bl	4d60 <mpfr_clear@plt>
    7f34:	add	x0, sp, #0xb8
    7f38:	bl	4d60 <mpfr_clear@plt>
    7f3c:	add	x0, sp, #0x50
    7f40:	bl	4d60 <mpfr_clear@plt>
    7f44:	sub	x0, x29, #0x68
    7f48:	bl	4d60 <mpfr_clear@plt>
    7f4c:	mov	w0, wzr
    7f50:	b	8020 <mpc_div@@Base+0x5fc>
    7f54:	ldr	w10, [x20, #8]
    7f58:	cmp	w10, #0x0
    7f5c:	mov	w10, #0x1                   	// #1
    7f60:	cneg	w11, w10, lt  // lt = tstop
    7f64:	ldr	x10, [x20, #48]
    7f68:	cmp	x10, x12
    7f6c:	b.ne	7f78 <mpc_div@@Base+0x554>  // b.any
    7f70:	mov	w12, wzr
    7f74:	b	7f88 <mpc_div@@Base+0x564>
    7f78:	ldr	w12, [x20, #40]
    7f7c:	cmp	w12, #0x0
    7f80:	mov	w12, #0x1                   	// #1
    7f84:	cneg	w12, w12, lt  // lt = tstop
    7f88:	mov	x13, #0x8000000000000001    	// #-9223372036854775807
    7f8c:	cmp	x9, x13
    7f90:	mul	w9, w11, w23
    7f94:	b.ne	7fa0 <mpc_div@@Base+0x57c>  // b.any
    7f98:	mov	w11, wzr
    7f9c:	b	7fb0 <mpc_div@@Base+0x58c>
    7fa0:	ldr	w11, [x20, #8]
    7fa4:	cmp	w11, #0x0
    7fa8:	mov	w11, #0x1                   	// #1
    7fac:	cneg	w11, w11, lt  // lt = tstop
    7fb0:	madd	w21, w12, w8, w9
    7fb4:	cmp	x10, x13
    7fb8:	mul	w8, w11, w8
    7fbc:	b.ne	7fe8 <mpc_div@@Base+0x5c4>  // b.any
    7fc0:	mov	w9, wzr
    7fc4:	msub	w20, wzr, w23, w8
    7fc8:	mov	x0, x19
    7fcc:	cbnz	w21, 8004 <mpc_div@@Base+0x5e0>
    7fd0:	bl	4a40 <mpfr_set_nan@plt>
    7fd4:	add	x0, x19, #0x20
    7fd8:	cbnz	w20, 8014 <mpc_div@@Base+0x5f0>
    7fdc:	bl	4a40 <mpfr_set_nan@plt>
    7fe0:	mov	w0, wzr
    7fe4:	b	8020 <mpc_div@@Base+0x5fc>
    7fe8:	ldr	w9, [x20, #40]
    7fec:	cmp	w9, #0x0
    7ff0:	mov	w9, #0x1                   	// #1
    7ff4:	cneg	w9, w9, lt  // lt = tstop
    7ff8:	msub	w20, w9, w23, w8
    7ffc:	mov	x0, x19
    8000:	cbz	w21, 7fd0 <mpc_div@@Base+0x5ac>
    8004:	mov	w1, w21
    8008:	bl	5120 <mpfr_set_inf@plt>
    800c:	add	x0, x19, #0x20
    8010:	cbz	w20, 7fdc <mpc_div@@Base+0x5b8>
    8014:	mov	w1, w20
    8018:	bl	5120 <mpfr_set_inf@plt>
    801c:	mov	w0, wzr
    8020:	ldp	x20, x19, [sp, #464]
    8024:	ldp	x22, x21, [sp, #448]
    8028:	ldp	x24, x23, [sp, #432]
    802c:	ldp	x26, x25, [sp, #416]
    8030:	ldp	x28, x27, [sp, #400]
    8034:	ldp	x29, x30, [sp, #384]
    8038:	add	sp, sp, #0x1e0
    803c:	ret
    8040:	tbnz	w21, #31, 85bc <mpc_div@@Base+0xb98>
    8044:	mov	x1, x22
    8048:	mov	x2, x20
    804c:	mov	w3, wzr
    8050:	bl	4a60 <mpfr_sub@plt>
    8054:	ldr	w8, [sp, #152]
    8058:	ldr	x9, [sp, #160]
    805c:	mov	w23, #0x1                   	// #1
    8060:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    8064:	cmp	w8, #0x0
    8068:	cneg	w8, w23, lt  // lt = tstop
    806c:	cmp	x9, x10
    8070:	add	x0, sp, #0x90
    8074:	mov	x1, x20
    8078:	mov	x2, x22
    807c:	mov	w3, wzr
    8080:	csel	w21, wzr, w8, eq  // eq = none
    8084:	bl	4e60 <mpfr_add@plt>
    8088:	ldr	w9, [sp, #152]
    808c:	ldr	x8, [sp, #160]
    8090:	cmp	w9, #0x0
    8094:	cneg	w9, w23, lt  // lt = tstop
    8098:	b	8614 <mpc_div@@Base+0xbf0>
    809c:	ldr	x8, [x20, #16]
    80a0:	cmp	x8, x27
    80a4:	b.ne	820c <mpc_div@@Base+0x7e8>  // b.any
    80a8:	cmp	x19, x21
    80ac:	ldr	x8, [x21, #16]
    80b0:	ldr	w9, [x21, #8]
    80b4:	cset	w12, eq  // eq = none
    80b8:	cmp	x19, x20
    80bc:	ldr	w11, [x21, #40]
    80c0:	cset	w13, eq  // eq = none
    80c4:	orr	w27, w12, w13
    80c8:	ldr	w12, [x20, #8]
    80cc:	str	x8, [sp, #72]
    80d0:	sub	x8, x29, #0x48
    80d4:	ldr	w13, [x20, #40]
    80d8:	cmp	w27, #0x0
    80dc:	mov	w10, #0x1                   	// #1
    80e0:	csel	x25, x8, x19, ne  // ne = any
    80e4:	cmp	w9, #0x0
    80e8:	cneg	w8, w10, lt  // lt = tstop
    80ec:	cmp	w11, #0x0
    80f0:	str	w8, [sp, #68]
    80f4:	cneg	w8, w10, lt  // lt = tstop
    80f8:	cmp	w12, #0x0
    80fc:	str	w8, [sp, #64]
    8100:	cneg	w8, w10, lt  // lt = tstop
    8104:	cmp	w13, #0x0
    8108:	cneg	w28, w10, lt  // lt = tstop
    810c:	str	w8, [sp, #60]
    8110:	cbz	w27, 8124 <mpc_div@@Base+0x700>
    8114:	ldr	x1, [x19]
    8118:	ldr	x2, [x19, #32]
    811c:	sub	x0, x29, #0x48
    8120:	bl	53c0 <mpc_init3@plt>
    8124:	ldp	q1, q0, [x26]
    8128:	add	x2, sp, #0x90
    812c:	mov	x0, x25
    8130:	mov	x1, x22
    8134:	mov	w3, w24
    8138:	stp	q1, q0, [sp, #144]
    813c:	bl	5150 <mpfr_div@plt>
    8140:	mov	w20, w0
    8144:	add	x0, sp, #0x90
    8148:	add	x1, sp, #0x90
    814c:	mov	w2, wzr
    8150:	bl	4b80 <mpfr_neg@plt>
    8154:	add	x0, x25, #0x20
    8158:	add	x2, sp, #0x90
    815c:	mov	x1, x21
    8160:	mov	w3, w23
    8164:	bl	5150 <mpfr_div@plt>
    8168:	mov	w21, w0
    816c:	cbz	w27, 8188 <mpc_div@@Base+0x764>
    8170:	sub	x1, x29, #0x48
    8174:	mov	x0, x19
    8178:	mov	w2, wzr
    817c:	bl	5580 <mpc_set@plt>
    8180:	sub	x0, x29, #0x48
    8184:	bl	4a10 <mpc_clear@plt>
    8188:	ldr	x8, [x19, #16]
    818c:	mov	x22, #0x8000000000000001    	// #-9223372036854775807
    8190:	cmp	x8, x22
    8194:	b.ne	81c0 <mpc_div@@Base+0x79c>  // b.any
    8198:	ldp	w9, w8, [sp, #60]
    819c:	mov	x0, x19
    81a0:	mov	x1, x19
    81a4:	mov	w2, wzr
    81a8:	cmp	w8, w28
    81ac:	ldr	w8, [sp, #68]
    81b0:	ccmp	w8, w9, #0x4, ne  // ne = any
    81b4:	mov	w8, #0xffffffff            	// #-1
    81b8:	cneg	w3, w8, eq  // eq = none
    81bc:	bl	51d0 <mpfr_set4@plt>
    81c0:	ldr	x8, [sp, #72]
    81c4:	cmp	x8, x22
    81c8:	b.ne	81f4 <mpc_div@@Base+0x7d0>  // b.any
    81cc:	ldr	w8, [sp, #68]
    81d0:	add	x0, x19, #0x20
    81d4:	mov	x1, x0
    81d8:	mov	w2, wzr
    81dc:	cmp	w8, w28
    81e0:	ldp	w9, w8, [sp, #60]
    81e4:	ccmp	w8, w9, #0x4, eq  // eq = none
    81e8:	mov	w8, #0xffffffff            	// #-1
    81ec:	cneg	w3, w8, eq  // eq = none
    81f0:	bl	51d0 <mpfr_set4@plt>
    81f4:	cmp	w20, #0x0
    81f8:	mov	w8, #0x2                   	// #2
    81fc:	cset	w9, ne  // ne = any
    8200:	csel	w8, w8, w9, lt  // lt = tstop
    8204:	cmp	w21, #0x0
    8208:	b	8944 <mpc_div@@Base+0xf20>
    820c:	mov	x10, x19
    8210:	ldr	x8, [x19]
    8214:	ldr	x9, [x10, #32]!
    8218:	sub	x0, x29, #0x48
    821c:	mov	w1, #0x2                   	// #2
    8220:	sub	x28, x29, #0x48
    8224:	cmp	x8, x9
    8228:	str	x10, [sp, #16]
    822c:	csel	x22, x8, x9, gt
    8230:	bl	4cf0 <mpc_init2@plt>
    8234:	sub	x0, x29, #0x68
    8238:	bl	4aa0 <mpfr_init@plt>
    823c:	ldp	q1, q0, [x20]
    8240:	add	x8, sp, #0x50
    8244:	add	x0, x8, #0x20
    8248:	mov	x1, x0
    824c:	stp	q1, q0, [sp, #80]
    8250:	ldp	q1, q0, [x26]
    8254:	mov	w2, wzr
    8258:	stp	q1, q0, [sp, #112]
    825c:	bl	4b80 <mpfr_neg@plt>
    8260:	bl	52f0 <mpfr_underflow_p@plt>
    8264:	str	w0, [sp, #4]
    8268:	bl	54e0 <mpfr_overflow_p@plt>
    826c:	mov	w8, wzr
    8270:	cmp	w24, #0x0
    8274:	add	x9, x28, #0x20
    8278:	mov	w28, w8
    827c:	cset	w8, eq  // eq = none
    8280:	cmp	w23, #0x0
    8284:	mov	w27, wzr
    8288:	mov	w26, wzr
    828c:	str	x8, [sp, #24]
    8290:	cset	w8, eq  // eq = none
    8294:	str	w0, [sp]
    8298:	str	wzr, [sp, #60]
    829c:	str	wzr, [sp, #36]
    82a0:	str	wzr, [sp, #72]
    82a4:	str	x9, [sp, #48]
    82a8:	str	x8, [sp, #8]
    82ac:	cmp	w27, #0x1
    82b0:	str	w28, [sp, #40]
    82b4:	b.hi	82c8 <mpc_div@@Base+0x8a4>  // b.pmore
    82b8:	mov	x0, x22
    82bc:	bl	4d20 <mpc_ceil_log2@plt>
    82c0:	add	x8, x0, #0x5
    82c4:	b	82d4 <mpc_div@@Base+0x8b0>
    82c8:	cmp	x22, #0x0
    82cc:	cinc	x8, x22, lt  // lt = tstop
    82d0:	asr	x8, x8, #1
    82d4:	add	x22, x8, x22
    82d8:	sub	x0, x29, #0x48
    82dc:	mov	x1, x22
    82e0:	str	w26, [sp, #44]
    82e4:	bl	4c00 <mpc_set_prec@plt>
    82e8:	sub	x0, x29, #0x68
    82ec:	mov	x1, x22
    82f0:	bl	4c80 <mpfr_set_prec@plt>
    82f4:	bl	4e20 <mpfr_clear_underflow@plt>
    82f8:	bl	4a50 <mpfr_clear_overflow@plt>
    82fc:	sub	x0, x29, #0x68
    8300:	mov	w2, #0x2                   	// #2
    8304:	mov	x1, x20
    8308:	bl	4ea0 <mpc_norm@plt>
    830c:	mov	w28, w0
    8310:	bl	52f0 <mpfr_underflow_p@plt>
    8314:	mov	w23, w0
    8318:	bl	54e0 <mpfr_overflow_p@plt>
    831c:	stp	w0, w23, [sp, #64]
    8320:	cbz	w23, 8334 <mpc_div@@Base+0x910>
    8324:	mov	w8, #0x1                   	// #1
    8328:	stur	w8, [x29, #-96]
    832c:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    8330:	stur	x8, [x29, #-88]
    8334:	bl	4e20 <mpfr_clear_underflow@plt>
    8338:	bl	4a50 <mpfr_clear_overflow@plt>
    833c:	sub	x0, x29, #0x48
    8340:	add	x2, sp, #0x50
    8344:	mov	w3, #0x11                  	// #17
    8348:	mov	x1, x21
    834c:	bl	4ed0 <mpc_mul@plt>
    8350:	and	w8, w0, #0x3
    8354:	tst	w0, #0x3
    8358:	asr	w9, w0, #2
    835c:	cset	w10, ne  // ne = any
    8360:	cmp	w8, #0x2
    8364:	csinv	w23, w10, wzr, ne  // ne = any
    8368:	cmp	w9, #0x0
    836c:	cset	w8, ne  // ne = any
    8370:	cmp	w9, #0x2
    8374:	csinv	w26, w8, wzr, ne  // ne = any
    8378:	bl	52f0 <mpfr_underflow_p@plt>
    837c:	mov	w24, w0
    8380:	bl	54e0 <mpfr_overflow_p@plt>
    8384:	cbnz	w0, 8634 <mpc_div@@Base+0xc10>
    8388:	cbnz	w28, 8394 <mpc_div@@Base+0x970>
    838c:	cbz	w23, 84d8 <mpc_div@@Base+0xab4>
    8390:	cbz	w26, 84d8 <mpc_div@@Base+0xab4>
    8394:	sub	x0, x29, #0x68
    8398:	sub	x2, x29, #0x68
    839c:	mov	w1, #0x1                   	// #1
    83a0:	mov	w3, #0x1                   	// #1
    83a4:	bl	4f70 <mpfr_ui_div@plt>
    83a8:	orr	w8, w0, w28
    83ac:	cbz	w8, 83d4 <mpc_div@@Base+0x9b0>
    83b0:	ldur	x8, [x29, #-56]
    83b4:	ldur	x9, [x29, #-24]
    83b8:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    83bc:	cmp	x8, x10
    83c0:	cset	w8, ne  // ne = any
    83c4:	cmp	x9, x10
    83c8:	orr	w23, w23, w8
    83cc:	cset	w8, ne  // ne = any
    83d0:	orr	w26, w26, w8
    83d4:	bl	4e20 <mpfr_clear_underflow@plt>
    83d8:	bl	4a50 <mpfr_clear_overflow@plt>
    83dc:	sub	x0, x29, #0x48
    83e0:	sub	x1, x29, #0x48
    83e4:	sub	x2, x29, #0x68
    83e8:	mov	w3, #0x1                   	// #1
    83ec:	bl	4b70 <mpfr_mul@plt>
    83f0:	orr	w23, w0, w23
    83f4:	bl	52f0 <mpfr_underflow_p@plt>
    83f8:	mov	w28, w0
    83fc:	bl	54e0 <mpfr_overflow_p@plt>
    8400:	str	w0, [sp, #60]
    8404:	cbz	w23, 8438 <mpc_div@@Base+0xa14>
    8408:	ldr	w8, [sp, #60]
    840c:	orr	w8, w8, w28
    8410:	cbnz	w8, 8438 <mpc_div@@Base+0xa14>
    8414:	ldr	x8, [x19]
    8418:	ldr	x9, [sp, #24]
    841c:	sub	x1, x22, #0x4
    8420:	sub	x0, x29, #0x48
    8424:	mov	w3, #0x1                   	// #1
    8428:	add	x4, x8, x9
    842c:	mov	w2, wzr
    8430:	bl	5450 <mpfr_can_round@plt>
    8434:	cbz	w0, 8564 <mpc_div@@Base+0xb40>
    8438:	bl	4e20 <mpfr_clear_underflow@plt>
    843c:	bl	4a50 <mpfr_clear_overflow@plt>
    8440:	ldr	x0, [sp, #48]
    8444:	sub	x2, x29, #0x68
    8448:	mov	w3, #0x1                   	// #1
    844c:	mov	w8, #0x1                   	// #1
    8450:	mov	x1, x0
    8454:	str	w8, [sp, #72]
    8458:	bl	4b70 <mpfr_mul@plt>
    845c:	orr	w23, w0, w26
    8460:	bl	52f0 <mpfr_underflow_p@plt>
    8464:	mov	w26, w0
    8468:	bl	54e0 <mpfr_overflow_p@plt>
    846c:	str	w0, [sp, #36]
    8470:	cbz	w23, 84a8 <mpc_div@@Base+0xa84>
    8474:	orr	w8, w0, w26
    8478:	cbnz	w8, 84a8 <mpc_div@@Base+0xa84>
    847c:	ldp	x9, x8, [sp, #8]
    8480:	ldr	x0, [sp, #48]
    8484:	sub	x1, x22, #0x4
    8488:	mov	w3, #0x1                   	// #1
    848c:	ldr	x8, [x8]
    8490:	mov	w2, wzr
    8494:	add	x4, x8, x9
    8498:	bl	5450 <mpfr_can_round@plt>
    849c:	cmp	w0, #0x0
    84a0:	cset	w8, ne  // ne = any
    84a4:	str	w8, [sp, #72]
    84a8:	mov	w8, #0x1                   	// #1
    84ac:	ldp	w10, w9, [sp, #68]
    84b0:	cmp	w9, #0x0
    84b4:	ldr	w9, [sp, #64]
    84b8:	orr	w9, w9, w10
    84bc:	orr	w10, w9, w24
    84c0:	cset	w9, ne  // ne = any
    84c4:	cbnz	w10, 8664 <mpc_div@@Base+0xc40>
    84c8:	and	w8, w8, w9
    84cc:	add	w27, w27, #0x1
    84d0:	cbz	w8, 82ac <mpc_div@@Base+0x888>
    84d4:	b	8664 <mpc_div@@Base+0xc40>
    84d8:	bl	4e20 <mpfr_clear_underflow@plt>
    84dc:	bl	4a50 <mpfr_clear_overflow@plt>
    84e0:	sub	x0, x29, #0x48
    84e4:	sub	x1, x29, #0x48
    84e8:	sub	x2, x29, #0x68
    84ec:	mov	w3, #0x1                   	// #1
    84f0:	bl	5150 <mpfr_div@plt>
    84f4:	orr	w23, w0, w23
    84f8:	bl	52f0 <mpfr_underflow_p@plt>
    84fc:	mov	w28, w0
    8500:	bl	54e0 <mpfr_overflow_p@plt>
    8504:	str	w0, [sp, #60]
    8508:	cbz	w23, 853c <mpc_div@@Base+0xb18>
    850c:	ldr	w8, [sp, #60]
    8510:	orr	w8, w8, w28
    8514:	cbnz	w8, 853c <mpc_div@@Base+0xb18>
    8518:	ldr	x8, [x19]
    851c:	ldr	x9, [sp, #24]
    8520:	sub	x1, x22, #0x4
    8524:	sub	x0, x29, #0x48
    8528:	mov	w3, #0x1                   	// #1
    852c:	add	x4, x8, x9
    8530:	mov	w2, wzr
    8534:	bl	5450 <mpfr_can_round@plt>
    8538:	cbz	w0, 8564 <mpc_div@@Base+0xb40>
    853c:	bl	4e20 <mpfr_clear_underflow@plt>
    8540:	bl	4a50 <mpfr_clear_overflow@plt>
    8544:	ldr	x0, [sp, #48]
    8548:	sub	x2, x29, #0x68
    854c:	mov	w3, #0x1                   	// #1
    8550:	mov	w8, #0x1                   	// #1
    8554:	mov	x1, x0
    8558:	str	w8, [sp, #72]
    855c:	bl	5150 <mpfr_div@plt>
    8560:	b	845c <mpc_div@@Base+0xa38>
    8564:	ldr	w26, [sp, #44]
    8568:	mov	w8, wzr
    856c:	b	84ac <mpc_div@@Base+0xa88>
    8570:	bl	4a60 <mpfr_sub@plt>
    8574:	ldr	w8, [sp, #152]
    8578:	ldr	x9, [sp, #160]
    857c:	mov	w10, #0x1                   	// #1
    8580:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
    8584:	cmp	w8, #0x0
    8588:	cneg	w8, w10, lt  // lt = tstop
    858c:	cmp	x9, x11
    8590:	add	x0, sp, #0x90
    8594:	mov	x1, x20
    8598:	mov	x2, x22
    859c:	mov	w3, wzr
    85a0:	csel	w21, wzr, w8, eq  // eq = none
    85a4:	bl	4e60 <mpfr_add@plt>
    85a8:	ldr	w9, [sp, #152]
    85ac:	ldr	x8, [sp, #160]
    85b0:	cmp	w9, #0x0
    85b4:	mov	w9, #0xffffffff            	// #-1
    85b8:	b	8610 <mpc_div@@Base+0xbec>
    85bc:	mov	x1, x20
    85c0:	mov	x2, x22
    85c4:	mov	w3, wzr
    85c8:	bl	4e60 <mpfr_add@plt>
    85cc:	ldr	w8, [sp, #152]
    85d0:	ldr	x9, [sp, #160]
    85d4:	mov	w10, #0xffffffff            	// #-1
    85d8:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
    85dc:	cmp	w8, #0x0
    85e0:	cneg	w8, w10, lt  // lt = tstop
    85e4:	cmp	x9, x11
    85e8:	add	x0, sp, #0x90
    85ec:	mov	x1, x22
    85f0:	mov	x2, x20
    85f4:	mov	w3, wzr
    85f8:	csel	w21, wzr, w8, eq  // eq = none
    85fc:	bl	4a60 <mpfr_sub@plt>
    8600:	ldr	w9, [sp, #152]
    8604:	ldr	x8, [sp, #160]
    8608:	cmp	w9, #0x0
    860c:	mov	w9, #0x1                   	// #1
    8610:	cneg	w9, w9, lt  // lt = tstop
    8614:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    8618:	cmp	x8, x10
    861c:	add	x0, sp, #0x90
    8620:	csel	w20, wzr, w9, eq  // eq = none
    8624:	bl	4d60 <mpfr_clear@plt>
    8628:	mov	x0, x19
    862c:	cbnz	w21, 8004 <mpc_div@@Base+0x5e0>
    8630:	b	7fd0 <mpc_div@@Base+0x5ac>
    8634:	ldur	x8, [x29, #-56]
    8638:	mov	x9, #0x2                   	// #2
    863c:	movk	x9, #0x8000, lsl #48
    8640:	cmp	x8, x9
    8644:	b.gt	86b4 <mpc_div@@Base+0xc90>
    8648:	ldr	w27, [sp]
    864c:	mov	x28, #0x2                   	// #2
    8650:	movk	x28, #0x8000, lsl #48
    8654:	cmp	x8, x28
    8658:	b.ne	8708 <mpc_div@@Base+0xce4>  // b.any
    865c:	bl	4b00 <mpfr_set_erangeflag@plt>
    8660:	b	8708 <mpc_div@@Base+0xce4>
    8664:	sub	x1, x29, #0x48
    8668:	mov	x0, x19
    866c:	mov	w2, w25
    8670:	stp	w28, w26, [sp, #40]
    8674:	bl	5580 <mpc_set@plt>
    8678:	and	w8, w0, #0x3
    867c:	tst	w0, #0x3
    8680:	asr	w9, w0, #2
    8684:	cset	w10, ne  // ne = any
    8688:	cmp	w8, #0x2
    868c:	ldp	w27, w25, [sp]
    8690:	csinv	w23, w10, wzr, ne  // ne = any
    8694:	cmp	w9, #0x0
    8698:	cset	w8, ne  // ne = any
    869c:	cmp	w9, #0x2
    86a0:	mov	x28, #0x2                   	// #2
    86a4:	mov	w20, wzr
    86a8:	csinv	w26, w8, wzr, ne  // ne = any
    86ac:	movk	x28, #0x8000, lsl #48
    86b0:	b	8794 <mpc_div@@Base+0xd70>
    86b4:	ldur	w20, [x29, #-64]
    86b8:	ldr	w27, [sp]
    86bc:	mov	x28, #0x2                   	// #2
    86c0:	movk	x28, #0x8000, lsl #48
    86c4:	cmp	w20, #0x1
    86c8:	b.lt	8704 <mpc_div@@Base+0xce0>  // b.tstop
    86cc:	sub	x0, x29, #0x48
    86d0:	bl	4e00 <mpfr_nextabove@plt>
    86d4:	ldur	x21, [x29, #-56]
    86d8:	sub	x0, x29, #0x48
    86dc:	bl	4bb0 <mpfr_nextbelow@plt>
    86e0:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    86e4:	cmp	x21, x8
    86e8:	b.ne	8708 <mpc_div@@Base+0xce4>  // b.any
    86ec:	sub	x0, x29, #0x48
    86f0:	mov	w1, w20
    86f4:	bl	5120 <mpfr_set_inf@plt>
    86f8:	mov	w8, #0x1                   	// #1
    86fc:	str	w8, [sp, #60]
    8700:	b	8708 <mpc_div@@Base+0xce4>
    8704:	tbnz	w20, #31, 895c <mpc_div@@Base+0xf38>
    8708:	ldur	x8, [x29, #-24]
    870c:	mov	x9, #0x2                   	// #2
    8710:	movk	x9, #0x8000, lsl #48
    8714:	cmp	x8, x9
    8718:	b.gt	872c <mpc_div@@Base+0xd08>
    871c:	cmp	x8, x28
    8720:	b.ne	877c <mpc_div@@Base+0xd58>  // b.any
    8724:	bl	4b00 <mpfr_set_erangeflag@plt>
    8728:	b	877c <mpc_div@@Base+0xd58>
    872c:	ldur	w20, [x29, #-32]
    8730:	cmp	w20, #0x1
    8734:	b.lt	8774 <mpc_div@@Base+0xd50>  // b.tstop
    8738:	ldr	x22, [sp, #48]
    873c:	mov	x0, x22
    8740:	bl	4e00 <mpfr_nextabove@plt>
    8744:	ldur	x21, [x29, #-24]
    8748:	mov	x0, x22
    874c:	bl	4bb0 <mpfr_nextbelow@plt>
    8750:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    8754:	cmp	x21, x8
    8758:	b.ne	877c <mpc_div@@Base+0xd58>  // b.any
    875c:	mov	x0, x22
    8760:	mov	w1, w20
    8764:	bl	5120 <mpfr_set_inf@plt>
    8768:	mov	w8, #0x1                   	// #1
    876c:	str	w8, [sp, #36]
    8770:	b	877c <mpc_div@@Base+0xd58>
    8774:	ldr	x22, [sp, #48]
    8778:	tbnz	w20, #31, 8974 <mpc_div@@Base+0xf50>
    877c:	sub	x1, x29, #0x48
    8780:	mov	x0, x19
    8784:	mov	w2, w25
    8788:	bl	5580 <mpc_set@plt>
    878c:	ldr	w25, [sp, #4]
    8790:	mov	w20, #0x1                   	// #1
    8794:	ldr	w8, [sp, #68]
    8798:	cmp	w8, #0x0
    879c:	cset	w8, eq  // eq = none
    87a0:	cmp	w24, #0x0
    87a4:	cset	w9, ne  // ne = any
    87a8:	orr	w21, w8, w9
    87ac:	cmp	w21, #0x1
    87b0:	b.ne	87fc <mpc_div@@Base+0xdd8>  // b.any
    87b4:	ldr	w8, [sp, #60]
    87b8:	cbnz	w8, 87fc <mpc_div@@Base+0xdd8>
    87bc:	ldr	w8, [sp, #64]
    87c0:	eor	w9, w20, #0x1
    87c4:	cmp	w8, #0x0
    87c8:	cset	w8, ne  // ne = any
    87cc:	and	w8, w8, w9
    87d0:	tbnz	w8, #0, 87dc <mpc_div@@Base+0xdb8>
    87d4:	ldr	w8, [sp, #40]
    87d8:	cbz	w8, 885c <mpc_div@@Base+0xe38>
    87dc:	ldur	w8, [x29, #-64]
    87e0:	mov	x0, x19
    87e4:	cmp	w8, #0x0
    87e8:	mov	w8, #0xffffffff            	// #-1
    87ec:	cneg	w23, w8, lt  // lt = tstop
    87f0:	neg	w1, w23
    87f4:	bl	4d10 <mpfr_set_zero@plt>
    87f8:	b	885c <mpc_div@@Base+0xe38>
    87fc:	ldur	x8, [x29, #-56]
    8800:	mov	x9, #0x2                   	// #2
    8804:	movk	x9, #0x8000, lsl #48
    8808:	cmp	x8, x9
    880c:	b.gt	8824 <mpc_div@@Base+0xe00>
    8810:	cmp	x8, x28
    8814:	b.ne	881c <mpc_div@@Base+0xdf8>  // b.any
    8818:	bl	4b00 <mpfr_set_erangeflag@plt>
    881c:	mov	w1, wzr
    8820:	b	8828 <mpc_div@@Base+0xe04>
    8824:	ldur	w1, [x29, #-64]
    8828:	mov	x0, x19
    882c:	bl	5120 <mpfr_set_inf@plt>
    8830:	ldur	x8, [x29, #-56]
    8834:	mov	x9, #0x2                   	// #2
    8838:	movk	x9, #0x8000, lsl #48
    883c:	cmp	x8, x9
    8840:	b.gt	8858 <mpc_div@@Base+0xe34>
    8844:	cmp	x8, x28
    8848:	b.ne	8850 <mpc_div@@Base+0xe2c>  // b.any
    884c:	bl	4b00 <mpfr_set_erangeflag@plt>
    8850:	mov	w23, wzr
    8854:	b	885c <mpc_div@@Base+0xe38>
    8858:	ldur	w23, [x29, #-64]
    885c:	ldr	w8, [sp, #36]
    8860:	cmp	w8, #0x0
    8864:	cset	w8, eq  // eq = none
    8868:	and	w8, w21, w8
    886c:	tbz	w8, #0, 88b0 <mpc_div@@Base+0xe8c>
    8870:	ldr	w8, [sp, #64]
    8874:	eor	w9, w20, #0x1
    8878:	cmp	w8, #0x0
    887c:	cset	w8, ne  // ne = any
    8880:	and	w8, w8, w9
    8884:	tbnz	w8, #0, 8890 <mpc_div@@Base+0xe6c>
    8888:	ldr	w8, [sp, #44]
    888c:	cbz	w8, 8910 <mpc_div@@Base+0xeec>
    8890:	ldur	w8, [x29, #-32]
    8894:	ldr	x0, [sp, #16]
    8898:	cmp	w8, #0x0
    889c:	mov	w8, #0xffffffff            	// #-1
    88a0:	cneg	w26, w8, lt  // lt = tstop
    88a4:	neg	w1, w26
    88a8:	bl	4d10 <mpfr_set_zero@plt>
    88ac:	b	8910 <mpc_div@@Base+0xeec>
    88b0:	ldur	x8, [x29, #-24]
    88b4:	mov	x9, #0x2                   	// #2
    88b8:	movk	x9, #0x8000, lsl #48
    88bc:	cmp	x8, x9
    88c0:	b.gt	88d8 <mpc_div@@Base+0xeb4>
    88c4:	cmp	x8, x28
    88c8:	b.ne	88d0 <mpc_div@@Base+0xeac>  // b.any
    88cc:	bl	4b00 <mpfr_set_erangeflag@plt>
    88d0:	mov	w1, wzr
    88d4:	b	88dc <mpc_div@@Base+0xeb8>
    88d8:	ldur	w1, [x29, #-32]
    88dc:	ldr	x0, [sp, #16]
    88e0:	bl	5120 <mpfr_set_inf@plt>
    88e4:	ldur	x8, [x29, #-24]
    88e8:	mov	x9, #0x2                   	// #2
    88ec:	movk	x9, #0x8000, lsl #48
    88f0:	cmp	x8, x9
    88f4:	b.gt	890c <mpc_div@@Base+0xee8>
    88f8:	cmp	x8, x28
    88fc:	b.ne	8904 <mpc_div@@Base+0xee0>  // b.any
    8900:	bl	4b00 <mpfr_set_erangeflag@plt>
    8904:	mov	w26, wzr
    8908:	b	8910 <mpc_div@@Base+0xeec>
    890c:	ldur	w26, [x29, #-32]
    8910:	sub	x0, x29, #0x48
    8914:	bl	4a10 <mpc_clear@plt>
    8918:	sub	x0, x29, #0x68
    891c:	bl	4d60 <mpfr_clear@plt>
    8920:	cbz	w25, 8928 <mpc_div@@Base+0xf04>
    8924:	bl	4990 <mpfr_set_underflow@plt>
    8928:	cbz	w27, 8930 <mpc_div@@Base+0xf0c>
    892c:	bl	5490 <mpfr_set_overflow@plt>
    8930:	cmp	w23, #0x0
    8934:	mov	w8, #0x2                   	// #2
    8938:	cset	w9, ne  // ne = any
    893c:	csel	w8, w8, w9, lt  // lt = tstop
    8940:	cmp	w26, #0x0
    8944:	cset	w9, ne  // ne = any
    8948:	lsl	w9, w9, #2
    894c:	mov	w10, #0x8                   	// #8
    8950:	csel	w9, w10, w9, lt  // lt = tstop
    8954:	orr	w0, w9, w8
    8958:	b	8020 <mpc_div@@Base+0x5fc>
    895c:	sub	x0, x29, #0x48
    8960:	bl	4bb0 <mpfr_nextbelow@plt>
    8964:	ldur	x21, [x29, #-56]
    8968:	sub	x0, x29, #0x48
    896c:	bl	4e00 <mpfr_nextabove@plt>
    8970:	b	86e0 <mpc_div@@Base+0xcbc>
    8974:	mov	x0, x22
    8978:	bl	4bb0 <mpfr_nextbelow@plt>
    897c:	ldur	x21, [x29, #-24]
    8980:	mov	x0, x22
    8984:	bl	4e00 <mpfr_nextabove@plt>
    8988:	b	8750 <mpc_div@@Base+0xd2c>

000000000000898c <mpc_div_fr@@Base>:
    898c:	sub	sp, sp, #0x60
    8990:	stp	x29, x30, [sp, #32]
    8994:	stp	x24, x23, [sp, #48]
    8998:	stp	x22, x21, [sp, #64]
    899c:	stp	x20, x19, [sp, #80]
    89a0:	mov	x22, x0
    89a4:	ldr	x8, [x22], #32
    89a8:	mov	x21, x0
    89ac:	mov	x23, x1
    89b0:	mov	x0, sp
    89b4:	mov	x1, x8
    89b8:	add	x29, sp, #0x20
    89bc:	mov	w19, w3
    89c0:	mov	x20, x2
    89c4:	bl	5440 <mpfr_init2@plt>
    89c8:	and	w3, w19, #0xf
    89cc:	mov	x0, sp
    89d0:	mov	x1, x23
    89d4:	mov	x2, x20
    89d8:	bl	5150 <mpfr_div@plt>
    89dc:	mov	w24, w0
    89e0:	add	x1, x23, #0x20
    89e4:	asr	w3, w19, #4
    89e8:	mov	x0, x22
    89ec:	mov	x2, x20
    89f0:	bl	5150 <mpfr_div@plt>
    89f4:	ldr	w3, [sp, #8]
    89f8:	mov	w19, w0
    89fc:	mov	x1, sp
    8a00:	mov	x0, x21
    8a04:	mov	w2, wzr
    8a08:	bl	51d0 <mpfr_set4@plt>
    8a0c:	mov	x0, sp
    8a10:	bl	4d60 <mpfr_clear@plt>
    8a14:	cmp	w24, #0x0
    8a18:	mov	w8, #0x2                   	// #2
    8a1c:	cset	w9, ne  // ne = any
    8a20:	csel	w8, w8, w9, lt  // lt = tstop
    8a24:	cmp	w19, #0x0
    8a28:	cset	w9, ne  // ne = any
    8a2c:	ldp	x20, x19, [sp, #80]
    8a30:	ldp	x22, x21, [sp, #64]
    8a34:	ldp	x24, x23, [sp, #48]
    8a38:	ldp	x29, x30, [sp, #32]
    8a3c:	lsl	w9, w9, #2
    8a40:	mov	w10, #0x8                   	// #8
    8a44:	csel	w9, w10, w9, lt  // lt = tstop
    8a48:	orr	w0, w9, w8
    8a4c:	add	sp, sp, #0x60
    8a50:	ret

0000000000008a54 <mpc_div_ui@@Base>:
    8a54:	stp	x29, x30, [sp, #-64]!
    8a58:	stp	x20, x19, [sp, #48]
    8a5c:	mov	w19, w3
    8a60:	and	w3, w3, #0xf
    8a64:	str	x23, [sp, #16]
    8a68:	stp	x22, x21, [sp, #32]
    8a6c:	mov	x29, sp
    8a70:	mov	x20, x2
    8a74:	mov	x21, x1
    8a78:	mov	x22, x0
    8a7c:	bl	5550 <mpfr_div_ui@plt>
    8a80:	mov	w23, w0
    8a84:	add	x0, x22, #0x20
    8a88:	add	x1, x21, #0x20
    8a8c:	asr	w3, w19, #4
    8a90:	mov	x2, x20
    8a94:	bl	5550 <mpfr_div_ui@plt>
    8a98:	cmp	w23, #0x0
    8a9c:	mov	w8, #0x2                   	// #2
    8aa0:	cset	w9, ne  // ne = any
    8aa4:	csel	w8, w8, w9, lt  // lt = tstop
    8aa8:	cmp	w0, #0x0
    8aac:	cset	w9, ne  // ne = any
    8ab0:	ldp	x20, x19, [sp, #48]
    8ab4:	ldp	x22, x21, [sp, #32]
    8ab8:	ldr	x23, [sp, #16]
    8abc:	lsl	w9, w9, #2
    8ac0:	mov	w10, #0x8                   	// #8
    8ac4:	csel	w9, w10, w9, lt  // lt = tstop
    8ac8:	orr	w0, w9, w8
    8acc:	ldp	x29, x30, [sp], #64
    8ad0:	ret

0000000000008ad4 <mpc_exp@@Base>:
    8ad4:	sub	sp, sp, #0xd0
    8ad8:	stp	x29, x30, [sp, #112]
    8adc:	stp	x28, x27, [sp, #128]
    8ae0:	stp	x26, x25, [sp, #144]
    8ae4:	stp	x24, x23, [sp, #160]
    8ae8:	stp	x22, x21, [sp, #176]
    8aec:	stp	x20, x19, [sp, #192]
    8af0:	ldr	x8, [x1, #16]
    8af4:	mov	x9, #0x2                   	// #2
    8af8:	movk	x9, #0x8000, lsl #48
    8afc:	mov	x21, x1
    8b00:	cmp	x8, x9
    8b04:	mov	x19, x0
    8b08:	add	x29, sp, #0x70
    8b0c:	b.ne	8b34 <mpc_exp@@Base+0x60>  // b.any
    8b10:	ldr	x8, [x21, #48]
    8b14:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    8b18:	cmp	x8, x9
    8b1c:	b.ne	8c48 <mpc_exp@@Base+0x174>  // b.any
    8b20:	mov	x0, x19
    8b24:	mov	x1, x21
    8b28:	mov	w2, wzr
    8b2c:	bl	5580 <mpc_set@plt>
    8b30:	b	8c5c <mpc_exp@@Base+0x188>
    8b34:	ldr	x9, [x21, #48]
    8b38:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    8b3c:	mov	w22, w2
    8b40:	add	x20, x21, #0x20
    8b44:	cmp	x9, x10
    8b48:	b.eq	8b80 <mpc_exp@@Base+0xac>  // b.none
    8b4c:	mov	x10, #0x2                   	// #2
    8b50:	movk	x10, #0x8000, lsl #48
    8b54:	cmp	x9, x10
    8b58:	b.ne	8bb0 <mpc_exp@@Base+0xdc>  // b.any
    8b5c:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    8b60:	cmp	x8, x9
    8b64:	b.ne	8c48 <mpc_exp@@Base+0x174>  // b.any
    8b68:	ldr	w8, [x21, #8]
    8b6c:	tbnz	w8, #31, 8c7c <mpc_exp@@Base+0x1a8>
    8b70:	mov	w1, #0x1                   	// #1
    8b74:	mov	x0, x19
    8b78:	bl	5120 <mpfr_set_inf@plt>
    8b7c:	b	8c50 <mpc_exp@@Base+0x17c>
    8b80:	and	w2, w22, #0xf
    8b84:	mov	x0, x19
    8b88:	mov	x1, x21
    8b8c:	bl	5230 <mpfr_exp@plt>
    8b90:	ldr	w3, [x21, #40]
    8b94:	mov	w23, w0
    8b98:	add	x0, x19, #0x20
    8b9c:	asr	w2, w22, #4
    8ba0:	mov	x1, x20
    8ba4:	bl	51d0 <mpfr_set4@plt>
    8ba8:	cmp	w23, #0x0
    8bac:	b	8bf0 <mpc_exp@@Base+0x11c>
    8bb0:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    8bb4:	cmp	x8, x10
    8bb8:	b.eq	8c18 <mpc_exp@@Base+0x144>  // b.none
    8bbc:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    8bc0:	cmp	x8, x10
    8bc4:	b.ne	8c3c <mpc_exp@@Base+0x168>  // b.any
    8bc8:	and	w2, w22, #0xf
    8bcc:	mov	x0, x19
    8bd0:	mov	x1, x20
    8bd4:	bl	5050 <mpfr_cos@plt>
    8bd8:	mov	w21, w0
    8bdc:	add	x0, x19, #0x20
    8be0:	asr	w2, w22, #4
    8be4:	mov	x1, x20
    8be8:	bl	5080 <mpfr_sin@plt>
    8bec:	cmp	w21, #0x0
    8bf0:	mov	w8, #0x2                   	// #2
    8bf4:	cset	w9, ne  // ne = any
    8bf8:	csel	w8, w8, w9, lt  // lt = tstop
    8bfc:	cmp	w0, #0x0
    8c00:	cset	w9, ne  // ne = any
    8c04:	lsl	w9, w9, #2
    8c08:	mov	w10, #0x8                   	// #8
    8c0c:	csel	w9, w10, w9, lt  // lt = tstop
    8c10:	orr	w0, w9, w8
    8c14:	b	8c5c <mpc_exp@@Base+0x188>
    8c18:	sub	x0, x29, #0x20
    8c1c:	mov	w1, #0x2                   	// #2
    8c20:	bl	5440 <mpfr_init2@plt>
    8c24:	ldr	w8, [x21, #8]
    8c28:	tbnz	w8, #31, 8e58 <mpc_exp@@Base+0x384>
    8c2c:	sub	x0, x29, #0x20
    8c30:	mov	w1, #0x1                   	// #1
    8c34:	bl	5120 <mpfr_set_inf@plt>
    8c38:	b	8e68 <mpc_exp@@Base+0x394>
    8c3c:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    8c40:	cmp	x9, x10
    8c44:	b.ne	8c94 <mpc_exp@@Base+0x1c0>  // b.any
    8c48:	mov	x0, x19
    8c4c:	bl	4a40 <mpfr_set_nan@plt>
    8c50:	add	x0, x19, #0x20
    8c54:	bl	4a40 <mpfr_set_nan@plt>
    8c58:	mov	w0, wzr
    8c5c:	ldp	x20, x19, [sp, #192]
    8c60:	ldp	x22, x21, [sp, #176]
    8c64:	ldp	x24, x23, [sp, #160]
    8c68:	ldp	x26, x25, [sp, #144]
    8c6c:	ldp	x28, x27, [sp, #128]
    8c70:	ldp	x29, x30, [sp, #112]
    8c74:	add	sp, sp, #0xd0
    8c78:	ret
    8c7c:	mov	x0, x19
    8c80:	mov	x1, xzr
    8c84:	mov	x2, xzr
    8c88:	mov	w3, wzr
    8c8c:	bl	5040 <mpc_set_ui_ui@plt>
    8c90:	b	8c5c <mpc_exp@@Base+0x188>
    8c94:	mov	x25, x19
    8c98:	ldr	x10, [x19]
    8c9c:	ldr	x11, [x25, #32]!
    8ca0:	neg	x12, x8
    8ca4:	neg	x13, x9
    8ca8:	and	x8, x12, x8, asr #63
    8cac:	cmp	x10, x11
    8cb0:	csel	x10, x10, x11, gt
    8cb4:	cmp	x8, x13
    8cb8:	csneg	x8, x8, x9, gt
    8cbc:	sub	x0, x29, #0x20
    8cc0:	mov	w1, #0x2                   	// #2
    8cc4:	add	x27, x10, x8
    8cc8:	bl	5440 <mpfr_init2@plt>
    8ccc:	add	x0, sp, #0x30
    8cd0:	mov	w1, #0x2                   	// #2
    8cd4:	bl	5440 <mpfr_init2@plt>
    8cd8:	add	x0, sp, #0x10
    8cdc:	mov	w1, #0x2                   	// #2
    8ce0:	bl	5440 <mpfr_init2@plt>
    8ce4:	bl	52f0 <mpfr_underflow_p@plt>
    8ce8:	str	w0, [sp, #8]
    8cec:	bl	54e0 <mpfr_overflow_p@plt>
    8cf0:	tst	w22, #0xf
    8cf4:	cset	w28, eq  // eq = none
    8cf8:	cmp	w22, #0x10
    8cfc:	and	w26, w22, #0xf
    8d00:	cset	w23, cc  // cc = lo, ul, last
    8d04:	mov	x24, #0x8000000000000001    	// #-9223372036854775807
    8d08:	str	w0, [sp, #12]
    8d0c:	mov	x0, x27
    8d10:	bl	4d20 <mpc_ceil_log2@plt>
    8d14:	add	x8, x27, x0
    8d18:	add	x27, x8, #0x5
    8d1c:	sub	x0, x29, #0x20
    8d20:	mov	x1, x27
    8d24:	bl	4c80 <mpfr_set_prec@plt>
    8d28:	add	x0, sp, #0x30
    8d2c:	mov	x1, x27
    8d30:	bl	4c80 <mpfr_set_prec@plt>
    8d34:	add	x0, sp, #0x10
    8d38:	mov	x1, x27
    8d3c:	bl	4c80 <mpfr_set_prec@plt>
    8d40:	bl	4a50 <mpfr_clear_overflow@plt>
    8d44:	bl	4e20 <mpfr_clear_underflow@plt>
    8d48:	sub	x0, x29, #0x20
    8d4c:	mov	x1, x21
    8d50:	mov	w2, wzr
    8d54:	bl	5230 <mpfr_exp@plt>
    8d58:	add	x0, sp, #0x10
    8d5c:	add	x1, sp, #0x30
    8d60:	mov	x2, x20
    8d64:	mov	w3, wzr
    8d68:	bl	5520 <mpfr_sin_cos@plt>
    8d6c:	add	x0, sp, #0x30
    8d70:	add	x1, sp, #0x30
    8d74:	sub	x2, x29, #0x20
    8d78:	mov	w3, wzr
    8d7c:	bl	4b70 <mpfr_mul@plt>
    8d80:	bl	54e0 <mpfr_overflow_p@plt>
    8d84:	cbnz	w0, 8db4 <mpc_exp@@Base+0x2e0>
    8d88:	ldur	x8, [x29, #-16]
    8d8c:	cmp	x8, x24
    8d90:	b.eq	8db4 <mpc_exp@@Base+0x2e0>  // b.none
    8d94:	ldr	x8, [x19]
    8d98:	sub	x1, x27, #0x2
    8d9c:	add	x0, sp, #0x30
    8da0:	mov	w3, #0x1                   	// #1
    8da4:	add	x4, x8, x28
    8da8:	mov	w2, wzr
    8dac:	bl	5450 <mpfr_can_round@plt>
    8db0:	cbz	w0, 8d0c <mpc_exp@@Base+0x238>
    8db4:	add	x0, sp, #0x10
    8db8:	add	x1, sp, #0x10
    8dbc:	sub	x2, x29, #0x20
    8dc0:	mov	w3, wzr
    8dc4:	bl	4b70 <mpfr_mul@plt>
    8dc8:	bl	54e0 <mpfr_overflow_p@plt>
    8dcc:	cbnz	w0, 8dfc <mpc_exp@@Base+0x328>
    8dd0:	ldur	x8, [x29, #-16]
    8dd4:	cmp	x8, x24
    8dd8:	b.eq	8dfc <mpc_exp@@Base+0x328>  // b.none
    8ddc:	ldr	x8, [x25]
    8de0:	sub	x1, x27, #0x2
    8de4:	add	x0, sp, #0x10
    8de8:	mov	w3, #0x1                   	// #1
    8dec:	add	x4, x8, x23
    8df0:	mov	w2, wzr
    8df4:	bl	5450 <mpfr_can_round@plt>
    8df8:	cbz	w0, 8d0c <mpc_exp@@Base+0x238>
    8dfc:	ldr	w3, [sp, #56]
    8e00:	add	x1, sp, #0x30
    8e04:	mov	x0, x19
    8e08:	mov	w2, w26
    8e0c:	bl	51d0 <mpfr_set4@plt>
    8e10:	ldr	w3, [sp, #24]
    8e14:	asr	w22, w22, #4
    8e18:	mov	w20, w0
    8e1c:	add	x1, sp, #0x10
    8e20:	mov	x0, x25
    8e24:	mov	w2, w22
    8e28:	bl	51d0 <mpfr_set4@plt>
    8e2c:	mov	w21, w0
    8e30:	bl	54e0 <mpfr_overflow_p@plt>
    8e34:	cbz	w0, 8f18 <mpc_exp@@Base+0x444>
    8e38:	mov	x0, x19
    8e3c:	mov	w1, w26
    8e40:	bl	4dd0 <mpc_fix_inf@plt>
    8e44:	mov	w20, w0
    8e48:	mov	x0, x25
    8e4c:	mov	w1, w22
    8e50:	bl	4dd0 <mpc_fix_inf@plt>
    8e54:	b	8f3c <mpc_exp@@Base+0x468>
    8e58:	mov	w8, #0x1                   	// #1
    8e5c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    8e60:	stur	w8, [x29, #-24]
    8e64:	stur	x9, [x29, #-16]
    8e68:	ldr	x8, [x21, #48]
    8e6c:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    8e70:	cmp	x8, x9
    8e74:	b.ne	8ea8 <mpc_exp@@Base+0x3d4>  // b.any
    8e78:	ldur	w3, [x29, #-24]
    8e7c:	ldr	w21, [x21, #8]
    8e80:	sub	x1, x29, #0x20
    8e84:	mov	x0, x19
    8e88:	mov	w2, wzr
    8e8c:	bl	51d0 <mpfr_set4@plt>
    8e90:	mov	w20, w0
    8e94:	add	x0, x19, #0x20
    8e98:	tbnz	w21, #31, 8f88 <mpc_exp@@Base+0x4b4>
    8e9c:	bl	4a40 <mpfr_set_nan@plt>
    8ea0:	mov	w19, wzr
    8ea4:	b	8f9c <mpc_exp@@Base+0x4c8>
    8ea8:	add	x0, sp, #0x30
    8eac:	mov	w1, #0x2                   	// #2
    8eb0:	bl	5440 <mpfr_init2@plt>
    8eb4:	add	x0, sp, #0x10
    8eb8:	mov	w1, #0x2                   	// #2
    8ebc:	bl	5440 <mpfr_init2@plt>
    8ec0:	add	x0, sp, #0x10
    8ec4:	add	x1, sp, #0x30
    8ec8:	mov	x2, x20
    8ecc:	mov	w3, wzr
    8ed0:	bl	5520 <mpfr_sin_cos@plt>
    8ed4:	ldr	w3, [sp, #56]
    8ed8:	sub	x1, x29, #0x20
    8edc:	mov	x0, x19
    8ee0:	mov	w2, wzr
    8ee4:	bl	51d0 <mpfr_set4@plt>
    8ee8:	ldr	w3, [sp, #24]
    8eec:	mov	w20, w0
    8ef0:	add	x0, x19, #0x20
    8ef4:	sub	x1, x29, #0x20
    8ef8:	mov	w2, wzr
    8efc:	bl	51d0 <mpfr_set4@plt>
    8f00:	mov	w19, w0
    8f04:	add	x0, sp, #0x10
    8f08:	bl	4d60 <mpfr_clear@plt>
    8f0c:	add	x0, sp, #0x30
    8f10:	bl	4d60 <mpfr_clear@plt>
    8f14:	b	8f9c <mpc_exp@@Base+0x4c8>
    8f18:	bl	52f0 <mpfr_underflow_p@plt>
    8f1c:	cbz	w0, 8f40 <mpc_exp@@Base+0x46c>
    8f20:	mov	x0, x19
    8f24:	mov	w1, w26
    8f28:	bl	50d0 <mpc_fix_zero@plt>
    8f2c:	mov	w20, w0
    8f30:	mov	x0, x25
    8f34:	mov	w1, w22
    8f38:	bl	50d0 <mpc_fix_zero@plt>
    8f3c:	mov	w21, w0
    8f40:	sub	x0, x29, #0x20
    8f44:	bl	4d60 <mpfr_clear@plt>
    8f48:	add	x0, sp, #0x30
    8f4c:	bl	4d60 <mpfr_clear@plt>
    8f50:	add	x0, sp, #0x10
    8f54:	bl	4d60 <mpfr_clear@plt>
    8f58:	ldr	w8, [sp, #8]
    8f5c:	cbz	w8, 8f64 <mpc_exp@@Base+0x490>
    8f60:	bl	4990 <mpfr_set_underflow@plt>
    8f64:	ldr	w8, [sp, #12]
    8f68:	cbz	w8, 8f70 <mpc_exp@@Base+0x49c>
    8f6c:	bl	5490 <mpfr_set_overflow@plt>
    8f70:	cmp	w20, #0x0
    8f74:	mov	w8, #0x2                   	// #2
    8f78:	cset	w9, ne  // ne = any
    8f7c:	csel	w8, w8, w9, lt  // lt = tstop
    8f80:	cmp	w21, #0x0
    8f84:	b	8fb8 <mpc_exp@@Base+0x4e4>
    8f88:	ldur	w3, [x29, #-24]
    8f8c:	sub	x1, x29, #0x20
    8f90:	mov	w2, wzr
    8f94:	bl	51d0 <mpfr_set4@plt>
    8f98:	mov	w19, w0
    8f9c:	sub	x0, x29, #0x20
    8fa0:	bl	4d60 <mpfr_clear@plt>
    8fa4:	cmp	w20, #0x0
    8fa8:	mov	w8, #0x2                   	// #2
    8fac:	cset	w9, ne  // ne = any
    8fb0:	csel	w8, w8, w9, lt  // lt = tstop
    8fb4:	cmp	w19, #0x0
    8fb8:	cset	w9, ne  // ne = any
    8fbc:	lsl	w9, w9, #2
    8fc0:	mov	w10, #0x8                   	// #8
    8fc4:	csel	w9, w10, w9, lt  // lt = tstop
    8fc8:	orr	w0, w8, w9
    8fcc:	b	8c5c <mpc_exp@@Base+0x188>

0000000000008fd0 <mpc_fma_naive@@Base>:
    8fd0:	sub	sp, sp, #0xf0
    8fd4:	stp	x29, x30, [sp, #160]
    8fd8:	stp	x24, x23, [sp, #192]
    8fdc:	stp	x22, x21, [sp, #208]
    8fe0:	stp	x20, x19, [sp, #224]
    8fe4:	ldr	x8, [x1]
    8fe8:	ldr	x9, [x2]
    8fec:	add	x29, sp, #0xa0
    8ff0:	mov	x23, x1
    8ff4:	mov	x20, x0
    8ff8:	add	x1, x9, x8
    8ffc:	sub	x0, x29, #0x20
    9000:	str	x25, [sp, #176]
    9004:	mov	w19, w4
    9008:	mov	x21, x3
    900c:	mov	x22, x2
    9010:	bl	5440 <mpfr_init2@plt>
    9014:	mov	x24, x22
    9018:	ldr	x8, [x23]
    901c:	ldr	x9, [x24, #32]!
    9020:	sub	x0, x29, #0x40
    9024:	add	x1, x9, x8
    9028:	bl	5440 <mpfr_init2@plt>
    902c:	mov	x25, x23
    9030:	ldr	x8, [x25, #32]!
    9034:	ldr	x9, [x22]
    9038:	add	x0, sp, #0x40
    903c:	add	x1, x9, x8
    9040:	bl	5440 <mpfr_init2@plt>
    9044:	ldr	x8, [x25]
    9048:	ldr	x9, [x24]
    904c:	add	x0, sp, #0x20
    9050:	add	x1, x9, x8
    9054:	bl	5440 <mpfr_init2@plt>
    9058:	sub	x0, x29, #0x20
    905c:	mov	w3, #0x1                   	// #1
    9060:	mov	x1, x23
    9064:	mov	x2, x22
    9068:	bl	4b70 <mpfr_mul@plt>
    906c:	sub	x0, x29, #0x40
    9070:	mov	w3, #0x1                   	// #1
    9074:	mov	x1, x23
    9078:	mov	x2, x24
    907c:	bl	4b70 <mpfr_mul@plt>
    9080:	add	x0, sp, #0x40
    9084:	mov	w3, #0x1                   	// #1
    9088:	mov	x1, x25
    908c:	mov	x2, x22
    9090:	bl	4b70 <mpfr_mul@plt>
    9094:	add	x0, sp, #0x20
    9098:	mov	w3, #0x1                   	// #1
    909c:	mov	x1, x25
    90a0:	mov	x2, x24
    90a4:	bl	4b70 <mpfr_mul@plt>
    90a8:	ldur	x10, [x29, #-16]
    90ac:	mov	x8, #0x4                   	// #4
    90b0:	movk	x8, #0x8000, lsl #48
    90b4:	cmp	x10, x8
    90b8:	b.lt	9130 <mpc_fma_naive@@Base+0x160>  // b.tstop
    90bc:	ldr	x9, [sp, #48]
    90c0:	ldur	x1, [x29, #-32]
    90c4:	cmp	x9, x8
    90c8:	mov	x8, x1
    90cc:	b.lt	90f4 <mpc_fma_naive@@Base+0x124>  // b.tstop
    90d0:	ldr	x8, [sp, #32]
    90d4:	sub	x11, x10, x1
    90d8:	cmp	x10, x9
    90dc:	csel	x12, x9, x10, lt  // lt = tstop
    90e0:	sub	x8, x9, x8
    90e4:	cmp	x11, x8
    90e8:	csel	x8, x8, x11, gt
    90ec:	sub	x8, x12, x8
    90f0:	add	x8, x8, #0x1
    90f4:	ldr	x11, [x21, #16]
    90f8:	mov	x12, #0x4                   	// #4
    90fc:	movk	x12, #0x8000, lsl #48
    9100:	cmp	x11, x12
    9104:	b.lt	913c <mpc_fma_naive@@Base+0x16c>  // b.tstop
    9108:	ldr	x12, [x21]
    910c:	sub	x13, x10, x1
    9110:	cmp	x10, x11
    9114:	csel	x10, x11, x10, lt  // lt = tstop
    9118:	sub	x12, x11, x12
    911c:	cmp	x13, x12
    9120:	csel	x11, x12, x13, gt
    9124:	sub	x10, x10, x11
    9128:	add	x1, x10, #0x1
    912c:	b	913c <mpc_fma_naive@@Base+0x16c>
    9130:	ldr	x1, [x21]
    9134:	ldr	x8, [sp, #32]
    9138:	ldr	x9, [sp, #48]
    913c:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    9140:	cmp	x9, x10
    9144:	b.le	9188 <mpc_fma_naive@@Base+0x1b8>
    9148:	ldr	x10, [x21, #16]
    914c:	ldr	x23, [sp, #32]
    9150:	mov	x11, #0x4                   	// #4
    9154:	movk	x11, #0x8000, lsl #48
    9158:	cmp	x10, x11
    915c:	b.lt	918c <mpc_fma_naive@@Base+0x1bc>  // b.tstop
    9160:	ldr	x11, [x21]
    9164:	sub	x12, x9, x23
    9168:	cmp	x9, x10
    916c:	csel	x9, x10, x9, lt  // lt = tstop
    9170:	sub	x11, x10, x11
    9174:	cmp	x12, x11
    9178:	csel	x10, x11, x12, gt
    917c:	sub	x9, x9, x10
    9180:	add	x23, x9, #0x1
    9184:	b	918c <mpc_fma_naive@@Base+0x1bc>
    9188:	ldr	x23, [x21]
    918c:	cmp	x8, x1
    9190:	b.gt	91d0 <mpc_fma_naive@@Base+0x200>
    9194:	cmp	x8, x23
    9198:	b.gt	91d0 <mpc_fma_naive@@Base+0x200>
    919c:	mov	x0, sp
    91a0:	mov	x1, x8
    91a4:	bl	5440 <mpfr_init2@plt>
    91a8:	mov	x0, sp
    91ac:	sub	x1, x29, #0x20
    91b0:	add	x2, sp, #0x20
    91b4:	mov	w3, #0x1                   	// #1
    91b8:	bl	4a60 <mpfr_sub@plt>
    91bc:	and	w3, w19, #0xf
    91c0:	mov	x1, sp
    91c4:	mov	x0, x20
    91c8:	mov	x2, x21
    91cc:	b	9208 <mpc_fma_naive@@Base+0x238>
    91d0:	mov	x0, sp
    91d4:	cmp	x1, x23
    91d8:	b.le	9210 <mpc_fma_naive@@Base+0x240>
    91dc:	mov	x1, x23
    91e0:	bl	5440 <mpfr_init2@plt>
    91e4:	mov	x0, sp
    91e8:	add	x2, sp, #0x20
    91ec:	mov	w3, #0x1                   	// #1
    91f0:	mov	x1, x21
    91f4:	bl	4a60 <mpfr_sub@plt>
    91f8:	and	w3, w19, #0xf
    91fc:	mov	x1, sp
    9200:	sub	x2, x29, #0x20
    9204:	mov	x0, x20
    9208:	bl	4e60 <mpfr_add@plt>
    920c:	b	923c <mpc_fma_naive@@Base+0x26c>
    9210:	bl	5440 <mpfr_init2@plt>
    9214:	mov	x0, sp
    9218:	sub	x1, x29, #0x20
    921c:	mov	w3, #0x1                   	// #1
    9220:	mov	x2, x21
    9224:	bl	4e60 <mpfr_add@plt>
    9228:	and	w3, w19, #0xf
    922c:	mov	x1, sp
    9230:	add	x2, sp, #0x20
    9234:	mov	x0, x20
    9238:	bl	4a60 <mpfr_sub@plt>
    923c:	ldur	x10, [x29, #-48]
    9240:	mov	x8, #0x4                   	// #4
    9244:	movk	x8, #0x8000, lsl #48
    9248:	mov	w22, w0
    924c:	cmp	x10, x8
    9250:	b.lt	92cc <mpc_fma_naive@@Base+0x2fc>  // b.tstop
    9254:	ldr	x9, [sp, #80]
    9258:	ldur	x1, [x29, #-64]
    925c:	cmp	x9, x8
    9260:	mov	x8, x1
    9264:	b.lt	928c <mpc_fma_naive@@Base+0x2bc>  // b.tstop
    9268:	ldr	x8, [sp, #64]
    926c:	sub	x11, x10, x1
    9270:	cmp	x10, x9
    9274:	csel	x12, x9, x10, lt  // lt = tstop
    9278:	sub	x8, x9, x8
    927c:	cmp	x11, x8
    9280:	csel	x8, x8, x11, gt
    9284:	sub	x8, x12, x8
    9288:	add	x8, x8, #0x1
    928c:	ldr	x11, [x21, #48]
    9290:	mov	x12, #0x4                   	// #4
    9294:	movk	x12, #0x8000, lsl #48
    9298:	add	x24, x21, #0x20
    929c:	cmp	x11, x12
    92a0:	b.lt	92dc <mpc_fma_naive@@Base+0x30c>  // b.tstop
    92a4:	ldr	x12, [x24]
    92a8:	sub	x13, x10, x1
    92ac:	cmp	x10, x11
    92b0:	csel	x10, x11, x10, lt  // lt = tstop
    92b4:	sub	x12, x11, x12
    92b8:	cmp	x13, x12
    92bc:	csel	x11, x12, x13, gt
    92c0:	sub	x10, x10, x11
    92c4:	add	x1, x10, #0x1
    92c8:	b	92dc <mpc_fma_naive@@Base+0x30c>
    92cc:	mov	x24, x21
    92d0:	ldr	x8, [sp, #64]
    92d4:	ldr	x1, [x24, #32]!
    92d8:	ldr	x9, [sp, #80]
    92dc:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
    92e0:	cmp	x9, x10
    92e4:	b.le	9328 <mpc_fma_naive@@Base+0x358>
    92e8:	ldr	x11, [x21, #48]
    92ec:	ldr	x10, [sp, #64]
    92f0:	mov	x12, #0x4                   	// #4
    92f4:	movk	x12, #0x8000, lsl #48
    92f8:	cmp	x11, x12
    92fc:	b.lt	932c <mpc_fma_naive@@Base+0x35c>  // b.tstop
    9300:	ldr	x12, [x21, #32]
    9304:	sub	x10, x9, x10
    9308:	cmp	x9, x11
    930c:	csel	x9, x11, x9, lt  // lt = tstop
    9310:	sub	x12, x11, x12
    9314:	cmp	x10, x12
    9318:	csel	x10, x12, x10, gt
    931c:	sub	x9, x9, x10
    9320:	add	x10, x9, #0x1
    9324:	b	932c <mpc_fma_naive@@Base+0x35c>
    9328:	ldr	x10, [x21, #32]
    932c:	cmp	x8, x1
    9330:	b.gt	9370 <mpc_fma_naive@@Base+0x3a0>
    9334:	cmp	x8, x10
    9338:	b.gt	9370 <mpc_fma_naive@@Base+0x3a0>
    933c:	mov	x0, sp
    9340:	mov	x1, x8
    9344:	bl	4c80 <mpfr_set_prec@plt>
    9348:	mov	x0, sp
    934c:	sub	x1, x29, #0x40
    9350:	add	x2, sp, #0x40
    9354:	mov	w3, #0x1                   	// #1
    9358:	bl	4e60 <mpfr_add@plt>
    935c:	add	x0, x20, #0x20
    9360:	asr	w3, w19, #4
    9364:	mov	x1, sp
    9368:	mov	x2, x24
    936c:	b	93d4 <mpc_fma_naive@@Base+0x404>
    9370:	mov	x0, sp
    9374:	cmp	x1, x10
    9378:	b.le	93ac <mpc_fma_naive@@Base+0x3dc>
    937c:	mov	x1, x23
    9380:	bl	4c80 <mpfr_set_prec@plt>
    9384:	mov	x0, sp
    9388:	add	x2, sp, #0x40
    938c:	mov	w3, #0x1                   	// #1
    9390:	mov	x1, x24
    9394:	bl	4e60 <mpfr_add@plt>
    9398:	add	x0, x20, #0x20
    939c:	asr	w3, w19, #4
    93a0:	mov	x1, sp
    93a4:	sub	x2, x29, #0x40
    93a8:	b	93d4 <mpc_fma_naive@@Base+0x404>
    93ac:	bl	4c80 <mpfr_set_prec@plt>
    93b0:	mov	x0, sp
    93b4:	sub	x1, x29, #0x40
    93b8:	mov	w3, #0x1                   	// #1
    93bc:	mov	x2, x24
    93c0:	bl	4e60 <mpfr_add@plt>
    93c4:	add	x0, x20, #0x20
    93c8:	asr	w3, w19, #4
    93cc:	mov	x1, sp
    93d0:	add	x2, sp, #0x40
    93d4:	bl	4e60 <mpfr_add@plt>
    93d8:	mov	w19, w0
    93dc:	sub	x0, x29, #0x20
    93e0:	bl	4d60 <mpfr_clear@plt>
    93e4:	sub	x0, x29, #0x40
    93e8:	bl	4d60 <mpfr_clear@plt>
    93ec:	add	x0, sp, #0x40
    93f0:	bl	4d60 <mpfr_clear@plt>
    93f4:	add	x0, sp, #0x20
    93f8:	bl	4d60 <mpfr_clear@plt>
    93fc:	mov	x0, sp
    9400:	bl	4d60 <mpfr_clear@plt>
    9404:	cmp	w22, #0x0
    9408:	mov	w8, #0x2                   	// #2
    940c:	cset	w9, ne  // ne = any
    9410:	csel	w8, w8, w9, lt  // lt = tstop
    9414:	cmp	w19, #0x0
    9418:	cset	w9, ne  // ne = any
    941c:	ldp	x20, x19, [sp, #224]
    9420:	ldp	x22, x21, [sp, #208]
    9424:	ldp	x24, x23, [sp, #192]
    9428:	ldr	x25, [sp, #176]
    942c:	ldp	x29, x30, [sp, #160]
    9430:	lsl	w9, w9, #2
    9434:	mov	w10, #0x8                   	// #8
    9438:	csel	w9, w10, w9, lt  // lt = tstop
    943c:	orr	w0, w9, w8
    9440:	add	sp, sp, #0xf0
    9444:	ret

0000000000009448 <mpc_fma@@Base>:
    9448:	sub	sp, sp, #0xc0
    944c:	stp	x24, x23, [sp, #144]
    9450:	mov	x23, x0
    9454:	mov	x0, x1
    9458:	stp	x29, x30, [sp, #96]
    945c:	stp	x28, x27, [sp, #112]
    9460:	stp	x26, x25, [sp, #128]
    9464:	stp	x22, x21, [sp, #160]
    9468:	stp	x20, x19, [sp, #176]
    946c:	add	x29, sp, #0x60
    9470:	mov	w19, w4
    9474:	mov	x20, x3
    9478:	mov	x21, x2
    947c:	mov	x22, x1
    9480:	bl	54d0 <mpfr_number_p@plt>
    9484:	cbz	w0, 956c <mpc_fma@@Base+0x124>
    9488:	add	x0, x22, #0x20
    948c:	bl	54d0 <mpfr_number_p@plt>
    9490:	cbz	w0, 956c <mpc_fma@@Base+0x124>
    9494:	mov	x0, x21
    9498:	bl	54d0 <mpfr_number_p@plt>
    949c:	cbz	w0, 956c <mpc_fma@@Base+0x124>
    94a0:	add	x0, x21, #0x20
    94a4:	bl	54d0 <mpfr_number_p@plt>
    94a8:	cbz	w0, 956c <mpc_fma@@Base+0x124>
    94ac:	mov	x0, x20
    94b0:	bl	54d0 <mpfr_number_p@plt>
    94b4:	cbz	w0, 956c <mpc_fma@@Base+0x124>
    94b8:	add	x0, x20, #0x20
    94bc:	bl	54d0 <mpfr_number_p@plt>
    94c0:	cbz	w0, 956c <mpc_fma@@Base+0x124>
    94c4:	ldr	x25, [x23]
    94c8:	ldr	x27, [x23, #32]
    94cc:	mov	x0, x25
    94d0:	bl	4d20 <mpc_ceil_log2@plt>
    94d4:	add	x8, x25, x0
    94d8:	mov	x0, x27
    94dc:	add	x24, x8, #0xa
    94e0:	bl	4d20 <mpc_ceil_log2@plt>
    94e4:	add	x8, x27, x0
    94e8:	add	x26, x8, #0xa
    94ec:	add	x0, sp, #0x20
    94f0:	mov	x1, x24
    94f4:	mov	x2, x26
    94f8:	bl	53c0 <mpc_init3@plt>
    94fc:	add	x0, sp, #0x20
    9500:	mov	w3, #0x11                  	// #17
    9504:	mov	x1, x22
    9508:	mov	x2, x21
    950c:	bl	4ed0 <mpc_mul@plt>
    9510:	ldr	x28, [sp, #48]
    9514:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    9518:	cmp	x28, x8
    951c:	b.eq	954c <mpc_fma@@Base+0x104>  // b.none
    9520:	mov	x9, x25
    9524:	ldr	x25, [sp, #80]
    9528:	tst	w19, #0xf
    952c:	cinc	x9, x9, eq  // eq = none
    9530:	cmp	w19, #0x10
    9534:	add	x10, sp, #0x20
    9538:	str	x9, [sp, #8]
    953c:	cinc	x9, x27, cc  // cc = lo, ul, last
    9540:	cmp	x25, x8
    9544:	str	x9, [sp]
    9548:	b.ne	95ac <mpc_fma@@Base+0x164>  // b.any
    954c:	mov	w24, wzr
    9550:	mov	w25, wzr
    9554:	str	wzr, [sp, #28]
    9558:	add	x0, sp, #0x20
    955c:	bl	4a10 <mpc_clear@plt>
    9560:	cbz	w25, 956c <mpc_fma@@Base+0x124>
    9564:	ldr	w8, [sp, #28]
    9568:	cbnz	w8, 9588 <mpc_fma@@Base+0x140>
    956c:	mov	x0, x23
    9570:	mov	x1, x22
    9574:	mov	x2, x21
    9578:	mov	x3, x20
    957c:	mov	w4, w19
    9580:	bl	5560 <mpc_fma_naive@plt>
    9584:	mov	w24, w0
    9588:	mov	w0, w24
    958c:	ldp	x20, x19, [sp, #176]
    9590:	ldp	x22, x21, [sp, #160]
    9594:	ldp	x24, x23, [sp, #144]
    9598:	ldp	x26, x25, [sp, #128]
    959c:	ldp	x28, x27, [sp, #112]
    95a0:	ldp	x29, x30, [sp, #96]
    95a4:	add	sp, sp, #0xc0
    95a8:	ret
    95ac:	add	x8, x10, #0x20
    95b0:	mov	w27, wzr
    95b4:	stp	x8, xzr, [sp, #16]
    95b8:	add	x0, sp, #0x20
    95bc:	add	x1, sp, #0x20
    95c0:	mov	w3, #0x11                  	// #17
    95c4:	mov	x2, x20
    95c8:	bl	4cd0 <mpc_add@plt>
    95cc:	ldr	x8, [sp, #48]
    95d0:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    95d4:	cmp	x8, x10
    95d8:	b.eq	96e4 <mpc_fma@@Base+0x29c>  // b.none
    95dc:	ldr	x9, [sp, #80]
    95e0:	cmp	x9, x10
    95e4:	b.eq	96e4 <mpc_fma@@Base+0x29c>  // b.none
    95e8:	sub	x8, x28, x8
    95ec:	sub	x9, x25, x9
    95f0:	cmp	x8, #0x1
    95f4:	mov	w10, #0x1                   	// #1
    95f8:	csinc	x28, x10, x8, lt  // lt = tstop
    95fc:	cmp	x9, #0x1
    9600:	csinc	x25, x10, x9, lt  // lt = tstop
    9604:	subs	x1, x24, x28
    9608:	b.ge	9614 <mpc_fma@@Base+0x1cc>  // b.tcont
    960c:	mov	w0, wzr
    9610:	b	9628 <mpc_fma@@Base+0x1e0>
    9614:	ldr	x4, [sp, #8]
    9618:	add	x0, sp, #0x20
    961c:	mov	w3, #0x1                   	// #1
    9620:	mov	w2, wzr
    9624:	bl	5450 <mpfr_can_round@plt>
    9628:	subs	x1, x26, x25
    962c:	str	w0, [sp, #24]
    9630:	b.ge	963c <mpc_fma@@Base+0x1f4>  // b.tcont
    9634:	mov	w9, wzr
    9638:	b	966c <mpc_fma@@Base+0x224>
    963c:	ldr	x0, [sp, #16]
    9640:	ldr	x4, [sp]
    9644:	mov	w3, #0x1                   	// #1
    9648:	mov	w2, wzr
    964c:	bl	5450 <mpfr_can_round@plt>
    9650:	mov	w8, w0
    9654:	ldr	w0, [sp, #24]
    9658:	cbz	w0, 9668 <mpc_fma@@Base+0x220>
    965c:	mov	w9, w8
    9660:	cbz	w8, 966c <mpc_fma@@Base+0x224>
    9664:	b	96fc <mpc_fma@@Base+0x2b4>
    9668:	mov	w9, w8
    966c:	cmp	w27, #0x1
    9670:	str	w9, [sp, #28]
    9674:	b.eq	96f0 <mpc_fma@@Base+0x2a8>  // b.none
    9678:	cmp	w0, #0x0
    967c:	ccmp	x28, #0x1, #0x4, eq  // eq = none
    9680:	csel	x8, x28, xzr, gt
    9684:	cmp	w9, #0x0
    9688:	add	x24, x8, x24
    968c:	ccmp	x25, #0x1, #0x4, eq  // eq = none
    9690:	csel	x8, x25, xzr, gt
    9694:	add	x0, sp, #0x20
    9698:	mov	x1, x24
    969c:	add	x26, x8, x26
    96a0:	bl	4c80 <mpfr_set_prec@plt>
    96a4:	ldr	x0, [sp, #16]
    96a8:	mov	x1, x26
    96ac:	bl	4c80 <mpfr_set_prec@plt>
    96b0:	add	x0, sp, #0x20
    96b4:	mov	w3, #0x11                  	// #17
    96b8:	mov	x1, x22
    96bc:	mov	x2, x21
    96c0:	bl	4ed0 <mpc_mul@plt>
    96c4:	ldr	x28, [sp, #48]
    96c8:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    96cc:	cmp	x28, x8
    96d0:	b.eq	96e4 <mpc_fma@@Base+0x29c>  // b.none
    96d4:	ldr	x25, [sp, #80]
    96d8:	mov	w27, #0x1                   	// #1
    96dc:	cmp	x25, x8
    96e0:	b.ne	95b8 <mpc_fma@@Base+0x170>  // b.any
    96e4:	ldr	w25, [sp, #24]
    96e8:	mov	w24, wzr
    96ec:	b	9558 <mpc_fma@@Base+0x110>
    96f0:	mov	w24, wzr
    96f4:	mov	w25, w0
    96f8:	b	9558 <mpc_fma@@Base+0x110>
    96fc:	add	x1, sp, #0x20
    9700:	mov	x0, x23
    9704:	mov	w2, w19
    9708:	bl	5580 <mpc_set@plt>
    970c:	mov	w8, #0x1                   	// #1
    9710:	mov	w24, w0
    9714:	mov	w25, #0x1                   	// #1
    9718:	str	w8, [sp, #28]
    971c:	b	9558 <mpc_fma@@Base+0x110>

0000000000009720 <mpc_fr_div@@Base>:
    9720:	sub	sp, sp, #0x70
    9724:	stp	x29, x30, [sp, #64]
    9728:	stp	x22, x21, [sp, #80]
    972c:	stp	x20, x19, [sp, #96]
    9730:	ldp	q1, q0, [x1]
    9734:	mov	x8, sp
    9738:	add	x22, x8, #0x20
    973c:	mov	x21, x0
    9740:	mov	x0, x22
    9744:	add	x29, sp, #0x40
    9748:	mov	w19, w3
    974c:	mov	x20, x2
    9750:	stp	q1, q0, [sp]
    9754:	bl	4aa0 <mpfr_init@plt>
    9758:	mov	w8, #0x1                   	// #1
    975c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    9760:	mov	x1, sp
    9764:	mov	x0, x21
    9768:	mov	x2, x20
    976c:	mov	w3, w19
    9770:	str	w8, [sp, #40]
    9774:	str	x9, [sp, #48]
    9778:	bl	5250 <mpc_div@plt>
    977c:	mov	w19, w0
    9780:	mov	x0, x22
    9784:	bl	4d60 <mpfr_clear@plt>
    9788:	mov	w0, w19
    978c:	ldp	x20, x19, [sp, #96]
    9790:	ldp	x22, x21, [sp, #80]
    9794:	ldp	x29, x30, [sp, #64]
    9798:	add	sp, sp, #0x70
    979c:	ret

00000000000097a0 <mpc_fr_sub@@Base>:
    97a0:	stp	x29, x30, [sp, #-48]!
    97a4:	stp	x20, x19, [sp, #32]
    97a8:	mov	w19, w3
    97ac:	and	w3, w3, #0xf
    97b0:	stp	x22, x21, [sp, #16]
    97b4:	mov	x29, sp
    97b8:	mov	x20, x2
    97bc:	mov	x21, x0
    97c0:	bl	4a60 <mpfr_sub@plt>
    97c4:	mov	w22, w0
    97c8:	add	x0, x21, #0x20
    97cc:	add	x1, x20, #0x20
    97d0:	asr	w2, w19, #4
    97d4:	bl	4b80 <mpfr_neg@plt>
    97d8:	cmp	w22, #0x0
    97dc:	mov	w8, #0x2                   	// #2
    97e0:	cset	w9, ne  // ne = any
    97e4:	csel	w8, w8, w9, lt  // lt = tstop
    97e8:	cmp	w0, #0x0
    97ec:	cset	w9, ne  // ne = any
    97f0:	ldp	x20, x19, [sp, #32]
    97f4:	ldp	x22, x21, [sp, #16]
    97f8:	lsl	w9, w9, #2
    97fc:	mov	w10, #0x8                   	// #8
    9800:	csel	w9, w10, w9, lt  // lt = tstop
    9804:	orr	w0, w9, w8
    9808:	ldp	x29, x30, [sp], #48
    980c:	ret

0000000000009810 <mpc_get_prec2@@Base>:
    9810:	ldr	x8, [x2]
    9814:	str	x8, [x0]
    9818:	ldr	x8, [x2, #32]
    981c:	str	x8, [x1]
    9820:	ret

0000000000009824 <mpc_get_prec@@Base>:
    9824:	ldr	x8, [x0]
    9828:	ldr	x9, [x0, #32]
    982c:	cmp	x9, x8
    9830:	csel	x0, x8, xzr, eq  // eq = none
    9834:	ret

0000000000009838 <mpc_get_version@@Base>:
    9838:	adrp	x0, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    983c:	add	x0, x0, #0x8a1
    9840:	ret

0000000000009844 <mpc_get_dc@@Base>:
    9844:	stp	d9, d8, [sp, #-48]!
    9848:	stp	x20, x19, [sp, #32]
    984c:	mov	w19, w1
    9850:	mov	x20, x0
    9854:	add	x0, x0, #0x20
    9858:	asr	w1, w1, #4
    985c:	stp	x29, x30, [sp, #16]
    9860:	mov	x29, sp
    9864:	bl	4b50 <mpfr_get_d@plt>
    9868:	mov	v8.16b, v0.16b
    986c:	fmov	d0, xzr
    9870:	and	w1, w19, #0xf
    9874:	mov	x0, x20
    9878:	fmul	d9, d8, d0
    987c:	bl	4b50 <mpfr_get_d@plt>
    9880:	ldp	x20, x19, [sp, #32]
    9884:	ldp	x29, x30, [sp, #16]
    9888:	fadd	d0, d9, d0
    988c:	mov	v1.16b, v8.16b
    9890:	ldp	d9, d8, [sp], #48
    9894:	ret

0000000000009898 <mpc_get_ldc@@Base>:
    9898:	sub	sp, sp, #0x40
    989c:	stp	x20, x19, [sp, #48]
    98a0:	mov	w19, w1
    98a4:	mov	x20, x0
    98a8:	add	x0, x0, #0x20
    98ac:	asr	w1, w1, #4
    98b0:	stp	x29, x30, [sp, #32]
    98b4:	add	x29, sp, #0x20
    98b8:	bl	5110 <mpfr_get_ld@plt>
    98bc:	adrp	x8, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    98c0:	ldr	q1, [x8, #2224]
    98c4:	str	q0, [sp, #16]
    98c8:	bl	12f58 <mpc_ui_ui_sub@@Base+0xbac>
    98cc:	and	w1, w19, #0xf
    98d0:	mov	x0, x20
    98d4:	str	q0, [sp]
    98d8:	bl	5110 <mpfr_get_ld@plt>
    98dc:	mov	v1.16b, v0.16b
    98e0:	ldr	q0, [sp]
    98e4:	bl	12430 <mpc_ui_ui_sub@@Base+0x84>
    98e8:	ldr	q1, [sp, #16]
    98ec:	ldp	x20, x19, [sp, #48]
    98f0:	ldp	x29, x30, [sp, #32]
    98f4:	add	sp, sp, #0x40
    98f8:	ret

00000000000098fc <mpc_get_str@@Base>:
    98fc:	stp	x29, x30, [sp, #-64]!
    9900:	sub	w8, w0, #0x2
    9904:	cmp	w8, #0x22
    9908:	str	x23, [sp, #16]
    990c:	stp	x22, x21, [sp, #32]
    9910:	stp	x20, x19, [sp, #48]
    9914:	mov	x29, sp
    9918:	b.ls	9924 <mpc_get_str@@Base+0x28>  // b.plast
    991c:	mov	x21, xzr
    9920:	b	99c4 <mpc_get_str@@Base+0xc8>
    9924:	mov	w20, w3
    9928:	and	w3, w3, #0xf
    992c:	mov	x22, x2
    9930:	mov	w21, w0
    9934:	mov	x23, x1
    9938:	bl	9a0c <mpc_get_str@@Base+0x110>
    993c:	mov	x19, x0
    9940:	add	x2, x22, #0x20
    9944:	asr	w3, w20, #4
    9948:	mov	w0, w21
    994c:	mov	x1, x23
    9950:	bl	9a0c <mpc_get_str@@Base+0x110>
    9954:	mov	x20, x0
    9958:	mov	x0, x19
    995c:	bl	4a00 <strlen@plt>
    9960:	mov	x21, x0
    9964:	mov	x0, x20
    9968:	bl	4a00 <strlen@plt>
    996c:	add	x8, x21, x0
    9970:	add	x0, x8, #0x4
    9974:	bl	4bf0 <mpc_alloc_str@plt>
    9978:	cbz	x0, 99dc <mpc_get_str@@Base+0xe0>
    997c:	mov	w8, #0x28                  	// #40
    9980:	mov	x1, x19
    9984:	mov	x21, x0
    9988:	strh	w8, [x0]
    998c:	bl	4de0 <strcat@plt>
    9990:	bl	4a00 <strlen@plt>
    9994:	mov	w8, #0x20                  	// #32
    9998:	strh	w8, [x21, x0]
    999c:	mov	x0, x21
    99a0:	mov	x1, x20
    99a4:	bl	4de0 <strcat@plt>
    99a8:	bl	4a00 <strlen@plt>
    99ac:	mov	w8, #0x29                  	// #41
    99b0:	strh	w8, [x21, x0]
    99b4:	mov	x0, x19
    99b8:	bl	4ff0 <mpc_free_str@plt>
    99bc:	mov	x0, x20
    99c0:	bl	4ff0 <mpc_free_str@plt>
    99c4:	mov	x0, x21
    99c8:	ldp	x20, x19, [sp, #48]
    99cc:	ldp	x22, x21, [sp, #32]
    99d0:	ldr	x23, [sp, #16]
    99d4:	ldp	x29, x30, [sp], #64
    99d8:	ret
    99dc:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    99e0:	ldr	x8, [x8, #4008]
    99e4:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    99e8:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    99ec:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    99f0:	ldr	x0, [x8]
    99f4:	add	x1, x1, #0x7c0
    99f8:	add	x2, x2, #0x8c0
    99fc:	add	x4, x4, #0x8c8
    9a00:	mov	w3, #0xe0                  	// #224
    9a04:	bl	55a0 <fprintf@plt>
    9a08:	bl	5000 <abort@plt>
    9a0c:	stp	x29, x30, [sp, #-80]!
    9a10:	stp	x24, x23, [sp, #32]
    9a14:	stp	x22, x21, [sp, #48]
    9a18:	stp	x20, x19, [sp, #64]
    9a1c:	ldr	x8, [x2, #16]
    9a20:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    9a24:	mov	x21, x2
    9a28:	str	x25, [sp, #16]
    9a2c:	cmp	x8, x9
    9a30:	mov	x29, sp
    9a34:	b.ne	9a68 <mpc_get_str@@Base+0x16c>  // b.any
    9a38:	mov	w0, #0x3                   	// #3
    9a3c:	bl	4bf0 <mpc_alloc_str@plt>
    9a40:	ldr	w8, [x21, #8]
    9a44:	mov	w9, #0x2b                  	// #43
    9a48:	mov	w10, #0x2d                  	// #45
    9a4c:	mov	w11, #0x30                  	// #48
    9a50:	cmp	w8, #0x0
    9a54:	csel	w8, w10, w9, lt  // lt = tstop
    9a58:	mov	x22, x0
    9a5c:	strb	w8, [x0]
    9a60:	sturh	w11, [x0, #1]
    9a64:	b	9bf8 <mpc_get_str@@Base+0x2fc>
    9a68:	mov	w20, w0
    9a6c:	mov	w5, w3
    9a70:	mov	x3, x1
    9a74:	add	x1, x29, #0x18
    9a78:	mov	x0, xzr
    9a7c:	mov	w2, w20
    9a80:	mov	x4, x21
    9a84:	bl	50c0 <mpfr_get_str@plt>
    9a88:	cbz	x0, 9c14 <mpc_get_str@@Base+0x318>
    9a8c:	ldr	x22, [x29, #24]
    9a90:	mov	x19, x0
    9a94:	mov	x0, x21
    9a98:	bl	54d0 <mpfr_number_p@plt>
    9a9c:	mov	w21, w0
    9aa0:	mov	x0, x19
    9aa4:	bl	4a00 <strlen@plt>
    9aa8:	mov	x8, x0
    9aac:	cbz	w21, 9ad8 <mpc_get_str@@Base+0x1dc>
    9ab0:	ldrb	w24, [x19]
    9ab4:	sub	x9, x22, #0x1
    9ab8:	lsl	x10, x9, #2
    9abc:	cmp	w20, #0x10
    9ac0:	csel	x21, x10, x9, eq  // eq = none
    9ac4:	cbz	x21, 9af0 <mpc_get_str@@Base+0x1f4>
    9ac8:	add	x0, x8, #0x5
    9acc:	tbnz	x21, #63, 9af8 <mpc_get_str@@Base+0x1fc>
    9ad0:	mov	x9, x21
    9ad4:	b	9b1c <mpc_get_str@@Base+0x220>
    9ad8:	add	x0, x8, #0x1
    9adc:	bl	4bf0 <mpc_alloc_str@plt>
    9ae0:	mov	x1, x19
    9ae4:	mov	x22, x0
    9ae8:	bl	5340 <strcpy@plt>
    9aec:	b	9bf0 <mpc_get_str@@Base+0x2f4>
    9af0:	add	x0, x8, #0x2
    9af4:	b	9b40 <mpc_get_str@@Base+0x244>
    9af8:	cmn	x21, #0xb
    9afc:	b.gt	9b18 <mpc_get_str@@Base+0x21c>
    9b00:	mov	x9, #0x9999999999999999    	// #-7378697629483820647
    9b04:	smulh	x9, x21, x9
    9b08:	asr	x10, x9, #2
    9b0c:	add	x9, x10, x9, lsr #63
    9b10:	add	x0, x8, #0x6
    9b14:	b	9b1c <mpc_get_str@@Base+0x220>
    9b18:	neg	x9, x21
    9b1c:	cmp	x9, #0xa
    9b20:	b.lt	9b40 <mpc_get_str@@Base+0x244>  // b.tstop
    9b24:	mov	x8, #0xcccccccccccccccc    	// #-3689348814741910324
    9b28:	movk	x8, #0xcccd
    9b2c:	umulh	x10, x9, x8
    9b30:	cmp	x9, #0x63
    9b34:	lsr	x9, x10, #3
    9b38:	add	x0, x0, #0x1
    9b3c:	b.hi	9b2c <mpc_get_str@@Base+0x230>  // b.pmore
    9b40:	bl	4bf0 <mpc_alloc_str@plt>
    9b44:	mov	x23, x19
    9b48:	ldrb	w8, [x23], #1
    9b4c:	mov	x25, x0
    9b50:	mov	x22, x0
    9b54:	cmp	w24, #0x2d
    9b58:	strb	w8, [x25], #1
    9b5c:	b.eq	9b68 <mpc_get_str@@Base+0x26c>  // b.none
    9b60:	cmp	w24, #0x2b
    9b64:	b.ne	9b78 <mpc_get_str@@Base+0x27c>  // b.any
    9b68:	ldrb	w8, [x19, #1]
    9b6c:	add	x23, x19, #0x2
    9b70:	add	x25, x22, #0x2
    9b74:	strb	w8, [x22, #1]
    9b78:	bl	4c70 <localeconv@plt>
    9b7c:	ldr	x8, [x0]
    9b80:	mov	x0, x22
    9b84:	mov	x1, x23
    9b88:	ldrb	w8, [x8]
    9b8c:	strb	wzr, [x25, #1]
    9b90:	strb	w8, [x25]
    9b94:	bl	4de0 <strcat@plt>
    9b98:	cbz	x21, 9bf0 <mpc_get_str@@Base+0x2f4>
    9b9c:	mov	x0, x19
    9ba0:	bl	4a00 <strlen@plt>
    9ba4:	add	x8, x22, x0
    9ba8:	cmp	w20, #0x10
    9bac:	add	x0, x8, #0x1
    9bb0:	b.eq	9bc4 <mpc_get_str@@Base+0x2c8>  // b.none
    9bb4:	cmp	w20, #0xa
    9bb8:	b.eq	9bcc <mpc_get_str@@Base+0x2d0>  // b.none
    9bbc:	cmp	w20, #0x2
    9bc0:	b.ne	9bd4 <mpc_get_str@@Base+0x2d8>  // b.any
    9bc4:	mov	w8, #0x70                  	// #112
    9bc8:	b	9bd8 <mpc_get_str@@Base+0x2dc>
    9bcc:	mov	w8, #0x65                  	// #101
    9bd0:	b	9bd8 <mpc_get_str@@Base+0x2dc>
    9bd4:	mov	w8, #0x40                  	// #64
    9bd8:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    9bdc:	strb	w8, [x0]
    9be0:	strb	wzr, [x0, #1]!
    9be4:	add	x1, x1, #0x8e9
    9be8:	mov	x2, x21
    9bec:	bl	4b30 <sprintf@plt>
    9bf0:	mov	x0, x19
    9bf4:	bl	52e0 <mpfr_free_str@plt>
    9bf8:	mov	x0, x22
    9bfc:	ldp	x20, x19, [sp, #64]
    9c00:	ldp	x22, x21, [sp, #48]
    9c04:	ldp	x24, x23, [sp, #32]
    9c08:	ldr	x25, [sp, #16]
    9c0c:	ldp	x29, x30, [sp], #80
    9c10:	ret
    9c14:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    9c18:	ldr	x8, [x8, #4008]
    9c1c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    9c20:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    9c24:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    9c28:	ldr	x0, [x8]
    9c2c:	add	x1, x1, #0x7c0
    9c30:	add	x2, x2, #0x8c0
    9c34:	add	x4, x4, #0x8dc
    9c38:	mov	w3, #0xc8                  	// #200
    9c3c:	bl	55a0 <fprintf@plt>
    9c40:	bl	5000 <abort@plt>

0000000000009c44 <mpc_imag@@Base>:
    9c44:	ldr	w3, [x1, #40]
    9c48:	add	x1, x1, #0x20
    9c4c:	b	51d0 <mpfr_set4@plt>

0000000000009c50 <mpc_init2@@Base>:
    9c50:	stp	x29, x30, [sp, #-32]!
    9c54:	stp	x20, x19, [sp, #16]
    9c58:	mov	x29, sp
    9c5c:	mov	x19, x1
    9c60:	mov	x20, x0
    9c64:	bl	5440 <mpfr_init2@plt>
    9c68:	add	x0, x20, #0x20
    9c6c:	mov	x1, x19
    9c70:	ldp	x20, x19, [sp, #16]
    9c74:	ldp	x29, x30, [sp], #32
    9c78:	b	5440 <mpfr_init2@plt>

0000000000009c7c <mpc_init3@@Base>:
    9c7c:	stp	x29, x30, [sp, #-32]!
    9c80:	stp	x20, x19, [sp, #16]
    9c84:	mov	x29, sp
    9c88:	mov	x19, x2
    9c8c:	mov	x20, x0
    9c90:	bl	5440 <mpfr_init2@plt>
    9c94:	add	x0, x20, #0x20
    9c98:	mov	x1, x19
    9c9c:	ldp	x20, x19, [sp, #16]
    9ca0:	ldp	x29, x30, [sp], #32
    9ca4:	b	5440 <mpfr_init2@plt>

0000000000009ca8 <mpc_inp_str@@Base>:
    9ca8:	sub	sp, sp, #0x80
    9cac:	stp	x29, x30, [sp, #32]
    9cb0:	stp	x28, x27, [sp, #48]
    9cb4:	stp	x26, x25, [sp, #64]
    9cb8:	stp	x24, x23, [sp, #80]
    9cbc:	stp	x22, x21, [sp, #96]
    9cc0:	stp	x20, x19, [sp, #112]
    9cc4:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    9cc8:	ldr	x8, [x8, #4040]
    9ccc:	cmp	x1, #0x0
    9cd0:	mov	x20, x0
    9cd4:	add	x29, sp, #0x20
    9cd8:	ldr	x8, [x8]
    9cdc:	mov	w28, w4
    9ce0:	mov	w21, w3
    9ce4:	mov	x19, x2
    9ce8:	csel	x23, x8, x1, eq  // eq = none
    9cec:	mov	x0, x23
    9cf0:	bl	4f20 <getc@plt>
    9cf4:	cmn	w0, #0x1
    9cf8:	b.eq	9d38 <mpc_inp_str@@Base+0x90>  // b.none
    9cfc:	mov	w24, w0
    9d00:	bl	5170 <__ctype_b_loc@plt>
    9d04:	mov	x25, x0
    9d08:	mov	x22, xzr
    9d0c:	ldr	x8, [x25]
    9d10:	and	w9, w24, #0xff
    9d14:	ldrh	w8, [x8, w9, uxtw #1]
    9d18:	tbz	w8, #13, 9d40 <mpc_inp_str@@Base+0x98>
    9d1c:	mov	x0, x23
    9d20:	bl	4f20 <getc@plt>
    9d24:	mov	w24, w0
    9d28:	cmn	w0, #0x1
    9d2c:	add	x22, x22, #0x1
    9d30:	b.ne	9d0c <mpc_inp_str@@Base+0x64>  // b.any
    9d34:	b	9d4c <mpc_inp_str@@Base+0xa4>
    9d38:	mov	x22, xzr
    9d3c:	b	9d4c <mpc_inp_str@@Base+0xa4>
    9d40:	mov	w0, w24
    9d44:	mov	x1, x23
    9d48:	bl	5210 <ungetc@plt>
    9d4c:	mov	x0, x23
    9d50:	bl	4f20 <getc@plt>
    9d54:	cmn	w0, #0x1
    9d58:	b.eq	9db0 <mpc_inp_str@@Base+0x108>  // b.none
    9d5c:	cmp	w0, #0x28
    9d60:	b.ne	9db8 <mpc_inp_str@@Base+0x110>  // b.any
    9d64:	mov	x0, x23
    9d68:	bl	4f20 <getc@plt>
    9d6c:	cmn	w0, #0x1
    9d70:	b.eq	9e2c <mpc_inp_str@@Base+0x184>  // b.none
    9d74:	mov	w24, w0
    9d78:	bl	5170 <__ctype_b_loc@plt>
    9d7c:	mov	x25, x0
    9d80:	mov	x22, xzr
    9d84:	ldr	x8, [x25]
    9d88:	and	w9, w24, #0xff
    9d8c:	ldrh	w8, [x8, w9, uxtw #1]
    9d90:	tbz	w8, #13, 9e34 <mpc_inp_str@@Base+0x18c>
    9d94:	mov	x0, x23
    9d98:	bl	4f20 <getc@plt>
    9d9c:	mov	w24, w0
    9da0:	cmn	w0, #0x1
    9da4:	add	x22, x22, #0x1
    9da8:	b.ne	9d84 <mpc_inp_str@@Base+0xdc>  // b.any
    9dac:	b	9e40 <mpc_inp_str@@Base+0x198>
    9db0:	mov	x24, xzr
    9db4:	b	9e8c <mpc_inp_str@@Base+0x1e4>
    9db8:	mov	x1, x23
    9dbc:	bl	5210 <ungetc@plt>
    9dc0:	mov	x0, x23
    9dc4:	bl	a094 <mpc_inp_str@@Base+0x3ec>
    9dc8:	mov	x25, x0
    9dcc:	bl	4a00 <strlen@plt>
    9dd0:	mov	x24, x0
    9dd4:	mov	x0, x20
    9dd8:	mov	x1, x25
    9ddc:	mov	w2, w21
    9de0:	mov	w3, w28
    9de4:	bl	5380 <mpc_set_str@plt>
    9de8:	mov	w21, w0
    9dec:	mov	x0, x25
    9df0:	bl	4ff0 <mpc_free_str@plt>
    9df4:	cmn	w21, #0x1
    9df8:	b.eq	9e8c <mpc_inp_str@@Base+0x1e4>  // b.none
    9dfc:	cbz	x19, 9e08 <mpc_inp_str@@Base+0x160>
    9e00:	add	x8, x24, x22
    9e04:	str	x8, [x19]
    9e08:	mov	w0, w21
    9e0c:	ldp	x20, x19, [sp, #112]
    9e10:	ldp	x22, x21, [sp, #96]
    9e14:	ldp	x24, x23, [sp, #80]
    9e18:	ldp	x26, x25, [sp, #64]
    9e1c:	ldp	x28, x27, [sp, #48]
    9e20:	ldp	x29, x30, [sp, #32]
    9e24:	add	sp, sp, #0x80
    9e28:	ret
    9e2c:	mov	x22, xzr
    9e30:	b	9e40 <mpc_inp_str@@Base+0x198>
    9e34:	mov	w0, w24
    9e38:	mov	x1, x23
    9e3c:	bl	5210 <ungetc@plt>
    9e40:	mov	x0, x23
    9e44:	bl	a094 <mpc_inp_str@@Base+0x3ec>
    9e48:	mov	x27, x0
    9e4c:	bl	4a00 <strlen@plt>
    9e50:	add	x24, x0, #0x1
    9e54:	mov	x0, x23
    9e58:	bl	4f20 <getc@plt>
    9e5c:	mov	w25, w0
    9e60:	bl	5170 <__ctype_b_loc@plt>
    9e64:	ldr	x8, [x0]
    9e68:	ldrh	w8, [x8, w25, sxtw #1]
    9e6c:	tbnz	w8, #13, 9ea8 <mpc_inp_str@@Base+0x200>
    9e70:	cmn	w25, #0x1
    9e74:	b.eq	9e84 <mpc_inp_str@@Base+0x1dc>  // b.none
    9e78:	mov	w0, w25
    9e7c:	mov	x1, x23
    9e80:	bl	5210 <ungetc@plt>
    9e84:	mov	x0, x27
    9e88:	bl	4ff0 <mpc_free_str@plt>
    9e8c:	mov	x0, x20
    9e90:	bl	4a40 <mpfr_set_nan@plt>
    9e94:	add	x0, x20, #0x20
    9e98:	bl	4a40 <mpfr_set_nan@plt>
    9e9c:	mov	w21, #0xffffffff            	// #-1
    9ea0:	cbnz	x19, 9e00 <mpc_inp_str@@Base+0x158>
    9ea4:	b	9e08 <mpc_inp_str@@Base+0x160>
    9ea8:	mov	x26, x0
    9eac:	mov	w0, w25
    9eb0:	mov	x1, x23
    9eb4:	stur	w21, [x29, #-4]
    9eb8:	bl	5210 <ungetc@plt>
    9ebc:	mov	x0, x23
    9ec0:	bl	4f20 <getc@plt>
    9ec4:	cmn	w0, #0x1
    9ec8:	b.eq	9ef8 <mpc_inp_str@@Base+0x250>  // b.none
    9ecc:	mov	x21, xzr
    9ed0:	ldr	x8, [x26]
    9ed4:	and	w9, w0, #0xff
    9ed8:	ldrh	w8, [x8, w9, uxtw #1]
    9edc:	tbz	w8, #13, 9f00 <mpc_inp_str@@Base+0x258>
    9ee0:	mov	x0, x23
    9ee4:	bl	4f20 <getc@plt>
    9ee8:	cmn	w0, #0x1
    9eec:	add	x21, x21, #0x1
    9ef0:	b.ne	9ed0 <mpc_inp_str@@Base+0x228>  // b.any
    9ef4:	b	9f08 <mpc_inp_str@@Base+0x260>
    9ef8:	mov	x21, xzr
    9efc:	b	9f08 <mpc_inp_str@@Base+0x260>
    9f00:	mov	x1, x23
    9f04:	bl	5210 <ungetc@plt>
    9f08:	mov	x0, x23
    9f0c:	str	x19, [sp, #8]
    9f10:	stur	w28, [x29, #-8]
    9f14:	bl	a094 <mpc_inp_str@@Base+0x3ec>
    9f18:	mov	x28, x0
    9f1c:	bl	4a00 <strlen@plt>
    9f20:	add	x19, x0, x24
    9f24:	add	x0, x19, #0x2
    9f28:	str	x0, [sp]
    9f2c:	bl	4bf0 <mpc_alloc_str@plt>
    9f30:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    9f34:	add	x1, x1, #0x8ee
    9f38:	mov	x2, x27
    9f3c:	mov	x3, x28
    9f40:	mov	x25, x0
    9f44:	bl	4b30 <sprintf@plt>
    9f48:	tbnz	w0, #31, a034 <mpc_inp_str@@Base+0x38c>
    9f4c:	mov	w24, w0
    9f50:	add	x8, x19, #0x1
    9f54:	cmp	x8, x24
    9f58:	str	x19, [sp, #16]
    9f5c:	b.ne	a064 <mpc_inp_str@@Base+0x3bc>  // b.any
    9f60:	mov	x0, x27
    9f64:	add	x21, x21, x22
    9f68:	bl	4ff0 <mpc_free_str@plt>
    9f6c:	mov	x0, x28
    9f70:	bl	4ff0 <mpc_free_str@plt>
    9f74:	mov	x0, x23
    9f78:	bl	4f20 <getc@plt>
    9f7c:	ldr	x19, [sp, #8]
    9f80:	cmn	w0, #0x1
    9f84:	mov	x22, xzr
    9f88:	b.eq	9fbc <mpc_inp_str@@Base+0x314>  // b.none
    9f8c:	ldur	w28, [x29, #-8]
    9f90:	ldr	x27, [sp, #16]
    9f94:	ldr	x8, [x26]
    9f98:	and	w9, w0, #0xff
    9f9c:	ldrh	w8, [x8, w9, uxtw #1]
    9fa0:	tbz	w8, #13, 9fc8 <mpc_inp_str@@Base+0x320>
    9fa4:	mov	x0, x23
    9fa8:	bl	4f20 <getc@plt>
    9fac:	cmn	w0, #0x1
    9fb0:	add	x22, x22, #0x1
    9fb4:	b.ne	9f94 <mpc_inp_str@@Base+0x2ec>  // b.any
    9fb8:	b	9fd0 <mpc_inp_str@@Base+0x328>
    9fbc:	ldur	w28, [x29, #-8]
    9fc0:	ldr	x27, [sp, #16]
    9fc4:	b	9fd0 <mpc_inp_str@@Base+0x328>
    9fc8:	mov	x1, x23
    9fcc:	bl	5210 <ungetc@plt>
    9fd0:	mov	x0, x23
    9fd4:	add	x22, x21, x22
    9fd8:	bl	4f20 <getc@plt>
    9fdc:	cmn	w0, #0x1
    9fe0:	b.eq	a018 <mpc_inp_str@@Base+0x370>  // b.none
    9fe4:	ldur	w21, [x29, #-4]
    9fe8:	cmp	w0, #0x29
    9fec:	b.ne	a024 <mpc_inp_str@@Base+0x37c>  // b.any
    9ff0:	ldr	x23, [sp]
    9ff4:	add	x2, x27, #0x3
    9ff8:	mov	x0, x25
    9ffc:	mov	x1, x23
    a000:	bl	5330 <mpc_realloc_str@plt>
    a004:	mov	w8, #0x29                  	// #41
    a008:	mov	x25, x0
    a00c:	strb	w8, [x0, x24]
    a010:	strb	wzr, [x0, x23]
    a014:	b	9dd4 <mpc_inp_str@@Base+0x12c>
    a018:	ldur	w21, [x29, #-4]
    a01c:	mov	x24, x27
    a020:	b	9dd4 <mpc_inp_str@@Base+0x12c>
    a024:	mov	x1, x23
    a028:	bl	5210 <ungetc@plt>
    a02c:	mov	x24, x27
    a030:	b	9dd4 <mpc_inp_str@@Base+0x12c>
    a034:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    a038:	ldr	x8, [x8, #4008]
    a03c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    a040:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    a044:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    a048:	ldr	x0, [x8]
    a04c:	add	x1, x1, #0x7c0
    a050:	add	x2, x2, #0x8f5
    a054:	add	x4, x4, #0x8ff
    a058:	mov	w3, #0xca                  	// #202
    a05c:	bl	55a0 <fprintf@plt>
    a060:	bl	5000 <abort@plt>
    a064:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    a068:	ldr	x8, [x8, #4008]
    a06c:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    a070:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    a074:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    a078:	ldr	x0, [x8]
    a07c:	add	x1, x1, #0x7c0
    a080:	add	x2, x2, #0x8f5
    a084:	add	x4, x4, #0x908
    a088:	mov	w3, #0xcc                  	// #204
    a08c:	bl	55a0 <fprintf@plt>
    a090:	bl	5000 <abort@plt>
    a094:	stp	x29, x30, [sp, #-96]!
    a098:	stp	x20, x19, [sp, #80]
    a09c:	mov	x19, x0
    a0a0:	mov	w0, #0x64                  	// #100
    a0a4:	str	x27, [sp, #16]
    a0a8:	stp	x26, x25, [sp, #32]
    a0ac:	stp	x24, x23, [sp, #48]
    a0b0:	stp	x22, x21, [sp, #64]
    a0b4:	mov	x29, sp
    a0b8:	mov	w22, #0x64                  	// #100
    a0bc:	bl	4bf0 <mpc_alloc_str@plt>
    a0c0:	mov	x20, x0
    a0c4:	mov	x8, xzr
    a0c8:	add	x26, x8, #0x3
    a0cc:	neg	x21, x22
    a0d0:	mov	x0, x19
    a0d4:	bl	4f20 <getc@plt>
    a0d8:	mov	w23, w0
    a0dc:	cmn	w0, #0x1
    a0e0:	b.eq	a148 <mpc_inp_str@@Base+0x4a0>  // b.none
    a0e4:	cmp	w23, #0xa
    a0e8:	b.eq	a148 <mpc_inp_str@@Base+0x4a0>  // b.none
    a0ec:	bl	5170 <__ctype_b_loc@plt>
    a0f0:	orr	w8, w23, #0x1
    a0f4:	cmp	w8, #0x29
    a0f8:	b.eq	a148 <mpc_inp_str@@Base+0x4a0>  // b.none
    a0fc:	ldr	x8, [x0]
    a100:	and	w9, w23, #0xff
    a104:	ldrh	w8, [x8, w9, uxtw #1]
    a108:	tbnz	w8, #13, a148 <mpc_inp_str@@Base+0x4a0>
    a10c:	add	x8, x20, x26
    a110:	add	x26, x26, #0x1
    a114:	add	x9, x21, x26
    a118:	cmp	x9, #0x3
    a11c:	sturb	w23, [x8, #-3]
    a120:	b.ne	a0d0 <mpc_inp_str@@Base+0x428>  // b.any
    a124:	lsl	x21, x22, #1
    a128:	mov	x0, x20
    a12c:	mov	x1, x22
    a130:	mov	x2, x21
    a134:	bl	5330 <mpc_realloc_str@plt>
    a138:	mov	x20, x0
    a13c:	sub	x8, x26, #0x3
    a140:	mov	x22, x21
    a144:	b	a0c8 <mpc_inp_str@@Base+0x420>
    a148:	sub	x21, x26, #0x2
    a14c:	mov	x0, x20
    a150:	mov	x1, x22
    a154:	mov	x2, x21
    a158:	bl	5330 <mpc_realloc_str@plt>
    a15c:	mov	x20, x0
    a160:	add	x9, x0, x26
    a164:	subs	x8, x26, #0x3
    a168:	sturb	wzr, [x9, #-3]
    a16c:	b.eq	a270 <mpc_inp_str@@Base+0x5c8>  // b.none
    a170:	cmp	w23, #0x28
    a174:	b.eq	a188 <mpc_inp_str@@Base+0x4e0>  // b.none
    a178:	cmn	w23, #0x1
    a17c:	b.eq	a270 <mpc_inp_str@@Base+0x5c8>  // b.none
    a180:	mov	w0, w23
    a184:	b	a268 <mpc_inp_str@@Base+0x5c0>
    a188:	cmp	x8, #0x5
    a18c:	b.eq	a214 <mpc_inp_str@@Base+0x56c>  // b.none
    a190:	cmp	x8, #0x3
    a194:	b.ne	a264 <mpc_inp_str@@Base+0x5bc>  // b.any
    a198:	bl	4c50 <__ctype_tolower_loc@plt>
    a19c:	ldr	x8, [x0]
    a1a0:	ldrb	w9, [x20]
    a1a4:	ldr	w9, [x8, x9, lsl #2]
    a1a8:	cmp	w9, #0x6e
    a1ac:	b.ne	a264 <mpc_inp_str@@Base+0x5bc>  // b.any
    a1b0:	ldrb	w9, [x20, #1]
    a1b4:	ldr	w9, [x8, x9, lsl #2]
    a1b8:	cmp	w9, #0x61
    a1bc:	b.ne	a264 <mpc_inp_str@@Base+0x5bc>  // b.any
    a1c0:	ldrb	w9, [x20, #2]
    a1c4:	ldr	w8, [x8, x9, lsl #2]
    a1c8:	cmp	w8, #0x6e
    a1cc:	b.ne	a264 <mpc_inp_str@@Base+0x5bc>  // b.any
    a1d0:	mov	w0, #0x64                  	// #100
    a1d4:	mov	w23, #0x64                  	// #100
    a1d8:	bl	4bf0 <mpc_alloc_str@plt>
    a1dc:	mov	x22, x0
    a1e0:	mov	x0, x19
    a1e4:	bl	4f20 <getc@plt>
    a1e8:	mov	w24, w0
    a1ec:	bl	5170 <__ctype_b_loc@plt>
    a1f0:	cmp	w24, #0x5f
    a1f4:	mov	x25, x0
    a1f8:	b.eq	a290 <mpc_inp_str@@Base+0x5e8>  // b.none
    a1fc:	ldr	x8, [x25]
    a200:	and	w9, w24, #0xff
    a204:	ldrh	w8, [x8, w9, uxtw #1]
    a208:	tbnz	w8, #3, a290 <mpc_inp_str@@Base+0x5e8>
    a20c:	mov	x27, xzr
    a210:	b	a2ec <mpc_inp_str@@Base+0x644>
    a214:	ldrb	w8, [x20]
    a218:	cmp	w8, #0x40
    a21c:	b.ne	a264 <mpc_inp_str@@Base+0x5bc>  // b.any
    a220:	bl	4c50 <__ctype_tolower_loc@plt>
    a224:	ldr	x8, [x0]
    a228:	ldrb	w9, [x20, #1]
    a22c:	ldr	w9, [x8, x9, lsl #2]
    a230:	cmp	w9, #0x6e
    a234:	b.ne	a264 <mpc_inp_str@@Base+0x5bc>  // b.any
    a238:	ldrb	w9, [x20, #2]
    a23c:	ldr	w9, [x8, x9, lsl #2]
    a240:	cmp	w9, #0x61
    a244:	b.ne	a264 <mpc_inp_str@@Base+0x5bc>  // b.any
    a248:	ldrb	w9, [x20, #3]
    a24c:	ldr	w8, [x8, x9, lsl #2]
    a250:	cmp	w8, #0x6e
    a254:	b.ne	a264 <mpc_inp_str@@Base+0x5bc>  // b.any
    a258:	ldrb	w8, [x20, #4]
    a25c:	cmp	w8, #0x40
    a260:	b.eq	a1d0 <mpc_inp_str@@Base+0x528>  // b.none
    a264:	mov	w0, #0x28                  	// #40
    a268:	mov	x1, x19
    a26c:	bl	5210 <ungetc@plt>
    a270:	mov	x0, x20
    a274:	ldp	x20, x19, [sp, #80]
    a278:	ldp	x22, x21, [sp, #64]
    a27c:	ldp	x24, x23, [sp, #48]
    a280:	ldp	x26, x25, [sp, #32]
    a284:	ldr	x27, [sp, #16]
    a288:	ldp	x29, x30, [sp], #96
    a28c:	ret
    a290:	mov	x27, xzr
    a294:	mov	w23, #0x64                  	// #100
    a298:	strb	w24, [x22, x27]
    a29c:	add	x27, x27, #0x1
    a2a0:	cmp	x27, x23
    a2a4:	b.ne	a2c4 <mpc_inp_str@@Base+0x61c>  // b.any
    a2a8:	lsl	x24, x23, #1
    a2ac:	mov	x0, x22
    a2b0:	mov	x1, x23
    a2b4:	mov	x2, x24
    a2b8:	bl	5330 <mpc_realloc_str@plt>
    a2bc:	mov	x22, x0
    a2c0:	mov	x23, x24
    a2c4:	mov	x0, x19
    a2c8:	bl	4f20 <getc@plt>
    a2cc:	ldr	x8, [x25]
    a2d0:	and	w9, w0, #0xff
    a2d4:	mov	w24, w0
    a2d8:	cmp	w0, #0x5f
    a2dc:	ldrh	w8, [x8, w9, uxtw #1]
    a2e0:	and	w8, w8, #0x8
    a2e4:	b.eq	a298 <mpc_inp_str@@Base+0x5f0>  // b.none
    a2e8:	cbnz	w8, a298 <mpc_inp_str@@Base+0x5f0>
    a2ec:	add	x2, x27, #0x1
    a2f0:	mov	x0, x22
    a2f4:	mov	x1, x23
    a2f8:	bl	5330 <mpc_realloc_str@plt>
    a2fc:	mov	x22, x0
    a300:	cmn	w24, #0x1
    a304:	strb	wzr, [x0, x27]
    a308:	b.eq	a318 <mpc_inp_str@@Base+0x670>  // b.none
    a30c:	mov	w0, w24
    a310:	mov	x1, x19
    a314:	bl	5210 <ungetc@plt>
    a318:	mov	x0, x22
    a31c:	bl	4a00 <strlen@plt>
    a320:	add	x8, x0, x26
    a324:	sub	x9, x8, #0x2
    a328:	mov	x23, x0
    a32c:	cmp	x9, x21
    a330:	b.cc	a350 <mpc_inp_str@@Base+0x6a8>  // b.lo, b.ul, b.last
    a334:	sub	x24, x8, #0x1
    a338:	mov	x0, x20
    a33c:	mov	x1, x21
    a340:	mov	x2, x24
    a344:	bl	5330 <mpc_realloc_str@plt>
    a348:	mov	x20, x0
    a34c:	mov	x21, x24
    a350:	add	x8, x20, x26
    a354:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    a358:	sub	x0, x8, #0x3
    a35c:	add	x1, x1, #0x917
    a360:	mov	x2, x22
    a364:	bl	4b30 <sprintf@plt>
    a368:	tbnz	w0, #31, a3cc <mpc_inp_str@@Base+0x724>
    a36c:	add	x8, x23, #0x1
    a370:	cmp	x8, w0, uxtw
    a374:	b.ne	a3fc <mpc_inp_str@@Base+0x754>  // b.any
    a378:	mov	x0, x19
    a37c:	bl	4f20 <getc@plt>
    a380:	cmp	w0, #0x29
    a384:	b.eq	a39c <mpc_inp_str@@Base+0x6f4>  // b.none
    a388:	cmn	w0, #0x1
    a38c:	b.eq	a3c0 <mpc_inp_str@@Base+0x718>  // b.none
    a390:	mov	x1, x19
    a394:	bl	5210 <ungetc@plt>
    a398:	b	a3c0 <mpc_inp_str@@Base+0x718>
    a39c:	add	x2, x23, x26
    a3a0:	mov	x0, x20
    a3a4:	mov	x1, x21
    a3a8:	bl	5330 <mpc_realloc_str@plt>
    a3ac:	add	x8, x0, x23
    a3b0:	add	x8, x8, x26
    a3b4:	mov	w9, #0x29                  	// #41
    a3b8:	mov	x20, x0
    a3bc:	sturh	w9, [x8, #-2]
    a3c0:	mov	x0, x22
    a3c4:	bl	4ff0 <mpc_free_str@plt>
    a3c8:	b	a270 <mpc_inp_str@@Base+0x5c8>
    a3cc:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    a3d0:	ldr	x8, [x8, #4008]
    a3d4:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    a3d8:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    a3dc:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    a3e0:	ldr	x0, [x8]
    a3e4:	add	x1, x1, #0x7c0
    a3e8:	add	x2, x2, #0x8f5
    a3ec:	add	x4, x4, #0x8ff
    a3f0:	mov	w3, #0x88                  	// #136
    a3f4:	bl	55a0 <fprintf@plt>
    a3f8:	bl	5000 <abort@plt>
    a3fc:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    a400:	ldr	x8, [x8, #4008]
    a404:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    a408:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    a40c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    a410:	ldr	x0, [x8]
    a414:	add	x1, x1, #0x7c0
    a418:	add	x2, x2, #0x8f5
    a41c:	add	x4, x4, #0x91b
    a420:	mov	w3, #0x8a                  	// #138
    a424:	bl	55a0 <fprintf@plt>
    a428:	bl	5000 <abort@plt>

000000000000a42c <mpc_log@@Base>:
    a42c:	sub	sp, sp, #0xb0
    a430:	stp	x20, x19, [sp, #160]
    a434:	mov	x19, x0
    a438:	mov	x0, x1
    a43c:	stp	x29, x30, [sp, #80]
    a440:	stp	x28, x27, [sp, #96]
    a444:	stp	x26, x25, [sp, #112]
    a448:	stp	x24, x23, [sp, #128]
    a44c:	stp	x22, x21, [sp, #144]
    a450:	add	x29, sp, #0x50
    a454:	mov	w20, w2
    a458:	mov	x21, x1
    a45c:	bl	54d0 <mpfr_number_p@plt>
    a460:	cbz	w0, a5a4 <mpc_log@@Base+0x178>
    a464:	add	x22, x21, #0x20
    a468:	mov	x0, x22
    a46c:	bl	54d0 <mpfr_number_p@plt>
    a470:	cbz	w0, a5a4 <mpc_log@@Base+0x178>
    a474:	mov	x0, x21
    a478:	bl	51f0 <mpfr_sgn@plt>
    a47c:	mov	w23, w0
    a480:	mov	x0, x22
    a484:	bl	51f0 <mpfr_sgn@plt>
    a488:	cbz	w0, a648 <mpc_log@@Base+0x21c>
    a48c:	cbz	w23, a7e8 <mpc_log@@Base+0x3bc>
    a490:	ldr	x24, [x19]
    a494:	add	x0, sp, #0x10
    a498:	mov	w1, #0x2                   	// #2
    a49c:	bl	5440 <mpfr_init2@plt>
    a4a0:	and	w8, w20, #0xf
    a4a4:	tst	w20, #0xf
    a4a8:	mov	x0, x24
    a4ac:	stp	w8, w20, [sp, #8]
    a4b0:	cset	w27, eq  // eq = none
    a4b4:	bl	4d20 <mpc_ceil_log2@plt>
    a4b8:	add	x8, x24, x0
    a4bc:	add	x24, x8, #0x4
    a4c0:	add	x0, sp, #0x10
    a4c4:	mov	x1, x24
    a4c8:	bl	4c80 <mpfr_set_prec@plt>
    a4cc:	add	x0, sp, #0x10
    a4d0:	mov	x1, x21
    a4d4:	mov	w2, wzr
    a4d8:	bl	51a0 <mpc_abs@plt>
    a4dc:	ldr	x8, [sp, #32]
    a4e0:	mov	x25, #0x8000000000000003    	// #-9223372036854775805
    a4e4:	cmp	x8, x25
    a4e8:	b.eq	a684 <mpc_log@@Base+0x258>  // b.none
    a4ec:	mov	w20, wzr
    a4f0:	mov	w26, #0x1                   	// #1
    a4f4:	mov	x28, #0x8000000000000001    	// #-9223372036854775807
    a4f8:	mov	x23, #0x100000000           	// #4294967296
    a4fc:	add	x0, sp, #0x10
    a500:	add	x1, sp, #0x10
    a504:	mov	w2, wzr
    a508:	bl	4d80 <mpfr_log@plt>
    a50c:	ldr	x8, [sp, #32]
    a510:	cmp	x8, x28
    a514:	b.eq	a594 <mpc_log@@Base+0x168>  // b.none
    a518:	ldr	x10, [x19]
    a51c:	sub	x9, x23, x8, lsl #32
    a520:	asr	x9, x9, #32
    a524:	cmp	x8, #0x0
    a528:	csinc	x8, x9, xzr, lt  // lt = tstop
    a52c:	sub	x1, x24, x8
    a530:	add	x4, x10, x27
    a534:	add	x0, sp, #0x10
    a538:	mov	w3, #0x1                   	// #1
    a53c:	mov	w2, wzr
    a540:	bl	5450 <mpfr_can_round@plt>
    a544:	cmp	w0, #0x0
    a548:	cset	w20, ne  // ne = any
    a54c:	cmp	w26, #0x1
    a550:	b.hi	a594 <mpc_log@@Base+0x168>  // b.pmore
    a554:	cbnz	w0, a594 <mpc_log@@Base+0x168>
    a558:	mov	x0, x24
    a55c:	add	w26, w26, #0x1
    a560:	bl	4d20 <mpc_ceil_log2@plt>
    a564:	add	x8, x24, x0
    a568:	add	x24, x8, #0x4
    a56c:	add	x0, sp, #0x10
    a570:	mov	x1, x24
    a574:	bl	4c80 <mpfr_set_prec@plt>
    a578:	add	x0, sp, #0x10
    a57c:	mov	x1, x21
    a580:	mov	w2, wzr
    a584:	bl	51a0 <mpc_abs@plt>
    a588:	ldr	x8, [sp, #32]
    a58c:	cmp	x8, x25
    a590:	b.ne	a4fc <mpc_log@@Base+0xd0>  // b.any
    a594:	tbz	w20, #0, a684 <mpc_log@@Base+0x258>
    a598:	ldp	w24, w20, [sp, #8]
    a59c:	mov	w23, wzr
    a5a0:	b	a874 <mpc_log@@Base+0x448>
    a5a4:	ldr	x8, [x21, #16]
    a5a8:	ldr	x9, [x21, #48]
    a5ac:	mov	x10, #0x2                   	// #2
    a5b0:	movk	x10, #0x8000, lsl #48
    a5b4:	cmp	x8, x10
    a5b8:	b.ne	a5d8 <mpc_log@@Base+0x1ac>  // b.any
    a5bc:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    a5c0:	cmp	x9, x8
    a5c4:	b.ne	a5ec <mpc_log@@Base+0x1c0>  // b.any
    a5c8:	mov	w1, #0x1                   	// #1
    a5cc:	mov	x0, x19
    a5d0:	bl	5120 <mpfr_set_inf@plt>
    a5d4:	b	a5f4 <mpc_log@@Base+0x1c8>
    a5d8:	cmp	x9, x10
    a5dc:	b.ne	a614 <mpc_log@@Base+0x1e8>  // b.any
    a5e0:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    a5e4:	cmp	x8, x9
    a5e8:	b.eq	a5c8 <mpc_log@@Base+0x19c>  // b.none
    a5ec:	mov	x0, x19
    a5f0:	bl	4a40 <mpfr_set_nan@plt>
    a5f4:	add	x0, x19, #0x20
    a5f8:	bl	4a40 <mpfr_set_nan@plt>
    a5fc:	mov	w8, wzr
    a600:	mov	w9, wzr
    a604:	cmp	w8, #0x0
    a608:	mov	w8, #0x8                   	// #8
    a60c:	csel	w0, w8, w9, ne  // ne = any
    a610:	b	aa34 <mpc_log@@Base+0x608>
    a614:	add	x1, x21, #0x20
    a618:	add	x0, x19, #0x20
    a61c:	asr	w3, w20, #4
    a620:	mov	x2, x21
    a624:	bl	4ca0 <mpfr_atan2@plt>
    a628:	mov	w20, w0
    a62c:	mov	w1, #0x1                   	// #1
    a630:	mov	x0, x19
    a634:	bl	5120 <mpfr_set_inf@plt>
    a638:	lsr	w8, w20, #31
    a63c:	cbz	w20, a600 <mpc_log@@Base+0x1d4>
    a640:	mov	w9, #0x4                   	// #4
    a644:	b	a604 <mpc_log@@Base+0x1d8>
    a648:	cbz	w23, a838 <mpc_log@@Base+0x40c>
    a64c:	cmp	w23, #0x1
    a650:	b.lt	a8f8 <mpc_log@@Base+0x4cc>  // b.tstop
    a654:	and	w2, w20, #0xf
    a658:	mov	x0, x19
    a65c:	mov	x1, x21
    a660:	bl	4d80 <mpfr_log@plt>
    a664:	ldr	w3, [x21, #40]
    a668:	mov	w23, w0
    a66c:	add	x0, x19, #0x20
    a670:	asr	w2, w20, #4
    a674:	mov	x1, x22
    a678:	bl	51d0 <mpfr_set4@plt>
    a67c:	mov	w20, w0
    a680:	b	a974 <mpc_log@@Base+0x548>
    a684:	ldr	x24, [x19]
    a688:	sub	x0, x29, #0x20
    a68c:	mov	w1, #0x2                   	// #2
    a690:	bl	5440 <mpfr_init2@plt>
    a694:	mov	x0, x21
    a698:	mov	x1, x22
    a69c:	bl	53b0 <mpfr_cmpabs@plt>
    a6a0:	cmp	w0, #0x0
    a6a4:	csel	x25, x22, x21, ge  // ge = tcont
    a6a8:	csel	x26, x21, x22, ge  // ge = tcont
    a6ac:	mov	x28, #0x8000000000000001    	// #-9223372036854775807
    a6b0:	b	a6e0 <mpc_log@@Base+0x2b4>
    a6b4:	ldr	x8, [sp, #32]
    a6b8:	cmp	x8, x28
    a6bc:	b.eq	a864 <mpc_log@@Base+0x438>  // b.none
    a6c0:	ldr	x8, [x19]
    a6c4:	sub	x1, x24, w20, sxtw
    a6c8:	add	x0, sp, #0x10
    a6cc:	mov	w3, #0x1                   	// #1
    a6d0:	add	x4, x8, x27
    a6d4:	mov	w2, wzr
    a6d8:	bl	5450 <mpfr_can_round@plt>
    a6dc:	cbnz	w0, a830 <mpc_log@@Base+0x404>
    a6e0:	mov	x0, x24
    a6e4:	bl	4d20 <mpc_ceil_log2@plt>
    a6e8:	add	x8, x24, x0
    a6ec:	add	x24, x8, #0x4
    a6f0:	sub	x0, x29, #0x20
    a6f4:	mov	x1, x24
    a6f8:	bl	4c80 <mpfr_set_prec@plt>
    a6fc:	add	x0, sp, #0x10
    a700:	mov	x1, x24
    a704:	bl	4c80 <mpfr_set_prec@plt>
    a708:	sub	x0, x29, #0x20
    a70c:	mov	w3, #0x3                   	// #3
    a710:	mov	x1, x25
    a714:	mov	x2, x26
    a718:	bl	5150 <mpfr_div@plt>
    a71c:	sub	x0, x29, #0x20
    a720:	sub	x1, x29, #0x20
    a724:	mov	w2, #0x3                   	// #3
    a728:	bl	5010 <mpfr_sqr@plt>
    a72c:	sub	x0, x29, #0x20
    a730:	sub	x1, x29, #0x20
    a734:	mov	w2, #0x3                   	// #3
    a738:	bl	51e0 <mpfr_log1p@plt>
    a73c:	sub	x0, x29, #0x20
    a740:	sub	x1, x29, #0x20
    a744:	mov	w2, #0x1                   	// #1
    a748:	mov	w3, #0x3                   	// #3
    a74c:	bl	5320 <mpfr_div_2ui@plt>
    a750:	add	x0, sp, #0x10
    a754:	mov	w3, #0x1                   	// #1
    a758:	mov	x1, x26
    a75c:	mov	w2, wzr
    a760:	bl	51d0 <mpfr_set4@plt>
    a764:	add	x0, sp, #0x10
    a768:	add	x1, sp, #0x10
    a76c:	mov	w2, wzr
    a770:	bl	4d80 <mpfr_log@plt>
    a774:	ldr	x20, [sp, #32]
    a778:	ldr	w23, [sp, #24]
    a77c:	add	x0, sp, #0x10
    a780:	add	x1, sp, #0x10
    a784:	sub	x2, x29, #0x20
    a788:	mov	w3, wzr
    a78c:	bl	4e60 <mpfr_add@plt>
    a790:	tbnz	w23, #31, a79c <mpc_log@@Base+0x370>
    a794:	mov	w20, #0x5                   	// #5
    a798:	b	a7bc <mpc_log@@Base+0x390>
    a79c:	ldr	x9, [sp, #32]
    a7a0:	ldur	x8, [x29, #-16]
    a7a4:	mvn	x9, x9
    a7a8:	add	x8, x8, #0x5
    a7ac:	add	x9, x20, x9
    a7b0:	cmp	x8, x9
    a7b4:	csel	x8, x8, x9, gt
    a7b8:	add	x20, x8, #0x2
    a7bc:	mov	x1, #0xffffffffffffffff    	// #-1
    a7c0:	mov	x0, x26
    a7c4:	mov	x2, xzr
    a7c8:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    a7cc:	cbz	w0, a6b4 <mpc_log@@Base+0x288>
    a7d0:	mov	w1, #0x1                   	// #1
    a7d4:	mov	x0, x26
    a7d8:	mov	x2, xzr
    a7dc:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    a7e0:	cbnz	w0, a6c0 <mpc_log@@Base+0x294>
    a7e4:	b	a6b4 <mpc_log@@Base+0x288>
    a7e8:	cmp	w0, #0x1
    a7ec:	b.lt	a98c <mpc_log@@Base+0x560>  // b.tstop
    a7f0:	and	w2, w20, #0xf
    a7f4:	mov	x0, x19
    a7f8:	mov	x1, x22
    a7fc:	bl	4d80 <mpfr_log@plt>
    a800:	add	x22, x19, #0x20
    a804:	mov	w21, w0
    a808:	asr	w1, w20, #4
    a80c:	mov	x0, x22
    a810:	bl	4a80 <mpfr_const_pi@plt>
    a814:	mov	w19, w0
    a818:	mov	w2, #0x1                   	// #1
    a81c:	mov	x0, x22
    a820:	mov	x1, x22
    a824:	mov	w3, wzr
    a828:	bl	5320 <mpfr_div_2ui@plt>
    a82c:	b	aa0c <mpc_log@@Base+0x5e0>
    a830:	mov	w23, wzr
    a834:	b	a868 <mpc_log@@Base+0x43c>
    a838:	add	x0, x19, #0x20
    a83c:	asr	w3, w20, #4
    a840:	mov	x1, x22
    a844:	mov	x2, x21
    a848:	bl	4ca0 <mpfr_atan2@plt>
    a84c:	mov	w20, w0
    a850:	mov	w1, #0xffffffff            	// #-1
    a854:	mov	x0, x19
    a858:	bl	5120 <mpfr_set_inf@plt>
    a85c:	mov	w8, wzr
    a860:	b	a984 <mpc_log@@Base+0x558>
    a864:	mov	w23, #0x1                   	// #1
    a868:	ldp	w24, w20, [sp, #8]
    a86c:	sub	x0, x29, #0x20
    a870:	bl	4d60 <mpfr_clear@plt>
    a874:	add	x0, x19, #0x20
    a878:	asr	w3, w20, #4
    a87c:	mov	x1, x22
    a880:	mov	x2, x21
    a884:	bl	4ca0 <mpfr_atan2@plt>
    a888:	mov	w20, w0
    a88c:	cbz	w23, a8ac <mpc_log@@Base+0x480>
    a890:	bl	55c0 <mpfr_get_emin_min@plt>
    a894:	sub	x2, x0, #0x2
    a898:	mov	w1, #0x1                   	// #1
    a89c:	mov	x0, x19
    a8a0:	mov	w3, w24
    a8a4:	bl	5130 <mpfr_set_ui_2exp@plt>
    a8a8:	b	a8c0 <mpc_log@@Base+0x494>
    a8ac:	ldr	w3, [sp, #24]
    a8b0:	add	x1, sp, #0x10
    a8b4:	mov	x0, x19
    a8b8:	mov	w2, w24
    a8bc:	bl	51d0 <mpfr_set4@plt>
    a8c0:	mov	w19, w0
    a8c4:	add	x0, sp, #0x10
    a8c8:	bl	4d60 <mpfr_clear@plt>
    a8cc:	cmp	w19, #0x0
    a8d0:	mov	w8, #0x2                   	// #2
    a8d4:	cset	w9, ne  // ne = any
    a8d8:	csel	w8, w8, w9, lt  // lt = tstop
    a8dc:	cmp	w20, #0x0
    a8e0:	cset	w9, ne  // ne = any
    a8e4:	lsl	w9, w9, #2
    a8e8:	mov	w10, #0x8                   	// #8
    a8ec:	csel	w9, w10, w9, lt  // lt = tstop
    a8f0:	orr	w0, w8, w9
    a8f4:	b	aa34 <mpc_log@@Base+0x608>
    a8f8:	ldr	w22, [x21, #40]
    a8fc:	asr	w8, w20, #4
    a900:	ldp	q0, q1, [x21]
    a904:	mov	w9, #0x2                   	// #2
    a908:	cmp	w8, #0x3
    a90c:	mov	w10, #0x3                   	// #3
    a910:	csel	w9, w9, w8, eq  // eq = none
    a914:	cmp	w8, #0x2
    a918:	csel	w9, w10, w9, eq  // eq = none
    a91c:	cmp	w22, #0x0
    a920:	add	x0, sp, #0x10
    a924:	add	x1, sp, #0x10
    a928:	mov	w2, wzr
    a92c:	csel	w21, w9, w8, lt  // lt = tstop
    a930:	stp	q0, q1, [sp, #16]
    a934:	bl	4b80 <mpfr_neg@plt>
    a938:	and	w2, w20, #0xf
    a93c:	add	x1, sp, #0x10
    a940:	mov	x0, x19
    a944:	bl	4d80 <mpfr_log@plt>
    a948:	mov	w23, w0
    a94c:	add	x0, x19, #0x20
    a950:	mov	w1, w21
    a954:	bl	4a80 <mpfr_const_pi@plt>
    a958:	mov	w20, w0
    a95c:	tbz	w22, #31, a974 <mpc_log@@Base+0x548>
    a960:	mov	x0, x19
    a964:	mov	x1, x19
    a968:	mov	w2, wzr
    a96c:	bl	4f60 <mpc_conj@plt>
    a970:	neg	w20, w20
    a974:	cmp	w23, #0x0
    a978:	cset	w8, ne  // ne = any
    a97c:	mov	w9, #0x2                   	// #2
    a980:	csel	w8, w9, w8, lt  // lt = tstop
    a984:	cmp	w20, #0x0
    a988:	b	aa20 <mpc_log@@Base+0x5f4>
    a98c:	ldp	q1, q0, [x22]
    a990:	add	x0, sp, #0x10
    a994:	add	x1, sp, #0x10
    a998:	mov	w2, wzr
    a99c:	stp	q1, q0, [sp, #16]
    a9a0:	bl	4b80 <mpfr_neg@plt>
    a9a4:	and	w2, w20, #0xf
    a9a8:	add	x1, sp, #0x10
    a9ac:	mov	x0, x19
    a9b0:	bl	4d80 <mpfr_log@plt>
    a9b4:	asr	w8, w20, #4
    a9b8:	mov	w9, #0x2                   	// #2
    a9bc:	cmp	w8, #0x3
    a9c0:	add	x19, x19, #0x20
    a9c4:	csel	w9, w9, w8, eq  // eq = none
    a9c8:	cmp	w8, #0x2
    a9cc:	mov	w8, #0x3                   	// #3
    a9d0:	mov	w21, w0
    a9d4:	csel	w1, w8, w9, eq  // eq = none
    a9d8:	mov	x0, x19
    a9dc:	bl	4a80 <mpfr_const_pi@plt>
    a9e0:	mov	w20, w0
    a9e4:	mov	w2, #0x1                   	// #1
    a9e8:	mov	x0, x19
    a9ec:	mov	x1, x19
    a9f0:	mov	w3, wzr
    a9f4:	bl	5320 <mpfr_div_2ui@plt>
    a9f8:	mov	x0, x19
    a9fc:	mov	x1, x19
    aa00:	mov	w2, wzr
    aa04:	bl	4b80 <mpfr_neg@plt>
    aa08:	neg	w19, w20
    aa0c:	cmp	w21, #0x0
    aa10:	mov	w8, #0x2                   	// #2
    aa14:	cset	w9, ne  // ne = any
    aa18:	csel	w8, w8, w9, lt  // lt = tstop
    aa1c:	cmp	w19, #0x0
    aa20:	cset	w9, ne  // ne = any
    aa24:	lsl	w9, w9, #2
    aa28:	mov	w10, #0x8                   	// #8
    aa2c:	csel	w9, w10, w9, lt  // lt = tstop
    aa30:	orr	w0, w9, w8
    aa34:	ldp	x20, x19, [sp, #160]
    aa38:	ldp	x22, x21, [sp, #144]
    aa3c:	ldp	x24, x23, [sp, #128]
    aa40:	ldp	x26, x25, [sp, #112]
    aa44:	ldp	x28, x27, [sp, #96]
    aa48:	ldp	x29, x30, [sp, #80]
    aa4c:	add	sp, sp, #0xb0
    aa50:	ret

000000000000aa54 <mpc_log10@@Base>:
    aa54:	sub	sp, sp, #0x120
    aa58:	stp	x29, x30, [sp, #192]
    aa5c:	add	x29, sp, #0xc0
    aa60:	stp	x24, x23, [sp, #240]
    aa64:	stp	x22, x21, [sp, #256]
    aa68:	mov	x23, x1
    aa6c:	mov	x21, x0
    aa70:	sub	x0, x29, #0x28
    aa74:	mov	w1, #0x2                   	// #2
    aa78:	stp	x28, x27, [sp, #208]
    aa7c:	stp	x26, x25, [sp, #224]
    aa80:	stp	x20, x19, [sp, #272]
    aa84:	mov	w19, w2
    aa88:	bl	5440 <mpfr_init2@plt>
    aa8c:	add	x0, sp, #0x58
    aa90:	mov	w1, #0x2                   	// #2
    aa94:	add	x20, sp, #0x58
    aa98:	bl	4cf0 <mpc_init2@plt>
    aa9c:	str	x21, [sp, #32]
    aaa0:	ldr	x8, [x21], #32
    aaa4:	and	w10, w19, #0xf
    aaa8:	mov	w25, wzr
    aaac:	mov	w24, wzr
    aab0:	ldr	x9, [x21]
    aab4:	str	x21, [sp, #48]
    aab8:	add	x21, x20, #0x20
    aabc:	str	w10, [sp, #12]
    aac0:	cmp	x8, x9
    aac4:	csel	x26, x8, x9, gt
    aac8:	cmp	w19, #0x10
    aacc:	cset	w8, cc  // cc = lo, ul, last
    aad0:	tst	w19, #0xf
    aad4:	add	x10, x23, #0x20
    aad8:	str	x8, [sp, #40]
    aadc:	cset	w8, eq  // eq = none
    aae0:	stp	x10, x8, [sp, #16]
    aae4:	b	aaf0 <mpc_log10@@Base+0x9c>
    aae8:	mov	w28, w22
    aaec:	cbnz	w28, ad88 <mpc_log10@@Base+0x334>
    aaf0:	cmp	w25, #0x1
    aaf4:	b.hi	ab08 <mpc_log10@@Base+0xb4>  // b.pmore
    aaf8:	mov	x0, x26
    aafc:	bl	4d20 <mpc_ceil_log2@plt>
    ab00:	add	x8, x0, #0x4
    ab04:	b	ab14 <mpc_log10@@Base+0xc0>
    ab08:	cmp	x26, #0x0
    ab0c:	cinc	x8, x26, lt  // lt = tstop
    ab10:	asr	x8, x8, #1
    ab14:	add	x26, x8, x26
    ab18:	sub	x0, x29, #0x28
    ab1c:	mov	x1, x26
    ab20:	add	w25, w25, #0x1
    ab24:	bl	4c80 <mpfr_set_prec@plt>
    ab28:	add	x0, sp, #0x58
    ab2c:	mov	x1, x26
    ab30:	bl	4c00 <mpc_set_prec@plt>
    ab34:	add	x0, sp, #0x58
    ab38:	mov	x1, x23
    ab3c:	mov	w2, w19
    ab40:	bl	4db0 <mpc_log@plt>
    ab44:	mov	w27, w0
    ab48:	mov	x0, x21
    ab4c:	bl	54d0 <mpfr_number_p@plt>
    ab50:	mov	w28, #0x1                   	// #1
    ab54:	cbz	w0, abd4 <mpc_log10@@Base+0x180>
    ab58:	ldr	x8, [sp, #136]
    ab5c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    ab60:	mov	w22, #0x1                   	// #1
    ab64:	cmp	x8, x9
    ab68:	b.eq	abd8 <mpc_log10@@Base+0x184>  // b.none
    ab6c:	sub	x0, x29, #0x28
    ab70:	mov	w1, #0xa                   	// #10
    ab74:	mov	x2, xzr
    ab78:	mov	w3, wzr
    ab7c:	bl	5130 <mpfr_set_ui_2exp@plt>
    ab80:	sub	x0, x29, #0x28
    ab84:	sub	x1, x29, #0x28
    ab88:	mov	w2, wzr
    ab8c:	bl	4d80 <mpfr_log@plt>
    ab90:	sub	x2, x29, #0x28
    ab94:	mov	x0, x21
    ab98:	mov	x1, x21
    ab9c:	mov	w3, wzr
    aba0:	bl	5150 <mpfr_div@plt>
    aba4:	ldp	x9, x8, [sp, #40]
    aba8:	sub	x1, x26, #0x2
    abac:	mov	w3, #0x1                   	// #1
    abb0:	mov	x0, x21
    abb4:	ldr	x8, [x8]
    abb8:	mov	w2, wzr
    abbc:	add	x4, x8, x9
    abc0:	bl	5450 <mpfr_can_round@plt>
    abc4:	mov	w28, w0
    abc8:	mov	w22, wzr
    abcc:	cbnz	w0, abd8 <mpc_log10@@Base+0x184>
    abd0:	b	aae8 <mpc_log10@@Base+0x94>
    abd4:	mov	w22, #0x1                   	// #1
    abd8:	add	x0, sp, #0x58
    abdc:	bl	54d0 <mpfr_number_p@plt>
    abe0:	mov	w20, #0x1                   	// #1
    abe4:	cbz	w0, ac5c <mpc_log10@@Base+0x208>
    abe8:	ldr	x8, [sp, #104]
    abec:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    abf0:	cmp	x8, x9
    abf4:	b.eq	ac5c <mpc_log10@@Base+0x208>  // b.none
    abf8:	cbz	w22, ac20 <mpc_log10@@Base+0x1cc>
    abfc:	sub	x0, x29, #0x28
    ac00:	mov	w1, #0xa                   	// #10
    ac04:	mov	x2, xzr
    ac08:	mov	w3, wzr
    ac0c:	bl	5130 <mpfr_set_ui_2exp@plt>
    ac10:	sub	x0, x29, #0x28
    ac14:	sub	x1, x29, #0x28
    ac18:	mov	w2, wzr
    ac1c:	bl	4d80 <mpfr_log@plt>
    ac20:	add	x0, sp, #0x58
    ac24:	add	x1, sp, #0x58
    ac28:	sub	x2, x29, #0x28
    ac2c:	mov	w3, wzr
    ac30:	bl	5150 <mpfr_div@plt>
    ac34:	ldp	x9, x8, [sp, #24]
    ac38:	sub	x1, x26, #0x2
    ac3c:	add	x0, sp, #0x58
    ac40:	mov	w3, #0x1                   	// #1
    ac44:	ldr	x8, [x8]
    ac48:	mov	w2, wzr
    ac4c:	add	x4, x8, x9
    ac50:	bl	5450 <mpfr_can_round@plt>
    ac54:	mov	w28, w0
    ac58:	mov	w20, wzr
    ac5c:	orr	w8, w28, w24
    ac60:	cbnz	w8, aaec <mpc_log10@@Base+0x98>
    ac64:	mov	x0, x23
    ac68:	bl	4e30 <mpfr_integer_p@plt>
    ac6c:	cbz	w0, ad80 <mpc_log10@@Base+0x32c>
    ac70:	ldr	x24, [sp, #16]
    ac74:	mov	x0, x24
    ac78:	bl	4e30 <mpfr_integer_p@plt>
    ac7c:	cbz	w0, ad80 <mpc_log10@@Base+0x32c>
    ac80:	add	x0, sp, #0x48
    ac84:	bl	54a0 <__gmpz_init@plt>
    ac88:	add	x0, sp, #0x38
    ac8c:	bl	54a0 <__gmpz_init@plt>
    ac90:	add	x0, sp, #0x48
    ac94:	mov	x1, x23
    ac98:	mov	w2, wzr
    ac9c:	bl	4bd0 <mpfr_get_z@plt>
    aca0:	add	x0, sp, #0x38
    aca4:	mov	x1, x24
    aca8:	mov	w2, wzr
    acac:	bl	4bd0 <mpfr_get_z@plt>
    acb0:	add	x0, sp, #0x48
    acb4:	add	x1, sp, #0x48
    acb8:	add	x2, sp, #0x48
    acbc:	bl	4d40 <__gmpz_mul@plt>
    acc0:	add	x0, sp, #0x38
    acc4:	add	x1, sp, #0x38
    acc8:	add	x2, sp, #0x38
    accc:	bl	4d40 <__gmpz_mul@plt>
    acd0:	add	x0, sp, #0x48
    acd4:	add	x1, sp, #0x48
    acd8:	add	x2, sp, #0x38
    acdc:	bl	53d0 <__gmpz_add@plt>
    ace0:	add	x0, sp, #0x48
    ace4:	mov	x1, xzr
    ace8:	bl	49f0 <__gmpz_scan1@plt>
    acec:	mov	x24, x0
    acf0:	add	x0, sp, #0x48
    acf4:	mov	w1, #0xa                   	// #10
    acf8:	bl	54b0 <__gmpz_sizeinbase@plt>
    acfc:	add	x8, x24, #0x1
    ad00:	cmp	x0, x8
    ad04:	b.eq	ad14 <mpc_log10@@Base+0x2c0>  // b.none
    ad08:	add	x8, x24, #0x2
    ad0c:	cmp	x0, x8
    ad10:	b.ne	ad68 <mpc_log10@@Base+0x314>  // b.any
    ad14:	add	x0, sp, #0x48
    ad18:	add	x1, sp, #0x48
    ad1c:	mov	x2, x24
    ad20:	bl	4e10 <__gmpz_fdiv_q_2exp@plt>
    ad24:	add	x0, sp, #0x38
    ad28:	mov	w1, #0x5                   	// #5
    ad2c:	mov	x2, x24
    ad30:	bl	50b0 <__gmpz_ui_pow_ui@plt>
    ad34:	add	x0, sp, #0x38
    ad38:	add	x1, sp, #0x48
    ad3c:	bl	5300 <__gmpz_cmp@plt>
    ad40:	cbnz	w0, ad68 <mpc_log10@@Base+0x314>
    ad44:	add	x0, sp, #0x58
    ad48:	mov	w1, #0x40                  	// #64
    ad4c:	bl	4c80 <mpfr_set_prec@plt>
    ad50:	add	x0, sp, #0x58
    ad54:	mov	x2, #0xffffffffffffffff    	// #-1
    ad58:	mov	x1, x24
    ad5c:	mov	w3, wzr
    ad60:	bl	5130 <mpfr_set_ui_2exp@plt>
    ad64:	mov	w28, #0x1                   	// #1
    ad68:	add	x0, sp, #0x48
    ad6c:	bl	5180 <__gmpz_clear@plt>
    ad70:	add	x0, sp, #0x38
    ad74:	bl	5180 <__gmpz_clear@plt>
    ad78:	mov	w24, #0x1                   	// #1
    ad7c:	b	aaec <mpc_log10@@Base+0x98>
    ad80:	mov	w24, wzr
    ad84:	b	aaec <mpc_log10@@Base+0x98>
    ad88:	ldr	w3, [sp, #96]
    ad8c:	ldr	x0, [sp, #32]
    ad90:	ldr	w2, [sp, #12]
    ad94:	add	x1, sp, #0x58
    ad98:	bl	51d0 <mpfr_set4@plt>
    ad9c:	cbz	w20, adb8 <mpc_log10@@Base+0x364>
    ada0:	and	w8, w27, #0x3
    ada4:	tst	w27, #0x3
    ada8:	cset	w9, ne  // ne = any
    adac:	cmp	w8, #0x2
    adb0:	csinv	w23, w9, wzr, ne  // ne = any
    adb4:	b	adbc <mpc_log10@@Base+0x368>
    adb8:	mov	w23, w0
    adbc:	ldr	w3, [sp, #128]
    adc0:	ldr	x0, [sp, #48]
    adc4:	asr	w2, w19, #4
    adc8:	mov	x1, x21
    adcc:	bl	51d0 <mpfr_set4@plt>
    add0:	cbz	w22, adec <mpc_log10@@Base+0x398>
    add4:	asr	w8, w27, #2
    add8:	cmp	w8, #0x0
    addc:	cset	w9, ne  // ne = any
    ade0:	cmp	w8, #0x2
    ade4:	csinv	w19, w9, wzr, ne  // ne = any
    ade8:	b	adf0 <mpc_log10@@Base+0x39c>
    adec:	mov	w19, w0
    adf0:	sub	x0, x29, #0x28
    adf4:	bl	4d60 <mpfr_clear@plt>
    adf8:	add	x0, sp, #0x58
    adfc:	bl	4a10 <mpc_clear@plt>
    ae00:	cmp	w23, #0x0
    ae04:	mov	w8, #0x2                   	// #2
    ae08:	cset	w9, ne  // ne = any
    ae0c:	csel	w8, w8, w9, lt  // lt = tstop
    ae10:	cmp	w19, #0x0
    ae14:	cset	w9, ne  // ne = any
    ae18:	ldp	x20, x19, [sp, #272]
    ae1c:	ldp	x22, x21, [sp, #256]
    ae20:	ldp	x24, x23, [sp, #240]
    ae24:	ldp	x26, x25, [sp, #224]
    ae28:	ldp	x28, x27, [sp, #208]
    ae2c:	ldp	x29, x30, [sp, #192]
    ae30:	lsl	w9, w9, #2
    ae34:	mov	w10, #0x8                   	// #8
    ae38:	csel	w9, w10, w9, lt  // lt = tstop
    ae3c:	orr	w0, w9, w8
    ae40:	add	sp, sp, #0x120
    ae44:	ret

000000000000ae48 <mpc_alloc_str@@Base>:
    ae48:	stp	x29, x30, [sp, #-32]!
    ae4c:	mov	x29, sp
    ae50:	str	x19, [sp, #16]
    ae54:	mov	x19, x0
    ae58:	add	x0, x29, #0x18
    ae5c:	mov	x1, xzr
    ae60:	mov	x2, xzr
    ae64:	bl	4ae0 <__gmp_get_memory_functions@plt>
    ae68:	ldr	x8, [x29, #24]
    ae6c:	mov	x0, x19
    ae70:	blr	x8
    ae74:	ldr	x19, [sp, #16]
    ae78:	ldp	x29, x30, [sp], #32
    ae7c:	ret

000000000000ae80 <mpc_realloc_str@@Base>:
    ae80:	stp	x29, x30, [sp, #-48]!
    ae84:	mov	x29, sp
    ae88:	str	x21, [sp, #16]
    ae8c:	stp	x20, x19, [sp, #32]
    ae90:	mov	x19, x2
    ae94:	mov	x20, x1
    ae98:	mov	x21, x0
    ae9c:	add	x1, x29, #0x18
    aea0:	mov	x0, xzr
    aea4:	mov	x2, xzr
    aea8:	bl	4ae0 <__gmp_get_memory_functions@plt>
    aeac:	ldr	x8, [x29, #24]
    aeb0:	mov	x0, x21
    aeb4:	mov	x1, x20
    aeb8:	mov	x2, x19
    aebc:	blr	x8
    aec0:	ldp	x20, x19, [sp, #32]
    aec4:	ldr	x21, [sp, #16]
    aec8:	ldp	x29, x30, [sp], #48
    aecc:	ret

000000000000aed0 <mpc_free_str@@Base>:
    aed0:	sub	sp, sp, #0x30
    aed4:	stp	x20, x19, [sp, #32]
    aed8:	mov	x19, x0
    aedc:	add	x2, sp, #0x8
    aee0:	mov	x0, xzr
    aee4:	mov	x1, xzr
    aee8:	stp	x29, x30, [sp, #16]
    aeec:	add	x29, sp, #0x10
    aef0:	bl	4ae0 <__gmp_get_memory_functions@plt>
    aef4:	ldr	x20, [sp, #8]
    aef8:	mov	x0, x19
    aefc:	bl	4a00 <strlen@plt>
    af00:	add	x1, x0, #0x1
    af04:	mov	x0, x19
    af08:	blr	x20
    af0c:	ldp	x20, x19, [sp, #32]
    af10:	ldp	x29, x30, [sp, #16]
    af14:	add	sp, sp, #0x30
    af18:	ret

000000000000af1c <mpc_mul_2si@@Base>:
    af1c:	stp	x29, x30, [sp, #-64]!
    af20:	stp	x20, x19, [sp, #48]
    af24:	mov	w19, w3
    af28:	and	w3, w3, #0xf
    af2c:	str	x23, [sp, #16]
    af30:	stp	x22, x21, [sp, #32]
    af34:	mov	x29, sp
    af38:	mov	x20, x2
    af3c:	mov	x21, x1
    af40:	mov	x22, x0
    af44:	bl	4a70 <mpfr_mul_2si@plt>
    af48:	mov	w23, w0
    af4c:	add	x0, x22, #0x20
    af50:	add	x1, x21, #0x20
    af54:	asr	w3, w19, #4
    af58:	mov	x2, x20
    af5c:	bl	4a70 <mpfr_mul_2si@plt>
    af60:	cmp	w23, #0x0
    af64:	mov	w8, #0x2                   	// #2
    af68:	cset	w9, ne  // ne = any
    af6c:	csel	w8, w8, w9, lt  // lt = tstop
    af70:	cmp	w0, #0x0
    af74:	cset	w9, ne  // ne = any
    af78:	ldp	x20, x19, [sp, #48]
    af7c:	ldp	x22, x21, [sp, #32]
    af80:	ldr	x23, [sp, #16]
    af84:	lsl	w9, w9, #2
    af88:	mov	w10, #0x8                   	// #8
    af8c:	csel	w9, w10, w9, lt  // lt = tstop
    af90:	orr	w0, w9, w8
    af94:	ldp	x29, x30, [sp], #64
    af98:	ret

000000000000af9c <mpc_mul_2ui@@Base>:
    af9c:	stp	x29, x30, [sp, #-64]!
    afa0:	stp	x20, x19, [sp, #48]
    afa4:	mov	w19, w3
    afa8:	and	w3, w3, #0xf
    afac:	str	x23, [sp, #16]
    afb0:	stp	x22, x21, [sp, #32]
    afb4:	mov	x29, sp
    afb8:	mov	x20, x2
    afbc:	mov	x21, x1
    afc0:	mov	x22, x0
    afc4:	bl	4f40 <mpfr_mul_2ui@plt>
    afc8:	mov	w23, w0
    afcc:	add	x0, x22, #0x20
    afd0:	add	x1, x21, #0x20
    afd4:	asr	w3, w19, #4
    afd8:	mov	x2, x20
    afdc:	bl	4f40 <mpfr_mul_2ui@plt>
    afe0:	cmp	w23, #0x0
    afe4:	mov	w8, #0x2                   	// #2
    afe8:	cset	w9, ne  // ne = any
    afec:	csel	w8, w8, w9, lt  // lt = tstop
    aff0:	cmp	w0, #0x0
    aff4:	cset	w9, ne  // ne = any
    aff8:	ldp	x20, x19, [sp, #48]
    affc:	ldp	x22, x21, [sp, #32]
    b000:	ldr	x23, [sp, #16]
    b004:	lsl	w9, w9, #2
    b008:	mov	w10, #0x8                   	// #8
    b00c:	csel	w9, w10, w9, lt  // lt = tstop
    b010:	orr	w0, w9, w8
    b014:	ldp	x29, x30, [sp], #64
    b018:	ret

000000000000b01c <mpc_mul_naive@@Base>:
    b01c:	sub	sp, sp, #0xa0
    b020:	stp	x29, x30, [sp, #64]
    b024:	stp	x28, x27, [sp, #80]
    b028:	stp	x26, x25, [sp, #96]
    b02c:	stp	x24, x23, [sp, #112]
    b030:	stp	x22, x21, [sp, #128]
    b034:	stp	x20, x19, [sp, #144]
    b038:	ldr	x9, [x1, #16]
    b03c:	mov	x8, #0x4                   	// #4
    b040:	movk	x8, #0x8000, lsl #48
    b044:	add	x29, sp, #0x40
    b048:	cmp	x9, x8
    b04c:	b.lt	b1c8 <mpc_mul_naive@@Base+0x1ac>  // b.tstop
    b050:	ldr	x9, [x1, #48]
    b054:	mov	x21, x1
    b058:	cmp	x9, x8
    b05c:	b.lt	b1c8 <mpc_mul_naive@@Base+0x1ac>  // b.tstop
    b060:	ldr	x8, [x2, #16]
    b064:	mov	x9, #0x4                   	// #4
    b068:	movk	x9, #0x8000, lsl #48
    b06c:	mov	x20, x2
    b070:	cmp	x8, x9
    b074:	b.lt	b1c8 <mpc_mul_naive@@Base+0x1ac>  // b.tstop
    b078:	ldr	x8, [x20, #48]
    b07c:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    b080:	cmp	x8, x9
    b084:	b.le	b1c8 <mpc_mul_naive@@Base+0x1ac>
    b088:	cmp	x0, x21
    b08c:	cset	w8, eq  // eq = none
    b090:	cmp	x0, x20
    b094:	cset	w9, eq  // eq = none
    b098:	orr	w26, w8, w9
    b09c:	mov	w22, w3
    b0a0:	mov	x19, x0
    b0a4:	add	x23, x21, #0x20
    b0a8:	cmp	w26, #0x1
    b0ac:	add	x24, x20, #0x20
    b0b0:	b.ne	b0c8 <mpc_mul_naive@@Base+0xac>  // b.any
    b0b4:	ldr	x1, [x19]
    b0b8:	ldr	x2, [x19, #32]
    b0bc:	mov	x0, sp
    b0c0:	bl	53c0 <mpc_init3@plt>
    b0c4:	b	b0d8 <mpc_mul_naive@@Base+0xbc>
    b0c8:	ldp	q1, q0, [x19, #32]
    b0cc:	ldp	q3, q2, [x19]
    b0d0:	stp	q1, q0, [sp, #32]
    b0d4:	stp	q3, q2, [sp]
    b0d8:	and	w25, w22, #0xf
    b0dc:	mov	x0, sp
    b0e0:	mov	x1, x21
    b0e4:	mov	x2, x20
    b0e8:	mov	x3, x23
    b0ec:	mov	x4, x24
    b0f0:	mov	w5, w25
    b0f4:	mov	x28, sp
    b0f8:	bl	4a90 <mpfr_fmms@plt>
    b0fc:	tbnz	w0, #31, b128 <mpc_mul_naive@@Base+0x10c>
    b100:	mov	x0, sp
    b104:	mov	x1, x21
    b108:	mov	x2, x20
    b10c:	mov	x3, x23
    b110:	mov	x4, x24
    b114:	mov	w5, w25
    b118:	bl	4a90 <mpfr_fmms@plt>
    b11c:	cmp	w0, #0x0
    b120:	cset	w27, ne  // ne = any
    b124:	b	b12c <mpc_mul_naive@@Base+0x110>
    b128:	mov	w27, #0x2                   	// #2
    b12c:	add	x25, x28, #0x20
    b130:	asr	w22, w22, #4
    b134:	mov	x0, x25
    b138:	mov	x1, x21
    b13c:	mov	x2, x24
    b140:	mov	x3, x23
    b144:	mov	x4, x20
    b148:	mov	w5, w22
    b14c:	bl	4c90 <mpfr_fmma@plt>
    b150:	tbnz	w0, #31, b180 <mpc_mul_naive@@Base+0x164>
    b154:	mov	x0, x25
    b158:	mov	x1, x21
    b15c:	mov	x2, x24
    b160:	mov	x3, x23
    b164:	mov	x4, x20
    b168:	mov	w5, w22
    b16c:	bl	4c90 <mpfr_fmma@plt>
    b170:	cmp	w0, #0x0
    b174:	cset	w8, ne  // ne = any
    b178:	lsl	w8, w8, #2
    b17c:	b	b184 <mpc_mul_naive@@Base+0x168>
    b180:	mov	w8, #0x8                   	// #8
    b184:	mov	x1, sp
    b188:	mov	x0, x19
    b18c:	mov	w2, wzr
    b190:	orr	w20, w8, w27
    b194:	bl	5580 <mpc_set@plt>
    b198:	cbz	w26, b1a4 <mpc_mul_naive@@Base+0x188>
    b19c:	mov	x0, sp
    b1a0:	bl	4a10 <mpc_clear@plt>
    b1a4:	mov	w0, w20
    b1a8:	ldp	x20, x19, [sp, #144]
    b1ac:	ldp	x22, x21, [sp, #128]
    b1b0:	ldp	x24, x23, [sp, #112]
    b1b4:	ldp	x26, x25, [sp, #96]
    b1b8:	ldp	x28, x27, [sp, #80]
    b1bc:	ldp	x29, x30, [sp, #64]
    b1c0:	add	sp, sp, #0xa0
    b1c4:	ret
    b1c8:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    b1cc:	ldr	x8, [x8, #4008]
    b1d0:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    b1d4:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    b1d8:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    b1dc:	ldr	x0, [x8]
    b1e0:	add	x1, x1, #0x7c0
    b1e4:	add	x2, x2, #0x926
    b1e8:	add	x4, x4, #0x92c
    b1ec:	mov	w3, #0x175                 	// #373
    b1f0:	bl	55a0 <fprintf@plt>
    b1f4:	bl	5000 <abort@plt>

000000000000b1f8 <mpc_mul_karatsuba@@Base>:
    b1f8:	sub	sp, sp, #0x1c0
    b1fc:	cmp	x0, x1
    b200:	cset	w8, eq  // eq = none
    b204:	cmp	x0, x2
    b208:	cset	w9, eq  // eq = none
    b20c:	orr	w8, w8, w9
    b210:	stp	x26, x25, [sp, #384]
    b214:	stp	x24, x23, [sp, #400]
    b218:	stp	x22, x21, [sp, #416]
    b21c:	mov	x23, x2
    b220:	mov	x25, x1
    b224:	mov	x21, x0
    b228:	cmp	w8, #0x1
    b22c:	mov	w26, w3
    b230:	stp	x29, x30, [sp, #352]
    b234:	stp	x28, x27, [sp, #368]
    b238:	stp	x20, x19, [sp, #432]
    b23c:	add	x29, sp, #0x160
    b240:	str	w8, [sp, #116]
    b244:	b.ne	b25c <mpc_mul_karatsuba@@Base+0x64>  // b.any
    b248:	ldr	x1, [x21]
    b24c:	ldr	x2, [x21, #32]
    b250:	add	x0, sp, #0x90
    b254:	bl	53c0 <mpc_init3@plt>
    b258:	b	b26c <mpc_mul_karatsuba@@Base+0x74>
    b25c:	ldp	q1, q0, [x21, #32]
    b260:	ldp	q3, q2, [x21]
    b264:	stp	q1, q0, [sp, #176]
    b268:	stp	q3, q2, [sp, #144]
    b26c:	add	x19, x25, #0x20
    b270:	mov	x0, x25
    b274:	mov	x1, x19
    b278:	add	x20, x23, #0x20
    b27c:	bl	53b0 <mpfr_cmpabs@plt>
    b280:	cmp	w0, #0x0
    b284:	mov	w22, #0xffffffff            	// #-1
    b288:	mov	w24, w0
    b28c:	cneg	w8, w22, ge  // ge = tcont
    b290:	mov	x0, x23
    b294:	mov	x1, x20
    b298:	str	w8, [sp, #48]
    b29c:	csel	x27, x25, x19, lt  // lt = tstop
    b2a0:	str	x25, [sp, #88]
    b2a4:	csel	x28, x19, x25, lt  // lt = tstop
    b2a8:	bl	53b0 <mpfr_cmpabs@plt>
    b2ac:	cmp	w0, #0x0
    b2b0:	lsr	w8, w0, #31
    b2b4:	cneg	w16, w22, ge  // ge = tcont
    b2b8:	add	w22, w8, w24, lsr #31
    b2bc:	asr	w14, w26, #4
    b2c0:	and	w15, w26, #0xf
    b2c4:	ldr	x11, [x21]
    b2c8:	ldr	x12, [x21, #32]
    b2cc:	ldr	x13, [x28]
    b2d0:	csel	x25, x23, x20, lt  // lt = tstop
    b2d4:	stp	x23, x21, [sp, #96]
    b2d8:	csel	x23, x20, x23, lt  // lt = tstop
    b2dc:	tst	w22, #0x1
    b2e0:	csel	w8, w15, w14, eq  // eq = none
    b2e4:	mov	w9, #0x2                   	// #2
    b2e8:	cmp	w8, #0x3
    b2ec:	mov	w10, #0x3                   	// #3
    b2f0:	csel	w9, w9, w8, eq  // eq = none
    b2f4:	cmp	w8, #0x2
    b2f8:	csel	w9, w10, w9, eq  // eq = none
    b2fc:	cmp	w22, #0x0
    b300:	stp	w15, w14, [sp, #24]
    b304:	and	w10, w22, #0x1
    b308:	csel	w8, w8, w9, eq  // eq = none
    b30c:	str	w8, [sp, #44]
    b310:	ldr	x8, [x25]
    b314:	lsl	x9, x10, #5
    b318:	ldr	x9, [x21, x9]
    b31c:	str	w0, [sp, #52]
    b320:	cmp	x11, x12
    b324:	add	x1, x8, x13
    b328:	sub	x0, x29, #0x48
    b32c:	str	w26, [sp, #84]
    b330:	str	w16, [sp, #72]
    b334:	str	x9, [sp, #32]
    b338:	csel	x19, x11, x12, gt
    b33c:	str	x1, [sp, #64]
    b340:	bl	5440 <mpfr_init2@plt>
    b344:	ldr	x8, [x27]
    b348:	ldr	x9, [x23]
    b34c:	sub	x0, x29, #0x68
    b350:	mov	x21, x27
    b354:	add	x1, x9, x8
    b358:	str	x1, [sp, #56]
    b35c:	bl	5440 <mpfr_init2@plt>
    b360:	sub	x0, x29, #0x28
    b364:	mov	w1, #0x2                   	// #2
    b368:	bl	5440 <mpfr_init2@plt>
    b36c:	sub	x0, x29, #0x88
    b370:	mov	w1, #0x2                   	// #2
    b374:	bl	5440 <mpfr_init2@plt>
    b378:	sub	x0, x29, #0x48
    b37c:	mov	x1, x28
    b380:	mov	x2, x25
    b384:	mov	w3, wzr
    b388:	str	x28, [sp, #120]
    b38c:	str	x25, [sp, #136]
    b390:	bl	4b70 <mpfr_mul@plt>
    b394:	mov	w25, wzr
    b398:	mov	w26, wzr
    b39c:	mov	w20, wzr
    b3a0:	cbnz	w0, b92c <mpc_mul_karatsuba@@Base+0x734>
    b3a4:	str	x21, [sp, #16]
    b3a8:	tbz	w24, #31, b3bc <mpc_mul_karatsuba@@Base+0x1c4>
    b3ac:	sub	x0, x29, #0x48
    b3b0:	sub	x1, x29, #0x48
    b3b4:	mov	w2, wzr
    b3b8:	bl	4b80 <mpfr_neg@plt>
    b3bc:	ldr	x1, [sp, #16]
    b3c0:	sub	x0, x29, #0x68
    b3c4:	mov	x2, x23
    b3c8:	mov	w3, wzr
    b3cc:	bl	4b70 <mpfr_mul@plt>
    b3d0:	mov	w25, wzr
    b3d4:	mov	w26, wzr
    b3d8:	mov	w20, wzr
    b3dc:	cbnz	w0, b92c <mpc_mul_karatsuba@@Base+0x734>
    b3e0:	ldr	w8, [sp, #52]
    b3e4:	tbz	w8, #31, b3f8 <mpc_mul_karatsuba@@Base+0x200>
    b3e8:	sub	x0, x29, #0x68
    b3ec:	sub	x1, x29, #0x68
    b3f0:	mov	w2, wzr
    b3f4:	bl	4b80 <mpfr_neg@plt>
    b3f8:	mov	x25, #0x2                   	// #2
    b3fc:	sub	x0, x29, #0x48
    b400:	sub	x1, x29, #0x68
    b404:	movk	x25, #0x8000, lsl #48
    b408:	bl	53b0 <mpfr_cmpabs@plt>
    b40c:	ldr	w24, [sp, #72]
    b410:	cmp	w0, #0x1
    b414:	b.lt	b438 <mpc_mul_karatsuba@@Base+0x240>  // b.tstop
    b418:	ldur	x8, [x29, #-56]
    b41c:	ldr	x26, [sp, #120]
    b420:	cmp	x8, x25
    b424:	b.gt	b468 <mpc_mul_karatsuba@@Base+0x270>
    b428:	b.ne	b430 <mpc_mul_karatsuba@@Base+0x238>  // b.any
    b42c:	bl	4b00 <mpfr_set_erangeflag@plt>
    b430:	mov	w8, wzr
    b434:	b	b46c <mpc_mul_karatsuba@@Base+0x274>
    b438:	ldur	x8, [x29, #-56]
    b43c:	ldr	x26, [sp, #120]
    b440:	mov	x9, #0x2                   	// #2
    b444:	movk	x9, #0x8000, lsl #48
    b448:	cmp	x8, x9
    b44c:	cbz	w0, b4a0 <mpc_mul_karatsuba@@Base+0x2a8>
    b450:	b.gt	b4bc <mpc_mul_karatsuba@@Base+0x2c4>
    b454:	cmp	x8, x25
    b458:	b.ne	b460 <mpc_mul_karatsuba@@Base+0x268>  // b.any
    b45c:	bl	4b00 <mpfr_set_erangeflag@plt>
    b460:	mov	w20, wzr
    b464:	b	b4c0 <mpc_mul_karatsuba@@Base+0x2c8>
    b468:	ldur	w8, [x29, #-64]
    b46c:	ldur	x9, [x29, #-88]
    b470:	ldr	x27, [sp, #32]
    b474:	mov	x10, #0x2                   	// #2
    b478:	movk	x10, #0x8000, lsl #48
    b47c:	cmp	x9, x10
    b480:	lsl	w20, w8, #1
    b484:	b.gt	b520 <mpc_mul_karatsuba@@Base+0x328>
    b488:	cmp	x9, x25
    b48c:	b.ne	b494 <mpc_mul_karatsuba@@Base+0x29c>  // b.any
    b490:	bl	4b00 <mpfr_set_erangeflag@plt>
    b494:	mov	w8, wzr
    b498:	sub	w20, w20, wzr
    b49c:	b	b528 <mpc_mul_karatsuba@@Base+0x330>
    b4a0:	b.gt	b4f8 <mpc_mul_karatsuba@@Base+0x300>
    b4a4:	ldr	x27, [sp, #32]
    b4a8:	cmp	x8, x25
    b4ac:	b.ne	b4b4 <mpc_mul_karatsuba@@Base+0x2bc>  // b.any
    b4b0:	bl	4b00 <mpfr_set_erangeflag@plt>
    b4b4:	mov	w20, wzr
    b4b8:	b	b500 <mpc_mul_karatsuba@@Base+0x308>
    b4bc:	ldur	w20, [x29, #-64]
    b4c0:	ldur	x8, [x29, #-88]
    b4c4:	ldr	x27, [sp, #32]
    b4c8:	mov	x9, #0x2                   	// #2
    b4cc:	movk	x9, #0x8000, lsl #48
    b4d0:	cmp	x8, x9
    b4d4:	b.gt	b4ec <mpc_mul_karatsuba@@Base+0x2f4>
    b4d8:	cmp	x8, x25
    b4dc:	b.ne	b4e4 <mpc_mul_karatsuba@@Base+0x2ec>  // b.any
    b4e0:	bl	4b00 <mpfr_set_erangeflag@plt>
    b4e4:	mov	w8, wzr
    b4e8:	b	b4f0 <mpc_mul_karatsuba@@Base+0x2f8>
    b4ec:	ldur	w8, [x29, #-96]
    b4f0:	sub	w20, w20, w8, lsl #1
    b4f4:	b	b528 <mpc_mul_karatsuba@@Base+0x330>
    b4f8:	ldur	w20, [x29, #-64]
    b4fc:	ldr	x27, [sp, #32]
    b500:	ldur	x8, [x29, #-88]
    b504:	mov	x9, #0x2                   	// #2
    b508:	movk	x9, #0x8000, lsl #48
    b50c:	cmp	x8, x9
    b510:	b.gt	b520 <mpc_mul_karatsuba@@Base+0x328>
    b514:	cmp	x8, x25
    b518:	b.eq	b490 <mpc_mul_karatsuba@@Base+0x298>  // b.none
    b51c:	b	b494 <mpc_mul_karatsuba@@Base+0x29c>
    b520:	ldur	w8, [x29, #-96]
    b524:	sub	w20, w20, w8
    b528:	ldr	x8, [x26, #16]
    b52c:	mov	x9, #0x2                   	// #2
    b530:	movk	x9, #0x8000, lsl #48
    b534:	str	w22, [sp, #12]
    b538:	cmp	x8, x9
    b53c:	b.gt	b554 <mpc_mul_karatsuba@@Base+0x35c>
    b540:	cmp	x8, x25
    b544:	b.ne	b54c <mpc_mul_karatsuba@@Base+0x354>  // b.any
    b548:	bl	4b00 <mpfr_set_erangeflag@plt>
    b54c:	mov	w22, wzr
    b550:	b	b558 <mpc_mul_karatsuba@@Base+0x360>
    b554:	ldr	w22, [x26, #8]
    b558:	ldr	x8, [x23, #16]
    b55c:	mov	x9, #0x2                   	// #2
    b560:	movk	x9, #0x8000, lsl #48
    b564:	str	x23, [sp, #128]
    b568:	cmp	x8, x9
    b56c:	b.gt	b584 <mpc_mul_karatsuba@@Base+0x38c>
    b570:	cmp	x8, x25
    b574:	b.ne	b57c <mpc_mul_karatsuba@@Base+0x384>  // b.any
    b578:	bl	4b00 <mpfr_set_erangeflag@plt>
    b57c:	mov	w8, wzr
    b580:	b	b588 <mpc_mul_karatsuba@@Base+0x390>
    b584:	ldr	w8, [x23, #8]
    b588:	ldp	w25, w21, [sp, #44]
    b58c:	ldr	x28, [sp, #16]
    b590:	mul	w9, w24, w21
    b594:	mul	w9, w9, w22
    b598:	mul	w23, w9, w8
    b59c:	mul	w8, w23, w20
    b5a0:	tbnz	w8, #31, b5c8 <mpc_mul_karatsuba@@Base+0x3d0>
    b5a4:	mov	w8, w24
    b5a8:	mov	w24, w21
    b5ac:	mov	w21, w8
    b5b0:	ldr	x8, [sp, #136]
    b5b4:	str	x8, [sp, #120]
    b5b8:	mov	x8, x26
    b5bc:	ldr	x26, [sp, #128]
    b5c0:	stp	x8, x28, [sp, #128]
    b5c4:	b	b5d8 <mpc_mul_karatsuba@@Base+0x3e0>
    b5c8:	sub	x0, x29, #0x48
    b5cc:	sub	x1, x29, #0x68
    b5d0:	bl	5090 <mpfr_swap@plt>
    b5d4:	str	x28, [sp, #120]
    b5d8:	ldp	x9, x8, [sp, #56]
    b5dc:	mov	w10, #0x2                   	// #2
    b5e0:	mov	w22, wzr
    b5e4:	cmp	x8, x9
    b5e8:	csel	x8, x8, x9, gt
    b5ec:	cmp	w23, #0x0
    b5f0:	cinc	w20, w10, le
    b5f4:	cmp	w25, #0x0
    b5f8:	cinc	x28, x27, eq  // eq = none
    b5fc:	str	x8, [sp, #72]
    b600:	mov	x0, x19
    b604:	bl	4d20 <mpc_ceil_log2@plt>
    b608:	add	x8, x19, x0
    b60c:	add	x19, x8, #0x3
    b610:	sub	x0, x29, #0x28
    b614:	mov	x1, x19
    b618:	bl	4c80 <mpfr_set_prec@plt>
    b61c:	sub	x0, x29, #0x88
    b620:	mov	x1, x19
    b624:	bl	4c80 <mpfr_set_prec@plt>
    b628:	sub	x0, x29, #0x28
    b62c:	mov	w3, #0x4                   	// #4
    b630:	cmn	w24, #0x1
    b634:	b.eq	b644 <mpc_mul_karatsuba@@Base+0x44c>  // b.none
    b638:	ldp	x2, x1, [sp, #128]
    b63c:	bl	4e60 <mpfr_add@plt>
    b640:	b	b64c <mpc_mul_karatsuba@@Base+0x454>
    b644:	ldp	x2, x1, [sp, #128]
    b648:	bl	4a60 <mpfr_sub@plt>
    b64c:	mov	w27, w0
    b650:	mov	w25, w24
    b654:	sub	x0, x29, #0x88
    b658:	mov	w3, #0x4                   	// #4
    b65c:	mov	x1, x26
    b660:	cmn	w21, #0x1
    b664:	b.eq	b678 <mpc_mul_karatsuba@@Base+0x480>  // b.none
    b668:	ldr	x2, [sp, #120]
    b66c:	bl	4a60 <mpfr_sub@plt>
    b670:	mov	w24, w0
    b674:	b	b694 <mpc_mul_karatsuba@@Base+0x49c>
    b678:	ldr	x2, [sp, #120]
    b67c:	bl	4e60 <mpfr_add@plt>
    b680:	mov	w24, w0
    b684:	sub	x0, x29, #0x88
    b688:	sub	x1, x29, #0x88
    b68c:	mov	w2, wzr
    b690:	bl	4b80 <mpfr_neg@plt>
    b694:	orr	w23, w24, w27
    b698:	mov	x27, x19
    b69c:	cbnz	w23, b6b4 <mpc_mul_karatsuba@@Base+0x4bc>
    b6a0:	lsl	x27, x19, #1
    b6a4:	sub	x0, x29, #0x28
    b6a8:	mov	x1, x27
    b6ac:	mov	w2, wzr
    b6b0:	bl	5370 <mpfr_prec_round@plt>
    b6b4:	sub	x0, x29, #0x28
    b6b8:	sub	x1, x29, #0x28
    b6bc:	sub	x2, x29, #0x88
    b6c0:	mov	w3, #0x4                   	// #4
    b6c4:	bl	4b70 <mpfr_mul@plt>
    b6c8:	orr	w23, w0, w23
    b6cc:	cbnz	w23, b704 <mpc_mul_karatsuba@@Base+0x50c>
    b6d0:	ldur	x8, [x29, #-56]
    b6d4:	ldur	x9, [x29, #-88]
    b6d8:	subs	x8, x8, x9
    b6dc:	ldr	x9, [sp, #72]
    b6e0:	cneg	x8, x8, mi  // mi = first
    b6e4:	add	x8, x8, x9
    b6e8:	cmp	x8, x27
    b6ec:	csinc	x1, x27, x8, ge  // ge = tcont
    b6f0:	cmp	x1, x19
    b6f4:	b.le	b704 <mpc_mul_karatsuba@@Base+0x50c>
    b6f8:	sub	x0, x29, #0x88
    b6fc:	mov	w2, wzr
    b700:	bl	5370 <mpfr_prec_round@plt>
    b704:	sub	x0, x29, #0x88
    b708:	sub	x1, x29, #0x48
    b70c:	sub	x2, x29, #0x68
    b710:	mov	w3, w20
    b714:	bl	4a60 <mpfr_sub@plt>
    b718:	ldur	x8, [x29, #-24]
    b71c:	mov	x9, #0x2                   	// #2
    b720:	movk	x9, #0x8000, lsl #48
    b724:	orr	w23, w0, w23
    b728:	cmp	x8, x9
    b72c:	b.gt	b748 <mpc_mul_karatsuba@@Base+0x550>
    b730:	mov	x9, #0x2                   	// #2
    b734:	movk	x9, #0x8000, lsl #48
    b738:	cmp	x8, x9
    b73c:	b.ne	b754 <mpc_mul_karatsuba@@Base+0x55c>  // b.any
    b740:	bl	4b00 <mpfr_set_erangeflag@plt>
    b744:	b	b754 <mpc_mul_karatsuba@@Base+0x55c>
    b748:	ldur	w8, [x29, #-32]
    b74c:	mov	w24, w20
    b750:	cbnz	w8, b794 <mpc_mul_karatsuba@@Base+0x59c>
    b754:	ldur	x8, [x29, #-120]
    b758:	mov	x9, #0x2                   	// #2
    b75c:	movk	x9, #0x8000, lsl #48
    b760:	cmp	x8, x9
    b764:	b.gt	b784 <mpc_mul_karatsuba@@Base+0x58c>
    b768:	mov	x9, #0x2                   	// #2
    b76c:	movk	x9, #0x8000, lsl #48
    b770:	cmp	x8, x9
    b774:	b.ne	b77c <mpc_mul_karatsuba@@Base+0x584>  // b.any
    b778:	bl	4b00 <mpfr_set_erangeflag@plt>
    b77c:	mov	w24, #0x3                   	// #3
    b780:	b	b794 <mpc_mul_karatsuba@@Base+0x59c>
    b784:	ldur	w8, [x29, #-128]
    b788:	cmp	w8, #0x0
    b78c:	mov	w8, #0x2                   	// #2
    b790:	cinc	w24, w8, le
    b794:	sub	x0, x29, #0x28
    b798:	sub	x1, x29, #0x28
    b79c:	sub	x2, x29, #0x88
    b7a0:	mov	w3, w24
    b7a4:	bl	4e60 <mpfr_add@plt>
    b7a8:	orr	w8, w23, w0
    b7ac:	cbz	w8, b804 <mpc_mul_karatsuba@@Base+0x60c>
    b7b0:	sub	x1, x27, #0x3
    b7b4:	sub	x0, x29, #0x28
    b7b8:	mov	w3, #0x1                   	// #1
    b7bc:	mov	w2, w24
    b7c0:	mov	x4, x28
    b7c4:	bl	5450 <mpfr_can_round@plt>
    b7c8:	orr	w8, w22, w0
    b7cc:	mov	w22, #0x1                   	// #1
    b7d0:	mov	w24, w25
    b7d4:	cbz	w8, b600 <mpc_mul_karatsuba@@Base+0x408>
    b7d8:	cbz	w0, b898 <mpc_mul_karatsuba@@Base+0x6a0>
    b7dc:	ldur	x8, [x29, #-24]
    b7e0:	mov	x9, #0x2                   	// #2
    b7e4:	movk	x9, #0x8000, lsl #48
    b7e8:	cmp	x8, x9
    b7ec:	b.gt	b8a8 <mpc_mul_karatsuba@@Base+0x6b0>
    b7f0:	mov	x9, #0x2                   	// #2
    b7f4:	movk	x9, #0x8000, lsl #48
    b7f8:	cmp	x8, x9
    b7fc:	b.ne	b804 <mpc_mul_karatsuba@@Base+0x60c>  // b.any
    b800:	bl	4b00 <mpfr_set_erangeflag@plt>
    b804:	mov	w20, wzr
    b808:	ldr	w8, [sp, #12]
    b80c:	cmp	w8, #0x1
    b810:	b.eq	b858 <mpc_mul_karatsuba@@Base+0x660>  // b.none
    b814:	cbnz	w8, b878 <mpc_mul_karatsuba@@Base+0x680>
    b818:	ldur	w3, [x29, #-32]
    b81c:	ldr	w2, [sp, #24]
    b820:	add	x0, sp, #0x90
    b824:	sub	x1, x29, #0x28
    b828:	add	x22, sp, #0x90
    b82c:	bl	51d0 <mpfr_set4@plt>
    b830:	ldr	w3, [sp, #28]
    b834:	mov	w19, w0
    b838:	add	x0, x22, #0x20
    b83c:	sub	x1, x29, #0x48
    b840:	sub	x2, x29, #0x68
    b844:	bl	4e60 <mpfr_add@plt>
    b848:	cmp	w19, #0x0
    b84c:	mov	w26, w0
    b850:	csel	w25, w20, w19, eq  // eq = none
    b854:	b	b918 <mpc_mul_karatsuba@@Base+0x720>
    b858:	ldr	w2, [sp, #28]
    b85c:	add	x8, sp, #0x90
    b860:	add	x0, x8, #0x20
    b864:	sub	x1, x29, #0x28
    b868:	bl	4b80 <mpfr_neg@plt>
    b86c:	cbz	w0, b8b0 <mpc_mul_karatsuba@@Base+0x6b8>
    b870:	mov	w26, w0
    b874:	b	b8b4 <mpc_mul_karatsuba@@Base+0x6bc>
    b878:	ldr	w2, [sp, #24]
    b87c:	add	x0, sp, #0x90
    b880:	sub	x1, x29, #0x28
    b884:	add	x19, sp, #0x90
    b888:	bl	4b80 <mpfr_neg@plt>
    b88c:	cbz	w0, b8d0 <mpc_mul_karatsuba@@Base+0x6d8>
    b890:	mov	w25, w0
    b894:	b	b8d4 <mpc_mul_karatsuba@@Base+0x6dc>
    b898:	mov	w25, wzr
    b89c:	mov	w26, wzr
    b8a0:	mov	w20, wzr
    b8a4:	b	b92c <mpc_mul_karatsuba@@Base+0x734>
    b8a8:	ldur	w20, [x29, #-32]
    b8ac:	b	b808 <mpc_mul_karatsuba@@Base+0x610>
    b8b0:	neg	w26, w20
    b8b4:	ldr	w3, [sp, #24]
    b8b8:	add	x0, sp, #0x90
    b8bc:	sub	x1, x29, #0x48
    b8c0:	sub	x2, x29, #0x68
    b8c4:	bl	4e60 <mpfr_add@plt>
    b8c8:	mov	w25, w0
    b8cc:	b	b918 <mpc_mul_karatsuba@@Base+0x720>
    b8d0:	neg	w25, w20
    b8d4:	ldr	w20, [sp, #28]
    b8d8:	mov	w8, #0x2                   	// #2
    b8dc:	add	x19, x19, #0x20
    b8e0:	mov	w9, #0x3                   	// #3
    b8e4:	cmp	w20, #0x3
    b8e8:	csel	w8, w8, w20, eq  // eq = none
    b8ec:	cmp	w20, #0x2
    b8f0:	csel	w3, w9, w8, eq  // eq = none
    b8f4:	sub	x1, x29, #0x48
    b8f8:	sub	x2, x29, #0x68
    b8fc:	mov	x0, x19
    b900:	bl	4e60 <mpfr_add@plt>
    b904:	neg	w26, w0
    b908:	mov	x0, x19
    b90c:	mov	x1, x19
    b910:	mov	w2, w20
    b914:	bl	4b80 <mpfr_neg@plt>
    b918:	ldr	x0, [sp, #104]
    b91c:	add	x1, sp, #0x90
    b920:	mov	w2, wzr
    b924:	bl	5580 <mpc_set@plt>
    b928:	mov	w20, #0x1                   	// #1
    b92c:	sub	x0, x29, #0x28
    b930:	bl	4d60 <mpfr_clear@plt>
    b934:	sub	x0, x29, #0x48
    b938:	bl	4d60 <mpfr_clear@plt>
    b93c:	sub	x0, x29, #0x68
    b940:	bl	4d60 <mpfr_clear@plt>
    b944:	sub	x0, x29, #0x88
    b948:	bl	4d60 <mpfr_clear@plt>
    b94c:	ldr	w8, [sp, #116]
    b950:	cbz	w8, b95c <mpc_mul_karatsuba@@Base+0x764>
    b954:	add	x0, sp, #0x90
    b958:	bl	4a10 <mpc_clear@plt>
    b95c:	cbz	w20, b98c <mpc_mul_karatsuba@@Base+0x794>
    b960:	cmp	w25, #0x0
    b964:	mov	w8, #0x2                   	// #2
    b968:	cset	w9, ne  // ne = any
    b96c:	csel	w8, w8, w9, lt  // lt = tstop
    b970:	cmp	w26, #0x0
    b974:	cset	w9, ne  // ne = any
    b978:	lsl	w9, w9, #2
    b97c:	mov	w10, #0x8                   	// #8
    b980:	csel	w9, w10, w9, lt  // lt = tstop
    b984:	orr	w0, w9, w8
    b988:	b	b99c <mpc_mul_karatsuba@@Base+0x7a4>
    b98c:	ldp	x2, x0, [sp, #96]
    b990:	ldr	x1, [sp, #88]
    b994:	ldr	w3, [sp, #84]
    b998:	bl	4eb0 <mpc_mul_naive@plt>
    b99c:	ldp	x20, x19, [sp, #432]
    b9a0:	ldp	x22, x21, [sp, #416]
    b9a4:	ldp	x24, x23, [sp, #400]
    b9a8:	ldp	x26, x25, [sp, #384]
    b9ac:	ldp	x28, x27, [sp, #368]
    b9b0:	ldp	x29, x30, [sp, #352]
    b9b4:	add	sp, sp, #0x1c0
    b9b8:	ret

000000000000b9bc <mpc_mul@@Base>:
    b9bc:	stp	x29, x30, [sp, #-32]!
    b9c0:	ldr	x10, [x1, #16]
    b9c4:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    b9c8:	str	x19, [sp, #16]
    b9cc:	mov	x8, x1
    b9d0:	cmp	x10, x9
    b9d4:	mov	x19, x0
    b9d8:	mov	x29, sp
    b9dc:	b.eq	b9ec <mpc_mul@@Base+0x30>  // b.none
    b9e0:	ldr	x12, [x8, #48]
    b9e4:	cmp	x12, x9
    b9e8:	b.ne	b9f8 <mpc_mul@@Base+0x3c>  // b.any
    b9ec:	mov	x0, x19
    b9f0:	mov	x1, x8
    b9f4:	b	ba20 <mpc_mul@@Base+0x64>
    b9f8:	ldr	x9, [x2, #16]
    b9fc:	mov	x13, #0x8000000000000003    	// #-9223372036854775805
    ba00:	cmp	x9, x13
    ba04:	b.eq	ba14 <mpc_mul@@Base+0x58>  // b.none
    ba08:	ldr	x11, [x2, #48]
    ba0c:	cmp	x11, x13
    ba10:	b.ne	ba34 <mpc_mul@@Base+0x78>  // b.any
    ba14:	mov	x0, x19
    ba18:	mov	x1, x2
    ba1c:	mov	x2, x8
    ba20:	bl	bb94 <mpc_mul@@Base+0x1d8>
    ba24:	ldr	x19, [sp, #16]
    ba28:	mov	w0, wzr
    ba2c:	ldp	x29, x30, [sp], #32
    ba30:	ret
    ba34:	mov	x13, #0x2                   	// #2
    ba38:	movk	x13, #0x8000, lsl #48
    ba3c:	cmp	x10, x13
    ba40:	b.eq	ba78 <mpc_mul@@Base+0xbc>  // b.none
    ba44:	cmp	x12, x13
    ba48:	b.eq	ba78 <mpc_mul@@Base+0xbc>  // b.none
    ba4c:	cmp	x9, x13
    ba50:	b.eq	ba78 <mpc_mul@@Base+0xbc>  // b.none
    ba54:	cmp	x11, x13
    ba58:	b.eq	ba78 <mpc_mul@@Base+0xbc>  // b.none
    ba5c:	mov	x13, #0x8000000000000001    	// #-9223372036854775807
    ba60:	cmp	x12, x13
    ba64:	b.ne	ba8c <mpc_mul@@Base+0xd0>  // b.any
    ba68:	mov	x0, x19
    ba6c:	mov	x1, x2
    ba70:	mov	x2, x8
    ba74:	b	ba9c <mpc_mul@@Base+0xe0>
    ba78:	mov	x0, x19
    ba7c:	bl	4a40 <mpfr_set_nan@plt>
    ba80:	add	x0, x19, #0x20
    ba84:	bl	4a40 <mpfr_set_nan@plt>
    ba88:	b	ba24 <mpc_mul@@Base+0x68>
    ba8c:	cmp	x11, x13
    ba90:	b.ne	baa8 <mpc_mul@@Base+0xec>  // b.any
    ba94:	mov	x0, x19
    ba98:	mov	x1, x8
    ba9c:	ldr	x19, [sp, #16]
    baa0:	ldp	x29, x30, [sp], #32
    baa4:	b	be74 <mpc_mul@@Base+0x4b8>
    baa8:	mov	x13, #0x8000000000000001    	// #-9223372036854775807
    baac:	cmp	x10, x13
    bab0:	b.ne	bac4 <mpc_mul@@Base+0x108>  // b.any
    bab4:	mov	x0, x19
    bab8:	mov	x1, x2
    babc:	mov	x2, x8
    bac0:	b	bad4 <mpc_mul@@Base+0x118>
    bac4:	cmp	x9, x13
    bac8:	b.ne	bae0 <mpc_mul@@Base+0x124>  // b.any
    bacc:	mov	x0, x19
    bad0:	mov	x1, x8
    bad4:	ldr	x19, [sp, #16]
    bad8:	ldp	x29, x30, [sp], #32
    badc:	b	bf5c <mpc_mul@@Base+0x5a0>
    bae0:	ldr	x13, [x8]
    bae4:	ldr	x14, [x8, #32]
    bae8:	subs	x10, x10, x12
    baec:	cneg	x10, x10, mi  // mi = first
    baf0:	cmp	x13, x14
    baf4:	csel	x12, x13, x14, gt
    baf8:	cmp	x12, #0x0
    bafc:	cinc	x12, x12, lt  // lt = tstop
    bb00:	cmp	x10, x12, asr #1
    bb04:	b.gt	bb30 <mpc_mul@@Base+0x174>
    bb08:	ldr	x10, [x2]
    bb0c:	ldr	x12, [x2, #32]
    bb10:	subs	x9, x9, x11
    bb14:	cneg	x9, x9, mi  // mi = first
    bb18:	cmp	x10, x12
    bb1c:	csel	x10, x10, x12, gt
    bb20:	cmp	x10, #0x0
    bb24:	cinc	x10, x10, lt  // lt = tstop
    bb28:	cmp	x9, x10, asr #1
    bb2c:	b.le	bb44 <mpc_mul@@Base+0x188>
    bb30:	mov	x0, x19
    bb34:	ldr	x19, [sp, #16]
    bb38:	mov	x1, x8
    bb3c:	ldp	x29, x30, [sp], #32
    bb40:	b	4eb0 <mpc_mul_naive@plt>
    bb44:	adrp	x11, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    bb48:	ldr	x9, [x19]
    bb4c:	ldr	x10, [x19, #32]
    bb50:	ldr	x11, [x11, #4056]
    bb54:	mov	w12, #0x17                  	// #23
    bb58:	mov	x0, x19
    bb5c:	cmp	x9, x10
    bb60:	ldrsw	x11, [x11]
    bb64:	csel	x9, x9, x10, gt
    bb68:	adrp	x10, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    bb6c:	ldr	x10, [x10, #4032]
    bb70:	mul	x11, x11, x12
    bb74:	adrp	x12, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    bb78:	ldr	x12, [x12, #4016]
    bb7c:	ldr	x19, [sp, #16]
    bb80:	cmp	x9, x11
    bb84:	mov	x1, x8
    bb88:	csel	x4, x12, x10, gt
    bb8c:	ldp	x29, x30, [sp], #32
    bb90:	br	x4
    bb94:	stp	x29, x30, [sp, #-32]!
    bb98:	stp	x20, x19, [sp, #16]
    bb9c:	ldr	w8, [x1, #8]
    bba0:	ldr	w9, [x1, #40]
    bba4:	ldr	w14, [x2, #8]
    bba8:	ldr	w15, [x2, #40]
    bbac:	mov	w11, #0x1                   	// #1
    bbb0:	ldr	x13, [x1, #16]
    bbb4:	cmp	w8, #0x0
    bbb8:	cneg	w12, w11, lt  // lt = tstop
    bbbc:	cmp	w9, #0x0
    bbc0:	cneg	w10, w11, lt  // lt = tstop
    bbc4:	cmp	w14, #0x0
    bbc8:	mov	x8, #0x2                   	// #2
    bbcc:	cneg	w9, w11, lt  // lt = tstop
    bbd0:	cmp	w15, #0x0
    bbd4:	movk	x8, #0x8000, lsl #48
    bbd8:	cneg	w11, w11, lt  // lt = tstop
    bbdc:	cmp	x13, x8
    bbe0:	mov	x19, x0
    bbe4:	mov	x29, sp
    bbe8:	b.eq	bc10 <mpc_mul@@Base+0x254>  // b.none
    bbec:	ldr	x16, [x1, #48]
    bbf0:	cmp	x16, x8
    bbf4:	b.eq	bc10 <mpc_mul@@Base+0x254>  // b.none
    bbf8:	ldr	x14, [x2, #16]
    bbfc:	cmp	x14, x8
    bc00:	b.eq	bc10 <mpc_mul@@Base+0x254>  // b.none
    bc04:	ldr	x15, [x2, #48]
    bc08:	cmp	x15, x8
    bc0c:	b.ne	bd04 <mpc_mul@@Base+0x348>  // b.any
    bc10:	mov	w20, wzr
    bc14:	mov	w8, wzr
    bc18:	orr	w14, w8, w20
    bc1c:	cbz	w14, bc48 <mpc_mul@@Base+0x28c>
    bc20:	mov	x0, x19
    bc24:	cbz	w8, bcec <mpc_mul@@Base+0x330>
    bc28:	mov	w1, w8
    bc2c:	bl	5120 <mpfr_set_inf@plt>
    bc30:	add	x0, x19, #0x20
    bc34:	cbz	w20, bcf8 <mpc_mul@@Base+0x33c>
    bc38:	mov	w1, w20
    bc3c:	ldp	x20, x19, [sp, #16]
    bc40:	ldp	x29, x30, [sp], #32
    bc44:	b	5120 <mpfr_set_inf@plt>
    bc48:	ldr	x14, [x2, #16]
    bc4c:	ldr	x15, [x2, #48]
    bc50:	mov	x8, #0x7fffffffffffffff    	// #9223372036854775807
    bc54:	ldr	x17, [x1, #48]
    bc58:	add	x0, x14, x8
    bc5c:	add	x1, x15, x8
    bc60:	cmp	x0, #0x1
    bc64:	mov	x16, #0x8000000000000003    	// #-9223372036854775805
    bc68:	cset	w0, hi  // hi = pmore
    bc6c:	cmp	x1, #0x1
    bc70:	cset	w1, hi  // hi = pmore
    bc74:	cmp	x14, x16
    bc78:	cset	w14, eq  // eq = none
    bc7c:	cmp	x15, x16
    bc80:	cset	w15, eq  // eq = none
    bc84:	orr	w2, w14, w15
    bc88:	add	x18, x13, x8
    bc8c:	cmp	w2, #0x0
    bc90:	csel	w14, w14, w0, ne  // ne = any
    bc94:	csel	w15, w15, w1, ne  // ne = any
    bc98:	cmp	x18, #0x1
    bc9c:	add	x8, x17, x8
    bca0:	ccmp	x13, x16, #0x0, hi  // hi = pmore
    bca4:	csel	w12, w12, wzr, eq  // eq = none
    bca8:	cmp	x8, #0x1
    bcac:	ccmp	x17, x16, #0x0, hi  // hi = pmore
    bcb0:	csel	w10, w10, wzr, eq  // eq = none
    bcb4:	mul	w8, w12, w9
    bcb8:	cmp	w14, #0x0
    bcbc:	mul	w9, w10, w9
    bcc0:	mul	w12, w12, w11
    bcc4:	csel	w8, w8, wzr, ne  // ne = any
    bcc8:	mul	w11, w10, w11
    bccc:	csel	w9, w9, wzr, ne  // ne = any
    bcd0:	cmp	w15, #0x0
    bcd4:	csel	w10, w11, wzr, ne  // ne = any
    bcd8:	csel	w11, w12, wzr, ne  // ne = any
    bcdc:	sub	w8, w8, w10
    bce0:	add	w20, w11, w9
    bce4:	mov	x0, x19
    bce8:	cbnz	w8, bc28 <mpc_mul@@Base+0x26c>
    bcec:	bl	4a40 <mpfr_set_nan@plt>
    bcf0:	add	x0, x19, #0x20
    bcf4:	cbnz	w20, bc38 <mpc_mul@@Base+0x27c>
    bcf8:	ldp	x20, x19, [sp, #16]
    bcfc:	ldp	x29, x30, [sp], #32
    bd00:	b	4a40 <mpfr_set_nan@plt>
    bd04:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bd08:	cmp	x13, x8
    bd0c:	b.ne	bd24 <mpc_mul@@Base+0x368>  // b.any
    bd10:	mov	x17, #0x8000000000000001    	// #-9223372036854775807
    bd14:	cmp	x14, x17
    bd18:	b.ne	bd38 <mpc_mul@@Base+0x37c>  // b.any
    bd1c:	mov	w8, wzr
    bd20:	b	bdcc <mpc_mul@@Base+0x410>
    bd24:	mov	x16, #0x8000000000000001    	// #-9223372036854775807
    bd28:	cmp	x15, x16
    bd2c:	b.ne	bd70 <mpc_mul@@Base+0x3b4>  // b.any
    bd30:	mov	w8, wzr
    bd34:	b	be28 <mpc_mul@@Base+0x46c>
    bd38:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bd3c:	cmp	x16, x8
    bd40:	b.ne	bd50 <mpc_mul@@Base+0x394>  // b.any
    bd44:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    bd48:	cmp	x15, x8
    bd4c:	b.eq	bc10 <mpc_mul@@Base+0x254>  // b.none
    bd50:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    bd54:	cmp	x16, x8
    bd58:	b.ne	bdb0 <mpc_mul@@Base+0x3f4>  // b.any
    bd5c:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bd60:	cmp	x15, x8
    bd64:	b.ne	bdb0 <mpc_mul@@Base+0x3f4>  // b.any
    bd68:	mov	w8, wzr
    bd6c:	b	be0c <mpc_mul@@Base+0x450>
    bd70:	cmp	x13, x16
    bd74:	b.ne	bd8c <mpc_mul@@Base+0x3d0>  // b.any
    bd78:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bd7c:	cmp	x14, x8
    bd80:	b.ne	bd8c <mpc_mul@@Base+0x3d0>  // b.any
    bd84:	mov	w8, wzr
    bd88:	b	be3c <mpc_mul@@Base+0x480>
    bd8c:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bd90:	cmp	x14, x8
    bd94:	b.ne	be20 <mpc_mul@@Base+0x464>  // b.any
    bd98:	mul	w17, w9, w12
    bd9c:	mul	w8, w11, w10
    bda0:	cmp	w17, w8
    bda4:	b.ne	be24 <mpc_mul@@Base+0x468>  // b.any
    bda8:	mov	w8, wzr
    bdac:	b	be30 <mpc_mul@@Base+0x474>
    bdb0:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    bdb4:	cmp	x15, x8
    bdb8:	mul	w18, w9, w12
    bdbc:	ccmp	x16, x8, #0x4, ne  // ne = any
    bdc0:	mul	w8, w11, w10
    bdc4:	ccmp	w18, w8, #0x0, eq  // eq = none
    bdc8:	csel	w8, wzr, w18, eq  // eq = none
    bdcc:	cmp	x15, x17
    bdd0:	b.eq	be48 <mpc_mul@@Base+0x48c>  // b.none
    bdd4:	mov	x15, #0x8000000000000001    	// #-9223372036854775807
    bdd8:	cmp	x16, x15
    bddc:	b.eq	be0c <mpc_mul@@Base+0x450>  // b.none
    bde0:	mov	x15, #0x8000000000000003    	// #-9223372036854775805
    bde4:	cmp	x16, x15
    bde8:	b.ne	be18 <mpc_mul@@Base+0x45c>  // b.any
    bdec:	mov	x15, #0x8000000000000001    	// #-9223372036854775807
    bdf0:	cmp	x14, x15
    bdf4:	b.eq	be48 <mpc_mul@@Base+0x48c>  // b.none
    bdf8:	mul	w14, w11, w12
    bdfc:	mul	w15, w9, w10
    be00:	cmp	w14, w15
    be04:	b.ne	be48 <mpc_mul@@Base+0x48c>  // b.any
    be08:	b	be18 <mpc_mul@@Base+0x45c>
    be0c:	mov	x15, #0x8000000000000003    	// #-9223372036854775805
    be10:	cmp	x14, x15
    be14:	b.eq	be48 <mpc_mul@@Base+0x48c>  // b.none
    be18:	mul	w20, w11, w12
    be1c:	b	bc18 <mpc_mul@@Base+0x25c>
    be20:	mul	w8, w11, w10
    be24:	neg	w8, w8
    be28:	cmp	x14, x16
    be2c:	b.eq	be48 <mpc_mul@@Base+0x48c>  // b.none
    be30:	mov	x14, #0x8000000000000001    	// #-9223372036854775807
    be34:	cmp	x13, x14
    be38:	b.ne	be50 <mpc_mul@@Base+0x494>  // b.any
    be3c:	mov	x14, #0x8000000000000003    	// #-9223372036854775805
    be40:	cmp	x15, x14
    be44:	b.ne	be6c <mpc_mul@@Base+0x4b0>  // b.any
    be48:	mov	w20, wzr
    be4c:	b	bc18 <mpc_mul@@Base+0x25c>
    be50:	mov	x14, #0x8000000000000003    	// #-9223372036854775805
    be54:	cmp	x15, x14
    be58:	b.ne	be6c <mpc_mul@@Base+0x4b0>  // b.any
    be5c:	mul	w14, w11, w12
    be60:	mul	w15, w9, w10
    be64:	cmp	w14, w15
    be68:	b.ne	be48 <mpc_mul@@Base+0x48c>  // b.any
    be6c:	mul	w20, w9, w10
    be70:	b	bc18 <mpc_mul@@Base+0x25c>
    be74:	stp	x29, x30, [sp, #-80]!
    be78:	stp	x26, x25, [sp, #16]
    be7c:	stp	x24, x23, [sp, #32]
    be80:	stp	x22, x21, [sp, #48]
    be84:	stp	x20, x19, [sp, #64]
    be88:	ldr	w8, [x1, #8]
    be8c:	ldr	w10, [x1, #40]
    be90:	ldr	w11, [x2, #8]
    be94:	ldr	w12, [x2, #40]
    be98:	mov	w9, #0x1                   	// #1
    be9c:	cmp	w8, #0x0
    bea0:	cneg	w24, w9, lt  // lt = tstop
    bea4:	cmp	w10, #0x0
    bea8:	cneg	w22, w9, lt  // lt = tstop
    beac:	cmp	w11, #0x0
    beb0:	cneg	w23, w9, lt  // lt = tstop
    beb4:	cmp	w12, #0x0
    beb8:	mov	x29, sp
    bebc:	mov	w19, w3
    bec0:	mov	x20, x0
    bec4:	cneg	w25, w9, lt  // lt = tstop
    bec8:	bl	5160 <mpc_mul_fr@plt>
    becc:	ldr	x8, [x20, #16]
    bed0:	mov	x26, #0x8000000000000001    	// #-9223372036854775807
    bed4:	mov	w21, w0
    bed8:	cmp	x8, x26
    bedc:	b.ne	bf08 <mpc_mul@@Base+0x54c>  // b.any
    bee0:	cmp	w22, w25
    bee4:	and	w8, w19, #0xf
    bee8:	ccmp	w24, w23, #0x4, eq  // eq = none
    beec:	ccmp	w8, #0x3, #0x4, eq  // eq = none
    bef0:	mov	w8, #0xffffffff            	// #-1
    bef4:	cneg	w3, w8, ne  // ne = any
    bef8:	mov	x0, x20
    befc:	mov	x1, x20
    bf00:	mov	w2, wzr
    bf04:	bl	51d0 <mpfr_set4@plt>
    bf08:	ldr	x8, [x20, #48]
    bf0c:	cmp	x8, x26
    bf10:	b.ne	bf40 <mpc_mul@@Base+0x584>  // b.any
    bf14:	cmp	w24, w25
    bf18:	and	w8, w19, #0xfffffff0
    bf1c:	mov	w9, #0x30                  	// #48
    bf20:	ccmp	w22, w23, #0x4, ne  // ne = any
    bf24:	add	x0, x20, #0x20
    bf28:	ccmp	w8, w9, #0x4, eq  // eq = none
    bf2c:	mov	w8, #0xffffffff            	// #-1
    bf30:	cneg	w3, w8, ne  // ne = any
    bf34:	mov	x1, x0
    bf38:	mov	w2, wzr
    bf3c:	bl	51d0 <mpfr_set4@plt>
    bf40:	mov	w0, w21
    bf44:	ldp	x20, x19, [sp, #64]
    bf48:	ldp	x22, x21, [sp, #48]
    bf4c:	ldp	x24, x23, [sp, #32]
    bf50:	ldp	x26, x25, [sp, #16]
    bf54:	ldp	x29, x30, [sp], #80
    bf58:	ret
    bf5c:	sub	sp, sp, #0x90
    bf60:	cmp	x0, x1
    bf64:	cset	w8, eq  // eq = none
    bf68:	cmp	x0, x2
    bf6c:	cset	w9, eq  // eq = none
    bf70:	stp	x24, x23, [sp, #96]
    bf74:	orr	w24, w8, w9
    bf78:	stp	x22, x21, [sp, #112]
    bf7c:	stp	x20, x19, [sp, #128]
    bf80:	mov	x22, x2
    bf84:	mov	x20, x1
    bf88:	mov	x19, x0
    bf8c:	cmp	w24, #0x1
    bf90:	mov	w21, w3
    bf94:	stp	x29, x30, [sp, #64]
    bf98:	stp	x26, x25, [sp, #80]
    bf9c:	add	x29, sp, #0x40
    bfa0:	b.ne	bfb8 <mpc_mul@@Base+0x5fc>  // b.any
    bfa4:	ldr	x1, [x19]
    bfa8:	ldr	x2, [x19, #32]
    bfac:	mov	x0, sp
    bfb0:	bl	53c0 <mpc_init3@plt>
    bfb4:	b	bfc8 <mpc_mul@@Base+0x60c>
    bfb8:	ldp	q1, q0, [x19, #32]
    bfbc:	ldp	q3, q2, [x19]
    bfc0:	stp	q1, q0, [sp, #32]
    bfc4:	stp	q3, q2, [sp]
    bfc8:	ldr	w9, [x22, #8]
    bfcc:	ldr	w10, [x20, #40]
    bfd0:	mov	w8, #0x1                   	// #1
    bfd4:	add	x1, x20, #0x20
    bfd8:	cmp	w9, #0x0
    bfdc:	cneg	w9, w8, lt  // lt = tstop
    bfe0:	cmp	w10, #0x0
    bfe4:	cneg	w10, w8, lt  // lt = tstop
    bfe8:	cmp	w9, w10
    bfec:	b.ne	bff8 <mpc_mul@@Base+0x63c>  // b.any
    bff0:	mov	w25, wzr
    bff4:	b	c018 <mpc_mul@@Base+0x65c>
    bff8:	ldr	w9, [x22, #40]
    bffc:	ldr	w10, [x20, #8]
    c000:	cmp	w9, #0x0
    c004:	cneg	w9, w8, lt  // lt = tstop
    c008:	cmp	w10, #0x0
    c00c:	cneg	w8, w8, lt  // lt = tstop
    c010:	cmp	w9, w8
    c014:	cset	w25, ne  // ne = any
    c018:	and	w8, w21, #0xf
    c01c:	mov	w9, #0x2                   	// #2
    c020:	cmp	w8, #0x3
    c024:	add	x23, x22, #0x20
    c028:	csel	w9, w9, w8, eq  // eq = none
    c02c:	cmp	w8, #0x2
    c030:	mov	w8, #0x3                   	// #3
    c034:	csel	w3, w8, w9, eq  // eq = none
    c038:	mov	x0, sp
    c03c:	mov	x2, x23
    c040:	mov	x26, sp
    c044:	bl	4b70 <mpfr_mul@plt>
    c048:	mov	w22, w0
    c04c:	mov	x0, sp
    c050:	mov	x1, sp
    c054:	mov	w2, wzr
    c058:	bl	4b80 <mpfr_neg@plt>
    c05c:	asr	w21, w21, #4
    c060:	add	x0, x26, #0x20
    c064:	mov	x1, x20
    c068:	mov	x2, x23
    c06c:	mov	w3, w21
    c070:	bl	4b70 <mpfr_mul@plt>
    c074:	mov	w20, w0
    c078:	mov	x1, sp
    c07c:	mov	x0, x19
    c080:	mov	w2, wzr
    c084:	bl	5580 <mpc_set@plt>
    c088:	ldr	x8, [x19, #48]
    c08c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    c090:	cmp	x8, x9
    c094:	b.ne	c0c0 <mpc_mul@@Base+0x704>  // b.any
    c098:	cmp	w21, #0x3
    c09c:	cset	w8, eq  // eq = none
    c0a0:	orr	w8, w8, w25
    c0a4:	add	x0, x19, #0x20
    c0a8:	cmp	w8, #0x0
    c0ac:	mov	w8, #0xffffffff            	// #-1
    c0b0:	cneg	w3, w8, eq  // eq = none
    c0b4:	mov	x1, x0
    c0b8:	mov	w2, wzr
    c0bc:	bl	51d0 <mpfr_set4@plt>
    c0c0:	cbz	w24, c0cc <mpc_mul@@Base+0x710>
    c0c4:	mov	x0, sp
    c0c8:	bl	4a10 <mpc_clear@plt>
    c0cc:	cmp	w22, #0x0
    c0d0:	mov	w8, #0x2                   	// #2
    c0d4:	cset	w9, ne  // ne = any
    c0d8:	csel	w8, w8, w9, gt
    c0dc:	cmp	w20, #0x0
    c0e0:	cset	w9, ne  // ne = any
    c0e4:	ldp	x20, x19, [sp, #128]
    c0e8:	ldp	x22, x21, [sp, #112]
    c0ec:	ldp	x24, x23, [sp, #96]
    c0f0:	ldp	x26, x25, [sp, #80]
    c0f4:	ldp	x29, x30, [sp, #64]
    c0f8:	lsl	w9, w9, #2
    c0fc:	mov	w10, #0x8                   	// #8
    c100:	csel	w9, w10, w9, lt  // lt = tstop
    c104:	orr	w0, w9, w8
    c108:	add	sp, sp, #0x90
    c10c:	ret

000000000000c110 <mpc_mul_fr@@Base>:
    c110:	sub	sp, sp, #0x60
    c114:	str	x23, [sp, #48]
    c118:	stp	x22, x21, [sp, #64]
    c11c:	stp	x20, x19, [sp, #80]
    c120:	mov	w21, w3
    c124:	mov	x19, x2
    c128:	mov	x20, x0
    c12c:	cmp	x0, x2
    c130:	mov	x23, x1
    c134:	stp	x29, x30, [sp, #32]
    c138:	add	x29, sp, #0x20
    c13c:	b.eq	c14c <mpc_mul_fr@@Base+0x3c>  // b.none
    c140:	ldp	q1, q0, [x20]
    c144:	stp	q1, q0, [sp]
    c148:	b	c158 <mpc_mul_fr@@Base+0x48>
    c14c:	ldr	x1, [x20]
    c150:	mov	x0, sp
    c154:	bl	5440 <mpfr_init2@plt>
    c158:	and	w3, w21, #0xf
    c15c:	mov	x0, sp
    c160:	mov	x1, x23
    c164:	mov	x2, x19
    c168:	bl	4b70 <mpfr_mul@plt>
    c16c:	mov	w22, w0
    c170:	add	x0, x20, #0x20
    c174:	add	x1, x23, #0x20
    c178:	asr	w3, w21, #4
    c17c:	mov	x2, x19
    c180:	bl	4b70 <mpfr_mul@plt>
    c184:	ldr	w3, [sp, #8]
    c188:	mov	w21, w0
    c18c:	mov	x1, sp
    c190:	mov	x0, x20
    c194:	mov	w2, wzr
    c198:	bl	51d0 <mpfr_set4@plt>
    c19c:	cmp	x20, x19
    c1a0:	b.ne	c1ac <mpc_mul_fr@@Base+0x9c>  // b.any
    c1a4:	mov	x0, sp
    c1a8:	bl	4d60 <mpfr_clear@plt>
    c1ac:	cmp	w22, #0x0
    c1b0:	mov	w8, #0x2                   	// #2
    c1b4:	cset	w9, ne  // ne = any
    c1b8:	csel	w8, w8, w9, lt  // lt = tstop
    c1bc:	cmp	w21, #0x0
    c1c0:	cset	w9, ne  // ne = any
    c1c4:	ldp	x20, x19, [sp, #80]
    c1c8:	ldp	x22, x21, [sp, #64]
    c1cc:	ldr	x23, [sp, #48]
    c1d0:	ldp	x29, x30, [sp, #32]
    c1d4:	lsl	w9, w9, #2
    c1d8:	mov	w10, #0x8                   	// #8
    c1dc:	csel	w9, w10, w9, lt  // lt = tstop
    c1e0:	orr	w0, w9, w8
    c1e4:	add	sp, sp, #0x60
    c1e8:	ret

000000000000c1ec <mpc_mul_i@@Base>:
    c1ec:	sub	sp, sp, #0x60
    c1f0:	stp	x29, x30, [sp, #32]
    c1f4:	str	x23, [sp, #48]
    c1f8:	stp	x22, x21, [sp, #64]
    c1fc:	stp	x20, x19, [sp, #80]
    c200:	mov	x20, x0
    c204:	mov	x19, x1
    c208:	ldr	x1, [x1]
    c20c:	ldr	x8, [x20, #32]!
    c210:	mov	w21, w3
    c214:	mov	x22, x0
    c218:	mov	w23, w2
    c21c:	cmp	x1, x8
    c220:	add	x29, sp, #0x20
    c224:	b.ne	c27c <mpc_mul_i@@Base+0x90>  // b.any
    c228:	mov	x8, x19
    c22c:	ldr	x9, [x8, #32]!
    c230:	ldr	x10, [x22]
    c234:	cmp	x9, x10
    c238:	b.ne	c27c <mpc_mul_i@@Base+0x90>  // b.any
    c23c:	cmp	x22, x19
    c240:	b.eq	c368 <mpc_mul_i@@Base+0x17c>  // b.none
    c244:	ldr	w3, [x19, #40]
    c248:	mov	x0, x22
    c24c:	mov	x1, x8
    c250:	mov	w2, wzr
    c254:	bl	51d0 <mpfr_set4@plt>
    c258:	ldr	w3, [x19, #8]
    c25c:	mov	x0, x20
    c260:	mov	x1, x19
    c264:	mov	w2, wzr
    c268:	bl	51d0 <mpfr_set4@plt>
    c26c:	tbnz	w23, #31, c378 <mpc_mul_i@@Base+0x18c>
    c270:	mov	x0, x22
    c274:	mov	x1, x22
    c278:	b	c380 <mpc_mul_i@@Base+0x194>
    c27c:	cmp	x22, x19
    c280:	b.eq	c2b4 <mpc_mul_i@@Base+0xc8>  // b.none
    c284:	add	x1, x19, #0x20
    c288:	and	w2, w21, #0xf
    c28c:	tbnz	w23, #31, c2ec <mpc_mul_i@@Base+0x100>
    c290:	mov	x0, x22
    c294:	bl	4b80 <mpfr_neg@plt>
    c298:	ldr	w3, [x19, #8]
    c29c:	mov	w22, w0
    c2a0:	asr	w2, w21, #4
    c2a4:	mov	x0, x20
    c2a8:	mov	x1, x19
    c2ac:	bl	51d0 <mpfr_set4@plt>
    c2b0:	b	c30c <mpc_mul_i@@Base+0x120>
    c2b4:	mov	x0, sp
    c2b8:	bl	5440 <mpfr_init2@plt>
    c2bc:	add	x1, x19, #0x20
    c2c0:	and	w2, w21, #0xf
    c2c4:	tbnz	w23, #31, c314 <mpc_mul_i@@Base+0x128>
    c2c8:	mov	x0, sp
    c2cc:	bl	4b80 <mpfr_neg@plt>
    c2d0:	ldr	w3, [x19, #8]
    c2d4:	mov	w22, w0
    c2d8:	asr	w2, w21, #4
    c2dc:	mov	x0, x20
    c2e0:	mov	x1, x19
    c2e4:	bl	51d0 <mpfr_set4@plt>
    c2e8:	b	c334 <mpc_mul_i@@Base+0x148>
    c2ec:	ldr	w3, [x19, #40]
    c2f0:	mov	x0, x22
    c2f4:	bl	51d0 <mpfr_set4@plt>
    c2f8:	mov	w22, w0
    c2fc:	asr	w2, w21, #4
    c300:	mov	x0, x20
    c304:	mov	x1, x19
    c308:	bl	4b80 <mpfr_neg@plt>
    c30c:	mov	w20, w0
    c310:	b	c348 <mpc_mul_i@@Base+0x15c>
    c314:	ldr	w3, [x19, #40]
    c318:	mov	x0, sp
    c31c:	bl	51d0 <mpfr_set4@plt>
    c320:	mov	w22, w0
    c324:	asr	w2, w21, #4
    c328:	mov	x0, x20
    c32c:	mov	x1, x19
    c330:	bl	4b80 <mpfr_neg@plt>
    c334:	mov	w20, w0
    c338:	mov	x0, x19
    c33c:	bl	4d60 <mpfr_clear@plt>
    c340:	ldp	q1, q0, [sp]
    c344:	stp	q1, q0, [x19]
    c348:	cmp	w22, #0x0
    c34c:	mov	w8, #0x2                   	// #2
    c350:	cset	w9, ne  // ne = any
    c354:	csel	w8, w8, w9, lt  // lt = tstop
    c358:	lsr	w9, w20, #31
    c35c:	cbz	w20, c390 <mpc_mul_i@@Base+0x1a4>
    c360:	mov	w10, #0x4                   	// #4
    c364:	b	c394 <mpc_mul_i@@Base+0x1a8>
    c368:	mov	x0, x22
    c36c:	mov	x1, x20
    c370:	bl	5090 <mpfr_swap@plt>
    c374:	tbz	w23, #31, c270 <mpc_mul_i@@Base+0x84>
    c378:	mov	x0, x20
    c37c:	mov	x1, x20
    c380:	mov	w2, wzr
    c384:	bl	4b80 <mpfr_neg@plt>
    c388:	mov	w9, wzr
    c38c:	mov	w8, wzr
    c390:	mov	w10, wzr
    c394:	ldp	x20, x19, [sp, #80]
    c398:	ldp	x22, x21, [sp, #64]
    c39c:	ldr	x23, [sp, #48]
    c3a0:	ldp	x29, x30, [sp, #32]
    c3a4:	cmp	w9, #0x0
    c3a8:	mov	w9, #0x8                   	// #8
    c3ac:	csel	w9, w9, w10, ne  // ne = any
    c3b0:	orr	w0, w9, w8
    c3b4:	add	sp, sp, #0x60
    c3b8:	ret

000000000000c3bc <mpc_mul_si@@Base>:
    c3bc:	stp	x29, x30, [sp, #-64]!
    c3c0:	stp	x20, x19, [sp, #48]
    c3c4:	mov	w19, w3
    c3c8:	and	w3, w3, #0xf
    c3cc:	str	x23, [sp, #16]
    c3d0:	stp	x22, x21, [sp, #32]
    c3d4:	mov	x29, sp
    c3d8:	mov	x20, x2
    c3dc:	mov	x21, x1
    c3e0:	mov	x22, x0
    c3e4:	bl	5360 <mpfr_mul_si@plt>
    c3e8:	mov	w23, w0
    c3ec:	add	x0, x22, #0x20
    c3f0:	add	x1, x21, #0x20
    c3f4:	asr	w3, w19, #4
    c3f8:	mov	x2, x20
    c3fc:	bl	5360 <mpfr_mul_si@plt>
    c400:	cmp	w23, #0x0
    c404:	mov	w8, #0x2                   	// #2
    c408:	cset	w9, ne  // ne = any
    c40c:	csel	w8, w8, w9, lt  // lt = tstop
    c410:	cmp	w0, #0x0
    c414:	cset	w9, ne  // ne = any
    c418:	ldp	x20, x19, [sp, #48]
    c41c:	ldp	x22, x21, [sp, #32]
    c420:	ldr	x23, [sp, #16]
    c424:	lsl	w9, w9, #2
    c428:	mov	w10, #0x8                   	// #8
    c42c:	csel	w9, w10, w9, lt  // lt = tstop
    c430:	orr	w0, w9, w8
    c434:	ldp	x29, x30, [sp], #64
    c438:	ret

000000000000c43c <mpc_mul_ui@@Base>:
    c43c:	stp	x29, x30, [sp, #-64]!
    c440:	stp	x20, x19, [sp, #48]
    c444:	mov	w19, w3
    c448:	and	w3, w3, #0xf
    c44c:	str	x23, [sp, #16]
    c450:	stp	x22, x21, [sp, #32]
    c454:	mov	x29, sp
    c458:	mov	x20, x2
    c45c:	mov	x21, x1
    c460:	mov	x22, x0
    c464:	bl	49c0 <mpfr_mul_ui@plt>
    c468:	mov	w23, w0
    c46c:	add	x0, x22, #0x20
    c470:	add	x1, x21, #0x20
    c474:	asr	w3, w19, #4
    c478:	mov	x2, x20
    c47c:	bl	49c0 <mpfr_mul_ui@plt>
    c480:	cmp	w23, #0x0
    c484:	mov	w8, #0x2                   	// #2
    c488:	cset	w9, ne  // ne = any
    c48c:	csel	w8, w8, w9, lt  // lt = tstop
    c490:	cmp	w0, #0x0
    c494:	cset	w9, ne  // ne = any
    c498:	ldp	x20, x19, [sp, #48]
    c49c:	ldp	x22, x21, [sp, #32]
    c4a0:	ldr	x23, [sp, #16]
    c4a4:	lsl	w9, w9, #2
    c4a8:	mov	w10, #0x8                   	// #8
    c4ac:	csel	w9, w10, w9, lt  // lt = tstop
    c4b0:	orr	w0, w9, w8
    c4b4:	ldp	x29, x30, [sp], #64
    c4b8:	ret

000000000000c4bc <mpc_neg@@Base>:
    c4bc:	stp	x29, x30, [sp, #-48]!
    c4c0:	stp	x20, x19, [sp, #32]
    c4c4:	mov	w19, w2
    c4c8:	and	w2, w2, #0xf
    c4cc:	stp	x22, x21, [sp, #16]
    c4d0:	mov	x29, sp
    c4d4:	mov	x20, x1
    c4d8:	mov	x21, x0
    c4dc:	bl	4b80 <mpfr_neg@plt>
    c4e0:	mov	w22, w0
    c4e4:	add	x0, x21, #0x20
    c4e8:	add	x1, x20, #0x20
    c4ec:	asr	w2, w19, #4
    c4f0:	bl	4b80 <mpfr_neg@plt>
    c4f4:	cmp	w22, #0x0
    c4f8:	mov	w8, #0x2                   	// #2
    c4fc:	cset	w9, ne  // ne = any
    c500:	csel	w8, w8, w9, lt  // lt = tstop
    c504:	cmp	w0, #0x0
    c508:	cset	w9, ne  // ne = any
    c50c:	ldp	x20, x19, [sp, #32]
    c510:	ldp	x22, x21, [sp, #16]
    c514:	lsl	w9, w9, #2
    c518:	mov	w10, #0x8                   	// #8
    c51c:	csel	w9, w10, w9, lt  // lt = tstop
    c520:	orr	w0, w9, w8
    c524:	ldp	x29, x30, [sp], #48
    c528:	ret

000000000000c52c <mpc_norm@@Base>:
    c52c:	sub	sp, sp, #0xd0
    c530:	stp	x20, x19, [sp, #192]
    c534:	mov	x20, x0
    c538:	mov	x0, x1
    c53c:	stp	x29, x30, [sp, #112]
    c540:	stp	x28, x27, [sp, #128]
    c544:	stp	x26, x25, [sp, #144]
    c548:	stp	x24, x23, [sp, #160]
    c54c:	stp	x22, x21, [sp, #176]
    c550:	add	x29, sp, #0x70
    c554:	mov	w19, w2
    c558:	mov	x24, x1
    c55c:	bl	54d0 <mpfr_number_p@plt>
    c560:	cbz	w0, c5a8 <mpc_norm@@Base+0x7c>
    c564:	add	x23, x24, #0x20
    c568:	mov	x0, x23
    c56c:	bl	54d0 <mpfr_number_p@plt>
    c570:	cbz	w0, c5a8 <mpc_norm@@Base+0x7c>
    c574:	ldr	x10, [x24, #16]
    c578:	ldr	x8, [x24, #48]
    c57c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    c580:	cmp	x10, x9
    c584:	b.ne	c5d4 <mpc_norm@@Base+0xa8>  // b.any
    c588:	cmp	x8, x9
    c58c:	b.ne	c5e8 <mpc_norm@@Base+0xbc>  // b.any
    c590:	mov	w8, #0x1                   	// #1
    c594:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    c598:	mov	w19, wzr
    c59c:	str	w8, [x20, #8]
    c5a0:	str	x9, [x20, #16]
    c5a4:	b	c8a0 <mpc_norm@@Base+0x374>
    c5a8:	mov	x0, x20
    c5ac:	mov	x1, x24
    c5b0:	mov	w2, w19
    c5b4:	ldp	x20, x19, [sp, #192]
    c5b8:	ldp	x22, x21, [sp, #176]
    c5bc:	ldp	x24, x23, [sp, #160]
    c5c0:	ldp	x26, x25, [sp, #144]
    c5c4:	ldp	x28, x27, [sp, #128]
    c5c8:	ldp	x29, x30, [sp, #112]
    c5cc:	add	sp, sp, #0xd0
    c5d0:	b	51a0 <mpc_abs@plt>
    c5d4:	cmp	x8, x9
    c5d8:	b.ne	c614 <mpc_norm@@Base+0xe8>  // b.any
    c5dc:	mov	x0, x20
    c5e0:	mov	x1, x24
    c5e4:	b	c5f0 <mpc_norm@@Base+0xc4>
    c5e8:	mov	x0, x20
    c5ec:	mov	x1, x23
    c5f0:	mov	w2, w19
    c5f4:	ldp	x20, x19, [sp, #192]
    c5f8:	ldp	x22, x21, [sp, #176]
    c5fc:	ldp	x24, x23, [sp, #160]
    c600:	ldp	x26, x25, [sp, #144]
    c604:	ldp	x28, x27, [sp, #128]
    c608:	ldp	x29, x30, [sp, #112]
    c60c:	add	sp, sp, #0xd0
    c610:	b	5010 <mpfr_sqr@plt>
    c614:	ldr	x25, [x20]
    c618:	sub	x0, x29, #0x20
    c61c:	bl	4aa0 <mpfr_init@plt>
    c620:	add	x0, sp, #0x30
    c624:	bl	4aa0 <mpfr_init@plt>
    c628:	add	x0, sp, #0x10
    c62c:	bl	4aa0 <mpfr_init@plt>
    c630:	bl	52f0 <mpfr_underflow_p@plt>
    c634:	str	w0, [sp, #8]
    c638:	bl	54e0 <mpfr_overflow_p@plt>
    c63c:	str	w0, [sp, #12]
    c640:	bl	4e20 <mpfr_clear_underflow@plt>
    c644:	bl	4a50 <mpfr_clear_overflow@plt>
    c648:	cmp	w19, #0x0
    c64c:	cset	w21, eq  // eq = none
    c650:	mov	w22, #0x1                   	// #1
    c654:	mov	x0, x25
    c658:	bl	4d20 <mpc_ceil_log2@plt>
    c65c:	ldr	x8, [x24]
    c660:	add	x9, x25, x0
    c664:	add	x25, x9, #0x3
    c668:	lsl	x27, x8, #1
    c66c:	tbz	w22, #0, c68c <mpc_norm@@Base+0x160>
    c670:	ldr	x8, [x23]
    c674:	cmp	x25, x27
    c678:	csel	x27, x25, x27, lt  // lt = tstop
    c67c:	lsl	x8, x8, #1
    c680:	cmp	x25, x8
    c684:	csel	x26, x25, x8, lt  // lt = tstop
    c688:	b	c694 <mpc_norm@@Base+0x168>
    c68c:	ldr	x8, [x23]
    c690:	lsl	x26, x8, #1
    c694:	sub	x0, x29, #0x20
    c698:	mov	x1, x27
    c69c:	bl	4c80 <mpfr_set_prec@plt>
    c6a0:	add	x0, sp, #0x30
    c6a4:	mov	x1, x26
    c6a8:	bl	4c80 <mpfr_set_prec@plt>
    c6ac:	sub	x0, x29, #0x20
    c6b0:	mov	w2, #0x3                   	// #3
    c6b4:	mov	x1, x24
    c6b8:	bl	5010 <mpfr_sqr@plt>
    c6bc:	mov	w28, w0
    c6c0:	add	x0, sp, #0x30
    c6c4:	mov	w2, #0x3                   	// #3
    c6c8:	mov	x1, x23
    c6cc:	bl	5010 <mpfr_sqr@plt>
    c6d0:	orr	w8, w0, w28
    c6d4:	cbz	w8, c85c <mpc_norm@@Base+0x330>
    c6d8:	add	x0, sp, #0x10
    c6dc:	mov	x1, x25
    c6e0:	bl	4c80 <mpfr_set_prec@plt>
    c6e4:	add	x0, sp, #0x10
    c6e8:	sub	x1, x29, #0x20
    c6ec:	add	x2, sp, #0x30
    c6f0:	mov	w3, #0x3                   	// #3
    c6f4:	bl	4e60 <mpfr_add@plt>
    c6f8:	tbz	w22, #0, c720 <mpc_norm@@Base+0x1f4>
    c6fc:	ldr	x8, [x20]
    c700:	sub	x1, x25, #0x2
    c704:	add	x0, sp, #0x10
    c708:	mov	w2, #0x3                   	// #3
    c70c:	add	x4, x8, x21
    c710:	mov	w3, #0x2                   	// #2
    c714:	bl	5450 <mpfr_can_round@plt>
    c718:	mov	w22, wzr
    c71c:	cbz	w0, c654 <mpc_norm@@Base+0x128>
    c720:	bl	54e0 <mpfr_overflow_p@plt>
    c724:	cbz	w0, c758 <mpc_norm@@Base+0x22c>
    c728:	mov	w1, #0x1                   	// #1
    c72c:	mov	x0, x20
    c730:	mov	x2, xzr
    c734:	mov	w3, wzr
    c738:	bl	5130 <mpfr_set_ui_2exp@plt>
    c73c:	bl	5200 <mpfr_get_emax@plt>
    c740:	mov	x2, x0
    c744:	mov	x0, x20
    c748:	mov	x1, x20
    c74c:	mov	w3, w19
    c750:	bl	4f40 <mpfr_mul_2ui@plt>
    c754:	b	c870 <mpc_norm@@Base+0x344>
    c758:	bl	52f0 <mpfr_underflow_p@plt>
    c75c:	cbz	w0, c7b0 <mpc_norm@@Base+0x284>
    c760:	bl	5060 <mpfr_get_emin@plt>
    c764:	ldur	x8, [x29, #-16]
    c768:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    c76c:	mov	x25, x0
    c770:	cmp	x8, x9
    c774:	b.ne	c828 <mpc_norm@@Base+0x2fc>  // b.any
    c778:	ldr	x10, [sp, #64]
    c77c:	cmp	x10, x9
    c780:	b.eq	c7c8 <mpc_norm@@Base+0x29c>  // b.none
    c784:	cmn	x10, #0x9
    c788:	b.lt	c7c8 <mpc_norm@@Base+0x29c>  // b.tstop
    c78c:	sub	x9, x10, x26, lsl #1
    c790:	cmp	x9, x25
    c794:	b.le	c7c8 <mpc_norm@@Base+0x29c>
    c798:	sub	x0, x29, #0x20
    c79c:	mov	w1, #0x1                   	// #1
    c7a0:	bl	4c80 <mpfr_set_prec@plt>
    c7a4:	sub	x2, x25, #0x1
    c7a8:	sub	x0, x29, #0x20
    c7ac:	b	c850 <mpc_norm@@Base+0x324>
    c7b0:	ldr	w3, [sp, #24]
    c7b4:	add	x1, sp, #0x10
    c7b8:	mov	x0, x20
    c7bc:	mov	w2, w19
    c7c0:	bl	51d0 <mpfr_set4@plt>
    c7c4:	b	c870 <mpc_norm@@Base+0x344>
    c7c8:	ldr	x9, [x24, #16]
    c7cc:	ldr	x10, [x24, #48]
    c7d0:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
    c7d4:	cmp	x8, x11
    c7d8:	neg	x9, x9
    c7dc:	neg	x10, x10
    c7e0:	lsr	x12, x10, #1
    c7e4:	and	x13, x9, #0x1
    c7e8:	and	x10, x10, #0x1
    c7ec:	add	x9, x12, x9, lsr #1
    c7f0:	add	x10, x10, x13
    c7f4:	add	x26, x9, x10, lsr #1
    c7f8:	lsl	x25, x26, #1
    c7fc:	sub	x0, x29, #0x20
    c800:	b.ne	c8c4 <mpc_norm@@Base+0x398>  // b.any
    c804:	mov	x1, x24
    c808:	mov	x2, x26
    c80c:	mov	w3, wzr
    c810:	bl	4f40 <mpfr_mul_2ui@plt>
    c814:	sub	x0, x29, #0x20
    c818:	sub	x1, x29, #0x20
    c81c:	mov	w2, wzr
    c820:	bl	5010 <mpfr_sqr@plt>
    c824:	b	c8d4 <mpc_norm@@Base+0x3a8>
    c828:	cmn	x8, #0x9
    c82c:	b.lt	c778 <mpc_norm@@Base+0x24c>  // b.tstop
    c830:	sub	x10, x8, x27, lsl #1
    c834:	cmp	x10, x25
    c838:	b.le	c778 <mpc_norm@@Base+0x24c>
    c83c:	add	x0, sp, #0x30
    c840:	mov	w1, #0x1                   	// #1
    c844:	bl	4c80 <mpfr_set_prec@plt>
    c848:	sub	x2, x25, #0x1
    c84c:	add	x0, sp, #0x30
    c850:	mov	w1, #0x1                   	// #1
    c854:	mov	w3, #0x1                   	// #1
    c858:	bl	5130 <mpfr_set_ui_2exp@plt>
    c85c:	sub	x1, x29, #0x20
    c860:	add	x2, sp, #0x30
    c864:	mov	x0, x20
    c868:	mov	w3, w19
    c86c:	bl	4e60 <mpfr_add@plt>
    c870:	mov	w19, w0
    c874:	ldp	w8, w20, [sp, #8]
    c878:	cbz	w8, c880 <mpc_norm@@Base+0x354>
    c87c:	bl	4990 <mpfr_set_underflow@plt>
    c880:	cbz	w20, c888 <mpc_norm@@Base+0x35c>
    c884:	bl	5490 <mpfr_set_overflow@plt>
    c888:	sub	x0, x29, #0x20
    c88c:	bl	4d60 <mpfr_clear@plt>
    c890:	add	x0, sp, #0x30
    c894:	bl	4d60 <mpfr_clear@plt>
    c898:	add	x0, sp, #0x10
    c89c:	bl	4d60 <mpfr_clear@plt>
    c8a0:	mov	w0, w19
    c8a4:	ldp	x20, x19, [sp, #192]
    c8a8:	ldp	x22, x21, [sp, #176]
    c8ac:	ldp	x24, x23, [sp, #160]
    c8b0:	ldp	x26, x25, [sp, #144]
    c8b4:	ldp	x28, x27, [sp, #128]
    c8b8:	ldp	x29, x30, [sp, #112]
    c8bc:	add	sp, sp, #0xd0
    c8c0:	ret
    c8c4:	sub	x1, x29, #0x20
    c8c8:	mov	x2, x25
    c8cc:	mov	w3, wzr
    c8d0:	bl	4f40 <mpfr_mul_2ui@plt>
    c8d4:	ldr	x8, [sp, #64]
    c8d8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    c8dc:	add	x0, sp, #0x30
    c8e0:	cmp	x8, x9
    c8e4:	b.ne	c90c <mpc_norm@@Base+0x3e0>  // b.any
    c8e8:	mov	x1, x23
    c8ec:	mov	x2, x26
    c8f0:	mov	w3, wzr
    c8f4:	bl	4f40 <mpfr_mul_2ui@plt>
    c8f8:	add	x0, sp, #0x30
    c8fc:	add	x1, sp, #0x30
    c900:	mov	w2, wzr
    c904:	bl	5010 <mpfr_sqr@plt>
    c908:	b	c91c <mpc_norm@@Base+0x3f0>
    c90c:	add	x1, sp, #0x30
    c910:	mov	x2, x25
    c914:	mov	w3, wzr
    c918:	bl	4f40 <mpfr_mul_2ui@plt>
    c91c:	sub	x1, x29, #0x20
    c920:	add	x2, sp, #0x30
    c924:	mov	x0, x20
    c928:	mov	w3, w19
    c92c:	bl	4e60 <mpfr_add@plt>
    c930:	mov	w23, w0
    c934:	bl	4e20 <mpfr_clear_underflow@plt>
    c938:	mov	x0, x20
    c93c:	mov	x1, x20
    c940:	mov	x2, x25
    c944:	mov	w3, w19
    c948:	bl	5320 <mpfr_div_2ui@plt>
    c94c:	mov	w19, w0
    c950:	bl	52f0 <mpfr_underflow_p@plt>
    c954:	cmp	w0, #0x0
    c958:	csel	w19, w23, w19, eq  // eq = none
    c95c:	ldp	w8, w20, [sp, #8]
    c960:	cbnz	w8, c87c <mpc_norm@@Base+0x350>
    c964:	b	c880 <mpc_norm@@Base+0x354>

000000000000c968 <mpc_out_str@@Base>:
    c968:	stp	x29, x30, [sp, #-64]!
    c96c:	stp	x24, x23, [sp, #16]
    c970:	stp	x22, x21, [sp, #32]
    c974:	stp	x20, x19, [sp, #48]
    c978:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    c97c:	ldr	x8, [x8, #4024]
    c980:	cmp	x0, #0x0
    c984:	mov	w22, w1
    c988:	mov	x29, sp
    c98c:	ldr	x8, [x8]
    c990:	mov	w19, w4
    c994:	mov	x20, x3
    c998:	mov	x21, x2
    c99c:	csel	x23, x8, x0, eq  // eq = none
    c9a0:	mov	w0, #0x28                  	// #40
    c9a4:	mov	x1, x23
    c9a8:	bl	4ba0 <fputc@plt>
    c9ac:	and	w19, w19, #0xf
    c9b0:	mov	x0, x23
    c9b4:	mov	w1, w22
    c9b8:	mov	x2, x21
    c9bc:	mov	x3, x20
    c9c0:	mov	w4, w19
    c9c4:	bl	5190 <__gmpfr_out_str@plt>
    c9c8:	mov	x24, x0
    c9cc:	mov	w0, #0x20                  	// #32
    c9d0:	mov	x1, x23
    c9d4:	bl	4ba0 <fputc@plt>
    c9d8:	add	x3, x20, #0x20
    c9dc:	mov	x0, x23
    c9e0:	mov	w1, w22
    c9e4:	mov	x2, x21
    c9e8:	mov	w4, w19
    c9ec:	bl	5190 <__gmpfr_out_str@plt>
    c9f0:	add	x8, x24, x0
    c9f4:	mov	w0, #0x29                  	// #41
    c9f8:	mov	x1, x23
    c9fc:	add	x19, x8, #0x3
    ca00:	bl	4ba0 <fputc@plt>
    ca04:	mov	x0, x19
    ca08:	ldp	x20, x19, [sp, #48]
    ca0c:	ldp	x22, x21, [sp, #32]
    ca10:	ldp	x24, x23, [sp, #16]
    ca14:	ldp	x29, x30, [sp], #64
    ca18:	ret

000000000000ca1c <mpc_pow@@Base>:
    ca1c:	stp	x29, x30, [sp, #-96]!
    ca20:	stp	x28, x27, [sp, #16]
    ca24:	stp	x26, x25, [sp, #32]
    ca28:	stp	x24, x23, [sp, #48]
    ca2c:	stp	x22, x21, [sp, #64]
    ca30:	stp	x20, x19, [sp, #80]
    ca34:	mov	x29, sp
    ca38:	sub	sp, sp, #0x1c0
    ca3c:	mov	w25, w3
    ca40:	mov	x22, x2
    ca44:	mov	x24, x1
    ca48:	mov	x21, x0
    ca4c:	bl	52f0 <mpfr_underflow_p@plt>
    ca50:	mov	w19, w0
    ca54:	bl	54e0 <mpfr_overflow_p@plt>
    ca58:	ldr	x23, [x22, #48]
    ca5c:	ldr	x26, [x24, #48]
    ca60:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    ca64:	mov	w20, w0
    ca68:	cmp	x23, x8
    ca6c:	b.ne	cab0 <mpc_pow@@Base+0x94>  // b.any
    ca70:	ldr	x9, [x22, #16]
    ca74:	cmp	x9, x8
    ca78:	b.ne	cab0 <mpc_pow@@Base+0x94>  // b.any
    ca7c:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    ca80:	cmp	x26, x8
    ca84:	b.ne	cb50 <mpc_pow@@Base+0x134>  // b.any
    ca88:	ldr	x9, [x24, #16]
    ca8c:	cmp	x9, x8
    ca90:	b.ne	cb50 <mpc_pow@@Base+0x134>  // b.any
    ca94:	mov	w1, #0x1                   	// #1
    ca98:	mov	x0, x21
    ca9c:	mov	x2, xzr
    caa0:	mov	w3, wzr
    caa4:	bl	5040 <mpc_set_ui_ui@plt>
    caa8:	mov	w28, wzr
    caac:	b	ccbc <mpc_pow@@Base+0x2a0>
    cab0:	mov	x0, x24
    cab4:	bl	54d0 <mpfr_number_p@plt>
    cab8:	cbz	w0, cb00 <mpc_pow@@Base+0xe4>
    cabc:	add	x27, x24, #0x20
    cac0:	mov	x0, x27
    cac4:	bl	54d0 <mpfr_number_p@plt>
    cac8:	cbz	w0, cb00 <mpc_pow@@Base+0xe4>
    cacc:	mov	x0, x22
    cad0:	bl	54d0 <mpfr_number_p@plt>
    cad4:	cbz	w0, cb00 <mpc_pow@@Base+0xe4>
    cad8:	add	x0, x22, #0x20
    cadc:	bl	54d0 <mpfr_number_p@plt>
    cae0:	cbz	w0, cb00 <mpc_pow@@Base+0xe4>
    cae4:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    cae8:	cmp	x26, x8
    caec:	str	x23, [sp, #120]
    caf0:	b.ne	cbac <mpc_pow@@Base+0x190>  // b.any
    caf4:	ldr	x9, [x24, #16]
    caf8:	cmp	x9, x8
    cafc:	b.ne	cce0 <mpc_pow@@Base+0x2c4>  // b.any
    cb00:	add	x0, sp, #0xb8
    cb04:	mov	w1, #0x2                   	// #2
    cb08:	bl	4cf0 <mpc_init2@plt>
    cb0c:	add	x0, sp, #0xb8
    cb10:	mov	x1, x24
    cb14:	mov	w2, wzr
    cb18:	bl	4db0 <mpc_log@plt>
    cb1c:	add	x0, sp, #0xb8
    cb20:	add	x1, sp, #0xb8
    cb24:	mov	x2, x22
    cb28:	mov	w3, wzr
    cb2c:	bl	4ed0 <mpc_mul@plt>
    cb30:	add	x1, sp, #0xb8
    cb34:	mov	x0, x21
    cb38:	mov	w2, w25
    cb3c:	bl	52a0 <mpc_exp@plt>
    cb40:	mov	w28, w0
    cb44:	add	x0, sp, #0xb8
    cb48:	bl	4a10 <mpc_clear@plt>
    cb4c:	b	ccbc <mpc_pow@@Base+0x2a0>
    cb50:	sub	x0, x29, #0xc8
    cb54:	bl	4aa0 <mpfr_init@plt>
    cb58:	sub	x0, x29, #0xc8
    cb5c:	mov	x1, x24
    cb60:	mov	w2, wzr
    cb64:	bl	4ea0 <mpc_norm@plt>
    cb68:	mov	w20, w0
    cb6c:	sub	x0, x29, #0xc8
    cb70:	mov	w1, #0x1                   	// #1
    cb74:	mov	x2, xzr
    cb78:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    cb7c:	cmp	w0, #0x0
    cb80:	ccmp	w20, #0x0, #0x4, eq  // eq = none
    cb84:	csneg	w8, w0, w20, eq  // eq = none
    cb88:	tbnz	w8, #31, cb9c <mpc_pow@@Base+0x180>
    cb8c:	cbz	w8, cc68 <mpc_pow@@Base+0x24c>
    cb90:	ldr	w8, [x22, #40]
    cb94:	lsr	w19, w8, #31
    cb98:	b	cc7c <mpc_pow@@Base+0x260>
    cb9c:	ldr	w8, [x22, #40]
    cba0:	tbnz	w8, #31, cc78 <mpc_pow@@Base+0x25c>
    cba4:	mov	w19, #0x1                   	// #1
    cba8:	b	cc7c <mpc_pow@@Base+0x260>
    cbac:	mov	w2, #0x1                   	// #1
    cbb0:	mov	x0, x24
    cbb4:	mov	x1, xzr
    cbb8:	bl	5310 <mpc_cmp_si_si@plt>
    cbbc:	cbz	w0, cbec <mpc_pow@@Base+0x1d0>
    cbc0:	mov	x2, #0xffffffffffffffff    	// #-1
    cbc4:	mov	x0, x24
    cbc8:	mov	x1, xzr
    cbcc:	bl	5310 <mpc_cmp_si_si@plt>
    cbd0:	cbz	w0, cbec <mpc_pow@@Base+0x1d0>
    cbd4:	mov	x0, x24
    cbd8:	bl	51f0 <mpfr_sgn@plt>
    cbdc:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    cbe0:	cmp	x23, x8
    cbe4:	b.ne	cd78 <mpc_pow@@Base+0x35c>  // b.any
    cbe8:	cbnz	w0, cd78 <mpc_pow@@Base+0x35c>
    cbec:	mov	x0, x22
    cbf0:	bl	4e30 <mpfr_integer_p@plt>
    cbf4:	cbz	w0, cd78 <mpc_pow@@Base+0x35c>
    cbf8:	ldr	x10, [x22, #16]
    cbfc:	cmp	x10, #0x1
    cc00:	b.lt	cf6c <mpc_pow@@Base+0x550>  // b.tstop
    cc04:	ldr	x8, [x22]
    cc08:	cmp	x10, x8
    cc0c:	b.gt	cf6c <mpc_pow@@Base+0x550>
    cc10:	adrp	x9, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    cc14:	ldr	x9, [x9, #4056]
    cc18:	sub	x8, x8, #0x1
    cc1c:	neg	x12, x10
    cc20:	ldrsw	x11, [x9]
    cc24:	ldr	x9, [x22, #24]
    cc28:	sdiv	x8, x8, x11
    cc2c:	add	x8, x8, #0x1
    cc30:	madd	x8, x8, x11, x12
    cc34:	sdiv	x8, x8, x11
    cc38:	ldr	x12, [x9, x8, lsl #3]
    cc3c:	sdiv	x13, x10, x11
    cc40:	msub	x10, x13, x11, x10
    cc44:	cbz	x10, cf1c <mpc_pow@@Base+0x500>
    cc48:	sub	x10, x10, #0x1
    cc4c:	sub	w11, w11, #0x1
    cc50:	mov	w13, #0x1                   	// #1
    cc54:	lsl	x10, x12, x10
    cc58:	lsl	x11, x13, x11
    cc5c:	cmp	x10, x11
    cc60:	b.eq	cf20 <mpc_pow@@Base+0x504>  // b.none
    cc64:	b	cf70 <mpc_pow@@Base+0x554>
    cc68:	ldr	w8, [x24, #40]
    cc6c:	ldr	w9, [x22, #8]
    cc70:	eor	w8, w9, w8
    cc74:	tbnz	w8, #31, cba4 <mpc_pow@@Base+0x188>
    cc78:	mov	w19, wzr
    cc7c:	mov	w1, #0x1                   	// #1
    cc80:	mov	x0, x21
    cc84:	mov	x2, xzr
    cc88:	mov	w3, w25
    cc8c:	bl	5040 <mpc_set_ui_ui@plt>
    cc90:	and	w8, w25, #0xfffffff0
    cc94:	cmp	w8, #0x30
    cc98:	mov	w28, w0
    cc9c:	b.eq	cca4 <mpc_pow@@Base+0x288>  // b.none
    cca0:	cbz	w19, ccb4 <mpc_pow@@Base+0x298>
    cca4:	mov	x0, x21
    cca8:	mov	x1, x21
    ccac:	mov	w2, wzr
    ccb0:	bl	4f60 <mpc_conj@plt>
    ccb4:	sub	x0, x29, #0xc8
    ccb8:	bl	4d60 <mpfr_clear@plt>
    ccbc:	mov	w0, w28
    ccc0:	add	sp, sp, #0x1c0
    ccc4:	ldp	x20, x19, [sp, #80]
    ccc8:	ldp	x22, x21, [sp, #64]
    cccc:	ldp	x24, x23, [sp, #48]
    ccd0:	ldp	x26, x25, [sp, #32]
    ccd4:	ldp	x28, x27, [sp, #16]
    ccd8:	ldp	x29, x30, [sp], #96
    ccdc:	ret
    cce0:	mov	w1, #0x1                   	// #1
    cce4:	mov	x0, x24
    cce8:	mov	x2, xzr
    ccec:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    ccf0:	cbz	w0, ce1c <mpc_pow@@Base+0x400>
    ccf4:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    ccf8:	cmp	x23, x8
    ccfc:	b.ne	ce60 <mpc_pow@@Base+0x444>  // b.any
    cd00:	mov	x0, x22
    cd04:	bl	4e30 <mpfr_integer_p@plt>
    cd08:	cbnz	w0, cd18 <mpc_pow@@Base+0x2fc>
    cd0c:	mov	x0, x24
    cd10:	bl	51f0 <mpfr_sgn@plt>
    cd14:	tbnz	w0, #31, ce60 <mpc_pow@@Base+0x444>
    cd18:	ldr	w19, [x22, #8]
    cd1c:	ldr	w20, [x24, #40]
    cd20:	and	w3, w25, #0xf
    cd24:	mov	x0, x21
    cd28:	mov	x1, x24
    cd2c:	mov	x2, x22
    cd30:	bl	4b90 <mpfr_pow@plt>
    cd34:	cmp	w0, #0x0
    cd38:	mov	w8, #0x2                   	// #2
    cd3c:	asr	w2, w25, #4
    cd40:	cset	w11, ne  // ne = any
    cd44:	mov	w9, #0x1                   	// #1
    cd48:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    cd4c:	csel	w28, w8, w11, lt  // lt = tstop
    cd50:	cmp	w2, #0x3
    cd54:	str	w9, [x21, #40]
    cd58:	str	x10, [x21, #48]
    cd5c:	b.eq	cd68 <mpc_pow@@Base+0x34c>  // b.none
    cd60:	eor	w8, w20, w19
    cd64:	tbz	w8, #31, ccbc <mpc_pow@@Base+0x2a0>
    cd68:	add	x0, x21, #0x20
    cd6c:	mov	x1, x0
    cd70:	bl	4b80 <mpfr_neg@plt>
    cd74:	b	ccbc <mpc_pow@@Base+0x2a0>
    cd78:	mov	x0, x24
    cd7c:	mov	x1, x27
    cd80:	bl	53b0 <mpfr_cmpabs@plt>
    cd84:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    cd88:	cmp	x23, x8
    cd8c:	mov	w8, wzr
    cd90:	str	wzr, [sp, #140]
    cd94:	b.ne	ce7c <mpc_pow@@Base+0x460>  // b.any
    cd98:	str	x8, [sp, #144]
    cd9c:	cbnz	w0, cf7c <mpc_pow@@Base+0x560>
    cda0:	mov	x0, x22
    cda4:	bl	4e30 <mpfr_integer_p@plt>
    cda8:	cbz	w0, db10 <mpc_pow@@Base+0x10f4>
    cdac:	ldr	x9, [x22, #16]
    cdb0:	subs	x8, x9, #0x1
    cdb4:	b.lt	cf6c <mpc_pow@@Base+0x550>  // b.tstop
    cdb8:	ldr	x10, [x22]
    cdbc:	cmp	x9, x10
    cdc0:	b.gt	cf58 <mpc_pow@@Base+0x53c>
    cdc4:	adrp	x11, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    cdc8:	ldr	x11, [x11, #4056]
    cdcc:	sub	x10, x10, #0x1
    cdd0:	neg	x13, x9
    cdd4:	ldrsw	x12, [x11]
    cdd8:	ldr	x11, [x22, #24]
    cddc:	sdiv	x10, x10, x12
    cde0:	add	x10, x10, #0x1
    cde4:	madd	x10, x10, x12, x13
    cde8:	sdiv	x10, x10, x12
    cdec:	ldr	x13, [x11, x10, lsl #3]
    cdf0:	sdiv	x14, x9, x12
    cdf4:	msub	x14, x14, x12, x9
    cdf8:	cbz	x14, cf3c <mpc_pow@@Base+0x520>
    cdfc:	sub	x14, x14, #0x1
    ce00:	sub	w12, w12, #0x1
    ce04:	mov	w15, #0x1                   	// #1
    ce08:	lsl	x13, x13, x14
    ce0c:	lsl	x12, x15, x12
    ce10:	cmp	x13, x12
    ce14:	b.eq	cf40 <mpc_pow@@Base+0x524>  // b.none
    ce18:	b	cf58 <mpc_pow@@Base+0x53c>
    ce1c:	ldr	w19, [x22, #8]
    ce20:	ldr	w20, [x24, #40]
    ce24:	mov	w1, #0x1                   	// #1
    ce28:	mov	x0, x21
    ce2c:	mov	w2, w25
    ce30:	bl	4ce0 <mpc_set_ui@plt>
    ce34:	and	w8, w25, #0xfffffff0
    ce38:	cmp	w8, #0x30
    ce3c:	mov	w28, w0
    ce40:	b.eq	ce4c <mpc_pow@@Base+0x430>  // b.none
    ce44:	eor	w8, w20, w19
    ce48:	tbz	w8, #31, ccbc <mpc_pow@@Base+0x2a0>
    ce4c:	mov	x0, x21
    ce50:	mov	x1, x21
    ce54:	mov	w2, wzr
    ce58:	bl	4f60 <mpc_conj@plt>
    ce5c:	b	ccbc <mpc_pow@@Base+0x2a0>
    ce60:	mov	x1, #0xffffffffffffffff    	// #-1
    ce64:	mov	x0, x24
    ce68:	mov	x2, xzr
    ce6c:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    ce70:	cbz	w0, ce84 <mpc_pow@@Base+0x468>
    ce74:	str	xzr, [sp, #144]
    ce78:	b	ce98 <mpc_pow@@Base+0x47c>
    ce7c:	str	x8, [sp, #144]
    ce80:	b	cf7c <mpc_pow@@Base+0x560>
    ce84:	mov	x0, x22
    ce88:	bl	4e30 <mpfr_integer_p@plt>
    ce8c:	cmp	w0, #0x0
    ce90:	cset	w8, ne  // ne = any
    ce94:	str	x8, [sp, #144]
    ce98:	mov	x0, x24
    ce9c:	bl	51f0 <mpfr_sgn@plt>
    cea0:	tbnz	w0, #31, ceac <mpc_pow@@Base+0x490>
    cea4:	str	wzr, [sp, #140]
    cea8:	b	cf7c <mpc_pow@@Base+0x560>
    ceac:	ldr	x8, [x22, #16]
    ceb0:	tbnz	x8, #63, cea4 <mpc_pow@@Base+0x488>
    ceb4:	ldr	x9, [x22]
    ceb8:	cmp	x8, x9
    cebc:	b.ge	cea4 <mpc_pow@@Base+0x488>  // b.tcont
    cec0:	adrp	x10, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    cec4:	ldr	x10, [x10, #4056]
    cec8:	add	x12, x8, #0x1
    cecc:	sub	x8, x9, #0x1
    ced0:	ldr	x9, [x22, #24]
    ced4:	ldrsw	x10, [x10]
    ced8:	neg	x11, x12
    cedc:	sdiv	x8, x8, x10
    cee0:	add	x8, x8, #0x1
    cee4:	madd	x8, x8, x10, x11
    cee8:	sdiv	x8, x8, x10
    ceec:	ldr	x11, [x9, x8, lsl #3]
    cef0:	sdiv	x13, x12, x10
    cef4:	msub	x12, x13, x10, x12
    cef8:	cbz	x12, dd10 <mpc_pow@@Base+0x12f4>
    cefc:	sub	x12, x12, #0x1
    cf00:	sub	w10, w10, #0x1
    cf04:	mov	w13, #0x1                   	// #1
    cf08:	lsl	x11, x11, x12
    cf0c:	lsl	x10, x13, x10
    cf10:	cmp	x11, x10
    cf14:	b.ne	cea4 <mpc_pow@@Base+0x488>  // b.any
    cf18:	b	dd14 <mpc_pow@@Base+0x12f8>
    cf1c:	tbz	w12, #0, cf6c <mpc_pow@@Base+0x550>
    cf20:	sub	x9, x9, #0x8
    cf24:	subs	x10, x8, #0x1
    cf28:	b.lt	dd08 <mpc_pow@@Base+0x12ec>  // b.tstop
    cf2c:	ldr	x11, [x9, x8, lsl #3]
    cf30:	mov	x8, x10
    cf34:	cbz	x11, cf24 <mpc_pow@@Base+0x508>
    cf38:	b	cf6c <mpc_pow@@Base+0x550>
    cf3c:	tbz	w13, #0, cf58 <mpc_pow@@Base+0x53c>
    cf40:	sub	x11, x11, #0x8
    cf44:	subs	x12, x10, #0x1
    cf48:	b.lt	db10 <mpc_pow@@Base+0x10f4>  // b.tstop
    cf4c:	ldr	x13, [x11, x10, lsl #3]
    cf50:	mov	x10, x12
    cf54:	cbz	x13, cf44 <mpc_pow@@Base+0x528>
    cf58:	cmp	x9, #0x2
    cf5c:	b.lt	cf6c <mpc_pow@@Base+0x550>  // b.tstop
    cf60:	ldr	x9, [x22]
    cf64:	cmp	x8, x9
    cf68:	b.le	dc90 <mpc_pow@@Base+0x1274>
    cf6c:	mov	w13, #0x1                   	// #1
    cf70:	eor	w8, w13, #0x1
    cf74:	str	x13, [sp, #144]
    cf78:	str	w8, [sp, #140]
    cf7c:	str	x27, [sp, #56]
    cf80:	str	x26, [sp, #8]
    cf84:	stp	w20, w19, [sp, #48]
    cf88:	mov	x26, x21
    cf8c:	ldr	x19, [x21]
    cf90:	ldr	x20, [x26, #32]!
    cf94:	mov	w9, #0x34                  	// #52
    cf98:	add	x0, sp, #0xb8
    cf9c:	mov	x23, x21
    cfa0:	cmp	x19, x20
    cfa4:	csel	x8, x19, x20, gt
    cfa8:	cmp	x8, #0x34
    cfac:	csel	x8, x8, x9, gt
    cfb0:	add	x27, x8, #0xc
    cfb4:	mov	x1, x27
    cfb8:	add	x21, sp, #0xb8
    cfbc:	bl	4cf0 <mpc_init2@plt>
    cfc0:	sub	x0, x29, #0xc8
    cfc4:	mov	x1, x27
    cfc8:	bl	4cf0 <mpc_init2@plt>
    cfcc:	ldr	x11, [x24, #16]
    cfd0:	and	w8, w25, #0xf
    cfd4:	str	w8, [sp, #28]
    cfd8:	ldr	x8, [x23]
    cfdc:	ldr	x9, [x26]
    cfe0:	tst	w25, #0xf
    cfe4:	asr	w10, w25, #4
    cfe8:	str	x11, [sp, #16]
    cfec:	add	x11, x21, #0x20
    cff0:	str	x11, [sp, #128]
    cff4:	cinc	x11, x19, eq  // eq = none
    cff8:	cmp	w10, #0x0
    cffc:	str	w10, [sp, #44]
    d000:	cinc	x10, x20, eq  // eq = none
    d004:	cmp	x8, x9
    d008:	csel	x8, x8, x9, gt
    d00c:	cmp	x23, x22
    d010:	stp	x23, x11, [sp, #72]
    d014:	str	x8, [sp, #176]
    d018:	cset	w8, eq  // eq = none
    d01c:	str	x26, [sp, #32]
    d020:	cmp	x26, x22
    d024:	ldr	x23, [sp, #144]
    d028:	ldr	w26, [sp, #140]
    d02c:	cset	w9, eq  // eq = none
    d030:	mov	w28, #0xfffffffe            	// #-2
    d034:	orr	w8, w8, w9
    d038:	str	w25, [sp, #4]
    d03c:	str	x10, [sp, #96]
    d040:	str	w8, [sp, #68]
    d044:	b	d064 <mpc_pow@@Base+0x648>
    d048:	add	x27, x27, #0x40
    d04c:	sub	x0, x29, #0xc8
    d050:	mov	x1, x27
    d054:	bl	4c00 <mpc_set_prec@plt>
    d058:	add	x0, sp, #0xb8
    d05c:	mov	x1, x27
    d060:	bl	4c00 <mpc_set_prec@plt>
    d064:	sub	x0, x29, #0xc8
    d068:	mov	x1, x24
    d06c:	mov	w2, wzr
    d070:	bl	4db0 <mpc_log@plt>
    d074:	sub	x0, x29, #0xc8
    d078:	sub	x1, x29, #0xc8
    d07c:	mov	x2, x22
    d080:	mov	w3, wzr
    d084:	bl	4ed0 <mpc_mul@plt>
    d088:	ldur	x8, [x29, #-184]
    d08c:	ldur	x9, [x29, #-152]
    d090:	bic	x8, x8, x8, asr #63
    d094:	cmp	x9, x8
    d098:	csel	x25, x9, x8, gt
    d09c:	subs	x21, x27, x25
    d0a0:	b.le	d048 <mpc_pow@@Base+0x62c>
    d0a4:	bl	4a50 <mpfr_clear_overflow@plt>
    d0a8:	bl	4e20 <mpfr_clear_underflow@plt>
    d0ac:	add	x0, sp, #0xb8
    d0b0:	sub	x1, x29, #0xc8
    d0b4:	mov	w2, wzr
    d0b8:	bl	52a0 <mpc_exp@plt>
    d0bc:	mov	w20, w0
    d0c0:	bl	52f0 <mpfr_underflow_p@plt>
    d0c4:	cbnz	w0, d9a0 <mpc_pow@@Base+0xf84>
    d0c8:	bl	54e0 <mpfr_overflow_p@plt>
    d0cc:	cbnz	w0, d9a0 <mpc_pow@@Base+0xf84>
    d0d0:	ldr	x8, [sp, #200]
    d0d4:	ldr	x9, [sp, #232]
    d0d8:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    d0dc:	cmp	x8, x10
    d0e0:	csel	x19, x9, x8, eq  // eq = none
    d0e4:	cmp	x9, x10
    d0e8:	csel	x8, x19, x9, eq  // eq = none
    d0ec:	sub	x9, x8, x19
    d0f0:	stp	x9, x8, [sp, #160]
    d0f4:	subs	x8, x19, x8
    d0f8:	str	x8, [sp, #152]
    d0fc:	csel	x20, x8, xzr, gt
    d100:	csel	x8, xzr, x9, gt
    d104:	tbnz	w26, #0, d138 <mpc_pow@@Base+0x71c>
    d108:	add	x9, x25, x8
    d10c:	add	x9, x9, #0x3
    d110:	cmp	x27, x9
    d114:	b.le	d170 <mpc_pow@@Base+0x754>
    d118:	ldr	x4, [sp, #80]
    d11c:	sub	x8, x21, x8
    d120:	sub	x1, x8, #0x3
    d124:	add	x0, sp, #0xb8
    d128:	mov	w3, #0x1                   	// #1
    d12c:	mov	w2, wzr
    d130:	bl	5450 <mpfr_can_round@plt>
    d134:	cbz	w0, d170 <mpc_pow@@Base+0x754>
    d138:	cbnz	w23, da44 <mpc_pow@@Base+0x1028>
    d13c:	add	x8, x25, x20
    d140:	add	x8, x8, #0x3
    d144:	cmp	x27, x8
    d148:	b.le	d16c <mpc_pow@@Base+0x750>
    d14c:	ldr	x0, [sp, #128]
    d150:	ldr	x4, [sp, #96]
    d154:	sub	x8, x21, x20
    d158:	sub	x1, x8, #0x3
    d15c:	mov	w3, #0x1                   	// #1
    d160:	mov	w2, wzr
    d164:	bl	5450 <mpfr_can_round@plt>
    d168:	cbnz	w0, daa8 <mpc_pow@@Base+0x108c>
    d16c:	tbnz	w26, #0, d180 <mpc_pow@@Base+0x764>
    d170:	add	x0, sp, #0xb8
    d174:	bl	54d0 <mpfr_number_p@plt>
    d178:	cbz	w0, dd5c <mpc_pow@@Base+0x1340>
    d17c:	cbnz	w23, d18c <mpc_pow@@Base+0x770>
    d180:	ldr	x0, [sp, #128]
    d184:	bl	54d0 <mpfr_number_p@plt>
    d188:	cbz	w0, dd8c <mpc_pow@@Base+0x1370>
    d18c:	cmn	w28, #0x2
    d190:	b.ne	d1ec <mpc_pow@@Base+0x7d0>  // b.any
    d194:	ldr	x8, [sp, #120]
    d198:	mov	x25, #0x8000000000000001    	// #-9223372036854775807
    d19c:	cmp	x8, x25
    d1a0:	b.ne	d1fc <mpc_pow@@Base+0x7e0>  // b.any
    d1a4:	ldr	w8, [x24, #8]
    d1a8:	ldr	x20, [x24, #16]
    d1ac:	str	w8, [sp, #92]
    d1b0:	ldr	w8, [x24, #40]
    d1b4:	str	w8, [sp, #88]
    d1b8:	ldr	w8, [sp, #68]
    d1bc:	cbz	w8, d204 <mpc_pow@@Base+0x7e8>
    d1c0:	ldr	x1, [x22]
    d1c4:	sub	x0, x29, #0x88
    d1c8:	bl	5440 <mpfr_init2@plt>
    d1cc:	ldr	w3, [x22, #8]
    d1d0:	sub	x0, x29, #0x88
    d1d4:	mov	x1, x22
    d1d8:	mov	w2, wzr
    d1dc:	bl	51d0 <mpfr_set4@plt>
    d1e0:	mov	w8, #0x1                   	// #1
    d1e4:	str	w8, [sp, #108]
    d1e8:	b	d208 <mpc_pow@@Base+0x7ec>
    d1ec:	cmp	x27, #0x0
    d1f0:	cinc	x8, x27, lt  // lt = tstop
    d1f4:	add	x27, x27, x8, asr #1
    d1f8:	b	d04c <mpc_pow@@Base+0x630>
    d1fc:	mov	w28, #0xfffffffe            	// #-2
    d200:	b	d984 <mpc_pow@@Base+0xf68>
    d204:	str	wzr, [sp, #108]
    d208:	ldr	x23, [sp, #176]
    d20c:	sub	x0, x29, #0x18
    d210:	bl	54a0 <__gmpz_init@plt>
    d214:	sub	x0, x29, #0x28
    d218:	bl	54a0 <__gmpz_init@plt>
    d21c:	sub	x0, x29, #0x38
    d220:	bl	54a0 <__gmpz_init@plt>
    d224:	sub	x0, x29, #0x48
    d228:	bl	54a0 <__gmpz_init@plt>
    d22c:	sub	x0, x29, #0x58
    d230:	bl	54a0 <__gmpz_init@plt>
    d234:	sub	x0, x29, #0x68
    d238:	bl	54a0 <__gmpz_init@plt>
    d23c:	sub	x0, x29, #0x18
    d240:	mov	x1, x22
    d244:	bl	5470 <mpfr_get_z_2exp@plt>
    d248:	mov	x28, x0
    d24c:	sub	x0, x29, #0x18
    d250:	mov	x1, xzr
    d254:	bl	49f0 <__gmpz_scan1@plt>
    d258:	mov	x21, x0
    d25c:	sub	x0, x29, #0x18
    d260:	sub	x1, x29, #0x18
    d264:	mov	x2, x21
    d268:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d26c:	cmp	x20, x25
    d270:	sub	x0, x29, #0x48
    d274:	str	x20, [sp, #112]
    d278:	b.ne	d28c <mpc_pow@@Base+0x870>  // b.any
    d27c:	mov	x1, xzr
    d280:	bl	4b10 <__gmpz_set_ui@plt>
    d284:	mov	x26, xzr
    d288:	b	d298 <mpc_pow@@Base+0x87c>
    d28c:	mov	x1, x24
    d290:	bl	5470 <mpfr_get_z_2exp@plt>
    d294:	mov	x26, x0
    d298:	ldr	x8, [x24, #48]
    d29c:	lsl	x23, x23, #1
    d2a0:	sub	x0, x29, #0x58
    d2a4:	str	x23, [sp, #176]
    d2a8:	cmp	x8, x25
    d2ac:	b.ne	d304 <mpc_pow@@Base+0x8e8>  // b.any
    d2b0:	mov	x1, xzr
    d2b4:	bl	4b10 <__gmpz_set_ui@plt>
    d2b8:	ldur	w8, [x29, #-68]
    d2bc:	add	x20, x21, x28
    d2c0:	cbz	w8, d34c <mpc_pow@@Base+0x930>
    d2c4:	ldur	w25, [x29, #-84]
    d2c8:	sub	x0, x29, #0x48
    d2cc:	mov	x1, xzr
    d2d0:	bl	49f0 <__gmpz_scan1@plt>
    d2d4:	mov	x21, x0
    d2d8:	cbz	w25, d39c <mpc_pow@@Base+0x980>
    d2dc:	sub	x0, x29, #0x58
    d2e0:	mov	x1, xzr
    d2e4:	bl	49f0 <__gmpz_scan1@plt>
    d2e8:	cmp	x0, x21
    d2ec:	csel	x21, x0, x21, cc  // cc = lo, ul, last
    d2f0:	sub	x0, x29, #0x48
    d2f4:	sub	x1, x29, #0x48
    d2f8:	mov	x2, x21
    d2fc:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d300:	b	d35c <mpc_pow@@Base+0x940>
    d304:	ldr	x1, [sp, #56]
    d308:	bl	5470 <mpfr_get_z_2exp@plt>
    d30c:	ldr	x8, [sp, #112]
    d310:	mov	x20, x0
    d314:	cmp	x8, x25
    d318:	csel	x26, x0, x26, eq  // eq = none
    d31c:	subs	x2, x26, x0
    d320:	b.ge	d368 <mpc_pow@@Base+0x94c>  // b.tcont
    d324:	sub	x2, x20, x26
    d328:	sub	x0, x29, #0x58
    d32c:	sub	x1, x29, #0x58
    d330:	bl	4e90 <__gmpz_mul_2exp@plt>
    d334:	sub	x0, x29, #0x58
    d338:	mov	w1, #0x2                   	// #2
    d33c:	bl	54b0 <__gmpz_sizeinbase@plt>
    d340:	cmp	x0, x23
    d344:	b.le	d2b8 <mpc_pow@@Base+0x89c>
    d348:	b	d394 <mpc_pow@@Base+0x978>
    d34c:	sub	x0, x29, #0x58
    d350:	mov	x1, xzr
    d354:	bl	49f0 <__gmpz_scan1@plt>
    d358:	mov	x21, x0
    d35c:	sub	x0, x29, #0x58
    d360:	sub	x1, x29, #0x58
    d364:	b	d3a4 <mpc_pow@@Base+0x988>
    d368:	cmp	x20, x26
    d36c:	b.ge	d2b8 <mpc_pow@@Base+0x89c>  // b.tcont
    d370:	sub	x0, x29, #0x48
    d374:	sub	x1, x29, #0x48
    d378:	bl	4e90 <__gmpz_mul_2exp@plt>
    d37c:	sub	x0, x29, #0x48
    d380:	mov	w1, #0x2                   	// #2
    d384:	bl	54b0 <__gmpz_sizeinbase@plt>
    d388:	cmp	x0, x23
    d38c:	mov	x26, x20
    d390:	b.le	d2b8 <mpc_pow@@Base+0x89c>
    d394:	mov	w28, #0xfffffffe            	// #-2
    d398:	b	d6b0 <mpc_pow@@Base+0xc94>
    d39c:	sub	x0, x29, #0x48
    d3a0:	sub	x1, x29, #0x48
    d3a4:	mov	x2, x21
    d3a8:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d3ac:	add	x21, x21, x26
    d3b0:	tbnz	x20, #63, d5d0 <mpc_pow@@Base+0xbb4>
    d3b4:	mov	x26, x20
    d3b8:	mov	x25, #0x8000000000000001    	// #-9223372036854775807
    d3bc:	ldur	w8, [x29, #-20]
    d3c0:	tbz	w8, #31, d42c <mpc_pow@@Base+0xa10>
    d3c4:	sub	x0, x29, #0x28
    d3c8:	sub	x1, x29, #0x48
    d3cc:	sub	x2, x29, #0x48
    d3d0:	bl	4d40 <__gmpz_mul@plt>
    d3d4:	sub	x0, x29, #0x28
    d3d8:	sub	x1, x29, #0x58
    d3dc:	sub	x2, x29, #0x58
    d3e0:	bl	4f10 <__gmpz_addmul@plt>
    d3e4:	sub	x0, x29, #0x28
    d3e8:	mov	x1, xzr
    d3ec:	bl	49f0 <__gmpz_scan1@plt>
    d3f0:	mov	x20, x0
    d3f4:	sub	x0, x29, #0x28
    d3f8:	mov	w1, #0x2                   	// #2
    d3fc:	bl	54b0 <__gmpz_sizeinbase@plt>
    d400:	add	x8, x20, #0x1
    d404:	cmp	x0, x8
    d408:	b.ne	d6ac <mpc_pow@@Base+0xc90>  // b.any
    d40c:	ldur	w8, [x29, #-84]
    d410:	ldur	w9, [x29, #-20]
    d414:	add	x10, x21, x20
    d418:	neg	x21, x10
    d41c:	neg	w8, w8
    d420:	neg	w9, w9
    d424:	stur	w8, [x29, #-84]
    d428:	stur	w9, [x29, #-20]
    d42c:	sub	x0, x29, #0x18
    d430:	mov	w1, #0x2                   	// #2
    d434:	bl	54b0 <__gmpz_sizeinbase@plt>
    d438:	mov	x20, x0
    d43c:	sub	x0, x29, #0x28
    d440:	sub	x1, x29, #0x48
    d444:	bl	4d00 <__gmpz_set@plt>
    d448:	sub	x0, x29, #0x38
    d44c:	sub	x1, x29, #0x58
    d450:	bl	4d00 <__gmpz_set@plt>
    d454:	sub	x28, x20, #0x2
    d458:	mov	x20, x21
    d45c:	cmn	x28, #0x1
    d460:	b.eq	d5d8 <mpc_pow@@Base+0xbbc>  // b.none
    d464:	sub	x0, x29, #0x68
    d468:	sub	x1, x29, #0x28
    d46c:	sub	x2, x29, #0x38
    d470:	bl	4d40 <__gmpz_mul@plt>
    d474:	sub	x0, x29, #0x28
    d478:	sub	x1, x29, #0x28
    d47c:	sub	x2, x29, #0x28
    d480:	bl	4d40 <__gmpz_mul@plt>
    d484:	sub	x0, x29, #0x28
    d488:	sub	x1, x29, #0x38
    d48c:	sub	x2, x29, #0x38
    d490:	bl	52d0 <__gmpz_submul@plt>
    d494:	sub	x0, x29, #0x38
    d498:	sub	x1, x29, #0x68
    d49c:	mov	w2, #0x1                   	// #1
    d4a0:	bl	4e90 <__gmpz_mul_2exp@plt>
    d4a4:	sub	x0, x29, #0x18
    d4a8:	mov	x1, x28
    d4ac:	lsl	x25, x20, #1
    d4b0:	bl	4d30 <__gmpz_tstbit@plt>
    d4b4:	cbz	w0, d508 <mpc_pow@@Base+0xaec>
    d4b8:	sub	x0, x29, #0x68
    d4bc:	sub	x1, x29, #0x28
    d4c0:	sub	x2, x29, #0x48
    d4c4:	bl	4d40 <__gmpz_mul@plt>
    d4c8:	sub	x0, x29, #0x68
    d4cc:	sub	x1, x29, #0x38
    d4d0:	sub	x2, x29, #0x58
    d4d4:	bl	52d0 <__gmpz_submul@plt>
    d4d8:	sub	x0, x29, #0x38
    d4dc:	sub	x1, x29, #0x38
    d4e0:	sub	x2, x29, #0x48
    d4e4:	bl	4d40 <__gmpz_mul@plt>
    d4e8:	sub	x0, x29, #0x38
    d4ec:	sub	x1, x29, #0x28
    d4f0:	sub	x2, x29, #0x58
    d4f4:	bl	4f10 <__gmpz_addmul@plt>
    d4f8:	sub	x0, x29, #0x28
    d4fc:	sub	x1, x29, #0x68
    d500:	bl	4da0 <__gmpz_swap@plt>
    d504:	add	x25, x25, x21
    d508:	ldur	w8, [x29, #-36]
    d50c:	cbz	w8, d558 <mpc_pow@@Base+0xb3c>
    d510:	ldur	w23, [x29, #-52]
    d514:	sub	x0, x29, #0x28
    d518:	mov	x1, xzr
    d51c:	bl	49f0 <__gmpz_scan1@plt>
    d520:	mov	x20, x0
    d524:	cbz	w23, d57c <mpc_pow@@Base+0xb60>
    d528:	sub	x0, x29, #0x38
    d52c:	mov	x1, xzr
    d530:	bl	49f0 <__gmpz_scan1@plt>
    d534:	cmp	x0, x20
    d538:	csel	x20, x0, x20, cc  // cc = lo, ul, last
    d53c:	sub	x0, x29, #0x28
    d540:	sub	x1, x29, #0x28
    d544:	mov	x2, x20
    d548:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d54c:	sub	x0, x29, #0x38
    d550:	sub	x1, x29, #0x38
    d554:	b	d584 <mpc_pow@@Base+0xb68>
    d558:	sub	x0, x29, #0x38
    d55c:	mov	x1, xzr
    d560:	bl	49f0 <__gmpz_scan1@plt>
    d564:	mov	x20, x0
    d568:	sub	x0, x29, #0x38
    d56c:	sub	x1, x29, #0x38
    d570:	mov	x2, x20
    d574:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d578:	b	d590 <mpc_pow@@Base+0xb74>
    d57c:	sub	x0, x29, #0x28
    d580:	sub	x1, x29, #0x28
    d584:	mov	x2, x20
    d588:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d58c:	ldr	x23, [sp, #176]
    d590:	sub	x0, x29, #0x28
    d594:	mov	w1, #0x2                   	// #2
    d598:	bl	54b0 <__gmpz_sizeinbase@plt>
    d59c:	cmp	x0, x23
    d5a0:	b.gt	d5c0 <mpc_pow@@Base+0xba4>
    d5a4:	sub	x0, x29, #0x38
    d5a8:	mov	w1, #0x2                   	// #2
    d5ac:	add	x20, x20, x25
    d5b0:	bl	54b0 <__gmpz_sizeinbase@plt>
    d5b4:	cmp	x0, x23
    d5b8:	sub	x28, x28, #0x1
    d5bc:	b.le	d45c <mpc_pow@@Base+0xa40>
    d5c0:	ldr	x23, [sp, #144]
    d5c4:	ldr	w26, [sp, #140]
    d5c8:	mov	w28, #0xfffffffe            	// #-2
    d5cc:	b	d748 <mpc_pow@@Base+0xd2c>
    d5d0:	mov	x25, #0x8000000000000001    	// #-9223372036854775807
    d5d4:	b	d7c0 <mpc_pow@@Base+0xda4>
    d5d8:	add	x25, x26, #0x1
    d5dc:	ldr	x23, [sp, #144]
    d5e0:	ldr	w26, [sp, #140]
    d5e4:	sub	x25, x25, #0x1
    d5e8:	cmp	x25, #0x1
    d5ec:	b.lt	d6bc <mpc_pow@@Base+0xca0>  // b.tstop
    d5f0:	sub	x0, x29, #0x68
    d5f4:	sub	x1, x29, #0x28
    d5f8:	sub	x2, x29, #0x38
    d5fc:	bl	4d40 <__gmpz_mul@plt>
    d600:	sub	x0, x29, #0x28
    d604:	sub	x1, x29, #0x28
    d608:	sub	x2, x29, #0x28
    d60c:	bl	4d40 <__gmpz_mul@plt>
    d610:	sub	x0, x29, #0x28
    d614:	sub	x1, x29, #0x38
    d618:	sub	x2, x29, #0x38
    d61c:	bl	52d0 <__gmpz_submul@plt>
    d620:	sub	x0, x29, #0x38
    d624:	sub	x1, x29, #0x68
    d628:	mov	w2, #0x1                   	// #1
    d62c:	bl	4e90 <__gmpz_mul_2exp@plt>
    d630:	sub	x0, x29, #0x28
    d634:	mov	x1, xzr
    d638:	bl	49f0 <__gmpz_scan1@plt>
    d63c:	mov	x21, x0
    d640:	sub	x0, x29, #0x38
    d644:	mov	x1, xzr
    d648:	bl	49f0 <__gmpz_scan1@plt>
    d64c:	cmp	x21, x0
    d650:	csel	x21, x0, x21, hi  // hi = pmore
    d654:	sub	x0, x29, #0x28
    d658:	sub	x1, x29, #0x28
    d65c:	mov	x2, x21
    d660:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d664:	sub	x0, x29, #0x38
    d668:	sub	x1, x29, #0x38
    d66c:	mov	x2, x21
    d670:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d674:	sub	x0, x29, #0x28
    d678:	mov	w1, #0x2                   	// #2
    d67c:	bl	54b0 <__gmpz_sizeinbase@plt>
    d680:	ldr	x28, [sp, #176]
    d684:	cmp	x0, x28
    d688:	b.gt	d6a4 <mpc_pow@@Base+0xc88>
    d68c:	sub	x0, x29, #0x38
    d690:	mov	w1, #0x2                   	// #2
    d694:	add	x20, x21, x20, lsl #1
    d698:	bl	54b0 <__gmpz_sizeinbase@plt>
    d69c:	cmp	x0, x28
    d6a0:	b.le	d5e4 <mpc_pow@@Base+0xbc8>
    d6a4:	mov	w28, #0xfffffffe            	// #-2
    d6a8:	b	d748 <mpc_pow@@Base+0xd2c>
    d6ac:	mov	w28, #0xffffffff            	// #-1
    d6b0:	ldr	x23, [sp, #144]
    d6b4:	ldr	w26, [sp, #140]
    d6b8:	b	d908 <mpc_pow@@Base+0xeec>
    d6bc:	ldr	x0, [sp, #72]
    d6c0:	ldr	w2, [sp, #28]
    d6c4:	sub	x1, x29, #0x28
    d6c8:	bl	4ec0 <mpfr_set_z@plt>
    d6cc:	ldr	x21, [sp, #32]
    d6d0:	ldr	w25, [sp, #44]
    d6d4:	cmp	w0, #0x0
    d6d8:	cset	w8, ne  // ne = any
    d6dc:	mov	w9, #0x2                   	// #2
    d6e0:	sub	x1, x29, #0x38
    d6e4:	mov	x0, x21
    d6e8:	mov	w2, w25
    d6ec:	csel	w28, w9, w8, lt  // lt = tstop
    d6f0:	bl	4ec0 <mpfr_set_z@plt>
    d6f4:	tbnz	w0, #31, d718 <mpc_pow@@Base+0xcfc>
    d6f8:	sub	x1, x29, #0x38
    d6fc:	mov	x0, x21
    d700:	mov	w2, w25
    d704:	bl	4ec0 <mpfr_set_z@plt>
    d708:	cmp	w0, #0x0
    d70c:	cset	w8, ne  // ne = any
    d710:	lsl	w8, w8, #2
    d714:	b	d71c <mpc_pow@@Base+0xd00>
    d718:	mov	w8, #0x8                   	// #8
    d71c:	ldr	x0, [sp, #72]
    d720:	ldr	w3, [sp, #28]
    d724:	mov	x2, x20
    d728:	orr	w28, w8, w28
    d72c:	mov	x1, x0
    d730:	bl	4a70 <mpfr_mul_2si@plt>
    d734:	mov	x0, x21
    d738:	mov	x1, x21
    d73c:	mov	x2, x20
    d740:	mov	w3, w25
    d744:	bl	4a70 <mpfr_mul_2si@plt>
    d748:	mov	x25, #0x8000000000000001    	// #-9223372036854775807
    d74c:	b	d908 <mpc_pow@@Base+0xeec>
    d750:	mvn	w8, w1
    d754:	lsr	w0, w8, #31
    d758:	cbz	w0, d904 <mpc_pow@@Base+0xee8>
    d75c:	sub	x0, x29, #0x28
    d760:	sub	x1, x29, #0x28
    d764:	bl	4af0 <__gmpz_sqrt@plt>
    d768:	sub	x0, x29, #0x38
    d76c:	sub	x1, x29, #0x58
    d770:	mov	w2, #0x1                   	// #1
    d774:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d778:	sub	x0, x29, #0x38
    d77c:	sub	x1, x29, #0x38
    d780:	sub	x2, x29, #0x28
    d784:	bl	4cc0 <__gmpz_divexact@plt>
    d788:	sub	x0, x29, #0x28
    d78c:	sub	x1, x29, #0x48
    d790:	bl	4da0 <__gmpz_swap@plt>
    d794:	sub	x0, x29, #0x38
    d798:	sub	x1, x29, #0x58
    d79c:	bl	4da0 <__gmpz_swap@plt>
    d7a0:	ldr	x23, [sp, #176]
    d7a4:	cmp	x21, #0x0
    d7a8:	add	x26, x20, #0x1
    d7ac:	cinc	x8, x21, lt  // lt = tstop
    d7b0:	cmn	x20, #0x1
    d7b4:	asr	x21, x8, #1
    d7b8:	mov	x20, x26
    d7bc:	b.ge	d3bc <mpc_pow@@Base+0x9a0>  // b.tcont
    d7c0:	tbz	w21, #0, d7e8 <mpc_pow@@Base+0xdcc>
    d7c4:	sub	x0, x29, #0x48
    d7c8:	sub	x1, x29, #0x48
    d7cc:	mov	w2, #0x1                   	// #1
    d7d0:	bl	4e90 <__gmpz_mul_2exp@plt>
    d7d4:	sub	x0, x29, #0x58
    d7d8:	sub	x1, x29, #0x58
    d7dc:	mov	w2, #0x1                   	// #1
    d7e0:	bl	4e90 <__gmpz_mul_2exp@plt>
    d7e4:	sub	x21, x21, #0x1
    d7e8:	ldr	x23, [sp, #144]
    d7ec:	ldr	w26, [sp, #140]
    d7f0:	ldur	w8, [x29, #-84]
    d7f4:	cbz	w8, d898 <mpc_pow@@Base+0xe7c>
    d7f8:	sub	x0, x29, #0x58
    d7fc:	mov	w1, #0x1                   	// #1
    d800:	bl	4c40 <__gmpz_divisible_2exp_p@plt>
    d804:	cbz	w0, d904 <mpc_pow@@Base+0xee8>
    d808:	sub	x0, x29, #0x28
    d80c:	sub	x1, x29, #0x48
    d810:	sub	x2, x29, #0x48
    d814:	bl	4d40 <__gmpz_mul@plt>
    d818:	sub	x0, x29, #0x28
    d81c:	sub	x1, x29, #0x58
    d820:	sub	x2, x29, #0x58
    d824:	bl	4f10 <__gmpz_addmul@plt>
    d828:	ldur	w1, [x29, #-36]
    d82c:	cmp	w1, #0x1
    d830:	b.lt	d8e8 <mpc_pow@@Base+0xecc>  // b.tstop
    d834:	ldur	x0, [x29, #-32]
    d838:	bl	5420 <__gmpn_perfect_square_p@plt>
    d83c:	cbz	w0, d904 <mpc_pow@@Base+0xee8>
    d840:	sub	x0, x29, #0x28
    d844:	sub	x1, x29, #0x28
    d848:	bl	4af0 <__gmpz_sqrt@plt>
    d84c:	sub	x0, x29, #0x28
    d850:	sub	x1, x29, #0x48
    d854:	sub	x2, x29, #0x28
    d858:	bl	53d0 <__gmpz_add@plt>
    d85c:	sub	x0, x29, #0x28
    d860:	mov	w1, #0x1                   	// #1
    d864:	bl	4c40 <__gmpz_divisible_2exp_p@plt>
    d868:	cbz	w0, d904 <mpc_pow@@Base+0xee8>
    d86c:	sub	x0, x29, #0x28
    d870:	sub	x1, x29, #0x28
    d874:	mov	w2, #0x1                   	// #1
    d878:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    d87c:	ldur	w1, [x29, #-36]
    d880:	cmp	w1, #0x1
    d884:	b.lt	d750 <mpc_pow@@Base+0xd34>  // b.tstop
    d888:	ldur	x0, [x29, #-32]
    d88c:	bl	5420 <__gmpn_perfect_square_p@plt>
    d890:	cbnz	w0, d75c <mpc_pow@@Base+0xd40>
    d894:	b	d904 <mpc_pow@@Base+0xee8>
    d898:	ldur	w8, [x29, #-68]
    d89c:	tbz	w8, #31, ddbc <mpc_pow@@Base+0x13a0>
    d8a0:	sub	x0, x29, #0x38
    d8a4:	sub	x1, x29, #0x48
    d8a8:	bl	4d00 <__gmpz_set@plt>
    d8ac:	ldur	w9, [x29, #-52]
    d8b0:	neg	w8, w9
    d8b4:	stur	w8, [x29, #-52]
    d8b8:	tbz	w9, #31, d8f8 <mpc_pow@@Base+0xedc>
    d8bc:	ldur	x0, [x29, #-48]
    d8c0:	mov	w1, w8
    d8c4:	bl	5420 <__gmpn_perfect_square_p@plt>
    d8c8:	cbz	w0, d904 <mpc_pow@@Base+0xee8>
    d8cc:	sub	x0, x29, #0x38
    d8d0:	sub	x1, x29, #0x38
    d8d4:	bl	4af0 <__gmpz_sqrt@plt>
    d8d8:	sub	x0, x29, #0x28
    d8dc:	mov	x1, xzr
    d8e0:	bl	4b10 <__gmpz_set_ui@plt>
    d8e4:	b	d788 <mpc_pow@@Base+0xd6c>
    d8e8:	mvn	w8, w1
    d8ec:	lsr	w0, w8, #31
    d8f0:	cbnz	w0, d840 <mpc_pow@@Base+0xe24>
    d8f4:	b	d904 <mpc_pow@@Base+0xee8>
    d8f8:	sub	w8, w9, #0x1
    d8fc:	lsr	w0, w8, #31
    d900:	cbnz	w0, d8cc <mpc_pow@@Base+0xeb0>
    d904:	mov	w28, #0xffffffff            	// #-1
    d908:	sub	x0, x29, #0x18
    d90c:	bl	5180 <__gmpz_clear@plt>
    d910:	sub	x0, x29, #0x28
    d914:	bl	5180 <__gmpz_clear@plt>
    d918:	sub	x0, x29, #0x38
    d91c:	bl	5180 <__gmpz_clear@plt>
    d920:	sub	x0, x29, #0x48
    d924:	bl	5180 <__gmpz_clear@plt>
    d928:	sub	x0, x29, #0x58
    d92c:	bl	5180 <__gmpz_clear@plt>
    d930:	sub	x0, x29, #0x68
    d934:	bl	5180 <__gmpz_clear@plt>
    d938:	ldr	x8, [sp, #112]
    d93c:	ldr	w20, [sp, #108]
    d940:	cmp	x8, x25
    d944:	b.ne	d970 <mpc_pow@@Base+0xf54>  // b.any
    d948:	tbnz	w28, #31, d970 <mpc_pow@@Base+0xf54>
    d94c:	ldr	w8, [sp, #92]
    d950:	ldr	x0, [sp, #72]
    d954:	cmp	w20, #0x0
    d958:	lsr	w1, w8, #31
    d95c:	ldr	w8, [sp, #88]
    d960:	lsr	w2, w8, #31
    d964:	sub	x8, x29, #0x88
    d968:	csel	x3, x22, x8, eq  // eq = none
    d96c:	bl	ddec <mpc_pow@@Base+0x13d0>
    d970:	cbz	w20, d97c <mpc_pow@@Base+0xf60>
    d974:	sub	x0, x29, #0x88
    d978:	bl	4d60 <mpfr_clear@plt>
    d97c:	cmn	w28, #0x2
    d980:	b.cc	dc40 <mpc_pow@@Base+0x1224>  // b.lo, b.ul, b.last
    d984:	ldr	x8, [sp, #168]
    d988:	cmp	x19, x8
    d98c:	ldp	x9, x8, [sp, #152]
    d990:	csel	x8, x9, x8, gt
    d994:	add	x8, x27, x8
    d998:	add	x27, x8, #0x40
    d99c:	b	d04c <mpc_pow@@Base+0x630>
    d9a0:	ldr	x22, [sp, #72]
    d9a4:	add	x1, sp, #0xb8
    d9a8:	mov	w2, wzr
    d9ac:	mov	x0, x22
    d9b0:	bl	5580 <mpc_set@plt>
    d9b4:	and	w8, w20, #0x3
    d9b8:	tst	w20, #0x3
    d9bc:	ldr	x10, [x22, #16]
    d9c0:	asr	w9, w20, #2
    d9c4:	cset	w11, ne  // ne = any
    d9c8:	cmp	w8, #0x2
    d9cc:	csinv	w21, w11, wzr, ne  // ne = any
    d9d0:	cmp	w9, #0x0
    d9d4:	mov	x19, #0x8000000000000003    	// #-9223372036854775805
    d9d8:	cset	w8, ne  // ne = any
    d9dc:	cmp	w9, #0x2
    d9e0:	csinv	w20, w8, wzr, ne  // ne = any
    d9e4:	cmp	x10, x19
    d9e8:	b.ne	d9fc <mpc_pow@@Base+0xfe0>  // b.any
    d9ec:	ldr	w1, [sp, #28]
    d9f0:	mov	x0, x22
    d9f4:	bl	4dd0 <mpc_fix_inf@plt>
    d9f8:	mov	w21, w0
    d9fc:	ldr	x8, [x22, #48]
    da00:	ldr	w1, [sp, #44]
    da04:	ldr	x0, [sp, #32]
    da08:	cmp	x8, x19
    da0c:	b.ne	da18 <mpc_pow@@Base+0xffc>  // b.any
    da10:	bl	4dd0 <mpc_fix_inf@plt>
    da14:	mov	w20, w0
    da18:	cmp	w21, #0x0
    da1c:	mov	w8, #0x2                   	// #2
    da20:	cset	w9, ne  // ne = any
    da24:	csel	w8, w8, w9, lt  // lt = tstop
    da28:	cmp	w20, #0x0
    da2c:	cset	w9, ne  // ne = any
    da30:	lsl	w9, w9, #2
    da34:	mov	w10, #0x8                   	// #8
    da38:	csel	w9, w10, w9, lt  // lt = tstop
    da3c:	orr	w28, w9, w8
    da40:	b	dc40 <mpc_pow@@Base+0x1224>
    da44:	ldr	w8, [x24, #40]
    da48:	ldr	w19, [x24, #8]
    da4c:	sub	x0, x29, #0x88
    da50:	lsr	w20, w8, #31
    da54:	bl	4aa0 <mpfr_init@plt>
    da58:	sub	x0, x29, #0x88
    da5c:	mov	x1, x24
    da60:	mov	w2, wzr
    da64:	bl	4ea0 <mpc_norm@plt>
    da68:	mov	w21, w0
    da6c:	sub	x0, x29, #0x88
    da70:	mov	w1, #0x1                   	// #1
    da74:	mov	x2, xzr
    da78:	bl	4cb0 <mpfr_cmp_ui_2exp@plt>
    da7c:	cmp	w0, #0x0
    da80:	ccmp	w21, #0x0, #0x4, eq  // eq = none
    da84:	csneg	w8, w0, w21, eq  // eq = none
    da88:	tbnz	w8, #31, db1c <mpc_pow@@Base+0x1100>
    da8c:	ldr	x27, [sp, #72]
    da90:	ldr	x21, [sp, #120]
    da94:	ldp	x9, x10, [sp, #8]
    da98:	cbz	w8, db50 <mpc_pow@@Base+0x1134>
    da9c:	ldr	w8, [x22, #40]
    daa0:	lsr	w23, w8, #31
    daa4:	b	db60 <mpc_pow@@Base+0x1144>
    daa8:	cbz	w26, db38 <mpc_pow@@Base+0x111c>
    daac:	ldr	w3, [sp, #224]
    dab0:	ldr	x0, [sp, #32]
    dab4:	ldr	x1, [sp, #128]
    dab8:	ldr	w2, [sp, #44]
    dabc:	bl	51d0 <mpfr_set4@plt>
    dac0:	ldr	x9, [sp, #120]
    dac4:	mov	w20, w0
    dac8:	ldr	x0, [sp, #72]
    dacc:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    dad0:	cmp	x9, x8
    dad4:	b.ne	dc6c <mpc_pow@@Base+0x1250>  // b.any
    dad8:	ldr	x9, [sp, #16]
    dadc:	cmp	x9, x8
    dae0:	b.ne	dc6c <mpc_pow@@Base+0x1250>  // b.any
    dae4:	ldr	w8, [x24, #8]
    dae8:	mov	w9, #0x1                   	// #1
    daec:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    daf0:	mov	w2, wzr
    daf4:	lsr	w1, w8, #31
    daf8:	mov	x3, x22
    dafc:	str	w9, [x0, #8]
    db00:	str	x10, [x0, #16]
    db04:	bl	ddec <mpc_pow@@Base+0x13d0>
    db08:	cmp	w20, #0x0
    db0c:	b	dc7c <mpc_pow@@Base+0x1260>
    db10:	str	wzr, [sp, #140]
    db14:	str	xzr, [sp, #144]
    db18:	b	cf7c <mpc_pow@@Base+0x560>
    db1c:	ldr	w8, [x22, #40]
    db20:	ldr	x27, [sp, #72]
    db24:	ldr	x21, [sp, #120]
    db28:	ldp	x9, x10, [sp, #8]
    db2c:	tbnz	w8, #31, db5c <mpc_pow@@Base+0x1140>
    db30:	mov	w23, #0x1                   	// #1
    db34:	b	db60 <mpc_pow@@Base+0x1144>
    db38:	ldr	x0, [sp, #72]
    db3c:	ldr	w2, [sp, #4]
    db40:	add	x1, sp, #0xb8
    db44:	bl	5580 <mpc_set@plt>
    db48:	mov	w28, w0
    db4c:	b	dc40 <mpc_pow@@Base+0x1224>
    db50:	ldr	w8, [x22, #8]
    db54:	cmp	w20, w8, lsr #31
    db58:	b.ne	db30 <mpc_pow@@Base+0x1114>  // b.any
    db5c:	mov	w23, wzr
    db60:	ldr	x1, [x22]
    db64:	mov	x24, #0x8000000000000001    	// #-9223372036854775807
    db68:	cmp	x10, x24
    db6c:	cset	w25, eq  // eq = none
    db70:	cmp	x9, x24
    db74:	sub	x0, x29, #0x88
    db78:	cset	w26, eq  // eq = none
    db7c:	bl	4c80 <mpfr_set_prec@plt>
    db80:	ldr	w3, [x22, #8]
    db84:	sub	x0, x29, #0x88
    db88:	mov	x1, x22
    db8c:	mov	w2, wzr
    db90:	bl	51d0 <mpfr_set4@plt>
    db94:	ldr	w3, [sp, #192]
    db98:	ldr	w2, [sp, #28]
    db9c:	add	x1, sp, #0xb8
    dba0:	mov	x0, x27
    dba4:	bl	51d0 <mpfr_set4@plt>
    dba8:	cmp	x21, x24
    dbac:	mov	w21, w0
    dbb0:	b.ne	dbf4 <mpc_pow@@Base+0x11d8>  // b.any
    dbb4:	orr	w8, w26, w25
    dbb8:	cbz	w8, dbf4 <mpc_pow@@Base+0x11d8>
    dbbc:	lsr	w1, w19, #31
    dbc0:	mov	w8, #0x1                   	// #1
    dbc4:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    dbc8:	sub	x3, x29, #0x88
    dbcc:	mov	x0, x27
    dbd0:	mov	w2, w20
    dbd4:	str	w8, [x27, #40]
    dbd8:	str	x9, [x27, #48]
    dbdc:	bl	ddec <mpc_pow@@Base+0x13d0>
    dbe0:	cmp	w21, #0x0
    dbe4:	cset	w8, ne  // ne = any
    dbe8:	mov	w9, #0x2                   	// #2
    dbec:	csel	w28, w9, w8, lt  // lt = tstop
    dbf0:	b	dc38 <mpc_pow@@Base+0x121c>
    dbf4:	cmp	w21, #0x0
    dbf8:	mov	w8, #0x2                   	// #2
    dbfc:	cset	w10, ne  // ne = any
    dc00:	csel	w28, w8, w10, lt  // lt = tstop
    dc04:	ldr	w8, [sp, #44]
    dc08:	mov	w9, #0x1                   	// #1
    dc0c:	str	w9, [x27, #40]
    dc10:	eor	w9, w23, #0x1
    dc14:	cmp	w8, #0x3
    dc18:	cset	w8, ne  // ne = any
    dc1c:	and	w8, w8, w9
    dc20:	str	x24, [x27, #48]
    dc24:	tbnz	w8, #0, dc38 <mpc_pow@@Base+0x121c>
    dc28:	mov	x0, x27
    dc2c:	mov	x1, x27
    dc30:	mov	w2, wzr
    dc34:	bl	4f60 <mpc_conj@plt>
    dc38:	sub	x0, x29, #0x88
    dc3c:	bl	4d60 <mpfr_clear@plt>
    dc40:	sub	x0, x29, #0xc8
    dc44:	bl	4a10 <mpc_clear@plt>
    dc48:	add	x0, sp, #0xb8
    dc4c:	bl	4a10 <mpc_clear@plt>
    dc50:	ldr	w8, [sp, #52]
    dc54:	cbz	w8, dc5c <mpc_pow@@Base+0x1240>
    dc58:	bl	4990 <mpfr_set_underflow@plt>
    dc5c:	ldr	w8, [sp, #48]
    dc60:	cbz	w8, ccbc <mpc_pow@@Base+0x2a0>
    dc64:	bl	5490 <mpfr_set_overflow@plt>
    dc68:	b	ccbc <mpc_pow@@Base+0x2a0>
    dc6c:	mov	w9, #0x1                   	// #1
    dc70:	cmp	w20, #0x0
    dc74:	str	x8, [x0, #16]
    dc78:	str	w9, [x0, #8]
    dc7c:	cset	w8, ne  // ne = any
    dc80:	lsl	w8, w8, #2
    dc84:	mov	w9, #0x8                   	// #8
    dc88:	csel	w28, w9, w8, lt  // lt = tstop
    dc8c:	b	dc40 <mpc_pow@@Base+0x1224>
    dc90:	adrp	x10, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    dc94:	ldr	x10, [x10, #4056]
    dc98:	sub	x9, x9, #0x1
    dc9c:	neg	x12, x8
    dca0:	ldrsw	x11, [x10]
    dca4:	ldr	x10, [x22, #24]
    dca8:	sdiv	x9, x9, x11
    dcac:	add	x9, x9, #0x1
    dcb0:	madd	x9, x9, x11, x12
    dcb4:	sdiv	x9, x9, x11
    dcb8:	ldr	x12, [x10, x9, lsl #3]
    dcbc:	sdiv	x13, x8, x11
    dcc0:	msub	x8, x13, x11, x8
    dcc4:	cbz	x8, dce8 <mpc_pow@@Base+0x12cc>
    dcc8:	sub	x8, x8, #0x1
    dccc:	sub	w11, w11, #0x1
    dcd0:	mov	w13, #0x1                   	// #1
    dcd4:	lsl	x8, x12, x8
    dcd8:	lsl	x11, x13, x11
    dcdc:	cmp	x8, x11
    dce0:	b.ne	cf70 <mpc_pow@@Base+0x554>  // b.any
    dce4:	b	dcec <mpc_pow@@Base+0x12d0>
    dce8:	tbz	w12, #0, cf6c <mpc_pow@@Base+0x550>
    dcec:	sub	x8, x10, #0x8
    dcf0:	subs	x10, x9, #0x1
    dcf4:	b.lt	dd08 <mpc_pow@@Base+0x12ec>  // b.tstop
    dcf8:	ldr	x11, [x8, x9, lsl #3]
    dcfc:	mov	x9, x10
    dd00:	cbz	x11, dcf0 <mpc_pow@@Base+0x12d4>
    dd04:	b	cf6c <mpc_pow@@Base+0x550>
    dd08:	mov	w13, wzr
    dd0c:	b	cf70 <mpc_pow@@Base+0x554>
    dd10:	tbz	w11, #0, cea4 <mpc_pow@@Base+0x488>
    dd14:	ldr	x12, [sp, #120]
    dd18:	sub	x9, x9, #0x8
    dd1c:	subs	x10, x8, #0x1
    dd20:	b.lt	dd34 <mpc_pow@@Base+0x1318>  // b.tstop
    dd24:	ldr	x11, [x9, x8, lsl #3]
    dd28:	mov	x8, x10
    dd2c:	cbz	x11, dd1c <mpc_pow@@Base+0x1300>
    dd30:	b	cea4 <mpc_pow@@Base+0x488>
    dd34:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    dd38:	cmp	x12, x8
    dd3c:	b.eq	dd54 <mpc_pow@@Base+0x1338>  // b.none
    dd40:	mov	x1, #0xffffffffffffffff    	// #-1
    dd44:	mov	x0, x24
    dd48:	mov	x2, xzr
    dd4c:	bl	4fe0 <mpfr_cmp_si_2exp@plt>
    dd50:	cbnz	w0, cea4 <mpc_pow@@Base+0x488>
    dd54:	mov	w8, #0x1                   	// #1
    dd58:	b	cf78 <mpc_pow@@Base+0x55c>
    dd5c:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    dd60:	ldr	x8, [x8, #4008]
    dd64:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    dd68:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    dd6c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    dd70:	ldr	x0, [x8]
    dd74:	add	x1, x1, #0x7c0
    dd78:	add	x2, x2, #0x9b9
    dd7c:	add	x4, x4, #0x9bf
    dd80:	mov	w3, #0x2d6                 	// #726
    dd84:	bl	55a0 <fprintf@plt>
    dd88:	bl	5000 <abort@plt>
    dd8c:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    dd90:	ldr	x8, [x8, #4008]
    dd94:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    dd98:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    dd9c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    dda0:	ldr	x0, [x8]
    dda4:	add	x1, x1, #0x7c0
    dda8:	add	x2, x2, #0x9b9
    ddac:	add	x4, x4, #0x9e8
    ddb0:	mov	w3, #0x2d8                 	// #728
    ddb4:	bl	55a0 <fprintf@plt>
    ddb8:	bl	5000 <abort@plt>
    ddbc:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    ddc0:	ldr	x8, [x8, #4008]
    ddc4:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ddc8:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ddcc:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ddd0:	ldr	x0, [x8]
    ddd4:	add	x1, x1, #0x7c0
    ddd8:	add	x2, x2, #0x9b9
    dddc:	add	x4, x4, #0xa11
    dde0:	mov	w3, #0x3c                  	// #60
    dde4:	bl	55a0 <fprintf@plt>
    dde8:	bl	5000 <abort@plt>
    ddec:	sub	sp, sp, #0x40
    ddf0:	stp	x20, x19, [sp, #48]
    ddf4:	mov	x19, x0
    ddf8:	mov	x0, sp
    ddfc:	stp	x29, x30, [sp, #16]
    de00:	stp	x22, x21, [sp, #32]
    de04:	add	x29, sp, #0x10
    de08:	mov	x22, x3
    de0c:	mov	w21, w2
    de10:	mov	w20, w1
    de14:	bl	54a0 <__gmpz_init@plt>
    de18:	mov	x0, sp
    de1c:	mov	x1, x22
    de20:	bl	5470 <mpfr_get_z_2exp@plt>
    de24:	mov	x22, x0
    de28:	mov	x0, sp
    de2c:	mov	x1, xzr
    de30:	bl	49f0 <__gmpz_scan1@plt>
    de34:	mov	x2, x0
    de38:	add	x22, x0, x22
    de3c:	mov	x0, sp
    de40:	mov	x1, sp
    de44:	bl	5220 <__gmpz_tdiv_q_2exp@plt>
    de48:	cmp	x22, #0x1
    de4c:	b.le	de58 <mpc_pow@@Base+0x143c>
    de50:	mov	w8, wzr
    de54:	b	deac <mpc_pow@@Base+0x1490>
    de58:	cbz	x22, de78 <mpc_pow@@Base+0x145c>
    de5c:	cmp	x22, #0x1
    de60:	b.ne	df54 <mpc_pow@@Base+0x1538>  // b.any
    de64:	mov	x0, sp
    de68:	mov	x1, xzr
    de6c:	bl	4d30 <__gmpz_tstbit@plt>
    de70:	lsl	w8, w0, #1
    de74:	b	deac <mpc_pow@@Base+0x1490>
    de78:	mov	x0, sp
    de7c:	mov	w1, #0x1                   	// #1
    de80:	bl	4d30 <__gmpz_tstbit@plt>
    de84:	mov	w22, w0
    de88:	mov	x0, sp
    de8c:	mov	x1, xzr
    de90:	bl	4d30 <__gmpz_tstbit@plt>
    de94:	ldr	w8, [sp, #4]
    de98:	add	w9, w0, w22, lsl #1
    de9c:	mov	w10, #0x4                   	// #4
    dea0:	sub	w10, w10, w9
    dea4:	cmp	w8, #0x0
    dea8:	csel	w8, w10, w9, lt  // lt = tstop
    deac:	ldr	x10, [x19, #16]
    deb0:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    deb4:	cmp	x10, x9
    deb8:	b.ne	df08 <mpc_pow@@Base+0x14ec>  // b.any
    debc:	orr	w9, w8, #0x2
    dec0:	cmp	w9, #0x3
    dec4:	b.ne	df70 <mpc_pow@@Base+0x1554>  // b.any
    dec8:	cmp	w8, #0x1
    decc:	cset	w9, eq  // eq = none
    ded0:	cmp	w8, #0x3
    ded4:	cset	w8, eq  // eq = none
    ded8:	cmp	w20, #0x0
    dedc:	cset	w10, eq  // eq = none
    dee0:	cmp	w20, #0x1
    dee4:	and	w10, w10, w8
    dee8:	cset	w8, eq  // eq = none
    deec:	tbnz	w10, #0, def8 <mpc_pow@@Base+0x14dc>
    def0:	and	w8, w8, w9
    def4:	cbz	w8, df54 <mpc_pow@@Base+0x1538>
    def8:	mov	w2, #0x1                   	// #1
    defc:	mov	x0, x19
    df00:	mov	x1, x19
    df04:	b	df50 <mpc_pow@@Base+0x1534>
    df08:	ldr	x10, [x19, #48]
    df0c:	cmp	x10, x9
    df10:	b.ne	df54 <mpc_pow@@Base+0x1538>  // b.any
    df14:	tst	w8, #0xfffffffd
    df18:	b.ne	dfa0 <mpc_pow@@Base+0x1584>  // b.any
    df1c:	cmp	w8, #0x2
    df20:	cset	w9, ne  // ne = any
    df24:	cmp	w8, #0x0
    df28:	cset	w8, eq  // eq = none
    df2c:	cmp	w21, w20
    df30:	cset	w10, eq  // eq = none
    df34:	and	w8, w10, w8
    df38:	orr	w9, w10, w9
    df3c:	cmp	w8, w9
    df40:	b.ne	df54 <mpc_pow@@Base+0x1538>  // b.any
    df44:	add	x0, x19, #0x20
    df48:	mov	w2, #0x1                   	// #1
    df4c:	mov	x1, x0
    df50:	bl	4b80 <mpfr_neg@plt>
    df54:	mov	x0, sp
    df58:	bl	5180 <__gmpz_clear@plt>
    df5c:	ldp	x20, x19, [sp, #48]
    df60:	ldp	x22, x21, [sp, #32]
    df64:	ldp	x29, x30, [sp, #16]
    df68:	add	sp, sp, #0x40
    df6c:	ret
    df70:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    df74:	ldr	x8, [x8, #4008]
    df78:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    df7c:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    df80:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    df84:	ldr	x0, [x8]
    df88:	add	x1, x1, #0x7c0
    df8c:	add	x2, x2, #0x9b9
    df90:	add	x4, x4, #0xa27
    df94:	mov	w3, #0x89                  	// #137
    df98:	bl	55a0 <fprintf@plt>
    df9c:	bl	5000 <abort@plt>
    dfa0:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    dfa4:	ldr	x8, [x8, #4008]
    dfa8:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    dfac:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    dfb0:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    dfb4:	ldr	x0, [x8]
    dfb8:	add	x1, x1, #0x7c0
    dfbc:	add	x2, x2, #0x9b9
    dfc0:	add	x4, x4, #0xa40
    dfc4:	mov	w3, #0x93                  	// #147
    dfc8:	bl	55a0 <fprintf@plt>
    dfcc:	bl	5000 <abort@plt>

000000000000dfd0 <mpc_pow_fr@@Base>:
    dfd0:	sub	sp, sp, #0x80
    dfd4:	stp	x29, x30, [sp, #64]
    dfd8:	str	x23, [sp, #80]
    dfdc:	stp	x22, x21, [sp, #96]
    dfe0:	stp	x20, x19, [sp, #112]
    dfe4:	ldp	q1, q0, [x2]
    dfe8:	mov	x8, sp
    dfec:	add	x22, x8, #0x20
    dff0:	mov	x20, x1
    dff4:	mov	x21, x0
    dff8:	mov	w1, #0x1                   	// #1
    dffc:	mov	x0, x22
    e000:	add	x29, sp, #0x40
    e004:	mov	w19, w3
    e008:	stp	q1, q0, [sp]
    e00c:	mov	w23, #0x1                   	// #1
    e010:	bl	5440 <mpfr_init2@plt>
    e014:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    e018:	mov	x2, sp
    e01c:	mov	x0, x21
    e020:	mov	x1, x20
    e024:	mov	w3, w19
    e028:	str	w23, [sp, #40]
    e02c:	str	x8, [sp, #48]
    e030:	bl	5240 <mpc_pow@plt>
    e034:	mov	w19, w0
    e038:	mov	x0, x22
    e03c:	bl	4d60 <mpfr_clear@plt>
    e040:	mov	w0, w19
    e044:	ldp	x20, x19, [sp, #112]
    e048:	ldp	x22, x21, [sp, #96]
    e04c:	ldr	x23, [sp, #80]
    e050:	ldp	x29, x30, [sp, #64]
    e054:	add	sp, sp, #0x80
    e058:	ret

000000000000e05c <mpc_pow_ld@@Base>:
    e05c:	sub	sp, sp, #0x80
    e060:	str	x21, [sp, #96]
    e064:	stp	x20, x19, [sp, #112]
    e068:	mov	w19, w2
    e06c:	mov	x20, x1
    e070:	mov	x21, x0
    e074:	add	x0, sp, #0x10
    e078:	mov	w1, #0x71                  	// #113
    e07c:	mov	w2, #0x1                   	// #1
    e080:	stp	x29, x30, [sp, #80]
    e084:	add	x29, sp, #0x50
    e088:	str	q0, [sp]
    e08c:	bl	53c0 <mpc_init3@plt>
    e090:	ldr	q0, [sp]
    e094:	add	x0, sp, #0x10
    e098:	mov	w1, wzr
    e09c:	bl	4e50 <mpc_set_ld@plt>
    e0a0:	add	x2, sp, #0x10
    e0a4:	mov	x0, x21
    e0a8:	mov	x1, x20
    e0ac:	mov	w3, w19
    e0b0:	bl	5240 <mpc_pow@plt>
    e0b4:	mov	w19, w0
    e0b8:	add	x0, sp, #0x10
    e0bc:	bl	4a10 <mpc_clear@plt>
    e0c0:	mov	w0, w19
    e0c4:	ldp	x20, x19, [sp, #112]
    e0c8:	ldr	x21, [sp, #96]
    e0cc:	ldp	x29, x30, [sp, #80]
    e0d0:	add	sp, sp, #0x80
    e0d4:	ret

000000000000e0d8 <mpc_pow_d@@Base>:
    e0d8:	sub	sp, sp, #0x70
    e0dc:	str	x21, [sp, #88]
    e0e0:	stp	x20, x19, [sp, #96]
    e0e4:	mov	w19, w2
    e0e8:	mov	x20, x1
    e0ec:	mov	x21, x0
    e0f0:	mov	x0, sp
    e0f4:	mov	w1, #0x35                  	// #53
    e0f8:	mov	w2, #0x1                   	// #1
    e0fc:	str	d8, [sp, #64]
    e100:	stp	x29, x30, [sp, #72]
    e104:	add	x29, sp, #0x40
    e108:	mov	v8.16b, v0.16b
    e10c:	bl	53c0 <mpc_init3@plt>
    e110:	mov	x0, sp
    e114:	mov	v0.16b, v8.16b
    e118:	mov	w1, wzr
    e11c:	bl	5460 <mpc_set_d@plt>
    e120:	mov	x2, sp
    e124:	mov	x0, x21
    e128:	mov	x1, x20
    e12c:	mov	w3, w19
    e130:	bl	5240 <mpc_pow@plt>
    e134:	mov	w19, w0
    e138:	mov	x0, sp
    e13c:	bl	4a10 <mpc_clear@plt>
    e140:	mov	w0, w19
    e144:	ldp	x20, x19, [sp, #96]
    e148:	ldr	x21, [sp, #88]
    e14c:	ldp	x29, x30, [sp, #72]
    e150:	ldr	d8, [sp, #64]
    e154:	add	sp, sp, #0x70
    e158:	ret

000000000000e15c <mpc_pow_si@@Base>:
    e15c:	mov	w4, w3
    e160:	tbnz	x2, #63, e16c <mpc_pow_si@@Base+0x10>
    e164:	mov	w3, #0x1                   	// #1
    e168:	b	4df0 <mpc_pow_usi@plt>
    e16c:	neg	x2, x2
    e170:	mov	w3, #0xffffffff            	// #-1
    e174:	b	4df0 <mpc_pow_usi@plt>

000000000000e178 <mpc_pow_usi@@Base>:
    e178:	sub	sp, sp, #0x170
    e17c:	stp	x20, x19, [sp, #352]
    e180:	mov	x20, x0
    e184:	mov	x0, x1
    e188:	stp	x29, x30, [sp, #272]
    e18c:	stp	x28, x27, [sp, #288]
    e190:	stp	x26, x25, [sp, #304]
    e194:	stp	x24, x23, [sp, #320]
    e198:	stp	x22, x21, [sp, #336]
    e19c:	add	x29, sp, #0x110
    e1a0:	mov	w19, w4
    e1a4:	mov	w23, w3
    e1a8:	mov	x22, x2
    e1ac:	mov	x21, x1
    e1b0:	bl	54d0 <mpfr_number_p@plt>
    e1b4:	cbz	w0, e1d4 <mpc_pow_usi@@Base+0x5c>
    e1b8:	add	x0, x21, #0x20
    e1bc:	bl	54d0 <mpfr_number_p@plt>
    e1c0:	cbz	w0, e1d4 <mpc_pow_usi@@Base+0x5c>
    e1c4:	ldr	x24, [x21, #16]
    e1c8:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    e1cc:	cmp	x24, x8
    e1d0:	b.ne	e254 <mpc_pow_usi@@Base+0xdc>  // b.any
    e1d4:	sub	x0, x29, #0x48
    e1d8:	mov	w1, #0x40                  	// #64
    e1dc:	mov	w2, #0x1                   	// #1
    e1e0:	bl	53c0 <mpc_init3@plt>
    e1e4:	cmp	w23, #0x1
    e1e8:	b.lt	e200 <mpc_pow_usi@@Base+0x88>  // b.tstop
    e1ec:	sub	x0, x29, #0x48
    e1f0:	mov	x1, x22
    e1f4:	mov	w2, wzr
    e1f8:	bl	4ce0 <mpc_set_ui@plt>
    e1fc:	b	e210 <mpc_pow_usi@@Base+0x98>
    e200:	neg	x1, x22
    e204:	sub	x0, x29, #0x48
    e208:	mov	w2, wzr
    e20c:	bl	5020 <mpc_set_si@plt>
    e210:	sub	x2, x29, #0x48
    e214:	mov	x0, x20
    e218:	mov	x1, x21
    e21c:	mov	w3, w19
    e220:	bl	5240 <mpc_pow@plt>
    e224:	mov	w19, w0
    e228:	sub	x0, x29, #0x48
    e22c:	bl	4a10 <mpc_clear@plt>
    e230:	mov	w0, w19
    e234:	ldp	x20, x19, [sp, #352]
    e238:	ldp	x22, x21, [sp, #336]
    e23c:	ldp	x24, x23, [sp, #320]
    e240:	ldp	x26, x25, [sp, #304]
    e244:	ldp	x28, x27, [sp, #288]
    e248:	ldp	x29, x30, [sp, #272]
    e24c:	add	sp, sp, #0x170
    e250:	ret
    e254:	cbz	x22, e1d4 <mpc_pow_usi@@Base+0x5c>
    e258:	ldr	x25, [x21, #48]
    e25c:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
    e260:	cmp	x25, x8
    e264:	b.eq	e1d4 <mpc_pow_usi@@Base+0x5c>  // b.none
    e268:	cmp	x22, #0x1
    e26c:	b.ne	e290 <mpc_pow_usi@@Base+0x118>  // b.any
    e270:	cmp	w23, #0x1
    e274:	b.lt	e558 <mpc_pow_usi@@Base+0x3e0>  // b.tstop
    e278:	mov	x0, x20
    e27c:	mov	x1, x21
    e280:	mov	w2, w19
    e284:	bl	5580 <mpc_set@plt>
    e288:	mov	w19, w0
    e28c:	b	e230 <mpc_pow_usi@@Base+0xb8>
    e290:	cmp	x22, #0x2
    e294:	b.ne	e2b8 <mpc_pow_usi@@Base+0x140>  // b.any
    e298:	cmp	w23, #0x1
    e29c:	b.lt	e2b8 <mpc_pow_usi@@Base+0x140>  // b.tstop
    e2a0:	mov	x0, x20
    e2a4:	mov	x1, x21
    e2a8:	mov	w2, w19
    e2ac:	bl	4f30 <mpc_sqr@plt>
    e2b0:	mov	w19, w0
    e2b4:	b	e230 <mpc_pow_usi@@Base+0xb8>
    e2b8:	cmp	x24, x25
    e2bc:	csel	x26, x24, x25, gt
    e2c0:	bl	5200 <mpfr_get_emax@plt>
    e2c4:	sdiv	x8, x0, x22
    e2c8:	cmp	x26, x8
    e2cc:	b.gt	e1d4 <mpc_pow_usi@@Base+0x5c>
    e2d0:	cmp	x25, x24
    e2d4:	csel	x24, x24, x25, gt
    e2d8:	bl	5060 <mpfr_get_emin@plt>
    e2dc:	sdiv	x8, x0, x22
    e2e0:	cmp	x8, x24
    e2e4:	b.gt	e1d4 <mpc_pow_usi@@Base+0x5c>
    e2e8:	cmp	x22, #0x4
    e2ec:	and	x27, x22, x22, lsr #1
    e2f0:	mov	x28, xzr
    e2f4:	b.cc	e30c <mpc_pow_usi@@Base+0x194>  // b.lo, b.ul, b.last
    e2f8:	mov	x8, x22
    e2fc:	cmp	x8, #0x7
    e300:	lsr	x8, x8, #1
    e304:	add	x28, x28, #0x1
    e308:	b.hi	e2fc <mpc_pow_usi@@Base+0x184>  // b.pmore
    e30c:	ldr	x8, [x20]
    e310:	ldr	x9, [x20, #32]
    e314:	add	x0, sp, #0x88
    e318:	add	x26, sp, #0x88
    e31c:	cmp	x8, x9
    e320:	csel	x8, x8, x9, gt
    e324:	add	x8, x28, x8
    e328:	add	x25, x8, #0x22
    e32c:	mov	x1, x25
    e330:	bl	4cf0 <mpc_init2@plt>
    e334:	cbz	x27, e344 <mpc_pow_usi@@Base+0x1cc>
    e338:	add	x0, sp, #0x48
    e33c:	mov	x1, x25
    e340:	bl	4cf0 <mpc_init2@plt>
    e344:	add	x8, x26, #0x20
    e348:	str	x8, [sp, #32]
    e34c:	mov	x8, #0xfffffffffffffffb    	// #-5
    e350:	add	x9, x28, #0x5
    e354:	tst	w19, #0xf
    e358:	str	x9, [sp, #24]
    e35c:	neg	x9, x22
    e360:	sub	x8, x8, x28
    e364:	str	x9, [sp, #8]
    e368:	mov	w9, #0x1                   	// #1
    e36c:	stp	x8, x27, [sp, #56]
    e370:	cset	w8, eq  // eq = none
    e374:	str	x8, [sp, #48]
    e378:	cmp	w19, #0x10
    e37c:	lsl	x8, x9, x28
    e380:	mov	w24, wzr
    e384:	cset	w9, cc  // cc = lo, ul, last
    e388:	and	x8, x8, x22
    e38c:	str	x9, [sp, #16]
    e390:	str	x8, [sp, #40]
    e394:	add	x0, sp, #0x88
    e398:	mov	x1, x21
    e39c:	mov	w2, wzr
    e3a0:	bl	4f30 <mpc_sqr@plt>
    e3a4:	cbz	x27, e3d4 <mpc_pow_usi@@Base+0x25c>
    e3a8:	add	x0, sp, #0x48
    e3ac:	add	x1, sp, #0x88
    e3b0:	mov	x2, x21
    e3b4:	mov	w3, wzr
    e3b8:	bl	4ed0 <mpc_mul@plt>
    e3bc:	ldr	x8, [sp, #40]
    e3c0:	cbz	x8, e3d4 <mpc_pow_usi@@Base+0x25c>
    e3c4:	add	x0, sp, #0x88
    e3c8:	add	x1, sp, #0x48
    e3cc:	mov	w2, wzr
    e3d0:	bl	5580 <mpc_set@plt>
    e3d4:	cmp	x28, #0x1
    e3d8:	b.lt	e45c <mpc_pow_usi@@Base+0x2e4>  // b.tstop
    e3dc:	mov	x27, x28
    e3e0:	b	e404 <mpc_pow_usi@@Base+0x28c>
    e3e4:	add	x0, sp, #0x88
    e3e8:	add	x1, sp, #0x88
    e3ec:	mov	x2, x21
    e3f0:	mov	w3, wzr
    e3f4:	bl	4ed0 <mpc_mul@plt>
    e3f8:	cmp	x26, #0x0
    e3fc:	mov	x27, x26
    e400:	b.le	e45c <mpc_pow_usi@@Base+0x2e4>
    e404:	add	x0, sp, #0x88
    e408:	add	x1, sp, #0x88
    e40c:	mov	w2, wzr
    e410:	sub	x26, x27, #0x1
    e414:	bl	4f30 <mpc_sqr@plt>
    e418:	lsr	x8, x22, x26
    e41c:	tbz	w8, #0, e3f8 <mpc_pow_usi@@Base+0x280>
    e420:	subs	x27, x27, #0x2
    e424:	b.lt	e3e4 <mpc_pow_usi@@Base+0x26c>  // b.tstop
    e428:	lsr	x8, x22, x27
    e42c:	tbz	w8, #0, e3e4 <mpc_pow_usi@@Base+0x26c>
    e430:	add	x0, sp, #0x88
    e434:	add	x1, sp, #0x88
    e438:	mov	w2, wzr
    e43c:	bl	4f30 <mpc_sqr@plt>
    e440:	add	x0, sp, #0x88
    e444:	add	x1, sp, #0x88
    e448:	add	x2, sp, #0x48
    e44c:	mov	w3, wzr
    e450:	bl	4ed0 <mpc_mul@plt>
    e454:	mov	x26, x27
    e458:	b	e3f8 <mpc_pow_usi@@Base+0x280>
    e45c:	tbz	w23, #31, e474 <mpc_pow_usi@@Base+0x2fc>
    e460:	add	x0, sp, #0x88
    e464:	add	x2, sp, #0x88
    e468:	mov	w1, #0x1                   	// #1
    e46c:	mov	w3, wzr
    e470:	bl	55b0 <mpc_ui_div@plt>
    e474:	ldr	x8, [sp, #152]
    e478:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    e47c:	cmp	x8, x10
    e480:	b.eq	e574 <mpc_pow_usi@@Base+0x3fc>  // b.none
    e484:	ldr	x9, [sp, #184]
    e488:	cmp	x9, x10
    e48c:	b.eq	e574 <mpc_pow_usi@@Base+0x3fc>  // b.none
    e490:	ldr	x10, [sp, #56]
    e494:	sub	x26, x8, x9
    e498:	and	x9, x26, x26, asr #63
    e49c:	ldr	x8, [x20]
    e4a0:	add	x10, x10, x25
    e4a4:	add	x1, x10, x9
    e4a8:	ldr	x9, [sp, #48]
    e4ac:	add	x0, sp, #0x88
    e4b0:	mov	w3, #0x1                   	// #1
    e4b4:	mov	w2, wzr
    e4b8:	add	x4, x8, x9
    e4bc:	bl	5450 <mpfr_can_round@plt>
    e4c0:	cbz	w0, e4f4 <mpc_pow_usi@@Base+0x37c>
    e4c4:	ldp	x10, x0, [sp, #24]
    e4c8:	cmp	x26, #0x0
    e4cc:	csel	x9, xzr, x26, lt  // lt = tstop
    e4d0:	ldr	x8, [x20, #32]
    e4d4:	add	x9, x10, x9
    e4d8:	sub	x1, x25, x9
    e4dc:	ldr	x9, [sp, #16]
    e4e0:	mov	w3, #0x1                   	// #1
    e4e4:	mov	w2, wzr
    e4e8:	add	x4, x8, x9
    e4ec:	bl	5450 <mpfr_can_round@plt>
    e4f0:	cbnz	w0, e5e4 <mpc_pow_usi@@Base+0x46c>
    e4f4:	cbnz	w24, e574 <mpc_pow_usi@@Base+0x3fc>
    e4f8:	ldr	x8, [x20]
    e4fc:	ldr	x9, [x20, #32]
    e500:	cmp	x26, #0x0
    e504:	cneg	x10, x26, mi  // mi = first
    e508:	cmp	x8, x9
    e50c:	csel	x8, x8, x9, gt
    e510:	cmp	x10, x8
    e514:	b.ge	e574 <mpc_pow_usi@@Base+0x3fc>  // b.tcont
    e518:	ldr	x8, [x21]
    e51c:	ldr	x9, [x21, #32]
    e520:	add	x0, sp, #0x88
    e524:	cmp	x8, x9
    e528:	csel	x8, x8, x9, gt
    e52c:	add	x25, x8, x25
    e530:	mov	x1, x25
    e534:	bl	4c00 <mpc_set_prec@plt>
    e538:	ldr	x27, [sp, #64]
    e53c:	mov	w24, #0x1                   	// #1
    e540:	cbz	x27, e394 <mpc_pow_usi@@Base+0x21c>
    e544:	add	x0, sp, #0x48
    e548:	mov	x1, x25
    e54c:	bl	4c00 <mpc_set_prec@plt>
    e550:	mov	w24, #0x1                   	// #1
    e554:	b	e394 <mpc_pow_usi@@Base+0x21c>
    e558:	mov	w1, #0x1                   	// #1
    e55c:	mov	x0, x20
    e560:	mov	x2, x21
    e564:	mov	w3, w19
    e568:	bl	55b0 <mpc_ui_div@plt>
    e56c:	mov	w19, w0
    e570:	b	e230 <mpc_pow_usi@@Base+0xb8>
    e574:	sub	x0, x29, #0x48
    e578:	mov	w1, #0x40                  	// #64
    e57c:	mov	w2, #0x1                   	// #1
    e580:	bl	53c0 <mpc_init3@plt>
    e584:	sub	x0, x29, #0x48
    e588:	cmp	w23, #0x1
    e58c:	b.lt	e5a0 <mpc_pow_usi@@Base+0x428>  // b.tstop
    e590:	mov	x1, x22
    e594:	mov	w2, wzr
    e598:	bl	4ce0 <mpc_set_ui@plt>
    e59c:	b	e5ac <mpc_pow_usi@@Base+0x434>
    e5a0:	ldr	x1, [sp, #8]
    e5a4:	mov	w2, wzr
    e5a8:	bl	5020 <mpc_set_si@plt>
    e5ac:	ldr	x22, [sp, #64]
    e5b0:	sub	x2, x29, #0x48
    e5b4:	mov	x0, x20
    e5b8:	mov	x1, x21
    e5bc:	mov	w3, w19
    e5c0:	bl	5240 <mpc_pow@plt>
    e5c4:	mov	w19, w0
    e5c8:	sub	x0, x29, #0x48
    e5cc:	bl	4a10 <mpc_clear@plt>
    e5d0:	add	x0, sp, #0x88
    e5d4:	bl	4a10 <mpc_clear@plt>
    e5d8:	cbz	x22, e230 <mpc_pow_usi@@Base+0xb8>
    e5dc:	add	x0, sp, #0x48
    e5e0:	b	e22c <mpc_pow_usi@@Base+0xb4>
    e5e4:	add	x1, sp, #0x88
    e5e8:	mov	x0, x20
    e5ec:	mov	w2, w19
    e5f0:	bl	5580 <mpc_set@plt>
    e5f4:	ldr	x22, [sp, #64]
    e5f8:	mov	w19, w0
    e5fc:	b	e5d0 <mpc_pow_usi@@Base+0x458>

000000000000e600 <mpc_pow_ui@@Base>:
    e600:	mov	w4, w3
    e604:	mov	w3, #0x1                   	// #1
    e608:	b	4df0 <mpc_pow_usi@plt>

000000000000e60c <mpc_pow_z@@Base>:
    e60c:	sub	sp, sp, #0x80
    e610:	stp	x22, x21, [sp, #96]
    e614:	stp	x20, x19, [sp, #112]
    e618:	mov	x20, x1
    e61c:	mov	x21, x0
    e620:	mov	w1, #0x2                   	// #2
    e624:	mov	x0, x2
    e628:	stp	x29, x30, [sp, #64]
    e62c:	str	x23, [sp, #80]
    e630:	add	x29, sp, #0x40
    e634:	mov	w19, w3
    e638:	mov	x22, x2
    e63c:	bl	54b0 <__gmpz_sizeinbase@plt>
    e640:	ldr	w8, [x22, #4]
    e644:	mov	x23, x0
    e648:	tbnz	w8, #31, e66c <mpc_pow_z@@Base+0x60>
    e64c:	cmp	w8, #0x1
    e650:	b.hi	e6a0 <mpc_pow_z@@Base+0x94>  // b.pmore
    e654:	ldr	x9, [x22, #8]
    e658:	cmp	w8, #0x0
    e65c:	mov	w3, #0x1                   	// #1
    e660:	ldr	x9, [x9]
    e664:	csel	x2, xzr, x9, eq  // eq = none
    e668:	b	e688 <mpc_pow_z@@Base+0x7c>
    e66c:	mov	x0, x22
    e670:	bl	4c60 <__gmpz_fits_slong_p@plt>
    e674:	cbz	w0, e6a0 <mpc_pow_z@@Base+0x94>
    e678:	mov	x0, x22
    e67c:	bl	49a0 <__gmpz_get_si@plt>
    e680:	neg	x2, x0
    e684:	mov	w3, #0xffffffff            	// #-1
    e688:	mov	x0, x21
    e68c:	mov	x1, x20
    e690:	mov	w4, w19
    e694:	bl	4df0 <mpc_pow_usi@plt>
    e698:	mov	w19, w0
    e69c:	b	e6e4 <mpc_pow_z@@Base+0xd8>
    e6a0:	cmp	x23, #0x1
    e6a4:	csinc	x1, x23, xzr, gt
    e6a8:	mov	x0, sp
    e6ac:	mov	w2, #0x1                   	// #1
    e6b0:	bl	53c0 <mpc_init3@plt>
    e6b4:	mov	x0, sp
    e6b8:	mov	x1, x22
    e6bc:	mov	w2, wzr
    e6c0:	bl	50a0 <mpc_set_z@plt>
    e6c4:	mov	x2, sp
    e6c8:	mov	x0, x21
    e6cc:	mov	x1, x20
    e6d0:	mov	w3, w19
    e6d4:	bl	5240 <mpc_pow@plt>
    e6d8:	mov	w19, w0
    e6dc:	mov	x0, sp
    e6e0:	bl	4a10 <mpc_clear@plt>
    e6e4:	mov	w0, w19
    e6e8:	ldp	x20, x19, [sp, #112]
    e6ec:	ldp	x22, x21, [sp, #96]
    e6f0:	ldr	x23, [sp, #80]
    e6f4:	ldp	x29, x30, [sp, #64]
    e6f8:	add	sp, sp, #0x80
    e6fc:	ret

000000000000e700 <mpc_proj@@Base>:
    e700:	stp	x29, x30, [sp, #-48]!
    e704:	stp	x20, x19, [sp, #32]
    e708:	ldr	x9, [x1, #16]
    e70c:	mov	x8, #0x8000000000000003    	// #-9223372036854775805
    e710:	mov	x19, x1
    e714:	mov	x20, x0
    e718:	cmp	x9, x8
    e71c:	str	x21, [sp, #16]
    e720:	mov	x29, sp
    e724:	b.eq	e734 <mpc_proj@@Base+0x34>  // b.none
    e728:	ldr	x9, [x19, #48]
    e72c:	cmp	x9, x8
    e730:	b.ne	e76c <mpc_proj@@Base+0x6c>  // b.any
    e734:	mov	w1, #0x1                   	// #1
    e738:	mov	x0, x20
    e73c:	mov	w21, #0x1                   	// #1
    e740:	bl	5120 <mpfr_set_inf@plt>
    e744:	ldr	w8, [x19, #40]
    e748:	add	x0, x20, #0x20
    e74c:	cmp	w8, #0x0
    e750:	cneg	w1, w21, lt  // lt = tstop
    e754:	bl	4d10 <mpfr_set_zero@plt>
    e758:	ldp	x20, x19, [sp, #32]
    e75c:	ldr	x21, [sp, #16]
    e760:	mov	w0, wzr
    e764:	ldp	x29, x30, [sp], #48
    e768:	ret
    e76c:	mov	x0, x20
    e770:	mov	x1, x19
    e774:	ldp	x20, x19, [sp, #32]
    e778:	ldr	x21, [sp, #16]
    e77c:	ldp	x29, x30, [sp], #48
    e780:	b	5580 <mpc_set@plt>

000000000000e784 <mpc_real@@Base>:
    e784:	ldr	w3, [x1, #8]
    e788:	b	51d0 <mpfr_set4@plt>

000000000000e78c <mpc_rootofunity@@Base>:
    e78c:	sub	sp, sp, #0xd0
    e790:	stp	x20, x19, [sp, #192]
    e794:	mov	x19, x0
    e798:	stp	x29, x30, [sp, #128]
    e79c:	stp	x26, x25, [sp, #144]
    e7a0:	stp	x24, x23, [sp, #160]
    e7a4:	stp	x22, x21, [sp, #176]
    e7a8:	add	x29, sp, #0x80
    e7ac:	cbz	x1, e810 <mpc_rootofunity@@Base+0x84>
    e7b0:	udiv	x8, x2, x1
    e7b4:	msub	x8, x8, x1, x2
    e7b8:	mov	w20, w3
    e7bc:	mov	x10, x1
    e7c0:	mov	x9, x8
    e7c4:	mov	x11, x9
    e7c8:	mov	x9, x10
    e7cc:	udiv	x10, x11, x10
    e7d0:	msub	x10, x10, x9, x11
    e7d4:	cbnz	x10, e7c4 <mpc_rootofunity@@Base+0x38>
    e7d8:	udiv	x24, x1, x9
    e7dc:	cmp	x24, #0x4
    e7e0:	udiv	x21, x8, x9
    e7e4:	b.eq	e840 <mpc_rootofunity@@Base+0xb4>  // b.none
    e7e8:	cmp	x24, #0x2
    e7ec:	b.eq	e828 <mpc_rootofunity@@Base+0x9c>  // b.none
    e7f0:	cmp	x24, #0x1
    e7f4:	b.ne	e86c <mpc_rootofunity@@Base+0xe0>  // b.any
    e7f8:	cmp	x9, x8
    e7fc:	b.ls	ecfc <mpc_rootofunity@@Base+0x570>  // b.plast
    e800:	mov	w1, #0x1                   	// #1
    e804:	mov	x0, x19
    e808:	mov	x2, xzr
    e80c:	b	e860 <mpc_rootofunity@@Base+0xd4>
    e810:	mov	x0, x19
    e814:	bl	4a40 <mpfr_set_nan@plt>
    e818:	add	x0, x19, #0x20
    e81c:	bl	4a40 <mpfr_set_nan@plt>
    e820:	mov	w0, wzr
    e824:	b	ece0 <mpc_rootofunity@@Base+0x554>
    e828:	cmp	x21, #0x1
    e82c:	b.ne	ed2c <mpc_rootofunity@@Base+0x5a0>  // b.any
    e830:	mov	x1, #0xffffffffffffffff    	// #-1
    e834:	mov	x0, x19
    e838:	mov	x2, xzr
    e83c:	b	e95c <mpc_rootofunity@@Base+0x1d0>
    e840:	orr	x8, x21, #0x2
    e844:	cmp	x8, #0x3
    e848:	b.ne	ed5c <mpc_rootofunity@@Base+0x5d0>  // b.any
    e84c:	cmp	x21, #0x1
    e850:	b.ne	e950 <mpc_rootofunity@@Base+0x1c4>  // b.any
    e854:	mov	w2, #0x1                   	// #1
    e858:	mov	x0, x19
    e85c:	mov	x1, xzr
    e860:	mov	w3, w20
    e864:	bl	5040 <mpc_set_ui_ui@plt>
    e868:	b	ece0 <mpc_rootofunity@@Base+0x554>
    e86c:	sub	x8, x24, #0x3
    e870:	cmp	x8, #0x9
    e874:	b.hi	eb3c <mpc_rootofunity@@Base+0x3b0>  // b.pmore
    e878:	adrp	x9, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    e87c:	add	x9, x9, #0xa59
    e880:	adr	x10, e890 <mpc_rootofunity@@Base+0x104>
    e884:	ldrb	w11, [x9, x8]
    e888:	add	x10, x10, x11, lsl #2
    e88c:	br	x10
    e890:	cmp	x24, #0x3
    e894:	b.ne	e8a4 <mpc_rootofunity@@Base+0x118>  // b.any
    e898:	sub	x8, x21, #0x1
    e89c:	cmp	x8, #0x2
    e8a0:	b.cc	e8b8 <mpc_rootofunity@@Base+0x12c>  // b.lo, b.ul, b.last
    e8a4:	cmp	x24, #0x6
    e8a8:	b.ne	ed8c <mpc_rootofunity@@Base+0x600>  // b.any
    e8ac:	orr	x8, x21, #0x4
    e8b0:	cmp	x8, #0x5
    e8b4:	b.ne	ed8c <mpc_rootofunity@@Base+0x600>  // b.any
    e8b8:	cmp	x24, #0x3
    e8bc:	mov	x8, #0xffffffffffffffff    	// #-1
    e8c0:	cneg	x1, x8, ne  // ne = any
    e8c4:	and	w3, w20, #0xf
    e8c8:	mov	x0, x19
    e8cc:	mov	x2, xzr
    e8d0:	bl	49e0 <mpfr_set_si_2exp@plt>
    e8d4:	asr	w8, w20, #4
    e8d8:	mov	w24, #0x2                   	// #2
    e8dc:	cmp	w8, #0x3
    e8e0:	mov	w9, #0x3                   	// #3
    e8e4:	csel	w10, w24, w8, eq  // eq = none
    e8e8:	cmp	w8, #0x2
    e8ec:	csel	w9, w9, w10, eq  // eq = none
    e8f0:	cmp	x21, #0x1
    e8f4:	add	x23, x19, #0x20
    e8f8:	mov	w22, w0
    e8fc:	csel	w2, w9, w8, ne  // ne = any
    e900:	mov	w1, #0x3                   	// #3
    e904:	mov	x0, x23
    e908:	bl	5280 <mpfr_sqrt_ui@plt>
    e90c:	mov	w20, w0
    e910:	mov	w2, #0x1                   	// #1
    e914:	mov	x0, x19
    e918:	mov	x1, x19
    e91c:	mov	w3, wzr
    e920:	bl	5530 <mpc_div_2ui@plt>
    e924:	cmp	x21, #0x1
    e928:	b.eq	e940 <mpc_rootofunity@@Base+0x1b4>  // b.none
    e92c:	mov	x0, x23
    e930:	mov	x1, x23
    e934:	mov	w2, wzr
    e938:	bl	4b80 <mpfr_neg@plt>
    e93c:	neg	w20, w20
    e940:	cmp	w22, #0x0
    e944:	cset	w8, ne  // ne = any
    e948:	csel	w8, w24, w8, lt  // lt = tstop
    e94c:	b	ecc8 <mpc_rootofunity@@Base+0x53c>
    e950:	mov	x2, #0xffffffffffffffff    	// #-1
    e954:	mov	x0, x19
    e958:	mov	x1, xzr
    e95c:	mov	w3, w20
    e960:	bl	52c0 <mpc_set_si_si@plt>
    e964:	b	ece0 <mpc_rootofunity@@Base+0x554>
    e968:	sub	x8, x21, #0x1
    e96c:	ror	x8, x8, #1
    e970:	cmp	x8, #0x5
    e974:	b.hi	edbc <mpc_rootofunity@@Base+0x630>  // b.pmore
    e978:	mov	w9, #0x1                   	// #1
    e97c:	lsl	x8, x9, x8
    e980:	mov	w9, #0x2d                  	// #45
    e984:	tst	x8, x9
    e988:	b.eq	edbc <mpc_rootofunity@@Base+0x630>  // b.none
    e98c:	and	w8, w20, #0xf
    e990:	mov	w23, #0x2                   	// #2
    e994:	cmp	w8, #0x3
    e998:	orr	x24, x21, #0x2
    e99c:	mov	w9, #0x3                   	// #3
    e9a0:	csel	w10, w23, w8, eq  // eq = none
    e9a4:	cmp	w8, #0x2
    e9a8:	csel	w9, w9, w10, eq  // eq = none
    e9ac:	cmp	x24, #0x7
    e9b0:	csel	w2, w9, w8, eq  // eq = none
    e9b4:	mov	w1, #0x3                   	// #3
    e9b8:	mov	x0, x19
    e9bc:	bl	5280 <mpfr_sqrt_ui@plt>
    e9c0:	cmp	x21, #0x6
    e9c4:	mov	w8, #0x1                   	// #1
    e9c8:	mov	w22, w0
    e9cc:	add	x0, x19, #0x20
    e9d0:	cneg	x1, x8, cs  // cs = hs, nlast
    e9d4:	asr	w3, w20, #4
    e9d8:	mov	x2, xzr
    e9dc:	bl	49e0 <mpfr_set_si_2exp@plt>
    e9e0:	mov	w20, w0
    e9e4:	mov	w2, #0x1                   	// #1
    e9e8:	mov	x0, x19
    e9ec:	mov	x1, x19
    e9f0:	mov	w3, wzr
    e9f4:	bl	5530 <mpc_div_2ui@plt>
    e9f8:	cmp	x24, #0x7
    e9fc:	b.ne	ea14 <mpc_rootofunity@@Base+0x288>  // b.any
    ea00:	mov	x0, x19
    ea04:	mov	x1, x19
    ea08:	mov	w2, wzr
    ea0c:	bl	4b80 <mpfr_neg@plt>
    ea10:	neg	w22, w22
    ea14:	cmp	w22, #0x0
    ea18:	cset	w8, ne  // ne = any
    ea1c:	csel	w8, w23, w8, lt  // lt = tstop
    ea20:	cmp	w20, #0x0
    ea24:	cset	w9, ne  // ne = any
    ea28:	lsl	w9, w9, #2
    ea2c:	mov	w10, #0x8                   	// #8
    ea30:	csel	w9, w10, w9, lt  // lt = tstop
    ea34:	orr	w0, w8, w9
    ea38:	b	ece0 <mpc_rootofunity@@Base+0x554>
    ea3c:	cmp	x21, #0x7
    ea40:	b.hi	edec <mpc_rootofunity@@Base+0x660>  // b.pmore
    ea44:	mov	w8, #0x1                   	// #1
    ea48:	lsl	x8, x8, x21
    ea4c:	mov	w9, #0xaa                  	// #170
    ea50:	tst	x8, x9
    ea54:	b.eq	edec <mpc_rootofunity@@Base+0x660>  // b.none
    ea58:	cmp	x21, #0x5
    ea5c:	and	w2, w20, #0xf
    ea60:	b.eq	ea6c <mpc_rootofunity@@Base+0x2e0>  // b.none
    ea64:	cmp	x21, #0x3
    ea68:	b.ne	ea84 <mpc_rootofunity@@Base+0x2f8>  // b.any
    ea6c:	cmp	w2, #0x3
    ea70:	mov	w8, #0x2                   	// #2
    ea74:	csel	w8, w8, w2, eq  // eq = none
    ea78:	cmp	w2, #0x2
    ea7c:	mov	w9, #0x3                   	// #3
    ea80:	csel	w2, w9, w8, eq  // eq = none
    ea84:	asr	w8, w20, #4
    ea88:	mov	w9, #0x2                   	// #2
    ea8c:	cmp	w8, #0x3
    ea90:	mov	w10, #0x3                   	// #3
    ea94:	csel	w9, w9, w8, eq  // eq = none
    ea98:	cmp	w8, #0x2
    ea9c:	csel	w9, w10, w9, eq  // eq = none
    eaa0:	cmp	x21, #0x4
    eaa4:	mov	w1, #0x2                   	// #2
    eaa8:	mov	x0, x19
    eaac:	csel	w22, w9, w8, hi  // hi = pmore
    eab0:	bl	5280 <mpfr_sqrt_ui@plt>
    eab4:	add	x23, x19, #0x20
    eab8:	mov	w20, w0
    eabc:	mov	w1, #0x2                   	// #2
    eac0:	mov	x0, x23
    eac4:	mov	w2, w22
    eac8:	bl	5280 <mpfr_sqrt_ui@plt>
    eacc:	mov	w22, w0
    ead0:	mov	w2, #0x1                   	// #1
    ead4:	mov	x0, x19
    ead8:	mov	x1, x19
    eadc:	mov	w3, wzr
    eae0:	bl	5530 <mpc_div_2ui@plt>
    eae4:	cmp	x21, #0x5
    eae8:	b.eq	eaf4 <mpc_rootofunity@@Base+0x368>  // b.none
    eaec:	cmp	x21, #0x3
    eaf0:	b.ne	eb08 <mpc_rootofunity@@Base+0x37c>  // b.any
    eaf4:	mov	x0, x19
    eaf8:	mov	x1, x19
    eafc:	mov	w2, wzr
    eb00:	bl	4b80 <mpfr_neg@plt>
    eb04:	neg	w20, w20
    eb08:	cmp	x21, #0x5
    eb0c:	b.cc	eb24 <mpc_rootofunity@@Base+0x398>  // b.lo, b.ul, b.last
    eb10:	mov	x0, x23
    eb14:	mov	x1, x23
    eb18:	mov	w2, wzr
    eb1c:	bl	4b80 <mpfr_neg@plt>
    eb20:	neg	w22, w22
    eb24:	cmp	w20, #0x0
    eb28:	mov	w8, #0x2                   	// #2
    eb2c:	cset	w9, ne  // ne = any
    eb30:	csel	w8, w8, w9, lt  // lt = tstop
    eb34:	cmp	w22, #0x0
    eb38:	b	eccc <mpc_rootofunity@@Base+0x540>
    eb3c:	mov	x22, x19
    eb40:	ldr	x8, [x19]
    eb44:	ldr	x9, [x22, #32]!
    eb48:	add	x0, sp, #0x40
    eb4c:	mov	w1, #0x43                  	// #67
    eb50:	cmp	x8, x9
    eb54:	csel	x23, x8, x9, gt
    eb58:	bl	5440 <mpfr_init2@plt>
    eb5c:	add	x0, sp, #0x20
    eb60:	mov	w1, #0x43                  	// #67
    eb64:	bl	5440 <mpfr_init2@plt>
    eb68:	mov	x0, sp
    eb6c:	mov	w1, #0x43                  	// #67
    eb70:	bl	5440 <mpfr_init2@plt>
    eb74:	sub	x0, x29, #0x20
    eb78:	bl	52b0 <__gmpq_init@plt>
    eb7c:	sub	x0, x29, #0x20
    eb80:	mov	x1, x21
    eb84:	mov	x2, x24
    eb88:	bl	5100 <__gmpq_set_ui@plt>
    eb8c:	sub	x0, x29, #0x20
    eb90:	sub	x1, x29, #0x20
    eb94:	mov	w2, #0x1                   	// #1
    eb98:	bl	5570 <__gmpq_mul_2exp@plt>
    eb9c:	and	w21, w20, #0xf
    eba0:	tst	w20, #0xf
    eba4:	asr	w20, w20, #4
    eba8:	cset	w24, eq  // eq = none
    ebac:	cmp	w20, #0x0
    ebb0:	cset	w25, eq  // eq = none
    ebb4:	mov	x0, x23
    ebb8:	bl	4d20 <mpc_ceil_log2@plt>
    ebbc:	add	x26, x23, x0
    ebc0:	add	x23, x26, #0x5
    ebc4:	add	x0, sp, #0x40
    ebc8:	mov	x1, x23
    ebcc:	bl	4c80 <mpfr_set_prec@plt>
    ebd0:	add	x0, sp, #0x20
    ebd4:	mov	x1, x23
    ebd8:	bl	4c80 <mpfr_set_prec@plt>
    ebdc:	mov	x0, sp
    ebe0:	mov	x1, x23
    ebe4:	bl	4c80 <mpfr_set_prec@plt>
    ebe8:	add	x0, sp, #0x40
    ebec:	mov	w1, wzr
    ebf0:	bl	4a80 <mpfr_const_pi@plt>
    ebf4:	add	x0, sp, #0x40
    ebf8:	add	x1, sp, #0x40
    ebfc:	sub	x2, x29, #0x20
    ec00:	mov	w3, wzr
    ec04:	bl	49d0 <mpfr_mul_q@plt>
    ec08:	add	x0, sp, #0x20
    ec0c:	mov	x1, sp
    ec10:	add	x2, sp, #0x40
    ec14:	mov	w3, wzr
    ec18:	bl	5520 <mpfr_sin_cos@plt>
    ec1c:	ldr	x8, [sp, #16]
    ec20:	ldr	x9, [x19]
    ec24:	add	x26, x26, #0x1
    ec28:	mov	x0, sp
    ec2c:	add	x1, x26, x8
    ec30:	add	x4, x9, x24
    ec34:	mov	w3, #0x1                   	// #1
    ec38:	mov	w2, wzr
    ec3c:	bl	5450 <mpfr_can_round@plt>
    ec40:	cbz	w0, ebb4 <mpc_rootofunity@@Base+0x428>
    ec44:	ldr	x8, [sp, #48]
    ec48:	ldr	x9, [x22]
    ec4c:	add	x0, sp, #0x20
    ec50:	mov	w3, #0x1                   	// #1
    ec54:	add	x1, x26, x8
    ec58:	add	x4, x9, x25
    ec5c:	mov	w2, wzr
    ec60:	bl	5450 <mpfr_can_round@plt>
    ec64:	cbz	w0, ebb4 <mpc_rootofunity@@Base+0x428>
    ec68:	ldr	w3, [sp, #8]
    ec6c:	mov	x1, sp
    ec70:	mov	x0, x19
    ec74:	mov	w2, w21
    ec78:	bl	51d0 <mpfr_set4@plt>
    ec7c:	ldr	w3, [sp, #40]
    ec80:	mov	w19, w0
    ec84:	add	x1, sp, #0x20
    ec88:	mov	x0, x22
    ec8c:	mov	w2, w20
    ec90:	bl	51d0 <mpfr_set4@plt>
    ec94:	mov	w20, w0
    ec98:	add	x0, sp, #0x40
    ec9c:	bl	4d60 <mpfr_clear@plt>
    eca0:	add	x0, sp, #0x20
    eca4:	bl	4d60 <mpfr_clear@plt>
    eca8:	mov	x0, sp
    ecac:	bl	4d60 <mpfr_clear@plt>
    ecb0:	sub	x0, x29, #0x20
    ecb4:	bl	4fb0 <__gmpq_clear@plt>
    ecb8:	cmp	w19, #0x0
    ecbc:	mov	w8, #0x2                   	// #2
    ecc0:	cset	w9, ne  // ne = any
    ecc4:	csel	w8, w8, w9, lt  // lt = tstop
    ecc8:	cmp	w20, #0x0
    eccc:	cset	w9, ne  // ne = any
    ecd0:	lsl	w9, w9, #2
    ecd4:	mov	w10, #0x8                   	// #8
    ecd8:	csel	w9, w10, w9, lt  // lt = tstop
    ecdc:	orr	w0, w9, w8
    ece0:	ldp	x20, x19, [sp, #192]
    ece4:	ldp	x22, x21, [sp, #176]
    ece8:	ldp	x24, x23, [sp, #160]
    ecec:	ldp	x26, x25, [sp, #144]
    ecf0:	ldp	x29, x30, [sp, #128]
    ecf4:	add	sp, sp, #0xd0
    ecf8:	ret
    ecfc:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    ed00:	ldr	x8, [x8, #4008]
    ed04:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ed08:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ed0c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ed10:	ldr	x0, [x8]
    ed14:	add	x1, x1, #0x7c0
    ed18:	add	x2, x2, #0xa63
    ed1c:	add	x4, x4, #0xa71
    ed20:	mov	w3, #0x40                  	// #64
    ed24:	bl	55a0 <fprintf@plt>
    ed28:	bl	5000 <abort@plt>
    ed2c:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    ed30:	ldr	x8, [x8, #4008]
    ed34:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ed38:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ed3c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ed40:	ldr	x0, [x8]
    ed44:	add	x1, x1, #0x7c0
    ed48:	add	x2, x2, #0xa63
    ed4c:	add	x4, x4, #0xa78
    ed50:	mov	w3, #0x46                  	// #70
    ed54:	bl	55a0 <fprintf@plt>
    ed58:	bl	5000 <abort@plt>
    ed5c:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    ed60:	ldr	x8, [x8, #4008]
    ed64:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ed68:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ed6c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ed70:	ldr	x0, [x8]
    ed74:	add	x1, x1, #0x7c0
    ed78:	add	x2, x2, #0xa63
    ed7c:	add	x4, x4, #0xa7f
    ed80:	mov	w3, #0x4d                  	// #77
    ed84:	bl	55a0 <fprintf@plt>
    ed88:	bl	5000 <abort@plt>
    ed8c:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    ed90:	ldr	x8, [x8, #4008]
    ed94:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ed98:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ed9c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    eda0:	ldr	x0, [x8]
    eda4:	add	x1, x1, #0x7c0
    eda8:	add	x2, x2, #0xa63
    edac:	add	x4, x4, #0xa90
    edb0:	mov	w3, #0x56                  	// #86
    edb4:	bl	55a0 <fprintf@plt>
    edb8:	bl	5000 <abort@plt>
    edbc:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    edc0:	ldr	x8, [x8, #4008]
    edc4:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    edc8:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    edcc:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    edd0:	ldr	x0, [x8]
    edd4:	add	x1, x1, #0x7c0
    edd8:	add	x2, x2, #0xa63
    eddc:	add	x4, x4, #0xad1
    ede0:	mov	w3, #0x6f                  	// #111
    ede4:	bl	55a0 <fprintf@plt>
    ede8:	bl	5000 <abort@plt>
    edec:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    edf0:	ldr	x8, [x8, #4008]
    edf4:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    edf8:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    edfc:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    ee00:	ldr	x0, [x8]
    ee04:	add	x1, x1, #0x7c0
    ee08:	add	x2, x2, #0xa63
    ee0c:	add	x4, x4, #0xaf7
    ee10:	mov	w3, #0x86                  	// #134
    ee14:	bl	55a0 <fprintf@plt>
    ee18:	bl	5000 <abort@plt>

000000000000ee1c <mpc_urandom@@Base>:
    ee1c:	stp	x29, x30, [sp, #-48]!
    ee20:	str	x21, [sp, #16]
    ee24:	stp	x20, x19, [sp, #32]
    ee28:	mov	x29, sp
    ee2c:	mov	x19, x1
    ee30:	mov	x20, x0
    ee34:	bl	5500 <mpfr_urandomb@plt>
    ee38:	mov	w21, w0
    ee3c:	add	x0, x20, #0x20
    ee40:	mov	x1, x19
    ee44:	bl	5500 <mpfr_urandomb@plt>
    ee48:	cmp	w21, #0x0
    ee4c:	ldp	x20, x19, [sp, #32]
    ee50:	ldr	x21, [sp, #16]
    ee54:	cset	w8, ne  // ne = any
    ee58:	cmp	w0, #0x0
    ee5c:	cset	w9, ne  // ne = any
    ee60:	and	w0, w8, w9
    ee64:	ldp	x29, x30, [sp], #48
    ee68:	ret

000000000000ee6c <mpc_set@@Base>:
    ee6c:	stp	x29, x30, [sp, #-48]!
    ee70:	stp	x22, x21, [sp, #16]
    ee74:	stp	x20, x19, [sp, #32]
    ee78:	ldr	w3, [x1, #8]
    ee7c:	mov	w19, w2
    ee80:	and	w2, w2, #0xf
    ee84:	mov	x29, sp
    ee88:	mov	x20, x1
    ee8c:	mov	x21, x0
    ee90:	bl	51d0 <mpfr_set4@plt>
    ee94:	ldr	w3, [x20, #40]
    ee98:	mov	w22, w0
    ee9c:	add	x0, x21, #0x20
    eea0:	add	x1, x20, #0x20
    eea4:	asr	w2, w19, #4
    eea8:	bl	51d0 <mpfr_set4@plt>
    eeac:	cmp	w22, #0x0
    eeb0:	mov	w8, #0x2                   	// #2
    eeb4:	cset	w9, ne  // ne = any
    eeb8:	csel	w8, w8, w9, lt  // lt = tstop
    eebc:	cmp	w0, #0x0
    eec0:	cset	w9, ne  // ne = any
    eec4:	ldp	x20, x19, [sp, #32]
    eec8:	ldp	x22, x21, [sp, #16]
    eecc:	lsl	w9, w9, #2
    eed0:	mov	w10, #0x8                   	// #8
    eed4:	csel	w9, w10, w9, lt  // lt = tstop
    eed8:	orr	w0, w9, w8
    eedc:	ldp	x29, x30, [sp], #48
    eee0:	ret

000000000000eee4 <mpc_set_prec@@Base>:
    eee4:	stp	x29, x30, [sp, #-32]!
    eee8:	stp	x20, x19, [sp, #16]
    eeec:	mov	x29, sp
    eef0:	mov	x19, x1
    eef4:	mov	x20, x0
    eef8:	bl	4c80 <mpfr_set_prec@plt>
    eefc:	add	x0, x20, #0x20
    ef00:	mov	x1, x19
    ef04:	ldp	x20, x19, [sp, #16]
    ef08:	ldp	x29, x30, [sp], #32
    ef0c:	b	4c80 <mpfr_set_prec@plt>

000000000000ef10 <mpc_set_str@@Base>:
    ef10:	sub	sp, sp, #0x30
    ef14:	mov	w4, w3
    ef18:	mov	w3, w2
    ef1c:	add	x2, sp, #0x8
    ef20:	stp	x29, x30, [sp, #16]
    ef24:	stp	x20, x19, [sp, #32]
    ef28:	add	x29, sp, #0x10
    ef2c:	mov	x19, x0
    ef30:	bl	4f00 <mpc_strtoc@plt>
    ef34:	cmn	w0, #0x1
    ef38:	b.eq	ef74 <mpc_set_str@@Base+0x64>  // b.none
    ef3c:	mov	w20, w0
    ef40:	bl	5170 <__ctype_b_loc@plt>
    ef44:	ldr	x9, [sp, #8]
    ef48:	ldr	x10, [x0]
    ef4c:	ldrb	w8, [x9]
    ef50:	ldrh	w10, [x10, x8, lsl #1]
    ef54:	tbz	w10, #13, ef70 <mpc_set_str@@Base+0x60>
    ef58:	add	x9, x9, #0x1
    ef5c:	str	x9, [sp, #8]
    ef60:	ldr	x10, [x0]
    ef64:	ldrb	w8, [x9], #1
    ef68:	ldrh	w10, [x10, x8, lsl #1]
    ef6c:	tbnz	w10, #13, ef5c <mpc_set_str@@Base+0x4c>
    ef70:	cbz	w8, ef88 <mpc_set_str@@Base+0x78>
    ef74:	mov	x0, x19
    ef78:	bl	4a40 <mpfr_set_nan@plt>
    ef7c:	add	x0, x19, #0x20
    ef80:	bl	4a40 <mpfr_set_nan@plt>
    ef84:	mov	w20, #0xffffffff            	// #-1
    ef88:	mov	w0, w20
    ef8c:	ldp	x20, x19, [sp, #32]
    ef90:	ldp	x29, x30, [sp, #16]
    ef94:	add	sp, sp, #0x30
    ef98:	ret

000000000000ef9c <mpc_set_fr@@Base>:
    ef9c:	stp	x29, x30, [sp, #-32]!
    efa0:	and	w2, w2, #0xf
    efa4:	str	x19, [sp, #16]
    efa8:	mov	x29, sp
    efac:	mov	x19, x0
    efb0:	bl	4e80 <mpfr_set@plt>
    efb4:	mov	w8, #0x1                   	// #1
    efb8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    efbc:	str	w8, [x19, #40]
    efc0:	str	x9, [x19, #48]
    efc4:	ldr	x19, [sp, #16]
    efc8:	cmp	w0, #0x0
    efcc:	cset	w8, ne  // ne = any
    efd0:	mov	w10, #0x2                   	// #2
    efd4:	csel	w0, w10, w8, lt  // lt = tstop
    efd8:	ldp	x29, x30, [sp], #32
    efdc:	ret

000000000000efe0 <mpc_set_d@@Base>:
    efe0:	stp	x29, x30, [sp, #-32]!
    efe4:	and	w1, w1, #0xf
    efe8:	str	x19, [sp, #16]
    efec:	mov	x29, sp
    eff0:	mov	x19, x0
    eff4:	bl	4c30 <mpfr_set_d@plt>
    eff8:	mov	w8, #0x1                   	// #1
    effc:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f000:	str	w8, [x19, #40]
    f004:	str	x9, [x19, #48]
    f008:	ldr	x19, [sp, #16]
    f00c:	cmp	w0, #0x0
    f010:	cset	w8, ne  // ne = any
    f014:	mov	w10, #0x2                   	// #2
    f018:	csel	w0, w10, w8, lt  // lt = tstop
    f01c:	ldp	x29, x30, [sp], #32
    f020:	ret

000000000000f024 <mpc_set_ld@@Base>:
    f024:	stp	x29, x30, [sp, #-32]!
    f028:	and	w1, w1, #0xf
    f02c:	str	x19, [sp, #16]
    f030:	mov	x29, sp
    f034:	mov	x19, x0
    f038:	bl	49b0 <mpfr_set_ld@plt>
    f03c:	mov	w8, #0x1                   	// #1
    f040:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f044:	str	w8, [x19, #40]
    f048:	str	x9, [x19, #48]
    f04c:	ldr	x19, [sp, #16]
    f050:	cmp	w0, #0x0
    f054:	cset	w8, ne  // ne = any
    f058:	mov	w10, #0x2                   	// #2
    f05c:	csel	w0, w10, w8, lt  // lt = tstop
    f060:	ldp	x29, x30, [sp], #32
    f064:	ret

000000000000f068 <mpc_set_ui@@Base>:
    f068:	stp	x29, x30, [sp, #-32]!
    f06c:	and	w2, w2, #0xf
    f070:	str	x19, [sp, #16]
    f074:	mov	x29, sp
    f078:	mov	x19, x0
    f07c:	bl	5510 <mpfr_set_ui@plt>
    f080:	mov	w8, #0x1                   	// #1
    f084:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f088:	str	w8, [x19, #40]
    f08c:	str	x9, [x19, #48]
    f090:	ldr	x19, [sp, #16]
    f094:	cmp	w0, #0x0
    f098:	cset	w8, ne  // ne = any
    f09c:	mov	w10, #0x2                   	// #2
    f0a0:	csel	w0, w10, w8, lt  // lt = tstop
    f0a4:	ldp	x29, x30, [sp], #32
    f0a8:	ret

000000000000f0ac <mpc_set_si@@Base>:
    f0ac:	stp	x29, x30, [sp, #-32]!
    f0b0:	and	w2, w2, #0xf
    f0b4:	str	x19, [sp, #16]
    f0b8:	mov	x29, sp
    f0bc:	mov	x19, x0
    f0c0:	bl	5270 <mpfr_set_si@plt>
    f0c4:	mov	w8, #0x1                   	// #1
    f0c8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f0cc:	str	w8, [x19, #40]
    f0d0:	str	x9, [x19, #48]
    f0d4:	ldr	x19, [sp, #16]
    f0d8:	cmp	w0, #0x0
    f0dc:	cset	w8, ne  // ne = any
    f0e0:	mov	w10, #0x2                   	// #2
    f0e4:	csel	w0, w10, w8, lt  // lt = tstop
    f0e8:	ldp	x29, x30, [sp], #32
    f0ec:	ret

000000000000f0f0 <mpc_set_z@@Base>:
    f0f0:	stp	x29, x30, [sp, #-32]!
    f0f4:	and	w2, w2, #0xf
    f0f8:	str	x19, [sp, #16]
    f0fc:	mov	x29, sp
    f100:	mov	x19, x0
    f104:	bl	4ec0 <mpfr_set_z@plt>
    f108:	mov	w8, #0x1                   	// #1
    f10c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f110:	str	w8, [x19, #40]
    f114:	str	x9, [x19, #48]
    f118:	ldr	x19, [sp, #16]
    f11c:	cmp	w0, #0x0
    f120:	cset	w8, ne  // ne = any
    f124:	mov	w10, #0x2                   	// #2
    f128:	csel	w0, w10, w8, lt  // lt = tstop
    f12c:	ldp	x29, x30, [sp], #32
    f130:	ret

000000000000f134 <mpc_set_q@@Base>:
    f134:	stp	x29, x30, [sp, #-32]!
    f138:	and	w2, w2, #0xf
    f13c:	str	x19, [sp, #16]
    f140:	mov	x29, sp
    f144:	mov	x19, x0
    f148:	bl	5290 <mpfr_set_q@plt>
    f14c:	mov	w8, #0x1                   	// #1
    f150:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f154:	str	w8, [x19, #40]
    f158:	str	x9, [x19, #48]
    f15c:	ldr	x19, [sp, #16]
    f160:	cmp	w0, #0x0
    f164:	cset	w8, ne  // ne = any
    f168:	mov	w10, #0x2                   	// #2
    f16c:	csel	w0, w10, w8, lt  // lt = tstop
    f170:	ldp	x29, x30, [sp], #32
    f174:	ret

000000000000f178 <mpc_set_f@@Base>:
    f178:	stp	x29, x30, [sp, #-32]!
    f17c:	and	w2, w2, #0xf
    f180:	str	x19, [sp, #16]
    f184:	mov	x29, sp
    f188:	mov	x19, x0
    f18c:	bl	4b60 <mpfr_set_f@plt>
    f190:	mov	w8, #0x1                   	// #1
    f194:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f198:	str	w8, [x19, #40]
    f19c:	str	x9, [x19, #48]
    f1a0:	ldr	x19, [sp, #16]
    f1a4:	cmp	w0, #0x0
    f1a8:	cset	w8, ne  // ne = any
    f1ac:	mov	w10, #0x2                   	// #2
    f1b0:	csel	w0, w10, w8, lt  // lt = tstop
    f1b4:	ldp	x29, x30, [sp], #32
    f1b8:	ret

000000000000f1bc <mpc_set_uj@@Base>:
    f1bc:	stp	x29, x30, [sp, #-32]!
    f1c0:	and	w2, w2, #0xf
    f1c4:	str	x19, [sp, #16]
    f1c8:	mov	x29, sp
    f1cc:	mov	x19, x0
    f1d0:	bl	5400 <__gmpfr_set_uj@plt>
    f1d4:	mov	w8, #0x1                   	// #1
    f1d8:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f1dc:	str	w8, [x19, #40]
    f1e0:	str	x9, [x19, #48]
    f1e4:	ldr	x19, [sp, #16]
    f1e8:	cmp	w0, #0x0
    f1ec:	cset	w8, ne  // ne = any
    f1f0:	mov	w10, #0x2                   	// #2
    f1f4:	csel	w0, w10, w8, lt  // lt = tstop
    f1f8:	ldp	x29, x30, [sp], #32
    f1fc:	ret

000000000000f200 <mpc_set_sj@@Base>:
    f200:	stp	x29, x30, [sp, #-32]!
    f204:	and	w2, w2, #0xf
    f208:	str	x19, [sp, #16]
    f20c:	mov	x29, sp
    f210:	mov	x19, x0
    f214:	bl	4d70 <__gmpfr_set_sj@plt>
    f218:	mov	w8, #0x1                   	// #1
    f21c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f220:	str	w8, [x19, #40]
    f224:	str	x9, [x19, #48]
    f228:	ldr	x19, [sp, #16]
    f22c:	cmp	w0, #0x0
    f230:	cset	w8, ne  // ne = any
    f234:	mov	w10, #0x2                   	// #2
    f238:	csel	w0, w10, w8, lt  // lt = tstop
    f23c:	ldp	x29, x30, [sp], #32
    f240:	ret

000000000000f244 <mpc_set_dc@@Base>:
    f244:	b	4f90 <mpc_set_d_d@plt>

000000000000f248 <mpc_set_ldc@@Base>:
    f248:	b	4d50 <mpc_set_ld_ld@plt>

000000000000f24c <mpc_set_nan@@Base>:
    f24c:	stp	x29, x30, [sp, #-32]!
    f250:	str	x19, [sp, #16]
    f254:	mov	x29, sp
    f258:	mov	x19, x0
    f25c:	bl	4a40 <mpfr_set_nan@plt>
    f260:	add	x0, x19, #0x20
    f264:	ldr	x19, [sp, #16]
    f268:	ldp	x29, x30, [sp], #32
    f26c:	b	4a40 <mpfr_set_nan@plt>

000000000000f270 <mpc_set_d_d@@Base>:
    f270:	str	d8, [sp, #-48]!
    f274:	stp	x20, x19, [sp, #32]
    f278:	mov	w19, w1
    f27c:	and	w1, w1, #0xf
    f280:	stp	x29, x30, [sp, #8]
    f284:	str	x21, [sp, #24]
    f288:	mov	x29, sp
    f28c:	mov	v8.16b, v1.16b
    f290:	mov	x20, x0
    f294:	bl	4c30 <mpfr_set_d@plt>
    f298:	mov	w21, w0
    f29c:	add	x0, x20, #0x20
    f2a0:	asr	w1, w19, #4
    f2a4:	mov	v0.16b, v8.16b
    f2a8:	bl	4c30 <mpfr_set_d@plt>
    f2ac:	cmp	w21, #0x0
    f2b0:	mov	w8, #0x2                   	// #2
    f2b4:	cset	w9, ne  // ne = any
    f2b8:	csel	w8, w8, w9, lt  // lt = tstop
    f2bc:	cmp	w0, #0x0
    f2c0:	cset	w9, ne  // ne = any
    f2c4:	ldp	x20, x19, [sp, #32]
    f2c8:	ldr	x21, [sp, #24]
    f2cc:	ldp	x29, x30, [sp, #8]
    f2d0:	lsl	w9, w9, #2
    f2d4:	mov	w10, #0x8                   	// #8
    f2d8:	csel	w9, w10, w9, lt  // lt = tstop
    f2dc:	orr	w0, w9, w8
    f2e0:	ldr	d8, [sp], #48
    f2e4:	ret

000000000000f2e8 <mpc_set_f_f@@Base>:
    f2e8:	stp	x29, x30, [sp, #-48]!
    f2ec:	stp	x20, x19, [sp, #32]
    f2f0:	mov	x20, x2
    f2f4:	and	w2, w3, #0xf
    f2f8:	stp	x22, x21, [sp, #16]
    f2fc:	mov	x29, sp
    f300:	mov	w19, w3
    f304:	mov	x21, x0
    f308:	bl	4b60 <mpfr_set_f@plt>
    f30c:	mov	w22, w0
    f310:	add	x0, x21, #0x20
    f314:	asr	w2, w19, #4
    f318:	mov	x1, x20
    f31c:	bl	4b60 <mpfr_set_f@plt>
    f320:	cmp	w22, #0x0
    f324:	mov	w8, #0x2                   	// #2
    f328:	cset	w9, ne  // ne = any
    f32c:	csel	w8, w8, w9, lt  // lt = tstop
    f330:	cmp	w0, #0x0
    f334:	cset	w9, ne  // ne = any
    f338:	ldp	x20, x19, [sp, #32]
    f33c:	ldp	x22, x21, [sp, #16]
    f340:	lsl	w9, w9, #2
    f344:	mov	w10, #0x8                   	// #8
    f348:	csel	w9, w10, w9, lt  // lt = tstop
    f34c:	orr	w0, w9, w8
    f350:	ldp	x29, x30, [sp], #48
    f354:	ret

000000000000f358 <mpc_set_fr_fr@@Base>:
    f358:	stp	x29, x30, [sp, #-48]!
    f35c:	stp	x20, x19, [sp, #32]
    f360:	mov	x20, x2
    f364:	and	w2, w3, #0xf
    f368:	stp	x22, x21, [sp, #16]
    f36c:	mov	x29, sp
    f370:	mov	w19, w3
    f374:	mov	x21, x0
    f378:	bl	4e80 <mpfr_set@plt>
    f37c:	mov	w22, w0
    f380:	add	x0, x21, #0x20
    f384:	asr	w2, w19, #4
    f388:	mov	x1, x20
    f38c:	bl	4e80 <mpfr_set@plt>
    f390:	cmp	w22, #0x0
    f394:	mov	w8, #0x2                   	// #2
    f398:	cset	w9, ne  // ne = any
    f39c:	csel	w8, w8, w9, lt  // lt = tstop
    f3a0:	cmp	w0, #0x0
    f3a4:	cset	w9, ne  // ne = any
    f3a8:	ldp	x20, x19, [sp, #32]
    f3ac:	ldp	x22, x21, [sp, #16]
    f3b0:	lsl	w9, w9, #2
    f3b4:	mov	w10, #0x8                   	// #8
    f3b8:	csel	w9, w10, w9, lt  // lt = tstop
    f3bc:	orr	w0, w9, w8
    f3c0:	ldp	x29, x30, [sp], #48
    f3c4:	ret

000000000000f3c8 <mpc_set_ld_ld@@Base>:
    f3c8:	sub	sp, sp, #0x40
    f3cc:	stp	x20, x19, [sp, #48]
    f3d0:	mov	w19, w1
    f3d4:	and	w1, w1, #0xf
    f3d8:	stp	x29, x30, [sp, #16]
    f3dc:	str	x21, [sp, #32]
    f3e0:	add	x29, sp, #0x10
    f3e4:	str	q1, [sp]
    f3e8:	mov	x20, x0
    f3ec:	bl	49b0 <mpfr_set_ld@plt>
    f3f0:	ldr	q0, [sp]
    f3f4:	mov	w21, w0
    f3f8:	add	x0, x20, #0x20
    f3fc:	asr	w1, w19, #4
    f400:	bl	49b0 <mpfr_set_ld@plt>
    f404:	cmp	w21, #0x0
    f408:	mov	w8, #0x2                   	// #2
    f40c:	cset	w9, ne  // ne = any
    f410:	csel	w8, w8, w9, lt  // lt = tstop
    f414:	cmp	w0, #0x0
    f418:	cset	w9, ne  // ne = any
    f41c:	ldp	x20, x19, [sp, #48]
    f420:	ldr	x21, [sp, #32]
    f424:	ldp	x29, x30, [sp, #16]
    f428:	lsl	w9, w9, #2
    f42c:	mov	w10, #0x8                   	// #8
    f430:	csel	w9, w10, w9, lt  // lt = tstop
    f434:	orr	w0, w9, w8
    f438:	add	sp, sp, #0x40
    f43c:	ret

000000000000f440 <mpc_set_q_q@@Base>:
    f440:	stp	x29, x30, [sp, #-48]!
    f444:	stp	x20, x19, [sp, #32]
    f448:	mov	x20, x2
    f44c:	and	w2, w3, #0xf
    f450:	stp	x22, x21, [sp, #16]
    f454:	mov	x29, sp
    f458:	mov	w19, w3
    f45c:	mov	x21, x0
    f460:	bl	5290 <mpfr_set_q@plt>
    f464:	mov	w22, w0
    f468:	add	x0, x21, #0x20
    f46c:	asr	w2, w19, #4
    f470:	mov	x1, x20
    f474:	bl	5290 <mpfr_set_q@plt>
    f478:	cmp	w22, #0x0
    f47c:	mov	w8, #0x2                   	// #2
    f480:	cset	w9, ne  // ne = any
    f484:	csel	w8, w8, w9, lt  // lt = tstop
    f488:	cmp	w0, #0x0
    f48c:	cset	w9, ne  // ne = any
    f490:	ldp	x20, x19, [sp, #32]
    f494:	ldp	x22, x21, [sp, #16]
    f498:	lsl	w9, w9, #2
    f49c:	mov	w10, #0x8                   	// #8
    f4a0:	csel	w9, w10, w9, lt  // lt = tstop
    f4a4:	orr	w0, w9, w8
    f4a8:	ldp	x29, x30, [sp], #48
    f4ac:	ret

000000000000f4b0 <mpc_set_si_si@@Base>:
    f4b0:	stp	x29, x30, [sp, #-48]!
    f4b4:	stp	x20, x19, [sp, #32]
    f4b8:	mov	x20, x2
    f4bc:	and	w2, w3, #0xf
    f4c0:	stp	x22, x21, [sp, #16]
    f4c4:	mov	x29, sp
    f4c8:	mov	w19, w3
    f4cc:	mov	x21, x0
    f4d0:	bl	5270 <mpfr_set_si@plt>
    f4d4:	mov	w22, w0
    f4d8:	add	x0, x21, #0x20
    f4dc:	asr	w2, w19, #4
    f4e0:	mov	x1, x20
    f4e4:	bl	5270 <mpfr_set_si@plt>
    f4e8:	cmp	w22, #0x0
    f4ec:	mov	w8, #0x2                   	// #2
    f4f0:	cset	w9, ne  // ne = any
    f4f4:	csel	w8, w8, w9, lt  // lt = tstop
    f4f8:	cmp	w0, #0x0
    f4fc:	cset	w9, ne  // ne = any
    f500:	ldp	x20, x19, [sp, #32]
    f504:	ldp	x22, x21, [sp, #16]
    f508:	lsl	w9, w9, #2
    f50c:	mov	w10, #0x8                   	// #8
    f510:	csel	w9, w10, w9, lt  // lt = tstop
    f514:	orr	w0, w9, w8
    f518:	ldp	x29, x30, [sp], #48
    f51c:	ret

000000000000f520 <mpc_set_ui_ui@@Base>:
    f520:	stp	x29, x30, [sp, #-48]!
    f524:	stp	x20, x19, [sp, #32]
    f528:	mov	x20, x2
    f52c:	and	w2, w3, #0xf
    f530:	stp	x22, x21, [sp, #16]
    f534:	mov	x29, sp
    f538:	mov	w19, w3
    f53c:	mov	x21, x0
    f540:	bl	5510 <mpfr_set_ui@plt>
    f544:	mov	w22, w0
    f548:	add	x0, x21, #0x20
    f54c:	asr	w2, w19, #4
    f550:	mov	x1, x20
    f554:	bl	5510 <mpfr_set_ui@plt>
    f558:	cmp	w22, #0x0
    f55c:	mov	w8, #0x2                   	// #2
    f560:	cset	w9, ne  // ne = any
    f564:	csel	w8, w8, w9, lt  // lt = tstop
    f568:	cmp	w0, #0x0
    f56c:	cset	w9, ne  // ne = any
    f570:	ldp	x20, x19, [sp, #32]
    f574:	ldp	x22, x21, [sp, #16]
    f578:	lsl	w9, w9, #2
    f57c:	mov	w10, #0x8                   	// #8
    f580:	csel	w9, w10, w9, lt  // lt = tstop
    f584:	orr	w0, w9, w8
    f588:	ldp	x29, x30, [sp], #48
    f58c:	ret

000000000000f590 <mpc_set_z_z@@Base>:
    f590:	stp	x29, x30, [sp, #-48]!
    f594:	stp	x20, x19, [sp, #32]
    f598:	mov	x20, x2
    f59c:	and	w2, w3, #0xf
    f5a0:	stp	x22, x21, [sp, #16]
    f5a4:	mov	x29, sp
    f5a8:	mov	w19, w3
    f5ac:	mov	x21, x0
    f5b0:	bl	4ec0 <mpfr_set_z@plt>
    f5b4:	mov	w22, w0
    f5b8:	add	x0, x21, #0x20
    f5bc:	asr	w2, w19, #4
    f5c0:	mov	x1, x20
    f5c4:	bl	4ec0 <mpfr_set_z@plt>
    f5c8:	cmp	w22, #0x0
    f5cc:	mov	w8, #0x2                   	// #2
    f5d0:	cset	w9, ne  // ne = any
    f5d4:	csel	w8, w8, w9, lt  // lt = tstop
    f5d8:	cmp	w0, #0x0
    f5dc:	cset	w9, ne  // ne = any
    f5e0:	ldp	x20, x19, [sp, #32]
    f5e4:	ldp	x22, x21, [sp, #16]
    f5e8:	lsl	w9, w9, #2
    f5ec:	mov	w10, #0x8                   	// #8
    f5f0:	csel	w9, w10, w9, lt  // lt = tstop
    f5f4:	orr	w0, w9, w8
    f5f8:	ldp	x29, x30, [sp], #48
    f5fc:	ret

000000000000f600 <mpc_set_uj_uj@@Base>:
    f600:	stp	x29, x30, [sp, #-48]!
    f604:	stp	x20, x19, [sp, #32]
    f608:	mov	x20, x2
    f60c:	and	w2, w3, #0xf
    f610:	stp	x22, x21, [sp, #16]
    f614:	mov	x29, sp
    f618:	mov	w19, w3
    f61c:	mov	x21, x0
    f620:	bl	5400 <__gmpfr_set_uj@plt>
    f624:	mov	w22, w0
    f628:	add	x0, x21, #0x20
    f62c:	asr	w2, w19, #4
    f630:	mov	x1, x20
    f634:	bl	5400 <__gmpfr_set_uj@plt>
    f638:	cmp	w22, #0x0
    f63c:	mov	w8, #0x2                   	// #2
    f640:	cset	w9, ne  // ne = any
    f644:	csel	w8, w8, w9, lt  // lt = tstop
    f648:	cmp	w0, #0x0
    f64c:	cset	w9, ne  // ne = any
    f650:	ldp	x20, x19, [sp, #32]
    f654:	ldp	x22, x21, [sp, #16]
    f658:	lsl	w9, w9, #2
    f65c:	mov	w10, #0x8                   	// #8
    f660:	csel	w9, w10, w9, lt  // lt = tstop
    f664:	orr	w0, w9, w8
    f668:	ldp	x29, x30, [sp], #48
    f66c:	ret

000000000000f670 <mpc_set_sj_sj@@Base>:
    f670:	stp	x29, x30, [sp, #-48]!
    f674:	stp	x20, x19, [sp, #32]
    f678:	mov	x20, x2
    f67c:	and	w2, w3, #0xf
    f680:	stp	x22, x21, [sp, #16]
    f684:	mov	x29, sp
    f688:	mov	w19, w3
    f68c:	mov	x21, x0
    f690:	bl	4d70 <__gmpfr_set_sj@plt>
    f694:	mov	w22, w0
    f698:	add	x0, x21, #0x20
    f69c:	asr	w2, w19, #4
    f6a0:	mov	x1, x20
    f6a4:	bl	4d70 <__gmpfr_set_sj@plt>
    f6a8:	cmp	w22, #0x0
    f6ac:	mov	w8, #0x2                   	// #2
    f6b0:	cset	w9, ne  // ne = any
    f6b4:	csel	w8, w8, w9, lt  // lt = tstop
    f6b8:	cmp	w0, #0x0
    f6bc:	cset	w9, ne  // ne = any
    f6c0:	ldp	x20, x19, [sp, #32]
    f6c4:	ldp	x22, x21, [sp, #16]
    f6c8:	lsl	w9, w9, #2
    f6cc:	mov	w10, #0x8                   	// #8
    f6d0:	csel	w9, w10, w9, lt  // lt = tstop
    f6d4:	orr	w0, w9, w8
    f6d8:	ldp	x29, x30, [sp], #48
    f6dc:	ret

000000000000f6e0 <mpc_sin@@Base>:
    f6e0:	stp	x29, x30, [sp, #-16]!
    f6e4:	mov	w3, w2
    f6e8:	mov	x2, x1
    f6ec:	mov	x1, xzr
    f6f0:	mov	w4, wzr
    f6f4:	mov	x29, sp
    f6f8:	bl	5140 <mpc_sin_cos@plt>
    f6fc:	and	w0, w0, #0xf
    f700:	ldp	x29, x30, [sp], #16
    f704:	ret

000000000000f708 <mpc_fix_inf@@Base>:
    f708:	stp	x29, x30, [sp, #-32]!
    f70c:	stp	x20, x19, [sp, #16]
    f710:	ldr	x8, [x0, #16]
    f714:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    f718:	mov	x29, sp
    f71c:	cmp	x8, x9
    f720:	b.ne	f7a8 <mpc_fix_inf@@Base+0xa0>  // b.any
    f724:	mov	x19, x0
    f728:	ldr	w0, [x0, #8]
    f72c:	cmp	w1, #0x1
    f730:	b.ne	f748 <mpc_fix_inf@@Base+0x40>  // b.any
    f734:	add	x20, x19, #0x8
    f738:	tbnz	w0, #31, f758 <mpc_fix_inf@@Base+0x50>
    f73c:	mov	x0, x19
    f740:	bl	4bb0 <mpfr_nextbelow@plt>
    f744:	b	f760 <mpc_fix_inf@@Base+0x58>
    f748:	cmp	w1, #0x2
    f74c:	b.ne	f798 <mpc_fix_inf@@Base+0x90>  // b.any
    f750:	tbz	w0, #31, f798 <mpc_fix_inf@@Base+0x90>
    f754:	add	x20, x19, #0x8
    f758:	mov	x0, x19
    f75c:	bl	4e00 <mpfr_nextabove@plt>
    f760:	ldr	x8, [x19, #16]
    f764:	mov	x9, #0x2                   	// #2
    f768:	movk	x9, #0x8000, lsl #48
    f76c:	cmp	x8, x9
    f770:	b.gt	f784 <mpc_fix_inf@@Base+0x7c>
    f774:	b.ne	f77c <mpc_fix_inf@@Base+0x74>  // b.any
    f778:	bl	4b00 <mpfr_set_erangeflag@plt>
    f77c:	mov	w0, wzr
    f780:	b	f78c <mpc_fix_inf@@Base+0x84>
    f784:	ldr	w8, [x20]
    f788:	neg	w0, w8
    f78c:	ldp	x20, x19, [sp, #16]
    f790:	ldp	x29, x30, [sp], #32
    f794:	ret
    f798:	cmp	w1, #0x3
    f79c:	b.ne	f78c <mpc_fix_inf@@Base+0x84>  // b.any
    f7a0:	tbz	w0, #31, f734 <mpc_fix_inf@@Base+0x2c>
    f7a4:	b	f78c <mpc_fix_inf@@Base+0x84>
    f7a8:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
    f7ac:	ldr	x8, [x8, #4008]
    f7b0:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    f7b4:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    f7b8:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
    f7bc:	ldr	x0, [x8]
    f7c0:	add	x1, x1, #0x7c0
    f7c4:	add	x2, x2, #0xb1c
    f7c8:	add	x4, x4, #0xb26
    f7cc:	mov	w3, #0x115                 	// #277
    f7d0:	bl	55a0 <fprintf@plt>
    f7d4:	bl	5000 <abort@plt>

000000000000f7d8 <mpc_fix_zero@@Base>:
    f7d8:	stp	x29, x30, [sp, #-16]!
    f7dc:	ldr	w8, [x0, #8]
    f7e0:	cmp	w1, #0x3
    f7e4:	mov	x29, sp
    f7e8:	b.ne	f800 <mpc_fix_zero@@Base+0x28>  // b.any
    f7ec:	tbz	w8, #31, f800 <mpc_fix_zero@@Base+0x28>
    f7f0:	bl	4bb0 <mpfr_nextbelow@plt>
    f7f4:	mov	w0, #0xffffffff            	// #-1
    f7f8:	ldp	x29, x30, [sp], #16
    f7fc:	ret
    f800:	cmp	w1, #0x2
    f804:	b.ne	f820 <mpc_fix_zero@@Base+0x48>  // b.any
    f808:	tbnz	w8, #31, f820 <mpc_fix_zero@@Base+0x48>
    f80c:	tbnz	w8, #31, f7f0 <mpc_fix_zero@@Base+0x18>
    f810:	bl	4e00 <mpfr_nextabove@plt>
    f814:	mov	w0, #0x1                   	// #1
    f818:	ldp	x29, x30, [sp], #16
    f81c:	ret
    f820:	cmp	w8, #0x0
    f824:	mov	w8, #0xffffffff            	// #-1
    f828:	cneg	w0, w8, lt  // lt = tstop
    f82c:	ldp	x29, x30, [sp], #16
    f830:	ret

000000000000f834 <mpc_sin_cos@@Base>:
    f834:	sub	sp, sp, #0x160
    f838:	stp	x22, x21, [sp, #320]
    f83c:	mov	x21, x0
    f840:	mov	x0, x2
    f844:	stp	x29, x30, [sp, #256]
    f848:	stp	x28, x27, [sp, #272]
    f84c:	stp	x26, x25, [sp, #288]
    f850:	stp	x24, x23, [sp, #304]
    f854:	stp	x20, x19, [sp, #336]
    f858:	add	x29, sp, #0x100
    f85c:	mov	w25, w4
    f860:	mov	w27, w3
    f864:	mov	x23, x2
    f868:	mov	x19, x1
    f86c:	bl	54d0 <mpfr_number_p@plt>
    f870:	cbz	w0, f8a4 <mpc_sin_cos@@Base+0x70>
    f874:	add	x24, x23, #0x20
    f878:	mov	x0, x24
    f87c:	bl	54d0 <mpfr_number_p@plt>
    f880:	cbz	w0, f8a4 <mpc_sin_cos@@Base+0x70>
    f884:	ldr	x8, [x23, #48]
    f888:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
    f88c:	cmp	x8, x10
    f890:	b.ne	f970 <mpc_sin_cos@@Base+0x13c>  // b.any
    f894:	ldr	w24, [x23, #40]
    f898:	cbz	x21, fa6c <mpc_sin_cos@@Base+0x238>
    f89c:	ldr	x1, [x21]
    f8a0:	b	fa70 <mpc_sin_cos@@Base+0x23c>
    f8a4:	cmp	x21, x23
    f8a8:	cset	w8, eq  // eq = none
    f8ac:	cmp	x19, x23
    f8b0:	cset	w9, eq  // eq = none
    f8b4:	orr	w24, w8, w9
    f8b8:	cmp	w24, #0x1
    f8bc:	b.ne	f8e4 <mpc_sin_cos@@Base+0xb0>  // b.any
    f8c0:	ldr	x1, [x23]
    f8c4:	ldr	x2, [x23, #32]
    f8c8:	sub	x0, x29, #0x50
    f8cc:	bl	53c0 <mpc_init3@plt>
    f8d0:	sub	x0, x29, #0x50
    f8d4:	mov	x1, x23
    f8d8:	mov	w2, wzr
    f8dc:	bl	5580 <mpc_set@plt>
    f8e0:	b	f8f4 <mpc_sin_cos@@Base+0xc0>
    f8e4:	ldp	q1, q0, [x23, #32]
    f8e8:	ldp	q3, q2, [x23]
    f8ec:	stp	q1, q0, [x29, #-48]
    f8f0:	stp	q3, q2, [x29, #-80]
    f8f4:	mov	x23, #0x2                   	// #2
    f8f8:	movk	x23, #0x8000, lsl #48
    f8fc:	cbz	x21, 100a4 <mpc_sin_cos@@Base+0x870>
    f900:	ldur	x8, [x29, #-64]
    f904:	cmp	x8, x23
    f908:	b.eq	f918 <mpc_sin_cos@@Base+0xe4>  // b.none
    f90c:	ldur	x9, [x29, #-32]
    f910:	cmp	x9, x23
    f914:	b.ne	fa14 <mpc_sin_cos@@Base+0x1e0>  // b.any
    f918:	sub	x1, x29, #0x50
    f91c:	mov	x0, x21
    f920:	mov	w2, w27
    f924:	bl	5580 <mpc_set@plt>
    f928:	ldur	x8, [x29, #-32]
    f92c:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f930:	cmp	x8, x9
    f934:	b.eq	100a4 <mpc_sin_cos@@Base+0x870>  // b.none
    f938:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
    f93c:	cmp	x8, x9
    f940:	b.eq	100a4 <mpc_sin_cos@@Base+0x870>  // b.none
    f944:	mov	x9, #0x2                   	// #2
    f948:	movk	x9, #0x8000, lsl #48
    f94c:	cmp	x8, x9
    f950:	b.ne	fa60 <mpc_sin_cos@@Base+0x22c>  // b.any
    f954:	ldur	x8, [x29, #-64]
    f958:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    f95c:	cmp	x8, x9
    f960:	b.eq	100a4 <mpc_sin_cos@@Base+0x870>  // b.none
    f964:	mov	x0, x21
    f968:	bl	4a40 <mpfr_set_nan@plt>
    f96c:	b	100a4 <mpc_sin_cos@@Base+0x870>
    f970:	ldr	x9, [x23, #16]
    f974:	cmp	x9, x10
    f978:	b.ne	f9bc <mpc_sin_cos@@Base+0x188>  // b.any
    f97c:	cmp	x21, x23
    f980:	cset	w8, eq  // eq = none
    f984:	cmp	x19, x23
    f988:	cset	w9, eq  // eq = none
    f98c:	orr	w22, w8, w9
    f990:	cmp	w22, #0x1
    f994:	b.ne	fb70 <mpc_sin_cos@@Base+0x33c>  // b.any
    f998:	ldr	x1, [x23]
    f99c:	ldr	x2, [x23, #32]
    f9a0:	sub	x0, x29, #0x50
    f9a4:	bl	53c0 <mpc_init3@plt>
    f9a8:	sub	x0, x29, #0x50
    f9ac:	mov	x1, x23
    f9b0:	mov	w2, wzr
    f9b4:	bl	5580 <mpc_set@plt>
    f9b8:	b	fb80 <mpc_sin_cos@@Base+0x34c>
    f9bc:	cbz	x21, fc00 <mpc_sin_cos@@Base+0x3cc>
    f9c0:	ldr	x10, [x21]
    f9c4:	ldr	x11, [x21, #32]
    f9c8:	ldr	x13, [x23]
    f9cc:	ldr	x14, [x23, #32]
    f9d0:	mov	w12, #0x2                   	// #2
    f9d4:	cmp	x10, x11
    f9d8:	csel	x10, x10, x11, gt
    f9dc:	cmp	x10, #0x2
    f9e0:	csel	x26, x10, x12, gt
    f9e4:	cmp	x13, x14
    f9e8:	csel	x10, x13, x14, gt
    f9ec:	cmp	x10, x26
    f9f0:	b.gt	fc04 <mpc_sin_cos@@Base+0x3d0>
    f9f4:	cmp	x9, x8
    f9f8:	csel	x8, x8, x9, lt  // lt = tstop
    f9fc:	tbz	x8, #63, fc04 <mpc_sin_cos@@Base+0x3d0>
    fa00:	mov	w9, #0x3                   	// #3
    fa04:	sub	x8, x9, x8, lsl #1
    fa08:	cmp	x26, x8
    fa0c:	csel	x26, x8, x26, lt  // lt = tstop
    fa10:	b	fc04 <mpc_sin_cos@@Base+0x3d0>
    fa14:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    fa18:	cmp	x8, x9
    fa1c:	b.eq	10034 <mpc_sin_cos@@Base+0x800>  // b.none
    fa20:	mov	x20, #0x8000000000000003    	// #-9223372036854775805
    fa24:	cmp	x8, x20
    fa28:	b.ne	10048 <mpc_sin_cos@@Base+0x814>  // b.any
    fa2c:	mov	x0, x21
    fa30:	bl	4a40 <mpfr_set_nan@plt>
    fa34:	ldur	x8, [x29, #-32]
    fa38:	orr	x8, x8, #0x2
    fa3c:	cmp	x8, x20
    fa40:	b.ne	fa60 <mpc_sin_cos@@Base+0x22c>  // b.any
    fa44:	ldur	w3, [x29, #-40]
    fa48:	sub	x8, x29, #0x50
    fa4c:	add	x1, x8, #0x20
    fa50:	add	x0, x21, #0x20
    fa54:	asr	w2, w27, #4
    fa58:	bl	51d0 <mpfr_set4@plt>
    fa5c:	b	100a4 <mpc_sin_cos@@Base+0x870>
    fa60:	add	x0, x21, #0x20
    fa64:	bl	4a40 <mpfr_set_nan@plt>
    fa68:	b	100a4 <mpc_sin_cos@@Base+0x870>
    fa6c:	mov	w1, #0x2                   	// #2
    fa70:	sub	x0, x29, #0x70
    fa74:	bl	5440 <mpfr_init2@plt>
    fa78:	cbz	x19, fa84 <mpc_sin_cos@@Base+0x250>
    fa7c:	ldr	x1, [x19]
    fa80:	b	fa88 <mpc_sin_cos@@Base+0x254>
    fa84:	mov	w1, #0x2                   	// #2
    fa88:	add	x0, sp, #0x70
    fa8c:	bl	5440 <mpfr_init2@plt>
    fa90:	and	w2, w27, #0xf
    fa94:	sub	x0, x29, #0x70
    fa98:	mov	x1, x23
    fa9c:	bl	5080 <mpfr_sin@plt>
    faa0:	mov	w22, w0
    faa4:	and	w2, w25, #0xf
    faa8:	add	x0, sp, #0x70
    faac:	mov	x1, x23
    fab0:	bl	5050 <mpfr_cos@plt>
    fab4:	mov	w20, w0
    fab8:	cbz	x21, fb44 <mpc_sin_cos@@Base+0x310>
    fabc:	ldur	w3, [x29, #-104]
    fac0:	cmp	w24, #0x0
    fac4:	sub	x1, x29, #0x70
    fac8:	mov	x0, x21
    facc:	mov	w2, wzr
    fad0:	cset	w23, ge  // ge = tcont
    fad4:	bl	51d0 <mpfr_set4@plt>
    fad8:	ldr	w8, [sp, #120]
    fadc:	mov	w9, #0xffffffff            	// #-1
    fae0:	add	x0, x21, #0x20
    fae4:	cmp	w8, #0x0
    fae8:	cset	w8, lt  // lt = tstop
    faec:	orr	w10, w8, w23
    faf0:	tst	w8, w23
    faf4:	cneg	w8, w9, eq  // eq = none
    faf8:	cmp	w10, #0x0
    fafc:	csinv	w1, w8, wzr, ne  // ne = any
    fb00:	bl	4d10 <mpfr_set_zero@plt>
    fb04:	cbz	x19, fb4c <mpc_sin_cos@@Base+0x318>
    fb08:	ldr	w3, [sp, #120]
    fb0c:	add	x1, sp, #0x70
    fb10:	mov	x0, x19
    fb14:	mov	w2, wzr
    fb18:	bl	51d0 <mpfr_set4@plt>
    fb1c:	ldur	w8, [x29, #-104]
    fb20:	mov	w9, #0xffffffff            	// #-1
    fb24:	add	x0, x19, #0x20
    fb28:	orr	w10, w8, w24
    fb2c:	cmp	w10, #0x0
    fb30:	cneg	w9, w9, lt  // lt = tstop
    fb34:	tst	w8, w24
    fb38:	csinv	w1, w9, wzr, ge  // ge = tcont
    fb3c:	bl	4d10 <mpfr_set_zero@plt>
    fb40:	b	fb50 <mpc_sin_cos@@Base+0x31c>
    fb44:	mov	w22, wzr
    fb48:	cbnz	x19, fb08 <mpc_sin_cos@@Base+0x2d4>
    fb4c:	mov	w20, wzr
    fb50:	sub	x0, x29, #0x70
    fb54:	bl	4d60 <mpfr_clear@plt>
    fb58:	add	x0, sp, #0x70
    fb5c:	bl	4d60 <mpfr_clear@plt>
    fb60:	cmp	w22, #0x0
    fb64:	mov	w8, #0x2                   	// #2
    fb68:	cset	w9, ne  // ne = any
    fb6c:	b	ff3c <mpc_sin_cos@@Base+0x708>
    fb70:	ldp	q1, q0, [x23, #32]
    fb74:	ldp	q3, q2, [x23]
    fb78:	stp	q1, q0, [x29, #-48]
    fb7c:	stp	q3, q2, [x29, #-80]
    fb80:	cbz	x21, fbb0 <mpc_sin_cos@@Base+0x37c>
    fb84:	ldur	w3, [x29, #-72]
    fb88:	sub	x1, x29, #0x50
    fb8c:	mov	x0, x21
    fb90:	mov	w2, wzr
    fb94:	sub	x20, x29, #0x50
    fb98:	bl	51d0 <mpfr_set4@plt>
    fb9c:	add	x0, x21, #0x20
    fba0:	add	x1, x20, #0x20
    fba4:	asr	w2, w27, #4
    fba8:	bl	4f80 <mpfr_sinh@plt>
    fbac:	mov	w21, w0
    fbb0:	cbz	x19, ff1c <mpc_sin_cos@@Base+0x6e8>
    fbb4:	sub	x8, x29, #0x50
    fbb8:	add	x1, x8, #0x20
    fbbc:	and	w2, w25, #0xf
    fbc0:	mov	x0, x19
    fbc4:	bl	4a20 <mpfr_cosh@plt>
    fbc8:	mov	w8, #0x1                   	// #1
    fbcc:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
    fbd0:	str	w8, [x19, #40]
    fbd4:	str	x9, [x19, #48]
    fbd8:	ldur	w8, [x29, #-72]
    fbdc:	ldur	w9, [x29, #-40]
    fbe0:	mov	w20, w0
    fbe4:	eor	w8, w9, w8
    fbe8:	tbnz	w8, #31, ff20 <mpc_sin_cos@@Base+0x6ec>
    fbec:	add	x0, x19, #0x20
    fbf0:	mov	x1, x0
    fbf4:	mov	w2, wzr
    fbf8:	bl	4b80 <mpfr_neg@plt>
    fbfc:	b	ff20 <mpc_sin_cos@@Base+0x6ec>
    fc00:	mov	w26, #0x2                   	// #2
    fc04:	cbz	x19, fc20 <mpc_sin_cos@@Base+0x3ec>
    fc08:	ldr	x8, [x19]
    fc0c:	ldr	x9, [x19, #32]
    fc10:	cmp	x8, x9
    fc14:	csel	x8, x8, x9, gt
    fc18:	cmp	x26, x8
    fc1c:	csel	x26, x26, x8, gt
    fc20:	sub	x0, x29, #0x50
    fc24:	mov	w1, #0x2                   	// #2
    fc28:	bl	5440 <mpfr_init2@plt>
    fc2c:	sub	x0, x29, #0x70
    fc30:	mov	w1, #0x2                   	// #2
    fc34:	bl	5440 <mpfr_init2@plt>
    fc38:	add	x0, sp, #0x70
    fc3c:	mov	w1, #0x2                   	// #2
    fc40:	bl	5440 <mpfr_init2@plt>
    fc44:	add	x0, sp, #0x50
    fc48:	mov	w1, #0x2                   	// #2
    fc4c:	bl	5440 <mpfr_init2@plt>
    fc50:	add	x0, sp, #0x30
    fc54:	mov	w1, #0x2                   	// #2
    fc58:	bl	5440 <mpfr_init2@plt>
    fc5c:	add	x0, sp, #0x10
    fc60:	mov	w1, #0x2                   	// #2
    fc64:	bl	5440 <mpfr_init2@plt>
    fc68:	and	w8, w27, #0xf
    fc6c:	stp	w27, w8, [sp]
    fc70:	tst	w27, #0xf
    fc74:	and	w8, w25, #0xf
    fc78:	str	w8, [sp, #8]
    fc7c:	mov	w8, w25
    fc80:	cset	w25, eq  // eq = none
    fc84:	cmp	w27, #0x10
    fc88:	cset	w27, cc  // cc = lo, ul, last
    fc8c:	tst	w8, #0xf
    fc90:	cset	w20, eq  // eq = none
    fc94:	cmp	w8, #0x10
    fc98:	mov	w28, wzr
    fc9c:	cset	w22, cc  // cc = lo, ul, last
    fca0:	str	w8, [sp, #12]
    fca4:	b	fcac <mpc_sin_cos@@Base+0x478>
    fca8:	cbnz	w8, fe74 <mpc_sin_cos@@Base+0x640>
    fcac:	cmp	w28, #0x1
    fcb0:	add	w28, w28, #0x1
    fcb4:	b.hi	fcc8 <mpc_sin_cos@@Base+0x494>  // b.pmore
    fcb8:	mov	x0, x26
    fcbc:	bl	4d20 <mpc_ceil_log2@plt>
    fcc0:	add	x8, x0, #0x5
    fcc4:	b	fcd4 <mpc_sin_cos@@Base+0x4a0>
    fcc8:	cmp	x26, #0x0
    fccc:	cinc	x8, x26, lt  // lt = tstop
    fcd0:	asr	x8, x8, #1
    fcd4:	add	x26, x8, x26
    fcd8:	sub	x0, x29, #0x50
    fcdc:	mov	x1, x26
    fce0:	bl	4c80 <mpfr_set_prec@plt>
    fce4:	sub	x0, x29, #0x70
    fce8:	mov	x1, x26
    fcec:	bl	4c80 <mpfr_set_prec@plt>
    fcf0:	add	x0, sp, #0x70
    fcf4:	mov	x1, x26
    fcf8:	bl	4c80 <mpfr_set_prec@plt>
    fcfc:	add	x0, sp, #0x50
    fd00:	mov	x1, x26
    fd04:	bl	4c80 <mpfr_set_prec@plt>
    fd08:	add	x0, sp, #0x30
    fd0c:	mov	x1, x26
    fd10:	bl	4c80 <mpfr_set_prec@plt>
    fd14:	add	x0, sp, #0x10
    fd18:	mov	x1, x26
    fd1c:	bl	4c80 <mpfr_set_prec@plt>
    fd20:	sub	x0, x29, #0x50
    fd24:	sub	x1, x29, #0x70
    fd28:	mov	x2, x23
    fd2c:	mov	w3, wzr
    fd30:	bl	5520 <mpfr_sin_cos@plt>
    fd34:	add	x0, sp, #0x70
    fd38:	add	x1, sp, #0x50
    fd3c:	mov	x2, x24
    fd40:	mov	w3, wzr
    fd44:	bl	4be0 <mpfr_sinh_cosh@plt>
    fd48:	cbz	x21, fdd8 <mpc_sin_cos@@Base+0x5a4>
    fd4c:	add	x0, sp, #0x30
    fd50:	sub	x1, x29, #0x50
    fd54:	add	x2, sp, #0x50
    fd58:	mov	w3, wzr
    fd5c:	bl	4b70 <mpfr_mul@plt>
    fd60:	add	x0, sp, #0x30
    fd64:	bl	54d0 <mpfr_number_p@plt>
    fd68:	cbz	w0, fd8c <mpc_sin_cos@@Base+0x558>
    fd6c:	ldr	x8, [x21]
    fd70:	sub	x1, x26, #0x2
    fd74:	add	x0, sp, #0x30
    fd78:	mov	w3, #0x1                   	// #1
    fd7c:	add	x4, x8, x25
    fd80:	mov	w2, wzr
    fd84:	bl	5450 <mpfr_can_round@plt>
    fd88:	cbz	w0, fcac <mpc_sin_cos@@Base+0x478>
    fd8c:	add	x0, sp, #0x10
    fd90:	sub	x1, x29, #0x70
    fd94:	add	x2, sp, #0x70
    fd98:	mov	w3, wzr
    fd9c:	bl	4b70 <mpfr_mul@plt>
    fda0:	add	x0, sp, #0x10
    fda4:	bl	54d0 <mpfr_number_p@plt>
    fda8:	cbz	w0, fdd8 <mpc_sin_cos@@Base+0x5a4>
    fdac:	ldr	x8, [x21, #32]
    fdb0:	sub	x1, x26, #0x2
    fdb4:	add	x0, sp, #0x10
    fdb8:	mov	w3, #0x1                   	// #1
    fdbc:	add	x4, x8, x27
    fdc0:	mov	w2, wzr
    fdc4:	bl	5450 <mpfr_can_round@plt>
    fdc8:	cmp	w0, #0x0
    fdcc:	cset	w8, ne  // ne = any
    fdd0:	cbnz	x19, fde0 <mpc_sin_cos@@Base+0x5ac>
    fdd4:	b	fca8 <mpc_sin_cos@@Base+0x474>
    fdd8:	mov	w8, #0x1                   	// #1
    fddc:	cbz	x19, fca8 <mpc_sin_cos@@Base+0x474>
    fde0:	cbz	w8, fca8 <mpc_sin_cos@@Base+0x474>
    fde4:	sub	x0, x29, #0x70
    fde8:	sub	x1, x29, #0x70
    fdec:	add	x2, sp, #0x50
    fdf0:	mov	w3, wzr
    fdf4:	bl	4b70 <mpfr_mul@plt>
    fdf8:	sub	x0, x29, #0x70
    fdfc:	bl	54d0 <mpfr_number_p@plt>
    fe00:	cbz	w0, fe24 <mpc_sin_cos@@Base+0x5f0>
    fe04:	ldr	x8, [x19]
    fe08:	sub	x1, x26, #0x2
    fe0c:	sub	x0, x29, #0x70
    fe10:	mov	w3, #0x1                   	// #1
    fe14:	add	x4, x8, x20
    fe18:	mov	w2, wzr
    fe1c:	bl	5450 <mpfr_can_round@plt>
    fe20:	cbz	w0, fcac <mpc_sin_cos@@Base+0x478>
    fe24:	sub	x0, x29, #0x50
    fe28:	sub	x1, x29, #0x50
    fe2c:	add	x2, sp, #0x70
    fe30:	mov	w3, wzr
    fe34:	bl	4b70 <mpfr_mul@plt>
    fe38:	sub	x0, x29, #0x50
    fe3c:	sub	x1, x29, #0x50
    fe40:	mov	w2, wzr
    fe44:	bl	4b80 <mpfr_neg@plt>
    fe48:	sub	x0, x29, #0x50
    fe4c:	bl	54d0 <mpfr_number_p@plt>
    fe50:	cbz	w0, fe74 <mpc_sin_cos@@Base+0x640>
    fe54:	ldr	x8, [x19, #32]
    fe58:	sub	x1, x26, #0x2
    fe5c:	sub	x0, x29, #0x50
    fe60:	mov	w3, #0x1                   	// #1
    fe64:	add	x4, x8, x22
    fe68:	mov	w2, wzr
    fe6c:	bl	5450 <mpfr_can_round@plt>
    fe70:	cbz	w0, fcac <mpc_sin_cos@@Base+0x478>
    fe74:	cbz	x21, ff5c <mpc_sin_cos@@Base+0x728>
    fe78:	ldr	w22, [sp, #4]
    fe7c:	ldr	w3, [sp, #56]
    fe80:	add	x1, sp, #0x30
    fe84:	mov	x0, x21
    fe88:	mov	w2, w22
    fe8c:	bl	51d0 <mpfr_set4@plt>
    fe90:	ldr	x8, [sp, #64]
    fe94:	mov	x20, #0x8000000000000003    	// #-9223372036854775805
    fe98:	cmp	x8, x20
    fe9c:	b.ne	feac <mpc_sin_cos@@Base+0x678>  // b.any
    fea0:	mov	x0, x21
    fea4:	mov	w1, w22
    fea8:	bl	4dd0 <mpc_fix_inf@plt>
    feac:	ldr	w8, [sp]
    feb0:	ldr	w3, [sp, #24]
    feb4:	ldp	w22, w25, [sp, #8]
    feb8:	add	x24, x21, #0x20
    febc:	asr	w21, w8, #4
    fec0:	mov	w23, w0
    fec4:	add	x1, sp, #0x10
    fec8:	mov	x0, x24
    fecc:	mov	w2, w21
    fed0:	bl	51d0 <mpfr_set4@plt>
    fed4:	ldr	x8, [sp, #32]
    fed8:	cmp	x8, x20
    fedc:	b.ne	feec <mpc_sin_cos@@Base+0x6b8>  // b.any
    fee0:	mov	x0, x24
    fee4:	mov	w1, w21
    fee8:	bl	4dd0 <mpc_fix_inf@plt>
    feec:	cmp	w23, #0x0
    fef0:	mov	w8, #0x2                   	// #2
    fef4:	cset	w9, ne  // ne = any
    fef8:	csel	w8, w8, w9, lt  // lt = tstop
    fefc:	cmp	w0, #0x0
    ff00:	cset	w9, ne  // ne = any
    ff04:	lsl	w9, w9, #2
    ff08:	mov	w10, #0x8                   	// #8
    ff0c:	csel	w9, w10, w9, lt  // lt = tstop
    ff10:	orr	w20, w9, w8
    ff14:	cbnz	x19, ff68 <mpc_sin_cos@@Base+0x734>
    ff18:	b	fffc <mpc_sin_cos@@Base+0x7c8>
    ff1c:	mov	w20, wzr
    ff20:	cbz	w22, ff2c <mpc_sin_cos@@Base+0x6f8>
    ff24:	sub	x0, x29, #0x50
    ff28:	bl	4a10 <mpc_clear@plt>
    ff2c:	cmp	w21, #0x0
    ff30:	cset	w9, ne  // ne = any
    ff34:	mov	w8, #0x8                   	// #8
    ff38:	lsl	w9, w9, #2
    ff3c:	csel	w8, w8, w9, lt  // lt = tstop
    ff40:	cmp	w20, #0x0
    ff44:	cset	w9, ne  // ne = any
    ff48:	lsl	w9, w9, #4
    ff4c:	mov	w10, #0x20                  	// #32
    ff50:	csel	w9, w10, w9, lt  // lt = tstop
    ff54:	orr	w0, w9, w8
    ff58:	b	10268 <mpc_sin_cos@@Base+0xa34>
    ff5c:	ldp	w22, w25, [sp, #8]
    ff60:	mov	w20, wzr
    ff64:	cbz	x19, fffc <mpc_sin_cos@@Base+0x7c8>
    ff68:	ldur	w3, [x29, #-104]
    ff6c:	sub	x1, x29, #0x70
    ff70:	mov	x0, x19
    ff74:	mov	w2, w22
    ff78:	bl	51d0 <mpfr_set4@plt>
    ff7c:	ldur	x8, [x29, #-96]
    ff80:	mov	x23, #0x8000000000000003    	// #-9223372036854775805
    ff84:	cmp	x8, x23
    ff88:	b.ne	ff98 <mpc_sin_cos@@Base+0x764>  // b.any
    ff8c:	mov	x0, x19
    ff90:	mov	w1, w22
    ff94:	bl	4dd0 <mpc_fix_inf@plt>
    ff98:	ldur	w3, [x29, #-72]
    ff9c:	add	x22, x19, #0x20
    ffa0:	asr	w19, w25, #4
    ffa4:	mov	w21, w0
    ffa8:	sub	x1, x29, #0x50
    ffac:	mov	x0, x22
    ffb0:	mov	w2, w19
    ffb4:	bl	51d0 <mpfr_set4@plt>
    ffb8:	ldur	x8, [x29, #-64]
    ffbc:	cmp	x8, x23
    ffc0:	b.ne	ffd0 <mpc_sin_cos@@Base+0x79c>  // b.any
    ffc4:	mov	x0, x22
    ffc8:	mov	w1, w19
    ffcc:	bl	4dd0 <mpc_fix_inf@plt>
    ffd0:	cmp	w21, #0x0
    ffd4:	cset	w9, ne  // ne = any
    ffd8:	mov	w8, #0x20                  	// #32
    ffdc:	lsl	w9, w9, #4
    ffe0:	csel	w8, w8, w9, lt  // lt = tstop
    ffe4:	cmp	w0, #0x0
    ffe8:	cset	w9, ne  // ne = any
    ffec:	lsl	w9, w9, #6
    fff0:	mov	w10, #0x80                  	// #128
    fff4:	csel	w9, w10, w9, lt  // lt = tstop
    fff8:	orr	w19, w9, w8
    fffc:	sub	x0, x29, #0x50
   10000:	bl	4d60 <mpfr_clear@plt>
   10004:	sub	x0, x29, #0x70
   10008:	bl	4d60 <mpfr_clear@plt>
   1000c:	add	x0, sp, #0x70
   10010:	bl	4d60 <mpfr_clear@plt>
   10014:	add	x0, sp, #0x50
   10018:	bl	4d60 <mpfr_clear@plt>
   1001c:	add	x0, sp, #0x30
   10020:	bl	4d60 <mpfr_clear@plt>
   10024:	add	x0, sp, #0x10
   10028:	bl	4d60 <mpfr_clear@plt>
   1002c:	orr	w0, w19, w20
   10030:	b	10268 <mpc_sin_cos@@Base+0xa34>
   10034:	sub	x1, x29, #0x50
   10038:	mov	x0, x21
   1003c:	mov	w2, w27
   10040:	bl	5580 <mpc_set@plt>
   10044:	b	100a4 <mpc_sin_cos@@Base+0x870>
   10048:	sub	x0, x29, #0x70
   1004c:	mov	w1, #0x2                   	// #2
   10050:	bl	5440 <mpfr_init2@plt>
   10054:	add	x0, sp, #0x70
   10058:	mov	w1, #0x2                   	// #2
   1005c:	bl	5440 <mpfr_init2@plt>
   10060:	sub	x0, x29, #0x70
   10064:	add	x1, sp, #0x70
   10068:	sub	x2, x29, #0x50
   1006c:	mov	w3, #0x1                   	// #1
   10070:	bl	5520 <mpfr_sin_cos@plt>
   10074:	ldur	w1, [x29, #-104]
   10078:	mov	x0, x21
   1007c:	bl	5120 <mpfr_set_inf@plt>
   10080:	ldr	w8, [sp, #120]
   10084:	ldur	w9, [x29, #-40]
   10088:	add	x0, x21, #0x20
   1008c:	mul	w1, w9, w8
   10090:	bl	5120 <mpfr_set_inf@plt>
   10094:	sub	x0, x29, #0x70
   10098:	bl	4d60 <mpfr_clear@plt>
   1009c:	add	x0, sp, #0x70
   100a0:	bl	4d60 <mpfr_clear@plt>
   100a4:	cbz	x19, 10258 <mpc_sin_cos@@Base+0xa24>
   100a8:	ldur	x9, [x29, #-64]
   100ac:	ldur	x8, [x29, #-32]
   100b0:	sub	x10, x29, #0x50
   100b4:	add	x21, x10, #0x20
   100b8:	cmp	x9, x23
   100bc:	b.ne	100dc <mpc_sin_cos@@Base+0x8a8>  // b.any
   100c0:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   100c4:	cmp	x8, x9
   100c8:	b.ne	10108 <mpc_sin_cos@@Base+0x8d4>  // b.any
   100cc:	mov	w1, #0x1                   	// #1
   100d0:	mov	x0, x19
   100d4:	bl	5120 <mpfr_set_inf@plt>
   100d8:	b	10110 <mpc_sin_cos@@Base+0x8dc>
   100dc:	cmp	x8, x23
   100e0:	b.ne	1013c <mpc_sin_cos@@Base+0x908>  // b.any
   100e4:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   100e8:	cmp	x9, x8
   100ec:	add	x0, x19, #0x20
   100f0:	b.ne	10180 <mpc_sin_cos@@Base+0x94c>  // b.any
   100f4:	ldur	w3, [x29, #-72]
   100f8:	asr	w2, w25, #4
   100fc:	sub	x1, x29, #0x50
   10100:	bl	51d0 <mpfr_set4@plt>
   10104:	b	10184 <mpc_sin_cos@@Base+0x950>
   10108:	mov	x0, x19
   1010c:	bl	4a40 <mpfr_set_nan@plt>
   10110:	ldur	x8, [x29, #-32]
   10114:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   10118:	add	x0, x19, #0x20
   1011c:	cmp	x8, x9
   10120:	b.ne	10254 <mpc_sin_cos@@Base+0xa20>  // b.any
   10124:	ldur	w3, [x29, #-40]
   10128:	asr	w2, w25, #4
   1012c:	mov	x1, x21
   10130:	bl	51d0 <mpfr_set4@plt>
   10134:	cbz	w24, 10264 <mpc_sin_cos@@Base+0xa30>
   10138:	b	1025c <mpc_sin_cos@@Base+0xa28>
   1013c:	mov	x10, #0x8000000000000001    	// #-9223372036854775807
   10140:	cmp	x9, x10
   10144:	b.eq	10194 <mpc_sin_cos@@Base+0x960>  // b.none
   10148:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
   1014c:	cmp	x9, x10
   10150:	b.ne	101d0 <mpc_sin_cos@@Base+0x99c>  // b.any
   10154:	ldur	w9, [x29, #-72]
   10158:	ldur	w11, [x29, #-40]
   1015c:	cmp	x8, x10
   10160:	eor	w20, w11, w9
   10164:	b.ne	10224 <mpc_sin_cos@@Base+0x9f0>  // b.any
   10168:	cmp	w20, #0x0
   1016c:	mov	w8, #0xffffffff            	// #-1
   10170:	cneg	w1, w8, lt  // lt = tstop
   10174:	mov	x0, x19
   10178:	bl	5120 <mpfr_set_inf@plt>
   1017c:	b	1022c <mpc_sin_cos@@Base+0x9f8>
   10180:	bl	4a40 <mpfr_set_nan@plt>
   10184:	mov	x0, x19
   10188:	bl	4a40 <mpfr_set_nan@plt>
   1018c:	cbz	w24, 10264 <mpc_sin_cos@@Base+0xa30>
   10190:	b	1025c <mpc_sin_cos@@Base+0xa28>
   10194:	ldur	w8, [x29, #-72]
   10198:	ldur	w9, [x29, #-40]
   1019c:	add	x0, x19, #0x20
   101a0:	asr	w2, w25, #4
   101a4:	sub	x1, x29, #0x50
   101a8:	eor	w8, w9, w8
   101ac:	cmp	w8, #0x0
   101b0:	mov	w8, #0xffffffff            	// #-1
   101b4:	cneg	w3, w8, lt  // lt = tstop
   101b8:	bl	51d0 <mpfr_set4@plt>
   101bc:	mov	w1, #0x1                   	// #1
   101c0:	mov	x0, x19
   101c4:	bl	5120 <mpfr_set_inf@plt>
   101c8:	cbz	w24, 10264 <mpc_sin_cos@@Base+0xa30>
   101cc:	b	1025c <mpc_sin_cos@@Base+0xa28>
   101d0:	add	x0, sp, #0x70
   101d4:	mov	w1, #0x2                   	// #2
   101d8:	bl	5440 <mpfr_init2@plt>
   101dc:	sub	x0, x29, #0x70
   101e0:	mov	w1, #0x2                   	// #2
   101e4:	bl	5440 <mpfr_init2@plt>
   101e8:	sub	x0, x29, #0x70
   101ec:	add	x1, sp, #0x70
   101f0:	sub	x2, x29, #0x50
   101f4:	mov	w3, wzr
   101f8:	bl	5520 <mpfr_sin_cos@plt>
   101fc:	ldr	x8, [sp, #128]
   10200:	mov	x9, #0x2                   	// #2
   10204:	movk	x9, #0x8000, lsl #48
   10208:	cmp	x8, x9
   1020c:	b.gt	10288 <mpc_sin_cos@@Base+0xa54>
   10210:	cmp	x8, x23
   10214:	b.ne	1021c <mpc_sin_cos@@Base+0x9e8>  // b.any
   10218:	bl	4b00 <mpfr_set_erangeflag@plt>
   1021c:	mov	w1, wzr
   10220:	b	1028c <mpc_sin_cos@@Base+0xa58>
   10224:	mov	x0, x19
   10228:	bl	4a40 <mpfr_set_nan@plt>
   1022c:	ldur	x8, [x29, #-32]
   10230:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   10234:	add	x0, x19, #0x20
   10238:	cmp	x8, x9
   1023c:	b.ne	10254 <mpc_sin_cos@@Base+0xa20>  // b.any
   10240:	cmp	w20, #0x0
   10244:	mov	w8, #0xffffffff            	// #-1
   10248:	asr	w2, w25, #4
   1024c:	cneg	w3, w8, lt  // lt = tstop
   10250:	b	1012c <mpc_sin_cos@@Base+0x8f8>
   10254:	bl	4a40 <mpfr_set_nan@plt>
   10258:	cbz	w24, 10264 <mpc_sin_cos@@Base+0xa30>
   1025c:	sub	x0, x29, #0x50
   10260:	bl	4a10 <mpc_clear@plt>
   10264:	mov	w0, wzr
   10268:	ldp	x20, x19, [sp, #336]
   1026c:	ldp	x22, x21, [sp, #320]
   10270:	ldp	x24, x23, [sp, #304]
   10274:	ldp	x26, x25, [sp, #288]
   10278:	ldp	x28, x27, [sp, #272]
   1027c:	ldp	x29, x30, [sp, #256]
   10280:	add	sp, sp, #0x160
   10284:	ret
   10288:	ldr	w1, [sp, #120]
   1028c:	mov	x0, x19
   10290:	bl	5120 <mpfr_set_inf@plt>
   10294:	ldur	x8, [x29, #-32]
   10298:	mov	x9, #0x2                   	// #2
   1029c:	movk	x9, #0x8000, lsl #48
   102a0:	add	x19, x19, #0x20
   102a4:	cmp	x8, x9
   102a8:	b.gt	102c0 <mpc_sin_cos@@Base+0xa8c>
   102ac:	cmp	x8, x23
   102b0:	b.ne	102b8 <mpc_sin_cos@@Base+0xa84>  // b.any
   102b4:	bl	4b00 <mpfr_set_erangeflag@plt>
   102b8:	mov	w20, wzr
   102bc:	b	102c4 <mpc_sin_cos@@Base+0xa90>
   102c0:	ldur	w20, [x29, #-40]
   102c4:	ldur	x8, [x29, #-96]
   102c8:	mov	x9, #0x2                   	// #2
   102cc:	movk	x9, #0x8000, lsl #48
   102d0:	cmp	x8, x9
   102d4:	b.gt	102ec <mpc_sin_cos@@Base+0xab8>
   102d8:	cmp	x8, x23
   102dc:	b.ne	102e4 <mpc_sin_cos@@Base+0xab0>  // b.any
   102e0:	bl	4b00 <mpfr_set_erangeflag@plt>
   102e4:	mov	w8, wzr
   102e8:	b	102f0 <mpc_sin_cos@@Base+0xabc>
   102ec:	ldur	w8, [x29, #-104]
   102f0:	cmp	w20, w8
   102f4:	mov	w8, #0xffffffff            	// #-1
   102f8:	cneg	w1, w8, ne  // ne = any
   102fc:	mov	x0, x19
   10300:	bl	5120 <mpfr_set_inf@plt>
   10304:	sub	x0, x29, #0x70
   10308:	bl	4d60 <mpfr_clear@plt>
   1030c:	add	x0, sp, #0x70
   10310:	bl	4d60 <mpfr_clear@plt>
   10314:	cbz	w24, 10264 <mpc_sin_cos@@Base+0xa30>
   10318:	b	1025c <mpc_sin_cos@@Base+0xa28>

000000000001031c <mpc_sinh@@Base>:
   1031c:	sub	sp, sp, #0xa0
   10320:	stp	x29, x30, [sp, #128]
   10324:	str	x19, [sp, #144]
   10328:	ldp	q1, q0, [x1, #32]
   1032c:	ubfiz	w8, w2, #4, #4
   10330:	mov	x19, x0
   10334:	add	w2, w8, w2, asr #4
   10338:	stp	q1, q0, [sp, #64]
   1033c:	ldp	q1, q0, [x1]
   10340:	add	x1, sp, #0x40
   10344:	add	x29, sp, #0x80
   10348:	stp	q1, q0, [sp, #96]
   1034c:	ldp	q1, q0, [x0, #32]
   10350:	stp	q1, q0, [sp]
   10354:	ldp	q1, q0, [x0]
   10358:	mov	x0, sp
   1035c:	stp	q1, q0, [sp, #32]
   10360:	bl	4f50 <mpc_sin@plt>
   10364:	ldp	q1, q0, [sp, #32]
   10368:	asr	w8, w0, #2
   1036c:	cmp	w8, #0x0
   10370:	cset	w9, ne  // ne = any
   10374:	stp	q1, q0, [x19]
   10378:	ldp	q1, q0, [sp]
   1037c:	cmp	w8, #0x2
   10380:	csel	w8, w8, w9, eq  // eq = none
   10384:	tst	w0, #0x3
   10388:	stp	q1, q0, [x19, #32]
   1038c:	and	w9, w0, #0x3
   10390:	cset	w10, ne  // ne = any
   10394:	ldr	x19, [sp, #144]
   10398:	ldp	x29, x30, [sp, #128]
   1039c:	cmp	w9, #0x2
   103a0:	mov	w9, #0x8                   	// #8
   103a4:	lsl	w10, w10, #2
   103a8:	csel	w9, w9, w10, eq  // eq = none
   103ac:	orr	w0, w8, w9
   103b0:	add	sp, sp, #0xa0
   103b4:	ret

00000000000103b8 <mpc_sqr@@Base>:
   103b8:	sub	sp, sp, #0xd0
   103bc:	stp	x20, x19, [sp, #192]
   103c0:	mov	x19, x0
   103c4:	mov	x0, x1
   103c8:	stp	x29, x30, [sp, #112]
   103cc:	stp	x28, x27, [sp, #128]
   103d0:	stp	x26, x25, [sp, #144]
   103d4:	stp	x24, x23, [sp, #160]
   103d8:	stp	x22, x21, [sp, #176]
   103dc:	add	x29, sp, #0x70
   103e0:	mov	w21, w2
   103e4:	mov	x20, x1
   103e8:	bl	54d0 <mpfr_number_p@plt>
   103ec:	cbz	w0, 10478 <mpc_sqr@@Base+0xc0>
   103f0:	add	x22, x20, #0x20
   103f4:	mov	x0, x22
   103f8:	bl	54d0 <mpfr_number_p@plt>
   103fc:	cbz	w0, 10478 <mpc_sqr@@Base+0xc0>
   10400:	mov	x23, x19
   10404:	ldr	x9, [x19]
   10408:	ldr	x10, [x23, #32]!
   1040c:	ldr	x8, [x20, #48]
   10410:	mov	x25, #0x8000000000000001    	// #-9223372036854775807
   10414:	cmp	x9, x10
   10418:	csel	x24, x9, x10, gt
   1041c:	cmp	x8, x25
   10420:	b.ne	104cc <mpc_sqr@@Base+0x114>  // b.any
   10424:	ldr	w8, [x20, #8]
   10428:	ldr	w9, [x20, #40]
   1042c:	and	w2, w21, #0xf
   10430:	mov	x0, x19
   10434:	mov	x1, x20
   10438:	eor	w22, w9, w8
   1043c:	bl	5010 <mpfr_sqr@plt>
   10440:	mov	w20, w0
   10444:	mov	w8, #0x1                   	// #1
   10448:	str	w8, [x19, #40]
   1044c:	str	x25, [x19, #48]
   10450:	tbz	w22, #31, 10464 <mpc_sqr@@Base+0xac>
   10454:	mov	x0, x19
   10458:	mov	x1, x19
   1045c:	mov	w2, wzr
   10460:	bl	4f60 <mpc_conj@plt>
   10464:	cmp	w20, #0x0
   10468:	cset	w8, ne  // ne = any
   1046c:	mov	w9, #0x2                   	// #2
   10470:	csel	w0, w9, w8, lt  // lt = tstop
   10474:	b	104ac <mpc_sqr@@Base+0xf4>
   10478:	ldr	x8, [x20, #16]
   1047c:	mov	x10, #0x2                   	// #2
   10480:	movk	x10, #0x8000, lsl #48
   10484:	cmp	x8, x10
   10488:	b.eq	10498 <mpc_sqr@@Base+0xe0>  // b.none
   1048c:	ldr	x9, [x20, #48]
   10490:	cmp	x9, x10
   10494:	b.ne	10554 <mpc_sqr@@Base+0x19c>  // b.any
   10498:	mov	x0, x19
   1049c:	bl	4a40 <mpfr_set_nan@plt>
   104a0:	add	x0, x19, #0x20
   104a4:	bl	4a40 <mpfr_set_nan@plt>
   104a8:	mov	w0, wzr
   104ac:	ldp	x20, x19, [sp, #192]
   104b0:	ldp	x22, x21, [sp, #176]
   104b4:	ldp	x24, x23, [sp, #160]
   104b8:	ldp	x26, x25, [sp, #144]
   104bc:	ldp	x28, x27, [sp, #128]
   104c0:	ldp	x29, x30, [sp, #112]
   104c4:	add	sp, sp, #0xd0
   104c8:	ret
   104cc:	ldr	x9, [x20, #16]
   104d0:	cmp	x9, x25
   104d4:	b.ne	10584 <mpc_sqr@@Base+0x1cc>  // b.any
   104d8:	ldr	w8, [x20, #8]
   104dc:	ldr	w9, [x20, #40]
   104e0:	and	w10, w21, #0xf
   104e4:	mov	w21, #0x2                   	// #2
   104e8:	cmp	w10, #0x3
   104ec:	mov	w11, #0x3                   	// #3
   104f0:	csel	w12, w21, w10, eq  // eq = none
   104f4:	cmp	w10, #0x2
   104f8:	csel	w2, w11, w12, eq  // eq = none
   104fc:	mov	x0, x19
   10500:	mov	x1, x22
   10504:	eor	w23, w9, w8
   10508:	bl	5010 <mpfr_sqr@plt>
   1050c:	mov	w20, w0
   10510:	mov	x0, x19
   10514:	mov	x1, x19
   10518:	mov	w2, wzr
   1051c:	bl	4b80 <mpfr_neg@plt>
   10520:	mov	w8, #0x1                   	// #1
   10524:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   10528:	str	w8, [x19, #40]
   1052c:	str	x9, [x19, #48]
   10530:	tbz	w23, #31, 10544 <mpc_sqr@@Base+0x18c>
   10534:	mov	x0, x19
   10538:	mov	x1, x19
   1053c:	mov	w2, wzr
   10540:	bl	4f60 <mpc_conj@plt>
   10544:	cmp	w20, #0x0
   10548:	cset	w8, ne  // ne = any
   1054c:	csel	w0, w21, w8, gt
   10550:	b	104ac <mpc_sqr@@Base+0xf4>
   10554:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
   10558:	cmp	x8, x10
   1055c:	b.ne	10598 <mpc_sqr@@Base+0x1e0>  // b.any
   10560:	cmp	x9, x10
   10564:	b.ne	105b4 <mpc_sqr@@Base+0x1fc>  // b.any
   10568:	ldr	w8, [x20, #8]
   1056c:	ldr	w9, [x20, #40]
   10570:	add	x0, x19, #0x20
   10574:	mul	w1, w9, w8
   10578:	bl	5120 <mpfr_set_inf@plt>
   1057c:	mov	x0, x19
   10580:	b	104a4 <mpc_sqr@@Base+0xec>
   10584:	cmp	x19, x20
   10588:	b.eq	105e4 <mpc_sqr@@Base+0x22c>  // b.none
   1058c:	ldp	q1, q0, [x20]
   10590:	stp	q1, q0, [sp, #16]
   10594:	b	1060c <mpc_sqr@@Base+0x254>
   10598:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   1059c:	cmp	x8, x9
   105a0:	add	x0, x19, #0x20
   105a4:	b.ne	105cc <mpc_sqr@@Base+0x214>  // b.any
   105a8:	bl	4a40 <mpfr_set_nan@plt>
   105ac:	mov	w1, #0xffffffff            	// #-1
   105b0:	b	10798 <mpc_sqr@@Base+0x3e0>
   105b4:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   105b8:	cmp	x9, x8
   105bc:	add	x0, x19, #0x20
   105c0:	b.ne	10784 <mpc_sqr@@Base+0x3cc>  // b.any
   105c4:	bl	4a40 <mpfr_set_nan@plt>
   105c8:	b	10794 <mpc_sqr@@Base+0x3dc>
   105cc:	ldr	w8, [x20, #8]
   105d0:	ldr	w9, [x20, #40]
   105d4:	mul	w1, w9, w8
   105d8:	bl	5120 <mpfr_set_inf@plt>
   105dc:	mov	w1, #0xffffffff            	// #-1
   105e0:	b	10798 <mpc_sqr@@Base+0x3e0>
   105e4:	ldr	x1, [x20]
   105e8:	add	x0, sp, #0x10
   105ec:	bl	5440 <mpfr_init2@plt>
   105f0:	ldr	w3, [x20, #8]
   105f4:	add	x0, sp, #0x10
   105f8:	mov	x1, x20
   105fc:	mov	w2, wzr
   10600:	bl	51d0 <mpfr_set4@plt>
   10604:	ldr	x9, [x20, #16]
   10608:	ldr	x8, [x20, #48]
   1060c:	ldr	x10, [x20]
   10610:	ldr	x11, [x20, #32]
   10614:	subs	x8, x9, x8
   10618:	cneg	x8, x8, mi  // mi = first
   1061c:	cmp	x10, x11
   10620:	csel	x9, x10, x11, gt
   10624:	cmp	x9, #0x0
   10628:	cinc	x9, x9, lt  // lt = tstop
   1062c:	cmp	x8, x9, asr #1
   10630:	b.le	10650 <mpc_sqr@@Base+0x298>
   10634:	and	w3, w21, #0xf
   10638:	add	x1, sp, #0x10
   1063c:	mov	x0, x19
   10640:	mov	x2, x22
   10644:	bl	10884 <mpc_sqr@@Base+0x4cc>
   10648:	mov	w24, w0
   1064c:	b	107dc <mpc_sqr@@Base+0x424>
   10650:	sub	x0, x29, #0x20
   10654:	bl	4aa0 <mpfr_init@plt>
   10658:	add	x0, sp, #0x30
   1065c:	bl	4aa0 <mpfr_init@plt>
   10660:	bl	5060 <mpfr_get_emin@plt>
   10664:	tst	w21, #0xf
   10668:	mov	x25, #0x2                   	// #2
   1066c:	and	w8, w21, #0xf
   10670:	movk	x25, #0x8000, lsl #48
   10674:	cset	w26, eq  // eq = none
   10678:	str	x0, [sp, #8]
   1067c:	str	w8, [sp, #4]
   10680:	mov	x0, x24
   10684:	bl	4d20 <mpc_ceil_log2@plt>
   10688:	add	x8, x24, x0
   1068c:	add	x24, x8, #0x5
   10690:	sub	x0, x29, #0x20
   10694:	mov	x1, x24
   10698:	bl	4c80 <mpfr_set_prec@plt>
   1069c:	add	x0, sp, #0x30
   106a0:	mov	x1, x24
   106a4:	bl	4c80 <mpfr_set_prec@plt>
   106a8:	sub	x0, x29, #0x20
   106ac:	add	x1, sp, #0x10
   106b0:	mov	w3, #0x4                   	// #4
   106b4:	mov	x2, x22
   106b8:	bl	4e60 <mpfr_add@plt>
   106bc:	mov	w27, w0
   106c0:	add	x0, sp, #0x30
   106c4:	add	x1, sp, #0x10
   106c8:	mov	w3, #0x4                   	// #4
   106cc:	mov	x2, x22
   106d0:	bl	4a60 <mpfr_sub@plt>
   106d4:	ldur	x8, [x29, #-16]
   106d8:	cmp	x8, x25
   106dc:	b.le	107a4 <mpc_sqr@@Base+0x3ec>
   106e0:	ldur	w8, [x29, #-24]
   106e4:	cbz	w8, 107b8 <mpc_sqr@@Base+0x400>
   106e8:	ldr	x8, [sp, #64]
   106ec:	cmp	x8, x25
   106f0:	b.le	107a4 <mpc_sqr@@Base+0x3ec>
   106f4:	ldr	w8, [sp, #56]
   106f8:	cbz	w8, 107b8 <mpc_sqr@@Base+0x400>
   106fc:	mov	w28, w0
   10700:	sub	x0, x29, #0x20
   10704:	sub	x1, x29, #0x20
   10708:	add	x2, sp, #0x30
   1070c:	mov	w3, #0x4                   	// #4
   10710:	bl	4b70 <mpfr_mul@plt>
   10714:	ldur	x8, [x29, #-16]
   10718:	ldr	x9, [sp, #8]
   1071c:	cmp	x8, x9
   10720:	b.eq	10868 <mpc_sqr@@Base+0x4b0>  // b.none
   10724:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   10728:	cmp	x8, x9
   1072c:	b.eq	10868 <mpc_sqr@@Base+0x4b0>  // b.none
   10730:	ldr	x9, [x19]
   10734:	orr	w8, w28, w27
   10738:	orr	w27, w8, w0
   1073c:	cmp	w27, #0x0
   10740:	sub	x1, x24, #0x3
   10744:	add	x4, x9, x26
   10748:	sub	x0, x29, #0x20
   1074c:	mov	w2, #0x4                   	// #4
   10750:	mov	w3, #0x1                   	// #1
   10754:	cset	w28, eq  // eq = none
   10758:	bl	5450 <mpfr_can_round@plt>
   1075c:	orr	w8, w0, w28
   10760:	cbz	w8, 10680 <mpc_sqr@@Base+0x2c8>
   10764:	ldur	w3, [x29, #-24]
   10768:	ldr	w2, [sp, #4]
   1076c:	sub	x1, x29, #0x20
   10770:	mov	x0, x19
   10774:	bl	51d0 <mpfr_set4@plt>
   10778:	cmp	w0, #0x0
   1077c:	csel	w24, w27, w0, eq  // eq = none
   10780:	b	107cc <mpc_sqr@@Base+0x414>
   10784:	ldr	w8, [x20, #8]
   10788:	ldr	w9, [x20, #40]
   1078c:	mul	w1, w9, w8
   10790:	bl	5120 <mpfr_set_inf@plt>
   10794:	mov	w1, #0x1                   	// #1
   10798:	mov	x0, x19
   1079c:	bl	5120 <mpfr_set_inf@plt>
   107a0:	b	104a8 <mpc_sqr@@Base+0xf0>
   107a4:	mov	x9, #0x2                   	// #2
   107a8:	movk	x9, #0x8000, lsl #48
   107ac:	cmp	x8, x9
   107b0:	b.ne	107b8 <mpc_sqr@@Base+0x400>  // b.any
   107b4:	bl	4b00 <mpfr_set_erangeflag@plt>
   107b8:	mov	w8, #0x1                   	// #1
   107bc:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   107c0:	mov	w24, wzr
   107c4:	str	w8, [x19, #8]
   107c8:	str	x9, [x19, #16]
   107cc:	sub	x0, x29, #0x20
   107d0:	bl	4d60 <mpfr_clear@plt>
   107d4:	add	x0, sp, #0x30
   107d8:	bl	4d60 <mpfr_clear@plt>
   107dc:	bl	52f0 <mpfr_underflow_p@plt>
   107e0:	mov	w25, w0
   107e4:	bl	4e20 <mpfr_clear_underflow@plt>
   107e8:	asr	w26, w21, #4
   107ec:	add	x1, sp, #0x10
   107f0:	mov	x0, x23
   107f4:	mov	x2, x22
   107f8:	mov	w3, w26
   107fc:	bl	4b70 <mpfr_mul@plt>
   10800:	mov	w21, w0
   10804:	bl	52f0 <mpfr_underflow_p@plt>
   10808:	cbnz	w0, 10824 <mpc_sqr@@Base+0x46c>
   1080c:	mov	w2, #0x1                   	// #1
   10810:	mov	x0, x23
   10814:	mov	x1, x23
   10818:	mov	w3, w26
   1081c:	bl	4f40 <mpfr_mul_2ui@plt>
   10820:	orr	w21, w0, w21
   10824:	cbz	w25, 1082c <mpc_sqr@@Base+0x474>
   10828:	bl	4990 <mpfr_set_underflow@plt>
   1082c:	cmp	x19, x20
   10830:	b.ne	1083c <mpc_sqr@@Base+0x484>  // b.any
   10834:	add	x0, sp, #0x10
   10838:	bl	4d60 <mpfr_clear@plt>
   1083c:	cmp	w24, #0x0
   10840:	mov	w8, #0x2                   	// #2
   10844:	cset	w9, ne  // ne = any
   10848:	csel	w8, w8, w9, lt  // lt = tstop
   1084c:	cmp	w21, #0x0
   10850:	cset	w9, ne  // ne = any
   10854:	lsl	w9, w9, #2
   10858:	mov	w10, #0x8                   	// #8
   1085c:	csel	w9, w10, w9, lt  // lt = tstop
   10860:	orr	w0, w9, w8
   10864:	b	104ac <mpc_sqr@@Base+0xf4>
   10868:	ldr	w3, [sp, #4]
   1086c:	add	x1, sp, #0x10
   10870:	mov	x0, x19
   10874:	mov	x2, x22
   10878:	bl	10884 <mpc_sqr@@Base+0x4cc>
   1087c:	mov	w24, w0
   10880:	b	107cc <mpc_sqr@@Base+0x414>
   10884:	sub	sp, sp, #0xb0
   10888:	stp	x29, x30, [sp, #96]
   1088c:	stp	x26, x25, [sp, #112]
   10890:	stp	x24, x23, [sp, #128]
   10894:	stp	x22, x21, [sp, #144]
   10898:	stp	x20, x19, [sp, #160]
   1089c:	ldr	x8, [x1]
   108a0:	add	x29, sp, #0x60
   108a4:	mov	x20, x1
   108a8:	mov	x22, x0
   108ac:	lsl	x1, x8, #1
   108b0:	sub	x0, x29, #0x20
   108b4:	mov	w21, w3
   108b8:	mov	x19, x2
   108bc:	bl	5440 <mpfr_init2@plt>
   108c0:	ldr	x8, [x19]
   108c4:	add	x0, sp, #0x20
   108c8:	lsl	x1, x8, #1
   108cc:	bl	5440 <mpfr_init2@plt>
   108d0:	sub	x0, x29, #0x20
   108d4:	mov	x1, x20
   108d8:	mov	w2, wzr
   108dc:	bl	5010 <mpfr_sqr@plt>
   108e0:	add	x0, sp, #0x20
   108e4:	mov	x1, x19
   108e8:	mov	w2, wzr
   108ec:	bl	5010 <mpfr_sqr@plt>
   108f0:	sub	x1, x29, #0x20
   108f4:	add	x2, sp, #0x20
   108f8:	mov	x0, x22
   108fc:	mov	w3, w21
   10900:	bl	4a60 <mpfr_sub@plt>
   10904:	ldr	x8, [x22, #16]
   10908:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   1090c:	cmp	x8, x9
   10910:	b.ne	10980 <mpc_sqr@@Base+0x5c8>  // b.any
   10914:	ldr	w8, [x22, #8]
   10918:	mov	x0, x22
   1091c:	mov	x2, xzr
   10920:	mov	w3, wzr
   10924:	cmp	w8, #0x0
   10928:	mov	w8, #0x1                   	// #1
   1092c:	cneg	x1, x8, lt  // lt = tstop
   10930:	bl	49e0 <mpfr_set_si_2exp@plt>
   10934:	bl	5200 <mpfr_get_emax@plt>
   10938:	mov	x2, x0
   1093c:	mov	x0, x22
   10940:	mov	x1, x22
   10944:	mov	w3, w21
   10948:	bl	4f40 <mpfr_mul_2ui@plt>
   1094c:	mov	w25, w0
   10950:	sub	x0, x29, #0x20
   10954:	bl	4d60 <mpfr_clear@plt>
   10958:	add	x0, sp, #0x20
   1095c:	bl	4d60 <mpfr_clear@plt>
   10960:	mov	w0, w25
   10964:	ldp	x20, x19, [sp, #160]
   10968:	ldp	x22, x21, [sp, #144]
   1096c:	ldp	x24, x23, [sp, #128]
   10970:	ldp	x26, x25, [sp, #112]
   10974:	ldp	x29, x30, [sp, #96]
   10978:	add	sp, sp, #0xb0
   1097c:	ret
   10980:	ldur	x9, [x29, #-16]
   10984:	ldr	x10, [sp, #48]
   10988:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
   1098c:	mov	w25, w0
   10990:	cmp	x9, x11
   10994:	b.ne	109b4 <mpc_sqr@@Base+0x5fc>  // b.any
   10998:	cmp	x10, x11
   1099c:	b.eq	109d0 <mpc_sqr@@Base+0x618>  // b.none
   109a0:	ldur	w8, [x29, #-24]
   109a4:	cmp	w8, #0x0
   109a8:	mov	w8, #0xffffffff            	// #-1
   109ac:	cneg	w25, w8, lt  // lt = tstop
   109b0:	b	10950 <mpc_sqr@@Base+0x598>
   109b4:	cmp	x10, x11
   109b8:	b.ne	109d0 <mpc_sqr@@Base+0x618>  // b.any
   109bc:	ldr	w8, [sp, #40]
   109c0:	cmp	w8, #0x0
   109c4:	mov	w8, #0x1                   	// #1
   109c8:	cneg	w25, w8, lt  // lt = tstop
   109cc:	b	10950 <mpc_sqr@@Base+0x598>
   109d0:	mov	x11, #0x8000000000000001    	// #-9223372036854775807
   109d4:	mov	x26, #0x2                   	// #2
   109d8:	cmp	x9, x11
   109dc:	movk	x26, #0x8000, lsl #48
   109e0:	cset	w9, eq  // eq = none
   109e4:	cmp	x10, x11
   109e8:	cset	w10, eq  // eq = none
   109ec:	cmp	x8, x26
   109f0:	b.eq	109fc <mpc_sqr@@Base+0x644>  // b.none
   109f4:	and	w8, w9, w10
   109f8:	cbz	w8, 10950 <mpc_sqr@@Base+0x598>
   109fc:	ldr	x24, [x20, #16]
   10a00:	ldr	x23, [x19, #16]
   10a04:	mov	x0, x20
   10a08:	mov	x1, xzr
   10a0c:	bl	4c10 <mpfr_set_exp@plt>
   10a10:	mov	x0, x19
   10a14:	mov	x1, xzr
   10a18:	bl	4c10 <mpfr_set_exp@plt>
   10a1c:	add	x0, sp, #0x10
   10a20:	bl	54a0 <__gmpz_init@plt>
   10a24:	mov	x0, sp
   10a28:	bl	54a0 <__gmpz_init@plt>
   10a2c:	add	x0, sp, #0x10
   10a30:	mov	x1, x24
   10a34:	bl	54c0 <__gmpz_set_si@plt>
   10a38:	add	x0, sp, #0x10
   10a3c:	add	x1, sp, #0x10
   10a40:	mov	w2, #0x1                   	// #1
   10a44:	bl	4e90 <__gmpz_mul_2exp@plt>
   10a48:	mov	x0, sp
   10a4c:	mov	x1, x23
   10a50:	bl	54c0 <__gmpz_set_si@plt>
   10a54:	mov	x0, sp
   10a58:	mov	x1, sp
   10a5c:	mov	w2, #0x1                   	// #1
   10a60:	bl	4e90 <__gmpz_mul_2exp@plt>
   10a64:	sub	x0, x29, #0x20
   10a68:	mov	x1, x20
   10a6c:	mov	w2, wzr
   10a70:	bl	5010 <mpfr_sqr@plt>
   10a74:	ldur	x8, [x29, #-16]
   10a78:	add	x0, sp, #0x10
   10a7c:	add	x1, sp, #0x10
   10a80:	neg	x2, x8
   10a84:	bl	4ad0 <__gmpz_sub_ui@plt>
   10a88:	sub	x0, x29, #0x20
   10a8c:	mov	x1, xzr
   10a90:	bl	4c10 <mpfr_set_exp@plt>
   10a94:	add	x0, sp, #0x20
   10a98:	mov	x1, x19
   10a9c:	mov	w2, wzr
   10aa0:	bl	5010 <mpfr_sqr@plt>
   10aa4:	ldr	x8, [sp, #48]
   10aa8:	mov	x0, sp
   10aac:	mov	x1, sp
   10ab0:	neg	x2, x8
   10ab4:	bl	4ad0 <__gmpz_sub_ui@plt>
   10ab8:	add	x0, sp, #0x20
   10abc:	mov	x1, xzr
   10ac0:	bl	4c10 <mpfr_set_exp@plt>
   10ac4:	ldr	x8, [x22, #16]
   10ac8:	cmp	x8, x26
   10acc:	b.ne	10b34 <mpc_sqr@@Base+0x77c>  // b.any
   10ad0:	bl	5200 <mpfr_get_emax@plt>
   10ad4:	mov	x25, x0
   10ad8:	add	x0, sp, #0x10
   10adc:	mov	x1, sp
   10ae0:	bl	5300 <__gmpz_cmp@plt>
   10ae4:	tbnz	w0, #31, 10ba0 <mpc_sqr@@Base+0x7e8>
   10ae8:	sub	x0, x29, #0x20
   10aec:	mov	x1, x25
   10af0:	bl	4c10 <mpfr_set_exp@plt>
   10af4:	add	x0, sp, #0x10
   10af8:	add	x1, sp, #0x10
   10afc:	mov	x2, x25
   10b00:	bl	4ad0 <__gmpz_sub_ui@plt>
   10b04:	mov	x0, sp
   10b08:	mov	x1, sp
   10b0c:	add	x2, sp, #0x10
   10b10:	bl	4bc0 <__gmpz_sub@plt>
   10b14:	ldr	x8, [sp, #8]
   10b18:	ldr	w9, [sp, #4]
   10b1c:	add	x0, sp, #0x20
   10b20:	ldr	x8, [x8]
   10b24:	cmp	w9, #0x0
   10b28:	csel	x1, xzr, x8, eq  // eq = none
   10b2c:	bl	4c10 <mpfr_set_exp@plt>
   10b30:	b	10bf4 <mpc_sqr@@Base+0x83c>
   10b34:	bl	5060 <mpfr_get_emin@plt>
   10b38:	mov	x25, x0
   10b3c:	add	x0, sp, #0x10
   10b40:	mov	x1, sp
   10b44:	bl	5300 <__gmpz_cmp@plt>
   10b48:	cmp	w0, #0x0
   10b4c:	b.le	10c34 <mpc_sqr@@Base+0x87c>
   10b50:	add	x0, sp, #0x20
   10b54:	mov	x1, x25
   10b58:	bl	4c10 <mpfr_set_exp@plt>
   10b5c:	neg	x2, x25
   10b60:	mov	x0, sp
   10b64:	mov	x1, sp
   10b68:	bl	4fa0 <__gmpz_add_ui@plt>
   10b6c:	add	x0, sp, #0x10
   10b70:	add	x1, sp, #0x10
   10b74:	mov	x2, sp
   10b78:	bl	4bc0 <__gmpz_sub@plt>
   10b7c:	add	x0, sp, #0x10
   10b80:	bl	49a0 <__gmpz_get_si@plt>
   10b84:	mov	x1, x0
   10b88:	sub	x0, x29, #0x20
   10b8c:	bl	4c10 <mpfr_set_exp@plt>
   10b90:	add	x0, sp, #0x10
   10b94:	mov	x1, sp
   10b98:	bl	4d00 <__gmpz_set@plt>
   10b9c:	b	10c74 <mpc_sqr@@Base+0x8bc>
   10ba0:	add	x0, sp, #0x20
   10ba4:	mov	x1, x25
   10ba8:	bl	4c10 <mpfr_set_exp@plt>
   10bac:	mov	x0, sp
   10bb0:	mov	x1, sp
   10bb4:	mov	x2, x25
   10bb8:	bl	4ad0 <__gmpz_sub_ui@plt>
   10bbc:	add	x0, sp, #0x10
   10bc0:	add	x1, sp, #0x10
   10bc4:	mov	x2, sp
   10bc8:	bl	4bc0 <__gmpz_sub@plt>
   10bcc:	ldr	x8, [sp, #24]
   10bd0:	ldr	w9, [sp, #20]
   10bd4:	sub	x0, x29, #0x20
   10bd8:	ldr	x8, [x8]
   10bdc:	cmp	w9, #0x0
   10be0:	csel	x1, xzr, x8, eq  // eq = none
   10be4:	bl	4c10 <mpfr_set_exp@plt>
   10be8:	add	x0, sp, #0x10
   10bec:	mov	x1, sp
   10bf0:	bl	4d00 <__gmpz_set@plt>
   10bf4:	sub	x1, x29, #0x20
   10bf8:	add	x2, sp, #0x20
   10bfc:	mov	x0, x22
   10c00:	mov	w3, w21
   10c04:	bl	4a60 <mpfr_sub@plt>
   10c08:	ldr	x8, [sp, #24]
   10c0c:	ldr	w9, [sp, #20]
   10c10:	mov	w25, w0
   10c14:	mov	x0, x22
   10c18:	ldr	x8, [x8]
   10c1c:	cmp	w9, #0x0
   10c20:	mov	x1, x22
   10c24:	mov	w3, w21
   10c28:	csel	x2, xzr, x8, eq  // eq = none
   10c2c:	bl	4f40 <mpfr_mul_2ui@plt>
   10c30:	b	10cb8 <mpc_sqr@@Base+0x900>
   10c34:	sub	x0, x29, #0x20
   10c38:	mov	x1, x25
   10c3c:	bl	4c10 <mpfr_set_exp@plt>
   10c40:	neg	x2, x25
   10c44:	add	x0, sp, #0x10
   10c48:	add	x1, sp, #0x10
   10c4c:	bl	4fa0 <__gmpz_add_ui@plt>
   10c50:	mov	x0, sp
   10c54:	mov	x1, sp
   10c58:	add	x2, sp, #0x10
   10c5c:	bl	4bc0 <__gmpz_sub@plt>
   10c60:	mov	x0, sp
   10c64:	bl	49a0 <__gmpz_get_si@plt>
   10c68:	mov	x1, x0
   10c6c:	add	x0, sp, #0x20
   10c70:	bl	4c10 <mpfr_set_exp@plt>
   10c74:	sub	x1, x29, #0x20
   10c78:	add	x2, sp, #0x20
   10c7c:	mov	x0, x22
   10c80:	mov	w3, w21
   10c84:	bl	4a60 <mpfr_sub@plt>
   10c88:	ldr	w8, [sp, #20]
   10c8c:	ldr	x9, [sp, #24]
   10c90:	mov	w25, w0
   10c94:	mov	x0, x22
   10c98:	neg	w10, w8
   10c9c:	str	w10, [sp, #20]
   10ca0:	ldr	x9, [x9]
   10ca4:	cmp	w8, #0x0
   10ca8:	mov	x1, x22
   10cac:	mov	w3, w21
   10cb0:	csel	x2, xzr, x9, eq  // eq = none
   10cb4:	bl	5320 <mpfr_div_2ui@plt>
   10cb8:	cmp	w0, #0x0
   10cbc:	csel	w25, w25, w0, eq  // eq = none
   10cc0:	add	x0, sp, #0x10
   10cc4:	bl	5180 <__gmpz_clear@plt>
   10cc8:	mov	x0, sp
   10ccc:	bl	5180 <__gmpz_clear@plt>
   10cd0:	mov	x0, x20
   10cd4:	mov	x1, x24
   10cd8:	bl	4c10 <mpfr_set_exp@plt>
   10cdc:	mov	x0, x19
   10ce0:	mov	x1, x23
   10ce4:	bl	4c10 <mpfr_set_exp@plt>
   10ce8:	b	10950 <mpc_sqr@@Base+0x598>

0000000000010cec <mpc_sqrt@@Base>:
   10cec:	sub	sp, sp, #0xf0
   10cf0:	stp	x24, x23, [sp, #192]
   10cf4:	mov	x24, x0
   10cf8:	mov	x0, x1
   10cfc:	stp	x29, x30, [sp, #144]
   10d00:	stp	x28, x27, [sp, #160]
   10d04:	stp	x26, x25, [sp, #176]
   10d08:	stp	x22, x21, [sp, #208]
   10d0c:	stp	x20, x19, [sp, #224]
   10d10:	add	x29, sp, #0x90
   10d14:	mov	w28, w2
   10d18:	mov	x26, x1
   10d1c:	bl	51f0 <mpfr_sgn@plt>
   10d20:	mov	w25, w0
   10d24:	add	x0, x26, #0x20
   10d28:	str	x0, [sp, #72]
   10d2c:	bl	51f0 <mpfr_sgn@plt>
   10d30:	ldr	w20, [x26, #40]
   10d34:	mov	w27, w0
   10d38:	mov	w8, #0x2                   	// #2
   10d3c:	mov	x0, x26
   10d40:	cmp	w20, #0x0
   10d44:	cinc	w22, w8, lt  // lt = tstop
   10d48:	bl	54d0 <mpfr_number_p@plt>
   10d4c:	cbz	w0, 10dcc <mpc_sqrt@@Base+0xe0>
   10d50:	ldr	x0, [sp, #72]
   10d54:	bl	54d0 <mpfr_number_p@plt>
   10d58:	cbz	w0, 10dcc <mpc_sqrt@@Base+0xe0>
   10d5c:	cbz	w27, 10e5c <mpc_sqrt@@Base+0x170>
   10d60:	cbz	w25, 10eb4 <mpc_sqrt@@Base+0x1c8>
   10d64:	mov	x10, x24
   10d68:	ldr	x8, [x24]
   10d6c:	ldr	x9, [x10, #32]!
   10d70:	sub	x0, x29, #0x20
   10d74:	cmp	x8, x9
   10d78:	str	x10, [sp, #16]
   10d7c:	csel	x23, x8, x9, gt
   10d80:	bl	4aa0 <mpfr_init@plt>
   10d84:	sub	x0, x29, #0x40
   10d88:	bl	4aa0 <mpfr_init@plt>
   10d8c:	mov	w21, w25
   10d90:	cmp	w25, #0x1
   10d94:	asr	w14, w28, #4
   10d98:	str	x24, [sp, #8]
   10d9c:	stp	w14, w27, [sp]
   10da0:	str	w28, [sp, #28]
   10da4:	b.lt	10f30 <mpc_sqrt@@Base+0x244>  // b.tstop
   10da8:	and	w13, w28, #0xf
   10dac:	ldr	x28, [x24]
   10db0:	ldr	x12, [x24, #32]
   10db4:	cmp	w27, #0x0
   10db8:	mov	w8, #0x2                   	// #2
   10dbc:	cinc	w8, w8, gt
   10dc0:	cmp	w14, #0x1
   10dc4:	csel	w9, w8, w14, eq  // eq = none
   10dc8:	b	11098 <mpc_sqrt@@Base+0x3ac>
   10dcc:	ldr	x8, [x26, #48]
   10dd0:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   10dd4:	asr	w19, w20, #31
   10dd8:	cmp	x8, x9
   10ddc:	b.ne	10e00 <mpc_sqrt@@Base+0x114>  // b.any
   10de0:	mov	w1, #0x1                   	// #1
   10de4:	mov	x0, x24
   10de8:	bl	5120 <mpfr_set_inf@plt>
   10dec:	add	x0, x24, #0x20
   10df0:	mov	w1, w19
   10df4:	bl	5120 <mpfr_set_inf@plt>
   10df8:	mov	w0, wzr
   10dfc:	b	113fc <mpc_sqrt@@Base+0x710>
   10e00:	ldr	x9, [x26, #16]
   10e04:	mov	x10, #0x2                   	// #2
   10e08:	movk	x10, #0x8000, lsl #48
   10e0c:	cmp	x9, x10
   10e10:	b.eq	10f18 <mpc_sqrt@@Base+0x22c>  // b.none
   10e14:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
   10e18:	cmp	x9, x10
   10e1c:	b.ne	10f08 <mpc_sqrt@@Base+0x21c>  // b.any
   10e20:	ldr	x0, [sp, #72]
   10e24:	ldr	w21, [x26, #8]
   10e28:	bl	54d0 <mpfr_number_p@plt>
   10e2c:	tbnz	w21, #31, 11048 <mpc_sqrt@@Base+0x35c>
   10e30:	cbz	w0, 11450 <mpc_sqrt@@Base+0x764>
   10e34:	mov	w1, #0x1                   	// #1
   10e38:	mov	x0, x24
   10e3c:	mov	w19, #0x1                   	// #1
   10e40:	bl	5120 <mpfr_set_inf@plt>
   10e44:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   10e48:	str	w19, [x24, #40]
   10e4c:	str	x8, [x24, #48]
   10e50:	tbnz	w20, #31, 10f78 <mpc_sqrt@@Base+0x28c>
   10e54:	mov	w0, wzr
   10e58:	b	113fc <mpc_sqrt@@Base+0x710>
   10e5c:	cbz	w25, 10f5c <mpc_sqrt@@Base+0x270>
   10e60:	cmp	w25, #0x1
   10e64:	b.lt	10f90 <mpc_sqrt@@Base+0x2a4>  // b.tstop
   10e68:	and	w2, w28, #0xf
   10e6c:	mov	x0, x24
   10e70:	mov	x1, x26
   10e74:	bl	5350 <mpfr_sqrt@plt>
   10e78:	mov	w19, w0
   10e7c:	mov	w8, #0x1                   	// #1
   10e80:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   10e84:	str	w8, [x24, #40]
   10e88:	str	x9, [x24, #48]
   10e8c:	tbz	w20, #31, 10ea0 <mpc_sqrt@@Base+0x1b4>
   10e90:	mov	x0, x24
   10e94:	mov	x1, x24
   10e98:	mov	w2, wzr
   10e9c:	bl	4f60 <mpc_conj@plt>
   10ea0:	cmp	w19, #0x0
   10ea4:	cset	w8, ne  // ne = any
   10ea8:	mov	w9, #0x2                   	// #2
   10eac:	csel	w0, w9, w8, lt  // lt = tstop
   10eb0:	b	113fc <mpc_sqrt@@Base+0x710>
   10eb4:	ldr	x8, [sp, #72]
   10eb8:	sub	x0, x29, #0x20
   10ebc:	sub	x1, x29, #0x20
   10ec0:	mov	w2, #0x1                   	// #1
   10ec4:	ldp	q1, q0, [x8]
   10ec8:	mov	w3, wzr
   10ecc:	stp	q1, q0, [x29, #-32]
   10ed0:	bl	5320 <mpfr_div_2ui@plt>
   10ed4:	cmp	w27, #0x1
   10ed8:	b.lt	10fcc <mpc_sqrt@@Base+0x2e0>  // b.tstop
   10edc:	and	w2, w28, #0xf
   10ee0:	sub	x1, x29, #0x20
   10ee4:	mov	x0, x24
   10ee8:	bl	5350 <mpfr_sqrt@plt>
   10eec:	mov	w19, w0
   10ef0:	add	x0, x24, #0x20
   10ef4:	asr	w2, w28, #4
   10ef8:	sub	x1, x29, #0x20
   10efc:	bl	5350 <mpfr_sqrt@plt>
   10f00:	mov	w20, w0
   10f04:	b	11030 <mpc_sqrt@@Base+0x344>
   10f08:	mov	x9, #0x2                   	// #2
   10f0c:	movk	x9, #0x8000, lsl #48
   10f10:	cmp	x8, x9
   10f14:	b.ne	10d5c <mpc_sqrt@@Base+0x70>  // b.any
   10f18:	mov	x0, x24
   10f1c:	bl	4a40 <mpfr_set_nan@plt>
   10f20:	add	x0, x24, #0x20
   10f24:	bl	4a40 <mpfr_set_nan@plt>
   10f28:	mov	w0, wzr
   10f2c:	b	113fc <mpc_sqrt@@Base+0x710>
   10f30:	ldr	x28, [x24, #32]
   10f34:	ldr	x12, [x24]
   10f38:	cmp	w27, #0x1
   10f3c:	b.lt	11060 <mpc_sqrt@@Base+0x374>  // b.tstop
   10f40:	ldr	w8, [sp, #28]
   10f44:	mov	w9, #0x3                   	// #3
   10f48:	mov	w13, w14
   10f4c:	and	w8, w8, #0xf
   10f50:	cmp	w8, #0x1
   10f54:	csel	w9, w9, w8, eq  // eq = none
   10f58:	b	11098 <mpc_sqrt@@Base+0x3ac>
   10f5c:	mov	x0, x24
   10f60:	mov	x1, xzr
   10f64:	mov	x2, xzr
   10f68:	mov	w3, wzr
   10f6c:	bl	5040 <mpc_set_ui_ui@plt>
   10f70:	mov	w0, wzr
   10f74:	tbz	w20, #31, 113fc <mpc_sqrt@@Base+0x710>
   10f78:	mov	x0, x24
   10f7c:	mov	x1, x24
   10f80:	mov	w2, wzr
   10f84:	bl	4f60 <mpc_conj@plt>
   10f88:	mov	w0, wzr
   10f8c:	b	113fc <mpc_sqrt@@Base+0x710>
   10f90:	ldr	x1, [x26]
   10f94:	sub	x0, x29, #0x20
   10f98:	bl	5440 <mpfr_init2@plt>
   10f9c:	sub	x0, x29, #0x20
   10fa0:	mov	x1, x26
   10fa4:	mov	w2, wzr
   10fa8:	bl	4b80 <mpfr_neg@plt>
   10fac:	add	x19, x24, #0x20
   10fb0:	asr	w2, w28, #4
   10fb4:	tbnz	w20, #31, 114f8 <mpc_sqrt@@Base+0x80c>
   10fb8:	sub	x1, x29, #0x20
   10fbc:	mov	x0, x19
   10fc0:	bl	5350 <mpfr_sqrt@plt>
   10fc4:	mov	w20, w0
   10fc8:	b	11530 <mpc_sqrt@@Base+0x844>
   10fcc:	sub	x0, x29, #0x20
   10fd0:	sub	x1, x29, #0x20
   10fd4:	mov	w2, wzr
   10fd8:	bl	4b80 <mpfr_neg@plt>
   10fdc:	and	w2, w28, #0xf
   10fe0:	sub	x1, x29, #0x20
   10fe4:	mov	x0, x24
   10fe8:	bl	5350 <mpfr_sqrt@plt>
   10fec:	asr	w8, w28, #4
   10ff0:	mov	w9, #0x2                   	// #2
   10ff4:	cmp	w8, #0x3
   10ff8:	add	x21, x24, #0x20
   10ffc:	csel	w9, w9, w8, eq  // eq = none
   11000:	cmp	w8, #0x2
   11004:	mov	w8, #0x3                   	// #3
   11008:	mov	w19, w0
   1100c:	csel	w2, w8, w9, eq  // eq = none
   11010:	sub	x1, x29, #0x20
   11014:	mov	x0, x21
   11018:	bl	5350 <mpfr_sqrt@plt>
   1101c:	neg	w20, w0
   11020:	mov	x0, x21
   11024:	mov	x1, x21
   11028:	mov	w2, wzr
   1102c:	bl	4b80 <mpfr_neg@plt>
   11030:	cmp	w19, #0x0
   11034:	mov	w8, #0x2                   	// #2
   11038:	cset	w9, ne  // ne = any
   1103c:	csel	w8, w8, w9, lt  // lt = tstop
   11040:	cmp	w20, #0x0
   11044:	b	113e8 <mpc_sqrt@@Base+0x6fc>
   11048:	cbz	w0, 11560 <mpc_sqrt@@Base+0x874>
   1104c:	mov	w8, #0x1                   	// #1
   11050:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   11054:	str	w8, [x24, #8]
   11058:	str	x9, [x24, #16]
   1105c:	b	10dec <mpc_sqrt@@Base+0x100>
   11060:	ldr	w10, [sp, #28]
   11064:	cmp	w14, #0x3
   11068:	mov	w8, #0x2                   	// #2
   1106c:	mov	w9, #0x3                   	// #3
   11070:	and	w10, w10, #0xf
   11074:	csel	w11, w8, w14, eq  // eq = none
   11078:	cmp	w14, #0x2
   1107c:	csel	w13, w9, w11, eq  // eq = none
   11080:	cmp	w10, #0x3
   11084:	csel	w11, w8, w10, eq  // eq = none
   11088:	cmp	w10, #0x2
   1108c:	csel	w9, w9, w11, eq  // eq = none
   11090:	cmp	w9, #0x1
   11094:	csel	w9, w8, w9, eq  // eq = none
   11098:	cmp	w13, #0x0
   1109c:	mov	w8, #0xffffffff            	// #-1
   110a0:	cinc	x10, x28, eq  // eq = none
   110a4:	cmp	w20, #0x0
   110a8:	cneg	w8, w8, ge  // ge = tcont
   110ac:	cmp	w9, #0x0
   110b0:	mov	w27, wzr
   110b4:	stp	w9, w8, [sp, #40]
   110b8:	cinc	x8, x12, eq  // eq = none
   110bc:	str	w13, [sp, #60]
   110c0:	str	x10, [sp, #48]
   110c4:	str	x12, [sp, #64]
   110c8:	str	x8, [sp, #32]
   110cc:	b	110ec <mpc_sqrt@@Base+0x400>
   110d0:	ldr	x4, [sp, #32]
   110d4:	sub	x0, x29, #0x40
   110d8:	mov	w3, #0x1                   	// #1
   110dc:	mov	w2, w22
   110e0:	bl	5450 <mpfr_can_round@plt>
   110e4:	cbz	w24, 11288 <mpc_sqrt@@Base+0x59c>
   110e8:	cbnz	w0, 11288 <mpc_sqrt@@Base+0x59c>
   110ec:	cmp	w27, #0x1
   110f0:	b.hi	11104 <mpc_sqrt@@Base+0x418>  // b.pmore
   110f4:	mov	x0, x23
   110f8:	bl	4d20 <mpc_ceil_log2@plt>
   110fc:	add	x8, x0, #0x4
   11100:	b	11110 <mpc_sqrt@@Base+0x424>
   11104:	cmp	x23, #0x0
   11108:	cinc	x8, x23, lt  // lt = tstop
   1110c:	asr	x8, x8, #1
   11110:	add	x23, x8, x23
   11114:	sub	x0, x29, #0x20
   11118:	mov	x1, x23
   1111c:	bl	4c80 <mpfr_set_prec@plt>
   11120:	sub	x0, x29, #0x40
   11124:	mov	x1, x23
   11128:	bl	4c80 <mpfr_set_prec@plt>
   1112c:	sub	x0, x29, #0x20
   11130:	mov	w2, #0x3                   	// #3
   11134:	mov	x1, x26
   11138:	bl	51a0 <mpc_abs@plt>
   1113c:	mov	w19, w0
   11140:	sub	x0, x29, #0x20
   11144:	sub	x1, x29, #0x20
   11148:	mov	w3, #0x3                   	// #3
   1114c:	mov	x2, x26
   11150:	tbnz	w21, #31, 1115c <mpc_sqrt@@Base+0x470>
   11154:	bl	4e60 <mpfr_add@plt>
   11158:	b	11160 <mpc_sqrt@@Base+0x474>
   1115c:	bl	4a60 <mpfr_sub@plt>
   11160:	orr	w19, w0, w19
   11164:	sub	x0, x29, #0x20
   11168:	sub	x1, x29, #0x20
   1116c:	mov	w2, #0x1                   	// #1
   11170:	mov	w3, #0x3                   	// #3
   11174:	add	w27, w27, #0x1
   11178:	bl	5320 <mpfr_div_2ui@plt>
   1117c:	orr	w19, w19, w0
   11180:	sub	x0, x29, #0x20
   11184:	sub	x1, x29, #0x20
   11188:	mov	w2, #0x3                   	// #3
   1118c:	bl	5350 <mpfr_sqrt@plt>
   11190:	orr	w25, w19, w0
   11194:	sub	x0, x29, #0x20
   11198:	bl	5390 <mpfr_min_prec@plt>
   1119c:	mov	x19, x0
   111a0:	cmp	x0, x28
   111a4:	sub	x1, x23, #0x2
   111a8:	b.gt	111c4 <mpc_sqrt@@Base+0x4d8>
   111ac:	ldr	w8, [sp, #60]
   111b0:	cbz	w8, 111e0 <mpc_sqrt@@Base+0x4f4>
   111b4:	sub	x0, x29, #0x20
   111b8:	mov	w2, #0x3                   	// #3
   111bc:	mov	w3, #0x3                   	// #3
   111c0:	b	111ec <mpc_sqrt@@Base+0x500>
   111c4:	ldr	x4, [sp, #48]
   111c8:	sub	x0, x29, #0x20
   111cc:	mov	w2, #0x3                   	// #3
   111d0:	mov	w3, #0x2                   	// #2
   111d4:	bl	5450 <mpfr_can_round@plt>
   111d8:	cbnz	w25, 111f8 <mpc_sqrt@@Base+0x50c>
   111dc:	b	111fc <mpc_sqrt@@Base+0x510>
   111e0:	sub	x0, x29, #0x20
   111e4:	mov	w2, #0x3                   	// #3
   111e8:	mov	w3, wzr
   111ec:	mov	x4, x28
   111f0:	bl	5450 <mpfr_can_round@plt>
   111f4:	cbz	w25, 111fc <mpc_sqrt@@Base+0x510>
   111f8:	cbz	w0, 110ec <mpc_sqrt@@Base+0x400>
   111fc:	ldr	x1, [sp, #72]
   11200:	sub	x0, x29, #0x40
   11204:	sub	x2, x29, #0x20
   11208:	mov	w3, w22
   1120c:	bl	5150 <mpfr_div@plt>
   11210:	ldr	w8, [sp, #44]
   11214:	cmp	w0, #0x0
   11218:	ccmp	w25, #0x0, #0x4, eq  // eq = none
   1121c:	sub	x1, x29, #0x40
   11220:	csel	w20, w8, w0, ne  // ne = any
   11224:	sub	x0, x29, #0x40
   11228:	mov	w2, #0x1                   	// #1
   1122c:	mov	w3, w22
   11230:	bl	5320 <mpfr_div_2ui@plt>
   11234:	orr	w24, w20, w0
   11238:	sub	x0, x29, #0x40
   1123c:	bl	5390 <mpfr_min_prec@plt>
   11240:	ldr	x4, [sp, #64]
   11244:	mov	x20, x0
   11248:	sub	x1, x23, #0x3
   1124c:	cmp	x0, x4
   11250:	b.gt	110d0 <mpc_sqrt@@Base+0x3e4>
   11254:	ldr	w8, [sp, #40]
   11258:	cbz	w8, 11274 <mpc_sqrt@@Base+0x588>
   1125c:	sub	x0, x29, #0x40
   11260:	mov	w2, w22
   11264:	mov	w3, w22
   11268:	bl	5450 <mpfr_can_round@plt>
   1126c:	cbnz	w24, 110e8 <mpc_sqrt@@Base+0x3fc>
   11270:	b	11288 <mpc_sqrt@@Base+0x59c>
   11274:	sub	x0, x29, #0x40
   11278:	mov	w2, w22
   1127c:	mov	w3, wzr
   11280:	bl	5450 <mpfr_can_round@plt>
   11284:	cbnz	w24, 110e8 <mpc_sqrt@@Base+0x3fc>
   11288:	cmp	w21, #0x1
   1128c:	b.lt	112cc <mpc_sqrt@@Base+0x5e0>  // b.tstop
   11290:	ldr	w8, [sp, #28]
   11294:	ldr	x26, [sp, #8]
   11298:	ldur	w3, [x29, #-24]
   1129c:	sub	x1, x29, #0x20
   112a0:	and	w2, w8, #0xf
   112a4:	mov	x0, x26
   112a8:	bl	51d0 <mpfr_set4@plt>
   112ac:	ldur	w3, [x29, #-56]
   112b0:	mov	w27, w0
   112b4:	ldr	x0, [sp, #16]
   112b8:	ldr	w2, [sp]
   112bc:	sub	x1, x29, #0x40
   112c0:	bl	51d0 <mpfr_set4@plt>
   112c4:	ldr	w10, [sp, #4]
   112c8:	b	1133c <mpc_sqrt@@Base+0x650>
   112cc:	ldr	w9, [sp, #4]
   112d0:	ldr	w8, [sp, #28]
   112d4:	ldr	x26, [sp, #8]
   112d8:	cmp	w9, #0x1
   112dc:	and	w2, w8, #0xf
   112e0:	b.lt	11314 <mpc_sqrt@@Base+0x628>  // b.tstop
   112e4:	ldur	w3, [x29, #-56]
   112e8:	sub	x1, x29, #0x40
   112ec:	mov	x0, x26
   112f0:	mov	w23, w9
   112f4:	bl	51d0 <mpfr_set4@plt>
   112f8:	ldur	w3, [x29, #-24]
   112fc:	mov	w27, w0
   11300:	ldr	x0, [sp, #16]
   11304:	ldr	w2, [sp]
   11308:	sub	x1, x29, #0x20
   1130c:	bl	51d0 <mpfr_set4@plt>
   11310:	b	11338 <mpc_sqrt@@Base+0x64c>
   11314:	sub	x1, x29, #0x40
   11318:	mov	x0, x26
   1131c:	mov	w23, w9
   11320:	bl	4b80 <mpfr_neg@plt>
   11324:	mov	w27, w0
   11328:	ldr	x0, [sp, #16]
   1132c:	ldr	w2, [sp]
   11330:	sub	x1, x29, #0x20
   11334:	bl	4b80 <mpfr_neg@plt>
   11338:	mov	w10, w23
   1133c:	mov	w23, w0
   11340:	ldr	x8, [sp, #64]
   11344:	ldr	w9, [sp, #60]
   11348:	cmp	x19, x28
   1134c:	b.gt	11390 <mpc_sqrt@@Base+0x6a4>
   11350:	ldr	w19, [sp, #40]
   11354:	cbz	w25, 11394 <mpc_sqrt@@Base+0x6a8>
   11358:	cbz	w9, 1141c <mpc_sqrt@@Base+0x730>
   1135c:	cmp	w21, #0x1
   11360:	b.lt	11464 <mpc_sqrt@@Base+0x778>  // b.tstop
   11364:	cmp	w9, #0x2
   11368:	b.ne	114cc <mpc_sqrt@@Base+0x7e0>  // b.any
   1136c:	ldr	x8, [x26, #16]
   11370:	mov	x9, #0x2                   	// #2
   11374:	movk	x9, #0x8000, lsl #48
   11378:	mov	w27, w10
   1137c:	cmp	x8, x9
   11380:	b.gt	1156c <mpc_sqrt@@Base+0x880>
   11384:	b.ne	11584 <mpc_sqrt@@Base+0x898>  // b.any
   11388:	bl	4b00 <mpfr_set_erangeflag@plt>
   1138c:	b	11584 <mpc_sqrt@@Base+0x898>
   11390:	ldr	w19, [sp, #40]
   11394:	mov	w25, w27
   11398:	cmp	x20, x8
   1139c:	b.gt	113c0 <mpc_sqrt@@Base+0x6d4>
   113a0:	cbz	w24, 113c0 <mpc_sqrt@@Base+0x6d4>
   113a4:	cbz	w19, 11434 <mpc_sqrt@@Base+0x748>
   113a8:	cmp	w21, #0x1
   113ac:	b.lt	11498 <mpc_sqrt@@Base+0x7ac>  // b.tstop
   113b0:	cmp	w19, w22
   113b4:	b.ne	114d4 <mpc_sqrt@@Base+0x7e8>  // b.any
   113b8:	mov	w19, w24
   113bc:	b	113c4 <mpc_sqrt@@Base+0x6d8>
   113c0:	mov	w19, w23
   113c4:	sub	x0, x29, #0x20
   113c8:	bl	4d60 <mpfr_clear@plt>
   113cc:	sub	x0, x29, #0x40
   113d0:	bl	4d60 <mpfr_clear@plt>
   113d4:	cmp	w25, #0x0
   113d8:	mov	w8, #0x2                   	// #2
   113dc:	cset	w9, ne  // ne = any
   113e0:	csel	w8, w8, w9, lt  // lt = tstop
   113e4:	cmp	w19, #0x0
   113e8:	cset	w9, ne  // ne = any
   113ec:	lsl	w9, w9, #2
   113f0:	mov	w10, #0x8                   	// #8
   113f4:	csel	w9, w10, w9, lt  // lt = tstop
   113f8:	orr	w0, w8, w9
   113fc:	ldp	x20, x19, [sp, #224]
   11400:	ldp	x22, x21, [sp, #208]
   11404:	ldp	x24, x23, [sp, #192]
   11408:	ldp	x26, x25, [sp, #176]
   1140c:	ldp	x28, x27, [sp, #160]
   11410:	ldp	x29, x30, [sp, #144]
   11414:	add	sp, sp, #0xf0
   11418:	ret
   1141c:	cmp	w21, #0x0
   11420:	b.gt	11398 <mpc_sqrt@@Base+0x6ac>
   11424:	cmp	w10, #0x0
   11428:	cneg	w23, w25, le
   1142c:	mov	w25, w27
   11430:	b	11398 <mpc_sqrt@@Base+0x6ac>
   11434:	cmp	w21, #0x0
   11438:	mov	w19, w24
   1143c:	b.gt	113c4 <mpc_sqrt@@Base+0x6d8>
   11440:	cmp	w10, #0x0
   11444:	cneg	w25, w24, le
   11448:	mov	w19, w23
   1144c:	b	113c4 <mpc_sqrt@@Base+0x6d8>
   11450:	mov	x0, x24
   11454:	mov	x1, x26
   11458:	mov	w2, w28
   1145c:	bl	5580 <mpc_set@plt>
   11460:	b	113fc <mpc_sqrt@@Base+0x710>
   11464:	cmp	w10, #0x1
   11468:	b.lt	115c0 <mpc_sqrt@@Base+0x8d4>  // b.tstop
   1146c:	cmp	w9, #0x2
   11470:	b.ne	11600 <mpc_sqrt@@Base+0x914>  // b.any
   11474:	ldr	x8, [x26, #48]
   11478:	mov	x9, #0x2                   	// #2
   1147c:	movk	x9, #0x8000, lsl #48
   11480:	mov	w28, w10
   11484:	cmp	x8, x9
   11488:	b.gt	11638 <mpc_sqrt@@Base+0x94c>
   1148c:	b.ne	11654 <mpc_sqrt@@Base+0x968>  // b.any
   11490:	bl	4b00 <mpfr_set_erangeflag@plt>
   11494:	b	11654 <mpc_sqrt@@Base+0x968>
   11498:	cmp	w10, #0x1
   1149c:	b.lt	115ec <mpc_sqrt@@Base+0x900>  // b.tstop
   114a0:	cmp	w19, w22
   114a4:	b.eq	116e4 <mpc_sqrt@@Base+0x9f8>  // b.none
   114a8:	ldr	x8, [x26, #16]
   114ac:	mov	x9, #0x2                   	// #2
   114b0:	movk	x9, #0x8000, lsl #48
   114b4:	neg	w25, w24
   114b8:	cmp	x8, x9
   114bc:	b.gt	11664 <mpc_sqrt@@Base+0x978>
   114c0:	b.ne	11680 <mpc_sqrt@@Base+0x994>  // b.any
   114c4:	bl	4b00 <mpfr_set_erangeflag@plt>
   114c8:	b	11680 <mpc_sqrt@@Base+0x994>
   114cc:	mov	w25, #0xffffffff            	// #-1
   114d0:	b	11398 <mpc_sqrt@@Base+0x6ac>
   114d4:	ldr	x8, [x26, #48]
   114d8:	mov	x9, #0x2                   	// #2
   114dc:	movk	x9, #0x8000, lsl #48
   114e0:	neg	w19, w24
   114e4:	cmp	x8, x9
   114e8:	b.gt	1159c <mpc_sqrt@@Base+0x8b0>
   114ec:	b.ne	115b4 <mpc_sqrt@@Base+0x8c8>  // b.any
   114f0:	bl	4b00 <mpfr_set_erangeflag@plt>
   114f4:	b	115b4 <mpc_sqrt@@Base+0x8c8>
   114f8:	cmp	w2, #0x3
   114fc:	mov	w8, #0x2                   	// #2
   11500:	csel	w8, w8, w2, eq  // eq = none
   11504:	cmp	w2, #0x2
   11508:	mov	w9, #0x3                   	// #3
   1150c:	csel	w2, w9, w8, eq  // eq = none
   11510:	sub	x1, x29, #0x20
   11514:	mov	x0, x19
   11518:	bl	5350 <mpfr_sqrt@plt>
   1151c:	neg	w20, w0
   11520:	mov	x0, x19
   11524:	mov	x1, x19
   11528:	mov	w2, wzr
   1152c:	bl	4b80 <mpfr_neg@plt>
   11530:	mov	w8, #0x1                   	// #1
   11534:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   11538:	sub	x0, x29, #0x20
   1153c:	str	w8, [x24, #8]
   11540:	str	x9, [x24, #16]
   11544:	bl	4d60 <mpfr_clear@plt>
   11548:	cmp	w20, #0x0
   1154c:	cset	w8, ne  // ne = any
   11550:	lsl	w8, w8, #2
   11554:	mov	w9, #0x8                   	// #8
   11558:	csel	w0, w9, w8, lt  // lt = tstop
   1155c:	b	113fc <mpc_sqrt@@Base+0x710>
   11560:	mov	x0, x24
   11564:	bl	4a40 <mpfr_set_nan@plt>
   11568:	b	10dec <mpc_sqrt@@Base+0x100>
   1156c:	ldr	w8, [x26, #8]
   11570:	cmp	w8, #0x1
   11574:	b.lt	11584 <mpc_sqrt@@Base+0x898>  // b.tstop
   11578:	mov	x0, x26
   1157c:	bl	4e00 <mpfr_nextabove@plt>
   11580:	b	1158c <mpc_sqrt@@Base+0x8a0>
   11584:	mov	x0, x26
   11588:	bl	4bb0 <mpfr_nextbelow@plt>
   1158c:	ldr	x8, [sp, #64]
   11590:	mov	w25, #0x1                   	// #1
   11594:	mov	w10, w27
   11598:	b	11398 <mpc_sqrt@@Base+0x6ac>
   1159c:	ldr	w8, [x26, #40]
   115a0:	cmp	w8, #0x1
   115a4:	b.lt	115b4 <mpc_sqrt@@Base+0x8c8>  // b.tstop
   115a8:	ldr	x0, [sp, #16]
   115ac:	bl	4bb0 <mpfr_nextbelow@plt>
   115b0:	b	113c4 <mpc_sqrt@@Base+0x6d8>
   115b4:	ldr	x0, [sp, #16]
   115b8:	bl	4e00 <mpfr_nextabove@plt>
   115bc:	b	113c4 <mpc_sqrt@@Base+0x6d8>
   115c0:	cmp	w9, #0x2
   115c4:	b.ne	1160c <mpc_sqrt@@Base+0x920>  // b.any
   115c8:	ldr	x8, [x26, #48]
   115cc:	mov	x9, #0x2                   	// #2
   115d0:	movk	x9, #0x8000, lsl #48
   115d4:	mov	w28, w10
   115d8:	cmp	x8, x9
   115dc:	b.gt	11690 <mpc_sqrt@@Base+0x9a4>
   115e0:	b.ne	116a8 <mpc_sqrt@@Base+0x9bc>  // b.any
   115e4:	bl	4b00 <mpfr_set_erangeflag@plt>
   115e8:	b	116a8 <mpc_sqrt@@Base+0x9bc>
   115ec:	cmp	w19, w22
   115f0:	b.ne	11618 <mpc_sqrt@@Base+0x92c>  // b.any
   115f4:	neg	w25, w24
   115f8:	mov	w19, w23
   115fc:	b	113c4 <mpc_sqrt@@Base+0x6d8>
   11600:	mov	w23, #0xffffffff            	// #-1
   11604:	mov	w25, w27
   11608:	b	11398 <mpc_sqrt@@Base+0x6ac>
   1160c:	mov	w23, #0x1                   	// #1
   11610:	mov	w25, w27
   11614:	b	11398 <mpc_sqrt@@Base+0x6ac>
   11618:	ldr	x8, [x26, #16]
   1161c:	mov	x9, #0x2                   	// #2
   11620:	movk	x9, #0x8000, lsl #48
   11624:	cmp	x8, x9
   11628:	b.gt	116c4 <mpc_sqrt@@Base+0x9d8>
   1162c:	b.ne	116dc <mpc_sqrt@@Base+0x9f0>  // b.any
   11630:	bl	4b00 <mpfr_set_erangeflag@plt>
   11634:	b	116dc <mpc_sqrt@@Base+0x9f0>
   11638:	ldr	w8, [x26, #40]
   1163c:	cmp	w8, #0x1
   11640:	b.lt	11654 <mpc_sqrt@@Base+0x968>  // b.tstop
   11644:	ldr	x0, [sp, #16]
   11648:	bl	4e00 <mpfr_nextabove@plt>
   1164c:	mov	w23, #0x1                   	// #1
   11650:	b	116b4 <mpc_sqrt@@Base+0x9c8>
   11654:	ldr	x0, [sp, #16]
   11658:	bl	4bb0 <mpfr_nextbelow@plt>
   1165c:	mov	w23, #0x1                   	// #1
   11660:	b	116b4 <mpc_sqrt@@Base+0x9c8>
   11664:	ldr	w8, [x26, #8]
   11668:	cmp	w8, #0x1
   1166c:	b.lt	11680 <mpc_sqrt@@Base+0x994>  // b.tstop
   11670:	mov	x0, x26
   11674:	bl	4bb0 <mpfr_nextbelow@plt>
   11678:	mov	w19, w23
   1167c:	b	113c4 <mpc_sqrt@@Base+0x6d8>
   11680:	mov	x0, x26
   11684:	bl	4e00 <mpfr_nextabove@plt>
   11688:	mov	w19, w23
   1168c:	b	113c4 <mpc_sqrt@@Base+0x6d8>
   11690:	ldr	w8, [x26, #40]
   11694:	cmp	w8, #0x1
   11698:	b.lt	116a8 <mpc_sqrt@@Base+0x9bc>  // b.tstop
   1169c:	ldr	x0, [sp, #16]
   116a0:	bl	4e00 <mpfr_nextabove@plt>
   116a4:	b	116b0 <mpc_sqrt@@Base+0x9c4>
   116a8:	ldr	x0, [sp, #16]
   116ac:	bl	4bb0 <mpfr_nextbelow@plt>
   116b0:	mov	w23, #0xffffffff            	// #-1
   116b4:	ldr	x8, [sp, #64]
   116b8:	mov	w25, w27
   116bc:	mov	w10, w28
   116c0:	b	11398 <mpc_sqrt@@Base+0x6ac>
   116c4:	ldr	w8, [x26, #8]
   116c8:	cmp	w8, #0x1
   116cc:	b.lt	116dc <mpc_sqrt@@Base+0x9f0>  // b.tstop
   116d0:	mov	x0, x26
   116d4:	bl	4bb0 <mpfr_nextbelow@plt>
   116d8:	b	116e4 <mpc_sqrt@@Base+0x9f8>
   116dc:	mov	x0, x26
   116e0:	bl	4e00 <mpfr_nextabove@plt>
   116e4:	mov	w19, w23
   116e8:	mov	w25, w24
   116ec:	b	113c4 <mpc_sqrt@@Base+0x6d8>

00000000000116f0 <mpc_strtoc@@Base>:
   116f0:	stp	x29, x30, [sp, #-96]!
   116f4:	stp	x22, x21, [sp, #64]
   116f8:	stp	x20, x19, [sp, #80]
   116fc:	mov	x19, x2
   11700:	mov	x21, x1
   11704:	cmp	w3, #0x1
   11708:	mov	x20, x0
   1170c:	str	x27, [sp, #16]
   11710:	stp	x26, x25, [sp, #32]
   11714:	stp	x24, x23, [sp, #48]
   11718:	mov	x29, sp
   1171c:	b.eq	11804 <mpc_strtoc@@Base+0x114>  // b.none
   11720:	cbz	x21, 11804 <mpc_strtoc@@Base+0x114>
   11724:	mov	w23, w3
   11728:	cmp	w3, #0x24
   1172c:	b.gt	11804 <mpc_strtoc@@Base+0x114>
   11730:	mov	w24, w4
   11734:	bl	5170 <__ctype_b_loc@plt>
   11738:	ldr	x8, [x0]
   1173c:	ldrb	w27, [x21]
   11740:	mov	x25, x0
   11744:	mov	x9, x21
   11748:	ldrh	w10, [x8, x27, lsl #1]
   1174c:	tbz	w10, #13, 11760 <mpc_strtoc@@Base+0x70>
   11750:	mov	x9, x21
   11754:	ldrb	w27, [x9, #1]!
   11758:	ldrh	w10, [x8, x27, lsl #1]
   1175c:	tbnz	w10, #13, 11754 <mpc_strtoc@@Base+0x64>
   11760:	cmp	w27, #0x28
   11764:	cinc	x22, x9, eq  // eq = none
   11768:	and	w4, w24, #0xf
   1176c:	add	x2, x29, #0x18
   11770:	mov	x0, x20
   11774:	mov	x1, x22
   11778:	mov	w3, w23
   1177c:	bl	4ac0 <mpfr_strtofr@plt>
   11780:	ldr	x26, [x29, #24]
   11784:	cmp	x26, x22
   11788:	b.eq	11804 <mpc_strtoc@@Base+0x114>  // b.none
   1178c:	mov	w22, w0
   11790:	cmp	w27, #0x28
   11794:	b.ne	1183c <mpc_strtoc@@Base+0x14c>  // b.any
   11798:	ldr	x8, [x25]
   1179c:	ldrb	w9, [x26]
   117a0:	ldrh	w9, [x8, x9, lsl #1]
   117a4:	tbz	w9, #13, 11804 <mpc_strtoc@@Base+0x114>
   117a8:	ldrb	w9, [x26, #1]!
   117ac:	ldrh	w9, [x8, x9, lsl #1]
   117b0:	tbnz	w9, #13, 117a8 <mpc_strtoc@@Base+0xb8>
   117b4:	add	x0, x20, #0x20
   117b8:	asr	w4, w24, #4
   117bc:	add	x2, x29, #0x18
   117c0:	mov	x1, x26
   117c4:	mov	w3, w23
   117c8:	bl	4ac0 <mpfr_strtofr@plt>
   117cc:	ldr	x8, [x29, #24]
   117d0:	cmp	x8, x26
   117d4:	b.eq	11804 <mpc_strtoc@@Base+0x114>  // b.none
   117d8:	ldr	x10, [x25]
   117dc:	ldrb	w9, [x8]
   117e0:	ldrh	w11, [x10, x9, lsl #1]
   117e4:	tbz	w11, #13, 117f4 <mpc_strtoc@@Base+0x104>
   117e8:	ldrb	w9, [x8, #1]!
   117ec:	ldrh	w11, [x10, x9, lsl #1]
   117f0:	tbnz	w11, #13, 117e8 <mpc_strtoc@@Base+0xf8>
   117f4:	cmp	w9, #0x29
   117f8:	b.ne	11804 <mpc_strtoc@@Base+0x114>  // b.any
   117fc:	add	x26, x8, #0x1
   11800:	b	11850 <mpc_strtoc@@Base+0x160>
   11804:	cbz	x19, 1180c <mpc_strtoc@@Base+0x11c>
   11808:	str	x21, [x19]
   1180c:	mov	x0, x20
   11810:	bl	4a40 <mpfr_set_nan@plt>
   11814:	add	x0, x20, #0x20
   11818:	bl	4a40 <mpfr_set_nan@plt>
   1181c:	mov	w0, #0xffffffff            	// #-1
   11820:	ldp	x20, x19, [sp, #80]
   11824:	ldp	x22, x21, [sp, #64]
   11828:	ldp	x24, x23, [sp, #48]
   1182c:	ldp	x26, x25, [sp, #32]
   11830:	ldr	x27, [sp, #16]
   11834:	ldp	x29, x30, [sp], #96
   11838:	ret
   1183c:	mov	w8, #0x1                   	// #1
   11840:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   11844:	mov	w0, wzr
   11848:	str	w8, [x20, #40]
   1184c:	str	x9, [x20, #48]
   11850:	cbz	x19, 11858 <mpc_strtoc@@Base+0x168>
   11854:	str	x26, [x19]
   11858:	cmp	w22, #0x0
   1185c:	mov	w8, #0x2                   	// #2
   11860:	cset	w9, ne  // ne = any
   11864:	csel	w8, w8, w9, lt  // lt = tstop
   11868:	cmp	w0, #0x0
   1186c:	cset	w9, ne  // ne = any
   11870:	lsl	w9, w9, #2
   11874:	mov	w10, #0x8                   	// #8
   11878:	csel	w9, w10, w9, lt  // lt = tstop
   1187c:	orr	w0, w9, w8
   11880:	b	11820 <mpc_strtoc@@Base+0x130>

0000000000011884 <mpc_sub@@Base>:
   11884:	stp	x29, x30, [sp, #-64]!
   11888:	stp	x20, x19, [sp, #48]
   1188c:	mov	w19, w3
   11890:	and	w3, w3, #0xf
   11894:	str	x23, [sp, #16]
   11898:	stp	x22, x21, [sp, #32]
   1189c:	mov	x29, sp
   118a0:	mov	x20, x2
   118a4:	mov	x21, x1
   118a8:	mov	x22, x0
   118ac:	bl	4a60 <mpfr_sub@plt>
   118b0:	mov	w23, w0
   118b4:	add	x0, x22, #0x20
   118b8:	add	x1, x21, #0x20
   118bc:	add	x2, x20, #0x20
   118c0:	asr	w3, w19, #4
   118c4:	bl	4a60 <mpfr_sub@plt>
   118c8:	cmp	w23, #0x0
   118cc:	mov	w8, #0x2                   	// #2
   118d0:	cset	w9, ne  // ne = any
   118d4:	csel	w8, w8, w9, lt  // lt = tstop
   118d8:	cmp	w0, #0x0
   118dc:	cset	w9, ne  // ne = any
   118e0:	ldp	x20, x19, [sp, #48]
   118e4:	ldp	x22, x21, [sp, #32]
   118e8:	ldr	x23, [sp, #16]
   118ec:	lsl	w9, w9, #2
   118f0:	mov	w10, #0x8                   	// #8
   118f4:	csel	w9, w10, w9, lt  // lt = tstop
   118f8:	orr	w0, w9, w8
   118fc:	ldp	x29, x30, [sp], #64
   11900:	ret

0000000000011904 <mpc_sub_fr@@Base>:
   11904:	stp	x29, x30, [sp, #-48]!
   11908:	stp	x20, x19, [sp, #32]
   1190c:	mov	w19, w3
   11910:	and	w3, w3, #0xf
   11914:	stp	x22, x21, [sp, #16]
   11918:	mov	x29, sp
   1191c:	mov	x20, x1
   11920:	mov	x21, x0
   11924:	bl	4a60 <mpfr_sub@plt>
   11928:	ldr	w3, [x20, #40]
   1192c:	mov	w22, w0
   11930:	add	x0, x21, #0x20
   11934:	add	x1, x20, #0x20
   11938:	asr	w2, w19, #4
   1193c:	bl	51d0 <mpfr_set4@plt>
   11940:	cmp	w22, #0x0
   11944:	mov	w8, #0x2                   	// #2
   11948:	cset	w9, ne  // ne = any
   1194c:	csel	w8, w8, w9, lt  // lt = tstop
   11950:	cmp	w0, #0x0
   11954:	cset	w9, ne  // ne = any
   11958:	ldp	x20, x19, [sp, #32]
   1195c:	ldp	x22, x21, [sp, #16]
   11960:	lsl	w9, w9, #2
   11964:	mov	w10, #0x8                   	// #8
   11968:	csel	w9, w10, w9, lt  // lt = tstop
   1196c:	orr	w0, w9, w8
   11970:	ldp	x29, x30, [sp], #48
   11974:	ret

0000000000011978 <mpc_sub_ui@@Base>:
   11978:	stp	x29, x30, [sp, #-48]!
   1197c:	stp	x20, x19, [sp, #32]
   11980:	mov	w19, w3
   11984:	and	w3, w3, #0xf
   11988:	stp	x22, x21, [sp, #16]
   1198c:	mov	x29, sp
   11990:	mov	x20, x1
   11994:	mov	x21, x0
   11998:	bl	50f0 <mpfr_sub_ui@plt>
   1199c:	ldr	w3, [x20, #40]
   119a0:	mov	w22, w0
   119a4:	add	x0, x21, #0x20
   119a8:	add	x1, x20, #0x20
   119ac:	asr	w2, w19, #4
   119b0:	bl	51d0 <mpfr_set4@plt>
   119b4:	cmp	w22, #0x0
   119b8:	mov	w8, #0x2                   	// #2
   119bc:	cset	w9, ne  // ne = any
   119c0:	csel	w8, w8, w9, lt  // lt = tstop
   119c4:	cmp	w0, #0x0
   119c8:	cset	w9, ne  // ne = any
   119cc:	ldp	x20, x19, [sp, #32]
   119d0:	ldp	x22, x21, [sp, #16]
   119d4:	lsl	w9, w9, #2
   119d8:	mov	w10, #0x8                   	// #8
   119dc:	csel	w9, w10, w9, lt  // lt = tstop
   119e0:	orr	w0, w9, w8
   119e4:	ldp	x29, x30, [sp], #48
   119e8:	ret

00000000000119ec <mpc_swap@@Base>:
   119ec:	stp	x29, x30, [sp, #-32]!
   119f0:	stp	x20, x19, [sp, #16]
   119f4:	mov	x29, sp
   119f8:	mov	x19, x1
   119fc:	mov	x20, x0
   11a00:	bl	5090 <mpfr_swap@plt>
   11a04:	add	x0, x20, #0x20
   11a08:	add	x1, x19, #0x20
   11a0c:	ldp	x20, x19, [sp, #16]
   11a10:	ldp	x29, x30, [sp], #32
   11a14:	b	5090 <mpfr_swap@plt>

0000000000011a18 <mpc_tan@@Base>:
   11a18:	sub	sp, sp, #0x110
   11a1c:	stp	x20, x19, [sp, #256]
   11a20:	mov	x19, x0
   11a24:	mov	x0, x1
   11a28:	stp	x29, x30, [sp, #176]
   11a2c:	stp	x28, x27, [sp, #192]
   11a30:	stp	x26, x25, [sp, #208]
   11a34:	stp	x24, x23, [sp, #224]
   11a38:	stp	x22, x21, [sp, #240]
   11a3c:	add	x29, sp, #0xb0
   11a40:	mov	w20, w2
   11a44:	mov	x21, x1
   11a48:	bl	54d0 <mpfr_number_p@plt>
   11a4c:	cbz	w0, 11aac <mpc_tan@@Base+0x94>
   11a50:	add	x22, x21, #0x20
   11a54:	mov	x0, x22
   11a58:	bl	54d0 <mpfr_number_p@plt>
   11a5c:	cbz	w0, 11aac <mpc_tan@@Base+0x94>
   11a60:	ldr	x9, [x21, #16]
   11a64:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   11a68:	cmp	x9, x8
   11a6c:	b.ne	11b24 <mpc_tan@@Base+0x10c>  // b.any
   11a70:	ldr	w3, [x21, #8]
   11a74:	and	w2, w20, #0xf
   11a78:	mov	x0, x19
   11a7c:	mov	x1, x21
   11a80:	bl	51d0 <mpfr_set4@plt>
   11a84:	add	x0, x19, #0x20
   11a88:	asr	w2, w20, #4
   11a8c:	mov	x1, x22
   11a90:	bl	4a30 <mpfr_tanh@plt>
   11a94:	cmp	w0, #0x0
   11a98:	cset	w8, ne  // ne = any
   11a9c:	lsl	w8, w8, #2
   11aa0:	mov	w9, #0x8                   	// #8
   11aa4:	csel	w19, w9, w8, lt  // lt = tstop
   11aa8:	b	1217c <mpc_tan@@Base+0x764>
   11aac:	ldr	x9, [x21, #16]
   11ab0:	ldr	x8, [x21, #48]
   11ab4:	mov	x10, #0x2                   	// #2
   11ab8:	movk	x10, #0x8000, lsl #48
   11abc:	cmp	x9, x10
   11ac0:	b.ne	11af8 <mpc_tan@@Base+0xe0>  // b.any
   11ac4:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   11ac8:	cmp	x8, x9
   11acc:	b.ne	11bcc <mpc_tan@@Base+0x1b4>  // b.any
   11ad0:	ldr	w8, [x21, #40]
   11ad4:	mov	x0, x19
   11ad8:	mov	x1, xzr
   11adc:	mov	w3, w20
   11ae0:	cmp	w8, #0x0
   11ae4:	mov	w8, #0x1                   	// #1
   11ae8:	cneg	x2, x8, lt  // lt = tstop
   11aec:	bl	52c0 <mpc_set_si_si@plt>
   11af0:	mov	w19, w0
   11af4:	b	1217c <mpc_tan@@Base+0x764>
   11af8:	cmp	x8, x10
   11afc:	b.ne	11b6c <mpc_tan@@Base+0x154>  // b.any
   11b00:	mov	x0, x21
   11b04:	bl	51f0 <mpfr_sgn@plt>
   11b08:	cbnz	w0, 11bcc <mpc_tan@@Base+0x1b4>
   11b0c:	mov	x0, x19
   11b10:	mov	x1, x21
   11b14:	mov	w2, w20
   11b18:	bl	5580 <mpc_set@plt>
   11b1c:	mov	w19, wzr
   11b20:	b	1217c <mpc_tan@@Base+0x764>
   11b24:	ldr	x9, [x21, #48]
   11b28:	cmp	x9, x8
   11b2c:	b.ne	11be4 <mpc_tan@@Base+0x1cc>  // b.any
   11b30:	and	w2, w20, #0xf
   11b34:	mov	x0, x19
   11b38:	mov	x1, x21
   11b3c:	bl	4ab0 <mpfr_tan@plt>
   11b40:	ldr	w3, [x21, #40]
   11b44:	mov	w23, w0
   11b48:	add	x0, x19, #0x20
   11b4c:	asr	w2, w20, #4
   11b50:	mov	x1, x22
   11b54:	bl	51d0 <mpfr_set4@plt>
   11b58:	cmp	w23, #0x0
   11b5c:	cset	w8, ne  // ne = any
   11b60:	mov	w9, #0x2                   	// #2
   11b64:	csel	w19, w9, w8, lt  // lt = tstop
   11b68:	b	1217c <mpc_tan@@Base+0x764>
   11b6c:	mov	x10, #0x8000000000000003    	// #-9223372036854775805
   11b70:	cmp	x9, x10
   11b74:	b.ne	11fc0 <mpc_tan@@Base+0x5a8>  // b.any
   11b78:	cmp	x8, x10
   11b7c:	b.ne	11bcc <mpc_tan@@Base+0x1b4>  // b.any
   11b80:	ldr	w8, [x21, #8]
   11b84:	mov	w22, #0x1                   	// #1
   11b88:	mov	x9, #0x8000000000000001    	// #-9223372036854775807
   11b8c:	mov	x0, x19
   11b90:	cmp	w8, #0x0
   11b94:	cneg	w3, w22, lt  // lt = tstop
   11b98:	mov	x1, x19
   11b9c:	mov	w2, wzr
   11ba0:	str	w22, [x19, #8]
   11ba4:	str	x9, [x19, #16]
   11ba8:	bl	51d0 <mpfr_set4@plt>
   11bac:	ldr	w8, [x21, #40]
   11bb0:	add	x0, x19, #0x20
   11bb4:	asr	w3, w20, #4
   11bb8:	mov	x2, xzr
   11bbc:	cmp	w8, #0x0
   11bc0:	cneg	x1, x22, lt  // lt = tstop
   11bc4:	bl	49e0 <mpfr_set_si_2exp@plt>
   11bc8:	b	11a94 <mpc_tan@@Base+0x7c>
   11bcc:	mov	x0, x19
   11bd0:	bl	4a40 <mpfr_set_nan@plt>
   11bd4:	add	x0, x19, #0x20
   11bd8:	bl	4a40 <mpfr_set_nan@plt>
   11bdc:	mov	w19, wzr
   11be0:	b	1217c <mpc_tan@@Base+0x764>
   11be4:	mov	x25, x19
   11be8:	ldr	x8, [x19]
   11bec:	ldr	x9, [x25, #32]!
   11bf0:	mov	x27, #0x2                   	// #2
   11bf4:	sub	x0, x29, #0x48
   11bf8:	mov	w1, #0x2                   	// #2
   11bfc:	cmp	x8, x9
   11c00:	movk	x27, #0x8000, lsl #48
   11c04:	csel	x22, x8, x9, gt
   11c08:	sub	x23, x29, #0x48
   11c0c:	bl	4cf0 <mpc_init2@plt>
   11c10:	add	x0, sp, #0x28
   11c14:	mov	w1, #0x2                   	// #2
   11c18:	add	x24, sp, #0x28
   11c1c:	bl	4cf0 <mpc_init2@plt>
   11c20:	and	w8, w20, #0xf
   11c24:	tst	w20, #0xf
   11c28:	str	w8, [sp, #20]
   11c2c:	cset	w8, eq  // eq = none
   11c30:	cmp	w20, #0x10
   11c34:	add	x28, x23, #0x20
   11c38:	add	x23, x24, #0x20
   11c3c:	str	x8, [sp, #8]
   11c40:	cset	w8, cc  // cc = lo, ul, last
   11c44:	mov	w24, #0x7                   	// #7
   11c48:	str	x8, [sp]
   11c4c:	mov	x0, x22
   11c50:	bl	4d20 <mpc_ceil_log2@plt>
   11c54:	add	x8, x22, x24
   11c58:	add	x22, x8, x0
   11c5c:	sub	x0, x29, #0x48
   11c60:	mov	x1, x22
   11c64:	bl	4c00 <mpc_set_prec@plt>
   11c68:	add	x0, sp, #0x28
   11c6c:	mov	x1, x22
   11c70:	bl	4c00 <mpc_set_prec@plt>
   11c74:	sub	x0, x29, #0x48
   11c78:	add	x1, sp, #0x28
   11c7c:	mov	w3, #0x11                  	// #17
   11c80:	mov	w4, #0x11                  	// #17
   11c84:	mov	x2, x21
   11c88:	bl	5140 <mpc_sin_cos@plt>
   11c8c:	ldur	x8, [x29, #-56]
   11c90:	cmp	x8, x27
   11c94:	b.gt	11ca8 <mpc_tan@@Base+0x290>
   11c98:	mov	x24, #0x8000000000000001    	// #-9223372036854775807
   11c9c:	b.ne	11cc4 <mpc_tan@@Base+0x2ac>  // b.any
   11ca0:	bl	4b00 <mpfr_set_erangeflag@plt>
   11ca4:	b	11cc4 <mpc_tan@@Base+0x2ac>
   11ca8:	ldur	w8, [x29, #-64]
   11cac:	mov	x24, #0x8000000000000001    	// #-9223372036854775807
   11cb0:	cmp	w8, #0x1
   11cb4:	b.lt	11cc4 <mpc_tan@@Base+0x2ac>  // b.tstop
   11cb8:	sub	x0, x29, #0x48
   11cbc:	bl	4e00 <mpfr_nextabove@plt>
   11cc0:	b	11ccc <mpc_tan@@Base+0x2b4>
   11cc4:	sub	x0, x29, #0x48
   11cc8:	bl	4bb0 <mpfr_nextbelow@plt>
   11ccc:	ldur	x8, [x29, #-24]
   11cd0:	cmp	x8, x27
   11cd4:	b.gt	11ce4 <mpc_tan@@Base+0x2cc>
   11cd8:	b.ne	11cfc <mpc_tan@@Base+0x2e4>  // b.any
   11cdc:	bl	4b00 <mpfr_set_erangeflag@plt>
   11ce0:	b	11cfc <mpc_tan@@Base+0x2e4>
   11ce4:	ldur	w8, [x29, #-32]
   11ce8:	cmp	w8, #0x1
   11cec:	b.lt	11cfc <mpc_tan@@Base+0x2e4>  // b.tstop
   11cf0:	mov	x0, x28
   11cf4:	bl	4e00 <mpfr_nextabove@plt>
   11cf8:	b	11d04 <mpc_tan@@Base+0x2ec>
   11cfc:	mov	x0, x28
   11d00:	bl	4bb0 <mpfr_nextbelow@plt>
   11d04:	ldr	x8, [sp, #56]
   11d08:	cmp	x8, x27
   11d0c:	b.gt	11d1c <mpc_tan@@Base+0x304>
   11d10:	b.ne	11d34 <mpc_tan@@Base+0x31c>  // b.any
   11d14:	bl	4b00 <mpfr_set_erangeflag@plt>
   11d18:	b	11d34 <mpc_tan@@Base+0x31c>
   11d1c:	ldr	w8, [sp, #48]
   11d20:	cmp	w8, #0x1
   11d24:	b.lt	11d34 <mpc_tan@@Base+0x31c>  // b.tstop
   11d28:	add	x0, sp, #0x28
   11d2c:	bl	4e00 <mpfr_nextabove@plt>
   11d30:	b	11d3c <mpc_tan@@Base+0x324>
   11d34:	add	x0, sp, #0x28
   11d38:	bl	4bb0 <mpfr_nextbelow@plt>
   11d3c:	ldr	x8, [sp, #88]
   11d40:	cmp	x8, x27
   11d44:	b.gt	11d54 <mpc_tan@@Base+0x33c>
   11d48:	b.ne	11d6c <mpc_tan@@Base+0x354>  // b.any
   11d4c:	bl	4b00 <mpfr_set_erangeflag@plt>
   11d50:	b	11d6c <mpc_tan@@Base+0x354>
   11d54:	ldr	w8, [sp, #80]
   11d58:	cmp	w8, #0x1
   11d5c:	b.lt	11d6c <mpc_tan@@Base+0x354>  // b.tstop
   11d60:	mov	x0, x23
   11d64:	bl	4e00 <mpfr_nextabove@plt>
   11d68:	b	11d74 <mpc_tan@@Base+0x35c>
   11d6c:	mov	x0, x23
   11d70:	bl	4bb0 <mpfr_nextbelow@plt>
   11d74:	ldur	x26, [x29, #-56]
   11d78:	mov	x9, #0x8000000000000003    	// #-9223372036854775805
   11d7c:	cmp	x26, x9
   11d80:	b.eq	11f64 <mpc_tan@@Base+0x54c>  // b.none
   11d84:	cmp	x26, x24
   11d88:	stp	x23, x25, [sp, #24]
   11d8c:	b.eq	121fc <mpc_tan@@Base+0x7e4>  // b.none
   11d90:	ldur	x8, [x29, #-24]
   11d94:	cmp	x8, x9
   11d98:	b.eq	121a0 <mpc_tan@@Base+0x788>  // b.none
   11d9c:	ldr	x23, [sp, #56]
   11da0:	cmp	x23, x9
   11da4:	b.eq	121a0 <mpc_tan@@Base+0x788>  // b.none
   11da8:	ldr	x25, [sp, #88]
   11dac:	cmp	x25, x9
   11db0:	b.eq	121a0 <mpc_tan@@Base+0x788>  // b.none
   11db4:	sub	x0, x29, #0x48
   11db8:	sub	x1, x29, #0x48
   11dbc:	add	x2, sp, #0x28
   11dc0:	mov	w3, #0x11                  	// #17
   11dc4:	bl	5250 <mpc_div@plt>
   11dc8:	ldur	x9, [x29, #-56]
   11dcc:	mov	w8, wzr
   11dd0:	cmp	x9, x24
   11dd4:	b.eq	11e14 <mpc_tan@@Base+0x3fc>  // b.none
   11dd8:	ldur	x10, [x29, #-24]
   11ddc:	cmp	x10, x24
   11de0:	mov	x24, x22
   11de4:	b.eq	11f3c <mpc_tan@@Base+0x524>  // b.none
   11de8:	mov	w27, w0
   11dec:	tst	w0, #0x3
   11df0:	mov	x24, #0x8000000000000001    	// #-9223372036854775807
   11df4:	b.eq	11e3c <mpc_tan@@Base+0x424>  // b.none
   11df8:	mov	x8, #0x2                   	// #2
   11dfc:	movk	x8, #0x8000, lsl #48
   11e00:	cmp	x9, x8
   11e04:	b.gt	11e1c <mpc_tan@@Base+0x404>
   11e08:	b.ne	11e34 <mpc_tan@@Base+0x41c>  // b.any
   11e0c:	bl	4b00 <mpfr_set_erangeflag@plt>
   11e10:	b	11e34 <mpc_tan@@Base+0x41c>
   11e14:	mov	x24, x22
   11e18:	b	11f3c <mpc_tan@@Base+0x524>
   11e1c:	ldur	w8, [x29, #-64]
   11e20:	cmp	w8, #0x1
   11e24:	b.lt	11e34 <mpc_tan@@Base+0x41c>  // b.tstop
   11e28:	sub	x0, x29, #0x48
   11e2c:	bl	4e00 <mpfr_nextabove@plt>
   11e30:	b	11e3c <mpc_tan@@Base+0x424>
   11e34:	sub	x0, x29, #0x48
   11e38:	bl	4bb0 <mpfr_nextbelow@plt>
   11e3c:	cmp	w27, #0x4
   11e40:	b.cc	11e84 <mpc_tan@@Base+0x46c>  // b.lo, b.ul, b.last
   11e44:	ldur	x8, [x29, #-24]
   11e48:	mov	x9, #0x2                   	// #2
   11e4c:	movk	x9, #0x8000, lsl #48
   11e50:	cmp	x8, x9
   11e54:	b.gt	11e64 <mpc_tan@@Base+0x44c>
   11e58:	b.ne	11e7c <mpc_tan@@Base+0x464>  // b.any
   11e5c:	bl	4b00 <mpfr_set_erangeflag@plt>
   11e60:	b	11e7c <mpc_tan@@Base+0x464>
   11e64:	ldur	w8, [x29, #-32]
   11e68:	cmp	w8, #0x1
   11e6c:	b.lt	11e7c <mpc_tan@@Base+0x464>  // b.tstop
   11e70:	mov	x0, x28
   11e74:	bl	4e00 <mpfr_nextabove@plt>
   11e78:	b	11e84 <mpc_tan@@Base+0x46c>
   11e7c:	mov	x0, x28
   11e80:	bl	4bb0 <mpfr_nextbelow@plt>
   11e84:	ldur	x8, [x29, #-56]
   11e88:	cmp	x8, x24
   11e8c:	b.eq	1222c <mpc_tan@@Base+0x814>  // b.none
   11e90:	neg	x9, x23
   11e94:	sub	x10, x23, x25, lsl #1
   11e98:	cmp	x10, x9
   11e9c:	sub	x8, x26, x8
   11ea0:	csneg	x9, x10, x23, ge  // ge = tcont
   11ea4:	add	x8, x8, x9
   11ea8:	add	x9, x8, #0x5
   11eac:	cmp	x8, #0x2
   11eb0:	mov	w8, #0x8                   	// #8
   11eb4:	csel	x8, x8, x9, eq  // eq = none
   11eb8:	mov	w9, #0x7                   	// #7
   11ebc:	sub	x0, x29, #0x48
   11ec0:	csel	x24, x9, x8, lt  // lt = tstop
   11ec4:	bl	54d0 <mpfr_number_p@plt>
   11ec8:	cbz	w0, 11ef0 <mpc_tan@@Base+0x4d8>
   11ecc:	ldr	x8, [x19]
   11ed0:	ldr	x9, [sp, #8]
   11ed4:	sub	x1, x22, x24
   11ed8:	sub	x0, x29, #0x48
   11edc:	mov	w3, #0x1                   	// #1
   11ee0:	add	x4, x8, x9
   11ee4:	mov	w2, wzr
   11ee8:	bl	5450 <mpfr_can_round@plt>
   11eec:	cbz	w0, 11f38 <mpc_tan@@Base+0x520>
   11ef0:	mov	x0, x28
   11ef4:	mov	x23, x28
   11ef8:	bl	54d0 <mpfr_number_p@plt>
   11efc:	cbz	w0, 11f30 <mpc_tan@@Base+0x518>
   11f00:	ldr	x8, [sp, #32]
   11f04:	ldr	x9, [sp]
   11f08:	sub	x1, x22, #0x6
   11f0c:	mov	w3, #0x1                   	// #1
   11f10:	ldr	x8, [x8]
   11f14:	mov	x0, x23
   11f18:	mov	w2, wzr
   11f1c:	add	x4, x8, x9
   11f20:	bl	5450 <mpfr_can_round@plt>
   11f24:	cmp	w0, #0x0
   11f28:	cset	w8, ne  // ne = any
   11f2c:	b	11f3c <mpc_tan@@Base+0x524>
   11f30:	mov	w8, #0x1                   	// #1
   11f34:	b	11f3c <mpc_tan@@Base+0x524>
   11f38:	mov	w8, wzr
   11f3c:	ldp	x23, x25, [sp, #24]
   11f40:	mov	x27, #0x2                   	// #2
   11f44:	movk	x27, #0x8000, lsl #48
   11f48:	cbz	w8, 11c4c <mpc_tan@@Base+0x234>
   11f4c:	sub	x1, x29, #0x48
   11f50:	mov	x0, x19
   11f54:	mov	w2, w20
   11f58:	bl	5580 <mpc_set@plt>
   11f5c:	mov	w19, w0
   11f60:	b	1216c <mpc_tan@@Base+0x754>
   11f64:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   11f68:	mov	x23, x19
   11f6c:	str	x8, [x23, #16]!
   11f70:	mov	w8, #0x1                   	// #1
   11f74:	stur	w8, [x23, #-8]
   11f78:	ldur	w22, [x29, #-64]
   11f7c:	ldr	x8, [sp, #56]
   11f80:	mov	x9, #0x2                   	// #2
   11f84:	movk	x9, #0x8000, lsl #48
   11f88:	cmp	x8, x9
   11f8c:	b.gt	1205c <mpc_tan@@Base+0x644>
   11f90:	cmp	x8, x27
   11f94:	b.ne	11f9c <mpc_tan@@Base+0x584>  // b.any
   11f98:	bl	4b00 <mpfr_set_erangeflag@plt>
   11f9c:	mov	w8, wzr
   11fa0:	mul	w8, w8, w22
   11fa4:	tbz	w8, #31, 12068 <mpc_tan@@Base+0x650>
   11fa8:	mov	x0, x19
   11fac:	mov	x1, x19
   11fb0:	mov	w2, wzr
   11fb4:	bl	4b80 <mpfr_neg@plt>
   11fb8:	mov	w24, #0x1                   	// #1
   11fbc:	b	1206c <mpc_tan@@Base+0x654>
   11fc0:	sub	x0, x29, #0x48
   11fc4:	bl	4aa0 <mpfr_init@plt>
   11fc8:	add	x0, sp, #0x28
   11fcc:	bl	4aa0 <mpfr_init@plt>
   11fd0:	add	x0, sp, #0x28
   11fd4:	sub	x1, x29, #0x48
   11fd8:	mov	x2, x21
   11fdc:	mov	w3, wzr
   11fe0:	bl	5520 <mpfr_sin_cos@plt>
   11fe4:	mov	w22, #0x1                   	// #1
   11fe8:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   11fec:	str	w22, [x19, #8]
   11ff0:	str	x8, [x19, #16]
   11ff4:	ldur	w8, [x29, #-64]
   11ff8:	ldr	w9, [sp, #48]
   11ffc:	mov	x0, x19
   12000:	mov	x1, x19
   12004:	mov	w2, wzr
   12008:	eor	w8, w9, w8
   1200c:	cmp	w8, #0x0
   12010:	cneg	w3, w22, lt  // lt = tstop
   12014:	bl	51d0 <mpfr_set4@plt>
   12018:	ldr	w8, [x21, #40]
   1201c:	add	x0, x19, #0x20
   12020:	asr	w3, w20, #4
   12024:	mov	x2, xzr
   12028:	cmp	w8, #0x0
   1202c:	cneg	x1, x22, lt  // lt = tstop
   12030:	bl	49e0 <mpfr_set_si_2exp@plt>
   12034:	cmp	w0, #0x0
   12038:	cset	w8, ne  // ne = any
   1203c:	lsl	w8, w8, #2
   12040:	mov	w9, #0x8                   	// #8
   12044:	add	x0, sp, #0x28
   12048:	csel	w19, w9, w8, lt  // lt = tstop
   1204c:	bl	4d60 <mpfr_clear@plt>
   12050:	sub	x0, x29, #0x48
   12054:	bl	4d60 <mpfr_clear@plt>
   12058:	b	1217c <mpc_tan@@Base+0x764>
   1205c:	ldr	w8, [sp, #48]
   12060:	mul	w8, w8, w22
   12064:	tbnz	w8, #31, 11fa8 <mpc_tan@@Base+0x590>
   12068:	mov	w24, #0xffffffff            	// #-1
   1206c:	ldr	x8, [x21, #48]
   12070:	mov	x9, #0x2                   	// #2
   12074:	movk	x9, #0x8000, lsl #48
   12078:	cmp	x8, x9
   1207c:	b.gt	12090 <mpc_tan@@Base+0x678>
   12080:	cmp	x8, x27
   12084:	b.ne	120b8 <mpc_tan@@Base+0x6a0>  // b.any
   12088:	bl	4b00 <mpfr_set_erangeflag@plt>
   1208c:	b	120b8 <mpc_tan@@Base+0x6a0>
   12090:	ldr	w8, [x21, #40]
   12094:	cmp	w8, #0x1
   12098:	b.lt	120b8 <mpc_tan@@Base+0x6a0>  // b.tstop
   1209c:	mov	w1, #0x1                   	// #1
   120a0:	mov	x0, x25
   120a4:	mov	x2, xzr
   120a8:	mov	w3, wzr
   120ac:	mov	w21, #0x1                   	// #1
   120b0:	bl	5130 <mpfr_set_ui_2exp@plt>
   120b4:	b	120d0 <mpc_tan@@Base+0x6b8>
   120b8:	mov	x1, #0xffffffffffffffff    	// #-1
   120bc:	mov	x0, x25
   120c0:	mov	x2, xzr
   120c4:	mov	w3, wzr
   120c8:	bl	49e0 <mpfr_set_si_2exp@plt>
   120cc:	mov	w21, #0xffffffff            	// #-1
   120d0:	asr	w20, w20, #4
   120d4:	cmp	w20, #0x1
   120d8:	b.eq	120f8 <mpc_tan@@Base+0x6e0>  // b.none
   120dc:	ldr	w8, [x19, #40]
   120e0:	cmp	w20, #0x2
   120e4:	b.ne	120ec <mpc_tan@@Base+0x6d4>  // b.any
   120e8:	tbnz	w8, #31, 120f8 <mpc_tan@@Base+0x6e0>
   120ec:	cmp	w20, #0x3
   120f0:	b.ne	12108 <mpc_tan@@Base+0x6f0>  // b.any
   120f4:	tbnz	w8, #31, 12108 <mpc_tan@@Base+0x6f0>
   120f8:	mov	x0, x25
   120fc:	mov	x1, x19
   12100:	bl	51c0 <mpfr_nexttoward@plt>
   12104:	neg	w21, w21
   12108:	ldr	x8, [x23]
   1210c:	mov	x22, #0x8000000000000001    	// #-9223372036854775807
   12110:	cmp	x8, x22
   12114:	b.ne	12128 <mpc_tan@@Base+0x710>  // b.any
   12118:	ldr	w1, [sp, #20]
   1211c:	mov	x0, x19
   12120:	bl	50d0 <mpc_fix_zero@plt>
   12124:	mov	w24, w0
   12128:	ldr	x8, [x19, #48]
   1212c:	cmp	x8, x22
   12130:	b.ne	12144 <mpc_tan@@Base+0x72c>  // b.any
   12134:	mov	x0, x25
   12138:	mov	w1, w20
   1213c:	bl	50d0 <mpc_fix_zero@plt>
   12140:	mov	w21, w0
   12144:	cmp	w24, #0x0
   12148:	mov	w8, #0x2                   	// #2
   1214c:	cset	w9, ne  // ne = any
   12150:	csel	w8, w8, w9, lt  // lt = tstop
   12154:	cmp	w21, #0x0
   12158:	cset	w9, ne  // ne = any
   1215c:	lsl	w9, w9, #2
   12160:	mov	w10, #0x8                   	// #8
   12164:	csel	w9, w10, w9, lt  // lt = tstop
   12168:	orr	w19, w9, w8
   1216c:	sub	x0, x29, #0x48
   12170:	bl	4a10 <mpc_clear@plt>
   12174:	add	x0, sp, #0x28
   12178:	bl	4a10 <mpc_clear@plt>
   1217c:	mov	w0, w19
   12180:	ldp	x20, x19, [sp, #256]
   12184:	ldp	x22, x21, [sp, #240]
   12188:	ldp	x24, x23, [sp, #224]
   1218c:	ldp	x26, x25, [sp, #208]
   12190:	ldp	x28, x27, [sp, #192]
   12194:	ldp	x29, x30, [sp, #176]
   12198:	add	sp, sp, #0x110
   1219c:	ret
   121a0:	mov	x10, #0x2                   	// #2
   121a4:	mov	x8, #0x8000000000000001    	// #-9223372036854775807
   121a8:	mov	x23, x19
   121ac:	movk	x10, #0x8000, lsl #48
   121b0:	mov	w9, #0x1                   	// #1
   121b4:	str	x8, [x23, #16]!
   121b8:	cmp	x26, x10
   121bc:	stur	w9, [x23, #-8]
   121c0:	b.gt	121ec <mpc_tan@@Base+0x7d4>
   121c4:	ldr	x25, [sp, #32]
   121c8:	mov	x8, #0x2                   	// #2
   121cc:	movk	x8, #0x8000, lsl #48
   121d0:	cmp	x26, x8
   121d4:	b.ne	121dc <mpc_tan@@Base+0x7c4>  // b.any
   121d8:	bl	4b00 <mpfr_set_erangeflag@plt>
   121dc:	mov	x27, #0x2                   	// #2
   121e0:	mov	w22, wzr
   121e4:	movk	x27, #0x8000, lsl #48
   121e8:	b	11f7c <mpc_tan@@Base+0x564>
   121ec:	ldr	x25, [sp, #32]
   121f0:	mov	x27, #0x2                   	// #2
   121f4:	movk	x27, #0x8000, lsl #48
   121f8:	b	11f78 <mpc_tan@@Base+0x560>
   121fc:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
   12200:	ldr	x8, [x8, #4008]
   12204:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
   12208:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
   1220c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
   12210:	ldr	x0, [x8]
   12214:	add	x1, x1, #0x7c0
   12218:	add	x2, x2, #0x825
   1221c:	add	x4, x4, #0xb35
   12220:	mov	w3, #0xc9                  	// #201
   12224:	bl	55a0 <fprintf@plt>
   12228:	bl	5000 <abort@plt>
   1222c:	adrp	x8, 23000 <mpc_ui_ui_sub@@Base+0x10c54>
   12230:	ldr	x8, [x8, #4008]
   12234:	adrp	x1, 13000 <mpc_ui_ui_sub@@Base+0xc54>
   12238:	adrp	x2, 13000 <mpc_ui_ui_sub@@Base+0xc54>
   1223c:	adrp	x4, 13000 <mpc_ui_ui_sub@@Base+0xc54>
   12240:	ldr	x0, [x8]
   12244:	add	x1, x1, #0x7c0
   12248:	add	x2, x2, #0x825
   1224c:	add	x4, x4, #0xb35
   12250:	mov	w3, #0x107                 	// #263
   12254:	bl	55a0 <fprintf@plt>
   12258:	bl	5000 <abort@plt>

000000000001225c <mpc_tanh@@Base>:
   1225c:	sub	sp, sp, #0xa0
   12260:	stp	x29, x30, [sp, #128]
   12264:	str	x19, [sp, #144]
   12268:	ldp	q1, q0, [x1, #32]
   1226c:	ubfiz	w8, w2, #4, #4
   12270:	mov	x19, x0
   12274:	add	w2, w8, w2, asr #4
   12278:	stp	q1, q0, [sp, #64]
   1227c:	ldp	q1, q0, [x1]
   12280:	add	x1, sp, #0x40
   12284:	add	x29, sp, #0x80
   12288:	stp	q1, q0, [sp, #96]
   1228c:	ldp	q1, q0, [x0, #32]
   12290:	stp	q1, q0, [sp]
   12294:	ldp	q1, q0, [x0]
   12298:	mov	x0, sp
   1229c:	stp	q1, q0, [sp, #32]
   122a0:	bl	4c20 <mpc_tan@plt>
   122a4:	ldp	q1, q0, [sp, #32]
   122a8:	asr	w8, w0, #2
   122ac:	cmp	w8, #0x0
   122b0:	cset	w9, ne  // ne = any
   122b4:	stp	q1, q0, [x19]
   122b8:	ldp	q1, q0, [sp]
   122bc:	cmp	w8, #0x2
   122c0:	csel	w8, w8, w9, eq  // eq = none
   122c4:	tst	w0, #0x3
   122c8:	stp	q1, q0, [x19, #32]
   122cc:	and	w9, w0, #0x3
   122d0:	cset	w10, ne  // ne = any
   122d4:	ldr	x19, [sp, #144]
   122d8:	ldp	x29, x30, [sp, #128]
   122dc:	cmp	w9, #0x2
   122e0:	mov	w9, #0x8                   	// #8
   122e4:	lsl	w10, w10, #2
   122e8:	csel	w9, w9, w10, eq  // eq = none
   122ec:	orr	w0, w8, w9
   122f0:	add	sp, sp, #0xa0
   122f4:	ret

00000000000122f8 <mpc_ceil_log2@@Base>:
   122f8:	cmp	x0, #0x2
   122fc:	b.lt	1232c <mpc_ceil_log2@@Base+0x34>  // b.tstop
   12300:	mov	x8, xzr
   12304:	add	x9, x0, #0x1
   12308:	add	x10, x0, #0x2
   1230c:	cmp	x9, #0x0
   12310:	csinc	x9, x10, x0, lt  // lt = tstop
   12314:	cmp	x0, #0x2
   12318:	asr	x0, x9, #1
   1231c:	add	x8, x8, #0x1
   12320:	b.gt	12304 <mpc_ceil_log2@@Base+0xc>
   12324:	mov	x0, x8
   12328:	ret
   1232c:	mov	x0, xzr
   12330:	ret

0000000000012334 <mpc_ui_div@@Base>:
   12334:	sub	sp, sp, #0x70
   12338:	stp	x22, x21, [sp, #80]
   1233c:	mov	x21, x1
   12340:	mov	x22, x0
   12344:	mov	x0, sp
   12348:	mov	w1, #0x40                  	// #64
   1234c:	stp	x29, x30, [sp, #64]
   12350:	stp	x20, x19, [sp, #96]
   12354:	add	x29, sp, #0x40
   12358:	mov	w19, w3
   1235c:	mov	x20, x2
   12360:	bl	4cf0 <mpc_init2@plt>
   12364:	mov	x0, sp
   12368:	mov	x1, x21
   1236c:	mov	w2, w19
   12370:	bl	4ce0 <mpc_set_ui@plt>
   12374:	mov	x1, sp
   12378:	mov	x0, x22
   1237c:	mov	x2, x20
   12380:	mov	w3, w19
   12384:	bl	5250 <mpc_div@plt>
   12388:	mov	w19, w0
   1238c:	mov	x0, sp
   12390:	bl	4a10 <mpc_clear@plt>
   12394:	mov	w0, w19
   12398:	ldp	x20, x19, [sp, #96]
   1239c:	ldp	x22, x21, [sp, #80]
   123a0:	ldp	x29, x30, [sp, #64]
   123a4:	add	sp, sp, #0x70
   123a8:	ret

00000000000123ac <mpc_ui_ui_sub@@Base>:
   123ac:	stp	x29, x30, [sp, #-64]!
   123b0:	stp	x20, x19, [sp, #48]
   123b4:	mov	x20, x3
   123b8:	stp	x22, x21, [sp, #32]
   123bc:	mov	x21, x2
   123c0:	and	w3, w4, #0xf
   123c4:	mov	x2, x20
   123c8:	str	x23, [sp, #16]
   123cc:	mov	x29, sp
   123d0:	mov	w19, w4
   123d4:	mov	x22, x0
   123d8:	bl	5430 <mpfr_ui_sub@plt>
   123dc:	mov	w23, w0
   123e0:	add	x0, x22, #0x20
   123e4:	add	x2, x20, #0x20
   123e8:	asr	w3, w19, #4
   123ec:	mov	x1, x21
   123f0:	bl	5430 <mpfr_ui_sub@plt>
   123f4:	cmp	w23, #0x0
   123f8:	mov	w8, #0x2                   	// #2
   123fc:	cset	w9, ne  // ne = any
   12400:	csel	w8, w8, w9, lt  // lt = tstop
   12404:	cmp	w0, #0x0
   12408:	cset	w9, ne  // ne = any
   1240c:	ldp	x20, x19, [sp, #48]
   12410:	ldp	x22, x21, [sp, #32]
   12414:	ldr	x23, [sp, #16]
   12418:	lsl	w9, w9, #2
   1241c:	mov	w10, #0x8                   	// #8
   12420:	csel	w9, w10, w9, lt  // lt = tstop
   12424:	orr	w0, w9, w8
   12428:	ldp	x29, x30, [sp], #64
   1242c:	ret
   12430:	stp	x29, x30, [sp, #-48]!
   12434:	mov	x29, sp
   12438:	str	q0, [sp, #16]
   1243c:	str	q1, [sp, #32]
   12440:	ldp	x6, x1, [sp, #16]
   12444:	ldp	x0, x3, [sp, #32]
   12448:	mrs	x15, fpcr
   1244c:	lsr	x7, x1, #63
   12450:	mov	x10, x0
   12454:	ubfiz	x4, x3, #3, #48
   12458:	lsr	x5, x3, #63
   1245c:	mov	x12, x7
   12460:	ubfiz	x2, x1, #3, #48
   12464:	orr	x4, x4, x0, lsr #61
   12468:	ubfx	x8, x1, #48, #15
   1246c:	ubfx	x0, x3, #48, #15
   12470:	and	w7, w7, #0xff
   12474:	mov	x16, x12
   12478:	cmp	x12, x5
   1247c:	and	w11, w5, #0xff
   12480:	orr	x2, x2, x6, lsr #61
   12484:	mov	x1, x8
   12488:	lsl	x9, x6, #3
   1248c:	mov	x3, x0
   12490:	lsl	x13, x10, #3
   12494:	b.eq	12640 <mpc_ui_ui_sub@@Base+0x294>  // b.none
   12498:	sub	w0, w8, w0
   1249c:	cmp	w0, #0x0
   124a0:	b.le	125ec <mpc_ui_ui_sub@@Base+0x240>
   124a4:	cbz	x3, 126a0 <mpc_ui_ui_sub@@Base+0x2f4>
   124a8:	orr	x4, x4, #0x8000000000000
   124ac:	mov	x3, #0x7fff                	// #32767
   124b0:	cmp	x1, x3
   124b4:	b.eq	128a4 <mpc_ui_ui_sub@@Base+0x4f8>  // b.none
   124b8:	cmp	w0, #0x74
   124bc:	b.gt	12928 <mpc_ui_ui_sub@@Base+0x57c>
   124c0:	cmp	w0, #0x3f
   124c4:	b.gt	12a88 <mpc_ui_ui_sub@@Base+0x6dc>
   124c8:	mov	w3, #0x40                  	// #64
   124cc:	sub	w3, w3, w0
   124d0:	lsr	x6, x13, x0
   124d4:	lsl	x13, x13, x3
   124d8:	cmp	x13, #0x0
   124dc:	cset	x5, ne  // ne = any
   124e0:	lsl	x3, x4, x3
   124e4:	orr	x3, x3, x6
   124e8:	lsr	x0, x4, x0
   124ec:	orr	x3, x3, x5
   124f0:	sub	x2, x2, x0
   124f4:	subs	x9, x9, x3
   124f8:	sbc	x2, x2, xzr
   124fc:	and	x3, x2, #0x7ffffffffffff
   12500:	tbz	x2, #51, 126e0 <mpc_ui_ui_sub@@Base+0x334>
   12504:	cbz	x3, 1290c <mpc_ui_ui_sub@@Base+0x560>
   12508:	clz	x0, x3
   1250c:	sub	w0, w0, #0xc
   12510:	neg	w2, w0
   12514:	lsl	x4, x3, x0
   12518:	lsl	x3, x9, x0
   1251c:	lsr	x9, x9, x2
   12520:	orr	x2, x9, x4
   12524:	cmp	x1, w0, sxtw
   12528:	sxtw	x4, w0
   1252c:	b.gt	128ec <mpc_ui_ui_sub@@Base+0x540>
   12530:	sub	w1, w0, w1
   12534:	add	w0, w1, #0x1
   12538:	cmp	w0, #0x3f
   1253c:	b.gt	12a50 <mpc_ui_ui_sub@@Base+0x6a4>
   12540:	mov	w1, #0x40                  	// #64
   12544:	sub	w1, w1, w0
   12548:	lsr	x4, x3, x0
   1254c:	lsl	x3, x3, x1
   12550:	cmp	x3, #0x0
   12554:	lsl	x9, x2, x1
   12558:	cset	x1, ne  // ne = any
   1255c:	orr	x9, x9, x4
   12560:	lsr	x2, x2, x0
   12564:	orr	x9, x9, x1
   12568:	orr	x8, x9, x2
   1256c:	cbz	x8, 126f4 <mpc_ui_ui_sub@@Base+0x348>
   12570:	and	x0, x9, #0x7
   12574:	mov	x1, #0x0                   	// #0
   12578:	mov	w5, #0x1                   	// #1
   1257c:	cbz	x0, 12938 <mpc_ui_ui_sub@@Base+0x58c>
   12580:	and	x3, x15, #0xc00000
   12584:	cmp	x3, #0x400, lsl #12
   12588:	b.eq	1287c <mpc_ui_ui_sub@@Base+0x4d0>  // b.none
   1258c:	cmp	x3, #0x800, lsl #12
   12590:	b.eq	1285c <mpc_ui_ui_sub@@Base+0x4b0>  // b.none
   12594:	cbz	x3, 12888 <mpc_ui_ui_sub@@Base+0x4dc>
   12598:	and	x3, x2, #0x8000000000000
   1259c:	mov	w0, #0x10                  	// #16
   125a0:	cbz	w5, 125a8 <mpc_ui_ui_sub@@Base+0x1fc>
   125a4:	orr	w0, w0, #0x8
   125a8:	cbz	x3, 128c0 <mpc_ui_ui_sub@@Base+0x514>
   125ac:	add	x1, x1, #0x1
   125b0:	mov	x3, #0x7fff                	// #32767
   125b4:	cmp	x1, x3
   125b8:	b.eq	127a4 <mpc_ui_ui_sub@@Base+0x3f8>  // b.none
   125bc:	and	w1, w1, #0x7fff
   125c0:	extr	x8, x2, x9, #3
   125c4:	ubfx	x2, x2, #3, #48
   125c8:	mov	x5, #0x0                   	// #0
   125cc:	orr	w1, w1, w7, lsl #15
   125d0:	bfxil	x5, x2, #0, #48
   125d4:	fmov	d0, x8
   125d8:	bfi	x5, x1, #48, #16
   125dc:	fmov	v0.d[1], x5
   125e0:	cbnz	w0, 12800 <mpc_ui_ui_sub@@Base+0x454>
   125e4:	ldp	x29, x30, [sp], #48
   125e8:	ret
   125ec:	mov	x14, x5
   125f0:	b.eq	1270c <mpc_ui_ui_sub@@Base+0x360>  // b.none
   125f4:	cbnz	x8, 12990 <mpc_ui_ui_sub@@Base+0x5e4>
   125f8:	orr	x1, x2, x9
   125fc:	cbz	x1, 126bc <mpc_ui_ui_sub@@Base+0x310>
   12600:	cmn	w0, #0x1
   12604:	b.eq	12dac <mpc_ui_ui_sub@@Base+0xa00>  // b.none
   12608:	mov	x1, #0x7fff                	// #32767
   1260c:	mvn	w0, w0
   12610:	cmp	x3, x1
   12614:	b.ne	129a4 <mpc_ui_ui_sub@@Base+0x5f8>  // b.any
   12618:	orr	x0, x4, x13
   1261c:	cbnz	x0, 12d04 <mpc_ui_ui_sub@@Base+0x958>
   12620:	mov	x16, x14
   12624:	nop
   12628:	mov	x4, #0x0                   	// #0
   1262c:	fmov	d0, x4
   12630:	lsl	x16, x16, #63
   12634:	orr	x5, x16, #0x7fff000000000000
   12638:	fmov	v0.d[1], x5
   1263c:	b	125e4 <mpc_ui_ui_sub@@Base+0x238>
   12640:	sub	w5, w8, w0
   12644:	cmp	w5, #0x0
   12648:	b.le	12814 <mpc_ui_ui_sub@@Base+0x468>
   1264c:	cbz	x0, 12754 <mpc_ui_ui_sub@@Base+0x3a8>
   12650:	orr	x4, x4, #0x8000000000000
   12654:	mov	x0, #0x7fff                	// #32767
   12658:	cmp	x1, x0
   1265c:	b.eq	128a4 <mpc_ui_ui_sub@@Base+0x4f8>  // b.none
   12660:	cmp	w5, #0x74
   12664:	b.gt	12a38 <mpc_ui_ui_sub@@Base+0x68c>
   12668:	cmp	w5, #0x3f
   1266c:	b.gt	12b38 <mpc_ui_ui_sub@@Base+0x78c>
   12670:	mov	w0, #0x40                  	// #64
   12674:	sub	w0, w0, w5
   12678:	lsr	x6, x13, x5
   1267c:	lsl	x13, x13, x0
   12680:	cmp	x13, #0x0
   12684:	lsl	x0, x4, x0
   12688:	cset	x3, ne  // ne = any
   1268c:	orr	x0, x0, x6
   12690:	lsr	x4, x4, x5
   12694:	orr	x0, x0, x3
   12698:	add	x2, x2, x4
   1269c:	b	12a44 <mpc_ui_ui_sub@@Base+0x698>
   126a0:	orr	x3, x4, x13
   126a4:	cbz	x3, 12a14 <mpc_ui_ui_sub@@Base+0x668>
   126a8:	subs	w0, w0, #0x1
   126ac:	b.ne	124ac <mpc_ui_ui_sub@@Base+0x100>  // b.any
   126b0:	subs	x9, x9, x13
   126b4:	sbc	x2, x2, x4
   126b8:	b	124fc <mpc_ui_ui_sub@@Base+0x150>
   126bc:	mov	x0, #0x7fff                	// #32767
   126c0:	cmp	x3, x0
   126c4:	b.eq	12df8 <mpc_ui_ui_sub@@Base+0xa4c>  // b.none
   126c8:	mov	w7, w11
   126cc:	mov	x2, x4
   126d0:	mov	x9, x13
   126d4:	mov	x1, x3
   126d8:	mov	x12, x5
   126dc:	nop
   126e0:	orr	x8, x9, x2
   126e4:	and	x0, x9, #0x7
   126e8:	mov	w5, #0x0                   	// #0
   126ec:	cbnz	x1, 1257c <mpc_ui_ui_sub@@Base+0x1d0>
   126f0:	cbnz	x8, 12570 <mpc_ui_ui_sub@@Base+0x1c4>
   126f4:	mov	x2, #0x0                   	// #0
   126f8:	mov	x1, #0x0                   	// #0
   126fc:	mov	w0, #0x0                   	// #0
   12700:	and	x2, x2, #0xffffffffffff
   12704:	and	w1, w1, #0x7fff
   12708:	b	125c8 <mpc_ui_ui_sub@@Base+0x21c>
   1270c:	add	x5, x8, #0x1
   12710:	tst	x5, #0x7ffe
   12714:	b.ne	129e4 <mpc_ui_ui_sub@@Base+0x638>  // b.any
   12718:	orr	x5, x2, x9
   1271c:	orr	x8, x4, x13
   12720:	cbnz	x1, 12ba4 <mpc_ui_ui_sub@@Base+0x7f8>
   12724:	cbz	x5, 12c4c <mpc_ui_ui_sub@@Base+0x8a0>
   12728:	cbz	x8, 12c60 <mpc_ui_ui_sub@@Base+0x8b4>
   1272c:	subs	x5, x9, x13
   12730:	cmp	x9, x13
   12734:	sbc	x3, x2, x4
   12738:	tbz	x3, #51, 12e2c <mpc_ui_ui_sub@@Base+0xa80>
   1273c:	subs	x9, x13, x9
   12740:	mov	w7, w11
   12744:	sbc	x2, x4, x2
   12748:	mov	x12, x14
   1274c:	orr	x8, x9, x2
   12750:	b	1256c <mpc_ui_ui_sub@@Base+0x1c0>
   12754:	orr	x0, x4, x13
   12758:	cbz	x0, 12c2c <mpc_ui_ui_sub@@Base+0x880>
   1275c:	subs	w5, w5, #0x1
   12760:	b.ne	12654 <mpc_ui_ui_sub@@Base+0x2a8>  // b.any
   12764:	adds	x9, x9, x13
   12768:	adc	x2, x4, x2
   1276c:	nop
   12770:	tbz	x2, #51, 126e0 <mpc_ui_ui_sub@@Base+0x334>
   12774:	add	x1, x1, #0x1
   12778:	mov	x0, #0x7fff                	// #32767
   1277c:	cmp	x1, x0
   12780:	b.eq	12c6c <mpc_ui_ui_sub@@Base+0x8c0>  // b.none
   12784:	and	x0, x9, #0x1
   12788:	and	x3, x2, #0xfff7ffffffffffff
   1278c:	orr	x9, x0, x9, lsr #1
   12790:	mov	w5, #0x0                   	// #0
   12794:	orr	x9, x9, x2, lsl #63
   12798:	lsr	x2, x3, #1
   1279c:	and	x0, x9, #0x7
   127a0:	b	1257c <mpc_ui_ui_sub@@Base+0x1d0>
   127a4:	and	x3, x15, #0xc00000
   127a8:	cbz	x3, 127e0 <mpc_ui_ui_sub@@Base+0x434>
   127ac:	cmp	x3, #0x400, lsl #12
   127b0:	b.eq	127d8 <mpc_ui_ui_sub@@Base+0x42c>  // b.none
   127b4:	cmp	x3, #0x800, lsl #12
   127b8:	csel	w12, w12, wzr, eq  // eq = none
   127bc:	cbnz	w12, 127e0 <mpc_ui_ui_sub@@Base+0x434>
   127c0:	mov	w1, #0x14                  	// #20
   127c4:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
   127c8:	orr	w0, w0, w1
   127cc:	mov	x8, #0xffffffffffffffff    	// #-1
   127d0:	mov	x1, #0x7ffe                	// #32766
   127d4:	b	12700 <mpc_ui_ui_sub@@Base+0x354>
   127d8:	cbnz	x12, 127c0 <mpc_ui_ui_sub@@Base+0x414>
   127dc:	nop
   127e0:	mov	w1, #0x14                  	// #20
   127e4:	and	x16, x7, #0xff
   127e8:	orr	w0, w0, w1
   127ec:	mov	x4, #0x0                   	// #0
   127f0:	fmov	d0, x4
   127f4:	lsl	x16, x16, #63
   127f8:	orr	x5, x16, #0x7fff000000000000
   127fc:	fmov	v0.d[1], x5
   12800:	str	q0, [sp, #16]
   12804:	bl	13740 <mpc_ui_ui_sub@@Base+0x1394>
   12808:	ldr	q0, [sp, #16]
   1280c:	ldp	x29, x30, [sp], #48
   12810:	ret
   12814:	b.eq	12954 <mpc_ui_ui_sub@@Base+0x5a8>  // b.none
   12818:	cbnz	x8, 12ad8 <mpc_ui_ui_sub@@Base+0x72c>
   1281c:	orr	x0, x2, x9
   12820:	cbz	x0, 12d44 <mpc_ui_ui_sub@@Base+0x998>
   12824:	cmn	w5, #0x1
   12828:	b.eq	12ea4 <mpc_ui_ui_sub@@Base+0xaf8>  // b.none
   1282c:	mov	x0, #0x7fff                	// #32767
   12830:	mvn	w5, w5
   12834:	cmp	x3, x0
   12838:	b.ne	12aec <mpc_ui_ui_sub@@Base+0x740>  // b.any
   1283c:	orr	x0, x4, x13
   12840:	cbz	x0, 12628 <mpc_ui_ui_sub@@Base+0x27c>
   12844:	lsr	x5, x4, #50
   12848:	mov	x9, x13
   1284c:	eor	x5, x5, #0x1
   12850:	mov	x2, x4
   12854:	and	w5, w5, #0x1
   12858:	b	128b8 <mpc_ui_ui_sub@@Base+0x50c>
   1285c:	mov	w0, #0x10                  	// #16
   12860:	cbz	x12, 1286c <mpc_ui_ui_sub@@Base+0x4c0>
   12864:	adds	x9, x9, #0x8
   12868:	cinc	x2, x2, cs  // cs = hs, nlast
   1286c:	and	x3, x2, #0x8000000000000
   12870:	cbz	w5, 125a8 <mpc_ui_ui_sub@@Base+0x1fc>
   12874:	orr	w0, w0, #0x8
   12878:	b	125a8 <mpc_ui_ui_sub@@Base+0x1fc>
   1287c:	mov	w0, #0x10                  	// #16
   12880:	cbnz	x12, 1286c <mpc_ui_ui_sub@@Base+0x4c0>
   12884:	b	12864 <mpc_ui_ui_sub@@Base+0x4b8>
   12888:	and	x3, x9, #0xf
   1288c:	mov	w0, #0x10                  	// #16
   12890:	cmp	x3, #0x4
   12894:	b.eq	1286c <mpc_ui_ui_sub@@Base+0x4c0>  // b.none
   12898:	adds	x9, x9, #0x4
   1289c:	cinc	x2, x2, cs  // cs = hs, nlast
   128a0:	b	1286c <mpc_ui_ui_sub@@Base+0x4c0>
   128a4:	orr	x0, x2, x9
   128a8:	cbz	x0, 12628 <mpc_ui_ui_sub@@Base+0x27c>
   128ac:	lsr	x5, x2, #50
   128b0:	eor	x5, x5, #0x1
   128b4:	and	w5, w5, #0x1
   128b8:	mov	w0, w5
   128bc:	mov	x1, #0x7fff                	// #32767
   128c0:	mov	x3, #0x7fff                	// #32767
   128c4:	extr	x8, x2, x9, #3
   128c8:	cmp	x1, x3
   128cc:	lsr	x2, x2, #3
   128d0:	b.ne	12700 <mpc_ui_ui_sub@@Base+0x354>  // b.any
   128d4:	orr	x1, x8, x2
   128d8:	cbz	x1, 12f44 <mpc_ui_ui_sub@@Base+0xb98>
   128dc:	orr	x2, x2, #0x800000000000
   128e0:	mov	w1, #0x7fff                	// #32767
   128e4:	and	x2, x2, #0xffffffffffff
   128e8:	b	125c8 <mpc_ui_ui_sub@@Base+0x21c>
   128ec:	mov	x9, x3
   128f0:	and	x2, x2, #0xfff7ffffffffffff
   128f4:	sub	x1, x1, x4
   128f8:	orr	x8, x9, x2
   128fc:	and	x0, x9, #0x7
   12900:	mov	w5, #0x0                   	// #0
   12904:	cbz	x1, 126f0 <mpc_ui_ui_sub@@Base+0x344>
   12908:	b	1257c <mpc_ui_ui_sub@@Base+0x1d0>
   1290c:	clz	x2, x9
   12910:	add	w0, w2, #0x34
   12914:	cmp	w0, #0x3f
   12918:	b.le	12510 <mpc_ui_ui_sub@@Base+0x164>
   1291c:	sub	w2, w2, #0xc
   12920:	lsl	x2, x9, x2
   12924:	b	12524 <mpc_ui_ui_sub@@Base+0x178>
   12928:	orr	x4, x4, x13
   1292c:	cmp	x4, #0x0
   12930:	cset	x3, ne  // ne = any
   12934:	b	124f4 <mpc_ui_ui_sub@@Base+0x148>
   12938:	and	x3, x2, #0x8000000000000
   1293c:	mov	w0, #0x0                   	// #0
   12940:	cbz	w5, 125a8 <mpc_ui_ui_sub@@Base+0x1fc>
   12944:	mov	w0, #0x0                   	// #0
   12948:	tbz	w15, #11, 125a8 <mpc_ui_ui_sub@@Base+0x1fc>
   1294c:	orr	w0, w0, #0x8
   12950:	b	125a8 <mpc_ui_ui_sub@@Base+0x1fc>
   12954:	add	x0, x8, #0x1
   12958:	tst	x0, #0x7ffe
   1295c:	b.ne	12b64 <mpc_ui_ui_sub@@Base+0x7b8>  // b.any
   12960:	orr	x0, x2, x9
   12964:	cbnz	x8, 12d20 <mpc_ui_ui_sub@@Base+0x974>
   12968:	orr	x8, x4, x13
   1296c:	cbz	x0, 12d74 <mpc_ui_ui_sub@@Base+0x9c8>
   12970:	cbz	x8, 12c60 <mpc_ui_ui_sub@@Base+0x8b4>
   12974:	adds	x9, x9, x13
   12978:	adc	x2, x4, x2
   1297c:	tbz	x2, #51, 1274c <mpc_ui_ui_sub@@Base+0x3a0>
   12980:	and	x2, x2, #0xfff7ffffffffffff
   12984:	and	x0, x9, #0x7
   12988:	mov	x1, #0x1                   	// #1
   1298c:	b	1257c <mpc_ui_ui_sub@@Base+0x1d0>
   12990:	mov	x1, #0x7fff                	// #32767
   12994:	neg	w0, w0
   12998:	orr	x2, x2, #0x8000000000000
   1299c:	cmp	x3, x1
   129a0:	b.eq	12618 <mpc_ui_ui_sub@@Base+0x26c>  // b.none
   129a4:	cmp	w0, #0x74
   129a8:	b.gt	12ab4 <mpc_ui_ui_sub@@Base+0x708>
   129ac:	cmp	w0, #0x3f
   129b0:	b.gt	12cd0 <mpc_ui_ui_sub@@Base+0x924>
   129b4:	mov	w1, #0x40                  	// #64
   129b8:	sub	w1, w1, w0
   129bc:	lsr	x5, x9, x0
   129c0:	lsl	x9, x9, x1
   129c4:	cmp	x9, #0x0
   129c8:	lsl	x9, x2, x1
   129cc:	cset	x1, ne  // ne = any
   129d0:	orr	x9, x9, x5
   129d4:	lsr	x0, x2, x0
   129d8:	orr	x9, x9, x1
   129dc:	sub	x4, x4, x0
   129e0:	b	12ac0 <mpc_ui_ui_sub@@Base+0x714>
   129e4:	subs	x5, x9, x13
   129e8:	cmp	x9, x13
   129ec:	sbc	x3, x2, x4
   129f0:	tbnz	x3, #51, 12b8c <mpc_ui_ui_sub@@Base+0x7e0>
   129f4:	orr	x8, x5, x3
   129f8:	cbnz	x8, 12cb8 <mpc_ui_ui_sub@@Base+0x90c>
   129fc:	and	x15, x15, #0xc00000
   12a00:	mov	x2, #0x0                   	// #0
   12a04:	cmp	x15, #0x800, lsl #12
   12a08:	mov	x1, #0x0                   	// #0
   12a0c:	cset	w7, eq  // eq = none
   12a10:	b	12700 <mpc_ui_ui_sub@@Base+0x354>
   12a14:	mov	x0, #0x7fff                	// #32767
   12a18:	cmp	x8, x0
   12a1c:	b.ne	126e0 <mpc_ui_ui_sub@@Base+0x334>  // b.any
   12a20:	orr	x0, x2, x9
   12a24:	cbnz	x0, 128ac <mpc_ui_ui_sub@@Base+0x500>
   12a28:	mov	x2, #0x0                   	// #0
   12a2c:	mov	x8, #0x0                   	// #0
   12a30:	mov	w0, #0x0                   	// #0
   12a34:	b	128d4 <mpc_ui_ui_sub@@Base+0x528>
   12a38:	orr	x4, x4, x13
   12a3c:	cmp	x4, #0x0
   12a40:	cset	x0, ne  // ne = any
   12a44:	adds	x9, x0, x9
   12a48:	cinc	x2, x2, cs  // cs = hs, nlast
   12a4c:	b	12770 <mpc_ui_ui_sub@@Base+0x3c4>
   12a50:	mov	w4, #0x80                  	// #128
   12a54:	sub	w4, w4, w0
   12a58:	cmp	w0, #0x40
   12a5c:	sub	w9, w1, #0x3f
   12a60:	lsl	x0, x2, x4
   12a64:	orr	x0, x3, x0
   12a68:	csel	x3, x0, x3, ne  // ne = any
   12a6c:	lsr	x9, x2, x9
   12a70:	cmp	x3, #0x0
   12a74:	mov	x2, #0x0                   	// #0
   12a78:	cset	x0, ne  // ne = any
   12a7c:	orr	x9, x0, x9
   12a80:	mov	x8, x9
   12a84:	b	1256c <mpc_ui_ui_sub@@Base+0x1c0>
   12a88:	mov	w5, #0x80                  	// #128
   12a8c:	sub	w5, w5, w0
   12a90:	subs	w0, w0, #0x40
   12a94:	lsl	x5, x4, x5
   12a98:	orr	x5, x13, x5
   12a9c:	csel	x13, x5, x13, ne  // ne = any
   12aa0:	lsr	x4, x4, x0
   12aa4:	cmp	x13, #0x0
   12aa8:	cset	x3, ne  // ne = any
   12aac:	orr	x3, x3, x4
   12ab0:	b	124f4 <mpc_ui_ui_sub@@Base+0x148>
   12ab4:	orr	x2, x2, x9
   12ab8:	cmp	x2, #0x0
   12abc:	cset	x9, ne  // ne = any
   12ac0:	subs	x9, x13, x9
   12ac4:	mov	w7, w11
   12ac8:	sbc	x2, x4, xzr
   12acc:	mov	x1, x3
   12ad0:	mov	x12, x14
   12ad4:	b	124fc <mpc_ui_ui_sub@@Base+0x150>
   12ad8:	mov	x0, #0x7fff                	// #32767
   12adc:	neg	w5, w5
   12ae0:	orr	x2, x2, #0x8000000000000
   12ae4:	cmp	x3, x0
   12ae8:	b.eq	1283c <mpc_ui_ui_sub@@Base+0x490>  // b.none
   12aec:	cmp	w5, #0x74
   12af0:	b.gt	12cc0 <mpc_ui_ui_sub@@Base+0x914>
   12af4:	cmp	w5, #0x3f
   12af8:	b.gt	12d80 <mpc_ui_ui_sub@@Base+0x9d4>
   12afc:	mov	w1, #0x40                  	// #64
   12b00:	sub	w1, w1, w5
   12b04:	lsr	x6, x9, x5
   12b08:	lsl	x9, x9, x1
   12b0c:	cmp	x9, #0x0
   12b10:	cset	x0, ne  // ne = any
   12b14:	lsl	x9, x2, x1
   12b18:	orr	x9, x9, x6
   12b1c:	lsr	x5, x2, x5
   12b20:	orr	x9, x9, x0
   12b24:	add	x4, x4, x5
   12b28:	adds	x9, x9, x13
   12b2c:	mov	x1, x3
   12b30:	cinc	x2, x4, cs  // cs = hs, nlast
   12b34:	b	12770 <mpc_ui_ui_sub@@Base+0x3c4>
   12b38:	mov	w0, #0x80                  	// #128
   12b3c:	sub	w0, w0, w5
   12b40:	subs	w5, w5, #0x40
   12b44:	lsl	x0, x4, x0
   12b48:	orr	x0, x13, x0
   12b4c:	csel	x13, x0, x13, ne  // ne = any
   12b50:	lsr	x4, x4, x5
   12b54:	cmp	x13, #0x0
   12b58:	cset	x0, ne  // ne = any
   12b5c:	orr	x0, x0, x4
   12b60:	b	12a44 <mpc_ui_ui_sub@@Base+0x698>
   12b64:	mov	x1, #0x7fff                	// #32767
   12b68:	cmp	x0, x1
   12b6c:	b.eq	12dc8 <mpc_ui_ui_sub@@Base+0xa1c>  // b.none
   12b70:	adds	x9, x9, x13
   12b74:	mov	x1, x0
   12b78:	adc	x2, x4, x2
   12b7c:	ubfx	x0, x9, #1, #3
   12b80:	extr	x9, x2, x9, #1
   12b84:	lsr	x2, x2, #1
   12b88:	b	1257c <mpc_ui_ui_sub@@Base+0x1d0>
   12b8c:	cmp	x13, x9
   12b90:	mov	w7, w11
   12b94:	sbc	x3, x4, x2
   12b98:	sub	x9, x13, x9
   12b9c:	mov	x12, x14
   12ba0:	b	12504 <mpc_ui_ui_sub@@Base+0x158>
   12ba4:	mov	x12, #0x7fff                	// #32767
   12ba8:	cmp	x1, x12
   12bac:	b.eq	12bd8 <mpc_ui_ui_sub@@Base+0x82c>  // b.none
   12bb0:	cmp	x3, x12
   12bb4:	b.eq	12e08 <mpc_ui_ui_sub@@Base+0xa5c>  // b.none
   12bb8:	cbnz	x5, 12bf0 <mpc_ui_ui_sub@@Base+0x844>
   12bbc:	mov	w5, w0
   12bc0:	cbnz	x8, 12ee8 <mpc_ui_ui_sub@@Base+0xb3c>
   12bc4:	mov	w7, #0x0                   	// #0
   12bc8:	mov	x2, #0xffffffffffff        	// #281474976710655
   12bcc:	mov	w0, #0x1                   	// #1
   12bd0:	mov	x8, #0xffffffffffffffff    	// #-1
   12bd4:	b	128dc <mpc_ui_ui_sub@@Base+0x530>
   12bd8:	cbz	x5, 12f04 <mpc_ui_ui_sub@@Base+0xb58>
   12bdc:	lsr	x0, x2, #50
   12be0:	cmp	x3, x1
   12be4:	eor	x0, x0, #0x1
   12be8:	and	w0, w0, #0x1
   12bec:	b.eq	12e08 <mpc_ui_ui_sub@@Base+0xa5c>  // b.none
   12bf0:	cbz	x8, 12e24 <mpc_ui_ui_sub@@Base+0xa78>
   12bf4:	bfi	x6, x2, #61, #3
   12bf8:	lsr	x3, x2, #3
   12bfc:	tbz	x2, #50, 12c18 <mpc_ui_ui_sub@@Base+0x86c>
   12c00:	lsr	x1, x4, #3
   12c04:	tbnz	x4, #50, 12c18 <mpc_ui_ui_sub@@Base+0x86c>
   12c08:	mov	x6, x10
   12c0c:	mov	w7, w11
   12c10:	bfi	x6, x4, #61, #3
   12c14:	mov	x3, x1
   12c18:	extr	x2, x3, x6, #61
   12c1c:	bfi	x6, x2, #61, #3
   12c20:	lsr	x2, x2, #3
   12c24:	mov	x8, x6
   12c28:	b	128d4 <mpc_ui_ui_sub@@Base+0x528>
   12c2c:	mov	x0, #0x7fff                	// #32767
   12c30:	cmp	x8, x0
   12c34:	b.ne	126e0 <mpc_ui_ui_sub@@Base+0x334>  // b.any
   12c38:	orr	x0, x2, x9
   12c3c:	cbz	x0, 12a28 <mpc_ui_ui_sub@@Base+0x67c>
   12c40:	lsr	x5, x2, #50
   12c44:	eor	w5, w5, #0x1
   12c48:	b	128b8 <mpc_ui_ui_sub@@Base+0x50c>
   12c4c:	cbz	x8, 12d60 <mpc_ui_ui_sub@@Base+0x9b4>
   12c50:	mov	w7, w11
   12c54:	mov	x2, x4
   12c58:	mov	x9, x13
   12c5c:	mov	x12, x14
   12c60:	mov	x1, #0x0                   	// #0
   12c64:	mov	x3, #0x0                   	// #0
   12c68:	b	12944 <mpc_ui_ui_sub@@Base+0x598>
   12c6c:	ands	x3, x15, #0xc00000
   12c70:	b.eq	12cfc <mpc_ui_ui_sub@@Base+0x950>  // b.none
   12c74:	cmp	x3, #0x400, lsl #12
   12c78:	eor	w0, w7, #0x1
   12c7c:	cset	w1, eq  // eq = none
   12c80:	tst	w1, w0
   12c84:	b.ne	12f20 <mpc_ui_ui_sub@@Base+0xb74>  // b.any
   12c88:	cmp	x3, #0x800, lsl #12
   12c8c:	b.eq	12ecc <mpc_ui_ui_sub@@Base+0xb20>  // b.none
   12c90:	cmp	x3, #0x400, lsl #12
   12c94:	mov	w0, #0x14                  	// #20
   12c98:	b.ne	127a8 <mpc_ui_ui_sub@@Base+0x3fc>  // b.any
   12c9c:	mov	x2, #0xffffffffffffffff    	// #-1
   12ca0:	mov	x1, #0x7ffe                	// #32766
   12ca4:	mov	x9, x2
   12ca8:	mov	w5, #0x0                   	// #0
   12cac:	mov	w0, #0x14                  	// #20
   12cb0:	cbnz	x12, 1286c <mpc_ui_ui_sub@@Base+0x4c0>
   12cb4:	b	12864 <mpc_ui_ui_sub@@Base+0x4b8>
   12cb8:	mov	x9, x5
   12cbc:	b	12504 <mpc_ui_ui_sub@@Base+0x158>
   12cc0:	orr	x2, x2, x9
   12cc4:	cmp	x2, #0x0
   12cc8:	cset	x9, ne  // ne = any
   12ccc:	b	12b28 <mpc_ui_ui_sub@@Base+0x77c>
   12cd0:	mov	w1, #0x80                  	// #128
   12cd4:	sub	w1, w1, w0
   12cd8:	subs	w0, w0, #0x40
   12cdc:	lsl	x1, x2, x1
   12ce0:	orr	x1, x9, x1
   12ce4:	csel	x9, x1, x9, ne  // ne = any
   12ce8:	lsr	x2, x2, x0
   12cec:	cmp	x9, #0x0
   12cf0:	cset	x9, ne  // ne = any
   12cf4:	orr	x9, x9, x2
   12cf8:	b	12ac0 <mpc_ui_ui_sub@@Base+0x714>
   12cfc:	mov	w0, #0x14                  	// #20
   12d00:	b	127ec <mpc_ui_ui_sub@@Base+0x440>
   12d04:	lsr	x5, x4, #50
   12d08:	mov	w7, w11
   12d0c:	eor	x5, x5, #0x1
   12d10:	mov	x9, x13
   12d14:	and	w5, w5, #0x1
   12d18:	mov	x2, x4
   12d1c:	b	128b8 <mpc_ui_ui_sub@@Base+0x50c>
   12d20:	mov	x8, #0x7fff                	// #32767
   12d24:	cmp	x1, x8
   12d28:	b.eq	12e48 <mpc_ui_ui_sub@@Base+0xa9c>  // b.none
   12d2c:	cmp	x3, x8
   12d30:	b.eq	12ebc <mpc_ui_ui_sub@@Base+0xb10>  // b.none
   12d34:	cbnz	x0, 12e60 <mpc_ui_ui_sub@@Base+0xab4>
   12d38:	mov	x2, x4
   12d3c:	mov	x9, x13
   12d40:	b	128b8 <mpc_ui_ui_sub@@Base+0x50c>
   12d44:	mov	x0, #0x7fff                	// #32767
   12d48:	cmp	x3, x0
   12d4c:	b.eq	12ef8 <mpc_ui_ui_sub@@Base+0xb4c>  // b.none
   12d50:	mov	x2, x4
   12d54:	mov	x9, x13
   12d58:	mov	x1, x3
   12d5c:	b	126e0 <mpc_ui_ui_sub@@Base+0x334>
   12d60:	and	x15, x15, #0xc00000
   12d64:	mov	x2, #0x0                   	// #0
   12d68:	cmp	x15, #0x800, lsl #12
   12d6c:	cset	w7, eq  // eq = none
   12d70:	b	12700 <mpc_ui_ui_sub@@Base+0x354>
   12d74:	mov	x2, x4
   12d78:	mov	x9, x13
   12d7c:	b	1256c <mpc_ui_ui_sub@@Base+0x1c0>
   12d80:	mov	w0, #0x80                  	// #128
   12d84:	sub	w0, w0, w5
   12d88:	subs	w5, w5, #0x40
   12d8c:	lsl	x0, x2, x0
   12d90:	orr	x0, x9, x0
   12d94:	csel	x9, x0, x9, ne  // ne = any
   12d98:	lsr	x2, x2, x5
   12d9c:	cmp	x9, #0x0
   12da0:	cset	x9, ne  // ne = any
   12da4:	orr	x9, x9, x2
   12da8:	b	12b28 <mpc_ui_ui_sub@@Base+0x77c>
   12dac:	cmp	x13, x9
   12db0:	mov	w7, w11
   12db4:	sbc	x2, x4, x2
   12db8:	sub	x9, x13, x9
   12dbc:	mov	x1, x3
   12dc0:	mov	x12, x5
   12dc4:	b	124fc <mpc_ui_ui_sub@@Base+0x150>
   12dc8:	ands	x3, x15, #0xc00000
   12dcc:	b.eq	12cfc <mpc_ui_ui_sub@@Base+0x950>  // b.none
   12dd0:	cmp	x3, #0x400, lsl #12
   12dd4:	eor	w0, w7, #0x1
   12dd8:	csel	w0, w0, wzr, eq  // eq = none
   12ddc:	cbnz	w0, 12f20 <mpc_ui_ui_sub@@Base+0xb74>
   12de0:	cmp	x3, #0x800, lsl #12
   12de4:	b.ne	12c90 <mpc_ui_ui_sub@@Base+0x8e4>  // b.any
   12de8:	cbz	x12, 12ed0 <mpc_ui_ui_sub@@Base+0xb24>
   12dec:	mov	w0, #0x14                  	// #20
   12df0:	mov	x16, #0x1                   	// #1
   12df4:	b	127ec <mpc_ui_ui_sub@@Base+0x440>
   12df8:	orr	x0, x4, x13
   12dfc:	cbnz	x0, 12d04 <mpc_ui_ui_sub@@Base+0x958>
   12e00:	mov	w7, w11
   12e04:	b	12a28 <mpc_ui_ui_sub@@Base+0x67c>
   12e08:	cbz	x8, 12f14 <mpc_ui_ui_sub@@Base+0xb68>
   12e0c:	tst	x4, #0x4000000000000
   12e10:	csinc	w0, w0, wzr, ne  // ne = any
   12e14:	cbnz	x5, 12bf4 <mpc_ui_ui_sub@@Base+0x848>
   12e18:	mov	w7, w11
   12e1c:	mov	x2, x4
   12e20:	mov	x9, x13
   12e24:	mov	w5, w0
   12e28:	b	128b8 <mpc_ui_ui_sub@@Base+0x50c>
   12e2c:	orr	x8, x5, x3
   12e30:	cbz	x8, 12d60 <mpc_ui_ui_sub@@Base+0x9b4>
   12e34:	and	x0, x5, #0x7
   12e38:	mov	x9, x5
   12e3c:	mov	x2, x3
   12e40:	mov	w5, #0x1                   	// #1
   12e44:	b	1257c <mpc_ui_ui_sub@@Base+0x1d0>
   12e48:	cbz	x0, 12eb4 <mpc_ui_ui_sub@@Base+0xb08>
   12e4c:	lsr	x5, x2, #50
   12e50:	cmp	x3, x1
   12e54:	eor	x5, x5, #0x1
   12e58:	and	w5, w5, #0x1
   12e5c:	b.eq	12f2c <mpc_ui_ui_sub@@Base+0xb80>  // b.none
   12e60:	orr	x13, x4, x13
   12e64:	cbz	x13, 128b8 <mpc_ui_ui_sub@@Base+0x50c>
   12e68:	bfi	x6, x2, #61, #3
   12e6c:	lsr	x0, x2, #3
   12e70:	tbz	x2, #50, 12e8c <mpc_ui_ui_sub@@Base+0xae0>
   12e74:	lsr	x1, x4, #3
   12e78:	tbnz	x4, #50, 12e8c <mpc_ui_ui_sub@@Base+0xae0>
   12e7c:	and	x6, x10, #0x1fffffffffffffff
   12e80:	mov	w7, w11
   12e84:	orr	x6, x6, x4, lsl #61
   12e88:	mov	x0, x1
   12e8c:	extr	x2, x0, x6, #61
   12e90:	mov	w0, w5
   12e94:	bfi	x6, x2, #61, #3
   12e98:	lsr	x2, x2, #3
   12e9c:	mov	x8, x6
   12ea0:	b	128d4 <mpc_ui_ui_sub@@Base+0x528>
   12ea4:	adds	x9, x9, x13
   12ea8:	mov	x1, x3
   12eac:	adc	x2, x4, x2
   12eb0:	b	12770 <mpc_ui_ui_sub@@Base+0x3c4>
   12eb4:	cmp	x3, x1
   12eb8:	b.ne	12d38 <mpc_ui_ui_sub@@Base+0x98c>  // b.any
   12ebc:	orr	x1, x4, x13
   12ec0:	cbnz	x1, 12f34 <mpc_ui_ui_sub@@Base+0xb88>
   12ec4:	cbz	x0, 12a28 <mpc_ui_ui_sub@@Base+0x67c>
   12ec8:	b	128b8 <mpc_ui_ui_sub@@Base+0x50c>
   12ecc:	cbnz	x16, 12dec <mpc_ui_ui_sub@@Base+0xa40>
   12ed0:	mov	x2, #0xffffffffffffffff    	// #-1
   12ed4:	mov	w7, #0x0                   	// #0
   12ed8:	mov	x9, x2
   12edc:	mov	x1, #0x7ffe                	// #32766
   12ee0:	mov	w0, #0x14                  	// #20
   12ee4:	b	125ac <mpc_ui_ui_sub@@Base+0x200>
   12ee8:	mov	w7, w11
   12eec:	mov	x2, x4
   12ef0:	mov	x9, x13
   12ef4:	b	128b8 <mpc_ui_ui_sub@@Base+0x50c>
   12ef8:	orr	x0, x4, x13
   12efc:	cbz	x0, 12a28 <mpc_ui_ui_sub@@Base+0x67c>
   12f00:	b	12844 <mpc_ui_ui_sub@@Base+0x498>
   12f04:	cmp	x3, x1
   12f08:	b.eq	12e08 <mpc_ui_ui_sub@@Base+0xa5c>  // b.none
   12f0c:	mov	w5, #0x0                   	// #0
   12f10:	b	12bc0 <mpc_ui_ui_sub@@Base+0x814>
   12f14:	cbnz	x5, 12e24 <mpc_ui_ui_sub@@Base+0xa78>
   12f18:	mov	w5, w0
   12f1c:	b	12bc0 <mpc_ui_ui_sub@@Base+0x814>
   12f20:	mov	w0, #0x14                  	// #20
   12f24:	mov	x16, #0x0                   	// #0
   12f28:	b	127ec <mpc_ui_ui_sub@@Base+0x440>
   12f2c:	orr	x1, x4, x13
   12f30:	cbz	x1, 128b8 <mpc_ui_ui_sub@@Base+0x50c>
   12f34:	tst	x4, #0x4000000000000
   12f38:	csinc	w5, w5, wzr, ne  // ne = any
   12f3c:	cbnz	x0, 12e68 <mpc_ui_ui_sub@@Base+0xabc>
   12f40:	b	12d38 <mpc_ui_ui_sub@@Base+0x98c>
   12f44:	mov	x8, #0x0                   	// #0
   12f48:	mov	w1, #0x7fff                	// #32767
   12f4c:	mov	x2, #0x0                   	// #0
   12f50:	b	125c8 <mpc_ui_ui_sub@@Base+0x21c>
   12f54:	nop
   12f58:	stp	x29, x30, [sp, #-80]!
   12f5c:	mov	x29, sp
   12f60:	str	q0, [sp, #48]
   12f64:	str	q1, [sp, #64]
   12f68:	ldp	x1, x0, [sp, #48]
   12f6c:	ldp	x6, x2, [sp, #64]
   12f70:	mrs	x11, fpcr
   12f74:	lsr	x3, x0, #63
   12f78:	ubfx	x7, x0, #0, #48
   12f7c:	and	w12, w3, #0xff
   12f80:	mov	x14, x3
   12f84:	ubfx	x3, x0, #48, #15
   12f88:	cbz	w3, 13330 <mpc_ui_ui_sub@@Base+0xf84>
   12f8c:	mov	w4, #0x7fff                	// #32767
   12f90:	cmp	w3, w4
   12f94:	b.eq	133d4 <mpc_ui_ui_sub@@Base+0x1028>  // b.none
   12f98:	and	x3, x3, #0xffff
   12f9c:	extr	x4, x7, x1, #61
   12fa0:	mov	x18, #0xffffffffffffc001    	// #-16383
   12fa4:	orr	x7, x4, #0x8000000000000
   12fa8:	add	x3, x3, x18
   12fac:	lsl	x5, x1, #3
   12fb0:	mov	x16, #0x0                   	// #0
   12fb4:	mov	x1, #0x0                   	// #0
   12fb8:	mov	w0, #0x0                   	// #0
   12fbc:	lsr	x8, x2, #63
   12fc0:	ubfx	x4, x2, #0, #48
   12fc4:	and	w15, w8, #0xff
   12fc8:	mov	x13, x8
   12fcc:	ubfx	x9, x2, #48, #15
   12fd0:	cbz	w9, 13390 <mpc_ui_ui_sub@@Base+0xfe4>
   12fd4:	mov	w8, #0x7fff                	// #32767
   12fd8:	cmp	w9, w8
   12fdc:	b.eq	13060 <mpc_ui_ui_sub@@Base+0xcb4>  // b.none
   12fe0:	and	x9, x9, #0xffff
   12fe4:	mov	x17, #0xffffffffffffc001    	// #-16383
   12fe8:	add	x9, x9, x17
   12fec:	extr	x2, x4, x6, #61
   12ff0:	add	x9, x9, x3
   12ff4:	lsl	x6, x6, #3
   12ff8:	orr	x4, x2, #0x8000000000000
   12ffc:	mov	x2, #0x0                   	// #0
   13000:	eor	w8, w12, w15
   13004:	cmp	x1, #0xa
   13008:	and	w10, w8, #0xff
   1300c:	add	x3, x9, #0x1
   13010:	and	x8, x8, #0xff
   13014:	b.le	13098 <mpc_ui_ui_sub@@Base+0xcec>
   13018:	cmp	x1, #0xb
   1301c:	b.eq	13730 <mpc_ui_ui_sub@@Base+0x1384>  // b.none
   13020:	mov	w15, w12
   13024:	mov	x13, x14
   13028:	mov	w10, w15
   1302c:	cmp	x16, #0x2
   13030:	b.eq	133f4 <mpc_ui_ui_sub@@Base+0x1048>  // b.none
   13034:	mov	x4, x7
   13038:	mov	x6, x5
   1303c:	mov	x2, x16
   13040:	mov	x8, x13
   13044:	cmp	x2, #0x3
   13048:	b.ne	130b4 <mpc_ui_ui_sub@@Base+0xd08>  // b.any
   1304c:	orr	x4, x4, #0x800000000000
   13050:	mov	x5, x6
   13054:	and	x4, x4, #0xffffffffffff
   13058:	mov	w1, #0x7fff                	// #32767
   1305c:	b	130c8 <mpc_ui_ui_sub@@Base+0xd1c>
   13060:	mov	x8, #0x7fff                	// #32767
   13064:	orr	x2, x4, x6
   13068:	add	x9, x3, x8
   1306c:	cbnz	x2, 130ec <mpc_ui_ui_sub@@Base+0xd40>
   13070:	eor	w8, w12, w15
   13074:	orr	x1, x1, #0x2
   13078:	and	w10, w8, #0xff
   1307c:	cmp	x1, #0xa
   13080:	add	x3, x3, #0x8, lsl #12
   13084:	and	x8, x8, #0xff
   13088:	mov	x6, #0x0                   	// #0
   1308c:	b.gt	136a4 <mpc_ui_ui_sub@@Base+0x12f8>
   13090:	mov	x4, #0x0                   	// #0
   13094:	mov	x2, #0x2                   	// #2
   13098:	cmp	x1, #0x2
   1309c:	b.gt	13114 <mpc_ui_ui_sub@@Base+0xd68>
   130a0:	sub	x1, x1, #0x1
   130a4:	cmp	x1, #0x1
   130a8:	b.hi	13150 <mpc_ui_ui_sub@@Base+0xda4>  // b.pmore
   130ac:	cmp	x2, #0x2
   130b0:	b.eq	133f4 <mpc_ui_ui_sub@@Base+0x1048>  // b.none
   130b4:	cmp	x2, #0x1
   130b8:	b.ne	132b0 <mpc_ui_ui_sub@@Base+0xf04>  // b.any
   130bc:	mov	w1, #0x0                   	// #0
   130c0:	mov	x4, #0x0                   	// #0
   130c4:	mov	x5, #0x0                   	// #0
   130c8:	mov	x3, #0x0                   	// #0
   130cc:	orr	w1, w1, w10, lsl #15
   130d0:	bfxil	x3, x4, #0, #48
   130d4:	fmov	d0, x5
   130d8:	bfi	x3, x1, #48, #16
   130dc:	fmov	v0.d[1], x3
   130e0:	cbnz	w0, 13520 <mpc_ui_ui_sub@@Base+0x1174>
   130e4:	ldp	x29, x30, [sp], #80
   130e8:	ret
   130ec:	tst	x4, #0x800000000000
   130f0:	eor	w8, w12, w15
   130f4:	orr	x1, x1, #0x3
   130f8:	csinc	w0, w0, wzr, ne  // ne = any
   130fc:	and	w10, w8, #0xff
   13100:	add	x3, x3, #0x8, lsl #12
   13104:	cmp	x1, #0xa
   13108:	and	x8, x8, #0xff
   1310c:	mov	x2, #0x3                   	// #3
   13110:	b.gt	13724 <mpc_ui_ui_sub@@Base+0x1378>
   13114:	mov	x12, #0x1                   	// #1
   13118:	mov	x14, #0x530                 	// #1328
   1311c:	lsl	x1, x12, x1
   13120:	tst	x1, x14
   13124:	b.ne	13324 <mpc_ui_ui_sub@@Base+0xf78>  // b.any
   13128:	mov	x14, #0x240                 	// #576
   1312c:	tst	x1, x14
   13130:	b.ne	1330c <mpc_ui_ui_sub@@Base+0xf60>  // b.any
   13134:	mov	x12, #0x88                  	// #136
   13138:	tst	x1, x12
   1313c:	b.eq	13150 <mpc_ui_ui_sub@@Base+0xda4>  // b.none
   13140:	mov	x7, x4
   13144:	mov	x5, x6
   13148:	mov	x16, x2
   1314c:	b	13028 <mpc_ui_ui_sub@@Base+0xc7c>
   13150:	lsr	x13, x5, #32
   13154:	and	x12, x6, #0xffffffff
   13158:	and	x15, x5, #0xffffffff
   1315c:	lsr	x6, x6, #32
   13160:	and	x18, x4, #0xffffffff
   13164:	lsr	x2, x4, #32
   13168:	mul	x4, x13, x12
   1316c:	stp	x21, x22, [sp, #32]
   13170:	lsr	x22, x7, #32
   13174:	and	x5, x7, #0xffffffff
   13178:	mul	x16, x12, x15
   1317c:	madd	x7, x6, x15, x4
   13180:	stp	x19, x20, [sp, #16]
   13184:	mul	x1, x13, x18
   13188:	mul	x17, x15, x18
   1318c:	and	x30, x16, #0xffffffff
   13190:	madd	x15, x2, x15, x1
   13194:	add	x16, x7, x16, lsr #32
   13198:	mul	x21, x22, x12
   1319c:	cmp	x4, x16
   131a0:	mul	x20, x22, x18
   131a4:	mov	x14, #0x100000000           	// #4294967296
   131a8:	mul	x19, x13, x6
   131ac:	add	x15, x15, x17, lsr #32
   131b0:	mul	x12, x12, x5
   131b4:	and	x17, x17, #0xffffffff
   131b8:	mul	x18, x5, x18
   131bc:	add	x4, x19, x14
   131c0:	madd	x7, x6, x5, x21
   131c4:	csel	x19, x4, x19, hi  // hi = pmore
   131c8:	madd	x5, x2, x5, x20
   131cc:	cmp	x1, x15
   131d0:	mul	x13, x13, x2
   131d4:	add	x17, x17, x15, lsl #32
   131d8:	mul	x6, x6, x22
   131dc:	add	x7, x7, x12, lsr #32
   131e0:	add	x5, x5, x18, lsr #32
   131e4:	add	x4, x13, x14
   131e8:	mul	x2, x2, x22
   131ec:	csel	x13, x4, x13, hi  // hi = pmore
   131f0:	and	x1, x18, #0xffffffff
   131f4:	cmp	x21, x7
   131f8:	add	x4, x6, x14
   131fc:	add	x30, x30, x16, lsl #32
   13200:	csel	x6, x4, x6, hi  // hi = pmore
   13204:	add	x13, x13, x15, lsr #32
   13208:	cmp	x20, x5
   1320c:	add	x1, x1, x5, lsl #32
   13210:	add	x16, x17, x16, lsr #32
   13214:	add	x14, x2, x14
   13218:	csel	x2, x14, x2, hi  // hi = pmore
   1321c:	add	x16, x19, x16
   13220:	adds	x1, x1, x13
   13224:	and	x12, x12, #0xffffffff
   13228:	cset	x13, cs  // cs = hs, nlast
   1322c:	cmp	x16, x17
   13230:	cset	x4, cc  // cc = lo, ul, last
   13234:	add	x12, x12, x7, lsl #32
   13238:	adds	x1, x1, x4
   1323c:	lsr	x5, x5, #32
   13240:	cset	x4, cs  // cs = hs, nlast
   13244:	cmp	x13, #0x0
   13248:	ccmp	x4, #0x0, #0x0, eq  // eq = none
   1324c:	add	x7, x6, x7, lsr #32
   13250:	cinc	x5, x5, ne  // ne = any
   13254:	adds	x6, x16, x12
   13258:	cset	x4, cs  // cs = hs, nlast
   1325c:	adds	x1, x1, x7
   13260:	cset	x7, cs  // cs = hs, nlast
   13264:	adds	x4, x1, x4
   13268:	cset	x1, cs  // cs = hs, nlast
   1326c:	cmp	x7, #0x0
   13270:	orr	x30, x30, x6, lsl #13
   13274:	ccmp	x1, #0x0, #0x0, eq  // eq = none
   13278:	cinc	x1, x2, ne  // ne = any
   1327c:	cmp	x30, #0x0
   13280:	add	x1, x1, x5
   13284:	cset	x2, ne  // ne = any
   13288:	orr	x6, x2, x6, lsr #51
   1328c:	orr	x6, x6, x4, lsl #13
   13290:	extr	x4, x1, x4, #51
   13294:	tbz	x1, #39, 135a8 <mpc_ui_ui_sub@@Base+0x11fc>
   13298:	ldp	x19, x20, [sp, #16]
   1329c:	and	x1, x6, #0x1
   132a0:	ldp	x21, x22, [sp, #32]
   132a4:	orr	x6, x1, x6, lsr #1
   132a8:	orr	x6, x6, x4, lsl #63
   132ac:	lsr	x4, x4, #1
   132b0:	mov	x1, #0x3fff                	// #16383
   132b4:	add	x2, x3, x1
   132b8:	cmp	x2, #0x0
   132bc:	b.le	13454 <mpc_ui_ui_sub@@Base+0x10a8>
   132c0:	tst	x6, #0x7
   132c4:	b.eq	132e4 <mpc_ui_ui_sub@@Base+0xf38>  // b.none
   132c8:	and	x1, x11, #0xc00000
   132cc:	orr	w0, w0, #0x10
   132d0:	cmp	x1, #0x400, lsl #12
   132d4:	b.eq	1369c <mpc_ui_ui_sub@@Base+0x12f0>  // b.none
   132d8:	cmp	x1, #0x800, lsl #12
   132dc:	b.eq	13644 <mpc_ui_ui_sub@@Base+0x1298>  // b.none
   132e0:	cbz	x1, 1362c <mpc_ui_ui_sub@@Base+0x1280>
   132e4:	tbz	x4, #52, 132f0 <mpc_ui_ui_sub@@Base+0xf44>
   132e8:	and	x4, x4, #0xffefffffffffffff
   132ec:	add	x2, x3, #0x4, lsl #12
   132f0:	mov	x1, #0x7ffe                	// #32766
   132f4:	cmp	x2, x1
   132f8:	b.gt	1357c <mpc_ui_ui_sub@@Base+0x11d0>
   132fc:	and	w1, w2, #0x7fff
   13300:	extr	x5, x4, x6, #3
   13304:	ubfx	x4, x4, #3, #48
   13308:	b	130c8 <mpc_ui_ui_sub@@Base+0xd1c>
   1330c:	mov	w0, w12
   13310:	mov	w10, #0x0                   	// #0
   13314:	mov	x4, #0xffffffffffff        	// #281474976710655
   13318:	mov	x5, #0xffffffffffffffff    	// #-1
   1331c:	mov	w1, #0x7fff                	// #32767
   13320:	b	130c8 <mpc_ui_ui_sub@@Base+0xd1c>
   13324:	mov	w15, w10
   13328:	mov	x13, x8
   1332c:	b	13028 <mpc_ui_ui_sub@@Base+0xc7c>
   13330:	orr	x5, x7, x1
   13334:	cbz	x5, 1343c <mpc_ui_ui_sub@@Base+0x1090>
   13338:	cbz	x7, 13558 <mpc_ui_ui_sub@@Base+0x11ac>
   1333c:	clz	x0, x7
   13340:	sub	x4, x0, #0xf
   13344:	add	w5, w4, #0x3
   13348:	mov	w3, #0x3d                  	// #61
   1334c:	sub	w3, w3, w4
   13350:	lsl	x4, x7, x5
   13354:	lsr	x3, x1, x3
   13358:	orr	x7, x3, x4
   1335c:	lsl	x5, x1, x5
   13360:	lsr	x8, x2, #63
   13364:	mov	x3, #0xffffffffffffc011    	// #-16367
   13368:	ubfx	x4, x2, #0, #48
   1336c:	sub	x3, x3, x0
   13370:	and	w15, w8, #0xff
   13374:	mov	x13, x8
   13378:	ubfx	x9, x2, #48, #15
   1337c:	mov	x1, #0x0                   	// #0
   13380:	mov	x16, #0x0                   	// #0
   13384:	mov	w0, #0x0                   	// #0
   13388:	cbnz	w9, 12fd4 <mpc_ui_ui_sub@@Base+0xc28>
   1338c:	nop
   13390:	orr	x2, x4, x6
   13394:	cbz	x2, 13404 <mpc_ui_ui_sub@@Base+0x1058>
   13398:	cbz	x4, 13534 <mpc_ui_ui_sub@@Base+0x1188>
   1339c:	clz	x9, x4
   133a0:	sub	x2, x9, #0xf
   133a4:	add	w10, w2, #0x3
   133a8:	mov	w8, #0x3d                  	// #61
   133ac:	sub	w8, w8, w2
   133b0:	lsl	x2, x4, x10
   133b4:	lsr	x8, x6, x8
   133b8:	orr	x4, x8, x2
   133bc:	lsl	x6, x6, x10
   133c0:	sub	x9, x3, x9
   133c4:	mov	x10, #0xffffffffffffc011    	// #-16367
   133c8:	mov	x2, #0x0                   	// #0
   133cc:	add	x9, x9, x10
   133d0:	b	13000 <mpc_ui_ui_sub@@Base+0xc54>
   133d4:	orr	x5, x7, x1
   133d8:	cbnz	x5, 1341c <mpc_ui_ui_sub@@Base+0x1070>
   133dc:	mov	x7, #0x0                   	// #0
   133e0:	mov	x1, #0x8                   	// #8
   133e4:	mov	x3, #0x7fff                	// #32767
   133e8:	mov	x16, #0x2                   	// #2
   133ec:	mov	w0, #0x0                   	// #0
   133f0:	b	12fbc <mpc_ui_ui_sub@@Base+0xc10>
   133f4:	mov	w1, #0x7fff                	// #32767
   133f8:	mov	x4, #0x0                   	// #0
   133fc:	mov	x5, #0x0                   	// #0
   13400:	b	130c8 <mpc_ui_ui_sub@@Base+0xd1c>
   13404:	orr	x1, x1, #0x1
   13408:	mov	x9, x3
   1340c:	mov	x4, #0x0                   	// #0
   13410:	mov	x6, #0x0                   	// #0
   13414:	mov	x2, #0x1                   	// #1
   13418:	b	13000 <mpc_ui_ui_sub@@Base+0xc54>
   1341c:	lsr	x0, x7, #47
   13420:	mov	x5, x1
   13424:	eor	x0, x0, #0x1
   13428:	mov	x1, #0xc                   	// #12
   1342c:	and	w0, w0, #0x1
   13430:	mov	x3, #0x7fff                	// #32767
   13434:	mov	x16, #0x3                   	// #3
   13438:	b	12fbc <mpc_ui_ui_sub@@Base+0xc10>
   1343c:	mov	x7, #0x0                   	// #0
   13440:	mov	x1, #0x4                   	// #4
   13444:	mov	x3, #0x0                   	// #0
   13448:	mov	x16, #0x1                   	// #1
   1344c:	mov	w0, #0x0                   	// #0
   13450:	b	12fbc <mpc_ui_ui_sub@@Base+0xc10>
   13454:	mov	x1, #0x1                   	// #1
   13458:	sub	x2, x1, x2
   1345c:	cmp	x2, #0x74
   13460:	b.gt	134d8 <mpc_ui_ui_sub@@Base+0x112c>
   13464:	cmp	x2, #0x3f
   13468:	b.le	135b8 <mpc_ui_ui_sub@@Base+0x120c>
   1346c:	mov	w1, #0x80                  	// #128
   13470:	sub	w1, w1, w2
   13474:	cmp	x2, #0x40
   13478:	sub	w2, w2, #0x40
   1347c:	lsl	x1, x4, x1
   13480:	orr	x1, x6, x1
   13484:	csel	x6, x1, x6, ne  // ne = any
   13488:	lsr	x2, x4, x2
   1348c:	cmp	x6, #0x0
   13490:	cset	x5, ne  // ne = any
   13494:	orr	x5, x5, x2
   13498:	ands	x2, x5, #0x7
   1349c:	b.eq	135ec <mpc_ui_ui_sub@@Base+0x1240>  // b.none
   134a0:	mov	x2, #0x0                   	// #0
   134a4:	and	x11, x11, #0xc00000
   134a8:	orr	w0, w0, #0x10
   134ac:	cmp	x11, #0x400, lsl #12
   134b0:	b.eq	136fc <mpc_ui_ui_sub@@Base+0x1350>  // b.none
   134b4:	cmp	x11, #0x800, lsl #12
   134b8:	b.eq	13710 <mpc_ui_ui_sub@@Base+0x1364>  // b.none
   134bc:	cbz	x11, 13654 <mpc_ui_ui_sub@@Base+0x12a8>
   134c0:	tbnz	x2, #51, 1366c <mpc_ui_ui_sub@@Base+0x12c0>
   134c4:	ubfx	x4, x2, #3, #48
   134c8:	extr	x5, x2, x5, #3
   134cc:	orr	w0, w0, #0x8
   134d0:	mov	w1, #0x0                   	// #0
   134d4:	b	13508 <mpc_ui_ui_sub@@Base+0x115c>
   134d8:	orr	x5, x6, x4
   134dc:	cbz	x5, 134fc <mpc_ui_ui_sub@@Base+0x1150>
   134e0:	and	x11, x11, #0xc00000
   134e4:	orr	w0, w0, #0x10
   134e8:	cmp	x11, #0x400, lsl #12
   134ec:	sub	x5, x1, x8
   134f0:	b.eq	134fc <mpc_ui_ui_sub@@Base+0x1150>  // b.none
   134f4:	cmp	x11, #0x800, lsl #12
   134f8:	csel	x5, x8, xzr, eq  // eq = none
   134fc:	orr	w0, w0, #0x8
   13500:	mov	w1, #0x0                   	// #0
   13504:	mov	x4, #0x0                   	// #0
   13508:	mov	x3, #0x0                   	// #0
   1350c:	fmov	d0, x5
   13510:	bfxil	x3, x4, #0, #48
   13514:	bfi	x3, x1, #48, #15
   13518:	bfi	x3, x10, #63, #1
   1351c:	fmov	v0.d[1], x3
   13520:	str	q0, [sp, #48]
   13524:	bl	13740 <mpc_ui_ui_sub@@Base+0x1394>
   13528:	ldr	q0, [sp, #48]
   1352c:	ldp	x29, x30, [sp], #80
   13530:	ret
   13534:	clz	x9, x6
   13538:	add	x2, x9, #0x31
   1353c:	add	x9, x9, #0x40
   13540:	cmp	x2, #0x3c
   13544:	b.le	133a4 <mpc_ui_ui_sub@@Base+0xff8>
   13548:	sub	w2, w2, #0x3d
   1354c:	lsl	x4, x6, x2
   13550:	mov	x6, #0x0                   	// #0
   13554:	b	133c0 <mpc_ui_ui_sub@@Base+0x1014>
   13558:	clz	x3, x1
   1355c:	add	x4, x3, #0x31
   13560:	add	x0, x3, #0x40
   13564:	cmp	x4, #0x3c
   13568:	b.le	13344 <mpc_ui_ui_sub@@Base+0xf98>
   1356c:	sub	w4, w4, #0x3d
   13570:	mov	x5, #0x0                   	// #0
   13574:	lsl	x7, x1, x4
   13578:	b	13360 <mpc_ui_ui_sub@@Base+0xfb4>
   1357c:	and	x5, x11, #0xc00000
   13580:	cmp	x5, #0x400, lsl #12
   13584:	b.eq	13680 <mpc_ui_ui_sub@@Base+0x12d4>  // b.none
   13588:	cmp	x5, #0x800, lsl #12
   1358c:	b.eq	13610 <mpc_ui_ui_sub@@Base+0x1264>  // b.none
   13590:	cbz	x5, 13604 <mpc_ui_ui_sub@@Base+0x1258>
   13594:	mov	x4, #0xffffffffffff        	// #281474976710655
   13598:	mov	x5, #0xffffffffffffffff    	// #-1
   1359c:	mov	w2, #0x14                  	// #20
   135a0:	orr	w0, w0, w2
   135a4:	b	13508 <mpc_ui_ui_sub@@Base+0x115c>
   135a8:	mov	x3, x9
   135ac:	ldp	x19, x20, [sp, #16]
   135b0:	ldp	x21, x22, [sp, #32]
   135b4:	b	132b0 <mpc_ui_ui_sub@@Base+0xf04>
   135b8:	mov	w1, #0x40                  	// #64
   135bc:	sub	w1, w1, w2
   135c0:	lsr	x3, x6, x2
   135c4:	lsl	x6, x6, x1
   135c8:	cmp	x6, #0x0
   135cc:	lsl	x5, x4, x1
   135d0:	cset	x1, ne  // ne = any
   135d4:	orr	x5, x5, x3
   135d8:	lsr	x2, x4, x2
   135dc:	orr	x5, x5, x1
   135e0:	tst	x5, #0x7
   135e4:	b.ne	134a4 <mpc_ui_ui_sub@@Base+0x10f8>  // b.any
   135e8:	tbnz	x2, #51, 1371c <mpc_ui_ui_sub@@Base+0x1370>
   135ec:	ubfx	x4, x2, #3, #48
   135f0:	extr	x5, x2, x5, #3
   135f4:	mov	w1, #0x0                   	// #0
   135f8:	tbz	w11, #11, 130c8 <mpc_ui_ui_sub@@Base+0xd1c>
   135fc:	orr	w0, w0, #0x8
   13600:	b	13508 <mpc_ui_ui_sub@@Base+0x115c>
   13604:	mov	w1, #0x7fff                	// #32767
   13608:	mov	x4, #0x0                   	// #0
   1360c:	b	1359c <mpc_ui_ui_sub@@Base+0x11f0>
   13610:	cmp	x8, #0x0
   13614:	mov	w2, #0x7fff                	// #32767
   13618:	mov	x4, #0xffffffffffff        	// #281474976710655
   1361c:	csel	w1, w1, w2, eq  // eq = none
   13620:	csel	x4, x4, xzr, eq  // eq = none
   13624:	csetm	x5, eq  // eq = none
   13628:	b	1359c <mpc_ui_ui_sub@@Base+0x11f0>
   1362c:	and	x1, x6, #0xf
   13630:	cmp	x1, #0x4
   13634:	b.eq	132e4 <mpc_ui_ui_sub@@Base+0xf38>  // b.none
   13638:	adds	x6, x6, #0x4
   1363c:	cinc	x4, x4, cs  // cs = hs, nlast
   13640:	b	132e4 <mpc_ui_ui_sub@@Base+0xf38>
   13644:	cbz	x8, 132e4 <mpc_ui_ui_sub@@Base+0xf38>
   13648:	adds	x6, x6, #0x8
   1364c:	cinc	x4, x4, cs  // cs = hs, nlast
   13650:	b	132e4 <mpc_ui_ui_sub@@Base+0xf38>
   13654:	and	x1, x5, #0xf
   13658:	cmp	x1, #0x4
   1365c:	b.eq	13668 <mpc_ui_ui_sub@@Base+0x12bc>  // b.none
   13660:	adds	x5, x5, #0x4
   13664:	cinc	x2, x2, cs  // cs = hs, nlast
   13668:	tbz	x2, #51, 134c4 <mpc_ui_ui_sub@@Base+0x1118>
   1366c:	orr	w0, w0, #0x8
   13670:	mov	w1, #0x1                   	// #1
   13674:	mov	x4, #0x0                   	// #0
   13678:	mov	x5, #0x0                   	// #0
   1367c:	b	13508 <mpc_ui_ui_sub@@Base+0x115c>
   13680:	cmp	x8, #0x0
   13684:	mov	w2, #0x7fff                	// #32767
   13688:	mov	x4, #0xffffffffffff        	// #281474976710655
   1368c:	csel	w1, w1, w2, ne  // ne = any
   13690:	csel	x4, x4, xzr, ne  // ne = any
   13694:	csetm	x5, ne  // ne = any
   13698:	b	1359c <mpc_ui_ui_sub@@Base+0x11f0>
   1369c:	cbnz	x8, 132e4 <mpc_ui_ui_sub@@Base+0xf38>
   136a0:	b	13648 <mpc_ui_ui_sub@@Base+0x129c>
   136a4:	mov	x4, #0x2                   	// #2
   136a8:	cmp	x1, #0xf
   136ac:	b.ne	136d0 <mpc_ui_ui_sub@@Base+0x1324>  // b.any
   136b0:	tbz	x7, #47, 136e8 <mpc_ui_ui_sub@@Base+0x133c>
   136b4:	tbnz	x2, #47, 136e8 <mpc_ui_ui_sub@@Base+0x133c>
   136b8:	orr	x4, x2, #0x800000000000
   136bc:	mov	w10, w15
   136c0:	and	x4, x4, #0xffffffffffff
   136c4:	mov	x5, x6
   136c8:	mov	w1, #0x7fff                	// #32767
   136cc:	b	130c8 <mpc_ui_ui_sub@@Base+0xd1c>
   136d0:	cmp	x1, #0xb
   136d4:	b.ne	13020 <mpc_ui_ui_sub@@Base+0xc74>  // b.any
   136d8:	mov	x7, x2
   136dc:	mov	x5, x6
   136e0:	mov	x16, x4
   136e4:	b	13028 <mpc_ui_ui_sub@@Base+0xc7c>
   136e8:	orr	x4, x7, #0x800000000000
   136ec:	mov	w10, w12
   136f0:	and	x4, x4, #0xffffffffffff
   136f4:	mov	w1, #0x7fff                	// #32767
   136f8:	b	130c8 <mpc_ui_ui_sub@@Base+0xd1c>
   136fc:	cbnz	x8, 13668 <mpc_ui_ui_sub@@Base+0x12bc>
   13700:	adds	x5, x5, #0x8
   13704:	cinc	x2, x2, cs  // cs = hs, nlast
   13708:	tbnz	x2, #51, 1366c <mpc_ui_ui_sub@@Base+0x12c0>
   1370c:	b	134c4 <mpc_ui_ui_sub@@Base+0x1118>
   13710:	cbnz	x8, 13700 <mpc_ui_ui_sub@@Base+0x1354>
   13714:	tbnz	x2, #51, 1366c <mpc_ui_ui_sub@@Base+0x12c0>
   13718:	b	134c4 <mpc_ui_ui_sub@@Base+0x1118>
   1371c:	orr	w0, w0, #0x10
   13720:	b	1366c <mpc_ui_ui_sub@@Base+0x12c0>
   13724:	mov	x2, x4
   13728:	mov	x4, #0x3                   	// #3
   1372c:	b	136a8 <mpc_ui_ui_sub@@Base+0x12fc>
   13730:	mov	w10, w15
   13734:	mov	x8, x13
   13738:	b	13044 <mpc_ui_ui_sub@@Base+0xc98>
   1373c:	nop
   13740:	tbz	w0, #0, 13750 <mpc_ui_ui_sub@@Base+0x13a4>
   13744:	movi	v1.2s, #0x0
   13748:	fdiv	s0, s1, s1
   1374c:	mrs	x1, fpsr
   13750:	tbz	w0, #1, 13764 <mpc_ui_ui_sub@@Base+0x13b8>
   13754:	fmov	s1, #1.000000000000000000e+00
   13758:	movi	v2.2s, #0x0
   1375c:	fdiv	s0, s1, s2
   13760:	mrs	x1, fpsr
   13764:	tbz	w0, #2, 13784 <mpc_ui_ui_sub@@Base+0x13d8>
   13768:	mov	w2, #0xc5ae                	// #50606
   1376c:	mov	w1, #0x7f7fffff            	// #2139095039
   13770:	movk	w2, #0x749d, lsl #16
   13774:	fmov	s1, w1
   13778:	fmov	s2, w2
   1377c:	fadd	s0, s1, s2
   13780:	mrs	x1, fpsr
   13784:	tbz	w0, #3, 13794 <mpc_ui_ui_sub@@Base+0x13e8>
   13788:	movi	v1.2s, #0x80, lsl #16
   1378c:	fmul	s0, s1, s1
   13790:	mrs	x1, fpsr
   13794:	tbz	w0, #4, 137ac <mpc_ui_ui_sub@@Base+0x1400>
   13798:	mov	w0, #0x7f7fffff            	// #2139095039
   1379c:	fmov	s2, #1.000000000000000000e+00
   137a0:	fmov	s1, w0
   137a4:	fsub	s0, s1, s2
   137a8:	mrs	x0, fpsr
   137ac:	ret

Disassembly of section .fini:

00000000000137b0 <.fini>:
   137b0:	stp	x29, x30, [sp, #-16]!
   137b4:	mov	x29, sp
   137b8:	ldp	x29, x30, [sp], #16
   137bc:	ret
