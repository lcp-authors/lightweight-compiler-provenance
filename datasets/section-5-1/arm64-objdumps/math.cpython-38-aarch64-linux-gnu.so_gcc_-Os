
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//math.cpython-38-aarch64-linux-gnu.so_gcc_-Os:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000002f88 <.init>:
    2f88:	stp	x29, x30, [sp, #-16]!
    2f8c:	mov	x29, sp
    2f90:	bl	3470 <PyNumber_FloorDivide@plt+0x10>
    2f94:	ldp	x29, x30, [sp], #16
    2f98:	ret

Disassembly of section .plt:

0000000000002fa0 <memcpy@plt-0x20>:
    2fa0:	stp	x16, x30, [sp, #-16]!
    2fa4:	adrp	x16, 19000 <_Py_log1p@@Base+0x124a4>
    2fa8:	ldr	x17, [x16, #4088]
    2fac:	add	x16, x16, #0xff8
    2fb0:	br	x17
    2fb4:	nop
    2fb8:	nop
    2fbc:	nop

0000000000002fc0 <memcpy@plt>:
    2fc0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    2fc4:	ldr	x17, [x16]
    2fc8:	add	x16, x16, #0x0
    2fcc:	br	x17

0000000000002fd0 <atan2@plt>:
    2fd0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    2fd4:	ldr	x17, [x16, #8]
    2fd8:	add	x16, x16, #0x8
    2fdc:	br	x17

0000000000002fe0 <PyLong_AsLongLongAndOverflow@plt>:
    2fe0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    2fe4:	ldr	x17, [x16, #16]
    2fe8:	add	x16, x16, #0x10
    2fec:	br	x17

0000000000002ff0 <log2@plt>:
    2ff0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    2ff4:	ldr	x17, [x16, #24]
    2ff8:	add	x16, x16, #0x18
    2ffc:	br	x17

0000000000003000 <PyLong_FromDouble@plt>:
    3000:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3004:	ldr	x17, [x16, #32]
    3008:	add	x16, x16, #0x20
    300c:	br	x17

0000000000003010 <PyMem_Free@plt>:
    3010:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3014:	ldr	x17, [x16, #40]
    3018:	add	x16, x16, #0x28
    301c:	br	x17

0000000000003020 <ldexp@plt>:
    3020:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3024:	ldr	x17, [x16, #48]
    3028:	add	x16, x16, #0x30
    302c:	br	x17

0000000000003030 <PyErr_SetFromErrno@plt>:
    3030:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3034:	ldr	x17, [x16, #56]
    3038:	add	x16, x16, #0x38
    303c:	br	x17

0000000000003040 <PyLong_FromUnsignedLongLong@plt>:
    3040:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3044:	ldr	x17, [x16, #64]
    3048:	add	x16, x16, #0x40
    304c:	br	x17

0000000000003050 <PyLong_AsUnsignedLongLong@plt>:
    3050:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3054:	ldr	x17, [x16, #72]
    3058:	add	x16, x16, #0x48
    305c:	br	x17

0000000000003060 <PyNumber_Add@plt>:
    3060:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3064:	ldr	x17, [x16, #80]
    3068:	add	x16, x16, #0x50
    306c:	br	x17

0000000000003070 <__cxa_finalize@plt>:
    3070:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3074:	ldr	x17, [x16, #88]
    3078:	add	x16, x16, #0x58
    307c:	br	x17

0000000000003080 <_Py_Dealloc@plt>:
    3080:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3084:	ldr	x17, [x16, #96]
    3088:	add	x16, x16, #0x60
    308c:	br	x17

0000000000003090 <pow@plt>:
    3090:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3094:	ldr	x17, [x16, #104]
    3098:	add	x16, x16, #0x68
    309c:	br	x17

00000000000030a0 <PyErr_NoMemory@plt>:
    30a0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    30a4:	ldr	x17, [x16, #112]
    30a8:	add	x16, x16, #0x70
    30ac:	br	x17

00000000000030b0 <PyIter_Next@plt>:
    30b0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    30b4:	ldr	x17, [x16, #120]
    30b8:	add	x16, x16, #0x78
    30bc:	br	x17

00000000000030c0 <_PyLong_Sign@plt>:
    30c0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    30c4:	ldr	x17, [x16, #128]
    30c8:	add	x16, x16, #0x80
    30cc:	br	x17

00000000000030d0 <PyNumber_Multiply@plt>:
    30d0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    30d4:	ldr	x17, [x16, #136]
    30d8:	add	x16, x16, #0x88
    30dc:	br	x17

00000000000030e0 <log10@plt>:
    30e0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    30e4:	ldr	x17, [x16, #144]
    30e8:	add	x16, x16, #0x90
    30ec:	br	x17

00000000000030f0 <_PyLong_NumBits@plt>:
    30f0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    30f4:	ldr	x17, [x16, #152]
    30f8:	add	x16, x16, #0x98
    30fc:	br	x17

0000000000003100 <_PyLong_Rshift@plt>:
    3100:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3104:	ldr	x17, [x16, #160]
    3108:	add	x16, x16, #0xa0
    310c:	br	x17

0000000000003110 <sqrt@plt>:
    3110:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3114:	ldr	x17, [x16, #168]
    3118:	add	x16, x16, #0xa8
    311c:	br	x17

0000000000003120 <_PyArg_UnpackKeywords@plt>:
    3120:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3124:	ldr	x17, [x16, #176]
    3128:	add	x16, x16, #0xb0
    312c:	br	x17

0000000000003130 <PyErr_SetString@plt>:
    3130:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3134:	ldr	x17, [x16, #184]
    3138:	add	x16, x16, #0xb8
    313c:	br	x17

0000000000003140 <PyObject_Malloc@plt>:
    3140:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3144:	ldr	x17, [x16, #192]
    3148:	add	x16, x16, #0xc0
    314c:	br	x17

0000000000003150 <_PyLong_Frexp@plt>:
    3150:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3154:	ldr	x17, [x16, #200]
    3158:	add	x16, x16, #0xc8
    315c:	br	x17

0000000000003160 <_PyObject_LookupSpecial@plt>:
    3160:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3164:	ldr	x17, [x16, #208]
    3168:	add	x16, x16, #0xd0
    316c:	br	x17

0000000000003170 <_PyLong_Copy@plt>:
    3170:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3174:	ldr	x17, [x16, #216]
    3178:	add	x16, x16, #0xd8
    317c:	br	x17

0000000000003180 <PyMem_Realloc@plt>:
    3180:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3184:	ldr	x17, [x16, #224]
    3188:	add	x16, x16, #0xe0
    318c:	br	x17

0000000000003190 <PyErr_ExceptionMatches@plt>:
    3190:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3194:	ldr	x17, [x16, #232]
    3198:	add	x16, x16, #0xe8
    319c:	br	x17

00000000000031a0 <log@plt>:
    31a0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    31a4:	ldr	x17, [x16, #240]
    31a8:	add	x16, x16, #0xf0
    31ac:	br	x17

00000000000031b0 <PyObject_Free@plt>:
    31b0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    31b4:	ldr	x17, [x16, #248]
    31b8:	add	x16, x16, #0xf8
    31bc:	br	x17

00000000000031c0 <PyFloat_FromDouble@plt>:
    31c0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    31c4:	ldr	x17, [x16, #256]
    31c8:	add	x16, x16, #0x100
    31cc:	br	x17

00000000000031d0 <PyType_Ready@plt>:
    31d0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    31d4:	ldr	x17, [x16, #264]
    31d8:	add	x16, x16, #0x108
    31dc:	br	x17

00000000000031e0 <PyLong_FromLong@plt>:
    31e0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    31e4:	ldr	x17, [x16, #272]
    31e8:	add	x16, x16, #0x110
    31ec:	br	x17

00000000000031f0 <PyObject_RichCompareBool@plt>:
    31f0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    31f4:	ldr	x17, [x16, #280]
    31f8:	add	x16, x16, #0x118
    31fc:	br	x17

0000000000003200 <_PyLong_GCD@plt>:
    3200:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3204:	ldr	x17, [x16, #288]
    3208:	add	x16, x16, #0x120
    320c:	br	x17

0000000000003210 <PyErr_Clear@plt>:
    3210:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3214:	ldr	x17, [x16, #296]
    3218:	add	x16, x16, #0x128
    321c:	br	x17

0000000000003220 <PyBool_FromLong@plt>:
    3220:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3224:	ldr	x17, [x16, #304]
    3228:	add	x16, x16, #0x130
    322c:	br	x17

0000000000003230 <sin@plt>:
    3230:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3234:	ldr	x17, [x16, #312]
    3238:	add	x16, x16, #0x138
    323c:	br	x17

0000000000003240 <_Py_dg_stdnan@plt>:
    3240:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3244:	ldr	x17, [x16, #320]
    3248:	add	x16, x16, #0x140
    324c:	br	x17

0000000000003250 <log1p@plt>:
    3250:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3254:	ldr	x17, [x16, #328]
    3258:	add	x16, x16, #0x148
    325c:	br	x17

0000000000003260 <__gmon_start__@plt>:
    3260:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3264:	ldr	x17, [x16, #336]
    3268:	add	x16, x16, #0x150
    326c:	br	x17

0000000000003270 <erf@plt>:
    3270:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3274:	ldr	x17, [x16, #344]
    3278:	add	x16, x16, #0x158
    327c:	br	x17

0000000000003280 <_PyArg_CheckPositional@plt>:
    3280:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3284:	ldr	x17, [x16, #352]
    3288:	add	x16, x16, #0x160
    328c:	br	x17

0000000000003290 <PyLong_AsLongAndOverflow@plt>:
    3290:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3294:	ldr	x17, [x16, #360]
    3298:	add	x16, x16, #0x168
    329c:	br	x17

00000000000032a0 <Py_BuildValue@plt>:
    32a0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    32a4:	ldr	x17, [x16, #368]
    32a8:	add	x16, x16, #0x170
    32ac:	br	x17

00000000000032b0 <PyErr_Occurred@plt>:
    32b0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    32b4:	ldr	x17, [x16, #376]
    32b8:	add	x16, x16, #0x178
    32bc:	br	x17

00000000000032c0 <PyModule_Create2@plt>:
    32c0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    32c4:	ldr	x17, [x16, #384]
    32c8:	add	x16, x16, #0x180
    32cc:	br	x17

00000000000032d0 <_Py_CheckFunctionResult@plt>:
    32d0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    32d4:	ldr	x17, [x16, #392]
    32d8:	add	x16, x16, #0x188
    32dc:	br	x17

00000000000032e0 <PyFloat_AsDouble@plt>:
    32e0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    32e4:	ldr	x17, [x16, #400]
    32e8:	add	x16, x16, #0x190
    32ec:	br	x17

00000000000032f0 <PyArg_ParseTuple@plt>:
    32f0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    32f4:	ldr	x17, [x16, #408]
    32f8:	add	x16, x16, #0x198
    32fc:	br	x17

0000000000003300 <Py_FatalError@plt>:
    3300:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3304:	ldr	x17, [x16, #416]
    3308:	add	x16, x16, #0x1a0
    330c:	br	x17

0000000000003310 <erfc@plt>:
    3310:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3314:	ldr	x17, [x16, #424]
    3318:	add	x16, x16, #0x1a8
    331c:	br	x17

0000000000003320 <modf@plt>:
    3320:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3324:	ldr	x17, [x16, #432]
    3328:	add	x16, x16, #0x1b0
    332c:	br	x17

0000000000003330 <PyLong_AsDouble@plt>:
    3330:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3334:	ldr	x17, [x16, #440]
    3338:	add	x16, x16, #0x1b8
    333c:	br	x17

0000000000003340 <frexp@plt>:
    3340:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3344:	ldr	x17, [x16, #448]
    3348:	add	x16, x16, #0x1c0
    334c:	br	x17

0000000000003350 <PyLong_FromUnsignedLong@plt>:
    3350:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3354:	ldr	x17, [x16, #456]
    3358:	add	x16, x16, #0x1c8
    335c:	br	x17

0000000000003360 <_Py_dg_infinity@plt>:
    3360:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3364:	ldr	x17, [x16, #464]
    3368:	add	x16, x16, #0x1d0
    336c:	br	x17

0000000000003370 <PyObject_GetIter@plt>:
    3370:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3374:	ldr	x17, [x16, #472]
    3378:	add	x16, x16, #0x1d8
    337c:	br	x17

0000000000003380 <PyModule_AddObject@plt>:
    3380:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3384:	ldr	x17, [x16, #480]
    3388:	add	x16, x16, #0x1e0
    338c:	br	x17

0000000000003390 <PySequence_Tuple@plt>:
    3390:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3394:	ldr	x17, [x16, #488]
    3398:	add	x16, x16, #0x1e8
    339c:	br	x17

00000000000033a0 <fmod@plt>:
    33a0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    33a4:	ldr	x17, [x16, #496]
    33a8:	add	x16, x16, #0x1f0
    33ac:	br	x17

00000000000033b0 <PyType_IsSubtype@plt>:
    33b0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    33b4:	ldr	x17, [x16, #504]
    33b8:	add	x16, x16, #0x1f8
    33bc:	br	x17

00000000000033c0 <PyErr_Format@plt>:
    33c0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    33c4:	ldr	x17, [x16, #512]
    33c8:	add	x16, x16, #0x200
    33cc:	br	x17

00000000000033d0 <_PyObject_MakeTpCall@plt>:
    33d0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    33d4:	ldr	x17, [x16, #520]
    33d8:	add	x16, x16, #0x208
    33dc:	br	x17

00000000000033e0 <PyNumber_Index@plt>:
    33e0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    33e4:	ldr	x17, [x16, #528]
    33e8:	add	x16, x16, #0x210
    33ec:	br	x17

00000000000033f0 <__errno_location@plt>:
    33f0:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    33f4:	ldr	x17, [x16, #536]
    33f8:	add	x16, x16, #0x218
    33fc:	br	x17

0000000000003400 <cos@plt>:
    3400:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3404:	ldr	x17, [x16, #544]
    3408:	add	x16, x16, #0x220
    340c:	br	x17

0000000000003410 <PyMem_Malloc@plt>:
    3410:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3414:	ldr	x17, [x16, #552]
    3418:	add	x16, x16, #0x228
    341c:	br	x17

0000000000003420 <PyNumber_Subtract@plt>:
    3420:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3424:	ldr	x17, [x16, #560]
    3428:	add	x16, x16, #0x230
    342c:	br	x17

0000000000003430 <PyNumber_TrueDivide@plt>:
    3430:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3434:	ldr	x17, [x16, #568]
    3438:	add	x16, x16, #0x238
    343c:	br	x17

0000000000003440 <exp@plt>:
    3440:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3444:	ldr	x17, [x16, #576]
    3448:	add	x16, x16, #0x240
    344c:	br	x17

0000000000003450 <_PyLong_Lshift@plt>:
    3450:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3454:	ldr	x17, [x16, #584]
    3458:	add	x16, x16, #0x248
    345c:	br	x17

0000000000003460 <PyNumber_FloorDivide@plt>:
    3460:	adrp	x16, 1a000 <memcpy@GLIBC_2.17>
    3464:	ldr	x17, [x16, #592]
    3468:	add	x16, x16, #0x250
    346c:	br	x17

Disassembly of section .text:

0000000000003470 <PyInit_math@@Base-0x3614>:
    3470:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    3474:	ldr	x0, [x0, #3928]
    3478:	cbz	x0, 3480 <PyNumber_FloorDivide@plt+0x20>
    347c:	b	3260 <__gmon_start__@plt>
    3480:	ret
    3484:	adrp	x0, 1a000 <_Py_log1p@@Base+0x134a4>
    3488:	add	x0, x0, #0x9f0
    348c:	adrp	x1, 1a000 <_Py_log1p@@Base+0x134a4>
    3490:	add	x1, x1, #0x9f0
    3494:	cmp	x1, x0
    3498:	b.eq	34b0 <PyNumber_FloorDivide@plt+0x50>  // b.none
    349c:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    34a0:	ldr	x1, [x1, #3808]
    34a4:	cbz	x1, 34b0 <PyNumber_FloorDivide@plt+0x50>
    34a8:	mov	x16, x1
    34ac:	br	x16
    34b0:	ret
    34b4:	adrp	x0, 1a000 <_Py_log1p@@Base+0x134a4>
    34b8:	add	x0, x0, #0x9f0
    34bc:	adrp	x1, 1a000 <_Py_log1p@@Base+0x134a4>
    34c0:	add	x1, x1, #0x9f0
    34c4:	sub	x1, x1, x0
    34c8:	mov	x2, #0x2                   	// #2
    34cc:	asr	x1, x1, #3
    34d0:	sdiv	x1, x1, x2
    34d4:	cbz	x1, 34ec <PyNumber_FloorDivide@plt+0x8c>
    34d8:	adrp	x2, 19000 <_Py_log1p@@Base+0x124a4>
    34dc:	ldr	x2, [x2, #4040]
    34e0:	cbz	x2, 34ec <PyNumber_FloorDivide@plt+0x8c>
    34e4:	mov	x16, x2
    34e8:	br	x16
    34ec:	ret
    34f0:	adrp	x0, 1a000 <_Py_log1p@@Base+0x134a4>
    34f4:	ldrb	w1, [x0, #2544]
    34f8:	cbnz	w1, 353c <PyNumber_FloorDivide@plt+0xdc>
    34fc:	stp	x29, x30, [sp, #-32]!
    3500:	mov	x29, sp
    3504:	str	x19, [sp, #16]
    3508:	mov	x19, x0
    350c:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    3510:	ldr	x0, [x0, #3848]
    3514:	cbz	x0, 3524 <PyNumber_FloorDivide@plt+0xc4>
    3518:	adrp	x0, 1a000 <_Py_log1p@@Base+0x134a4>
    351c:	ldr	x0, [x0, #600]
    3520:	bl	3070 <__cxa_finalize@plt>
    3524:	bl	3484 <PyNumber_FloorDivide@plt+0x24>
    3528:	mov	w0, #0x1                   	// #1
    352c:	strb	w0, [x19, #2544]
    3530:	ldr	x19, [sp, #16]
    3534:	ldp	x29, x30, [sp], #32
    3538:	ret
    353c:	ret
    3540:	b	34b4 <PyNumber_FloorDivide@plt+0x54>
    3544:	fmov	d1, #5.000000000000000000e+00
    3548:	adrp	x0, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    354c:	fcmpe	d0, d1
    3550:	b.pl	3594 <PyNumber_FloorDivide@plt+0x134>  // b.nfrst
    3554:	movi	d1, #0x0
    3558:	add	x0, x0, #0xf40
    355c:	add	x2, x0, #0x68
    3560:	mov	x1, #0x60                  	// #96
    3564:	fmov	d2, d1
    3568:	fmul	d2, d2, d0
    356c:	ldr	d3, [x1, x0]
    3570:	fmul	d1, d0, d1
    3574:	fadd	d2, d2, d3
    3578:	ldr	d3, [x1, x2]
    357c:	sub	x1, x1, #0x8
    3580:	cmn	x1, #0x8
    3584:	fadd	d1, d1, d3
    3588:	b.ne	3568 <PyNumber_FloorDivide@plt+0x108>  // b.any
    358c:	fdiv	d0, d2, d1
    3590:	ret
    3594:	movi	d1, #0x0
    3598:	add	x0, x0, #0xf40
    359c:	add	x2, x0, #0x68
    35a0:	mov	x1, #0x0                   	// #0
    35a4:	fmov	d2, d1
    35a8:	fdiv	d2, d2, d0
    35ac:	ldr	d3, [x1, x0]
    35b0:	fdiv	d1, d1, d0
    35b4:	fadd	d2, d2, d3
    35b8:	ldr	d3, [x1, x2]
    35bc:	add	x1, x1, #0x8
    35c0:	cmp	x1, #0x68
    35c4:	fadd	d1, d1, d3
    35c8:	b.ne	35a8 <PyNumber_FloorDivide@plt+0x148>  // b.any
    35cc:	b	358c <PyNumber_FloorDivide@plt+0x12c>
    35d0:	lsr	x3, x0, #62
    35d4:	lsr	x2, x0, #59
    35d8:	add	w1, w3, #0x1
    35dc:	add	x3, x3, #0x1
    35e0:	lsr	x4, x0, #53
    35e4:	udiv	x2, x2, x3
    35e8:	add	w3, w2, w1, lsl #1
    35ec:	add	w1, w2, w1, lsl #1
    35f0:	lsr	x2, x0, #41
    35f4:	lsr	x0, x0, #17
    35f8:	udiv	x4, x4, x1
    35fc:	add	w1, w4, w3, lsl #3
    3600:	add	w3, w4, w3, lsl #3
    3604:	udiv	x2, x2, x3
    3608:	add	w3, w2, w1, lsl #7
    360c:	add	w1, w2, w1, lsl #7
    3610:	lsl	w3, w3, #15
    3614:	udiv	x0, x0, x1
    3618:	add	x0, x0, x3
    361c:	ret
    3620:	stp	x29, x30, [sp, #-48]!
    3624:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    3628:	fmov	d2, d1
    362c:	mov	x29, sp
    3630:	stp	d10, d11, [sp, #32]
    3634:	fabs	d10, d0
    3638:	stp	d8, d9, [sp, #16]
    363c:	fmov	d8, d0
    3640:	ldr	d0, [x0, #2904]
    3644:	fcmp	d10, d0
    3648:	fmov	d1, d0
    364c:	b.hi	36cc <PyNumber_FloorDivide@plt+0x26c>  // b.pmore
    3650:	fabs	d11, d2
    3654:	fcmp	d11, d0
    3658:	b.hi	36cc <PyNumber_FloorDivide@plt+0x26c>  // b.pmore
    365c:	fcmp	d2, #0.0
    3660:	b.eq	36f0 <PyNumber_FloorDivide@plt+0x290>  // b.none
    3664:	fmov	d1, d11
    3668:	fmov	d0, d10
    366c:	bl	33a0 <fmod@plt>
    3670:	fmov	d9, d0
    3674:	fsub	d0, d11, d0
    3678:	fcmpe	d9, d0
    367c:	b.mi	3688 <PyNumber_FloorDivide@plt+0x228>  // b.first
    3680:	b.le	36ac <PyNumber_FloorDivide@plt+0x24c>
    3684:	fneg	d9, d0
    3688:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    368c:	fmov	d0, x0
    3690:	and	v8.8b, v8.8b, v0.8b
    3694:	eor	v8.8b, v8.8b, v9.8b
    3698:	fmov	d0, d8
    369c:	ldp	d8, d9, [sp, #16]
    36a0:	ldp	d10, d11, [sp, #32]
    36a4:	ldp	x29, x30, [sp], #48
    36a8:	ret
    36ac:	fsub	d10, d10, d9
    36b0:	fmov	d0, #5.000000000000000000e-01
    36b4:	fmov	d1, d11
    36b8:	fmul	d0, d10, d0
    36bc:	bl	33a0 <fmod@plt>
    36c0:	fadd	d0, d0, d0
    36c4:	fsub	d9, d9, d0
    36c8:	b	3688 <PyNumber_FloorDivide@plt+0x228>
    36cc:	fcmp	d8, d8
    36d0:	b.vs	3698 <PyNumber_FloorDivide@plt+0x238>
    36d4:	fcmp	d2, d2
    36d8:	b.vs	36fc <PyNumber_FloorDivide@plt+0x29c>
    36dc:	fcmp	d10, d1
    36e0:	mov	x0, #0x7ff8000000000000    	// #9221120237041090560
    36e4:	fmov	d0, x0
    36e8:	fcsel	d8, d8, d0, le
    36ec:	b	3698 <PyNumber_FloorDivide@plt+0x238>
    36f0:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    36f4:	ldr	d8, [x0, #2912]
    36f8:	b	3698 <PyNumber_FloorDivide@plt+0x238>
    36fc:	fmov	d8, d2
    3700:	b	3698 <PyNumber_FloorDivide@plt+0x238>
    3704:	stp	x29, x30, [sp, #-32]!
    3708:	fmov	d1, #2.000000000000000000e+00
    370c:	mov	x29, sp
    3710:	str	d8, [sp, #16]
    3714:	fmov	d8, d0
    3718:	fabs	d0, d0
    371c:	bl	33a0 <fmod@plt>
    3720:	fmov	d1, d0
    3724:	fadd	d0, d0, d0
    3728:	fcvtas	w0, d0
    372c:	cmp	w0, #0x4
    3730:	b.hi	37b8 <PyNumber_FloorDivide@plt+0x358>  // b.pmore
    3734:	adrp	x2, 8000 <_Py_log1p@@Base+0x14a4>
    3738:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    373c:	add	x1, x1, #0xf38
    3740:	ldr	d0, [x2, #2920]
    3744:	ldrb	w0, [x1, w0, uxtw]
    3748:	adr	x1, 3754 <PyNumber_FloorDivide@plt+0x2f4>
    374c:	add	x0, x1, w0, sxtb #2
    3750:	br	x0
    3754:	fmov	d2, #5.000000000000000000e-01
    3758:	fsub	d1, d1, d2
    375c:	fmul	d0, d1, d0
    3760:	bl	3400 <cos@plt>
    3764:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    3768:	fmov	d1, x0
    376c:	and	v8.8b, v8.8b, v1.8b
    3770:	eor	v0.8b, v8.8b, v0.8b
    3774:	ldr	d8, [sp, #16]
    3778:	ldp	x29, x30, [sp], #32
    377c:	ret
    3780:	fmov	d2, #1.000000000000000000e+00
    3784:	fsub	d1, d2, d1
    3788:	fmul	d0, d1, d0
    378c:	bl	3230 <sin@plt>
    3790:	b	3764 <PyNumber_FloorDivide@plt+0x304>
    3794:	fmov	d2, #1.500000000000000000e+00
    3798:	fsub	d1, d1, d2
    379c:	fmul	d0, d1, d0
    37a0:	bl	3400 <cos@plt>
    37a4:	fneg	d0, d0
    37a8:	b	3764 <PyNumber_FloorDivide@plt+0x304>
    37ac:	fmov	d2, #2.000000000000000000e+00
    37b0:	fsub	d1, d1, d2
    37b4:	b	3788 <PyNumber_FloorDivide@plt+0x328>
    37b8:	adrp	x0, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    37bc:	add	x0, x0, #0xb80
    37c0:	bl	3300 <Py_FatalError@plt>
    37c4:	stp	x29, x30, [sp, #-64]!
    37c8:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    37cc:	mov	x29, sp
    37d0:	stp	d10, d11, [sp, #32]
    37d4:	fabs	d11, d0
    37d8:	fmov	d10, d0
    37dc:	str	d12, [sp, #48]
    37e0:	ldr	d12, [x0, #2904]
    37e4:	stp	d8, d9, [sp, #16]
    37e8:	fcmp	d11, d12
    37ec:	b.ls	3818 <PyNumber_FloorDivide@plt+0x3b8>  // b.plast
    37f0:	fcmp	d0, d0
    37f4:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
    37f8:	fmov	d8, x0
    37fc:	fcsel	d8, d0, d8, vs
    3800:	fmov	d0, d8
    3804:	ldr	d12, [sp, #48]
    3808:	ldp	d8, d9, [sp, #16]
    380c:	ldp	d10, d11, [sp, #32]
    3810:	ldp	x29, x30, [sp], #64
    3814:	ret
    3818:	frintm	d0, d0
    381c:	fcmp	d0, d10
    3820:	b.ne	3850 <PyNumber_FloorDivide@plt+0x3f0>  // b.any
    3824:	fmov	d0, #2.000000000000000000e+00
    3828:	fcmpe	d10, d0
    382c:	b.hi	3850 <PyNumber_FloorDivide@plt+0x3f0>  // b.pmore
    3830:	fcmpe	d10, #0.0
    3834:	b.hi	38fc <PyNumber_FloorDivide@plt+0x49c>  // b.pmore
    3838:	bl	33f0 <__errno_location@plt>
    383c:	mov	w1, #0x21                  	// #33
    3840:	str	w1, [x0]
    3844:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    3848:	ldr	d8, [x0, #2928]
    384c:	b	3800 <PyNumber_FloorDivide@plt+0x3a0>
    3850:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    3854:	ldr	d0, [x0, #2936]
    3858:	fcmpe	d11, d0
    385c:	fmov	d0, d11
    3860:	b.pl	3870 <PyNumber_FloorDivide@plt+0x410>  // b.nfrst
    3864:	bl	31a0 <log@plt>
    3868:	fneg	d8, d0
    386c:	b	3800 <PyNumber_FloorDivide@plt+0x3a0>
    3870:	bl	3544 <PyNumber_FloorDivide@plt+0xe4>
    3874:	bl	31a0 <log@plt>
    3878:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    387c:	fmov	d9, #5.000000000000000000e-01
    3880:	ldr	d1, [x0, #2944]
    3884:	fsub	d8, d0, d1
    3888:	fadd	d0, d11, d1
    388c:	fsub	d0, d0, d9
    3890:	bl	31a0 <log@plt>
    3894:	fsub	d9, d11, d9
    3898:	fmov	d1, #1.000000000000000000e+00
    389c:	fcmpe	d10, #0.0
    38a0:	fsub	d0, d0, d1
    38a4:	fmul	d9, d9, d0
    38a8:	fadd	d8, d9, d8
    38ac:	b.pl	38e0 <PyNumber_FloorDivide@plt+0x480>  // b.nfrst
    38b0:	fmov	d0, d11
    38b4:	bl	3704 <PyNumber_FloorDivide@plt+0x2a4>
    38b8:	fabs	d0, d0
    38bc:	bl	31a0 <log@plt>
    38c0:	fmov	d9, d0
    38c4:	fmov	d0, d11
    38c8:	bl	31a0 <log@plt>
    38cc:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    38d0:	ldr	d1, [x0, #2952]
    38d4:	fsub	d1, d1, d9
    38d8:	fsub	d1, d1, d0
    38dc:	fsub	d8, d1, d8
    38e0:	fabs	d0, d8
    38e4:	fcmp	d0, d12
    38e8:	b.le	3800 <PyNumber_FloorDivide@plt+0x3a0>
    38ec:	bl	33f0 <__errno_location@plt>
    38f0:	mov	w1, #0x22                  	// #34
    38f4:	str	w1, [x0]
    38f8:	b	3800 <PyNumber_FloorDivide@plt+0x3a0>
    38fc:	movi	d8, #0x0
    3900:	b	3800 <PyNumber_FloorDivide@plt+0x3a0>
    3904:	stp	x29, x30, [sp, #-80]!
    3908:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    390c:	mov	x29, sp
    3910:	stp	d8, d9, [sp, #16]
    3914:	fabs	d9, d0
    3918:	fmov	d8, d0
    391c:	stp	d10, d11, [sp, #32]
    3920:	ldr	d10, [x0, #2904]
    3924:	stp	d12, d13, [sp, #48]
    3928:	fcmp	d9, d10
    392c:	stp	d14, d15, [sp, #64]
    3930:	b.ls	395c <PyNumber_FloorDivide@plt+0x4fc>  // b.plast
    3934:	fcmp	d0, d0
    3938:	b.vs	3984 <PyNumber_FloorDivide@plt+0x524>
    393c:	fcmpe	d0, #0.0
    3940:	b.gt	3984 <PyNumber_FloorDivide@plt+0x524>
    3944:	bl	33f0 <__errno_location@plt>
    3948:	mov	w1, #0x21                  	// #33
    394c:	str	w1, [x0]
    3950:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    3954:	ldr	d8, [x0, #2912]
    3958:	b	3984 <PyNumber_FloorDivide@plt+0x524>
    395c:	fcmp	d0, #0.0
    3960:	b.ne	39a0 <PyNumber_FloorDivide@plt+0x540>  // b.any
    3964:	bl	33f0 <__errno_location@plt>
    3968:	mov	w1, #0x21                  	// #33
    396c:	str	w1, [x0]
    3970:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
    3974:	fmov	d0, x0
    3978:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    397c:	fmov	d1, x0
    3980:	bif	v8.8b, v0.8b, v1.8b
    3984:	fmov	d0, d8
    3988:	ldp	d8, d9, [sp, #16]
    398c:	ldp	d10, d11, [sp, #32]
    3990:	ldp	d12, d13, [sp, #48]
    3994:	ldp	d14, d15, [sp, #64]
    3998:	ldp	x29, x30, [sp], #80
    399c:	ret
    39a0:	frintm	d0, d0
    39a4:	fcmp	d0, d8
    39a8:	b.ne	39dc <PyNumber_FloorDivide@plt+0x57c>  // b.any
    39ac:	fcmpe	d8, #0.0
    39b0:	b.mi	3944 <PyNumber_FloorDivide@plt+0x4e4>  // b.first
    39b4:	fmov	d0, #2.300000000000000000e+01
    39b8:	fcmpe	d8, d0
    39bc:	b.hi	39dc <PyNumber_FloorDivide@plt+0x57c>  // b.pmore
    39c0:	fcvtzs	w0, d8
    39c4:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    39c8:	add	x1, x1, #0xf40
    39cc:	add	x1, x1, #0xd0
    39d0:	sub	w0, w0, #0x1
    39d4:	ldr	d8, [x1, w0, sxtw #3]
    39d8:	b	3984 <PyNumber_FloorDivide@plt+0x524>
    39dc:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    39e0:	ldr	d0, [x0, #2936]
    39e4:	fcmpe	d9, d0
    39e8:	b.pl	3a10 <PyNumber_FloorDivide@plt+0x5b0>  // b.nfrst
    39ec:	fmov	d0, #1.000000000000000000e+00
    39f0:	fdiv	d8, d0, d8
    39f4:	fabs	d0, d8
    39f8:	fcmp	d0, d10
    39fc:	b.le	3984 <PyNumber_FloorDivide@plt+0x524>
    3a00:	bl	33f0 <__errno_location@plt>
    3a04:	mov	w1, #0x22                  	// #34
    3a08:	str	w1, [x0]
    3a0c:	b	3984 <PyNumber_FloorDivide@plt+0x524>
    3a10:	mov	x0, #0x4069000000000000    	// #4641240890982006784
    3a14:	fmov	d0, x0
    3a18:	fcmpe	d9, d0
    3a1c:	b.le	3a54 <PyNumber_FloorDivide@plt+0x5f4>
    3a20:	fcmpe	d8, #0.0
    3a24:	b.pl	3a3c <PyNumber_FloorDivide@plt+0x5dc>  // b.nfrst
    3a28:	fmov	d0, d8
    3a2c:	bl	3704 <PyNumber_FloorDivide@plt+0x2a4>
    3a30:	movi	d8, #0x0
    3a34:	fdiv	d8, d8, d0
    3a38:	b	3984 <PyNumber_FloorDivide@plt+0x524>
    3a3c:	bl	33f0 <__errno_location@plt>
    3a40:	mov	w1, #0x22                  	// #34
    3a44:	str	w1, [x0]
    3a48:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    3a4c:	ldr	d8, [x0, #2928]
    3a50:	b	3984 <PyNumber_FloorDivide@plt+0x524>
    3a54:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    3a58:	ldr	d0, [x0, #2960]
    3a5c:	fcmpe	d9, d0
    3a60:	fadd	d14, d9, d0
    3a64:	b.le	3af0 <PyNumber_FloorDivide@plt+0x690>
    3a68:	fsub	d1, d14, d9
    3a6c:	fsub	d0, d1, d0
    3a70:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    3a74:	ldr	d1, [x0, #2944]
    3a78:	fmul	d0, d0, d1
    3a7c:	fdiv	d12, d0, d14
    3a80:	fmov	d0, d9
    3a84:	bl	3544 <PyNumber_FloorDivide@plt+0xe4>
    3a88:	fcmpe	d8, #0.0
    3a8c:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    3a90:	fmov	d13, d0
    3a94:	fmov	d15, #5.000000000000000000e-01
    3a98:	ldr	d11, [x0, #2968]
    3a9c:	b.pl	3b18 <PyNumber_FloorDivide@plt+0x6b8>  // b.nfrst
    3aa0:	fmov	d0, d9
    3aa4:	bl	3704 <PyNumber_FloorDivide@plt+0x2a4>
    3aa8:	fmov	d8, d0
    3aac:	fmov	d0, d14
    3ab0:	bl	3440 <exp@plt>
    3ab4:	fcmpe	d9, d11
    3ab8:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    3abc:	ldr	d2, [x0, #2976]
    3ac0:	fdiv	d2, d2, d8
    3ac4:	fdiv	d2, d2, d9
    3ac8:	fmul	d8, d2, d0
    3acc:	fdiv	d8, d8, d13
    3ad0:	fmul	d0, d12, d8
    3ad4:	fsub	d8, d8, d0
    3ad8:	b.pl	3afc <PyNumber_FloorDivide@plt+0x69c>  // b.nfrst
    3adc:	fsub	d1, d9, d15
    3ae0:	fmov	d0, d14
    3ae4:	bl	3090 <pow@plt>
    3ae8:	fdiv	d8, d8, d0
    3aec:	b	39f4 <PyNumber_FloorDivide@plt+0x594>
    3af0:	fsub	d0, d14, d0
    3af4:	fsub	d0, d0, d9
    3af8:	b	3a70 <PyNumber_FloorDivide@plt+0x610>
    3afc:	fmul	d1, d9, d15
    3b00:	fmov	d0, #2.500000000000000000e-01
    3b04:	fsub	d1, d1, d0
    3b08:	fmov	d0, d14
    3b0c:	bl	3090 <pow@plt>
    3b10:	fdiv	d8, d8, d0
    3b14:	b	3ae8 <PyNumber_FloorDivide@plt+0x688>
    3b18:	fmov	d0, d14
    3b1c:	bl	3440 <exp@plt>
    3b20:	fcmpe	d9, d11
    3b24:	fdiv	d8, d13, d0
    3b28:	fmul	d0, d12, d8
    3b2c:	fadd	d8, d0, d8
    3b30:	b.pl	3b48 <PyNumber_FloorDivide@plt+0x6e8>  // b.nfrst
    3b34:	fsub	d1, d9, d15
    3b38:	fmov	d0, d14
    3b3c:	bl	3090 <pow@plt>
    3b40:	fmul	d8, d8, d0
    3b44:	b	39f4 <PyNumber_FloorDivide@plt+0x594>
    3b48:	fmul	d1, d9, d15
    3b4c:	fmov	d0, #2.500000000000000000e-01
    3b50:	fsub	d1, d1, d0
    3b54:	fmov	d0, d14
    3b58:	bl	3090 <pow@plt>
    3b5c:	fmul	d8, d8, d0
    3b60:	b	3b40 <PyNumber_FloorDivide@plt+0x6e0>
    3b64:	b	3310 <erfc@plt>
    3b68:	b	3270 <erf@plt>
    3b6c:	stp	x29, x30, [sp, #-32]!
    3b70:	mov	x0, x1
    3b74:	mov	x29, sp
    3b78:	ldr	x2, [x1, #8]
    3b7c:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    3b80:	str	d8, [sp, #16]
    3b84:	ldr	x1, [x1, #3824]
    3b88:	cmp	x2, x1
    3b8c:	b.ne	3bac <PyNumber_FloorDivide@plt+0x74c>  // b.any
    3b90:	ldr	d8, [x0, #16]
    3b94:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    3b98:	ldr	d0, [x0, #2984]
    3b9c:	fmul	d0, d8, d0
    3ba0:	ldr	d8, [sp, #16]
    3ba4:	ldp	x29, x30, [sp], #32
    3ba8:	b	31c0 <PyFloat_FromDouble@plt>
    3bac:	bl	32e0 <PyFloat_AsDouble@plt>
    3bb0:	fmov	d8, d0
    3bb4:	fmov	d0, #-1.000000000000000000e+00
    3bb8:	fcmp	d8, d0
    3bbc:	b.ne	3b94 <PyNumber_FloorDivide@plt+0x734>  // b.any
    3bc0:	bl	32b0 <PyErr_Occurred@plt>
    3bc4:	cbz	x0, 3b94 <PyNumber_FloorDivide@plt+0x734>
    3bc8:	mov	x0, #0x0                   	// #0
    3bcc:	ldr	d8, [sp, #16]
    3bd0:	ldp	x29, x30, [sp], #32
    3bd4:	ret
    3bd8:	stp	x29, x30, [sp, #-32]!
    3bdc:	mov	x0, x1
    3be0:	mov	x29, sp
    3be4:	ldr	x2, [x1, #8]
    3be8:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    3bec:	str	d8, [sp, #16]
    3bf0:	ldr	x1, [x1, #3824]
    3bf4:	cmp	x2, x1
    3bf8:	b.ne	3c18 <PyNumber_FloorDivide@plt+0x7b8>  // b.any
    3bfc:	ldr	d8, [x0, #16]
    3c00:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    3c04:	ldr	d0, [x0, #2992]
    3c08:	fmul	d0, d8, d0
    3c0c:	ldr	d8, [sp, #16]
    3c10:	ldp	x29, x30, [sp], #32
    3c14:	b	31c0 <PyFloat_FromDouble@plt>
    3c18:	bl	32e0 <PyFloat_AsDouble@plt>
    3c1c:	fmov	d8, d0
    3c20:	fmov	d0, #-1.000000000000000000e+00
    3c24:	fcmp	d8, d0
    3c28:	b.ne	3c00 <PyNumber_FloorDivide@plt+0x7a0>  // b.any
    3c2c:	bl	32b0 <PyErr_Occurred@plt>
    3c30:	cbz	x0, 3c00 <PyNumber_FloorDivide@plt+0x7a0>
    3c34:	mov	x0, #0x0                   	// #0
    3c38:	ldr	d8, [sp, #16]
    3c3c:	ldp	x29, x30, [sp], #32
    3c40:	ret
    3c44:	sub	sp, sp, #0x70
    3c48:	stp	x29, x30, [sp, #16]
    3c4c:	add	x29, sp, #0x10
    3c50:	stp	x19, x20, [sp, #32]
    3c54:	mov	x19, x1
    3c58:	mov	x1, x2
    3c5c:	str	x21, [sp, #48]
    3c60:	str	d10, [sp, #56]
    3c64:	stp	d8, d9, [sp, #64]
    3c68:	cbz	x3, 3cd4 <PyNumber_FloorDivide@plt+0x874>
    3c6c:	ldr	x21, [x3, #16]
    3c70:	cmp	x3, #0x0
    3c74:	add	x21, x21, x1
    3c78:	ccmp	x1, #0x2, #0x0, eq  // eq = none
    3c7c:	b.ne	3c84 <PyNumber_FloorDivide@plt+0x824>  // b.any
    3c80:	cbnz	x19, 3cdc <PyNumber_FloorDivide@plt+0x87c>
    3c84:	add	x0, sp, #0x50
    3c88:	str	x0, [sp]
    3c8c:	mov	w6, #0x2                   	// #2
    3c90:	mov	x0, x19
    3c94:	mov	w5, w6
    3c98:	mov	w7, #0x0                   	// #0
    3c9c:	adrp	x4, 1a000 <_Py_log1p@@Base+0x134a4>
    3ca0:	mov	x2, #0x0                   	// #0
    3ca4:	add	x4, x4, #0x260
    3ca8:	bl	3120 <_PyArg_UnpackKeywords@plt>
    3cac:	mov	x19, x0
    3cb0:	cbnz	x0, 3cdc <PyNumber_FloorDivide@plt+0x87c>
    3cb4:	mov	x0, #0x0                   	// #0
    3cb8:	ldp	x29, x30, [sp, #16]
    3cbc:	ldp	x19, x20, [sp, #32]
    3cc0:	ldr	x21, [sp, #48]
    3cc4:	ldr	d10, [sp, #56]
    3cc8:	ldp	d8, d9, [sp, #64]
    3ccc:	add	sp, sp, #0x70
    3cd0:	ret
    3cd4:	mov	x21, #0x0                   	// #0
    3cd8:	b	3c70 <PyNumber_FloorDivide@plt+0x810>
    3cdc:	ldr	x0, [x19]
    3ce0:	adrp	x20, 19000 <_Py_log1p@@Base+0x124a4>
    3ce4:	ldr	x1, [x20, #3824]
    3ce8:	ldr	x2, [x0, #8]
    3cec:	cmp	x2, x1
    3cf0:	b.ne	3d4c <PyNumber_FloorDivide@plt+0x8ec>  // b.any
    3cf4:	ldr	d10, [x0, #16]
    3cf8:	ldr	x0, [x19, #8]
    3cfc:	ldr	x1, [x20, #3824]
    3d00:	ldr	x2, [x0, #8]
    3d04:	cmp	x2, x1
    3d08:	b.ne	3d6c <PyNumber_FloorDivide@plt+0x90c>  // b.any
    3d0c:	ldr	d9, [x0, #16]
    3d10:	cmp	x21, #0x2
    3d14:	b.eq	3e84 <PyNumber_FloorDivide@plt+0xa24>  // b.none
    3d18:	ldr	x0, [x19, #16]
    3d1c:	cbz	x0, 3db4 <PyNumber_FloorDivide@plt+0x954>
    3d20:	ldr	x1, [x20, #3824]
    3d24:	ldr	x2, [x0, #8]
    3d28:	cmp	x2, x1
    3d2c:	b.ne	3d8c <PyNumber_FloorDivide@plt+0x92c>  // b.any
    3d30:	ldr	d8, [x0, #16]
    3d34:	cmp	x21, #0x3
    3d38:	b.ne	3dbc <PyNumber_FloorDivide@plt+0x95c>  // b.any
    3d3c:	fcmpe	d8, #0.0
    3d40:	b.mi	3e54 <PyNumber_FloorDivide@plt+0x9f4>  // b.first
    3d44:	movi	d0, #0x0
    3d48:	b	3de4 <PyNumber_FloorDivide@plt+0x984>
    3d4c:	bl	32e0 <PyFloat_AsDouble@plt>
    3d50:	fmov	d10, d0
    3d54:	fmov	d0, #-1.000000000000000000e+00
    3d58:	fcmp	d10, d0
    3d5c:	b.ne	3cf8 <PyNumber_FloorDivide@plt+0x898>  // b.any
    3d60:	bl	32b0 <PyErr_Occurred@plt>
    3d64:	cbz	x0, 3cf8 <PyNumber_FloorDivide@plt+0x898>
    3d68:	b	3cb4 <PyNumber_FloorDivide@plt+0x854>
    3d6c:	bl	32e0 <PyFloat_AsDouble@plt>
    3d70:	fmov	d9, d0
    3d74:	fmov	d0, #-1.000000000000000000e+00
    3d78:	fcmp	d9, d0
    3d7c:	b.ne	3d10 <PyNumber_FloorDivide@plt+0x8b0>  // b.any
    3d80:	bl	32b0 <PyErr_Occurred@plt>
    3d84:	cbz	x0, 3d10 <PyNumber_FloorDivide@plt+0x8b0>
    3d88:	b	3cb4 <PyNumber_FloorDivide@plt+0x854>
    3d8c:	bl	32e0 <PyFloat_AsDouble@plt>
    3d90:	fmov	d8, d0
    3d94:	fmov	d0, #-1.000000000000000000e+00
    3d98:	fcmp	d8, d0
    3d9c:	b.ne	3d34 <PyNumber_FloorDivide@plt+0x8d4>  // b.any
    3da0:	bl	32b0 <PyErr_Occurred@plt>
    3da4:	cbnz	x0, 3cb4 <PyNumber_FloorDivide@plt+0x854>
    3da8:	cmp	x21, #0x3
    3dac:	b.ne	3dbc <PyNumber_FloorDivide@plt+0x95c>  // b.any
    3db0:	b	3e54 <PyNumber_FloorDivide@plt+0x9f4>
    3db4:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    3db8:	ldr	d8, [x0, #3000]
    3dbc:	ldr	x0, [x19, #24]
    3dc0:	ldr	x20, [x20, #3824]
    3dc4:	ldr	x1, [x0, #8]
    3dc8:	cmp	x1, x20
    3dcc:	b.ne	3e3c <PyNumber_FloorDivide@plt+0x9dc>  // b.any
    3dd0:	ldr	d0, [x0, #16]
    3dd4:	fcmpe	d8, #0.0
    3dd8:	b.mi	3e54 <PyNumber_FloorDivide@plt+0x9f4>  // b.first
    3ddc:	fcmpe	d0, #0.0
    3de0:	b.mi	3e54 <PyNumber_FloorDivide@plt+0x9f4>  // b.first
    3de4:	fcmp	d10, d9
    3de8:	b.eq	3e9c <PyNumber_FloorDivide@plt+0xa3c>  // b.none
    3dec:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    3df0:	fabs	d2, d10
    3df4:	ldr	d1, [x0, #2904]
    3df8:	fcmp	d2, d1
    3dfc:	b.gt	3e94 <PyNumber_FloorDivide@plt+0xa34>
    3e00:	fabs	d2, d9
    3e04:	fcmp	d2, d1
    3e08:	b.gt	3e94 <PyNumber_FloorDivide@plt+0xa34>
    3e0c:	fabd	d1, d9, d10
    3e10:	fmul	d9, d9, d8
    3e14:	fabs	d9, d9
    3e18:	fcmpe	d1, d9
    3e1c:	b.ls	3e9c <PyNumber_FloorDivide@plt+0xa3c>  // b.plast
    3e20:	fmul	d8, d10, d8
    3e24:	fabs	d8, d8
    3e28:	fcmpe	d1, d8
    3e2c:	b.ls	3e9c <PyNumber_FloorDivide@plt+0xa3c>  // b.plast
    3e30:	fcmpe	d1, d0
    3e34:	cset	w0, ls  // ls = plast
    3e38:	b	3e78 <PyNumber_FloorDivide@plt+0xa18>
    3e3c:	bl	32e0 <PyFloat_AsDouble@plt>
    3e40:	fmov	d1, #-1.000000000000000000e+00
    3e44:	fcmp	d0, d1
    3e48:	b.ne	3dd4 <PyNumber_FloorDivide@plt+0x974>  // b.any
    3e4c:	bl	32b0 <PyErr_Occurred@plt>
    3e50:	cbnz	x0, 3cb4 <PyNumber_FloorDivide@plt+0x854>
    3e54:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    3e58:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    3e5c:	add	x1, x1, #0xba0
    3e60:	ldr	x0, [x0, #3872]
    3e64:	ldr	x0, [x0]
    3e68:	bl	3130 <PyErr_SetString@plt>
    3e6c:	bl	32b0 <PyErr_Occurred@plt>
    3e70:	cbnz	x0, 3cb4 <PyNumber_FloorDivide@plt+0x854>
    3e74:	mov	w0, #0xffffffff            	// #-1
    3e78:	sxtw	x0, w0
    3e7c:	bl	3220 <PyBool_FromLong@plt>
    3e80:	b	3cb8 <PyNumber_FloorDivide@plt+0x858>
    3e84:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    3e88:	movi	d0, #0x0
    3e8c:	ldr	d8, [x0, #3000]
    3e90:	b	3de4 <PyNumber_FloorDivide@plt+0x984>
    3e94:	mov	w0, #0x0                   	// #0
    3e98:	b	3e78 <PyNumber_FloorDivide@plt+0xa18>
    3e9c:	mov	w0, #0x1                   	// #1
    3ea0:	b	3e78 <PyNumber_FloorDivide@plt+0xa18>
    3ea4:	ldr	x1, [x0]
    3ea8:	sub	x1, x1, #0x1
    3eac:	str	x1, [x0]
    3eb0:	cbnz	x1, 3eb8 <PyNumber_FloorDivide@plt+0xa58>
    3eb4:	b	3080 <_Py_Dealloc@plt>
    3eb8:	ret
    3ebc:	cbz	x0, 3ec4 <PyNumber_FloorDivide@plt+0xa64>
    3ec0:	b	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    3ec4:	ret
    3ec8:	stp	x29, x30, [sp, #-96]!
    3ecc:	mov	x0, x1
    3ed0:	mov	x29, sp
    3ed4:	stp	x19, x20, [sp, #16]
    3ed8:	stp	x21, x22, [sp, #32]
    3edc:	stp	x23, x24, [sp, #48]
    3ee0:	stp	x25, x26, [sp, #64]
    3ee4:	str	x27, [sp, #80]
    3ee8:	bl	33e0 <PyNumber_Index@plt>
    3eec:	cbnz	x0, 3ef8 <PyNumber_FloorDivide@plt+0xa98>
    3ef0:	mov	x19, #0x0                   	// #0
    3ef4:	b	40d4 <PyNumber_FloorDivide@plt+0xc74>
    3ef8:	mov	x20, x0
    3efc:	bl	30c0 <_PyLong_Sign@plt>
    3f00:	tbz	w0, #31, 3f34 <PyNumber_FloorDivide@plt+0xad4>
    3f04:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    3f08:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    3f0c:	add	x1, x1, #0xbc0
    3f10:	ldr	x0, [x0, #3872]
    3f14:	ldr	x0, [x0]
    3f18:	bl	3130 <PyErr_SetString@plt>
    3f1c:	mov	x19, #0x0                   	// #0
    3f20:	mov	x0, x19
    3f24:	bl	3ebc <PyNumber_FloorDivide@plt+0xa5c>
    3f28:	mov	x0, x20
    3f2c:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    3f30:	b	3ef0 <PyNumber_FloorDivide@plt+0xa90>
    3f34:	mov	x0, x20
    3f38:	bl	30c0 <_PyLong_Sign@plt>
    3f3c:	cbnz	w0, 3f68 <PyNumber_FloorDivide@plt+0xb08>
    3f40:	mov	x0, x20
    3f44:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    3f48:	ldp	x19, x20, [sp, #16]
    3f4c:	mov	x0, #0x0                   	// #0
    3f50:	ldp	x21, x22, [sp, #32]
    3f54:	ldp	x23, x24, [sp, #48]
    3f58:	ldp	x25, x26, [sp, #64]
    3f5c:	ldr	x27, [sp, #80]
    3f60:	ldp	x29, x30, [sp], #96
    3f64:	b	31e0 <PyLong_FromLong@plt>
    3f68:	mov	x0, x20
    3f6c:	bl	30f0 <_PyLong_NumBits@plt>
    3f70:	cmn	x0, #0x1
    3f74:	b.eq	3f1c <PyNumber_FloorDivide@plt+0xabc>  // b.none
    3f78:	sub	x0, x0, #0x1
    3f7c:	cmp	x0, #0x3f
    3f80:	lsr	x25, x0, #1
    3f84:	b.hi	40f4 <PyNumber_FloorDivide@plt+0xc94>  // b.pmore
    3f88:	mov	x0, x20
    3f8c:	bl	3050 <PyLong_AsUnsignedLongLong@plt>
    3f90:	mov	x19, x0
    3f94:	mov	x0, x20
    3f98:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    3f9c:	cmn	x19, #0x1
    3fa0:	b.eq	3ff0 <PyNumber_FloorDivide@plt+0xb90>  // b.none
    3fa4:	mov	x5, #0x1f                  	// #31
    3fa8:	sub	x0, x5, x25
    3fac:	lsl	w0, w0, #1
    3fb0:	lsl	x0, x19, x0
    3fb4:	bl	35d0 <PyNumber_FloorDivide@plt+0x170>
    3fb8:	sub	w25, w5, w25
    3fbc:	ldp	x21, x22, [sp, #32]
    3fc0:	lsr	x0, x0, x25
    3fc4:	ldp	x23, x24, [sp, #48]
    3fc8:	mul	x1, x0, x0
    3fcc:	ldp	x25, x26, [sp, #64]
    3fd0:	sub	x1, x1, #0x1
    3fd4:	cmp	x1, x19
    3fd8:	ldp	x19, x20, [sp, #16]
    3fdc:	cset	x1, cs  // cs = hs, nlast
    3fe0:	ldr	x27, [sp, #80]
    3fe4:	sub	x0, x0, x1
    3fe8:	ldp	x29, x30, [sp], #96
    3fec:	b	3040 <PyLong_FromUnsignedLongLong@plt>
    3ff0:	bl	32b0 <PyErr_Occurred@plt>
    3ff4:	cbz	x0, 3fa4 <PyNumber_FloorDivide@plt+0xb44>
    3ff8:	b	3ef0 <PyNumber_FloorDivide@plt+0xa90>
    3ffc:	add	w21, w21, #0x1
    4000:	lsr	x1, x25, x21
    4004:	cbnz	x1, 3ffc <PyNumber_FloorDivide@plt+0xb9c>
    4008:	sub	w23, w21, #0x5
    400c:	and	x1, x0, #0xfffffffffffffffe
    4010:	orr	x22, x0, #0x1
    4014:	sub	x1, x1, #0x3e
    4018:	mov	x0, x20
    401c:	lsr	x23, x25, x23
    4020:	bl	3100 <_PyLong_Rshift@plt>
    4024:	mov	x24, x0
    4028:	cbz	x0, 3f1c <PyNumber_FloorDivide@plt+0xabc>
    402c:	bl	3050 <PyLong_AsUnsignedLongLong@plt>
    4030:	mov	x19, x0
    4034:	mov	x0, x24
    4038:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    403c:	cmn	x19, #0x1
    4040:	b.eq	40fc <PyNumber_FloorDivide@plt+0xc9c>  // b.none
    4044:	mov	x0, x19
    4048:	bl	35d0 <PyNumber_FloorDivide@plt+0x170>
    404c:	mov	w1, #0x1f                  	// #31
    4050:	sub	w1, w1, w23
    4054:	lsr	x0, x0, x1
    4058:	bl	3040 <PyLong_FromUnsignedLongLong@plt>
    405c:	mov	x19, x0
    4060:	cbz	x0, 3f1c <PyNumber_FloorDivide@plt+0xabc>
    4064:	sub	w21, w21, #0x6
    4068:	tbz	w21, #31, 4108 <PyNumber_FloorDivide@plt+0xca8>
    406c:	mov	x1, x19
    4070:	mov	x0, x19
    4074:	bl	30d0 <PyNumber_Multiply@plt>
    4078:	mov	x21, x0
    407c:	cbz	x0, 3f20 <PyNumber_FloorDivide@plt+0xac0>
    4080:	mov	x1, x0
    4084:	mov	w2, #0x0                   	// #0
    4088:	mov	x0, x20
    408c:	bl	31f0 <PyObject_RichCompareBool@plt>
    4090:	mov	w22, w0
    4094:	mov	x0, x21
    4098:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    409c:	cmn	w22, #0x1
    40a0:	b.eq	3f20 <PyNumber_FloorDivide@plt+0xac0>  // b.none
    40a4:	cbz	w22, 40cc <PyNumber_FloorDivide@plt+0xc6c>
    40a8:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    40ac:	ldr	x0, [x0, #4008]
    40b0:	ldr	x1, [x0]
    40b4:	mov	x0, x19
    40b8:	bl	3420 <PyNumber_Subtract@plt>
    40bc:	mov	x21, x0
    40c0:	mov	x0, x19
    40c4:	mov	x19, x21
    40c8:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    40cc:	mov	x0, x20
    40d0:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    40d4:	mov	x0, x19
    40d8:	ldp	x19, x20, [sp, #16]
    40dc:	ldp	x21, x22, [sp, #32]
    40e0:	ldp	x23, x24, [sp, #48]
    40e4:	ldp	x25, x26, [sp, #64]
    40e8:	ldr	x27, [sp, #80]
    40ec:	ldp	x29, x30, [sp], #96
    40f0:	ret
    40f4:	mov	w21, #0x6                   	// #6
    40f8:	b	4000 <PyNumber_FloorDivide@plt+0xba0>
    40fc:	bl	32b0 <PyErr_Occurred@plt>
    4100:	cbz	x0, 4044 <PyNumber_FloorDivide@plt+0xbe4>
    4104:	b	3f1c <PyNumber_FloorDivide@plt+0xabc>
    4108:	lsr	x26, x25, x21
    410c:	add	x1, x23, x26
    4110:	sub	x1, x22, x1
    4114:	mov	x0, x20
    4118:	bl	3100 <_PyLong_Rshift@plt>
    411c:	mov	x27, x0
    4120:	cbz	x0, 3f20 <PyNumber_FloorDivide@plt+0xac0>
    4124:	mov	x1, x19
    4128:	bl	3460 <PyNumber_FloorDivide@plt>
    412c:	mov	x24, x0
    4130:	mov	x0, x27
    4134:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4138:	cbz	x24, 3f20 <PyNumber_FloorDivide@plt+0xac0>
    413c:	sub	x1, x26, x23
    4140:	mov	x0, x19
    4144:	sub	x1, x1, #0x1
    4148:	bl	3450 <_PyLong_Lshift@plt>
    414c:	mov	x23, x0
    4150:	mov	x0, x19
    4154:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4158:	cbnz	x23, 4168 <PyNumber_FloorDivide@plt+0xd08>
    415c:	mov	x0, x24
    4160:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4164:	b	3f1c <PyNumber_FloorDivide@plt+0xabc>
    4168:	mov	x1, x24
    416c:	mov	x0, x23
    4170:	bl	3060 <PyNumber_Add@plt>
    4174:	mov	x19, x0
    4178:	mov	x0, x23
    417c:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4180:	mov	x0, x24
    4184:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4188:	cbz	x19, 3f1c <PyNumber_FloorDivide@plt+0xabc>
    418c:	sub	w21, w21, #0x1
    4190:	mov	x23, x26
    4194:	b	4068 <PyNumber_FloorDivide@plt+0xc08>
    4198:	stp	x29, x30, [sp, #-416]!
    419c:	mov	x0, x1
    41a0:	mov	x29, sp
    41a4:	stp	x19, x20, [sp, #16]
    41a8:	stp	x21, x22, [sp, #32]
    41ac:	stp	x23, x24, [sp, #48]
    41b0:	stp	x25, x26, [sp, #64]
    41b4:	stp	d8, d9, [sp, #80]
    41b8:	stp	d10, d11, [sp, #96]
    41bc:	str	d12, [sp, #112]
    41c0:	bl	3370 <PyObject_GetIter@plt>
    41c4:	cbz	x0, 4500 <PyNumber_FloorDivide@plt+0x10a0>
    41c8:	movi	d10, #0x0
    41cc:	adrp	x25, 19000 <_Py_log1p@@Base+0x124a4>
    41d0:	adrp	x26, 19000 <_Py_log1p@@Base+0x124a4>
    41d4:	mov	x23, x0
    41d8:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    41dc:	add	x20, sp, #0xa0
    41e0:	ldr	x25, [x25, #3824]
    41e4:	fmov	d11, d10
    41e8:	ldr	x26, [x26, #3984]
    41ec:	mov	x24, x20
    41f0:	ldr	d12, [x0, #2904]
    41f4:	mov	x22, #0x20                  	// #32
    41f8:	mov	x21, #0x0                   	// #0
    41fc:	mov	x0, x23
    4200:	bl	30b0 <PyIter_Next@plt>
    4204:	mov	x19, x0
    4208:	cbnz	x0, 427c <PyNumber_FloorDivide@plt+0xe1c>
    420c:	bl	32b0 <PyErr_Occurred@plt>
    4210:	cbnz	x0, 423c <PyNumber_FloorDivide@plt+0xddc>
    4214:	fcmp	d11, #0.0
    4218:	b.eq	4428 <PyNumber_FloorDivide@plt+0xfc8>  // b.none
    421c:	fcmp	d10, d10
    4220:	b.vc	4418 <PyNumber_FloorDivide@plt+0xfb8>
    4224:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    4228:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    422c:	add	x1, x1, #0xc16
    4230:	ldr	x0, [x0, #3872]
    4234:	ldr	x0, [x0]
    4238:	bl	3130 <PyErr_SetString@plt>
    423c:	mov	x0, x23
    4240:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4244:	cmp	x20, x24
    4248:	b.eq	4254 <PyNumber_FloorDivide@plt+0xdf4>  // b.none
    424c:	mov	x0, x20
    4250:	bl	3010 <PyMem_Free@plt>
    4254:	mov	x0, x19
    4258:	ldr	d12, [sp, #112]
    425c:	ldp	x19, x20, [sp, #16]
    4260:	ldp	x21, x22, [sp, #32]
    4264:	ldp	x23, x24, [sp, #48]
    4268:	ldp	x25, x26, [sp, #64]
    426c:	ldp	d8, d9, [sp, #80]
    4270:	ldp	d10, d11, [sp, #96]
    4274:	ldp	x29, x30, [sp], #416
    4278:	ret
    427c:	ldr	x1, [x0, #8]
    4280:	cmp	x1, x25
    4284:	b.ne	42e8 <PyNumber_FloorDivide@plt+0xe88>  // b.any
    4288:	ldr	d8, [x0, #16]
    428c:	mov	x0, x19
    4290:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4294:	fmov	d9, d8
    4298:	mov	x0, #0x0                   	// #0
    429c:	mov	x19, #0x0                   	// #0
    42a0:	cmp	x0, x21
    42a4:	b.lt	431c <PyNumber_FloorDivide@plt+0xebc>  // b.tstop
    42a8:	fcmp	d9, #0.0
    42ac:	b.eq	4390 <PyNumber_FloorDivide@plt+0xf30>  // b.none
    42b0:	fabs	d0, d9
    42b4:	fcmp	d0, d12
    42b8:	b.ls	4398 <PyNumber_FloorDivide@plt+0xf38>  // b.plast
    42bc:	fabs	d0, d8
    42c0:	fcmp	d0, d12
    42c4:	b.hi	4380 <PyNumber_FloorDivide@plt+0xf20>  // b.pmore
    42c8:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    42cc:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    42d0:	add	x1, x1, #0xbe5
    42d4:	ldr	x0, [x0, #3936]
    42d8:	ldr	x0, [x0]
    42dc:	bl	3130 <PyErr_SetString@plt>
    42e0:	mov	x19, #0x0                   	// #0
    42e4:	b	423c <PyNumber_FloorDivide@plt+0xddc>
    42e8:	cmp	x1, x26
    42ec:	fmov	d9, #-1.000000000000000000e+00
    42f0:	b.ne	4314 <PyNumber_FloorDivide@plt+0xeb4>  // b.any
    42f4:	bl	3330 <PyLong_AsDouble@plt>
    42f8:	fcmp	d0, d9
    42fc:	fmov	d8, d0
    4300:	b.ne	428c <PyNumber_FloorDivide@plt+0xe2c>  // b.any
    4304:	bl	32b0 <PyErr_Occurred@plt>
    4308:	cbnz	x0, 44f4 <PyNumber_FloorDivide@plt+0x1094>
    430c:	fmov	d8, #-1.000000000000000000e+00
    4310:	b	428c <PyNumber_FloorDivide@plt+0xe2c>
    4314:	bl	32e0 <PyFloat_AsDouble@plt>
    4318:	b	42f8 <PyNumber_FloorDivide@plt+0xe98>
    431c:	ldr	d0, [x20, x0, lsl #3]
    4320:	fabs	d1, d9
    4324:	fabs	d2, d0
    4328:	fcmpe	d1, d2
    432c:	b.pl	433c <PyNumber_FloorDivide@plt+0xedc>  // b.nfrst
    4330:	fmov	d1, d9
    4334:	fmov	d9, d0
    4338:	fmov	d0, d1
    433c:	fadd	d1, d9, d0
    4340:	str	d1, [sp, #136]
    4344:	ldr	d1, [sp, #136]
    4348:	fsub	d9, d1, d9
    434c:	str	d9, [sp, #144]
    4350:	ldr	d1, [sp, #144]
    4354:	fsub	d0, d0, d1
    4358:	str	d0, [sp, #152]
    435c:	ldr	d0, [sp, #152]
    4360:	fcmp	d0, #0.0
    4364:	b.eq	4374 <PyNumber_FloorDivide@plt+0xf14>  // b.none
    4368:	ldr	d0, [sp, #152]
    436c:	str	d0, [x20, x19, lsl #3]
    4370:	add	x19, x19, #0x1
    4374:	add	x0, x0, #0x1
    4378:	ldr	d9, [sp, #136]
    437c:	b	42a0 <PyNumber_FloorDivide@plt+0xe40>
    4380:	b.le	4388 <PyNumber_FloorDivide@plt+0xf28>
    4384:	fadd	d10, d10, d8
    4388:	fadd	d11, d11, d8
    438c:	mov	x19, #0x0                   	// #0
    4390:	mov	x21, x19
    4394:	b	41fc <PyNumber_FloorDivide@plt+0xd9c>
    4398:	cmp	x19, x22
    439c:	b.lt	43f4 <PyNumber_FloorDivide@plt+0xf94>  // b.tstop
    43a0:	lsl	x22, x22, #1
    43a4:	mov	x0, #0xffffffffffffffe     	// #1152921504606846974
    43a8:	cmp	x19, x22
    43ac:	ccmp	x22, x0, #0x2, lt  // lt = tstop
    43b0:	b.ls	43d0 <PyNumber_FloorDivide@plt+0xf70>  // b.plast
    43b4:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    43b8:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    43bc:	add	x1, x1, #0xc03
    43c0:	ldr	x0, [x0, #3864]
    43c4:	b	42d8 <PyNumber_FloorDivide@plt+0xe78>
    43c8:	mov	x20, x24
    43cc:	b	43b4 <PyNumber_FloorDivide@plt+0xf54>
    43d0:	lsl	x0, x22, #3
    43d4:	cmp	x20, x24
    43d8:	b.ne	4400 <PyNumber_FloorDivide@plt+0xfa0>  // b.any
    43dc:	bl	3410 <PyMem_Malloc@plt>
    43e0:	mov	x20, x0
    43e4:	cbz	x0, 43c8 <PyNumber_FloorDivide@plt+0xf68>
    43e8:	lsl	x2, x19, #3
    43ec:	mov	x1, x24
    43f0:	bl	2fc0 <memcpy@plt>
    43f4:	str	d9, [x20, x19, lsl #3]
    43f8:	add	x19, x19, #0x1
    43fc:	b	4390 <PyNumber_FloorDivide@plt+0xf30>
    4400:	mov	x1, x0
    4404:	mov	x0, x20
    4408:	bl	3180 <PyMem_Realloc@plt>
    440c:	cbz	x0, 43b4 <PyNumber_FloorDivide@plt+0xf54>
    4410:	mov	x20, x0
    4414:	b	43f4 <PyNumber_FloorDivide@plt+0xf94>
    4418:	fmov	d0, d11
    441c:	bl	31c0 <PyFloat_FromDouble@plt>
    4420:	mov	x19, x0
    4424:	b	423c <PyNumber_FloorDivide@plt+0xddc>
    4428:	str	xzr, [sp, #136]
    442c:	cmp	x21, #0x0
    4430:	b.le	4444 <PyNumber_FloorDivide@plt+0xfe4>
    4434:	sub	x1, x21, #0x1
    4438:	ldr	d0, [x20, x1, lsl #3]
    443c:	str	d0, [sp, #136]
    4440:	cbnz	x1, 444c <PyNumber_FloorDivide@plt+0xfec>
    4444:	ldr	d0, [sp, #136]
    4448:	b	441c <PyNumber_FloorDivide@plt+0xfbc>
    444c:	sub	x1, x1, #0x1
    4450:	ldr	d2, [sp, #136]
    4454:	lsl	x0, x1, #3
    4458:	ldr	d0, [x20, x1, lsl #3]
    445c:	fadd	d1, d2, d0
    4460:	str	d1, [sp, #136]
    4464:	ldr	d1, [sp, #136]
    4468:	fsub	d1, d1, d2
    446c:	str	d1, [sp, #144]
    4470:	ldr	d1, [sp, #144]
    4474:	fsub	d0, d0, d1
    4478:	str	d0, [sp, #152]
    447c:	ldr	d0, [sp, #152]
    4480:	fcmp	d0, #0.0
    4484:	b.eq	4440 <PyNumber_FloorDivide@plt+0xfe0>  // b.none
    4488:	cbz	x1, 4444 <PyNumber_FloorDivide@plt+0xfe4>
    448c:	ldr	d0, [sp, #152]
    4490:	fcmpe	d0, #0.0
    4494:	b.pl	44a8 <PyNumber_FloorDivide@plt+0x1048>  // b.nfrst
    4498:	add	x1, x20, x0
    449c:	ldur	d0, [x1, #-8]
    44a0:	fcmpe	d0, #0.0
    44a4:	b.mi	44c4 <PyNumber_FloorDivide@plt+0x1064>  // b.first
    44a8:	ldr	d0, [sp, #152]
    44ac:	fcmpe	d0, #0.0
    44b0:	b.le	4444 <PyNumber_FloorDivide@plt+0xfe4>
    44b4:	add	x0, x20, x0
    44b8:	ldur	d0, [x0, #-8]
    44bc:	fcmpe	d0, #0.0
    44c0:	b.le	4444 <PyNumber_FloorDivide@plt+0xfe4>
    44c4:	ldr	d0, [sp, #152]
    44c8:	ldr	d1, [sp, #136]
    44cc:	ldr	d2, [sp, #136]
    44d0:	fadd	d0, d0, d0
    44d4:	fadd	d1, d1, d0
    44d8:	fsub	d2, d1, d2
    44dc:	str	d2, [sp, #144]
    44e0:	ldr	d2, [sp, #144]
    44e4:	fcmp	d2, d0
    44e8:	b.ne	4444 <PyNumber_FloorDivide@plt+0xfe4>  // b.any
    44ec:	str	d1, [sp, #136]
    44f0:	b	4444 <PyNumber_FloorDivide@plt+0xfe4>
    44f4:	mov	x0, x19
    44f8:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    44fc:	b	42e0 <PyNumber_FloorDivide@plt+0xe80>
    4500:	mov	x19, #0x0                   	// #0
    4504:	b	4254 <PyNumber_FloorDivide@plt+0xdf4>
    4508:	stp	x29, x30, [sp, #-112]!
    450c:	cmp	x2, #0x2
    4510:	mov	x29, sp
    4514:	stp	x19, x20, [sp, #16]
    4518:	mov	x19, x1
    451c:	stp	x21, x22, [sp, #32]
    4520:	stp	x23, x24, [sp, #48]
    4524:	stp	x25, x26, [sp, #64]
    4528:	str	x27, [sp, #80]
    452c:	b.ne	4548 <PyNumber_FloorDivide@plt+0x10e8>  // b.any
    4530:	ldp	x0, x22, [x19]
    4534:	bl	33e0 <PyNumber_Index@plt>
    4538:	mov	x21, x0
    453c:	cbnz	x0, 4568 <PyNumber_FloorDivide@plt+0x1108>
    4540:	mov	x19, #0x0                   	// #0
    4544:	b	45b0 <PyNumber_FloorDivide@plt+0x1150>
    4548:	mov	x1, x2
    454c:	mov	x3, #0x2                   	// #2
    4550:	adrp	x0, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    4554:	mov	x2, x3
    4558:	add	x0, x0, #0xc29
    455c:	bl	3280 <_PyArg_CheckPositional@plt>
    4560:	cbnz	w0, 4530 <PyNumber_FloorDivide@plt+0x10d0>
    4564:	b	4540 <PyNumber_FloorDivide@plt+0x10e0>
    4568:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    456c:	mov	x20, x1
    4570:	ldr	x3, [x0, #8]
    4574:	ldr	x2, [x1, #3984]
    4578:	cmp	x3, x2
    457c:	b.eq	4598 <PyNumber_FloorDivide@plt+0x1138>  // b.none
    4580:	bl	3170 <_PyLong_Copy@plt>
    4584:	mov	x19, x0
    4588:	mov	x0, x21
    458c:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4590:	cbz	x19, 4540 <PyNumber_FloorDivide@plt+0x10e0>
    4594:	mov	x21, x19
    4598:	mov	x0, x22
    459c:	bl	33e0 <PyNumber_Index@plt>
    45a0:	mov	x19, x0
    45a4:	cbnz	x0, 45d0 <PyNumber_FloorDivide@plt+0x1170>
    45a8:	mov	x0, x21
    45ac:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    45b0:	mov	x0, x19
    45b4:	ldp	x19, x20, [sp, #16]
    45b8:	ldp	x21, x22, [sp, #32]
    45bc:	ldp	x23, x24, [sp, #48]
    45c0:	ldp	x25, x26, [sp, #64]
    45c4:	ldr	x27, [sp, #80]
    45c8:	ldp	x29, x30, [sp], #112
    45cc:	ret
    45d0:	ldr	x1, [x20, #3984]
    45d4:	ldr	x2, [x0, #8]
    45d8:	cmp	x2, x1
    45dc:	b.eq	45f8 <PyNumber_FloorDivide@plt+0x1198>  // b.none
    45e0:	bl	3170 <_PyLong_Copy@plt>
    45e4:	mov	x20, x0
    45e8:	mov	x0, x19
    45ec:	mov	x19, x20
    45f0:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    45f4:	cbz	x20, 45a8 <PyNumber_FloorDivide@plt+0x1148>
    45f8:	ldr	x0, [x21, #16]
    45fc:	tbz	x0, #63, 4624 <PyNumber_FloorDivide@plt+0x11c4>
    4600:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    4604:	add	x1, x1, #0xc2e
    4608:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    460c:	ldr	x0, [x0, #3872]
    4610:	ldr	x0, [x0]
    4614:	bl	3130 <PyErr_SetString@plt>
    4618:	mov	x23, #0x0                   	// #0
    461c:	mov	x20, #0x0                   	// #0
    4620:	b	47c8 <PyNumber_FloorDivide@plt+0x1368>
    4624:	ldr	x0, [x19, #16]
    4628:	tbz	x0, #63, 4638 <PyNumber_FloorDivide@plt+0x11d8>
    462c:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    4630:	add	x1, x1, #0xc4f
    4634:	b	4608 <PyNumber_FloorDivide@plt+0x11a8>
    4638:	mov	x1, x19
    463c:	mov	x0, x21
    4640:	bl	3420 <PyNumber_Subtract@plt>
    4644:	mov	x20, x0
    4648:	cbz	x0, 47c4 <PyNumber_FloorDivide@plt+0x1364>
    464c:	ldr	x1, [x0, #16]
    4650:	tbz	x1, #63, 467c <PyNumber_FloorDivide@plt+0x121c>
    4654:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4658:	mov	x0, #0x0                   	// #0
    465c:	bl	31e0 <PyLong_FromLong@plt>
    4660:	mov	x22, x0
    4664:	mov	x0, x21
    4668:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    466c:	mov	x0, x19
    4670:	mov	x19, x22
    4674:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4678:	b	45b0 <PyNumber_FloorDivide@plt+0x1150>
    467c:	mov	x1, x19
    4680:	mov	w2, #0x0                   	// #0
    4684:	bl	31f0 <PyObject_RichCompareBool@plt>
    4688:	mov	w22, w0
    468c:	cmp	w0, #0x0
    4690:	b.le	46dc <PyNumber_FloorDivide@plt+0x127c>
    4694:	mov	x0, x19
    4698:	mov	x19, x20
    469c:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    46a0:	add	x1, sp, #0x6c
    46a4:	mov	x0, x19
    46a8:	bl	2fe0 <PyLong_AsLongLongAndOverflow@plt>
    46ac:	mov	x24, x0
    46b0:	ldr	w0, [sp, #108]
    46b4:	cmp	w0, #0x0
    46b8:	b.le	46ec <PyNumber_FloorDivide@plt+0x128c>
    46bc:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    46c0:	mov	x2, #0x7fffffffffffffff    	// #9223372036854775807
    46c4:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    46c8:	add	x1, x1, #0xc70
    46cc:	ldr	x0, [x0, #3936]
    46d0:	ldr	x0, [x0]
    46d4:	bl	33c0 <PyErr_Format@plt>
    46d8:	b	4618 <PyNumber_FloorDivide@plt+0x11b8>
    46dc:	mov	x0, x20
    46e0:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    46e4:	cbz	w22, 46a0 <PyNumber_FloorDivide@plt+0x1240>
    46e8:	b	4618 <PyNumber_FloorDivide@plt+0x11b8>
    46ec:	cmn	x24, #0x1
    46f0:	b.eq	4618 <PyNumber_FloorDivide@plt+0x11b8>  // b.none
    46f4:	cbnz	x24, 4700 <PyNumber_FloorDivide@plt+0x12a0>
    46f8:	mov	x0, #0x1                   	// #1
    46fc:	b	465c <PyNumber_FloorDivide@plt+0x11fc>
    4700:	cmp	x24, #0x1
    4704:	ldr	x0, [x21]
    4708:	b.ne	471c <PyNumber_FloorDivide@plt+0x12bc>  // b.any
    470c:	add	x0, x0, #0x1
    4710:	mov	x22, x21
    4714:	str	x0, [x21]
    4718:	b	4664 <PyNumber_FloorDivide@plt+0x1204>
    471c:	adrp	x25, 19000 <_Py_log1p@@Base+0x124a4>
    4720:	mov	x20, x21
    4724:	mov	x22, x21
    4728:	add	x0, x0, #0x2
    472c:	ldr	x25, [x25, #4008]
    4730:	mov	x26, #0x1                   	// #1
    4734:	str	x0, [x21]
    4738:	cmp	x24, x26
    473c:	b.gt	474c <PyNumber_FloorDivide@plt+0x12ec>
    4740:	mov	x0, x20
    4744:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4748:	b	4664 <PyNumber_FloorDivide@plt+0x1204>
    474c:	ldr	x1, [x25]
    4750:	mov	x0, x20
    4754:	bl	3420 <PyNumber_Subtract@plt>
    4758:	mov	x23, x0
    475c:	mov	x0, x20
    4760:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4764:	cbz	x23, 47ec <PyNumber_FloorDivide@plt+0x138c>
    4768:	mov	x1, x23
    476c:	mov	x0, x22
    4770:	bl	30d0 <PyNumber_Multiply@plt>
    4774:	mov	x20, x0
    4778:	mov	x0, x22
    477c:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4780:	cbz	x20, 47c8 <PyNumber_FloorDivide@plt+0x1368>
    4784:	add	x26, x26, #0x1
    4788:	mov	x0, x26
    478c:	bl	3040 <PyLong_FromUnsignedLongLong@plt>
    4790:	mov	x27, x0
    4794:	cbz	x0, 47c8 <PyNumber_FloorDivide@plt+0x1368>
    4798:	mov	x1, x0
    479c:	mov	x0, x20
    47a0:	bl	3460 <PyNumber_FloorDivide@plt>
    47a4:	mov	x22, x0
    47a8:	mov	x0, x20
    47ac:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    47b0:	mov	x0, x27
    47b4:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    47b8:	cbz	x22, 461c <PyNumber_FloorDivide@plt+0x11bc>
    47bc:	mov	x20, x23
    47c0:	b	4738 <PyNumber_FloorDivide@plt+0x12d8>
    47c4:	mov	x23, #0x0                   	// #0
    47c8:	mov	x0, x23
    47cc:	bl	3ebc <PyNumber_FloorDivide@plt+0xa5c>
    47d0:	mov	x0, x20
    47d4:	bl	3ebc <PyNumber_FloorDivide@plt+0xa5c>
    47d8:	mov	x0, x21
    47dc:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    47e0:	mov	x0, x19
    47e4:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    47e8:	b	4540 <PyNumber_FloorDivide@plt+0x10e0>
    47ec:	mov	x20, x22
    47f0:	b	47c8 <PyNumber_FloorDivide@plt+0x1368>
    47f4:	sub	sp, sp, #0x80
    47f8:	mov	x0, x1
    47fc:	mov	x1, x2
    4800:	stp	x29, x30, [sp, #16]
    4804:	add	x29, sp, #0x10
    4808:	stp	x19, x20, [sp, #32]
    480c:	stp	x21, x22, [sp, #48]
    4810:	stp	x23, x24, [sp, #64]
    4814:	str	d8, [sp, #80]
    4818:	cbz	x3, 4868 <PyNumber_FloorDivide@plt+0x1408>
    481c:	ldr	x2, [x3, #16]
    4820:	cmp	x3, #0x0
    4824:	add	x19, x2, x1
    4828:	ccmp	x1, #0x1, #0x0, eq  // eq = none
    482c:	b.ne	4834 <PyNumber_FloorDivide@plt+0x13d4>  // b.any
    4830:	cbnz	x0, 4870 <PyNumber_FloorDivide@plt+0x1410>
    4834:	add	x2, sp, #0x70
    4838:	str	x2, [sp]
    483c:	adrp	x4, 1a000 <_Py_log1p@@Base+0x134a4>
    4840:	add	x4, x4, #0x260
    4844:	mov	w6, #0x1                   	// #1
    4848:	add	x4, x4, #0x40
    484c:	mov	w5, w6
    4850:	mov	w7, #0x0                   	// #0
    4854:	mov	x2, #0x0                   	// #0
    4858:	bl	3120 <_PyArg_UnpackKeywords@plt>
    485c:	cbnz	x0, 4870 <PyNumber_FloorDivide@plt+0x1410>
    4860:	mov	x19, #0x0                   	// #0
    4864:	b	4938 <PyNumber_FloorDivide@plt+0x14d8>
    4868:	mov	x2, #0x0                   	// #0
    486c:	b	4820 <PyNumber_FloorDivide@plt+0x13c0>
    4870:	cmp	x19, #0x1
    4874:	ldr	x1, [x0]
    4878:	b.eq	48b0 <PyNumber_FloorDivide@plt+0x1450>  // b.none
    487c:	ldr	x19, [x0, #8]
    4880:	mov	x0, x1
    4884:	bl	3370 <PyObject_GetIter@plt>
    4888:	mov	x20, x0
    488c:	cbz	x0, 4860 <PyNumber_FloorDivide@plt+0x1400>
    4890:	cbnz	x19, 48b8 <PyNumber_FloorDivide@plt+0x1458>
    4894:	mov	x0, #0x1                   	// #1
    4898:	bl	31e0 <PyLong_FromLong@plt>
    489c:	mov	x19, x0
    48a0:	cbnz	x0, 48c4 <PyNumber_FloorDivide@plt+0x1464>
    48a4:	mov	x0, x20
    48a8:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    48ac:	b	4938 <PyNumber_FloorDivide@plt+0x14d8>
    48b0:	mov	x19, #0x0                   	// #0
    48b4:	b	4880 <PyNumber_FloorDivide@plt+0x1420>
    48b8:	ldr	x0, [x19]
    48bc:	add	x0, x0, #0x1
    48c0:	str	x0, [x19]
    48c4:	adrp	x23, 19000 <_Py_log1p@@Base+0x124a4>
    48c8:	ldr	x21, [x19, #8]
    48cc:	ldr	x0, [x23, #3984]
    48d0:	cmp	x21, x0
    48d4:	b.ne	4a10 <PyNumber_FloorDivide@plt+0x15b0>  // b.any
    48d8:	add	x24, sp, #0x6c
    48dc:	mov	x0, x19
    48e0:	mov	x1, x24
    48e4:	bl	3290 <PyLong_AsLongAndOverflow@plt>
    48e8:	mov	x22, x0
    48ec:	ldr	w0, [sp, #108]
    48f0:	cbnz	w0, 4a10 <PyNumber_FloorDivide@plt+0x15b0>
    48f4:	mov	x0, x19
    48f8:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    48fc:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    4900:	mov	x19, x21
    4904:	ldr	d8, [x0, #3008]
    4908:	mov	x0, x20
    490c:	bl	30b0 <PyIter_Next@plt>
    4910:	mov	x21, x0
    4914:	cbnz	x0, 4958 <PyNumber_FloorDivide@plt+0x14f8>
    4918:	mov	x0, x20
    491c:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4920:	bl	32b0 <PyErr_Occurred@plt>
    4924:	cbnz	x0, 4934 <PyNumber_FloorDivide@plt+0x14d4>
    4928:	mov	x0, x22
    492c:	bl	31e0 <PyLong_FromLong@plt>
    4930:	mov	x21, x0
    4934:	mov	x19, x21
    4938:	mov	x0, x19
    493c:	ldr	d8, [sp, #80]
    4940:	ldp	x29, x30, [sp, #16]
    4944:	ldp	x19, x20, [sp, #32]
    4948:	ldp	x21, x22, [sp, #48]
    494c:	ldp	x23, x24, [sp, #64]
    4950:	add	sp, sp, #0x80
    4954:	ret
    4958:	ldr	x1, [x0, #8]
    495c:	cmp	x1, x19
    4960:	b.ne	49c8 <PyNumber_FloorDivide@plt+0x1568>  // b.any
    4964:	mov	x1, x24
    4968:	bl	3290 <PyLong_AsLongAndOverflow@plt>
    496c:	ldr	w1, [sp, #108]
    4970:	cbnz	w1, 49c8 <PyNumber_FloorDivide@plt+0x1568>
    4974:	scvtf	d1, x0
    4978:	scvtf	d0, x22
    497c:	mul	x0, x22, x0
    4980:	fmul	d0, d0, d1
    4984:	scvtf	d1, x0
    4988:	fcmp	d0, d1
    498c:	b.eq	49b8 <PyNumber_FloorDivide@plt+0x1558>  // b.none
    4990:	fsub	d1, d1, d0
    4994:	fcmpe	d1, #0.0
    4998:	b.ge	49a0 <PyNumber_FloorDivide@plt+0x1540>  // b.tcont
    499c:	fneg	d1, d1
    49a0:	fcmpe	d0, #0.0
    49a4:	b.ge	49ac <PyNumber_FloorDivide@plt+0x154c>  // b.tcont
    49a8:	fneg	d0, d0
    49ac:	fmul	d1, d1, d8
    49b0:	fcmpe	d1, d0
    49b4:	b.hi	49c8 <PyNumber_FloorDivide@plt+0x1568>  // b.pmore
    49b8:	mov	x22, x0
    49bc:	mov	x0, x21
    49c0:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    49c4:	b	4908 <PyNumber_FloorDivide@plt+0x14a8>
    49c8:	mov	x0, x22
    49cc:	bl	31e0 <PyLong_FromLong@plt>
    49d0:	mov	x22, x0
    49d4:	cbnz	x0, 49f0 <PyNumber_FloorDivide@plt+0x1590>
    49d8:	mov	x0, x21
    49dc:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    49e0:	mov	x0, x20
    49e4:	mov	x21, #0x0                   	// #0
    49e8:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    49ec:	b	4934 <PyNumber_FloorDivide@plt+0x14d4>
    49f0:	mov	x1, x21
    49f4:	bl	30d0 <PyNumber_Multiply@plt>
    49f8:	mov	x19, x0
    49fc:	mov	x0, x22
    4a00:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4a04:	mov	x0, x21
    4a08:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4a0c:	cbz	x19, 49e0 <PyNumber_FloorDivide@plt+0x1580>
    4a10:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    4a14:	ldr	x21, [x19, #8]
    4a18:	ldr	x0, [x0, #3824]
    4a1c:	cmp	x21, x0
    4a20:	b.ne	4af8 <PyNumber_FloorDivide@plt+0x1698>  // b.any
    4a24:	ldr	d8, [x19, #16]
    4a28:	mov	x0, x19
    4a2c:	add	x22, sp, #0x6c
    4a30:	mov	x19, x21
    4a34:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4a38:	ldr	x23, [x23, #3984]
    4a3c:	mov	x0, x20
    4a40:	bl	30b0 <PyIter_Next@plt>
    4a44:	mov	x21, x0
    4a48:	cbnz	x0, 4a6c <PyNumber_FloorDivide@plt+0x160c>
    4a4c:	mov	x0, x20
    4a50:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4a54:	bl	32b0 <PyErr_Occurred@plt>
    4a58:	cbnz	x0, 4860 <PyNumber_FloorDivide@plt+0x1400>
    4a5c:	fmov	d0, d8
    4a60:	bl	31c0 <PyFloat_FromDouble@plt>
    4a64:	mov	x19, x0
    4a68:	b	4938 <PyNumber_FloorDivide@plt+0x14d8>
    4a6c:	ldr	x1, [x0, #8]
    4a70:	cmp	x1, x19
    4a74:	b.ne	4a88 <PyNumber_FloorDivide@plt+0x1628>  // b.any
    4a78:	ldr	d0, [x0, #16]
    4a7c:	fmul	d8, d8, d0
    4a80:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4a84:	b	4a3c <PyNumber_FloorDivide@plt+0x15dc>
    4a88:	cmp	x1, x23
    4a8c:	b.ne	4ab4 <PyNumber_FloorDivide@plt+0x1654>  // b.any
    4a90:	mov	x1, x22
    4a94:	bl	3290 <PyLong_AsLongAndOverflow@plt>
    4a98:	fmov	d0, x0
    4a9c:	ldr	w0, [sp, #108]
    4aa0:	cbnz	w0, 4ab4 <PyNumber_FloorDivide@plt+0x1654>
    4aa4:	scvtf	d0, d0
    4aa8:	mov	x0, x21
    4aac:	fmul	d8, d8, d0
    4ab0:	b	4a80 <PyNumber_FloorDivide@plt+0x1620>
    4ab4:	fmov	d0, d8
    4ab8:	bl	31c0 <PyFloat_FromDouble@plt>
    4abc:	mov	x22, x0
    4ac0:	cbnz	x0, 4ad8 <PyNumber_FloorDivide@plt+0x1678>
    4ac4:	mov	x0, x21
    4ac8:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4acc:	mov	x0, x20
    4ad0:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4ad4:	b	4860 <PyNumber_FloorDivide@plt+0x1400>
    4ad8:	mov	x1, x21
    4adc:	bl	30d0 <PyNumber_Multiply@plt>
    4ae0:	mov	x19, x0
    4ae4:	mov	x0, x22
    4ae8:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4aec:	mov	x0, x21
    4af0:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4af4:	cbz	x19, 48a4 <PyNumber_FloorDivide@plt+0x1444>
    4af8:	mov	x0, x20
    4afc:	bl	30b0 <PyIter_Next@plt>
    4b00:	mov	x21, x0
    4b04:	cbnz	x0, 4b20 <PyNumber_FloorDivide@plt+0x16c0>
    4b08:	bl	32b0 <PyErr_Occurred@plt>
    4b0c:	cbz	x0, 48a4 <PyNumber_FloorDivide@plt+0x1444>
    4b10:	mov	x0, x19
    4b14:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4b18:	mov	x19, #0x0                   	// #0
    4b1c:	b	48a4 <PyNumber_FloorDivide@plt+0x1444>
    4b20:	mov	x1, x0
    4b24:	mov	x0, x19
    4b28:	bl	30d0 <PyNumber_Multiply@plt>
    4b2c:	mov	x22, x0
    4b30:	mov	x0, x19
    4b34:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4b38:	mov	x0, x21
    4b3c:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    4b40:	cbz	x22, 4b18 <PyNumber_FloorDivide@plt+0x16b8>
    4b44:	mov	x19, x22
    4b48:	b	4af8 <PyNumber_FloorDivide@plt+0x1698>
    4b4c:	stp	x29, x30, [sp, #-32]!
    4b50:	mov	x29, sp
    4b54:	str	d8, [sp, #16]
    4b58:	fmov	d8, d0
    4b5c:	bl	33f0 <__errno_location@plt>
    4b60:	ldr	w0, [x0]
    4b64:	cmp	w0, #0x21
    4b68:	b.ne	4b94 <PyNumber_FloorDivide@plt+0x1734>  // b.any
    4b6c:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    4b70:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    4b74:	add	x1, x1, #0xc93
    4b78:	ldr	x0, [x0, #3872]
    4b7c:	ldr	x0, [x0]
    4b80:	bl	3130 <PyErr_SetString@plt>
    4b84:	mov	w0, #0x1                   	// #1
    4b88:	ldr	d8, [sp, #16]
    4b8c:	ldp	x29, x30, [sp], #32
    4b90:	ret
    4b94:	cmp	w0, #0x22
    4b98:	b.ne	4bc0 <PyNumber_FloorDivide@plt+0x1760>  // b.any
    4b9c:	fabs	d0, d8
    4ba0:	fmov	d1, #1.000000000000000000e+00
    4ba4:	fcmpe	d0, d1
    4ba8:	b.mi	4bd4 <PyNumber_FloorDivide@plt+0x1774>  // b.first
    4bac:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    4bb0:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    4bb4:	add	x1, x1, #0xca5
    4bb8:	ldr	x0, [x0, #3936]
    4bbc:	b	4b7c <PyNumber_FloorDivide@plt+0x171c>
    4bc0:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    4bc4:	ldr	x0, [x0, #3872]
    4bc8:	ldr	x0, [x0]
    4bcc:	bl	3030 <PyErr_SetFromErrno@plt>
    4bd0:	b	4b84 <PyNumber_FloorDivide@plt+0x1724>
    4bd4:	mov	w0, #0x0                   	// #0
    4bd8:	b	4b88 <PyNumber_FloorDivide@plt+0x1728>
    4bdc:	stp	x29, x30, [sp, #-64]!
    4be0:	mov	x29, sp
    4be4:	stp	x19, x20, [sp, #16]
    4be8:	mov	x20, x2
    4bec:	stp	x21, x22, [sp, #32]
    4bf0:	mov	x22, x1
    4bf4:	mov	w21, w3
    4bf8:	stp	d8, d9, [sp, #48]
    4bfc:	bl	32e0 <PyFloat_AsDouble@plt>
    4c00:	fmov	d8, d0
    4c04:	fmov	d0, #-1.000000000000000000e+00
    4c08:	fcmp	d8, d0
    4c0c:	b.eq	4c50 <PyNumber_FloorDivide@plt+0x17f0>  // b.none
    4c10:	bl	33f0 <__errno_location@plt>
    4c14:	fmov	d0, d8
    4c18:	str	wzr, [x0]
    4c1c:	mov	x19, x0
    4c20:	blr	x22
    4c24:	fcmp	d0, d0
    4c28:	fmov	d9, d0
    4c2c:	fccmp	d8, d8, #0x1, vs
    4c30:	b.vs	4c70 <PyNumber_FloorDivide@plt+0x1810>
    4c34:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    4c38:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    4c3c:	add	x1, x1, #0xc93
    4c40:	ldr	x0, [x0, #3872]
    4c44:	ldr	x0, [x0]
    4c48:	bl	3130 <PyErr_SetString@plt>
    4c4c:	b	4c58 <PyNumber_FloorDivide@plt+0x17f8>
    4c50:	bl	32b0 <PyErr_Occurred@plt>
    4c54:	cbz	x0, 4c10 <PyNumber_FloorDivide@plt+0x17b0>
    4c58:	mov	x0, #0x0                   	// #0
    4c5c:	ldp	x19, x20, [sp, #16]
    4c60:	ldp	x21, x22, [sp, #32]
    4c64:	ldp	d8, d9, [sp, #48]
    4c68:	ldp	x29, x30, [sp], #64
    4c6c:	ret
    4c70:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    4c74:	fabs	d1, d0
    4c78:	ldr	d0, [x0, #2904]
    4c7c:	fcmp	d1, d0
    4c80:	fmov	d2, d0
    4c84:	b.le	4cac <PyNumber_FloorDivide@plt+0x184c>
    4c88:	fabs	d8, d8
    4c8c:	fcmp	d8, d0
    4c90:	b.hi	4cac <PyNumber_FloorDivide@plt+0x184c>  // b.pmore
    4c94:	cbz	w21, 4c34 <PyNumber_FloorDivide@plt+0x17d4>
    4c98:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    4c9c:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    4ca0:	add	x1, x1, #0xca5
    4ca4:	ldr	x0, [x0, #3936]
    4ca8:	b	4c44 <PyNumber_FloorDivide@plt+0x17e4>
    4cac:	fcmp	d1, d2
    4cb0:	b.ls	4cd0 <PyNumber_FloorDivide@plt+0x1870>  // b.plast
    4cb4:	fmov	d0, d9
    4cb8:	mov	x16, x20
    4cbc:	ldp	x19, x20, [sp, #16]
    4cc0:	ldp	x21, x22, [sp, #32]
    4cc4:	ldp	d8, d9, [sp, #48]
    4cc8:	ldp	x29, x30, [sp], #64
    4ccc:	br	x16
    4cd0:	ldr	w0, [x19]
    4cd4:	cbz	w0, 4cb4 <PyNumber_FloorDivide@plt+0x1854>
    4cd8:	fmov	d0, d9
    4cdc:	bl	4b4c <PyNumber_FloorDivide@plt+0x16ec>
    4ce0:	cbz	w0, 4cb4 <PyNumber_FloorDivide@plt+0x1854>
    4ce4:	b	4c58 <PyNumber_FloorDivide@plt+0x17f8>
    4ce8:	mov	w3, w2
    4cec:	adrp	x2, 19000 <_Py_log1p@@Base+0x124a4>
    4cf0:	ldr	x2, [x2, #3904]
    4cf4:	b	4bdc <PyNumber_FloorDivide@plt+0x177c>
    4cf8:	mov	x0, x1
    4cfc:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4d00:	mov	w2, #0x0                   	// #0
    4d04:	ldr	x1, [x1, #3920]
    4d08:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4d0c:	mov	x0, x1
    4d10:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4d14:	mov	w2, #0x0                   	// #0
    4d18:	ldr	x1, [x1, #4032]
    4d1c:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4d20:	mov	x0, x1
    4d24:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4d28:	mov	w2, #0x0                   	// #0
    4d2c:	ldr	x1, [x1, #3856]
    4d30:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4d34:	mov	x0, x1
    4d38:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4d3c:	mov	w2, #0x1                   	// #1
    4d40:	ldr	x1, [x1, #3968]
    4d44:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4d48:	mov	x0, x1
    4d4c:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4d50:	mov	w2, #0x0                   	// #0
    4d54:	ldr	x1, [x1, #3912]
    4d58:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4d5c:	mov	x0, x1
    4d60:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4d64:	mov	w2, #0x0                   	// #0
    4d68:	ldr	x1, [x1, #4016]
    4d6c:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4d70:	mov	x0, x1
    4d74:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4d78:	mov	w2, #0x0                   	// #0
    4d7c:	ldr	x1, [x1, #3880]
    4d80:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4d84:	mov	x0, x1
    4d88:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4d8c:	mov	w2, #0x1                   	// #1
    4d90:	ldr	x1, [x1, #3840]
    4d94:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4d98:	mov	x0, x1
    4d9c:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4da0:	mov	w2, #0x1                   	// #1
    4da4:	ldr	x1, [x1, #4064]
    4da8:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4dac:	mov	x0, x1
    4db0:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4db4:	mov	w2, #0x1                   	// #1
    4db8:	ldr	x1, [x1, #3976]
    4dbc:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4dc0:	mov	x0, x1
    4dc4:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4dc8:	mov	w2, #0x0                   	// #0
    4dcc:	ldr	x1, [x1, #4048]
    4dd0:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4dd4:	mov	x0, x1
    4dd8:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4ddc:	mov	w2, #0x0                   	// #0
    4de0:	ldr	x1, [x1, #4024]
    4de4:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4de8:	mov	x0, x1
    4dec:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4df0:	mov	w2, #0x0                   	// #0
    4df4:	ldr	x1, [x1, #4056]
    4df8:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4dfc:	mov	x0, x1
    4e00:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4e04:	mov	w2, #0x0                   	// #0
    4e08:	ldr	x1, [x1, #3944]
    4e0c:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4e10:	mov	x0, x1
    4e14:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4e18:	mov	w2, #0x0                   	// #0
    4e1c:	ldr	x1, [x1, #3816]
    4e20:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4e24:	mov	x0, x1
    4e28:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4e2c:	mov	w2, #0x0                   	// #0
    4e30:	ldr	x1, [x1, #3896]
    4e34:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4e38:	mov	x0, x1
    4e3c:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    4e40:	mov	w2, #0x0                   	// #0
    4e44:	ldr	x1, [x1, #3952]
    4e48:	b	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    4e4c:	stp	x29, x30, [sp, #-64]!
    4e50:	cmp	x1, #0x2
    4e54:	mov	x29, sp
    4e58:	stp	x19, x20, [sp, #16]
    4e5c:	mov	x19, x0
    4e60:	mov	x20, x2
    4e64:	stp	d8, d9, [sp, #32]
    4e68:	str	d10, [sp, #48]
    4e6c:	b.ne	4ee4 <PyNumber_FloorDivide@plt+0x1a84>  // b.any
    4e70:	ldr	x0, [x19]
    4e74:	bl	32e0 <PyFloat_AsDouble@plt>
    4e78:	fmov	d9, d0
    4e7c:	ldr	x0, [x19, #8]
    4e80:	bl	32e0 <PyFloat_AsDouble@plt>
    4e84:	fmov	d8, d0
    4e88:	fmov	d0, #-1.000000000000000000e+00
    4e8c:	fcmp	d9, d0
    4e90:	fccmp	d8, d0, #0x4, ne  // ne = any
    4e94:	b.ne	4ea0 <PyNumber_FloorDivide@plt+0x1a40>  // b.any
    4e98:	bl	32b0 <PyErr_Occurred@plt>
    4e9c:	cbnz	x0, 4ef8 <PyNumber_FloorDivide@plt+0x1a98>
    4ea0:	bl	33f0 <__errno_location@plt>
    4ea4:	fmov	d1, d8
    4ea8:	fmov	d0, d9
    4eac:	str	wzr, [x0]
    4eb0:	mov	x19, x0
    4eb4:	blr	x20
    4eb8:	fcmp	d0, d0
    4ebc:	fmov	d10, d0
    4ec0:	b.vc	4f10 <PyNumber_FloorDivide@plt+0x1ab0>
    4ec4:	fcmp	d9, d8
    4ec8:	b.vs	4f44 <PyNumber_FloorDivide@plt+0x1ae4>
    4ecc:	mov	w0, #0x21                  	// #33
    4ed0:	str	w0, [x19]
    4ed4:	fmov	d0, d10
    4ed8:	bl	4b4c <PyNumber_FloorDivide@plt+0x16ec>
    4edc:	cbz	w0, 4f48 <PyNumber_FloorDivide@plt+0x1ae8>
    4ee0:	b	4ef8 <PyNumber_FloorDivide@plt+0x1a98>
    4ee4:	mov	x0, x3
    4ee8:	mov	x3, #0x2                   	// #2
    4eec:	mov	x2, x3
    4ef0:	bl	3280 <_PyArg_CheckPositional@plt>
    4ef4:	cbnz	w0, 4e70 <PyNumber_FloorDivide@plt+0x1a10>
    4ef8:	mov	x0, #0x0                   	// #0
    4efc:	ldr	d10, [sp, #48]
    4f00:	ldp	x19, x20, [sp, #16]
    4f04:	ldp	d8, d9, [sp, #32]
    4f08:	ldp	x29, x30, [sp], #64
    4f0c:	ret
    4f10:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    4f14:	fabs	d1, d0
    4f18:	ldr	d0, [x0, #2904]
    4f1c:	fcmp	d1, d0
    4f20:	b.le	4f60 <PyNumber_FloorDivide@plt+0x1b00>
    4f24:	fabs	d9, d9
    4f28:	fcmp	d9, d0
    4f2c:	b.hi	4f44 <PyNumber_FloorDivide@plt+0x1ae4>  // b.pmore
    4f30:	fabs	d8, d8
    4f34:	fcmp	d8, d0
    4f38:	b.hi	4f44 <PyNumber_FloorDivide@plt+0x1ae4>  // b.pmore
    4f3c:	mov	w0, #0x22                  	// #34
    4f40:	b	4ed0 <PyNumber_FloorDivide@plt+0x1a70>
    4f44:	str	wzr, [x19]
    4f48:	fmov	d0, d10
    4f4c:	ldr	d10, [sp, #48]
    4f50:	ldp	x19, x20, [sp, #16]
    4f54:	ldp	d8, d9, [sp, #32]
    4f58:	ldp	x29, x30, [sp], #64
    4f5c:	b	31c0 <PyFloat_FromDouble@plt>
    4f60:	ldr	w0, [x19]
    4f64:	cbnz	w0, 4ed4 <PyNumber_FloorDivide@plt+0x1a74>
    4f68:	b	4f48 <PyNumber_FloorDivide@plt+0x1ae8>
    4f6c:	mov	x0, x1
    4f70:	adrp	x3, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    4f74:	mov	x1, x2
    4f78:	add	x3, x3, #0xcb6
    4f7c:	adrp	x2, 3000 <PyLong_FromDouble@plt>
    4f80:	add	x2, x2, #0x620
    4f84:	b	4e4c <PyNumber_FloorDivide@plt+0x19ec>
    4f88:	mov	x0, x1
    4f8c:	mov	x1, x2
    4f90:	adrp	x2, 19000 <_Py_log1p@@Base+0x124a4>
    4f94:	adrp	x3, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    4f98:	add	x3, x3, #0xcc0
    4f9c:	ldr	x2, [x2, #3800]
    4fa0:	b	4e4c <PyNumber_FloorDivide@plt+0x19ec>
    4fa4:	mov	x0, x1
    4fa8:	adrp	x3, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    4fac:	mov	x1, x2
    4fb0:	add	x3, x3, #0xcc9
    4fb4:	adrp	x2, 5000 <PyNumber_FloorDivide@plt+0x1ba0>
    4fb8:	add	x2, x2, #0xfcc
    4fbc:	b	4e4c <PyNumber_FloorDivide@plt+0x19ec>
    4fc0:	stp	x29, x30, [sp, #-48]!
    4fc4:	mov	x29, sp
    4fc8:	stp	x19, x20, [sp, #16]
    4fcc:	mov	x20, x1
    4fd0:	str	d8, [sp, #32]
    4fd4:	bl	32e0 <PyFloat_AsDouble@plt>
    4fd8:	fmov	d8, d0
    4fdc:	fmov	d0, #-1.000000000000000000e+00
    4fe0:	fcmp	d8, d0
    4fe4:	b.eq	501c <PyNumber_FloorDivide@plt+0x1bbc>  // b.none
    4fe8:	bl	33f0 <__errno_location@plt>
    4fec:	fmov	d0, d8
    4ff0:	mov	x19, x0
    4ff4:	str	wzr, [x0]
    4ff8:	blr	x20
    4ffc:	fmov	d8, d0
    5000:	ldr	w0, [x19]
    5004:	cbnz	w0, 5038 <PyNumber_FloorDivide@plt+0x1bd8>
    5008:	fmov	d0, d8
    500c:	ldr	d8, [sp, #32]
    5010:	ldp	x19, x20, [sp, #16]
    5014:	ldp	x29, x30, [sp], #48
    5018:	b	31c0 <PyFloat_FromDouble@plt>
    501c:	bl	32b0 <PyErr_Occurred@plt>
    5020:	cbz	x0, 4fe8 <PyNumber_FloorDivide@plt+0x1b88>
    5024:	mov	x0, #0x0                   	// #0
    5028:	ldr	d8, [sp, #32]
    502c:	ldp	x19, x20, [sp, #16]
    5030:	ldp	x29, x30, [sp], #48
    5034:	ret
    5038:	bl	4b4c <PyNumber_FloorDivide@plt+0x16ec>
    503c:	cbz	w0, 5008 <PyNumber_FloorDivide@plt+0x1ba8>
    5040:	b	5024 <PyNumber_FloorDivide@plt+0x1bc4>
    5044:	mov	x0, x1
    5048:	adrp	x1, 3000 <PyLong_FromDouble@plt>
    504c:	add	x1, x1, #0x7c4
    5050:	b	4fc0 <PyNumber_FloorDivide@plt+0x1b60>
    5054:	mov	x0, x1
    5058:	adrp	x1, 3000 <PyLong_FromDouble@plt>
    505c:	add	x1, x1, #0x904
    5060:	b	4fc0 <PyNumber_FloorDivide@plt+0x1b60>
    5064:	mov	x0, x1
    5068:	adrp	x1, 3000 <PyLong_FromDouble@plt>
    506c:	add	x1, x1, #0xb64
    5070:	b	4fc0 <PyNumber_FloorDivide@plt+0x1b60>
    5074:	mov	x0, x1
    5078:	adrp	x1, 3000 <PyLong_FromDouble@plt>
    507c:	add	x1, x1, #0xb68
    5080:	b	4fc0 <PyNumber_FloorDivide@plt+0x1b60>
    5084:	stp	x29, x30, [sp, #-32]!
    5088:	fmov	d1, #1.000000000000000000e+00
    508c:	mov	x2, #0x0                   	// #0
    5090:	mov	x29, sp
    5094:	fmov	d5, d1
    5098:	str	d8, [sp, #16]
    509c:	fmov	d8, d0
    50a0:	movi	d0, #0x0
    50a4:	cmp	x2, x0
    50a8:	b.lt	50c8 <PyNumber_FloorDivide@plt+0x1c68>  // b.tstop
    50ac:	fsub	d1, d1, d5
    50b0:	fadd	d0, d1, d0
    50b4:	bl	3110 <sqrt@plt>
    50b8:	fmul	d0, d8, d0
    50bc:	ldr	d8, [sp, #16]
    50c0:	ldp	x29, x30, [sp], #32
    50c4:	ret
    50c8:	ldr	d2, [x1, x2, lsl #3]
    50cc:	add	x2, x2, #0x1
    50d0:	fdiv	d2, d2, d8
    50d4:	fmul	d3, d2, d2
    50d8:	fadd	d4, d3, d1
    50dc:	fsub	d2, d1, d4
    50e0:	fmov	d1, d4
    50e4:	fadd	d2, d2, d3
    50e8:	fadd	d0, d0, d2
    50ec:	b	50a4 <PyNumber_FloorDivide@plt+0x1c44>
    50f0:	stp	x29, x30, [sp, #-64]!
    50f4:	cmp	x2, #0x2
    50f8:	mov	x29, sp
    50fc:	stp	x19, x20, [sp, #16]
    5100:	mov	x20, x1
    5104:	stp	d8, d9, [sp, #32]
    5108:	str	d10, [sp, #48]
    510c:	b.ne	5180 <PyNumber_FloorDivide@plt+0x1d20>  // b.any
    5110:	ldr	x0, [x20]
    5114:	adrp	x2, 19000 <_Py_log1p@@Base+0x124a4>
    5118:	mov	x19, x2
    511c:	ldr	x1, [x2, #3824]
    5120:	ldr	x3, [x0, #8]
    5124:	cmp	x3, x1
    5128:	b.ne	51b4 <PyNumber_FloorDivide@plt+0x1d54>  // b.any
    512c:	ldr	d8, [x0, #16]
    5130:	ldr	x0, [x20, #8]
    5134:	ldr	x2, [x19, #3824]
    5138:	ldr	x1, [x0, #8]
    513c:	cmp	x1, x2
    5140:	b.ne	51d4 <PyNumber_FloorDivide@plt+0x1d74>  // b.any
    5144:	ldr	d9, [x0, #16]
    5148:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    514c:	fabs	d1, d9
    5150:	ldr	d0, [x0, #2904]
    5154:	fcmp	d1, d0
    5158:	b.le	51f4 <PyNumber_FloorDivide@plt+0x1d94>
    515c:	fabs	d1, d8
    5160:	fcmp	d1, d0
    5164:	b.hi	51f4 <PyNumber_FloorDivide@plt+0x1d94>  // b.pmore
    5168:	fmov	d0, d8
    516c:	ldp	x19, x20, [sp, #16]
    5170:	ldp	d8, d9, [sp, #32]
    5174:	ldr	d10, [sp, #48]
    5178:	ldp	x29, x30, [sp], #64
    517c:	b	31c0 <PyFloat_FromDouble@plt>
    5180:	mov	x1, x2
    5184:	mov	x3, #0x2                   	// #2
    5188:	adrp	x0, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    518c:	mov	x2, x3
    5190:	add	x0, x0, #0xccf
    5194:	bl	3280 <_PyArg_CheckPositional@plt>
    5198:	cbnz	w0, 5110 <PyNumber_FloorDivide@plt+0x1cb0>
    519c:	mov	x0, #0x0                   	// #0
    51a0:	ldr	d10, [sp, #48]
    51a4:	ldp	x19, x20, [sp, #16]
    51a8:	ldp	d8, d9, [sp, #32]
    51ac:	ldp	x29, x30, [sp], #64
    51b0:	ret
    51b4:	bl	32e0 <PyFloat_AsDouble@plt>
    51b8:	fmov	d8, d0
    51bc:	fmov	d0, #-1.000000000000000000e+00
    51c0:	fcmp	d8, d0
    51c4:	b.ne	5130 <PyNumber_FloorDivide@plt+0x1cd0>  // b.any
    51c8:	bl	32b0 <PyErr_Occurred@plt>
    51cc:	cbz	x0, 5130 <PyNumber_FloorDivide@plt+0x1cd0>
    51d0:	b	519c <PyNumber_FloorDivide@plt+0x1d3c>
    51d4:	bl	32e0 <PyFloat_AsDouble@plt>
    51d8:	fmov	d9, d0
    51dc:	fmov	d0, #-1.000000000000000000e+00
    51e0:	fcmp	d9, d0
    51e4:	b.ne	5148 <PyNumber_FloorDivide@plt+0x1ce8>  // b.any
    51e8:	bl	32b0 <PyErr_Occurred@plt>
    51ec:	cbz	x0, 5148 <PyNumber_FloorDivide@plt+0x1ce8>
    51f0:	b	519c <PyNumber_FloorDivide@plt+0x1d3c>
    51f4:	bl	33f0 <__errno_location@plt>
    51f8:	fmov	d1, d9
    51fc:	fmov	d0, d8
    5200:	str	wzr, [x0]
    5204:	mov	x19, x0
    5208:	bl	33a0 <fmod@plt>
    520c:	fcmp	d0, d0
    5210:	fmov	d10, d0
    5214:	b.vc	5244 <PyNumber_FloorDivide@plt+0x1de4>
    5218:	fcmp	d8, d9
    521c:	b.vs	5238 <PyNumber_FloorDivide@plt+0x1dd8>
    5220:	mov	w0, #0x21                  	// #33
    5224:	str	w0, [x19]
    5228:	fmov	d0, d10
    522c:	bl	4b4c <PyNumber_FloorDivide@plt+0x16ec>
    5230:	cbz	w0, 523c <PyNumber_FloorDivide@plt+0x1ddc>
    5234:	b	519c <PyNumber_FloorDivide@plt+0x1d3c>
    5238:	str	wzr, [x19]
    523c:	fmov	d0, d10
    5240:	b	516c <PyNumber_FloorDivide@plt+0x1d0c>
    5244:	ldr	w0, [x19]
    5248:	cbnz	w0, 5228 <PyNumber_FloorDivide@plt+0x1dc8>
    524c:	b	523c <PyNumber_FloorDivide@plt+0x1ddc>
    5250:	stp	x29, x30, [sp, #-64]!
    5254:	cmp	x2, #0x2
    5258:	mov	x29, sp
    525c:	stp	x19, x20, [sp, #16]
    5260:	mov	x20, x1
    5264:	stp	d8, d9, [sp, #32]
    5268:	stp	d10, d11, [sp, #48]
    526c:	b.ne	52f0 <PyNumber_FloorDivide@plt+0x1e90>  // b.any
    5270:	ldr	x0, [x20]
    5274:	adrp	x2, 19000 <_Py_log1p@@Base+0x124a4>
    5278:	mov	x19, x2
    527c:	ldr	x1, [x2, #3824]
    5280:	ldr	x3, [x0, #8]
    5284:	cmp	x3, x1
    5288:	b.ne	5324 <PyNumber_FloorDivide@plt+0x1ec4>  // b.any
    528c:	ldr	d9, [x0, #16]
    5290:	ldr	x0, [x20, #8]
    5294:	ldr	x2, [x19, #3824]
    5298:	ldr	x1, [x0, #8]
    529c:	cmp	x1, x2
    52a0:	b.ne	5344 <PyNumber_FloorDivide@plt+0x1ee4>  // b.any
    52a4:	ldr	d8, [x0, #16]
    52a8:	fabs	d10, d9
    52ac:	bl	33f0 <__errno_location@plt>
    52b0:	mov	x19, x0
    52b4:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    52b8:	ldr	d11, [x0, #2904]
    52bc:	fcmp	d10, d11
    52c0:	fmov	d1, d11
    52c4:	b.hi	52d4 <PyNumber_FloorDivide@plt+0x1e74>  // b.pmore
    52c8:	fabs	d0, d8
    52cc:	fcmp	d0, d11
    52d0:	b.ls	542c <PyNumber_FloorDivide@plt+0x1fcc>  // b.plast
    52d4:	fcmp	d9, d9
    52d8:	str	wzr, [x19]
    52dc:	b.vc	5364 <PyNumber_FloorDivide@plt+0x1f04>
    52e0:	fcmp	d8, #0.0
    52e4:	b.ne	5470 <PyNumber_FloorDivide@plt+0x2010>  // b.any
    52e8:	fmov	d8, #1.000000000000000000e+00
    52ec:	b	5378 <PyNumber_FloorDivide@plt+0x1f18>
    52f0:	mov	x1, x2
    52f4:	mov	x3, #0x2                   	// #2
    52f8:	adrp	x0, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    52fc:	mov	x2, x3
    5300:	add	x0, x0, #0xcd4
    5304:	bl	3280 <_PyArg_CheckPositional@plt>
    5308:	cbnz	w0, 5270 <PyNumber_FloorDivide@plt+0x1e10>
    530c:	mov	x0, #0x0                   	// #0
    5310:	ldp	x19, x20, [sp, #16]
    5314:	ldp	d8, d9, [sp, #32]
    5318:	ldp	d10, d11, [sp, #48]
    531c:	ldp	x29, x30, [sp], #64
    5320:	ret
    5324:	bl	32e0 <PyFloat_AsDouble@plt>
    5328:	fmov	d9, d0
    532c:	fmov	d0, #-1.000000000000000000e+00
    5330:	fcmp	d9, d0
    5334:	b.ne	5290 <PyNumber_FloorDivide@plt+0x1e30>  // b.any
    5338:	bl	32b0 <PyErr_Occurred@plt>
    533c:	cbz	x0, 5290 <PyNumber_FloorDivide@plt+0x1e30>
    5340:	b	530c <PyNumber_FloorDivide@plt+0x1eac>
    5344:	bl	32e0 <PyFloat_AsDouble@plt>
    5348:	fmov	d8, d0
    534c:	fmov	d0, #-1.000000000000000000e+00
    5350:	fcmp	d8, d0
    5354:	b.ne	52a8 <PyNumber_FloorDivide@plt+0x1e48>  // b.any
    5358:	bl	32b0 <PyErr_Occurred@plt>
    535c:	cbz	x0, 52a8 <PyNumber_FloorDivide@plt+0x1e48>
    5360:	b	530c <PyNumber_FloorDivide@plt+0x1eac>
    5364:	fcmp	d8, d8
    5368:	b.vc	5398 <PyNumber_FloorDivide@plt+0x1f38>
    536c:	fmov	d0, #1.000000000000000000e+00
    5370:	fcmp	d9, d0
    5374:	b.eq	52e8 <PyNumber_FloorDivide@plt+0x1e88>  // b.none
    5378:	ldr	w0, [x19]
    537c:	cbnz	w0, 5478 <PyNumber_FloorDivide@plt+0x2018>
    5380:	fmov	d0, d8
    5384:	ldp	x19, x20, [sp, #16]
    5388:	ldp	d8, d9, [sp, #32]
    538c:	ldp	d10, d11, [sp, #48]
    5390:	ldp	x29, x30, [sp], #64
    5394:	b	31c0 <PyFloat_FromDouble@plt>
    5398:	fcmp	d10, d1
    539c:	fabs	d0, d8
    53a0:	b.le	53e0 <PyNumber_FloorDivide@plt+0x1f80>
    53a4:	fcmp	d0, d1
    53a8:	b.hi	53c0 <PyNumber_FloorDivide@plt+0x1f60>  // b.pmore
    53ac:	fmov	d1, #2.000000000000000000e+00
    53b0:	bl	33a0 <fmod@plt>
    53b4:	fmov	d1, #1.000000000000000000e+00
    53b8:	fcmp	d0, d1
    53bc:	b.eq	5488 <PyNumber_FloorDivide@plt+0x2028>  // b.none
    53c0:	fcmpe	d8, #0.0
    53c4:	b.le	53d0 <PyNumber_FloorDivide@plt+0x1f70>
    53c8:	fmov	d8, d10
    53cc:	b	5378 <PyNumber_FloorDivide@plt+0x1f18>
    53d0:	fcmp	d8, #0.0
    53d4:	b.eq	52e8 <PyNumber_FloorDivide@plt+0x1e88>  // b.none
    53d8:	movi	d8, #0x0
    53dc:	b	5378 <PyNumber_FloorDivide@plt+0x1f18>
    53e0:	fcmp	d0, d1
    53e4:	b.le	53d8 <PyNumber_FloorDivide@plt+0x1f78>
    53e8:	fmov	d0, #1.000000000000000000e+00
    53ec:	fcmp	d10, d0
    53f0:	b.eq	52e8 <PyNumber_FloorDivide@plt+0x1e88>  // b.none
    53f4:	fcmpe	d8, #0.0
    53f8:	b.le	5404 <PyNumber_FloorDivide@plt+0x1fa4>
    53fc:	fcmpe	d10, d0
    5400:	b.gt	5378 <PyNumber_FloorDivide@plt+0x1f18>
    5404:	fcmpe	d8, #0.0
    5408:	b.pl	53d8 <PyNumber_FloorDivide@plt+0x1f78>  // b.nfrst
    540c:	fcmpe	d10, d0
    5410:	b.pl	53d8 <PyNumber_FloorDivide@plt+0x1f78>  // b.nfrst
    5414:	fcmp	d9, #0.0
    5418:	fneg	d8, d8
    541c:	b.ne	5378 <PyNumber_FloorDivide@plt+0x1f18>  // b.any
    5420:	mov	w0, #0x21                  	// #33
    5424:	str	w0, [x19]
    5428:	b	5378 <PyNumber_FloorDivide@plt+0x1f18>
    542c:	fmov	d1, d8
    5430:	fmov	d0, d9
    5434:	str	wzr, [x19]
    5438:	bl	3090 <pow@plt>
    543c:	fmov	d8, d0
    5440:	fabs	d0, d0
    5444:	fcmp	d0, d11
    5448:	b.ls	5378 <PyNumber_FloorDivide@plt+0x1f18>  // b.plast
    544c:	fcmp	d8, d8
    5450:	b.vs	5420 <PyNumber_FloorDivide@plt+0x1fc0>
    5454:	fcmp	d0, d11
    5458:	b.le	5378 <PyNumber_FloorDivide@plt+0x1f18>
    545c:	fcmp	d9, #0.0
    5460:	mov	w0, #0x21                  	// #33
    5464:	mov	w1, #0x22                  	// #34
    5468:	csel	w0, w0, w1, eq  // eq = none
    546c:	b	5424 <PyNumber_FloorDivide@plt+0x1fc4>
    5470:	fmov	d8, d9
    5474:	b	5378 <PyNumber_FloorDivide@plt+0x1f18>
    5478:	fmov	d0, d8
    547c:	bl	4b4c <PyNumber_FloorDivide@plt+0x16ec>
    5480:	cbz	w0, 5380 <PyNumber_FloorDivide@plt+0x1f20>
    5484:	b	530c <PyNumber_FloorDivide@plt+0x1eac>
    5488:	fcmpe	d8, #0.0
    548c:	b.gt	5470 <PyNumber_FloorDivide@plt+0x2010>
    5490:	fcmp	d8, #0.0
    5494:	b.eq	52e8 <PyNumber_FloorDivide@plt+0x1e88>  // b.none
    5498:	movi	d8, #0x0
    549c:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    54a0:	fmov	d0, x0
    54a4:	bit	v8.8b, v9.8b, v0.8b
    54a8:	b	5378 <PyNumber_FloorDivide@plt+0x1f18>
    54ac:	stp	x29, x30, [sp, #-48]!
    54b0:	mov	x0, x1
    54b4:	mov	x29, sp
    54b8:	ldr	x2, [x1, #8]
    54bc:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    54c0:	str	x19, [sp, #16]
    54c4:	ldr	x1, [x1, #3824]
    54c8:	str	d8, [sp, #24]
    54cc:	cmp	x2, x1
    54d0:	b.ne	551c <PyNumber_FloorDivide@plt+0x20bc>  // b.any
    54d4:	ldr	d8, [x0, #16]
    54d8:	fabs	d1, d8
    54dc:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    54e0:	fmov	d0, x0
    54e4:	adrp	x19, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    54e8:	fcmp	d1, d0
    54ec:	b.ls	5560 <PyNumber_FloorDivide@plt+0x2100>  // b.plast
    54f0:	b.le	554c <PyNumber_FloorDivide@plt+0x20ec>
    54f4:	movi	d0, #0x0
    54f8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    54fc:	fmov	d2, x0
    5500:	fmov	d1, d8
    5504:	bit	v0.8b, v8.8b, v2.8b
    5508:	add	x0, x19, #0xcd8
    550c:	ldr	d8, [sp, #24]
    5510:	ldr	x19, [sp, #16]
    5514:	ldp	x29, x30, [sp], #48
    5518:	b	32a0 <Py_BuildValue@plt>
    551c:	bl	32e0 <PyFloat_AsDouble@plt>
    5520:	fmov	d8, d0
    5524:	fmov	d0, #-1.000000000000000000e+00
    5528:	fcmp	d8, d0
    552c:	b.ne	54d8 <PyNumber_FloorDivide@plt+0x2078>  // b.any
    5530:	bl	32b0 <PyErr_Occurred@plt>
    5534:	cbz	x0, 54d8 <PyNumber_FloorDivide@plt+0x2078>
    5538:	mov	x0, #0x0                   	// #0
    553c:	ldr	d8, [sp, #24]
    5540:	ldr	x19, [sp, #16]
    5544:	ldp	x29, x30, [sp], #48
    5548:	ret
    554c:	fcmp	d8, d8
    5550:	b.vc	5560 <PyNumber_FloorDivide@plt+0x2100>
    5554:	fmov	d1, d8
    5558:	fmov	d0, d8
    555c:	b	5508 <PyNumber_FloorDivide@plt+0x20a8>
    5560:	bl	33f0 <__errno_location@plt>
    5564:	fmov	d0, d8
    5568:	str	wzr, [x0]
    556c:	add	x0, sp, #0x28
    5570:	bl	3320 <modf@plt>
    5574:	ldr	d1, [sp, #40]
    5578:	b	5508 <PyNumber_FloorDivide@plt+0x20a8>
    557c:	fabs	d2, d0
    5580:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    5584:	fmov	d1, x0
    5588:	stp	x29, x30, [sp, #-32]!
    558c:	mov	x29, sp
    5590:	fcmp	d2, d1
    5594:	str	d8, [sp, #16]
    5598:	fmov	d8, d0
    559c:	b.ls	55c8 <PyNumber_FloorDivide@plt+0x2168>  // b.plast
    55a0:	fcmp	d0, d0
    55a4:	b.vs	55f8 <PyNumber_FloorDivide@plt+0x2198>
    55a8:	fcmpe	d0, #0.0
    55ac:	b.gt	55f8 <PyNumber_FloorDivide@plt+0x2198>
    55b0:	bl	33f0 <__errno_location@plt>
    55b4:	mov	w1, #0x21                  	// #33
    55b8:	str	w1, [x0]
    55bc:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    55c0:	ldr	d8, [x0, #2912]
    55c4:	b	55f8 <PyNumber_FloorDivide@plt+0x2198>
    55c8:	fcmpe	d0, #0.0
    55cc:	b.le	55dc <PyNumber_FloorDivide@plt+0x217c>
    55d0:	ldr	d8, [sp, #16]
    55d4:	ldp	x29, x30, [sp], #32
    55d8:	b	2ff0 <log2@plt>
    55dc:	bl	33f0 <__errno_location@plt>
    55e0:	fcmp	d8, #0.0
    55e4:	mov	w1, #0x21                  	// #33
    55e8:	str	w1, [x0]
    55ec:	b.ne	55bc <PyNumber_FloorDivide@plt+0x215c>  // b.any
    55f0:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    55f4:	ldr	d8, [x0, #3016]
    55f8:	fmov	d0, d8
    55fc:	ldr	d8, [sp, #16]
    5600:	ldp	x29, x30, [sp], #32
    5604:	ret
    5608:	stp	x29, x30, [sp, #-64]!
    560c:	mov	x29, sp
    5610:	ldr	x2, [x0, #8]
    5614:	stp	x19, x20, [sp, #16]
    5618:	stp	d8, d9, [sp, #32]
    561c:	ldr	x2, [x2, #168]
    5620:	tbz	w2, #24, 56f4 <PyNumber_FloorDivide@plt+0x2294>
    5624:	mov	x19, x1
    5628:	mov	x20, x0
    562c:	ldr	x1, [x0, #16]
    5630:	cmp	x1, #0x0
    5634:	b.gt	5664 <PyNumber_FloorDivide@plt+0x2204>
    5638:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    563c:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    5640:	add	x1, x1, #0xc93
    5644:	ldr	x0, [x0, #3872]
    5648:	ldr	x0, [x0]
    564c:	bl	3130 <PyErr_SetString@plt>
    5650:	mov	x0, #0x0                   	// #0
    5654:	ldp	x19, x20, [sp, #16]
    5658:	ldp	d8, d9, [sp, #32]
    565c:	ldp	x29, x30, [sp], #64
    5660:	ret
    5664:	bl	3330 <PyLong_AsDouble@plt>
    5668:	fmov	d8, d0
    566c:	fmov	d9, #-1.000000000000000000e+00
    5670:	fcmp	d0, d9
    5674:	b.ne	56e8 <PyNumber_FloorDivide@plt+0x2288>  // b.any
    5678:	bl	32b0 <PyErr_Occurred@plt>
    567c:	cbz	x0, 56e8 <PyNumber_FloorDivide@plt+0x2288>
    5680:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    5684:	ldr	x0, [x0, #3936]
    5688:	ldr	x0, [x0]
    568c:	bl	3190 <PyErr_ExceptionMatches@plt>
    5690:	cbz	w0, 5650 <PyNumber_FloorDivide@plt+0x21f0>
    5694:	bl	3210 <PyErr_Clear@plt>
    5698:	add	x1, sp, #0x38
    569c:	mov	x0, x20
    56a0:	bl	3150 <_PyLong_Frexp@plt>
    56a4:	fcmp	d0, d9
    56a8:	fmov	d8, d0
    56ac:	b.eq	56dc <PyNumber_FloorDivide@plt+0x227c>  // b.none
    56b0:	fmov	d0, d8
    56b4:	blr	x19
    56b8:	fmov	d8, d0
    56bc:	fmov	d0, #2.000000000000000000e+00
    56c0:	blr	x19
    56c4:	ldr	d1, [sp, #56]
    56c8:	scvtf	d1, d1
    56cc:	fmul	d1, d1, d0
    56d0:	fadd	d0, d1, d8
    56d4:	bl	31c0 <PyFloat_FromDouble@plt>
    56d8:	b	5654 <PyNumber_FloorDivide@plt+0x21f4>
    56dc:	bl	32b0 <PyErr_Occurred@plt>
    56e0:	cbnz	x0, 5650 <PyNumber_FloorDivide@plt+0x21f0>
    56e4:	b	56b0 <PyNumber_FloorDivide@plt+0x2250>
    56e8:	fmov	d0, d8
    56ec:	blr	x19
    56f0:	b	56d4 <PyNumber_FloorDivide@plt+0x2274>
    56f4:	mov	w2, #0x0                   	// #0
    56f8:	bl	4ce8 <PyNumber_FloorDivide@plt+0x1888>
    56fc:	b	5654 <PyNumber_FloorDivide@plt+0x21f4>
    5700:	mov	x0, x1
    5704:	adrp	x1, 5000 <PyNumber_FloorDivide@plt+0x1ba0>
    5708:	add	x1, x1, #0x57c
    570c:	b	5608 <PyNumber_FloorDivide@plt+0x21a8>
    5710:	mov	x0, x1
    5714:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    5718:	add	x1, x1, #0x9f0
    571c:	b	5608 <PyNumber_FloorDivide@plt+0x21a8>
    5720:	fabs	d2, d0
    5724:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    5728:	fmov	d1, x0
    572c:	stp	x29, x30, [sp, #-32]!
    5730:	mov	x29, sp
    5734:	fcmp	d2, d1
    5738:	str	d8, [sp, #16]
    573c:	fmov	d8, d0
    5740:	b.hi	578c <PyNumber_FloorDivide@plt+0x232c>  // b.pmore
    5744:	fcmpe	d0, #0.0
    5748:	b.le	5758 <PyNumber_FloorDivide@plt+0x22f8>
    574c:	ldr	d8, [sp, #16]
    5750:	ldp	x29, x30, [sp], #32
    5754:	b	31a0 <log@plt>
    5758:	bl	33f0 <__errno_location@plt>
    575c:	fcmp	d8, #0.0
    5760:	mov	w1, #0x21                  	// #33
    5764:	str	w1, [x0]
    5768:	mov	x0, #0xfff0000000000000    	// #-4503599627370496
    576c:	fmov	d1, x0
    5770:	mov	x0, #0x7ff8000000000000    	// #9221120237041090560
    5774:	fmov	d0, x0
    5778:	fcsel	d8, d1, d0, eq  // eq = none
    577c:	fmov	d0, d8
    5780:	ldr	d8, [sp, #16]
    5784:	ldp	x29, x30, [sp], #32
    5788:	ret
    578c:	fcmp	d0, d0
    5790:	b.vs	577c <PyNumber_FloorDivide@plt+0x231c>
    5794:	fcmpe	d0, #0.0
    5798:	b.gt	577c <PyNumber_FloorDivide@plt+0x231c>
    579c:	bl	33f0 <__errno_location@plt>
    57a0:	mov	w1, #0x21                  	// #33
    57a4:	str	w1, [x0]
    57a8:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    57ac:	ldr	d8, [x0, #2912]
    57b0:	b	577c <PyNumber_FloorDivide@plt+0x231c>
    57b4:	stp	x29, x30, [sp, #-64]!
    57b8:	mov	x0, x1
    57bc:	mov	x29, sp
    57c0:	ldr	x1, [x1, #16]
    57c4:	stp	x19, x20, [sp, #16]
    57c8:	str	x21, [sp, #32]
    57cc:	cmp	x1, #0x1
    57d0:	str	xzr, [sp, #56]
    57d4:	b.eq	57fc <PyNumber_FloorDivide@plt+0x239c>  // b.none
    57d8:	cmp	x1, #0x2
    57dc:	b.eq	5828 <PyNumber_FloorDivide@plt+0x23c8>  // b.none
    57e0:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    57e4:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    57e8:	add	x1, x1, #0xce4
    57ec:	ldr	x0, [x0, #3888]
    57f0:	ldr	x0, [x0]
    57f4:	bl	3130 <PyErr_SetString@plt>
    57f8:	b	5810 <PyNumber_FloorDivide@plt+0x23b0>
    57fc:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    5800:	add	x2, sp, #0x30
    5804:	add	x1, x1, #0xcde
    5808:	bl	32f0 <PyArg_ParseTuple@plt>
    580c:	cbnz	w0, 5840 <PyNumber_FloorDivide@plt+0x23e0>
    5810:	mov	x19, #0x0                   	// #0
    5814:	mov	x0, x19
    5818:	ldp	x19, x20, [sp, #16]
    581c:	ldr	x21, [sp, #32]
    5820:	ldp	x29, x30, [sp], #64
    5824:	ret
    5828:	add	x3, sp, #0x38
    582c:	add	x2, sp, #0x30
    5830:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    5834:	add	x1, x1, #0xcdd
    5838:	bl	32f0 <PyArg_ParseTuple@plt>
    583c:	b	580c <PyNumber_FloorDivide@plt+0x23ac>
    5840:	ldp	x0, x21, [sp, #48]
    5844:	adrp	x20, 5000 <PyNumber_FloorDivide@plt+0x1ba0>
    5848:	add	x20, x20, #0x720
    584c:	mov	x1, x20
    5850:	bl	5608 <PyNumber_FloorDivide@plt+0x21a8>
    5854:	cmp	x0, #0x0
    5858:	mov	x19, x0
    585c:	ccmp	x21, #0x0, #0x4, ne  // ne = any
    5860:	b.eq	5814 <PyNumber_FloorDivide@plt+0x23b4>  // b.none
    5864:	mov	x1, x20
    5868:	mov	x0, x21
    586c:	bl	5608 <PyNumber_FloorDivide@plt+0x21a8>
    5870:	mov	x20, x0
    5874:	cbnz	x0, 5884 <PyNumber_FloorDivide@plt+0x2424>
    5878:	mov	x0, x19
    587c:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    5880:	b	5810 <PyNumber_FloorDivide@plt+0x23b0>
    5884:	mov	x1, x0
    5888:	mov	x0, x19
    588c:	bl	3430 <PyNumber_TrueDivide@plt>
    5890:	mov	x21, x0
    5894:	mov	x0, x19
    5898:	mov	x19, x21
    589c:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    58a0:	mov	x0, x20
    58a4:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    58a8:	b	5814 <PyNumber_FloorDivide@plt+0x23b4>
    58ac:	stp	x29, x30, [sp, #-64]!
    58b0:	cmp	x2, #0x2
    58b4:	mov	x29, sp
    58b8:	stp	x19, x20, [sp, #16]
    58bc:	mov	x19, x1
    58c0:	stp	d8, d9, [sp, #32]
    58c4:	b.ne	5950 <PyNumber_FloorDivide@plt+0x24f0>  // b.any
    58c8:	ldr	x0, [x19]
    58cc:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    58d0:	ldr	x1, [x1, #3824]
    58d4:	ldr	x2, [x0, #8]
    58d8:	cmp	x2, x1
    58dc:	b.ne	5980 <PyNumber_FloorDivide@plt+0x2520>  // b.any
    58e0:	ldr	d8, [x0, #16]
    58e4:	ldr	x0, [x19, #8]
    58e8:	ldr	x1, [x0, #8]
    58ec:	ldr	x1, [x1, #168]
    58f0:	tbz	w1, #24, 59b8 <PyNumber_FloorDivide@plt+0x2558>
    58f4:	add	x1, sp, #0x3c
    58f8:	bl	3290 <PyLong_AsLongAndOverflow@plt>
    58fc:	mov	x19, x0
    5900:	cmn	x0, #0x1
    5904:	b.eq	59a0 <PyNumber_FloorDivide@plt+0x2540>  // b.none
    5908:	ldr	w0, [sp, #60]
    590c:	cmp	w0, #0x0
    5910:	cbnz	w0, 59ac <PyNumber_FloorDivide@plt+0x254c>
    5914:	bl	33f0 <__errno_location@plt>
    5918:	fcmp	d8, #0.0
    591c:	mov	x20, x0
    5920:	b.eq	5938 <PyNumber_FloorDivide@plt+0x24d8>  // b.none
    5924:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    5928:	fabs	d0, d8
    592c:	ldr	d9, [x0, #2904]
    5930:	fcmp	d0, d9
    5934:	b.ls	59d4 <PyNumber_FloorDivide@plt+0x2574>  // b.plast
    5938:	str	wzr, [x20]
    593c:	ldr	w0, [x20]
    5940:	cbnz	w0, 5a44 <PyNumber_FloorDivide@plt+0x25e4>
    5944:	fmov	d0, d8
    5948:	bl	31c0 <PyFloat_FromDouble@plt>
    594c:	b	5970 <PyNumber_FloorDivide@plt+0x2510>
    5950:	mov	x1, x2
    5954:	mov	x3, #0x2                   	// #2
    5958:	adrp	x0, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    595c:	mov	x2, x3
    5960:	add	x0, x0, #0xd07
    5964:	bl	3280 <_PyArg_CheckPositional@plt>
    5968:	cbnz	w0, 58c8 <PyNumber_FloorDivide@plt+0x2468>
    596c:	mov	x0, #0x0                   	// #0
    5970:	ldp	x19, x20, [sp, #16]
    5974:	ldp	d8, d9, [sp, #32]
    5978:	ldp	x29, x30, [sp], #64
    597c:	ret
    5980:	bl	32e0 <PyFloat_AsDouble@plt>
    5984:	fmov	d8, d0
    5988:	fmov	d0, #-1.000000000000000000e+00
    598c:	fcmp	d8, d0
    5990:	b.ne	58e4 <PyNumber_FloorDivide@plt+0x2484>  // b.any
    5994:	bl	32b0 <PyErr_Occurred@plt>
    5998:	cbz	x0, 58e4 <PyNumber_FloorDivide@plt+0x2484>
    599c:	b	596c <PyNumber_FloorDivide@plt+0x250c>
    59a0:	bl	32b0 <PyErr_Occurred@plt>
    59a4:	cbz	x0, 5908 <PyNumber_FloorDivide@plt+0x24a8>
    59a8:	b	596c <PyNumber_FloorDivide@plt+0x250c>
    59ac:	mov	x19, #0x7fffffffffffffff    	// #9223372036854775807
    59b0:	cinv	x19, x19, lt  // lt = tstop
    59b4:	b	5914 <PyNumber_FloorDivide@plt+0x24b4>
    59b8:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    59bc:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    59c0:	add	x1, x1, #0xd0d
    59c4:	ldr	x0, [x0, #3888]
    59c8:	ldr	x0, [x0]
    59cc:	bl	3130 <PyErr_SetString@plt>
    59d0:	b	596c <PyNumber_FloorDivide@plt+0x250c>
    59d4:	mov	x0, #0x7fffffff            	// #2147483647
    59d8:	cmp	x19, x0
    59dc:	b.le	5a00 <PyNumber_FloorDivide@plt+0x25a0>
    59e0:	mov	x0, #0x7ff0000000000000    	// #9218868437227405312
    59e4:	fmov	d0, x0
    59e8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    59ec:	fmov	d1, x0
    59f0:	bif	v8.8b, v0.8b, v1.8b
    59f4:	mov	w0, #0x22                  	// #34
    59f8:	str	w0, [x20]
    59fc:	b	593c <PyNumber_FloorDivide@plt+0x24dc>
    5a00:	mov	x0, #0xffffffff80000000    	// #-2147483648
    5a04:	cmp	x19, x0
    5a08:	b.ge	5a20 <PyNumber_FloorDivide@plt+0x25c0>  // b.tcont
    5a0c:	movi	d0, #0x0
    5a10:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    5a14:	fmov	d1, x0
    5a18:	bif	v8.8b, v0.8b, v1.8b
    5a1c:	b	5938 <PyNumber_FloorDivide@plt+0x24d8>
    5a20:	fmov	d0, d8
    5a24:	str	wzr, [x20]
    5a28:	mov	w0, w19
    5a2c:	bl	3020 <ldexp@plt>
    5a30:	fmov	d8, d0
    5a34:	fabs	d0, d0
    5a38:	fcmp	d0, d9
    5a3c:	b.le	593c <PyNumber_FloorDivide@plt+0x24dc>
    5a40:	b	59f4 <PyNumber_FloorDivide@plt+0x2594>
    5a44:	fmov	d0, d8
    5a48:	bl	4b4c <PyNumber_FloorDivide@plt+0x16ec>
    5a4c:	cbz	w0, 5944 <PyNumber_FloorDivide@plt+0x24e4>
    5a50:	b	596c <PyNumber_FloorDivide@plt+0x250c>
    5a54:	stp	x29, x30, [sp, #-32]!
    5a58:	mov	x0, x1
    5a5c:	mov	x29, sp
    5a60:	ldr	x2, [x1, #8]
    5a64:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    5a68:	str	d8, [sp, #16]
    5a6c:	ldr	x1, [x1, #3824]
    5a70:	cmp	x2, x1
    5a74:	b.ne	5a90 <PyNumber_FloorDivide@plt+0x2630>  // b.any
    5a78:	ldr	d8, [x0, #16]
    5a7c:	fcmp	d8, d8
    5a80:	ldr	d8, [sp, #16]
    5a84:	ldp	x29, x30, [sp], #32
    5a88:	cset	x0, vs
    5a8c:	b	3220 <PyBool_FromLong@plt>
    5a90:	bl	32e0 <PyFloat_AsDouble@plt>
    5a94:	fmov	d8, d0
    5a98:	fmov	d0, #-1.000000000000000000e+00
    5a9c:	fcmp	d8, d0
    5aa0:	b.ne	5a7c <PyNumber_FloorDivide@plt+0x261c>  // b.any
    5aa4:	bl	32b0 <PyErr_Occurred@plt>
    5aa8:	cbz	x0, 5a7c <PyNumber_FloorDivide@plt+0x261c>
    5aac:	mov	x0, #0x0                   	// #0
    5ab0:	ldr	d8, [sp, #16]
    5ab4:	ldp	x29, x30, [sp], #32
    5ab8:	ret
    5abc:	stp	x29, x30, [sp, #-32]!
    5ac0:	mov	x0, x1
    5ac4:	mov	x29, sp
    5ac8:	ldr	x2, [x1, #8]
    5acc:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    5ad0:	str	d8, [sp, #16]
    5ad4:	ldr	x1, [x1, #3824]
    5ad8:	cmp	x2, x1
    5adc:	b.ne	5b04 <PyNumber_FloorDivide@plt+0x26a4>  // b.any
    5ae0:	ldr	d8, [x0, #16]
    5ae4:	fabs	d8, d8
    5ae8:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    5aec:	fmov	d0, x0
    5af0:	fcmp	d8, d0
    5af4:	ldr	d8, [sp, #16]
    5af8:	ldp	x29, x30, [sp], #32
    5afc:	cset	x0, ls  // ls = plast
    5b00:	b	3220 <PyBool_FromLong@plt>
    5b04:	bl	32e0 <PyFloat_AsDouble@plt>
    5b08:	fmov	d8, d0
    5b0c:	fmov	d0, #-1.000000000000000000e+00
    5b10:	fcmp	d8, d0
    5b14:	b.ne	5ae4 <PyNumber_FloorDivide@plt+0x2684>  // b.any
    5b18:	bl	32b0 <PyErr_Occurred@plt>
    5b1c:	cbz	x0, 5ae4 <PyNumber_FloorDivide@plt+0x2684>
    5b20:	mov	x0, #0x0                   	// #0
    5b24:	ldr	d8, [sp, #16]
    5b28:	ldp	x29, x30, [sp], #32
    5b2c:	ret
    5b30:	stp	x29, x30, [sp, #-32]!
    5b34:	mov	x0, x1
    5b38:	mov	x29, sp
    5b3c:	ldr	x2, [x1, #8]
    5b40:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    5b44:	str	d8, [sp, #16]
    5b48:	ldr	x1, [x1, #3824]
    5b4c:	cmp	x2, x1
    5b50:	b.ne	5b88 <PyNumber_FloorDivide@plt+0x2728>  // b.any
    5b54:	ldr	d8, [x0, #16]
    5b58:	fabs	d1, d8
    5b5c:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    5b60:	fmov	d0, x0
    5b64:	fcmp	d1, d0
    5b68:	b.le	5bb4 <PyNumber_FloorDivide@plt+0x2754>
    5b6c:	fmov	x1, d8
    5b70:	mov	x0, #0x1                   	// #1
    5b74:	cmp	x1, #0x0
    5b78:	cneg	x0, x0, lt  // lt = tstop
    5b7c:	ldr	d8, [sp, #16]
    5b80:	ldp	x29, x30, [sp], #32
    5b84:	b	3220 <PyBool_FromLong@plt>
    5b88:	bl	32e0 <PyFloat_AsDouble@plt>
    5b8c:	fmov	d8, d0
    5b90:	fmov	d0, #-1.000000000000000000e+00
    5b94:	fcmp	d8, d0
    5b98:	b.ne	5b58 <PyNumber_FloorDivide@plt+0x26f8>  // b.any
    5b9c:	bl	32b0 <PyErr_Occurred@plt>
    5ba0:	cbz	x0, 5b58 <PyNumber_FloorDivide@plt+0x26f8>
    5ba4:	mov	x0, #0x0                   	// #0
    5ba8:	ldr	d8, [sp, #16]
    5bac:	ldp	x29, x30, [sp], #32
    5bb0:	ret
    5bb4:	mov	x0, #0x0                   	// #0
    5bb8:	b	5b7c <PyNumber_FloorDivide@plt+0x271c>
    5bbc:	stp	x29, x30, [sp, #-48]!
    5bc0:	cmp	x2, #0x2
    5bc4:	mov	x29, sp
    5bc8:	stp	x19, x20, [sp, #16]
    5bcc:	mov	x19, x1
    5bd0:	str	x21, [sp, #32]
    5bd4:	b.ne	5c00 <PyNumber_FloorDivide@plt+0x27a0>  // b.any
    5bd8:	ldp	x0, x21, [x19]
    5bdc:	bl	33e0 <PyNumber_Index@plt>
    5be0:	mov	x20, x0
    5be4:	cbnz	x0, 5c20 <PyNumber_FloorDivide@plt+0x27c0>
    5be8:	mov	x19, #0x0                   	// #0
    5bec:	mov	x0, x19
    5bf0:	ldp	x19, x20, [sp, #16]
    5bf4:	ldr	x21, [sp, #32]
    5bf8:	ldp	x29, x30, [sp], #48
    5bfc:	ret
    5c00:	mov	x1, x2
    5c04:	mov	x3, #0x2                   	// #2
    5c08:	adrp	x0, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    5c0c:	mov	x2, x3
    5c10:	add	x0, x0, #0xd3a
    5c14:	bl	3280 <_PyArg_CheckPositional@plt>
    5c18:	cbnz	w0, 5bd8 <PyNumber_FloorDivide@plt+0x2778>
    5c1c:	b	5be8 <PyNumber_FloorDivide@plt+0x2788>
    5c20:	mov	x0, x21
    5c24:	bl	33e0 <PyNumber_Index@plt>
    5c28:	mov	x19, x0
    5c2c:	cbnz	x0, 5c3c <PyNumber_FloorDivide@plt+0x27dc>
    5c30:	mov	x0, x20
    5c34:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    5c38:	b	5bec <PyNumber_FloorDivide@plt+0x278c>
    5c3c:	mov	x1, x0
    5c40:	mov	x0, x20
    5c44:	bl	3200 <_PyLong_GCD@plt>
    5c48:	mov	x21, x0
    5c4c:	mov	x0, x20
    5c50:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    5c54:	mov	x0, x19
    5c58:	mov	x19, x21
    5c5c:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    5c60:	b	5bec <PyNumber_FloorDivide@plt+0x278c>
    5c64:	stp	x29, x30, [sp, #-48]!
    5c68:	mov	x0, x1
    5c6c:	mov	x29, sp
    5c70:	ldr	x2, [x1, #8]
    5c74:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    5c78:	ldr	x1, [x1, #3824]
    5c7c:	cmp	x2, x1
    5c80:	b.ne	5cc4 <PyNumber_FloorDivide@plt+0x2864>  // b.any
    5c84:	ldr	d0, [x0, #16]
    5c88:	fcmp	d0, d0
    5c8c:	b.vs	5cac <PyNumber_FloorDivide@plt+0x284c>
    5c90:	fabs	d2, d0
    5c94:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    5c98:	fmov	d1, x0
    5c9c:	fcmp	d2, d1
    5ca0:	b.gt	5cac <PyNumber_FloorDivide@plt+0x284c>
    5ca4:	fcmp	d0, #0.0
    5ca8:	b.ne	5cf0 <PyNumber_FloorDivide@plt+0x2890>  // b.any
    5cac:	str	wzr, [sp, #44]
    5cb0:	ldr	w1, [sp, #44]
    5cb4:	ldp	x29, x30, [sp], #48
    5cb8:	adrp	x0, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    5cbc:	add	x0, x0, #0xd3e
    5cc0:	b	32a0 <Py_BuildValue@plt>
    5cc4:	bl	32e0 <PyFloat_AsDouble@plt>
    5cc8:	fmov	d1, #-1.000000000000000000e+00
    5ccc:	fcmp	d0, d1
    5cd0:	b.ne	5c88 <PyNumber_FloorDivide@plt+0x2828>  // b.any
    5cd4:	str	d0, [sp, #24]
    5cd8:	bl	32b0 <PyErr_Occurred@plt>
    5cdc:	ldr	d0, [sp, #24]
    5ce0:	cbz	x0, 5cf0 <PyNumber_FloorDivide@plt+0x2890>
    5ce4:	mov	x0, #0x0                   	// #0
    5ce8:	ldp	x29, x30, [sp], #48
    5cec:	ret
    5cf0:	add	x0, sp, #0x2c
    5cf4:	bl	3340 <frexp@plt>
    5cf8:	b	5cb0 <PyNumber_FloorDivide@plt+0x2850>
    5cfc:	stp	x29, x30, [sp, #-288]!
    5d00:	cmp	x2, #0x2
    5d04:	mov	x29, sp
    5d08:	stp	x19, x20, [sp, #16]
    5d0c:	mov	x19, x1
    5d10:	stp	x21, x22, [sp, #32]
    5d14:	stp	x23, x24, [sp, #48]
    5d18:	stp	x25, x26, [sp, #64]
    5d1c:	stp	x27, x28, [sp, #80]
    5d20:	stp	d8, d9, [sp, #96]
    5d24:	str	d10, [sp, #112]
    5d28:	b.ne	5d94 <PyNumber_FloorDivide@plt+0x2934>  // b.any
    5d2c:	ldp	x20, x19, [x19]
    5d30:	ldr	x0, [x20, #8]
    5d34:	ldr	x0, [x0, #168]
    5d38:	tbz	w0, #26, 5db8 <PyNumber_FloorDivide@plt+0x2958>
    5d3c:	mov	w23, #0x0                   	// #0
    5d40:	ldr	x0, [x19, #8]
    5d44:	ldr	x0, [x0, #168]
    5d48:	tbnz	w0, #26, 5dd0 <PyNumber_FloorDivide@plt+0x2970>
    5d4c:	mov	x0, x19
    5d50:	mov	w25, #0x1                   	// #1
    5d54:	bl	3390 <PySequence_Tuple@plt>
    5d58:	mov	x19, x0
    5d5c:	cbnz	x0, 5dd4 <PyNumber_FloorDivide@plt+0x2974>
    5d60:	cbz	w23, 5db0 <PyNumber_FloorDivide@plt+0x2950>
    5d64:	mov	x0, x20
    5d68:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    5d6c:	mov	x0, x19
    5d70:	ldr	d10, [sp, #112]
    5d74:	ldp	x19, x20, [sp, #16]
    5d78:	ldp	x21, x22, [sp, #32]
    5d7c:	ldp	x23, x24, [sp, #48]
    5d80:	ldp	x25, x26, [sp, #64]
    5d84:	ldp	x27, x28, [sp, #80]
    5d88:	ldp	d8, d9, [sp, #96]
    5d8c:	ldp	x29, x30, [sp], #288
    5d90:	ret
    5d94:	mov	x1, x2
    5d98:	mov	x3, #0x2                   	// #2
    5d9c:	adrp	x0, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    5da0:	mov	x2, x3
    5da4:	add	x0, x0, #0xd43
    5da8:	bl	3280 <_PyArg_CheckPositional@plt>
    5dac:	cbnz	w0, 5d2c <PyNumber_FloorDivide@plt+0x28cc>
    5db0:	mov	x19, #0x0                   	// #0
    5db4:	b	5d6c <PyNumber_FloorDivide@plt+0x290c>
    5db8:	mov	x0, x20
    5dbc:	mov	w23, #0x1                   	// #1
    5dc0:	bl	3390 <PySequence_Tuple@plt>
    5dc4:	mov	x20, x0
    5dc8:	cbnz	x0, 5d40 <PyNumber_FloorDivide@plt+0x28e0>
    5dcc:	b	5db0 <PyNumber_FloorDivide@plt+0x2950>
    5dd0:	mov	w25, #0x0                   	// #0
    5dd4:	ldr	x24, [x19, #16]
    5dd8:	ldr	x0, [x20, #16]
    5ddc:	cmp	x0, x24
    5de0:	b.eq	5e00 <PyNumber_FloorDivide@plt+0x29a0>  // b.none
    5de4:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    5de8:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    5dec:	add	x1, x1, #0xd48
    5df0:	ldr	x0, [x0, #3872]
    5df4:	ldr	x0, [x0]
    5df8:	bl	3130 <PyErr_SetString@plt>
    5dfc:	b	5db0 <PyNumber_FloorDivide@plt+0x2950>
    5e00:	cmp	x0, #0x10
    5e04:	b.le	5e24 <PyNumber_FloorDivide@plt+0x29c4>
    5e08:	lsl	x0, x0, #3
    5e0c:	bl	3140 <PyObject_Malloc@plt>
    5e10:	mov	x21, x0
    5e14:	cbnz	x0, 5e28 <PyNumber_FloorDivide@plt+0x29c8>
    5e18:	bl	30a0 <PyErr_NoMemory@plt>
    5e1c:	mov	x19, x0
    5e20:	b	5d6c <PyNumber_FloorDivide@plt+0x290c>
    5e24:	add	x21, sp, #0xa0
    5e28:	adrp	x27, 19000 <_Py_log1p@@Base+0x124a4>
    5e2c:	add	x0, x20, #0x18
    5e30:	adrp	x28, 19000 <_Py_log1p@@Base+0x124a4>
    5e34:	movi	d9, #0x0
    5e38:	str	x0, [sp, #136]
    5e3c:	mov	w26, #0x0                   	// #0
    5e40:	ldr	x0, [x27, #3824]
    5e44:	str	x0, [sp, #144]
    5e48:	ldr	x0, [x28, #3984]
    5e4c:	mov	x22, #0x0                   	// #0
    5e50:	str	x0, [sp, #152]
    5e54:	cmp	x24, x22
    5e58:	b.gt	5ecc <PyNumber_FloorDivide@plt+0x2a6c>
    5e5c:	fabs	d1, d9
    5e60:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    5e64:	fmov	d0, x0
    5e68:	fcmp	d1, d0
    5e6c:	b.gt	5e94 <PyNumber_FloorDivide@plt+0x2a34>
    5e70:	cbnz	w26, 5f90 <PyNumber_FloorDivide@plt+0x2b30>
    5e74:	fcmp	d9, #0.0
    5e78:	ccmp	x24, #0x1, #0x4, ne  // ne = any
    5e7c:	b.le	5e94 <PyNumber_FloorDivide@plt+0x2a34>
    5e80:	fmov	d0, d9
    5e84:	mov	x1, x21
    5e88:	mov	x0, x24
    5e8c:	bl	5084 <PyNumber_FloorDivide@plt+0x1c24>
    5e90:	fmov	d9, d0
    5e94:	add	x0, sp, #0xa0
    5e98:	cmp	x21, x0
    5e9c:	b.eq	5ea8 <PyNumber_FloorDivide@plt+0x2a48>  // b.none
    5ea0:	mov	x0, x21
    5ea4:	bl	31b0 <PyObject_Free@plt>
    5ea8:	cbz	w23, 5eb4 <PyNumber_FloorDivide@plt+0x2a54>
    5eac:	mov	x0, x20
    5eb0:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    5eb4:	cbz	w25, 5ec0 <PyNumber_FloorDivide@plt+0x2a60>
    5eb8:	mov	x0, x19
    5ebc:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    5ec0:	fmov	d0, d9
    5ec4:	bl	31c0 <PyFloat_FromDouble@plt>
    5ec8:	b	5e1c <PyNumber_FloorDivide@plt+0x29bc>
    5ecc:	ldp	x0, x2, [sp, #136]
    5ed0:	ldr	x0, [x0, x22, lsl #3]
    5ed4:	ldr	x1, [x0, #8]
    5ed8:	cmp	x1, x2
    5edc:	b.ne	5f24 <PyNumber_FloorDivide@plt+0x2ac4>  // b.any
    5ee0:	ldr	d8, [x0, #16]
    5ee4:	add	x0, x19, #0x18
    5ee8:	ldr	x2, [x27, #3824]
    5eec:	ldr	x0, [x0, x22, lsl #3]
    5ef0:	ldr	x1, [x0, #8]
    5ef4:	cmp	x1, x2
    5ef8:	b.ne	5f5c <PyNumber_FloorDivide@plt+0x2afc>  // b.any
    5efc:	ldr	d0, [x0, #16]
    5f00:	fabd	d8, d8, d0
    5f04:	fcmp	d8, d8
    5f08:	str	d8, [x21, x22, lsl #3]
    5f0c:	add	x22, x22, #0x1
    5f10:	cset	w0, vs
    5f14:	fcmp	d8, d9
    5f18:	orr	w26, w26, w0
    5f1c:	fcsel	d9, d9, d8, le
    5f20:	b	5e54 <PyNumber_FloorDivide@plt+0x29f4>
    5f24:	ldr	x2, [sp, #152]
    5f28:	fmov	d10, #-1.000000000000000000e+00
    5f2c:	cmp	x1, x2
    5f30:	b.ne	5f54 <PyNumber_FloorDivide@plt+0x2af4>  // b.any
    5f34:	bl	3330 <PyLong_AsDouble@plt>
    5f38:	fcmp	d0, d10
    5f3c:	fmov	d8, d0
    5f40:	b.ne	5ee4 <PyNumber_FloorDivide@plt+0x2a84>  // b.any
    5f44:	bl	32b0 <PyErr_Occurred@plt>
    5f48:	cbnz	x0, 5f9c <PyNumber_FloorDivide@plt+0x2b3c>
    5f4c:	fmov	d8, #-1.000000000000000000e+00
    5f50:	b	5ee4 <PyNumber_FloorDivide@plt+0x2a84>
    5f54:	bl	32e0 <PyFloat_AsDouble@plt>
    5f58:	b	5f38 <PyNumber_FloorDivide@plt+0x2ad8>
    5f5c:	ldr	x2, [x28, #3984]
    5f60:	fmov	d10, #-1.000000000000000000e+00
    5f64:	cmp	x1, x2
    5f68:	b.ne	5f88 <PyNumber_FloorDivide@plt+0x2b28>  // b.any
    5f6c:	bl	3330 <PyLong_AsDouble@plt>
    5f70:	fcmp	d0, d10
    5f74:	b.ne	5f00 <PyNumber_FloorDivide@plt+0x2aa0>  // b.any
    5f78:	bl	32b0 <PyErr_Occurred@plt>
    5f7c:	cbnz	x0, 5f9c <PyNumber_FloorDivide@plt+0x2b3c>
    5f80:	fmov	d0, #-1.000000000000000000e+00
    5f84:	b	5f00 <PyNumber_FloorDivide@plt+0x2aa0>
    5f88:	bl	32e0 <PyFloat_AsDouble@plt>
    5f8c:	b	5f70 <PyNumber_FloorDivide@plt+0x2b10>
    5f90:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    5f94:	ldr	d9, [x0, #2912]
    5f98:	b	5e94 <PyNumber_FloorDivide@plt+0x2a34>
    5f9c:	add	x0, sp, #0xa0
    5fa0:	cmp	x21, x0
    5fa4:	b.eq	5fb0 <PyNumber_FloorDivide@plt+0x2b50>  // b.none
    5fa8:	mov	x0, x21
    5fac:	bl	31b0 <PyObject_Free@plt>
    5fb0:	cbz	w23, 5fbc <PyNumber_FloorDivide@plt+0x2b5c>
    5fb4:	mov	x0, x20
    5fb8:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    5fbc:	cbz	w25, 5db0 <PyNumber_FloorDivide@plt+0x2950>
    5fc0:	mov	x0, x19
    5fc4:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    5fc8:	b	5db0 <PyNumber_FloorDivide@plt+0x2950>
    5fcc:	fcmp	d1, d0
    5fd0:	fmov	d2, d0
    5fd4:	fmov	d3, d1
    5fd8:	b.vs	607c <PyNumber_FloorDivide@plt+0x2c1c>
    5fdc:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    5fe0:	fabs	d6, d0
    5fe4:	fabs	d5, d1
    5fe8:	ldr	d4, [x0, #2904]
    5fec:	fcmp	d6, d4
    5ff0:	b.le	603c <PyNumber_FloorDivide@plt+0x2bdc>
    5ff4:	fcmp	d5, d4
    5ff8:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    5ffc:	fmov	d0, x0
    6000:	b.le	6030 <PyNumber_FloorDivide@plt+0x2bd0>
    6004:	fmov	d1, #1.000000000000000000e+00
    6008:	bif	v3.8b, v1.8b, v0.8b
    600c:	fcmp	d3, d1
    6010:	b.ne	6024 <PyNumber_FloorDivide@plt+0x2bc4>  // b.any
    6014:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    6018:	ldr	d1, [x0, #3024]
    601c:	bsl	v0.8b, v2.8b, v1.8b
    6020:	ret
    6024:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    6028:	ldr	d1, [x0, #3032]
    602c:	b	601c <PyNumber_FloorDivide@plt+0x2bbc>
    6030:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    6034:	ldr	d1, [x0, #3040]
    6038:	b	601c <PyNumber_FloorDivide@plt+0x2bbc>
    603c:	fcmp	d5, d4
    6040:	b.gt	604c <PyNumber_FloorDivide@plt+0x2bec>
    6044:	fcmp	d0, #0.0
    6048:	b.ne	6078 <PyNumber_FloorDivide@plt+0x2c18>  // b.any
    604c:	fmov	d1, #1.000000000000000000e+00
    6050:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    6054:	fmov	d0, x0
    6058:	bif	v3.8b, v1.8b, v0.8b
    605c:	fcmp	d3, d1
    6060:	b.ne	606c <PyNumber_FloorDivide@plt+0x2c0c>  // b.any
    6064:	movi	d1, #0x0
    6068:	b	601c <PyNumber_FloorDivide@plt+0x2bbc>
    606c:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    6070:	ldr	d1, [x0, #2920]
    6074:	b	601c <PyNumber_FloorDivide@plt+0x2bbc>
    6078:	b	2fd0 <atan2@plt>
    607c:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    6080:	ldr	d0, [x0, #2912]
    6084:	b	6020 <PyNumber_FloorDivide@plt+0x2bc0>
    6088:	stp	x29, x30, [sp, #-32]!
    608c:	mov	x3, #0x0                   	// #0
    6090:	mov	x29, sp
    6094:	ldr	x1, [x0, #8]
    6098:	ldr	x2, [x1, #56]
    609c:	ldr	x1, [x1, #168]
    60a0:	str	x19, [sp, #16]
    60a4:	mov	x19, x0
    60a8:	tbz	w1, #11, 60b4 <PyNumber_FloorDivide@plt+0x2c54>
    60ac:	ldr	x4, [x0, x2]
    60b0:	cbnz	x4, 60cc <PyNumber_FloorDivide@plt+0x2c6c>
    60b4:	mov	x0, x19
    60b8:	mov	x2, #0x0                   	// #0
    60bc:	ldr	x19, [sp, #16]
    60c0:	mov	x1, #0x0                   	// #0
    60c4:	ldp	x29, x30, [sp], #32
    60c8:	b	33d0 <_PyObject_MakeTpCall@plt>
    60cc:	mov	x2, #0x0                   	// #0
    60d0:	mov	x1, #0x0                   	// #0
    60d4:	blr	x4
    60d8:	mov	x1, x0
    60dc:	mov	x0, x19
    60e0:	mov	x2, #0x0                   	// #0
    60e4:	ldr	x19, [sp, #16]
    60e8:	ldp	x29, x30, [sp], #32
    60ec:	b	32d0 <_Py_CheckFunctionResult@plt>
    60f0:	stp	x29, x30, [sp, #-32]!
    60f4:	mov	x29, sp
    60f8:	stp	x19, x20, [sp, #16]
    60fc:	mov	x20, x1
    6100:	adrp	x1, 1a000 <_Py_log1p@@Base+0x134a4>
    6104:	add	x1, x1, #0x260
    6108:	mov	x0, x20
    610c:	add	x1, x1, #0x80
    6110:	bl	3160 <_PyObject_LookupSpecial@plt>
    6114:	mov	x19, x0
    6118:	cbnz	x0, 6148 <PyNumber_FloorDivide@plt+0x2ce8>
    611c:	bl	32b0 <PyErr_Occurred@plt>
    6120:	cbnz	x0, 615c <PyNumber_FloorDivide@plt+0x2cfc>
    6124:	mov	x0, x20
    6128:	adrp	x2, 19000 <_Py_log1p@@Base+0x124a4>
    612c:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    6130:	mov	w3, #0x0                   	// #0
    6134:	ldp	x19, x20, [sp, #16]
    6138:	ldp	x29, x30, [sp], #32
    613c:	ldr	x2, [x2, #3832]
    6140:	ldr	x1, [x1, #4000]
    6144:	b	4bdc <PyNumber_FloorDivide@plt+0x177c>
    6148:	bl	6088 <PyNumber_FloorDivide@plt+0x2c28>
    614c:	mov	x20, x0
    6150:	mov	x0, x19
    6154:	mov	x19, x20
    6158:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    615c:	mov	x0, x19
    6160:	ldp	x19, x20, [sp, #16]
    6164:	ldp	x29, x30, [sp], #32
    6168:	ret
    616c:	stp	x29, x30, [sp, #-48]!
    6170:	mov	x29, sp
    6174:	ldr	x0, [x1, #8]
    6178:	stp	x19, x20, [sp, #16]
    617c:	mov	x20, x1
    6180:	ldr	x1, [x0, #264]
    6184:	str	x21, [sp, #32]
    6188:	cbz	x1, 61d8 <PyNumber_FloorDivide@plt+0x2d78>
    618c:	adrp	x1, 1a000 <_Py_log1p@@Base+0x134a4>
    6190:	add	x1, x1, #0x260
    6194:	add	x1, x1, #0x98
    6198:	mov	x0, x20
    619c:	bl	3160 <_PyObject_LookupSpecial@plt>
    61a0:	mov	x21, x0
    61a4:	cbnz	x0, 61f8 <PyNumber_FloorDivide@plt+0x2d98>
    61a8:	bl	32b0 <PyErr_Occurred@plt>
    61ac:	mov	x19, x0
    61b0:	cbnz	x0, 61e0 <PyNumber_FloorDivide@plt+0x2d80>
    61b4:	ldr	x0, [x20, #8]
    61b8:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    61bc:	add	x1, x1, #0xd7c
    61c0:	ldr	x2, [x0, #24]
    61c4:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    61c8:	ldr	x0, [x0, #3888]
    61cc:	ldr	x0, [x0]
    61d0:	bl	33c0 <PyErr_Format@plt>
    61d4:	b	61e4 <PyNumber_FloorDivide@plt+0x2d84>
    61d8:	bl	31d0 <PyType_Ready@plt>
    61dc:	tbz	w0, #31, 618c <PyNumber_FloorDivide@plt+0x2d2c>
    61e0:	mov	x19, #0x0                   	// #0
    61e4:	mov	x0, x19
    61e8:	ldp	x19, x20, [sp, #16]
    61ec:	ldr	x21, [sp, #32]
    61f0:	ldp	x29, x30, [sp], #48
    61f4:	ret
    61f8:	bl	6088 <PyNumber_FloorDivide@plt+0x2c28>
    61fc:	mov	x19, x0
    6200:	mov	x0, x21
    6204:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    6208:	b	61e4 <PyNumber_FloorDivide@plt+0x2d84>
    620c:	stp	x29, x30, [sp, #-32]!
    6210:	mov	x29, sp
    6214:	stp	x19, x20, [sp, #16]
    6218:	mov	x20, x1
    621c:	adrp	x1, 1a000 <_Py_log1p@@Base+0x134a4>
    6220:	add	x1, x1, #0x260
    6224:	mov	x0, x20
    6228:	add	x1, x1, #0xb0
    622c:	bl	3160 <_PyObject_LookupSpecial@plt>
    6230:	mov	x19, x0
    6234:	cbnz	x0, 6264 <PyNumber_FloorDivide@plt+0x2e04>
    6238:	bl	32b0 <PyErr_Occurred@plt>
    623c:	cbnz	x0, 6278 <PyNumber_FloorDivide@plt+0x2e18>
    6240:	mov	x0, x20
    6244:	adrp	x2, 19000 <_Py_log1p@@Base+0x124a4>
    6248:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    624c:	mov	w3, #0x0                   	// #0
    6250:	ldp	x19, x20, [sp, #16]
    6254:	ldp	x29, x30, [sp], #32
    6258:	ldr	x2, [x2, #3832]
    625c:	ldr	x1, [x1, #3992]
    6260:	b	4bdc <PyNumber_FloorDivide@plt+0x177c>
    6264:	bl	6088 <PyNumber_FloorDivide@plt+0x2c28>
    6268:	mov	x20, x0
    626c:	mov	x0, x19
    6270:	mov	x19, x20
    6274:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    6278:	mov	x0, x19
    627c:	ldp	x19, x20, [sp, #16]
    6280:	ldp	x29, x30, [sp], #32
    6284:	ret
    6288:	stp	x29, x30, [sp, #-48]!
    628c:	mov	x29, sp
    6290:	stp	x19, x20, [sp, #16]
    6294:	mov	x20, x1
    6298:	sub	x1, x1, x0
    629c:	stp	x21, x22, [sp, #32]
    62a0:	cmp	x1, #0x81
    62a4:	mov	x22, x2
    62a8:	lsr	x19, x1, #1
    62ac:	b.hi	62e4 <PyNumber_FloorDivide@plt+0x2e84>  // b.pmore
    62b0:	mul	x1, x19, x2
    62b4:	cmp	x1, #0x40
    62b8:	b.hi	62e4 <PyNumber_FloorDivide@plt+0x2e84>  // b.pmore
    62bc:	add	x1, x0, #0x2
    62c0:	cmp	x1, x20
    62c4:	b.cc	62d8 <PyNumber_FloorDivide@plt+0x2e78>  // b.lo, b.ul, b.last
    62c8:	ldp	x19, x20, [sp, #16]
    62cc:	ldp	x21, x22, [sp, #32]
    62d0:	ldp	x29, x30, [sp], #48
    62d4:	b	3350 <PyLong_FromUnsignedLong@plt>
    62d8:	mul	x0, x0, x1
    62dc:	add	x1, x1, #0x2
    62e0:	b	62c0 <PyNumber_FloorDivide@plt+0x2e60>
    62e4:	add	x19, x0, x19
    62e8:	mov	x2, #0x0                   	// #0
    62ec:	orr	x19, x19, #0x1
    62f0:	sub	x1, x19, #0x2
    62f4:	cbnz	x1, 6354 <PyNumber_FloorDivide@plt+0x2ef4>
    62f8:	mov	x1, x19
    62fc:	bl	6288 <PyNumber_FloorDivide@plt+0x2e28>
    6300:	mov	x21, x0
    6304:	cbz	x0, 6360 <PyNumber_FloorDivide@plt+0x2f00>
    6308:	mov	x0, x19
    630c:	mov	x2, x22
    6310:	mov	x1, x20
    6314:	bl	6288 <PyNumber_FloorDivide@plt+0x2e28>
    6318:	mov	x19, x0
    631c:	cbz	x0, 636c <PyNumber_FloorDivide@plt+0x2f0c>
    6320:	mov	x1, x0
    6324:	mov	x0, x21
    6328:	bl	30d0 <PyNumber_Multiply@plt>
    632c:	mov	x20, x0
    6330:	mov	x0, x21
    6334:	bl	3ebc <PyNumber_FloorDivide@plt+0xa5c>
    6338:	mov	x0, x19
    633c:	bl	3ebc <PyNumber_FloorDivide@plt+0xa5c>
    6340:	mov	x0, x20
    6344:	ldp	x19, x20, [sp, #16]
    6348:	ldp	x21, x22, [sp, #32]
    634c:	ldp	x29, x30, [sp], #48
    6350:	ret
    6354:	add	x2, x2, #0x1
    6358:	lsr	x1, x1, #1
    635c:	b	62f4 <PyNumber_FloorDivide@plt+0x2e94>
    6360:	mov	x20, #0x0                   	// #0
    6364:	mov	x19, #0x0                   	// #0
    6368:	b	6330 <PyNumber_FloorDivide@plt+0x2ed0>
    636c:	mov	x20, #0x0                   	// #0
    6370:	b	6330 <PyNumber_FloorDivide@plt+0x2ed0>
    6374:	stp	x29, x30, [sp, #-96]!
    6378:	mov	x29, sp
    637c:	stp	x19, x20, [sp, #16]
    6380:	mov	x19, x1
    6384:	ldr	x0, [x1, #8]
    6388:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    638c:	stp	x21, x22, [sp, #32]
    6390:	ldr	x1, [x1, #3824]
    6394:	stp	x23, x24, [sp, #48]
    6398:	str	x25, [sp, #64]
    639c:	cmp	x0, x1
    63a0:	b.ne	63d8 <PyNumber_FloorDivide@plt+0x2f78>  // b.any
    63a4:	ldr	d0, [x19, #16]
    63a8:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    63ac:	fmov	d1, x0
    63b0:	fabs	d2, d0
    63b4:	fcmp	d2, d1
    63b8:	b.ls	63ec <PyNumber_FloorDivide@plt+0x2f8c>  // b.plast
    63bc:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    63c0:	add	x1, x1, #0xda8
    63c4:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    63c8:	ldr	x0, [x0, #3872]
    63cc:	ldr	x0, [x0]
    63d0:	bl	3130 <PyErr_SetString@plt>
    63d4:	b	6454 <PyNumber_FloorDivide@plt+0x2ff4>
    63d8:	bl	33b0 <PyType_IsSubtype@plt>
    63dc:	cbnz	w0, 63a4 <PyNumber_FloorDivide@plt+0x2f44>
    63e0:	mov	x0, x19
    63e4:	bl	33e0 <PyNumber_Index@plt>
    63e8:	b	63fc <PyNumber_FloorDivide@plt+0x2f9c>
    63ec:	frintm	d1, d0
    63f0:	fcmp	d1, d0
    63f4:	b.ne	63bc <PyNumber_FloorDivide@plt+0x2f5c>  // b.any
    63f8:	bl	3000 <PyLong_FromDouble@plt>
    63fc:	mov	x20, x0
    6400:	cbz	x0, 6454 <PyNumber_FloorDivide@plt+0x2ff4>
    6404:	add	x1, sp, #0x5c
    6408:	bl	3290 <PyLong_AsLongAndOverflow@plt>
    640c:	mov	x19, x0
    6410:	mov	x0, x20
    6414:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    6418:	cmn	x19, #0x1
    641c:	b.eq	644c <PyNumber_FloorDivide@plt+0x2fec>  // b.none
    6420:	ldr	w0, [sp, #92]
    6424:	cmp	w0, #0x1
    6428:	b.ne	645c <PyNumber_FloorDivide@plt+0x2ffc>  // b.any
    642c:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    6430:	mov	x2, #0x7fffffffffffffff    	// #9223372036854775807
    6434:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    6438:	add	x1, x1, #0xdd1
    643c:	ldr	x0, [x0, #3936]
    6440:	ldr	x0, [x0]
    6444:	bl	33c0 <PyErr_Format@plt>
    6448:	b	6454 <PyNumber_FloorDivide@plt+0x2ff4>
    644c:	bl	32b0 <PyErr_Occurred@plt>
    6450:	cbz	x0, 6420 <PyNumber_FloorDivide@plt+0x2fc0>
    6454:	mov	x19, #0x0                   	// #0
    6458:	b	6494 <PyNumber_FloorDivide@plt+0x3034>
    645c:	cmn	w0, #0x1
    6460:	b.eq	6468 <PyNumber_FloorDivide@plt+0x3008>  // b.none
    6464:	tbz	x19, #63, 6474 <PyNumber_FloorDivide@plt+0x3014>
    6468:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    646c:	add	x1, x1, #0xdfc
    6470:	b	63c4 <PyNumber_FloorDivide@plt+0x2f64>
    6474:	cmp	x19, #0x14
    6478:	b.gt	64b0 <PyNumber_FloorDivide@plt+0x3050>
    647c:	adrp	x0, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    6480:	add	x0, x0, #0xf40
    6484:	add	x0, x0, #0x188
    6488:	ldr	x0, [x0, x19, lsl #3]
    648c:	bl	3350 <PyLong_FromUnsignedLong@plt>
    6490:	mov	x19, x0
    6494:	mov	x0, x19
    6498:	ldp	x19, x20, [sp, #16]
    649c:	ldp	x21, x22, [sp, #32]
    64a0:	ldp	x23, x24, [sp, #48]
    64a4:	ldr	x25, [sp, #64]
    64a8:	ldp	x29, x30, [sp], #96
    64ac:	ret
    64b0:	mov	x0, #0x1                   	// #1
    64b4:	bl	31e0 <PyLong_FromLong@plt>
    64b8:	mov	x20, x0
    64bc:	cbz	x0, 6454 <PyNumber_FloorDivide@plt+0x2ff4>
    64c0:	ldr	x0, [x0]
    64c4:	mov	x1, #0x0                   	// #0
    64c8:	add	x0, x0, #0x1
    64cc:	str	x0, [x20]
    64d0:	mov	x0, x19
    64d4:	mov	x24, x1
    64d8:	lsr	x0, x0, #1
    64dc:	add	x1, x1, #0x1
    64e0:	cbnz	x0, 64d4 <PyNumber_FloorDivide@plt+0x3074>
    64e4:	sub	x24, x24, #0x1
    64e8:	mov	x22, x20
    64ec:	mov	x0, #0x3                   	// #3
    64f0:	tbz	x24, #63, 6528 <PyNumber_FloorDivide@plt+0x30c8>
    64f4:	mov	x0, x20
    64f8:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    64fc:	fmov	d0, x19
    6500:	mov	x0, x22
    6504:	cnt	v0.8b, v0.8b
    6508:	addv	b0, v0.8b
    650c:	umov	w1, v0.b[0]
    6510:	sub	x1, x19, x1
    6514:	bl	3450 <_PyLong_Lshift@plt>
    6518:	mov	x19, x0
    651c:	mov	x0, x22
    6520:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    6524:	b	6494 <PyNumber_FloorDivide@plt+0x3034>
    6528:	lsr	x21, x19, x24
    652c:	cmp	x21, #0x2
    6530:	b.ls	65a4 <PyNumber_FloorDivide@plt+0x3144>  // b.plast
    6534:	add	x21, x21, #0x1
    6538:	mov	x2, #0x0                   	// #0
    653c:	orr	x21, x21, #0x1
    6540:	sub	x1, x21, #0x2
    6544:	cbnz	x1, 65ac <PyNumber_FloorDivide@plt+0x314c>
    6548:	mov	x1, x21
    654c:	bl	6288 <PyNumber_FloorDivide@plt+0x2e28>
    6550:	mov	x25, x0
    6554:	cbz	x0, 65bc <PyNumber_FloorDivide@plt+0x315c>
    6558:	mov	x1, x0
    655c:	mov	x0, x20
    6560:	bl	30d0 <PyNumber_Multiply@plt>
    6564:	mov	x23, x0
    6568:	mov	x0, x25
    656c:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    6570:	cbz	x23, 65bc <PyNumber_FloorDivide@plt+0x315c>
    6574:	mov	x0, x20
    6578:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    657c:	mov	x1, x23
    6580:	mov	x0, x22
    6584:	bl	30d0 <PyNumber_Multiply@plt>
    6588:	mov	x20, x0
    658c:	cbz	x0, 65b8 <PyNumber_FloorDivide@plt+0x3158>
    6590:	mov	x0, x22
    6594:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    6598:	mov	x22, x20
    659c:	mov	x0, x21
    65a0:	mov	x20, x23
    65a4:	sub	x24, x24, #0x1
    65a8:	b	64f0 <PyNumber_FloorDivide@plt+0x3090>
    65ac:	add	x2, x2, #0x1
    65b0:	lsr	x1, x1, #1
    65b4:	b	6544 <PyNumber_FloorDivide@plt+0x30e4>
    65b8:	mov	x20, x23
    65bc:	mov	x0, x22
    65c0:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    65c4:	mov	x0, x20
    65c8:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    65cc:	b	6454 <PyNumber_FloorDivide@plt+0x2ff4>
    65d0:	stp	x29, x30, [sp, #-112]!
    65d4:	mov	x29, sp
    65d8:	stp	x19, x20, [sp, #16]
    65dc:	mov	x20, x1
    65e0:	mov	x19, x2
    65e4:	stp	x21, x22, [sp, #32]
    65e8:	mov	x21, x0
    65ec:	sub	x0, x2, #0x1
    65f0:	stp	x23, x24, [sp, #48]
    65f4:	cmp	x0, #0x1
    65f8:	stp	x25, x26, [sp, #64]
    65fc:	str	x27, [sp, #80]
    6600:	b.hi	6640 <PyNumber_FloorDivide@plt+0x31e0>  // b.pmore
    6604:	cmp	x19, #0x1
    6608:	ldr	x0, [x20]
    660c:	b.gt	6664 <PyNumber_FloorDivide@plt+0x3204>
    6610:	mov	x1, x0
    6614:	mov	x0, x21
    6618:	bl	6374 <PyNumber_FloorDivide@plt+0x2f14>
    661c:	mov	x19, x0
    6620:	mov	x0, x19
    6624:	ldp	x19, x20, [sp, #16]
    6628:	ldp	x21, x22, [sp, #32]
    662c:	ldp	x23, x24, [sp, #48]
    6630:	ldp	x25, x26, [sp, #64]
    6634:	ldr	x27, [sp, #80]
    6638:	ldp	x29, x30, [sp], #112
    663c:	ret
    6640:	adrp	x0, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    6644:	mov	x1, x19
    6648:	add	x0, x0, #0xe28
    664c:	mov	x3, #0x2                   	// #2
    6650:	mov	x2, #0x1                   	// #1
    6654:	bl	3280 <_PyArg_CheckPositional@plt>
    6658:	cbnz	w0, 6604 <PyNumber_FloorDivide@plt+0x31a4>
    665c:	mov	x19, #0x0                   	// #0
    6660:	b	6620 <PyNumber_FloorDivide@plt+0x31c0>
    6664:	adrp	x2, 19000 <_Py_log1p@@Base+0x124a4>
    6668:	ldr	x22, [x20, #8]
    666c:	ldr	x2, [x2, #3960]
    6670:	cmp	x22, x2
    6674:	b.eq	6610 <PyNumber_FloorDivide@plt+0x31b0>  // b.none
    6678:	bl	33e0 <PyNumber_Index@plt>
    667c:	mov	x20, x0
    6680:	cbz	x0, 665c <PyNumber_FloorDivide@plt+0x31fc>
    6684:	adrp	x1, 19000 <_Py_log1p@@Base+0x124a4>
    6688:	mov	x21, x1
    668c:	ldr	x3, [x0, #8]
    6690:	ldr	x2, [x1, #3984]
    6694:	cmp	x3, x2
    6698:	b.eq	66b4 <PyNumber_FloorDivide@plt+0x3254>  // b.none
    669c:	bl	3170 <_PyLong_Copy@plt>
    66a0:	mov	x19, x0
    66a4:	mov	x0, x20
    66a8:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    66ac:	cbz	x19, 665c <PyNumber_FloorDivide@plt+0x31fc>
    66b0:	mov	x20, x19
    66b4:	mov	x0, x22
    66b8:	bl	33e0 <PyNumber_Index@plt>
    66bc:	mov	x19, x0
    66c0:	cbnz	x0, 66d0 <PyNumber_FloorDivide@plt+0x3270>
    66c4:	mov	x0, x20
    66c8:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    66cc:	b	6620 <PyNumber_FloorDivide@plt+0x31c0>
    66d0:	ldr	x1, [x21, #3984]
    66d4:	ldr	x2, [x0, #8]
    66d8:	cmp	x2, x1
    66dc:	b.eq	66f8 <PyNumber_FloorDivide@plt+0x3298>  // b.none
    66e0:	bl	3170 <_PyLong_Copy@plt>
    66e4:	mov	x21, x0
    66e8:	mov	x0, x19
    66ec:	mov	x19, x21
    66f0:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    66f4:	cbz	x21, 66c4 <PyNumber_FloorDivide@plt+0x3264>
    66f8:	ldr	x0, [x20, #16]
    66fc:	tbz	x0, #63, 6744 <PyNumber_FloorDivide@plt+0x32e4>
    6700:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    6704:	add	x1, x1, #0xc2e
    6708:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    670c:	ldr	x0, [x0, #3872]
    6710:	ldr	x0, [x0]
    6714:	bl	3130 <PyErr_SetString@plt>
    6718:	mov	x23, #0x0                   	// #0
    671c:	mov	x22, #0x0                   	// #0
    6720:	mov	x0, x23
    6724:	bl	3ebc <PyNumber_FloorDivide@plt+0xa5c>
    6728:	mov	x0, x22
    672c:	bl	3ebc <PyNumber_FloorDivide@plt+0xa5c>
    6730:	mov	x0, x20
    6734:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    6738:	mov	x0, x19
    673c:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    6740:	b	665c <PyNumber_FloorDivide@plt+0x31fc>
    6744:	ldr	x0, [x19, #16]
    6748:	tbz	x0, #63, 6758 <PyNumber_FloorDivide@plt+0x32f8>
    674c:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    6750:	add	x1, x1, #0xc4f
    6754:	b	6708 <PyNumber_FloorDivide@plt+0x32a8>
    6758:	mov	x1, x19
    675c:	mov	x0, x20
    6760:	mov	w2, #0x0                   	// #0
    6764:	bl	31f0 <PyObject_RichCompareBool@plt>
    6768:	cmp	w0, #0x0
    676c:	cbz	w0, 6798 <PyNumber_FloorDivide@plt+0x3338>
    6770:	b.le	6718 <PyNumber_FloorDivide@plt+0x32b8>
    6774:	mov	x0, #0x0                   	// #0
    6778:	bl	31e0 <PyLong_FromLong@plt>
    677c:	mov	x21, x0
    6780:	mov	x0, x20
    6784:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    6788:	mov	x0, x19
    678c:	mov	x19, x21
    6790:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    6794:	b	6620 <PyNumber_FloorDivide@plt+0x31c0>
    6798:	add	x1, sp, #0x6c
    679c:	mov	x0, x19
    67a0:	bl	2fe0 <PyLong_AsLongLongAndOverflow@plt>
    67a4:	mov	x24, x0
    67a8:	ldr	w0, [sp, #108]
    67ac:	cmp	w0, #0x0
    67b0:	b.le	67d4 <PyNumber_FloorDivide@plt+0x3374>
    67b4:	adrp	x0, 19000 <_Py_log1p@@Base+0x124a4>
    67b8:	mov	x2, #0x7fffffffffffffff    	// #9223372036854775807
    67bc:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    67c0:	add	x1, x1, #0xe2d
    67c4:	ldr	x0, [x0, #3936]
    67c8:	ldr	x0, [x0]
    67cc:	bl	33c0 <PyErr_Format@plt>
    67d0:	b	6718 <PyNumber_FloorDivide@plt+0x32b8>
    67d4:	cmn	x24, #0x1
    67d8:	b.eq	6718 <PyNumber_FloorDivide@plt+0x32b8>  // b.none
    67dc:	cbnz	x24, 67e8 <PyNumber_FloorDivide@plt+0x3388>
    67e0:	mov	x0, #0x1                   	// #1
    67e4:	b	6778 <PyNumber_FloorDivide@plt+0x3318>
    67e8:	cmp	x24, #0x1
    67ec:	ldr	x0, [x20]
    67f0:	b.ne	6804 <PyNumber_FloorDivide@plt+0x33a4>  // b.any
    67f4:	add	x0, x0, #0x1
    67f8:	mov	x21, x20
    67fc:	str	x0, [x20]
    6800:	b	6780 <PyNumber_FloorDivide@plt+0x3320>
    6804:	adrp	x26, 19000 <_Py_log1p@@Base+0x124a4>
    6808:	mov	x25, x20
    680c:	mov	x21, x20
    6810:	add	x0, x0, #0x2
    6814:	ldr	x26, [x26, #4008]
    6818:	mov	x27, #0x1                   	// #1
    681c:	str	x0, [x20]
    6820:	cmp	x24, x27
    6824:	b.gt	6834 <PyNumber_FloorDivide@plt+0x33d4>
    6828:	mov	x0, x25
    682c:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    6830:	b	6780 <PyNumber_FloorDivide@plt+0x3320>
    6834:	ldr	x1, [x26]
    6838:	mov	x0, x25
    683c:	bl	3420 <PyNumber_Subtract@plt>
    6840:	mov	x23, x0
    6844:	mov	x0, x25
    6848:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    684c:	cbz	x23, 687c <PyNumber_FloorDivide@plt+0x341c>
    6850:	mov	x1, x23
    6854:	mov	x0, x21
    6858:	bl	30d0 <PyNumber_Multiply@plt>
    685c:	mov	x22, x0
    6860:	mov	x0, x21
    6864:	bl	3ea4 <PyNumber_FloorDivide@plt+0xa44>
    6868:	cbz	x22, 6720 <PyNumber_FloorDivide@plt+0x32c0>
    686c:	add	x27, x27, #0x1
    6870:	mov	x25, x23
    6874:	mov	x21, x22
    6878:	b	6820 <PyNumber_FloorDivide@plt+0x33c0>
    687c:	mov	x22, x21
    6880:	b	6720 <PyNumber_FloorDivide@plt+0x32c0>
    6884:	stp	x29, x30, [sp, #-224]!
    6888:	cmp	x2, #0x10
    688c:	mov	x29, sp
    6890:	stp	x19, x20, [sp, #16]
    6894:	mov	x20, x2
    6898:	stp	x21, x22, [sp, #32]
    689c:	stp	x23, x24, [sp, #48]
    68a0:	mov	x23, x1
    68a4:	str	x25, [sp, #64]
    68a8:	stp	d8, d9, [sp, #80]
    68ac:	b.le	68e0 <PyNumber_FloorDivide@plt+0x3480>
    68b0:	lsl	x0, x2, #3
    68b4:	bl	3140 <PyObject_Malloc@plt>
    68b8:	mov	x19, x0
    68bc:	cbnz	x0, 68e4 <PyNumber_FloorDivide@plt+0x3484>
    68c0:	bl	30a0 <PyErr_NoMemory@plt>
    68c4:	ldp	x19, x20, [sp, #16]
    68c8:	ldp	x21, x22, [sp, #32]
    68cc:	ldp	x23, x24, [sp, #48]
    68d0:	ldr	x25, [sp, #64]
    68d4:	ldp	d8, d9, [sp, #80]
    68d8:	ldp	x29, x30, [sp], #224
    68dc:	ret
    68e0:	add	x19, sp, #0x60
    68e4:	adrp	x24, 19000 <_Py_log1p@@Base+0x124a4>
    68e8:	adrp	x25, 19000 <_Py_log1p@@Base+0x124a4>
    68ec:	movi	d8, #0x0
    68f0:	mov	w22, #0x0                   	// #0
    68f4:	ldr	x24, [x24, #3824]
    68f8:	mov	x21, #0x0                   	// #0
    68fc:	ldr	x25, [x25, #3984]
    6900:	fmov	d9, #-1.000000000000000000e+00
    6904:	cmp	x21, x20
    6908:	b.lt	6964 <PyNumber_FloorDivide@plt+0x3504>  // b.tstop
    690c:	fabs	d1, d8
    6910:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    6914:	fmov	d0, x0
    6918:	fcmp	d1, d0
    691c:	b.gt	6944 <PyNumber_FloorDivide@plt+0x34e4>
    6920:	cbnz	w22, 69c8 <PyNumber_FloorDivide@plt+0x3568>
    6924:	fcmp	d8, #0.0
    6928:	ccmp	x20, #0x1, #0x4, ne  // ne = any
    692c:	b.le	6944 <PyNumber_FloorDivide@plt+0x34e4>
    6930:	fmov	d0, d8
    6934:	mov	x1, x19
    6938:	mov	x0, x20
    693c:	bl	5084 <PyNumber_FloorDivide@plt+0x1c24>
    6940:	fmov	d8, d0
    6944:	add	x0, sp, #0x60
    6948:	cmp	x19, x0
    694c:	b.eq	6958 <PyNumber_FloorDivide@plt+0x34f8>  // b.none
    6950:	mov	x0, x19
    6954:	bl	31b0 <PyObject_Free@plt>
    6958:	fmov	d0, d8
    695c:	bl	31c0 <PyFloat_FromDouble@plt>
    6960:	b	68c4 <PyNumber_FloorDivide@plt+0x3464>
    6964:	ldr	x0, [x23, x21, lsl #3]
    6968:	ldr	x1, [x0, #8]
    696c:	cmp	x1, x24
    6970:	b.ne	699c <PyNumber_FloorDivide@plt+0x353c>  // b.any
    6974:	ldr	d0, [x0, #16]
    6978:	fabs	d1, d0
    697c:	fcmp	d1, d1
    6980:	str	d1, [x19, x21, lsl #3]
    6984:	add	x21, x21, #0x1
    6988:	cset	w0, vs
    698c:	fcmp	d8, d1
    6990:	orr	w22, w22, w0
    6994:	fcsel	d8, d8, d1, pl  // pl = nfrst
    6998:	b	6904 <PyNumber_FloorDivide@plt+0x34a4>
    699c:	cmp	x1, x25
    69a0:	b.ne	69c0 <PyNumber_FloorDivide@plt+0x3560>  // b.any
    69a4:	bl	3330 <PyLong_AsDouble@plt>
    69a8:	fcmp	d0, d9
    69ac:	b.ne	6978 <PyNumber_FloorDivide@plt+0x3518>  // b.any
    69b0:	bl	32b0 <PyErr_Occurred@plt>
    69b4:	cbnz	x0, 69d4 <PyNumber_FloorDivide@plt+0x3574>
    69b8:	fmov	d0, #-1.000000000000000000e+00
    69bc:	b	6978 <PyNumber_FloorDivide@plt+0x3518>
    69c0:	bl	32e0 <PyFloat_AsDouble@plt>
    69c4:	b	69a8 <PyNumber_FloorDivide@plt+0x3548>
    69c8:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    69cc:	ldr	d8, [x0, #2912]
    69d0:	b	6944 <PyNumber_FloorDivide@plt+0x34e4>
    69d4:	add	x0, sp, #0x60
    69d8:	cmp	x19, x0
    69dc:	b.eq	69e8 <PyNumber_FloorDivide@plt+0x3588>  // b.none
    69e0:	mov	x0, x19
    69e4:	bl	31b0 <PyObject_Free@plt>
    69e8:	mov	x0, #0x0                   	// #0
    69ec:	b	68c4 <PyNumber_FloorDivide@plt+0x3464>
    69f0:	fabs	d2, d0
    69f4:	mov	x0, #0x7fefffffffffffff    	// #9218868437227405311
    69f8:	fmov	d1, x0
    69fc:	stp	x29, x30, [sp, #-32]!
    6a00:	mov	x29, sp
    6a04:	fcmp	d2, d1
    6a08:	str	d8, [sp, #16]
    6a0c:	fmov	d8, d0
    6a10:	b.hi	6a5c <PyNumber_FloorDivide@plt+0x35fc>  // b.pmore
    6a14:	fcmpe	d0, #0.0
    6a18:	b.le	6a28 <PyNumber_FloorDivide@plt+0x35c8>
    6a1c:	ldr	d8, [sp, #16]
    6a20:	ldp	x29, x30, [sp], #32
    6a24:	b	30e0 <log10@plt>
    6a28:	bl	33f0 <__errno_location@plt>
    6a2c:	fcmp	d8, #0.0
    6a30:	mov	w1, #0x21                  	// #33
    6a34:	str	w1, [x0]
    6a38:	mov	x0, #0xfff0000000000000    	// #-4503599627370496
    6a3c:	fmov	d1, x0
    6a40:	mov	x0, #0x7ff8000000000000    	// #9221120237041090560
    6a44:	fmov	d0, x0
    6a48:	fcsel	d8, d1, d0, eq  // eq = none
    6a4c:	fmov	d0, d8
    6a50:	ldr	d8, [sp, #16]
    6a54:	ldp	x29, x30, [sp], #32
    6a58:	ret
    6a5c:	fcmp	d0, d0
    6a60:	b.vs	6a4c <PyNumber_FloorDivide@plt+0x35ec>
    6a64:	fcmpe	d0, #0.0
    6a68:	b.gt	6a4c <PyNumber_FloorDivide@plt+0x35ec>
    6a6c:	bl	33f0 <__errno_location@plt>
    6a70:	mov	w1, #0x21                  	// #33
    6a74:	str	w1, [x0]
    6a78:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    6a7c:	ldr	d8, [x0, #2912]
    6a80:	b	6a4c <PyNumber_FloorDivide@plt+0x35ec>

0000000000006a84 <PyInit_math@@Base>:
    6a84:	stp	x29, x30, [sp, #-32]!
    6a88:	adrp	x0, 1a000 <_Py_log1p@@Base+0x134a4>
    6a8c:	add	x0, x0, #0x260
    6a90:	mov	x29, sp
    6a94:	add	x0, x0, #0xc8
    6a98:	mov	w1, #0x3f5                 	// #1013
    6a9c:	str	x19, [sp, #16]
    6aa0:	bl	32c0 <PyModule_Create2@plt>
    6aa4:	mov	x19, x0
    6aa8:	cbz	x0, 6b4c <PyInit_math@@Base+0xc8>
    6aac:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    6ab0:	ldr	d0, [x0, #2920]
    6ab4:	bl	31c0 <PyFloat_FromDouble@plt>
    6ab8:	mov	x2, x0
    6abc:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    6ac0:	mov	x0, x19
    6ac4:	add	x1, x1, #0xe44
    6ac8:	bl	3380 <PyModule_AddObject@plt>
    6acc:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    6ad0:	ldr	d0, [x0, #3048]
    6ad4:	bl	31c0 <PyFloat_FromDouble@plt>
    6ad8:	mov	x2, x0
    6adc:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    6ae0:	mov	x0, x19
    6ae4:	add	x1, x1, #0xe74
    6ae8:	bl	3380 <PyModule_AddObject@plt>
    6aec:	adrp	x0, 8000 <_Py_log1p@@Base+0x14a4>
    6af0:	ldr	d0, [x0, #3056]
    6af4:	bl	31c0 <PyFloat_FromDouble@plt>
    6af8:	mov	x2, x0
    6afc:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    6b00:	mov	x0, x19
    6b04:	add	x1, x1, #0xe47
    6b08:	bl	3380 <PyModule_AddObject@plt>
    6b0c:	mov	w0, #0x0                   	// #0
    6b10:	bl	3360 <_Py_dg_infinity@plt>
    6b14:	bl	31c0 <PyFloat_FromDouble@plt>
    6b18:	mov	x2, x0
    6b1c:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    6b20:	mov	x0, x19
    6b24:	add	x1, x1, #0xef9
    6b28:	bl	3380 <PyModule_AddObject@plt>
    6b2c:	mov	w0, #0x0                   	// #0
    6b30:	bl	3240 <_Py_dg_stdnan@plt>
    6b34:	bl	31c0 <PyFloat_FromDouble@plt>
    6b38:	mov	x2, x0
    6b3c:	adrp	x1, 6000 <PyNumber_FloorDivide@plt+0x2ba0>
    6b40:	mov	x0, x19
    6b44:	add	x1, x1, #0xeff
    6b48:	bl	3380 <PyModule_AddObject@plt>
    6b4c:	mov	x0, x19
    6b50:	ldr	x19, [sp, #16]
    6b54:	ldp	x29, x30, [sp], #32
    6b58:	ret

0000000000006b5c <_Py_log1p@@Base>:
    6b5c:	fcmp	d0, #0.0
    6b60:	b.eq	6b68 <_Py_log1p@@Base+0xc>  // b.none
    6b64:	b	3250 <log1p@plt>
    6b68:	ret

Disassembly of section .fini:

0000000000006b6c <.fini>:
    6b6c:	stp	x29, x30, [sp, #-16]!
    6b70:	mov	x29, sp
    6b74:	ldp	x29, x30, [sp], #16
    6b78:	ret
