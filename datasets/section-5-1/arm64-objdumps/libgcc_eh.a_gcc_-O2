In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libgcc_eh.a_gcc_-O2:

unwind-dw2.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <read_encoded_value_with_base>:
       0:	and	w5, w0, #0xff
       4:	cmp	w5, #0x50
       8:	b.eq	120 <read_encoded_value_with_base+0x120>  // b.none
       c:	and	w4, w5, #0xf
      10:	cmp	w4, #0x4
      14:	b.eq	30 <read_encoded_value_with_base+0x30>  // b.none
      18:	b.ls	44 <read_encoded_value_with_base+0x44>  // b.plast
      1c:	cmp	w4, #0xb
      20:	b.eq	144 <read_encoded_value_with_base+0x144>  // b.none
      24:	b.ls	a0 <read_encoded_value_with_base+0xa0>  // b.plast
      28:	cmp	w4, #0xc
      2c:	b.ne	154 <read_encoded_value_with_base+0x154>  // b.any
      30:	mov	x0, x2
      34:	ldr	x4, [x0], #8
      38:	cbnz	x4, 100 <read_encoded_value_with_base+0x100>
      3c:	str	x4, [x3]
      40:	ret
      44:	cmp	w4, #0x2
      48:	b.eq	134 <read_encoded_value_with_base+0x134>  // b.none
      4c:	b.ls	68 <read_encoded_value_with_base+0x68>  // b.plast
      50:	cmp	w4, #0x3
      54:	b.ne	154 <read_encoded_value_with_base+0x154>  // b.any
      58:	mov	x0, x2
      5c:	ldr	w4, [x0], #4
      60:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
      64:	b	100 <read_encoded_value_with_base+0x100>
      68:	cbz	w4, 30 <read_encoded_value_with_base+0x30>
      6c:	cmp	w4, #0x1
      70:	b.ne	154 <read_encoded_value_with_base+0x154>  // b.any
      74:	mov	x0, x2
      78:	mov	x4, #0x0                   	// #0
      7c:	mov	w7, #0x0                   	// #0
      80:	ldrb	w8, [x0], #1
      84:	and	x6, x8, #0x7f
      88:	lsl	x6, x6, x7
      8c:	add	w7, w7, #0x7
      90:	orr	x4, x4, x6
      94:	tbnz	w8, #7, 80 <read_encoded_value_with_base+0x80>
      98:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
      9c:	b	100 <read_encoded_value_with_base+0x100>
      a0:	cmp	w4, #0x9
      a4:	b.eq	c0 <read_encoded_value_with_base+0xc0>  // b.none
      a8:	cmp	w4, #0xa
      ac:	b.ne	154 <read_encoded_value_with_base+0x154>  // b.any
      b0:	mov	x0, x2
      b4:	ldrsh	x4, [x0], #2
      b8:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
      bc:	b	100 <read_encoded_value_with_base+0x100>
      c0:	mov	x0, x2
      c4:	mov	x4, #0x0                   	// #0
      c8:	mov	w7, #0x0                   	// #0
      cc:	ldrb	w8, [x0], #1
      d0:	and	x6, x8, #0x7f
      d4:	lsl	x6, x6, x7
      d8:	add	w7, w7, #0x7
      dc:	orr	x4, x4, x6
      e0:	tbnz	w8, #7, cc <read_encoded_value_with_base+0xcc>
      e4:	cmp	w7, #0x3f
      e8:	b.hi	38 <read_encoded_value_with_base+0x38>  // b.pmore
      ec:	tbz	w8, #6, 38 <read_encoded_value_with_base+0x38>
      f0:	mov	x6, #0xffffffffffffffff    	// #-1
      f4:	lsl	x7, x6, x7
      f8:	orr	x4, x4, x7
      fc:	nop
     100:	and	w6, w5, #0x70
     104:	cmp	w6, #0x10
     108:	csel	x1, x2, x1, eq  // eq = none
     10c:	add	x4, x4, x1
     110:	tbz	w5, #7, 3c <read_encoded_value_with_base+0x3c>
     114:	ldr	x4, [x4]
     118:	str	x4, [x3]
     11c:	ret
     120:	add	x0, x2, #0x7
     124:	and	x0, x0, #0xfffffffffffffff8
     128:	ldr	x4, [x0], #8
     12c:	str	x4, [x3]
     130:	ret
     134:	mov	x0, x2
     138:	ldrh	w4, [x0], #2
     13c:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
     140:	b	100 <read_encoded_value_with_base+0x100>
     144:	mov	x0, x2
     148:	ldrsw	x4, [x0], #4
     14c:	cbz	x4, 3c <read_encoded_value_with_base+0x3c>
     150:	b	100 <read_encoded_value_with_base+0x100>
     154:	stp	x29, x30, [sp, #-16]!
     158:	mov	x29, sp
     15c:	bl	0 <abort>

0000000000000160 <base_of_encoded_value>:
     160:	and	w0, w0, #0xff
     164:	cmp	w0, #0xff
     168:	b.eq	1b4 <base_of_encoded_value+0x54>  // b.none
     16c:	and	w2, w0, #0x70
     170:	cmp	w2, #0x30
     174:	b.eq	1cc <base_of_encoded_value+0x6c>  // b.none
     178:	b.hi	18c <base_of_encoded_value+0x2c>  // b.pmore
     17c:	cmp	w2, #0x20
     180:	b.ne	19c <base_of_encoded_value+0x3c>  // b.any
     184:	ldr	x0, [x1, #808]
     188:	ret
     18c:	cmp	w2, #0x40
     190:	b.ne	1bc <base_of_encoded_value+0x5c>  // b.any
     194:	ldr	x0, [x1, #824]
     198:	ret
     19c:	b.hi	1a8 <base_of_encoded_value+0x48>  // b.pmore
     1a0:	tst	w0, #0x60
     1a4:	b.eq	1b4 <base_of_encoded_value+0x54>  // b.none
     1a8:	stp	x29, x30, [sp, #-16]!
     1ac:	mov	x29, sp
     1b0:	bl	0 <abort>
     1b4:	mov	x0, #0x0                   	// #0
     1b8:	ret
     1bc:	cmp	w2, #0x50
     1c0:	mov	x0, #0x0                   	// #0
     1c4:	b.ne	1a8 <base_of_encoded_value+0x48>  // b.any
     1c8:	ret
     1cc:	ldr	x0, [x1, #816]
     1d0:	ret
     1d4:	nop

00000000000001d8 <execute_cfa_program>:
     1d8:	str	xzr, [x3, #1568]
     1dc:	cmp	x0, x1
     1e0:	b.cs	970 <execute_cfa_program+0x798>  // b.hs, b.nlast
     1e4:	stp	x29, x30, [sp, #-112]!
     1e8:	mov	x29, sp
     1ec:	stp	x21, x22, [sp, #32]
     1f0:	mov	x21, x2
     1f4:	mov	x22, x1
     1f8:	stp	x19, x20, [sp, #16]
     1fc:	mov	x20, x3
     200:	ldr	x2, [x21, #792]
     204:	stp	x23, x24, [sp, #48]
     208:	adrp	x23, 0 <read_encoded_value_with_base>
     20c:	ldr	x5, [x21, #832]
     210:	stp	x25, x26, [sp, #64]
     214:	add	x23, x23, #0x0
     218:	ldr	x1, [x20, #1608]
     21c:	stp	x27, x28, [sp, #80]
     220:	add	x5, x2, x5, lsr #63
     224:	add	x27, x29, #0x68
     228:	cmp	x1, x5
     22c:	mov	x25, #0x0                   	// #0
     230:	mov	w24, #0x1                   	// #1
     234:	mov	w26, #0x5                   	// #5
     238:	b.cs	308 <execute_cfa_program+0x130>  // b.hs, b.nlast
     23c:	nop
     240:	mov	x19, x0
     244:	ldrb	w4, [x19], #1
     248:	and	w5, w4, #0xc0
     24c:	cmp	w5, #0x40
     250:	b.eq	804 <execute_cfa_program+0x62c>  // b.none
     254:	cmp	w5, #0x80
     258:	b.eq	828 <execute_cfa_program+0x650>  // b.none
     25c:	cmp	w5, #0xc0
     260:	b.eq	818 <execute_cfa_program+0x640>  // b.none
     264:	cmp	w4, #0x2f
     268:	b.hi	980 <execute_cfa_program+0x7a8>  // b.pmore
     26c:	ldrh	w2, [x23, w4, uxtw #1]
     270:	adr	x3, 27c <execute_cfa_program+0xa4>
     274:	add	x2, x3, w2, sxth #2
     278:	br	x2
     27c:	mov	x1, #0x0                   	// #0
     280:	mov	w0, #0x0                   	// #0
     284:	ldrb	w3, [x19], #1
     288:	and	x2, x3, #0x7f
     28c:	lsl	x2, x2, x0
     290:	add	w0, w0, #0x7
     294:	orr	x1, x1, x2
     298:	tbnz	w3, #7, 284 <execute_cfa_program+0xac>
     29c:	mov	x4, #0x0                   	// #0
     2a0:	mov	w2, #0x0                   	// #0
     2a4:	nop
     2a8:	ldrb	w3, [x19], #1
     2ac:	and	x0, x3, #0x7f
     2b0:	lsl	x0, x0, x2
     2b4:	add	w2, w2, #0x7
     2b8:	orr	x4, x4, x0
     2bc:	tbnz	w3, #7, 2a8 <execute_cfa_program+0xd0>
     2c0:	ldr	x0, [x20, #1624]
     2c4:	cmp	x1, #0x61
     2c8:	mul	x4, x4, x0
     2cc:	b.hi	2e4 <execute_cfa_program+0x10c>  // b.pmore
     2d0:	lsl	x1, x1, #4
     2d4:	neg	x4, x4
     2d8:	add	x0, x20, x1
     2dc:	str	w24, [x0, #8]
     2e0:	str	x4, [x20, x1]
     2e4:	cmp	x22, x19
     2e8:	b.ls	308 <execute_cfa_program+0x130>  // b.plast
     2ec:	ldr	x2, [x21, #792]
     2f0:	mov	x0, x19
     2f4:	ldr	x5, [x21, #832]
     2f8:	ldr	x1, [x20, #1608]
     2fc:	add	x5, x2, x5, lsr #63
     300:	cmp	x1, x5
     304:	b.cc	240 <execute_cfa_program+0x68>  // b.lo, b.ul, b.last
     308:	mov	sp, x29
     30c:	ldp	x19, x20, [sp, #16]
     310:	ldp	x21, x22, [sp, #32]
     314:	ldp	x23, x24, [sp, #48]
     318:	ldp	x25, x26, [sp, #64]
     31c:	ldp	x27, x28, [sp, #80]
     320:	ldp	x29, x30, [sp], #112
     324:	ret
     328:	mov	x1, #0x0                   	// #0
     32c:	mov	w0, #0x0                   	// #0
     330:	ldrb	w3, [x19], #1
     334:	and	x2, x3, #0x7f
     338:	lsl	x2, x2, x0
     33c:	add	w0, w0, #0x7
     340:	orr	x1, x1, x2
     344:	tbnz	w3, #7, 330 <execute_cfa_program+0x158>
     348:	str	x1, [x21, #848]
     34c:	b	2e4 <execute_cfa_program+0x10c>
     350:	mov	x1, #0x0                   	// #0
     354:	mov	w0, #0x0                   	// #0
     358:	ldrb	w3, [x19], #1
     35c:	and	x2, x3, #0x7f
     360:	lsl	x2, x2, x0
     364:	add	w0, w0, #0x7
     368:	orr	x1, x1, x2
     36c:	tbnz	w3, #7, 358 <execute_cfa_program+0x180>
     370:	cmp	x1, #0x61
     374:	b.hi	388 <execute_cfa_program+0x1b0>  // b.pmore
     378:	lsl	x1, x1, #4
     37c:	add	x0, x20, x1
     380:	str	w26, [x0, #8]
     384:	str	x19, [x20, x1]
     388:	mov	x3, #0x0                   	// #0
     38c:	mov	w1, #0x0                   	// #0
     390:	ldrb	w2, [x19], #1
     394:	and	x0, x2, #0x7f
     398:	lsl	x0, x0, x1
     39c:	add	w1, w1, #0x7
     3a0:	orr	x3, x3, x0
     3a4:	tbnz	w2, #7, 390 <execute_cfa_program+0x1b8>
     3a8:	add	x19, x19, x3
     3ac:	b	2e4 <execute_cfa_program+0x10c>
     3b0:	mov	x1, #0x0                   	// #0
     3b4:	mov	w0, #0x0                   	// #0
     3b8:	ldrb	w3, [x19], #1
     3bc:	and	x2, x3, #0x7f
     3c0:	lsl	x2, x2, x0
     3c4:	add	w0, w0, #0x7
     3c8:	orr	x1, x1, x2
     3cc:	tbnz	w3, #7, 3b8 <execute_cfa_program+0x1e0>
     3d0:	mov	x4, #0x0                   	// #0
     3d4:	mov	w2, #0x0                   	// #0
     3d8:	ldrb	w3, [x19], #1
     3dc:	and	x0, x3, #0x7f
     3e0:	lsl	x0, x0, x2
     3e4:	add	w2, w2, #0x7
     3e8:	orr	x4, x4, x0
     3ec:	tbnz	w3, #7, 3d8 <execute_cfa_program+0x200>
     3f0:	cmp	w2, #0x3f
     3f4:	b.hi	40c <execute_cfa_program+0x234>  // b.pmore
     3f8:	mov	x0, #0xffffffffffffffff    	// #-1
     3fc:	tst	x3, #0x40
     400:	lsl	x0, x0, x2
     404:	orr	x0, x4, x0
     408:	csel	x4, x0, x4, ne  // ne = any
     40c:	ldr	x0, [x20, #1624]
     410:	cmp	x1, #0x61
     414:	mul	x4, x4, x0
     418:	b.hi	2e4 <execute_cfa_program+0x10c>  // b.pmore
     41c:	lsl	x1, x1, #4
     420:	mov	w2, #0x4                   	// #4
     424:	add	x0, x20, x1
     428:	str	w2, [x0, #8]
     42c:	str	x4, [x20, x1]
     430:	b	2e4 <execute_cfa_program+0x10c>
     434:	mov	x1, #0x0                   	// #0
     438:	mov	w0, #0x0                   	// #0
     43c:	ldrb	w3, [x19], #1
     440:	and	x2, x3, #0x7f
     444:	lsl	x2, x2, x0
     448:	add	w0, w0, #0x7
     44c:	orr	x1, x1, x2
     450:	tbnz	w3, #7, 43c <execute_cfa_program+0x264>
     454:	mov	x4, #0x0                   	// #0
     458:	mov	w2, #0x0                   	// #0
     45c:	nop
     460:	ldrb	w3, [x19], #1
     464:	and	x0, x3, #0x7f
     468:	lsl	x0, x0, x2
     46c:	add	w2, w2, #0x7
     470:	orr	x4, x4, x0
     474:	tbnz	w3, #7, 460 <execute_cfa_program+0x288>
     478:	b	40c <execute_cfa_program+0x234>
     47c:	mov	x1, #0x0                   	// #0
     480:	mov	w0, #0x0                   	// #0
     484:	ldrb	w3, [x19], #1
     488:	and	x2, x3, #0x7f
     48c:	lsl	x2, x2, x0
     490:	add	w0, w0, #0x7
     494:	orr	x1, x1, x2
     498:	tbnz	w3, #7, 484 <execute_cfa_program+0x2ac>
     49c:	cmp	w0, #0x3f
     4a0:	b.hi	4b8 <execute_cfa_program+0x2e0>  // b.pmore
     4a4:	mov	x2, #0xffffffffffffffff    	// #-1
     4a8:	tst	x3, #0x40
     4ac:	lsl	x0, x2, x0
     4b0:	orr	x0, x1, x0
     4b4:	csel	x1, x0, x1, ne  // ne = any
     4b8:	ldr	x0, [x20, #1624]
     4bc:	mul	x1, x0, x1
     4c0:	str	x1, [x20, #1576]
     4c4:	b	2e4 <execute_cfa_program+0x10c>
     4c8:	mov	x1, #0x0                   	// #0
     4cc:	mov	w0, #0x0                   	// #0
     4d0:	ldrb	w3, [x19], #1
     4d4:	and	x2, x3, #0x7f
     4d8:	lsl	x2, x2, x0
     4dc:	add	w0, w0, #0x7
     4e0:	orr	x1, x1, x2
     4e4:	tbnz	w3, #7, 4d0 <execute_cfa_program+0x2f8>
     4e8:	mov	x3, #0x0                   	// #0
     4ec:	mov	w2, #0x0                   	// #0
     4f0:	str	x1, [x20, #1584]
     4f4:	nop
     4f8:	ldrb	w1, [x19], #1
     4fc:	and	x0, x1, #0x7f
     500:	lsl	x0, x0, x2
     504:	add	w2, w2, #0x7
     508:	orr	x3, x3, x0
     50c:	tbnz	w1, #7, 4f8 <execute_cfa_program+0x320>
     510:	cmp	w2, #0x3f
     514:	b.hi	52c <execute_cfa_program+0x354>  // b.pmore
     518:	mov	x0, #0xffffffffffffffff    	// #-1
     51c:	tst	x1, #0x40
     520:	lsl	x0, x0, x2
     524:	orr	x0, x3, x0
     528:	csel	x3, x0, x3, ne  // ne = any
     52c:	ldr	x0, [x20, #1624]
     530:	str	w24, [x20, #1600]
     534:	mul	x3, x0, x3
     538:	str	x3, [x20, #1576]
     53c:	b	2e4 <execute_cfa_program+0x10c>
     540:	mov	x1, #0x0                   	// #0
     544:	mov	w0, #0x0                   	// #0
     548:	ldrb	w3, [x19], #1
     54c:	and	x2, x3, #0x7f
     550:	lsl	x2, x2, x0
     554:	add	w0, w0, #0x7
     558:	orr	x1, x1, x2
     55c:	tbnz	w3, #7, 548 <execute_cfa_program+0x370>
     560:	mov	x4, #0x0                   	// #0
     564:	mov	w2, #0x0                   	// #0
     568:	ldrb	w3, [x19], #1
     56c:	and	x0, x3, #0x7f
     570:	lsl	x0, x0, x2
     574:	add	w2, w2, #0x7
     578:	orr	x4, x4, x0
     57c:	tbnz	w3, #7, 568 <execute_cfa_program+0x390>
     580:	cmp	w2, #0x3f
     584:	b.hi	59c <execute_cfa_program+0x3c4>  // b.pmore
     588:	mov	x0, #0xffffffffffffffff    	// #-1
     58c:	tst	x3, #0x40
     590:	lsl	x0, x0, x2
     594:	orr	x0, x4, x0
     598:	csel	x4, x0, x4, ne  // ne = any
     59c:	ldr	x0, [x20, #1624]
     5a0:	cmp	x1, #0x61
     5a4:	mul	x4, x4, x0
     5a8:	b.hi	2e4 <execute_cfa_program+0x10c>  // b.pmore
     5ac:	lsl	x1, x1, #4
     5b0:	add	x0, x20, x1
     5b4:	str	w24, [x0, #8]
     5b8:	str	x4, [x20, x1]
     5bc:	b	2e4 <execute_cfa_program+0x10c>
     5c0:	mov	x1, #0x0                   	// #0
     5c4:	mov	w0, #0x0                   	// #0
     5c8:	ldrb	w3, [x19], #1
     5cc:	and	x2, x3, #0x7f
     5d0:	lsl	x2, x2, x0
     5d4:	add	w0, w0, #0x7
     5d8:	orr	x1, x1, x2
     5dc:	tbnz	w3, #7, 5c8 <execute_cfa_program+0x3f0>
     5e0:	cmp	x1, #0x61
     5e4:	b.hi	5fc <execute_cfa_program+0x424>  // b.pmore
     5e8:	lsl	x1, x1, #4
     5ec:	mov	w2, #0x3                   	// #3
     5f0:	add	x0, x20, x1
     5f4:	str	w2, [x0, #8]
     5f8:	str	x19, [x20, x1]
     5fc:	mov	x3, #0x0                   	// #0
     600:	mov	w1, #0x0                   	// #0
     604:	nop
     608:	ldrb	w2, [x19], #1
     60c:	and	x0, x2, #0x7f
     610:	lsl	x0, x0, x1
     614:	add	w1, w1, #0x7
     618:	orr	x3, x3, x0
     61c:	tbnz	w2, #7, 608 <execute_cfa_program+0x430>
     620:	add	x19, x19, x3
     624:	b	2e4 <execute_cfa_program+0x10c>
     628:	mov	x1, #0x0                   	// #0
     62c:	mov	w0, #0x0                   	// #0
     630:	ldrb	w3, [x19], #1
     634:	and	x2, x3, #0x7f
     638:	lsl	x2, x2, x0
     63c:	add	w0, w0, #0x7
     640:	orr	x1, x1, x2
     644:	tbnz	w3, #7, 630 <execute_cfa_program+0x458>
     648:	str	x1, [x20, #1576]
     64c:	b	2e4 <execute_cfa_program+0x10c>
     650:	mov	x1, #0x0                   	// #0
     654:	mov	w0, #0x0                   	// #0
     658:	ldrb	w3, [x19], #1
     65c:	and	x2, x3, #0x7f
     660:	lsl	x2, x2, x0
     664:	add	w0, w0, #0x7
     668:	orr	x1, x1, x2
     66c:	tbnz	w3, #7, 658 <execute_cfa_program+0x480>
     670:	str	x1, [x20, #1584]
     674:	str	w24, [x20, #1600]
     678:	b	2e4 <execute_cfa_program+0x10c>
     67c:	mov	x1, #0x0                   	// #0
     680:	mov	w0, #0x0                   	// #0
     684:	ldrb	w3, [x19], #1
     688:	and	x2, x3, #0x7f
     68c:	lsl	x2, x2, x0
     690:	add	w0, w0, #0x7
     694:	orr	x1, x1, x2
     698:	tbnz	w3, #7, 684 <execute_cfa_program+0x4ac>
     69c:	mov	x3, #0x0                   	// #0
     6a0:	mov	w2, #0x0                   	// #0
     6a4:	str	x1, [x20, #1584]
     6a8:	ldrb	w1, [x19], #1
     6ac:	and	x0, x1, #0x7f
     6b0:	lsl	x0, x0, x2
     6b4:	add	w2, w2, #0x7
     6b8:	orr	x3, x3, x0
     6bc:	tbnz	w1, #7, 6a8 <execute_cfa_program+0x4d0>
     6c0:	str	x3, [x20, #1576]
     6c4:	str	w24, [x20, #1600]
     6c8:	b	2e4 <execute_cfa_program+0x10c>
     6cc:	mov	x1, #0x0                   	// #0
     6d0:	mov	w0, #0x0                   	// #0
     6d4:	ldrb	w3, [x19], #1
     6d8:	and	x2, x3, #0x7f
     6dc:	lsl	x2, x2, x0
     6e0:	add	w0, w0, #0x7
     6e4:	orr	x1, x1, x2
     6e8:	tbnz	w3, #7, 6d4 <execute_cfa_program+0x4fc>
     6ec:	mov	x4, #0x0                   	// #0
     6f0:	mov	w2, #0x0                   	// #0
     6f4:	nop
     6f8:	ldrb	w3, [x19], #1
     6fc:	and	x0, x3, #0x7f
     700:	lsl	x0, x0, x2
     704:	add	w2, w2, #0x7
     708:	orr	x4, x4, x0
     70c:	tbnz	w3, #7, 6f8 <execute_cfa_program+0x520>
     710:	cmp	x1, #0x61
     714:	b.hi	2e4 <execute_cfa_program+0x10c>  // b.pmore
     718:	lsl	x1, x1, #4
     71c:	mov	w2, #0x2                   	// #2
     720:	add	x0, x20, x1
     724:	str	w2, [x0, #8]
     728:	str	x4, [x20, x1]
     72c:	b	2e4 <execute_cfa_program+0x10c>
     730:	mov	x1, #0x0                   	// #0
     734:	mov	w0, #0x0                   	// #0
     738:	ldrb	w3, [x19], #1
     73c:	and	x2, x3, #0x7f
     740:	lsl	x2, x2, x0
     744:	add	w0, w0, #0x7
     748:	orr	x1, x1, x2
     74c:	tbnz	w3, #7, 738 <execute_cfa_program+0x560>
     750:	cmp	x1, #0x61
     754:	b.hi	2e4 <execute_cfa_program+0x10c>  // b.pmore
     758:	add	x1, x20, x1, lsl #4
     75c:	str	wzr, [x1, #8]
     760:	b	2e4 <execute_cfa_program+0x10c>
     764:	mov	x1, #0x0                   	// #0
     768:	mov	w0, #0x0                   	// #0
     76c:	ldrb	w3, [x19], #1
     770:	and	x2, x3, #0x7f
     774:	lsl	x2, x2, x0
     778:	add	w0, w0, #0x7
     77c:	orr	x1, x1, x2
     780:	tbnz	w3, #7, 76c <execute_cfa_program+0x594>
     784:	cmp	x1, #0x61
     788:	b.hi	2e4 <execute_cfa_program+0x10c>  // b.pmore
     78c:	add	x1, x20, x1, lsl #4
     790:	mov	w0, #0x6                   	// #6
     794:	str	w0, [x1, #8]
     798:	b	2e4 <execute_cfa_program+0x10c>
     79c:	mov	x1, #0x0                   	// #0
     7a0:	mov	w0, #0x0                   	// #0
     7a4:	ldrb	w3, [x19], #1
     7a8:	and	x2, x3, #0x7f
     7ac:	lsl	x2, x2, x0
     7b0:	add	w0, w0, #0x7
     7b4:	orr	x1, x1, x2
     7b8:	tbnz	w3, #7, 7a4 <execute_cfa_program+0x5cc>
     7bc:	b	750 <execute_cfa_program+0x578>
     7c0:	mov	x1, #0x0                   	// #0
     7c4:	mov	w0, #0x0                   	// #0
     7c8:	ldrb	w3, [x19], #1
     7cc:	and	x2, x3, #0x7f
     7d0:	lsl	x2, x2, x0
     7d4:	add	w0, w0, #0x7
     7d8:	orr	x1, x1, x2
     7dc:	tbnz	w3, #7, 7c8 <execute_cfa_program+0x5f0>
     7e0:	mov	x4, #0x0                   	// #0
     7e4:	mov	w2, #0x0                   	// #0
     7e8:	ldrb	w3, [x19], #1
     7ec:	and	x0, x3, #0x7f
     7f0:	lsl	x0, x0, x2
     7f4:	add	w2, w2, #0x7
     7f8:	orr	x4, x4, x0
     7fc:	tbnz	w3, #7, 7e8 <execute_cfa_program+0x610>
     800:	b	59c <execute_cfa_program+0x3c4>
     804:	ldr	x0, [x20, #1632]
     808:	and	x4, x4, #0x3f
     80c:	madd	x4, x4, x0, x1
     810:	str	x4, [x20, #1608]
     814:	b	2e4 <execute_cfa_program+0x10c>
     818:	ubfiz	x4, x4, #4, #6
     81c:	add	x4, x20, x4
     820:	str	wzr, [x4, #8]
     824:	b	2e4 <execute_cfa_program+0x10c>
     828:	and	w4, w4, #0x3f
     82c:	mov	x1, #0x0                   	// #0
     830:	mov	w5, #0x0                   	// #0
     834:	nop
     838:	ldrb	w6, [x19], #1
     83c:	and	x0, x6, #0x7f
     840:	lsl	x0, x0, x5
     844:	add	w5, w5, #0x7
     848:	orr	x1, x1, x0
     84c:	tbnz	w6, #7, 838 <execute_cfa_program+0x660>
     850:	ubfiz	x4, x4, #4, #6
     854:	ldr	x2, [x20, #1624]
     858:	add	x0, x20, x4
     85c:	mul	x1, x1, x2
     860:	str	w24, [x0, #8]
     864:	str	x1, [x20, x4]
     868:	b	2e4 <execute_cfa_program+0x10c>
     86c:	ldr	x0, [x20, #544]
     870:	eor	x0, x0, #0x1
     874:	str	x0, [x20, #544]
     878:	b	2e4 <execute_cfa_program+0x10c>
     87c:	ldrb	w28, [x20, #1648]
     880:	mov	x1, x21
     884:	mov	w0, w28
     888:	bl	160 <base_of_encoded_value>
     88c:	mov	x2, x19
     890:	mov	x1, x0
     894:	mov	x3, x27
     898:	mov	w0, w28
     89c:	bl	0 <read_encoded_value_with_base>
     8a0:	mov	x19, x0
     8a4:	ldr	x1, [x29, #104]
     8a8:	str	x1, [x20, #1608]
     8ac:	b	2e4 <execute_cfa_program+0x10c>
     8b0:	ldrb	w2, [x0, #1]
     8b4:	add	x19, x0, #0x2
     8b8:	ldr	x0, [x20, #1632]
     8bc:	madd	x1, x2, x0, x1
     8c0:	str	x1, [x20, #1608]
     8c4:	b	2e4 <execute_cfa_program+0x10c>
     8c8:	ldurh	w2, [x0, #1]
     8cc:	add	x19, x0, #0x3
     8d0:	ldr	x0, [x20, #1632]
     8d4:	madd	x1, x2, x0, x1
     8d8:	str	x1, [x20, #1608]
     8dc:	b	2e4 <execute_cfa_program+0x10c>
     8e0:	ldur	w2, [x0, #1]
     8e4:	add	x19, x0, #0x5
     8e8:	ldr	x0, [x20, #1632]
     8ec:	madd	x1, x2, x0, x1
     8f0:	str	x1, [x20, #1608]
     8f4:	b	2e4 <execute_cfa_program+0x10c>
     8f8:	cbz	x25, 974 <execute_cfa_program+0x79c>
     8fc:	mov	x3, x25
     900:	ldr	x25, [x25, #1568]
     904:	mov	x1, x20
     908:	mov	x0, x3
     90c:	mov	x2, #0x648                 	// #1608
     910:	bl	0 <memcpy>
     914:	str	x0, [x20, #1568]
     918:	b	2e4 <execute_cfa_program+0x10c>
     91c:	ldr	x28, [x20, #1568]
     920:	mov	x0, x20
     924:	mov	x2, #0x648                 	// #1608
     928:	mov	x1, x28
     92c:	bl	0 <memcpy>
     930:	str	x25, [x28, #1568]
     934:	mov	x25, x28
     938:	b	2e4 <execute_cfa_program+0x10c>
     93c:	mov	w0, #0x2                   	// #2
     940:	mov	x3, #0x0                   	// #0
     944:	mov	w1, #0x0                   	// #0
     948:	str	x19, [x20, #1592]
     94c:	str	w0, [x20, #1600]
     950:	ldrb	w2, [x19], #1
     954:	and	x0, x2, #0x7f
     958:	lsl	x0, x0, x1
     95c:	add	w1, w1, #0x7
     960:	orr	x3, x3, x0
     964:	tbnz	w2, #7, 950 <execute_cfa_program+0x778>
     968:	add	x19, x19, x3
     96c:	b	2e4 <execute_cfa_program+0x10c>
     970:	ret
     974:	sub	sp, sp, #0x650
     978:	mov	x3, sp
     97c:	b	904 <execute_cfa_program+0x72c>
     980:	bl	0 <abort>
     984:	nop

0000000000000988 <init_dwarf_reg_size_table>:
     988:	adrp	x2, 0 <read_encoded_value_with_base>
     98c:	add	x1, x2, #0x0
     990:	mov	w0, #0x8                   	// #8
     994:	strb	w0, [x2]
     998:	strb	w0, [x1, #1]
     99c:	strb	w0, [x1, #2]
     9a0:	strb	w0, [x1, #3]
     9a4:	strb	w0, [x1, #4]
     9a8:	strb	w0, [x1, #5]
     9ac:	strb	w0, [x1, #6]
     9b0:	strb	w0, [x1, #7]
     9b4:	strb	w0, [x1, #8]
     9b8:	strb	w0, [x1, #9]
     9bc:	strb	w0, [x1, #10]
     9c0:	strb	w0, [x1, #11]
     9c4:	strb	w0, [x1, #12]
     9c8:	strb	w0, [x1, #13]
     9cc:	strb	w0, [x1, #14]
     9d0:	strb	w0, [x1, #15]
     9d4:	strb	w0, [x1, #16]
     9d8:	strb	w0, [x1, #17]
     9dc:	strb	w0, [x1, #18]
     9e0:	strb	w0, [x1, #19]
     9e4:	strb	w0, [x1, #20]
     9e8:	strb	w0, [x1, #21]
     9ec:	strb	w0, [x1, #22]
     9f0:	strb	w0, [x1, #23]
     9f4:	strb	w0, [x1, #24]
     9f8:	strb	w0, [x1, #25]
     9fc:	strb	w0, [x1, #26]
     a00:	strb	w0, [x1, #27]
     a04:	strb	w0, [x1, #28]
     a08:	strb	w0, [x1, #29]
     a0c:	strb	w0, [x1, #30]
     a10:	strb	w0, [x1, #31]
     a14:	strb	w0, [x1, #64]
     a18:	strb	w0, [x1, #46]
     a1c:	strb	w0, [x1, #65]
     a20:	strb	w0, [x1, #66]
     a24:	strb	w0, [x1, #67]
     a28:	strb	w0, [x1, #68]
     a2c:	strb	w0, [x1, #69]
     a30:	strb	w0, [x1, #70]
     a34:	strb	w0, [x1, #71]
     a38:	strb	w0, [x1, #72]
     a3c:	strb	w0, [x1, #73]
     a40:	strb	w0, [x1, #74]
     a44:	strb	w0, [x1, #75]
     a48:	strb	w0, [x1, #76]
     a4c:	strb	w0, [x1, #77]
     a50:	strb	w0, [x1, #78]
     a54:	strb	w0, [x1, #79]
     a58:	strb	w0, [x1, #80]
     a5c:	strb	w0, [x1, #81]
     a60:	strb	w0, [x1, #82]
     a64:	strb	w0, [x1, #83]
     a68:	strb	w0, [x1, #84]
     a6c:	strb	w0, [x1, #85]
     a70:	strb	w0, [x1, #86]
     a74:	strb	w0, [x1, #87]
     a78:	strb	w0, [x1, #88]
     a7c:	strb	w0, [x1, #89]
     a80:	strb	w0, [x1, #90]
     a84:	strb	w0, [x1, #91]
     a88:	strb	w0, [x1, #92]
     a8c:	strb	w0, [x1, #93]
     a90:	strb	w0, [x1, #94]
     a94:	strb	w0, [x1, #95]
     a98:	strb	w0, [x1, #48]
     a9c:	strb	w0, [x1, #49]
     aa0:	strb	w0, [x1, #50]
     aa4:	strb	w0, [x1, #51]
     aa8:	strb	w0, [x1, #52]
     aac:	strb	w0, [x1, #53]
     ab0:	strb	w0, [x1, #54]
     ab4:	strb	w0, [x1, #55]
     ab8:	strb	w0, [x1, #56]
     abc:	strb	w0, [x1, #57]
     ac0:	strb	w0, [x1, #58]
     ac4:	strb	w0, [x1, #59]
     ac8:	strb	w0, [x1, #60]
     acc:	strb	w0, [x1, #61]
     ad0:	strb	w0, [x1, #62]
     ad4:	strb	w0, [x1, #63]
     ad8:	strb	w0, [x1, #96]
     adc:	ret

0000000000000ae0 <uw_frame_state_for>:
     ae0:	stp	x29, x30, [sp, #-112]!
     ae4:	mov	x2, #0x680                 	// #1664
     ae8:	mov	x29, sp
     aec:	stp	x19, x20, [sp, #16]
     af0:	mov	x20, x0
     af4:	mov	x19, x1
     af8:	mov	x0, x1
     afc:	mov	w1, #0x0                   	// #0
     b00:	bl	0 <memset>
     b04:	str	xzr, [x20, #800]
     b08:	ldr	x2, [x20, #792]
     b0c:	str	xzr, [x20, #848]
     b10:	cbz	x2, e84 <uw_frame_state_for+0x3a4>
     b14:	ldr	d0, [x20, #832]
     b18:	add	x1, x20, #0x328
     b1c:	stp	x21, x22, [sp, #32]
     b20:	cmge	d0, d0, #0
     b24:	fmov	x0, d0
     b28:	add	x0, x2, x0
     b2c:	bl	0 <_Unwind_Find_FDE>
     b30:	mov	x22, x0
     b34:	cbz	x0, ee8 <uw_frame_state_for+0x408>
     b38:	ldrsw	x1, [x0, #4]
     b3c:	stp	x23, x24, [sp, #48]
     b40:	add	x23, x0, #0x4
     b44:	sub	x23, x23, x1
     b48:	ldr	x0, [x20, #824]
     b4c:	str	x0, [x19, #1608]
     b50:	add	x21, x23, #0x9
     b54:	mov	x0, x21
     b58:	bl	0 <strlen>
     b5c:	ldrb	w1, [x23, #9]
     b60:	add	x2, x0, #0x1
     b64:	add	x2, x21, x2
     b68:	cmp	w1, #0x65
     b6c:	b.eq	d58 <uw_frame_state_for+0x278>  // b.none
     b70:	ldrb	w6, [x23, #8]
     b74:	ldrb	w3, [x2]
     b78:	cmp	w6, #0x3
     b7c:	b.hi	fc8 <uw_frame_state_for+0x4e8>  // b.pmore
     b80:	stp	x25, x26, [sp, #64]
     b84:	stp	x27, x28, [sp, #80]
     b88:	mov	x5, #0x0                   	// #0
     b8c:	mov	w4, #0x0                   	// #0
     b90:	b	b98 <uw_frame_state_for+0xb8>
     b94:	ldrb	w3, [x2]
     b98:	and	x1, x3, #0x7f
     b9c:	add	x2, x2, #0x1
     ba0:	lsl	x1, x1, x4
     ba4:	add	w4, w4, #0x7
     ba8:	orr	x5, x5, x1
     bac:	tbnz	w3, #7, b94 <uw_frame_state_for+0xb4>
     bb0:	mov	x0, #0x0                   	// #0
     bb4:	mov	w3, #0x0                   	// #0
     bb8:	str	x5, [x19, #1632]
     bbc:	nop
     bc0:	mov	x5, x2
     bc4:	ldrb	w4, [x2], #1
     bc8:	and	x1, x4, #0x7f
     bcc:	lsl	x1, x1, x3
     bd0:	add	w3, w3, #0x7
     bd4:	orr	x0, x0, x1
     bd8:	tbnz	w4, #7, bc0 <uw_frame_state_for+0xe0>
     bdc:	cmp	w3, #0x3f
     be0:	b.hi	bf8 <uw_frame_state_for+0x118>  // b.pmore
     be4:	mov	x1, #0xffffffffffffffff    	// #-1
     be8:	tst	x4, #0x40
     bec:	lsl	x3, x1, x3
     bf0:	orr	x3, x0, x3
     bf4:	csel	x0, x3, x0, ne  // ne = any
     bf8:	str	x0, [x19, #1624]
     bfc:	cmp	w6, #0x1
     c00:	mov	x4, #0x0                   	// #0
     c04:	mov	w3, #0x0                   	// #0
     c08:	b.eq	d74 <uw_frame_state_for+0x294>  // b.none
     c0c:	nop
     c10:	ldrb	w0, [x2], #1
     c14:	and	x1, x0, #0x7f
     c18:	lsl	x1, x1, x3
     c1c:	add	w3, w3, #0x7
     c20:	orr	x4, x4, x1
     c24:	tbnz	w0, #7, c10 <uw_frame_state_for+0x130>
     c28:	mov	w0, #0xffffffff            	// #-1
     c2c:	str	x4, [x19, #1640]
     c30:	strb	w0, [x19, #1649]
     c34:	ldrb	w3, [x21]
     c38:	cmp	w3, #0x7a
     c3c:	b.eq	d94 <uw_frame_state_for+0x2b4>  // b.none
     c40:	mov	x24, #0x0                   	// #0
     c44:	cbz	w3, 102c <uw_frame_state_for+0x54c>
     c48:	add	x21, x21, #0x1
     c4c:	add	x25, sp, #0x68
     c50:	mov	w26, #0x1                   	// #1
     c54:	b	c7c <uw_frame_state_for+0x19c>
     c58:	cmp	w3, #0x52
     c5c:	b.eq	dd8 <uw_frame_state_for+0x2f8>  // b.none
     c60:	cmp	w3, #0x50
     c64:	b.eq	de4 <uw_frame_state_for+0x304>  // b.none
     c68:	cmp	w3, #0x53
     c6c:	b.ne	e98 <uw_frame_state_for+0x3b8>  // b.any
     c70:	strb	w26, [x19, #1651]
     c74:	ldrb	w3, [x21], #1
     c78:	cbz	w3, c94 <uw_frame_state_for+0x1b4>
     c7c:	cmp	w3, #0x4c
     c80:	b.ne	c58 <uw_frame_state_for+0x178>  // b.any
     c84:	ldrb	w0, [x2], #1
     c88:	strb	w0, [x19, #1649]
     c8c:	ldrb	w3, [x21], #1
     c90:	cbnz	w3, c7c <uw_frame_state_for+0x19c>
     c94:	cbz	x24, e94 <uw_frame_state_for+0x3b4>
     c98:	ldr	w1, [x23]
     c9c:	mov	x0, x24
     ca0:	mov	x3, x19
     ca4:	mov	x2, x20
     ca8:	add	x1, x1, #0x4
     cac:	add	x1, x23, x1
     cb0:	bl	1d8 <execute_cfa_program>
     cb4:	ldrb	w0, [x19, #1648]
     cb8:	cmp	w0, #0xff
     cbc:	b.eq	fc0 <uw_frame_state_for+0x4e0>  // b.none
     cc0:	and	w0, w0, #0x7
     cc4:	cmp	w0, #0x2
     cc8:	b.eq	fb8 <uw_frame_state_for+0x4d8>  // b.none
     ccc:	b.ls	e2c <uw_frame_state_for+0x34c>  // b.plast
     cd0:	cmp	w0, #0x3
     cd4:	mov	x21, #0x10                  	// #16
     cd8:	b.ne	e1c <uw_frame_state_for+0x33c>  // b.any
     cdc:	ldrb	w0, [x19, #1650]
     ce0:	add	x21, x22, x21
     ce4:	ldrb	w24, [x19, #1649]
     ce8:	cbz	w0, e44 <uw_frame_state_for+0x364>
     cec:	mov	x0, #0x0                   	// #0
     cf0:	mov	w2, #0x0                   	// #0
     cf4:	nop
     cf8:	ldrb	w3, [x21], #1
     cfc:	and	x1, x3, #0x7f
     d00:	lsl	x1, x1, x2
     d04:	add	w2, w2, #0x7
     d08:	orr	x0, x0, x1
     d0c:	tbnz	w3, #7, cf8 <uw_frame_state_for+0x218>
     d10:	add	x23, x21, x0
     d14:	cmp	w24, #0xff
     d18:	b.ne	ebc <uw_frame_state_for+0x3dc>  // b.any
     d1c:	ldr	w1, [x22]
     d20:	mov	x0, x23
     d24:	mov	x3, x19
     d28:	mov	x2, x20
     d2c:	add	x1, x1, #0x4
     d30:	add	x1, x22, x1
     d34:	bl	1d8 <execute_cfa_program>
     d38:	ldp	x21, x22, [sp, #32]
     d3c:	mov	w0, #0x0                   	// #0
     d40:	ldp	x23, x24, [sp, #48]
     d44:	ldp	x25, x26, [sp, #64]
     d48:	ldp	x27, x28, [sp, #80]
     d4c:	ldp	x19, x20, [sp, #16]
     d50:	ldp	x29, x30, [sp], #112
     d54:	ret
     d58:	ldrb	w0, [x23, #10]
     d5c:	cmp	w0, #0x68
     d60:	b.ne	b70 <uw_frame_state_for+0x90>  // b.any
     d64:	ldr	x0, [x2], #8
     d68:	add	x21, x23, #0xb
     d6c:	str	x0, [x19, #1656]
     d70:	b	b70 <uw_frame_state_for+0x90>
     d74:	ldrb	w0, [x2]
     d78:	add	x2, x5, #0x2
     d7c:	str	x0, [x19, #1640]
     d80:	mov	w0, #0xffffffff            	// #-1
     d84:	strb	w0, [x19, #1649]
     d88:	ldrb	w3, [x21]
     d8c:	cmp	w3, #0x7a
     d90:	b.ne	c40 <uw_frame_state_for+0x160>  // b.any
     d94:	mov	x0, #0x0                   	// #0
     d98:	mov	w3, #0x0                   	// #0
     d9c:	nop
     da0:	ldrb	w4, [x2], #1
     da4:	and	x1, x4, #0x7f
     da8:	lsl	x1, x1, x3
     dac:	add	w3, w3, #0x7
     db0:	orr	x0, x0, x1
     db4:	tbnz	w4, #7, da0 <uw_frame_state_for+0x2c0>
     db8:	mov	w1, #0x1                   	// #1
     dbc:	strb	w1, [x19, #1650]
     dc0:	add	x24, x2, x0
     dc4:	add	x0, x21, #0x1
     dc8:	ldrb	w3, [x21, #1]
     dcc:	cbz	w3, c98 <uw_frame_state_for+0x1b8>
     dd0:	mov	x21, x0
     dd4:	b	c48 <uw_frame_state_for+0x168>
     dd8:	ldrb	w0, [x2], #1
     ddc:	strb	w0, [x19, #1648]
     de0:	b	c74 <uw_frame_state_for+0x194>
     de4:	mov	x27, x2
     de8:	mov	x1, x20
     dec:	ldrb	w28, [x27], #1
     df0:	mov	w0, w28
     df4:	bl	160 <base_of_encoded_value>
     df8:	mov	x2, x27
     dfc:	mov	x1, x0
     e00:	mov	x3, x25
     e04:	mov	w0, w28
     e08:	bl	0 <read_encoded_value_with_base>
     e0c:	mov	x2, x0
     e10:	ldr	x1, [sp, #104]
     e14:	str	x1, [x19, #1616]
     e18:	b	c74 <uw_frame_state_for+0x194>
     e1c:	cmp	w0, #0x4
     e20:	mov	x21, #0x18                  	// #24
     e24:	b.eq	cdc <uw_frame_state_for+0x1fc>  // b.none
     e28:	bl	0 <abort>
     e2c:	mov	x21, #0x18                  	// #24
     e30:	cbnz	w0, e28 <uw_frame_state_for+0x348>
     e34:	ldrb	w0, [x19, #1650]
     e38:	add	x21, x22, x21
     e3c:	ldrb	w24, [x19, #1649]
     e40:	cbnz	w0, cec <uw_frame_state_for+0x20c>
     e44:	mov	x23, x21
     e48:	cmp	w24, #0xff
     e4c:	b.eq	d1c <uw_frame_state_for+0x23c>  // b.none
     e50:	mov	x1, x20
     e54:	mov	w0, w24
     e58:	bl	160 <base_of_encoded_value>
     e5c:	mov	x1, x0
     e60:	mov	x2, x21
     e64:	mov	w0, w24
     e68:	add	x3, sp, #0x68
     e6c:	bl	0 <read_encoded_value_with_base>
     e70:	ldr	x1, [sp, #104]
     e74:	mov	x23, x0
     e78:	str	x1, [x20, #800]
     e7c:	b	d1c <uw_frame_state_for+0x23c>
     e80:	ldp	x21, x22, [sp, #32]
     e84:	mov	w0, #0x5                   	// #5
     e88:	ldp	x19, x20, [sp, #16]
     e8c:	ldp	x29, x30, [sp], #112
     e90:	ret
     e94:	mov	x24, x2
     e98:	cbnz	x24, c98 <uw_frame_state_for+0x1b8>
     e9c:	ldp	x25, x26, [sp, #64]
     ea0:	ldp	x27, x28, [sp, #80]
     ea4:	mov	w0, #0x3                   	// #3
     ea8:	ldp	x19, x20, [sp, #16]
     eac:	ldp	x21, x22, [sp, #32]
     eb0:	ldp	x23, x24, [sp, #48]
     eb4:	ldp	x29, x30, [sp], #112
     eb8:	ret
     ebc:	mov	x1, x20
     ec0:	mov	w0, w24
     ec4:	bl	160 <base_of_encoded_value>
     ec8:	mov	x1, x0
     ecc:	mov	x2, x21
     ed0:	mov	w0, w24
     ed4:	add	x3, sp, #0x68
     ed8:	bl	0 <read_encoded_value_with_base>
     edc:	ldr	x0, [sp, #104]
     ee0:	str	x0, [x20, #800]
     ee4:	b	d1c <uw_frame_state_for+0x23c>
     ee8:	ldr	x0, [x20, #792]
     eec:	mov	w1, #0x1168                	// #4456
     ef0:	movk	w1, #0xd280, lsl #16
     ef4:	ldr	w2, [x0]
     ef8:	cmp	w2, w1
     efc:	b.ne	e80 <uw_frame_state_for+0x3a0>  // b.any
     f00:	ldr	w1, [x0, #4]
     f04:	mov	w0, #0x1                   	// #1
     f08:	movk	w0, #0xd400, lsl #16
     f0c:	cmp	w1, w0
     f10:	b.ne	e80 <uw_frame_state_for+0x3a0>  // b.any
     f14:	ldr	x6, [x20, #784]
     f18:	mov	w3, #0x1                   	// #1
     f1c:	mov	x1, x19
     f20:	mov	w2, w3
     f24:	add	x8, x6, #0x130
     f28:	mov	x4, #0x1f                  	// #31
     f2c:	mov	x5, #0x130                 	// #304
     f30:	mov	x0, #0x8                   	// #8
     f34:	str	x5, [x19, #1576]
     f38:	str	x4, [x19, #1584]
     f3c:	str	w3, [x19, #1600]
     f40:	str	w2, [x1, #8]
     f44:	str	x0, [x1], #16
     f48:	add	x0, x0, #0x8
     f4c:	cmp	x0, #0x100
     f50:	b.ne	f40 <uw_frame_state_for+0x460>  // b.any
     f54:	ldr	w0, [x6, #592]
     f58:	add	x5, x6, #0x250
     f5c:	cbz	w0, fec <uw_frame_state_for+0x50c>
     f60:	mov	w7, #0x8001                	// #32769
     f64:	add	x4, x19, #0x600
     f68:	add	x9, x6, x19
     f6c:	movk	w7, #0x4650, lsl #16
     f70:	mov	w3, #0x1                   	// #1
     f74:	b	f88 <uw_frame_state_for+0x4a8>
     f78:	ldr	w0, [x5, #4]
     f7c:	add	x5, x5, x0
     f80:	ldr	w0, [x5]
     f84:	cbz	w0, fec <uw_frame_state_for+0x50c>
     f88:	cmp	w0, w7
     f8c:	b.ne	f78 <uw_frame_state_for+0x498>  // b.any
     f90:	sub	x2, x5, #0x520
     f94:	add	x0, x19, #0x400
     f98:	sub	x2, x2, x9
     f9c:	nop
     fa0:	str	w3, [x0, #8]
     fa4:	add	x1, x2, x0
     fa8:	str	x1, [x0], #16
     fac:	cmp	x4, x0
     fb0:	b.ne	fa0 <uw_frame_state_for+0x4c0>  // b.any
     fb4:	b	f78 <uw_frame_state_for+0x498>
     fb8:	mov	x21, #0xc                   	// #12
     fbc:	b	cdc <uw_frame_state_for+0x1fc>
     fc0:	mov	x21, #0x8                   	// #8
     fc4:	b	cdc <uw_frame_state_for+0x1fc>
     fc8:	cmp	w3, #0x8
     fcc:	b.ne	ea4 <uw_frame_state_for+0x3c4>  // b.any
     fd0:	ldrb	w0, [x2, #1]
     fd4:	cbnz	w0, ea4 <uw_frame_state_for+0x3c4>
     fd8:	stp	x25, x26, [sp, #64]
     fdc:	add	x2, x2, #0x2
     fe0:	stp	x27, x28, [sp, #80]
     fe4:	ldrb	w3, [x2]
     fe8:	b	b88 <uw_frame_state_for+0xa8>
     fec:	mov	w3, #0x1                   	// #1
     ff0:	strb	w3, [x19, #1651]
     ff4:	add	x1, x6, #0x230
     ff8:	mov	w5, #0x4                   	// #4
     ffc:	ldr	x2, [x8, #264]
    1000:	sub	x1, x1, x8
    1004:	mov	x4, #0x60                  	// #96
    1008:	mov	w0, #0x0                   	// #0
    100c:	sub	x8, x2, x8
    1010:	ldp	x21, x22, [sp, #32]
    1014:	str	x1, [x19, #496]
    1018:	str	w3, [x19, #504]
    101c:	str	x8, [x19, #1536]
    1020:	str	w5, [x19, #1544]
    1024:	str	x4, [x19, #1640]
    1028:	b	d4c <uw_frame_state_for+0x26c>
    102c:	mov	x24, x2
    1030:	b	c98 <uw_frame_state_for+0x1b8>
    1034:	nop

0000000000001038 <uw_install_context_1>:
    1038:	stp	x29, x30, [sp, #-80]!
    103c:	mov	x29, sp
    1040:	stp	x21, x22, [sp, #32]
    1044:	mov	x21, x0
    1048:	ldr	x0, [x1, #832]
    104c:	stp	x19, x20, [sp, #16]
    1050:	mov	x20, x1
    1054:	stp	x23, x24, [sp, #48]
    1058:	tbz	x0, #62, 1064 <uw_install_context_1+0x2c>
    105c:	ldrb	w1, [x1, #887]
    1060:	cbnz	w1, 106c <uw_install_context_1+0x34>
    1064:	ldr	x1, [x20, #248]
    1068:	cbz	x1, 1128 <uw_install_context_1+0xf0>
    106c:	adrp	x24, 0 <read_encoded_value_with_base>
    1070:	add	x23, x21, #0x358
    1074:	add	x24, x24, #0x0
    1078:	add	x22, x20, #0x358
    107c:	mov	x19, #0x0                   	// #0
    1080:	b	10a4 <uw_install_context_1+0x6c>
    1084:	cbz	x0, 1098 <uw_install_context_1+0x60>
    1088:	ldrb	w2, [x19, x24]
    108c:	cmp	w2, #0x8
    1090:	b.ne	1194 <uw_install_context_1+0x15c>  // b.any
    1094:	str	x1, [x0]
    1098:	add	x19, x19, #0x1
    109c:	cmp	x19, #0x61
    10a0:	b.eq	10e0 <uw_install_context_1+0xa8>  // b.none
    10a4:	ldrb	w2, [x23, x19]
    10a8:	ldr	x0, [x21, x19, lsl #3]
    10ac:	ldr	x1, [x20, x19, lsl #3]
    10b0:	cbnz	w2, 1194 <uw_install_context_1+0x15c>
    10b4:	ldrb	w2, [x22, x19]
    10b8:	cbnz	w2, 1084 <uw_install_context_1+0x4c>
    10bc:	cmp	x1, #0x0
    10c0:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    10c4:	ccmp	x0, x1, #0x4, ne  // ne = any
    10c8:	b.eq	1098 <uw_install_context_1+0x60>  // b.none
    10cc:	ldrb	w2, [x24, x19]
    10d0:	add	x19, x19, #0x1
    10d4:	bl	0 <memcpy>
    10d8:	cmp	x19, #0x61
    10dc:	b.ne	10a4 <uw_install_context_1+0x6c>  // b.any
    10e0:	ldr	x0, [x21, #832]
    10e4:	tbz	x0, #62, 10f0 <uw_install_context_1+0xb8>
    10e8:	ldrb	w0, [x21, #887]
    10ec:	cbnz	w0, 1110 <uw_install_context_1+0xd8>
    10f0:	ldr	x1, [x21, #248]
    10f4:	mov	x0, #0x0                   	// #0
    10f8:	cbz	x1, 1154 <uw_install_context_1+0x11c>
    10fc:	ldp	x19, x20, [sp, #16]
    1100:	ldp	x21, x22, [sp, #32]
    1104:	ldp	x23, x24, [sp, #48]
    1108:	ldp	x29, x30, [sp], #80
    110c:	ret
    1110:	mov	x0, #0x0                   	// #0
    1114:	ldp	x19, x20, [sp, #16]
    1118:	ldp	x21, x22, [sp, #32]
    111c:	ldp	x23, x24, [sp, #48]
    1120:	ldp	x29, x30, [sp], #80
    1124:	ret
    1128:	adrp	x1, 0 <read_encoded_value_with_base>
    112c:	ldr	x2, [x20, #784]
    1130:	ldrb	w1, [x1]
    1134:	cmp	w1, #0x8
    1138:	b.ne	1194 <uw_install_context_1+0x15c>  // b.any
    113c:	str	x2, [sp, #72]
    1140:	tbz	x0, #62, 1148 <uw_install_context_1+0x110>
    1144:	strb	wzr, [x20, #887]
    1148:	add	x0, sp, #0x48
    114c:	str	x0, [x20, #248]
    1150:	b	106c <uw_install_context_1+0x34>
    1154:	ldr	x1, [x20, #832]
    1158:	ldr	x0, [x20, #248]
    115c:	tbnz	x1, #62, 1188 <uw_install_context_1+0x150>
    1160:	adrp	x1, 0 <read_encoded_value_with_base>
    1164:	ldrb	w1, [x1]
    1168:	cmp	w1, #0x8
    116c:	b.ne	1194 <uw_install_context_1+0x15c>  // b.any
    1170:	ldr	x0, [x0]
    1174:	ldr	x2, [x21, #784]
    1178:	ldr	x1, [x20, #848]
    117c:	sub	x0, x0, x2
    1180:	add	x0, x0, x1
    1184:	b	10fc <uw_install_context_1+0xc4>
    1188:	ldrb	w1, [x20, #887]
    118c:	cbz	w1, 1160 <uw_install_context_1+0x128>
    1190:	b	1174 <uw_install_context_1+0x13c>
    1194:	bl	0 <abort>

0000000000001198 <execute_stack_op>:
    1198:	sub	sp, sp, #0x260
    119c:	cmp	x0, x1
    11a0:	stp	x29, x30, [sp]
    11a4:	mov	x29, sp
    11a8:	str	x3, [sp, #96]
    11ac:	b.cs	1604 <execute_stack_op+0x46c>  // b.hs, b.nlast
    11b0:	stp	x19, x20, [sp, #16]
    11b4:	mov	x19, x0
    11b8:	mov	w20, #0x1                   	// #1
    11bc:	stp	x21, x22, [sp, #32]
    11c0:	mov	x21, x1
    11c4:	add	x22, sp, #0x60
    11c8:	stp	x23, x24, [sp, #48]
    11cc:	adrp	x23, 0 <read_encoded_value_with_base>
    11d0:	mov	x24, x2
    11d4:	add	x23, x23, #0x0
    11d8:	stp	x25, x26, [sp, #64]
    11dc:	adrp	x25, 0 <read_encoded_value_with_base>
    11e0:	add	x25, x25, #0x0
    11e4:	nop
    11e8:	mov	x4, x19
    11ec:	ldrb	w5, [x4], #1
    11f0:	sub	w0, w5, #0x3
    11f4:	cmp	w0, #0xee
    11f8:	b.ls	1200 <execute_stack_op+0x68>  // b.plast
    11fc:	bl	0 <abort>
    1200:	ldrh	w0, [x23, w0, uxtw #1]
    1204:	adr	x1, 1210 <execute_stack_op+0x78>
    1208:	add	x0, x1, w0, sxth #2
    120c:	br	x0
    1210:	mov	x3, #0x0                   	// #0
    1214:	mov	w1, #0x0                   	// #0
    1218:	ldrb	w2, [x4], #1
    121c:	and	x0, x2, #0x7f
    1220:	lsl	x0, x0, x1
    1224:	add	w1, w1, #0x7
    1228:	orr	x3, x3, x0
    122c:	tbnz	w2, #7, 1218 <execute_stack_op+0x80>
    1230:	cmp	w1, #0x3f
    1234:	b.ls	1598 <execute_stack_op+0x400>  // b.plast
    1238:	sub	w5, w5, #0x70
    123c:	cmp	w5, #0x61
    1240:	b.gt	11fc <execute_stack_op+0x64>
    1244:	ldr	x2, [x24, #832]
    1248:	sxtw	x1, w5
    124c:	ldr	x0, [x24, x1, lsl #3]
    1250:	tbz	x2, #62, 1260 <execute_stack_op+0xc8>
    1254:	add	x1, x24, x1
    1258:	ldrb	w1, [x1, #856]
    125c:	cbnz	w1, 1280 <execute_stack_op+0xe8>
    1260:	cmp	w5, #0x2e
    1264:	b.eq	15f8 <execute_stack_op+0x460>  // b.none
    1268:	adrp	x1, 0 <read_encoded_value_with_base>
    126c:	add	x1, x1, #0x0
    1270:	ldrb	w1, [x1, w5, sxtw]
    1274:	cmp	w1, #0x8
    1278:	b.ne	11fc <execute_stack_op+0x64>  // b.any
    127c:	ldr	x0, [x0]
    1280:	add	x0, x3, x0
    1284:	mov	w3, w20
    1288:	mov	x19, x4
    128c:	b	12a0 <execute_stack_op+0x108>
    1290:	mov	w3, w20
    1294:	add	x19, x19, #0x9
    1298:	ldur	x0, [x19, #-8]
    129c:	nop
    12a0:	cmp	w3, #0x3f
    12a4:	b.gt	11fc <execute_stack_op+0x64>
    12a8:	add	w20, w3, #0x1
    12ac:	str	x0, [x22, w3, sxtw #3]
    12b0:	cmp	x21, x19
    12b4:	b.hi	11e8 <execute_stack_op+0x50>  // b.pmore
    12b8:	cbz	w20, 11fc <execute_stack_op+0x64>
    12bc:	sub	w20, w20, #0x1
    12c0:	add	x0, sp, #0x60
    12c4:	ldp	x29, x30, [sp]
    12c8:	ldr	x0, [x0, w20, sxtw #3]
    12cc:	ldp	x19, x20, [sp, #16]
    12d0:	ldp	x21, x22, [sp, #32]
    12d4:	ldp	x23, x24, [sp, #48]
    12d8:	ldp	x25, x26, [sp, #64]
    12dc:	add	sp, sp, #0x260
    12e0:	ret
    12e4:	sub	w5, w5, #0x50
    12e8:	cmp	w5, #0x61
    12ec:	b.gt	11fc <execute_stack_op+0x64>
    12f0:	ldr	x2, [x24, #832]
    12f4:	sxtw	x1, w5
    12f8:	ldr	x0, [x24, x1, lsl #3]
    12fc:	tbz	x2, #62, 130c <execute_stack_op+0x174>
    1300:	add	x1, x24, x1
    1304:	ldrb	w1, [x1, #856]
    1308:	cbnz	w1, 1284 <execute_stack_op+0xec>
    130c:	cmp	w5, #0x2e
    1310:	b.eq	15e4 <execute_stack_op+0x44c>  // b.none
    1314:	adrp	x1, 0 <read_encoded_value_with_base>
    1318:	add	x1, x1, #0x0
    131c:	ldrb	w1, [x1, w5, sxtw]
    1320:	cmp	w1, #0x8
    1324:	b.ne	11fc <execute_stack_op+0x64>  // b.any
    1328:	mov	w3, w20
    132c:	mov	x19, x4
    1330:	ldr	x0, [x0]
    1334:	b	12a0 <execute_stack_op+0x108>
    1338:	sub	w0, w5, #0x30
    133c:	mov	w3, w20
    1340:	mov	x19, x4
    1344:	b	12a0 <execute_stack_op+0x108>
    1348:	cmp	w20, #0x1
    134c:	b.le	11fc <execute_stack_op+0x64>
    1350:	sub	w3, w20, #0x2
    1354:	sub	w20, w20, #0x1
    1358:	sub	w5, w5, #0x1a
    135c:	cmp	w5, #0x14
    1360:	ldr	x1, [x22, w20, sxtw #3]
    1364:	ldr	x0, [x22, w3, sxtw #3]
    1368:	b.hi	11fc <execute_stack_op+0x64>  // b.pmore
    136c:	ldrh	w2, [x25, w5, uxtw #1]
    1370:	adr	x5, 137c <execute_stack_op+0x1e4>
    1374:	add	x2, x5, w2, sxth #2
    1378:	br	x2
    137c:	cbz	w20, 11fc <execute_stack_op+0x64>
    1380:	sub	w3, w20, #0x1
    1384:	cmp	w5, #0x20
    1388:	ldr	x0, [x22, w3, sxtw #3]
    138c:	b.eq	18e0 <execute_stack_op+0x748>  // b.none
    1390:	b.hi	13b0 <execute_stack_op+0x218>  // b.pmore
    1394:	cmp	w5, #0x19
    1398:	b.eq	1614 <execute_stack_op+0x47c>  // b.none
    139c:	cmp	w5, #0x1f
    13a0:	b.ne	1584 <execute_stack_op+0x3ec>  // b.any
    13a4:	neg	x0, x0
    13a8:	mov	x19, x4
    13ac:	b	12a0 <execute_stack_op+0x108>
    13b0:	cmp	w5, #0x23
    13b4:	b.eq	15b8 <execute_stack_op+0x420>  // b.none
    13b8:	cmp	w5, #0x94
    13bc:	b.ne	11fc <execute_stack_op+0x64>  // b.any
    13c0:	ldrb	w1, [x19, #1]
    13c4:	add	x19, x19, #0x2
    13c8:	cmp	w1, #0x4
    13cc:	b.eq	17d0 <execute_stack_op+0x638>  // b.none
    13d0:	b.hi	18fc <execute_stack_op+0x764>  // b.pmore
    13d4:	cmp	w1, #0x1
    13d8:	b.ne	18ec <execute_stack_op+0x754>  // b.any
    13dc:	ldrb	w0, [x0]
    13e0:	b	12a0 <execute_stack_op+0x108>
    13e4:	cmp	w20, #0x2
    13e8:	b.le	11fc <execute_stack_op+0x64>
    13ec:	sub	w1, w20, #0x2
    13f0:	sub	w2, w20, #0x1
    13f4:	sub	w0, w20, #0x3
    13f8:	mov	x19, x4
    13fc:	sxtw	x1, w1
    1400:	sxtw	x2, w2
    1404:	sxtw	x0, w0
    1408:	ldr	x5, [x22, x1, lsl #3]
    140c:	ldr	x3, [x22, x2, lsl #3]
    1410:	ldr	x4, [x22, x0, lsl #3]
    1414:	str	x5, [x22, x2, lsl #3]
    1418:	str	x4, [x22, x1, lsl #3]
    141c:	str	x3, [x22, x0, lsl #3]
    1420:	b	12b0 <execute_stack_op+0x118>
    1424:	cmp	w20, #0x1
    1428:	b.le	11fc <execute_stack_op+0x64>
    142c:	sub	w0, w20, #0x2
    1430:	sub	w1, w20, #0x1
    1434:	mov	x19, x4
    1438:	sxtw	x0, w0
    143c:	sxtw	x1, w1
    1440:	ldr	x3, [x22, x0, lsl #3]
    1444:	ldr	x2, [x22, x1, lsl #3]
    1448:	str	x3, [x22, x1, lsl #3]
    144c:	str	x2, [x22, x0, lsl #3]
    1450:	b	12b0 <execute_stack_op+0x118>
    1454:	ldrb	w3, [x19, #1]
    1458:	sub	w1, w20, #0x1
    145c:	add	x19, x19, #0x2
    1460:	sxtw	x2, w1
    1464:	cmp	x3, w1, sxtw
    1468:	b.ge	11fc <execute_stack_op+0x64>  // b.tcont
    146c:	sub	x1, x2, x3
    1470:	mov	w3, w20
    1474:	ldr	x0, [x22, x1, lsl #3]
    1478:	b	12a0 <execute_stack_op+0x108>
    147c:	cmp	w20, #0x1
    1480:	b.le	11fc <execute_stack_op+0x64>
    1484:	sub	w0, w20, #0x2
    1488:	mov	x19, x4
    148c:	mov	w3, w20
    1490:	ldr	x0, [x22, w0, sxtw #3]
    1494:	b	12a0 <execute_stack_op+0x108>
    1498:	cbz	w20, 11fc <execute_stack_op+0x64>
    149c:	sub	w20, w20, #0x1
    14a0:	mov	x19, x4
    14a4:	b	12b0 <execute_stack_op+0x118>
    14a8:	cbz	w20, 11fc <execute_stack_op+0x64>
    14ac:	sub	w0, w20, #0x1
    14b0:	mov	x19, x4
    14b4:	mov	w3, w20
    14b8:	ldr	x0, [x22, w0, sxtw #3]
    14bc:	b	12a0 <execute_stack_op+0x108>
    14c0:	ldursh	x1, [x19, #1]
    14c4:	add	x19, x19, #0x3
    14c8:	add	x19, x19, x1
    14cc:	b	12b0 <execute_stack_op+0x118>
    14d0:	ldrb	w0, [x19, #1]
    14d4:	mov	w3, w20
    14d8:	add	x19, x19, #0x2
    14dc:	b	12a0 <execute_stack_op+0x108>
    14e0:	ldrb	w26, [x19, #1]
    14e4:	mov	x1, x24
    14e8:	mov	w0, w26
    14ec:	bl	160 <base_of_encoded_value>
    14f0:	add	x2, x19, #0x2
    14f4:	mov	x1, x0
    14f8:	add	x3, sp, #0x58
    14fc:	mov	w0, w26
    1500:	bl	0 <read_encoded_value_with_base>
    1504:	mov	x19, x0
    1508:	mov	w3, w20
    150c:	ldr	x0, [sp, #88]
    1510:	b	12a0 <execute_stack_op+0x108>
    1514:	cbz	w20, 11fc <execute_stack_op+0x64>
    1518:	sub	w20, w20, #0x1
    151c:	add	x1, x19, #0x3
    1520:	ldr	x0, [x22, w20, sxtw #3]
    1524:	cbz	x0, 15b0 <execute_stack_op+0x418>
    1528:	ldursh	x19, [x19, #1]
    152c:	add	x19, x1, x19
    1530:	b	12b0 <execute_stack_op+0x118>
    1534:	ldursw	x0, [x19, #1]
    1538:	mov	w3, w20
    153c:	add	x19, x19, #0x5
    1540:	b	12a0 <execute_stack_op+0x108>
    1544:	ldur	w0, [x19, #1]
    1548:	mov	w3, w20
    154c:	add	x19, x19, #0x5
    1550:	b	12a0 <execute_stack_op+0x108>
    1554:	ldursh	x0, [x19, #1]
    1558:	mov	w3, w20
    155c:	add	x19, x19, #0x3
    1560:	b	12a0 <execute_stack_op+0x108>
    1564:	ldurh	w0, [x19, #1]
    1568:	mov	w3, w20
    156c:	add	x19, x19, #0x3
    1570:	b	12a0 <execute_stack_op+0x108>
    1574:	ldrsb	x0, [x19, #1]
    1578:	mov	w3, w20
    157c:	add	x19, x19, #0x2
    1580:	b	12a0 <execute_stack_op+0x108>
    1584:	cmp	w5, #0x6
    1588:	b.ne	11fc <execute_stack_op+0x64>  // b.any
    158c:	mov	x19, x4
    1590:	ldr	x0, [x0]
    1594:	b	12a0 <execute_stack_op+0x108>
    1598:	mov	x0, #0xffffffffffffffff    	// #-1
    159c:	tst	x2, #0x40
    15a0:	lsl	x0, x0, x1
    15a4:	orr	x0, x3, x0
    15a8:	csel	x3, x0, x3, ne  // ne = any
    15ac:	b	1238 <execute_stack_op+0xa0>
    15b0:	mov	x19, x1
    15b4:	b	12b0 <execute_stack_op+0x118>
    15b8:	mov	x6, #0x0                   	// #0
    15bc:	mov	w2, #0x0                   	// #0
    15c0:	ldrb	w5, [x4], #1
    15c4:	and	x1, x5, #0x7f
    15c8:	lsl	x1, x1, x2
    15cc:	add	w2, w2, #0x7
    15d0:	orr	x6, x6, x1
    15d4:	tbnz	w5, #7, 15c0 <execute_stack_op+0x428>
    15d8:	add	x0, x0, x6
    15dc:	mov	x19, x4
    15e0:	b	12a0 <execute_stack_op+0x108>
    15e4:	cntd	x0
    15e8:	mov	w3, w20
    15ec:	mov	x19, x4
    15f0:	sxtw	x0, w0
    15f4:	b	12a0 <execute_stack_op+0x108>
    15f8:	cntd	x0
    15fc:	sxtw	x0, w0
    1600:	b	1280 <execute_stack_op+0xe8>
    1604:	mov	x0, x3
    1608:	ldp	x29, x30, [sp]
    160c:	add	sp, sp, #0x260
    1610:	ret
    1614:	cmp	x0, #0x0
    1618:	mov	x19, x4
    161c:	cneg	x0, x0, lt  // lt = tstop
    1620:	b	12a0 <execute_stack_op+0x108>
    1624:	mov	x19, x4
    1628:	mov	w1, #0x0                   	// #0
    162c:	mov	x4, #0x0                   	// #0
    1630:	ldrb	w2, [x19], #1
    1634:	and	x0, x2, #0x7f
    1638:	lsl	x0, x0, x1
    163c:	add	w1, w1, #0x7
    1640:	orr	x4, x4, x0
    1644:	tbnz	w2, #7, 1630 <execute_stack_op+0x498>
    1648:	mov	x3, #0x0                   	// #0
    164c:	mov	w1, #0x0                   	// #0
    1650:	ldrb	w2, [x19], #1
    1654:	and	x0, x2, #0x7f
    1658:	lsl	x0, x0, x1
    165c:	add	w1, w1, #0x7
    1660:	orr	x3, x3, x0
    1664:	tbnz	w2, #7, 1650 <execute_stack_op+0x4b8>
    1668:	cmp	w1, #0x3f
    166c:	b.hi	1684 <execute_stack_op+0x4ec>  // b.pmore
    1670:	mov	x0, #0xffffffffffffffff    	// #-1
    1674:	tst	x2, #0x40
    1678:	lsl	x0, x0, x1
    167c:	orr	x0, x3, x0
    1680:	csel	x3, x0, x3, ne  // ne = any
    1684:	cmp	w4, #0x61
    1688:	mov	w1, w4
    168c:	b.gt	11fc <execute_stack_op+0x64>
    1690:	ldr	x2, [x24, #832]
    1694:	sxtw	x4, w4
    1698:	ldr	x0, [x24, x4, lsl #3]
    169c:	tbz	x2, #62, 16ac <execute_stack_op+0x514>
    16a0:	add	x4, x24, x4
    16a4:	ldrb	w2, [x4, #856]
    16a8:	cbnz	w2, 16cc <execute_stack_op+0x534>
    16ac:	cmp	w1, #0x2e
    16b0:	b.eq	18c0 <execute_stack_op+0x728>  // b.none
    16b4:	adrp	x2, 0 <read_encoded_value_with_base>
    16b8:	add	x2, x2, #0x0
    16bc:	ldrb	w1, [x2, w1, sxtw]
    16c0:	cmp	w1, #0x8
    16c4:	b.ne	11fc <execute_stack_op+0x64>  // b.any
    16c8:	ldr	x0, [x0]
    16cc:	add	x0, x3, x0
    16d0:	mov	w3, w20
    16d4:	b	12a0 <execute_stack_op+0x108>
    16d8:	mov	x19, x4
    16dc:	mov	x0, #0x0                   	// #0
    16e0:	mov	w2, #0x0                   	// #0
    16e4:	nop
    16e8:	ldrb	w4, [x19], #1
    16ec:	and	x1, x4, #0x7f
    16f0:	lsl	x1, x1, x2
    16f4:	add	w2, w2, #0x7
    16f8:	orr	x0, x0, x1
    16fc:	tbnz	w4, #7, 16e8 <execute_stack_op+0x550>
    1700:	mov	w3, w20
    1704:	cmp	w2, #0x3f
    1708:	b.hi	12a0 <execute_stack_op+0x108>  // b.pmore
    170c:	tbz	w4, #6, 12a0 <execute_stack_op+0x108>
    1710:	mov	x1, #0xffffffffffffffff    	// #-1
    1714:	lsl	x2, x1, x2
    1718:	orr	x0, x0, x2
    171c:	b	12a0 <execute_stack_op+0x108>
    1720:	mov	x19, x4
    1724:	mov	x0, #0x0                   	// #0
    1728:	mov	w2, #0x0                   	// #0
    172c:	nop
    1730:	ldrb	w3, [x19], #1
    1734:	and	x1, x3, #0x7f
    1738:	lsl	x1, x1, x2
    173c:	add	w2, w2, #0x7
    1740:	orr	x0, x0, x1
    1744:	tbnz	w3, #7, 1730 <execute_stack_op+0x598>
    1748:	mov	w3, w20
    174c:	b	12a0 <execute_stack_op+0x108>
    1750:	mov	x19, x4
    1754:	mov	x3, #0x0                   	// #0
    1758:	mov	w1, #0x0                   	// #0
    175c:	nop
    1760:	ldrb	w2, [x19], #1
    1764:	and	x0, x2, #0x7f
    1768:	lsl	x0, x0, x1
    176c:	add	w1, w1, #0x7
    1770:	orr	x3, x3, x0
    1774:	tbnz	w2, #7, 1760 <execute_stack_op+0x5c8>
    1778:	cmp	w3, #0x61
    177c:	mov	w1, w3
    1780:	b.gt	11fc <execute_stack_op+0x64>
    1784:	ldr	x2, [x24, #832]
    1788:	sxtw	x3, w3
    178c:	ldr	x0, [x24, x3, lsl #3]
    1790:	tbz	x2, #62, 17a0 <execute_stack_op+0x608>
    1794:	add	x3, x24, x3
    1798:	ldrb	w2, [x3, #856]
    179c:	cbnz	w2, 16d0 <execute_stack_op+0x538>
    17a0:	cmp	w1, #0x2e
    17a4:	b.eq	18d0 <execute_stack_op+0x738>  // b.none
    17a8:	adrp	x2, 0 <read_encoded_value_with_base>
    17ac:	add	x2, x2, #0x0
    17b0:	ldrb	w1, [x2, w1, sxtw]
    17b4:	cmp	w1, #0x8
    17b8:	b.ne	11fc <execute_stack_op+0x64>  // b.any
    17bc:	mov	w3, w20
    17c0:	ldr	x0, [x0]
    17c4:	b	12a0 <execute_stack_op+0x108>
    17c8:	mov	x19, x4
    17cc:	b	12b0 <execute_stack_op+0x118>
    17d0:	ldr	w0, [x0]
    17d4:	b	12a0 <execute_stack_op+0x108>
    17d8:	cmp	x0, x1
    17dc:	mov	x19, x4
    17e0:	cset	x0, ne  // ne = any
    17e4:	b	12a0 <execute_stack_op+0x108>
    17e8:	cmp	x0, x1
    17ec:	mov	x19, x4
    17f0:	cset	x0, lt  // lt = tstop
    17f4:	b	12a0 <execute_stack_op+0x108>
    17f8:	cmp	x0, x1
    17fc:	mov	x19, x4
    1800:	cset	x0, le
    1804:	b	12a0 <execute_stack_op+0x108>
    1808:	cmp	x0, x1
    180c:	mov	x19, x4
    1810:	cset	x0, gt
    1814:	b	12a0 <execute_stack_op+0x108>
    1818:	cmp	x0, x1
    181c:	mov	x19, x4
    1820:	cset	x0, ge  // ge = tcont
    1824:	b	12a0 <execute_stack_op+0x108>
    1828:	cmp	x0, x1
    182c:	mov	x19, x4
    1830:	cset	x0, eq  // eq = none
    1834:	b	12a0 <execute_stack_op+0x108>
    1838:	eor	x0, x0, x1
    183c:	mov	x19, x4
    1840:	b	12a0 <execute_stack_op+0x108>
    1844:	mov	x19, x4
    1848:	asr	x0, x0, x1
    184c:	b	12a0 <execute_stack_op+0x108>
    1850:	mov	x19, x4
    1854:	lsr	x0, x0, x1
    1858:	b	12a0 <execute_stack_op+0x108>
    185c:	mov	x19, x4
    1860:	lsl	x0, x0, x1
    1864:	b	12a0 <execute_stack_op+0x108>
    1868:	add	x0, x0, x1
    186c:	mov	x19, x4
    1870:	b	12a0 <execute_stack_op+0x108>
    1874:	orr	x0, x0, x1
    1878:	mov	x19, x4
    187c:	b	12a0 <execute_stack_op+0x108>
    1880:	mul	x0, x0, x1
    1884:	mov	x19, x4
    1888:	b	12a0 <execute_stack_op+0x108>
    188c:	udiv	x2, x0, x1
    1890:	mov	x19, x4
    1894:	msub	x0, x2, x1, x0
    1898:	b	12a0 <execute_stack_op+0x108>
    189c:	sub	x0, x0, x1
    18a0:	mov	x19, x4
    18a4:	b	12a0 <execute_stack_op+0x108>
    18a8:	sdiv	x0, x0, x1
    18ac:	mov	x19, x4
    18b0:	b	12a0 <execute_stack_op+0x108>
    18b4:	and	x0, x0, x1
    18b8:	mov	x19, x4
    18bc:	b	12a0 <execute_stack_op+0x108>
    18c0:	cntd	x0
    18c4:	sxtw	x0, w0
    18c8:	add	x0, x3, x0
    18cc:	b	16d0 <execute_stack_op+0x538>
    18d0:	cntd	x0
    18d4:	mov	w3, w20
    18d8:	sxtw	x0, w0
    18dc:	b	12a0 <execute_stack_op+0x108>
    18e0:	mvn	x0, x0
    18e4:	mov	x19, x4
    18e8:	b	12a0 <execute_stack_op+0x108>
    18ec:	cmp	w1, #0x2
    18f0:	b.ne	11fc <execute_stack_op+0x64>  // b.any
    18f4:	ldrh	w0, [x0]
    18f8:	b	12a0 <execute_stack_op+0x108>
    18fc:	cmp	w1, #0x8
    1900:	b.ne	11fc <execute_stack_op+0x64>  // b.any
    1904:	ldr	x0, [x0]
    1908:	b	12a0 <execute_stack_op+0x108>
    190c:	nop

0000000000001910 <uw_update_context_1>:
    1910:	sub	sp, sp, #0x440
    1914:	mov	x2, #0x3c0                 	// #960
    1918:	stp	x29, x30, [sp]
    191c:	mov	x29, sp
    1920:	stp	x27, x28, [sp, #80]
    1924:	add	x28, sp, #0x80
    1928:	mov	x27, x0
    192c:	stp	x19, x20, [sp, #16]
    1930:	stp	x21, x22, [sp, #32]
    1934:	stp	x23, x24, [sp, #48]
    1938:	stp	x25, x26, [sp, #64]
    193c:	str	x1, [sp, #104]
    1940:	mov	x1, x0
    1944:	mov	x0, x28
    1948:	bl	0 <memcpy>
    194c:	ldr	x1, [sp, #960]
    1950:	tbz	x1, #62, 195c <uw_update_context_1+0x4c>
    1954:	ldrb	w0, [sp, #1015]
    1958:	cbnz	w0, 1964 <uw_update_context_1+0x54>
    195c:	ldr	x0, [x28, #248]
    1960:	cbz	x0, 1c30 <uw_update_context_1+0x320>
    1964:	ldr	x0, [x27, #832]
    1968:	tbz	x0, #62, 1970 <uw_update_context_1+0x60>
    196c:	strb	wzr, [x27, #887]
    1970:	ldr	x0, [sp, #104]
    1974:	ldr	w0, [x0, #1600]
    1978:	str	xzr, [x27, #248]
    197c:	cmp	w0, #0x1
    1980:	b.ne	19d0 <uw_update_context_1+0xc0>  // b.any
    1984:	ldr	x0, [sp, #104]
    1988:	ldr	x0, [x0, #1584]
    198c:	cmp	w0, #0x61
    1990:	b.gt	1b98 <uw_update_context_1+0x288>
    1994:	sxtw	x2, w0
    1998:	ldr	x3, [x28, x2, lsl #3]
    199c:	tbnz	x1, #62, 1c10 <uw_update_context_1+0x300>
    19a0:	cmp	w0, #0x2e
    19a4:	b.eq	1c24 <uw_update_context_1+0x314>  // b.none
    19a8:	adrp	x0, 0 <read_encoded_value_with_base>
    19ac:	add	x0, x0, #0x0
    19b0:	ldrb	w0, [x0, x2]
    19b4:	cmp	w0, #0x8
    19b8:	b.ne	1b98 <uw_update_context_1+0x288>  // b.any
    19bc:	ldr	x3, [x3]
    19c0:	ldr	x0, [sp, #104]
    19c4:	ldr	x0, [x0, #1576]
    19c8:	add	x22, x3, x0
    19cc:	b	1a14 <uw_update_context_1+0x104>
    19d0:	cmp	w0, #0x2
    19d4:	b.ne	1b98 <uw_update_context_1+0x288>  // b.any
    19d8:	ldr	x0, [sp, #104]
    19dc:	mov	x1, #0x0                   	// #0
    19e0:	mov	w3, #0x0                   	// #0
    19e4:	ldr	x0, [x0, #1592]
    19e8:	ldrb	w4, [x0], #1
    19ec:	and	x2, x4, #0x7f
    19f0:	lsl	x2, x2, x3
    19f4:	add	w3, w3, #0x7
    19f8:	orr	x1, x1, x2
    19fc:	tbnz	w4, #7, 19e8 <uw_update_context_1+0xd8>
    1a00:	add	x1, x0, x1
    1a04:	mov	x2, x28
    1a08:	mov	x3, #0x0                   	// #0
    1a0c:	bl	1198 <execute_stack_op>
    1a10:	mov	x22, x0
    1a14:	ldr	x25, [sp, #104]
    1a18:	adrp	x23, 0 <read_encoded_value_with_base>
    1a1c:	add	x26, x27, #0x358
    1a20:	add	x20, x23, #0x0
    1a24:	add	x21, sp, #0x3d8
    1a28:	mov	x24, #0x0                   	// #0
    1a2c:	mov	w19, #0x1                   	// #1
    1a30:	str	x22, [x27, #784]
    1a34:	nop
    1a38:	ldr	w2, [x25, #8]
    1a3c:	cmp	w2, #0x3
    1a40:	b.eq	1ae4 <uw_update_context_1+0x1d4>  // b.none
    1a44:	b.hi	1b28 <uw_update_context_1+0x218>  // b.pmore
    1a48:	cmp	w2, #0x1
    1a4c:	b.eq	1b9c <uw_update_context_1+0x28c>  // b.none
    1a50:	cmp	w2, #0x2
    1a54:	b.ne	1a7c <uw_update_context_1+0x16c>  // b.any
    1a58:	ldr	x0, [x25]
    1a5c:	ldrb	w2, [x21, w0, sxtw]
    1a60:	sxtw	x1, w0
    1a64:	cbnz	w2, 1bb4 <uw_update_context_1+0x2a4>
    1a68:	ldr	x2, [x27, #832]
    1a6c:	ldr	x0, [x28, x1, lsl #3]
    1a70:	tbnz	x2, #62, 1b20 <uw_update_context_1+0x210>
    1a74:	nop
    1a78:	str	x0, [x27, x24, lsl #3]
    1a7c:	add	x24, x24, #0x1
    1a80:	add	x25, x25, #0x10
    1a84:	cmp	x24, #0x62
    1a88:	add	x26, x26, #0x1
    1a8c:	b.ne	1a38 <uw_update_context_1+0x128>  // b.any
    1a90:	ldr	x3, [sp, #104]
    1a94:	ldr	x0, [x27, #832]
    1a98:	ldrb	w2, [x3, #1651]
    1a9c:	orr	x1, x0, #0x8000000000000000
    1aa0:	and	x0, x0, #0x7fffffffffffffff
    1aa4:	cmp	w2, #0x0
    1aa8:	csel	x0, x0, x1, eq  // eq = none
    1aac:	ldp	x29, x30, [sp]
    1ab0:	orr	x1, x0, #0x2000000000000000
    1ab4:	ldp	x19, x20, [sp, #16]
    1ab8:	ldp	x21, x22, [sp, #32]
    1abc:	ldp	x23, x24, [sp, #48]
    1ac0:	ldp	x25, x26, [sp, #64]
    1ac4:	str	x0, [x27, #832]
    1ac8:	ldr	x2, [x3, #544]
    1acc:	tst	x2, #0x1
    1ad0:	csel	x0, x1, x0, ne  // ne = any
    1ad4:	str	x0, [x27, #832]
    1ad8:	ldp	x27, x28, [sp, #80]
    1adc:	add	sp, sp, #0x440
    1ae0:	ret
    1ae4:	ldr	x0, [x25]
    1ae8:	mov	x1, #0x0                   	// #0
    1aec:	mov	w4, #0x0                   	// #0
    1af0:	ldrb	w5, [x0], #1
    1af4:	and	x2, x5, #0x7f
    1af8:	lsl	x2, x2, x4
    1afc:	add	w4, w4, #0x7
    1b00:	orr	x1, x1, x2
    1b04:	tbnz	w5, #7, 1af0 <uw_update_context_1+0x1e0>
    1b08:	add	x1, x0, x1
    1b0c:	mov	x3, x22
    1b10:	mov	x2, x28
    1b14:	bl	1198 <execute_stack_op>
    1b18:	ldr	x1, [x27, #832]
    1b1c:	tbz	x1, #62, 1a78 <uw_update_context_1+0x168>
    1b20:	strb	wzr, [x26]
    1b24:	b	1a78 <uw_update_context_1+0x168>
    1b28:	cmp	w2, #0x4
    1b2c:	b.eq	1b84 <uw_update_context_1+0x274>  // b.none
    1b30:	cmp	w2, #0x5
    1b34:	b.ne	1a7c <uw_update_context_1+0x16c>  // b.any
    1b38:	ldr	x0, [x25]
    1b3c:	mov	x1, #0x0                   	// #0
    1b40:	mov	w4, #0x0                   	// #0
    1b44:	nop
    1b48:	ldrb	w5, [x0], #1
    1b4c:	and	x2, x5, #0x7f
    1b50:	lsl	x2, x2, x4
    1b54:	add	w4, w4, #0x7
    1b58:	orr	x1, x1, x2
    1b5c:	tbnz	w5, #7, 1b48 <uw_update_context_1+0x238>
    1b60:	add	x1, x0, x1
    1b64:	mov	x3, x22
    1b68:	mov	x2, x28
    1b6c:	bl	1198 <execute_stack_op>
    1b70:	ldrb	w1, [x24, x20]
    1b74:	cmp	w1, #0x8
    1b78:	b.hi	1b98 <uw_update_context_1+0x288>  // b.pmore
    1b7c:	strb	w19, [x26]
    1b80:	b	1a78 <uw_update_context_1+0x168>
    1b84:	ldr	x0, [x25]
    1b88:	ldrb	w1, [x24, x20]
    1b8c:	add	x0, x22, x0
    1b90:	cmp	w1, #0x8
    1b94:	b.ls	1b7c <uw_update_context_1+0x26c>  // b.plast
    1b98:	bl	0 <abort>
    1b9c:	ldr	x1, [x27, #832]
    1ba0:	ldr	x0, [x25]
    1ba4:	add	x0, x22, x0
    1ba8:	tbz	x1, #62, 1a78 <uw_update_context_1+0x168>
    1bac:	strb	wzr, [x26]
    1bb0:	b	1a78 <uw_update_context_1+0x168>
    1bb4:	cmp	w0, #0x61
    1bb8:	b.gt	1b98 <uw_update_context_1+0x288>
    1bbc:	ldr	x4, [sp, #960]
    1bc0:	ldr	x2, [x28, x1, lsl #3]
    1bc4:	tbz	x4, #62, 1be8 <uw_update_context_1+0x2d8>
    1bc8:	mov	x0, x2
    1bcc:	nop
    1bd0:	add	x1, x23, #0x0
    1bd4:	ldrb	w1, [x24, x1]
    1bd8:	cmp	w1, #0x8
    1bdc:	b.hi	1b98 <uw_update_context_1+0x288>  // b.pmore
    1be0:	strb	w19, [x26]
    1be4:	b	1a78 <uw_update_context_1+0x168>
    1be8:	cmp	w0, #0x2e
    1bec:	b.eq	1c04 <uw_update_context_1+0x2f4>  // b.none
    1bf0:	ldrb	w0, [x20, x1]
    1bf4:	cmp	w0, #0x8
    1bf8:	b.ne	1b98 <uw_update_context_1+0x288>  // b.any
    1bfc:	ldr	x0, [x2]
    1c00:	b	1bd0 <uw_update_context_1+0x2c0>
    1c04:	cntd	x0
    1c08:	sxtw	x0, w0
    1c0c:	b	1bd0 <uw_update_context_1+0x2c0>
    1c10:	add	x1, sp, #0x3d8
    1c14:	ldrb	w1, [x1, x2]
    1c18:	cbnz	w1, 19c0 <uw_update_context_1+0xb0>
    1c1c:	cmp	w0, #0x2e
    1c20:	b.ne	19a8 <uw_update_context_1+0x98>  // b.any
    1c24:	cntd	x0
    1c28:	sxtw	x3, w0
    1c2c:	b	19c0 <uw_update_context_1+0xb0>
    1c30:	adrp	x0, 0 <read_encoded_value_with_base>
    1c34:	ldr	x2, [x27, #784]
    1c38:	ldrb	w0, [x0]
    1c3c:	cmp	w0, #0x8
    1c40:	b.ne	1b98 <uw_update_context_1+0x288>  // b.any
    1c44:	str	x2, [sp, #120]
    1c48:	tbz	x1, #62, 1c50 <uw_update_context_1+0x340>
    1c4c:	strb	wzr, [sp, #1015]
    1c50:	add	x0, sp, #0x78
    1c54:	str	x0, [x28, #248]
    1c58:	b	1964 <uw_update_context_1+0x54>
    1c5c:	nop

0000000000001c60 <uw_init_context_1>:
    1c60:	sub	sp, sp, #0x6d0
    1c64:	stp	x29, x30, [sp]
    1c68:	mov	x29, sp
    1c6c:	xpaclri
    1c70:	stp	x19, x20, [sp, #16]
    1c74:	mov	x19, x0
    1c78:	mov	x20, x30
    1c7c:	stp	x21, x22, [sp, #32]
    1c80:	mov	x22, x1
    1c84:	mov	x21, x2
    1c88:	mov	w1, #0x0                   	// #0
    1c8c:	mov	x2, #0x3c0                 	// #960
    1c90:	str	x23, [sp, #48]
    1c94:	bl	0 <memset>
    1c98:	mov	x0, #0x4000000000000000    	// #4611686018427387904
    1c9c:	str	x20, [x19, #792]
    1ca0:	str	x0, [x19, #832]
    1ca4:	add	x23, sp, #0x50
    1ca8:	mov	x1, x23
    1cac:	mov	x0, x19
    1cb0:	bl	ae0 <uw_frame_state_for>
    1cb4:	cbnz	w0, 1ea8 <uw_init_context_1+0x248>
    1cb8:	adrp	x0, 0 <__pthread_key_create>
    1cbc:	adrp	x20, 0 <read_encoded_value_with_base>
    1cc0:	ldr	x0, [x0]
    1cc4:	cbz	x0, 1d4c <uw_init_context_1+0xec>
    1cc8:	add	x0, x20, #0x0
    1ccc:	adrp	x1, 0 <read_encoded_value_with_base>
    1cd0:	add	x0, x0, #0x64
    1cd4:	add	x1, x1, #0x0
    1cd8:	bl	0 <pthread_once>
    1cdc:	cbnz	w0, 1d4c <uw_init_context_1+0xec>
    1ce0:	add	x20, x20, #0x0
    1ce4:	ldrb	w0, [x20, #31]
    1ce8:	cmp	w0, #0x8
    1cec:	b.ne	1ea8 <uw_init_context_1+0x248>  // b.any
    1cf0:	ldr	x0, [x19, #832]
    1cf4:	str	x22, [sp, #72]
    1cf8:	tbz	x0, #62, 1d00 <uw_init_context_1+0xa0>
    1cfc:	strb	wzr, [x19, #887]
    1d00:	add	x0, sp, #0x48
    1d04:	mov	x3, #0x1f                  	// #31
    1d08:	mov	w2, #0x1                   	// #1
    1d0c:	str	x0, [x19, #248]
    1d10:	mov	x1, x23
    1d14:	mov	x0, x19
    1d18:	str	xzr, [sp, #1656]
    1d1c:	str	x3, [sp, #1664]
    1d20:	str	w2, [sp, #1680]
    1d24:	bl	1910 <uw_update_context_1>
    1d28:	mov	x30, x21
    1d2c:	xpaclri
    1d30:	ldp	x21, x22, [sp, #32]
    1d34:	ldr	x23, [sp, #48]
    1d38:	str	x30, [x19, #792]
    1d3c:	ldp	x29, x30, [sp]
    1d40:	ldp	x19, x20, [sp, #16]
    1d44:	add	sp, sp, #0x6d0
    1d48:	ret
    1d4c:	ldrb	w0, [x20]
    1d50:	add	x3, x20, #0x0
    1d54:	cbnz	w0, 1ce0 <uw_init_context_1+0x80>
    1d58:	mov	w4, #0x8                   	// #8
    1d5c:	strb	w4, [x20]
    1d60:	strb	w4, [x3, #1]
    1d64:	strb	w4, [x3, #2]
    1d68:	strb	w4, [x3, #3]
    1d6c:	strb	w4, [x3, #4]
    1d70:	strb	w4, [x3, #5]
    1d74:	strb	w4, [x3, #6]
    1d78:	strb	w4, [x3, #7]
    1d7c:	strb	w4, [x3, #8]
    1d80:	strb	w4, [x3, #9]
    1d84:	strb	w4, [x3, #10]
    1d88:	strb	w4, [x3, #11]
    1d8c:	strb	w4, [x3, #12]
    1d90:	strb	w4, [x3, #13]
    1d94:	strb	w4, [x3, #14]
    1d98:	strb	w4, [x3, #15]
    1d9c:	strb	w4, [x3, #16]
    1da0:	strb	w4, [x3, #17]
    1da4:	strb	w4, [x3, #18]
    1da8:	strb	w4, [x3, #19]
    1dac:	strb	w4, [x3, #20]
    1db0:	strb	w4, [x3, #21]
    1db4:	strb	w4, [x3, #22]
    1db8:	strb	w4, [x3, #23]
    1dbc:	strb	w4, [x3, #24]
    1dc0:	strb	w4, [x3, #25]
    1dc4:	strb	w4, [x3, #26]
    1dc8:	strb	w4, [x3, #27]
    1dcc:	strb	w4, [x3, #28]
    1dd0:	strb	w4, [x3, #29]
    1dd4:	strb	w4, [x3, #30]
    1dd8:	strb	w4, [x3, #31]
    1ddc:	strb	w4, [x3, #64]
    1de0:	strb	w4, [x3, #46]
    1de4:	strb	w4, [x3, #65]
    1de8:	strb	w4, [x3, #66]
    1dec:	strb	w4, [x3, #67]
    1df0:	strb	w4, [x3, #68]
    1df4:	strb	w4, [x3, #69]
    1df8:	strb	w4, [x3, #70]
    1dfc:	strb	w4, [x3, #71]
    1e00:	strb	w4, [x3, #72]
    1e04:	strb	w4, [x3, #73]
    1e08:	strb	w4, [x3, #74]
    1e0c:	strb	w4, [x3, #75]
    1e10:	strb	w4, [x3, #76]
    1e14:	strb	w4, [x3, #77]
    1e18:	strb	w4, [x3, #78]
    1e1c:	strb	w4, [x3, #79]
    1e20:	strb	w4, [x3, #80]
    1e24:	strb	w4, [x3, #81]
    1e28:	strb	w4, [x3, #82]
    1e2c:	strb	w4, [x3, #83]
    1e30:	strb	w4, [x3, #84]
    1e34:	strb	w4, [x3, #85]
    1e38:	strb	w4, [x3, #86]
    1e3c:	strb	w4, [x3, #87]
    1e40:	strb	w4, [x3, #88]
    1e44:	strb	w4, [x3, #89]
    1e48:	strb	w4, [x3, #90]
    1e4c:	strb	w4, [x3, #91]
    1e50:	strb	w4, [x3, #92]
    1e54:	strb	w4, [x3, #93]
    1e58:	strb	w4, [x3, #94]
    1e5c:	strb	w4, [x3, #95]
    1e60:	strb	w4, [x3, #48]
    1e64:	strb	w4, [x3, #49]
    1e68:	strb	w4, [x3, #50]
    1e6c:	strb	w4, [x3, #51]
    1e70:	strb	w4, [x3, #52]
    1e74:	strb	w4, [x3, #53]
    1e78:	strb	w4, [x3, #54]
    1e7c:	strb	w4, [x3, #55]
    1e80:	strb	w4, [x3, #56]
    1e84:	strb	w4, [x3, #57]
    1e88:	strb	w4, [x3, #58]
    1e8c:	strb	w4, [x3, #59]
    1e90:	strb	w4, [x3, #60]
    1e94:	strb	w4, [x3, #61]
    1e98:	strb	w4, [x3, #62]
    1e9c:	strb	w4, [x3, #63]
    1ea0:	strb	w4, [x3, #96]
    1ea4:	b	1ce0 <uw_init_context_1+0x80>
    1ea8:	bl	0 <abort>
    1eac:	nop

0000000000001eb0 <uw_update_context>:
    1eb0:	stp	x29, x30, [sp, #-32]!
    1eb4:	mov	x29, sp
    1eb8:	stp	x19, x20, [sp, #16]
    1ebc:	mov	x20, x1
    1ec0:	mov	x19, x0
    1ec4:	bl	1910 <uw_update_context_1>
    1ec8:	ldr	x0, [x20, #1640]
    1ecc:	add	x1, x20, x0, lsl #4
    1ed0:	ldr	w1, [x1, #8]
    1ed4:	cmp	w1, #0x6
    1ed8:	b.ne	1eec <uw_update_context+0x3c>  // b.any
    1edc:	str	xzr, [x19, #792]
    1ee0:	ldp	x19, x20, [sp, #16]
    1ee4:	ldp	x29, x30, [sp], #32
    1ee8:	ret
    1eec:	cmp	w0, #0x61
    1ef0:	b.gt	1f60 <uw_update_context+0xb0>
    1ef4:	ldr	x2, [x19, #832]
    1ef8:	sxtw	x1, w0
    1efc:	ldr	x17, [x19, x1, lsl #3]
    1f00:	tbz	x2, #62, 1f10 <uw_update_context+0x60>
    1f04:	add	x2, x19, x1
    1f08:	ldrb	w2, [x2, #856]
    1f0c:	cbnz	w2, 1f30 <uw_update_context+0x80>
    1f10:	cmp	w0, #0x2e
    1f14:	b.eq	1f54 <uw_update_context+0xa4>  // b.none
    1f18:	adrp	x0, 0 <read_encoded_value_with_base>
    1f1c:	add	x0, x0, #0x0
    1f20:	ldrb	w0, [x0, x1]
    1f24:	cmp	w0, #0x8
    1f28:	b.ne	1f60 <uw_update_context+0xb0>  // b.any
    1f2c:	ldr	x17, [x17]
    1f30:	ldr	x0, [x20, #544]
    1f34:	str	x17, [x19, #792]
    1f38:	tbz	w0, #0, 1f44 <uw_update_context+0x94>
    1f3c:	ldr	x16, [x19, #784]
    1f40:	autia1716
    1f44:	str	x17, [x19, #792]
    1f48:	ldp	x19, x20, [sp, #16]
    1f4c:	ldp	x29, x30, [sp], #32
    1f50:	ret
    1f54:	cntd	x0
    1f58:	sxtw	x17, w0
    1f5c:	b	1f30 <uw_update_context+0x80>
    1f60:	bl	0 <abort>
    1f64:	nop

0000000000001f68 <_Unwind_RaiseException_Phase2>:
    1f68:	sub	sp, sp, #0x6c0
    1f6c:	stp	x29, x30, [sp]
    1f70:	mov	x29, sp
    1f74:	stp	x19, x20, [sp, #16]
    1f78:	mov	x19, x1
    1f7c:	stp	x21, x22, [sp, #32]
    1f80:	mov	x21, x0
    1f84:	add	x22, sp, #0x40
    1f88:	stp	x23, x24, [sp, #48]
    1f8c:	mov	x24, x2
    1f90:	mov	x23, #0x1                   	// #1
    1f94:	nop
    1f98:	mov	x1, x22
    1f9c:	mov	x0, x19
    1fa0:	bl	ae0 <uw_frame_state_for>
    1fa4:	ldr	x3, [x19, #784]
    1fa8:	ldr	x1, [x19, #832]
    1fac:	ldr	x2, [x21, #24]
    1fb0:	sub	x1, x3, x1, lsr #63
    1fb4:	cmp	x2, x1
    1fb8:	cset	w20, eq  // eq = none
    1fbc:	lsl	w20, w20, #2
    1fc0:	cbnz	w0, 200c <_Unwind_RaiseException_Phase2+0xa4>
    1fc4:	ldr	x5, [sp, #1680]
    1fc8:	cbz	x5, 1ff4 <_Unwind_RaiseException_Phase2+0x8c>
    1fcc:	ldr	x2, [x21]
    1fd0:	mov	x4, x19
    1fd4:	mov	x3, x21
    1fd8:	orr	w1, w20, #0x2
    1fdc:	mov	w0, #0x1                   	// #1
    1fe0:	blr	x5
    1fe4:	cmp	w0, #0x7
    1fe8:	b.eq	2028 <_Unwind_RaiseException_Phase2+0xc0>  // b.none
    1fec:	cmp	w0, #0x8
    1ff0:	b.ne	200c <_Unwind_RaiseException_Phase2+0xa4>  // b.any
    1ff4:	cbnz	w20, 2044 <_Unwind_RaiseException_Phase2+0xdc>
    1ff8:	add	x23, x23, #0x1
    1ffc:	mov	x1, x22
    2000:	mov	x0, x19
    2004:	bl	1eb0 <uw_update_context>
    2008:	b	1f98 <_Unwind_RaiseException_Phase2+0x30>
    200c:	mov	w0, #0x2                   	// #2
    2010:	ldp	x29, x30, [sp]
    2014:	ldp	x19, x20, [sp, #16]
    2018:	ldp	x21, x22, [sp, #32]
    201c:	ldp	x23, x24, [sp, #48]
    2020:	add	sp, sp, #0x6c0
    2024:	ret
    2028:	str	x23, [x24]
    202c:	ldp	x29, x30, [sp]
    2030:	ldp	x19, x20, [sp, #16]
    2034:	ldp	x21, x22, [sp, #32]
    2038:	ldp	x23, x24, [sp, #48]
    203c:	add	sp, sp, #0x6c0
    2040:	ret
    2044:	bl	0 <abort>

0000000000002048 <_Unwind_ForcedUnwind_Phase2>:
    2048:	sub	sp, sp, #0x6d0
    204c:	stp	x29, x30, [sp]
    2050:	mov	x29, sp
    2054:	stp	x19, x20, [sp, #16]
    2058:	mov	x20, x0
    205c:	stp	x21, x22, [sp, #32]
    2060:	mov	x21, x1
    2064:	add	x22, sp, #0x50
    2068:	stp	x23, x24, [sp, #48]
    206c:	mov	x23, #0x1                   	// #1
    2070:	stp	x25, x26, [sp, #64]
    2074:	mov	x26, x2
    2078:	ldp	x25, x24, [x0, #16]
    207c:	b	20d0 <_Unwind_ForcedUnwind_Phase2+0x88>
    2080:	blr	x25
    2084:	mov	w2, w0
    2088:	mov	x4, x21
    208c:	mov	x3, x20
    2090:	mov	w1, #0xa                   	// #10
    2094:	mov	w0, #0x1                   	// #1
    2098:	cbnz	w2, 211c <_Unwind_ForcedUnwind_Phase2+0xd4>
    209c:	ldr	x5, [sp, #1696]
    20a0:	cbz	x5, 20c0 <_Unwind_ForcedUnwind_Phase2+0x78>
    20a4:	ldr	x2, [x20]
    20a8:	blr	x5
    20ac:	mov	w19, w0
    20b0:	cmp	w0, #0x7
    20b4:	b.eq	2140 <_Unwind_ForcedUnwind_Phase2+0xf8>  // b.none
    20b8:	cmp	w0, #0x8
    20bc:	b.ne	211c <_Unwind_ForcedUnwind_Phase2+0xd4>  // b.any
    20c0:	add	x23, x23, #0x1
    20c4:	mov	x1, x22
    20c8:	mov	x0, x21
    20cc:	bl	1eb0 <uw_update_context>
    20d0:	mov	x1, x22
    20d4:	mov	x0, x21
    20d8:	bl	ae0 <uw_frame_state_for>
    20dc:	cmp	w0, #0x0
    20e0:	mov	w19, w0
    20e4:	mov	x5, x24
    20e8:	mov	x4, x21
    20ec:	ccmp	w0, #0x5, #0x4, ne  // ne = any
    20f0:	b.ne	211c <_Unwind_ForcedUnwind_Phase2+0xd4>  // b.any
    20f4:	cmp	w0, #0x5
    20f8:	mov	x3, x20
    20fc:	mov	w1, #0xa                   	// #10
    2100:	mov	w0, #0x1                   	// #1
    2104:	ldr	x2, [x20]
    2108:	b.ne	2080 <_Unwind_ForcedUnwind_Phase2+0x38>  // b.any
    210c:	mov	w1, #0x1a                  	// #26
    2110:	mov	w0, #0x1                   	// #1
    2114:	blr	x25
    2118:	cbz	w0, 2140 <_Unwind_ForcedUnwind_Phase2+0xf8>
    211c:	mov	w19, #0x2                   	// #2
    2120:	mov	w0, w19
    2124:	ldp	x29, x30, [sp]
    2128:	ldp	x19, x20, [sp, #16]
    212c:	ldp	x21, x22, [sp, #32]
    2130:	ldp	x23, x24, [sp, #48]
    2134:	ldp	x25, x26, [sp, #64]
    2138:	add	sp, sp, #0x6d0
    213c:	ret
    2140:	str	x23, [x26]
    2144:	mov	w0, w19
    2148:	ldp	x29, x30, [sp]
    214c:	ldp	x19, x20, [sp, #16]
    2150:	ldp	x21, x22, [sp, #32]
    2154:	ldp	x23, x24, [sp, #48]
    2158:	ldp	x25, x26, [sp, #64]
    215c:	add	sp, sp, #0x6d0
    2160:	ret
    2164:	nop

0000000000002168 <_Unwind_GetGR>:
    2168:	cmp	w1, #0x61
    216c:	b.gt	21c4 <_Unwind_GetGR+0x5c>
    2170:	ldr	x4, [x0, #832]
    2174:	sxtw	x3, w1
    2178:	ldr	x2, [x0, x3, lsl #3]
    217c:	tbz	x4, #62, 218c <_Unwind_GetGR+0x24>
    2180:	add	x0, x0, x3
    2184:	ldrb	w0, [x0, #856]
    2188:	cbnz	w0, 21bc <_Unwind_GetGR+0x54>
    218c:	cmp	w1, #0x2e
    2190:	b.eq	21b0 <_Unwind_GetGR+0x48>  // b.none
    2194:	adrp	x0, 0 <read_encoded_value_with_base>
    2198:	add	x0, x0, #0x0
    219c:	ldrb	w0, [x0, w1, sxtw]
    21a0:	cmp	w0, #0x8
    21a4:	b.ne	21c4 <_Unwind_GetGR+0x5c>  // b.any
    21a8:	ldr	x0, [x2]
    21ac:	ret
    21b0:	cntd	x0
    21b4:	sxtw	x0, w0
    21b8:	ret
    21bc:	mov	x0, x2
    21c0:	ret
    21c4:	stp	x29, x30, [sp, #-16]!
    21c8:	mov	x29, sp
    21cc:	bl	0 <abort>

00000000000021d0 <_Unwind_GetCFA>:
    21d0:	ldr	x0, [x0, #784]
    21d4:	ret

00000000000021d8 <_Unwind_SetGR>:
    21d8:	cmp	w1, #0x61
    21dc:	b.gt	2220 <_Unwind_SetGR+0x48>
    21e0:	ldr	x5, [x0, #832]
    21e4:	adrp	x3, 0 <read_encoded_value_with_base>
    21e8:	add	x3, x3, #0x0
    21ec:	sxtw	x4, w1
    21f0:	ldrb	w1, [x3, w1, sxtw]
    21f4:	tbz	x5, #62, 2204 <_Unwind_SetGR+0x2c>
    21f8:	add	x3, x0, x4
    21fc:	ldrb	w3, [x3, #856]
    2200:	cbnz	w3, 2218 <_Unwind_SetGR+0x40>
    2204:	cmp	w1, #0x8
    2208:	ldr	x0, [x0, x4, lsl #3]
    220c:	b.ne	2220 <_Unwind_SetGR+0x48>  // b.any
    2210:	str	x2, [x0]
    2214:	ret
    2218:	str	x2, [x0, x4, lsl #3]
    221c:	ret
    2220:	stp	x29, x30, [sp, #-16]!
    2224:	mov	x29, sp
    2228:	bl	0 <abort>
    222c:	nop

0000000000002230 <_Unwind_GetIP>:
    2230:	ldr	x0, [x0, #792]
    2234:	ret

0000000000002238 <_Unwind_GetIPInfo>:
    2238:	ldr	x2, [x0, #832]
    223c:	ldr	x0, [x0, #792]
    2240:	lsr	x2, x2, #63
    2244:	str	w2, [x1]
    2248:	ret
    224c:	nop

0000000000002250 <_Unwind_SetIP>:
    2250:	str	x1, [x0, #792]
    2254:	ret

0000000000002258 <_Unwind_GetLanguageSpecificData>:
    2258:	ldr	x0, [x0, #800]
    225c:	ret

0000000000002260 <_Unwind_GetRegionStart>:
    2260:	ldr	x0, [x0, #824]
    2264:	ret

0000000000002268 <_Unwind_FindEnclosingFunction>:
    2268:	stp	x29, x30, [sp, #-48]!
    226c:	sub	x0, x0, #0x1
    2270:	mov	x29, sp
    2274:	add	x1, sp, #0x18
    2278:	bl	0 <_Unwind_Find_FDE>
    227c:	ldr	x1, [sp, #40]
    2280:	cmp	x0, #0x0
    2284:	ldp	x29, x30, [sp], #48
    2288:	csel	x0, x1, x0, ne  // ne = any
    228c:	ret

0000000000002290 <_Unwind_GetDataRelBase>:
    2290:	ldr	x0, [x0, #816]
    2294:	ret

0000000000002298 <_Unwind_GetTextRelBase>:
    2298:	ldr	x0, [x0, #808]
    229c:	ret

00000000000022a0 <__frame_state_for>:
    22a0:	sub	sp, sp, #0xa70
    22a4:	mov	x2, #0x3c0                 	// #960
    22a8:	add	x3, sp, #0x30
    22ac:	stp	x29, x30, [sp]
    22b0:	mov	x29, sp
    22b4:	stp	x19, x20, [sp, #16]
    22b8:	mov	x20, x1
    22bc:	mov	w1, #0x0                   	// #0
    22c0:	str	x21, [sp, #32]
    22c4:	mov	x21, x0
    22c8:	mov	x0, x3
    22cc:	bl	0 <memset>
    22d0:	mov	x2, #0x4000000000000000    	// #4611686018427387904
    22d4:	add	x19, sp, #0x3f0
    22d8:	add	x21, x21, #0x1
    22dc:	mov	x1, x19
    22e0:	str	x21, [sp, #840]
    22e4:	str	x2, [sp, #880]
    22e8:	bl	ae0 <uw_frame_state_for>
    22ec:	cbnz	w0, 2398 <__frame_state_for+0xf8>
    22f0:	ldr	w0, [sp, #2608]
    22f4:	cmp	w0, #0x2
    22f8:	b.eq	2398 <__frame_state_for+0xf8>  // b.none
    22fc:	sub	x4, x20, x20, lsl #3
    2300:	mov	x1, #0xffffffffffffe680    	// #-6528
    2304:	mov	x0, x19
    2308:	add	x5, x19, #0x620
    230c:	add	x4, x4, x1
    2310:	add	x2, x20, #0x334
    2314:	b	232c <__frame_state_for+0x8c>
    2318:	str	xzr, [x4, x2, lsl #3]
    231c:	add	x0, x0, #0x10
    2320:	add	x2, x2, #0x1
    2324:	cmp	x0, x5
    2328:	b.eq	235c <__frame_state_for+0xbc>  // b.none
    232c:	ldrb	w3, [x0, #8]
    2330:	strb	w3, [x2]
    2334:	cmp	w3, #0x1
    2338:	b.eq	2344 <__frame_state_for+0xa4>  // b.none
    233c:	cmp	w3, #0x2
    2340:	b.ne	2318 <__frame_state_for+0x78>  // b.any
    2344:	ldr	x3, [x0]
    2348:	str	x3, [x4, x2, lsl #3]
    234c:	add	x0, x0, #0x10
    2350:	add	x2, x2, #0x1
    2354:	cmp	x0, x5
    2358:	b.ne	232c <__frame_state_for+0x8c>  // b.any
    235c:	ldr	x1, [sp, #896]
    2360:	mov	x0, x20
    2364:	ldr	x2, [sp, #2584]
    2368:	stp	x2, x1, [x20, #16]
    236c:	ldr	x2, [sp, #2592]
    2370:	strh	w2, [x20, #816]
    2374:	ldr	x1, [sp, #2648]
    2378:	strh	w1, [x20, #818]
    237c:	ldr	x2, [sp, #2664]
    2380:	str	x2, [x20, #8]
    2384:	ldp	x29, x30, [sp]
    2388:	ldp	x19, x20, [sp, #16]
    238c:	ldr	x21, [sp, #32]
    2390:	add	sp, sp, #0xa70
    2394:	ret
    2398:	mov	x0, #0x0                   	// #0
    239c:	ldp	x29, x30, [sp]
    23a0:	ldp	x19, x20, [sp, #16]
    23a4:	ldr	x21, [sp, #32]
    23a8:	add	sp, sp, #0xa70
    23ac:	ret

00000000000023b0 <_Unwind_DebugHook>:
    23b0:	ret
    23b4:	nop

00000000000023b8 <_Unwind_RaiseException>:
    23b8:	sub	sp, sp, #0xec0
    23bc:	stp	x29, x30, [sp]
    23c0:	mov	x29, sp
    23c4:	stp	x21, x22, [sp, #64]
    23c8:	add	x21, sp, #0xc0
    23cc:	add	x22, sp, #0x840
    23d0:	stp	x0, x1, [sp, #16]
    23d4:	add	x1, sp, #0xec0
    23d8:	stp	x2, x3, [sp, #32]
    23dc:	mov	x2, x30
    23e0:	stp	x19, x20, [sp, #48]
    23e4:	mov	x20, x0
    23e8:	add	x19, sp, #0x480
    23ec:	mov	x0, x21
    23f0:	stp	x23, x24, [sp, #80]
    23f4:	stp	x25, x26, [sp, #96]
    23f8:	stp	x27, x28, [sp, #112]
    23fc:	stp	d8, d9, [sp, #128]
    2400:	stp	d10, d11, [sp, #144]
    2404:	stp	d12, d13, [sp, #160]
    2408:	stp	d14, d15, [sp, #176]
    240c:	bl	1c60 <uw_init_context_1>
    2410:	mov	x1, x21
    2414:	mov	x0, x19
    2418:	mov	x2, #0x3c0                 	// #960
    241c:	bl	0 <memcpy>
    2420:	b	2454 <_Unwind_RaiseException+0x9c>
    2424:	cbnz	w2, 24c0 <_Unwind_RaiseException+0x108>
    2428:	ldr	x5, [sp, #3728]
    242c:	cbz	x5, 2448 <_Unwind_RaiseException+0x90>
    2430:	ldr	x2, [x20]
    2434:	blr	x5
    2438:	cmp	w0, #0x6
    243c:	b.eq	24c8 <_Unwind_RaiseException+0x110>  // b.none
    2440:	cmp	w0, #0x8
    2444:	b.ne	24c0 <_Unwind_RaiseException+0x108>  // b.any
    2448:	mov	x1, x22
    244c:	mov	x0, x19
    2450:	bl	1eb0 <uw_update_context>
    2454:	mov	x1, x22
    2458:	mov	x0, x19
    245c:	bl	ae0 <uw_frame_state_for>
    2460:	mov	w2, w0
    2464:	mov	w1, #0x1                   	// #1
    2468:	mov	x4, x19
    246c:	mov	x3, x20
    2470:	mov	w0, w1
    2474:	cmp	w2, #0x5
    2478:	b.ne	2424 <_Unwind_RaiseException+0x6c>  // b.any
    247c:	mov	x4, #0x0                   	// #0
    2480:	mov	w0, w2
    2484:	ldp	x29, x30, [sp]
    2488:	ldp	x0, x1, [sp, #16]
    248c:	ldp	x2, x3, [sp, #32]
    2490:	ldp	x19, x20, [sp, #48]
    2494:	ldp	x21, x22, [sp, #64]
    2498:	ldp	x23, x24, [sp, #80]
    249c:	ldp	x25, x26, [sp, #96]
    24a0:	ldp	x27, x28, [sp, #112]
    24a4:	ldp	d8, d9, [sp, #128]
    24a8:	ldp	d10, d11, [sp, #144]
    24ac:	ldp	d12, d13, [sp, #160]
    24b0:	ldp	d14, d15, [sp, #176]
    24b4:	add	sp, sp, #0xec0
    24b8:	add	sp, sp, x4
    24bc:	ret
    24c0:	mov	w2, #0x3                   	// #3
    24c4:	b	247c <_Unwind_RaiseException+0xc4>
    24c8:	ldr	x4, [sp, #1936]
    24cc:	mov	x1, x21
    24d0:	ldr	x3, [sp, #1984]
    24d4:	mov	x2, #0x3c0                 	// #960
    24d8:	mov	x0, x19
    24dc:	sub	x3, x4, x3, lsr #63
    24e0:	stp	xzr, x3, [x20, #16]
    24e4:	bl	0 <memcpy>
    24e8:	mov	x2, x22
    24ec:	mov	x1, x19
    24f0:	mov	x0, x20
    24f4:	bl	1f68 <_Unwind_RaiseException_Phase2>
    24f8:	mov	w2, w0
    24fc:	cmp	w0, #0x7
    2500:	b.ne	247c <_Unwind_RaiseException+0xc4>  // b.any
    2504:	mov	x1, x19
    2508:	mov	x0, x21
    250c:	bl	1038 <uw_install_context_1>
    2510:	mov	x4, x0
    2514:	ldr	x2, [sp, #1024]
    2518:	ldr	x1, [sp, #1944]
    251c:	tbz	x2, #61, 2530 <_Unwind_RaiseException+0x178>
    2520:	mov	x17, x1
    2524:	ldr	x16, [sp, #976]
    2528:	pacia1716
    252c:	mov	x1, x17
    2530:	ldr	x0, [sp, #1936]
    2534:	bl	23b0 <_Unwind_DebugHook>
    2538:	str	x1, [x29, #8]
    253c:	b	2480 <_Unwind_RaiseException+0xc8>

0000000000002540 <_Unwind_ForcedUnwind>:
    2540:	sub	sp, sp, #0x850
    2544:	stp	x29, x30, [sp]
    2548:	mov	x29, sp
    254c:	stp	x19, x20, [sp, #48]
    2550:	mov	x19, x0
    2554:	mov	x20, x2
    2558:	stp	x21, x22, [sp, #64]
    255c:	add	x22, sp, #0xd0
    2560:	mov	x21, x1
    2564:	stp	x0, x1, [sp, #16]
    2568:	mov	x0, x22
    256c:	add	x1, sp, #0x850
    2570:	stp	x2, x3, [sp, #32]
    2574:	mov	x2, x30
    2578:	stp	x23, x24, [sp, #80]
    257c:	add	x23, sp, #0x490
    2580:	stp	x25, x26, [sp, #96]
    2584:	stp	x27, x28, [sp, #112]
    2588:	stp	d8, d9, [sp, #128]
    258c:	stp	d10, d11, [sp, #144]
    2590:	stp	d12, d13, [sp, #160]
    2594:	stp	d14, d15, [sp, #176]
    2598:	bl	1c60 <uw_init_context_1>
    259c:	mov	x1, x22
    25a0:	mov	x2, #0x3c0                 	// #960
    25a4:	mov	x0, x23
    25a8:	bl	0 <memcpy>
    25ac:	stp	x21, x20, [x19, #16]
    25b0:	mov	x0, x19
    25b4:	mov	x1, x23
    25b8:	add	x2, sp, #0xc8
    25bc:	bl	2048 <_Unwind_ForcedUnwind_Phase2>
    25c0:	cmp	w0, #0x7
    25c4:	mov	x4, #0x0                   	// #0
    25c8:	b.eq	2608 <_Unwind_ForcedUnwind+0xc8>  // b.none
    25cc:	ldp	x29, x30, [sp]
    25d0:	ldp	x0, x1, [sp, #16]
    25d4:	ldp	x2, x3, [sp, #32]
    25d8:	ldp	x19, x20, [sp, #48]
    25dc:	ldp	x21, x22, [sp, #64]
    25e0:	ldp	x23, x24, [sp, #80]
    25e4:	ldp	x25, x26, [sp, #96]
    25e8:	ldp	x27, x28, [sp, #112]
    25ec:	ldp	d8, d9, [sp, #128]
    25f0:	ldp	d10, d11, [sp, #144]
    25f4:	ldp	d12, d13, [sp, #160]
    25f8:	ldp	d14, d15, [sp, #176]
    25fc:	add	sp, sp, #0x850
    2600:	add	sp, sp, x4
    2604:	ret
    2608:	mov	x1, x23
    260c:	mov	x0, x22
    2610:	bl	1038 <uw_install_context_1>
    2614:	mov	x4, x0
    2618:	ldr	x2, [sp, #1040]
    261c:	ldr	x1, [sp, #1960]
    2620:	tbz	x2, #61, 2634 <_Unwind_ForcedUnwind+0xf4>
    2624:	mov	x17, x1
    2628:	ldr	x16, [sp, #992]
    262c:	pacia1716
    2630:	mov	x1, x17
    2634:	ldr	x0, [sp, #1952]
    2638:	bl	23b0 <_Unwind_DebugHook>
    263c:	str	x1, [x29, #8]
    2640:	b	25cc <_Unwind_ForcedUnwind+0x8c>
    2644:	nop

0000000000002648 <_Unwind_Resume>:
    2648:	sub	sp, sp, #0x850
    264c:	stp	x29, x30, [sp]
    2650:	mov	x29, sp
    2654:	stp	x19, x20, [sp, #48]
    2658:	mov	x19, x0
    265c:	add	x20, sp, #0xd0
    2660:	stp	x0, x1, [sp, #16]
    2664:	mov	x0, x20
    2668:	add	x1, sp, #0x850
    266c:	stp	x2, x3, [sp, #32]
    2670:	mov	x2, x30
    2674:	stp	x21, x22, [sp, #64]
    2678:	add	x21, sp, #0x490
    267c:	stp	x23, x24, [sp, #80]
    2680:	stp	x25, x26, [sp, #96]
    2684:	stp	x27, x28, [sp, #112]
    2688:	stp	d8, d9, [sp, #128]
    268c:	stp	d10, d11, [sp, #144]
    2690:	stp	d12, d13, [sp, #160]
    2694:	stp	d14, d15, [sp, #176]
    2698:	bl	1c60 <uw_init_context_1>
    269c:	mov	x1, x20
    26a0:	mov	x0, x21
    26a4:	mov	x2, #0x3c0                 	// #960
    26a8:	bl	0 <memcpy>
    26ac:	ldr	x0, [x19, #16]
    26b0:	cbnz	x0, 2740 <_Unwind_Resume+0xf8>
    26b4:	mov	x0, x19
    26b8:	add	x2, sp, #0xc8
    26bc:	mov	x1, x21
    26c0:	bl	1f68 <_Unwind_RaiseException_Phase2>
    26c4:	cmp	w0, #0x7
    26c8:	b.ne	2754 <_Unwind_Resume+0x10c>  // b.any
    26cc:	mov	x1, x21
    26d0:	mov	x0, x20
    26d4:	bl	1038 <uw_install_context_1>
    26d8:	mov	x4, x0
    26dc:	ldr	x2, [sp, #1040]
    26e0:	ldr	x1, [sp, #1960]
    26e4:	tbz	x2, #61, 26f8 <_Unwind_Resume+0xb0>
    26e8:	mov	x17, x1
    26ec:	ldr	x16, [sp, #992]
    26f0:	pacia1716
    26f4:	mov	x1, x17
    26f8:	ldr	x0, [sp, #1952]
    26fc:	bl	23b0 <_Unwind_DebugHook>
    2700:	str	x1, [x29, #8]
    2704:	ldp	x29, x30, [sp]
    2708:	ldp	x0, x1, [sp, #16]
    270c:	ldp	x2, x3, [sp, #32]
    2710:	ldp	x19, x20, [sp, #48]
    2714:	ldp	x21, x22, [sp, #64]
    2718:	ldp	x23, x24, [sp, #80]
    271c:	ldp	x25, x26, [sp, #96]
    2720:	ldp	x27, x28, [sp, #112]
    2724:	ldp	d8, d9, [sp, #128]
    2728:	ldp	d10, d11, [sp, #144]
    272c:	ldp	d12, d13, [sp, #160]
    2730:	ldp	d14, d15, [sp, #176]
    2734:	add	sp, sp, #0x850
    2738:	add	sp, sp, x4
    273c:	ret
    2740:	mov	x0, x19
    2744:	add	x2, sp, #0xc8
    2748:	mov	x1, x21
    274c:	bl	2048 <_Unwind_ForcedUnwind_Phase2>
    2750:	b	26c4 <_Unwind_Resume+0x7c>
    2754:	bl	0 <abort>

0000000000002758 <_Unwind_Resume_or_Rethrow>:
    2758:	sub	sp, sp, #0x850
    275c:	stp	x29, x30, [sp]
    2760:	mov	x29, sp
    2764:	stp	x0, x1, [sp, #16]
    2768:	ldr	x1, [x0, #16]
    276c:	stp	x2, x3, [sp, #32]
    2770:	stp	x19, x20, [sp, #48]
    2774:	mov	x19, x0
    2778:	stp	x21, x22, [sp, #64]
    277c:	stp	x23, x24, [sp, #80]
    2780:	stp	x25, x26, [sp, #96]
    2784:	stp	x27, x28, [sp, #112]
    2788:	stp	d8, d9, [sp, #128]
    278c:	stp	d10, d11, [sp, #144]
    2790:	stp	d12, d13, [sp, #160]
    2794:	stp	d14, d15, [sp, #176]
    2798:	cbnz	x1, 27e0 <_Unwind_Resume_or_Rethrow+0x88>
    279c:	bl	23b8 <_Unwind_RaiseException>
    27a0:	mov	x4, #0x0                   	// #0
    27a4:	ldp	x29, x30, [sp]
    27a8:	ldp	x0, x1, [sp, #16]
    27ac:	ldp	x2, x3, [sp, #32]
    27b0:	ldp	x19, x20, [sp, #48]
    27b4:	ldp	x21, x22, [sp, #64]
    27b8:	ldp	x23, x24, [sp, #80]
    27bc:	ldp	x25, x26, [sp, #96]
    27c0:	ldp	x27, x28, [sp, #112]
    27c4:	ldp	d8, d9, [sp, #128]
    27c8:	ldp	d10, d11, [sp, #144]
    27cc:	ldp	d12, d13, [sp, #160]
    27d0:	ldp	d14, d15, [sp, #176]
    27d4:	add	sp, sp, #0x850
    27d8:	add	sp, sp, x4
    27dc:	ret
    27e0:	add	x20, sp, #0xd0
    27e4:	mov	x2, x30
    27e8:	mov	x0, x20
    27ec:	add	x1, sp, #0x850
    27f0:	add	x21, sp, #0x490
    27f4:	bl	1c60 <uw_init_context_1>
    27f8:	mov	x1, x20
    27fc:	mov	x2, #0x3c0                 	// #960
    2800:	mov	x0, x21
    2804:	bl	0 <memcpy>
    2808:	mov	x0, x19
    280c:	mov	x1, x21
    2810:	add	x2, sp, #0xc8
    2814:	bl	2048 <_Unwind_ForcedUnwind_Phase2>
    2818:	cmp	w0, #0x7
    281c:	b.ne	285c <_Unwind_Resume_or_Rethrow+0x104>  // b.any
    2820:	mov	x1, x21
    2824:	mov	x0, x20
    2828:	bl	1038 <uw_install_context_1>
    282c:	mov	x4, x0
    2830:	ldr	x2, [sp, #1040]
    2834:	ldr	x1, [sp, #1960]
    2838:	tbz	x2, #61, 284c <_Unwind_Resume_or_Rethrow+0xf4>
    283c:	mov	x17, x1
    2840:	ldr	x16, [sp, #992]
    2844:	pacia1716
    2848:	mov	x1, x17
    284c:	ldr	x0, [sp, #1952]
    2850:	bl	23b0 <_Unwind_DebugHook>
    2854:	str	x1, [x29, #8]
    2858:	b	27a4 <_Unwind_Resume_or_Rethrow+0x4c>
    285c:	bl	0 <abort>

0000000000002860 <_Unwind_DeleteException>:
    2860:	ldr	x2, [x0, #8]
    2864:	mov	x1, x0
    2868:	cbz	x2, 2878 <_Unwind_DeleteException+0x18>
    286c:	mov	x16, x2
    2870:	mov	w0, #0x1                   	// #1
    2874:	br	x16
    2878:	ret
    287c:	nop

0000000000002880 <_Unwind_Backtrace>:
    2880:	sub	sp, sp, #0xae0
    2884:	mov	x2, x30
    2888:	stp	x29, x30, [sp]
    288c:	mov	x29, sp
    2890:	stp	x19, x20, [sp, #16]
    2894:	add	x20, sp, #0xa0
    2898:	stp	x21, x22, [sp, #32]
    289c:	mov	x22, x1
    28a0:	add	x21, sp, #0x460
    28a4:	add	x1, sp, #0xae0
    28a8:	stp	x23, x24, [sp, #48]
    28ac:	mov	x23, x0
    28b0:	mov	x0, x20
    28b4:	stp	x25, x26, [sp, #64]
    28b8:	stp	x27, x28, [sp, #80]
    28bc:	stp	d8, d9, [sp, #96]
    28c0:	stp	d10, d11, [sp, #112]
    28c4:	stp	d12, d13, [sp, #128]
    28c8:	stp	d14, d15, [sp, #144]
    28cc:	bl	1c60 <uw_init_context_1>
    28d0:	b	28f0 <_Unwind_Backtrace+0x70>
    28d4:	blr	x23
    28d8:	cbnz	w0, 2914 <_Unwind_Backtrace+0x94>
    28dc:	cmp	w19, #0x5
    28e0:	b.eq	2918 <_Unwind_Backtrace+0x98>  // b.none
    28e4:	mov	x1, x21
    28e8:	mov	x0, x20
    28ec:	bl	1eb0 <uw_update_context>
    28f0:	mov	x1, x21
    28f4:	mov	x0, x20
    28f8:	bl	ae0 <uw_frame_state_for>
    28fc:	mov	w19, w0
    2900:	cmp	w0, #0x0
    2904:	mov	x1, x22
    2908:	mov	x0, x20
    290c:	ccmp	w19, #0x5, #0x4, ne  // ne = any
    2910:	b.eq	28d4 <_Unwind_Backtrace+0x54>  // b.none
    2914:	mov	w19, #0x3                   	// #3
    2918:	mov	w0, w19
    291c:	ldp	x29, x30, [sp]
    2920:	ldp	x19, x20, [sp, #16]
    2924:	ldp	x21, x22, [sp, #32]
    2928:	ldp	x23, x24, [sp, #48]
    292c:	ldp	x25, x26, [sp, #64]
    2930:	ldp	x27, x28, [sp, #80]
    2934:	ldp	d8, d9, [sp, #96]
    2938:	ldp	d10, d11, [sp, #112]
    293c:	ldp	d12, d13, [sp, #128]
    2940:	ldp	d14, d15, [sp, #144]
    2944:	add	sp, sp, #0xae0
    2948:	ret

unwind-dw2-fde-dip.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fde_unencoded_compare>:
       0:	ldr	x3, [x1, #8]
       4:	mov	w4, #0x1                   	// #1
       8:	ldr	x1, [x2, #8]
       c:	cmp	x3, x1
      10:	csetm	w0, cc  // cc = lo, ul, last
      14:	csel	w0, w0, w4, ls  // ls = plast
      18:	ret
      1c:	nop

0000000000000020 <frame_downheap>:
      20:	stp	x29, x30, [sp, #-112]!
      24:	mov	x29, sp
      28:	stp	x21, x22, [sp, #32]
      2c:	lsl	w21, w3, #1
      30:	stp	x25, x26, [sp, #64]
      34:	add	w25, w21, #0x1
      38:	cmp	w25, w4
      3c:	b.ge	114 <frame_downheap+0xf4>  // b.tcont
      40:	mov	w22, w3
      44:	stp	x19, x20, [sp, #16]
      48:	mov	x20, x2
      4c:	stp	x23, x24, [sp, #48]
      50:	mov	w23, w4
      54:	mov	x24, x1
      58:	stp	x27, x28, [sp, #80]
      5c:	mov	x27, x0
      60:	b	b8 <frame_downheap+0x98>
      64:	ldr	x2, [x20, x26]
      68:	blr	x24
      6c:	ldr	x3, [sp, #104]
      70:	tbnz	w0, #31, 124 <frame_downheap+0x104>
      74:	ldr	x1, [x20, x28, lsl #3]
      78:	mov	w21, w25
      7c:	sxtw	x26, w22
      80:	mov	x2, x1
      84:	mov	w22, w21
      88:	mov	x0, x27
      8c:	lsl	w21, w21, #1
      90:	ldr	x1, [x20, x26, lsl #3]
      94:	blr	x24
      98:	tbz	w0, #31, 108 <frame_downheap+0xe8>
      9c:	ldr	x1, [x19]
      a0:	add	w25, w21, #0x1
      a4:	ldr	x0, [x20, x26, lsl #3]
      a8:	str	x1, [x20, x26, lsl #3]
      ac:	str	x0, [x19]
      b0:	cmp	w23, w25
      b4:	b.le	108 <frame_downheap+0xe8>
      b8:	sbfiz	x19, x25, #3, #32
      bc:	sxtw	x28, w25
      c0:	add	x26, x19, #0x8
      c4:	add	w21, w25, #0x1
      c8:	add	x3, x20, x26
      cc:	str	x3, [sp, #104]
      d0:	cmp	w21, w23
      d4:	add	x19, x20, x19
      d8:	mov	x0, x27
      dc:	ldr	x1, [x20, x28, lsl #3]
      e0:	b.lt	64 <frame_downheap+0x44>  // b.tstop
      e4:	sxtw	x26, w22
      e8:	mov	x2, x1
      ec:	mov	w21, w25
      f0:	mov	x0, x27
      f4:	mov	w22, w21
      f8:	ldr	x1, [x20, x26, lsl #3]
      fc:	lsl	w21, w21, #1
     100:	blr	x24
     104:	tbnz	w0, #31, 9c <frame_downheap+0x7c>
     108:	ldp	x19, x20, [sp, #16]
     10c:	ldp	x23, x24, [sp, #48]
     110:	ldp	x27, x28, [sp, #80]
     114:	ldp	x21, x22, [sp, #32]
     118:	ldp	x25, x26, [sp, #64]
     11c:	ldp	x29, x30, [sp], #112
     120:	ret
     124:	mov	x19, x3
     128:	ldr	x1, [x20, x26]
     12c:	b	7c <frame_downheap+0x5c>

0000000000000130 <frame_heapsort>:
     130:	stp	x29, x30, [sp, #-80]!
     134:	mov	x29, sp
     138:	stp	x19, x20, [sp, #16]
     13c:	ldr	x19, [x2, #8]
     140:	stp	x21, x22, [sp, #32]
     144:	mov	x22, x2
     148:	stp	x23, x24, [sp, #48]
     14c:	add	x21, x2, #0x10
     150:	lsr	x20, x19, #1
     154:	mov	x23, x0
     158:	mov	x24, x1
     15c:	subs	w20, w20, #0x1
     160:	b.mi	198 <frame_heapsort+0x68>  // b.first
     164:	str	x25, [sp, #64]
     168:	mov	w25, w19
     16c:	nop
     170:	mov	w3, w20
     174:	mov	w4, w25
     178:	mov	x2, x21
     17c:	sub	w20, w20, #0x1
     180:	mov	x1, x24
     184:	mov	x0, x23
     188:	bl	20 <frame_downheap>
     18c:	cmn	w20, #0x1
     190:	b.ne	170 <frame_heapsort+0x40>  // b.any
     194:	ldr	x25, [sp, #64]
     198:	sub	w19, w19, #0x1
     19c:	cmp	w19, #0x0
     1a0:	sxtw	x19, w19
     1a4:	b.le	1dc <frame_heapsort+0xac>
     1a8:	ldr	x1, [x21, x19, lsl #3]
     1ac:	mov	w4, w19
     1b0:	ldr	x0, [x22, #16]
     1b4:	str	x1, [x22, #16]
     1b8:	str	x0, [x21, x19, lsl #3]
     1bc:	mov	x2, x21
     1c0:	sub	x19, x19, #0x1
     1c4:	mov	x1, x24
     1c8:	mov	x0, x23
     1cc:	mov	w3, #0x0                   	// #0
     1d0:	bl	20 <frame_downheap>
     1d4:	cmp	w19, #0x0
     1d8:	b.gt	1a8 <frame_heapsort+0x78>
     1dc:	ldp	x19, x20, [sp, #16]
     1e0:	ldp	x21, x22, [sp, #32]
     1e4:	ldp	x23, x24, [sp, #48]
     1e8:	ldp	x29, x30, [sp], #80
     1ec:	ret

00000000000001f0 <size_of_encoded_value>:
     1f0:	and	w0, w0, #0xff
     1f4:	cmp	w0, #0xff
     1f8:	b.eq	248 <size_of_encoded_value+0x58>  // b.none
     1fc:	and	w1, w0, #0x7
     200:	cmp	w1, #0x2
     204:	b.eq	240 <size_of_encoded_value+0x50>  // b.none
     208:	b.ls	234 <size_of_encoded_value+0x44>  // b.plast
     20c:	cmp	w1, #0x3
     210:	mov	w0, #0x4                   	// #4
     214:	b.ne	21c <size_of_encoded_value+0x2c>  // b.any
     218:	ret
     21c:	cmp	w1, w0
     220:	mov	w0, #0x8                   	// #8
     224:	b.eq	218 <size_of_encoded_value+0x28>  // b.none
     228:	stp	x29, x30, [sp, #-16]!
     22c:	mov	x29, sp
     230:	bl	0 <abort>
     234:	mov	w0, #0x8                   	// #8
     238:	cbnz	w1, 228 <size_of_encoded_value+0x38>
     23c:	ret
     240:	mov	w0, w1
     244:	ret
     248:	mov	w0, #0x0                   	// #0
     24c:	ret

0000000000000250 <read_encoded_value_with_base>:
     250:	and	w5, w0, #0xff
     254:	cmp	w5, #0x50
     258:	b.eq	370 <read_encoded_value_with_base+0x120>  // b.none
     25c:	and	w4, w5, #0xf
     260:	cmp	w4, #0x4
     264:	b.eq	280 <read_encoded_value_with_base+0x30>  // b.none
     268:	b.ls	294 <read_encoded_value_with_base+0x44>  // b.plast
     26c:	cmp	w4, #0xb
     270:	b.eq	394 <read_encoded_value_with_base+0x144>  // b.none
     274:	b.ls	2f0 <read_encoded_value_with_base+0xa0>  // b.plast
     278:	cmp	w4, #0xc
     27c:	b.ne	3a4 <read_encoded_value_with_base+0x154>  // b.any
     280:	mov	x0, x2
     284:	ldr	x4, [x0], #8
     288:	cbnz	x4, 350 <read_encoded_value_with_base+0x100>
     28c:	str	x4, [x3]
     290:	ret
     294:	cmp	w4, #0x2
     298:	b.eq	384 <read_encoded_value_with_base+0x134>  // b.none
     29c:	b.ls	2b8 <read_encoded_value_with_base+0x68>  // b.plast
     2a0:	cmp	w4, #0x3
     2a4:	b.ne	3a4 <read_encoded_value_with_base+0x154>  // b.any
     2a8:	mov	x0, x2
     2ac:	ldr	w4, [x0], #4
     2b0:	cbz	x4, 28c <read_encoded_value_with_base+0x3c>
     2b4:	b	350 <read_encoded_value_with_base+0x100>
     2b8:	cbz	w4, 280 <read_encoded_value_with_base+0x30>
     2bc:	cmp	w4, #0x1
     2c0:	b.ne	3a4 <read_encoded_value_with_base+0x154>  // b.any
     2c4:	mov	x0, x2
     2c8:	mov	x4, #0x0                   	// #0
     2cc:	mov	w7, #0x0                   	// #0
     2d0:	ldrb	w8, [x0], #1
     2d4:	and	x6, x8, #0x7f
     2d8:	lsl	x6, x6, x7
     2dc:	add	w7, w7, #0x7
     2e0:	orr	x4, x4, x6
     2e4:	tbnz	w8, #7, 2d0 <read_encoded_value_with_base+0x80>
     2e8:	cbz	x4, 28c <read_encoded_value_with_base+0x3c>
     2ec:	b	350 <read_encoded_value_with_base+0x100>
     2f0:	cmp	w4, #0x9
     2f4:	b.eq	310 <read_encoded_value_with_base+0xc0>  // b.none
     2f8:	cmp	w4, #0xa
     2fc:	b.ne	3a4 <read_encoded_value_with_base+0x154>  // b.any
     300:	mov	x0, x2
     304:	ldrsh	x4, [x0], #2
     308:	cbz	x4, 28c <read_encoded_value_with_base+0x3c>
     30c:	b	350 <read_encoded_value_with_base+0x100>
     310:	mov	x0, x2
     314:	mov	x4, #0x0                   	// #0
     318:	mov	w7, #0x0                   	// #0
     31c:	ldrb	w8, [x0], #1
     320:	and	x6, x8, #0x7f
     324:	lsl	x6, x6, x7
     328:	add	w7, w7, #0x7
     32c:	orr	x4, x4, x6
     330:	tbnz	w8, #7, 31c <read_encoded_value_with_base+0xcc>
     334:	cmp	w7, #0x3f
     338:	b.hi	288 <read_encoded_value_with_base+0x38>  // b.pmore
     33c:	tbz	w8, #6, 288 <read_encoded_value_with_base+0x38>
     340:	mov	x6, #0xffffffffffffffff    	// #-1
     344:	lsl	x7, x6, x7
     348:	orr	x4, x4, x7
     34c:	nop
     350:	and	w6, w5, #0x70
     354:	cmp	w6, #0x10
     358:	csel	x1, x2, x1, eq  // eq = none
     35c:	add	x4, x4, x1
     360:	tbz	w5, #7, 28c <read_encoded_value_with_base+0x3c>
     364:	ldr	x4, [x4]
     368:	str	x4, [x3]
     36c:	ret
     370:	add	x0, x2, #0x7
     374:	and	x0, x0, #0xfffffffffffffff8
     378:	ldr	x4, [x0], #8
     37c:	str	x4, [x3]
     380:	ret
     384:	mov	x0, x2
     388:	ldrh	w4, [x0], #2
     38c:	cbz	x4, 28c <read_encoded_value_with_base+0x3c>
     390:	b	350 <read_encoded_value_with_base+0x100>
     394:	mov	x0, x2
     398:	ldrsw	x4, [x0], #4
     39c:	cbz	x4, 28c <read_encoded_value_with_base+0x3c>
     3a0:	b	350 <read_encoded_value_with_base+0x100>
     3a4:	stp	x29, x30, [sp, #-16]!
     3a8:	mov	x29, sp
     3ac:	bl	0 <abort>

00000000000003b0 <get_cie_encoding>:
     3b0:	stp	x29, x30, [sp, #-48]!
     3b4:	mov	x29, sp
     3b8:	stp	x19, x20, [sp, #16]
     3bc:	mov	x20, x0
     3c0:	add	x19, x0, #0x9
     3c4:	mov	x0, x19
     3c8:	bl	0 <strlen>
     3cc:	ldrb	w3, [x20, #8]
     3d0:	add	x0, x0, #0x1
     3d4:	add	x2, x19, x0
     3d8:	cmp	w3, #0x3
     3dc:	b.hi	4a8 <get_cie_encoding+0xf8>  // b.pmore
     3e0:	ldrb	w0, [x20, #9]
     3e4:	cmp	w0, #0x7a
     3e8:	b.eq	3fc <get_cie_encoding+0x4c>  // b.none
     3ec:	mov	w0, #0x0                   	// #0
     3f0:	ldp	x19, x20, [sp, #16]
     3f4:	ldp	x29, x30, [sp], #48
     3f8:	ret
     3fc:	ldrsb	w1, [x2], #1
     400:	tbnz	w1, #31, 3fc <get_cie_encoding+0x4c>
     404:	nop
     408:	mov	x0, x2
     40c:	ldrsb	w1, [x2], #1
     410:	tbnz	w1, #31, 408 <get_cie_encoding+0x58>
     414:	cmp	w3, #0x1
     418:	b.eq	4a0 <get_cie_encoding+0xf0>  // b.none
     41c:	nop
     420:	ldrsb	w0, [x2], #1
     424:	tbnz	w0, #31, 420 <get_cie_encoding+0x70>
     428:	add	x19, x20, #0xa
     42c:	nop
     430:	ldrsb	w1, [x2], #1
     434:	tbnz	w1, #31, 430 <get_cie_encoding+0x80>
     438:	ldrb	w0, [x20, #10]
     43c:	add	x20, sp, #0x28
     440:	cmp	w0, #0x52
     444:	b.ne	464 <get_cie_encoding+0xb4>  // b.any
     448:	b	490 <get_cie_encoding+0xe0>
     44c:	add	x2, x2, #0x1
     450:	cmp	w0, #0x4c
     454:	b.ne	3ec <get_cie_encoding+0x3c>  // b.any
     458:	ldrb	w0, [x19, #1]!
     45c:	cmp	w0, #0x52
     460:	b.eq	490 <get_cie_encoding+0xe0>  // b.none
     464:	cmp	w0, #0x50
     468:	b.ne	44c <get_cie_encoding+0x9c>  // b.any
     46c:	ldrb	w0, [x2], #1
     470:	mov	x3, x20
     474:	mov	x1, #0x0                   	// #0
     478:	and	w0, w0, #0x7f
     47c:	bl	250 <read_encoded_value_with_base>
     480:	mov	x2, x0
     484:	ldrb	w0, [x19, #1]!
     488:	cmp	w0, #0x52
     48c:	b.ne	464 <get_cie_encoding+0xb4>  // b.any
     490:	ldrb	w0, [x2]
     494:	ldp	x19, x20, [sp, #16]
     498:	ldp	x29, x30, [sp], #48
     49c:	ret
     4a0:	add	x2, x0, #0x2
     4a4:	b	428 <get_cie_encoding+0x78>
     4a8:	ldrb	w1, [x19, x0]
     4ac:	mov	w0, #0xff                  	// #255
     4b0:	cmp	w1, #0x8
     4b4:	b.ne	3f0 <get_cie_encoding+0x40>  // b.any
     4b8:	ldrb	w1, [x2, #1]
     4bc:	cbnz	w1, 3f0 <get_cie_encoding+0x40>
     4c0:	add	x2, x2, #0x2
     4c4:	b	3e0 <get_cie_encoding+0x30>

00000000000004c8 <base_from_cb_data.isra.0>:
     4c8:	and	w0, w0, #0xff
     4cc:	cmp	w0, #0xff
     4d0:	b.eq	508 <base_from_cb_data.isra.0+0x40>  // b.none
     4d4:	and	w3, w0, #0x70
     4d8:	cmp	w3, #0x20
     4dc:	b.eq	520 <base_from_cb_data.isra.0+0x58>  // b.none
     4e0:	b.ls	4f4 <base_from_cb_data.isra.0+0x2c>  // b.plast
     4e4:	cmp	w3, #0x30
     4e8:	b.ne	510 <base_from_cb_data.isra.0+0x48>  // b.any
     4ec:	ldr	x0, [x2]
     4f0:	ret
     4f4:	tst	w0, #0x60
     4f8:	b.eq	508 <base_from_cb_data.isra.0+0x40>  // b.none
     4fc:	stp	x29, x30, [sp, #-16]!
     500:	mov	x29, sp
     504:	bl	0 <abort>
     508:	mov	x0, #0x0                   	// #0
     50c:	ret
     510:	cmp	w3, #0x50
     514:	mov	x0, #0x0                   	// #0
     518:	b.ne	4fc <base_from_cb_data.isra.0+0x34>  // b.any
     51c:	ret
     520:	ldr	x0, [x1]
     524:	ret

0000000000000528 <fde_single_encoding_compare>:
     528:	stp	x29, x30, [sp, #-64]!
     52c:	mov	x29, sp
     530:	stp	x21, x22, [sp, #32]
     534:	mov	x22, x2
     538:	ldrh	w21, [x0, #32]
     53c:	add	x2, x0, #0x10
     540:	stp	x19, x20, [sp, #16]
     544:	mov	x19, x0
     548:	ubfx	x21, x21, #3, #8
     54c:	mov	x20, x1
     550:	add	x1, x0, #0x8
     554:	mov	w0, w21
     558:	bl	4c8 <base_from_cb_data.isra.0>
     55c:	add	x2, x20, #0x8
     560:	mov	x20, x0
     564:	mov	x1, x20
     568:	add	x3, sp, #0x30
     56c:	mov	w0, w21
     570:	bl	250 <read_encoded_value_with_base>
     574:	ldrh	w0, [x19, #32]
     578:	add	x2, x22, #0x8
     57c:	mov	x1, x20
     580:	add	x3, sp, #0x38
     584:	ubfx	x0, x0, #3, #8
     588:	bl	250 <read_encoded_value_with_base>
     58c:	ldp	x2, x1, [sp, #48]
     590:	mov	w3, #0x1                   	// #1
     594:	ldp	x19, x20, [sp, #16]
     598:	ldp	x21, x22, [sp, #32]
     59c:	cmp	x2, x1
     5a0:	csetm	w0, cc  // cc = lo, ul, last
     5a4:	csel	w0, w0, w3, ls  // ls = plast
     5a8:	ldp	x29, x30, [sp], #64
     5ac:	ret

00000000000005b0 <linear_search_fdes>:
     5b0:	stp	x29, x30, [sp, #-128]!
     5b4:	mov	x29, sp
     5b8:	stp	x21, x22, [sp, #32]
     5bc:	add	x22, x0, #0x8
     5c0:	stp	x23, x24, [sp, #48]
     5c4:	add	x23, x0, #0x10
     5c8:	stp	x25, x26, [sp, #64]
     5cc:	mov	x26, x0
     5d0:	ldrh	w0, [x0, #32]
     5d4:	stp	x19, x20, [sp, #16]
     5d8:	mov	x19, x1
     5dc:	mov	x20, x2
     5e0:	ubfx	x24, x0, #3, #8
     5e4:	mov	x1, x22
     5e8:	mov	x2, x23
     5ec:	mov	x0, x24
     5f0:	bl	4c8 <base_from_cb_data.isra.0>
     5f4:	ldr	w1, [x19]
     5f8:	cbz	w1, 68c <linear_search_fdes+0xdc>
     5fc:	stp	x27, x28, [sp, #80]
     600:	add	x27, sp, #0x70
     604:	mov	x25, x0
     608:	mov	x21, #0x0                   	// #0
     60c:	add	x0, sp, #0x78
     610:	str	x0, [sp, #104]
     614:	nop
     618:	ldr	w1, [x19, #4]
     61c:	cbz	w1, 674 <linear_search_fdes+0xc4>
     620:	ldrb	w0, [x26, #32]
     624:	tbz	w0, #2, 658 <linear_search_fdes+0xa8>
     628:	add	x28, x19, #0x4
     62c:	sub	x28, x28, w1, sxtw
     630:	cmp	x28, x21
     634:	b.eq	658 <linear_search_fdes+0xa8>  // b.none
     638:	mov	x0, x28
     63c:	bl	3b0 <get_cie_encoding>
     640:	mov	x2, x23
     644:	mov	w24, w0
     648:	mov	x1, x22
     64c:	mov	x21, x28
     650:	bl	4c8 <base_from_cb_data.isra.0>
     654:	mov	x25, x0
     658:	cbnz	w24, 6a8 <linear_search_fdes+0xf8>
     65c:	ldp	x1, x0, [x19, #8]
     660:	stp	x1, x0, [sp, #112]
     664:	cbz	x1, 674 <linear_search_fdes+0xc4>
     668:	sub	x1, x20, x1
     66c:	cmp	x1, x0
     670:	b.cc	710 <linear_search_fdes+0x160>  // b.lo, b.ul, b.last
     674:	ldr	w1, [x19]
     678:	add	x1, x1, #0x4
     67c:	add	x19, x19, x1
     680:	ldr	w1, [x19]
     684:	cbnz	w1, 618 <linear_search_fdes+0x68>
     688:	ldp	x27, x28, [sp, #80]
     68c:	mov	x0, #0x0                   	// #0
     690:	ldp	x19, x20, [sp, #16]
     694:	ldp	x21, x22, [sp, #32]
     698:	ldp	x23, x24, [sp, #48]
     69c:	ldp	x25, x26, [sp, #64]
     6a0:	ldp	x29, x30, [sp], #128
     6a4:	ret
     6a8:	and	w28, w24, #0xff
     6ac:	mov	x3, x27
     6b0:	add	x2, x19, #0x8
     6b4:	mov	x1, x25
     6b8:	mov	w0, w28
     6bc:	bl	250 <read_encoded_value_with_base>
     6c0:	ldr	x3, [sp, #104]
     6c4:	mov	x2, x0
     6c8:	mov	x1, #0x0                   	// #0
     6cc:	and	w0, w28, #0xf
     6d0:	bl	250 <read_encoded_value_with_base>
     6d4:	mov	w0, w28
     6d8:	bl	1f0 <size_of_encoded_value>
     6dc:	lsl	w2, w0, #3
     6e0:	cmp	w0, #0x8
     6e4:	mov	x0, #0x1                   	// #1
     6e8:	ldr	x1, [sp, #112]
     6ec:	lsl	x2, x0, x2
     6f0:	sub	x2, x2, #0x1
     6f4:	csinv	x2, x2, xzr, cc  // cc = lo, ul, last
     6f8:	tst	x1, x2
     6fc:	b.eq	674 <linear_search_fdes+0xc4>  // b.none
     700:	ldr	x0, [sp, #120]
     704:	sub	x1, x20, x1
     708:	cmp	x1, x0
     70c:	b.cs	674 <linear_search_fdes+0xc4>  // b.hs, b.nlast
     710:	mov	x0, x19
     714:	ldp	x19, x20, [sp, #16]
     718:	ldp	x21, x22, [sp, #32]
     71c:	ldp	x23, x24, [sp, #48]
     720:	ldp	x25, x26, [sp, #64]
     724:	ldp	x27, x28, [sp, #80]
     728:	ldp	x29, x30, [sp], #128
     72c:	ret

0000000000000730 <fde_mixed_encoding_compare>:
     730:	stp	x29, x30, [sp, #-80]!
     734:	add	x3, x1, #0x4
     738:	mov	x29, sp
     73c:	stp	x21, x22, [sp, #32]
     740:	mov	x21, x1
     744:	ldrsw	x1, [x1, #4]
     748:	stp	x19, x20, [sp, #16]
     74c:	mov	x20, x2
     750:	add	x19, x0, #0x10
     754:	str	x23, [sp, #48]
     758:	add	x23, x0, #0x8
     75c:	sub	x0, x3, x1
     760:	bl	3b0 <get_cie_encoding>
     764:	and	w22, w0, #0xff
     768:	mov	x2, x19
     76c:	mov	x1, x23
     770:	mov	w0, w22
     774:	bl	4c8 <base_from_cb_data.isra.0>
     778:	mov	x1, x0
     77c:	add	x3, sp, #0x40
     780:	add	x2, x21, #0x8
     784:	mov	w0, w22
     788:	bl	250 <read_encoded_value_with_base>
     78c:	add	x1, x20, #0x4
     790:	ldrsw	x0, [x20, #4]
     794:	sub	x0, x1, x0
     798:	bl	3b0 <get_cie_encoding>
     79c:	mov	x2, x19
     7a0:	and	w19, w0, #0xff
     7a4:	mov	x1, x23
     7a8:	mov	w0, w19
     7ac:	bl	4c8 <base_from_cb_data.isra.0>
     7b0:	mov	x1, x0
     7b4:	add	x2, x20, #0x8
     7b8:	add	x3, sp, #0x48
     7bc:	mov	w0, w19
     7c0:	bl	250 <read_encoded_value_with_base>
     7c4:	ldp	x2, x1, [sp, #64]
     7c8:	mov	w3, #0x1                   	// #1
     7cc:	ldp	x19, x20, [sp, #16]
     7d0:	ldp	x21, x22, [sp, #32]
     7d4:	cmp	x2, x1
     7d8:	csetm	w0, cc  // cc = lo, ul, last
     7dc:	csel	w0, w0, w3, ls  // ls = plast
     7e0:	ldr	x23, [sp, #48]
     7e4:	ldp	x29, x30, [sp], #80
     7e8:	ret
     7ec:	nop

00000000000007f0 <classify_object_over_fdes>:
     7f0:	stp	x29, x30, [sp, #-112]!
     7f4:	mov	x29, sp
     7f8:	stp	x21, x22, [sp, #32]
     7fc:	mov	x21, x0
     800:	ldr	w0, [x1]
     804:	cbz	w0, 968 <classify_object_over_fdes+0x178>
     808:	stp	x19, x20, [sp, #16]
     80c:	mov	x19, x1
     810:	mov	w20, #0x0                   	// #0
     814:	stp	x25, x26, [sp, #64]
     818:	add	x25, sp, #0x68
     81c:	add	x26, x21, #0x8
     820:	stp	x27, x28, [sp, #80]
     824:	add	x27, x21, #0x10
     828:	mov	x22, #0x0                   	// #0
     82c:	mov	x4, #0x0                   	// #0
     830:	stp	x23, x24, [sp, #48]
     834:	mov	x23, #0x0                   	// #0
     838:	ldr	w2, [x19, #4]
     83c:	cbz	w2, 904 <classify_object_over_fdes+0x114>
     840:	add	x28, x19, #0x4
     844:	and	w24, w20, #0xff
     848:	sub	x28, x28, w2, sxtw
     84c:	cmp	x28, x4
     850:	b.eq	8a8 <classify_object_over_fdes+0xb8>  // b.none
     854:	mov	x0, x28
     858:	bl	3b0 <get_cie_encoding>
     85c:	mov	w20, w0
     860:	cmp	w0, #0xff
     864:	b.eq	944 <classify_object_over_fdes+0x154>  // b.none
     868:	and	w24, w0, #0xff
     86c:	mov	x2, x27
     870:	mov	w0, w24
     874:	mov	x1, x26
     878:	bl	4c8 <base_from_cb_data.isra.0>
     87c:	mov	x23, x0
     880:	ldrh	w2, [x21, #32]
     884:	and	w0, w2, #0x7f8
     888:	cmp	w0, #0x7f8
     88c:	b.eq	938 <classify_object_over_fdes+0x148>  // b.none
     890:	ubfx	x2, x2, #3, #8
     894:	cmp	w2, w20
     898:	b.eq	8a8 <classify_object_over_fdes+0xb8>  // b.none
     89c:	ldrb	w0, [x21, #32]
     8a0:	orr	w0, w0, #0x4
     8a4:	strb	w0, [x21, #32]
     8a8:	mov	x3, x25
     8ac:	add	x2, x19, #0x8
     8b0:	mov	x1, x23
     8b4:	mov	w0, w24
     8b8:	bl	250 <read_encoded_value_with_base>
     8bc:	mov	w0, w24
     8c0:	bl	1f0 <size_of_encoded_value>
     8c4:	lsl	w2, w0, #3
     8c8:	cmp	w0, #0x8
     8cc:	mov	x0, #0x1                   	// #1
     8d0:	ldr	x3, [sp, #104]
     8d4:	lsl	x2, x0, x2
     8d8:	sub	x2, x2, #0x1
     8dc:	mov	x4, x28
     8e0:	csinv	x2, x2, xzr, cc  // cc = lo, ul, last
     8e4:	tst	x3, x2
     8e8:	b.eq	904 <classify_object_over_fdes+0x114>  // b.none
     8ec:	ldr	x0, [x21]
     8f0:	add	x22, x22, #0x1
     8f4:	cmp	x0, x3
     8f8:	b.ls	900 <classify_object_over_fdes+0x110>  // b.plast
     8fc:	str	x3, [x21]
     900:	mov	x4, x28
     904:	ldr	w2, [x19]
     908:	add	x2, x2, #0x4
     90c:	add	x19, x19, x2
     910:	ldr	w0, [x19]
     914:	cbnz	w0, 838 <classify_object_over_fdes+0x48>
     918:	ldp	x19, x20, [sp, #16]
     91c:	ldp	x23, x24, [sp, #48]
     920:	ldp	x25, x26, [sp, #64]
     924:	ldp	x27, x28, [sp, #80]
     928:	mov	x0, x22
     92c:	ldp	x21, x22, [sp, #32]
     930:	ldp	x29, x30, [sp], #112
     934:	ret
     938:	bfi	w2, w24, #3, #8
     93c:	strh	w2, [x21, #32]
     940:	b	8a8 <classify_object_over_fdes+0xb8>
     944:	mov	x22, #0xffffffffffffffff    	// #-1
     948:	mov	x0, x22
     94c:	ldp	x19, x20, [sp, #16]
     950:	ldp	x21, x22, [sp, #32]
     954:	ldp	x23, x24, [sp, #48]
     958:	ldp	x25, x26, [sp, #64]
     95c:	ldp	x27, x28, [sp, #80]
     960:	ldp	x29, x30, [sp], #112
     964:	ret
     968:	mov	x22, #0x0                   	// #0
     96c:	b	928 <classify_object_over_fdes+0x138>

0000000000000970 <add_fdes>:
     970:	stp	x29, x30, [sp, #-112]!
     974:	mov	x29, sp
     978:	stp	x21, x22, [sp, #32]
     97c:	add	x21, x0, #0x8
     980:	add	x22, x0, #0x10
     984:	stp	x27, x28, [sp, #80]
     988:	mov	x28, x0
     98c:	ldrh	w0, [x0, #32]
     990:	stp	x19, x20, [sp, #16]
     994:	mov	x19, x2
     998:	mov	x20, x1
     99c:	stp	x25, x26, [sp, #64]
     9a0:	ubfx	x26, x0, #3, #8
     9a4:	mov	x2, x22
     9a8:	mov	x1, x21
     9ac:	mov	x0, x26
     9b0:	bl	4c8 <base_from_cb_data.isra.0>
     9b4:	ldr	w2, [x19]
     9b8:	cbz	w2, a50 <add_fdes+0xe0>
     9bc:	add	x25, sp, #0x68
     9c0:	stp	x23, x24, [sp, #48]
     9c4:	mov	x24, x0
     9c8:	mov	x23, #0x0                   	// #0
     9cc:	nop
     9d0:	ldr	w2, [x19, #4]
     9d4:	cbz	w2, a38 <add_fdes+0xc8>
     9d8:	ldrb	w0, [x28, #32]
     9dc:	tbz	w0, #2, a10 <add_fdes+0xa0>
     9e0:	add	x27, x19, #0x4
     9e4:	sub	x27, x27, w2, sxtw
     9e8:	cmp	x27, x23
     9ec:	b.eq	a10 <add_fdes+0xa0>  // b.none
     9f0:	mov	x0, x27
     9f4:	bl	3b0 <get_cie_encoding>
     9f8:	mov	x2, x22
     9fc:	mov	w26, w0
     a00:	mov	x1, x21
     a04:	mov	x23, x27
     a08:	bl	4c8 <base_from_cb_data.isra.0>
     a0c:	mov	x24, x0
     a10:	cbnz	w26, a68 <add_fdes+0xf8>
     a14:	ldr	x0, [x19, #8]
     a18:	cbz	x0, a38 <add_fdes+0xc8>
     a1c:	ldr	x2, [x20]
     a20:	cbz	x2, a38 <add_fdes+0xc8>
     a24:	ldr	x3, [x2, #8]
     a28:	add	x0, x3, #0x2
     a2c:	add	x3, x3, #0x1
     a30:	str	x3, [x2, #8]
     a34:	str	x19, [x2, x0, lsl #3]
     a38:	ldr	w2, [x19]
     a3c:	add	x2, x2, #0x4
     a40:	add	x19, x19, x2
     a44:	ldr	w2, [x19]
     a48:	cbnz	w2, 9d0 <add_fdes+0x60>
     a4c:	ldp	x23, x24, [sp, #48]
     a50:	ldp	x19, x20, [sp, #16]
     a54:	ldp	x21, x22, [sp, #32]
     a58:	ldp	x25, x26, [sp, #64]
     a5c:	ldp	x27, x28, [sp, #80]
     a60:	ldp	x29, x30, [sp], #112
     a64:	ret
     a68:	mov	x3, x25
     a6c:	add	x2, x19, #0x8
     a70:	mov	x1, x24
     a74:	and	w27, w26, #0xff
     a78:	mov	w0, w27
     a7c:	bl	250 <read_encoded_value_with_base>
     a80:	mov	w0, w27
     a84:	bl	1f0 <size_of_encoded_value>
     a88:	lsl	w2, w0, #3
     a8c:	cmp	w0, #0x8
     a90:	mov	x0, #0x1                   	// #1
     a94:	ldr	x3, [sp, #104]
     a98:	lsl	x2, x0, x2
     a9c:	sub	x2, x2, #0x1
     aa0:	csinv	x2, x2, xzr, cc  // cc = lo, ul, last
     aa4:	tst	x2, x3
     aa8:	b.ne	a1c <add_fdes+0xac>  // b.any
     aac:	b	a38 <add_fdes+0xc8>

0000000000000ab0 <_Unwind_IteratePhdrCallback>:
     ab0:	stp	x29, x30, [sp, #-128]!
     ab4:	cmp	x1, #0x2f
     ab8:	mov	x29, sp
     abc:	stp	x19, x20, [sp, #16]
     ac0:	mov	x19, x2
     ac4:	ldr	w2, [x2, #40]
     ac8:	ldr	x13, [x0]
     acc:	ccmp	w2, #0x0, #0x4, hi  // hi = pmore
     ad0:	ldr	x3, [x0, #16]
     ad4:	b.ne	c14 <_Unwind_IteratePhdrCallback+0x164>  // b.any
     ad8:	cmp	x1, #0x19
     adc:	b.ls	bec <_Unwind_IteratePhdrCallback+0x13c>  // b.plast
     ae0:	mov	x10, #0x0                   	// #0
     ae4:	mov	x15, #0x0                   	// #0
     ae8:	ldrh	w4, [x0, #24]
     aec:	cbz	w4, c04 <_Unwind_IteratePhdrCallback+0x154>
     af0:	mov	w0, #0x38                  	// #56
     af4:	mov	w7, #0xe550                	// #58704
     af8:	mov	x11, #0x0                   	// #0
     afc:	mov	x12, #0x0                   	// #0
     b00:	umaddl	x4, w4, w0, x3
     b04:	mov	x8, #0x0                   	// #0
     b08:	mov	x6, #0x0                   	// #0
     b0c:	mov	x9, #0x0                   	// #0
     b10:	movk	w7, #0x6474, lsl #16
     b14:	mov	x14, #0x1                   	// #1
     b18:	b	b38 <_Unwind_IteratePhdrCallback+0x88>
     b1c:	cmp	w0, w7
     b20:	b.eq	bfc <_Unwind_IteratePhdrCallback+0x14c>  // b.none
     b24:	cmp	w0, #0x2
     b28:	csel	x6, x6, x3, ne  // ne = any
     b2c:	add	x3, x3, #0x38
     b30:	cmp	x4, x3
     b34:	b.eq	b80 <_Unwind_IteratePhdrCallback+0xd0>  // b.none
     b38:	ldr	w0, [x3]
     b3c:	cmp	w0, #0x1
     b40:	b.ne	b1c <_Unwind_IteratePhdrCallback+0x6c>  // b.any
     b44:	ldr	x0, [x3, #16]
     b48:	ldr	x5, [x19]
     b4c:	add	x0, x13, x0
     b50:	cmp	x5, x0
     b54:	b.cc	b2c <_Unwind_IteratePhdrCallback+0x7c>  // b.lo, b.ul, b.last
     b58:	ldr	x2, [x3, #40]
     b5c:	add	x3, x3, #0x38
     b60:	add	x2, x0, x2
     b64:	cmp	x5, x2
     b68:	csel	x11, x11, x2, cs  // cs = hs, nlast
     b6c:	csel	x12, x12, x0, cs  // cs = hs, nlast
     b70:	csel	x8, x8, x14, cs  // cs = hs, nlast
     b74:	cmp	x4, x3
     b78:	b.ne	b38 <_Unwind_IteratePhdrCallback+0x88>  // b.any
     b7c:	nop
     b80:	cbz	x8, c04 <_Unwind_IteratePhdrCallback+0x154>
     b84:	cmp	x1, #0x2f
     b88:	b.ls	bc4 <_Unwind_IteratePhdrCallback+0x114>  // b.plast
     b8c:	adrp	x1, 0 <fde_unencoded_compare>
     b90:	add	x1, x1, #0x0
     b94:	cmp	x10, #0x0
     b98:	ccmp	x15, #0x0, #0x4, ne  // ne = any
     b9c:	ldr	x0, [x1, #8]
     ba0:	b.eq	bb8 <_Unwind_IteratePhdrCallback+0x108>  // b.none
     ba4:	ldr	x2, [x10, #40]
     ba8:	str	x2, [x15, #40]
     bac:	str	x0, [x10, #40]
     bb0:	mov	x0, x10
     bb4:	str	x10, [x1, #8]
     bb8:	stp	x12, x11, [x0]
     bbc:	stp	x13, x9, [x0, #16]
     bc0:	str	x6, [x0, #32]
     bc4:	cbz	x9, c04 <_Unwind_IteratePhdrCallback+0x154>
     bc8:	ldr	x0, [x9, #16]
     bcc:	add	x20, x13, x0
     bd0:	ldrb	w0, [x13, x0]
     bd4:	cmp	w0, #0x1
     bd8:	b.eq	c74 <_Unwind_IteratePhdrCallback+0x1c4>  // b.none
     bdc:	mov	w0, #0x1                   	// #1
     be0:	ldp	x19, x20, [sp, #16]
     be4:	ldp	x29, x30, [sp], #128
     be8:	ret
     bec:	mov	w0, #0xffffffff            	// #-1
     bf0:	ldp	x19, x20, [sp, #16]
     bf4:	ldp	x29, x30, [sp], #128
     bf8:	ret
     bfc:	mov	x9, x3
     c00:	b	b2c <_Unwind_IteratePhdrCallback+0x7c>
     c04:	mov	w0, #0x0                   	// #0
     c08:	ldp	x19, x20, [sp, #16]
     c0c:	ldp	x29, x30, [sp], #128
     c10:	ret
     c14:	ldp	x6, x7, [x0, #32]
     c18:	adrp	x4, 0 <fde_unencoded_compare>
     c1c:	adrp	x5, 0 <fde_unencoded_compare>
     c20:	ldr	x2, [x4]
     c24:	cmp	x6, x2
     c28:	b.eq	d48 <_Unwind_IteratePhdrCallback+0x298>  // b.none
     c2c:	add	x2, x5, #0x0
     c30:	str	x6, [x4]
     c34:	add	x4, x2, #0x40
     c38:	add	x2, x2, #0x1c0
     c3c:	str	x7, [x5]
     c40:	stp	xzr, xzr, [x4, #-48]
     c44:	stur	x4, [x4, #-8]
     c48:	add	x4, x4, #0x30
     c4c:	cmp	x2, x4
     c50:	b.ne	c40 <_Unwind_IteratePhdrCallback+0x190>  // b.any
     c54:	add	x5, x5, #0x0
     c58:	mov	x10, #0x0                   	// #0
     c5c:	add	x2, x5, #0x10
     c60:	mov	x15, #0x0                   	// #0
     c64:	str	xzr, [x5, #392]
     c68:	str	x2, [x5, #8]
     c6c:	str	wzr, [x19, #40]
     c70:	b	ae8 <_Unwind_IteratePhdrCallback+0x38>
     c74:	stp	x21, x22, [sp, #32]
     c78:	add	x22, x19, #0x8
     c7c:	mov	x1, x22
     c80:	stp	x23, x24, [sp, #48]
     c84:	add	x23, x19, #0x10
     c88:	mov	x2, x23
     c8c:	ldrb	w21, [x20, #1]
     c90:	mov	w0, w21
     c94:	bl	4c8 <base_from_cb_data.isra.0>
     c98:	add	x3, sp, #0x40
     c9c:	mov	x1, x0
     ca0:	add	x2, x20, #0x4
     ca4:	mov	w0, w21
     ca8:	bl	250 <read_encoded_value_with_base>
     cac:	ldrb	w24, [x20, #2]
     cb0:	mov	x21, x0
     cb4:	cmp	w24, #0xff
     cb8:	b.eq	cc8 <_Unwind_IteratePhdrCallback+0x218>  // b.none
     cbc:	ldrb	w0, [x20, #3]
     cc0:	cmp	w0, #0x3b
     cc4:	b.eq	da8 <_Unwind_IteratePhdrCallback+0x2f8>  // b.none
     cc8:	ldr	x2, [x19]
     ccc:	mov	x3, #0x4                   	// #4
     cd0:	ldp	x5, x4, [x19, #8]
     cd4:	add	x0, sp, #0x50
     cd8:	ldr	x1, [sp, #64]
     cdc:	stp	xzr, x5, [sp, #80]
     ce0:	stp	x4, x1, [sp, #96]
     ce4:	str	x3, [sp, #112]
     ce8:	bl	5b0 <linear_search_fdes>
     cec:	str	x0, [x19, #32]
     cf0:	cbz	x0, ec0 <_Unwind_IteratePhdrCallback+0x410>
     cf4:	ldrsw	x1, [x0, #4]
     cf8:	add	x0, x0, #0x4
     cfc:	sub	x0, x0, x1
     d00:	bl	3b0 <get_cie_encoding>
     d04:	and	w20, w0, #0xff
     d08:	mov	x2, x23
     d0c:	mov	x1, x22
     d10:	mov	w0, w20
     d14:	bl	4c8 <base_from_cb_data.isra.0>
     d18:	ldr	x2, [x19, #32]
     d1c:	mov	x1, x0
     d20:	add	x3, sp, #0x48
     d24:	mov	w0, w20
     d28:	add	x2, x2, #0x8
     d2c:	bl	250 <read_encoded_value_with_base>
     d30:	ldr	x1, [sp, #72]
     d34:	mov	w0, #0x1                   	// #1
     d38:	ldp	x21, x22, [sp, #32]
     d3c:	ldp	x23, x24, [sp, #48]
     d40:	str	x1, [x19, #24]
     d44:	b	bf0 <_Unwind_IteratePhdrCallback+0x140>
     d48:	ldr	x2, [x5]
     d4c:	add	x8, x5, #0x0
     d50:	cmp	x2, x7
     d54:	b.ne	c2c <_Unwind_IteratePhdrCallback+0x17c>  // b.any
     d58:	ldr	x7, [x8, #8]
     d5c:	cbz	x7, ae0 <_Unwind_IteratePhdrCallback+0x30>
     d60:	mov	x10, x7
     d64:	mov	x15, #0x0                   	// #0
     d68:	ldr	x6, [x19]
     d6c:	ldp	x2, x4, [x10]
     d70:	cmp	x6, x2
     d74:	b.cc	d80 <_Unwind_IteratePhdrCallback+0x2d0>  // b.lo, b.ul, b.last
     d78:	cmp	x6, x4
     d7c:	b.cc	ed8 <_Unwind_IteratePhdrCallback+0x428>  // b.lo, b.ul, b.last
     d80:	orr	x2, x2, x4
     d84:	cbz	x2, ae8 <_Unwind_IteratePhdrCallback+0x38>
     d88:	ldr	x2, [x10, #40]
     d8c:	cbz	x2, ae8 <_Unwind_IteratePhdrCallback+0x38>
     d90:	mov	x15, x10
     d94:	mov	x10, x2
     d98:	ldp	x2, x4, [x10]
     d9c:	cmp	x6, x2
     da0:	b.cc	d80 <_Unwind_IteratePhdrCallback+0x2d0>  // b.lo, b.ul, b.last
     da4:	b	d78 <_Unwind_IteratePhdrCallback+0x2c8>
     da8:	mov	x2, x23
     dac:	mov	x1, x22
     db0:	mov	w0, w24
     db4:	bl	4c8 <base_from_cb_data.isra.0>
     db8:	add	x3, sp, #0x48
     dbc:	mov	x1, x0
     dc0:	mov	x2, x21
     dc4:	mov	w0, w24
     dc8:	bl	250 <read_encoded_value_with_base>
     dcc:	ldr	x3, [sp, #72]
     dd0:	cbz	x3, eb0 <_Unwind_IteratePhdrCallback+0x400>
     dd4:	ands	x5, x0, #0x3
     dd8:	ldr	x2, [x19]
     ddc:	b.ne	ccc <_Unwind_IteratePhdrCallback+0x21c>  // b.any
     de0:	ldrsw	x1, [x0]
     de4:	add	x1, x1, x20
     de8:	cmp	x1, x2
     dec:	b.hi	eb0 <_Unwind_IteratePhdrCallback+0x400>  // b.pmore
     df0:	sub	x3, x3, #0x1
     df4:	lsl	x1, x3, #3
     df8:	add	x21, x0, x1
     dfc:	ldrsw	x1, [x0, x1]
     e00:	add	x1, x1, x20
     e04:	cmp	x1, x2
     e08:	b.ls	e4c <_Unwind_IteratePhdrCallback+0x39c>  // b.plast
     e0c:	cmp	x5, x3
     e10:	b.cs	efc <_Unwind_IteratePhdrCallback+0x44c>  // b.hs, b.nlast
     e14:	add	x1, x5, x3
     e18:	lsr	x1, x1, #1
     e1c:	lsl	x4, x1, #3
     e20:	add	x21, x0, x4
     e24:	ldrsw	x4, [x0, x4]
     e28:	add	x4, x4, x20
     e2c:	cmp	x4, x2
     e30:	b.hi	ed0 <_Unwind_IteratePhdrCallback+0x420>  // b.pmore
     e34:	add	x5, x1, #0x1
     e38:	lsl	x1, x5, #3
     e3c:	ldrsw	x1, [x0, x1]
     e40:	add	x1, x1, x20
     e44:	cmp	x1, x2
     e48:	b.ls	e0c <_Unwind_IteratePhdrCallback+0x35c>  // b.plast
     e4c:	ldrsw	x22, [x21, #4]
     e50:	add	x22, x22, x20
     e54:	add	x1, x22, #0x4
     e58:	ldrsw	x0, [x22, #4]
     e5c:	sub	x0, x1, x0
     e60:	bl	3b0 <get_cie_encoding>
     e64:	and	w23, w0, #0xff
     e68:	mov	w0, w23
     e6c:	bl	1f0 <size_of_encoded_value>
     e70:	mov	w2, w0
     e74:	mov	x1, #0x0                   	// #0
     e78:	add	x2, x2, #0x8
     e7c:	add	x3, sp, #0x50
     e80:	add	x2, x22, x2
     e84:	and	w0, w23, #0xf
     e88:	bl	250 <read_encoded_value_with_base>
     e8c:	ldrsw	x0, [x21]
     e90:	ldr	x1, [sp, #80]
     e94:	add	x20, x0, x20
     e98:	ldr	x2, [x19]
     e9c:	add	x0, x20, x1
     ea0:	cmp	x2, x0
     ea4:	b.cs	eac <_Unwind_IteratePhdrCallback+0x3fc>  // b.hs, b.nlast
     ea8:	str	x22, [x19, #32]
     eac:	str	x20, [x19, #24]
     eb0:	mov	w0, #0x1                   	// #1
     eb4:	ldp	x21, x22, [sp, #32]
     eb8:	ldp	x23, x24, [sp, #48]
     ebc:	b	bf0 <_Unwind_IteratePhdrCallback+0x140>
     ec0:	mov	w0, #0x1                   	// #1
     ec4:	ldp	x21, x22, [sp, #32]
     ec8:	ldp	x23, x24, [sp, #48]
     ecc:	b	be0 <_Unwind_IteratePhdrCallback+0x130>
     ed0:	mov	x3, x1
     ed4:	b	e0c <_Unwind_IteratePhdrCallback+0x35c>
     ed8:	cmp	x10, x7
     edc:	ldp	x13, x9, [x10, #16]
     ee0:	b.eq	bc4 <_Unwind_IteratePhdrCallback+0x114>  // b.none
     ee4:	add	x5, x5, #0x0
     ee8:	ldr	x0, [x10, #40]
     eec:	str	x0, [x15, #40]
     ef0:	str	x10, [x5, #8]
     ef4:	str	x7, [x10, #40]
     ef8:	b	bc4 <_Unwind_IteratePhdrCallback+0x114>
     efc:	bl	0 <abort>

0000000000000f00 <search_object>:
     f00:	stp	x29, x30, [sp, #-160]!
     f04:	mov	x29, sp
     f08:	stp	x19, x20, [sp, #16]
     f0c:	mov	x19, x1
     f10:	ldrb	w1, [x0, #32]
     f14:	stp	x23, x24, [sp, #48]
     f18:	mov	x24, x0
     f1c:	tbz	w1, #0, f88 <search_object+0x88>
     f20:	stp	x27, x28, [sp, #80]
     f24:	ldr	x27, [x24, #24]
     f28:	tbnz	w1, #2, ffc <search_object+0xfc>
     f2c:	ldrh	w0, [x24, #32]
     f30:	tst	w0, #0x7f8
     f34:	b.ne	115c <search_object+0x25c>  // b.any
     f38:	mov	x2, #0x0                   	// #0
     f3c:	ldr	x1, [x27, #8]
     f40:	b	f64 <search_object+0x64>
     f44:	add	x0, x1, x2
     f48:	lsr	x0, x0, #1
     f4c:	add	x3, x0, #0x2
     f50:	ldr	x20, [x27, x3, lsl #3]
     f54:	ldr	x3, [x20, #8]
     f58:	cmp	x19, x3
     f5c:	b.cs	fe4 <search_object+0xe4>  // b.hs, b.nlast
     f60:	mov	x1, x0
     f64:	cmp	x1, x2
     f68:	b.hi	f44 <search_object+0x44>  // b.pmore
     f6c:	ldp	x27, x28, [sp, #80]
     f70:	mov	x20, #0x0                   	// #0
     f74:	mov	x0, x20
     f78:	ldp	x19, x20, [sp, #16]
     f7c:	ldp	x23, x24, [sp, #48]
     f80:	ldp	x29, x30, [sp], #160
     f84:	ret
     f88:	stp	x25, x26, [sp, #64]
     f8c:	ldr	w25, [x0, #32]
     f90:	stp	x21, x22, [sp, #32]
     f94:	tst	x25, #0xfffff800
     f98:	lsr	w25, w25, #11
     f9c:	b.ne	1204 <search_object+0x304>  // b.any
     fa0:	ldr	x20, [x0, #24]
     fa4:	tbz	w1, #1, 10b4 <search_object+0x1b4>
     fa8:	ldr	x1, [x20]
     fac:	cbnz	x1, fc0 <search_object+0xc0>
     fb0:	b	10e0 <search_object+0x1e0>
     fb4:	ldr	x1, [x20, #8]!
     fb8:	add	x25, x25, x0
     fbc:	cbz	x1, 10c8 <search_object+0x1c8>
     fc0:	mov	x0, x24
     fc4:	bl	7f0 <classify_object_over_fdes>
     fc8:	cmn	x0, #0x1
     fcc:	b.ne	fb4 <search_object+0xb4>  // b.any
     fd0:	adrp	x0, 0 <fde_unencoded_compare>
     fd4:	mov	x1, #0x7f8                 	// #2040
     fd8:	add	x0, x0, #0x0
     fdc:	stp	x0, x1, [x24, #24]
     fe0:	b	10e0 <search_object+0x1e0>
     fe4:	ldr	x2, [x20, #16]
     fe8:	add	x3, x3, x2
     fec:	cmp	x19, x3
     ff0:	b.cc	14d8 <search_object+0x5d8>  // b.lo, b.ul, b.last
     ff4:	add	x2, x0, #0x1
     ff8:	b	f64 <search_object+0x64>
     ffc:	ldr	x28, [x27, #8]
    1000:	cbz	x28, f6c <search_object+0x6c>
    1004:	add	x0, x24, #0x8
    1008:	add	x23, sp, #0x88
    100c:	stp	x21, x22, [sp, #32]
    1010:	add	x22, sp, #0x90
    1014:	stp	x25, x26, [sp, #64]
    1018:	add	x26, x24, #0x10
    101c:	mov	x25, #0x0                   	// #0
    1020:	str	x0, [sp, #96]
    1024:	b	1044 <search_object+0x144>
    1028:	ldr	x1, [sp, #144]
    102c:	add	x0, x0, x1
    1030:	cmp	x0, x19
    1034:	b.hi	14d0 <search_object+0x5d0>  // b.pmore
    1038:	add	x25, x24, #0x1
    103c:	cmp	x25, x28
    1040:	b.cs	114c <search_object+0x24c>  // b.hs, b.nlast
    1044:	add	x24, x25, x28
    1048:	lsr	x24, x24, #1
    104c:	add	x0, x24, #0x2
    1050:	ldr	x20, [x27, x0, lsl #3]
    1054:	add	x1, x20, #0x4
    1058:	ldrsw	x0, [x20, #4]
    105c:	sub	x0, x1, x0
    1060:	bl	3b0 <get_cie_encoding>
    1064:	ldr	x1, [sp, #96]
    1068:	and	w21, w0, #0xff
    106c:	mov	x2, x26
    1070:	mov	w0, w21
    1074:	bl	4c8 <base_from_cb_data.isra.0>
    1078:	mov	x1, x0
    107c:	mov	x3, x23
    1080:	add	x2, x20, #0x8
    1084:	mov	w0, w21
    1088:	bl	250 <read_encoded_value_with_base>
    108c:	mov	x3, x22
    1090:	mov	x2, x0
    1094:	mov	x1, #0x0                   	// #0
    1098:	and	w0, w21, #0xf
    109c:	bl	250 <read_encoded_value_with_base>
    10a0:	ldr	x0, [sp, #136]
    10a4:	cmp	x0, x19
    10a8:	b.ls	1028 <search_object+0x128>  // b.plast
    10ac:	mov	x28, x24
    10b0:	b	103c <search_object+0x13c>
    10b4:	mov	x1, x20
    10b8:	bl	7f0 <classify_object_over_fdes>
    10bc:	mov	x25, x0
    10c0:	cmn	x0, #0x1
    10c4:	b.eq	fd0 <search_object+0xd0>  // b.none
    10c8:	ldr	w0, [x24, #32]
    10cc:	tst	x25, #0xffffffffffe00000
    10d0:	b.eq	1514 <search_object+0x614>  // b.none
    10d4:	and	w0, w0, #0x7ff
    10d8:	str	w0, [x24, #32]
    10dc:	cbnz	x25, 1204 <search_object+0x304>
    10e0:	ldr	x0, [x24]
    10e4:	cmp	x0, x19
    10e8:	b.hi	1140 <search_object+0x240>  // b.pmore
    10ec:	ldrb	w1, [x24, #32]
    10f0:	ldr	x21, [x24, #24]
    10f4:	tbnz	w1, #0, 1558 <search_object+0x658>
    10f8:	tbz	w1, #1, 14b0 <search_object+0x5b0>
    10fc:	ldr	x1, [x21]
    1100:	cbnz	x1, 1110 <search_object+0x210>
    1104:	b	1140 <search_object+0x240>
    1108:	ldr	x1, [x21, #8]!
    110c:	cbz	x1, 1140 <search_object+0x240>
    1110:	mov	x2, x19
    1114:	mov	x0, x24
    1118:	bl	5b0 <linear_search_fdes>
    111c:	mov	x20, x0
    1120:	cbz	x0, 1108 <search_object+0x208>
    1124:	mov	x0, x20
    1128:	ldp	x19, x20, [sp, #16]
    112c:	ldp	x21, x22, [sp, #32]
    1130:	ldp	x23, x24, [sp, #48]
    1134:	ldp	x25, x26, [sp, #64]
    1138:	ldp	x29, x30, [sp], #160
    113c:	ret
    1140:	ldp	x21, x22, [sp, #32]
    1144:	ldp	x25, x26, [sp, #64]
    1148:	b	f70 <search_object+0x70>
    114c:	ldp	x21, x22, [sp, #32]
    1150:	ldp	x25, x26, [sp, #64]
    1154:	ldp	x27, x28, [sp, #80]
    1158:	b	f70 <search_object+0x70>
    115c:	stp	x25, x26, [sp, #64]
    1160:	ubfx	x25, x0, #3, #8
    1164:	add	x2, x24, #0x10
    1168:	add	x1, x24, #0x8
    116c:	mov	x0, x25
    1170:	bl	4c8 <base_from_cb_data.isra.0>
    1174:	mov	x24, x0
    1178:	ldr	x28, [x27, #8]
    117c:	cbz	x28, 1150 <search_object+0x250>
    1180:	and	w0, w25, #0xf
    1184:	add	x23, sp, #0x88
    1188:	mov	x26, #0x0                   	// #0
    118c:	stp	x21, x22, [sp, #32]
    1190:	add	x22, sp, #0x90
    1194:	str	w0, [sp, #96]
    1198:	b	11b8 <search_object+0x2b8>
    119c:	ldr	x1, [sp, #144]
    11a0:	add	x0, x0, x1
    11a4:	cmp	x0, x19
    11a8:	b.hi	14d0 <search_object+0x5d0>  // b.pmore
    11ac:	add	x26, x21, #0x1
    11b0:	cmp	x26, x28
    11b4:	b.cs	114c <search_object+0x24c>  // b.hs, b.nlast
    11b8:	add	x21, x28, x26
    11bc:	mov	x3, x23
    11c0:	mov	x1, x24
    11c4:	mov	w0, w25
    11c8:	lsr	x21, x21, #1
    11cc:	add	x2, x21, #0x2
    11d0:	ldr	x20, [x27, x2, lsl #3]
    11d4:	add	x2, x20, #0x8
    11d8:	bl	250 <read_encoded_value_with_base>
    11dc:	mov	x2, x0
    11e0:	ldrb	w0, [sp, #96]
    11e4:	mov	x3, x22
    11e8:	mov	x1, #0x0                   	// #0
    11ec:	bl	250 <read_encoded_value_with_base>
    11f0:	ldr	x0, [sp, #136]
    11f4:	cmp	x0, x19
    11f8:	b.ls	119c <search_object+0x29c>  // b.plast
    11fc:	mov	x28, x21
    1200:	b	11b0 <search_object+0x2b0>
    1204:	add	x20, x25, #0x2
    1208:	lsl	x20, x20, #3
    120c:	mov	x0, x20
    1210:	bl	0 <malloc>
    1214:	str	x0, [sp, #144]
    1218:	mov	x1, x0
    121c:	cbz	x0, 10e0 <search_object+0x1e0>
    1220:	str	xzr, [x1, #8]
    1224:	mov	x0, x20
    1228:	bl	0 <malloc>
    122c:	str	x0, [sp, #152]
    1230:	cbz	x0, 1238 <search_object+0x338>
    1234:	str	xzr, [x0, #8]
    1238:	ldrb	w0, [x24, #32]
    123c:	ldr	x20, [x24, #24]
    1240:	tbz	w0, #1, 14ec <search_object+0x5ec>
    1244:	ldr	x2, [x20]
    1248:	cbz	x2, 1550 <search_object+0x650>
    124c:	add	x22, sp, #0x90
    1250:	mov	x1, x22
    1254:	mov	x0, x24
    1258:	bl	970 <add_fdes>
    125c:	ldr	x2, [x20, #8]!
    1260:	cbnz	x2, 1250 <search_object+0x350>
    1264:	ldr	x0, [sp, #144]
    1268:	str	x0, [sp, #96]
    126c:	str	x0, [sp, #120]
    1270:	cbz	x0, 1280 <search_object+0x380>
    1274:	ldr	x0, [x0, #8]
    1278:	cmp	x0, x25
    127c:	b.ne	1550 <search_object+0x650>  // b.any
    1280:	ldrb	w0, [x24, #32]
    1284:	tbnz	w0, #2, 14e0 <search_object+0x5e0>
    1288:	ldrh	w1, [x24, #32]
    128c:	adrp	x0, 0 <fde_unencoded_compare>
    1290:	adrp	x20, 0 <fde_unencoded_compare>
    1294:	add	x0, x0, #0x0
    1298:	tst	w1, #0x7f8
    129c:	add	x20, x20, #0x0
    12a0:	csel	x20, x20, x0, eq  // eq = none
    12a4:	ldr	x22, [sp, #152]
    12a8:	cbz	x22, 1500 <search_object+0x600>
    12ac:	ldr	x1, [sp, #96]
    12b0:	stp	x27, x28, [sp, #80]
    12b4:	ldr	x0, [x1, #8]
    12b8:	str	x0, [sp, #104]
    12bc:	cbz	x0, 1540 <search_object+0x640>
    12c0:	adrp	x3, 0 <fde_unencoded_compare>
    12c4:	add	x3, x3, #0x0
    12c8:	add	x0, x0, #0x1
    12cc:	add	x28, x1, #0x10
    12d0:	add	x27, x3, #0x190
    12d4:	mov	x21, x28
    12d8:	mov	x23, x27
    12dc:	lsl	x0, x0, #3
    12e0:	mov	x26, #0x10                  	// #16
    12e4:	str	x0, [sp, #112]
    12e8:	ldr	x0, [sp, #112]
    12ec:	str	x27, [x22, x26]
    12f0:	cmp	x0, x26
    12f4:	b.eq	1350 <search_object+0x450>  // b.none
    12f8:	cmp	x21, x23
    12fc:	mov	x27, x21
    1300:	b.ne	1320 <search_object+0x420>  // b.any
    1304:	b	1340 <search_object+0x440>
    1308:	sub	x3, x27, x28
    130c:	add	x0, x22, x3
    1310:	ldr	x27, [x0, #16]
    1314:	str	xzr, [x0, #16]
    1318:	cmp	x27, x23
    131c:	b.eq	1340 <search_object+0x440>  // b.none
    1320:	ldr	x2, [x27]
    1324:	mov	x0, x24
    1328:	ldr	x1, [x21, #8]
    132c:	blr	x20
    1330:	tbnz	w0, #31, 1308 <search_object+0x408>
    1334:	add	x21, x21, #0x8
    1338:	add	x26, x26, #0x8
    133c:	b	12e8 <search_object+0x3e8>
    1340:	mov	x27, x23
    1344:	add	x21, x21, #0x8
    1348:	add	x26, x26, #0x8
    134c:	b	12e8 <search_object+0x3e8>
    1350:	add	x6, x22, #0x10
    1354:	mov	x5, #0x0                   	// #0
    1358:	mov	x3, #0x0                   	// #0
    135c:	mov	x0, #0x0                   	// #0
    1360:	b	1384 <search_object+0x484>
    1364:	ldr	x4, [sp, #96]
    1368:	add	x1, x3, #0x2
    136c:	add	x3, x3, #0x1
    1370:	str	x2, [x4, x1, lsl #3]
    1374:	ldr	x1, [sp, #104]
    1378:	add	x0, x0, #0x1
    137c:	cmp	x1, x0
    1380:	b.eq	13a0 <search_object+0x4a0>  // b.none
    1384:	ldr	x1, [x6, x0, lsl #3]
    1388:	ldr	x2, [x28, x0, lsl #3]
    138c:	cbnz	x1, 1364 <search_object+0x464>
    1390:	add	x1, x5, #0x2
    1394:	add	x5, x5, #0x1
    1398:	str	x2, [x22, x1, lsl #3]
    139c:	b	1374 <search_object+0x474>
    13a0:	ldp	x0, x2, [sp, #144]
    13a4:	str	x0, [sp, #96]
    13a8:	ldr	x0, [sp, #120]
    13ac:	str	x3, [x0, #8]
    13b0:	ldr	x0, [sp, #96]
    13b4:	str	x5, [x22, #8]
    13b8:	ldr	x1, [x2, #8]
    13bc:	ldr	x0, [x0, #8]
    13c0:	add	x0, x0, x1
    13c4:	cmp	x0, x25
    13c8:	b.ne	1554 <search_object+0x654>  // b.any
    13cc:	mov	x1, x20
    13d0:	mov	x0, x24
    13d4:	bl	130 <frame_heapsort>
    13d8:	ldr	x25, [sp, #152]
    13dc:	ldr	x22, [x25, #8]
    13e0:	cbz	x22, 1484 <search_object+0x584>
    13e4:	ldr	x0, [sp, #144]
    13e8:	str	x0, [sp, #96]
    13ec:	add	x27, x0, #0x10
    13f0:	ldr	x28, [x0, #8]
    13f4:	nop
    13f8:	add	x0, x25, x22, lsl #3
    13fc:	sub	x23, x22, #0x1
    1400:	ldr	x26, [x0, #8]
    1404:	cbz	x28, 1520 <search_object+0x620>
    1408:	add	x22, x22, x28
    140c:	mov	x21, x28
    1410:	sub	x22, x22, #0x1
    1414:	b	1428 <search_object+0x528>
    1418:	ldr	x0, [x27, x21, lsl #3]
    141c:	str	x0, [x27, x22, lsl #3]
    1420:	sub	x22, x22, #0x1
    1424:	cbz	x21, 1460 <search_object+0x560>
    1428:	mov	x28, x21
    142c:	sub	x21, x21, #0x1
    1430:	mov	x2, x26
    1434:	mov	x0, x24
    1438:	ldr	x1, [x27, x21, lsl #3]
    143c:	blr	x20
    1440:	cmp	w0, #0x0
    1444:	b.gt	1418 <search_object+0x518>
    1448:	ldr	x0, [sp, #96]
    144c:	add	x22, x22, #0x2
    1450:	str	x26, [x0, x22, lsl #3]
    1454:	cbz	x23, 146c <search_object+0x56c>
    1458:	mov	x22, x23
    145c:	b	13f8 <search_object+0x4f8>
    1460:	mov	x22, x23
    1464:	mov	x28, #0x0                   	// #0
    1468:	b	1448 <search_object+0x548>
    146c:	ldr	x2, [sp, #96]
    1470:	ldr	x1, [x25, #8]
    1474:	ldr	x0, [x2, #8]
    1478:	ldr	x25, [sp, #152]
    147c:	add	x0, x0, x1
    1480:	str	x0, [x2, #8]
    1484:	mov	x0, x25
    1488:	bl	0 <free>
    148c:	ldp	x27, x28, [sp, #80]
    1490:	ldr	x1, [sp, #144]
    1494:	ldrb	w0, [x24, #32]
    1498:	ldr	x2, [x24, #24]
    149c:	str	x2, [x1]
    14a0:	orr	w0, w0, #0x1
    14a4:	str	x1, [x24, #24]
    14a8:	strb	w0, [x24, #32]
    14ac:	b	10e0 <search_object+0x1e0>
    14b0:	mov	x1, x21
    14b4:	mov	x2, x19
    14b8:	mov	x0, x24
    14bc:	bl	5b0 <linear_search_fdes>
    14c0:	mov	x20, x0
    14c4:	ldp	x21, x22, [sp, #32]
    14c8:	ldp	x25, x26, [sp, #64]
    14cc:	b	f74 <search_object+0x74>
    14d0:	ldp	x21, x22, [sp, #32]
    14d4:	ldp	x25, x26, [sp, #64]
    14d8:	ldp	x27, x28, [sp, #80]
    14dc:	b	f74 <search_object+0x74>
    14e0:	adrp	x20, 0 <fde_unencoded_compare>
    14e4:	add	x20, x20, #0x0
    14e8:	b	12a4 <search_object+0x3a4>
    14ec:	mov	x2, x20
    14f0:	add	x1, sp, #0x90
    14f4:	mov	x0, x24
    14f8:	bl	970 <add_fdes>
    14fc:	b	1264 <search_object+0x364>
    1500:	ldr	x2, [sp, #96]
    1504:	mov	x1, x20
    1508:	mov	x0, x24
    150c:	bl	130 <frame_heapsort>
    1510:	b	1490 <search_object+0x590>
    1514:	bfi	w0, w25, #11, #21
    1518:	str	w0, [x24, #32]
    151c:	b	10dc <search_object+0x1dc>
    1520:	ldr	x2, [sp, #96]
    1524:	add	x1, x22, #0x1
    1528:	str	x26, [x2, x1, lsl #3]
    152c:	cbz	x23, 146c <search_object+0x56c>
    1530:	sub	x23, x22, #0x2
    1534:	mov	x22, x23
    1538:	ldr	x26, [x0]
    153c:	b	1448 <search_object+0x548>
    1540:	mov	x2, x22
    1544:	mov	x5, #0x0                   	// #0
    1548:	mov	x3, #0x0                   	// #0
    154c:	b	13a8 <search_object+0x4a8>
    1550:	stp	x27, x28, [sp, #80]
    1554:	bl	0 <abort>
    1558:	ldp	x21, x22, [sp, #32]
    155c:	ldp	x25, x26, [sp, #64]
    1560:	b	f20 <search_object+0x20>
    1564:	nop

0000000000001568 <__register_frame_info_bases.part.0>:
    1568:	stp	x29, x30, [sp, #-48]!
    156c:	mov	x5, #0xffffffffffffffff    	// #-1
    1570:	mov	x4, #0x7f8                 	// #2040
    1574:	mov	x29, sp
    1578:	stp	x19, x20, [sp, #16]
    157c:	adrp	x20, 0 <__pthread_key_create>
    1580:	mov	x19, x1
    1584:	ldr	x1, [x20]
    1588:	str	x21, [sp, #32]
    158c:	stp	x5, x2, [x19]
    1590:	adrp	x21, 0 <fde_unencoded_compare>
    1594:	stp	x3, x0, [x19, #16]
    1598:	str	x4, [x19, #32]
    159c:	cbz	x1, 15ac <__register_frame_info_bases.part.0+0x44>
    15a0:	add	x0, x21, #0x0
    15a4:	add	x0, x0, #0x198
    15a8:	bl	0 <pthread_mutex_lock>
    15ac:	add	x1, x21, #0x0
    15b0:	ldr	w0, [x1, #464]
    15b4:	ldr	x2, [x1, #456]
    15b8:	str	x2, [x19, #40]
    15bc:	str	x19, [x1, #456]
    15c0:	cbz	w0, 15f4 <__register_frame_info_bases.part.0+0x8c>
    15c4:	ldr	x20, [x20]
    15c8:	cbz	x20, 15e4 <__register_frame_info_bases.part.0+0x7c>
    15cc:	add	x0, x21, #0x0
    15d0:	ldp	x19, x20, [sp, #16]
    15d4:	add	x0, x0, #0x198
    15d8:	ldr	x21, [sp, #32]
    15dc:	ldp	x29, x30, [sp], #48
    15e0:	b	0 <pthread_mutex_unlock>
    15e4:	ldp	x19, x20, [sp, #16]
    15e8:	ldr	x21, [sp, #32]
    15ec:	ldp	x29, x30, [sp], #48
    15f0:	ret
    15f4:	add	x1, x1, #0x1d0
    15f8:	mov	w0, #0x1                   	// #1
    15fc:	str	w0, [x1]
    1600:	b	15c4 <__register_frame_info_bases.part.0+0x5c>
    1604:	nop

0000000000001608 <__register_frame_info_bases>:
    1608:	cbz	x0, 1618 <__register_frame_info_bases+0x10>
    160c:	ldr	w4, [x0]
    1610:	cbz	w4, 1618 <__register_frame_info_bases+0x10>
    1614:	b	1568 <__register_frame_info_bases.part.0>
    1618:	ret
    161c:	nop

0000000000001620 <__register_frame_info>:
    1620:	cbz	x0, 1638 <__register_frame_info+0x18>
    1624:	ldr	w2, [x0]
    1628:	cbz	w2, 1638 <__register_frame_info+0x18>
    162c:	mov	x3, #0x0                   	// #0
    1630:	mov	x2, #0x0                   	// #0
    1634:	b	1568 <__register_frame_info_bases.part.0>
    1638:	ret
    163c:	nop

0000000000001640 <__register_frame>:
    1640:	stp	x29, x30, [sp, #-32]!
    1644:	mov	x29, sp
    1648:	str	x19, [sp, #16]
    164c:	mov	x19, x0
    1650:	ldr	w0, [x0]
    1654:	cbnz	w0, 1664 <__register_frame+0x24>
    1658:	ldr	x19, [sp, #16]
    165c:	ldp	x29, x30, [sp], #32
    1660:	ret
    1664:	mov	x0, #0x30                  	// #48
    1668:	bl	0 <malloc>
    166c:	mov	x1, x0
    1670:	mov	x0, x19
    1674:	ldr	x19, [sp, #16]
    1678:	mov	x3, #0x0                   	// #0
    167c:	ldp	x29, x30, [sp], #32
    1680:	mov	x2, #0x0                   	// #0
    1684:	b	1568 <__register_frame_info_bases.part.0>

0000000000001688 <__register_frame_info_table_bases>:
    1688:	stp	x29, x30, [sp, #-48]!
    168c:	mov	x5, #0xffffffffffffffff    	// #-1
    1690:	mov	x4, #0x7fa                 	// #2042
    1694:	mov	x29, sp
    1698:	stp	x19, x20, [sp, #16]
    169c:	adrp	x20, 0 <__pthread_key_create>
    16a0:	mov	x19, x1
    16a4:	ldr	x1, [x20]
    16a8:	str	x21, [sp, #32]
    16ac:	stp	x5, x2, [x19]
    16b0:	adrp	x21, 0 <fde_unencoded_compare>
    16b4:	stp	x3, x0, [x19, #16]
    16b8:	str	x4, [x19, #32]
    16bc:	cbz	x1, 16cc <__register_frame_info_table_bases+0x44>
    16c0:	add	x0, x21, #0x0
    16c4:	add	x0, x0, #0x198
    16c8:	bl	0 <pthread_mutex_lock>
    16cc:	add	x1, x21, #0x0
    16d0:	ldr	w0, [x1, #464]
    16d4:	ldr	x2, [x1, #456]
    16d8:	str	x2, [x19, #40]
    16dc:	str	x19, [x1, #456]
    16e0:	cbz	w0, 1714 <__register_frame_info_table_bases+0x8c>
    16e4:	ldr	x20, [x20]
    16e8:	cbz	x20, 1704 <__register_frame_info_table_bases+0x7c>
    16ec:	add	x0, x21, #0x0
    16f0:	ldp	x19, x20, [sp, #16]
    16f4:	add	x0, x0, #0x198
    16f8:	ldr	x21, [sp, #32]
    16fc:	ldp	x29, x30, [sp], #48
    1700:	b	0 <pthread_mutex_unlock>
    1704:	ldp	x19, x20, [sp, #16]
    1708:	ldr	x21, [sp, #32]
    170c:	ldp	x29, x30, [sp], #48
    1710:	ret
    1714:	add	x1, x1, #0x1d0
    1718:	mov	w0, #0x1                   	// #1
    171c:	str	w0, [x1]
    1720:	b	16e4 <__register_frame_info_table_bases+0x5c>
    1724:	nop

0000000000001728 <__register_frame_info_table>:
    1728:	mov	x3, #0x0                   	// #0
    172c:	mov	x2, #0x0                   	// #0
    1730:	b	1688 <__register_frame_info_table_bases>
    1734:	nop

0000000000001738 <__register_frame_table>:
    1738:	stp	x29, x30, [sp, #-32]!
    173c:	mov	x29, sp
    1740:	str	x19, [sp, #16]
    1744:	mov	x19, x0
    1748:	mov	x0, #0x30                  	// #48
    174c:	bl	0 <malloc>
    1750:	mov	x1, x0
    1754:	mov	x0, x19
    1758:	ldr	x19, [sp, #16]
    175c:	mov	x3, #0x0                   	// #0
    1760:	ldp	x29, x30, [sp], #32
    1764:	mov	x2, #0x0                   	// #0
    1768:	b	1688 <__register_frame_info_table_bases>
    176c:	nop

0000000000001770 <__deregister_frame_info_bases>:
    1770:	stp	x29, x30, [sp, #-48]!
    1774:	mov	x29, sp
    1778:	stp	x19, x20, [sp, #16]
    177c:	cbz	x0, 1848 <__deregister_frame_info_bases+0xd8>
    1780:	mov	x20, x0
    1784:	ldr	w0, [x0]
    1788:	cbz	w0, 1848 <__deregister_frame_info_bases+0xd8>
    178c:	stp	x21, x22, [sp, #32]
    1790:	adrp	x21, 0 <__pthread_key_create>
    1794:	adrp	x22, 0 <fde_unencoded_compare>
    1798:	ldr	x0, [x21]
    179c:	cbz	x0, 17ac <__deregister_frame_info_bases+0x3c>
    17a0:	add	x0, x22, #0x0
    17a4:	add	x0, x0, #0x198
    17a8:	bl	0 <pthread_mutex_lock>
    17ac:	add	x2, x22, #0x0
    17b0:	ldr	x1, [x2, #456]
    17b4:	cbz	x1, 17fc <__deregister_frame_info_bases+0x8c>
    17b8:	add	x2, x2, #0x1c8
    17bc:	b	17c8 <__deregister_frame_info_bases+0x58>
    17c0:	add	x2, x19, #0x28
    17c4:	cbz	x1, 17fc <__deregister_frame_info_bases+0x8c>
    17c8:	ldr	x0, [x1, #24]
    17cc:	mov	x19, x1
    17d0:	ldr	x1, [x1, #40]
    17d4:	cmp	x20, x0
    17d8:	b.ne	17c0 <__deregister_frame_info_bases+0x50>  // b.any
    17dc:	str	x1, [x2]
    17e0:	ldr	x21, [x21]
    17e4:	cbnz	x21, 185c <__deregister_frame_info_bases+0xec>
    17e8:	mov	x0, x19
    17ec:	ldp	x19, x20, [sp, #16]
    17f0:	ldp	x21, x22, [sp, #32]
    17f4:	ldp	x29, x30, [sp], #48
    17f8:	ret
    17fc:	add	x2, x22, #0x0
    1800:	ldr	x19, [x2, #472]
    1804:	cbz	x19, 187c <__deregister_frame_info_bases+0x10c>
    1808:	add	x2, x2, #0x1d8
    180c:	b	1828 <__deregister_frame_info_bases+0xb8>
    1810:	ldr	x1, [x0]
    1814:	cmp	x20, x1
    1818:	b.eq	1894 <__deregister_frame_info_bases+0x124>  // b.none
    181c:	add	x2, x19, #0x28
    1820:	ldr	x19, [x19, #40]
    1824:	cbz	x19, 187c <__deregister_frame_info_bases+0x10c>
    1828:	ldrb	w1, [x19, #32]
    182c:	ldr	x0, [x19, #24]
    1830:	tbnz	w1, #0, 1810 <__deregister_frame_info_bases+0xa0>
    1834:	cmp	x20, x0
    1838:	b.ne	181c <__deregister_frame_info_bases+0xac>  // b.any
    183c:	ldr	x0, [x19, #40]
    1840:	str	x0, [x2]
    1844:	b	17e0 <__deregister_frame_info_bases+0x70>
    1848:	mov	x19, #0x0                   	// #0
    184c:	mov	x0, x19
    1850:	ldp	x19, x20, [sp, #16]
    1854:	ldp	x29, x30, [sp], #48
    1858:	ret
    185c:	add	x0, x22, #0x0
    1860:	add	x0, x0, #0x198
    1864:	bl	0 <pthread_mutex_unlock>
    1868:	mov	x0, x19
    186c:	ldp	x19, x20, [sp, #16]
    1870:	ldp	x21, x22, [sp, #32]
    1874:	ldp	x29, x30, [sp], #48
    1878:	ret
    187c:	ldr	x21, [x21]
    1880:	cbz	x21, 1890 <__deregister_frame_info_bases+0x120>
    1884:	add	x0, x22, #0x0
    1888:	add	x0, x0, #0x198
    188c:	bl	0 <pthread_mutex_unlock>
    1890:	bl	0 <abort>
    1894:	ldr	x1, [x19, #40]
    1898:	str	x1, [x2]
    189c:	bl	0 <free>
    18a0:	b	17e0 <__deregister_frame_info_bases+0x70>
    18a4:	nop

00000000000018a8 <__deregister_frame_info>:
    18a8:	b	1770 <__deregister_frame_info_bases>
    18ac:	nop

00000000000018b0 <__deregister_frame>:
    18b0:	ldr	w1, [x0]
    18b4:	cbnz	w1, 18bc <__deregister_frame+0xc>
    18b8:	ret
    18bc:	stp	x29, x30, [sp, #-16]!
    18c0:	mov	x29, sp
    18c4:	bl	1770 <__deregister_frame_info_bases>
    18c8:	ldp	x29, x30, [sp], #16
    18cc:	b	0 <free>

00000000000018d0 <_Unwind_Find_FDE>:
    18d0:	stp	x29, x30, [sp, #-128]!
    18d4:	mov	x29, sp
    18d8:	stp	x23, x24, [sp, #48]
    18dc:	adrp	x23, 0 <fde_unencoded_compare>
    18e0:	add	x2, x23, #0x0
    18e4:	stp	x19, x20, [sp, #16]
    18e8:	mov	x20, x0
    18ec:	add	x0, x2, #0x1d0
    18f0:	stp	x21, x22, [sp, #32]
    18f4:	mov	x22, x1
    18f8:	ldr	w0, [x0]
    18fc:	cbnz	w0, 1960 <_Unwind_Find_FDE+0x90>
    1900:	mov	w2, #0x1                   	// #1
    1904:	adrp	x0, 0 <fde_unencoded_compare>
    1908:	add	x1, sp, #0x50
    190c:	add	x0, x0, #0x0
    1910:	stp	x20, xzr, [sp, #80]
    1914:	stp	xzr, xzr, [sp, #96]
    1918:	str	xzr, [sp, #112]
    191c:	str	w2, [sp, #120]
    1920:	bl	0 <dl_iterate_phdr>
    1924:	tbnz	w0, #31, 1a74 <_Unwind_Find_FDE+0x1a4>
    1928:	ldr	x21, [sp, #112]
    192c:	cbz	x21, 1948 <_Unwind_Find_FDE+0x78>
    1930:	ldr	x0, [sp, #88]
    1934:	str	x0, [x22]
    1938:	ldr	x0, [sp, #96]
    193c:	str	x0, [x22, #8]
    1940:	ldr	x0, [sp, #104]
    1944:	str	x0, [x22, #16]
    1948:	mov	x0, x21
    194c:	ldp	x19, x20, [sp, #16]
    1950:	ldp	x21, x22, [sp, #32]
    1954:	ldp	x23, x24, [sp, #48]
    1958:	ldp	x29, x30, [sp], #128
    195c:	ret
    1960:	stp	x25, x26, [sp, #64]
    1964:	adrp	x25, 0 <__pthread_key_create>
    1968:	ldr	x0, [x25]
    196c:	cbz	x0, 1978 <_Unwind_Find_FDE+0xa8>
    1970:	add	x0, x2, #0x198
    1974:	bl	0 <pthread_mutex_lock>
    1978:	add	x0, x23, #0x0
    197c:	ldr	x19, [x0, #472]
    1980:	cbnz	x19, 1990 <_Unwind_Find_FDE+0xc0>
    1984:	b	1a0c <_Unwind_Find_FDE+0x13c>
    1988:	ldr	x19, [x19, #40]
    198c:	cbz	x19, 1a0c <_Unwind_Find_FDE+0x13c>
    1990:	ldr	x0, [x19]
    1994:	cmp	x20, x0
    1998:	b.cc	1988 <_Unwind_Find_FDE+0xb8>  // b.lo, b.ul, b.last
    199c:	mov	x1, x20
    19a0:	mov	x0, x19
    19a4:	bl	f00 <search_object>
    19a8:	mov	x21, x0
    19ac:	cbz	x0, 1a0c <_Unwind_Find_FDE+0x13c>
    19b0:	ldr	x25, [x25]
    19b4:	cbnz	x25, 1a7c <_Unwind_Find_FDE+0x1ac>
    19b8:	ldrb	w0, [x19, #32]
    19bc:	ldr	x1, [x19, #8]
    19c0:	str	x1, [x22]
    19c4:	ldr	x1, [x19, #16]
    19c8:	str	x1, [x22, #8]
    19cc:	tbnz	w0, #2, 1a8c <_Unwind_Find_FDE+0x1bc>
    19d0:	ldrh	w20, [x19, #32]
    19d4:	ubfx	x20, x20, #3, #8
    19d8:	add	x2, x19, #0x10
    19dc:	add	x1, x19, #0x8
    19e0:	mov	w0, w20
    19e4:	bl	4c8 <base_from_cb_data.isra.0>
    19e8:	add	x3, sp, #0x50
    19ec:	mov	x1, x0
    19f0:	add	x2, x21, #0x8
    19f4:	mov	w0, w20
    19f8:	bl	250 <read_encoded_value_with_base>
    19fc:	ldr	x0, [sp, #80]
    1a00:	ldp	x25, x26, [sp, #64]
    1a04:	str	x0, [x22, #16]
    1a08:	b	1948 <_Unwind_Find_FDE+0x78>
    1a0c:	add	x24, x23, #0x0
    1a10:	add	x26, x24, #0x1d8
    1a14:	nop
    1a18:	ldr	x19, [x24, #456]
    1a1c:	cbz	x19, 1aa4 <_Unwind_Find_FDE+0x1d4>
    1a20:	ldr	x2, [x19, #40]
    1a24:	mov	x1, x20
    1a28:	mov	x0, x19
    1a2c:	str	x2, [x24, #456]
    1a30:	bl	f00 <search_object>
    1a34:	mov	x21, x0
    1a38:	ldr	x2, [x24, #472]
    1a3c:	cbz	x2, 1abc <_Unwind_Find_FDE+0x1ec>
    1a40:	mov	x0, x26
    1a44:	ldr	x3, [x19]
    1a48:	b	1a58 <_Unwind_Find_FDE+0x188>
    1a4c:	add	x0, x2, #0x28
    1a50:	ldr	x2, [x2, #40]
    1a54:	cbz	x2, 1a64 <_Unwind_Find_FDE+0x194>
    1a58:	ldr	x1, [x2]
    1a5c:	cmp	x1, x3
    1a60:	b.cs	1a4c <_Unwind_Find_FDE+0x17c>  // b.hs, b.nlast
    1a64:	str	x2, [x19, #40]
    1a68:	str	x19, [x0]
    1a6c:	cbz	x21, 1a18 <_Unwind_Find_FDE+0x148>
    1a70:	b	19b0 <_Unwind_Find_FDE+0xe0>
    1a74:	mov	x21, #0x0                   	// #0
    1a78:	b	1948 <_Unwind_Find_FDE+0x78>
    1a7c:	add	x0, x23, #0x0
    1a80:	add	x0, x0, #0x198
    1a84:	bl	0 <pthread_mutex_unlock>
    1a88:	b	19b8 <_Unwind_Find_FDE+0xe8>
    1a8c:	add	x1, x21, #0x4
    1a90:	ldrsw	x0, [x21, #4]
    1a94:	sub	x0, x1, x0
    1a98:	bl	3b0 <get_cie_encoding>
    1a9c:	and	w20, w0, #0xff
    1aa0:	b	19d8 <_Unwind_Find_FDE+0x108>
    1aa4:	ldr	x25, [x25]
    1aa8:	cbz	x25, 1ac4 <_Unwind_Find_FDE+0x1f4>
    1aac:	add	x0, x24, #0x198
    1ab0:	bl	0 <pthread_mutex_unlock>
    1ab4:	ldp	x25, x26, [sp, #64]
    1ab8:	b	1900 <_Unwind_Find_FDE+0x30>
    1abc:	mov	x0, x26
    1ac0:	b	1a64 <_Unwind_Find_FDE+0x194>
    1ac4:	ldp	x25, x26, [sp, #64]
    1ac8:	b	1900 <_Unwind_Find_FDE+0x30>

unwind-sjlj.o:     file format elf64-littleaarch64


unwind-c.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <base_of_encoded_value>:
   0:	and	w3, w0, #0xff
   4:	cmp	w3, #0xff
   8:	b.eq	58 <base_of_encoded_value+0x58>  // b.none
   c:	and	w2, w3, #0x70
  10:	mov	x0, x1
  14:	cmp	w2, #0x30
  18:	b.eq	60 <base_of_encoded_value+0x60>  // b.none
  1c:	b.hi	2c <base_of_encoded_value+0x2c>  // b.pmore
  20:	cmp	w2, #0x20
  24:	b.ne	38 <base_of_encoded_value+0x38>  // b.any
  28:	b	0 <_Unwind_GetTextRelBase>
  2c:	cmp	w2, #0x40
  30:	b.ne	50 <base_of_encoded_value+0x50>  // b.any
  34:	b	0 <_Unwind_GetRegionStart>
  38:	b.hi	44 <base_of_encoded_value+0x44>  // b.pmore
  3c:	tst	w3, #0x60
  40:	b.eq	58 <base_of_encoded_value+0x58>  // b.none
  44:	stp	x29, x30, [sp, #-16]!
  48:	mov	x29, sp
  4c:	bl	0 <abort>
  50:	cmp	w2, #0x50
  54:	b.ne	44 <base_of_encoded_value+0x44>  // b.any
  58:	mov	x0, #0x0                   	// #0
  5c:	ret
  60:	b	0 <_Unwind_GetDataRelBase>
  64:	nop

0000000000000068 <read_encoded_value_with_base>:
  68:	and	w5, w0, #0xff
  6c:	cmp	w5, #0x50
  70:	b.eq	188 <read_encoded_value_with_base+0x120>  // b.none
  74:	and	w4, w5, #0xf
  78:	cmp	w4, #0x4
  7c:	b.eq	98 <read_encoded_value_with_base+0x30>  // b.none
  80:	b.ls	ac <read_encoded_value_with_base+0x44>  // b.plast
  84:	cmp	w4, #0xb
  88:	b.eq	1ac <read_encoded_value_with_base+0x144>  // b.none
  8c:	b.ls	108 <read_encoded_value_with_base+0xa0>  // b.plast
  90:	cmp	w4, #0xc
  94:	b.ne	1bc <read_encoded_value_with_base+0x154>  // b.any
  98:	mov	x0, x2
  9c:	ldr	x4, [x0], #8
  a0:	cbnz	x4, 168 <read_encoded_value_with_base+0x100>
  a4:	str	x4, [x3]
  a8:	ret
  ac:	cmp	w4, #0x2
  b0:	b.eq	19c <read_encoded_value_with_base+0x134>  // b.none
  b4:	b.ls	d0 <read_encoded_value_with_base+0x68>  // b.plast
  b8:	cmp	w4, #0x3
  bc:	b.ne	1bc <read_encoded_value_with_base+0x154>  // b.any
  c0:	mov	x0, x2
  c4:	ldr	w4, [x0], #4
  c8:	cbz	x4, a4 <read_encoded_value_with_base+0x3c>
  cc:	b	168 <read_encoded_value_with_base+0x100>
  d0:	cbz	w4, 98 <read_encoded_value_with_base+0x30>
  d4:	cmp	w4, #0x1
  d8:	b.ne	1bc <read_encoded_value_with_base+0x154>  // b.any
  dc:	mov	x0, x2
  e0:	mov	x4, #0x0                   	// #0
  e4:	mov	w7, #0x0                   	// #0
  e8:	ldrb	w8, [x0], #1
  ec:	and	x6, x8, #0x7f
  f0:	lsl	x6, x6, x7
  f4:	add	w7, w7, #0x7
  f8:	orr	x4, x4, x6
  fc:	tbnz	w8, #7, e8 <read_encoded_value_with_base+0x80>
 100:	cbz	x4, a4 <read_encoded_value_with_base+0x3c>
 104:	b	168 <read_encoded_value_with_base+0x100>
 108:	cmp	w4, #0x9
 10c:	b.eq	128 <read_encoded_value_with_base+0xc0>  // b.none
 110:	cmp	w4, #0xa
 114:	b.ne	1bc <read_encoded_value_with_base+0x154>  // b.any
 118:	mov	x0, x2
 11c:	ldrsh	x4, [x0], #2
 120:	cbz	x4, a4 <read_encoded_value_with_base+0x3c>
 124:	b	168 <read_encoded_value_with_base+0x100>
 128:	mov	x0, x2
 12c:	mov	x4, #0x0                   	// #0
 130:	mov	w7, #0x0                   	// #0
 134:	ldrb	w8, [x0], #1
 138:	and	x6, x8, #0x7f
 13c:	lsl	x6, x6, x7
 140:	add	w7, w7, #0x7
 144:	orr	x4, x4, x6
 148:	tbnz	w8, #7, 134 <read_encoded_value_with_base+0xcc>
 14c:	cmp	w7, #0x3f
 150:	b.hi	a0 <read_encoded_value_with_base+0x38>  // b.pmore
 154:	tbz	w8, #6, a0 <read_encoded_value_with_base+0x38>
 158:	mov	x6, #0xffffffffffffffff    	// #-1
 15c:	lsl	x7, x6, x7
 160:	orr	x4, x4, x7
 164:	nop
 168:	and	w6, w5, #0x70
 16c:	cmp	w6, #0x10
 170:	csel	x1, x2, x1, eq  // eq = none
 174:	add	x4, x4, x1
 178:	tbz	w5, #7, a4 <read_encoded_value_with_base+0x3c>
 17c:	ldr	x4, [x4]
 180:	str	x4, [x3]
 184:	ret
 188:	add	x0, x2, #0x7
 18c:	and	x0, x0, #0xfffffffffffffff8
 190:	ldr	x4, [x0], #8
 194:	str	x4, [x3]
 198:	ret
 19c:	mov	x0, x2
 1a0:	ldrh	w4, [x0], #2
 1a4:	cbz	x4, a4 <read_encoded_value_with_base+0x3c>
 1a8:	b	168 <read_encoded_value_with_base+0x100>
 1ac:	mov	x0, x2
 1b0:	ldrsw	x4, [x0], #4
 1b4:	cbz	x4, a4 <read_encoded_value_with_base+0x3c>
 1b8:	b	168 <read_encoded_value_with_base+0x100>
 1bc:	stp	x29, x30, [sp, #-16]!
 1c0:	mov	x29, sp
 1c4:	bl	0 <abort>

00000000000001c8 <__gcc_personality_v0>:
 1c8:	stp	x29, x30, [sp, #-160]!
 1cc:	cmp	w0, #0x1
 1d0:	mov	x29, sp
 1d4:	str	wzr, [sp, #84]
 1d8:	b.ne	1ec <__gcc_personality_v0+0x24>  // b.any
 1dc:	tbnz	w1, #1, 1f8 <__gcc_personality_v0+0x30>
 1e0:	mov	w0, #0x8                   	// #8
 1e4:	ldp	x29, x30, [sp], #160
 1e8:	ret
 1ec:	mov	w0, #0x3                   	// #3
 1f0:	ldp	x29, x30, [sp], #160
 1f4:	ret
 1f8:	mov	x0, x4
 1fc:	stp	x19, x20, [sp, #16]
 200:	mov	x20, x4
 204:	stp	x21, x22, [sp, #32]
 208:	mov	x22, x3
 20c:	bl	0 <_Unwind_GetLanguageSpecificData>
 210:	mov	x19, x0
 214:	cbz	x0, 3b8 <__gcc_personality_v0+0x1f0>
 218:	mov	x0, #0x0                   	// #0
 21c:	cbz	x20, 228 <__gcc_personality_v0+0x60>
 220:	mov	x0, x20
 224:	bl	0 <_Unwind_GetRegionStart>
 228:	str	x0, [sp, #112]
 22c:	ldrb	w21, [x19], #1
 230:	cmp	w21, #0xff
 234:	b.eq	3e8 <__gcc_personality_v0+0x220>  // b.none
 238:	mov	x1, x20
 23c:	mov	w0, w21
 240:	bl	0 <base_of_encoded_value>
 244:	mov	x1, x0
 248:	mov	x2, x19
 24c:	mov	w0, w21
 250:	add	x3, sp, #0x78
 254:	bl	68 <read_encoded_value_with_base>
 258:	mov	x19, x0
 25c:	ldrb	w0, [x19], #1
 260:	strb	w0, [sp, #152]
 264:	cmp	w0, #0xff
 268:	b.eq	3f0 <__gcc_personality_v0+0x228>  // b.none
 26c:	mov	x3, #0x0                   	// #0
 270:	mov	w1, #0x0                   	// #0
 274:	nop
 278:	ldrb	w2, [x19], #1
 27c:	and	x0, x2, #0x7f
 280:	lsl	x0, x0, x1
 284:	add	w1, w1, #0x7
 288:	orr	x3, x3, x0
 28c:	tbnz	w2, #7, 278 <__gcc_personality_v0+0xb0>
 290:	add	x3, x19, x3
 294:	str	x3, [sp, #136]
 298:	ldrb	w0, [x19], #1
 29c:	mov	x3, #0x0                   	// #0
 2a0:	mov	w1, #0x0                   	// #0
 2a4:	strb	w0, [sp, #153]
 2a8:	ldrb	w2, [x19], #1
 2ac:	and	x0, x2, #0x7f
 2b0:	lsl	x0, x0, x1
 2b4:	add	w1, w1, #0x7
 2b8:	orr	x3, x3, x0
 2bc:	tbnz	w2, #7, 2a8 <__gcc_personality_v0+0xe0>
 2c0:	add	x3, x19, x3
 2c4:	add	x1, sp, #0x54
 2c8:	mov	x0, x20
 2cc:	str	x3, [sp, #144]
 2d0:	bl	0 <_Unwind_GetIPInfo>
 2d4:	ldr	w2, [sp, #84]
 2d8:	ldr	x1, [sp, #144]
 2dc:	cmp	w2, #0x0
 2e0:	cset	x2, eq  // eq = none
 2e4:	sub	x21, x0, x2
 2e8:	cmp	x1, x19
 2ec:	b.ls	3b8 <__gcc_personality_v0+0x1f0>  // b.plast
 2f0:	stp	x23, x24, [sp, #48]
 2f4:	add	x24, sp, #0x60
 2f8:	add	x23, sp, #0x68
 2fc:	stp	x25, x26, [sp, #64]
 300:	add	x25, sp, #0x58
 304:	nop
 308:	ldrb	w26, [sp, #153]
 30c:	mov	x1, #0x0                   	// #0
 310:	mov	w0, w26
 314:	bl	0 <base_of_encoded_value>
 318:	mov	x2, x19
 31c:	mov	x3, x25
 320:	mov	x1, x0
 324:	mov	w0, w26
 328:	bl	68 <read_encoded_value_with_base>
 32c:	ldrb	w26, [sp, #153]
 330:	mov	x19, x0
 334:	mov	x1, #0x0                   	// #0
 338:	mov	w0, w26
 33c:	bl	0 <base_of_encoded_value>
 340:	mov	x2, x19
 344:	mov	x3, x24
 348:	mov	x1, x0
 34c:	mov	w0, w26
 350:	bl	68 <read_encoded_value_with_base>
 354:	ldrb	w26, [sp, #153]
 358:	mov	x19, x0
 35c:	mov	x1, #0x0                   	// #0
 360:	mov	w0, w26
 364:	bl	0 <base_of_encoded_value>
 368:	mov	x2, x19
 36c:	mov	x1, x0
 370:	mov	x3, x23
 374:	mov	w0, w26
 378:	bl	68 <read_encoded_value_with_base>
 37c:	mov	x19, x0
 380:	ldrsb	w0, [x19], #1
 384:	tbnz	w0, #31, 380 <__gcc_personality_v0+0x1b8>
 388:	ldr	x1, [sp, #88]
 38c:	ldr	x0, [sp, #112]
 390:	add	x0, x0, x1
 394:	cmp	x0, x21
 398:	b.ls	3c8 <__gcc_personality_v0+0x200>  // b.plast
 39c:	mov	w0, #0x8                   	// #8
 3a0:	ldp	x19, x20, [sp, #16]
 3a4:	ldp	x21, x22, [sp, #32]
 3a8:	ldp	x23, x24, [sp, #48]
 3ac:	ldp	x25, x26, [sp, #64]
 3b0:	ldp	x29, x30, [sp], #160
 3b4:	ret
 3b8:	mov	w0, #0x8                   	// #8
 3bc:	ldp	x19, x20, [sp, #16]
 3c0:	ldp	x21, x22, [sp, #32]
 3c4:	b	1e4 <__gcc_personality_v0+0x1c>
 3c8:	ldr	x1, [sp, #96]
 3cc:	add	x0, x0, x1
 3d0:	cmp	x0, x21
 3d4:	b.hi	3f8 <__gcc_personality_v0+0x230>  // b.pmore
 3d8:	ldr	x0, [sp, #144]
 3dc:	cmp	x0, x19
 3e0:	b.hi	308 <__gcc_personality_v0+0x140>  // b.pmore
 3e4:	b	40c <__gcc_personality_v0+0x244>
 3e8:	str	x0, [sp, #120]
 3ec:	b	25c <__gcc_personality_v0+0x94>
 3f0:	str	xzr, [sp, #136]
 3f4:	b	298 <__gcc_personality_v0+0xd0>
 3f8:	ldr	x0, [sp, #104]
 3fc:	cbz	x0, 39c <__gcc_personality_v0+0x1d4>
 400:	ldr	x19, [sp, #120]
 404:	adds	x19, x0, x19
 408:	b.ne	424 <__gcc_personality_v0+0x25c>  // b.any
 40c:	mov	w0, #0x8                   	// #8
 410:	ldp	x19, x20, [sp, #16]
 414:	ldp	x21, x22, [sp, #32]
 418:	ldp	x23, x24, [sp, #48]
 41c:	ldp	x25, x26, [sp, #64]
 420:	b	1e4 <__gcc_personality_v0+0x1c>
 424:	mov	x2, x22
 428:	mov	x0, x20
 42c:	mov	w1, #0x0                   	// #0
 430:	bl	0 <_Unwind_SetGR>
 434:	mov	x2, #0x0                   	// #0
 438:	mov	x0, x20
 43c:	mov	w1, #0x1                   	// #1
 440:	bl	0 <_Unwind_SetGR>
 444:	mov	x0, x20
 448:	mov	x1, x19
 44c:	bl	0 <_Unwind_SetIP>
 450:	mov	w0, #0x7                   	// #7
 454:	ldp	x19, x20, [sp, #16]
 458:	ldp	x21, x22, [sp, #32]
 45c:	ldp	x23, x24, [sp, #48]
 460:	ldp	x25, x26, [sp, #64]
 464:	b	1f0 <__gcc_personality_v0+0x28>

emutls.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <emutls_init>:
   0:	stp	x29, x30, [sp, #-16]!
   4:	adrp	x1, 0 <emutls_init>
   8:	adrp	x0, 0 <emutls_init>
   c:	mov	x29, sp
  10:	add	x1, x1, #0x0
  14:	add	x0, x0, #0x0
  18:	bl	0 <pthread_key_create>
  1c:	cbnz	w0, 28 <emutls_init+0x28>
  20:	ldp	x29, x30, [sp], #16
  24:	ret
  28:	bl	0 <abort>
  2c:	nop

0000000000000030 <emutls_destroy>:
  30:	stp	x29, x30, [sp, #-48]!
  34:	mov	x29, sp
  38:	str	x21, [sp, #32]
  3c:	ldr	x21, [x0]
  40:	stp	x19, x20, [sp, #16]
  44:	mov	x20, x0
  48:	cbz	x21, 6c <emutls_destroy+0x3c>
  4c:	mov	x19, #0x1                   	// #1
  50:	ldr	x1, [x20, x19, lsl #3]
  54:	cbz	x1, 60 <emutls_destroy+0x30>
  58:	ldur	x0, [x1, #-8]
  5c:	bl	0 <free>
  60:	cmp	x21, x19
  64:	add	x19, x19, #0x1
  68:	b.ne	50 <emutls_destroy+0x20>  // b.any
  6c:	mov	x0, x20
  70:	ldp	x19, x20, [sp, #16]
  74:	ldr	x21, [sp, #32]
  78:	ldp	x29, x30, [sp], #48
  7c:	b	0 <free>

0000000000000080 <emutls_alloc>:
  80:	stp	x29, x30, [sp, #-48]!
  84:	mov	x29, sp
  88:	stp	x19, x20, [sp, #16]
  8c:	mov	x19, x0
  90:	ldr	x20, [x0, #8]
  94:	str	x21, [sp, #32]
  98:	ldr	x21, [x0]
  9c:	cmp	x20, #0x8
  a0:	b.hi	e4 <emutls_alloc+0x64>  // b.pmore
  a4:	add	x0, x21, #0x8
  a8:	bl	0 <malloc>
  ac:	cbz	x0, 138 <emutls_alloc+0xb8>
  b0:	ldr	x1, [x19, #24]
  b4:	str	x0, [x0]
  b8:	add	x3, x0, #0x8
  bc:	mov	x2, x21
  c0:	cbz	x1, 114 <emutls_alloc+0x94>
  c4:	mov	x0, x3
  c8:	bl	0 <memcpy>
  cc:	mov	x3, x0
  d0:	mov	x0, x3
  d4:	ldp	x19, x20, [sp, #16]
  d8:	ldr	x21, [sp, #32]
  dc:	ldp	x29, x30, [sp], #48
  e0:	ret
  e4:	add	x0, x20, x21
  e8:	add	x0, x0, #0x7
  ec:	bl	0 <malloc>
  f0:	cbz	x0, 138 <emutls_alloc+0xb8>
  f4:	add	x3, x20, #0x7
  f8:	neg	x20, x20
  fc:	add	x3, x0, x3
 100:	mov	x2, x21
 104:	and	x3, x3, x20
 108:	stur	x0, [x3, #-8]
 10c:	ldr	x1, [x19, #24]
 110:	cbnz	x1, c4 <emutls_alloc+0x44>
 114:	mov	x0, x3
 118:	mov	w1, #0x0                   	// #0
 11c:	bl	0 <memset>
 120:	mov	x3, x0
 124:	mov	x0, x3
 128:	ldp	x19, x20, [sp, #16]
 12c:	ldr	x21, [sp, #32]
 130:	ldp	x29, x30, [sp], #48
 134:	ret
 138:	bl	0 <abort>
 13c:	nop

0000000000000140 <__emutls_get_address>:
 140:	stp	x29, x30, [sp, #-64]!
 144:	adrp	x1, 0 <__pthread_key_create>
 148:	mov	x29, sp
 14c:	ldr	x1, [x1]
 150:	stp	x19, x20, [sp, #16]
 154:	mov	x20, x0
 158:	cbz	x1, 1b0 <__emutls_get_address+0x70>
 15c:	add	x19, x0, #0x10
 160:	stp	x21, x22, [sp, #32]
 164:	ldar	x21, [x19]
 168:	adrp	x22, 0 <emutls_init>
 16c:	cbz	x21, 1c8 <__emutls_get_address+0x88>
 170:	ldr	w0, [x22]
 174:	bl	0 <pthread_getspecific>
 178:	mov	x19, x0
 17c:	cbz	x0, 204 <__emutls_get_address+0xc4>
 180:	stp	x23, x24, [sp, #48]
 184:	ldr	x23, [x0]
 188:	cmp	x23, x21
 18c:	b.cc	248 <__emutls_get_address+0x108>  // b.lo, b.ul, b.last
 190:	ldp	x23, x24, [sp, #48]
 194:	ldr	x1, [x19, x21, lsl #3]
 198:	cbz	x1, 230 <__emutls_get_address+0xf0>
 19c:	ldp	x21, x22, [sp, #32]
 1a0:	mov	x0, x1
 1a4:	ldp	x19, x20, [sp, #16]
 1a8:	ldp	x29, x30, [sp], #64
 1ac:	ret
 1b0:	ldr	x1, [x0, #16]
 1b4:	cbnz	x1, 1a0 <__emutls_get_address+0x60>
 1b8:	bl	80 <emutls_alloc>
 1bc:	mov	x1, x0
 1c0:	str	x0, [x20, #16]
 1c4:	b	1a0 <__emutls_get_address+0x60>
 1c8:	adrp	x1, 0 <emutls_init>
 1cc:	add	x1, x1, #0x0
 1d0:	stp	x23, x24, [sp, #48]
 1d4:	add	x23, x22, #0x0
 1d8:	add	x0, x23, #0x4
 1dc:	bl	0 <pthread_once>
 1e0:	add	x0, x23, #0x8
 1e4:	bl	0 <pthread_mutex_lock>
 1e8:	ldr	x21, [x20, #16]
 1ec:	cbz	x21, 298 <__emutls_get_address+0x158>
 1f0:	add	x0, x22, #0x0
 1f4:	add	x0, x0, #0x8
 1f8:	bl	0 <pthread_mutex_unlock>
 1fc:	ldp	x23, x24, [sp, #48]
 200:	b	170 <__emutls_get_address+0x30>
 204:	add	x0, x21, #0x21
 208:	mov	x1, #0x8                   	// #8
 20c:	bl	0 <calloc>
 210:	mov	x19, x0
 214:	add	x2, x21, #0x20
 218:	cbz	x0, 2ac <__emutls_get_address+0x16c>
 21c:	ldr	w0, [x22]
 220:	mov	x1, x19
 224:	str	x2, [x19]
 228:	bl	0 <pthread_setspecific>
 22c:	b	194 <__emutls_get_address+0x54>
 230:	mov	x0, x20
 234:	bl	80 <emutls_alloc>
 238:	mov	x1, x0
 23c:	str	x0, [x19, x21, lsl #3]
 240:	ldp	x21, x22, [sp, #32]
 244:	b	1a0 <__emutls_get_address+0x60>
 248:	lsl	x24, x23, #1
 24c:	add	x1, x21, #0x20
 250:	cmp	x21, x24
 254:	csel	x24, x1, x24, hi  // hi = pmore
 258:	add	x1, x24, #0x1
 25c:	lsl	x1, x1, #3
 260:	bl	0 <realloc>
 264:	mov	x19, x0
 268:	cbz	x0, 2b0 <__emutls_get_address+0x170>
 26c:	sub	x2, x24, x23
 270:	str	x24, [x0], #8
 274:	mov	w1, #0x0                   	// #0
 278:	lsl	x2, x2, #3
 27c:	add	x0, x0, x23, lsl #3
 280:	bl	0 <memset>
 284:	ldr	w0, [x22]
 288:	mov	x1, x19
 28c:	bl	0 <pthread_setspecific>
 290:	ldp	x23, x24, [sp, #48]
 294:	b	194 <__emutls_get_address+0x54>
 298:	ldr	x21, [x23, #56]
 29c:	add	x21, x21, #0x1
 2a0:	str	x21, [x23, #56]
 2a4:	stlr	x21, [x19]
 2a8:	b	1f0 <__emutls_get_address+0xb0>
 2ac:	stp	x23, x24, [sp, #48]
 2b0:	bl	0 <abort>
 2b4:	nop

00000000000002b8 <__emutls_register_common>:
 2b8:	ldr	x4, [x0]
 2bc:	cmp	x4, x1
 2c0:	b.cs	2cc <__emutls_register_common+0x14>  // b.hs, b.nlast
 2c4:	str	x1, [x0]
 2c8:	str	xzr, [x0, #24]
 2cc:	ldr	x4, [x0, #8]
 2d0:	cmp	x4, x2
 2d4:	b.cs	2dc <__emutls_register_common+0x24>  // b.hs, b.nlast
 2d8:	str	x2, [x0, #8]
 2dc:	cbz	x3, 2ec <__emutls_register_common+0x34>
 2e0:	ldr	x2, [x0]
 2e4:	cmp	x2, x1
 2e8:	b.eq	2f0 <__emutls_register_common+0x38>  // b.none
 2ec:	ret
 2f0:	str	x3, [x0, #24]
 2f4:	ret
