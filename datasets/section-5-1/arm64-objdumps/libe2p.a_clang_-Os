In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libe2p.a_clang_-Os:

feature.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_feature2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	adrp	x19, 0 <e2p_feature2string>
   c:	adrp	x8, 0 <e2p_feature2string>
  10:	add	x19, x19, #0x0
  14:	add	x8, x8, #0x0
  18:	mov	x29, sp
  1c:	ldur	w9, [x8, #-4]
  20:	cmp	w9, w0
  24:	b.ne	34 <e2p_feature2string+0x34>  // b.any
  28:	ldr	w9, [x8]
  2c:	cmp	w9, w1
  30:	b.eq	84 <e2p_feature2string+0x84>  // b.none
  34:	ldur	x19, [x8, #20]
  38:	add	x8, x8, #0x10
  3c:	cbnz	x19, 1c <e2p_feature2string+0x1c>
  40:	cmp	w0, #0x2
  44:	b.hi	58 <e2p_feature2string+0x58>  // b.pmore
  48:	adrp	x8, 0 <e2p_feature2string>
  4c:	add	x8, x8, #0x0
  50:	ldr	w2, [x8, w0, sxtw #2]
  54:	b	5c <e2p_feature2string+0x5c>
  58:	mov	w2, #0x3f                  	// #63
  5c:	lsr	w8, w1, #1
  60:	adrp	x19, 0 <e2p_feature2string>
  64:	clz	w8, w8
  68:	mov	w9, #0x20                  	// #32
  6c:	add	x19, x19, #0x0
  70:	adrp	x1, 0 <e2p_feature2string>
  74:	sub	w3, w9, w8
  78:	add	x1, x1, #0x0
  7c:	mov	x0, x19
  80:	bl	0 <sprintf>
  84:	mov	x0, x19
  88:	ldr	x19, [sp, #16]
  8c:	ldp	x29, x30, [sp], #32
  90:	ret

0000000000000094 <e2p_string2feature>:
  94:	sub	sp, sp, #0x40
  98:	stp	x22, x21, [sp, #32]
  9c:	mov	x21, x1
  a0:	adrp	x22, 0 <e2p_feature2string>
  a4:	adrp	x1, 0 <e2p_feature2string>
  a8:	stp	x20, x19, [sp, #48]
  ac:	mov	x19, x2
  b0:	mov	x20, x0
  b4:	add	x22, x22, #0x0
  b8:	add	x1, x1, #0x0
  bc:	stp	x29, x30, [sp, #16]
  c0:	add	x29, sp, #0x10
  c4:	mov	x0, x20
  c8:	bl	0 <strcasecmp>
  cc:	cbz	w0, fc <e2p_string2feature+0x68>
  d0:	ldr	x1, [x22, #24]
  d4:	add	x22, x22, #0x10
  d8:	cbnz	x1, c4 <e2p_string2feature+0x30>
  dc:	adrp	x1, 0 <e2p_feature2string>
  e0:	add	x1, x1, #0x0
  e4:	mov	w2, #0x8                   	// #8
  e8:	mov	x0, x20
  ec:	bl	0 <strncasecmp>
  f0:	cbz	w0, 120 <e2p_string2feature+0x8c>
  f4:	mov	w0, #0x1                   	// #1
  f8:	b	10c <e2p_string2feature+0x78>
  fc:	ldr	w8, [x22]
 100:	str	w8, [x21]
 104:	ldr	w8, [x22, #4]
 108:	str	w8, [x19]
 10c:	ldp	x20, x19, [sp, #48]
 110:	ldp	x22, x21, [sp, #32]
 114:	ldp	x29, x30, [sp, #16]
 118:	add	sp, sp, #0x40
 11c:	ret
 120:	ldrb	w8, [x20, #8]
 124:	mov	w0, #0x1                   	// #1
 128:	sub	w8, w8, #0x43
 12c:	cmp	w8, #0x2f
 130:	b.hi	10c <e2p_string2feature+0x78>  // b.pmore
 134:	mov	w9, #0x1                   	// #1
 138:	lsl	x9, x9, x8
 13c:	tst	x9, #0x100000001
 140:	b.ne	16c <e2p_string2feature+0xd8>  // b.any
 144:	mov	w9, #0x1                   	// #1
 148:	lsl	x9, x9, x8
 14c:	tst	x9, #0x4000000040
 150:	b.ne	174 <e2p_string2feature+0xe0>  // b.any
 154:	mov	w9, #0x1                   	// #1
 158:	lsl	x8, x9, x8
 15c:	tst	x8, #0x800000008000
 160:	b.eq	10c <e2p_string2feature+0x78>  // b.none
 164:	mov	w8, #0x2                   	// #2
 168:	b	178 <e2p_string2feature+0xe4>
 16c:	mov	w8, wzr
 170:	b	178 <e2p_string2feature+0xe4>
 174:	mov	w8, #0x1                   	// #1
 178:	str	w8, [x21]
 17c:	ldrb	w8, [x20, #9]!
 180:	cbz	w8, f4 <e2p_string2feature+0x60>
 184:	add	x1, sp, #0x8
 188:	mov	w2, #0xa                   	// #10
 18c:	mov	x0, x20
 190:	bl	0 <strtol>
 194:	mov	x8, x0
 198:	cmp	w8, #0x1f
 19c:	b.hi	f4 <e2p_string2feature+0x60>  // b.pmore
 1a0:	ldr	x9, [sp, #8]
 1a4:	mov	w0, #0x1                   	// #1
 1a8:	ldrb	w9, [x9]
 1ac:	cbnz	w9, 10c <e2p_string2feature+0x78>
 1b0:	lsl	w8, w0, w8
 1b4:	mov	w0, wzr
 1b8:	b	108 <e2p_string2feature+0x74>

00000000000001bc <e2p_jrnl_feature2string>:
 1bc:	stp	x29, x30, [sp, #-32]!
 1c0:	str	x19, [sp, #16]
 1c4:	adrp	x19, 0 <e2p_feature2string>
 1c8:	adrp	x8, 0 <e2p_feature2string>
 1cc:	add	x19, x19, #0x0
 1d0:	add	x8, x8, #0x0
 1d4:	mov	x29, sp
 1d8:	ldur	w9, [x8, #-4]
 1dc:	cmp	w9, w0
 1e0:	b.ne	1f0 <e2p_jrnl_feature2string+0x34>  // b.any
 1e4:	ldr	w9, [x8]
 1e8:	cmp	w9, w1
 1ec:	b.eq	240 <e2p_jrnl_feature2string+0x84>  // b.none
 1f0:	ldur	x19, [x8, #20]
 1f4:	add	x8, x8, #0x10
 1f8:	cbnz	x19, 1d8 <e2p_jrnl_feature2string+0x1c>
 1fc:	cmp	w0, #0x2
 200:	b.hi	214 <e2p_jrnl_feature2string+0x58>  // b.pmore
 204:	adrp	x8, 0 <e2p_feature2string>
 208:	add	x8, x8, #0x0
 20c:	ldr	w2, [x8, w0, sxtw #2]
 210:	b	218 <e2p_jrnl_feature2string+0x5c>
 214:	mov	w2, #0x3f                  	// #63
 218:	lsr	w8, w1, #1
 21c:	adrp	x19, 0 <e2p_feature2string>
 220:	clz	w8, w8
 224:	mov	w9, #0x20                  	// #32
 228:	add	x19, x19, #0x0
 22c:	adrp	x1, 0 <e2p_feature2string>
 230:	sub	w3, w9, w8
 234:	add	x1, x1, #0x0
 238:	mov	x0, x19
 23c:	bl	0 <sprintf>
 240:	mov	x0, x19
 244:	ldr	x19, [sp, #16]
 248:	ldp	x29, x30, [sp], #32
 24c:	ret

0000000000000250 <e2p_jrnl_string2feature>:
 250:	sub	sp, sp, #0x40
 254:	stp	x22, x21, [sp, #32]
 258:	mov	x21, x1
 25c:	adrp	x22, 0 <e2p_feature2string>
 260:	adrp	x1, 0 <e2p_feature2string>
 264:	stp	x20, x19, [sp, #48]
 268:	mov	x19, x2
 26c:	mov	x20, x0
 270:	add	x22, x22, #0x0
 274:	add	x1, x1, #0x0
 278:	stp	x29, x30, [sp, #16]
 27c:	add	x29, sp, #0x10
 280:	mov	x0, x20
 284:	bl	0 <strcasecmp>
 288:	cbz	w0, 2b8 <e2p_jrnl_string2feature+0x68>
 28c:	ldr	x1, [x22, #24]
 290:	add	x22, x22, #0x10
 294:	cbnz	x1, 280 <e2p_jrnl_string2feature+0x30>
 298:	adrp	x1, 0 <e2p_feature2string>
 29c:	add	x1, x1, #0x0
 2a0:	mov	w2, #0x8                   	// #8
 2a4:	mov	x0, x20
 2a8:	bl	0 <strncasecmp>
 2ac:	cbz	w0, 2dc <e2p_jrnl_string2feature+0x8c>
 2b0:	mov	w0, #0x1                   	// #1
 2b4:	b	2c8 <e2p_jrnl_string2feature+0x78>
 2b8:	ldr	w8, [x22]
 2bc:	str	w8, [x21]
 2c0:	ldr	w8, [x22, #4]
 2c4:	str	w8, [x19]
 2c8:	ldp	x20, x19, [sp, #48]
 2cc:	ldp	x22, x21, [sp, #32]
 2d0:	ldp	x29, x30, [sp, #16]
 2d4:	add	sp, sp, #0x40
 2d8:	ret
 2dc:	ldrb	w8, [x20, #8]
 2e0:	mov	w0, #0x1                   	// #1
 2e4:	sub	w8, w8, #0x43
 2e8:	cmp	w8, #0x2f
 2ec:	b.hi	2c8 <e2p_jrnl_string2feature+0x78>  // b.pmore
 2f0:	mov	w9, #0x1                   	// #1
 2f4:	lsl	x9, x9, x8
 2f8:	tst	x9, #0x100000001
 2fc:	b.ne	328 <e2p_jrnl_string2feature+0xd8>  // b.any
 300:	mov	w9, #0x1                   	// #1
 304:	lsl	x9, x9, x8
 308:	tst	x9, #0x4000000040
 30c:	b.ne	330 <e2p_jrnl_string2feature+0xe0>  // b.any
 310:	mov	w9, #0x1                   	// #1
 314:	lsl	x8, x9, x8
 318:	tst	x8, #0x800000008000
 31c:	b.eq	2c8 <e2p_jrnl_string2feature+0x78>  // b.none
 320:	mov	w8, #0x2                   	// #2
 324:	b	334 <e2p_jrnl_string2feature+0xe4>
 328:	mov	w8, wzr
 32c:	b	334 <e2p_jrnl_string2feature+0xe4>
 330:	mov	w8, #0x1                   	// #1
 334:	str	w8, [x21]
 338:	ldrb	w8, [x20, #9]!
 33c:	cbz	w8, 2b0 <e2p_jrnl_string2feature+0x60>
 340:	add	x1, sp, #0x8
 344:	mov	w2, #0xa                   	// #10
 348:	mov	x0, x20
 34c:	bl	0 <strtol>
 350:	mov	x8, x0
 354:	cmp	w8, #0x1f
 358:	b.hi	2b0 <e2p_jrnl_string2feature+0x60>  // b.pmore
 35c:	ldr	x9, [sp, #8]
 360:	mov	w0, #0x1                   	// #1
 364:	ldrb	w9, [x9]
 368:	cbnz	w9, 2c8 <e2p_jrnl_string2feature+0x78>
 36c:	lsl	w8, w0, w8
 370:	mov	w0, wzr
 374:	b	2c4 <e2p_jrnl_string2feature+0x74>

0000000000000378 <e2p_edit_feature2>:
 378:	sub	sp, sp, #0x70
 37c:	cmp	x3, #0x0
 380:	stp	x28, x27, [sp, #32]
 384:	stp	x24, x23, [sp, #64]
 388:	stp	x22, x21, [sp, #80]
 38c:	stp	x20, x19, [sp, #96]
 390:	mov	x20, x5
 394:	mov	x21, x4
 398:	mov	x22, x2
 39c:	mov	x23, x1
 3a0:	mov	x24, x0
 3a4:	csel	x27, x2, x3, eq  // eq = none
 3a8:	stp	x29, x30, [sp, #16]
 3ac:	stp	x26, x25, [sp, #48]
 3b0:	add	x29, sp, #0x10
 3b4:	cbz	x4, 3bc <e2p_edit_feature2+0x44>
 3b8:	str	wzr, [x21]
 3bc:	cbz	x20, 3c4 <e2p_edit_feature2+0x4c>
 3c0:	str	wzr, [x20]
 3c4:	mov	x0, x24
 3c8:	bl	0 <strlen>
 3cc:	add	x0, x0, #0x1
 3d0:	bl	0 <malloc>
 3d4:	cbz	x0, 540 <e2p_edit_feature2+0x1c8>
 3d8:	mov	x1, x24
 3dc:	mov	x19, x0
 3e0:	str	x20, [sp]
 3e4:	bl	0 <strcpy>
 3e8:	adrp	x24, 0 <e2p_feature2string>
 3ec:	adrp	x25, 0 <e2p_feature2string>
 3f0:	add	x24, x24, #0x0
 3f4:	add	x25, x25, #0x0
 3f8:	mov	x26, x0
 3fc:	ldrb	w20, [x26]
 400:	cbz	w20, 570 <e2p_edit_feature2+0x1f8>
 404:	bl	0 <__ctype_b_loc>
 408:	ldr	x8, [x0]
 40c:	and	x9, x20, #0xff
 410:	ldrh	w9, [x8, x9, lsl #1]
 414:	tbz	w9, #13, 428 <e2p_edit_feature2+0xb0>
 418:	ldrb	w20, [x26, #1]!
 41c:	cbnz	w20, 40c <e2p_edit_feature2+0x94>
 420:	mov	x28, xzr
 424:	b	460 <e2p_edit_feature2+0xe8>
 428:	and	w10, w20, #0xff
 42c:	cmp	w10, #0x2c
 430:	mov	x28, x26
 434:	b.eq	45c <e2p_edit_feature2+0xe4>  // b.none
 438:	mov	x28, x26
 43c:	tbnz	w9, #13, 45c <e2p_edit_feature2+0xe4>
 440:	mov	x28, x26
 444:	ldrb	w9, [x28, #1]!
 448:	cbz	x9, 420 <e2p_edit_feature2+0xa8>
 44c:	cmp	w9, #0x2c
 450:	b.eq	45c <e2p_edit_feature2+0xe4>  // b.none
 454:	ldrh	w9, [x8, x9, lsl #1]
 458:	tbz	w9, #13, 444 <e2p_edit_feature2+0xcc>
 45c:	strb	wzr, [x28]
 460:	mov	x0, x26
 464:	mov	x1, x24
 468:	bl	0 <strcasecmp>
 46c:	cbz	w0, 4dc <e2p_edit_feature2+0x164>
 470:	mov	x0, x26
 474:	mov	x1, x25
 478:	bl	0 <strcasecmp>
 47c:	cbz	w0, 4dc <e2p_edit_feature2+0x164>
 480:	ldrb	w8, [x26]
 484:	mov	w20, wzr
 488:	cmp	w8, #0x2b
 48c:	b.eq	4a4 <e2p_edit_feature2+0x12c>  // b.none
 490:	cmp	w8, #0x5e
 494:	b.eq	4a0 <e2p_edit_feature2+0x128>  // b.none
 498:	cmp	w8, #0x2d
 49c:	b.ne	4a8 <e2p_edit_feature2+0x130>  // b.any
 4a0:	mov	w20, #0x1                   	// #1
 4a4:	add	x26, x26, #0x1
 4a8:	add	x1, sp, #0x8
 4ac:	sub	x2, x29, #0x4
 4b0:	mov	x0, x26
 4b4:	bl	94 <e2p_string2feature>
 4b8:	cbnz	w0, 56c <e2p_edit_feature2+0x1f4>
 4bc:	cbz	w20, 4e8 <e2p_edit_feature2+0x170>
 4c0:	cbz	x27, 508 <e2p_edit_feature2+0x190>
 4c4:	ldrsw	x9, [sp, #8]
 4c8:	ldur	w8, [x29, #-4]
 4cc:	ldr	w10, [x27, x9, lsl #2]
 4d0:	tst	w8, w10
 4d4:	b.ne	510 <e2p_edit_feature2+0x198>  // b.any
 4d8:	b	548 <e2p_edit_feature2+0x1d0>
 4dc:	str	xzr, [x23]
 4e0:	str	wzr, [x23, #8]
 4e4:	b	530 <e2p_edit_feature2+0x1b8>
 4e8:	cbz	x22, 51c <e2p_edit_feature2+0x1a4>
 4ec:	ldr	w9, [sp, #8]
 4f0:	ldur	w8, [x29, #-4]
 4f4:	ldr	w10, [x22, w9, sxtw #2]
 4f8:	tst	w8, w10
 4fc:	b.eq	558 <e2p_edit_feature2+0x1e0>  // b.none
 500:	sxtw	x9, w9
 504:	b	524 <e2p_edit_feature2+0x1ac>
 508:	ldur	w8, [x29, #-4]
 50c:	ldrsw	x9, [sp, #8]
 510:	ldr	w10, [x23, x9, lsl #2]
 514:	bic	w8, w10, w8
 518:	b	52c <e2p_edit_feature2+0x1b4>
 51c:	ldur	w8, [x29, #-4]
 520:	ldrsw	x9, [sp, #8]
 524:	ldr	w10, [x23, x9, lsl #2]
 528:	orr	w8, w10, w8
 52c:	str	w8, [x23, x9, lsl #2]
 530:	add	x26, x28, #0x1
 534:	cbnz	x28, 3fc <e2p_edit_feature2+0x84>
 538:	mov	w20, wzr
 53c:	b	570 <e2p_edit_feature2+0x1f8>
 540:	mov	w20, #0x1                   	// #1
 544:	b	578 <e2p_edit_feature2+0x200>
 548:	cbz	x21, 560 <e2p_edit_feature2+0x1e8>
 54c:	orr	w9, w9, #0x80
 550:	str	w9, [x21]
 554:	b	560 <e2p_edit_feature2+0x1e8>
 558:	cbz	x21, 560 <e2p_edit_feature2+0x1e8>
 55c:	str	w9, [x21]
 560:	ldr	x9, [sp]
 564:	cbz	x9, 56c <e2p_edit_feature2+0x1f4>
 568:	str	w8, [x9]
 56c:	mov	w20, #0x1                   	// #1
 570:	mov	x0, x19
 574:	bl	0 <free>
 578:	mov	w0, w20
 57c:	ldp	x20, x19, [sp, #96]
 580:	ldp	x22, x21, [sp, #80]
 584:	ldp	x24, x23, [sp, #64]
 588:	ldp	x26, x25, [sp, #48]
 58c:	ldp	x28, x27, [sp, #32]
 590:	ldp	x29, x30, [sp, #16]
 594:	add	sp, sp, #0x70
 598:	ret

000000000000059c <e2p_edit_feature>:
 59c:	mov	x3, xzr
 5a0:	mov	x4, xzr
 5a4:	mov	x5, xzr
 5a8:	b	378 <e2p_edit_feature2>

fgetflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetflags>:
   0:	sub	sp, sp, #0xc0
   4:	stp	x20, x19, [sp, #176]
   8:	mov	x19, x1
   c:	add	x1, sp, #0x10
  10:	stp	x29, x30, [sp, #144]
  14:	stp	x22, x21, [sp, #160]
  18:	add	x29, sp, #0x90
  1c:	mov	x20, x0
  20:	bl	0 <lstat>
  24:	cbz	w0, 64 <fgetflags+0x64>
  28:	mov	w1, #0x800                 	// #2048
  2c:	mov	x0, x20
  30:	bl	0 <open>
  34:	cmn	w0, #0x1
  38:	b.eq	88 <fgetflags+0x88>  // b.none
  3c:	mov	w1, #0x6601                	// #26113
  40:	add	x2, sp, #0xc
  44:	movk	w1, #0x8008, lsl #16
  48:	mov	w21, w0
  4c:	bl	0 <ioctl>
  50:	mov	w20, w0
  54:	cmn	w0, #0x1
  58:	b.eq	90 <fgetflags+0x90>  // b.none
  5c:	mov	w22, wzr
  60:	b	98 <fgetflags+0x98>
  64:	ldr	w8, [sp, #32]
  68:	and	w8, w8, #0xf000
  6c:	cmp	w8, #0x8, lsl #12
  70:	b.eq	28 <fgetflags+0x28>  // b.none
  74:	cmp	w8, #0x4, lsl #12
  78:	b.eq	28 <fgetflags+0x28>  // b.none
  7c:	bl	0 <__errno_location>
  80:	mov	w8, #0x5f                  	// #95
  84:	str	w8, [x0]
  88:	mov	w20, #0xffffffff            	// #-1
  8c:	b	b4 <fgetflags+0xb4>
  90:	bl	0 <__errno_location>
  94:	ldr	w22, [x0]
  98:	ldrsw	x8, [sp, #12]
  9c:	mov	w0, w21
  a0:	str	x8, [x19]
  a4:	bl	0 <close>
  a8:	cbz	w22, b4 <fgetflags+0xb4>
  ac:	bl	0 <__errno_location>
  b0:	str	w22, [x0]
  b4:	mov	w0, w20
  b8:	ldp	x20, x19, [sp, #176]
  bc:	ldp	x22, x21, [sp, #160]
  c0:	ldp	x29, x30, [sp, #144]
  c4:	add	sp, sp, #0xc0
  c8:	ret

fsetflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetflags>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x20, x19, [sp, #160]
   8:	mov	x19, x1
   c:	mov	x1, sp
  10:	stp	x29, x30, [sp, #128]
  14:	str	x21, [sp, #144]
  18:	add	x29, sp, #0x80
  1c:	mov	x20, x0
  20:	bl	0 <lstat>
  24:	cbz	w0, 6c <fsetflags+0x6c>
  28:	mov	w1, #0x800                 	// #2048
  2c:	mov	x0, x20
  30:	bl	0 <open>
  34:	cmn	w0, #0x1
  38:	b.eq	b0 <fsetflags+0xb0>  // b.none
  3c:	mov	w1, #0x6602                	// #26114
  40:	add	x2, x29, #0x1c
  44:	movk	w1, #0x4008, lsl #16
  48:	mov	w20, w0
  4c:	str	w19, [x29, #28]
  50:	bl	0 <ioctl>
  54:	cmn	w0, #0x1
  58:	b.eq	94 <fsetflags+0x94>  // b.none
  5c:	mov	w19, w0
  60:	mov	w0, w20
  64:	bl	0 <close>
  68:	b	b4 <fsetflags+0xb4>
  6c:	ldr	w8, [sp, #16]
  70:	and	w8, w8, #0xf000
  74:	cmp	w8, #0x8, lsl #12
  78:	b.eq	28 <fsetflags+0x28>  // b.none
  7c:	cmp	w8, #0x4, lsl #12
  80:	b.eq	28 <fsetflags+0x28>  // b.none
  84:	bl	0 <__errno_location>
  88:	mov	w8, #0x5f                  	// #95
  8c:	str	w8, [x0]
  90:	b	b0 <fsetflags+0xb0>
  94:	bl	0 <__errno_location>
  98:	ldr	w21, [x0]
  9c:	mov	x19, x0
  a0:	mov	w0, w20
  a4:	bl	0 <close>
  a8:	cbz	w21, b0 <fsetflags+0xb0>
  ac:	str	w21, [x19]
  b0:	mov	w19, #0xffffffff            	// #-1
  b4:	mov	w0, w19
  b8:	ldp	x20, x19, [sp, #160]
  bc:	ldr	x21, [sp, #144]
  c0:	ldp	x29, x30, [sp, #128]
  c4:	add	sp, sp, #0xb0
  c8:	ret

fgetversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetversion>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x20, x19, [sp, #32]
   8:	mov	x29, sp
   c:	mov	x20, x1
  10:	mov	w19, #0xffffffff            	// #-1
  14:	mov	w1, #0x800                 	// #2048
  18:	str	x21, [sp, #16]
  1c:	str	w19, [x29, #28]
  20:	bl	0 <open>
  24:	cmn	w0, #0x1
  28:	b.eq	80 <fgetversion+0x80>  // b.none
  2c:	mov	w1, #0x7601                	// #30209
  30:	add	x2, x29, #0x1c
  34:	movk	w1, #0x8008, lsl #16
  38:	mov	w21, w0
  3c:	bl	0 <ioctl>
  40:	cmn	w0, #0x1
  44:	b.eq	64 <fgetversion+0x64>  // b.none
  48:	mov	w19, w0
  4c:	mov	w0, w21
  50:	bl	0 <close>
  54:	cbnz	w19, 80 <fgetversion+0x80>
  58:	ldr	w8, [x29, #28]
  5c:	str	x8, [x20]
  60:	b	80 <fgetversion+0x80>
  64:	bl	0 <__errno_location>
  68:	ldr	w20, [x0]
  6c:	mov	x19, x0
  70:	mov	w0, w21
  74:	bl	0 <close>
  78:	str	w20, [x19]
  7c:	mov	w19, #0xffffffff            	// #-1
  80:	mov	w0, w19
  84:	ldp	x20, x19, [sp, #32]
  88:	ldr	x21, [sp, #16]
  8c:	ldp	x29, x30, [sp], #48
  90:	ret

fsetversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetversion>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x20, x19, [sp, #32]
   8:	mov	x20, x1
   c:	mov	w1, #0x800                 	// #2048
  10:	str	x21, [sp, #16]
  14:	mov	x29, sp
  18:	bl	0 <open>
  1c:	cmn	w0, #0x1
  20:	b.eq	70 <fsetversion+0x70>  // b.none
  24:	mov	w1, #0x7602                	// #30210
  28:	add	x2, x29, #0x1c
  2c:	movk	w1, #0x4008, lsl #16
  30:	mov	w19, w0
  34:	str	w20, [x29, #28]
  38:	bl	0 <ioctl>
  3c:	cmn	w0, #0x1
  40:	b.eq	54 <fsetversion+0x54>  // b.none
  44:	mov	w20, w0
  48:	mov	w0, w19
  4c:	bl	0 <close>
  50:	b	74 <fsetversion+0x74>
  54:	bl	0 <__errno_location>
  58:	ldr	w21, [x0]
  5c:	mov	x20, x0
  60:	mov	w0, w19
  64:	bl	0 <close>
  68:	cbz	w21, 70 <fsetversion+0x70>
  6c:	str	w21, [x20]
  70:	mov	w20, #0xffffffff            	// #-1
  74:	mov	w0, w20
  78:	ldp	x20, x19, [sp, #32]
  7c:	ldr	x21, [sp, #16]
  80:	ldp	x29, x30, [sp], #48
  84:	ret

getflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getflags>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x20, x19, [sp, #160]
   8:	mov	x19, x1
   c:	add	x1, sp, #0x10
  10:	stp	x29, x30, [sp, #144]
  14:	add	x29, sp, #0x90
  18:	mov	w20, w0
  1c:	bl	0 <fstat>
  20:	cbz	w0, 50 <getflags+0x50>
  24:	mov	w1, #0x6601                	// #26113
  28:	add	x2, sp, #0xc
  2c:	movk	w1, #0x8008, lsl #16
  30:	mov	w0, w20
  34:	bl	0 <ioctl>
  38:	ldrsw	x8, [sp, #12]
  3c:	str	x8, [x19]
  40:	ldp	x20, x19, [sp, #160]
  44:	ldp	x29, x30, [sp, #144]
  48:	add	sp, sp, #0xb0
  4c:	ret
  50:	ldr	w8, [sp, #32]
  54:	and	w8, w8, #0xf000
  58:	cmp	w8, #0x8, lsl #12
  5c:	b.eq	24 <getflags+0x24>  // b.none
  60:	cmp	w8, #0x4, lsl #12
  64:	b.eq	24 <getflags+0x24>  // b.none
  68:	bl	0 <__errno_location>
  6c:	mov	w8, #0x5f                  	// #95
  70:	str	w8, [x0]
  74:	mov	w0, #0xffffffff            	// #-1
  78:	b	40 <getflags+0x40>

getversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <getversion>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	mov	x19, x1
  10:	mov	w1, #0x7601                	// #30209
  14:	add	x2, x29, #0x1c
  18:	movk	w1, #0x8008, lsl #16
  1c:	bl	0 <ioctl>
  20:	ldrsw	x8, [x29, #28]
  24:	str	x8, [x19]
  28:	ldr	x19, [sp, #16]
  2c:	ldp	x29, x30, [sp], #32
  30:	ret

hashstr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_hash2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	w0, 38 <e2p_hash2string+0x38>
  10:	adrp	x8, 0 <e2p_hash2string>
  14:	mov	w2, w0
  18:	add	x8, x8, #0x0
  1c:	ldr	x19, [x8]
  20:	cbz	x19, 44 <e2p_hash2string+0x44>
  24:	ldur	w9, [x8, #-8]
  28:	add	x8, x8, #0x10
  2c:	cmp	w9, w2
  30:	b.ne	1c <e2p_hash2string+0x1c>  // b.any
  34:	b	5c <e2p_hash2string+0x5c>
  38:	adrp	x19, 0 <e2p_hash2string>
  3c:	add	x19, x19, #0x0
  40:	b	5c <e2p_hash2string+0x5c>
  44:	adrp	x19, 0 <e2p_hash2string>
  48:	add	x19, x19, #0x0
  4c:	adrp	x1, 0 <e2p_hash2string>
  50:	add	x1, x1, #0x0
  54:	mov	x0, x19
  58:	bl	0 <sprintf>
  5c:	mov	x0, x19
  60:	ldr	x19, [sp, #16]
  64:	ldp	x29, x30, [sp], #32
  68:	ret

000000000000006c <e2p_string2hash>:
  6c:	sub	sp, sp, #0x30
  70:	stp	x20, x19, [sp, #32]
  74:	adrp	x20, 0 <e2p_hash2string>
  78:	adrp	x1, 0 <e2p_hash2string>
  7c:	mov	x19, x0
  80:	add	x20, x20, #0x0
  84:	add	x1, x1, #0x0
  88:	stp	x29, x30, [sp, #16]
  8c:	add	x29, sp, #0x10
  90:	mov	x0, x19
  94:	bl	0 <strcasecmp>
  98:	cbz	w0, c8 <e2p_string2hash+0x5c>
  9c:	ldr	x1, [x20, #24]
  a0:	add	x20, x20, #0x10
  a4:	cbnz	x1, 90 <e2p_string2hash+0x24>
  a8:	adrp	x1, 0 <e2p_hash2string>
  ac:	add	x1, x1, #0x0
  b0:	mov	w2, #0x8                   	// #8
  b4:	mov	x0, x19
  b8:	bl	0 <strncasecmp>
  bc:	cbz	w0, dc <e2p_string2hash+0x70>
  c0:	mov	w0, #0xffffffff            	// #-1
  c4:	b	cc <e2p_string2hash+0x60>
  c8:	ldr	w0, [x20]
  cc:	ldp	x20, x19, [sp, #32]
  d0:	ldp	x29, x30, [sp, #16]
  d4:	add	sp, sp, #0x30
  d8:	ret
  dc:	ldrb	w8, [x19, #8]!
  e0:	cbz	w8, c0 <e2p_string2hash+0x54>
  e4:	add	x1, sp, #0x8
  e8:	mov	w2, #0xa                   	// #10
  ec:	mov	x0, x19
  f0:	bl	0 <strtol>
  f4:	cmp	w0, #0xff
  f8:	b.hi	c0 <e2p_string2hash+0x54>  // b.pmore
  fc:	ldr	x8, [sp, #8]
 100:	ldrb	w8, [x8]
 104:	cmp	w8, #0x0
 108:	csinv	w0, w0, wzr, eq  // eq = none
 10c:	b	cc <e2p_string2hash+0x60>

iod.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <iterate_on_dir>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	stp	x20, x19, [sp, #64]
   8:	mov	x20, x1
   c:	mov	w1, #0x3                   	// #3
  10:	str	x25, [sp, #16]
  14:	stp	x24, x23, [sp, #32]
  18:	stp	x22, x21, [sp, #48]
  1c:	mov	x29, sp
  20:	mov	x19, x2
  24:	mov	x21, x0
  28:	bl	0 <pathconf>
  2c:	add	w8, w0, #0x118
  30:	cmn	w0, #0x1
  34:	mov	w9, #0x126                 	// #294
  38:	csel	w25, w9, w8, eq  // eq = none
  3c:	add	w8, w25, #0x1
  40:	sxtw	x23, w8
  44:	mov	x0, x23
  48:	bl	0 <malloc>
  4c:	cbz	x0, cc <iterate_on_dir+0xcc>
  50:	mov	w1, wzr
  54:	mov	x2, x23
  58:	mov	x22, x0
  5c:	bl	0 <memset>
  60:	mov	x0, x21
  64:	bl	0 <opendir>
  68:	cbz	x0, c4 <iterate_on_dir+0xc4>
  6c:	mov	x23, x0
  70:	bl	0 <readdir>
  74:	cbz	x0, d4 <iterate_on_dir+0xd4>
  78:	mov	x1, x0
  7c:	mov	w24, wzr
  80:	ldrh	w8, [x1, #16]
  84:	mov	x0, x22
  88:	cmp	w25, w8
  8c:	csel	w8, w25, w8, lt  // lt = tstop
  90:	sxtw	x2, w8
  94:	bl	0 <memcpy>
  98:	mov	x0, x21
  9c:	mov	x1, x22
  a0:	mov	x2, x19
  a4:	blr	x20
  a8:	cmp	w0, #0x0
  ac:	mov	x0, x23
  b0:	cinc	w24, w24, ne  // ne = any
  b4:	bl	0 <readdir>
  b8:	mov	x1, x0
  bc:	cbnz	x0, 80 <iterate_on_dir+0x80>
  c0:	b	d8 <iterate_on_dir+0xd8>
  c4:	mov	x0, x22
  c8:	bl	0 <free>
  cc:	mov	w24, #0xffffffff            	// #-1
  d0:	b	e8 <iterate_on_dir+0xe8>
  d4:	mov	w24, wzr
  d8:	mov	x0, x22
  dc:	bl	0 <free>
  e0:	mov	x0, x23
  e4:	bl	0 <closedir>
  e8:	mov	w0, w24
  ec:	ldp	x20, x19, [sp, #64]
  f0:	ldp	x22, x21, [sp, #48]
  f4:	ldp	x24, x23, [sp, #32]
  f8:	ldr	x25, [sp, #16]
  fc:	ldp	x29, x30, [sp], #80
 100:	ret

ls.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <list_super2>:
   0:	sub	sp, sp, #0xc0
   4:	stp	x29, x30, [sp, #96]
   8:	stp	x26, x25, [sp, #128]
   c:	stp	x24, x23, [sp, #144]
  10:	stp	x22, x21, [sp, #160]
  14:	stp	x20, x19, [sp, #176]
  18:	ldr	w9, [x0, #76]
  1c:	ldr	w8, [x0, #40]
  20:	mov	x20, x0
  24:	mov	x19, x1
  28:	str	x27, [sp, #112]
  2c:	add	x29, sp, #0x60
  30:	cbz	w9, 3c <list_super2+0x3c>
  34:	ldrh	w9, [x20, #88]
  38:	b	40 <list_super2+0x40>
  3c:	mov	w9, #0x80                  	// #128
  40:	mov	x1, x20
  44:	ldrb	w10, [x1, #120]!
  48:	mov	w11, #0x400                 	// #1024
  4c:	ldur	w22, [x1, #-96]
  50:	lsl	w11, w11, w22
  54:	madd	w21, w9, w8, w11
  58:	cbz	w10, 7c <list_super2+0x7c>
  5c:	movi	v0.2d, #0x0
  60:	add	x0, sp, #0x10
  64:	mov	w2, #0x10                  	// #16
  68:	stp	q0, q0, [sp, #64]
  6c:	stp	q0, q0, [sp, #32]
  70:	str	q0, [sp, #16]
  74:	bl	0 <strncpy>
  78:	b	94 <list_super2+0x94>
  7c:	mov	w8, #0x656e                	// #25966
  80:	mov	w9, #0x6e3c                	// #28220
  84:	movk	w8, #0x3e, lsl #16
  88:	movk	w9, #0x6e6f, lsl #16
  8c:	stur	w8, [sp, #19]
  90:	str	w9, [sp, #16]
  94:	adrp	x1, 0 <list_super2>
  98:	add	x1, x1, #0x0
  9c:	add	x2, sp, #0x10
  a0:	mov	x0, x19
  a4:	sub	w21, w21, #0x1
  a8:	add	w22, w22, #0xa
  ac:	bl	0 <fprintf>
  b0:	mov	x1, x20
  b4:	ldrb	w8, [x1, #136]!
  b8:	cbz	w8, dc <list_super2+0xdc>
  bc:	movi	v0.2d, #0x0
  c0:	add	x0, sp, #0x10
  c4:	mov	w2, #0x40                  	// #64
  c8:	stp	q0, q0, [sp, #64]
  cc:	stp	q0, q0, [sp, #32]
  d0:	str	q0, [sp, #16]
  d4:	bl	0 <strncpy>
  d8:	b	ec <list_super2+0xec>
  dc:	adrp	x8, 0 <list_super2>
  e0:	add	x8, x8, #0x0
  e4:	ldr	q0, [x8]
  e8:	str	q0, [sp, #16]
  ec:	adrp	x1, 0 <list_super2>
  f0:	add	x1, x1, #0x0
  f4:	add	x2, sp, #0x10
  f8:	mov	x0, x19
  fc:	lsr	w21, w21, w22
 100:	bl	0 <fprintf>
 104:	add	x0, x20, #0x68
 108:	bl	0 <e2p_uuid2str>
 10c:	adrp	x1, 0 <list_super2>
 110:	mov	x2, x0
 114:	add	x1, x1, #0x0
 118:	mov	x0, x19
 11c:	bl	0 <fprintf>
 120:	ldrh	w2, [x20, #56]
 124:	adrp	x1, 0 <list_super2>
 128:	add	x1, x1, #0x0
 12c:	mov	x0, x19
 130:	bl	0 <fprintf>
 134:	ldr	w2, [x20, #76]
 138:	adrp	x1, 0 <list_super2>
 13c:	add	x1, x1, #0x0
 140:	mov	x0, x19
 144:	bl	0 <fprintf>
 148:	ldr	w8, [x20, #76]
 14c:	cmp	w8, #0x1
 150:	b.eq	168 <list_super2+0x168>  // b.none
 154:	cbnz	w8, 174 <list_super2+0x174>
 158:	adrp	x0, 0 <list_super2>
 15c:	add	x0, x0, #0x0
 160:	mov	w1, #0xc                   	// #12
 164:	b	180 <list_super2+0x180>
 168:	adrp	x0, 0 <list_super2>
 16c:	add	x0, x0, #0x0
 170:	b	17c <list_super2+0x17c>
 174:	adrp	x0, 0 <list_super2>
 178:	add	x0, x0, #0x0
 17c:	mov	w1, #0xb                   	// #11
 180:	mov	w2, #0x1                   	// #1
 184:	mov	x3, x19
 188:	bl	0 <fwrite>
 18c:	adrp	x0, 0 <list_super2>
 190:	add	x0, x0, #0x0
 194:	mov	w1, #0x19                  	// #25
 198:	mov	w2, #0x1                   	// #1
 19c:	mov	x3, x19
 1a0:	add	x25, x20, #0x5c
 1a4:	bl	0 <fwrite>
 1a8:	adrp	x23, 0 <list_super2>
 1ac:	mov	w26, wzr
 1b0:	mov	w22, wzr
 1b4:	add	x23, x23, #0x0
 1b8:	mov	w24, #0x1                   	// #1
 1bc:	mov	w27, #0x20                  	// #32
 1c0:	ldr	w8, [x25]
 1c4:	tst	w8, w24
 1c8:	b.eq	1ec <list_super2+0x1ec>  // b.none
 1cc:	mov	w0, w22
 1d0:	mov	w1, w24
 1d4:	bl	0 <e2p_feature2string>
 1d8:	mov	x2, x0
 1dc:	mov	x0, x19
 1e0:	mov	x1, x23
 1e4:	bl	0 <fprintf>
 1e8:	add	w26, w26, #0x1
 1ec:	subs	w27, w27, #0x1
 1f0:	lsl	w24, w24, #1
 1f4:	b.ne	1c0 <list_super2+0x1c0>  // b.any
 1f8:	add	w22, w22, #0x1
 1fc:	cmp	w22, #0x3
 200:	add	x25, x25, #0x4
 204:	b.ne	1b8 <list_super2+0x1b8>  // b.any
 208:	cbnz	w26, 224 <list_super2+0x224>
 20c:	adrp	x0, 0 <list_super2>
 210:	add	x0, x0, #0x0
 214:	mov	w1, #0x7                   	// #7
 218:	mov	w2, #0x1                   	// #1
 21c:	mov	x3, x19
 220:	bl	0 <fwrite>
 224:	mov	w0, #0xa                   	// #10
 228:	mov	x1, x19
 22c:	bl	0 <fputc>
 230:	ldr	w8, [x20, #352]
 234:	cbz	w8, 2d0 <list_super2+0x2d0>
 238:	adrp	x0, 0 <list_super2>
 23c:	add	x0, x0, #0x0
 240:	mov	x1, x19
 244:	bl	0 <fputs>
 248:	ldr	w8, [x20, #352]
 24c:	tbnz	w8, #0, 25c <list_super2+0x25c>
 250:	mov	w9, wzr
 254:	tbnz	w8, #1, 278 <list_super2+0x278>
 258:	b	290 <list_super2+0x290>
 25c:	adrp	x0, 0 <list_super2>
 260:	add	x0, x0, #0x0
 264:	mov	x1, x19
 268:	bl	0 <fputs>
 26c:	ldr	w8, [x20, #352]
 270:	mov	w9, #0x1                   	// #1
 274:	tbz	w8, #1, 290 <list_super2+0x290>
 278:	adrp	x0, 0 <list_super2>
 27c:	add	x0, x0, #0x0
 280:	mov	x1, x19
 284:	bl	0 <fputs>
 288:	ldr	w8, [x20, #352]
 28c:	mov	w9, #0x1                   	// #1
 290:	tbnz	w8, #2, 2b0 <list_super2+0x2b0>
 294:	adrp	x8, 0 <list_super2>
 298:	adrp	x10, 0 <list_super2>
 29c:	add	x8, x8, #0x0
 2a0:	add	x10, x10, #0x0
 2a4:	cmp	w9, #0x0
 2a8:	csel	x0, x10, x8, eq  // eq = none
 2ac:	b	2c8 <list_super2+0x2c8>
 2b0:	adrp	x0, 0 <list_super2>
 2b4:	add	x0, x0, #0x0
 2b8:	mov	x1, x19
 2bc:	bl	0 <fputs>
 2c0:	adrp	x0, 0 <list_super2>
 2c4:	add	x0, x0, #0x0
 2c8:	mov	x1, x19
 2cc:	bl	0 <fputs>
 2d0:	ldr	w24, [x20, #256]
 2d4:	adrp	x0, 0 <list_super2>
 2d8:	add	x0, x0, #0x0
 2dc:	mov	w1, #0x19                  	// #25
 2e0:	mov	w2, #0x1                   	// #1
 2e4:	mov	x3, x19
 2e8:	bl	0 <fwrite>
 2ec:	ands	w0, w24, #0x60
 2f0:	b.eq	314 <list_super2+0x314>  // b.none
 2f4:	bl	0 <e2p_mntopt2string>
 2f8:	adrp	x1, 0 <list_super2>
 2fc:	mov	x2, x0
 300:	add	x1, x1, #0x0
 304:	mov	x0, x19
 308:	bl	0 <fprintf>
 30c:	mov	w25, #0x1                   	// #1
 310:	b	318 <list_super2+0x318>
 314:	mov	w25, wzr
 318:	adrp	x23, 0 <list_super2>
 31c:	mov	w22, #0x1                   	// #1
 320:	mov	w26, #0x20                  	// #32
 324:	add	x23, x23, #0x0
 328:	tst	w22, #0x60
 32c:	b.ne	354 <list_super2+0x354>  // b.any
 330:	and	w8, w22, w24
 334:	cbz	w8, 354 <list_super2+0x354>
 338:	mov	w0, w22
 33c:	bl	0 <e2p_mntopt2string>
 340:	mov	x2, x0
 344:	mov	x0, x19
 348:	mov	x1, x23
 34c:	bl	0 <fprintf>
 350:	add	w25, w25, #0x1
 354:	subs	w26, w26, #0x1
 358:	lsl	w22, w22, #1
 35c:	b.ne	328 <list_super2+0x328>  // b.any
 360:	cbnz	w25, 37c <list_super2+0x37c>
 364:	adrp	x0, 0 <list_super2>
 368:	add	x0, x0, #0x0
 36c:	mov	w1, #0x7                   	// #7
 370:	mov	w2, #0x1                   	// #1
 374:	mov	x3, x19
 378:	bl	0 <fwrite>
 37c:	mov	w0, #0xa                   	// #10
 380:	mov	x1, x19
 384:	bl	0 <fputc>
 388:	ldrb	w8, [x20, #512]
 38c:	cbz	w8, 3a4 <list_super2+0x3a4>
 390:	adrp	x1, 0 <list_super2>
 394:	add	x2, x20, #0x200
 398:	add	x1, x1, #0x0
 39c:	mov	x0, x19
 3a0:	bl	0 <fprintf>
 3a4:	adrp	x0, 0 <list_super2>
 3a8:	add	x0, x0, #0x0
 3ac:	mov	w1, #0x19                  	// #25
 3b0:	mov	w2, #0x1                   	// #1
 3b4:	mov	x3, x19
 3b8:	bl	0 <fwrite>
 3bc:	ldrh	w1, [x20, #58]
 3c0:	mov	x0, x19
 3c4:	bl	0 <print_fs_state>
 3c8:	mov	w0, #0xa                   	// #10
 3cc:	mov	x1, x19
 3d0:	bl	0 <fputc>
 3d4:	adrp	x0, 0 <list_super2>
 3d8:	add	x0, x0, #0x0
 3dc:	mov	w1, #0x1a                  	// #26
 3e0:	mov	w2, #0x1                   	// #1
 3e4:	mov	x3, x19
 3e8:	bl	0 <fwrite>
 3ec:	ldrh	w1, [x20, #60]
 3f0:	mov	x0, x19
 3f4:	bl	0 <print_fs_errors>
 3f8:	mov	w0, #0xa                   	// #10
 3fc:	mov	x1, x19
 400:	bl	0 <fputc>
 404:	ldr	w0, [x20, #72]
 408:	bl	0 <e2p_os2string>
 40c:	mov	x22, x0
 410:	adrp	x1, 0 <list_super2>
 414:	add	x1, x1, #0x0
 418:	mov	x0, x19
 41c:	mov	x2, x22
 420:	bl	0 <fprintf>
 424:	mov	x0, x22
 428:	bl	0 <free>
 42c:	ldr	w2, [x20]
 430:	adrp	x1, 0 <list_super2>
 434:	add	x1, x1, #0x0
 438:	mov	x0, x19
 43c:	bl	0 <fprintf>
 440:	ldrb	w9, [x20, #96]
 444:	ldr	w8, [x20, #4]
 448:	tbnz	w9, #7, 454 <list_super2+0x454>
 44c:	mov	x9, xzr
 450:	b	45c <list_super2+0x45c>
 454:	ldr	w9, [x20, #336]
 458:	lsl	x9, x9, #32
 45c:	adrp	x1, 0 <list_super2>
 460:	orr	x2, x9, x8
 464:	add	x1, x1, #0x0
 468:	mov	x0, x19
 46c:	bl	0 <fprintf>
 470:	ldrb	w9, [x20, #96]
 474:	ldr	w8, [x20, #8]
 478:	tbnz	w9, #7, 484 <list_super2+0x484>
 47c:	mov	x9, xzr
 480:	b	48c <list_super2+0x48c>
 484:	ldr	w9, [x20, #340]
 488:	lsl	x9, x9, #32
 48c:	adrp	x1, 0 <list_super2>
 490:	orr	x2, x9, x8
 494:	add	x1, x1, #0x0
 498:	mov	x0, x19
 49c:	bl	0 <fprintf>
 4a0:	ldr	w2, [x20, #584]
 4a4:	cbz	w2, 4b8 <list_super2+0x4b8>
 4a8:	adrp	x1, 0 <list_super2>
 4ac:	add	x1, x1, #0x0
 4b0:	mov	x0, x19
 4b4:	bl	0 <fprintf>
 4b8:	ldrb	w9, [x20, #96]
 4bc:	ldr	w8, [x20, #12]
 4c0:	tbnz	w9, #7, 4cc <list_super2+0x4cc>
 4c4:	mov	x9, xzr
 4c8:	b	4d4 <list_super2+0x4d4>
 4cc:	ldr	w9, [x20, #344]
 4d0:	lsl	x9, x9, #32
 4d4:	adrp	x1, 0 <list_super2>
 4d8:	orr	x2, x9, x8
 4dc:	add	x1, x1, #0x0
 4e0:	mov	x0, x19
 4e4:	bl	0 <fprintf>
 4e8:	ldr	w2, [x20, #16]
 4ec:	adrp	x1, 0 <list_super2>
 4f0:	add	x1, x1, #0x0
 4f4:	mov	x0, x19
 4f8:	bl	0 <fprintf>
 4fc:	ldr	w2, [x20, #20]
 500:	adrp	x1, 0 <list_super2>
 504:	add	x1, x1, #0x0
 508:	mov	x0, x19
 50c:	bl	0 <fprintf>
 510:	ldr	w8, [x20, #24]
 514:	mov	w22, #0x400                 	// #1024
 518:	adrp	x1, 0 <list_super2>
 51c:	add	x1, x1, #0x0
 520:	lsl	w2, w22, w8
 524:	mov	x0, x19
 528:	bl	0 <fprintf>
 52c:	ldr	w9, [x20, #100]
 530:	ldr	w8, [x20, #28]
 534:	adrp	x10, 0 <list_super2>
 538:	adrp	x11, 0 <list_super2>
 53c:	add	x10, x10, #0x0
 540:	add	x11, x11, #0x0
 544:	tst	w9, #0x200
 548:	lsl	w2, w22, w8
 54c:	csel	x1, x11, x10, eq  // eq = none
 550:	mov	x0, x19
 554:	bl	0 <fprintf>
 558:	ldrb	w8, [x20, #96]
 55c:	tbz	w8, #7, 574 <list_super2+0x574>
 560:	ldrh	w2, [x20, #254]
 564:	adrp	x1, 0 <list_super2>
 568:	add	x1, x1, #0x0
 56c:	mov	x0, x19
 570:	bl	0 <fprintf>
 574:	ldrh	w2, [x20, #206]
 578:	cbz	w2, 58c <list_super2+0x58c>
 57c:	adrp	x1, 0 <list_super2>
 580:	add	x1, x1, #0x0
 584:	mov	x0, x19
 588:	bl	0 <fprintf>
 58c:	ldr	w2, [x20, #32]
 590:	adrp	x1, 0 <list_super2>
 594:	add	x1, x1, #0x0
 598:	mov	x0, x19
 59c:	bl	0 <fprintf>
 5a0:	ldr	w8, [x20, #100]
 5a4:	ldr	w2, [x20, #36]
 5a8:	adrp	x9, 0 <list_super2>
 5ac:	adrp	x10, 0 <list_super2>
 5b0:	add	x9, x9, #0x0
 5b4:	add	x10, x10, #0x0
 5b8:	tst	w8, #0x200
 5bc:	csel	x1, x10, x9, eq  // eq = none
 5c0:	mov	x0, x19
 5c4:	bl	0 <fprintf>
 5c8:	ldr	w2, [x20, #40]
 5cc:	adrp	x1, 0 <list_super2>
 5d0:	add	x1, x1, #0x0
 5d4:	mov	x0, x19
 5d8:	bl	0 <fprintf>
 5dc:	adrp	x1, 0 <list_super2>
 5e0:	add	x1, x1, #0x0
 5e4:	mov	x0, x19
 5e8:	mov	w2, w21
 5ec:	bl	0 <fprintf>
 5f0:	ldrh	w2, [x20, #356]
 5f4:	cbz	w2, 608 <list_super2+0x608>
 5f8:	adrp	x1, 0 <list_super2>
 5fc:	add	x1, x1, #0x0
 600:	mov	x0, x19
 604:	bl	0 <fprintf>
 608:	ldr	w2, [x20, #368]
 60c:	cbz	w2, 620 <list_super2+0x620>
 610:	adrp	x1, 0 <list_super2>
 614:	add	x1, x1, #0x0
 618:	mov	x0, x19
 61c:	bl	0 <fprintf>
 620:	ldr	w2, [x20, #260]
 624:	cbz	w2, 638 <list_super2+0x638>
 628:	adrp	x1, 0 <list_super2>
 62c:	add	x1, x1, #0x0
 630:	mov	x0, x19
 634:	bl	0 <fprintf>
 638:	ldrb	w8, [x20, #372]
 63c:	cbz	w8, 658 <list_super2+0x658>
 640:	mov	w9, #0x1                   	// #1
 644:	adrp	x1, 0 <list_super2>
 648:	lsl	w2, w9, w8
 64c:	add	x1, x1, #0x0
 650:	mov	x0, x19
 654:	bl	0 <fprintf>
 658:	ldr	w8, [x20, #264]
 65c:	cbz	w8, 680 <list_super2+0x680>
 660:	add	x0, x29, #0x18
 664:	str	x8, [x29, #24]
 668:	bl	0 <ctime>
 66c:	adrp	x1, 0 <list_super2>
 670:	mov	x2, x0
 674:	add	x1, x1, #0x0
 678:	mov	x0, x19
 67c:	bl	0 <fprintf>
 680:	ldr	w8, [x20, #44]
 684:	str	x8, [x29, #24]
 688:	cbz	w8, 69c <list_super2+0x69c>
 68c:	add	x0, x29, #0x18
 690:	bl	0 <ctime>
 694:	mov	x2, x0
 698:	b	6a4 <list_super2+0x6a4>
 69c:	adrp	x2, 0 <list_super2>
 6a0:	add	x2, x2, #0x0
 6a4:	adrp	x1, 0 <list_super2>
 6a8:	add	x1, x1, #0x0
 6ac:	mov	x0, x19
 6b0:	bl	0 <fprintf>
 6b4:	ldr	w8, [x20, #48]
 6b8:	add	x0, x29, #0x18
 6bc:	str	x8, [x29, #24]
 6c0:	bl	0 <ctime>
 6c4:	adrp	x1, 0 <list_super2>
 6c8:	mov	x2, x0
 6cc:	add	x1, x1, #0x0
 6d0:	mov	x0, x19
 6d4:	bl	0 <fprintf>
 6d8:	ldrh	w2, [x20, #52]
 6dc:	adrp	x1, 0 <list_super2>
 6e0:	add	x1, x1, #0x0
 6e4:	mov	x0, x19
 6e8:	bl	0 <fprintf>
 6ec:	ldrsh	w2, [x20, #54]
 6f0:	adrp	x1, 0 <list_super2>
 6f4:	add	x1, x1, #0x0
 6f8:	mov	x0, x19
 6fc:	bl	0 <fprintf>
 700:	ldr	w8, [x20, #64]
 704:	add	x0, x29, #0x18
 708:	str	x8, [x29, #24]
 70c:	bl	0 <ctime>
 710:	adrp	x1, 0 <list_super2>
 714:	mov	x2, x0
 718:	add	x1, x1, #0x0
 71c:	mov	x0, x19
 720:	bl	0 <fprintf>
 724:	ldr	w21, [x20, #68]
 728:	adrp	x8, 0 <list_super2>
 72c:	strb	wzr, [x8]
 730:	cbz	w21, 8e0 <list_super2+0x8e0>
 734:	mov	w8, #0x8cff                	// #36095
 738:	movk	w8, #0x27, lsl #16
 73c:	adrp	x24, 0 <list_super2>
 740:	adrp	x26, 0 <list_super2>
 744:	cmp	w21, w8
 748:	add	x24, x24, #0x0
 74c:	add	x26, x26, #0x0
 750:	mov	w23, w21
 754:	b.ls	790 <list_super2+0x790>  // b.plast
 758:	mov	w10, #0x19ff                	// #6655
 75c:	movk	w10, #0x4f, lsl #16
 760:	add	w8, w8, #0x1
 764:	mov	w9, #0x7300                	// #29440
 768:	cmp	w21, w10
 76c:	adrp	x0, 0 <list_super2>
 770:	adrp	x1, 0 <list_super2>
 774:	movk	w9, #0xffd8, lsl #16
 778:	udiv	w2, w21, w8
 77c:	csel	x3, x26, x24, hi  // hi = pmore
 780:	add	x0, x0, #0x0
 784:	add	x1, x1, #0x0
 788:	madd	w23, w2, w9, w21
 78c:	bl	0 <sprintf>
 790:	mov	w8, #0x3a7f                	// #14975
 794:	movk	w8, #0x9, lsl #16
 798:	adrp	x22, 0 <list_super2>
 79c:	adrp	x25, 0 <list_super2>
 7a0:	cmp	w23, w8
 7a4:	add	x22, x22, #0x0
 7a8:	add	x25, x25, #0x0
 7ac:	b.ls	808 <list_super2+0x808>  // b.plast
 7b0:	ldrb	w10, [x22]
 7b4:	add	w8, w8, #0x1
 7b8:	mov	w9, #0xc580                	// #50560
 7bc:	mov	w11, #0x74ff                	// #29951
 7c0:	movk	w9, #0xfff6, lsl #16
 7c4:	movk	w11, #0x12, lsl #16
 7c8:	udiv	w3, w23, w8
 7cc:	cmp	w10, #0x0
 7d0:	madd	w27, w3, w9, w23
 7d4:	csel	x2, x24, x25, eq  // eq = none
 7d8:	cmp	w23, w11
 7dc:	adrp	x23, 0 <list_super2>
 7e0:	add	x23, x23, #0x0
 7e4:	adrp	x1, 0 <list_super2>
 7e8:	csel	x4, x26, x24, hi  // hi = pmore
 7ec:	add	x1, x1, #0x0
 7f0:	mov	x0, x23
 7f4:	bl	0 <sprintf>
 7f8:	mov	x0, x22
 7fc:	mov	x1, x23
 800:	bl	0 <strcat>
 804:	mov	w23, w27
 808:	lsr	w8, w23, #7
 80c:	cmp	w8, #0x2a3
 810:	b.cc	870 <list_super2+0x870>  // b.lo, b.ul, b.last
 814:	mov	w8, #0x517f                	// #20863
 818:	ldrb	w10, [x22]
 81c:	movk	w8, #0x1, lsl #16
 820:	mov	w9, #0xae80                	// #44672
 824:	add	w8, w8, #0x1
 828:	movk	w9, #0xfffe, lsl #16
 82c:	udiv	w3, w23, w8
 830:	lsr	w11, w23, #8
 834:	madd	w27, w3, w9, w23
 838:	cmp	w10, #0x0
 83c:	adrp	x23, 0 <list_super2>
 840:	csel	x2, x24, x25, eq  // eq = none
 844:	cmp	w11, #0x2a2
 848:	add	x23, x23, #0x0
 84c:	adrp	x1, 0 <list_super2>
 850:	csel	x4, x26, x24, hi  // hi = pmore
 854:	add	x1, x1, #0x0
 858:	mov	x0, x23
 85c:	bl	0 <sprintf>
 860:	mov	x0, x22
 864:	mov	x1, x23
 868:	bl	0 <strcat>
 86c:	mov	w23, w27
 870:	adrp	x22, 0 <list_super2>
 874:	add	x22, x22, #0x0
 878:	cbz	w23, 8e8 <list_super2+0x8e8>
 87c:	mov	w8, #0xb3c5                	// #46021
 880:	movk	w8, #0x91a2, lsl #16
 884:	ldrb	w12, [x22]
 888:	umull	x8, w23, w8
 88c:	mov	w9, #0xfffff1f0            	// #-3600
 890:	mov	w10, #0x8889                	// #34953
 894:	lsr	x3, x8, #43
 898:	movk	w10, #0x8888, lsl #16
 89c:	madd	w8, w3, w9, w23
 8a0:	umull	x9, w8, w10
 8a4:	adrp	x23, 0 <list_super2>
 8a8:	mov	w11, #0xffffffc4            	// #-60
 8ac:	cmp	w12, #0x0
 8b0:	lsr	x4, x9, #37
 8b4:	add	x23, x23, #0x0
 8b8:	adrp	x1, 0 <list_super2>
 8bc:	madd	w5, w4, w11, w8
 8c0:	csel	x2, x24, x25, eq  // eq = none
 8c4:	add	x1, x1, #0x0
 8c8:	mov	x0, x23
 8cc:	bl	0 <sprintf>
 8d0:	mov	x0, x22
 8d4:	mov	x1, x23
 8d8:	bl	0 <strcat>
 8dc:	b	8e8 <list_super2+0x8e8>
 8e0:	adrp	x22, 0 <list_super2>
 8e4:	add	x22, x22, #0x0
 8e8:	adrp	x1, 0 <list_super2>
 8ec:	add	x1, x1, #0x0
 8f0:	mov	x0, x19
 8f4:	mov	w2, w21
 8f8:	mov	x3, x22
 8fc:	bl	0 <fprintf>
 900:	ldr	w8, [x20, #68]
 904:	cbz	w8, 930 <list_super2+0x930>
 908:	ldr	w9, [x20, #64]
 90c:	add	x0, sp, #0x8
 910:	add	w8, w9, w8
 914:	str	x8, [sp, #8]
 918:	bl	0 <ctime>
 91c:	adrp	x1, 0 <list_super2>
 920:	mov	x2, x0
 924:	add	x1, x1, #0x0
 928:	mov	x0, x19
 92c:	bl	0 <fprintf>
 930:	ldr	x8, [x20, #376]
 934:	cbz	x8, 9dc <list_super2+0x9dc>
 938:	adrp	x0, 0 <list_super2>
 93c:	add	x0, x0, #0x0
 940:	mov	w1, #0x1a                  	// #26
 944:	mov	w2, #0x1                   	// #1
 948:	mov	x3, x19
 94c:	bl	0 <fwrite>
 950:	ldr	x2, [x20, #376]
 954:	lsr	x8, x2, #13
 958:	cbnz	x8, 968 <list_super2+0x968>
 95c:	adrp	x1, 0 <list_super2>
 960:	add	x1, x1, #0x0
 964:	b	9d4 <list_super2+0x9d4>
 968:	lsr	x8, x2, #23
 96c:	cbnz	x8, 984 <list_super2+0x984>
 970:	add	x8, x2, #0x200
 974:	adrp	x1, 0 <list_super2>
 978:	lsr	x2, x8, #10
 97c:	add	x1, x1, #0x0
 980:	b	9d4 <list_super2+0x9d4>
 984:	lsr	x8, x2, #33
 988:	cbnz	x8, 9a0 <list_super2+0x9a0>
 98c:	add	x8, x2, #0x80, lsl #12
 990:	adrp	x1, 0 <list_super2>
 994:	lsr	x2, x8, #20
 998:	add	x1, x1, #0x0
 99c:	b	9d4 <list_super2+0x9d4>
 9a0:	lsr	x8, x2, #43
 9a4:	cbnz	x8, 9c0 <list_super2+0x9c0>
 9a8:	mov	w8, #0x20000000            	// #536870912
 9ac:	add	x8, x2, x8
 9b0:	adrp	x1, 0 <list_super2>
 9b4:	lsr	x2, x8, #30
 9b8:	add	x1, x1, #0x0
 9bc:	b	9d4 <list_super2+0x9d4>
 9c0:	mov	x8, #0x8000000000          	// #549755813888
 9c4:	add	x8, x2, x8
 9c8:	adrp	x1, 0 <list_super2>
 9cc:	lsr	x2, x8, #40
 9d0:	add	x1, x1, #0x0
 9d4:	mov	x0, x19
 9d8:	bl	0 <fprintf>
 9dc:	adrp	x0, 0 <list_super2>
 9e0:	add	x0, x0, #0x0
 9e4:	mov	w1, #0x1a                  	// #26
 9e8:	mov	w2, #0x1                   	// #1
 9ec:	mov	x3, x19
 9f0:	bl	0 <fwrite>
 9f4:	ldrh	w21, [x20, #80]
 9f8:	adrp	x1, 0 <list_super2>
 9fc:	add	x1, x1, #0x0
 a00:	mov	x0, x19
 a04:	mov	w2, w21
 a08:	bl	0 <fprintf>
 a0c:	mov	w0, w21
 a10:	bl	0 <getpwuid>
 a14:	cbz	x0, a30 <list_super2+0xa30>
 a18:	ldr	x2, [x0]
 a1c:	adrp	x1, 0 <list_super2>
 a20:	add	x1, x1, #0x0
 a24:	mov	x0, x19
 a28:	bl	0 <fprintf>
 a2c:	b	a48 <list_super2+0xa48>
 a30:	adrp	x0, 0 <list_super2>
 a34:	add	x0, x0, #0x0
 a38:	mov	w1, #0xf                   	// #15
 a3c:	mov	w2, #0x1                   	// #1
 a40:	mov	x3, x19
 a44:	bl	0 <fwrite>
 a48:	adrp	x0, 0 <list_super2>
 a4c:	add	x0, x0, #0x0
 a50:	mov	w1, #0x1a                  	// #26
 a54:	mov	w2, #0x1                   	// #1
 a58:	mov	x3, x19
 a5c:	bl	0 <fwrite>
 a60:	ldrh	w21, [x20, #82]
 a64:	adrp	x1, 0 <list_super2>
 a68:	add	x1, x1, #0x0
 a6c:	mov	x0, x19
 a70:	mov	w2, w21
 a74:	bl	0 <fprintf>
 a78:	mov	w0, w21
 a7c:	bl	0 <getgrgid>
 a80:	cbz	x0, a9c <list_super2+0xa9c>
 a84:	ldr	x2, [x0]
 a88:	adrp	x1, 0 <list_super2>
 a8c:	add	x1, x1, #0x0
 a90:	mov	x0, x19
 a94:	bl	0 <fprintf>
 a98:	b	ab4 <list_super2+0xab4>
 a9c:	adrp	x0, 0 <list_super2>
 aa0:	add	x0, x0, #0x0
 aa4:	mov	w1, #0x10                  	// #16
 aa8:	mov	w2, #0x1                   	// #1
 aac:	mov	x3, x19
 ab0:	bl	0 <fwrite>
 ab4:	ldr	w8, [x20, #76]
 ab8:	cbz	w8, b14 <list_super2+0xb14>
 abc:	ldr	w2, [x20, #84]
 ac0:	adrp	x1, 0 <list_super2>
 ac4:	add	x1, x1, #0x0
 ac8:	mov	x0, x19
 acc:	bl	0 <fprintf>
 ad0:	ldrh	w2, [x20, #88]
 ad4:	adrp	x1, 0 <list_super2>
 ad8:	add	x1, x1, #0x0
 adc:	mov	x0, x19
 ae0:	bl	0 <fprintf>
 ae4:	ldrh	w2, [x20, #348]
 ae8:	cbz	w2, afc <list_super2+0xafc>
 aec:	adrp	x1, 0 <list_super2>
 af0:	add	x1, x1, #0x0
 af4:	mov	x0, x19
 af8:	bl	0 <fprintf>
 afc:	ldrh	w2, [x20, #350]
 b00:	cbz	w2, b14 <list_super2+0xb14>
 b04:	adrp	x1, 0 <list_super2>
 b08:	add	x1, x1, #0x0
 b0c:	mov	x0, x19
 b10:	bl	0 <fprintf>
 b14:	add	x21, x20, #0xd0
 b18:	mov	x0, x21
 b1c:	bl	0 <e2p_is_null_uuid>
 b20:	cbnz	w0, b40 <list_super2+0xb40>
 b24:	mov	x0, x21
 b28:	bl	0 <e2p_uuid2str>
 b2c:	adrp	x1, 0 <list_super2>
 b30:	mov	x2, x0
 b34:	add	x1, x1, #0x0
 b38:	mov	x0, x19
 b3c:	bl	0 <fprintf>
 b40:	ldr	w2, [x20, #224]
 b44:	cbz	w2, b58 <list_super2+0xb58>
 b48:	adrp	x1, 0 <list_super2>
 b4c:	add	x1, x1, #0x0
 b50:	mov	x0, x19
 b54:	bl	0 <fprintf>
 b58:	ldr	w2, [x20, #228]
 b5c:	cbz	w2, b70 <list_super2+0xb70>
 b60:	adrp	x1, 0 <list_super2>
 b64:	add	x1, x1, #0x0
 b68:	mov	x0, x19
 b6c:	bl	0 <fprintf>
 b70:	ldr	w2, [x20, #232]
 b74:	cbz	w2, b88 <list_super2+0xb88>
 b78:	adrp	x1, 0 <list_super2>
 b7c:	add	x1, x1, #0x0
 b80:	mov	x0, x19
 b84:	bl	0 <fprintf>
 b88:	ldrb	w8, [x20, #92]
 b8c:	ldrb	w0, [x20, #252]
 b90:	tbnz	w8, #5, b98 <list_super2+0xb98>
 b94:	cbz	w0, bb0 <list_super2+0xbb0>
 b98:	bl	0 <e2p_hash2string>
 b9c:	adrp	x1, 0 <list_super2>
 ba0:	mov	x2, x0
 ba4:	add	x1, x1, #0x0
 ba8:	mov	x0, x19
 bac:	bl	0 <fprintf>
 bb0:	add	x21, x20, #0xec
 bb4:	mov	x0, x21
 bb8:	bl	0 <e2p_is_null_uuid>
 bbc:	cbnz	w0, bdc <list_super2+0xbdc>
 bc0:	mov	x0, x21
 bc4:	bl	0 <e2p_uuid2str>
 bc8:	adrp	x1, 0 <list_super2>
 bcc:	mov	x2, x0
 bd0:	add	x1, x1, #0x0
 bd4:	mov	x0, x19
 bd8:	bl	0 <fprintf>
 bdc:	ldrb	w8, [x20, #253]
 be0:	cbz	w8, c34 <list_super2+0xc34>
 be4:	adrp	x0, 0 <list_super2>
 be8:	add	x0, x0, #0x0
 bec:	mov	w1, #0x1a                  	// #26
 bf0:	mov	w2, #0x1                   	// #1
 bf4:	mov	x3, x19
 bf8:	bl	0 <fwrite>
 bfc:	ldrb	w2, [x20, #253]
 c00:	cmp	w2, #0x1
 c04:	b.ne	c24 <list_super2+0xc24>  // b.any
 c08:	adrp	x0, 0 <list_super2>
 c0c:	add	x0, x0, #0x0
 c10:	mov	w1, #0xd                   	// #13
 c14:	mov	w2, #0x1                   	// #1
 c18:	mov	x3, x19
 c1c:	bl	0 <fwrite>
 c20:	b	c34 <list_super2+0xc34>
 c24:	adrp	x1, 0 <list_super2>
 c28:	add	x1, x1, #0x0
 c2c:	mov	x0, x19
 c30:	bl	0 <fprintf>
 c34:	ldr	w8, [x20, #588]
 c38:	cbnz	w8, c44 <list_super2+0xc44>
 c3c:	ldr	w8, [x20, #592]
 c40:	cbz	w8, c98 <list_super2+0xc98>
 c44:	adrp	x0, 0 <list_super2>
 c48:	add	x0, x0, #0x0
 c4c:	mov	w1, #0x1a                  	// #26
 c50:	mov	w2, #0x1                   	// #1
 c54:	mov	x3, x19
 c58:	bl	0 <fwrite>
 c5c:	ldr	w2, [x20, #588]
 c60:	cbz	w2, c74 <list_super2+0xc74>
 c64:	adrp	x1, 0 <list_super2>
 c68:	add	x1, x1, #0x0
 c6c:	mov	x0, x19
 c70:	bl	0 <fprintf>
 c74:	ldr	w2, [x20, #592]
 c78:	cbz	w2, c8c <list_super2+0xc8c>
 c7c:	adrp	x1, 0 <list_super2>
 c80:	add	x1, x1, #0x0
 c84:	mov	x0, x19
 c88:	bl	0 <fprintf>
 c8c:	mov	w0, #0xa                   	// #10
 c90:	mov	x1, x19
 c94:	bl	0 <fputc>
 c98:	ldr	w2, [x20, #384]
 c9c:	cbz	w2, cd8 <list_super2+0xcd8>
 ca0:	adrp	x1, 0 <list_super2>
 ca4:	add	x1, x1, #0x0
 ca8:	mov	x0, x19
 cac:	bl	0 <fprintf>
 cb0:	ldr	w2, [x20, #388]
 cb4:	adrp	x1, 0 <list_super2>
 cb8:	add	x1, x1, #0x0
 cbc:	mov	x0, x19
 cc0:	bl	0 <fprintf>
 cc4:	ldr	x2, [x20, #392]
 cc8:	adrp	x1, 0 <list_super2>
 ccc:	add	x1, x1, #0x0
 cd0:	mov	x0, x19
 cd4:	bl	0 <fprintf>
 cd8:	ldr	w2, [x20, #400]
 cdc:	cbz	w2, cf0 <list_super2+0xcf0>
 ce0:	adrp	x1, 0 <list_super2>
 ce4:	add	x1, x1, #0x0
 ce8:	mov	x0, x19
 cec:	bl	0 <fprintf>
 cf0:	ldr	w2, [x20, #404]
 cf4:	cbz	w2, d08 <list_super2+0xd08>
 cf8:	adrp	x1, 0 <list_super2>
 cfc:	add	x1, x1, #0x0
 d00:	mov	x0, x19
 d04:	bl	0 <fprintf>
 d08:	ldr	w8, [x20, #408]
 d0c:	cbz	w8, da0 <list_super2+0xda0>
 d10:	add	x0, x29, #0x18
 d14:	str	x8, [x29, #24]
 d18:	bl	0 <ctime>
 d1c:	adrp	x1, 0 <list_super2>
 d20:	mov	x2, x0
 d24:	add	x1, x1, #0x0
 d28:	mov	x0, x19
 d2c:	bl	0 <fprintf>
 d30:	movi	v0.2d, #0x0
 d34:	add	x1, x20, #0x1a8
 d38:	add	x0, sp, #0x10
 d3c:	mov	w2, #0x20                  	// #32
 d40:	stp	q0, q0, [sp, #16]
 d44:	stp	q0, q0, [sp, #48]
 d48:	str	q0, [sp, #80]
 d4c:	bl	0 <strncpy>
 d50:	adrp	x1, 0 <list_super2>
 d54:	add	x1, x1, #0x0
 d58:	add	x2, sp, #0x10
 d5c:	mov	x0, x19
 d60:	bl	0 <fprintf>
 d64:	ldr	w2, [x20, #456]
 d68:	adrp	x1, 0 <list_super2>
 d6c:	add	x1, x1, #0x0
 d70:	mov	x0, x19
 d74:	bl	0 <fprintf>
 d78:	ldr	w2, [x20, #412]
 d7c:	adrp	x1, 0 <list_super2>
 d80:	add	x1, x1, #0x0
 d84:	mov	x0, x19
 d88:	bl	0 <fprintf>
 d8c:	ldr	x2, [x20, #416]
 d90:	adrp	x1, 0 <list_super2>
 d94:	add	x1, x1, #0x0
 d98:	mov	x0, x19
 d9c:	bl	0 <fprintf>
 da0:	ldr	w8, [x20, #460]
 da4:	cbz	w8, e38 <list_super2+0xe38>
 da8:	add	x0, x29, #0x18
 dac:	str	x8, [x29, #24]
 db0:	bl	0 <ctime>
 db4:	adrp	x1, 0 <list_super2>
 db8:	mov	x2, x0
 dbc:	add	x1, x1, #0x0
 dc0:	mov	x0, x19
 dc4:	bl	0 <fprintf>
 dc8:	movi	v0.2d, #0x0
 dcc:	add	x1, x20, #0x1e0
 dd0:	add	x0, sp, #0x10
 dd4:	mov	w2, #0x20                  	// #32
 dd8:	stp	q0, q0, [sp, #16]
 ddc:	stp	q0, q0, [sp, #48]
 de0:	str	q0, [sp, #80]
 de4:	bl	0 <strncpy>
 de8:	adrp	x1, 0 <list_super2>
 dec:	add	x1, x1, #0x0
 df0:	add	x2, sp, #0x10
 df4:	mov	x0, x19
 df8:	bl	0 <fprintf>
 dfc:	ldr	w2, [x20, #468]
 e00:	adrp	x1, 0 <list_super2>
 e04:	add	x1, x1, #0x0
 e08:	mov	x0, x19
 e0c:	bl	0 <fprintf>
 e10:	ldr	w2, [x20, #464]
 e14:	adrp	x1, 0 <list_super2>
 e18:	add	x1, x1, #0x0
 e1c:	mov	x0, x19
 e20:	bl	0 <fprintf>
 e24:	ldr	x2, [x20, #472]
 e28:	adrp	x1, 0 <list_super2>
 e2c:	add	x1, x1, #0x0
 e30:	mov	x0, x19
 e34:	bl	0 <fprintf>
 e38:	ldrb	w8, [x20, #97]
 e3c:	tbz	w8, #0, e68 <list_super2+0xe68>
 e40:	ldr	x2, [x20, #360]
 e44:	adrp	x1, 0 <list_super2>
 e48:	add	x1, x1, #0x0
 e4c:	mov	x0, x19
 e50:	bl	0 <fprintf>
 e54:	ldrh	w2, [x20, #358]
 e58:	adrp	x1, 0 <list_super2>
 e5c:	add	x1, x1, #0x0
 e60:	mov	x0, x19
 e64:	bl	0 <fprintf>
 e68:	adrp	x26, 0 <list_super2>
 e6c:	adrp	x21, 0 <list_super2>
 e70:	mov	x22, xzr
 e74:	add	x23, x20, #0x26c
 e78:	add	x24, x20, #0x244
 e7c:	add	x25, x20, #0x240
 e80:	add	x26, x26, #0x0
 e84:	add	x21, x21, #0x0
 e88:	cmp	w22, #0x2
 e8c:	b.eq	ea8 <list_super2+0xea8>  // b.none
 e90:	cmp	w22, #0x1
 e94:	mov	x8, x24
 e98:	b.eq	eb4 <list_super2+0xeb4>  // b.none
 e9c:	cbnz	w22, eb0 <list_super2+0xeb0>
 ea0:	mov	x8, x25
 ea4:	b	eb4 <list_super2+0xeb4>
 ea8:	mov	x8, x23
 eac:	b	eb4 <list_super2+0xeb4>
 eb0:	mov	x8, xzr
 eb4:	ldr	w8, [x8]
 eb8:	cbz	w8, efc <list_super2+0xefc>
 ebc:	ldr	x2, [x26, x22, lsl #3]
 ec0:	cmp	w22, #0x2
 ec4:	b.eq	ee0 <list_super2+0xee0>  // b.none
 ec8:	cmp	w22, #0x1
 ecc:	mov	x8, x24
 ed0:	b.eq	eec <list_super2+0xeec>  // b.none
 ed4:	cbnz	w22, ee8 <list_super2+0xee8>
 ed8:	mov	x8, x25
 edc:	b	eec <list_super2+0xeec>
 ee0:	mov	x8, x23
 ee4:	b	eec <list_super2+0xeec>
 ee8:	mov	x8, xzr
 eec:	ldr	w3, [x8]
 ef0:	mov	x0, x19
 ef4:	mov	x1, x21
 ef8:	bl	0 <fprintf>
 efc:	add	x22, x22, #0x1
 f00:	cmp	x22, #0x3
 f04:	b.ne	e88 <list_super2+0xe88>  // b.any
 f08:	ldrb	w8, [x20, #101]
 f0c:	tbz	w8, #2, f50 <list_super2+0xf50>
 f10:	ldrb	w8, [x20, #373]
 f14:	adrp	x9, 0 <list_super2>
 f18:	adrp	x10, 0 <list_super2>
 f1c:	add	x9, x9, #0x0
 f20:	add	x10, x10, #0x0
 f24:	cmp	w8, #0x1
 f28:	adrp	x1, 0 <list_super2>
 f2c:	csel	x2, x10, x9, eq  // eq = none
 f30:	add	x1, x1, #0x0
 f34:	mov	x0, x19
 f38:	bl	0 <fprintf>
 f3c:	ldr	w2, [x20, #1020]
 f40:	adrp	x1, 0 <list_super2>
 f44:	add	x1, x1, #0x0
 f48:	mov	x0, x19
 f4c:	bl	0 <fprintf>
 f50:	add	x21, x20, #0x258
 f54:	mov	x0, x21
 f58:	bl	0 <e2p_is_null_uuid>
 f5c:	cbnz	w0, f7c <list_super2+0xf7c>
 f60:	mov	x0, x21
 f64:	bl	0 <e2p_uuid2str>
 f68:	adrp	x1, 0 <list_super2>
 f6c:	mov	x2, x0
 f70:	add	x1, x1, #0x0
 f74:	mov	x0, x19
 f78:	bl	0 <fprintf>
 f7c:	ldr	w8, [x20, #96]
 f80:	tbz	w8, #13, f9c <list_super2+0xf9c>
 f84:	ldr	w2, [x20, #624]
 f88:	adrp	x1, 0 <list_super2>
 f8c:	add	x1, x1, #0x0
 f90:	mov	x0, x19
 f94:	bl	0 <fprintf>
 f98:	ldr	w8, [x20, #96]
 f9c:	tbz	w8, #17, fbc <list_super2+0xfbc>
 fa0:	ldrh	w0, [x20, #636]
 fa4:	bl	0 <e2p_encoding2str>
 fa8:	adrp	x1, 0 <list_super2>
 fac:	mov	x2, x0
 fb0:	add	x1, x1, #0x0
 fb4:	mov	x0, x19
 fb8:	bl	0 <fprintf>
 fbc:	ldp	x20, x19, [sp, #176]
 fc0:	ldp	x22, x21, [sp, #160]
 fc4:	ldp	x24, x23, [sp, #144]
 fc8:	ldp	x26, x25, [sp, #128]
 fcc:	ldr	x27, [sp, #112]
 fd0:	ldp	x29, x30, [sp, #96]
 fd4:	add	sp, sp, #0xc0
 fd8:	ret

0000000000000fdc <list_super>:
 fdc:	adrp	x8, 0 <stdout>
 fe0:	ldr	x1, [x8]
 fe4:	b	0 <list_super2>

ljs.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_list_journal_super>:
   0:	sub	sp, sp, #0x70
   4:	stp	x20, x19, [sp, #96]
   8:	mov	x19, x0
   c:	adrp	x0, 0 <e2p_list_journal_super>
  10:	stp	x29, x30, [sp, #16]
  14:	add	x29, sp, #0x10
  18:	mov	x20, x1
  1c:	add	x0, x0, #0x0
  20:	mov	x1, x19
  24:	stp	x28, x27, [sp, #32]
  28:	stp	x26, x25, [sp, #48]
  2c:	stp	x24, x23, [sp, #64]
  30:	stp	x22, x21, [sp, #80]
  34:	stur	w2, [x29, #-4]
  38:	bl	0 <fputs>
  3c:	add	x25, x20, #0x24
  40:	adrp	x23, 0 <e2p_list_journal_super>
  44:	mov	w22, wzr
  48:	mov	w26, wzr
  4c:	add	x23, x23, #0x0
  50:	mov	x27, x25
  54:	ldr	w8, [x27]
  58:	mov	w24, #0x1                   	// #1
  5c:	mov	w21, #0x20                  	// #32
  60:	rev	w28, w8
  64:	tst	w24, w28
  68:	b.eq	8c <e2p_list_journal_super+0x8c>  // b.none
  6c:	mov	w0, w22
  70:	mov	w1, w24
  74:	bl	0 <e2p_jrnl_feature2string>
  78:	mov	x2, x0
  7c:	mov	x0, x19
  80:	mov	x1, x23
  84:	bl	0 <fprintf>
  88:	add	w26, w26, #0x1
  8c:	subs	w21, w21, #0x1
  90:	lsl	w24, w24, #1
  94:	b.ne	64 <e2p_list_journal_super+0x64>  // b.any
  98:	add	w22, w22, #0x1
  9c:	cmp	w22, #0x3
  a0:	add	x27, x27, #0x4
  a4:	b.ne	54 <e2p_list_journal_super+0x54>  // b.any
  a8:	cbnz	w26, c4 <e2p_list_journal_super+0xc4>
  ac:	adrp	x0, 0 <e2p_list_journal_super>
  b0:	add	x0, x0, #0x0
  b4:	mov	w1, #0x7                   	// #7
  b8:	mov	w2, #0x1                   	// #1
  bc:	mov	x3, x19
  c0:	bl	0 <fwrite>
  c4:	mov	w0, #0xa                   	// #10
  c8:	mov	x1, x19
  cc:	bl	0 <fputc>
  d0:	adrp	x0, 0 <e2p_list_journal_super>
  d4:	add	x0, x0, #0x0
  d8:	mov	x1, x19
  dc:	bl	0 <fputs>
  e0:	ldp	w8, w9, [x20, #12]
  e4:	rev	w8, w8
  e8:	lsr	w8, w8, #10
  ec:	rev	w9, w9
  f0:	mul	w2, w8, w9
  f4:	lsr	w8, w2, #13
  f8:	cbnz	w8, 108 <e2p_list_journal_super+0x108>
  fc:	adrp	x1, 0 <e2p_list_journal_super>
 100:	add	x1, x1, #0x0
 104:	b	114 <e2p_list_journal_super+0x114>
 108:	adrp	x1, 0 <e2p_list_journal_super>
 10c:	lsr	w2, w2, #10
 110:	add	x1, x1, #0x0
 114:	mov	x0, x19
 118:	bl	0 <fprintf>
 11c:	ldr	w8, [x20, #12]
 120:	ldur	w9, [x29, #-4]
 124:	ldr	w22, [x20, #64]
 128:	rev	w2, w8
 12c:	cmp	w2, w9
 130:	b.eq	144 <e2p_list_journal_super+0x144>  // b.none
 134:	adrp	x1, 0 <e2p_list_journal_super>
 138:	add	x1, x1, #0x0
 13c:	mov	x0, x19
 140:	bl	0 <fprintf>
 144:	ldr	w8, [x20, #16]
 148:	adrp	x1, 0 <e2p_list_journal_super>
 14c:	add	x1, x1, #0x0
 150:	mov	x0, x19
 154:	rev	w2, w8
 158:	bl	0 <fprintf>
 15c:	ldr	w8, [x20, #20]
 160:	mov	w23, #0x1000000             	// #16777216
 164:	cmp	w8, w23
 168:	b.eq	180 <e2p_list_journal_super+0x180>  // b.none
 16c:	adrp	x1, 0 <e2p_list_journal_super>
 170:	rev	w2, w8
 174:	add	x1, x1, #0x0
 178:	mov	x0, x19
 17c:	bl	0 <fprintf>
 180:	ldp	w8, w9, [x20, #24]
 184:	adrp	x1, 0 <e2p_list_journal_super>
 188:	add	x1, x1, #0x0
 18c:	mov	x0, x19
 190:	rev	w2, w8
 194:	rev	w3, w9
 198:	rev	w21, w22
 19c:	bl	0 <fprintf>
 1a0:	cmp	w22, w23
 1a4:	b.eq	1bc <e2p_list_journal_super+0x1bc>  // b.none
 1a8:	adrp	x1, 0 <e2p_list_journal_super>
 1ac:	add	x1, x1, #0x0
 1b0:	mov	x0, x19
 1b4:	mov	w2, w21
 1b8:	bl	0 <fprintf>
 1bc:	ldrb	w8, [x25, #3]
 1c0:	tbz	w8, #0, 1d4 <e2p_list_journal_super+0x1d4>
 1c4:	adrp	x0, 0 <e2p_list_journal_super>
 1c8:	add	x0, x0, #0x0
 1cc:	mov	x1, x19
 1d0:	bl	0 <fputs>
 1d4:	ldrb	w8, [x20, #43]
 1d8:	tst	w8, #0x18
 1dc:	b.eq	214 <e2p_list_journal_super+0x214>  // b.none
 1e0:	ldrb	w8, [x20, #80]
 1e4:	ldr	w10, [x20, #252]
 1e8:	adrp	x9, 0 <e2p_list_journal_super>
 1ec:	adrp	x11, 0 <e2p_list_journal_super>
 1f0:	add	x9, x9, #0x0
 1f4:	add	x11, x11, #0x0
 1f8:	cmp	w8, #0x4
 1fc:	adrp	x1, 0 <e2p_list_journal_super>
 200:	csel	x2, x11, x9, eq  // eq = none
 204:	rev	w3, w10
 208:	add	x1, x1, #0x0
 20c:	mov	x0, x19
 210:	bl	0 <fprintf>
 214:	cmp	w21, #0x1
 218:	b.hi	234 <e2p_list_journal_super+0x234>  // b.pmore
 21c:	add	x0, x20, #0x100
 220:	bl	0 <e2p_is_null_uuid>
 224:	cbnz	w0, 28c <e2p_list_journal_super+0x28c>
 228:	mov	w8, #0x1000000             	// #16777216
 22c:	cmp	w22, w8
 230:	b.ne	28c <e2p_list_journal_super+0x28c>  // b.any
 234:	adrp	x26, 0 <e2p_list_journal_super>
 238:	adrp	x27, 0 <e2p_list_journal_super>
 23c:	mov	x22, xzr
 240:	mov	x25, xzr
 244:	add	x23, x20, #0x100
 248:	mov	w24, w21
 24c:	add	x26, x26, #0x0
 250:	add	x27, x27, #0x0
 254:	cmp	x22, #0x0
 258:	add	x0, x23, x22
 25c:	csel	x21, x27, x26, eq  // eq = none
 260:	bl	0 <e2p_uuid2str>
 264:	mov	x1, x0
 268:	mov	x0, x21
 26c:	bl	0 <printf>
 270:	add	x8, x25, #0x1
 274:	cmp	x8, x24
 278:	b.cs	28c <e2p_list_journal_super+0x28c>  // b.hs, b.nlast
 27c:	cmp	x25, #0x2f
 280:	add	x22, x22, #0x10
 284:	mov	x25, x8
 288:	b.cc	254 <e2p_list_journal_super+0x254>  // b.lo, b.ul, b.last
 28c:	ldr	w8, [x20, #32]
 290:	cbz	w8, 2c4 <e2p_list_journal_super+0x2c4>
 294:	mov	x0, x19
 298:	ldp	x20, x19, [sp, #96]
 29c:	ldp	x22, x21, [sp, #80]
 2a0:	ldp	x24, x23, [sp, #64]
 2a4:	ldp	x26, x25, [sp, #48]
 2a8:	ldp	x28, x27, [sp, #32]
 2ac:	ldp	x29, x30, [sp, #16]
 2b0:	adrp	x1, 0 <e2p_list_journal_super>
 2b4:	rev	w2, w8
 2b8:	add	x1, x1, #0x0
 2bc:	add	sp, sp, #0x70
 2c0:	b	0 <fprintf>
 2c4:	ldp	x20, x19, [sp, #96]
 2c8:	ldp	x22, x21, [sp, #80]
 2cc:	ldp	x24, x23, [sp, #64]
 2d0:	ldp	x26, x25, [sp, #48]
 2d4:	ldp	x28, x27, [sp, #32]
 2d8:	ldp	x29, x30, [sp, #16]
 2dc:	add	sp, sp, #0x70
 2e0:	ret

mntopts.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_mntopt2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x1
   8:	str	x19, [sp, #16]
   c:	mov	x29, sp
  10:	b.ne	20 <e2p_mntopt2string+0x20>  // b.any
  14:	adrp	x19, 0 <e2p_mntopt2string>
  18:	add	x19, x19, #0x0
  1c:	b	6c <e2p_mntopt2string+0x6c>
  20:	adrp	x8, 0 <e2p_mntopt2string>
  24:	add	x8, x8, #0x0
  28:	ldr	x19, [x8]
  2c:	cbz	x19, 44 <e2p_mntopt2string+0x44>
  30:	ldur	w9, [x8, #-8]
  34:	add	x8, x8, #0x10
  38:	cmp	w9, w0
  3c:	b.ne	28 <e2p_mntopt2string+0x28>  // b.any
  40:	b	6c <e2p_mntopt2string+0x6c>
  44:	lsr	w8, w0, #1
  48:	adrp	x19, 0 <e2p_mntopt2string>
  4c:	clz	w8, w8
  50:	mov	w9, #0x20                  	// #32
  54:	add	x19, x19, #0x0
  58:	adrp	x1, 0 <e2p_mntopt2string>
  5c:	sub	w2, w9, w8
  60:	add	x1, x1, #0x0
  64:	mov	x0, x19
  68:	bl	0 <sprintf>
  6c:	mov	x0, x19
  70:	ldr	x19, [sp, #16]
  74:	ldp	x29, x30, [sp], #32
  78:	ret

000000000000007c <e2p_string2mntopt>:
  7c:	stp	x29, x30, [sp, #-48]!
  80:	str	x21, [sp, #16]
  84:	stp	x20, x19, [sp, #32]
  88:	mov	x19, x1
  8c:	adrp	x21, 0 <e2p_mntopt2string>
  90:	adrp	x1, 0 <e2p_mntopt2string>
  94:	mov	x20, x0
  98:	add	x21, x21, #0x0
  9c:	add	x1, x1, #0x0
  a0:	mov	x29, sp
  a4:	mov	x0, x20
  a8:	bl	0 <strcasecmp>
  ac:	cbz	w0, dc <e2p_string2mntopt+0x60>
  b0:	ldr	x1, [x21, #24]
  b4:	add	x21, x21, #0x10
  b8:	cbnz	x1, a4 <e2p_string2mntopt+0x28>
  bc:	adrp	x1, 0 <e2p_mntopt2string>
  c0:	add	x1, x1, #0x0
  c4:	mov	w2, #0x7                   	// #7
  c8:	mov	x0, x20
  cc:	bl	0 <strncasecmp>
  d0:	cbz	w0, f4 <e2p_string2mntopt+0x78>
  d4:	mov	w0, #0x1                   	// #1
  d8:	b	e4 <e2p_string2mntopt+0x68>
  dc:	ldr	w8, [x21]
  e0:	str	w8, [x19]
  e4:	ldp	x20, x19, [sp, #32]
  e8:	ldr	x21, [sp, #16]
  ec:	ldp	x29, x30, [sp], #48
  f0:	ret
  f4:	ldrb	w8, [x20, #8]!
  f8:	cbz	w8, d4 <e2p_string2mntopt+0x58>
  fc:	add	x1, x29, #0x18
 100:	mov	w2, #0xa                   	// #10
 104:	mov	x0, x20
 108:	bl	0 <strtol>
 10c:	mov	x8, x0
 110:	cmp	w8, #0x1f
 114:	b.hi	d4 <e2p_string2mntopt+0x58>  // b.pmore
 118:	ldr	x9, [x29, #24]
 11c:	mov	w0, #0x1                   	// #1
 120:	ldrb	w9, [x9]
 124:	cbnz	w9, e4 <e2p_string2mntopt+0x68>
 128:	lsl	w8, w0, w8
 12c:	mov	w0, wzr
 130:	b	e0 <e2p_string2mntopt+0x64>

0000000000000134 <e2p_edit_mntopts>:
 134:	sub	sp, sp, #0x50
 138:	stp	x29, x30, [sp, #16]
 13c:	stp	x24, x23, [sp, #32]
 140:	stp	x22, x21, [sp, #48]
 144:	stp	x20, x19, [sp, #64]
 148:	add	x29, sp, #0x10
 14c:	mov	w20, w2
 150:	mov	x21, x1
 154:	mov	x22, x0
 158:	bl	0 <strlen>
 15c:	add	x0, x0, #0x1
 160:	bl	0 <malloc>
 164:	cbz	x0, 284 <e2p_edit_mntopts+0x150>
 168:	mov	x1, x22
 16c:	mov	x19, x0
 170:	bl	0 <strcpy>
 174:	mov	x24, x0
 178:	ldrb	w23, [x24]
 17c:	cbz	w23, 27c <e2p_edit_mntopts+0x148>
 180:	bl	0 <__ctype_b_loc>
 184:	ldr	x9, [x0]
 188:	add	x0, x24, #0x1
 18c:	and	x8, x23, #0xff
 190:	ldrh	w10, [x9, x8, lsl #1]
 194:	tbz	w10, #13, 1ac <e2p_edit_mntopts+0x78>
 198:	ldrb	w23, [x0], #1
 19c:	cbnz	w23, 18c <e2p_edit_mntopts+0x58>
 1a0:	mov	x22, xzr
 1a4:	sub	x0, x0, #0x1
 1a8:	b	228 <e2p_edit_mntopts+0xf4>
 1ac:	and	w11, w23, #0xff
 1b0:	sub	x8, x0, #0x1
 1b4:	cmp	w11, #0x2c
 1b8:	mov	x22, x8
 1bc:	b.eq	1e4 <e2p_edit_mntopts+0xb0>  // b.none
 1c0:	mov	x22, x8
 1c4:	tbnz	w10, #13, 1e4 <e2p_edit_mntopts+0xb0>
 1c8:	mov	x22, x8
 1cc:	ldrb	w10, [x22, #1]!
 1d0:	cbz	x10, 1f0 <e2p_edit_mntopts+0xbc>
 1d4:	cmp	w10, #0x2c
 1d8:	b.eq	1e4 <e2p_edit_mntopts+0xb0>  // b.none
 1dc:	ldrh	w10, [x9, x10, lsl #1]
 1e0:	tbz	w10, #13, 1cc <e2p_edit_mntopts+0x98>
 1e4:	strb	wzr, [x22]
 1e8:	ldrb	w23, [x8]
 1ec:	b	1f4 <e2p_edit_mntopts+0xc0>
 1f0:	mov	x22, xzr
 1f4:	and	w9, w23, #0xff
 1f8:	cmp	w9, #0x2b
 1fc:	b.eq	218 <e2p_edit_mntopts+0xe4>  // b.none
 200:	cmp	w9, #0x2d
 204:	b.eq	210 <e2p_edit_mntopts+0xdc>  // b.none
 208:	cmp	w9, #0x5e
 20c:	b.ne	220 <e2p_edit_mntopts+0xec>  // b.any
 210:	mov	w23, #0x1                   	// #1
 214:	b	228 <e2p_edit_mntopts+0xf4>
 218:	mov	w23, wzr
 21c:	b	228 <e2p_edit_mntopts+0xf4>
 220:	mov	w23, wzr
 224:	mov	x0, x8
 228:	sub	x1, x29, #0x4
 22c:	bl	7c <e2p_string2mntopt>
 230:	cbnz	w0, 28c <e2p_edit_mntopts+0x158>
 234:	ldur	w8, [x29, #-4]
 238:	cbz	w20, 244 <e2p_edit_mntopts+0x110>
 23c:	and	w9, w8, w20
 240:	cbz	w9, 28c <e2p_edit_mntopts+0x158>
 244:	tst	w8, #0x60
 248:	b.eq	258 <e2p_edit_mntopts+0x124>  // b.none
 24c:	ldr	w9, [x21]
 250:	and	w9, w9, #0xffffff9f
 254:	str	w9, [x21]
 258:	cbz	w23, 268 <e2p_edit_mntopts+0x134>
 25c:	ldr	w9, [x21]
 260:	bic	w8, w9, w8
 264:	b	270 <e2p_edit_mntopts+0x13c>
 268:	ldr	w9, [x21]
 26c:	orr	w8, w9, w8
 270:	add	x24, x22, #0x1
 274:	str	w8, [x21]
 278:	cbnz	x22, 178 <e2p_edit_mntopts+0x44>
 27c:	mov	w20, wzr
 280:	b	290 <e2p_edit_mntopts+0x15c>
 284:	mov	w20, #0x1                   	// #1
 288:	b	298 <e2p_edit_mntopts+0x164>
 28c:	mov	w20, #0x1                   	// #1
 290:	mov	x0, x19
 294:	bl	0 <free>
 298:	mov	w0, w20
 29c:	ldp	x20, x19, [sp, #64]
 2a0:	ldp	x22, x21, [sp, #48]
 2a4:	ldp	x24, x23, [sp, #32]
 2a8:	ldp	x29, x30, [sp, #16]
 2ac:	add	sp, sp, #0x50
 2b0:	ret

parse_num.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <parse_num_blocks2>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	mov	x29, sp
   8:	str	x19, [sp, #16]
   c:	mov	w19, w1
  10:	add	x1, x29, #0x18
  14:	mov	w2, wzr
  18:	bl	0 <strtoull>
  1c:	ldr	x8, [x29, #24]
  20:	ldrb	w9, [x8]
  24:	cbz	w9, 38 <parse_num_blocks2+0x38>
  28:	ldrb	w8, [x8, #1]
  2c:	cbz	w8, 40 <parse_num_blocks2+0x40>
  30:	mov	x8, xzr
  34:	b	c8 <parse_num_blocks2+0xc8>
  38:	mov	x8, x0
  3c:	b	c8 <parse_num_blocks2+0xc8>
  40:	cmp	w9, #0x53
  44:	mov	x8, xzr
  48:	b.gt	68 <parse_num_blocks2+0x68>
  4c:	cmp	w9, #0x47
  50:	b.eq	b0 <parse_num_blocks2+0xb0>  // b.none
  54:	cmp	w9, #0x4b
  58:	b.eq	b8 <parse_num_blocks2+0xb8>  // b.none
  5c:	cmp	w9, #0x4d
  60:	b.eq	b4 <parse_num_blocks2+0xb4>  // b.none
  64:	b	c8 <parse_num_blocks2+0xc8>
  68:	sub	w10, w9, #0x6b
  6c:	cmp	w10, #0x9
  70:	b.hi	9c <parse_num_blocks2+0x9c>  // b.pmore
  74:	adrp	x9, 0 <parse_num_blocks2>
  78:	add	x9, x9, #0x0
  7c:	adr	x11, 8c <parse_num_blocks2+0x8c>
  80:	ldrb	w12, [x9, x10]
  84:	add	x11, x11, x12, lsl #2
  88:	br	x11
  8c:	tbnz	w19, #31, d8 <parse_num_blocks2+0xd8>
  90:	add	w8, w19, #0x1
  94:	lsr	x8, x0, x8
  98:	b	c8 <parse_num_blocks2+0xc8>
  9c:	cmp	w9, #0x67
  a0:	b.eq	b0 <parse_num_blocks2+0xb0>  // b.none
  a4:	cmp	w9, #0x54
  a8:	b.ne	c8 <parse_num_blocks2+0xc8>  // b.any
  ac:	lsl	x0, x0, #10
  b0:	lsl	x0, x0, #10
  b4:	lsl	x0, x0, #10
  b8:	tbnz	w19, #31, c4 <parse_num_blocks2+0xc4>
  bc:	lsr	x8, x0, x19
  c0:	b	c8 <parse_num_blocks2+0xc8>
  c4:	lsl	x8, x0, #10
  c8:	ldr	x19, [sp, #16]
  cc:	mov	x0, x8
  d0:	ldp	x29, x30, [sp], #32
  d4:	ret
  d8:	lsl	x8, x0, #9
  dc:	b	c8 <parse_num_blocks2+0xc8>

00000000000000e0 <parse_num_blocks>:
  e0:	b	0 <parse_num_blocks2>

pe.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_fs_errors>:
   0:	and	w8, w1, #0xffff
   4:	cmp	w8, #0x3
   8:	mov	x3, x0
   c:	b.eq	30 <print_fs_errors+0x30>  // b.none
  10:	cmp	w8, #0x2
  14:	b.eq	40 <print_fs_errors+0x40>  // b.none
  18:	cmp	w8, #0x1
  1c:	b.ne	50 <print_fs_errors+0x50>  // b.any
  20:	adrp	x0, 0 <print_fs_errors>
  24:	add	x0, x0, #0x0
  28:	mov	w1, #0x8                   	// #8
  2c:	b	5c <print_fs_errors+0x5c>
  30:	adrp	x0, 0 <print_fs_errors>
  34:	add	x0, x0, #0x0
  38:	mov	w1, #0x5                   	// #5
  3c:	b	5c <print_fs_errors+0x5c>
  40:	adrp	x0, 0 <print_fs_errors>
  44:	add	x0, x0, #0x0
  48:	mov	w1, #0x11                  	// #17
  4c:	b	5c <print_fs_errors+0x5c>
  50:	adrp	x0, 0 <print_fs_errors>
  54:	add	x0, x0, #0x0
  58:	mov	w1, #0x12                  	// #18
  5c:	mov	w2, #0x1                   	// #1
  60:	b	0 <fwrite>

pf.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_flags>:
   0:	stp	x29, x30, [sp, #-80]!
   4:	stp	x24, x23, [sp, #32]
   8:	adrp	x23, 0 <print_flags>
   c:	stp	x22, x21, [sp, #48]
  10:	add	x23, x23, #0x0
  14:	adrp	x24, 0 <print_flags>
  18:	adrp	x22, 0 <print_flags>
  1c:	stp	x26, x25, [sp, #16]
  20:	stp	x20, x19, [sp, #64]
  24:	mov	w20, w2
  28:	mov	x21, x1
  2c:	mov	x19, x0
  30:	mov	w8, #0x1                   	// #1
  34:	add	x24, x24, #0x0
  38:	add	x22, x22, #0x0
  3c:	add	x25, x23, #0x10
  40:	mov	w26, #0x1                   	// #1
  44:	mov	x29, sp
  48:	tst	x8, x21
  4c:	b.eq	60 <print_flags+0x60>  // b.none
  50:	tbz	w20, #0, 6c <print_flags+0x6c>
  54:	cbz	w26, 74 <print_flags+0x74>
  58:	mov	w26, wzr
  5c:	b	80 <print_flags+0x80>
  60:	mov	x0, x24
  64:	tbz	w20, #0, 88 <print_flags+0x88>
  68:	b	90 <print_flags+0x90>
  6c:	add	x8, x23, #0x8
  70:	b	84 <print_flags+0x84>
  74:	mov	x0, x22
  78:	mov	x1, x19
  7c:	bl	0 <fputs>
  80:	mov	x8, x25
  84:	ldr	x0, [x8]
  88:	mov	x1, x19
  8c:	bl	0 <fputs>
  90:	ldr	x8, [x25, #8]
  94:	add	x23, x23, #0x18
  98:	add	x25, x25, #0x18
  9c:	cbnz	x8, 48 <print_flags+0x48>
  a0:	tbz	w20, #0, cc <print_flags+0xcc>
  a4:	cbz	w26, cc <print_flags+0xcc>
  a8:	mov	x1, x19
  ac:	ldp	x20, x19, [sp, #64]
  b0:	ldp	x22, x21, [sp, #48]
  b4:	ldp	x24, x23, [sp, #32]
  b8:	ldp	x26, x25, [sp, #16]
  bc:	adrp	x0, 0 <print_flags>
  c0:	add	x0, x0, #0x0
  c4:	ldp	x29, x30, [sp], #80
  c8:	b	0 <fputs>
  cc:	ldp	x20, x19, [sp, #64]
  d0:	ldp	x22, x21, [sp, #48]
  d4:	ldp	x24, x23, [sp, #32]
  d8:	ldp	x26, x25, [sp, #16]
  dc:	ldp	x29, x30, [sp], #80
  e0:	ret

ps.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <print_fs_state>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	stp	x20, x19, [sp, #16]
   8:	mov	x19, x0
   c:	and	w20, w1, #0xffff
  10:	mov	x29, sp
  14:	tbnz	w1, #0, 28 <print_fs_state+0x28>
  18:	adrp	x0, 0 <print_fs_state>
  1c:	add	x0, x0, #0x0
  20:	mov	w1, #0xa                   	// #10
  24:	b	34 <print_fs_state+0x34>
  28:	adrp	x0, 0 <print_fs_state>
  2c:	add	x0, x0, #0x0
  30:	mov	w1, #0x6                   	// #6
  34:	mov	w2, #0x1                   	// #1
  38:	mov	x3, x19
  3c:	bl	0 <fwrite>
  40:	tbnz	w20, #1, 50 <print_fs_state+0x50>
  44:	ldp	x20, x19, [sp, #16]
  48:	ldp	x29, x30, [sp], #32
  4c:	ret
  50:	mov	x3, x19
  54:	ldp	x20, x19, [sp, #16]
  58:	adrp	x0, 0 <print_fs_state>
  5c:	add	x0, x0, #0x0
  60:	mov	w1, #0xc                   	// #12
  64:	mov	w2, #0x1                   	// #1
  68:	ldp	x29, x30, [sp], #32
  6c:	b	0 <fwrite>

setflags.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setflags>:
   0:	sub	sp, sp, #0xb0
   4:	stp	x20, x19, [sp, #160]
   8:	mov	x20, x1
   c:	add	x1, sp, #0x10
  10:	stp	x29, x30, [sp, #144]
  14:	add	x29, sp, #0x90
  18:	mov	w19, w0
  1c:	bl	0 <fstat>
  20:	cbz	w0, 4c <setflags+0x4c>
  24:	mov	w1, #0x6602                	// #26114
  28:	add	x2, sp, #0xc
  2c:	movk	w1, #0x4008, lsl #16
  30:	mov	w0, w19
  34:	str	w20, [sp, #12]
  38:	bl	0 <ioctl>
  3c:	ldp	x20, x19, [sp, #160]
  40:	ldp	x29, x30, [sp, #144]
  44:	add	sp, sp, #0xb0
  48:	ret
  4c:	ldr	w8, [sp, #32]
  50:	and	w8, w8, #0xf000
  54:	cmp	w8, #0x4, lsl #12
  58:	b.eq	24 <setflags+0x24>  // b.none
  5c:	cmp	w8, #0x8, lsl #12
  60:	b.eq	24 <setflags+0x24>  // b.none
  64:	bl	0 <__errno_location>
  68:	mov	w8, #0x5f                  	// #95
  6c:	str	w8, [x0]
  70:	mov	w0, #0xffffffff            	// #-1
  74:	b	3c <setflags+0x3c>

setversion.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setversion>:
   0:	sub	sp, sp, #0x20
   4:	stp	x29, x30, [sp, #16]
   8:	add	x29, sp, #0x10
   c:	stur	w1, [x29, #-4]
  10:	mov	w1, #0x7602                	// #30210
  14:	sub	x2, x29, #0x4
  18:	movk	w1, #0x4008, lsl #16
  1c:	bl	0 <ioctl>
  20:	ldp	x29, x30, [sp, #16]
  24:	add	sp, sp, #0x20
  28:	ret

uuid.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_is_null_uuid>:
   0:	mov	x8, xzr
   4:	ldrb	w9, [x0, x8]
   8:	cbnz	w9, 20 <e2p_is_null_uuid+0x20>
   c:	add	x8, x8, #0x1
  10:	cmp	w8, #0x10
  14:	b.ne	4 <e2p_is_null_uuid+0x4>  // b.any
  18:	mov	w0, #0x1                   	// #1
  1c:	ret
  20:	mov	w0, wzr
  24:	ret

0000000000000028 <e2p_uuid_to_str>:
  28:	sub	sp, sp, #0x40
  2c:	stp	x29, x30, [sp, #48]
  30:	ldr	w9, [x0]
  34:	ldrh	w10, [x0, #4]
  38:	ldrh	w11, [x0, #6]
  3c:	ldrb	w5, [x0, #8]
  40:	ldrb	w6, [x0, #9]
  44:	ldrb	w7, [x0, #10]
  48:	ldrb	w12, [x0, #11]
  4c:	ldrb	w13, [x0, #12]
  50:	ldrb	w14, [x0, #13]
  54:	ldrb	w15, [x0, #14]
  58:	ldrb	w16, [x0, #15]
  5c:	mov	x8, x1
  60:	rev	w2, w9
  64:	lsl	w9, w10, #16
  68:	lsl	w10, w11, #16
  6c:	adrp	x1, 0 <e2p_is_null_uuid>
  70:	rev	w3, w9
  74:	rev	w4, w10
  78:	add	x1, x1, #0x0
  7c:	mov	x0, x8
  80:	add	x29, sp, #0x30
  84:	str	w16, [sp, #32]
  88:	str	w15, [sp, #24]
  8c:	str	w14, [sp, #16]
  90:	str	w13, [sp, #8]
  94:	str	w12, [sp]
  98:	bl	0 <sprintf>
  9c:	ldp	x29, x30, [sp, #48]
  a0:	add	sp, sp, #0x40
  a4:	ret

00000000000000a8 <e2p_uuid2str>:
  a8:	stp	x29, x30, [sp, #-32]!
  ac:	str	x19, [sp, #16]
  b0:	adrp	x19, 0 <e2p_is_null_uuid>
  b4:	mov	x8, xzr
  b8:	add	x19, x19, #0x0
  bc:	mov	x29, sp
  c0:	ldrb	w9, [x0, x8]
  c4:	cbnz	w9, d8 <e2p_uuid2str+0x30>
  c8:	add	x8, x8, #0x1
  cc:	cmp	w8, #0x10
  d0:	b.ne	c0 <e2p_uuid2str+0x18>  // b.any
  d4:	b	e8 <e2p_uuid2str+0x40>
  d8:	adrp	x19, 0 <e2p_is_null_uuid>
  dc:	add	x19, x19, #0x0
  e0:	mov	x1, x19
  e4:	bl	28 <e2p_uuid_to_str>
  e8:	mov	x0, x19
  ec:	ldr	x19, [sp, #16]
  f0:	ldp	x29, x30, [sp], #32
  f4:	ret

ostype.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_os2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	cmp	w0, #0x4
   8:	str	x19, [sp, #16]
   c:	mov	x29, sp
  10:	b.hi	24 <e2p_os2string+0x24>  // b.pmore
  14:	adrp	x8, 0 <e2p_os2string>
  18:	add	x8, x8, #0x0
  1c:	ldr	x19, [x8, w0, uxtw #3]
  20:	b	2c <e2p_os2string+0x2c>
  24:	adrp	x19, 0 <e2p_os2string>
  28:	add	x19, x19, #0x0
  2c:	mov	x0, x19
  30:	bl	0 <strlen>
  34:	add	x0, x0, #0x1
  38:	bl	0 <malloc>
  3c:	cbz	x0, 48 <e2p_os2string+0x48>
  40:	mov	x1, x19
  44:	bl	0 <strcpy>
  48:	ldr	x19, [sp, #16]
  4c:	ldp	x29, x30, [sp], #32
  50:	ret

0000000000000054 <e2p_string2os>:
  54:	stp	x29, x30, [sp, #-48]!
  58:	str	x21, [sp, #16]
  5c:	adrp	x1, 0 <e2p_os2string>
  60:	adrp	x21, 0 <e2p_os2string>
  64:	stp	x20, x19, [sp, #32]
  68:	mov	x20, x0
  6c:	mov	x19, xzr
  70:	add	x1, x1, #0x0
  74:	add	x21, x21, #0x0
  78:	mov	x29, sp
  7c:	mov	x0, x20
  80:	bl	0 <strcasecmp>
  84:	cbz	w0, a0 <e2p_string2os+0x4c>
  88:	add	x8, x21, x19, lsl #3
  8c:	ldr	x1, [x8, #8]
  90:	add	x19, x19, #0x1
  94:	cmp	w19, #0x5
  98:	b.ne	7c <e2p_string2os+0x28>  // b.any
  9c:	mov	w19, #0xffffffff            	// #-1
  a0:	mov	w0, w19
  a4:	ldp	x20, x19, [sp, #32]
  a8:	ldr	x21, [sp, #16]
  ac:	ldp	x29, x30, [sp], #48
  b0:	ret

percent.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_percent>:
   0:	cbz	w0, 34 <e2p_percent+0x34>
   4:	mov	w8, #0x64                  	// #100
   8:	sdiv	w8, w8, w0
   c:	mul	w9, w8, w0
  10:	cmp	w9, #0x64
  14:	b.eq	38 <e2p_percent+0x38>  // b.none
  18:	lsr	w8, w1, #24
  1c:	cbz	w8, 40 <e2p_percent+0x40>
  20:	mov	w8, #0x851f                	// #34079
  24:	movk	w8, #0x51eb, lsl #16
  28:	umull	x8, w1, w8
  2c:	lsr	x8, x8, #37
  30:	mul	w0, w8, w0
  34:	ret
  38:	udiv	w0, w1, w8
  3c:	ret
  40:	mov	w9, #0x851f                	// #34079
  44:	mul	w8, w1, w0
  48:	movk	w9, #0x51eb, lsl #16
  4c:	umull	x8, w8, w9
  50:	lsr	x0, x8, #37
  54:	ret

crypto_mode.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_encmode2string>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	str	x19, [sp, #16]
   8:	mov	x29, sp
   c:	cbz	w0, 38 <e2p_encmode2string+0x38>
  10:	adrp	x8, 0 <e2p_encmode2string>
  14:	mov	w2, w0
  18:	add	x8, x8, #0x0
  1c:	ldr	x19, [x8]
  20:	cbz	x19, 44 <e2p_encmode2string+0x44>
  24:	ldur	w9, [x8, #-8]
  28:	add	x8, x8, #0x10
  2c:	cmp	w9, w2
  30:	b.ne	1c <e2p_encmode2string+0x1c>  // b.any
  34:	b	5c <e2p_encmode2string+0x5c>
  38:	adrp	x19, 0 <e2p_encmode2string>
  3c:	add	x19, x19, #0x0
  40:	b	5c <e2p_encmode2string+0x5c>
  44:	adrp	x19, 0 <e2p_encmode2string>
  48:	add	x19, x19, #0x0
  4c:	adrp	x1, 0 <e2p_encmode2string>
  50:	add	x1, x1, #0x0
  54:	mov	x0, x19
  58:	bl	0 <sprintf>
  5c:	mov	x0, x19
  60:	ldr	x19, [sp, #16]
  64:	ldp	x29, x30, [sp], #32
  68:	ret

000000000000006c <e2p_string2encmode>:
  6c:	sub	sp, sp, #0x30
  70:	stp	x20, x19, [sp, #32]
  74:	adrp	x20, 0 <e2p_encmode2string>
  78:	adrp	x1, 0 <e2p_encmode2string>
  7c:	mov	x19, x0
  80:	add	x20, x20, #0x0
  84:	add	x1, x1, #0x0
  88:	stp	x29, x30, [sp, #16]
  8c:	add	x29, sp, #0x10
  90:	mov	x0, x19
  94:	bl	0 <strcasecmp>
  98:	cbz	w0, c8 <e2p_string2encmode+0x5c>
  9c:	ldr	x1, [x20, #24]
  a0:	add	x20, x20, #0x10
  a4:	cbnz	x1, 90 <e2p_string2encmode+0x24>
  a8:	adrp	x1, 0 <e2p_encmode2string>
  ac:	add	x1, x1, #0x0
  b0:	mov	w2, #0x9                   	// #9
  b4:	mov	x0, x19
  b8:	bl	0 <strncasecmp>
  bc:	cbz	w0, dc <e2p_string2encmode+0x70>
  c0:	mov	w0, #0xffffffff            	// #-1
  c4:	b	cc <e2p_string2encmode+0x60>
  c8:	ldr	w0, [x20]
  cc:	ldp	x20, x19, [sp, #32]
  d0:	ldp	x29, x30, [sp, #16]
  d4:	add	sp, sp, #0x30
  d8:	ret
  dc:	ldrb	w8, [x19, #9]!
  e0:	cbz	w8, c0 <e2p_string2encmode+0x54>
  e4:	add	x1, sp, #0x8
  e8:	mov	w2, #0xa                   	// #10
  ec:	mov	x0, x19
  f0:	bl	0 <strtol>
  f4:	cmp	w0, #0xff
  f8:	b.hi	c0 <e2p_string2encmode+0x54>  // b.pmore
  fc:	ldr	x8, [sp, #8]
 100:	ldrb	w8, [x8]
 104:	cmp	w8, #0x0
 108:	csinv	w0, w0, wzr, eq  // eq = none
 10c:	b	cc <e2p_string2encmode+0x60>

fgetproject.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fgetproject>:
   0:	sub	sp, sp, #0x50
   4:	stp	x22, x21, [sp, #48]
   8:	mov	x21, x1
   c:	mov	w1, #0x800                 	// #2048
  10:	stp	x29, x30, [sp, #32]
  14:	stp	x20, x19, [sp, #64]
  18:	add	x29, sp, #0x20
  1c:	bl	0 <open>
  20:	cmn	w0, #0x1
  24:	b.eq	6c <fgetproject+0x6c>  // b.none
  28:	mov	w1, #0x581f                	// #22559
  2c:	mov	x2, sp
  30:	movk	w1, #0x801c, lsl #16
  34:	mov	w20, w0
  38:	bl	0 <ioctl>
  3c:	mov	w19, w0
  40:	cbnz	w0, 4c <fgetproject+0x4c>
  44:	ldr	w8, [sp, #12]
  48:	str	x8, [x21]
  4c:	bl	0 <__errno_location>
  50:	ldr	w22, [x0]
  54:	mov	x21, x0
  58:	mov	w0, w20
  5c:	bl	0 <close>
  60:	cbz	w22, 70 <fgetproject+0x70>
  64:	str	w22, [x21]
  68:	b	70 <fgetproject+0x70>
  6c:	mov	w19, #0xffffffff            	// #-1
  70:	mov	w0, w19
  74:	ldp	x20, x19, [sp, #64]
  78:	ldp	x22, x21, [sp, #48]
  7c:	ldp	x29, x30, [sp, #32]
  80:	add	sp, sp, #0x50
  84:	ret

fsetproject.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <fsetproject>:
   0:	sub	sp, sp, #0x40
   4:	stp	x20, x19, [sp, #48]
   8:	mov	x20, x1
   c:	mov	w1, #0x800                 	// #2048
  10:	stp	x29, x30, [sp, #32]
  14:	add	x29, sp, #0x20
  18:	bl	0 <open>
  1c:	cmn	w0, #0x1
  20:	b.eq	8c <fsetproject+0x8c>  // b.none
  24:	mov	w1, #0x581f                	// #22559
  28:	mov	x2, sp
  2c:	movk	w1, #0x801c, lsl #16
  30:	mov	w19, w0
  34:	bl	0 <ioctl>
  38:	cmn	w0, #0x1
  3c:	b.eq	70 <fsetproject+0x70>  // b.none
  40:	mov	w1, #0x5820                	// #22560
  44:	mov	x2, sp
  48:	movk	w1, #0x401c, lsl #16
  4c:	mov	w0, w19
  50:	str	w20, [sp, #12]
  54:	bl	0 <ioctl>
  58:	cmn	w0, #0x1
  5c:	b.eq	70 <fsetproject+0x70>  // b.none
  60:	mov	w20, w0
  64:	mov	w0, w19
  68:	bl	0 <close>
  6c:	b	90 <fsetproject+0x90>
  70:	bl	0 <__errno_location>
  74:	ldr	w20, [x0]
  78:	mov	w0, w19
  7c:	bl	0 <close>
  80:	cbz	w20, 8c <fsetproject+0x8c>
  84:	bl	0 <__errno_location>
  88:	str	w20, [x0]
  8c:	mov	w20, #0xffffffff            	// #-1
  90:	mov	w0, w20
  94:	ldp	x20, x19, [sp, #48]
  98:	ldp	x29, x30, [sp, #32]
  9c:	add	sp, sp, #0x40
  a0:	ret

encoding.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <e2p_str2encoding>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	stp	x20, x19, [sp, #32]
   8:	adrp	x20, 0 <e2p_str2encoding>
   c:	mov	x19, x0
  10:	mov	x8, xzr
  14:	add	x20, x20, #0x0
  18:	str	x21, [sp, #16]
  1c:	mov	x29, sp
  20:	mov	x21, x8
  24:	lsl	x8, x8, #4
  28:	ldr	x1, [x20, x8]
  2c:	mov	x0, x19
  30:	bl	0 <strcmp>
  34:	cbz	w0, 48 <e2p_str2encoding+0x48>
  38:	mov	w8, #0x1                   	// #1
  3c:	cbz	x21, 20 <e2p_str2encoding+0x20>
  40:	mov	w0, #0xffffffea            	// #-22
  44:	b	50 <e2p_str2encoding+0x50>
  48:	add	x8, x20, x21, lsl #4
  4c:	ldrh	w0, [x8, #8]
  50:	ldp	x20, x19, [sp, #32]
  54:	ldr	x21, [sp, #16]
  58:	ldp	x29, x30, [sp], #48
  5c:	ret

0000000000000060 <e2p_encoding2str>:
  60:	stp	x29, x30, [sp, #-32]!
  64:	adrp	x8, 0 <e2p_str2encoding>
  68:	str	x19, [sp, #16]
  6c:	mov	x29, sp
  70:	mov	w2, w0
  74:	mov	x9, xzr
  78:	add	x8, x8, #0x0
  7c:	mov	x10, x9
  80:	add	x9, x8, x9, lsl #4
  84:	ldrh	w9, [x9, #8]
  88:	cmp	w9, w2
  8c:	b.eq	b4 <e2p_encoding2str+0x54>  // b.none
  90:	mov	w9, #0x1                   	// #1
  94:	cbz	x10, 7c <e2p_encoding2str+0x1c>
  98:	adrp	x19, 0 <e2p_str2encoding>
  9c:	add	x19, x19, #0x0
  a0:	adrp	x1, 0 <e2p_str2encoding>
  a4:	add	x1, x1, #0x0
  a8:	mov	x0, x19
  ac:	bl	0 <sprintf>
  b0:	b	bc <e2p_encoding2str+0x5c>
  b4:	lsl	x9, x10, #4
  b8:	ldr	x19, [x8, x9]
  bc:	mov	x0, x19
  c0:	ldr	x19, [sp, #16]
  c4:	ldp	x29, x30, [sp], #32
  c8:	ret

00000000000000cc <e2p_get_encoding_flags>:
  cc:	adrp	x8, 0 <e2p_str2encoding>
  d0:	mov	x9, xzr
  d4:	add	x8, x8, #0x0
  d8:	mov	x10, x9
  dc:	add	x9, x8, x9, lsl #4
  e0:	ldrh	w11, [x9, #8]
  e4:	cmp	w11, w0
  e8:	b.eq	fc <e2p_get_encoding_flags+0x30>  // b.none
  ec:	mov	w9, #0x1                   	// #1
  f0:	cbz	x10, d8 <e2p_get_encoding_flags+0xc>
  f4:	mov	w0, wzr
  f8:	ret
  fc:	ldrh	w0, [x9, #10]
 100:	ret

0000000000000104 <e2p_str2encoding_flags>:
 104:	stp	x29, x30, [sp, #-64]!
 108:	mov	x8, x1
 10c:	adrp	x1, 0 <e2p_str2encoding>
 110:	stp	x20, x19, [sp, #48]
 114:	mov	w20, w0
 118:	add	x1, x1, #0x0
 11c:	mov	x0, x8
 120:	stp	x24, x23, [sp, #16]
 124:	stp	x22, x21, [sp, #32]
 128:	mov	x29, sp
 12c:	mov	x19, x2
 130:	bl	0 <strtok>
 134:	cmp	w20, #0x1
 138:	b.ne	1b8 <e2p_str2encoding_flags+0xb4>  // b.any
 13c:	mov	x23, x0
 140:	cbz	x0, 1c0 <e2p_str2encoding_flags+0xbc>
 144:	adrp	x20, 0 <e2p_str2encoding>
 148:	adrp	x21, 0 <e2p_str2encoding>
 14c:	adrp	x22, 0 <e2p_str2encoding>
 150:	add	x20, x20, #0x0
 154:	add	x21, x21, #0x0
 158:	add	x22, x22, #0x0
 15c:	mov	w2, #0x2                   	// #2
 160:	mov	x0, x20
 164:	mov	x1, x23
 168:	bl	0 <strncmp>
 16c:	add	x8, x23, #0x2
 170:	cmp	w0, #0x0
 174:	mov	w24, w0
 178:	csel	x1, x8, x23, eq  // eq = none
 17c:	mov	x0, x21
 180:	bl	0 <strcmp>
 184:	cbnz	w0, 1b8 <e2p_str2encoding_flags+0xb4>
 188:	ldrh	w8, [x19]
 18c:	cmp	w24, #0x0
 190:	mov	x0, xzr
 194:	mov	x1, x22
 198:	orr	w9, w8, #0x1
 19c:	and	w8, w8, #0xfffe
 1a0:	csel	w8, w8, w9, eq  // eq = none
 1a4:	strh	w8, [x19]
 1a8:	bl	0 <strtok>
 1ac:	mov	x23, x0
 1b0:	cbnz	x0, 15c <e2p_str2encoding_flags+0x58>
 1b4:	b	1c4 <e2p_str2encoding_flags+0xc0>
 1b8:	mov	w0, #0xffffffea            	// #-22
 1bc:	b	1c4 <e2p_str2encoding_flags+0xc0>
 1c0:	mov	w0, wzr
 1c4:	ldp	x20, x19, [sp, #48]
 1c8:	ldp	x22, x21, [sp, #32]
 1cc:	ldp	x24, x23, [sp, #16]
 1d0:	ldp	x29, x30, [sp], #64
 1d4:	ret
