In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libz.a_gcc_-O1:

adler32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <adler32_combine_>:
   0:	tbnz	x2, #63, e4 <adler32_combine_+0xe4>
   4:	and	x4, x0, #0xffff
   8:	mov	x3, #0xe2e7                	// #58087
   c:	movk	x3, #0x8697, lsl #16
  10:	movk	x3, #0x8070, lsl #32
  14:	movk	x3, #0x8007, lsl #48
  18:	smulh	x3, x2, x3
  1c:	add	x3, x3, x2
  20:	asr	x3, x3, #15
  24:	sub	x3, x3, x2, asr #63
  28:	lsl	x5, x3, #12
  2c:	sub	x5, x5, x3
  30:	add	x3, x3, x5, lsl #4
  34:	sub	x3, x2, x3
  38:	mul	x2, x3, x4
  3c:	add	x4, x4, w1, uxth
  40:	mov	x7, #0xfff0                	// #65520
  44:	add	x6, x4, x7
  48:	lsr	w0, w0, #16
  4c:	lsr	w1, w1, #16
  50:	add	x0, x0, x1
  54:	mov	x1, #0xc5cd                	// #50637
  58:	movk	x1, #0xd2f, lsl #16
  5c:	movk	x1, #0xe1, lsl #32
  60:	movk	x1, #0xf, lsl #48
  64:	umulh	x5, x2, x1
  68:	sub	x1, x2, x5
  6c:	add	x1, x5, x1, lsr #1
  70:	lsr	x1, x1, #15
  74:	lsl	x5, x1, #12
  78:	sub	x5, x5, x1
  7c:	add	x1, x1, x5, lsl #4
  80:	sub	x2, x2, x1
  84:	sub	x3, x2, x3
  88:	add	x3, x0, x3
  8c:	add	x0, x3, #0xf, lsl #12
  90:	add	x0, x0, #0xff1
  94:	cmp	x6, x7
  98:	b.ls	b0 <adler32_combine_+0xb0>  // b.plast
  9c:	sub	x6, x4, #0x1
  a0:	cmp	x6, x7
  a4:	b.ls	b0 <adler32_combine_+0xb0>  // b.plast
  a8:	sub	x6, x4, #0xf, lsl #12
  ac:	sub	x6, x6, #0xff2
  b0:	sub	x3, x3, #0xf, lsl #12
  b4:	sub	x3, x3, #0xff1
  b8:	mov	x1, #0xffe1                	// #65505
  bc:	movk	x1, #0x1, lsl #16
  c0:	cmp	x0, x1
  c4:	csel	x0, x3, x0, hi  // hi = pmore
  c8:	sub	x1, x0, #0xf, lsl #12
  cc:	sub	x1, x1, #0xff1
  d0:	mov	x2, #0xfff0                	// #65520
  d4:	cmp	x0, x2
  d8:	csel	x0, x1, x0, hi  // hi = pmore
  dc:	orr	x0, x6, x0, lsl #16
  e0:	ret
  e4:	mov	x0, #0xffffffff            	// #4294967295
  e8:	b	e0 <adler32_combine_+0xe0>

00000000000000ec <adler32_z>:
  ec:	mov	x3, x1
  f0:	lsr	w11, w0, #16
  f4:	and	x10, x0, #0xffff
  f8:	cmp	x2, #0x1
  fc:	b.eq	288 <adler32_z+0x19c>  // b.none
 100:	mov	x13, x2
 104:	cbz	x1, 4a0 <adler32_z+0x3b4>
 108:	cmp	x2, #0xf
 10c:	b.ls	2c0 <adler32_z+0x1d4>  // b.plast
 110:	stp	x29, x30, [sp, #-64]!
 114:	mov	x29, sp
 118:	stp	x19, x20, [sp, #16]
 11c:	add	x12, x1, #0x1, lsl #12
 120:	add	x12, x12, #0x5b0
 124:	mov	x0, #0x15af                	// #5551
 128:	cmp	x2, x0
 12c:	b.ls	338 <adler32_z+0x24c>  // b.plast
 130:	stp	x21, x22, [sp, #32]
 134:	str	x23, [sp, #48]
 138:	mov	x16, #0xffffffffffffea50    	// #-5552
 13c:	mov	x15, #0xc5cd                	// #50637
 140:	movk	x15, #0xd2f, lsl #16
 144:	movk	x15, #0xe1, lsl #32
 148:	movk	x15, #0xf, lsl #48
 14c:	mov	x18, #0x15b0                	// #5552
 150:	mov	x17, x0
 154:	add	x3, x12, x16
 158:	mov	x14, x13
 15c:	add	x13, x13, x16
 160:	ldrb	w0, [x3]
 164:	add	x0, x0, x10
 168:	ldrb	w1, [x3, #1]
 16c:	add	x1, x1, x0
 170:	ldrb	w9, [x3, #2]
 174:	add	x9, x9, x1
 178:	ldrb	w23, [x3, #3]
 17c:	add	x23, x23, x9
 180:	ldrb	w8, [x3, #4]
 184:	add	x8, x8, x23
 188:	ldrb	w22, [x3, #5]
 18c:	add	x22, x22, x8
 190:	ldrb	w7, [x3, #6]
 194:	add	x7, x7, x22
 198:	ldrb	w21, [x3, #7]
 19c:	add	x21, x21, x7
 1a0:	ldrb	w6, [x3, #8]
 1a4:	add	x6, x6, x21
 1a8:	ldrb	w20, [x3, #9]
 1ac:	add	x20, x20, x6
 1b0:	ldrb	w5, [x3, #10]
 1b4:	add	x5, x5, x20
 1b8:	ldrb	w19, [x3, #11]
 1bc:	add	x19, x19, x5
 1c0:	ldrb	w4, [x3, #12]
 1c4:	add	x4, x4, x19
 1c8:	ldrb	w30, [x3, #13]
 1cc:	add	x30, x30, x4
 1d0:	ldrb	w2, [x3, #14]
 1d4:	add	x2, x2, x30
 1d8:	ldrb	w10, [x3, #15]
 1dc:	add	x10, x10, x2
 1e0:	add	x1, x0, x1
 1e4:	add	x9, x9, x23
 1e8:	add	x1, x1, x9
 1ec:	add	x8, x8, x22
 1f0:	add	x1, x1, x8
 1f4:	add	x7, x7, x21
 1f8:	add	x1, x1, x7
 1fc:	add	x0, x6, x20
 200:	add	x0, x1, x0
 204:	add	x5, x5, x19
 208:	add	x0, x0, x5
 20c:	add	x4, x4, x30
 210:	add	x0, x0, x4
 214:	add	x2, x2, x10
 218:	add	x0, x0, x2
 21c:	add	x11, x11, x0
 220:	add	x3, x3, #0x10
 224:	cmp	x3, x12
 228:	b.ne	160 <adler32_z+0x74>  // b.any
 22c:	umulh	x1, x10, x15
 230:	sub	x0, x10, x1
 234:	add	x0, x1, x0, lsr #1
 238:	lsr	x0, x0, #15
 23c:	lsl	x1, x0, #12
 240:	sub	x1, x1, x0
 244:	add	x0, x0, x1, lsl #4
 248:	sub	x10, x10, x0
 24c:	umulh	x1, x11, x15
 250:	sub	x0, x11, x1
 254:	add	x0, x1, x0, lsr #1
 258:	lsr	x0, x0, #15
 25c:	lsl	x1, x0, #12
 260:	sub	x1, x1, x0
 264:	add	x0, x0, x1, lsl #4
 268:	sub	x11, x11, x0
 26c:	add	x12, x12, x18
 270:	cmp	x13, x17
 274:	b.hi	154 <adler32_z+0x68>  // b.pmore
 278:	cbnz	x13, 328 <adler32_z+0x23c>
 27c:	ldp	x21, x22, [sp, #32]
 280:	ldr	x23, [sp, #48]
 284:	b	490 <adler32_z+0x3a4>
 288:	ldrb	w0, [x1]
 28c:	add	x10, x0, x10
 290:	sub	x0, x10, #0xf, lsl #12
 294:	sub	x0, x0, #0xff1
 298:	mov	x1, #0xfff0                	// #65520
 29c:	cmp	x10, x1
 2a0:	csel	x10, x0, x10, hi  // hi = pmore
 2a4:	add	x11, x10, x11
 2a8:	sub	x0, x11, #0xf, lsl #12
 2ac:	sub	x0, x0, #0xff1
 2b0:	cmp	x11, x1
 2b4:	csel	x11, x0, x11, hi  // hi = pmore
 2b8:	orr	x0, x10, x11, lsl #16
 2bc:	ret
 2c0:	cbz	x2, 2dc <adler32_z+0x1f0>
 2c4:	add	x13, x1, x2
 2c8:	ldrb	w0, [x3], #1
 2cc:	add	x10, x10, x0
 2d0:	add	x11, x11, x10
 2d4:	cmp	x13, x3
 2d8:	b.ne	2c8 <adler32_z+0x1dc>  // b.any
 2dc:	sub	x0, x10, #0xf, lsl #12
 2e0:	sub	x0, x0, #0xff1
 2e4:	mov	x1, #0xfff0                	// #65520
 2e8:	cmp	x10, x1
 2ec:	csel	x10, x0, x10, hi  // hi = pmore
 2f0:	mov	x0, #0xc5cd                	// #50637
 2f4:	movk	x0, #0xd2f, lsl #16
 2f8:	movk	x0, #0xe1, lsl #32
 2fc:	movk	x0, #0xf, lsl #48
 300:	umulh	x1, x11, x0
 304:	sub	x0, x11, x1
 308:	add	x0, x1, x0, lsr #1
 30c:	lsr	x1, x0, #15
 310:	lsl	x0, x1, #12
 314:	sub	x0, x0, x1
 318:	add	x0, x1, x0, lsl #4
 31c:	sub	x11, x11, x0
 320:	orr	x0, x10, x11, lsl #16
 324:	ret
 328:	cmp	x13, #0xf
 32c:	b.ls	4a8 <adler32_z+0x3bc>  // b.plast
 330:	ldp	x21, x22, [sp, #32]
 334:	ldr	x23, [sp, #48]
 338:	sub	x14, x13, #0x10
 33c:	lsr	x14, x14, #4
 340:	add	x9, x14, #0x1
 344:	add	x9, x3, x9, lsl #4
 348:	ldrb	w0, [x3]
 34c:	add	x0, x0, x10
 350:	ldrb	w20, [x3, #1]
 354:	add	x20, x20, x0
 358:	ldrb	w8, [x3, #2]
 35c:	add	x8, x8, x20
 360:	ldrb	w19, [x3, #3]
 364:	add	x19, x19, x8
 368:	ldrb	w7, [x3, #4]
 36c:	add	x7, x7, x19
 370:	ldrb	w18, [x3, #5]
 374:	add	x18, x18, x7
 378:	ldrb	w6, [x3, #6]
 37c:	add	x6, x6, x18
 380:	ldrb	w17, [x3, #7]
 384:	add	x17, x17, x6
 388:	ldrb	w5, [x3, #8]
 38c:	add	x5, x5, x17
 390:	ldrb	w16, [x3, #9]
 394:	add	x16, x16, x5
 398:	ldrb	w4, [x3, #10]
 39c:	add	x4, x4, x16
 3a0:	ldrb	w15, [x3, #11]
 3a4:	add	x15, x15, x4
 3a8:	ldrb	w2, [x3, #12]
 3ac:	add	x2, x2, x15
 3b0:	ldrb	w12, [x3, #13]
 3b4:	add	x12, x12, x2
 3b8:	ldrb	w1, [x3, #14]
 3bc:	add	x1, x1, x12
 3c0:	ldrb	w10, [x3, #15]
 3c4:	add	x10, x10, x1
 3c8:	add	x0, x0, x20
 3cc:	add	x8, x8, x19
 3d0:	add	x0, x0, x8
 3d4:	add	x7, x7, x18
 3d8:	add	x0, x0, x7
 3dc:	add	x6, x6, x17
 3e0:	add	x0, x0, x6
 3e4:	add	x5, x5, x16
 3e8:	add	x0, x0, x5
 3ec:	add	x4, x4, x15
 3f0:	add	x0, x0, x4
 3f4:	add	x2, x2, x12
 3f8:	add	x0, x0, x2
 3fc:	add	x1, x1, x10
 400:	add	x0, x0, x1
 404:	add	x11, x11, x0
 408:	add	x3, x3, #0x10
 40c:	cmp	x9, x3
 410:	b.ne	348 <adler32_z+0x25c>  // b.any
 414:	sub	x0, x13, #0x11
 418:	sub	x14, x0, x14, lsl #4
 41c:	tst	x13, #0xf
 420:	b.eq	440 <adler32_z+0x354>  // b.none
 424:	add	x14, x14, #0x1
 428:	add	x0, x9, x14
 42c:	ldrb	w1, [x9], #1
 430:	add	x10, x10, x1
 434:	add	x11, x11, x10
 438:	cmp	x9, x0
 43c:	b.ne	42c <adler32_z+0x340>  // b.any
 440:	mov	x1, #0xc5cd                	// #50637
 444:	movk	x1, #0xd2f, lsl #16
 448:	movk	x1, #0xe1, lsl #32
 44c:	movk	x1, #0xf, lsl #48
 450:	umulh	x2, x10, x1
 454:	sub	x0, x10, x2
 458:	add	x0, x2, x0, lsr #1
 45c:	lsr	x0, x0, #15
 460:	lsl	x2, x0, #12
 464:	sub	x2, x2, x0
 468:	add	x0, x0, x2, lsl #4
 46c:	sub	x10, x10, x0
 470:	umulh	x1, x11, x1
 474:	sub	x0, x11, x1
 478:	add	x0, x1, x0, lsr #1
 47c:	lsr	x0, x0, #15
 480:	lsl	x1, x0, #12
 484:	sub	x1, x1, x0
 488:	add	x0, x0, x1, lsl #4
 48c:	sub	x11, x11, x0
 490:	orr	x0, x10, x11, lsl #16
 494:	ldp	x19, x20, [sp, #16]
 498:	ldp	x29, x30, [sp], #64
 49c:	ret
 4a0:	mov	x0, #0x1                   	// #1
 4a4:	ret
 4a8:	sub	x14, x14, #0x1, lsl #12
 4ac:	sub	x14, x14, #0x5b1
 4b0:	mov	x9, x3
 4b4:	ldp	x21, x22, [sp, #32]
 4b8:	ldr	x23, [sp, #48]
 4bc:	b	424 <adler32_z+0x338>

00000000000004c0 <adler32>:
 4c0:	stp	x29, x30, [sp, #-16]!
 4c4:	mov	x29, sp
 4c8:	mov	w2, w2
 4cc:	bl	ec <adler32_z>
 4d0:	ldp	x29, x30, [sp], #16
 4d4:	ret

00000000000004d8 <adler32_combine>:
 4d8:	stp	x29, x30, [sp, #-16]!
 4dc:	mov	x29, sp
 4e0:	bl	0 <adler32_combine_>
 4e4:	ldp	x29, x30, [sp], #16
 4e8:	ret

00000000000004ec <adler32_combine64>:
 4ec:	stp	x29, x30, [sp, #-16]!
 4f0:	mov	x29, sp
 4f4:	bl	0 <adler32_combine_>
 4f8:	ldp	x29, x30, [sp], #16
 4fc:	ret

crc32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gf2_matrix_times>:
   0:	mov	x2, x0
   4:	cbz	x1, 2c <gf2_matrix_times+0x2c>
   8:	mov	x0, #0x0                   	// #0
   c:	b	1c <gf2_matrix_times+0x1c>
  10:	lsr	x1, x1, #1
  14:	add	x2, x2, #0x8
  18:	cbz	x1, 30 <gf2_matrix_times+0x30>
  1c:	tbz	w1, #0, 10 <gf2_matrix_times+0x10>
  20:	ldr	x3, [x2]
  24:	eor	x0, x0, x3
  28:	b	10 <gf2_matrix_times+0x10>
  2c:	mov	x0, x1
  30:	ret

0000000000000034 <gf2_matrix_square>:
  34:	stp	x29, x30, [sp, #-48]!
  38:	mov	x29, sp
  3c:	stp	x19, x20, [sp, #16]
  40:	str	x21, [sp, #32]
  44:	mov	x21, x0
  48:	mov	x20, x1
  4c:	mov	x19, #0x0                   	// #0
  50:	ldr	x1, [x20, x19]
  54:	mov	x0, x20
  58:	bl	0 <gf2_matrix_times>
  5c:	str	x0, [x21, x19]
  60:	add	x19, x19, #0x8
  64:	cmp	x19, #0x100
  68:	b.ne	50 <gf2_matrix_square+0x1c>  // b.any
  6c:	ldp	x19, x20, [sp, #16]
  70:	ldr	x21, [sp, #32]
  74:	ldp	x29, x30, [sp], #48
  78:	ret

000000000000007c <crc32_combine_>:
  7c:	sub	sp, sp, #0x230
  80:	stp	x29, x30, [sp]
  84:	mov	x29, sp
  88:	stp	x19, x20, [sp, #16]
  8c:	mov	x20, x0
  90:	cmp	x2, #0x0
  94:	b.le	150 <crc32_combine_+0xd4>
  98:	stp	x21, x22, [sp, #32]
  9c:	mov	x22, x1
  a0:	mov	x19, x2
  a4:	mov	x0, #0x8320                	// #33568
  a8:	movk	x0, #0xedb8, lsl #16
  ac:	str	x0, [sp, #48]
  b0:	add	x0, sp, #0x30
  b4:	add	x4, sp, #0x38
  b8:	add	x2, x0, #0x100
  bc:	mov	x3, #0x1                   	// #1
  c0:	str	x3, [x4], #8
  c4:	lsl	x3, x3, #1
  c8:	cmp	x4, x2
  cc:	b.ne	c0 <crc32_combine_+0x44>  // b.any
  d0:	add	x1, sp, #0x30
  d4:	add	x0, sp, #0x130
  d8:	bl	34 <gf2_matrix_square>
  dc:	add	x1, sp, #0x130
  e0:	add	x0, sp, #0x30
  e4:	bl	34 <gf2_matrix_square>
  e8:	b	108 <crc32_combine_+0x8c>
  ec:	mov	x1, x20
  f0:	add	x0, sp, #0x130
  f4:	bl	0 <gf2_matrix_times>
  f8:	mov	x20, x0
  fc:	b	118 <crc32_combine_+0x9c>
 100:	asr	x19, x19, #2
 104:	cbz	x19, 148 <crc32_combine_+0xcc>
 108:	add	x1, sp, #0x30
 10c:	add	x0, sp, #0x130
 110:	bl	34 <gf2_matrix_square>
 114:	tbnz	w19, #0, ec <crc32_combine_+0x70>
 118:	asr	x21, x19, #1
 11c:	cmp	xzr, x19, asr #1
 120:	b.eq	148 <crc32_combine_+0xcc>  // b.none
 124:	add	x1, sp, #0x130
 128:	add	x0, sp, #0x30
 12c:	bl	34 <gf2_matrix_square>
 130:	tbz	w21, #0, 100 <crc32_combine_+0x84>
 134:	mov	x1, x20
 138:	add	x0, sp, #0x30
 13c:	bl	0 <gf2_matrix_times>
 140:	mov	x20, x0
 144:	b	100 <crc32_combine_+0x84>
 148:	eor	x0, x20, x22
 14c:	ldp	x21, x22, [sp, #32]
 150:	ldp	x19, x20, [sp, #16]
 154:	ldp	x29, x30, [sp]
 158:	add	sp, sp, #0x230
 15c:	ret

0000000000000160 <get_crc_table>:
 160:	adrp	x0, 0 <gf2_matrix_times>
 164:	add	x0, x0, #0x0
 168:	ret

000000000000016c <crc32_z>:
 16c:	cbz	x1, 464 <crc32_z+0x2f8>
 170:	mvn	w0, w0
 174:	cbz	x2, 46c <crc32_z+0x300>
 178:	tst	x1, #0x3
 17c:	b.eq	1ac <crc32_z+0x40>  // b.none
 180:	adrp	x4, 0 <gf2_matrix_times>
 184:	add	x4, x4, #0x0
 188:	ldrb	w3, [x1], #1
 18c:	eor	w3, w3, w0
 190:	and	x3, x3, #0xff
 194:	ldr	w3, [x4, x3, lsl #2]
 198:	eor	w0, w3, w0, lsr #8
 19c:	subs	x2, x2, #0x1
 1a0:	b.eq	46c <crc32_z+0x300>  // b.none
 1a4:	tst	x1, #0x3
 1a8:	b.ne	188 <crc32_z+0x1c>  // b.any
 1ac:	cmp	x2, #0x1f
 1b0:	b.ls	3bc <crc32_z+0x250>  // b.plast
 1b4:	sub	x5, x2, #0x20
 1b8:	and	x5, x5, #0xffffffffffffffe0
 1bc:	add	x5, x5, #0x20
 1c0:	add	x5, x1, x5
 1c4:	adrp	x3, 0 <gf2_matrix_times>
 1c8:	add	x3, x3, #0x0
 1cc:	ldr	w4, [x1]
 1d0:	eor	w0, w0, w4
 1d4:	ubfx	x4, x0, #8, #8
 1d8:	add	x4, x4, #0x200
 1dc:	ubfx	x6, x0, #16, #8
 1e0:	add	x6, x6, #0x100
 1e4:	ldr	w4, [x3, x4, lsl #2]
 1e8:	ldr	w6, [x3, x6, lsl #2]
 1ec:	eor	w4, w4, w6
 1f0:	add	x6, x3, w0, uxtb #2
 1f4:	lsr	w0, w0, #24
 1f8:	ldr	w6, [x6, #3072]
 1fc:	ldr	w0, [x3, x0, lsl #2]
 200:	eor	w0, w6, w0
 204:	eor	w4, w4, w0
 208:	ldr	w0, [x1, #4]
 20c:	eor	w4, w4, w0
 210:	ubfx	x0, x4, #8, #8
 214:	add	x0, x0, #0x200
 218:	ubfx	x6, x4, #16, #8
 21c:	add	x6, x6, #0x100
 220:	ldr	w0, [x3, x0, lsl #2]
 224:	ldr	w6, [x3, x6, lsl #2]
 228:	eor	w0, w0, w6
 22c:	add	x6, x3, w4, uxtb #2
 230:	lsr	w4, w4, #24
 234:	ldr	w6, [x6, #3072]
 238:	ldr	w4, [x3, x4, lsl #2]
 23c:	eor	w4, w6, w4
 240:	eor	w0, w0, w4
 244:	ldr	w4, [x1, #8]
 248:	eor	w0, w0, w4
 24c:	ubfx	x4, x0, #8, #8
 250:	add	x4, x4, #0x200
 254:	ubfx	x6, x0, #16, #8
 258:	add	x6, x6, #0x100
 25c:	ldr	w4, [x3, x4, lsl #2]
 260:	ldr	w6, [x3, x6, lsl #2]
 264:	eor	w4, w4, w6
 268:	add	x6, x3, w0, uxtb #2
 26c:	lsr	w0, w0, #24
 270:	ldr	w6, [x6, #3072]
 274:	ldr	w0, [x3, x0, lsl #2]
 278:	eor	w0, w6, w0
 27c:	eor	w4, w4, w0
 280:	ldr	w0, [x1, #12]
 284:	eor	w4, w4, w0
 288:	ubfx	x0, x4, #8, #8
 28c:	add	x0, x0, #0x200
 290:	ubfx	x6, x4, #16, #8
 294:	add	x6, x6, #0x100
 298:	ldr	w0, [x3, x0, lsl #2]
 29c:	ldr	w6, [x3, x6, lsl #2]
 2a0:	eor	w0, w0, w6
 2a4:	add	x6, x3, w4, uxtb #2
 2a8:	lsr	w4, w4, #24
 2ac:	ldr	w6, [x6, #3072]
 2b0:	ldr	w4, [x3, x4, lsl #2]
 2b4:	eor	w4, w6, w4
 2b8:	eor	w0, w0, w4
 2bc:	ldr	w4, [x1, #16]
 2c0:	eor	w0, w0, w4
 2c4:	ubfx	x4, x0, #8, #8
 2c8:	add	x4, x4, #0x200
 2cc:	ubfx	x6, x0, #16, #8
 2d0:	add	x6, x6, #0x100
 2d4:	ldr	w4, [x3, x4, lsl #2]
 2d8:	ldr	w6, [x3, x6, lsl #2]
 2dc:	eor	w4, w4, w6
 2e0:	add	x6, x3, w0, uxtb #2
 2e4:	lsr	w0, w0, #24
 2e8:	ldr	w6, [x6, #3072]
 2ec:	ldr	w0, [x3, x0, lsl #2]
 2f0:	eor	w0, w6, w0
 2f4:	eor	w4, w4, w0
 2f8:	ldr	w0, [x1, #20]
 2fc:	eor	w4, w4, w0
 300:	ubfx	x0, x4, #8, #8
 304:	add	x0, x0, #0x200
 308:	ubfx	x6, x4, #16, #8
 30c:	add	x6, x6, #0x100
 310:	ldr	w0, [x3, x0, lsl #2]
 314:	ldr	w6, [x3, x6, lsl #2]
 318:	eor	w0, w0, w6
 31c:	add	x6, x3, w4, uxtb #2
 320:	lsr	w4, w4, #24
 324:	ldr	w6, [x6, #3072]
 328:	ldr	w4, [x3, x4, lsl #2]
 32c:	eor	w4, w6, w4
 330:	eor	w0, w0, w4
 334:	ldr	w4, [x1, #24]
 338:	eor	w0, w0, w4
 33c:	ubfx	x4, x0, #8, #8
 340:	add	x4, x4, #0x200
 344:	ubfx	x6, x0, #16, #8
 348:	add	x6, x6, #0x100
 34c:	ldr	w4, [x3, x4, lsl #2]
 350:	ldr	w6, [x3, x6, lsl #2]
 354:	eor	w4, w4, w6
 358:	add	x6, x3, w0, uxtb #2
 35c:	lsr	w0, w0, #24
 360:	ldr	w6, [x6, #3072]
 364:	ldr	w0, [x3, x0, lsl #2]
 368:	eor	w0, w6, w0
 36c:	eor	w4, w4, w0
 370:	add	x1, x1, #0x20
 374:	ldur	w0, [x1, #-4]
 378:	eor	w4, w4, w0
 37c:	ubfx	x0, x4, #8, #8
 380:	add	x0, x0, #0x200
 384:	ubfx	x6, x4, #16, #8
 388:	add	x6, x6, #0x100
 38c:	ldr	w0, [x3, x0, lsl #2]
 390:	ldr	w6, [x3, x6, lsl #2]
 394:	eor	w6, w0, w6
 398:	add	x0, x3, w4, uxtb #2
 39c:	lsr	w4, w4, #24
 3a0:	ldr	w0, [x0, #3072]
 3a4:	ldr	w4, [x3, x4, lsl #2]
 3a8:	eor	w0, w0, w4
 3ac:	eor	w0, w0, w6
 3b0:	cmp	x5, x1
 3b4:	b.ne	1cc <crc32_z+0x60>  // b.any
 3b8:	and	x2, x2, #0x1f
 3bc:	cmp	x2, #0x3
 3c0:	b.ls	45c <crc32_z+0x2f0>  // b.plast
 3c4:	sub	x3, x2, #0x4
 3c8:	and	x3, x3, #0xfffffffffffffffc
 3cc:	add	x3, x3, #0x4
 3d0:	add	x3, x1, x3
 3d4:	adrp	x4, 0 <gf2_matrix_times>
 3d8:	add	x4, x4, #0x0
 3dc:	ldr	w5, [x1], #4
 3e0:	eor	w0, w0, w5
 3e4:	ubfx	x6, x0, #8, #8
 3e8:	add	x6, x6, #0x200
 3ec:	ubfx	x5, x0, #16, #8
 3f0:	add	x5, x5, #0x100
 3f4:	ldr	w6, [x4, x6, lsl #2]
 3f8:	ldr	w5, [x4, x5, lsl #2]
 3fc:	eor	w6, w6, w5
 400:	add	x5, x4, w0, uxtb #2
 404:	lsr	w0, w0, #24
 408:	ldr	w5, [x5, #3072]
 40c:	ldr	w0, [x4, x0, lsl #2]
 410:	eor	w0, w5, w0
 414:	eor	w0, w6, w0
 418:	cmp	x1, x3
 41c:	b.ne	3dc <crc32_z+0x270>  // b.any
 420:	and	x2, x2, #0x3
 424:	cbz	x2, 450 <crc32_z+0x2e4>
 428:	add	x2, x3, x2
 42c:	adrp	x4, 0 <gf2_matrix_times>
 430:	add	x4, x4, #0x0
 434:	ldrb	w1, [x3], #1
 438:	eor	w1, w1, w0
 43c:	and	x1, x1, #0xff
 440:	ldr	w1, [x4, x1, lsl #2]
 444:	eor	w0, w1, w0, lsr #8
 448:	cmp	x2, x3
 44c:	b.ne	434 <crc32_z+0x2c8>  // b.any
 450:	mvn	w0, w0
 454:	mov	w0, w0
 458:	ret
 45c:	mov	x3, x1
 460:	b	424 <crc32_z+0x2b8>
 464:	mov	x0, #0x0                   	// #0
 468:	b	458 <crc32_z+0x2ec>
 46c:	mov	x3, x1
 470:	mov	x2, #0x0                   	// #0
 474:	b	424 <crc32_z+0x2b8>

0000000000000478 <crc32>:
 478:	stp	x29, x30, [sp, #-16]!
 47c:	mov	x29, sp
 480:	mov	w2, w2
 484:	bl	16c <crc32_z>
 488:	ldp	x29, x30, [sp], #16
 48c:	ret

0000000000000490 <crc32_combine>:
 490:	stp	x29, x30, [sp, #-16]!
 494:	mov	x29, sp
 498:	bl	7c <crc32_combine_>
 49c:	ldp	x29, x30, [sp], #16
 4a0:	ret

00000000000004a4 <crc32_combine64>:
 4a4:	stp	x29, x30, [sp, #-16]!
 4a8:	mov	x29, sp
 4ac:	bl	7c <crc32_combine_>
 4b0:	ldp	x29, x30, [sp], #16
 4b4:	ret

deflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <slide_hash>:
       0:	ldr	w3, [x0, #80]
       4:	ldr	w1, [x0, #132]
       8:	ldr	x2, [x0, #120]
       c:	add	x2, x2, w1, uxtw #1
      10:	sub	w5, w1, #0x1
      14:	mvn	x5, x5
      18:	add	x5, x2, x5, lsl #1
      1c:	mov	w6, #0x0                   	// #0
      20:	ldrh	w4, [x2, #-2]!
      24:	sub	w1, w4, w3
      28:	and	w1, w1, #0xffff
      2c:	cmp	w3, w4
      30:	csel	w1, w1, w6, ls  // ls = plast
      34:	strh	w1, [x2]
      38:	cmp	x2, x5
      3c:	b.ne	20 <slide_hash+0x20>  // b.any
      40:	ldr	x1, [x0, #112]
      44:	add	x1, x1, w3, uxtw #1
      48:	sub	w4, w3, #0x1
      4c:	mvn	x4, x4
      50:	add	x4, x1, x4, lsl #1
      54:	mov	w5, #0x0                   	// #0
      58:	ldrh	w2, [x1, #-2]!
      5c:	sub	w0, w2, w3
      60:	and	w0, w0, #0xffff
      64:	cmp	w3, w2
      68:	csel	w0, w0, w5, ls  // ls = plast
      6c:	strh	w0, [x1]
      70:	cmp	x1, x4
      74:	b.ne	58 <slide_hash+0x58>  // b.any
      78:	ret

000000000000007c <deflateStateCheck>:
      7c:	mov	x1, x0
      80:	cbz	x0, f4 <deflateStateCheck+0x78>
      84:	ldr	x0, [x0, #64]
      88:	cbz	x0, fc <deflateStateCheck+0x80>
      8c:	ldr	x0, [x1, #72]
      90:	cbz	x0, 104 <deflateStateCheck+0x88>
      94:	ldr	x2, [x1, #56]
      98:	cbz	x2, 10c <deflateStateCheck+0x90>
      9c:	ldr	x3, [x2]
      a0:	mov	w0, #0x1                   	// #1
      a4:	cmp	x3, x1
      a8:	b.eq	b0 <deflateStateCheck+0x34>  // b.none
      ac:	ret
      b0:	ldr	w1, [x2, #8]
      b4:	cmp	w1, #0x2a
      b8:	mov	w0, #0x45                  	// #69
      bc:	ccmp	w1, w0, #0x4, ne  // ne = any
      c0:	cset	w0, ne  // ne = any
      c4:	cmp	w1, #0x5b
      c8:	mov	w2, #0x67                  	// #103
      cc:	ccmp	w1, w2, #0x4, ne  // ne = any
      d0:	csel	w0, w0, wzr, ne  // ne = any
      d4:	cmp	w1, #0x71
      d8:	mov	w2, #0x29a                 	// #666
      dc:	ccmp	w1, w2, #0x4, ne  // ne = any
      e0:	csel	w0, w0, wzr, ne  // ne = any
      e4:	sub	w1, w1, #0x39
      e8:	tst	w1, #0xffffffef
      ec:	csel	w0, w0, wzr, ne  // ne = any
      f0:	b	ac <deflateStateCheck+0x30>
      f4:	mov	w0, #0x1                   	// #1
      f8:	b	ac <deflateStateCheck+0x30>
      fc:	mov	w0, #0x1                   	// #1
     100:	b	ac <deflateStateCheck+0x30>
     104:	mov	w0, #0x1                   	// #1
     108:	b	ac <deflateStateCheck+0x30>
     10c:	mov	w0, #0x1                   	// #1
     110:	b	ac <deflateStateCheck+0x30>

0000000000000114 <putShortMSB>:
     114:	ldr	x3, [x0, #16]
     118:	ldr	x2, [x0, #40]
     11c:	add	x4, x2, #0x1
     120:	str	x4, [x0, #40]
     124:	lsr	w4, w1, #8
     128:	strb	w4, [x3, x2]
     12c:	ldr	x3, [x0, #16]
     130:	ldr	x2, [x0, #40]
     134:	add	x4, x2, #0x1
     138:	str	x4, [x0, #40]
     13c:	strb	w1, [x3, x2]
     140:	ret

0000000000000144 <longest_match>:
     144:	ldr	w6, [x0, #188]
     148:	ldr	x8, [x0, #96]
     14c:	ldr	w3, [x0, #172]
     150:	mov	w14, w3
     154:	add	x13, x8, x14
     158:	ldr	w2, [x0, #184]
     15c:	mov	w7, w2
     160:	ldr	w17, [x0, #208]
     164:	ldr	w4, [x0, #80]
     168:	sub	w5, w4, #0x106
     16c:	add	w9, w3, #0x106
     170:	sub	w9, w9, w4
     174:	cmp	w3, w5
     178:	csel	w9, w9, wzr, hi  // hi = pmore
     17c:	ldr	x12, [x0, #112]
     180:	ldr	w11, [x0, #88]
     184:	add	x14, x14, #0x102
     188:	add	x14, x8, x14
     18c:	add	x3, x13, w2, sxtw
     190:	ldurb	w15, [x3, #-1]
     194:	ldrb	w10, [x13, w2, sxtw]
     198:	ldr	w4, [x0, #204]
     19c:	lsr	w3, w6, #2
     1a0:	cmp	w2, w4
     1a4:	csel	w6, w3, w6, cs  // cs = hs, nlast
     1a8:	ldr	w16, [x0, #180]
     1ac:	cmp	w16, w17
     1b0:	csel	w17, w17, w16, cs  // cs = hs, nlast
     1b4:	mov	w18, #0x102                 	// #258
     1b8:	b	234 <longest_match+0xf0>
     1bc:	add	x3, x3, #0x2
     1c0:	b	1f0 <longest_match+0xac>
     1c4:	add	x3, x3, #0x3
     1c8:	b	1f0 <longest_match+0xac>
     1cc:	add	x3, x3, #0x4
     1d0:	b	1f0 <longest_match+0xac>
     1d4:	add	x3, x3, #0x5
     1d8:	b	1f0 <longest_match+0xac>
     1dc:	add	x3, x3, #0x6
     1e0:	b	1f0 <longest_match+0xac>
     1e4:	add	x3, x3, #0x7
     1e8:	b	1f0 <longest_match+0xac>
     1ec:	add	x3, x3, #0x1
     1f0:	sub	x3, x14, x3
     1f4:	sub	w3, w18, w3
     1f8:	cmp	w7, w3
     1fc:	b.ge	21c <longest_match+0xd8>  // b.tcont
     200:	str	w1, [x0, #176]
     204:	cmp	w17, w3
     208:	b.le	30c <longest_match+0x1c8>
     20c:	add	x2, x13, w3, sxtw
     210:	ldurb	w15, [x2, #-1]
     214:	ldrb	w10, [x13, w3, sxtw]
     218:	mov	w7, w3
     21c:	and	w1, w1, w11
     220:	ldrh	w1, [x12, x1, lsl #1]
     224:	cmp	w9, w1
     228:	b.cs	310 <longest_match+0x1cc>  // b.hs, b.nlast
     22c:	subs	w6, w6, #0x1
     230:	b.eq	310 <longest_match+0x1cc>  // b.none
     234:	mov	w4, w1
     238:	add	x2, x8, x4
     23c:	sxtw	x3, w7
     240:	ldrb	w5, [x2, w7, sxtw]
     244:	cmp	w5, w10
     248:	b.ne	21c <longest_match+0xd8>  // b.any
     24c:	add	x3, x2, x3
     250:	ldurb	w3, [x3, #-1]
     254:	cmp	w3, w15
     258:	b.ne	21c <longest_match+0xd8>  // b.any
     25c:	ldrb	w4, [x8, x4]
     260:	ldrb	w3, [x13]
     264:	cmp	w4, w3
     268:	b.ne	21c <longest_match+0xd8>  // b.any
     26c:	ldrb	w4, [x2, #1]
     270:	ldrb	w3, [x13, #1]
     274:	cmp	w4, w3
     278:	b.ne	21c <longest_match+0xd8>  // b.any
     27c:	add	x3, x13, #0x2
     280:	add	x2, x2, #0x2
     284:	ldrb	w5, [x3, #1]
     288:	ldrb	w4, [x2, #1]
     28c:	cmp	w5, w4
     290:	b.ne	1ec <longest_match+0xa8>  // b.any
     294:	ldrb	w5, [x3, #2]
     298:	ldrb	w4, [x2, #2]
     29c:	cmp	w5, w4
     2a0:	b.ne	1bc <longest_match+0x78>  // b.any
     2a4:	ldrb	w5, [x3, #3]
     2a8:	ldrb	w4, [x2, #3]
     2ac:	cmp	w5, w4
     2b0:	b.ne	1c4 <longest_match+0x80>  // b.any
     2b4:	ldrb	w5, [x3, #4]
     2b8:	ldrb	w4, [x2, #4]
     2bc:	cmp	w5, w4
     2c0:	b.ne	1cc <longest_match+0x88>  // b.any
     2c4:	ldrb	w5, [x3, #5]
     2c8:	ldrb	w4, [x2, #5]
     2cc:	cmp	w5, w4
     2d0:	b.ne	1d4 <longest_match+0x90>  // b.any
     2d4:	ldrb	w5, [x3, #6]
     2d8:	ldrb	w4, [x2, #6]
     2dc:	cmp	w5, w4
     2e0:	b.ne	1dc <longest_match+0x98>  // b.any
     2e4:	ldrb	w5, [x3, #7]
     2e8:	ldrb	w4, [x2, #7]
     2ec:	cmp	w5, w4
     2f0:	b.ne	1e4 <longest_match+0xa0>  // b.any
     2f4:	ldrb	w5, [x3, #8]!
     2f8:	ldrb	w4, [x2, #8]!
     2fc:	cmp	w5, w4
     300:	ccmp	x14, x3, #0x0, eq  // eq = none
     304:	b.hi	284 <longest_match+0x140>  // b.pmore
     308:	b	1f0 <longest_match+0xac>
     30c:	mov	w7, w3
     310:	cmp	w7, w16
     314:	csel	w0, w7, w16, ls  // ls = plast
     318:	ret

000000000000031c <read_buf>:
     31c:	stp	x29, x30, [sp, #-48]!
     320:	mov	x29, sp
     324:	stp	x19, x20, [sp, #16]
     328:	mov	x20, x0
     32c:	ldr	w0, [x0, #8]
     330:	cmp	w0, w2
     334:	csel	w19, w0, w2, ls  // ls = plast
     338:	cbnz	w19, 34c <read_buf+0x30>
     33c:	mov	w0, w19
     340:	ldp	x19, x20, [sp, #16]
     344:	ldp	x29, x30, [sp], #48
     348:	ret
     34c:	stp	x21, x22, [sp, #32]
     350:	mov	x21, x1
     354:	sub	w0, w0, w19
     358:	str	w0, [x20, #8]
     35c:	mov	w22, w19
     360:	mov	x2, x22
     364:	ldr	x1, [x20]
     368:	mov	x0, x21
     36c:	bl	0 <memcpy>
     370:	ldr	x0, [x20, #56]
     374:	ldr	w0, [x0, #48]
     378:	cmp	w0, #0x1
     37c:	b.eq	3a8 <read_buf+0x8c>  // b.none
     380:	cmp	w0, #0x2
     384:	b.eq	3c0 <read_buf+0xa4>  // b.none
     388:	ldr	x0, [x20]
     38c:	add	x0, x0, x22
     390:	str	x0, [x20]
     394:	ldr	x2, [x20, #16]
     398:	add	x2, x2, x22
     39c:	str	x2, [x20, #16]
     3a0:	ldp	x21, x22, [sp, #32]
     3a4:	b	33c <read_buf+0x20>
     3a8:	mov	w2, w19
     3ac:	mov	x1, x21
     3b0:	ldr	x0, [x20, #96]
     3b4:	bl	0 <adler32>
     3b8:	str	x0, [x20, #96]
     3bc:	b	388 <read_buf+0x6c>
     3c0:	mov	w2, w19
     3c4:	mov	x1, x21
     3c8:	ldr	x0, [x20, #96]
     3cc:	bl	0 <crc32>
     3d0:	str	x0, [x20, #96]
     3d4:	b	388 <read_buf+0x6c>

00000000000003d8 <fill_window>:
     3d8:	stp	x29, x30, [sp, #-48]!
     3dc:	mov	x29, sp
     3e0:	stp	x19, x20, [sp, #16]
     3e4:	stp	x21, x22, [sp, #32]
     3e8:	mov	x19, x0
     3ec:	ldr	w20, [x0, #80]
     3f0:	mov	w21, w20
     3f4:	b	498 <fill_window+0xc0>
     3f8:	ldr	x0, [x19, #96]
     3fc:	sub	w1, w1, w3
     400:	add	w2, w1, w2
     404:	add	x1, x0, x21
     408:	bl	0 <memcpy>
     40c:	ldr	w0, [x19, #176]
     410:	sub	w0, w0, w20
     414:	str	w0, [x19, #176]
     418:	ldr	w0, [x19, #172]
     41c:	sub	w0, w0, w20
     420:	str	w0, [x19, #172]
     424:	ldr	x0, [x19, #152]
     428:	sub	x0, x0, x21
     42c:	str	x0, [x19, #152]
     430:	mov	x0, x19
     434:	bl	0 <slide_hash>
     438:	add	w22, w22, w20
     43c:	ldr	x0, [x19]
     440:	ldr	w1, [x0, #8]
     444:	cbz	w1, 574 <fill_window+0x19c>
     448:	ldr	w1, [x19, #172]
     44c:	ldr	w2, [x19, #180]
     450:	add	x1, x1, x2
     454:	ldr	x3, [x19, #96]
     458:	mov	w2, w22
     45c:	add	x1, x3, x1
     460:	bl	31c <read_buf>
     464:	ldr	w1, [x19, #180]
     468:	add	w0, w0, w1
     46c:	str	w0, [x19, #180]
     470:	ldr	w1, [x19, #5932]
     474:	add	w0, w0, w1
     478:	cmp	w0, #0x2
     47c:	b.hi	4c8 <fill_window+0xf0>  // b.pmore
     480:	ldr	w0, [x19, #180]
     484:	cmp	w0, #0x105
     488:	b.hi	574 <fill_window+0x19c>  // b.pmore
     48c:	ldr	x0, [x19]
     490:	ldr	w0, [x0, #8]
     494:	cbz	w0, 574 <fill_window+0x19c>
     498:	ldr	x3, [x19, #104]
     49c:	ldr	w0, [x19, #180]
     4a0:	add	w2, w0, w20
     4a4:	ldr	w1, [x19, #172]
     4a8:	sub	w0, w3, w0
     4ac:	sub	w22, w0, w1
     4b0:	ldr	w0, [x19, #80]
     4b4:	add	w0, w20, w0
     4b8:	sub	w0, w0, #0x106
     4bc:	cmp	w1, w0
     4c0:	b.cc	43c <fill_window+0x64>  // b.lo, b.ul, b.last
     4c4:	b	3f8 <fill_window+0x20>
     4c8:	ldr	w0, [x19, #172]
     4cc:	sub	w1, w0, w1
     4d0:	ldr	x0, [x19, #96]
     4d4:	ldrb	w2, [x0, w1, uxtw]
     4d8:	str	w2, [x19, #128]
     4dc:	add	w3, w1, #0x1
     4e0:	ldrb	w0, [x0, w3, uxtw]
     4e4:	ldr	w3, [x19, #144]
     4e8:	lsl	w2, w2, w3
     4ec:	eor	w0, w0, w2
     4f0:	ldr	w2, [x19, #140]
     4f4:	and	w0, w0, w2
     4f8:	str	w0, [x19, #128]
     4fc:	ldr	w0, [x19, #5932]
     500:	cbz	w0, 480 <fill_window+0xa8>
     504:	add	w2, w1, #0x2
     508:	ldr	x0, [x19, #96]
     50c:	ldrb	w0, [x0, w2, uxtw]
     510:	ldr	w3, [x19, #144]
     514:	ldr	w2, [x19, #128]
     518:	lsl	w2, w2, w3
     51c:	eor	w0, w0, w2
     520:	ldr	w2, [x19, #140]
     524:	and	w0, w0, w2
     528:	str	w0, [x19, #128]
     52c:	ldr	x2, [x19, #120]
     530:	ldrh	w3, [x2, w0, uxtw #1]
     534:	ldr	w0, [x19, #88]
     538:	and	w0, w1, w0
     53c:	ldr	x2, [x19, #112]
     540:	strh	w3, [x2, x0, lsl #1]
     544:	ldr	w2, [x19, #128]
     548:	ldr	x0, [x19, #120]
     54c:	strh	w1, [x0, x2, lsl #1]
     550:	add	w1, w1, #0x1
     554:	ldr	w0, [x19, #5932]
     558:	sub	w0, w0, #0x1
     55c:	str	w0, [x19, #5932]
     560:	ldr	w2, [x19, #180]
     564:	add	w0, w0, w2
     568:	cmp	w0, #0x2
     56c:	b.hi	4fc <fill_window+0x124>  // b.pmore
     570:	b	480 <fill_window+0xa8>
     574:	ldr	x0, [x19, #5944]
     578:	ldr	x1, [x19, #104]
     57c:	cmp	x0, x1
     580:	b.cs	5a4 <fill_window+0x1cc>  // b.hs, b.nlast
     584:	ldr	w20, [x19, #172]
     588:	ldr	w21, [x19, #180]
     58c:	add	x21, x20, x21
     590:	cmp	x0, x21
     594:	b.cc	5b4 <fill_window+0x1dc>  // b.lo, b.ul, b.last
     598:	add	x2, x21, #0x102
     59c:	cmp	x0, x2
     5a0:	b.cc	5e4 <fill_window+0x20c>  // b.lo, b.ul, b.last
     5a4:	ldp	x19, x20, [sp, #16]
     5a8:	ldp	x21, x22, [sp, #32]
     5ac:	ldp	x29, x30, [sp], #48
     5b0:	ret
     5b4:	sub	x1, x1, x21
     5b8:	cmp	x1, #0x102
     5bc:	mov	x20, #0x102                 	// #258
     5c0:	csel	x20, x1, x20, ls  // ls = plast
     5c4:	ldr	x0, [x19, #96]
     5c8:	mov	x2, x20
     5cc:	mov	w1, #0x0                   	// #0
     5d0:	add	x0, x0, x21
     5d4:	bl	0 <memset>
     5d8:	add	x20, x20, x21
     5dc:	str	x20, [x19, #5944]
     5e0:	b	5a4 <fill_window+0x1cc>
     5e4:	sub	x20, x21, x0
     5e8:	add	x20, x20, #0x102
     5ec:	sub	x1, x1, x0
     5f0:	cmp	x1, x20
     5f4:	csel	x20, x1, x20, ls  // ls = plast
     5f8:	ldr	x3, [x19, #96]
     5fc:	mov	w2, w20
     600:	mov	w1, #0x0                   	// #0
     604:	add	x0, x3, x0
     608:	bl	0 <memset>
     60c:	ldr	x0, [x19, #5944]
     610:	add	x20, x0, x20
     614:	str	x20, [x19, #5944]
     618:	b	5a4 <fill_window+0x1cc>

000000000000061c <flush_pending>:
     61c:	stp	x29, x30, [sp, #-48]!
     620:	mov	x29, sp
     624:	stp	x19, x20, [sp, #16]
     628:	stp	x21, x22, [sp, #32]
     62c:	mov	x19, x0
     630:	ldr	x22, [x0, #56]
     634:	mov	x0, x22
     638:	bl	0 <_tr_flush_bits>
     63c:	ldr	x0, [x22, #40]
     640:	ldr	w1, [x19, #32]
     644:	cmp	w1, w0
     648:	csel	w20, w1, w0, ls  // ls = plast
     64c:	cbnz	w20, 660 <flush_pending+0x44>
     650:	ldp	x19, x20, [sp, #16]
     654:	ldp	x21, x22, [sp, #32]
     658:	ldp	x29, x30, [sp], #48
     65c:	ret
     660:	mov	w21, w20
     664:	mov	x2, x21
     668:	ldr	x1, [x22, #32]
     66c:	ldr	x0, [x19, #24]
     670:	bl	0 <memcpy>
     674:	ldr	x0, [x19, #24]
     678:	add	x0, x0, x21
     67c:	str	x0, [x19, #24]
     680:	ldr	x0, [x22, #32]
     684:	add	x0, x0, x21
     688:	str	x0, [x22, #32]
     68c:	ldr	x0, [x19, #40]
     690:	add	x0, x0, x21
     694:	str	x0, [x19, #40]
     698:	ldr	w0, [x19, #32]
     69c:	sub	w0, w0, w20
     6a0:	str	w0, [x19, #32]
     6a4:	ldr	x0, [x22, #40]
     6a8:	sub	x21, x0, x21
     6ac:	str	x21, [x22, #40]
     6b0:	cbnz	x21, 650 <flush_pending+0x34>
     6b4:	ldr	x0, [x22, #16]
     6b8:	str	x0, [x22, #32]
     6bc:	b	650 <flush_pending+0x34>

00000000000006c0 <deflate_slow>:
     6c0:	stp	x29, x30, [sp, #-64]!
     6c4:	mov	x29, sp
     6c8:	stp	x19, x20, [sp, #16]
     6cc:	stp	x21, x22, [sp, #32]
     6d0:	str	x23, [sp, #48]
     6d4:	mov	x19, x0
     6d8:	mov	w21, w1
     6dc:	mov	w20, #0x2                   	// #2
     6e0:	adrp	x23, 0 <_length_code>
     6e4:	add	x23, x23, #0x0
     6e8:	adrp	x22, 0 <_dist_code>
     6ec:	add	x22, x22, #0x0
     6f0:	b	918 <deflate_slow+0x258>
     6f4:	mov	x0, x19
     6f8:	bl	3d8 <fill_window>
     6fc:	ldr	w0, [x19, #180]
     700:	cmp	w0, #0x105
     704:	ccmp	w21, #0x0, #0x0, ls  // ls = plast
     708:	b.eq	b08 <deflate_slow+0x448>  // b.none
     70c:	cbnz	w0, 924 <deflate_slow+0x264>
     710:	ldr	w0, [x19, #168]
     714:	cbz	w0, 75c <deflate_slow+0x9c>
     718:	ldr	w0, [x19, #172]
     71c:	sub	w0, w0, #0x1
     720:	ldr	x1, [x19, #96]
     724:	ldrb	w0, [x1, w0, uxtw]
     728:	ldr	w2, [x19, #5900]
     72c:	ldr	x1, [x19, #5904]
     730:	strh	wzr, [x1, x2, lsl #1]
     734:	ldr	x2, [x19, #5888]
     738:	ldr	w1, [x19, #5900]
     73c:	add	w3, w1, #0x1
     740:	str	w3, [x19, #5900]
     744:	strb	w0, [x2, w1, uxtw]
     748:	add	x0, x19, w0, uxtb #2
     74c:	ldrh	w1, [x0, #212]
     750:	add	w1, w1, #0x1
     754:	strh	w1, [x0, #212]
     758:	str	wzr, [x19, #168]
     75c:	ldr	w3, [x19, #172]
     760:	cmp	w3, #0x2
     764:	mov	w0, #0x2                   	// #2
     768:	csel	w0, w3, w0, ls  // ls = plast
     76c:	str	w0, [x19, #5932]
     770:	cmp	w21, #0x4
     774:	b.eq	ab8 <deflate_slow+0x3f8>  // b.none
     778:	ldr	w1, [x19, #5900]
     77c:	mov	w0, #0x1                   	// #1
     780:	cbz	w1, bbc <deflate_slow+0x4fc>
     784:	ldr	x2, [x19, #152]
     788:	mov	x1, #0x0                   	// #0
     78c:	tbnz	x2, #63, 798 <deflate_slow+0xd8>
     790:	ldr	x1, [x19, #96]
     794:	add	x1, x1, w2, uxtw
     798:	mov	w0, w3
     79c:	mov	w3, #0x0                   	// #0
     7a0:	sub	x2, x0, x2
     7a4:	mov	x0, x19
     7a8:	bl	0 <_tr_flush_block>
     7ac:	ldr	w0, [x19, #172]
     7b0:	str	x0, [x19, #152]
     7b4:	ldr	x0, [x19]
     7b8:	bl	61c <flush_pending>
     7bc:	ldr	x0, [x19]
     7c0:	ldr	w0, [x0, #32]
     7c4:	cmp	w0, #0x0
     7c8:	cset	w0, ne  // ne = any
     7cc:	b	bbc <deflate_slow+0x4fc>
     7d0:	lsr	w1, w1, #7
     7d4:	add	w1, w1, #0x100
     7d8:	ldrb	w0, [x22, w1, sxtw]
     7dc:	b	a7c <deflate_slow+0x3bc>
     7e0:	add	w1, w1, #0x3
     7e4:	ldr	x2, [x19, #96]
     7e8:	ldrb	w2, [x2, w1, uxtw]
     7ec:	ldr	w4, [x19, #144]
     7f0:	ldr	w1, [x19, #128]
     7f4:	lsl	w1, w1, w4
     7f8:	eor	w2, w2, w1
     7fc:	ldr	w1, [x19, #140]
     800:	and	w2, w2, w1
     804:	str	w2, [x19, #128]
     808:	ldr	x1, [x19, #120]
     80c:	ldrh	w2, [x1, w2, uxtw #1]
     810:	ldr	w1, [x19, #88]
     814:	and	w0, w0, w1
     818:	ldr	x1, [x19, #112]
     81c:	strh	w2, [x1, x0, lsl #1]
     820:	ldr	w1, [x19, #128]
     824:	ldr	x0, [x19, #120]
     828:	ldr	w2, [x19, #172]
     82c:	strh	w2, [x0, x1, lsl #1]
     830:	ldr	w0, [x19, #184]
     834:	sub	w0, w0, #0x1
     838:	str	w0, [x19, #184]
     83c:	cbz	w0, 858 <deflate_slow+0x198>
     840:	ldr	w1, [x19, #172]
     844:	add	w0, w1, #0x1
     848:	str	w0, [x19, #172]
     84c:	cmp	w0, w3
     850:	b.hi	830 <deflate_slow+0x170>  // b.pmore
     854:	b	7e0 <deflate_slow+0x120>
     858:	str	wzr, [x19, #168]
     85c:	str	w20, [x19, #160]
     860:	ldr	w0, [x19, #172]
     864:	add	w0, w0, #0x1
     868:	str	w0, [x19, #172]
     86c:	cmp	w6, w5
     870:	b.ne	918 <deflate_slow+0x258>  // b.any
     874:	ldr	x2, [x19, #152]
     878:	mov	x1, #0x0                   	// #0
     87c:	tbnz	x2, #63, 888 <deflate_slow+0x1c8>
     880:	ldr	x1, [x19, #96]
     884:	add	x1, x1, w2, uxtw
     888:	mov	w0, w0
     88c:	mov	w3, #0x0                   	// #0
     890:	sub	x2, x0, x2
     894:	mov	x0, x19
     898:	bl	0 <_tr_flush_block>
     89c:	ldr	w0, [x19, #172]
     8a0:	str	x0, [x19, #152]
     8a4:	ldr	x0, [x19]
     8a8:	bl	61c <flush_pending>
     8ac:	ldr	x0, [x19]
     8b0:	ldr	w0, [x0, #32]
     8b4:	cbnz	w0, 918 <deflate_slow+0x258>
     8b8:	b	bbc <deflate_slow+0x4fc>
     8bc:	ldr	x0, [x19, #152]
     8c0:	mov	x1, #0x0                   	// #0
     8c4:	tbnz	x0, #63, 8d0 <deflate_slow+0x210>
     8c8:	ldr	x1, [x19, #96]
     8cc:	add	x1, x1, w0, uxtw
     8d0:	ldr	w2, [x19, #172]
     8d4:	mov	w3, #0x0                   	// #0
     8d8:	sub	x2, x2, x0
     8dc:	mov	x0, x19
     8e0:	bl	0 <_tr_flush_block>
     8e4:	ldr	w0, [x19, #172]
     8e8:	str	x0, [x19, #152]
     8ec:	ldr	x0, [x19]
     8f0:	bl	61c <flush_pending>
     8f4:	b	b98 <deflate_slow+0x4d8>
     8f8:	mov	w0, #0x1                   	// #1
     8fc:	str	w0, [x19, #168]
     900:	ldr	w0, [x19, #172]
     904:	add	w0, w0, #0x1
     908:	str	w0, [x19, #172]
     90c:	ldr	w0, [x19, #180]
     910:	sub	w0, w0, #0x1
     914:	str	w0, [x19, #180]
     918:	ldr	w0, [x19, #180]
     91c:	cmp	w0, #0x105
     920:	b.ls	6f4 <deflate_slow+0x34>  // b.plast
     924:	ldr	w0, [x19, #180]
     928:	cmp	w0, #0x2
     92c:	b.ls	b10 <deflate_slow+0x450>  // b.plast
     930:	ldr	w2, [x19, #172]
     934:	add	w1, w2, #0x2
     938:	ldr	x0, [x19, #96]
     93c:	ldrb	w0, [x0, w1, uxtw]
     940:	ldr	w3, [x19, #144]
     944:	ldr	w1, [x19, #128]
     948:	lsl	w1, w1, w3
     94c:	eor	w0, w0, w1
     950:	ldr	w1, [x19, #140]
     954:	and	w0, w0, w1
     958:	str	w0, [x19, #128]
     95c:	ldr	x1, [x19, #120]
     960:	ldrh	w1, [x1, w0, uxtw #1]
     964:	ldr	w0, [x19, #88]
     968:	and	w2, w2, w0
     96c:	ldr	x0, [x19, #112]
     970:	strh	w1, [x0, x2, lsl #1]
     974:	ldr	w2, [x19, #128]
     978:	ldr	x0, [x19, #120]
     97c:	ldr	w3, [x19, #172]
     980:	strh	w3, [x0, x2, lsl #1]
     984:	ldr	w0, [x19, #160]
     988:	str	w0, [x19, #184]
     98c:	ldr	w2, [x19, #176]
     990:	str	w2, [x19, #164]
     994:	str	w20, [x19, #160]
     998:	cbz	w1, b24 <deflate_slow+0x464>
     99c:	ldr	w2, [x19, #192]
     9a0:	cmp	w0, w2
     9a4:	b.cs	b24 <deflate_slow+0x464>  // b.hs, b.nlast
     9a8:	ldr	w2, [x19, #172]
     9ac:	sub	w2, w2, w1
     9b0:	ldr	w0, [x19, #80]
     9b4:	sub	w0, w0, #0x106
     9b8:	cmp	w2, w0
     9bc:	b.hi	b24 <deflate_slow+0x464>  // b.pmore
     9c0:	mov	x0, x19
     9c4:	bl	144 <longest_match>
     9c8:	str	w0, [x19, #160]
     9cc:	cmp	w0, #0x5
     9d0:	b.hi	b24 <deflate_slow+0x464>  // b.pmore
     9d4:	ldr	w1, [x19, #200]
     9d8:	cmp	w1, #0x1
     9dc:	b.eq	9fc <deflate_slow+0x33c>  // b.none
     9e0:	cmp	w0, #0x3
     9e4:	b.ne	b24 <deflate_slow+0x464>  // b.any
     9e8:	ldr	w0, [x19, #172]
     9ec:	ldr	w1, [x19, #176]
     9f0:	sub	w0, w0, w1
     9f4:	cmp	w0, #0x1, lsl #12
     9f8:	b.ls	b24 <deflate_slow+0x464>  // b.plast
     9fc:	str	w20, [x19, #160]
     a00:	ldr	w0, [x19, #184]
     a04:	cmp	w0, #0x2
     a08:	b.ls	b3c <deflate_slow+0x47c>  // b.plast
     a0c:	ldr	w1, [x19, #172]
     a10:	ldr	w3, [x19, #180]
     a14:	add	w3, w1, w3
     a18:	sub	w3, w3, #0x3
     a1c:	sub	w0, w0, #0x3
     a20:	and	w0, w0, #0xff
     a24:	ldr	w2, [x19, #164]
     a28:	sub	w1, w1, w2
     a2c:	and	w1, w1, #0xffff
     a30:	ldr	w4, [x19, #5900]
     a34:	ldr	x2, [x19, #5904]
     a38:	sub	w5, w1, #0x1
     a3c:	strh	w5, [x2, x4, lsl #1]
     a40:	ldr	x4, [x19, #5888]
     a44:	ldr	w2, [x19, #5900]
     a48:	add	w5, w2, #0x1
     a4c:	str	w5, [x19, #5900]
     a50:	strb	w0, [x4, w2, uxtw]
     a54:	sub	w1, w1, #0x2
     a58:	and	w1, w1, #0xffff
     a5c:	ldrb	w0, [x23, w0, sxtw]
     a60:	add	x0, x19, x0, lsl #2
     a64:	ldrh	w2, [x0, #1240]
     a68:	add	w2, w2, #0x1
     a6c:	strh	w2, [x0, #1240]
     a70:	cmp	w1, #0xff
     a74:	b.hi	7d0 <deflate_slow+0x110>  // b.pmore
     a78:	ldrb	w0, [x22, w1, sxtw]
     a7c:	add	x0, x19, w0, sxtw #2
     a80:	ldrh	w1, [x0, #2504]
     a84:	add	w1, w1, #0x1
     a88:	strh	w1, [x0, #2504]
     a8c:	ldr	w6, [x19, #5900]
     a90:	ldr	w5, [x19, #5896]
     a94:	sub	w5, w5, #0x1
     a98:	ldr	w1, [x19, #184]
     a9c:	ldr	w0, [x19, #180]
     aa0:	add	w0, w0, #0x1
     aa4:	sub	w0, w0, w1
     aa8:	str	w0, [x19, #180]
     aac:	sub	w1, w1, #0x2
     ab0:	str	w1, [x19, #184]
     ab4:	b	840 <deflate_slow+0x180>
     ab8:	ldr	x2, [x19, #152]
     abc:	mov	x1, #0x0                   	// #0
     ac0:	tbnz	x2, #63, acc <deflate_slow+0x40c>
     ac4:	ldr	x1, [x19, #96]
     ac8:	add	x1, x1, w2, uxtw
     acc:	mov	w0, w3
     ad0:	mov	w3, #0x1                   	// #1
     ad4:	sub	x2, x0, x2
     ad8:	mov	x0, x19
     adc:	bl	0 <_tr_flush_block>
     ae0:	ldr	w0, [x19, #172]
     ae4:	str	x0, [x19, #152]
     ae8:	ldr	x0, [x19]
     aec:	bl	61c <flush_pending>
     af0:	ldr	x0, [x19]
     af4:	ldr	w0, [x0, #32]
     af8:	cmp	w0, #0x0
     afc:	cset	w0, ne  // ne = any
     b00:	add	w0, w0, #0x2
     b04:	b	bbc <deflate_slow+0x4fc>
     b08:	mov	w0, #0x0                   	// #0
     b0c:	b	bbc <deflate_slow+0x4fc>
     b10:	ldr	w0, [x19, #160]
     b14:	str	w0, [x19, #184]
     b18:	ldr	w0, [x19, #176]
     b1c:	str	w0, [x19, #164]
     b20:	str	w20, [x19, #160]
     b24:	ldr	w0, [x19, #184]
     b28:	cmp	w0, #0x2
     b2c:	b.ls	b3c <deflate_slow+0x47c>  // b.plast
     b30:	ldr	w1, [x19, #160]
     b34:	cmp	w0, w1
     b38:	b.cs	a0c <deflate_slow+0x34c>  // b.hs, b.nlast
     b3c:	ldr	w0, [x19, #168]
     b40:	cbz	w0, 8f8 <deflate_slow+0x238>
     b44:	ldr	w0, [x19, #172]
     b48:	sub	w0, w0, #0x1
     b4c:	ldr	x1, [x19, #96]
     b50:	ldrb	w0, [x1, w0, uxtw]
     b54:	ldr	w2, [x19, #5900]
     b58:	ldr	x1, [x19, #5904]
     b5c:	strh	wzr, [x1, x2, lsl #1]
     b60:	ldr	x2, [x19, #5888]
     b64:	ldr	w1, [x19, #5900]
     b68:	add	w3, w1, #0x1
     b6c:	str	w3, [x19, #5900]
     b70:	strb	w0, [x2, w1, uxtw]
     b74:	add	x0, x19, w0, uxtb #2
     b78:	ldrh	w1, [x0, #212]
     b7c:	add	w1, w1, #0x1
     b80:	strh	w1, [x0, #212]
     b84:	ldr	w0, [x19, #5896]
     b88:	sub	w0, w0, #0x1
     b8c:	ldr	w1, [x19, #5900]
     b90:	cmp	w1, w0
     b94:	b.eq	8bc <deflate_slow+0x1fc>  // b.none
     b98:	ldr	w0, [x19, #172]
     b9c:	add	w0, w0, #0x1
     ba0:	str	w0, [x19, #172]
     ba4:	ldr	w0, [x19, #180]
     ba8:	sub	w0, w0, #0x1
     bac:	str	w0, [x19, #180]
     bb0:	ldr	x0, [x19]
     bb4:	ldr	w0, [x0, #32]
     bb8:	cbnz	w0, 918 <deflate_slow+0x258>
     bbc:	ldp	x19, x20, [sp, #16]
     bc0:	ldp	x21, x22, [sp, #32]
     bc4:	ldr	x23, [sp, #48]
     bc8:	ldp	x29, x30, [sp], #64
     bcc:	ret

0000000000000bd0 <deflate_fast>:
     bd0:	stp	x29, x30, [sp, #-48]!
     bd4:	mov	x29, sp
     bd8:	stp	x19, x20, [sp, #16]
     bdc:	stp	x21, x22, [sp, #32]
     be0:	mov	x19, x0
     be4:	mov	w22, w1
     be8:	adrp	x20, 0 <_length_code>
     bec:	add	x20, x20, #0x0
     bf0:	adrp	x21, 0 <_dist_code>
     bf4:	add	x21, x21, #0x0
     bf8:	b	d9c <deflate_fast+0x1cc>
     bfc:	mov	x0, x19
     c00:	bl	3d8 <fill_window>
     c04:	ldr	w0, [x19, #180]
     c08:	cmp	w0, #0x105
     c0c:	ccmp	w22, #0x0, #0x0, ls  // ls = plast
     c10:	b.eq	fac <deflate_fast+0x3dc>  // b.none
     c14:	cbnz	w0, da8 <deflate_fast+0x1d8>
     c18:	ldr	w3, [x19, #172]
     c1c:	cmp	w3, #0x2
     c20:	mov	w0, #0x2                   	// #2
     c24:	csel	w0, w3, w0, ls  // ls = plast
     c28:	str	w0, [x19, #5932]
     c2c:	cmp	w22, #0x4
     c30:	b.eq	f5c <deflate_fast+0x38c>  // b.none
     c34:	ldr	w1, [x19, #5900]
     c38:	mov	w0, #0x1                   	// #1
     c3c:	cbz	w1, fb0 <deflate_fast+0x3e0>
     c40:	ldr	x2, [x19, #152]
     c44:	mov	x1, #0x0                   	// #0
     c48:	tbnz	x2, #63, c54 <deflate_fast+0x84>
     c4c:	ldr	x1, [x19, #96]
     c50:	add	x1, x1, w2, uxtw
     c54:	mov	w0, w3
     c58:	mov	w3, #0x0                   	// #0
     c5c:	sub	x2, x0, x2
     c60:	mov	x0, x19
     c64:	bl	0 <_tr_flush_block>
     c68:	ldr	w0, [x19, #172]
     c6c:	str	x0, [x19, #152]
     c70:	ldr	x0, [x19]
     c74:	bl	61c <flush_pending>
     c78:	ldr	x0, [x19]
     c7c:	ldr	w0, [x0, #32]
     c80:	cmp	w0, #0x0
     c84:	cset	w0, ne  // ne = any
     c88:	b	fb0 <deflate_fast+0x3e0>
     c8c:	mov	x0, x19
     c90:	bl	144 <longest_match>
     c94:	str	w0, [x19, #160]
     c98:	b	e24 <deflate_fast+0x254>
     c9c:	lsr	w0, w0, #7
     ca0:	add	w0, w0, #0x100
     ca4:	ldrb	w0, [x21, w0, sxtw]
     ca8:	b	e90 <deflate_fast+0x2c0>
     cac:	sub	w0, w0, #0x1
     cb0:	str	w0, [x19, #160]
     cb4:	ldr	w0, [x19, #172]
     cb8:	add	w1, w0, #0x1
     cbc:	str	w1, [x19, #172]
     cc0:	add	w0, w0, #0x3
     cc4:	ldr	x2, [x19, #96]
     cc8:	ldrb	w0, [x2, w0, uxtw]
     ccc:	ldr	w4, [x19, #144]
     cd0:	ldr	w2, [x19, #128]
     cd4:	lsl	w2, w2, w4
     cd8:	eor	w0, w0, w2
     cdc:	ldr	w2, [x19, #140]
     ce0:	and	w0, w0, w2
     ce4:	str	w0, [x19, #128]
     ce8:	ldr	x2, [x19, #120]
     cec:	ldrh	w2, [x2, w0, uxtw #1]
     cf0:	ldr	w0, [x19, #88]
     cf4:	and	w1, w1, w0
     cf8:	ldr	x0, [x19, #112]
     cfc:	strh	w2, [x0, x1, lsl #1]
     d00:	ldr	w1, [x19, #128]
     d04:	ldr	x0, [x19, #120]
     d08:	ldr	w2, [x19, #172]
     d0c:	strh	w2, [x0, x1, lsl #1]
     d10:	ldr	w0, [x19, #160]
     d14:	sub	w0, w0, #0x1
     d18:	str	w0, [x19, #160]
     d1c:	cbnz	w0, cb4 <deflate_fast+0xe4>
     d20:	ldr	w0, [x19, #172]
     d24:	add	w0, w0, #0x1
     d28:	str	w0, [x19, #172]
     d2c:	b	d98 <deflate_fast+0x1c8>
     d30:	ldr	w0, [x19, #172]
     d34:	ldr	x1, [x19, #96]
     d38:	ldrb	w0, [x1, x0]
     d3c:	ldr	w2, [x19, #5900]
     d40:	ldr	x1, [x19, #5904]
     d44:	strh	wzr, [x1, x2, lsl #1]
     d48:	ldr	x2, [x19, #5888]
     d4c:	ldr	w1, [x19, #5900]
     d50:	add	w3, w1, #0x1
     d54:	str	w3, [x19, #5900]
     d58:	strb	w0, [x2, w1, uxtw]
     d5c:	add	x0, x19, w0, uxtb #2
     d60:	ldrh	w1, [x0, #212]
     d64:	add	w1, w1, #0x1
     d68:	strh	w1, [x0, #212]
     d6c:	ldr	w0, [x19, #5896]
     d70:	sub	w0, w0, #0x1
     d74:	ldr	w1, [x19, #5900]
     d78:	cmp	w0, w1
     d7c:	cset	w3, eq  // eq = none
     d80:	ldr	w0, [x19, #180]
     d84:	sub	w0, w0, #0x1
     d88:	str	w0, [x19, #180]
     d8c:	ldr	w0, [x19, #172]
     d90:	add	w0, w0, #0x1
     d94:	str	w0, [x19, #172]
     d98:	cbnz	w3, f14 <deflate_fast+0x344>
     d9c:	ldr	w0, [x19, #180]
     da0:	cmp	w0, #0x105
     da4:	b.ls	bfc <deflate_fast+0x2c>  // b.plast
     da8:	ldr	w0, [x19, #180]
     dac:	cmp	w0, #0x2
     db0:	b.ls	e24 <deflate_fast+0x254>  // b.plast
     db4:	ldr	w2, [x19, #172]
     db8:	add	w1, w2, #0x2
     dbc:	ldr	x0, [x19, #96]
     dc0:	ldrb	w0, [x0, w1, uxtw]
     dc4:	ldr	w3, [x19, #144]
     dc8:	ldr	w1, [x19, #128]
     dcc:	lsl	w1, w1, w3
     dd0:	eor	w0, w0, w1
     dd4:	ldr	w1, [x19, #140]
     dd8:	and	w0, w0, w1
     ddc:	str	w0, [x19, #128]
     de0:	ldr	x1, [x19, #120]
     de4:	ldrh	w1, [x1, w0, uxtw #1]
     de8:	ldr	w0, [x19, #88]
     dec:	and	w2, w2, w0
     df0:	ldr	x0, [x19, #112]
     df4:	strh	w1, [x0, x2, lsl #1]
     df8:	ldr	w2, [x19, #128]
     dfc:	ldr	x0, [x19, #120]
     e00:	ldr	w3, [x19, #172]
     e04:	strh	w3, [x0, x2, lsl #1]
     e08:	cbz	w1, e24 <deflate_fast+0x254>
     e0c:	ldr	w2, [x19, #172]
     e10:	sub	w2, w2, w1
     e14:	ldr	w0, [x19, #80]
     e18:	sub	w0, w0, #0x106
     e1c:	cmp	w2, w0
     e20:	b.ls	c8c <deflate_fast+0xbc>  // b.plast
     e24:	ldr	w0, [x19, #160]
     e28:	cmp	w0, #0x2
     e2c:	b.ls	d30 <deflate_fast+0x160>  // b.plast
     e30:	sub	w0, w0, #0x3
     e34:	and	w1, w0, #0xff
     e38:	ldr	w0, [x19, #172]
     e3c:	ldr	w2, [x19, #176]
     e40:	sub	w0, w0, w2
     e44:	and	w0, w0, #0xffff
     e48:	ldr	w3, [x19, #5900]
     e4c:	ldr	x2, [x19, #5904]
     e50:	strh	w0, [x2, x3, lsl #1]
     e54:	ldr	x3, [x19, #5888]
     e58:	ldr	w2, [x19, #5900]
     e5c:	add	w4, w2, #0x1
     e60:	str	w4, [x19, #5900]
     e64:	strb	w1, [x3, w2, uxtw]
     e68:	sub	w0, w0, #0x1
     e6c:	and	w0, w0, #0xffff
     e70:	ldrb	w1, [x20, w1, sxtw]
     e74:	add	x1, x19, x1, lsl #2
     e78:	ldrh	w2, [x1, #1240]
     e7c:	add	w2, w2, #0x1
     e80:	strh	w2, [x1, #1240]
     e84:	cmp	w0, #0xff
     e88:	b.hi	c9c <deflate_fast+0xcc>  // b.pmore
     e8c:	ldrb	w0, [x21, w0, sxtw]
     e90:	add	x0, x19, w0, sxtw #2
     e94:	ldrh	w1, [x0, #2504]
     e98:	add	w1, w1, #0x1
     e9c:	strh	w1, [x0, #2504]
     ea0:	ldr	w0, [x19, #5896]
     ea4:	sub	w0, w0, #0x1
     ea8:	ldr	w1, [x19, #5900]
     eac:	cmp	w0, w1
     eb0:	cset	w3, eq  // eq = none
     eb4:	ldr	w0, [x19, #160]
     eb8:	ldr	w1, [x19, #180]
     ebc:	sub	w1, w1, w0
     ec0:	str	w1, [x19, #180]
     ec4:	ldr	w2, [x19, #192]
     ec8:	cmp	w0, w2
     ecc:	ccmp	w1, #0x2, #0x0, ls  // ls = plast
     ed0:	b.hi	cac <deflate_fast+0xdc>  // b.pmore
     ed4:	ldr	w1, [x19, #172]
     ed8:	add	w0, w0, w1
     edc:	str	w0, [x19, #172]
     ee0:	str	wzr, [x19, #160]
     ee4:	ldr	x2, [x19, #96]
     ee8:	ldrb	w1, [x2, w0, uxtw]
     eec:	str	w1, [x19, #128]
     ef0:	add	w0, w0, #0x1
     ef4:	ldrb	w0, [x2, w0, uxtw]
     ef8:	ldr	w2, [x19, #144]
     efc:	lsl	w1, w1, w2
     f00:	eor	w0, w0, w1
     f04:	ldr	w1, [x19, #140]
     f08:	and	w0, w0, w1
     f0c:	str	w0, [x19, #128]
     f10:	b	d98 <deflate_fast+0x1c8>
     f14:	ldr	x0, [x19, #152]
     f18:	mov	x1, #0x0                   	// #0
     f1c:	tbnz	x0, #63, f28 <deflate_fast+0x358>
     f20:	ldr	x1, [x19, #96]
     f24:	add	x1, x1, w0, uxtw
     f28:	ldr	w2, [x19, #172]
     f2c:	mov	w3, #0x0                   	// #0
     f30:	sub	x2, x2, x0
     f34:	mov	x0, x19
     f38:	bl	0 <_tr_flush_block>
     f3c:	ldr	w0, [x19, #172]
     f40:	str	x0, [x19, #152]
     f44:	ldr	x0, [x19]
     f48:	bl	61c <flush_pending>
     f4c:	ldr	x0, [x19]
     f50:	ldr	w0, [x0, #32]
     f54:	cbnz	w0, d9c <deflate_fast+0x1cc>
     f58:	b	fb0 <deflate_fast+0x3e0>
     f5c:	ldr	x2, [x19, #152]
     f60:	mov	x1, #0x0                   	// #0
     f64:	tbnz	x2, #63, f70 <deflate_fast+0x3a0>
     f68:	ldr	x1, [x19, #96]
     f6c:	add	x1, x1, w2, uxtw
     f70:	mov	w0, w3
     f74:	mov	w3, #0x1                   	// #1
     f78:	sub	x2, x0, x2
     f7c:	mov	x0, x19
     f80:	bl	0 <_tr_flush_block>
     f84:	ldr	w0, [x19, #172]
     f88:	str	x0, [x19, #152]
     f8c:	ldr	x0, [x19]
     f90:	bl	61c <flush_pending>
     f94:	ldr	x0, [x19]
     f98:	ldr	w0, [x0, #32]
     f9c:	cmp	w0, #0x0
     fa0:	cset	w0, ne  // ne = any
     fa4:	add	w0, w0, #0x2
     fa8:	b	fb0 <deflate_fast+0x3e0>
     fac:	mov	w0, #0x0                   	// #0
     fb0:	ldp	x19, x20, [sp, #16]
     fb4:	ldp	x21, x22, [sp, #32]
     fb8:	ldp	x29, x30, [sp], #48
     fbc:	ret

0000000000000fc0 <deflate_stored>:
     fc0:	stp	x29, x30, [sp, #-96]!
     fc4:	mov	x29, sp
     fc8:	stp	x19, x20, [sp, #16]
     fcc:	stp	x21, x22, [sp, #32]
     fd0:	stp	x23, x24, [sp, #48]
     fd4:	stp	x25, x26, [sp, #64]
     fd8:	stp	x27, x28, [sp, #80]
     fdc:	mov	x19, x0
     fe0:	mov	w23, w1
     fe4:	ldr	x24, [x0, #24]
     fe8:	sub	x24, x24, #0x5
     fec:	ldr	w0, [x0, #80]
     ff0:	cmp	x24, x0
     ff4:	csel	x24, x24, x0, ls  // ls = plast
     ff8:	ldr	x0, [x19]
     ffc:	ldr	w28, [x0, #8]
    1000:	mov	x26, #0xfffe                	// #65534
    1004:	mov	w25, #0xffff                	// #65535
    1008:	b	1094 <deflate_stored+0xd4>
    100c:	mov	w22, #0x0                   	// #0
    1010:	cmp	w23, #0x4
    1014:	b.eq	110c <deflate_stored+0x14c>  // b.none
    1018:	mov	w3, w22
    101c:	mov	x2, #0x0                   	// #0
    1020:	mov	x1, #0x0                   	// #0
    1024:	mov	x0, x19
    1028:	bl	0 <_tr_stored_block>
    102c:	and	w0, w20, #0xff
    1030:	ldr	x1, [x19, #16]
    1034:	ldr	x2, [x19, #40]
    1038:	add	x1, x1, x2
    103c:	sturb	w0, [x1, #-4]
    1040:	ldr	x1, [x19, #16]
    1044:	ldr	x2, [x19, #40]
    1048:	add	x1, x1, x2
    104c:	lsr	w2, w20, #8
    1050:	sturb	w2, [x1, #-3]
    1054:	ldr	x1, [x19, #16]
    1058:	ldr	x2, [x19, #40]
    105c:	add	x1, x1, x2
    1060:	mvn	w0, w0
    1064:	sturb	w0, [x1, #-2]
    1068:	ldr	x0, [x19, #16]
    106c:	ldr	x1, [x19, #40]
    1070:	add	x0, x0, x1
    1074:	mvn	w1, w20
    1078:	lsr	w1, w1, #8
    107c:	sturb	w1, [x0, #-1]
    1080:	ldr	x0, [x19]
    1084:	bl	61c <flush_pending>
    1088:	cbnz	w21, 111c <deflate_stored+0x15c>
    108c:	cbnz	w20, 1188 <deflate_stored+0x1c8>
    1090:	cbnz	w22, 11d0 <deflate_stored+0x210>
    1094:	ldr	w0, [x19, #5940]
    1098:	add	w0, w0, #0x2a
    109c:	asr	w2, w0, #3
    10a0:	ldr	x1, [x19]
    10a4:	ldr	w20, [x1, #32]
    10a8:	cmp	w20, w0, asr #3
    10ac:	b.cc	11d8 <deflate_stored+0x218>  // b.lo, b.ul, b.last
    10b0:	sub	w20, w20, w2
    10b4:	ldr	x2, [x19, #152]
    10b8:	ldr	w0, [x19, #172]
    10bc:	sub	w21, w0, w2
    10c0:	ldr	w1, [x1, #8]
    10c4:	sub	w0, w0, w2
    10c8:	add	x0, x0, w1, uxtw
    10cc:	add	w2, w1, w21
    10d0:	cmp	x0, x26
    10d4:	csel	w0, w2, w25, ls  // ls = plast
    10d8:	cmp	w0, w20
    10dc:	csel	w20, w0, w20, ls  // ls = plast
    10e0:	cmp	w20, w24
    10e4:	b.cs	100c <deflate_stored+0x4c>  // b.hs, b.nlast
    10e8:	cmp	w20, #0x0
    10ec:	ccmp	w23, #0x4, #0x4, eq  // eq = none
    10f0:	ccmp	w23, #0x0, #0x4, eq  // eq = none
    10f4:	b.eq	12a4 <deflate_stored+0x2e4>  // b.none
    10f8:	cmp	w20, w2
    10fc:	b.ne	12ac <deflate_stored+0x2ec>  // b.any
    1100:	cmp	w23, #0x4
    1104:	cset	w22, eq  // eq = none
    1108:	b	1018 <deflate_stored+0x58>
    110c:	add	w1, w1, w21
    1110:	cmp	w1, w20
    1114:	cset	w22, eq  // eq = none
    1118:	b	1018 <deflate_stored+0x58>
    111c:	cmp	w20, w21
    1120:	csel	w27, w20, w21, ls  // ls = plast
    1124:	csel	w21, w20, w21, ls  // ls = plast
    1128:	ldr	x0, [x19]
    112c:	ldr	x3, [x19, #96]
    1130:	ldr	x1, [x19, #152]
    1134:	mov	x2, x21
    1138:	add	x1, x3, x1
    113c:	ldr	x0, [x0, #24]
    1140:	bl	0 <memcpy>
    1144:	ldr	x1, [x19]
    1148:	ldr	x0, [x1, #24]
    114c:	add	x0, x0, x21
    1150:	str	x0, [x1, #24]
    1154:	ldr	x1, [x19]
    1158:	ldr	w0, [x1, #32]
    115c:	sub	w0, w0, w27
    1160:	str	w0, [x1, #32]
    1164:	ldr	x1, [x19]
    1168:	ldr	x0, [x1, #40]
    116c:	add	x0, x0, x21
    1170:	str	x0, [x1, #40]
    1174:	ldr	x0, [x19, #152]
    1178:	add	x21, x0, x21
    117c:	str	x21, [x19, #152]
    1180:	sub	w20, w20, w27
    1184:	b	108c <deflate_stored+0xcc>
    1188:	ldr	x0, [x19]
    118c:	mov	w2, w20
    1190:	ldr	x1, [x0, #24]
    1194:	bl	31c <read_buf>
    1198:	ldr	x0, [x19]
    119c:	mov	w2, w20
    11a0:	ldr	x1, [x0, #24]
    11a4:	add	x1, x1, x2
    11a8:	str	x1, [x0, #24]
    11ac:	ldr	x0, [x19]
    11b0:	ldr	w1, [x0, #32]
    11b4:	sub	w20, w1, w20
    11b8:	str	w20, [x0, #32]
    11bc:	ldr	x1, [x19]
    11c0:	ldr	x0, [x1, #40]
    11c4:	add	x0, x0, x2
    11c8:	str	x0, [x1, #40]
    11cc:	b	1090 <deflate_stored+0xd0>
    11d0:	mov	w21, #0x1                   	// #1
    11d4:	b	11dc <deflate_stored+0x21c>
    11d8:	mov	w21, #0x0                   	// #0
    11dc:	ldr	x3, [x19]
    11e0:	ldr	w0, [x3, #8]
    11e4:	subs	w28, w28, w0
    11e8:	b.eq	1260 <deflate_stored+0x2a0>  // b.none
    11ec:	ldr	w1, [x19, #80]
    11f0:	cmp	w1, w28
    11f4:	b.ls	12b4 <deflate_stored+0x2f4>  // b.plast
    11f8:	ldr	w2, [x19, #172]
    11fc:	mov	w20, w28
    1200:	ldr	x0, [x19, #104]
    1204:	sub	x0, x0, w2, uxtw
    1208:	cmp	x0, w28, uxtw
    120c:	b.ls	12dc <deflate_stored+0x31c>  // b.plast
    1210:	ldr	w0, [x19, #172]
    1214:	ldr	x3, [x19, #96]
    1218:	ldr	x1, [x19]
    121c:	ldr	x1, [x1]
    1220:	mov	x2, x20
    1224:	sub	x1, x1, x20
    1228:	add	x0, x3, x0
    122c:	bl	0 <memcpy>
    1230:	ldr	w0, [x19, #172]
    1234:	add	w0, w0, w28
    1238:	str	w0, [x19, #172]
    123c:	ldr	w0, [x19, #172]
    1240:	str	x0, [x19, #152]
    1244:	ldr	w1, [x19, #5932]
    1248:	ldr	w0, [x19, #80]
    124c:	sub	w0, w0, w1
    1250:	cmp	w0, w28
    1254:	csel	w28, w0, w28, ls  // ls = plast
    1258:	add	w28, w28, w1
    125c:	str	w28, [x19, #5932]
    1260:	ldr	w0, [x19, #172]
    1264:	mov	w2, w0
    1268:	ldr	x1, [x19, #5944]
    126c:	cmp	x1, w0, uxtw
    1270:	b.cs	1278 <deflate_stored+0x2b8>  // b.hs, b.nlast
    1274:	str	x2, [x19, #5944]
    1278:	cbnz	w21, 14f4 <deflate_stored+0x534>
    127c:	tst	w23, #0xfffffffb
    1280:	b.eq	130c <deflate_stored+0x34c>  // b.none
    1284:	ldr	x1, [x19]
    1288:	ldr	w1, [x1, #8]
    128c:	cbnz	w1, 130c <deflate_stored+0x34c>
    1290:	ldr	x1, [x19, #152]
    1294:	cmp	x1, w0, uxtw
    1298:	b.ne	1350 <deflate_stored+0x390>  // b.any
    129c:	mov	w21, #0x1                   	// #1
    12a0:	b	1488 <deflate_stored+0x4c8>
    12a4:	mov	w21, #0x0                   	// #0
    12a8:	b	11dc <deflate_stored+0x21c>
    12ac:	mov	w21, #0x0                   	// #0
    12b0:	b	11dc <deflate_stored+0x21c>
    12b4:	mov	w0, #0x2                   	// #2
    12b8:	str	w0, [x19, #5928]
    12bc:	mov	w2, w1
    12c0:	ldr	x1, [x3]
    12c4:	sub	x1, x1, x2
    12c8:	ldr	x0, [x19, #96]
    12cc:	bl	0 <memcpy>
    12d0:	ldr	w0, [x19, #80]
    12d4:	str	w0, [x19, #172]
    12d8:	b	123c <deflate_stored+0x27c>
    12dc:	sub	w2, w2, w1
    12e0:	str	w2, [x19, #172]
    12e4:	ldr	x0, [x19, #96]
    12e8:	mov	w2, w2
    12ec:	add	x1, x0, w1, uxtw
    12f0:	bl	0 <memcpy>
    12f4:	ldr	w0, [x19, #5928]
    12f8:	cmp	w0, #0x1
    12fc:	b.hi	1210 <deflate_stored+0x250>  // b.pmore
    1300:	add	w0, w0, #0x1
    1304:	str	w0, [x19, #5928]
    1308:	b	1210 <deflate_stored+0x250>
    130c:	ldr	x20, [x19, #104]
    1310:	sub	w20, w20, w0
    1314:	sub	w20, w20, #0x1
    1318:	ldr	x1, [x19]
    131c:	ldr	w1, [x1, #8]
    1320:	cmp	w1, w20
    1324:	b.ls	133c <deflate_stored+0x37c>  // b.plast
    1328:	ldr	x2, [x19, #152]
    132c:	ldr	w1, [x19, #80]
    1330:	mov	w3, w1
    1334:	cmp	x2, w1, uxtw
    1338:	b.ge	13e0 <deflate_stored+0x420>  // b.tcont
    133c:	ldr	x0, [x19]
    1340:	ldr	w1, [x0, #8]
    1344:	cmp	w1, w20
    1348:	csel	w20, w1, w20, ls  // ls = plast
    134c:	cbnz	w20, 1424 <deflate_stored+0x464>
    1350:	ldr	w2, [x19, #172]
    1354:	mov	w1, w2
    1358:	ldr	x0, [x19, #5944]
    135c:	cmp	x0, w2, uxtw
    1360:	b.cs	1368 <deflate_stored+0x3a8>  // b.hs, b.nlast
    1364:	str	x1, [x19, #5944]
    1368:	ldr	w0, [x19, #5940]
    136c:	add	w0, w0, #0x2a
    1370:	asr	w1, w0, #3
    1374:	ldr	x0, [x19, #24]
    1378:	sub	x0, x0, x1
    137c:	mov	x1, #0xffff                	// #65535
    1380:	cmp	x0, x1
    1384:	csel	x0, x0, x1, ls  // ls = plast
    1388:	mov	w4, w0
    138c:	ldr	x1, [x19, #152]
    1390:	sub	w2, w2, w1
    1394:	ldr	w3, [x19, #80]
    1398:	cmp	w3, w0
    139c:	csel	w3, w3, w0, ls  // ls = plast
    13a0:	cmp	w3, w2
    13a4:	b.ls	1448 <deflate_stored+0x488>  // b.plast
    13a8:	cmp	w2, #0x0
    13ac:	ccmp	w23, #0x4, #0x4, eq  // eq = none
    13b0:	ccmp	w23, #0x0, #0x4, eq  // eq = none
    13b4:	b.eq	1488 <deflate_stored+0x4c8>  // b.none
    13b8:	ldr	x0, [x19]
    13bc:	ldr	w0, [x0, #8]
    13c0:	cmp	w0, #0x0
    13c4:	ccmp	w4, w2, #0x0, eq  // eq = none
    13c8:	b.cc	1488 <deflate_stored+0x4c8>  // b.lo, b.ul, b.last
    13cc:	cmp	w4, w2
    13d0:	csel	w0, w4, w2, ls  // ls = plast
    13d4:	cmp	w23, #0x4
    13d8:	b.ne	1458 <deflate_stored+0x498>  // b.any
    13dc:	b	14bc <deflate_stored+0x4fc>
    13e0:	sub	x2, x2, x3
    13e4:	str	x2, [x19, #152]
    13e8:	sub	w2, w0, w1
    13ec:	str	w2, [x19, #172]
    13f0:	ldr	x0, [x19, #96]
    13f4:	mov	w2, w2
    13f8:	add	x1, x0, w1, uxtw
    13fc:	bl	0 <memcpy>
    1400:	ldr	w0, [x19, #5928]
    1404:	cmp	w0, #0x1
    1408:	b.ls	1418 <deflate_stored+0x458>  // b.plast
    140c:	ldr	w0, [x19, #80]
    1410:	add	w20, w20, w0
    1414:	b	133c <deflate_stored+0x37c>
    1418:	add	w0, w0, #0x1
    141c:	str	w0, [x19, #5928]
    1420:	b	140c <deflate_stored+0x44c>
    1424:	ldr	w1, [x19, #172]
    1428:	ldr	x3, [x19, #96]
    142c:	mov	w2, w20
    1430:	add	x1, x3, x1
    1434:	bl	31c <read_buf>
    1438:	ldr	w0, [x19, #172]
    143c:	add	w20, w0, w20
    1440:	str	w20, [x19, #172]
    1444:	b	1350 <deflate_stored+0x390>
    1448:	cmp	w0, w2
    144c:	csel	w0, w0, w2, ls  // ls = plast
    1450:	cmp	w23, #0x4
    1454:	b.eq	14a8 <deflate_stored+0x4e8>  // b.none
    1458:	mov	w20, w0
    145c:	ldr	x0, [x19, #96]
    1460:	mov	w3, #0x0                   	// #0
    1464:	mov	x2, x20
    1468:	add	x1, x0, x1
    146c:	mov	x0, x19
    1470:	bl	0 <_tr_stored_block>
    1474:	ldr	x0, [x19, #152]
    1478:	add	x20, x0, x20
    147c:	str	x20, [x19, #152]
    1480:	ldr	x0, [x19]
    1484:	bl	61c <flush_pending>
    1488:	mov	w0, w21
    148c:	ldp	x19, x20, [sp, #16]
    1490:	ldp	x21, x22, [sp, #32]
    1494:	ldp	x23, x24, [sp, #48]
    1498:	ldp	x25, x26, [sp, #64]
    149c:	ldp	x27, x28, [sp, #80]
    14a0:	ldp	x29, x30, [sp], #96
    14a4:	ret
    14a8:	ldr	x3, [x19]
    14ac:	ldr	w3, [x3, #8]
    14b0:	cmp	w3, #0x0
    14b4:	ccmp	w4, w2, #0x0, eq  // eq = none
    14b8:	b.cc	1458 <deflate_stored+0x498>  // b.lo, b.ul, b.last
    14bc:	mov	w20, w0
    14c0:	ldr	x0, [x19, #96]
    14c4:	mov	w3, #0x1                   	// #1
    14c8:	mov	x2, x20
    14cc:	add	x1, x0, x1
    14d0:	mov	x0, x19
    14d4:	bl	0 <_tr_stored_block>
    14d8:	ldr	x0, [x19, #152]
    14dc:	add	x0, x0, x20
    14e0:	str	x0, [x19, #152]
    14e4:	ldr	x0, [x19]
    14e8:	bl	61c <flush_pending>
    14ec:	mov	w21, #0x2                   	// #2
    14f0:	b	1488 <deflate_stored+0x4c8>
    14f4:	mov	w21, #0x3                   	// #3
    14f8:	b	1488 <deflate_stored+0x4c8>

00000000000014fc <deflateSetDictionary>:
    14fc:	stp	x29, x30, [sp, #-80]!
    1500:	mov	x29, sp
    1504:	stp	x19, x20, [sp, #16]
    1508:	stp	x21, x22, [sp, #32]
    150c:	str	x25, [sp, #64]
    1510:	mov	x20, x0
    1514:	mov	x25, x1
    1518:	mov	w21, w2
    151c:	bl	7c <deflateStateCheck>
    1520:	cmp	x25, #0x0
    1524:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    1528:	b.ne	16ec <deflateSetDictionary+0x1f0>  // b.any
    152c:	ldr	x19, [x20, #56]
    1530:	ldr	w22, [x19, #48]
    1534:	cmp	w22, #0x2
    1538:	b.eq	16f4 <deflateSetDictionary+0x1f8>  // b.none
    153c:	cmp	w22, #0x1
    1540:	b.eq	1670 <deflateSetDictionary+0x174>  // b.none
    1544:	ldr	w0, [x19, #180]
    1548:	cbnz	w0, 1704 <deflateSetDictionary+0x208>
    154c:	stp	x23, x24, [sp, #48]
    1550:	str	wzr, [x19, #48]
    1554:	ldr	w0, [x19, #80]
    1558:	cmp	w0, w21
    155c:	b.hi	1574 <deflateSetDictionary+0x78>  // b.pmore
    1560:	cbz	w22, 16b4 <deflateSetDictionary+0x1b8>
    1564:	ldr	w0, [x19, #80]
    1568:	sub	w21, w21, w0
    156c:	add	x25, x25, x21
    1570:	mov	w21, w0
    1574:	ldr	w23, [x20, #8]
    1578:	ldr	x24, [x20]
    157c:	str	w21, [x20, #8]
    1580:	str	x25, [x20]
    1584:	mov	x0, x19
    1588:	bl	3d8 <fill_window>
    158c:	ldr	w0, [x19, #180]
    1590:	cmp	w0, #0x2
    1594:	b.ls	161c <deflateSetDictionary+0x120>  // b.plast
    1598:	mov	w21, #0x2                   	// #2
    159c:	ldr	w2, [x19, #172]
    15a0:	sub	w4, w2, #0x2
    15a4:	add	w4, w4, w0
    15a8:	add	w1, w2, #0x2
    15ac:	ldr	x0, [x19, #96]
    15b0:	ldrb	w1, [x0, w1, uxtw]
    15b4:	ldr	w3, [x19, #144]
    15b8:	ldr	w0, [x19, #128]
    15bc:	lsl	w0, w0, w3
    15c0:	eor	w1, w1, w0
    15c4:	ldr	w0, [x19, #140]
    15c8:	and	w1, w1, w0
    15cc:	str	w1, [x19, #128]
    15d0:	ldr	x0, [x19, #120]
    15d4:	ldrh	w3, [x0, w1, uxtw #1]
    15d8:	ldr	w0, [x19, #88]
    15dc:	and	w0, w2, w0
    15e0:	ldr	x1, [x19, #112]
    15e4:	strh	w3, [x1, x0, lsl #1]
    15e8:	ldr	w1, [x19, #128]
    15ec:	ldr	x0, [x19, #120]
    15f0:	strh	w2, [x0, x1, lsl #1]
    15f4:	add	w2, w2, #0x1
    15f8:	cmp	w2, w4
    15fc:	b.ne	15a8 <deflateSetDictionary+0xac>  // b.any
    1600:	str	w4, [x19, #172]
    1604:	str	w21, [x19, #180]
    1608:	mov	x0, x19
    160c:	bl	3d8 <fill_window>
    1610:	ldr	w0, [x19, #180]
    1614:	cmp	w0, #0x2
    1618:	b.hi	159c <deflateSetDictionary+0xa0>  // b.pmore
    161c:	ldr	w1, [x19, #172]
    1620:	add	w1, w0, w1
    1624:	str	w1, [x19, #172]
    1628:	mov	w1, w1
    162c:	str	x1, [x19, #152]
    1630:	str	w0, [x19, #5932]
    1634:	str	wzr, [x19, #180]
    1638:	mov	w0, #0x2                   	// #2
    163c:	str	w0, [x19, #184]
    1640:	str	w0, [x19, #160]
    1644:	str	wzr, [x19, #168]
    1648:	str	x24, [x20]
    164c:	str	w23, [x20, #8]
    1650:	str	w22, [x19, #48]
    1654:	mov	w0, #0x0                   	// #0
    1658:	ldp	x23, x24, [sp, #48]
    165c:	ldp	x19, x20, [sp, #16]
    1660:	ldp	x21, x22, [sp, #32]
    1664:	ldr	x25, [sp, #64]
    1668:	ldp	x29, x30, [sp], #80
    166c:	ret
    1670:	ldr	w0, [x19, #8]
    1674:	cmp	w0, #0x2a
    1678:	b.ne	16fc <deflateSetDictionary+0x200>  // b.any
    167c:	ldr	w1, [x19, #180]
    1680:	mov	w0, #0xfffffffe            	// #-2
    1684:	cbnz	w1, 165c <deflateSetDictionary+0x160>
    1688:	stp	x23, x24, [sp, #48]
    168c:	mov	w2, w21
    1690:	mov	x1, x25
    1694:	ldr	x0, [x20, #96]
    1698:	bl	0 <adler32>
    169c:	str	x0, [x20, #96]
    16a0:	str	wzr, [x19, #48]
    16a4:	ldr	w0, [x19, #80]
    16a8:	cmp	w21, w0
    16ac:	b.cs	1564 <deflateSetDictionary+0x68>  // b.hs, b.nlast
    16b0:	b	1574 <deflateSetDictionary+0x78>
    16b4:	ldr	w0, [x19, #132]
    16b8:	sub	w0, w0, #0x1
    16bc:	ldr	x1, [x19, #120]
    16c0:	strh	wzr, [x1, x0, lsl #1]
    16c4:	ldr	w2, [x19, #132]
    16c8:	sub	w2, w2, #0x1
    16cc:	lsl	x2, x2, #1
    16d0:	mov	w1, #0x0                   	// #0
    16d4:	ldr	x0, [x19, #120]
    16d8:	bl	0 <memset>
    16dc:	str	wzr, [x19, #172]
    16e0:	str	xzr, [x19, #152]
    16e4:	str	wzr, [x19, #5932]
    16e8:	b	1564 <deflateSetDictionary+0x68>
    16ec:	mov	w0, #0xfffffffe            	// #-2
    16f0:	b	165c <deflateSetDictionary+0x160>
    16f4:	mov	w0, #0xfffffffe            	// #-2
    16f8:	b	165c <deflateSetDictionary+0x160>
    16fc:	mov	w0, #0xfffffffe            	// #-2
    1700:	b	165c <deflateSetDictionary+0x160>
    1704:	mov	w0, #0xfffffffe            	// #-2
    1708:	b	165c <deflateSetDictionary+0x160>

000000000000170c <deflateGetDictionary>:
    170c:	stp	x29, x30, [sp, #-48]!
    1710:	mov	x29, sp
    1714:	stp	x19, x20, [sp, #16]
    1718:	stp	x21, x22, [sp, #32]
    171c:	mov	x19, x0
    1720:	mov	x22, x1
    1724:	mov	x21, x2
    1728:	bl	7c <deflateStateCheck>
    172c:	cbnz	w0, 179c <deflateGetDictionary+0x90>
    1730:	mov	w20, w0
    1734:	ldr	x0, [x19, #56]
    1738:	ldr	w1, [x0, #172]
    173c:	ldr	w3, [x0, #180]
    1740:	add	w2, w1, w3
    1744:	ldr	w19, [x0, #80]
    1748:	cmp	w19, w2
    174c:	csel	w19, w19, w2, ls  // ls = plast
    1750:	cmp	x22, #0x0
    1754:	ccmp	w19, #0x0, #0x4, ne  // ne = any
    1758:	b.ne	1778 <deflateGetDictionary+0x6c>  // b.any
    175c:	cbz	x21, 1764 <deflateGetDictionary+0x58>
    1760:	str	w19, [x21]
    1764:	mov	w0, w20
    1768:	ldp	x19, x20, [sp, #16]
    176c:	ldp	x21, x22, [sp, #32]
    1770:	ldp	x29, x30, [sp], #48
    1774:	ret
    1778:	mov	w2, w19
    177c:	mov	w3, w3
    1780:	add	x1, x3, w1, uxtw
    1784:	sub	x1, x1, x2
    1788:	ldr	x0, [x0, #96]
    178c:	add	x1, x0, x1
    1790:	mov	x0, x22
    1794:	bl	0 <memcpy>
    1798:	b	175c <deflateGetDictionary+0x50>
    179c:	mov	w20, #0xfffffffe            	// #-2
    17a0:	b	1764 <deflateGetDictionary+0x58>

00000000000017a4 <deflateResetKeep>:
    17a4:	stp	x29, x30, [sp, #-48]!
    17a8:	mov	x29, sp
    17ac:	stp	x19, x20, [sp, #16]
    17b0:	str	x21, [sp, #32]
    17b4:	mov	x19, x0
    17b8:	bl	7c <deflateStateCheck>
    17bc:	cbnz	w0, 1874 <deflateResetKeep+0xd0>
    17c0:	mov	w21, w0
    17c4:	str	xzr, [x19, #40]
    17c8:	str	xzr, [x19, #16]
    17cc:	str	xzr, [x19, #48]
    17d0:	mov	w0, #0x2                   	// #2
    17d4:	str	w0, [x19, #88]
    17d8:	ldr	x20, [x19, #56]
    17dc:	str	xzr, [x20, #40]
    17e0:	ldr	x0, [x20, #16]
    17e4:	str	x0, [x20, #32]
    17e8:	ldr	w0, [x20, #48]
    17ec:	tbnz	w0, #31, 1844 <deflateResetKeep+0xa0>
    17f0:	ldr	w0, [x20, #48]
    17f4:	cmp	w0, #0x2
    17f8:	b.eq	1858 <deflateResetKeep+0xb4>  // b.none
    17fc:	cmp	w0, #0x0
    1800:	mov	w1, #0x2a                  	// #42
    1804:	mov	w0, #0x71                  	// #113
    1808:	csel	w1, w1, w0, ne  // ne = any
    180c:	str	w1, [x20, #8]
    1810:	mov	w2, #0x0                   	// #0
    1814:	mov	x1, #0x0                   	// #0
    1818:	mov	x0, #0x0                   	// #0
    181c:	bl	0 <adler32>
    1820:	str	x0, [x19, #96]
    1824:	str	wzr, [x20, #76]
    1828:	mov	x0, x20
    182c:	bl	0 <_tr_init>
    1830:	mov	w0, w21
    1834:	ldp	x19, x20, [sp, #16]
    1838:	ldr	x21, [sp, #32]
    183c:	ldp	x29, x30, [sp], #48
    1840:	ret
    1844:	neg	w0, w0
    1848:	str	w0, [x20, #48]
    184c:	mov	w1, #0x2a                  	// #42
    1850:	cmp	w0, #0x2
    1854:	b.ne	180c <deflateResetKeep+0x68>  // b.any
    1858:	mov	w0, #0x39                  	// #57
    185c:	str	w0, [x20, #8]
    1860:	mov	w2, #0x0                   	// #0
    1864:	mov	x1, #0x0                   	// #0
    1868:	mov	x0, #0x0                   	// #0
    186c:	bl	0 <crc32>
    1870:	b	1820 <deflateResetKeep+0x7c>
    1874:	mov	w21, #0xfffffffe            	// #-2
    1878:	b	1830 <deflateResetKeep+0x8c>

000000000000187c <deflateReset>:
    187c:	stp	x29, x30, [sp, #-32]!
    1880:	mov	x29, sp
    1884:	stp	x19, x20, [sp, #16]
    1888:	mov	x19, x0
    188c:	bl	17a4 <deflateResetKeep>
    1890:	mov	w20, w0
    1894:	cbz	w0, 18a8 <deflateReset+0x2c>
    1898:	mov	w0, w20
    189c:	ldp	x19, x20, [sp, #16]
    18a0:	ldp	x29, x30, [sp], #32
    18a4:	ret
    18a8:	ldr	x19, [x19, #56]
    18ac:	ldr	w0, [x19, #80]
    18b0:	lsl	x0, x0, #1
    18b4:	str	x0, [x19, #104]
    18b8:	ldr	w0, [x19, #132]
    18bc:	sub	w0, w0, #0x1
    18c0:	ldr	x1, [x19, #120]
    18c4:	strh	wzr, [x1, x0, lsl #1]
    18c8:	ldr	w2, [x19, #132]
    18cc:	sub	w2, w2, #0x1
    18d0:	lsl	x2, x2, #1
    18d4:	mov	w1, #0x0                   	// #0
    18d8:	ldr	x0, [x19, #120]
    18dc:	bl	0 <memset>
    18e0:	adrp	x1, 0 <slide_hash>
    18e4:	add	x1, x1, #0x0
    18e8:	ldrsw	x0, [x19, #196]
    18ec:	lsl	x0, x0, #4
    18f0:	add	x2, x1, x0
    18f4:	ldrh	w3, [x2, #2]
    18f8:	str	w3, [x19, #192]
    18fc:	ldrh	w0, [x1, x0]
    1900:	str	w0, [x19, #204]
    1904:	ldrh	w0, [x2, #4]
    1908:	str	w0, [x19, #208]
    190c:	ldrh	w0, [x2, #6]
    1910:	str	w0, [x19, #188]
    1914:	str	wzr, [x19, #172]
    1918:	str	xzr, [x19, #152]
    191c:	str	wzr, [x19, #180]
    1920:	str	wzr, [x19, #5932]
    1924:	mov	w0, #0x2                   	// #2
    1928:	str	w0, [x19, #184]
    192c:	str	w0, [x19, #160]
    1930:	str	wzr, [x19, #168]
    1934:	str	wzr, [x19, #128]
    1938:	b	1898 <deflateReset+0x1c>

000000000000193c <deflateSetHeader>:
    193c:	stp	x29, x30, [sp, #-32]!
    1940:	mov	x29, sp
    1944:	stp	x19, x20, [sp, #16]
    1948:	mov	x19, x0
    194c:	mov	x20, x1
    1950:	bl	7c <deflateStateCheck>
    1954:	cbnz	w0, 1978 <deflateSetHeader+0x3c>
    1958:	ldr	x1, [x19, #56]
    195c:	ldr	w2, [x1, #48]
    1960:	cmp	w2, #0x2
    1964:	b.ne	1980 <deflateSetHeader+0x44>  // b.any
    1968:	str	x20, [x1, #56]
    196c:	ldp	x19, x20, [sp, #16]
    1970:	ldp	x29, x30, [sp], #32
    1974:	ret
    1978:	mov	w0, #0xfffffffe            	// #-2
    197c:	b	196c <deflateSetHeader+0x30>
    1980:	mov	w0, #0xfffffffe            	// #-2
    1984:	b	196c <deflateSetHeader+0x30>

0000000000001988 <deflatePending>:
    1988:	stp	x29, x30, [sp, #-48]!
    198c:	mov	x29, sp
    1990:	stp	x19, x20, [sp, #16]
    1994:	str	x21, [sp, #32]
    1998:	mov	x21, x0
    199c:	mov	x20, x1
    19a0:	mov	x19, x2
    19a4:	bl	7c <deflateStateCheck>
    19a8:	cbnz	w0, 19dc <deflatePending+0x54>
    19ac:	cbz	x20, 19bc <deflatePending+0x34>
    19b0:	ldr	x1, [x21, #56]
    19b4:	ldr	x1, [x1, #40]
    19b8:	str	w1, [x20]
    19bc:	cbz	x19, 19cc <deflatePending+0x44>
    19c0:	ldr	x1, [x21, #56]
    19c4:	ldr	w1, [x1, #5940]
    19c8:	str	w1, [x19]
    19cc:	ldp	x19, x20, [sp, #16]
    19d0:	ldr	x21, [sp, #32]
    19d4:	ldp	x29, x30, [sp], #48
    19d8:	ret
    19dc:	mov	w0, #0xfffffffe            	// #-2
    19e0:	b	19cc <deflatePending+0x44>

00000000000019e4 <deflatePrime>:
    19e4:	stp	x29, x30, [sp, #-64]!
    19e8:	mov	x29, sp
    19ec:	stp	x19, x20, [sp, #16]
    19f0:	stp	x21, x22, [sp, #32]
    19f4:	mov	x19, x0
    19f8:	mov	w20, w1
    19fc:	mov	w22, w2
    1a00:	bl	7c <deflateStateCheck>
    1a04:	cbnz	w0, 1a8c <deflatePrime+0xa8>
    1a08:	ldr	x21, [x19, #56]
    1a0c:	ldr	x0, [x21, #32]
    1a10:	add	x0, x0, #0x2
    1a14:	ldr	x1, [x21, #5904]
    1a18:	cmp	x1, x0
    1a1c:	b.cc	1a94 <deflatePrime+0xb0>  // b.lo, b.ul, b.last
    1a20:	stp	x23, x24, [sp, #48]
    1a24:	mov	w24, #0x10                  	// #16
    1a28:	mov	w23, #0x1                   	// #1
    1a2c:	ldr	w1, [x21, #5940]
    1a30:	sub	w19, w24, w1
    1a34:	cmp	w20, w19
    1a38:	csel	w19, w20, w19, le
    1a3c:	lsl	w0, w23, w19
    1a40:	sub	w0, w0, #0x1
    1a44:	and	w0, w0, w22
    1a48:	lsl	w0, w0, w1
    1a4c:	ldrh	w2, [x21, #5936]
    1a50:	orr	w0, w0, w2
    1a54:	strh	w0, [x21, #5936]
    1a58:	add	w1, w1, w19
    1a5c:	str	w1, [x21, #5940]
    1a60:	mov	x0, x21
    1a64:	bl	0 <_tr_flush_bits>
    1a68:	asr	w22, w22, w19
    1a6c:	subs	w20, w20, w19
    1a70:	b.ne	1a2c <deflatePrime+0x48>  // b.any
    1a74:	ldp	x23, x24, [sp, #48]
    1a78:	mov	w0, w20
    1a7c:	ldp	x19, x20, [sp, #16]
    1a80:	ldp	x21, x22, [sp, #32]
    1a84:	ldp	x29, x30, [sp], #64
    1a88:	ret
    1a8c:	mov	w20, #0xfffffffe            	// #-2
    1a90:	b	1a78 <deflatePrime+0x94>
    1a94:	mov	w20, #0xfffffffb            	// #-5
    1a98:	b	1a78 <deflatePrime+0x94>

0000000000001a9c <deflateTune>:
    1a9c:	stp	x29, x30, [sp, #-64]!
    1aa0:	mov	x29, sp
    1aa4:	stp	x19, x20, [sp, #16]
    1aa8:	stp	x21, x22, [sp, #32]
    1aac:	str	x23, [sp, #48]
    1ab0:	mov	x23, x0
    1ab4:	mov	w22, w1
    1ab8:	mov	w21, w2
    1abc:	mov	w20, w3
    1ac0:	mov	w19, w4
    1ac4:	bl	7c <deflateStateCheck>
    1ac8:	cbnz	w0, 1af4 <deflateTune+0x58>
    1acc:	ldr	x5, [x23, #56]
    1ad0:	str	w22, [x5, #204]
    1ad4:	str	w21, [x5, #192]
    1ad8:	str	w20, [x5, #208]
    1adc:	str	w19, [x5, #188]
    1ae0:	ldp	x19, x20, [sp, #16]
    1ae4:	ldp	x21, x22, [sp, #32]
    1ae8:	ldr	x23, [sp, #48]
    1aec:	ldp	x29, x30, [sp], #64
    1af0:	ret
    1af4:	mov	w0, #0xfffffffe            	// #-2
    1af8:	b	1ae0 <deflateTune+0x44>

0000000000001afc <deflateBound>:
    1afc:	stp	x29, x30, [sp, #-48]!
    1b00:	mov	x29, sp
    1b04:	stp	x19, x20, [sp, #16]
    1b08:	stp	x21, x22, [sp, #32]
    1b0c:	mov	x22, x0
    1b10:	mov	x20, x1
    1b14:	add	x21, x1, #0x7
    1b18:	add	x3, x1, #0x3f
    1b1c:	lsr	x2, x21, #3
    1b20:	add	x3, x2, x3, lsr #6
    1b24:	add	x19, x3, x1
    1b28:	bl	7c <deflateStateCheck>
    1b2c:	cbnz	w0, 1b84 <deflateBound+0x88>
    1b30:	ldr	x1, [x22, #56]
    1b34:	ldr	w0, [x1, #48]
    1b38:	cmp	w0, #0x1
    1b3c:	b.eq	1b8c <deflateBound+0x90>  // b.none
    1b40:	cmp	w0, #0x2
    1b44:	b.eq	1ba4 <deflateBound+0xa8>  // b.none
    1b48:	cmp	w0, #0x0
    1b4c:	mov	x2, #0x6                   	// #6
    1b50:	csel	x2, x2, xzr, ne  // ne = any
    1b54:	ldr	w0, [x1, #84]
    1b58:	cmp	w0, #0xf
    1b5c:	b.ne	1b6c <deflateBound+0x70>  // b.any
    1b60:	ldr	w0, [x1, #136]
    1b64:	cmp	w0, #0xf
    1b68:	b.eq	1c18 <deflateBound+0x11c>  // b.none
    1b6c:	add	x0, x19, #0x5
    1b70:	add	x0, x0, x2
    1b74:	ldp	x19, x20, [sp, #16]
    1b78:	ldp	x21, x22, [sp, #32]
    1b7c:	ldp	x29, x30, [sp], #48
    1b80:	ret
    1b84:	add	x0, x19, #0xb
    1b88:	b	1b74 <deflateBound+0x78>
    1b8c:	ldr	w0, [x1, #172]
    1b90:	cmp	w0, #0x0
    1b94:	mov	x2, #0xa                   	// #10
    1b98:	mov	x0, #0x6                   	// #6
    1b9c:	csel	x2, x2, x0, ne  // ne = any
    1ba0:	b	1b54 <deflateBound+0x58>
    1ba4:	ldr	x4, [x1, #56]
    1ba8:	mov	x2, #0x12                  	// #18
    1bac:	cbz	x4, 1b54 <deflateBound+0x58>
    1bb0:	ldr	x0, [x4, #24]
    1bb4:	cbz	x0, 1bc4 <deflateBound+0xc8>
    1bb8:	ldr	w2, [x4, #32]
    1bbc:	add	w2, w2, #0x2
    1bc0:	add	x2, x2, #0x12
    1bc4:	ldr	x3, [x4, #40]
    1bc8:	mov	x0, x2
    1bcc:	cbz	x3, 1be4 <deflateBound+0xe8>
    1bd0:	mvn	x2, x2
    1bd4:	add	x3, x3, x2
    1bd8:	add	x0, x0, #0x1
    1bdc:	ldrb	w2, [x3, x0]
    1be0:	cbnz	w2, 1bd8 <deflateBound+0xdc>
    1be4:	ldr	x3, [x4, #56]
    1be8:	mov	x2, x0
    1bec:	cbz	x3, 1c04 <deflateBound+0x108>
    1bf0:	mvn	x0, x0
    1bf4:	add	x0, x3, x0
    1bf8:	add	x2, x2, #0x1
    1bfc:	ldrb	w3, [x0, x2]
    1c00:	cbnz	w3, 1bf8 <deflateBound+0xfc>
    1c04:	ldr	w3, [x4, #68]
    1c08:	add	x0, x2, #0x2
    1c0c:	cmp	w3, #0x0
    1c10:	csel	x2, x0, x2, ne  // ne = any
    1c14:	b	1b54 <deflateBound+0x58>
    1c18:	lsr	x0, x20, #14
    1c1c:	add	x0, x0, x20, lsr #12
    1c20:	add	x0, x0, x21
    1c24:	add	x2, x2, x20, lsr #25
    1c28:	add	x0, x0, x2
    1c2c:	b	1b74 <deflateBound+0x78>

0000000000001c30 <deflate>:
    1c30:	stp	x29, x30, [sp, #-96]!
    1c34:	mov	x29, sp
    1c38:	stp	x19, x20, [sp, #16]
    1c3c:	stp	x21, x22, [sp, #32]
    1c40:	stp	x23, x24, [sp, #48]
    1c44:	mov	x20, x0
    1c48:	mov	w22, w1
    1c4c:	bl	7c <deflateStateCheck>
    1c50:	cbnz	w0, 2b54 <deflate+0xf24>
    1c54:	mov	w23, w0
    1c58:	cmp	w22, #0x5
    1c5c:	b.hi	2b5c <deflate+0xf2c>  // b.pmore
    1c60:	ldr	x19, [x20, #56]
    1c64:	ldr	x0, [x20, #24]
    1c68:	cbz	x0, 1d10 <deflate+0xe0>
    1c6c:	ldr	w0, [x20, #8]
    1c70:	cbz	w0, 1c7c <deflate+0x4c>
    1c74:	ldr	x0, [x20]
    1c78:	cbz	x0, 1d10 <deflate+0xe0>
    1c7c:	ldr	w0, [x19, #8]
    1c80:	cmp	w22, #0x4
    1c84:	cset	w1, ne  // ne = any
    1c88:	cmp	w0, #0x29a
    1c8c:	ccmp	w1, #0x0, #0x4, eq  // eq = none
    1c90:	b.ne	1d10 <deflate+0xe0>  // b.any
    1c94:	ldr	w2, [x20, #32]
    1c98:	cbz	w2, 1d24 <deflate+0xf4>
    1c9c:	ldr	w3, [x19, #76]
    1ca0:	str	w22, [x19, #76]
    1ca4:	ldr	x2, [x19, #40]
    1ca8:	cbnz	x2, 1d38 <deflate+0x108>
    1cac:	ldr	w2, [x20, #8]
    1cb0:	cbnz	w2, 2b6c <deflate+0xf3c>
    1cb4:	lsl	w0, w22, #1
    1cb8:	cmp	w22, #0x4
    1cbc:	mov	w2, #0x9                   	// #9
    1cc0:	csel	w2, w23, w2, le
    1cc4:	sub	w0, w0, w2
    1cc8:	lsl	w2, w3, #1
    1ccc:	cmp	w3, #0x4
    1cd0:	mov	w3, #0x9                   	// #9
    1cd4:	csel	w3, w23, w3, le
    1cd8:	sub	w2, w2, w3
    1cdc:	cmp	w1, #0x0
    1ce0:	ccmp	w0, w2, #0x0, ne  // ne = any
    1ce4:	b.le	1d54 <deflate+0x124>
    1ce8:	ldr	w0, [x19, #8]
    1cec:	cmp	w0, #0x29a
    1cf0:	b.ne	2b74 <deflate+0xf44>  // b.any
    1cf4:	ldr	w0, [x20, #8]
    1cf8:	cbz	w0, 2c20 <deflate+0xff0>
    1cfc:	adrp	x0, 0 <z_errmsg>
    1d00:	ldr	x0, [x0]
    1d04:	str	x0, [x20, #48]
    1d08:	mov	w23, #0xfffffffb            	// #-5
    1d0c:	b	2a84 <deflate+0xe54>
    1d10:	adrp	x0, 0 <z_errmsg>
    1d14:	ldr	x0, [x0]
    1d18:	str	x0, [x20, #48]
    1d1c:	mov	w23, #0xfffffffe            	// #-2
    1d20:	b	2a84 <deflate+0xe54>
    1d24:	adrp	x0, 0 <z_errmsg>
    1d28:	ldr	x0, [x0]
    1d2c:	str	x0, [x20, #48]
    1d30:	mov	w23, #0xfffffffb            	// #-5
    1d34:	b	2a84 <deflate+0xe54>
    1d38:	mov	x0, x20
    1d3c:	bl	61c <flush_pending>
    1d40:	ldr	w0, [x20, #32]
    1d44:	cbnz	w0, 1ce8 <deflate+0xb8>
    1d48:	mov	w0, #0xffffffff            	// #-1
    1d4c:	str	w0, [x19, #76]
    1d50:	b	2a84 <deflate+0xe54>
    1d54:	adrp	x0, 0 <z_errmsg>
    1d58:	ldr	x0, [x0]
    1d5c:	str	x0, [x20, #48]
    1d60:	mov	w23, #0xfffffffb            	// #-5
    1d64:	b	2a84 <deflate+0xe54>
    1d68:	ldr	w2, [x19, #196]
    1d6c:	cmp	w2, #0x1
    1d70:	b.le	2b9c <deflate+0xf6c>
    1d74:	mov	w0, #0x1                   	// #1
    1d78:	cmp	w2, #0x5
    1d7c:	b.le	2b9c <deflate+0xf6c>
    1d80:	cmp	w2, #0x6
    1d84:	cset	w0, ne  // ne = any
    1d88:	add	w0, w0, #0x2
    1d8c:	b	2b9c <deflate+0xf6c>
    1d90:	ldur	w1, [x20, #98]
    1d94:	mov	x0, x19
    1d98:	bl	114 <putShortMSB>
    1d9c:	ldrh	w1, [x20, #96]
    1da0:	mov	x0, x19
    1da4:	bl	114 <putShortMSB>
    1da8:	b	2be8 <deflate+0xfb8>
    1dac:	mov	w0, #0xffffffff            	// #-1
    1db0:	str	w0, [x19, #76]
    1db4:	b	2a84 <deflate+0xe54>
    1db8:	mov	w2, #0x0                   	// #0
    1dbc:	mov	x1, #0x0                   	// #0
    1dc0:	mov	x0, #0x0                   	// #0
    1dc4:	bl	0 <crc32>
    1dc8:	str	x0, [x20, #96]
    1dcc:	ldr	x1, [x19, #16]
    1dd0:	ldr	x0, [x19, #40]
    1dd4:	add	x2, x0, #0x1
    1dd8:	str	x2, [x19, #40]
    1ddc:	mov	w2, #0x1f                  	// #31
    1de0:	strb	w2, [x1, x0]
    1de4:	ldr	x1, [x19, #16]
    1de8:	ldr	x0, [x19, #40]
    1dec:	add	x2, x0, #0x1
    1df0:	str	x2, [x19, #40]
    1df4:	mov	w2, #0xffffff8b            	// #-117
    1df8:	strb	w2, [x1, x0]
    1dfc:	ldr	x1, [x19, #16]
    1e00:	ldr	x0, [x19, #40]
    1e04:	add	x2, x0, #0x1
    1e08:	str	x2, [x19, #40]
    1e0c:	mov	w2, #0x8                   	// #8
    1e10:	strb	w2, [x1, x0]
    1e14:	ldr	x0, [x19, #56]
    1e18:	cbz	x0, 1fec <deflate+0x3bc>
    1e1c:	ldr	w1, [x0]
    1e20:	cmp	w1, #0x0
    1e24:	cset	w2, ne  // ne = any
    1e28:	ldr	w1, [x0, #68]
    1e2c:	cmp	w1, #0x0
    1e30:	cset	w1, ne  // ne = any
    1e34:	add	w1, w2, w1, lsl #1
    1e38:	ldr	x2, [x0, #24]
    1e3c:	cmp	x2, #0x0
    1e40:	cset	w2, ne  // ne = any
    1e44:	ldr	x3, [x0, #40]
    1e48:	cmp	x3, #0x0
    1e4c:	cset	w3, ne  // ne = any
    1e50:	lsl	w3, w3, #3
    1e54:	add	w2, w3, w2, lsl #2
    1e58:	add	w1, w1, w2
    1e5c:	ldr	x0, [x0, #56]
    1e60:	cmp	x0, #0x0
    1e64:	cset	w0, ne  // ne = any
    1e68:	ldr	x3, [x19, #16]
    1e6c:	ldr	x2, [x19, #40]
    1e70:	add	x4, x2, #0x1
    1e74:	str	x4, [x19, #40]
    1e78:	add	w1, w1, w0, lsl #4
    1e7c:	strb	w1, [x3, x2]
    1e80:	ldr	x0, [x19, #56]
    1e84:	ldr	x2, [x0, #8]
    1e88:	ldr	x1, [x19, #16]
    1e8c:	ldr	x0, [x19, #40]
    1e90:	add	x3, x0, #0x1
    1e94:	str	x3, [x19, #40]
    1e98:	strb	w2, [x1, x0]
    1e9c:	ldr	x0, [x19, #56]
    1ea0:	ldr	x0, [x0, #8]
    1ea4:	lsr	x0, x0, #8
    1ea8:	ldr	x2, [x19, #16]
    1eac:	ldr	x1, [x19, #40]
    1eb0:	add	x3, x1, #0x1
    1eb4:	str	x3, [x19, #40]
    1eb8:	strb	w0, [x2, x1]
    1ebc:	ldr	x0, [x19, #56]
    1ec0:	ldr	x0, [x0, #8]
    1ec4:	lsr	x0, x0, #16
    1ec8:	ldr	x2, [x19, #16]
    1ecc:	ldr	x1, [x19, #40]
    1ed0:	add	x3, x1, #0x1
    1ed4:	str	x3, [x19, #40]
    1ed8:	strb	w0, [x2, x1]
    1edc:	ldr	x0, [x19, #56]
    1ee0:	ldr	x0, [x0, #8]
    1ee4:	lsr	x0, x0, #24
    1ee8:	ldr	x2, [x19, #16]
    1eec:	ldr	x1, [x19, #40]
    1ef0:	add	x3, x1, #0x1
    1ef4:	str	x3, [x19, #40]
    1ef8:	strb	w0, [x2, x1]
    1efc:	ldr	w1, [x19, #196]
    1f00:	mov	w0, #0x2                   	// #2
    1f04:	cmp	w1, #0x9
    1f08:	b.eq	1f20 <deflate+0x2f0>  // b.none
    1f0c:	ldr	w0, [x19, #200]
    1f10:	cmp	w0, #0x1
    1f14:	ccmp	w1, #0x1, #0x4, le
    1f18:	cset	w0, le
    1f1c:	lsl	w0, w0, #2
    1f20:	ldr	x2, [x19, #16]
    1f24:	ldr	x1, [x19, #40]
    1f28:	add	x3, x1, #0x1
    1f2c:	str	x3, [x19, #40]
    1f30:	strb	w0, [x2, x1]
    1f34:	ldr	x0, [x19, #56]
    1f38:	ldr	w2, [x0, #20]
    1f3c:	ldr	x1, [x19, #16]
    1f40:	ldr	x0, [x19, #40]
    1f44:	add	x3, x0, #0x1
    1f48:	str	x3, [x19, #40]
    1f4c:	strb	w2, [x1, x0]
    1f50:	ldr	x0, [x19, #56]
    1f54:	ldr	x1, [x0, #24]
    1f58:	cbz	x1, 1f94 <deflate+0x364>
    1f5c:	ldr	w2, [x0, #32]
    1f60:	ldr	x1, [x19, #16]
    1f64:	ldr	x0, [x19, #40]
    1f68:	add	x3, x0, #0x1
    1f6c:	str	x3, [x19, #40]
    1f70:	strb	w2, [x1, x0]
    1f74:	ldr	x0, [x19, #56]
    1f78:	ldr	w0, [x0, #32]
    1f7c:	lsr	w0, w0, #8
    1f80:	ldr	x2, [x19, #16]
    1f84:	ldr	x1, [x19, #40]
    1f88:	add	x3, x1, #0x1
    1f8c:	str	x3, [x19, #40]
    1f90:	strb	w0, [x2, x1]
    1f94:	ldr	x0, [x19, #56]
    1f98:	ldr	w0, [x0, #68]
    1f9c:	cbnz	w0, 20c4 <deflate+0x494>
    1fa0:	str	xzr, [x19, #64]
    1fa4:	mov	w0, #0x45                  	// #69
    1fa8:	str	w0, [x19, #8]
    1fac:	ldr	x0, [x19, #56]
    1fb0:	ldr	x1, [x0, #24]
    1fb4:	cbz	x1, 21d8 <deflate+0x5a8>
    1fb8:	stp	x25, x26, [sp, #64]
    1fbc:	ldr	x21, [x19, #40]
    1fc0:	ldrh	w25, [x0, #32]
    1fc4:	ldr	x0, [x19, #64]
    1fc8:	sub	w24, w25, w0
    1fcc:	sub	w25, w25, w0
    1fd0:	ldr	x2, [x19, #24]
    1fd4:	add	x0, x21, x25
    1fd8:	cmp	x0, x2
    1fdc:	b.ls	2190 <deflate+0x560>  // b.plast
    1fe0:	stp	x27, x28, [sp, #80]
    1fe4:	mov	x26, x21
    1fe8:	b	212c <deflate+0x4fc>
    1fec:	ldr	x1, [x19, #16]
    1ff0:	ldr	x0, [x19, #40]
    1ff4:	add	x2, x0, #0x1
    1ff8:	str	x2, [x19, #40]
    1ffc:	strb	wzr, [x1, x0]
    2000:	ldr	x1, [x19, #16]
    2004:	ldr	x0, [x19, #40]
    2008:	add	x2, x0, #0x1
    200c:	str	x2, [x19, #40]
    2010:	strb	wzr, [x1, x0]
    2014:	ldr	x1, [x19, #16]
    2018:	ldr	x0, [x19, #40]
    201c:	add	x2, x0, #0x1
    2020:	str	x2, [x19, #40]
    2024:	strb	wzr, [x1, x0]
    2028:	ldr	x1, [x19, #16]
    202c:	ldr	x0, [x19, #40]
    2030:	add	x2, x0, #0x1
    2034:	str	x2, [x19, #40]
    2038:	strb	wzr, [x1, x0]
    203c:	ldr	x1, [x19, #16]
    2040:	ldr	x0, [x19, #40]
    2044:	add	x2, x0, #0x1
    2048:	str	x2, [x19, #40]
    204c:	strb	wzr, [x1, x0]
    2050:	ldr	w1, [x19, #196]
    2054:	mov	w0, #0x2                   	// #2
    2058:	cmp	w1, #0x9
    205c:	b.eq	2074 <deflate+0x444>  // b.none
    2060:	ldr	w0, [x19, #200]
    2064:	cmp	w0, #0x1
    2068:	ccmp	w1, #0x1, #0x4, le
    206c:	cset	w0, le
    2070:	lsl	w0, w0, #2
    2074:	ldr	x2, [x19, #16]
    2078:	ldr	x1, [x19, #40]
    207c:	add	x3, x1, #0x1
    2080:	str	x3, [x19, #40]
    2084:	strb	w0, [x2, x1]
    2088:	ldr	x1, [x19, #16]
    208c:	ldr	x0, [x19, #40]
    2090:	add	x2, x0, #0x1
    2094:	str	x2, [x19, #40]
    2098:	mov	w2, #0x3                   	// #3
    209c:	strb	w2, [x1, x0]
    20a0:	mov	w0, #0x71                  	// #113
    20a4:	str	w0, [x19, #8]
    20a8:	mov	x0, x20
    20ac:	bl	61c <flush_pending>
    20b0:	ldr	x0, [x19, #40]
    20b4:	cbz	x0, 2c20 <deflate+0xff0>
    20b8:	mov	w0, #0xffffffff            	// #-1
    20bc:	str	w0, [x19, #76]
    20c0:	b	2a84 <deflate+0xe54>
    20c4:	ldr	w2, [x19, #40]
    20c8:	ldr	x1, [x19, #16]
    20cc:	ldr	x0, [x20, #96]
    20d0:	bl	0 <crc32>
    20d4:	str	x0, [x20, #96]
    20d8:	b	1fa0 <deflate+0x370>
    20dc:	ldr	x1, [x19, #16]
    20e0:	sub	w2, w2, w26
    20e4:	add	x1, x1, x26
    20e8:	ldr	x0, [x20, #96]
    20ec:	bl	0 <crc32>
    20f0:	str	x0, [x20, #96]
    20f4:	ldr	x2, [x19, #64]
    20f8:	add	x2, x2, x28
    20fc:	str	x2, [x19, #64]
    2100:	mov	x0, x20
    2104:	bl	61c <flush_pending>
    2108:	ldr	x21, [x19, #40]
    210c:	cbnz	x21, 2178 <deflate+0x548>
    2110:	sub	w25, w25, w27
    2114:	add	w24, w24, w25
    2118:	mov	w25, w24
    211c:	ldr	x2, [x19, #24]
    2120:	cmp	x2, w24, uxtw
    2124:	b.cs	218c <deflate+0x55c>  // b.hs, b.nlast
    2128:	mov	x26, x21
    212c:	mov	w27, w2
    2130:	mov	w25, w21
    2134:	sub	w28, w2, w21
    2138:	ldr	x0, [x19, #16]
    213c:	ldr	x1, [x19, #56]
    2140:	ldr	x3, [x1, #24]
    2144:	ldr	x1, [x19, #64]
    2148:	mov	x2, x28
    214c:	add	x1, x3, x1
    2150:	add	x0, x0, x21
    2154:	bl	0 <memcpy>
    2158:	ldr	x2, [x19, #24]
    215c:	str	x2, [x19, #40]
    2160:	ldr	x0, [x19, #56]
    2164:	ldr	w0, [x0, #68]
    2168:	cmp	w0, #0x0
    216c:	ccmp	x2, x26, #0x0, ne  // ne = any
    2170:	b.ls	20f4 <deflate+0x4c4>  // b.plast
    2174:	b	20dc <deflate+0x4ac>
    2178:	mov	w0, #0xffffffff            	// #-1
    217c:	str	w0, [x19, #76]
    2180:	ldp	x25, x26, [sp, #64]
    2184:	ldp	x27, x28, [sp, #80]
    2188:	b	2a84 <deflate+0xe54>
    218c:	ldp	x27, x28, [sp, #80]
    2190:	ldr	x0, [x19, #16]
    2194:	ldr	x1, [x19, #56]
    2198:	ldr	x3, [x1, #24]
    219c:	ldr	x1, [x19, #64]
    21a0:	mov	x2, x25
    21a4:	add	x1, x3, x1
    21a8:	add	x0, x0, x21
    21ac:	bl	0 <memcpy>
    21b0:	ldr	x2, [x19, #40]
    21b4:	add	x2, x25, x2
    21b8:	str	x2, [x19, #40]
    21bc:	ldr	x0, [x19, #56]
    21c0:	ldr	w0, [x0, #68]
    21c4:	cmp	w0, #0x0
    21c8:	ccmp	x2, x21, #0x0, ne  // ne = any
    21cc:	b.hi	21f4 <deflate+0x5c4>  // b.pmore
    21d0:	str	xzr, [x19, #64]
    21d4:	ldp	x25, x26, [sp, #64]
    21d8:	mov	w0, #0x49                  	// #73
    21dc:	str	w0, [x19, #8]
    21e0:	ldr	x0, [x19, #56]
    21e4:	ldr	x0, [x0, #40]
    21e8:	cbz	x0, 22b8 <deflate+0x688>
    21ec:	ldr	x1, [x19, #40]
    21f0:	b	2268 <deflate+0x638>
    21f4:	ldr	x1, [x19, #16]
    21f8:	sub	w2, w2, w21
    21fc:	add	x1, x1, x21
    2200:	ldr	x0, [x20, #96]
    2204:	bl	0 <crc32>
    2208:	str	x0, [x20, #96]
    220c:	b	21d0 <deflate+0x5a0>
    2210:	ldr	x0, [x19, #16]
    2214:	sub	w2, w2, w1
    2218:	add	x1, x0, x1
    221c:	ldr	x0, [x20, #96]
    2220:	bl	0 <crc32>
    2224:	str	x0, [x20, #96]
    2228:	mov	x0, x20
    222c:	bl	61c <flush_pending>
    2230:	ldr	x1, [x19, #40]
    2234:	cbnz	x1, 2290 <deflate+0x660>
    2238:	ldr	x0, [x19, #56]
    223c:	ldr	x2, [x0, #40]
    2240:	ldr	x0, [x19, #64]
    2244:	add	x3, x0, #0x1
    2248:	str	x3, [x19, #64]
    224c:	ldrb	w0, [x2, x0]
    2250:	ldr	x3, [x19, #16]
    2254:	ldr	x2, [x19, #40]
    2258:	add	x4, x2, #0x1
    225c:	str	x4, [x19, #40]
    2260:	strb	w0, [x3, x2]
    2264:	cbz	w0, 229c <deflate+0x66c>
    2268:	ldr	x2, [x19, #40]
    226c:	ldr	x0, [x19, #24]
    2270:	cmp	x2, x0
    2274:	b.ne	2238 <deflate+0x608>  // b.any
    2278:	ldr	x0, [x19, #56]
    227c:	ldr	w0, [x0, #68]
    2280:	cmp	w0, #0x0
    2284:	ccmp	x2, x1, #0x0, ne  // ne = any
    2288:	b.ls	2228 <deflate+0x5f8>  // b.plast
    228c:	b	2210 <deflate+0x5e0>
    2290:	mov	w0, #0xffffffff            	// #-1
    2294:	str	w0, [x19, #76]
    2298:	b	2a84 <deflate+0xe54>
    229c:	ldr	x0, [x19, #56]
    22a0:	ldr	w0, [x0, #68]
    22a4:	cbz	w0, 22b4 <deflate+0x684>
    22a8:	ldr	x2, [x19, #40]
    22ac:	cmp	x2, x1
    22b0:	b.hi	22d4 <deflate+0x6a4>  // b.pmore
    22b4:	str	xzr, [x19, #64]
    22b8:	mov	w0, #0x5b                  	// #91
    22bc:	str	w0, [x19, #8]
    22c0:	ldr	x0, [x19, #56]
    22c4:	ldr	x0, [x0, #56]
    22c8:	cbz	x0, 2394 <deflate+0x764>
    22cc:	ldr	x1, [x19, #40]
    22d0:	b	2330 <deflate+0x700>
    22d4:	ldr	x0, [x19, #16]
    22d8:	sub	w2, w2, w1
    22dc:	add	x1, x0, x1
    22e0:	ldr	x0, [x20, #96]
    22e4:	bl	0 <crc32>
    22e8:	str	x0, [x20, #96]
    22ec:	b	22b4 <deflate+0x684>
    22f0:	mov	x0, x20
    22f4:	bl	61c <flush_pending>
    22f8:	ldr	x1, [x19, #40]
    22fc:	cbnz	x1, 2370 <deflate+0x740>
    2300:	ldr	x0, [x19, #56]
    2304:	ldr	x2, [x0, #56]
    2308:	ldr	x0, [x19, #64]
    230c:	add	x3, x0, #0x1
    2310:	str	x3, [x19, #64]
    2314:	ldrb	w0, [x2, x0]
    2318:	ldr	x3, [x19, #16]
    231c:	ldr	x2, [x19, #40]
    2320:	add	x4, x2, #0x1
    2324:	str	x4, [x19, #40]
    2328:	strb	w0, [x3, x2]
    232c:	cbz	w0, 237c <deflate+0x74c>
    2330:	ldr	x2, [x19, #40]
    2334:	ldr	x0, [x19, #24]
    2338:	cmp	x2, x0
    233c:	b.ne	2300 <deflate+0x6d0>  // b.any
    2340:	ldr	x0, [x19, #56]
    2344:	ldr	w0, [x0, #68]
    2348:	cmp	w0, #0x0
    234c:	ccmp	x2, x1, #0x0, ne  // ne = any
    2350:	b.ls	22f0 <deflate+0x6c0>  // b.plast
    2354:	ldr	x0, [x19, #16]
    2358:	sub	w2, w2, w1
    235c:	add	x1, x0, x1
    2360:	ldr	x0, [x20, #96]
    2364:	bl	0 <crc32>
    2368:	str	x0, [x20, #96]
    236c:	b	22f0 <deflate+0x6c0>
    2370:	mov	w0, #0xffffffff            	// #-1
    2374:	str	w0, [x19, #76]
    2378:	b	2a84 <deflate+0xe54>
    237c:	ldr	x0, [x19, #56]
    2380:	ldr	w0, [x0, #68]
    2384:	cbz	w0, 2394 <deflate+0x764>
    2388:	ldr	x2, [x19, #40]
    238c:	cmp	x2, x1
    2390:	b.hi	2438 <deflate+0x808>  // b.pmore
    2394:	mov	w0, #0x67                  	// #103
    2398:	str	w0, [x19, #8]
    239c:	ldr	x0, [x19, #56]
    23a0:	ldr	w0, [x0, #68]
    23a4:	cbz	w0, 2414 <deflate+0x7e4>
    23a8:	ldr	x0, [x19, #40]
    23ac:	add	x0, x0, #0x2
    23b0:	ldr	x1, [x19, #24]
    23b4:	cmp	x0, x1
    23b8:	b.ls	23cc <deflate+0x79c>  // b.plast
    23bc:	mov	x0, x20
    23c0:	bl	61c <flush_pending>
    23c4:	ldr	x0, [x19, #40]
    23c8:	cbnz	x0, 2454 <deflate+0x824>
    23cc:	ldr	x2, [x20, #96]
    23d0:	ldr	x1, [x19, #16]
    23d4:	ldr	x0, [x19, #40]
    23d8:	add	x3, x0, #0x1
    23dc:	str	x3, [x19, #40]
    23e0:	strb	w2, [x1, x0]
    23e4:	ldr	x0, [x20, #96]
    23e8:	lsr	x0, x0, #8
    23ec:	ldr	x2, [x19, #16]
    23f0:	ldr	x1, [x19, #40]
    23f4:	add	x3, x1, #0x1
    23f8:	str	x3, [x19, #40]
    23fc:	strb	w0, [x2, x1]
    2400:	mov	w2, #0x0                   	// #0
    2404:	mov	x1, #0x0                   	// #0
    2408:	mov	x0, #0x0                   	// #0
    240c:	bl	0 <crc32>
    2410:	str	x0, [x20, #96]
    2414:	mov	w0, #0x71                  	// #113
    2418:	str	w0, [x19, #8]
    241c:	mov	x0, x20
    2420:	bl	61c <flush_pending>
    2424:	ldr	x0, [x19, #40]
    2428:	cbz	x0, 2c44 <deflate+0x1014>
    242c:	mov	w0, #0xffffffff            	// #-1
    2430:	str	w0, [x19, #76]
    2434:	b	2a84 <deflate+0xe54>
    2438:	ldr	x0, [x19, #16]
    243c:	sub	w2, w2, w1
    2440:	add	x1, x0, x1
    2444:	ldr	x0, [x20, #96]
    2448:	bl	0 <crc32>
    244c:	str	x0, [x20, #96]
    2450:	b	2394 <deflate+0x764>
    2454:	mov	w0, #0xffffffff            	// #-1
    2458:	str	w0, [x19, #76]
    245c:	b	2a84 <deflate+0xe54>
    2460:	mov	w1, w22
    2464:	mov	x0, x19
    2468:	bl	fc0 <deflate_stored>
    246c:	b	2c9c <deflate+0x106c>
    2470:	mov	x21, #0x0                   	// #0
    2474:	b	24e4 <deflate+0x8b4>
    2478:	str	wzr, [x19, #160]
    247c:	ldr	w0, [x19, #172]
    2480:	ldr	x1, [x19, #96]
    2484:	ldrb	w2, [x1, x0]
    2488:	ldr	w1, [x19, #5900]
    248c:	ldr	x0, [x19, #5904]
    2490:	strh	wzr, [x0, x1, lsl #1]
    2494:	ldr	x1, [x19, #5888]
    2498:	ldr	w0, [x19, #5900]
    249c:	add	w3, w0, #0x1
    24a0:	str	w3, [x19, #5900]
    24a4:	strb	w2, [x1, w0, uxtw]
    24a8:	add	x2, x19, w2, uxtb #2
    24ac:	ldrh	w0, [x2, #212]
    24b0:	add	w0, w0, #0x1
    24b4:	strh	w0, [x2, #212]
    24b8:	ldr	w2, [x19, #5900]
    24bc:	ldr	w1, [x19, #5896]
    24c0:	sub	w1, w1, #0x1
    24c4:	ldr	w0, [x19, #180]
    24c8:	sub	w0, w0, #0x1
    24cc:	str	w0, [x19, #180]
    24d0:	ldr	w0, [x19, #172]
    24d4:	add	w0, w0, #0x1
    24d8:	str	w0, [x19, #172]
    24dc:	cmp	w2, w1
    24e0:	b.eq	2560 <deflate+0x930>  // b.none
    24e4:	ldr	w0, [x19, #180]
    24e8:	cbnz	w0, 2478 <deflate+0x848>
    24ec:	mov	x0, x19
    24f0:	bl	3d8 <fill_window>
    24f4:	ldr	w0, [x19, #180]
    24f8:	cbnz	w0, 2478 <deflate+0x848>
    24fc:	cbz	w22, 2aa0 <deflate+0xe70>
    2500:	str	wzr, [x19, #5932]
    2504:	cmp	w22, #0x4
    2508:	b.eq	25a8 <deflate+0x978>  // b.none
    250c:	ldr	w0, [x19, #5900]
    2510:	cbz	w0, 2cb8 <deflate+0x1088>
    2514:	ldr	x0, [x19, #152]
    2518:	mov	x1, #0x0                   	// #0
    251c:	tbnz	x0, #63, 2528 <deflate+0x8f8>
    2520:	ldr	x1, [x19, #96]
    2524:	add	x1, x1, w0, uxtw
    2528:	ldr	w2, [x19, #172]
    252c:	mov	w3, #0x0                   	// #0
    2530:	sub	x2, x2, x0
    2534:	mov	x0, x19
    2538:	bl	0 <_tr_flush_block>
    253c:	ldr	w0, [x19, #172]
    2540:	str	x0, [x19, #152]
    2544:	ldr	x0, [x19]
    2548:	bl	61c <flush_pending>
    254c:	ldr	x0, [x19]
    2550:	ldr	w0, [x0, #32]
    2554:	cmp	w0, #0x0
    2558:	cset	w0, ne  // ne = any
    255c:	b	2ca8 <deflate+0x1078>
    2560:	ldr	x2, [x19, #152]
    2564:	mov	x1, x21
    2568:	tbnz	x2, #63, 2574 <deflate+0x944>
    256c:	ldr	x1, [x19, #96]
    2570:	add	x1, x1, w2, uxtw
    2574:	mov	w0, w0
    2578:	mov	w3, #0x0                   	// #0
    257c:	sub	x2, x0, x2
    2580:	mov	x0, x19
    2584:	bl	0 <_tr_flush_block>
    2588:	ldr	w0, [x19, #172]
    258c:	str	x0, [x19, #152]
    2590:	ldr	x0, [x19]
    2594:	bl	61c <flush_pending>
    2598:	ldr	x0, [x19]
    259c:	ldr	w0, [x0, #32]
    25a0:	cbnz	w0, 24e4 <deflate+0x8b4>
    25a4:	b	2aa0 <deflate+0xe70>
    25a8:	ldr	x0, [x19, #152]
    25ac:	mov	x1, #0x0                   	// #0
    25b0:	tbnz	x0, #63, 25bc <deflate+0x98c>
    25b4:	ldr	x1, [x19, #96]
    25b8:	add	x1, x1, w0, uxtw
    25bc:	ldr	w2, [x19, #172]
    25c0:	mov	w3, #0x1                   	// #1
    25c4:	sub	x2, x2, x0
    25c8:	mov	x0, x19
    25cc:	bl	0 <_tr_flush_block>
    25d0:	ldr	w0, [x19, #172]
    25d4:	str	x0, [x19, #152]
    25d8:	ldr	x0, [x19]
    25dc:	bl	61c <flush_pending>
    25e0:	ldr	x0, [x19]
    25e4:	ldr	w0, [x0, #32]
    25e8:	cbz	w0, 2ce8 <deflate+0x10b8>
    25ec:	mov	w0, #0x29a                 	// #666
    25f0:	str	w0, [x19, #8]
    25f4:	b	2964 <deflate+0xd34>
    25f8:	stp	x25, x26, [sp, #64]
    25fc:	adrp	x24, 0 <_length_code>
    2600:	add	x24, x24, #0x0
    2604:	adrp	x21, 0 <_dist_code>
    2608:	add	x21, x21, #0x0
    260c:	b	28f8 <deflate+0xcc8>
    2610:	mov	x0, x19
    2614:	bl	3d8 <fill_window>
    2618:	ldr	w0, [x19, #180]
    261c:	cmp	w0, #0x102
    2620:	ccmp	w22, #0x0, #0x0, ls  // ls = plast
    2624:	b.eq	2a9c <deflate+0xe6c>  // b.none
    2628:	cbnz	w0, 2810 <deflate+0xbe0>
    262c:	str	wzr, [x19, #5932]
    2630:	cmp	w22, #0x4
    2634:	b.eq	2908 <deflate+0xcd8>  // b.none
    2638:	ldr	w0, [x19, #5900]
    263c:	cbz	w0, 2ab4 <deflate+0xe84>
    2640:	ldr	x0, [x19, #152]
    2644:	mov	x1, #0x0                   	// #0
    2648:	tbnz	x0, #63, 2654 <deflate+0xa24>
    264c:	ldr	x1, [x19, #96]
    2650:	add	x1, x1, w0, uxtw
    2654:	ldr	w2, [x19, #172]
    2658:	mov	w3, #0x0                   	// #0
    265c:	sub	x2, x2, x0
    2660:	mov	x0, x19
    2664:	bl	0 <_tr_flush_block>
    2668:	ldr	w0, [x19, #172]
    266c:	str	x0, [x19, #152]
    2670:	ldr	x0, [x19]
    2674:	bl	61c <flush_pending>
    2678:	ldr	x0, [x19]
    267c:	ldr	w0, [x0, #32]
    2680:	cmp	w0, #0x0
    2684:	cset	w0, ne  // ne = any
    2688:	ldp	x25, x26, [sp, #64]
    268c:	b	2ca8 <deflate+0x1078>
    2690:	ldrb	w5, [x3, #2]
    2694:	cmp	w5, w4
    2698:	b.ne	2848 <deflate+0xc18>  // b.any
    269c:	ldrb	w5, [x3, #3]
    26a0:	cmp	w5, w4
    26a4:	b.ne	2848 <deflate+0xc18>  // b.any
    26a8:	add	x3, x3, #0x3
    26ac:	add	x2, x2, #0x102
    26b0:	add	x0, x0, x2
    26b4:	ldrb	w2, [x3, #1]
    26b8:	cmp	w2, w4
    26bc:	b.ne	2768 <deflate+0xb38>  // b.any
    26c0:	ldrb	w2, [x3, #2]
    26c4:	cmp	w2, w4
    26c8:	b.ne	2738 <deflate+0xb08>  // b.any
    26cc:	ldrb	w2, [x3, #3]
    26d0:	cmp	w2, w4
    26d4:	b.ne	2740 <deflate+0xb10>  // b.any
    26d8:	ldrb	w2, [x3, #4]
    26dc:	cmp	w2, w4
    26e0:	b.ne	2748 <deflate+0xb18>  // b.any
    26e4:	ldrb	w2, [x3, #5]
    26e8:	cmp	w2, w4
    26ec:	b.ne	2750 <deflate+0xb20>  // b.any
    26f0:	ldrb	w2, [x3, #6]
    26f4:	cmp	w2, w4
    26f8:	b.ne	2758 <deflate+0xb28>  // b.any
    26fc:	ldrb	w2, [x3, #7]
    2700:	cmp	w2, w4
    2704:	b.ne	2760 <deflate+0xb30>  // b.any
    2708:	ldrb	w2, [x3, #8]!
    270c:	cmp	w2, w4
    2710:	ccmp	x0, x3, #0x0, eq  // eq = none
    2714:	b.hi	26b4 <deflate+0xa84>  // b.pmore
    2718:	sub	x0, x0, x3
    271c:	sub	w0, w25, w0
    2720:	str	w0, [x19, #160]
    2724:	cmp	w1, w0
    2728:	b.cs	2770 <deflate+0xb40>  // b.hs, b.nlast
    272c:	str	w1, [x19, #160]
    2730:	mov	w0, w1
    2734:	b	2778 <deflate+0xb48>
    2738:	add	x3, x3, #0x2
    273c:	b	2718 <deflate+0xae8>
    2740:	add	x3, x3, #0x3
    2744:	b	2718 <deflate+0xae8>
    2748:	add	x3, x3, #0x4
    274c:	b	2718 <deflate+0xae8>
    2750:	add	x3, x3, #0x5
    2754:	b	2718 <deflate+0xae8>
    2758:	add	x3, x3, #0x6
    275c:	b	2718 <deflate+0xae8>
    2760:	add	x3, x3, #0x7
    2764:	b	2718 <deflate+0xae8>
    2768:	add	x3, x3, #0x1
    276c:	b	2718 <deflate+0xae8>
    2770:	cmp	w0, #0x2
    2774:	b.ls	2848 <deflate+0xc18>  // b.plast
    2778:	sub	w0, w0, #0x3
    277c:	and	w0, w0, #0xff
    2780:	ldr	w2, [x19, #5900]
    2784:	ldr	x1, [x19, #5904]
    2788:	mov	w3, #0x1                   	// #1
    278c:	strh	w3, [x1, x2, lsl #1]
    2790:	ldr	x2, [x19, #5888]
    2794:	ldr	w1, [x19, #5900]
    2798:	add	w3, w1, #0x1
    279c:	str	w3, [x19, #5900]
    27a0:	strb	w0, [x2, w1, uxtw]
    27a4:	ldrb	w0, [x24, w0, sxtw]
    27a8:	add	x0, x19, x0, lsl #2
    27ac:	ldrh	w1, [x0, #1240]
    27b0:	add	w1, w1, #0x1
    27b4:	strh	w1, [x0, #1240]
    27b8:	ldrb	w0, [x21]
    27bc:	add	x0, x19, x0, lsl #2
    27c0:	ldrh	w1, [x0, #2504]
    27c4:	add	w1, w1, #0x1
    27c8:	strh	w1, [x0, #2504]
    27cc:	ldr	w0, [x19, #5896]
    27d0:	sub	w0, w0, #0x1
    27d4:	ldr	w1, [x19, #5900]
    27d8:	cmp	w0, w1
    27dc:	cset	w2, eq  // eq = none
    27e0:	ldr	w3, [x19, #160]
    27e4:	ldr	w1, [x19, #180]
    27e8:	sub	w1, w1, w3
    27ec:	str	w1, [x19, #180]
    27f0:	ldr	w0, [x19, #172]
    27f4:	add	w0, w0, w3
    27f8:	str	w0, [x19, #172]
    27fc:	str	wzr, [x19, #160]
    2800:	cbnz	w2, 28b4 <deflate+0xc84>
    2804:	ldr	w0, [x19, #180]
    2808:	cmp	w0, #0x102
    280c:	b.ls	2610 <deflate+0x9e0>  // b.plast
    2810:	str	wzr, [x19, #160]
    2814:	ldr	w1, [x19, #180]
    2818:	cmp	w1, #0x2
    281c:	b.ls	2848 <deflate+0xc18>  // b.plast
    2820:	ldr	w2, [x19, #172]
    2824:	cbz	w2, 2848 <deflate+0xc18>
    2828:	ldr	x0, [x19, #96]
    282c:	mov	w2, w2
    2830:	sub	x4, x2, #0x1
    2834:	add	x3, x0, x4
    2838:	ldrb	w4, [x0, x4]
    283c:	ldrb	w5, [x3, #1]
    2840:	cmp	w5, w4
    2844:	b.eq	2690 <deflate+0xa60>  // b.none
    2848:	ldr	w0, [x19, #172]
    284c:	ldr	x1, [x19, #96]
    2850:	ldrb	w0, [x1, x0]
    2854:	ldr	w2, [x19, #5900]
    2858:	ldr	x1, [x19, #5904]
    285c:	strh	wzr, [x1, x2, lsl #1]
    2860:	ldr	x2, [x19, #5888]
    2864:	ldr	w1, [x19, #5900]
    2868:	add	w3, w1, #0x1
    286c:	str	w3, [x19, #5900]
    2870:	strb	w0, [x2, w1, uxtw]
    2874:	add	x0, x19, w0, uxtb #2
    2878:	ldrh	w1, [x0, #212]
    287c:	add	w1, w1, #0x1
    2880:	strh	w1, [x0, #212]
    2884:	ldr	w0, [x19, #5896]
    2888:	sub	w0, w0, #0x1
    288c:	ldr	w1, [x19, #5900]
    2890:	cmp	w0, w1
    2894:	cset	w2, eq  // eq = none
    2898:	ldr	w0, [x19, #180]
    289c:	sub	w0, w0, #0x1
    28a0:	str	w0, [x19, #180]
    28a4:	ldr	w0, [x19, #172]
    28a8:	add	w0, w0, #0x1
    28ac:	str	w0, [x19, #172]
    28b0:	b	2800 <deflate+0xbd0>
    28b4:	ldr	x0, [x19, #152]
    28b8:	mov	x1, #0x0                   	// #0
    28bc:	tbnz	x0, #63, 28c8 <deflate+0xc98>
    28c0:	ldr	x1, [x19, #96]
    28c4:	add	x1, x1, w0, uxtw
    28c8:	ldr	w2, [x19, #172]
    28cc:	mov	w3, #0x0                   	// #0
    28d0:	sub	x2, x2, x0
    28d4:	mov	x0, x19
    28d8:	bl	0 <_tr_flush_block>
    28dc:	ldr	w0, [x19, #172]
    28e0:	str	x0, [x19, #152]
    28e4:	ldr	x0, [x19]
    28e8:	bl	61c <flush_pending>
    28ec:	ldr	x0, [x19]
    28f0:	ldr	w0, [x0, #32]
    28f4:	cbz	w0, 2900 <deflate+0xcd0>
    28f8:	mov	w25, #0x102                 	// #258
    28fc:	b	2804 <deflate+0xbd4>
    2900:	ldp	x25, x26, [sp, #64]
    2904:	b	2aa0 <deflate+0xe70>
    2908:	ldr	x0, [x19, #152]
    290c:	mov	x1, #0x0                   	// #0
    2910:	tbnz	x0, #63, 291c <deflate+0xcec>
    2914:	ldr	x1, [x19, #96]
    2918:	add	x1, x1, w0, uxtw
    291c:	ldr	w2, [x19, #172]
    2920:	mov	w3, #0x1                   	// #1
    2924:	sub	x2, x2, x0
    2928:	mov	x0, x19
    292c:	bl	0 <_tr_flush_block>
    2930:	ldr	w0, [x19, #172]
    2934:	str	x0, [x19, #152]
    2938:	ldr	x0, [x19]
    293c:	bl	61c <flush_pending>
    2940:	ldr	x0, [x19]
    2944:	ldr	w0, [x0, #32]
    2948:	cbz	w0, 2ce4 <deflate+0x10b4>
    294c:	ldp	x25, x26, [sp, #64]
    2950:	b	25ec <deflate+0x9bc>
    2954:	mov	w1, #0x29a                 	// #666
    2958:	str	w1, [x19, #8]
    295c:	tst	w0, #0xfffffffd
    2960:	b.eq	2aa0 <deflate+0xe70>  // b.none
    2964:	cmp	w22, #0x4
    2968:	b.ne	2a84 <deflate+0xe54>  // b.any
    296c:	ldr	w0, [x19, #48]
    2970:	mov	w23, #0x1                   	// #1
    2974:	cmp	w0, #0x0
    2978:	b.le	2a84 <deflate+0xe54>
    297c:	cmp	w0, #0x2
    2980:	b.ne	2b38 <deflate+0xf08>  // b.any
    2984:	ldr	x2, [x20, #96]
    2988:	ldr	x1, [x19, #16]
    298c:	ldr	x0, [x19, #40]
    2990:	add	x3, x0, #0x1
    2994:	str	x3, [x19, #40]
    2998:	strb	w2, [x1, x0]
    299c:	ldr	x0, [x20, #96]
    29a0:	lsr	x0, x0, #8
    29a4:	ldr	x2, [x19, #16]
    29a8:	ldr	x1, [x19, #40]
    29ac:	add	x3, x1, #0x1
    29b0:	str	x3, [x19, #40]
    29b4:	strb	w0, [x2, x1]
    29b8:	ldr	x0, [x20, #96]
    29bc:	lsr	x0, x0, #16
    29c0:	ldr	x2, [x19, #16]
    29c4:	ldr	x1, [x19, #40]
    29c8:	add	x3, x1, #0x1
    29cc:	str	x3, [x19, #40]
    29d0:	strb	w0, [x2, x1]
    29d4:	ldr	x0, [x20, #96]
    29d8:	lsr	x0, x0, #24
    29dc:	ldr	x2, [x19, #16]
    29e0:	ldr	x1, [x19, #40]
    29e4:	add	x3, x1, #0x1
    29e8:	str	x3, [x19, #40]
    29ec:	strb	w0, [x2, x1]
    29f0:	ldr	x2, [x20, #16]
    29f4:	ldr	x1, [x19, #16]
    29f8:	ldr	x0, [x19, #40]
    29fc:	add	x3, x0, #0x1
    2a00:	str	x3, [x19, #40]
    2a04:	strb	w2, [x1, x0]
    2a08:	ldr	x0, [x20, #16]
    2a0c:	lsr	x0, x0, #8
    2a10:	ldr	x2, [x19, #16]
    2a14:	ldr	x1, [x19, #40]
    2a18:	add	x3, x1, #0x1
    2a1c:	str	x3, [x19, #40]
    2a20:	strb	w0, [x2, x1]
    2a24:	ldr	x0, [x20, #16]
    2a28:	lsr	x0, x0, #16
    2a2c:	ldr	x2, [x19, #16]
    2a30:	ldr	x1, [x19, #40]
    2a34:	add	x3, x1, #0x1
    2a38:	str	x3, [x19, #40]
    2a3c:	strb	w0, [x2, x1]
    2a40:	ldr	x0, [x20, #16]
    2a44:	lsr	x0, x0, #24
    2a48:	ldr	x2, [x19, #16]
    2a4c:	ldr	x1, [x19, #40]
    2a50:	add	x3, x1, #0x1
    2a54:	str	x3, [x19, #40]
    2a58:	strb	w0, [x2, x1]
    2a5c:	mov	x0, x20
    2a60:	bl	61c <flush_pending>
    2a64:	ldr	w0, [x19, #48]
    2a68:	cmp	w0, #0x0
    2a6c:	b.le	2a78 <deflate+0xe48>
    2a70:	neg	w0, w0
    2a74:	str	w0, [x19, #48]
    2a78:	ldr	x0, [x19, #40]
    2a7c:	cmp	x0, #0x0
    2a80:	cset	w23, eq  // eq = none
    2a84:	mov	w0, w23
    2a88:	ldp	x19, x20, [sp, #16]
    2a8c:	ldp	x21, x22, [sp, #32]
    2a90:	ldp	x23, x24, [sp, #48]
    2a94:	ldp	x29, x30, [sp], #96
    2a98:	ret
    2a9c:	ldp	x25, x26, [sp, #64]
    2aa0:	ldr	w0, [x20, #32]
    2aa4:	cbnz	w0, 2a84 <deflate+0xe54>
    2aa8:	mov	w0, #0xffffffff            	// #-1
    2aac:	str	w0, [x19, #76]
    2ab0:	b	2a84 <deflate+0xe54>
    2ab4:	ldp	x25, x26, [sp, #64]
    2ab8:	b	2cb8 <deflate+0x1088>
    2abc:	mov	x0, x19
    2ac0:	bl	0 <_tr_align>
    2ac4:	b	2cc8 <deflate+0x1098>
    2ac8:	mov	w3, #0x0                   	// #0
    2acc:	mov	x2, #0x0                   	// #0
    2ad0:	mov	x1, #0x0                   	// #0
    2ad4:	mov	x0, x19
    2ad8:	bl	0 <_tr_stored_block>
    2adc:	cmp	w22, #0x3
    2ae0:	b.eq	2af8 <deflate+0xec8>  // b.none
    2ae4:	mov	x0, x20
    2ae8:	bl	61c <flush_pending>
    2aec:	ldr	w0, [x20, #32]
    2af0:	cbnz	w0, 2964 <deflate+0xd34>
    2af4:	b	2cd8 <deflate+0x10a8>
    2af8:	ldr	w0, [x19, #132]
    2afc:	sub	w0, w0, #0x1
    2b00:	ldr	x1, [x19, #120]
    2b04:	strh	wzr, [x1, x0, lsl #1]
    2b08:	ldr	w2, [x19, #132]
    2b0c:	sub	w2, w2, #0x1
    2b10:	lsl	x2, x2, #1
    2b14:	mov	w1, #0x0                   	// #0
    2b18:	ldr	x0, [x19, #120]
    2b1c:	bl	0 <memset>
    2b20:	ldr	w0, [x19, #180]
    2b24:	cbnz	w0, 2cc8 <deflate+0x1098>
    2b28:	str	wzr, [x19, #172]
    2b2c:	str	xzr, [x19, #152]
    2b30:	str	wzr, [x19, #5932]
    2b34:	b	2cc8 <deflate+0x1098>
    2b38:	ldur	w1, [x20, #98]
    2b3c:	mov	x0, x19
    2b40:	bl	114 <putShortMSB>
    2b44:	ldrh	w1, [x20, #96]
    2b48:	mov	x0, x19
    2b4c:	bl	114 <putShortMSB>
    2b50:	b	2a5c <deflate+0xe2c>
    2b54:	mov	w23, #0xfffffffe            	// #-2
    2b58:	b	2a84 <deflate+0xe54>
    2b5c:	mov	w23, #0xfffffffe            	// #-2
    2b60:	b	2a84 <deflate+0xe54>
    2b64:	mov	w23, w22
    2b68:	b	2a84 <deflate+0xe54>
    2b6c:	cmp	w0, #0x29a
    2b70:	b.eq	1cfc <deflate+0xcc>  // b.none
    2b74:	cmp	w0, #0x2a
    2b78:	b.ne	2c14 <deflate+0xfe4>  // b.any
    2b7c:	ldr	w0, [x19, #84]
    2b80:	lsl	w0, w0, #12
    2b84:	sub	w1, w0, #0x7, lsl #12
    2b88:	sub	w1, w1, #0x800
    2b8c:	ldr	w2, [x19, #200]
    2b90:	mov	w0, #0x0                   	// #0
    2b94:	cmp	w2, #0x1
    2b98:	b.le	1d68 <deflate+0x138>
    2b9c:	orr	w0, w1, w0, lsl #6
    2ba0:	ldr	w2, [x19, #172]
    2ba4:	orr	w1, w0, #0x20
    2ba8:	cmp	w2, #0x0
    2bac:	csel	w0, w1, w0, ne  // ne = any
    2bb0:	mov	w1, #0x1085                	// #4229
    2bb4:	movk	w1, #0x842, lsl #16
    2bb8:	umull	x1, w0, w1
    2bbc:	lsr	x2, x1, #32
    2bc0:	sub	w1, w0, w2
    2bc4:	add	w1, w2, w1, lsr #1
    2bc8:	lsr	w1, w1, #4
    2bcc:	lsl	w0, w1, #5
    2bd0:	sub	w1, w0, w1
    2bd4:	add	w1, w1, #0x1f
    2bd8:	mov	x0, x19
    2bdc:	bl	114 <putShortMSB>
    2be0:	ldr	w0, [x19, #172]
    2be4:	cbnz	w0, 1d90 <deflate+0x160>
    2be8:	mov	w2, #0x0                   	// #0
    2bec:	mov	x1, #0x0                   	// #0
    2bf0:	mov	x0, #0x0                   	// #0
    2bf4:	bl	0 <adler32>
    2bf8:	str	x0, [x20, #96]
    2bfc:	mov	w0, #0x71                  	// #113
    2c00:	str	w0, [x19, #8]
    2c04:	mov	x0, x20
    2c08:	bl	61c <flush_pending>
    2c0c:	ldr	x0, [x19, #40]
    2c10:	cbnz	x0, 1dac <deflate+0x17c>
    2c14:	ldr	w0, [x19, #8]
    2c18:	cmp	w0, #0x39
    2c1c:	b.eq	1db8 <deflate+0x188>  // b.none
    2c20:	ldr	w0, [x19, #8]
    2c24:	cmp	w0, #0x45
    2c28:	b.eq	1fac <deflate+0x37c>  // b.none
    2c2c:	cmp	w0, #0x49
    2c30:	b.eq	21e0 <deflate+0x5b0>  // b.none
    2c34:	cmp	w0, #0x5b
    2c38:	b.eq	22c0 <deflate+0x690>  // b.none
    2c3c:	cmp	w0, #0x67
    2c40:	b.eq	239c <deflate+0x76c>  // b.none
    2c44:	ldr	w0, [x20, #8]
    2c48:	cbnz	w0, 2c64 <deflate+0x1034>
    2c4c:	ldr	w0, [x19, #180]
    2c50:	cbnz	w0, 2c64 <deflate+0x1034>
    2c54:	cbz	w22, 2b64 <deflate+0xf34>
    2c58:	ldr	w0, [x19, #8]
    2c5c:	cmp	w0, #0x29a
    2c60:	b.eq	2964 <deflate+0xd34>  // b.none
    2c64:	ldr	w0, [x19, #196]
    2c68:	cbz	w0, 2460 <deflate+0x830>
    2c6c:	ldr	w1, [x19, #200]
    2c70:	cmp	w1, #0x2
    2c74:	b.eq	2470 <deflate+0x840>  // b.none
    2c78:	cmp	w1, #0x3
    2c7c:	b.eq	25f8 <deflate+0x9c8>  // b.none
    2c80:	adrp	x1, 0 <slide_hash>
    2c84:	add	x1, x1, #0x0
    2c88:	add	x0, x1, w0, sxtw #4
    2c8c:	ldr	x2, [x0, #8]
    2c90:	mov	w1, w22
    2c94:	mov	x0, x19
    2c98:	blr	x2
    2c9c:	sub	w1, w0, #0x2
    2ca0:	cmp	w1, #0x1
    2ca4:	b.ls	2954 <deflate+0xd24>  // b.plast
    2ca8:	tst	w0, #0xfffffffd
    2cac:	b.eq	2aa0 <deflate+0xe70>  // b.none
    2cb0:	cmp	w0, #0x1
    2cb4:	b.ne	2964 <deflate+0xd34>  // b.any
    2cb8:	cmp	w22, #0x1
    2cbc:	b.eq	2abc <deflate+0xe8c>  // b.none
    2cc0:	cmp	w22, #0x5
    2cc4:	b.ne	2ac8 <deflate+0xe98>  // b.any
    2cc8:	mov	x0, x20
    2ccc:	bl	61c <flush_pending>
    2cd0:	ldr	w0, [x20, #32]
    2cd4:	cbnz	w0, 2a84 <deflate+0xe54>
    2cd8:	mov	w0, #0xffffffff            	// #-1
    2cdc:	str	w0, [x19, #76]
    2ce0:	b	2a84 <deflate+0xe54>
    2ce4:	ldp	x25, x26, [sp, #64]
    2ce8:	mov	w0, #0x29a                 	// #666
    2cec:	str	w0, [x19, #8]
    2cf0:	b	2aa0 <deflate+0xe70>

0000000000002cf4 <deflateParams>:
    2cf4:	stp	x29, x30, [sp, #-64]!
    2cf8:	mov	x29, sp
    2cfc:	stp	x19, x20, [sp, #16]
    2d00:	stp	x21, x22, [sp, #32]
    2d04:	str	x23, [sp, #48]
    2d08:	mov	x23, x0
    2d0c:	mov	w19, w1
    2d10:	mov	w21, w2
    2d14:	bl	7c <deflateStateCheck>
    2d18:	cbnz	w0, 2e44 <deflateParams+0x150>
    2d1c:	mov	w22, w0
    2d20:	ldr	x20, [x23, #56]
    2d24:	cmn	w19, #0x1
    2d28:	mov	w0, #0x6                   	// #6
    2d2c:	csel	w19, w19, w0, ne  // ne = any
    2d30:	cmp	w19, #0x9
    2d34:	ccmp	w21, #0x4, #0x2, ls  // ls = plast
    2d38:	b.hi	2e4c <deflateParams+0x158>  // b.pmore
    2d3c:	ldr	w0, [x20, #200]
    2d40:	cmp	w0, w21
    2d44:	b.eq	2dec <deflateParams+0xf8>  // b.none
    2d48:	ldr	x0, [x20, #5944]
    2d4c:	cbnz	x0, 2e14 <deflateParams+0x120>
    2d50:	ldr	w0, [x20, #196]
    2d54:	cmp	w0, w19
    2d58:	b.eq	2dd0 <deflateParams+0xdc>  // b.none
    2d5c:	cbnz	w0, 2d9c <deflateParams+0xa8>
    2d60:	ldr	w0, [x20, #5928]
    2d64:	cbz	w0, 2d9c <deflateParams+0xa8>
    2d68:	cmp	w0, #0x1
    2d6c:	b.eq	2e38 <deflateParams+0x144>  // b.none
    2d70:	ldr	w0, [x20, #132]
    2d74:	sub	w0, w0, #0x1
    2d78:	ldr	x1, [x20, #120]
    2d7c:	strh	wzr, [x1, x0, lsl #1]
    2d80:	ldr	w2, [x20, #132]
    2d84:	sub	w2, w2, #0x1
    2d88:	lsl	x2, x2, #1
    2d8c:	mov	w1, #0x0                   	// #0
    2d90:	ldr	x0, [x20, #120]
    2d94:	bl	0 <memset>
    2d98:	str	wzr, [x20, #5928]
    2d9c:	str	w19, [x20, #196]
    2da0:	adrp	x0, 0 <slide_hash>
    2da4:	add	x0, x0, #0x0
    2da8:	sbfiz	x19, x19, #4, #32
    2dac:	add	x1, x0, x19
    2db0:	ldrh	w2, [x1, #2]
    2db4:	str	w2, [x20, #192]
    2db8:	ldrh	w0, [x0, x19]
    2dbc:	str	w0, [x20, #204]
    2dc0:	ldrh	w0, [x1, #4]
    2dc4:	str	w0, [x20, #208]
    2dc8:	ldrh	w0, [x1, #6]
    2dcc:	str	w0, [x20, #188]
    2dd0:	str	w21, [x20, #200]
    2dd4:	mov	w0, w22
    2dd8:	ldp	x19, x20, [sp, #16]
    2ddc:	ldp	x21, x22, [sp, #32]
    2de0:	ldr	x23, [sp, #48]
    2de4:	ldp	x29, x30, [sp], #64
    2de8:	ret
    2dec:	adrp	x0, 0 <slide_hash>
    2df0:	add	x0, x0, #0x0
    2df4:	add	x2, x0, w19, sxtw #4
    2df8:	ldrsw	x1, [x20, #196]
    2dfc:	add	x0, x0, x1, lsl #4
    2e00:	ldr	x1, [x2, #8]
    2e04:	ldr	x0, [x0, #8]
    2e08:	cmp	x1, x0
    2e0c:	b.ne	2d48 <deflateParams+0x54>  // b.any
    2e10:	b	2d50 <deflateParams+0x5c>
    2e14:	mov	w1, #0x5                   	// #5
    2e18:	mov	x0, x23
    2e1c:	bl	1c30 <deflate>
    2e20:	cmn	w0, #0x2
    2e24:	b.eq	2e54 <deflateParams+0x160>  // b.none
    2e28:	ldr	w0, [x23, #32]
    2e2c:	cbnz	w0, 2d50 <deflateParams+0x5c>
    2e30:	mov	w22, #0xfffffffb            	// #-5
    2e34:	b	2dd4 <deflateParams+0xe0>
    2e38:	mov	x0, x20
    2e3c:	bl	0 <slide_hash>
    2e40:	b	2d80 <deflateParams+0x8c>
    2e44:	mov	w22, #0xfffffffe            	// #-2
    2e48:	b	2dd4 <deflateParams+0xe0>
    2e4c:	mov	w22, #0xfffffffe            	// #-2
    2e50:	b	2dd4 <deflateParams+0xe0>
    2e54:	mov	w22, w0
    2e58:	b	2dd4 <deflateParams+0xe0>

0000000000002e5c <deflateEnd>:
    2e5c:	stp	x29, x30, [sp, #-48]!
    2e60:	mov	x29, sp
    2e64:	stp	x19, x20, [sp, #16]
    2e68:	mov	x19, x0
    2e6c:	bl	7c <deflateStateCheck>
    2e70:	cbnz	w0, 2f14 <deflateEnd+0xb8>
    2e74:	str	x21, [sp, #32]
    2e78:	mov	w20, w0
    2e7c:	ldr	x0, [x19, #56]
    2e80:	ldr	w21, [x0, #8]
    2e84:	ldr	x1, [x0, #16]
    2e88:	cbz	x1, 2e98 <deflateEnd+0x3c>
    2e8c:	ldr	x2, [x19, #72]
    2e90:	ldr	x0, [x19, #80]
    2e94:	blr	x2
    2e98:	ldr	x0, [x19, #56]
    2e9c:	ldr	x1, [x0, #120]
    2ea0:	cbz	x1, 2eb0 <deflateEnd+0x54>
    2ea4:	ldr	x2, [x19, #72]
    2ea8:	ldr	x0, [x19, #80]
    2eac:	blr	x2
    2eb0:	ldr	x0, [x19, #56]
    2eb4:	ldr	x1, [x0, #112]
    2eb8:	cbz	x1, 2ec8 <deflateEnd+0x6c>
    2ebc:	ldr	x2, [x19, #72]
    2ec0:	ldr	x0, [x19, #80]
    2ec4:	blr	x2
    2ec8:	ldr	x0, [x19, #56]
    2ecc:	ldr	x1, [x0, #96]
    2ed0:	cbz	x1, 2ee0 <deflateEnd+0x84>
    2ed4:	ldr	x2, [x19, #72]
    2ed8:	ldr	x0, [x19, #80]
    2edc:	blr	x2
    2ee0:	ldr	x2, [x19, #72]
    2ee4:	ldr	x1, [x19, #56]
    2ee8:	ldr	x0, [x19, #80]
    2eec:	blr	x2
    2ef0:	str	xzr, [x19, #56]
    2ef4:	cmp	w21, #0x71
    2ef8:	mov	w0, #0xfffffffd            	// #-3
    2efc:	csel	w20, w20, w0, ne  // ne = any
    2f00:	ldr	x21, [sp, #32]
    2f04:	mov	w0, w20
    2f08:	ldp	x19, x20, [sp, #16]
    2f0c:	ldp	x29, x30, [sp], #48
    2f10:	ret
    2f14:	mov	w20, #0xfffffffe            	// #-2
    2f18:	b	2f04 <deflateEnd+0xa8>

0000000000002f1c <deflateInit2_>:
    2f1c:	cbz	x6, 3190 <deflateInit2_+0x274>
    2f20:	stp	x29, x30, [sp, #-80]!
    2f24:	mov	x29, sp
    2f28:	stp	x19, x20, [sp, #16]
    2f2c:	stp	x21, x22, [sp, #32]
    2f30:	stp	x23, x24, [sp, #48]
    2f34:	mov	x20, x0
    2f38:	mov	w23, w1
    2f3c:	mov	w21, w3
    2f40:	mov	w22, w4
    2f44:	mov	w24, w5
    2f48:	ldrb	w0, [x6]
    2f4c:	cmp	w0, #0x31
    2f50:	mov	w0, #0x70                  	// #112
    2f54:	ccmp	w7, w0, #0x0, eq  // eq = none
    2f58:	b.ne	3198 <deflateInit2_+0x27c>  // b.any
    2f5c:	cbz	x20, 31a0 <deflateInit2_+0x284>
    2f60:	str	x25, [sp, #64]
    2f64:	str	xzr, [x20, #48]
    2f68:	ldr	x0, [x20, #64]
    2f6c:	cbz	x0, 2fa0 <deflateInit2_+0x84>
    2f70:	ldr	x0, [x20, #72]
    2f74:	cbz	x0, 2fb4 <deflateInit2_+0x98>
    2f78:	cmn	w23, #0x1
    2f7c:	mov	w0, #0x6                   	// #6
    2f80:	csel	w23, w23, w0, ne  // ne = any
    2f84:	tbnz	w21, #31, 2fc4 <deflateInit2_+0xa8>
    2f88:	mov	w25, #0x1                   	// #1
    2f8c:	cmp	w21, #0xf
    2f90:	b.le	2fcc <deflateInit2_+0xb0>
    2f94:	sub	w21, w21, #0x10
    2f98:	mov	w25, #0x2                   	// #2
    2f9c:	b	2fcc <deflateInit2_+0xb0>
    2fa0:	adrp	x0, 0 <zcalloc>
    2fa4:	add	x0, x0, #0x0
    2fa8:	str	x0, [x20, #64]
    2fac:	str	xzr, [x20, #80]
    2fb0:	b	2f70 <deflateInit2_+0x54>
    2fb4:	adrp	x0, 0 <zcfree>
    2fb8:	add	x0, x0, #0x0
    2fbc:	str	x0, [x20, #72]
    2fc0:	b	2f78 <deflateInit2_+0x5c>
    2fc4:	neg	w21, w21
    2fc8:	mov	w25, #0x0                   	// #0
    2fcc:	sub	w0, w22, #0x1
    2fd0:	cmp	w0, #0x8
    2fd4:	b.hi	31a8 <deflateInit2_+0x28c>  // b.pmore
    2fd8:	sub	w0, w21, #0x8
    2fdc:	cmp	w0, #0x7
    2fe0:	ccmp	w2, #0x8, #0x0, ls  // ls = plast
    2fe4:	b.ne	31b4 <deflateInit2_+0x298>  // b.any
    2fe8:	cmp	w23, #0x9
    2fec:	ccmp	w24, #0x4, #0x2, ls  // ls = plast
    2ff0:	b.hi	31c0 <deflateInit2_+0x2a4>  // b.pmore
    2ff4:	cmp	w21, #0x8
    2ff8:	ccmp	w25, #0x1, #0x4, eq  // eq = none
    2ffc:	b.ne	31cc <deflateInit2_+0x2b0>  // b.any
    3000:	cmp	w21, #0x8
    3004:	mov	w0, #0x9                   	// #9
    3008:	csel	w21, w21, w0, ne  // ne = any
    300c:	ldr	x3, [x20, #64]
    3010:	mov	w2, #0x1740                	// #5952
    3014:	mov	w1, #0x1                   	// #1
    3018:	ldr	x0, [x20, #80]
    301c:	blr	x3
    3020:	mov	x19, x0
    3024:	cbz	x0, 31d8 <deflateInit2_+0x2bc>
    3028:	str	x0, [x20, #56]
    302c:	str	x20, [x0]
    3030:	mov	w0, #0x2a                  	// #42
    3034:	str	w0, [x19, #8]
    3038:	str	w25, [x19, #48]
    303c:	str	xzr, [x19, #56]
    3040:	str	w21, [x19, #84]
    3044:	mov	w25, #0x1                   	// #1
    3048:	lsl	w1, w25, w21
    304c:	str	w1, [x19, #80]
    3050:	sub	w0, w1, #0x1
    3054:	str	w0, [x19, #88]
    3058:	add	w0, w22, #0x7
    305c:	str	w0, [x19, #136]
    3060:	lsl	w0, w25, w0
    3064:	str	w0, [x19, #132]
    3068:	sub	w0, w0, #0x1
    306c:	str	w0, [x19, #140]
    3070:	add	w0, w22, #0x9
    3074:	mov	w2, #0xaaab                	// #43691
    3078:	movk	w2, #0xaaaa, lsl #16
    307c:	umull	x0, w0, w2
    3080:	lsr	x0, x0, #33
    3084:	str	w0, [x19, #144]
    3088:	ldr	x3, [x20, #64]
    308c:	mov	w2, #0x2                   	// #2
    3090:	ldr	x0, [x20, #80]
    3094:	blr	x3
    3098:	str	x0, [x19, #96]
    309c:	ldr	x3, [x20, #64]
    30a0:	mov	w2, #0x2                   	// #2
    30a4:	ldr	w1, [x19, #80]
    30a8:	ldr	x0, [x20, #80]
    30ac:	blr	x3
    30b0:	str	x0, [x19, #112]
    30b4:	ldr	x3, [x20, #64]
    30b8:	mov	w2, #0x2                   	// #2
    30bc:	ldr	w1, [x19, #132]
    30c0:	ldr	x0, [x20, #80]
    30c4:	blr	x3
    30c8:	str	x0, [x19, #120]
    30cc:	str	xzr, [x19, #5944]
    30d0:	add	w22, w22, #0x6
    30d4:	lsl	w1, w25, w22
    30d8:	str	w1, [x19, #5896]
    30dc:	ldr	x3, [x20, #64]
    30e0:	mov	w2, #0x4                   	// #4
    30e4:	ldr	x0, [x20, #80]
    30e8:	blr	x3
    30ec:	str	x0, [x19, #16]
    30f0:	ldr	w1, [x19, #5896]
    30f4:	mov	w2, w1
    30f8:	ubfiz	x3, x1, #2, #32
    30fc:	str	x3, [x19, #24]
    3100:	ldr	x3, [x19, #96]
    3104:	cbz	x3, 3168 <deflateInit2_+0x24c>
    3108:	ldr	x3, [x19, #112]
    310c:	cbz	x3, 3168 <deflateInit2_+0x24c>
    3110:	ldr	x3, [x19, #120]
    3114:	cmp	x3, #0x0
    3118:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    311c:	b.eq	3168 <deflateInit2_+0x24c>  // b.none
    3120:	and	x1, x1, #0xfffffffe
    3124:	add	x1, x0, x1
    3128:	str	x1, [x19, #5904]
    312c:	add	x2, x2, x2, lsl #1
    3130:	add	x0, x0, x2
    3134:	str	x0, [x19, #5888]
    3138:	str	w23, [x19, #196]
    313c:	str	w24, [x19, #200]
    3140:	mov	w0, #0x8                   	// #8
    3144:	strb	w0, [x19, #72]
    3148:	mov	x0, x20
    314c:	bl	187c <deflateReset>
    3150:	ldr	x25, [sp, #64]
    3154:	ldp	x19, x20, [sp, #16]
    3158:	ldp	x21, x22, [sp, #32]
    315c:	ldp	x23, x24, [sp, #48]
    3160:	ldp	x29, x30, [sp], #80
    3164:	ret
    3168:	mov	w0, #0x29a                 	// #666
    316c:	str	w0, [x19, #8]
    3170:	adrp	x0, 0 <z_errmsg>
    3174:	ldr	x0, [x0]
    3178:	str	x0, [x20, #48]
    317c:	mov	x0, x20
    3180:	bl	2e5c <deflateEnd>
    3184:	mov	w0, #0xfffffffc            	// #-4
    3188:	ldr	x25, [sp, #64]
    318c:	b	3154 <deflateInit2_+0x238>
    3190:	mov	w0, #0xfffffffa            	// #-6
    3194:	ret
    3198:	mov	w0, #0xfffffffa            	// #-6
    319c:	b	3154 <deflateInit2_+0x238>
    31a0:	mov	w0, #0xfffffffe            	// #-2
    31a4:	b	3154 <deflateInit2_+0x238>
    31a8:	mov	w0, #0xfffffffe            	// #-2
    31ac:	ldr	x25, [sp, #64]
    31b0:	b	3154 <deflateInit2_+0x238>
    31b4:	mov	w0, #0xfffffffe            	// #-2
    31b8:	ldr	x25, [sp, #64]
    31bc:	b	3154 <deflateInit2_+0x238>
    31c0:	mov	w0, #0xfffffffe            	// #-2
    31c4:	ldr	x25, [sp, #64]
    31c8:	b	3154 <deflateInit2_+0x238>
    31cc:	mov	w0, #0xfffffffe            	// #-2
    31d0:	ldr	x25, [sp, #64]
    31d4:	b	3154 <deflateInit2_+0x238>
    31d8:	mov	w0, #0xfffffffc            	// #-4
    31dc:	ldr	x25, [sp, #64]
    31e0:	b	3154 <deflateInit2_+0x238>

00000000000031e4 <deflateInit_>:
    31e4:	stp	x29, x30, [sp, #-16]!
    31e8:	mov	x29, sp
    31ec:	mov	w7, w3
    31f0:	mov	x6, x2
    31f4:	mov	w5, #0x0                   	// #0
    31f8:	mov	w4, #0x8                   	// #8
    31fc:	mov	w3, #0xf                   	// #15
    3200:	mov	w2, w4
    3204:	bl	2f1c <deflateInit2_>
    3208:	ldp	x29, x30, [sp], #16
    320c:	ret

0000000000003210 <deflateCopy>:
    3210:	stp	x29, x30, [sp, #-48]!
    3214:	mov	x29, sp
    3218:	stp	x19, x20, [sp, #16]
    321c:	mov	x20, x0
    3220:	mov	x19, x1
    3224:	mov	x0, x1
    3228:	bl	7c <deflateStateCheck>
    322c:	cmp	x20, #0x0
    3230:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    3234:	b.ne	33ec <deflateCopy+0x1dc>  // b.any
    3238:	stp	x21, x22, [sp, #32]
    323c:	ldr	x22, [x19, #56]
    3240:	ldp	x0, x1, [x19]
    3244:	stp	x0, x1, [x20]
    3248:	ldp	x0, x1, [x19, #16]
    324c:	stp	x0, x1, [x20, #16]
    3250:	ldp	x0, x1, [x19, #32]
    3254:	stp	x0, x1, [x20, #32]
    3258:	ldp	x0, x1, [x19, #48]
    325c:	stp	x0, x1, [x20, #48]
    3260:	ldp	x0, x1, [x19, #64]
    3264:	stp	x0, x1, [x20, #64]
    3268:	ldp	x0, x1, [x19, #80]
    326c:	stp	x0, x1, [x20, #80]
    3270:	ldp	x0, x1, [x19, #96]
    3274:	stp	x0, x1, [x20, #96]
    3278:	ldr	x3, [x20, #64]
    327c:	mov	w2, #0x1740                	// #5952
    3280:	mov	w1, #0x1                   	// #1
    3284:	ldr	x0, [x20, #80]
    3288:	blr	x3
    328c:	mov	x19, x0
    3290:	cbz	x0, 33f4 <deflateCopy+0x1e4>
    3294:	str	x0, [x20, #56]
    3298:	mov	x2, #0x1740                	// #5952
    329c:	mov	x1, x22
    32a0:	bl	0 <memcpy>
    32a4:	str	x20, [x19]
    32a8:	ldr	x3, [x20, #64]
    32ac:	mov	w2, #0x2                   	// #2
    32b0:	ldr	w1, [x19, #80]
    32b4:	ldr	x0, [x20, #80]
    32b8:	blr	x3
    32bc:	str	x0, [x19, #96]
    32c0:	ldr	x3, [x20, #64]
    32c4:	mov	w2, #0x2                   	// #2
    32c8:	ldr	w1, [x19, #80]
    32cc:	ldr	x0, [x20, #80]
    32d0:	blr	x3
    32d4:	str	x0, [x19, #112]
    32d8:	ldr	x3, [x20, #64]
    32dc:	mov	w2, #0x2                   	// #2
    32e0:	ldr	w1, [x19, #132]
    32e4:	ldr	x0, [x20, #80]
    32e8:	blr	x3
    32ec:	str	x0, [x19, #120]
    32f0:	ldr	x3, [x20, #64]
    32f4:	mov	w2, #0x4                   	// #4
    32f8:	ldr	w1, [x19, #5896]
    32fc:	ldr	x0, [x20, #80]
    3300:	blr	x3
    3304:	mov	x21, x0
    3308:	str	x0, [x19, #16]
    330c:	ldr	x0, [x19, #96]
    3310:	cbz	x0, 33d8 <deflateCopy+0x1c8>
    3314:	ldr	x1, [x19, #112]
    3318:	cbz	x1, 33d8 <deflateCopy+0x1c8>
    331c:	ldr	x1, [x19, #120]
    3320:	cmp	x1, #0x0
    3324:	ccmp	x21, #0x0, #0x4, ne  // ne = any
    3328:	b.eq	33d8 <deflateCopy+0x1c8>  // b.none
    332c:	ldr	w2, [x19, #80]
    3330:	lsl	w2, w2, #1
    3334:	ldr	x1, [x22, #96]
    3338:	bl	0 <memcpy>
    333c:	ldr	w2, [x19, #80]
    3340:	lsl	x2, x2, #1
    3344:	ldr	x1, [x22, #112]
    3348:	ldr	x0, [x19, #112]
    334c:	bl	0 <memcpy>
    3350:	ldr	w2, [x19, #132]
    3354:	lsl	x2, x2, #1
    3358:	ldr	x1, [x22, #120]
    335c:	ldr	x0, [x19, #120]
    3360:	bl	0 <memcpy>
    3364:	ldr	w2, [x19, #24]
    3368:	ldr	x1, [x22, #16]
    336c:	ldr	x0, [x19, #16]
    3370:	bl	0 <memcpy>
    3374:	ldr	x2, [x19, #16]
    3378:	ldr	x0, [x22, #32]
    337c:	ldr	x1, [x22, #16]
    3380:	sub	x0, x0, x1
    3384:	add	x0, x2, x0
    3388:	str	x0, [x19, #32]
    338c:	ldr	w1, [x19, #5896]
    3390:	and	x0, x1, #0xfffffffe
    3394:	add	x21, x21, x0
    3398:	str	x21, [x19, #5904]
    339c:	ubfiz	x0, x1, #1, #32
    33a0:	add	x1, x0, w1, uxtw
    33a4:	add	x1, x2, x1
    33a8:	str	x1, [x19, #5888]
    33ac:	add	x0, x19, #0xd4
    33b0:	str	x0, [x19, #2904]
    33b4:	add	x0, x19, #0x9c8
    33b8:	str	x0, [x19, #2928]
    33bc:	add	x0, x19, #0xabc
    33c0:	str	x0, [x19, #2952]
    33c4:	mov	w0, #0x0                   	// #0
    33c8:	ldp	x21, x22, [sp, #32]
    33cc:	ldp	x19, x20, [sp, #16]
    33d0:	ldp	x29, x30, [sp], #48
    33d4:	ret
    33d8:	mov	x0, x20
    33dc:	bl	2e5c <deflateEnd>
    33e0:	mov	w0, #0xfffffffc            	// #-4
    33e4:	ldp	x21, x22, [sp, #32]
    33e8:	b	33cc <deflateCopy+0x1bc>
    33ec:	mov	w0, #0xfffffffe            	// #-2
    33f0:	b	33cc <deflateCopy+0x1bc>
    33f4:	mov	w0, #0xfffffffc            	// #-4
    33f8:	ldp	x21, x22, [sp, #32]
    33fc:	b	33cc <deflateCopy+0x1bc>

infback.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateBackInit_>:
       0:	cbz	x3, d8 <inflateBackInit_+0xd8>
       4:	stp	x29, x30, [sp, #-48]!
       8:	mov	x29, sp
       c:	stp	x19, x20, [sp, #16]
      10:	str	x21, [sp, #32]
      14:	mov	x19, x0
      18:	mov	w20, w1
      1c:	mov	x21, x2
      20:	ldrb	w0, [x3]
      24:	cmp	w0, #0x31
      28:	mov	w0, #0x70                  	// #112
      2c:	ccmp	w4, w0, #0x0, eq  // eq = none
      30:	b.ne	e0 <inflateBackInit_+0xe0>  // b.any
      34:	cmp	x19, #0x0
      38:	ccmp	x2, #0x0, #0x4, ne  // ne = any
      3c:	b.eq	e8 <inflateBackInit_+0xe8>  // b.none
      40:	sub	w0, w1, #0x8
      44:	cmp	w0, #0x7
      48:	b.hi	f0 <inflateBackInit_+0xf0>  // b.pmore
      4c:	str	xzr, [x19, #48]
      50:	ldr	x0, [x19, #64]
      54:	cbz	x0, b4 <inflateBackInit_+0xb4>
      58:	ldr	x0, [x19, #72]
      5c:	cbz	x0, c8 <inflateBackInit_+0xc8>
      60:	ldr	x3, [x19, #64]
      64:	mov	w2, #0x1bf8                	// #7160
      68:	mov	w1, #0x1                   	// #1
      6c:	ldr	x0, [x19, #80]
      70:	blr	x3
      74:	cbz	x0, f8 <inflateBackInit_+0xf8>
      78:	str	x0, [x19, #56]
      7c:	mov	w1, #0x8000                	// #32768
      80:	str	w1, [x0, #28]
      84:	str	w20, [x0, #56]
      88:	mov	w1, #0x1                   	// #1
      8c:	lsl	w20, w1, w20
      90:	str	w20, [x0, #60]
      94:	str	x21, [x0, #72]
      98:	str	wzr, [x0, #68]
      9c:	str	wzr, [x0, #64]
      a0:	mov	w0, #0x0                   	// #0
      a4:	ldp	x19, x20, [sp, #16]
      a8:	ldr	x21, [sp, #32]
      ac:	ldp	x29, x30, [sp], #48
      b0:	ret
      b4:	adrp	x0, 0 <zcalloc>
      b8:	add	x0, x0, #0x0
      bc:	str	x0, [x19, #64]
      c0:	str	xzr, [x19, #80]
      c4:	b	58 <inflateBackInit_+0x58>
      c8:	adrp	x0, 0 <zcfree>
      cc:	add	x0, x0, #0x0
      d0:	str	x0, [x19, #72]
      d4:	b	60 <inflateBackInit_+0x60>
      d8:	mov	w0, #0xfffffffa            	// #-6
      dc:	ret
      e0:	mov	w0, #0xfffffffa            	// #-6
      e4:	b	a4 <inflateBackInit_+0xa4>
      e8:	mov	w0, #0xfffffffe            	// #-2
      ec:	b	a4 <inflateBackInit_+0xa4>
      f0:	mov	w0, #0xfffffffe            	// #-2
      f4:	b	a4 <inflateBackInit_+0xa4>
      f8:	mov	w0, #0xfffffffc            	// #-4
      fc:	b	a4 <inflateBackInit_+0xa4>

0000000000000100 <inflateBack>:
     100:	stp	x29, x30, [sp, #-208]!
     104:	mov	x29, sp
     108:	str	x3, [sp, #104]
     10c:	str	x4, [sp, #112]
     110:	cbz	x0, 103c <inflateBack+0xf3c>
     114:	stp	x21, x22, [sp, #32]
     118:	stp	x23, x24, [sp, #48]
     11c:	stp	x25, x26, [sp, #64]
     120:	mov	x23, x0
     124:	mov	x24, x1
     128:	mov	x25, x2
     12c:	ldr	x22, [x0, #56]
     130:	cbz	x22, 1044 <inflateBack+0xf44>
     134:	stp	x19, x20, [sp, #16]
     138:	stp	x27, x28, [sp, #80]
     13c:	str	xzr, [x0, #48]
     140:	mov	w0, #0x3f3f                	// #16191
     144:	str	w0, [x22, #8]
     148:	str	wzr, [x22, #12]
     14c:	str	wzr, [x22, #64]
     150:	ldr	x0, [x23]
     154:	str	x0, [sp, #200]
     158:	mov	w19, #0x0                   	// #0
     15c:	cbz	x0, 164 <inflateBack+0x64>
     160:	ldr	w19, [x23, #8]
     164:	ldr	x28, [x22, #72]
     168:	ldr	w26, [x22, #60]
     16c:	mov	w20, #0x0                   	// #0
     170:	mov	x21, #0x0                   	// #0
     174:	adrp	x27, 0 <inflateBackInit_>
     178:	add	x27, x27, #0x0
     17c:	add	x0, x27, #0x880
     180:	str	x0, [sp, #120]
     184:	ldr	w0, [x22, #8]
     188:	mov	w1, #0x3f48                	// #16200
     18c:	cmp	w0, w1
     190:	b.eq	a0c <inflateBack+0x90c>  // b.none
     194:	b.hi	23c <inflateBack+0x13c>  // b.pmore
     198:	mov	w1, #0x3f41                	// #16193
     19c:	cmp	w0, w1
     1a0:	b.eq	358 <inflateBack+0x258>  // b.none
     1a4:	mov	w1, #0x3f44                	// #16196
     1a8:	cmp	w0, w1
     1ac:	b.ne	208 <inflateBack+0x108>  // b.any
     1b0:	cmp	w20, #0xd
     1b4:	b.ls	4c0 <inflateBack+0x3c0>  // b.plast
     1b8:	and	w1, w21, #0x1f
     1bc:	add	w1, w1, #0x101
     1c0:	str	w1, [x22, #132]
     1c4:	ubfx	w0, w21, #5, #5
     1c8:	add	w0, w0, #0x1
     1cc:	str	w0, [x22, #136]
     1d0:	ubfx	w2, w21, #10, #4
     1d4:	add	w2, w2, #0x4
     1d8:	str	w2, [x22, #128]
     1dc:	lsr	x21, x21, #14
     1e0:	sub	w20, w20, #0xe
     1e4:	cmp	w1, #0x11e
     1e8:	ccmp	w0, #0x1e, #0x2, ls  // ls = plast
     1ec:	b.ls	4e4 <inflateBack+0x3e4>  // b.plast
     1f0:	adrp	x0, 0 <inflateBackInit_>
     1f4:	add	x0, x0, #0x0
     1f8:	str	x0, [x23, #48]
     1fc:	mov	w0, #0x3f51                	// #16209
     200:	str	w0, [x22, #8]
     204:	b	184 <inflateBack+0x84>
     208:	mov	w1, #0x3f3f                	// #16191
     20c:	cmp	w0, w1
     210:	b.ne	234 <inflateBack+0x134>  // b.any
     214:	ldr	w0, [x22, #12]
     218:	cbz	w0, 284 <inflateBack+0x184>
     21c:	and	w0, w20, #0x7
     220:	lsr	x21, x21, x0
     224:	and	w20, w20, #0xfffffff8
     228:	mov	w0, #0x3f50                	// #16208
     22c:	str	w0, [x22, #8]
     230:	b	184 <inflateBack+0x84>
     234:	mov	w0, #0xfffffffe            	// #-2
     238:	b	25c <inflateBack+0x15c>
     23c:	mov	w1, #0x3f50                	// #16208
     240:	cmp	w0, w1
     244:	b.eq	ff8 <inflateBack+0xef8>  // b.none
     248:	mov	w1, #0x3f51                	// #16209
     24c:	cmp	w0, w1
     250:	mov	w0, #0xfffffffe            	// #-2
     254:	mov	w1, #0xfffffffd            	// #-3
     258:	csel	w0, w0, w1, ne  // ne = any
     25c:	ldr	x1, [sp, #200]
     260:	str	x1, [x23]
     264:	str	w19, [x23, #8]
     268:	ldp	x19, x20, [sp, #16]
     26c:	ldp	x21, x22, [sp, #32]
     270:	ldp	x23, x24, [sp, #48]
     274:	ldp	x25, x26, [sp, #64]
     278:	ldp	x27, x28, [sp, #80]
     27c:	ldp	x29, x30, [sp], #208
     280:	ret
     284:	cmp	w20, #0x2
     288:	b.hi	2c4 <inflateBack+0x1c4>  // b.pmore
     28c:	cbnz	w19, 2a4 <inflateBack+0x1a4>
     290:	add	x1, sp, #0xc8
     294:	mov	x0, x25
     298:	blr	x24
     29c:	mov	w19, w0
     2a0:	cbz	w0, 314 <inflateBack+0x214>
     2a4:	sub	w19, w19, #0x1
     2a8:	ldr	x0, [sp, #200]
     2ac:	add	x1, x0, #0x1
     2b0:	str	x1, [sp, #200]
     2b4:	ldrb	w0, [x0]
     2b8:	lsl	x0, x0, x20
     2bc:	add	x21, x21, x0
     2c0:	add	w20, w20, #0x8
     2c4:	and	w0, w21, #0x1
     2c8:	str	w0, [x22, #12]
     2cc:	ubfx	w0, w21, #1, #2
     2d0:	cmp	w0, #0x2
     2d4:	b.eq	334 <inflateBack+0x234>  // b.none
     2d8:	cmp	w0, #0x2
     2dc:	b.hi	340 <inflateBack+0x240>  // b.pmore
     2e0:	cbz	w0, 320 <inflateBack+0x220>
     2e4:	cmp	w0, #0x1
     2e8:	b.ne	328 <inflateBack+0x228>  // b.any
     2ec:	str	x27, [x22, #104]
     2f0:	mov	w0, #0x9                   	// #9
     2f4:	str	w0, [x22, #120]
     2f8:	add	x0, x27, #0x800
     2fc:	str	x0, [x22, #112]
     300:	mov	w0, #0x5                   	// #5
     304:	str	w0, [x22, #124]
     308:	mov	w0, #0x3f48                	// #16200
     30c:	str	w0, [x22, #8]
     310:	b	328 <inflateBack+0x228>
     314:	str	xzr, [sp, #200]
     318:	mov	w0, #0xfffffffb            	// #-5
     31c:	b	25c <inflateBack+0x15c>
     320:	mov	w0, #0x3f41                	// #16193
     324:	str	w0, [x22, #8]
     328:	lsr	x21, x21, #3
     32c:	sub	w20, w20, #0x3
     330:	b	184 <inflateBack+0x84>
     334:	mov	w0, #0x3f44                	// #16196
     338:	str	w0, [x22, #8]
     33c:	b	328 <inflateBack+0x228>
     340:	adrp	x0, 0 <inflateBackInit_>
     344:	add	x0, x0, #0x0
     348:	str	x0, [x23, #48]
     34c:	mov	w0, #0x3f51                	// #16209
     350:	str	w0, [x22, #8]
     354:	b	328 <inflateBack+0x228>
     358:	and	w0, w20, #0x7
     35c:	lsr	x21, x21, x0
     360:	and	w20, w20, #0xfffffff8
     364:	cmp	w20, #0x1f
     368:	b.ls	3bc <inflateBack+0x2bc>  // b.plast
     36c:	lsr	x0, x21, #16
     370:	eor	x0, x0, #0xffff
     374:	cmp	x0, w21, uxth
     378:	b.eq	3e0 <inflateBack+0x2e0>  // b.none
     37c:	adrp	x0, 0 <inflateBackInit_>
     380:	add	x0, x0, #0x0
     384:	str	x0, [x23, #48]
     388:	mov	w0, #0x3f51                	// #16209
     38c:	str	w0, [x22, #8]
     390:	b	184 <inflateBack+0x84>
     394:	sub	w19, w19, #0x1
     398:	ldr	x0, [sp, #200]
     39c:	add	x1, x0, #0x1
     3a0:	str	x1, [sp, #200]
     3a4:	ldrb	w0, [x0]
     3a8:	lsl	x0, x0, x20
     3ac:	add	x21, x21, x0
     3b0:	add	w20, w20, #0x8
     3b4:	cmp	w20, #0x1f
     3b8:	b.hi	36c <inflateBack+0x26c>  // b.pmore
     3bc:	cbnz	w19, 394 <inflateBack+0x294>
     3c0:	add	x1, sp, #0xc8
     3c4:	mov	x0, x25
     3c8:	blr	x24
     3cc:	mov	w19, w0
     3d0:	cbnz	w0, 394 <inflateBack+0x294>
     3d4:	str	xzr, [sp, #200]
     3d8:	mov	w0, #0xfffffffb            	// #-5
     3dc:	b	25c <inflateBack+0x15c>
     3e0:	and	w21, w21, #0xffff
     3e4:	str	w21, [x22, #92]
     3e8:	cbnz	w21, 474 <inflateBack+0x374>
     3ec:	mov	w0, #0x3f3f                	// #16191
     3f0:	str	w0, [x22, #8]
     3f4:	mov	w20, #0x0                   	// #0
     3f8:	mov	x21, #0x0                   	// #0
     3fc:	b	184 <inflateBack+0x84>
     400:	cbnz	w26, 428 <inflateBack+0x328>
     404:	ldr	x28, [x22, #72]
     408:	ldr	w26, [x22, #60]
     40c:	str	w26, [x22, #64]
     410:	mov	w2, w26
     414:	mov	x1, x28
     418:	ldr	x0, [sp, #112]
     41c:	ldr	x3, [sp, #104]
     420:	blr	x3
     424:	cbnz	w0, 102c <inflateBack+0xf2c>
     428:	cmp	w19, w26
     42c:	csel	w0, w19, w26, ls  // ls = plast
     430:	cmp	w0, w21
     434:	csel	w20, w0, w21, ls  // ls = plast
     438:	csel	w21, w0, w21, ls  // ls = plast
     43c:	mov	x2, x21
     440:	ldr	x1, [sp, #200]
     444:	mov	x0, x28
     448:	bl	0 <memcpy>
     44c:	sub	w19, w19, w20
     450:	ldr	x0, [sp, #200]
     454:	add	x0, x0, x21
     458:	str	x0, [sp, #200]
     45c:	sub	w26, w26, w20
     460:	add	x28, x28, x21
     464:	ldr	w21, [x22, #92]
     468:	sub	w21, w21, w20
     46c:	str	w21, [x22, #92]
     470:	cbz	w21, 3ec <inflateBack+0x2ec>
     474:	cbnz	w19, 400 <inflateBack+0x300>
     478:	add	x1, sp, #0xc8
     47c:	mov	x0, x25
     480:	blr	x24
     484:	mov	w19, w0
     488:	cbnz	w0, 400 <inflateBack+0x300>
     48c:	str	xzr, [sp, #200]
     490:	mov	w0, #0xfffffffb            	// #-5
     494:	b	25c <inflateBack+0x15c>
     498:	sub	w19, w19, #0x1
     49c:	ldr	x0, [sp, #200]
     4a0:	add	x1, x0, #0x1
     4a4:	str	x1, [sp, #200]
     4a8:	ldrb	w0, [x0]
     4ac:	lsl	x0, x0, x20
     4b0:	add	x21, x21, x0
     4b4:	add	w20, w20, #0x8
     4b8:	cmp	w20, #0xd
     4bc:	b.hi	1b8 <inflateBack+0xb8>  // b.pmore
     4c0:	cbnz	w19, 498 <inflateBack+0x398>
     4c4:	add	x1, sp, #0xc8
     4c8:	mov	x0, x25
     4cc:	blr	x24
     4d0:	mov	w19, w0
     4d4:	cbnz	w0, 498 <inflateBack+0x398>
     4d8:	str	xzr, [sp, #200]
     4dc:	mov	w0, #0xfffffffb            	// #-5
     4e0:	b	25c <inflateBack+0x15c>
     4e4:	str	wzr, [x22, #140]
     4e8:	cmp	w20, #0x2
     4ec:	b.hi	528 <inflateBack+0x428>  // b.pmore
     4f0:	cbnz	w19, 508 <inflateBack+0x408>
     4f4:	add	x1, sp, #0xc8
     4f8:	mov	x0, x25
     4fc:	blr	x24
     500:	mov	w19, w0
     504:	cbz	w0, 600 <inflateBack+0x500>
     508:	sub	w19, w19, #0x1
     50c:	ldr	x0, [sp, #200]
     510:	add	x1, x0, #0x1
     514:	str	x1, [sp, #200]
     518:	ldrb	w0, [x0]
     51c:	lsl	x0, x0, x20
     520:	add	x21, x21, x0
     524:	add	w20, w20, #0x8
     528:	ldr	w1, [x22, #140]
     52c:	add	w0, w1, #0x1
     530:	str	w0, [x22, #140]
     534:	ldr	x2, [sp, #120]
     538:	ldrh	w1, [x2, w1, uxtw #1]
     53c:	add	x1, x22, x1, lsl #1
     540:	and	w2, w21, #0x7
     544:	strh	w2, [x1, #152]
     548:	lsr	x21, x21, #3
     54c:	sub	w20, w20, #0x3
     550:	ldr	w1, [x22, #128]
     554:	cmp	w0, w1
     558:	b.cc	4e8 <inflateBack+0x3e8>  // b.lo, b.ul, b.last
     55c:	cmp	w0, #0x12
     560:	b.hi	59c <inflateBack+0x49c>  // b.pmore
     564:	ldr	x1, [sp, #120]
     568:	add	x2, x1, w0, uxtw #1
     56c:	mov	w1, #0x12                  	// #18
     570:	sub	w1, w1, w0
     574:	add	x0, x1, w0, uxtw
     578:	add	x1, x27, #0x882
     57c:	add	x0, x1, x0, lsl #1
     580:	ldrh	w1, [x2], #2
     584:	add	x1, x22, x1, lsl #1
     588:	strh	wzr, [x1, #152]
     58c:	cmp	x0, x2
     590:	b.ne	580 <inflateBack+0x480>  // b.any
     594:	mov	w0, #0x13                  	// #19
     598:	str	w0, [x22, #140]
     59c:	add	x0, x22, #0x558
     5a0:	str	x0, [sp, #168]
     5a4:	str	x0, [x22, #144]
     5a8:	str	x0, [x22, #104]
     5ac:	mov	w0, #0x7                   	// #7
     5b0:	str	w0, [x22, #120]
     5b4:	add	x1, x22, #0x98
     5b8:	str	x1, [sp, #144]
     5bc:	add	x3, x22, #0x90
     5c0:	str	x3, [sp, #152]
     5c4:	add	x4, x22, #0x78
     5c8:	str	x4, [sp, #176]
     5cc:	add	x0, x22, #0x318
     5d0:	str	x0, [sp, #160]
     5d4:	mov	x5, x0
     5d8:	mov	w2, #0x13                  	// #19
     5dc:	mov	w0, #0x0                   	// #0
     5e0:	bl	0 <inflate_table>
     5e4:	cbz	w0, 60c <inflateBack+0x50c>
     5e8:	adrp	x0, 0 <inflateBackInit_>
     5ec:	add	x0, x0, #0x0
     5f0:	str	x0, [x23, #48]
     5f4:	mov	w0, #0x3f51                	// #16209
     5f8:	str	w0, [x22, #8]
     5fc:	b	184 <inflateBack+0x84>
     600:	str	xzr, [sp, #200]
     604:	mov	w0, #0xfffffffb            	// #-5
     608:	b	25c <inflateBack+0x15c>
     60c:	str	wzr, [x22, #140]
     610:	ldr	w0, [x22, #132]
     614:	ldr	w1, [x22, #136]
     618:	cmn	w0, w1
     61c:	b.eq	938 <inflateBack+0x838>  // b.none
     620:	add	x0, sp, #0xc8
     624:	str	x0, [sp, #136]
     628:	b	6dc <inflateBack+0x5dc>
     62c:	sub	w19, w19, #0x1
     630:	ldr	x0, [sp, #200]
     634:	add	x1, x0, #0x1
     638:	str	x1, [sp, #200]
     63c:	ldrb	w0, [x0]
     640:	lsl	x0, x0, x20
     644:	add	x21, x21, x0
     648:	add	w20, w20, #0x8
     64c:	ldr	w0, [x22, #120]
     650:	mov	w1, #0xffffffff            	// #-1
     654:	lsl	w0, w1, w0
     658:	bic	w0, w21, w0
     65c:	ldr	x1, [x22, #104]
     660:	add	x0, x1, x0, lsl #2
     664:	ldrb	w1, [x0, #1]
     668:	str	w1, [sp, #132]
     66c:	cmp	w1, w20
     670:	b.ls	698 <inflateBack+0x598>  // b.plast
     674:	cbnz	w19, 62c <inflateBack+0x52c>
     678:	ldr	x1, [sp, #136]
     67c:	mov	x0, x25
     680:	blr	x24
     684:	mov	w19, w0
     688:	cbnz	w0, 62c <inflateBack+0x52c>
     68c:	str	xzr, [sp, #200]
     690:	mov	w0, #0xfffffffb            	// #-5
     694:	b	25c <inflateBack+0x15c>
     698:	ldrh	w0, [x0, #2]
     69c:	cmp	w0, #0xf
     6a0:	b.hi	70c <inflateBack+0x60c>  // b.pmore
     6a4:	lsr	x21, x21, x1
     6a8:	ldr	w1, [sp, #132]
     6ac:	sub	w20, w20, w1
     6b0:	ldr	w1, [x22, #140]
     6b4:	add	w2, w1, #0x1
     6b8:	str	w2, [x22, #140]
     6bc:	add	x1, x22, w1, uxtw #1
     6c0:	strh	w0, [x1, #152]
     6c4:	ldr	w0, [x22, #132]
     6c8:	ldr	w1, [x22, #136]
     6cc:	add	w0, w0, w1
     6d0:	ldr	w1, [x22, #140]
     6d4:	cmp	w1, w0
     6d8:	b.cs	938 <inflateBack+0x838>  // b.hs, b.nlast
     6dc:	ldr	w0, [x22, #120]
     6e0:	mov	w1, #0xffffffff            	// #-1
     6e4:	lsl	w0, w1, w0
     6e8:	bic	w0, w21, w0
     6ec:	ldr	x1, [x22, #104]
     6f0:	add	x0, x1, x0, lsl #2
     6f4:	ldrb	w1, [x0, #1]
     6f8:	str	w1, [sp, #132]
     6fc:	cmp	w1, w20
     700:	b.hi	674 <inflateBack+0x574>  // b.pmore
     704:	ldrh	w0, [x0, #2]
     708:	b	69c <inflateBack+0x59c>
     70c:	cmp	w0, #0x10
     710:	b.eq	78c <inflateBack+0x68c>  // b.none
     714:	cmp	w0, #0x11
     718:	b.eq	840 <inflateBack+0x740>  // b.none
     71c:	str	w1, [sp, #184]
     720:	add	w0, w1, #0x7
     724:	str	w0, [sp, #188]
     728:	cmp	w0, w20
     72c:	b.hi	8fc <inflateBack+0x7fc>  // b.pmore
     730:	ldrb	w0, [sp, #184]
     734:	lsr	x21, x21, x0
     738:	and	w0, w21, #0x7f
     73c:	add	w0, w0, #0xb
     740:	lsr	x21, x21, #7
     744:	ldr	w1, [sp, #132]
     748:	sub	w20, w20, w1
     74c:	sub	w20, w20, #0x7
     750:	mov	w3, #0x0                   	// #0
     754:	ldr	w1, [x22, #140]
     758:	add	w0, w1, w0
     75c:	ldr	w2, [x22, #132]
     760:	ldr	w4, [x22, #136]
     764:	add	w2, w2, w4
     768:	cmp	w0, w2
     76c:	b.hi	920 <inflateBack+0x820>  // b.pmore
     770:	add	x2, x22, w1, uxtw #1
     774:	strh	w3, [x2, #152]
     778:	add	w1, w1, #0x1
     77c:	cmp	w0, w1
     780:	b.ne	770 <inflateBack+0x670>  // b.any
     784:	str	w0, [x22, #140]
     788:	b	6c4 <inflateBack+0x5c4>
     78c:	str	w1, [sp, #184]
     790:	add	w0, w1, #0x2
     794:	str	w0, [sp, #188]
     798:	cmp	w0, w20
     79c:	b.hi	804 <inflateBack+0x704>  // b.pmore
     7a0:	ldrb	w0, [sp, #184]
     7a4:	lsr	x21, x21, x0
     7a8:	ldr	w0, [sp, #132]
     7ac:	sub	w20, w20, w0
     7b0:	ldr	w0, [x22, #140]
     7b4:	cbz	w0, 828 <inflateBack+0x728>
     7b8:	sub	w0, w0, #0x1
     7bc:	add	x0, x22, x0, lsl #1
     7c0:	ldrh	w3, [x0, #152]
     7c4:	and	w0, w21, #0x3
     7c8:	add	w0, w0, #0x3
     7cc:	lsr	x21, x21, #2
     7d0:	sub	w20, w20, #0x2
     7d4:	b	754 <inflateBack+0x654>
     7d8:	sub	w19, w19, #0x1
     7dc:	ldr	x0, [sp, #200]
     7e0:	add	x1, x0, #0x1
     7e4:	str	x1, [sp, #200]
     7e8:	ldrb	w0, [x0]
     7ec:	lsl	x0, x0, x20
     7f0:	add	x21, x21, x0
     7f4:	add	w20, w20, #0x8
     7f8:	ldr	w0, [sp, #188]
     7fc:	cmp	w20, w0
     800:	b.cs	7a0 <inflateBack+0x6a0>  // b.hs, b.nlast
     804:	cbnz	w19, 7d8 <inflateBack+0x6d8>
     808:	ldr	x1, [sp, #136]
     80c:	mov	x0, x25
     810:	blr	x24
     814:	mov	w19, w0
     818:	cbnz	w0, 7d8 <inflateBack+0x6d8>
     81c:	str	xzr, [sp, #200]
     820:	mov	w0, #0xfffffffb            	// #-5
     824:	b	25c <inflateBack+0x15c>
     828:	adrp	x0, 0 <inflateBackInit_>
     82c:	add	x0, x0, #0x0
     830:	str	x0, [x23, #48]
     834:	mov	w0, #0x3f51                	// #16209
     838:	str	w0, [x22, #8]
     83c:	b	184 <inflateBack+0x84>
     840:	str	w1, [sp, #184]
     844:	add	w0, w1, #0x3
     848:	str	w0, [sp, #188]
     84c:	cmp	w0, w20
     850:	b.hi	8ac <inflateBack+0x7ac>  // b.pmore
     854:	ldrb	w0, [sp, #184]
     858:	lsr	x21, x21, x0
     85c:	and	w0, w21, #0x7
     860:	add	w0, w0, #0x3
     864:	lsr	x21, x21, #3
     868:	mov	w1, #0xfffffffd            	// #-3
     86c:	ldr	w2, [sp, #132]
     870:	sub	w1, w1, w2
     874:	add	w20, w20, w1
     878:	mov	w3, #0x0                   	// #0
     87c:	b	754 <inflateBack+0x654>
     880:	sub	w19, w19, #0x1
     884:	ldr	x0, [sp, #200]
     888:	add	x1, x0, #0x1
     88c:	str	x1, [sp, #200]
     890:	ldrb	w0, [x0]
     894:	lsl	x0, x0, x20
     898:	add	x21, x21, x0
     89c:	add	w20, w20, #0x8
     8a0:	ldr	w0, [sp, #188]
     8a4:	cmp	w20, w0
     8a8:	b.cs	854 <inflateBack+0x754>  // b.hs, b.nlast
     8ac:	cbnz	w19, 880 <inflateBack+0x780>
     8b0:	ldr	x1, [sp, #136]
     8b4:	mov	x0, x25
     8b8:	blr	x24
     8bc:	mov	w19, w0
     8c0:	cbnz	w0, 880 <inflateBack+0x780>
     8c4:	str	xzr, [sp, #200]
     8c8:	mov	w0, #0xfffffffb            	// #-5
     8cc:	b	25c <inflateBack+0x15c>
     8d0:	sub	w19, w19, #0x1
     8d4:	ldr	x0, [sp, #200]
     8d8:	add	x1, x0, #0x1
     8dc:	str	x1, [sp, #200]
     8e0:	ldrb	w0, [x0]
     8e4:	lsl	x0, x0, x20
     8e8:	add	x21, x21, x0
     8ec:	add	w20, w20, #0x8
     8f0:	ldr	w0, [sp, #188]
     8f4:	cmp	w20, w0
     8f8:	b.cs	730 <inflateBack+0x630>  // b.hs, b.nlast
     8fc:	cbnz	w19, 8d0 <inflateBack+0x7d0>
     900:	ldr	x1, [sp, #136]
     904:	mov	x0, x25
     908:	blr	x24
     90c:	mov	w19, w0
     910:	cbnz	w0, 8d0 <inflateBack+0x7d0>
     914:	str	xzr, [sp, #200]
     918:	mov	w0, #0xfffffffb            	// #-5
     91c:	b	25c <inflateBack+0x15c>
     920:	adrp	x0, 0 <inflateBackInit_>
     924:	add	x0, x0, #0x0
     928:	str	x0, [x23, #48]
     92c:	mov	w0, #0x3f51                	// #16209
     930:	str	w0, [x22, #8]
     934:	b	184 <inflateBack+0x84>
     938:	ldr	w1, [x22, #8]
     93c:	mov	w0, #0x3f51                	// #16209
     940:	cmp	w1, w0
     944:	b.eq	184 <inflateBack+0x84>  // b.none
     948:	ldrh	w0, [x22, #664]
     94c:	cbnz	w0, 968 <inflateBack+0x868>
     950:	adrp	x0, 0 <inflateBackInit_>
     954:	add	x0, x0, #0x0
     958:	str	x0, [x23, #48]
     95c:	mov	w0, #0x3f51                	// #16209
     960:	str	w0, [x22, #8]
     964:	b	184 <inflateBack+0x84>
     968:	ldr	x0, [sp, #168]
     96c:	str	x0, [x22, #144]
     970:	str	x0, [x22, #104]
     974:	mov	w0, #0x9                   	// #9
     978:	str	w0, [x22, #120]
     97c:	ldr	x5, [sp, #160]
     980:	ldr	x4, [sp, #176]
     984:	ldr	x3, [sp, #152]
     988:	ldr	w2, [x22, #132]
     98c:	ldr	x1, [sp, #144]
     990:	mov	w0, #0x1                   	// #1
     994:	bl	0 <inflate_table>
     998:	cbz	w0, 9b4 <inflateBack+0x8b4>
     99c:	adrp	x0, 0 <inflateBackInit_>
     9a0:	add	x0, x0, #0x0
     9a4:	str	x0, [x23, #48]
     9a8:	mov	w0, #0x3f51                	// #16209
     9ac:	str	w0, [x22, #8]
     9b0:	b	184 <inflateBack+0x84>
     9b4:	ldr	x0, [x22, #144]
     9b8:	str	x0, [x22, #112]
     9bc:	mov	x4, x22
     9c0:	mov	w0, #0x6                   	// #6
     9c4:	str	w0, [x4, #124]!
     9c8:	ldr	w1, [x22, #132]
     9cc:	ldr	x5, [sp, #160]
     9d0:	ldr	x3, [sp, #152]
     9d4:	ldr	w2, [x22, #136]
     9d8:	ldr	x0, [sp, #144]
     9dc:	add	x1, x0, x1, lsl #1
     9e0:	mov	w0, #0x2                   	// #2
     9e4:	bl	0 <inflate_table>
     9e8:	cbz	w0, a04 <inflateBack+0x904>
     9ec:	adrp	x0, 0 <inflateBackInit_>
     9f0:	add	x0, x0, #0x0
     9f4:	str	x0, [x23, #48]
     9f8:	mov	w0, #0x3f51                	// #16209
     9fc:	str	w0, [x22, #8]
     a00:	b	184 <inflateBack+0x84>
     a04:	mov	w0, #0x3f48                	// #16200
     a08:	str	w0, [x22, #8]
     a0c:	cmp	w26, #0x101
     a10:	ccmp	w19, #0x5, #0x0, hi  // hi = pmore
     a14:	b.ls	a74 <inflateBack+0x974>  // b.plast
     a18:	str	x28, [x23, #24]
     a1c:	str	w26, [x23, #32]
     a20:	ldr	x0, [sp, #200]
     a24:	str	x0, [x23]
     a28:	str	w19, [x23, #8]
     a2c:	str	x21, [x22, #80]
     a30:	str	w20, [x22, #88]
     a34:	ldr	w1, [x22, #60]
     a38:	ldr	w0, [x22, #64]
     a3c:	cmp	w0, w1
     a40:	b.cs	a4c <inflateBack+0x94c>  // b.hs, b.nlast
     a44:	sub	w26, w1, w26
     a48:	str	w26, [x22, #64]
     a4c:	mov	x0, x23
     a50:	bl	0 <inflate_fast>
     a54:	ldr	x28, [x23, #24]
     a58:	ldr	w26, [x23, #32]
     a5c:	ldr	x0, [x23]
     a60:	str	x0, [sp, #200]
     a64:	ldr	w19, [x23, #8]
     a68:	ldr	x21, [x22, #80]
     a6c:	ldr	w20, [x22, #88]
     a70:	b	184 <inflateBack+0x84>
     a74:	ldr	w1, [x22, #120]
     a78:	mov	w0, #0xffffffff            	// #-1
     a7c:	lsl	w0, w0, w1
     a80:	bic	w0, w21, w0
     a84:	lsl	x0, x0, #2
     a88:	ldr	x2, [x22, #104]
     a8c:	add	x3, x2, x0
     a90:	ldrb	w1, [x3, #1]
     a94:	str	w1, [sp, #132]
     a98:	cmp	w20, w1
     a9c:	b.cc	af4 <inflateBack+0x9f4>  // b.lo, b.ul, b.last
     aa0:	ldrb	w2, [x2, x0]
     aa4:	ldrh	w0, [x3, #2]
     aa8:	b	b20 <inflateBack+0xa20>
     aac:	sub	w19, w19, #0x1
     ab0:	ldr	x0, [sp, #200]
     ab4:	add	x1, x0, #0x1
     ab8:	str	x1, [sp, #200]
     abc:	ldrb	w0, [x0]
     ac0:	lsl	x0, x0, x20
     ac4:	add	x21, x21, x0
     ac8:	add	w20, w20, #0x8
     acc:	ldr	w0, [x22, #120]
     ad0:	mov	w1, #0xffffffff            	// #-1
     ad4:	lsl	w0, w1, w0
     ad8:	bic	w0, w21, w0
     adc:	ldr	x1, [x22, #104]
     ae0:	add	x0, x1, x0, lsl #2
     ae4:	ldrb	w1, [x0, #1]
     ae8:	str	w1, [sp, #132]
     aec:	cmp	w1, w20
     af0:	b.ls	b18 <inflateBack+0xa18>  // b.plast
     af4:	cbnz	w19, aac <inflateBack+0x9ac>
     af8:	add	x1, sp, #0xc8
     afc:	mov	x0, x25
     b00:	blr	x24
     b04:	mov	w19, w0
     b08:	cbnz	w0, aac <inflateBack+0x9ac>
     b0c:	str	xzr, [sp, #200]
     b10:	mov	w0, #0xfffffffb            	// #-5
     b14:	b	25c <inflateBack+0x15c>
     b18:	ldrb	w2, [x0]
     b1c:	ldrh	w0, [x0, #2]
     b20:	cbz	w2, 1058 <inflateBack+0xf58>
     b24:	tst	w2, #0xf0
     b28:	b.eq	b48 <inflateBack+0xa48>  // b.none
     b2c:	lsr	x21, x21, x1
     b30:	sub	w20, w20, w1
     b34:	str	w0, [x22, #92]
     b38:	tbz	w2, #5, c38 <inflateBack+0xb38>
     b3c:	mov	w0, #0x3f3f                	// #16191
     b40:	str	w0, [x22, #8]
     b44:	b	184 <inflateBack+0x84>
     b48:	str	w0, [sp, #144]
     b4c:	str	w1, [sp, #136]
     b50:	add	w2, w2, w1
     b54:	mov	w3, #0xffffffff            	// #-1
     b58:	lsl	w2, w3, w2
     b5c:	mvn	w3, w2
     b60:	str	w3, [sp, #152]
     b64:	bic	w2, w21, w2
     b68:	lsr	w2, w2, w1
     b6c:	add	w0, w2, w0
     b70:	lsl	x0, x0, #2
     b74:	ldr	x2, [x22, #104]
     b78:	add	x4, x2, x0
     b7c:	ldrb	w3, [x4, #1]
     b80:	add	w1, w3, w1
     b84:	cmp	w1, w20
     b88:	b.hi	be8 <inflateBack+0xae8>  // b.pmore
     b8c:	ldrb	w2, [x2, x0]
     b90:	ldrh	w0, [x4, #2]
     b94:	b	c14 <inflateBack+0xb14>
     b98:	sub	w19, w19, #0x1
     b9c:	ldr	x0, [sp, #200]
     ba0:	add	x1, x0, #0x1
     ba4:	str	x1, [sp, #200]
     ba8:	ldrb	w0, [x0]
     bac:	lsl	x0, x0, x20
     bb0:	add	x21, x21, x0
     bb4:	add	w20, w20, #0x8
     bb8:	ldr	w0, [sp, #152]
     bbc:	and	w0, w0, w21
     bc0:	ldr	w2, [sp, #136]
     bc4:	lsr	w0, w0, w2
     bc8:	ldr	w1, [sp, #144]
     bcc:	add	w0, w0, w1
     bd0:	ldr	x1, [x22, #104]
     bd4:	add	x0, x1, x0, lsl #2
     bd8:	ldrb	w3, [x0, #1]
     bdc:	add	w1, w3, w2
     be0:	cmp	w1, w20
     be4:	b.ls	c0c <inflateBack+0xb0c>  // b.plast
     be8:	cbnz	w19, b98 <inflateBack+0xa98>
     bec:	add	x1, sp, #0xc8
     bf0:	mov	x0, x25
     bf4:	blr	x24
     bf8:	mov	w19, w0
     bfc:	cbnz	w0, b98 <inflateBack+0xa98>
     c00:	str	xzr, [sp, #200]
     c04:	mov	w0, #0xfffffffb            	// #-5
     c08:	b	25c <inflateBack+0x15c>
     c0c:	ldrb	w2, [x0]
     c10:	ldrh	w0, [x0, #2]
     c14:	ldrb	w1, [sp, #136]
     c18:	lsr	x21, x21, x1
     c1c:	ldr	w1, [sp, #132]
     c20:	sub	w20, w20, w1
     c24:	lsr	x21, x21, x3
     c28:	sub	w20, w20, w3
     c2c:	str	w0, [x22, #92]
     c30:	cbnz	w2, b38 <inflateBack+0xa38>
     c34:	b	1064 <inflateBack+0xf64>
     c38:	tbz	w2, #6, c54 <inflateBack+0xb54>
     c3c:	adrp	x0, 0 <inflateBackInit_>
     c40:	add	x0, x0, #0x0
     c44:	str	x0, [x23, #48]
     c48:	mov	w0, #0x3f51                	// #16209
     c4c:	str	w0, [x22, #8]
     c50:	b	184 <inflateBack+0x84>
     c54:	and	w2, w2, #0xf
     c58:	str	w2, [x22, #100]
     c5c:	cbz	w2, c88 <inflateBack+0xb88>
     c60:	cmp	w2, w20
     c64:	b.hi	cec <inflateBack+0xbec>  // b.pmore
     c68:	mov	w0, #0xffffffff            	// #-1
     c6c:	lsl	w0, w0, w2
     c70:	bic	w0, w21, w0
     c74:	ldr	w1, [x22, #92]
     c78:	add	w0, w1, w0
     c7c:	str	w0, [x22, #92]
     c80:	lsr	x21, x21, x2
     c84:	sub	w20, w20, w2
     c88:	ldr	w1, [x22, #124]
     c8c:	mov	w0, #0xffffffff            	// #-1
     c90:	lsl	w0, w0, w1
     c94:	bic	w0, w21, w0
     c98:	lsl	x0, x0, #2
     c9c:	ldr	x2, [x22, #112]
     ca0:	add	x3, x2, x0
     ca4:	ldrb	w1, [x3, #1]
     ca8:	str	w1, [sp, #132]
     cac:	cmp	w20, w1
     cb0:	b.cc	d58 <inflateBack+0xc58>  // b.lo, b.ul, b.last
     cb4:	ldrb	w2, [x2, x0]
     cb8:	ldrh	w3, [x3, #2]
     cbc:	b	d84 <inflateBack+0xc84>
     cc0:	sub	w19, w19, #0x1
     cc4:	ldr	x0, [sp, #200]
     cc8:	add	x1, x0, #0x1
     ccc:	str	x1, [sp, #200]
     cd0:	ldrb	w0, [x0]
     cd4:	lsl	x0, x0, x20
     cd8:	add	x21, x21, x0
     cdc:	add	w20, w20, #0x8
     ce0:	ldr	w2, [x22, #100]
     ce4:	cmp	w2, w20
     ce8:	b.ls	c68 <inflateBack+0xb68>  // b.plast
     cec:	cbnz	w19, cc0 <inflateBack+0xbc0>
     cf0:	add	x1, sp, #0xc8
     cf4:	mov	x0, x25
     cf8:	blr	x24
     cfc:	mov	w19, w0
     d00:	cbnz	w0, cc0 <inflateBack+0xbc0>
     d04:	str	xzr, [sp, #200]
     d08:	mov	w0, #0xfffffffb            	// #-5
     d0c:	b	25c <inflateBack+0x15c>
     d10:	sub	w19, w19, #0x1
     d14:	ldr	x0, [sp, #200]
     d18:	add	x1, x0, #0x1
     d1c:	str	x1, [sp, #200]
     d20:	ldrb	w0, [x0]
     d24:	lsl	x0, x0, x20
     d28:	add	x21, x21, x0
     d2c:	add	w20, w20, #0x8
     d30:	ldr	w0, [x22, #124]
     d34:	mov	w1, #0xffffffff            	// #-1
     d38:	lsl	w0, w1, w0
     d3c:	bic	w0, w21, w0
     d40:	ldr	x1, [x22, #112]
     d44:	add	x0, x1, x0, lsl #2
     d48:	ldrb	w1, [x0, #1]
     d4c:	str	w1, [sp, #132]
     d50:	cmp	w1, w20
     d54:	b.ls	d7c <inflateBack+0xc7c>  // b.plast
     d58:	cbnz	w19, d10 <inflateBack+0xc10>
     d5c:	add	x1, sp, #0xc8
     d60:	mov	x0, x25
     d64:	blr	x24
     d68:	mov	w19, w0
     d6c:	cbnz	w0, d10 <inflateBack+0xc10>
     d70:	str	xzr, [sp, #200]
     d74:	mov	w0, #0xfffffffb            	// #-5
     d78:	b	25c <inflateBack+0x15c>
     d7c:	ldrb	w2, [x0]
     d80:	ldrh	w3, [x0, #2]
     d84:	tst	w2, #0xf0
     d88:	b.eq	db0 <inflateBack+0xcb0>  // b.none
     d8c:	lsr	x21, x21, x1
     d90:	sub	w20, w20, w1
     d94:	tbz	w2, #6, e94 <inflateBack+0xd94>
     d98:	adrp	x0, 0 <inflateBackInit_>
     d9c:	add	x0, x0, #0x0
     da0:	str	x0, [x23, #48]
     da4:	mov	w0, #0x3f51                	// #16209
     da8:	str	w0, [x22, #8]
     dac:	b	184 <inflateBack+0x84>
     db0:	str	w3, [sp, #144]
     db4:	mov	w4, w1
     db8:	str	w1, [sp, #136]
     dbc:	add	w0, w2, w1
     dc0:	mov	w2, #0xffffffff            	// #-1
     dc4:	lsl	w0, w2, w0
     dc8:	mvn	w2, w0
     dcc:	str	w2, [sp, #152]
     dd0:	bic	w0, w21, w0
     dd4:	lsr	w0, w0, w1
     dd8:	add	w0, w0, w3
     ddc:	lsl	x3, x0, #2
     de0:	ldr	x2, [x22, #112]
     de4:	add	x0, x2, x0, lsl #2
     de8:	ldrb	w1, [x0, #1]
     dec:	add	w4, w1, w4
     df0:	cmp	w4, w20
     df4:	b.hi	e54 <inflateBack+0xd54>  // b.pmore
     df8:	ldrb	w2, [x2, x3]
     dfc:	ldrh	w3, [x0, #2]
     e00:	b	e80 <inflateBack+0xd80>
     e04:	sub	w19, w19, #0x1
     e08:	ldr	x0, [sp, #200]
     e0c:	add	x1, x0, #0x1
     e10:	str	x1, [sp, #200]
     e14:	ldrb	w0, [x0]
     e18:	lsl	x0, x0, x20
     e1c:	add	x21, x21, x0
     e20:	add	w20, w20, #0x8
     e24:	ldr	w0, [sp, #152]
     e28:	and	w0, w0, w21
     e2c:	ldr	w2, [sp, #136]
     e30:	lsr	w0, w0, w2
     e34:	ldr	w1, [sp, #144]
     e38:	add	w0, w0, w1
     e3c:	ldr	x1, [x22, #112]
     e40:	add	x0, x1, x0, lsl #2
     e44:	ldrb	w1, [x0, #1]
     e48:	add	w2, w1, w2
     e4c:	cmp	w2, w20
     e50:	b.ls	e78 <inflateBack+0xd78>  // b.plast
     e54:	cbnz	w19, e04 <inflateBack+0xd04>
     e58:	add	x1, sp, #0xc8
     e5c:	mov	x0, x25
     e60:	blr	x24
     e64:	mov	w19, w0
     e68:	cbnz	w0, e04 <inflateBack+0xd04>
     e6c:	str	xzr, [sp, #200]
     e70:	mov	w0, #0xfffffffb            	// #-5
     e74:	b	25c <inflateBack+0x15c>
     e78:	ldrb	w2, [x0]
     e7c:	ldrh	w3, [x0, #2]
     e80:	ldrb	w0, [sp, #136]
     e84:	lsr	x21, x21, x0
     e88:	ldr	w0, [sp, #132]
     e8c:	sub	w20, w20, w0
     e90:	b	d8c <inflateBack+0xc8c>
     e94:	str	w3, [x22, #96]
     e98:	and	w0, w2, #0xf
     e9c:	str	w0, [x22, #100]
     ea0:	cbnz	w0, edc <inflateBack+0xddc>
     ea4:	ldr	w1, [x22, #96]
     ea8:	ldr	w0, [x22, #60]
     eac:	ldr	w2, [x22, #64]
     eb0:	cmp	w0, w2
     eb4:	csel	w2, w26, wzr, hi  // hi = pmore
     eb8:	sub	w0, w0, w2
     ebc:	cmp	w1, w0
     ec0:	b.ls	fbc <inflateBack+0xebc>  // b.plast
     ec4:	adrp	x0, 0 <inflateBackInit_>
     ec8:	add	x0, x0, #0x0
     ecc:	str	x0, [x23, #48]
     ed0:	mov	w0, #0x3f51                	// #16209
     ed4:	str	w0, [x22, #8]
     ed8:	b	184 <inflateBack+0x84>
     edc:	cmp	w0, w20
     ee0:	b.hi	f34 <inflateBack+0xe34>  // b.pmore
     ee4:	mov	w1, #0xffffffff            	// #-1
     ee8:	lsl	w1, w1, w0
     eec:	bic	w1, w21, w1
     ef0:	ldr	w2, [x22, #96]
     ef4:	add	w1, w2, w1
     ef8:	str	w1, [x22, #96]
     efc:	lsr	x21, x21, x0
     f00:	sub	w20, w20, w0
     f04:	b	ea4 <inflateBack+0xda4>
     f08:	sub	w19, w19, #0x1
     f0c:	ldr	x0, [sp, #200]
     f10:	add	x1, x0, #0x1
     f14:	str	x1, [sp, #200]
     f18:	ldrb	w0, [x0]
     f1c:	lsl	x0, x0, x20
     f20:	add	x21, x21, x0
     f24:	add	w20, w20, #0x8
     f28:	ldr	w0, [x22, #100]
     f2c:	cmp	w0, w20
     f30:	b.ls	ee4 <inflateBack+0xde4>  // b.plast
     f34:	cbnz	w19, f08 <inflateBack+0xe08>
     f38:	add	x1, sp, #0xc8
     f3c:	mov	x0, x25
     f40:	blr	x24
     f44:	mov	w19, w0
     f48:	cbnz	w0, f08 <inflateBack+0xe08>
     f4c:	str	xzr, [sp, #200]
     f50:	mov	w0, #0xfffffffb            	// #-5
     f54:	b	25c <inflateBack+0x15c>
     f58:	ldr	w2, [x22, #60]
     f5c:	ldr	w0, [x22, #96]
     f60:	sub	w3, w2, w0
     f64:	cmp	w26, w3
     f68:	b.ls	fec <inflateBack+0xeec>  // b.plast
     f6c:	add	x3, x28, w3, uxtw
     f70:	sub	w2, w0, w2
     f74:	add	w2, w2, w26
     f78:	ldr	w0, [x22, #92]
     f7c:	cmp	w0, w2
     f80:	csel	w2, w0, w2, ls  // ls = plast
     f84:	sub	w0, w0, w2
     f88:	str	w0, [x22, #92]
     f8c:	sub	w26, w26, w2
     f90:	sub	w2, w2, #0x1
     f94:	add	x4, x2, #0x1
     f98:	mov	x0, #0x0                   	// #0
     f9c:	ldrb	w1, [x3, x0]
     fa0:	strb	w1, [x28, x0]
     fa4:	cmp	x2, x0
     fa8:	add	x0, x0, #0x1
     fac:	b.ne	f9c <inflateBack+0xe9c>  // b.any
     fb0:	add	x28, x28, x4
     fb4:	ldr	w0, [x22, #92]
     fb8:	cbz	w0, 184 <inflateBack+0x84>
     fbc:	cbnz	w26, f58 <inflateBack+0xe58>
     fc0:	ldr	x28, [x22, #72]
     fc4:	ldr	w26, [x22, #60]
     fc8:	str	w26, [x22, #64]
     fcc:	mov	w2, w26
     fd0:	mov	x1, x28
     fd4:	ldr	x0, [sp, #112]
     fd8:	ldr	x3, [sp, #104]
     fdc:	blr	x3
     fe0:	cbz	w0, f58 <inflateBack+0xe58>
     fe4:	mov	w0, #0xfffffffb            	// #-5
     fe8:	b	25c <inflateBack+0x15c>
     fec:	sub	x3, x28, w0, uxtw
     ff0:	mov	w2, w26
     ff4:	b	f78 <inflateBack+0xe78>
     ff8:	ldr	w2, [x22, #60]
     ffc:	mov	w0, #0x1                   	// #1
    1000:	cmp	w2, w26
    1004:	b.ls	25c <inflateBack+0x15c>  // b.plast
    1008:	sub	w2, w2, w26
    100c:	ldr	x1, [x22, #72]
    1010:	ldr	x0, [sp, #112]
    1014:	ldr	x3, [sp, #104]
    1018:	blr	x3
    101c:	cmp	w0, #0x0
    1020:	mov	w0, #0xfffffffb            	// #-5
    1024:	csinc	w0, w0, wzr, ne  // ne = any
    1028:	b	25c <inflateBack+0x15c>
    102c:	mov	w0, #0xfffffffb            	// #-5
    1030:	b	25c <inflateBack+0x15c>
    1034:	mov	w0, #0xfffffffb            	// #-5
    1038:	b	25c <inflateBack+0x15c>
    103c:	mov	w0, #0xfffffffe            	// #-2
    1040:	b	27c <inflateBack+0x17c>
    1044:	mov	w0, #0xfffffffe            	// #-2
    1048:	ldp	x21, x22, [sp, #32]
    104c:	ldp	x23, x24, [sp, #48]
    1050:	ldp	x25, x26, [sp, #64]
    1054:	b	27c <inflateBack+0x17c>
    1058:	lsr	x21, x21, x1
    105c:	sub	w20, w20, w1
    1060:	str	w0, [x22, #92]
    1064:	cbnz	w26, 108c <inflateBack+0xf8c>
    1068:	ldr	x28, [x22, #72]
    106c:	ldr	w26, [x22, #60]
    1070:	str	w26, [x22, #64]
    1074:	mov	w2, w26
    1078:	mov	x1, x28
    107c:	ldr	x0, [sp, #112]
    1080:	ldr	x3, [sp, #104]
    1084:	blr	x3
    1088:	cbnz	w0, 1034 <inflateBack+0xf34>
    108c:	ldr	w0, [x22, #92]
    1090:	strb	w0, [x28], #1
    1094:	sub	w26, w26, #0x1
    1098:	mov	w0, #0x3f48                	// #16200
    109c:	str	w0, [x22, #8]
    10a0:	b	184 <inflateBack+0x84>

00000000000010a4 <inflateBackEnd>:
    10a4:	cbz	x0, 10e4 <inflateBackEnd+0x40>
    10a8:	stp	x29, x30, [sp, #-32]!
    10ac:	mov	x29, sp
    10b0:	str	x19, [sp, #16]
    10b4:	mov	x19, x0
    10b8:	ldr	x1, [x0, #56]
    10bc:	cbz	x1, 10ec <inflateBackEnd+0x48>
    10c0:	ldr	x2, [x0, #72]
    10c4:	cbz	x2, 10f4 <inflateBackEnd+0x50>
    10c8:	ldr	x0, [x0, #80]
    10cc:	blr	x2
    10d0:	str	xzr, [x19, #56]
    10d4:	mov	w0, #0x0                   	// #0
    10d8:	ldr	x19, [sp, #16]
    10dc:	ldp	x29, x30, [sp], #32
    10e0:	ret
    10e4:	mov	w0, #0xfffffffe            	// #-2
    10e8:	ret
    10ec:	mov	w0, #0xfffffffe            	// #-2
    10f0:	b	10d8 <inflateBackEnd+0x34>
    10f4:	mov	w0, #0xfffffffe            	// #-2
    10f8:	b	10d8 <inflateBackEnd+0x34>

inffast.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_fast>:
   0:	stp	x29, x30, [sp, #-96]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	ldr	x10, [x0, #56]
  18:	ldr	x9, [x0]
  1c:	ldr	w13, [x0, #8]
  20:	sub	w13, w13, #0x5
  24:	add	x13, x9, x13
  28:	ldr	x7, [x0, #24]
  2c:	ldr	w12, [x0, #32]
  30:	sub	w16, w1, w12
  34:	sub	x16, x7, x16
  38:	sub	w12, w12, #0x101
  3c:	add	x12, x7, x12
  40:	ldr	w18, [x10, #60]
  44:	ldr	w21, [x10, #64]
  48:	ldr	w17, [x10, #68]
  4c:	ldr	x20, [x10, #72]
  50:	ldr	x4, [x10, #80]
  54:	ldr	w5, [x10, #88]
  58:	ldr	x6, [x10, #104]
  5c:	ldr	x11, [x10, #112]
  60:	ldr	w14, [x10, #120]
  64:	mov	w15, #0x1                   	// #1
  68:	lsl	w14, w15, w14
  6c:	ldr	w1, [x10, #124]
  70:	lsl	w15, w15, w1
  74:	sub	w14, w14, #0x1
  78:	sub	w15, w15, #0x1
  7c:	mov	w19, #0xffffffff            	// #-1
  80:	add	w22, w18, w17
  84:	add	w30, w17, w19
  88:	add	x23, x30, #0x1
  8c:	mov	w8, #0x1                   	// #1
  90:	b	a4 <inflate_fast+0xa4>
  94:	strb	w24, [x7], #1
  98:	cmp	x9, x13
  9c:	ccmp	x7, x12, #0x2, cc  // cc = lo, ul, last
  a0:	b.cs	230 <inflate_fast+0x230>  // b.hs, b.nlast
  a4:	cmp	w5, #0xe
  a8:	b.hi	d0 <inflate_fast+0xd0>  // b.pmore
  ac:	ldrb	w1, [x9, #1]
  b0:	add	w2, w5, #0x8
  b4:	lsl	x1, x1, x2
  b8:	ldrb	w2, [x9]
  bc:	lsl	x2, x2, x5
  c0:	add	x1, x1, x2
  c4:	add	x4, x4, x1
  c8:	add	w5, w5, #0x10
  cc:	add	x9, x9, #0x2
  d0:	and	x1, x14, x4
  d4:	lsl	x1, x1, #2
  d8:	add	x2, x6, x1
  dc:	ldrb	w3, [x6, x1]
  e0:	ldrh	w24, [x2, #2]
  e4:	ldrb	w1, [x2, #1]
  e8:	lsr	x4, x4, x1
  ec:	sub	w5, w5, w1
  f0:	mov	w2, w3
  f4:	cbz	w3, 94 <inflate_fast+0x94>
  f8:	tbnz	w3, #4, 14c <inflate_fast+0x14c>
  fc:	tbnz	w3, #6, 13c <inflate_fast+0x13c>
 100:	lsl	w1, w8, w2
 104:	sub	w1, w1, #0x1
 108:	and	x1, x1, x4
 10c:	add	x1, x1, w24, uxth
 110:	lsl	x1, x1, #2
 114:	add	x2, x6, x1
 118:	ldrb	w3, [x6, x1]
 11c:	ldrh	w24, [x2, #2]
 120:	ldrb	w2, [x2, #1]
 124:	lsr	x4, x4, x2
 128:	sub	w5, w5, w2
 12c:	mov	w2, w3
 130:	cbz	w3, 94 <inflate_fast+0x94>
 134:	tbnz	w3, #4, 14c <inflate_fast+0x14c>
 138:	tbz	w3, #6, 100 <inflate_fast+0x100>
 13c:	tbz	w3, #5, 53c <inflate_fast+0x53c>
 140:	mov	w1, #0x3f3f                	// #16191
 144:	str	w1, [x10, #8]
 148:	b	230 <inflate_fast+0x230>
 14c:	stp	x25, x26, [sp, #64]
 150:	mov	w1, w24
 154:	ands	w3, w3, #0xf
 158:	b.eq	188 <inflate_fast+0x188>  // b.none
 15c:	cmp	w3, w5
 160:	b.ls	174 <inflate_fast+0x174>  // b.plast
 164:	ldrb	w2, [x9], #1
 168:	lsl	x2, x2, x5
 16c:	add	x4, x4, x2
 170:	add	w5, w5, #0x8
 174:	lsl	w2, w19, w3
 178:	bic	w2, w4, w2
 17c:	add	w1, w1, w2
 180:	lsr	x4, x4, x3
 184:	sub	w5, w5, w3
 188:	cmp	w5, #0xe
 18c:	b.hi	1b4 <inflate_fast+0x1b4>  // b.pmore
 190:	ldrb	w2, [x9, #1]
 194:	add	w3, w5, #0x8
 198:	lsl	x2, x2, x3
 19c:	ldrb	w3, [x9]
 1a0:	lsl	x3, x3, x5
 1a4:	add	x2, x2, x3
 1a8:	add	x4, x4, x2
 1ac:	add	w5, w5, #0x10
 1b0:	add	x9, x9, #0x2
 1b4:	and	x2, x15, x4
 1b8:	lsl	x2, x2, #2
 1bc:	add	x3, x11, x2
 1c0:	ldrb	w24, [x11, x2]
 1c4:	ldrh	w25, [x3, #2]
 1c8:	ldrb	w2, [x3, #1]
 1cc:	lsr	x4, x4, x2
 1d0:	sub	w5, w5, w2
 1d4:	mov	w3, w24
 1d8:	tbnz	w24, #4, 2a8 <inflate_fast+0x2a8>
 1dc:	tbnz	w24, #6, 218 <inflate_fast+0x218>
 1e0:	lsl	w2, w8, w3
 1e4:	sub	w2, w2, #0x1
 1e8:	and	x2, x2, x4
 1ec:	add	x2, x2, w25, uxth
 1f0:	lsl	x2, x2, #2
 1f4:	add	x3, x11, x2
 1f8:	ldrb	w24, [x11, x2]
 1fc:	ldrh	w25, [x3, #2]
 200:	ldrb	w3, [x3, #1]
 204:	lsr	x4, x4, x3
 208:	sub	w5, w5, w3
 20c:	mov	w3, w24
 210:	tbnz	w24, #4, 2a8 <inflate_fast+0x2a8>
 214:	tbz	w24, #6, 1e0 <inflate_fast+0x1e0>
 218:	adrp	x1, 0 <inflate_fast>
 21c:	add	x1, x1, #0x0
 220:	str	x1, [x0, #48]
 224:	mov	w1, #0x3f51                	// #16209
 228:	str	w1, [x10, #8]
 22c:	ldp	x25, x26, [sp, #64]
 230:	lsr	w1, w5, #3
 234:	sub	x9, x9, x1
 238:	and	w5, w5, #0x7
 23c:	mov	w1, #0x1                   	// #1
 240:	lsl	w1, w1, w5
 244:	sub	w1, w1, #0x1
 248:	and	x4, x1, x4
 24c:	str	x9, [x0]
 250:	str	x7, [x0, #24]
 254:	sub	x1, x13, x9
 258:	add	w2, w1, #0x5
 25c:	sub	w1, w13, w9
 260:	add	w1, w1, #0x5
 264:	cmp	x13, x9
 268:	csel	w1, w1, w2, ls  // ls = plast
 26c:	str	w1, [x0, #8]
 270:	sub	x1, x12, x7
 274:	add	w2, w1, #0x101
 278:	sub	w1, w12, w7
 27c:	add	w1, w1, #0x101
 280:	cmp	x7, x12
 284:	csel	w1, w1, w2, cs  // cs = hs, nlast
 288:	str	w1, [x0, #32]
 28c:	str	x4, [x10, #80]
 290:	str	w5, [x10, #88]
 294:	ldp	x19, x20, [sp, #16]
 298:	ldp	x21, x22, [sp, #32]
 29c:	ldp	x23, x24, [sp, #48]
 2a0:	ldp	x29, x30, [sp], #96
 2a4:	ret
 2a8:	mov	w2, w25
 2ac:	and	w24, w24, #0xf
 2b0:	cmp	w24, w5
 2b4:	b.ls	2d8 <inflate_fast+0x2d8>  // b.plast
 2b8:	ldrb	w3, [x9]
 2bc:	lsl	x3, x3, x5
 2c0:	add	x4, x4, x3
 2c4:	add	w3, w5, #0x8
 2c8:	cmp	w24, w3
 2cc:	b.hi	380 <inflate_fast+0x380>  // b.pmore
 2d0:	add	x9, x9, #0x1
 2d4:	mov	w5, w3
 2d8:	lsl	w3, w19, w24
 2dc:	bic	w3, w4, w3
 2e0:	add	w2, w3, w2
 2e4:	lsr	x4, x4, x24
 2e8:	sub	w5, w5, w24
 2ec:	sub	x3, x7, x16
 2f0:	cmp	w2, w3
 2f4:	b.ls	4d4 <inflate_fast+0x4d4>  // b.plast
 2f8:	sub	w25, w2, w3
 2fc:	cmp	w21, w25
 300:	b.cs	30c <inflate_fast+0x30c>  // b.hs, b.nlast
 304:	ldr	w24, [x10, #7144]
 308:	cbnz	w24, 398 <inflate_fast+0x398>
 30c:	cbnz	w17, 3ec <inflate_fast+0x3ec>
 310:	sub	w24, w3, w2
 314:	add	w3, w24, w18
 318:	add	x3, x20, x3
 31c:	cmp	w1, w25
 320:	b.hi	3b4 <inflate_fast+0x3b4>  // b.pmore
 324:	cmp	w1, #0x2
 328:	b.ls	358 <inflate_fast+0x358>  // b.plast
 32c:	ldrb	w2, [x3]
 330:	strb	w2, [x7]
 334:	ldrb	w2, [x3, #1]
 338:	strb	w2, [x7, #1]
 33c:	add	x3, x3, #0x3
 340:	add	x7, x7, #0x3
 344:	ldurb	w2, [x3, #-1]
 348:	sturb	w2, [x7, #-1]
 34c:	sub	w1, w1, #0x3
 350:	cmp	w1, #0x2
 354:	b.hi	32c <inflate_fast+0x32c>  // b.pmore
 358:	cbz	w1, 554 <inflate_fast+0x554>
 35c:	ldrb	w2, [x3]
 360:	strb	w2, [x7]
 364:	cmp	w1, #0x1
 368:	b.ls	4c8 <inflate_fast+0x4c8>  // b.plast
 36c:	ldrb	w1, [x3, #1]
 370:	strb	w1, [x7, #1]
 374:	add	x7, x7, #0x2
 378:	ldp	x25, x26, [sp, #64]
 37c:	b	98 <inflate_fast+0x98>
 380:	ldrb	w25, [x9, #1]
 384:	lsl	x3, x25, x3
 388:	add	x4, x4, x3
 38c:	add	w5, w5, #0x10
 390:	add	x9, x9, #0x2
 394:	b	2d8 <inflate_fast+0x2d8>
 398:	adrp	x1, 0 <inflate_fast>
 39c:	add	x1, x1, #0x0
 3a0:	str	x1, [x0, #48]
 3a4:	mov	w1, #0x3f51                	// #16209
 3a8:	str	w1, [x10, #8]
 3ac:	ldp	x25, x26, [sp, #64]
 3b0:	b	230 <inflate_fast+0x230>
 3b4:	str	x27, [sp, #80]
 3b8:	add	w1, w1, w24
 3bc:	sub	w26, w25, #0x1
 3c0:	add	x27, x26, #0x1
 3c4:	mov	x24, #0x0                   	// #0
 3c8:	ldrb	w25, [x3, x24]
 3cc:	strb	w25, [x7, x24]
 3d0:	cmp	x24, x26
 3d4:	add	x24, x24, #0x1
 3d8:	b.ne	3c8 <inflate_fast+0x3c8>  // b.any
 3dc:	add	x7, x7, x27
 3e0:	sub	x3, x7, w2, uxtw
 3e4:	ldr	x27, [sp, #80]
 3e8:	b	324 <inflate_fast+0x324>
 3ec:	cmp	w17, w25
 3f0:	b.cs	47c <inflate_fast+0x47c>  // b.hs, b.nlast
 3f4:	sub	w24, w3, w2
 3f8:	add	w3, w22, w24
 3fc:	add	x3, x20, x3
 400:	sub	w25, w25, w17
 404:	cmp	w1, w25
 408:	b.ls	324 <inflate_fast+0x324>  // b.plast
 40c:	str	x27, [sp, #80]
 410:	add	w1, w1, w17
 414:	add	w1, w24, w1
 418:	sub	w24, w25, #0x1
 41c:	add	x27, x24, #0x1
 420:	mov	x25, #0x0                   	// #0
 424:	ldrb	w26, [x3, x25]
 428:	strb	w26, [x7, x25]
 42c:	cmp	x25, x24
 430:	add	x25, x25, #0x1
 434:	b.ne	424 <inflate_fast+0x424>  // b.any
 438:	add	x7, x7, x27
 43c:	mov	x3, x20
 440:	cmp	w17, w1
 444:	b.cc	450 <inflate_fast+0x450>  // b.lo, b.ul, b.last
 448:	ldr	x27, [sp, #80]
 44c:	b	324 <inflate_fast+0x324>
 450:	sub	w1, w1, w17
 454:	mov	x3, #0x0                   	// #0
 458:	ldrb	w24, [x20, x3]
 45c:	strb	w24, [x7, x3]
 460:	cmp	x3, x30
 464:	add	x3, x3, #0x1
 468:	b.ne	458 <inflate_fast+0x458>  // b.any
 46c:	add	x7, x7, x23
 470:	sub	x3, x7, w2, uxtw
 474:	ldr	x27, [sp, #80]
 478:	b	324 <inflate_fast+0x324>
 47c:	sub	w24, w3, w2
 480:	add	w3, w24, w17
 484:	add	x3, x20, x3
 488:	cmp	w1, w25
 48c:	b.ls	324 <inflate_fast+0x324>  // b.plast
 490:	str	x27, [sp, #80]
 494:	add	w1, w1, w24
 498:	sub	w25, w25, #0x1
 49c:	add	x27, x25, #0x1
 4a0:	mov	x24, #0x0                   	// #0
 4a4:	ldrb	w26, [x3, x24]
 4a8:	strb	w26, [x7, x24]
 4ac:	cmp	x24, x25
 4b0:	add	x24, x24, #0x1
 4b4:	b.ne	4a4 <inflate_fast+0x4a4>  // b.any
 4b8:	add	x7, x7, x27
 4bc:	sub	x3, x7, w2, uxtw
 4c0:	ldr	x27, [sp, #80]
 4c4:	b	324 <inflate_fast+0x324>
 4c8:	add	x7, x7, #0x1
 4cc:	ldp	x25, x26, [sp, #64]
 4d0:	b	98 <inflate_fast+0x98>
 4d4:	sub	x2, x7, w2, uxtw
 4d8:	ldrb	w3, [x2]
 4dc:	strb	w3, [x7]
 4e0:	ldrb	w3, [x2, #1]
 4e4:	strb	w3, [x7, #1]
 4e8:	mov	x25, x2
 4ec:	add	x2, x2, #0x3
 4f0:	mov	x24, x7
 4f4:	add	x7, x7, #0x3
 4f8:	ldurb	w3, [x2, #-1]
 4fc:	sturb	w3, [x7, #-1]
 500:	sub	w1, w1, #0x3
 504:	cmp	w1, #0x2
 508:	b.hi	4d8 <inflate_fast+0x4d8>  // b.pmore
 50c:	cbz	w1, 55c <inflate_fast+0x55c>
 510:	ldrb	w2, [x25, #3]
 514:	strb	w2, [x24, #3]
 518:	b.ne	530 <inflate_fast+0x530>  // b.any
 51c:	add	x7, x24, #0x5
 520:	ldrb	w1, [x25, #4]
 524:	strb	w1, [x24, #4]
 528:	ldp	x25, x26, [sp, #64]
 52c:	b	98 <inflate_fast+0x98>
 530:	add	x7, x24, #0x4
 534:	ldp	x25, x26, [sp, #64]
 538:	b	98 <inflate_fast+0x98>
 53c:	adrp	x1, 0 <inflate_fast>
 540:	add	x1, x1, #0x0
 544:	str	x1, [x0, #48]
 548:	mov	w1, #0x3f51                	// #16209
 54c:	str	w1, [x10, #8]
 550:	b	230 <inflate_fast+0x230>
 554:	ldp	x25, x26, [sp, #64]
 558:	b	98 <inflate_fast+0x98>
 55c:	ldp	x25, x26, [sp, #64]
 560:	b	98 <inflate_fast+0x98>

inflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateStateCheck>:
       0:	mov	x1, x0
       4:	cbz	x0, 4c <inflateStateCheck+0x4c>
       8:	ldr	x0, [x0, #64]
       c:	cbz	x0, 54 <inflateStateCheck+0x54>
      10:	ldr	x0, [x1, #72]
      14:	cbz	x0, 5c <inflateStateCheck+0x5c>
      18:	ldr	x2, [x1, #56]
      1c:	cbz	x2, 64 <inflateStateCheck+0x64>
      20:	ldr	x3, [x2]
      24:	mov	w0, #0x1                   	// #1
      28:	cmp	x3, x1
      2c:	b.eq	34 <inflateStateCheck+0x34>  // b.none
      30:	ret
      34:	ldr	w0, [x2, #8]
      38:	sub	w0, w0, #0x3, lsl #12
      3c:	sub	w0, w0, #0xf34
      40:	cmp	w0, #0x1f
      44:	cset	w0, hi  // hi = pmore
      48:	b	30 <inflateStateCheck+0x30>
      4c:	mov	w0, #0x1                   	// #1
      50:	b	30 <inflateStateCheck+0x30>
      54:	mov	w0, #0x1                   	// #1
      58:	b	30 <inflateStateCheck+0x30>
      5c:	mov	w0, #0x1                   	// #1
      60:	b	30 <inflateStateCheck+0x30>
      64:	mov	w0, #0x1                   	// #1
      68:	b	30 <inflateStateCheck+0x30>

000000000000006c <syncsearch>:
      6c:	mov	x9, x0
      70:	ldr	w3, [x0]
      74:	cmp	w2, #0x0
      78:	ccmp	w3, #0x3, #0x2, ne  // ne = any
      7c:	b.hi	cc <syncsearch+0x60>  // b.pmore
      80:	mov	w0, #0x0                   	// #0
      84:	mov	w6, #0x0                   	// #0
      88:	mov	w7, #0xff                  	// #255
      8c:	mov	w8, #0x4                   	// #4
      90:	b	b0 <syncsearch+0x44>
      94:	sub	w3, w8, w3
      98:	cmp	w4, #0x0
      9c:	csel	w3, w3, w6, eq  // eq = none
      a0:	add	w0, w0, #0x1
      a4:	cmp	w2, w0
      a8:	ccmp	w3, #0x3, #0x2, hi  // hi = pmore
      ac:	b.hi	d0 <syncsearch+0x64>  // b.pmore
      b0:	ldrb	w4, [x1, w0, uxtw]
      b4:	cmp	w3, #0x2
      b8:	csel	w5, w6, w7, cc  // cc = lo, ul, last
      bc:	cmp	w4, w5
      c0:	b.ne	94 <syncsearch+0x28>  // b.any
      c4:	add	w3, w3, #0x1
      c8:	b	a0 <syncsearch+0x34>
      cc:	mov	w0, #0x0                   	// #0
      d0:	str	w3, [x9]
      d4:	ret

00000000000000d8 <updatewindow>:
      d8:	stp	x29, x30, [sp, #-48]!
      dc:	mov	x29, sp
      e0:	stp	x19, x20, [sp, #16]
      e4:	stp	x21, x22, [sp, #32]
      e8:	mov	x21, x1
      ec:	mov	w20, w2
      f0:	ldr	x19, [x0, #56]
      f4:	ldr	x2, [x19, #72]
      f8:	cbz	x2, 158 <updatewindow+0x80>
      fc:	ldr	w0, [x19, #60]
     100:	cbnz	w0, 11c <updatewindow+0x44>
     104:	ldr	w1, [x19, #56]
     108:	mov	w0, #0x1                   	// #1
     10c:	lsl	w0, w0, w1
     110:	str	w0, [x19, #60]
     114:	str	wzr, [x19, #68]
     118:	str	wzr, [x19, #64]
     11c:	ldr	w2, [x19, #60]
     120:	cmp	w2, w20
     124:	b.hi	180 <updatewindow+0xa8>  // b.pmore
     128:	mov	w2, w2
     12c:	sub	x1, x21, x2
     130:	ldr	x0, [x19, #72]
     134:	bl	0 <memcpy>
     138:	str	wzr, [x19, #68]
     13c:	ldr	w0, [x19, #60]
     140:	str	w0, [x19, #64]
     144:	mov	w0, #0x0                   	// #0
     148:	ldp	x19, x20, [sp, #16]
     14c:	ldp	x21, x22, [sp, #32]
     150:	ldp	x29, x30, [sp], #48
     154:	ret
     158:	ldr	w1, [x19, #56]
     15c:	mov	w2, #0x1                   	// #1
     160:	ldr	x3, [x0, #64]
     164:	lsl	w1, w2, w1
     168:	ldr	x0, [x0, #80]
     16c:	blr	x3
     170:	str	x0, [x19, #72]
     174:	cbnz	x0, fc <updatewindow+0x24>
     178:	mov	w0, #0x1                   	// #1
     17c:	b	148 <updatewindow+0x70>
     180:	ldr	w0, [x19, #68]
     184:	sub	w2, w2, w0
     188:	cmp	w20, w2
     18c:	csel	w22, w20, w2, ls  // ls = plast
     190:	ldr	x3, [x19, #72]
     194:	csel	w2, w20, w2, ls  // ls = plast
     198:	sub	x1, x21, w20, uxtw
     19c:	add	x0, x3, w0, uxtw
     1a0:	bl	0 <memcpy>
     1a4:	subs	w20, w20, w22
     1a8:	b.ne	1e0 <updatewindow+0x108>  // b.any
     1ac:	ldr	w0, [x19, #68]
     1b0:	add	w0, w22, w0
     1b4:	ldr	w2, [x19, #60]
     1b8:	cmp	w0, w2
     1bc:	csel	w0, w0, wzr, ne  // ne = any
     1c0:	str	w0, [x19, #68]
     1c4:	ldr	w1, [x19, #64]
     1c8:	mov	w0, #0x0                   	// #0
     1cc:	cmp	w2, w1
     1d0:	b.ls	148 <updatewindow+0x70>  // b.plast
     1d4:	add	w22, w1, w22
     1d8:	str	w22, [x19, #64]
     1dc:	b	148 <updatewindow+0x70>
     1e0:	mov	w2, w20
     1e4:	sub	x1, x21, x2
     1e8:	ldr	x0, [x19, #72]
     1ec:	bl	0 <memcpy>
     1f0:	str	w20, [x19, #68]
     1f4:	ldr	w0, [x19, #60]
     1f8:	str	w0, [x19, #64]
     1fc:	mov	w0, #0x0                   	// #0
     200:	b	148 <updatewindow+0x70>

0000000000000204 <inflateResetKeep>:
     204:	stp	x29, x30, [sp, #-32]!
     208:	mov	x29, sp
     20c:	str	x19, [sp, #16]
     210:	mov	x19, x0
     214:	bl	0 <inflateStateCheck>
     218:	cbnz	w0, 290 <inflateResetKeep+0x8c>
     21c:	ldr	x1, [x19, #56]
     220:	str	xzr, [x1, #40]
     224:	str	xzr, [x19, #40]
     228:	str	xzr, [x19, #16]
     22c:	str	xzr, [x19, #48]
     230:	ldr	w2, [x1, #16]
     234:	cbz	w2, 240 <inflateResetKeep+0x3c>
     238:	and	x2, x2, #0x1
     23c:	str	x2, [x19, #96]
     240:	mov	w2, #0x3f34                	// #16180
     244:	str	w2, [x1, #8]
     248:	str	wzr, [x1, #12]
     24c:	str	wzr, [x1, #20]
     250:	mov	w2, #0x8000                	// #32768
     254:	str	w2, [x1, #28]
     258:	str	xzr, [x1, #48]
     25c:	str	xzr, [x1, #80]
     260:	str	wzr, [x1, #88]
     264:	add	x2, x1, #0x558
     268:	str	x2, [x1, #144]
     26c:	str	x2, [x1, #112]
     270:	str	x2, [x1, #104]
     274:	mov	w2, #0x1                   	// #1
     278:	str	w2, [x1, #7144]
     27c:	mov	w2, #0xffffffff            	// #-1
     280:	str	w2, [x1, #7148]
     284:	ldr	x19, [sp, #16]
     288:	ldp	x29, x30, [sp], #32
     28c:	ret
     290:	mov	w0, #0xfffffffe            	// #-2
     294:	b	284 <inflateResetKeep+0x80>

0000000000000298 <inflateReset>:
     298:	stp	x29, x30, [sp, #-32]!
     29c:	mov	x29, sp
     2a0:	str	x19, [sp, #16]
     2a4:	mov	x19, x0
     2a8:	bl	0 <inflateStateCheck>
     2ac:	cbnz	w0, 2d4 <inflateReset+0x3c>
     2b0:	ldr	x0, [x19, #56]
     2b4:	str	wzr, [x0, #60]
     2b8:	str	wzr, [x0, #64]
     2bc:	str	wzr, [x0, #68]
     2c0:	mov	x0, x19
     2c4:	bl	204 <inflateResetKeep>
     2c8:	ldr	x19, [sp, #16]
     2cc:	ldp	x29, x30, [sp], #32
     2d0:	ret
     2d4:	mov	w0, #0xfffffffe            	// #-2
     2d8:	b	2c8 <inflateReset+0x30>

00000000000002dc <inflateReset2>:
     2dc:	stp	x29, x30, [sp, #-64]!
     2e0:	mov	x29, sp
     2e4:	stp	x19, x20, [sp, #16]
     2e8:	stp	x21, x22, [sp, #32]
     2ec:	mov	x21, x0
     2f0:	mov	w19, w1
     2f4:	bl	0 <inflateStateCheck>
     2f8:	cbnz	w0, 384 <inflateReset2+0xa8>
     2fc:	str	x23, [sp, #48]
     300:	mov	w20, w0
     304:	ldr	x22, [x21, #56]
     308:	tbnz	w19, #31, 37c <inflateReset2+0xa0>
     30c:	asr	w20, w19, #4
     310:	add	w20, w20, #0x5
     314:	and	w0, w19, #0xf
     318:	cmp	w19, #0x30
     31c:	csel	w19, w0, w19, lt  // lt = tstop
     320:	mov	w23, w19
     324:	sub	w0, w19, #0x8
     328:	cmp	w19, #0x0
     32c:	ccmp	w0, #0x7, #0x0, ne  // ne = any
     330:	b.hi	38c <inflateReset2+0xb0>  // b.pmore
     334:	ldr	x1, [x22, #72]
     338:	cbz	x1, 358 <inflateReset2+0x7c>
     33c:	ldr	w0, [x22, #56]
     340:	cmp	w19, w0
     344:	b.eq	358 <inflateReset2+0x7c>  // b.none
     348:	ldr	x2, [x21, #72]
     34c:	ldr	x0, [x21, #80]
     350:	blr	x2
     354:	str	xzr, [x22, #72]
     358:	str	w20, [x22, #16]
     35c:	str	w23, [x22, #56]
     360:	mov	x0, x21
     364:	bl	298 <inflateReset>
     368:	ldr	x23, [sp, #48]
     36c:	ldp	x19, x20, [sp, #16]
     370:	ldp	x21, x22, [sp, #32]
     374:	ldp	x29, x30, [sp], #64
     378:	ret
     37c:	neg	w19, w19
     380:	b	320 <inflateReset2+0x44>
     384:	mov	w0, #0xfffffffe            	// #-2
     388:	b	36c <inflateReset2+0x90>
     38c:	mov	w0, #0xfffffffe            	// #-2
     390:	ldr	x23, [sp, #48]
     394:	b	36c <inflateReset2+0x90>

0000000000000398 <inflateInit2_>:
     398:	stp	x29, x30, [sp, #-48]!
     39c:	mov	x29, sp
     3a0:	str	x21, [sp, #32]
     3a4:	cbz	x2, 470 <inflateInit2_+0xd8>
     3a8:	stp	x19, x20, [sp, #16]
     3ac:	mov	x19, x0
     3b0:	mov	w21, w1
     3b4:	ldrb	w0, [x2]
     3b8:	cmp	w0, #0x31
     3bc:	mov	w0, #0x70                  	// #112
     3c0:	ccmp	w3, w0, #0x0, eq  // eq = none
     3c4:	b.ne	478 <inflateInit2_+0xe0>  // b.any
     3c8:	cbz	x19, 484 <inflateInit2_+0xec>
     3cc:	str	xzr, [x19, #48]
     3d0:	ldr	x0, [x19, #64]
     3d4:	cbz	x0, 44c <inflateInit2_+0xb4>
     3d8:	ldr	x0, [x19, #72]
     3dc:	cbz	x0, 460 <inflateInit2_+0xc8>
     3e0:	ldr	x3, [x19, #64]
     3e4:	mov	w2, #0x1bf8                	// #7160
     3e8:	mov	w1, #0x1                   	// #1
     3ec:	ldr	x0, [x19, #80]
     3f0:	blr	x3
     3f4:	mov	x20, x0
     3f8:	cbz	x0, 490 <inflateInit2_+0xf8>
     3fc:	str	x0, [x19, #56]
     400:	str	x19, [x0]
     404:	str	xzr, [x0, #72]
     408:	mov	w0, #0x3f34                	// #16180
     40c:	str	w0, [x20, #8]
     410:	mov	w1, w21
     414:	mov	x0, x19
     418:	bl	2dc <inflateReset2>
     41c:	mov	w21, w0
     420:	cbz	w0, 49c <inflateInit2_+0x104>
     424:	ldr	x2, [x19, #72]
     428:	mov	x1, x20
     42c:	ldr	x0, [x19, #80]
     430:	blr	x2
     434:	str	xzr, [x19, #56]
     438:	ldp	x19, x20, [sp, #16]
     43c:	mov	w0, w21
     440:	ldr	x21, [sp, #32]
     444:	ldp	x29, x30, [sp], #48
     448:	ret
     44c:	adrp	x0, 0 <zcalloc>
     450:	add	x0, x0, #0x0
     454:	str	x0, [x19, #64]
     458:	str	xzr, [x19, #80]
     45c:	b	3d8 <inflateInit2_+0x40>
     460:	adrp	x0, 0 <zcfree>
     464:	add	x0, x0, #0x0
     468:	str	x0, [x19, #72]
     46c:	b	3e0 <inflateInit2_+0x48>
     470:	mov	w21, #0xfffffffa            	// #-6
     474:	b	43c <inflateInit2_+0xa4>
     478:	mov	w21, #0xfffffffa            	// #-6
     47c:	ldp	x19, x20, [sp, #16]
     480:	b	43c <inflateInit2_+0xa4>
     484:	mov	w21, #0xfffffffe            	// #-2
     488:	ldp	x19, x20, [sp, #16]
     48c:	b	43c <inflateInit2_+0xa4>
     490:	mov	w21, #0xfffffffc            	// #-4
     494:	ldp	x19, x20, [sp, #16]
     498:	b	43c <inflateInit2_+0xa4>
     49c:	ldp	x19, x20, [sp, #16]
     4a0:	b	43c <inflateInit2_+0xa4>

00000000000004a4 <inflateInit_>:
     4a4:	stp	x29, x30, [sp, #-16]!
     4a8:	mov	x29, sp
     4ac:	mov	w3, w2
     4b0:	mov	x2, x1
     4b4:	mov	w1, #0xf                   	// #15
     4b8:	bl	398 <inflateInit2_>
     4bc:	ldp	x29, x30, [sp], #16
     4c0:	ret

00000000000004c4 <inflatePrime>:
     4c4:	stp	x29, x30, [sp, #-48]!
     4c8:	mov	x29, sp
     4cc:	stp	x19, x20, [sp, #16]
     4d0:	str	x21, [sp, #32]
     4d4:	mov	x20, x0
     4d8:	mov	w19, w1
     4dc:	mov	w21, w2
     4e0:	bl	0 <inflateStateCheck>
     4e4:	cbnz	w0, 548 <inflatePrime+0x84>
     4e8:	ldr	x4, [x20, #56]
     4ec:	tbnz	w19, #31, 53c <inflatePrime+0x78>
     4f0:	cmp	w19, #0x10
     4f4:	b.gt	550 <inflatePrime+0x8c>
     4f8:	ldr	w6, [x4, #88]
     4fc:	add	w5, w19, w6
     500:	cmp	w5, #0x20
     504:	b.hi	558 <inflatePrime+0x94>  // b.pmore
     508:	mov	x3, #0x1                   	// #1
     50c:	lsl	x1, x3, x19
     510:	sub	w1, w1, #0x1
     514:	and	w2, w1, w21
     518:	lsl	w2, w2, w6
     51c:	ldr	x1, [x4, #80]
     520:	add	x2, x1, x2
     524:	str	x2, [x4, #80]
     528:	str	w5, [x4, #88]
     52c:	ldp	x19, x20, [sp, #16]
     530:	ldr	x21, [sp, #32]
     534:	ldp	x29, x30, [sp], #48
     538:	ret
     53c:	str	xzr, [x4, #80]
     540:	str	wzr, [x4, #88]
     544:	b	52c <inflatePrime+0x68>
     548:	mov	w0, #0xfffffffe            	// #-2
     54c:	b	52c <inflatePrime+0x68>
     550:	mov	w0, #0xfffffffe            	// #-2
     554:	b	52c <inflatePrime+0x68>
     558:	mov	w0, #0xfffffffe            	// #-2
     55c:	b	52c <inflatePrime+0x68>

0000000000000560 <inflate>:
     560:	stp	x29, x30, [sp, #-160]!
     564:	mov	x29, sp
     568:	stp	x23, x24, [sp, #48]
     56c:	mov	x24, x0
     570:	str	w1, [sp, #104]
     574:	bl	0 <inflateStateCheck>
     578:	cbnz	w0, 1e24 <inflate+0x18c4>
     57c:	stp	x25, x26, [sp, #64]
     580:	mov	w25, w0
     584:	ldr	x0, [x24, #24]
     588:	cbz	x0, 1e30 <inflate+0x18d0>
     58c:	ldr	x0, [x24]
     590:	cbz	x0, 61c <inflate+0xbc>
     594:	stp	x19, x20, [sp, #16]
     598:	stp	x21, x22, [sp, #32]
     59c:	stp	x27, x28, [sp, #80]
     5a0:	ldr	x21, [x24, #56]
     5a4:	ldr	w1, [x21, #8]
     5a8:	mov	w0, #0x3f3f                	// #16191
     5ac:	cmp	w1, w0
     5b0:	b.eq	634 <inflate+0xd4>  // b.none
     5b4:	ldr	x27, [x24, #24]
     5b8:	ldr	w26, [x24, #32]
     5bc:	ldr	x23, [x24]
     5c0:	ldr	w0, [x24, #8]
     5c4:	str	w0, [sp, #108]
     5c8:	ldr	x22, [x21, #80]
     5cc:	ldr	w19, [x21, #88]
     5d0:	str	w25, [sp, #96]
     5d4:	str	w26, [sp, #100]
     5d8:	mov	w20, w0
     5dc:	adrp	x0, 0 <inflateStateCheck>
     5e0:	add	x0, x0, #0x0
     5e4:	str	x0, [sp, #128]
     5e8:	add	x0, x0, #0x880
     5ec:	str	x0, [sp, #120]
     5f0:	ldr	w0, [x21, #8]
     5f4:	sub	w0, w0, #0x3, lsl #12
     5f8:	sub	w0, w0, #0xf34
     5fc:	cmp	w0, #0x1e
     600:	b.hi	79c <inflate+0x23c>  // b.pmore
     604:	adrp	x1, 0 <inflateStateCheck>
     608:	add	x1, x1, #0x0
     60c:	ldrh	w0, [x1, w0, uxtw #1]
     610:	adr	x1, 61c <inflate+0xbc>
     614:	add	x0, x1, w0, sxth #2
     618:	br	x0
     61c:	ldr	w0, [x24, #8]
     620:	cbz	w0, 594 <inflate+0x34>
     624:	mov	w0, #0xfffffffe            	// #-2
     628:	str	w0, [sp, #96]
     62c:	ldp	x25, x26, [sp, #64]
     630:	b	78c <inflate+0x22c>
     634:	mov	w0, #0x3f40                	// #16192
     638:	str	w0, [x21, #8]
     63c:	b	5b4 <inflate+0x54>
     640:	mov	w0, #0x1                   	// #1
     644:	str	w0, [sp, #96]
     648:	str	x27, [x24, #24]
     64c:	str	w26, [x24, #32]
     650:	str	x23, [x24]
     654:	str	w20, [x24, #8]
     658:	str	x22, [x21, #80]
     65c:	str	w19, [x21, #88]
     660:	ldr	w19, [x21, #60]
     664:	cbnz	w19, 69c <inflate+0x13c>
     668:	ldr	w0, [x24, #32]
     66c:	ldr	w1, [sp, #100]
     670:	cmp	w0, w1
     674:	b.eq	1e64 <inflate+0x1904>  // b.none
     678:	ldr	w0, [x21, #8]
     67c:	mov	w1, #0x3f50                	// #16208
     680:	cmp	w0, w1
     684:	b.hi	6b8 <inflate+0x158>  // b.pmore
     688:	ldr	w1, [sp, #104]
     68c:	cmp	w1, #0x4
     690:	mov	w1, #0x3f4d                	// #16205
     694:	ccmp	w0, w1, #0x0, eq  // eq = none
     698:	b.hi	6b8 <inflate+0x158>  // b.pmore
     69c:	ldr	w2, [x24, #32]
     6a0:	ldr	w0, [sp, #100]
     6a4:	sub	w2, w0, w2
     6a8:	ldr	x1, [x24, #24]
     6ac:	mov	x0, x24
     6b0:	bl	d8 <updatewindow>
     6b4:	cbnz	w0, 1dc0 <inflate+0x1860>
     6b8:	ldr	w0, [x24, #8]
     6bc:	ldr	w2, [sp, #108]
     6c0:	sub	w20, w2, w0
     6c4:	ldr	w1, [x24, #32]
     6c8:	ldr	w3, [sp, #100]
     6cc:	sub	w19, w3, w1
     6d0:	sub	w0, w2, w0
     6d4:	ldr	x2, [x24, #16]
     6d8:	add	x0, x2, x0
     6dc:	str	x0, [x24, #16]
     6e0:	sub	w1, w3, w1
     6e4:	ldr	x0, [x24, #40]
     6e8:	add	x0, x0, x1
     6ec:	str	x0, [x24, #40]
     6f0:	ldr	x0, [x21, #40]
     6f4:	add	x0, x0, x1
     6f8:	str	x0, [x21, #40]
     6fc:	ldr	w0, [x21, #16]
     700:	tst	x0, #0x4
     704:	ccmp	w19, #0x0, #0x4, ne  // ne = any
     708:	b.ne	1de4 <inflate+0x1884>  // b.any
     70c:	ldr	w0, [x21, #88]
     710:	ldr	w1, [x21, #12]
     714:	cmp	w1, #0x0
     718:	mov	w2, #0x40                  	// #64
     71c:	csel	w1, w1, w2, eq  // eq = none
     720:	add	w0, w0, w1
     724:	ldr	w1, [x21, #8]
     728:	mov	w2, #0x3f3f                	// #16191
     72c:	cmp	w1, w2
     730:	b.eq	1e5c <inflate+0x18fc>  // b.none
     734:	mov	w2, #0x3f47                	// #16199
     738:	cmp	w1, w2
     73c:	mov	w2, #0x3f42                	// #16194
     740:	ccmp	w1, w2, #0x4, ne  // ne = any
     744:	mov	w1, #0x100                 	// #256
     748:	csel	w25, w25, w1, ne  // ne = any
     74c:	add	w0, w0, w25
     750:	str	w0, [x24, #88]
     754:	orr	w19, w19, w20
     758:	cmp	w19, #0x0
     75c:	ldr	w0, [sp, #104]
     760:	ccmp	w0, #0x4, #0x4, ne  // ne = any
     764:	b.ne	1e84 <inflate+0x1924>  // b.any
     768:	ldr	w1, [sp, #96]
     76c:	cmp	w1, #0x0
     770:	mov	w0, #0xfffffffb            	// #-5
     774:	csel	w0, w1, w0, ne  // ne = any
     778:	str	w0, [sp, #96]
     77c:	ldp	x19, x20, [sp, #16]
     780:	ldp	x21, x22, [sp, #32]
     784:	ldp	x25, x26, [sp, #64]
     788:	ldp	x27, x28, [sp, #80]
     78c:	ldr	w0, [sp, #96]
     790:	ldp	x23, x24, [sp, #48]
     794:	ldp	x29, x30, [sp], #160
     798:	ret
     79c:	mov	w0, #0xfffffffe            	// #-2
     7a0:	str	w0, [sp, #96]
     7a4:	ldp	x19, x20, [sp, #16]
     7a8:	ldp	x21, x22, [sp, #32]
     7ac:	ldp	x25, x26, [sp, #64]
     7b0:	ldp	x27, x28, [sp, #80]
     7b4:	b	78c <inflate+0x22c>
     7b8:	cmp	w19, #0xd
     7bc:	b.hi	11e4 <inflate+0xc84>  // b.pmore
     7c0:	cbz	w20, 648 <inflate+0xe8>
     7c4:	sub	w20, w20, #0x1
     7c8:	ldrb	w0, [x23], #1
     7cc:	lsl	x0, x0, x19
     7d0:	add	x22, x22, x0
     7d4:	add	w19, w19, #0x8
     7d8:	cmp	w19, #0xd
     7dc:	b.hi	11e4 <inflate+0xc84>  // b.pmore
     7e0:	cbnz	w20, 7c4 <inflate+0x264>
     7e4:	b	648 <inflate+0xe8>
     7e8:	cmp	w19, #0x1f
     7ec:	b.hi	f68 <inflate+0xa08>  // b.pmore
     7f0:	cbz	w20, 648 <inflate+0xe8>
     7f4:	sub	w20, w20, #0x1
     7f8:	ldrb	w0, [x23], #1
     7fc:	lsl	x0, x0, x19
     800:	add	x22, x22, x0
     804:	add	w19, w19, #0x8
     808:	cmp	w19, #0x1f
     80c:	b.hi	f68 <inflate+0xa08>  // b.pmore
     810:	cbnz	w20, 7f4 <inflate+0x294>
     814:	b	648 <inflate+0xe8>
     818:	cmp	w19, #0xf
     81c:	b.hi	a14 <inflate+0x4b4>  // b.pmore
     820:	cbz	w20, 648 <inflate+0xe8>
     824:	sub	w20, w20, #0x1
     828:	ldrb	w0, [x23], #1
     82c:	lsl	x0, x0, x19
     830:	add	x22, x22, x0
     834:	add	w19, w19, #0x8
     838:	cmp	w19, #0xf
     83c:	b.hi	a14 <inflate+0x4b4>  // b.pmore
     840:	cbnz	w20, 824 <inflate+0x2c4>
     844:	b	648 <inflate+0xe8>
     848:	ldr	w1, [x21, #16]
     84c:	cbnz	w1, 85c <inflate+0x2fc>
     850:	mov	w0, #0x3f40                	// #16192
     854:	str	w0, [x21, #8]
     858:	b	5f0 <inflate+0x90>
     85c:	cmp	w19, #0xf
     860:	b.hi	88c <inflate+0x32c>  // b.pmore
     864:	cbz	w20, 648 <inflate+0xe8>
     868:	sub	w20, w20, #0x1
     86c:	ldrb	w0, [x23], #1
     870:	lsl	x0, x0, x19
     874:	add	x22, x22, x0
     878:	add	w19, w19, #0x8
     87c:	cmp	w19, #0xf
     880:	b.hi	88c <inflate+0x32c>  // b.pmore
     884:	cbnz	w20, 868 <inflate+0x308>
     888:	b	648 <inflate+0xe8>
     88c:	tst	x1, #0x2
     890:	mov	x0, #0x8b1f                	// #35615
     894:	ccmp	x22, x0, #0x0, ne  // ne = any
     898:	b.eq	908 <inflate+0x3a8>  // b.none
     89c:	str	wzr, [x21, #24]
     8a0:	ldr	x0, [x21, #48]
     8a4:	cbz	x0, 8b0 <inflate+0x350>
     8a8:	mov	w1, #0xffffffff            	// #-1
     8ac:	str	w1, [x0, #72]
     8b0:	ldr	w0, [x21, #16]
     8b4:	tbz	w0, #0, 8f0 <inflate+0x390>
     8b8:	ubfiz	x0, x22, #8, #8
     8bc:	add	x0, x0, x22, lsr #8
     8c0:	mov	x1, #0x4211                	// #16913
     8c4:	movk	x1, #0x2108, lsl #16
     8c8:	movk	x1, #0x1084, lsl #32
     8cc:	movk	x1, #0x842, lsl #48
     8d0:	umulh	x1, x0, x1
     8d4:	sub	x28, x0, x1
     8d8:	add	x28, x1, x28, lsr #1
     8dc:	lsr	x28, x28, #4
     8e0:	lsl	x1, x28, #5
     8e4:	sub	x28, x1, x28
     8e8:	subs	x28, x0, x28
     8ec:	b.eq	960 <inflate+0x400>  // b.none
     8f0:	adrp	x0, 0 <inflateStateCheck>
     8f4:	add	x0, x0, #0x0
     8f8:	str	x0, [x24, #48]
     8fc:	mov	w0, #0x3f51                	// #16209
     900:	str	w0, [x21, #8]
     904:	b	5f0 <inflate+0x90>
     908:	ldr	w0, [x21, #56]
     90c:	cbnz	w0, 918 <inflate+0x3b8>
     910:	mov	w0, #0xf                   	// #15
     914:	str	w0, [x21, #56]
     918:	mov	w2, #0x0                   	// #0
     91c:	mov	x1, #0x0                   	// #0
     920:	mov	x0, #0x0                   	// #0
     924:	bl	0 <crc32>
     928:	str	x0, [x21, #32]
     92c:	mov	w1, #0x1f                  	// #31
     930:	strb	w1, [sp, #152]
     934:	mov	w1, #0xffffff8b            	// #-117
     938:	strb	w1, [sp, #153]
     93c:	mov	w2, #0x2                   	// #2
     940:	add	x1, sp, #0x98
     944:	bl	0 <crc32>
     948:	str	x0, [x21, #32]
     94c:	mov	w0, #0x3f35                	// #16181
     950:	str	w0, [x21, #8]
     954:	mov	w19, #0x0                   	// #0
     958:	mov	x22, #0x0                   	// #0
     95c:	b	5f0 <inflate+0x90>
     960:	and	w0, w22, #0xf
     964:	cmp	w0, #0x8
     968:	b.eq	984 <inflate+0x424>  // b.none
     96c:	adrp	x0, 0 <inflateStateCheck>
     970:	add	x0, x0, #0x0
     974:	str	x0, [x24, #48]
     978:	mov	w0, #0x3f51                	// #16209
     97c:	str	w0, [x21, #8]
     980:	b	5f0 <inflate+0x90>
     984:	lsr	x22, x22, #4
     988:	sub	w19, w19, #0x4
     98c:	and	w0, w22, #0xf
     990:	add	w0, w0, #0x8
     994:	ldr	w1, [x21, #56]
     998:	cbnz	w1, 9c0 <inflate+0x460>
     99c:	str	w0, [x21, #56]
     9a0:	cmp	w0, #0xf
     9a4:	b.ls	9d0 <inflate+0x470>  // b.plast
     9a8:	adrp	x0, 0 <inflateStateCheck>
     9ac:	add	x0, x0, #0x0
     9b0:	str	x0, [x24, #48]
     9b4:	mov	w0, #0x3f51                	// #16209
     9b8:	str	w0, [x21, #8]
     9bc:	b	5f0 <inflate+0x90>
     9c0:	cmp	w0, #0xf
     9c4:	b.hi	9a8 <inflate+0x448>  // b.pmore
     9c8:	cmp	w1, w0
     9cc:	b.cc	9a8 <inflate+0x448>  // b.lo, b.ul, b.last
     9d0:	mov	w1, #0x1                   	// #1
     9d4:	lsl	w0, w1, w0
     9d8:	str	w0, [x21, #28]
     9dc:	mov	w2, #0x0                   	// #0
     9e0:	mov	x1, #0x0                   	// #0
     9e4:	mov	x0, #0x0                   	// #0
     9e8:	bl	0 <adler32>
     9ec:	str	x0, [x21, #32]
     9f0:	str	x0, [x24, #96]
     9f4:	tst	x22, #0x200
     9f8:	mov	w0, #0x3f3d                	// #16189
     9fc:	mov	w1, #0x3f3f                	// #16191
     a00:	csel	w0, w0, w1, ne  // ne = any
     a04:	str	w0, [x21, #8]
     a08:	mov	x22, x28
     a0c:	mov	w19, #0x0                   	// #0
     a10:	b	5f0 <inflate+0x90>
     a14:	str	w22, [x21, #24]
     a18:	and	w0, w22, #0xff
     a1c:	cmp	w0, #0x8
     a20:	b.eq	a3c <inflate+0x4dc>  // b.none
     a24:	adrp	x0, 0 <inflateStateCheck>
     a28:	add	x0, x0, #0x0
     a2c:	str	x0, [x24, #48]
     a30:	mov	w0, #0x3f51                	// #16209
     a34:	str	w0, [x21, #8]
     a38:	b	5f0 <inflate+0x90>
     a3c:	tst	x22, #0xe000
     a40:	b.eq	a5c <inflate+0x4fc>  // b.none
     a44:	adrp	x0, 0 <inflateStateCheck>
     a48:	add	x0, x0, #0x0
     a4c:	str	x0, [x24, #48]
     a50:	mov	w0, #0x3f51                	// #16209
     a54:	str	w0, [x21, #8]
     a58:	b	5f0 <inflate+0x90>
     a5c:	ldr	x0, [x21, #48]
     a60:	cbz	x0, a6c <inflate+0x50c>
     a64:	ubfx	w1, w22, #8, #1
     a68:	str	w1, [x0]
     a6c:	ldr	w0, [x21, #24]
     a70:	tbz	w0, #9, a7c <inflate+0x51c>
     a74:	ldr	w0, [x21, #16]
     a78:	tbnz	w0, #2, a90 <inflate+0x530>
     a7c:	mov	w0, #0x3f36                	// #16182
     a80:	str	w0, [x21, #8]
     a84:	mov	w19, #0x0                   	// #0
     a88:	mov	x22, #0x0                   	// #0
     a8c:	b	abc <inflate+0x55c>
     a90:	strb	w22, [sp, #152]
     a94:	lsr	x22, x22, #8
     a98:	strb	w22, [sp, #153]
     a9c:	mov	w2, #0x2                   	// #2
     aa0:	add	x1, sp, #0x98
     aa4:	ldr	x0, [x21, #32]
     aa8:	bl	0 <crc32>
     aac:	str	x0, [x21, #32]
     ab0:	b	a7c <inflate+0x51c>
     ab4:	cmp	w19, #0x1f
     ab8:	b.hi	ae4 <inflate+0x584>  // b.pmore
     abc:	cbz	w20, 648 <inflate+0xe8>
     ac0:	sub	w20, w20, #0x1
     ac4:	ldrb	w0, [x23], #1
     ac8:	lsl	x0, x0, x19
     acc:	add	x22, x22, x0
     ad0:	add	w19, w19, #0x8
     ad4:	cmp	w19, #0x1f
     ad8:	b.hi	ae4 <inflate+0x584>  // b.pmore
     adc:	cbnz	w20, ac0 <inflate+0x560>
     ae0:	b	648 <inflate+0xe8>
     ae4:	ldr	x0, [x21, #48]
     ae8:	cbz	x0, af0 <inflate+0x590>
     aec:	str	x22, [x0, #8]
     af0:	ldr	w0, [x21, #24]
     af4:	tbz	w0, #9, b00 <inflate+0x5a0>
     af8:	ldr	w0, [x21, #16]
     afc:	tbnz	w0, #2, b14 <inflate+0x5b4>
     b00:	mov	w0, #0x3f37                	// #16183
     b04:	str	w0, [x21, #8]
     b08:	mov	x22, #0x0                   	// #0
     b0c:	mov	w19, #0x0                   	// #0
     b10:	b	b50 <inflate+0x5f0>
     b14:	strb	w22, [sp, #152]
     b18:	lsr	x0, x22, #8
     b1c:	strb	w0, [sp, #153]
     b20:	lsr	x0, x22, #16
     b24:	strb	w0, [sp, #154]
     b28:	lsr	x22, x22, #24
     b2c:	strb	w22, [sp, #155]
     b30:	mov	w2, #0x4                   	// #4
     b34:	add	x1, sp, #0x98
     b38:	ldr	x0, [x21, #32]
     b3c:	bl	0 <crc32>
     b40:	str	x0, [x21, #32]
     b44:	b	b00 <inflate+0x5a0>
     b48:	cmp	w19, #0xf
     b4c:	b.hi	b78 <inflate+0x618>  // b.pmore
     b50:	cbz	w20, 648 <inflate+0xe8>
     b54:	sub	w20, w20, #0x1
     b58:	ldrb	w0, [x23], #1
     b5c:	lsl	x0, x0, x19
     b60:	add	x22, x22, x0
     b64:	add	w19, w19, #0x8
     b68:	cmp	w19, #0xf
     b6c:	b.hi	b78 <inflate+0x618>  // b.pmore
     b70:	cbnz	w20, b54 <inflate+0x5f4>
     b74:	b	648 <inflate+0xe8>
     b78:	ldr	x0, [x21, #48]
     b7c:	cbz	x0, b94 <inflate+0x634>
     b80:	and	w1, w22, #0xff
     b84:	str	w1, [x0, #16]
     b88:	ldr	x0, [x21, #48]
     b8c:	lsr	x1, x22, #8
     b90:	str	w1, [x0, #20]
     b94:	ldr	w0, [x21, #24]
     b98:	tbz	w0, #9, ba4 <inflate+0x644>
     b9c:	ldr	w0, [x21, #16]
     ba0:	tbnz	w0, #2, bc0 <inflate+0x660>
     ba4:	mov	w0, #0x3f38                	// #16184
     ba8:	str	w0, [x21, #8]
     bac:	ldr	w0, [x21, #24]
     bb0:	tbnz	w0, #10, d44 <inflate+0x7e4>
     bb4:	mov	w19, #0x0                   	// #0
     bb8:	mov	x22, #0x0                   	// #0
     bbc:	b	bec <inflate+0x68c>
     bc0:	strb	w22, [sp, #152]
     bc4:	lsr	x22, x22, #8
     bc8:	strb	w22, [sp, #153]
     bcc:	mov	w2, #0x2                   	// #2
     bd0:	add	x1, sp, #0x98
     bd4:	ldr	x0, [x21, #32]
     bd8:	bl	0 <crc32>
     bdc:	str	x0, [x21, #32]
     be0:	b	ba4 <inflate+0x644>
     be4:	ldr	w0, [x21, #24]
     be8:	tbnz	w0, #10, d14 <inflate+0x7b4>
     bec:	ldr	x0, [x21, #48]
     bf0:	cbz	x0, bf8 <inflate+0x698>
     bf4:	str	xzr, [x0, #24]
     bf8:	mov	w0, #0x3f39                	// #16185
     bfc:	str	w0, [x21, #8]
     c00:	ldr	w0, [x21, #24]
     c04:	tbz	w0, #10, c84 <inflate+0x724>
     c08:	ldr	w1, [x21, #92]
     c0c:	cmp	w20, w1
     c10:	csel	w28, w20, w1, ls  // ls = plast
     c14:	cbz	w28, c7c <inflate+0x71c>
     c18:	ldr	x2, [x21, #48]
     c1c:	cbz	x2, c58 <inflate+0x6f8>
     c20:	ldr	x0, [x2, #24]
     c24:	cbz	x0, c58 <inflate+0x6f8>
     c28:	ldr	w4, [x2, #32]
     c2c:	sub	w3, w4, w1
     c30:	sub	w6, w4, w1
     c34:	ldr	w5, [x2, #36]
     c38:	add	w3, w28, w3
     c3c:	add	w1, w5, w1
     c40:	sub	w2, w1, w4
     c44:	cmp	w3, w5
     c48:	csel	w2, w28, w2, ls  // ls = plast
     c4c:	mov	x1, x23
     c50:	add	x0, x0, x6
     c54:	bl	0 <memcpy>
     c58:	ldr	w0, [x21, #24]
     c5c:	tbz	w0, #9, c68 <inflate+0x708>
     c60:	ldr	w0, [x21, #16]
     c64:	tbnz	w0, #2, db4 <inflate+0x854>
     c68:	sub	w20, w20, w28
     c6c:	add	x23, x23, w28, uxtw
     c70:	ldr	w0, [x21, #92]
     c74:	sub	w28, w0, w28
     c78:	str	w28, [x21, #92]
     c7c:	ldr	w0, [x21, #92]
     c80:	cbnz	w0, 648 <inflate+0xe8>
     c84:	str	wzr, [x21, #92]
     c88:	mov	w0, #0x3f3a                	// #16186
     c8c:	str	w0, [x21, #8]
     c90:	ldr	w0, [x21, #24]
     c94:	tbnz	w0, #11, dcc <inflate+0x86c>
     c98:	ldr	x0, [x21, #48]
     c9c:	cbz	x0, ca4 <inflate+0x744>
     ca0:	str	xzr, [x0, #40]
     ca4:	str	wzr, [x21, #92]
     ca8:	mov	w0, #0x3f3b                	// #16187
     cac:	str	w0, [x21, #8]
     cb0:	ldr	w0, [x21, #24]
     cb4:	tbnz	w0, #12, e60 <inflate+0x900>
     cb8:	ldr	x0, [x21, #48]
     cbc:	cbz	x0, cc4 <inflate+0x764>
     cc0:	str	xzr, [x0, #56]
     cc4:	mov	w0, #0x3f3c                	// #16188
     cc8:	str	w0, [x21, #8]
     ccc:	ldr	w1, [x21, #24]
     cd0:	tbnz	w1, #9, ef4 <inflate+0x994>
     cd4:	ldr	x0, [x21, #48]
     cd8:	cbz	x0, cf0 <inflate+0x790>
     cdc:	ubfx	x1, x1, #9, #1
     ce0:	str	w1, [x0, #68]
     ce4:	ldr	x0, [x21, #48]
     ce8:	mov	w1, #0x1                   	// #1
     cec:	str	w1, [x0, #72]
     cf0:	mov	w2, #0x0                   	// #0
     cf4:	mov	x1, #0x0                   	// #0
     cf8:	mov	x0, #0x0                   	// #0
     cfc:	bl	0 <crc32>
     d00:	str	x0, [x21, #32]
     d04:	str	x0, [x24, #96]
     d08:	mov	w0, #0x3f3f                	// #16191
     d0c:	str	w0, [x21, #8]
     d10:	b	5f0 <inflate+0x90>
     d14:	cmp	w19, #0xf
     d18:	b.hi	d50 <inflate+0x7f0>  // b.pmore
     d1c:	cbz	w20, 648 <inflate+0xe8>
     d20:	sub	w20, w20, #0x1
     d24:	ldrb	w0, [x23], #1
     d28:	lsl	x0, x0, x19
     d2c:	add	x22, x22, x0
     d30:	add	w19, w19, #0x8
     d34:	cmp	w19, #0xf
     d38:	b.hi	d50 <inflate+0x7f0>  // b.pmore
     d3c:	cbnz	w20, d20 <inflate+0x7c0>
     d40:	b	648 <inflate+0xe8>
     d44:	mov	w19, #0x0                   	// #0
     d48:	mov	x22, #0x0                   	// #0
     d4c:	b	d1c <inflate+0x7bc>
     d50:	str	w22, [x21, #92]
     d54:	ldr	x0, [x21, #48]
     d58:	cbz	x0, d60 <inflate+0x800>
     d5c:	str	w22, [x0, #32]
     d60:	ldr	w0, [x21, #24]
     d64:	tbz	w0, #9, da8 <inflate+0x848>
     d68:	ldr	w0, [x21, #16]
     d6c:	tbnz	w0, #2, d7c <inflate+0x81c>
     d70:	mov	w19, #0x0                   	// #0
     d74:	mov	x22, #0x0                   	// #0
     d78:	b	bf8 <inflate+0x698>
     d7c:	strb	w22, [sp, #152]
     d80:	lsr	x22, x22, #8
     d84:	strb	w22, [sp, #153]
     d88:	mov	w2, #0x2                   	// #2
     d8c:	add	x1, sp, #0x98
     d90:	ldr	x0, [x21, #32]
     d94:	bl	0 <crc32>
     d98:	str	x0, [x21, #32]
     d9c:	mov	w19, #0x0                   	// #0
     da0:	mov	x22, #0x0                   	// #0
     da4:	b	bf8 <inflate+0x698>
     da8:	mov	w19, #0x0                   	// #0
     dac:	mov	x22, #0x0                   	// #0
     db0:	b	bf8 <inflate+0x698>
     db4:	mov	w2, w28
     db8:	mov	x1, x23
     dbc:	ldr	x0, [x21, #32]
     dc0:	bl	0 <crc32>
     dc4:	str	x0, [x21, #32]
     dc8:	b	c68 <inflate+0x708>
     dcc:	cbz	w20, 648 <inflate+0xe8>
     dd0:	mov	w28, #0x0                   	// #0
     dd4:	b	de8 <inflate+0x888>
     dd8:	ldr	w0, [sp, #112]
     ddc:	cmp	w0, #0x0
     de0:	ccmp	w20, w28, #0x0, ne  // ne = any
     de4:	b.ls	e24 <inflate+0x8c4>  // b.plast
     de8:	ldrb	w3, [x23, w28, uxtw]
     dec:	str	w3, [sp, #112]
     df0:	add	w28, w28, #0x1
     df4:	ldr	x0, [x21, #48]
     df8:	cbz	x0, dd8 <inflate+0x878>
     dfc:	ldr	x1, [x0, #40]
     e00:	cbz	x1, dd8 <inflate+0x878>
     e04:	ldr	w2, [x21, #92]
     e08:	ldr	w0, [x0, #48]
     e0c:	cmp	w2, w0
     e10:	b.cs	dd8 <inflate+0x878>  // b.hs, b.nlast
     e14:	add	w0, w2, #0x1
     e18:	str	w0, [x21, #92]
     e1c:	strb	w3, [x1, w2, uxtw]
     e20:	b	dd8 <inflate+0x878>
     e24:	ldr	w0, [x21, #24]
     e28:	tbz	w0, #9, e34 <inflate+0x8d4>
     e2c:	ldr	w0, [x21, #16]
     e30:	tbnz	w0, #2, e48 <inflate+0x8e8>
     e34:	sub	w20, w20, w28
     e38:	add	x23, x23, w28, uxtw
     e3c:	ldr	w0, [sp, #112]
     e40:	cbz	w0, ca4 <inflate+0x744>
     e44:	b	648 <inflate+0xe8>
     e48:	mov	w2, w28
     e4c:	mov	x1, x23
     e50:	ldr	x0, [x21, #32]
     e54:	bl	0 <crc32>
     e58:	str	x0, [x21, #32]
     e5c:	b	e34 <inflate+0x8d4>
     e60:	cbz	w20, 648 <inflate+0xe8>
     e64:	mov	w28, #0x0                   	// #0
     e68:	b	e7c <inflate+0x91c>
     e6c:	ldr	w0, [sp, #112]
     e70:	cmp	w0, #0x0
     e74:	ccmp	w20, w28, #0x0, ne  // ne = any
     e78:	b.ls	eb8 <inflate+0x958>  // b.plast
     e7c:	ldrb	w3, [x23, w28, uxtw]
     e80:	str	w3, [sp, #112]
     e84:	add	w28, w28, #0x1
     e88:	ldr	x0, [x21, #48]
     e8c:	cbz	x0, e6c <inflate+0x90c>
     e90:	ldr	x1, [x0, #56]
     e94:	cbz	x1, e6c <inflate+0x90c>
     e98:	ldr	w2, [x21, #92]
     e9c:	ldr	w0, [x0, #64]
     ea0:	cmp	w2, w0
     ea4:	b.cs	e6c <inflate+0x90c>  // b.hs, b.nlast
     ea8:	add	w0, w2, #0x1
     eac:	str	w0, [x21, #92]
     eb0:	strb	w3, [x1, w2, uxtw]
     eb4:	b	e6c <inflate+0x90c>
     eb8:	ldr	w0, [x21, #24]
     ebc:	tbz	w0, #9, ec8 <inflate+0x968>
     ec0:	ldr	w0, [x21, #16]
     ec4:	tbnz	w0, #2, edc <inflate+0x97c>
     ec8:	sub	w20, w20, w28
     ecc:	add	x23, x23, w28, uxtw
     ed0:	ldr	w0, [sp, #112]
     ed4:	cbz	w0, cc4 <inflate+0x764>
     ed8:	b	648 <inflate+0xe8>
     edc:	mov	w2, w28
     ee0:	mov	x1, x23
     ee4:	ldr	x0, [x21, #32]
     ee8:	bl	0 <crc32>
     eec:	str	x0, [x21, #32]
     ef0:	b	ec8 <inflate+0x968>
     ef4:	cmp	w19, #0xf
     ef8:	b.hi	f24 <inflate+0x9c4>  // b.pmore
     efc:	cbz	w20, 648 <inflate+0xe8>
     f00:	sub	w20, w20, #0x1
     f04:	ldrb	w0, [x23], #1
     f08:	lsl	x0, x0, x19
     f0c:	add	x22, x22, x0
     f10:	add	w19, w19, #0x8
     f14:	cmp	w19, #0xf
     f18:	b.hi	f24 <inflate+0x9c4>  // b.pmore
     f1c:	cbnz	w20, f00 <inflate+0x9a0>
     f20:	b	648 <inflate+0xe8>
     f24:	ldr	w0, [x21, #16]
     f28:	tbz	w0, #2, f50 <inflate+0x9f0>
     f2c:	ldrh	w0, [x21, #32]
     f30:	cmp	x0, x22
     f34:	b.eq	f5c <inflate+0x9fc>  // b.none
     f38:	adrp	x0, 0 <inflateStateCheck>
     f3c:	add	x0, x0, #0x0
     f40:	str	x0, [x24, #48]
     f44:	mov	w0, #0x3f51                	// #16209
     f48:	str	w0, [x21, #8]
     f4c:	b	5f0 <inflate+0x90>
     f50:	mov	w19, #0x0                   	// #0
     f54:	mov	x22, #0x0                   	// #0
     f58:	b	cd4 <inflate+0x774>
     f5c:	mov	w19, #0x0                   	// #0
     f60:	mov	x22, #0x0                   	// #0
     f64:	b	cd4 <inflate+0x774>
     f68:	lsr	w0, w22, #24
     f6c:	lsr	x1, x22, #8
     f70:	and	x1, x1, #0xff00
     f74:	orr	x0, x0, x1
     f78:	lsl	x1, x22, #8
     f7c:	and	x1, x1, #0xff0000
     f80:	lsl	w22, w22, #24
     f84:	add	x1, x1, x22
     f88:	add	x0, x0, x1
     f8c:	str	x0, [x21, #32]
     f90:	str	x0, [x24, #96]
     f94:	mov	w0, #0x3f3e                	// #16190
     f98:	str	w0, [x21, #8]
     f9c:	mov	w19, #0x0                   	// #0
     fa0:	mov	x22, #0x0                   	// #0
     fa4:	ldr	w0, [x21, #20]
     fa8:	cbz	w0, ffc <inflate+0xa9c>
     fac:	mov	w2, #0x0                   	// #0
     fb0:	mov	x1, #0x0                   	// #0
     fb4:	mov	x0, #0x0                   	// #0
     fb8:	bl	0 <adler32>
     fbc:	str	x0, [x21, #32]
     fc0:	str	x0, [x24, #96]
     fc4:	mov	w0, #0x3f3f                	// #16191
     fc8:	str	w0, [x21, #8]
     fcc:	ldr	w0, [sp, #104]
     fd0:	sub	w0, w0, #0x5
     fd4:	cmp	w0, #0x1
     fd8:	b.ls	648 <inflate+0xe8>  // b.plast
     fdc:	ldr	w0, [x21, #12]
     fe0:	cbz	w0, 1030 <inflate+0xad0>
     fe4:	and	w0, w19, #0x7
     fe8:	lsr	x22, x22, x0
     fec:	and	w19, w19, #0xfffffff8
     ff0:	mov	w0, #0x3f4e                	// #16206
     ff4:	str	w0, [x21, #8]
     ff8:	b	5f0 <inflate+0x90>
     ffc:	str	x27, [x24, #24]
    1000:	str	w26, [x24, #32]
    1004:	str	x23, [x24]
    1008:	str	w20, [x24, #8]
    100c:	str	x22, [x21, #80]
    1010:	str	w19, [x21, #88]
    1014:	mov	w0, #0x2                   	// #2
    1018:	str	w0, [sp, #96]
    101c:	ldp	x19, x20, [sp, #16]
    1020:	ldp	x21, x22, [sp, #32]
    1024:	ldp	x25, x26, [sp, #64]
    1028:	ldp	x27, x28, [sp, #80]
    102c:	b	78c <inflate+0x22c>
    1030:	cmp	w19, #0x2
    1034:	b.hi	1050 <inflate+0xaf0>  // b.pmore
    1038:	cbz	w20, 648 <inflate+0xe8>
    103c:	sub	w20, w20, #0x1
    1040:	ldrb	w0, [x23], #1
    1044:	lsl	x0, x0, x19
    1048:	add	x22, x22, x0
    104c:	add	w19, w19, #0x8
    1050:	and	w0, w22, #0x1
    1054:	str	w0, [x21, #12]
    1058:	ubfx	w0, w22, #1, #2
    105c:	cmp	w0, #0x2
    1060:	b.eq	10cc <inflate+0xb6c>  // b.none
    1064:	cmp	w0, #0x2
    1068:	b.hi	10d8 <inflate+0xb78>  // b.pmore
    106c:	cbz	w0, 10b8 <inflate+0xb58>
    1070:	cmp	w0, #0x1
    1074:	b.ne	10c0 <inflate+0xb60>  // b.any
    1078:	ldr	x1, [sp, #128]
    107c:	str	x1, [x21, #104]
    1080:	mov	w0, #0x9                   	// #9
    1084:	str	w0, [x21, #120]
    1088:	add	x0, x1, #0x800
    108c:	str	x0, [x21, #112]
    1090:	mov	w0, #0x5                   	// #5
    1094:	str	w0, [x21, #124]
    1098:	mov	w0, #0x3f47                	// #16199
    109c:	str	w0, [x21, #8]
    10a0:	ldr	w0, [sp, #104]
    10a4:	cmp	w0, #0x6
    10a8:	b.ne	10c0 <inflate+0xb60>  // b.any
    10ac:	lsr	x22, x22, #3
    10b0:	sub	w19, w19, #0x3
    10b4:	b	648 <inflate+0xe8>
    10b8:	mov	w0, #0x3f41                	// #16193
    10bc:	str	w0, [x21, #8]
    10c0:	lsr	x22, x22, #3
    10c4:	sub	w19, w19, #0x3
    10c8:	b	5f0 <inflate+0x90>
    10cc:	mov	w0, #0x3f44                	// #16196
    10d0:	str	w0, [x21, #8]
    10d4:	b	10c0 <inflate+0xb60>
    10d8:	adrp	x0, 0 <inflateStateCheck>
    10dc:	add	x0, x0, #0x0
    10e0:	str	x0, [x24, #48]
    10e4:	mov	w0, #0x3f51                	// #16209
    10e8:	str	w0, [x21, #8]
    10ec:	b	10c0 <inflate+0xb60>
    10f0:	and	w0, w19, #0x7
    10f4:	lsr	x22, x22, x0
    10f8:	and	w19, w19, #0xfffffff8
    10fc:	cmp	w19, #0x1f
    1100:	b.hi	112c <inflate+0xbcc>  // b.pmore
    1104:	cbz	w20, 648 <inflate+0xe8>
    1108:	sub	w20, w20, #0x1
    110c:	ldrb	w0, [x23], #1
    1110:	lsl	x0, x0, x19
    1114:	add	x22, x22, x0
    1118:	add	w19, w19, #0x8
    111c:	cmp	w19, #0x1f
    1120:	b.hi	112c <inflate+0xbcc>  // b.pmore
    1124:	cbnz	w20, 1108 <inflate+0xba8>
    1128:	b	648 <inflate+0xe8>
    112c:	lsr	x0, x22, #16
    1130:	eor	x0, x0, #0xffff
    1134:	cmp	x0, w22, uxth
    1138:	b.eq	1154 <inflate+0xbf4>  // b.none
    113c:	adrp	x0, 0 <inflateStateCheck>
    1140:	add	x0, x0, #0x0
    1144:	str	x0, [x24, #48]
    1148:	mov	w0, #0x3f51                	// #16209
    114c:	str	w0, [x21, #8]
    1150:	b	5f0 <inflate+0x90>
    1154:	and	w22, w22, #0xffff
    1158:	str	w22, [x21, #92]
    115c:	mov	w0, #0x3f42                	// #16194
    1160:	str	w0, [x21, #8]
    1164:	ldr	w0, [sp, #104]
    1168:	cmp	w0, #0x6
    116c:	b.eq	1db4 <inflate+0x1854>  // b.none
    1170:	mov	w19, #0x0                   	// #0
    1174:	mov	x22, #0x0                   	// #0
    1178:	mov	w0, #0x3f43                	// #16195
    117c:	str	w0, [x21, #8]
    1180:	ldr	w0, [x21, #92]
    1184:	cbz	w0, 11d8 <inflate+0xc78>
    1188:	cmp	w26, w0
    118c:	csel	w0, w26, w0, ls  // ls = plast
    1190:	cmp	w20, w0
    1194:	csel	w28, w20, w0, ls  // ls = plast
    1198:	cbz	w28, 648 <inflate+0xe8>
    119c:	mov	w0, w28
    11a0:	str	x0, [sp, #112]
    11a4:	mov	x2, x0
    11a8:	mov	x1, x23
    11ac:	mov	x0, x27
    11b0:	bl	0 <memcpy>
    11b4:	sub	w20, w20, w28
    11b8:	ldr	x0, [sp, #112]
    11bc:	add	x23, x23, x0
    11c0:	sub	w26, w26, w28
    11c4:	add	x27, x27, x0
    11c8:	ldr	w0, [x21, #92]
    11cc:	sub	w0, w0, w28
    11d0:	str	w0, [x21, #92]
    11d4:	b	5f0 <inflate+0x90>
    11d8:	mov	w0, #0x3f3f                	// #16191
    11dc:	str	w0, [x21, #8]
    11e0:	b	5f0 <inflate+0x90>
    11e4:	and	w2, w22, #0x1f
    11e8:	add	w2, w2, #0x101
    11ec:	str	w2, [x21, #132]
    11f0:	ubfx	w1, w22, #5, #5
    11f4:	add	w1, w1, #0x1
    11f8:	str	w1, [x21, #136]
    11fc:	ubfx	w0, w22, #10, #4
    1200:	add	w0, w0, #0x4
    1204:	str	w0, [x21, #128]
    1208:	lsr	x22, x22, #14
    120c:	sub	w19, w19, #0xe
    1210:	cmp	w2, #0x11e
    1214:	ccmp	w1, #0x1e, #0x2, ls  // ls = plast
    1218:	b.ls	1234 <inflate+0xcd4>  // b.plast
    121c:	adrp	x0, 0 <inflateStateCheck>
    1220:	add	x0, x0, #0x0
    1224:	str	x0, [x24, #48]
    1228:	mov	w0, #0x3f51                	// #16209
    122c:	str	w0, [x21, #8]
    1230:	b	5f0 <inflate+0x90>
    1234:	str	wzr, [x21, #140]
    1238:	mov	w1, #0x3f45                	// #16197
    123c:	str	w1, [x21, #8]
    1240:	mov	w1, #0x0                   	// #0
    1244:	b	1320 <inflate+0xdc0>
    1248:	ldr	w1, [x21, #140]
    124c:	ldr	w0, [x21, #128]
    1250:	cmp	w1, w0
    1254:	b.cc	1320 <inflate+0xdc0>  // b.lo, b.ul, b.last
    1258:	ldr	w0, [x21, #140]
    125c:	cmp	w0, #0x12
    1260:	b.hi	12a0 <inflate+0xd40>  // b.pmore
    1264:	ldr	x1, [sp, #120]
    1268:	add	x1, x1, w0, uxtw #1
    126c:	mov	w2, #0x12                  	// #18
    1270:	sub	w2, w2, w0
    1274:	add	x0, x2, w0, uxtw
    1278:	ldr	x2, [sp, #128]
    127c:	add	x2, x2, #0x882
    1280:	add	x2, x2, x0, lsl #1
    1284:	ldrh	w0, [x1], #2
    1288:	add	x0, x21, x0, lsl #1
    128c:	strh	wzr, [x0, #152]
    1290:	cmp	x1, x2
    1294:	b.ne	1284 <inflate+0xd24>  // b.any
    1298:	mov	w0, #0x13                  	// #19
    129c:	str	w0, [x21, #140]
    12a0:	add	x0, x21, #0x558
    12a4:	str	x0, [x21, #144]
    12a8:	str	x0, [x21, #104]
    12ac:	mov	w0, #0x7                   	// #7
    12b0:	str	w0, [x21, #120]
    12b4:	add	x5, x21, #0x318
    12b8:	add	x4, x21, #0x78
    12bc:	add	x3, x21, #0x90
    12c0:	mov	w2, #0x13                  	// #19
    12c4:	add	x1, x21, #0x98
    12c8:	mov	w0, #0x0                   	// #0
    12cc:	bl	0 <inflate_table>
    12d0:	str	w0, [sp, #96]
    12d4:	cbz	w0, 1344 <inflate+0xde4>
    12d8:	adrp	x0, 0 <inflateStateCheck>
    12dc:	add	x0, x0, #0x0
    12e0:	str	x0, [x24, #48]
    12e4:	mov	w0, #0x3f51                	// #16209
    12e8:	str	w0, [x21, #8]
    12ec:	b	5f0 <inflate+0x90>
    12f0:	add	w2, w1, #0x1
    12f4:	str	w2, [x21, #140]
    12f8:	ldr	x3, [sp, #120]
    12fc:	ldrh	w1, [x3, w1, uxtw #1]
    1300:	add	x1, x21, x1, lsl #1
    1304:	and	w3, w22, #0x7
    1308:	strh	w3, [x1, #152]
    130c:	lsr	x22, x22, #3
    1310:	sub	w19, w19, #0x3
    1314:	cmp	w2, w0
    1318:	b.cs	1258 <inflate+0xcf8>  // b.hs, b.nlast
    131c:	mov	w1, w2
    1320:	cmp	w19, #0x2
    1324:	b.hi	12f0 <inflate+0xd90>  // b.pmore
    1328:	cbz	w20, 648 <inflate+0xe8>
    132c:	sub	w20, w20, #0x1
    1330:	ldrb	w2, [x23], #1
    1334:	lsl	x2, x2, x19
    1338:	add	x22, x22, x2
    133c:	add	w19, w19, #0x8
    1340:	b	12f0 <inflate+0xd90>
    1344:	str	wzr, [x21, #140]
    1348:	mov	w0, #0x3f46                	// #16198
    134c:	str	w0, [x21, #8]
    1350:	mov	w6, #0x0                   	// #0
    1354:	ldr	w2, [x21, #132]
    1358:	ldr	w7, [x21, #136]
    135c:	add	w7, w2, w7
    1360:	cbnz	w7, 155c <inflate+0xffc>
    1364:	b	13a4 <inflate+0xe44>
    1368:	cmp	w0, #0xf
    136c:	b.hi	13c4 <inflate+0xe64>  // b.pmore
    1370:	lsr	x22, x22, x1
    1374:	sub	w19, w19, w5
    1378:	add	w1, w6, #0x1
    137c:	str	w1, [x21, #140]
    1380:	add	x6, x21, w6, uxtw #1
    1384:	strh	w0, [x6, #152]
    1388:	ldr	w6, [x21, #140]
    138c:	cmp	w6, w7
    1390:	b.cc	157c <inflate+0x101c>  // b.lo, b.ul, b.last
    1394:	ldr	w1, [x21, #8]
    1398:	mov	w0, #0x3f51                	// #16209
    139c:	cmp	w1, w0
    13a0:	b.eq	5f0 <inflate+0x90>  // b.none
    13a4:	ldrh	w0, [x21, #664]
    13a8:	cbnz	w0, 15d4 <inflate+0x1074>
    13ac:	adrp	x0, 0 <inflateStateCheck>
    13b0:	add	x0, x0, #0x0
    13b4:	str	x0, [x24, #48]
    13b8:	mov	w0, #0x3f51                	// #16209
    13bc:	str	w0, [x21, #8]
    13c0:	b	5f0 <inflate+0x90>
    13c4:	cmp	w0, #0x10
    13c8:	b.eq	140c <inflate+0xeac>  // b.none
    13cc:	cmp	w0, #0x11
    13d0:	b.eq	1488 <inflate+0xf28>  // b.none
    13d4:	mov	w11, w1
    13d8:	add	w1, w1, #0x7
    13dc:	cmp	w1, w19
    13e0:	b.ls	14e0 <inflate+0xf80>  // b.plast
    13e4:	cbz	w20, 648 <inflate+0xe8>
    13e8:	sub	w20, w20, #0x1
    13ec:	ldrb	w0, [x23], #1
    13f0:	lsl	x0, x0, x19
    13f4:	add	x22, x22, x0
    13f8:	add	w19, w19, #0x8
    13fc:	cmp	w19, w1
    1400:	b.cs	14e0 <inflate+0xf80>  // b.hs, b.nlast
    1404:	cbnz	w20, 13e8 <inflate+0xe88>
    1408:	b	648 <inflate+0xe8>
    140c:	mov	w11, w1
    1410:	add	w1, w1, #0x2
    1414:	cmp	w1, w19
    1418:	b.ls	1444 <inflate+0xee4>  // b.plast
    141c:	cbz	w20, 648 <inflate+0xe8>
    1420:	sub	w20, w20, #0x1
    1424:	ldrb	w0, [x23], #1
    1428:	lsl	x0, x0, x19
    142c:	add	x22, x22, x0
    1430:	add	w19, w19, #0x8
    1434:	cmp	w19, w1
    1438:	b.cs	1444 <inflate+0xee4>  // b.hs, b.nlast
    143c:	cbnz	w20, 1420 <inflate+0xec0>
    1440:	b	648 <inflate+0xe8>
    1444:	lsr	x22, x22, x11
    1448:	sub	w19, w19, w5
    144c:	cbz	w6, 1470 <inflate+0xf10>
    1450:	sub	w0, w6, #0x1
    1454:	add	x0, x21, x0, lsl #1
    1458:	ldrh	w11, [x0, #152]
    145c:	and	w1, w22, #0x3
    1460:	add	w1, w1, #0x3
    1464:	lsr	x22, x22, #2
    1468:	sub	w19, w19, #0x2
    146c:	b	14fc <inflate+0xf9c>
    1470:	adrp	x0, 0 <inflateStateCheck>
    1474:	add	x0, x0, #0x0
    1478:	str	x0, [x24, #48]
    147c:	mov	w0, #0x3f51                	// #16209
    1480:	str	w0, [x21, #8]
    1484:	b	5f0 <inflate+0x90>
    1488:	mov	w11, w1
    148c:	add	w1, w1, #0x3
    1490:	cmp	w1, w19
    1494:	b.ls	14c0 <inflate+0xf60>  // b.plast
    1498:	cbz	w20, 648 <inflate+0xe8>
    149c:	sub	w20, w20, #0x1
    14a0:	ldrb	w0, [x23], #1
    14a4:	lsl	x0, x0, x19
    14a8:	add	x22, x22, x0
    14ac:	add	w19, w19, #0x8
    14b0:	cmp	w19, w1
    14b4:	b.cs	14c0 <inflate+0xf60>  // b.hs, b.nlast
    14b8:	cbnz	w20, 149c <inflate+0xf3c>
    14bc:	b	648 <inflate+0xe8>
    14c0:	lsr	x22, x22, x11
    14c4:	and	w1, w22, #0x7
    14c8:	add	w1, w1, #0x3
    14cc:	lsr	x22, x22, #3
    14d0:	sub	w5, w10, w5
    14d4:	add	w19, w19, w5
    14d8:	mov	w11, w8
    14dc:	b	14fc <inflate+0xf9c>
    14e0:	lsr	x22, x22, x11
    14e4:	and	w1, w22, #0x7f
    14e8:	add	w1, w1, #0xb
    14ec:	lsr	x22, x22, #7
    14f0:	sub	w5, w9, w5
    14f4:	add	w19, w19, w5
    14f8:	mov	w11, w8
    14fc:	add	w6, w1, w6
    1500:	cmp	w6, w7
    1504:	b.hi	152c <inflate+0xfcc>  // b.pmore
    1508:	ldr	w0, [x21, #140]
    150c:	add	w5, w0, w1
    1510:	add	x1, x21, w0, uxtw #1
    1514:	strh	w11, [x1, #152]
    1518:	add	w0, w0, #0x1
    151c:	cmp	w0, w5
    1520:	b.ne	1510 <inflate+0xfb0>  // b.any
    1524:	str	w5, [x21, #140]
    1528:	b	1388 <inflate+0xe28>
    152c:	adrp	x0, 0 <inflateStateCheck>
    1530:	add	x0, x0, #0x0
    1534:	str	x0, [x24, #48]
    1538:	mov	w0, #0x3f51                	// #16209
    153c:	str	w0, [x21, #8]
    1540:	b	5f0 <inflate+0x90>
    1544:	ldr	w6, [x21, #140]
    1548:	ldr	w2, [x21, #132]
    154c:	ldr	w7, [x21, #136]
    1550:	add	w7, w2, w7
    1554:	cmp	w6, w7
    1558:	b.cs	1394 <inflate+0xe34>  // b.hs, b.nlast
    155c:	ldr	x4, [x21, #104]
    1560:	ldr	w0, [x21, #120]
    1564:	mov	w3, #0xffffffff            	// #-1
    1568:	lsl	w3, w3, w0
    156c:	mvn	w3, w3
    1570:	mov	w10, #0xfffffffd            	// #-3
    1574:	mov	w8, #0x0                   	// #0
    1578:	mov	w9, #0xfffffff9            	// #-7
    157c:	and	w0, w3, w22
    1580:	add	x0, x4, x0, lsl #2
    1584:	ldrb	w1, [x0, #1]
    1588:	ldrh	w0, [x0, #2]
    158c:	mov	w5, w1
    1590:	cmp	w1, w19
    1594:	b.ls	1368 <inflate+0xe08>  // b.plast
    1598:	cbz	w20, 648 <inflate+0xe8>
    159c:	sub	w20, w20, #0x1
    15a0:	ldrb	w0, [x23], #1
    15a4:	lsl	x0, x0, x19
    15a8:	add	x22, x22, x0
    15ac:	add	w19, w19, #0x8
    15b0:	and	w0, w3, w22
    15b4:	add	x0, x4, x0, lsl #2
    15b8:	ldrb	w1, [x0, #1]
    15bc:	ldrh	w0, [x0, #2]
    15c0:	mov	w5, w1
    15c4:	cmp	w1, w19
    15c8:	b.ls	1368 <inflate+0xe08>  // b.plast
    15cc:	cbnz	w20, 159c <inflate+0x103c>
    15d0:	b	648 <inflate+0xe8>
    15d4:	add	x0, x21, #0x558
    15d8:	str	x0, [x21, #144]
    15dc:	str	x0, [x21, #104]
    15e0:	mov	w0, #0x9                   	// #9
    15e4:	str	w0, [x21, #120]
    15e8:	add	x28, x21, #0x98
    15ec:	add	x3, x21, #0x90
    15f0:	str	x3, [sp, #112]
    15f4:	add	x0, x21, #0x318
    15f8:	str	x0, [sp, #136]
    15fc:	mov	x5, x0
    1600:	add	x4, x21, #0x78
    1604:	mov	x1, x28
    1608:	mov	w0, #0x1                   	// #1
    160c:	bl	0 <inflate_table>
    1610:	str	w0, [sp, #96]
    1614:	cbz	w0, 1630 <inflate+0x10d0>
    1618:	adrp	x0, 0 <inflateStateCheck>
    161c:	add	x0, x0, #0x0
    1620:	str	x0, [x24, #48]
    1624:	mov	w0, #0x3f51                	// #16209
    1628:	str	w0, [x21, #8]
    162c:	b	5f0 <inflate+0x90>
    1630:	ldr	x0, [x21, #144]
    1634:	str	x0, [x21, #112]
    1638:	mov	x4, x21
    163c:	mov	w0, #0x6                   	// #6
    1640:	str	w0, [x4, #124]!
    1644:	ldr	w1, [x21, #132]
    1648:	ldr	x5, [sp, #136]
    164c:	ldr	x3, [sp, #112]
    1650:	ldr	w2, [x21, #136]
    1654:	add	x1, x28, x1, lsl #1
    1658:	mov	w0, #0x2                   	// #2
    165c:	bl	0 <inflate_table>
    1660:	str	w0, [sp, #96]
    1664:	cbz	w0, 1680 <inflate+0x1120>
    1668:	adrp	x0, 0 <inflateStateCheck>
    166c:	add	x0, x0, #0x0
    1670:	str	x0, [x24, #48]
    1674:	mov	w0, #0x3f51                	// #16209
    1678:	str	w0, [x21, #8]
    167c:	b	5f0 <inflate+0x90>
    1680:	mov	w0, #0x3f47                	// #16199
    1684:	str	w0, [x21, #8]
    1688:	ldr	w0, [sp, #104]
    168c:	cmp	w0, #0x6
    1690:	b.eq	648 <inflate+0xe8>  // b.none
    1694:	mov	w0, #0x3f48                	// #16200
    1698:	str	w0, [x21, #8]
    169c:	cmp	w26, #0x101
    16a0:	ccmp	w20, #0x5, #0x0, hi  // hi = pmore
    16a4:	b.ls	1700 <inflate+0x11a0>  // b.plast
    16a8:	str	x27, [x24, #24]
    16ac:	str	w26, [x24, #32]
    16b0:	str	x23, [x24]
    16b4:	str	w20, [x24, #8]
    16b8:	str	x22, [x21, #80]
    16bc:	str	w19, [x21, #88]
    16c0:	ldr	w1, [sp, #100]
    16c4:	mov	x0, x24
    16c8:	bl	0 <inflate_fast>
    16cc:	ldr	x27, [x24, #24]
    16d0:	ldr	w26, [x24, #32]
    16d4:	ldr	x23, [x24]
    16d8:	ldr	w20, [x24, #8]
    16dc:	ldr	x22, [x21, #80]
    16e0:	ldr	w19, [x21, #88]
    16e4:	ldr	w1, [x21, #8]
    16e8:	mov	w0, #0x3f3f                	// #16191
    16ec:	cmp	w1, w0
    16f0:	b.ne	5f0 <inflate+0x90>  // b.any
    16f4:	mov	w0, #0xffffffff            	// #-1
    16f8:	str	w0, [x21, #7148]
    16fc:	b	5f0 <inflate+0x90>
    1700:	str	wzr, [x21, #7148]
    1704:	ldr	x2, [x21, #104]
    1708:	ldr	w1, [x21, #120]
    170c:	mov	w0, #0xffffffff            	// #-1
    1710:	lsl	w0, w0, w1
    1714:	mvn	w5, w0
    1718:	bic	w0, w22, w0
    171c:	lsl	x0, x0, #2
    1720:	add	x1, x2, x0
    1724:	ldrb	w3, [x2, x0]
    1728:	ldrb	w0, [x1, #1]
    172c:	ldrh	w1, [x1, #2]
    1730:	mov	w4, w0
    1734:	cmp	w19, w0
    1738:	b.cs	1780 <inflate+0x1220>  // b.hs, b.nlast
    173c:	cbz	w20, 648 <inflate+0xe8>
    1740:	sub	w20, w20, #0x1
    1744:	ldrb	w0, [x23], #1
    1748:	lsl	x0, x0, x19
    174c:	add	x22, x22, x0
    1750:	add	w19, w19, #0x8
    1754:	and	w0, w5, w22
    1758:	lsl	x0, x0, #2
    175c:	add	x1, x2, x0
    1760:	ldrb	w3, [x2, x0]
    1764:	ldrb	w0, [x1, #1]
    1768:	ldrh	w1, [x1, #2]
    176c:	mov	w4, w0
    1770:	cmp	w0, w19
    1774:	b.ls	1780 <inflate+0x1220>  // b.plast
    1778:	cbnz	w20, 1740 <inflate+0x11e0>
    177c:	b	648 <inflate+0xe8>
    1780:	cbz	w3, 178c <inflate+0x122c>
    1784:	tst	w3, #0xf0
    1788:	b.eq	17b4 <inflate+0x1254>  // b.none
    178c:	lsr	x22, x22, x0
    1790:	sub	w19, w19, w0
    1794:	ldr	w2, [x21, #7148]
    1798:	add	w0, w2, w0
    179c:	str	w0, [x21, #7148]
    17a0:	str	w1, [x21, #92]
    17a4:	cbnz	w3, 1854 <inflate+0x12f4>
    17a8:	mov	w0, #0x3f4d                	// #16205
    17ac:	str	w0, [x21, #8]
    17b0:	b	5f0 <inflate+0x90>
    17b4:	mov	w7, w1
    17b8:	mov	w5, w0
    17bc:	add	w3, w3, w0
    17c0:	mov	w6, #0xffffffff            	// #-1
    17c4:	lsl	w3, w6, w3
    17c8:	mvn	w8, w3
    17cc:	bic	w3, w22, w3
    17d0:	lsr	w0, w3, w0
    17d4:	add	w0, w0, w1
    17d8:	lsl	x0, x0, #2
    17dc:	add	x1, x2, x0
    17e0:	ldrb	w3, [x2, x0]
    17e4:	ldrb	w0, [x1, #1]
    17e8:	ldrh	w1, [x1, #2]
    17ec:	add	w6, w0, w5
    17f0:	cmp	w6, w19
    17f4:	b.ls	1844 <inflate+0x12e4>  // b.plast
    17f8:	cbz	w20, 648 <inflate+0xe8>
    17fc:	sub	w20, w20, #0x1
    1800:	ldrb	w0, [x23], #1
    1804:	lsl	x0, x0, x19
    1808:	add	x22, x22, x0
    180c:	add	w19, w19, #0x8
    1810:	and	w0, w8, w22
    1814:	lsr	w0, w0, w5
    1818:	add	w0, w0, w7
    181c:	lsl	x0, x0, #2
    1820:	add	x1, x2, x0
    1824:	ldrb	w3, [x2, x0]
    1828:	ldrb	w0, [x1, #1]
    182c:	ldrh	w1, [x1, #2]
    1830:	add	w6, w0, w5
    1834:	cmp	w6, w19
    1838:	b.ls	1844 <inflate+0x12e4>  // b.plast
    183c:	cbnz	w20, 17fc <inflate+0x129c>
    1840:	b	648 <inflate+0xe8>
    1844:	lsr	x22, x22, x5
    1848:	sub	w19, w19, w4
    184c:	str	w5, [x21, #7148]
    1850:	b	178c <inflate+0x122c>
    1854:	tbz	w3, #5, 186c <inflate+0x130c>
    1858:	mov	w0, #0xffffffff            	// #-1
    185c:	str	w0, [x21, #7148]
    1860:	mov	w0, #0x3f3f                	// #16191
    1864:	str	w0, [x21, #8]
    1868:	b	5f0 <inflate+0x90>
    186c:	tbz	w3, #6, 1888 <inflate+0x1328>
    1870:	adrp	x0, 0 <inflateStateCheck>
    1874:	add	x0, x0, #0x0
    1878:	str	x0, [x24, #48]
    187c:	mov	w0, #0x3f51                	// #16209
    1880:	str	w0, [x21, #8]
    1884:	b	5f0 <inflate+0x90>
    1888:	and	w3, w3, #0xf
    188c:	str	w3, [x21, #100]
    1890:	mov	w0, #0x3f49                	// #16201
    1894:	str	w0, [x21, #8]
    1898:	ldr	w1, [x21, #100]
    189c:	cbz	w1, 18fc <inflate+0x139c>
    18a0:	cmp	w1, w19
    18a4:	b.ls	18d0 <inflate+0x1370>  // b.plast
    18a8:	cbz	w20, 648 <inflate+0xe8>
    18ac:	sub	w20, w20, #0x1
    18b0:	ldrb	w0, [x23], #1
    18b4:	lsl	x0, x0, x19
    18b8:	add	x22, x22, x0
    18bc:	add	w19, w19, #0x8
    18c0:	cmp	w1, w19
    18c4:	b.ls	18d0 <inflate+0x1370>  // b.plast
    18c8:	cbnz	w20, 18ac <inflate+0x134c>
    18cc:	b	648 <inflate+0xe8>
    18d0:	mov	w0, #0xffffffff            	// #-1
    18d4:	lsl	w0, w0, w1
    18d8:	bic	w0, w22, w0
    18dc:	ldr	w2, [x21, #92]
    18e0:	add	w0, w2, w0
    18e4:	str	w0, [x21, #92]
    18e8:	lsr	x22, x22, x1
    18ec:	sub	w19, w19, w1
    18f0:	ldr	w0, [x21, #7148]
    18f4:	add	w1, w0, w1
    18f8:	str	w1, [x21, #7148]
    18fc:	ldr	w0, [x21, #92]
    1900:	str	w0, [x21, #7152]
    1904:	mov	w0, #0x3f4a                	// #16202
    1908:	str	w0, [x21, #8]
    190c:	ldr	x2, [x21, #112]
    1910:	ldr	w1, [x21, #124]
    1914:	mov	w0, #0xffffffff            	// #-1
    1918:	lsl	w0, w0, w1
    191c:	mvn	w5, w0
    1920:	bic	w0, w22, w0
    1924:	lsl	x0, x0, #2
    1928:	add	x1, x2, x0
    192c:	ldrb	w3, [x2, x0]
    1930:	ldrb	w0, [x1, #1]
    1934:	ldrh	w1, [x1, #2]
    1938:	mov	w4, w0
    193c:	cmp	w19, w0
    1940:	b.cs	1988 <inflate+0x1428>  // b.hs, b.nlast
    1944:	cbz	w20, 648 <inflate+0xe8>
    1948:	sub	w20, w20, #0x1
    194c:	ldrb	w0, [x23], #1
    1950:	lsl	x0, x0, x19
    1954:	add	x22, x22, x0
    1958:	add	w19, w19, #0x8
    195c:	and	w0, w5, w22
    1960:	lsl	x0, x0, #2
    1964:	add	x1, x2, x0
    1968:	ldrb	w3, [x2, x0]
    196c:	ldrb	w0, [x1, #1]
    1970:	ldrh	w1, [x1, #2]
    1974:	mov	w4, w0
    1978:	cmp	w0, w19
    197c:	b.ls	1988 <inflate+0x1428>  // b.plast
    1980:	cbnz	w20, 1948 <inflate+0x13e8>
    1984:	b	648 <inflate+0xe8>
    1988:	tst	w3, #0xf0
    198c:	b.eq	19c0 <inflate+0x1460>  // b.none
    1990:	lsr	x22, x22, x0
    1994:	sub	w19, w19, w0
    1998:	ldr	w2, [x21, #7148]
    199c:	add	w0, w2, w0
    19a0:	str	w0, [x21, #7148]
    19a4:	tbz	w3, #6, 1a68 <inflate+0x1508>
    19a8:	adrp	x0, 0 <inflateStateCheck>
    19ac:	add	x0, x0, #0x0
    19b0:	str	x0, [x24, #48]
    19b4:	mov	w0, #0x3f51                	// #16209
    19b8:	str	w0, [x21, #8]
    19bc:	b	5f0 <inflate+0x90>
    19c0:	mov	w7, w1
    19c4:	mov	w5, w0
    19c8:	add	w3, w3, w0
    19cc:	mov	w6, #0xffffffff            	// #-1
    19d0:	lsl	w3, w6, w3
    19d4:	mvn	w8, w3
    19d8:	bic	w3, w22, w3
    19dc:	lsr	w0, w3, w0
    19e0:	add	w0, w0, w1
    19e4:	lsl	x0, x0, #2
    19e8:	add	x1, x2, x0
    19ec:	ldrb	w3, [x2, x0]
    19f0:	ldrb	w0, [x1, #1]
    19f4:	ldrh	w1, [x1, #2]
    19f8:	add	w6, w0, w5
    19fc:	cmp	w6, w19
    1a00:	b.ls	1a50 <inflate+0x14f0>  // b.plast
    1a04:	cbz	w20, 648 <inflate+0xe8>
    1a08:	sub	w20, w20, #0x1
    1a0c:	ldrb	w0, [x23], #1
    1a10:	lsl	x0, x0, x19
    1a14:	add	x22, x22, x0
    1a18:	add	w19, w19, #0x8
    1a1c:	and	w0, w8, w22
    1a20:	lsr	w0, w0, w5
    1a24:	add	w0, w0, w7
    1a28:	lsl	x0, x0, #2
    1a2c:	add	x1, x2, x0
    1a30:	ldrb	w3, [x2, x0]
    1a34:	ldrb	w0, [x1, #1]
    1a38:	ldrh	w1, [x1, #2]
    1a3c:	add	w6, w0, w5
    1a40:	cmp	w6, w19
    1a44:	b.ls	1a50 <inflate+0x14f0>  // b.plast
    1a48:	cbnz	w20, 1a08 <inflate+0x14a8>
    1a4c:	b	648 <inflate+0xe8>
    1a50:	lsr	x22, x22, x5
    1a54:	sub	w19, w19, w4
    1a58:	ldr	w2, [x21, #7148]
    1a5c:	add	w5, w2, w5
    1a60:	str	w5, [x21, #7148]
    1a64:	b	1990 <inflate+0x1430>
    1a68:	str	w1, [x21, #96]
    1a6c:	and	w3, w3, #0xf
    1a70:	str	w3, [x21, #100]
    1a74:	mov	w0, #0x3f4b                	// #16203
    1a78:	str	w0, [x21, #8]
    1a7c:	ldr	w1, [x21, #100]
    1a80:	cbnz	w1, 1ad8 <inflate+0x1578>
    1a84:	mov	w0, #0x3f4c                	// #16204
    1a88:	str	w0, [x21, #8]
    1a8c:	cbz	w26, 648 <inflate+0xe8>
    1a90:	ldr	w3, [x21, #96]
    1a94:	ldr	w1, [sp, #100]
    1a98:	sub	w0, w1, w26
    1a9c:	cmp	w3, w0
    1aa0:	b.ls	1bd8 <inflate+0x1678>  // b.plast
    1aa4:	add	w3, w3, w26
    1aa8:	sub	w0, w3, w1
    1aac:	ldr	w1, [x21, #64]
    1ab0:	cmp	w1, w0
    1ab4:	b.cs	1b38 <inflate+0x15d8>  // b.hs, b.nlast
    1ab8:	ldr	w1, [x21, #7144]
    1abc:	cbz	w1, 1b38 <inflate+0x15d8>
    1ac0:	adrp	x0, 0 <inflateStateCheck>
    1ac4:	add	x0, x0, #0x0
    1ac8:	str	x0, [x24, #48]
    1acc:	mov	w0, #0x3f51                	// #16209
    1ad0:	str	w0, [x21, #8]
    1ad4:	b	5f0 <inflate+0x90>
    1ad8:	cmp	w1, w19
    1adc:	b.ls	1b08 <inflate+0x15a8>  // b.plast
    1ae0:	cbz	w20, 648 <inflate+0xe8>
    1ae4:	sub	w20, w20, #0x1
    1ae8:	ldrb	w0, [x23], #1
    1aec:	lsl	x0, x0, x19
    1af0:	add	x22, x22, x0
    1af4:	add	w19, w19, #0x8
    1af8:	cmp	w1, w19
    1afc:	b.ls	1b08 <inflate+0x15a8>  // b.plast
    1b00:	cbnz	w20, 1ae4 <inflate+0x1584>
    1b04:	b	648 <inflate+0xe8>
    1b08:	mov	w0, #0xffffffff            	// #-1
    1b0c:	lsl	w0, w0, w1
    1b10:	bic	w0, w22, w0
    1b14:	ldr	w2, [x21, #96]
    1b18:	add	w0, w2, w0
    1b1c:	str	w0, [x21, #96]
    1b20:	lsr	x22, x22, x1
    1b24:	sub	w19, w19, w1
    1b28:	ldr	w0, [x21, #7148]
    1b2c:	add	w1, w0, w1
    1b30:	str	w1, [x21, #7148]
    1b34:	b	1a84 <inflate+0x1524>
    1b38:	ldr	w1, [x21, #68]
    1b3c:	cmp	w1, w0
    1b40:	b.cs	1bc0 <inflate+0x1660>  // b.hs, b.nlast
    1b44:	sub	w0, w0, w1
    1b48:	ldr	w2, [x21, #60]
    1b4c:	add	w1, w1, w2
    1b50:	ldr	w2, [sp, #100]
    1b54:	sub	w3, w2, w3
    1b58:	add	w1, w1, w3
    1b5c:	ldr	x3, [x21, #72]
    1b60:	add	x3, x3, x1
    1b64:	ldr	w2, [x21, #92]
    1b68:	cmp	w2, w0
    1b6c:	csel	w2, w2, w0, ls  // ls = plast
    1b70:	cmp	w26, w2
    1b74:	csel	w2, w26, w2, ls  // ls = plast
    1b78:	sub	w26, w26, w2
    1b7c:	ldr	w0, [x21, #92]
    1b80:	sub	w0, w0, w2
    1b84:	str	w0, [x21, #92]
    1b88:	sub	w2, w2, #0x1
    1b8c:	add	x4, x2, #0x1
    1b90:	mov	x0, #0x0                   	// #0
    1b94:	ldrb	w1, [x3, x0]
    1b98:	strb	w1, [x27, x0]
    1b9c:	cmp	x2, x0
    1ba0:	add	x0, x0, #0x1
    1ba4:	b.ne	1b94 <inflate+0x1634>  // b.any
    1ba8:	add	x27, x27, x4
    1bac:	ldr	w0, [x21, #92]
    1bb0:	cbnz	w0, 5f0 <inflate+0x90>
    1bb4:	mov	w0, #0x3f48                	// #16200
    1bb8:	str	w0, [x21, #8]
    1bbc:	b	5f0 <inflate+0x90>
    1bc0:	ldr	w2, [sp, #100]
    1bc4:	add	w1, w1, w2
    1bc8:	sub	w1, w1, w3
    1bcc:	ldr	x3, [x21, #72]
    1bd0:	add	x3, x3, x1
    1bd4:	b	1b64 <inflate+0x1604>
    1bd8:	sub	x3, x27, w3, uxtw
    1bdc:	ldr	w2, [x21, #92]
    1be0:	b	1b70 <inflate+0x1610>
    1be4:	cbz	w26, 648 <inflate+0xe8>
    1be8:	mov	x0, x27
    1bec:	ldr	w1, [x21, #92]
    1bf0:	strb	w1, [x0], #1
    1bf4:	sub	w26, w26, #0x1
    1bf8:	mov	w1, #0x3f48                	// #16200
    1bfc:	str	w1, [x21, #8]
    1c00:	mov	x27, x0
    1c04:	b	5f0 <inflate+0x90>
    1c08:	ldr	w0, [x21, #16]
    1c0c:	cbz	w0, 1d10 <inflate+0x17b0>
    1c10:	cmp	w19, #0x1f
    1c14:	b.hi	1c40 <inflate+0x16e0>  // b.pmore
    1c18:	cbz	w20, 648 <inflate+0xe8>
    1c1c:	sub	w20, w20, #0x1
    1c20:	ldrb	w0, [x23], #1
    1c24:	lsl	x0, x0, x19
    1c28:	add	x22, x22, x0
    1c2c:	add	w19, w19, #0x8
    1c30:	cmp	w19, #0x1f
    1c34:	b.hi	1c40 <inflate+0x16e0>  // b.pmore
    1c38:	cbnz	w20, 1c1c <inflate+0x16bc>
    1c3c:	b	648 <inflate+0xe8>
    1c40:	ldr	w0, [sp, #100]
    1c44:	sub	w2, w0, w26
    1c48:	sub	w1, w0, w26
    1c4c:	ldr	x0, [x24, #40]
    1c50:	add	x0, x0, x1
    1c54:	str	x0, [x24, #40]
    1c58:	ldr	x0, [x21, #40]
    1c5c:	add	x0, x0, x1
    1c60:	str	x0, [x21, #40]
    1c64:	ldr	w0, [x21, #16]
    1c68:	tst	x0, #0x4
    1c6c:	ccmp	w2, #0x0, #0x4, ne  // ne = any
    1c70:	b.ne	1cd4 <inflate+0x1774>  // b.any
    1c74:	ldr	w0, [x21, #16]
    1c78:	tbz	w0, #2, 1d04 <inflate+0x17a4>
    1c7c:	ldr	w1, [x21, #24]
    1c80:	mov	x0, x22
    1c84:	cbnz	w1, 1cac <inflate+0x174c>
    1c88:	lsr	w0, w22, #24
    1c8c:	lsr	x1, x22, #8
    1c90:	and	x1, x1, #0xff00
    1c94:	orr	x0, x0, x1
    1c98:	lsl	x1, x22, #8
    1c9c:	and	x1, x1, #0xff0000
    1ca0:	lsl	w2, w22, #24
    1ca4:	add	x1, x1, x2
    1ca8:	add	x0, x0, x1
    1cac:	ldr	x1, [x21, #32]
    1cb0:	cmp	x1, x0
    1cb4:	b.eq	1d58 <inflate+0x17f8>  // b.none
    1cb8:	adrp	x0, 0 <inflateStateCheck>
    1cbc:	add	x0, x0, #0x0
    1cc0:	str	x0, [x24, #48]
    1cc4:	mov	w0, #0x3f51                	// #16209
    1cc8:	str	w0, [x21, #8]
    1ccc:	str	w26, [sp, #100]
    1cd0:	b	5f0 <inflate+0x90>
    1cd4:	ldr	w0, [x21, #24]
    1cd8:	cbz	w0, 1cf4 <inflate+0x1794>
    1cdc:	sub	x1, x27, x1
    1ce0:	ldr	x0, [x21, #32]
    1ce4:	bl	0 <crc32>
    1ce8:	str	x0, [x21, #32]
    1cec:	str	x0, [x24, #96]
    1cf0:	b	1c74 <inflate+0x1714>
    1cf4:	sub	x1, x27, x1
    1cf8:	ldr	x0, [x21, #32]
    1cfc:	bl	0 <adler32>
    1d00:	b	1ce8 <inflate+0x1788>
    1d04:	str	w26, [sp, #100]
    1d08:	mov	w19, #0x0                   	// #0
    1d0c:	mov	x22, #0x0                   	// #0
    1d10:	mov	w0, #0x3f4f                	// #16207
    1d14:	str	w0, [x21, #8]
    1d18:	ldr	w0, [x21, #16]
    1d1c:	cbz	w0, 1d94 <inflate+0x1834>
    1d20:	ldr	w0, [x21, #24]
    1d24:	cbz	w0, 1d94 <inflate+0x1834>
    1d28:	cmp	w19, #0x1f
    1d2c:	b.hi	1d68 <inflate+0x1808>  // b.pmore
    1d30:	cbz	w20, 648 <inflate+0xe8>
    1d34:	sub	w20, w20, #0x1
    1d38:	ldrb	w0, [x23], #1
    1d3c:	lsl	x0, x0, x19
    1d40:	add	x22, x22, x0
    1d44:	add	w19, w19, #0x8
    1d48:	cmp	w19, #0x1f
    1d4c:	b.hi	1d68 <inflate+0x1808>  // b.pmore
    1d50:	cbnz	w20, 1d34 <inflate+0x17d4>
    1d54:	b	648 <inflate+0xe8>
    1d58:	str	w26, [sp, #100]
    1d5c:	mov	w19, #0x0                   	// #0
    1d60:	mov	x22, #0x0                   	// #0
    1d64:	b	1d10 <inflate+0x17b0>
    1d68:	ldr	w0, [x21, #40]
    1d6c:	cmp	x0, x22
    1d70:	b.eq	1d8c <inflate+0x182c>  // b.none
    1d74:	adrp	x0, 0 <inflateStateCheck>
    1d78:	add	x0, x0, #0x0
    1d7c:	str	x0, [x24, #48]
    1d80:	mov	w0, #0x3f51                	// #16209
    1d84:	str	w0, [x21, #8]
    1d88:	b	5f0 <inflate+0x90>
    1d8c:	mov	w19, #0x0                   	// #0
    1d90:	mov	x22, #0x0                   	// #0
    1d94:	mov	w0, #0x3f50                	// #16208
    1d98:	str	w0, [x21, #8]
    1d9c:	mov	w0, #0x1                   	// #1
    1da0:	str	w0, [sp, #96]
    1da4:	b	648 <inflate+0xe8>
    1da8:	mov	w0, #0xfffffffd            	// #-3
    1dac:	str	w0, [sp, #96]
    1db0:	b	648 <inflate+0xe8>
    1db4:	mov	w19, #0x0                   	// #0
    1db8:	mov	x22, #0x0                   	// #0
    1dbc:	b	648 <inflate+0xe8>
    1dc0:	mov	w0, #0x3f52                	// #16210
    1dc4:	str	w0, [x21, #8]
    1dc8:	mov	w0, #0xfffffffc            	// #-4
    1dcc:	str	w0, [sp, #96]
    1dd0:	ldp	x19, x20, [sp, #16]
    1dd4:	ldp	x21, x22, [sp, #32]
    1dd8:	ldp	x25, x26, [sp, #64]
    1ddc:	ldp	x27, x28, [sp, #80]
    1de0:	b	78c <inflate+0x22c>
    1de4:	ldr	w0, [x21, #24]
    1de8:	cbz	w0, 1e0c <inflate+0x18ac>
    1dec:	ldr	x0, [x24, #24]
    1df0:	mov	w2, w19
    1df4:	sub	x1, x0, x1
    1df8:	ldr	x0, [x21, #32]
    1dfc:	bl	0 <crc32>
    1e00:	str	x0, [x21, #32]
    1e04:	str	x0, [x24, #96]
    1e08:	b	70c <inflate+0x1ac>
    1e0c:	ldr	x0, [x24, #24]
    1e10:	mov	w2, w19
    1e14:	sub	x1, x0, x1
    1e18:	ldr	x0, [x21, #32]
    1e1c:	bl	0 <adler32>
    1e20:	b	1e00 <inflate+0x18a0>
    1e24:	mov	w0, #0xfffffffe            	// #-2
    1e28:	str	w0, [sp, #96]
    1e2c:	b	78c <inflate+0x22c>
    1e30:	mov	w0, #0xfffffffe            	// #-2
    1e34:	str	w0, [sp, #96]
    1e38:	ldp	x25, x26, [sp, #64]
    1e3c:	b	78c <inflate+0x22c>
    1e40:	mov	w0, #0xfffffffc            	// #-4
    1e44:	str	w0, [sp, #96]
    1e48:	ldp	x19, x20, [sp, #16]
    1e4c:	ldp	x21, x22, [sp, #32]
    1e50:	ldp	x25, x26, [sp, #64]
    1e54:	ldp	x27, x28, [sp, #80]
    1e58:	b	78c <inflate+0x22c>
    1e5c:	add	w0, w0, #0x80
    1e60:	b	74c <inflate+0x1ec>
    1e64:	ldr	w0, [x24, #8]
    1e68:	ldr	w1, [sp, #108]
    1e6c:	sub	w20, w1, w0
    1e70:	sub	w0, w1, w0
    1e74:	ldr	x1, [x24, #16]
    1e78:	add	x0, x1, x0
    1e7c:	str	x0, [x24, #16]
    1e80:	b	70c <inflate+0x1ac>
    1e84:	ldp	x19, x20, [sp, #16]
    1e88:	ldp	x21, x22, [sp, #32]
    1e8c:	ldp	x25, x26, [sp, #64]
    1e90:	ldp	x27, x28, [sp, #80]
    1e94:	b	78c <inflate+0x22c>

0000000000001e98 <inflateEnd>:
    1e98:	stp	x29, x30, [sp, #-32]!
    1e9c:	mov	x29, sp
    1ea0:	stp	x19, x20, [sp, #16]
    1ea4:	mov	x19, x0
    1ea8:	bl	0 <inflateStateCheck>
    1eac:	cbnz	w0, 1ef0 <inflateEnd+0x58>
    1eb0:	mov	w20, w0
    1eb4:	ldr	x0, [x19, #56]
    1eb8:	ldr	x1, [x0, #72]
    1ebc:	cbz	x1, 1ecc <inflateEnd+0x34>
    1ec0:	ldr	x2, [x19, #72]
    1ec4:	ldr	x0, [x19, #80]
    1ec8:	blr	x2
    1ecc:	ldr	x2, [x19, #72]
    1ed0:	ldr	x1, [x19, #56]
    1ed4:	ldr	x0, [x19, #80]
    1ed8:	blr	x2
    1edc:	str	xzr, [x19, #56]
    1ee0:	mov	w0, w20
    1ee4:	ldp	x19, x20, [sp, #16]
    1ee8:	ldp	x29, x30, [sp], #32
    1eec:	ret
    1ef0:	mov	w20, #0xfffffffe            	// #-2
    1ef4:	b	1ee0 <inflateEnd+0x48>

0000000000001ef8 <inflateGetDictionary>:
    1ef8:	stp	x29, x30, [sp, #-48]!
    1efc:	mov	x29, sp
    1f00:	stp	x19, x20, [sp, #16]
    1f04:	stp	x21, x22, [sp, #32]
    1f08:	mov	x20, x0
    1f0c:	mov	x22, x1
    1f10:	mov	x21, x2
    1f14:	bl	0 <inflateStateCheck>
    1f18:	cbnz	w0, 1f88 <inflateGetDictionary+0x90>
    1f1c:	mov	w19, w0
    1f20:	ldr	x20, [x20, #56]
    1f24:	ldr	w2, [x20, #64]
    1f28:	cmp	x22, #0x0
    1f2c:	ccmp	w2, #0x0, #0x4, ne  // ne = any
    1f30:	b.ne	1f54 <inflateGetDictionary+0x5c>  // b.any
    1f34:	cbz	x21, 1f40 <inflateGetDictionary+0x48>
    1f38:	ldr	w0, [x20, #64]
    1f3c:	str	w0, [x21]
    1f40:	mov	w0, w19
    1f44:	ldp	x19, x20, [sp, #16]
    1f48:	ldp	x21, x22, [sp, #32]
    1f4c:	ldp	x29, x30, [sp], #48
    1f50:	ret
    1f54:	ldr	w1, [x20, #68]
    1f58:	ldr	x3, [x20, #72]
    1f5c:	sub	w2, w2, w1
    1f60:	add	x1, x3, w1, uxtw
    1f64:	mov	x0, x22
    1f68:	bl	0 <memcpy>
    1f6c:	ldr	w2, [x20, #68]
    1f70:	ldr	w0, [x20, #64]
    1f74:	sub	x0, x0, x2
    1f78:	ldr	x1, [x20, #72]
    1f7c:	add	x0, x22, x0
    1f80:	bl	0 <memcpy>
    1f84:	b	1f34 <inflateGetDictionary+0x3c>
    1f88:	mov	w19, #0xfffffffe            	// #-2
    1f8c:	b	1f40 <inflateGetDictionary+0x48>

0000000000001f90 <inflateSetDictionary>:
    1f90:	stp	x29, x30, [sp, #-48]!
    1f94:	mov	x29, sp
    1f98:	stp	x19, x20, [sp, #16]
    1f9c:	stp	x21, x22, [sp, #32]
    1fa0:	mov	x20, x0
    1fa4:	mov	x22, x1
    1fa8:	mov	w19, w2
    1fac:	bl	0 <inflateStateCheck>
    1fb0:	cbnz	w0, 204c <inflateSetDictionary+0xbc>
    1fb4:	ldr	x21, [x20, #56]
    1fb8:	ldr	w0, [x21, #16]
    1fbc:	cbz	w0, 2000 <inflateSetDictionary+0x70>
    1fc0:	ldr	w1, [x21, #8]
    1fc4:	mov	w0, #0x3f3e                	// #16190
    1fc8:	cmp	w1, w0
    1fcc:	b.ne	2054 <inflateSetDictionary+0xc4>  // b.any
    1fd0:	mov	w2, #0x0                   	// #0
    1fd4:	mov	x1, #0x0                   	// #0
    1fd8:	mov	x0, #0x0                   	// #0
    1fdc:	bl	0 <adler32>
    1fe0:	mov	w2, w19
    1fe4:	mov	x1, x22
    1fe8:	bl	0 <adler32>
    1fec:	ldr	x1, [x21, #32]
    1ff0:	cmp	x1, x0
    1ff4:	b.eq	2010 <inflateSetDictionary+0x80>  // b.none
    1ff8:	mov	w0, #0xfffffffd            	// #-3
    1ffc:	b	202c <inflateSetDictionary+0x9c>
    2000:	ldr	w1, [x21, #8]
    2004:	mov	w0, #0x3f3e                	// #16190
    2008:	cmp	w1, w0
    200c:	b.eq	1fd0 <inflateSetDictionary+0x40>  // b.none
    2010:	mov	w2, w19
    2014:	add	x1, x22, w19, uxtw
    2018:	mov	x0, x20
    201c:	bl	d8 <updatewindow>
    2020:	cbnz	w0, 203c <inflateSetDictionary+0xac>
    2024:	mov	w1, #0x1                   	// #1
    2028:	str	w1, [x21, #20]
    202c:	ldp	x19, x20, [sp, #16]
    2030:	ldp	x21, x22, [sp, #32]
    2034:	ldp	x29, x30, [sp], #48
    2038:	ret
    203c:	mov	w0, #0x3f52                	// #16210
    2040:	str	w0, [x21, #8]
    2044:	mov	w0, #0xfffffffc            	// #-4
    2048:	b	202c <inflateSetDictionary+0x9c>
    204c:	mov	w0, #0xfffffffe            	// #-2
    2050:	b	202c <inflateSetDictionary+0x9c>
    2054:	mov	w0, #0xfffffffe            	// #-2
    2058:	b	202c <inflateSetDictionary+0x9c>

000000000000205c <inflateGetHeader>:
    205c:	stp	x29, x30, [sp, #-32]!
    2060:	mov	x29, sp
    2064:	stp	x19, x20, [sp, #16]
    2068:	mov	x20, x0
    206c:	mov	x19, x1
    2070:	bl	0 <inflateStateCheck>
    2074:	cbnz	w0, 2098 <inflateGetHeader+0x3c>
    2078:	ldr	x1, [x20, #56]
    207c:	ldr	w2, [x1, #16]
    2080:	tbz	w2, #1, 20a0 <inflateGetHeader+0x44>
    2084:	str	x19, [x1, #48]
    2088:	str	wzr, [x19, #72]
    208c:	ldp	x19, x20, [sp, #16]
    2090:	ldp	x29, x30, [sp], #32
    2094:	ret
    2098:	mov	w0, #0xfffffffe            	// #-2
    209c:	b	208c <inflateGetHeader+0x30>
    20a0:	mov	w0, #0xfffffffe            	// #-2
    20a4:	b	208c <inflateGetHeader+0x30>

00000000000020a8 <inflateSync>:
    20a8:	stp	x29, x30, [sp, #-80]!
    20ac:	mov	x29, sp
    20b0:	stp	x19, x20, [sp, #16]
    20b4:	stp	x21, x22, [sp, #32]
    20b8:	mov	x19, x0
    20bc:	bl	0 <inflateStateCheck>
    20c0:	cbnz	w0, 21e0 <inflateSync+0x138>
    20c4:	mov	w22, w0
    20c8:	ldr	x21, [x19, #56]
    20cc:	ldr	w0, [x19, #8]
    20d0:	cbnz	w0, 20e0 <inflateSync+0x38>
    20d4:	ldr	w0, [x21, #88]
    20d8:	cmp	w0, #0x7
    20dc:	b.ls	21e8 <inflateSync+0x140>  // b.plast
    20e0:	ldr	w1, [x21, #8]
    20e4:	mov	w0, #0x3f53                	// #16211
    20e8:	cmp	w1, w0
    20ec:	b.eq	215c <inflateSync+0xb4>  // b.none
    20f0:	str	w0, [x21, #8]
    20f4:	ldr	w0, [x21, #88]
    20f8:	and	w2, w0, #0x7
    20fc:	ldr	x1, [x21, #80]
    2100:	lsl	x1, x1, x2
    2104:	str	x1, [x21, #80]
    2108:	and	w0, w0, #0xfffffff8
    210c:	str	w0, [x21, #88]
    2110:	cmp	w0, #0x7
    2114:	b.ls	21d8 <inflateSync+0x130>  // b.plast
    2118:	add	x3, sp, #0x48
    211c:	sub	w0, w0, #0x8
    2120:	lsr	w2, w0, #3
    2124:	add	x4, x3, #0x1
    2128:	lsr	w0, w0, #3
    212c:	add	x0, x4, x0
    2130:	strb	w1, [x3], #1
    2134:	lsr	x1, x1, #8
    2138:	cmp	x3, x0
    213c:	b.ne	2130 <inflateSync+0x88>  // b.any
    2140:	add	w2, w2, #0x1
    2144:	str	x1, [x21, #80]
    2148:	str	wzr, [x21, #88]
    214c:	mov	x0, x21
    2150:	str	wzr, [x0, #140]!
    2154:	add	x1, sp, #0x48
    2158:	bl	6c <syncsearch>
    215c:	ldr	w2, [x19, #8]
    2160:	ldr	x1, [x19]
    2164:	add	x0, x21, #0x8c
    2168:	bl	6c <syncsearch>
    216c:	ldr	w1, [x19, #8]
    2170:	sub	w1, w1, w0
    2174:	str	w1, [x19, #8]
    2178:	mov	w1, w0
    217c:	ldr	x0, [x19]
    2180:	add	x0, x0, x1
    2184:	str	x0, [x19]
    2188:	ldr	x20, [x19, #16]
    218c:	add	x20, x1, x20
    2190:	str	x20, [x19, #16]
    2194:	ldr	w0, [x21, #140]
    2198:	cmp	w0, #0x4
    219c:	b.ne	21f0 <inflateSync+0x148>  // b.any
    21a0:	str	x23, [sp, #48]
    21a4:	ldr	x23, [x19, #40]
    21a8:	mov	x0, x19
    21ac:	bl	298 <inflateReset>
    21b0:	str	x20, [x19, #16]
    21b4:	str	x23, [x19, #40]
    21b8:	mov	w0, #0x3f3f                	// #16191
    21bc:	str	w0, [x21, #8]
    21c0:	ldr	x23, [sp, #48]
    21c4:	mov	w0, w22
    21c8:	ldp	x19, x20, [sp, #16]
    21cc:	ldp	x21, x22, [sp, #32]
    21d0:	ldp	x29, x30, [sp], #80
    21d4:	ret
    21d8:	mov	w2, #0x0                   	// #0
    21dc:	b	214c <inflateSync+0xa4>
    21e0:	mov	w22, #0xfffffffe            	// #-2
    21e4:	b	21c4 <inflateSync+0x11c>
    21e8:	mov	w22, #0xfffffffb            	// #-5
    21ec:	b	21c4 <inflateSync+0x11c>
    21f0:	mov	w22, #0xfffffffd            	// #-3
    21f4:	b	21c4 <inflateSync+0x11c>

00000000000021f8 <inflateSyncPoint>:
    21f8:	stp	x29, x30, [sp, #-32]!
    21fc:	mov	x29, sp
    2200:	str	x19, [sp, #16]
    2204:	mov	x19, x0
    2208:	bl	0 <inflateStateCheck>
    220c:	cbnz	w0, 2240 <inflateSyncPoint+0x48>
    2210:	ldr	x1, [x19, #56]
    2214:	ldr	w3, [x1, #8]
    2218:	mov	w2, #0x3f41                	// #16193
    221c:	cmp	w3, w2
    2220:	b.eq	2230 <inflateSyncPoint+0x38>  // b.none
    2224:	ldr	x19, [sp, #16]
    2228:	ldp	x29, x30, [sp], #32
    222c:	ret
    2230:	ldr	w0, [x1, #88]
    2234:	cmp	w0, #0x0
    2238:	cset	w0, eq  // eq = none
    223c:	b	2224 <inflateSyncPoint+0x2c>
    2240:	mov	w0, #0xfffffffe            	// #-2
    2244:	b	2224 <inflateSyncPoint+0x2c>

0000000000002248 <inflateCopy>:
    2248:	stp	x29, x30, [sp, #-64]!
    224c:	mov	x29, sp
    2250:	stp	x19, x20, [sp, #16]
    2254:	mov	x20, x0
    2258:	mov	x19, x1
    225c:	mov	x0, x1
    2260:	bl	0 <inflateStateCheck>
    2264:	cmp	x20, #0x0
    2268:	ccmp	w0, #0x0, #0x0, ne  // ne = any
    226c:	b.ne	23d4 <inflateCopy+0x18c>  // b.any
    2270:	stp	x21, x22, [sp, #32]
    2274:	ldr	x22, [x19, #56]
    2278:	ldr	x3, [x19, #64]
    227c:	mov	w2, #0x1bf8                	// #7160
    2280:	mov	w1, #0x1                   	// #1
    2284:	ldr	x0, [x19, #80]
    2288:	blr	x3
    228c:	mov	x21, x0
    2290:	cbz	x0, 23dc <inflateCopy+0x194>
    2294:	str	x23, [sp, #48]
    2298:	ldr	x23, [x22, #72]
    229c:	cbz	x23, 23e8 <inflateCopy+0x1a0>
    22a0:	ldr	w1, [x22, #56]
    22a4:	mov	w2, #0x1                   	// #1
    22a8:	ldr	x3, [x19, #64]
    22ac:	lsl	w1, w2, w1
    22b0:	ldr	x0, [x19, #80]
    22b4:	blr	x3
    22b8:	mov	x23, x0
    22bc:	cbz	x0, 2368 <inflateCopy+0x120>
    22c0:	ldp	x0, x1, [x19]
    22c4:	stp	x0, x1, [x20]
    22c8:	ldp	x0, x1, [x19, #16]
    22cc:	stp	x0, x1, [x20, #16]
    22d0:	ldp	x0, x1, [x19, #32]
    22d4:	stp	x0, x1, [x20, #32]
    22d8:	ldp	x0, x1, [x19, #48]
    22dc:	stp	x0, x1, [x20, #48]
    22e0:	ldp	x0, x1, [x19, #64]
    22e4:	stp	x0, x1, [x20, #64]
    22e8:	ldp	x0, x1, [x19, #80]
    22ec:	stp	x0, x1, [x20, #80]
    22f0:	ldp	x0, x1, [x19, #96]
    22f4:	stp	x0, x1, [x20, #96]
    22f8:	mov	x2, #0x1bf8                	// #7160
    22fc:	mov	x1, x22
    2300:	mov	x0, x21
    2304:	bl	0 <memcpy>
    2308:	str	x20, [x21]
    230c:	ldr	x0, [x22, #104]
    2310:	add	x1, x22, #0x558
    2314:	cmp	x0, x1
    2318:	b.cs	2388 <inflateCopy+0x140>  // b.hs, b.nlast
    231c:	add	x0, x21, #0x558
    2320:	ldr	x2, [x22, #144]
    2324:	sub	x2, x2, x1
    2328:	add	x1, x0, x2
    232c:	str	x1, [x21, #144]
    2330:	ldr	w0, [x22, #56]
    2334:	mov	w2, #0x1                   	// #1
    2338:	lsl	w2, w2, w0
    233c:	ldr	x1, [x22, #72]
    2340:	mov	x0, x23
    2344:	bl	0 <memcpy>
    2348:	str	x23, [x21, #72]
    234c:	str	x21, [x20, #56]
    2350:	mov	w0, #0x0                   	// #0
    2354:	ldp	x21, x22, [sp, #32]
    2358:	ldr	x23, [sp, #48]
    235c:	ldp	x19, x20, [sp, #16]
    2360:	ldp	x29, x30, [sp], #64
    2364:	ret
    2368:	ldr	x2, [x19, #72]
    236c:	mov	x1, x21
    2370:	ldr	x0, [x19, #80]
    2374:	blr	x2
    2378:	mov	w0, #0xfffffffc            	// #-4
    237c:	ldp	x21, x22, [sp, #32]
    2380:	ldr	x23, [sp, #48]
    2384:	b	235c <inflateCopy+0x114>
    2388:	add	x2, x22, #0x1, lsl #12
    238c:	add	x2, x2, #0xbe4
    2390:	cmp	x0, x2
    2394:	b.hi	23b8 <inflateCopy+0x170>  // b.pmore
    2398:	add	x2, x21, #0x558
    239c:	sub	x0, x0, x1
    23a0:	add	x0, x2, x0
    23a4:	str	x0, [x21, #104]
    23a8:	ldr	x0, [x22, #112]
    23ac:	sub	x0, x0, x1
    23b0:	add	x2, x2, x0
    23b4:	str	x2, [x21, #112]
    23b8:	add	x0, x21, #0x558
    23bc:	ldr	x2, [x22, #144]
    23c0:	sub	x2, x2, x1
    23c4:	add	x1, x0, x2
    23c8:	str	x1, [x21, #144]
    23cc:	cbz	x23, 2348 <inflateCopy+0x100>
    23d0:	b	2330 <inflateCopy+0xe8>
    23d4:	mov	w0, #0xfffffffe            	// #-2
    23d8:	b	235c <inflateCopy+0x114>
    23dc:	mov	w0, #0xfffffffc            	// #-4
    23e0:	ldp	x21, x22, [sp, #32]
    23e4:	b	235c <inflateCopy+0x114>
    23e8:	ldp	x0, x1, [x19]
    23ec:	stp	x0, x1, [x20]
    23f0:	ldp	x0, x1, [x19, #16]
    23f4:	stp	x0, x1, [x20, #16]
    23f8:	ldp	x0, x1, [x19, #32]
    23fc:	stp	x0, x1, [x20, #32]
    2400:	ldp	x0, x1, [x19, #48]
    2404:	stp	x0, x1, [x20, #48]
    2408:	ldp	x0, x1, [x19, #64]
    240c:	stp	x0, x1, [x20, #64]
    2410:	ldp	x0, x1, [x19, #80]
    2414:	stp	x0, x1, [x20, #80]
    2418:	ldp	x0, x1, [x19, #96]
    241c:	stp	x0, x1, [x20, #96]
    2420:	mov	x2, #0x1bf8                	// #7160
    2424:	mov	x1, x22
    2428:	mov	x0, x21
    242c:	bl	0 <memcpy>
    2430:	str	x20, [x21]
    2434:	ldr	x0, [x22, #104]
    2438:	add	x1, x22, #0x558
    243c:	cmp	x0, x1
    2440:	b.cs	2388 <inflateCopy+0x140>  // b.hs, b.nlast
    2444:	add	x0, x21, #0x558
    2448:	ldr	x2, [x22, #144]
    244c:	sub	x2, x2, x1
    2450:	add	x1, x0, x2
    2454:	str	x1, [x21, #144]
    2458:	b	2348 <inflateCopy+0x100>

000000000000245c <inflateUndermine>:
    245c:	stp	x29, x30, [sp, #-32]!
    2460:	mov	x29, sp
    2464:	str	x19, [sp, #16]
    2468:	mov	x19, x0
    246c:	bl	0 <inflateStateCheck>
    2470:	cbnz	w0, 2490 <inflateUndermine+0x34>
    2474:	ldr	x0, [x19, #56]
    2478:	mov	w1, #0x1                   	// #1
    247c:	str	w1, [x0, #7144]
    2480:	mov	w0, #0xfffffffd            	// #-3
    2484:	ldr	x19, [sp, #16]
    2488:	ldp	x29, x30, [sp], #32
    248c:	ret
    2490:	mov	w0, #0xfffffffe            	// #-2
    2494:	b	2484 <inflateUndermine+0x28>

0000000000002498 <inflateValidate>:
    2498:	stp	x29, x30, [sp, #-32]!
    249c:	mov	x29, sp
    24a0:	stp	x19, x20, [sp, #16]
    24a4:	mov	x20, x0
    24a8:	mov	w19, w1
    24ac:	bl	0 <inflateStateCheck>
    24b0:	cbnz	w0, 24e8 <inflateValidate+0x50>
    24b4:	ldr	x1, [x20, #56]
    24b8:	cbz	w19, 24d4 <inflateValidate+0x3c>
    24bc:	ldr	w2, [x1, #16]
    24c0:	orr	w2, w2, #0x4
    24c4:	str	w2, [x1, #16]
    24c8:	ldp	x19, x20, [sp, #16]
    24cc:	ldp	x29, x30, [sp], #32
    24d0:	ret
    24d4:	ldr	w0, [x1, #16]
    24d8:	and	w0, w0, #0xfffffffb
    24dc:	str	w0, [x1, #16]
    24e0:	mov	w0, w19
    24e4:	b	24c8 <inflateValidate+0x30>
    24e8:	mov	w0, #0xfffffffe            	// #-2
    24ec:	b	24c8 <inflateValidate+0x30>

00000000000024f0 <inflateMark>:
    24f0:	stp	x29, x30, [sp, #-32]!
    24f4:	mov	x29, sp
    24f8:	str	x19, [sp, #16]
    24fc:	mov	x19, x0
    2500:	bl	0 <inflateStateCheck>
    2504:	cbnz	w0, 255c <inflateMark+0x6c>
    2508:	ldr	x1, [x19, #56]
    250c:	ldrsw	x0, [x1, #7148]
    2510:	lsl	x0, x0, #16
    2514:	ldr	w3, [x1, #8]
    2518:	mov	w2, #0x3f43                	// #16195
    251c:	cmp	w3, w2
    2520:	b.eq	2544 <inflateMark+0x54>  // b.none
    2524:	mov	x2, #0x0                   	// #0
    2528:	mov	w4, #0x3f4c                	// #16204
    252c:	cmp	w3, w4
    2530:	b.eq	254c <inflateMark+0x5c>  // b.none
    2534:	add	x0, x0, x2
    2538:	ldr	x19, [sp, #16]
    253c:	ldp	x29, x30, [sp], #32
    2540:	ret
    2544:	ldr	w2, [x1, #92]
    2548:	b	2534 <inflateMark+0x44>
    254c:	ldr	w2, [x1, #7152]
    2550:	ldr	w1, [x1, #92]
    2554:	sub	w2, w2, w1
    2558:	b	2534 <inflateMark+0x44>
    255c:	mov	x0, #0xffffffffffff0000    	// #-65536
    2560:	b	2538 <inflateMark+0x48>

0000000000002564 <inflateCodesUsed>:
    2564:	stp	x29, x30, [sp, #-32]!
    2568:	mov	x29, sp
    256c:	str	x19, [sp, #16]
    2570:	mov	x19, x0
    2574:	bl	0 <inflateStateCheck>
    2578:	cbnz	w0, 259c <inflateCodesUsed+0x38>
    257c:	ldr	x1, [x19, #56]
    2580:	add	x2, x1, #0x558
    2584:	ldr	x0, [x1, #144]
    2588:	sub	x0, x0, x2
    258c:	asr	x0, x0, #2
    2590:	ldr	x19, [sp, #16]
    2594:	ldp	x29, x30, [sp], #32
    2598:	ret
    259c:	mov	x0, #0xffffffffffffffff    	// #-1
    25a0:	b	2590 <inflateCodesUsed+0x2c>

inftrees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_table>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	mov	w10, w0
   c:	str	x4, [sp, #96]
  10:	add	x8, sp, #0x90
  14:	add	x0, sp, #0xb0
  18:	mov	x4, x8
  1c:	strh	wzr, [x4], #2
  20:	cmp	x4, x0
  24:	b.ne	1c <inflate_table+0x1c>  // b.any
  28:	cbz	w2, 5c <inflate_table+0x5c>
  2c:	mov	x7, x1
  30:	sub	w0, w2, #0x1
  34:	add	x4, x1, #0x2
  38:	add	x0, x4, x0, lsl #1
  3c:	add	x9, sp, #0x90
  40:	ldrh	w4, [x7], #2
  44:	lsl	x4, x4, #1
  48:	ldrh	w6, [x9, x4]
  4c:	add	w6, w6, #0x1
  50:	strh	w6, [x9, x4]
  54:	cmp	x7, x0
  58:	b.ne	40 <inflate_table+0x40>  // b.any
  5c:	mov	x4, x8
  60:	mov	w12, #0xf                   	// #15
  64:	ldrh	w0, [x4, #30]
  68:	cbnz	w0, c8 <inflate_table+0xc8>
  6c:	sub	x4, x4, #0x2
  70:	subs	w12, w12, #0x1
  74:	b.ne	64 <inflate_table+0x64>  // b.any
  78:	ldr	x0, [x3]
  7c:	add	x1, x0, #0x4
  80:	str	x1, [x3]
  84:	mov	w2, #0x40                  	// #64
  88:	strb	w2, [x0]
  8c:	mov	w1, #0x1                   	// #1
  90:	strb	w1, [x0, #1]
  94:	strh	wzr, [x0, #2]
  98:	ldr	x0, [x3]
  9c:	add	x4, x0, #0x4
  a0:	str	x4, [x3]
  a4:	strb	w2, [x0]
  a8:	strb	w1, [x0, #1]
  ac:	strh	wzr, [x0, #2]
  b0:	mov	w0, #0x1                   	// #1
  b4:	ldr	x1, [sp, #96]
  b8:	str	w0, [x1]
  bc:	mov	w0, #0x0                   	// #0
  c0:	ldp	x29, x30, [sp], #176
  c4:	ret
  c8:	cbz	w12, 78 <inflate_table+0x78>
  cc:	mov	x4, x8
  d0:	mov	w11, #0x1                   	// #1
  d4:	cmp	w12, w11
  d8:	b.ls	f8 <inflate_table+0xf8>  // b.plast
  dc:	ldrh	w0, [x4, #2]
  e0:	cbnz	w0, f8 <inflate_table+0xf8>
  e4:	add	w11, w11, #0x1
  e8:	add	x4, x4, #0x2
  ec:	cmp	w11, w12
  f0:	b.ne	dc <inflate_table+0xdc>  // b.any
  f4:	mov	w11, w12
  f8:	ldrh	w0, [sp, #146]
  fc:	mov	w4, #0x2                   	// #2
 100:	subs	w4, w4, w0
 104:	add	x6, x8, #0x1c
 108:	mov	w0, w4
 10c:	b.mi	3d4 <inflate_table+0x3d4>  // b.first
 110:	lsl	w0, w0, #1
 114:	ldrh	w4, [x8, #4]
 118:	subs	w0, w0, w4
 11c:	b.mi	3dc <inflate_table+0x3dc>  // b.first
 120:	add	x8, x8, #0x2
 124:	cmp	x8, x6
 128:	b.ne	110 <inflate_table+0x110>  // b.any
 12c:	cmp	w0, #0x0
 130:	b.le	144 <inflate_table+0x144>
 134:	cmp	w10, #0x0
 138:	mov	w0, #0xffffffff            	// #-1
 13c:	ccmp	w12, #0x1, #0x0, ne  // ne = any
 140:	b.ne	c0 <inflate_table+0xc0>  // b.any
 144:	stp	x19, x20, [sp, #16]
 148:	stp	x21, x22, [sp, #32]
 14c:	stp	x23, x24, [sp, #48]
 150:	stp	x25, x26, [sp, #64]
 154:	stp	x27, x28, [sp, #80]
 158:	ldr	x0, [sp, #96]
 15c:	ldr	w20, [x0]
 160:	strh	wzr, [sp, #114]
 164:	mov	x4, #0x0                   	// #0
 168:	add	x0, sp, #0x70
 16c:	add	x6, x4, x0
 170:	add	x0, sp, #0x90
 174:	add	x7, x4, x0
 178:	ldrh	w0, [x6, #2]
 17c:	ldrh	w7, [x7, #2]
 180:	add	w0, w0, w7
 184:	strh	w0, [x6, #4]
 188:	add	x4, x4, #0x2
 18c:	cmp	x4, #0x1c
 190:	b.ne	168 <inflate_table+0x168>  // b.any
 194:	cbz	w2, 4bc <inflate_table+0x4bc>
 198:	mov	x0, #0x0                   	// #0
 19c:	b	1ac <inflate_table+0x1ac>
 1a0:	add	x0, x0, #0x1
 1a4:	cmp	w2, w0
 1a8:	b.ls	4bc <inflate_table+0x4bc>  // b.plast
 1ac:	ldrh	w4, [x1, x0, lsl #1]
 1b0:	cbz	w4, 1a0 <inflate_table+0x1a0>
 1b4:	sbfiz	x4, x4, #1, #32
 1b8:	add	x6, sp, #0x70
 1bc:	ldrh	w6, [x6, x4]
 1c0:	add	w7, w6, #0x1
 1c4:	add	x8, sp, #0x70
 1c8:	strh	w7, [x8, x4]
 1cc:	and	x6, x6, #0xffff
 1d0:	strh	w0, [x5, x6, lsl #1]
 1d4:	b	1a0 <inflate_table+0x1a0>
 1d8:	mov	w21, #0x0                   	// #0
 1dc:	adrp	x26, 0 <inflate_table>
 1e0:	add	x26, x26, #0x0
 1e4:	add	x27, x26, #0x80
 1e8:	add	x26, x26, #0xc0
 1ec:	b	498 <inflate_table+0x498>
 1f0:	mov	w8, w22
 1f4:	mov	w13, #0x60                  	// #96
 1f8:	sub	w10, w11, w16
 1fc:	lsl	w10, w18, w10
 200:	lsl	w19, w18, w15
 204:	lsr	w14, w7, w16
 208:	mov	w2, w19
 20c:	sub	w2, w2, w10
 210:	add	w0, w14, w2
 214:	lsl	x0, x0, #2
 218:	add	x4, x6, x0
 21c:	strb	w13, [x6, x0]
 220:	strb	w9, [x4, #1]
 224:	strh	w8, [x4, #2]
 228:	cbnz	w2, 20c <inflate_table+0x20c>
 22c:	sub	w0, w11, #0x1
 230:	lsl	w0, w18, w0
 234:	tst	w7, w0
 238:	b.eq	248 <inflate_table+0x248>  // b.none
 23c:	lsr	w0, w0, #1
 240:	tst	w7, w0
 244:	b.ne	23c <inflate_table+0x23c>  // b.any
 248:	sub	w2, w0, #0x1
 24c:	and	w7, w2, w7
 250:	add	w7, w0, w7
 254:	cmp	w0, #0x0
 258:	csel	w0, w7, w0, ne  // ne = any
 25c:	add	w17, w17, #0x1
 260:	ubfiz	x4, x11, #1, #32
 264:	ldrh	w2, [x30, x4]
 268:	sub	w2, w2, #0x1
 26c:	and	w2, w2, #0xffff
 270:	strh	w2, [x30, x4]
 274:	cbnz	w2, 288 <inflate_table+0x288>
 278:	cmp	w11, w12
 27c:	b.eq	388 <inflate_table+0x388>  // b.none
 280:	ldrh	w2, [x5, w17, uxtw #1]
 284:	ldrh	w11, [x1, x2, lsl #1]
 288:	cmp	w11, w20
 28c:	b.ls	29c <inflate_table+0x29c>  // b.plast
 290:	and	w8, w0, w25
 294:	cmp	w8, w24
 298:	b.ne	2d8 <inflate_table+0x2d8>  // b.any
 29c:	mov	w7, w0
 2a0:	sub	w9, w11, w16
 2a4:	and	w9, w9, #0xff
 2a8:	ldrh	w8, [x5, w17, uxtw #1]
 2ac:	add	w2, w8, #0x1
 2b0:	mov	w13, w22
 2b4:	cmp	w2, w21
 2b8:	b.cc	1f8 <inflate_table+0x1f8>  // b.lo, b.ul, b.last
 2bc:	cmp	w8, w21
 2c0:	b.cc	1f0 <inflate_table+0x1f0>  // b.lo, b.ul, b.last
 2c4:	sub	w0, w8, w21
 2c8:	lsl	x0, x0, #1
 2cc:	ldrb	w13, [x27, x0]
 2d0:	ldrh	w8, [x26, x0]
 2d4:	b	1f8 <inflate_table+0x1f8>
 2d8:	cmp	w16, #0x0
 2dc:	csel	w16, w16, w20, ne  // ne = any
 2e0:	add	x6, x6, w19, uxtw #2
 2e4:	sub	w15, w11, w16
 2e8:	lsl	w2, w18, w15
 2ec:	cmp	w11, w12
 2f0:	b.cs	330 <inflate_table+0x330>  // b.hs, b.nlast
 2f4:	ldrh	w4, [x30, w11, uxtw #1]
 2f8:	sub	w2, w2, w4
 2fc:	cmp	w2, #0x0
 300:	b.le	330 <inflate_table+0x330>
 304:	add	w4, w11, #0x1
 308:	add	x4, x30, x4, lsl #1
 30c:	add	w15, w15, #0x1
 310:	lsl	w2, w2, #1
 314:	add	w7, w16, w15
 318:	cmp	w7, w12
 31c:	b.cs	330 <inflate_table+0x330>  // b.hs, b.nlast
 320:	ldrh	w7, [x4], #2
 324:	sub	w2, w2, w7
 328:	cmp	w2, #0x0
 32c:	b.gt	30c <inflate_table+0x30c>
 330:	lsl	w2, w18, w15
 334:	add	w23, w23, w2
 338:	cmp	w23, #0x354
 33c:	ldr	w2, [sp, #108]
 340:	ccmp	w2, #0x0, #0x4, hi  // hi = pmore
 344:	b.ne	3e4 <inflate_table+0x3e4>  // b.any
 348:	cmp	w23, #0x250
 34c:	ccmp	w28, #0x0, #0x4, hi  // hi = pmore
 350:	b.ne	400 <inflate_table+0x400>  // b.any
 354:	ubfiz	x4, x8, #2, #32
 358:	ldr	x2, [x3]
 35c:	strb	w15, [x2, x4]
 360:	ldr	x2, [x3]
 364:	add	x2, x2, x4
 368:	strb	w20, [x2, #1]
 36c:	ldr	x2, [x3]
 370:	add	x4, x2, x4
 374:	sub	x2, x6, x2
 378:	asr	x2, x2, #2
 37c:	strh	w2, [x4, #2]
 380:	mov	w24, w8
 384:	b	29c <inflate_table+0x29c>
 388:	cbz	w0, 3a4 <inflate_table+0x3a4>
 38c:	ubfiz	x0, x0, #2, #32
 390:	add	x1, x6, x0
 394:	mov	w2, #0x40                  	// #64
 398:	strb	w2, [x6, x0]
 39c:	strb	w9, [x1, #1]
 3a0:	strh	wzr, [x1, #2]
 3a4:	ldr	x0, [x3]
 3a8:	add	x23, x0, w23, uxtw #2
 3ac:	str	x23, [x3]
 3b0:	ldr	x0, [sp, #96]
 3b4:	str	w20, [x0]
 3b8:	mov	w0, #0x0                   	// #0
 3bc:	ldp	x19, x20, [sp, #16]
 3c0:	ldp	x21, x22, [sp, #32]
 3c4:	ldp	x23, x24, [sp, #48]
 3c8:	ldp	x25, x26, [sp, #64]
 3cc:	ldp	x27, x28, [sp, #80]
 3d0:	b	c0 <inflate_table+0xc0>
 3d4:	mov	w0, #0xffffffff            	// #-1
 3d8:	b	c0 <inflate_table+0xc0>
 3dc:	mov	w0, #0xffffffff            	// #-1
 3e0:	b	c0 <inflate_table+0xc0>
 3e4:	mov	w0, #0x1                   	// #1
 3e8:	ldp	x19, x20, [sp, #16]
 3ec:	ldp	x21, x22, [sp, #32]
 3f0:	ldp	x23, x24, [sp, #48]
 3f4:	ldp	x25, x26, [sp, #64]
 3f8:	ldp	x27, x28, [sp, #80]
 3fc:	b	c0 <inflate_table+0xc0>
 400:	mov	w0, #0x1                   	// #1
 404:	ldp	x19, x20, [sp, #16]
 408:	ldp	x21, x22, [sp, #32]
 40c:	ldp	x23, x24, [sp, #48]
 410:	ldp	x25, x26, [sp, #64]
 414:	ldp	x27, x28, [sp, #80]
 418:	b	c0 <inflate_table+0xc0>
 41c:	ldr	x6, [x3]
 420:	mov	w23, #0x1                   	// #1
 424:	lsl	w23, w23, w20
 428:	mov	w0, #0x1                   	// #1
 42c:	cmp	w23, #0x354
 430:	b.hi	458 <inflate_table+0x458>  // b.pmore
 434:	sub	w25, w23, #0x1
 438:	mov	w21, #0x101                 	// #257
 43c:	adrp	x27, 0 <inflate_table>
 440:	add	x27, x27, #0x0
 444:	add	x26, x27, #0x40
 448:	mov	w28, #0x0                   	// #0
 44c:	mov	w0, #0x1                   	// #1
 450:	str	w0, [sp, #108]
 454:	b	498 <inflate_table+0x498>
 458:	ldp	x19, x20, [sp, #16]
 45c:	ldp	x21, x22, [sp, #32]
 460:	ldp	x23, x24, [sp, #48]
 464:	ldp	x25, x26, [sp, #64]
 468:	ldp	x27, x28, [sp, #80]
 46c:	b	c0 <inflate_table+0xc0>
 470:	ldr	x6, [x3]
 474:	mov	w23, #0x1                   	// #1
 478:	lsl	w23, w23, w20
 47c:	sub	w25, w23, #0x1
 480:	cmp	w10, #0x2
 484:	cset	w28, eq  // eq = none
 488:	mov	x27, x5
 48c:	mov	x26, x5
 490:	mov	w21, #0x14                  	// #20
 494:	str	wzr, [sp, #108]
 498:	mov	w15, w20
 49c:	mov	w24, #0xffffffff            	// #-1
 4a0:	mov	w7, #0x0                   	// #0
 4a4:	mov	w16, #0x0                   	// #0
 4a8:	mov	w17, #0x0                   	// #0
 4ac:	mov	w22, #0x0                   	// #0
 4b0:	mov	w18, #0x1                   	// #1
 4b4:	add	x30, sp, #0x90
 4b8:	b	2a0 <inflate_table+0x2a0>
 4bc:	cmp	w20, w12
 4c0:	csel	w20, w20, w12, ls  // ls = plast
 4c4:	cmp	w20, w11
 4c8:	csel	w20, w20, w11, cs  // cs = hs, nlast
 4cc:	cbz	w10, 470 <inflate_table+0x470>
 4d0:	cmp	w10, #0x1
 4d4:	b.eq	41c <inflate_table+0x41c>  // b.none
 4d8:	ldr	x6, [x3]
 4dc:	mov	w23, #0x1                   	// #1
 4e0:	lsl	w23, w23, w20
 4e4:	sub	w25, w23, #0x1
 4e8:	cmp	w10, #0x2
 4ec:	cset	w28, eq  // eq = none
 4f0:	cmp	w23, #0x250
 4f4:	cset	w2, hi  // hi = pmore
 4f8:	mov	w0, #0x1                   	// #1
 4fc:	ands	w2, w28, w2
 500:	str	w2, [sp, #108]
 504:	b.eq	1d8 <inflate_table+0x1d8>  // b.none
 508:	ldp	x19, x20, [sp, #16]
 50c:	ldp	x21, x22, [sp, #32]
 510:	ldp	x23, x24, [sp, #48]
 514:	ldp	x25, x26, [sp, #64]
 518:	ldp	x27, x28, [sp, #80]
 51c:	b	c0 <inflate_table+0xc0>

trees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_block>:
       0:	add	x1, x0, #0xd4
       4:	add	x2, x0, #0x54c
       8:	strh	wzr, [x1], #4
       c:	cmp	x1, x2
      10:	b.ne	8 <init_block+0x8>  // b.any
      14:	add	x1, x0, #0x9c8
      18:	add	x2, x0, #0xa40
      1c:	strh	wzr, [x1], #4
      20:	cmp	x1, x2
      24:	b.ne	1c <init_block+0x1c>  // b.any
      28:	add	x1, x0, #0xabc
      2c:	add	x2, x0, #0xb08
      30:	strh	wzr, [x1], #4
      34:	cmp	x1, x2
      38:	b.ne	30 <init_block+0x30>  // b.any
      3c:	mov	w1, #0x1                   	// #1
      40:	strh	w1, [x0, #1236]
      44:	str	xzr, [x0, #5920]
      48:	str	xzr, [x0, #5912]
      4c:	str	wzr, [x0, #5928]
      50:	str	wzr, [x0, #5900]
      54:	ret

0000000000000058 <pqdownheap>:
      58:	add	x3, x0, w2, sxtw #2
      5c:	ldr	w11, [x3, #3008]
      60:	lsl	w4, w2, #1
      64:	ldr	w9, [x0, #5300]
      68:	cmp	w9, w2, lsl #1
      6c:	b.lt	138 <pqdownheap+0xe0>  // b.tstop
      70:	add	x10, x1, w11, sxtw #2
      74:	add	x12, x0, w11, sxtw
      78:	add	x12, x12, #0x1, lsl #12
      7c:	b	d8 <pqdownheap+0x80>
      80:	add	x6, x0, w6, sxtw
      84:	add	x6, x6, #0x1, lsl #12
      88:	add	x5, x0, w5, sxtw
      8c:	add	x5, x5, #0x1, lsl #12
      90:	ldrb	w6, [x6, #1212]
      94:	ldrb	w5, [x5, #1212]
      98:	cmp	w6, w5
      9c:	csel	w3, w3, w4, ls  // ls = plast
      a0:	ldrh	w6, [x10]
      a4:	add	x4, x0, w3, sxtw #2
      a8:	ldr	w4, [x4, #3008]
      ac:	sbfiz	x5, x4, #2, #32
      b0:	ldrh	w5, [x1, x5]
      b4:	cmp	w6, w5
      b8:	b.cc	138 <pqdownheap+0xe0>  // b.lo, b.ul, b.last
      bc:	b.eq	118 <pqdownheap+0xc0>  // b.none
      c0:	add	x2, x0, w2, sxtw #2
      c4:	str	w4, [x2, #3008]
      c8:	lsl	w4, w3, #1
      cc:	cmp	w9, w3, lsl #1
      d0:	b.lt	134 <pqdownheap+0xdc>  // b.tstop
      d4:	mov	w2, w3
      d8:	mov	w3, w4
      dc:	cmp	w9, w4
      e0:	b.le	a0 <pqdownheap+0x48>
      e4:	add	w3, w4, #0x1
      e8:	add	x5, x0, w4, sxtw #2
      ec:	ldr	w6, [x5, #3012]
      f0:	sbfiz	x7, x6, #2, #32
      f4:	ldrh	w8, [x1, x7]
      f8:	ldr	w5, [x5, #3008]
      fc:	sbfiz	x7, x5, #2, #32
     100:	ldrh	w7, [x1, x7]
     104:	cmp	w8, w7
     108:	b.cc	a0 <pqdownheap+0x48>  // b.lo, b.ul, b.last
     10c:	b.eq	80 <pqdownheap+0x28>  // b.none
     110:	mov	w3, w4
     114:	b	a0 <pqdownheap+0x48>
     118:	add	x5, x0, w4, sxtw
     11c:	add	x5, x5, #0x1, lsl #12
     120:	ldrb	w6, [x12, #1212]
     124:	ldrb	w5, [x5, #1212]
     128:	cmp	w6, w5
     12c:	b.hi	c0 <pqdownheap+0x68>  // b.pmore
     130:	b	138 <pqdownheap+0xe0>
     134:	mov	w2, w3
     138:	add	x2, x0, w2, sxtw #2
     13c:	str	w11, [x2, #3008]
     140:	ret

0000000000000144 <scan_tree>:
     144:	ldrh	w3, [x1, #2]
     148:	cmp	w3, #0x0
     14c:	mov	w6, #0x4                   	// #4
     150:	mov	w4, #0x3                   	// #3
     154:	csel	w6, w6, w4, ne  // ne = any
     158:	mov	w5, #0x7                   	// #7
     15c:	mov	w4, #0x8a                  	// #138
     160:	csel	w5, w5, w4, ne  // ne = any
     164:	add	x4, x1, w2, sxtw #2
     168:	mov	w7, #0xffffffff            	// #-1
     16c:	strh	w7, [x4, #6]
     170:	tbnz	w2, #31, 25c <scan_tree+0x118>
     174:	add	x4, x1, #0x6
     178:	add	x1, x1, #0xa
     17c:	add	x7, x1, w2, uxtw #2
     180:	mov	w1, #0x0                   	// #0
     184:	mov	w8, #0xffffffff            	// #-1
     188:	mov	w9, #0x3                   	// #3
     18c:	mov	w13, #0x8a                  	// #138
     190:	mov	w12, #0x4                   	// #4
     194:	mov	w11, #0x6                   	// #6
     198:	mov	w10, #0x7                   	// #7
     19c:	b	1ec <scan_tree+0xa8>
     1a0:	cbz	w2, 220 <scan_tree+0xdc>
     1a4:	cmp	w8, w2
     1a8:	b.eq	1bc <scan_tree+0x78>  // b.none
     1ac:	add	x5, x0, w2, sxtw #2
     1b0:	ldrh	w1, [x5, #2748]
     1b4:	add	w1, w1, #0x1
     1b8:	strh	w1, [x5, #2748]
     1bc:	ldrh	w1, [x0, #2812]
     1c0:	add	w1, w1, #0x1
     1c4:	strh	w1, [x0, #2812]
     1c8:	cbz	w3, 248 <scan_tree+0x104>
     1cc:	mov	w8, w2
     1d0:	cmp	w3, w2
     1d4:	csel	w6, w9, w12, eq  // eq = none
     1d8:	csel	w5, w11, w10, eq  // eq = none
     1dc:	mov	w1, #0x0                   	// #0
     1e0:	add	x4, x4, #0x4
     1e4:	cmp	x4, x7
     1e8:	b.eq	25c <scan_tree+0x118>  // b.none
     1ec:	mov	w2, w3
     1f0:	ldrh	w3, [x4]
     1f4:	add	w1, w1, #0x1
     1f8:	cmp	w3, w2
     1fc:	ccmp	w1, w5, #0x0, eq  // eq = none
     200:	b.lt	1e0 <scan_tree+0x9c>  // b.tstop
     204:	cmp	w1, w6
     208:	b.ge	1a0 <scan_tree+0x5c>  // b.tcont
     20c:	add	x5, x0, w2, sxtw #2
     210:	ldrh	w6, [x5, #2748]
     214:	add	w1, w1, w6
     218:	strh	w1, [x5, #2748]
     21c:	b	1c8 <scan_tree+0x84>
     220:	cmp	w1, #0xa
     224:	b.gt	238 <scan_tree+0xf4>
     228:	ldrh	w1, [x0, #2816]
     22c:	add	w1, w1, #0x1
     230:	strh	w1, [x0, #2816]
     234:	b	1c8 <scan_tree+0x84>
     238:	ldrh	w1, [x0, #2820]
     23c:	add	w1, w1, #0x1
     240:	strh	w1, [x0, #2820]
     244:	b	1c8 <scan_tree+0x84>
     248:	mov	w1, w3
     24c:	mov	w8, w2
     250:	mov	w6, w9
     254:	mov	w5, w13
     258:	b	1e0 <scan_tree+0x9c>
     25c:	ret

0000000000000260 <send_tree>:
     260:	ldrh	w5, [x1, #2]
     264:	cmp	w5, #0x0
     268:	mov	w4, #0x4                   	// #4
     26c:	mov	w3, #0x3                   	// #3
     270:	csel	w4, w4, w3, ne  // ne = any
     274:	mov	w3, #0x7                   	// #7
     278:	mov	w6, #0x8a                  	// #138
     27c:	csel	w3, w3, w6, ne  // ne = any
     280:	tbnz	w2, #31, 840 <send_tree+0x5e0>
     284:	add	x9, x1, #0x6
     288:	add	x1, x1, #0xa
     28c:	add	x10, x1, w2, uxtw #2
     290:	mov	w1, #0x0                   	// #0
     294:	mov	w8, #0xffffffff            	// #-1
     298:	mov	w7, #0x10                  	// #16
     29c:	mov	w11, #0x3                   	// #3
     2a0:	mov	w16, w6
     2a4:	mov	w15, #0x4                   	// #4
     2a8:	mov	w14, #0x6                   	// #6
     2ac:	mov	w13, #0x7                   	// #7
     2b0:	mov	w12, #0x0                   	// #0
     2b4:	mov	w6, w5
     2b8:	ldrh	w5, [x9]
     2bc:	add	w2, w1, #0x1
     2c0:	cmp	w5, w6
     2c4:	ccmp	w2, w3, #0x0, eq  // eq = none
     2c8:	b.lt	82c <send_tree+0x5cc>  // b.tstop
     2cc:	stp	x29, x30, [sp, #-16]!
     2d0:	mov	x29, sp
     2d4:	b	68c <send_tree+0x42c>
     2d8:	add	x8, x0, w6, sxtw #2
     2dc:	b	304 <send_tree+0xa4>
     2e0:	ldrh	w4, [x8, #2748]
     2e4:	lsl	w4, w4, w1
     2e8:	ldrh	w17, [x0, #5936]
     2ec:	orr	w4, w4, w17
     2f0:	strh	w4, [x0, #5936]
     2f4:	add	w1, w1, w3
     2f8:	str	w1, [x0, #5940]
     2fc:	subs	w2, w2, #0x1
     300:	b.eq	808 <send_tree+0x5a8>  // b.none
     304:	ldrh	w3, [x8, #2750]
     308:	ldr	w1, [x0, #5940]
     30c:	sub	w4, w7, w3
     310:	cmp	w1, w4
     314:	b.le	2e0 <send_tree+0x80>
     318:	ldrh	w4, [x8, #2748]
     31c:	lsl	w1, w4, w1
     320:	ldrh	w17, [x0, #5936]
     324:	orr	w1, w1, w17
     328:	sxth	w1, w1
     32c:	strh	w1, [x0, #5936]
     330:	ldr	x18, [x0, #16]
     334:	ldr	x17, [x0, #40]
     338:	add	x30, x17, #0x1
     33c:	str	x30, [x0, #40]
     340:	strb	w1, [x18, x17]
     344:	ldrh	w1, [x0, #5936]
     348:	lsr	w1, w1, #8
     34c:	ldr	x18, [x0, #16]
     350:	ldr	x17, [x0, #40]
     354:	add	x30, x17, #0x1
     358:	str	x30, [x0, #40]
     35c:	strb	w1, [x18, x17]
     360:	ldr	w17, [x0, #5940]
     364:	sub	w1, w7, w17
     368:	asr	w4, w4, w1
     36c:	strh	w4, [x0, #5936]
     370:	sub	w1, w3, #0x10
     374:	add	w1, w1, w17
     378:	str	w1, [x0, #5940]
     37c:	b	2fc <send_tree+0x9c>
     380:	ldrh	w4, [x4, #2748]
     384:	lsl	w4, w4, w2
     388:	ldrh	w8, [x0, #5936]
     38c:	orr	w4, w4, w8
     390:	strh	w4, [x0, #5936]
     394:	add	w2, w2, w3
     398:	str	w2, [x0, #5940]
     39c:	mov	w2, w1
     3a0:	b	720 <send_tree+0x4c0>
     3a4:	ldrh	w4, [x0, #2812]
     3a8:	lsl	w4, w4, w1
     3ac:	ldrh	w8, [x0, #5936]
     3b0:	orr	w4, w4, w8
     3b4:	strh	w4, [x0, #5936]
     3b8:	add	w1, w1, w3
     3bc:	str	w1, [x0, #5940]
     3c0:	b	798 <send_tree+0x538>
     3c4:	sub	w2, w2, #0x3
     3c8:	and	w2, w2, #0xffff
     3cc:	lsl	w2, w2, w1
     3d0:	ldrh	w3, [x0, #5936]
     3d4:	orr	w2, w2, w3
     3d8:	strh	w2, [x0, #5936]
     3dc:	add	w1, w1, #0x2
     3e0:	str	w1, [x0, #5940]
     3e4:	b	808 <send_tree+0x5a8>
     3e8:	cmp	w2, #0xa
     3ec:	b.gt	520 <send_tree+0x2c0>
     3f0:	ldrh	w4, [x0, #2818]
     3f4:	ldr	w3, [x0, #5940]
     3f8:	sub	w8, w7, w4
     3fc:	cmp	w3, w8
     400:	b.le	4dc <send_tree+0x27c>
     404:	ldrh	w8, [x0, #2816]
     408:	lsl	w3, w8, w3
     40c:	ldrh	w17, [x0, #5936]
     410:	orr	w3, w3, w17
     414:	sxth	w3, w3
     418:	strh	w3, [x0, #5936]
     41c:	ldr	x18, [x0, #16]
     420:	ldr	x17, [x0, #40]
     424:	add	x30, x17, #0x1
     428:	str	x30, [x0, #40]
     42c:	strb	w3, [x18, x17]
     430:	ldrh	w3, [x0, #5936]
     434:	lsr	w3, w3, #8
     438:	ldr	x18, [x0, #16]
     43c:	ldr	x17, [x0, #40]
     440:	add	x30, x17, #0x1
     444:	str	x30, [x0, #40]
     448:	strb	w3, [x18, x17]
     44c:	ldr	w17, [x0, #5940]
     450:	sub	w3, w7, w17
     454:	asr	w8, w8, w3
     458:	strh	w8, [x0, #5936]
     45c:	sub	w3, w4, #0x10
     460:	add	w3, w3, w17
     464:	str	w3, [x0, #5940]
     468:	ldr	w3, [x0, #5940]
     46c:	cmp	w3, #0xd
     470:	b.le	4fc <send_tree+0x29c>
     474:	sub	w1, w1, #0x2
     478:	and	w1, w1, #0xffff
     47c:	lsl	w2, w1, w3
     480:	ldrh	w3, [x0, #5936]
     484:	orr	w2, w2, w3
     488:	sxth	w2, w2
     48c:	strh	w2, [x0, #5936]
     490:	ldr	x4, [x0, #16]
     494:	ldr	x3, [x0, #40]
     498:	add	x8, x3, #0x1
     49c:	str	x8, [x0, #40]
     4a0:	strb	w2, [x4, x3]
     4a4:	ldrh	w2, [x0, #5936]
     4a8:	lsr	w2, w2, #8
     4ac:	ldr	x4, [x0, #16]
     4b0:	ldr	x3, [x0, #40]
     4b4:	add	x8, x3, #0x1
     4b8:	str	x8, [x0, #40]
     4bc:	strb	w2, [x4, x3]
     4c0:	ldr	w2, [x0, #5940]
     4c4:	sub	w3, w7, w2
     4c8:	asr	w1, w1, w3
     4cc:	strh	w1, [x0, #5936]
     4d0:	sub	w2, w2, #0xd
     4d4:	str	w2, [x0, #5940]
     4d8:	b	808 <send_tree+0x5a8>
     4dc:	ldrh	w8, [x0, #2816]
     4e0:	lsl	w8, w8, w3
     4e4:	ldrh	w17, [x0, #5936]
     4e8:	orr	w8, w8, w17
     4ec:	strh	w8, [x0, #5936]
     4f0:	add	w3, w3, w4
     4f4:	str	w3, [x0, #5940]
     4f8:	b	468 <send_tree+0x208>
     4fc:	sub	w1, w2, #0x3
     500:	and	w1, w1, #0xffff
     504:	lsl	w1, w1, w3
     508:	ldrh	w2, [x0, #5936]
     50c:	orr	w1, w1, w2
     510:	strh	w1, [x0, #5936]
     514:	add	w3, w3, #0x3
     518:	str	w3, [x0, #5940]
     51c:	b	808 <send_tree+0x5a8>
     520:	ldrh	w4, [x0, #2822]
     524:	ldr	w3, [x0, #5940]
     528:	sub	w8, w7, w4
     52c:	cmp	w3, w8
     530:	b.le	60c <send_tree+0x3ac>
     534:	ldrh	w17, [x0, #2820]
     538:	lsl	w3, w17, w3
     53c:	ldrh	w8, [x0, #5936]
     540:	orr	w3, w3, w8
     544:	sxth	w3, w3
     548:	strh	w3, [x0, #5936]
     54c:	ldr	x18, [x0, #16]
     550:	ldr	x8, [x0, #40]
     554:	add	x30, x8, #0x1
     558:	str	x30, [x0, #40]
     55c:	strb	w3, [x18, x8]
     560:	ldrh	w8, [x0, #5936]
     564:	lsr	w8, w8, #8
     568:	ldr	x18, [x0, #16]
     56c:	ldr	x3, [x0, #40]
     570:	add	x30, x3, #0x1
     574:	str	x30, [x0, #40]
     578:	strb	w8, [x18, x3]
     57c:	ldr	w8, [x0, #5940]
     580:	sub	w3, w7, w8
     584:	asr	w3, w17, w3
     588:	strh	w3, [x0, #5936]
     58c:	sub	w3, w4, #0x10
     590:	add	w3, w3, w8
     594:	str	w3, [x0, #5940]
     598:	ldr	w3, [x0, #5940]
     59c:	cmp	w3, #0x9
     5a0:	b.le	62c <send_tree+0x3cc>
     5a4:	sub	w1, w1, #0xa
     5a8:	and	w1, w1, #0xffff
     5ac:	lsl	w2, w1, w3
     5b0:	ldrh	w3, [x0, #5936]
     5b4:	orr	w2, w2, w3
     5b8:	sxth	w2, w2
     5bc:	strh	w2, [x0, #5936]
     5c0:	ldr	x4, [x0, #16]
     5c4:	ldr	x3, [x0, #40]
     5c8:	add	x8, x3, #0x1
     5cc:	str	x8, [x0, #40]
     5d0:	strb	w2, [x4, x3]
     5d4:	ldrh	w2, [x0, #5936]
     5d8:	lsr	w2, w2, #8
     5dc:	ldr	x4, [x0, #16]
     5e0:	ldr	x3, [x0, #40]
     5e4:	add	x8, x3, #0x1
     5e8:	str	x8, [x0, #40]
     5ec:	strb	w2, [x4, x3]
     5f0:	ldr	w2, [x0, #5940]
     5f4:	sub	w3, w7, w2
     5f8:	asr	w1, w1, w3
     5fc:	strh	w1, [x0, #5936]
     600:	sub	w2, w2, #0x9
     604:	str	w2, [x0, #5940]
     608:	b	808 <send_tree+0x5a8>
     60c:	ldrh	w8, [x0, #2820]
     610:	lsl	w8, w8, w3
     614:	ldrh	w17, [x0, #5936]
     618:	orr	w8, w8, w17
     61c:	strh	w8, [x0, #5936]
     620:	add	w3, w3, w4
     624:	str	w3, [x0, #5940]
     628:	b	598 <send_tree+0x338>
     62c:	sub	w1, w2, #0xb
     630:	and	w1, w1, #0xffff
     634:	lsl	w1, w1, w3
     638:	ldrh	w2, [x0, #5936]
     63c:	orr	w1, w1, w2
     640:	strh	w1, [x0, #5936]
     644:	add	w3, w3, #0x7
     648:	str	w3, [x0, #5940]
     64c:	b	808 <send_tree+0x5a8>
     650:	mov	w1, w2
     654:	b	668 <send_tree+0x408>
     658:	mov	w1, w5
     65c:	mov	w8, w6
     660:	mov	w4, w11
     664:	mov	w3, w16
     668:	add	x9, x9, #0x4
     66c:	cmp	x9, x10
     670:	b.eq	824 <send_tree+0x5c4>  // b.none
     674:	mov	w6, w5
     678:	ldrh	w5, [x9]
     67c:	add	w2, w1, #0x1
     680:	cmp	w5, w6
     684:	ccmp	w2, w3, #0x0, eq  // eq = none
     688:	b.lt	650 <send_tree+0x3f0>  // b.tstop
     68c:	cmp	w2, w4
     690:	b.lt	2d8 <send_tree+0x78>  // b.tstop
     694:	cbz	w6, 3e8 <send_tree+0x188>
     698:	cmp	w8, w6
     69c:	b.eq	720 <send_tree+0x4c0>  // b.none
     6a0:	add	x4, x0, w6, sxtw #2
     6a4:	ldrh	w3, [x4, #2750]
     6a8:	ldr	w2, [x0, #5940]
     6ac:	sub	w8, w7, w3
     6b0:	cmp	w2, w8
     6b4:	b.le	380 <send_tree+0x120>
     6b8:	ldrh	w4, [x4, #2748]
     6bc:	lsl	w2, w4, w2
     6c0:	ldrh	w8, [x0, #5936]
     6c4:	orr	w2, w2, w8
     6c8:	sxth	w2, w2
     6cc:	strh	w2, [x0, #5936]
     6d0:	ldr	x17, [x0, #16]
     6d4:	ldr	x8, [x0, #40]
     6d8:	add	x18, x8, #0x1
     6dc:	str	x18, [x0, #40]
     6e0:	strb	w2, [x17, x8]
     6e4:	ldrh	w2, [x0, #5936]
     6e8:	lsr	w2, w2, #8
     6ec:	ldr	x17, [x0, #16]
     6f0:	ldr	x8, [x0, #40]
     6f4:	add	x18, x8, #0x1
     6f8:	str	x18, [x0, #40]
     6fc:	strb	w2, [x17, x8]
     700:	ldr	w8, [x0, #5940]
     704:	sub	w2, w7, w8
     708:	asr	w4, w4, w2
     70c:	strh	w4, [x0, #5936]
     710:	sub	w2, w3, #0x10
     714:	add	w2, w2, w8
     718:	str	w2, [x0, #5940]
     71c:	mov	w2, w1
     720:	ldrh	w3, [x0, #2814]
     724:	ldr	w1, [x0, #5940]
     728:	sub	w4, w7, w3
     72c:	cmp	w1, w4
     730:	b.le	3a4 <send_tree+0x144>
     734:	ldrh	w4, [x0, #2812]
     738:	lsl	w1, w4, w1
     73c:	ldrh	w8, [x0, #5936]
     740:	orr	w1, w1, w8
     744:	sxth	w1, w1
     748:	strh	w1, [x0, #5936]
     74c:	ldr	x17, [x0, #16]
     750:	ldr	x8, [x0, #40]
     754:	add	x18, x8, #0x1
     758:	str	x18, [x0, #40]
     75c:	strb	w1, [x17, x8]
     760:	ldrh	w1, [x0, #5936]
     764:	lsr	w1, w1, #8
     768:	ldr	x17, [x0, #16]
     76c:	ldr	x8, [x0, #40]
     770:	add	x18, x8, #0x1
     774:	str	x18, [x0, #40]
     778:	strb	w1, [x17, x8]
     77c:	ldr	w8, [x0, #5940]
     780:	sub	w1, w7, w8
     784:	asr	w4, w4, w1
     788:	strh	w4, [x0, #5936]
     78c:	sub	w1, w3, #0x10
     790:	add	w1, w1, w8
     794:	str	w1, [x0, #5940]
     798:	ldr	w1, [x0, #5940]
     79c:	cmp	w1, #0xe
     7a0:	b.le	3c4 <send_tree+0x164>
     7a4:	sub	w2, w2, #0x3
     7a8:	and	w2, w2, #0xffff
     7ac:	lsl	w1, w2, w1
     7b0:	ldrh	w3, [x0, #5936]
     7b4:	orr	w1, w1, w3
     7b8:	sxth	w1, w1
     7bc:	strh	w1, [x0, #5936]
     7c0:	ldr	x4, [x0, #16]
     7c4:	ldr	x3, [x0, #40]
     7c8:	add	x8, x3, #0x1
     7cc:	str	x8, [x0, #40]
     7d0:	strb	w1, [x4, x3]
     7d4:	ldrh	w1, [x0, #5936]
     7d8:	lsr	w1, w1, #8
     7dc:	ldr	x4, [x0, #16]
     7e0:	ldr	x3, [x0, #40]
     7e4:	add	x8, x3, #0x1
     7e8:	str	x8, [x0, #40]
     7ec:	strb	w1, [x4, x3]
     7f0:	ldr	w1, [x0, #5940]
     7f4:	sub	w3, w7, w1
     7f8:	asr	w2, w2, w3
     7fc:	strh	w2, [x0, #5936]
     800:	sub	w1, w1, #0xe
     804:	str	w1, [x0, #5940]
     808:	cbz	w5, 658 <send_tree+0x3f8>
     80c:	mov	w8, w6
     810:	cmp	w5, w6
     814:	csel	w4, w11, w15, eq  // eq = none
     818:	csel	w3, w14, w13, eq  // eq = none
     81c:	mov	w1, w12
     820:	b	668 <send_tree+0x408>
     824:	ldp	x29, x30, [sp], #16
     828:	ret
     82c:	mov	w1, w2
     830:	add	x9, x9, #0x4
     834:	cmp	x9, x10
     838:	b.ne	2b4 <send_tree+0x54>  // b.any
     83c:	ret
     840:	ret

0000000000000844 <compress_block>:
     844:	stp	x29, x30, [sp, #-16]!
     848:	mov	x29, sp
     84c:	ldr	w3, [x0, #5900]
     850:	cbz	w3, c08 <compress_block+0x3c4>
     854:	mov	w5, #0x0                   	// #0
     858:	adrp	x8, 0 <init_block>
     85c:	add	x8, x8, #0x0
     860:	mov	w7, #0x10                  	// #16
     864:	add	x11, x8, #0x100
     868:	add	x10, x8, #0x3f0
     86c:	add	x13, x8, #0x468
     870:	add	x9, x8, #0x1f0
     874:	add	x12, x8, #0x178
     878:	b	8a4 <compress_block+0x60>
     87c:	ldrh	w4, [x1, x4]
     880:	lsl	w4, w4, w3
     884:	ldrh	w14, [x0, #5936]
     888:	orr	w4, w4, w14
     88c:	strh	w4, [x0, #5936]
     890:	add	w3, w3, w6
     894:	str	w3, [x0, #5940]
     898:	ldr	w3, [x0, #5900]
     89c:	cmp	w3, w5
     8a0:	b.ls	c08 <compress_block+0x3c4>  // b.plast
     8a4:	mov	w4, w5
     8a8:	ldr	x3, [x0, #5904]
     8ac:	ldrh	w3, [x3, w5, uxtw #1]
     8b0:	ldr	x6, [x0, #5888]
     8b4:	ldrb	w4, [x6, x4]
     8b8:	add	w5, w5, #0x1
     8bc:	cbnz	w3, 944 <compress_block+0x100>
     8c0:	ubfiz	x4, x4, #2, #8
     8c4:	add	x3, x1, x4
     8c8:	ldrh	w6, [x3, #2]
     8cc:	ldr	w3, [x0, #5940]
     8d0:	sub	w14, w7, w6
     8d4:	cmp	w3, w14
     8d8:	b.le	87c <compress_block+0x38>
     8dc:	ldrh	w4, [x1, x4]
     8e0:	lsl	w3, w4, w3
     8e4:	ldrh	w14, [x0, #5936]
     8e8:	orr	w3, w3, w14
     8ec:	sxth	w3, w3
     8f0:	strh	w3, [x0, #5936]
     8f4:	ldr	x15, [x0, #16]
     8f8:	ldr	x14, [x0, #40]
     8fc:	add	x16, x14, #0x1
     900:	str	x16, [x0, #40]
     904:	strb	w3, [x15, x14]
     908:	ldrh	w3, [x0, #5936]
     90c:	lsr	w3, w3, #8
     910:	ldr	x15, [x0, #16]
     914:	ldr	x14, [x0, #40]
     918:	add	x16, x14, #0x1
     91c:	str	x16, [x0, #40]
     920:	strb	w3, [x15, x14]
     924:	ldr	w14, [x0, #5940]
     928:	sub	w3, w7, w14
     92c:	asr	w4, w4, w3
     930:	strh	w4, [x0, #5936]
     934:	sub	w3, w6, #0x10
     938:	add	w3, w3, w14
     93c:	str	w3, [x0, #5940]
     940:	b	898 <compress_block+0x54>
     944:	ldrb	w16, [x8, w4, sxtw]
     948:	add	w15, w16, #0x101
     94c:	ubfiz	x15, x15, #2, #10
     950:	add	x6, x1, x15
     954:	ldrh	w14, [x6, #2]
     958:	ldr	w6, [x0, #5940]
     95c:	sub	w17, w7, w14
     960:	cmp	w6, w17
     964:	b.le	b78 <compress_block+0x334>
     968:	ldrh	w15, [x1, x15]
     96c:	lsl	w6, w15, w6
     970:	ldrh	w17, [x0, #5936]
     974:	orr	w6, w6, w17
     978:	sxth	w6, w6
     97c:	strh	w6, [x0, #5936]
     980:	ldr	x18, [x0, #16]
     984:	ldr	x17, [x0, #40]
     988:	add	x30, x17, #0x1
     98c:	str	x30, [x0, #40]
     990:	strb	w6, [x18, x17]
     994:	ldrh	w6, [x0, #5936]
     998:	lsr	w6, w6, #8
     99c:	ldr	x18, [x0, #16]
     9a0:	ldr	x17, [x0, #40]
     9a4:	add	x30, x17, #0x1
     9a8:	str	x30, [x0, #40]
     9ac:	strb	w6, [x18, x17]
     9b0:	ldr	w6, [x0, #5940]
     9b4:	sub	w17, w7, w6
     9b8:	asr	w15, w15, w17
     9bc:	strh	w15, [x0, #5936]
     9c0:	sub	w14, w14, #0x10
     9c4:	add	w14, w14, w6
     9c8:	str	w14, [x0, #5940]
     9cc:	mov	w14, w16
     9d0:	ldr	w14, [x11, x14, lsl #2]
     9d4:	cbz	w14, a58 <compress_block+0x214>
     9d8:	mov	w6, w16
     9dc:	ldr	w6, [x12, x6, lsl #2]
     9e0:	sub	w4, w4, w6
     9e4:	ldr	w6, [x0, #5940]
     9e8:	sub	w15, w7, w14
     9ec:	cmp	w6, w15
     9f0:	b.le	b98 <compress_block+0x354>
     9f4:	and	w4, w4, #0xffff
     9f8:	lsl	w6, w4, w6
     9fc:	ldrh	w15, [x0, #5936]
     a00:	orr	w6, w6, w15
     a04:	sxth	w6, w6
     a08:	strh	w6, [x0, #5936]
     a0c:	ldr	x16, [x0, #16]
     a10:	ldr	x15, [x0, #40]
     a14:	add	x17, x15, #0x1
     a18:	str	x17, [x0, #40]
     a1c:	strb	w6, [x16, x15]
     a20:	ldrh	w6, [x0, #5936]
     a24:	lsr	w6, w6, #8
     a28:	ldr	x16, [x0, #16]
     a2c:	ldr	x15, [x0, #40]
     a30:	add	x17, x15, #0x1
     a34:	str	x17, [x0, #40]
     a38:	strb	w6, [x16, x15]
     a3c:	ldr	w6, [x0, #5940]
     a40:	sub	w15, w7, w6
     a44:	asr	w4, w4, w15
     a48:	strh	w4, [x0, #5936]
     a4c:	sub	w14, w14, #0x10
     a50:	add	w14, w14, w6
     a54:	str	w14, [x0, #5940]
     a58:	sub	w3, w3, #0x1
     a5c:	cmp	w3, #0xff
     a60:	b.hi	bb8 <compress_block+0x374>  // b.pmore
     a64:	ldrb	w15, [x9, w3, uxtw]
     a68:	ubfiz	x14, x15, #2, #8
     a6c:	add	x4, x2, x14
     a70:	ldrh	w6, [x4, #2]
     a74:	ldr	w4, [x0, #5940]
     a78:	sub	w16, w7, w6
     a7c:	cmp	w4, w16
     a80:	b.le	bc8 <compress_block+0x384>
     a84:	ldrh	w14, [x2, x14]
     a88:	lsl	w4, w14, w4
     a8c:	ldrh	w16, [x0, #5936]
     a90:	orr	w4, w4, w16
     a94:	sxth	w4, w4
     a98:	strh	w4, [x0, #5936]
     a9c:	ldr	x17, [x0, #16]
     aa0:	ldr	x16, [x0, #40]
     aa4:	add	x18, x16, #0x1
     aa8:	str	x18, [x0, #40]
     aac:	strb	w4, [x17, x16]
     ab0:	ldrh	w4, [x0, #5936]
     ab4:	lsr	w4, w4, #8
     ab8:	ldr	x17, [x0, #16]
     abc:	ldr	x16, [x0, #40]
     ac0:	add	x18, x16, #0x1
     ac4:	str	x18, [x0, #40]
     ac8:	strb	w4, [x17, x16]
     acc:	ldr	w4, [x0, #5940]
     ad0:	sub	w16, w7, w4
     ad4:	asr	w14, w14, w16
     ad8:	strh	w14, [x0, #5936]
     adc:	sub	w6, w6, #0x10
     ae0:	add	w6, w6, w4
     ae4:	str	w6, [x0, #5940]
     ae8:	mov	w6, w15
     aec:	ldr	w6, [x10, x6, lsl #2]
     af0:	cbz	w6, 898 <compress_block+0x54>
     af4:	mov	w4, w15
     af8:	ldr	w4, [x13, x4, lsl #2]
     afc:	sub	w3, w3, w4
     b00:	ldr	w4, [x0, #5940]
     b04:	sub	w14, w7, w6
     b08:	cmp	w4, w14
     b0c:	b.le	be8 <compress_block+0x3a4>
     b10:	and	w3, w3, #0xffff
     b14:	lsl	w4, w3, w4
     b18:	ldrh	w14, [x0, #5936]
     b1c:	orr	w4, w4, w14
     b20:	sxth	w4, w4
     b24:	strh	w4, [x0, #5936]
     b28:	ldr	x15, [x0, #16]
     b2c:	ldr	x14, [x0, #40]
     b30:	add	x16, x14, #0x1
     b34:	str	x16, [x0, #40]
     b38:	strb	w4, [x15, x14]
     b3c:	ldrh	w4, [x0, #5936]
     b40:	lsr	w4, w4, #8
     b44:	ldr	x15, [x0, #16]
     b48:	ldr	x14, [x0, #40]
     b4c:	add	x16, x14, #0x1
     b50:	str	x16, [x0, #40]
     b54:	strb	w4, [x15, x14]
     b58:	ldr	w4, [x0, #5940]
     b5c:	sub	w14, w7, w4
     b60:	asr	w3, w3, w14
     b64:	strh	w3, [x0, #5936]
     b68:	sub	w6, w6, #0x10
     b6c:	add	w6, w6, w4
     b70:	str	w6, [x0, #5940]
     b74:	b	898 <compress_block+0x54>
     b78:	ldrh	w15, [x1, x15]
     b7c:	lsl	w15, w15, w6
     b80:	ldrh	w17, [x0, #5936]
     b84:	orr	w15, w15, w17
     b88:	strh	w15, [x0, #5936]
     b8c:	add	w6, w6, w14
     b90:	str	w6, [x0, #5940]
     b94:	b	9cc <compress_block+0x188>
     b98:	and	w4, w4, #0xffff
     b9c:	lsl	w4, w4, w6
     ba0:	ldrh	w15, [x0, #5936]
     ba4:	orr	w4, w4, w15
     ba8:	strh	w4, [x0, #5936]
     bac:	add	w14, w6, w14
     bb0:	str	w14, [x0, #5940]
     bb4:	b	a58 <compress_block+0x214>
     bb8:	lsr	w4, w3, #7
     bbc:	add	w4, w4, #0x100
     bc0:	ldrb	w15, [x9, w4, uxtw]
     bc4:	b	a68 <compress_block+0x224>
     bc8:	ldrh	w14, [x2, x14]
     bcc:	lsl	w14, w14, w4
     bd0:	ldrh	w16, [x0, #5936]
     bd4:	orr	w14, w14, w16
     bd8:	strh	w14, [x0, #5936]
     bdc:	add	w4, w4, w6
     be0:	str	w4, [x0, #5940]
     be4:	b	ae8 <compress_block+0x2a4>
     be8:	and	w3, w3, #0xffff
     bec:	lsl	w3, w3, w4
     bf0:	ldrh	w14, [x0, #5936]
     bf4:	orr	w3, w3, w14
     bf8:	strh	w3, [x0, #5936]
     bfc:	add	w6, w4, w6
     c00:	str	w6, [x0, #5940]
     c04:	b	898 <compress_block+0x54>
     c08:	ldrh	w3, [x1, #1026]
     c0c:	ldr	w2, [x0, #5940]
     c10:	mov	w4, #0x10                  	// #16
     c14:	sub	w4, w4, w3
     c18:	cmp	w2, w4
     c1c:	b.le	c90 <compress_block+0x44c>
     c20:	ldrh	w4, [x1, #1024]
     c24:	lsl	w1, w4, w2
     c28:	ldrh	w2, [x0, #5936]
     c2c:	orr	w1, w1, w2
     c30:	sxth	w1, w1
     c34:	strh	w1, [x0, #5936]
     c38:	ldr	x5, [x0, #16]
     c3c:	ldr	x2, [x0, #40]
     c40:	add	x6, x2, #0x1
     c44:	str	x6, [x0, #40]
     c48:	strb	w1, [x5, x2]
     c4c:	ldrh	w1, [x0, #5936]
     c50:	lsr	w1, w1, #8
     c54:	ldr	x5, [x0, #16]
     c58:	ldr	x2, [x0, #40]
     c5c:	add	x6, x2, #0x1
     c60:	str	x6, [x0, #40]
     c64:	strb	w1, [x5, x2]
     c68:	ldr	w5, [x0, #5940]
     c6c:	mov	w1, #0x10                  	// #16
     c70:	sub	w1, w1, w5
     c74:	asr	w4, w4, w1
     c78:	strh	w4, [x0, #5936]
     c7c:	sub	w2, w3, #0x10
     c80:	add	w2, w2, w5
     c84:	str	w2, [x0, #5940]
     c88:	ldp	x29, x30, [sp], #16
     c8c:	ret
     c90:	ldrh	w1, [x1, #1024]
     c94:	lsl	w1, w1, w2
     c98:	ldrh	w4, [x0, #5936]
     c9c:	orr	w1, w1, w4
     ca0:	strh	w1, [x0, #5936]
     ca4:	add	w2, w2, w3
     ca8:	str	w2, [x0, #5940]
     cac:	b	c88 <compress_block+0x444>

0000000000000cb0 <build_tree>:
     cb0:	stp	x29, x30, [sp, #-128]!
     cb4:	mov	x29, sp
     cb8:	stp	x19, x20, [sp, #16]
     cbc:	stp	x21, x22, [sp, #32]
     cc0:	stp	x23, x24, [sp, #48]
     cc4:	stp	x25, x26, [sp, #64]
     cc8:	stp	x27, x28, [sp, #80]
     ccc:	mov	x19, x0
     cd0:	mov	x28, x1
     cd4:	ldr	x20, [x1]
     cd8:	ldr	x0, [x1, #16]
     cdc:	ldr	x3, [x0]
     ce0:	ldr	w24, [x0, #20]
     ce4:	str	wzr, [x19, #5300]
     ce8:	mov	w0, #0x23d                 	// #573
     cec:	str	w0, [x19, #5304]
     cf0:	cmp	w24, #0x0
     cf4:	b.le	d64 <build_tree+0xb4>
     cf8:	mov	x1, x20
     cfc:	mov	x0, #0x0                   	// #0
     d00:	mov	w23, #0xffffffff            	// #-1
     d04:	add	x4, x19, #0x1, lsl #12
     d08:	add	x4, x4, #0x4bc
     d0c:	b	d24 <build_tree+0x74>
     d10:	strh	wzr, [x1, #2]
     d14:	add	x0, x0, #0x1
     d18:	add	x1, x1, #0x4
     d1c:	cmp	w24, w0
     d20:	b.le	d4c <build_tree+0x9c>
     d24:	ldrh	w2, [x1]
     d28:	cbz	w2, d10 <build_tree+0x60>
     d2c:	ldr	w2, [x19, #5300]
     d30:	add	w2, w2, #0x1
     d34:	str	w2, [x19, #5300]
     d38:	add	x2, x19, w2, sxtw #2
     d3c:	str	w0, [x2, #3008]
     d40:	strb	wzr, [x4, x0]
     d44:	mov	w23, w0
     d48:	b	d14 <build_tree+0x64>
     d4c:	ldr	w1, [x19, #5300]
     d50:	cmp	w1, #0x1
     d54:	b.gt	ddc <build_tree+0x12c>
     d58:	mov	w4, #0x0                   	// #0
     d5c:	mov	w2, #0x1                   	// #1
     d60:	b	dcc <build_tree+0x11c>
     d64:	mov	w23, #0xffffffff            	// #-1
     d68:	mov	w1, #0x0                   	// #0
     d6c:	b	d58 <build_tree+0xa8>
     d70:	add	w23, w23, #0x1
     d74:	mov	w0, w23
     d78:	add	w1, w1, #0x1
     d7c:	str	w1, [x19, #5300]
     d80:	add	x1, x19, w1, sxtw #2
     d84:	str	w0, [x1, #3008]
     d88:	sbfiz	x1, x0, #2, #32
     d8c:	strh	w2, [x20, x1]
     d90:	add	x0, x19, w0, sxtw
     d94:	add	x0, x0, #0x1, lsl #12
     d98:	strb	wzr, [x0, #1212]
     d9c:	ldr	x0, [x19, #5912]
     da0:	sub	x0, x0, #0x1
     da4:	str	x0, [x19, #5912]
     da8:	cbz	x3, dc0 <build_tree+0x110>
     dac:	add	x1, x3, x1
     db0:	ldrh	w1, [x1, #2]
     db4:	ldr	x0, [x19, #5920]
     db8:	sub	x0, x0, x1
     dbc:	str	x0, [x19, #5920]
     dc0:	ldr	w1, [x19, #5300]
     dc4:	cmp	w1, #0x1
     dc8:	b.gt	ddc <build_tree+0x12c>
     dcc:	mov	w0, w4
     dd0:	cmp	w23, #0x1
     dd4:	b.gt	d78 <build_tree+0xc8>
     dd8:	b	d70 <build_tree+0xc0>
     ddc:	str	w23, [x28, #8]
     de0:	ldr	w0, [x19, #5300]
     de4:	add	w21, w0, w0, lsr #31
     de8:	asr	w21, w21, #1
     dec:	cmp	w0, #0x1
     df0:	b.le	e10 <build_tree+0x160>
     df4:	mov	w2, w21
     df8:	mov	x1, x20
     dfc:	mov	x0, x19
     e00:	bl	58 <pqdownheap>
     e04:	sub	w21, w21, #0x1
     e08:	cmp	w21, #0x0
     e0c:	b.gt	df4 <build_tree+0x144>
     e10:	sxtw	x0, w24
     e14:	mov	x22, x0
     e18:	mov	w25, #0x1                   	// #1
     e1c:	add	x27, x19, #0x1, lsl #12
     e20:	add	x27, x27, #0x4bc
     e24:	sub	w24, w24, w0
     e28:	ldr	w21, [x19, #3012]
     e2c:	ldr	w0, [x19, #5300]
     e30:	sub	w1, w0, #0x1
     e34:	str	w1, [x19, #5300]
     e38:	add	x0, x19, w0, sxtw #2
     e3c:	ldr	w0, [x0, #3008]
     e40:	str	w0, [x19, #3012]
     e44:	mov	w2, w25
     e48:	mov	x1, x20
     e4c:	mov	x0, x19
     e50:	bl	58 <pqdownheap>
     e54:	ldr	w0, [x19, #3012]
     e58:	ldr	w1, [x19, #5304]
     e5c:	add	x2, x19, w1, sxtw #2
     e60:	str	w21, [x2, #3004]
     e64:	sub	w1, w1, #0x2
     e68:	str	w1, [x19, #5304]
     e6c:	str	w0, [x2, #3000]
     e70:	sbfiz	x1, x21, #2, #32
     e74:	add	x4, x20, x1
     e78:	sbfiz	x2, x0, #2, #32
     e7c:	add	x5, x20, x2
     e80:	lsl	x3, x22, #2
     e84:	ldrh	w1, [x20, x1]
     e88:	ldrh	w2, [x20, x2]
     e8c:	add	w1, w1, w2
     e90:	strh	w1, [x20, x3]
     e94:	add	x21, x19, w21, sxtw
     e98:	add	x21, x21, #0x1, lsl #12
     e9c:	ldrb	w3, [x21, #1212]
     ea0:	add	x0, x19, w0, sxtw
     ea4:	add	x0, x0, #0x1, lsl #12
     ea8:	ldrb	w2, [x0, #1212]
     eac:	add	w0, w3, #0x1
     eb0:	and	w1, w0, #0xff
     eb4:	add	w0, w2, #0x1
     eb8:	and	w0, w0, #0xff
     ebc:	cmp	w3, w2
     ec0:	csel	w0, w0, w1, cc  // cc = lo, ul, last
     ec4:	strb	w0, [x27, x22]
     ec8:	add	w0, w24, w22
     ecc:	and	w0, w0, #0xffff
     ed0:	strh	w0, [x5, #2]
     ed4:	strh	w0, [x4, #2]
     ed8:	str	w22, [x19, #3012]
     edc:	mov	w2, w25
     ee0:	mov	x1, x20
     ee4:	mov	x0, x19
     ee8:	bl	58 <pqdownheap>
     eec:	add	x22, x22, #0x1
     ef0:	ldr	w0, [x19, #5300]
     ef4:	cmp	w0, #0x1
     ef8:	b.gt	e28 <build_tree+0x178>
     efc:	ldr	w0, [x19, #5304]
     f00:	sub	w0, w0, #0x1
     f04:	str	w0, [x19, #5304]
     f08:	ldr	w4, [x19, #3012]
     f0c:	add	x0, x19, w0, sxtw #2
     f10:	str	w4, [x0, #3008]
     f14:	ldr	x3, [x28]
     f18:	ldr	w7, [x28, #8]
     f1c:	ldr	x0, [x28, #16]
     f20:	ldr	x11, [x0]
     f24:	ldr	x14, [x0, #8]
     f28:	ldr	w12, [x0, #16]
     f2c:	ldr	w1, [x0, #24]
     f30:	add	x6, x19, #0xba0
     f34:	mov	x0, x6
     f38:	add	x2, x19, #0xbc0
     f3c:	strh	wzr, [x0], #2
     f40:	cmp	x0, x2
     f44:	b.ne	f3c <build_tree+0x28c>  // b.any
     f48:	add	x4, x3, w4, sxtw #2
     f4c:	strh	wzr, [x4, #2]
     f50:	ldr	w2, [x19, #5304]
     f54:	add	w2, w2, #0x1
     f58:	cmp	w2, #0x23c
     f5c:	b.gt	10fc <build_tree+0x44c>
     f60:	sxtw	x2, w2
     f64:	mov	w10, #0x0                   	// #0
     f68:	add	x8, x19, #0xbc0
     f6c:	mov	w15, w1
     f70:	mov	w13, #0x0                   	// #0
     f74:	b	fb4 <build_tree+0x304>
     f78:	ldrh	w4, [x3, x5]
     f7c:	add	w0, w0, w9
     f80:	ldr	x16, [x19, #5912]
     f84:	madd	x0, x0, x4, x16
     f88:	str	x0, [x19, #5912]
     f8c:	cbz	x11, fa8 <build_tree+0x2f8>
     f90:	add	x5, x11, x5
     f94:	ldrh	w0, [x5, #2]
     f98:	add	w0, w0, w9
     f9c:	ldr	x5, [x19, #5920]
     fa0:	madd	x0, x0, x4, x5
     fa4:	str	x0, [x19, #5920]
     fa8:	add	x2, x2, #0x1
     fac:	cmp	w2, #0x23c
     fb0:	b.gt	1014 <build_tree+0x364>
     fb4:	ldr	w4, [x8, x2, lsl #2]
     fb8:	sbfiz	x5, x4, #2, #32
     fbc:	add	x9, x3, x5
     fc0:	ldrh	w0, [x9, #2]
     fc4:	add	x0, x3, x0, lsl #2
     fc8:	ldrh	w0, [x0, #2]
     fcc:	add	w0, w0, #0x1
     fd0:	cmp	w1, w0
     fd4:	b.ge	fe0 <build_tree+0x330>  // b.tcont
     fd8:	add	w10, w10, #0x1
     fdc:	mov	w0, w15
     fe0:	strh	w0, [x9, #2]
     fe4:	cmp	w7, w4
     fe8:	b.lt	fa8 <build_tree+0x2f8>  // b.tstop
     fec:	add	x16, x19, w0, sxtw #1
     ff0:	ldrh	w9, [x16, #2976]
     ff4:	add	w9, w9, #0x1
     ff8:	strh	w9, [x16, #2976]
     ffc:	mov	w9, w13
    1000:	cmp	w12, w4
    1004:	b.gt	f78 <build_tree+0x2c8>
    1008:	sub	w4, w4, w12
    100c:	ldr	w9, [x14, w4, sxtw #2]
    1010:	b	f78 <build_tree+0x2c8>
    1014:	cbz	w10, 10fc <build_tree+0x44c>
    1018:	sub	w12, w1, #0x1
    101c:	sub	w13, w1, #0x2
    1020:	add	x11, x19, #0xba2
    1024:	b	1058 <build_tree+0x3a8>
    1028:	add	x2, x19, w2, sxtw #1
    102c:	sub	w0, w0, #0x1
    1030:	strh	w0, [x2, #2976]
    1034:	ldrh	w0, [x2, #2978]
    1038:	add	w0, w0, #0x2
    103c:	strh	w0, [x2, #2978]
    1040:	ldrh	w0, [x5, #2976]
    1044:	sub	w0, w0, #0x1
    1048:	strh	w0, [x5, #2976]
    104c:	sub	w10, w10, #0x2
    1050:	cmp	w10, #0x0
    1054:	b.le	1084 <build_tree+0x3d4>
    1058:	mov	w2, w12
    105c:	sxtw	x9, w1
    1060:	add	x5, x19, w1, sxtw #1
    1064:	ldrh	w0, [x5, #2974]
    1068:	cbnz	w0, 1028 <build_tree+0x378>
    106c:	sxtw	x4, w13
    1070:	mov	w2, w4
    1074:	sub	x4, x4, #0x1
    1078:	ldrh	w0, [x11, x4, lsl #1]
    107c:	cbz	w0, 1070 <build_tree+0x3c0>
    1080:	b	1028 <build_tree+0x378>
    1084:	cbz	w1, 10fc <build_tree+0x44c>
    1088:	mov	w11, #0x23d                 	// #573
    108c:	b	10e8 <build_tree+0x438>
    1090:	sub	x0, x9, w0, uxth
    1094:	ldrh	w12, [x3, x2]
    1098:	ldr	x2, [x19, #5912]
    109c:	madd	x0, x0, x12, x2
    10a0:	str	x0, [x19, #5912]
    10a4:	strh	w1, [x10, #2]
    10a8:	sub	w5, w5, #0x1
    10ac:	sub	x4, x4, #0x1
    10b0:	cbz	w5, 10dc <build_tree+0x42c>
    10b4:	mov	w11, w4
    10b8:	ldr	w2, [x8, x4, lsl #2]
    10bc:	cmp	w7, w2
    10c0:	b.lt	10ac <build_tree+0x3fc>  // b.tstop
    10c4:	sbfiz	x2, x2, #2, #32
    10c8:	add	x10, x3, x2
    10cc:	ldrh	w0, [x10, #2]
    10d0:	cmp	w0, w1
    10d4:	b.ne	1090 <build_tree+0x3e0>  // b.any
    10d8:	b	10a8 <build_tree+0x3f8>
    10dc:	sub	x9, x9, #0x1
    10e0:	subs	w1, w1, #0x1
    10e4:	b.eq	10fc <build_tree+0x44c>  // b.none
    10e8:	ldrh	w5, [x6, x9, lsl #1]
    10ec:	cbz	w5, 10dc <build_tree+0x42c>
    10f0:	sub	w4, w11, #0x1
    10f4:	sxtw	x4, w4
    10f8:	b	10b4 <build_tree+0x404>
    10fc:	mov	x1, #0x0                   	// #0
    1100:	mov	w0, #0x0                   	// #0
    1104:	ldrh	w2, [x6, x1]
    1108:	add	w0, w2, w0
    110c:	lsl	w0, w0, #1
    1110:	add	x2, sp, #0x60
    1114:	add	x2, x1, x2
    1118:	strh	w0, [x2, #2]
    111c:	add	x1, x1, #0x2
    1120:	cmp	x1, #0x1e
    1124:	b.ne	1104 <build_tree+0x454>  // b.any
    1128:	tbnz	w23, #31, 1190 <build_tree+0x4e0>
    112c:	mov	x3, x20
    1130:	add	x20, x20, #0x4
    1134:	add	x20, x20, w23, uxtw #2
    1138:	add	x6, sp, #0x60
    113c:	mov	w7, #0x0                   	// #0
    1140:	b	116c <build_tree+0x4bc>
    1144:	and	w2, w0, #0x1
    1148:	orr	w2, w2, w4
    114c:	lsr	w0, w0, #1
    1150:	lsl	w4, w2, #1
    1154:	subs	w1, w1, #0x1
    1158:	b.ne	1144 <build_tree+0x494>  // b.any
    115c:	strh	w2, [x5]
    1160:	add	x3, x3, #0x4
    1164:	cmp	x3, x20
    1168:	b.eq	1190 <build_tree+0x4e0>  // b.none
    116c:	mov	x5, x3
    1170:	ldrh	w1, [x3, #2]
    1174:	cbz	w1, 1160 <build_tree+0x4b0>
    1178:	sbfiz	x2, x1, #1, #32
    117c:	ldrh	w0, [x6, x2]
    1180:	add	w4, w0, #0x1
    1184:	strh	w4, [x6, x2]
    1188:	mov	w4, w7
    118c:	b	1144 <build_tree+0x494>
    1190:	ldp	x19, x20, [sp, #16]
    1194:	ldp	x21, x22, [sp, #32]
    1198:	ldp	x23, x24, [sp, #48]
    119c:	ldp	x25, x26, [sp, #64]
    11a0:	ldp	x27, x28, [sp, #80]
    11a4:	ldp	x29, x30, [sp], #128
    11a8:	ret

00000000000011ac <bi_flush>:
    11ac:	ldr	w1, [x0, #5940]
    11b0:	cmp	w1, #0x10
    11b4:	b.eq	11f4 <bi_flush+0x48>  // b.none
    11b8:	cmp	w1, #0x7
    11bc:	b.le	1230 <bi_flush+0x84>
    11c0:	ldrh	w3, [x0, #5936]
    11c4:	ldr	x2, [x0, #16]
    11c8:	ldr	x1, [x0, #40]
    11cc:	add	x4, x1, #0x1
    11d0:	str	x4, [x0, #40]
    11d4:	strb	w3, [x2, x1]
    11d8:	ldrh	w1, [x0, #5936]
    11dc:	lsr	w1, w1, #8
    11e0:	strh	w1, [x0, #5936]
    11e4:	ldr	w1, [x0, #5940]
    11e8:	sub	w1, w1, #0x8
    11ec:	str	w1, [x0, #5940]
    11f0:	b	1230 <bi_flush+0x84>
    11f4:	ldrh	w3, [x0, #5936]
    11f8:	ldr	x2, [x0, #16]
    11fc:	ldr	x1, [x0, #40]
    1200:	add	x4, x1, #0x1
    1204:	str	x4, [x0, #40]
    1208:	strb	w3, [x2, x1]
    120c:	ldrh	w1, [x0, #5936]
    1210:	lsr	w1, w1, #8
    1214:	ldr	x3, [x0, #16]
    1218:	ldr	x2, [x0, #40]
    121c:	add	x4, x2, #0x1
    1220:	str	x4, [x0, #40]
    1224:	strb	w1, [x3, x2]
    1228:	strh	wzr, [x0, #5936]
    122c:	str	wzr, [x0, #5940]
    1230:	ret

0000000000001234 <bi_windup>:
    1234:	ldr	w1, [x0, #5940]
    1238:	cmp	w1, #0x8
    123c:	b.le	1280 <bi_windup+0x4c>
    1240:	ldrh	w3, [x0, #5936]
    1244:	ldr	x2, [x0, #16]
    1248:	ldr	x1, [x0, #40]
    124c:	add	x4, x1, #0x1
    1250:	str	x4, [x0, #40]
    1254:	strb	w3, [x2, x1]
    1258:	ldrh	w1, [x0, #5936]
    125c:	lsr	w1, w1, #8
    1260:	ldr	x3, [x0, #16]
    1264:	ldr	x2, [x0, #40]
    1268:	add	x4, x2, #0x1
    126c:	str	x4, [x0, #40]
    1270:	strb	w1, [x3, x2]
    1274:	strh	wzr, [x0, #5936]
    1278:	str	wzr, [x0, #5940]
    127c:	ret
    1280:	cmp	w1, #0x0
    1284:	b.le	1274 <bi_windup+0x40>
    1288:	ldrh	w3, [x0, #5936]
    128c:	ldr	x2, [x0, #16]
    1290:	ldr	x1, [x0, #40]
    1294:	add	x4, x1, #0x1
    1298:	str	x4, [x0, #40]
    129c:	strb	w3, [x2, x1]
    12a0:	b	1274 <bi_windup+0x40>

00000000000012a4 <_tr_init>:
    12a4:	stp	x29, x30, [sp, #-16]!
    12a8:	mov	x29, sp
    12ac:	add	x2, x0, #0xd4
    12b0:	str	x2, [x0, #2904]
    12b4:	adrp	x2, 0 <init_block>
    12b8:	add	x2, x2, #0x0
    12bc:	add	x3, x2, #0x4e0
    12c0:	str	x3, [x0, #2920]
    12c4:	add	x3, x0, #0x9c8
    12c8:	str	x3, [x0, #2928]
    12cc:	add	x3, x2, #0x500
    12d0:	str	x3, [x0, #2944]
    12d4:	add	x3, x0, #0xabc
    12d8:	str	x3, [x0, #2952]
    12dc:	add	x2, x2, #0x520
    12e0:	str	x2, [x0, #2968]
    12e4:	strh	wzr, [x0, #5936]
    12e8:	str	wzr, [x0, #5940]
    12ec:	bl	0 <init_block>
    12f0:	ldp	x29, x30, [sp], #16
    12f4:	ret

00000000000012f8 <_tr_stored_block>:
    12f8:	stp	x29, x30, [sp, #-48]!
    12fc:	mov	x29, sp
    1300:	stp	x19, x20, [sp, #16]
    1304:	str	x21, [sp, #32]
    1308:	mov	x19, x0
    130c:	mov	x21, x1
    1310:	mov	x20, x2
    1314:	ldr	w0, [x0, #5940]
    1318:	cmp	w0, #0xd
    131c:	b.le	1424 <_tr_stored_block+0x12c>
    1320:	and	w3, w3, #0xffff
    1324:	lsl	w0, w3, w0
    1328:	ldrh	w1, [x19, #5936]
    132c:	orr	w0, w0, w1
    1330:	sxth	w0, w0
    1334:	strh	w0, [x19, #5936]
    1338:	ldr	x2, [x19, #16]
    133c:	ldr	x1, [x19, #40]
    1340:	add	x4, x1, #0x1
    1344:	str	x4, [x19, #40]
    1348:	strb	w0, [x2, x1]
    134c:	ldrh	w0, [x19, #5936]
    1350:	lsr	w0, w0, #8
    1354:	ldr	x2, [x19, #16]
    1358:	ldr	x1, [x19, #40]
    135c:	add	x4, x1, #0x1
    1360:	str	x4, [x19, #40]
    1364:	strb	w0, [x2, x1]
    1368:	ldr	w0, [x19, #5940]
    136c:	mov	w1, #0x10                  	// #16
    1370:	sub	w1, w1, w0
    1374:	asr	w3, w3, w1
    1378:	strh	w3, [x19, #5936]
    137c:	sub	w0, w0, #0xd
    1380:	str	w0, [x19, #5940]
    1384:	mov	x0, x19
    1388:	bl	1234 <bi_windup>
    138c:	ldr	x2, [x19, #16]
    1390:	ldr	x1, [x19, #40]
    1394:	add	x0, x1, #0x1
    1398:	str	x0, [x19, #40]
    139c:	and	w0, w20, #0xff
    13a0:	strb	w0, [x2, x1]
    13a4:	ldr	x2, [x19, #16]
    13a8:	ldr	x1, [x19, #40]
    13ac:	add	x3, x1, #0x1
    13b0:	str	x3, [x19, #40]
    13b4:	ubfx	w3, w20, #8, #8
    13b8:	strb	w3, [x2, x1]
    13bc:	ldr	x2, [x19, #16]
    13c0:	ldr	x1, [x19, #40]
    13c4:	add	x3, x1, #0x1
    13c8:	str	x3, [x19, #40]
    13cc:	mvn	w0, w0
    13d0:	strb	w0, [x2, x1]
    13d4:	ldr	x2, [x19, #16]
    13d8:	ldr	x1, [x19, #40]
    13dc:	add	x0, x1, #0x1
    13e0:	str	x0, [x19, #40]
    13e4:	mvn	w0, w20
    13e8:	ubfx	x0, x0, #8, #8
    13ec:	strb	w0, [x2, x1]
    13f0:	ldr	x3, [x19, #16]
    13f4:	ldr	x0, [x19, #40]
    13f8:	mov	x2, x20
    13fc:	mov	x1, x21
    1400:	add	x0, x3, x0
    1404:	bl	0 <memcpy>
    1408:	ldr	x2, [x19, #40]
    140c:	add	x20, x2, x20
    1410:	str	x20, [x19, #40]
    1414:	ldp	x19, x20, [sp, #16]
    1418:	ldr	x21, [sp, #32]
    141c:	ldp	x29, x30, [sp], #48
    1420:	ret
    1424:	and	w3, w3, #0xffff
    1428:	lsl	w3, w3, w0
    142c:	ldrh	w1, [x19, #5936]
    1430:	orr	w3, w3, w1
    1434:	strh	w3, [x19, #5936]
    1438:	add	w0, w0, #0x3
    143c:	str	w0, [x19, #5940]
    1440:	b	1384 <_tr_stored_block+0x8c>

0000000000001444 <_tr_flush_bits>:
    1444:	stp	x29, x30, [sp, #-16]!
    1448:	mov	x29, sp
    144c:	bl	11ac <bi_flush>
    1450:	ldp	x29, x30, [sp], #16
    1454:	ret

0000000000001458 <_tr_align>:
    1458:	stp	x29, x30, [sp, #-16]!
    145c:	mov	x29, sp
    1460:	ldr	w1, [x0, #5940]
    1464:	cmp	w1, #0xd
    1468:	b.le	152c <_tr_align+0xd4>
    146c:	mov	w2, #0x2                   	// #2
    1470:	lsl	w1, w2, w1
    1474:	ldrh	w3, [x0, #5936]
    1478:	orr	w1, w1, w3
    147c:	sxth	w1, w1
    1480:	strh	w1, [x0, #5936]
    1484:	ldr	x4, [x0, #16]
    1488:	ldr	x3, [x0, #40]
    148c:	add	x5, x3, #0x1
    1490:	str	x5, [x0, #40]
    1494:	strb	w1, [x4, x3]
    1498:	ldrh	w1, [x0, #5936]
    149c:	lsr	w1, w1, #8
    14a0:	ldr	x4, [x0, #16]
    14a4:	ldr	x3, [x0, #40]
    14a8:	add	x5, x3, #0x1
    14ac:	str	x5, [x0, #40]
    14b0:	strb	w1, [x4, x3]
    14b4:	ldr	w1, [x0, #5940]
    14b8:	mov	w3, #0x10                  	// #16
    14bc:	sub	w3, w3, w1
    14c0:	asr	w2, w2, w3
    14c4:	strh	w2, [x0, #5936]
    14c8:	sub	w1, w1, #0xd
    14cc:	str	w1, [x0, #5940]
    14d0:	ldr	w1, [x0, #5940]
    14d4:	cmp	w1, #0x9
    14d8:	b.le	154c <_tr_align+0xf4>
    14dc:	ldrh	w3, [x0, #5936]
    14e0:	ldr	x2, [x0, #16]
    14e4:	ldr	x1, [x0, #40]
    14e8:	add	x4, x1, #0x1
    14ec:	str	x4, [x0, #40]
    14f0:	strb	w3, [x2, x1]
    14f4:	ldrh	w1, [x0, #5936]
    14f8:	lsr	w1, w1, #8
    14fc:	ldr	x3, [x0, #16]
    1500:	ldr	x2, [x0, #40]
    1504:	add	x4, x2, #0x1
    1508:	str	x4, [x0, #40]
    150c:	strb	w1, [x3, x2]
    1510:	ldr	w1, [x0, #5940]
    1514:	strh	wzr, [x0, #5936]
    1518:	sub	w1, w1, #0x9
    151c:	str	w1, [x0, #5940]
    1520:	bl	11ac <bi_flush>
    1524:	ldp	x29, x30, [sp], #16
    1528:	ret
    152c:	mov	w2, #0x2                   	// #2
    1530:	lsl	w2, w2, w1
    1534:	ldrh	w3, [x0, #5936]
    1538:	orr	w2, w2, w3
    153c:	strh	w2, [x0, #5936]
    1540:	add	w1, w1, #0x3
    1544:	str	w1, [x0, #5940]
    1548:	b	14d0 <_tr_align+0x78>
    154c:	add	w1, w1, #0x7
    1550:	str	w1, [x0, #5940]
    1554:	b	1520 <_tr_align+0xc8>

0000000000001558 <_tr_flush_block>:
    1558:	stp	x29, x30, [sp, #-64]!
    155c:	mov	x29, sp
    1560:	stp	x19, x20, [sp, #16]
    1564:	stp	x23, x24, [sp, #48]
    1568:	mov	x19, x0
    156c:	mov	x24, x1
    1570:	mov	x23, x2
    1574:	mov	w20, w3
    1578:	ldr	w0, [x0, #196]
    157c:	cmp	w0, #0x0
    1580:	b.le	192c <_tr_flush_block+0x3d4>
    1584:	stp	x21, x22, [sp, #32]
    1588:	ldr	x3, [x19]
    158c:	ldr	w0, [x3, #88]
    1590:	cmp	w0, #0x2
    1594:	b.eq	1890 <_tr_flush_block+0x338>  // b.none
    1598:	add	x1, x19, #0xb58
    159c:	mov	x0, x19
    15a0:	bl	cb0 <build_tree>
    15a4:	add	x1, x19, #0xb70
    15a8:	mov	x0, x19
    15ac:	bl	cb0 <build_tree>
    15b0:	add	x21, x19, #0xd4
    15b4:	ldr	w2, [x19, #2912]
    15b8:	mov	x1, x21
    15bc:	mov	x0, x19
    15c0:	bl	144 <scan_tree>
    15c4:	add	x22, x19, #0x9c8
    15c8:	ldr	w2, [x19, #2936]
    15cc:	mov	x1, x22
    15d0:	mov	x0, x19
    15d4:	bl	144 <scan_tree>
    15d8:	add	x1, x19, #0xb88
    15dc:	mov	x0, x19
    15e0:	bl	cb0 <build_tree>
    15e4:	adrp	x1, 0 <init_block>
    15e8:	add	x1, x1, #0x0
    15ec:	add	x1, x1, #0x540
    15f0:	mov	x2, x1
    15f4:	mov	w3, #0x12                  	// #18
    15f8:	ldrb	w0, [x2, #18]
    15fc:	add	x0, x19, x0, lsl #2
    1600:	ldrh	w0, [x0, #2750]
    1604:	cbnz	w0, 1618 <_tr_flush_block+0xc0>
    1608:	sub	w3, w3, #0x1
    160c:	sub	x2, x2, #0x1
    1610:	cmp	w3, #0x2
    1614:	b.ne	15f8 <_tr_flush_block+0xa0>  // b.any
    1618:	sxtw	x0, w3
    161c:	add	x0, x0, #0x1
    1620:	add	x0, x0, x0, lsl #1
    1624:	ldr	x2, [x19, #5912]
    1628:	add	x2, x2, #0xe
    162c:	add	x0, x0, x2
    1630:	str	x0, [x19, #5912]
    1634:	add	x0, x0, #0xa
    1638:	lsr	x0, x0, #3
    163c:	ldr	x2, [x19, #5920]
    1640:	add	x2, x2, #0xa
    1644:	lsr	x2, x2, #3
    1648:	add	x4, x23, #0x4
    164c:	cmp	x0, x2
    1650:	csel	x5, x0, x2, ls  // ls = plast
    1654:	cmp	x24, #0x0
    1658:	ccmp	x4, x5, #0x2, ne  // ne = any
    165c:	b.ls	1910 <_tr_flush_block+0x3b8>  // b.plast
    1660:	ldr	w4, [x19, #200]
    1664:	cmp	w4, #0x4
    1668:	ccmp	x0, x2, #0x2, ne  // ne = any
    166c:	b.cs	19e8 <_tr_flush_block+0x490>  // b.hs, b.nlast
    1670:	ldr	w0, [x19, #5940]
    1674:	cmp	w0, #0xd
    1678:	b.le	1a14 <_tr_flush_block+0x4bc>
    167c:	add	w2, w20, #0x4
    1680:	and	w2, w2, #0xffff
    1684:	lsl	w0, w2, w0
    1688:	ldrh	w4, [x19, #5936]
    168c:	orr	w0, w0, w4
    1690:	sxth	w0, w0
    1694:	strh	w0, [x19, #5936]
    1698:	ldr	x5, [x19, #16]
    169c:	ldr	x4, [x19, #40]
    16a0:	add	x6, x4, #0x1
    16a4:	str	x6, [x19, #40]
    16a8:	strb	w0, [x5, x4]
    16ac:	ldrh	w0, [x19, #5936]
    16b0:	lsr	w0, w0, #8
    16b4:	ldr	x5, [x19, #16]
    16b8:	ldr	x4, [x19, #40]
    16bc:	add	x6, x4, #0x1
    16c0:	str	x6, [x19, #40]
    16c4:	strb	w0, [x5, x4]
    16c8:	ldr	w0, [x19, #5940]
    16cc:	mov	w4, #0x10                  	// #16
    16d0:	sub	w4, w4, w0
    16d4:	asr	w2, w2, w4
    16d8:	strh	w2, [x19, #5936]
    16dc:	sub	w0, w0, #0xd
    16e0:	str	w0, [x19, #5940]
    16e4:	ldr	w2, [x19, #2912]
    16e8:	ldr	w23, [x19, #2936]
    16ec:	add	w7, w3, #0x1
    16f0:	ldr	w0, [x19, #5940]
    16f4:	cmp	w0, #0xb
    16f8:	b.le	1a38 <_tr_flush_block+0x4e0>
    16fc:	sub	w4, w2, #0x100
    1700:	and	w4, w4, #0xffff
    1704:	lsl	w0, w4, w0
    1708:	ldrh	w5, [x19, #5936]
    170c:	orr	w0, w0, w5
    1710:	sxth	w0, w0
    1714:	strh	w0, [x19, #5936]
    1718:	ldr	x6, [x19, #16]
    171c:	ldr	x5, [x19, #40]
    1720:	add	x8, x5, #0x1
    1724:	str	x8, [x19, #40]
    1728:	strb	w0, [x6, x5]
    172c:	ldrh	w0, [x19, #5936]
    1730:	lsr	w0, w0, #8
    1734:	ldr	x6, [x19, #16]
    1738:	ldr	x5, [x19, #40]
    173c:	add	x8, x5, #0x1
    1740:	str	x8, [x19, #40]
    1744:	strb	w0, [x6, x5]
    1748:	ldr	w0, [x19, #5940]
    174c:	mov	w5, #0x10                  	// #16
    1750:	sub	w5, w5, w0
    1754:	asr	w4, w4, w5
    1758:	strh	w4, [x19, #5936]
    175c:	sub	w0, w0, #0xb
    1760:	str	w0, [x19, #5940]
    1764:	ldr	w0, [x19, #5940]
    1768:	cmp	w0, #0xb
    176c:	b.le	1a5c <_tr_flush_block+0x504>
    1770:	and	w4, w23, #0xffff
    1774:	lsl	w0, w4, w0
    1778:	ldrh	w5, [x19, #5936]
    177c:	orr	w0, w0, w5
    1780:	sxth	w0, w0
    1784:	strh	w0, [x19, #5936]
    1788:	ldr	x6, [x19, #16]
    178c:	ldr	x5, [x19, #40]
    1790:	add	x8, x5, #0x1
    1794:	str	x8, [x19, #40]
    1798:	strb	w0, [x6, x5]
    179c:	ldrh	w0, [x19, #5936]
    17a0:	lsr	w0, w0, #8
    17a4:	ldr	x6, [x19, #16]
    17a8:	ldr	x5, [x19, #40]
    17ac:	add	x8, x5, #0x1
    17b0:	str	x8, [x19, #40]
    17b4:	strb	w0, [x6, x5]
    17b8:	ldr	w0, [x19, #5940]
    17bc:	mov	w5, #0x10                  	// #16
    17c0:	sub	w5, w5, w0
    17c4:	asr	w4, w4, w5
    17c8:	strh	w4, [x19, #5936]
    17cc:	sub	w0, w0, #0xb
    17d0:	str	w0, [x19, #5940]
    17d4:	ldr	w0, [x19, #5940]
    17d8:	cmp	w0, #0xc
    17dc:	b.le	1a7c <_tr_flush_block+0x524>
    17e0:	sub	w4, w3, #0x3
    17e4:	and	w4, w4, #0xffff
    17e8:	lsl	w0, w4, w0
    17ec:	ldrh	w5, [x19, #5936]
    17f0:	orr	w0, w0, w5
    17f4:	sxth	w0, w0
    17f8:	strh	w0, [x19, #5936]
    17fc:	ldr	x6, [x19, #16]
    1800:	ldr	x5, [x19, #40]
    1804:	add	x8, x5, #0x1
    1808:	str	x8, [x19, #40]
    180c:	strb	w0, [x6, x5]
    1810:	ldrh	w0, [x19, #5936]
    1814:	lsr	w0, w0, #8
    1818:	ldr	x6, [x19, #16]
    181c:	ldr	x5, [x19, #40]
    1820:	add	x8, x5, #0x1
    1824:	str	x8, [x19, #40]
    1828:	strb	w0, [x6, x5]
    182c:	ldr	w0, [x19, #5940]
    1830:	mov	w5, #0x10                  	// #16
    1834:	sub	w5, w5, w0
    1838:	asr	w4, w4, w5
    183c:	strh	w4, [x19, #5936]
    1840:	sub	w0, w0, #0xc
    1844:	str	w0, [x19, #5940]
    1848:	add	x5, x1, #0x1
    184c:	add	x5, x5, w3, uxtw
    1850:	mov	w6, #0x10                  	// #16
    1854:	cmp	w7, #0x0
    1858:	b.gt	1b14 <_tr_flush_block+0x5bc>
    185c:	mov	x1, x21
    1860:	mov	x0, x19
    1864:	bl	260 <send_tree>
    1868:	mov	w2, w23
    186c:	mov	x1, x22
    1870:	mov	x0, x19
    1874:	bl	260 <send_tree>
    1878:	mov	x2, x22
    187c:	mov	x1, x21
    1880:	mov	x0, x19
    1884:	bl	844 <compress_block>
    1888:	ldp	x21, x22, [sp, #32]
    188c:	b	19cc <_tr_flush_block+0x474>
    1890:	add	x0, x19, #0xd4
    1894:	add	x4, x19, #0x154
    1898:	mov	x1, #0xc07f                	// #49279
    189c:	movk	x1, #0xf3ff, lsl #16
    18a0:	b	18b4 <_tr_flush_block+0x35c>
    18a4:	lsr	x1, x1, #1
    18a8:	add	x0, x0, #0x4
    18ac:	cmp	x0, x4
    18b0:	b.eq	18cc <_tr_flush_block+0x374>  // b.none
    18b4:	tbz	w1, #0, 18a4 <_tr_flush_block+0x34c>
    18b8:	ldrh	w2, [x0]
    18bc:	cbz	w2, 18a4 <_tr_flush_block+0x34c>
    18c0:	mov	w0, #0x0                   	// #0
    18c4:	str	w0, [x3, #88]
    18c8:	b	1598 <_tr_flush_block+0x40>
    18cc:	ldr	x1, [x19, #248]
    18d0:	mov	w0, #0x1                   	// #1
    18d4:	tst	x1, #0xffff0000ffff
    18d8:	b.ne	18c4 <_tr_flush_block+0x36c>  // b.any
    18dc:	ldrh	w1, [x19, #264]
    18e0:	cbnz	w1, 18c4 <_tr_flush_block+0x36c>
    18e4:	add	x0, x19, #0x154
    18e8:	add	x2, x19, #0x4d4
    18ec:	ldrh	w1, [x0]
    18f0:	cbnz	w1, 1908 <_tr_flush_block+0x3b0>
    18f4:	add	x0, x0, #0x4
    18f8:	cmp	x0, x2
    18fc:	b.ne	18ec <_tr_flush_block+0x394>  // b.any
    1900:	mov	w0, #0x0                   	// #0
    1904:	b	18c4 <_tr_flush_block+0x36c>
    1908:	mov	w0, #0x1                   	// #1
    190c:	b	18c4 <_tr_flush_block+0x36c>
    1910:	ldp	x21, x22, [sp, #32]
    1914:	mov	w3, w20
    1918:	mov	x2, x23
    191c:	mov	x1, x24
    1920:	mov	x0, x19
    1924:	bl	12f8 <_tr_stored_block>
    1928:	b	19cc <_tr_flush_block+0x474>
    192c:	add	x1, x2, #0x5
    1930:	add	x0, x2, #0x4
    1934:	cmp	x24, #0x0
    1938:	ccmp	x1, x0, #0x0, ne  // ne = any
    193c:	b.cs	1914 <_tr_flush_block+0x3bc>  // b.hs, b.nlast
    1940:	ldr	w0, [x19, #5940]
    1944:	cmp	w0, #0xd
    1948:	b.le	19f0 <_tr_flush_block+0x498>
    194c:	add	w1, w20, #0x2
    1950:	and	w1, w1, #0xffff
    1954:	lsl	w0, w1, w0
    1958:	ldrh	w2, [x19, #5936]
    195c:	orr	w0, w0, w2
    1960:	sxth	w0, w0
    1964:	strh	w0, [x19, #5936]
    1968:	ldr	x3, [x19, #16]
    196c:	ldr	x2, [x19, #40]
    1970:	add	x4, x2, #0x1
    1974:	str	x4, [x19, #40]
    1978:	strb	w0, [x3, x2]
    197c:	ldrh	w0, [x19, #5936]
    1980:	lsr	w0, w0, #8
    1984:	ldr	x3, [x19, #16]
    1988:	ldr	x2, [x19, #40]
    198c:	add	x4, x2, #0x1
    1990:	str	x4, [x19, #40]
    1994:	strb	w0, [x3, x2]
    1998:	ldr	w0, [x19, #5940]
    199c:	mov	w2, #0x10                  	// #16
    19a0:	sub	w2, w2, w0
    19a4:	asr	w1, w1, w2
    19a8:	strh	w1, [x19, #5936]
    19ac:	sub	w0, w0, #0xd
    19b0:	str	w0, [x19, #5940]
    19b4:	adrp	x1, 0 <init_block>
    19b8:	add	x1, x1, #0x0
    19bc:	add	x2, x1, #0x558
    19c0:	add	x1, x1, #0x5d0
    19c4:	mov	x0, x19
    19c8:	bl	844 <compress_block>
    19cc:	mov	x0, x19
    19d0:	bl	0 <init_block>
    19d4:	cbnz	w20, 1b48 <_tr_flush_block+0x5f0>
    19d8:	ldp	x19, x20, [sp, #16]
    19dc:	ldp	x23, x24, [sp, #48]
    19e0:	ldp	x29, x30, [sp], #64
    19e4:	ret
    19e8:	ldp	x21, x22, [sp, #32]
    19ec:	b	1940 <_tr_flush_block+0x3e8>
    19f0:	add	w1, w20, #0x2
    19f4:	and	w1, w1, #0xffff
    19f8:	lsl	w1, w1, w0
    19fc:	ldrh	w2, [x19, #5936]
    1a00:	orr	w1, w1, w2
    1a04:	strh	w1, [x19, #5936]
    1a08:	add	w0, w0, #0x3
    1a0c:	str	w0, [x19, #5940]
    1a10:	b	19b4 <_tr_flush_block+0x45c>
    1a14:	add	w2, w20, #0x4
    1a18:	and	w2, w2, #0xffff
    1a1c:	lsl	w2, w2, w0
    1a20:	ldrh	w4, [x19, #5936]
    1a24:	orr	w2, w2, w4
    1a28:	strh	w2, [x19, #5936]
    1a2c:	add	w0, w0, #0x3
    1a30:	str	w0, [x19, #5940]
    1a34:	b	16e4 <_tr_flush_block+0x18c>
    1a38:	sub	w4, w2, #0x100
    1a3c:	and	w4, w4, #0xffff
    1a40:	lsl	w4, w4, w0
    1a44:	ldrh	w5, [x19, #5936]
    1a48:	orr	w4, w4, w5
    1a4c:	strh	w4, [x19, #5936]
    1a50:	add	w0, w0, #0x5
    1a54:	str	w0, [x19, #5940]
    1a58:	b	1764 <_tr_flush_block+0x20c>
    1a5c:	and	w4, w23, #0xffff
    1a60:	lsl	w4, w4, w0
    1a64:	ldrh	w5, [x19, #5936]
    1a68:	orr	w4, w4, w5
    1a6c:	strh	w4, [x19, #5936]
    1a70:	add	w0, w0, #0x5
    1a74:	str	w0, [x19, #5940]
    1a78:	b	17d4 <_tr_flush_block+0x27c>
    1a7c:	sub	w4, w7, #0x4
    1a80:	and	w4, w4, #0xffff
    1a84:	lsl	w4, w4, w0
    1a88:	ldrh	w5, [x19, #5936]
    1a8c:	orr	w4, w4, w5
    1a90:	strh	w4, [x19, #5936]
    1a94:	add	w0, w0, #0x4
    1a98:	str	w0, [x19, #5940]
    1a9c:	b	1848 <_tr_flush_block+0x2f0>
    1aa0:	ldrb	w4, [x1]
    1aa4:	add	x4, x19, x4, lsl #2
    1aa8:	ldrh	w3, [x4, #2750]
    1aac:	lsl	w0, w3, w0
    1ab0:	ldrh	w4, [x19, #5936]
    1ab4:	orr	w0, w0, w4
    1ab8:	sxth	w0, w0
    1abc:	strh	w0, [x19, #5936]
    1ac0:	ldr	x7, [x19, #16]
    1ac4:	ldr	x4, [x19, #40]
    1ac8:	add	x8, x4, #0x1
    1acc:	str	x8, [x19, #40]
    1ad0:	strb	w0, [x7, x4]
    1ad4:	ldrh	w0, [x19, #5936]
    1ad8:	lsr	w0, w0, #8
    1adc:	ldr	x7, [x19, #16]
    1ae0:	ldr	x4, [x19, #40]
    1ae4:	add	x8, x4, #0x1
    1ae8:	str	x8, [x19, #40]
    1aec:	strb	w0, [x7, x4]
    1af0:	ldr	w0, [x19, #5940]
    1af4:	sub	w4, w6, w0
    1af8:	asr	w3, w3, w4
    1afc:	strh	w3, [x19, #5936]
    1b00:	sub	w0, w0, #0xd
    1b04:	str	w0, [x19, #5940]
    1b08:	add	x1, x1, #0x1
    1b0c:	cmp	x1, x5
    1b10:	b.eq	185c <_tr_flush_block+0x304>  // b.none
    1b14:	ldr	w0, [x19, #5940]
    1b18:	cmp	w0, #0xd
    1b1c:	b.gt	1aa0 <_tr_flush_block+0x548>
    1b20:	ldrb	w4, [x1]
    1b24:	add	x4, x19, x4, lsl #2
    1b28:	ldrh	w3, [x4, #2750]
    1b2c:	lsl	w3, w3, w0
    1b30:	ldrh	w4, [x19, #5936]
    1b34:	orr	w3, w3, w4
    1b38:	strh	w3, [x19, #5936]
    1b3c:	add	w0, w0, #0x3
    1b40:	str	w0, [x19, #5940]
    1b44:	b	1b08 <_tr_flush_block+0x5b0>
    1b48:	mov	x0, x19
    1b4c:	bl	1234 <bi_windup>
    1b50:	b	19d8 <_tr_flush_block+0x480>

0000000000001b54 <_tr_tally>:
    1b54:	ldr	w4, [x0, #5900]
    1b58:	ldr	x3, [x0, #5904]
    1b5c:	strh	w1, [x3, x4, lsl #1]
    1b60:	ldr	x4, [x0, #5888]
    1b64:	ldr	w3, [x0, #5900]
    1b68:	add	w5, w3, #0x1
    1b6c:	str	w5, [x0, #5900]
    1b70:	strb	w2, [x4, w3, uxtw]
    1b74:	cbnz	w1, 1ba0 <_tr_tally+0x4c>
    1b78:	add	x2, x0, w2, uxtw #2
    1b7c:	ldrh	w1, [x2, #212]
    1b80:	add	w1, w1, #0x1
    1b84:	strh	w1, [x2, #212]
    1b88:	ldr	w1, [x0, #5896]
    1b8c:	sub	w1, w1, #0x1
    1b90:	ldr	w0, [x0, #5900]
    1b94:	cmp	w1, w0
    1b98:	cset	w0, eq  // eq = none
    1b9c:	ret
    1ba0:	ldr	w3, [x0, #5928]
    1ba4:	add	w3, w3, #0x1
    1ba8:	str	w3, [x0, #5928]
    1bac:	sub	w1, w1, #0x1
    1bb0:	adrp	x3, 0 <init_block>
    1bb4:	add	x3, x3, #0x0
    1bb8:	ldrb	w2, [x3, w2, uxtw]
    1bbc:	add	x2, x0, x2, lsl #2
    1bc0:	ldrh	w3, [x2, #1240]
    1bc4:	add	w3, w3, #0x1
    1bc8:	strh	w3, [x2, #1240]
    1bcc:	cmp	w1, #0xff
    1bd0:	b.hi	1bf8 <_tr_tally+0xa4>  // b.pmore
    1bd4:	adrp	x2, 0 <init_block>
    1bd8:	add	x2, x2, #0x0
    1bdc:	add	x2, x2, #0x1f0
    1be0:	ldrb	w1, [x2, w1, uxtw]
    1be4:	add	x1, x0, w1, sxtw #2
    1be8:	ldrh	w2, [x1, #2504]
    1bec:	add	w2, w2, #0x1
    1bf0:	strh	w2, [x1, #2504]
    1bf4:	b	1b88 <_tr_tally+0x34>
    1bf8:	adrp	x2, 0 <init_block>
    1bfc:	add	x2, x2, #0x0
    1c00:	lsr	w1, w1, #7
    1c04:	add	w1, w1, #0x100
    1c08:	add	x2, x2, #0x1f0
    1c0c:	ldrb	w1, [x2, w1, uxtw]
    1c10:	b	1be4 <_tr_tally+0x90>

zutil.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <zlibVersion>:
   0:	adrp	x0, 0 <zlibVersion>
   4:	add	x0, x0, #0x0
   8:	ret

000000000000000c <zlibCompileFlags>:
   c:	mov	x0, #0xa9                  	// #169
  10:	ret

0000000000000014 <zError>:
  14:	mov	w1, #0x2                   	// #2
  18:	sub	w0, w1, w0
  1c:	adrp	x1, 0 <zlibVersion>
  20:	add	x1, x1, #0x0
  24:	ldr	x0, [x1, w0, sxtw #3]
  28:	ret

000000000000002c <zcalloc>:
  2c:	stp	x29, x30, [sp, #-16]!
  30:	mov	x29, sp
  34:	mul	w0, w1, w2
  38:	bl	0 <malloc>
  3c:	ldp	x29, x30, [sp], #16
  40:	ret

0000000000000044 <zcfree>:
  44:	stp	x29, x30, [sp, #-16]!
  48:	mov	x29, sp
  4c:	mov	x0, x1
  50:	bl	0 <free>
  54:	ldp	x29, x30, [sp], #16
  58:	ret

compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <compress2>:
   0:	stp	x29, x30, [sp, #-192]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	str	x25, [sp, #64]
  18:	mov	x22, x0
  1c:	mov	x25, x1
  20:	mov	x19, x2
  24:	mov	x20, x3
  28:	mov	w1, w4
  2c:	ldr	x21, [x25]
  30:	str	xzr, [x25]
  34:	str	xzr, [sp, #144]
  38:	str	xzr, [sp, #152]
  3c:	str	xzr, [sp, #160]
  40:	mov	w3, #0x70                  	// #112
  44:	adrp	x2, 0 <compress2>
  48:	add	x2, x2, #0x0
  4c:	add	x0, sp, #0x50
  50:	bl	0 <deflateInit_>
  54:	mov	w23, w0
  58:	cbnz	w0, dc <compress2+0xdc>
  5c:	str	x22, [sp, #104]
  60:	str	wzr, [sp, #112]
  64:	str	x19, [sp, #80]
  68:	str	wzr, [sp, #88]
  6c:	mov	x22, #0xffffffff            	// #4294967295
  70:	mov	w24, #0x4                   	// #4
  74:	b	a0 <compress2+0xa0>
  78:	cmp	x20, x22
  7c:	csel	x0, x20, x22, ls  // ls = plast
  80:	str	w0, [sp, #88]
  84:	sub	x20, x20, x0
  88:	cmp	x20, #0x0
  8c:	csel	w1, w23, w24, ne  // ne = any
  90:	add	x0, sp, #0x50
  94:	bl	0 <deflate>
  98:	mov	w19, w0
  9c:	cbnz	w0, c4 <compress2+0xc4>
  a0:	ldr	w0, [sp, #112]
  a4:	cbnz	w0, b8 <compress2+0xb8>
  a8:	cmp	x21, x22
  ac:	csel	x0, x21, x22, ls  // ls = plast
  b0:	str	w0, [sp, #112]
  b4:	sub	x21, x21, x0
  b8:	ldr	w0, [sp, #88]
  bc:	cbnz	w0, 88 <compress2+0x88>
  c0:	b	78 <compress2+0x78>
  c4:	ldr	x0, [sp, #120]
  c8:	str	x0, [x25]
  cc:	add	x0, sp, #0x50
  d0:	bl	0 <deflateEnd>
  d4:	cmp	w19, #0x1
  d8:	csel	w23, w23, w19, eq  // eq = none
  dc:	mov	w0, w23
  e0:	ldp	x19, x20, [sp, #16]
  e4:	ldp	x21, x22, [sp, #32]
  e8:	ldp	x23, x24, [sp, #48]
  ec:	ldr	x25, [sp, #64]
  f0:	ldp	x29, x30, [sp], #192
  f4:	ret

00000000000000f8 <compress>:
  f8:	stp	x29, x30, [sp, #-16]!
  fc:	mov	x29, sp
 100:	mov	w4, #0xffffffff            	// #-1
 104:	bl	0 <compress2>
 108:	ldp	x29, x30, [sp], #16
 10c:	ret

0000000000000110 <compressBound>:
 110:	lsr	x1, x0, #14
 114:	add	x1, x1, x0, lsr #12
 118:	add	x2, x0, #0xd
 11c:	add	x1, x1, x2
 120:	add	x0, x1, x0, lsr #25
 124:	ret

uncompr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <uncompress2>:
   0:	stp	x29, x30, [sp, #-208]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	stp	x23, x24, [sp, #48]
  14:	stp	x25, x26, [sp, #64]
  18:	mov	x25, x1
  1c:	mov	x24, x3
  20:	ldr	x21, [x3]
  24:	ldr	x20, [x1]
  28:	cbz	x20, 74 <uncompress2+0x74>
  2c:	mov	x26, x0
  30:	str	xzr, [x1]
  34:	str	x2, [sp, #96]
  38:	str	wzr, [sp, #104]
  3c:	str	xzr, [sp, #160]
  40:	str	xzr, [sp, #168]
  44:	str	xzr, [sp, #176]
  48:	mov	w2, #0x70                  	// #112
  4c:	adrp	x1, 0 <uncompress2>
  50:	add	x1, x1, #0x0
  54:	add	x0, sp, #0x60
  58:	bl	0 <inflateInit_>
  5c:	mov	w23, w0
  60:	cbnz	w0, 114 <uncompress2+0x114>
  64:	str	x26, [sp, #120]
  68:	str	wzr, [sp, #128]
  6c:	mov	x22, #0xffffffff            	// #4294967295
  70:	b	a4 <uncompress2+0xa4>
  74:	mov	x20, #0x1                   	// #1
  78:	add	x26, sp, #0x58
  7c:	b	34 <uncompress2+0x34>
  80:	cmp	x21, x22
  84:	csel	x0, x21, x22, ls  // ls = plast
  88:	str	w0, [sp, #104]
  8c:	sub	x21, x21, x0
  90:	mov	w1, #0x0                   	// #0
  94:	add	x0, sp, #0x60
  98:	bl	0 <inflate>
  9c:	mov	w19, w0
  a0:	cbnz	w0, c8 <uncompress2+0xc8>
  a4:	ldr	w0, [sp, #128]
  a8:	cbnz	w0, bc <uncompress2+0xbc>
  ac:	cmp	x20, x22
  b0:	csel	x0, x20, x22, ls  // ls = plast
  b4:	str	w0, [sp, #128]
  b8:	sub	x20, x20, x0
  bc:	ldr	w2, [sp, #104]
  c0:	cbnz	w2, 90 <uncompress2+0x90>
  c4:	b	80 <uncompress2+0x80>
  c8:	ldr	w1, [sp, #104]
  cc:	ldr	x0, [x24]
  d0:	sub	x0, x0, x1
  d4:	sub	x21, x0, x21
  d8:	str	x21, [x24]
  dc:	add	x0, sp, #0x58
  e0:	cmp	x26, x0
  e4:	b.eq	130 <uncompress2+0x130>  // b.none
  e8:	ldr	x0, [sp, #136]
  ec:	str	x0, [x25]
  f0:	add	x0, sp, #0x60
  f4:	bl	0 <inflateEnd>
  f8:	cmp	w19, #0x1
  fc:	b.eq	114 <uncompress2+0x114>  // b.none
 100:	cmp	w19, #0x2
 104:	b.eq	164 <uncompress2+0x164>  // b.none
 108:	mov	w23, w19
 10c:	cmn	w19, #0x5
 110:	b.eq	150 <uncompress2+0x150>  // b.none
 114:	mov	w0, w23
 118:	ldp	x19, x20, [sp, #16]
 11c:	ldp	x21, x22, [sp, #32]
 120:	ldp	x23, x24, [sp, #48]
 124:	ldp	x25, x26, [sp, #64]
 128:	ldp	x29, x30, [sp], #208
 12c:	ret
 130:	ldr	x0, [sp, #136]
 134:	cmp	x0, #0x0
 138:	ccmn	w19, #0x5, #0x0, ne  // ne = any
 13c:	b.ne	f0 <uncompress2+0xf0>  // b.any
 140:	add	x0, sp, #0x60
 144:	bl	0 <inflateEnd>
 148:	mov	w23, #0xfffffffd            	// #-3
 14c:	b	114 <uncompress2+0x114>
 150:	ldr	w0, [sp, #128]
 154:	cmn	x0, x20
 158:	mov	w23, #0xfffffffd            	// #-3
 15c:	csel	w23, w19, w23, eq  // eq = none
 160:	b	114 <uncompress2+0x114>
 164:	mov	w23, #0xfffffffd            	// #-3
 168:	b	114 <uncompress2+0x114>

000000000000016c <uncompress>:
 16c:	stp	x29, x30, [sp, #-32]!
 170:	mov	x29, sp
 174:	str	x3, [sp, #24]
 178:	add	x3, sp, #0x18
 17c:	bl	0 <uncompress2>
 180:	ldp	x29, x30, [sp], #32
 184:	ret

gzclose.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzclose>:
   0:	cbz	x0, 30 <gzclose+0x30>
   4:	stp	x29, x30, [sp, #-16]!
   8:	mov	x29, sp
   c:	ldr	w2, [x0, #24]
  10:	mov	w1, #0x1c4f                	// #7247
  14:	cmp	w2, w1
  18:	b.eq	28 <gzclose+0x28>  // b.none
  1c:	bl	0 <gzclose_w>
  20:	ldp	x29, x30, [sp], #16
  24:	ret
  28:	bl	0 <gzclose_r>
  2c:	b	20 <gzclose+0x20>
  30:	mov	w0, #0xfffffffe            	// #-2
  34:	ret

gzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzbuffer>:
   0:	cbz	x0, 44 <gzbuffer+0x44>
   4:	ldr	w2, [x0, #24]
   8:	mov	w3, #0x1c4f                	// #7247
   c:	cmp	w2, w3
  10:	mov	w3, #0x79b1                	// #31153
  14:	ccmp	w2, w3, #0x4, ne  // ne = any
  18:	b.ne	4c <gzbuffer+0x4c>  // b.any
  1c:	ldr	w2, [x0, #40]
  20:	cbnz	w2, 54 <gzbuffer+0x54>
  24:	cmp	w1, w1, lsl #1
  28:	b.hi	5c <gzbuffer+0x5c>  // b.pmore
  2c:	cmp	w1, #0x2
  30:	mov	w2, #0x2                   	// #2
  34:	csel	w1, w1, w2, cs  // cs = hs, nlast
  38:	str	w1, [x0, #44]
  3c:	mov	w0, #0x0                   	// #0
  40:	ret
  44:	mov	w0, #0xffffffff            	// #-1
  48:	b	40 <gzbuffer+0x40>
  4c:	mov	w0, #0xffffffff            	// #-1
  50:	b	40 <gzbuffer+0x40>
  54:	mov	w0, #0xffffffff            	// #-1
  58:	b	40 <gzbuffer+0x40>
  5c:	mov	w0, #0xffffffff            	// #-1
  60:	b	40 <gzbuffer+0x40>

0000000000000064 <gztell64>:
  64:	cbz	x0, 9c <gztell64+0x38>
  68:	ldr	w1, [x0, #24]
  6c:	mov	w2, #0x1c4f                	// #7247
  70:	cmp	w1, w2
  74:	mov	w2, #0x79b1                	// #31153
  78:	ccmp	w1, w2, #0x4, ne  // ne = any
  7c:	b.ne	a4 <gztell64+0x40>  // b.any
  80:	ldr	x1, [x0, #16]
  84:	ldr	w3, [x0, #104]
  88:	mov	x2, #0x0                   	// #0
  8c:	cbz	w3, 94 <gztell64+0x30>
  90:	ldr	x2, [x0, #96]
  94:	add	x0, x1, x2
  98:	ret
  9c:	mov	x0, #0xffffffffffffffff    	// #-1
  a0:	b	98 <gztell64+0x34>
  a4:	mov	x0, #0xffffffffffffffff    	// #-1
  a8:	b	98 <gztell64+0x34>

00000000000000ac <gztell>:
  ac:	stp	x29, x30, [sp, #-16]!
  b0:	mov	x29, sp
  b4:	bl	64 <gztell64>
  b8:	ldp	x29, x30, [sp], #16
  bc:	ret

00000000000000c0 <gzoffset64>:
  c0:	cbz	x0, 12c <gzoffset64+0x6c>
  c4:	stp	x29, x30, [sp, #-32]!
  c8:	mov	x29, sp
  cc:	str	x19, [sp, #16]
  d0:	mov	x19, x0
  d4:	ldr	w0, [x0, #24]
  d8:	mov	w1, #0x1c4f                	// #7247
  dc:	cmp	w0, w1
  e0:	mov	w1, #0x79b1                	// #31153
  e4:	ccmp	w0, w1, #0x4, ne  // ne = any
  e8:	b.ne	134 <gzoffset64+0x74>  // b.any
  ec:	mov	w2, #0x1                   	// #1
  f0:	mov	x1, #0x0                   	// #0
  f4:	ldr	w0, [x19, #28]
  f8:	bl	0 <lseek64>
  fc:	cmn	x0, #0x1
 100:	b.eq	114 <gzoffset64+0x54>  // b.none
 104:	ldr	w2, [x19, #24]
 108:	mov	w1, #0x1c4f                	// #7247
 10c:	cmp	w2, w1
 110:	b.eq	120 <gzoffset64+0x60>  // b.none
 114:	ldr	x19, [sp, #16]
 118:	ldp	x29, x30, [sp], #32
 11c:	ret
 120:	ldr	w1, [x19, #128]
 124:	sub	x0, x0, x1
 128:	b	114 <gzoffset64+0x54>
 12c:	mov	x0, #0xffffffffffffffff    	// #-1
 130:	ret
 134:	mov	x0, #0xffffffffffffffff    	// #-1
 138:	b	114 <gzoffset64+0x54>

000000000000013c <gzoffset>:
 13c:	stp	x29, x30, [sp, #-16]!
 140:	mov	x29, sp
 144:	bl	c0 <gzoffset64>
 148:	ldp	x29, x30, [sp], #16
 14c:	ret

0000000000000150 <gzeof>:
 150:	mov	x1, x0
 154:	cbz	x0, 178 <gzeof+0x28>
 158:	ldr	w3, [x0, #24]
 15c:	mov	w0, #0x0                   	// #0
 160:	mov	w2, #0x1c4f                	// #7247
 164:	cmp	w3, w2
 168:	b.eq	170 <gzeof+0x20>  // b.none
 16c:	ret
 170:	ldr	w0, [x1, #84]
 174:	b	16c <gzeof+0x1c>
 178:	mov	w0, #0x0                   	// #0
 17c:	b	16c <gzeof+0x1c>

0000000000000180 <gzerror>:
 180:	cbz	x0, 1c8 <gzerror+0x48>
 184:	ldr	w2, [x0, #24]
 188:	mov	w3, #0x1c4f                	// #7247
 18c:	cmp	w2, w3
 190:	mov	w3, #0x79b1                	// #31153
 194:	ccmp	w2, w3, #0x4, ne  // ne = any
 198:	b.ne	1cc <gzerror+0x4c>  // b.any
 19c:	cbz	x1, 1a8 <gzerror+0x28>
 1a0:	ldr	w2, [x0, #108]
 1a4:	str	w2, [x1]
 1a8:	ldr	w1, [x0, #108]
 1ac:	cmn	w1, #0x4
 1b0:	b.eq	1d4 <gzerror+0x54>  // b.none
 1b4:	ldr	x0, [x0, #112]
 1b8:	adrp	x1, 0 <gzbuffer>
 1bc:	add	x1, x1, #0x0
 1c0:	cmp	x0, #0x0
 1c4:	csel	x0, x1, x0, eq  // eq = none
 1c8:	ret
 1cc:	mov	x0, #0x0                   	// #0
 1d0:	b	1c8 <gzerror+0x48>
 1d4:	adrp	x0, 0 <gzbuffer>
 1d8:	add	x0, x0, #0x0
 1dc:	b	1c8 <gzerror+0x48>

00000000000001e0 <gz_error>:
 1e0:	stp	x29, x30, [sp, #-48]!
 1e4:	mov	x29, sp
 1e8:	stp	x19, x20, [sp, #16]
 1ec:	stp	x21, x22, [sp, #32]
 1f0:	mov	x19, x0
 1f4:	mov	w20, w1
 1f8:	mov	x21, x2
 1fc:	ldr	x0, [x0, #112]
 200:	cbz	x0, 214 <gz_error+0x34>
 204:	ldr	w1, [x19, #108]
 208:	cmn	w1, #0x4
 20c:	b.ne	2b0 <gz_error+0xd0>  // b.any
 210:	str	xzr, [x19, #112]
 214:	cmp	w20, #0x0
 218:	ccmn	w20, #0x5, #0x4, ne  // ne = any
 21c:	b.eq	224 <gz_error+0x44>  // b.none
 220:	str	wzr, [x19]
 224:	str	w20, [x19, #108]
 228:	cmp	x21, #0x0
 22c:	ccmn	w20, #0x4, #0x4, ne  // ne = any
 230:	b.eq	2a0 <gz_error+0xc0>  // b.none
 234:	ldr	x22, [x19, #32]
 238:	mov	x0, x22
 23c:	bl	0 <strlen>
 240:	mov	x20, x0
 244:	mov	x0, x21
 248:	bl	0 <strlen>
 24c:	add	x0, x20, x0
 250:	add	x0, x0, #0x3
 254:	bl	0 <malloc>
 258:	mov	x20, x0
 25c:	str	x0, [x19, #112]
 260:	cbz	x0, 2b8 <gz_error+0xd8>
 264:	mov	x0, x22
 268:	bl	0 <strlen>
 26c:	mov	x19, x0
 270:	mov	x0, x21
 274:	bl	0 <strlen>
 278:	add	x1, x19, x0
 27c:	mov	x5, x21
 280:	adrp	x4, 0 <gzbuffer>
 284:	add	x4, x4, #0x0
 288:	mov	x3, x22
 28c:	adrp	x2, 0 <gzbuffer>
 290:	add	x2, x2, #0x0
 294:	add	x1, x1, #0x3
 298:	mov	x0, x20
 29c:	bl	0 <snprintf>
 2a0:	ldp	x19, x20, [sp, #16]
 2a4:	ldp	x21, x22, [sp, #32]
 2a8:	ldp	x29, x30, [sp], #48
 2ac:	ret
 2b0:	bl	0 <free>
 2b4:	b	210 <gz_error+0x30>
 2b8:	mov	w0, #0xfffffffc            	// #-4
 2bc:	str	w0, [x19, #108]
 2c0:	b	2a0 <gz_error+0xc0>

00000000000002c4 <gz_open>:
 2c4:	stp	x29, x30, [sp, #-80]!
 2c8:	mov	x29, sp
 2cc:	stp	x19, x20, [sp, #16]
 2d0:	stp	x21, x22, [sp, #32]
 2d4:	mov	x22, x0
 2d8:	cbz	x0, 610 <gz_open+0x34c>
 2dc:	stp	x23, x24, [sp, #48]
 2e0:	mov	w23, w1
 2e4:	mov	x20, x2
 2e8:	mov	x0, #0xe8                  	// #232
 2ec:	bl	0 <malloc>
 2f0:	mov	x19, x0
 2f4:	cbz	x0, 618 <gz_open+0x354>
 2f8:	str	wzr, [x0, #40]
 2fc:	mov	w0, #0x2000                	// #8192
 300:	str	w0, [x19, #44]
 304:	str	xzr, [x19, #112]
 308:	str	wzr, [x19, #24]
 30c:	mov	w0, #0xffffffff            	// #-1
 310:	str	w0, [x19, #88]
 314:	str	wzr, [x19, #92]
 318:	str	wzr, [x19, #64]
 31c:	ldrb	w3, [x20]
 320:	cbz	w3, 458 <gz_open+0x194>
 324:	mov	w21, #0x0                   	// #0
 328:	mov	w24, #0x0                   	// #0
 32c:	mov	w7, #0x1c4f                	// #7247
 330:	mov	w6, #0x79b1                	// #31153
 334:	mov	w0, #0x1                   	// #1
 338:	mov	w5, #0x2                   	// #2
 33c:	mov	w2, #0x3                   	// #3
 340:	mov	w1, #0x4                   	// #4
 344:	b	378 <gz_open+0xb4>
 348:	cmp	w3, #0x65
 34c:	b.eq	424 <gz_open+0x160>  // b.none
 350:	b.ls	394 <gz_open+0xd0>  // b.plast
 354:	cmp	w3, #0x72
 358:	b.eq	3e8 <gz_open+0x124>  // b.none
 35c:	b.ls	3d0 <gz_open+0x10c>  // b.plast
 360:	cmp	w3, #0x77
 364:	b.eq	3f0 <gz_open+0x12c>  // b.none
 368:	cmp	w3, #0x78
 36c:	csel	w21, w21, w0, ne  // ne = any
 370:	ldrb	w3, [x20, #1]!
 374:	cbz	w3, 42c <gz_open+0x168>
 378:	sub	w4, w3, #0x30
 37c:	and	w4, w4, #0xff
 380:	cmp	w4, #0x9
 384:	b.hi	348 <gz_open+0x84>  // b.pmore
 388:	sub	w3, w3, #0x30
 38c:	str	w3, [x19, #88]
 390:	b	370 <gz_open+0xac>
 394:	cmp	w3, #0x52
 398:	b.eq	414 <gz_open+0x150>  // b.none
 39c:	b.ls	3b8 <gz_open+0xf4>  // b.plast
 3a0:	cmp	w3, #0x54
 3a4:	b.eq	41c <gz_open+0x158>  // b.none
 3a8:	cmp	w3, #0x61
 3ac:	b.ne	370 <gz_open+0xac>  // b.any
 3b0:	str	w0, [x19, #24]
 3b4:	b	370 <gz_open+0xac>
 3b8:	cmp	w3, #0x2b
 3bc:	b.eq	3f8 <gz_open+0x134>  // b.none
 3c0:	cmp	w3, #0x46
 3c4:	b.ne	370 <gz_open+0xac>  // b.any
 3c8:	str	w1, [x19, #92]
 3cc:	b	370 <gz_open+0xac>
 3d0:	cmp	w3, #0x66
 3d4:	b.eq	40c <gz_open+0x148>  // b.none
 3d8:	cmp	w3, #0x68
 3dc:	b.ne	370 <gz_open+0xac>  // b.any
 3e0:	str	w5, [x19, #92]
 3e4:	b	370 <gz_open+0xac>
 3e8:	str	w7, [x19, #24]
 3ec:	b	370 <gz_open+0xac>
 3f0:	str	w6, [x19, #24]
 3f4:	b	370 <gz_open+0xac>
 3f8:	mov	x0, x19
 3fc:	bl	0 <free>
 400:	mov	x19, #0x0                   	// #0
 404:	ldp	x23, x24, [sp, #48]
 408:	b	560 <gz_open+0x29c>
 40c:	str	w0, [x19, #92]
 410:	b	370 <gz_open+0xac>
 414:	str	w2, [x19, #92]
 418:	b	370 <gz_open+0xac>
 41c:	str	w0, [x19, #64]
 420:	b	370 <gz_open+0xac>
 424:	mov	w24, #0x1                   	// #1
 428:	b	370 <gz_open+0xac>
 42c:	ldr	w0, [x19, #24]
 430:	cbz	w0, 458 <gz_open+0x194>
 434:	mov	w1, #0x1c4f                	// #7247
 438:	cmp	w0, w1
 43c:	b.ne	480 <gz_open+0x1bc>  // b.any
 440:	ldr	w0, [x19, #64]
 444:	cbnz	w0, 46c <gz_open+0x1a8>
 448:	str	x25, [sp, #64]
 44c:	mov	w0, #0x1                   	// #1
 450:	str	w0, [x19, #64]
 454:	b	484 <gz_open+0x1c0>
 458:	mov	x0, x19
 45c:	bl	0 <free>
 460:	mov	x19, #0x0                   	// #0
 464:	ldp	x23, x24, [sp, #48]
 468:	b	560 <gz_open+0x29c>
 46c:	mov	x0, x19
 470:	bl	0 <free>
 474:	mov	x19, #0x0                   	// #0
 478:	ldp	x23, x24, [sp, #48]
 47c:	b	560 <gz_open+0x29c>
 480:	str	x25, [sp, #64]
 484:	mov	x0, x22
 488:	bl	0 <strlen>
 48c:	add	x25, x0, #0x1
 490:	mov	x0, x25
 494:	bl	0 <malloc>
 498:	mov	x20, x0
 49c:	str	x0, [x19, #32]
 4a0:	cbz	x0, 574 <gz_open+0x2b0>
 4a4:	mov	x3, x22
 4a8:	adrp	x2, 0 <gzbuffer>
 4ac:	add	x2, x2, #0x0
 4b0:	mov	x1, x25
 4b4:	bl	0 <snprintf>
 4b8:	cmp	w24, #0x0
 4bc:	mov	w0, #0x80000               	// #524288
 4c0:	csel	w24, w24, w0, eq  // eq = none
 4c4:	ldr	w0, [x19, #24]
 4c8:	mov	w1, #0x0                   	// #0
 4cc:	mov	w2, #0x1c4f                	// #7247
 4d0:	cmp	w0, w2
 4d4:	b.eq	500 <gz_open+0x23c>  // b.none
 4d8:	cmp	w21, #0x0
 4dc:	mov	w1, #0xc1                  	// #193
 4e0:	mov	w2, #0x41                  	// #65
 4e4:	csel	w1, w1, w2, ne  // ne = any
 4e8:	mov	w2, #0x79b1                	// #31153
 4ec:	cmp	w0, w2
 4f0:	mov	w0, #0x200                 	// #512
 4f4:	mov	w2, #0x400                 	// #1024
 4f8:	csel	w0, w0, w2, eq  // eq = none
 4fc:	orr	w1, w1, w0
 500:	tbnz	w23, #31, 58c <gz_open+0x2c8>
 504:	str	w23, [x19, #28]
 508:	cmn	w23, #0x1
 50c:	b.eq	5a4 <gz_open+0x2e0>  // b.none
 510:	ldr	w0, [x19, #24]
 514:	cmp	w0, #0x1
 518:	b.eq	5c4 <gz_open+0x300>  // b.none
 51c:	mov	w1, #0x1c4f                	// #7247
 520:	cmp	w0, w1
 524:	b.eq	5e0 <gz_open+0x31c>  // b.none
 528:	str	wzr, [x19]
 52c:	ldr	w1, [x19, #24]
 530:	mov	w0, #0x1c4f                	// #7247
 534:	cmp	w1, w0
 538:	b.eq	600 <gz_open+0x33c>  // b.none
 53c:	str	wzr, [x19, #104]
 540:	mov	x2, #0x0                   	// #0
 544:	mov	w1, #0x0                   	// #0
 548:	mov	x0, x19
 54c:	bl	1e0 <gz_error>
 550:	str	xzr, [x19, #16]
 554:	str	wzr, [x19, #128]
 558:	ldp	x23, x24, [sp, #48]
 55c:	ldr	x25, [sp, #64]
 560:	mov	x0, x19
 564:	ldp	x19, x20, [sp, #16]
 568:	ldp	x21, x22, [sp, #32]
 56c:	ldp	x29, x30, [sp], #80
 570:	ret
 574:	mov	x0, x19
 578:	bl	0 <free>
 57c:	mov	x19, x20
 580:	ldp	x23, x24, [sp, #48]
 584:	ldr	x25, [sp, #64]
 588:	b	560 <gz_open+0x29c>
 58c:	mov	w2, #0x1b6                 	// #438
 590:	orr	w1, w24, w1
 594:	mov	x0, x22
 598:	bl	0 <open>
 59c:	mov	w23, w0
 5a0:	b	504 <gz_open+0x240>
 5a4:	ldr	x0, [x19, #32]
 5a8:	bl	0 <free>
 5ac:	mov	x0, x19
 5b0:	bl	0 <free>
 5b4:	mov	x19, #0x0                   	// #0
 5b8:	ldp	x23, x24, [sp, #48]
 5bc:	ldr	x25, [sp, #64]
 5c0:	b	560 <gz_open+0x29c>
 5c4:	mov	w2, #0x2                   	// #2
 5c8:	mov	x1, #0x0                   	// #0
 5cc:	mov	w0, w23
 5d0:	bl	0 <lseek64>
 5d4:	mov	w0, #0x79b1                	// #31153
 5d8:	str	w0, [x19, #24]
 5dc:	b	528 <gz_open+0x264>
 5e0:	mov	w2, #0x1                   	// #1
 5e4:	mov	x1, #0x0                   	// #0
 5e8:	mov	w0, w23
 5ec:	bl	0 <lseek64>
 5f0:	cmn	x0, #0x1
 5f4:	csel	x0, x0, xzr, ne  // ne = any
 5f8:	str	x0, [x19, #72]
 5fc:	b	528 <gz_open+0x264>
 600:	str	wzr, [x19, #80]
 604:	str	wzr, [x19, #84]
 608:	str	wzr, [x19, #68]
 60c:	b	53c <gz_open+0x278>
 610:	mov	x19, x0
 614:	b	560 <gz_open+0x29c>
 618:	ldp	x23, x24, [sp, #48]
 61c:	b	560 <gz_open+0x29c>

0000000000000620 <gzopen>:
 620:	stp	x29, x30, [sp, #-16]!
 624:	mov	x29, sp
 628:	mov	x2, x1
 62c:	mov	w1, #0xffffffff            	// #-1
 630:	bl	2c4 <gz_open>
 634:	ldp	x29, x30, [sp], #16
 638:	ret

000000000000063c <gzopen64>:
 63c:	stp	x29, x30, [sp, #-16]!
 640:	mov	x29, sp
 644:	mov	x2, x1
 648:	mov	w1, #0xffffffff            	// #-1
 64c:	bl	2c4 <gz_open>
 650:	ldp	x29, x30, [sp], #16
 654:	ret

0000000000000658 <gzdopen>:
 658:	stp	x29, x30, [sp, #-48]!
 65c:	mov	x29, sp
 660:	stp	x19, x20, [sp, #16]
 664:	cmn	w0, #0x1
 668:	b.eq	6cc <gzdopen+0x74>  // b.none
 66c:	str	x21, [sp, #32]
 670:	mov	w20, w0
 674:	mov	x21, x1
 678:	mov	x0, #0x13                  	// #19
 67c:	bl	0 <malloc>
 680:	mov	x19, x0
 684:	cbz	x0, 6d4 <gzdopen+0x7c>
 688:	mov	w3, w20
 68c:	adrp	x2, 0 <gzbuffer>
 690:	add	x2, x2, #0x0
 694:	mov	x1, #0x13                  	// #19
 698:	bl	0 <snprintf>
 69c:	mov	x2, x21
 6a0:	mov	w1, w20
 6a4:	mov	x0, x19
 6a8:	bl	2c4 <gz_open>
 6ac:	mov	x20, x0
 6b0:	mov	x0, x19
 6b4:	bl	0 <free>
 6b8:	ldr	x21, [sp, #32]
 6bc:	mov	x0, x20
 6c0:	ldp	x19, x20, [sp, #16]
 6c4:	ldp	x29, x30, [sp], #48
 6c8:	ret
 6cc:	mov	x20, #0x0                   	// #0
 6d0:	b	6bc <gzdopen+0x64>
 6d4:	mov	x20, x0
 6d8:	ldr	x21, [sp, #32]
 6dc:	b	6bc <gzdopen+0x64>

00000000000006e0 <gzclearerr>:
 6e0:	cbz	x0, 730 <gzclearerr+0x50>
 6e4:	ldr	w1, [x0, #24]
 6e8:	mov	w2, #0x1c4f                	// #7247
 6ec:	cmp	w1, w2
 6f0:	mov	w2, #0x79b1                	// #31153
 6f4:	ccmp	w1, w2, #0x4, ne  // ne = any
 6f8:	b.ne	730 <gzclearerr+0x50>  // b.any
 6fc:	stp	x29, x30, [sp, #-16]!
 700:	mov	x29, sp
 704:	mov	w2, #0x1c4f                	// #7247
 708:	cmp	w1, w2
 70c:	b.eq	724 <gzclearerr+0x44>  // b.none
 710:	mov	x2, #0x0                   	// #0
 714:	mov	w1, #0x0                   	// #0
 718:	bl	1e0 <gz_error>
 71c:	ldp	x29, x30, [sp], #16
 720:	ret
 724:	str	wzr, [x0, #80]
 728:	str	wzr, [x0, #84]
 72c:	b	710 <gzclearerr+0x30>
 730:	ret

0000000000000734 <gzrewind>:
 734:	cbz	x0, 7d0 <gzrewind+0x9c>
 738:	stp	x29, x30, [sp, #-32]!
 73c:	mov	x29, sp
 740:	str	x19, [sp, #16]
 744:	mov	x19, x0
 748:	ldr	w1, [x0, #24]
 74c:	mov	w0, #0x1c4f                	// #7247
 750:	cmp	w1, w0
 754:	b.ne	7d8 <gzrewind+0xa4>  // b.any
 758:	ldr	w0, [x19, #108]
 75c:	cmp	w0, #0x0
 760:	ccmn	w0, #0x5, #0x4, ne  // ne = any
 764:	b.ne	7e0 <gzrewind+0xac>  // b.any
 768:	mov	w2, #0x0                   	// #0
 76c:	ldr	x1, [x19, #72]
 770:	ldr	w0, [x19, #28]
 774:	bl	0 <lseek64>
 778:	cmn	x0, #0x1
 77c:	b.eq	7e8 <gzrewind+0xb4>  // b.none
 780:	str	wzr, [x19]
 784:	ldr	w1, [x19, #24]
 788:	mov	w0, #0x1c4f                	// #7247
 78c:	cmp	w1, w0
 790:	b.eq	7c0 <gzrewind+0x8c>  // b.none
 794:	str	wzr, [x19, #104]
 798:	mov	x2, #0x0                   	// #0
 79c:	mov	w1, #0x0                   	// #0
 7a0:	mov	x0, x19
 7a4:	bl	1e0 <gz_error>
 7a8:	str	xzr, [x19, #16]
 7ac:	str	wzr, [x19, #128]
 7b0:	mov	w0, #0x0                   	// #0
 7b4:	ldr	x19, [sp, #16]
 7b8:	ldp	x29, x30, [sp], #32
 7bc:	ret
 7c0:	str	wzr, [x19, #80]
 7c4:	str	wzr, [x19, #84]
 7c8:	str	wzr, [x19, #68]
 7cc:	b	794 <gzrewind+0x60>
 7d0:	mov	w0, #0xffffffff            	// #-1
 7d4:	ret
 7d8:	mov	w0, #0xffffffff            	// #-1
 7dc:	b	7b4 <gzrewind+0x80>
 7e0:	mov	w0, #0xffffffff            	// #-1
 7e4:	b	7b4 <gzrewind+0x80>
 7e8:	mov	w0, #0xffffffff            	// #-1
 7ec:	b	7b4 <gzrewind+0x80>

00000000000007f0 <gzseek64>:
 7f0:	cbz	x0, 96c <gzseek64+0x17c>
 7f4:	stp	x29, x30, [sp, #-32]!
 7f8:	mov	x29, sp
 7fc:	stp	x19, x20, [sp, #16]
 800:	mov	x19, x0
 804:	mov	x20, x1
 808:	ldr	w0, [x0, #24]
 80c:	mov	w1, #0x1c4f                	// #7247
 810:	cmp	w0, w1
 814:	mov	w1, #0x79b1                	// #31153
 818:	ccmp	w0, w1, #0x4, ne  // ne = any
 81c:	b.ne	974 <gzseek64+0x184>  // b.any
 820:	ldr	w1, [x19, #108]
 824:	cmp	w1, #0x0
 828:	ccmn	w1, #0x5, #0x4, ne  // ne = any
 82c:	b.ne	97c <gzseek64+0x18c>  // b.any
 830:	cmp	w2, #0x1
 834:	b.hi	984 <gzseek64+0x194>  // b.pmore
 838:	cbnz	w2, 87c <gzseek64+0x8c>
 83c:	ldr	x1, [x19, #16]
 840:	sub	x20, x20, x1
 844:	str	wzr, [x19, #104]
 848:	mov	w1, #0x1c4f                	// #7247
 84c:	cmp	w0, w1
 850:	b.eq	890 <gzseek64+0xa0>  // b.none
 854:	tbnz	x20, #63, 99c <gzseek64+0x1ac>
 858:	cbz	x20, 868 <gzseek64+0x78>
 85c:	mov	w0, #0x1                   	// #1
 860:	str	w0, [x19, #104]
 864:	str	x20, [x19, #96]
 868:	ldr	x0, [x19, #16]
 86c:	add	x0, x20, x0
 870:	ldp	x19, x20, [sp, #16]
 874:	ldp	x29, x30, [sp], #32
 878:	ret
 87c:	ldr	w1, [x19, #104]
 880:	cbz	w1, 844 <gzseek64+0x54>
 884:	ldr	x1, [x19, #96]
 888:	add	x20, x20, x1
 88c:	b	844 <gzseek64+0x54>
 890:	ldr	w0, [x19, #68]
 894:	cmp	w0, #0x1
 898:	b.eq	904 <gzseek64+0x114>  // b.none
 89c:	tbz	x20, #63, 8cc <gzseek64+0xdc>
 8a0:	ldr	x0, [x19, #16]
 8a4:	adds	x20, x20, x0
 8a8:	b.mi	98c <gzseek64+0x19c>  // b.first
 8ac:	mov	x0, x19
 8b0:	bl	734 <gzrewind>
 8b4:	cmn	w0, #0x1
 8b8:	b.eq	994 <gzseek64+0x1a4>  // b.none
 8bc:	ldr	w1, [x19, #24]
 8c0:	mov	w0, #0x1c4f                	// #7247
 8c4:	cmp	w1, w0
 8c8:	b.ne	858 <gzseek64+0x68>  // b.any
 8cc:	ldr	w1, [x19]
 8d0:	cmp	x20, w1, uxtw
 8d4:	csel	w0, w1, w20, ge  // ge = tcont
 8d8:	sub	w1, w1, w0
 8dc:	str	w1, [x19]
 8e0:	mov	w0, w0
 8e4:	ldr	x1, [x19, #8]
 8e8:	add	x1, x1, x0
 8ec:	str	x1, [x19, #8]
 8f0:	ldr	x1, [x19, #16]
 8f4:	add	x1, x1, x0
 8f8:	str	x1, [x19, #16]
 8fc:	sub	x20, x20, x0
 900:	b	858 <gzseek64+0x68>
 904:	ldr	x0, [x19, #16]
 908:	cmn	x20, x0
 90c:	b.pl	91c <gzseek64+0x12c>  // b.nfrst
 910:	tbz	x20, #63, 8cc <gzseek64+0xdc>
 914:	mov	x0, #0xffffffffffffffff    	// #-1
 918:	b	870 <gzseek64+0x80>
 91c:	ldr	w1, [x19]
 920:	mov	w2, #0x1                   	// #1
 924:	sub	x1, x20, x1
 928:	ldr	w0, [x19, #28]
 92c:	bl	0 <lseek64>
 930:	cmn	x0, #0x1
 934:	b.eq	870 <gzseek64+0x80>  // b.none
 938:	str	wzr, [x19]
 93c:	str	wzr, [x19, #80]
 940:	str	wzr, [x19, #84]
 944:	str	wzr, [x19, #104]
 948:	mov	x2, #0x0                   	// #0
 94c:	mov	w1, #0x0                   	// #0
 950:	mov	x0, x19
 954:	bl	1e0 <gz_error>
 958:	str	wzr, [x19, #128]
 95c:	ldr	x0, [x19, #16]
 960:	add	x0, x20, x0
 964:	str	x0, [x19, #16]
 968:	b	870 <gzseek64+0x80>
 96c:	mov	x0, #0xffffffffffffffff    	// #-1
 970:	ret
 974:	mov	x0, #0xffffffffffffffff    	// #-1
 978:	b	870 <gzseek64+0x80>
 97c:	mov	x0, #0xffffffffffffffff    	// #-1
 980:	b	870 <gzseek64+0x80>
 984:	mov	x0, #0xffffffffffffffff    	// #-1
 988:	b	870 <gzseek64+0x80>
 98c:	mov	x0, #0xffffffffffffffff    	// #-1
 990:	b	870 <gzseek64+0x80>
 994:	mov	x0, #0xffffffffffffffff    	// #-1
 998:	b	870 <gzseek64+0x80>
 99c:	mov	x0, #0xffffffffffffffff    	// #-1
 9a0:	b	870 <gzseek64+0x80>

00000000000009a4 <gzseek>:
 9a4:	stp	x29, x30, [sp, #-16]!
 9a8:	mov	x29, sp
 9ac:	bl	7f0 <gzseek64>
 9b0:	ldp	x29, x30, [sp], #16
 9b4:	ret

gzread.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gz_load>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	stp	x21, x22, [sp, #32]
  10:	str	x23, [sp, #48]
  14:	mov	x22, x0
  18:	mov	x23, x1
  1c:	mov	w20, w2
  20:	mov	x19, x3
  24:	str	wzr, [x3]
  28:	mov	w21, #0x40000000            	// #1073741824
  2c:	ldr	w1, [x19]
  30:	sub	w2, w20, w1
  34:	cmp	w2, w21
  38:	csel	w2, w2, w21, ls  // ls = plast
  3c:	add	x1, x23, w1, uxtw
  40:	ldr	w0, [x22, #28]
  44:	bl	0 <read>
  48:	cmp	w0, #0x0
  4c:	b.le	6c <gz_load+0x6c>
  50:	ldr	w4, [x19]
  54:	add	w0, w4, w0
  58:	str	w0, [x19]
  5c:	cmp	w0, w20
  60:	b.cc	2c <gz_load+0x2c>  // b.lo, b.ul, b.last
  64:	mov	w0, #0x0                   	// #0
  68:	b	7c <gz_load+0x7c>
  6c:	tbnz	w0, #31, 90 <gz_load+0x90>
  70:	mov	w0, #0x1                   	// #1
  74:	str	w0, [x22, #80]
  78:	mov	w0, #0x0                   	// #0
  7c:	ldp	x19, x20, [sp, #16]
  80:	ldp	x21, x22, [sp, #32]
  84:	ldr	x23, [sp, #48]
  88:	ldp	x29, x30, [sp], #64
  8c:	ret
  90:	bl	0 <__errno_location>
  94:	ldr	w0, [x0]
  98:	bl	0 <strerror>
  9c:	mov	x2, x0
  a0:	mov	w1, #0xffffffff            	// #-1
  a4:	mov	x0, x22
  a8:	bl	0 <gz_error>
  ac:	mov	w0, #0xffffffff            	// #-1
  b0:	b	7c <gz_load+0x7c>

00000000000000b4 <gz_avail>:
  b4:	stp	x29, x30, [sp, #-48]!
  b8:	mov	x29, sp
  bc:	stp	x19, x20, [sp, #16]
  c0:	mov	x19, x0
  c4:	ldr	w0, [x0, #108]
  c8:	cmp	w0, #0x0
  cc:	ccmn	w0, #0x5, #0x4, ne  // ne = any
  d0:	b.ne	14c <gz_avail+0x98>  // b.any
  d4:	ldr	w20, [x19, #80]
  d8:	cbnz	w20, 154 <gz_avail+0xa0>
  dc:	ldr	w2, [x19, #128]
  e0:	cbz	w2, 108 <gz_avail+0x54>
  e4:	ldr	x4, [x19, #48]
  e8:	ldr	x3, [x19, #120]
  ec:	sub	w2, w2, #0x1
  f0:	mov	x1, #0x0                   	// #0
  f4:	ldrb	w0, [x3, x1]
  f8:	strb	w0, [x4, x1]
  fc:	cmp	x1, x2
 100:	add	x1, x1, #0x1
 104:	b.ne	f4 <gz_avail+0x40>  // b.any
 108:	ldr	w0, [x19, #128]
 10c:	ldr	w2, [x19, #40]
 110:	ldr	x1, [x19, #48]
 114:	add	x3, sp, #0x2c
 118:	sub	w2, w2, w0
 11c:	add	x1, x1, w0, uxtw
 120:	mov	x0, x19
 124:	bl	0 <gz_load>
 128:	cmn	w0, #0x1
 12c:	b.eq	168 <gz_avail+0xb4>  // b.none
 130:	ldr	w0, [x19, #128]
 134:	ldr	w2, [sp, #44]
 138:	add	w0, w0, w2
 13c:	str	w0, [x19, #128]
 140:	ldr	x0, [x19, #48]
 144:	str	x0, [x19, #120]
 148:	b	158 <gz_avail+0xa4>
 14c:	mov	w20, #0xffffffff            	// #-1
 150:	b	158 <gz_avail+0xa4>
 154:	mov	w20, #0x0                   	// #0
 158:	mov	w0, w20
 15c:	ldp	x19, x20, [sp, #16]
 160:	ldp	x29, x30, [sp], #48
 164:	ret
 168:	mov	w20, w0
 16c:	b	158 <gz_avail+0xa4>

0000000000000170 <gz_look>:
 170:	stp	x29, x30, [sp, #-48]!
 174:	mov	x29, sp
 178:	stp	x19, x20, [sp, #16]
 17c:	stp	x21, x22, [sp, #32]
 180:	mov	x19, x0
 184:	add	x21, x0, #0x78
 188:	ldr	w0, [x0, #40]
 18c:	cbz	w0, 1cc <gz_look+0x5c>
 190:	ldr	w2, [x19, #128]
 194:	cmp	w2, #0x1
 198:	b.ls	284 <gz_look+0x114>  // b.plast
 19c:	ldr	x0, [x19, #120]
 1a0:	ldrb	w1, [x0]
 1a4:	cmp	w1, #0x1f
 1a8:	b.eq	2f0 <gz_look+0x180>  // b.none
 1ac:	ldr	w0, [x19, #64]
 1b0:	cbnz	w0, 318 <gz_look+0x1a8>
 1b4:	str	wzr, [x19, #128]
 1b8:	mov	w0, #0x1                   	// #1
 1bc:	str	w0, [x19, #80]
 1c0:	str	wzr, [x19]
 1c4:	mov	w0, #0x0                   	// #0
 1c8:	b	2e0 <gz_look+0x170>
 1cc:	ldr	w22, [x19, #44]
 1d0:	mov	w0, w22
 1d4:	bl	0 <malloc>
 1d8:	mov	x20, x0
 1dc:	str	x0, [x19, #48]
 1e0:	lsl	w0, w22, #1
 1e4:	bl	0 <malloc>
 1e8:	str	x0, [x19, #56]
 1ec:	cmp	x0, #0x0
 1f0:	ccmp	x20, #0x0, #0x4, ne  // ne = any
 1f4:	b.eq	25c <gz_look+0xec>  // b.none
 1f8:	str	w22, [x19, #40]
 1fc:	str	xzr, [x19, #184]
 200:	str	xzr, [x19, #192]
 204:	str	xzr, [x19, #200]
 208:	str	wzr, [x19, #128]
 20c:	str	xzr, [x19, #120]
 210:	mov	w3, #0x70                  	// #112
 214:	adrp	x2, 0 <gz_load>
 218:	add	x2, x2, #0x0
 21c:	mov	w1, #0x1f                  	// #31
 220:	mov	x0, x21
 224:	bl	0 <inflateInit2_>
 228:	cbz	w0, 190 <gz_look+0x20>
 22c:	ldr	x0, [x19, #56]
 230:	bl	0 <free>
 234:	ldr	x0, [x19, #48]
 238:	bl	0 <free>
 23c:	str	wzr, [x19, #40]
 240:	adrp	x2, 0 <gz_load>
 244:	add	x2, x2, #0x0
 248:	mov	w1, #0xfffffffc            	// #-4
 24c:	mov	x0, x19
 250:	bl	0 <gz_error>
 254:	mov	w0, #0xffffffff            	// #-1
 258:	b	2e0 <gz_look+0x170>
 25c:	bl	0 <free>
 260:	mov	x0, x20
 264:	bl	0 <free>
 268:	adrp	x2, 0 <gz_load>
 26c:	add	x2, x2, #0x0
 270:	mov	w1, #0xfffffffc            	// #-4
 274:	mov	x0, x19
 278:	bl	0 <gz_error>
 27c:	mov	w0, #0xffffffff            	// #-1
 280:	b	2e0 <gz_look+0x170>
 284:	mov	x0, x19
 288:	bl	b4 <gz_avail>
 28c:	cmn	w0, #0x1
 290:	b.eq	2e0 <gz_look+0x170>  // b.none
 294:	ldr	w2, [x19, #128]
 298:	mov	w0, #0x0                   	// #0
 29c:	cbz	w2, 2e0 <gz_look+0x170>
 2a0:	cmp	w2, #0x1
 2a4:	b.hi	19c <gz_look+0x2c>  // b.pmore
 2a8:	ldr	w0, [x19, #64]
 2ac:	cbz	w0, 1b4 <gz_look+0x44>
 2b0:	ldr	x0, [x19, #56]
 2b4:	str	x0, [x19, #8]
 2b8:	mov	w2, w2
 2bc:	ldr	x1, [x19, #120]
 2c0:	bl	0 <memcpy>
 2c4:	ldr	w0, [x19, #128]
 2c8:	str	w0, [x19]
 2cc:	str	wzr, [x19, #128]
 2d0:	mov	w0, #0x1                   	// #1
 2d4:	str	w0, [x19, #68]
 2d8:	str	w0, [x19, #64]
 2dc:	mov	w0, #0x0                   	// #0
 2e0:	ldp	x19, x20, [sp, #16]
 2e4:	ldp	x21, x22, [sp, #32]
 2e8:	ldp	x29, x30, [sp], #48
 2ec:	ret
 2f0:	ldrb	w0, [x0, #1]
 2f4:	cmp	w0, #0x8b
 2f8:	b.ne	1ac <gz_look+0x3c>  // b.any
 2fc:	mov	x0, x21
 300:	bl	0 <inflateReset>
 304:	mov	w0, #0x2                   	// #2
 308:	str	w0, [x19, #68]
 30c:	str	wzr, [x19, #64]
 310:	mov	w0, #0x0                   	// #0
 314:	b	2e0 <gz_look+0x170>
 318:	ldr	x0, [x19, #56]
 31c:	str	x0, [x19, #8]
 320:	b	2b8 <gz_look+0x148>

0000000000000324 <gz_decomp>:
 324:	stp	x29, x30, [sp, #-48]!
 328:	mov	x29, sp
 32c:	stp	x19, x20, [sp, #16]
 330:	stp	x21, x22, [sp, #32]
 334:	mov	x20, x0
 338:	add	x21, x0, #0x78
 33c:	ldr	w22, [x21, #32]
 340:	mov	w19, #0x0                   	// #0
 344:	b	384 <gz_decomp+0x60>
 348:	mov	w1, #0x0                   	// #0
 34c:	mov	x0, x21
 350:	bl	0 <inflate>
 354:	mov	w19, w0
 358:	add	w1, w0, #0x2
 35c:	tst	w1, #0xfffffffb
 360:	b.eq	3ec <gz_decomp+0xc8>  // b.none
 364:	cmn	w0, #0x4
 368:	b.eq	408 <gz_decomp+0xe4>  // b.none
 36c:	cmn	w0, #0x3
 370:	b.eq	424 <gz_decomp+0x100>  // b.none
 374:	ldr	w0, [x20, #152]
 378:	cmp	w0, #0x0
 37c:	ccmp	w19, #0x1, #0x4, ne  // ne = any
 380:	b.eq	3b8 <gz_decomp+0x94>  // b.none
 384:	ldr	w1, [x20, #128]
 388:	cbnz	w1, 348 <gz_decomp+0x24>
 38c:	mov	x0, x20
 390:	bl	b4 <gz_avail>
 394:	cmn	w0, #0x1
 398:	b.eq	3dc <gz_decomp+0xb8>  // b.none
 39c:	ldr	w0, [x20, #128]
 3a0:	cbnz	w0, 348 <gz_decomp+0x24>
 3a4:	adrp	x2, 0 <gz_load>
 3a8:	add	x2, x2, #0x0
 3ac:	mov	w1, #0xfffffffb            	// #-5
 3b0:	mov	x0, x20
 3b4:	bl	0 <gz_error>
 3b8:	ldr	w1, [x20, #152]
 3bc:	sub	w22, w22, w1
 3c0:	str	w22, [x20]
 3c4:	ldr	x0, [x20, #144]
 3c8:	sub	x22, x0, w22, uxtw
 3cc:	str	x22, [x20, #8]
 3d0:	mov	w0, #0x0                   	// #0
 3d4:	cmp	w19, #0x1
 3d8:	b.eq	44c <gz_decomp+0x128>  // b.none
 3dc:	ldp	x19, x20, [sp, #16]
 3e0:	ldp	x21, x22, [sp, #32]
 3e4:	ldp	x29, x30, [sp], #48
 3e8:	ret
 3ec:	adrp	x2, 0 <gz_load>
 3f0:	add	x2, x2, #0x0
 3f4:	mov	w1, #0xfffffffe            	// #-2
 3f8:	mov	x0, x20
 3fc:	bl	0 <gz_error>
 400:	mov	w0, #0xffffffff            	// #-1
 404:	b	3dc <gz_decomp+0xb8>
 408:	adrp	x2, 0 <gz_load>
 40c:	add	x2, x2, #0x0
 410:	mov	w1, #0xfffffffc            	// #-4
 414:	mov	x0, x20
 418:	bl	0 <gz_error>
 41c:	mov	w0, #0xffffffff            	// #-1
 420:	b	3dc <gz_decomp+0xb8>
 424:	ldr	x2, [x20, #168]
 428:	adrp	x0, 0 <gz_load>
 42c:	add	x0, x0, #0x0
 430:	cmp	x2, #0x0
 434:	csel	x2, x0, x2, eq  // eq = none
 438:	mov	w1, #0xfffffffd            	// #-3
 43c:	mov	x0, x20
 440:	bl	0 <gz_error>
 444:	mov	w0, #0xffffffff            	// #-1
 448:	b	3dc <gz_decomp+0xb8>
 44c:	str	wzr, [x20, #68]
 450:	b	3dc <gz_decomp+0xb8>

0000000000000454 <gz_fetch>:
 454:	stp	x29, x30, [sp, #-32]!
 458:	mov	x29, sp
 45c:	str	x19, [sp, #16]
 460:	mov	x19, x0
 464:	ldr	w0, [x19, #68]
 468:	cmp	w0, #0x1
 46c:	b.eq	4b4 <gz_fetch+0x60>  // b.none
 470:	cmp	w0, #0x2
 474:	b.eq	4ec <gz_fetch+0x98>  // b.none
 478:	cbz	w0, 498 <gz_fetch+0x44>
 47c:	ldr	w0, [x19]
 480:	cbnz	w0, 514 <gz_fetch+0xc0>
 484:	ldr	w0, [x19, #80]
 488:	cbz	w0, 464 <gz_fetch+0x10>
 48c:	ldr	w0, [x19, #128]
 490:	cbnz	w0, 464 <gz_fetch+0x10>
 494:	b	4e0 <gz_fetch+0x8c>
 498:	mov	x0, x19
 49c:	bl	170 <gz_look>
 4a0:	cmn	w0, #0x1
 4a4:	b.eq	4e0 <gz_fetch+0x8c>  // b.none
 4a8:	ldr	w0, [x19, #68]
 4ac:	cbnz	w0, 47c <gz_fetch+0x28>
 4b0:	b	4e0 <gz_fetch+0x8c>
 4b4:	ldr	w2, [x19, #40]
 4b8:	mov	x3, x19
 4bc:	lsl	w2, w2, #1
 4c0:	ldr	x1, [x19, #56]
 4c4:	mov	x0, x19
 4c8:	bl	0 <gz_load>
 4cc:	cmn	w0, #0x1
 4d0:	b.eq	4e0 <gz_fetch+0x8c>  // b.none
 4d4:	ldr	x0, [x19, #56]
 4d8:	str	x0, [x19, #8]
 4dc:	mov	w0, #0x0                   	// #0
 4e0:	ldr	x19, [sp, #16]
 4e4:	ldp	x29, x30, [sp], #32
 4e8:	ret
 4ec:	ldr	w0, [x19, #40]
 4f0:	lsl	w0, w0, #1
 4f4:	str	w0, [x19, #152]
 4f8:	ldr	x0, [x19, #56]
 4fc:	str	x0, [x19, #144]
 500:	mov	x0, x19
 504:	bl	324 <gz_decomp>
 508:	cmn	w0, #0x1
 50c:	b.ne	47c <gz_fetch+0x28>  // b.any
 510:	b	4e0 <gz_fetch+0x8c>
 514:	mov	w0, #0x0                   	// #0
 518:	b	4e0 <gz_fetch+0x8c>

000000000000051c <gz_skip>:
 51c:	stp	x29, x30, [sp, #-32]!
 520:	mov	x29, sp
 524:	stp	x19, x20, [sp, #16]
 528:	mov	x19, x0
 52c:	mov	x20, x1
 530:	cbnz	x1, 560 <gz_skip+0x44>
 534:	mov	w0, #0x0                   	// #0
 538:	b	5a0 <gz_skip+0x84>
 53c:	ldr	w0, [x19, #80]
 540:	cbz	w0, 54c <gz_skip+0x30>
 544:	ldr	w0, [x19, #128]
 548:	cbz	w0, 5ac <gz_skip+0x90>
 54c:	mov	x0, x19
 550:	bl	454 <gz_fetch>
 554:	cmn	w0, #0x1
 558:	b.eq	5a0 <gz_skip+0x84>  // b.none
 55c:	cbz	x20, 59c <gz_skip+0x80>
 560:	ldr	w0, [x19]
 564:	cbz	w0, 53c <gz_skip+0x20>
 568:	cmp	x20, w0, uxtw
 56c:	csel	w2, w0, w20, ge  // ge = tcont
 570:	sub	w0, w0, w2
 574:	str	w0, [x19]
 578:	mov	w0, w2
 57c:	ldr	x1, [x19, #8]
 580:	add	x1, x1, x0
 584:	str	x1, [x19, #8]
 588:	ldr	x1, [x19, #16]
 58c:	add	x1, x1, x0
 590:	str	x1, [x19, #16]
 594:	sub	x20, x20, x0
 598:	b	55c <gz_skip+0x40>
 59c:	mov	w0, #0x0                   	// #0
 5a0:	ldp	x19, x20, [sp, #16]
 5a4:	ldp	x29, x30, [sp], #32
 5a8:	ret
 5ac:	mov	w0, #0x0                   	// #0
 5b0:	b	5a0 <gz_skip+0x84>

00000000000005b4 <gz_read>:
 5b4:	stp	x29, x30, [sp, #-96]!
 5b8:	mov	x29, sp
 5bc:	stp	x19, x20, [sp, #16]
 5c0:	stp	x21, x22, [sp, #32]
 5c4:	mov	x20, x2
 5c8:	mov	x22, x2
 5cc:	cbz	x2, 6d4 <gz_read+0x120>
 5d0:	mov	x19, x0
 5d4:	mov	x21, x1
 5d8:	ldr	w0, [x0, #104]
 5dc:	cbnz	w0, 5f8 <gz_read+0x44>
 5e0:	stp	x23, x24, [sp, #48]
 5e4:	stp	x25, x26, [sp, #64]
 5e8:	mov	x22, #0x0                   	// #0
 5ec:	mov	x24, #0xfffffffe            	// #4294967294
 5f0:	mov	w23, #0xffffffff            	// #-1
 5f4:	b	668 <gz_read+0xb4>
 5f8:	str	wzr, [x19, #104]
 5fc:	ldr	x1, [x19, #96]
 600:	mov	x0, x19
 604:	bl	51c <gz_skip>
 608:	mov	x22, #0x0                   	// #0
 60c:	cmn	w0, #0x1
 610:	b.ne	5e0 <gz_read+0x2c>  // b.any
 614:	b	6d4 <gz_read+0x120>
 618:	ldr	w25, [sp, #92]
 61c:	mov	w26, w25
 620:	mov	x2, x26
 624:	ldr	x1, [x19, #8]
 628:	mov	x0, x21
 62c:	bl	0 <memcpy>
 630:	ldr	x2, [x19, #8]
 634:	add	x2, x2, x26
 638:	str	x2, [x19, #8]
 63c:	ldr	w0, [x19]
 640:	sub	w0, w0, w25
 644:	str	w0, [x19]
 648:	ldr	w0, [sp, #92]
 64c:	sub	x20, x20, x0
 650:	add	x21, x21, x0
 654:	add	x22, x22, x0
 658:	ldr	x1, [x19, #16]
 65c:	add	x0, x1, x0
 660:	str	x0, [x19, #16]
 664:	cbz	x20, 754 <gz_read+0x1a0>
 668:	cmp	x20, x24
 66c:	csel	w0, w20, w23, ls  // ls = plast
 670:	str	w0, [sp, #92]
 674:	ldr	w0, [x19]
 678:	cbz	w0, 690 <gz_read+0xdc>
 67c:	ldr	w1, [sp, #92]
 680:	cmp	w0, w1
 684:	b.cs	618 <gz_read+0x64>  // b.hs, b.nlast
 688:	str	w0, [sp, #92]
 68c:	b	618 <gz_read+0x64>
 690:	ldr	w0, [x19, #80]
 694:	cbz	w0, 6a0 <gz_read+0xec>
 698:	ldr	w0, [x19, #128]
 69c:	cbz	w0, 6e8 <gz_read+0x134>
 6a0:	ldr	w0, [x19, #68]
 6a4:	cbz	w0, 6b8 <gz_read+0x104>
 6a8:	ldr	w2, [sp, #92]
 6ac:	ldr	w1, [x19, #40]
 6b0:	cmp	w2, w1, lsl #1
 6b4:	b.cs	6fc <gz_read+0x148>  // b.hs, b.nlast
 6b8:	mov	x0, x19
 6bc:	bl	454 <gz_fetch>
 6c0:	cmn	w0, #0x1
 6c4:	b.ne	664 <gz_read+0xb0>  // b.any
 6c8:	mov	x22, #0x0                   	// #0
 6cc:	ldp	x23, x24, [sp, #48]
 6d0:	ldp	x25, x26, [sp, #64]
 6d4:	mov	x0, x22
 6d8:	ldp	x19, x20, [sp, #16]
 6dc:	ldp	x21, x22, [sp, #32]
 6e0:	ldp	x29, x30, [sp], #96
 6e4:	ret
 6e8:	mov	w0, #0x1                   	// #1
 6ec:	str	w0, [x19, #84]
 6f0:	ldp	x23, x24, [sp, #48]
 6f4:	ldp	x25, x26, [sp, #64]
 6f8:	b	6d4 <gz_read+0x120>
 6fc:	cmp	w0, #0x1
 700:	b.eq	72c <gz_read+0x178>  // b.none
 704:	str	w2, [x19, #152]
 708:	str	x21, [x19, #144]
 70c:	mov	x0, x19
 710:	bl	324 <gz_decomp>
 714:	cmn	w0, #0x1
 718:	b.eq	760 <gz_read+0x1ac>  // b.none
 71c:	ldr	w0, [x19]
 720:	str	w0, [sp, #92]
 724:	str	wzr, [x19]
 728:	b	648 <gz_read+0x94>
 72c:	add	x3, sp, #0x5c
 730:	mov	x1, x21
 734:	mov	x0, x19
 738:	bl	0 <gz_load>
 73c:	cmn	w0, #0x1
 740:	b.ne	648 <gz_read+0x94>  // b.any
 744:	mov	x22, #0x0                   	// #0
 748:	ldp	x23, x24, [sp, #48]
 74c:	ldp	x25, x26, [sp, #64]
 750:	b	6d4 <gz_read+0x120>
 754:	ldp	x23, x24, [sp, #48]
 758:	ldp	x25, x26, [sp, #64]
 75c:	b	6d4 <gz_read+0x120>
 760:	mov	x22, #0x0                   	// #0
 764:	ldp	x23, x24, [sp, #48]
 768:	ldp	x25, x26, [sp, #64]
 76c:	b	6d4 <gz_read+0x120>

0000000000000770 <gzread>:
 770:	cbz	x0, 7f0 <gzread+0x80>
 774:	stp	x29, x30, [sp, #-32]!
 778:	mov	x29, sp
 77c:	str	x19, [sp, #16]
 780:	mov	x19, x0
 784:	ldr	w3, [x0, #24]
 788:	mov	w0, #0x1c4f                	// #7247
 78c:	cmp	w3, w0
 790:	b.ne	7f8 <gzread+0x88>  // b.any
 794:	ldr	w0, [x19, #108]
 798:	cmp	w0, #0x0
 79c:	ccmn	w0, #0x5, #0x4, ne  // ne = any
 7a0:	b.ne	800 <gzread+0x90>  // b.any
 7a4:	tbnz	w2, #31, 7d4 <gzread+0x64>
 7a8:	mov	w2, w2
 7ac:	mov	x0, x19
 7b0:	bl	5b4 <gz_read>
 7b4:	cbnz	w0, 7c8 <gzread+0x58>
 7b8:	ldr	w1, [x19, #108]
 7bc:	cmp	w1, #0x0
 7c0:	ccmn	w1, #0x5, #0x4, ne  // ne = any
 7c4:	b.ne	808 <gzread+0x98>  // b.any
 7c8:	ldr	x19, [sp, #16]
 7cc:	ldp	x29, x30, [sp], #32
 7d0:	ret
 7d4:	adrp	x2, 0 <gz_load>
 7d8:	add	x2, x2, #0x0
 7dc:	mov	w1, #0xfffffffe            	// #-2
 7e0:	mov	x0, x19
 7e4:	bl	0 <gz_error>
 7e8:	mov	w0, #0xffffffff            	// #-1
 7ec:	b	7c8 <gzread+0x58>
 7f0:	mov	w0, #0xffffffff            	// #-1
 7f4:	ret
 7f8:	mov	w0, #0xffffffff            	// #-1
 7fc:	b	7c8 <gzread+0x58>
 800:	mov	w0, #0xffffffff            	// #-1
 804:	b	7c8 <gzread+0x58>
 808:	mov	w0, #0xffffffff            	// #-1
 80c:	b	7c8 <gzread+0x58>

0000000000000810 <gzfread>:
 810:	cbz	x3, 8a4 <gzfread+0x94>
 814:	stp	x29, x30, [sp, #-32]!
 818:	mov	x29, sp
 81c:	str	x19, [sp, #16]
 820:	mov	x4, x0
 824:	mov	x19, x1
 828:	ldr	w5, [x3, #24]
 82c:	mov	x0, #0x0                   	// #0
 830:	mov	w1, #0x1c4f                	// #7247
 834:	cmp	w5, w1
 838:	b.ne	87c <gzfread+0x6c>  // b.any
 83c:	ldr	w1, [x3, #108]
 840:	cmp	w1, #0x0
 844:	ccmn	w1, #0x5, #0x4, ne  // ne = any
 848:	b.ne	87c <gzfread+0x6c>  // b.any
 84c:	mov	x0, x19
 850:	cbz	x19, 87c <gzfread+0x6c>
 854:	mul	x0, x2, x19
 858:	udiv	x1, x0, x19
 85c:	cmp	x1, x2
 860:	b.ne	888 <gzfread+0x78>  // b.any
 864:	cbz	x0, 87c <gzfread+0x6c>
 868:	mov	x2, x0
 86c:	mov	x1, x4
 870:	mov	x0, x3
 874:	bl	5b4 <gz_read>
 878:	udiv	x0, x0, x19
 87c:	ldr	x19, [sp, #16]
 880:	ldp	x29, x30, [sp], #32
 884:	ret
 888:	adrp	x2, 0 <gz_load>
 88c:	add	x2, x2, #0x0
 890:	mov	w1, #0xfffffffe            	// #-2
 894:	mov	x0, x3
 898:	bl	0 <gz_error>
 89c:	mov	x0, #0x0                   	// #0
 8a0:	b	87c <gzfread+0x6c>
 8a4:	mov	x0, #0x0                   	// #0
 8a8:	ret

00000000000008ac <gzgetc>:
 8ac:	cbz	x0, 928 <gzgetc+0x7c>
 8b0:	ldr	w2, [x0, #24]
 8b4:	mov	w1, #0x1c4f                	// #7247
 8b8:	cmp	w2, w1
 8bc:	b.ne	930 <gzgetc+0x84>  // b.any
 8c0:	ldr	w1, [x0, #108]
 8c4:	cmp	w1, #0x0
 8c8:	ccmn	w1, #0x5, #0x4, ne  // ne = any
 8cc:	b.ne	938 <gzgetc+0x8c>  // b.any
 8d0:	ldr	w1, [x0]
 8d4:	cbz	w1, 900 <gzgetc+0x54>
 8d8:	sub	w1, w1, #0x1
 8dc:	str	w1, [x0]
 8e0:	ldr	x1, [x0, #16]
 8e4:	add	x1, x1, #0x1
 8e8:	str	x1, [x0, #16]
 8ec:	ldr	x1, [x0, #8]
 8f0:	add	x2, x1, #0x1
 8f4:	str	x2, [x0, #8]
 8f8:	ldrb	w0, [x1]
 8fc:	ret
 900:	stp	x29, x30, [sp, #-32]!
 904:	mov	x29, sp
 908:	mov	x2, #0x1                   	// #1
 90c:	add	x1, sp, #0x18
 910:	bl	5b4 <gz_read>
 914:	cmp	w0, #0x0
 918:	b.le	940 <gzgetc+0x94>
 91c:	ldrb	w0, [sp, #24]
 920:	ldp	x29, x30, [sp], #32
 924:	ret
 928:	mov	w0, #0xffffffff            	// #-1
 92c:	ret
 930:	mov	w0, #0xffffffff            	// #-1
 934:	ret
 938:	mov	w0, #0xffffffff            	// #-1
 93c:	ret
 940:	mov	w0, #0xffffffff            	// #-1
 944:	b	920 <gzgetc+0x74>

0000000000000948 <gzgetc_>:
 948:	stp	x29, x30, [sp, #-16]!
 94c:	mov	x29, sp
 950:	bl	8ac <gzgetc>
 954:	ldp	x29, x30, [sp], #16
 958:	ret

000000000000095c <gzungetc>:
 95c:	cbz	x1, aa4 <gzungetc+0x148>
 960:	stp	x29, x30, [sp, #-32]!
 964:	mov	x29, sp
 968:	stp	x19, x20, [sp, #16]
 96c:	mov	w20, w0
 970:	mov	x19, x1
 974:	ldr	w1, [x1, #24]
 978:	mov	w0, #0x1c4f                	// #7247
 97c:	cmp	w1, w0
 980:	b.ne	aac <gzungetc+0x150>  // b.any
 984:	ldr	w0, [x19, #108]
 988:	cmp	w0, #0x0
 98c:	ccmn	w0, #0x5, #0x4, ne  // ne = any
 990:	b.ne	ab4 <gzungetc+0x158>  // b.any
 994:	ldr	w0, [x19, #104]
 998:	cbnz	w0, a04 <gzungetc+0xa8>
 99c:	tbnz	w20, #31, abc <gzungetc+0x160>
 9a0:	ldr	w1, [x19]
 9a4:	cbz	w1, a20 <gzungetc+0xc4>
 9a8:	ldr	w2, [x19, #40]
 9ac:	lsl	w0, w2, #1
 9b0:	cmp	w1, w2, lsl #1
 9b4:	b.eq	a5c <gzungetc+0x100>  // b.none
 9b8:	ldr	x2, [x19, #56]
 9bc:	ldr	x3, [x19, #8]
 9c0:	cmp	x3, x2
 9c4:	b.eq	a78 <gzungetc+0x11c>  // b.none
 9c8:	ldr	w0, [x19]
 9cc:	add	w0, w0, #0x1
 9d0:	str	w0, [x19]
 9d4:	ldr	x0, [x19, #8]
 9d8:	sub	x1, x0, #0x1
 9dc:	str	x1, [x19, #8]
 9e0:	sturb	w20, [x0, #-1]
 9e4:	ldr	x0, [x19, #16]
 9e8:	sub	x0, x0, #0x1
 9ec:	str	x0, [x19, #16]
 9f0:	str	wzr, [x19, #84]
 9f4:	mov	w0, w20
 9f8:	ldp	x19, x20, [sp, #16]
 9fc:	ldp	x29, x30, [sp], #32
 a00:	ret
 a04:	str	wzr, [x19, #104]
 a08:	ldr	x1, [x19, #96]
 a0c:	mov	x0, x19
 a10:	bl	51c <gz_skip>
 a14:	cmn	w0, #0x1
 a18:	b.ne	99c <gzungetc+0x40>  // b.any
 a1c:	b	9f8 <gzungetc+0x9c>
 a20:	mov	w0, #0x1                   	// #1
 a24:	str	w0, [x19]
 a28:	ldr	w0, [x19, #40]
 a2c:	lsl	w0, w0, #1
 a30:	sub	x0, x0, #0x1
 a34:	ldr	x1, [x19, #56]
 a38:	add	x2, x1, x0
 a3c:	str	x2, [x19, #8]
 a40:	strb	w20, [x1, x0]
 a44:	ldr	x0, [x19, #16]
 a48:	sub	x0, x0, #0x1
 a4c:	str	x0, [x19, #16]
 a50:	str	wzr, [x19, #84]
 a54:	mov	w0, w20
 a58:	b	9f8 <gzungetc+0x9c>
 a5c:	adrp	x2, 0 <gz_load>
 a60:	add	x2, x2, #0x0
 a64:	mov	w1, #0xfffffffd            	// #-3
 a68:	mov	x0, x19
 a6c:	bl	0 <gz_error>
 a70:	mov	w0, #0xffffffff            	// #-1
 a74:	b	9f8 <gzungetc+0x9c>
 a78:	add	x1, x2, w1, uxtw
 a7c:	add	x0, x2, w0, uxtw
 a80:	cmp	x2, x1
 a84:	b.cs	a9c <gzungetc+0x140>  // b.hs, b.nlast
 a88:	ldrb	w2, [x1, #-1]!
 a8c:	strb	w2, [x0, #-1]!
 a90:	ldr	x2, [x19, #56]
 a94:	cmp	x2, x1
 a98:	b.cc	a88 <gzungetc+0x12c>  // b.lo, b.ul, b.last
 a9c:	str	x0, [x19, #8]
 aa0:	b	9c8 <gzungetc+0x6c>
 aa4:	mov	w0, #0xffffffff            	// #-1
 aa8:	ret
 aac:	mov	w0, #0xffffffff            	// #-1
 ab0:	b	9f8 <gzungetc+0x9c>
 ab4:	mov	w0, #0xffffffff            	// #-1
 ab8:	b	9f8 <gzungetc+0x9c>
 abc:	mov	w0, #0xffffffff            	// #-1
 ac0:	b	9f8 <gzungetc+0x9c>

0000000000000ac4 <gzgets>:
 ac4:	cmp	x1, #0x0
 ac8:	ccmp	w2, #0x0, #0x4, ne  // ne = any
 acc:	ccmp	x0, #0x0, #0x4, gt
 ad0:	b.eq	c58 <gzgets+0x194>  // b.none
 ad4:	stp	x29, x30, [sp, #-80]!
 ad8:	mov	x29, sp
 adc:	stp	x19, x20, [sp, #16]
 ae0:	stp	x23, x24, [sp, #48]
 ae4:	mov	x19, x0
 ae8:	mov	x23, x1
 aec:	mov	w20, w2
 af0:	ldr	w2, [x0, #24]
 af4:	mov	x0, #0x0                   	// #0
 af8:	mov	w1, #0x1c4f                	// #7247
 afc:	cmp	w2, w1
 b00:	b.ne	c48 <gzgets+0x184>  // b.any
 b04:	ldr	w0, [x19, #108]
 b08:	cmp	w0, #0x0
 b0c:	ccmn	w0, #0x5, #0x4, ne  // ne = any
 b10:	b.ne	c60 <gzgets+0x19c>  // b.any
 b14:	ldr	w0, [x19, #104]
 b18:	cbnz	w0, b3c <gzgets+0x78>
 b1c:	mov	x0, #0x0                   	// #0
 b20:	subs	w20, w20, #0x1
 b24:	b.eq	c48 <gzgets+0x184>  // b.none
 b28:	stp	x21, x22, [sp, #32]
 b2c:	stp	x25, x26, [sp, #64]
 b30:	mov	x21, x23
 b34:	mov	w25, #0xa                   	// #10
 b38:	b	bc0 <gzgets+0xfc>
 b3c:	str	wzr, [x19, #104]
 b40:	ldr	x1, [x19, #96]
 b44:	mov	x0, x19
 b48:	bl	51c <gz_skip>
 b4c:	cmn	w0, #0x1
 b50:	b.ne	b1c <gzgets+0x58>  // b.any
 b54:	mov	x0, #0x0                   	// #0
 b58:	b	c48 <gzgets+0x184>
 b5c:	mov	x0, x19
 b60:	bl	454 <gz_fetch>
 b64:	cmn	w0, #0x1
 b68:	b.eq	c68 <gzgets+0x1a4>  // b.none
 b6c:	ldr	w2, [x19]
 b70:	cbnz	w2, bc8 <gzgets+0x104>
 b74:	mov	w0, #0x1                   	// #1
 b78:	str	w0, [x19, #84]
 b7c:	b	c30 <gzgets+0x16c>
 b80:	mov	x2, x26
 b84:	mov	x1, x22
 b88:	mov	x0, x21
 b8c:	bl	0 <memcpy>
 b90:	ldr	w0, [x19]
 b94:	sub	w0, w0, w24
 b98:	str	w0, [x19]
 b9c:	ldr	x0, [x19, #8]
 ba0:	add	x0, x0, x26
 ba4:	str	x0, [x19, #8]
 ba8:	ldr	x0, [x19, #16]
 bac:	add	x0, x0, w24, uxtw
 bb0:	str	x0, [x19, #16]
 bb4:	add	x21, x21, x26
 bb8:	subs	w20, w20, w24
 bbc:	b.eq	c30 <gzgets+0x16c>  // b.none
 bc0:	ldr	w2, [x19]
 bc4:	cbz	w2, b5c <gzgets+0x98>
 bc8:	cmp	w20, w2
 bcc:	csel	w24, w20, w2, ls  // ls = plast
 bd0:	ldr	x22, [x19, #8]
 bd4:	csel	w26, w20, w2, ls  // ls = plast
 bd8:	mov	x2, x26
 bdc:	mov	w1, w25
 be0:	mov	x0, x22
 be4:	bl	0 <memchr>
 be8:	cbz	x0, b80 <gzgets+0xbc>
 bec:	sub	x0, x0, x22
 bf0:	add	w24, w0, #0x1
 bf4:	add	w20, w0, #0x1
 bf8:	mov	x2, x20
 bfc:	mov	x1, x22
 c00:	mov	x0, x21
 c04:	bl	0 <memcpy>
 c08:	ldr	w0, [x19]
 c0c:	sub	w0, w0, w24
 c10:	str	w0, [x19]
 c14:	ldr	x0, [x19, #8]
 c18:	add	x0, x0, x20
 c1c:	str	x0, [x19, #8]
 c20:	ldr	x0, [x19, #16]
 c24:	add	x0, x0, x20
 c28:	str	x0, [x19, #16]
 c2c:	add	x21, x21, x20
 c30:	cmp	x21, x23
 c34:	b.eq	c78 <gzgets+0x1b4>  // b.none
 c38:	strb	wzr, [x21]
 c3c:	mov	x0, x23
 c40:	ldp	x21, x22, [sp, #32]
 c44:	ldp	x25, x26, [sp, #64]
 c48:	ldp	x19, x20, [sp, #16]
 c4c:	ldp	x23, x24, [sp, #48]
 c50:	ldp	x29, x30, [sp], #80
 c54:	ret
 c58:	mov	x0, #0x0                   	// #0
 c5c:	ret
 c60:	mov	x0, #0x0                   	// #0
 c64:	b	c48 <gzgets+0x184>
 c68:	mov	x0, #0x0                   	// #0
 c6c:	ldp	x21, x22, [sp, #32]
 c70:	ldp	x25, x26, [sp, #64]
 c74:	b	c48 <gzgets+0x184>
 c78:	mov	x0, #0x0                   	// #0
 c7c:	ldp	x21, x22, [sp, #32]
 c80:	ldp	x25, x26, [sp, #64]
 c84:	b	c48 <gzgets+0x184>

0000000000000c88 <gzdirect>:
 c88:	cbz	x0, cd8 <gzdirect+0x50>
 c8c:	stp	x29, x30, [sp, #-32]!
 c90:	mov	x29, sp
 c94:	str	x19, [sp, #16]
 c98:	mov	x19, x0
 c9c:	ldr	w1, [x0, #24]
 ca0:	mov	w0, #0x1c4f                	// #7247
 ca4:	cmp	w1, w0
 ca8:	b.eq	cbc <gzdirect+0x34>  // b.none
 cac:	ldr	w0, [x19, #64]
 cb0:	ldr	x19, [sp, #16]
 cb4:	ldp	x29, x30, [sp], #32
 cb8:	ret
 cbc:	ldr	w0, [x19, #68]
 cc0:	cbnz	w0, cac <gzdirect+0x24>
 cc4:	ldr	w0, [x19]
 cc8:	cbnz	w0, cac <gzdirect+0x24>
 ccc:	mov	x0, x19
 cd0:	bl	170 <gz_look>
 cd4:	b	cac <gzdirect+0x24>
 cd8:	mov	w0, #0x0                   	// #0
 cdc:	ret

0000000000000ce0 <gzclose_r>:
 ce0:	stp	x29, x30, [sp, #-48]!
 ce4:	mov	x29, sp
 ce8:	stp	x19, x20, [sp, #16]
 cec:	cbz	x0, d80 <gzclose_r+0xa0>
 cf0:	mov	x19, x0
 cf4:	ldr	w1, [x0, #24]
 cf8:	mov	w0, #0x1c4f                	// #7247
 cfc:	cmp	w1, w0
 d00:	b.ne	d88 <gzclose_r+0xa8>  // b.any
 d04:	str	x21, [sp, #32]
 d08:	ldr	w0, [x19, #40]
 d0c:	cbnz	w0, d64 <gzclose_r+0x84>
 d10:	ldr	w20, [x19, #108]
 d14:	cmn	w20, #0x5
 d18:	csel	w20, w20, wzr, eq  // eq = none
 d1c:	mov	x2, #0x0                   	// #0
 d20:	mov	w1, #0x0                   	// #0
 d24:	mov	x0, x19
 d28:	bl	0 <gz_error>
 d2c:	ldr	x0, [x19, #32]
 d30:	bl	0 <free>
 d34:	ldr	w0, [x19, #28]
 d38:	bl	0 <close>
 d3c:	mov	w21, w0
 d40:	mov	x0, x19
 d44:	bl	0 <free>
 d48:	cmp	w21, #0x0
 d4c:	csinv	w20, w20, wzr, eq  // eq = none
 d50:	ldr	x21, [sp, #32]
 d54:	mov	w0, w20
 d58:	ldp	x19, x20, [sp, #16]
 d5c:	ldp	x29, x30, [sp], #48
 d60:	ret
 d64:	add	x0, x19, #0x78
 d68:	bl	0 <inflateEnd>
 d6c:	ldr	x0, [x19, #56]
 d70:	bl	0 <free>
 d74:	ldr	x0, [x19, #48]
 d78:	bl	0 <free>
 d7c:	b	d10 <gzclose_r+0x30>
 d80:	mov	w20, #0xfffffffe            	// #-2
 d84:	b	d54 <gzclose_r+0x74>
 d88:	mov	w20, #0xfffffffe            	// #-2
 d8c:	b	d54 <gzclose_r+0x74>

gzwrite.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gz_init>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	str	x21, [sp, #32]
  10:	mov	x19, x0
  14:	ldr	w21, [x0, #44]
  18:	lsl	w0, w21, #1
  1c:	bl	0 <malloc>
  20:	str	x0, [x19, #48]
  24:	cbz	x0, 64 <gz_init+0x64>
  28:	mov	x20, x0
  2c:	ldr	w0, [x19, #64]
  30:	cbz	w0, 80 <gz_init+0x80>
  34:	ldr	w1, [x19, #44]
  38:	str	w1, [x19, #40]
  3c:	ldr	w0, [x19, #64]
  40:	cbnz	w0, 120 <gz_init+0x120>
  44:	str	w1, [x19, #152]
  48:	ldr	x1, [x19, #56]
  4c:	str	x1, [x19, #144]
  50:	str	x1, [x19, #8]
  54:	ldp	x19, x20, [sp, #16]
  58:	ldr	x21, [sp, #32]
  5c:	ldp	x29, x30, [sp], #48
  60:	ret
  64:	adrp	x2, 0 <gz_init>
  68:	add	x2, x2, #0x0
  6c:	mov	w1, #0xfffffffc            	// #-4
  70:	mov	x0, x19
  74:	bl	0 <gz_error>
  78:	mov	w0, #0xffffffff            	// #-1
  7c:	b	54 <gz_init+0x54>
  80:	mov	w0, w21
  84:	bl	0 <malloc>
  88:	str	x0, [x19, #56]
  8c:	cbz	x0, d0 <gz_init+0xd0>
  90:	add	x0, x19, #0x78
  94:	str	xzr, [x0, #64]
  98:	str	xzr, [x0, #72]
  9c:	str	xzr, [x0, #80]
  a0:	mov	w7, #0x70                  	// #112
  a4:	adrp	x6, 0 <gz_init>
  a8:	add	x6, x6, #0x0
  ac:	ldr	w5, [x19, #92]
  b0:	mov	w4, #0x8                   	// #8
  b4:	mov	w3, #0x1f                  	// #31
  b8:	mov	w2, w4
  bc:	ldr	w1, [x19, #88]
  c0:	bl	0 <deflateInit2_>
  c4:	cbnz	w0, f4 <gz_init+0xf4>
  c8:	str	xzr, [x19, #120]
  cc:	b	34 <gz_init+0x34>
  d0:	mov	x0, x20
  d4:	bl	0 <free>
  d8:	adrp	x2, 0 <gz_init>
  dc:	add	x2, x2, #0x0
  e0:	mov	w1, #0xfffffffc            	// #-4
  e4:	mov	x0, x19
  e8:	bl	0 <gz_error>
  ec:	mov	w0, #0xffffffff            	// #-1
  f0:	b	54 <gz_init+0x54>
  f4:	ldr	x0, [x19, #56]
  f8:	bl	0 <free>
  fc:	ldr	x0, [x19, #48]
 100:	bl	0 <free>
 104:	adrp	x2, 0 <gz_init>
 108:	add	x2, x2, #0x0
 10c:	mov	w1, #0xfffffffc            	// #-4
 110:	mov	x0, x19
 114:	bl	0 <gz_error>
 118:	mov	w0, #0xffffffff            	// #-1
 11c:	b	54 <gz_init+0x54>
 120:	mov	w0, #0x0                   	// #0
 124:	b	54 <gz_init+0x54>

0000000000000128 <gz_comp>:
 128:	stp	x29, x30, [sp, #-64]!
 12c:	mov	x29, sp
 130:	stp	x19, x20, [sp, #16]
 134:	stp	x21, x22, [sp, #32]
 138:	mov	x19, x0
 13c:	mov	w21, w1
 140:	ldr	w0, [x0, #40]
 144:	cbz	w0, 198 <gz_comp+0x70>
 148:	ldr	w22, [x19, #64]
 14c:	cbz	w22, 1d4 <gz_comp+0xac>
 150:	ldr	w2, [x19, #128]
 154:	cbz	w2, 260 <gz_comp+0x138>
 158:	mov	w20, #0x40000000            	// #1073741824
 15c:	cmp	w2, w20
 160:	csel	w2, w2, w20, ls  // ls = plast
 164:	ldr	x1, [x19, #120]
 168:	ldr	w0, [x19, #28]
 16c:	bl	0 <write>
 170:	tbnz	w0, #31, 1b0 <gz_comp+0x88>
 174:	ldr	w2, [x19, #128]
 178:	sub	w2, w2, w0
 17c:	str	w2, [x19, #128]
 180:	ldr	x1, [x19, #120]
 184:	add	x0, x1, w0, sxtw
 188:	str	x0, [x19, #120]
 18c:	cbnz	w2, 15c <gz_comp+0x34>
 190:	mov	w22, #0x0                   	// #0
 194:	b	20c <gz_comp+0xe4>
 198:	mov	x0, x19
 19c:	bl	0 <gz_init>
 1a0:	mov	w22, w0
 1a4:	cmn	w0, #0x1
 1a8:	b.ne	148 <gz_comp+0x20>  // b.any
 1ac:	b	20c <gz_comp+0xe4>
 1b0:	bl	0 <__errno_location>
 1b4:	ldr	w0, [x0]
 1b8:	bl	0 <strerror>
 1bc:	mov	x2, x0
 1c0:	mov	w1, #0xffffffff            	// #-1
 1c4:	mov	x0, x19
 1c8:	bl	0 <gz_error>
 1cc:	mov	w22, #0xffffffff            	// #-1
 1d0:	b	20c <gz_comp+0xe4>
 1d4:	stp	x23, x24, [sp, #48]
 1d8:	add	x23, x19, #0x78
 1dc:	mov	w0, w22
 1e0:	mov	x20, #0x40000000            	// #1073741824
 1e4:	b	2ec <gz_comp+0x1c4>
 1e8:	bl	0 <__errno_location>
 1ec:	ldr	w0, [x0]
 1f0:	bl	0 <strerror>
 1f4:	mov	x2, x0
 1f8:	mov	w1, #0xffffffff            	// #-1
 1fc:	mov	x0, x19
 200:	bl	0 <gz_error>
 204:	mov	w22, #0xffffffff            	// #-1
 208:	ldp	x23, x24, [sp, #48]
 20c:	mov	w0, w22
 210:	ldp	x19, x20, [sp, #16]
 214:	ldp	x21, x22, [sp, #32]
 218:	ldp	x29, x30, [sp], #64
 21c:	ret
 220:	adrp	x2, 0 <gz_init>
 224:	add	x2, x2, #0x0
 228:	mov	w1, #0xfffffffe            	// #-2
 22c:	mov	x0, x19
 230:	bl	0 <gz_error>
 234:	mov	w22, #0xffffffff            	// #-1
 238:	ldp	x23, x24, [sp, #48]
 23c:	b	20c <gz_comp+0xe4>
 240:	cmp	w21, #0x4
 244:	b.eq	250 <gz_comp+0x128>  // b.none
 248:	ldp	x23, x24, [sp, #48]
 24c:	b	20c <gz_comp+0xe4>
 250:	mov	x0, x23
 254:	bl	0 <deflateReset>
 258:	ldp	x23, x24, [sp, #48]
 25c:	b	20c <gz_comp+0xe4>
 260:	mov	w22, #0x0                   	// #0
 264:	b	20c <gz_comp+0xe4>
 268:	ldr	x2, [x19, #144]
 26c:	ldr	x1, [x19, #8]
 270:	cmp	x2, x1
 274:	b.ls	2b4 <gz_comp+0x18c>  // b.plast
 278:	sub	x2, x2, x1
 27c:	cmp	x2, x20
 280:	csel	x2, x2, x20, le
 284:	mov	w2, w2
 288:	ldr	w0, [x19, #28]
 28c:	bl	0 <write>
 290:	tbnz	w0, #31, 1e8 <gz_comp+0xc0>
 294:	ldr	x1, [x19, #8]
 298:	add	x1, x1, w0, sxtw
 29c:	str	x1, [x19, #8]
 2a0:	ldr	x2, [x19, #144]
 2a4:	cmp	x1, x2
 2a8:	b.cc	278 <gz_comp+0x150>  // b.lo, b.ul, b.last
 2ac:	ldr	w0, [x19, #152]
 2b0:	cbnz	w0, 2c8 <gz_comp+0x1a0>
 2b4:	ldr	w1, [x19, #40]
 2b8:	str	w1, [x19, #152]
 2bc:	ldr	x1, [x19, #56]
 2c0:	str	x1, [x19, #144]
 2c4:	str	x1, [x19, #8]
 2c8:	ldr	w24, [x19, #152]
 2cc:	mov	w1, w21
 2d0:	mov	x0, x23
 2d4:	bl	0 <deflate>
 2d8:	cmn	w0, #0x2
 2dc:	b.eq	220 <gz_comp+0xf8>  // b.none
 2e0:	ldr	w1, [x19, #152]
 2e4:	cmp	w1, w24
 2e8:	b.eq	240 <gz_comp+0x118>  // b.none
 2ec:	ldr	w1, [x19, #152]
 2f0:	cbz	w1, 268 <gz_comp+0x140>
 2f4:	cbz	w21, 2c8 <gz_comp+0x1a0>
 2f8:	cmp	w21, #0x4
 2fc:	ccmp	w0, #0x1, #0x4, eq  // eq = none
 300:	b.ne	2c8 <gz_comp+0x1a0>  // b.any
 304:	ldr	x2, [x19, #144]
 308:	ldr	x1, [x19, #8]
 30c:	cmp	x2, x1
 310:	b.hi	278 <gz_comp+0x150>  // b.pmore
 314:	b	2c8 <gz_comp+0x1a0>

0000000000000318 <gz_zero>:
 318:	stp	x29, x30, [sp, #-48]!
 31c:	mov	x29, sp
 320:	stp	x19, x20, [sp, #16]
 324:	str	x21, [sp, #32]
 328:	mov	x20, x0
 32c:	mov	x21, x1
 330:	ldr	w0, [x0, #128]
 334:	cbnz	w0, 344 <gz_zero+0x2c>
 338:	cbz	x21, 3bc <gz_zero+0xa4>
 33c:	mov	w0, #0x1                   	// #1
 340:	b	3a8 <gz_zero+0x90>
 344:	mov	w1, #0x0                   	// #0
 348:	mov	x0, x20
 34c:	bl	128 <gz_comp>
 350:	cmn	w0, #0x1
 354:	b.ne	338 <gz_zero+0x20>  // b.any
 358:	b	3c0 <gz_zero+0xa8>
 35c:	mov	w2, w19
 360:	mov	w1, #0x0                   	// #0
 364:	ldr	x0, [x20, #48]
 368:	bl	0 <memset>
 36c:	str	w19, [x20, #128]
 370:	ldr	x0, [x20, #48]
 374:	str	x0, [x20, #120]
 378:	mov	w19, w19
 37c:	ldr	x0, [x20, #16]
 380:	add	x0, x0, x19
 384:	str	x0, [x20, #16]
 388:	mov	w1, #0x0                   	// #0
 38c:	mov	x0, x20
 390:	bl	128 <gz_comp>
 394:	cmn	w0, #0x1
 398:	b.eq	3c0 <gz_zero+0xa8>  // b.none
 39c:	mov	w0, #0x0                   	// #0
 3a0:	subs	x21, x21, x19
 3a4:	b.eq	3c0 <gz_zero+0xa8>  // b.none
 3a8:	ldr	w19, [x20, #40]
 3ac:	cmp	x21, w19, uxtw
 3b0:	csel	w19, w19, w21, ge  // ge = tcont
 3b4:	cbz	w0, 36c <gz_zero+0x54>
 3b8:	b	35c <gz_zero+0x44>
 3bc:	mov	w0, #0x0                   	// #0
 3c0:	ldp	x19, x20, [sp, #16]
 3c4:	ldr	x21, [sp, #32]
 3c8:	ldp	x29, x30, [sp], #48
 3cc:	ret

00000000000003d0 <gz_write>:
 3d0:	stp	x29, x30, [sp, #-64]!
 3d4:	mov	x29, sp
 3d8:	stp	x23, x24, [sp, #48]
 3dc:	mov	x23, x2
 3e0:	cbz	x2, 4e8 <gz_write+0x118>
 3e4:	stp	x19, x20, [sp, #16]
 3e8:	stp	x21, x22, [sp, #32]
 3ec:	mov	x19, x0
 3f0:	mov	x22, x1
 3f4:	ldr	w0, [x0, #40]
 3f8:	cbz	w0, 418 <gz_write+0x48>
 3fc:	ldr	w0, [x19, #104]
 400:	cbnz	w0, 438 <gz_write+0x68>
 404:	ldr	w0, [x19, #40]
 408:	cmp	x0, x23
 40c:	b.ls	4f8 <gz_write+0x128>  // b.plast
 410:	mov	x21, x23
 414:	b	474 <gz_write+0xa4>
 418:	mov	x0, x19
 41c:	bl	0 <gz_init>
 420:	cmn	w0, #0x1
 424:	b.ne	3fc <gz_write+0x2c>  // b.any
 428:	mov	x23, #0x0                   	// #0
 42c:	ldp	x19, x20, [sp, #16]
 430:	ldp	x21, x22, [sp, #32]
 434:	b	4e8 <gz_write+0x118>
 438:	str	wzr, [x19, #104]
 43c:	ldr	x1, [x19, #96]
 440:	mov	x0, x19
 444:	bl	318 <gz_zero>
 448:	cmn	w0, #0x1
 44c:	b.ne	404 <gz_write+0x34>  // b.any
 450:	mov	x23, #0x0                   	// #0
 454:	ldp	x19, x20, [sp, #16]
 458:	ldp	x21, x22, [sp, #32]
 45c:	b	4e8 <gz_write+0x118>
 460:	mov	w1, #0x0                   	// #0
 464:	mov	x0, x19
 468:	bl	128 <gz_comp>
 46c:	cmn	w0, #0x1
 470:	b.eq	578 <gz_write+0x1a8>  // b.none
 474:	ldr	w3, [x19, #128]
 478:	cbnz	w3, 484 <gz_write+0xb4>
 47c:	ldr	x0, [x19, #48]
 480:	str	x0, [x19, #120]
 484:	ldr	x4, [x19, #48]
 488:	ldr	x0, [x19, #120]
 48c:	add	x3, x0, w3, uxtw
 490:	sub	x0, x3, x4
 494:	ldr	w20, [x19, #40]
 498:	sub	w1, w20, w0
 49c:	sub	w20, w20, w0
 4a0:	cmp	x1, x21
 4a4:	csel	w24, w21, w20, hi  // hi = pmore
 4a8:	csel	w20, w21, w20, hi  // hi = pmore
 4ac:	mov	x2, x20
 4b0:	mov	x1, x22
 4b4:	add	x0, x4, w0, uxtw
 4b8:	bl	0 <memcpy>
 4bc:	ldr	w0, [x19, #128]
 4c0:	add	w0, w0, w24
 4c4:	str	w0, [x19, #128]
 4c8:	ldr	x0, [x19, #16]
 4cc:	add	x0, x0, x20
 4d0:	str	x0, [x19, #16]
 4d4:	add	x22, x22, x20
 4d8:	subs	x21, x21, x20
 4dc:	b.ne	460 <gz_write+0x90>  // b.any
 4e0:	ldp	x19, x20, [sp, #16]
 4e4:	ldp	x21, x22, [sp, #32]
 4e8:	mov	x0, x23
 4ec:	ldp	x23, x24, [sp, #48]
 4f0:	ldp	x29, x30, [sp], #64
 4f4:	ret
 4f8:	ldr	w0, [x19, #128]
 4fc:	cbnz	w0, 554 <gz_write+0x184>
 500:	str	x22, [x19, #120]
 504:	mov	x20, x23
 508:	mov	x24, #0xfffffffe            	// #4294967294
 50c:	mov	x22, #0xffffffff            	// #4294967295
 510:	cmp	x20, x24
 514:	csel	x0, x20, x22, ls  // ls = plast
 518:	str	w0, [x19, #128]
 51c:	and	x21, x0, #0xffffffff
 520:	ldr	x1, [x19, #16]
 524:	add	x0, x1, w0, uxtw
 528:	str	x0, [x19, #16]
 52c:	mov	w1, #0x0                   	// #0
 530:	mov	x0, x19
 534:	bl	128 <gz_comp>
 538:	cmn	w0, #0x1
 53c:	b.eq	588 <gz_write+0x1b8>  // b.none
 540:	subs	x20, x20, x21
 544:	b.ne	510 <gz_write+0x140>  // b.any
 548:	ldp	x19, x20, [sp, #16]
 54c:	ldp	x21, x22, [sp, #32]
 550:	b	4e8 <gz_write+0x118>
 554:	mov	w1, #0x0                   	// #0
 558:	mov	x0, x19
 55c:	bl	128 <gz_comp>
 560:	cmn	w0, #0x1
 564:	b.ne	500 <gz_write+0x130>  // b.any
 568:	mov	x23, #0x0                   	// #0
 56c:	ldp	x19, x20, [sp, #16]
 570:	ldp	x21, x22, [sp, #32]
 574:	b	4e8 <gz_write+0x118>
 578:	mov	x23, #0x0                   	// #0
 57c:	ldp	x19, x20, [sp, #16]
 580:	ldp	x21, x22, [sp, #32]
 584:	b	4e8 <gz_write+0x118>
 588:	mov	x23, #0x0                   	// #0
 58c:	ldp	x19, x20, [sp, #16]
 590:	ldp	x21, x22, [sp, #32]
 594:	b	4e8 <gz_write+0x118>

0000000000000598 <gzwrite>:
 598:	stp	x29, x30, [sp, #-32]!
 59c:	mov	x29, sp
 5a0:	str	x19, [sp, #16]
 5a4:	cbz	x0, 5f8 <gzwrite+0x60>
 5a8:	ldr	w4, [x0, #24]
 5ac:	mov	w19, #0x0                   	// #0
 5b0:	mov	w3, #0x79b1                	// #31153
 5b4:	cmp	w4, w3
 5b8:	b.ne	5d4 <gzwrite+0x3c>  // b.any
 5bc:	ldr	w19, [x0, #108]
 5c0:	cbnz	w19, 600 <gzwrite+0x68>
 5c4:	tbnz	w2, #31, 5e4 <gzwrite+0x4c>
 5c8:	mov	w2, w2
 5cc:	bl	3d0 <gz_write>
 5d0:	mov	w19, w0
 5d4:	mov	w0, w19
 5d8:	ldr	x19, [sp, #16]
 5dc:	ldp	x29, x30, [sp], #32
 5e0:	ret
 5e4:	adrp	x2, 0 <gz_init>
 5e8:	add	x2, x2, #0x0
 5ec:	mov	w1, #0xfffffffd            	// #-3
 5f0:	bl	0 <gz_error>
 5f4:	b	5d4 <gzwrite+0x3c>
 5f8:	mov	w19, #0x0                   	// #0
 5fc:	b	5d4 <gzwrite+0x3c>
 600:	mov	w19, #0x0                   	// #0
 604:	b	5d4 <gzwrite+0x3c>

0000000000000608 <gzfwrite>:
 608:	cbz	x3, 694 <gzfwrite+0x8c>
 60c:	stp	x29, x30, [sp, #-32]!
 610:	mov	x29, sp
 614:	str	x19, [sp, #16]
 618:	mov	x4, x0
 61c:	mov	x19, x1
 620:	ldr	w5, [x3, #24]
 624:	mov	x0, #0x0                   	// #0
 628:	mov	w1, #0x79b1                	// #31153
 62c:	cmp	w5, w1
 630:	b.ne	66c <gzfwrite+0x64>  // b.any
 634:	ldr	w1, [x3, #108]
 638:	cbnz	w1, 66c <gzfwrite+0x64>
 63c:	mov	x0, x19
 640:	cbz	x19, 66c <gzfwrite+0x64>
 644:	mul	x0, x2, x19
 648:	udiv	x1, x0, x19
 64c:	cmp	x1, x2
 650:	b.ne	678 <gzfwrite+0x70>  // b.any
 654:	cbz	x0, 66c <gzfwrite+0x64>
 658:	mov	x2, x0
 65c:	mov	x1, x4
 660:	mov	x0, x3
 664:	bl	3d0 <gz_write>
 668:	udiv	x0, x0, x19
 66c:	ldr	x19, [sp, #16]
 670:	ldp	x29, x30, [sp], #32
 674:	ret
 678:	adrp	x2, 0 <gz_init>
 67c:	add	x2, x2, #0x0
 680:	mov	w1, #0xfffffffe            	// #-2
 684:	mov	x0, x3
 688:	bl	0 <gz_error>
 68c:	mov	x0, #0x0                   	// #0
 690:	b	66c <gzfwrite+0x64>
 694:	mov	x0, #0x0                   	// #0
 698:	ret

000000000000069c <gzputc>:
 69c:	cbz	x0, 770 <gzputc+0xd4>
 6a0:	stp	x29, x30, [sp, #-48]!
 6a4:	mov	x29, sp
 6a8:	stp	x19, x20, [sp, #16]
 6ac:	mov	x19, x0
 6b0:	mov	w20, w1
 6b4:	ldr	w1, [x0, #24]
 6b8:	mov	w0, #0x79b1                	// #31153
 6bc:	cmp	w1, w0
 6c0:	b.ne	778 <gzputc+0xdc>  // b.any
 6c4:	ldr	w0, [x19, #108]
 6c8:	cbnz	w0, 780 <gzputc+0xe4>
 6cc:	ldr	w0, [x19, #104]
 6d0:	cbnz	w0, 730 <gzputc+0x94>
 6d4:	ldr	w1, [x19, #40]
 6d8:	cbz	w1, 704 <gzputc+0x68>
 6dc:	ldr	w0, [x19, #128]
 6e0:	cbnz	w0, 6ec <gzputc+0x50>
 6e4:	ldr	x2, [x19, #48]
 6e8:	str	x2, [x19, #120]
 6ec:	ldr	x2, [x19, #48]
 6f0:	ldr	x3, [x19, #120]
 6f4:	add	x0, x3, w0, uxtw
 6f8:	sub	x0, x0, x2
 6fc:	cmp	w1, w0
 700:	b.hi	74c <gzputc+0xb0>  // b.pmore
 704:	strb	w20, [sp, #40]
 708:	mov	x2, #0x1                   	// #1
 70c:	add	x1, sp, #0x28
 710:	mov	x0, x19
 714:	bl	3d0 <gz_write>
 718:	cmp	x0, #0x1
 71c:	b.ne	788 <gzputc+0xec>  // b.any
 720:	and	w0, w20, #0xff
 724:	ldp	x19, x20, [sp, #16]
 728:	ldp	x29, x30, [sp], #48
 72c:	ret
 730:	str	wzr, [x19, #104]
 734:	ldr	x1, [x19, #96]
 738:	mov	x0, x19
 73c:	bl	318 <gz_zero>
 740:	cmn	w0, #0x1
 744:	b.ne	6d4 <gzputc+0x38>  // b.any
 748:	b	724 <gzputc+0x88>
 74c:	strb	w20, [x2, w0, uxtw]
 750:	ldr	w0, [x19, #128]
 754:	add	w0, w0, #0x1
 758:	str	w0, [x19, #128]
 75c:	ldr	x0, [x19, #16]
 760:	add	x0, x0, #0x1
 764:	str	x0, [x19, #16]
 768:	and	w0, w20, #0xff
 76c:	b	724 <gzputc+0x88>
 770:	mov	w0, #0xffffffff            	// #-1
 774:	ret
 778:	mov	w0, #0xffffffff            	// #-1
 77c:	b	724 <gzputc+0x88>
 780:	mov	w0, #0xffffffff            	// #-1
 784:	b	724 <gzputc+0x88>
 788:	mov	w0, #0xffffffff            	// #-1
 78c:	b	724 <gzputc+0x88>

0000000000000790 <gzputs>:
 790:	cbz	x0, 7fc <gzputs+0x6c>
 794:	stp	x29, x30, [sp, #-48]!
 798:	mov	x29, sp
 79c:	stp	x19, x20, [sp, #16]
 7a0:	mov	x19, x0
 7a4:	mov	x20, x1
 7a8:	ldr	w1, [x0, #24]
 7ac:	mov	w0, #0x79b1                	// #31153
 7b0:	cmp	w1, w0
 7b4:	b.ne	804 <gzputs+0x74>  // b.any
 7b8:	ldr	w0, [x19, #108]
 7bc:	cbnz	w0, 80c <gzputs+0x7c>
 7c0:	str	x21, [sp, #32]
 7c4:	mov	x0, x20
 7c8:	bl	0 <strlen>
 7cc:	mov	x21, x0
 7d0:	mov	x2, x0
 7d4:	mov	x1, x20
 7d8:	mov	x0, x19
 7dc:	bl	3d0 <gz_write>
 7e0:	cmp	w0, #0x0
 7e4:	ccmp	x21, #0x0, #0x4, eq  // eq = none
 7e8:	csinv	w0, w0, wzr, eq  // eq = none
 7ec:	ldr	x21, [sp, #32]
 7f0:	ldp	x19, x20, [sp, #16]
 7f4:	ldp	x29, x30, [sp], #48
 7f8:	ret
 7fc:	mov	w0, #0xffffffff            	// #-1
 800:	ret
 804:	mov	w0, #0xffffffff            	// #-1
 808:	b	7f0 <gzputs+0x60>
 80c:	mov	w0, #0xffffffff            	// #-1
 810:	b	7f0 <gzputs+0x60>

0000000000000814 <gzvprintf>:
 814:	stp	x29, x30, [sp, #-96]!
 818:	mov	x29, sp
 81c:	stp	x19, x20, [sp, #16]
 820:	cbz	x0, 98c <gzvprintf+0x178>
 824:	stp	x21, x22, [sp, #32]
 828:	mov	x19, x0
 82c:	mov	x22, x1
 830:	mov	x20, x2
 834:	ldr	w1, [x0, #24]
 838:	mov	w0, #0x79b1                	// #31153
 83c:	cmp	w1, w0
 840:	b.ne	994 <gzvprintf+0x180>  // b.any
 844:	ldr	w21, [x19, #108]
 848:	cbnz	w21, 9a0 <gzvprintf+0x18c>
 84c:	ldr	w0, [x19, #40]
 850:	cbz	w0, 8f4 <gzvprintf+0xe0>
 854:	ldr	w0, [x19, #104]
 858:	cbnz	w0, 910 <gzvprintf+0xfc>
 85c:	str	x23, [sp, #48]
 860:	ldr	w0, [x19, #128]
 864:	cbnz	w0, 870 <gzvprintf+0x5c>
 868:	ldr	x1, [x19, #48]
 86c:	str	x1, [x19, #120]
 870:	ldr	x23, [x19, #120]
 874:	add	x23, x23, w0, uxtw
 878:	ldr	w0, [x19, #40]
 87c:	sub	w0, w0, #0x1
 880:	strb	wzr, [x23, w0, uxtw]
 884:	ldp	x0, x1, [x20]
 888:	stp	x0, x1, [sp, #64]
 88c:	ldp	x0, x1, [x20, #16]
 890:	stp	x0, x1, [sp, #80]
 894:	add	x3, sp, #0x40
 898:	mov	x2, x22
 89c:	ldr	w1, [x19, #40]
 8a0:	mov	x0, x23
 8a4:	bl	0 <vsnprintf>
 8a8:	mov	w20, w0
 8ac:	cbz	w0, 9cc <gzvprintf+0x1b8>
 8b0:	ldr	w22, [x19, #40]
 8b4:	cmp	w22, w0
 8b8:	b.ls	9ac <gzvprintf+0x198>  // b.plast
 8bc:	sub	w1, w22, #0x1
 8c0:	ldrb	w1, [x23, w1, uxtw]
 8c4:	cbnz	w1, 9bc <gzvprintf+0x1a8>
 8c8:	ldr	w21, [x19, #128]
 8cc:	add	w21, w0, w21
 8d0:	str	w21, [x19, #128]
 8d4:	ldr	x0, [x19, #16]
 8d8:	add	x0, x0, w20, sxtw
 8dc:	str	x0, [x19, #16]
 8e0:	cmp	w22, w21
 8e4:	b.ls	934 <gzvprintf+0x120>  // b.plast
 8e8:	ldp	x21, x22, [sp, #32]
 8ec:	ldr	x23, [sp, #48]
 8f0:	b	9d4 <gzvprintf+0x1c0>
 8f4:	mov	x0, x19
 8f8:	bl	0 <gz_init>
 8fc:	cmn	w0, #0x1
 900:	b.ne	854 <gzvprintf+0x40>  // b.any
 904:	ldr	w20, [x19, #108]
 908:	ldp	x21, x22, [sp, #32]
 90c:	b	9d4 <gzvprintf+0x1c0>
 910:	str	wzr, [x19, #104]
 914:	ldr	x1, [x19, #96]
 918:	mov	x0, x19
 91c:	bl	318 <gz_zero>
 920:	cmn	w0, #0x1
 924:	b.ne	85c <gzvprintf+0x48>  // b.any
 928:	ldr	w20, [x19, #108]
 92c:	ldp	x21, x22, [sp, #32]
 930:	b	9d4 <gzvprintf+0x1c0>
 934:	str	w22, [x19, #128]
 938:	mov	w1, #0x0                   	// #0
 93c:	mov	x0, x19
 940:	bl	128 <gz_comp>
 944:	cmn	w0, #0x1
 948:	b.eq	97c <gzvprintf+0x168>  // b.none
 94c:	sub	w23, w21, w22
 950:	ldr	x0, [x19, #48]
 954:	ldr	w1, [x19, #40]
 958:	sub	w2, w21, w22
 95c:	add	x1, x0, x1
 960:	bl	0 <memcpy>
 964:	ldr	x0, [x19, #48]
 968:	str	x0, [x19, #120]
 96c:	str	w23, [x19, #128]
 970:	ldp	x21, x22, [sp, #32]
 974:	ldr	x23, [sp, #48]
 978:	b	9d4 <gzvprintf+0x1c0>
 97c:	ldr	w20, [x19, #108]
 980:	ldp	x21, x22, [sp, #32]
 984:	ldr	x23, [sp, #48]
 988:	b	9d4 <gzvprintf+0x1c0>
 98c:	mov	w20, #0xfffffffe            	// #-2
 990:	b	9d4 <gzvprintf+0x1c0>
 994:	mov	w20, #0xfffffffe            	// #-2
 998:	ldp	x21, x22, [sp, #32]
 99c:	b	9d4 <gzvprintf+0x1c0>
 9a0:	mov	w20, #0xfffffffe            	// #-2
 9a4:	ldp	x21, x22, [sp, #32]
 9a8:	b	9d4 <gzvprintf+0x1c0>
 9ac:	mov	w20, w21
 9b0:	ldp	x21, x22, [sp, #32]
 9b4:	ldr	x23, [sp, #48]
 9b8:	b	9d4 <gzvprintf+0x1c0>
 9bc:	mov	w20, w21
 9c0:	ldp	x21, x22, [sp, #32]
 9c4:	ldr	x23, [sp, #48]
 9c8:	b	9d4 <gzvprintf+0x1c0>
 9cc:	ldp	x21, x22, [sp, #32]
 9d0:	ldr	x23, [sp, #48]
 9d4:	mov	w0, w20
 9d8:	ldp	x19, x20, [sp, #16]
 9dc:	ldp	x29, x30, [sp], #96
 9e0:	ret

00000000000009e4 <gzprintf>:
 9e4:	stp	x29, x30, [sp, #-256]!
 9e8:	mov	x29, sp
 9ec:	str	x2, [sp, #208]
 9f0:	str	x3, [sp, #216]
 9f4:	str	x4, [sp, #224]
 9f8:	str	x5, [sp, #232]
 9fc:	str	x6, [sp, #240]
 a00:	str	x7, [sp, #248]
 a04:	str	q0, [sp, #80]
 a08:	str	q1, [sp, #96]
 a0c:	str	q2, [sp, #112]
 a10:	str	q3, [sp, #128]
 a14:	str	q4, [sp, #144]
 a18:	str	q5, [sp, #160]
 a1c:	str	q6, [sp, #176]
 a20:	str	q7, [sp, #192]
 a24:	add	x2, sp, #0x100
 a28:	str	x2, [sp, #48]
 a2c:	str	x2, [sp, #56]
 a30:	add	x2, sp, #0xd0
 a34:	str	x2, [sp, #64]
 a38:	mov	w2, #0xffffffd0            	// #-48
 a3c:	str	w2, [sp, #72]
 a40:	mov	w2, #0xffffff80            	// #-128
 a44:	str	w2, [sp, #76]
 a48:	ldp	x2, x3, [sp, #48]
 a4c:	stp	x2, x3, [sp, #16]
 a50:	ldp	x2, x3, [sp, #64]
 a54:	stp	x2, x3, [sp, #32]
 a58:	add	x2, sp, #0x10
 a5c:	bl	814 <gzvprintf>
 a60:	ldp	x29, x30, [sp], #256
 a64:	ret

0000000000000a68 <gzflush>:
 a68:	cbz	x0, ae4 <gzflush+0x7c>
 a6c:	stp	x29, x30, [sp, #-32]!
 a70:	mov	x29, sp
 a74:	stp	x19, x20, [sp, #16]
 a78:	mov	x19, x0
 a7c:	mov	w20, w1
 a80:	ldr	w1, [x0, #24]
 a84:	mov	w0, #0x79b1                	// #31153
 a88:	cmp	w1, w0
 a8c:	b.ne	aec <gzflush+0x84>  // b.any
 a90:	ldr	w0, [x19, #108]
 a94:	cbnz	w0, af4 <gzflush+0x8c>
 a98:	cmp	w20, #0x4
 a9c:	b.hi	afc <gzflush+0x94>  // b.pmore
 aa0:	ldr	w0, [x19, #104]
 aa4:	cbz	w0, ac0 <gzflush+0x58>
 aa8:	str	wzr, [x19, #104]
 aac:	ldr	x1, [x19, #96]
 ab0:	mov	x0, x19
 ab4:	bl	318 <gz_zero>
 ab8:	cmn	w0, #0x1
 abc:	b.eq	adc <gzflush+0x74>  // b.none
 ac0:	mov	w1, w20
 ac4:	mov	x0, x19
 ac8:	bl	128 <gz_comp>
 acc:	ldr	w0, [x19, #108]
 ad0:	ldp	x19, x20, [sp, #16]
 ad4:	ldp	x29, x30, [sp], #32
 ad8:	ret
 adc:	ldr	w0, [x19, #108]
 ae0:	b	ad0 <gzflush+0x68>
 ae4:	mov	w0, #0xfffffffe            	// #-2
 ae8:	ret
 aec:	mov	w0, #0xfffffffe            	// #-2
 af0:	b	ad0 <gzflush+0x68>
 af4:	mov	w0, #0xfffffffe            	// #-2
 af8:	b	ad0 <gzflush+0x68>
 afc:	mov	w0, #0xfffffffe            	// #-2
 b00:	b	ad0 <gzflush+0x68>

0000000000000b04 <gzsetparams>:
 b04:	stp	x29, x30, [sp, #-48]!
 b08:	mov	x29, sp
 b0c:	stp	x21, x22, [sp, #32]
 b10:	cbz	x0, be4 <gzsetparams+0xe0>
 b14:	stp	x19, x20, [sp, #16]
 b18:	mov	x19, x0
 b1c:	mov	w20, w1
 b20:	mov	w21, w2
 b24:	ldr	w1, [x0, #24]
 b28:	mov	w0, #0x79b1                	// #31153
 b2c:	cmp	w1, w0
 b30:	b.ne	bec <gzsetparams+0xe8>  // b.any
 b34:	ldr	w22, [x19, #108]
 b38:	cbnz	w22, bf8 <gzsetparams+0xf4>
 b3c:	ldr	w0, [x19, #88]
 b40:	cmp	w0, w20
 b44:	b.eq	ba0 <gzsetparams+0x9c>  // b.none
 b48:	ldr	w0, [x19, #104]
 b4c:	cbnz	w0, bb4 <gzsetparams+0xb0>
 b50:	ldr	w0, [x19, #40]
 b54:	cbz	w0, b84 <gzsetparams+0x80>
 b58:	ldr	w0, [x19, #128]
 b5c:	cbz	w0, b74 <gzsetparams+0x70>
 b60:	mov	w1, #0x5                   	// #5
 b64:	mov	x0, x19
 b68:	bl	128 <gz_comp>
 b6c:	cmn	w0, #0x1
 b70:	b.eq	bd8 <gzsetparams+0xd4>  // b.none
 b74:	mov	w2, w21
 b78:	mov	w1, w20
 b7c:	add	x0, x19, #0x78
 b80:	bl	0 <deflateParams>
 b84:	str	w20, [x19, #88]
 b88:	str	w21, [x19, #92]
 b8c:	ldp	x19, x20, [sp, #16]
 b90:	mov	w0, w22
 b94:	ldp	x21, x22, [sp, #32]
 b98:	ldp	x29, x30, [sp], #48
 b9c:	ret
 ba0:	ldr	w0, [x19, #92]
 ba4:	cmp	w0, w2
 ba8:	b.ne	b48 <gzsetparams+0x44>  // b.any
 bac:	ldp	x19, x20, [sp, #16]
 bb0:	b	b90 <gzsetparams+0x8c>
 bb4:	str	wzr, [x19, #104]
 bb8:	ldr	x1, [x19, #96]
 bbc:	mov	x0, x19
 bc0:	bl	318 <gz_zero>
 bc4:	cmn	w0, #0x1
 bc8:	b.ne	b50 <gzsetparams+0x4c>  // b.any
 bcc:	ldr	w22, [x19, #108]
 bd0:	ldp	x19, x20, [sp, #16]
 bd4:	b	b90 <gzsetparams+0x8c>
 bd8:	ldr	w22, [x19, #108]
 bdc:	ldp	x19, x20, [sp, #16]
 be0:	b	b90 <gzsetparams+0x8c>
 be4:	mov	w22, #0xfffffffe            	// #-2
 be8:	b	b90 <gzsetparams+0x8c>
 bec:	mov	w22, #0xfffffffe            	// #-2
 bf0:	ldp	x19, x20, [sp, #16]
 bf4:	b	b90 <gzsetparams+0x8c>
 bf8:	mov	w22, #0xfffffffe            	// #-2
 bfc:	ldp	x19, x20, [sp, #16]
 c00:	b	b90 <gzsetparams+0x8c>

0000000000000c04 <gzclose_w>:
 c04:	stp	x29, x30, [sp, #-32]!
 c08:	mov	x29, sp
 c0c:	stp	x19, x20, [sp, #16]
 c10:	cbz	x0, cdc <gzclose_w+0xd8>
 c14:	mov	x19, x0
 c18:	ldr	w1, [x0, #24]
 c1c:	mov	w0, #0x79b1                	// #31153
 c20:	cmp	w1, w0
 c24:	b.ne	ce4 <gzclose_w+0xe0>  // b.any
 c28:	ldr	w20, [x19, #104]
 c2c:	cbnz	w20, c9c <gzclose_w+0x98>
 c30:	mov	w1, #0x4                   	// #4
 c34:	mov	x0, x19
 c38:	bl	128 <gz_comp>
 c3c:	cmn	w0, #0x1
 c40:	b.eq	cc0 <gzclose_w+0xbc>  // b.none
 c44:	ldr	w0, [x19, #40]
 c48:	cbz	w0, c5c <gzclose_w+0x58>
 c4c:	ldr	w0, [x19, #64]
 c50:	cbz	w0, cc8 <gzclose_w+0xc4>
 c54:	ldr	x0, [x19, #48]
 c58:	bl	0 <free>
 c5c:	mov	x2, #0x0                   	// #0
 c60:	mov	w1, #0x0                   	// #0
 c64:	mov	x0, x19
 c68:	bl	0 <gz_error>
 c6c:	ldr	x0, [x19, #32]
 c70:	bl	0 <free>
 c74:	ldr	w0, [x19, #28]
 c78:	bl	0 <close>
 c7c:	cmn	w0, #0x1
 c80:	csel	w20, w20, w0, ne  // ne = any
 c84:	mov	x0, x19
 c88:	bl	0 <free>
 c8c:	mov	w0, w20
 c90:	ldp	x19, x20, [sp, #16]
 c94:	ldp	x29, x30, [sp], #32
 c98:	ret
 c9c:	str	wzr, [x19, #104]
 ca0:	ldr	x1, [x19, #96]
 ca4:	mov	x0, x19
 ca8:	bl	318 <gz_zero>
 cac:	mov	w20, #0x0                   	// #0
 cb0:	cmn	w0, #0x1
 cb4:	b.ne	c30 <gzclose_w+0x2c>  // b.any
 cb8:	ldr	w20, [x19, #108]
 cbc:	b	c30 <gzclose_w+0x2c>
 cc0:	ldr	w20, [x19, #108]
 cc4:	b	c44 <gzclose_w+0x40>
 cc8:	add	x0, x19, #0x78
 ccc:	bl	0 <deflateEnd>
 cd0:	ldr	x0, [x19, #56]
 cd4:	bl	0 <free>
 cd8:	b	c54 <gzclose_w+0x50>
 cdc:	mov	w20, #0xfffffffe            	// #-2
 ce0:	b	c8c <gzclose_w+0x88>
 ce4:	mov	w20, #0xfffffffe            	// #-2
 ce8:	b	c8c <gzclose_w+0x88>
