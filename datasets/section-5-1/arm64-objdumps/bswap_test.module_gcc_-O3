
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//bswap_test.module_gcc_-O3:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <test16>:
   0:	sub	sp, sp, #0x60
   4:	rev16	w3, w0
   8:	adrp	x5, 0 <test16>
   c:	adrp	x4, 0 <test16>
  10:	ubfx	x7, x3, #8, #8
  14:	ubfiz	w1, w3, #8, #8
  18:	stp	x29, x30, [sp, #16]
  1c:	adrp	x6, 0 <test16>
  20:	add	x29, sp, #0x10
  24:	adrp	x2, 0 <test16>
  28:	orr	w1, w1, w7
  2c:	stp	x23, x24, [sp, #64]
  30:	and	w24, w0, #0xffff
  34:	ldr	x5, [x5]
  38:	cmp	w24, w1
  3c:	ldr	x4, [x4]
  40:	stp	x21, x22, [sp, #48]
  44:	and	x7, x1, #0xffff
  48:	ldr	x22, [x6]
  4c:	str	x7, [sp]
  50:	ldr	x21, [x2]
  54:	and	x23, x3, #0xffff
  58:	stp	x19, x20, [sp, #32]
  5c:	and	x20, x0, #0xffff
  60:	and	w19, w3, #0xffff
  64:	cset	w0, eq  // eq = none
  68:	mov	x2, x22
  6c:	mov	x1, x21
  70:	mov	x6, x20
  74:	mov	x7, x23
  78:	mov	w3, #0x25                  	// #37
  7c:	stp	x25, x26, [sp, #80]
  80:	bl	0 <grub_test_assert_helper>
  84:	adrp	x0, 0 <test16>
  88:	adrp	x1, 0 <test16>
  8c:	and	w2, w24, #0xff
  90:	ldr	x26, [x0]
  94:	cmp	w2, w19, lsr #8
  98:	ldr	x25, [x1]
  9c:	mov	x7, x23
  a0:	mov	x2, x22
  a4:	cset	w0, eq  // eq = none
  a8:	mov	x1, x21
  ac:	mov	x5, x26
  b0:	mov	x6, x20
  b4:	mov	x4, x25
  b8:	mov	w3, #0x2b                  	// #43
  bc:	bl	0 <grub_test_assert_helper>
  c0:	and	w0, w19, #0xff
  c4:	mov	x7, x23
  c8:	cmp	w0, w24, lsr #8
  cc:	mov	x5, x26
  d0:	mov	x4, x25
  d4:	mov	x2, x22
  d8:	mov	x1, x21
  dc:	mov	x6, x20
  e0:	ldp	x29, x30, [sp, #16]
  e4:	cset	w0, eq  // eq = none
  e8:	ldp	x19, x20, [sp, #32]
  ec:	mov	w3, #0x2b                  	// #43
  f0:	ldp	x21, x22, [sp, #48]
  f4:	ldp	x23, x24, [sp, #64]
  f8:	ldp	x25, x26, [sp, #80]
  fc:	add	sp, sp, #0x60
 100:	b	0 <grub_test_assert_helper>
 104:	nop
	...

0000000000000138 <bswap_test>:
 138:	sub	sp, sp, #0xc0
 13c:	adrp	x0, 0 <test16>
 140:	adrp	x5, 0 <test16>
 144:	adrp	x4, 0 <test16>
 148:	adrp	x3, 0 <test16>
 14c:	adrp	x2, 0 <test16>
 150:	stp	x29, x30, [sp, #16]
 154:	add	x29, sp, #0x10
 158:	adrp	x1, 0 <test16>
 15c:	ldr	x6, [x0]
 160:	adrp	x0, 0 <test16>
 164:	stp	x21, x22, [sp, #48]
 168:	add	x7, x6, #0x8
 16c:	ldr	x22, [x3]
 170:	stp	x23, x24, [sp, #64]
 174:	add	x23, sp, #0xb8
 178:	ldr	x24, [x2]
 17c:	stp	x25, x26, [sp, #80]
 180:	add	x25, x6, #0x38
 184:	ldr	x26, [x5]
 188:	stp	x27, x28, [sp, #96]
 18c:	mov	x28, #0xffffffffffffffff    	// #-1
 190:	ldr	x27, [x4]
 194:	mov	w21, w28
 198:	ldr	x1, [x1]
 19c:	stp	x19, x20, [sp, #32]
 1a0:	ldr	x0, [x0]
 1a4:	stp	x1, x0, [sp, #112]
 1a8:	stp	x7, x6, [sp, #128]
 1ac:	mov	x7, x28
 1b0:	ldr	x0, [sp, #128]
 1b4:	mov	x5, x26
 1b8:	mov	x4, x27
 1bc:	mov	x1, x22
 1c0:	mov	x20, #0x1                   	// #1
 1c4:	mov	w3, #0x4d                  	// #77
 1c8:	ldr	x19, [x0]
 1cc:	adrp	x0, 0 <test16>
 1d0:	str	x19, [sp]
 1d4:	ldr	x2, [x0]
 1d8:	mov	x6, x19
 1dc:	mov	w0, #0x1                   	// #1
 1e0:	stp	x19, x28, [sp, #176]
 1e4:	bl	0 <grub_test_assert_helper>
 1e8:	sub	x1, x23, x20
 1ec:	add	x0, sp, #0xb0
 1f0:	add	x0, x0, x20
 1f4:	mov	x7, x28
 1f8:	ldr	x4, [sp, #112]
 1fc:	add	x20, x20, #0x1
 200:	ldrb	w9, [x1, #8]
 204:	adrp	x1, 0 <test16>
 208:	ldurb	w0, [x0, #-1]
 20c:	mov	x6, x19
 210:	ldr	x2, [x1]
 214:	cmp	w9, w0
 218:	cset	w0, eq  // eq = none
 21c:	mov	x5, x24
 220:	mov	x1, x22
 224:	mov	w3, #0x53                  	// #83
 228:	bl	0 <grub_test_assert_helper>
 22c:	cmp	x20, #0x5
 230:	b.ne	1e8 <bswap_test+0xb0>  // b.any
 234:	and	x28, x19, #0xffffffff
 238:	str	x28, [sp]
 23c:	mov	w21, w21
 240:	mov	x6, x28
 244:	mov	x7, x21
 248:	mov	x5, x26
 24c:	mov	x4, x27
 250:	mov	x2, x25
 254:	mov	x1, x22
 258:	mov	x20, #0x1                   	// #1
 25c:	mov	w3, #0x39                  	// #57
 260:	mov	w0, #0x1                   	// #1
 264:	str	w19, [sp, #176]
 268:	str	w21, [sp, #184]
 26c:	bl	0 <grub_test_assert_helper>
 270:	add	x0, sp, #0xb0
 274:	sub	x1, x23, x20
 278:	add	x0, x0, x20
 27c:	mov	x7, x21
 280:	ldr	x4, [sp, #120]
 284:	add	x20, x20, #0x1
 288:	ldrb	w9, [x1, #4]
 28c:	mov	x6, x28
 290:	ldurb	w0, [x0, #-1]
 294:	mov	x5, x24
 298:	mov	x2, x25
 29c:	mov	x1, x22
 2a0:	cmp	w9, w0
 2a4:	mov	w3, #0x3f                  	// #63
 2a8:	cset	w0, eq  // eq = none
 2ac:	bl	0 <grub_test_assert_helper>
 2b0:	cmp	x20, #0x5
 2b4:	b.ne	270 <bswap_test+0x138>  // b.any
 2b8:	ldr	x1, [sp, #128]
 2bc:	mov	w0, w19
 2c0:	add	x19, x1, #0x8
 2c4:	str	x19, [sp, #128]
 2c8:	bl	0 <test16>
 2cc:	adrp	x0, 0 <test16>
 2d0:	ldr	x1, [x0]
 2d4:	cmp	x1, x19
 2d8:	b.eq	2f0 <bswap_test+0x1b8>  // b.none
 2dc:	ldr	x7, [x19]
 2e0:	rev	w0, w7
 2e4:	rev	x28, x7
 2e8:	mov	w21, w0
 2ec:	b	1ac <bswap_test+0x74>
 2f0:	ldr	x0, [sp, #136]
 2f4:	mov	x21, #0x20000000000         	// #2199023255552
 2f8:	movk	x21, #0x472, lsl #48
 2fc:	mov	x7, #0x2f1b000000000000    	// #3394306744153800704
 300:	add	x28, x0, #0x30
 304:	mov	x0, #0x9c40                	// #40000
 308:	str	x0, [sp, #152]
 30c:	mov	w0, #0x200                 	// #512
 310:	movk	w0, #0x472, lsl #16
 314:	str	w0, [sp, #164]
 318:	mov	w0, #0x2f1b0000            	// #790298624
 31c:	mov	x19, #0x7                   	// #7
 320:	mov	x20, #0x194                 	// #404
 324:	mov	x2, #0x1940                	// #6464
 328:	mov	x6, #0x38                  	// #56
 32c:	str	w0, [sp, #144]
 330:	mov	x0, #0xe                   	// #14
 334:	nop
 338:	add	x0, x0, x19
 33c:	add	x2, x2, x20
 340:	sub	x6, x6, x19
 344:	mov	x9, #0x1                   	// #1
 348:	add	x20, x19, x0, lsl #2
 34c:	mov	x5, x26
 350:	add	x20, x20, x2
 354:	add	x19, x19, x6, lsl #2
 358:	mov	w0, w9
 35c:	mov	x4, x27
 360:	add	x6, x20, x20, lsl #1
 364:	mov	x2, x28
 368:	mov	x1, x22
 36c:	mov	w3, #0x4d                  	// #77
 370:	lsl	x6, x6, #3
 374:	stp	x7, x9, [sp, #128]
 378:	sub	x6, x6, x20
 37c:	adds	x19, x6, x19
 380:	csel	x19, x19, x9, ne  // ne = any
 384:	cmp	x20, #0x0
 388:	csel	x20, x20, x9, ne  // ne = any
 38c:	str	x20, [sp]
 390:	mov	x6, x20
 394:	stp	x20, x7, [sp, #176]
 398:	bl	0 <grub_test_assert_helper>
 39c:	ldp	x7, x8, [sp, #128]
 3a0:	add	x0, sp, #0xb0
 3a4:	sub	x1, x23, x8
 3a8:	add	x0, x0, x8
 3ac:	ldr	x4, [sp, #112]
 3b0:	add	x8, x8, #0x1
 3b4:	ldrb	w9, [x1, #8]
 3b8:	mov	x6, x20
 3bc:	ldurb	w0, [x0, #-1]
 3c0:	mov	x5, x24
 3c4:	mov	x2, x28
 3c8:	mov	x1, x22
 3cc:	cmp	w9, w0
 3d0:	mov	w3, #0x53                  	// #83
 3d4:	cset	w0, eq  // eq = none
 3d8:	stp	x8, x7, [sp, #128]
 3dc:	str	x8, [sp, #168]
 3e0:	bl	0 <grub_test_assert_helper>
 3e4:	ldp	x8, x7, [sp, #128]
 3e8:	cmp	x8, #0x5
 3ec:	b.ne	3a0 <bswap_test+0x268>  // b.any
 3f0:	mov	x8, #0x1                   	// #1
 3f4:	str	x8, [sp, #168]
 3f8:	ldr	w8, [sp, #144]
 3fc:	and	x6, x20, #0xffffffff
 400:	str	x6, [sp]
 404:	mov	x5, x26
 408:	mov	w7, w8
 40c:	mov	x4, x27
 410:	mov	x2, x25
 414:	mov	x1, x22
 418:	mov	w3, #0x39                  	// #57
 41c:	mov	w0, #0x1                   	// #1
 420:	str	x6, [sp, #128]
 424:	str	x7, [sp, #136]
 428:	str	w20, [sp, #176]
 42c:	str	w8, [sp, #184]
 430:	bl	0 <grub_test_assert_helper>
 434:	ldp	x6, x7, [sp, #128]
 438:	ldr	x8, [sp, #168]
 43c:	add	x0, sp, #0xb0
 440:	sub	x1, x23, x8
 444:	add	x0, x0, x8
 448:	ldr	x4, [sp, #120]
 44c:	add	x8, x8, #0x1
 450:	ldrb	w9, [x1, #4]
 454:	mov	x5, x24
 458:	ldurb	w0, [x0, #-1]
 45c:	mov	x2, x25
 460:	mov	x1, x22
 464:	mov	w3, #0x3f                  	// #63
 468:	cmp	w9, w0
 46c:	stp	x6, x8, [sp, #128]
 470:	cset	w0, eq  // eq = none
 474:	str	x7, [sp, #144]
 478:	bl	0 <grub_test_assert_helper>
 47c:	ldp	x6, x8, [sp, #128]
 480:	ldr	x7, [sp, #144]
 484:	cmp	x8, #0x5
 488:	b.ne	43c <bswap_test+0x304>  // b.any
 48c:	mov	x8, #0x1                   	// #1
 490:	mov	w0, w20
 494:	str	x8, [sp, #128]
 498:	bl	0 <test16>
 49c:	str	x19, [sp]
 4a0:	mov	x7, x21
 4a4:	mov	x6, x19
 4a8:	mov	x5, x26
 4ac:	mov	x4, x27
 4b0:	mov	x2, x28
 4b4:	mov	x1, x22
 4b8:	mov	w3, #0x4d                  	// #77
 4bc:	mov	w0, #0x1                   	// #1
 4c0:	stp	x19, x21, [sp, #176]
 4c4:	bl	0 <grub_test_assert_helper>
 4c8:	ldr	x8, [sp, #128]
 4cc:	add	x0, sp, #0xb0
 4d0:	sub	x1, x23, x8
 4d4:	add	x0, x0, x8
 4d8:	ldr	x4, [sp, #112]
 4dc:	add	x8, x8, #0x1
 4e0:	ldrb	w9, [x1, #8]
 4e4:	mov	x7, x21
 4e8:	ldurb	w0, [x0, #-1]
 4ec:	mov	x6, x19
 4f0:	mov	x5, x24
 4f4:	mov	x2, x28
 4f8:	cmp	w9, w0
 4fc:	mov	x1, x22
 500:	cset	w0, eq  // eq = none
 504:	mov	w3, #0x53                  	// #83
 508:	stp	x8, x8, [sp, #128]
 50c:	bl	0 <grub_test_assert_helper>
 510:	ldr	x8, [sp, #128]
 514:	cmp	x8, #0x5
 518:	b.ne	4cc <bswap_test+0x394>  // b.any
 51c:	ldr	w8, [sp, #164]
 520:	and	x6, x19, #0xffffffff
 524:	str	x6, [sp]
 528:	mov	x5, x26
 52c:	mov	w7, w8
 530:	mov	x4, x27
 534:	mov	x2, x25
 538:	mov	x1, x22
 53c:	mov	w3, #0x39                  	// #57
 540:	mov	w0, #0x1                   	// #1
 544:	stp	x6, x7, [sp, #128]
 548:	mov	x21, #0x1                   	// #1
 54c:	str	w19, [sp, #176]
 550:	str	w8, [sp, #184]
 554:	bl	0 <grub_test_assert_helper>
 558:	ldp	x6, x7, [sp, #128]
 55c:	add	x0, sp, #0xb0
 560:	sub	x1, x23, x21
 564:	add	x0, x0, x21
 568:	ldr	x4, [sp, #120]
 56c:	add	x21, x21, #0x1
 570:	ldrb	w8, [x1, #4]
 574:	mov	x5, x24
 578:	ldurb	w0, [x0, #-1]
 57c:	mov	x2, x25
 580:	mov	x1, x22
 584:	mov	w3, #0x3f                  	// #63
 588:	cmp	w8, w0
 58c:	stp	x6, x7, [sp, #128]
 590:	cset	w0, eq  // eq = none
 594:	bl	0 <grub_test_assert_helper>
 598:	cmp	x21, #0x5
 59c:	ldp	x6, x7, [sp, #128]
 5a0:	b.ne	55c <bswap_test+0x424>  // b.any
 5a4:	mov	w0, w19
 5a8:	bl	0 <test16>
 5ac:	ldr	x0, [sp, #152]
 5b0:	subs	x0, x0, #0x1
 5b4:	str	x0, [sp, #152]
 5b8:	b.eq	618 <bswap_test+0x4e0>  // b.none
 5bc:	lsl	x0, x19, #1
 5c0:	lsl	x2, x20, #4
 5c4:	add	x1, x0, x19
 5c8:	add	x21, x2, x20
 5cc:	lsl	x6, x19, #3
 5d0:	mov	x4, #0x1                   	// #1
 5d4:	add	x1, x19, x1, lsl #2
 5d8:	sub	x3, x6, x19
 5dc:	adds	x1, x21, x1
 5e0:	add	x3, x19, x3, lsl #2
 5e4:	csel	x7, x1, x4, ne  // ne = any
 5e8:	add	x21, x1, x1, lsl #1
 5ec:	rev	w5, w7
 5f0:	rev	x7, x7
 5f4:	str	w5, [sp, #144]
 5f8:	lsl	x21, x21, #3
 5fc:	sub	x21, x21, x1
 600:	adds	x21, x21, x3
 604:	csel	x21, x21, x4, ne  // ne = any
 608:	rev	w1, w21
 60c:	rev	x21, x21
 610:	str	w1, [sp, #164]
 614:	b	338 <bswap_test+0x200>
 618:	ldp	x29, x30, [sp, #16]
 61c:	ldp	x19, x20, [sp, #32]
 620:	ldp	x21, x22, [sp, #48]
 624:	ldp	x23, x24, [sp, #64]
 628:	ldp	x25, x26, [sp, #80]
 62c:	ldp	x27, x28, [sp, #96]
 630:	add	sp, sp, #0xc0
 634:	ret
	...

0000000000000678 <grub_mod_init>:
 678:	adrp	x1, 0 <test16>
 67c:	adrp	x0, 0 <test16>
 680:	ldr	x1, [x1]
 684:	ldr	x0, [x0]
 688:	b	0 <grub_test_register>
 68c:	nop
	...

00000000000006a0 <grub_mod_fini>:
 6a0:	adrp	x0, 0 <test16>
 6a4:	ldr	x0, [x0]
 6a8:	b	0 <grub_test_unregister>
 6ac:	nop
	...
