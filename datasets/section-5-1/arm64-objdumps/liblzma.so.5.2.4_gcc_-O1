
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//liblzma.so.5.2.4_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000003058 <.init>:
    3058:	stp	x29, x30, [sp, #-16]!
    305c:	mov	x29, sp
    3060:	bl	3570 <pthread_cond_timedwait@plt+0x10>
    3064:	ldp	x29, x30, [sp], #16
    3068:	ret

Disassembly of section .plt:

0000000000003070 <memcpy@plt-0x20>:
    3070:	stp	x16, x30, [sp, #-16]!
    3074:	adrp	x16, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    3078:	ldr	x17, [x16, #4088]
    307c:	add	x16, x16, #0xff8
    3080:	br	x17
    3084:	nop
    3088:	nop
    308c:	nop

0000000000003090 <memcpy@plt>:
    3090:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3094:	ldr	x17, [x16]
    3098:	add	x16, x16, #0x0
    309c:	br	x17

00000000000030a0 <lzma_index_iter_rewind@plt>:
    30a0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    30a4:	ldr	x17, [x16, #8]
    30a8:	add	x16, x16, #0x8
    30ac:	br	x17

00000000000030b0 <memmove@plt>:
    30b0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    30b4:	ldr	x17, [x16, #16]
    30b8:	add	x16, x16, #0x10
    30bc:	br	x17

00000000000030c0 <pthread_sigmask@plt>:
    30c0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    30c4:	ldr	x17, [x16, #24]
    30c8:	add	x16, x16, #0x18
    30cc:	br	x17

00000000000030d0 <lzma_block_buffer_encode@plt>:
    30d0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    30d4:	ldr	x17, [x16, #32]
    30d8:	add	x16, x16, #0x20
    30dc:	br	x17

00000000000030e0 <lzma_check_is_supported@plt>:
    30e0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    30e4:	ldr	x17, [x16, #40]
    30e8:	add	x16, x16, #0x28
    30ec:	br	x17

00000000000030f0 <lzma_filter_flags_size@plt>:
    30f0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    30f4:	ldr	x17, [x16, #48]
    30f8:	add	x16, x16, #0x30
    30fc:	br	x17

0000000000003100 <lzma_index_buffer_encode@plt>:
    3100:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3104:	ldr	x17, [x16, #56]
    3108:	add	x16, x16, #0x38
    310c:	br	x17

0000000000003110 <lzma_stream_flags_compare@plt>:
    3110:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3114:	ldr	x17, [x16, #64]
    3118:	add	x16, x16, #0x40
    311c:	br	x17

0000000000003120 <lzma_block_buffer_bound@plt>:
    3120:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3124:	ldr	x17, [x16, #72]
    3128:	add	x16, x16, #0x48
    312c:	br	x17

0000000000003130 <lzma_index_hash_decode@plt>:
    3130:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3134:	ldr	x17, [x16, #80]
    3138:	add	x16, x16, #0x50
    313c:	br	x17

0000000000003140 <__cxa_finalize@plt>:
    3140:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3144:	ldr	x17, [x16, #88]
    3148:	add	x16, x16, #0x58
    314c:	br	x17

0000000000003150 <clock_gettime@plt>:
    3150:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3154:	ldr	x17, [x16, #96]
    3158:	add	x16, x16, #0x60
    315c:	br	x17

0000000000003160 <lzma_block_header_size@plt>:
    3160:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3164:	ldr	x17, [x16, #104]
    3168:	add	x16, x16, #0x68
    316c:	br	x17

0000000000003170 <sigfillset@plt>:
    3170:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3174:	ldr	x17, [x16, #112]
    3178:	add	x16, x16, #0x70
    317c:	br	x17

0000000000003180 <lzma_index_memusage@plt>:
    3180:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3184:	ldr	x17, [x16, #120]
    3188:	add	x16, x16, #0x78
    318c:	br	x17

0000000000003190 <lzma_block_unpadded_size@plt>:
    3190:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3194:	ldr	x17, [x16, #128]
    3198:	add	x16, x16, #0x80
    319c:	br	x17

00000000000031a0 <malloc@plt>:
    31a0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    31a4:	ldr	x17, [x16, #136]
    31a8:	add	x16, x16, #0x88
    31ac:	br	x17

00000000000031b0 <lzma_index_hash_append@plt>:
    31b0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    31b4:	ldr	x17, [x16, #144]
    31b8:	add	x16, x16, #0x90
    31bc:	br	x17

00000000000031c0 <lzma_crc32@plt>:
    31c0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    31c4:	ldr	x17, [x16, #152]
    31c8:	add	x16, x16, #0x98
    31cc:	br	x17

00000000000031d0 <lzma_index_checks@plt>:
    31d0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    31d4:	ldr	x17, [x16, #160]
    31d8:	add	x16, x16, #0xa0
    31dc:	br	x17

00000000000031e0 <pthread_condattr_destroy@plt>:
    31e0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    31e4:	ldr	x17, [x16, #168]
    31e8:	add	x16, x16, #0xa8
    31ec:	br	x17

00000000000031f0 <lzma_stream_buffer_encode@plt>:
    31f0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    31f4:	ldr	x17, [x16, #176]
    31f8:	add	x16, x16, #0xb0
    31fc:	br	x17

0000000000003200 <pthread_cond_signal@plt>:
    3200:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3204:	ldr	x17, [x16, #184]
    3208:	add	x16, x16, #0xb8
    320c:	br	x17

0000000000003210 <lzma_stream_footer_encode@plt>:
    3210:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3214:	ldr	x17, [x16, #192]
    3218:	add	x16, x16, #0xc0
    321c:	br	x17

0000000000003220 <lzma_raw_encoder_memusage@plt>:
    3220:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3224:	ldr	x17, [x16, #200]
    3228:	add	x16, x16, #0xc8
    322c:	br	x17

0000000000003230 <memset@plt>:
    3230:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3234:	ldr	x17, [x16, #208]
    3238:	add	x16, x16, #0xd0
    323c:	br	x17

0000000000003240 <lzma_filters_copy@plt>:
    3240:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3244:	ldr	x17, [x16, #216]
    3248:	add	x16, x16, #0xd8
    324c:	br	x17

0000000000003250 <lzma_properties_decode@plt>:
    3250:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3254:	ldr	x17, [x16, #224]
    3258:	add	x16, x16, #0xe0
    325c:	br	x17

0000000000003260 <calloc@plt>:
    3260:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3264:	ldr	x17, [x16, #232]
    3268:	add	x16, x16, #0xe8
    326c:	br	x17

0000000000003270 <lzma_check_size@plt>:
    3270:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3274:	ldr	x17, [x16, #240]
    3278:	add	x16, x16, #0xf0
    327c:	br	x17

0000000000003280 <lzma_index_hash_init@plt>:
    3280:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3284:	ldr	x17, [x16, #248]
    3288:	add	x16, x16, #0xf8
    328c:	br	x17

0000000000003290 <lzma_crc64@plt>:
    3290:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3294:	ldr	x17, [x16, #256]
    3298:	add	x16, x16, #0x100
    329c:	br	x17

00000000000032a0 <pthread_mutex_init@plt>:
    32a0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    32a4:	ldr	x17, [x16, #264]
    32a8:	add	x16, x16, #0x108
    32ac:	br	x17

00000000000032b0 <pthread_create@plt>:
    32b0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    32b4:	ldr	x17, [x16, #272]
    32b8:	add	x16, x16, #0x110
    32bc:	br	x17

00000000000032c0 <__gmon_start__@plt>:
    32c0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    32c4:	ldr	x17, [x16, #280]
    32c8:	add	x16, x16, #0x118
    32cc:	br	x17

00000000000032d0 <pthread_join@plt>:
    32d0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    32d4:	ldr	x17, [x16, #288]
    32d8:	add	x16, x16, #0x120
    32dc:	br	x17

00000000000032e0 <lzma_raw_decoder_memusage@plt>:
    32e0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    32e4:	ldr	x17, [x16, #296]
    32e8:	add	x16, x16, #0x128
    32ec:	br	x17

00000000000032f0 <sched_getaffinity@plt>:
    32f0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    32f4:	ldr	x17, [x16, #304]
    32f8:	add	x16, x16, #0x130
    32fc:	br	x17

0000000000003300 <lzma_index_append@plt>:
    3300:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3304:	ldr	x17, [x16, #312]
    3308:	add	x16, x16, #0x138
    330c:	br	x17

0000000000003310 <lzma_index_hash_end@plt>:
    3310:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3314:	ldr	x17, [x16, #320]
    3318:	add	x16, x16, #0x140
    331c:	br	x17

0000000000003320 <lzma_end@plt>:
    3320:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3324:	ldr	x17, [x16, #328]
    3328:	add	x16, x16, #0x148
    332c:	br	x17

0000000000003330 <memcmp@plt>:
    3330:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3334:	ldr	x17, [x16, #336]
    3338:	add	x16, x16, #0x150
    333c:	br	x17

0000000000003340 <lzma_block_header_decode@plt>:
    3340:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3344:	ldr	x17, [x16, #344]
    3348:	add	x16, x16, #0x158
    334c:	br	x17

0000000000003350 <lzma_filter_flags_encode@plt>:
    3350:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3354:	ldr	x17, [x16, #352]
    3358:	add	x16, x16, #0x160
    335c:	br	x17

0000000000003360 <lzma_index_file_size@plt>:
    3360:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3364:	ldr	x17, [x16, #360]
    3368:	add	x16, x16, #0x168
    336c:	br	x17

0000000000003370 <lzma_properties_size@plt>:
    3370:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3374:	ldr	x17, [x16, #368]
    3378:	add	x16, x16, #0x170
    337c:	br	x17

0000000000003380 <free@plt>:
    3380:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3384:	ldr	x17, [x16, #376]
    3388:	add	x16, x16, #0x178
    338c:	br	x17

0000000000003390 <lzma_stream_header_encode@plt>:
    3390:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3394:	ldr	x17, [x16, #384]
    3398:	add	x16, x16, #0x180
    339c:	br	x17

00000000000033a0 <pthread_cond_wait@plt>:
    33a0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    33a4:	ldr	x17, [x16, #392]
    33a8:	add	x16, x16, #0x188
    33ac:	br	x17

00000000000033b0 <lzma_index_init@plt>:
    33b0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    33b4:	ldr	x17, [x16, #400]
    33b8:	add	x16, x16, #0x190
    33bc:	br	x17

00000000000033c0 <lzma_vli_decode@plt>:
    33c0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    33c4:	ldr	x17, [x16, #408]
    33c8:	add	x16, x16, #0x198
    33cc:	br	x17

00000000000033d0 <pthread_condattr_init@plt>:
    33d0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    33d4:	ldr	x17, [x16, #416]
    33d8:	add	x16, x16, #0x1a0
    33dc:	br	x17

00000000000033e0 <lzma_index_end@plt>:
    33e0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    33e4:	ldr	x17, [x16, #424]
    33e8:	add	x16, x16, #0x1a8
    33ec:	br	x17

00000000000033f0 <__sched_cpucount@plt>:
    33f0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    33f4:	ldr	x17, [x16, #432]
    33f8:	add	x16, x16, #0x1b0
    33fc:	br	x17

0000000000003400 <lzma_properties_encode@plt>:
    3400:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3404:	ldr	x17, [x16, #440]
    3408:	add	x16, x16, #0x1b8
    340c:	br	x17

0000000000003410 <pthread_mutex_destroy@plt>:
    3410:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3414:	ldr	x17, [x16, #448]
    3418:	add	x16, x16, #0x1c0
    341c:	br	x17

0000000000003420 <pthread_cond_init@plt>:
    3420:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3424:	ldr	x17, [x16, #456]
    3428:	add	x16, x16, #0x1c8
    342c:	br	x17

0000000000003430 <lzma_stream_footer_decode@plt>:
    3430:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3434:	ldr	x17, [x16, #464]
    3438:	add	x16, x16, #0x1d0
    343c:	br	x17

0000000000003440 <lzma_lzma_preset@plt>:
    3440:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3444:	ldr	x17, [x16, #472]
    3448:	add	x16, x16, #0x1d8
    344c:	br	x17

0000000000003450 <lzma_vli_encode@plt>:
    3450:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3454:	ldr	x17, [x16, #480]
    3458:	add	x16, x16, #0x1e0
    345c:	br	x17

0000000000003460 <lzma_index_iter_next@plt>:
    3460:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3464:	ldr	x17, [x16, #488]
    3468:	add	x16, x16, #0x1e8
    346c:	br	x17

0000000000003470 <sysconf@plt>:
    3470:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3474:	ldr	x17, [x16, #496]
    3478:	add	x16, x16, #0x1f0
    347c:	br	x17

0000000000003480 <lzma_vli_size@plt>:
    3480:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3484:	ldr	x17, [x16, #504]
    3488:	add	x16, x16, #0x1f8
    348c:	br	x17

0000000000003490 <pthread_condattr_setclock@plt>:
    3490:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3494:	ldr	x17, [x16, #512]
    3498:	add	x16, x16, #0x200
    349c:	br	x17

00000000000034a0 <lzma_stream_encoder@plt>:
    34a0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    34a4:	ldr	x17, [x16, #520]
    34a8:	add	x16, x16, #0x208
    34ac:	br	x17

00000000000034b0 <lzma_index_iter_init@plt>:
    34b0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    34b4:	ldr	x17, [x16, #528]
    34b8:	add	x16, x16, #0x210
    34bc:	br	x17

00000000000034c0 <lzma_block_uncomp_encode@plt>:
    34c0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    34c4:	ldr	x17, [x16, #536]
    34c8:	add	x16, x16, #0x218
    34cc:	br	x17

00000000000034d0 <lzma_index_hash_size@plt>:
    34d0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    34d4:	ldr	x17, [x16, #544]
    34d8:	add	x16, x16, #0x220
    34dc:	br	x17

00000000000034e0 <lzma_index_block_count@plt>:
    34e0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    34e4:	ldr	x17, [x16, #552]
    34e8:	add	x16, x16, #0x228
    34ec:	br	x17

00000000000034f0 <lzma_stream_header_decode@plt>:
    34f0:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    34f4:	ldr	x17, [x16, #560]
    34f8:	add	x16, x16, #0x230
    34fc:	br	x17

0000000000003500 <lzma_filter_flags_decode@plt>:
    3500:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3504:	ldr	x17, [x16, #568]
    3508:	add	x16, x16, #0x238
    350c:	br	x17

0000000000003510 <lzma_index_size@plt>:
    3510:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3514:	ldr	x17, [x16, #576]
    3518:	add	x16, x16, #0x240
    351c:	br	x17

0000000000003520 <pthread_cond_destroy@plt>:
    3520:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3524:	ldr	x17, [x16, #584]
    3528:	add	x16, x16, #0x248
    352c:	br	x17

0000000000003530 <pthread_mutex_lock@plt>:
    3530:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3534:	ldr	x17, [x16, #592]
    3538:	add	x16, x16, #0x250
    353c:	br	x17

0000000000003540 <lzma_block_header_encode@plt>:
    3540:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3544:	ldr	x17, [x16, #600]
    3548:	add	x16, x16, #0x258
    354c:	br	x17

0000000000003550 <pthread_mutex_unlock@plt>:
    3550:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3554:	ldr	x17, [x16, #608]
    3558:	add	x16, x16, #0x260
    355c:	br	x17

0000000000003560 <pthread_cond_timedwait@plt>:
    3560:	adrp	x16, 35000 <memcpy@GLIBC_2.17>
    3564:	ldr	x17, [x16, #616]
    3568:	add	x16, x16, #0x268
    356c:	br	x17

Disassembly of section .text:

0000000000003570 <lzma_version_number@@XZ_5.0-0x14c>:
    3570:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    3574:	ldr	x0, [x0, #3968]
    3578:	cbz	x0, 3580 <pthread_cond_timedwait@plt+0x20>
    357c:	b	32c0 <__gmon_start__@plt>
    3580:	ret
    3584:	nop
    3588:	adrp	x0, 35000 <lzma_mode_is_supported@@XZ_5.0+0x23a70>
    358c:	add	x0, x0, #0x278
    3590:	adrp	x1, 35000 <lzma_mode_is_supported@@XZ_5.0+0x23a70>
    3594:	add	x1, x1, #0x278
    3598:	cmp	x1, x0
    359c:	b.eq	35b4 <pthread_cond_timedwait@plt+0x54>  // b.none
    35a0:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    35a4:	ldr	x1, [x1, #3904]
    35a8:	cbz	x1, 35b4 <pthread_cond_timedwait@plt+0x54>
    35ac:	mov	x16, x1
    35b0:	br	x16
    35b4:	ret
    35b8:	adrp	x0, 35000 <lzma_mode_is_supported@@XZ_5.0+0x23a70>
    35bc:	add	x0, x0, #0x278
    35c0:	adrp	x1, 35000 <lzma_mode_is_supported@@XZ_5.0+0x23a70>
    35c4:	add	x1, x1, #0x278
    35c8:	sub	x1, x1, x0
    35cc:	lsr	x2, x1, #63
    35d0:	add	x1, x2, x1, asr #3
    35d4:	cmp	xzr, x1, asr #1
    35d8:	asr	x1, x1, #1
    35dc:	b.eq	35f4 <pthread_cond_timedwait@plt+0x94>  // b.none
    35e0:	adrp	x2, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    35e4:	ldr	x2, [x2, #4040]
    35e8:	cbz	x2, 35f4 <pthread_cond_timedwait@plt+0x94>
    35ec:	mov	x16, x2
    35f0:	br	x16
    35f4:	ret
    35f8:	stp	x29, x30, [sp, #-32]!
    35fc:	mov	x29, sp
    3600:	str	x19, [sp, #16]
    3604:	adrp	x19, 35000 <lzma_mode_is_supported@@XZ_5.0+0x23a70>
    3608:	ldrb	w0, [x19, #632]
    360c:	cbnz	w0, 3634 <pthread_cond_timedwait@plt+0xd4>
    3610:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    3614:	ldr	x0, [x0, #3920]
    3618:	cbz	x0, 3628 <pthread_cond_timedwait@plt+0xc8>
    361c:	adrp	x0, 35000 <lzma_mode_is_supported@@XZ_5.0+0x23a70>
    3620:	ldr	x0, [x0, #624]
    3624:	bl	3140 <__cxa_finalize@plt>
    3628:	bl	3588 <pthread_cond_timedwait@plt+0x28>
    362c:	mov	w0, #0x1                   	// #1
    3630:	strb	w0, [x19, #632]
    3634:	ldr	x19, [sp, #16]
    3638:	ldp	x29, x30, [sp], #32
    363c:	ret
    3640:	b	35b8 <pthread_cond_timedwait@plt+0x58>
    3644:	stp	x29, x30, [sp, #-32]!
    3648:	mov	x29, sp
    364c:	str	x19, [sp, #16]
    3650:	mov	w0, #0x1e                  	// #30
    3654:	bl	3470 <sysconf@plt>
    3658:	mov	x19, x0
    365c:	mov	w0, #0x55                  	// #85
    3660:	bl	3470 <sysconf@plt>
    3664:	cmn	x19, #0x1
    3668:	mul	x19, x19, x0
    366c:	ccmn	x0, #0x1, #0x4, ne  // ne = any
    3670:	csel	x0, x19, xzr, ne  // ne = any
    3674:	ldr	x19, [sp, #16]
    3678:	ldp	x29, x30, [sp], #32
    367c:	ret
    3680:	stp	x29, x30, [sp, #-144]!
    3684:	mov	x29, sp
    3688:	add	x2, sp, #0x10
    368c:	mov	x1, #0x80                  	// #128
    3690:	mov	w0, #0x0                   	// #0
    3694:	bl	32f0 <sched_getaffinity@plt>
    3698:	mov	w1, w0
    369c:	mov	w0, #0x0                   	// #0
    36a0:	cbz	w1, 36ac <pthread_cond_timedwait@plt+0x14c>
    36a4:	ldp	x29, x30, [sp], #144
    36a8:	ret
    36ac:	add	x1, sp, #0x10
    36b0:	mov	x0, #0x80                  	// #128
    36b4:	bl	33f0 <__sched_cpucount@plt>
    36b8:	b	36a4 <pthread_cond_timedwait@plt+0x144>

00000000000036bc <lzma_version_number@@XZ_5.0>:
    36bc:	mov	w0, #0x3eca                	// #16074
    36c0:	movk	w0, #0x2fb, lsl #16
    36c4:	ret

00000000000036c8 <lzma_version_string@@XZ_5.0>:
    36c8:	adrp	x0, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7a70>
    36cc:	add	x0, x0, #0x4d8
    36d0:	ret
    36d4:	stp	x29, x30, [sp, #-16]!
    36d8:	mov	x29, sp
    36dc:	cmp	x0, #0x0
    36e0:	csinc	x2, x0, xzr, ne  // ne = any
    36e4:	cbz	x1, 3708 <lzma_version_string@@XZ_5.0+0x40>
    36e8:	mov	x3, x1
    36ec:	ldr	x4, [x1]
    36f0:	cbz	x4, 3708 <lzma_version_string@@XZ_5.0+0x40>
    36f4:	mov	x1, #0x1                   	// #1
    36f8:	ldr	x0, [x3, #16]
    36fc:	blr	x4
    3700:	ldp	x29, x30, [sp], #16
    3704:	ret
    3708:	mov	x0, x2
    370c:	bl	31a0 <malloc@plt>
    3710:	b	3700 <lzma_version_string@@XZ_5.0+0x38>
    3714:	stp	x29, x30, [sp, #-32]!
    3718:	mov	x29, sp
    371c:	stp	x19, x20, [sp, #16]
    3720:	cmp	x0, #0x0
    3724:	csinc	x19, x0, xzr, ne  // ne = any
    3728:	cbz	x1, 3760 <lzma_version_string@@XZ_5.0+0x98>
    372c:	mov	x3, x1
    3730:	ldr	x4, [x1]
    3734:	cbz	x4, 3760 <lzma_version_string@@XZ_5.0+0x98>
    3738:	mov	x2, x19
    373c:	mov	x1, #0x1                   	// #1
    3740:	ldr	x0, [x3, #16]
    3744:	blr	x4
    3748:	mov	x20, x0
    374c:	cbz	x0, 3770 <lzma_version_string@@XZ_5.0+0xa8>
    3750:	mov	x2, x19
    3754:	mov	w1, #0x0                   	// #0
    3758:	bl	3230 <memset@plt>
    375c:	b	3770 <lzma_version_string@@XZ_5.0+0xa8>
    3760:	mov	x1, x19
    3764:	mov	x0, #0x1                   	// #1
    3768:	bl	3260 <calloc@plt>
    376c:	mov	x20, x0
    3770:	mov	x0, x20
    3774:	ldp	x19, x20, [sp, #16]
    3778:	ldp	x29, x30, [sp], #32
    377c:	ret
    3780:	stp	x29, x30, [sp, #-16]!
    3784:	mov	x29, sp
    3788:	cbz	x1, 37ac <lzma_version_string@@XZ_5.0+0xe4>
    378c:	mov	x2, x1
    3790:	ldr	x3, [x1, #8]
    3794:	cbz	x3, 37ac <lzma_version_string@@XZ_5.0+0xe4>
    3798:	mov	x1, x0
    379c:	ldr	x0, [x2, #16]
    37a0:	blr	x3
    37a4:	ldp	x29, x30, [sp], #16
    37a8:	ret
    37ac:	bl	3380 <free@plt>
    37b0:	b	37a4 <lzma_version_string@@XZ_5.0+0xdc>
    37b4:	stp	x29, x30, [sp, #-64]!
    37b8:	mov	x29, sp
    37bc:	stp	x19, x20, [sp, #16]
    37c0:	stp	x21, x22, [sp, #32]
    37c4:	str	x23, [sp, #48]
    37c8:	mov	x23, x1
    37cc:	mov	x22, x4
    37d0:	ldr	x21, [x1]
    37d4:	ldr	x20, [x4]
    37d8:	sub	x2, x2, x21
    37dc:	sub	x19, x5, x20
    37e0:	cmp	x2, x19
    37e4:	csel	x19, x2, x19, ls  // ls = plast
    37e8:	mov	x2, x19
    37ec:	add	x1, x0, x21
    37f0:	add	x0, x3, x20
    37f4:	bl	3090 <memcpy@plt>
    37f8:	add	x21, x21, x19
    37fc:	str	x21, [x23]
    3800:	add	x20, x20, x19
    3804:	str	x20, [x22]
    3808:	mov	x0, x19
    380c:	ldp	x19, x20, [sp, #16]
    3810:	ldp	x21, x22, [sp, #32]
    3814:	ldr	x23, [sp, #48]
    3818:	ldp	x29, x30, [sp], #64
    381c:	ret
    3820:	mov	x4, x0
    3824:	mov	x3, x2
    3828:	ldr	x2, [x2]
    382c:	ldr	x0, [x0, #8]
    3830:	cmp	x2, x0
    3834:	b.ne	3864 <lzma_version_string@@XZ_5.0+0x19c>  // b.any
    3838:	mov	w0, #0x0                   	// #0
    383c:	cmn	x2, #0x1
    3840:	b.eq	386c <lzma_version_string@@XZ_5.0+0x1a4>  // b.none
    3844:	stp	x29, x30, [sp, #-16]!
    3848:	mov	x29, sp
    384c:	ldr	x5, [x4, #64]
    3850:	mov	x2, #0x0                   	// #0
    3854:	ldr	x0, [x4]
    3858:	blr	x5
    385c:	ldp	x29, x30, [sp], #16
    3860:	ret
    3864:	mov	w0, #0xb                   	// #11
    3868:	ret
    386c:	ret
    3870:	stp	x29, x30, [sp, #-32]!
    3874:	mov	x29, sp
    3878:	str	x19, [sp, #16]
    387c:	mov	x19, x0
    3880:	ldr	x0, [x0, #16]
    3884:	cbz	x0, 38c0 <lzma_version_string@@XZ_5.0+0x1f8>
    3888:	ldr	x2, [x19, #32]
    388c:	cbz	x2, 38cc <lzma_version_string@@XZ_5.0+0x204>
    3890:	ldr	x0, [x19]
    3894:	blr	x2
    3898:	str	xzr, [x19]
    389c:	mov	x0, #0xffffffffffffffff    	// #-1
    38a0:	str	x0, [x19, #8]
    38a4:	str	xzr, [x19, #16]
    38a8:	str	xzr, [x19, #24]
    38ac:	str	xzr, [x19, #32]
    38b0:	str	xzr, [x19, #40]
    38b4:	str	xzr, [x19, #48]
    38b8:	str	xzr, [x19, #56]
    38bc:	str	xzr, [x19, #64]
    38c0:	ldr	x19, [sp, #16]
    38c4:	ldp	x29, x30, [sp], #32
    38c8:	ret
    38cc:	ldr	x0, [x19]
    38d0:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    38d4:	b	3898 <lzma_version_string@@XZ_5.0+0x1d0>
    38d8:	stp	x29, x30, [sp, #-48]!
    38dc:	mov	x29, sp
    38e0:	stp	x19, x20, [sp, #16]
    38e4:	str	x21, [sp, #32]
    38e8:	mov	x20, x0
    38ec:	mov	x21, x1
    38f0:	mov	x19, x2
    38f4:	ldr	x1, [x2, #8]
    38f8:	ldr	x0, [x0, #16]
    38fc:	cmp	x1, x0
    3900:	b.ne	3940 <lzma_version_string@@XZ_5.0+0x278>  // b.any
    3904:	ldr	x0, [x19, #8]
    3908:	str	x0, [x20, #16]
    390c:	ldr	x0, [x19]
    3910:	str	x0, [x20, #8]
    3914:	ldr	x3, [x19, #8]
    3918:	mov	w0, #0x0                   	// #0
    391c:	cbz	x3, 3930 <lzma_version_string@@XZ_5.0+0x268>
    3920:	mov	x2, x19
    3924:	mov	x1, x21
    3928:	mov	x0, x20
    392c:	blr	x3
    3930:	ldp	x19, x20, [sp, #16]
    3934:	ldr	x21, [sp, #32]
    3938:	ldp	x29, x30, [sp], #48
    393c:	ret
    3940:	mov	x1, x21
    3944:	mov	x0, x20
    3948:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    394c:	b	3904 <lzma_version_string@@XZ_5.0+0x23c>
    3950:	cbz	x0, 39e0 <lzma_version_string@@XZ_5.0+0x318>
    3954:	stp	x29, x30, [sp, #-32]!
    3958:	mov	x29, sp
    395c:	str	x19, [sp, #16]
    3960:	mov	x19, x0
    3964:	ldr	x0, [x0, #56]
    3968:	cbz	x0, 39a0 <lzma_version_string@@XZ_5.0+0x2d8>
    396c:	ldr	x0, [x19, #56]
    3970:	str	wzr, [x0, #88]
    3974:	strb	wzr, [x0, #92]
    3978:	ldr	x0, [x19, #56]
    397c:	str	wzr, [x0, #72]
    3980:	ldr	x0, [x19, #56]
    3984:	strb	wzr, [x0, #93]
    3988:	str	xzr, [x19, #16]
    398c:	str	xzr, [x19, #40]
    3990:	mov	w0, #0x0                   	// #0
    3994:	ldr	x19, [sp, #16]
    3998:	ldp	x29, x30, [sp], #32
    399c:	ret
    39a0:	ldr	x1, [x19, #48]
    39a4:	mov	x0, #0x60                  	// #96
    39a8:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    39ac:	str	x0, [x19, #56]
    39b0:	cbz	x0, 39e8 <lzma_version_string@@XZ_5.0+0x320>
    39b4:	str	xzr, [x0]
    39b8:	mov	x1, #0xffffffffffffffff    	// #-1
    39bc:	str	x1, [x0, #8]
    39c0:	str	xzr, [x0, #16]
    39c4:	str	xzr, [x0, #24]
    39c8:	str	xzr, [x0, #32]
    39cc:	str	xzr, [x0, #40]
    39d0:	str	xzr, [x0, #48]
    39d4:	str	xzr, [x0, #56]
    39d8:	str	xzr, [x0, #64]
    39dc:	b	396c <lzma_version_string@@XZ_5.0+0x2a4>
    39e0:	mov	w0, #0xb                   	// #11
    39e4:	ret
    39e8:	mov	w0, #0x5                   	// #5
    39ec:	b	3994 <lzma_version_string@@XZ_5.0+0x2cc>

00000000000039f0 <lzma_code@@XZ_5.0>:
    39f0:	sub	sp, sp, #0x40
    39f4:	stp	x29, x30, [sp, #16]
    39f8:	add	x29, sp, #0x10
    39fc:	str	x19, [sp, #32]
    3a00:	mov	x19, x0
    3a04:	ldr	x0, [x0]
    3a08:	cbz	x0, 3acc <lzma_code@@XZ_5.0+0xdc>
    3a0c:	ldr	x0, [x19, #24]
    3a10:	cbz	x0, 3adc <lzma_code@@XZ_5.0+0xec>
    3a14:	ldr	x2, [x19, #56]
    3a18:	cbz	x2, 3ce8 <lzma_code@@XZ_5.0+0x2f8>
    3a1c:	ldr	x0, [x2, #24]
    3a20:	cmp	x0, #0x0
    3a24:	mov	w0, #0xb                   	// #11
    3a28:	ccmp	w1, #0x4, #0x2, ne  // ne = any
    3a2c:	b.hi	3cec <lzma_code@@XZ_5.0+0x2fc>  // b.pmore
    3a30:	add	x0, x2, w1, uxtw
    3a34:	ldrb	w3, [x0, #88]
    3a38:	mov	w0, #0xb                   	// #11
    3a3c:	cbz	w3, 3cec <lzma_code@@XZ_5.0+0x2fc>
    3a40:	ldr	x3, [x19, #64]
    3a44:	mov	w0, #0x8                   	// #8
    3a48:	cbnz	x3, 3cec <lzma_code@@XZ_5.0+0x2fc>
    3a4c:	ldr	x3, [x19, #72]
    3a50:	cbnz	x3, 3cec <lzma_code@@XZ_5.0+0x2fc>
    3a54:	ldr	x3, [x19, #80]
    3a58:	cbnz	x3, 3cec <lzma_code@@XZ_5.0+0x2fc>
    3a5c:	ldr	x3, [x19, #88]
    3a60:	cbnz	x3, 3cec <lzma_code@@XZ_5.0+0x2fc>
    3a64:	ldr	x3, [x19, #96]
    3a68:	cbnz	x3, 3cec <lzma_code@@XZ_5.0+0x2fc>
    3a6c:	ldr	x3, [x19, #104]
    3a70:	cbnz	x3, 3cec <lzma_code@@XZ_5.0+0x2fc>
    3a74:	ldr	x3, [x19, #112]
    3a78:	cbnz	x3, 3cec <lzma_code@@XZ_5.0+0x2fc>
    3a7c:	ldr	x3, [x19, #120]
    3a80:	cbnz	x3, 3cec <lzma_code@@XZ_5.0+0x2fc>
    3a84:	ldr	x3, [x19, #128]
    3a88:	cbnz	x3, 3cec <lzma_code@@XZ_5.0+0x2fc>
    3a8c:	ldr	w0, [x2, #72]
    3a90:	cmp	w0, #0x3
    3a94:	b.eq	3c4c <lzma_code@@XZ_5.0+0x25c>  // b.none
    3a98:	b.hi	3b24 <lzma_code@@XZ_5.0+0x134>  // b.pmore
    3a9c:	cmp	w0, #0x1
    3aa0:	b.eq	3b60 <lzma_code@@XZ_5.0+0x170>  // b.none
    3aa4:	cmp	w0, #0x2
    3aa8:	b.ne	3aec <lzma_code@@XZ_5.0+0xfc>  // b.any
    3aac:	mov	w0, #0xb                   	// #11
    3ab0:	cmp	w1, #0x2
    3ab4:	b.ne	3cec <lzma_code@@XZ_5.0+0x2fc>  // b.any
    3ab8:	ldr	x3, [x2, #80]
    3abc:	ldr	x2, [x19, #8]
    3ac0:	cmp	x3, x2
    3ac4:	b.eq	3b7c <lzma_code@@XZ_5.0+0x18c>  // b.none
    3ac8:	b	3cec <lzma_code@@XZ_5.0+0x2fc>
    3acc:	ldr	x2, [x19, #8]
    3ad0:	mov	w0, #0xb                   	// #11
    3ad4:	cbz	x2, 3a0c <lzma_code@@XZ_5.0+0x1c>
    3ad8:	b	3cec <lzma_code@@XZ_5.0+0x2fc>
    3adc:	ldr	x2, [x19, #32]
    3ae0:	mov	w0, #0xb                   	// #11
    3ae4:	cbz	x2, 3a14 <lzma_code@@XZ_5.0+0x24>
    3ae8:	b	3cec <lzma_code@@XZ_5.0+0x2fc>
    3aec:	cbnz	w0, 3b1c <lzma_code@@XZ_5.0+0x12c>
    3af0:	cmp	w1, #0x3
    3af4:	b.eq	3b48 <lzma_code@@XZ_5.0+0x158>  // b.none
    3af8:	cmp	w1, #0x4
    3afc:	b.eq	3b54 <lzma_code@@XZ_5.0+0x164>  // b.none
    3b00:	cmp	w1, #0x1
    3b04:	b.eq	3b3c <lzma_code@@XZ_5.0+0x14c>  // b.none
    3b08:	cmp	w1, #0x2
    3b0c:	b.ne	3b7c <lzma_code@@XZ_5.0+0x18c>  // b.any
    3b10:	mov	w0, #0x2                   	// #2
    3b14:	str	w0, [x2, #72]
    3b18:	b	3b7c <lzma_code@@XZ_5.0+0x18c>
    3b1c:	mov	w0, #0xb                   	// #11
    3b20:	b	3cec <lzma_code@@XZ_5.0+0x2fc>
    3b24:	cmp	w0, #0x4
    3b28:	b.eq	3c6c <lzma_code@@XZ_5.0+0x27c>  // b.none
    3b2c:	cmp	w0, #0x5
    3b30:	mov	w0, #0xb                   	// #11
    3b34:	csinc	w0, w0, wzr, ne  // ne = any
    3b38:	b	3cec <lzma_code@@XZ_5.0+0x2fc>
    3b3c:	mov	w0, #0x1                   	// #1
    3b40:	str	w0, [x2, #72]
    3b44:	b	3b7c <lzma_code@@XZ_5.0+0x18c>
    3b48:	mov	w0, #0x3                   	// #3
    3b4c:	str	w0, [x2, #72]
    3b50:	b	3b7c <lzma_code@@XZ_5.0+0x18c>
    3b54:	mov	w0, #0x4                   	// #4
    3b58:	str	w0, [x2, #72]
    3b5c:	b	3b7c <lzma_code@@XZ_5.0+0x18c>
    3b60:	mov	w0, #0xb                   	// #11
    3b64:	cmp	w1, #0x1
    3b68:	b.ne	3cec <lzma_code@@XZ_5.0+0x2fc>  // b.any
    3b6c:	ldr	x3, [x2, #80]
    3b70:	ldr	x2, [x19, #8]
    3b74:	cmp	x3, x2
    3b78:	b.ne	3cec <lzma_code@@XZ_5.0+0x2fc>  // b.any
    3b7c:	str	xzr, [sp, #56]
    3b80:	str	xzr, [sp, #48]
    3b84:	ldr	x2, [x19, #56]
    3b88:	ldr	x0, [x2]
    3b8c:	str	w1, [sp]
    3b90:	ldr	x8, [x2, #24]
    3b94:	ldr	x7, [x19, #32]
    3b98:	add	x6, sp, #0x30
    3b9c:	ldr	x5, [x19, #24]
    3ba0:	ldr	x4, [x19, #8]
    3ba4:	add	x3, sp, #0x38
    3ba8:	ldr	x2, [x19]
    3bac:	ldr	x1, [x19, #48]
    3bb0:	blr	x8
    3bb4:	ldr	x2, [sp, #56]
    3bb8:	ldr	x1, [x19]
    3bbc:	add	x1, x1, x2
    3bc0:	str	x1, [x19]
    3bc4:	ldr	x1, [x19, #8]
    3bc8:	sub	x1, x1, x2
    3bcc:	str	x1, [x19, #8]
    3bd0:	ldr	x3, [x19, #16]
    3bd4:	add	x3, x3, x2
    3bd8:	str	x3, [x19, #16]
    3bdc:	ldr	x3, [sp, #48]
    3be0:	ldr	x4, [x19, #24]
    3be4:	add	x4, x4, x3
    3be8:	str	x4, [x19, #24]
    3bec:	ldr	x4, [x19, #32]
    3bf0:	sub	x4, x4, x3
    3bf4:	str	x4, [x19, #32]
    3bf8:	ldr	x4, [x19, #40]
    3bfc:	add	x4, x4, x3
    3c00:	str	x4, [x19, #40]
    3c04:	ldr	x4, [x19, #56]
    3c08:	str	x1, [x4, #80]
    3c0c:	cmp	w0, #0x4
    3c10:	b.hi	3c8c <lzma_code@@XZ_5.0+0x29c>  // b.pmore
    3c14:	cmp	w0, #0x1
    3c18:	b.hi	3c40 <lzma_code@@XZ_5.0+0x250>  // b.pmore
    3c1c:	cbz	w0, 3cac <lzma_code@@XZ_5.0+0x2bc>
    3c20:	ldr	x2, [x19, #56]
    3c24:	ldr	w1, [x2, #72]
    3c28:	sub	w3, w1, #0x1
    3c2c:	cmp	w3, #0x1
    3c30:	ccmp	w1, #0x4, #0x4, hi  // hi = pmore
    3c34:	mov	w1, #0x5                   	// #5
    3c38:	csel	w1, w1, wzr, ne  // ne = any
    3c3c:	str	w1, [x2, #72]
    3c40:	ldr	x1, [x19, #56]
    3c44:	strb	wzr, [x1, #93]
    3c48:	b	3cec <lzma_code@@XZ_5.0+0x2fc>
    3c4c:	mov	w0, #0xb                   	// #11
    3c50:	cmp	w1, #0x3
    3c54:	b.ne	3cec <lzma_code@@XZ_5.0+0x2fc>  // b.any
    3c58:	ldr	x3, [x2, #80]
    3c5c:	ldr	x2, [x19, #8]
    3c60:	cmp	x3, x2
    3c64:	b.eq	3b7c <lzma_code@@XZ_5.0+0x18c>  // b.none
    3c68:	b	3cec <lzma_code@@XZ_5.0+0x2fc>
    3c6c:	mov	w0, #0xb                   	// #11
    3c70:	cmp	w1, #0x4
    3c74:	b.ne	3cec <lzma_code@@XZ_5.0+0x2fc>  // b.any
    3c78:	ldr	x3, [x2, #80]
    3c7c:	ldr	x2, [x19, #8]
    3c80:	cmp	x3, x2
    3c84:	b.eq	3b7c <lzma_code@@XZ_5.0+0x18c>  // b.none
    3c88:	b	3cec <lzma_code@@XZ_5.0+0x2fc>
    3c8c:	cmp	w0, #0x6
    3c90:	b.eq	3c40 <lzma_code@@XZ_5.0+0x250>  // b.none
    3c94:	cmp	w0, #0x20
    3c98:	b.ne	3cd8 <lzma_code@@XZ_5.0+0x2e8>  // b.any
    3c9c:	ldr	x0, [x19, #56]
    3ca0:	strb	wzr, [x0, #93]
    3ca4:	mov	w0, #0x0                   	// #0
    3ca8:	b	3cec <lzma_code@@XZ_5.0+0x2fc>
    3cac:	orr	x2, x2, x3
    3cb0:	cbz	x2, 3cc0 <lzma_code@@XZ_5.0+0x2d0>
    3cb4:	ldr	x1, [x19, #56]
    3cb8:	strb	wzr, [x1, #93]
    3cbc:	b	3cec <lzma_code@@XZ_5.0+0x2fc>
    3cc0:	ldr	x1, [x19, #56]
    3cc4:	ldrb	w2, [x1, #93]
    3cc8:	cbnz	w2, 3cfc <lzma_code@@XZ_5.0+0x30c>
    3ccc:	mov	w2, #0x1                   	// #1
    3cd0:	strb	w2, [x1, #93]
    3cd4:	b	3cec <lzma_code@@XZ_5.0+0x2fc>
    3cd8:	ldr	x1, [x19, #56]
    3cdc:	mov	w2, #0x6                   	// #6
    3ce0:	str	w2, [x1, #72]
    3ce4:	b	3cec <lzma_code@@XZ_5.0+0x2fc>
    3ce8:	mov	w0, #0xb                   	// #11
    3cec:	ldr	x19, [sp, #32]
    3cf0:	ldp	x29, x30, [sp, #16]
    3cf4:	add	sp, sp, #0x40
    3cf8:	ret
    3cfc:	mov	w0, #0xa                   	// #10
    3d00:	b	3cec <lzma_code@@XZ_5.0+0x2fc>

0000000000003d04 <lzma_end@@XZ_5.0>:
    3d04:	cbz	x0, 3d44 <lzma_end@@XZ_5.0+0x40>
    3d08:	stp	x29, x30, [sp, #-32]!
    3d0c:	mov	x29, sp
    3d10:	str	x19, [sp, #16]
    3d14:	mov	x19, x0
    3d18:	ldr	x0, [x0, #56]
    3d1c:	cbz	x0, 3d38 <lzma_end@@XZ_5.0+0x34>
    3d20:	ldr	x1, [x19, #48]
    3d24:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    3d28:	ldr	x1, [x19, #48]
    3d2c:	ldr	x0, [x19, #56]
    3d30:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    3d34:	str	xzr, [x19, #56]
    3d38:	ldr	x19, [sp, #16]
    3d3c:	ldp	x29, x30, [sp], #32
    3d40:	ret
    3d44:	ret

0000000000003d48 <lzma_get_progress@@XZ_5.2>:
    3d48:	ldr	x4, [x0, #56]
    3d4c:	ldr	x3, [x4, #40]
    3d50:	cbz	x3, 3d6c <lzma_get_progress@@XZ_5.2+0x24>
    3d54:	stp	x29, x30, [sp, #-16]!
    3d58:	mov	x29, sp
    3d5c:	ldr	x0, [x4]
    3d60:	blr	x3
    3d64:	ldp	x29, x30, [sp], #16
    3d68:	ret
    3d6c:	ldr	x3, [x0, #16]
    3d70:	str	x3, [x1]
    3d74:	ldr	x0, [x0, #40]
    3d78:	str	x0, [x2]
    3d7c:	ret

0000000000003d80 <lzma_get_check@@XZ_5.0>:
    3d80:	ldr	x0, [x0, #56]
    3d84:	ldr	x1, [x0, #48]
    3d88:	cbz	x1, 3da4 <lzma_get_check@@XZ_5.0+0x24>
    3d8c:	stp	x29, x30, [sp, #-16]!
    3d90:	mov	x29, sp
    3d94:	ldr	x0, [x0]
    3d98:	blr	x1
    3d9c:	ldp	x29, x30, [sp], #16
    3da0:	ret
    3da4:	mov	w0, #0x0                   	// #0
    3da8:	ret

0000000000003dac <lzma_memusage@@XZ_5.0>:
    3dac:	cbz	x0, 3df0 <lzma_memusage@@XZ_5.0+0x44>
    3db0:	ldr	x0, [x0, #56]
    3db4:	cbz	x0, 3df8 <lzma_memusage@@XZ_5.0+0x4c>
    3db8:	ldr	x4, [x0, #56]
    3dbc:	cbz	x4, 3e00 <lzma_memusage@@XZ_5.0+0x54>
    3dc0:	stp	x29, x30, [sp, #-32]!
    3dc4:	mov	x29, sp
    3dc8:	mov	x3, #0x0                   	// #0
    3dcc:	add	x2, sp, #0x10
    3dd0:	add	x1, sp, #0x18
    3dd4:	ldr	x0, [x0]
    3dd8:	blr	x4
    3ddc:	cmp	w0, #0x0
    3de0:	ldr	x0, [sp, #24]
    3de4:	csel	x0, x0, xzr, eq  // eq = none
    3de8:	ldp	x29, x30, [sp], #32
    3dec:	ret
    3df0:	mov	x0, #0x0                   	// #0
    3df4:	ret
    3df8:	mov	x0, #0x0                   	// #0
    3dfc:	ret
    3e00:	mov	x0, #0x0                   	// #0
    3e04:	ret

0000000000003e08 <lzma_memlimit_get@@XZ_5.0>:
    3e08:	cbz	x0, 3e4c <lzma_memlimit_get@@XZ_5.0+0x44>
    3e0c:	ldr	x0, [x0, #56]
    3e10:	cbz	x0, 3e54 <lzma_memlimit_get@@XZ_5.0+0x4c>
    3e14:	ldr	x4, [x0, #56]
    3e18:	cbz	x4, 3e5c <lzma_memlimit_get@@XZ_5.0+0x54>
    3e1c:	stp	x29, x30, [sp, #-32]!
    3e20:	mov	x29, sp
    3e24:	mov	x3, #0x0                   	// #0
    3e28:	add	x2, sp, #0x18
    3e2c:	add	x1, sp, #0x10
    3e30:	ldr	x0, [x0]
    3e34:	blr	x4
    3e38:	cmp	w0, #0x0
    3e3c:	ldr	x0, [sp, #24]
    3e40:	csel	x0, x0, xzr, eq  // eq = none
    3e44:	ldp	x29, x30, [sp], #32
    3e48:	ret
    3e4c:	mov	x0, #0x0                   	// #0
    3e50:	ret
    3e54:	mov	x0, #0x0                   	// #0
    3e58:	ret
    3e5c:	mov	x0, #0x0                   	// #0
    3e60:	ret

0000000000003e64 <lzma_memlimit_set@@XZ_5.0>:
    3e64:	cbz	x0, 3ea0 <lzma_memlimit_set@@XZ_5.0+0x3c>
    3e68:	ldr	x0, [x0, #56]
    3e6c:	cbz	x0, 3ea8 <lzma_memlimit_set@@XZ_5.0+0x44>
    3e70:	ldr	x4, [x0, #56]
    3e74:	cbz	x4, 3eb0 <lzma_memlimit_set@@XZ_5.0+0x4c>
    3e78:	stp	x29, x30, [sp, #-32]!
    3e7c:	mov	x29, sp
    3e80:	cmp	x1, #0x0
    3e84:	csinc	x3, x1, xzr, ne  // ne = any
    3e88:	add	x2, sp, #0x18
    3e8c:	add	x1, sp, #0x10
    3e90:	ldr	x0, [x0]
    3e94:	blr	x4
    3e98:	ldp	x29, x30, [sp], #32
    3e9c:	ret
    3ea0:	mov	w0, #0xb                   	// #11
    3ea4:	ret
    3ea8:	mov	w0, #0xb                   	// #11
    3eac:	ret
    3eb0:	mov	w0, #0xb                   	// #11
    3eb4:	ret

0000000000003eb8 <lzma_block_unpadded_size@@XZ_5.0>:
    3eb8:	cbz	x0, 3f58 <lzma_block_unpadded_size@@XZ_5.0+0xa0>
    3ebc:	mov	x1, x0
    3ec0:	ldr	w2, [x0]
    3ec4:	mov	x0, #0x0                   	// #0
    3ec8:	cmp	w2, #0x1
    3ecc:	b.hi	3f68 <lzma_block_unpadded_size@@XZ_5.0+0xb0>  // b.pmore
    3ed0:	stp	x29, x30, [sp, #-32]!
    3ed4:	mov	x29, sp
    3ed8:	str	x19, [sp, #16]
    3edc:	ldr	w19, [x1, #4]
    3ee0:	sub	w2, w19, #0x8
    3ee4:	cmp	w2, #0x3f8
    3ee8:	b.ls	3ef8 <lzma_block_unpadded_size@@XZ_5.0+0x40>  // b.plast
    3eec:	ldr	x19, [sp, #16]
    3ef0:	ldp	x29, x30, [sp], #32
    3ef4:	ret
    3ef8:	tst	x19, #0x3
    3efc:	b.ne	3eec <lzma_block_unpadded_size@@XZ_5.0+0x34>  // b.any
    3f00:	ldr	x0, [x1, #16]
    3f04:	mov	x2, #0x8000000000000000    	// #-9223372036854775808
    3f08:	add	x2, x0, x2
    3f0c:	cmp	x0, #0x0
    3f10:	mov	x3, #0x7ffffffffffffffe    	// #9223372036854775806
    3f14:	ccmp	x2, x3, #0x0, ne  // ne = any
    3f18:	b.hi	3f24 <lzma_block_unpadded_size@@XZ_5.0+0x6c>  // b.pmore
    3f1c:	mov	x0, #0x0                   	// #0
    3f20:	b	3eec <lzma_block_unpadded_size@@XZ_5.0+0x34>
    3f24:	ldr	w1, [x1, #8]
    3f28:	cmp	w1, #0xf
    3f2c:	b.hi	3f60 <lzma_block_unpadded_size@@XZ_5.0+0xa8>  // b.pmore
    3f30:	cmn	x0, #0x1
    3f34:	b.eq	3eec <lzma_block_unpadded_size@@XZ_5.0+0x34>  // b.none
    3f38:	add	x19, x0, w19, uxtw
    3f3c:	mov	w0, w1
    3f40:	bl	3270 <lzma_check_size@plt>
    3f44:	add	x0, x19, w0, uxtw
    3f48:	mov	x1, #0x7ffffffffffffffc    	// #9223372036854775804
    3f4c:	cmp	x0, x1
    3f50:	csel	x0, x0, xzr, ls  // ls = plast
    3f54:	b	3eec <lzma_block_unpadded_size@@XZ_5.0+0x34>
    3f58:	mov	x0, #0x0                   	// #0
    3f5c:	ret
    3f60:	mov	x0, #0x0                   	// #0
    3f64:	b	3eec <lzma_block_unpadded_size@@XZ_5.0+0x34>
    3f68:	ret

0000000000003f6c <lzma_block_compressed_size@@XZ_5.0>:
    3f6c:	stp	x29, x30, [sp, #-32]!
    3f70:	mov	x29, sp
    3f74:	stp	x19, x20, [sp, #16]
    3f78:	mov	x20, x0
    3f7c:	mov	x19, x1
    3f80:	bl	3190 <lzma_block_unpadded_size@plt>
    3f84:	cbz	x0, 3fcc <lzma_block_compressed_size@@XZ_5.0+0x60>
    3f88:	ldr	w0, [x20, #8]
    3f8c:	bl	3270 <lzma_check_size@plt>
    3f90:	ldr	w1, [x20, #4]
    3f94:	add	w1, w0, w1
    3f98:	mov	w0, #0x9                   	// #9
    3f9c:	cmp	x1, x19
    3fa0:	b.cs	3fc0 <lzma_block_compressed_size@@XZ_5.0+0x54>  // b.hs, b.nlast
    3fa4:	sub	x19, x19, x1
    3fa8:	ldr	x1, [x20, #16]
    3fac:	cmp	x1, x19
    3fb0:	ccmn	x1, #0x1, #0x4, ne  // ne = any
    3fb4:	b.ne	3fc0 <lzma_block_compressed_size@@XZ_5.0+0x54>  // b.any
    3fb8:	str	x19, [x20, #16]
    3fbc:	mov	w0, #0x0                   	// #0
    3fc0:	ldp	x19, x20, [sp, #16]
    3fc4:	ldp	x29, x30, [sp], #32
    3fc8:	ret
    3fcc:	mov	w0, #0xb                   	// #11
    3fd0:	b	3fc0 <lzma_block_compressed_size@@XZ_5.0+0x54>

0000000000003fd4 <lzma_block_total_size@@XZ_5.0>:
    3fd4:	stp	x29, x30, [sp, #-16]!
    3fd8:	mov	x29, sp
    3fdc:	bl	3190 <lzma_block_unpadded_size@plt>
    3fe0:	add	x1, x0, #0x3
    3fe4:	and	x1, x1, #0xfffffffffffffffc
    3fe8:	cmn	x0, #0x1
    3fec:	csel	x0, x1, x0, ne  // ne = any
    3ff0:	ldp	x29, x30, [sp], #16
    3ff4:	ret
    3ff8:	stp	x29, x30, [sp, #-32]!
    3ffc:	mov	x29, sp
    4000:	stp	x19, x20, [sp, #16]
    4004:	mov	x19, x0
    4008:	add	x20, x0, #0x50
    400c:	mov	x0, x20
    4010:	bl	3440 <lzma_lzma_preset@plt>
    4014:	and	w0, w0, #0xff
    4018:	cbnz	w0, 4040 <lzma_block_total_size@@XZ_5.0+0x6c>
    401c:	mov	x0, #0x21                  	// #33
    4020:	str	x0, [x19]
    4024:	str	x20, [x19, #8]
    4028:	mov	x0, #0xffffffffffffffff    	// #-1
    402c:	str	x0, [x19, #16]
    4030:	mov	w0, #0x0                   	// #0
    4034:	ldp	x19, x20, [sp, #16]
    4038:	ldp	x29, x30, [sp], #32
    403c:	ret
    4040:	mov	w0, #0x1                   	// #1
    4044:	b	4034 <lzma_block_total_size@@XZ_5.0+0x60>
    4048:	cbz	x0, 4120 <lzma_block_total_size@@XZ_5.0+0x14c>
    404c:	ldr	x2, [x0]
    4050:	cmn	x2, #0x1
    4054:	b.eq	4128 <lzma_block_total_size@@XZ_5.0+0x154>  // b.none
    4058:	mov	x7, #0x0                   	// #0
    405c:	mov	w9, #0x1                   	// #1
    4060:	mov	x10, #0x0                   	// #0
    4064:	mov	x11, #0x1                   	// #1
    4068:	movk	x11, #0x4000, lsl #48
    406c:	adrp	x8, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7a70>
    4070:	add	x12, x8, #0x4e0
    4074:	lsl	x6, x7, #4
    4078:	ldr	x5, [x0, x6]
    407c:	cmp	x5, x11
    4080:	b.eq	40b0 <lzma_block_total_size@@XZ_5.0+0xdc>  // b.none
    4084:	add	x2, x8, #0x4e0
    4088:	mov	x4, #0x0                   	// #0
    408c:	add	x4, x4, #0x1
    4090:	ldr	x3, [x2, #24]
    4094:	cmp	x3, x5
    4098:	b.eq	40b4 <lzma_block_total_size@@XZ_5.0+0xe0>  // b.none
    409c:	add	x2, x2, #0x18
    40a0:	cmn	x3, #0x1
    40a4:	b.ne	408c <lzma_block_total_size@@XZ_5.0+0xb8>  // b.any
    40a8:	mov	w0, #0x8                   	// #8
    40ac:	ret
    40b0:	mov	x4, #0x0                   	// #0
    40b4:	cbz	w9, 4130 <lzma_block_total_size@@XZ_5.0+0x15c>
    40b8:	add	x2, x4, x4, lsl #1
    40bc:	add	x2, x12, x2, lsl #3
    40c0:	ldrb	w9, [x2, #16]
    40c4:	ldrb	w2, [x2, #18]
    40c8:	add	x10, x10, x2
    40cc:	add	x7, x7, #0x1
    40d0:	add	x6, x6, #0x10
    40d4:	ldr	x2, [x0, x6]
    40d8:	cmn	x2, #0x1
    40dc:	b.ne	4074 <lzma_block_total_size@@XZ_5.0+0xa0>  // b.any
    40e0:	cmp	x7, #0x4
    40e4:	ccmp	x10, #0x3, #0x2, ls  // ls = plast
    40e8:	cset	w2, hi  // hi = pmore
    40ec:	add	x4, x4, x4, lsl #1
    40f0:	adrp	x0, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7a70>
    40f4:	add	x0, x0, #0x4e0
    40f8:	add	x0, x0, x4, lsl #3
    40fc:	ldrb	w0, [x0, #17]
    4100:	eor	w0, w0, #0x1
    4104:	orr	w2, w2, w0
    4108:	mov	w0, #0x8                   	// #8
    410c:	tst	w2, #0xff
    4110:	b.ne	40ac <lzma_block_total_size@@XZ_5.0+0xd8>  // b.any
    4114:	str	x7, [x1]
    4118:	mov	w0, #0x0                   	// #0
    411c:	b	40ac <lzma_block_total_size@@XZ_5.0+0xd8>
    4120:	mov	w0, #0xb                   	// #11
    4124:	b	40ac <lzma_block_total_size@@XZ_5.0+0xd8>
    4128:	mov	w0, #0xb                   	// #11
    412c:	b	40ac <lzma_block_total_size@@XZ_5.0+0xd8>
    4130:	mov	w0, #0x8                   	// #8
    4134:	b	40ac <lzma_block_total_size@@XZ_5.0+0xd8>

0000000000004138 <lzma_filters_copy@@XZ_5.0>:
    4138:	stp	x29, x30, [sp, #-96]!
    413c:	mov	x29, sp
    4140:	stp	x23, x24, [sp, #48]
    4144:	cmp	x0, #0x0
    4148:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    414c:	mov	w23, #0xb                   	// #11
    4150:	b.eq	425c <lzma_filters_copy@@XZ_5.0+0x124>  // b.none
    4154:	stp	x19, x20, [sp, #16]
    4158:	stp	x21, x22, [sp, #32]
    415c:	mov	x19, x0
    4160:	mov	x20, x1
    4164:	mov	x21, x2
    4168:	ldr	x2, [x0]
    416c:	mov	x23, #0x8                   	// #8
    4170:	mov	x24, #0x0                   	// #0
    4174:	mov	x22, #0x0                   	// #0
    4178:	cmn	x2, #0x1
    417c:	b.eq	419c <lzma_filters_copy@@XZ_5.0+0x64>  // b.none
    4180:	stp	x25, x26, [sp, #64]
    4184:	stp	x27, x28, [sp, #80]
    4188:	mov	x26, #0x1                   	// #1
    418c:	movk	x26, #0x4000, lsl #48
    4190:	adrp	x25, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7a70>
    4194:	add	x27, x25, #0x4e0
    4198:	b	41e4 <lzma_filters_copy@@XZ_5.0+0xac>
    419c:	mov	x22, #0x0                   	// #0
    41a0:	b	42a8 <lzma_filters_copy@@XZ_5.0+0x170>
    41a4:	mov	w23, #0x5                   	// #5
    41a8:	b	4220 <lzma_filters_copy@@XZ_5.0+0xe8>
    41ac:	ldp	x19, x20, [sp, #16]
    41b0:	ldp	x21, x22, [sp, #32]
    41b4:	ldp	x25, x26, [sp, #64]
    41b8:	ldp	x27, x28, [sp, #80]
    41bc:	b	425c <lzma_filters_copy@@XZ_5.0+0x124>
    41c0:	str	xzr, [x20, x23]
    41c4:	add	x24, x24, #0x1
    41c8:	add	x22, x22, #0x10
    41cc:	ldr	x2, [x19, x22]
    41d0:	cmn	x2, #0x1
    41d4:	b.eq	42a0 <lzma_filters_copy@@XZ_5.0+0x168>  // b.none
    41d8:	add	x23, x23, #0x10
    41dc:	cmp	x22, #0x40
    41e0:	b.eq	42c8 <lzma_filters_copy@@XZ_5.0+0x190>  // b.none
    41e4:	str	x2, [x20, x22]
    41e8:	ldr	x0, [x19, x23]
    41ec:	cbz	x0, 41c0 <lzma_filters_copy@@XZ_5.0+0x88>
    41f0:	cmp	x2, x26
    41f4:	b.eq	426c <lzma_filters_copy@@XZ_5.0+0x134>  // b.none
    41f8:	add	x3, x25, #0x4e0
    41fc:	mov	x1, #0x0                   	// #0
    4200:	add	x1, x1, #0x1
    4204:	ldr	x0, [x3, #24]
    4208:	cmp	x0, x2
    420c:	b.eq	4270 <lzma_filters_copy@@XZ_5.0+0x138>  // b.none
    4210:	add	x3, x3, #0x18
    4214:	cmn	x0, #0x1
    4218:	b.ne	4200 <lzma_filters_copy@@XZ_5.0+0xc8>  // b.any
    421c:	mov	w23, #0x8                   	// #8
    4220:	sub	x19, x24, #0x1
    4224:	cbz	x24, 41ac <lzma_filters_copy@@XZ_5.0+0x74>
    4228:	add	x19, x20, x19, lsl #4
    422c:	mov	x22, x20
    4230:	mov	x1, x21
    4234:	ldr	x0, [x19, #8]
    4238:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    423c:	str	xzr, [x19, #8]
    4240:	cmp	x19, x22
    4244:	sub	x19, x19, #0x10
    4248:	b.ne	4230 <lzma_filters_copy@@XZ_5.0+0xf8>  // b.any
    424c:	ldp	x19, x20, [sp, #16]
    4250:	ldp	x21, x22, [sp, #32]
    4254:	ldp	x25, x26, [sp, #64]
    4258:	ldp	x27, x28, [sp, #80]
    425c:	mov	w0, w23
    4260:	ldp	x23, x24, [sp, #48]
    4264:	ldp	x29, x30, [sp], #96
    4268:	ret
    426c:	mov	x1, #0x0                   	// #0
    4270:	add	x1, x1, x1, lsl #1
    4274:	add	x1, x27, x1, lsl #3
    4278:	ldr	x28, [x1, #8]
    427c:	mov	x1, x21
    4280:	mov	x0, x28
    4284:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    4288:	str	x0, [x20, x23]
    428c:	cbz	x0, 41a4 <lzma_filters_copy@@XZ_5.0+0x6c>
    4290:	mov	x2, x28
    4294:	ldr	x1, [x19, x23]
    4298:	bl	3090 <memcpy@plt>
    429c:	b	41c4 <lzma_filters_copy@@XZ_5.0+0x8c>
    42a0:	ldp	x25, x26, [sp, #64]
    42a4:	ldp	x27, x28, [sp, #80]
    42a8:	add	x0, x20, x22
    42ac:	mov	x1, #0xffffffffffffffff    	// #-1
    42b0:	str	x1, [x20, x22]
    42b4:	str	xzr, [x0, #8]
    42b8:	mov	w23, #0x0                   	// #0
    42bc:	ldp	x19, x20, [sp, #16]
    42c0:	ldp	x21, x22, [sp, #32]
    42c4:	b	425c <lzma_filters_copy@@XZ_5.0+0x124>
    42c8:	mov	w23, #0x8                   	// #8
    42cc:	mov	x19, #0x3                   	// #3
    42d0:	b	4228 <lzma_filters_copy@@XZ_5.0+0xf0>
    42d4:	stp	x29, x30, [sp, #-224]!
    42d8:	mov	x29, sp
    42dc:	stp	x19, x20, [sp, #16]
    42e0:	stp	x21, x22, [sp, #32]
    42e4:	stp	x23, x24, [sp, #48]
    42e8:	mov	x23, x0
    42ec:	mov	x24, x1
    42f0:	mov	x19, x2
    42f4:	mov	x22, x3
    42f8:	and	w21, w4, #0xff
    42fc:	add	x1, sp, #0xd8
    4300:	mov	x0, x2
    4304:	bl	4048 <lzma_block_total_size@@XZ_5.0+0x74>
    4308:	mov	w20, w0
    430c:	cbnz	w0, 4428 <lzma_filters_copy@@XZ_5.0+0x2f0>
    4310:	cbnz	w21, 4374 <lzma_filters_copy@@XZ_5.0+0x23c>
    4314:	ldr	x0, [sp, #216]
    4318:	cbz	x0, 43f4 <lzma_filters_copy@@XZ_5.0+0x2bc>
    431c:	stp	x25, x26, [sp, #64]
    4320:	add	x20, sp, #0x60
    4324:	mov	x21, #0x0                   	// #0
    4328:	ldr	x0, [x19]
    432c:	blr	x22
    4330:	cbz	x0, 4470 <lzma_filters_copy@@XZ_5.0+0x338>
    4334:	ldr	x1, [x0, #8]
    4338:	cbz	x1, 447c <lzma_filters_copy@@XZ_5.0+0x344>
    433c:	ldr	x1, [x19]
    4340:	str	x1, [x20]
    4344:	ldr	x0, [x0, #8]
    4348:	str	x0, [x20, #8]
    434c:	ldr	x0, [x19, #8]
    4350:	str	x0, [x20, #16]
    4354:	add	x21, x21, #0x1
    4358:	add	x19, x19, #0x10
    435c:	add	x20, x20, #0x18
    4360:	ldr	x0, [sp, #216]
    4364:	cmp	x0, x21
    4368:	b.hi	4328 <lzma_filters_copy@@XZ_5.0+0x1f0>  // b.pmore
    436c:	ldp	x25, x26, [sp, #64]
    4370:	b	43f4 <lzma_filters_copy@@XZ_5.0+0x2bc>
    4374:	ldr	x20, [sp, #216]
    4378:	cbz	x20, 43f4 <lzma_filters_copy@@XZ_5.0+0x2bc>
    437c:	stp	x25, x26, [sp, #64]
    4380:	stp	x27, x28, [sp, #80]
    4384:	mov	x21, #0x0                   	// #0
    4388:	add	x27, sp, #0x60
    438c:	add	x26, sp, #0x68
    4390:	add	x25, sp, #0x70
    4394:	mvn	x0, x21
    4398:	add	x20, x0, x20
    439c:	ldr	x0, [x19]
    43a0:	blr	x22
    43a4:	cbz	x0, 4450 <lzma_filters_copy@@XZ_5.0+0x318>
    43a8:	ldr	x1, [x0, #8]
    43ac:	cbz	x1, 4460 <lzma_filters_copy@@XZ_5.0+0x328>
    43b0:	lsl	x1, x20, #1
    43b4:	add	x2, x1, x20
    43b8:	ldr	x3, [x19]
    43bc:	str	x3, [x27, x2, lsl #3]
    43c0:	ldr	x2, [x0, #8]
    43c4:	add	x0, x1, x20
    43c8:	str	x2, [x26, x0, lsl #3]
    43cc:	mov	x20, x0
    43d0:	ldr	x0, [x19, #8]
    43d4:	str	x0, [x25, x20, lsl #3]
    43d8:	add	x21, x21, #0x1
    43dc:	ldr	x20, [sp, #216]
    43e0:	add	x19, x19, #0x10
    43e4:	cmp	x20, x21
    43e8:	b.hi	4394 <lzma_filters_copy@@XZ_5.0+0x25c>  // b.pmore
    43ec:	ldp	x25, x26, [sp, #64]
    43f0:	ldp	x27, x28, [sp, #80]
    43f4:	ldr	x1, [sp, #216]
    43f8:	lsl	x0, x1, #1
    43fc:	add	x3, x0, x1
    4400:	add	x2, sp, #0x60
    4404:	mov	x4, #0xffffffffffffffff    	// #-1
    4408:	str	x4, [x2, x3, lsl #3]
    440c:	add	x1, sp, #0x68
    4410:	str	xzr, [x1, x3, lsl #3]
    4414:	mov	x1, x24
    4418:	mov	x0, x23
    441c:	bl	38d8 <lzma_version_string@@XZ_5.0+0x210>
    4420:	mov	w20, w0
    4424:	cbnz	w0, 4440 <lzma_filters_copy@@XZ_5.0+0x308>
    4428:	mov	w0, w20
    442c:	ldp	x19, x20, [sp, #16]
    4430:	ldp	x21, x22, [sp, #32]
    4434:	ldp	x23, x24, [sp, #48]
    4438:	ldp	x29, x30, [sp], #224
    443c:	ret
    4440:	mov	x1, x24
    4444:	mov	x0, x23
    4448:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    444c:	b	4428 <lzma_filters_copy@@XZ_5.0+0x2f0>
    4450:	mov	w20, #0x8                   	// #8
    4454:	ldp	x25, x26, [sp, #64]
    4458:	ldp	x27, x28, [sp, #80]
    445c:	b	4428 <lzma_filters_copy@@XZ_5.0+0x2f0>
    4460:	mov	w20, #0x8                   	// #8
    4464:	ldp	x25, x26, [sp, #64]
    4468:	ldp	x27, x28, [sp, #80]
    446c:	b	4428 <lzma_filters_copy@@XZ_5.0+0x2f0>
    4470:	mov	w20, #0x8                   	// #8
    4474:	ldp	x25, x26, [sp, #64]
    4478:	b	4428 <lzma_filters_copy@@XZ_5.0+0x2f0>
    447c:	mov	w20, #0x8                   	// #8
    4480:	ldp	x25, x26, [sp, #64]
    4484:	b	4428 <lzma_filters_copy@@XZ_5.0+0x2f0>
    4488:	stp	x29, x30, [sp, #-64]!
    448c:	mov	x29, sp
    4490:	stp	x19, x20, [sp, #16]
    4494:	stp	x21, x22, [sp, #32]
    4498:	mov	x22, x0
    449c:	mov	x19, x1
    44a0:	add	x1, sp, #0x38
    44a4:	mov	x0, x19
    44a8:	bl	4048 <lzma_block_total_size@@XZ_5.0+0x74>
    44ac:	mov	x20, #0x0                   	// #0
    44b0:	cbz	w0, 44d4 <lzma_filters_copy@@XZ_5.0+0x39c>
    44b4:	mov	x0, #0xffffffffffffffff    	// #-1
    44b8:	b	4508 <lzma_filters_copy@@XZ_5.0+0x3d0>
    44bc:	add	x20, x20, #0x400
    44c0:	b	44c8 <lzma_filters_copy@@XZ_5.0+0x390>
    44c4:	add	x20, x20, x0
    44c8:	ldr	x1, [x19, #16]!
    44cc:	cmn	x1, #0x1
    44d0:	b.eq	44fc <lzma_filters_copy@@XZ_5.0+0x3c4>  // b.none
    44d4:	ldr	x0, [x19]
    44d8:	blr	x22
    44dc:	cbz	x0, 4504 <lzma_filters_copy@@XZ_5.0+0x3cc>
    44e0:	ldr	x1, [x0, #16]
    44e4:	cbz	x1, 44bc <lzma_filters_copy@@XZ_5.0+0x384>
    44e8:	ldr	x0, [x19, #8]
    44ec:	blr	x1
    44f0:	cmn	x0, #0x1
    44f4:	b.ne	44c4 <lzma_filters_copy@@XZ_5.0+0x38c>  // b.any
    44f8:	b	4508 <lzma_filters_copy@@XZ_5.0+0x3d0>
    44fc:	add	x0, x20, #0x8, lsl #12
    4500:	b	4508 <lzma_filters_copy@@XZ_5.0+0x3d0>
    4504:	mov	x0, #0xffffffffffffffff    	// #-1
    4508:	ldp	x19, x20, [sp, #16]
    450c:	ldp	x21, x22, [sp, #32]
    4510:	ldp	x29, x30, [sp], #64
    4514:	ret

0000000000004518 <lzma_physmem@@XZ_5.0>:
    4518:	stp	x29, x30, [sp, #-16]!
    451c:	mov	x29, sp
    4520:	bl	3644 <pthread_cond_timedwait@plt+0xe4>
    4524:	ldp	x29, x30, [sp], #16
    4528:	ret
    452c:	stp	x29, x30, [sp, #-48]!
    4530:	mov	x29, sp
    4534:	stp	x19, x20, [sp, #16]
    4538:	str	x21, [sp, #32]
    453c:	mov	x19, x0
    4540:	mov	x21, x1
    4544:	mov	x20, x2
    4548:	ldr	x0, [x0, #24]
    454c:	cbz	x0, 4554 <lzma_physmem@@XZ_5.0+0x3c>
    4550:	bl	452c <lzma_physmem@@XZ_5.0+0x14>
    4554:	ldr	x0, [x19, #32]
    4558:	cbz	x0, 4568 <lzma_physmem@@XZ_5.0+0x50>
    455c:	mov	x2, x20
    4560:	mov	x1, x21
    4564:	bl	452c <lzma_physmem@@XZ_5.0+0x14>
    4568:	mov	x1, x21
    456c:	mov	x0, x19
    4570:	blr	x20
    4574:	ldp	x19, x20, [sp, #16]
    4578:	ldr	x21, [sp, #32]
    457c:	ldp	x29, x30, [sp], #48
    4580:	ret
    4584:	ldr	x1, [x0, #32]
    4588:	cbz	x1, 459c <lzma_physmem@@XZ_5.0+0x84>
    458c:	mov	x0, x1
    4590:	ldr	x1, [x1, #24]
    4594:	cbnz	x1, 458c <lzma_physmem@@XZ_5.0+0x74>
    4598:	ret
    459c:	mov	x1, x0
    45a0:	ldr	x0, [x0, #16]
    45a4:	cbz	x0, 4598 <lzma_physmem@@XZ_5.0+0x80>
    45a8:	ldr	x2, [x0, #32]
    45ac:	cmp	x2, x1
    45b0:	b.eq	459c <lzma_physmem@@XZ_5.0+0x84>  // b.none
    45b4:	b	4598 <lzma_physmem@@XZ_5.0+0x80>
    45b8:	stp	x29, x30, [sp, #-32]!
    45bc:	mov	x29, sp
    45c0:	stp	x19, x20, [sp, #16]
    45c4:	mov	x19, x0
    45c8:	mov	x20, x1
    45cc:	ldr	x0, [x0, #56]
    45d0:	cbz	x0, 45e0 <lzma_physmem@@XZ_5.0+0xc8>
    45d4:	adrp	x2, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    45d8:	ldr	x2, [x2, #3992]
    45dc:	bl	452c <lzma_physmem@@XZ_5.0+0x14>
    45e0:	mov	x1, x20
    45e4:	mov	x0, x19
    45e8:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    45ec:	ldp	x19, x20, [sp, #16]
    45f0:	ldp	x29, x30, [sp], #32
    45f4:	ret
    45f8:	stp	x29, x30, [sp, #-16]!
    45fc:	mov	x29, sp
    4600:	mov	x1, x0
    4604:	mov	x0, #0x50                  	// #80
    4608:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    460c:	cbz	x0, 463c <lzma_physmem@@XZ_5.0+0x124>
    4610:	str	xzr, [x0]
    4614:	str	xzr, [x0, #8]
    4618:	str	xzr, [x0, #16]
    461c:	str	wzr, [x0, #24]
    4620:	str	xzr, [x0, #32]
    4624:	str	xzr, [x0, #40]
    4628:	str	xzr, [x0, #48]
    462c:	str	xzr, [x0, #56]
    4630:	mov	x1, #0x200                 	// #512
    4634:	str	x1, [x0, #64]
    4638:	str	wzr, [x0, #72]
    463c:	ldp	x29, x30, [sp], #16
    4640:	ret
    4644:	ldr	x2, [x0, #16]
    4648:	str	x2, [x1, #16]
    464c:	str	xzr, [x1, #24]
    4650:	str	xzr, [x1, #32]
    4654:	ldr	w2, [x0, #24]
    4658:	add	w2, w2, #0x1
    465c:	str	w2, [x0, #24]
    4660:	ldr	x2, [x0]
    4664:	cbz	x2, 46dc <lzma_physmem@@XZ_5.0+0x1c4>
    4668:	ldr	x2, [x0, #16]
    466c:	str	x1, [x2, #32]
    4670:	str	x1, [x0, #16]
    4674:	ldr	w2, [x0, #24]
    4678:	clz	w3, w2
    467c:	eor	w4, w3, #0x1f
    4680:	mov	w3, #0x1                   	// #1
    4684:	lsl	w3, w3, w4
    4688:	cmp	w2, w3
    468c:	b.eq	46d8 <lzma_physmem@@XZ_5.0+0x1c0>  // b.none
    4690:	rbit	w2, w2
    4694:	clz	w2, w2
    4698:	add	w2, w2, #0x2
    469c:	ldr	x1, [x1, #16]
    46a0:	subs	w2, w2, #0x1
    46a4:	b.ne	469c <lzma_physmem@@XZ_5.0+0x184>  // b.any
    46a8:	ldr	x2, [x1, #32]
    46ac:	ldr	x3, [x1, #16]
    46b0:	cbz	x3, 46ec <lzma_physmem@@XZ_5.0+0x1d4>
    46b4:	str	x2, [x3, #32]
    46b8:	ldr	x0, [x1, #16]
    46bc:	str	x0, [x2, #16]
    46c0:	ldr	x0, [x2, #24]
    46c4:	str	x0, [x1, #32]
    46c8:	cbz	x0, 46d0 <lzma_physmem@@XZ_5.0+0x1b8>
    46cc:	str	x1, [x0, #16]
    46d0:	str	x1, [x2, #24]
    46d4:	str	x2, [x1, #16]
    46d8:	ret
    46dc:	str	x1, [x0]
    46e0:	str	x1, [x0, #8]
    46e4:	str	x1, [x0, #16]
    46e8:	b	46d8 <lzma_physmem@@XZ_5.0+0x1c0>
    46ec:	str	x2, [x0]
    46f0:	b	46b8 <lzma_physmem@@XZ_5.0+0x1a0>
    46f4:	stp	x29, x30, [sp, #-48]!
    46f8:	mov	x29, sp
    46fc:	stp	x19, x20, [sp, #16]
    4700:	str	x21, [sp, #32]
    4704:	mov	x20, x0
    4708:	mov	x19, x1
    470c:	ldr	x1, [x1, #24]
    4710:	ldr	x21, [x19, #32]
    4714:	cbz	x1, 471c <lzma_physmem@@XZ_5.0+0x204>
    4718:	bl	46f4 <lzma_physmem@@XZ_5.0+0x1dc>
    471c:	ldr	x0, [x19]
    4720:	ldr	x1, [x20]
    4724:	add	x0, x0, x1
    4728:	str	x0, [x19]
    472c:	ldr	x0, [x19, #8]
    4730:	ldr	x1, [x20, #8]
    4734:	add	x0, x0, x1
    4738:	str	x0, [x19, #8]
    473c:	ldr	w0, [x19, #40]
    4740:	ldr	w1, [x20, #24]
    4744:	add	w0, w0, w1
    4748:	str	w0, [x19, #40]
    474c:	ldr	x0, [x19, #48]
    4750:	ldr	x1, [x20, #16]
    4754:	add	x0, x0, x1
    4758:	str	x0, [x19, #48]
    475c:	mov	x1, x19
    4760:	ldr	x0, [x20, #32]
    4764:	bl	4644 <lzma_physmem@@XZ_5.0+0x12c>
    4768:	cbz	x21, 4778 <lzma_physmem@@XZ_5.0+0x260>
    476c:	mov	x1, x21
    4770:	mov	x0, x20
    4774:	bl	46f4 <lzma_physmem@@XZ_5.0+0x1dc>
    4778:	ldp	x19, x20, [sp, #16]
    477c:	ldr	x21, [sp, #32]
    4780:	ldp	x29, x30, [sp], #48
    4784:	ret
    4788:	stp	x29, x30, [sp, #-80]!
    478c:	mov	x29, sp
    4790:	stp	x19, x20, [sp, #16]
    4794:	stp	x21, x22, [sp, #32]
    4798:	stp	x23, x24, [sp, #48]
    479c:	str	x25, [sp, #64]
    47a0:	mov	x19, x0
    47a4:	ldr	x20, [x0, #264]
    47a8:	ldr	x21, [x0, #272]
    47ac:	ldr	x22, [x0, #280]
    47b0:	cbz	x21, 48e0 <lzma_physmem@@XZ_5.0+0x3c8>
    47b4:	ldr	x0, [x0, #256]
    47b8:	ldr	x0, [x0, #16]
    47bc:	cmp	x0, x20
    47c0:	b.eq	48ec <lzma_physmem@@XZ_5.0+0x3d4>  // b.none
    47c4:	str	xzr, [x19, #288]
    47c8:	ldr	w0, [x20, #40]
    47cc:	str	x0, [x19, #32]
    47d0:	ldr	x0, [x20, #88]
    47d4:	str	x0, [x19, #40]
    47d8:	ldr	x25, [x20, #8]
    47dc:	str	x25, [x19, #48]
    47e0:	ldr	x24, [x20]
    47e4:	str	x24, [x19, #56]
    47e8:	mov	x0, x20
    47ec:	ldr	w1, [x0, #104]!
    47f0:	cmn	w1, #0x1
    47f4:	csel	x0, x0, xzr, ne  // ne = any
    47f8:	str	x0, [x19]
    47fc:	ldr	x0, [x20, #160]
    4800:	str	x0, [x19, #80]
    4804:	ldr	x23, [x20, #72]
    4808:	cbz	x23, 4928 <lzma_physmem@@XZ_5.0+0x410>
    480c:	ldr	x0, [x20, #88]
    4810:	bl	3480 <lzma_vli_size@plt>
    4814:	ldr	x1, [x20, #96]
    4818:	add	x1, x1, #0x7
    481c:	add	w0, w0, #0x1
    4820:	add	x1, x1, x0
    4824:	and	x1, x1, #0xfffffffffffffffc
    4828:	ldr	x0, [x23, #56]
    482c:	add	x0, x23, x0, lsl #4
    4830:	ldr	x0, [x0, #72]
    4834:	add	x0, x0, #0x3
    4838:	and	x0, x0, #0xfffffffffffffffc
    483c:	add	x0, x0, #0x18
    4840:	add	x1, x1, x0
    4844:	str	x1, [x19, #64]
    4848:	ldr	x0, [x23, #56]
    484c:	add	x23, x23, x0, lsl #4
    4850:	ldr	x0, [x23, #64]
    4854:	str	x0, [x19, #72]
    4858:	cbz	x21, 48c8 <lzma_physmem@@XZ_5.0+0x3b0>
    485c:	ldr	x0, [x21, #40]
    4860:	add	x0, x22, x0
    4864:	str	x0, [x19, #144]
    4868:	ldr	x1, [x20, #48]
    486c:	add	x0, x1, x0
    4870:	str	x0, [x19, #120]
    4874:	cbnz	x22, 494c <lzma_physmem@@XZ_5.0+0x434>
    4878:	ldr	x0, [x21, #8]
    487c:	str	x0, [x19, #152]
    4880:	ldr	x2, [x21]
    4884:	str	x2, [x19, #160]
    4888:	add	x21, x21, x22, lsl #4
    488c:	ldr	x1, [x21, #64]
    4890:	sub	x1, x1, x2
    4894:	str	x1, [x19, #168]
    4898:	ldr	x1, [x21, #72]
    489c:	sub	x1, x1, x0
    48a0:	str	x1, [x19, #176]
    48a4:	add	x1, x1, #0x3
    48a8:	and	x1, x1, #0xfffffffffffffffc
    48ac:	str	x1, [x19, #184]
    48b0:	add	x0, x0, #0xc
    48b4:	str	x0, [x19, #152]
    48b8:	add	x0, x25, x0
    48bc:	str	x0, [x19, #128]
    48c0:	add	x24, x24, x2
    48c4:	str	x24, [x19, #136]
    48c8:	ldp	x19, x20, [sp, #16]
    48cc:	ldp	x21, x22, [sp, #32]
    48d0:	ldp	x23, x24, [sp, #48]
    48d4:	ldr	x25, [sp, #64]
    48d8:	ldp	x29, x30, [sp], #80
    48dc:	ret
    48e0:	mov	x0, #0x2                   	// #2
    48e4:	str	x0, [x19, #288]
    48e8:	b	47c8 <lzma_physmem@@XZ_5.0+0x2b0>
    48ec:	ldr	x0, [x20, #72]
    48f0:	cmp	x0, x21
    48f4:	b.ne	47c4 <lzma_physmem@@XZ_5.0+0x2ac>  // b.any
    48f8:	ldr	x0, [x20, #64]
    48fc:	cmp	x21, x0
    4900:	b.eq	4918 <lzma_physmem@@XZ_5.0+0x400>  // b.none
    4904:	mov	x0, #0x1                   	// #1
    4908:	str	x0, [x19, #288]
    490c:	ldr	x0, [x21, #16]
    4910:	str	x0, [x19, #272]
    4914:	b	47c8 <lzma_physmem@@XZ_5.0+0x2b0>
    4918:	mov	x0, #0x2                   	// #2
    491c:	str	x0, [x19, #288]
    4920:	str	xzr, [x19, #272]
    4924:	b	47c8 <lzma_physmem@@XZ_5.0+0x2b0>
    4928:	mov	x0, #0x0                   	// #0
    492c:	bl	3480 <lzma_vli_size@plt>
    4930:	add	w0, w0, #0x1
    4934:	add	x0, x0, #0x7
    4938:	and	x0, x0, #0xfffffffffffffffc
    493c:	add	x0, x0, #0x18
    4940:	str	x0, [x19, #64]
    4944:	str	xzr, [x19, #72]
    4948:	b	4858 <lzma_physmem@@XZ_5.0+0x340>
    494c:	add	x1, x21, x22, lsl #4
    4950:	ldr	x0, [x1, #56]
    4954:	add	x0, x0, #0x3
    4958:	and	x0, x0, #0xfffffffffffffffc
    495c:	str	x0, [x19, #152]
    4960:	ldr	x2, [x1, #48]
    4964:	b	4884 <lzma_physmem@@XZ_5.0+0x36c>
    4968:	stp	x29, x30, [sp, #-48]!
    496c:	mov	x29, sp
    4970:	stp	x19, x20, [sp, #16]
    4974:	stp	x21, x22, [sp, #32]
    4978:	mov	x21, x0
    497c:	mov	x22, x1
    4980:	mov	w20, w2
    4984:	mov	x19, x3
    4988:	mov	x1, x4
    498c:	mov	x0, #0xa8                  	// #168
    4990:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    4994:	cbz	x0, 49d8 <lzma_physmem@@XZ_5.0+0x4c0>
    4998:	str	x22, [x0]
    499c:	str	x21, [x0, #8]
    49a0:	str	xzr, [x0, #16]
    49a4:	str	xzr, [x0, #24]
    49a8:	str	xzr, [x0, #32]
    49ac:	str	w20, [x0, #40]
    49b0:	str	x19, [x0, #48]
    49b4:	str	xzr, [x0, #56]
    49b8:	str	xzr, [x0, #64]
    49bc:	str	xzr, [x0, #72]
    49c0:	str	wzr, [x0, #80]
    49c4:	str	xzr, [x0, #88]
    49c8:	str	xzr, [x0, #96]
    49cc:	mov	w1, #0xffffffff            	// #-1
    49d0:	str	w1, [x0, #104]
    49d4:	str	xzr, [x0, #160]
    49d8:	ldp	x19, x20, [sp, #16]
    49dc:	ldp	x21, x22, [sp, #32]
    49e0:	ldp	x29, x30, [sp], #48
    49e4:	ret

00000000000049e8 <lzma_index_init@@XZ_5.0>:
    49e8:	stp	x29, x30, [sp, #-48]!
    49ec:	mov	x29, sp
    49f0:	stp	x19, x20, [sp, #16]
    49f4:	str	x21, [sp, #32]
    49f8:	mov	x21, x0
    49fc:	bl	45f8 <lzma_physmem@@XZ_5.0+0xe0>
    4a00:	mov	x19, x0
    4a04:	cbz	x0, 4a34 <lzma_index_init@@XZ_5.0+0x4c>
    4a08:	mov	x4, x21
    4a0c:	mov	x3, #0x0                   	// #0
    4a10:	mov	w2, #0x1                   	// #1
    4a14:	mov	x1, #0x0                   	// #0
    4a18:	mov	x0, #0x0                   	// #0
    4a1c:	bl	4968 <lzma_physmem@@XZ_5.0+0x450>
    4a20:	mov	x20, x0
    4a24:	cbz	x0, 4a48 <lzma_index_init@@XZ_5.0+0x60>
    4a28:	mov	x1, x0
    4a2c:	mov	x0, x19
    4a30:	bl	4644 <lzma_physmem@@XZ_5.0+0x12c>
    4a34:	mov	x0, x19
    4a38:	ldp	x19, x20, [sp, #16]
    4a3c:	ldr	x21, [sp, #32]
    4a40:	ldp	x29, x30, [sp], #48
    4a44:	ret
    4a48:	mov	x1, x21
    4a4c:	mov	x0, x19
    4a50:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    4a54:	mov	x19, x20
    4a58:	b	4a34 <lzma_index_init@@XZ_5.0+0x4c>

0000000000004a5c <lzma_index_end@@XZ_5.0>:
    4a5c:	cbz	x0, 4aa0 <lzma_index_end@@XZ_5.0+0x44>
    4a60:	stp	x29, x30, [sp, #-32]!
    4a64:	mov	x29, sp
    4a68:	stp	x19, x20, [sp, #16]
    4a6c:	mov	x19, x0
    4a70:	mov	x20, x1
    4a74:	ldr	x0, [x0]
    4a78:	cbz	x0, 4a88 <lzma_index_end@@XZ_5.0+0x2c>
    4a7c:	adrp	x2, 4000 <lzma_block_total_size@@XZ_5.0+0x2c>
    4a80:	add	x2, x2, #0x5b8
    4a84:	bl	452c <lzma_physmem@@XZ_5.0+0x14>
    4a88:	mov	x1, x20
    4a8c:	mov	x0, x19
    4a90:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    4a94:	ldp	x19, x20, [sp, #16]
    4a98:	ldp	x29, x30, [sp], #32
    4a9c:	ret
    4aa0:	ret
    4aa4:	mov	x2, #0xffffffffffffffc     	// #1152921504606846972
    4aa8:	cmp	x1, x2
    4aac:	mov	x2, #0xfffffffffffffffb    	// #-5
    4ab0:	movk	x2, #0xfff, lsl #48
    4ab4:	csel	x1, x1, x2, cc  // cc = lo, ul, last
    4ab8:	str	x1, [x0, #64]
    4abc:	ret

0000000000004ac0 <lzma_index_memusage@@XZ_5.0>:
    4ac0:	mov	x3, x0
    4ac4:	sub	x2, x0, #0x1
    4ac8:	mov	x0, #0xfffffffe            	// #4294967294
    4acc:	cmp	x2, x0
    4ad0:	b.hi	4b30 <lzma_index_memusage@@XZ_5.0+0x70>  // b.pmore
    4ad4:	mov	x0, #0xffffffffffffffff    	// #-1
    4ad8:	mov	x2, #0x800                 	// #2048
    4adc:	movk	x2, #0xfd, lsl #16
    4ae0:	movk	x2, #0x8e55, lsl #32
    4ae4:	movk	x2, #0xfd0, lsl #48
    4ae8:	cmp	x1, x2
    4aec:	b.hi	4b2c <lzma_index_memusage@@XZ_5.0+0x6c>  // b.pmore
    4af0:	add	x2, x3, x3, lsl #3
    4af4:	add	x0, x3, x2, lsl #2
    4af8:	lsl	x0, x0, #3
    4afc:	add	x1, x1, #0x1ff
    4b00:	lsr	x1, x1, #9
    4b04:	add	x2, x1, x1, lsl #6
    4b08:	lsl	x2, x2, #2
    4b0c:	sub	x1, x2, x1
    4b10:	lsl	x1, x1, #5
    4b14:	mov	x2, #0xffffffffffffff8f    	// #-113
    4b18:	sub	x2, x2, x0
    4b1c:	add	x0, x0, #0x70
    4b20:	add	x0, x0, x1
    4b24:	cmp	x2, x1
    4b28:	csinv	x0, x0, xzr, cs  // cs = hs, nlast
    4b2c:	ret
    4b30:	mov	x0, #0xffffffffffffffff    	// #-1
    4b34:	b	4b2c <lzma_index_memusage@@XZ_5.0+0x6c>

0000000000004b38 <lzma_index_memused@@XZ_5.0>:
    4b38:	stp	x29, x30, [sp, #-16]!
    4b3c:	mov	x29, sp
    4b40:	ldr	x1, [x0, #48]
    4b44:	ldr	w0, [x0, #24]
    4b48:	bl	3180 <lzma_index_memusage@plt>
    4b4c:	ldp	x29, x30, [sp], #16
    4b50:	ret

0000000000004b54 <lzma_index_block_count@@XZ_5.0>:
    4b54:	ldr	x0, [x0, #48]
    4b58:	ret

0000000000004b5c <lzma_index_stream_count@@XZ_5.0>:
    4b5c:	ldr	w0, [x0, #24]
    4b60:	ret

0000000000004b64 <lzma_index_size@@XZ_5.0>:
    4b64:	stp	x29, x30, [sp, #-32]!
    4b68:	mov	x29, sp
    4b6c:	str	x19, [sp, #16]
    4b70:	mov	x19, x0
    4b74:	ldr	x0, [x0, #48]
    4b78:	bl	3480 <lzma_vli_size@plt>
    4b7c:	ldr	x1, [x19, #56]
    4b80:	add	x1, x1, #0x7
    4b84:	add	w0, w0, #0x1
    4b88:	add	x0, x1, x0
    4b8c:	and	x0, x0, #0xfffffffffffffffc
    4b90:	ldr	x19, [sp, #16]
    4b94:	ldp	x29, x30, [sp], #32
    4b98:	ret

0000000000004b9c <lzma_index_total_size@@XZ_5.0>:
    4b9c:	ldr	x0, [x0, #40]
    4ba0:	ret

0000000000004ba4 <lzma_index_stream_size@@XZ_5.0>:
    4ba4:	stp	x29, x30, [sp, #-32]!
    4ba8:	mov	x29, sp
    4bac:	str	x19, [sp, #16]
    4bb0:	mov	x19, x0
    4bb4:	ldr	x0, [x0, #48]
    4bb8:	bl	3480 <lzma_vli_size@plt>
    4bbc:	ldr	x1, [x19, #56]
    4bc0:	add	x1, x1, #0x7
    4bc4:	add	w0, w0, #0x1
    4bc8:	add	x1, x1, x0
    4bcc:	and	x1, x1, #0xfffffffffffffffc
    4bd0:	ldr	x0, [x19, #40]
    4bd4:	add	x0, x0, #0x18
    4bd8:	add	x0, x1, x0
    4bdc:	ldr	x19, [sp, #16]
    4be0:	ldp	x29, x30, [sp], #32
    4be4:	ret

0000000000004be8 <lzma_index_file_size@@XZ_5.0>:
    4be8:	stp	x29, x30, [sp, #-32]!
    4bec:	mov	x29, sp
    4bf0:	stp	x19, x20, [sp, #16]
    4bf4:	ldr	x2, [x0, #16]
    4bf8:	ldr	x0, [x2, #72]
    4bfc:	ldr	x19, [x2, #8]
    4c00:	mov	x1, #0x0                   	// #0
    4c04:	cbz	x0, 4c14 <lzma_index_file_size@@XZ_5.0+0x2c>
    4c08:	ldr	x1, [x0, #56]
    4c0c:	add	x0, x0, x1, lsl #4
    4c10:	ldr	x1, [x0, #72]
    4c14:	ldr	x0, [x2, #88]
    4c18:	ldr	x20, [x2, #96]
    4c1c:	add	x1, x1, #0x3
    4c20:	and	x1, x1, #0xfffffffffffffffc
    4c24:	add	x1, x1, #0x18
    4c28:	ldr	x2, [x2, #160]
    4c2c:	add	x19, x19, x2
    4c30:	adds	x19, x1, x19
    4c34:	b.mi	4c60 <lzma_index_file_size@@XZ_5.0+0x78>  // b.first
    4c38:	bl	3480 <lzma_vli_size@plt>
    4c3c:	add	w0, w0, #0x1
    4c40:	add	x20, x20, #0x7
    4c44:	add	x0, x0, x20
    4c48:	and	x0, x0, #0xfffffffffffffffc
    4c4c:	adds	x0, x0, x19
    4c50:	csinv	x0, x0, xzr, pl  // pl = nfrst
    4c54:	ldp	x19, x20, [sp, #16]
    4c58:	ldp	x29, x30, [sp], #32
    4c5c:	ret
    4c60:	mov	x0, #0xffffffffffffffff    	// #-1
    4c64:	b	4c54 <lzma_index_file_size@@XZ_5.0+0x6c>

0000000000004c68 <lzma_index_uncompressed_size@@XZ_5.0>:
    4c68:	ldr	x0, [x0, #32]
    4c6c:	ret

0000000000004c70 <lzma_index_checks@@XZ_5.0>:
    4c70:	mov	x1, x0
    4c74:	ldr	w0, [x0, #72]
    4c78:	ldr	x1, [x1, #16]
    4c7c:	ldr	w2, [x1, #104]
    4c80:	cmn	w2, #0x1
    4c84:	b.eq	4c98 <lzma_index_checks@@XZ_5.0+0x28>  // b.none
    4c88:	ldr	w2, [x1, #120]
    4c8c:	mov	w1, #0x1                   	// #1
    4c90:	lsl	w1, w1, w2
    4c94:	orr	w0, w0, w1
    4c98:	ret
    4c9c:	stp	x29, x30, [sp, #-32]!
    4ca0:	mov	x29, sp
    4ca4:	str	x19, [sp, #16]
    4ca8:	mov	x19, x0
    4cac:	ldr	x0, [x0, #48]
    4cb0:	bl	3480 <lzma_vli_size@plt>
    4cb4:	ldr	x1, [x19, #56]
    4cb8:	mvn	w0, w0
    4cbc:	sub	w0, w0, w1
    4cc0:	and	w0, w0, #0x3
    4cc4:	ldr	x19, [sp, #16]
    4cc8:	ldp	x29, x30, [sp], #32
    4ccc:	ret

0000000000004cd0 <lzma_index_stream_flags@@XZ_5.0>:
    4cd0:	cmp	x0, #0x0
    4cd4:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    4cd8:	b.eq	4d30 <lzma_index_stream_flags@@XZ_5.0+0x60>  // b.none
    4cdc:	stp	x29, x30, [sp, #-32]!
    4ce0:	mov	x29, sp
    4ce4:	stp	x19, x20, [sp, #16]
    4ce8:	mov	x20, x0
    4cec:	mov	x19, x1
    4cf0:	mov	x0, x1
    4cf4:	bl	3110 <lzma_stream_flags_compare@plt>
    4cf8:	cbnz	w0, 4d24 <lzma_index_stream_flags@@XZ_5.0+0x54>
    4cfc:	ldr	x2, [x20, #16]
    4d00:	add	x1, x2, #0x68
    4d04:	ldp	x4, x5, [x19]
    4d08:	stp	x4, x5, [x2, #104]
    4d0c:	ldp	x2, x3, [x19, #16]
    4d10:	stp	x2, x3, [x1, #16]
    4d14:	ldp	x2, x3, [x19, #32]
    4d18:	stp	x2, x3, [x1, #32]
    4d1c:	ldr	x2, [x19, #48]
    4d20:	str	x2, [x1, #48]
    4d24:	ldp	x19, x20, [sp, #16]
    4d28:	ldp	x29, x30, [sp], #32
    4d2c:	ret
    4d30:	mov	w0, #0xb                   	// #11
    4d34:	ret

0000000000004d38 <lzma_index_stream_padding@@XZ_5.0>:
    4d38:	cmp	x0, #0x0
    4d3c:	ccmp	x1, #0x0, #0x1, ne  // ne = any
    4d40:	b.lt	4dac <lzma_index_stream_padding@@XZ_5.0+0x74>  // b.tstop
    4d44:	stp	x29, x30, [sp, #-48]!
    4d48:	mov	x29, sp
    4d4c:	stp	x19, x20, [sp, #16]
    4d50:	mov	x2, x0
    4d54:	mov	x19, x1
    4d58:	mov	w0, #0xb                   	// #11
    4d5c:	tst	x1, #0x3
    4d60:	b.ne	4d90 <lzma_index_stream_padding@@XZ_5.0+0x58>  // b.any
    4d64:	str	x21, [sp, #32]
    4d68:	ldr	x20, [x2, #16]
    4d6c:	ldr	x21, [x20, #160]
    4d70:	str	xzr, [x20, #160]
    4d74:	mov	x0, x2
    4d78:	bl	3360 <lzma_index_file_size@plt>
    4d7c:	cmn	x0, x19
    4d80:	b.mi	4d9c <lzma_index_stream_padding@@XZ_5.0+0x64>  // b.first
    4d84:	str	x19, [x20, #160]
    4d88:	mov	w0, #0x0                   	// #0
    4d8c:	ldr	x21, [sp, #32]
    4d90:	ldp	x19, x20, [sp, #16]
    4d94:	ldp	x29, x30, [sp], #48
    4d98:	ret
    4d9c:	str	x21, [x20, #160]
    4da0:	mov	w0, #0x9                   	// #9
    4da4:	ldr	x21, [sp, #32]
    4da8:	b	4d90 <lzma_index_stream_padding@@XZ_5.0+0x58>
    4dac:	mov	w0, #0xb                   	// #11
    4db0:	ret

0000000000004db4 <lzma_index_append@@XZ_5.0>:
    4db4:	stp	x29, x30, [sp, #-112]!
    4db8:	mov	x29, sp
    4dbc:	stp	x19, x20, [sp, #16]
    4dc0:	mov	x19, x0
    4dc4:	str	x1, [sp, #96]
    4dc8:	sub	x1, x2, #0x5
    4dcc:	cmp	x0, #0x0
    4dd0:	mov	x0, #0xfffffffffffffff7    	// #-9
    4dd4:	movk	x0, #0x7fff, lsl #48
    4dd8:	ccmp	x1, x0, #0x2, ne  // ne = any
    4ddc:	mov	w0, #0xb                   	// #11
    4de0:	b.hi	4fcc <lzma_index_append@@XZ_5.0+0x218>  // b.pmore
    4de4:	stp	x23, x24, [sp, #48]
    4de8:	mov	x20, x2
    4dec:	mov	x23, x3
    4df0:	mov	w0, #0xb                   	// #11
    4df4:	tbnz	x3, #63, 5020 <lzma_index_append@@XZ_5.0+0x26c>
    4df8:	stp	x21, x22, [sp, #32]
    4dfc:	stp	x25, x26, [sp, #64]
    4e00:	stp	x27, x28, [sp, #80]
    4e04:	ldr	x22, [x19, #16]
    4e08:	ldr	x21, [x22, #72]
    4e0c:	cbz	x21, 4ef8 <lzma_index_append@@XZ_5.0+0x144>
    4e10:	ldr	x0, [x21, #56]
    4e14:	add	x0, x0, #0x4
    4e18:	lsl	x0, x0, #4
    4e1c:	add	x1, x21, x0
    4e20:	ldr	x25, [x1, #8]
    4e24:	add	x25, x25, #0x3
    4e28:	and	x25, x25, #0xfffffffffffffffc
    4e2c:	ldr	x27, [x21, x0]
    4e30:	mov	x0, x20
    4e34:	bl	3480 <lzma_vli_size@plt>
    4e38:	mov	w24, w0
    4e3c:	mov	x0, x23
    4e40:	bl	3480 <lzma_vli_size@plt>
    4e44:	add	x28, x20, x25
    4e48:	ldr	x1, [x22, #88]
    4e4c:	add	x3, x1, #0x1
    4e50:	ldr	x26, [x22, #96]
    4e54:	add	x26, x26, #0x7
    4e58:	add	w24, w24, w0
    4e5c:	ldr	x2, [x22, #8]
    4e60:	ldr	x0, [x22, #160]
    4e64:	add	x2, x2, x0
    4e68:	add	x1, x28, #0x3
    4e6c:	and	x1, x1, #0xfffffffffffffffc
    4e70:	add	x1, x1, #0x18
    4e74:	adds	x0, x2, x1
    4e78:	str	x0, [sp, #104]
    4e7c:	b.mi	4fd8 <lzma_index_append@@XZ_5.0+0x224>  // b.first
    4e80:	mov	x0, x3
    4e84:	bl	3480 <lzma_vli_size@plt>
    4e88:	add	w0, w0, #0x1
    4e8c:	add	x0, x0, x24
    4e90:	add	x26, x0, x26
    4e94:	and	x26, x26, #0xfffffffffffffffc
    4e98:	ldr	x0, [sp, #104]
    4e9c:	cmn	x26, x0
    4ea0:	b.mi	4ff0 <lzma_index_append@@XZ_5.0+0x23c>  // b.first
    4ea4:	ldr	x0, [x19, #48]
    4ea8:	add	x0, x0, #0x1
    4eac:	bl	3480 <lzma_vli_size@plt>
    4eb0:	add	w1, w0, #0x1
    4eb4:	add	x1, x1, x24
    4eb8:	ldr	x0, [x19, #56]
    4ebc:	add	x0, x0, #0x7
    4ec0:	add	x1, x1, x0
    4ec4:	and	x1, x1, #0xfffffffffffffffc
    4ec8:	mov	w0, #0x9                   	// #9
    4ecc:	mov	x2, #0x400000000           	// #17179869184
    4ed0:	cmp	x1, x2
    4ed4:	b.hi	5028 <lzma_index_append@@XZ_5.0+0x274>  // b.pmore
    4ed8:	cbz	x21, 4f04 <lzma_index_append@@XZ_5.0+0x150>
    4edc:	ldr	x0, [x21, #56]
    4ee0:	add	x0, x0, #0x1
    4ee4:	ldr	x1, [x21, #48]
    4ee8:	cmp	x0, x1
    4eec:	b.cs	4f04 <lzma_index_append@@XZ_5.0+0x150>  // b.hs, b.nlast
    4ef0:	str	x0, [x21, #56]
    4ef4:	b	4f54 <lzma_index_append@@XZ_5.0+0x1a0>
    4ef8:	mov	x25, #0x0                   	// #0
    4efc:	mov	x27, #0x0                   	// #0
    4f00:	b	4e30 <lzma_index_append@@XZ_5.0+0x7c>
    4f04:	ldr	x0, [x19, #64]
    4f08:	add	x0, x0, #0x4
    4f0c:	ldr	x1, [sp, #96]
    4f10:	lsl	x0, x0, #4
    4f14:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    4f18:	mov	x21, x0
    4f1c:	cbz	x0, 5008 <lzma_index_append@@XZ_5.0+0x254>
    4f20:	str	xzr, [x0, #56]
    4f24:	ldr	x0, [x19, #64]
    4f28:	str	x0, [x21, #48]
    4f2c:	mov	x0, #0x200                 	// #512
    4f30:	str	x0, [x19, #64]
    4f34:	str	x27, [x21]
    4f38:	str	x25, [x21, #8]
    4f3c:	ldr	x0, [x22, #88]
    4f40:	add	x0, x0, #0x1
    4f44:	str	x0, [x21, #40]
    4f48:	mov	x1, x21
    4f4c:	add	x0, x22, #0x38
    4f50:	bl	4644 <lzma_physmem@@XZ_5.0+0x12c>
    4f54:	ldr	x0, [x21, #56]
    4f58:	add	x21, x21, x0, lsl #4
    4f5c:	add	x27, x27, x23
    4f60:	str	x27, [x21, #64]
    4f64:	str	x28, [x21, #72]
    4f68:	ldr	x0, [x22, #88]
    4f6c:	add	x0, x0, #0x1
    4f70:	str	x0, [x22, #88]
    4f74:	ldr	x0, [x22, #96]
    4f78:	add	x0, x0, x24
    4f7c:	str	x0, [x22, #96]
    4f80:	add	x20, x20, #0x3
    4f84:	and	x20, x20, #0xfffffffffffffffc
    4f88:	ldr	x0, [x19, #40]
    4f8c:	add	x20, x0, x20
    4f90:	str	x20, [x19, #40]
    4f94:	ldr	x3, [x19, #32]
    4f98:	add	x23, x3, x23
    4f9c:	str	x23, [x19, #32]
    4fa0:	ldr	x0, [x19, #48]
    4fa4:	add	x0, x0, #0x1
    4fa8:	str	x0, [x19, #48]
    4fac:	ldr	x0, [x19, #56]
    4fb0:	add	x24, x0, x24
    4fb4:	str	x24, [x19, #56]
    4fb8:	mov	w0, #0x0                   	// #0
    4fbc:	ldp	x21, x22, [sp, #32]
    4fc0:	ldp	x23, x24, [sp, #48]
    4fc4:	ldp	x25, x26, [sp, #64]
    4fc8:	ldp	x27, x28, [sp, #80]
    4fcc:	ldp	x19, x20, [sp, #16]
    4fd0:	ldp	x29, x30, [sp], #112
    4fd4:	ret
    4fd8:	mov	w0, #0x9                   	// #9
    4fdc:	ldp	x21, x22, [sp, #32]
    4fe0:	ldp	x23, x24, [sp, #48]
    4fe4:	ldp	x25, x26, [sp, #64]
    4fe8:	ldp	x27, x28, [sp, #80]
    4fec:	b	4fcc <lzma_index_append@@XZ_5.0+0x218>
    4ff0:	mov	w0, #0x9                   	// #9
    4ff4:	ldp	x21, x22, [sp, #32]
    4ff8:	ldp	x23, x24, [sp, #48]
    4ffc:	ldp	x25, x26, [sp, #64]
    5000:	ldp	x27, x28, [sp, #80]
    5004:	b	4fcc <lzma_index_append@@XZ_5.0+0x218>
    5008:	mov	w0, #0x5                   	// #5
    500c:	ldp	x21, x22, [sp, #32]
    5010:	ldp	x23, x24, [sp, #48]
    5014:	ldp	x25, x26, [sp, #64]
    5018:	ldp	x27, x28, [sp, #80]
    501c:	b	4fcc <lzma_index_append@@XZ_5.0+0x218>
    5020:	ldp	x23, x24, [sp, #48]
    5024:	b	4fcc <lzma_index_append@@XZ_5.0+0x218>
    5028:	ldp	x21, x22, [sp, #32]
    502c:	ldp	x23, x24, [sp, #48]
    5030:	ldp	x25, x26, [sp, #64]
    5034:	ldp	x27, x28, [sp, #80]
    5038:	b	4fcc <lzma_index_append@@XZ_5.0+0x218>

000000000000503c <lzma_index_cat@@XZ_5.0>:
    503c:	stp	x29, x30, [sp, #-128]!
    5040:	mov	x29, sp
    5044:	stp	x19, x20, [sp, #16]
    5048:	stp	x21, x22, [sp, #32]
    504c:	mov	x19, x0
    5050:	mov	x20, x1
    5054:	mov	x22, x2
    5058:	bl	3360 <lzma_index_file_size@plt>
    505c:	mov	x21, x0
    5060:	mov	x0, x20
    5064:	bl	3360 <lzma_index_file_size@plt>
    5068:	cmn	x0, x21
    506c:	b.mi	523c <lzma_index_cat@@XZ_5.0+0x200>  // b.first
    5070:	ldr	x1, [x19, #32]
    5074:	ldr	x0, [x20, #32]
    5078:	cmn	x1, x0
    507c:	b.mi	5244 <lzma_index_cat@@XZ_5.0+0x208>  // b.first
    5080:	stp	x23, x24, [sp, #48]
    5084:	ldr	x0, [x19, #48]
    5088:	bl	3480 <lzma_vli_size@plt>
    508c:	mov	w23, w0
    5090:	ldr	x0, [x20, #48]
    5094:	bl	3480 <lzma_vli_size@plt>
    5098:	add	w1, w0, #0x1
    509c:	add	w23, w23, #0x1
    50a0:	add	x1, x1, x23
    50a4:	ldr	x0, [x20, #56]
    50a8:	add	x0, x0, #0xb
    50ac:	add	x1, x1, x0
    50b0:	ldr	x0, [x19, #56]
    50b4:	add	x1, x1, x0
    50b8:	and	x1, x1, #0xfffffffffffffffc
    50bc:	mov	w0, #0x9                   	// #9
    50c0:	mov	x2, #0x400000000           	// #17179869184
    50c4:	cmp	x1, x2
    50c8:	b.hi	525c <lzma_index_cat@@XZ_5.0+0x220>  // b.pmore
    50cc:	str	x25, [sp, #64]
    50d0:	ldr	x25, [x19, #16]
    50d4:	ldr	x23, [x25, #72]
    50d8:	cbz	x23, 50f0 <lzma_index_cat@@XZ_5.0+0xb4>
    50dc:	ldr	x0, [x23, #56]
    50e0:	add	x2, x0, #0x1
    50e4:	ldr	x1, [x23, #48]
    50e8:	cmp	x2, x1
    50ec:	b.cc	5198 <lzma_index_cat@@XZ_5.0+0x15c>  // b.lo, b.ul, b.last
    50f0:	ldr	x0, [x19, #32]
    50f4:	str	x0, [sp, #88]
    50f8:	str	x21, [sp, #96]
    50fc:	ldr	x0, [x19, #48]
    5100:	str	x0, [sp, #104]
    5104:	ldr	w0, [x19, #24]
    5108:	str	w0, [sp, #112]
    510c:	str	x19, [sp, #120]
    5110:	ldr	x1, [x20]
    5114:	add	x0, sp, #0x58
    5118:	bl	46f4 <lzma_physmem@@XZ_5.0+0x1dc>
    511c:	ldr	x0, [x19, #32]
    5120:	ldr	x1, [x20, #32]
    5124:	add	x0, x0, x1
    5128:	str	x0, [x19, #32]
    512c:	ldr	x0, [x19, #40]
    5130:	ldr	x1, [x20, #40]
    5134:	add	x0, x0, x1
    5138:	str	x0, [x19, #40]
    513c:	ldr	x0, [x19, #48]
    5140:	ldr	x1, [x20, #48]
    5144:	add	x0, x0, x1
    5148:	str	x0, [x19, #48]
    514c:	ldr	x0, [x19, #56]
    5150:	ldr	x1, [x20, #56]
    5154:	add	x0, x0, x1
    5158:	str	x0, [x19, #56]
    515c:	mov	x0, x19
    5160:	bl	31d0 <lzma_index_checks@plt>
    5164:	ldr	w1, [x20, #72]
    5168:	orr	w1, w1, w0
    516c:	str	w1, [x19, #72]
    5170:	mov	x1, x22
    5174:	mov	x0, x20
    5178:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    517c:	mov	w0, #0x0                   	// #0
    5180:	ldp	x23, x24, [sp, #48]
    5184:	ldr	x25, [sp, #64]
    5188:	ldp	x19, x20, [sp, #16]
    518c:	ldp	x21, x22, [sp, #32]
    5190:	ldp	x29, x30, [sp], #128
    5194:	ret
    5198:	add	x0, x0, #0x5
    519c:	mov	x1, x22
    51a0:	lsl	x0, x0, #4
    51a4:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    51a8:	mov	x24, x0
    51ac:	cbz	x0, 524c <lzma_index_cat@@XZ_5.0+0x210>
    51b0:	ldp	x0, x1, [x23]
    51b4:	stp	x0, x1, [x24]
    51b8:	ldp	x0, x1, [x23, #16]
    51bc:	stp	x0, x1, [x24, #16]
    51c0:	ldr	x0, [x23, #32]
    51c4:	str	x0, [x24, #32]
    51c8:	ldr	x2, [x23, #56]
    51cc:	add	x2, x2, #0x1
    51d0:	str	x2, [x24, #48]
    51d4:	ldr	x0, [x23, #56]
    51d8:	str	x0, [x24, #56]
    51dc:	ldr	x0, [x23, #40]
    51e0:	str	x0, [x24, #40]
    51e4:	lsl	x2, x2, #4
    51e8:	add	x1, x23, #0x40
    51ec:	add	x0, x24, #0x40
    51f0:	bl	3090 <memcpy@plt>
    51f4:	ldr	x0, [x23, #16]
    51f8:	cbz	x0, 5200 <lzma_index_cat@@XZ_5.0+0x1c4>
    51fc:	str	x24, [x0, #32]
    5200:	ldr	x0, [x25, #64]
    5204:	cmp	x0, x23
    5208:	b.eq	5228 <lzma_index_cat@@XZ_5.0+0x1ec>  // b.none
    520c:	ldr	x0, [x25, #72]
    5210:	cmp	x23, x0
    5214:	b.eq	5234 <lzma_index_cat@@XZ_5.0+0x1f8>  // b.none
    5218:	mov	x1, x22
    521c:	mov	x0, x23
    5220:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    5224:	b	50f0 <lzma_index_cat@@XZ_5.0+0xb4>
    5228:	str	x24, [x25, #64]
    522c:	str	x24, [x25, #56]
    5230:	b	520c <lzma_index_cat@@XZ_5.0+0x1d0>
    5234:	str	x24, [x25, #72]
    5238:	b	5218 <lzma_index_cat@@XZ_5.0+0x1dc>
    523c:	mov	w0, #0x9                   	// #9
    5240:	b	5188 <lzma_index_cat@@XZ_5.0+0x14c>
    5244:	mov	w0, #0x9                   	// #9
    5248:	b	5188 <lzma_index_cat@@XZ_5.0+0x14c>
    524c:	mov	w0, #0x5                   	// #5
    5250:	ldp	x23, x24, [sp, #48]
    5254:	ldr	x25, [sp, #64]
    5258:	b	5188 <lzma_index_cat@@XZ_5.0+0x14c>
    525c:	ldp	x23, x24, [sp, #48]
    5260:	b	5188 <lzma_index_cat@@XZ_5.0+0x14c>

0000000000005264 <lzma_index_dup@@XZ_5.0>:
    5264:	stp	x29, x30, [sp, #-96]!
    5268:	mov	x29, sp
    526c:	stp	x19, x20, [sp, #16]
    5270:	stp	x23, x24, [sp, #48]
    5274:	stp	x25, x26, [sp, #64]
    5278:	mov	x19, x0
    527c:	mov	x25, x1
    5280:	mov	x0, x1
    5284:	bl	45f8 <lzma_physmem@@XZ_5.0+0xe0>
    5288:	mov	x24, x0
    528c:	cbz	x0, 52ec <lzma_index_dup@@XZ_5.0+0x88>
    5290:	stp	x21, x22, [sp, #32]
    5294:	stp	x27, x28, [sp, #80]
    5298:	ldr	x0, [x19, #32]
    529c:	str	x0, [x24, #32]
    52a0:	ldr	x0, [x19, #40]
    52a4:	str	x0, [x24, #40]
    52a8:	ldr	x0, [x19, #48]
    52ac:	str	x0, [x24, #48]
    52b0:	ldr	x0, [x19, #56]
    52b4:	str	x0, [x24, #56]
    52b8:	ldr	x19, [x19, #8]
    52bc:	mov	x27, #0xffffffffffffffc     	// #1152921504606846972
    52c0:	mov	x28, #0x1                   	// #1
    52c4:	b	532c <lzma_index_dup@@XZ_5.0+0xc8>
    52c8:	mov	x1, x25
    52cc:	mov	x0, x21
    52d0:	bl	45b8 <lzma_physmem@@XZ_5.0+0xa0>
    52d4:	mov	x1, x25
    52d8:	mov	x0, x24
    52dc:	bl	33e0 <lzma_index_end@plt>
    52e0:	mov	x24, #0x0                   	// #0
    52e4:	ldp	x21, x22, [sp, #32]
    52e8:	ldp	x27, x28, [sp, #80]
    52ec:	mov	x0, x24
    52f0:	ldp	x19, x20, [sp, #16]
    52f4:	ldp	x23, x24, [sp, #48]
    52f8:	ldp	x25, x26, [sp, #64]
    52fc:	ldp	x29, x30, [sp], #96
    5300:	ret
    5304:	mov	x1, x22
    5308:	add	x0, x21, #0x38
    530c:	bl	4644 <lzma_physmem@@XZ_5.0+0x12c>
    5310:	mov	x1, x21
    5314:	mov	x0, x24
    5318:	bl	4644 <lzma_physmem@@XZ_5.0+0x12c>
    531c:	mov	x0, x19
    5320:	bl	4584 <lzma_physmem@@XZ_5.0+0x6c>
    5324:	mov	x19, x0
    5328:	cbz	x0, 5414 <lzma_index_dup@@XZ_5.0+0x1b0>
    532c:	ldr	x0, [x19, #88]
    5330:	cmp	x0, x27
    5334:	b.cs	52d4 <lzma_index_dup@@XZ_5.0+0x70>  // b.hs, b.nlast
    5338:	mov	x4, x25
    533c:	ldr	x3, [x19, #48]
    5340:	ldr	w2, [x19, #40]
    5344:	ldr	x1, [x19]
    5348:	ldr	x0, [x19, #8]
    534c:	bl	4968 <lzma_physmem@@XZ_5.0+0x450>
    5350:	mov	x21, x0
    5354:	cbz	x0, 52d4 <lzma_index_dup@@XZ_5.0+0x70>
    5358:	ldr	x0, [x19, #88]
    535c:	str	x0, [x21, #88]
    5360:	ldr	x0, [x19, #96]
    5364:	str	x0, [x21, #96]
    5368:	ldp	x2, x3, [x19, #104]
    536c:	stp	x2, x3, [x21, #104]
    5370:	ldp	x2, x3, [x19, #120]
    5374:	stp	x2, x3, [x21, #120]
    5378:	ldp	x2, x3, [x19, #136]
    537c:	stp	x2, x3, [x21, #136]
    5380:	ldr	x1, [x19, #152]
    5384:	str	x1, [x21, #152]
    5388:	ldr	x0, [x19, #160]
    538c:	str	x0, [x21, #160]
    5390:	ldr	x0, [x19, #64]
    5394:	cbz	x0, 5310 <lzma_index_dup@@XZ_5.0+0xac>
    5398:	ldr	x0, [x19, #88]
    539c:	add	x0, x0, #0x4
    53a0:	mov	x1, x25
    53a4:	lsl	x0, x0, #4
    53a8:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    53ac:	mov	x22, x0
    53b0:	cbz	x0, 52c8 <lzma_index_dup@@XZ_5.0+0x64>
    53b4:	str	xzr, [x0]
    53b8:	str	xzr, [x0, #8]
    53bc:	str	x28, [x0, #40]
    53c0:	ldr	x0, [x19, #88]
    53c4:	str	x0, [x22, #48]
    53c8:	sub	x0, x0, #0x1
    53cc:	str	x0, [x22, #56]
    53d0:	ldr	x20, [x19, #64]
    53d4:	mov	x23, #0x0                   	// #0
    53d8:	add	x26, x22, #0x40
    53dc:	ldr	x2, [x20, #56]
    53e0:	add	x2, x2, #0x1
    53e4:	lsl	x2, x2, #4
    53e8:	add	x1, x20, #0x40
    53ec:	add	x0, x26, x23, lsl #4
    53f0:	bl	3090 <memcpy@plt>
    53f4:	ldr	x0, [x20, #56]
    53f8:	add	x0, x0, #0x1
    53fc:	add	x23, x23, x0
    5400:	mov	x0, x20
    5404:	bl	4584 <lzma_physmem@@XZ_5.0+0x6c>
    5408:	mov	x20, x0
    540c:	cbnz	x0, 53dc <lzma_index_dup@@XZ_5.0+0x178>
    5410:	b	5304 <lzma_index_dup@@XZ_5.0+0xa0>
    5414:	ldp	x21, x22, [sp, #32]
    5418:	ldp	x27, x28, [sp, #80]
    541c:	b	52ec <lzma_index_dup@@XZ_5.0+0x88>

0000000000005420 <lzma_index_iter_rewind@@XZ_5.0>:
    5420:	str	xzr, [x0, #264]
    5424:	str	xzr, [x0, #272]
    5428:	str	xzr, [x0, #280]
    542c:	str	xzr, [x0, #288]
    5430:	ret

0000000000005434 <lzma_index_iter_init@@XZ_5.0>:
    5434:	stp	x29, x30, [sp, #-16]!
    5438:	mov	x29, sp
    543c:	str	x1, [x0, #256]
    5440:	bl	30a0 <lzma_index_iter_rewind@plt>
    5444:	ldp	x29, x30, [sp], #16
    5448:	ret

000000000000544c <lzma_index_iter_next@@XZ_5.0>:
    544c:	cmp	w1, #0x3
    5450:	b.hi	559c <lzma_index_iter_next@@XZ_5.0+0x150>  // b.pmore
    5454:	stp	x29, x30, [sp, #-64]!
    5458:	mov	x29, sp
    545c:	stp	x19, x20, [sp, #16]
    5460:	stp	x21, x22, [sp, #32]
    5464:	stp	x23, x24, [sp, #48]
    5468:	mov	x22, x0
    546c:	mov	w21, w1
    5470:	ldr	x23, [x0, #256]
    5474:	ldr	x19, [x0, #264]
    5478:	ldr	x20, [x0, #280]
    547c:	mov	x0, #0x0                   	// #0
    5480:	cmp	w1, #0x1
    5484:	b.eq	54a0 <lzma_index_iter_next@@XZ_5.0+0x54>  // b.none
    5488:	ldr	x1, [x22, #288]
    548c:	cmp	x1, #0x1
    5490:	b.eq	54b0 <lzma_index_iter_next@@XZ_5.0+0x64>  // b.none
    5494:	cmp	x1, #0x2
    5498:	b.eq	54bc <lzma_index_iter_next@@XZ_5.0+0x70>  // b.none
    549c:	cbz	x1, 54a8 <lzma_index_iter_next@@XZ_5.0+0x5c>
    54a0:	mov	x24, #0x0                   	// #0
    54a4:	b	552c <lzma_index_iter_next@@XZ_5.0+0xe0>
    54a8:	ldr	x0, [x22, #272]
    54ac:	b	54a0 <lzma_index_iter_next@@XZ_5.0+0x54>
    54b0:	ldr	x0, [x22, #272]
    54b4:	bl	4584 <lzma_physmem@@XZ_5.0+0x6c>
    54b8:	b	54a0 <lzma_index_iter_next@@XZ_5.0+0x54>
    54bc:	ldr	x0, [x19, #64]
    54c0:	b	54a0 <lzma_index_iter_next@@XZ_5.0+0x54>
    54c4:	ldr	x19, [x23, #8]
    54c8:	cmp	w21, #0x1
    54cc:	b.hi	54d8 <lzma_index_iter_next@@XZ_5.0+0x8c>  // b.pmore
    54d0:	ldr	x0, [x19, #64]
    54d4:	b	5510 <lzma_index_iter_next@@XZ_5.0+0xc4>
    54d8:	ldr	x2, [x19, #64]
    54dc:	cbnz	x2, 54d0 <lzma_index_iter_next@@XZ_5.0+0x84>
    54e0:	mov	x0, x19
    54e4:	bl	4584 <lzma_physmem@@XZ_5.0+0x6c>
    54e8:	mov	x19, x0
    54ec:	cbnz	x0, 54d8 <lzma_index_iter_next@@XZ_5.0+0x8c>
    54f0:	mov	w0, #0x1                   	// #1
    54f4:	ldp	x19, x20, [sp, #16]
    54f8:	ldp	x21, x22, [sp, #32]
    54fc:	ldp	x23, x24, [sp, #48]
    5500:	ldp	x29, x30, [sp], #64
    5504:	ret
    5508:	bl	4584 <lzma_physmem@@XZ_5.0+0x6c>
    550c:	cbz	x0, 556c <lzma_index_iter_next@@XZ_5.0+0x120>
    5510:	cmp	w21, #0x3
    5514:	b.ne	55ac <lzma_index_iter_next@@XZ_5.0+0x160>  // b.any
    5518:	ldr	x2, [x0]
    551c:	ldr	x1, [x0, #64]
    5520:	cmp	x2, x1
    5524:	b.ne	5594 <lzma_index_iter_next@@XZ_5.0+0x148>  // b.any
    5528:	mov	x20, x24
    552c:	cbz	x19, 54c4 <lzma_index_iter_next@@XZ_5.0+0x78>
    5530:	cbz	x0, 556c <lzma_index_iter_next@@XZ_5.0+0x120>
    5534:	ldr	x1, [x0, #56]
    5538:	cmp	x1, x20
    553c:	b.ls	5508 <lzma_index_iter_next@@XZ_5.0+0xbc>  // b.plast
    5540:	add	x1, x20, #0x1
    5544:	cmp	w21, #0x3
    5548:	b.ne	55b0 <lzma_index_iter_next@@XZ_5.0+0x164>  // b.any
    554c:	cbz	x1, 5518 <lzma_index_iter_next@@XZ_5.0+0xcc>
    5550:	add	x20, x0, x20, lsl #4
    5554:	ldr	x3, [x20, #64]
    5558:	ldr	x2, [x20, #80]
    555c:	cmp	x3, x2
    5560:	b.ne	55b0 <lzma_index_iter_next@@XZ_5.0+0x164>  // b.any
    5564:	mov	x20, x1
    5568:	b	552c <lzma_index_iter_next@@XZ_5.0+0xe0>
    556c:	mov	x0, x19
    5570:	bl	4584 <lzma_physmem@@XZ_5.0+0x6c>
    5574:	mov	x19, x0
    5578:	cbz	x0, 55a4 <lzma_index_iter_next@@XZ_5.0+0x158>
    557c:	cmp	w21, #0x1
    5580:	b.ls	558c <lzma_index_iter_next@@XZ_5.0+0x140>  // b.plast
    5584:	ldr	x0, [x0, #64]
    5588:	cbz	x0, 556c <lzma_index_iter_next@@XZ_5.0+0x120>
    558c:	ldr	x0, [x19, #64]
    5590:	b	5510 <lzma_index_iter_next@@XZ_5.0+0xc4>
    5594:	mov	x1, #0x0                   	// #0
    5598:	b	55b0 <lzma_index_iter_next@@XZ_5.0+0x164>
    559c:	mov	w0, #0x1                   	// #1
    55a0:	ret
    55a4:	mov	w0, #0x1                   	// #1
    55a8:	b	54f4 <lzma_index_iter_next@@XZ_5.0+0xa8>
    55ac:	mov	x1, #0x0                   	// #0
    55b0:	str	x19, [x22, #264]
    55b4:	str	x0, [x22, #272]
    55b8:	str	x1, [x22, #280]
    55bc:	mov	x0, x22
    55c0:	bl	4788 <lzma_physmem@@XZ_5.0+0x270>
    55c4:	mov	w0, #0x0                   	// #0
    55c8:	b	54f4 <lzma_index_iter_next@@XZ_5.0+0xa8>

00000000000055cc <lzma_index_iter_locate@@XZ_5.0>:
    55cc:	ldr	x2, [x0, #256]
    55d0:	ldr	x3, [x2, #32]
    55d4:	cmp	x3, x1
    55d8:	b.hi	55e4 <lzma_index_iter_locate@@XZ_5.0+0x18>  // b.pmore
    55dc:	mov	w0, #0x1                   	// #1
    55e0:	ret
    55e4:	stp	x29, x30, [sp, #-16]!
    55e8:	mov	x29, sp
    55ec:	ldr	x2, [x2]
    55f0:	cbz	x2, 561c <lzma_index_iter_locate@@XZ_5.0+0x50>
    55f4:	mov	x7, #0x0                   	// #0
    55f8:	b	5608 <lzma_index_iter_locate@@XZ_5.0+0x3c>
    55fc:	mov	x7, x2
    5600:	ldr	x2, [x2, #32]
    5604:	cbz	x2, 5620 <lzma_index_iter_locate@@XZ_5.0+0x54>
    5608:	ldr	x3, [x2]
    560c:	cmp	x1, x3
    5610:	b.cs	55fc <lzma_index_iter_locate@@XZ_5.0+0x30>  // b.hs, b.nlast
    5614:	ldr	x2, [x2, #24]
    5618:	b	5604 <lzma_index_iter_locate@@XZ_5.0+0x38>
    561c:	mov	x7, x2
    5620:	ldr	x4, [x7]
    5624:	sub	x4, x1, x4
    5628:	ldr	x1, [x7, #56]
    562c:	cbz	x1, 5658 <lzma_index_iter_locate@@XZ_5.0+0x8c>
    5630:	mov	x6, #0x0                   	// #0
    5634:	b	5644 <lzma_index_iter_locate@@XZ_5.0+0x78>
    5638:	mov	x6, x1
    563c:	ldr	x1, [x1, #32]
    5640:	cbz	x1, 565c <lzma_index_iter_locate@@XZ_5.0+0x90>
    5644:	ldr	x2, [x1]
    5648:	cmp	x4, x2
    564c:	b.cs	5638 <lzma_index_iter_locate@@XZ_5.0+0x6c>  // b.hs, b.nlast
    5650:	ldr	x1, [x1, #24]
    5654:	b	5640 <lzma_index_iter_locate@@XZ_5.0+0x74>
    5658:	mov	x6, x1
    565c:	ldr	x3, [x6, #56]
    5660:	mov	x2, #0x0                   	// #0
    5664:	cmp	x3, x2
    5668:	b.ls	5694 <lzma_index_iter_locate@@XZ_5.0+0xc8>  // b.plast
    566c:	sub	x1, x3, x2
    5670:	add	x1, x2, x1, lsr #1
    5674:	add	x5, x6, x1, lsl #4
    5678:	ldr	x5, [x5, #64]
    567c:	cmp	x5, x4
    5680:	b.ls	568c <lzma_index_iter_locate@@XZ_5.0+0xc0>  // b.plast
    5684:	mov	x3, x1
    5688:	b	5664 <lzma_index_iter_locate@@XZ_5.0+0x98>
    568c:	add	x2, x1, #0x1
    5690:	b	5664 <lzma_index_iter_locate@@XZ_5.0+0x98>
    5694:	str	x7, [x0, #264]
    5698:	str	x6, [x0, #272]
    569c:	str	x2, [x0, #280]
    56a0:	bl	4788 <lzma_physmem@@XZ_5.0+0x270>
    56a4:	mov	w0, #0x0                   	// #0
    56a8:	ldp	x29, x30, [sp], #16
    56ac:	ret

00000000000056b0 <lzma_stream_flags_compare@@XZ_5.0>:
    56b0:	mov	x2, x0
    56b4:	ldr	w0, [x0]
    56b8:	cbnz	w0, 572c <lzma_stream_flags_compare@@XZ_5.0+0x7c>
    56bc:	ldr	w0, [x1]
    56c0:	cbnz	w0, 5734 <lzma_stream_flags_compare@@XZ_5.0+0x84>
    56c4:	ldr	w3, [x2, #16]
    56c8:	cmp	w3, #0xf
    56cc:	b.hi	573c <lzma_stream_flags_compare@@XZ_5.0+0x8c>  // b.pmore
    56d0:	ldr	w4, [x1, #16]
    56d4:	cmp	w4, #0xf
    56d8:	b.hi	5744 <lzma_stream_flags_compare@@XZ_5.0+0x94>  // b.pmore
    56dc:	cmp	w3, w4
    56e0:	b.ne	574c <lzma_stream_flags_compare@@XZ_5.0+0x9c>  // b.any
    56e4:	ldr	x2, [x2, #8]
    56e8:	cmn	x2, #0x1
    56ec:	b.eq	5730 <lzma_stream_flags_compare@@XZ_5.0+0x80>  // b.none
    56f0:	ldr	x1, [x1, #8]
    56f4:	cmn	x1, #0x1
    56f8:	b.eq	5730 <lzma_stream_flags_compare@@XZ_5.0+0x80>  // b.none
    56fc:	sub	x4, x2, #0x4
    5700:	mov	x3, #0x3fffffffc           	// #17179869180
    5704:	cmp	x4, x3
    5708:	b.hi	5754 <lzma_stream_flags_compare@@XZ_5.0+0xa4>  // b.pmore
    570c:	sub	x4, x1, #0x4
    5710:	cmp	x4, x3
    5714:	b.hi	575c <lzma_stream_flags_compare@@XZ_5.0+0xac>  // b.pmore
    5718:	orr	x3, x2, x1
    571c:	tst	x3, #0x3
    5720:	b.eq	5764 <lzma_stream_flags_compare@@XZ_5.0+0xb4>  // b.none
    5724:	mov	w0, #0xb                   	// #11
    5728:	b	5730 <lzma_stream_flags_compare@@XZ_5.0+0x80>
    572c:	mov	w0, #0x8                   	// #8
    5730:	ret
    5734:	mov	w0, #0x8                   	// #8
    5738:	b	5730 <lzma_stream_flags_compare@@XZ_5.0+0x80>
    573c:	mov	w0, #0xb                   	// #11
    5740:	b	5730 <lzma_stream_flags_compare@@XZ_5.0+0x80>
    5744:	mov	w0, #0xb                   	// #11
    5748:	b	5730 <lzma_stream_flags_compare@@XZ_5.0+0x80>
    574c:	mov	w0, #0x9                   	// #9
    5750:	b	5730 <lzma_stream_flags_compare@@XZ_5.0+0x80>
    5754:	mov	w0, #0xb                   	// #11
    5758:	b	5730 <lzma_stream_flags_compare@@XZ_5.0+0x80>
    575c:	mov	w0, #0xb                   	// #11
    5760:	b	5730 <lzma_stream_flags_compare@@XZ_5.0+0x80>
    5764:	cmp	x2, x1
    5768:	mov	w1, #0x9                   	// #9
    576c:	csel	w0, w0, w1, eq  // eq = none
    5770:	b	5730 <lzma_stream_flags_compare@@XZ_5.0+0x80>

0000000000005774 <lzma_vli_size@@XZ_5.0>:
    5774:	mov	x1, x0
    5778:	mov	w0, #0x0                   	// #0
    577c:	tbnz	x1, #63, 5790 <lzma_vli_size@@XZ_5.0+0x1c>
    5780:	mov	w0, #0x0                   	// #0
    5784:	lsr	x1, x1, #7
    5788:	add	w0, w0, #0x1
    578c:	cbnz	x1, 5784 <lzma_vli_size@@XZ_5.0+0x10>
    5790:	ret

0000000000005794 <lzma_cputhreads@@XZ_5.2>:
    5794:	stp	x29, x30, [sp, #-16]!
    5798:	mov	x29, sp
    579c:	bl	3680 <pthread_cond_timedwait@plt+0x120>
    57a0:	ldp	x29, x30, [sp], #16
    57a4:	ret
    57a8:	stp	x29, x30, [sp, #-96]!
    57ac:	mov	x29, sp
    57b0:	stp	x19, x20, [sp, #16]
    57b4:	stp	x21, x22, [sp, #32]
    57b8:	mov	x22, x0
    57bc:	mov	x21, x1
    57c0:	mov	x20, x2
    57c4:	adrp	x19, 5000 <lzma_index_append@@XZ_5.0+0x24c>
    57c8:	add	x19, x19, #0x7a8
    57cc:	ldr	x0, [x0, #16]
    57d0:	cmp	x0, x19
    57d4:	b.ne	5890 <lzma_cputhreads@@XZ_5.2+0xfc>  // b.any
    57d8:	str	x19, [x22, #16]
    57dc:	ldr	x19, [x22]
    57e0:	cbz	x19, 589c <lzma_cputhreads@@XZ_5.2+0x108>
    57e4:	str	wzr, [x19, #72]
    57e8:	str	xzr, [x19, #80]
    57ec:	add	x1, x19, #0x58
    57f0:	mov	x0, x20
    57f4:	bl	114d8 <lzma_lzma_preset@@XZ_5.0+0x199c>
    57f8:	and	w1, w0, #0xff
    57fc:	mov	w0, #0x8                   	// #8
    5800:	cbnz	w1, 5880 <lzma_cputhreads@@XZ_5.2+0xec>
    5804:	ldr	w3, [x20]
    5808:	cmp	w3, #0xfff
    580c:	b.ls	5880 <lzma_cputhreads@@XZ_5.2+0xec>  // b.plast
    5810:	sub	w3, w3, #0x1
    5814:	orr	w3, w3, w3, lsr #2
    5818:	orr	w3, w3, w3, lsr #3
    581c:	orr	w3, w3, w3, lsr #4
    5820:	orr	w3, w3, w3, lsr #8
    5824:	orr	w3, w3, w3, lsr #16
    5828:	cmn	w3, #0x1
    582c:	cinc	w3, w3, ne  // ne = any
    5830:	strb	w3, [x19, #89]
    5834:	lsr	w0, w3, #8
    5838:	strb	w0, [x19, #90]
    583c:	lsr	w0, w3, #16
    5840:	strb	w0, [x19, #91]
    5844:	lsr	w3, w3, #24
    5848:	strb	w3, [x19, #92]
    584c:	mov	x0, #0xffffffffffffffff    	// #-1
    5850:	stur	x0, [x19, #93]
    5854:	stp	xzr, xzr, [sp, #48]
    5858:	stp	xzr, xzr, [sp, #64]
    585c:	stp	xzr, xzr, [sp, #80]
    5860:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    5864:	ldr	x0, [x0, #4056]
    5868:	str	x0, [sp, #56]
    586c:	str	x20, [sp, #64]
    5870:	add	x2, sp, #0x30
    5874:	mov	x1, x21
    5878:	mov	x0, x19
    587c:	bl	38d8 <lzma_version_string@@XZ_5.0+0x210>
    5880:	ldp	x19, x20, [sp, #16]
    5884:	ldp	x21, x22, [sp, #32]
    5888:	ldp	x29, x30, [sp], #96
    588c:	ret
    5890:	mov	x0, x22
    5894:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    5898:	b	57d8 <lzma_cputhreads@@XZ_5.2+0x44>
    589c:	mov	x1, x21
    58a0:	mov	x0, #0x68                  	// #104
    58a4:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    58a8:	mov	x19, x0
    58ac:	cbz	x0, 58f8 <lzma_cputhreads@@XZ_5.2+0x164>
    58b0:	str	x0, [x22]
    58b4:	adrp	x0, 5000 <lzma_index_append@@XZ_5.0+0x24c>
    58b8:	add	x0, x0, #0x930
    58bc:	str	x0, [x22, #24]
    58c0:	adrp	x0, 5000 <lzma_index_append@@XZ_5.0+0x24c>
    58c4:	add	x0, x0, #0x900
    58c8:	str	x0, [x22, #32]
    58cc:	str	xzr, [x19]
    58d0:	mov	x0, #0xffffffffffffffff    	// #-1
    58d4:	str	x0, [x19, #8]
    58d8:	str	xzr, [x19, #16]
    58dc:	str	xzr, [x19, #24]
    58e0:	str	xzr, [x19, #32]
    58e4:	str	xzr, [x19, #40]
    58e8:	str	xzr, [x19, #48]
    58ec:	str	xzr, [x19, #56]
    58f0:	str	xzr, [x19, #64]
    58f4:	b	57e4 <lzma_cputhreads@@XZ_5.2+0x50>
    58f8:	mov	w0, #0x5                   	// #5
    58fc:	b	5880 <lzma_cputhreads@@XZ_5.2+0xec>
    5900:	stp	x29, x30, [sp, #-32]!
    5904:	mov	x29, sp
    5908:	stp	x19, x20, [sp, #16]
    590c:	mov	x19, x0
    5910:	mov	x20, x1
    5914:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    5918:	mov	x1, x20
    591c:	mov	x0, x19
    5920:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    5924:	ldp	x19, x20, [sp, #16]
    5928:	ldp	x29, x30, [sp], #32
    592c:	ret
    5930:	sub	sp, sp, #0x90
    5934:	stp	x29, x30, [sp, #16]
    5938:	add	x29, sp, #0x10
    593c:	stp	x19, x20, [sp, #32]
    5940:	mov	x19, x0
    5944:	str	x1, [sp, #120]
    5948:	str	x2, [sp, #128]
    594c:	str	x3, [sp, #136]
    5950:	ldr	x0, [x6]
    5954:	cmp	x7, x0
    5958:	b.ls	5a58 <lzma_cputhreads@@XZ_5.2+0x2c4>  // b.plast
    595c:	stp	x21, x22, [sp, #48]
    5960:	stp	x23, x24, [sp, #64]
    5964:	stp	x25, x26, [sp, #80]
    5968:	stp	x27, x28, [sp, #96]
    596c:	mov	x24, x4
    5970:	mov	x23, x5
    5974:	mov	x21, x6
    5978:	mov	x22, x7
    597c:	add	x27, x19, #0x50
    5980:	add	x26, x19, #0x58
    5984:	mov	x25, #0xd                   	// #13
    5988:	mov	w28, #0x1                   	// #1
    598c:	ldr	w20, [x19, #72]
    5990:	cbz	w20, 59c4 <lzma_cputhreads@@XZ_5.2+0x230>
    5994:	cmp	w20, #0x1
    5998:	b.eq	5a10 <lzma_cputhreads@@XZ_5.2+0x27c>  // b.none
    599c:	mov	w20, #0xb                   	// #11
    59a0:	ldp	x21, x22, [sp, #48]
    59a4:	ldp	x23, x24, [sp, #64]
    59a8:	ldp	x25, x26, [sp, #80]
    59ac:	ldp	x27, x28, [sp, #96]
    59b0:	mov	w0, w20
    59b4:	ldp	x19, x20, [sp, #32]
    59b8:	ldp	x29, x30, [sp, #16]
    59bc:	add	sp, sp, #0x90
    59c0:	ret
    59c4:	mov	x5, x22
    59c8:	mov	x4, x21
    59cc:	mov	x3, x23
    59d0:	mov	x2, x25
    59d4:	mov	x1, x27
    59d8:	mov	x0, x26
    59dc:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
    59e0:	ldr	x0, [x19, #80]
    59e4:	cmp	x0, #0xc
    59e8:	b.ls	5a60 <lzma_cputhreads@@XZ_5.2+0x2cc>  // b.plast
    59ec:	str	w28, [x19, #72]
    59f0:	ldr	x0, [x21]
    59f4:	cmp	x0, x22
    59f8:	b.cc	598c <lzma_cputhreads@@XZ_5.2+0x1f8>  // b.lo, b.ul, b.last
    59fc:	ldp	x21, x22, [sp, #48]
    5a00:	ldp	x23, x24, [sp, #64]
    5a04:	ldp	x25, x26, [sp, #80]
    5a08:	ldp	x27, x28, [sp, #96]
    5a0c:	b	59b0 <lzma_cputhreads@@XZ_5.2+0x21c>
    5a10:	ldr	w0, [sp, #144]
    5a14:	str	w0, [sp]
    5a18:	ldr	x8, [x19, #24]
    5a1c:	mov	x7, x22
    5a20:	mov	x6, x21
    5a24:	mov	x5, x23
    5a28:	mov	x4, x24
    5a2c:	ldr	x3, [sp, #136]
    5a30:	ldr	x2, [sp, #128]
    5a34:	ldr	x1, [sp, #120]
    5a38:	ldr	x0, [x19]
    5a3c:	blr	x8
    5a40:	mov	w20, w0
    5a44:	ldp	x21, x22, [sp, #48]
    5a48:	ldp	x23, x24, [sp, #64]
    5a4c:	ldp	x25, x26, [sp, #80]
    5a50:	ldp	x27, x28, [sp, #96]
    5a54:	b	59b0 <lzma_cputhreads@@XZ_5.2+0x21c>
    5a58:	mov	w20, #0x0                   	// #0
    5a5c:	b	59b0 <lzma_cputhreads@@XZ_5.2+0x21c>
    5a60:	ldp	x21, x22, [sp, #48]
    5a64:	ldp	x23, x24, [sp, #64]
    5a68:	ldp	x25, x26, [sp, #80]
    5a6c:	ldp	x27, x28, [sp, #96]
    5a70:	b	59b0 <lzma_cputhreads@@XZ_5.2+0x21c>

0000000000005a74 <lzma_alone_encoder@@XZ_5.0>:
    5a74:	stp	x29, x30, [sp, #-48]!
    5a78:	mov	x29, sp
    5a7c:	stp	x19, x20, [sp, #16]
    5a80:	str	x21, [sp, #32]
    5a84:	mov	x20, x0
    5a88:	mov	x21, x1
    5a8c:	bl	3950 <lzma_version_string@@XZ_5.0+0x288>
    5a90:	mov	w19, w0
    5a94:	cbz	w0, 5aac <lzma_alone_encoder@@XZ_5.0+0x38>
    5a98:	mov	w0, w19
    5a9c:	ldp	x19, x20, [sp, #16]
    5aa0:	ldr	x21, [sp, #32]
    5aa4:	ldp	x29, x30, [sp], #48
    5aa8:	ret
    5aac:	mov	x2, x21
    5ab0:	ldr	x1, [x20, #48]
    5ab4:	ldr	x0, [x20, #56]
    5ab8:	bl	57a8 <lzma_cputhreads@@XZ_5.2+0x14>
    5abc:	mov	w19, w0
    5ac0:	cbnz	w0, 5adc <lzma_alone_encoder@@XZ_5.0+0x68>
    5ac4:	ldr	x1, [x20, #56]
    5ac8:	mov	w0, #0x1                   	// #1
    5acc:	strb	w0, [x1, #88]
    5ad0:	ldr	x1, [x20, #56]
    5ad4:	strb	w0, [x1, #91]
    5ad8:	b	5a98 <lzma_alone_encoder@@XZ_5.0+0x24>
    5adc:	mov	x0, x20
    5ae0:	bl	3320 <lzma_end@plt>
    5ae4:	b	5a98 <lzma_alone_encoder@@XZ_5.0+0x24>
    5ae8:	mov	x1, #0xfffffffffffffbbc    	// #-1092
    5aec:	movk	x1, #0x7fff, lsl #48
    5af0:	cmp	x0, x1
    5af4:	b.hi	5b28 <lzma_alone_encoder@@XZ_5.0+0xb4>  // b.pmore
    5af8:	add	x1, x0, #0xf, lsl #12
    5afc:	add	x1, x1, #0xfff
    5b00:	lsr	x1, x1, #16
    5b04:	add	x1, x1, x1, lsl #1
    5b08:	add	x1, x1, #0x1
    5b0c:	mov	x2, #0xfffffffffffffbbc    	// #-1092
    5b10:	movk	x2, #0x7fff, lsl #48
    5b14:	sub	x2, x2, x1
    5b18:	add	x1, x0, x1
    5b1c:	cmp	x2, x0
    5b20:	csel	x0, x1, xzr, cs  // cs = hs, nlast
    5b24:	ret
    5b28:	mov	x0, #0x0                   	// #0
    5b2c:	b	5b24 <lzma_alone_encoder@@XZ_5.0+0xb0>
    5b30:	sub	sp, sp, #0x110
    5b34:	stp	x29, x30, [sp, #16]
    5b38:	add	x29, sp, #0x10
    5b3c:	stp	x21, x22, [sp, #48]
    5b40:	str	x1, [sp, #120]
    5b44:	cbz	x0, 5f70 <lzma_alone_encoder@@XZ_5.0+0x4fc>
    5b48:	stp	x19, x20, [sp, #32]
    5b4c:	stp	x23, x24, [sp, #64]
    5b50:	stp	x25, x26, [sp, #80]
    5b54:	stp	x27, x28, [sp, #96]
    5b58:	mov	x20, x0
    5b5c:	mov	x25, x2
    5b60:	mov	x24, x3
    5b64:	mov	x23, x4
    5b68:	mov	x19, x5
    5b6c:	mov	x22, x6
    5b70:	and	w27, w7, #0xff
    5b74:	cmp	x2, #0x0
    5b78:	mov	w21, #0xb                   	// #11
    5b7c:	ccmp	x3, #0x0, #0x4, eq  // eq = none
    5b80:	b.ne	5fb0 <lzma_alone_encoder@@XZ_5.0+0x53c>  // b.any
    5b84:	cmp	x4, #0x0
    5b88:	ccmp	x5, #0x0, #0x4, ne  // ne = any
    5b8c:	b.eq	5fd4 <lzma_alone_encoder@@XZ_5.0+0x560>  // b.none
    5b90:	ldr	x26, [x5]
    5b94:	cmp	x26, x6
    5b98:	b.hi	5fe8 <lzma_alone_encoder@@XZ_5.0+0x574>  // b.pmore
    5b9c:	ldr	w0, [x0]
    5ba0:	mov	w21, #0x8                   	// #8
    5ba4:	cmp	w0, #0x1
    5ba8:	b.hi	5ffc <lzma_alone_encoder@@XZ_5.0+0x588>  // b.pmore
    5bac:	ldr	w28, [x20, #8]
    5bb0:	mov	w21, #0xb                   	// #11
    5bb4:	cmp	w28, #0xf
    5bb8:	b.hi	6010 <lzma_alone_encoder@@XZ_5.0+0x59c>  // b.pmore
    5bbc:	cbz	w27, 5bc8 <lzma_alone_encoder@@XZ_5.0+0x154>
    5bc0:	ldr	x0, [x20, #32]
    5bc4:	cbz	x0, 5f78 <lzma_alone_encoder@@XZ_5.0+0x504>
    5bc8:	mov	w0, w28
    5bcc:	bl	30e0 <lzma_check_is_supported@plt>
    5bd0:	and	w0, w0, #0xff
    5bd4:	mov	w21, #0x3                   	// #3
    5bd8:	cbz	w0, 6024 <lzma_alone_encoder@@XZ_5.0+0x5b0>
    5bdc:	sub	x6, x22, x26
    5be0:	and	x6, x6, #0x3
    5be4:	sub	x22, x22, x6
    5be8:	mov	w0, w28
    5bec:	bl	3270 <lzma_check_size@plt>
    5bf0:	mov	w28, w0
    5bf4:	sub	x26, x22, x26
    5bf8:	mov	w21, #0xa                   	// #10
    5bfc:	cmp	x26, w0, uxtw
    5c00:	b.ls	6038 <lzma_alone_encoder@@XZ_5.0+0x5c4>  // b.plast
    5c04:	sub	x22, x22, x28
    5c08:	str	x24, [x20, #24]
    5c0c:	mov	x0, x24
    5c10:	bl	5ae8 <lzma_alone_encoder@@XZ_5.0+0x74>
    5c14:	str	x0, [x20, #16]
    5c18:	mov	w21, #0x9                   	// #9
    5c1c:	cbz	x0, 604c <lzma_alone_encoder@@XZ_5.0+0x5d8>
    5c20:	cbnz	w27, 5d98 <lzma_alone_encoder@@XZ_5.0+0x324>
    5c24:	stp	xzr, xzr, [sp, #160]
    5c28:	stp	xzr, xzr, [sp, #176]
    5c2c:	stp	xzr, xzr, [sp, #192]
    5c30:	stp	xzr, xzr, [sp, #208]
    5c34:	stp	xzr, xzr, [sp, #224]
    5c38:	stp	xzr, xzr, [sp, #240]
    5c3c:	stp	xzr, xzr, [sp, #256]
    5c40:	mov	w0, #0x1000                	// #4096
    5c44:	str	w0, [sp, #160]
    5c48:	mov	x0, #0x21                  	// #33
    5c4c:	str	x0, [sp, #128]
    5c50:	add	x0, sp, #0xa0
    5c54:	str	x0, [sp, #136]
    5c58:	mov	x0, #0xffffffffffffffff    	// #-1
    5c5c:	str	x0, [sp, #144]
    5c60:	ldr	x21, [x20, #32]
    5c64:	add	x0, sp, #0x80
    5c68:	str	x0, [x20, #32]
    5c6c:	mov	x0, x20
    5c70:	bl	3160 <lzma_block_header_size@plt>
    5c74:	cbnz	w0, 5ea4 <lzma_alone_encoder@@XZ_5.0+0x430>
    5c78:	ldr	x1, [x19]
    5c7c:	sub	x22, x22, x1
    5c80:	ldr	w0, [x20, #4]
    5c84:	ldr	x2, [x20, #16]
    5c88:	add	x0, x0, x2
    5c8c:	cmp	x22, x0
    5c90:	b.cc	5ec0 <lzma_alone_encoder@@XZ_5.0+0x44c>  // b.lo, b.ul, b.last
    5c94:	add	x1, x23, x1
    5c98:	mov	x0, x20
    5c9c:	bl	3540 <lzma_block_header_encode@plt>
    5ca0:	cbnz	w0, 5edc <lzma_alone_encoder@@XZ_5.0+0x468>
    5ca4:	str	x21, [x20, #32]
    5ca8:	ldr	w1, [x20, #4]
    5cac:	ldr	x0, [x19]
    5cb0:	add	x0, x0, x1
    5cb4:	str	x0, [x19]
    5cb8:	cbz	x24, 5d44 <lzma_alone_encoder@@XZ_5.0+0x2d0>
    5cbc:	mov	x22, #0x0                   	// #0
    5cc0:	mov	w1, #0x1                   	// #1
    5cc4:	mov	x27, #0x10000               	// #65536
    5cc8:	mov	w26, #0x2                   	// #2
    5ccc:	ldr	x0, [x19]
    5cd0:	add	x2, x0, #0x1
    5cd4:	str	x2, [x19]
    5cd8:	strb	w1, [x23, x0]
    5cdc:	sub	x21, x24, x22
    5ce0:	cmp	x21, #0x10, lsl #12
    5ce4:	csel	x21, x21, x27, ls  // ls = plast
    5ce8:	ldr	x1, [x19]
    5cec:	add	x0, x1, #0x1
    5cf0:	str	x0, [x19]
    5cf4:	sub	x0, x21, #0x1
    5cf8:	lsr	x0, x0, #8
    5cfc:	strb	w0, [x23, x1]
    5d00:	ldr	x0, [x19]
    5d04:	add	x1, x0, #0x1
    5d08:	str	x1, [x19]
    5d0c:	sub	w1, w21, #0x1
    5d10:	strb	w1, [x23, x0]
    5d14:	ldr	x0, [x19]
    5d18:	mov	x2, x21
    5d1c:	add	x1, x25, x22
    5d20:	add	x0, x23, x0
    5d24:	bl	3090 <memcpy@plt>
    5d28:	add	x22, x22, x21
    5d2c:	ldr	x0, [x19]
    5d30:	add	x21, x0, x21
    5d34:	str	x21, [x19]
    5d38:	mov	w1, w26
    5d3c:	cmp	x24, x22
    5d40:	b.hi	5ccc <lzma_alone_encoder@@XZ_5.0+0x258>  // b.pmore
    5d44:	ldr	x0, [x19]
    5d48:	add	x1, x0, #0x1
    5d4c:	str	x1, [x19]
    5d50:	strb	wzr, [x23, x0]
    5d54:	ldr	x0, [x20, #16]
    5d58:	tst	x0, #0x3
    5d5c:	b.eq	5d7c <lzma_alone_encoder@@XZ_5.0+0x308>  // b.none
    5d60:	ldr	x1, [x19]
    5d64:	add	x2, x1, #0x1
    5d68:	str	x2, [x19]
    5d6c:	strb	wzr, [x23, x1]
    5d70:	add	x0, x0, #0x1
    5d74:	tst	x0, #0x3
    5d78:	b.ne	5d60 <lzma_alone_encoder@@XZ_5.0+0x2ec>  // b.any
    5d7c:	mov	w21, #0x0                   	// #0
    5d80:	cbnz	x28, 5ef8 <lzma_alone_encoder@@XZ_5.0+0x484>
    5d84:	ldp	x19, x20, [sp, #32]
    5d88:	ldp	x23, x24, [sp, #64]
    5d8c:	ldp	x25, x26, [sp, #80]
    5d90:	ldp	x27, x28, [sp, #96]
    5d94:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    5d98:	mov	x0, x20
    5d9c:	bl	3160 <lzma_block_header_size@plt>
    5da0:	mov	w21, w0
    5da4:	cbnz	w0, 5f94 <lzma_alone_encoder@@XZ_5.0+0x520>
    5da8:	ldr	x26, [x19]
    5dac:	ldr	w0, [x20, #4]
    5db0:	sub	x1, x22, x26
    5db4:	cmp	x1, x0
    5db8:	b.ls	5f90 <lzma_alone_encoder@@XZ_5.0+0x51c>  // b.plast
    5dbc:	add	x0, x26, x0
    5dc0:	str	x0, [x19]
    5dc4:	ldr	x1, [x20, #16]
    5dc8:	sub	x2, x22, x0
    5dcc:	add	x0, x0, x1
    5dd0:	cmp	x2, x1
    5dd4:	csel	x27, x0, x22, hi  // hi = pmore
    5dd8:	str	xzr, [sp, #160]
    5ddc:	mov	x0, #0xffffffffffffffff    	// #-1
    5de0:	str	x0, [sp, #168]
    5de4:	str	xzr, [sp, #176]
    5de8:	str	xzr, [sp, #184]
    5dec:	str	xzr, [sp, #192]
    5df0:	str	xzr, [sp, #200]
    5df4:	str	xzr, [sp, #208]
    5df8:	str	xzr, [sp, #216]
    5dfc:	str	xzr, [sp, #224]
    5e00:	ldr	x2, [x20, #32]
    5e04:	ldr	x1, [sp, #120]
    5e08:	add	x0, sp, #0xa0
    5e0c:	bl	6ae8 <lzma_filter_encoder_is_supported@@XZ_5.0+0x1c>
    5e10:	mov	w21, w0
    5e14:	cbnz	w0, 5e50 <lzma_alone_encoder@@XZ_5.0+0x3dc>
    5e18:	str	xzr, [sp, #128]
    5e1c:	mov	w0, #0x3                   	// #3
    5e20:	str	w0, [sp]
    5e24:	mov	x7, x27
    5e28:	mov	x6, x19
    5e2c:	mov	x5, x23
    5e30:	mov	x4, x24
    5e34:	add	x3, sp, #0x80
    5e38:	mov	x2, x25
    5e3c:	ldr	x1, [sp, #120]
    5e40:	ldr	x0, [sp, #160]
    5e44:	ldr	x8, [sp, #184]
    5e48:	blr	x8
    5e4c:	mov	w21, w0
    5e50:	ldr	x1, [sp, #120]
    5e54:	add	x0, sp, #0xa0
    5e58:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    5e5c:	cmp	w21, #0x1
    5e60:	b.eq	5e78 <lzma_alone_encoder@@XZ_5.0+0x404>  // b.none
    5e64:	cmp	w21, #0x0
    5e68:	mov	w0, #0xa                   	// #10
    5e6c:	csel	w21, w21, w0, ne  // ne = any
    5e70:	str	x26, [x19]
    5e74:	b	5f94 <lzma_alone_encoder@@XZ_5.0+0x520>
    5e78:	ldr	x0, [x19]
    5e7c:	sub	x0, x0, x26
    5e80:	ldr	w1, [x20, #4]
    5e84:	sub	x0, x0, x1
    5e88:	str	x0, [x20, #16]
    5e8c:	add	x1, x23, x26
    5e90:	mov	x0, x20
    5e94:	bl	3540 <lzma_block_header_encode@plt>
    5e98:	cbz	w0, 5d54 <lzma_alone_encoder@@XZ_5.0+0x2e0>
    5e9c:	mov	w21, #0xb                   	// #11
    5ea0:	b	5e70 <lzma_alone_encoder@@XZ_5.0+0x3fc>
    5ea4:	str	x21, [x20, #32]
    5ea8:	mov	w21, #0xb                   	// #11
    5eac:	ldp	x19, x20, [sp, #32]
    5eb0:	ldp	x23, x24, [sp, #64]
    5eb4:	ldp	x25, x26, [sp, #80]
    5eb8:	ldp	x27, x28, [sp, #96]
    5ebc:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    5ec0:	str	x21, [x20, #32]
    5ec4:	mov	w21, #0xa                   	// #10
    5ec8:	ldp	x19, x20, [sp, #32]
    5ecc:	ldp	x23, x24, [sp, #64]
    5ed0:	ldp	x25, x26, [sp, #80]
    5ed4:	ldp	x27, x28, [sp, #96]
    5ed8:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    5edc:	str	x21, [x20, #32]
    5ee0:	mov	w21, #0xb                   	// #11
    5ee4:	ldp	x19, x20, [sp, #32]
    5ee8:	ldp	x23, x24, [sp, #64]
    5eec:	ldp	x25, x26, [sp, #80]
    5ef0:	ldp	x27, x28, [sp, #96]
    5ef4:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    5ef8:	add	x21, sp, #0xa0
    5efc:	ldr	w1, [x20, #8]
    5f00:	mov	x0, x21
    5f04:	bl	c7b4 <lzma_check_size@@XZ_5.0+0x24>
    5f08:	mov	x3, x24
    5f0c:	mov	x2, x25
    5f10:	ldr	w1, [x20, #8]
    5f14:	mov	x0, x21
    5f18:	bl	c7f4 <lzma_check_size@@XZ_5.0+0x64>
    5f1c:	ldr	w1, [x20, #8]
    5f20:	mov	x0, x21
    5f24:	bl	c860 <lzma_check_size@@XZ_5.0+0xd0>
    5f28:	mov	x2, x28
    5f2c:	mov	x1, x21
    5f30:	add	x0, x20, #0x28
    5f34:	bl	3090 <memcpy@plt>
    5f38:	ldr	x0, [x19]
    5f3c:	mov	x2, x28
    5f40:	mov	x1, x21
    5f44:	add	x0, x23, x0
    5f48:	bl	3090 <memcpy@plt>
    5f4c:	ldr	x0, [x19]
    5f50:	add	x28, x0, x28
    5f54:	str	x28, [x19]
    5f58:	mov	w21, #0x0                   	// #0
    5f5c:	ldp	x19, x20, [sp, #32]
    5f60:	ldp	x23, x24, [sp, #64]
    5f64:	ldp	x25, x26, [sp, #80]
    5f68:	ldp	x27, x28, [sp, #96]
    5f6c:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    5f70:	mov	w21, #0xb                   	// #11
    5f74:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    5f78:	mov	w21, #0xb                   	// #11
    5f7c:	ldp	x19, x20, [sp, #32]
    5f80:	ldp	x23, x24, [sp, #64]
    5f84:	ldp	x25, x26, [sp, #80]
    5f88:	ldp	x27, x28, [sp, #96]
    5f8c:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    5f90:	mov	w21, #0xa                   	// #10
    5f94:	cmp	w21, #0xa
    5f98:	b.eq	5c24 <lzma_alone_encoder@@XZ_5.0+0x1b0>  // b.none
    5f9c:	ldp	x19, x20, [sp, #32]
    5fa0:	ldp	x23, x24, [sp, #64]
    5fa4:	ldp	x25, x26, [sp, #80]
    5fa8:	ldp	x27, x28, [sp, #96]
    5fac:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    5fb0:	ldp	x19, x20, [sp, #32]
    5fb4:	ldp	x23, x24, [sp, #64]
    5fb8:	ldp	x25, x26, [sp, #80]
    5fbc:	ldp	x27, x28, [sp, #96]
    5fc0:	mov	w0, w21
    5fc4:	ldp	x21, x22, [sp, #48]
    5fc8:	ldp	x29, x30, [sp, #16]
    5fcc:	add	sp, sp, #0x110
    5fd0:	ret
    5fd4:	ldp	x19, x20, [sp, #32]
    5fd8:	ldp	x23, x24, [sp, #64]
    5fdc:	ldp	x25, x26, [sp, #80]
    5fe0:	ldp	x27, x28, [sp, #96]
    5fe4:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    5fe8:	ldp	x19, x20, [sp, #32]
    5fec:	ldp	x23, x24, [sp, #64]
    5ff0:	ldp	x25, x26, [sp, #80]
    5ff4:	ldp	x27, x28, [sp, #96]
    5ff8:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    5ffc:	ldp	x19, x20, [sp, #32]
    6000:	ldp	x23, x24, [sp, #64]
    6004:	ldp	x25, x26, [sp, #80]
    6008:	ldp	x27, x28, [sp, #96]
    600c:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    6010:	ldp	x19, x20, [sp, #32]
    6014:	ldp	x23, x24, [sp, #64]
    6018:	ldp	x25, x26, [sp, #80]
    601c:	ldp	x27, x28, [sp, #96]
    6020:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    6024:	ldp	x19, x20, [sp, #32]
    6028:	ldp	x23, x24, [sp, #64]
    602c:	ldp	x25, x26, [sp, #80]
    6030:	ldp	x27, x28, [sp, #96]
    6034:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    6038:	ldp	x19, x20, [sp, #32]
    603c:	ldp	x23, x24, [sp, #64]
    6040:	ldp	x25, x26, [sp, #80]
    6044:	ldp	x27, x28, [sp, #96]
    6048:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    604c:	ldp	x19, x20, [sp, #32]
    6050:	ldp	x23, x24, [sp, #64]
    6054:	ldp	x25, x26, [sp, #80]
    6058:	ldp	x27, x28, [sp, #96]
    605c:	b	5fc0 <lzma_alone_encoder@@XZ_5.0+0x54c>
    6060:	stp	x29, x30, [sp, #-16]!
    6064:	mov	x29, sp
    6068:	bl	5ae8 <lzma_alone_encoder@@XZ_5.0+0x74>
    606c:	add	x1, x0, #0x3
    6070:	and	x1, x1, #0xfffffffffffffffc
    6074:	add	x1, x1, #0x5c
    6078:	cmp	x0, #0x0
    607c:	csel	x0, x1, x0, ne  // ne = any
    6080:	ldp	x29, x30, [sp], #16
    6084:	ret

0000000000006088 <lzma_block_buffer_bound@@XZ_5.0>:
    6088:	stp	x29, x30, [sp, #-16]!
    608c:	mov	x29, sp
    6090:	bl	6060 <lzma_alone_encoder@@XZ_5.0+0x5ec>
    6094:	ldp	x29, x30, [sp], #16
    6098:	ret

000000000000609c <lzma_block_buffer_encode@@XZ_5.0>:
    609c:	stp	x29, x30, [sp, #-16]!
    60a0:	mov	x29, sp
    60a4:	mov	w7, #0x1                   	// #1
    60a8:	bl	5b30 <lzma_alone_encoder@@XZ_5.0+0xbc>
    60ac:	ldp	x29, x30, [sp], #16
    60b0:	ret

00000000000060b4 <lzma_block_uncomp_encode@@XZ_5.2>:
    60b4:	stp	x29, x30, [sp, #-16]!
    60b8:	mov	x29, sp
    60bc:	mov	w7, #0x0                   	// #0
    60c0:	mov	x6, x5
    60c4:	mov	x5, x4
    60c8:	mov	x4, x3
    60cc:	mov	x3, x2
    60d0:	mov	x2, x1
    60d4:	mov	x1, #0x0                   	// #0
    60d8:	bl	5b30 <lzma_alone_encoder@@XZ_5.0+0xbc>
    60dc:	ldp	x29, x30, [sp], #16
    60e0:	ret
    60e4:	stp	x29, x30, [sp, #-48]!
    60e8:	mov	x29, sp
    60ec:	stp	x19, x20, [sp, #16]
    60f0:	stp	x21, x22, [sp, #32]
    60f4:	mov	x20, x0
    60f8:	mov	x22, x1
    60fc:	mov	x19, x2
    6100:	adrp	x21, 6000 <lzma_alone_encoder@@XZ_5.0+0x58c>
    6104:	add	x21, x21, #0xe4
    6108:	ldr	x0, [x0, #16]
    610c:	cmp	x0, x21
    6110:	b.ne	6198 <lzma_block_uncomp_encode@@XZ_5.2+0xe4>  // b.any
    6114:	str	x21, [x20, #16]
    6118:	cbz	x19, 620c <lzma_block_uncomp_encode@@XZ_5.2+0x158>
    611c:	ldr	w1, [x19]
    6120:	mov	w0, #0x8                   	// #8
    6124:	cmp	w1, #0x1
    6128:	b.hi	6188 <lzma_block_uncomp_encode@@XZ_5.2+0xd4>  // b.pmore
    612c:	ldr	w1, [x19, #8]
    6130:	mov	w0, #0xb                   	// #11
    6134:	cmp	w1, #0xf
    6138:	b.hi	6188 <lzma_block_uncomp_encode@@XZ_5.2+0xd4>  // b.pmore
    613c:	mov	w0, w1
    6140:	bl	30e0 <lzma_check_is_supported@plt>
    6144:	and	w1, w0, #0xff
    6148:	mov	w0, #0x3                   	// #3
    614c:	cbz	w1, 6188 <lzma_block_uncomp_encode@@XZ_5.2+0xd4>
    6150:	ldr	x21, [x20]
    6154:	cbz	x21, 61a4 <lzma_block_uncomp_encode@@XZ_5.2+0xf0>
    6158:	str	wzr, [x21, #80]
    615c:	str	x19, [x21, #72]
    6160:	str	xzr, [x21, #88]
    6164:	str	xzr, [x21, #96]
    6168:	str	xzr, [x21, #104]
    616c:	ldr	w1, [x19, #8]
    6170:	add	x0, x21, #0x70
    6174:	bl	c7b4 <lzma_check_size@@XZ_5.0+0x24>
    6178:	ldr	x2, [x19, #32]
    617c:	mov	x1, x22
    6180:	mov	x0, x21
    6184:	bl	6ae8 <lzma_filter_encoder_is_supported@@XZ_5.0+0x1c>
    6188:	ldp	x19, x20, [sp, #16]
    618c:	ldp	x21, x22, [sp, #32]
    6190:	ldp	x29, x30, [sp], #48
    6194:	ret
    6198:	mov	x0, x20
    619c:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    61a0:	b	6114 <lzma_block_uncomp_encode@@XZ_5.2+0x60>
    61a4:	mov	x1, x22
    61a8:	mov	x0, #0xd8                  	// #216
    61ac:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    61b0:	mov	x21, x0
    61b4:	cbz	x0, 6214 <lzma_block_uncomp_encode@@XZ_5.2+0x160>
    61b8:	str	x0, [x20]
    61bc:	adrp	x0, 6000 <lzma_alone_encoder@@XZ_5.0+0x58c>
    61c0:	add	x0, x0, #0x274
    61c4:	str	x0, [x20, #24]
    61c8:	adrp	x0, 6000 <lzma_alone_encoder@@XZ_5.0+0x58c>
    61cc:	add	x0, x0, #0x244
    61d0:	str	x0, [x20, #32]
    61d4:	adrp	x0, 6000 <lzma_alone_encoder@@XZ_5.0+0x58c>
    61d8:	add	x0, x0, #0x21c
    61dc:	str	x0, [x20, #64]
    61e0:	str	xzr, [x21]
    61e4:	mov	x0, #0xffffffffffffffff    	// #-1
    61e8:	str	x0, [x21, #8]
    61ec:	str	xzr, [x21, #16]
    61f0:	str	xzr, [x21, #24]
    61f4:	str	xzr, [x21, #32]
    61f8:	str	xzr, [x21, #40]
    61fc:	str	xzr, [x21, #48]
    6200:	str	xzr, [x21, #56]
    6204:	str	xzr, [x21, #64]
    6208:	b	6158 <lzma_block_uncomp_encode@@XZ_5.2+0xa4>
    620c:	mov	w0, #0xb                   	// #11
    6210:	b	6188 <lzma_block_uncomp_encode@@XZ_5.2+0xd4>
    6214:	mov	w0, #0x5                   	// #5
    6218:	b	6188 <lzma_block_uncomp_encode@@XZ_5.2+0xd4>
    621c:	mov	x2, x3
    6220:	ldr	w3, [x0, #80]
    6224:	cbnz	w3, 623c <lzma_block_uncomp_encode@@XZ_5.2+0x188>
    6228:	stp	x29, x30, [sp, #-16]!
    622c:	mov	x29, sp
    6230:	bl	3820 <lzma_version_string@@XZ_5.0+0x158>
    6234:	ldp	x29, x30, [sp], #16
    6238:	ret
    623c:	mov	w0, #0xb                   	// #11
    6240:	ret
    6244:	stp	x29, x30, [sp, #-32]!
    6248:	mov	x29, sp
    624c:	stp	x19, x20, [sp, #16]
    6250:	mov	x19, x0
    6254:	mov	x20, x1
    6258:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    625c:	mov	x1, x20
    6260:	mov	x0, x19
    6264:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    6268:	ldp	x19, x20, [sp, #16]
    626c:	ldp	x29, x30, [sp], #32
    6270:	ret
    6274:	sub	sp, sp, #0x70
    6278:	stp	x29, x30, [sp, #16]
    627c:	add	x29, sp, #0x10
    6280:	stp	x19, x20, [sp, #32]
    6284:	stp	x23, x24, [sp, #64]
    6288:	stp	x25, x26, [sp, #80]
    628c:	mov	x19, x0
    6290:	mov	x24, x2
    6294:	ldr	x25, [x3]
    6298:	ldr	x2, [x0, #96]
    629c:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    62a0:	sub	x0, x0, x2
    62a4:	sub	x2, x4, x25
    62a8:	mov	w26, #0x9                   	// #9
    62ac:	cmp	x0, x2
    62b0:	b.cc	62e8 <lzma_block_uncomp_encode@@XZ_5.2+0x234>  // b.lo, b.ul, b.last
    62b4:	stp	x21, x22, [sp, #48]
    62b8:	mov	x23, x3
    62bc:	mov	x22, x5
    62c0:	mov	x20, x6
    62c4:	mov	x21, x7
    62c8:	ldr	w0, [x19, #80]
    62cc:	cmp	w0, #0x1
    62d0:	b.eq	63ac <lzma_block_uncomp_encode@@XZ_5.2+0x2f8>  // b.none
    62d4:	cmp	w0, #0x2
    62d8:	b.eq	640c <lzma_block_uncomp_encode@@XZ_5.2+0x358>  // b.none
    62dc:	mov	w26, #0xb                   	// #11
    62e0:	cbz	w0, 6304 <lzma_block_uncomp_encode@@XZ_5.2+0x250>
    62e4:	ldp	x21, x22, [sp, #48]
    62e8:	mov	w0, w26
    62ec:	ldp	x19, x20, [sp, #32]
    62f0:	ldp	x23, x24, [sp, #64]
    62f4:	ldp	x25, x26, [sp, #80]
    62f8:	ldp	x29, x30, [sp, #16]
    62fc:	add	sp, sp, #0x70
    6300:	ret
    6304:	str	x27, [sp, #96]
    6308:	ldr	x27, [x6]
    630c:	ldr	w0, [sp, #112]
    6310:	str	w0, [sp]
    6314:	ldr	x8, [x19, #24]
    6318:	mov	x2, x24
    631c:	ldr	x0, [x19]
    6320:	blr	x8
    6324:	mov	w26, w0
    6328:	ldr	x0, [x20]
    632c:	sub	x27, x0, x27
    6330:	ldr	x1, [x19, #88]
    6334:	mov	x0, #0xfffffffffffffbbc    	// #-1092
    6338:	movk	x0, #0x7fff, lsl #48
    633c:	sub	x0, x0, x1
    6340:	cmp	x0, x27
    6344:	b.cc	6474 <lzma_block_uncomp_encode@@XZ_5.2+0x3c0>  // b.lo, b.ul, b.last
    6348:	ldr	x3, [x23]
    634c:	sub	x3, x3, x25
    6350:	add	x27, x1, x27
    6354:	str	x27, [x19, #88]
    6358:	ldr	x0, [x19, #96]
    635c:	add	x0, x0, x3
    6360:	str	x0, [x19, #96]
    6364:	ldr	x0, [x19, #72]
    6368:	add	x2, x24, x25
    636c:	ldr	w1, [x0, #8]
    6370:	add	x0, x19, #0x70
    6374:	bl	c7f4 <lzma_check_size@@XZ_5.0+0x64>
    6378:	cmp	w26, #0x1
    637c:	ldr	w0, [sp, #112]
    6380:	ccmp	w0, #0x1, #0x4, eq  // eq = none
    6384:	b.eq	6490 <lzma_block_uncomp_encode@@XZ_5.2+0x3dc>  // b.none
    6388:	ldr	x0, [x19, #72]
    638c:	ldr	x1, [x19, #88]
    6390:	str	x1, [x0, #16]
    6394:	ldr	x0, [x19, #72]
    6398:	ldr	x1, [x19, #96]
    639c:	str	x1, [x0, #24]
    63a0:	mov	w0, #0x1                   	// #1
    63a4:	str	w0, [x19, #80]
    63a8:	ldr	x27, [sp, #96]
    63ac:	ldr	x0, [x19, #88]
    63b0:	tst	x0, #0x3
    63b4:	b.eq	63e4 <lzma_block_uncomp_encode@@XZ_5.2+0x330>  // b.none
    63b8:	add	x0, x0, #0x1
    63bc:	ldr	x1, [x20]
    63c0:	cmp	x1, x21
    63c4:	b.cs	6484 <lzma_block_uncomp_encode@@XZ_5.2+0x3d0>  // b.hs, b.nlast
    63c8:	strb	wzr, [x22, x1]
    63cc:	add	x1, x1, #0x1
    63d0:	str	x1, [x20]
    63d4:	str	x0, [x19, #88]
    63d8:	and	x1, x0, #0x3
    63dc:	add	x0, x0, #0x1
    63e0:	cbnz	x1, 63bc <lzma_block_uncomp_encode@@XZ_5.2+0x308>
    63e4:	ldr	x0, [x19, #72]
    63e8:	ldr	w1, [x0, #8]
    63ec:	mov	w26, #0x1                   	// #1
    63f0:	cbnz	w1, 63fc <lzma_block_uncomp_encode@@XZ_5.2+0x348>
    63f4:	ldp	x21, x22, [sp, #48]
    63f8:	b	62e8 <lzma_block_uncomp_encode@@XZ_5.2+0x234>
    63fc:	add	x0, x19, #0x70
    6400:	bl	c860 <lzma_check_size@@XZ_5.0+0xd0>
    6404:	mov	w0, #0x2                   	// #2
    6408:	str	w0, [x19, #80]
    640c:	ldr	x0, [x19, #72]
    6410:	ldr	w0, [x0, #8]
    6414:	bl	3270 <lzma_check_size@plt>
    6418:	mov	w23, w0
    641c:	add	x24, x19, #0x70
    6420:	mov	x5, x21
    6424:	mov	x4, x20
    6428:	mov	x3, x22
    642c:	mov	x2, x23
    6430:	add	x1, x19, #0x68
    6434:	mov	x0, x24
    6438:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
    643c:	ldr	x0, [x19, #104]
    6440:	mov	w26, #0x0                   	// #0
    6444:	cmp	x0, x23
    6448:	b.cs	6454 <lzma_block_uncomp_encode@@XZ_5.2+0x3a0>  // b.hs, b.nlast
    644c:	ldp	x21, x22, [sp, #48]
    6450:	b	62e8 <lzma_block_uncomp_encode@@XZ_5.2+0x234>
    6454:	ldr	x0, [x19, #72]
    6458:	mov	x2, x23
    645c:	mov	x1, x24
    6460:	add	x0, x0, #0x28
    6464:	bl	3090 <memcpy@plt>
    6468:	mov	w26, #0x1                   	// #1
    646c:	ldp	x21, x22, [sp, #48]
    6470:	b	62e8 <lzma_block_uncomp_encode@@XZ_5.2+0x234>
    6474:	mov	w26, #0x9                   	// #9
    6478:	ldp	x21, x22, [sp, #48]
    647c:	ldr	x27, [sp, #96]
    6480:	b	62e8 <lzma_block_uncomp_encode@@XZ_5.2+0x234>
    6484:	mov	w26, #0x0                   	// #0
    6488:	ldp	x21, x22, [sp, #48]
    648c:	b	62e8 <lzma_block_uncomp_encode@@XZ_5.2+0x234>
    6490:	ldp	x21, x22, [sp, #48]
    6494:	ldr	x27, [sp, #96]
    6498:	b	62e8 <lzma_block_uncomp_encode@@XZ_5.2+0x234>

000000000000649c <lzma_block_encoder@@XZ_5.0>:
    649c:	stp	x29, x30, [sp, #-48]!
    64a0:	mov	x29, sp
    64a4:	stp	x19, x20, [sp, #16]
    64a8:	str	x21, [sp, #32]
    64ac:	mov	x20, x0
    64b0:	mov	x21, x1
    64b4:	bl	3950 <lzma_version_string@@XZ_5.0+0x288>
    64b8:	mov	w19, w0
    64bc:	cbz	w0, 64d4 <lzma_block_encoder@@XZ_5.0+0x38>
    64c0:	mov	w0, w19
    64c4:	ldp	x19, x20, [sp, #16]
    64c8:	ldr	x21, [sp, #32]
    64cc:	ldp	x29, x30, [sp], #48
    64d0:	ret
    64d4:	mov	x2, x21
    64d8:	ldr	x1, [x20, #48]
    64dc:	ldr	x0, [x20, #56]
    64e0:	bl	60e4 <lzma_block_uncomp_encode@@XZ_5.2+0x30>
    64e4:	mov	w19, w0
    64e8:	cbnz	w0, 6504 <lzma_block_encoder@@XZ_5.0+0x68>
    64ec:	ldr	x1, [x20, #56]
    64f0:	mov	w0, #0x1                   	// #1
    64f4:	strb	w0, [x1, #88]
    64f8:	ldr	x1, [x20, #56]
    64fc:	strb	w0, [x1, #91]
    6500:	b	64c0 <lzma_block_encoder@@XZ_5.0+0x24>
    6504:	mov	x0, x20
    6508:	bl	3320 <lzma_end@plt>
    650c:	b	64c0 <lzma_block_encoder@@XZ_5.0+0x24>

0000000000006510 <lzma_block_header_size@@XZ_5.0>:
    6510:	stp	x29, x30, [sp, #-64]!
    6514:	mov	x29, sp
    6518:	stp	x19, x20, [sp, #16]
    651c:	mov	x19, x0
    6520:	ldr	w0, [x0]
    6524:	cmp	w0, #0x1
    6528:	b.hi	65f4 <lzma_block_header_size@@XZ_5.0+0xe4>  // b.pmore
    652c:	stp	x21, x22, [sp, #32]
    6530:	ldr	x21, [x19, #16]
    6534:	cmn	x21, #0x1
    6538:	b.eq	65d8 <lzma_block_header_size@@XZ_5.0+0xc8>  // b.none
    653c:	mov	x0, x21
    6540:	bl	3480 <lzma_vli_size@plt>
    6544:	mov	w20, w0
    6548:	cmp	x21, #0x0
    654c:	mov	w0, #0xb                   	// #11
    6550:	ccmp	w20, #0x0, #0x4, ne  // ne = any
    6554:	add	w20, w20, #0x6
    6558:	b.eq	661c <lzma_block_header_size@@XZ_5.0+0x10c>  // b.none
    655c:	ldr	x0, [x19, #24]
    6560:	cmn	x0, #0x1
    6564:	b.eq	657c <lzma_block_header_size@@XZ_5.0+0x6c>  // b.none
    6568:	bl	3480 <lzma_vli_size@plt>
    656c:	mov	w1, w0
    6570:	mov	w0, #0xb                   	// #11
    6574:	cbz	w1, 6624 <lzma_block_header_size@@XZ_5.0+0x114>
    6578:	add	w20, w20, w1
    657c:	ldr	x1, [x19, #32]
    6580:	cbz	x1, 6604 <lzma_block_header_size@@XZ_5.0+0xf4>
    6584:	ldr	x0, [x1]
    6588:	cmn	x0, #0x1
    658c:	b.eq	6610 <lzma_block_header_size@@XZ_5.0+0x100>  // b.none
    6590:	mov	x21, #0x10                  	// #16
    6594:	add	x22, sp, #0x3c
    6598:	mov	x0, x22
    659c:	bl	30f0 <lzma_filter_flags_size@plt>
    65a0:	cbnz	w0, 662c <lzma_block_header_size@@XZ_5.0+0x11c>
    65a4:	ldr	w1, [sp, #60]
    65a8:	add	w20, w20, w1
    65ac:	ldr	x2, [x19, #32]
    65b0:	add	x1, x2, x21
    65b4:	ldr	x2, [x2, x21]
    65b8:	cmn	x2, #0x1
    65bc:	b.eq	65e0 <lzma_block_header_size@@XZ_5.0+0xd0>  // b.none
    65c0:	add	x21, x21, #0x10
    65c4:	cmp	x21, #0x50
    65c8:	b.ne	6598 <lzma_block_header_size@@XZ_5.0+0x88>  // b.any
    65cc:	mov	w0, #0xb                   	// #11
    65d0:	ldp	x21, x22, [sp, #32]
    65d4:	b	65f8 <lzma_block_header_size@@XZ_5.0+0xe8>
    65d8:	mov	w20, #0x6                   	// #6
    65dc:	b	655c <lzma_block_header_size@@XZ_5.0+0x4c>
    65e0:	add	w20, w20, #0x3
    65e4:	and	w20, w20, #0xfffffffc
    65e8:	str	w20, [x19, #4]
    65ec:	ldp	x21, x22, [sp, #32]
    65f0:	b	65f8 <lzma_block_header_size@@XZ_5.0+0xe8>
    65f4:	mov	w0, #0x8                   	// #8
    65f8:	ldp	x19, x20, [sp, #16]
    65fc:	ldp	x29, x30, [sp], #64
    6600:	ret
    6604:	mov	w0, #0xb                   	// #11
    6608:	ldp	x21, x22, [sp, #32]
    660c:	b	65f8 <lzma_block_header_size@@XZ_5.0+0xe8>
    6610:	mov	w0, #0xb                   	// #11
    6614:	ldp	x21, x22, [sp, #32]
    6618:	b	65f8 <lzma_block_header_size@@XZ_5.0+0xe8>
    661c:	ldp	x21, x22, [sp, #32]
    6620:	b	65f8 <lzma_block_header_size@@XZ_5.0+0xe8>
    6624:	ldp	x21, x22, [sp, #32]
    6628:	b	65f8 <lzma_block_header_size@@XZ_5.0+0xe8>
    662c:	ldp	x21, x22, [sp, #32]
    6630:	b	65f8 <lzma_block_header_size@@XZ_5.0+0xe8>

0000000000006634 <lzma_block_header_encode@@XZ_5.0>:
    6634:	stp	x29, x30, [sp, #-96]!
    6638:	mov	x29, sp
    663c:	stp	x19, x20, [sp, #16]
    6640:	stp	x21, x22, [sp, #32]
    6644:	mov	x20, x0
    6648:	mov	x21, x1
    664c:	bl	3190 <lzma_block_unpadded_size@plt>
    6650:	mov	w19, #0xb                   	// #11
    6654:	cbz	x0, 6720 <lzma_block_header_encode@@XZ_5.0+0xec>
    6658:	ldr	x0, [x20, #24]
    665c:	mov	x1, #0x8000000000000000    	// #-9223372036854775808
    6660:	add	x0, x0, x1
    6664:	mov	w19, #0xb                   	// #11
    6668:	mov	x1, #0x7ffffffffffffffe    	// #9223372036854775806
    666c:	cmp	x0, x1
    6670:	b.ls	6720 <lzma_block_header_encode@@XZ_5.0+0xec>  // b.plast
    6674:	stp	x23, x24, [sp, #48]
    6678:	ldr	w23, [x20, #4]
    667c:	sub	w23, w23, #0x4
    6680:	mov	w24, w23
    6684:	lsr	w0, w23, #2
    6688:	strb	w0, [x21]
    668c:	strb	wzr, [x21, #1]
    6690:	mov	x0, #0x2                   	// #2
    6694:	str	x0, [sp, #88]
    6698:	ldr	x0, [x20, #16]
    669c:	cmn	x0, #0x1
    66a0:	b.ne	6734 <lzma_block_header_encode@@XZ_5.0+0x100>  // b.any
    66a4:	ldr	x0, [x20, #24]
    66a8:	cmn	x0, #0x1
    66ac:	b.ne	6760 <lzma_block_header_encode@@XZ_5.0+0x12c>  // b.any
    66b0:	ldr	x0, [x20, #32]
    66b4:	cbz	x0, 67ec <lzma_block_header_encode@@XZ_5.0+0x1b8>
    66b8:	ldr	x0, [x0]
    66bc:	cmn	x0, #0x1
    66c0:	b.eq	67f8 <lzma_block_header_encode@@XZ_5.0+0x1c4>  // b.none
    66c4:	stp	x25, x26, [sp, #64]
    66c8:	mov	x22, #0x0                   	// #0
    66cc:	add	x26, sp, #0x58
    66d0:	lsl	x25, x22, #4
    66d4:	ldr	x0, [x20, #32]
    66d8:	mov	x3, x24
    66dc:	mov	x2, x26
    66e0:	mov	x1, x21
    66e4:	add	x0, x0, x25
    66e8:	bl	3350 <lzma_filter_flags_encode@plt>
    66ec:	mov	w19, w0
    66f0:	cbnz	w0, 6814 <lzma_block_header_encode@@XZ_5.0+0x1e0>
    66f4:	add	x22, x22, #0x1
    66f8:	ldr	x0, [x20, #32]
    66fc:	add	x0, x0, x25
    6700:	ldr	x0, [x0, #16]
    6704:	cmn	x0, #0x1
    6708:	b.eq	678c <lzma_block_header_encode@@XZ_5.0+0x158>  // b.none
    670c:	cmp	x22, #0x4
    6710:	b.ne	66d0 <lzma_block_header_encode@@XZ_5.0+0x9c>  // b.any
    6714:	mov	w19, #0xb                   	// #11
    6718:	ldp	x23, x24, [sp, #48]
    671c:	ldp	x25, x26, [sp, #64]
    6720:	mov	w0, w19
    6724:	ldp	x19, x20, [sp, #16]
    6728:	ldp	x21, x22, [sp, #32]
    672c:	ldp	x29, x30, [sp], #96
    6730:	ret
    6734:	mov	x4, x24
    6738:	add	x3, sp, #0x58
    673c:	mov	x2, x21
    6740:	mov	x1, #0x0                   	// #0
    6744:	bl	3450 <lzma_vli_encode@plt>
    6748:	mov	w19, w0
    674c:	cbnz	w0, 6804 <lzma_block_header_encode@@XZ_5.0+0x1d0>
    6750:	ldrb	w0, [x21, #1]
    6754:	orr	w0, w0, #0x40
    6758:	strb	w0, [x21, #1]
    675c:	b	66a4 <lzma_block_header_encode@@XZ_5.0+0x70>
    6760:	mov	x4, x24
    6764:	add	x3, sp, #0x58
    6768:	mov	x2, x21
    676c:	mov	x1, #0x0                   	// #0
    6770:	bl	3450 <lzma_vli_encode@plt>
    6774:	mov	w19, w0
    6778:	cbnz	w0, 680c <lzma_block_header_encode@@XZ_5.0+0x1d8>
    677c:	ldrb	w0, [x21, #1]
    6780:	orr	w0, w0, #0xffffff80
    6784:	strb	w0, [x21, #1]
    6788:	b	66b0 <lzma_block_header_encode@@XZ_5.0+0x7c>
    678c:	sub	w0, w22, #0x1
    6790:	ldrb	w1, [x21, #1]
    6794:	orr	w0, w0, w1
    6798:	strb	w0, [x21, #1]
    679c:	ldr	x0, [sp, #88]
    67a0:	sub	x2, x24, x0
    67a4:	mov	w1, #0x0                   	// #0
    67a8:	add	x0, x21, x0
    67ac:	bl	3230 <memset@plt>
    67b0:	add	x20, x21, x24
    67b4:	mov	w2, #0x0                   	// #0
    67b8:	mov	x1, x24
    67bc:	mov	x0, x21
    67c0:	bl	31c0 <lzma_crc32@plt>
    67c4:	strb	w0, [x21, w23, uxtw]
    67c8:	lsr	w1, w0, #8
    67cc:	strb	w1, [x20, #1]
    67d0:	lsr	w1, w0, #16
    67d4:	strb	w1, [x20, #2]
    67d8:	lsr	w0, w0, #24
    67dc:	strb	w0, [x20, #3]
    67e0:	ldp	x23, x24, [sp, #48]
    67e4:	ldp	x25, x26, [sp, #64]
    67e8:	b	6720 <lzma_block_header_encode@@XZ_5.0+0xec>
    67ec:	mov	w19, #0xb                   	// #11
    67f0:	ldp	x23, x24, [sp, #48]
    67f4:	b	6720 <lzma_block_header_encode@@XZ_5.0+0xec>
    67f8:	mov	w19, #0xb                   	// #11
    67fc:	ldp	x23, x24, [sp, #48]
    6800:	b	6720 <lzma_block_header_encode@@XZ_5.0+0xec>
    6804:	ldp	x23, x24, [sp, #48]
    6808:	b	6720 <lzma_block_header_encode@@XZ_5.0+0xec>
    680c:	ldp	x23, x24, [sp, #48]
    6810:	b	6720 <lzma_block_header_encode@@XZ_5.0+0xec>
    6814:	ldp	x23, x24, [sp, #48]
    6818:	ldp	x25, x26, [sp, #64]
    681c:	b	6720 <lzma_block_header_encode@@XZ_5.0+0xec>

0000000000006820 <lzma_easy_buffer_encode@@XZ_5.0>:
    6820:	stp	x29, x30, [sp, #-272]!
    6824:	mov	x29, sp
    6828:	stp	x19, x20, [sp, #16]
    682c:	stp	x21, x22, [sp, #32]
    6830:	stp	x23, x24, [sp, #48]
    6834:	str	x25, [sp, #64]
    6838:	mov	w19, w1
    683c:	mov	x20, x2
    6840:	mov	x21, x3
    6844:	mov	x22, x4
    6848:	mov	x23, x5
    684c:	mov	x24, x6
    6850:	mov	x25, x7
    6854:	mov	w1, w0
    6858:	add	x0, sp, #0x50
    685c:	bl	3ff8 <lzma_block_total_size@@XZ_5.0+0x24>
    6860:	and	w0, w0, #0xff
    6864:	cbnz	w0, 68a4 <lzma_easy_buffer_encode@@XZ_5.0+0x84>
    6868:	mov	x7, x25
    686c:	mov	x6, x24
    6870:	mov	x5, x23
    6874:	mov	x4, x22
    6878:	mov	x3, x21
    687c:	mov	x2, x20
    6880:	mov	w1, w19
    6884:	add	x0, sp, #0x50
    6888:	bl	31f0 <lzma_stream_buffer_encode@plt>
    688c:	ldp	x19, x20, [sp, #16]
    6890:	ldp	x21, x22, [sp, #32]
    6894:	ldp	x23, x24, [sp, #48]
    6898:	ldr	x25, [sp, #64]
    689c:	ldp	x29, x30, [sp], #272
    68a0:	ret
    68a4:	mov	w0, #0x8                   	// #8
    68a8:	b	688c <lzma_easy_buffer_encode@@XZ_5.0+0x6c>

00000000000068ac <lzma_easy_encoder@@XZ_5.0>:
    68ac:	stp	x29, x30, [sp, #-224]!
    68b0:	mov	x29, sp
    68b4:	stp	x19, x20, [sp, #16]
    68b8:	mov	x19, x0
    68bc:	mov	w20, w2
    68c0:	add	x0, sp, #0x20
    68c4:	bl	3ff8 <lzma_block_total_size@@XZ_5.0+0x24>
    68c8:	and	w1, w0, #0xff
    68cc:	mov	w0, #0x8                   	// #8
    68d0:	cbnz	w1, 68e4 <lzma_easy_encoder@@XZ_5.0+0x38>
    68d4:	mov	w2, w20
    68d8:	add	x1, sp, #0x20
    68dc:	mov	x0, x19
    68e0:	bl	34a0 <lzma_stream_encoder@plt>
    68e4:	ldp	x19, x20, [sp, #16]
    68e8:	ldp	x29, x30, [sp], #224
    68ec:	ret

00000000000068f0 <lzma_easy_encoder_memusage@@XZ_5.0>:
    68f0:	stp	x29, x30, [sp, #-208]!
    68f4:	mov	x29, sp
    68f8:	mov	w1, w0
    68fc:	add	x0, sp, #0x10
    6900:	bl	3ff8 <lzma_block_total_size@@XZ_5.0+0x24>
    6904:	and	w0, w0, #0xff
    6908:	cbnz	w0, 691c <lzma_easy_encoder_memusage@@XZ_5.0+0x2c>
    690c:	add	x0, sp, #0x10
    6910:	bl	3220 <lzma_raw_encoder_memusage@plt>
    6914:	ldp	x29, x30, [sp], #208
    6918:	ret
    691c:	mov	x0, #0xffffffff            	// #4294967295
    6920:	b	6914 <lzma_easy_encoder_memusage@@XZ_5.0+0x24>

0000000000006924 <lzma_raw_buffer_encode@@XZ_5.0>:
    6924:	sub	sp, sp, #0xb0
    6928:	stp	x29, x30, [sp, #16]
    692c:	add	x29, sp, #0x10
    6930:	stp	x19, x20, [sp, #32]
    6934:	cmp	x2, #0x0
    6938:	ccmp	x3, #0x0, #0x4, eq  // eq = none
    693c:	mov	w20, #0xb                   	// #11
    6940:	b.ne	6a50 <lzma_raw_buffer_encode@@XZ_5.0+0x12c>  // b.any
    6944:	stp	x21, x22, [sp, #48]
    6948:	stp	x23, x24, [sp, #64]
    694c:	stp	x25, x26, [sp, #80]
    6950:	mov	x25, x1
    6954:	mov	x23, x2
    6958:	mov	x24, x3
    695c:	mov	x21, x4
    6960:	mov	x19, x5
    6964:	mov	x22, x6
    6968:	cmp	x4, #0x0
    696c:	mov	w20, #0xb                   	// #11
    6970:	ccmp	x5, #0x0, #0x4, ne  // ne = any
    6974:	b.eq	6a34 <lzma_raw_buffer_encode@@XZ_5.0+0x110>  // b.none
    6978:	ldr	x1, [x5]
    697c:	cmp	x1, x6
    6980:	b.hi	6a44 <lzma_raw_buffer_encode@@XZ_5.0+0x120>  // b.pmore
    6984:	str	xzr, [sp, #104]
    6988:	mov	x1, #0xffffffffffffffff    	// #-1
    698c:	str	x1, [sp, #112]
    6990:	str	xzr, [sp, #120]
    6994:	str	xzr, [sp, #128]
    6998:	str	xzr, [sp, #136]
    699c:	str	xzr, [sp, #144]
    69a0:	str	xzr, [sp, #152]
    69a4:	str	xzr, [sp, #160]
    69a8:	str	xzr, [sp, #168]
    69ac:	mov	x2, x0
    69b0:	mov	x1, x25
    69b4:	add	x0, sp, #0x68
    69b8:	bl	6ae8 <lzma_filter_encoder_is_supported@@XZ_5.0+0x1c>
    69bc:	mov	w20, w0
    69c0:	cbnz	w0, 6a64 <lzma_raw_buffer_encode@@XZ_5.0+0x140>
    69c4:	ldr	x26, [x19]
    69c8:	str	xzr, [sp, #96]
    69cc:	mov	w0, #0x3                   	// #3
    69d0:	str	w0, [sp]
    69d4:	mov	x7, x22
    69d8:	mov	x6, x19
    69dc:	mov	x5, x21
    69e0:	mov	x4, x24
    69e4:	add	x3, sp, #0x60
    69e8:	mov	x2, x23
    69ec:	mov	x1, x25
    69f0:	ldr	x0, [sp, #104]
    69f4:	ldr	x8, [sp, #128]
    69f8:	blr	x8
    69fc:	mov	w21, w0
    6a00:	mov	x1, x25
    6a04:	add	x0, sp, #0x68
    6a08:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    6a0c:	cmp	w21, #0x1
    6a10:	b.eq	6a74 <lzma_raw_buffer_encode@@XZ_5.0+0x150>  // b.none
    6a14:	cmp	w21, #0x0
    6a18:	str	x26, [x19]
    6a1c:	mov	w20, #0xa                   	// #10
    6a20:	csel	w20, w21, w20, ne  // ne = any
    6a24:	ldp	x21, x22, [sp, #48]
    6a28:	ldp	x23, x24, [sp, #64]
    6a2c:	ldp	x25, x26, [sp, #80]
    6a30:	b	6a50 <lzma_raw_buffer_encode@@XZ_5.0+0x12c>
    6a34:	ldp	x21, x22, [sp, #48]
    6a38:	ldp	x23, x24, [sp, #64]
    6a3c:	ldp	x25, x26, [sp, #80]
    6a40:	b	6a50 <lzma_raw_buffer_encode@@XZ_5.0+0x12c>
    6a44:	ldp	x21, x22, [sp, #48]
    6a48:	ldp	x23, x24, [sp, #64]
    6a4c:	ldp	x25, x26, [sp, #80]
    6a50:	mov	w0, w20
    6a54:	ldp	x19, x20, [sp, #32]
    6a58:	ldp	x29, x30, [sp, #16]
    6a5c:	add	sp, sp, #0xb0
    6a60:	ret
    6a64:	ldp	x21, x22, [sp, #48]
    6a68:	ldp	x23, x24, [sp, #64]
    6a6c:	ldp	x25, x26, [sp, #80]
    6a70:	b	6a50 <lzma_raw_buffer_encode@@XZ_5.0+0x12c>
    6a74:	ldp	x21, x22, [sp, #48]
    6a78:	ldp	x23, x24, [sp, #64]
    6a7c:	ldp	x25, x26, [sp, #80]
    6a80:	b	6a50 <lzma_raw_buffer_encode@@XZ_5.0+0x12c>
    6a84:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    6a88:	add	x1, x1, #0xa00
    6a8c:	mov	x2, #0x0                   	// #0
    6a90:	ldr	x3, [x1]
    6a94:	cmp	x3, x0
    6a98:	b.eq	6ab4 <lzma_raw_buffer_encode@@XZ_5.0+0x190>  // b.none
    6a9c:	add	x2, x2, #0x1
    6aa0:	add	x1, x1, #0x38
    6aa4:	cmp	x2, #0x9
    6aa8:	b.ne	6a90 <lzma_raw_buffer_encode@@XZ_5.0+0x16c>  // b.any
    6aac:	mov	x0, #0x0                   	// #0
    6ab0:	ret
    6ab4:	lsl	x0, x2, #3
    6ab8:	sub	x2, x0, x2
    6abc:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    6ac0:	add	x0, x0, #0xa00
    6ac4:	add	x0, x0, x2, lsl #3
    6ac8:	b	6ab0 <lzma_raw_buffer_encode@@XZ_5.0+0x18c>

0000000000006acc <lzma_filter_encoder_is_supported@@XZ_5.0>:
    6acc:	stp	x29, x30, [sp, #-16]!
    6ad0:	mov	x29, sp
    6ad4:	bl	6a84 <lzma_raw_buffer_encode@@XZ_5.0+0x160>
    6ad8:	cmp	x0, #0x0
    6adc:	cset	w0, ne  // ne = any
    6ae0:	ldp	x29, x30, [sp], #16
    6ae4:	ret
    6ae8:	stp	x29, x30, [sp, #-16]!
    6aec:	mov	x29, sp
    6af0:	mov	w4, #0x1                   	// #1
    6af4:	adrp	x3, 6000 <lzma_alone_encoder@@XZ_5.0+0x58c>
    6af8:	add	x3, x3, #0xa84
    6afc:	bl	42d4 <lzma_filters_copy@@XZ_5.0+0x19c>
    6b00:	ldp	x29, x30, [sp], #16
    6b04:	ret

0000000000006b08 <lzma_raw_encoder@@XZ_5.0>:
    6b08:	stp	x29, x30, [sp, #-48]!
    6b0c:	mov	x29, sp
    6b10:	stp	x19, x20, [sp, #16]
    6b14:	str	x21, [sp, #32]
    6b18:	mov	x20, x0
    6b1c:	mov	x21, x1
    6b20:	bl	3950 <lzma_version_string@@XZ_5.0+0x288>
    6b24:	mov	w19, w0
    6b28:	cbz	w0, 6b40 <lzma_raw_encoder@@XZ_5.0+0x38>
    6b2c:	mov	w0, w19
    6b30:	ldp	x19, x20, [sp, #16]
    6b34:	ldr	x21, [sp, #32]
    6b38:	ldp	x29, x30, [sp], #48
    6b3c:	ret
    6b40:	mov	w4, #0x1                   	// #1
    6b44:	adrp	x3, 6000 <lzma_alone_encoder@@XZ_5.0+0x58c>
    6b48:	add	x3, x3, #0xa84
    6b4c:	mov	x2, x21
    6b50:	ldr	x1, [x20, #48]
    6b54:	ldr	x0, [x20, #56]
    6b58:	bl	42d4 <lzma_filters_copy@@XZ_5.0+0x19c>
    6b5c:	mov	w19, w0
    6b60:	cbnz	w0, 6b84 <lzma_raw_encoder@@XZ_5.0+0x7c>
    6b64:	ldr	x1, [x20, #56]
    6b68:	mov	w0, #0x1                   	// #1
    6b6c:	strb	w0, [x1, #88]
    6b70:	ldr	x1, [x20, #56]
    6b74:	strb	w0, [x1, #89]
    6b78:	ldr	x1, [x20, #56]
    6b7c:	strb	w0, [x1, #91]
    6b80:	b	6b2c <lzma_raw_encoder@@XZ_5.0+0x24>
    6b84:	mov	x0, x20
    6b88:	bl	3320 <lzma_end@plt>
    6b8c:	b	6b2c <lzma_raw_encoder@@XZ_5.0+0x24>

0000000000006b90 <lzma_raw_encoder_memusage@@XZ_5.0>:
    6b90:	stp	x29, x30, [sp, #-16]!
    6b94:	mov	x29, sp
    6b98:	mov	x1, x0
    6b9c:	adrp	x0, 6000 <lzma_alone_encoder@@XZ_5.0+0x58c>
    6ba0:	add	x0, x0, #0xa84
    6ba4:	bl	4488 <lzma_filters_copy@@XZ_5.0+0x350>
    6ba8:	ldp	x29, x30, [sp], #16
    6bac:	ret

0000000000006bb0 <lzma_filters_update@@XZ_5.0>:
    6bb0:	stp	x29, x30, [sp, #-128]!
    6bb4:	mov	x29, sp
    6bb8:	stp	x19, x20, [sp, #16]
    6bbc:	str	x21, [sp, #32]
    6bc0:	mov	x20, x0
    6bc4:	ldr	x21, [x0, #56]
    6bc8:	ldr	x0, [x21, #64]
    6bcc:	cbz	x0, 6c6c <lzma_filters_update@@XZ_5.0+0xbc>
    6bd0:	mov	x19, x1
    6bd4:	mov	x0, x1
    6bd8:	bl	3220 <lzma_raw_encoder_memusage@plt>
    6bdc:	cmn	x0, #0x1
    6be0:	b.eq	6c74 <lzma_filters_update@@XZ_5.0+0xc4>  // b.none
    6be4:	ldr	x0, [x19, #16]
    6be8:	cmn	x0, #0x1
    6bec:	b.eq	6c64 <lzma_filters_update@@XZ_5.0+0xb4>  // b.none
    6bf0:	mov	x2, #0x1                   	// #1
    6bf4:	add	x2, x2, #0x1
    6bf8:	lsl	x3, x2, #4
    6bfc:	ldr	x3, [x19, x3]
    6c00:	cmn	x3, #0x1
    6c04:	b.ne	6bf4 <lzma_filters_update@@XZ_5.0+0x44>  // b.any
    6c08:	cbz	x2, 6c30 <lzma_filters_update@@XZ_5.0+0x80>
    6c0c:	mov	x0, x19
    6c10:	add	x3, sp, #0x30
    6c14:	add	x3, x3, x2, lsl #4
    6c18:	mov	x1, #0x0                   	// #0
    6c1c:	ldp	x4, x5, [x0], #16
    6c20:	stp	x4, x5, [x3, #-16]!
    6c24:	add	x1, x1, #0x1
    6c28:	cmp	x2, x1
    6c2c:	b.hi	6c1c <lzma_filters_update@@XZ_5.0+0x6c>  // b.pmore
    6c30:	lsl	x2, x2, #4
    6c34:	add	x3, sp, #0x30
    6c38:	mov	x0, #0xffffffffffffffff    	// #-1
    6c3c:	str	x0, [x3, x2]
    6c40:	ldr	x4, [x21, #64]
    6c44:	mov	x2, x19
    6c48:	ldr	x1, [x20, #48]
    6c4c:	ldr	x0, [x21]
    6c50:	blr	x4
    6c54:	ldp	x19, x20, [sp, #16]
    6c58:	ldr	x21, [sp, #32]
    6c5c:	ldp	x29, x30, [sp], #128
    6c60:	ret
    6c64:	mov	x2, #0x1                   	// #1
    6c68:	b	6c0c <lzma_filters_update@@XZ_5.0+0x5c>
    6c6c:	mov	w0, #0xb                   	// #11
    6c70:	b	6c54 <lzma_filters_update@@XZ_5.0+0xa4>
    6c74:	mov	w0, #0x8                   	// #8
    6c78:	b	6c54 <lzma_filters_update@@XZ_5.0+0xa4>
    6c7c:	stp	x29, x30, [sp, #-32]!
    6c80:	mov	x29, sp
    6c84:	stp	x19, x20, [sp, #16]
    6c88:	mov	x19, x0
    6c8c:	ldr	x0, [x0]
    6c90:	cmn	x0, #0x1
    6c94:	b.eq	6cd4 <lzma_filters_update@@XZ_5.0+0x124>  // b.none
    6c98:	add	x19, x19, #0x10
    6c9c:	mov	x20, #0x0                   	// #0
    6ca0:	b	6cb0 <lzma_filters_update@@XZ_5.0+0x100>
    6ca4:	ldr	x0, [x19], #16
    6ca8:	cmn	x0, #0x1
    6cac:	b.eq	6ce0 <lzma_filters_update@@XZ_5.0+0x130>  // b.none
    6cb0:	bl	6a84 <lzma_raw_buffer_encode@@XZ_5.0+0x160>
    6cb4:	ldr	x1, [x0, #24]
    6cb8:	cbz	x1, 6ca4 <lzma_filters_update@@XZ_5.0+0xf4>
    6cbc:	ldur	x0, [x19, #-8]
    6cc0:	blr	x1
    6cc4:	cbz	x0, 6cdc <lzma_filters_update@@XZ_5.0+0x12c>
    6cc8:	cmp	x20, x0
    6ccc:	csel	x20, x20, x0, cs  // cs = hs, nlast
    6cd0:	b	6ca4 <lzma_filters_update@@XZ_5.0+0xf4>
    6cd4:	mov	x20, #0x0                   	// #0
    6cd8:	b	6ce0 <lzma_filters_update@@XZ_5.0+0x130>
    6cdc:	mov	x20, x0
    6ce0:	mov	x0, x20
    6ce4:	ldp	x19, x20, [sp, #16]
    6ce8:	ldp	x29, x30, [sp], #32
    6cec:	ret

0000000000006cf0 <lzma_properties_size@@XZ_5.0>:
    6cf0:	stp	x29, x30, [sp, #-48]!
    6cf4:	mov	x29, sp
    6cf8:	stp	x19, x20, [sp, #16]
    6cfc:	str	x21, [sp, #32]
    6d00:	mov	x20, x0
    6d04:	mov	x19, x1
    6d08:	ldr	x21, [x1]
    6d0c:	mov	x0, x21
    6d10:	bl	6a84 <lzma_raw_buffer_encode@@XZ_5.0+0x160>
    6d14:	cbz	x0, 6d3c <lzma_properties_size@@XZ_5.0+0x4c>
    6d18:	ldr	x2, [x0, #32]
    6d1c:	cbz	x2, 6d50 <lzma_properties_size@@XZ_5.0+0x60>
    6d20:	ldr	x1, [x19, #8]
    6d24:	mov	x0, x20
    6d28:	blr	x2
    6d2c:	ldp	x19, x20, [sp, #16]
    6d30:	ldr	x21, [sp, #32]
    6d34:	ldp	x29, x30, [sp], #48
    6d38:	ret
    6d3c:	cmp	x21, #0x0
    6d40:	mov	w0, #0x8                   	// #8
    6d44:	mov	w1, #0xb                   	// #11
    6d48:	csel	w0, w0, w1, ge  // ge = tcont
    6d4c:	b	6d2c <lzma_properties_size@@XZ_5.0+0x3c>
    6d50:	ldr	w0, [x0, #40]
    6d54:	str	w0, [x20]
    6d58:	mov	w0, #0x0                   	// #0
    6d5c:	b	6d2c <lzma_properties_size@@XZ_5.0+0x3c>

0000000000006d60 <lzma_properties_encode@@XZ_5.0>:
    6d60:	stp	x29, x30, [sp, #-32]!
    6d64:	mov	x29, sp
    6d68:	stp	x19, x20, [sp, #16]
    6d6c:	mov	x19, x0
    6d70:	mov	x20, x1
    6d74:	ldr	x0, [x0]
    6d78:	bl	6a84 <lzma_raw_buffer_encode@@XZ_5.0+0x160>
    6d7c:	cbz	x0, 6da0 <lzma_properties_encode@@XZ_5.0+0x40>
    6d80:	ldr	x2, [x0, #48]
    6d84:	cbz	x2, 6da8 <lzma_properties_encode@@XZ_5.0+0x48>
    6d88:	mov	x1, x20
    6d8c:	ldr	x0, [x19, #8]
    6d90:	blr	x2
    6d94:	ldp	x19, x20, [sp, #16]
    6d98:	ldp	x29, x30, [sp], #32
    6d9c:	ret
    6da0:	mov	w0, #0xb                   	// #11
    6da4:	b	6d94 <lzma_properties_encode@@XZ_5.0+0x34>
    6da8:	mov	w0, #0x0                   	// #0
    6dac:	b	6d94 <lzma_properties_encode@@XZ_5.0+0x34>

0000000000006db0 <lzma_filter_flags_size@@XZ_5.0>:
    6db0:	stp	x29, x30, [sp, #-48]!
    6db4:	mov	x29, sp
    6db8:	stp	x19, x20, [sp, #16]
    6dbc:	stp	x21, x22, [sp, #32]
    6dc0:	mov	x20, x0
    6dc4:	mov	x19, x1
    6dc8:	ldr	x1, [x1]
    6dcc:	mov	x0, #0x3fffffffffffffff    	// #4611686018427387903
    6dd0:	mov	w21, #0xb                   	// #11
    6dd4:	cmp	x1, x0
    6dd8:	b.hi	6e14 <lzma_filter_flags_size@@XZ_5.0+0x64>  // b.pmore
    6ddc:	mov	x1, x19
    6de0:	mov	x0, x20
    6de4:	bl	3370 <lzma_properties_size@plt>
    6de8:	mov	w21, w0
    6dec:	cbnz	w0, 6e14 <lzma_filter_flags_size@@XZ_5.0+0x64>
    6df0:	ldr	w22, [x20]
    6df4:	ldr	x0, [x19]
    6df8:	bl	3480 <lzma_vli_size@plt>
    6dfc:	mov	w19, w0
    6e00:	mov	w0, w22
    6e04:	bl	3480 <lzma_vli_size@plt>
    6e08:	add	w19, w19, w0
    6e0c:	add	w19, w19, w22
    6e10:	str	w19, [x20]
    6e14:	mov	w0, w21
    6e18:	ldp	x19, x20, [sp, #16]
    6e1c:	ldp	x21, x22, [sp, #32]
    6e20:	ldp	x29, x30, [sp], #48
    6e24:	ret

0000000000006e28 <lzma_filter_flags_encode@@XZ_5.0>:
    6e28:	stp	x29, x30, [sp, #-64]!
    6e2c:	mov	x29, sp
    6e30:	stp	x19, x20, [sp, #16]
    6e34:	stp	x21, x22, [sp, #32]
    6e38:	mov	x19, x0
    6e3c:	mov	x21, x1
    6e40:	ldr	x0, [x0]
    6e44:	mov	x1, #0x3fffffffffffffff    	// #4611686018427387903
    6e48:	cmp	x0, x1
    6e4c:	b.hi	6ed8 <lzma_filter_flags_encode@@XZ_5.0+0xb0>  // b.pmore
    6e50:	mov	x20, x2
    6e54:	mov	x22, x3
    6e58:	mov	x4, x3
    6e5c:	mov	x3, x2
    6e60:	mov	x2, x21
    6e64:	mov	x1, #0x0                   	// #0
    6e68:	bl	3450 <lzma_vli_encode@plt>
    6e6c:	cbnz	w0, 6edc <lzma_filter_flags_encode@@XZ_5.0+0xb4>
    6e70:	mov	x1, x19
    6e74:	add	x0, sp, #0x3c
    6e78:	bl	3370 <lzma_properties_size@plt>
    6e7c:	cbnz	w0, 6edc <lzma_filter_flags_encode@@XZ_5.0+0xb4>
    6e80:	mov	x4, x22
    6e84:	mov	x3, x20
    6e88:	mov	x2, x21
    6e8c:	mov	x1, #0x0                   	// #0
    6e90:	ldr	w0, [sp, #60]
    6e94:	bl	3450 <lzma_vli_encode@plt>
    6e98:	cbnz	w0, 6edc <lzma_filter_flags_encode@@XZ_5.0+0xb4>
    6e9c:	ldr	x1, [x20]
    6ea0:	sub	x3, x22, x1
    6ea4:	ldr	w2, [sp, #60]
    6ea8:	mov	w0, #0xb                   	// #11
    6eac:	cmp	x3, x2
    6eb0:	b.cc	6edc <lzma_filter_flags_encode@@XZ_5.0+0xb4>  // b.lo, b.ul, b.last
    6eb4:	add	x1, x21, x1
    6eb8:	mov	x0, x19
    6ebc:	bl	3400 <lzma_properties_encode@plt>
    6ec0:	cbnz	w0, 6edc <lzma_filter_flags_encode@@XZ_5.0+0xb4>
    6ec4:	ldr	w2, [sp, #60]
    6ec8:	ldr	x1, [x20]
    6ecc:	add	x1, x1, x2
    6ed0:	str	x1, [x20]
    6ed4:	b	6edc <lzma_filter_flags_encode@@XZ_5.0+0xb4>
    6ed8:	mov	w0, #0xb                   	// #11
    6edc:	ldp	x19, x20, [sp, #16]
    6ee0:	ldp	x21, x22, [sp, #32]
    6ee4:	ldp	x29, x30, [sp], #64
    6ee8:	ret
    6eec:	stp	x29, x30, [sp, #-16]!
    6ef0:	mov	x29, sp
    6ef4:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    6ef8:	ldp	x29, x30, [sp], #16
    6efc:	ret
    6f00:	stp	x29, x30, [sp, #-96]!
    6f04:	mov	x29, sp
    6f08:	stp	x19, x20, [sp, #16]
    6f0c:	stp	x21, x22, [sp, #32]
    6f10:	stp	x23, x24, [sp, #48]
    6f14:	mov	x19, x0
    6f18:	mov	x22, x5
    6f1c:	mov	x20, x6
    6f20:	ldr	x24, [x6]
    6f24:	cmp	x24, x7
    6f28:	b.cs	7134 <lzma_filter_flags_encode@@XZ_5.0+0x30c>  // b.hs, b.nlast
    6f2c:	stp	x25, x26, [sp, #64]
    6f30:	stp	x27, x28, [sp, #80]
    6f34:	mov	x21, x7
    6f38:	mov	x1, x24
    6f3c:	add	x25, x0, #0x140
    6f40:	add	x27, x0, #0x10
    6f44:	mov	w26, #0x2                   	// #2
    6f48:	mov	w28, #0x4                   	// #4
    6f4c:	b	7084 <lzma_filter_flags_encode@@XZ_5.0+0x25c>
    6f50:	cbnz	w0, 6f6c <lzma_filter_flags_encode@@XZ_5.0+0x144>
    6f54:	strb	wzr, [x22, x1]
    6f58:	add	x1, x1, #0x1
    6f5c:	str	x1, [x20]
    6f60:	mov	w0, #0x1                   	// #1
    6f64:	str	w0, [x19]
    6f68:	b	7078 <lzma_filter_flags_encode@@XZ_5.0+0x250>
    6f6c:	mov	w23, #0xb                   	// #11
    6f70:	ldp	x25, x26, [sp, #64]
    6f74:	ldp	x27, x28, [sp, #80]
    6f78:	mov	w0, w23
    6f7c:	ldp	x19, x20, [sp, #16]
    6f80:	ldp	x21, x22, [sp, #32]
    6f84:	ldp	x23, x24, [sp, #48]
    6f88:	ldp	x29, x30, [sp], #96
    6f8c:	ret
    6f90:	cmp	w0, #0x5
    6f94:	b.eq	70cc <lzma_filter_flags_encode@@XZ_5.0+0x2a4>  // b.none
    6f98:	cmp	w0, #0x6
    6f9c:	b.ne	6fe8 <lzma_filter_flags_encode@@XZ_5.0+0x1c0>  // b.any
    6fa0:	ldr	x0, [x20]
    6fa4:	cmp	x0, x21
    6fa8:	b.eq	7154 <lzma_filter_flags_encode@@XZ_5.0+0x32c>  // b.none
    6fac:	ldr	x1, [x19, #320]
    6fb0:	lsl	w3, w1, #3
    6fb4:	ldr	w2, [x19, #328]
    6fb8:	lsr	w2, w2, w3
    6fbc:	strb	w2, [x22, x0]
    6fc0:	add	x0, x0, #0x1
    6fc4:	str	x0, [x20]
    6fc8:	add	x0, x1, #0x1
    6fcc:	str	x0, [x19, #320]
    6fd0:	cmp	x0, #0x3
    6fd4:	b.ls	6fa0 <lzma_filter_flags_encode@@XZ_5.0+0x178>  // b.plast
    6fd8:	mov	w23, #0x1                   	// #1
    6fdc:	ldp	x25, x26, [sp, #64]
    6fe0:	ldp	x27, x28, [sp, #80]
    6fe4:	b	6f78 <lzma_filter_flags_encode@@XZ_5.0+0x150>
    6fe8:	mov	w23, #0xb                   	// #11
    6fec:	ldp	x25, x26, [sp, #64]
    6ff0:	ldp	x27, x28, [sp, #80]
    6ff4:	b	6f78 <lzma_filter_flags_encode@@XZ_5.0+0x150>
    6ff8:	ldr	x0, [x19, #8]
    6ffc:	bl	34e0 <lzma_index_block_count@plt>
    7000:	mov	x4, x21
    7004:	mov	x3, x20
    7008:	mov	x2, x22
    700c:	mov	x1, x25
    7010:	bl	3450 <lzma_vli_encode@plt>
    7014:	mov	w23, w0
    7018:	cmp	w0, #0x1
    701c:	b.ne	713c <lzma_filter_flags_encode@@XZ_5.0+0x314>  // b.any
    7020:	str	xzr, [x19, #320]
    7024:	str	w28, [x19]
    7028:	b	7078 <lzma_filter_flags_encode@@XZ_5.0+0x250>
    702c:	mov	w1, w26
    7030:	mov	x0, x27
    7034:	bl	3460 <lzma_index_iter_next@plt>
    7038:	and	w0, w0, #0xff
    703c:	cbnz	w0, 70b0 <lzma_filter_flags_encode@@XZ_5.0+0x288>
    7040:	str	w26, [x19]
    7044:	ldr	x0, [x19, #192]
    7048:	mov	x4, x21
    704c:	mov	x3, x20
    7050:	mov	x2, x22
    7054:	mov	x1, x25
    7058:	bl	3450 <lzma_vli_encode@plt>
    705c:	mov	w23, w0
    7060:	cmp	w0, #0x1
    7064:	b.ne	7148 <lzma_filter_flags_encode@@XZ_5.0+0x320>  // b.any
    7068:	str	xzr, [x19, #320]
    706c:	ldr	w0, [x19]
    7070:	add	w0, w0, #0x1
    7074:	str	w0, [x19]
    7078:	ldr	x1, [x20]
    707c:	cmp	x1, x21
    7080:	b.cs	710c <lzma_filter_flags_encode@@XZ_5.0+0x2e4>  // b.hs, b.nlast
    7084:	ldr	w0, [x19]
    7088:	cmp	w0, #0x4
    708c:	b.eq	702c <lzma_filter_flags_encode@@XZ_5.0+0x204>  // b.none
    7090:	b.hi	6f90 <lzma_filter_flags_encode@@XZ_5.0+0x168>  // b.pmore
    7094:	cmp	w0, #0x1
    7098:	b.eq	6ff8 <lzma_filter_flags_encode@@XZ_5.0+0x1d0>  // b.none
    709c:	b.ls	6f50 <lzma_filter_flags_encode@@XZ_5.0+0x128>  // b.plast
    70a0:	cmp	w0, #0x2
    70a4:	b.eq	7044 <lzma_filter_flags_encode@@XZ_5.0+0x21c>  // b.none
    70a8:	ldr	x0, [x19, #184]
    70ac:	b	7048 <lzma_filter_flags_encode@@XZ_5.0+0x220>
    70b0:	ldr	x0, [x19, #8]
    70b4:	bl	4c9c <lzma_index_checks@@XZ_5.0+0x2c>
    70b8:	mov	w0, w0
    70bc:	str	x0, [x19, #320]
    70c0:	mov	w0, #0x5                   	// #5
    70c4:	str	w0, [x19]
    70c8:	b	7078 <lzma_filter_flags_encode@@XZ_5.0+0x250>
    70cc:	ldr	x0, [x19, #320]
    70d0:	cbz	x0, 70ec <lzma_filter_flags_encode@@XZ_5.0+0x2c4>
    70d4:	sub	x0, x0, #0x1
    70d8:	str	x0, [x19, #320]
    70dc:	add	x0, x1, #0x1
    70e0:	str	x0, [x20]
    70e4:	strb	wzr, [x22, x1]
    70e8:	b	7078 <lzma_filter_flags_encode@@XZ_5.0+0x250>
    70ec:	ldr	w2, [x19, #328]
    70f0:	sub	x1, x1, x24
    70f4:	add	x0, x22, x24
    70f8:	bl	31c0 <lzma_crc32@plt>
    70fc:	str	w0, [x19, #328]
    7100:	mov	w0, #0x6                   	// #6
    7104:	str	w0, [x19]
    7108:	b	6fa0 <lzma_filter_flags_encode@@XZ_5.0+0x178>
    710c:	mov	w23, #0x0                   	// #0
    7110:	ldp	x25, x26, [sp, #64]
    7114:	ldp	x27, x28, [sp, #80]
    7118:	ldr	x1, [x20]
    711c:	ldr	w2, [x19, #328]
    7120:	sub	x1, x1, x24
    7124:	add	x0, x22, x24
    7128:	bl	31c0 <lzma_crc32@plt>
    712c:	str	w0, [x19, #328]
    7130:	b	6f78 <lzma_filter_flags_encode@@XZ_5.0+0x150>
    7134:	mov	w23, #0x0                   	// #0
    7138:	b	7118 <lzma_filter_flags_encode@@XZ_5.0+0x2f0>
    713c:	ldp	x25, x26, [sp, #64]
    7140:	ldp	x27, x28, [sp, #80]
    7144:	b	7118 <lzma_filter_flags_encode@@XZ_5.0+0x2f0>
    7148:	ldp	x25, x26, [sp, #64]
    714c:	ldp	x27, x28, [sp, #80]
    7150:	b	7118 <lzma_filter_flags_encode@@XZ_5.0+0x2f0>
    7154:	mov	w23, #0x0                   	// #0
    7158:	ldp	x25, x26, [sp, #64]
    715c:	ldp	x27, x28, [sp, #80]
    7160:	b	6f78 <lzma_filter_flags_encode@@XZ_5.0+0x150>
    7164:	stp	x29, x30, [sp, #-48]!
    7168:	mov	x29, sp
    716c:	stp	x19, x20, [sp, #16]
    7170:	stp	x21, x22, [sp, #32]
    7174:	mov	x19, x0
    7178:	mov	x22, x1
    717c:	mov	x20, x2
    7180:	adrp	x21, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x1d8>
    7184:	add	x21, x21, #0x164
    7188:	ldr	x0, [x0, #16]
    718c:	cmp	x0, x21
    7190:	b.ne	71d8 <lzma_filter_flags_encode@@XZ_5.0+0x3b0>  // b.any
    7194:	str	x21, [x19, #16]
    7198:	cbz	x20, 7214 <lzma_filter_flags_encode@@XZ_5.0+0x3ec>
    719c:	ldr	x0, [x19]
    71a0:	cbz	x0, 71e4 <lzma_filter_flags_encode@@XZ_5.0+0x3bc>
    71a4:	ldr	x19, [x19]
    71a8:	mov	x1, x20
    71ac:	add	x0, x19, #0x10
    71b0:	bl	34b0 <lzma_index_iter_init@plt>
    71b4:	str	wzr, [x19]
    71b8:	str	x20, [x19, #8]
    71bc:	str	xzr, [x19, #320]
    71c0:	str	wzr, [x19, #328]
    71c4:	mov	w0, #0x0                   	// #0
    71c8:	ldp	x19, x20, [sp, #16]
    71cc:	ldp	x21, x22, [sp, #32]
    71d0:	ldp	x29, x30, [sp], #48
    71d4:	ret
    71d8:	mov	x0, x19
    71dc:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    71e0:	b	7194 <lzma_filter_flags_encode@@XZ_5.0+0x36c>
    71e4:	mov	x1, x22
    71e8:	mov	x0, #0x150                 	// #336
    71ec:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    71f0:	str	x0, [x19]
    71f4:	cbz	x0, 721c <lzma_filter_flags_encode@@XZ_5.0+0x3f4>
    71f8:	adrp	x0, 6000 <lzma_alone_encoder@@XZ_5.0+0x58c>
    71fc:	add	x0, x0, #0xf00
    7200:	str	x0, [x19, #24]
    7204:	adrp	x0, 6000 <lzma_alone_encoder@@XZ_5.0+0x58c>
    7208:	add	x0, x0, #0xeec
    720c:	str	x0, [x19, #32]
    7210:	b	71a4 <lzma_filter_flags_encode@@XZ_5.0+0x37c>
    7214:	mov	w0, #0xb                   	// #11
    7218:	b	71c8 <lzma_filter_flags_encode@@XZ_5.0+0x3a0>
    721c:	mov	w0, #0x5                   	// #5
    7220:	b	71c8 <lzma_filter_flags_encode@@XZ_5.0+0x3a0>

0000000000007224 <lzma_index_encoder@@XZ_5.0>:
    7224:	stp	x29, x30, [sp, #-48]!
    7228:	mov	x29, sp
    722c:	stp	x19, x20, [sp, #16]
    7230:	str	x21, [sp, #32]
    7234:	mov	x20, x0
    7238:	mov	x21, x1
    723c:	bl	3950 <lzma_version_string@@XZ_5.0+0x288>
    7240:	mov	w19, w0
    7244:	cbz	w0, 725c <lzma_index_encoder@@XZ_5.0+0x38>
    7248:	mov	w0, w19
    724c:	ldp	x19, x20, [sp, #16]
    7250:	ldr	x21, [sp, #32]
    7254:	ldp	x29, x30, [sp], #48
    7258:	ret
    725c:	mov	x2, x21
    7260:	ldr	x1, [x20, #48]
    7264:	ldr	x0, [x20, #56]
    7268:	bl	7164 <lzma_filter_flags_encode@@XZ_5.0+0x33c>
    726c:	mov	w19, w0
    7270:	cbnz	w0, 728c <lzma_index_encoder@@XZ_5.0+0x68>
    7274:	ldr	x1, [x20, #56]
    7278:	mov	w0, #0x1                   	// #1
    727c:	strb	w0, [x1, #88]
    7280:	ldr	x1, [x20, #56]
    7284:	strb	w0, [x1, #91]
    7288:	b	7248 <lzma_index_encoder@@XZ_5.0+0x24>
    728c:	mov	x0, x20
    7290:	bl	3320 <lzma_end@plt>
    7294:	b	7248 <lzma_index_encoder@@XZ_5.0+0x24>

0000000000007298 <lzma_index_buffer_encode@@XZ_5.0>:
    7298:	cmp	x1, #0x0
    729c:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    72a0:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    72a4:	b.eq	7370 <lzma_index_buffer_encode@@XZ_5.0+0xd8>  // b.none
    72a8:	sub	sp, sp, #0x1a0
    72ac:	stp	x29, x30, [sp, #16]
    72b0:	add	x29, sp, #0x10
    72b4:	stp	x19, x20, [sp, #32]
    72b8:	stp	x21, x22, [sp, #48]
    72bc:	str	x23, [sp, #64]
    72c0:	mov	x22, x0
    72c4:	mov	x23, x1
    72c8:	mov	x19, x2
    72cc:	mov	x20, x3
    72d0:	ldr	x3, [x2]
    72d4:	mov	w2, #0xb                   	// #11
    72d8:	cmp	x3, x20
    72dc:	b.hi	7354 <lzma_index_buffer_encode@@XZ_5.0+0xbc>  // b.pmore
    72e0:	sub	x21, x20, x3
    72e4:	bl	3510 <lzma_index_size@plt>
    72e8:	mov	w2, #0xa                   	// #10
    72ec:	cmp	x21, x0
    72f0:	b.cc	7354 <lzma_index_buffer_encode@@XZ_5.0+0xbc>  // b.lo, b.ul, b.last
    72f4:	add	x21, sp, #0x50
    72f8:	mov	x1, x22
    72fc:	add	x0, sp, #0x60
    7300:	bl	34b0 <lzma_index_iter_init@plt>
    7304:	str	wzr, [sp, #80]
    7308:	str	x22, [sp, #88]
    730c:	str	xzr, [sp, #400]
    7310:	str	wzr, [sp, #408]
    7314:	ldr	x22, [x19]
    7318:	str	wzr, [sp]
    731c:	mov	x7, x20
    7320:	mov	x6, x19
    7324:	mov	x5, x23
    7328:	mov	x4, #0x0                   	// #0
    732c:	mov	x3, #0x0                   	// #0
    7330:	mov	x2, #0x0                   	// #0
    7334:	mov	x1, #0x0                   	// #0
    7338:	mov	x0, x21
    733c:	bl	6f00 <lzma_filter_flags_encode@@XZ_5.0+0xd8>
    7340:	mov	w2, #0x0                   	// #0
    7344:	cmp	w0, #0x1
    7348:	b.eq	7354 <lzma_index_buffer_encode@@XZ_5.0+0xbc>  // b.none
    734c:	str	x22, [x19]
    7350:	mov	w2, #0xb                   	// #11
    7354:	mov	w0, w2
    7358:	ldp	x19, x20, [sp, #32]
    735c:	ldp	x21, x22, [sp, #48]
    7360:	ldr	x23, [sp, #64]
    7364:	ldp	x29, x30, [sp, #16]
    7368:	add	sp, sp, #0x1a0
    736c:	ret
    7370:	mov	w2, #0xb                   	// #11
    7374:	mov	w0, w2
    7378:	ret

000000000000737c <lzma_stream_buffer_bound@@XZ_5.0>:
    737c:	stp	x29, x30, [sp, #-16]!
    7380:	mov	x29, sp
    7384:	bl	3120 <lzma_block_buffer_bound@plt>
    7388:	cbz	x0, 73a0 <lzma_stream_buffer_bound@@XZ_5.0+0x24>
    738c:	mov	x1, #0x7fffffffffffffff    	// #9223372036854775807
    7390:	sub	x1, x1, x0
    7394:	add	x0, x0, #0x30
    7398:	cmp	x1, #0x2f
    739c:	csel	x0, x0, xzr, hi  // hi = pmore
    73a0:	ldp	x29, x30, [sp], #16
    73a4:	ret

00000000000073a8 <lzma_stream_buffer_encode@@XZ_5.0>:
    73a8:	stp	x29, x30, [sp, #-368]!
    73ac:	mov	x29, sp
    73b0:	stp	x19, x20, [sp, #16]
    73b4:	cmp	x0, #0x0
    73b8:	ccmp	w1, #0xf, #0x2, ne  // ne = any
    73bc:	mov	w19, #0xb                   	// #11
    73c0:	b.hi	7620 <lzma_stream_buffer_encode@@XZ_5.0+0x278>  // b.pmore
    73c4:	stp	x21, x22, [sp, #32]
    73c8:	stp	x23, x24, [sp, #48]
    73cc:	stp	x25, x26, [sp, #64]
    73d0:	stp	x27, x28, [sp, #80]
    73d4:	mov	x22, x0
    73d8:	mov	w20, w1
    73dc:	mov	x27, x2
    73e0:	mov	x26, x3
    73e4:	mov	x25, x4
    73e8:	mov	x24, x5
    73ec:	mov	x23, x6
    73f0:	mov	x21, x7
    73f4:	cmp	x3, #0x0
    73f8:	mov	w19, #0xb                   	// #11
    73fc:	ccmp	x4, #0x0, #0x4, eq  // eq = none
    7400:	b.ne	7610 <lzma_stream_buffer_encode@@XZ_5.0+0x268>  // b.any
    7404:	cmp	x5, #0x0
    7408:	ccmp	x6, #0x0, #0x4, ne  // ne = any
    740c:	b.eq	7630 <lzma_stream_buffer_encode@@XZ_5.0+0x288>  // b.none
    7410:	ldr	x28, [x6]
    7414:	cmp	x28, x7
    7418:	b.hi	7644 <lzma_stream_buffer_encode@@XZ_5.0+0x29c>  // b.pmore
    741c:	mov	w0, w1
    7420:	bl	30e0 <lzma_check_is_supported@plt>
    7424:	and	w0, w0, #0xff
    7428:	mov	w19, #0x3                   	// #3
    742c:	cbz	w0, 7658 <lzma_stream_buffer_encode@@XZ_5.0+0x2b0>
    7430:	str	x28, [sp, #360]
    7434:	sub	x0, x21, x28
    7438:	mov	w19, #0xa                   	// #10
    743c:	cmp	x0, #0x18
    7440:	b.ls	766c <lzma_stream_buffer_encode@@XZ_5.0+0x2c4>  // b.plast
    7444:	sub	x21, x21, #0xc
    7448:	stp	xzr, xzr, [sp, #304]
    744c:	stp	xzr, xzr, [sp, #320]
    7450:	stp	xzr, xzr, [sp, #336]
    7454:	str	xzr, [sp, #352]
    7458:	str	w20, [sp, #320]
    745c:	add	x1, x24, x28
    7460:	add	x0, sp, #0x130
    7464:	bl	3390 <lzma_stream_header_encode@plt>
    7468:	mov	w19, #0xb                   	// #11
    746c:	cbnz	w0, 7680 <lzma_stream_buffer_encode@@XZ_5.0+0x2d8>
    7470:	ldr	x0, [sp, #360]
    7474:	add	x0, x0, #0xc
    7478:	str	x0, [sp, #360]
    747c:	stp	xzr, xzr, [sp, #96]
    7480:	stp	xzr, xzr, [sp, #112]
    7484:	stp	xzr, xzr, [sp, #128]
    7488:	stp	xzr, xzr, [sp, #144]
    748c:	stp	xzr, xzr, [sp, #160]
    7490:	stp	xzr, xzr, [sp, #176]
    7494:	stp	xzr, xzr, [sp, #192]
    7498:	stp	xzr, xzr, [sp, #208]
    749c:	stp	xzr, xzr, [sp, #224]
    74a0:	stp	xzr, xzr, [sp, #240]
    74a4:	stp	xzr, xzr, [sp, #256]
    74a8:	stp	xzr, xzr, [sp, #272]
    74ac:	stp	xzr, xzr, [sp, #288]
    74b0:	str	w20, [sp, #104]
    74b4:	str	x22, [sp, #128]
    74b8:	cbz	x25, 757c <lzma_stream_buffer_encode@@XZ_5.0+0x1d4>
    74bc:	mov	x6, x21
    74c0:	add	x5, sp, #0x168
    74c4:	mov	x4, x24
    74c8:	mov	x3, x25
    74cc:	mov	x2, x26
    74d0:	mov	x1, x27
    74d4:	add	x0, sp, #0x60
    74d8:	bl	30d0 <lzma_block_buffer_encode@plt>
    74dc:	mov	w19, w0
    74e0:	cbnz	w0, 7538 <lzma_stream_buffer_encode@@XZ_5.0+0x190>
    74e4:	mov	x0, x27
    74e8:	bl	33b0 <lzma_index_init@plt>
    74ec:	mov	x20, x0
    74f0:	cbz	x0, 7564 <lzma_stream_buffer_encode@@XZ_5.0+0x1bc>
    74f4:	add	x0, sp, #0x60
    74f8:	bl	3190 <lzma_block_unpadded_size@plt>
    74fc:	ldr	x3, [sp, #120]
    7500:	mov	x2, x0
    7504:	mov	x1, x27
    7508:	mov	x0, x20
    750c:	bl	3300 <lzma_index_append@plt>
    7510:	mov	w19, w0
    7514:	cbz	w0, 7590 <lzma_stream_buffer_encode@@XZ_5.0+0x1e8>
    7518:	mov	x1, x27
    751c:	mov	x0, x20
    7520:	bl	33e0 <lzma_index_end@plt>
    7524:	ldp	x21, x22, [sp, #32]
    7528:	ldp	x23, x24, [sp, #48]
    752c:	ldp	x25, x26, [sp, #64]
    7530:	ldp	x27, x28, [sp, #80]
    7534:	b	7620 <lzma_stream_buffer_encode@@XZ_5.0+0x278>
    7538:	ldp	x21, x22, [sp, #32]
    753c:	ldp	x23, x24, [sp, #48]
    7540:	ldp	x25, x26, [sp, #64]
    7544:	ldp	x27, x28, [sp, #80]
    7548:	b	7620 <lzma_stream_buffer_encode@@XZ_5.0+0x278>
    754c:	mov	w19, #0xb                   	// #11
    7550:	ldp	x21, x22, [sp, #32]
    7554:	ldp	x23, x24, [sp, #48]
    7558:	ldp	x25, x26, [sp, #64]
    755c:	ldp	x27, x28, [sp, #80]
    7560:	b	7620 <lzma_stream_buffer_encode@@XZ_5.0+0x278>
    7564:	mov	w19, #0x5                   	// #5
    7568:	ldp	x21, x22, [sp, #32]
    756c:	ldp	x23, x24, [sp, #48]
    7570:	ldp	x25, x26, [sp, #64]
    7574:	ldp	x27, x28, [sp, #80]
    7578:	b	7620 <lzma_stream_buffer_encode@@XZ_5.0+0x278>
    757c:	mov	x0, x27
    7580:	bl	33b0 <lzma_index_init@plt>
    7584:	mov	x20, x0
    7588:	mov	w19, #0x5                   	// #5
    758c:	cbz	x0, 75fc <lzma_stream_buffer_encode@@XZ_5.0+0x254>
    7590:	mov	x3, x21
    7594:	add	x2, sp, #0x168
    7598:	mov	x1, x24
    759c:	mov	x0, x20
    75a0:	bl	3100 <lzma_index_buffer_encode@plt>
    75a4:	mov	w19, w0
    75a8:	mov	x0, x20
    75ac:	bl	3510 <lzma_index_size@plt>
    75b0:	str	x0, [sp, #312]
    75b4:	mov	x1, x27
    75b8:	mov	x0, x20
    75bc:	bl	33e0 <lzma_index_end@plt>
    75c0:	cbnz	w19, 7694 <lzma_stream_buffer_encode@@XZ_5.0+0x2ec>
    75c4:	ldr	x1, [sp, #360]
    75c8:	add	x1, x24, x1
    75cc:	add	x0, sp, #0x130
    75d0:	bl	3210 <lzma_stream_footer_encode@plt>
    75d4:	mov	w19, w0
    75d8:	cbnz	w0, 754c <lzma_stream_buffer_encode@@XZ_5.0+0x1a4>
    75dc:	ldr	x0, [sp, #360]
    75e0:	add	x0, x0, #0xc
    75e4:	str	x0, [x23]
    75e8:	ldp	x21, x22, [sp, #32]
    75ec:	ldp	x23, x24, [sp, #48]
    75f0:	ldp	x25, x26, [sp, #64]
    75f4:	ldp	x27, x28, [sp, #80]
    75f8:	b	7620 <lzma_stream_buffer_encode@@XZ_5.0+0x278>
    75fc:	ldp	x21, x22, [sp, #32]
    7600:	ldp	x23, x24, [sp, #48]
    7604:	ldp	x25, x26, [sp, #64]
    7608:	ldp	x27, x28, [sp, #80]
    760c:	b	7620 <lzma_stream_buffer_encode@@XZ_5.0+0x278>
    7610:	ldp	x21, x22, [sp, #32]
    7614:	ldp	x23, x24, [sp, #48]
    7618:	ldp	x25, x26, [sp, #64]
    761c:	ldp	x27, x28, [sp, #80]
    7620:	mov	w0, w19
    7624:	ldp	x19, x20, [sp, #16]
    7628:	ldp	x29, x30, [sp], #368
    762c:	ret
    7630:	ldp	x21, x22, [sp, #32]
    7634:	ldp	x23, x24, [sp, #48]
    7638:	ldp	x25, x26, [sp, #64]
    763c:	ldp	x27, x28, [sp, #80]
    7640:	b	7620 <lzma_stream_buffer_encode@@XZ_5.0+0x278>
    7644:	ldp	x21, x22, [sp, #32]
    7648:	ldp	x23, x24, [sp, #48]
    764c:	ldp	x25, x26, [sp, #64]
    7650:	ldp	x27, x28, [sp, #80]
    7654:	b	7620 <lzma_stream_buffer_encode@@XZ_5.0+0x278>
    7658:	ldp	x21, x22, [sp, #32]
    765c:	ldp	x23, x24, [sp, #48]
    7660:	ldp	x25, x26, [sp, #64]
    7664:	ldp	x27, x28, [sp, #80]
    7668:	b	7620 <lzma_stream_buffer_encode@@XZ_5.0+0x278>
    766c:	ldp	x21, x22, [sp, #32]
    7670:	ldp	x23, x24, [sp, #48]
    7674:	ldp	x25, x26, [sp, #64]
    7678:	ldp	x27, x28, [sp, #80]
    767c:	b	7620 <lzma_stream_buffer_encode@@XZ_5.0+0x278>
    7680:	ldp	x21, x22, [sp, #32]
    7684:	ldp	x23, x24, [sp, #48]
    7688:	ldp	x25, x26, [sp, #64]
    768c:	ldp	x27, x28, [sp, #80]
    7690:	b	7620 <lzma_stream_buffer_encode@@XZ_5.0+0x278>
    7694:	ldp	x21, x22, [sp, #32]
    7698:	ldp	x23, x24, [sp, #48]
    769c:	ldp	x25, x26, [sp, #64]
    76a0:	ldp	x27, x28, [sp, #80]
    76a4:	b	7620 <lzma_stream_buffer_encode@@XZ_5.0+0x278>
    76a8:	stp	x29, x30, [sp, #-48]!
    76ac:	mov	x29, sp
    76b0:	stp	x19, x20, [sp, #16]
    76b4:	str	x21, [sp, #32]
    76b8:	mov	x21, x0
    76bc:	mov	x20, x1
    76c0:	add	x0, x0, #0x8
    76c4:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    76c8:	mov	x1, x20
    76cc:	add	x0, x21, #0x170
    76d0:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    76d4:	mov	x1, x20
    76d8:	ldr	x0, [x21, #440]
    76dc:	bl	33e0 <lzma_index_end@plt>
    76e0:	ldr	x0, [x21, #288]
    76e4:	cmn	x0, #0x1
    76e8:	b.eq	7708 <lzma_stream_buffer_encode@@XZ_5.0+0x360>  // b.none
    76ec:	add	x19, x21, #0x128
    76f0:	mov	x1, x20
    76f4:	ldr	x0, [x19], #16
    76f8:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    76fc:	ldur	x0, [x19, #-8]
    7700:	cmn	x0, #0x1
    7704:	b.ne	76f0 <lzma_stream_buffer_encode@@XZ_5.0+0x348>  // b.any
    7708:	mov	x1, x20
    770c:	mov	x0, x21
    7710:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    7714:	ldp	x19, x20, [sp, #16]
    7718:	ldr	x21, [sp, #32]
    771c:	ldp	x29, x30, [sp], #48
    7720:	ret
    7724:	sub	sp, sp, #0xc0
    7728:	stp	x29, x30, [sp, #16]
    772c:	add	x29, sp, #0x10
    7730:	stp	x19, x20, [sp, #32]
    7734:	mov	x19, x0
    7738:	str	x2, [sp, #112]
    773c:	ldr	x0, [x6]
    7740:	cmp	x7, x0
    7744:	b.ls	7a28 <lzma_stream_buffer_encode@@XZ_5.0+0x680>  // b.plast
    7748:	stp	x21, x22, [sp, #48]
    774c:	stp	x23, x24, [sp, #64]
    7750:	stp	x25, x26, [sp, #80]
    7754:	stp	x27, x28, [sp, #96]
    7758:	mov	x22, x1
    775c:	mov	x24, x3
    7760:	mov	x25, x4
    7764:	mov	x23, x5
    7768:	mov	x20, x6
    776c:	mov	x21, x7
    7770:	adrp	x26, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7a70>
    7774:	add	x26, x26, #0x5e0
    7778:	ldr	w28, [sp, #192]
    777c:	add	x27, x19, #0x50
    7780:	add	x0, sp, #0x88
    7784:	str	x0, [sp, #120]
    7788:	b	7990 <lzma_stream_buffer_encode@@XZ_5.0+0x5e8>
    778c:	mov	w0, #0xb                   	// #11
    7790:	ldp	x21, x22, [sp, #48]
    7794:	ldp	x23, x24, [sp, #64]
    7798:	ldp	x25, x26, [sp, #80]
    779c:	ldp	x27, x28, [sp, #96]
    77a0:	ldp	x19, x20, [sp, #32]
    77a4:	ldp	x29, x30, [sp, #16]
    77a8:	add	sp, sp, #0xc0
    77ac:	ret
    77b0:	cmp	w0, #0x4
    77b4:	b.ne	7834 <lzma_stream_buffer_encode@@XZ_5.0+0x48c>  // b.any
    77b8:	str	wzr, [sp]
    77bc:	ldr	x8, [x19, #392]
    77c0:	mov	x7, x21
    77c4:	mov	x6, x20
    77c8:	mov	x5, x23
    77cc:	mov	x4, #0x0                   	// #0
    77d0:	mov	x3, #0x0                   	// #0
    77d4:	mov	x2, #0x0                   	// #0
    77d8:	mov	x1, x22
    77dc:	ldr	x0, [x19, #368]
    77e0:	blr	x8
    77e4:	cmp	w0, #0x1
    77e8:	b.ne	7ac8 <lzma_stream_buffer_encode@@XZ_5.0+0x720>  // b.any
    77ec:	stp	xzr, xzr, [sp, #136]
    77f0:	stp	xzr, xzr, [sp, #152]
    77f4:	stp	xzr, xzr, [sp, #168]
    77f8:	str	xzr, [sp, #184]
    77fc:	ldr	x0, [x19, #440]
    7800:	bl	3510 <lzma_index_size@plt>
    7804:	str	x0, [sp, #144]
    7808:	ldr	w0, [x19, #88]
    780c:	str	w0, [sp, #152]
    7810:	add	x1, x19, #0x1d0
    7814:	ldr	x0, [sp, #120]
    7818:	bl	3210 <lzma_stream_footer_encode@plt>
    781c:	cbnz	w0, 79f8 <lzma_stream_buffer_encode@@XZ_5.0+0x650>
    7820:	mov	x0, #0xc                   	// #12
    7824:	str	x0, [x19, #456]
    7828:	mov	w0, #0x5                   	// #5
    782c:	str	w0, [x19]
    7830:	b	7984 <lzma_stream_buffer_encode@@XZ_5.0+0x5dc>
    7834:	cmp	w0, #0x5
    7838:	b.eq	79b0 <lzma_stream_buffer_encode@@XZ_5.0+0x608>  // b.none
    783c:	mov	w0, #0xb                   	// #11
    7840:	ldp	x21, x22, [sp, #48]
    7844:	ldp	x23, x24, [sp, #64]
    7848:	ldp	x25, x26, [sp, #80]
    784c:	ldp	x27, x28, [sp, #96]
    7850:	b	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x3f8>
    7854:	ldr	x0, [x24]
    7858:	cmp	x0, x25
    785c:	b.eq	7894 <lzma_stream_buffer_encode@@XZ_5.0+0x4ec>  // b.none
    7860:	ldrb	w0, [x19, #4]
    7864:	cbnz	w0, 78f4 <lzma_stream_buffer_encode@@XZ_5.0+0x54c>
    7868:	mov	x0, #0xffffffffffffffff    	// #-1
    786c:	str	x0, [x19, #96]
    7870:	str	x0, [x19, #104]
    7874:	mov	x0, x27
    7878:	bl	3160 <lzma_block_header_size@plt>
    787c:	cbz	w0, 78e0 <lzma_stream_buffer_encode@@XZ_5.0+0x538>
    7880:	ldp	x21, x22, [sp, #48]
    7884:	ldp	x23, x24, [sp, #64]
    7888:	ldp	x25, x26, [sp, #80]
    788c:	ldp	x27, x28, [sp, #96]
    7890:	b	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x3f8>
    7894:	ldr	w0, [sp, #192]
    7898:	cmp	w0, #0x3
    789c:	b.ne	78c0 <lzma_stream_buffer_encode@@XZ_5.0+0x518>  // b.any
    78a0:	ldr	x2, [x19, #440]
    78a4:	mov	x1, x22
    78a8:	add	x0, x19, #0x170
    78ac:	bl	7164 <lzma_filter_flags_encode@@XZ_5.0+0x33c>
    78b0:	cbnz	w0, 7a78 <lzma_stream_buffer_encode@@XZ_5.0+0x6d0>
    78b4:	mov	w0, #0x4                   	// #4
    78b8:	str	w0, [x19]
    78bc:	b	7984 <lzma_stream_buffer_encode@@XZ_5.0+0x5dc>
    78c0:	ldr	w0, [sp, #192]
    78c4:	cmp	w0, #0x0
    78c8:	cset	w0, ne  // ne = any
    78cc:	ldp	x21, x22, [sp, #48]
    78d0:	ldp	x23, x24, [sp, #64]
    78d4:	ldp	x25, x26, [sp, #80]
    78d8:	ldp	x27, x28, [sp, #96]
    78dc:	b	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x3f8>
    78e0:	mov	x2, x27
    78e4:	mov	x1, x22
    78e8:	add	x0, x19, #0x8
    78ec:	bl	60e4 <lzma_block_uncomp_encode@@XZ_5.2+0x30>
    78f0:	cbnz	w0, 7a8c <lzma_stream_buffer_encode@@XZ_5.0+0x6e4>
    78f4:	strb	wzr, [x19, #4]
    78f8:	add	x1, x19, #0x1d0
    78fc:	mov	x0, x27
    7900:	bl	3540 <lzma_block_header_encode@plt>
    7904:	cbnz	w0, 7a60 <lzma_stream_buffer_encode@@XZ_5.0+0x6b8>
    7908:	ldr	w0, [x19, #84]
    790c:	str	x0, [x19, #456]
    7910:	mov	w0, #0x2                   	// #2
    7914:	str	w0, [x19]
    7918:	b	7984 <lzma_stream_buffer_encode@@XZ_5.0+0x5dc>
    791c:	ldr	w0, [x26, x28, lsl #2]
    7920:	str	w0, [sp]
    7924:	ldr	x8, [x19, #32]
    7928:	mov	x7, x21
    792c:	mov	x6, x20
    7930:	mov	x5, x23
    7934:	mov	x4, x25
    7938:	mov	x3, x24
    793c:	ldr	x2, [sp, #112]
    7940:	mov	x1, x22
    7944:	ldr	x0, [x19, #8]
    7948:	blr	x8
    794c:	cmp	w0, #0x1
    7950:	ldr	w1, [sp, #192]
    7954:	ccmp	w1, #0x1, #0x4, eq  // eq = none
    7958:	b.eq	7aa0 <lzma_stream_buffer_encode@@XZ_5.0+0x6f8>  // b.none
    795c:	mov	x0, x27
    7960:	bl	3190 <lzma_block_unpadded_size@plt>
    7964:	ldr	x3, [x19, #104]
    7968:	mov	x2, x0
    796c:	mov	x1, x22
    7970:	ldr	x0, [x19, #440]
    7974:	bl	3300 <lzma_index_append@plt>
    7978:	cbnz	w0, 7ab4 <lzma_stream_buffer_encode@@XZ_5.0+0x70c>
    797c:	mov	w0, #0x1                   	// #1
    7980:	str	w0, [x19]
    7984:	ldr	x0, [x20]
    7988:	cmp	x0, x21
    798c:	b.cs	7a10 <lzma_stream_buffer_encode@@XZ_5.0+0x668>  // b.hs, b.nlast
    7990:	ldr	w0, [x19]
    7994:	cmp	w0, #0x3
    7998:	b.eq	791c <lzma_stream_buffer_encode@@XZ_5.0+0x574>  // b.none
    799c:	b.hi	77b0 <lzma_stream_buffer_encode@@XZ_5.0+0x408>  // b.pmore
    79a0:	cmp	w0, #0x1
    79a4:	b.eq	7854 <lzma_stream_buffer_encode@@XZ_5.0+0x4ac>  // b.none
    79a8:	tst	w0, #0xfffffffd
    79ac:	b.ne	778c <lzma_stream_buffer_encode@@XZ_5.0+0x3e4>  // b.any
    79b0:	mov	x5, x21
    79b4:	mov	x4, x20
    79b8:	mov	x3, x23
    79bc:	ldr	x2, [x19, #456]
    79c0:	add	x1, x19, #0x1c0
    79c4:	add	x0, x19, #0x1d0
    79c8:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
    79cc:	ldr	x1, [x19, #448]
    79d0:	ldr	x0, [x19, #456]
    79d4:	cmp	x1, x0
    79d8:	b.cc	7a30 <lzma_stream_buffer_encode@@XZ_5.0+0x688>  // b.lo, b.ul, b.last
    79dc:	ldr	w0, [x19]
    79e0:	cmp	w0, #0x5
    79e4:	b.eq	7a48 <lzma_stream_buffer_encode@@XZ_5.0+0x6a0>  // b.none
    79e8:	str	xzr, [x19, #448]
    79ec:	add	w0, w0, #0x1
    79f0:	str	w0, [x19]
    79f4:	b	7984 <lzma_stream_buffer_encode@@XZ_5.0+0x5dc>
    79f8:	mov	w0, #0xb                   	// #11
    79fc:	ldp	x21, x22, [sp, #48]
    7a00:	ldp	x23, x24, [sp, #64]
    7a04:	ldp	x25, x26, [sp, #80]
    7a08:	ldp	x27, x28, [sp, #96]
    7a0c:	b	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x3f8>
    7a10:	mov	w0, #0x0                   	// #0
    7a14:	ldp	x21, x22, [sp, #48]
    7a18:	ldp	x23, x24, [sp, #64]
    7a1c:	ldp	x25, x26, [sp, #80]
    7a20:	ldp	x27, x28, [sp, #96]
    7a24:	b	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x3f8>
    7a28:	mov	w0, #0x0                   	// #0
    7a2c:	b	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x3f8>
    7a30:	mov	w0, #0x0                   	// #0
    7a34:	ldp	x21, x22, [sp, #48]
    7a38:	ldp	x23, x24, [sp, #64]
    7a3c:	ldp	x25, x26, [sp, #80]
    7a40:	ldp	x27, x28, [sp, #96]
    7a44:	b	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x3f8>
    7a48:	mov	w0, #0x1                   	// #1
    7a4c:	ldp	x21, x22, [sp, #48]
    7a50:	ldp	x23, x24, [sp, #64]
    7a54:	ldp	x25, x26, [sp, #80]
    7a58:	ldp	x27, x28, [sp, #96]
    7a5c:	b	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x3f8>
    7a60:	mov	w0, #0xb                   	// #11
    7a64:	ldp	x21, x22, [sp, #48]
    7a68:	ldp	x23, x24, [sp, #64]
    7a6c:	ldp	x25, x26, [sp, #80]
    7a70:	ldp	x27, x28, [sp, #96]
    7a74:	b	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x3f8>
    7a78:	ldp	x21, x22, [sp, #48]
    7a7c:	ldp	x23, x24, [sp, #64]
    7a80:	ldp	x25, x26, [sp, #80]
    7a84:	ldp	x27, x28, [sp, #96]
    7a88:	b	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x3f8>
    7a8c:	ldp	x21, x22, [sp, #48]
    7a90:	ldp	x23, x24, [sp, #64]
    7a94:	ldp	x25, x26, [sp, #80]
    7a98:	ldp	x27, x28, [sp, #96]
    7a9c:	b	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x3f8>
    7aa0:	ldp	x21, x22, [sp, #48]
    7aa4:	ldp	x23, x24, [sp, #64]
    7aa8:	ldp	x25, x26, [sp, #80]
    7aac:	ldp	x27, x28, [sp, #96]
    7ab0:	b	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x3f8>
    7ab4:	ldp	x21, x22, [sp, #48]
    7ab8:	ldp	x23, x24, [sp, #64]
    7abc:	ldp	x25, x26, [sp, #80]
    7ac0:	ldp	x27, x28, [sp, #96]
    7ac4:	b	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x3f8>
    7ac8:	ldp	x21, x22, [sp, #48]
    7acc:	ldp	x23, x24, [sp, #64]
    7ad0:	ldp	x25, x26, [sp, #80]
    7ad4:	ldp	x27, x28, [sp, #96]
    7ad8:	b	77a0 <lzma_stream_buffer_encode@@XZ_5.0+0x3f8>
    7adc:	stp	x29, x30, [sp, #-48]!
    7ae0:	mov	x29, sp
    7ae4:	stp	x19, x20, [sp, #16]
    7ae8:	stp	x21, x22, [sp, #32]
    7aec:	mov	x19, x0
    7af0:	mov	x21, x1
    7af4:	mov	x22, x2
    7af8:	ldr	w1, [x0]
    7afc:	cmp	w1, #0x1
    7b00:	b.ls	7b6c <lzma_stream_buffer_encode@@XZ_5.0+0x7c4>  // b.plast
    7b04:	mov	w0, #0xb                   	// #11
    7b08:	cmp	w1, #0x3
    7b0c:	b.hi	7b5c <lzma_stream_buffer_encode@@XZ_5.0+0x7b4>  // b.pmore
    7b10:	ldr	x4, [x19, #72]
    7b14:	mov	x1, x21
    7b18:	ldr	x0, [x19, #8]
    7b1c:	blr	x4
    7b20:	cbnz	w0, 7b5c <lzma_stream_buffer_encode@@XZ_5.0+0x7b4>
    7b24:	ldr	x0, [x19, #288]
    7b28:	add	x20, x19, #0x128
    7b2c:	cmn	x0, #0x1
    7b30:	b.eq	7b4c <lzma_stream_buffer_encode@@XZ_5.0+0x7a4>  // b.none
    7b34:	mov	x1, x21
    7b38:	ldr	x0, [x20], #16
    7b3c:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    7b40:	ldur	x0, [x20, #-8]
    7b44:	cmn	x0, #0x1
    7b48:	b.ne	7b34 <lzma_stream_buffer_encode@@XZ_5.0+0x78c>  // b.any
    7b4c:	mov	x2, x21
    7b50:	add	x1, x19, #0x120
    7b54:	mov	x0, x22
    7b58:	bl	3240 <lzma_filters_copy@plt>
    7b5c:	ldp	x19, x20, [sp, #16]
    7b60:	ldp	x21, x22, [sp, #32]
    7b64:	ldp	x29, x30, [sp], #48
    7b68:	ret
    7b6c:	strb	wzr, [x0, #4]
    7b70:	str	x2, [x19, #112]
    7b74:	mov	x0, #0xffffffffffffffff    	// #-1
    7b78:	str	x0, [x19, #96]
    7b7c:	str	x0, [x19, #104]
    7b80:	add	x20, x19, #0x50
    7b84:	mov	x0, x20
    7b88:	bl	3160 <lzma_block_header_size@plt>
    7b8c:	cbz	w0, 7b9c <lzma_stream_buffer_encode@@XZ_5.0+0x7f4>
    7b90:	add	x1, x19, #0x120
    7b94:	str	x1, [x19, #112]
    7b98:	b	7b5c <lzma_stream_buffer_encode@@XZ_5.0+0x7b4>
    7b9c:	mov	x2, x20
    7ba0:	mov	x1, x21
    7ba4:	add	x0, x19, #0x8
    7ba8:	bl	60e4 <lzma_block_uncomp_encode@@XZ_5.2+0x30>
    7bac:	add	x1, x19, #0x120
    7bb0:	str	x1, [x19, #112]
    7bb4:	cbnz	w0, 7b5c <lzma_stream_buffer_encode@@XZ_5.0+0x7b4>
    7bb8:	mov	w0, #0x1                   	// #1
    7bbc:	strb	w0, [x19, #4]
    7bc0:	b	7b24 <lzma_stream_buffer_encode@@XZ_5.0+0x77c>
    7bc4:	stp	x29, x30, [sp, #-128]!
    7bc8:	mov	x29, sp
    7bcc:	stp	x19, x20, [sp, #16]
    7bd0:	stp	x21, x22, [sp, #32]
    7bd4:	str	x23, [sp, #48]
    7bd8:	mov	x20, x0
    7bdc:	mov	x21, x1
    7be0:	mov	x23, x2
    7be4:	mov	w22, w3
    7be8:	adrp	x19, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x1d8>
    7bec:	add	x19, x19, #0xbc4
    7bf0:	ldr	x0, [x0, #16]
    7bf4:	cmp	x0, x19
    7bf8:	b.ne	7c6c <lzma_stream_buffer_encode@@XZ_5.0+0x8c4>  // b.any
    7bfc:	str	x19, [x20, #16]
    7c00:	cbz	x23, 7d30 <lzma_stream_buffer_encode@@XZ_5.0+0x988>
    7c04:	ldr	x19, [x20]
    7c08:	cbz	x19, 7c78 <lzma_stream_buffer_encode@@XZ_5.0+0x8d0>
    7c0c:	str	wzr, [x19]
    7c10:	str	wzr, [x19, #80]
    7c14:	str	w22, [x19, #88]
    7c18:	mov	x1, x21
    7c1c:	ldr	x0, [x19, #440]
    7c20:	bl	33e0 <lzma_index_end@plt>
    7c24:	mov	x0, x21
    7c28:	bl	33b0 <lzma_index_init@plt>
    7c2c:	str	x0, [x19, #440]
    7c30:	cbz	x0, 7d40 <lzma_stream_buffer_encode@@XZ_5.0+0x998>
    7c34:	stp	xzr, xzr, [sp, #72]
    7c38:	stp	xzr, xzr, [sp, #88]
    7c3c:	stp	xzr, xzr, [sp, #104]
    7c40:	str	xzr, [sp, #120]
    7c44:	str	w22, [sp, #88]
    7c48:	add	x1, x19, #0x1d0
    7c4c:	add	x0, sp, #0x48
    7c50:	bl	3390 <lzma_stream_header_encode@plt>
    7c54:	cbz	w0, 7d0c <lzma_stream_buffer_encode@@XZ_5.0+0x964>
    7c58:	ldp	x19, x20, [sp, #16]
    7c5c:	ldp	x21, x22, [sp, #32]
    7c60:	ldr	x23, [sp, #48]
    7c64:	ldp	x29, x30, [sp], #128
    7c68:	ret
    7c6c:	mov	x0, x20
    7c70:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    7c74:	b	7bfc <lzma_stream_buffer_encode@@XZ_5.0+0x854>
    7c78:	mov	x1, x21
    7c7c:	mov	x0, #0x5d0                 	// #1488
    7c80:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    7c84:	mov	x19, x0
    7c88:	cbz	x0, 7d38 <lzma_stream_buffer_encode@@XZ_5.0+0x990>
    7c8c:	str	x0, [x20]
    7c90:	adrp	x0, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x1d8>
    7c94:	add	x0, x0, #0x724
    7c98:	str	x0, [x20, #24]
    7c9c:	adrp	x0, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x1d8>
    7ca0:	add	x0, x0, #0x6a8
    7ca4:	str	x0, [x20, #32]
    7ca8:	adrp	x0, 7000 <lzma_filter_flags_encode@@XZ_5.0+0x1d8>
    7cac:	add	x0, x0, #0xadc
    7cb0:	str	x0, [x20, #64]
    7cb4:	mov	x0, #0xffffffffffffffff    	// #-1
    7cb8:	str	x0, [x19, #288]
    7cbc:	str	xzr, [x19, #8]
    7cc0:	str	x0, [x19, #16]
    7cc4:	str	xzr, [x19, #24]
    7cc8:	str	xzr, [x19, #32]
    7ccc:	str	xzr, [x19, #40]
    7cd0:	str	xzr, [x19, #48]
    7cd4:	str	xzr, [x19, #56]
    7cd8:	str	xzr, [x19, #64]
    7cdc:	str	xzr, [x19, #72]
    7ce0:	str	xzr, [x19, #368]
    7ce4:	str	x0, [x19, #376]
    7ce8:	str	xzr, [x19, #384]
    7cec:	str	xzr, [x19, #392]
    7cf0:	str	xzr, [x19, #400]
    7cf4:	str	xzr, [x19, #408]
    7cf8:	str	xzr, [x19, #416]
    7cfc:	str	xzr, [x19, #424]
    7d00:	str	xzr, [x19, #432]
    7d04:	str	xzr, [x19, #440]
    7d08:	b	7c0c <lzma_stream_buffer_encode@@XZ_5.0+0x864>
    7d0c:	str	xzr, [x19, #448]
    7d10:	mov	x0, #0xc                   	// #12
    7d14:	str	x0, [x19, #456]
    7d18:	mov	x3, #0x0                   	// #0
    7d1c:	mov	x2, x23
    7d20:	mov	x1, x21
    7d24:	mov	x0, x19
    7d28:	bl	7adc <lzma_stream_buffer_encode@@XZ_5.0+0x734>
    7d2c:	b	7c58 <lzma_stream_buffer_encode@@XZ_5.0+0x8b0>
    7d30:	mov	w0, #0xb                   	// #11
    7d34:	b	7c58 <lzma_stream_buffer_encode@@XZ_5.0+0x8b0>
    7d38:	mov	w0, #0x5                   	// #5
    7d3c:	b	7c58 <lzma_stream_buffer_encode@@XZ_5.0+0x8b0>
    7d40:	mov	w0, #0x5                   	// #5
    7d44:	b	7c58 <lzma_stream_buffer_encode@@XZ_5.0+0x8b0>

0000000000007d48 <lzma_stream_encoder@@XZ_5.0>:
    7d48:	stp	x29, x30, [sp, #-48]!
    7d4c:	mov	x29, sp
    7d50:	stp	x19, x20, [sp, #16]
    7d54:	stp	x21, x22, [sp, #32]
    7d58:	mov	x20, x0
    7d5c:	mov	x21, x1
    7d60:	mov	w22, w2
    7d64:	bl	3950 <lzma_version_string@@XZ_5.0+0x288>
    7d68:	mov	w19, w0
    7d6c:	cbz	w0, 7d84 <lzma_stream_encoder@@XZ_5.0+0x3c>
    7d70:	mov	w0, w19
    7d74:	ldp	x19, x20, [sp, #16]
    7d78:	ldp	x21, x22, [sp, #32]
    7d7c:	ldp	x29, x30, [sp], #48
    7d80:	ret
    7d84:	mov	w3, w22
    7d88:	mov	x2, x21
    7d8c:	ldr	x1, [x20, #48]
    7d90:	ldr	x0, [x20, #56]
    7d94:	bl	7bc4 <lzma_stream_buffer_encode@@XZ_5.0+0x81c>
    7d98:	mov	w19, w0
    7d9c:	cbnz	w0, 7dd0 <lzma_stream_encoder@@XZ_5.0+0x88>
    7da0:	ldr	x1, [x20, #56]
    7da4:	mov	w0, #0x1                   	// #1
    7da8:	strb	w0, [x1, #88]
    7dac:	ldr	x1, [x20, #56]
    7db0:	strb	w0, [x1, #89]
    7db4:	ldr	x1, [x20, #56]
    7db8:	strb	w0, [x1, #90]
    7dbc:	ldr	x1, [x20, #56]
    7dc0:	strb	w0, [x1, #92]
    7dc4:	ldr	x1, [x20, #56]
    7dc8:	strb	w0, [x1, #91]
    7dcc:	b	7d70 <lzma_stream_encoder@@XZ_5.0+0x28>
    7dd0:	mov	x0, x20
    7dd4:	bl	3320 <lzma_end@plt>
    7dd8:	b	7d70 <lzma_stream_encoder@@XZ_5.0+0x28>

0000000000007ddc <lzma_stream_header_encode@@XZ_5.0>:
    7ddc:	stp	x29, x30, [sp, #-32]!
    7de0:	mov	x29, sp
    7de4:	stp	x19, x20, [sp, #16]
    7de8:	ldr	w20, [x0]
    7dec:	cbnz	w20, 7e64 <lzma_stream_header_encode@@XZ_5.0+0x88>
    7df0:	mov	x2, x0
    7df4:	mov	x19, x1
    7df8:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    7dfc:	ldr	x0, [x0, #3936]
    7e00:	ldr	w1, [x0]
    7e04:	str	w1, [x19]
    7e08:	ldrh	w0, [x0, #4]
    7e0c:	strh	w0, [x19, #4]
    7e10:	add	x0, x19, #0x6
    7e14:	ldr	w1, [x2, #16]
    7e18:	cmp	w1, #0xf
    7e1c:	b.hi	7e6c <lzma_stream_header_encode@@XZ_5.0+0x90>  // b.pmore
    7e20:	strb	wzr, [x19, #6]
    7e24:	ldr	w1, [x2, #16]
    7e28:	strb	w1, [x19, #7]
    7e2c:	mov	w2, #0x0                   	// #0
    7e30:	mov	x1, #0x2                   	// #2
    7e34:	bl	31c0 <lzma_crc32@plt>
    7e38:	strb	w0, [x19, #8]
    7e3c:	lsr	w1, w0, #8
    7e40:	strb	w1, [x19, #9]
    7e44:	lsr	w1, w0, #16
    7e48:	strb	w1, [x19, #10]
    7e4c:	lsr	w0, w0, #24
    7e50:	strb	w0, [x19, #11]
    7e54:	mov	w0, w20
    7e58:	ldp	x19, x20, [sp, #16]
    7e5c:	ldp	x29, x30, [sp], #32
    7e60:	ret
    7e64:	mov	w20, #0x8                   	// #8
    7e68:	b	7e54 <lzma_stream_header_encode@@XZ_5.0+0x78>
    7e6c:	mov	w20, #0xb                   	// #11
    7e70:	b	7e54 <lzma_stream_header_encode@@XZ_5.0+0x78>

0000000000007e74 <lzma_stream_footer_encode@@XZ_5.0>:
    7e74:	stp	x29, x30, [sp, #-32]!
    7e78:	mov	x29, sp
    7e7c:	stp	x19, x20, [sp, #16]
    7e80:	ldr	w20, [x0]
    7e84:	cbnz	w20, 7eb4 <lzma_stream_footer_encode@@XZ_5.0+0x40>
    7e88:	mov	x2, x0
    7e8c:	mov	x19, x1
    7e90:	ldr	x1, [x0, #8]
    7e94:	sub	x3, x1, #0x4
    7e98:	mov	x0, #0x3fffffffc           	// #17179869180
    7e9c:	cmp	x3, x0
    7ea0:	b.hi	7ebc <lzma_stream_footer_encode@@XZ_5.0+0x48>  // b.pmore
    7ea4:	tst	x1, #0x3
    7ea8:	b.eq	7ecc <lzma_stream_footer_encode@@XZ_5.0+0x58>  // b.none
    7eac:	mov	w20, #0xb                   	// #11
    7eb0:	b	7f44 <lzma_stream_footer_encode@@XZ_5.0+0xd0>
    7eb4:	mov	w20, #0x8                   	// #8
    7eb8:	b	7f44 <lzma_stream_footer_encode@@XZ_5.0+0xd0>
    7ebc:	mov	w20, #0xb                   	// #11
    7ec0:	b	7f44 <lzma_stream_footer_encode@@XZ_5.0+0xd0>
    7ec4:	mov	w20, #0xb                   	// #11
    7ec8:	b	7f44 <lzma_stream_footer_encode@@XZ_5.0+0xd0>
    7ecc:	add	x0, x19, #0x4
    7ed0:	lsr	x1, x1, #2
    7ed4:	sub	w1, w1, #0x1
    7ed8:	strb	w1, [x19, #4]
    7edc:	lsr	w3, w1, #8
    7ee0:	strb	w3, [x19, #5]
    7ee4:	lsr	w3, w1, #16
    7ee8:	strb	w3, [x19, #6]
    7eec:	lsr	w1, w1, #24
    7ef0:	strb	w1, [x19, #7]
    7ef4:	ldr	w1, [x2, #16]
    7ef8:	cmp	w1, #0xf
    7efc:	b.hi	7ec4 <lzma_stream_footer_encode@@XZ_5.0+0x50>  // b.pmore
    7f00:	strb	wzr, [x19, #8]
    7f04:	ldr	w1, [x2, #16]
    7f08:	strb	w1, [x19, #9]
    7f0c:	mov	w2, #0x0                   	// #0
    7f10:	mov	x1, #0x6                   	// #6
    7f14:	bl	31c0 <lzma_crc32@plt>
    7f18:	strb	w0, [x19]
    7f1c:	lsr	w1, w0, #8
    7f20:	strb	w1, [x19, #1]
    7f24:	lsr	w1, w0, #16
    7f28:	strb	w1, [x19, #2]
    7f2c:	lsr	w0, w0, #24
    7f30:	strb	w0, [x19, #3]
    7f34:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    7f38:	ldr	x0, [x0, #3976]
    7f3c:	ldrh	w0, [x0]
    7f40:	strh	w0, [x19, #10]
    7f44:	mov	w0, w20
    7f48:	ldp	x19, x20, [sp, #16]
    7f4c:	ldp	x29, x30, [sp], #32
    7f50:	ret

0000000000007f54 <lzma_vli_encode@@XZ_5.0>:
    7f54:	sub	sp, sp, #0x10
    7f58:	mov	x5, x0
    7f5c:	str	xzr, [sp, #8]
    7f60:	cbz	x1, 7fdc <lzma_vli_encode@@XZ_5.0+0x88>
    7f64:	ldr	x6, [x3]
    7f68:	mov	w0, #0xa                   	// #10
    7f6c:	cmp	x6, x4
    7f70:	b.cs	801c <lzma_vli_encode@@XZ_5.0+0xc8>  // b.hs, b.nlast
    7f74:	ldr	x6, [x1]
    7f78:	mov	w0, #0xb                   	// #11
    7f7c:	cmp	x6, #0x8
    7f80:	b.hi	801c <lzma_vli_encode@@XZ_5.0+0xc8>  // b.pmore
    7f84:	tbnz	x5, #63, 8024 <lzma_vli_encode@@XZ_5.0+0xd0>
    7f88:	lsl	w0, w6, #3
    7f8c:	sub	w6, w0, w6
    7f90:	lsr	x5, x5, x6
    7f94:	cmp	x5, #0x7f
    7f98:	b.ls	7ff4 <lzma_vli_encode@@XZ_5.0+0xa0>  // b.plast
    7f9c:	ldr	x0, [x1]
    7fa0:	add	x0, x0, #0x1
    7fa4:	str	x0, [x1]
    7fa8:	ldr	x0, [x3]
    7fac:	orr	w6, w5, #0xffffff80
    7fb0:	strb	w6, [x2, x0]
    7fb4:	lsr	x5, x5, #7
    7fb8:	add	x0, x0, #0x1
    7fbc:	str	x0, [x3]
    7fc0:	cmp	x0, x4
    7fc4:	b.ne	7f94 <lzma_vli_encode@@XZ_5.0+0x40>  // b.any
    7fc8:	add	x0, sp, #0x8
    7fcc:	cmp	x1, x0
    7fd0:	mov	w0, #0xb                   	// #11
    7fd4:	csel	w0, w0, wzr, eq  // eq = none
    7fd8:	b	801c <lzma_vli_encode@@XZ_5.0+0xc8>
    7fdc:	ldr	x1, [x3]
    7fe0:	mov	w0, #0xb                   	// #11
    7fe4:	cmp	x1, x4
    7fe8:	b.cs	801c <lzma_vli_encode@@XZ_5.0+0xc8>  // b.hs, b.nlast
    7fec:	add	x1, sp, #0x8
    7ff0:	b	7f74 <lzma_vli_encode@@XZ_5.0+0x20>
    7ff4:	ldr	x0, [x3]
    7ff8:	strb	w5, [x2, x0]
    7ffc:	add	x0, x0, #0x1
    8000:	str	x0, [x3]
    8004:	ldr	x0, [x1]
    8008:	add	x0, x0, #0x1
    800c:	str	x0, [x1]
    8010:	add	x0, sp, #0x8
    8014:	cmp	x1, x0
    8018:	cset	w0, ne  // ne = any
    801c:	add	sp, sp, #0x10
    8020:	ret
    8024:	mov	w0, #0xb                   	// #11
    8028:	b	801c <lzma_vli_encode@@XZ_5.0+0xc8>
    802c:	cmp	w1, #0x4, lsl #12
    8030:	mov	x2, #0xffffffffffff        	// #281474976710655
    8034:	ccmp	x0, x2, #0x2, ls  // ls = plast
    8038:	b.hi	8050 <lzma_vli_encode@@XZ_5.0+0xfc>  // b.pmore
    803c:	add	x0, x0, #0x28
    8040:	lsl	w1, w1, #1
    8044:	mul	x0, x0, x1
    8048:	add	x0, x0, #0x30
    804c:	ret
    8050:	mov	x0, #0xffffffffffffffff    	// #-1
    8054:	b	804c <lzma_vli_encode@@XZ_5.0+0xf8>
    8058:	stp	x29, x30, [sp, #-32]!
    805c:	mov	x29, sp
    8060:	stp	x19, x20, [sp, #16]
    8064:	mov	x19, x0
    8068:	mov	x20, x1
    806c:	ldr	x0, [x0]
    8070:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    8074:	str	xzr, [x19]
    8078:	mov	x1, x20
    807c:	ldr	x0, [x19, #8]
    8080:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    8084:	str	xzr, [x19, #8]
    8088:	ldp	x19, x20, [sp, #16]
    808c:	ldp	x29, x30, [sp], #32
    8090:	ret
    8094:	stp	x29, x30, [sp, #-64]!
    8098:	mov	x29, sp
    809c:	stp	x19, x20, [sp, #16]
    80a0:	mov	x19, x0
    80a4:	cmp	w3, #0x4, lsl #12
    80a8:	mov	x0, #0xffffffffffff        	// #281474976710655
    80ac:	ccmp	x2, x0, #0x2, ls  // ls = plast
    80b0:	mov	w0, #0x8                   	// #8
    80b4:	b.hi	8148 <lzma_vli_encode@@XZ_5.0+0x1f4>  // b.pmore
    80b8:	stp	x21, x22, [sp, #32]
    80bc:	mov	x22, x1
    80c0:	mov	x21, x2
    80c4:	lsl	w20, w3, #1
    80c8:	ldr	x0, [x19, #16]
    80cc:	cmp	x0, x2
    80d0:	b.ne	80e0 <lzma_vli_encode@@XZ_5.0+0x18c>  // b.any
    80d4:	ldr	w0, [x19, #24]
    80d8:	cmp	w0, w20
    80dc:	b.eq	812c <lzma_vli_encode@@XZ_5.0+0x1d8>  // b.none
    80e0:	str	x23, [sp, #48]
    80e4:	mov	x1, x22
    80e8:	mov	x0, x19
    80ec:	bl	8058 <lzma_vli_encode@@XZ_5.0+0x104>
    80f0:	mov	w23, w20
    80f4:	add	x0, x23, x23, lsl #2
    80f8:	mov	x1, x22
    80fc:	lsl	x0, x0, #3
    8100:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    8104:	str	x0, [x19]
    8108:	mov	x1, x22
    810c:	mul	x0, x23, x21
    8110:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    8114:	str	x0, [x19, #8]
    8118:	ldr	x1, [x19]
    811c:	cmp	x1, #0x0
    8120:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    8124:	b.eq	8154 <lzma_vli_encode@@XZ_5.0+0x200>  // b.none
    8128:	ldr	x23, [sp, #48]
    812c:	str	x21, [x19, #16]
    8130:	str	w20, [x19, #24]
    8134:	str	wzr, [x19, #28]
    8138:	str	wzr, [x19, #32]
    813c:	str	xzr, [x19, #40]
    8140:	mov	w0, #0x0                   	// #0
    8144:	ldp	x21, x22, [sp, #32]
    8148:	ldp	x19, x20, [sp, #16]
    814c:	ldp	x29, x30, [sp], #64
    8150:	ret
    8154:	mov	x1, x22
    8158:	mov	x0, x19
    815c:	bl	8058 <lzma_vli_encode@@XZ_5.0+0x104>
    8160:	mov	w0, #0x5                   	// #5
    8164:	ldp	x21, x22, [sp, #32]
    8168:	ldr	x23, [sp, #48]
    816c:	b	8148 <lzma_vli_encode@@XZ_5.0+0x1f4>
    8170:	mov	x1, x0
    8174:	ldr	w2, [x0, #28]
    8178:	add	x3, x2, x2, lsl #2
    817c:	lsl	x3, x3, #3
    8180:	ldr	x4, [x0]
    8184:	add	x0, x4, x3
    8188:	ldr	x6, [x1, #16]
    818c:	ldr	x5, [x1, #8]
    8190:	madd	x2, x2, x6, x5
    8194:	str	x2, [x4, x3]
    8198:	str	xzr, [x0, #8]
    819c:	strb	wzr, [x0, #32]
    81a0:	ldr	w2, [x1, #28]
    81a4:	add	w2, w2, #0x1
    81a8:	ldr	w3, [x1, #24]
    81ac:	cmp	w2, w3
    81b0:	csel	w2, w2, wzr, ne  // ne = any
    81b4:	str	w2, [x1, #28]
    81b8:	ldr	w2, [x1, #32]
    81bc:	add	w2, w2, #0x1
    81c0:	str	w2, [x1, #32]
    81c4:	ret
    81c8:	ldr	w3, [x0, #28]
    81cc:	ldr	w2, [x0, #32]
    81d0:	sub	w1, w3, w2
    81d4:	cmp	w3, w2
    81d8:	b.cs	81e4 <lzma_vli_encode@@XZ_5.0+0x290>  // b.hs, b.nlast
    81dc:	ldr	w2, [x0, #24]
    81e0:	add	w1, w1, w2
    81e4:	ldr	x0, [x0]
    81e8:	ubfiz	x2, x1, #2, #32
    81ec:	add	x1, x2, w1, uxtw
    81f0:	add	x1, x0, x1, lsl #3
    81f4:	ldrb	w0, [x1, #32]
    81f8:	ret
    81fc:	stp	x29, x30, [sp, #-48]!
    8200:	mov	x29, sp
    8204:	stp	x19, x20, [sp, #16]
    8208:	mov	x19, x0
    820c:	ldr	w0, [x0, #32]
    8210:	cbz	w0, 825c <lzma_vli_encode@@XZ_5.0+0x308>
    8214:	stp	x21, x22, [sp, #32]
    8218:	mov	x21, x4
    821c:	mov	x20, x5
    8220:	ldr	w4, [x19, #28]
    8224:	sub	w6, w4, w0
    8228:	cmp	w0, w4
    822c:	b.ls	8238 <lzma_vli_encode@@XZ_5.0+0x2e4>  // b.plast
    8230:	ldr	w0, [x19, #24]
    8234:	add	w6, w6, w0
    8238:	ubfiz	x0, x6, #2, #32
    823c:	add	x6, x0, w6, uxtw
    8240:	lsl	x6, x6, #3
    8244:	ldr	x7, [x19]
    8248:	add	x22, x7, x6
    824c:	ldrb	w4, [x22, #32]
    8250:	mov	w0, #0x0                   	// #0
    8254:	cbnz	w4, 8268 <lzma_vli_encode@@XZ_5.0+0x314>
    8258:	ldp	x21, x22, [sp, #32]
    825c:	ldp	x19, x20, [sp, #16]
    8260:	ldp	x29, x30, [sp], #48
    8264:	ret
    8268:	mov	x5, x3
    826c:	mov	x4, x2
    8270:	mov	x3, x1
    8274:	ldr	x2, [x22, #8]
    8278:	add	x1, x19, #0x28
    827c:	ldr	x0, [x7, x6]
    8280:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
    8284:	ldr	x2, [x19, #40]
    8288:	ldr	x1, [x22, #8]
    828c:	mov	w0, #0x0                   	// #0
    8290:	cmp	x2, x1
    8294:	b.cc	82c4 <lzma_vli_encode@@XZ_5.0+0x370>  // b.lo, b.ul, b.last
    8298:	ldr	x0, [x22, #16]
    829c:	str	x0, [x21]
    82a0:	ldr	x0, [x22, #24]
    82a4:	str	x0, [x20]
    82a8:	ldr	w0, [x19, #32]
    82ac:	sub	w0, w0, #0x1
    82b0:	str	w0, [x19, #32]
    82b4:	str	xzr, [x19, #40]
    82b8:	mov	w0, #0x1                   	// #1
    82bc:	ldp	x21, x22, [sp, #32]
    82c0:	b	825c <lzma_vli_encode@@XZ_5.0+0x308>
    82c4:	ldp	x21, x22, [sp, #32]
    82c8:	b	825c <lzma_vli_encode@@XZ_5.0+0x308>
    82cc:	stp	x29, x30, [sp, #-64]!
    82d0:	mov	x29, sp
    82d4:	stp	x19, x20, [sp, #16]
    82d8:	stp	x21, x22, [sp, #32]
    82dc:	stp	x23, x24, [sp, #48]
    82e0:	mov	x19, x0
    82e4:	mov	x21, x1
    82e8:	mov	x22, x2
    82ec:	add	x24, x0, #0x168
    82f0:	mov	x0, x24
    82f4:	bl	3530 <pthread_mutex_lock@plt>
    82f8:	ldr	x0, [x19, #344]
    82fc:	str	x0, [x21]
    8300:	ldr	x0, [x19, #352]
    8304:	str	x0, [x22]
    8308:	ldr	w0, [x19, #324]
    830c:	cbz	w0, 837c <lzma_vli_encode@@XZ_5.0+0x428>
    8310:	mov	x20, #0x0                   	// #0
    8314:	mov	x23, #0x0                   	// #0
    8318:	ldr	x0, [x19, #312]
    831c:	add	x0, x0, x20
    8320:	add	x0, x0, #0x160
    8324:	bl	3530 <pthread_mutex_lock@plt>
    8328:	ldr	x1, [x19, #312]
    832c:	add	x1, x1, x20
    8330:	ldr	x0, [x21]
    8334:	ldr	x1, [x1, #48]
    8338:	add	x0, x0, x1
    833c:	str	x0, [x21]
    8340:	ldr	x1, [x19, #312]
    8344:	add	x1, x1, x20
    8348:	ldr	x0, [x22]
    834c:	ldr	x1, [x1, #56]
    8350:	add	x0, x0, x1
    8354:	str	x0, [x22]
    8358:	ldr	x0, [x19, #312]
    835c:	add	x0, x0, x20
    8360:	add	x0, x0, #0x160
    8364:	bl	3550 <pthread_mutex_unlock@plt>
    8368:	add	x23, x23, #0x1
    836c:	add	x20, x20, #0x1d0
    8370:	ldr	w0, [x19, #324]
    8374:	cmp	x0, x23
    8378:	b.hi	8318 <lzma_vli_encode@@XZ_5.0+0x3c4>  // b.pmore
    837c:	mov	x0, x24
    8380:	bl	3550 <pthread_mutex_unlock@plt>
    8384:	ldp	x19, x20, [sp, #16]
    8388:	ldp	x21, x22, [sp, #32]
    838c:	ldp	x23, x24, [sp, #48]
    8390:	ldp	x29, x30, [sp], #64
    8394:	ret
    8398:	stp	x29, x30, [sp, #-32]!
    839c:	mov	x29, sp
    83a0:	stp	x19, x20, [sp, #16]
    83a4:	mov	x19, x0
    83a8:	mov	w20, w1
    83ac:	ldr	x0, [x0, #32]
    83b0:	add	x0, x0, #0x168
    83b4:	bl	3530 <pthread_mutex_lock@plt>
    83b8:	ldr	x0, [x19, #32]
    83bc:	ldr	w1, [x0, #308]
    83c0:	cbnz	w1, 83c8 <lzma_vli_encode@@XZ_5.0+0x474>
    83c4:	str	w20, [x0, #308]
    83c8:	ldr	x0, [x19, #32]
    83cc:	add	x0, x0, #0x198
    83d0:	bl	3200 <pthread_cond_signal@plt>
    83d4:	ldr	x0, [x19, #32]
    83d8:	add	x0, x0, #0x168
    83dc:	bl	3550 <pthread_mutex_unlock@plt>
    83e0:	ldp	x19, x20, [sp, #16]
    83e4:	ldp	x29, x30, [sp], #32
    83e8:	ret
    83ec:	stp	x29, x30, [sp, #-64]!
    83f0:	mov	x29, sp
    83f4:	stp	x19, x20, [sp, #16]
    83f8:	mov	x20, x0
    83fc:	ldr	w0, [x0, #324]
    8400:	cbnz	w0, 8410 <lzma_vli_encode@@XZ_5.0+0x4bc>
    8404:	ldp	x19, x20, [sp, #16]
    8408:	ldp	x29, x30, [sp], #64
    840c:	ret
    8410:	stp	x21, x22, [sp, #32]
    8414:	str	x23, [sp, #48]
    8418:	and	w22, w1, #0xff
    841c:	mov	w21, #0x0                   	// #0
    8420:	mov	w23, #0x3                   	// #3
    8424:	mov	w0, w21
    8428:	ubfiz	x19, x21, #3, #32
    842c:	sub	x19, x19, x0
    8430:	add	x19, x0, x19, lsl #2
    8434:	lsl	x19, x19, #4
    8438:	ldr	x0, [x20, #312]
    843c:	add	x0, x0, x19
    8440:	add	x0, x0, #0x160
    8444:	bl	3530 <pthread_mutex_lock@plt>
    8448:	ldr	x0, [x20, #312]
    844c:	str	w23, [x0, x19]
    8450:	ldr	x0, [x20, #312]
    8454:	add	x0, x0, x19
    8458:	add	x0, x0, #0x190
    845c:	bl	3200 <pthread_cond_signal@plt>
    8460:	ldr	x0, [x20, #312]
    8464:	add	x0, x0, x19
    8468:	add	x0, x0, #0x160
    846c:	bl	3550 <pthread_mutex_unlock@plt>
    8470:	add	w21, w21, #0x1
    8474:	ldr	w0, [x20, #324]
    8478:	cmp	w0, w21
    847c:	b.hi	8424 <lzma_vli_encode@@XZ_5.0+0x4d0>  // b.pmore
    8480:	cbz	w22, 8490 <lzma_vli_encode@@XZ_5.0+0x53c>
    8484:	cbz	w0, 8520 <lzma_vli_encode@@XZ_5.0+0x5cc>
    8488:	mov	w22, #0x0                   	// #0
    848c:	b	84d8 <lzma_vli_encode@@XZ_5.0+0x584>
    8490:	ldp	x21, x22, [sp, #32]
    8494:	ldr	x23, [sp, #48]
    8498:	b	8404 <lzma_vli_encode@@XZ_5.0+0x4b0>
    849c:	add	x1, x0, #0x160
    84a0:	add	x0, x0, #0x190
    84a4:	bl	33a0 <pthread_cond_wait@plt>
    84a8:	ldr	x1, [x20, #312]
    84ac:	add	x0, x1, x19
    84b0:	ldr	w1, [x1, x19]
    84b4:	cbnz	w1, 849c <lzma_vli_encode@@XZ_5.0+0x548>
    84b8:	ldr	x0, [x20, #312]
    84bc:	add	x0, x0, x21
    84c0:	add	x0, x0, #0x160
    84c4:	bl	3550 <pthread_mutex_unlock@plt>
    84c8:	add	w22, w22, #0x1
    84cc:	ldr	w0, [x20, #324]
    84d0:	cmp	w0, w22
    84d4:	b.ls	8514 <lzma_vli_encode@@XZ_5.0+0x5c0>  // b.plast
    84d8:	mov	w0, w22
    84dc:	ubfiz	x21, x22, #3, #32
    84e0:	sub	x21, x21, x0
    84e4:	add	x21, x0, x21, lsl #2
    84e8:	lsl	x21, x21, #4
    84ec:	mov	x19, x21
    84f0:	ldr	x0, [x20, #312]
    84f4:	add	x0, x0, x21
    84f8:	add	x0, x0, #0x160
    84fc:	bl	3530 <pthread_mutex_lock@plt>
    8500:	ldr	x1, [x20, #312]
    8504:	add	x0, x1, x21
    8508:	ldr	w1, [x1, x21]
    850c:	cbnz	w1, 849c <lzma_vli_encode@@XZ_5.0+0x548>
    8510:	b	84b8 <lzma_vli_encode@@XZ_5.0+0x564>
    8514:	ldp	x21, x22, [sp, #32]
    8518:	ldr	x23, [sp, #48]
    851c:	b	8404 <lzma_vli_encode@@XZ_5.0+0x4b0>
    8520:	ldp	x21, x22, [sp, #32]
    8524:	ldr	x23, [sp, #48]
    8528:	b	8404 <lzma_vli_encode@@XZ_5.0+0x4b0>
    852c:	stp	x29, x30, [sp, #-64]!
    8530:	mov	x29, sp
    8534:	stp	x19, x20, [sp, #16]
    8538:	cbz	x0, 8604 <lzma_vli_encode@@XZ_5.0+0x6b0>
    853c:	stp	x21, x22, [sp, #32]
    8540:	stp	x23, x24, [sp, #48]
    8544:	mov	x19, x0
    8548:	mov	x23, x1
    854c:	mov	x24, x2
    8550:	mov	x21, x3
    8554:	mov	x22, x4
    8558:	ldr	w20, [x0]
    855c:	cbnz	w20, 860c <lzma_vli_encode@@XZ_5.0+0x6b8>
    8560:	ldr	w0, [x0, #4]
    8564:	sub	w0, w0, #0x1
    8568:	mov	w1, #0x3fff                	// #16383
    856c:	cmp	w0, w1
    8570:	b.hi	861c <lzma_vli_encode@@XZ_5.0+0x6c8>  // b.pmore
    8574:	ldr	x0, [x19, #24]
    8578:	cbz	x0, 85c8 <lzma_vli_encode@@XZ_5.0+0x674>
    857c:	str	x0, [x2]
    8580:	ldr	x0, [x19, #8]
    8584:	cbz	x0, 85e4 <lzma_vli_encode@@XZ_5.0+0x690>
    8588:	mov	x1, #0x3ffffffffffff       	// #1125899906842623
    858c:	cmp	x0, x1
    8590:	b.hi	863c <lzma_vli_encode@@XZ_5.0+0x6e8>  // b.pmore
    8594:	str	x0, [x21]
    8598:	ldr	x0, [x21]
    859c:	bl	6060 <lzma_alone_encoder@@XZ_5.0+0x5ec>
    85a0:	str	x0, [x22]
    85a4:	cmp	x0, #0x0
    85a8:	mov	w0, #0x5                   	// #5
    85ac:	csel	w20, w20, w0, ne  // ne = any
    85b0:	ldp	x21, x22, [sp, #32]
    85b4:	ldp	x23, x24, [sp, #48]
    85b8:	mov	w0, w20
    85bc:	ldp	x19, x20, [sp, #16]
    85c0:	ldp	x29, x30, [sp], #64
    85c4:	ret
    85c8:	ldr	w1, [x19, #20]
    85cc:	mov	x0, x23
    85d0:	bl	3ff8 <lzma_block_total_size@@XZ_5.0+0x24>
    85d4:	and	w0, w0, #0xff
    85d8:	cbnz	w0, 862c <lzma_vli_encode@@XZ_5.0+0x6d8>
    85dc:	str	x23, [x24]
    85e0:	b	8580 <lzma_vli_encode@@XZ_5.0+0x62c>
    85e4:	ldr	x0, [x24]
    85e8:	bl	6c7c <lzma_filters_update@@XZ_5.0+0xcc>
    85ec:	str	x0, [x21]
    85f0:	cbnz	x0, 8598 <lzma_vli_encode@@XZ_5.0+0x644>
    85f4:	mov	w20, #0x8                   	// #8
    85f8:	ldp	x21, x22, [sp, #32]
    85fc:	ldp	x23, x24, [sp, #48]
    8600:	b	85b8 <lzma_vli_encode@@XZ_5.0+0x664>
    8604:	mov	w20, #0xb                   	// #11
    8608:	b	85b8 <lzma_vli_encode@@XZ_5.0+0x664>
    860c:	mov	w20, #0x8                   	// #8
    8610:	ldp	x21, x22, [sp, #32]
    8614:	ldp	x23, x24, [sp, #48]
    8618:	b	85b8 <lzma_vli_encode@@XZ_5.0+0x664>
    861c:	mov	w20, #0x8                   	// #8
    8620:	ldp	x21, x22, [sp, #32]
    8624:	ldp	x23, x24, [sp, #48]
    8628:	b	85b8 <lzma_vli_encode@@XZ_5.0+0x664>
    862c:	mov	w20, #0x8                   	// #8
    8630:	ldp	x21, x22, [sp, #32]
    8634:	ldp	x23, x24, [sp, #48]
    8638:	b	85b8 <lzma_vli_encode@@XZ_5.0+0x664>
    863c:	mov	w20, #0x8                   	// #8
    8640:	ldp	x21, x22, [sp, #32]
    8644:	ldp	x23, x24, [sp, #48]
    8648:	b	85b8 <lzma_vli_encode@@XZ_5.0+0x664>
    864c:	sub	sp, sp, #0x90
    8650:	stp	x29, x30, [sp, #16]
    8654:	add	x29, sp, #0x10
    8658:	stp	x19, x20, [sp, #32]
    865c:	stp	x21, x22, [sp, #48]
    8660:	stp	x23, x24, [sp, #64]
    8664:	mov	x19, x0
    8668:	add	x23, x0, #0x190
    866c:	mov	x24, x23
    8670:	add	x0, sp, #0x88
    8674:	str	x0, [sp, #112]
    8678:	add	x20, x19, #0x160
    867c:	mov	x0, x20
    8680:	bl	3530 <pthread_mutex_lock@plt>
    8684:	b	869c <lzma_vli_encode@@XZ_5.0+0x748>
    8688:	ldr	w21, [x19]
    868c:	cbnz	w21, 86b8 <lzma_vli_encode@@XZ_5.0+0x764>
    8690:	mov	x1, x20
    8694:	mov	x0, x23
    8698:	bl	33a0 <pthread_cond_wait@plt>
    869c:	ldr	w0, [x19]
    86a0:	cmp	w0, #0x3
    86a4:	b.ne	8688 <lzma_vli_encode@@XZ_5.0+0x734>  // b.any
    86a8:	str	wzr, [x19]
    86ac:	mov	x0, x23
    86b0:	bl	3200 <pthread_cond_signal@plt>
    86b4:	b	8688 <lzma_vli_encode@@XZ_5.0+0x734>
    86b8:	mov	x0, x20
    86bc:	bl	3550 <pthread_mutex_unlock@plt>
    86c0:	cmp	w21, #0x2
    86c4:	b.ls	8714 <lzma_vli_encode@@XZ_5.0+0x7c0>  // b.plast
    86c8:	cmp	w21, #0x4
    86cc:	b.ne	89e0 <lzma_vli_encode@@XZ_5.0+0xa8c>  // b.any
    86d0:	mov	x0, x20
    86d4:	bl	3410 <pthread_mutex_destroy@plt>
    86d8:	add	x0, x19, #0x190
    86dc:	bl	3520 <pthread_cond_destroy@plt>
    86e0:	ldr	x1, [x19, #40]
    86e4:	add	x0, x19, #0x40
    86e8:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    86ec:	ldr	x1, [x19, #40]
    86f0:	ldr	x0, [x19, #8]
    86f4:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    86f8:	mov	x0, #0x0                   	// #0
    86fc:	ldp	x19, x20, [sp, #32]
    8700:	ldp	x21, x22, [sp, #48]
    8704:	ldp	x23, x24, [sp, #64]
    8708:	ldp	x29, x30, [sp, #16]
    870c:	add	sp, sp, #0x90
    8710:	ret
    8714:	stp	x25, x26, [sp, #80]
    8718:	ldr	x0, [x19, #32]
    871c:	ldr	w3, [x0, #192]
    8720:	ldr	x2, [x0, #272]
    8724:	ldr	x1, [x0, #8]
    8728:	add	x25, x19, #0x88
    872c:	stp	xzr, xzr, [x19, #136]
    8730:	stp	xzr, xzr, [x25, #32]
    8734:	stp	xzr, xzr, [x25, #48]
    8738:	stp	xzr, xzr, [x25, #64]
    873c:	stp	xzr, xzr, [x25, #80]
    8740:	stp	xzr, xzr, [x25, #96]
    8744:	stp	xzr, xzr, [x25, #112]
    8748:	stp	xzr, xzr, [x25, #128]
    874c:	stp	xzr, xzr, [x25, #144]
    8750:	stp	xzr, xzr, [x25, #160]
    8754:	stp	xzr, xzr, [x25, #176]
    8758:	stp	xzr, xzr, [x25, #192]
    875c:	str	w3, [x19, #144]
    8760:	str	x2, [x19, #152]
    8764:	str	x1, [x19, #160]
    8768:	add	x0, x0, #0x10
    876c:	str	x0, [x19, #168]
    8770:	mov	x0, x25
    8774:	bl	3160 <lzma_block_header_size@plt>
    8778:	cbnz	w0, 87c0 <lzma_vli_encode@@XZ_5.0+0x86c>
    877c:	stp	x27, x28, [sp, #96]
    8780:	mov	x2, x25
    8784:	ldr	x1, [x19, #40]
    8788:	add	x0, x19, #0x40
    878c:	bl	60e4 <lzma_block_uncomp_encode@@XZ_5.2+0x30>
    8790:	mov	w27, w0
    8794:	cbnz	w0, 87d8 <lzma_vli_encode@@XZ_5.0+0x884>
    8798:	str	xzr, [sp, #136]
    879c:	ldr	x0, [x19, #24]
    87a0:	ldr	w1, [x19, #140]
    87a4:	str	x1, [x0, #8]
    87a8:	ldr	x0, [x19, #32]
    87ac:	ldr	x26, [x0, #272]
    87b0:	mov	x22, #0x0                   	// #0
    87b4:	mov	w28, #0x3                   	// #3
    87b8:	str	w27, [sp, #124]
    87bc:	b	8870 <lzma_vli_encode@@XZ_5.0+0x91c>
    87c0:	mov	w1, w0
    87c4:	mov	x0, x19
    87c8:	bl	8398 <lzma_vli_encode@@XZ_5.0+0x444>
    87cc:	mov	w21, #0x3                   	// #3
    87d0:	ldp	x25, x26, [sp, #80]
    87d4:	b	86c8 <lzma_vli_encode@@XZ_5.0+0x774>
    87d8:	mov	w1, w0
    87dc:	mov	x0, x19
    87e0:	bl	8398 <lzma_vli_encode@@XZ_5.0+0x444>
    87e4:	mov	w21, #0x3                   	// #3
    87e8:	ldp	x25, x26, [sp, #80]
    87ec:	ldp	x27, x28, [sp, #96]
    87f0:	b	86c8 <lzma_vli_encode@@XZ_5.0+0x774>
    87f4:	mov	x22, x21
    87f8:	b	8800 <lzma_vli_encode@@XZ_5.0+0x8ac>
    87fc:	mov	x22, x21
    8800:	ldr	w21, [x19]
    8804:	mov	x0, x20
    8808:	bl	3550 <pthread_mutex_unlock@plt>
    880c:	cmp	w21, #0x2
    8810:	b.hi	89d4 <lzma_vli_encode@@XZ_5.0+0xa80>  // b.pmore
    8814:	csel	w0, w27, w28, ne  // ne = any
    8818:	ldr	x1, [sp, #136]
    881c:	sub	x2, x22, x1
    8820:	mov	x4, x22
    8824:	cmp	x2, #0x4, lsl #12
    8828:	b.ls	8834 <lzma_vli_encode@@XZ_5.0+0x8e0>  // b.plast
    882c:	add	x4, x1, #0x4, lsl #12
    8830:	ldr	w0, [sp, #124]
    8834:	ldr	x6, [x19, #24]
    8838:	ldr	x5, [x6], #8
    883c:	str	w0, [sp]
    8840:	ldr	x8, [x19, #88]
    8844:	mov	x7, x26
    8848:	ldr	x3, [sp, #112]
    884c:	ldr	x2, [x19, #8]
    8850:	ldr	x1, [x19, #40]
    8854:	ldr	x0, [x19, #64]
    8858:	blr	x8
    885c:	cbnz	w0, 88c4 <lzma_vli_encode@@XZ_5.0+0x970>
    8860:	ldr	x0, [x19, #24]
    8864:	ldr	x0, [x0, #8]
    8868:	cmp	x26, x0
    886c:	b.ls	88e8 <lzma_vli_encode@@XZ_5.0+0x994>  // b.plast
    8870:	mov	x0, x20
    8874:	bl	3530 <pthread_mutex_lock@plt>
    8878:	ldr	x0, [sp, #136]
    887c:	str	x0, [x19, #48]
    8880:	ldr	x0, [x19, #24]
    8884:	ldr	x0, [x0, #8]
    8888:	str	x0, [x19, #56]
    888c:	ldr	x21, [x19, #16]
    8890:	cmp	x22, x21
    8894:	b.ne	87f4 <lzma_vli_encode@@XZ_5.0+0x8a0>  // b.any
    8898:	ldr	w0, [x19]
    889c:	cmp	w0, #0x1
    88a0:	b.ne	87fc <lzma_vli_encode@@XZ_5.0+0x8a8>  // b.any
    88a4:	mov	x1, x20
    88a8:	mov	x0, x24
    88ac:	bl	33a0 <pthread_cond_wait@plt>
    88b0:	ldr	x0, [x19, #16]
    88b4:	cmp	x0, x22
    88b8:	b.eq	8898 <lzma_vli_encode@@XZ_5.0+0x944>  // b.none
    88bc:	mov	x22, x0
    88c0:	b	8800 <lzma_vli_encode@@XZ_5.0+0x8ac>
    88c4:	cmp	w0, #0x1
    88c8:	b.eq	8934 <lzma_vli_encode@@XZ_5.0+0x9e0>  // b.none
    88cc:	mov	w1, w0
    88d0:	mov	x0, x19
    88d4:	bl	8398 <lzma_vli_encode@@XZ_5.0+0x444>
    88d8:	mov	w21, #0x3                   	// #3
    88dc:	ldp	x25, x26, [sp, #80]
    88e0:	ldp	x27, x28, [sp, #96]
    88e4:	b	86c8 <lzma_vli_encode@@XZ_5.0+0x774>
    88e8:	mov	x0, x20
    88ec:	bl	3530 <pthread_mutex_lock@plt>
    88f0:	ldr	w21, [x19]
    88f4:	cmp	w21, #0x1
    88f8:	b.ne	8914 <lzma_vli_encode@@XZ_5.0+0x9c0>  // b.any
    88fc:	mov	x1, x20
    8900:	mov	x0, x23
    8904:	bl	33a0 <pthread_cond_wait@plt>
    8908:	ldr	w21, [x19]
    890c:	cmp	w21, #0x1
    8910:	b.eq	88fc <lzma_vli_encode@@XZ_5.0+0x9a8>  // b.none
    8914:	ldr	x22, [x19, #16]
    8918:	mov	x0, x20
    891c:	bl	3550 <pthread_mutex_unlock@plt>
    8920:	cmp	w21, #0x2
    8924:	b.ls	8990 <lzma_vli_encode@@XZ_5.0+0xa3c>  // b.plast
    8928:	ldp	x25, x26, [sp, #80]
    892c:	ldp	x27, x28, [sp, #96]
    8930:	b	86c8 <lzma_vli_encode@@XZ_5.0+0x774>
    8934:	ldr	x0, [x19, #24]
    8938:	ldr	x1, [x0]
    893c:	mov	x0, x25
    8940:	bl	3540 <lzma_block_header_encode@plt>
    8944:	cbnz	w0, 8974 <lzma_vli_encode@@XZ_5.0+0xa20>
    8948:	ldr	x21, [x19, #24]
    894c:	mov	x0, x25
    8950:	bl	3190 <lzma_block_unpadded_size@plt>
    8954:	str	x0, [x21, #16]
    8958:	ldr	x0, [x19, #24]
    895c:	ldr	x1, [x19, #160]
    8960:	str	x1, [x0, #24]
    8964:	mov	w21, #0x2                   	// #2
    8968:	ldp	x25, x26, [sp, #80]
    896c:	ldp	x27, x28, [sp, #96]
    8970:	b	86c8 <lzma_vli_encode@@XZ_5.0+0x774>
    8974:	mov	w1, w0
    8978:	mov	x0, x19
    897c:	bl	8398 <lzma_vli_encode@@XZ_5.0+0x444>
    8980:	mov	w21, #0x3                   	// #3
    8984:	ldp	x25, x26, [sp, #80]
    8988:	ldp	x27, x28, [sp, #96]
    898c:	b	86c8 <lzma_vli_encode@@XZ_5.0+0x774>
    8990:	ldr	x0, [x19, #24]
    8994:	str	xzr, [x0, #8]
    8998:	ldr	x4, [x19, #24]
    899c:	ldr	x3, [x4], #8
    89a0:	mov	x5, x26
    89a4:	mov	x2, x22
    89a8:	ldr	x1, [x19, #8]
    89ac:	mov	x0, x25
    89b0:	bl	34c0 <lzma_block_uncomp_encode@plt>
    89b4:	cbz	w0, 8948 <lzma_vli_encode@@XZ_5.0+0x9f4>
    89b8:	mov	w1, #0xb                   	// #11
    89bc:	mov	x0, x19
    89c0:	bl	8398 <lzma_vli_encode@@XZ_5.0+0x444>
    89c4:	mov	w21, #0x3                   	// #3
    89c8:	ldp	x25, x26, [sp, #80]
    89cc:	ldp	x27, x28, [sp, #96]
    89d0:	b	86c8 <lzma_vli_encode@@XZ_5.0+0x774>
    89d4:	ldp	x25, x26, [sp, #80]
    89d8:	ldp	x27, x28, [sp, #96]
    89dc:	b	86c8 <lzma_vli_encode@@XZ_5.0+0x774>
    89e0:	stp	x25, x26, [sp, #80]
    89e4:	mov	w0, #0x0                   	// #0
    89e8:	mov	w25, #0x1                   	// #1
    89ec:	mov	w22, w25
    89f0:	cbnz	w0, 8a20 <lzma_vli_encode@@XZ_5.0+0xacc>
    89f4:	mov	x0, x20
    89f8:	bl	3530 <pthread_mutex_lock@plt>
    89fc:	mov	w0, w22
    8a00:	ldr	w1, [x19]
    8a04:	cmp	w1, #0x4
    8a08:	b.eq	89f0 <lzma_vli_encode@@XZ_5.0+0xa9c>  // b.none
    8a0c:	str	wzr, [x19]
    8a10:	mov	x0, x23
    8a14:	bl	3200 <pthread_cond_signal@plt>
    8a18:	mov	w0, w25
    8a1c:	b	89f0 <lzma_vli_encode@@XZ_5.0+0xa9c>
    8a20:	mov	x0, x20
    8a24:	bl	3550 <pthread_mutex_unlock@plt>
    8a28:	ldr	x0, [x19, #32]
    8a2c:	add	x0, x0, #0x168
    8a30:	bl	3530 <pthread_mutex_lock@plt>
    8a34:	ldr	x0, [x19, #24]
    8a38:	cmp	w21, #0x2
    8a3c:	cset	w1, eq  // eq = none
    8a40:	strb	w1, [x0, #32]
    8a44:	ldr	x1, [x19, #32]
    8a48:	ldr	x2, [x19, #24]
    8a4c:	ldr	x0, [x1, #344]
    8a50:	ldr	x2, [x2, #24]
    8a54:	add	x0, x0, x2
    8a58:	str	x0, [x1, #344]
    8a5c:	ldr	x1, [x19, #32]
    8a60:	ldr	x2, [x19, #24]
    8a64:	ldr	x0, [x1, #352]
    8a68:	ldr	x2, [x2, #8]
    8a6c:	add	x0, x0, x2
    8a70:	str	x0, [x1, #352]
    8a74:	str	xzr, [x19, #48]
    8a78:	str	xzr, [x19, #56]
    8a7c:	ldr	x0, [x19, #32]
    8a80:	ldr	x1, [x0, #328]
    8a84:	str	x1, [x19, #344]
    8a88:	str	x19, [x0, #328]
    8a8c:	ldr	x0, [x19, #32]
    8a90:	add	x0, x0, #0x198
    8a94:	bl	3200 <pthread_cond_signal@plt>
    8a98:	ldr	x0, [x19, #32]
    8a9c:	add	x0, x0, #0x168
    8aa0:	bl	3550 <pthread_mutex_unlock@plt>
    8aa4:	ldp	x25, x26, [sp, #80]
    8aa8:	b	8678 <lzma_vli_encode@@XZ_5.0+0x724>
    8aac:	stp	x29, x30, [sp, #-64]!
    8ab0:	mov	x29, sp
    8ab4:	stp	x19, x20, [sp, #16]
    8ab8:	stp	x21, x22, [sp, #32]
    8abc:	mov	x20, x0
    8ac0:	mov	x21, x1
    8ac4:	ldr	w0, [x0, #324]
    8ac8:	cbz	w0, 8b74 <lzma_vli_encode@@XZ_5.0+0xc20>
    8acc:	str	x23, [sp, #48]
    8ad0:	mov	w22, #0x0                   	// #0
    8ad4:	mov	w23, #0x4                   	// #4
    8ad8:	mov	w0, w22
    8adc:	ubfiz	x19, x22, #3, #32
    8ae0:	sub	x19, x19, x0
    8ae4:	add	x19, x0, x19, lsl #2
    8ae8:	lsl	x19, x19, #4
    8aec:	ldr	x0, [x20, #312]
    8af0:	add	x0, x0, x19
    8af4:	add	x0, x0, #0x160
    8af8:	bl	3530 <pthread_mutex_lock@plt>
    8afc:	ldr	x0, [x20, #312]
    8b00:	str	w23, [x0, x19]
    8b04:	ldr	x0, [x20, #312]
    8b08:	add	x0, x0, x19
    8b0c:	add	x0, x0, #0x190
    8b10:	bl	3200 <pthread_cond_signal@plt>
    8b14:	ldr	x0, [x20, #312]
    8b18:	add	x0, x0, x19
    8b1c:	add	x0, x0, #0x160
    8b20:	bl	3550 <pthread_mutex_unlock@plt>
    8b24:	add	w22, w22, #0x1
    8b28:	ldr	w0, [x20, #324]
    8b2c:	cmp	w0, w22
    8b30:	b.hi	8ad8 <lzma_vli_encode@@XZ_5.0+0xb84>  // b.pmore
    8b34:	cbz	w0, 8b90 <lzma_vli_encode@@XZ_5.0+0xc3c>
    8b38:	mov	w19, #0x0                   	// #0
    8b3c:	mov	w3, w19
    8b40:	ldr	x0, [x20, #312]
    8b44:	ubfiz	x2, x19, #3, #32
    8b48:	sub	x2, x2, x3
    8b4c:	add	x2, x3, x2, lsl #2
    8b50:	add	x2, x0, x2, lsl #4
    8b54:	mov	x1, #0x0                   	// #0
    8b58:	ldr	x0, [x2, #456]
    8b5c:	bl	32d0 <pthread_join@plt>
    8b60:	add	w19, w19, #0x1
    8b64:	ldr	w0, [x20, #324]
    8b68:	cmp	w0, w19
    8b6c:	b.hi	8b3c <lzma_vli_encode@@XZ_5.0+0xbe8>  // b.pmore
    8b70:	ldr	x23, [sp, #48]
    8b74:	mov	x1, x21
    8b78:	ldr	x0, [x20, #312]
    8b7c:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    8b80:	ldp	x19, x20, [sp, #16]
    8b84:	ldp	x21, x22, [sp, #32]
    8b88:	ldp	x29, x30, [sp], #64
    8b8c:	ret
    8b90:	ldr	x23, [sp, #48]
    8b94:	b	8b74 <lzma_vli_encode@@XZ_5.0+0xc20>
    8b98:	stp	x29, x30, [sp, #-320]!
    8b9c:	mov	x29, sp
    8ba0:	stp	x19, x20, [sp, #16]
    8ba4:	stp	x21, x22, [sp, #32]
    8ba8:	mov	x20, x0
    8bac:	mov	x22, x1
    8bb0:	mov	x21, x2
    8bb4:	adrp	x19, 8000 <lzma_vli_encode@@XZ_5.0+0xac>
    8bb8:	add	x19, x19, #0xb98
    8bbc:	ldr	x0, [x0, #16]
    8bc0:	cmp	x0, x19
    8bc4:	b.ne	8cfc <lzma_vli_encode@@XZ_5.0+0xda8>  // b.any
    8bc8:	str	x19, [x20, #16]
    8bcc:	add	x4, sp, #0x68
    8bd0:	add	x3, sp, #0x70
    8bd4:	add	x2, sp, #0x78
    8bd8:	add	x1, sp, #0x80
    8bdc:	mov	x0, x21
    8be0:	bl	852c <lzma_vli_encode@@XZ_5.0+0x5d8>
    8be4:	cbnz	w0, 8cec <lzma_vli_encode@@XZ_5.0+0xd98>
    8be8:	ldr	x0, [sp, #120]
    8bec:	bl	3220 <lzma_raw_encoder_memusage@plt>
    8bf0:	cmn	x0, #0x1
    8bf4:	b.eq	8ed4 <lzma_vli_encode@@XZ_5.0+0xf80>  // b.none
    8bf8:	ldr	w1, [x21, #32]
    8bfc:	mov	w0, #0xb                   	// #11
    8c00:	cmp	w1, #0xf
    8c04:	b.hi	8cec <lzma_vli_encode@@XZ_5.0+0xd98>  // b.pmore
    8c08:	mov	w0, w1
    8c0c:	bl	30e0 <lzma_check_is_supported@plt>
    8c10:	and	w1, w0, #0xff
    8c14:	mov	w0, #0x3                   	// #3
    8c18:	cbz	w1, 8cec <lzma_vli_encode@@XZ_5.0+0xd98>
    8c1c:	ldr	x19, [x20]
    8c20:	cbz	x19, 8d08 <lzma_vli_encode@@XZ_5.0+0xdb4>
    8c24:	str	wzr, [x19]
    8c28:	ldr	x0, [sp, #112]
    8c2c:	str	x0, [x19, #8]
    8c30:	str	wzr, [x19, #308]
    8c34:	str	xzr, [x19, #336]
    8c38:	ldr	w1, [x19, #320]
    8c3c:	ldr	w0, [x21, #4]
    8c40:	cmp	w1, w0
    8c44:	b.eq	8e78 <lzma_vli_encode@@XZ_5.0+0xf24>  // b.none
    8c48:	mov	x1, x22
    8c4c:	mov	x0, x19
    8c50:	bl	8aac <lzma_vli_encode@@XZ_5.0+0xb58>
    8c54:	str	xzr, [x19, #312]
    8c58:	str	wzr, [x19, #320]
    8c5c:	str	wzr, [x19, #324]
    8c60:	str	xzr, [x19, #328]
    8c64:	ldr	w1, [x21, #4]
    8c68:	lsl	x0, x1, #3
    8c6c:	sub	x0, x0, x1
    8c70:	add	x0, x1, x0, lsl #2
    8c74:	mov	x1, x22
    8c78:	lsl	x0, x0, #4
    8c7c:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    8c80:	str	x0, [x19, #312]
    8c84:	cbz	x0, 8ee4 <lzma_vli_encode@@XZ_5.0+0xf90>
    8c88:	ldr	w0, [x21, #4]
    8c8c:	str	w0, [x19, #320]
    8c90:	ldr	w3, [x21, #4]
    8c94:	ldr	x2, [sp, #104]
    8c98:	mov	x1, x22
    8c9c:	add	x0, x19, #0x100
    8ca0:	bl	8094 <lzma_vli_encode@@XZ_5.0+0x140>
    8ca4:	cbnz	w0, 8cec <lzma_vli_encode@@XZ_5.0+0xd98>
    8ca8:	ldr	w0, [x21, #16]
    8cac:	str	w0, [x19, #304]
    8cb0:	ldr	x0, [x19, #16]
    8cb4:	cmn	x0, #0x1
    8cb8:	b.eq	8cd8 <lzma_vli_encode@@XZ_5.0+0xd84>  // b.none
    8cbc:	add	x20, x19, #0x18
    8cc0:	mov	x1, x22
    8cc4:	ldr	x0, [x20], #16
    8cc8:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    8ccc:	ldur	x0, [x20, #-8]
    8cd0:	cmn	x0, #0x1
    8cd4:	b.ne	8cc0 <lzma_vli_encode@@XZ_5.0+0xd6c>  // b.any
    8cd8:	mov	x2, x22
    8cdc:	add	x1, x19, #0x10
    8ce0:	ldr	x0, [sp, #120]
    8ce4:	bl	3240 <lzma_filters_copy@plt>
    8ce8:	cbz	w0, 8e88 <lzma_vli_encode@@XZ_5.0+0xf34>
    8cec:	ldp	x19, x20, [sp, #16]
    8cf0:	ldp	x21, x22, [sp, #32]
    8cf4:	ldp	x29, x30, [sp], #320
    8cf8:	ret
    8cfc:	mov	x0, x20
    8d00:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    8d04:	b	8bc8 <lzma_vli_encode@@XZ_5.0+0xc74>
    8d08:	mov	x1, x22
    8d0c:	mov	x0, #0x1d0                 	// #464
    8d10:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    8d14:	mov	x19, x0
    8d18:	cbz	x0, 8edc <lzma_vli_encode@@XZ_5.0+0xf88>
    8d1c:	stp	x23, x24, [sp, #48]
    8d20:	str	x0, [x20]
    8d24:	add	x23, x0, #0x168
    8d28:	mov	x1, #0x0                   	// #0
    8d2c:	mov	x0, x23
    8d30:	bl	32a0 <pthread_mutex_init@plt>
    8d34:	cbnz	w0, 8de0 <lzma_vli_encode@@XZ_5.0+0xe8c>
    8d38:	add	x24, x19, #0x198
    8d3c:	add	x1, sp, #0x58
    8d40:	mov	w0, #0x1                   	// #1
    8d44:	bl	3150 <clock_gettime@plt>
    8d48:	cbnz	w0, 8d58 <lzma_vli_encode@@XZ_5.0+0xe04>
    8d4c:	add	x0, sp, #0x50
    8d50:	bl	33d0 <pthread_condattr_init@plt>
    8d54:	cbz	w0, 8dfc <lzma_vli_encode@@XZ_5.0+0xea8>
    8d58:	str	wzr, [x19, #456]
    8d5c:	mov	x1, #0x0                   	// #0
    8d60:	mov	x0, x24
    8d64:	bl	3420 <pthread_cond_init@plt>
    8d68:	cbnz	w0, 8e54 <lzma_vli_encode@@XZ_5.0+0xf00>
    8d6c:	adrp	x0, 8000 <lzma_vli_encode@@XZ_5.0+0xac>
    8d70:	add	x0, x0, #0xf88
    8d74:	str	x0, [x20, #24]
    8d78:	adrp	x0, 8000 <lzma_vli_encode@@XZ_5.0+0xac>
    8d7c:	add	x0, x0, #0xef4
    8d80:	str	x0, [x20, #32]
    8d84:	adrp	x0, 8000 <lzma_vli_encode@@XZ_5.0+0xac>
    8d88:	add	x0, x0, #0x2cc
    8d8c:	str	x0, [x20, #40]
    8d90:	mov	x0, #0xffffffffffffffff    	// #-1
    8d94:	str	x0, [x19, #16]
    8d98:	str	xzr, [x19, #104]
    8d9c:	str	x0, [x19, #112]
    8da0:	str	xzr, [x19, #120]
    8da4:	str	xzr, [x19, #128]
    8da8:	str	xzr, [x19, #136]
    8dac:	str	xzr, [x19, #144]
    8db0:	str	xzr, [x19, #152]
    8db4:	str	xzr, [x19, #160]
    8db8:	str	xzr, [x19, #168]
    8dbc:	str	xzr, [x19, #96]
    8dc0:	stp	xzr, xzr, [x19, #256]
    8dc4:	stp	xzr, xzr, [x19, #272]
    8dc8:	stp	xzr, xzr, [x19, #288]
    8dcc:	str	xzr, [x19, #312]
    8dd0:	str	wzr, [x19, #320]
    8dd4:	str	wzr, [x19, #324]
    8dd8:	ldp	x23, x24, [sp, #48]
    8ddc:	b	8c24 <lzma_vli_encode@@XZ_5.0+0xcd0>
    8de0:	mov	x1, x22
    8de4:	mov	x0, x19
    8de8:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    8dec:	str	xzr, [x20]
    8df0:	mov	w0, #0x5                   	// #5
    8df4:	ldp	x23, x24, [sp, #48]
    8df8:	b	8cec <lzma_vli_encode@@XZ_5.0+0xd98>
    8dfc:	mov	w1, #0x1                   	// #1
    8e00:	add	x0, sp, #0x50
    8e04:	bl	3490 <pthread_condattr_setclock@plt>
    8e08:	cbz	w0, 8e18 <lzma_vli_encode@@XZ_5.0+0xec4>
    8e0c:	add	x0, sp, #0x50
    8e10:	bl	31e0 <pthread_condattr_destroy@plt>
    8e14:	b	8d58 <lzma_vli_encode@@XZ_5.0+0xe04>
    8e18:	stp	x25, x26, [sp, #64]
    8e1c:	add	x26, sp, #0x50
    8e20:	mov	x1, x26
    8e24:	mov	x0, x24
    8e28:	bl	3420 <pthread_cond_init@plt>
    8e2c:	mov	w25, w0
    8e30:	mov	x0, x26
    8e34:	bl	31e0 <pthread_condattr_destroy@plt>
    8e38:	cbnz	w25, 8e4c <lzma_vli_encode@@XZ_5.0+0xef8>
    8e3c:	mov	w0, #0x1                   	// #1
    8e40:	str	w0, [x19, #456]
    8e44:	ldp	x25, x26, [sp, #64]
    8e48:	b	8d6c <lzma_vli_encode@@XZ_5.0+0xe18>
    8e4c:	ldp	x25, x26, [sp, #64]
    8e50:	b	8d58 <lzma_vli_encode@@XZ_5.0+0xe04>
    8e54:	mov	x0, x23
    8e58:	bl	3410 <pthread_mutex_destroy@plt>
    8e5c:	mov	x1, x22
    8e60:	mov	x0, x19
    8e64:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    8e68:	str	xzr, [x20]
    8e6c:	mov	w0, #0x5                   	// #5
    8e70:	ldp	x23, x24, [sp, #48]
    8e74:	b	8cec <lzma_vli_encode@@XZ_5.0+0xd98>
    8e78:	mov	w1, #0x1                   	// #1
    8e7c:	mov	x0, x19
    8e80:	bl	83ec <lzma_vli_encode@@XZ_5.0+0x498>
    8e84:	b	8c90 <lzma_vli_encode@@XZ_5.0+0xd3c>
    8e88:	mov	x1, x22
    8e8c:	ldr	x0, [x19, #96]
    8e90:	bl	33e0 <lzma_index_end@plt>
    8e94:	mov	x0, x22
    8e98:	bl	33b0 <lzma_index_init@plt>
    8e9c:	str	x0, [x19, #96]
    8ea0:	cbz	x0, 8eec <lzma_vli_encode@@XZ_5.0+0xf98>
    8ea4:	str	wzr, [x19, #176]
    8ea8:	ldr	w0, [x21, #32]
    8eac:	str	w0, [x19, #192]
    8eb0:	add	x1, x19, #0xe8
    8eb4:	add	x0, x19, #0xb0
    8eb8:	bl	3390 <lzma_stream_header_encode@plt>
    8ebc:	cbnz	w0, 8cec <lzma_vli_encode@@XZ_5.0+0xd98>
    8ec0:	str	xzr, [x19, #248]
    8ec4:	str	xzr, [x19, #344]
    8ec8:	mov	x1, #0xc                   	// #12
    8ecc:	str	x1, [x19, #352]
    8ed0:	b	8cec <lzma_vli_encode@@XZ_5.0+0xd98>
    8ed4:	mov	w0, #0x8                   	// #8
    8ed8:	b	8cec <lzma_vli_encode@@XZ_5.0+0xd98>
    8edc:	mov	w0, #0x5                   	// #5
    8ee0:	b	8cec <lzma_vli_encode@@XZ_5.0+0xd98>
    8ee4:	mov	w0, #0x5                   	// #5
    8ee8:	b	8cec <lzma_vli_encode@@XZ_5.0+0xd98>
    8eec:	mov	w0, #0x5                   	// #5
    8ef0:	b	8cec <lzma_vli_encode@@XZ_5.0+0xd98>
    8ef4:	stp	x29, x30, [sp, #-48]!
    8ef8:	mov	x29, sp
    8efc:	stp	x19, x20, [sp, #16]
    8f00:	str	x21, [sp, #32]
    8f04:	mov	x21, x0
    8f08:	mov	x20, x1
    8f0c:	bl	8aac <lzma_vli_encode@@XZ_5.0+0xb58>
    8f10:	mov	x1, x20
    8f14:	add	x0, x21, #0x100
    8f18:	bl	8058 <lzma_vli_encode@@XZ_5.0+0x104>
    8f1c:	ldr	x0, [x21, #16]
    8f20:	cmn	x0, #0x1
    8f24:	b.eq	8f44 <lzma_vli_encode@@XZ_5.0+0xff0>  // b.none
    8f28:	add	x19, x21, #0x18
    8f2c:	mov	x1, x20
    8f30:	ldr	x0, [x19], #16
    8f34:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    8f38:	ldur	x0, [x19, #-8]
    8f3c:	cmn	x0, #0x1
    8f40:	b.ne	8f2c <lzma_vli_encode@@XZ_5.0+0xfd8>  // b.any
    8f44:	mov	x1, x20
    8f48:	add	x0, x21, #0x68
    8f4c:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    8f50:	mov	x1, x20
    8f54:	ldr	x0, [x21, #96]
    8f58:	bl	33e0 <lzma_index_end@plt>
    8f5c:	add	x0, x21, #0x198
    8f60:	bl	3520 <pthread_cond_destroy@plt>
    8f64:	add	x0, x21, #0x168
    8f68:	bl	3410 <pthread_mutex_destroy@plt>
    8f6c:	mov	x1, x20
    8f70:	mov	x0, x21
    8f74:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    8f78:	ldp	x19, x20, [sp, #16]
    8f7c:	ldr	x21, [sp, #32]
    8f80:	ldp	x29, x30, [sp], #48
    8f84:	ret
    8f88:	sub	sp, sp, #0x1f0
    8f8c:	stp	x29, x30, [sp, #16]
    8f90:	add	x29, sp, #0x10
    8f94:	stp	x19, x20, [sp, #32]
    8f98:	stp	x21, x22, [sp, #48]
    8f9c:	stp	x25, x26, [sp, #80]
    8fa0:	stp	x27, x28, [sp, #96]
    8fa4:	mov	x19, x0
    8fa8:	str	x1, [sp, #160]
    8fac:	str	x2, [sp, #144]
    8fb0:	str	x5, [sp, #168]
    8fb4:	mov	x28, x6
    8fb8:	str	x7, [sp, #136]
    8fbc:	ldr	w25, [sp, #496]
    8fc0:	ldr	w21, [x0]
    8fc4:	cmp	w21, #0x2
    8fc8:	b.eq	9668 <lzma_vli_encode@@XZ_5.0+0x1714>  // b.none
    8fcc:	stp	x23, x24, [sp, #64]
    8fd0:	mov	x23, x3
    8fd4:	mov	x22, x4
    8fd8:	b.hi	9004 <lzma_vli_encode@@XZ_5.0+0x10b0>  // b.pmore
    8fdc:	cbz	w21, 9048 <lzma_vli_encode@@XZ_5.0+0x10f4>
    8fe0:	str	xzr, [sp, #208]
    8fe4:	str	xzr, [sp, #216]
    8fe8:	str	wzr, [sp, #156]
    8fec:	mov	w0, #0x1                   	// #1
    8ff0:	str	w0, [sp, #152]
    8ff4:	str	w0, [sp, #128]
    8ff8:	str	w0, [sp, #192]
    8ffc:	str	w0, [sp, #132]
    9000:	b	95dc <lzma_vli_encode@@XZ_5.0+0x1688>
    9004:	cmp	w21, #0x3
    9008:	b.ne	903c <lzma_vli_encode@@XZ_5.0+0x10e8>  // b.any
    900c:	ldp	x23, x24, [sp, #64]
    9010:	ldr	x5, [sp, #136]
    9014:	mov	x4, x28
    9018:	ldr	x3, [sp, #168]
    901c:	mov	x2, #0xc                   	// #12
    9020:	add	x1, x19, #0xf8
    9024:	add	x0, x19, #0xe8
    9028:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
    902c:	ldr	x0, [x19, #248]
    9030:	cmp	x0, #0xb
    9034:	cset	w21, hi  // hi = pmore
    9038:	b	96ec <lzma_vli_encode@@XZ_5.0+0x1798>
    903c:	mov	w21, #0xb                   	// #11
    9040:	ldp	x23, x24, [sp, #64]
    9044:	b	96ec <lzma_vli_encode@@XZ_5.0+0x1798>
    9048:	ldr	x5, [sp, #136]
    904c:	mov	x4, x6
    9050:	ldr	x3, [sp, #168]
    9054:	mov	x2, #0xc                   	// #12
    9058:	add	x1, x0, #0xf8
    905c:	add	x0, x0, #0xe8
    9060:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
    9064:	ldr	x0, [x19, #248]
    9068:	cmp	x0, #0xb
    906c:	b.ls	970c <lzma_vli_encode@@XZ_5.0+0x17b8>  // b.plast
    9070:	str	xzr, [x19, #248]
    9074:	mov	w0, #0x1                   	// #1
    9078:	str	w0, [x19]
    907c:	b	8fe0 <lzma_vli_encode@@XZ_5.0+0x108c>
    9080:	add	x5, sp, #0xd8
    9084:	add	x4, sp, #0xd0
    9088:	ldr	x3, [sp, #136]
    908c:	mov	x2, x28
    9090:	ldr	x1, [sp, #168]
    9094:	add	x0, x19, #0x100
    9098:	bl	81fc <lzma_vli_encode@@XZ_5.0+0x2a8>
    909c:	mov	w21, w0
    90a0:	mov	x0, x20
    90a4:	bl	3550 <pthread_mutex_unlock@plt>
    90a8:	cmp	w21, #0x1
    90ac:	b.eq	9600 <lzma_vli_encode@@XZ_5.0+0x16ac>  // b.none
    90b0:	cbnz	w21, 9130 <lzma_vli_encode@@XZ_5.0+0x11dc>
    90b4:	add	x26, sp, #0x170
    90b8:	ldr	x0, [x23]
    90bc:	cmp	x22, x0
    90c0:	b.hi	9144 <lzma_vli_encode@@XZ_5.0+0x11f0>  // b.pmore
    90c4:	ldr	x0, [x19, #336]
    90c8:	cmp	x0, #0x0
    90cc:	ccmp	w25, #0x0, #0x4, ne  // ne = any
    90d0:	b.eq	942c <lzma_vli_encode@@XZ_5.0+0x14d8>  // b.none
    90d4:	ldr	x0, [x19, #336]
    90d8:	ldr	x1, [x0, #16]
    90dc:	str	x1, [sp, #368]
    90e0:	ldr	x5, [x19, #8]
    90e4:	mov	x4, x26
    90e8:	ldr	x3, [x0, #8]
    90ec:	mov	x2, x22
    90f0:	mov	x1, x23
    90f4:	ldr	x0, [sp, #144]
    90f8:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
    90fc:	ldr	x1, [x19, #8]
    9100:	ldr	w24, [sp, #152]
    9104:	ldr	x0, [sp, #368]
    9108:	cmp	x1, x0
    910c:	b.eq	9120 <lzma_vli_encode@@XZ_5.0+0x11cc>  // b.none
    9110:	ldr	x0, [x23]
    9114:	cmp	w25, #0x0
    9118:	ccmp	x0, x22, #0x0, ne  // ne = any
    911c:	cset	w24, eq  // eq = none
    9120:	mov	w0, w21
    9124:	str	wzr, [sp, #120]
    9128:	mov	w27, #0x2                   	// #2
    912c:	b	93b0 <lzma_vli_encode@@XZ_5.0+0x145c>
    9130:	mov	w1, #0x0                   	// #0
    9134:	mov	x0, x19
    9138:	bl	83ec <lzma_vli_encode@@XZ_5.0+0x498>
    913c:	ldp	x23, x24, [sp, #64]
    9140:	b	96ec <lzma_vli_encode@@XZ_5.0+0x1798>
    9144:	ldr	x0, [x19, #336]
    9148:	cbnz	x0, 90d4 <lzma_vli_encode@@XZ_5.0+0x1180>
    914c:	ldr	w1, [x19, #288]
    9150:	ldr	w0, [x19, #280]
    9154:	cmp	w1, w0
    9158:	b.cs	942c <lzma_vli_encode@@XZ_5.0+0x14d8>  // b.hs, b.nlast
    915c:	mov	w1, w21
    9160:	cbnz	w1, 918c <lzma_vli_encode@@XZ_5.0+0x1238>
    9164:	mov	x0, x20
    9168:	bl	3530 <pthread_mutex_lock@plt>
    916c:	ldr	x0, [x19, #328]
    9170:	ldr	w1, [sp, #192]
    9174:	cbz	x0, 9160 <lzma_vli_encode@@XZ_5.0+0x120c>
    9178:	str	x0, [x19, #336]
    917c:	ldr	x0, [x0, #344]
    9180:	str	x0, [x19, #328]
    9184:	ldr	w1, [sp, #128]
    9188:	b	9160 <lzma_vli_encode@@XZ_5.0+0x120c>
    918c:	mov	x0, x20
    9190:	bl	3550 <pthread_mutex_unlock@plt>
    9194:	ldr	x0, [x19, #336]
    9198:	cbnz	x0, 92d4 <lzma_vli_encode@@XZ_5.0+0x1380>
    919c:	ldr	w0, [x19, #324]
    91a0:	ldr	w1, [x19, #320]
    91a4:	mov	w24, w21
    91a8:	cmp	w0, w1
    91ac:	b.eq	9320 <lzma_vli_encode@@XZ_5.0+0x13cc>  // b.none
    91b0:	mov	w1, w0
    91b4:	ubfiz	x0, x0, #3, #32
    91b8:	sub	x0, x0, x1
    91bc:	add	x0, x1, x0, lsl #2
    91c0:	lsl	x27, x0, #4
    91c4:	ldr	x0, [x19, #312]
    91c8:	str	x0, [sp, #120]
    91cc:	add	x24, x0, x27
    91d0:	ldr	x1, [sp, #160]
    91d4:	ldr	x0, [x19, #8]
    91d8:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    91dc:	str	x0, [x24, #8]
    91e0:	cbz	x0, 9398 <lzma_vli_encode@@XZ_5.0+0x1444>
    91e4:	add	x0, x24, #0x160
    91e8:	str	x0, [sp, #184]
    91ec:	mov	x1, #0x0                   	// #0
    91f0:	bl	32a0 <pthread_mutex_init@plt>
    91f4:	cbnz	w0, 938c <lzma_vli_encode@@XZ_5.0+0x1438>
    91f8:	add	x0, x24, #0x190
    91fc:	str	x0, [sp, #176]
    9200:	mov	x1, x26
    9204:	ldr	w0, [sp, #152]
    9208:	bl	3150 <clock_gettime@plt>
    920c:	cbnz	w0, 921c <lzma_vli_encode@@XZ_5.0+0x12c8>
    9210:	add	x0, sp, #0xf0
    9214:	bl	33d0 <pthread_condattr_init@plt>
    9218:	cbz	w0, 932c <lzma_vli_encode@@XZ_5.0+0x13d8>
    921c:	str	wzr, [x24, #448]
    9220:	mov	x1, #0x0                   	// #0
    9224:	ldr	x0, [sp, #176]
    9228:	bl	3420 <pthread_cond_init@plt>
    922c:	cbnz	w0, 9384 <lzma_vli_encode@@XZ_5.0+0x1430>
    9230:	ldr	x0, [sp, #120]
    9234:	str	wzr, [x0, x27]
    9238:	ldr	x0, [sp, #160]
    923c:	str	x0, [x24, #40]
    9240:	str	x19, [x24, #32]
    9244:	str	xzr, [x24, #48]
    9248:	str	xzr, [x24, #56]
    924c:	str	xzr, [x24, #64]
    9250:	mov	x0, #0xffffffffffffffff    	// #-1
    9254:	str	x0, [x24, #72]
    9258:	str	xzr, [x24, #80]
    925c:	str	xzr, [x24, #88]
    9260:	str	xzr, [x24, #96]
    9264:	str	xzr, [x24, #104]
    9268:	str	xzr, [x24, #112]
    926c:	str	xzr, [x24, #120]
    9270:	str	xzr, [x24, #128]
    9274:	mov	x0, x26
    9278:	bl	3170 <sigfillset@plt>
    927c:	add	x27, sp, #0xf0
    9280:	mov	x2, x27
    9284:	mov	x1, x26
    9288:	mov	w0, #0x2                   	// #2
    928c:	bl	30c0 <pthread_sigmask@plt>
    9290:	mov	x3, x24
    9294:	adrp	x2, 8000 <lzma_vli_encode@@XZ_5.0+0xac>
    9298:	add	x2, x2, #0x64c
    929c:	mov	x1, #0x0                   	// #0
    92a0:	add	x0, x24, #0x1c8
    92a4:	bl	32b0 <pthread_create@plt>
    92a8:	str	w0, [sp, #120]
    92ac:	mov	x2, #0x0                   	// #0
    92b0:	mov	x1, x27
    92b4:	mov	w0, #0x2                   	// #2
    92b8:	bl	30c0 <pthread_sigmask@plt>
    92bc:	ldr	w0, [sp, #120]
    92c0:	cbnz	w0, 937c <lzma_vli_encode@@XZ_5.0+0x1428>
    92c4:	ldr	w0, [x19, #324]
    92c8:	add	w0, w0, #0x1
    92cc:	str	w0, [x19, #324]
    92d0:	str	x24, [x19, #336]
    92d4:	ldr	x0, [x19, #336]
    92d8:	add	x0, x0, #0x160
    92dc:	bl	3530 <pthread_mutex_lock@plt>
    92e0:	ldr	x0, [x19, #336]
    92e4:	mov	w1, #0x1                   	// #1
    92e8:	str	w1, [x0]
    92ec:	ldr	x0, [x19, #336]
    92f0:	str	xzr, [x0, #16]
    92f4:	ldr	x24, [x19, #336]
    92f8:	add	x0, x19, #0x100
    92fc:	bl	8170 <lzma_vli_encode@@XZ_5.0+0x21c>
    9300:	str	x0, [x24, #24]
    9304:	ldr	x0, [x19, #336]
    9308:	add	x0, x0, #0x190
    930c:	bl	3200 <pthread_cond_signal@plt>
    9310:	ldr	x0, [x19, #336]
    9314:	add	x0, x0, #0x160
    9318:	bl	3550 <pthread_mutex_unlock@plt>
    931c:	mov	w24, w21
    9320:	ldr	x0, [x19, #336]
    9324:	cbnz	x0, 90d4 <lzma_vli_encode@@XZ_5.0+0x1180>
    9328:	b	9428 <lzma_vli_encode@@XZ_5.0+0x14d4>
    932c:	ldr	w1, [sp, #152]
    9330:	add	x0, sp, #0xf0
    9334:	bl	3490 <pthread_condattr_setclock@plt>
    9338:	cbz	w0, 9348 <lzma_vli_encode@@XZ_5.0+0x13f4>
    933c:	add	x0, sp, #0xf0
    9340:	bl	31e0 <pthread_condattr_destroy@plt>
    9344:	b	921c <lzma_vli_encode@@XZ_5.0+0x12c8>
    9348:	add	x0, sp, #0xf0
    934c:	str	x0, [sp, #200]
    9350:	mov	x1, x0
    9354:	ldr	x0, [sp, #176]
    9358:	bl	3420 <pthread_cond_init@plt>
    935c:	str	w0, [sp, #196]
    9360:	ldr	x0, [sp, #200]
    9364:	bl	31e0 <pthread_condattr_destroy@plt>
    9368:	ldr	w0, [sp, #196]
    936c:	cbnz	w0, 921c <lzma_vli_encode@@XZ_5.0+0x12c8>
    9370:	mov	w0, #0x1                   	// #1
    9374:	str	w0, [x24, #448]
    9378:	b	9230 <lzma_vli_encode@@XZ_5.0+0x12dc>
    937c:	ldr	x0, [sp, #176]
    9380:	bl	3520 <pthread_cond_destroy@plt>
    9384:	ldr	x0, [sp, #184]
    9388:	bl	3410 <pthread_mutex_destroy@plt>
    938c:	ldr	x1, [sp, #160]
    9390:	ldr	x0, [x24, #8]
    9394:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    9398:	mov	w24, #0x5                   	// #5
    939c:	b	9320 <lzma_vli_encode@@XZ_5.0+0x13cc>
    93a0:	ldr	x0, [x19, #336]
    93a4:	add	x0, x0, #0x190
    93a8:	bl	3200 <pthread_cond_signal@plt>
    93ac:	ldr	w0, [sp, #128]
    93b0:	cbnz	w0, 93f4 <lzma_vli_encode@@XZ_5.0+0x14a0>
    93b4:	ldr	x0, [x19, #336]
    93b8:	add	x0, x0, #0x160
    93bc:	bl	3530 <pthread_mutex_lock@plt>
    93c0:	ldr	x1, [x19, #336]
    93c4:	ldr	w0, [sp, #132]
    93c8:	ldr	w2, [x1]
    93cc:	cbz	w2, 93e8 <lzma_vli_encode@@XZ_5.0+0x1494>
    93d0:	ldr	x0, [sp, #368]
    93d4:	str	x0, [x1, #16]
    93d8:	cbz	w24, 93a0 <lzma_vli_encode@@XZ_5.0+0x144c>
    93dc:	ldr	x0, [x19, #336]
    93e0:	str	w27, [x0]
    93e4:	b	93a0 <lzma_vli_encode@@XZ_5.0+0x144c>
    93e8:	ldr	w1, [sp, #132]
    93ec:	str	w1, [sp, #120]
    93f0:	b	93b0 <lzma_vli_encode@@XZ_5.0+0x145c>
    93f4:	ldr	x0, [x19, #336]
    93f8:	add	x0, x0, #0x160
    93fc:	bl	3550 <pthread_mutex_unlock@plt>
    9400:	ldr	w0, [sp, #120]
    9404:	cbnz	w0, 9414 <lzma_vli_encode@@XZ_5.0+0x14c0>
    9408:	cbz	w24, 90b8 <lzma_vli_encode@@XZ_5.0+0x1164>
    940c:	str	xzr, [x19, #336]
    9410:	b	90b8 <lzma_vli_encode@@XZ_5.0+0x1164>
    9414:	mov	x0, x20
    9418:	bl	3530 <pthread_mutex_lock@plt>
    941c:	ldr	w24, [x19, #308]
    9420:	mov	x0, x20
    9424:	bl	3550 <pthread_mutex_unlock@plt>
    9428:	cbnz	w24, 9478 <lzma_vli_encode@@XZ_5.0+0x1524>
    942c:	ldr	x27, [x23]
    9430:	cmp	x27, x22
    9434:	b.eq	9490 <lzma_vli_encode@@XZ_5.0+0x153c>  // b.none
    9438:	ldr	x0, [x28]
    943c:	ldr	x1, [sp, #136]
    9440:	cmp	x0, x1
    9444:	b.eq	9714 <lzma_vli_encode@@XZ_5.0+0x17c0>  // b.none
    9448:	ldr	w0, [x19, #304]
    944c:	cmp	w0, #0x0
    9450:	ldr	w1, [sp, #156]
    9454:	ccmp	w1, #0x0, #0x0, ne  // ne = any
    9458:	b.eq	94c0 <lzma_vli_encode@@XZ_5.0+0x156c>  // b.none
    945c:	mov	x0, x20
    9460:	bl	3530 <pthread_mutex_lock@plt>
    9464:	mov	w24, #0x0                   	// #0
    9468:	add	x26, x19, #0x198
    946c:	add	x0, sp, #0xe0
    9470:	str	x0, [sp, #120]
    9474:	b	9564 <lzma_vli_encode@@XZ_5.0+0x1610>
    9478:	mov	w1, #0x0                   	// #0
    947c:	mov	x0, x19
    9480:	bl	83ec <lzma_vli_encode@@XZ_5.0+0x498>
    9484:	mov	w21, w24
    9488:	ldp	x23, x24, [sp, #64]
    948c:	b	96ec <lzma_vli_encode@@XZ_5.0+0x1798>
    9490:	cbz	w25, 96cc <lzma_vli_encode@@XZ_5.0+0x1778>
    9494:	cmp	w25, #0x4
    9498:	b.eq	96d8 <lzma_vli_encode@@XZ_5.0+0x1784>  // b.none
    949c:	ldr	w0, [x19, #288]
    94a0:	cbnz	w0, 9438 <lzma_vli_encode@@XZ_5.0+0x14e4>
    94a4:	cmp	w25, #0x3
    94a8:	b.eq	962c <lzma_vli_encode@@XZ_5.0+0x16d8>  // b.none
    94ac:	cmp	w25, #0x2
    94b0:	b.ne	9438 <lzma_vli_encode@@XZ_5.0+0x14e4>  // b.any
    94b4:	mov	w21, #0x1                   	// #1
    94b8:	ldp	x23, x24, [sp, #64]
    94bc:	b	96ec <lzma_vli_encode@@XZ_5.0+0x1798>
    94c0:	mov	w2, #0x4dd3                	// #19923
    94c4:	movk	w2, #0x1062, lsl #16
    94c8:	umull	x2, w0, w2
    94cc:	lsr	x1, x2, #38
    94d0:	str	x1, [sp, #224]
    94d4:	mov	w2, #0x3e8                 	// #1000
    94d8:	msub	w0, w1, w2, w0
    94dc:	mov	w1, #0x4240                	// #16960
    94e0:	movk	w1, #0xf, lsl #16
    94e4:	mul	w0, w0, w1
    94e8:	mov	w0, w0
    94ec:	str	x0, [sp, #232]
    94f0:	add	x1, sp, #0x170
    94f4:	ldr	w0, [x19, #456]
    94f8:	bl	3150 <clock_gettime@plt>
    94fc:	ldr	x1, [sp, #224]
    9500:	ldr	x0, [sp, #368]
    9504:	add	x1, x1, x0
    9508:	str	x1, [sp, #224]
    950c:	ldr	x0, [sp, #232]
    9510:	ldr	x2, [sp, #376]
    9514:	add	x0, x0, x2
    9518:	mov	x2, #0xc9ff                	// #51711
    951c:	movk	x2, #0x3b9a, lsl #16
    9520:	cmp	x0, x2
    9524:	b.gt	9538 <lzma_vli_encode@@XZ_5.0+0x15e4>
    9528:	str	x0, [sp, #232]
    952c:	mov	w0, #0x1                   	// #1
    9530:	str	w0, [sp, #156]
    9534:	b	945c <lzma_vli_encode@@XZ_5.0+0x1508>
    9538:	mov	x2, #0xffffffffffff3600    	// #-51712
    953c:	movk	x2, #0xc465, lsl #16
    9540:	add	x0, x0, x2
    9544:	str	x0, [sp, #232]
    9548:	add	x1, x1, #0x1
    954c:	str	x1, [sp, #224]
    9550:	b	952c <lzma_vli_encode@@XZ_5.0+0x15d8>
    9554:	mov	x1, x20
    9558:	mov	x0, x26
    955c:	bl	33a0 <pthread_cond_wait@plt>
    9560:	mov	w24, w21
    9564:	cmp	x27, x22
    9568:	b.cs	9584 <lzma_vli_encode@@XZ_5.0+0x1630>  // b.hs, b.nlast
    956c:	ldr	x0, [x19, #328]
    9570:	cbz	x0, 9584 <lzma_vli_encode@@XZ_5.0+0x1630>
    9574:	ldr	w1, [x19, #288]
    9578:	ldr	w0, [x19, #280]
    957c:	cmp	w1, w0
    9580:	b.cc	95d0 <lzma_vli_encode@@XZ_5.0+0x167c>  // b.lo, b.ul, b.last
    9584:	add	x0, x19, #0x100
    9588:	bl	81c8 <lzma_vli_encode@@XZ_5.0+0x274>
    958c:	and	w0, w0, #0xff
    9590:	cbnz	w0, 95d0 <lzma_vli_encode@@XZ_5.0+0x167c>
    9594:	ldr	w0, [x19, #308]
    9598:	cmp	w0, #0x0
    959c:	cset	w21, ne  // ne = any
    95a0:	orr	w21, w24, w21
    95a4:	ands	w21, w21, #0xff
    95a8:	b.ne	95d0 <lzma_vli_encode@@XZ_5.0+0x167c>  // b.any
    95ac:	ldr	w0, [x19, #304]
    95b0:	cbz	w0, 9554 <lzma_vli_encode@@XZ_5.0+0x1600>
    95b4:	ldr	x2, [sp, #120]
    95b8:	mov	x1, x20
    95bc:	mov	x0, x26
    95c0:	bl	3560 <pthread_cond_timedwait@plt>
    95c4:	cmp	w0, #0x0
    95c8:	cset	w21, ne  // ne = any
    95cc:	b	9560 <lzma_vli_encode@@XZ_5.0+0x160c>
    95d0:	mov	x0, x20
    95d4:	bl	3550 <pthread_mutex_unlock@plt>
    95d8:	cbnz	w24, 96e4 <lzma_vli_encode@@XZ_5.0+0x1790>
    95dc:	add	x20, x19, #0x168
    95e0:	mov	x0, x20
    95e4:	bl	3530 <pthread_mutex_lock@plt>
    95e8:	ldr	w21, [x19, #308]
    95ec:	cbz	w21, 9080 <lzma_vli_encode@@XZ_5.0+0x112c>
    95f0:	mov	x0, x20
    95f4:	bl	3550 <pthread_mutex_unlock@plt>
    95f8:	cmp	w21, #0x1
    95fc:	b.ne	9130 <lzma_vli_encode@@XZ_5.0+0x11dc>  // b.any
    9600:	ldr	x3, [sp, #216]
    9604:	ldr	x2, [sp, #208]
    9608:	ldr	x1, [sp, #160]
    960c:	ldr	x0, [x19, #96]
    9610:	bl	3300 <lzma_index_append@plt>
    9614:	mov	w21, w0
    9618:	ldr	x0, [x28]
    961c:	ldr	x1, [sp, #136]
    9620:	cmp	x0, x1
    9624:	b.cs	90b0 <lzma_vli_encode@@XZ_5.0+0x115c>  // b.hs, b.nlast
    9628:	b	95dc <lzma_vli_encode@@XZ_5.0+0x1688>
    962c:	ldr	x2, [x19, #96]
    9630:	ldr	x1, [sp, #160]
    9634:	add	x0, x19, #0x68
    9638:	bl	7164 <lzma_filter_flags_encode@@XZ_5.0+0x33c>
    963c:	mov	w21, w0
    9640:	cbnz	w0, 971c <lzma_vli_encode@@XZ_5.0+0x17c8>
    9644:	mov	w0, #0x2                   	// #2
    9648:	str	w0, [x19]
    964c:	ldr	x0, [x19, #96]
    9650:	bl	3510 <lzma_index_size@plt>
    9654:	ldr	x1, [x19, #352]
    9658:	add	x1, x1, #0xc
    965c:	add	x1, x1, x0
    9660:	str	x1, [x19, #352]
    9664:	ldp	x23, x24, [sp, #64]
    9668:	str	wzr, [sp]
    966c:	ldr	x8, [x19, #128]
    9670:	ldr	x7, [sp, #136]
    9674:	mov	x6, x28
    9678:	ldr	x5, [sp, #168]
    967c:	mov	x4, #0x0                   	// #0
    9680:	mov	x3, #0x0                   	// #0
    9684:	mov	x2, #0x0                   	// #0
    9688:	ldr	x1, [sp, #160]
    968c:	ldr	x0, [x19, #104]
    9690:	blr	x8
    9694:	mov	w21, w0
    9698:	cmp	w0, #0x1
    969c:	b.ne	96ec <lzma_vli_encode@@XZ_5.0+0x1798>  // b.any
    96a0:	ldr	x0, [x19, #96]
    96a4:	bl	3510 <lzma_index_size@plt>
    96a8:	str	x0, [x19, #184]
    96ac:	add	x1, x19, #0xe8
    96b0:	add	x0, x19, #0xb0
    96b4:	bl	3210 <lzma_stream_footer_encode@plt>
    96b8:	mov	w21, #0xb                   	// #11
    96bc:	cbnz	w0, 96ec <lzma_vli_encode@@XZ_5.0+0x1798>
    96c0:	mov	w0, #0x3                   	// #3
    96c4:	str	w0, [x19]
    96c8:	b	9010 <lzma_vli_encode@@XZ_5.0+0x10bc>
    96cc:	mov	w21, w25
    96d0:	ldp	x23, x24, [sp, #64]
    96d4:	b	96ec <lzma_vli_encode@@XZ_5.0+0x1798>
    96d8:	mov	w21, #0x1                   	// #1
    96dc:	ldp	x23, x24, [sp, #64]
    96e0:	b	96ec <lzma_vli_encode@@XZ_5.0+0x1798>
    96e4:	mov	w21, #0x20                  	// #32
    96e8:	ldp	x23, x24, [sp, #64]
    96ec:	mov	w0, w21
    96f0:	ldp	x19, x20, [sp, #32]
    96f4:	ldp	x21, x22, [sp, #48]
    96f8:	ldp	x25, x26, [sp, #80]
    96fc:	ldp	x27, x28, [sp, #96]
    9700:	ldp	x29, x30, [sp, #16]
    9704:	add	sp, sp, #0x1f0
    9708:	ret
    970c:	ldp	x23, x24, [sp, #64]
    9710:	b	96ec <lzma_vli_encode@@XZ_5.0+0x1798>
    9714:	ldp	x23, x24, [sp, #64]
    9718:	b	96ec <lzma_vli_encode@@XZ_5.0+0x1798>
    971c:	ldp	x23, x24, [sp, #64]
    9720:	b	96ec <lzma_vli_encode@@XZ_5.0+0x1798>

0000000000009724 <lzma_stream_encoder_mt@@XZ_5.2>:
    9724:	stp	x29, x30, [sp, #-48]!
    9728:	mov	x29, sp
    972c:	stp	x19, x20, [sp, #16]
    9730:	str	x21, [sp, #32]
    9734:	mov	x20, x0
    9738:	mov	x21, x1
    973c:	bl	3950 <lzma_version_string@@XZ_5.0+0x288>
    9740:	mov	w19, w0
    9744:	cbz	w0, 975c <lzma_stream_encoder_mt@@XZ_5.2+0x38>
    9748:	mov	w0, w19
    974c:	ldp	x19, x20, [sp, #16]
    9750:	ldr	x21, [sp, #32]
    9754:	ldp	x29, x30, [sp], #48
    9758:	ret
    975c:	mov	x2, x21
    9760:	ldr	x1, [x20, #48]
    9764:	ldr	x0, [x20, #56]
    9768:	bl	8b98 <lzma_vli_encode@@XZ_5.0+0xc44>
    976c:	mov	w19, w0
    9770:	cbnz	w0, 979c <lzma_stream_encoder_mt@@XZ_5.2+0x78>
    9774:	ldr	x1, [x20, #56]
    9778:	mov	w0, #0x1                   	// #1
    977c:	strb	w0, [x1, #88]
    9780:	ldr	x1, [x20, #56]
    9784:	strb	w0, [x1, #90]
    9788:	ldr	x1, [x20, #56]
    978c:	strb	w0, [x1, #92]
    9790:	ldr	x1, [x20, #56]
    9794:	strb	w0, [x1, #91]
    9798:	b	9748 <lzma_stream_encoder_mt@@XZ_5.2+0x24>
    979c:	mov	x0, x20
    97a0:	bl	3320 <lzma_end@plt>
    97a4:	b	9748 <lzma_stream_encoder_mt@@XZ_5.2+0x24>

00000000000097a8 <lzma_stream_encoder_mt_memusage@@XZ_5.2>:
    97a8:	stp	x29, x30, [sp, #-272]!
    97ac:	mov	x29, sp
    97b0:	stp	x19, x20, [sp, #16]
    97b4:	stp	x21, x22, [sp, #32]
    97b8:	mov	x21, x0
    97bc:	add	x4, sp, #0x38
    97c0:	add	x3, sp, #0x40
    97c4:	add	x2, sp, #0x48
    97c8:	add	x1, sp, #0x50
    97cc:	bl	852c <lzma_vli_encode@@XZ_5.0+0x5d8>
    97d0:	mov	x20, #0xffffffffffffffff    	// #-1
    97d4:	cbnz	w0, 9860 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb8>
    97d8:	ldr	x0, [sp, #72]
    97dc:	bl	3220 <lzma_raw_encoder_memusage@plt>
    97e0:	mov	x20, x0
    97e4:	cmn	x0, #0x1
    97e8:	b.eq	9860 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb8>  // b.none
    97ec:	ldr	w19, [x21, #4]
    97f0:	ldr	x22, [sp, #64]
    97f4:	mov	w1, w19
    97f8:	ldr	x0, [sp, #56]
    97fc:	bl	802c <lzma_vli_encode@@XZ_5.0+0xd8>
    9800:	cmn	x0, #0x1
    9804:	b.eq	9874 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xcc>  // b.none
    9808:	mov	w19, w19
    980c:	mul	x2, x19, x22
    9810:	ldr	w3, [x21, #4]
    9814:	lsl	x1, x3, #3
    9818:	sub	x1, x1, x3
    981c:	add	x1, x3, x1, lsl #2
    9820:	mov	x3, #0x81d0                	// #33232
    9824:	add	x1, x3, x1, lsl #4
    9828:	mvn	x3, x1
    982c:	cmp	x3, x2
    9830:	b.cc	987c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xd4>  // b.lo, b.ul, b.last
    9834:	mul	x19, x19, x20
    9838:	add	x1, x2, x1
    983c:	mvn	x2, x1
    9840:	mov	x20, #0xffffffffffffffff    	// #-1
    9844:	cmp	x2, x19
    9848:	b.cc	9860 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb8>  // b.lo, b.ul, b.last
    984c:	add	x19, x19, x1
    9850:	mvn	x1, x19
    9854:	add	x19, x0, x19
    9858:	cmp	x1, x0
    985c:	csel	x20, x19, x20, cs  // cs = hs, nlast
    9860:	mov	x0, x20
    9864:	ldp	x19, x20, [sp, #16]
    9868:	ldp	x21, x22, [sp, #32]
    986c:	ldp	x29, x30, [sp], #272
    9870:	ret
    9874:	mov	x20, x0
    9878:	b	9860 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb8>
    987c:	mov	x20, #0xffffffffffffffff    	// #-1
    9880:	b	9860 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0xb8>
    9884:	mov	x4, x0
    9888:	ldr	x0, [x0, #104]
    988c:	str	x0, [x1]
    9890:	ldr	x0, [x4, #96]
    9894:	str	x0, [x2]
    9898:	mov	w0, #0x0                   	// #0
    989c:	cbz	x3, 98b8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x110>
    98a0:	ldr	x1, [x4, #104]
    98a4:	mov	w0, #0x6                   	// #6
    98a8:	cmp	x1, x3
    98ac:	b.hi	98b8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x110>  // b.pmore
    98b0:	str	x3, [x4, #96]
    98b4:	mov	w0, #0x0                   	// #0
    98b8:	ret
    98bc:	stp	x29, x30, [sp, #-64]!
    98c0:	mov	x29, sp
    98c4:	stp	x19, x20, [sp, #16]
    98c8:	stp	x21, x22, [sp, #32]
    98cc:	str	x23, [sp, #48]
    98d0:	mov	x19, x0
    98d4:	mov	x22, x1
    98d8:	mov	x20, x2
    98dc:	and	w23, w3, #0xff
    98e0:	adrp	x21, 9000 <lzma_vli_encode@@XZ_5.0+0x10ac>
    98e4:	add	x21, x21, #0x8bc
    98e8:	ldr	x0, [x0, #16]
    98ec:	cmp	x0, x21
    98f0:	b.ne	9948 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1a0>  // b.any
    98f4:	str	x21, [x19, #16]
    98f8:	ldr	x3, [x19]
    98fc:	cbz	x3, 9954 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x1ac>
    9900:	str	wzr, [x3, #72]
    9904:	strb	w23, [x3, #76]
    9908:	str	xzr, [x3, #80]
    990c:	str	wzr, [x3, #112]
    9910:	str	xzr, [x3, #120]
    9914:	str	wzr, [x3, #128]
    9918:	str	xzr, [x3, #88]
    991c:	cmp	x20, #0x0
    9920:	csinc	x20, x20, xzr, ne  // ne = any
    9924:	str	x20, [x3, #96]
    9928:	mov	x0, #0x8000                	// #32768
    992c:	str	x0, [x3, #104]
    9930:	mov	w0, #0x0                   	// #0
    9934:	ldp	x19, x20, [sp, #16]
    9938:	ldp	x21, x22, [sp, #32]
    993c:	ldr	x23, [sp, #48]
    9940:	ldp	x29, x30, [sp], #64
    9944:	ret
    9948:	mov	x0, x19
    994c:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    9950:	b	98f4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x14c>
    9954:	mov	x1, x22
    9958:	mov	x0, #0xe0                  	// #224
    995c:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    9960:	mov	x3, x0
    9964:	cbz	x0, 99bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x214>
    9968:	str	x0, [x19]
    996c:	adrp	x0, 9000 <lzma_vli_encode@@XZ_5.0+0x10ac>
    9970:	add	x0, x0, #0x9f4
    9974:	str	x0, [x19, #24]
    9978:	adrp	x0, 9000 <lzma_vli_encode@@XZ_5.0+0x10ac>
    997c:	add	x0, x0, #0x9c4
    9980:	str	x0, [x19, #32]
    9984:	adrp	x0, 9000 <lzma_vli_encode@@XZ_5.0+0x10ac>
    9988:	add	x0, x0, #0x884
    998c:	str	x0, [x19, #56]
    9990:	str	xzr, [x3]
    9994:	mov	x0, #0xffffffffffffffff    	// #-1
    9998:	str	x0, [x3, #8]
    999c:	str	xzr, [x3, #16]
    99a0:	str	xzr, [x3, #24]
    99a4:	str	xzr, [x3, #32]
    99a8:	str	xzr, [x3, #40]
    99ac:	str	xzr, [x3, #48]
    99b0:	str	xzr, [x3, #56]
    99b4:	str	xzr, [x3, #64]
    99b8:	b	9900 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x158>
    99bc:	mov	w0, #0x5                   	// #5
    99c0:	b	9934 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x18c>
    99c4:	stp	x29, x30, [sp, #-32]!
    99c8:	mov	x29, sp
    99cc:	stp	x19, x20, [sp, #16]
    99d0:	mov	x19, x0
    99d4:	mov	x20, x1
    99d8:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    99dc:	mov	x1, x20
    99e0:	mov	x0, x19
    99e4:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    99e8:	ldp	x19, x20, [sp, #16]
    99ec:	ldp	x29, x30, [sp], #32
    99f0:	ret
    99f4:	sub	sp, sp, #0xb0
    99f8:	stp	x29, x30, [sp, #16]
    99fc:	add	x29, sp, #0x10
    9a00:	stp	x19, x20, [sp, #32]
    9a04:	mov	x19, x0
    9a08:	str	x1, [sp, #112]
    9a0c:	str	x5, [sp, #120]
    9a10:	ldr	x0, [x6]
    9a14:	cmp	x7, x0
    9a18:	b.ls	9a58 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2b0>  // b.plast
    9a1c:	stp	x21, x22, [sp, #48]
    9a20:	stp	x23, x24, [sp, #64]
    9a24:	stp	x25, x26, [sp, #80]
    9a28:	stp	x27, x28, [sp, #96]
    9a2c:	mov	x24, x2
    9a30:	mov	x20, x3
    9a34:	mov	x23, x4
    9a38:	mov	x21, x6
    9a3c:	mov	x22, x7
    9a40:	adrp	x25, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    9a44:	ldr	x25, [x25, #3944]
    9a48:	add	x26, x19, #0x70
    9a4c:	add	x27, sp, #0x80
    9a50:	mov	w28, #0x4                   	// #4
    9a54:	b	9ad4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x32c>
    9a58:	mov	w0, #0x0                   	// #0
    9a5c:	b	9b50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3a8>
    9a60:	mov	w0, #0xb                   	// #11
    9a64:	ldp	x21, x22, [sp, #48]
    9a68:	ldp	x23, x24, [sp, #64]
    9a6c:	ldp	x25, x26, [sp, #80]
    9a70:	ldp	x27, x28, [sp, #96]
    9a74:	b	9b50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3a8>
    9a78:	cmp	w0, #0x3
    9a7c:	b.ne	9b3c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x394>  // b.any
    9a80:	ldr	x1, [x19, #104]
    9a84:	ldr	x0, [x19, #96]
    9a88:	cmp	x1, x0
    9a8c:	b.hi	9c60 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4b8>  // b.pmore
    9a90:	stp	xzr, xzr, [sp, #128]
    9a94:	stp	xzr, xzr, [sp, #144]
    9a98:	stp	xzr, xzr, [sp, #160]
    9a9c:	str	x25, [sp, #136]
    9aa0:	str	x26, [sp, #144]
    9aa4:	mov	x2, x27
    9aa8:	ldr	x1, [sp, #112]
    9aac:	mov	x0, x19
    9ab0:	bl	38d8 <lzma_version_string@@XZ_5.0+0x210>
    9ab4:	cbnz	w0, 9d1c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x574>
    9ab8:	ldr	x1, [x19, #88]
    9abc:	ldr	x0, [x19]
    9ac0:	bl	fb20 <lzma_mf_is_supported@@XZ_5.0+0x17d4>
    9ac4:	str	w28, [x19, #72]
    9ac8:	ldr	x0, [x21]
    9acc:	cmp	x0, x22
    9ad0:	b.cs	9d04 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x55c>  // b.hs, b.nlast
    9ad4:	ldr	w0, [x19, #72]
    9ad8:	cmp	w0, #0x4
    9adc:	b.eq	9c78 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x4d0>  // b.none
    9ae0:	ldr	x1, [x20]
    9ae4:	cmp	x1, x23
    9ae8:	b.cs	9cbc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x514>  // b.hs, b.nlast
    9aec:	cmp	w0, #0x2
    9af0:	b.eq	9bec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x444>  // b.none
    9af4:	b.hi	9a78 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2d0>  // b.pmore
    9af8:	cbz	w0, 9b60 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3b8>
    9afc:	cmp	w0, #0x1
    9b00:	b.ne	9a60 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2b8>  // b.any
    9b04:	ldr	x0, [x19, #80]
    9b08:	ldrb	w2, [x24, x1]
    9b0c:	lsl	w3, w0, #3
    9b10:	lsl	x3, x2, x3
    9b14:	ldr	w2, [x19, #112]
    9b18:	orr	w2, w2, w3
    9b1c:	str	w2, [x19, #112]
    9b20:	add	x0, x0, #0x1
    9b24:	str	x0, [x19, #80]
    9b28:	cmp	x0, #0x4
    9b2c:	b.eq	9b8c <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3e4>  // b.none
    9b30:	add	x1, x1, #0x1
    9b34:	str	x1, [x20]
    9b38:	b	9ac8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x320>
    9b3c:	mov	w0, #0xb                   	// #11
    9b40:	ldp	x21, x22, [sp, #48]
    9b44:	ldp	x23, x24, [sp, #64]
    9b48:	ldp	x25, x26, [sp, #80]
    9b4c:	ldp	x27, x28, [sp, #96]
    9b50:	ldp	x19, x20, [sp, #32]
    9b54:	ldp	x29, x30, [sp, #16]
    9b58:	add	sp, sp, #0xb0
    9b5c:	ret
    9b60:	ldrb	w1, [x24, x1]
    9b64:	mov	x0, x26
    9b68:	bl	1745c <lzma_mode_is_supported@@XZ_5.0+0x5ecc>
    9b6c:	and	w0, w0, #0xff
    9b70:	cbnz	w0, 9cd4 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x52c>
    9b74:	mov	w0, #0x1                   	// #1
    9b78:	str	w0, [x19, #72]
    9b7c:	ldr	x0, [x20]
    9b80:	add	x0, x0, #0x1
    9b84:	str	x0, [x20]
    9b88:	b	9ac8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x320>
    9b8c:	cmn	w2, #0x1
    9b90:	cset	w3, ne  // ne = any
    9b94:	ldrb	w0, [x19, #76]
    9b98:	tst	w3, w0
    9b9c:	b.ne	9bb0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x408>  // b.any
    9ba0:	str	xzr, [x19, #80]
    9ba4:	mov	w0, #0x2                   	// #2
    9ba8:	str	w0, [x19, #72]
    9bac:	b	9b30 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x388>
    9bb0:	sub	w0, w2, #0x1
    9bb4:	orr	w0, w0, w0, lsr #2
    9bb8:	orr	w0, w0, w0, lsr #3
    9bbc:	orr	w0, w0, w0, lsr #4
    9bc0:	orr	w0, w0, w0, lsr #8
    9bc4:	orr	w0, w0, w0, lsr #16
    9bc8:	add	w0, w0, #0x1
    9bcc:	cmp	w2, w0
    9bd0:	b.eq	9ba0 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3f8>  // b.none
    9bd4:	mov	w0, #0x7                   	// #7
    9bd8:	ldp	x21, x22, [sp, #48]
    9bdc:	ldp	x23, x24, [sp, #64]
    9be0:	ldp	x25, x26, [sp, #80]
    9be4:	ldp	x27, x28, [sp, #96]
    9be8:	b	9b50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3a8>
    9bec:	ldr	x2, [x19, #80]
    9bf0:	ldrb	w0, [x24, x1]
    9bf4:	lsl	w3, w2, #3
    9bf8:	lsl	x0, x0, x3
    9bfc:	ldr	x3, [x19, #88]
    9c00:	orr	x0, x0, x3
    9c04:	str	x0, [x19, #88]
    9c08:	add	x1, x1, #0x1
    9c0c:	str	x1, [x20]
    9c10:	add	x1, x2, #0x1
    9c14:	str	x1, [x19, #80]
    9c18:	cmp	x1, #0x7
    9c1c:	b.ls	9ac8 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x320>  // b.plast
    9c20:	mov	x1, #0xffffffc000000000    	// #-274877906944
    9c24:	add	x0, x0, x1
    9c28:	mov	x1, #0xffffffbfffffffff    	// #-274877906945
    9c2c:	cmp	x0, x1
    9c30:	cset	w1, cc  // cc = lo, ul, last
    9c34:	ldrb	w0, [x19, #76]
    9c38:	tst	w1, w0
    9c3c:	b.ne	9cec <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x544>  // b.any
    9c40:	mov	x0, x26
    9c44:	bl	174f0 <lzma_mode_is_supported@@XZ_5.0+0x5f60>
    9c48:	add	x0, x0, #0x8, lsl #12
    9c4c:	str	x0, [x19, #104]
    9c50:	str	xzr, [x19, #80]
    9c54:	mov	w0, #0x3                   	// #3
    9c58:	str	w0, [x19, #72]
    9c5c:	b	9a80 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x2d8>
    9c60:	mov	w0, #0x6                   	// #6
    9c64:	ldp	x21, x22, [sp, #48]
    9c68:	ldp	x23, x24, [sp, #64]
    9c6c:	ldp	x25, x26, [sp, #80]
    9c70:	ldp	x27, x28, [sp, #96]
    9c74:	b	9b50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3a8>
    9c78:	ldr	w0, [sp, #176]
    9c7c:	str	w0, [sp]
    9c80:	ldr	x8, [x19, #24]
    9c84:	mov	x7, x22
    9c88:	mov	x6, x21
    9c8c:	ldr	x5, [sp, #120]
    9c90:	mov	x4, x23
    9c94:	mov	x3, x20
    9c98:	mov	x2, x24
    9c9c:	ldr	x1, [sp, #112]
    9ca0:	ldr	x0, [x19]
    9ca4:	blr	x8
    9ca8:	ldp	x21, x22, [sp, #48]
    9cac:	ldp	x23, x24, [sp, #64]
    9cb0:	ldp	x25, x26, [sp, #80]
    9cb4:	ldp	x27, x28, [sp, #96]
    9cb8:	b	9b50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3a8>
    9cbc:	mov	w0, #0x0                   	// #0
    9cc0:	ldp	x21, x22, [sp, #48]
    9cc4:	ldp	x23, x24, [sp, #64]
    9cc8:	ldp	x25, x26, [sp, #80]
    9ccc:	ldp	x27, x28, [sp, #96]
    9cd0:	b	9b50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3a8>
    9cd4:	mov	w0, #0x7                   	// #7
    9cd8:	ldp	x21, x22, [sp, #48]
    9cdc:	ldp	x23, x24, [sp, #64]
    9ce0:	ldp	x25, x26, [sp, #80]
    9ce4:	ldp	x27, x28, [sp, #96]
    9ce8:	b	9b50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3a8>
    9cec:	mov	w0, #0x7                   	// #7
    9cf0:	ldp	x21, x22, [sp, #48]
    9cf4:	ldp	x23, x24, [sp, #64]
    9cf8:	ldp	x25, x26, [sp, #80]
    9cfc:	ldp	x27, x28, [sp, #96]
    9d00:	b	9b50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3a8>
    9d04:	mov	w0, #0x0                   	// #0
    9d08:	ldp	x21, x22, [sp, #48]
    9d0c:	ldp	x23, x24, [sp, #64]
    9d10:	ldp	x25, x26, [sp, #80]
    9d14:	ldp	x27, x28, [sp, #96]
    9d18:	b	9b50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3a8>
    9d1c:	ldp	x21, x22, [sp, #48]
    9d20:	ldp	x23, x24, [sp, #64]
    9d24:	ldp	x25, x26, [sp, #80]
    9d28:	ldp	x27, x28, [sp, #96]
    9d2c:	b	9b50 <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x3a8>

0000000000009d30 <lzma_alone_decoder@@XZ_5.0>:
    9d30:	stp	x29, x30, [sp, #-48]!
    9d34:	mov	x29, sp
    9d38:	stp	x19, x20, [sp, #16]
    9d3c:	str	x21, [sp, #32]
    9d40:	mov	x20, x0
    9d44:	mov	x21, x1
    9d48:	bl	3950 <lzma_version_string@@XZ_5.0+0x288>
    9d4c:	mov	w19, w0
    9d50:	cbz	w0, 9d68 <lzma_alone_decoder@@XZ_5.0+0x38>
    9d54:	mov	w0, w19
    9d58:	ldp	x19, x20, [sp, #16]
    9d5c:	ldr	x21, [sp, #32]
    9d60:	ldp	x29, x30, [sp], #48
    9d64:	ret
    9d68:	mov	w3, #0x0                   	// #0
    9d6c:	mov	x2, x21
    9d70:	ldr	x1, [x20, #48]
    9d74:	ldr	x0, [x20, #56]
    9d78:	bl	98bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x114>
    9d7c:	mov	w19, w0
    9d80:	cbnz	w0, 9d9c <lzma_alone_decoder@@XZ_5.0+0x6c>
    9d84:	ldr	x1, [x20, #56]
    9d88:	mov	w0, #0x1                   	// #1
    9d8c:	strb	w0, [x1, #88]
    9d90:	ldr	x1, [x20, #56]
    9d94:	strb	w0, [x1, #91]
    9d98:	b	9d54 <lzma_alone_decoder@@XZ_5.0+0x24>
    9d9c:	mov	x0, x20
    9da0:	bl	3320 <lzma_end@plt>
    9da4:	b	9d54 <lzma_alone_decoder@@XZ_5.0+0x24>
    9da8:	ldr	x1, [x0, #48]
    9dac:	cbz	x1, 9dc8 <lzma_alone_decoder@@XZ_5.0+0x98>
    9db0:	stp	x29, x30, [sp, #-16]!
    9db4:	mov	x29, sp
    9db8:	ldr	x0, [x0]
    9dbc:	blr	x1
    9dc0:	ldp	x29, x30, [sp], #16
    9dc4:	ret
    9dc8:	mov	w0, #0x0                   	// #0
    9dcc:	ret
    9dd0:	stp	x29, x30, [sp, #-32]!
    9dd4:	mov	x29, sp
    9dd8:	stp	x19, x20, [sp, #16]
    9ddc:	mov	x19, x0
    9de0:	mov	x20, x3
    9de4:	ldr	x4, [x0, #56]
    9de8:	cbz	x4, 9e14 <lzma_alone_decoder@@XZ_5.0+0xe4>
    9dec:	ldr	x0, [x0]
    9df0:	blr	x4
    9df4:	cmp	w0, #0x0
    9df8:	ccmp	x20, #0x0, #0x4, eq  // eq = none
    9dfc:	b.eq	9e08 <lzma_alone_decoder@@XZ_5.0+0xd8>  // b.none
    9e00:	str	x20, [x19, #72]
    9e04:	mov	w0, #0x0                   	// #0
    9e08:	ldp	x19, x20, [sp, #16]
    9e0c:	ldp	x29, x30, [sp], #32
    9e10:	ret
    9e14:	mov	x0, #0x8000                	// #32768
    9e18:	str	x0, [x1]
    9e1c:	ldr	x0, [x19, #72]
    9e20:	str	x0, [x2]
    9e24:	mov	w0, #0x0                   	// #0
    9e28:	cbz	x3, 9e08 <lzma_alone_decoder@@XZ_5.0+0xd8>
    9e2c:	ldr	x1, [x1]
    9e30:	mov	w0, #0x6                   	// #6
    9e34:	cmp	x1, x3
    9e38:	b.ls	9e00 <lzma_alone_decoder@@XZ_5.0+0xd0>  // b.plast
    9e3c:	b	9e08 <lzma_alone_decoder@@XZ_5.0+0xd8>
    9e40:	stp	x29, x30, [sp, #-64]!
    9e44:	mov	x29, sp
    9e48:	stp	x19, x20, [sp, #16]
    9e4c:	stp	x21, x22, [sp, #32]
    9e50:	str	x23, [sp, #48]
    9e54:	mov	x19, x0
    9e58:	mov	x23, x1
    9e5c:	mov	x20, x2
    9e60:	mov	w22, w3
    9e64:	adrp	x21, 9000 <lzma_vli_encode@@XZ_5.0+0x10ac>
    9e68:	add	x21, x21, #0xe40
    9e6c:	ldr	x0, [x0, #16]
    9e70:	cmp	x0, x21
    9e74:	b.ne	9eb8 <lzma_alone_decoder@@XZ_5.0+0x188>  // b.any
    9e78:	str	x21, [x19, #16]
    9e7c:	ands	w21, w22, #0xffffffe0
    9e80:	b.ne	9f34 <lzma_alone_decoder@@XZ_5.0+0x204>  // b.any
    9e84:	ldr	x0, [x19]
    9e88:	cbz	x0, 9ec4 <lzma_alone_decoder@@XZ_5.0+0x194>
    9e8c:	cmp	x20, #0x0
    9e90:	csinc	x20, x20, xzr, ne  // ne = any
    9e94:	str	x20, [x0, #72]
    9e98:	str	w22, [x0, #80]
    9e9c:	str	wzr, [x0, #84]
    9ea0:	mov	w0, w21
    9ea4:	ldp	x19, x20, [sp, #16]
    9ea8:	ldp	x21, x22, [sp, #32]
    9eac:	ldr	x23, [sp, #48]
    9eb0:	ldp	x29, x30, [sp], #64
    9eb4:	ret
    9eb8:	mov	x0, x19
    9ebc:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    9ec0:	b	9e78 <lzma_alone_decoder@@XZ_5.0+0x148>
    9ec4:	mov	x1, x23
    9ec8:	mov	x0, #0x58                  	// #88
    9ecc:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    9ed0:	cbz	x0, 9f3c <lzma_alone_decoder@@XZ_5.0+0x20c>
    9ed4:	str	x0, [x19]
    9ed8:	adrp	x1, 9000 <lzma_vli_encode@@XZ_5.0+0x10ac>
    9edc:	add	x1, x1, #0xf74
    9ee0:	str	x1, [x19, #24]
    9ee4:	adrp	x1, 9000 <lzma_vli_encode@@XZ_5.0+0x10ac>
    9ee8:	add	x1, x1, #0xf44
    9eec:	str	x1, [x19, #32]
    9ef0:	adrp	x1, 9000 <lzma_vli_encode@@XZ_5.0+0x10ac>
    9ef4:	add	x1, x1, #0xda8
    9ef8:	str	x1, [x19, #48]
    9efc:	adrp	x1, 9000 <lzma_vli_encode@@XZ_5.0+0x10ac>
    9f00:	add	x1, x1, #0xdd0
    9f04:	str	x1, [x19, #56]
    9f08:	str	xzr, [x0]
    9f0c:	mov	x1, #0xffffffffffffffff    	// #-1
    9f10:	str	x1, [x0, #8]
    9f14:	str	xzr, [x0, #16]
    9f18:	str	xzr, [x0, #24]
    9f1c:	str	xzr, [x0, #32]
    9f20:	str	xzr, [x0, #40]
    9f24:	str	xzr, [x0, #48]
    9f28:	str	xzr, [x0, #56]
    9f2c:	str	xzr, [x0, #64]
    9f30:	b	9e8c <lzma_alone_decoder@@XZ_5.0+0x15c>
    9f34:	mov	w21, #0x8                   	// #8
    9f38:	b	9ea0 <lzma_alone_decoder@@XZ_5.0+0x170>
    9f3c:	mov	w21, #0x5                   	// #5
    9f40:	b	9ea0 <lzma_alone_decoder@@XZ_5.0+0x170>
    9f44:	stp	x29, x30, [sp, #-32]!
    9f48:	mov	x29, sp
    9f4c:	stp	x19, x20, [sp, #16]
    9f50:	mov	x19, x0
    9f54:	mov	x20, x1
    9f58:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    9f5c:	mov	x1, x20
    9f60:	mov	x0, x19
    9f64:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    9f68:	ldp	x19, x20, [sp, #16]
    9f6c:	ldp	x29, x30, [sp], #32
    9f70:	ret
    9f74:	sub	sp, sp, #0x60
    9f78:	stp	x29, x30, [sp, #16]
    9f7c:	add	x29, sp, #0x10
    9f80:	stp	x19, x20, [sp, #32]
    9f84:	stp	x21, x22, [sp, #48]
    9f88:	stp	x23, x24, [sp, #64]
    9f8c:	stp	x25, x26, [sp, #80]
    9f90:	mov	x19, x0
    9f94:	mov	x23, x1
    9f98:	mov	x22, x2
    9f9c:	mov	x21, x3
    9fa0:	mov	x20, x4
    9fa4:	mov	x24, x5
    9fa8:	mov	x25, x6
    9fac:	mov	x26, x7
    9fb0:	ldr	w0, [x0, #84]
    9fb4:	cmp	w0, #0x1
    9fb8:	b.eq	a034 <lzma_alone_decoder@@XZ_5.0+0x304>  // b.none
    9fbc:	cmp	w0, #0x2
    9fc0:	b.eq	a07c <lzma_alone_decoder@@XZ_5.0+0x34c>  // b.none
    9fc4:	cbz	w0, 9fe8 <lzma_alone_decoder@@XZ_5.0+0x2b8>
    9fc8:	mov	w0, #0xb                   	// #11
    9fcc:	ldp	x19, x20, [sp, #32]
    9fd0:	ldp	x21, x22, [sp, #48]
    9fd4:	ldp	x23, x24, [sp, #64]
    9fd8:	ldp	x25, x26, [sp, #80]
    9fdc:	ldp	x29, x30, [sp, #16]
    9fe0:	add	sp, sp, #0x60
    9fe4:	ret
    9fe8:	ldr	x1, [x3]
    9fec:	cmp	x1, x4
    9ff0:	b.cs	9fcc <lzma_alone_decoder@@XZ_5.0+0x29c>  // b.hs, b.nlast
    9ff4:	mov	w0, #0x1                   	// #1
    9ff8:	str	w0, [x19, #84]
    9ffc:	ldrb	w0, [x2, x1]
    a000:	cmp	w0, #0xfd
    a004:	b.eq	a09c <lzma_alone_decoder@@XZ_5.0+0x36c>  // b.none
    a008:	mov	w3, #0x1                   	// #1
    a00c:	ldr	x2, [x19, #72]
    a010:	mov	x1, x23
    a014:	mov	x0, x19
    a018:	bl	98bc <lzma_stream_encoder_mt_memusage@@XZ_5.2+0x114>
    a01c:	cbnz	w0, 9fcc <lzma_alone_decoder@@XZ_5.0+0x29c>
    a020:	ldr	w1, [x19, #80]
    a024:	mov	w0, #0x2                   	// #2
    a028:	tbnz	w1, #0, 9fcc <lzma_alone_decoder@@XZ_5.0+0x29c>
    a02c:	mov	w0, #0x4                   	// #4
    a030:	tbnz	w1, #2, 9fcc <lzma_alone_decoder@@XZ_5.0+0x29c>
    a034:	ldr	w0, [sp, #96]
    a038:	str	w0, [sp]
    a03c:	ldr	x8, [x19, #24]
    a040:	mov	x7, x26
    a044:	mov	x6, x25
    a048:	mov	x5, x24
    a04c:	mov	x4, x20
    a050:	mov	x3, x21
    a054:	mov	x2, x22
    a058:	mov	x1, x23
    a05c:	ldr	x0, [x19]
    a060:	blr	x8
    a064:	cmp	w0, #0x1
    a068:	b.ne	9fcc <lzma_alone_decoder@@XZ_5.0+0x29c>  // b.any
    a06c:	ldr	w1, [x19, #80]
    a070:	tbz	w1, #3, 9fcc <lzma_alone_decoder@@XZ_5.0+0x29c>
    a074:	mov	w0, #0x2                   	// #2
    a078:	str	w0, [x19, #84]
    a07c:	ldr	x1, [x21]
    a080:	mov	w0, #0x9                   	// #9
    a084:	cmp	x1, x20
    a088:	b.cc	9fcc <lzma_alone_decoder@@XZ_5.0+0x29c>  // b.lo, b.ul, b.last
    a08c:	ldr	w0, [sp, #96]
    a090:	cmp	w0, #0x3
    a094:	cset	w0, eq  // eq = none
    a098:	b	9fcc <lzma_alone_decoder@@XZ_5.0+0x29c>
    a09c:	ldr	w3, [x19, #80]
    a0a0:	ldr	x2, [x19, #72]
    a0a4:	mov	x1, x23
    a0a8:	mov	x0, x19
    a0ac:	bl	be80 <lzma_stream_buffer_decode@@XZ_5.0+0x27c>
    a0b0:	cbz	w0, a034 <lzma_alone_decoder@@XZ_5.0+0x304>
    a0b4:	b	9fcc <lzma_alone_decoder@@XZ_5.0+0x29c>

000000000000a0b8 <lzma_auto_decoder@@XZ_5.0>:
    a0b8:	stp	x29, x30, [sp, #-48]!
    a0bc:	mov	x29, sp
    a0c0:	stp	x19, x20, [sp, #16]
    a0c4:	stp	x21, x22, [sp, #32]
    a0c8:	mov	x20, x0
    a0cc:	mov	x21, x1
    a0d0:	mov	w22, w2
    a0d4:	bl	3950 <lzma_version_string@@XZ_5.0+0x288>
    a0d8:	mov	w19, w0
    a0dc:	cbz	w0, a0f4 <lzma_auto_decoder@@XZ_5.0+0x3c>
    a0e0:	mov	w0, w19
    a0e4:	ldp	x19, x20, [sp, #16]
    a0e8:	ldp	x21, x22, [sp, #32]
    a0ec:	ldp	x29, x30, [sp], #48
    a0f0:	ret
    a0f4:	mov	w3, w22
    a0f8:	mov	x2, x21
    a0fc:	ldr	x1, [x20, #48]
    a100:	ldr	x0, [x20, #56]
    a104:	bl	9e40 <lzma_alone_decoder@@XZ_5.0+0x110>
    a108:	mov	w19, w0
    a10c:	cbnz	w0, a128 <lzma_auto_decoder@@XZ_5.0+0x70>
    a110:	ldr	x1, [x20, #56]
    a114:	mov	w0, #0x1                   	// #1
    a118:	strb	w0, [x1, #88]
    a11c:	ldr	x1, [x20, #56]
    a120:	strb	w0, [x1, #91]
    a124:	b	a0e0 <lzma_auto_decoder@@XZ_5.0+0x28>
    a128:	mov	x0, x20
    a12c:	bl	3320 <lzma_end@plt>
    a130:	b	a0e0 <lzma_auto_decoder@@XZ_5.0+0x28>

000000000000a134 <lzma_block_buffer_decode@@XZ_5.0>:
    a134:	sub	sp, sp, #0xc0
    a138:	stp	x29, x30, [sp, #16]
    a13c:	add	x29, sp, #0x10
    a140:	stp	x21, x22, [sp, #48]
    a144:	cbz	x3, a2b4 <lzma_block_buffer_decode@@XZ_5.0+0x180>
    a148:	stp	x19, x20, [sp, #32]
    a14c:	stp	x23, x24, [sp, #64]
    a150:	stp	x25, x26, [sp, #80]
    a154:	mov	x24, x1
    a158:	mov	x23, x2
    a15c:	mov	x19, x3
    a160:	mov	x21, x4
    a164:	mov	x25, x5
    a168:	mov	x20, x6
    a16c:	mov	x26, x7
    a170:	cbz	x2, a270 <lzma_block_buffer_decode@@XZ_5.0+0x13c>
    a174:	ldr	x1, [x19]
    a178:	cmp	x20, #0x0
    a17c:	mov	w22, #0xb                   	// #11
    a180:	ccmp	x1, x21, #0x2, ne  // ne = any
    a184:	b.hi	a2bc <lzma_block_buffer_decode@@XZ_5.0+0x188>  // b.pmore
    a188:	cbz	x25, a290 <lzma_block_buffer_decode@@XZ_5.0+0x15c>
    a18c:	ldr	x1, [x20]
    a190:	mov	w22, #0xb                   	// #11
    a194:	cmp	x1, x26
    a198:	b.hi	a2cc <lzma_block_buffer_decode@@XZ_5.0+0x198>  // b.pmore
    a19c:	str	xzr, [sp, #120]
    a1a0:	mov	x1, #0xffffffffffffffff    	// #-1
    a1a4:	str	x1, [sp, #128]
    a1a8:	str	xzr, [sp, #136]
    a1ac:	str	xzr, [sp, #144]
    a1b0:	str	xzr, [sp, #152]
    a1b4:	str	xzr, [sp, #160]
    a1b8:	str	xzr, [sp, #168]
    a1bc:	str	xzr, [sp, #176]
    a1c0:	str	xzr, [sp, #184]
    a1c4:	mov	x2, x0
    a1c8:	mov	x1, x24
    a1cc:	add	x0, sp, #0x78
    a1d0:	bl	a2dc <lzma_block_buffer_decode@@XZ_5.0+0x1a8>
    a1d4:	mov	w22, w0
    a1d8:	cbnz	w0, a244 <lzma_block_buffer_decode@@XZ_5.0+0x110>
    a1dc:	stp	x27, x28, [sp, #96]
    a1e0:	ldr	x28, [x19]
    a1e4:	ldr	x27, [x20]
    a1e8:	mov	w0, #0x3                   	// #3
    a1ec:	str	w0, [sp]
    a1f0:	mov	x7, x26
    a1f4:	mov	x6, x20
    a1f8:	mov	x5, x25
    a1fc:	mov	x4, x21
    a200:	mov	x3, x19
    a204:	mov	x2, x23
    a208:	mov	x1, x24
    a20c:	ldr	x0, [sp, #120]
    a210:	ldr	x8, [sp, #144]
    a214:	blr	x8
    a218:	cmp	w0, #0x1
    a21c:	b.eq	a2ac <lzma_block_buffer_decode@@XZ_5.0+0x178>  // b.none
    a220:	cbnz	w0, a234 <lzma_block_buffer_decode@@XZ_5.0+0x100>
    a224:	ldr	x0, [x19]
    a228:	cmp	x0, x21
    a22c:	cset	w0, ne  // ne = any
    a230:	add	w0, w0, #0x9
    a234:	str	x28, [x19]
    a238:	str	x27, [x20]
    a23c:	mov	w22, w0
    a240:	ldp	x27, x28, [sp, #96]
    a244:	mov	x1, x24
    a248:	add	x0, sp, #0x78
    a24c:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    a250:	ldp	x19, x20, [sp, #32]
    a254:	ldp	x23, x24, [sp, #64]
    a258:	ldp	x25, x26, [sp, #80]
    a25c:	mov	w0, w22
    a260:	ldp	x21, x22, [sp, #48]
    a264:	ldp	x29, x30, [sp, #16]
    a268:	add	sp, sp, #0xc0
    a26c:	ret
    a270:	ldr	x1, [x3]
    a274:	mov	w22, #0xb                   	// #11
    a278:	cmp	x1, x4
    a27c:	b.eq	a174 <lzma_block_buffer_decode@@XZ_5.0+0x40>  // b.none
    a280:	ldp	x19, x20, [sp, #32]
    a284:	ldp	x23, x24, [sp, #64]
    a288:	ldp	x25, x26, [sp, #80]
    a28c:	b	a25c <lzma_block_buffer_decode@@XZ_5.0+0x128>
    a290:	ldr	x1, [x20]
    a294:	cmp	x1, x26
    a298:	b.eq	a19c <lzma_block_buffer_decode@@XZ_5.0+0x68>  // b.none
    a29c:	ldp	x19, x20, [sp, #32]
    a2a0:	ldp	x23, x24, [sp, #64]
    a2a4:	ldp	x25, x26, [sp, #80]
    a2a8:	b	a25c <lzma_block_buffer_decode@@XZ_5.0+0x128>
    a2ac:	ldp	x27, x28, [sp, #96]
    a2b0:	b	a244 <lzma_block_buffer_decode@@XZ_5.0+0x110>
    a2b4:	mov	w22, #0xb                   	// #11
    a2b8:	b	a25c <lzma_block_buffer_decode@@XZ_5.0+0x128>
    a2bc:	ldp	x19, x20, [sp, #32]
    a2c0:	ldp	x23, x24, [sp, #64]
    a2c4:	ldp	x25, x26, [sp, #80]
    a2c8:	b	a25c <lzma_block_buffer_decode@@XZ_5.0+0x128>
    a2cc:	ldp	x19, x20, [sp, #32]
    a2d0:	ldp	x23, x24, [sp, #64]
    a2d4:	ldp	x25, x26, [sp, #80]
    a2d8:	b	a25c <lzma_block_buffer_decode@@XZ_5.0+0x128>
    a2dc:	stp	x29, x30, [sp, #-48]!
    a2e0:	mov	x29, sp
    a2e4:	stp	x19, x20, [sp, #16]
    a2e8:	stp	x21, x22, [sp, #32]
    a2ec:	mov	x21, x0
    a2f0:	mov	x22, x1
    a2f4:	mov	x19, x2
    a2f8:	adrp	x20, a000 <lzma_alone_decoder@@XZ_5.0+0x2d0>
    a2fc:	add	x20, x20, #0x2dc
    a300:	ldr	x0, [x0, #16]
    a304:	cmp	x0, x20
    a308:	b.ne	a3b4 <lzma_block_buffer_decode@@XZ_5.0+0x280>  // b.any
    a30c:	str	x20, [x21, #16]
    a310:	mov	x0, x19
    a314:	bl	3190 <lzma_block_unpadded_size@plt>
    a318:	mov	x1, x0
    a31c:	mov	w0, #0xb                   	// #11
    a320:	cbz	x1, a3a4 <lzma_block_buffer_decode@@XZ_5.0+0x270>
    a324:	ldr	x1, [x19, #24]
    a328:	mov	x0, #0x8000000000000000    	// #-9223372036854775808
    a32c:	add	x1, x1, x0
    a330:	mov	w0, #0xb                   	// #11
    a334:	mov	x2, #0x7ffffffffffffffe    	// #9223372036854775806
    a338:	cmp	x1, x2
    a33c:	b.ls	a3a4 <lzma_block_buffer_decode@@XZ_5.0+0x270>  // b.plast
    a340:	ldr	x20, [x21]
    a344:	cbz	x20, a3c0 <lzma_block_buffer_decode@@XZ_5.0+0x28c>
    a348:	str	wzr, [x20]
    a34c:	str	x19, [x20, #80]
    a350:	str	xzr, [x20, #88]
    a354:	str	xzr, [x20, #96]
    a358:	ldr	x0, [x19, #16]
    a35c:	cmn	x0, #0x1
    a360:	b.eq	a41c <lzma_block_buffer_decode@@XZ_5.0+0x2e8>  // b.none
    a364:	str	x0, [x20, #104]
    a368:	str	xzr, [x20, #112]
    a36c:	ldr	w1, [x19, #8]
    a370:	add	x0, x20, #0x78
    a374:	bl	c7b4 <lzma_check_size@@XZ_5.0+0x24>
    a378:	ldr	w1, [x19]
    a37c:	mov	w0, #0x0                   	// #0
    a380:	cbz	w1, a390 <lzma_block_buffer_decode@@XZ_5.0+0x25c>
    a384:	ldrb	w0, [x19, #200]
    a388:	cmp	w0, #0x0
    a38c:	cset	w0, ne  // ne = any
    a390:	strb	w0, [x20, #224]
    a394:	ldr	x2, [x19, #32]
    a398:	mov	x1, x22
    a39c:	add	x0, x20, #0x8
    a3a0:	bl	ac98 <lzma_filter_decoder_is_supported@@XZ_5.0+0x1c>
    a3a4:	ldp	x19, x20, [sp, #16]
    a3a8:	ldp	x21, x22, [sp, #32]
    a3ac:	ldp	x29, x30, [sp], #48
    a3b0:	ret
    a3b4:	mov	x0, x21
    a3b8:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    a3bc:	b	a30c <lzma_block_buffer_decode@@XZ_5.0+0x1d8>
    a3c0:	mov	x1, x22
    a3c4:	mov	x0, #0xe8                  	// #232
    a3c8:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    a3cc:	mov	x20, x0
    a3d0:	cbz	x0, a438 <lzma_block_buffer_decode@@XZ_5.0+0x304>
    a3d4:	str	x0, [x21]
    a3d8:	adrp	x0, a000 <lzma_alone_decoder@@XZ_5.0+0x2d0>
    a3dc:	add	x0, x0, #0x474
    a3e0:	str	x0, [x21, #24]
    a3e4:	adrp	x0, a000 <lzma_alone_decoder@@XZ_5.0+0x2d0>
    a3e8:	add	x0, x0, #0x440
    a3ec:	str	x0, [x21, #32]
    a3f0:	str	xzr, [x20, #8]
    a3f4:	mov	x0, #0xffffffffffffffff    	// #-1
    a3f8:	str	x0, [x20, #16]
    a3fc:	str	xzr, [x20, #24]
    a400:	str	xzr, [x20, #32]
    a404:	str	xzr, [x20, #40]
    a408:	str	xzr, [x20, #48]
    a40c:	str	xzr, [x20, #56]
    a410:	str	xzr, [x20, #64]
    a414:	str	xzr, [x20, #72]
    a418:	b	a348 <lzma_block_buffer_decode@@XZ_5.0+0x214>
    a41c:	ldr	w0, [x19, #8]
    a420:	bl	3270 <lzma_check_size@plt>
    a424:	ldr	w2, [x19, #4]
    a428:	mov	x1, #0x7ffffffffffffffc    	// #9223372036854775804
    a42c:	sub	x1, x1, x2
    a430:	sub	x0, x1, w0, uxtw
    a434:	b	a364 <lzma_block_buffer_decode@@XZ_5.0+0x230>
    a438:	mov	w0, #0x5                   	// #5
    a43c:	b	a3a4 <lzma_block_buffer_decode@@XZ_5.0+0x270>
    a440:	stp	x29, x30, [sp, #-32]!
    a444:	mov	x29, sp
    a448:	stp	x19, x20, [sp, #16]
    a44c:	mov	x19, x0
    a450:	mov	x20, x1
    a454:	add	x0, x0, #0x8
    a458:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    a45c:	mov	x1, x20
    a460:	mov	x0, x19
    a464:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    a468:	ldp	x19, x20, [sp, #16]
    a46c:	ldp	x29, x30, [sp], #32
    a470:	ret
    a474:	sub	sp, sp, #0x70
    a478:	stp	x29, x30, [sp, #16]
    a47c:	add	x29, sp, #0x10
    a480:	stp	x19, x20, [sp, #32]
    a484:	stp	x21, x22, [sp, #48]
    a488:	stp	x23, x24, [sp, #64]
    a48c:	mov	x19, x0
    a490:	mov	x22, x2
    a494:	mov	x20, x3
    a498:	mov	x21, x4
    a49c:	ldr	w0, [x0]
    a4a0:	cmp	w0, #0x1
    a4a4:	b.eq	a5dc <lzma_block_buffer_decode@@XZ_5.0+0x4a8>  // b.none
    a4a8:	stp	x25, x26, [sp, #80]
    a4ac:	mov	x25, x5
    a4b0:	mov	x24, x6
    a4b4:	cmp	w0, #0x2
    a4b8:	b.eq	a658 <lzma_block_buffer_decode@@XZ_5.0+0x524>  // b.none
    a4bc:	mov	w23, #0xb                   	// #11
    a4c0:	cbz	w0, a4e4 <lzma_block_buffer_decode@@XZ_5.0+0x3b0>
    a4c4:	ldp	x25, x26, [sp, #80]
    a4c8:	mov	w0, w23
    a4cc:	ldp	x19, x20, [sp, #32]
    a4d0:	ldp	x21, x22, [sp, #48]
    a4d4:	ldp	x23, x24, [sp, #64]
    a4d8:	ldp	x29, x30, [sp, #16]
    a4dc:	add	sp, sp, #0x70
    a4e0:	ret
    a4e4:	str	x27, [sp, #96]
    a4e8:	ldr	x26, [x3]
    a4ec:	ldr	x27, [x6]
    a4f0:	ldr	w0, [sp, #112]
    a4f4:	str	w0, [sp]
    a4f8:	ldr	x8, [x19, #32]
    a4fc:	ldr	x0, [x19, #8]
    a500:	blr	x8
    a504:	mov	w23, w0
    a508:	ldr	x0, [x19, #104]
    a50c:	cmp	x0, #0x0
    a510:	mov	x1, #0x7fffffffffffffff    	// #9223372036854775807
    a514:	csel	x0, x0, x1, ge  // ge = tcont
    a518:	ldr	x2, [x19, #88]
    a51c:	cmp	x2, x0
    a520:	b.hi	a6d8 <lzma_block_buffer_decode@@XZ_5.0+0x5a4>  // b.pmore
    a524:	ldr	x1, [x20]
    a528:	sub	x26, x1, x26
    a52c:	sub	x0, x0, x2
    a530:	cmp	x26, x0
    a534:	b.hi	a6e8 <lzma_block_buffer_decode@@XZ_5.0+0x5b4>  // b.pmore
    a538:	ldr	x3, [x24]
    a53c:	add	x26, x26, x2
    a540:	str	x26, [x19, #88]
    a544:	ldr	x4, [x19, #80]
    a548:	ldr	x0, [x4, #24]
    a54c:	cmp	x0, #0x0
    a550:	mov	x1, #0x7fffffffffffffff    	// #9223372036854775807
    a554:	csel	x0, x0, x1, ge  // ge = tcont
    a558:	ldr	x1, [x19, #96]
    a55c:	cmp	x1, x0
    a560:	b.hi	a6f8 <lzma_block_buffer_decode@@XZ_5.0+0x5c4>  // b.pmore
    a564:	sub	x3, x3, x27
    a568:	sub	x0, x0, x1
    a56c:	cmp	x3, x0
    a570:	b.hi	a708 <lzma_block_buffer_decode@@XZ_5.0+0x5d4>  // b.pmore
    a574:	add	x1, x3, x1
    a578:	str	x1, [x19, #96]
    a57c:	ldrb	w0, [x19, #224]
    a580:	cbz	w0, a614 <lzma_block_buffer_decode@@XZ_5.0+0x4e0>
    a584:	cmp	w23, #0x1
    a588:	b.ne	a720 <lzma_block_buffer_decode@@XZ_5.0+0x5ec>  // b.any
    a58c:	ldr	x2, [x19, #88]
    a590:	ldr	x0, [x19, #80]
    a594:	ldr	x1, [x0, #16]
    a598:	cmp	x2, x1
    a59c:	mov	w23, #0x9                   	// #9
    a5a0:	ccmn	x1, #0x1, #0x4, ne  // ne = any
    a5a4:	b.ne	a72c <lzma_block_buffer_decode@@XZ_5.0+0x5f8>  // b.any
    a5a8:	ldr	x1, [x0, #24]
    a5ac:	ldr	x3, [x19, #96]
    a5b0:	cmp	x3, x1
    a5b4:	ccmn	x1, #0x1, #0x4, ne  // ne = any
    a5b8:	b.ne	a738 <lzma_block_buffer_decode@@XZ_5.0+0x604>  // b.any
    a5bc:	str	x2, [x0, #16]
    a5c0:	ldr	x0, [x19, #80]
    a5c4:	ldr	x1, [x19, #96]
    a5c8:	str	x1, [x0, #24]
    a5cc:	mov	w0, #0x1                   	// #1
    a5d0:	str	w0, [x19]
    a5d4:	ldp	x25, x26, [sp, #80]
    a5d8:	ldr	x27, [sp, #96]
    a5dc:	ldr	x1, [x19, #88]
    a5e0:	tst	x1, #0x3
    a5e4:	b.eq	a628 <lzma_block_buffer_decode@@XZ_5.0+0x4f4>  // b.none
    a5e8:	ldr	x0, [x20]
    a5ec:	cmp	x0, x21
    a5f0:	b.cs	a718 <lzma_block_buffer_decode@@XZ_5.0+0x5e4>  // b.hs, b.nlast
    a5f4:	add	x1, x1, #0x1
    a5f8:	str	x1, [x19, #88]
    a5fc:	add	x1, x0, #0x1
    a600:	str	x1, [x20]
    a604:	ldrb	w0, [x22, x0]
    a608:	cbz	w0, a5dc <lzma_block_buffer_decode@@XZ_5.0+0x4a8>
    a60c:	mov	w23, #0x9                   	// #9
    a610:	b	a4c8 <lzma_block_buffer_decode@@XZ_5.0+0x394>
    a614:	add	x2, x25, x27
    a618:	ldr	w1, [x4, #8]
    a61c:	add	x0, x19, #0x78
    a620:	bl	c7f4 <lzma_check_size@@XZ_5.0+0x64>
    a624:	b	a584 <lzma_block_buffer_decode@@XZ_5.0+0x450>
    a628:	ldr	x0, [x19, #80]
    a62c:	ldr	w1, [x0, #8]
    a630:	mov	w23, #0x1                   	// #1
    a634:	cbz	w1, a4c8 <lzma_block_buffer_decode@@XZ_5.0+0x394>
    a638:	ldrb	w0, [x19, #224]
    a63c:	cbz	w0, a64c <lzma_block_buffer_decode@@XZ_5.0+0x518>
    a640:	mov	w0, #0x2                   	// #2
    a644:	str	w0, [x19]
    a648:	b	a65c <lzma_block_buffer_decode@@XZ_5.0+0x528>
    a64c:	add	x0, x19, #0x78
    a650:	bl	c860 <lzma_check_size@@XZ_5.0+0xd0>
    a654:	b	a640 <lzma_block_buffer_decode@@XZ_5.0+0x50c>
    a658:	ldp	x25, x26, [sp, #80]
    a65c:	ldr	x23, [x19, #80]
    a660:	ldr	w0, [x23, #8]
    a664:	bl	3270 <lzma_check_size@plt>
    a668:	mov	w24, w0
    a66c:	mov	x5, x24
    a670:	add	x4, x19, #0x70
    a674:	add	x3, x23, #0x28
    a678:	mov	x2, x21
    a67c:	mov	x1, x20
    a680:	mov	x0, x22
    a684:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
    a688:	ldr	x0, [x19, #112]
    a68c:	mov	w23, #0x0                   	// #0
    a690:	cmp	x0, x24
    a694:	b.cc	a4c8 <lzma_block_buffer_decode@@XZ_5.0+0x394>  // b.lo, b.ul, b.last
    a698:	ldrb	w0, [x19, #224]
    a69c:	mov	w23, #0x1                   	// #1
    a6a0:	cbnz	w0, a4c8 <lzma_block_buffer_decode@@XZ_5.0+0x394>
    a6a4:	ldr	x20, [x19, #80]
    a6a8:	ldr	w0, [x20, #8]
    a6ac:	bl	30e0 <lzma_check_is_supported@plt>
    a6b0:	and	w0, w0, #0xff
    a6b4:	cbz	w0, a4c8 <lzma_block_buffer_decode@@XZ_5.0+0x394>
    a6b8:	mov	x2, x24
    a6bc:	add	x1, x19, #0x78
    a6c0:	add	x0, x20, #0x28
    a6c4:	bl	3330 <memcmp@plt>
    a6c8:	cmp	w0, #0x0
    a6cc:	mov	w23, #0x9                   	// #9
    a6d0:	csinc	w23, w23, wzr, ne  // ne = any
    a6d4:	b	a4c8 <lzma_block_buffer_decode@@XZ_5.0+0x394>
    a6d8:	mov	w23, #0x9                   	// #9
    a6dc:	ldp	x25, x26, [sp, #80]
    a6e0:	ldr	x27, [sp, #96]
    a6e4:	b	a4c8 <lzma_block_buffer_decode@@XZ_5.0+0x394>
    a6e8:	mov	w23, #0x9                   	// #9
    a6ec:	ldp	x25, x26, [sp, #80]
    a6f0:	ldr	x27, [sp, #96]
    a6f4:	b	a4c8 <lzma_block_buffer_decode@@XZ_5.0+0x394>
    a6f8:	mov	w23, #0x9                   	// #9
    a6fc:	ldp	x25, x26, [sp, #80]
    a700:	ldr	x27, [sp, #96]
    a704:	b	a4c8 <lzma_block_buffer_decode@@XZ_5.0+0x394>
    a708:	mov	w23, #0x9                   	// #9
    a70c:	ldp	x25, x26, [sp, #80]
    a710:	ldr	x27, [sp, #96]
    a714:	b	a4c8 <lzma_block_buffer_decode@@XZ_5.0+0x394>
    a718:	mov	w23, #0x0                   	// #0
    a71c:	b	a4c8 <lzma_block_buffer_decode@@XZ_5.0+0x394>
    a720:	ldp	x25, x26, [sp, #80]
    a724:	ldr	x27, [sp, #96]
    a728:	b	a4c8 <lzma_block_buffer_decode@@XZ_5.0+0x394>
    a72c:	ldp	x25, x26, [sp, #80]
    a730:	ldr	x27, [sp, #96]
    a734:	b	a4c8 <lzma_block_buffer_decode@@XZ_5.0+0x394>
    a738:	ldp	x25, x26, [sp, #80]
    a73c:	ldr	x27, [sp, #96]
    a740:	b	a4c8 <lzma_block_buffer_decode@@XZ_5.0+0x394>

000000000000a744 <lzma_block_decoder@@XZ_5.0>:
    a744:	stp	x29, x30, [sp, #-48]!
    a748:	mov	x29, sp
    a74c:	stp	x19, x20, [sp, #16]
    a750:	str	x21, [sp, #32]
    a754:	mov	x20, x0
    a758:	mov	x21, x1
    a75c:	bl	3950 <lzma_version_string@@XZ_5.0+0x288>
    a760:	mov	w19, w0
    a764:	cbz	w0, a77c <lzma_block_decoder@@XZ_5.0+0x38>
    a768:	mov	w0, w19
    a76c:	ldp	x19, x20, [sp, #16]
    a770:	ldr	x21, [sp, #32]
    a774:	ldp	x29, x30, [sp], #48
    a778:	ret
    a77c:	mov	x2, x21
    a780:	ldr	x1, [x20, #48]
    a784:	ldr	x0, [x20, #56]
    a788:	bl	a2dc <lzma_block_buffer_decode@@XZ_5.0+0x1a8>
    a78c:	mov	w19, w0
    a790:	cbnz	w0, a7ac <lzma_block_decoder@@XZ_5.0+0x68>
    a794:	ldr	x1, [x20, #56]
    a798:	mov	w0, #0x1                   	// #1
    a79c:	strb	w0, [x1, #88]
    a7a0:	ldr	x1, [x20, #56]
    a7a4:	strb	w0, [x1, #91]
    a7a8:	b	a768 <lzma_block_decoder@@XZ_5.0+0x24>
    a7ac:	mov	x0, x20
    a7b0:	bl	3320 <lzma_end@plt>
    a7b4:	b	a768 <lzma_block_decoder@@XZ_5.0+0x24>
    a7b8:	stp	x29, x30, [sp, #-48]!
    a7bc:	mov	x29, sp
    a7c0:	stp	x19, x20, [sp, #16]
    a7c4:	stp	x21, x22, [sp, #32]
    a7c8:	mov	x20, x0
    a7cc:	mov	x21, x1
    a7d0:	mov	x19, #0x0                   	// #0
    a7d4:	mov	x22, #0xffffffffffffffff    	// #-1
    a7d8:	ldr	x2, [x20, #32]
    a7dc:	add	x2, x2, x19
    a7e0:	mov	x1, x21
    a7e4:	ldr	x0, [x2, #8]
    a7e8:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    a7ec:	ldr	x0, [x20, #32]
    a7f0:	str	x22, [x0, x19]
    a7f4:	ldr	x2, [x20, #32]
    a7f8:	add	x2, x2, x19
    a7fc:	str	xzr, [x2, #8]
    a800:	add	x19, x19, #0x10
    a804:	cmp	x19, #0x40
    a808:	b.ne	a7d8 <lzma_block_decoder@@XZ_5.0+0x94>  // b.any
    a80c:	ldp	x19, x20, [sp, #16]
    a810:	ldp	x21, x22, [sp, #32]
    a814:	ldp	x29, x30, [sp], #48
    a818:	ret

000000000000a81c <lzma_block_header_decode@@XZ_5.0>:
    a81c:	stp	x29, x30, [sp, #-96]!
    a820:	mov	x29, sp
    a824:	stp	x19, x20, [sp, #16]
    a828:	stp	x21, x22, [sp, #32]
    a82c:	stp	x23, x24, [sp, #48]
    a830:	mov	x19, x0
    a834:	mov	x23, x1
    a838:	mov	x21, x2
    a83c:	mov	x3, #0x0                   	// #0
    a840:	mov	x1, #0xffffffffffffffff    	// #-1
    a844:	ldr	x0, [x19, #32]
    a848:	str	x1, [x0, x3]
    a84c:	ldr	x4, [x19, #32]
    a850:	add	x4, x4, x3
    a854:	str	xzr, [x4, #8]
    a858:	add	x3, x3, #0x10
    a85c:	cmp	x3, #0x50
    a860:	b.ne	a844 <lzma_block_header_decode@@XZ_5.0+0x28>  // b.any
    a864:	ldr	w0, [x19]
    a868:	cmp	w0, #0x1
    a86c:	b.ls	a878 <lzma_block_header_decode@@XZ_5.0+0x5c>  // b.plast
    a870:	mov	w0, #0x1                   	// #1
    a874:	str	w0, [x19]
    a878:	strb	wzr, [x19, #200]
    a87c:	ldr	w0, [x19, #4]
    a880:	ldrb	w1, [x21]
    a884:	add	w1, w1, #0x1
    a888:	mov	w20, #0xb                   	// #11
    a88c:	cmp	w0, w1, lsl #2
    a890:	b.ne	aa0c <lzma_block_header_decode@@XZ_5.0+0x1f0>  // b.any
    a894:	ldr	w1, [x19, #8]
    a898:	cmp	w1, #0xf
    a89c:	b.hi	aa0c <lzma_block_header_decode@@XZ_5.0+0x1f0>  // b.pmore
    a8a0:	sub	w20, w0, #0x4
    a8a4:	mov	w24, w20
    a8a8:	mov	w2, #0x0                   	// #0
    a8ac:	mov	x1, x24
    a8b0:	mov	x0, x21
    a8b4:	bl	31c0 <lzma_crc32@plt>
    a8b8:	add	x3, x21, x24
    a8bc:	ldrb	w1, [x3, #3]
    a8c0:	ldrb	w2, [x21, w20, uxtw]
    a8c4:	orr	w2, w2, w1, lsl #24
    a8c8:	ldrb	w1, [x3, #1]
    a8cc:	ldrb	w3, [x3, #2]
    a8d0:	lsl	w3, w3, #16
    a8d4:	orr	w1, w3, w1, lsl #8
    a8d8:	orr	w1, w1, w2
    a8dc:	mov	w20, #0x9                   	// #9
    a8e0:	cmp	w0, w1
    a8e4:	b.ne	aa0c <lzma_block_header_decode@@XZ_5.0+0x1f0>  // b.any
    a8e8:	ldrb	w0, [x21, #1]
    a8ec:	mov	w20, #0x8                   	// #8
    a8f0:	tst	w0, #0x3c
    a8f4:	b.ne	aa0c <lzma_block_header_decode@@XZ_5.0+0x1f0>  // b.any
    a8f8:	mov	x1, #0x2                   	// #2
    a8fc:	str	x1, [sp, #88]
    a900:	tbnz	w0, #6, a934 <lzma_block_header_decode@@XZ_5.0+0x118>
    a904:	mov	x0, #0xffffffffffffffff    	// #-1
    a908:	str	x0, [x19, #16]
    a90c:	ldrsb	w0, [x21, #1]
    a910:	tbnz	w0, #31, a968 <lzma_block_header_decode@@XZ_5.0+0x14c>
    a914:	stp	x25, x26, [sp, #64]
    a918:	mov	x0, #0xffffffffffffffff    	// #-1
    a91c:	str	x0, [x19, #24]
    a920:	ldrb	w25, [x21, #1]
    a924:	and	x25, x25, #0x3
    a928:	mov	x22, #0x0                   	// #0
    a92c:	add	x26, sp, #0x58
    a930:	b	a994 <lzma_block_header_decode@@XZ_5.0+0x178>
    a934:	mov	x4, x24
    a938:	add	x3, sp, #0x58
    a93c:	mov	x2, x21
    a940:	mov	x1, #0x0                   	// #0
    a944:	add	x0, x19, #0x10
    a948:	bl	33c0 <lzma_vli_decode@plt>
    a94c:	mov	w20, w0
    a950:	cbnz	w0, aa0c <lzma_block_header_decode@@XZ_5.0+0x1f0>
    a954:	mov	x0, x19
    a958:	bl	3190 <lzma_block_unpadded_size@plt>
    a95c:	mov	w20, #0x9                   	// #9
    a960:	cbnz	x0, a90c <lzma_block_header_decode@@XZ_5.0+0xf0>
    a964:	b	aa0c <lzma_block_header_decode@@XZ_5.0+0x1f0>
    a968:	mov	x4, x24
    a96c:	add	x3, sp, #0x58
    a970:	mov	x2, x21
    a974:	mov	x1, #0x0                   	// #0
    a978:	add	x0, x19, #0x18
    a97c:	bl	33c0 <lzma_vli_decode@plt>
    a980:	mov	w20, w0
    a984:	cbnz	w0, aa0c <lzma_block_header_decode@@XZ_5.0+0x1f0>
    a988:	stp	x25, x26, [sp, #64]
    a98c:	b	a920 <lzma_block_header_decode@@XZ_5.0+0x104>
    a990:	mov	x22, x0
    a994:	ldr	x0, [x19, #32]
    a998:	mov	x4, x24
    a99c:	mov	x3, x26
    a9a0:	mov	x2, x21
    a9a4:	mov	x1, x23
    a9a8:	add	x0, x0, x22, lsl #4
    a9ac:	bl	3500 <lzma_filter_flags_decode@plt>
    a9b0:	mov	w20, w0
    a9b4:	cbnz	w0, a9fc <lzma_block_header_decode@@XZ_5.0+0x1e0>
    a9b8:	add	x0, x22, #0x1
    a9bc:	cmp	x25, x22
    a9c0:	b.ne	a990 <lzma_block_header_decode@@XZ_5.0+0x174>  // b.any
    a9c4:	ldr	x0, [sp, #88]
    a9c8:	sub	x21, x21, #0x1
    a9cc:	cmp	x0, x24
    a9d0:	b.cs	aa24 <lzma_block_header_decode@@XZ_5.0+0x208>  // b.hs, b.nlast
    a9d4:	add	x0, x0, #0x1
    a9d8:	ldrb	w1, [x21, x0]
    a9dc:	cbz	w1, a9cc <lzma_block_header_decode@@XZ_5.0+0x1b0>
    a9e0:	str	x0, [sp, #88]
    a9e4:	mov	x1, x23
    a9e8:	mov	x0, x19
    a9ec:	bl	a7b8 <lzma_block_decoder@@XZ_5.0+0x74>
    a9f0:	mov	w20, #0x8                   	// #8
    a9f4:	ldp	x25, x26, [sp, #64]
    a9f8:	b	aa0c <lzma_block_header_decode@@XZ_5.0+0x1f0>
    a9fc:	mov	x1, x23
    aa00:	mov	x0, x19
    aa04:	bl	a7b8 <lzma_block_decoder@@XZ_5.0+0x74>
    aa08:	ldp	x25, x26, [sp, #64]
    aa0c:	mov	w0, w20
    aa10:	ldp	x19, x20, [sp, #16]
    aa14:	ldp	x21, x22, [sp, #32]
    aa18:	ldp	x23, x24, [sp, #48]
    aa1c:	ldp	x29, x30, [sp], #96
    aa20:	ret
    aa24:	ldp	x25, x26, [sp, #64]
    aa28:	b	aa0c <lzma_block_header_decode@@XZ_5.0+0x1f0>

000000000000aa2c <lzma_easy_decoder_memusage@@XZ_5.0>:
    aa2c:	stp	x29, x30, [sp, #-208]!
    aa30:	mov	x29, sp
    aa34:	mov	w1, w0
    aa38:	add	x0, sp, #0x10
    aa3c:	bl	3ff8 <lzma_block_total_size@@XZ_5.0+0x24>
    aa40:	and	w0, w0, #0xff
    aa44:	cbnz	w0, aa58 <lzma_easy_decoder_memusage@@XZ_5.0+0x2c>
    aa48:	add	x0, sp, #0x10
    aa4c:	bl	32e0 <lzma_raw_decoder_memusage@plt>
    aa50:	ldp	x29, x30, [sp], #208
    aa54:	ret
    aa58:	mov	x0, #0xffffffff            	// #4294967295
    aa5c:	b	aa50 <lzma_easy_decoder_memusage@@XZ_5.0+0x24>

000000000000aa60 <lzma_raw_buffer_decode@@XZ_5.0>:
    aa60:	sub	sp, sp, #0xd0
    aa64:	stp	x29, x30, [sp, #16]
    aa68:	add	x29, sp, #0x10
    aa6c:	stp	x21, x22, [sp, #48]
    aa70:	cmp	x2, #0x0
    aa74:	ccmp	x3, #0x0, #0x4, ne  // ne = any
    aa78:	mov	w21, #0xb                   	// #11
    aa7c:	b.eq	ab90 <lzma_raw_buffer_decode@@XZ_5.0+0x130>  // b.none
    aa80:	stp	x19, x20, [sp, #32]
    aa84:	stp	x23, x24, [sp, #64]
    aa88:	stp	x25, x26, [sp, #80]
    aa8c:	mov	x25, x1
    aa90:	mov	x22, x2
    aa94:	mov	x19, x3
    aa98:	mov	x23, x4
    aa9c:	mov	x24, x5
    aaa0:	mov	x20, x6
    aaa4:	mov	x26, x7
    aaa8:	ldr	x1, [x3]
    aaac:	mov	w21, #0xb                   	// #11
    aab0:	cmp	x1, x4
    aab4:	b.hi	abfc <lzma_raw_buffer_decode@@XZ_5.0+0x19c>  // b.pmore
    aab8:	cmp	x5, #0x0
    aabc:	ccmp	x6, #0x0, #0x4, ne  // ne = any
    aac0:	b.eq	ac0c <lzma_raw_buffer_decode@@XZ_5.0+0x1ac>  // b.none
    aac4:	ldr	x1, [x6]
    aac8:	cmp	x1, x7
    aacc:	b.hi	ac1c <lzma_raw_buffer_decode@@XZ_5.0+0x1bc>  // b.pmore
    aad0:	str	xzr, [sp, #136]
    aad4:	mov	x1, #0xffffffffffffffff    	// #-1
    aad8:	str	x1, [sp, #144]
    aadc:	str	xzr, [sp, #152]
    aae0:	str	xzr, [sp, #160]
    aae4:	str	xzr, [sp, #168]
    aae8:	str	xzr, [sp, #176]
    aaec:	str	xzr, [sp, #184]
    aaf0:	str	xzr, [sp, #192]
    aaf4:	str	xzr, [sp, #200]
    aaf8:	mov	x2, x0
    aafc:	mov	x1, x25
    ab00:	add	x0, sp, #0x88
    ab04:	bl	ac98 <lzma_filter_decoder_is_supported@@XZ_5.0+0x1c>
    ab08:	mov	w21, w0
    ab0c:	cbnz	w0, ac2c <lzma_raw_buffer_decode@@XZ_5.0+0x1cc>
    ab10:	stp	x27, x28, [sp, #96]
    ab14:	ldr	x28, [x19]
    ab18:	ldr	x27, [x20]
    ab1c:	mov	w0, #0x3                   	// #3
    ab20:	str	w0, [sp]
    ab24:	mov	x7, x26
    ab28:	mov	x6, x20
    ab2c:	mov	x5, x24
    ab30:	mov	x4, x23
    ab34:	mov	x3, x19
    ab38:	mov	x2, x22
    ab3c:	mov	x1, x25
    ab40:	ldr	x0, [sp, #136]
    ab44:	ldr	x8, [sp, #160]
    ab48:	blr	x8
    ab4c:	cmp	w0, #0x1
    ab50:	b.eq	ab74 <lzma_raw_buffer_decode@@XZ_5.0+0x114>  // b.none
    ab54:	mov	w21, w0
    ab58:	cbnz	w0, ab6c <lzma_raw_buffer_decode@@XZ_5.0+0x10c>
    ab5c:	ldr	x0, [x19]
    ab60:	mov	w21, #0xa                   	// #10
    ab64:	cmp	x0, x23
    ab68:	b.eq	aba4 <lzma_raw_buffer_decode@@XZ_5.0+0x144>  // b.none
    ab6c:	str	x28, [x19]
    ab70:	str	x27, [x20]
    ab74:	mov	x1, x25
    ab78:	add	x0, sp, #0x88
    ab7c:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    ab80:	ldp	x19, x20, [sp, #32]
    ab84:	ldp	x23, x24, [sp, #64]
    ab88:	ldp	x25, x26, [sp, #80]
    ab8c:	ldp	x27, x28, [sp, #96]
    ab90:	mov	w0, w21
    ab94:	ldp	x21, x22, [sp, #48]
    ab98:	ldp	x29, x30, [sp, #16]
    ab9c:	add	sp, sp, #0xd0
    aba0:	ret
    aba4:	ldr	x0, [x20]
    aba8:	mov	w21, #0x9                   	// #9
    abac:	cmp	x0, x26
    abb0:	b.ne	ab6c <lzma_raw_buffer_decode@@XZ_5.0+0x10c>  // b.any
    abb4:	str	xzr, [sp, #128]
    abb8:	mov	w0, #0x3                   	// #3
    abbc:	str	w0, [sp]
    abc0:	mov	x7, #0x1                   	// #1
    abc4:	add	x6, sp, #0x80
    abc8:	add	x5, sp, #0x78
    abcc:	mov	x4, x23
    abd0:	mov	x3, x19
    abd4:	mov	x2, x22
    abd8:	mov	x1, x25
    abdc:	ldr	x0, [sp, #136]
    abe0:	ldr	x8, [sp, #160]
    abe4:	blr	x8
    abe8:	ldr	x0, [sp, #128]
    abec:	cmp	x0, #0x1
    abf0:	cset	w21, eq  // eq = none
    abf4:	add	w21, w21, #0x9
    abf8:	b	ab6c <lzma_raw_buffer_decode@@XZ_5.0+0x10c>
    abfc:	ldp	x19, x20, [sp, #32]
    ac00:	ldp	x23, x24, [sp, #64]
    ac04:	ldp	x25, x26, [sp, #80]
    ac08:	b	ab90 <lzma_raw_buffer_decode@@XZ_5.0+0x130>
    ac0c:	ldp	x19, x20, [sp, #32]
    ac10:	ldp	x23, x24, [sp, #64]
    ac14:	ldp	x25, x26, [sp, #80]
    ac18:	b	ab90 <lzma_raw_buffer_decode@@XZ_5.0+0x130>
    ac1c:	ldp	x19, x20, [sp, #32]
    ac20:	ldp	x23, x24, [sp, #64]
    ac24:	ldp	x25, x26, [sp, #80]
    ac28:	b	ab90 <lzma_raw_buffer_decode@@XZ_5.0+0x130>
    ac2c:	ldp	x19, x20, [sp, #32]
    ac30:	ldp	x23, x24, [sp, #64]
    ac34:	ldp	x25, x26, [sp, #80]
    ac38:	b	ab90 <lzma_raw_buffer_decode@@XZ_5.0+0x130>
    ac3c:	mov	x1, #0x0                   	// #0
    ac40:	adrp	x4, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    ac44:	add	x4, x4, #0xbf8
    ac48:	lsl	x2, x1, #5
    ac4c:	ldr	x3, [x2, x4]
    ac50:	cmp	x3, x0
    ac54:	b.eq	ac6c <lzma_raw_buffer_decode@@XZ_5.0+0x20c>  // b.none
    ac58:	add	x1, x1, #0x1
    ac5c:	cmp	x1, #0x9
    ac60:	b.ne	ac48 <lzma_raw_buffer_decode@@XZ_5.0+0x1e8>  // b.any
    ac64:	mov	x0, #0x0                   	// #0
    ac68:	ret
    ac6c:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    ac70:	add	x0, x0, #0xbf8
    ac74:	add	x0, x0, x2
    ac78:	b	ac68 <lzma_raw_buffer_decode@@XZ_5.0+0x208>

000000000000ac7c <lzma_filter_decoder_is_supported@@XZ_5.0>:
    ac7c:	stp	x29, x30, [sp, #-16]!
    ac80:	mov	x29, sp
    ac84:	bl	ac3c <lzma_raw_buffer_decode@@XZ_5.0+0x1dc>
    ac88:	cmp	x0, #0x0
    ac8c:	cset	w0, ne  // ne = any
    ac90:	ldp	x29, x30, [sp], #16
    ac94:	ret
    ac98:	stp	x29, x30, [sp, #-16]!
    ac9c:	mov	x29, sp
    aca0:	mov	w4, #0x0                   	// #0
    aca4:	adrp	x3, a000 <lzma_alone_decoder@@XZ_5.0+0x2d0>
    aca8:	add	x3, x3, #0xc3c
    acac:	bl	42d4 <lzma_filters_copy@@XZ_5.0+0x19c>
    acb0:	ldp	x29, x30, [sp], #16
    acb4:	ret

000000000000acb8 <lzma_raw_decoder@@XZ_5.0>:
    acb8:	stp	x29, x30, [sp, #-48]!
    acbc:	mov	x29, sp
    acc0:	stp	x19, x20, [sp, #16]
    acc4:	str	x21, [sp, #32]
    acc8:	mov	x20, x0
    accc:	mov	x21, x1
    acd0:	bl	3950 <lzma_version_string@@XZ_5.0+0x288>
    acd4:	mov	w19, w0
    acd8:	cbz	w0, acf0 <lzma_raw_decoder@@XZ_5.0+0x38>
    acdc:	mov	w0, w19
    ace0:	ldp	x19, x20, [sp, #16]
    ace4:	ldr	x21, [sp, #32]
    ace8:	ldp	x29, x30, [sp], #48
    acec:	ret
    acf0:	mov	x2, x21
    acf4:	ldr	x1, [x20, #48]
    acf8:	ldr	x0, [x20, #56]
    acfc:	bl	ac98 <lzma_filter_decoder_is_supported@@XZ_5.0+0x1c>
    ad00:	mov	w19, w0
    ad04:	cbnz	w0, ad20 <lzma_raw_decoder@@XZ_5.0+0x68>
    ad08:	ldr	x1, [x20, #56]
    ad0c:	mov	w0, #0x1                   	// #1
    ad10:	strb	w0, [x1, #88]
    ad14:	ldr	x1, [x20, #56]
    ad18:	strb	w0, [x1, #91]
    ad1c:	b	acdc <lzma_raw_decoder@@XZ_5.0+0x24>
    ad20:	mov	x0, x20
    ad24:	bl	3320 <lzma_end@plt>
    ad28:	b	acdc <lzma_raw_decoder@@XZ_5.0+0x24>

000000000000ad2c <lzma_raw_decoder_memusage@@XZ_5.0>:
    ad2c:	stp	x29, x30, [sp, #-16]!
    ad30:	mov	x29, sp
    ad34:	mov	x1, x0
    ad38:	adrp	x0, a000 <lzma_alone_decoder@@XZ_5.0+0x2d0>
    ad3c:	add	x0, x0, #0xc3c
    ad40:	bl	4488 <lzma_filters_copy@@XZ_5.0+0x350>
    ad44:	ldp	x29, x30, [sp], #16
    ad48:	ret

000000000000ad4c <lzma_properties_decode@@XZ_5.0>:
    ad4c:	stp	x29, x30, [sp, #-48]!
    ad50:	mov	x29, sp
    ad54:	stp	x19, x20, [sp, #16]
    ad58:	stp	x21, x22, [sp, #32]
    ad5c:	mov	x19, x0
    ad60:	mov	x21, x1
    ad64:	mov	x22, x2
    ad68:	mov	x20, x3
    ad6c:	str	xzr, [x0, #8]
    ad70:	ldr	x0, [x0]
    ad74:	bl	ac3c <lzma_raw_buffer_decode@@XZ_5.0+0x1dc>
    ad78:	cbz	x0, adb8 <lzma_properties_decode@@XZ_5.0+0x6c>
    ad7c:	ldr	x4, [x0, #24]
    ad80:	cbz	x4, ada8 <lzma_properties_decode@@XZ_5.0+0x5c>
    ad84:	mov	x3, x20
    ad88:	mov	x2, x22
    ad8c:	mov	x1, x21
    ad90:	add	x0, x19, #0x8
    ad94:	blr	x4
    ad98:	ldp	x19, x20, [sp, #16]
    ad9c:	ldp	x21, x22, [sp, #32]
    ada0:	ldp	x29, x30, [sp], #48
    ada4:	ret
    ada8:	cmp	x20, #0x0
    adac:	cset	w0, ne  // ne = any
    adb0:	lsl	w0, w0, #3
    adb4:	b	ad98 <lzma_properties_decode@@XZ_5.0+0x4c>
    adb8:	mov	w0, #0x8                   	// #8
    adbc:	b	ad98 <lzma_properties_decode@@XZ_5.0+0x4c>

000000000000adc0 <lzma_filter_flags_decode@@XZ_5.0>:
    adc0:	stp	x29, x30, [sp, #-80]!
    adc4:	mov	x29, sp
    adc8:	stp	x19, x20, [sp, #16]
    adcc:	stp	x21, x22, [sp, #32]
    add0:	str	x23, [sp, #48]
    add4:	mov	x19, x0
    add8:	mov	x23, x1
    addc:	mov	x22, x2
    ade0:	mov	x21, x3
    ade4:	mov	x20, x4
    ade8:	str	xzr, [x0, #8]
    adec:	mov	x1, #0x0                   	// #0
    adf0:	bl	33c0 <lzma_vli_decode@plt>
    adf4:	cbnz	w0, ae60 <lzma_filter_flags_decode@@XZ_5.0+0xa0>
    adf8:	ldr	x2, [x19]
    adfc:	mov	w0, #0x9                   	// #9
    ae00:	mov	x1, #0x3fffffffffffffff    	// #4611686018427387903
    ae04:	cmp	x2, x1
    ae08:	b.hi	ae60 <lzma_filter_flags_decode@@XZ_5.0+0xa0>  // b.pmore
    ae0c:	mov	x4, x20
    ae10:	mov	x3, x21
    ae14:	mov	x2, x22
    ae18:	mov	x1, #0x0                   	// #0
    ae1c:	add	x0, sp, #0x48
    ae20:	bl	33c0 <lzma_vli_decode@plt>
    ae24:	cbnz	w0, ae60 <lzma_filter_flags_decode@@XZ_5.0+0xa0>
    ae28:	ldr	x2, [x21]
    ae2c:	ldr	x3, [sp, #72]
    ae30:	sub	x4, x20, x2
    ae34:	mov	w0, #0x9                   	// #9
    ae38:	cmp	x4, x3
    ae3c:	b.cc	ae60 <lzma_filter_flags_decode@@XZ_5.0+0xa0>  // b.lo, b.ul, b.last
    ae40:	add	x2, x22, x2
    ae44:	mov	x1, x23
    ae48:	mov	x0, x19
    ae4c:	bl	3250 <lzma_properties_decode@plt>
    ae50:	ldr	x1, [x21]
    ae54:	ldr	x2, [sp, #72]
    ae58:	add	x1, x1, x2
    ae5c:	str	x1, [x21]
    ae60:	ldp	x19, x20, [sp, #16]
    ae64:	ldp	x21, x22, [sp, #32]
    ae68:	ldr	x23, [sp, #48]
    ae6c:	ldp	x29, x30, [sp], #80
    ae70:	ret
    ae74:	stp	x29, x30, [sp, #-48]!
    ae78:	mov	x29, sp
    ae7c:	stp	x19, x20, [sp, #16]
    ae80:	stp	x21, x22, [sp, #32]
    ae84:	mov	x19, x0
    ae88:	mov	x21, x1
    ae8c:	mov	x22, x2
    ae90:	mov	x20, x3
    ae94:	ldr	x1, [x0, #32]
    ae98:	mov	x0, #0x1                   	// #1
    ae9c:	bl	3180 <lzma_index_memusage@plt>
    aea0:	str	x0, [x21]
    aea4:	ldr	x0, [x19, #8]
    aea8:	str	x0, [x22]
    aeac:	mov	w0, #0x0                   	// #0
    aeb0:	cbz	x20, aecc <lzma_filter_flags_decode@@XZ_5.0+0x10c>
    aeb4:	ldr	x1, [x21]
    aeb8:	mov	w0, #0x6                   	// #6
    aebc:	cmp	x1, x20
    aec0:	b.hi	aecc <lzma_filter_flags_decode@@XZ_5.0+0x10c>  // b.pmore
    aec4:	str	x20, [x19, #8]
    aec8:	mov	w0, #0x0                   	// #0
    aecc:	ldp	x19, x20, [sp, #16]
    aed0:	ldp	x21, x22, [sp, #32]
    aed4:	ldp	x29, x30, [sp], #48
    aed8:	ret
    aedc:	stp	x29, x30, [sp, #-32]!
    aee0:	mov	x29, sp
    aee4:	stp	x19, x20, [sp, #16]
    aee8:	mov	x19, x0
    aeec:	mov	x20, x1
    aef0:	ldr	x0, [x0, #16]
    aef4:	bl	33e0 <lzma_index_end@plt>
    aef8:	mov	x1, x20
    aefc:	mov	x0, x19
    af00:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    af04:	ldp	x19, x20, [sp, #16]
    af08:	ldp	x29, x30, [sp], #32
    af0c:	ret
    af10:	stp	x29, x30, [sp, #-112]!
    af14:	mov	x29, sp
    af18:	stp	x19, x20, [sp, #16]
    af1c:	stp	x21, x22, [sp, #32]
    af20:	stp	x23, x24, [sp, #48]
    af24:	mov	x19, x0
    af28:	str	x1, [sp, #104]
    af2c:	mov	x22, x2
    af30:	mov	x20, x3
    af34:	ldr	x24, [x3]
    af38:	cmp	x24, x4
    af3c:	b.cs	b20c <lzma_filter_flags_decode@@XZ_5.0+0x44c>  // b.hs, b.nlast
    af40:	stp	x25, x26, [sp, #64]
    af44:	stp	x27, x28, [sp, #80]
    af48:	mov	x21, x4
    af4c:	mov	x1, x24
    af50:	mov	w28, #0x6                   	// #6
    af54:	add	x27, x0, #0x28
    af58:	add	x0, x0, #0x30
    af5c:	str	x0, [sp, #96]
    af60:	add	x26, x19, #0x38
    af64:	mov	w25, #0x5                   	// #5
    af68:	b	b0e0 <lzma_filter_flags_decode@@XZ_5.0+0x320>
    af6c:	cbnz	w0, af8c <lzma_filter_flags_decode@@XZ_5.0+0x1cc>
    af70:	add	x0, x1, #0x1
    af74:	str	x0, [x20]
    af78:	ldrb	w0, [x22, x1]
    af7c:	cbnz	w0, b22c <lzma_filter_flags_decode@@XZ_5.0+0x46c>
    af80:	mov	w0, #0x1                   	// #1
    af84:	str	w0, [x19]
    af88:	b	b0d4 <lzma_filter_flags_decode@@XZ_5.0+0x314>
    af8c:	mov	w23, #0xb                   	// #11
    af90:	ldp	x25, x26, [sp, #64]
    af94:	ldp	x27, x28, [sp, #80]
    af98:	mov	w0, w23
    af9c:	ldp	x19, x20, [sp, #16]
    afa0:	ldp	x21, x22, [sp, #32]
    afa4:	ldp	x23, x24, [sp, #48]
    afa8:	ldp	x29, x30, [sp], #112
    afac:	ret
    afb0:	cmp	w0, #0x6
    afb4:	b.eq	b03c <lzma_filter_flags_decode@@XZ_5.0+0x27c>  // b.none
    afb8:	cmp	w0, #0x7
    afbc:	b.ne	b020 <lzma_filter_flags_decode@@XZ_5.0+0x260>  // b.any
    afc0:	ldr	x1, [x20]
    afc4:	cmp	x1, x21
    afc8:	b.eq	b24c <lzma_filter_flags_decode@@XZ_5.0+0x48c>  // b.none
    afcc:	ldr	x0, [x19, #56]
    afd0:	lsl	w3, w0, #3
    afd4:	ldr	w2, [x19, #64]
    afd8:	lsr	w2, w2, w3
    afdc:	add	x3, x1, #0x1
    afe0:	str	x3, [x20]
    afe4:	ldrb	w1, [x22, x1]
    afe8:	cmp	w1, w2, uxtb
    afec:	b.ne	b25c <lzma_filter_flags_decode@@XZ_5.0+0x49c>  // b.any
    aff0:	add	x0, x0, #0x1
    aff4:	str	x0, [x19, #56]
    aff8:	cmp	x0, #0x3
    affc:	b.ls	afc0 <lzma_filter_flags_decode@@XZ_5.0+0x200>  // b.plast
    b000:	ldr	x0, [x19, #24]
    b004:	ldr	x1, [x19, #16]
    b008:	str	x1, [x0]
    b00c:	str	xzr, [x19, #16]
    b010:	mov	w23, #0x1                   	// #1
    b014:	ldp	x25, x26, [sp, #64]
    b018:	ldp	x27, x28, [sp, #80]
    b01c:	b	af98 <lzma_filter_flags_decode@@XZ_5.0+0x1d8>
    b020:	cmp	w0, #0x5
    b024:	b.ne	b070 <lzma_filter_flags_decode@@XZ_5.0+0x2b0>  // b.any
    b028:	ldr	x0, [x19, #16]
    b02c:	bl	4c9c <lzma_index_checks@@XZ_5.0+0x2c>
    b030:	mov	w0, w0
    b034:	str	x0, [x19, #56]
    b038:	str	w28, [x19]
    b03c:	ldr	x0, [x19, #56]
    b040:	cbz	x0, b1c0 <lzma_filter_flags_decode@@XZ_5.0+0x400>
    b044:	sub	x0, x0, #0x1
    b048:	str	x0, [x19, #56]
    b04c:	ldr	x0, [x20]
    b050:	add	x1, x0, #0x1
    b054:	str	x1, [x20]
    b058:	ldrb	w0, [x22, x0]
    b05c:	cbz	w0, b0d4 <lzma_filter_flags_decode@@XZ_5.0+0x314>
    b060:	mov	w23, #0x9                   	// #9
    b064:	ldp	x25, x26, [sp, #64]
    b068:	ldp	x27, x28, [sp, #80]
    b06c:	b	af98 <lzma_filter_flags_decode@@XZ_5.0+0x1d8>
    b070:	mov	w23, #0xb                   	// #11
    b074:	ldp	x25, x26, [sp, #64]
    b078:	ldp	x27, x28, [sp, #80]
    b07c:	b	af98 <lzma_filter_flags_decode@@XZ_5.0+0x1d8>
    b080:	mov	x4, x21
    b084:	mov	x3, x20
    b088:	mov	x2, x22
    b08c:	mov	x1, x26
    b090:	add	x0, x19, #0x20
    b094:	bl	33c0 <lzma_vli_decode@plt>
    b098:	mov	w23, w0
    b09c:	cmp	w0, #0x1
    b0a0:	b.ne	b214 <lzma_filter_flags_decode@@XZ_5.0+0x454>  // b.any
    b0a4:	str	xzr, [x19, #56]
    b0a8:	mov	w0, #0x2                   	// #2
    b0ac:	str	w0, [x19]
    b0b0:	b	b104 <lzma_filter_flags_decode@@XZ_5.0+0x344>
    b0b4:	ldr	x1, [x19, #32]
    b0b8:	ldr	x0, [x19, #16]
    b0bc:	bl	4aa4 <lzma_index_end@@XZ_5.0+0x48>
    b0c0:	ldr	x0, [x19, #32]
    b0c4:	cmp	x0, #0x0
    b0c8:	mov	w0, #0x3                   	// #3
    b0cc:	csel	w0, w25, w0, eq  // eq = none
    b0d0:	str	w0, [x19]
    b0d4:	ldr	x1, [x20]
    b0d8:	cmp	x1, x21
    b0dc:	b.cs	b1e4 <lzma_filter_flags_decode@@XZ_5.0+0x424>  // b.hs, b.nlast
    b0e0:	ldr	w0, [x19]
    b0e4:	cmp	w0, #0x4
    b0e8:	b.hi	afb0 <lzma_filter_flags_decode@@XZ_5.0+0x1f0>  // b.pmore
    b0ec:	cmp	w0, #0x2
    b0f0:	b.hi	b12c <lzma_filter_flags_decode@@XZ_5.0+0x36c>  // b.pmore
    b0f4:	cmp	w0, #0x1
    b0f8:	b.eq	b080 <lzma_filter_flags_decode@@XZ_5.0+0x2c0>  // b.none
    b0fc:	cmp	w0, #0x2
    b100:	b.ne	af6c <lzma_filter_flags_decode@@XZ_5.0+0x1ac>  // b.any
    b104:	ldr	x1, [x19, #32]
    b108:	mov	x0, #0x1                   	// #1
    b10c:	bl	3180 <lzma_index_memusage@plt>
    b110:	ldr	x1, [x19, #8]
    b114:	cmp	x0, x1
    b118:	b.ls	b0b4 <lzma_filter_flags_decode@@XZ_5.0+0x2f4>  // b.plast
    b11c:	mov	w23, #0x6                   	// #6
    b120:	ldp	x25, x26, [sp, #64]
    b124:	ldp	x27, x28, [sp, #80]
    b128:	b	b1f0 <lzma_filter_flags_decode@@XZ_5.0+0x430>
    b12c:	cmp	w0, #0x3
    b130:	mov	x4, x21
    b134:	mov	x3, x20
    b138:	mov	x2, x22
    b13c:	mov	x1, x26
    b140:	ldr	x0, [sp, #96]
    b144:	csel	x0, x0, x27, ne  // ne = any
    b148:	bl	33c0 <lzma_vli_decode@plt>
    b14c:	mov	w23, w0
    b150:	cmp	w0, #0x1
    b154:	b.ne	b220 <lzma_filter_flags_decode@@XZ_5.0+0x460>  // b.any
    b158:	str	xzr, [x19, #56]
    b15c:	ldr	w0, [x19]
    b160:	cmp	w0, #0x3
    b164:	b.ne	b188 <lzma_filter_flags_decode@@XZ_5.0+0x3c8>  // b.any
    b168:	ldr	x0, [x19, #40]
    b16c:	sub	x0, x0, #0x5
    b170:	mov	x1, #0x7ffffffffffffff8    	// #9223372036854775800
    b174:	cmp	x0, x1
    b178:	b.cs	b23c <lzma_filter_flags_decode@@XZ_5.0+0x47c>  // b.hs, b.nlast
    b17c:	mov	w0, #0x4                   	// #4
    b180:	str	w0, [x19]
    b184:	b	b0d4 <lzma_filter_flags_decode@@XZ_5.0+0x314>
    b188:	ldr	x3, [x19, #48]
    b18c:	ldr	x2, [x19, #40]
    b190:	ldr	x1, [sp, #104]
    b194:	ldr	x0, [x19, #16]
    b198:	bl	3300 <lzma_index_append@plt>
    b19c:	mov	w23, w0
    b1a0:	cbnz	w0, b26c <lzma_filter_flags_decode@@XZ_5.0+0x4ac>
    b1a4:	ldr	x0, [x19, #32]
    b1a8:	subs	x0, x0, #0x1
    b1ac:	str	x0, [x19, #32]
    b1b0:	mov	w0, #0x3                   	// #3
    b1b4:	csel	w0, w25, w0, eq  // eq = none
    b1b8:	str	w0, [x19]
    b1bc:	b	b0d4 <lzma_filter_flags_decode@@XZ_5.0+0x314>
    b1c0:	ldr	x1, [x20]
    b1c4:	ldr	w2, [x19, #64]
    b1c8:	sub	x1, x1, x24
    b1cc:	add	x0, x22, x24
    b1d0:	bl	31c0 <lzma_crc32@plt>
    b1d4:	str	w0, [x19, #64]
    b1d8:	mov	w0, #0x7                   	// #7
    b1dc:	str	w0, [x19]
    b1e0:	b	afc0 <lzma_filter_flags_decode@@XZ_5.0+0x200>
    b1e4:	mov	w23, #0x0                   	// #0
    b1e8:	ldp	x25, x26, [sp, #64]
    b1ec:	ldp	x27, x28, [sp, #80]
    b1f0:	ldr	x1, [x20]
    b1f4:	ldr	w2, [x19, #64]
    b1f8:	sub	x1, x1, x24
    b1fc:	add	x0, x22, x24
    b200:	bl	31c0 <lzma_crc32@plt>
    b204:	str	w0, [x19, #64]
    b208:	b	af98 <lzma_filter_flags_decode@@XZ_5.0+0x1d8>
    b20c:	mov	w23, #0x0                   	// #0
    b210:	b	b1f0 <lzma_filter_flags_decode@@XZ_5.0+0x430>
    b214:	ldp	x25, x26, [sp, #64]
    b218:	ldp	x27, x28, [sp, #80]
    b21c:	b	b1f0 <lzma_filter_flags_decode@@XZ_5.0+0x430>
    b220:	ldp	x25, x26, [sp, #64]
    b224:	ldp	x27, x28, [sp, #80]
    b228:	b	b1f0 <lzma_filter_flags_decode@@XZ_5.0+0x430>
    b22c:	mov	w23, #0x9                   	// #9
    b230:	ldp	x25, x26, [sp, #64]
    b234:	ldp	x27, x28, [sp, #80]
    b238:	b	af98 <lzma_filter_flags_decode@@XZ_5.0+0x1d8>
    b23c:	mov	w23, #0x9                   	// #9
    b240:	ldp	x25, x26, [sp, #64]
    b244:	ldp	x27, x28, [sp, #80]
    b248:	b	af98 <lzma_filter_flags_decode@@XZ_5.0+0x1d8>
    b24c:	mov	w23, #0x0                   	// #0
    b250:	ldp	x25, x26, [sp, #64]
    b254:	ldp	x27, x28, [sp, #80]
    b258:	b	af98 <lzma_filter_flags_decode@@XZ_5.0+0x1d8>
    b25c:	mov	w23, #0x9                   	// #9
    b260:	ldp	x25, x26, [sp, #64]
    b264:	ldp	x27, x28, [sp, #80]
    b268:	b	af98 <lzma_filter_flags_decode@@XZ_5.0+0x1d8>
    b26c:	ldp	x25, x26, [sp, #64]
    b270:	ldp	x27, x28, [sp, #80]
    b274:	b	af98 <lzma_filter_flags_decode@@XZ_5.0+0x1d8>
    b278:	stp	x29, x30, [sp, #-64]!
    b27c:	mov	x29, sp
    b280:	stp	x19, x20, [sp, #16]
    b284:	stp	x21, x22, [sp, #32]
    b288:	str	x23, [sp, #48]
    b28c:	mov	x20, x0
    b290:	mov	x23, x1
    b294:	mov	x22, x2
    b298:	mov	x21, x3
    b29c:	adrp	x19, b000 <lzma_filter_flags_decode@@XZ_5.0+0x240>
    b2a0:	add	x19, x19, #0x278
    b2a4:	ldr	x0, [x0, #16]
    b2a8:	cmp	x0, x19
    b2ac:	b.ne	b318 <lzma_filter_flags_decode@@XZ_5.0+0x558>  // b.any
    b2b0:	str	x19, [x20, #16]
    b2b4:	cbz	x22, b368 <lzma_filter_flags_decode@@XZ_5.0+0x5a8>
    b2b8:	ldr	x19, [x20]
    b2bc:	cbz	x19, b324 <lzma_filter_flags_decode@@XZ_5.0+0x564>
    b2c0:	mov	x1, x23
    b2c4:	ldr	x0, [x19, #16]
    b2c8:	bl	33e0 <lzma_index_end@plt>
    b2cc:	str	x22, [x19, #24]
    b2d0:	str	xzr, [x22]
    b2d4:	mov	x0, x23
    b2d8:	bl	33b0 <lzma_index_init@plt>
    b2dc:	str	x0, [x19, #16]
    b2e0:	cbz	x0, b378 <lzma_filter_flags_decode@@XZ_5.0+0x5b8>
    b2e4:	str	wzr, [x19]
    b2e8:	cmp	x21, #0x0
    b2ec:	csinc	x21, x21, xzr, ne  // ne = any
    b2f0:	str	x21, [x19, #8]
    b2f4:	str	xzr, [x19, #32]
    b2f8:	str	xzr, [x19, #56]
    b2fc:	str	wzr, [x19, #64]
    b300:	mov	w0, #0x0                   	// #0
    b304:	ldp	x19, x20, [sp, #16]
    b308:	ldp	x21, x22, [sp, #32]
    b30c:	ldr	x23, [sp, #48]
    b310:	ldp	x29, x30, [sp], #64
    b314:	ret
    b318:	mov	x0, x20
    b31c:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    b320:	b	b2b0 <lzma_filter_flags_decode@@XZ_5.0+0x4f0>
    b324:	mov	x1, x23
    b328:	mov	x0, #0x48                  	// #72
    b32c:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    b330:	mov	x19, x0
    b334:	cbz	x0, b370 <lzma_filter_flags_decode@@XZ_5.0+0x5b0>
    b338:	str	x0, [x20]
    b33c:	adrp	x0, a000 <lzma_alone_decoder@@XZ_5.0+0x2d0>
    b340:	add	x0, x0, #0xf10
    b344:	str	x0, [x20, #24]
    b348:	adrp	x0, a000 <lzma_alone_decoder@@XZ_5.0+0x2d0>
    b34c:	add	x0, x0, #0xedc
    b350:	str	x0, [x20, #32]
    b354:	adrp	x0, a000 <lzma_alone_decoder@@XZ_5.0+0x2d0>
    b358:	add	x0, x0, #0xe74
    b35c:	str	x0, [x20, #56]
    b360:	str	xzr, [x19, #16]
    b364:	b	b2cc <lzma_filter_flags_decode@@XZ_5.0+0x50c>
    b368:	mov	w0, #0xb                   	// #11
    b36c:	b	b304 <lzma_filter_flags_decode@@XZ_5.0+0x544>
    b370:	mov	w0, #0x5                   	// #5
    b374:	b	b304 <lzma_filter_flags_decode@@XZ_5.0+0x544>
    b378:	mov	w0, #0x5                   	// #5
    b37c:	b	b304 <lzma_filter_flags_decode@@XZ_5.0+0x544>

000000000000b380 <lzma_index_decoder@@XZ_5.0>:
    b380:	stp	x29, x30, [sp, #-48]!
    b384:	mov	x29, sp
    b388:	stp	x19, x20, [sp, #16]
    b38c:	stp	x21, x22, [sp, #32]
    b390:	mov	x20, x0
    b394:	mov	x21, x1
    b398:	mov	x22, x2
    b39c:	bl	3950 <lzma_version_string@@XZ_5.0+0x288>
    b3a0:	mov	w19, w0
    b3a4:	cbz	w0, b3bc <lzma_index_decoder@@XZ_5.0+0x3c>
    b3a8:	mov	w0, w19
    b3ac:	ldp	x19, x20, [sp, #16]
    b3b0:	ldp	x21, x22, [sp, #32]
    b3b4:	ldp	x29, x30, [sp], #48
    b3b8:	ret
    b3bc:	mov	x3, x22
    b3c0:	mov	x2, x21
    b3c4:	ldr	x1, [x20, #48]
    b3c8:	ldr	x0, [x20, #56]
    b3cc:	bl	b278 <lzma_filter_flags_decode@@XZ_5.0+0x4b8>
    b3d0:	mov	w19, w0
    b3d4:	cbnz	w0, b3f0 <lzma_index_decoder@@XZ_5.0+0x70>
    b3d8:	ldr	x1, [x20, #56]
    b3dc:	mov	w0, #0x1                   	// #1
    b3e0:	strb	w0, [x1, #88]
    b3e4:	ldr	x1, [x20, #56]
    b3e8:	strb	w0, [x1, #91]
    b3ec:	b	b3a8 <lzma_index_decoder@@XZ_5.0+0x28>
    b3f0:	mov	x0, x20
    b3f4:	bl	3320 <lzma_end@plt>
    b3f8:	b	b3a8 <lzma_index_decoder@@XZ_5.0+0x28>

000000000000b3fc <lzma_index_buffer_decode@@XZ_5.0>:
    b3fc:	sub	sp, sp, #0xb0
    b400:	stp	x29, x30, [sp, #16]
    b404:	add	x29, sp, #0x10
    b408:	stp	x19, x20, [sp, #32]
    b40c:	cmp	x0, #0x0
    b410:	ccmp	x1, #0x0, #0x4, ne  // ne = any
    b414:	mov	w20, #0xb                   	// #11
    b418:	b.eq	b560 <lzma_index_buffer_decode@@XZ_5.0+0x164>  // b.none
    b41c:	stp	x21, x22, [sp, #48]
    b420:	stp	x23, x24, [sp, #64]
    b424:	mov	x22, x1
    b428:	mov	x24, x2
    b42c:	mov	x23, x3
    b430:	mov	x19, x4
    b434:	mov	x21, x5
    b438:	cmp	x3, #0x0
    b43c:	mov	w20, #0xb                   	// #11
    b440:	ccmp	x4, #0x0, #0x4, ne  // ne = any
    b444:	b.eq	b54c <lzma_index_buffer_decode@@XZ_5.0+0x150>  // b.none
    b448:	ldr	x1, [x4]
    b44c:	cmp	x1, x5
    b450:	b.hi	b558 <lzma_index_buffer_decode@@XZ_5.0+0x15c>  // b.pmore
    b454:	ldr	x20, [x22]
    b458:	str	x0, [sp, #128]
    b45c:	str	xzr, [x0]
    b460:	mov	x0, x2
    b464:	bl	33b0 <lzma_index_init@plt>
    b468:	str	x0, [sp, #120]
    b46c:	cbz	x0, b528 <lzma_index_buffer_decode@@XZ_5.0+0x12c>
    b470:	str	x25, [sp, #80]
    b474:	str	wzr, [sp, #104]
    b478:	cmp	x20, #0x0
    b47c:	csinc	x20, x20, xzr, ne  // ne = any
    b480:	str	x20, [sp, #112]
    b484:	str	xzr, [sp, #136]
    b488:	str	xzr, [sp, #160]
    b48c:	str	wzr, [sp, #168]
    b490:	ldr	x25, [x19]
    b494:	str	wzr, [sp]
    b498:	mov	x7, #0x0                   	// #0
    b49c:	mov	x6, #0x0                   	// #0
    b4a0:	mov	x5, #0x0                   	// #0
    b4a4:	mov	x4, x21
    b4a8:	mov	x3, x19
    b4ac:	mov	x2, x23
    b4b0:	mov	x1, x24
    b4b4:	add	x0, sp, #0x68
    b4b8:	bl	af10 <lzma_filter_flags_decode@@XZ_5.0+0x150>
    b4bc:	mov	w20, w0
    b4c0:	cmp	w0, #0x1
    b4c4:	b.ne	b4dc <lzma_index_buffer_decode@@XZ_5.0+0xe0>  // b.any
    b4c8:	mov	w20, #0x0                   	// #0
    b4cc:	ldp	x21, x22, [sp, #48]
    b4d0:	ldp	x23, x24, [sp, #64]
    b4d4:	ldr	x25, [sp, #80]
    b4d8:	b	b560 <lzma_index_buffer_decode@@XZ_5.0+0x164>
    b4dc:	mov	x1, x24
    b4e0:	ldr	x0, [sp, #120]
    b4e4:	bl	33e0 <lzma_index_end@plt>
    b4e8:	str	x25, [x19]
    b4ec:	cbz	w20, b538 <lzma_index_buffer_decode@@XZ_5.0+0x13c>
    b4f0:	cmp	w20, #0x6
    b4f4:	b.eq	b508 <lzma_index_buffer_decode@@XZ_5.0+0x10c>  // b.none
    b4f8:	ldp	x21, x22, [sp, #48]
    b4fc:	ldp	x23, x24, [sp, #64]
    b500:	ldr	x25, [sp, #80]
    b504:	b	b560 <lzma_index_buffer_decode@@XZ_5.0+0x164>
    b508:	ldr	x1, [sp, #136]
    b50c:	mov	x0, #0x1                   	// #1
    b510:	bl	3180 <lzma_index_memusage@plt>
    b514:	str	x0, [x22]
    b518:	ldp	x21, x22, [sp, #48]
    b51c:	ldp	x23, x24, [sp, #64]
    b520:	ldr	x25, [sp, #80]
    b524:	b	b560 <lzma_index_buffer_decode@@XZ_5.0+0x164>
    b528:	mov	w20, #0x5                   	// #5
    b52c:	ldp	x21, x22, [sp, #48]
    b530:	ldp	x23, x24, [sp, #64]
    b534:	b	b560 <lzma_index_buffer_decode@@XZ_5.0+0x164>
    b538:	mov	w20, #0x9                   	// #9
    b53c:	ldp	x21, x22, [sp, #48]
    b540:	ldp	x23, x24, [sp, #64]
    b544:	ldr	x25, [sp, #80]
    b548:	b	b560 <lzma_index_buffer_decode@@XZ_5.0+0x164>
    b54c:	ldp	x21, x22, [sp, #48]
    b550:	ldp	x23, x24, [sp, #64]
    b554:	b	b560 <lzma_index_buffer_decode@@XZ_5.0+0x164>
    b558:	ldp	x21, x22, [sp, #48]
    b55c:	ldp	x23, x24, [sp, #64]
    b560:	mov	w0, w20
    b564:	ldp	x19, x20, [sp, #32]
    b568:	ldp	x29, x30, [sp, #16]
    b56c:	add	sp, sp, #0xb0
    b570:	ret
    b574:	stp	x29, x30, [sp, #-64]!
    b578:	mov	x29, sp
    b57c:	stp	x19, x20, [sp, #16]
    b580:	stp	x21, x22, [sp, #32]
    b584:	mov	x19, x0
    b588:	mov	x21, x1
    b58c:	mov	x20, x2
    b590:	add	x0, x1, #0x3
    b594:	and	x1, x0, #0xfffffffffffffffc
    b598:	ldr	x0, [x19]
    b59c:	add	x0, x0, x1
    b5a0:	str	x0, [x19]
    b5a4:	ldr	x0, [x19, #8]
    b5a8:	add	x0, x0, x2
    b5ac:	str	x0, [x19, #8]
    b5b0:	mov	x0, x21
    b5b4:	bl	3480 <lzma_vli_size@plt>
    b5b8:	mov	w22, w0
    b5bc:	mov	x0, x20
    b5c0:	bl	3480 <lzma_vli_size@plt>
    b5c4:	add	w22, w22, w0
    b5c8:	ldr	x0, [x19, #24]
    b5cc:	add	x22, x0, x22
    b5d0:	str	x22, [x19, #24]
    b5d4:	ldr	x0, [x19, #16]
    b5d8:	add	x0, x0, #0x1
    b5dc:	str	x0, [x19, #16]
    b5e0:	str	x21, [sp, #48]
    b5e4:	str	x20, [sp, #56]
    b5e8:	mov	x3, #0x10                  	// #16
    b5ec:	add	x2, sp, #0x30
    b5f0:	mov	w1, #0xa                   	// #10
    b5f4:	add	x0, x19, #0x20
    b5f8:	bl	c7f4 <lzma_check_size@@XZ_5.0+0x64>
    b5fc:	mov	w0, #0x0                   	// #0
    b600:	ldp	x19, x20, [sp, #16]
    b604:	ldp	x21, x22, [sp, #32]
    b608:	ldp	x29, x30, [sp], #64
    b60c:	ret

000000000000b610 <lzma_index_hash_init@@XZ_5.0>:
    b610:	stp	x29, x30, [sp, #-32]!
    b614:	mov	x29, sp
    b618:	str	x19, [sp, #16]
    b61c:	mov	x19, x0
    b620:	cbz	x0, b680 <lzma_index_hash_init@@XZ_5.0+0x70>
    b624:	str	wzr, [x19]
    b628:	str	xzr, [x19, #8]
    b62c:	str	xzr, [x19, #16]
    b630:	str	xzr, [x19, #24]
    b634:	str	xzr, [x19, #32]
    b638:	str	xzr, [x19, #144]
    b63c:	str	xzr, [x19, #152]
    b640:	str	xzr, [x19, #160]
    b644:	str	xzr, [x19, #168]
    b648:	str	xzr, [x19, #288]
    b64c:	str	xzr, [x19, #296]
    b650:	str	xzr, [x19, #304]
    b654:	str	wzr, [x19, #312]
    b658:	mov	w1, #0xa                   	// #10
    b65c:	add	x0, x19, #0x28
    b660:	bl	c7b4 <lzma_check_size@@XZ_5.0+0x24>
    b664:	mov	w1, #0xa                   	// #10
    b668:	add	x0, x19, #0xb0
    b66c:	bl	c7b4 <lzma_check_size@@XZ_5.0+0x24>
    b670:	mov	x0, x19
    b674:	ldr	x19, [sp, #16]
    b678:	ldp	x29, x30, [sp], #32
    b67c:	ret
    b680:	mov	x0, #0x140                 	// #320
    b684:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    b688:	mov	x19, x0
    b68c:	cbnz	x0, b624 <lzma_index_hash_init@@XZ_5.0+0x14>
    b690:	b	b674 <lzma_index_hash_init@@XZ_5.0+0x64>

000000000000b694 <lzma_index_hash_end@@XZ_5.0>:
    b694:	stp	x29, x30, [sp, #-16]!
    b698:	mov	x29, sp
    b69c:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    b6a0:	ldp	x29, x30, [sp], #16
    b6a4:	ret

000000000000b6a8 <lzma_index_hash_size@@XZ_5.0>:
    b6a8:	stp	x29, x30, [sp, #-32]!
    b6ac:	mov	x29, sp
    b6b0:	str	x19, [sp, #16]
    b6b4:	mov	x19, x0
    b6b8:	ldr	x0, [x0, #24]
    b6bc:	bl	3480 <lzma_vli_size@plt>
    b6c0:	ldr	x1, [x19, #32]
    b6c4:	add	x1, x1, #0x7
    b6c8:	add	w0, w0, #0x1
    b6cc:	add	x0, x1, x0
    b6d0:	and	x0, x0, #0xfffffffffffffffc
    b6d4:	ldr	x19, [sp, #16]
    b6d8:	ldp	x29, x30, [sp], #32
    b6dc:	ret

000000000000b6e0 <lzma_index_hash_append@@XZ_5.0>:
    b6e0:	stp	x29, x30, [sp, #-48]!
    b6e4:	mov	x29, sp
    b6e8:	stp	x19, x20, [sp, #16]
    b6ec:	mov	x19, x0
    b6f0:	ldr	w0, [x0]
    b6f4:	mov	w20, #0xb                   	// #11
    b6f8:	cbnz	w0, b774 <lzma_index_hash_append@@XZ_5.0+0x94>
    b6fc:	sub	x3, x1, #0x5
    b700:	mov	w20, #0xb                   	// #11
    b704:	mov	x0, #0x7ffffffffffffff8    	// #9223372036854775800
    b708:	cmp	x3, x0
    b70c:	b.cs	b774 <lzma_index_hash_append@@XZ_5.0+0x94>  // b.hs, b.nlast
    b710:	tbnz	x2, #63, b774 <lzma_index_hash_append@@XZ_5.0+0x94>
    b714:	add	x0, x19, #0x8
    b718:	bl	b574 <lzma_index_buffer_decode@@XZ_5.0+0x178>
    b71c:	mov	w20, w0
    b720:	cbnz	w0, b774 <lzma_index_hash_append@@XZ_5.0+0x94>
    b724:	str	x21, [sp, #32]
    b728:	ldr	x21, [x19, #8]
    b72c:	tbnz	x21, #63, b784 <lzma_index_hash_append@@XZ_5.0+0xa4>
    b730:	ldr	x0, [x19, #16]
    b734:	tbnz	x0, #63, b790 <lzma_index_hash_append@@XZ_5.0+0xb0>
    b738:	ldr	x0, [x19, #24]
    b73c:	bl	3480 <lzma_vli_size@plt>
    b740:	ldr	x1, [x19, #32]
    b744:	add	x1, x1, #0x7
    b748:	add	w0, w0, #0x1
    b74c:	add	x0, x1, x0
    b750:	and	x0, x0, #0xfffffffffffffffc
    b754:	mov	x1, #0x400000000           	// #17179869184
    b758:	cmp	x0, x1
    b75c:	b.hi	b79c <lzma_index_hash_append@@XZ_5.0+0xbc>  // b.pmore
    b760:	add	x21, x21, #0x18
    b764:	cmn	x21, x0
    b768:	mov	w0, #0x9                   	// #9
    b76c:	csel	w20, w20, w0, pl  // pl = nfrst
    b770:	ldr	x21, [sp, #32]
    b774:	mov	w0, w20
    b778:	ldp	x19, x20, [sp, #16]
    b77c:	ldp	x29, x30, [sp], #48
    b780:	ret
    b784:	mov	w20, #0x9                   	// #9
    b788:	ldr	x21, [sp, #32]
    b78c:	b	b774 <lzma_index_hash_append@@XZ_5.0+0x94>
    b790:	mov	w20, #0x9                   	// #9
    b794:	ldr	x21, [sp, #32]
    b798:	b	b774 <lzma_index_hash_append@@XZ_5.0+0x94>
    b79c:	mov	w20, #0x9                   	// #9
    b7a0:	ldr	x21, [sp, #32]
    b7a4:	b	b774 <lzma_index_hash_append@@XZ_5.0+0x94>

000000000000b7a8 <lzma_index_hash_decode@@XZ_5.0>:
    b7a8:	stp	x29, x30, [sp, #-112]!
    b7ac:	mov	x29, sp
    b7b0:	stp	x21, x22, [sp, #32]
    b7b4:	stp	x25, x26, [sp, #64]
    b7b8:	ldr	x25, [x2]
    b7bc:	mov	w21, #0xa                   	// #10
    b7c0:	cmp	x25, x3
    b7c4:	b.cs	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>  // b.hs, b.nlast
    b7c8:	stp	x19, x20, [sp, #16]
    b7cc:	stp	x23, x24, [sp, #48]
    b7d0:	stp	x27, x28, [sp, #80]
    b7d4:	mov	x19, x0
    b7d8:	mov	x23, x1
    b7dc:	mov	x20, x2
    b7e0:	mov	x22, x3
    b7e4:	mov	x0, x25
    b7e8:	mov	w28, #0x5                   	// #5
    b7ec:	add	x24, x19, #0x130
    b7f0:	add	x1, x19, #0x118
    b7f4:	str	x1, [sp, #104]
    b7f8:	mov	w27, #0x4                   	// #4
    b7fc:	mov	w26, #0x2                   	// #2
    b800:	b	b9c0 <lzma_index_hash_decode@@XZ_5.0+0x218>
    b804:	cbnz	w1, b824 <lzma_index_hash_decode@@XZ_5.0+0x7c>
    b808:	add	x1, x0, #0x1
    b80c:	str	x1, [x20]
    b810:	ldrb	w0, [x23, x0]
    b814:	cbnz	w0, bb10 <lzma_index_hash_decode@@XZ_5.0+0x368>
    b818:	mov	w0, #0x1                   	// #1
    b81c:	str	w0, [x19]
    b820:	b	b9b4 <lzma_index_hash_decode@@XZ_5.0+0x20c>
    b824:	mov	w21, #0xb                   	// #11
    b828:	ldp	x19, x20, [sp, #16]
    b82c:	ldp	x23, x24, [sp, #48]
    b830:	ldp	x27, x28, [sp, #80]
    b834:	mov	w0, w21
    b838:	ldp	x21, x22, [sp, #32]
    b83c:	ldp	x25, x26, [sp, #64]
    b840:	ldp	x29, x30, [sp], #112
    b844:	ret
    b848:	cmp	w1, #0x5
    b84c:	b.eq	b990 <lzma_index_hash_decode@@XZ_5.0+0x1e8>  // b.none
    b850:	cmp	w1, #0x6
    b854:	b.ne	b8b0 <lzma_index_hash_decode@@XZ_5.0+0x108>  // b.any
    b858:	ldr	x0, [x20]
    b85c:	cmp	x0, x22
    b860:	b.eq	bb9c <lzma_index_hash_decode@@XZ_5.0+0x3f4>  // b.none
    b864:	ldr	x1, [x19, #304]
    b868:	lsl	w2, w1, #3
    b86c:	ldr	w1, [x19, #312]
    b870:	lsr	w1, w1, w2
    b874:	add	x2, x0, #0x1
    b878:	str	x2, [x20]
    b87c:	ldrb	w0, [x23, x0]
    b880:	cmp	w0, w1, uxtb
    b884:	b.ne	bbb0 <lzma_index_hash_decode@@XZ_5.0+0x408>  // b.any
    b888:	ldr	x0, [x19, #304]
    b88c:	add	x0, x0, #0x1
    b890:	str	x0, [x19, #304]
    b894:	cmp	x0, #0x3
    b898:	b.ls	b858 <lzma_index_hash_decode@@XZ_5.0+0xb0>  // b.plast
    b89c:	mov	w21, #0x1                   	// #1
    b8a0:	ldp	x19, x20, [sp, #16]
    b8a4:	ldp	x23, x24, [sp, #48]
    b8a8:	ldp	x27, x28, [sp, #80]
    b8ac:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    b8b0:	mov	w21, #0xb                   	// #11
    b8b4:	ldp	x19, x20, [sp, #16]
    b8b8:	ldp	x23, x24, [sp, #48]
    b8bc:	ldp	x27, x28, [sp, #80]
    b8c0:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    b8c4:	mov	x4, x22
    b8c8:	mov	x3, x20
    b8cc:	mov	x2, x23
    b8d0:	mov	x1, x24
    b8d4:	ldr	x0, [sp, #104]
    b8d8:	bl	33c0 <lzma_vli_decode@plt>
    b8dc:	mov	w21, w0
    b8e0:	cmp	w0, #0x1
    b8e4:	b.ne	bae8 <lzma_index_hash_decode@@XZ_5.0+0x340>  // b.any
    b8e8:	ldr	x0, [x19, #280]
    b8ec:	ldr	x1, [x19, #24]
    b8f0:	cmp	x0, x1
    b8f4:	b.ne	bb24 <lzma_index_hash_decode@@XZ_5.0+0x37c>  // b.any
    b8f8:	str	xzr, [x19, #304]
    b8fc:	cmp	x0, #0x0
    b900:	csel	w0, w27, w26, eq  // eq = none
    b904:	str	w0, [x19]
    b908:	b	b9b4 <lzma_index_hash_decode@@XZ_5.0+0x20c>
    b90c:	ldr	x2, [x19, #296]
    b910:	ldr	x1, [x19, #288]
    b914:	add	x0, x19, #0x90
    b918:	bl	b574 <lzma_index_buffer_decode@@XZ_5.0+0x178>
    b91c:	mov	w21, w0
    b920:	cbnz	w0, bbc4 <lzma_index_hash_decode@@XZ_5.0+0x41c>
    b924:	ldr	x1, [x19, #8]
    b928:	ldr	x0, [x19, #144]
    b92c:	cmp	x1, x0
    b930:	b.cc	bb4c <lzma_index_hash_decode@@XZ_5.0+0x3a4>  // b.lo, b.ul, b.last
    b934:	ldr	x1, [x19, #16]
    b938:	ldr	x0, [x19, #152]
    b93c:	cmp	x1, x0
    b940:	b.cc	bb60 <lzma_index_hash_decode@@XZ_5.0+0x3b8>  // b.lo, b.ul, b.last
    b944:	ldr	x1, [x19, #32]
    b948:	ldr	x0, [x19, #168]
    b94c:	cmp	x1, x0
    b950:	b.cc	bb74 <lzma_index_hash_decode@@XZ_5.0+0x3cc>  // b.lo, b.ul, b.last
    b954:	ldr	x0, [x19, #280]
    b958:	subs	x0, x0, #0x1
    b95c:	str	x0, [x19, #280]
    b960:	csel	w0, w27, w26, eq  // eq = none
    b964:	str	w0, [x19]
    b968:	b	b9b4 <lzma_index_hash_decode@@XZ_5.0+0x20c>
    b96c:	ldr	x0, [x19, #160]
    b970:	bl	3480 <lzma_vli_size@plt>
    b974:	add	w0, w0, #0x1
    b978:	ldr	x1, [x19, #168]
    b97c:	add	x0, x0, x1
    b980:	neg	x0, x0
    b984:	and	x0, x0, #0x3
    b988:	str	x0, [x19, #304]
    b98c:	str	w28, [x19]
    b990:	ldr	x0, [x19, #304]
    b994:	cbz	x0, ba3c <lzma_index_hash_decode@@XZ_5.0+0x294>
    b998:	sub	x0, x0, #0x1
    b99c:	str	x0, [x19, #304]
    b9a0:	ldr	x0, [x20]
    b9a4:	add	x1, x0, #0x1
    b9a8:	str	x1, [x20]
    b9ac:	ldrb	w0, [x23, x0]
    b9b0:	cbnz	w0, bb88 <lzma_index_hash_decode@@XZ_5.0+0x3e0>
    b9b4:	ldr	x0, [x20]
    b9b8:	cmp	x0, x22
    b9bc:	b.cs	bae4 <lzma_index_hash_decode@@XZ_5.0+0x33c>  // b.hs, b.nlast
    b9c0:	ldr	w1, [x19]
    b9c4:	cmp	w1, #0x4
    b9c8:	b.eq	b96c <lzma_index_hash_decode@@XZ_5.0+0x1c4>  // b.none
    b9cc:	b.hi	b848 <lzma_index_hash_decode@@XZ_5.0+0xa0>  // b.pmore
    b9d0:	cmp	w1, #0x1
    b9d4:	b.eq	b8c4 <lzma_index_hash_decode@@XZ_5.0+0x11c>  // b.none
    b9d8:	b.ls	b804 <lzma_index_hash_decode@@XZ_5.0+0x5c>  // b.plast
    b9dc:	add	x0, x19, #0x128
    b9e0:	add	x5, x19, #0x120
    b9e4:	cmp	w1, #0x2
    b9e8:	mov	x4, x22
    b9ec:	mov	x3, x20
    b9f0:	mov	x2, x23
    b9f4:	mov	x1, x24
    b9f8:	csel	x0, x5, x0, eq  // eq = none
    b9fc:	bl	33c0 <lzma_vli_decode@plt>
    ba00:	mov	w21, w0
    ba04:	cmp	w0, #0x1
    ba08:	b.ne	bae8 <lzma_index_hash_decode@@XZ_5.0+0x340>  // b.any
    ba0c:	str	xzr, [x19, #304]
    ba10:	ldr	w0, [x19]
    ba14:	cmp	w0, #0x2
    ba18:	b.ne	b90c <lzma_index_hash_decode@@XZ_5.0+0x164>  // b.any
    ba1c:	ldr	x0, [x19, #288]
    ba20:	sub	x0, x0, #0x5
    ba24:	mov	x1, #0x7ffffffffffffff8    	// #9223372036854775800
    ba28:	cmp	x0, x1
    ba2c:	b.cs	bb38 <lzma_index_hash_decode@@XZ_5.0+0x390>  // b.hs, b.nlast
    ba30:	mov	w0, #0x3                   	// #3
    ba34:	str	w0, [x19]
    ba38:	b	b9b4 <lzma_index_hash_decode@@XZ_5.0+0x20c>
    ba3c:	ldr	x1, [x19, #8]
    ba40:	ldr	x0, [x19, #144]
    ba44:	mov	w21, #0x9                   	// #9
    ba48:	cmp	x1, x0
    ba4c:	b.ne	bbd4 <lzma_index_hash_decode@@XZ_5.0+0x42c>  // b.any
    ba50:	ldr	x1, [x19, #16]
    ba54:	ldr	x0, [x19, #152]
    ba58:	cmp	x1, x0
    ba5c:	b.ne	bbe4 <lzma_index_hash_decode@@XZ_5.0+0x43c>  // b.any
    ba60:	ldr	x1, [x19, #32]
    ba64:	ldr	x0, [x19, #168]
    ba68:	cmp	x1, x0
    ba6c:	b.eq	ba80 <lzma_index_hash_decode@@XZ_5.0+0x2d8>  // b.none
    ba70:	ldp	x19, x20, [sp, #16]
    ba74:	ldp	x23, x24, [sp, #48]
    ba78:	ldp	x27, x28, [sp, #80]
    ba7c:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    ba80:	add	x21, x19, #0x28
    ba84:	mov	w1, #0xa                   	// #10
    ba88:	mov	x0, x21
    ba8c:	bl	c860 <lzma_check_size@@XZ_5.0+0xd0>
    ba90:	add	x24, x19, #0xb0
    ba94:	mov	w1, #0xa                   	// #10
    ba98:	mov	x0, x24
    ba9c:	bl	c860 <lzma_check_size@@XZ_5.0+0xd0>
    baa0:	mov	w0, #0xa                   	// #10
    baa4:	bl	3270 <lzma_check_size@plt>
    baa8:	mov	w2, w0
    baac:	mov	x1, x24
    bab0:	mov	x0, x21
    bab4:	bl	3330 <memcmp@plt>
    bab8:	mov	w21, #0x9                   	// #9
    babc:	cbnz	w0, bbf4 <lzma_index_hash_decode@@XZ_5.0+0x44c>
    bac0:	ldr	x1, [x20]
    bac4:	ldr	w2, [x19, #312]
    bac8:	sub	x1, x1, x25
    bacc:	add	x0, x23, x25
    bad0:	bl	31c0 <lzma_crc32@plt>
    bad4:	str	w0, [x19, #312]
    bad8:	mov	w0, #0x6                   	// #6
    badc:	str	w0, [x19]
    bae0:	b	b858 <lzma_index_hash_decode@@XZ_5.0+0xb0>
    bae4:	mov	w21, #0x0                   	// #0
    bae8:	ldr	x1, [x20]
    baec:	ldr	w2, [x19, #312]
    baf0:	sub	x1, x1, x25
    baf4:	add	x0, x23, x25
    baf8:	bl	31c0 <lzma_crc32@plt>
    bafc:	str	w0, [x19, #312]
    bb00:	ldp	x19, x20, [sp, #16]
    bb04:	ldp	x23, x24, [sp, #48]
    bb08:	ldp	x27, x28, [sp, #80]
    bb0c:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    bb10:	mov	w21, #0x9                   	// #9
    bb14:	ldp	x19, x20, [sp, #16]
    bb18:	ldp	x23, x24, [sp, #48]
    bb1c:	ldp	x27, x28, [sp, #80]
    bb20:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    bb24:	mov	w21, #0x9                   	// #9
    bb28:	ldp	x19, x20, [sp, #16]
    bb2c:	ldp	x23, x24, [sp, #48]
    bb30:	ldp	x27, x28, [sp, #80]
    bb34:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    bb38:	mov	w21, #0x9                   	// #9
    bb3c:	ldp	x19, x20, [sp, #16]
    bb40:	ldp	x23, x24, [sp, #48]
    bb44:	ldp	x27, x28, [sp, #80]
    bb48:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    bb4c:	mov	w21, #0x9                   	// #9
    bb50:	ldp	x19, x20, [sp, #16]
    bb54:	ldp	x23, x24, [sp, #48]
    bb58:	ldp	x27, x28, [sp, #80]
    bb5c:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    bb60:	mov	w21, #0x9                   	// #9
    bb64:	ldp	x19, x20, [sp, #16]
    bb68:	ldp	x23, x24, [sp, #48]
    bb6c:	ldp	x27, x28, [sp, #80]
    bb70:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    bb74:	mov	w21, #0x9                   	// #9
    bb78:	ldp	x19, x20, [sp, #16]
    bb7c:	ldp	x23, x24, [sp, #48]
    bb80:	ldp	x27, x28, [sp, #80]
    bb84:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    bb88:	mov	w21, #0x9                   	// #9
    bb8c:	ldp	x19, x20, [sp, #16]
    bb90:	ldp	x23, x24, [sp, #48]
    bb94:	ldp	x27, x28, [sp, #80]
    bb98:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    bb9c:	mov	w21, #0x0                   	// #0
    bba0:	ldp	x19, x20, [sp, #16]
    bba4:	ldp	x23, x24, [sp, #48]
    bba8:	ldp	x27, x28, [sp, #80]
    bbac:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    bbb0:	mov	w21, #0x9                   	// #9
    bbb4:	ldp	x19, x20, [sp, #16]
    bbb8:	ldp	x23, x24, [sp, #48]
    bbbc:	ldp	x27, x28, [sp, #80]
    bbc0:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    bbc4:	ldp	x19, x20, [sp, #16]
    bbc8:	ldp	x23, x24, [sp, #48]
    bbcc:	ldp	x27, x28, [sp, #80]
    bbd0:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    bbd4:	ldp	x19, x20, [sp, #16]
    bbd8:	ldp	x23, x24, [sp, #48]
    bbdc:	ldp	x27, x28, [sp, #80]
    bbe0:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    bbe4:	ldp	x19, x20, [sp, #16]
    bbe8:	ldp	x23, x24, [sp, #48]
    bbec:	ldp	x27, x28, [sp, #80]
    bbf0:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>
    bbf4:	ldp	x19, x20, [sp, #16]
    bbf8:	ldp	x23, x24, [sp, #48]
    bbfc:	ldp	x27, x28, [sp, #80]
    bc00:	b	b834 <lzma_index_hash_decode@@XZ_5.0+0x8c>

000000000000bc04 <lzma_stream_buffer_decode@@XZ_5.0>:
    bc04:	sub	sp, sp, #0xc0
    bc08:	stp	x29, x30, [sp, #16]
    bc0c:	add	x29, sp, #0x10
    bc10:	stp	x21, x22, [sp, #48]
    bc14:	cbz	x4, bdc8 <lzma_stream_buffer_decode@@XZ_5.0+0x1c4>
    bc18:	stp	x19, x20, [sp, #32]
    bc1c:	stp	x23, x24, [sp, #64]
    bc20:	stp	x25, x26, [sp, #80]
    bc24:	mov	x24, x0
    bc28:	mov	x25, x2
    bc2c:	mov	x23, x3
    bc30:	mov	x19, x4
    bc34:	mov	x22, x5
    bc38:	mov	x26, x6
    bc3c:	mov	x20, x7
    bc40:	cbz	x3, bd24 <lzma_stream_buffer_decode@@XZ_5.0+0x120>
    bc44:	ldr	x0, [x19]
    bc48:	cmp	x20, #0x0
    bc4c:	mov	w21, #0xb                   	// #11
    bc50:	ccmp	x0, x22, #0x2, ne  // ne = any
    bc54:	b.hi	bdd0 <lzma_stream_buffer_decode@@XZ_5.0+0x1cc>  // b.pmore
    bc58:	cbz	x26, bd44 <lzma_stream_buffer_decode@@XZ_5.0+0x140>
    bc5c:	ldr	x0, [x20]
    bc60:	mov	w21, #0xb                   	// #11
    bc64:	ldr	x2, [sp, #192]
    bc68:	cmp	x0, x2
    bc6c:	b.hi	bde0 <lzma_stream_buffer_decode@@XZ_5.0+0x1dc>  // b.pmore
    bc70:	mov	w21, #0xb                   	// #11
    bc74:	tbnz	w1, #2, bdf0 <lzma_stream_buffer_decode@@XZ_5.0+0x1ec>
    bc78:	str	xzr, [sp, #120]
    bc7c:	mov	x0, #0xffffffffffffffff    	// #-1
    bc80:	str	x0, [sp, #128]
    bc84:	str	xzr, [sp, #136]
    bc88:	str	xzr, [sp, #144]
    bc8c:	str	xzr, [sp, #152]
    bc90:	str	xzr, [sp, #160]
    bc94:	str	xzr, [sp, #168]
    bc98:	str	xzr, [sp, #176]
    bc9c:	str	xzr, [sp, #184]
    bca0:	mov	w3, w1
    bca4:	ldr	x2, [x24]
    bca8:	mov	x1, x25
    bcac:	add	x0, sp, #0x78
    bcb0:	bl	be80 <lzma_stream_buffer_decode@@XZ_5.0+0x27c>
    bcb4:	mov	w21, w0
    bcb8:	cbnz	w0, bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x198>
    bcbc:	stp	x27, x28, [sp, #96]
    bcc0:	ldr	x28, [x19]
    bcc4:	ldr	x27, [x20]
    bcc8:	mov	w0, #0x3                   	// #3
    bccc:	str	w0, [sp]
    bcd0:	ldr	x7, [sp, #192]
    bcd4:	mov	x6, x20
    bcd8:	mov	x5, x26
    bcdc:	mov	x4, x22
    bce0:	mov	x3, x19
    bce4:	mov	x2, x23
    bce8:	mov	x1, x25
    bcec:	ldr	x0, [sp, #120]
    bcf0:	ldr	x8, [sp, #144]
    bcf4:	blr	x8
    bcf8:	cmp	w0, #0x1
    bcfc:	b.eq	bd98 <lzma_stream_buffer_decode@@XZ_5.0+0x194>  // b.none
    bd00:	str	x28, [x19]
    bd04:	str	x27, [x20]
    bd08:	cbnz	w0, bd64 <lzma_stream_buffer_decode@@XZ_5.0+0x160>
    bd0c:	ldr	x0, [x19]
    bd10:	cmp	x0, x22
    bd14:	cset	w21, ne  // ne = any
    bd18:	add	w21, w21, #0x9
    bd1c:	ldp	x27, x28, [sp, #96]
    bd20:	b	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x198>
    bd24:	ldr	x0, [x4]
    bd28:	mov	w21, #0xb                   	// #11
    bd2c:	cmp	x0, x5
    bd30:	b.eq	bc44 <lzma_stream_buffer_decode@@XZ_5.0+0x40>  // b.none
    bd34:	ldp	x19, x20, [sp, #32]
    bd38:	ldp	x23, x24, [sp, #64]
    bd3c:	ldp	x25, x26, [sp, #80]
    bd40:	b	bdb4 <lzma_stream_buffer_decode@@XZ_5.0+0x1b0>
    bd44:	ldr	x0, [x20]
    bd48:	ldr	x2, [sp, #192]
    bd4c:	cmp	x0, x2
    bd50:	b.eq	bc70 <lzma_stream_buffer_decode@@XZ_5.0+0x6c>  // b.none
    bd54:	ldp	x19, x20, [sp, #32]
    bd58:	ldp	x23, x24, [sp, #64]
    bd5c:	ldp	x25, x26, [sp, #80]
    bd60:	b	bdb4 <lzma_stream_buffer_decode@@XZ_5.0+0x1b0>
    bd64:	mov	w21, w0
    bd68:	cmp	w0, #0x6
    bd6c:	b.eq	bd78 <lzma_stream_buffer_decode@@XZ_5.0+0x174>  // b.none
    bd70:	ldp	x27, x28, [sp, #96]
    bd74:	b	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x198>
    bd78:	mov	x3, #0x0                   	// #0
    bd7c:	add	x2, sp, #0x70
    bd80:	mov	x1, x24
    bd84:	ldr	x0, [sp, #120]
    bd88:	ldr	x4, [sp, #176]
    bd8c:	blr	x4
    bd90:	ldp	x27, x28, [sp, #96]
    bd94:	b	bd9c <lzma_stream_buffer_decode@@XZ_5.0+0x198>
    bd98:	ldp	x27, x28, [sp, #96]
    bd9c:	mov	x1, x25
    bda0:	add	x0, sp, #0x78
    bda4:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    bda8:	ldp	x19, x20, [sp, #32]
    bdac:	ldp	x23, x24, [sp, #64]
    bdb0:	ldp	x25, x26, [sp, #80]
    bdb4:	mov	w0, w21
    bdb8:	ldp	x21, x22, [sp, #48]
    bdbc:	ldp	x29, x30, [sp, #16]
    bdc0:	add	sp, sp, #0xc0
    bdc4:	ret
    bdc8:	mov	w21, #0xb                   	// #11
    bdcc:	b	bdb4 <lzma_stream_buffer_decode@@XZ_5.0+0x1b0>
    bdd0:	ldp	x19, x20, [sp, #32]
    bdd4:	ldp	x23, x24, [sp, #64]
    bdd8:	ldp	x25, x26, [sp, #80]
    bddc:	b	bdb4 <lzma_stream_buffer_decode@@XZ_5.0+0x1b0>
    bde0:	ldp	x19, x20, [sp, #32]
    bde4:	ldp	x23, x24, [sp, #64]
    bde8:	ldp	x25, x26, [sp, #80]
    bdec:	b	bdb4 <lzma_stream_buffer_decode@@XZ_5.0+0x1b0>
    bdf0:	ldp	x19, x20, [sp, #32]
    bdf4:	ldp	x23, x24, [sp, #64]
    bdf8:	ldp	x25, x26, [sp, #80]
    bdfc:	b	bdb4 <lzma_stream_buffer_decode@@XZ_5.0+0x1b0>
    be00:	ldr	w0, [x0, #304]
    be04:	ret
    be08:	mov	x4, x0
    be0c:	ldr	x0, [x0, #360]
    be10:	str	x0, [x1]
    be14:	ldr	x0, [x4, #352]
    be18:	str	x0, [x2]
    be1c:	mov	w0, #0x0                   	// #0
    be20:	cbz	x3, be3c <lzma_stream_buffer_decode@@XZ_5.0+0x238>
    be24:	ldr	x1, [x4, #360]
    be28:	mov	w0, #0x6                   	// #6
    be2c:	cmp	x1, x3
    be30:	b.hi	be3c <lzma_stream_buffer_decode@@XZ_5.0+0x238>  // b.pmore
    be34:	str	x3, [x4, #352]
    be38:	mov	w0, #0x0                   	// #0
    be3c:	ret
    be40:	stp	x29, x30, [sp, #-32]!
    be44:	mov	x29, sp
    be48:	stp	x19, x20, [sp, #16]
    be4c:	mov	x19, x0
    be50:	mov	x20, x1
    be54:	add	x0, x0, #0x8
    be58:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    be5c:	mov	x1, x20
    be60:	ldr	x0, [x19, #344]
    be64:	bl	3310 <lzma_index_hash_end@plt>
    be68:	mov	x1, x20
    be6c:	mov	x0, x19
    be70:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    be74:	ldp	x19, x20, [sp, #16]
    be78:	ldp	x29, x30, [sp], #32
    be7c:	ret
    be80:	stp	x29, x30, [sp, #-64]!
    be84:	mov	x29, sp
    be88:	stp	x19, x20, [sp, #16]
    be8c:	stp	x21, x22, [sp, #32]
    be90:	stp	x23, x24, [sp, #48]
    be94:	mov	x21, x0
    be98:	mov	x23, x1
    be9c:	mov	x22, x2
    bea0:	mov	w20, w3
    bea4:	adrp	x19, b000 <lzma_filter_flags_decode@@XZ_5.0+0x240>
    bea8:	add	x19, x19, #0xe80
    beac:	ldr	x0, [x0, #16]
    beb0:	cmp	x0, x19
    beb4:	b.ne	bf44 <lzma_stream_buffer_decode@@XZ_5.0+0x340>  // b.any
    beb8:	str	x19, [x21, #16]
    bebc:	ands	w24, w20, #0xffffffe0
    bec0:	b.ne	bfc8 <lzma_stream_buffer_decode@@XZ_5.0+0x3c4>  // b.any
    bec4:	ldr	x19, [x21]
    bec8:	cbz	x19, bf50 <lzma_stream_buffer_decode@@XZ_5.0+0x34c>
    becc:	mov	x0, #0x1                   	// #1
    bed0:	cmp	x22, #0x0
    bed4:	csel	x22, x22, x0, ne  // ne = any
    bed8:	str	x22, [x19, #352]
    bedc:	mov	x1, #0x8000                	// #32768
    bee0:	str	x1, [x19, #360]
    bee4:	and	w1, w20, #0x1
    bee8:	strb	w1, [x19, #368]
    beec:	ubfx	x1, x20, #1, #1
    bef0:	strb	w1, [x19, #369]
    bef4:	ubfx	x1, x20, #2, #1
    bef8:	strb	w1, [x19, #370]
    befc:	ubfx	x1, x20, #4, #1
    bf00:	strb	w1, [x19, #371]
    bf04:	ubfx	x20, x20, #3, #1
    bf08:	strb	w20, [x19, #372]
    bf0c:	strb	w0, [x19, #373]
    bf10:	mov	x1, x23
    bf14:	ldr	x0, [x19, #344]
    bf18:	bl	3280 <lzma_index_hash_init@plt>
    bf1c:	str	x0, [x19, #344]
    bf20:	cbz	x0, bfd8 <lzma_stream_buffer_decode@@XZ_5.0+0x3d4>
    bf24:	str	wzr, [x19]
    bf28:	str	xzr, [x19, #376]
    bf2c:	mov	w0, w24
    bf30:	ldp	x19, x20, [sp, #16]
    bf34:	ldp	x21, x22, [sp, #32]
    bf38:	ldp	x23, x24, [sp, #48]
    bf3c:	ldp	x29, x30, [sp], #64
    bf40:	ret
    bf44:	mov	x0, x21
    bf48:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    bf4c:	b	beb8 <lzma_stream_buffer_decode@@XZ_5.0+0x2b4>
    bf50:	mov	x1, x23
    bf54:	mov	x0, #0x580                 	// #1408
    bf58:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    bf5c:	mov	x19, x0
    bf60:	cbz	x0, bfd0 <lzma_stream_buffer_decode@@XZ_5.0+0x3cc>
    bf64:	str	x0, [x21]
    bf68:	adrp	x0, b000 <lzma_filter_flags_decode@@XZ_5.0+0x240>
    bf6c:	add	x0, x0, #0xfe0
    bf70:	str	x0, [x21, #24]
    bf74:	adrp	x0, b000 <lzma_filter_flags_decode@@XZ_5.0+0x240>
    bf78:	add	x0, x0, #0xe40
    bf7c:	str	x0, [x21, #32]
    bf80:	adrp	x0, b000 <lzma_filter_flags_decode@@XZ_5.0+0x240>
    bf84:	add	x0, x0, #0xe00
    bf88:	str	x0, [x21, #48]
    bf8c:	adrp	x0, b000 <lzma_filter_flags_decode@@XZ_5.0+0x240>
    bf90:	add	x0, x0, #0xe08
    bf94:	str	x0, [x21, #56]
    bf98:	str	xzr, [x19, #8]
    bf9c:	mov	x0, #0xffffffffffffffff    	// #-1
    bfa0:	str	x0, [x19, #16]
    bfa4:	str	xzr, [x19, #24]
    bfa8:	str	xzr, [x19, #32]
    bfac:	str	xzr, [x19, #40]
    bfb0:	str	xzr, [x19, #48]
    bfb4:	str	xzr, [x19, #56]
    bfb8:	str	xzr, [x19, #64]
    bfbc:	str	xzr, [x19, #72]
    bfc0:	str	xzr, [x19, #344]
    bfc4:	b	becc <lzma_stream_buffer_decode@@XZ_5.0+0x2c8>
    bfc8:	mov	w24, #0x8                   	// #8
    bfcc:	b	bf2c <lzma_stream_buffer_decode@@XZ_5.0+0x328>
    bfd0:	mov	w24, #0x5                   	// #5
    bfd4:	b	bf2c <lzma_stream_buffer_decode@@XZ_5.0+0x328>
    bfd8:	mov	w24, #0x5                   	// #5
    bfdc:	b	bf2c <lzma_stream_buffer_decode@@XZ_5.0+0x328>
    bfe0:	sub	sp, sp, #0xe0
    bfe4:	stp	x29, x30, [sp, #16]
    bfe8:	add	x29, sp, #0x10
    bfec:	stp	x19, x20, [sp, #32]
    bff0:	stp	x21, x22, [sp, #48]
    bff4:	stp	x23, x24, [sp, #64]
    bff8:	stp	x25, x26, [sp, #80]
    bffc:	stp	x27, x28, [sp, #96]
    c000:	mov	x19, x0
    c004:	mov	x24, x1
    c008:	mov	x23, x2
    c00c:	mov	x21, x3
    c010:	mov	x22, x4
    c014:	str	x5, [sp, #120]
    c018:	str	x6, [sp, #128]
    c01c:	str	x7, [sp, #136]
    c020:	add	x27, x0, #0x180
    c024:	add	x28, x0, #0x178
    c028:	add	x26, sp, #0x90
    c02c:	add	x0, x0, #0x120
    c030:	str	x0, [sp, #112]
    c034:	ldr	w20, [x19]
    c038:	cmp	w20, #0x3
    c03c:	b.eq	c310 <lzma_stream_buffer_decode@@XZ_5.0+0x70c>  // b.none
    c040:	b.hi	c194 <lzma_stream_buffer_decode@@XZ_5.0+0x590>  // b.pmore
    c044:	cmp	w20, #0x1
    c048:	b.eq	c144 <lzma_stream_buffer_decode@@XZ_5.0+0x540>  // b.none
    c04c:	cmp	w20, #0x2
    c050:	b.ne	c0bc <lzma_stream_buffer_decode@@XZ_5.0+0x4b8>  // b.any
    c054:	ldr	w0, [sp, #224]
    c058:	str	w0, [sp]
    c05c:	ldr	x8, [x19, #32]
    c060:	ldr	x7, [sp, #136]
    c064:	ldr	x6, [sp, #128]
    c068:	ldr	x5, [sp, #120]
    c06c:	mov	x4, x22
    c070:	mov	x3, x21
    c074:	mov	x2, x23
    c078:	mov	x1, x24
    c07c:	ldr	x0, [x19, #8]
    c080:	blr	x8
    c084:	mov	w20, w0
    c088:	cmp	w0, #0x1
    c08c:	b.ne	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>  // b.any
    c090:	add	x0, x19, #0x50
    c094:	bl	3190 <lzma_block_unpadded_size@plt>
    c098:	ldr	x2, [x19, #104]
    c09c:	mov	x1, x0
    c0a0:	ldr	x0, [x19, #344]
    c0a4:	bl	31b0 <lzma_index_hash_append@plt>
    c0a8:	mov	w20, w0
    c0ac:	cbnz	w0, c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c0b0:	mov	w0, #0x1                   	// #1
    c0b4:	str	w0, [x19]
    c0b8:	b	c034 <lzma_stream_buffer_decode@@XZ_5.0+0x430>
    c0bc:	cbnz	w20, c16c <lzma_stream_buffer_decode@@XZ_5.0+0x568>
    c0c0:	mov	x5, #0xc                   	// #12
    c0c4:	mov	x4, x28
    c0c8:	mov	x3, x27
    c0cc:	mov	x2, x22
    c0d0:	mov	x1, x21
    c0d4:	mov	x0, x23
    c0d8:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
    c0dc:	ldr	x0, [x19, #376]
    c0e0:	cmp	x0, #0xb
    c0e4:	b.ls	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>  // b.plast
    c0e8:	str	xzr, [x19, #376]
    c0ec:	mov	x1, x27
    c0f0:	ldr	x0, [sp, #112]
    c0f4:	bl	34f0 <lzma_stream_header_decode@plt>
    c0f8:	mov	w20, w0
    c0fc:	cbnz	w0, c204 <lzma_stream_buffer_decode@@XZ_5.0+0x600>
    c100:	strb	wzr, [x19, #373]
    c104:	ldr	w0, [x19, #304]
    c108:	str	w0, [x19, #88]
    c10c:	mov	w1, #0x1                   	// #1
    c110:	str	w1, [x19]
    c114:	cmp	w0, #0x0
    c118:	cset	w2, eq  // eq = none
    c11c:	ldrb	w1, [x19, #368]
    c120:	tst	w2, w1
    c124:	b.ne	c420 <lzma_stream_buffer_decode@@XZ_5.0+0x81c>  // b.any
    c128:	ldrb	w1, [x19, #369]
    c12c:	cbz	w1, c13c <lzma_stream_buffer_decode@@XZ_5.0+0x538>
    c130:	bl	30e0 <lzma_check_is_supported@plt>
    c134:	and	w0, w0, #0xff
    c138:	cbz	w0, c428 <lzma_stream_buffer_decode@@XZ_5.0+0x824>
    c13c:	ldrb	w0, [x19, #370]
    c140:	cbnz	w0, c430 <lzma_stream_buffer_decode@@XZ_5.0+0x82c>
    c144:	ldr	x0, [x21]
    c148:	cmp	x0, x22
    c14c:	b.cs	c300 <lzma_stream_buffer_decode@@XZ_5.0+0x6fc>  // b.hs, b.nlast
    c150:	ldr	x1, [x19, #376]
    c154:	cbnz	x1, c22c <lzma_stream_buffer_decode@@XZ_5.0+0x628>
    c158:	ldrb	w0, [x23, x0]
    c15c:	cbnz	w0, c220 <lzma_stream_buffer_decode@@XZ_5.0+0x61c>
    c160:	mov	w0, #0x3                   	// #3
    c164:	str	w0, [x19]
    c168:	b	c034 <lzma_stream_buffer_decode@@XZ_5.0+0x430>
    c16c:	mov	w20, #0xb                   	// #11
    c170:	mov	w0, w20
    c174:	ldp	x19, x20, [sp, #32]
    c178:	ldp	x21, x22, [sp, #48]
    c17c:	ldp	x23, x24, [sp, #64]
    c180:	ldp	x25, x26, [sp, #80]
    c184:	ldp	x27, x28, [sp, #96]
    c188:	ldp	x29, x30, [sp, #16]
    c18c:	add	sp, sp, #0xe0
    c190:	ret
    c194:	cmp	w20, #0x4
    c198:	b.eq	c344 <lzma_stream_buffer_decode@@XZ_5.0+0x740>  // b.none
    c19c:	cmp	w20, #0x5
    c1a0:	b.ne	c1fc <lzma_stream_buffer_decode@@XZ_5.0+0x5f8>  // b.any
    c1a4:	ldr	x1, [x21]
    c1a8:	cmp	x22, x1
    c1ac:	b.ls	c1d8 <lzma_stream_buffer_decode@@XZ_5.0+0x5d4>  // b.plast
    c1b0:	ldrb	w0, [x23, x1]
    c1b4:	cbnz	w0, c3e8 <lzma_stream_buffer_decode@@XZ_5.0+0x7e4>
    c1b8:	add	x1, x1, #0x1
    c1bc:	str	x1, [x21]
    c1c0:	ldr	x0, [x19, #376]
    c1c4:	add	x0, x0, #0x1
    c1c8:	and	x0, x0, #0x3
    c1cc:	str	x0, [x19, #376]
    c1d0:	cmp	x1, x22
    c1d4:	b.ne	c1b0 <lzma_stream_buffer_decode@@XZ_5.0+0x5ac>  // b.any
    c1d8:	mov	w20, #0x0                   	// #0
    c1dc:	ldr	w0, [sp, #224]
    c1e0:	cmp	w0, #0x3
    c1e4:	b.ne	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>  // b.any
    c1e8:	ldr	x0, [x19, #376]
    c1ec:	cmp	x0, #0x0
    c1f0:	mov	w20, #0x9                   	// #9
    c1f4:	csinc	w20, w20, wzr, ne  // ne = any
    c1f8:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c1fc:	mov	w20, #0xb                   	// #11
    c200:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c204:	cmp	w0, #0x7
    c208:	b.ne	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>  // b.any
    c20c:	ldrb	w0, [x19, #373]
    c210:	cmp	w0, #0x0
    c214:	mov	w0, #0x9                   	// #9
    c218:	csel	w20, w20, w0, ne  // ne = any
    c21c:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c220:	add	w0, w0, #0x1
    c224:	lsl	w0, w0, #2
    c228:	str	w0, [x19, #84]
    c22c:	ldr	w5, [x19, #84]
    c230:	mov	x4, x28
    c234:	mov	x3, x27
    c238:	mov	x2, x22
    c23c:	mov	x1, x21
    c240:	mov	x0, x23
    c244:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
    c248:	ldr	w0, [x19, #84]
    c24c:	ldr	x1, [x19, #376]
    c250:	cmp	x1, x0
    c254:	b.cc	c308 <lzma_stream_buffer_decode@@XZ_5.0+0x704>  // b.lo, b.ul, b.last
    c258:	str	xzr, [x19, #376]
    c25c:	mov	w0, #0x1                   	// #1
    c260:	str	w0, [x19, #80]
    c264:	str	x26, [x19, #112]
    c268:	add	x25, x19, #0x50
    c26c:	mov	x2, x27
    c270:	mov	x1, x24
    c274:	mov	x0, x25
    c278:	bl	3340 <lzma_block_header_decode@plt>
    c27c:	mov	w20, w0
    c280:	cbnz	w0, c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c284:	ldrb	w0, [x19, #371]
    c288:	strb	w0, [x19, #280]
    c28c:	mov	x0, x26
    c290:	bl	32e0 <lzma_raw_decoder_memusage@plt>
    c294:	mov	w20, #0x8                   	// #8
    c298:	cmn	x0, #0x1
    c29c:	b.eq	c2b4 <lzma_stream_buffer_decode@@XZ_5.0+0x6b0>  // b.none
    c2a0:	str	x0, [x19, #360]
    c2a4:	ldr	x1, [x19, #352]
    c2a8:	mov	w20, #0x6                   	// #6
    c2ac:	cmp	x1, x0
    c2b0:	b.cs	c2e8 <lzma_stream_buffer_decode@@XZ_5.0+0x6e4>  // b.hs, b.nlast
    c2b4:	mov	x25, #0x0                   	// #0
    c2b8:	add	x0, x25, x26
    c2bc:	mov	x1, x24
    c2c0:	ldr	x0, [x0, #8]
    c2c4:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    c2c8:	add	x25, x25, #0x10
    c2cc:	cmp	x25, #0x40
    c2d0:	b.ne	c2b8 <lzma_stream_buffer_decode@@XZ_5.0+0x6b4>  // b.any
    c2d4:	str	xzr, [x19, #112]
    c2d8:	cbnz	w20, c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c2dc:	mov	w0, #0x2                   	// #2
    c2e0:	str	w0, [x19]
    c2e4:	b	c054 <lzma_stream_buffer_decode@@XZ_5.0+0x450>
    c2e8:	mov	x2, x25
    c2ec:	mov	x1, x24
    c2f0:	add	x0, x19, #0x8
    c2f4:	bl	a2dc <lzma_block_buffer_decode@@XZ_5.0+0x1a8>
    c2f8:	mov	w20, w0
    c2fc:	b	c2b4 <lzma_stream_buffer_decode@@XZ_5.0+0x6b0>
    c300:	mov	w20, #0x0                   	// #0
    c304:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c308:	mov	w20, #0x0                   	// #0
    c30c:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c310:	ldr	x0, [x21]
    c314:	cmp	x0, x22
    c318:	b.cs	c438 <lzma_stream_buffer_decode@@XZ_5.0+0x834>  // b.hs, b.nlast
    c31c:	mov	x3, x22
    c320:	mov	x2, x21
    c324:	mov	x1, x23
    c328:	ldr	x0, [x19, #344]
    c32c:	bl	3130 <lzma_index_hash_decode@plt>
    c330:	mov	w20, w0
    c334:	cmp	w0, #0x1
    c338:	b.ne	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>  // b.any
    c33c:	mov	w0, #0x4                   	// #4
    c340:	str	w0, [x19]
    c344:	mov	x5, #0xc                   	// #12
    c348:	mov	x4, x28
    c34c:	mov	x3, x27
    c350:	mov	x2, x22
    c354:	mov	x1, x21
    c358:	mov	x0, x23
    c35c:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
    c360:	ldr	x0, [x19, #376]
    c364:	cmp	x0, #0xb
    c368:	b.ls	c3d0 <lzma_stream_buffer_decode@@XZ_5.0+0x7cc>  // b.plast
    c36c:	str	xzr, [x19, #376]
    c370:	mov	x1, x27
    c374:	mov	x0, x26
    c378:	bl	3430 <lzma_stream_footer_decode@plt>
    c37c:	mov	w20, w0
    c380:	cbnz	w0, c3c0 <lzma_stream_buffer_decode@@XZ_5.0+0x7bc>
    c384:	ldr	x0, [x19, #344]
    c388:	bl	34d0 <lzma_index_hash_size@plt>
    c38c:	ldr	x1, [sp, #152]
    c390:	cmp	x0, x1
    c394:	b.ne	c3d8 <lzma_stream_buffer_decode@@XZ_5.0+0x7d4>  // b.any
    c398:	mov	x1, x26
    c39c:	ldr	x0, [sp, #112]
    c3a0:	bl	3110 <lzma_stream_flags_compare@plt>
    c3a4:	mov	w20, w0
    c3a8:	cbnz	w0, c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c3ac:	ldrb	w0, [x19, #372]
    c3b0:	cbz	w0, c3e0 <lzma_stream_buffer_decode@@XZ_5.0+0x7dc>
    c3b4:	mov	w0, #0x5                   	// #5
    c3b8:	str	w0, [x19]
    c3bc:	b	c1a4 <lzma_stream_buffer_decode@@XZ_5.0+0x5a0>
    c3c0:	cmp	w0, #0x7
    c3c4:	mov	w0, #0x9                   	// #9
    c3c8:	csel	w20, w20, w0, ne  // ne = any
    c3cc:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c3d0:	mov	w20, #0x0                   	// #0
    c3d4:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c3d8:	mov	w20, #0x9                   	// #9
    c3dc:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c3e0:	mov	w20, #0x1                   	// #1
    c3e4:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c3e8:	ldr	x0, [x19, #376]
    c3ec:	cbnz	x0, c410 <lzma_stream_buffer_decode@@XZ_5.0+0x80c>
    c3f0:	mov	x1, x24
    c3f4:	ldr	x0, [x19, #344]
    c3f8:	bl	3280 <lzma_index_hash_init@plt>
    c3fc:	str	x0, [x19, #344]
    c400:	cbz	x0, c440 <lzma_stream_buffer_decode@@XZ_5.0+0x83c>
    c404:	str	wzr, [x19]
    c408:	str	xzr, [x19, #376]
    c40c:	b	c034 <lzma_stream_buffer_decode@@XZ_5.0+0x430>
    c410:	add	x1, x1, #0x1
    c414:	str	x1, [x21]
    c418:	mov	w20, #0x9                   	// #9
    c41c:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c420:	mov	w20, #0x2                   	// #2
    c424:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c428:	mov	w20, #0x3                   	// #3
    c42c:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c430:	mov	w20, #0x4                   	// #4
    c434:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c438:	mov	w20, #0x0                   	// #0
    c43c:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>
    c440:	mov	w20, #0x5                   	// #5
    c444:	b	c170 <lzma_stream_buffer_decode@@XZ_5.0+0x56c>

000000000000c448 <lzma_stream_decoder@@XZ_5.0>:
    c448:	stp	x29, x30, [sp, #-48]!
    c44c:	mov	x29, sp
    c450:	stp	x19, x20, [sp, #16]
    c454:	stp	x21, x22, [sp, #32]
    c458:	mov	x20, x0
    c45c:	mov	x21, x1
    c460:	mov	w22, w2
    c464:	bl	3950 <lzma_version_string@@XZ_5.0+0x288>
    c468:	mov	w19, w0
    c46c:	cbz	w0, c484 <lzma_stream_decoder@@XZ_5.0+0x3c>
    c470:	mov	w0, w19
    c474:	ldp	x19, x20, [sp, #16]
    c478:	ldp	x21, x22, [sp, #32]
    c47c:	ldp	x29, x30, [sp], #48
    c480:	ret
    c484:	mov	w3, w22
    c488:	mov	x2, x21
    c48c:	ldr	x1, [x20, #48]
    c490:	ldr	x0, [x20, #56]
    c494:	bl	be80 <lzma_stream_buffer_decode@@XZ_5.0+0x27c>
    c498:	mov	w19, w0
    c49c:	cbnz	w0, c4b8 <lzma_stream_decoder@@XZ_5.0+0x70>
    c4a0:	ldr	x1, [x20, #56]
    c4a4:	mov	w0, #0x1                   	// #1
    c4a8:	strb	w0, [x1, #88]
    c4ac:	ldr	x1, [x20, #56]
    c4b0:	strb	w0, [x1, #91]
    c4b4:	b	c470 <lzma_stream_decoder@@XZ_5.0+0x28>
    c4b8:	mov	x0, x20
    c4bc:	bl	3320 <lzma_end@plt>
    c4c0:	b	c470 <lzma_stream_decoder@@XZ_5.0+0x28>

000000000000c4c4 <lzma_stream_header_decode@@XZ_5.0>:
    c4c4:	stp	x29, x30, [sp, #-32]!
    c4c8:	mov	x29, sp
    c4cc:	stp	x19, x20, [sp, #16]
    c4d0:	mov	x20, x0
    c4d4:	mov	x19, x1
    c4d8:	mov	x2, #0x6                   	// #6
    c4dc:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    c4e0:	ldr	x1, [x1, #3936]
    c4e4:	mov	x0, x19
    c4e8:	bl	3330 <memcmp@plt>
    c4ec:	cbnz	w0, c574 <lzma_stream_header_decode@@XZ_5.0+0xb0>
    c4f0:	mov	w2, #0x0                   	// #0
    c4f4:	mov	x1, #0x2                   	// #2
    c4f8:	add	x0, x19, #0x6
    c4fc:	bl	31c0 <lzma_crc32@plt>
    c500:	mov	w4, w0
    c504:	ldrb	w1, [x19, #11]
    c508:	ldrb	w2, [x19, #8]
    c50c:	orr	w2, w2, w1, lsl #24
    c510:	ldrb	w1, [x19, #9]
    c514:	ldrb	w3, [x19, #10]
    c518:	lsl	w3, w3, #16
    c51c:	orr	w1, w3, w1, lsl #8
    c520:	orr	w1, w1, w2
    c524:	mov	w0, #0x9                   	// #9
    c528:	cmp	w4, w1
    c52c:	b.eq	c53c <lzma_stream_header_decode@@XZ_5.0+0x78>  // b.none
    c530:	ldp	x19, x20, [sp, #16]
    c534:	ldp	x29, x30, [sp], #32
    c538:	ret
    c53c:	ldrb	w1, [x19, #6]
    c540:	mov	w0, #0x8                   	// #8
    c544:	cbnz	w1, c530 <lzma_stream_header_decode@@XZ_5.0+0x6c>
    c548:	ldrb	w1, [x19, #7]
    c54c:	tst	w1, #0xf0
    c550:	b.ne	c530 <lzma_stream_header_decode@@XZ_5.0+0x6c>  // b.any
    c554:	str	wzr, [x20]
    c558:	ldrb	w0, [x19, #7]
    c55c:	and	w0, w0, #0xf
    c560:	str	w0, [x20, #16]
    c564:	mov	x0, #0xffffffffffffffff    	// #-1
    c568:	str	x0, [x20, #8]
    c56c:	mov	w0, #0x0                   	// #0
    c570:	b	c530 <lzma_stream_header_decode@@XZ_5.0+0x6c>
    c574:	mov	w0, #0x7                   	// #7
    c578:	b	c530 <lzma_stream_header_decode@@XZ_5.0+0x6c>

000000000000c57c <lzma_stream_footer_decode@@XZ_5.0>:
    c57c:	stp	x29, x30, [sp, #-32]!
    c580:	mov	x29, sp
    c584:	stp	x19, x20, [sp, #16]
    c588:	mov	x20, x0
    c58c:	mov	x19, x1
    c590:	mov	x2, #0x2                   	// #2
    c594:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    c598:	ldr	x1, [x1, #3976]
    c59c:	add	x0, x19, #0xa
    c5a0:	bl	3330 <memcmp@plt>
    c5a4:	cbnz	w0, c650 <lzma_stream_footer_decode@@XZ_5.0+0xd4>
    c5a8:	mov	w2, #0x0                   	// #0
    c5ac:	mov	x1, #0x6                   	// #6
    c5b0:	add	x0, x19, #0x4
    c5b4:	bl	31c0 <lzma_crc32@plt>
    c5b8:	mov	w4, w0
    c5bc:	ldrb	w1, [x19, #3]
    c5c0:	ldrb	w2, [x19]
    c5c4:	orr	w2, w2, w1, lsl #24
    c5c8:	ldrb	w1, [x19, #1]
    c5cc:	ldrb	w3, [x19, #2]
    c5d0:	lsl	w3, w3, #16
    c5d4:	orr	w1, w3, w1, lsl #8
    c5d8:	orr	w1, w1, w2
    c5dc:	mov	w0, #0x9                   	// #9
    c5e0:	cmp	w4, w1
    c5e4:	b.eq	c5f4 <lzma_stream_footer_decode@@XZ_5.0+0x78>  // b.none
    c5e8:	ldp	x19, x20, [sp, #16]
    c5ec:	ldp	x29, x30, [sp], #32
    c5f0:	ret
    c5f4:	ldrb	w1, [x19, #8]
    c5f8:	mov	w0, #0x8                   	// #8
    c5fc:	cbnz	w1, c5e8 <lzma_stream_footer_decode@@XZ_5.0+0x6c>
    c600:	ldrb	w1, [x19, #9]
    c604:	tst	w1, #0xf0
    c608:	b.ne	c5e8 <lzma_stream_footer_decode@@XZ_5.0+0x6c>  // b.any
    c60c:	str	wzr, [x20]
    c610:	ldrb	w0, [x19, #9]
    c614:	and	w0, w0, #0xf
    c618:	str	w0, [x20, #16]
    c61c:	ldrb	w0, [x19, #7]
    c620:	ldrb	w1, [x19, #4]
    c624:	orr	w1, w1, w0, lsl #24
    c628:	ldrb	w0, [x19, #5]
    c62c:	ldrb	w2, [x19, #6]
    c630:	lsl	w2, w2, #16
    c634:	orr	w0, w2, w0, lsl #8
    c638:	orr	w0, w0, w1
    c63c:	add	x0, x0, #0x1
    c640:	lsl	x0, x0, #2
    c644:	str	x0, [x20, #8]
    c648:	mov	w0, #0x0                   	// #0
    c64c:	b	c5e8 <lzma_stream_footer_decode@@XZ_5.0+0x6c>
    c650:	mov	w0, #0x7                   	// #7
    c654:	b	c5e8 <lzma_stream_footer_decode@@XZ_5.0+0x6c>

000000000000c658 <lzma_vli_decode@@XZ_5.0>:
    c658:	sub	sp, sp, #0x10
    c65c:	mov	x11, x0
    c660:	str	xzr, [sp, #8]
    c664:	cbz	x1, c6e8 <lzma_vli_decode@@XZ_5.0+0x90>
    c668:	ldr	x5, [x1]
    c66c:	cbnz	x5, c704 <lzma_vli_decode@@XZ_5.0+0xac>
    c670:	str	xzr, [x0]
    c674:	ldr	x5, [x3]
    c678:	mov	w0, #0xa                   	// #10
    c67c:	cmp	x5, x4
    c680:	b.cs	c768 <lzma_vli_decode@@XZ_5.0+0x110>  // b.hs, b.nlast
    c684:	ldr	x5, [x3]
    c688:	ldr	x10, [x11]
    c68c:	ldr	x7, [x1]
    c690:	lsl	w8, w7, #3
    c694:	sub	w8, w8, w7
    c698:	ldrb	w9, [x2, x5]
    c69c:	add	x5, x5, #0x1
    c6a0:	and	x6, x9, #0x7f
    c6a4:	lsl	x6, x6, x8
    c6a8:	add	x10, x10, x6
    c6ac:	add	x7, x7, #0x1
    c6b0:	tbz	w9, #7, c72c <lzma_vli_decode@@XZ_5.0+0xd4>
    c6b4:	cmp	x7, #0x9
    c6b8:	b.eq	c758 <lzma_vli_decode@@XZ_5.0+0x100>  // b.none
    c6bc:	add	w8, w8, #0x7
    c6c0:	cmp	x5, x4
    c6c4:	b.cc	c698 <lzma_vli_decode@@XZ_5.0+0x40>  // b.lo, b.ul, b.last
    c6c8:	str	x5, [x3]
    c6cc:	str	x10, [x11]
    c6d0:	str	x7, [x1]
    c6d4:	add	x0, sp, #0x8
    c6d8:	cmp	x1, x0
    c6dc:	mov	w0, #0x9                   	// #9
    c6e0:	csel	w0, w0, wzr, eq  // eq = none
    c6e4:	b	c768 <lzma_vli_decode@@XZ_5.0+0x110>
    c6e8:	str	xzr, [x0]
    c6ec:	ldr	x1, [x3]
    c6f0:	mov	w0, #0x9                   	// #9
    c6f4:	cmp	x1, x4
    c6f8:	b.cs	c768 <lzma_vli_decode@@XZ_5.0+0x110>  // b.hs, b.nlast
    c6fc:	add	x1, sp, #0x8
    c700:	b	c684 <lzma_vli_decode@@XZ_5.0+0x2c>
    c704:	mov	w0, #0xb                   	// #11
    c708:	cmp	x5, #0x8
    c70c:	b.hi	c768 <lzma_vli_decode@@XZ_5.0+0x110>  // b.pmore
    c710:	lsl	w0, w5, #3
    c714:	sub	w0, w0, w5
    c718:	ldr	x5, [x11]
    c71c:	lsr	x5, x5, x0
    c720:	mov	w0, #0xb                   	// #11
    c724:	cbnz	x5, c768 <lzma_vli_decode@@XZ_5.0+0x110>
    c728:	b	c674 <lzma_vli_decode@@XZ_5.0+0x1c>
    c72c:	str	x5, [x3]
    c730:	str	x10, [x11]
    c734:	str	x7, [x1]
    c738:	cmp	w9, #0x0
    c73c:	mov	w0, #0x9                   	// #9
    c740:	ccmp	x7, #0x1, #0x0, eq  // eq = none
    c744:	b.hi	c768 <lzma_vli_decode@@XZ_5.0+0x110>  // b.pmore
    c748:	add	x0, sp, #0x8
    c74c:	cmp	x1, x0
    c750:	cset	w0, ne  // ne = any
    c754:	b	c768 <lzma_vli_decode@@XZ_5.0+0x110>
    c758:	str	x5, [x3]
    c75c:	str	x10, [x11]
    c760:	mov	x0, #0x9                   	// #9
    c764:	str	x0, [x1]
    c768:	add	sp, sp, #0x10
    c76c:	ret

000000000000c770 <lzma_check_is_supported@@XZ_5.0>:
    c770:	cmp	w0, #0xf
    c774:	b.hi	c788 <lzma_check_is_supported@@XZ_5.0+0x18>  // b.pmore
    c778:	adrp	x1, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7a70>
    c77c:	add	x1, x1, #0x5f8
    c780:	ldrb	w0, [x1, w0, uxtw]
    c784:	ret
    c788:	mov	w0, #0x0                   	// #0
    c78c:	b	c784 <lzma_check_is_supported@@XZ_5.0+0x14>

000000000000c790 <lzma_check_size@@XZ_5.0>:
    c790:	cmp	w0, #0xf
    c794:	b.hi	c7ac <lzma_check_size@@XZ_5.0+0x1c>  // b.pmore
    c798:	adrp	x1, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7a70>
    c79c:	add	x1, x1, #0x5f8
    c7a0:	add	x0, x1, w0, uxtw
    c7a4:	ldrb	w0, [x0, #16]
    c7a8:	ret
    c7ac:	mov	w0, #0xffffffff            	// #-1
    c7b0:	b	c7a8 <lzma_check_size@@XZ_5.0+0x18>
    c7b4:	cmp	w1, #0x4
    c7b8:	b.eq	c7d8 <lzma_check_size@@XZ_5.0+0x48>  // b.none
    c7bc:	cmp	w1, #0xa
    c7c0:	b.eq	c7e0 <lzma_check_size@@XZ_5.0+0x50>  // b.none
    c7c4:	cmp	w1, #0x1
    c7c8:	b.eq	c7d0 <lzma_check_size@@XZ_5.0+0x40>  // b.none
    c7cc:	ret
    c7d0:	str	wzr, [x0, #64]
    c7d4:	ret
    c7d8:	str	xzr, [x0, #64]
    c7dc:	ret
    c7e0:	stp	x29, x30, [sp, #-16]!
    c7e4:	mov	x29, sp
    c7e8:	bl	d934 <lzma_crc64@@XZ_5.0+0xf58>
    c7ec:	ldp	x29, x30, [sp], #16
    c7f0:	ret
    c7f4:	stp	x29, x30, [sp, #-32]!
    c7f8:	mov	x29, sp
    c7fc:	str	x19, [sp, #16]
    c800:	mov	x19, x0
    c804:	mov	w4, w1
    c808:	mov	x0, x2
    c80c:	mov	x1, x3
    c810:	cmp	w4, #0x4
    c814:	b.eq	c844 <lzma_check_size@@XZ_5.0+0xb4>  // b.none
    c818:	cmp	w4, #0xa
    c81c:	b.eq	c854 <lzma_check_size@@XZ_5.0+0xc4>  // b.none
    c820:	cmp	w4, #0x1
    c824:	b.eq	c834 <lzma_check_size@@XZ_5.0+0xa4>  // b.none
    c828:	ldr	x19, [sp, #16]
    c82c:	ldp	x29, x30, [sp], #32
    c830:	ret
    c834:	ldr	w2, [x19, #64]
    c838:	bl	31c0 <lzma_crc32@plt>
    c83c:	str	w0, [x19, #64]
    c840:	b	c828 <lzma_check_size@@XZ_5.0+0x98>
    c844:	ldr	x2, [x19, #64]
    c848:	bl	3290 <lzma_crc64@plt>
    c84c:	str	x0, [x19, #64]
    c850:	b	c828 <lzma_check_size@@XZ_5.0+0x98>
    c854:	mov	x2, x19
    c858:	bl	d954 <lzma_crc64@@XZ_5.0+0xf78>
    c85c:	b	c828 <lzma_check_size@@XZ_5.0+0x98>
    c860:	cmp	w1, #0x4
    c864:	b.eq	c888 <lzma_check_size@@XZ_5.0+0xf8>  // b.none
    c868:	cmp	w1, #0xa
    c86c:	b.eq	c894 <lzma_check_size@@XZ_5.0+0x104>  // b.none
    c870:	cmp	w1, #0x1
    c874:	b.eq	c87c <lzma_check_size@@XZ_5.0+0xec>  // b.none
    c878:	ret
    c87c:	ldr	w1, [x0, #64]
    c880:	str	w1, [x0]
    c884:	ret
    c888:	ldr	x1, [x0, #64]
    c88c:	str	x1, [x0]
    c890:	ret
    c894:	stp	x29, x30, [sp, #-16]!
    c898:	mov	x29, sp
    c89c:	bl	d9f0 <lzma_crc64@@XZ_5.0+0x1014>
    c8a0:	ldp	x29, x30, [sp], #16
    c8a4:	ret

000000000000c8a8 <lzma_crc32@@XZ_5.0>:
    c8a8:	mvn	w2, w2
    c8ac:	cmp	x1, #0x8
    c8b0:	b.hi	c8e8 <lzma_crc32@@XZ_5.0+0x40>  // b.pmore
    c8b4:	add	x4, x0, x1
    c8b8:	adrp	x3, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    c8bc:	ldr	x3, [x3, #3952]
    c8c0:	cbz	x1, c8e0 <lzma_crc32@@XZ_5.0+0x38>
    c8c4:	ldrb	w1, [x0], #1
    c8c8:	eor	x1, x2, x1
    c8cc:	and	x1, x1, #0xff
    c8d0:	ldr	w1, [x3, x1, lsl #2]
    c8d4:	eor	w2, w1, w2, lsr #8
    c8d8:	cmp	x4, x0
    c8dc:	b.ne	c8c4 <lzma_crc32@@XZ_5.0+0x1c>  // b.any
    c8e0:	mvn	w0, w2
    c8e4:	ret
    c8e8:	tst	x0, #0x7
    c8ec:	b.eq	c91c <lzma_crc32@@XZ_5.0+0x74>  // b.none
    c8f0:	adrp	x5, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    c8f4:	ldr	x5, [x5, #3952]
    c8f8:	add	x4, x1, x0
    c8fc:	ldrb	w1, [x0], #1
    c900:	eor	x1, x2, x1
    c904:	and	x1, x1, #0xff
    c908:	ldr	w3, [x5, x1, lsl #2]
    c90c:	eor	w2, w3, w2, lsr #8
    c910:	sub	x1, x4, x0
    c914:	tst	x0, #0x7
    c918:	b.ne	c8fc <lzma_crc32@@XZ_5.0+0x54>  // b.any
    c91c:	and	x9, x1, #0xfffffffffffffff8
    c920:	add	x9, x0, x9
    c924:	and	x1, x1, #0x7
    c928:	cmp	x9, x0
    c92c:	b.ls	c8b4 <lzma_crc32@@XZ_5.0+0xc>  // b.plast
    c930:	mov	x6, x0
    c934:	adrp	x4, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    c938:	ldr	x4, [x4, #3952]
    c93c:	ldr	w3, [x6]
    c940:	eor	w2, w2, w3
    c944:	ubfx	x5, x2, #8, #8
    c948:	add	x5, x5, #0x600
    c94c:	ubfx	x3, x2, #16, #8
    c950:	add	x3, x3, #0x500
    c954:	ldr	w7, [x4, x5, lsl #2]
    c958:	ldr	w3, [x4, x3, lsl #2]
    c95c:	eor	w7, w7, w3
    c960:	ldr	w3, [x6, #4]
    c964:	add	x6, x6, #0x8
    c968:	add	x5, x4, w3, uxtb #2
    c96c:	lsr	w8, w3, #24
    c970:	ldr	w5, [x5, #3072]
    c974:	ldr	w8, [x4, x8, lsl #2]
    c978:	eor	w5, w5, w8
    c97c:	add	x8, x4, w2, uxtb #2
    c980:	lsr	w2, w2, #24
    c984:	add	x2, x2, #0x400
    c988:	ldr	w8, [x8, #7168]
    c98c:	ldr	w2, [x4, x2, lsl #2]
    c990:	eor	w2, w8, w2
    c994:	eor	w2, w5, w2
    c998:	ubfx	x5, x3, #8, #8
    c99c:	add	x5, x5, #0x200
    c9a0:	ubfx	x3, x3, #16, #8
    c9a4:	add	x3, x3, #0x100
    c9a8:	ldr	w5, [x4, x5, lsl #2]
    c9ac:	ldr	w3, [x4, x3, lsl #2]
    c9b0:	eor	w3, w5, w3
    c9b4:	eor	w2, w2, w3
    c9b8:	eor	w2, w2, w7
    c9bc:	cmp	x9, x6
    c9c0:	b.hi	c93c <lzma_crc32@@XZ_5.0+0x94>  // b.pmore
    c9c4:	mvn	x3, x0
    c9c8:	add	x3, x9, x3
    c9cc:	and	x3, x3, #0xfffffffffffffff8
    c9d0:	add	x3, x3, #0x8
    c9d4:	add	x0, x0, x3
    c9d8:	b	c8b4 <lzma_crc32@@XZ_5.0+0xc>

000000000000c9dc <lzma_crc64@@XZ_5.0>:
    c9dc:	mvn	x2, x2
    c9e0:	cmp	x1, #0x4
    c9e4:	b.hi	ca1c <lzma_crc64@@XZ_5.0+0x40>  // b.pmore
    c9e8:	add	x5, x0, x1
    c9ec:	adrp	x4, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    c9f0:	ldr	x4, [x4, #3984]
    c9f4:	cbz	x1, ca14 <lzma_crc64@@XZ_5.0+0x38>
    c9f8:	ldrb	w1, [x0], #1
    c9fc:	and	x3, x2, #0xff
    ca00:	eor	x1, x1, x3
    ca04:	ldr	x1, [x4, x1, lsl #3]
    ca08:	eor	x2, x1, x2, lsr #8
    ca0c:	cmp	x5, x0
    ca10:	b.ne	c9f8 <lzma_crc64@@XZ_5.0+0x1c>  // b.any
    ca14:	mvn	x0, x2
    ca18:	ret
    ca1c:	tst	x0, #0x3
    ca20:	b.eq	ca50 <lzma_crc64@@XZ_5.0+0x74>  // b.none
    ca24:	adrp	x5, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    ca28:	ldr	x5, [x5, #3984]
    ca2c:	add	x4, x1, x0
    ca30:	ldrb	w1, [x0], #1
    ca34:	and	x3, x2, #0xff
    ca38:	eor	x1, x1, x3
    ca3c:	ldr	x3, [x5, x1, lsl #3]
    ca40:	eor	x2, x3, x2, lsr #8
    ca44:	sub	x1, x4, x0
    ca48:	tst	x0, #0x3
    ca4c:	b.ne	ca30 <lzma_crc64@@XZ_5.0+0x54>  // b.any
    ca50:	and	x8, x1, #0xfffffffffffffffc
    ca54:	add	x8, x0, x8
    ca58:	and	x1, x1, #0x3
    ca5c:	cmp	x8, x0
    ca60:	b.ls	c9e8 <lzma_crc64@@XZ_5.0+0xc>  // b.plast
    ca64:	mov	x7, x0
    ca68:	adrp	x5, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    ca6c:	ldr	x5, [x5, #3984]
    ca70:	ldr	w3, [x7], #4
    ca74:	eor	w3, w3, w2
    ca78:	ubfx	x4, x3, #8, #8
    ca7c:	add	x4, x4, #0x200
    ca80:	ubfx	x6, x3, #16, #8
    ca84:	add	x6, x6, #0x100
    ca88:	ldr	x4, [x5, x4, lsl #3]
    ca8c:	ldr	x6, [x5, x6, lsl #3]
    ca90:	eor	x4, x4, x6
    ca94:	add	x6, x5, w3, uxtb #3
    ca98:	lsr	w3, w3, #24
    ca9c:	ldr	x6, [x6, #6144]
    caa0:	ldr	x3, [x5, x3, lsl #3]
    caa4:	eor	x3, x6, x3
    caa8:	eor	x3, x4, x3
    caac:	eor	x2, x3, x2, lsr #32
    cab0:	cmp	x8, x7
    cab4:	b.hi	ca70 <lzma_crc64@@XZ_5.0+0x94>  // b.pmore
    cab8:	mvn	x3, x0
    cabc:	add	x3, x8, x3
    cac0:	and	x3, x3, #0xfffffffffffffffc
    cac4:	add	x3, x3, #0x4
    cac8:	add	x0, x0, x3
    cacc:	b	c9e8 <lzma_crc64@@XZ_5.0+0xc>
    cad0:	stp	x29, x30, [sp, #-128]!
    cad4:	mov	x29, sp
    cad8:	stp	x19, x20, [sp, #16]
    cadc:	stp	x21, x22, [sp, #32]
    cae0:	stp	x23, x24, [sp, #48]
    cae4:	stp	x25, x26, [sp, #64]
    cae8:	stp	x27, x28, [sp, #80]
    caec:	ldp	x2, x3, [x0]
    caf0:	stp	x2, x3, [sp, #96]
    caf4:	ldr	x3, [x0, #16]
    caf8:	ldr	x2, [x0, #24]
    cafc:	str	x3, [sp, #112]
    cb00:	str	x2, [sp, #120]
    cb04:	ldr	w7, [sp, #120]
    cb08:	ldr	w12, [sp, #116]
    cb0c:	ldr	w19, [x1]
    cb10:	rev	w19, w19
    cb14:	eor	w5, w3, w3, ror #14
    cb18:	eor	w5, w3, w5, ror #5
    cb1c:	ror	w5, w5, #6
    cb20:	eor	w2, w7, w12
    cb24:	and	w2, w2, w3
    cb28:	eor	w2, w2, w7
    cb2c:	add	w5, w5, w2
    cb30:	ldr	w6, [sp, #124]
    cb34:	mov	w2, #0x2f98                	// #12184
    cb38:	movk	w2, #0x428a, lsl #16
    cb3c:	add	w6, w6, w2
    cb40:	add	w5, w5, w6
    cb44:	add	w5, w5, w19
    cb48:	ldr	w9, [sp, #108]
    cb4c:	add	w11, w5, w9
    cb50:	ldr	w2, [sp, #96]
    cb54:	ldr	w8, [sp, #100]
    cb58:	ldr	w9, [sp, #104]
    cb5c:	eor	w6, w2, w2, ror #9
    cb60:	eor	w6, w2, w6, ror #11
    cb64:	ror	w6, w6, #2
    cb68:	add	w5, w6, w5
    cb6c:	eor	w6, w8, w9
    cb70:	and	w6, w6, w2
    cb74:	and	w4, w8, w9
    cb78:	add	w6, w6, w4
    cb7c:	add	w6, w5, w6
    cb80:	ldr	w30, [x1, #4]
    cb84:	rev	w30, w30
    cb88:	eor	w4, w3, w12
    cb8c:	and	w4, w4, w11
    cb90:	eor	w4, w4, w12
    cb94:	add	w4, w4, w30
    cb98:	mov	w5, #0x4491                	// #17553
    cb9c:	movk	w5, #0x7137, lsl #16
    cba0:	add	w7, w7, w5
    cba4:	add	w4, w4, w7
    cba8:	eor	w5, w11, w11, ror #14
    cbac:	eor	w5, w11, w5, ror #5
    cbb0:	ror	w5, w5, #6
    cbb4:	add	w4, w4, w5
    cbb8:	add	w10, w9, w4
    cbbc:	eor	w5, w6, w6, ror #9
    cbc0:	eor	w5, w6, w5, ror #11
    cbc4:	ror	w5, w5, #2
    cbc8:	add	w4, w5, w4
    cbcc:	eor	w5, w2, w8
    cbd0:	and	w5, w5, w6
    cbd4:	and	w7, w2, w8
    cbd8:	add	w5, w5, w7
    cbdc:	add	w5, w4, w5
    cbe0:	ldr	w18, [x1, #8]
    cbe4:	rev	w18, w18
    cbe8:	eor	w7, w3, w11
    cbec:	and	w7, w7, w10
    cbf0:	eor	w7, w7, w3
    cbf4:	add	w7, w7, w18
    cbf8:	mov	w4, #0xfbcf                	// #64463
    cbfc:	movk	w4, #0xb5c0, lsl #16
    cc00:	add	w12, w12, w4
    cc04:	add	w7, w7, w12
    cc08:	eor	w4, w10, w10, ror #14
    cc0c:	eor	w4, w10, w4, ror #5
    cc10:	ror	w4, w4, #6
    cc14:	add	w7, w7, w4
    cc18:	add	w8, w8, w7
    cc1c:	eor	w4, w5, w5, ror #9
    cc20:	eor	w4, w5, w4, ror #11
    cc24:	ror	w4, w4, #2
    cc28:	add	w7, w4, w7
    cc2c:	eor	w4, w2, w6
    cc30:	and	w4, w4, w5
    cc34:	and	w9, w2, w6
    cc38:	add	w4, w4, w9
    cc3c:	add	w4, w7, w4
    cc40:	ldr	w17, [x1, #12]
    cc44:	rev	w17, w17
    cc48:	eor	w7, w11, w10
    cc4c:	and	w7, w7, w8
    cc50:	eor	w7, w7, w11
    cc54:	add	w7, w7, w17
    cc58:	mov	w9, #0xdba5                	// #56229
    cc5c:	movk	w9, #0xe9b5, lsl #16
    cc60:	add	w3, w3, w9
    cc64:	add	w3, w7, w3
    cc68:	eor	w7, w8, w8, ror #14
    cc6c:	eor	w7, w8, w7, ror #5
    cc70:	ror	w7, w7, #6
    cc74:	add	w3, w3, w7
    cc78:	add	w2, w2, w3
    cc7c:	eor	w7, w4, w4, ror #9
    cc80:	eor	w7, w4, w7, ror #11
    cc84:	ror	w7, w7, #2
    cc88:	add	w3, w7, w3
    cc8c:	eor	w7, w6, w5
    cc90:	and	w7, w7, w4
    cc94:	and	w9, w6, w5
    cc98:	add	w7, w7, w9
    cc9c:	add	w3, w3, w7
    cca0:	ldr	w16, [x1, #16]
    cca4:	rev	w16, w16
    cca8:	eor	w9, w10, w8
    ccac:	and	w9, w9, w2
    ccb0:	eor	w9, w9, w10
    ccb4:	add	w9, w9, w11
    ccb8:	mov	w11, #0xc25b                	// #49755
    ccbc:	movk	w11, #0x3956, lsl #16
    ccc0:	add	w11, w16, w11
    ccc4:	add	w9, w9, w11
    ccc8:	eor	w11, w2, w2, ror #14
    cccc:	eor	w11, w2, w11, ror #5
    ccd0:	ror	w11, w11, #6
    ccd4:	add	w9, w9, w11
    ccd8:	add	w7, w6, w9
    ccdc:	eor	w11, w3, w3, ror #9
    cce0:	eor	w11, w3, w11, ror #11
    cce4:	ror	w11, w11, #2
    cce8:	add	w9, w11, w9
    ccec:	eor	w11, w5, w4
    ccf0:	and	w11, w11, w3
    ccf4:	and	w6, w5, w4
    ccf8:	add	w11, w11, w6
    ccfc:	add	w11, w9, w11
    cd00:	ldr	w15, [x1, #20]
    cd04:	rev	w15, w15
    cd08:	eor	w9, w8, w2
    cd0c:	and	w9, w9, w7
    cd10:	eor	w9, w9, w8
    cd14:	add	w9, w9, w10
    cd18:	mov	w10, #0x11f1                	// #4593
    cd1c:	movk	w10, #0x59f1, lsl #16
    cd20:	add	w10, w15, w10
    cd24:	add	w9, w9, w10
    cd28:	eor	w10, w7, w7, ror #14
    cd2c:	eor	w10, w7, w10, ror #5
    cd30:	ror	w10, w10, #6
    cd34:	add	w9, w9, w10
    cd38:	add	w6, w5, w9
    cd3c:	eor	w10, w11, w11, ror #9
    cd40:	eor	w10, w11, w10, ror #11
    cd44:	ror	w10, w10, #2
    cd48:	add	w9, w10, w9
    cd4c:	eor	w10, w4, w3
    cd50:	and	w10, w10, w11
    cd54:	and	w5, w4, w3
    cd58:	add	w10, w10, w5
    cd5c:	add	w10, w9, w10
    cd60:	ldr	w14, [x1, #24]
    cd64:	rev	w14, w14
    cd68:	eor	w5, w2, w7
    cd6c:	and	w5, w5, w6
    cd70:	eor	w5, w5, w2
    cd74:	add	w8, w5, w8
    cd78:	mov	w9, #0x82a4                	// #33444
    cd7c:	movk	w9, #0x923f, lsl #16
    cd80:	add	w9, w14, w9
    cd84:	add	w8, w8, w9
    cd88:	eor	w9, w6, w6, ror #14
    cd8c:	eor	w9, w6, w9, ror #5
    cd90:	ror	w9, w9, #6
    cd94:	add	w8, w8, w9
    cd98:	add	w4, w4, w8
    cd9c:	eor	w9, w10, w10, ror #9
    cda0:	eor	w9, w10, w9, ror #11
    cda4:	ror	w9, w9, #2
    cda8:	add	w8, w9, w8
    cdac:	eor	w9, w3, w11
    cdb0:	and	w9, w9, w10
    cdb4:	and	w5, w3, w11
    cdb8:	add	w9, w9, w5
    cdbc:	add	w9, w8, w9
    cdc0:	ldr	w22, [x1, #28]
    cdc4:	rev	w22, w22
    cdc8:	eor	w5, w7, w6
    cdcc:	and	w5, w5, w4
    cdd0:	eor	w5, w5, w7
    cdd4:	add	w2, w5, w2
    cdd8:	mov	w8, #0x5ed5                	// #24277
    cddc:	movk	w8, #0xab1c, lsl #16
    cde0:	add	w8, w22, w8
    cde4:	add	w2, w2, w8
    cde8:	eor	w8, w4, w4, ror #14
    cdec:	eor	w8, w4, w8, ror #5
    cdf0:	ror	w8, w8, #6
    cdf4:	add	w2, w2, w8
    cdf8:	add	w5, w3, w2
    cdfc:	eor	w8, w9, w9, ror #9
    ce00:	eor	w8, w9, w8, ror #11
    ce04:	ror	w8, w8, #2
    ce08:	add	w2, w8, w2
    ce0c:	eor	w8, w11, w10
    ce10:	and	w8, w8, w9
    ce14:	and	w3, w11, w10
    ce18:	add	w8, w8, w3
    ce1c:	add	w8, w2, w8
    ce20:	ldr	w13, [x1, #32]
    ce24:	rev	w13, w13
    ce28:	eor	w2, w6, w4
    ce2c:	and	w2, w2, w5
    ce30:	eor	w2, w2, w6
    ce34:	add	w7, w2, w7
    ce38:	mov	w2, #0xaa98                	// #43672
    ce3c:	movk	w2, #0xd807, lsl #16
    ce40:	add	w2, w13, w2
    ce44:	add	w7, w7, w2
    ce48:	eor	w2, w5, w5, ror #14
    ce4c:	eor	w2, w5, w2, ror #5
    ce50:	ror	w2, w2, #6
    ce54:	add	w7, w7, w2
    ce58:	add	w25, w11, w7
    ce5c:	eor	w2, w8, w8, ror #9
    ce60:	eor	w2, w8, w2, ror #11
    ce64:	ror	w2, w2, #2
    ce68:	add	w2, w2, w7
    ce6c:	eor	w3, w10, w9
    ce70:	and	w3, w3, w8
    ce74:	and	w7, w10, w9
    ce78:	add	w3, w3, w7
    ce7c:	add	w2, w2, w3
    ce80:	ldr	w12, [x1, #36]
    ce84:	rev	w12, w12
    ce88:	eor	w3, w4, w5
    ce8c:	and	w3, w3, w25
    ce90:	eor	w3, w3, w4
    ce94:	add	w6, w3, w6
    ce98:	mov	w3, #0x5b01                	// #23297
    ce9c:	movk	w3, #0x1283, lsl #16
    cea0:	add	w3, w12, w3
    cea4:	add	w6, w6, w3
    cea8:	eor	w3, w25, w25, ror #14
    ceac:	eor	w3, w25, w3, ror #5
    ceb0:	ror	w3, w3, #6
    ceb4:	add	w6, w6, w3
    ceb8:	add	w20, w10, w6
    cebc:	eor	w3, w2, w2, ror #9
    cec0:	eor	w3, w2, w3, ror #11
    cec4:	ror	w3, w3, #2
    cec8:	add	w3, w3, w6
    cecc:	eor	w6, w9, w8
    ced0:	and	w6, w6, w2
    ced4:	and	w7, w9, w8
    ced8:	add	w6, w6, w7
    cedc:	add	w3, w3, w6
    cee0:	ldr	w21, [x1, #40]
    cee4:	rev	w21, w21
    cee8:	eor	w6, w5, w25
    ceec:	and	w6, w6, w20
    cef0:	eor	w6, w6, w5
    cef4:	add	w4, w6, w4
    cef8:	mov	w6, #0x85be                	// #34238
    cefc:	movk	w6, #0x2431, lsl #16
    cf00:	add	w6, w21, w6
    cf04:	add	w4, w4, w6
    cf08:	eor	w6, w20, w20, ror #14
    cf0c:	eor	w6, w20, w6, ror #5
    cf10:	ror	w6, w6, #6
    cf14:	add	w4, w4, w6
    cf18:	add	w24, w9, w4
    cf1c:	eor	w6, w3, w3, ror #9
    cf20:	eor	w6, w3, w6, ror #11
    cf24:	ror	w6, w6, #2
    cf28:	add	w4, w6, w4
    cf2c:	eor	w6, w8, w2
    cf30:	and	w6, w6, w3
    cf34:	and	w7, w8, w2
    cf38:	add	w6, w6, w7
    cf3c:	add	w4, w4, w6
    cf40:	ldr	w11, [x1, #44]
    cf44:	rev	w11, w11
    cf48:	eor	w6, w25, w20
    cf4c:	and	w6, w6, w24
    cf50:	eor	w6, w6, w25
    cf54:	add	w5, w6, w5
    cf58:	mov	w23, #0x7dc3                	// #32195
    cf5c:	movk	w23, #0x550c, lsl #16
    cf60:	add	w23, w11, w23
    cf64:	add	w5, w5, w23
    cf68:	eor	w23, w24, w24, ror #14
    cf6c:	eor	w23, w24, w23, ror #5
    cf70:	ror	w23, w23, #6
    cf74:	add	w5, w5, w23
    cf78:	add	w7, w8, w5
    cf7c:	eor	w23, w4, w4, ror #9
    cf80:	eor	w23, w4, w23, ror #11
    cf84:	ror	w23, w23, #2
    cf88:	add	w23, w23, w5
    cf8c:	eor	w5, w2, w3
    cf90:	and	w5, w5, w4
    cf94:	and	w6, w2, w3
    cf98:	add	w5, w5, w6
    cf9c:	add	w23, w23, w5
    cfa0:	ldr	w10, [x1, #48]
    cfa4:	rev	w10, w10
    cfa8:	eor	w5, w20, w24
    cfac:	and	w5, w5, w7
    cfb0:	eor	w5, w5, w20
    cfb4:	add	w25, w5, w25
    cfb8:	mov	w5, #0x5d74                	// #23924
    cfbc:	movk	w5, #0x72be, lsl #16
    cfc0:	add	w5, w10, w5
    cfc4:	add	w25, w25, w5
    cfc8:	eor	w5, w7, w7, ror #14
    cfcc:	eor	w5, w7, w5, ror #5
    cfd0:	ror	w5, w5, #6
    cfd4:	add	w25, w25, w5
    cfd8:	add	w2, w2, w25
    cfdc:	eor	w5, w23, w23, ror #9
    cfe0:	eor	w5, w23, w5, ror #11
    cfe4:	ror	w5, w5, #2
    cfe8:	add	w25, w5, w25
    cfec:	eor	w5, w3, w4
    cff0:	and	w5, w5, w23
    cff4:	and	w6, w3, w4
    cff8:	add	w5, w5, w6
    cffc:	add	w5, w25, w5
    d000:	ldr	w9, [x1, #52]
    d004:	rev	w9, w9
    d008:	eor	w6, w24, w7
    d00c:	and	w6, w6, w2
    d010:	eor	w6, w6, w24
    d014:	add	w20, w6, w20
    d018:	mov	w6, #0xb1fe                	// #45566
    d01c:	movk	w6, #0x80de, lsl #16
    d020:	add	w6, w9, w6
    d024:	add	w20, w20, w6
    d028:	eor	w6, w2, w2, ror #14
    d02c:	eor	w6, w2, w6, ror #5
    d030:	ror	w6, w6, #6
    d034:	add	w20, w20, w6
    d038:	add	w3, w3, w20
    d03c:	eor	w6, w5, w5, ror #9
    d040:	eor	w6, w5, w6, ror #11
    d044:	ror	w6, w6, #2
    d048:	add	w20, w6, w20
    d04c:	eor	w6, w4, w23
    d050:	and	w6, w6, w5
    d054:	and	w8, w4, w23
    d058:	add	w6, w6, w8
    d05c:	add	w6, w20, w6
    d060:	ldr	w20, [x1, #56]
    d064:	rev	w20, w20
    d068:	eor	w8, w7, w2
    d06c:	and	w8, w8, w3
    d070:	eor	w8, w8, w7
    d074:	add	w8, w8, w24
    d078:	mov	w24, #0x6a7                 	// #1703
    d07c:	movk	w24, #0x9bdc, lsl #16
    d080:	add	w24, w20, w24
    d084:	add	w8, w8, w24
    d088:	eor	w24, w3, w3, ror #14
    d08c:	eor	w24, w3, w24, ror #5
    d090:	ror	w24, w24, #6
    d094:	add	w8, w8, w24
    d098:	add	w4, w4, w8
    d09c:	eor	w24, w6, w6, ror #9
    d0a0:	eor	w24, w6, w24, ror #11
    d0a4:	ror	w24, w24, #2
    d0a8:	add	w8, w24, w8
    d0ac:	eor	w24, w23, w5
    d0b0:	and	w24, w24, w6
    d0b4:	and	w25, w23, w5
    d0b8:	add	w24, w24, w25
    d0bc:	add	w24, w8, w24
    d0c0:	ldr	w8, [x1, #60]
    d0c4:	rev	w8, w8
    d0c8:	eor	w1, w2, w3
    d0cc:	and	w1, w1, w4
    d0d0:	eor	w1, w1, w2
    d0d4:	add	w7, w1, w7
    d0d8:	mov	w1, #0xf174                	// #61812
    d0dc:	movk	w1, #0xc19b, lsl #16
    d0e0:	add	w1, w8, w1
    d0e4:	add	w7, w7, w1
    d0e8:	eor	w1, w4, w4, ror #14
    d0ec:	eor	w1, w4, w1, ror #5
    d0f0:	ror	w1, w1, #6
    d0f4:	add	w7, w7, w1
    d0f8:	add	w23, w23, w7
    d0fc:	eor	w1, w24, w24, ror #9
    d100:	eor	w1, w24, w1, ror #11
    d104:	ror	w1, w1, #2
    d108:	add	w7, w1, w7
    d10c:	eor	w1, w5, w6
    d110:	and	w1, w1, w24
    d114:	and	w25, w5, w6
    d118:	add	w1, w1, w25
    d11c:	add	w1, w7, w1
    d120:	adrp	x7, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xba70>
    d124:	add	x7, x7, #0x618
    d128:	add	x28, x7, #0xc0
    d12c:	eor	w26, w20, w20, ror #2
    d130:	lsr	w25, w20, #10
    d134:	eor	w25, w25, w26, ror #17
    d138:	eor	w26, w30, w30, ror #11
    d13c:	lsr	w27, w30, #3
    d140:	eor	w26, w27, w26, ror #7
    d144:	add	w25, w25, w26
    d148:	add	w19, w12, w19
    d14c:	add	w19, w25, w19
    d150:	eor	w26, w23, w23, ror #14
    d154:	eor	w26, w23, w26, ror #5
    d158:	ror	w26, w26, #6
    d15c:	add	w26, w26, w19
    d160:	eor	w25, w3, w4
    d164:	and	w25, w25, w23
    d168:	eor	w25, w25, w3
    d16c:	ldr	w27, [x7, #64]
    d170:	add	w25, w25, w27
    d174:	add	w26, w26, w25
    d178:	add	w2, w26, w2
    d17c:	add	w5, w2, w5
    d180:	eor	w26, w1, w1, ror #9
    d184:	eor	w26, w1, w26, ror #11
    d188:	ror	w26, w26, #2
    d18c:	add	w26, w26, w2
    d190:	eor	w2, w24, w6
    d194:	and	w2, w2, w1
    d198:	and	w25, w24, w6
    d19c:	add	w2, w2, w25
    d1a0:	add	w26, w26, w2
    d1a4:	eor	w25, w8, w8, ror #2
    d1a8:	lsr	w2, w8, #10
    d1ac:	eor	w2, w2, w25, ror #17
    d1b0:	eor	w25, w18, w18, ror #11
    d1b4:	lsr	w27, w18, #3
    d1b8:	eor	w25, w27, w25, ror #7
    d1bc:	add	w2, w2, w25
    d1c0:	add	w30, w21, w30
    d1c4:	add	w30, w2, w30
    d1c8:	eor	w25, w23, w4
    d1cc:	and	w25, w25, w5
    d1d0:	eor	w25, w25, w4
    d1d4:	add	w25, w25, w30
    d1d8:	ldr	w2, [x7, #68]
    d1dc:	add	w3, w3, w2
    d1e0:	add	w3, w25, w3
    d1e4:	eor	w25, w5, w5, ror #14
    d1e8:	eor	w25, w5, w25, ror #5
    d1ec:	ror	w25, w25, #6
    d1f0:	add	w3, w3, w25
    d1f4:	add	w6, w3, w6
    d1f8:	eor	w25, w26, w26, ror #9
    d1fc:	eor	w25, w26, w25, ror #11
    d200:	ror	w25, w25, #2
    d204:	add	w3, w25, w3
    d208:	eor	w25, w1, w24
    d20c:	and	w25, w25, w26
    d210:	and	w2, w1, w24
    d214:	add	w25, w25, w2
    d218:	add	w25, w3, w25
    d21c:	eor	w3, w19, w19, ror #2
    d220:	lsr	w2, w19, #10
    d224:	eor	w2, w2, w3, ror #17
    d228:	eor	w3, w17, w17, ror #11
    d22c:	lsr	w27, w17, #3
    d230:	eor	w3, w27, w3, ror #7
    d234:	add	w2, w2, w3
    d238:	add	w18, w11, w18
    d23c:	add	w18, w2, w18
    d240:	eor	w2, w23, w5
    d244:	and	w2, w2, w6
    d248:	eor	w2, w2, w23
    d24c:	add	w2, w2, w18
    d250:	ldr	w3, [x7, #72]
    d254:	add	w4, w4, w3
    d258:	add	w4, w2, w4
    d25c:	eor	w2, w6, w6, ror #14
    d260:	eor	w2, w6, w2, ror #5
    d264:	ror	w2, w2, #6
    d268:	add	w4, w4, w2
    d26c:	add	w24, w24, w4
    d270:	eor	w2, w25, w25, ror #9
    d274:	eor	w2, w25, w2, ror #11
    d278:	ror	w2, w2, #2
    d27c:	add	w4, w2, w4
    d280:	eor	w2, w1, w26
    d284:	and	w2, w2, w25
    d288:	and	w3, w1, w26
    d28c:	add	w2, w2, w3
    d290:	add	w2, w4, w2
    d294:	eor	w4, w30, w30, ror #2
    d298:	lsr	w3, w30, #10
    d29c:	eor	w3, w3, w4, ror #17
    d2a0:	eor	w4, w16, w16, ror #11
    d2a4:	lsr	w27, w16, #3
    d2a8:	eor	w4, w27, w4, ror #7
    d2ac:	add	w3, w3, w4
    d2b0:	add	w17, w10, w17
    d2b4:	add	w17, w3, w17
    d2b8:	eor	w4, w5, w6
    d2bc:	and	w4, w4, w24
    d2c0:	eor	w4, w4, w5
    d2c4:	add	w4, w4, w17
    d2c8:	ldr	w3, [x7, #76]
    d2cc:	add	w23, w23, w3
    d2d0:	add	w23, w4, w23
    d2d4:	eor	w4, w24, w24, ror #14
    d2d8:	eor	w4, w24, w4, ror #5
    d2dc:	ror	w4, w4, #6
    d2e0:	add	w23, w23, w4
    d2e4:	add	w27, w1, w23
    d2e8:	eor	w4, w2, w2, ror #9
    d2ec:	eor	w4, w2, w4, ror #11
    d2f0:	ror	w4, w4, #2
    d2f4:	add	w23, w4, w23
    d2f8:	eor	w4, w26, w25
    d2fc:	and	w4, w4, w2
    d300:	and	w1, w26, w25
    d304:	add	w4, w4, w1
    d308:	add	w4, w23, w4
    d30c:	eor	w3, w18, w18, ror #2
    d310:	lsr	w1, w18, #10
    d314:	eor	w1, w1, w3, ror #17
    d318:	eor	w3, w15, w15, ror #11
    d31c:	lsr	w23, w15, #3
    d320:	eor	w3, w23, w3, ror #7
    d324:	add	w1, w1, w3
    d328:	add	w16, w9, w16
    d32c:	add	w16, w1, w16
    d330:	eor	w3, w6, w24
    d334:	and	w3, w3, w27
    d338:	eor	w3, w3, w6
    d33c:	add	w3, w3, w16
    d340:	ldr	w1, [x7, #80]
    d344:	add	w5, w5, w1
    d348:	add	w5, w3, w5
    d34c:	eor	w3, w27, w27, ror #14
    d350:	eor	w3, w27, w3, ror #5
    d354:	ror	w3, w3, #6
    d358:	add	w5, w5, w3
    d35c:	add	w26, w26, w5
    d360:	eor	w3, w4, w4, ror #9
    d364:	eor	w3, w4, w3, ror #11
    d368:	ror	w3, w3, #2
    d36c:	add	w5, w3, w5
    d370:	eor	w3, w25, w2
    d374:	and	w3, w3, w4
    d378:	and	w1, w25, w2
    d37c:	add	w3, w3, w1
    d380:	add	w3, w5, w3
    d384:	eor	w5, w17, w17, ror #2
    d388:	lsr	w1, w17, #10
    d38c:	eor	w1, w1, w5, ror #17
    d390:	eor	w5, w14, w14, ror #11
    d394:	lsr	w23, w14, #3
    d398:	eor	w5, w23, w5, ror #7
    d39c:	add	w1, w1, w5
    d3a0:	add	w15, w20, w15
    d3a4:	add	w15, w1, w15
    d3a8:	eor	w1, w24, w27
    d3ac:	and	w1, w1, w26
    d3b0:	eor	w1, w1, w24
    d3b4:	add	w1, w1, w15
    d3b8:	ldr	w5, [x7, #84]
    d3bc:	add	w6, w6, w5
    d3c0:	add	w6, w1, w6
    d3c4:	eor	w1, w26, w26, ror #14
    d3c8:	eor	w1, w26, w1, ror #5
    d3cc:	ror	w1, w1, #6
    d3d0:	add	w6, w6, w1
    d3d4:	add	w25, w25, w6
    d3d8:	eor	w1, w3, w3, ror #9
    d3dc:	eor	w1, w3, w1, ror #11
    d3e0:	ror	w1, w1, #2
    d3e4:	add	w6, w1, w6
    d3e8:	eor	w1, w2, w4
    d3ec:	and	w1, w1, w3
    d3f0:	and	w5, w2, w4
    d3f4:	add	w1, w1, w5
    d3f8:	add	w1, w6, w1
    d3fc:	eor	w6, w16, w16, ror #2
    d400:	lsr	w5, w16, #10
    d404:	eor	w5, w5, w6, ror #17
    d408:	eor	w6, w22, w22, ror #11
    d40c:	lsr	w23, w22, #3
    d410:	eor	w6, w23, w6, ror #7
    d414:	add	w5, w5, w6
    d418:	add	w14, w8, w14
    d41c:	add	w14, w5, w14
    d420:	eor	w6, w27, w26
    d424:	and	w6, w6, w25
    d428:	eor	w6, w6, w27
    d42c:	add	w6, w6, w14
    d430:	ldr	w5, [x7, #88]
    d434:	add	w24, w24, w5
    d438:	add	w24, w6, w24
    d43c:	eor	w6, w25, w25, ror #14
    d440:	eor	w6, w25, w6, ror #5
    d444:	ror	w6, w6, #6
    d448:	add	w24, w24, w6
    d44c:	add	w23, w2, w24
    d450:	eor	w6, w1, w1, ror #9
    d454:	eor	w6, w1, w6, ror #11
    d458:	ror	w6, w6, #2
    d45c:	add	w24, w6, w24
    d460:	eor	w6, w4, w3
    d464:	and	w6, w6, w1
    d468:	and	w2, w4, w3
    d46c:	add	w6, w6, w2
    d470:	add	w6, w24, w6
    d474:	eor	w5, w15, w15, ror #2
    d478:	lsr	w2, w15, #10
    d47c:	eor	w5, w2, w5, ror #17
    d480:	add	w5, w5, w19
    d484:	eor	w2, w13, w13, ror #11
    d488:	lsr	w24, w13, #3
    d48c:	eor	w2, w24, w2, ror #7
    d490:	add	w22, w2, w22
    d494:	add	w22, w5, w22
    d498:	eor	w2, w26, w25
    d49c:	and	w2, w2, w23
    d4a0:	eor	w2, w2, w26
    d4a4:	add	w27, w2, w27
    d4a8:	ldr	w2, [x7, #92]
    d4ac:	add	w2, w22, w2
    d4b0:	add	w2, w27, w2
    d4b4:	eor	w24, w23, w23, ror #14
    d4b8:	eor	w24, w23, w24, ror #5
    d4bc:	ror	w24, w24, #6
    d4c0:	add	w2, w2, w24
    d4c4:	add	w27, w4, w2
    d4c8:	eor	w24, w6, w6, ror #9
    d4cc:	eor	w24, w6, w24, ror #11
    d4d0:	ror	w24, w24, #2
    d4d4:	add	w2, w24, w2
    d4d8:	eor	w24, w3, w1
    d4dc:	and	w24, w24, w6
    d4e0:	and	w4, w3, w1
    d4e4:	add	w24, w24, w4
    d4e8:	add	w24, w2, w24
    d4ec:	eor	w2, w12, w12, ror #11
    d4f0:	lsr	w4, w12, #3
    d4f4:	eor	w2, w4, w2, ror #7
    d4f8:	add	w2, w2, w13
    d4fc:	eor	w13, w14, w14, ror #2
    d500:	lsr	w4, w14, #10
    d504:	eor	w13, w4, w13, ror #17
    d508:	add	w13, w13, w30
    d50c:	add	w13, w2, w13
    d510:	eor	w2, w25, w23
    d514:	and	w2, w2, w27
    d518:	eor	w2, w2, w25
    d51c:	add	w26, w2, w26
    d520:	ldr	w2, [x7, #96]
    d524:	add	w2, w13, w2
    d528:	add	w26, w26, w2
    d52c:	eor	w2, w27, w27, ror #14
    d530:	eor	w2, w27, w2, ror #5
    d534:	ror	w2, w2, #6
    d538:	add	w26, w26, w2
    d53c:	add	w5, w3, w26
    d540:	eor	w2, w24, w24, ror #9
    d544:	eor	w2, w24, w2, ror #11
    d548:	ror	w2, w2, #2
    d54c:	add	w2, w2, w26
    d550:	eor	w3, w1, w6
    d554:	and	w3, w3, w24
    d558:	and	w4, w1, w6
    d55c:	add	w3, w3, w4
    d560:	add	w2, w2, w3
    d564:	eor	w3, w21, w21, ror #11
    d568:	lsr	w4, w21, #3
    d56c:	eor	w3, w4, w3, ror #7
    d570:	add	w3, w3, w12
    d574:	eor	w12, w22, w22, ror #2
    d578:	lsr	w4, w22, #10
    d57c:	eor	w12, w4, w12, ror #17
    d580:	add	w12, w12, w18
    d584:	add	w12, w3, w12
    d588:	eor	w3, w23, w27
    d58c:	and	w3, w3, w5
    d590:	eor	w3, w3, w23
    d594:	add	w25, w3, w25
    d598:	ldr	w3, [x7, #100]
    d59c:	add	w3, w12, w3
    d5a0:	add	w25, w25, w3
    d5a4:	eor	w3, w5, w5, ror #14
    d5a8:	eor	w3, w5, w3, ror #5
    d5ac:	ror	w3, w3, #6
    d5b0:	add	w25, w25, w3
    d5b4:	add	w1, w1, w25
    d5b8:	eor	w3, w2, w2, ror #9
    d5bc:	eor	w3, w2, w3, ror #11
    d5c0:	ror	w3, w3, #2
    d5c4:	add	w3, w3, w25
    d5c8:	eor	w4, w6, w24
    d5cc:	and	w4, w4, w2
    d5d0:	and	w25, w6, w24
    d5d4:	add	w4, w4, w25
    d5d8:	add	w3, w3, w4
    d5dc:	eor	w25, w13, w13, ror #2
    d5e0:	lsr	w4, w13, #10
    d5e4:	eor	w25, w4, w25, ror #17
    d5e8:	add	w25, w25, w17
    d5ec:	eor	w4, w11, w11, ror #11
    d5f0:	lsr	w26, w11, #3
    d5f4:	eor	w4, w26, w4, ror #7
    d5f8:	add	w21, w4, w21
    d5fc:	add	w21, w25, w21
    d600:	eor	w25, w27, w5
    d604:	and	w25, w25, w1
    d608:	eor	w25, w25, w27
    d60c:	add	w23, w25, w23
    d610:	ldr	w25, [x7, #104]
    d614:	add	w25, w21, w25
    d618:	add	w23, w23, w25
    d61c:	eor	w25, w1, w1, ror #14
    d620:	eor	w25, w1, w25, ror #5
    d624:	ror	w25, w25, #6
    d628:	add	w23, w23, w25
    d62c:	add	w26, w6, w23
    d630:	eor	w25, w3, w3, ror #9
    d634:	eor	w25, w3, w25, ror #11
    d638:	ror	w25, w25, #2
    d63c:	add	w23, w25, w23
    d640:	eor	w4, w24, w2
    d644:	and	w4, w4, w3
    d648:	and	w25, w24, w2
    d64c:	add	w4, w4, w25
    d650:	add	w25, w23, w4
    d654:	eor	w4, w10, w10, ror #11
    d658:	lsr	w6, w10, #3
    d65c:	eor	w4, w6, w4, ror #7
    d660:	add	w4, w4, w11
    d664:	eor	w11, w12, w12, ror #2
    d668:	lsr	w6, w12, #10
    d66c:	eor	w11, w6, w11, ror #17
    d670:	add	w11, w11, w16
    d674:	add	w11, w4, w11
    d678:	eor	w4, w5, w1
    d67c:	and	w4, w4, w26
    d680:	eor	w4, w4, w5
    d684:	add	w4, w4, w27
    d688:	ldr	w27, [x7, #108]
    d68c:	add	w27, w11, w27
    d690:	add	w4, w4, w27
    d694:	eor	w23, w26, w26, ror #14
    d698:	eor	w23, w26, w23, ror #5
    d69c:	ror	w23, w23, #6
    d6a0:	add	w4, w4, w23
    d6a4:	add	w27, w24, w4
    d6a8:	eor	w23, w25, w25, ror #9
    d6ac:	eor	w23, w25, w23, ror #11
    d6b0:	ror	w23, w23, #2
    d6b4:	add	w4, w23, w4
    d6b8:	eor	w23, w2, w3
    d6bc:	and	w23, w23, w25
    d6c0:	and	w6, w2, w3
    d6c4:	add	w23, w23, w6
    d6c8:	add	w23, w4, w23
    d6cc:	eor	w4, w9, w9, ror #11
    d6d0:	lsr	w6, w9, #3
    d6d4:	eor	w4, w6, w4, ror #7
    d6d8:	add	w4, w4, w10
    d6dc:	eor	w10, w21, w21, ror #2
    d6e0:	lsr	w6, w21, #10
    d6e4:	eor	w10, w6, w10, ror #17
    d6e8:	add	w10, w10, w15
    d6ec:	add	w10, w4, w10
    d6f0:	eor	w4, w1, w26
    d6f4:	and	w4, w4, w27
    d6f8:	eor	w4, w4, w1
    d6fc:	add	w5, w4, w5
    d700:	ldr	w4, [x7, #112]
    d704:	add	w4, w10, w4
    d708:	add	w5, w5, w4
    d70c:	eor	w4, w27, w27, ror #14
    d710:	eor	w4, w27, w4, ror #5
    d714:	ror	w4, w4, #6
    d718:	add	w4, w5, w4
    d71c:	add	w2, w2, w4
    d720:	eor	w5, w23, w23, ror #9
    d724:	eor	w5, w23, w5, ror #11
    d728:	ror	w5, w5, #2
    d72c:	add	w4, w5, w4
    d730:	eor	w5, w3, w25
    d734:	and	w5, w5, w23
    d738:	and	w6, w3, w25
    d73c:	add	w5, w5, w6
    d740:	add	w5, w4, w5
    d744:	eor	w4, w20, w20, ror #11
    d748:	lsr	w6, w20, #3
    d74c:	eor	w4, w6, w4, ror #7
    d750:	add	w4, w4, w9
    d754:	eor	w9, w11, w11, ror #2
    d758:	lsr	w6, w11, #10
    d75c:	eor	w9, w6, w9, ror #17
    d760:	add	w9, w9, w14
    d764:	add	w9, w4, w9
    d768:	eor	w6, w26, w27
    d76c:	and	w6, w6, w2
    d770:	eor	w6, w6, w26
    d774:	add	w1, w6, w1
    d778:	ldr	w6, [x7, #116]
    d77c:	add	w6, w9, w6
    d780:	add	w1, w1, w6
    d784:	eor	w6, w2, w2, ror #14
    d788:	eor	w6, w2, w6, ror #5
    d78c:	ror	w6, w6, #6
    d790:	add	w1, w1, w6
    d794:	add	w3, w3, w1
    d798:	eor	w6, w5, w5, ror #9
    d79c:	eor	w6, w5, w6, ror #11
    d7a0:	ror	w6, w6, #2
    d7a4:	add	w1, w6, w1
    d7a8:	eor	w6, w25, w23
    d7ac:	and	w6, w6, w5
    d7b0:	and	w4, w25, w23
    d7b4:	add	w6, w6, w4
    d7b8:	add	w6, w1, w6
    d7bc:	eor	w4, w10, w10, ror #2
    d7c0:	lsr	w1, w10, #10
    d7c4:	eor	w4, w1, w4, ror #17
    d7c8:	add	w4, w4, w22
    d7cc:	eor	w1, w8, w8, ror #11
    d7d0:	lsr	w24, w8, #3
    d7d4:	eor	w1, w24, w1, ror #7
    d7d8:	add	w20, w1, w20
    d7dc:	add	w20, w4, w20
    d7e0:	eor	w24, w27, w2
    d7e4:	and	w24, w24, w3
    d7e8:	eor	w24, w24, w27
    d7ec:	add	w26, w24, w26
    d7f0:	ldr	w24, [x7, #120]
    d7f4:	add	w24, w20, w24
    d7f8:	add	w26, w26, w24
    d7fc:	eor	w24, w3, w3, ror #14
    d800:	eor	w24, w3, w24, ror #5
    d804:	ror	w24, w24, #6
    d808:	add	w26, w26, w24
    d80c:	add	w4, w25, w26
    d810:	eor	w24, w6, w6, ror #9
    d814:	eor	w24, w6, w24, ror #11
    d818:	ror	w24, w24, #2
    d81c:	add	w26, w24, w26
    d820:	eor	w24, w23, w5
    d824:	and	w24, w24, w6
    d828:	and	w1, w23, w5
    d82c:	add	w24, w24, w1
    d830:	add	w24, w26, w24
    d834:	eor	w1, w19, w19, ror #11
    d838:	lsr	w25, w19, #3
    d83c:	eor	w1, w25, w1, ror #7
    d840:	add	w1, w1, w8
    d844:	eor	w8, w9, w9, ror #2
    d848:	lsr	w25, w9, #10
    d84c:	eor	w8, w25, w8, ror #17
    d850:	add	w8, w8, w13
    d854:	add	w8, w1, w8
    d858:	eor	w1, w2, w3
    d85c:	and	w1, w1, w4
    d860:	eor	w1, w1, w2
    d864:	add	w27, w1, w27
    d868:	ldr	w1, [x7, #124]
    d86c:	add	w1, w8, w1
    d870:	add	w27, w27, w1
    d874:	eor	w1, w4, w4, ror #14
    d878:	eor	w1, w4, w1, ror #5
    d87c:	ror	w1, w1, #6
    d880:	add	w27, w27, w1
    d884:	add	w23, w23, w27
    d888:	eor	w1, w24, w24, ror #9
    d88c:	eor	w1, w24, w1, ror #11
    d890:	ror	w1, w1, #2
    d894:	add	w27, w1, w27
    d898:	eor	w1, w5, w6
    d89c:	and	w1, w1, w24
    d8a0:	and	w25, w5, w6
    d8a4:	add	w1, w1, w25
    d8a8:	add	w1, w27, w1
    d8ac:	add	x7, x7, #0x40
    d8b0:	cmp	x28, x7
    d8b4:	b.ne	d12c <lzma_crc64@@XZ_5.0+0x750>  // b.any
    d8b8:	ldr	w7, [x0]
    d8bc:	add	w1, w7, w1
    d8c0:	str	w1, [x0]
    d8c4:	ldr	w1, [x0, #4]
    d8c8:	add	w24, w1, w24
    d8cc:	str	w24, [x0, #4]
    d8d0:	ldr	w1, [x0, #8]
    d8d4:	add	w6, w1, w6
    d8d8:	str	w6, [x0, #8]
    d8dc:	ldr	w1, [x0, #12]
    d8e0:	add	w5, w1, w5
    d8e4:	str	w5, [x0, #12]
    d8e8:	ldr	w1, [x0, #16]
    d8ec:	add	w23, w1, w23
    d8f0:	str	w23, [x0, #16]
    d8f4:	ldr	w1, [x0, #20]
    d8f8:	add	w4, w1, w4
    d8fc:	str	w4, [x0, #20]
    d900:	ldr	w1, [x0, #24]
    d904:	add	w3, w1, w3
    d908:	str	w3, [x0, #24]
    d90c:	ldr	w1, [x0, #28]
    d910:	add	w2, w1, w2
    d914:	str	w2, [x0, #28]
    d918:	ldp	x19, x20, [sp, #16]
    d91c:	ldp	x21, x22, [sp, #32]
    d920:	ldp	x23, x24, [sp, #48]
    d924:	ldp	x25, x26, [sp, #64]
    d928:	ldp	x27, x28, [sp, #80]
    d92c:	ldp	x29, x30, [sp], #128
    d930:	ret
    d934:	adrp	x1, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xba70>
    d938:	add	x1, x1, #0x618
    d93c:	ldp	x2, x3, [x1, #256]
    d940:	stp	x2, x3, [x0, #64]
    d944:	ldp	x2, x3, [x1, #272]
    d948:	stp	x2, x3, [x0, #80]
    d94c:	str	xzr, [x0, #96]
    d950:	ret
    d954:	cbz	x1, d9ec <lzma_crc64@@XZ_5.0+0x1010>
    d958:	stp	x29, x30, [sp, #-64]!
    d95c:	mov	x29, sp
    d960:	stp	x19, x20, [sp, #16]
    d964:	stp	x21, x22, [sp, #32]
    d968:	stp	x23, x24, [sp, #48]
    d96c:	mov	x22, x0
    d970:	mov	x20, x1
    d974:	mov	x21, x2
    d978:	mov	x23, #0x40                  	// #64
    d97c:	add	x24, x2, x23
    d980:	b	d994 <lzma_crc64@@XZ_5.0+0xfb8>
    d984:	mov	x1, x21
    d988:	mov	x0, x24
    d98c:	bl	cad0 <lzma_crc64@@XZ_5.0+0xf4>
    d990:	cbz	x20, d9d8 <lzma_crc64@@XZ_5.0+0xffc>
    d994:	ldr	x0, [x21, #96]
    d998:	and	x0, x0, #0x3f
    d99c:	sub	x19, x23, x0
    d9a0:	cmp	x19, x20
    d9a4:	csel	x19, x19, x20, ls  // ls = plast
    d9a8:	mov	x2, x19
    d9ac:	mov	x1, x22
    d9b0:	add	x0, x21, x0
    d9b4:	bl	3090 <memcpy@plt>
    d9b8:	add	x22, x22, x19
    d9bc:	sub	x20, x20, x19
    d9c0:	ldr	x0, [x21, #96]
    d9c4:	add	x19, x19, x0
    d9c8:	str	x19, [x21, #96]
    d9cc:	tst	x19, #0x3f
    d9d0:	b.ne	d990 <lzma_crc64@@XZ_5.0+0xfb4>  // b.any
    d9d4:	b	d984 <lzma_crc64@@XZ_5.0+0xfa8>
    d9d8:	ldp	x19, x20, [sp, #16]
    d9dc:	ldp	x21, x22, [sp, #32]
    d9e0:	ldp	x23, x24, [sp, #48]
    d9e4:	ldp	x29, x30, [sp], #64
    d9e8:	ret
    d9ec:	ret
    d9f0:	stp	x29, x30, [sp, #-48]!
    d9f4:	mov	x29, sp
    d9f8:	stp	x19, x20, [sp, #16]
    d9fc:	mov	x19, x0
    da00:	ldr	x0, [x0, #96]
    da04:	and	x0, x0, #0x3f
    da08:	mov	w2, #0xffffff80            	// #-128
    da0c:	strb	w2, [x19, x0]
    da10:	cmp	x0, #0x37
    da14:	b.eq	da60 <lzma_crc64@@XZ_5.0+0x1084>  // b.none
    da18:	str	x21, [sp, #32]
    da1c:	add	x1, x0, #0x1
    da20:	add	x21, x19, #0x40
    da24:	mov	x20, #0x1                   	// #1
    da28:	b	da44 <lzma_crc64@@XZ_5.0+0x1068>
    da2c:	mov	x1, x19
    da30:	mov	x0, x21
    da34:	bl	cad0 <lzma_crc64@@XZ_5.0+0xf4>
    da38:	strb	wzr, [x19]
    da3c:	mov	x0, x20
    da40:	mov	x1, x0
    da44:	cmp	x1, #0x40
    da48:	b.eq	da2c <lzma_crc64@@XZ_5.0+0x1050>  // b.none
    da4c:	add	x0, x1, #0x1
    da50:	strb	wzr, [x19, x1]
    da54:	cmp	x1, #0x37
    da58:	b.ne	da40 <lzma_crc64@@XZ_5.0+0x1064>  // b.any
    da5c:	ldr	x21, [sp, #32]
    da60:	ldr	x0, [x19, #96]
    da64:	lsl	x0, x0, #3
    da68:	str	x0, [x19, #96]
    da6c:	rev	x0, x0
    da70:	str	x0, [x19, #56]
    da74:	mov	x1, x19
    da78:	add	x0, x19, #0x40
    da7c:	bl	cad0 <lzma_crc64@@XZ_5.0+0xf4>
    da80:	mov	x1, x19
    da84:	add	x19, x19, #0x20
    da88:	ldr	w0, [x1, #64]
    da8c:	rev	w0, w0
    da90:	str	w0, [x1], #4
    da94:	cmp	x1, x19
    da98:	b.ne	da88 <lzma_crc64@@XZ_5.0+0x10ac>  // b.any
    da9c:	ldp	x19, x20, [sp, #16]
    daa0:	ldp	x29, x30, [sp], #48
    daa4:	ret
    daa8:	stp	x29, x30, [sp, #-48]!
    daac:	mov	x29, sp
    dab0:	stp	x19, x20, [sp, #16]
    dab4:	stp	x21, x22, [sp, #32]
    dab8:	mov	x20, x0
    dabc:	mov	x21, x1
    dac0:	mov	x19, x2
    dac4:	ldr	x1, [x2, #8]
    dac8:	sub	x2, x1, #0x1, lsl #12
    dacc:	mov	x0, #0xf000                	// #61440
    dad0:	movk	x0, #0x5fff, lsl #16
    dad4:	cmp	x2, x0
    dad8:	b.hi	dd6c <lzma_crc64@@XZ_5.0+0x1390>  // b.pmore
    dadc:	ldr	x3, [x19, #32]
    dae0:	ldr	x2, [x19, #24]
    dae4:	mov	w0, #0x1                   	// #1
    dae8:	cmp	x3, x2
    daec:	b.hi	dd70 <lzma_crc64@@XZ_5.0+0x1394>  // b.pmore
    daf0:	ldr	x2, [x19]
    daf4:	add	w2, w2, w1
    daf8:	str	w2, [x20, #12]
    dafc:	ldr	x0, [x19, #16]
    db00:	ldr	x1, [x19, #24]
    db04:	add	w0, w0, w1
    db08:	add	w1, w2, w0
    db0c:	str	w0, [x20, #16]
    db10:	ldr	x0, [x19, #8]
    db14:	lsr	x0, x0, #1
    db18:	lsr	w2, w0, #1
    db1c:	mov	w3, #0x40000000            	// #1073741824
    db20:	cmp	w3, w0
    db24:	csel	w0, w0, w2, cs  // cs = hs, nlast
    db28:	ldr	w3, [x20, #8]
    db2c:	ldr	x2, [x19]
    db30:	ldr	x4, [x19, #24]
    db34:	add	x2, x2, x4
    db38:	ldr	x4, [x19, #16]
    db3c:	add	x2, x2, x4
    db40:	lsr	x2, x2, #1
    db44:	add	w2, w2, #0x80, lsl #12
    db48:	add	w2, w2, w1
    db4c:	add	w2, w2, w0
    db50:	str	w2, [x20, #8]
    db54:	ldr	x0, [x20]
    db58:	cmp	x0, #0x0
    db5c:	ccmp	w2, w3, #0x4, ne  // ne = any
    db60:	b.ne	dbc0 <lzma_crc64@@XZ_5.0+0x11e4>  // b.any
    db64:	ldr	x0, [x19, #24]
    db68:	str	w0, [x20, #100]
    db6c:	ldr	x2, [x19, #32]
    db70:	str	w2, [x20, #96]
    db74:	ldr	x1, [x19, #8]
    db78:	add	w1, w1, #0x1
    db7c:	str	w1, [x20, #84]
    db80:	ldr	w0, [x19, #40]
    db84:	cmp	w0, #0x12
    db88:	b.eq	dd14 <lzma_crc64@@XZ_5.0+0x1338>  // b.none
    db8c:	cmp	w0, #0x12
    db90:	b.ls	dbd0 <lzma_crc64@@XZ_5.0+0x11f4>  // b.plast
    db94:	cmp	w0, #0x13
    db98:	b.eq	dd30 <lzma_crc64@@XZ_5.0+0x1354>  // b.none
    db9c:	cmp	w0, #0x14
    dba0:	b.ne	dc04 <lzma_crc64@@XZ_5.0+0x1228>  // b.any
    dba4:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    dba8:	ldr	x0, [x0, #4016]
    dbac:	str	x0, [x20, #48]
    dbb0:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    dbb4:	ldr	x0, [x0, #4000]
    dbb8:	str	x0, [x20, #56]
    dbbc:	b	dc24 <lzma_crc64@@XZ_5.0+0x1248>
    dbc0:	mov	x1, x21
    dbc4:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    dbc8:	str	xzr, [x20]
    dbcc:	b	db64 <lzma_crc64@@XZ_5.0+0x1188>
    dbd0:	cmp	w0, #0x3
    dbd4:	b.eq	dc0c <lzma_crc64@@XZ_5.0+0x1230>  // b.none
    dbd8:	cmp	w0, #0x4
    dbdc:	b.ne	dbfc <lzma_crc64@@XZ_5.0+0x1220>  // b.any
    dbe0:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    dbe4:	ldr	x0, [x0, #4064]
    dbe8:	str	x0, [x20, #48]
    dbec:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    dbf0:	ldr	x0, [x0, #4024]
    dbf4:	str	x0, [x20, #56]
    dbf8:	b	dc24 <lzma_crc64@@XZ_5.0+0x1248>
    dbfc:	mov	w0, #0x1                   	// #1
    dc00:	b	dd70 <lzma_crc64@@XZ_5.0+0x1394>
    dc04:	mov	w0, #0x1                   	// #1
    dc08:	b	dd70 <lzma_crc64@@XZ_5.0+0x1394>
    dc0c:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    dc10:	ldr	x0, [x0, #3896]
    dc14:	str	x0, [x20, #48]
    dc18:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    dc1c:	ldr	x0, [x0, #3912]
    dc20:	str	x0, [x20, #56]
    dc24:	ldr	w3, [x19, #40]
    dc28:	and	w4, w3, #0xf
    dc2c:	mov	w0, #0x1                   	// #1
    dc30:	cmp	w2, w4
    dc34:	b.cc	dd70 <lzma_crc64@@XZ_5.0+0x1394>  // b.lo, b.ul, b.last
    dc38:	and	w22, w3, #0x10
    dc3c:	cmp	w4, #0x2
    dc40:	b.eq	dd80 <lzma_crc64@@XZ_5.0+0x13a4>  // b.none
    dc44:	ldr	x0, [x19, #8]
    dc48:	sub	w0, w0, #0x1
    dc4c:	orr	w0, w0, w0, lsr #1
    dc50:	orr	w0, w0, w0, lsr #2
    dc54:	orr	w0, w0, w0, lsr #4
    dc58:	orr	w0, w0, w0, lsr #8
    dc5c:	lsr	w0, w0, #1
    dc60:	orr	w0, w0, #0xffff
    dc64:	mov	w2, #0x1000000             	// #16777216
    dc68:	cmp	w0, w2
    dc6c:	b.ls	dc7c <lzma_crc64@@XZ_5.0+0x12a0>  // b.plast
    dc70:	cmp	w4, #0x3
    dc74:	b.eq	dd90 <lzma_crc64@@XZ_5.0+0x13b4>  // b.none
    dc78:	lsr	w0, w0, #1
    dc7c:	str	w0, [x20, #88]
    dc80:	cmp	w4, #0x2
    dc84:	b.ls	dd4c <lzma_crc64@@XZ_5.0+0x1370>  // b.plast
    dc88:	add	w0, w0, #0x401
    dc8c:	add	w2, w0, #0x10, lsl #12
    dc90:	tst	w3, #0xc
    dc94:	csel	w0, w2, w0, ne  // ne = any
    dc98:	ldr	w3, [x20, #108]
    dc9c:	ldr	w4, [x20, #112]
    dca0:	str	w0, [x20, #108]
    dca4:	lsl	w2, w1, #1
    dca8:	cmp	w22, #0x0
    dcac:	csel	w1, w1, w2, eq  // eq = none
    dcb0:	str	w1, [x20, #112]
    dcb4:	cmp	w0, w3
    dcb8:	b.ne	dcc8 <lzma_crc64@@XZ_5.0+0x12ec>  // b.any
    dcbc:	mov	w0, w1
    dcc0:	cmp	w0, w4
    dcc4:	b.eq	dce8 <lzma_crc64@@XZ_5.0+0x130c>  // b.none
    dcc8:	mov	x1, x21
    dccc:	ldr	x0, [x20, #64]
    dcd0:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    dcd4:	str	xzr, [x20, #64]
    dcd8:	mov	x1, x21
    dcdc:	ldr	x0, [x20, #72]
    dce0:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    dce4:	str	xzr, [x20, #72]
    dce8:	ldr	w1, [x19, #44]
    dcec:	str	w1, [x20, #92]
    dcf0:	mov	w0, #0x0                   	// #0
    dcf4:	cbnz	w1, dd70 <lzma_crc64@@XZ_5.0+0x1394>
    dcf8:	cbz	w22, dd54 <lzma_crc64@@XZ_5.0+0x1378>
    dcfc:	ldr	w0, [x20, #96]
    dd00:	lsr	w0, w0, #1
    dd04:	add	w0, w0, #0x10
    dd08:	str	w0, [x20, #92]
    dd0c:	mov	w0, #0x0                   	// #0
    dd10:	b	dd70 <lzma_crc64@@XZ_5.0+0x1394>
    dd14:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    dd18:	ldr	x0, [x0, #4048]
    dd1c:	str	x0, [x20, #48]
    dd20:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    dd24:	ldr	x0, [x0, #4032]
    dd28:	str	x0, [x20, #56]
    dd2c:	b	dc24 <lzma_crc64@@XZ_5.0+0x1248>
    dd30:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    dd34:	ldr	x0, [x0, #3888]
    dd38:	str	x0, [x20, #48]
    dd3c:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    dd40:	ldr	x0, [x0, #3928]
    dd44:	str	x0, [x20, #56]
    dd48:	b	dc24 <lzma_crc64@@XZ_5.0+0x1248>
    dd4c:	add	w0, w0, #0x1
    dd50:	b	dc8c <lzma_crc64@@XZ_5.0+0x12b0>
    dd54:	ldr	w0, [x20, #96]
    dd58:	lsr	w0, w0, #2
    dd5c:	add	w0, w0, #0x4
    dd60:	str	w0, [x20, #92]
    dd64:	mov	w0, #0x0                   	// #0
    dd68:	b	dd70 <lzma_crc64@@XZ_5.0+0x1394>
    dd6c:	mov	w0, #0x1                   	// #1
    dd70:	ldp	x19, x20, [sp, #16]
    dd74:	ldp	x21, x22, [sp, #32]
    dd78:	ldp	x29, x30, [sp], #48
    dd7c:	ret
    dd80:	mov	w0, #0xffff                	// #65535
    dd84:	str	w0, [x20, #88]
    dd88:	mov	w0, #0x10000               	// #65536
    dd8c:	b	dc8c <lzma_crc64@@XZ_5.0+0x12b0>
    dd90:	mov	w0, #0xffffff              	// #16777215
    dd94:	str	w0, [x20, #88]
    dd98:	b	dc88 <lzma_crc64@@XZ_5.0+0x12ac>
    dd9c:	ldr	x2, [x0, #24]
    dda0:	cbz	x2, ddf4 <lzma_crc64@@XZ_5.0+0x1418>
    dda4:	stp	x29, x30, [sp, #-48]!
    dda8:	mov	x29, sp
    ddac:	stp	x19, x20, [sp, #16]
    ddb0:	str	x21, [sp, #32]
    ddb4:	mov	x19, x0
    ddb8:	mov	x21, x1
    ddbc:	mov	x20, x3
    ddc0:	mov	x1, x3
    ddc4:	ldr	x0, [x0]
    ddc8:	blr	x2
    ddcc:	cbz	w0, dde0 <lzma_crc64@@XZ_5.0+0x1404>
    ddd0:	ldp	x19, x20, [sp, #16]
    ddd4:	ldr	x21, [sp, #32]
    ddd8:	ldp	x29, x30, [sp], #48
    dddc:	ret
    dde0:	add	x2, x20, #0x10
    dde4:	mov	x1, x21
    dde8:	add	x0, x19, #0x98
    ddec:	bl	3820 <lzma_version_string@@XZ_5.0+0x158>
    ddf0:	b	ddd0 <lzma_crc64@@XZ_5.0+0x13f4>
    ddf4:	mov	w0, #0xb                   	// #11
    ddf8:	ret
    ddfc:	stp	x29, x30, [sp, #-32]!
    de00:	mov	x29, sp
    de04:	stp	x19, x20, [sp, #16]
    de08:	mov	x19, x0
    de0c:	mov	x20, x1
    de10:	add	x0, x0, #0x98
    de14:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    de18:	mov	x1, x20
    de1c:	ldr	x0, [x19, #104]
    de20:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    de24:	mov	x1, x20
    de28:	ldr	x0, [x19, #96]
    de2c:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    de30:	mov	x1, x20
    de34:	ldr	x0, [x19, #32]
    de38:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    de3c:	ldr	x2, [x19, #16]
    de40:	cbz	x2, de68 <lzma_crc64@@XZ_5.0+0x148c>
    de44:	mov	x1, x20
    de48:	ldr	x0, [x19]
    de4c:	blr	x2
    de50:	mov	x1, x20
    de54:	mov	x0, x19
    de58:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    de5c:	ldp	x19, x20, [sp, #16]
    de60:	ldp	x29, x30, [sp], #32
    de64:	ret
    de68:	mov	x1, x20
    de6c:	ldr	x0, [x19]
    de70:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    de74:	b	de50 <lzma_crc64@@XZ_5.0+0x1474>
    de78:	sub	sp, sp, #0xa0
    de7c:	stp	x29, x30, [sp, #16]
    de80:	add	x29, sp, #0x10
    de84:	stp	x19, x20, [sp, #32]
    de88:	stp	x21, x22, [sp, #48]
    de8c:	stp	x23, x24, [sp, #64]
    de90:	stp	x25, x26, [sp, #80]
    de94:	stp	x27, x28, [sp, #96]
    de98:	mov	x19, x0
    de9c:	str	x1, [sp, #136]
    dea0:	str	x2, [sp, #120]
    dea4:	mov	x26, x3
    dea8:	mov	x25, x4
    deac:	mov	x28, x5
    deb0:	mov	x22, x6
    deb4:	mov	x21, x7
    deb8:	ldr	w27, [sp, #160]
    debc:	add	x24, x0, #0x20
    dec0:	add	x0, sp, #0x98
    dec4:	str	x0, [sp, #128]
    dec8:	b	dfb8 <lzma_crc64@@XZ_5.0+0x15dc>
    decc:	ldr	w0, [x24, #12]
    ded0:	sub	w20, w20, w0
    ded4:	and	w20, w20, #0xfffffff0
    ded8:	ldr	x0, [x24]
    dedc:	ldr	w2, [x24, #36]
    dee0:	sub	w2, w2, w20
    dee4:	add	x1, x0, w20, uxtw
    dee8:	bl	30b0 <memmove@plt>
    deec:	ldr	w0, [x24, #20]
    def0:	add	w0, w0, w20
    def4:	str	w0, [x24, #20]
    def8:	ldr	w0, [x24, #24]
    defc:	sub	w0, w0, w20
    df00:	str	w0, [x24, #24]
    df04:	ldr	w0, [x24, #32]
    df08:	sub	w0, w0, w20
    df0c:	str	w0, [x24, #32]
    df10:	ldr	w0, [x24, #36]
    df14:	sub	w20, w0, w20
    df18:	str	w20, [x24, #36]
    df1c:	b	e000 <lzma_crc64@@XZ_5.0+0x1624>
    df20:	ldr	w5, [x19, #40]
    df24:	ldr	x4, [sp, #128]
    df28:	ldr	x3, [x19, #32]
    df2c:	mov	x2, x25
    df30:	mov	x1, x26
    df34:	ldr	x0, [sp, #120]
    df38:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
    df3c:	mov	w20, #0x0                   	// #0
    df40:	cbz	w27, e03c <lzma_crc64@@XZ_5.0+0x1660>
    df44:	ldr	x0, [x26]
    df48:	cmp	x0, x25
    df4c:	cset	w20, eq  // eq = none
    df50:	b	e03c <lzma_crc64@@XZ_5.0+0x1660>
    df54:	str	w27, [x19, #136]
    df58:	str	w0, [x19, #64]
    df5c:	ldr	w1, [x19, #72]
    df60:	cbz	w1, df94 <lzma_crc64@@XZ_5.0+0x15b8>
    df64:	ldr	w0, [x19, #56]
    df68:	ldr	w2, [x19, #64]
    df6c:	cmp	w0, w2
    df70:	b.cs	df94 <lzma_crc64@@XZ_5.0+0x15b8>  // b.hs, b.nlast
    df74:	mov	w20, w23
    df78:	str	wzr, [x19, #72]
    df7c:	sub	w0, w0, w1
    df80:	str	w0, [x19, #56]
    df84:	ldr	x2, [x19, #88]
    df88:	mov	x0, x24
    df8c:	blr	x2
    df90:	cbnz	w20, e090 <lzma_crc64@@XZ_5.0+0x16b4>
    df94:	ldr	x5, [x19, #8]
    df98:	mov	x4, x21
    df9c:	mov	x3, x22
    dfa0:	mov	x2, x28
    dfa4:	mov	x1, x24
    dfa8:	ldr	x0, [x19]
    dfac:	blr	x5
    dfb0:	mov	w20, w0
    dfb4:	cbnz	w0, e07c <lzma_crc64@@XZ_5.0+0x16a0>
    dfb8:	ldr	x0, [x22]
    dfbc:	cmp	x0, x21
    dfc0:	b.cs	e08c <lzma_crc64@@XZ_5.0+0x16b0>  // b.hs, b.nlast
    dfc4:	ldr	x0, [x26]
    dfc8:	cmp	w27, #0x0
    dfcc:	ccmp	x0, x25, #0x0, eq  // eq = none
    dfd0:	b.cs	e084 <lzma_crc64@@XZ_5.0+0x16a8>  // b.hs, b.nlast
    dfd4:	ldr	w23, [x19, #136]
    dfd8:	cbnz	w23, df94 <lzma_crc64@@XZ_5.0+0x15b8>
    dfdc:	ldr	w20, [x19, #56]
    dfe0:	ldr	w0, [x19, #64]
    dfe4:	cmp	w20, w0
    dfe8:	b.cc	df94 <lzma_crc64@@XZ_5.0+0x15b8>  // b.lo, b.ul, b.last
    dfec:	ldr	w0, [x19, #40]
    dff0:	ldr	w1, [x19, #48]
    dff4:	sub	w0, w0, w1
    dff8:	cmp	w20, w0
    dffc:	b.cs	decc <lzma_crc64@@XZ_5.0+0x14f0>  // b.hs, b.nlast
    e000:	ldr	w0, [x19, #68]
    e004:	str	x0, [sp, #152]
    e008:	ldr	x8, [x19, #176]
    e00c:	cbz	x8, df20 <lzma_crc64@@XZ_5.0+0x1544>
    e010:	str	w27, [sp]
    e014:	ldr	w7, [x19, #40]
    e018:	ldr	x6, [sp, #128]
    e01c:	ldr	x5, [x19, #32]
    e020:	mov	x4, x25
    e024:	mov	x3, x26
    e028:	ldr	x2, [sp, #120]
    e02c:	ldr	x1, [sp, #136]
    e030:	ldr	x0, [x19, #152]
    e034:	blr	x8
    e038:	mov	w20, w0
    e03c:	ldr	x0, [sp, #152]
    e040:	str	w0, [x19, #68]
    e044:	cmp	w20, #0x1
    e048:	b.eq	df54 <lzma_crc64@@XZ_5.0+0x1578>  // b.none
    e04c:	ldr	w1, [x19, #48]
    e050:	cmp	w0, w1
    e054:	b.ls	e060 <lzma_crc64@@XZ_5.0+0x1684>  // b.plast
    e058:	sub	w0, w0, w1
    e05c:	str	w0, [x19, #64]
    e060:	ldr	w1, [x19, #72]
    e064:	cbz	w1, df90 <lzma_crc64@@XZ_5.0+0x15b4>
    e068:	ldr	w0, [x19, #56]
    e06c:	ldr	w2, [x19, #64]
    e070:	cmp	w0, w2
    e074:	b.cs	df90 <lzma_crc64@@XZ_5.0+0x15b4>  // b.hs, b.nlast
    e078:	b	df78 <lzma_crc64@@XZ_5.0+0x159c>
    e07c:	str	wzr, [x19, #136]
    e080:	b	e090 <lzma_crc64@@XZ_5.0+0x16b4>
    e084:	mov	w20, #0x0                   	// #0
    e088:	b	e090 <lzma_crc64@@XZ_5.0+0x16b4>
    e08c:	mov	w20, #0x0                   	// #0
    e090:	mov	w0, w20
    e094:	ldp	x19, x20, [sp, #32]
    e098:	ldp	x21, x22, [sp, #48]
    e09c:	ldp	x23, x24, [sp, #64]
    e0a0:	ldp	x25, x26, [sp, #80]
    e0a4:	ldp	x27, x28, [sp, #96]
    e0a8:	ldp	x29, x30, [sp, #16]
    e0ac:	add	sp, sp, #0xa0
    e0b0:	ret
    e0b4:	stp	x29, x30, [sp, #-144]!
    e0b8:	mov	x29, sp
    e0bc:	stp	xzr, xzr, [sp, #24]
    e0c0:	stp	xzr, xzr, [sp, #40]
    e0c4:	stp	xzr, xzr, [sp, #56]
    e0c8:	stp	xzr, xzr, [sp, #72]
    e0cc:	stp	xzr, xzr, [sp, #88]
    e0d0:	stp	xzr, xzr, [sp, #104]
    e0d4:	stp	xzr, xzr, [sp, #120]
    e0d8:	str	xzr, [sp, #136]
    e0dc:	mov	x2, x0
    e0e0:	mov	x1, #0x0                   	// #0
    e0e4:	add	x0, sp, #0x18
    e0e8:	bl	daa8 <lzma_crc64@@XZ_5.0+0x10cc>
    e0ec:	and	w0, w0, #0xff
    e0f0:	cbnz	w0, e114 <lzma_crc64@@XZ_5.0+0x1738>
    e0f4:	ldr	w0, [sp, #132]
    e0f8:	ldr	w1, [sp, #136]
    e0fc:	add	x0, x0, x1
    e100:	ldr	w1, [sp, #32]
    e104:	add	x1, x1, #0xe0
    e108:	add	x0, x1, x0, lsl #2
    e10c:	ldp	x29, x30, [sp], #144
    e110:	ret
    e114:	mov	x0, #0xffffffffffffffff    	// #-1
    e118:	b	e10c <lzma_crc64@@XZ_5.0+0x1730>
    e11c:	stp	x29, x30, [sp, #-128]!
    e120:	mov	x29, sp
    e124:	stp	x19, x20, [sp, #16]
    e128:	stp	x21, x22, [sp, #32]
    e12c:	str	x23, [sp, #48]
    e130:	mov	x20, x1
    e134:	mov	x23, x2
    e138:	mov	x22, x3
    e13c:	ldr	x19, [x0]
    e140:	cbz	x19, e170 <lzma_crc64@@XZ_5.0+0x1794>
    e144:	add	x3, sp, #0x40
    e148:	ldr	x2, [x23, #16]
    e14c:	mov	x1, x20
    e150:	mov	x0, x19
    e154:	blr	x22
    e158:	cbz	w0, e1fc <lzma_crc64@@XZ_5.0+0x1820>
    e15c:	ldp	x19, x20, [sp, #16]
    e160:	ldp	x21, x22, [sp, #32]
    e164:	ldr	x23, [sp, #48]
    e168:	ldp	x29, x30, [sp], #128
    e16c:	ret
    e170:	mov	x21, x0
    e174:	mov	x0, #0xe0                  	// #224
    e178:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    e17c:	mov	x19, x0
    e180:	cbz	x0, e344 <lzma_crc64@@XZ_5.0+0x1968>
    e184:	str	x0, [x21]
    e188:	adrp	x0, d000 <lzma_crc64@@XZ_5.0+0x624>
    e18c:	add	x0, x0, #0xe78
    e190:	str	x0, [x21, #24]
    e194:	adrp	x0, d000 <lzma_crc64@@XZ_5.0+0x624>
    e198:	add	x0, x0, #0xdfc
    e19c:	str	x0, [x21, #32]
    e1a0:	adrp	x0, d000 <lzma_crc64@@XZ_5.0+0x624>
    e1a4:	add	x0, x0, #0xd9c
    e1a8:	str	x0, [x21, #64]
    e1ac:	str	xzr, [x19]
    e1b0:	str	xzr, [x19, #8]
    e1b4:	str	xzr, [x19, #16]
    e1b8:	str	xzr, [x19, #32]
    e1bc:	str	wzr, [x19, #40]
    e1c0:	str	xzr, [x19, #96]
    e1c4:	str	xzr, [x19, #104]
    e1c8:	str	wzr, [x19, #140]
    e1cc:	str	wzr, [x19, #144]
    e1d0:	str	xzr, [x19, #152]
    e1d4:	mov	x0, #0xffffffffffffffff    	// #-1
    e1d8:	str	x0, [x19, #160]
    e1dc:	str	xzr, [x19, #168]
    e1e0:	str	xzr, [x19, #176]
    e1e4:	str	xzr, [x19, #184]
    e1e8:	str	xzr, [x19, #192]
    e1ec:	str	xzr, [x19, #200]
    e1f0:	str	xzr, [x19, #208]
    e1f4:	str	xzr, [x19, #216]
    e1f8:	b	e144 <lzma_crc64@@XZ_5.0+0x1768>
    e1fc:	add	x21, x19, #0x20
    e200:	add	x2, sp, #0x40
    e204:	mov	x1, x20
    e208:	mov	x0, x21
    e20c:	bl	daa8 <lzma_crc64@@XZ_5.0+0x10cc>
    e210:	and	w1, w0, #0xff
    e214:	mov	w0, #0x8                   	// #8
    e218:	cbnz	w1, e15c <lzma_crc64@@XZ_5.0+0x1780>
    e21c:	ldr	x0, [x19, #32]
    e220:	cbz	x0, e284 <lzma_crc64@@XZ_5.0+0x18a8>
    e224:	ldr	w1, [x19, #116]
    e228:	str	w1, [x19, #52]
    e22c:	str	wzr, [x19, #56]
    e230:	str	wzr, [x19, #60]
    e234:	str	wzr, [x19, #64]
    e238:	str	wzr, [x19, #68]
    e23c:	str	wzr, [x19, #72]
    e240:	ldr	x0, [x19, #96]
    e244:	cbz	x0, e29c <lzma_crc64@@XZ_5.0+0x18c0>
    e248:	ldr	w2, [x19, #140]
    e24c:	lsl	x2, x2, #2
    e250:	mov	w1, #0x0                   	// #0
    e254:	bl	3230 <memset@plt>
    e258:	str	wzr, [x19, #112]
    e25c:	ldr	x1, [sp, #112]
    e260:	cbz	x1, e26c <lzma_crc64@@XZ_5.0+0x1890>
    e264:	ldr	w0, [sp, #120]
    e268:	cbnz	w0, e300 <lzma_crc64@@XZ_5.0+0x1924>
    e26c:	str	wzr, [x19, #136]
    e270:	add	x2, x23, #0x18
    e274:	mov	x1, x20
    e278:	add	x0, x19, #0x98
    e27c:	bl	38d8 <lzma_version_string@@XZ_5.0+0x210>
    e280:	b	e15c <lzma_crc64@@XZ_5.0+0x1780>
    e284:	mov	x1, x20
    e288:	ldr	w0, [x19, #40]
    e28c:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    e290:	str	x0, [x19, #32]
    e294:	cbnz	x0, e224 <lzma_crc64@@XZ_5.0+0x1848>
    e298:	b	e2f8 <lzma_crc64@@XZ_5.0+0x191c>
    e29c:	add	x22, x19, #0x20
    e2a0:	ldr	w0, [x19, #140]
    e2a4:	mov	x1, x20
    e2a8:	lsl	x0, x0, #2
    e2ac:	bl	3714 <lzma_version_string@@XZ_5.0+0x4c>
    e2b0:	str	x0, [x19, #96]
    e2b4:	ldr	w0, [x19, #144]
    e2b8:	mov	x1, x20
    e2bc:	lsl	x0, x0, #2
    e2c0:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    e2c4:	str	x0, [x19, #104]
    e2c8:	ldr	x2, [x19, #96]
    e2cc:	cmp	x0, #0x0
    e2d0:	ccmp	x2, #0x0, #0x4, ne  // ne = any
    e2d4:	b.ne	e258 <lzma_crc64@@XZ_5.0+0x187c>  // b.any
    e2d8:	mov	x1, x20
    e2dc:	mov	x0, x2
    e2e0:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    e2e4:	str	xzr, [x22, #64]
    e2e8:	mov	x1, x20
    e2ec:	ldr	x0, [x22, #72]
    e2f0:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    e2f4:	str	xzr, [x22, #72]
    e2f8:	mov	w0, #0x5                   	// #5
    e2fc:	b	e15c <lzma_crc64@@XZ_5.0+0x1780>
    e300:	ldr	w2, [x19, #40]
    e304:	cmp	w2, w0
    e308:	csel	w2, w2, w0, ls  // ls = plast
    e30c:	str	w2, [x19, #68]
    e310:	mov	w2, w2
    e314:	mov	w0, w0
    e318:	sub	x0, x0, x2
    e31c:	add	x1, x1, x0
    e320:	ldr	x0, [x19, #32]
    e324:	bl	3090 <memcpy@plt>
    e328:	mov	w0, #0x1                   	// #1
    e32c:	str	w0, [x19, #136]
    e330:	ldr	x2, [x19, #88]
    e334:	ldr	w1, [x19, #68]
    e338:	mov	x0, x21
    e33c:	blr	x2
    e340:	b	e26c <lzma_crc64@@XZ_5.0+0x1890>
    e344:	mov	w0, #0x5                   	// #5
    e348:	b	e15c <lzma_crc64@@XZ_5.0+0x1780>

000000000000e34c <lzma_mf_is_supported@@XZ_5.0>:
    e34c:	mov	w1, w0
    e350:	cmp	w0, #0x4
    e354:	b.eq	e380 <lzma_mf_is_supported@@XZ_5.0+0x34>  // b.none
    e358:	mov	w0, #0x1                   	// #1
    e35c:	cmp	w1, #0x12
    e360:	b.ne	e368 <lzma_mf_is_supported@@XZ_5.0+0x1c>  // b.any
    e364:	ret
    e368:	cmp	w1, #0x3
    e36c:	cset	w0, eq  // eq = none
    e370:	cmp	w1, #0x13
    e374:	b.ne	e384 <lzma_mf_is_supported@@XZ_5.0+0x38>  // b.any
    e378:	mov	w0, #0x1                   	// #1
    e37c:	b	e364 <lzma_mf_is_supported@@XZ_5.0+0x18>
    e380:	mov	w0, #0x1                   	// #1
    e384:	cmp	w1, #0x14
    e388:	csinc	w0, w0, wzr, ne  // ne = any
    e38c:	b	e364 <lzma_mf_is_supported@@XZ_5.0+0x18>
    e390:	ldr	w1, [x0, #24]
    e394:	add	w1, w1, #0x1
    e398:	str	w1, [x0, #24]
    e39c:	ldr	w1, [x0, #40]
    e3a0:	add	w1, w1, #0x1
    e3a4:	str	w1, [x0, #40]
    e3a8:	ret
    e3ac:	mov	w15, w0
    e3b0:	mov	w9, w3
    e3b4:	ldr	x0, [sp]
    e3b8:	ldr	w11, [sp, #8]
    e3bc:	str	w3, [x5, w6, uxtw #2]
    e3c0:	sub	w8, w1, w3
    e3c4:	sub	w10, w4, #0x1
    e3c8:	cmp	w4, #0x0
    e3cc:	ccmp	w7, w8, #0x0, ne  // ne = any
    e3d0:	b.ls	e498 <lzma_mf_is_supported@@XZ_5.0+0x14c>  // b.plast
    e3d4:	sub	w14, w6, w1
    e3d8:	mov	w13, #0x0                   	// #0
    e3dc:	mov	w18, #0x1                   	// #1
    e3e0:	b	e428 <lzma_mf_is_supported@@XZ_5.0+0xdc>
    e3e4:	cmp	w11, w12
    e3e8:	b.cs	e408 <lzma_mf_is_supported@@XZ_5.0+0xbc>  // b.hs, b.nlast
    e3ec:	str	w12, [x0]
    e3f0:	sub	w8, w8, #0x1
    e3f4:	str	w8, [x0, #4]
    e3f8:	add	x0, x0, #0x8
    e3fc:	cmp	w15, w12
    e400:	b.eq	e498 <lzma_mf_is_supported@@XZ_5.0+0x14c>  // b.none
    e404:	mov	w11, w12
    e408:	sub	w8, w1, w9
    e40c:	cmp	w10, #0x0
    e410:	cset	w4, eq  // eq = none
    e414:	cmp	w8, w7
    e418:	cset	w3, cs  // cs = hs, nlast
    e41c:	orr	w4, w4, w3
    e420:	sub	w10, w10, #0x1
    e424:	cbnz	w4, e498 <lzma_mf_is_supported@@XZ_5.0+0x14c>
    e428:	sub	x4, x2, w8, uxtw
    e42c:	cmp	w6, w8
    e430:	csel	w3, w7, w13, cc  // cc = lo, ul, last
    e434:	add	w3, w3, w9
    e438:	add	w3, w3, w14
    e43c:	ldr	w9, [x5, x3, lsl #2]
    e440:	ldrb	w12, [x4, w11, uxtw]
    e444:	ldrb	w3, [x2, w11, uxtw]
    e448:	cmp	w12, w3
    e44c:	b.ne	e408 <lzma_mf_is_supported@@XZ_5.0+0xbc>  // b.any
    e450:	ldrb	w12, [x4]
    e454:	ldrb	w3, [x2]
    e458:	cmp	w12, w3
    e45c:	b.ne	e408 <lzma_mf_is_supported@@XZ_5.0+0xbc>  // b.any
    e460:	mov	x3, #0x1                   	// #1
    e464:	mov	w12, w18
    e468:	cmp	w15, #0x1
    e46c:	b.ls	e3e4 <lzma_mf_is_supported@@XZ_5.0+0x98>  // b.plast
    e470:	mov	w12, w3
    e474:	ldrb	w17, [x4, x3]
    e478:	ldrb	w16, [x2, x3]
    e47c:	cmp	w17, w16
    e480:	b.ne	e3e4 <lzma_mf_is_supported@@XZ_5.0+0x98>  // b.any
    e484:	add	w12, w3, #0x1
    e488:	add	x3, x3, #0x1
    e48c:	cmp	w15, w3
    e490:	b.hi	e470 <lzma_mf_is_supported@@XZ_5.0+0x124>  // b.pmore
    e494:	b	e3e4 <lzma_mf_is_supported@@XZ_5.0+0x98>
    e498:	ret
    e49c:	stp	x29, x30, [sp, #-48]!
    e4a0:	mov	x29, sp
    e4a4:	stp	x19, x20, [sp, #16]
    e4a8:	stp	x21, x22, [sp, #32]
    e4ac:	ldr	x20, [sp, #48]
    e4b0:	ldr	w21, [sp, #56]
    e4b4:	ubfiz	x17, x6, #3, #31
    e4b8:	add	x17, x17, #0x4
    e4bc:	add	x18, x5, x17
    e4c0:	sub	x17, x17, #0x4
    e4c4:	add	x17, x5, x17
    e4c8:	sub	w11, w1, w3
    e4cc:	cmp	w4, #0x0
    e4d0:	ccmp	w7, w11, #0x0, ne  // ne = any
    e4d4:	b.ls	e4f0 <lzma_mf_is_supported@@XZ_5.0+0x1a4>  // b.plast
    e4d8:	sub	w12, w4, #0x1
    e4dc:	mov	w16, #0x0                   	// #0
    e4e0:	mov	w15, #0x0                   	// #0
    e4e4:	sub	w19, w6, w1
    e4e8:	mov	w30, #0x0                   	// #0
    e4ec:	b	e5ac <lzma_mf_is_supported@@XZ_5.0+0x260>
    e4f0:	str	wzr, [x18]
    e4f4:	str	wzr, [x17]
    e4f8:	mov	x0, x20
    e4fc:	ldp	x19, x20, [sp, #16]
    e500:	ldp	x21, x22, [sp, #32]
    e504:	ldp	x29, x30, [sp], #48
    e508:	ret
    e50c:	add	w8, w8, #0x1
    e510:	cmp	w8, w0
    e514:	b.cs	e540 <lzma_mf_is_supported@@XZ_5.0+0x1f4>  // b.hs, b.nlast
    e518:	mov	w9, w8
    e51c:	mov	w8, w9
    e520:	ldrb	w14, [x10, x9]
    e524:	ldrb	w13, [x2, x9]
    e528:	cmp	w14, w13
    e52c:	b.ne	e540 <lzma_mf_is_supported@@XZ_5.0+0x1f4>  // b.any
    e530:	add	w8, w9, #0x1
    e534:	add	x9, x9, #0x1
    e538:	cmp	w0, w9
    e53c:	b.hi	e51c <lzma_mf_is_supported@@XZ_5.0+0x1d0>  // b.pmore
    e540:	cmp	w21, w8
    e544:	b.cs	e5e4 <lzma_mf_is_supported@@XZ_5.0+0x298>  // b.hs, b.nlast
    e548:	str	w8, [x20]
    e54c:	sub	w11, w11, #0x1
    e550:	str	w11, [x20, #4]
    e554:	add	x20, x20, #0x8
    e558:	cmp	w0, w8
    e55c:	b.eq	e568 <lzma_mf_is_supported@@XZ_5.0+0x21c>  // b.none
    e560:	mov	w21, w8
    e564:	b	e5e4 <lzma_mf_is_supported@@XZ_5.0+0x298>
    e568:	ldr	w0, [x4]
    e56c:	str	w0, [x17]
    e570:	ldr	w0, [x4, #4]
    e574:	str	w0, [x18]
    e578:	mov	x0, x20
    e57c:	b	e4fc <lzma_mf_is_supported@@XZ_5.0+0x1b0>
    e580:	str	w3, [x18]
    e584:	ldr	w3, [x5, x22, lsl #2]
    e588:	mov	w15, w8
    e58c:	mov	x18, x4
    e590:	sub	w11, w1, w3
    e594:	cmp	w11, w7
    e598:	cset	w4, cs  // cs = hs, nlast
    e59c:	cmp	w12, #0x0
    e5a0:	csinc	w4, w4, wzr, ne  // ne = any
    e5a4:	sub	w12, w12, #0x1
    e5a8:	cbnz	w4, e4f0 <lzma_mf_is_supported@@XZ_5.0+0x1a4>
    e5ac:	cmp	w6, w11
    e5b0:	csel	w4, w7, w30, cc  // cc = lo, ul, last
    e5b4:	add	w4, w4, w3
    e5b8:	add	w4, w4, w19
    e5bc:	lsl	w22, w4, #1
    e5c0:	ubfiz	x4, x4, #3, #31
    e5c4:	add	x4, x5, x4
    e5c8:	sub	x10, x2, w11, uxtw
    e5cc:	cmp	w15, w16
    e5d0:	csel	w8, w15, w16, ls  // ls = plast
    e5d4:	ldrb	w13, [x10, w8, uxtw]
    e5d8:	ldrb	w9, [x2, w8, uxtw]
    e5dc:	cmp	w13, w9
    e5e0:	b.eq	e50c <lzma_mf_is_supported@@XZ_5.0+0x1c0>  // b.none
    e5e4:	ldrb	w10, [x10, w8, uxtw]
    e5e8:	ldrb	w9, [x2, w8, uxtw]
    e5ec:	cmp	w10, w9
    e5f0:	b.cs	e580 <lzma_mf_is_supported@@XZ_5.0+0x234>  // b.hs, b.nlast
    e5f4:	str	w3, [x17]
    e5f8:	add	x17, x4, #0x4
    e5fc:	ldr	w3, [x4, #4]
    e600:	mov	w16, w8
    e604:	b	e590 <lzma_mf_is_supported@@XZ_5.0+0x244>
    e608:	ubfiz	x16, x6, #3, #31
    e60c:	add	x16, x16, #0x4
    e610:	add	x17, x5, x16
    e614:	sub	x16, x16, #0x4
    e618:	add	x16, x5, x16
    e61c:	sub	w10, w1, w3
    e620:	cmp	w4, #0x0
    e624:	ccmp	w7, w10, #0x0, ne  // ne = any
    e628:	b.ls	e73c <lzma_mf_is_supported@@XZ_5.0+0x3f0>  // b.plast
    e62c:	stp	x29, x30, [sp, #-32]!
    e630:	mov	x29, sp
    e634:	str	x19, [sp, #16]
    e638:	sub	w11, w4, #0x1
    e63c:	mov	w15, #0x0                   	// #0
    e640:	mov	w14, #0x0                   	// #0
    e644:	sub	w30, w6, w1
    e648:	mov	w18, #0x0                   	// #0
    e64c:	b	e6e0 <lzma_mf_is_supported@@XZ_5.0+0x394>
    e650:	str	wzr, [x17]
    e654:	str	wzr, [x16]
    e658:	ldr	x19, [sp, #16]
    e65c:	ldp	x29, x30, [sp], #32
    e660:	ret
    e664:	add	w9, w9, #0x1
    e668:	cmp	w9, w0
    e66c:	b.cs	e698 <lzma_mf_is_supported@@XZ_5.0+0x34c>  // b.hs, b.nlast
    e670:	mov	w8, w9
    e674:	mov	w9, w8
    e678:	ldrb	w13, [x10, x8]
    e67c:	ldrb	w12, [x2, x8]
    e680:	cmp	w13, w12
    e684:	b.ne	e698 <lzma_mf_is_supported@@XZ_5.0+0x34c>  // b.any
    e688:	add	w9, w8, #0x1
    e68c:	add	x8, x8, #0x1
    e690:	cmp	w0, w8
    e694:	b.hi	e674 <lzma_mf_is_supported@@XZ_5.0+0x328>  // b.pmore
    e698:	cmp	w0, w9
    e69c:	b.ne	e718 <lzma_mf_is_supported@@XZ_5.0+0x3cc>  // b.any
    e6a0:	ldr	w0, [x4]
    e6a4:	str	w0, [x16]
    e6a8:	ldr	w0, [x4, #4]
    e6ac:	str	w0, [x17]
    e6b0:	b	e658 <lzma_mf_is_supported@@XZ_5.0+0x30c>
    e6b4:	str	w3, [x17]
    e6b8:	ldr	w3, [x5, x19, lsl #2]
    e6bc:	mov	w14, w9
    e6c0:	mov	x17, x4
    e6c4:	sub	w10, w1, w3
    e6c8:	cmp	w10, w7
    e6cc:	cset	w4, cs  // cs = hs, nlast
    e6d0:	cmp	w11, #0x0
    e6d4:	csinc	w4, w4, wzr, ne  // ne = any
    e6d8:	sub	w11, w11, #0x1
    e6dc:	cbnz	w4, e650 <lzma_mf_is_supported@@XZ_5.0+0x304>
    e6e0:	cmp	w6, w10
    e6e4:	csel	w4, w7, w18, cc  // cc = lo, ul, last
    e6e8:	add	w4, w4, w3
    e6ec:	add	w4, w4, w30
    e6f0:	lsl	w19, w4, #1
    e6f4:	ubfiz	x4, x4, #3, #31
    e6f8:	add	x4, x5, x4
    e6fc:	sub	x10, x2, w10, uxtw
    e700:	cmp	w14, w15
    e704:	csel	w9, w14, w15, ls  // ls = plast
    e708:	ldrb	w12, [x10, w9, uxtw]
    e70c:	ldrb	w8, [x2, w9, uxtw]
    e710:	cmp	w12, w8
    e714:	b.eq	e664 <lzma_mf_is_supported@@XZ_5.0+0x318>  // b.none
    e718:	ldrb	w10, [x10, w9, uxtw]
    e71c:	ldrb	w8, [x2, w9, uxtw]
    e720:	cmp	w10, w8
    e724:	b.cs	e6b4 <lzma_mf_is_supported@@XZ_5.0+0x368>  // b.hs, b.nlast
    e728:	str	w3, [x16]
    e72c:	add	x16, x4, #0x4
    e730:	ldr	w3, [x4, #4]
    e734:	mov	w15, w9
    e738:	b	e6c4 <lzma_mf_is_supported@@XZ_5.0+0x378>
    e73c:	str	wzr, [x17]
    e740:	str	wzr, [x16]
    e744:	ret
    e748:	ldr	w1, [x0, #80]
    e74c:	add	w1, w1, #0x1
    e750:	ldr	w2, [x0, #84]
    e754:	cmp	w1, w2
    e758:	csel	w1, w1, wzr, ne  // ne = any
    e75c:	str	w1, [x0, #80]
    e760:	ldr	w1, [x0, #24]
    e764:	add	w1, w1, #0x1
    e768:	str	w1, [x0, #24]
    e76c:	ldr	w3, [x0, #20]
    e770:	add	w1, w1, w3
    e774:	cmn	w1, #0x1
    e778:	b.eq	e780 <lzma_mf_is_supported@@XZ_5.0+0x434>  // b.none
    e77c:	ret
    e780:	mvn	w1, w2
    e784:	ldr	w2, [x0, #108]
    e788:	cbz	w2, e7c0 <lzma_mf_is_supported@@XZ_5.0+0x474>
    e78c:	mov	w2, #0x0                   	// #0
    e790:	mov	w7, #0x0                   	// #0
    e794:	mov	w5, w2
    e798:	ldr	x4, [x0, #64]
    e79c:	ldr	w6, [x4, x5, lsl #2]
    e7a0:	sub	w3, w6, w1
    e7a4:	cmp	w1, w6
    e7a8:	csel	w3, w3, w7, cc  // cc = lo, ul, last
    e7ac:	str	w3, [x4, x5, lsl #2]
    e7b0:	add	w2, w2, #0x1
    e7b4:	ldr	w3, [x0, #108]
    e7b8:	cmp	w2, w3
    e7bc:	b.cc	e794 <lzma_mf_is_supported@@XZ_5.0+0x448>  // b.lo, b.ul, b.last
    e7c0:	ldr	w2, [x0, #112]
    e7c4:	cbz	w2, e7fc <lzma_mf_is_supported@@XZ_5.0+0x4b0>
    e7c8:	mov	w2, #0x0                   	// #0
    e7cc:	mov	w7, #0x0                   	// #0
    e7d0:	mov	w5, w2
    e7d4:	ldr	x4, [x0, #72]
    e7d8:	ldr	w6, [x4, x5, lsl #2]
    e7dc:	sub	w3, w6, w1
    e7e0:	cmp	w1, w6
    e7e4:	csel	w3, w3, w7, cc  // cc = lo, ul, last
    e7e8:	str	w3, [x4, x5, lsl #2]
    e7ec:	add	w2, w2, #0x1
    e7f0:	ldr	w3, [x0, #112]
    e7f4:	cmp	w2, w3
    e7f8:	b.cc	e7d0 <lzma_mf_is_supported@@XZ_5.0+0x484>  // b.lo, b.ul, b.last
    e7fc:	ldr	w2, [x0, #20]
    e800:	sub	w1, w2, w1
    e804:	str	w1, [x0, #20]
    e808:	b	e77c <lzma_mf_is_supported@@XZ_5.0+0x430>
    e80c:	stp	x29, x30, [sp, #-48]!
    e810:	mov	x29, sp
    e814:	stp	x19, x20, [sp, #16]
    e818:	str	x21, [sp, #32]
    e81c:	mov	x19, x0
    e820:	mov	x21, x1
    e824:	mov	x20, x2
    e828:	ldr	x2, [x0, #48]
    e82c:	mov	x1, x20
    e830:	blr	x2
    e834:	mov	w3, w0
    e838:	cbz	w0, e858 <lzma_mf_is_supported@@XZ_5.0+0x50c>
    e83c:	sub	w0, w0, #0x1
    e840:	lsl	x0, x0, #3
    e844:	add	x4, x20, x0
    e848:	ldr	w0, [x20, x0]
    e84c:	ldr	w1, [x19, #96]
    e850:	cmp	w1, w0
    e854:	b.eq	e878 <lzma_mf_is_supported@@XZ_5.0+0x52c>  // b.none
    e858:	str	w3, [x21]
    e85c:	ldr	w1, [x19, #28]
    e860:	add	w1, w1, #0x1
    e864:	str	w1, [x19, #28]
    e868:	ldp	x19, x20, [sp, #16]
    e86c:	ldr	x21, [sp, #32]
    e870:	ldp	x29, x30, [sp], #48
    e874:	ret
    e878:	ldr	w1, [x19, #24]
    e87c:	ldr	w5, [x19, #36]
    e880:	add	w5, w5, #0x1
    e884:	sub	w2, w5, w1
    e888:	ldr	w5, [x19, #100]
    e88c:	cmp	w5, w2
    e890:	csel	w5, w5, w2, ls  // ls = plast
    e894:	ldr	x2, [x19]
    e898:	mov	w1, w1
    e89c:	sub	x1, x1, #0x1
    e8a0:	ldr	w6, [x4, #4]
    e8a4:	mvn	x6, x6
    e8a8:	cmp	w5, w0
    e8ac:	b.ls	e858 <lzma_mf_is_supported@@XZ_5.0+0x50c>  // b.plast
    e8b0:	add	x1, x1, w0, uxtw
    e8b4:	add	x2, x2, x1
    e8b8:	ldrb	w4, [x2]
    e8bc:	ldrb	w1, [x2, x6]
    e8c0:	cmp	w4, w1
    e8c4:	b.ne	e858 <lzma_mf_is_supported@@XZ_5.0+0x50c>  // b.any
    e8c8:	add	w0, w0, #0x1
    e8cc:	add	x2, x2, #0x1
    e8d0:	cmp	w5, w0
    e8d4:	b.ne	e8b8 <lzma_mf_is_supported@@XZ_5.0+0x56c>  // b.any
    e8d8:	mov	w0, w5
    e8dc:	b	e858 <lzma_mf_is_supported@@XZ_5.0+0x50c>
    e8e0:	sub	sp, sp, #0x30
    e8e4:	stp	x29, x30, [sp, #16]
    e8e8:	add	x29, sp, #0x10
    e8ec:	stp	x19, x20, [sp, #32]
    e8f0:	mov	x19, x0
    e8f4:	mov	x20, x1
    e8f8:	ldr	w5, [x0, #24]
    e8fc:	ldr	w1, [x0, #36]
    e900:	sub	w1, w1, w5
    e904:	ldr	w0, [x0, #96]
    e908:	cmp	w0, w1
    e90c:	b.ls	e91c <lzma_mf_is_supported@@XZ_5.0+0x5d0>  // b.plast
    e910:	mov	w0, w1
    e914:	cmp	w1, #0x2
    e918:	b.ls	e9e8 <lzma_mf_is_supported@@XZ_5.0+0x69c>  // b.plast
    e91c:	ldr	x8, [x19]
    e920:	add	x2, x8, w5, uxtw
    e924:	ldr	w1, [x19, #20]
    e928:	add	w1, w5, w1
    e92c:	ldrb	w6, [x8, w5, uxtw]
    e930:	ldrb	w4, [x2, #1]
    e934:	adrp	x3, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    e938:	ldr	x3, [x3, #3952]
    e93c:	ldr	w3, [x3, x6, lsl #2]
    e940:	eor	w3, w4, w3
    e944:	ldr	x7, [x19, #64]
    e948:	and	x9, x3, #0x3ff
    e94c:	ldr	w6, [x7, x9, lsl #2]
    e950:	sub	w6, w1, w6
    e954:	ldrb	w4, [x2, #2]
    e958:	eor	w4, w3, w4, lsl #8
    e95c:	ldr	w3, [x19, #88]
    e960:	and	w4, w4, w3
    e964:	add	w4, w4, #0x400
    e968:	ldr	w3, [x7, x4, lsl #2]
    e96c:	str	w1, [x7, x9, lsl #2]
    e970:	ldr	x7, [x19, #64]
    e974:	str	w1, [x7, x4, lsl #2]
    e978:	ldr	w4, [x19, #84]
    e97c:	cmp	w4, w6
    e980:	b.ls	ea5c <lzma_mf_is_supported@@XZ_5.0+0x710>  // b.plast
    e984:	sub	x9, x2, w6, uxtw
    e988:	ldrb	w10, [x9]
    e98c:	ldrb	w7, [x8, w5, uxtw]
    e990:	mov	w5, #0x2                   	// #2
    e994:	mov	w4, #0x0                   	// #0
    e998:	cmp	w10, w7
    e99c:	b.eq	e9f8 <lzma_mf_is_supported@@XZ_5.0+0x6ac>  // b.none
    e9a0:	str	w5, [sp, #8]
    e9a4:	mov	w4, w4
    e9a8:	add	x4, x20, x4, lsl #3
    e9ac:	str	x4, [sp]
    e9b0:	ldr	w7, [x19, #84]
    e9b4:	ldr	w6, [x19, #80]
    e9b8:	ldr	x5, [x19, #72]
    e9bc:	ldr	w4, [x19, #92]
    e9c0:	bl	e3ac <lzma_mf_is_supported@@XZ_5.0+0x60>
    e9c4:	sub	x20, x0, x20
    e9c8:	ubfx	x20, x20, #3, #32
    e9cc:	mov	x0, x19
    e9d0:	bl	e748 <lzma_mf_is_supported@@XZ_5.0+0x3fc>
    e9d4:	mov	w0, w20
    e9d8:	ldp	x19, x20, [sp, #32]
    e9dc:	ldp	x29, x30, [sp, #16]
    e9e0:	add	sp, sp, #0x30
    e9e4:	ret
    e9e8:	mov	x0, x19
    e9ec:	bl	e390 <lzma_mf_is_supported@@XZ_5.0+0x44>
    e9f0:	mov	w20, #0x0                   	// #0
    e9f4:	b	e9d4 <lzma_mf_is_supported@@XZ_5.0+0x688>
    e9f8:	mov	x4, #0x2                   	// #2
    e9fc:	cmp	w0, w5
    ea00:	b.ls	ea28 <lzma_mf_is_supported@@XZ_5.0+0x6dc>  // b.plast
    ea04:	mov	w5, w4
    ea08:	ldrb	w8, [x9, x4]
    ea0c:	ldrb	w7, [x2, x4]
    ea10:	cmp	w8, w7
    ea14:	b.ne	ea28 <lzma_mf_is_supported@@XZ_5.0+0x6dc>  // b.any
    ea18:	add	w5, w4, #0x1
    ea1c:	add	x4, x4, #0x1
    ea20:	cmp	w0, w4
    ea24:	b.hi	ea04 <lzma_mf_is_supported@@XZ_5.0+0x6b8>  // b.pmore
    ea28:	str	w5, [x20]
    ea2c:	sub	w6, w6, #0x1
    ea30:	str	w6, [x20, #4]
    ea34:	mov	w4, #0x1                   	// #1
    ea38:	cmp	w0, w5
    ea3c:	b.ne	e9a0 <lzma_mf_is_supported@@XZ_5.0+0x654>  // b.any
    ea40:	ldr	w1, [x19, #80]
    ea44:	ldr	x0, [x19, #72]
    ea48:	str	w3, [x0, x1, lsl #2]
    ea4c:	mov	x0, x19
    ea50:	bl	e748 <lzma_mf_is_supported@@XZ_5.0+0x3fc>
    ea54:	mov	w20, #0x1                   	// #1
    ea58:	b	e9d4 <lzma_mf_is_supported@@XZ_5.0+0x688>
    ea5c:	mov	w5, #0x2                   	// #2
    ea60:	mov	w4, #0x0                   	// #0
    ea64:	b	e9a0 <lzma_mf_is_supported@@XZ_5.0+0x654>
    ea68:	stp	x29, x30, [sp, #-48]!
    ea6c:	mov	x29, sp
    ea70:	stp	x19, x20, [sp, #16]
    ea74:	str	x21, [sp, #32]
    ea78:	mov	x19, x0
    ea7c:	mov	w20, w1
    ea80:	adrp	x21, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    ea84:	ldr	x21, [x21, #3952]
    ea88:	b	ea9c <lzma_mf_is_supported@@XZ_5.0+0x750>
    ea8c:	mov	x0, x19
    ea90:	bl	e390 <lzma_mf_is_supported@@XZ_5.0+0x44>
    ea94:	subs	w20, w20, #0x1
    ea98:	b.eq	eb14 <lzma_mf_is_supported@@XZ_5.0+0x7c8>  // b.none
    ea9c:	ldr	w0, [x19, #24]
    eaa0:	ldr	w1, [x19, #36]
    eaa4:	sub	w1, w1, w0
    eaa8:	cmp	w1, #0x2
    eaac:	b.ls	ea8c <lzma_mf_is_supported@@XZ_5.0+0x740>  // b.plast
    eab0:	ldr	x2, [x19]
    eab4:	add	x4, x2, w0, uxtw
    eab8:	ldr	w1, [x19, #20]
    eabc:	add	w1, w0, w1
    eac0:	ldrb	w0, [x2, w0, uxtw]
    eac4:	ldrb	w2, [x4, #1]
    eac8:	ldr	w0, [x21, x0, lsl #2]
    eacc:	eor	w2, w2, w0
    ead0:	ldr	x3, [x19, #64]
    ead4:	ldrb	w0, [x4, #2]
    ead8:	eor	w0, w2, w0, lsl #8
    eadc:	ldr	w4, [x19, #88]
    eae0:	and	w0, w0, w4
    eae4:	add	w0, w0, #0x400
    eae8:	ldr	w4, [x3, x0, lsl #2]
    eaec:	and	x2, x2, #0x3ff
    eaf0:	str	w1, [x3, x2, lsl #2]
    eaf4:	ldr	x2, [x19, #64]
    eaf8:	str	w1, [x2, x0, lsl #2]
    eafc:	ldr	w1, [x19, #80]
    eb00:	ldr	x0, [x19, #72]
    eb04:	str	w4, [x0, x1, lsl #2]
    eb08:	mov	x0, x19
    eb0c:	bl	e748 <lzma_mf_is_supported@@XZ_5.0+0x3fc>
    eb10:	b	ea94 <lzma_mf_is_supported@@XZ_5.0+0x748>
    eb14:	ldp	x19, x20, [sp, #16]
    eb18:	ldr	x21, [sp, #32]
    eb1c:	ldp	x29, x30, [sp], #48
    eb20:	ret
    eb24:	sub	sp, sp, #0x40
    eb28:	stp	x29, x30, [sp, #16]
    eb2c:	add	x29, sp, #0x10
    eb30:	stp	x19, x20, [sp, #32]
    eb34:	str	x21, [sp, #48]
    eb38:	mov	x19, x0
    eb3c:	mov	x21, x1
    eb40:	ldr	w7, [x0, #24]
    eb44:	ldr	w1, [x0, #36]
    eb48:	sub	w1, w1, w7
    eb4c:	ldr	w0, [x0, #96]
    eb50:	cmp	w0, w1
    eb54:	b.ls	eb64 <lzma_mf_is_supported@@XZ_5.0+0x818>  // b.plast
    eb58:	mov	w0, w1
    eb5c:	cmp	w1, #0x3
    eb60:	b.ls	eca4 <lzma_mf_is_supported@@XZ_5.0+0x958>  // b.plast
    eb64:	ldr	x12, [x19]
    eb68:	add	x2, x12, w7, uxtw
    eb6c:	ldr	w1, [x19, #20]
    eb70:	add	w1, w7, w1
    eb74:	adrp	x10, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    eb78:	ldr	x10, [x10, #3952]
    eb7c:	ldrb	w3, [x12, w7, uxtw]
    eb80:	ldrb	w6, [x2, #1]
    eb84:	ldr	w3, [x10, x3, lsl #2]
    eb88:	eor	w6, w6, w3
    eb8c:	ldrb	w5, [x2, #2]
    eb90:	eor	w3, w6, w5, lsl #8
    eb94:	ldr	x9, [x19, #64]
    eb98:	and	x6, x6, #0x3ff
    eb9c:	ldr	w13, [x9, x6, lsl #2]
    eba0:	sub	w4, w1, w13
    eba4:	and	x8, x3, #0xffff
    eba8:	add	x8, x8, #0x400
    ebac:	ldr	w11, [x9, x8, lsl #2]
    ebb0:	ldrb	w5, [x2, #3]
    ebb4:	ldr	w5, [x10, x5, lsl #2]
    ebb8:	eor	w5, w3, w5, lsl #5
    ebbc:	ldr	w3, [x19, #88]
    ebc0:	and	w5, w5, w3
    ebc4:	add	w5, w5, #0x10, lsl #12
    ebc8:	add	w5, w5, #0x400
    ebcc:	ldr	w3, [x9, x5, lsl #2]
    ebd0:	str	w1, [x9, x6, lsl #2]
    ebd4:	ldr	x6, [x19, #64]
    ebd8:	str	w1, [x6, x8, lsl #2]
    ebdc:	ldr	x6, [x19, #64]
    ebe0:	str	w1, [x6, x5, lsl #2]
    ebe4:	ldr	w5, [x19, #84]
    ebe8:	cmp	w5, w4
    ebec:	b.ls	ec04 <lzma_mf_is_supported@@XZ_5.0+0x8b8>  // b.plast
    ebf0:	sub	x5, x2, w4, uxtw
    ebf4:	ldrb	w6, [x5]
    ebf8:	ldrb	w5, [x12, w7, uxtw]
    ebfc:	cmp	w6, w5
    ec00:	b.eq	ecb4 <lzma_mf_is_supported@@XZ_5.0+0x968>  // b.none
    ec04:	cmp	w13, w11
    ec08:	b.eq	ed88 <lzma_mf_is_supported@@XZ_5.0+0xa3c>  // b.none
    ec0c:	sub	w11, w1, w11
    ec10:	ldr	w5, [x19, #84]
    ec14:	mov	w8, #0x1                   	// #1
    ec18:	mov	w20, #0x0                   	// #0
    ec1c:	cmp	w5, w11
    ec20:	b.ls	ed94 <lzma_mf_is_supported@@XZ_5.0+0xa48>  // b.plast
    ec24:	sub	x5, x2, w11, uxtw
    ec28:	ldrb	w6, [x5]
    ec2c:	ldrb	w5, [x12, w7, uxtw]
    ec30:	cmp	w6, w5
    ec34:	b.eq	ecfc <lzma_mf_is_supported@@XZ_5.0+0x9b0>  // b.none
    ec38:	cbz	w20, ed80 <lzma_mf_is_supported@@XZ_5.0+0xa34>
    ec3c:	mov	w9, w4
    ec40:	mov	w5, w8
    ec44:	mov	x4, #0x0                   	// #0
    ec48:	cmp	w0, w8
    ec4c:	b.ls	ed18 <lzma_mf_is_supported@@XZ_5.0+0x9cc>  // b.plast
    ec50:	mov	w8, w8
    ec54:	sub	x9, x8, x9
    ec58:	add	x9, x2, x9
    ec5c:	add	x8, x2, x8
    ec60:	ldrb	w7, [x9, x4]
    ec64:	ldrb	w6, [x8, x4]
    ec68:	cmp	w7, w6
    ec6c:	b.ne	ed18 <lzma_mf_is_supported@@XZ_5.0+0x9cc>  // b.any
    ec70:	add	w5, w5, #0x1
    ec74:	add	x4, x4, #0x1
    ec78:	cmp	w0, w5
    ec7c:	b.ne	ec60 <lzma_mf_is_supported@@XZ_5.0+0x914>  // b.any
    ec80:	sub	w0, w20, #0x1
    ec84:	lsl	x0, x0, #3
    ec88:	str	w5, [x21, x0]
    ec8c:	ldr	w1, [x19, #80]
    ec90:	ldr	x0, [x19, #72]
    ec94:	str	w3, [x0, x1, lsl #2]
    ec98:	mov	x0, x19
    ec9c:	bl	e748 <lzma_mf_is_supported@@XZ_5.0+0x3fc>
    eca0:	b	ed68 <lzma_mf_is_supported@@XZ_5.0+0xa1c>
    eca4:	mov	x0, x19
    eca8:	bl	e390 <lzma_mf_is_supported@@XZ_5.0+0x44>
    ecac:	mov	w20, #0x0                   	// #0
    ecb0:	b	ed68 <lzma_mf_is_supported@@XZ_5.0+0xa1c>
    ecb4:	mov	w5, #0x2                   	// #2
    ecb8:	str	w5, [x21]
    ecbc:	sub	w5, w4, #0x1
    ecc0:	str	w5, [x21, #4]
    ecc4:	mov	w8, #0x2                   	// #2
    ecc8:	mov	w20, #0x1                   	// #1
    eccc:	cmp	w13, w11
    ecd0:	b.eq	ec3c <lzma_mf_is_supported@@XZ_5.0+0x8f0>  // b.none
    ecd4:	sub	w11, w1, w11
    ecd8:	ldr	w5, [x19, #84]
    ecdc:	cmp	w5, w11
    ece0:	b.hi	ecf0 <lzma_mf_is_supported@@XZ_5.0+0x9a4>  // b.pmore
    ece4:	mov	w8, #0x2                   	// #2
    ece8:	mov	w20, #0x1                   	// #1
    ecec:	b	ec3c <lzma_mf_is_supported@@XZ_5.0+0x8f0>
    ecf0:	mov	w8, #0x2                   	// #2
    ecf4:	mov	w20, #0x1                   	// #1
    ecf8:	b	ec24 <lzma_mf_is_supported@@XZ_5.0+0x8d8>
    ecfc:	add	x4, x21, w20, uxtw #3
    ed00:	sub	w5, w11, #0x1
    ed04:	str	w5, [x4, #4]
    ed08:	mov	w4, w11
    ed0c:	add	w20, w20, #0x1
    ed10:	mov	w8, #0x3                   	// #3
    ed14:	b	ec3c <lzma_mf_is_supported@@XZ_5.0+0x8f0>
    ed18:	sub	w4, w20, #0x1
    ed1c:	lsl	x4, x4, #3
    ed20:	str	w5, [x21, x4]
    ed24:	cmp	w0, w5
    ed28:	b.eq	ec8c <lzma_mf_is_supported@@XZ_5.0+0x940>  // b.none
    ed2c:	cmp	w5, #0x3
    ed30:	mov	w4, #0x3                   	// #3
    ed34:	csel	w5, w5, w4, cs  // cs = hs, nlast
    ed38:	str	w5, [sp, #8]
    ed3c:	add	x20, x21, w20, uxtw #3
    ed40:	str	x20, [sp]
    ed44:	ldr	w7, [x19, #84]
    ed48:	ldr	w6, [x19, #80]
    ed4c:	ldr	x5, [x19, #72]
    ed50:	ldr	w4, [x19, #92]
    ed54:	bl	e3ac <lzma_mf_is_supported@@XZ_5.0+0x60>
    ed58:	sub	x20, x0, x21
    ed5c:	ubfx	x20, x20, #3, #32
    ed60:	mov	x0, x19
    ed64:	bl	e748 <lzma_mf_is_supported@@XZ_5.0+0x3fc>
    ed68:	mov	w0, w20
    ed6c:	ldp	x19, x20, [sp, #32]
    ed70:	ldr	x21, [sp, #48]
    ed74:	ldp	x29, x30, [sp, #16]
    ed78:	add	sp, sp, #0x40
    ed7c:	ret
    ed80:	mov	w5, w8
    ed84:	b	ed2c <lzma_mf_is_supported@@XZ_5.0+0x9e0>
    ed88:	mov	w20, #0x0                   	// #0
    ed8c:	mov	w5, #0x1                   	// #1
    ed90:	b	ed2c <lzma_mf_is_supported@@XZ_5.0+0x9e0>
    ed94:	mov	w5, w8
    ed98:	b	ed2c <lzma_mf_is_supported@@XZ_5.0+0x9e0>
    ed9c:	stp	x29, x30, [sp, #-48]!
    eda0:	mov	x29, sp
    eda4:	stp	x19, x20, [sp, #16]
    eda8:	stp	x21, x22, [sp, #32]
    edac:	mov	x19, x0
    edb0:	mov	w20, w1
    edb4:	adrp	x21, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    edb8:	ldr	x21, [x21, #3952]
    edbc:	mov	w22, #0x400                 	// #1024
    edc0:	movk	w22, #0x1, lsl #16
    edc4:	b	edd8 <lzma_mf_is_supported@@XZ_5.0+0xa8c>
    edc8:	mov	x0, x19
    edcc:	bl	e390 <lzma_mf_is_supported@@XZ_5.0+0x44>
    edd0:	subs	w20, w20, #0x1
    edd4:	b.eq	ee6c <lzma_mf_is_supported@@XZ_5.0+0xb20>  // b.none
    edd8:	ldr	w0, [x19, #24]
    eddc:	ldr	w1, [x19, #36]
    ede0:	sub	w1, w1, w0
    ede4:	cmp	w1, #0x3
    ede8:	b.ls	edc8 <lzma_mf_is_supported@@XZ_5.0+0xa7c>  // b.plast
    edec:	ldr	x1, [x19]
    edf0:	add	x4, x1, w0, uxtw
    edf4:	ldr	w3, [x19, #20]
    edf8:	add	w3, w0, w3
    edfc:	ldrb	w0, [x1, w0, uxtw]
    ee00:	ldrb	w1, [x4, #1]
    ee04:	ldr	w0, [x21, x0, lsl #2]
    ee08:	eor	w1, w1, w0
    ee0c:	ldrb	w2, [x4, #2]
    ee10:	eor	w2, w1, w2, lsl #8
    ee14:	ldr	x5, [x19, #64]
    ee18:	ldrb	w0, [x4, #3]
    ee1c:	ldr	w0, [x21, x0, lsl #2]
    ee20:	eor	w0, w2, w0, lsl #5
    ee24:	ldr	w4, [x19, #88]
    ee28:	and	w0, w0, w4
    ee2c:	add	w0, w0, w22
    ee30:	ldr	w4, [x5, x0, lsl #2]
    ee34:	and	x1, x1, #0x3ff
    ee38:	str	w3, [x5, x1, lsl #2]
    ee3c:	and	x2, x2, #0xffff
    ee40:	add	x2, x2, #0x400
    ee44:	ldr	x1, [x19, #64]
    ee48:	str	w3, [x1, x2, lsl #2]
    ee4c:	ldr	x1, [x19, #64]
    ee50:	str	w3, [x1, x0, lsl #2]
    ee54:	ldr	w1, [x19, #80]
    ee58:	ldr	x0, [x19, #72]
    ee5c:	str	w4, [x0, x1, lsl #2]
    ee60:	mov	x0, x19
    ee64:	bl	e748 <lzma_mf_is_supported@@XZ_5.0+0x3fc>
    ee68:	b	edd0 <lzma_mf_is_supported@@XZ_5.0+0xa84>
    ee6c:	ldp	x19, x20, [sp, #16]
    ee70:	ldp	x21, x22, [sp, #32]
    ee74:	ldp	x29, x30, [sp], #48
    ee78:	ret
    ee7c:	sub	sp, sp, #0x30
    ee80:	stp	x29, x30, [sp, #16]
    ee84:	add	x29, sp, #0x10
    ee88:	stp	x19, x20, [sp, #32]
    ee8c:	mov	x19, x0
    ee90:	mov	x20, x1
    ee94:	ldr	w3, [x0, #24]
    ee98:	ldr	w0, [x0, #36]
    ee9c:	sub	w0, w0, w3
    eea0:	ldr	w1, [x19, #96]
    eea4:	cmp	w1, w0
    eea8:	b.ls	ef40 <lzma_mf_is_supported@@XZ_5.0+0xbf4>  // b.plast
    eeac:	cmp	w0, #0x1
    eeb0:	b.ls	ef30 <lzma_mf_is_supported@@XZ_5.0+0xbe4>  // b.plast
    eeb4:	ldr	w1, [x19, #104]
    eeb8:	cmp	w1, #0x1
    eebc:	b.eq	ef30 <lzma_mf_is_supported@@XZ_5.0+0xbe4>  // b.none
    eec0:	ldr	x5, [x19]
    eec4:	add	x2, x5, w3, uxtw
    eec8:	ldr	w1, [x19, #20]
    eecc:	add	w1, w3, w1
    eed0:	ldrb	w4, [x2, #1]
    eed4:	ldrb	w3, [x5, w3, uxtw]
    eed8:	orr	w4, w3, w4, lsl #8
    eedc:	mov	w4, w4
    eee0:	ldr	x5, [x19, #64]
    eee4:	ldr	w3, [x5, x4, lsl #2]
    eee8:	str	w1, [x5, x4, lsl #2]
    eeec:	mov	w4, #0x1                   	// #1
    eef0:	str	w4, [sp, #8]
    eef4:	str	x20, [sp]
    eef8:	ldr	w7, [x19, #84]
    eefc:	ldr	w6, [x19, #80]
    ef00:	ldr	x5, [x19, #72]
    ef04:	ldr	w4, [x19, #92]
    ef08:	bl	e49c <lzma_mf_is_supported@@XZ_5.0+0x150>
    ef0c:	sub	x20, x0, x20
    ef10:	ubfx	x20, x20, #3, #32
    ef14:	mov	x0, x19
    ef18:	bl	e748 <lzma_mf_is_supported@@XZ_5.0+0x3fc>
    ef1c:	mov	w0, w20
    ef20:	ldp	x19, x20, [sp, #32]
    ef24:	ldp	x29, x30, [sp, #16]
    ef28:	add	sp, sp, #0x30
    ef2c:	ret
    ef30:	mov	x0, x19
    ef34:	bl	e390 <lzma_mf_is_supported@@XZ_5.0+0x44>
    ef38:	mov	w20, #0x0                   	// #0
    ef3c:	b	ef1c <lzma_mf_is_supported@@XZ_5.0+0xbd0>
    ef40:	mov	w0, w1
    ef44:	b	eec0 <lzma_mf_is_supported@@XZ_5.0+0xb74>
    ef48:	stp	x29, x30, [sp, #-32]!
    ef4c:	mov	x29, sp
    ef50:	stp	x19, x20, [sp, #16]
    ef54:	mov	x19, x0
    ef58:	mov	w20, w1
    ef5c:	b	efb4 <lzma_mf_is_supported@@XZ_5.0+0xc68>
    ef60:	mov	w0, w1
    ef64:	ldr	x5, [x19]
    ef68:	add	x2, x5, w3, uxtw
    ef6c:	ldr	w1, [x19, #20]
    ef70:	add	w1, w3, w1
    ef74:	ldrb	w4, [x2, #1]
    ef78:	ldrb	w3, [x5, w3, uxtw]
    ef7c:	orr	w4, w3, w4, lsl #8
    ef80:	mov	w4, w4
    ef84:	ldr	x5, [x19, #64]
    ef88:	ldr	w3, [x5, x4, lsl #2]
    ef8c:	str	w1, [x5, x4, lsl #2]
    ef90:	ldr	w7, [x19, #84]
    ef94:	ldr	w6, [x19, #80]
    ef98:	ldr	x5, [x19, #72]
    ef9c:	ldr	w4, [x19, #92]
    efa0:	bl	e608 <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    efa4:	mov	x0, x19
    efa8:	bl	e748 <lzma_mf_is_supported@@XZ_5.0+0x3fc>
    efac:	subs	w20, w20, #0x1
    efb0:	b.eq	efec <lzma_mf_is_supported@@XZ_5.0+0xca0>  // b.none
    efb4:	ldr	w3, [x19, #24]
    efb8:	ldr	w0, [x19, #36]
    efbc:	sub	w0, w0, w3
    efc0:	ldr	w1, [x19, #96]
    efc4:	cmp	w1, w0
    efc8:	b.ls	ef60 <lzma_mf_is_supported@@XZ_5.0+0xc14>  // b.plast
    efcc:	cmp	w0, #0x1
    efd0:	b.ls	efe0 <lzma_mf_is_supported@@XZ_5.0+0xc94>  // b.plast
    efd4:	ldr	w1, [x19, #104]
    efd8:	cmp	w1, #0x1
    efdc:	b.ne	ef64 <lzma_mf_is_supported@@XZ_5.0+0xc18>  // b.any
    efe0:	mov	x0, x19
    efe4:	bl	e390 <lzma_mf_is_supported@@XZ_5.0+0x44>
    efe8:	b	efac <lzma_mf_is_supported@@XZ_5.0+0xc60>
    efec:	ldp	x19, x20, [sp, #16]
    eff0:	ldp	x29, x30, [sp], #32
    eff4:	ret
    eff8:	sub	sp, sp, #0x30
    effc:	stp	x29, x30, [sp, #16]
    f000:	add	x29, sp, #0x10
    f004:	stp	x19, x20, [sp, #32]
    f008:	mov	x19, x0
    f00c:	mov	x20, x1
    f010:	ldr	w5, [x0, #24]
    f014:	ldr	w1, [x0, #36]
    f018:	sub	w1, w1, w5
    f01c:	ldr	w0, [x0, #96]
    f020:	cmp	w0, w1
    f024:	b.ls	f040 <lzma_mf_is_supported@@XZ_5.0+0xcf4>  // b.plast
    f028:	cmp	w1, #0x2
    f02c:	b.ls	f10c <lzma_mf_is_supported@@XZ_5.0+0xdc0>  // b.plast
    f030:	ldr	w2, [x19, #104]
    f034:	mov	w0, w1
    f038:	cmp	w2, #0x1
    f03c:	b.eq	f10c <lzma_mf_is_supported@@XZ_5.0+0xdc0>  // b.none
    f040:	ldr	x8, [x19]
    f044:	add	x2, x8, w5, uxtw
    f048:	ldr	w1, [x19, #20]
    f04c:	add	w1, w5, w1
    f050:	ldrb	w6, [x8, w5, uxtw]
    f054:	ldrb	w4, [x2, #1]
    f058:	adrp	x3, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    f05c:	ldr	x3, [x3, #3952]
    f060:	ldr	w3, [x3, x6, lsl #2]
    f064:	eor	w3, w4, w3
    f068:	ldr	x7, [x19, #64]
    f06c:	and	x9, x3, #0x3ff
    f070:	ldr	w6, [x7, x9, lsl #2]
    f074:	sub	w6, w1, w6
    f078:	ldrb	w4, [x2, #2]
    f07c:	eor	w4, w3, w4, lsl #8
    f080:	ldr	w3, [x19, #88]
    f084:	and	w4, w4, w3
    f088:	add	w4, w4, #0x400
    f08c:	ldr	w3, [x7, x4, lsl #2]
    f090:	str	w1, [x7, x9, lsl #2]
    f094:	ldr	x7, [x19, #64]
    f098:	str	w1, [x7, x4, lsl #2]
    f09c:	ldr	w4, [x19, #84]
    f0a0:	cmp	w4, w6
    f0a4:	b.ls	f188 <lzma_mf_is_supported@@XZ_5.0+0xe3c>  // b.plast
    f0a8:	sub	x9, x2, w6, uxtw
    f0ac:	ldrb	w10, [x9]
    f0b0:	ldrb	w7, [x8, w5, uxtw]
    f0b4:	mov	w5, #0x2                   	// #2
    f0b8:	mov	w4, #0x0                   	// #0
    f0bc:	cmp	w10, w7
    f0c0:	b.eq	f11c <lzma_mf_is_supported@@XZ_5.0+0xdd0>  // b.none
    f0c4:	str	w5, [sp, #8]
    f0c8:	mov	w4, w4
    f0cc:	add	x4, x20, x4, lsl #3
    f0d0:	str	x4, [sp]
    f0d4:	ldr	w7, [x19, #84]
    f0d8:	ldr	w6, [x19, #80]
    f0dc:	ldr	x5, [x19, #72]
    f0e0:	ldr	w4, [x19, #92]
    f0e4:	bl	e49c <lzma_mf_is_supported@@XZ_5.0+0x150>
    f0e8:	sub	x20, x0, x20
    f0ec:	ubfx	x20, x20, #3, #32
    f0f0:	mov	x0, x19
    f0f4:	bl	e748 <lzma_mf_is_supported@@XZ_5.0+0x3fc>
    f0f8:	mov	w0, w20
    f0fc:	ldp	x19, x20, [sp, #32]
    f100:	ldp	x29, x30, [sp, #16]
    f104:	add	sp, sp, #0x30
    f108:	ret
    f10c:	mov	x0, x19
    f110:	bl	e390 <lzma_mf_is_supported@@XZ_5.0+0x44>
    f114:	mov	w20, #0x0                   	// #0
    f118:	b	f0f8 <lzma_mf_is_supported@@XZ_5.0+0xdac>
    f11c:	mov	x4, #0x2                   	// #2
    f120:	cmp	w0, w5
    f124:	b.ls	f14c <lzma_mf_is_supported@@XZ_5.0+0xe00>  // b.plast
    f128:	mov	w5, w4
    f12c:	ldrb	w8, [x2, x4]
    f130:	ldrb	w7, [x9, x4]
    f134:	cmp	w8, w7
    f138:	b.ne	f14c <lzma_mf_is_supported@@XZ_5.0+0xe00>  // b.any
    f13c:	add	w5, w4, #0x1
    f140:	add	x4, x4, #0x1
    f144:	cmp	w0, w4
    f148:	b.hi	f128 <lzma_mf_is_supported@@XZ_5.0+0xddc>  // b.pmore
    f14c:	str	w5, [x20]
    f150:	sub	w6, w6, #0x1
    f154:	str	w6, [x20, #4]
    f158:	mov	w4, #0x1                   	// #1
    f15c:	cmp	w0, w5
    f160:	b.ne	f0c4 <lzma_mf_is_supported@@XZ_5.0+0xd78>  // b.any
    f164:	ldr	w7, [x19, #84]
    f168:	ldr	w6, [x19, #80]
    f16c:	ldr	x5, [x19, #72]
    f170:	ldr	w4, [x19, #92]
    f174:	bl	e608 <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    f178:	mov	x0, x19
    f17c:	bl	e748 <lzma_mf_is_supported@@XZ_5.0+0x3fc>
    f180:	mov	w20, #0x1                   	// #1
    f184:	b	f0f8 <lzma_mf_is_supported@@XZ_5.0+0xdac>
    f188:	mov	w5, #0x2                   	// #2
    f18c:	mov	w4, #0x0                   	// #0
    f190:	b	f0c4 <lzma_mf_is_supported@@XZ_5.0+0xd78>
    f194:	stp	x29, x30, [sp, #-48]!
    f198:	mov	x29, sp
    f19c:	stp	x19, x20, [sp, #16]
    f1a0:	str	x21, [sp, #32]
    f1a4:	mov	x19, x0
    f1a8:	mov	w20, w1
    f1ac:	adrp	x21, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    f1b0:	ldr	x21, [x21, #3952]
    f1b4:	b	f22c <lzma_mf_is_supported@@XZ_5.0+0xee0>
    f1b8:	mov	w0, w1
    f1bc:	ldr	x4, [x19]
    f1c0:	add	x2, x4, w3, uxtw
    f1c4:	ldr	w1, [x19, #20]
    f1c8:	add	w1, w3, w1
    f1cc:	ldrb	w3, [x4, w3, uxtw]
    f1d0:	ldrb	w5, [x2, #1]
    f1d4:	ldr	w3, [x21, x3, lsl #2]
    f1d8:	eor	w5, w5, w3
    f1dc:	ldr	x6, [x19, #64]
    f1e0:	ldrb	w4, [x2, #2]
    f1e4:	eor	w4, w5, w4, lsl #8
    f1e8:	ldr	w3, [x19, #88]
    f1ec:	and	w4, w4, w3
    f1f0:	add	w4, w4, #0x400
    f1f4:	ldr	w3, [x6, x4, lsl #2]
    f1f8:	and	x5, x5, #0x3ff
    f1fc:	str	w1, [x6, x5, lsl #2]
    f200:	ldr	x5, [x19, #64]
    f204:	str	w1, [x5, x4, lsl #2]
    f208:	ldr	w7, [x19, #84]
    f20c:	ldr	w6, [x19, #80]
    f210:	ldr	x5, [x19, #72]
    f214:	ldr	w4, [x19, #92]
    f218:	bl	e608 <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    f21c:	mov	x0, x19
    f220:	bl	e748 <lzma_mf_is_supported@@XZ_5.0+0x3fc>
    f224:	subs	w20, w20, #0x1
    f228:	b.eq	f264 <lzma_mf_is_supported@@XZ_5.0+0xf18>  // b.none
    f22c:	ldr	w3, [x19, #24]
    f230:	ldr	w0, [x19, #36]
    f234:	sub	w0, w0, w3
    f238:	ldr	w1, [x19, #96]
    f23c:	cmp	w1, w0
    f240:	b.ls	f1b8 <lzma_mf_is_supported@@XZ_5.0+0xe6c>  // b.plast
    f244:	cmp	w0, #0x2
    f248:	b.ls	f258 <lzma_mf_is_supported@@XZ_5.0+0xf0c>  // b.plast
    f24c:	ldr	w1, [x19, #104]
    f250:	cmp	w1, #0x1
    f254:	b.ne	f1bc <lzma_mf_is_supported@@XZ_5.0+0xe70>  // b.any
    f258:	mov	x0, x19
    f25c:	bl	e390 <lzma_mf_is_supported@@XZ_5.0+0x44>
    f260:	b	f224 <lzma_mf_is_supported@@XZ_5.0+0xed8>
    f264:	ldp	x19, x20, [sp, #16]
    f268:	ldr	x21, [sp, #32]
    f26c:	ldp	x29, x30, [sp], #48
    f270:	ret
    f274:	sub	sp, sp, #0x40
    f278:	stp	x29, x30, [sp, #16]
    f27c:	add	x29, sp, #0x10
    f280:	stp	x19, x20, [sp, #32]
    f284:	str	x21, [sp, #48]
    f288:	mov	x19, x0
    f28c:	mov	x21, x1
    f290:	ldr	w7, [x0, #24]
    f294:	ldr	w1, [x0, #36]
    f298:	sub	w1, w1, w7
    f29c:	ldr	w0, [x0, #96]
    f2a0:	cmp	w0, w1
    f2a4:	b.ls	f2c0 <lzma_mf_is_supported@@XZ_5.0+0xf74>  // b.plast
    f2a8:	cmp	w1, #0x3
    f2ac:	b.ls	f408 <lzma_mf_is_supported@@XZ_5.0+0x10bc>  // b.plast
    f2b0:	ldr	w2, [x19, #104]
    f2b4:	mov	w0, w1
    f2b8:	cmp	w2, #0x1
    f2bc:	b.eq	f408 <lzma_mf_is_supported@@XZ_5.0+0x10bc>  // b.none
    f2c0:	ldr	x12, [x19]
    f2c4:	add	x2, x12, w7, uxtw
    f2c8:	ldr	w1, [x19, #20]
    f2cc:	add	w1, w7, w1
    f2d0:	adrp	x10, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    f2d4:	ldr	x10, [x10, #3952]
    f2d8:	ldrb	w3, [x12, w7, uxtw]
    f2dc:	ldrb	w5, [x2, #1]
    f2e0:	ldr	w3, [x10, x3, lsl #2]
    f2e4:	eor	w5, w5, w3
    f2e8:	ldrb	w4, [x2, #2]
    f2ec:	eor	w3, w5, w4, lsl #8
    f2f0:	ldr	x9, [x19, #64]
    f2f4:	and	x5, x5, #0x3ff
    f2f8:	ldr	w13, [x9, x5, lsl #2]
    f2fc:	sub	w11, w1, w13
    f300:	and	x8, x3, #0xffff
    f304:	add	x8, x8, #0x400
    f308:	ldr	w6, [x9, x8, lsl #2]
    f30c:	ldrb	w4, [x2, #3]
    f310:	ldr	w4, [x10, x4, lsl #2]
    f314:	eor	w4, w3, w4, lsl #5
    f318:	ldr	w3, [x19, #88]
    f31c:	and	w4, w4, w3
    f320:	add	w4, w4, #0x10, lsl #12
    f324:	add	w4, w4, #0x400
    f328:	ldr	w3, [x9, x4, lsl #2]
    f32c:	str	w1, [x9, x5, lsl #2]
    f330:	ldr	x5, [x19, #64]
    f334:	str	w1, [x5, x8, lsl #2]
    f338:	ldr	x5, [x19, #64]
    f33c:	str	w1, [x5, x4, lsl #2]
    f340:	ldr	w4, [x19, #84]
    f344:	cmp	w4, w11
    f348:	b.ls	f360 <lzma_mf_is_supported@@XZ_5.0+0x1014>  // b.plast
    f34c:	sub	x4, x2, w11, uxtw
    f350:	ldrb	w5, [x4]
    f354:	ldrb	w4, [x12, w7, uxtw]
    f358:	cmp	w5, w4
    f35c:	b.eq	f418 <lzma_mf_is_supported@@XZ_5.0+0x10cc>  // b.none
    f360:	cmp	w13, w6
    f364:	b.eq	f4f0 <lzma_mf_is_supported@@XZ_5.0+0x11a4>  // b.none
    f368:	sub	w4, w1, w6
    f36c:	ldr	w5, [x19, #84]
    f370:	mov	w6, #0x1                   	// #1
    f374:	mov	w20, #0x0                   	// #0
    f378:	cmp	w5, w4
    f37c:	b.ls	f4fc <lzma_mf_is_supported@@XZ_5.0+0x11b0>  // b.plast
    f380:	sub	x5, x2, w4, uxtw
    f384:	ldrb	w8, [x5]
    f388:	ldrb	w5, [x12, w7, uxtw]
    f38c:	cmp	w8, w5
    f390:	b.eq	f464 <lzma_mf_is_supported@@XZ_5.0+0x1118>  // b.none
    f394:	cbz	w20, f4e8 <lzma_mf_is_supported@@XZ_5.0+0x119c>
    f398:	mov	w11, w11
    f39c:	mov	w5, w6
    f3a0:	mov	x4, #0x0                   	// #0
    f3a4:	cmp	w0, w6
    f3a8:	b.ls	f480 <lzma_mf_is_supported@@XZ_5.0+0x1134>  // b.plast
    f3ac:	mov	w6, w6
    f3b0:	add	x9, x2, x6
    f3b4:	sub	x6, x6, x11
    f3b8:	add	x6, x2, x6
    f3bc:	ldrb	w8, [x9, x4]
    f3c0:	ldrb	w7, [x6, x4]
    f3c4:	cmp	w8, w7
    f3c8:	b.ne	f480 <lzma_mf_is_supported@@XZ_5.0+0x1134>  // b.any
    f3cc:	add	w5, w5, #0x1
    f3d0:	add	x4, x4, #0x1
    f3d4:	cmp	w0, w5
    f3d8:	b.ne	f3bc <lzma_mf_is_supported@@XZ_5.0+0x1070>  // b.any
    f3dc:	sub	w4, w20, #0x1
    f3e0:	lsl	x4, x4, #3
    f3e4:	str	w5, [x21, x4]
    f3e8:	ldr	w7, [x19, #84]
    f3ec:	ldr	w6, [x19, #80]
    f3f0:	ldr	x5, [x19, #72]
    f3f4:	ldr	w4, [x19, #92]
    f3f8:	bl	e608 <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    f3fc:	mov	x0, x19
    f400:	bl	e748 <lzma_mf_is_supported@@XZ_5.0+0x3fc>
    f404:	b	f4d0 <lzma_mf_is_supported@@XZ_5.0+0x1184>
    f408:	mov	x0, x19
    f40c:	bl	e390 <lzma_mf_is_supported@@XZ_5.0+0x44>
    f410:	mov	w20, #0x0                   	// #0
    f414:	b	f4d0 <lzma_mf_is_supported@@XZ_5.0+0x1184>
    f418:	mov	w4, #0x2                   	// #2
    f41c:	str	w4, [x21]
    f420:	sub	w4, w11, #0x1
    f424:	str	w4, [x21, #4]
    f428:	cmp	w13, w6
    f42c:	b.eq	f44c <lzma_mf_is_supported@@XZ_5.0+0x1100>  // b.none
    f430:	sub	w4, w1, w6
    f434:	ldr	w5, [x19, #84]
    f438:	cmp	w5, w4
    f43c:	b.hi	f458 <lzma_mf_is_supported@@XZ_5.0+0x110c>  // b.pmore
    f440:	mov	w6, #0x2                   	// #2
    f444:	mov	w20, #0x1                   	// #1
    f448:	b	f398 <lzma_mf_is_supported@@XZ_5.0+0x104c>
    f44c:	mov	w6, #0x2                   	// #2
    f450:	mov	w20, #0x1                   	// #1
    f454:	b	f398 <lzma_mf_is_supported@@XZ_5.0+0x104c>
    f458:	mov	w6, #0x2                   	// #2
    f45c:	mov	w20, #0x1                   	// #1
    f460:	b	f380 <lzma_mf_is_supported@@XZ_5.0+0x1034>
    f464:	add	x5, x21, w20, uxtw #3
    f468:	sub	w6, w4, #0x1
    f46c:	str	w6, [x5, #4]
    f470:	mov	w11, w4
    f474:	add	w20, w20, #0x1
    f478:	mov	w6, #0x3                   	// #3
    f47c:	b	f398 <lzma_mf_is_supported@@XZ_5.0+0x104c>
    f480:	sub	w4, w20, #0x1
    f484:	lsl	x4, x4, #3
    f488:	str	w5, [x21, x4]
    f48c:	cmp	w0, w5
    f490:	b.eq	f3e8 <lzma_mf_is_supported@@XZ_5.0+0x109c>  // b.none
    f494:	cmp	w5, #0x3
    f498:	mov	w4, #0x3                   	// #3
    f49c:	csel	w5, w5, w4, cs  // cs = hs, nlast
    f4a0:	str	w5, [sp, #8]
    f4a4:	add	x20, x21, w20, uxtw #3
    f4a8:	str	x20, [sp]
    f4ac:	ldr	w7, [x19, #84]
    f4b0:	ldr	w6, [x19, #80]
    f4b4:	ldr	x5, [x19, #72]
    f4b8:	ldr	w4, [x19, #92]
    f4bc:	bl	e49c <lzma_mf_is_supported@@XZ_5.0+0x150>
    f4c0:	sub	x20, x0, x21
    f4c4:	ubfx	x20, x20, #3, #32
    f4c8:	mov	x0, x19
    f4cc:	bl	e748 <lzma_mf_is_supported@@XZ_5.0+0x3fc>
    f4d0:	mov	w0, w20
    f4d4:	ldp	x19, x20, [sp, #32]
    f4d8:	ldr	x21, [sp, #48]
    f4dc:	ldp	x29, x30, [sp, #16]
    f4e0:	add	sp, sp, #0x40
    f4e4:	ret
    f4e8:	mov	w5, w6
    f4ec:	b	f494 <lzma_mf_is_supported@@XZ_5.0+0x1148>
    f4f0:	mov	w20, #0x0                   	// #0
    f4f4:	mov	w5, #0x1                   	// #1
    f4f8:	b	f494 <lzma_mf_is_supported@@XZ_5.0+0x1148>
    f4fc:	mov	w5, w6
    f500:	b	f494 <lzma_mf_is_supported@@XZ_5.0+0x1148>
    f504:	stp	x29, x30, [sp, #-48]!
    f508:	mov	x29, sp
    f50c:	stp	x19, x20, [sp, #16]
    f510:	stp	x21, x22, [sp, #32]
    f514:	mov	x19, x0
    f518:	mov	w20, w1
    f51c:	adrp	x21, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    f520:	ldr	x21, [x21, #3952]
    f524:	mov	w22, #0x400                 	// #1024
    f528:	movk	w22, #0x1, lsl #16
    f52c:	b	f5c0 <lzma_mf_is_supported@@XZ_5.0+0x1274>
    f530:	mov	w0, w1
    f534:	ldr	x4, [x19]
    f538:	add	x2, x4, w3, uxtw
    f53c:	ldr	w1, [x19, #20]
    f540:	add	w1, w3, w1
    f544:	ldrb	w3, [x4, w3, uxtw]
    f548:	ldrb	w6, [x2, #1]
    f54c:	ldr	w3, [x21, x3, lsl #2]
    f550:	eor	w6, w6, w3
    f554:	ldrb	w5, [x2, #2]
    f558:	eor	w5, w6, w5, lsl #8
    f55c:	ldr	x7, [x19, #64]
    f560:	ldrb	w3, [x2, #3]
    f564:	ldr	w4, [x21, x3, lsl #2]
    f568:	eor	w4, w5, w4, lsl #5
    f56c:	ldr	w3, [x19, #88]
    f570:	and	w4, w4, w3
    f574:	add	w4, w4, w22
    f578:	ldr	w3, [x7, x4, lsl #2]
    f57c:	and	x6, x6, #0x3ff
    f580:	str	w1, [x7, x6, lsl #2]
    f584:	and	x5, x5, #0xffff
    f588:	add	x5, x5, #0x400
    f58c:	ldr	x6, [x19, #64]
    f590:	str	w1, [x6, x5, lsl #2]
    f594:	ldr	x5, [x19, #64]
    f598:	str	w1, [x5, x4, lsl #2]
    f59c:	ldr	w7, [x19, #84]
    f5a0:	ldr	w6, [x19, #80]
    f5a4:	ldr	x5, [x19, #72]
    f5a8:	ldr	w4, [x19, #92]
    f5ac:	bl	e608 <lzma_mf_is_supported@@XZ_5.0+0x2bc>
    f5b0:	mov	x0, x19
    f5b4:	bl	e748 <lzma_mf_is_supported@@XZ_5.0+0x3fc>
    f5b8:	subs	w20, w20, #0x1
    f5bc:	b.eq	f5f8 <lzma_mf_is_supported@@XZ_5.0+0x12ac>  // b.none
    f5c0:	ldr	w3, [x19, #24]
    f5c4:	ldr	w0, [x19, #36]
    f5c8:	sub	w0, w0, w3
    f5cc:	ldr	w1, [x19, #96]
    f5d0:	cmp	w1, w0
    f5d4:	b.ls	f530 <lzma_mf_is_supported@@XZ_5.0+0x11e4>  // b.plast
    f5d8:	cmp	w0, #0x3
    f5dc:	b.ls	f5ec <lzma_mf_is_supported@@XZ_5.0+0x12a0>  // b.plast
    f5e0:	ldr	w1, [x19, #104]
    f5e4:	cmp	w1, #0x1
    f5e8:	b.ne	f534 <lzma_mf_is_supported@@XZ_5.0+0x11e8>  // b.any
    f5ec:	mov	x0, x19
    f5f0:	bl	e390 <lzma_mf_is_supported@@XZ_5.0+0x44>
    f5f4:	b	f5b8 <lzma_mf_is_supported@@XZ_5.0+0x126c>
    f5f8:	ldp	x19, x20, [sp, #16]
    f5fc:	ldp	x21, x22, [sp, #32]
    f600:	ldp	x29, x30, [sp], #48
    f604:	ret
    f608:	stp	x29, x30, [sp, #-112]!
    f60c:	mov	x29, sp
    f610:	stp	x19, x20, [sp, #16]
    f614:	stp	x21, x22, [sp, #32]
    f618:	stp	x23, x24, [sp, #48]
    f61c:	stp	x25, x26, [sp, #64]
    f620:	stp	x27, x28, [sp, #80]
    f624:	mov	x19, x0
    f628:	mov	x28, x1
    f62c:	mov	x27, x2
    f630:	str	x3, [sp, #104]
    f634:	mov	x26, x4
    f638:	mov	x24, x5
    f63c:	mov	x25, x6
    f640:	b	f674 <lzma_mf_is_supported@@XZ_5.0+0x1328>
    f644:	str	xzr, [x19, #8]
    f648:	b	f684 <lzma_mf_is_supported@@XZ_5.0+0x1338>
    f64c:	str	xzr, [x19, #8]
    f650:	str	xzr, [x19, #16]
    f654:	ldr	x0, [x19]
    f658:	ldr	x1, [x19, #32]
    f65c:	add	x0, x0, x1
    f660:	sturb	wzr, [x0, #-1]
    f664:	strb	wzr, [x19, #40]
    f668:	cmp	w23, #0x0
    f66c:	ccmp	x20, x25, #0x4, eq  // eq = none
    f670:	b.eq	f714 <lzma_mf_is_supported@@XZ_5.0+0x13c8>  // b.none
    f674:	ldr	x1, [x19, #32]
    f678:	ldr	x0, [x19, #8]
    f67c:	cmp	x0, x1
    f680:	b.eq	f644 <lzma_mf_is_supported@@XZ_5.0+0x12f8>  // b.none
    f684:	ldr	x22, [x19, #8]
    f688:	ldr	x0, [x24]
    f68c:	sub	x0, x25, x0
    f690:	sub	x1, x1, x22
    f694:	cmp	x0, x1
    f698:	csel	x0, x0, x1, ls  // ls = plast
    f69c:	add	x0, x0, x22
    f6a0:	str	x0, [x19, #24]
    f6a4:	ldr	x5, [x19, #56]
    f6a8:	ldr	x4, [sp, #104]
    f6ac:	mov	x3, x27
    f6b0:	mov	x2, x28
    f6b4:	mov	x1, x19
    f6b8:	ldr	x0, [x19, #48]
    f6bc:	blr	x5
    f6c0:	mov	w23, w0
    f6c4:	ldr	x21, [x19, #8]
    f6c8:	sub	x21, x21, x22
    f6cc:	ldr	x20, [x24]
    f6d0:	ldr	x1, [x19]
    f6d4:	mov	x2, x21
    f6d8:	add	x1, x1, x22
    f6dc:	add	x0, x26, x20
    f6e0:	bl	3090 <memcpy@plt>
    f6e4:	add	x20, x20, x21
    f6e8:	str	x20, [x24]
    f6ec:	ldrb	w0, [x19, #40]
    f6f0:	cbnz	w0, f64c <lzma_mf_is_supported@@XZ_5.0+0x1300>
    f6f4:	cmp	w23, #0x0
    f6f8:	ccmp	x20, x25, #0x4, eq  // eq = none
    f6fc:	b.eq	f714 <lzma_mf_is_supported@@XZ_5.0+0x13c8>  // b.none
    f700:	ldr	x1, [x19, #8]
    f704:	ldr	x0, [x19, #32]
    f708:	cmp	x1, x0
    f70c:	b.cs	f674 <lzma_mf_is_supported@@XZ_5.0+0x1328>  // b.hs, b.nlast
    f710:	mov	w23, #0x0                   	// #0
    f714:	mov	w0, w23
    f718:	ldp	x19, x20, [sp, #16]
    f71c:	ldp	x21, x22, [sp, #32]
    f720:	ldp	x23, x24, [sp, #48]
    f724:	ldp	x25, x26, [sp, #64]
    f728:	ldp	x27, x28, [sp, #80]
    f72c:	ldp	x29, x30, [sp], #112
    f730:	ret
    f734:	sub	sp, sp, #0x90
    f738:	stp	x29, x30, [sp, #16]
    f73c:	add	x29, sp, #0x10
    f740:	stp	x19, x20, [sp, #32]
    f744:	stp	x21, x22, [sp, #48]
    f748:	stp	x23, x24, [sp, #64]
    f74c:	stp	x25, x26, [sp, #80]
    f750:	mov	x19, x0
    f754:	str	x1, [sp, #136]
    f758:	str	x2, [sp, #120]
    f75c:	str	x3, [sp, #128]
    f760:	mov	x26, x4
    f764:	mov	x23, x5
    f768:	mov	x21, x6
    f76c:	mov	x20, x7
    f770:	ldr	x0, [x0, #112]
    f774:	cbz	x0, f7a8 <lzma_mf_is_supported@@XZ_5.0+0x145c>
    f778:	ldr	x0, [x6]
    f77c:	cmp	x7, x0
    f780:	b.ls	f7a0 <lzma_mf_is_supported@@XZ_5.0+0x1454>  // b.plast
    f784:	stp	x27, x28, [sp, #96]
    f788:	add	x28, x19, #0xb0
    f78c:	add	x22, x19, #0xb8
    f790:	mov	x27, #0x1000                	// #4096
    f794:	mov	w25, #0x1                   	// #1
    f798:	add	x24, x19, #0xa8
    f79c:	b	f850 <lzma_mf_is_supported@@XZ_5.0+0x1504>
    f7a0:	mov	w0, #0x0                   	// #0
    f7a4:	b	f8b8 <lzma_mf_is_supported@@XZ_5.0+0x156c>
    f7a8:	mov	x6, x7
    f7ac:	mov	x5, x21
    f7b0:	mov	x4, x23
    f7b4:	mov	x3, x26
    f7b8:	ldr	x2, [sp, #128]
    f7bc:	ldr	x1, [sp, #120]
    f7c0:	mov	x0, x19
    f7c4:	bl	f608 <lzma_mf_is_supported@@XZ_5.0+0x12bc>
    f7c8:	b	f8b8 <lzma_mf_is_supported@@XZ_5.0+0x156c>
    f7cc:	str	xzr, [x19, #168]
    f7d0:	str	xzr, [x19, #176]
    f7d4:	ldr	w0, [sp, #144]
    f7d8:	str	w0, [sp]
    f7dc:	ldr	x8, [x19, #112]
    f7e0:	mov	x7, x27
    f7e4:	mov	x6, x28
    f7e8:	mov	x5, x22
    f7ec:	mov	x4, x26
    f7f0:	ldr	x3, [sp, #128]
    f7f4:	ldr	x2, [sp, #120]
    f7f8:	ldr	x1, [sp, #136]
    f7fc:	ldr	x0, [x19, #88]
    f800:	blr	x8
    f804:	cmp	w0, #0x1
    f808:	b.eq	f820 <lzma_mf_is_supported@@XZ_5.0+0x14d4>  // b.none
    f80c:	cbnz	w0, f8e0 <lzma_mf_is_supported@@XZ_5.0+0x1594>
    f810:	ldr	x1, [x19, #176]
    f814:	cbnz	x1, f868 <lzma_mf_is_supported@@XZ_5.0+0x151c>
    f818:	ldp	x27, x28, [sp, #96]
    f81c:	b	f8b8 <lzma_mf_is_supported@@XZ_5.0+0x156c>
    f820:	strb	w25, [x19, #160]
    f824:	b	f868 <lzma_mf_is_supported@@XZ_5.0+0x151c>
    f828:	ldr	x1, [x19, #176]
    f82c:	mov	w0, #0x9                   	// #9
    f830:	cbnz	x1, f8e8 <lzma_mf_is_supported@@XZ_5.0+0x159c>
    f834:	ldrb	w0, [x19, #160]
    f838:	ldp	x27, x28, [sp, #96]
    f83c:	b	f8b8 <lzma_mf_is_supported@@XZ_5.0+0x156c>
    f840:	strb	w25, [x19, #161]
    f844:	ldr	x0, [x21]
    f848:	cmp	x0, x20
    f84c:	b.cs	f8d4 <lzma_mf_is_supported@@XZ_5.0+0x1588>  // b.hs, b.nlast
    f850:	ldrb	w0, [x19, #160]
    f854:	cbnz	w0, f868 <lzma_mf_is_supported@@XZ_5.0+0x151c>
    f858:	ldr	x1, [x19, #168]
    f85c:	ldr	x0, [x19, #176]
    f860:	cmp	x1, x0
    f864:	b.eq	f7cc <lzma_mf_is_supported@@XZ_5.0+0x1480>  // b.none
    f868:	ldrb	w0, [x19, #161]
    f86c:	cbnz	w0, f828 <lzma_mf_is_supported@@XZ_5.0+0x14dc>
    f870:	mov	x6, x20
    f874:	mov	x5, x21
    f878:	mov	x4, x23
    f87c:	ldr	x3, [x19, #176]
    f880:	mov	x2, x24
    f884:	mov	x1, x22
    f888:	mov	x0, x19
    f88c:	bl	f608 <lzma_mf_is_supported@@XZ_5.0+0x12bc>
    f890:	cmp	w0, #0x1
    f894:	b.eq	f840 <lzma_mf_is_supported@@XZ_5.0+0x14f4>  // b.none
    f898:	cbnz	w0, f8f0 <lzma_mf_is_supported@@XZ_5.0+0x15a4>
    f89c:	ldrb	w1, [x19, #160]
    f8a0:	cbz	w1, f844 <lzma_mf_is_supported@@XZ_5.0+0x14f8>
    f8a4:	ldr	x1, [x21]
    f8a8:	cmp	x1, x20
    f8ac:	mov	w1, #0x9                   	// #9
    f8b0:	csel	w0, w0, w1, cs  // cs = hs, nlast
    f8b4:	ldp	x27, x28, [sp, #96]
    f8b8:	ldp	x19, x20, [sp, #32]
    f8bc:	ldp	x21, x22, [sp, #48]
    f8c0:	ldp	x23, x24, [sp, #64]
    f8c4:	ldp	x25, x26, [sp, #80]
    f8c8:	ldp	x29, x30, [sp, #16]
    f8cc:	add	sp, sp, #0x90
    f8d0:	ret
    f8d4:	mov	w0, #0x0                   	// #0
    f8d8:	ldp	x27, x28, [sp, #96]
    f8dc:	b	f8b8 <lzma_mf_is_supported@@XZ_5.0+0x156c>
    f8e0:	ldp	x27, x28, [sp, #96]
    f8e4:	b	f8b8 <lzma_mf_is_supported@@XZ_5.0+0x156c>
    f8e8:	ldp	x27, x28, [sp, #96]
    f8ec:	b	f8b8 <lzma_mf_is_supported@@XZ_5.0+0x156c>
    f8f0:	ldp	x27, x28, [sp, #96]
    f8f4:	b	f8b8 <lzma_mf_is_supported@@XZ_5.0+0x156c>
    f8f8:	stp	x29, x30, [sp, #-32]!
    f8fc:	mov	x29, sp
    f900:	stp	x19, x20, [sp, #16]
    f904:	mov	x19, x0
    f908:	mov	x20, x1
    f90c:	add	x0, x0, #0x58
    f910:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
    f914:	mov	x1, x20
    f918:	ldr	x0, [x19]
    f91c:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    f920:	ldr	x2, [x19, #80]
    f924:	cbz	x2, f94c <lzma_mf_is_supported@@XZ_5.0+0x1600>
    f928:	mov	x1, x20
    f92c:	ldr	x0, [x19, #48]
    f930:	blr	x2
    f934:	mov	x1, x20
    f938:	mov	x0, x19
    f93c:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    f940:	ldp	x19, x20, [sp, #16]
    f944:	ldp	x29, x30, [sp], #32
    f948:	ret
    f94c:	mov	x1, x20
    f950:	ldr	x0, [x19, #48]
    f954:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    f958:	b	f934 <lzma_mf_is_supported@@XZ_5.0+0x15e8>
    f95c:	stp	x29, x30, [sp, #-96]!
    f960:	mov	x29, sp
    f964:	stp	x19, x20, [sp, #16]
    f968:	stp	x21, x22, [sp, #32]
    f96c:	str	x23, [sp, #48]
    f970:	mov	x21, x0
    f974:	mov	x20, x1
    f978:	mov	x22, x2
    f97c:	mov	x23, x3
    f980:	ldr	x19, [x0]
    f984:	cbz	x19, f9bc <lzma_mf_is_supported@@XZ_5.0+0x1670>
    f988:	add	x3, sp, #0x48
    f98c:	ldr	x2, [x22, #16]
    f990:	mov	x1, x20
    f994:	add	x0, x19, #0x30
    f998:	blr	x23
    f99c:	cbnz	w0, fac4 <lzma_mf_is_supported@@XZ_5.0+0x1778>
    f9a0:	ldr	x1, [sp, #72]
    f9a4:	cmp	x1, #0xfff
    f9a8:	b.ls	fa30 <lzma_mf_is_supported@@XZ_5.0+0x16e4>  // b.plast
    f9ac:	mov	w0, #0x5                   	// #5
    f9b0:	cmn	x1, #0x10
    f9b4:	b.ls	fa34 <lzma_mf_is_supported@@XZ_5.0+0x16e8>  // b.plast
    f9b8:	b	fac4 <lzma_mf_is_supported@@XZ_5.0+0x1778>
    f9bc:	mov	x0, #0x10b8                	// #4280
    f9c0:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    f9c4:	mov	x19, x0
    f9c8:	cbz	x0, fb04 <lzma_mf_is_supported@@XZ_5.0+0x17b8>
    f9cc:	str	x0, [x21]
    f9d0:	adrp	x0, f000 <lzma_mf_is_supported@@XZ_5.0+0xcb4>
    f9d4:	add	x0, x0, #0x734
    f9d8:	str	x0, [x21, #24]
    f9dc:	adrp	x0, f000 <lzma_mf_is_supported@@XZ_5.0+0xcb4>
    f9e0:	add	x0, x0, #0x8f8
    f9e4:	str	x0, [x21, #32]
    f9e8:	str	xzr, [x19]
    f9ec:	str	xzr, [x19, #32]
    f9f0:	str	xzr, [x19, #48]
    f9f4:	str	xzr, [x19, #56]
    f9f8:	str	xzr, [x19, #64]
    f9fc:	str	xzr, [x19, #72]
    fa00:	str	xzr, [x19, #80]
    fa04:	str	xzr, [x19, #88]
    fa08:	mov	x0, #0xffffffffffffffff    	// #-1
    fa0c:	str	x0, [x19, #96]
    fa10:	str	xzr, [x19, #104]
    fa14:	str	xzr, [x19, #112]
    fa18:	str	xzr, [x19, #120]
    fa1c:	str	xzr, [x19, #128]
    fa20:	str	xzr, [x19, #136]
    fa24:	str	xzr, [x19, #144]
    fa28:	str	xzr, [x19, #152]
    fa2c:	b	f988 <lzma_mf_is_supported@@XZ_5.0+0x163c>
    fa30:	mov	x1, #0x1000                	// #4096
    fa34:	add	x1, x1, #0xf
    fa38:	and	x1, x1, #0xfffffffffffffff0
    fa3c:	str	x1, [sp, #72]
    fa40:	ldr	x0, [x19, #32]
    fa44:	cmp	x1, x0
    fa48:	b.eq	fa74 <lzma_mf_is_supported@@XZ_5.0+0x1728>  // b.none
    fa4c:	mov	x1, x20
    fa50:	ldr	x0, [x19]
    fa54:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
    fa58:	mov	x1, x20
    fa5c:	ldr	x0, [sp, #72]
    fa60:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
    fa64:	str	x0, [x19]
    fa68:	cbz	x0, fb0c <lzma_mf_is_supported@@XZ_5.0+0x17c0>
    fa6c:	ldr	x0, [sp, #72]
    fa70:	str	x0, [x19, #32]
    fa74:	ldr	x0, [x21]
    fa78:	str	xzr, [x0, #8]
    fa7c:	str	xzr, [x0, #16]
    fa80:	ldr	x1, [x0]
    fa84:	ldr	x2, [x0, #32]
    fa88:	add	x1, x1, x2
    fa8c:	sturb	wzr, [x1, #-1]
    fa90:	strb	wzr, [x0, #40]
    fa94:	ldr	x1, [sp, #80]
    fa98:	cbz	x1, faa4 <lzma_mf_is_supported@@XZ_5.0+0x1758>
    fa9c:	ldr	x0, [sp, #88]
    faa0:	cbnz	x0, fad8 <lzma_mf_is_supported@@XZ_5.0+0x178c>
    faa4:	strb	wzr, [x19, #160]
    faa8:	strb	wzr, [x19, #161]
    faac:	str	xzr, [x19, #168]
    fab0:	str	xzr, [x19, #176]
    fab4:	add	x2, x22, #0x18
    fab8:	mov	x1, x20
    fabc:	add	x0, x19, #0x58
    fac0:	bl	38d8 <lzma_version_string@@XZ_5.0+0x210>
    fac4:	ldp	x19, x20, [sp, #16]
    fac8:	ldp	x21, x22, [sp, #32]
    facc:	ldr	x23, [sp, #48]
    fad0:	ldp	x29, x30, [sp], #96
    fad4:	ret
    fad8:	ldr	x21, [sp, #72]
    fadc:	cmp	x21, x0
    fae0:	csel	x21, x21, x0, ls  // ls = plast
    fae4:	sub	x0, x0, x21
    fae8:	mov	x2, x21
    faec:	add	x1, x1, x0
    faf0:	ldr	x0, [x19]
    faf4:	bl	3090 <memcpy@plt>
    faf8:	str	x21, [x19, #8]
    fafc:	str	x21, [x19, #16]
    fb00:	b	faa4 <lzma_mf_is_supported@@XZ_5.0+0x1758>
    fb04:	mov	w0, #0x5                   	// #5
    fb08:	b	fac4 <lzma_mf_is_supported@@XZ_5.0+0x1778>
    fb0c:	mov	w0, #0x5                   	// #5
    fb10:	b	fac4 <lzma_mf_is_supported@@XZ_5.0+0x1778>
    fb14:	add	x0, x0, #0x1, lsl #12
    fb18:	add	x0, x0, #0xb8
    fb1c:	ret
    fb20:	stp	x29, x30, [sp, #-16]!
    fb24:	mov	x29, sp
    fb28:	ldr	x2, [x0, #72]
    fb2c:	ldr	x0, [x0, #48]
    fb30:	blr	x2
    fb34:	ldp	x29, x30, [sp], #16
    fb38:	ret

000000000000fb3c <lzma_lzma_preset@@XZ_5.0>:
    fb3c:	mov	x2, x0
    fb40:	and	w3, w1, #0x1f
    fb44:	mov	w0, #0x1                   	// #1
    fb48:	cmp	w3, #0x9
    fb4c:	b.hi	fbe0 <lzma_lzma_preset@@XZ_5.0+0xa4>  // b.pmore
    fb50:	mov	w0, #0x1                   	// #1
    fb54:	tst	w1, #0x7fffffe0
    fb58:	b.ne	fbe0 <lzma_lzma_preset@@XZ_5.0+0xa4>  // b.any
    fb5c:	str	xzr, [x2, #8]
    fb60:	str	wzr, [x2, #16]
    fb64:	mov	w0, #0x3                   	// #3
    fb68:	str	w0, [x2, #20]
    fb6c:	str	wzr, [x2, #24]
    fb70:	mov	w0, #0x2                   	// #2
    fb74:	str	w0, [x2, #28]
    fb78:	adrp	x0, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xba70>
    fb7c:	add	x0, x0, #0x738
    fb80:	ldrb	w4, [x0, w3, uxtw]
    fb84:	mov	w0, #0x1                   	// #1
    fb88:	lsl	w0, w0, w4
    fb8c:	str	w0, [x2]
    fb90:	tst	w1, #0x1c
    fb94:	b.ne	fbe4 <lzma_lzma_preset@@XZ_5.0+0xa8>  // b.any
    fb98:	mov	w0, #0x1                   	// #1
    fb9c:	str	w0, [x2, #32]
    fba0:	cmp	w3, #0x0
    fba4:	cset	w0, ne  // ne = any
    fba8:	add	w0, w0, #0x3
    fbac:	str	w0, [x2, #40]
    fbb0:	tst	w1, #0x1e
    fbb4:	mov	w0, #0x80                  	// #128
    fbb8:	mov	w4, #0x111                 	// #273
    fbbc:	csel	w0, w0, w4, eq  // eq = none
    fbc0:	str	w0, [x2, #36]
    fbc4:	adrp	x0, 1d000 <lzma_mode_is_supported@@XZ_5.0+0xba70>
    fbc8:	add	x0, x0, #0x738
    fbcc:	add	x0, x0, w3, uxtw
    fbd0:	ldrb	w0, [x0, #16]
    fbd4:	str	w0, [x2, #44]
    fbd8:	mov	w0, #0x0                   	// #0
    fbdc:	tbnz	w1, #31, fc1c <lzma_lzma_preset@@XZ_5.0+0xe0>
    fbe0:	ret
    fbe4:	mov	w0, #0x2                   	// #2
    fbe8:	str	w0, [x2, #32]
    fbec:	mov	w0, #0x14                  	// #20
    fbf0:	str	w0, [x2, #40]
    fbf4:	mov	w0, #0x10                  	// #16
    fbf8:	cmp	w3, #0x4
    fbfc:	b.eq	fc10 <lzma_lzma_preset@@XZ_5.0+0xd4>  // b.none
    fc00:	cmp	w3, #0x5
    fc04:	mov	w0, #0x20                  	// #32
    fc08:	mov	w4, #0x40                  	// #64
    fc0c:	csel	w0, w0, w4, eq  // eq = none
    fc10:	str	w0, [x2, #36]
    fc14:	str	wzr, [x2, #44]
    fc18:	b	fbd8 <lzma_lzma_preset@@XZ_5.0+0x9c>
    fc1c:	mov	w0, #0x2                   	// #2
    fc20:	str	w0, [x2, #32]
    fc24:	mov	w0, #0x14                  	// #20
    fc28:	str	w0, [x2, #40]
    fc2c:	sub	w3, w3, #0x3
    fc30:	tst	w3, #0xfffffffd
    fc34:	b.ne	fc4c <lzma_lzma_preset@@XZ_5.0+0x110>  // b.any
    fc38:	mov	w0, #0xc0                  	// #192
    fc3c:	str	w0, [x2, #36]
    fc40:	str	wzr, [x2, #44]
    fc44:	mov	w0, #0x0                   	// #0
    fc48:	b	fbe0 <lzma_lzma_preset@@XZ_5.0+0xa4>
    fc4c:	mov	w0, #0x111                 	// #273
    fc50:	str	w0, [x2, #36]
    fc54:	mov	w0, #0x200                 	// #512
    fc58:	str	w0, [x2, #44]
    fc5c:	mov	w0, #0x0                   	// #0
    fc60:	b	fbe0 <lzma_lzma_preset@@XZ_5.0+0xa4>
    fc64:	add	x2, x0, #0x4, lsl #12
    fc68:	ldr	w8, [x2, #2052]
    fc6c:	mov	w10, w1
    fc70:	add	x1, x10, #0x1, lsl #12
    fc74:	add	x1, x1, #0x200
    fc78:	add	x1, x0, x1, lsl #2
    fc7c:	str	w8, [x1, #8]
    fc80:	ldrh	w2, [x0]
    fc84:	lsr	w2, w2, #4
    fc88:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    fc8c:	ldr	x1, [x1, #3960]
    fc90:	ldrb	w13, [x1, w2, sxtw]
    fc94:	eor	w2, w2, #0x7f
    fc98:	ldrb	w3, [x1, w2, uxtw]
    fc9c:	ldrh	w2, [x0, #2]
    fca0:	lsr	w2, w2, #4
    fca4:	ldrb	w9, [x1, w2, sxtw]
    fca8:	add	w9, w9, w3
    fcac:	eor	w2, w2, #0x7f
    fcb0:	ldrb	w5, [x1, w2, uxtw]
    fcb4:	add	w5, w5, w3
    fcb8:	add	x7, x10, x10, lsl #4
    fcbc:	add	x7, x0, x7, lsl #6
    fcc0:	add	x7, x7, #0x404
    fcc4:	cbz	w8, fe10 <lzma_lzma_preset@@XZ_5.0+0x2d4>
    fcc8:	lsl	x12, x10, #4
    fccc:	add	x12, x12, #0x4
    fcd0:	mov	w6, #0x0                   	// #0
    fcd4:	mov	x11, x1
    fcd8:	add	w3, w6, #0x8
    fcdc:	mov	w4, #0x0                   	// #0
    fce0:	and	w2, w3, #0x1
    fce4:	lsr	w3, w3, #1
    fce8:	lsl	w1, w3, #1
    fcec:	add	x1, x0, x1
    fcf0:	ldrh	w1, [x1, x12]
    fcf4:	neg	w2, w2
    fcf8:	and	w2, w2, #0x7ff
    fcfc:	eor	w1, w1, w2
    fd00:	lsr	w1, w1, #4
    fd04:	ldrb	w1, [x11, w1, uxtw]
    fd08:	add	w4, w4, w1
    fd0c:	cmp	w3, #0x1
    fd10:	b.ne	fce0 <lzma_lzma_preset@@XZ_5.0+0x1a4>  // b.any
    fd14:	add	w4, w13, w4
    fd18:	str	w4, [x7, w6, uxtw #2]
    fd1c:	add	w6, w6, #0x1
    fd20:	cmp	w8, w6
    fd24:	cset	w1, hi  // hi = pmore
    fd28:	cmp	w1, #0x0
    fd2c:	ccmp	w6, #0x7, #0x2, ne  // ne = any
    fd30:	b.ls	fcd8 <lzma_lzma_preset@@XZ_5.0+0x19c>  // b.plast
    fd34:	cmp	w1, #0x0
    fd38:	ccmp	w6, #0xf, #0x2, ne  // ne = any
    fd3c:	b.hi	fda4 <lzma_lzma_preset@@XZ_5.0+0x268>  // b.pmore
    fd40:	lsl	x10, x10, #4
    fd44:	add	x10, x10, #0x104
    fd48:	adrp	x11, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    fd4c:	ldr	x11, [x11, #3960]
    fd50:	mov	w3, w6
    fd54:	mov	w4, #0x0                   	// #0
    fd58:	and	w2, w3, #0x1
    fd5c:	lsr	w3, w3, #1
    fd60:	lsl	w1, w3, #1
    fd64:	add	x1, x0, x1
    fd68:	ldrh	w1, [x1, x10]
    fd6c:	neg	w2, w2
    fd70:	and	w2, w2, #0x7ff
    fd74:	eor	w1, w1, w2
    fd78:	lsr	w1, w1, #4
    fd7c:	ldrb	w1, [x11, w1, uxtw]
    fd80:	add	w4, w4, w1
    fd84:	cmp	w3, #0x1
    fd88:	b.ne	fd58 <lzma_lzma_preset@@XZ_5.0+0x21c>  // b.any
    fd8c:	add	w4, w9, w4
    fd90:	str	w4, [x7, w6, uxtw #2]
    fd94:	add	w6, w6, #0x1
    fd98:	cmp	w8, w6
    fd9c:	ccmp	w6, #0xf, #0x2, hi  // hi = pmore
    fda0:	b.ls	fd50 <lzma_lzma_preset@@XZ_5.0+0x214>  // b.plast
    fda4:	cmp	w8, w6
    fda8:	b.ls	fe10 <lzma_lzma_preset@@XZ_5.0+0x2d4>  // b.plast
    fdac:	add	x7, x7, w6, uxtw #2
    fdb0:	add	w6, w6, #0xf0
    fdb4:	add	w8, w8, #0xf0
    fdb8:	add	x3, x0, #0x204
    fdbc:	adrp	x9, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
    fdc0:	ldr	x9, [x9, #3960]
    fdc4:	mov	w2, w6
    fdc8:	mov	w4, #0x0                   	// #0
    fdcc:	and	w1, w2, #0x1
    fdd0:	lsr	w2, w2, #1
    fdd4:	mov	w0, w2
    fdd8:	ldrh	w0, [x3, x0, lsl #1]
    fddc:	neg	w1, w1
    fde0:	and	w1, w1, #0x7ff
    fde4:	eor	w0, w0, w1
    fde8:	lsr	w0, w0, #4
    fdec:	ldrb	w0, [x9, w0, uxtw]
    fdf0:	add	w4, w4, w0
    fdf4:	cmp	w2, #0x1
    fdf8:	b.ne	fdcc <lzma_lzma_preset@@XZ_5.0+0x290>  // b.any
    fdfc:	add	w4, w5, w4
    fe00:	str	w4, [x7], #4
    fe04:	add	w6, w6, #0x1
    fe08:	cmp	w6, w8
    fe0c:	b.ne	fdc4 <lzma_lzma_preset@@XZ_5.0+0x288>  // b.any
    fe10:	ret
    fe14:	ldr	w2, [x0, #20]
    fe18:	mov	w1, #0x0                   	// #0
    fe1c:	cmp	w2, #0x4
    fe20:	b.hi	fe78 <lzma_lzma_preset@@XZ_5.0+0x33c>  // b.pmore
    fe24:	ldr	w3, [x0, #24]
    fe28:	cmp	w3, #0x4
    fe2c:	b.hi	fe78 <lzma_lzma_preset@@XZ_5.0+0x33c>  // b.pmore
    fe30:	add	w2, w2, w3
    fe34:	cmp	w2, #0x4
    fe38:	b.hi	fe78 <lzma_lzma_preset@@XZ_5.0+0x33c>  // b.pmore
    fe3c:	ldr	w1, [x0, #28]
    fe40:	cmp	w1, #0x4
    fe44:	b.ls	fe64 <lzma_lzma_preset@@XZ_5.0+0x328>  // b.plast
    fe48:	mov	w1, #0x0                   	// #0
    fe4c:	b	fe78 <lzma_lzma_preset@@XZ_5.0+0x33c>
    fe50:	ldr	w0, [x0, #32]
    fe54:	sub	w0, w0, #0x1
    fe58:	cmp	w0, #0x1
    fe5c:	cset	w1, ls  // ls = plast
    fe60:	b	fe78 <lzma_lzma_preset@@XZ_5.0+0x33c>
    fe64:	ldr	w1, [x0, #36]
    fe68:	sub	w1, w1, #0x2
    fe6c:	cmp	w1, #0x10f
    fe70:	b.ls	fe50 <lzma_lzma_preset@@XZ_5.0+0x314>  // b.plast
    fe74:	mov	w1, #0x0                   	// #0
    fe78:	and	w0, w1, #0x1
    fe7c:	ret
    fe80:	stp	x29, x30, [sp, #-48]!
    fe84:	mov	x29, sp
    fe88:	stp	x19, x20, [sp, #16]
    fe8c:	str	x21, [sp, #32]
    fe90:	mov	x20, x0
    fe94:	mov	w21, w1
    fe98:	and	w2, w2, #0xff
    fe9c:	mov	w0, #0x400                 	// #1024
    fea0:	strh	w0, [x20]
    fea4:	strh	w0, [x20, #2]
    fea8:	cbz	w1, ff0c <lzma_lzma_preset@@XZ_5.0+0x3d0>
    feac:	mov	w0, w1
    feb0:	add	x3, x20, #0x4
    feb4:	add	x0, x20, x0, lsl #4
    feb8:	add	x0, x0, #0x4
    febc:	mov	w4, #0x400                 	// #1024
    fec0:	strh	w4, [x3]
    fec4:	strh	w4, [x3, #2]
    fec8:	strh	w4, [x3, #4]
    fecc:	strh	w4, [x3, #6]
    fed0:	strh	w4, [x3, #8]
    fed4:	strh	w4, [x3, #10]
    fed8:	strh	w4, [x3, #12]
    fedc:	strh	w4, [x3, #14]
    fee0:	strh	w4, [x3, #256]
    fee4:	strh	w4, [x3, #258]
    fee8:	strh	w4, [x3, #260]
    feec:	strh	w4, [x3, #262]
    fef0:	strh	w4, [x3, #264]
    fef4:	strh	w4, [x3, #266]
    fef8:	strh	w4, [x3, #268]
    fefc:	strh	w4, [x3, #270]
    ff00:	add	x3, x3, #0x10
    ff04:	cmp	x3, x0
    ff08:	b.ne	fec0 <lzma_lzma_preset@@XZ_5.0+0x384>  // b.any
    ff0c:	add	x3, x20, #0x204
    ff10:	add	x5, x20, #0x404
    ff14:	mov	w4, #0x400                 	// #1024
    ff18:	strh	w4, [x3], #2
    ff1c:	cmp	x5, x3
    ff20:	b.ne	ff18 <lzma_lzma_preset@@XZ_5.0+0x3dc>  // b.any
    ff24:	cbnz	w2, ff48 <lzma_lzma_preset@@XZ_5.0+0x40c>
    ff28:	cbz	w21, ff48 <lzma_lzma_preset@@XZ_5.0+0x40c>
    ff2c:	mov	w19, #0x0                   	// #0
    ff30:	mov	w1, w19
    ff34:	mov	x0, x20
    ff38:	bl	fc64 <lzma_lzma_preset@@XZ_5.0+0x128>
    ff3c:	add	w19, w19, #0x1
    ff40:	cmp	w21, w19
    ff44:	b.ne	ff30 <lzma_lzma_preset@@XZ_5.0+0x3f4>  // b.any
    ff48:	ldp	x19, x20, [sp, #16]
    ff4c:	ldr	x21, [sp, #32]
    ff50:	ldp	x29, x30, [sp], #48
    ff54:	ret
    ff58:	stp	x29, x30, [sp, #-112]!
    ff5c:	mov	x29, sp
    ff60:	stp	x19, x20, [sp, #16]
    ff64:	stp	x21, x22, [sp, #32]
    ff68:	stp	x25, x26, [sp, #64]
    ff6c:	stp	x27, x28, [sp, #80]
    ff70:	mov	x19, x0
    ff74:	mov	x20, x1
    ff78:	mov	x26, x2
    ff7c:	mov	x21, x3
    ff80:	mov	x25, x4
    ff84:	mov	w28, w5
    ff88:	ldrb	w0, [x0, #2957]
    ff8c:	cbz	w0, ffa8 <lzma_lzma_preset@@XZ_5.0+0x46c>
    ff90:	stp	x23, x24, [sp, #48]
    ff94:	ldr	w24, [x20, #24]
    ff98:	ldr	w0, [x20, #28]
    ff9c:	sub	w24, w24, w0
    ffa0:	mov	w27, #0xffffffff            	// #-1
    ffa4:	b	10b94 <lzma_lzma_preset@@XZ_5.0+0x1058>
    ffa8:	ldr	w1, [x1, #24]
    ffac:	ldr	w0, [x20, #32]
    ffb0:	cmp	w1, w0
    ffb4:	b.eq	10050 <lzma_lzma_preset@@XZ_5.0+0x514>  // b.none
    ffb8:	stp	x23, x24, [sp, #48]
    ffbc:	ldr	x2, [x20, #56]
    ffc0:	mov	w1, #0x1                   	// #1
    ffc4:	mov	x0, x20
    ffc8:	blr	x2
    ffcc:	str	wzr, [x20, #28]
    ffd0:	ldr	x4, [x19, #24]
    ffd4:	add	x0, x19, x4, lsl #2
    ffd8:	str	wzr, [x0, #40]
    ffdc:	add	x0, x4, #0x22
    ffe0:	add	x1, x19, #0x6, lsl #12
    ffe4:	add	x1, x1, #0xb9c
    ffe8:	str	x1, [x19, x0, lsl #3]
    ffec:	add	x5, x4, #0x1
    fff0:	str	x5, [x19, #24]
    fff4:	add	x9, x19, #0xb9c
    fff8:	ldr	x0, [x20]
    fffc:	ldrb	w8, [x0]
   10000:	add	x4, x4, #0x9
   10004:	mov	x1, x5
   10008:	mov	w2, #0x1                   	// #1
   1000c:	add	w5, w5, #0x7
   10010:	add	x7, x19, #0x28
   10014:	add	x6, x19, #0x110
   10018:	sub	w0, w5, w1
   1001c:	lsr	w0, w8, w0
   10020:	and	w0, w0, #0x1
   10024:	str	w0, [x7, x1, lsl #2]
   10028:	add	x3, x9, w2, uxtw #1
   1002c:	str	x3, [x6, x1, lsl #3]
   10030:	add	x1, x1, #0x1
   10034:	add	w2, w0, w2, lsl #1
   10038:	cmp	x1, x4
   1003c:	b.ne	10018 <lzma_lzma_preset@@XZ_5.0+0x4dc>  // b.any
   10040:	str	x4, [x19, #24]
   10044:	mov	w0, #0x1                   	// #1
   10048:	strb	w0, [x19, #2957]
   1004c:	b	ff94 <lzma_lzma_preset@@XZ_5.0+0x458>
   10050:	ldr	w0, [x20, #104]
   10054:	cbz	w0, 10bb8 <lzma_lzma_preset@@XZ_5.0+0x107c>
   10058:	stp	x23, x24, [sp, #48]
   1005c:	b	10044 <lzma_lzma_preset@@XZ_5.0+0x508>
   10060:	ldr	x1, [x19]
   10064:	cmp	w1, w5
   10068:	b.ls	10074 <lzma_lzma_preset@@XZ_5.0+0x538>  // b.plast
   1006c:	cmp	xzr, x1, lsr #32
   10070:	b.eq	100b4 <lzma_lzma_preset@@XZ_5.0+0x578>  // b.none
   10074:	ubfx	x8, x1, #32, #8
   10078:	ldr	x2, [x21]
   1007c:	cmp	x25, x2
   10080:	b.eq	10bb0 <lzma_lzma_preset@@XZ_5.0+0x1074>  // b.none
   10084:	ldrb	w7, [x19, #20]
   10088:	add	w7, w8, w7
   1008c:	strb	w7, [x26, x2]
   10090:	add	x2, x2, #0x1
   10094:	str	x2, [x21]
   10098:	strb	w27, [x19, #20]
   1009c:	ldr	x2, [x19, #8]
   100a0:	sub	x2, x2, #0x1
   100a4:	str	x2, [x19, #8]
   100a8:	cbnz	x2, 10078 <lzma_lzma_preset@@XZ_5.0+0x53c>
   100ac:	lsr	x2, x1, #24
   100b0:	strb	w2, [x19, #20]
   100b4:	ldr	x2, [x19, #8]
   100b8:	add	x2, x2, #0x1
   100bc:	str	x2, [x19, #8]
   100c0:	lsl	w1, w1, #8
   100c4:	str	x1, [x19]
   100c8:	lsl	w4, w4, #8
   100cc:	str	w4, [x19, #16]
   100d0:	b	10160 <lzma_lzma_preset@@XZ_5.0+0x624>
   100d4:	cbz	w1, 10110 <lzma_lzma_preset@@XZ_5.0+0x5d4>
   100d8:	add	x0, x0, #0x22
   100dc:	ldr	x4, [x19, x0, lsl #3]
   100e0:	ldrh	w0, [x4]
   100e4:	ldr	w1, [x19, #16]
   100e8:	lsr	w2, w1, #11
   100ec:	mul	w2, w2, w0
   100f0:	ldr	x3, [x19]
   100f4:	add	x3, x3, w2, uxtw
   100f8:	str	x3, [x19]
   100fc:	sub	w1, w1, w2
   10100:	str	w1, [x19, #16]
   10104:	sub	w0, w0, w0, lsr #5
   10108:	strh	w0, [x4]
   1010c:	b	1013c <lzma_lzma_preset@@XZ_5.0+0x600>
   10110:	add	x0, x0, #0x22
   10114:	ldr	x2, [x19, x0, lsl #3]
   10118:	ldrh	w1, [x2]
   1011c:	ldr	w0, [x19, #16]
   10120:	lsr	w0, w0, #11
   10124:	mul	w0, w0, w1
   10128:	str	w0, [x19, #16]
   1012c:	mov	w0, #0x800                 	// #2048
   10130:	sub	w0, w0, w1
   10134:	add	w0, w1, w0, lsr #5
   10138:	strh	w0, [x2]
   1013c:	ldr	x0, [x19, #32]
   10140:	add	x0, x0, #0x1
   10144:	str	x0, [x19, #32]
   10148:	ldr	x3, [x19, #24]
   1014c:	cmp	x0, x3
   10150:	b.cs	103b8 <lzma_lzma_preset@@XZ_5.0+0x87c>  // b.hs, b.nlast
   10154:	ldr	w4, [x19, #16]
   10158:	cmp	w4, w6
   1015c:	b.ls	10060 <lzma_lzma_preset@@XZ_5.0+0x524>  // b.plast
   10160:	add	x1, x19, x0, lsl #2
   10164:	ldr	w1, [x1, #40]
   10168:	cmp	w1, #0x2
   1016c:	b.eq	10194 <lzma_lzma_preset@@XZ_5.0+0x658>  // b.none
   10170:	b.ls	100d4 <lzma_lzma_preset@@XZ_5.0+0x598>  // b.plast
   10174:	cmp	w1, #0x3
   10178:	b.eq	101a4 <lzma_lzma_preset@@XZ_5.0+0x668>  // b.none
   1017c:	cmp	w1, #0x4
   10180:	b.ne	1013c <lzma_lzma_preset@@XZ_5.0+0x600>  // b.any
   10184:	mov	w0, #0xffffffff            	// #-1
   10188:	str	w0, [x19, #16]
   1018c:	mov	w5, #0xfeffffff            	// #-16777217
   10190:	b	1022c <lzma_lzma_preset@@XZ_5.0+0x6f0>
   10194:	ldr	w0, [x19, #16]
   10198:	lsr	w0, w0, #1
   1019c:	str	w0, [x19, #16]
   101a0:	b	1013c <lzma_lzma_preset@@XZ_5.0+0x600>
   101a4:	ldr	w0, [x19, #16]
   101a8:	lsr	w0, w0, #1
   101ac:	str	w0, [x19, #16]
   101b0:	mov	w0, w0
   101b4:	ldr	x1, [x19]
   101b8:	add	x0, x1, x0
   101bc:	str	x0, [x19]
   101c0:	b	1013c <lzma_lzma_preset@@XZ_5.0+0x600>
   101c4:	ubfx	x4, x0, #32, #8
   101c8:	ldr	x1, [x21]
   101cc:	cmp	x25, x1
   101d0:	b.eq	10bb0 <lzma_lzma_preset@@XZ_5.0+0x1074>  // b.none
   101d4:	ldrb	w2, [x19, #20]
   101d8:	add	w2, w4, w2
   101dc:	strb	w2, [x26, x1]
   101e0:	add	x1, x1, #0x1
   101e4:	str	x1, [x21]
   101e8:	strb	w27, [x19, #20]
   101ec:	ldr	x1, [x19, #8]
   101f0:	sub	x1, x1, #0x1
   101f4:	str	x1, [x19, #8]
   101f8:	cbnz	x1, 101c8 <lzma_lzma_preset@@XZ_5.0+0x68c>
   101fc:	lsr	x1, x0, #24
   10200:	strb	w1, [x19, #20]
   10204:	ldr	x1, [x19, #8]
   10208:	add	x1, x1, #0x1
   1020c:	str	x1, [x19, #8]
   10210:	lsl	w0, w0, #8
   10214:	str	x0, [x19]
   10218:	ldr	x0, [x19, #32]
   1021c:	add	x0, x0, #0x1
   10220:	str	x0, [x19, #32]
   10224:	cmp	x0, x3
   10228:	b.cs	10244 <lzma_lzma_preset@@XZ_5.0+0x708>  // b.hs, b.nlast
   1022c:	ldr	x0, [x19]
   10230:	cmp	w0, w5
   10234:	b.ls	101c4 <lzma_lzma_preset@@XZ_5.0+0x688>  // b.plast
   10238:	cmp	xzr, x0, lsr #32
   1023c:	b.eq	10204 <lzma_lzma_preset@@XZ_5.0+0x6c8>  // b.none
   10240:	b	101c4 <lzma_lzma_preset@@XZ_5.0+0x688>
   10244:	str	xzr, [x19]
   10248:	mov	x0, #0x1                   	// #1
   1024c:	str	x0, [x19, #8]
   10250:	strb	wzr, [x19, #20]
   10254:	str	xzr, [x19, #24]
   10258:	str	xzr, [x19, #32]
   1025c:	cmn	w28, #0x1
   10260:	b.eq	10294 <lzma_lzma_preset@@XZ_5.0+0x758>  // b.none
   10264:	ldr	w0, [x20, #24]
   10268:	ldr	w1, [x20, #28]
   1026c:	sub	w0, w0, w1
   10270:	cmp	w0, w28
   10274:	b.cs	11068 <lzma_lzma_preset@@XZ_5.0+0x152c>  // b.hs, b.nlast
   10278:	ldr	x0, [x21]
   1027c:	add	x0, x0, #0x4
   10280:	ldr	x1, [x19, #8]
   10284:	add	x0, x0, x1
   10288:	mov	x1, #0xeffe                	// #61438
   1028c:	cmp	x0, x1
   10290:	b.hi	11068 <lzma_lzma_preset@@XZ_5.0+0x152c>  // b.pmore
   10294:	ldr	w1, [x20, #24]
   10298:	ldr	w0, [x20, #32]
   1029c:	cmp	w1, w0
   102a0:	b.cc	102b4 <lzma_lzma_preset@@XZ_5.0+0x778>  // b.lo, b.ul, b.last
   102a4:	ldr	w0, [x20, #104]
   102a8:	cbz	w0, 10bb0 <lzma_lzma_preset@@XZ_5.0+0x1074>
   102ac:	ldr	w0, [x20, #28]
   102b0:	cbz	w0, 10bd0 <lzma_lzma_preset@@XZ_5.0+0x1094>
   102b4:	ldrb	w0, [x19, #2956]
   102b8:	cbz	w0, 103c4 <lzma_lzma_preset@@XZ_5.0+0x888>
   102bc:	add	x3, sp, #0x68
   102c0:	add	x2, sp, #0x6c
   102c4:	mov	x1, x20
   102c8:	mov	x0, x19
   102cc:	bl	115a0 <lzma_mode_is_supported@@XZ_5.0+0x10>
   102d0:	ldr	w22, [sp, #108]
   102d4:	ldr	w23, [sp, #104]
   102d8:	ldr	w1, [x19, #2960]
   102dc:	and	w1, w24, w1
   102e0:	cmn	w22, #0x1
   102e4:	b.eq	103e0 <lzma_lzma_preset@@XZ_5.0+0x8a4>  // b.none
   102e8:	mov	w6, w1
   102ec:	ldr	w0, [x19, #736]
   102f0:	add	x0, x6, x0, lsl #4
   102f4:	add	x0, x0, #0x3, lsl #12
   102f8:	add	x0, x0, #0x5ce
   102fc:	add	x0, x19, x0, lsl #1
   10300:	ldr	x2, [x19, #24]
   10304:	add	x4, x19, x2, lsl #2
   10308:	mov	w3, #0x1                   	// #1
   1030c:	str	w3, [x4, #40]
   10310:	add	x3, x19, x2, lsl #3
   10314:	str	x0, [x3, #272]
   10318:	add	x0, x2, #0x1
   1031c:	str	x0, [x19, #24]
   10320:	cmp	w22, #0x3
   10324:	b.hi	107b8 <lzma_lzma_preset@@XZ_5.0+0xc7c>  // b.pmore
   10328:	ldr	w0, [x19, #736]
   1032c:	add	x0, x0, #0x3, lsl #12
   10330:	add	x0, x0, #0x68e
   10334:	add	x0, x19, x0, lsl #1
   10338:	mov	w5, #0x1                   	// #1
   1033c:	str	w5, [x4, #44]
   10340:	str	x0, [x3, #280]
   10344:	add	x0, x2, #0x2
   10348:	str	x0, [x19, #24]
   1034c:	cbnz	w22, 10540 <lzma_lzma_preset@@XZ_5.0+0xa04>
   10350:	ldr	w0, [x19, #736]
   10354:	add	x0, x0, #0x3, lsl #12
   10358:	add	x0, x0, #0x69a
   1035c:	add	x0, x19, x0, lsl #1
   10360:	str	wzr, [x4, #48]
   10364:	str	x0, [x3, #288]
   10368:	ldr	w0, [x19, #736]
   1036c:	add	x0, x6, x0, lsl #4
   10370:	add	x0, x0, #0x3, lsl #12
   10374:	add	x0, x0, #0x6be
   10378:	add	x0, x19, x0, lsl #1
   1037c:	cmp	w23, w5
   10380:	cset	w5, ne  // ne = any
   10384:	str	w5, [x4, #52]
   10388:	str	x0, [x3, #296]
   1038c:	add	x2, x2, #0x4
   10390:	str	x2, [x19, #24]
   10394:	cmp	w23, #0x1
   10398:	b.ne	10604 <lzma_lzma_preset@@XZ_5.0+0xac8>  // b.any
   1039c:	ldr	w0, [x19, #736]
   103a0:	cmp	w0, #0x7
   103a4:	mov	w0, #0x9                   	// #9
   103a8:	mov	w1, #0xb                   	// #11
   103ac:	csel	w0, w0, w1, cc  // cc = lo, ul, last
   103b0:	str	w0, [x19, #736]
   103b4:	b	10b80 <lzma_lzma_preset@@XZ_5.0+0x1044>
   103b8:	str	xzr, [x19, #24]
   103bc:	str	xzr, [x19, #32]
   103c0:	b	1025c <lzma_lzma_preset@@XZ_5.0+0x720>
   103c4:	mov	w4, w24
   103c8:	add	x3, sp, #0x68
   103cc:	add	x2, sp, #0x6c
   103d0:	mov	x1, x20
   103d4:	mov	x0, x19
   103d8:	bl	11abc <lzma_mode_is_supported@@XZ_5.0+0x52c>
   103dc:	b	102d0 <lzma_lzma_preset@@XZ_5.0+0x794>
   103e0:	ldr	w0, [x19, #736]
   103e4:	mov	x2, #0x35ce                	// #13774
   103e8:	add	x0, x2, x0, lsl #4
   103ec:	add	x0, x0, w1, uxtw
   103f0:	add	x0, x19, x0, lsl #1
   103f4:	ldr	x1, [x19, #24]
   103f8:	add	x2, x19, x1, lsl #2
   103fc:	str	wzr, [x2, #40]
   10400:	add	x2, x1, #0x22
   10404:	str	x0, [x19, x2, lsl #3]
   10408:	add	x7, x1, #0x1
   1040c:	str	x7, [x19, #24]
   10410:	ldr	x5, [x20]
   10414:	ldr	w0, [x20, #24]
   10418:	sub	w8, w0, #0x1
   1041c:	ldr	w6, [x20, #28]
   10420:	sub	w0, w0, w6
   10424:	ldrb	w2, [x5, w0, uxtw]
   10428:	ldr	w9, [x19, #2964]
   1042c:	sub	w0, w0, #0x1
   10430:	ldrb	w4, [x5, w0, uxtw]
   10434:	mov	w3, #0x8                   	// #8
   10438:	sub	w3, w3, w9
   1043c:	asr	w4, w4, w3
   10440:	ldr	w0, [x19, #2968]
   10444:	and	w0, w24, w0
   10448:	lsl	w0, w0, w9
   1044c:	add	w4, w4, w0
   10450:	add	x4, x4, x4, lsl #1
   10454:	add	x4, x19, x4, lsl #9
   10458:	add	x4, x4, #0xb9c
   1045c:	ldr	w0, [x19, #736]
   10460:	cmp	w0, #0x6
   10464:	b.hi	104b0 <lzma_lzma_preset@@XZ_5.0+0x974>  // b.pmore
   10468:	add	x1, x1, #0x9
   1046c:	mov	x3, x7
   10470:	mov	w5, #0x1                   	// #1
   10474:	add	w7, w7, #0x7
   10478:	add	x9, x19, #0x28
   1047c:	add	x8, x19, #0x110
   10480:	sub	w0, w7, w3
   10484:	lsr	w0, w2, w0
   10488:	and	w0, w0, #0x1
   1048c:	str	w0, [x9, x3, lsl #2]
   10490:	add	x6, x4, w5, uxtw #1
   10494:	str	x6, [x8, x3, lsl #3]
   10498:	add	x3, x3, #0x1
   1049c:	add	w5, w0, w5, lsl #1
   104a0:	cmp	x3, x1
   104a4:	b.ne	10480 <lzma_lzma_preset@@XZ_5.0+0x944>  // b.any
   104a8:	str	x1, [x19, #24]
   104ac:	b	10518 <lzma_lzma_preset@@XZ_5.0+0x9dc>
   104b0:	ldr	w0, [x19, #740]
   104b4:	add	w6, w6, w0
   104b8:	sub	w6, w8, w6
   104bc:	ldrb	w5, [x5, w6, uxtw]
   104c0:	add	w2, w2, #0x100
   104c4:	add	x1, x1, #0x2
   104c8:	mov	w3, #0x100                 	// #256
   104cc:	add	x8, x19, #0x24
   104d0:	add	x7, x19, #0x108
   104d4:	mov	w6, #0xffff                	// #65535
   104d8:	lsl	w5, w5, #1
   104dc:	ubfx	x0, x2, #7, #1
   104e0:	str	w0, [x8, x1, lsl #2]
   104e4:	and	w0, w5, w3
   104e8:	add	w0, w0, w2, lsr #8
   104ec:	add	w0, w0, w3
   104f0:	add	x0, x4, x0, lsl #1
   104f4:	str	x0, [x7, x1, lsl #3]
   104f8:	lsl	w2, w2, #1
   104fc:	eon	w0, w5, w2
   10500:	and	w3, w3, w0
   10504:	mov	x0, x1
   10508:	add	x1, x1, #0x1
   1050c:	cmp	w2, w6
   10510:	b.ls	104d8 <lzma_lzma_preset@@XZ_5.0+0x99c>  // b.plast
   10514:	str	x0, [x19, #24]
   10518:	ldr	w1, [x19, #736]
   1051c:	mov	w0, #0x0                   	// #0
   10520:	cmp	w1, #0x3
   10524:	b.ls	10538 <lzma_lzma_preset@@XZ_5.0+0x9fc>  // b.plast
   10528:	sub	w2, w1, #0x3
   1052c:	sub	w0, w1, #0x6
   10530:	cmp	w1, #0x9
   10534:	csel	w0, w0, w2, hi  // hi = pmore
   10538:	str	w0, [x19, #736]
   1053c:	b	10b80 <lzma_lzma_preset@@XZ_5.0+0x1044>
   10540:	add	x0, x19, w22, uxtw #2
   10544:	ldr	w5, [x0, #740]
   10548:	ldr	w0, [x19, #736]
   1054c:	add	x0, x0, #0x3, lsl #12
   10550:	add	x0, x0, #0x69a
   10554:	add	x0, x19, x0, lsl #1
   10558:	mov	w7, #0x1                   	// #1
   1055c:	str	w7, [x4, #48]
   10560:	str	x0, [x3, #288]
   10564:	add	x0, x2, #0x3
   10568:	str	x0, [x19, #24]
   1056c:	cmp	w22, w7
   10570:	b.eq	105d4 <lzma_lzma_preset@@XZ_5.0+0xa98>  // b.none
   10574:	ldr	w0, [x19, #736]
   10578:	add	x0, x0, #0x3, lsl #12
   1057c:	add	x0, x0, #0x6a6
   10580:	add	x0, x19, x0, lsl #1
   10584:	mov	w7, #0x1                   	// #1
   10588:	str	w7, [x4, #52]
   1058c:	str	x0, [x3, #296]
   10590:	ldr	w0, [x19, #736]
   10594:	add	x0, x0, #0x3, lsl #12
   10598:	add	x0, x0, #0x6b2
   1059c:	add	x0, x19, x0, lsl #1
   105a0:	sub	w7, w22, #0x2
   105a4:	str	w7, [x4, #56]
   105a8:	str	x0, [x3, #304]
   105ac:	add	x2, x2, #0x5
   105b0:	str	x2, [x19, #24]
   105b4:	cmp	w22, #0x3
   105b8:	b.eq	105f8 <lzma_lzma_preset@@XZ_5.0+0xabc>  // b.none
   105bc:	ldr	w0, [x19, #744]
   105c0:	str	w0, [x19, #748]
   105c4:	ldr	w0, [x19, #740]
   105c8:	str	w0, [x19, #744]
   105cc:	str	w5, [x19, #740]
   105d0:	b	10394 <lzma_lzma_preset@@XZ_5.0+0x858>
   105d4:	ldr	w0, [x19, #736]
   105d8:	add	x0, x0, #0x3, lsl #12
   105dc:	add	x0, x0, #0x6a6
   105e0:	add	x0, x19, x0, lsl #1
   105e4:	str	wzr, [x4, #52]
   105e8:	str	x0, [x3, #296]
   105ec:	add	x2, x2, #0x4
   105f0:	str	x2, [x19, #24]
   105f4:	b	105c4 <lzma_lzma_preset@@XZ_5.0+0xa88>
   105f8:	ldr	w0, [x19, #748]
   105fc:	str	w0, [x19, #752]
   10600:	b	105bc <lzma_lzma_preset@@XZ_5.0+0xa80>
   10604:	add	x0, x19, #0xb, lsl #12
   10608:	add	x0, x0, #0xa48
   1060c:	ldrb	w8, [x19, #2956]
   10610:	sub	w9, w23, #0x2
   10614:	cmp	w9, #0x7
   10618:	b.hi	106b8 <lzma_lzma_preset@@XZ_5.0+0xb7c>  // b.pmore
   1061c:	ldr	x14, [x19, #24]
   10620:	add	x2, x19, x14, lsl #2
   10624:	str	wzr, [x2, #40]
   10628:	add	x2, x14, #0x22
   1062c:	str	x0, [x19, x2, lsl #3]
   10630:	add	x4, x14, #0x1
   10634:	lsl	x10, x6, #4
   10638:	add	x10, x10, #0x4
   1063c:	mov	x13, x0
   10640:	mov	w7, #0x1                   	// #1
   10644:	mov	w3, #0x3                   	// #3
   10648:	add	x12, x19, #0x28
   1064c:	add	x11, x19, #0x110
   10650:	sub	w3, w3, #0x1
   10654:	lsr	w2, w9, w3
   10658:	and	w2, w2, #0x1
   1065c:	str	w2, [x12, x4, lsl #2]
   10660:	add	x5, x10, w7, uxtw #1
   10664:	add	x5, x13, x5
   10668:	str	x5, [x11, x4, lsl #3]
   1066c:	add	x4, x4, #0x1
   10670:	add	w7, w2, w7, lsl #1
   10674:	cbnz	w3, 10650 <lzma_lzma_preset@@XZ_5.0+0xb14>
   10678:	add	x14, x14, #0x4
   1067c:	str	x14, [x19, #24]
   10680:	cbnz	w8, 1069c <lzma_lzma_preset@@XZ_5.0+0xb60>
   10684:	add	x6, x19, x6, lsl #2
   10688:	add	x6, x6, #0x10, lsl #12
   1068c:	ldr	w2, [x6, #592]
   10690:	sub	w2, w2, #0x1
   10694:	str	w2, [x6, #592]
   10698:	cbz	w2, 107b0 <lzma_lzma_preset@@XZ_5.0+0xc74>
   1069c:	ldr	w0, [x19, #736]
   106a0:	cmp	w0, #0x7
   106a4:	mov	w0, #0x8                   	// #8
   106a8:	mov	w1, #0xb                   	// #11
   106ac:	csel	w0, w0, w1, cc  // cc = lo, ul, last
   106b0:	str	w0, [x19, #736]
   106b4:	b	10b80 <lzma_lzma_preset@@XZ_5.0+0x1044>
   106b8:	ldr	x9, [x19, #24]
   106bc:	add	x3, x19, x9, lsl #2
   106c0:	mov	w2, #0x1                   	// #1
   106c4:	str	w2, [x3, #40]
   106c8:	add	x2, x19, x9, lsl #3
   106cc:	str	x0, [x2, #272]
   106d0:	add	x4, x9, #0x1
   106d4:	str	x4, [x19, #24]
   106d8:	sub	w10, w23, #0xa
   106dc:	cmp	w10, #0x7
   106e0:	b.hi	10748 <lzma_lzma_preset@@XZ_5.0+0xc0c>  // b.pmore
   106e4:	str	wzr, [x3, #44]
   106e8:	add	x11, x19, #0xb, lsl #12
   106ec:	add	x11, x11, #0xa48
   106f0:	add	x3, x11, #0x2
   106f4:	str	x3, [x2, #280]
   106f8:	add	x4, x9, #0x2
   106fc:	lsl	x12, x6, #4
   10700:	add	x12, x12, #0x104
   10704:	mov	w7, #0x1                   	// #1
   10708:	mov	w3, #0x3                   	// #3
   1070c:	add	x14, x19, #0x28
   10710:	add	x13, x19, #0x110
   10714:	sub	w3, w3, #0x1
   10718:	lsr	w2, w10, w3
   1071c:	and	w2, w2, #0x1
   10720:	str	w2, [x14, x4, lsl #2]
   10724:	add	x5, x12, w7, uxtw #1
   10728:	add	x5, x11, x5
   1072c:	str	x5, [x13, x4, lsl #3]
   10730:	add	x4, x4, #0x1
   10734:	add	w7, w2, w7, lsl #1
   10738:	cbnz	w3, 10714 <lzma_lzma_preset@@XZ_5.0+0xbd8>
   1073c:	add	x9, x9, #0x5
   10740:	str	x9, [x19, #24]
   10744:	b	10680 <lzma_lzma_preset@@XZ_5.0+0xb44>
   10748:	mov	w4, #0x1                   	// #1
   1074c:	str	w4, [x3, #44]
   10750:	add	x10, x19, #0xb, lsl #12
   10754:	add	x10, x10, #0xa48
   10758:	add	x3, x10, #0x2
   1075c:	str	x3, [x2, #280]
   10760:	add	x7, x9, #0x2
   10764:	sub	w13, w23, #0x12
   10768:	add	x10, x10, #0x204
   1076c:	add	x9, x9, #0xa
   10770:	mov	x3, x7
   10774:	add	w7, w7, #0x7
   10778:	add	x12, x19, #0x28
   1077c:	add	x11, x19, #0x110
   10780:	sub	w2, w7, w3
   10784:	lsr	w2, w13, w2
   10788:	and	w2, w2, #0x1
   1078c:	str	w2, [x12, x3, lsl #2]
   10790:	add	x5, x10, w4, uxtw #1
   10794:	str	x5, [x11, x3, lsl #3]
   10798:	add	x3, x3, #0x1
   1079c:	add	w4, w2, w4, lsl #1
   107a0:	cmp	x3, x9
   107a4:	b.ne	10780 <lzma_lzma_preset@@XZ_5.0+0xc44>  // b.any
   107a8:	str	x9, [x19, #24]
   107ac:	b	10680 <lzma_lzma_preset@@XZ_5.0+0xb44>
   107b0:	bl	fc64 <lzma_lzma_preset@@XZ_5.0+0x128>
   107b4:	b	1069c <lzma_lzma_preset@@XZ_5.0+0xb60>
   107b8:	ldr	w0, [x19, #736]
   107bc:	add	x0, x0, #0x3, lsl #12
   107c0:	add	x0, x0, #0x68e
   107c4:	add	x0, x19, x0, lsl #1
   107c8:	str	wzr, [x4, #44]
   107cc:	str	x0, [x3, #280]
   107d0:	add	x0, x2, #0x2
   107d4:	str	x0, [x19, #24]
   107d8:	sub	w22, w22, #0x4
   107dc:	ldr	w0, [x19, #736]
   107e0:	cmp	w0, #0x7
   107e4:	mov	w0, #0x7                   	// #7
   107e8:	mov	w5, #0xa                   	// #10
   107ec:	csel	w0, w0, w5, cc  // cc = lo, ul, last
   107f0:	str	w0, [x19, #736]
   107f4:	add	x0, x19, #0x7, lsl #12
   107f8:	add	x0, x0, #0x200
   107fc:	ldrb	w8, [x19, #2956]
   10800:	sub	w10, w23, #0x2
   10804:	cmp	w10, #0x7
   10808:	b.hi	109a8 <lzma_lzma_preset@@XZ_5.0+0xe6c>  // b.pmore
   1080c:	str	wzr, [x4, #48]
   10810:	str	x0, [x3, #288]
   10814:	add	x5, x2, #0x3
   10818:	lsl	x11, x6, #4
   1081c:	add	x11, x11, #0x4
   10820:	mov	x14, x0
   10824:	mov	w9, #0x1                   	// #1
   10828:	mov	w4, #0x3                   	// #3
   1082c:	add	x13, x19, #0x28
   10830:	add	x12, x19, #0x110
   10834:	sub	w4, w4, #0x1
   10838:	lsr	w3, w10, w4
   1083c:	and	w3, w3, #0x1
   10840:	str	w3, [x13, x5, lsl #2]
   10844:	add	x7, x11, w9, uxtw #1
   10848:	add	x7, x14, x7
   1084c:	str	x7, [x12, x5, lsl #3]
   10850:	add	x5, x5, #0x1
   10854:	add	w9, w3, w9, lsl #1
   10858:	cbnz	w4, 10834 <lzma_lzma_preset@@XZ_5.0+0xcf8>
   1085c:	add	x2, x2, #0x6
   10860:	str	x2, [x19, #24]
   10864:	cbnz	w8, 10880 <lzma_lzma_preset@@XZ_5.0+0xd44>
   10868:	add	x6, x19, x6, lsl #2
   1086c:	add	x6, x6, #0x8, lsl #12
   10870:	ldr	w2, [x6, #14856]
   10874:	sub	w2, w2, #0x1
   10878:	str	w2, [x6, #14856]
   1087c:	cbz	w2, 10a94 <lzma_lzma_preset@@XZ_5.0+0xf58>
   10880:	mov	w0, #0x1fff                	// #8191
   10884:	cmp	w22, w0
   10888:	b.ls	10a9c <lzma_lzma_preset@@XZ_5.0+0xf60>  // b.plast
   1088c:	mov	w0, #0x1ffffff             	// #33554431
   10890:	cmp	w22, w0
   10894:	b.ls	10aac <lzma_lzma_preset@@XZ_5.0+0xf70>  // b.plast
   10898:	lsr	w1, w22, #24
   1089c:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   108a0:	ldr	x0, [x0, #4008]
   108a4:	ldrb	w1, [x0, w1, uxtw]
   108a8:	add	w7, w1, #0x30
   108ac:	cmp	w23, #0x5
   108b0:	mov	w5, #0x5                   	// #5
   108b4:	csel	w5, w23, w5, ls  // ls = plast
   108b8:	sub	w5, w5, #0x2
   108bc:	mov	x0, #0x6efc                	// #28412
   108c0:	add	x5, x0, x5, lsl #7
   108c4:	ldr	x4, [x19, #24]
   108c8:	add	x2, x4, #0x6
   108cc:	mov	x1, x4
   108d0:	mov	w6, #0x1                   	// #1
   108d4:	add	w10, w4, #0x5
   108d8:	add	x9, x19, #0x28
   108dc:	add	x8, x19, #0x110
   108e0:	sub	w0, w10, w1
   108e4:	lsr	w0, w7, w0
   108e8:	and	w0, w0, #0x1
   108ec:	str	w0, [x9, x1, lsl #2]
   108f0:	add	x3, x5, w6, uxtw #1
   108f4:	add	x3, x19, x3
   108f8:	str	x3, [x8, x1, lsl #3]
   108fc:	add	x1, x1, #0x1
   10900:	add	w6, w0, w6, lsl #1
   10904:	cmp	x1, x2
   10908:	b.ne	108e0 <lzma_lzma_preset@@XZ_5.0+0xda4>  // b.any
   1090c:	str	x2, [x19, #24]
   10910:	cmp	w7, #0x3
   10914:	b.ls	10b54 <lzma_lzma_preset@@XZ_5.0+0x1018>  // b.plast
   10918:	lsr	w6, w7, #1
   1091c:	and	w1, w7, #0x1
   10920:	orr	w1, w1, #0x2
   10924:	sub	w0, w6, #0x1
   10928:	lsl	w1, w1, w0
   1092c:	sub	w0, w22, w1
   10930:	cmp	w7, #0xd
   10934:	b.hi	10ac4 <lzma_lzma_preset@@XZ_5.0+0xf88>  // b.pmore
   10938:	add	x8, x19, #0x7, lsl #12
   1093c:	add	x8, x8, #0xfc
   10940:	mov	w5, w1
   10944:	mov	w1, w7
   10948:	sub	x5, x5, x1
   1094c:	lsl	x5, x5, #1
   10950:	sub	x5, x5, #0x2
   10954:	add	x10, x4, #0x7
   10958:	sub	w11, w6, #0x2
   1095c:	add	x4, x4, #0x8
   10960:	add	x4, x4, x11
   10964:	mov	x1, x10
   10968:	mov	w6, #0x1                   	// #1
   1096c:	add	x9, x19, #0x24
   10970:	add	x7, x19, #0x108
   10974:	and	w2, w0, #0x1
   10978:	str	w2, [x9, x1, lsl #2]
   1097c:	lsr	w0, w0, #1
   10980:	add	x3, x5, w6, uxtw #1
   10984:	add	x3, x8, x3
   10988:	str	x3, [x7, x1, lsl #3]
   1098c:	add	w6, w2, w6, lsl #1
   10990:	add	x1, x1, #0x1
   10994:	cmp	x1, x4
   10998:	b.ne	10974 <lzma_lzma_preset@@XZ_5.0+0xe38>  // b.any
   1099c:	add	x10, x10, x11
   109a0:	str	x10, [x19, #24]
   109a4:	b	10b54 <lzma_lzma_preset@@XZ_5.0+0x1018>
   109a8:	mov	w5, #0x1                   	// #1
   109ac:	str	w5, [x4, #48]
   109b0:	str	x0, [x3, #288]
   109b4:	add	x5, x2, #0x3
   109b8:	str	x5, [x19, #24]
   109bc:	sub	w12, w23, #0xa
   109c0:	cmp	w12, #0x7
   109c4:	b.hi	10a2c <lzma_lzma_preset@@XZ_5.0+0xef0>  // b.pmore
   109c8:	str	wzr, [x4, #52]
   109cc:	add	x10, x19, #0x7, lsl #12
   109d0:	add	x10, x10, #0x200
   109d4:	add	x4, x10, #0x2
   109d8:	str	x4, [x3, #296]
   109dc:	add	x5, x2, #0x4
   109e0:	lsl	x11, x6, #4
   109e4:	add	x11, x11, #0x104
   109e8:	mov	w9, #0x1                   	// #1
   109ec:	mov	w4, #0x3                   	// #3
   109f0:	add	x14, x19, #0x28
   109f4:	add	x13, x19, #0x110
   109f8:	sub	w4, w4, #0x1
   109fc:	lsr	w3, w12, w4
   10a00:	and	w3, w3, #0x1
   10a04:	str	w3, [x14, x5, lsl #2]
   10a08:	add	x7, x11, w9, uxtw #1
   10a0c:	add	x7, x10, x7
   10a10:	str	x7, [x13, x5, lsl #3]
   10a14:	add	x5, x5, #0x1
   10a18:	add	w9, w3, w9, lsl #1
   10a1c:	cbnz	w4, 109f8 <lzma_lzma_preset@@XZ_5.0+0xebc>
   10a20:	add	x2, x2, #0x7
   10a24:	str	x2, [x19, #24]
   10a28:	b	10864 <lzma_lzma_preset@@XZ_5.0+0xd28>
   10a2c:	mov	w5, #0x1                   	// #1
   10a30:	str	w5, [x4, #52]
   10a34:	add	x10, x19, #0x7, lsl #12
   10a38:	add	x10, x10, #0x200
   10a3c:	add	x4, x10, #0x2
   10a40:	str	x4, [x3, #296]
   10a44:	add	x9, x2, #0x4
   10a48:	sub	w13, w23, #0x12
   10a4c:	add	x10, x10, #0x204
   10a50:	add	x2, x2, #0xc
   10a54:	mov	x4, x9
   10a58:	add	w9, w9, #0x7
   10a5c:	add	x12, x19, #0x28
   10a60:	add	x11, x19, #0x110
   10a64:	sub	w3, w9, w4
   10a68:	lsr	w3, w13, w3
   10a6c:	and	w3, w3, #0x1
   10a70:	str	w3, [x12, x4, lsl #2]
   10a74:	add	x7, x10, w5, uxtw #1
   10a78:	str	x7, [x11, x4, lsl #3]
   10a7c:	add	x4, x4, #0x1
   10a80:	add	w5, w3, w5, lsl #1
   10a84:	cmp	x4, x2
   10a88:	b.ne	10a64 <lzma_lzma_preset@@XZ_5.0+0xf28>  // b.any
   10a8c:	str	x2, [x19, #24]
   10a90:	b	10864 <lzma_lzma_preset@@XZ_5.0+0xd28>
   10a94:	bl	fc64 <lzma_lzma_preset@@XZ_5.0+0x128>
   10a98:	b	10880 <lzma_lzma_preset@@XZ_5.0+0xd44>
   10a9c:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   10aa0:	ldr	x0, [x0, #4008]
   10aa4:	ldrb	w7, [x0, w22, uxtw]
   10aa8:	b	108ac <lzma_lzma_preset@@XZ_5.0+0xd70>
   10aac:	lsr	w1, w22, #12
   10ab0:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   10ab4:	ldr	x0, [x0, #4008]
   10ab8:	ldrb	w1, [x0, w1, uxtw]
   10abc:	add	w7, w1, #0x18
   10ac0:	b	108ac <lzma_lzma_preset@@XZ_5.0+0xd70>
   10ac4:	lsr	w5, w0, #4
   10ac8:	sub	w3, w6, #0x5
   10acc:	add	x2, x19, x2, lsl #2
   10ad0:	sub	w3, w3, #0x1
   10ad4:	lsr	w1, w5, w3
   10ad8:	and	w1, w1, #0x1
   10adc:	add	w1, w1, #0x2
   10ae0:	str	w1, [x2, #40]
   10ae4:	add	x2, x2, #0x4
   10ae8:	cbnz	w3, 10ad0 <lzma_lzma_preset@@XZ_5.0+0xf94>
   10aec:	add	x4, x4, #0x7
   10af0:	sub	w6, w6, #0x6
   10af4:	add	x4, x4, x6
   10af8:	add	x9, x19, #0x7, lsl #12
   10afc:	add	x9, x9, #0x1e0
   10b00:	and	w0, w0, #0xf
   10b04:	add	x1, x4, #0x1
   10b08:	add	x8, x4, #0x5
   10b0c:	mov	w3, #0x1                   	// #1
   10b10:	add	x7, x19, #0x24
   10b14:	add	x6, x19, #0x108
   10b18:	and	w2, w0, #0x1
   10b1c:	str	w2, [x7, x1, lsl #2]
   10b20:	lsr	w0, w0, #1
   10b24:	add	x5, x9, w3, uxtw #1
   10b28:	str	x5, [x6, x1, lsl #3]
   10b2c:	add	w3, w2, w3, lsl #1
   10b30:	add	x1, x1, #0x1
   10b34:	cmp	x1, x8
   10b38:	b.ne	10b18 <lzma_lzma_preset@@XZ_5.0+0xfdc>  // b.any
   10b3c:	add	x4, x4, #0x4
   10b40:	str	x4, [x19, #24]
   10b44:	add	x1, x19, #0x10, lsl #12
   10b48:	ldr	w0, [x1, #3800]
   10b4c:	add	w0, w0, #0x1
   10b50:	str	w0, [x1, #3800]
   10b54:	ldr	w0, [x19, #748]
   10b58:	str	w0, [x19, #752]
   10b5c:	ldr	w0, [x19, #744]
   10b60:	str	w0, [x19, #748]
   10b64:	ldr	w0, [x19, #740]
   10b68:	str	w0, [x19, #744]
   10b6c:	str	w22, [x19, #740]
   10b70:	add	x1, x19, #0x10, lsl #12
   10b74:	ldr	w0, [x1, #3732]
   10b78:	add	w0, w0, #0x1
   10b7c:	str	w0, [x1, #3732]
   10b80:	ldr	w0, [x20, #28]
   10b84:	sub	w23, w0, w23
   10b88:	str	w23, [x20, #28]
   10b8c:	ldr	w0, [sp, #104]
   10b90:	add	w24, w24, w0
   10b94:	ldr	x0, [x19, #32]
   10b98:	ldr	x3, [x19, #24]
   10b9c:	cmp	x0, x3
   10ba0:	b.cs	103b8 <lzma_lzma_preset@@XZ_5.0+0x87c>  // b.hs, b.nlast
   10ba4:	mov	w6, #0xffffff              	// #16777215
   10ba8:	mov	w5, #0xfeffffff            	// #-16777217
   10bac:	b	10154 <lzma_lzma_preset@@XZ_5.0+0x618>
   10bb0:	mov	w0, #0x0                   	// #0
   10bb4:	ldp	x23, x24, [sp, #48]
   10bb8:	ldp	x19, x20, [sp, #16]
   10bbc:	ldp	x21, x22, [sp, #32]
   10bc0:	ldp	x25, x26, [sp, #64]
   10bc4:	ldp	x27, x28, [sp, #80]
   10bc8:	ldp	x29, x30, [sp], #112
   10bcc:	ret
   10bd0:	ldrb	w0, [x19, #2958]
   10bd4:	cbnz	w0, 11070 <lzma_lzma_preset@@XZ_5.0+0x1534>
   10bd8:	mov	w0, #0x1                   	// #1
   10bdc:	strb	w0, [x19, #2958]
   10be0:	cmn	w28, #0x1
   10be4:	b.ne	11020 <lzma_lzma_preset@@XZ_5.0+0x14e4>  // b.any
   10be8:	ldr	w0, [x19, #2960]
   10bec:	and	w1, w24, w0
   10bf0:	and	w24, w24, w0
   10bf4:	ldr	w0, [x19, #736]
   10bf8:	add	x0, x24, x0, lsl #4
   10bfc:	add	x0, x0, #0x3, lsl #12
   10c00:	add	x0, x0, #0x5ce
   10c04:	add	x0, x19, x0, lsl #1
   10c08:	ldr	x6, [x19, #24]
   10c0c:	add	x3, x19, x6, lsl #2
   10c10:	mov	w2, #0x1                   	// #1
   10c14:	str	w2, [x3, #40]
   10c18:	add	x2, x19, x6, lsl #3
   10c1c:	str	x0, [x2, #272]
   10c20:	ldr	w0, [x19, #736]
   10c24:	add	x0, x0, #0x3, lsl #12
   10c28:	add	x0, x0, #0x68e
   10c2c:	add	x0, x19, x0, lsl #1
   10c30:	str	wzr, [x3, #44]
   10c34:	str	x0, [x2, #280]
   10c38:	ldr	w0, [x19, #736]
   10c3c:	cmp	w0, #0x7
   10c40:	mov	w0, #0x7                   	// #7
   10c44:	mov	w4, #0xa                   	// #10
   10c48:	csel	w0, w0, w4, cc  // cc = lo, ul, last
   10c4c:	str	w0, [x19, #736]
   10c50:	add	x0, x19, #0x7, lsl #12
   10c54:	add	x0, x0, #0x200
   10c58:	ldrb	w9, [x19, #2956]
   10c5c:	str	wzr, [x3, #48]
   10c60:	str	x0, [x2, #288]
   10c64:	lsl	x5, x24, #4
   10c68:	add	x5, x5, #0x4
   10c6c:	mov	x8, x0
   10c70:	add	x2, x6, #0x4
   10c74:	add	x7, x6, #0x7
   10c78:	mov	w4, #0x1                   	// #1
   10c7c:	add	x20, x19, #0x24
   10c80:	add	x22, x19, #0x108
   10c84:	str	wzr, [x20, x2, lsl #2]
   10c88:	add	x3, x5, w4, uxtw #1
   10c8c:	add	x3, x8, x3
   10c90:	str	x3, [x22, x2, lsl #3]
   10c94:	lsl	w4, w4, #1
   10c98:	add	x2, x2, #0x1
   10c9c:	cmp	x2, x7
   10ca0:	b.ne	10c84 <lzma_lzma_preset@@XZ_5.0+0x1148>  // b.any
   10ca4:	add	x6, x6, #0x6
   10ca8:	str	x6, [x19, #24]
   10cac:	cbnz	w9, 10cc8 <lzma_lzma_preset@@XZ_5.0+0x118c>
   10cb0:	add	x24, x19, x24, lsl #2
   10cb4:	add	x2, x24, #0x8, lsl #12
   10cb8:	ldr	w3, [x2, #14856]
   10cbc:	sub	w3, w3, #0x1
   10cc0:	str	w3, [x2, #14856]
   10cc4:	cbz	w3, 10df4 <lzma_lzma_preset@@XZ_5.0+0x12b8>
   10cc8:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   10ccc:	ldr	x0, [x0, #4008]
   10cd0:	ldrb	w3, [x0, #255]
   10cd4:	add	w3, w3, #0x30
   10cd8:	add	x9, x19, #0x6, lsl #12
   10cdc:	add	x9, x9, #0xefc
   10ce0:	ldr	x5, [x19, #24]
   10ce4:	add	x6, x5, #0x6
   10ce8:	mov	x1, x5
   10cec:	mov	w2, #0x1                   	// #1
   10cf0:	add	w5, w5, #0x5
   10cf4:	add	x8, x19, #0x28
   10cf8:	add	x7, x19, #0x110
   10cfc:	sub	w0, w5, w1
   10d00:	lsr	w0, w3, w0
   10d04:	and	w0, w0, #0x1
   10d08:	str	w0, [x8, x1, lsl #2]
   10d0c:	add	x4, x9, w2, uxtw #1
   10d10:	str	x4, [x7, x1, lsl #3]
   10d14:	add	x1, x1, #0x1
   10d18:	add	w2, w0, w2, lsl #1
   10d1c:	cmp	x6, x1
   10d20:	b.ne	10cfc <lzma_lzma_preset@@XZ_5.0+0x11c0>  // b.any
   10d24:	lsr	w4, w3, #1
   10d28:	and	w0, w3, #0x1
   10d2c:	orr	w0, w0, #0x2
   10d30:	sub	w1, w4, #0x1
   10d34:	lsl	w0, w0, w1
   10d38:	mvn	w0, w0
   10d3c:	lsr	w5, w0, #4
   10d40:	sub	w2, w4, #0x5
   10d44:	add	x3, x19, x6, lsl #2
   10d48:	sub	w2, w2, #0x1
   10d4c:	lsr	w1, w5, w2
   10d50:	and	w1, w1, #0x1
   10d54:	add	w1, w1, #0x2
   10d58:	str	w1, [x3, #40]
   10d5c:	add	x3, x3, #0x4
   10d60:	cbnz	w2, 10d48 <lzma_lzma_preset@@XZ_5.0+0x120c>
   10d64:	sub	w1, w4, #0x6
   10d68:	add	x1, x1, #0x1
   10d6c:	add	x6, x1, x6
   10d70:	add	x7, x19, #0x7, lsl #12
   10d74:	add	x7, x7, #0x1e0
   10d78:	and	w0, w0, #0xf
   10d7c:	add	x1, x6, #0x1
   10d80:	add	x5, x6, #0x5
   10d84:	mov	w3, #0x1                   	// #1
   10d88:	and	w2, w0, #0x1
   10d8c:	str	w2, [x20, x1, lsl #2]
   10d90:	lsr	w0, w0, #1
   10d94:	add	x4, x7, w3, uxtw #1
   10d98:	str	x4, [x22, x1, lsl #3]
   10d9c:	add	w3, w2, w3, lsl #1
   10da0:	add	x1, x1, #0x1
   10da4:	cmp	x5, x1
   10da8:	b.ne	10d88 <lzma_lzma_preset@@XZ_5.0+0x124c>  // b.any
   10dac:	add	x0, x6, #0x4
   10db0:	str	x0, [x19, #24]
   10db4:	add	x0, x19, #0x10, lsl #12
   10db8:	ldr	w1, [x0, #3800]
   10dbc:	add	w1, w1, #0x1
   10dc0:	str	w1, [x0, #3800]
   10dc4:	ldr	w1, [x19, #748]
   10dc8:	str	w1, [x19, #752]
   10dcc:	ldr	w1, [x19, #744]
   10dd0:	str	w1, [x19, #748]
   10dd4:	ldr	w1, [x19, #740]
   10dd8:	str	w1, [x19, #744]
   10ddc:	mov	w1, #0xffffffff            	// #-1
   10de0:	str	w1, [x19, #740]
   10de4:	ldr	w1, [x0, #3732]
   10de8:	add	w1, w1, #0x1
   10dec:	str	w1, [x0, #3732]
   10df0:	b	11020 <lzma_lzma_preset@@XZ_5.0+0x14e4>
   10df4:	bl	fc64 <lzma_lzma_preset@@XZ_5.0+0x128>
   10df8:	b	10cc8 <lzma_lzma_preset@@XZ_5.0+0x118c>
   10dfc:	ldr	x7, [x19]
   10e00:	cmp	w7, w9
   10e04:	b.ls	10e10 <lzma_lzma_preset@@XZ_5.0+0x12d4>  // b.plast
   10e08:	cmp	xzr, x7, lsr #32
   10e0c:	b.eq	10e50 <lzma_lzma_preset@@XZ_5.0+0x1314>  // b.none
   10e10:	ubfx	x4, x7, #32, #8
   10e14:	ldr	x0, [x21]
   10e18:	cmp	x25, x0
   10e1c:	b.eq	1100c <lzma_lzma_preset@@XZ_5.0+0x14d0>  // b.none
   10e20:	ldrb	w1, [x19, #20]
   10e24:	add	w1, w4, w1
   10e28:	strb	w1, [x26, x0]
   10e2c:	add	x0, x0, #0x1
   10e30:	str	x0, [x21]
   10e34:	strb	w6, [x19, #20]
   10e38:	ldr	x0, [x19, #8]
   10e3c:	sub	x0, x0, #0x1
   10e40:	str	x0, [x19, #8]
   10e44:	cbnz	x0, 10e14 <lzma_lzma_preset@@XZ_5.0+0x12d8>
   10e48:	lsr	x0, x7, #24
   10e4c:	strb	w0, [x19, #20]
   10e50:	ldr	x0, [x19, #8]
   10e54:	add	x0, x0, #0x1
   10e58:	str	x0, [x19, #8]
   10e5c:	lsl	w7, w7, #8
   10e60:	str	x7, [x19]
   10e64:	lsl	w3, w3, #8
   10e68:	str	w3, [x19, #16]
   10e6c:	b	10ef8 <lzma_lzma_preset@@XZ_5.0+0x13bc>
   10e70:	cbz	w0, 10eac <lzma_lzma_preset@@XZ_5.0+0x1370>
   10e74:	add	x2, x2, #0x22
   10e78:	ldr	x4, [x19, x2, lsl #3]
   10e7c:	ldrh	w0, [x4]
   10e80:	ldr	w1, [x19, #16]
   10e84:	lsr	w2, w1, #11
   10e88:	mul	w2, w2, w0
   10e8c:	ldr	x3, [x19]
   10e90:	add	x3, x3, w2, uxtw
   10e94:	str	x3, [x19]
   10e98:	sub	w1, w1, w2
   10e9c:	str	w1, [x19, #16]
   10ea0:	sub	w0, w0, w0, lsr #5
   10ea4:	strh	w0, [x4]
   10ea8:	b	10ed4 <lzma_lzma_preset@@XZ_5.0+0x1398>
   10eac:	add	x2, x2, #0x22
   10eb0:	ldr	x2, [x19, x2, lsl #3]
   10eb4:	ldrh	w1, [x2]
   10eb8:	ldr	w0, [x19, #16]
   10ebc:	lsr	w0, w0, #11
   10ec0:	mul	w0, w0, w1
   10ec4:	str	w0, [x19, #16]
   10ec8:	sub	w0, w10, w1
   10ecc:	add	w0, w1, w0, lsr #5
   10ed0:	strh	w0, [x2]
   10ed4:	ldr	x2, [x19, #32]
   10ed8:	add	x2, x2, #0x1
   10edc:	str	x2, [x19, #32]
   10ee0:	ldr	x5, [x19, #24]
   10ee4:	cmp	x2, x5
   10ee8:	b.cs	11000 <lzma_lzma_preset@@XZ_5.0+0x14c4>  // b.hs, b.nlast
   10eec:	ldr	w3, [x19, #16]
   10ef0:	cmp	w3, w8
   10ef4:	b.ls	10dfc <lzma_lzma_preset@@XZ_5.0+0x12c0>  // b.plast
   10ef8:	add	x0, x19, x2, lsl #2
   10efc:	ldr	w0, [x0, #40]
   10f00:	cmp	w0, #0x2
   10f04:	b.eq	10f34 <lzma_lzma_preset@@XZ_5.0+0x13f8>  // b.none
   10f08:	cmp	w0, #0x2
   10f0c:	b.ls	10e70 <lzma_lzma_preset@@XZ_5.0+0x1334>  // b.plast
   10f10:	cmp	w0, #0x3
   10f14:	b.eq	10f44 <lzma_lzma_preset@@XZ_5.0+0x1408>  // b.none
   10f18:	cmp	w0, #0x4
   10f1c:	b.ne	10ed4 <lzma_lzma_preset@@XZ_5.0+0x1398>  // b.any
   10f20:	mov	w0, #0xffffffff            	// #-1
   10f24:	str	w0, [x19, #16]
   10f28:	mov	w6, #0xfeffffff            	// #-16777217
   10f2c:	mov	w3, #0xffffffff            	// #-1
   10f30:	b	10fcc <lzma_lzma_preset@@XZ_5.0+0x1490>
   10f34:	ldr	w0, [x19, #16]
   10f38:	lsr	w0, w0, #1
   10f3c:	str	w0, [x19, #16]
   10f40:	b	10ed4 <lzma_lzma_preset@@XZ_5.0+0x1398>
   10f44:	ldr	w0, [x19, #16]
   10f48:	lsr	w0, w0, #1
   10f4c:	str	w0, [x19, #16]
   10f50:	mov	w0, w0
   10f54:	ldr	x1, [x19]
   10f58:	add	x0, x1, x0
   10f5c:	str	x0, [x19]
   10f60:	b	10ed4 <lzma_lzma_preset@@XZ_5.0+0x1398>
   10f64:	ubfx	x2, x4, #32, #8
   10f68:	ldr	x0, [x21]
   10f6c:	cmp	x25, x0
   10f70:	b.eq	1100c <lzma_lzma_preset@@XZ_5.0+0x14d0>  // b.none
   10f74:	ldrb	w1, [x19, #20]
   10f78:	add	w1, w2, w1
   10f7c:	strb	w1, [x26, x0]
   10f80:	add	x0, x0, #0x1
   10f84:	str	x0, [x21]
   10f88:	strb	w3, [x19, #20]
   10f8c:	ldr	x0, [x19, #8]
   10f90:	sub	x0, x0, #0x1
   10f94:	str	x0, [x19, #8]
   10f98:	cbnz	x0, 10f68 <lzma_lzma_preset@@XZ_5.0+0x142c>
   10f9c:	lsr	x0, x4, #24
   10fa0:	strb	w0, [x19, #20]
   10fa4:	ldr	x0, [x19, #8]
   10fa8:	add	x0, x0, #0x1
   10fac:	str	x0, [x19, #8]
   10fb0:	lsl	w4, w4, #8
   10fb4:	str	x4, [x19]
   10fb8:	ldr	x0, [x19, #32]
   10fbc:	add	x0, x0, #0x1
   10fc0:	str	x0, [x19, #32]
   10fc4:	cmp	x5, x0
   10fc8:	b.ls	10fe4 <lzma_lzma_preset@@XZ_5.0+0x14a8>  // b.plast
   10fcc:	ldr	x4, [x19]
   10fd0:	cmp	w4, w6
   10fd4:	b.ls	10f64 <lzma_lzma_preset@@XZ_5.0+0x1428>  // b.plast
   10fd8:	cmp	xzr, x4, lsr #32
   10fdc:	b.eq	10fa4 <lzma_lzma_preset@@XZ_5.0+0x1468>  // b.none
   10fe0:	b	10f64 <lzma_lzma_preset@@XZ_5.0+0x1428>
   10fe4:	str	xzr, [x19]
   10fe8:	mov	x0, #0x1                   	// #1
   10fec:	str	x0, [x19, #8]
   10ff0:	strb	wzr, [x19, #20]
   10ff4:	str	xzr, [x19, #24]
   10ff8:	str	xzr, [x19, #32]
   10ffc:	b	11070 <lzma_lzma_preset@@XZ_5.0+0x1534>
   11000:	str	xzr, [x19, #24]
   11004:	str	xzr, [x19, #32]
   11008:	b	11070 <lzma_lzma_preset@@XZ_5.0+0x1534>
   1100c:	mov	w0, #0x0                   	// #0
   11010:	ldp	x23, x24, [sp, #48]
   11014:	b	10bb8 <lzma_lzma_preset@@XZ_5.0+0x107c>
   11018:	mov	w0, #0x1                   	// #1
   1101c:	strb	w0, [x19, #2958]
   11020:	ldr	x5, [x19, #24]
   11024:	add	x0, x19, x5, lsl #2
   11028:	mov	w1, #0x4                   	// #4
   1102c:	str	w1, [x0, #40]
   11030:	str	w1, [x0, #44]
   11034:	str	w1, [x0, #48]
   11038:	str	w1, [x0, #52]
   1103c:	str	w1, [x0, #56]
   11040:	add	x5, x5, #0x5
   11044:	str	x5, [x19, #24]
   11048:	ldr	x2, [x19, #32]
   1104c:	cmp	x2, x5
   11050:	b.cs	11000 <lzma_lzma_preset@@XZ_5.0+0x14c4>  // b.hs, b.nlast
   11054:	mov	w8, #0xffffff              	// #16777215
   11058:	mov	w9, #0xfeffffff            	// #-16777217
   1105c:	mov	w6, #0xffffffff            	// #-1
   11060:	mov	w10, #0x800                 	// #2048
   11064:	b	10eec <lzma_lzma_preset@@XZ_5.0+0x13b0>
   11068:	ldrb	w0, [x19, #2958]
   1106c:	cbz	w0, 11018 <lzma_lzma_preset@@XZ_5.0+0x14dc>
   11070:	strb	wzr, [x19, #2958]
   11074:	mov	w0, #0x1                   	// #1
   11078:	ldp	x23, x24, [sp, #48]
   1107c:	b	10bb8 <lzma_lzma_preset@@XZ_5.0+0x107c>
   11080:	ldr	w5, [x1, #104]
   11084:	cmp	w5, #0x1
   11088:	b.eq	110a4 <lzma_lzma_preset@@XZ_5.0+0x1568>  // b.none
   1108c:	stp	x29, x30, [sp, #-16]!
   11090:	mov	x29, sp
   11094:	mov	w5, #0xffffffff            	// #-1
   11098:	bl	ff58 <lzma_lzma_preset@@XZ_5.0+0x41c>
   1109c:	ldp	x29, x30, [sp], #16
   110a0:	ret
   110a4:	mov	w0, #0x8                   	// #8
   110a8:	ret
   110ac:	stp	x29, x30, [sp, #-48]!
   110b0:	mov	x29, sp
   110b4:	stp	x19, x20, [sp, #16]
   110b8:	mov	x19, x0
   110bc:	mov	x20, x1
   110c0:	mov	x0, x1
   110c4:	bl	fe14 <lzma_lzma_preset@@XZ_5.0+0x2d8>
   110c8:	and	w0, w0, #0xff
   110cc:	cbz	w0, 112c0 <lzma_lzma_preset@@XZ_5.0+0x1784>
   110d0:	str	x21, [sp, #32]
   110d4:	ldr	w1, [x20, #28]
   110d8:	mov	w0, #0x1                   	// #1
   110dc:	lsl	w1, w0, w1
   110e0:	sub	w1, w1, #0x1
   110e4:	str	w1, [x19, #2960]
   110e8:	ldr	w1, [x20, #20]
   110ec:	str	w1, [x19, #2964]
   110f0:	ldr	w1, [x20, #24]
   110f4:	lsl	w1, w0, w1
   110f8:	sub	w1, w1, #0x1
   110fc:	str	w1, [x19, #2968]
   11100:	str	xzr, [x19]
   11104:	mov	x1, #0x1                   	// #1
   11108:	str	x1, [x19, #8]
   1110c:	mov	w1, #0xffffffff            	// #-1
   11110:	str	w1, [x19, #16]
   11114:	strb	wzr, [x19, #20]
   11118:	str	xzr, [x19, #24]
   1111c:	str	xzr, [x19, #32]
   11120:	str	wzr, [x19, #736]
   11124:	str	wzr, [x19, #740]
   11128:	str	wzr, [x19, #744]
   1112c:	str	wzr, [x19, #748]
   11130:	str	wzr, [x19, #752]
   11134:	ldr	w1, [x20, #20]
   11138:	ldr	w2, [x20, #24]
   1113c:	add	w1, w1, w2
   11140:	lsl	w0, w0, w1
   11144:	cbz	w0, 11184 <lzma_lzma_preset@@XZ_5.0+0x1648>
   11148:	add	x1, x19, #0x1, lsl #12
   1114c:	add	x1, x1, #0x19c
   11150:	sub	w0, w0, #0x1
   11154:	add	x0, x0, x0, lsl #1
   11158:	add	x3, x19, #0x1, lsl #12
   1115c:	add	x3, x3, #0x79c
   11160:	add	x3, x3, x0, lsl #9
   11164:	mov	w2, #0x400                 	// #1024
   11168:	sub	x0, x1, #0x600
   1116c:	strh	w2, [x0], #2
   11170:	cmp	x0, x1
   11174:	b.ne	1116c <lzma_lzma_preset@@XZ_5.0+0x1630>  // b.any
   11178:	add	x1, x1, #0x600
   1117c:	cmp	x1, x3
   11180:	b.ne	11168 <lzma_lzma_preset@@XZ_5.0+0x162c>  // b.any
   11184:	ldr	w0, [x19, #2960]
   11188:	add	x3, x19, #0x6, lsl #12
   1118c:	add	x3, x3, #0xd1c
   11190:	add	x2, x19, #0x6, lsl #12
   11194:	add	x2, x2, #0xb9e
   11198:	add	x2, x2, x0, lsl #1
   1119c:	add	x5, x19, #0x6, lsl #12
   111a0:	add	x5, x5, #0xd34
   111a4:	mvn	x0, x0
   111a8:	lsl	x4, x0, #1
   111ac:	mov	w1, #0x400                 	// #1024
   111b0:	b	111d4 <lzma_lzma_preset@@XZ_5.0+0x1698>
   111b4:	strh	w1, [x3]
   111b8:	strh	w1, [x3, #24]
   111bc:	strh	w1, [x3, #48]
   111c0:	strh	w1, [x3, #72]
   111c4:	add	x3, x3, #0x2
   111c8:	add	x2, x2, #0x20
   111cc:	cmp	x3, x5
   111d0:	b.eq	111f0 <lzma_lzma_preset@@XZ_5.0+0x16b4>  // b.none
   111d4:	add	x0, x4, x2
   111d8:	strh	w1, [x0]
   111dc:	strh	w1, [x0, #480]
   111e0:	add	x0, x0, #0x2
   111e4:	cmp	x0, x2
   111e8:	b.ne	111d8 <lzma_lzma_preset@@XZ_5.0+0x169c>  // b.any
   111ec:	b	111b4 <lzma_lzma_preset@@XZ_5.0+0x1678>
   111f0:	add	x0, x19, #0x7, lsl #12
   111f4:	add	x0, x0, #0xfc
   111f8:	add	x2, x19, #0x7, lsl #12
   111fc:	add	x2, x2, #0x1e0
   11200:	mov	w1, #0x400                 	// #1024
   11204:	strh	w1, [x0], #2
   11208:	cmp	x0, x2
   1120c:	b.ne	11204 <lzma_lzma_preset@@XZ_5.0+0x16c8>  // b.any
   11210:	add	x1, x19, #0x6, lsl #12
   11214:	add	x1, x1, #0xf7c
   11218:	add	x3, x19, #0x7, lsl #12
   1121c:	add	x3, x3, #0x17c
   11220:	mov	w2, #0x400                 	// #1024
   11224:	sub	x0, x1, #0x80
   11228:	strh	w2, [x0], #2
   1122c:	cmp	x0, x1
   11230:	b.ne	11228 <lzma_lzma_preset@@XZ_5.0+0x16ec>  // b.any
   11234:	add	x1, x1, #0x80
   11238:	cmp	x3, x1
   1123c:	b.ne	11224 <lzma_lzma_preset@@XZ_5.0+0x16e8>  // b.any
   11240:	add	x0, x19, #0x7, lsl #12
   11244:	add	x0, x0, #0x1e0
   11248:	add	x2, x19, #0x7, lsl #12
   1124c:	add	x2, x2, #0x200
   11250:	mov	w1, #0x400                 	// #1024
   11254:	strh	w1, [x0], #2
   11258:	cmp	x2, x0
   1125c:	b.ne	11254 <lzma_lzma_preset@@XZ_5.0+0x1718>  // b.any
   11260:	ldr	w1, [x20, #28]
   11264:	mov	w21, #0x1                   	// #1
   11268:	ldrb	w2, [x19, #2956]
   1126c:	lsl	w1, w21, w1
   11270:	add	x0, x19, #0x7, lsl #12
   11274:	add	x0, x0, #0x200
   11278:	bl	fe80 <lzma_lzma_preset@@XZ_5.0+0x344>
   1127c:	ldr	w1, [x20, #28]
   11280:	ldrb	w2, [x19, #2956]
   11284:	lsl	w1, w21, w1
   11288:	add	x0, x19, #0xb, lsl #12
   1128c:	add	x0, x0, #0xa48
   11290:	bl	fe80 <lzma_lzma_preset@@XZ_5.0+0x344>
   11294:	add	x19, x19, #0x10, lsl #12
   11298:	mov	w0, #0x7fffffff            	// #2147483647
   1129c:	str	w0, [x19, #3732]
   112a0:	str	w0, [x19, #3800]
   112a4:	str	wzr, [x19, #3804]
   112a8:	str	wzr, [x19, #3808]
   112ac:	mov	w0, #0x0                   	// #0
   112b0:	ldr	x21, [sp, #32]
   112b4:	ldp	x19, x20, [sp, #16]
   112b8:	ldp	x29, x30, [sp], #48
   112bc:	ret
   112c0:	mov	w0, #0x8                   	// #8
   112c4:	b	112b4 <lzma_lzma_preset@@XZ_5.0+0x1778>
   112c8:	stp	x29, x30, [sp, #-48]!
   112cc:	mov	x29, sp
   112d0:	stp	x19, x20, [sp, #16]
   112d4:	str	x21, [sp, #32]
   112d8:	mov	x21, x0
   112dc:	mov	x19, x2
   112e0:	mov	x20, x3
   112e4:	ldr	x0, [x0]
   112e8:	cbz	x0, 1130c <lzma_lzma_preset@@XZ_5.0+0x17d0>
   112ec:	ldr	x0, [x21]
   112f0:	ldr	w1, [x19, #32]
   112f4:	cmp	w1, #0x1
   112f8:	b.eq	11328 <lzma_lzma_preset@@XZ_5.0+0x17ec>  // b.none
   112fc:	cmp	w1, #0x2
   11300:	b.eq	11334 <lzma_lzma_preset@@XZ_5.0+0x17f8>  // b.none
   11304:	mov	w0, #0x8                   	// #8
   11308:	b	113f4 <lzma_lzma_preset@@XZ_5.0+0x18b8>
   1130c:	mov	x0, #0xcee8                	// #52968
   11310:	movk	x0, #0x3, lsl #16
   11314:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
   11318:	str	x0, [x21]
   1131c:	cbnz	x0, 112ec <lzma_lzma_preset@@XZ_5.0+0x17b0>
   11320:	mov	w0, #0x5                   	// #5
   11324:	b	113f4 <lzma_lzma_preset@@XZ_5.0+0x18b8>
   11328:	mov	w1, #0x1                   	// #1
   1132c:	strb	w1, [x0, #2956]
   11330:	b	11384 <lzma_lzma_preset@@XZ_5.0+0x1848>
   11334:	strb	wzr, [x0, #2956]
   11338:	ldr	w3, [x19]
   1133c:	cmp	w3, #0x1
   11340:	b.ls	11404 <lzma_lzma_preset@@XZ_5.0+0x18c8>  // b.plast
   11344:	mov	w1, #0x0                   	// #0
   11348:	mov	w4, #0x1                   	// #1
   1134c:	add	w1, w1, #0x1
   11350:	lsl	w2, w4, w1
   11354:	cmp	w2, w3
   11358:	b.cc	1134c <lzma_lzma_preset@@XZ_5.0+0x1810>  // b.lo, b.ul, b.last
   1135c:	add	x2, x0, #0x10, lsl #12
   11360:	lsl	w1, w1, #1
   11364:	str	w1, [x2, #3728]
   11368:	add	x3, x0, #0x8, lsl #12
   1136c:	ldr	w1, [x19, #36]
   11370:	sub	w1, w1, #0x1
   11374:	str	w1, [x3, #14852]
   11378:	ldr	w1, [x19, #36]
   1137c:	sub	w1, w1, #0x1
   11380:	str	w1, [x2, #588]
   11384:	ldr	x2, [x19, #8]
   11388:	mov	w1, #0x0                   	// #0
   1138c:	cbz	x2, 1139c <lzma_lzma_preset@@XZ_5.0+0x1860>
   11390:	ldr	w1, [x19, #16]
   11394:	cmp	w1, #0x0
   11398:	cset	w1, ne  // ne = any
   1139c:	strb	w1, [x0, #2957]
   113a0:	strb	wzr, [x0, #2958]
   113a4:	mov	x1, #0x1000                	// #4096
   113a8:	str	x1, [x20]
   113ac:	ldr	w1, [x19]
   113b0:	str	x1, [x20, #8]
   113b4:	mov	x1, #0x1001                	// #4097
   113b8:	str	x1, [x20, #16]
   113bc:	mov	x1, #0x111                 	// #273
   113c0:	str	x1, [x20, #24]
   113c4:	ldr	w1, [x19, #36]
   113c8:	str	x1, [x20, #32]
   113cc:	ldr	w1, [x19, #40]
   113d0:	str	w1, [x20, #40]
   113d4:	ldr	w1, [x19, #44]
   113d8:	str	w1, [x20, #44]
   113dc:	ldr	x1, [x19, #8]
   113e0:	str	x1, [x20, #48]
   113e4:	ldr	w1, [x19, #16]
   113e8:	str	w1, [x20, #56]
   113ec:	mov	x1, x19
   113f0:	bl	110ac <lzma_lzma_preset@@XZ_5.0+0x1570>
   113f4:	ldp	x19, x20, [sp, #16]
   113f8:	ldr	x21, [sp, #32]
   113fc:	ldp	x29, x30, [sp], #48
   11400:	ret
   11404:	mov	w1, #0x0                   	// #0
   11408:	b	1135c <lzma_lzma_preset@@XZ_5.0+0x1820>
   1140c:	stp	x29, x30, [sp, #-16]!
   11410:	mov	x29, sp
   11414:	adrp	x4, 11000 <lzma_lzma_preset@@XZ_5.0+0x14c4>
   11418:	add	x4, x4, #0x80
   1141c:	str	x4, [x0, #8]
   11420:	bl	112c8 <lzma_lzma_preset@@XZ_5.0+0x178c>
   11424:	ldp	x29, x30, [sp], #16
   11428:	ret
   1142c:	stp	x29, x30, [sp, #-16]!
   11430:	mov	x29, sp
   11434:	adrp	x3, 11000 <lzma_lzma_preset@@XZ_5.0+0x14c4>
   11438:	add	x3, x3, #0x40c
   1143c:	bl	e11c <lzma_crc64@@XZ_5.0+0x1740>
   11440:	ldp	x29, x30, [sp], #16
   11444:	ret
   11448:	stp	x29, x30, [sp, #-96]!
   1144c:	mov	x29, sp
   11450:	str	x19, [sp, #16]
   11454:	mov	x19, x0
   11458:	bl	fe14 <lzma_lzma_preset@@XZ_5.0+0x2d8>
   1145c:	and	w0, w0, #0xff
   11460:	cbz	w0, 114d0 <lzma_lzma_preset@@XZ_5.0+0x1994>
   11464:	mov	x0, #0x1000                	// #4096
   11468:	str	x0, [sp, #32]
   1146c:	ldr	w0, [x19]
   11470:	str	x0, [sp, #40]
   11474:	mov	x0, #0x1001                	// #4097
   11478:	str	x0, [sp, #48]
   1147c:	mov	x0, #0x111                 	// #273
   11480:	str	x0, [sp, #56]
   11484:	ldr	w0, [x19, #36]
   11488:	str	x0, [sp, #64]
   1148c:	ldr	w0, [x19, #40]
   11490:	str	w0, [sp, #72]
   11494:	ldr	w0, [x19, #44]
   11498:	str	w0, [sp, #76]
   1149c:	ldr	x0, [x19, #8]
   114a0:	str	x0, [sp, #80]
   114a4:	ldr	w0, [x19, #16]
   114a8:	str	w0, [sp, #88]
   114ac:	add	x0, sp, #0x20
   114b0:	bl	e0b4 <lzma_crc64@@XZ_5.0+0x16d8>
   114b4:	add	x1, x0, #0x3c, lsl #12
   114b8:	add	x1, x1, #0xee8
   114bc:	cmn	x0, #0x1
   114c0:	csel	x0, x1, x0, ne  // ne = any
   114c4:	ldr	x19, [sp, #16]
   114c8:	ldp	x29, x30, [sp], #96
   114cc:	ret
   114d0:	mov	x0, #0xffffffffffffffff    	// #-1
   114d4:	b	114c4 <lzma_lzma_preset@@XZ_5.0+0x1988>
   114d8:	mov	x2, x0
   114dc:	ldr	w3, [x0, #20]
   114e0:	mov	w0, #0x1                   	// #1
   114e4:	cmp	w3, #0x4
   114e8:	b.hi	11538 <lzma_lzma_preset@@XZ_5.0+0x19fc>  // b.pmore
   114ec:	ldr	w4, [x2, #24]
   114f0:	mov	w0, #0x1                   	// #1
   114f4:	cmp	w4, #0x4
   114f8:	b.hi	11538 <lzma_lzma_preset@@XZ_5.0+0x19fc>  // b.pmore
   114fc:	add	w5, w3, w4
   11500:	cmp	w5, #0x4
   11504:	b.hi	11538 <lzma_lzma_preset@@XZ_5.0+0x19fc>  // b.pmore
   11508:	ldr	w0, [x2, #28]
   1150c:	cmp	w0, #0x4
   11510:	b.ls	1151c <lzma_lzma_preset@@XZ_5.0+0x19e0>  // b.plast
   11514:	mov	w0, #0x1                   	// #1
   11518:	b	11538 <lzma_lzma_preset@@XZ_5.0+0x19fc>
   1151c:	add	w0, w0, w0, lsl #2
   11520:	add	w0, w0, w4
   11524:	ubfiz	w2, w0, #3, #5
   11528:	add	w0, w0, w2
   1152c:	add	w0, w0, w3
   11530:	strb	w0, [x1]
   11534:	mov	w0, #0x0                   	// #0
   11538:	ret
   1153c:	stp	x29, x30, [sp, #-32]!
   11540:	mov	x29, sp
   11544:	stp	x19, x20, [sp, #16]
   11548:	mov	x20, x0
   1154c:	mov	x19, x1
   11550:	bl	114d8 <lzma_lzma_preset@@XZ_5.0+0x199c>
   11554:	and	w1, w0, #0xff
   11558:	mov	w0, #0xb                   	// #11
   1155c:	cbnz	w1, 11584 <lzma_lzma_preset@@XZ_5.0+0x1a48>
   11560:	ldr	w0, [x20]
   11564:	strb	w0, [x19, #1]
   11568:	lsr	w1, w0, #8
   1156c:	strb	w1, [x19, #2]
   11570:	lsr	w1, w0, #16
   11574:	strb	w1, [x19, #3]
   11578:	lsr	w0, w0, #24
   1157c:	strb	w0, [x19, #4]
   11580:	mov	w0, #0x0                   	// #0
   11584:	ldp	x19, x20, [sp, #16]
   11588:	ldp	x29, x30, [sp], #32
   1158c:	ret

0000000000011590 <lzma_mode_is_supported@@XZ_5.0>:
   11590:	sub	w0, w0, #0x1
   11594:	cmp	w0, #0x1
   11598:	cset	w0, ls  // ls = plast
   1159c:	ret
   115a0:	stp	x29, x30, [sp, #-112]!
   115a4:	mov	x29, sp
   115a8:	stp	x19, x20, [sp, #16]
   115ac:	stp	x21, x22, [sp, #32]
   115b0:	stp	x23, x24, [sp, #48]
   115b4:	stp	x25, x26, [sp, #64]
   115b8:	mov	x20, x0
   115bc:	mov	x21, x1
   115c0:	mov	x24, x2
   115c4:	mov	x25, x3
   115c8:	ldr	w26, [x1, #96]
   115cc:	ldr	w0, [x1, #28]
   115d0:	cbz	w0, 11620 <lzma_mode_is_supported@@XZ_5.0+0x90>
   115d4:	ldr	w19, [x20, #2952]
   115d8:	ldr	w0, [x20, #2948]
   115dc:	str	w0, [sp, #108]
   115e0:	ldr	w0, [x21, #24]
   115e4:	ldr	x22, [x21]
   115e8:	add	x22, x22, w0, uxtw
   115ec:	sub	x1, x22, #0x1
   115f0:	ldr	w2, [x21, #36]
   115f4:	add	w2, w2, #0x1
   115f8:	sub	w2, w2, w0
   115fc:	cmp	w2, #0x110
   11600:	b.hi	116f0 <lzma_mode_is_supported@@XZ_5.0+0x160>  // b.pmore
   11604:	cmp	w2, #0x1
   11608:	b.hi	116f4 <lzma_mode_is_supported@@XZ_5.0+0x164>  // b.pmore
   1160c:	mov	w0, #0xffffffff            	// #-1
   11610:	str	w0, [x24]
   11614:	mov	w0, #0x1                   	// #1
   11618:	str	w0, [x25]
   1161c:	b	11840 <lzma_mode_is_supported@@XZ_5.0+0x2b0>
   11620:	add	x2, x20, #0x2f4
   11624:	add	x1, sp, #0x6c
   11628:	mov	x0, x21
   1162c:	bl	e80c <lzma_mf_is_supported@@XZ_5.0+0x4c0>
   11630:	mov	w19, w0
   11634:	b	115e0 <lzma_mode_is_supported@@XZ_5.0+0x50>
   11638:	cmp	w26, w0
   1163c:	b.ls	116c0 <lzma_mode_is_supported@@XZ_5.0+0x130>  // b.plast
   11640:	cmp	w10, w0
   11644:	csel	w8, w11, w8, cs  // cs = hs, nlast
   11648:	mov	w11, w8
   1164c:	csel	w10, w10, w0, cs  // cs = hs, nlast
   11650:	add	x5, x5, #0x1
   11654:	cmp	x5, #0x4
   11658:	b.eq	11710 <lzma_mode_is_supported@@XZ_5.0+0x180>  // b.none
   1165c:	mov	w8, w5
   11660:	ldr	w0, [x23, x5, lsl #2]
   11664:	mvn	x0, x0
   11668:	add	x3, x1, x0
   1166c:	ldrb	w0, [x1, x0]
   11670:	cmp	w0, w9
   11674:	b.ne	11650 <lzma_mode_is_supported@@XZ_5.0+0xc0>  // b.any
   11678:	ldrb	w4, [x22]
   1167c:	ldrb	w0, [x3, #1]
   11680:	cmp	w4, w0
   11684:	b.ne	11650 <lzma_mode_is_supported@@XZ_5.0+0xc0>  // b.any
   11688:	mov	x4, #0x2                   	// #2
   1168c:	mov	w0, w12
   11690:	cmp	w2, #0x2
   11694:	b.ls	11638 <lzma_mode_is_supported@@XZ_5.0+0xa8>  // b.plast
   11698:	mov	w0, w4
   1169c:	ldrb	w7, [x1, x4]
   116a0:	ldrb	w6, [x3, x4]
   116a4:	cmp	w7, w6
   116a8:	b.ne	11638 <lzma_mode_is_supported@@XZ_5.0+0xa8>  // b.any
   116ac:	add	w0, w4, #0x1
   116b0:	add	x4, x4, #0x1
   116b4:	cmp	w2, w4
   116b8:	b.hi	11698 <lzma_mode_is_supported@@XZ_5.0+0x108>  // b.pmore
   116bc:	b	11638 <lzma_mode_is_supported@@XZ_5.0+0xa8>
   116c0:	str	w8, [x24]
   116c4:	str	w0, [x25]
   116c8:	subs	w19, w0, #0x1
   116cc:	b.eq	11840 <lzma_mode_is_supported@@XZ_5.0+0x2b0>  // b.none
   116d0:	ldr	x2, [x21, #56]
   116d4:	mov	w1, w19
   116d8:	mov	x0, x21
   116dc:	blr	x2
   116e0:	ldr	w0, [x21, #28]
   116e4:	add	w0, w0, w19
   116e8:	str	w0, [x21, #28]
   116ec:	b	11840 <lzma_mode_is_supported@@XZ_5.0+0x2b0>
   116f0:	mov	w2, #0x111                 	// #273
   116f4:	ldurb	w9, [x22, #-1]
   116f8:	mov	x5, #0x0                   	// #0
   116fc:	mov	w11, #0x0                   	// #0
   11700:	mov	w10, #0x0                   	// #0
   11704:	add	x23, x20, #0x2e4
   11708:	mov	w12, #0x2                   	// #2
   1170c:	b	1165c <lzma_mode_is_supported@@XZ_5.0+0xcc>
   11710:	cmp	w19, w26
   11714:	b.cs	11784 <lzma_mode_is_supported@@XZ_5.0+0x1f4>  // b.hs, b.nlast
   11718:	cmp	w19, #0x1
   1171c:	b.ls	118c4 <lzma_mode_is_supported@@XZ_5.0+0x334>  // b.plast
   11720:	ldr	w5, [sp, #108]
   11724:	sub	w0, w5, #0x1
   11728:	add	x0, x20, x0, lsl #3
   1172c:	ldr	w26, [x0, #760]
   11730:	cmp	w5, #0x1
   11734:	b.ls	1180c <lzma_mode_is_supported@@XZ_5.0+0x27c>  // b.plast
   11738:	sub	w0, w5, #0x2
   1173c:	mov	w6, #0x0                   	// #0
   11740:	mov	w7, #0x1                   	// #1
   11744:	add	x1, x20, w0, uxtw #3
   11748:	mov	w3, w19
   1174c:	ldr	w19, [x1, #756]
   11750:	add	w4, w19, #0x1
   11754:	cmp	w4, w3
   11758:	b.ne	11800 <lzma_mode_is_supported@@XZ_5.0+0x270>  // b.any
   1175c:	ldr	w1, [x1, #760]
   11760:	cmp	w1, w26, lsr #7
   11764:	b.cs	117c8 <lzma_mode_is_supported@@XZ_5.0+0x238>  // b.hs, b.nlast
   11768:	add	w5, w0, #0x1
   1176c:	sub	w0, w0, #0x1
   11770:	mov	w6, w7
   11774:	cmn	w0, #0x1
   11778:	b.eq	117d4 <lzma_mode_is_supported@@XZ_5.0+0x244>  // b.none
   1177c:	mov	w26, w1
   11780:	b	11744 <lzma_mode_is_supported@@XZ_5.0+0x1b4>
   11784:	ldr	w0, [sp, #108]
   11788:	sub	w0, w0, #0x1
   1178c:	add	x20, x20, x0, lsl #3
   11790:	ldr	w0, [x20, #760]
   11794:	add	w0, w0, #0x4
   11798:	str	w0, [x24]
   1179c:	str	w19, [x25]
   117a0:	subs	w19, w19, #0x1
   117a4:	b.eq	11840 <lzma_mode_is_supported@@XZ_5.0+0x2b0>  // b.none
   117a8:	ldr	x2, [x21, #56]
   117ac:	mov	w1, w19
   117b0:	mov	x0, x21
   117b4:	blr	x2
   117b8:	ldr	w0, [x21, #28]
   117bc:	add	w19, w0, w19
   117c0:	str	w19, [x21, #28]
   117c4:	b	11840 <lzma_mode_is_supported@@XZ_5.0+0x2b0>
   117c8:	cbz	w6, 117e4 <lzma_mode_is_supported@@XZ_5.0+0x254>
   117cc:	str	w5, [sp, #108]
   117d0:	b	117e4 <lzma_mode_is_supported@@XZ_5.0+0x254>
   117d4:	mov	w0, #0x1                   	// #1
   117d8:	str	w0, [sp, #108]
   117dc:	mov	w26, w1
   117e0:	mov	w3, w19
   117e4:	cmp	w26, #0x7f
   117e8:	ccmp	w3, #0x2, #0x0, hi  // hi = pmore
   117ec:	b.eq	119d8 <lzma_mode_is_supported@@XZ_5.0+0x448>  // b.none
   117f0:	cmp	w10, #0x1
   117f4:	b.ls	11828 <lzma_mode_is_supported@@XZ_5.0+0x298>  // b.plast
   117f8:	mov	w19, w3
   117fc:	b	118d0 <lzma_mode_is_supported@@XZ_5.0+0x340>
   11800:	cbz	w6, 117e4 <lzma_mode_is_supported@@XZ_5.0+0x254>
   11804:	str	w5, [sp, #108]
   11808:	b	117e4 <lzma_mode_is_supported@@XZ_5.0+0x254>
   1180c:	mov	w3, w19
   11810:	b	117e4 <lzma_mode_is_supported@@XZ_5.0+0x254>
   11814:	str	w11, [x24]
   11818:	str	w10, [x25]
   1181c:	subs	w19, w10, #0x1
   11820:	b.eq	11840 <lzma_mode_is_supported@@XZ_5.0+0x2b0>  // b.none
   11824:	b	118a4 <lzma_mode_is_supported@@XZ_5.0+0x314>
   11828:	mov	w19, w3
   1182c:	b	118fc <lzma_mode_is_supported@@XZ_5.0+0x36c>
   11830:	mov	w0, #0xffffffff            	// #-1
   11834:	str	w0, [x24]
   11838:	mov	w0, #0x1                   	// #1
   1183c:	str	w0, [x25]
   11840:	ldp	x19, x20, [sp, #16]
   11844:	ldp	x21, x22, [sp, #32]
   11848:	ldp	x23, x24, [sp, #48]
   1184c:	ldp	x25, x26, [sp, #64]
   11850:	ldp	x29, x30, [sp], #112
   11854:	ret
   11858:	cmp	w26, w1, lsr #7
   1185c:	b.cc	11950 <lzma_mode_is_supported@@XZ_5.0+0x3c0>  // b.lo, b.ul, b.last
   11860:	mov	w0, #0xffffffff            	// #-1
   11864:	str	w0, [x24]
   11868:	mov	w0, #0x1                   	// #1
   1186c:	str	w0, [x25]
   11870:	b	11840 <lzma_mode_is_supported@@XZ_5.0+0x2b0>
   11874:	cmp	w1, w26, lsr #7
   11878:	b.cs	11960 <lzma_mode_is_supported@@XZ_5.0+0x3d0>  // b.hs, b.nlast
   1187c:	b	11860 <lzma_mode_is_supported@@XZ_5.0+0x2d0>
   11880:	mov	w0, #0xffffffff            	// #-1
   11884:	str	w0, [x24]
   11888:	mov	w0, #0x1                   	// #1
   1188c:	str	w0, [x25]
   11890:	ldr	x27, [sp, #80]
   11894:	b	11840 <lzma_mode_is_supported@@XZ_5.0+0x2b0>
   11898:	str	w11, [x24]
   1189c:	str	w10, [x25]
   118a0:	sub	w19, w10, #0x1
   118a4:	ldr	x2, [x21, #56]
   118a8:	mov	w1, w19
   118ac:	mov	x0, x21
   118b0:	blr	x2
   118b4:	ldr	w10, [x21, #28]
   118b8:	add	w10, w10, w19
   118bc:	str	w10, [x21, #28]
   118c0:	b	11840 <lzma_mode_is_supported@@XZ_5.0+0x2b0>
   118c4:	mov	w26, #0x0                   	// #0
   118c8:	cmp	w10, #0x1
   118cc:	b.ls	11830 <lzma_mode_is_supported@@XZ_5.0+0x2a0>  // b.plast
   118d0:	add	w0, w10, #0x1
   118d4:	cmp	w0, w19
   118d8:	b.cs	11898 <lzma_mode_is_supported@@XZ_5.0+0x308>  // b.hs, b.nlast
   118dc:	add	w0, w10, #0x2
   118e0:	cmp	w26, #0x200
   118e4:	ccmp	w0, w19, #0x0, hi  // hi = pmore
   118e8:	b.cs	11814 <lzma_mode_is_supported@@XZ_5.0+0x284>  // b.hs, b.nlast
   118ec:	add	w0, w10, #0x3
   118f0:	cmp	w26, #0x8, lsl #12
   118f4:	ccmp	w0, w19, #0x0, hi  // hi = pmore
   118f8:	b.cs	11814 <lzma_mode_is_supported@@XZ_5.0+0x284>  // b.hs, b.nlast
   118fc:	cmp	w19, #0x1
   11900:	ccmp	w2, #0x2, #0x0, hi  // hi = pmore
   11904:	b.ls	11830 <lzma_mode_is_supported@@XZ_5.0+0x2a0>  // b.plast
   11908:	add	x2, x20, #0x2f4
   1190c:	add	x1, x20, #0xb84
   11910:	mov	x0, x21
   11914:	bl	e80c <lzma_mf_is_supported@@XZ_5.0+0x4c0>
   11918:	str	w0, [x20, #2952]
   1191c:	cmp	w0, #0x1
   11920:	b.ls	11960 <lzma_mode_is_supported@@XZ_5.0+0x3d0>  // b.plast
   11924:	ldr	w1, [x20, #2948]
   11928:	sub	w1, w1, #0x1
   1192c:	add	x1, x20, x1, lsl #3
   11930:	ldr	w1, [x1, #760]
   11934:	cmp	w1, w26
   11938:	ccmp	w0, w19, #0x0, cc  // cc = lo, ul, last
   1193c:	b.cs	11860 <lzma_mode_is_supported@@XZ_5.0+0x2d0>  // b.hs, b.nlast
   11940:	add	w2, w19, #0x1
   11944:	cmp	w0, w2
   11948:	b.eq	11858 <lzma_mode_is_supported@@XZ_5.0+0x2c8>  // b.none
   1194c:	b.hi	11860 <lzma_mode_is_supported@@XZ_5.0+0x2d0>  // b.pmore
   11950:	add	w0, w0, #0x1
   11954:	cmp	w0, w19
   11958:	ccmp	w19, #0x2, #0x0, cs  // cs = hs, nlast
   1195c:	b.hi	11874 <lzma_mode_is_supported@@XZ_5.0+0x2e4>  // b.pmore
   11960:	str	x27, [sp, #80]
   11964:	sub	w0, w19, #0x1
   11968:	cmp	w0, #0x2
   1196c:	add	x27, x20, #0x2f4
   11970:	mov	w20, #0x2                   	// #2
   11974:	csel	w20, w0, w20, cs  // cs = hs, nlast
   11978:	ldr	w1, [x23]
   1197c:	mvn	x1, x1
   11980:	mov	x2, x20
   11984:	add	x1, x22, x1
   11988:	mov	x0, x22
   1198c:	bl	3330 <memcmp@plt>
   11990:	cbz	w0, 11880 <lzma_mode_is_supported@@XZ_5.0+0x2f0>
   11994:	add	x23, x23, #0x4
   11998:	cmp	x27, x23
   1199c:	b.ne	11978 <lzma_mode_is_supported@@XZ_5.0+0x3e8>  // b.any
   119a0:	add	w26, w26, #0x4
   119a4:	str	w26, [x24]
   119a8:	str	w19, [x25]
   119ac:	subs	w19, w19, #0x2
   119b0:	b.eq	119e0 <lzma_mode_is_supported@@XZ_5.0+0x450>  // b.none
   119b4:	ldr	x2, [x21, #56]
   119b8:	mov	w1, w19
   119bc:	mov	x0, x21
   119c0:	blr	x2
   119c4:	ldr	w0, [x21, #28]
   119c8:	add	w0, w0, w19
   119cc:	str	w0, [x21, #28]
   119d0:	ldr	x27, [sp, #80]
   119d4:	b	11840 <lzma_mode_is_supported@@XZ_5.0+0x2b0>
   119d8:	mov	w19, #0x1                   	// #1
   119dc:	b	118c8 <lzma_mode_is_supported@@XZ_5.0+0x338>
   119e0:	ldr	x27, [sp, #80]
   119e4:	b	11840 <lzma_mode_is_supported@@XZ_5.0+0x2b0>
   119e8:	ldr	w7, [x0, #2964]
   119ec:	ldr	w6, [x0, #2968]
   119f0:	and	w1, w1, w6
   119f4:	lsl	w1, w1, w7
   119f8:	mov	w6, #0x8                   	// #8
   119fc:	sub	w6, w6, w7
   11a00:	lsr	w2, w2, w6
   11a04:	add	w2, w1, w2
   11a08:	add	x2, x2, x2, lsl #1
   11a0c:	add	x6, x0, x2, lsl #9
   11a10:	add	x6, x6, #0xb9c
   11a14:	tst	w3, #0xff
   11a18:	b.ne	11a60 <lzma_mode_is_supported@@XZ_5.0+0x4d0>  // b.any
   11a1c:	add	w1, w5, #0x100
   11a20:	mov	w0, #0x0                   	// #0
   11a24:	adrp	x4, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   11a28:	ldr	x4, [x4, #3960]
   11a2c:	and	w3, w1, #0x1
   11a30:	lsr	w1, w1, #1
   11a34:	mov	w2, w1
   11a38:	ldrh	w2, [x6, x2, lsl #1]
   11a3c:	neg	w3, w3
   11a40:	and	w3, w3, #0x7ff
   11a44:	eor	w2, w2, w3
   11a48:	lsr	w2, w2, #4
   11a4c:	ldrb	w2, [x4, w2, uxtw]
   11a50:	add	w0, w0, w2
   11a54:	cmp	w1, #0x1
   11a58:	b.ne	11a2c <lzma_mode_is_supported@@XZ_5.0+0x49c>  // b.any
   11a5c:	ret
   11a60:	add	w1, w5, #0x100
   11a64:	mov	w3, #0x100                 	// #256
   11a68:	mov	w0, #0x0                   	// #0
   11a6c:	adrp	x7, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   11a70:	ldr	x7, [x7, #3960]
   11a74:	mov	w8, #0xffff                	// #65535
   11a78:	lsl	w4, w4, #1
   11a7c:	and	w2, w3, w4
   11a80:	add	w2, w2, w1, lsr #8
   11a84:	add	w2, w2, w3
   11a88:	ldrh	w2, [x6, x2, lsl #1]
   11a8c:	sbfx	x5, x1, #7, #1
   11a90:	and	w5, w5, #0x7ff
   11a94:	eor	w2, w2, w5
   11a98:	lsr	w2, w2, #4
   11a9c:	ldrb	w2, [x7, w2, uxtw]
   11aa0:	add	w0, w0, w2
   11aa4:	lsl	w1, w1, #1
   11aa8:	eon	w2, w4, w1
   11aac:	and	w3, w3, w2
   11ab0:	cmp	w1, w8
   11ab4:	b.ls	11a78 <lzma_mode_is_supported@@XZ_5.0+0x4e8>  // b.plast
   11ab8:	b	11a5c <lzma_mode_is_supported@@XZ_5.0+0x4cc>
   11abc:	stp	x29, x30, [sp, #-336]!
   11ac0:	mov	x29, sp
   11ac4:	stp	x27, x28, [sp, #80]
   11ac8:	mov	x28, x0
   11acc:	str	x1, [sp, #168]
   11ad0:	mov	x6, x2
   11ad4:	str	x2, [sp, #256]
   11ad8:	str	x3, [sp, #264]
   11adc:	str	w4, [sp, #180]
   11ae0:	add	x0, x0, #0x10, lsl #12
   11ae4:	ldr	w2, [x0, #3808]
   11ae8:	ldr	w0, [x0, #3804]
   11aec:	cmp	w0, w2
   11af0:	b.eq	11b50 <lzma_mode_is_supported@@XZ_5.0+0x5c0>  // b.none
   11af4:	mov	x5, x3
   11af8:	mov	w3, w2
   11afc:	ubfiz	x0, x2, #1, #32
   11b00:	add	x1, x0, x3
   11b04:	lsl	x1, x1, #2
   11b08:	sub	x1, x1, x3
   11b0c:	add	x1, x28, x1, lsl #2
   11b10:	add	x1, x1, #0x10, lsl #12
   11b14:	ldr	w1, [x1, #3832]
   11b18:	sub	w2, w1, w2
   11b1c:	str	w2, [x5]
   11b20:	add	x0, x0, x3
   11b24:	lsl	x0, x0, #2
   11b28:	sub	x0, x0, x3
   11b2c:	add	x0, x28, x0, lsl #2
   11b30:	add	x0, x0, #0x10, lsl #12
   11b34:	ldr	w0, [x0, #3836]
   11b38:	str	w0, [x6]
   11b3c:	add	x0, x28, #0x10, lsl #12
   11b40:	str	w1, [x0, #3808]
   11b44:	ldp	x27, x28, [sp, #80]
   11b48:	ldp	x29, x30, [sp], #336
   11b4c:	ret
   11b50:	stp	x19, x20, [sp, #16]
   11b54:	stp	x21, x22, [sp, #32]
   11b58:	ldr	x0, [sp, #168]
   11b5c:	ldr	w5, [x0, #28]
   11b60:	cbnz	w5, 13ba0 <lzma_mode_is_supported@@XZ_5.0+0x2610>
   11b64:	add	x0, x28, #0x10, lsl #12
   11b68:	ldr	w0, [x0, #3732]
   11b6c:	cmp	w0, #0x7f
   11b70:	b.hi	11ba0 <lzma_mode_is_supported@@XZ_5.0+0x610>  // b.pmore
   11b74:	add	x0, x28, #0x10, lsl #12
   11b78:	ldr	w0, [x0, #3800]
   11b7c:	cmp	w0, #0xf
   11b80:	b.hi	11dc0 <lzma_mode_is_supported@@XZ_5.0+0x830>  // b.pmore
   11b84:	ldr	x0, [sp, #168]
   11b88:	ldr	w19, [x0, #96]
   11b8c:	add	x2, x28, #0x2f4
   11b90:	add	x1, sp, #0x12c
   11b94:	bl	e80c <lzma_mf_is_supported@@XZ_5.0+0x4c0>
   11b98:	mov	w22, w0
   11b9c:	b	13bb4 <lzma_mode_is_supported@@XZ_5.0+0x2624>
   11ba0:	add	x10, x28, #0x10, lsl #12
   11ba4:	add	x10, x10, #0x290
   11ba8:	add	x9, x28, #0x10, lsl #12
   11bac:	add	x9, x9, #0x690
   11bb0:	add	x11, x28, #0x6, lsl #12
   11bb4:	add	x11, x11, #0xefc
   11bb8:	mov	x12, x9
   11bbc:	add	x7, x28, #0x10, lsl #12
   11bc0:	adrp	x8, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   11bc4:	ldr	x8, [x8, #3960]
   11bc8:	mov	x6, x10
   11bcc:	ldr	w0, [x7, #3728]
   11bd0:	cbz	w0, 11c60 <lzma_mode_is_supported@@XZ_5.0+0x6d0>
   11bd4:	mov	x14, x11
   11bd8:	mov	w3, w5
   11bdc:	mov	w13, w3
   11be0:	add	w2, w3, #0x40
   11be4:	mov	w4, w5
   11be8:	and	w1, w2, #0x1
   11bec:	lsr	w2, w2, #1
   11bf0:	mov	w0, w2
   11bf4:	ldrh	w0, [x14, x0, lsl #1]
   11bf8:	neg	w1, w1
   11bfc:	and	w1, w1, #0x7ff
   11c00:	eor	w0, w0, w1
   11c04:	lsr	w0, w0, #4
   11c08:	ldrb	w0, [x8, w0, uxtw]
   11c0c:	add	w4, w4, w0
   11c10:	cmp	w2, #0x1
   11c14:	b.ne	11be8 <lzma_mode_is_supported@@XZ_5.0+0x658>  // b.any
   11c18:	str	w4, [x6, x13, lsl #2]
   11c1c:	add	w3, w3, #0x1
   11c20:	ldr	w0, [x7, #3728]
   11c24:	cmp	w3, w0
   11c28:	b.cc	11bdc <lzma_mode_is_supported@@XZ_5.0+0x64c>  // b.lo, b.ul, b.last
   11c2c:	cmp	w0, #0xe
   11c30:	b.ls	11c60 <lzma_mode_is_supported@@XZ_5.0+0x6d0>  // b.plast
   11c34:	mov	w1, #0xe                   	// #14
   11c38:	mov	w2, w1
   11c3c:	lsr	w0, w1, #1
   11c40:	sub	w0, w0, #0x5
   11c44:	ldr	w3, [x6, x2, lsl #2]
   11c48:	add	w0, w3, w0, lsl #4
   11c4c:	str	w0, [x6, x2, lsl #2]
   11c50:	add	w1, w1, #0x1
   11c54:	ldr	w0, [x7, #3728]
   11c58:	cmp	w1, w0
   11c5c:	b.cc	11c38 <lzma_mode_is_supported@@XZ_5.0+0x6a8>  // b.lo, b.ul, b.last
   11c60:	ldr	w0, [x6]
   11c64:	str	w0, [x9]
   11c68:	ldr	w0, [x6, #4]
   11c6c:	str	w0, [x9, #4]
   11c70:	ldr	w0, [x6, #8]
   11c74:	str	w0, [x9, #8]
   11c78:	ldr	w0, [x6, #12]
   11c7c:	str	w0, [x9, #12]
   11c80:	add	x10, x10, #0x100
   11c84:	add	x9, x9, #0x200
   11c88:	add	x11, x11, #0x80
   11c8c:	cmp	x10, x12
   11c90:	b.ne	11bc8 <lzma_mode_is_supported@@XZ_5.0+0x638>  // b.any
   11c94:	add	x4, x28, #0x10, lsl #12
   11c98:	add	x4, x4, #0x6a0
   11c9c:	mov	x3, #0x4                   	// #4
   11ca0:	mov	w11, #0x1fff                	// #8191
   11ca4:	mov	w10, #0x1ffffff             	// #33554431
   11ca8:	adrp	x13, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   11cac:	ldr	x12, [x13, #4008]
   11cb0:	mov	x14, x12
   11cb4:	mov	x13, x12
   11cb8:	add	x9, x28, #0x7, lsl #12
   11cbc:	add	x9, x9, #0xfc
   11cc0:	mov	w8, #0x1                   	// #1
   11cc4:	adrp	x6, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   11cc8:	ldr	x6, [x6, #3960]
   11ccc:	mov	x7, #0x290                 	// #656
   11cd0:	movk	x7, #0x1, lsl #16
   11cd4:	b	11d90 <lzma_mode_is_supported@@XZ_5.0+0x800>
   11cd8:	ldrb	w0, [x3, x13]
   11cdc:	b	11cec <lzma_mode_is_supported@@XZ_5.0+0x75c>
   11ce0:	lsr	w0, w3, #24
   11ce4:	ldrb	w0, [x12, w0, uxtw]
   11ce8:	add	w0, w0, #0x30
   11cec:	lsr	w16, w0, #1
   11cf0:	sub	w16, w16, #0x1
   11cf4:	and	w15, w0, #0x1
   11cf8:	orr	w15, w15, #0x2
   11cfc:	lsl	w15, w15, w16
   11d00:	mov	w0, w0
   11d04:	mov	w1, w15
   11d08:	sub	x1, x1, x0
   11d0c:	lsl	x1, x1, #1
   11d10:	sub	x1, x1, #0x2
   11d14:	sub	w2, w2, w15
   11d18:	mov	w18, w5
   11d1c:	mov	w19, w8
   11d20:	and	w17, w2, #0x1
   11d24:	add	x15, x9, w19, uxtw #1
   11d28:	ldrh	w15, [x15, x1]
   11d2c:	neg	w20, w17
   11d30:	lsr	w2, w2, #1
   11d34:	and	w20, w20, #0x7ff
   11d38:	eor	w15, w15, w20
   11d3c:	lsr	w15, w15, #4
   11d40:	ldrb	w15, [x6, w15, uxtw]
   11d44:	add	w18, w18, w15
   11d48:	add	w19, w17, w19, lsl #1
   11d4c:	subs	w16, w16, #0x1
   11d50:	b.ne	11d20 <lzma_mode_is_supported@@XZ_5.0+0x790>  // b.any
   11d54:	add	x0, x7, x0, lsl #2
   11d58:	add	x0, x28, x0
   11d5c:	mov	x1, #0x0                   	// #0
   11d60:	lsl	x15, x1, #9
   11d64:	lsl	x2, x1, #8
   11d68:	ldr	w2, [x0, x2]
   11d6c:	add	w2, w2, w18
   11d70:	str	w2, [x4, x15]
   11d74:	add	x1, x1, #0x1
   11d78:	cmp	x1, #0x4
   11d7c:	b.ne	11d60 <lzma_mode_is_supported@@XZ_5.0+0x7d0>  // b.any
   11d80:	add	x3, x3, #0x1
   11d84:	add	x4, x4, #0x4
   11d88:	cmp	x3, #0x80
   11d8c:	b.eq	11db4 <lzma_mode_is_supported@@XZ_5.0+0x824>  // b.none
   11d90:	mov	w2, w3
   11d94:	cmp	w3, w11
   11d98:	b.ls	11cd8 <lzma_mode_is_supported@@XZ_5.0+0x748>  // b.plast
   11d9c:	cmp	w3, w10
   11da0:	b.hi	11ce0 <lzma_mode_is_supported@@XZ_5.0+0x750>  // b.pmore
   11da4:	lsr	w0, w3, #12
   11da8:	ldrb	w0, [x14, w0, uxtw]
   11dac:	add	w0, w0, #0x18
   11db0:	b	11cec <lzma_mode_is_supported@@XZ_5.0+0x75c>
   11db4:	add	x0, x28, #0x10, lsl #12
   11db8:	str	wzr, [x0, #3732]
   11dbc:	b	11b74 <lzma_mode_is_supported@@XZ_5.0+0x5e4>
   11dc0:	mov	x8, #0x0                   	// #0
   11dc4:	add	x10, x28, #0x7, lsl #12
   11dc8:	add	x10, x10, #0x1e0
   11dcc:	mov	w12, #0x1                   	// #1
   11dd0:	adrp	x9, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   11dd4:	ldr	x9, [x9, #3960]
   11dd8:	add	x11, x28, #0x10, lsl #12
   11ddc:	add	x11, x11, #0xe98
   11de0:	mov	w6, w8
   11de4:	mov	w7, w5
   11de8:	mov	w4, #0x4                   	// #4
   11dec:	mov	w3, w12
   11df0:	and	w1, w6, #0x1
   11df4:	ldrh	w0, [x10, w3, uxtw #1]
   11df8:	neg	w2, w1
   11dfc:	lsr	w6, w6, #1
   11e00:	and	w2, w2, #0x7ff
   11e04:	eor	w0, w0, w2
   11e08:	lsr	w0, w0, #4
   11e0c:	ldrb	w0, [x9, w0, uxtw]
   11e10:	add	w7, w7, w0
   11e14:	add	w3, w1, w3, lsl #1
   11e18:	subs	w4, w4, #0x1
   11e1c:	b.ne	11df0 <lzma_mode_is_supported@@XZ_5.0+0x860>  // b.any
   11e20:	str	w7, [x11, x8, lsl #2]
   11e24:	add	x8, x8, #0x1
   11e28:	cmp	x8, #0x10
   11e2c:	b.ne	11de0 <lzma_mode_is_supported@@XZ_5.0+0x850>  // b.any
   11e30:	add	x0, x28, #0x10, lsl #12
   11e34:	str	wzr, [x0, #3800]
   11e38:	b	11b84 <lzma_mode_is_supported@@XZ_5.0+0x5f4>
   11e3c:	mov	w0, #0xffffffff            	// #-1
   11e40:	ldr	x1, [sp, #256]
   11e44:	str	w0, [x1]
   11e48:	mov	w0, #0x1                   	// #1
   11e4c:	ldr	x1, [sp, #264]
   11e50:	str	w0, [x1]
   11e54:	ldp	x19, x20, [sp, #16]
   11e58:	ldp	x21, x22, [sp, #32]
   11e5c:	b	11b44 <lzma_mode_is_supported@@XZ_5.0+0x5b4>
   11e60:	stp	x23, x24, [sp, #48]
   11e64:	mov	w4, #0x111                 	// #273
   11e68:	ldr	x0, [sp, #168]
   11e6c:	ldr	x0, [x0]
   11e70:	add	x11, x0, w11, uxtw
   11e74:	sub	x2, x11, #0x1
   11e78:	ldurb	w21, [x11, #-1]
   11e7c:	add	x20, sp, #0x130
   11e80:	mov	x3, x20
   11e84:	mov	x1, #0x0                   	// #0
   11e88:	mov	w12, #0x0                   	// #0
   11e8c:	add	x9, x28, #0x2e4
   11e90:	mov	x13, x20
   11e94:	mov	w14, #0x2                   	// #2
   11e98:	b	11eb0 <lzma_mode_is_supported@@XZ_5.0+0x920>
   11e9c:	str	wzr, [x3]
   11ea0:	add	x1, x1, #0x1
   11ea4:	add	x3, x3, #0x4
   11ea8:	cmp	x1, #0x4
   11eac:	b.eq	11f24 <lzma_mode_is_supported@@XZ_5.0+0x994>  // b.none
   11eb0:	mov	w10, w1
   11eb4:	ldr	w0, [x9, x1, lsl #2]
   11eb8:	mvn	x0, x0
   11ebc:	add	x5, x2, x0
   11ec0:	ldrb	w0, [x2, x0]
   11ec4:	cmp	w0, w21
   11ec8:	b.ne	11e9c <lzma_mode_is_supported@@XZ_5.0+0x90c>  // b.any
   11ecc:	ldrb	w6, [x11]
   11ed0:	ldrb	w0, [x5, #1]
   11ed4:	cmp	w6, w0
   11ed8:	b.ne	11e9c <lzma_mode_is_supported@@XZ_5.0+0x90c>  // b.any
   11edc:	mov	x0, #0x2                   	// #2
   11ee0:	mov	w6, w14
   11ee4:	cmp	w4, #0x2
   11ee8:	b.ls	11f10 <lzma_mode_is_supported@@XZ_5.0+0x980>  // b.plast
   11eec:	mov	w6, w0
   11ef0:	ldrb	w8, [x2, x0]
   11ef4:	ldrb	w7, [x5, x0]
   11ef8:	cmp	w8, w7
   11efc:	b.ne	11f10 <lzma_mode_is_supported@@XZ_5.0+0x980>  // b.any
   11f00:	add	w6, w0, #0x1
   11f04:	add	x0, x0, #0x1
   11f08:	cmp	w4, w0
   11f0c:	b.hi	11eec <lzma_mode_is_supported@@XZ_5.0+0x95c>  // b.pmore
   11f10:	str	w6, [x3]
   11f14:	ldr	w0, [x13, w12, uxtw #2]
   11f18:	cmp	w0, w6
   11f1c:	csel	w12, w12, w10, cs  // cs = hs, nlast
   11f20:	b	11ea0 <lzma_mode_is_supported@@XZ_5.0+0x910>
   11f24:	add	x0, sp, #0x130
   11f28:	ldr	w24, [x0, w12, uxtw #2]
   11f2c:	cmp	w24, w19
   11f30:	b.cs	120dc <lzma_mode_is_supported@@XZ_5.0+0xb4c>  // b.hs, b.nlast
   11f34:	cmp	w22, w19
   11f38:	b.cs	12124 <lzma_mode_is_supported@@XZ_5.0+0xb94>  // b.hs, b.nlast
   11f3c:	stp	x25, x26, [sp, #64]
   11f40:	ldr	w0, [x28, #740]
   11f44:	str	w0, [sp, #116]
   11f48:	mov	w0, w0
   11f4c:	mvn	x0, x0
   11f50:	ldrb	w26, [x2, x0]
   11f54:	cmp	w22, #0x1
   11f58:	ccmp	w21, w26, #0x4, ls  // ls = plast
   11f5c:	cset	w1, ne  // ne = any
   11f60:	cmp	w24, #0x1
   11f64:	cset	w0, ls  // ls = plast
   11f68:	ands	w0, w1, w0
   11f6c:	str	w0, [sp, #236]
   11f70:	b.ne	12180 <lzma_mode_is_supported@@XZ_5.0+0xbf0>  // b.any
   11f74:	ldr	w0, [x28, #736]
   11f78:	add	x27, x28, #0x10, lsl #12
   11f7c:	str	w0, [x27, #3812]
   11f80:	ldr	w1, [x28, #2960]
   11f84:	ldr	w6, [sp, #180]
   11f88:	and	w19, w6, w1
   11f8c:	mov	w2, w0
   11f90:	str	x2, [sp, #104]
   11f94:	ubfiz	x23, x0, #4, #32
   11f98:	and	w1, w6, w1
   11f9c:	add	x1, x23, x1
   11fa0:	add	x23, x28, x1, lsl #1
   11fa4:	add	x1, x23, #0x6, lsl #12
   11fa8:	ldrh	w25, [x1, #2972]
   11fac:	lsr	w25, w25, #4
   11fb0:	cmp	w0, #0x6
   11fb4:	mov	w5, w21
   11fb8:	mov	w4, w26
   11fbc:	cset	w3, hi  // hi = pmore
   11fc0:	ldurb	w2, [x11, #-2]
   11fc4:	mov	w1, w6
   11fc8:	mov	x0, x28
   11fcc:	bl	119e8 <lzma_mode_is_supported@@XZ_5.0+0x458>
   11fd0:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   11fd4:	ldr	x1, [x1, #3960]
   11fd8:	ldrb	w2, [x1, w25, sxtw]
   11fdc:	add	w0, w2, w0
   11fe0:	str	w0, [x27, #3872]
   11fe4:	add	x2, x28, #0x11, lsl #12
   11fe8:	mov	w3, #0xffffffff            	// #-1
   11fec:	stur	w3, [x2, #-216]
   11ff0:	sturb	wzr, [x2, #-236]
   11ff4:	eor	w25, w25, #0x7f
   11ff8:	ldrb	w15, [x1, w25, uxtw]
   11ffc:	ldr	x2, [sp, #104]
   12000:	add	x7, x28, x2, lsl #1
   12004:	add	x2, x7, #0x6, lsl #12
   12008:	ldrh	w10, [x2, #3356]
   1200c:	lsr	w10, w10, #4
   12010:	eor	w2, w10, #0x7f
   12014:	ldrb	w9, [x1, w2, uxtw]
   12018:	add	w9, w9, w15
   1201c:	cmp	w21, w26
   12020:	b.eq	121ac <lzma_mode_is_supported@@XZ_5.0+0xc1c>  // b.none
   12024:	cmp	w24, w22
   12028:	csel	w0, w24, w22, cs  // cs = hs, nlast
   1202c:	str	w0, [sp, #104]
   12030:	cmp	w0, #0x1
   12034:	b.ls	121f0 <lzma_mode_is_supported@@XZ_5.0+0xc60>  // b.plast
   12038:	add	x0, x28, #0x10, lsl #12
   1203c:	str	wzr, [x0, #3876]
   12040:	ldr	w1, [sp, #116]
   12044:	str	w1, [x0, #3840]
   12048:	ldr	w1, [x28, #744]
   1204c:	str	w1, [x0, #3844]
   12050:	ldr	w1, [x28, #748]
   12054:	str	w1, [x0, #3848]
   12058:	ldr	w1, [x28, #752]
   1205c:	str	w1, [x0, #3852]
   12060:	ldr	w2, [sp, #104]
   12064:	mov	w1, w2
   12068:	add	x0, x1, w2, uxtw #1
   1206c:	lsl	x0, x0, #2
   12070:	sub	x0, x0, x1
   12074:	add	x0, x28, x0, lsl #2
   12078:	add	x0, x0, #0x10, lsl #12
   1207c:	add	x0, x0, #0xef4
   12080:	mov	w1, #0x40000000            	// #1073741824
   12084:	str	w1, [x0], #-44
   12088:	sub	w2, w2, #0x1
   1208c:	cmp	w2, #0x1
   12090:	b.ne	12084 <lzma_mode_is_supported@@XZ_5.0+0xaf4>  // b.any
   12094:	str	w2, [sp, #248]
   12098:	mov	w4, #0x0                   	// #0
   1209c:	mov	x11, #0xee8                 	// #3816
   120a0:	movk	x11, #0x1, lsl #16
   120a4:	add	x6, x28, #0xb, lsl #12
   120a8:	add	x6, x6, #0xa48
   120ac:	ubfiz	x5, x19, #4, #32
   120b0:	add	x5, x5, w19, uxtw
   120b4:	lsl	x5, x5, #4
   120b8:	adrp	x8, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   120bc:	ldr	x13, [x8, #3960]
   120c0:	add	x7, x7, #0x6, lsl #12
   120c4:	mov	x12, x13
   120c8:	mov	w14, #0x2                   	// #2
   120cc:	mov	x16, x13
   120d0:	mov	x8, x13
   120d4:	add	x23, x23, #0x6, lsl #12
   120d8:	b	122d0 <lzma_mode_is_supported@@XZ_5.0+0xd40>
   120dc:	ldr	x0, [sp, #256]
   120e0:	str	w12, [x0]
   120e4:	ldr	x0, [sp, #264]
   120e8:	str	w24, [x0]
   120ec:	subs	w24, w24, #0x1
   120f0:	b.eq	13bf4 <lzma_mode_is_supported@@XZ_5.0+0x2664>  // b.none
   120f4:	ldr	x19, [sp, #168]
   120f8:	mov	x0, x19
   120fc:	ldr	x2, [x19, #56]
   12100:	mov	w1, w24
   12104:	blr	x2
   12108:	ldr	w0, [x19, #28]
   1210c:	add	w24, w0, w24
   12110:	str	w24, [x19, #28]
   12114:	ldp	x19, x20, [sp, #16]
   12118:	ldp	x21, x22, [sp, #32]
   1211c:	ldp	x23, x24, [sp, #48]
   12120:	b	11b44 <lzma_mode_is_supported@@XZ_5.0+0x5b4>
   12124:	ldr	w0, [sp, #300]
   12128:	sub	w0, w0, #0x1
   1212c:	add	x0, x28, x0, lsl #3
   12130:	ldr	w0, [x0, #760]
   12134:	add	w0, w0, #0x4
   12138:	ldr	x1, [sp, #256]
   1213c:	str	w0, [x1]
   12140:	ldr	x0, [sp, #264]
   12144:	str	w22, [x0]
   12148:	subs	w22, w22, #0x1
   1214c:	b.eq	13c04 <lzma_mode_is_supported@@XZ_5.0+0x2674>  // b.none
   12150:	ldr	x19, [sp, #168]
   12154:	mov	x0, x19
   12158:	ldr	x2, [x19, #56]
   1215c:	mov	w1, w22
   12160:	blr	x2
   12164:	ldr	w0, [x19, #28]
   12168:	add	w22, w0, w22
   1216c:	str	w22, [x19, #28]
   12170:	ldp	x19, x20, [sp, #16]
   12174:	ldp	x21, x22, [sp, #32]
   12178:	ldp	x23, x24, [sp, #48]
   1217c:	b	11b44 <lzma_mode_is_supported@@XZ_5.0+0x5b4>
   12180:	mov	w0, #0xffffffff            	// #-1
   12184:	ldr	x1, [sp, #256]
   12188:	str	w0, [x1]
   1218c:	mov	w0, #0x1                   	// #1
   12190:	ldr	x1, [sp, #264]
   12194:	str	w0, [x1]
   12198:	ldp	x19, x20, [sp, #16]
   1219c:	ldp	x21, x22, [sp, #32]
   121a0:	ldp	x23, x24, [sp, #48]
   121a4:	ldp	x25, x26, [sp, #64]
   121a8:	b	11b44 <lzma_mode_is_supported@@XZ_5.0+0x5b4>
   121ac:	mov	x2, x1
   121b0:	add	x1, x7, #0x6, lsl #12
   121b4:	ldrh	w1, [x1, #3380]
   121b8:	lsr	w1, w1, #4
   121bc:	ldrb	w1, [x2, w1, sxtw]
   121c0:	add	x3, x23, #0x6, lsl #12
   121c4:	ldrh	w3, [x3, #3452]
   121c8:	lsr	w3, w3, #4
   121cc:	ldrb	w2, [x2, w3, sxtw]
   121d0:	add	w1, w1, w2
   121d4:	add	w1, w1, w9
   121d8:	cmp	w0, w1
   121dc:	b.ls	12024 <lzma_mode_is_supported@@XZ_5.0+0xa94>  // b.plast
   121e0:	str	w1, [x27, #3872]
   121e4:	add	x0, x28, #0x11, lsl #12
   121e8:	stur	wzr, [x0, #-216]
   121ec:	b	12024 <lzma_mode_is_supported@@XZ_5.0+0xa94>
   121f0:	add	x0, x28, #0x10, lsl #12
   121f4:	ldr	w0, [x0, #3880]
   121f8:	ldr	x1, [sp, #256]
   121fc:	str	w0, [x1]
   12200:	mov	w0, #0x1                   	// #1
   12204:	ldr	x1, [sp, #264]
   12208:	str	w0, [x1]
   1220c:	ldp	x19, x20, [sp, #16]
   12210:	ldp	x21, x22, [sp, #32]
   12214:	ldp	x23, x24, [sp, #48]
   12218:	ldp	x25, x26, [sp, #64]
   1221c:	b	11b44 <lzma_mode_is_supported@@XZ_5.0+0x5b4>
   12220:	ldrh	w1, [x7, #3380]
   12224:	lsr	w1, w1, #4
   12228:	eor	w1, w1, #0x7f
   1222c:	ldrb	w2, [x13, w1, uxtw]
   12230:	cmp	w4, #0x1
   12234:	b.eq	1226c <lzma_mode_is_supported@@XZ_5.0+0xcdc>  // b.none
   12238:	ldrh	w1, [x7, #3404]
   1223c:	lsr	w1, w1, #4
   12240:	eor	w1, w1, #0x7f
   12244:	ldrb	w3, [x12, w1, uxtw]
   12248:	add	w2, w3, w2
   1224c:	sub	w1, w14, w4
   12250:	and	w1, w1, #0x7ff
   12254:	ldrh	w3, [x7, #3428]
   12258:	eor	w1, w1, w3
   1225c:	lsr	w1, w1, #4
   12260:	ldrb	w3, [x12, w1, uxtw]
   12264:	add	w3, w3, w2
   12268:	b	12300 <lzma_mode_is_supported@@XZ_5.0+0xd70>
   1226c:	ldrh	w1, [x7, #3404]
   12270:	lsr	w1, w1, #4
   12274:	ldrb	w3, [x16, w1, sxtw]
   12278:	add	w3, w3, w2
   1227c:	b	12300 <lzma_mode_is_supported@@XZ_5.0+0xd70>
   12280:	str	w1, [x0, #12]
   12284:	str	wzr, [x0, #16]
   12288:	str	w4, [x0, #20]
   1228c:	strb	wzr, [x0]
   12290:	sub	w2, w2, #0x1
   12294:	sub	x0, x0, #0x2c
   12298:	cmn	w2, #0x1
   1229c:	b.eq	122c0 <lzma_mode_is_supported@@XZ_5.0+0xd30>  // b.none
   122a0:	add	x1, x5, w2, uxtw
   122a4:	add	x1, x6, x1, lsl #2
   122a8:	ldr	w1, [x1, #1028]
   122ac:	add	w1, w3, w1
   122b0:	ldr	w17, [x0, #12]
   122b4:	cmp	w1, w17
   122b8:	b.cs	12290 <lzma_mode_is_supported@@XZ_5.0+0xd00>  // b.hs, b.nlast
   122bc:	b	12280 <lzma_mode_is_supported@@XZ_5.0+0xcf0>
   122c0:	add	w4, w4, #0x1
   122c4:	add	x20, x20, #0x4
   122c8:	cmp	w4, #0x4
   122cc:	b.eq	12324 <lzma_mode_is_supported@@XZ_5.0+0xd94>  // b.none
   122d0:	ldr	w0, [x20]
   122d4:	cmp	w0, #0x1
   122d8:	b.ls	122c0 <lzma_mode_is_supported@@XZ_5.0+0xd30>  // b.plast
   122dc:	cbnz	w4, 12220 <lzma_mode_is_supported@@XZ_5.0+0xc90>
   122e0:	ldrh	w1, [x23, #3452]
   122e4:	lsr	w1, w1, #4
   122e8:	eor	w1, w1, #0x7f
   122ec:	ldrb	w3, [x8, w1, uxtw]
   122f0:	ldrh	w1, [x7, #3380]
   122f4:	lsr	w1, w1, #4
   122f8:	ldrb	w1, [x8, w1, sxtw]
   122fc:	add	w3, w3, w1
   12300:	add	w3, w9, w3
   12304:	sub	w2, w0, #0x2
   12308:	mov	w1, w0
   1230c:	add	x0, x1, w0, uxtw #1
   12310:	lsl	x0, x0, #2
   12314:	sub	x0, x0, x1
   12318:	add	x0, x11, x0, lsl #2
   1231c:	add	x0, x28, x0
   12320:	b	122a0 <lzma_mode_is_supported@@XZ_5.0+0xd10>
   12324:	ldr	w1, [sp, #304]
   12328:	cmp	w1, #0x0
   1232c:	csinc	w1, w1, wzr, ne  // ne = any
   12330:	add	w1, w1, #0x1
   12334:	cmp	w22, w1
   12338:	b.cc	124d0 <lzma_mode_is_supported@@XZ_5.0+0xf40>  // b.lo, b.ul, b.last
   1233c:	ldr	w0, [x28, #756]
   12340:	cmp	w1, w0
   12344:	b.ls	123b0 <lzma_mode_is_supported@@XZ_5.0+0xe20>  // b.plast
   12348:	add	x0, x28, #0x2fc
   1234c:	mov	w3, #0x0                   	// #0
   12350:	add	w3, w3, #0x1
   12354:	ldr	w2, [x0], #8
   12358:	cmp	w1, w2
   1235c:	b.hi	12350 <lzma_mode_is_supported@@XZ_5.0+0xdc0>  // b.pmore
   12360:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   12364:	ldr	x0, [x0, #3960]
   12368:	ldrb	w0, [x0, w10, sxtw]
   1236c:	ldr	w11, [sp, #300]
   12370:	mov	w6, #0x5                   	// #5
   12374:	mov	w10, #0x7ffff               	// #524287
   12378:	mov	x9, #0x43a4                	// #17316
   1237c:	mov	x8, #0x40a4                	// #16548
   12380:	adrp	x12, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   12384:	ldr	x13, [x12, #4008]
   12388:	mov	x14, x13
   1238c:	mov	x12, x13
   12390:	mov	x7, #0x41a4                	// #16804
   12394:	add	x5, x28, #0x7, lsl #12
   12398:	add	x5, x5, #0x200
   1239c:	ubfiz	x4, x19, #4, #32
   123a0:	add	x4, x4, w19, uxtw
   123a4:	lsl	x4, x4, #4
   123a8:	add	w15, w0, w15
   123ac:	b	12458 <lzma_mode_is_supported@@XZ_5.0+0xec8>
   123b0:	mov	w3, #0x0                   	// #0
   123b4:	b	12360 <lzma_mode_is_supported@@XZ_5.0+0xdd0>
   123b8:	cmp	w2, w10
   123bc:	b.ls	123fc <lzma_mode_is_supported@@XZ_5.0+0xe6c>  // b.plast
   123c0:	tbz	w2, #31, 1240c <lzma_mode_is_supported@@XZ_5.0+0xe7c>
   123c4:	lsr	w17, w2, #30
   123c8:	ldrb	w18, [x13, w17, uxtw]
   123cc:	add	w18, w18, #0x3c
   123d0:	and	x17, x2, #0xf
   123d4:	add	x17, x17, x9
   123d8:	add	x17, x28, x17, lsl #2
   123dc:	mov	w18, w18
   123e0:	ubfiz	x0, x0, #6, #32
   123e4:	add	x0, x0, x18
   123e8:	add	x0, x0, x8
   123ec:	ldr	w17, [x17, #8]
   123f0:	ldr	w0, [x28, x0, lsl #2]
   123f4:	add	w17, w17, w0
   123f8:	b	12484 <lzma_mode_is_supported@@XZ_5.0+0xef4>
   123fc:	lsr	w17, w2, #6
   12400:	ldrb	w18, [x12, w17, uxtw]
   12404:	add	w18, w18, #0xc
   12408:	b	123d0 <lzma_mode_is_supported@@XZ_5.0+0xe40>
   1240c:	lsr	w17, w2, #18
   12410:	ldrb	w18, [x14, w17, uxtw]
   12414:	add	w18, w18, #0x24
   12418:	b	123d0 <lzma_mode_is_supported@@XZ_5.0+0xe40>
   1241c:	ubfiz	x0, x1, #1, #32
   12420:	add	x19, x0, x18
   12424:	lsl	x19, x19, #2
   12428:	sub	x19, x19, x18
   1242c:	add	x19, x28, x19, lsl #2
   12430:	add	x19, x19, #0x10, lsl #12
   12434:	str	w17, [x19, #3828]
   12438:	str	wzr, [x19, #3832]
   1243c:	add	w2, w2, #0x4
   12440:	str	w2, [x19, #3836]
   12444:	strb	wzr, [x19, #3816]
   12448:	ldr	w0, [x16, #756]
   1244c:	cmp	w1, w0
   12450:	b.eq	124c4 <lzma_mode_is_supported@@XZ_5.0+0xf34>  // b.none
   12454:	add	w1, w1, #0x1
   12458:	add	x16, x28, w3, uxtw #3
   1245c:	ldr	w2, [x16, #760]
   12460:	cmp	w1, #0x5
   12464:	csel	w0, w1, w6, ls  // ls = plast
   12468:	sub	w0, w0, #0x2
   1246c:	cmp	w2, #0x7f
   12470:	b.hi	123b8 <lzma_mode_is_supported@@XZ_5.0+0xe28>  // b.pmore
   12474:	ubfiz	x0, x0, #7, #32
   12478:	add	x0, x0, w2, uxtw
   1247c:	add	x0, x0, x7
   12480:	ldr	w17, [x28, x0, lsl #2]
   12484:	sub	w0, w1, #0x2
   12488:	add	x0, x4, x0
   1248c:	add	x0, x5, x0, lsl #2
   12490:	ldr	w0, [x0, #1028]
   12494:	add	w17, w17, w0
   12498:	add	w17, w17, w15
   1249c:	mov	w18, w1
   124a0:	add	x0, x18, w1, uxtw #1
   124a4:	lsl	x0, x0, #2
   124a8:	sub	x0, x0, x18
   124ac:	add	x0, x28, x0, lsl #2
   124b0:	add	x0, x0, #0x10, lsl #12
   124b4:	ldr	w0, [x0, #3828]
   124b8:	cmp	w17, w0
   124bc:	b.cs	12448 <lzma_mode_is_supported@@XZ_5.0+0xeb8>  // b.hs, b.nlast
   124c0:	b	1241c <lzma_mode_is_supported@@XZ_5.0+0xe8c>
   124c4:	add	w3, w3, #0x1
   124c8:	cmp	w3, w11
   124cc:	b.ne	12454 <lzma_mode_is_supported@@XZ_5.0+0xec4>  // b.any
   124d0:	ldr	w0, [sp, #104]
   124d4:	cmn	w0, #0x1
   124d8:	b.eq	13b8c <lzma_mode_is_supported@@XZ_5.0+0x25fc>  // b.none
   124dc:	add	x0, x28, #0x2e4
   124e0:	ldp	x0, x1, [x0]
   124e4:	stp	x0, x1, [sp, #320]
   124e8:	ldr	w27, [sp, #248]
   124ec:	add	x0, sp, #0x140
   124f0:	str	x0, [sp, #208]
   124f4:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   124f8:	ldr	x0, [x0, #3960]
   124fc:	str	x0, [sp, #224]
   12500:	add	x0, x28, #0x10, lsl #12
   12504:	add	x0, x0, #0xf20
   12508:	str	x0, [sp, #160]
   1250c:	b	13598 <lzma_mode_is_supported@@XZ_5.0+0x2008>
   12510:	cmp	w4, #0x6
   12514:	b.ls	13b84 <lzma_mode_is_supported@@XZ_5.0+0x25f4>  // b.plast
   12518:	mov	w4, #0xa                   	// #10
   1251c:	b	136dc <lzma_mode_is_supported@@XZ_5.0+0x214c>
   12520:	mov	w4, w2
   12524:	add	x0, x4, w2, uxtw #1
   12528:	lsl	x0, x0, #2
   1252c:	sub	x0, x0, x4
   12530:	add	x0, x28, x0, lsl #2
   12534:	add	x0, x0, #0x10, lsl #12
   12538:	ldr	w4, [x0, #3812]
   1253c:	cmp	w4, #0x3
   12540:	b.ls	13be0 <lzma_mode_is_supported@@XZ_5.0+0x2650>  // b.plast
   12544:	cmp	w4, #0x9
   12548:	b.hi	136dc <lzma_mode_is_supported@@XZ_5.0+0x214c>  // b.pmore
   1254c:	b	13b20 <lzma_mode_is_supported@@XZ_5.0+0x2590>
   12550:	mov	w2, w1
   12554:	add	x0, x2, w1, uxtw #1
   12558:	lsl	x0, x0, #2
   1255c:	sub	x0, x0, x2
   12560:	add	x0, x28, x0, lsl #2
   12564:	add	x0, x0, #0x10, lsl #12
   12568:	ldr	w4, [x0, #3812]
   1256c:	sub	w0, w27, #0x1
   12570:	cmp	w1, w0
   12574:	b.eq	126b0 <lzma_mode_is_supported@@XZ_5.0+0x1120>  // b.none
   12578:	mov	w2, w27
   1257c:	add	x0, x2, w27, uxtw #1
   12580:	lsl	x0, x0, #2
   12584:	sub	x0, x0, x2
   12588:	add	x0, x28, x0, lsl #2
   1258c:	add	x0, x0, #0x10, lsl #12
   12590:	ldr	w2, [x0, #3836]
   12594:	cmp	w2, #0x3
   12598:	b.hi	1270c <lzma_mode_is_supported@@XZ_5.0+0x117c>  // b.pmore
   1259c:	cmp	w4, #0x7
   125a0:	mov	w4, #0x8                   	// #8
   125a4:	mov	w0, #0xb                   	// #11
   125a8:	csel	w26, w4, w0, cc  // cc = lo, ul, last
   125ac:	mov	w4, w1
   125b0:	add	x0, x4, w1, uxtw #1
   125b4:	lsl	x0, x0, #2
   125b8:	sub	x0, x0, x4
   125bc:	add	x0, x0, w2, uxtw
   125c0:	add	x0, x0, #0x4, lsl #12
   125c4:	add	x0, x0, #0x3bc
   125c8:	add	x0, x28, x0, lsl #2
   125cc:	ldr	w0, [x0, #16]
   125d0:	str	w0, [sp, #320]
   125d4:	cbz	w2, 12b9c <lzma_mode_is_supported@@XZ_5.0+0x160c>
   125d8:	add	x0, x4, w1, uxtw #1
   125dc:	lsl	x0, x0, #2
   125e0:	sub	x0, x0, x4
   125e4:	add	x0, x28, x0, lsl #2
   125e8:	add	x0, x0, #0x10, lsl #12
   125ec:	ldr	w0, [x0, #3840]
   125f0:	str	w0, [sp, #324]
   125f4:	cmp	w2, #0x1
   125f8:	b.ls	12660 <lzma_mode_is_supported@@XZ_5.0+0x10d0>  // b.plast
   125fc:	add	x0, x4, w1, uxtw #1
   12600:	lsl	x0, x0, #2
   12604:	sub	x0, x0, x4
   12608:	add	x0, x28, x0, lsl #2
   1260c:	add	x0, x0, #0x10, lsl #12
   12610:	ldr	w0, [x0, #3844]
   12614:	str	w0, [sp, #328]
   12618:	cmp	w2, #0x2
   1261c:	b.ls	12660 <lzma_mode_is_supported@@XZ_5.0+0x10d0>  // b.plast
   12620:	add	x0, x4, w1, uxtw #1
   12624:	lsl	x0, x0, #2
   12628:	sub	x0, x0, x4
   1262c:	add	x0, x28, x0, lsl #2
   12630:	add	x0, x0, #0x10, lsl #12
   12634:	ldr	w0, [x0, #3848]
   12638:	str	w0, [sp, #332]
   1263c:	cmp	w2, #0x3
   12640:	b.ls	12660 <lzma_mode_is_supported@@XZ_5.0+0x10d0>  // b.plast
   12644:	add	x0, x4, w1, uxtw #1
   12648:	lsl	x0, x0, #2
   1264c:	sub	x0, x0, x4
   12650:	add	x0, x28, x0, lsl #2
   12654:	add	x0, x0, #0x10, lsl #12
   12658:	ldr	w0, [x0, #3852]
   1265c:	str	w0, [sp, #336]
   12660:	add	w2, w2, #0x1
   12664:	cmp	w2, #0x3
   12668:	b.hi	1276c <lzma_mode_is_supported@@XZ_5.0+0x11dc>  // b.pmore
   1266c:	mov	w0, w1
   12670:	add	x1, x0, w1, uxtw #1
   12674:	lsl	x1, x1, #2
   12678:	sub	x1, x1, x0
   1267c:	mov	x5, #0x43bc                	// #17340
   12680:	ldr	x6, [sp, #208]
   12684:	mov	w4, w2
   12688:	add	x0, x1, x4
   1268c:	add	x0, x0, x5
   12690:	add	x0, x28, x0, lsl #2
   12694:	ldr	w0, [x0, #16]
   12698:	str	w0, [x6, x4, lsl #2]
   1269c:	add	w2, w2, #0x1
   126a0:	cmp	w2, #0x3
   126a4:	b.ls	12684 <lzma_mode_is_supported@@XZ_5.0+0x10f4>  // b.plast
   126a8:	b	1276c <lzma_mode_is_supported@@XZ_5.0+0x11dc>
   126ac:	mov	w4, #0x0                   	// #0
   126b0:	mov	w1, w27
   126b4:	add	x0, x1, w27, uxtw #1
   126b8:	lsl	x0, x0, #2
   126bc:	sub	x0, x0, x1
   126c0:	add	x0, x28, x0, lsl #2
   126c4:	add	x0, x0, #0x10, lsl #12
   126c8:	ldr	w0, [x0, #3836]
   126cc:	cbnz	w0, 126e4 <lzma_mode_is_supported@@XZ_5.0+0x1154>
   126d0:	cmp	w4, #0x7
   126d4:	mov	w1, #0x9                   	// #9
   126d8:	mov	w0, #0xb                   	// #11
   126dc:	csel	w26, w1, w0, cc  // cc = lo, ul, last
   126e0:	b	1276c <lzma_mode_is_supported@@XZ_5.0+0x11dc>
   126e4:	mov	w26, #0x0                   	// #0
   126e8:	cmp	w4, #0x3
   126ec:	b.ls	1276c <lzma_mode_is_supported@@XZ_5.0+0x11dc>  // b.plast
   126f0:	sub	w0, w4, #0x3
   126f4:	sub	w1, w4, #0x6
   126f8:	cmp	w4, #0x9
   126fc:	csel	w26, w1, w0, hi  // hi = pmore
   12700:	b	1276c <lzma_mode_is_supported@@XZ_5.0+0x11dc>
   12704:	mov	w1, w2
   12708:	b	12578 <lzma_mode_is_supported@@XZ_5.0+0xfe8>
   1270c:	cmp	w4, #0x7
   12710:	mov	w4, #0x7                   	// #7
   12714:	mov	w0, #0xa                   	// #10
   12718:	csel	w26, w4, w0, cc  // cc = lo, ul, last
   1271c:	sub	w2, w2, #0x4
   12720:	str	w2, [sp, #320]
   12724:	mov	w4, w1
   12728:	ubfiz	x1, x1, #1, #32
   1272c:	add	x2, x1, x4
   12730:	lsl	x2, x2, #2
   12734:	sub	x2, x2, x4
   12738:	add	x2, x28, x2, lsl #2
   1273c:	add	x2, x2, #0x10, lsl #12
   12740:	ldr	w0, [x2, #3840]
   12744:	str	w0, [sp, #324]
   12748:	add	x2, x1, x4
   1274c:	lsl	x2, x2, #2
   12750:	sub	x2, x2, x4
   12754:	add	x2, x28, x2, lsl #2
   12758:	add	x2, x2, #0x10, lsl #12
   1275c:	ldr	w0, [x2, #3844]
   12760:	str	w0, [sp, #328]
   12764:	ldr	w0, [x2, #3848]
   12768:	str	w0, [sp, #332]
   1276c:	mov	w1, w27
   12770:	ubfiz	x0, x27, #1, #32
   12774:	add	x2, x0, x1
   12778:	lsl	x2, x2, #2
   1277c:	sub	x2, x2, x1
   12780:	add	x2, x28, x2, lsl #2
   12784:	add	x2, x2, #0x10, lsl #12
   12788:	str	w26, [x2, #3812]
   1278c:	ldr	w20, [sp, #320]
   12790:	add	x2, x0, x1
   12794:	lsl	x2, x2, #2
   12798:	sub	x2, x2, x1
   1279c:	add	x2, x28, x2, lsl #2
   127a0:	add	x2, x2, #0x10, lsl #12
   127a4:	str	w20, [x2, #3840]
   127a8:	add	x2, x0, x1
   127ac:	lsl	x2, x2, #2
   127b0:	sub	x2, x2, x1
   127b4:	add	x2, x28, x2, lsl #2
   127b8:	add	x2, x2, #0x10, lsl #12
   127bc:	ldr	w4, [sp, #324]
   127c0:	str	w4, [x2, #3844]
   127c4:	add	x2, x0, x1
   127c8:	lsl	x2, x2, #2
   127cc:	sub	x2, x2, x1
   127d0:	add	x2, x28, x2, lsl #2
   127d4:	add	x2, x2, #0x10, lsl #12
   127d8:	ldr	w4, [sp, #328]
   127dc:	str	w4, [x2, #3848]
   127e0:	add	x2, x0, x1
   127e4:	lsl	x2, x2, #2
   127e8:	sub	x2, x2, x1
   127ec:	add	x2, x28, x2, lsl #2
   127f0:	add	x2, x2, #0x10, lsl #12
   127f4:	ldr	w4, [sp, #332]
   127f8:	str	w4, [x2, #3852]
   127fc:	ldr	w24, [x2, #3828]
   12800:	ldrb	w23, [x19, x3]
   12804:	mov	w20, w20
   12808:	mvn	x20, x20
   1280c:	ldrb	w22, [x25, x20]
   12810:	ldr	w1, [x28, #2960]
   12814:	str	w1, [sp, #116]
   12818:	ldr	w6, [sp, #152]
   1281c:	and	w0, w1, w6
   12820:	str	w0, [sp, #128]
   12824:	mov	w0, w26
   12828:	str	x0, [sp, #144]
   1282c:	ubfiz	x0, x26, #4, #32
   12830:	and	w1, w1, w6
   12834:	add	x0, x0, x1
   12838:	add	x0, x28, x0, lsl #1
   1283c:	str	x0, [sp, #192]
   12840:	add	x0, x0, #0x6, lsl #12
   12844:	ldrh	w21, [x0, #2972]
   12848:	lsr	w21, w21, #4
   1284c:	cmp	w26, #0x6
   12850:	mov	w5, w23
   12854:	mov	w4, w22
   12858:	cset	w3, hi  // hi = pmore
   1285c:	ldurb	w2, [x25, #-1]
   12860:	mov	w1, w6
   12864:	mov	x0, x28
   12868:	bl	119e8 <lzma_mode_is_supported@@XZ_5.0+0x458>
   1286c:	ldr	x1, [sp, #224]
   12870:	ldrb	w1, [x1, w21, sxtw]
   12874:	add	w0, w24, w0
   12878:	add	w0, w1, w0
   1287c:	add	w4, w27, #0x1
   12880:	str	w4, [sp, #124]
   12884:	add	w2, w27, #0x1
   12888:	add	x1, x2, x2, lsl #1
   1288c:	lsl	x1, x1, #2
   12890:	sub	x1, x1, x2
   12894:	add	x1, x28, x1, lsl #2
   12898:	add	x1, x1, #0x10, lsl #12
   1289c:	ldr	w1, [x1, #3828]
   128a0:	ldr	w3, [sp, #236]
   128a4:	cmp	w0, w1
   128a8:	b.cs	1290c <lzma_mode_is_supported@@XZ_5.0+0x137c>  // b.hs, b.nlast
   128ac:	mov	x3, x2
   128b0:	mov	x1, x4
   128b4:	ubfiz	x1, x1, #1, #32
   128b8:	add	x2, x1, x2
   128bc:	lsl	x2, x2, #2
   128c0:	sub	x2, x2, x3
   128c4:	add	x2, x28, x2, lsl #2
   128c8:	add	x2, x2, #0x10, lsl #12
   128cc:	str	w0, [x2, #3828]
   128d0:	add	x2, x1, x3
   128d4:	lsl	x2, x2, #2
   128d8:	sub	x2, x2, x3
   128dc:	add	x2, x28, x2, lsl #2
   128e0:	add	x2, x2, #0x10, lsl #12
   128e4:	str	w27, [x2, #3832]
   128e8:	add	x2, x1, x3
   128ec:	lsl	x2, x2, #2
   128f0:	sub	x2, x2, x3
   128f4:	add	x2, x28, x2, lsl #2
   128f8:	add	x2, x2, #0x10, lsl #12
   128fc:	mov	w4, #0xffffffff            	// #-1
   12900:	str	w4, [x2, #3836]
   12904:	strb	wzr, [x2, #3816]
   12908:	mov	w3, #0x1                   	// #1
   1290c:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   12910:	ldr	x1, [x1, #3960]
   12914:	eor	w21, w21, #0x7f
   12918:	ldrb	w2, [x1, w21, uxtw]
   1291c:	add	w4, w2, w24
   12920:	str	w4, [sp, #200]
   12924:	ldr	x2, [sp, #144]
   12928:	add	x2, x28, x2, lsl #1
   1292c:	str	x2, [sp, #144]
   12930:	add	x2, x2, #0x6, lsl #12
   12934:	ldrh	w2, [x2, #3356]
   12938:	lsr	w2, w2, #4
   1293c:	str	w2, [sp, #232]
   12940:	eor	w2, w2, #0x7f
   12944:	ldrb	w1, [x1, w2, uxtw]
   12948:	add	w1, w1, w4
   1294c:	str	w1, [sp, #176]
   12950:	cmp	w23, w22
   12954:	b.eq	12ba4 <lzma_mode_is_supported@@XZ_5.0+0x1614>  // b.none
   12958:	ldr	w2, [sp, #136]
   1295c:	cmp	w2, #0x1
   12960:	b.ls	13584 <lzma_mode_is_supported@@XZ_5.0+0x1ff4>  // b.plast
   12964:	ldr	w1, [sp, #140]
   12968:	cmp	w1, w2
   1296c:	csel	w23, w1, w2, ls  // ls = plast
   12970:	cbnz	w3, 12c98 <lzma_mode_is_supported@@XZ_5.0+0x1708>
   12974:	add	w1, w1, #0x1
   12978:	cmp	w1, w2
   1297c:	csel	w1, w1, w2, ls  // ls = plast
   12980:	cmp	w1, #0x1
   12984:	b.ls	12c98 <lzma_mode_is_supported@@XZ_5.0+0x1708>  // b.plast
   12988:	ldr	x2, [sp, #184]
   1298c:	add	x19, x19, x2
   12990:	ldr	w2, [sp, #248]
   12994:	ldrb	w4, [x19]
   12998:	ldrb	w3, [x19, x20]
   1299c:	cmp	w4, w3
   129a0:	b.ne	129b8 <lzma_mode_is_supported@@XZ_5.0+0x1428>  // b.any
   129a4:	add	w2, w2, #0x1
   129a8:	add	x19, x19, #0x1
   129ac:	cmp	w1, w2
   129b0:	b.ne	12994 <lzma_mode_is_supported@@XZ_5.0+0x1404>  // b.any
   129b4:	mov	w2, w1
   129b8:	sub	w3, w2, #0x1
   129bc:	cmp	w3, #0x1
   129c0:	b.ls	12c98 <lzma_mode_is_supported@@XZ_5.0+0x1708>  // b.plast
   129c4:	mov	w7, #0x0                   	// #0
   129c8:	cmp	w26, #0x3
   129cc:	b.ls	129e0 <lzma_mode_is_supported@@XZ_5.0+0x1450>  // b.plast
   129d0:	sub	w4, w26, #0x3
   129d4:	sub	w7, w26, #0x6
   129d8:	cmp	w26, #0x9
   129dc:	csel	w7, w7, w4, hi  // hi = pmore
   129e0:	ldr	w1, [sp, #180]
   129e4:	ldr	w9, [sp, #124]
   129e8:	add	w1, w1, w9
   129ec:	ldr	w4, [sp, #116]
   129f0:	and	w5, w1, w4
   129f4:	ubfiz	x8, x7, #4, #32
   129f8:	and	w1, w1, w4
   129fc:	add	x1, x8, x1
   12a00:	add	x8, x28, x1, lsl #1
   12a04:	add	x7, x28, w7, uxtw #1
   12a08:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   12a0c:	ldr	x4, [x1, #3960]
   12a10:	add	x1, x8, #0x6, lsl #12
   12a14:	ldrh	w1, [x1, #2972]
   12a18:	lsr	w1, w1, #4
   12a1c:	eor	w1, w1, #0x7f
   12a20:	ldrb	w6, [x4, w1, uxtw]
   12a24:	add	x1, x7, #0x6, lsl #12
   12a28:	ldrh	w1, [x1, #3356]
   12a2c:	lsr	w1, w1, #4
   12a30:	eor	w1, w1, #0x7f
   12a34:	ldrb	w1, [x4, w1, uxtw]
   12a38:	add	w6, w6, w1
   12a3c:	add	w3, w9, w3
   12a40:	ldr	w4, [sp, #104]
   12a44:	cmp	w3, w4
   12a48:	b.ls	12a9c <lzma_mode_is_supported@@XZ_5.0+0x150c>  // b.plast
   12a4c:	add	w9, w4, #0x1
   12a50:	add	x1, x9, x9, lsl #1
   12a54:	lsl	x1, x1, #2
   12a58:	sub	x1, x1, x9
   12a5c:	add	x1, x28, x1, lsl #2
   12a60:	add	x1, x1, #0x10, lsl #12
   12a64:	add	x1, x1, #0xef4
   12a68:	mvn	w4, w4
   12a6c:	add	w4, w4, w3
   12a70:	add	x9, x4, x9
   12a74:	add	x4, x9, x9, lsl #1
   12a78:	lsl	x4, x4, #2
   12a7c:	sub	x4, x4, x9
   12a80:	ldr	x9, [sp, #160]
   12a84:	add	x4, x9, x4, lsl #2
   12a88:	mov	w9, #0x40000000            	// #1073741824
   12a8c:	str	w9, [x1], #44
   12a90:	cmp	x1, x4
   12a94:	b.ne	12a8c <lzma_mode_is_supported@@XZ_5.0+0x14fc>  // b.any
   12a98:	str	w3, [sp, #104]
   12a9c:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   12aa0:	ldr	x4, [x1, #3960]
   12aa4:	add	x8, x8, #0x6, lsl #12
   12aa8:	ldrh	w1, [x8, #3452]
   12aac:	lsr	w1, w1, #4
   12ab0:	eor	w1, w1, #0x7f
   12ab4:	mov	x8, x4
   12ab8:	ldrb	w4, [x4, w1, uxtw]
   12abc:	add	x7, x7, #0x6, lsl #12
   12ac0:	ldrh	w1, [x7, #3380]
   12ac4:	lsr	w1, w1, #4
   12ac8:	ldrb	w1, [x8, w1, sxtw]
   12acc:	add	w4, w4, w1
   12ad0:	sub	w1, w2, #0x3
   12ad4:	ubfiz	x2, x5, #4, #32
   12ad8:	add	x5, x2, w5, uxtw
   12adc:	add	x1, x1, x5, lsl #4
   12ae0:	add	x1, x28, x1, lsl #2
   12ae4:	add	x1, x1, #0xb, lsl #12
   12ae8:	add	x1, x1, #0xe48
   12aec:	ldr	w1, [x1, #4]
   12af0:	add	w0, w0, w1
   12af4:	add	w0, w0, w6
   12af8:	add	w0, w4, w0
   12afc:	mov	w2, w3
   12b00:	add	x1, x2, w3, uxtw #1
   12b04:	lsl	x1, x1, #2
   12b08:	sub	x1, x1, x2
   12b0c:	add	x1, x28, x1, lsl #2
   12b10:	add	x1, x1, #0x10, lsl #12
   12b14:	ldr	w1, [x1, #3828]
   12b18:	cmp	w0, w1
   12b1c:	b.cs	12c98 <lzma_mode_is_supported@@XZ_5.0+0x1708>  // b.hs, b.nlast
   12b20:	mov	x1, x2
   12b24:	ubfiz	x3, x3, #1, #32
   12b28:	add	x2, x3, x2
   12b2c:	lsl	x2, x2, #2
   12b30:	sub	x2, x2, x1
   12b34:	add	x2, x28, x2, lsl #2
   12b38:	add	x2, x2, #0x10, lsl #12
   12b3c:	str	w0, [x2, #3828]
   12b40:	mov	x0, x2
   12b44:	ldr	w2, [sp, #124]
   12b48:	str	w2, [x0, #3832]
   12b4c:	add	x0, x3, x1
   12b50:	lsl	x0, x0, #2
   12b54:	sub	x0, x0, x1
   12b58:	add	x0, x28, x0, lsl #2
   12b5c:	add	x0, x0, #0x10, lsl #12
   12b60:	str	wzr, [x0, #3836]
   12b64:	add	x0, x3, x1
   12b68:	lsl	x0, x0, #2
   12b6c:	sub	x0, x0, x1
   12b70:	add	x0, x28, x0, lsl #2
   12b74:	add	x0, x0, #0x10, lsl #12
   12b78:	mov	w2, #0x1                   	// #1
   12b7c:	strb	w2, [x0, #3816]
   12b80:	add	x3, x3, x1
   12b84:	lsl	x0, x3, #2
   12b88:	sub	x0, x0, x1
   12b8c:	add	x0, x28, x0, lsl #2
   12b90:	add	x0, x0, #0x10, lsl #12
   12b94:	strb	wzr, [x0, #3817]
   12b98:	b	12c98 <lzma_mode_is_supported@@XZ_5.0+0x1708>
   12b9c:	ldr	w2, [sp, #248]
   12ba0:	b	1266c <lzma_mode_is_supported@@XZ_5.0+0x10dc>
   12ba4:	ldr	w2, [sp, #124]
   12ba8:	mov	w1, w2
   12bac:	add	x0, x1, w2, uxtw #1
   12bb0:	lsl	x0, x0, #2
   12bb4:	sub	x0, x0, x1
   12bb8:	add	x0, x28, x0, lsl #2
   12bbc:	add	x0, x0, #0x10, lsl #12
   12bc0:	ldr	w0, [x0, #3832]
   12bc4:	cmp	w0, w27
   12bc8:	b.cs	12be8 <lzma_mode_is_supported@@XZ_5.0+0x1658>  // b.hs, b.nlast
   12bcc:	add	x0, x1, w2, uxtw #1
   12bd0:	lsl	x0, x0, #2
   12bd4:	sub	x0, x0, x1
   12bd8:	add	x0, x28, x0, lsl #2
   12bdc:	add	x0, x0, #0x10, lsl #12
   12be0:	ldr	w0, [x0, #3836]
   12be4:	cbz	w0, 12c7c <lzma_mode_is_supported@@XZ_5.0+0x16ec>
   12be8:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   12bec:	ldr	x0, [x0, #3960]
   12bf0:	ldr	x1, [sp, #144]
   12bf4:	add	x1, x1, #0x6, lsl #12
   12bf8:	ldrh	w1, [x1, #3380]
   12bfc:	lsr	w1, w1, #4
   12c00:	ldrb	w1, [x0, w1, sxtw]
   12c04:	ldr	x2, [sp, #192]
   12c08:	add	x2, x2, #0x6, lsl #12
   12c0c:	ldrh	w2, [x2, #3452]
   12c10:	lsr	w2, w2, #4
   12c14:	ldrb	w0, [x0, w2, sxtw]
   12c18:	add	w1, w1, w0
   12c1c:	ldr	w0, [sp, #176]
   12c20:	add	w1, w1, w0
   12c24:	ldr	w3, [sp, #124]
   12c28:	mov	w2, w3
   12c2c:	add	x0, x2, w3, uxtw #1
   12c30:	lsl	x0, x0, #2
   12c34:	sub	x0, x0, x2
   12c38:	add	x0, x28, x0, lsl #2
   12c3c:	add	x0, x0, #0x10, lsl #12
   12c40:	ldr	w0, [x0, #3828]
   12c44:	cmp	w1, w0
   12c48:	b.hi	12c7c <lzma_mode_is_supported@@XZ_5.0+0x16ec>  // b.pmore
   12c4c:	mov	w0, w3
   12c50:	mov	x3, x2
   12c54:	ubfiz	x0, x0, #1, #32
   12c58:	add	x2, x0, x2
   12c5c:	lsl	x2, x2, #2
   12c60:	sub	x2, x2, x3
   12c64:	add	x2, x28, x2, lsl #2
   12c68:	add	x2, x2, #0x10, lsl #12
   12c6c:	str	w1, [x2, #3828]
   12c70:	str	w27, [x2, #3832]
   12c74:	str	wzr, [x2, #3836]
   12c78:	strb	wzr, [x2, #3816]
   12c7c:	ldr	w0, [sp, #136]
   12c80:	cmp	w0, #0x1
   12c84:	b.ls	13584 <lzma_mode_is_supported@@XZ_5.0+0x1ff4>  // b.plast
   12c88:	ldr	w0, [sp, #140]
   12c8c:	ldr	w1, [sp, #136]
   12c90:	cmp	w0, w1
   12c94:	csel	w23, w0, w1, ls  // ls = plast
   12c98:	cmp	w26, #0x6
   12c9c:	mov	w1, #0x8                   	// #8
   12ca0:	mov	w0, #0xb                   	// #11
   12ca4:	csel	w24, w1, w0, ls  // ls = plast
   12ca8:	sub	w1, w24, #0x3
   12cac:	sub	w0, w24, #0x6
   12cb0:	cmp	w24, #0x9
   12cb4:	csel	w0, w1, w0, ls  // ls = plast
   12cb8:	str	w0, [sp, #240]
   12cbc:	mov	x22, #0x0                   	// #0
   12cc0:	mov	w19, #0x2                   	// #2
   12cc4:	ldr	w1, [sp, #128]
   12cc8:	ubfiz	x0, x1, #4, #32
   12ccc:	add	x0, x0, w1, uxtw
   12cd0:	lsl	x0, x0, #4
   12cd4:	str	x0, [sp, #216]
   12cd8:	str	w26, [sp, #184]
   12cdc:	str	w24, [sp, #244]
   12ce0:	b	12e80 <lzma_mode_is_supported@@XZ_5.0+0x18f0>
   12ce4:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   12ce8:	ldr	x1, [x0, #3960]
   12cec:	ldr	x0, [sp, #144]
   12cf0:	add	x0, x0, #0x6, lsl #12
   12cf4:	ldrh	w0, [x0, #3380]
   12cf8:	lsr	w0, w0, #4
   12cfc:	eor	w0, w0, #0x7f
   12d00:	ldrb	w5, [x1, w0, uxtw]
   12d04:	cmp	w26, #0x1
   12d08:	b.eq	12d54 <lzma_mode_is_supported@@XZ_5.0+0x17c4>  // b.none
   12d0c:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   12d10:	ldr	x2, [x0, #3960]
   12d14:	ldr	x0, [sp, #144]
   12d18:	add	x6, x0, #0x6, lsl #12
   12d1c:	ldrh	w1, [x6, #3404]
   12d20:	lsr	w1, w1, #4
   12d24:	eor	w1, w1, #0x7f
   12d28:	ldrb	w0, [x2, w1, uxtw]
   12d2c:	add	w5, w0, w5
   12d30:	mov	w1, #0x2                   	// #2
   12d34:	sub	w1, w1, w26
   12d38:	and	w1, w1, #0x7ff
   12d3c:	ldrh	w0, [x6, #3428]
   12d40:	eor	w1, w1, w0
   12d44:	lsr	w1, w1, #4
   12d48:	ldrb	w0, [x2, w1, uxtw]
   12d4c:	add	w0, w0, w5
   12d50:	b	12f84 <lzma_mode_is_supported@@XZ_5.0+0x19f4>
   12d54:	mov	x0, x1
   12d58:	ldr	x1, [sp, #144]
   12d5c:	add	x1, x1, #0x6, lsl #12
   12d60:	ldrh	w1, [x1, #3404]
   12d64:	lsr	w1, w1, #4
   12d68:	ldrb	w0, [x0, w1, sxtw]
   12d6c:	add	w0, w0, w5
   12d70:	b	12f84 <lzma_mode_is_supported@@XZ_5.0+0x19f4>
   12d74:	sub	w2, w2, #0x1
   12d78:	cmp	w2, #0x1
   12d7c:	b.ls	12e10 <lzma_mode_is_supported@@XZ_5.0+0x1880>  // b.plast
   12d80:	sub	w0, w2, #0x2
   12d84:	add	x0, x6, x0
   12d88:	add	x0, x5, x0, lsl #2
   12d8c:	ldr	w8, [x0, #1028]
   12d90:	add	w8, w24, w8
   12d94:	add	w0, w2, w27
   12d98:	add	w7, w2, w27
   12d9c:	add	x1, x7, x7, lsl #1
   12da0:	lsl	x1, x1, #2
   12da4:	sub	x1, x1, x7
   12da8:	add	x1, x28, x1, lsl #2
   12dac:	add	x1, x1, #0x10, lsl #12
   12db0:	ldr	w1, [x1, #3828]
   12db4:	cmp	w8, w1
   12db8:	b.cs	12d74 <lzma_mode_is_supported@@XZ_5.0+0x17e4>  // b.hs, b.nlast
   12dbc:	ubfiz	x0, x0, #1, #32
   12dc0:	add	x1, x0, x7
   12dc4:	lsl	x1, x1, #2
   12dc8:	sub	x1, x1, x7
   12dcc:	add	x1, x28, x1, lsl #2
   12dd0:	add	x1, x1, #0x10, lsl #12
   12dd4:	str	w8, [x1, #3828]
   12dd8:	add	x1, x0, x7
   12ddc:	lsl	x1, x1, #2
   12de0:	sub	x1, x1, x7
   12de4:	add	x1, x28, x1, lsl #2
   12de8:	add	x1, x1, #0x10, lsl #12
   12dec:	str	w27, [x1, #3832]
   12df0:	add	x1, x0, x7
   12df4:	lsl	x1, x1, #2
   12df8:	sub	x1, x1, x7
   12dfc:	add	x1, x28, x1, lsl #2
   12e00:	add	x1, x1, #0x10, lsl #12
   12e04:	str	w26, [x1, #3836]
   12e08:	strb	wzr, [x1, #3816]
   12e0c:	b	12d74 <lzma_mode_is_supported@@XZ_5.0+0x17e4>
   12e10:	cmp	w26, #0x0
   12e14:	csinc	w19, w19, w3, ne  // ne = any
   12e18:	add	w20, w3, #0x1
   12e1c:	ldr	w0, [sp, #140]
   12e20:	add	w1, w0, w20
   12e24:	ldr	w0, [sp, #136]
   12e28:	cmp	w1, w0
   12e2c:	csel	w1, w1, w0, ls  // ls = plast
   12e30:	cmp	w20, w1
   12e34:	b.cs	12e60 <lzma_mode_is_supported@@XZ_5.0+0x18d0>  // b.hs, b.nlast
   12e38:	mov	w0, w20
   12e3c:	mov	w20, w0
   12e40:	ldrb	w5, [x25, x0]
   12e44:	ldrb	w2, [x4, x0]
   12e48:	cmp	w5, w2
   12e4c:	b.ne	12e60 <lzma_mode_is_supported@@XZ_5.0+0x18d0>  // b.any
   12e50:	add	w20, w0, #0x1
   12e54:	add	x0, x0, #0x1
   12e58:	cmp	w1, w0
   12e5c:	b.hi	12e3c <lzma_mode_is_supported@@XZ_5.0+0x18ac>  // b.pmore
   12e60:	sub	w20, w20, w3
   12e64:	sub	w0, w20, #0x1
   12e68:	str	w0, [sp, #252]
   12e6c:	cmp	w0, #0x1
   12e70:	b.hi	12fa0 <lzma_mode_is_supported@@XZ_5.0+0x1a10>  // b.pmore
   12e74:	add	x22, x22, #0x1
   12e78:	cmp	x22, #0x4
   12e7c:	b.eq	13224 <lzma_mode_is_supported@@XZ_5.0+0x1c94>  // b.none
   12e80:	mov	w26, w22
   12e84:	ldr	x0, [sp, #208]
   12e88:	ldr	w0, [x0, x22, lsl #2]
   12e8c:	mvn	x0, x0
   12e90:	add	x4, x25, x0
   12e94:	ldrb	w1, [x25]
   12e98:	ldrb	w0, [x25, x0]
   12e9c:	cmp	w1, w0
   12ea0:	b.ne	12e74 <lzma_mode_is_supported@@XZ_5.0+0x18e4>  // b.any
   12ea4:	ldrb	w1, [x25, #1]
   12ea8:	ldrb	w0, [x4, #1]
   12eac:	cmp	w1, w0
   12eb0:	b.ne	12e74 <lzma_mode_is_supported@@XZ_5.0+0x18e4>  // b.any
   12eb4:	mov	x0, #0x2                   	// #2
   12eb8:	mov	w3, #0x2                   	// #2
   12ebc:	cmp	w23, #0x2
   12ec0:	b.ls	12ee8 <lzma_mode_is_supported@@XZ_5.0+0x1958>  // b.plast
   12ec4:	mov	w3, w0
   12ec8:	ldrb	w2, [x25, x0]
   12ecc:	ldrb	w1, [x4, x0]
   12ed0:	cmp	w2, w1
   12ed4:	b.ne	12ee8 <lzma_mode_is_supported@@XZ_5.0+0x1958>  // b.any
   12ed8:	add	w3, w0, #0x1
   12edc:	add	x0, x0, #0x1
   12ee0:	cmp	w23, w0
   12ee4:	b.hi	12ec4 <lzma_mode_is_supported@@XZ_5.0+0x1934>  // b.pmore
   12ee8:	add	w21, w3, w27
   12eec:	ldr	w1, [sp, #104]
   12ef0:	cmp	w21, w1
   12ef4:	b.ls	12f48 <lzma_mode_is_supported@@XZ_5.0+0x19b8>  // b.plast
   12ef8:	add	w2, w1, #0x1
   12efc:	add	x0, x2, x2, lsl #1
   12f00:	lsl	x0, x0, #2
   12f04:	sub	x0, x0, x2
   12f08:	add	x0, x28, x0, lsl #2
   12f0c:	add	x0, x0, #0x10, lsl #12
   12f10:	add	x0, x0, #0xef4
   12f14:	mvn	w1, w1
   12f18:	add	w1, w1, w21
   12f1c:	add	x2, x1, x2
   12f20:	add	x1, x2, x2, lsl #1
   12f24:	lsl	x1, x1, #2
   12f28:	sub	x1, x1, x2
   12f2c:	ldr	x2, [sp, #160]
   12f30:	add	x1, x2, x1, lsl #2
   12f34:	mov	w2, #0x40000000            	// #1073741824
   12f38:	str	w2, [x0], #44
   12f3c:	cmp	x1, x0
   12f40:	b.ne	12f38 <lzma_mode_is_supported@@XZ_5.0+0x19a8>  // b.any
   12f44:	str	w21, [sp, #104]
   12f48:	cbnz	w26, 12ce4 <lzma_mode_is_supported@@XZ_5.0+0x1754>
   12f4c:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   12f50:	ldr	x1, [x0, #3960]
   12f54:	ldr	x0, [sp, #192]
   12f58:	add	x0, x0, #0x6, lsl #12
   12f5c:	ldrh	w0, [x0, #3452]
   12f60:	lsr	w0, w0, #4
   12f64:	eor	w0, w0, #0x7f
   12f68:	ldrb	w0, [x1, w0, uxtw]
   12f6c:	ldr	x2, [sp, #144]
   12f70:	add	x2, x2, #0x6, lsl #12
   12f74:	ldrh	w2, [x2, #3380]
   12f78:	lsr	w2, w2, #4
   12f7c:	ldrb	w1, [x1, w2, sxtw]
   12f80:	add	w0, w0, w1
   12f84:	ldr	w1, [sp, #176]
   12f88:	add	w24, w1, w0
   12f8c:	mov	w2, w3
   12f90:	add	x5, x28, #0xb, lsl #12
   12f94:	add	x5, x5, #0xa48
   12f98:	ldr	x6, [sp, #216]
   12f9c:	b	12d80 <lzma_mode_is_supported@@XZ_5.0+0x17f0>
   12fa0:	ldr	w0, [sp, #152]
   12fa4:	add	w6, w3, w0
   12fa8:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   12fac:	ldr	x2, [x0, #3960]
   12fb0:	ldr	w0, [sp, #116]
   12fb4:	and	w1, w0, w6
   12fb8:	ldr	w0, [sp, #244]
   12fbc:	add	x0, x1, x0, lsl #4
   12fc0:	add	x0, x0, #0x3, lsl #12
   12fc4:	add	x0, x0, #0x5c8
   12fc8:	add	x0, x28, x0, lsl #1
   12fcc:	ldrh	w0, [x0, #12]
   12fd0:	lsr	w0, w0, #4
   12fd4:	str	x2, [sp, #280]
   12fd8:	ldrb	w1, [x2, w0, sxtw]
   12fdc:	sub	w0, w3, #0x2
   12fe0:	ldr	x5, [sp, #216]
   12fe4:	add	x0, x5, x0
   12fe8:	add	x0, x28, x0, lsl #2
   12fec:	add	x0, x0, #0xb, lsl #12
   12ff0:	add	x0, x0, #0xe48
   12ff4:	ldr	w0, [x0, #4]
   12ff8:	add	w5, w1, w0
   12ffc:	str	w5, [sp, #272]
   13000:	sub	w0, w3, #0x1
   13004:	ldrb	w5, [x25, w3, uxtw]
   13008:	ldrb	w4, [x4, w3, uxtw]
   1300c:	mov	w3, #0x1                   	// #1
   13010:	ldrb	w2, [x25, w0, uxtw]
   13014:	str	w6, [sp, #276]
   13018:	mov	w1, w6
   1301c:	mov	x0, x28
   13020:	bl	119e8 <lzma_mode_is_supported@@XZ_5.0+0x458>
   13024:	ldr	w6, [sp, #276]
   13028:	add	w1, w6, #0x1
   1302c:	ldr	w2, [sp, #116]
   13030:	and	w3, w1, w2
   13034:	ldr	w4, [sp, #240]
   13038:	ubfiz	x5, x4, #4, #32
   1303c:	and	w1, w1, w2
   13040:	add	x1, x5, x1
   13044:	add	x5, x28, x1, lsl #1
   13048:	add	x1, x5, #0x6, lsl #12
   1304c:	ldrh	w1, [x1, #2972]
   13050:	lsr	w1, w1, #4
   13054:	eor	w1, w1, #0x7f
   13058:	ldr	x2, [sp, #280]
   1305c:	ldrb	w7, [x2, w1, uxtw]
   13060:	add	x9, x28, w4, uxtw #1
   13064:	add	x1, x9, #0x6, lsl #12
   13068:	ldrh	w1, [x1, #3356]
   1306c:	lsr	w1, w1, #4
   13070:	eor	w1, w1, #0x7f
   13074:	ldrb	w8, [x2, w1, uxtw]
   13078:	add	w4, w21, #0x1
   1307c:	ldr	w1, [sp, #252]
   13080:	add	w21, w1, w4
   13084:	ldr	w2, [sp, #104]
   13088:	cmp	w21, w2
   1308c:	b.ls	130e0 <lzma_mode_is_supported@@XZ_5.0+0x1b50>  // b.plast
   13090:	add	w6, w2, #0x1
   13094:	add	x1, x6, x6, lsl #1
   13098:	lsl	x1, x1, #2
   1309c:	sub	x1, x1, x6
   130a0:	add	x1, x28, x1, lsl #2
   130a4:	add	x1, x1, #0x10, lsl #12
   130a8:	add	x1, x1, #0xef4
   130ac:	mvn	w2, w2
   130b0:	add	w2, w2, w21
   130b4:	add	x6, x2, x6
   130b8:	add	x2, x6, x6, lsl #1
   130bc:	lsl	x2, x2, #2
   130c0:	sub	x2, x2, x6
   130c4:	ldr	x6, [sp, #160]
   130c8:	add	x2, x6, x2, lsl #2
   130cc:	mov	w6, #0x40000000            	// #1073741824
   130d0:	str	w6, [x1], #44
   130d4:	cmp	x1, x2
   130d8:	b.ne	130d0 <lzma_mode_is_supported@@XZ_5.0+0x1b40>  // b.any
   130dc:	str	w21, [sp, #104]
   130e0:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   130e4:	ldr	x6, [x1, #3960]
   130e8:	add	x9, x9, #0x6, lsl #12
   130ec:	ldrh	w1, [x9, #3380]
   130f0:	lsr	w1, w1, #4
   130f4:	ldrb	w2, [x6, w1, sxtw]
   130f8:	add	w2, w2, w8
   130fc:	ldr	w1, [sp, #272]
   13100:	add	w1, w2, w1
   13104:	add	x5, x5, #0x6, lsl #12
   13108:	ldrh	w2, [x5, #3452]
   1310c:	lsr	w2, w2, #4
   13110:	eor	w2, w2, #0x7f
   13114:	ldrb	w2, [x6, w2, uxtw]
   13118:	add	w2, w2, w7
   1311c:	add	w2, w1, w2
   13120:	sub	w20, w20, #0x3
   13124:	ubfiz	x1, x3, #4, #32
   13128:	add	x3, x1, w3, uxtw
   1312c:	add	x3, x20, x3, lsl #4
   13130:	add	x3, x28, x3, lsl #2
   13134:	add	x3, x3, #0xb, lsl #12
   13138:	add	x3, x3, #0xe48
   1313c:	ldr	w1, [x3, #4]
   13140:	add	w1, w24, w1
   13144:	add	w1, w2, w1
   13148:	add	w1, w1, w0
   1314c:	mov	w2, w21
   13150:	add	x0, x2, w21, uxtw #1
   13154:	lsl	x0, x0, #2
   13158:	sub	x0, x0, x2
   1315c:	add	x0, x28, x0, lsl #2
   13160:	add	x0, x0, #0x10, lsl #12
   13164:	ldr	w0, [x0, #3828]
   13168:	cmp	w1, w0
   1316c:	b.cs	12e74 <lzma_mode_is_supported@@XZ_5.0+0x18e4>  // b.hs, b.nlast
   13170:	ubfiz	x21, x21, #1, #32
   13174:	add	x0, x21, x2
   13178:	lsl	x0, x0, #2
   1317c:	sub	x0, x0, x2
   13180:	add	x0, x28, x0, lsl #2
   13184:	add	x0, x0, #0x10, lsl #12
   13188:	str	w1, [x0, #3828]
   1318c:	add	x0, x21, x2
   13190:	lsl	x0, x0, #2
   13194:	sub	x0, x0, x2
   13198:	add	x0, x28, x0, lsl #2
   1319c:	add	x0, x0, #0x10, lsl #12
   131a0:	str	w4, [x0, #3832]
   131a4:	add	x0, x21, x2
   131a8:	lsl	x0, x0, #2
   131ac:	sub	x0, x0, x2
   131b0:	add	x0, x28, x0, lsl #2
   131b4:	add	x0, x0, #0x10, lsl #12
   131b8:	str	wzr, [x0, #3836]
   131bc:	add	x0, x21, x2
   131c0:	lsl	x0, x0, #2
   131c4:	sub	x0, x0, x2
   131c8:	add	x0, x28, x0, lsl #2
   131cc:	add	x0, x0, #0x10, lsl #12
   131d0:	mov	w1, #0x1                   	// #1
   131d4:	strb	w1, [x0, #3816]
   131d8:	add	x0, x21, x2
   131dc:	lsl	x0, x0, #2
   131e0:	sub	x0, x0, x2
   131e4:	add	x0, x28, x0, lsl #2
   131e8:	add	x0, x0, #0x10, lsl #12
   131ec:	strb	w1, [x0, #3817]
   131f0:	add	x0, x21, x2
   131f4:	lsl	x0, x0, #2
   131f8:	sub	x0, x0, x2
   131fc:	add	x0, x28, x0, lsl #2
   13200:	add	x0, x0, #0x10, lsl #12
   13204:	str	w27, [x0, #3820]
   13208:	add	x21, x21, x2
   1320c:	lsl	x0, x21, #2
   13210:	sub	x0, x0, x2
   13214:	add	x0, x28, x0, lsl #2
   13218:	add	x0, x0, #0x10, lsl #12
   1321c:	str	w26, [x0, #3824]
   13220:	b	12e74 <lzma_mode_is_supported@@XZ_5.0+0x18e4>
   13224:	ldr	w26, [sp, #184]
   13228:	ldr	w0, [sp, #120]
   1322c:	cmp	w0, w23
   13230:	b.ls	1326c <lzma_mode_is_supported@@XZ_5.0+0x1cdc>  // b.plast
   13234:	ldr	w0, [x28, #756]
   13238:	cmp	w0, w23
   1323c:	b.cs	1336c <lzma_mode_is_supported@@XZ_5.0+0x1ddc>  // b.hs, b.nlast
   13240:	add	x1, x28, #0x2fc
   13244:	mov	w0, #0x0                   	// #0
   13248:	add	w0, w0, #0x1
   1324c:	ldr	w2, [x1], #8
   13250:	cmp	w2, w23
   13254:	b.cc	13248 <lzma_mode_is_supported@@XZ_5.0+0x1cb8>  // b.lo, b.ul, b.last
   13258:	add	w1, w0, #0x1
   1325c:	str	w1, [sp, #156]
   13260:	add	x0, x28, w0, uxtw #3
   13264:	str	w23, [x0, #756]
   13268:	str	w23, [sp, #120]
   1326c:	ldr	w1, [sp, #120]
   13270:	cmp	w1, w19
   13274:	b.cc	13584 <lzma_mode_is_supported@@XZ_5.0+0x1ff4>  // b.lo, b.ul, b.last
   13278:	adrp	x0, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   1327c:	ldr	x0, [x0, #3960]
   13280:	ldr	w2, [sp, #232]
   13284:	ldrb	w24, [x0, w2, sxtw]
   13288:	ldr	w0, [sp, #200]
   1328c:	add	w0, w24, w0
   13290:	str	w0, [sp, #176]
   13294:	add	w0, w1, w27
   13298:	ldr	w2, [sp, #104]
   1329c:	cmp	w0, w2
   132a0:	b.ls	13374 <lzma_mode_is_supported@@XZ_5.0+0x1de4>  // b.plast
   132a4:	add	w3, w2, #0x1
   132a8:	add	x1, x3, x3, lsl #1
   132ac:	lsl	x1, x1, #2
   132b0:	sub	x1, x1, x3
   132b4:	add	x1, x28, x1, lsl #2
   132b8:	add	x1, x1, #0x10, lsl #12
   132bc:	add	x1, x1, #0xef4
   132c0:	mvn	w2, w2
   132c4:	add	w2, w2, w0
   132c8:	add	x3, x2, x3
   132cc:	add	x2, x3, x3, lsl #1
   132d0:	lsl	x2, x2, #2
   132d4:	sub	x2, x2, x3
   132d8:	ldr	x3, [sp, #160]
   132dc:	add	x2, x3, x2, lsl #2
   132e0:	mov	w3, #0x40000000            	// #1073741824
   132e4:	str	w3, [x1], #44
   132e8:	cmp	x1, x2
   132ec:	b.ne	132e4 <lzma_mode_is_supported@@XZ_5.0+0x1d54>  // b.any
   132f0:	ldr	w1, [x28, #756]
   132f4:	cmp	w1, w19
   132f8:	b.cs	1337c <lzma_mode_is_supported@@XZ_5.0+0x1dec>  // b.hs, b.nlast
   132fc:	add	x1, x28, #0x2fc
   13300:	mov	w24, #0x0                   	// #0
   13304:	add	w24, w24, #0x1
   13308:	ldr	w2, [x1], #8
   1330c:	cmp	w2, w19
   13310:	b.cc	13304 <lzma_mode_is_supported@@XZ_5.0+0x1d74>  // b.lo, b.ul, b.last
   13314:	cmp	w26, #0x6
   13318:	mov	w2, #0x7                   	// #7
   1331c:	mov	w1, #0xa                   	// #10
   13320:	csel	w2, w2, w1, ls  // ls = plast
   13324:	str	w2, [sp, #184]
   13328:	sub	w1, w2, #0x3
   1332c:	cmp	w2, #0x9
   13330:	add	w2, w19, #0x1
   13334:	str	w2, [sp, #120]
   13338:	str	w0, [sp, #104]
   1333c:	ldr	w2, [sp, #128]
   13340:	ubfiz	x0, x2, #4, #32
   13344:	add	x0, x0, w2, uxtw
   13348:	lsl	x0, x0, #4
   1334c:	str	x0, [sp, #192]
   13350:	mov	w0, #0x4                   	// #4
   13354:	csel	w0, w1, w0, ls  // ls = plast
   13358:	str	x0, [sp, #200]
   1335c:	add	x0, x28, x0, lsl #1
   13360:	str	x0, [sp, #144]
   13364:	str	x25, [sp, #128]
   13368:	b	13428 <lzma_mode_is_supported@@XZ_5.0+0x1e98>
   1336c:	mov	w0, #0x0                   	// #0
   13370:	b	13258 <lzma_mode_is_supported@@XZ_5.0+0x1cc8>
   13374:	ldr	w0, [sp, #104]
   13378:	b	132f0 <lzma_mode_is_supported@@XZ_5.0+0x1d60>
   1337c:	mov	w24, #0x0                   	// #0
   13380:	b	13314 <lzma_mode_is_supported@@XZ_5.0+0x1d84>
   13384:	mov	w1, #0x7ffff               	// #524287
   13388:	cmp	w22, w1
   1338c:	b.ls	133dc <lzma_mode_is_supported@@XZ_5.0+0x1e4c>  // b.plast
   13390:	tbz	w22, #31, 133f4 <lzma_mode_is_supported@@XZ_5.0+0x1e64>
   13394:	lsr	w3, w22, #30
   13398:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   1339c:	ldr	x1, [x1, #4008]
   133a0:	ldrb	w1, [x1, w3, uxtw]
   133a4:	add	w1, w1, #0x3c
   133a8:	ubfiz	x3, x22, #2, #4
   133ac:	add	x3, x3, #0x10, lsl #12
   133b0:	add	x3, x3, #0xe90
   133b4:	add	x3, x28, x3
   133b8:	mov	w1, w1
   133bc:	ubfiz	x0, x0, #6, #32
   133c0:	add	x1, x0, x1
   133c4:	add	x1, x1, #0x4, lsl #12
   133c8:	add	x1, x1, #0xa4
   133cc:	ldr	w3, [x3, #8]
   133d0:	ldr	w1, [x28, x1, lsl #2]
   133d4:	add	w1, w3, w1
   133d8:	b	1345c <lzma_mode_is_supported@@XZ_5.0+0x1ecc>
   133dc:	lsr	w3, w22, #6
   133e0:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   133e4:	ldr	x1, [x1, #4008]
   133e8:	ldrb	w1, [x1, w3, uxtw]
   133ec:	add	w1, w1, #0xc
   133f0:	b	133a8 <lzma_mode_is_supported@@XZ_5.0+0x1e18>
   133f4:	lsr	w3, w22, #18
   133f8:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   133fc:	ldr	x1, [x1, #4008]
   13400:	ldrb	w1, [x1, w3, uxtw]
   13404:	add	w1, w1, #0x24
   13408:	b	133a8 <lzma_mode_is_supported@@XZ_5.0+0x1e18>
   1340c:	ldr	w0, [x2, #756]
   13410:	cmp	w19, w0
   13414:	b.eq	13504 <lzma_mode_is_supported@@XZ_5.0+0x1f74>  // b.none
   13418:	add	w19, w19, #0x1
   1341c:	ldr	w0, [sp, #120]
   13420:	add	w0, w0, #0x1
   13424:	str	w0, [sp, #120]
   13428:	add	x2, x28, w24, uxtw #3
   1342c:	ldr	w22, [x2, #760]
   13430:	cmp	w19, #0x5
   13434:	mov	w0, #0x5                   	// #5
   13438:	csel	w0, w19, w0, ls  // ls = plast
   1343c:	sub	w0, w0, #0x2
   13440:	cmp	w22, #0x7f
   13444:	b.hi	13384 <lzma_mode_is_supported@@XZ_5.0+0x1df4>  // b.pmore
   13448:	ubfiz	x0, x0, #7, #32
   1344c:	add	x0, x0, w22, uxtw
   13450:	add	x0, x0, #0x4, lsl #12
   13454:	add	x0, x0, #0x1a4
   13458:	ldr	w1, [x28, x0, lsl #2]
   1345c:	sub	w0, w19, #0x2
   13460:	ldr	x3, [sp, #192]
   13464:	add	x0, x3, x0
   13468:	add	x0, x28, x0, lsl #2
   1346c:	add	x0, x0, #0x7, lsl #12
   13470:	add	x0, x0, #0x600
   13474:	ldr	w26, [x0, #4]
   13478:	ldr	w0, [sp, #176]
   1347c:	add	w26, w0, w26
   13480:	add	w3, w26, w1
   13484:	add	w0, w19, w27
   13488:	add	w4, w19, w27
   1348c:	add	x1, x4, x4, lsl #1
   13490:	lsl	x1, x1, #2
   13494:	sub	x1, x1, x4
   13498:	add	x1, x28, x1, lsl #2
   1349c:	add	x1, x1, #0x10, lsl #12
   134a0:	ldr	w1, [x1, #3828]
   134a4:	cmp	w3, w1
   134a8:	b.cs	1340c <lzma_mode_is_supported@@XZ_5.0+0x1e7c>  // b.hs, b.nlast
   134ac:	ubfiz	x0, x0, #1, #32
   134b0:	add	x1, x0, x4
   134b4:	lsl	x1, x1, #2
   134b8:	sub	x1, x1, x4
   134bc:	add	x1, x28, x1, lsl #2
   134c0:	add	x1, x1, #0x10, lsl #12
   134c4:	str	w3, [x1, #3828]
   134c8:	add	x1, x0, x4
   134cc:	lsl	x1, x1, #2
   134d0:	sub	x1, x1, x4
   134d4:	add	x1, x28, x1, lsl #2
   134d8:	add	x1, x1, #0x10, lsl #12
   134dc:	str	w27, [x1, #3832]
   134e0:	add	x1, x0, x4
   134e4:	lsl	x1, x1, #2
   134e8:	sub	x1, x1, x4
   134ec:	add	x1, x28, x1, lsl #2
   134f0:	add	x1, x1, #0x10, lsl #12
   134f4:	add	w5, w22, #0x4
   134f8:	str	w5, [x1, #3836]
   134fc:	strb	wzr, [x1, #3816]
   13500:	b	1340c <lzma_mode_is_supported@@XZ_5.0+0x1e7c>
   13504:	mov	w2, w22
   13508:	mvn	x2, x2
   1350c:	ldr	x0, [sp, #128]
   13510:	add	x2, x0, x2
   13514:	ldr	w0, [sp, #140]
   13518:	add	w1, w0, #0x1
   1351c:	add	w1, w1, w19
   13520:	ldr	w0, [sp, #136]
   13524:	cmp	w1, w0
   13528:	csel	w1, w1, w0, ls  // ls = plast
   1352c:	ldr	w0, [sp, #120]
   13530:	cmp	w1, w0
   13534:	b.ls	13574 <lzma_mode_is_supported@@XZ_5.0+0x1fe4>  // b.plast
   13538:	mov	w0, w0
   1353c:	mov	w23, w0
   13540:	ldr	x4, [sp, #128]
   13544:	ldrb	w5, [x4, x0]
   13548:	ldrb	w4, [x2, x0]
   1354c:	cmp	w5, w4
   13550:	b.ne	13564 <lzma_mode_is_supported@@XZ_5.0+0x1fd4>  // b.any
   13554:	add	w23, w0, #0x1
   13558:	add	x0, x0, #0x1
   1355c:	cmp	w1, w0
   13560:	b.hi	1353c <lzma_mode_is_supported@@XZ_5.0+0x1fac>  // b.pmore
   13564:	sub	w23, w23, w19
   13568:	sub	w20, w23, #0x1
   1356c:	cmp	w20, #0x1
   13570:	b.hi	136e4 <lzma_mode_is_supported@@XZ_5.0+0x2154>  // b.pmore
   13574:	add	w24, w24, #0x1
   13578:	ldr	w0, [sp, #156]
   1357c:	cmp	w24, w0
   13580:	b.ne	13418 <lzma_mode_is_supported@@XZ_5.0+0x1e88>  // b.any
   13584:	ldr	w0, [sp, #104]
   13588:	ldr	w1, [sp, #124]
   1358c:	cmp	w0, w1
   13590:	b.ls	13940 <lzma_mode_is_supported@@XZ_5.0+0x23b0>  // b.plast
   13594:	ldr	w27, [sp, #124]
   13598:	add	x2, x28, #0x2f4
   1359c:	add	x1, x28, #0xb84
   135a0:	ldr	x19, [sp, #168]
   135a4:	mov	x0, x19
   135a8:	bl	e80c <lzma_mf_is_supported@@XZ_5.0+0x4c0>
   135ac:	mov	w1, w0
   135b0:	str	w0, [sp, #120]
   135b4:	str	w0, [x28, #2952]
   135b8:	mov	x0, x19
   135bc:	ldr	w2, [x19, #96]
   135c0:	str	w2, [sp, #140]
   135c4:	cmp	w1, w2
   135c8:	b.cs	13944 <lzma_mode_is_supported@@XZ_5.0+0x23b4>  // b.hs, b.nlast
   135cc:	ldr	x19, [x19]
   135d0:	ldr	w1, [x0, #24]
   135d4:	mov	w2, w1
   135d8:	str	x2, [sp, #184]
   135dc:	sub	x3, x2, #0x1
   135e0:	add	x25, x19, x3
   135e4:	ldr	w2, [sp, #180]
   135e8:	add	w2, w2, w27
   135ec:	str	w2, [sp, #152]
   135f0:	ldr	w0, [x0, #36]
   135f4:	add	w0, w0, #0x1
   135f8:	sub	w0, w0, w1
   135fc:	mov	w1, #0xfff                 	// #4095
   13600:	sub	w1, w1, w27
   13604:	cmp	w0, w1
   13608:	csel	w0, w0, w1, ls  // ls = plast
   1360c:	str	w0, [sp, #136]
   13610:	ldr	w0, [x28, #2948]
   13614:	str	w0, [sp, #156]
   13618:	mov	w2, w27
   1361c:	ubfiz	x0, x27, #1, #32
   13620:	add	x1, x0, x2
   13624:	lsl	x1, x1, #2
   13628:	sub	x1, x1, x2
   1362c:	add	x1, x28, x1, lsl #2
   13630:	add	x1, x1, #0x10, lsl #12
   13634:	ldr	w1, [x1, #3832]
   13638:	add	x0, x0, x2
   1363c:	lsl	x0, x0, #2
   13640:	sub	x0, x0, x2
   13644:	add	x0, x28, x0, lsl #2
   13648:	add	x0, x0, #0x10, lsl #12
   1364c:	ldrb	w0, [x0, #3816]
   13650:	cbz	w0, 12550 <lzma_mode_is_supported@@XZ_5.0+0xfc0>
   13654:	sub	w2, w1, #0x1
   13658:	mov	w4, w27
   1365c:	add	x0, x4, w27, uxtw #1
   13660:	lsl	x0, x0, #2
   13664:	sub	x0, x0, x4
   13668:	add	x0, x28, x0, lsl #2
   1366c:	add	x0, x0, #0x10, lsl #12
   13670:	ldrb	w5, [x0, #3817]
   13674:	cbz	w5, 12520 <lzma_mode_is_supported@@XZ_5.0+0xf90>
   13678:	mov	x6, x4
   1367c:	ubfiz	x0, x27, #1, #32
   13680:	add	x4, x0, x4
   13684:	lsl	x4, x4, #2
   13688:	sub	x4, x4, x6
   1368c:	add	x4, x28, x4, lsl #2
   13690:	add	x4, x4, #0x10, lsl #12
   13694:	ldr	w7, [x4, #3820]
   13698:	add	x4, x7, x7, lsl #1
   1369c:	lsl	x4, x4, #2
   136a0:	sub	x4, x4, x7
   136a4:	add	x4, x28, x4, lsl #2
   136a8:	add	x4, x4, #0x10, lsl #12
   136ac:	ldr	w4, [x4, #3812]
   136b0:	add	x0, x0, x6
   136b4:	lsl	x0, x0, #2
   136b8:	sub	x0, x0, x6
   136bc:	add	x0, x28, x0, lsl #2
   136c0:	add	x0, x0, #0x10, lsl #12
   136c4:	ldr	w0, [x0, #3824]
   136c8:	cmp	w0, #0x3
   136cc:	b.hi	12510 <lzma_mode_is_supported@@XZ_5.0+0xf80>  // b.pmore
   136d0:	cmp	w4, #0x6
   136d4:	b.ls	13b1c <lzma_mode_is_supported@@XZ_5.0+0x258c>  // b.plast
   136d8:	mov	w4, #0xb                   	// #11
   136dc:	sub	w4, w4, #0x6
   136e0:	b	13b24 <lzma_mode_is_supported@@XZ_5.0+0x2594>
   136e4:	ldr	w0, [sp, #152]
   136e8:	add	w1, w19, w0
   136ec:	ldr	w0, [sp, #116]
   136f0:	and	w21, w0, w1
   136f4:	adrp	x4, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   136f8:	ldr	x25, [x4, #3960]
   136fc:	str	w0, [sp, #116]
   13700:	and	w4, w0, w1
   13704:	ldr	x5, [sp, #184]
   13708:	ubfiz	x0, x5, #4, #4
   1370c:	add	x0, x0, x4
   13710:	add	x0, x0, #0x3, lsl #12
   13714:	add	x0, x0, #0x5c8
   13718:	add	x0, x28, x0, lsl #1
   1371c:	ldrh	w0, [x0, #12]
   13720:	lsr	w0, w0, #4
   13724:	ldrb	w26, [x25, w0, sxtw]
   13728:	add	w26, w26, w3
   1372c:	sub	w0, w19, #0x1
   13730:	ldr	x6, [sp, #128]
   13734:	ldrb	w5, [x6, w19, uxtw]
   13738:	ldrb	w4, [x2, w19, uxtw]
   1373c:	mov	w3, #0x1                   	// #1
   13740:	ldrb	w2, [x6, w0, uxtw]
   13744:	mov	x0, x28
   13748:	bl	119e8 <lzma_mode_is_supported@@XZ_5.0+0x458>
   1374c:	add	w21, w21, #0x1
   13750:	ldr	w1, [sp, #116]
   13754:	and	w3, w1, w21
   13758:	and	w21, w1, w21
   1375c:	ldr	x1, [sp, #200]
   13760:	add	x21, x21, x1, lsl #4
   13764:	add	x21, x28, x21, lsl #1
   13768:	add	x1, x21, #0x6, lsl #12
   1376c:	ldrh	w1, [x1, #2972]
   13770:	lsr	w1, w1, #4
   13774:	eor	w1, w1, #0x7f
   13778:	ldrb	w7, [x25, w1, uxtw]
   1377c:	ldr	x1, [sp, #144]
   13780:	add	x1, x1, #0x6, lsl #12
   13784:	ldrh	w1, [x1, #3356]
   13788:	lsr	w1, w1, #4
   1378c:	eor	w1, w1, #0x7f
   13790:	ldrb	w6, [x25, w1, uxtw]
   13794:	ldr	w1, [sp, #120]
   13798:	add	w2, w27, w1
   1379c:	add	w20, w20, w2
   137a0:	ldr	w4, [sp, #104]
   137a4:	cmp	w20, w4
   137a8:	b.ls	137fc <lzma_mode_is_supported@@XZ_5.0+0x226c>  // b.plast
   137ac:	add	w5, w4, #0x1
   137b0:	add	x1, x5, x5, lsl #1
   137b4:	lsl	x1, x1, #2
   137b8:	sub	x1, x1, x5
   137bc:	add	x1, x28, x1, lsl #2
   137c0:	add	x1, x1, #0x10, lsl #12
   137c4:	add	x1, x1, #0xef4
   137c8:	mvn	w4, w4
   137cc:	add	w4, w4, w20
   137d0:	add	x5, x4, x5
   137d4:	add	x4, x5, x5, lsl #1
   137d8:	lsl	x4, x4, #2
   137dc:	sub	x4, x4, x5
   137e0:	ldr	x5, [sp, #160]
   137e4:	add	x4, x5, x4, lsl #2
   137e8:	mov	w5, #0x40000000            	// #1073741824
   137ec:	str	w5, [x1], #44
   137f0:	cmp	x1, x4
   137f4:	b.ne	137ec <lzma_mode_is_supported@@XZ_5.0+0x225c>  // b.any
   137f8:	str	w20, [sp, #104]
   137fc:	adrp	x1, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   13800:	ldr	x4, [x1, #3960]
   13804:	add	x21, x21, #0x6, lsl #12
   13808:	ldrh	w1, [x21, #3452]
   1380c:	lsr	w1, w1, #4
   13810:	eor	w1, w1, #0x7f
   13814:	ldrb	w1, [x4, w1, uxtw]
   13818:	add	w1, w1, w7
   1381c:	ldr	x5, [sp, #144]
   13820:	add	x5, x5, #0x6, lsl #12
   13824:	ldrh	w5, [x5, #3380]
   13828:	lsr	w5, w5, #4
   1382c:	ldrb	w4, [x4, w5, sxtw]
   13830:	add	w6, w4, w6
   13834:	add	w1, w1, w6
   13838:	add	w26, w1, w26
   1383c:	sub	w1, w23, #0x3
   13840:	ubfiz	x23, x3, #4, #32
   13844:	add	x23, x23, w3, uxtw
   13848:	add	x23, x1, x23, lsl #4
   1384c:	add	x23, x28, x23, lsl #2
   13850:	add	x23, x23, #0xb, lsl #12
   13854:	add	x23, x23, #0xe48
   13858:	ldr	w1, [x23, #4]
   1385c:	add	w0, w0, w1
   13860:	add	w26, w26, w0
   13864:	mov	w1, w20
   13868:	add	x0, x1, w20, uxtw #1
   1386c:	lsl	x0, x0, #2
   13870:	sub	x0, x0, x1
   13874:	add	x0, x28, x0, lsl #2
   13878:	add	x0, x0, #0x10, lsl #12
   1387c:	ldr	w0, [x0, #3828]
   13880:	cmp	w26, w0
   13884:	b.cs	13574 <lzma_mode_is_supported@@XZ_5.0+0x1fe4>  // b.hs, b.nlast
   13888:	ubfiz	x20, x20, #1, #32
   1388c:	add	x0, x20, x1
   13890:	lsl	x0, x0, #2
   13894:	sub	x0, x0, x1
   13898:	add	x0, x28, x0, lsl #2
   1389c:	add	x0, x0, #0x10, lsl #12
   138a0:	str	w26, [x0, #3828]
   138a4:	add	x0, x20, x1
   138a8:	lsl	x0, x0, #2
   138ac:	sub	x0, x0, x1
   138b0:	add	x0, x28, x0, lsl #2
   138b4:	add	x0, x0, #0x10, lsl #12
   138b8:	str	w2, [x0, #3832]
   138bc:	add	x0, x20, x1
   138c0:	lsl	x0, x0, #2
   138c4:	sub	x0, x0, x1
   138c8:	add	x0, x28, x0, lsl #2
   138cc:	add	x0, x0, #0x10, lsl #12
   138d0:	str	wzr, [x0, #3836]
   138d4:	add	x0, x20, x1
   138d8:	lsl	x0, x0, #2
   138dc:	sub	x0, x0, x1
   138e0:	add	x0, x28, x0, lsl #2
   138e4:	add	x0, x0, #0x10, lsl #12
   138e8:	mov	w2, #0x1                   	// #1
   138ec:	strb	w2, [x0, #3816]
   138f0:	add	x0, x20, x1
   138f4:	lsl	x0, x0, #2
   138f8:	sub	x0, x0, x1
   138fc:	add	x0, x28, x0, lsl #2
   13900:	add	x0, x0, #0x10, lsl #12
   13904:	strb	w2, [x0, #3817]
   13908:	add	x0, x20, x1
   1390c:	lsl	x0, x0, #2
   13910:	sub	x0, x0, x1
   13914:	add	x0, x28, x0, lsl #2
   13918:	add	x0, x0, #0x10, lsl #12
   1391c:	str	w27, [x0, #3820]
   13920:	add	x0, x20, x1
   13924:	lsl	x0, x0, #2
   13928:	sub	x0, x0, x1
   1392c:	add	x0, x28, x0, lsl #2
   13930:	add	x0, x0, #0x10, lsl #12
   13934:	add	w22, w22, #0x4
   13938:	str	w22, [x0, #3824]
   1393c:	b	13574 <lzma_mode_is_supported@@XZ_5.0+0x1fe4>
   13940:	ldr	w27, [sp, #124]
   13944:	add	x0, x28, #0x10, lsl #12
   13948:	str	w27, [x0, #3804]
   1394c:	mov	w3, w27
   13950:	ubfiz	x0, x27, #1, #32
   13954:	add	x1, x0, x3
   13958:	lsl	x1, x1, #2
   1395c:	sub	x1, x1, x3
   13960:	add	x1, x28, x1, lsl #2
   13964:	add	x1, x1, #0x10, lsl #12
   13968:	ldr	w2, [x1, #3832]
   1396c:	ldr	w5, [x1, #3836]
   13970:	mov	w3, #0xffffffff            	// #-1
   13974:	b	139dc <lzma_mode_is_supported@@XZ_5.0+0x244c>
   13978:	mov	w4, w2
   1397c:	ubfiz	x0, x2, #1, #32
   13980:	add	x1, x0, x4
   13984:	lsl	x1, x1, #2
   13988:	sub	x1, x1, x4
   1398c:	add	x1, x28, x1, lsl #2
   13990:	add	x1, x1, #0x10, lsl #12
   13994:	ldr	w7, [x1, #3836]
   13998:	add	x1, x0, x4
   1399c:	lsl	x1, x1, #2
   139a0:	sub	x1, x1, x4
   139a4:	add	x1, x28, x1, lsl #2
   139a8:	add	x1, x1, #0x10, lsl #12
   139ac:	ldr	w6, [x1, #3832]
   139b0:	add	x1, x0, x4
   139b4:	lsl	x1, x1, #2
   139b8:	sub	x1, x1, x4
   139bc:	add	x1, x28, x1, lsl #2
   139c0:	add	x1, x1, #0x10, lsl #12
   139c4:	str	w5, [x1, #3836]
   139c8:	str	w27, [x1, #3832]
   139cc:	mov	w27, w2
   139d0:	cbz	w2, 13ae8 <lzma_mode_is_supported@@XZ_5.0+0x2558>
   139d4:	mov	w5, w7
   139d8:	mov	w2, w6
   139dc:	mov	w1, w27
   139e0:	add	x0, x1, w27, uxtw #1
   139e4:	lsl	x0, x0, #2
   139e8:	sub	x0, x0, x1
   139ec:	add	x0, x28, x0, lsl #2
   139f0:	add	x0, x0, #0x10, lsl #12
   139f4:	ldrb	w0, [x0, #3816]
   139f8:	cbz	w0, 13978 <lzma_mode_is_supported@@XZ_5.0+0x23e8>
   139fc:	mov	w4, w2
   13a00:	ubfiz	x0, x2, #1, #32
   13a04:	add	x1, x0, x4
   13a08:	lsl	x1, x1, #2
   13a0c:	sub	x1, x1, x4
   13a10:	add	x1, x28, x1, lsl #2
   13a14:	add	x1, x1, #0x10, lsl #12
   13a18:	str	w3, [x1, #3836]
   13a1c:	add	x1, x0, x4
   13a20:	lsl	x1, x1, #2
   13a24:	sub	x1, x1, x4
   13a28:	add	x1, x28, x1, lsl #2
   13a2c:	add	x1, x1, #0x10, lsl #12
   13a30:	strb	wzr, [x1, #3816]
   13a34:	sub	w1, w2, #0x1
   13a38:	add	x0, x0, x4
   13a3c:	lsl	x0, x0, #2
   13a40:	sub	x0, x0, x4
   13a44:	add	x0, x28, x0, lsl #2
   13a48:	add	x0, x0, #0x10, lsl #12
   13a4c:	str	w1, [x0, #3832]
   13a50:	mov	w4, w27
   13a54:	add	x0, x4, w27, uxtw #1
   13a58:	lsl	x0, x0, #2
   13a5c:	sub	x0, x0, x4
   13a60:	add	x0, x28, x0, lsl #2
   13a64:	add	x0, x0, #0x10, lsl #12
   13a68:	ldrb	w0, [x0, #3817]
   13a6c:	cbz	w0, 13978 <lzma_mode_is_supported@@XZ_5.0+0x23e8>
   13a70:	mov	w6, w1
   13a74:	ubfiz	x0, x1, #1, #32
   13a78:	add	x1, x0, x6
   13a7c:	lsl	x1, x1, #2
   13a80:	sub	x1, x1, x6
   13a84:	add	x1, x28, x1, lsl #2
   13a88:	add	x1, x1, #0x10, lsl #12
   13a8c:	strb	wzr, [x1, #3816]
   13a90:	mov	x7, x4
   13a94:	ubfiz	x1, x27, #1, #32
   13a98:	add	x4, x1, x4
   13a9c:	lsl	x4, x4, #2
   13aa0:	sub	x4, x4, x7
   13aa4:	add	x4, x28, x4, lsl #2
   13aa8:	add	x4, x4, #0x10, lsl #12
   13aac:	ldr	w8, [x4, #3820]
   13ab0:	add	x4, x0, x6
   13ab4:	lsl	x4, x4, #2
   13ab8:	sub	x4, x4, x6
   13abc:	add	x4, x28, x4, lsl #2
   13ac0:	add	x4, x4, #0x10, lsl #12
   13ac4:	str	w8, [x4, #3832]
   13ac8:	add	x1, x1, x7
   13acc:	lsl	x1, x1, #2
   13ad0:	sub	x1, x1, x7
   13ad4:	add	x1, x28, x1, lsl #2
   13ad8:	add	x1, x1, #0x10, lsl #12
   13adc:	ldr	w1, [x1, #3824]
   13ae0:	str	w1, [x4, #3836]
   13ae4:	b	13978 <lzma_mode_is_supported@@XZ_5.0+0x23e8>
   13ae8:	add	x0, x28, #0x10, lsl #12
   13aec:	ldr	w1, [x0, #3832]
   13af0:	str	w1, [x0, #3808]
   13af4:	ldr	x2, [sp, #264]
   13af8:	str	w1, [x2]
   13afc:	ldr	w0, [x0, #3836]
   13b00:	ldr	x1, [sp, #256]
   13b04:	str	w0, [x1]
   13b08:	ldp	x19, x20, [sp, #16]
   13b0c:	ldp	x21, x22, [sp, #32]
   13b10:	ldp	x23, x24, [sp, #48]
   13b14:	ldp	x25, x26, [sp, #64]
   13b18:	b	11b44 <lzma_mode_is_supported@@XZ_5.0+0x5b4>
   13b1c:	mov	w4, #0x8                   	// #8
   13b20:	sub	w4, w4, #0x3
   13b24:	cmp	w1, w27
   13b28:	b.eq	126b0 <lzma_mode_is_supported@@XZ_5.0+0x1120>  // b.none
   13b2c:	cbz	w5, 12704 <lzma_mode_is_supported@@XZ_5.0+0x1174>
   13b30:	mov	w2, w27
   13b34:	ubfiz	x0, x27, #1, #32
   13b38:	add	x1, x0, x2
   13b3c:	lsl	x1, x1, #2
   13b40:	sub	x1, x1, x2
   13b44:	add	x1, x28, x1, lsl #2
   13b48:	add	x1, x1, #0x10, lsl #12
   13b4c:	ldr	w1, [x1, #3820]
   13b50:	add	x0, x0, x2
   13b54:	lsl	x0, x0, #2
   13b58:	sub	x0, x0, x2
   13b5c:	add	x0, x28, x0, lsl #2
   13b60:	add	x0, x0, #0x10, lsl #12
   13b64:	ldr	w2, [x0, #3824]
   13b68:	cmp	w4, #0x7
   13b6c:	mov	w4, #0x8                   	// #8
   13b70:	mov	w0, #0xb                   	// #11
   13b74:	csel	w26, w4, w0, cc  // cc = lo, ul, last
   13b78:	cmp	w2, #0x3
   13b7c:	b.hi	1271c <lzma_mode_is_supported@@XZ_5.0+0x118c>  // b.pmore
   13b80:	b	125ac <lzma_mode_is_supported@@XZ_5.0+0x101c>
   13b84:	mov	w4, #0x7                   	// #7
   13b88:	b	13b20 <lzma_mode_is_supported@@XZ_5.0+0x2590>
   13b8c:	ldp	x19, x20, [sp, #16]
   13b90:	ldp	x21, x22, [sp, #32]
   13b94:	ldp	x23, x24, [sp, #48]
   13b98:	ldp	x25, x26, [sp, #64]
   13b9c:	b	11b44 <lzma_mode_is_supported@@XZ_5.0+0x5b4>
   13ba0:	ldr	x0, [sp, #168]
   13ba4:	ldr	w19, [x0, #96]
   13ba8:	ldr	w22, [x28, #2952]
   13bac:	ldr	w0, [x28, #2948]
   13bb0:	str	w0, [sp, #300]
   13bb4:	ldr	x0, [sp, #168]
   13bb8:	ldr	w11, [x0, #24]
   13bbc:	ldr	w4, [x0, #36]
   13bc0:	add	w4, w4, #0x1
   13bc4:	sub	w4, w4, w11
   13bc8:	cmp	w4, #0x110
   13bcc:	b.hi	11e60 <lzma_mode_is_supported@@XZ_5.0+0x8d0>  // b.pmore
   13bd0:	cmp	w4, #0x1
   13bd4:	b.ls	11e3c <lzma_mode_is_supported@@XZ_5.0+0x8ac>  // b.plast
   13bd8:	stp	x23, x24, [sp, #48]
   13bdc:	b	11e68 <lzma_mode_is_supported@@XZ_5.0+0x8d8>
   13be0:	cmp	w1, w27
   13be4:	b.eq	126ac <lzma_mode_is_supported@@XZ_5.0+0x111c>  // b.none
   13be8:	mov	w1, w2
   13bec:	mov	w4, #0x0                   	// #0
   13bf0:	b	12578 <lzma_mode_is_supported@@XZ_5.0+0xfe8>
   13bf4:	ldp	x19, x20, [sp, #16]
   13bf8:	ldp	x21, x22, [sp, #32]
   13bfc:	ldp	x23, x24, [sp, #48]
   13c00:	b	11b44 <lzma_mode_is_supported@@XZ_5.0+0x5b4>
   13c04:	ldp	x19, x20, [sp, #16]
   13c08:	ldp	x21, x22, [sp, #32]
   13c0c:	ldp	x23, x24, [sp, #48]
   13c10:	b	11b44 <lzma_mode_is_supported@@XZ_5.0+0x5b4>
   13c14:	str	x1, [x0, #28312]
   13c18:	ret
   13c1c:	mov	x5, x0
   13c20:	mov	x7, x1
   13c24:	add	x2, x0, #0x4, lsl #12
   13c28:	ldr	w1, [x1, #28]
   13c2c:	mov	w0, #0x1                   	// #1
   13c30:	lsl	w1, w0, w1
   13c34:	sub	w1, w1, #0x1
   13c38:	str	w1, [x2, #11916]
   13c3c:	ldr	w1, [x7, #20]
   13c40:	ldr	w2, [x7, #24]
   13c44:	add	w1, w1, w2
   13c48:	lsl	w0, w0, w1
   13c4c:	cbz	w0, 13c84 <lzma_mode_is_supported@@XZ_5.0+0x26f4>
   13c50:	add	x1, x5, #0x600
   13c54:	sub	w0, w0, #0x1
   13c58:	add	x0, x0, x0, lsl #1
   13c5c:	add	x3, x5, #0xc00
   13c60:	add	x3, x3, x0, lsl #9
   13c64:	mov	w2, #0x400                 	// #1024
   13c68:	sub	x0, x1, #0x600
   13c6c:	strh	w2, [x0], #2
   13c70:	cmp	x0, x1
   13c74:	b.ne	13c6c <lzma_mode_is_supported@@XZ_5.0+0x26dc>  // b.any
   13c78:	add	x1, x1, #0x600
   13c7c:	cmp	x1, x3
   13c80:	b.ne	13c68 <lzma_mode_is_supported@@XZ_5.0+0x26d8>  // b.any
   13c84:	ldr	w0, [x7, #20]
   13c88:	add	x1, x5, #0x4, lsl #12
   13c8c:	str	w0, [x1, #11920]
   13c90:	ldr	w2, [x7, #24]
   13c94:	mov	w0, #0x1                   	// #1
   13c98:	lsl	w2, w0, w2
   13c9c:	sub	w2, w2, #0x1
   13ca0:	str	w2, [x1, #11924]
   13ca4:	str	wzr, [x1, #11896]
   13ca8:	str	wzr, [x1, #11900]
   13cac:	str	wzr, [x1, #11904]
   13cb0:	str	wzr, [x1, #11908]
   13cb4:	str	wzr, [x1, #11912]
   13cb8:	ldr	w2, [x7, #28]
   13cbc:	lsl	w0, w0, w2
   13cc0:	sub	w0, w0, #0x1
   13cc4:	str	w0, [x1, #11916]
   13cc8:	mov	w2, #0xffffffff            	// #-1
   13ccc:	str	w2, [x1, #11884]
   13cd0:	str	wzr, [x1, #11888]
   13cd4:	mov	w2, #0x5                   	// #5
   13cd8:	str	w2, [x1, #11892]
   13cdc:	add	x3, x5, #0x6, lsl #12
   13ce0:	add	x3, x3, #0x180
   13ce4:	add	x2, x5, #0x6, lsl #12
   13ce8:	add	x2, x2, #0x2
   13cec:	add	x2, x2, w0, uxtw #1
   13cf0:	add	x6, x5, #0x6, lsl #12
   13cf4:	add	x6, x6, #0x198
   13cf8:	ubfiz	x0, x0, #1, #32
   13cfc:	eor	x4, x0, #0xfffffffffffffffe
   13d00:	mov	w1, #0x400                 	// #1024
   13d04:	b	13d28 <lzma_mode_is_supported@@XZ_5.0+0x2798>
   13d08:	strh	w1, [x3]
   13d0c:	strh	w1, [x3, #24]
   13d10:	strh	w1, [x3, #48]
   13d14:	strh	w1, [x3, #72]
   13d18:	add	x3, x3, #0x2
   13d1c:	add	x2, x2, #0x20
   13d20:	cmp	x6, x3
   13d24:	b.eq	13d44 <lzma_mode_is_supported@@XZ_5.0+0x27b4>  // b.none
   13d28:	add	x0, x4, x2
   13d2c:	strh	w1, [x0]
   13d30:	strh	w1, [x0, #480]
   13d34:	add	x0, x0, #0x2
   13d38:	cmp	x2, x0
   13d3c:	b.ne	13d2c <lzma_mode_is_supported@@XZ_5.0+0x279c>  // b.any
   13d40:	b	13d08 <lzma_mode_is_supported@@XZ_5.0+0x2778>
   13d44:	add	x1, x5, #0x6, lsl #12
   13d48:	add	x1, x1, #0x3e0
   13d4c:	add	x3, x5, #0x6, lsl #12
   13d50:	add	x3, x3, #0x5e0
   13d54:	mov	w2, #0x400                 	// #1024
   13d58:	sub	x0, x1, #0x80
   13d5c:	strh	w2, [x0], #2
   13d60:	cmp	x0, x1
   13d64:	b.ne	13d5c <lzma_mode_is_supported@@XZ_5.0+0x27cc>  // b.any
   13d68:	add	x1, x1, #0x80
   13d6c:	cmp	x1, x3
   13d70:	b.ne	13d58 <lzma_mode_is_supported@@XZ_5.0+0x27c8>  // b.any
   13d74:	add	x0, x5, #0x6, lsl #12
   13d78:	add	x0, x0, #0x560
   13d7c:	add	x2, x5, #0x6, lsl #12
   13d80:	add	x2, x2, #0x644
   13d84:	mov	w1, #0x400                 	// #1024
   13d88:	strh	w1, [x0], #2
   13d8c:	cmp	x0, x2
   13d90:	b.ne	13d88 <lzma_mode_is_supported@@XZ_5.0+0x27f8>  // b.any
   13d94:	add	x0, x5, #0x6, lsl #12
   13d98:	add	x0, x0, #0x644
   13d9c:	add	x2, x5, #0x6, lsl #12
   13da0:	add	x2, x2, #0x664
   13da4:	mov	w1, #0x400                 	// #1024
   13da8:	strh	w1, [x0], #2
   13dac:	cmp	x2, x0
   13db0:	b.ne	13da8 <lzma_mode_is_supported@@XZ_5.0+0x2818>  // b.any
   13db4:	ldr	w0, [x7, #28]
   13db8:	mov	w1, #0x1                   	// #1
   13dbc:	lsl	w1, w1, w0
   13dc0:	add	x0, x5, #0x6, lsl #12
   13dc4:	mov	w2, #0x400                 	// #1024
   13dc8:	strh	w2, [x0, #1636]
   13dcc:	strh	w2, [x0, #1638]
   13dd0:	strh	w2, [x0, #2664]
   13dd4:	strh	w2, [x0, #2666]
   13dd8:	cbz	w1, 13e84 <lzma_mode_is_supported@@XZ_5.0+0x28f4>
   13ddc:	add	x0, x5, #0x6, lsl #12
   13de0:	add	x0, x0, #0x668
   13de4:	sub	w1, w1, #0x1
   13de8:	add	x2, x5, #0x6, lsl #12
   13dec:	add	x2, x2, #0x678
   13df0:	add	x2, x2, x1, lsl #4
   13df4:	mov	w1, #0x400                 	// #1024
   13df8:	strh	w1, [x0]
   13dfc:	strh	w1, [x0, #2]
   13e00:	strh	w1, [x0, #4]
   13e04:	strh	w1, [x0, #6]
   13e08:	strh	w1, [x0, #8]
   13e0c:	strh	w1, [x0, #10]
   13e10:	strh	w1, [x0, #12]
   13e14:	strh	w1, [x0, #14]
   13e18:	strh	w1, [x0, #256]
   13e1c:	strh	w1, [x0, #258]
   13e20:	strh	w1, [x0, #260]
   13e24:	strh	w1, [x0, #262]
   13e28:	strh	w1, [x0, #264]
   13e2c:	strh	w1, [x0, #266]
   13e30:	strh	w1, [x0, #268]
   13e34:	strh	w1, [x0, #270]
   13e38:	strh	w1, [x0, #1028]
   13e3c:	strh	w1, [x0, #1030]
   13e40:	strh	w1, [x0, #1032]
   13e44:	strh	w1, [x0, #1034]
   13e48:	strh	w1, [x0, #1036]
   13e4c:	strh	w1, [x0, #1038]
   13e50:	strh	w1, [x0, #1040]
   13e54:	strh	w1, [x0, #1042]
   13e58:	strh	w1, [x0, #1284]
   13e5c:	strh	w1, [x0, #1286]
   13e60:	strh	w1, [x0, #1288]
   13e64:	strh	w1, [x0, #1290]
   13e68:	strh	w1, [x0, #1292]
   13e6c:	strh	w1, [x0, #1294]
   13e70:	strh	w1, [x0, #1296]
   13e74:	strh	w1, [x0, #1298]
   13e78:	add	x0, x0, #0x10
   13e7c:	cmp	x0, x2
   13e80:	b.ne	13df8 <lzma_mode_is_supported@@XZ_5.0+0x2868>  // b.any
   13e84:	add	x0, x5, #0x6, lsl #12
   13e88:	add	x0, x0, #0x868
   13e8c:	add	x2, x5, #0x6, lsl #12
   13e90:	add	x2, x2, #0xa68
   13e94:	mov	w1, #0x400                 	// #1024
   13e98:	strh	w1, [x0], #2
   13e9c:	cmp	x0, x2
   13ea0:	b.ne	13e98 <lzma_mode_is_supported@@XZ_5.0+0x2908>  // b.any
   13ea4:	add	x0, x5, #0x6, lsl #12
   13ea8:	add	x0, x0, #0xc6c
   13eac:	add	x2, x5, #0x6, lsl #12
   13eb0:	add	x2, x2, #0xe6c
   13eb4:	mov	w1, #0x400                 	// #1024
   13eb8:	strh	w1, [x0], #2
   13ebc:	cmp	x2, x0
   13ec0:	b.ne	13eb8 <lzma_mode_is_supported@@XZ_5.0+0x2928>  // b.any
   13ec4:	add	x0, x5, #0x4, lsl #12
   13ec8:	mov	w1, #0x1                   	// #1
   13ecc:	str	w1, [x0, #11936]
   13ed0:	str	xzr, [x5, #28328]
   13ed4:	str	wzr, [x0, #11952]
   13ed8:	str	wzr, [x0, #11956]
   13edc:	str	wzr, [x0, #11960]
   13ee0:	str	wzr, [x0, #11964]
   13ee4:	ret
   13ee8:	stp	x29, x30, [sp, #-224]!
   13eec:	mov	x29, sp
   13ef0:	stp	x19, x20, [sp, #16]
   13ef4:	stp	x21, x22, [sp, #32]
   13ef8:	stp	x23, x24, [sp, #48]
   13efc:	mov	x23, x0
   13f00:	str	x1, [sp, #120]
   13f04:	mov	x20, x2
   13f08:	mov	x19, x3
   13f0c:	mov	x21, x4
   13f10:	add	x0, x0, #0x6, lsl #12
   13f14:	add	x0, x0, #0xe6c
   13f18:	ldr	w1, [x0, #8]
   13f1c:	cbz	w1, 172e0 <lzma_mode_is_supported@@XZ_5.0+0x5d50>
   13f20:	mov	x2, x0
   13f24:	b	13f50 <lzma_mode_is_supported@@XZ_5.0+0x29c0>
   13f28:	ldrb	w3, [x20, x0]
   13f2c:	cbnz	w3, 17304 <lzma_mode_is_supported@@XZ_5.0+0x5d74>
   13f30:	ldr	w3, [x2, #4]
   13f34:	ldrb	w4, [x20, x0]
   13f38:	orr	w3, w4, w3, lsl #8
   13f3c:	str	w3, [x2, #4]
   13f40:	add	x0, x0, #0x1
   13f44:	str	x0, [x19]
   13f48:	sub	w1, w1, #0x1
   13f4c:	str	w1, [x2, #8]
   13f50:	ldr	x0, [x19]
   13f54:	cmp	x21, x0
   13f58:	b.eq	172ec <lzma_mode_is_supported@@XZ_5.0+0x5d5c>  // b.none
   13f5c:	cmp	w1, #0x5
   13f60:	b.eq	13f28 <lzma_mode_is_supported@@XZ_5.0+0x2998>  // b.none
   13f64:	ldr	w3, [x2, #4]
   13f68:	ldrb	w4, [x20, x0]
   13f6c:	orr	w3, w4, w3, lsl #8
   13f70:	str	w3, [x2, #4]
   13f74:	add	x0, x0, #0x1
   13f78:	str	x0, [x19]
   13f7c:	sub	w1, w1, #0x1
   13f80:	str	w1, [x2, #8]
   13f84:	cbnz	w1, 13f50 <lzma_mode_is_supported@@XZ_5.0+0x29c0>
   13f88:	stp	x25, x26, [sp, #64]
   13f8c:	stp	x27, x28, [sp, #80]
   13f90:	ldr	x0, [sp, #120]
   13f94:	ldr	x1, [x0]
   13f98:	str	x1, [sp, #160]
   13f9c:	ldr	x1, [x0, #8]
   13fa0:	str	x1, [sp, #112]
   13fa4:	ldr	x2, [x0, #16]
   13fa8:	str	x2, [sp, #136]
   13fac:	ldr	x2, [x0, #24]
   13fb0:	str	x2, [sp, #128]
   13fb4:	ldr	x0, [x0, #32]
   13fb8:	str	x0, [sp, #176]
   13fbc:	add	x0, x23, #0x4, lsl #12
   13fc0:	ldr	w22, [x0, #11884]
   13fc4:	ldr	w24, [x0, #11888]
   13fc8:	ldr	x28, [x19]
   13fcc:	ldr	w2, [x0, #11896]
   13fd0:	str	w2, [sp, #152]
   13fd4:	ldr	w2, [x0, #11900]
   13fd8:	str	w2, [sp, #144]
   13fdc:	ldr	w2, [x0, #11904]
   13fe0:	str	w2, [sp, #188]
   13fe4:	ldr	w2, [x0, #11908]
   13fe8:	str	w2, [sp, #192]
   13fec:	ldr	w2, [x0, #11912]
   13ff0:	str	w2, [sp, #200]
   13ff4:	ldr	w2, [x0, #11916]
   13ff8:	str	w2, [sp, #196]
   13ffc:	ldr	x3, [x23, #28328]
   14000:	str	x3, [sp, #96]
   14004:	ldr	w27, [x0, #11952]
   14008:	ldr	w3, [x0, #11956]
   1400c:	str	w3, [sp, #184]
   14010:	ldr	w3, [x0, #11960]
   14014:	str	w3, [sp, #148]
   14018:	ldr	w3, [x0, #11964]
   1401c:	str	w3, [sp, #108]
   14020:	ldr	w3, [x0, #11924]
   14024:	str	w3, [sp, #204]
   14028:	ldr	w0, [x0, #11920]
   1402c:	str	w0, [sp, #208]
   14030:	and	w2, w2, w1
   14034:	ldr	x0, [x23, #28312]
   14038:	str	x0, [sp, #168]
   1403c:	cmn	x0, #0x1
   14040:	b.eq	14064 <lzma_mode_is_supported@@XZ_5.0+0x2ad4>  // b.none
   14044:	ldr	x3, [sp, #128]
   14048:	ldr	x0, [sp, #112]
   1404c:	sub	x1, x3, x0
   14050:	ldr	x4, [sp, #168]
   14054:	add	x0, x4, x0
   14058:	cmp	x4, x1
   1405c:	csel	x0, x0, x3, cc  // cc = lo, ul, last
   14060:	str	x0, [sp, #128]
   14064:	add	x0, x23, #0x4, lsl #12
   14068:	ldr	w0, [x0, #11936]
   1406c:	cmp	w0, #0x46
   14070:	b.hi	17240 <lzma_mode_is_supported@@XZ_5.0+0x5cb0>  // b.pmore
   14074:	adrp	x1, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xda70>
   14078:	add	x1, x1, #0x750
   1407c:	ldrh	w0, [x1, w0, uxtw #1]
   14080:	adr	x1, 1408c <lzma_mode_is_supported@@XZ_5.0+0x2afc>
   14084:	add	x0, x1, w0, sxth #2
   14088:	br	x0
   1408c:	ldr	x26, [sp, #112]
   14090:	b	162dc <lzma_mode_is_supported@@XZ_5.0+0x4d4c>
   14094:	ldr	x0, [sp, #128]
   14098:	cmp	x0, x26
   1409c:	b.ne	162ec <lzma_mode_is_supported@@XZ_5.0+0x4d5c>  // b.any
   140a0:	mov	x25, x26
   140a4:	mov	w0, #0xffffff              	// #16777215
   140a8:	cmp	w22, w0
   140ac:	b.hi	140c8 <lzma_mode_is_supported@@XZ_5.0+0x2b38>  // b.pmore
   140b0:	cmp	x28, x21
   140b4:	b.eq	17248 <lzma_mode_is_supported@@XZ_5.0+0x5cb8>  // b.none
   140b8:	lsl	w22, w22, #8
   140bc:	ldrb	w0, [x20, x28]
   140c0:	orr	w24, w0, w24, lsl #8
   140c4:	add	x28, x28, #0x1
   140c8:	add	x0, x23, #0x4, lsl #12
   140cc:	mov	w1, #0x1                   	// #1
   140d0:	str	w1, [x0, #11936]
   140d4:	mov	w0, #0x0                   	// #0
   140d8:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   140dc:	add	x0, x23, #0x4, lsl #12
   140e0:	mov	w1, #0x1                   	// #1
   140e4:	str	w1, [x0, #11936]
   140e8:	mov	x25, x26
   140ec:	mov	w0, #0x0                   	// #0
   140f0:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   140f4:	ldr	x25, [sp, #112]
   140f8:	mov	w0, #0xffffff              	// #16777215
   140fc:	cmp	w22, w0
   14100:	b.hi	1411c <lzma_mode_is_supported@@XZ_5.0+0x2b8c>  // b.pmore
   14104:	cmp	x28, x21
   14108:	b.eq	14154 <lzma_mode_is_supported@@XZ_5.0+0x2bc4>  // b.none
   1410c:	lsl	w22, w22, #8
   14110:	ldrb	w0, [x20, x28]
   14114:	orr	w24, w0, w24, lsl #8
   14118:	add	x28, x28, #0x1
   1411c:	ubfiz	x3, x27, #1, #32
   14120:	ldr	x4, [sp, #96]
   14124:	ldrh	w0, [x4, x3]
   14128:	lsr	w1, w22, #11
   1412c:	mul	w1, w1, w0
   14130:	cmp	w1, w24
   14134:	b.ls	14168 <lzma_mode_is_supported@@XZ_5.0+0x2bd8>  // b.plast
   14138:	mov	w2, #0x800                 	// #2048
   1413c:	sub	w2, w2, w0
   14140:	add	w0, w0, w2, lsr #5
   14144:	strh	w0, [x4, x3]
   14148:	lsl	w27, w27, #1
   1414c:	mov	w22, w1
   14150:	b	1418c <lzma_mode_is_supported@@XZ_5.0+0x2bfc>
   14154:	add	x0, x23, #0x4, lsl #12
   14158:	mov	w1, #0x2                   	// #2
   1415c:	str	w1, [x0, #11936]
   14160:	mov	w0, #0x0                   	// #0
   14164:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14168:	sub	w22, w22, w1
   1416c:	sub	w24, w24, w1
   14170:	sub	w0, w0, w0, lsr #5
   14174:	ldr	x1, [sp, #96]
   14178:	strh	w0, [x1, x3]
   1417c:	lsl	w0, w27, #1
   14180:	add	w27, w0, #0x1
   14184:	b	1418c <lzma_mode_is_supported@@XZ_5.0+0x2bfc>
   14188:	ldr	x25, [sp, #112]
   1418c:	mov	w0, #0xffffff              	// #16777215
   14190:	cmp	w22, w0
   14194:	b.hi	141b0 <lzma_mode_is_supported@@XZ_5.0+0x2c20>  // b.pmore
   14198:	cmp	x28, x21
   1419c:	b.eq	14438 <lzma_mode_is_supported@@XZ_5.0+0x2ea8>  // b.none
   141a0:	lsl	w22, w22, #8
   141a4:	ldrb	w0, [x20, x28]
   141a8:	orr	w24, w0, w24, lsl #8
   141ac:	add	x28, x28, #0x1
   141b0:	ubfiz	x3, x27, #1, #32
   141b4:	ldr	x4, [sp, #96]
   141b8:	ldrh	w0, [x4, x3]
   141bc:	lsr	w1, w22, #11
   141c0:	mul	w1, w1, w0
   141c4:	cmp	w1, w24
   141c8:	b.ls	1444c <lzma_mode_is_supported@@XZ_5.0+0x2ebc>  // b.plast
   141cc:	mov	w2, #0x800                 	// #2048
   141d0:	sub	w2, w2, w0
   141d4:	add	w0, w0, w2, lsr #5
   141d8:	strh	w0, [x4, x3]
   141dc:	lsl	w27, w27, #1
   141e0:	mov	w22, w1
   141e4:	mov	w0, #0xffffff              	// #16777215
   141e8:	cmp	w22, w0
   141ec:	b.hi	14208 <lzma_mode_is_supported@@XZ_5.0+0x2c78>  // b.pmore
   141f0:	cmp	x28, x21
   141f4:	b.eq	14474 <lzma_mode_is_supported@@XZ_5.0+0x2ee4>  // b.none
   141f8:	lsl	w22, w22, #8
   141fc:	ldrb	w0, [x20, x28]
   14200:	orr	w24, w0, w24, lsl #8
   14204:	add	x28, x28, #0x1
   14208:	ubfiz	x3, x27, #1, #32
   1420c:	ldr	x4, [sp, #96]
   14210:	ldrh	w0, [x4, x3]
   14214:	lsr	w1, w22, #11
   14218:	mul	w1, w1, w0
   1421c:	cmp	w1, w24
   14220:	b.ls	14488 <lzma_mode_is_supported@@XZ_5.0+0x2ef8>  // b.plast
   14224:	mov	w2, #0x800                 	// #2048
   14228:	sub	w2, w2, w0
   1422c:	add	w0, w0, w2, lsr #5
   14230:	strh	w0, [x4, x3]
   14234:	lsl	w27, w27, #1
   14238:	mov	w22, w1
   1423c:	mov	w0, #0xffffff              	// #16777215
   14240:	cmp	w22, w0
   14244:	b.hi	14260 <lzma_mode_is_supported@@XZ_5.0+0x2cd0>  // b.pmore
   14248:	cmp	x28, x21
   1424c:	b.eq	144b0 <lzma_mode_is_supported@@XZ_5.0+0x2f20>  // b.none
   14250:	lsl	w22, w22, #8
   14254:	ldrb	w0, [x20, x28]
   14258:	orr	w24, w0, w24, lsl #8
   1425c:	add	x28, x28, #0x1
   14260:	ubfiz	x2, x27, #1, #32
   14264:	ldr	x4, [sp, #96]
   14268:	ldrh	w1, [x4, x2]
   1426c:	lsr	w0, w22, #11
   14270:	mul	w0, w0, w1
   14274:	cmp	w0, w24
   14278:	b.ls	144c4 <lzma_mode_is_supported@@XZ_5.0+0x2f34>  // b.plast
   1427c:	mov	w3, #0x800                 	// #2048
   14280:	sub	w3, w3, w1
   14284:	add	w1, w1, w3, lsr #5
   14288:	strh	w1, [x4, x2]
   1428c:	lsl	w27, w27, #1
   14290:	mov	w22, w0
   14294:	mov	w0, #0xffffff              	// #16777215
   14298:	cmp	w22, w0
   1429c:	b.hi	142b8 <lzma_mode_is_supported@@XZ_5.0+0x2d28>  // b.pmore
   142a0:	cmp	x28, x21
   142a4:	b.eq	144ec <lzma_mode_is_supported@@XZ_5.0+0x2f5c>  // b.none
   142a8:	lsl	w22, w22, #8
   142ac:	ldrb	w0, [x20, x28]
   142b0:	orr	w24, w0, w24, lsl #8
   142b4:	add	x28, x28, #0x1
   142b8:	ubfiz	x2, x27, #1, #32
   142bc:	ldr	x4, [sp, #96]
   142c0:	ldrh	w1, [x4, x2]
   142c4:	lsr	w0, w22, #11
   142c8:	mul	w0, w0, w1
   142cc:	cmp	w0, w24
   142d0:	b.ls	14500 <lzma_mode_is_supported@@XZ_5.0+0x2f70>  // b.plast
   142d4:	mov	w3, #0x800                 	// #2048
   142d8:	sub	w3, w3, w1
   142dc:	add	w1, w1, w3, lsr #5
   142e0:	strh	w1, [x4, x2]
   142e4:	lsl	w27, w27, #1
   142e8:	mov	w22, w0
   142ec:	mov	w0, #0xffffff              	// #16777215
   142f0:	cmp	w22, w0
   142f4:	b.hi	14310 <lzma_mode_is_supported@@XZ_5.0+0x2d80>  // b.pmore
   142f8:	cmp	x28, x21
   142fc:	b.eq	14528 <lzma_mode_is_supported@@XZ_5.0+0x2f98>  // b.none
   14300:	lsl	w22, w22, #8
   14304:	ldrb	w0, [x20, x28]
   14308:	orr	w24, w0, w24, lsl #8
   1430c:	add	x28, x28, #0x1
   14310:	ubfiz	x2, x27, #1, #32
   14314:	ldr	x4, [sp, #96]
   14318:	ldrh	w1, [x4, x2]
   1431c:	lsr	w0, w22, #11
   14320:	mul	w0, w0, w1
   14324:	cmp	w0, w24
   14328:	b.ls	1453c <lzma_mode_is_supported@@XZ_5.0+0x2fac>  // b.plast
   1432c:	mov	w3, #0x800                 	// #2048
   14330:	sub	w3, w3, w1
   14334:	add	w1, w1, w3, lsr #5
   14338:	strh	w1, [x4, x2]
   1433c:	lsl	w27, w27, #1
   14340:	mov	w22, w0
   14344:	mov	w0, #0xffffff              	// #16777215
   14348:	cmp	w22, w0
   1434c:	b.hi	14368 <lzma_mode_is_supported@@XZ_5.0+0x2dd8>  // b.pmore
   14350:	cmp	x28, x21
   14354:	b.eq	14564 <lzma_mode_is_supported@@XZ_5.0+0x2fd4>  // b.none
   14358:	lsl	w22, w22, #8
   1435c:	ldrb	w0, [x20, x28]
   14360:	orr	w24, w0, w24, lsl #8
   14364:	add	x28, x28, #0x1
   14368:	ubfiz	x2, x27, #1, #32
   1436c:	ldr	x4, [sp, #96]
   14370:	ldrh	w1, [x4, x2]
   14374:	lsr	w0, w22, #11
   14378:	mul	w0, w0, w1
   1437c:	cmp	w0, w24
   14380:	b.ls	14578 <lzma_mode_is_supported@@XZ_5.0+0x2fe8>  // b.plast
   14384:	mov	w3, #0x800                 	// #2048
   14388:	sub	w3, w3, w1
   1438c:	add	w1, w1, w3, lsr #5
   14390:	strh	w1, [x4, x2]
   14394:	lsl	w27, w27, #1
   14398:	mov	w22, w0
   1439c:	mov	w0, #0xffffff              	// #16777215
   143a0:	cmp	w22, w0
   143a4:	b.hi	143c0 <lzma_mode_is_supported@@XZ_5.0+0x2e30>  // b.pmore
   143a8:	cmp	x28, x21
   143ac:	b.eq	145a0 <lzma_mode_is_supported@@XZ_5.0+0x3010>  // b.none
   143b0:	lsl	w22, w22, #8
   143b4:	ldrb	w0, [x20, x28]
   143b8:	orr	w24, w0, w24, lsl #8
   143bc:	add	x28, x28, #0x1
   143c0:	ubfiz	x2, x27, #1, #32
   143c4:	ldr	x4, [sp, #96]
   143c8:	ldrh	w1, [x4, x2]
   143cc:	lsr	w0, w22, #11
   143d0:	mul	w0, w0, w1
   143d4:	cmp	w0, w24
   143d8:	b.ls	145b4 <lzma_mode_is_supported@@XZ_5.0+0x3024>  // b.plast
   143dc:	mov	w3, #0x800                 	// #2048
   143e0:	sub	w3, w3, w1
   143e4:	add	w1, w1, w3, lsr #5
   143e8:	strh	w1, [x4, x2]
   143ec:	lsl	w27, w27, #1
   143f0:	mov	w22, w0
   143f4:	adrp	x0, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xda70>
   143f8:	add	x0, x0, #0x7e0
   143fc:	ldr	w1, [sp, #152]
   14400:	ldr	w0, [x0, w1, uxtw #2]
   14404:	str	w0, [sp, #152]
   14408:	and	w0, w27, #0xff
   1440c:	ldr	x1, [sp, #128]
   14410:	cmp	x1, x25
   14414:	b.eq	172b4 <lzma_mode_is_supported@@XZ_5.0+0x5d24>  // b.none
   14418:	add	x26, x25, #0x1
   1441c:	ldr	x1, [sp, #160]
   14420:	strb	w0, [x1, x25]
   14424:	ldr	x0, [sp, #136]
   14428:	cmp	x0, x26
   1442c:	csel	x0, x0, x26, cs  // cs = hs, nlast
   14430:	str	x0, [sp, #136]
   14434:	b	162d4 <lzma_mode_is_supported@@XZ_5.0+0x4d44>
   14438:	add	x0, x23, #0x4, lsl #12
   1443c:	mov	w1, #0x3                   	// #3
   14440:	str	w1, [x0, #11936]
   14444:	mov	w0, #0x0                   	// #0
   14448:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   1444c:	sub	w22, w22, w1
   14450:	sub	w24, w24, w1
   14454:	sub	w0, w0, w0, lsr #5
   14458:	ldr	x1, [sp, #96]
   1445c:	strh	w0, [x1, x3]
   14460:	lsl	w0, w27, #1
   14464:	add	w27, w0, #0x1
   14468:	b	141e4 <lzma_mode_is_supported@@XZ_5.0+0x2c54>
   1446c:	ldr	x25, [sp, #112]
   14470:	b	141e4 <lzma_mode_is_supported@@XZ_5.0+0x2c54>
   14474:	add	x0, x23, #0x4, lsl #12
   14478:	mov	w1, #0x4                   	// #4
   1447c:	str	w1, [x0, #11936]
   14480:	mov	w0, #0x0                   	// #0
   14484:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14488:	sub	w22, w22, w1
   1448c:	sub	w24, w24, w1
   14490:	sub	w0, w0, w0, lsr #5
   14494:	ldr	x1, [sp, #96]
   14498:	strh	w0, [x1, x3]
   1449c:	lsl	w0, w27, #1
   144a0:	add	w27, w0, #0x1
   144a4:	b	1423c <lzma_mode_is_supported@@XZ_5.0+0x2cac>
   144a8:	ldr	x25, [sp, #112]
   144ac:	b	1423c <lzma_mode_is_supported@@XZ_5.0+0x2cac>
   144b0:	add	x0, x23, #0x4, lsl #12
   144b4:	mov	w1, #0x5                   	// #5
   144b8:	str	w1, [x0, #11936]
   144bc:	mov	w0, #0x0                   	// #0
   144c0:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   144c4:	sub	w22, w22, w0
   144c8:	sub	w24, w24, w0
   144cc:	sub	w1, w1, w1, lsr #5
   144d0:	ldr	x0, [sp, #96]
   144d4:	strh	w1, [x0, x2]
   144d8:	lsl	w0, w27, #1
   144dc:	add	w27, w0, #0x1
   144e0:	b	14294 <lzma_mode_is_supported@@XZ_5.0+0x2d04>
   144e4:	ldr	x25, [sp, #112]
   144e8:	b	14294 <lzma_mode_is_supported@@XZ_5.0+0x2d04>
   144ec:	add	x0, x23, #0x4, lsl #12
   144f0:	mov	w1, #0x6                   	// #6
   144f4:	str	w1, [x0, #11936]
   144f8:	mov	w0, #0x0                   	// #0
   144fc:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14500:	sub	w22, w22, w0
   14504:	sub	w24, w24, w0
   14508:	sub	w1, w1, w1, lsr #5
   1450c:	ldr	x0, [sp, #96]
   14510:	strh	w1, [x0, x2]
   14514:	lsl	w0, w27, #1
   14518:	add	w27, w0, #0x1
   1451c:	b	142ec <lzma_mode_is_supported@@XZ_5.0+0x2d5c>
   14520:	ldr	x25, [sp, #112]
   14524:	b	142ec <lzma_mode_is_supported@@XZ_5.0+0x2d5c>
   14528:	add	x0, x23, #0x4, lsl #12
   1452c:	mov	w1, #0x7                   	// #7
   14530:	str	w1, [x0, #11936]
   14534:	mov	w0, #0x0                   	// #0
   14538:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   1453c:	sub	w22, w22, w0
   14540:	sub	w24, w24, w0
   14544:	sub	w1, w1, w1, lsr #5
   14548:	ldr	x0, [sp, #96]
   1454c:	strh	w1, [x0, x2]
   14550:	lsl	w0, w27, #1
   14554:	add	w27, w0, #0x1
   14558:	b	14344 <lzma_mode_is_supported@@XZ_5.0+0x2db4>
   1455c:	ldr	x25, [sp, #112]
   14560:	b	14344 <lzma_mode_is_supported@@XZ_5.0+0x2db4>
   14564:	add	x0, x23, #0x4, lsl #12
   14568:	mov	w1, #0x8                   	// #8
   1456c:	str	w1, [x0, #11936]
   14570:	mov	w0, #0x0                   	// #0
   14574:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14578:	sub	w22, w22, w0
   1457c:	sub	w24, w24, w0
   14580:	sub	w1, w1, w1, lsr #5
   14584:	ldr	x0, [sp, #96]
   14588:	strh	w1, [x0, x2]
   1458c:	lsl	w0, w27, #1
   14590:	add	w27, w0, #0x1
   14594:	b	1439c <lzma_mode_is_supported@@XZ_5.0+0x2e0c>
   14598:	ldr	x25, [sp, #112]
   1459c:	b	1439c <lzma_mode_is_supported@@XZ_5.0+0x2e0c>
   145a0:	add	x0, x23, #0x4, lsl #12
   145a4:	mov	w1, #0x9                   	// #9
   145a8:	str	w1, [x0, #11936]
   145ac:	mov	w0, #0x0                   	// #0
   145b0:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   145b4:	sub	w22, w22, w0
   145b8:	sub	w24, w24, w0
   145bc:	sub	w1, w1, w1, lsr #5
   145c0:	ldr	x0, [sp, #96]
   145c4:	strh	w1, [x0, x2]
   145c8:	lsl	w0, w27, #1
   145cc:	add	w27, w0, #0x1
   145d0:	b	143f4 <lzma_mode_is_supported@@XZ_5.0+0x2e64>
   145d4:	ldr	w0, [sp, #144]
   145d8:	cmp	x26, x0
   145dc:	ldr	x1, [sp, #176]
   145e0:	csel	x1, x1, xzr, ls  // ls = plast
   145e4:	sub	x1, x1, x0
   145e8:	ldr	x0, [sp, #160]
   145ec:	add	x0, x0, x4
   145f0:	ldrb	w0, [x0, x1]
   145f4:	lsl	w0, w0, #1
   145f8:	str	w0, [sp, #108]
   145fc:	mov	x25, x26
   14600:	mov	w22, w3
   14604:	mov	w0, #0x100                 	// #256
   14608:	str	w0, [sp, #148]
   1460c:	mov	w27, #0x1                   	// #1
   14610:	b	14618 <lzma_mode_is_supported@@XZ_5.0+0x3088>
   14614:	ldr	x25, [sp, #112]
   14618:	ldr	w0, [sp, #148]
   1461c:	ldr	w1, [sp, #108]
   14620:	and	w3, w0, w1
   14624:	add	w0, w27, w0
   14628:	add	w0, w0, w3
   1462c:	mov	w1, #0xffffff              	// #16777215
   14630:	cmp	w22, w1
   14634:	b.hi	14650 <lzma_mode_is_supported@@XZ_5.0+0x30c0>  // b.pmore
   14638:	cmp	x28, x21
   1463c:	b.eq	14a58 <lzma_mode_is_supported@@XZ_5.0+0x34c8>  // b.none
   14640:	lsl	w22, w22, #8
   14644:	ldrb	w1, [x20, x28]
   14648:	orr	w24, w1, w24, lsl #8
   1464c:	add	x28, x28, #0x1
   14650:	ubfiz	x0, x0, #1, #32
   14654:	ldr	x1, [sp, #96]
   14658:	add	x4, x1, x0
   1465c:	ldrh	w0, [x1, x0]
   14660:	lsr	w1, w22, #11
   14664:	mul	w1, w1, w0
   14668:	cmp	w1, w24
   1466c:	b.ls	14a6c <lzma_mode_is_supported@@XZ_5.0+0x34dc>  // b.plast
   14670:	mov	w2, #0x800                 	// #2048
   14674:	sub	w2, w2, w0
   14678:	add	w0, w0, w2, lsr #5
   1467c:	and	w0, w0, #0xffff
   14680:	lsl	w27, w27, #1
   14684:	ldr	w2, [sp, #148]
   14688:	bic	w2, w2, w3
   1468c:	str	w2, [sp, #148]
   14690:	mov	w22, w1
   14694:	strh	w0, [x4]
   14698:	ldr	w0, [sp, #108]
   1469c:	lsl	w0, w0, #1
   146a0:	str	w0, [sp, #108]
   146a4:	ldr	w0, [sp, #148]
   146a8:	ldr	w1, [sp, #108]
   146ac:	and	w3, w0, w1
   146b0:	add	w0, w27, w0
   146b4:	add	w0, w0, w3
   146b8:	mov	w1, #0xffffff              	// #16777215
   146bc:	cmp	w22, w1
   146c0:	b.hi	146dc <lzma_mode_is_supported@@XZ_5.0+0x314c>  // b.pmore
   146c4:	cmp	x28, x21
   146c8:	b.eq	14a94 <lzma_mode_is_supported@@XZ_5.0+0x3504>  // b.none
   146cc:	lsl	w22, w22, #8
   146d0:	ldrb	w1, [x20, x28]
   146d4:	orr	w24, w1, w24, lsl #8
   146d8:	add	x28, x28, #0x1
   146dc:	ubfiz	x0, x0, #1, #32
   146e0:	ldr	x1, [sp, #96]
   146e4:	add	x4, x1, x0
   146e8:	ldrh	w0, [x1, x0]
   146ec:	lsr	w1, w22, #11
   146f0:	mul	w1, w1, w0
   146f4:	cmp	w1, w24
   146f8:	b.ls	14aa8 <lzma_mode_is_supported@@XZ_5.0+0x3518>  // b.plast
   146fc:	mov	w2, #0x800                 	// #2048
   14700:	sub	w2, w2, w0
   14704:	add	w0, w0, w2, lsr #5
   14708:	and	w0, w0, #0xffff
   1470c:	lsl	w27, w27, #1
   14710:	ldr	w2, [sp, #148]
   14714:	bic	w2, w2, w3
   14718:	str	w2, [sp, #148]
   1471c:	mov	w22, w1
   14720:	strh	w0, [x4]
   14724:	ldr	w0, [sp, #108]
   14728:	lsl	w0, w0, #1
   1472c:	str	w0, [sp, #108]
   14730:	ldr	w0, [sp, #148]
   14734:	ldr	w1, [sp, #108]
   14738:	and	w3, w0, w1
   1473c:	add	w0, w27, w0
   14740:	add	w0, w0, w3
   14744:	mov	w1, #0xffffff              	// #16777215
   14748:	cmp	w22, w1
   1474c:	b.hi	14768 <lzma_mode_is_supported@@XZ_5.0+0x31d8>  // b.pmore
   14750:	cmp	x28, x21
   14754:	b.eq	14ad0 <lzma_mode_is_supported@@XZ_5.0+0x3540>  // b.none
   14758:	lsl	w22, w22, #8
   1475c:	ldrb	w1, [x20, x28]
   14760:	orr	w24, w1, w24, lsl #8
   14764:	add	x28, x28, #0x1
   14768:	ubfiz	x0, x0, #1, #32
   1476c:	ldr	x1, [sp, #96]
   14770:	add	x4, x1, x0
   14774:	ldrh	w0, [x1, x0]
   14778:	lsr	w1, w22, #11
   1477c:	mul	w1, w1, w0
   14780:	cmp	w1, w24
   14784:	b.ls	14ae4 <lzma_mode_is_supported@@XZ_5.0+0x3554>  // b.plast
   14788:	mov	w2, #0x800                 	// #2048
   1478c:	sub	w2, w2, w0
   14790:	add	w0, w0, w2, lsr #5
   14794:	and	w0, w0, #0xffff
   14798:	lsl	w27, w27, #1
   1479c:	ldr	w2, [sp, #148]
   147a0:	bic	w2, w2, w3
   147a4:	str	w2, [sp, #148]
   147a8:	mov	w22, w1
   147ac:	strh	w0, [x4]
   147b0:	ldr	w0, [sp, #108]
   147b4:	lsl	w0, w0, #1
   147b8:	str	w0, [sp, #108]
   147bc:	ldr	w0, [sp, #148]
   147c0:	ldr	w1, [sp, #108]
   147c4:	and	w2, w0, w1
   147c8:	add	w0, w27, w0
   147cc:	add	w0, w0, w2
   147d0:	mov	w1, #0xffffff              	// #16777215
   147d4:	cmp	w22, w1
   147d8:	b.hi	147f4 <lzma_mode_is_supported@@XZ_5.0+0x3264>  // b.pmore
   147dc:	cmp	x28, x21
   147e0:	b.eq	14b0c <lzma_mode_is_supported@@XZ_5.0+0x357c>  // b.none
   147e4:	lsl	w22, w22, #8
   147e8:	ldrb	w1, [x20, x28]
   147ec:	orr	w24, w1, w24, lsl #8
   147f0:	add	x28, x28, #0x1
   147f4:	ubfiz	x0, x0, #1, #32
   147f8:	ldr	x1, [sp, #96]
   147fc:	add	x4, x1, x0
   14800:	ldrh	w0, [x1, x0]
   14804:	lsr	w1, w22, #11
   14808:	mul	w1, w1, w0
   1480c:	cmp	w1, w24
   14810:	b.ls	14b20 <lzma_mode_is_supported@@XZ_5.0+0x3590>  // b.plast
   14814:	mov	w3, #0x800                 	// #2048
   14818:	sub	w3, w3, w0
   1481c:	add	w0, w0, w3, lsr #5
   14820:	and	w0, w0, #0xffff
   14824:	lsl	w27, w27, #1
   14828:	ldr	w3, [sp, #148]
   1482c:	bic	w2, w3, w2
   14830:	str	w2, [sp, #148]
   14834:	mov	w22, w1
   14838:	strh	w0, [x4]
   1483c:	ldr	w0, [sp, #108]
   14840:	lsl	w0, w0, #1
   14844:	str	w0, [sp, #108]
   14848:	ldr	w0, [sp, #148]
   1484c:	ldr	w1, [sp, #108]
   14850:	and	w2, w0, w1
   14854:	add	w0, w27, w0
   14858:	add	w0, w0, w2
   1485c:	mov	w1, #0xffffff              	// #16777215
   14860:	cmp	w22, w1
   14864:	b.hi	14880 <lzma_mode_is_supported@@XZ_5.0+0x32f0>  // b.pmore
   14868:	cmp	x28, x21
   1486c:	b.eq	14b48 <lzma_mode_is_supported@@XZ_5.0+0x35b8>  // b.none
   14870:	lsl	w22, w22, #8
   14874:	ldrb	w1, [x20, x28]
   14878:	orr	w24, w1, w24, lsl #8
   1487c:	add	x28, x28, #0x1
   14880:	ubfiz	x0, x0, #1, #32
   14884:	ldr	x1, [sp, #96]
   14888:	add	x4, x1, x0
   1488c:	ldrh	w1, [x1, x0]
   14890:	lsr	w0, w22, #11
   14894:	mul	w0, w0, w1
   14898:	cmp	w0, w24
   1489c:	b.ls	14b5c <lzma_mode_is_supported@@XZ_5.0+0x35cc>  // b.plast
   148a0:	mov	w3, #0x800                 	// #2048
   148a4:	sub	w3, w3, w1
   148a8:	add	w1, w1, w3, lsr #5
   148ac:	and	w1, w1, #0xffff
   148b0:	lsl	w27, w27, #1
   148b4:	ldr	w3, [sp, #148]
   148b8:	bic	w2, w3, w2
   148bc:	strh	w1, [x4]
   148c0:	ldr	w1, [sp, #108]
   148c4:	lsl	w1, w1, #1
   148c8:	str	w1, [sp, #108]
   148cc:	ldr	w1, [sp, #108]
   148d0:	and	w1, w2, w1
   148d4:	mov	w3, w1
   148d8:	str	w1, [sp, #148]
   148dc:	add	w1, w27, w2
   148e0:	add	w1, w1, w3
   148e4:	mov	w3, #0xffffff              	// #16777215
   148e8:	cmp	w0, w3
   148ec:	b.hi	14908 <lzma_mode_is_supported@@XZ_5.0+0x3378>  // b.pmore
   148f0:	cmp	x28, x21
   148f4:	b.eq	14b88 <lzma_mode_is_supported@@XZ_5.0+0x35f8>  // b.none
   148f8:	lsl	w0, w0, #8
   148fc:	ldrb	w3, [x20, x28]
   14900:	orr	w24, w3, w24, lsl #8
   14904:	add	x28, x28, #0x1
   14908:	ubfiz	x1, x1, #1, #32
   1490c:	ldr	x4, [sp, #96]
   14910:	add	x3, x4, x1
   14914:	ldrh	w1, [x4, x1]
   14918:	lsr	w22, w0, #11
   1491c:	mul	w22, w22, w1
   14920:	cmp	w22, w24
   14924:	b.ls	14ba4 <lzma_mode_is_supported@@XZ_5.0+0x3614>  // b.plast
   14928:	mov	w0, #0x800                 	// #2048
   1492c:	sub	w0, w0, w1
   14930:	add	w1, w1, w0, lsr #5
   14934:	and	w1, w1, #0xffff
   14938:	lsl	w27, w27, #1
   1493c:	ldr	w0, [sp, #148]
   14940:	bic	w0, w2, w0
   14944:	str	w0, [sp, #148]
   14948:	strh	w1, [x3]
   1494c:	ldr	w0, [sp, #108]
   14950:	lsl	w0, w0, #1
   14954:	str	w0, [sp, #108]
   14958:	ldr	w0, [sp, #148]
   1495c:	ldr	w1, [sp, #108]
   14960:	and	w2, w0, w1
   14964:	add	w0, w27, w0
   14968:	add	w0, w0, w2
   1496c:	mov	w1, #0xffffff              	// #16777215
   14970:	cmp	w22, w1
   14974:	b.hi	14990 <lzma_mode_is_supported@@XZ_5.0+0x3400>  // b.pmore
   14978:	cmp	x28, x21
   1497c:	b.eq	14bc8 <lzma_mode_is_supported@@XZ_5.0+0x3638>  // b.none
   14980:	lsl	w22, w22, #8
   14984:	ldrb	w1, [x20, x28]
   14988:	orr	w24, w1, w24, lsl #8
   1498c:	add	x28, x28, #0x1
   14990:	ubfiz	x0, x0, #1, #32
   14994:	ldr	x1, [sp, #96]
   14998:	add	x3, x1, x0
   1499c:	ldrh	w1, [x1, x0]
   149a0:	lsr	w0, w22, #11
   149a4:	mul	w0, w0, w1
   149a8:	cmp	w0, w24
   149ac:	b.ls	14bdc <lzma_mode_is_supported@@XZ_5.0+0x364c>  // b.plast
   149b0:	mov	w4, #0x800                 	// #2048
   149b4:	sub	w4, w4, w1
   149b8:	add	w1, w1, w4, lsr #5
   149bc:	and	w1, w1, #0xffff
   149c0:	lsl	w27, w27, #1
   149c4:	ldr	w4, [sp, #148]
   149c8:	bic	w2, w4, w2
   149cc:	strh	w1, [x3]
   149d0:	ldr	w1, [sp, #108]
   149d4:	lsl	w1, w1, #1
   149d8:	str	w1, [sp, #108]
   149dc:	ldr	w1, [sp, #108]
   149e0:	and	w1, w2, w1
   149e4:	mov	w3, w1
   149e8:	str	w1, [sp, #148]
   149ec:	add	w1, w27, w2
   149f0:	add	w1, w1, w3
   149f4:	mov	w3, #0xffffff              	// #16777215
   149f8:	cmp	w0, w3
   149fc:	b.hi	14a18 <lzma_mode_is_supported@@XZ_5.0+0x3488>  // b.pmore
   14a00:	cmp	x28, x21
   14a04:	b.eq	14c08 <lzma_mode_is_supported@@XZ_5.0+0x3678>  // b.none
   14a08:	lsl	w0, w0, #8
   14a0c:	ldrb	w3, [x20, x28]
   14a10:	orr	w24, w3, w24, lsl #8
   14a14:	add	x28, x28, #0x1
   14a18:	ubfiz	x1, x1, #1, #32
   14a1c:	ldr	x4, [sp, #96]
   14a20:	ldrh	w3, [x4, x1]
   14a24:	lsr	w22, w0, #11
   14a28:	mul	w22, w22, w3
   14a2c:	cmp	w22, w24
   14a30:	b.ls	14c24 <lzma_mode_is_supported@@XZ_5.0+0x3694>  // b.plast
   14a34:	mov	w0, #0x800                 	// #2048
   14a38:	sub	w0, w0, w3
   14a3c:	add	w3, w3, w0, lsr #5
   14a40:	strh	w3, [x4, x1]
   14a44:	lsl	w27, w27, #1
   14a48:	ldr	w0, [sp, #148]
   14a4c:	bic	w0, w2, w0
   14a50:	str	w0, [sp, #148]
   14a54:	b	143f4 <lzma_mode_is_supported@@XZ_5.0+0x2e64>
   14a58:	add	x0, x23, #0x4, lsl #12
   14a5c:	mov	w1, #0xa                   	// #10
   14a60:	str	w1, [x0, #11936]
   14a64:	mov	w0, #0x0                   	// #0
   14a68:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14a6c:	sub	w22, w22, w1
   14a70:	sub	w24, w24, w1
   14a74:	sub	w0, w0, w0, lsr #5
   14a78:	and	w0, w0, #0xffff
   14a7c:	lsl	w1, w27, #1
   14a80:	add	w27, w1, #0x1
   14a84:	str	w3, [sp, #148]
   14a88:	b	14694 <lzma_mode_is_supported@@XZ_5.0+0x3104>
   14a8c:	ldr	x25, [sp, #112]
   14a90:	b	146a4 <lzma_mode_is_supported@@XZ_5.0+0x3114>
   14a94:	add	x0, x23, #0x4, lsl #12
   14a98:	mov	w1, #0xb                   	// #11
   14a9c:	str	w1, [x0, #11936]
   14aa0:	mov	w0, #0x0                   	// #0
   14aa4:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14aa8:	sub	w22, w22, w1
   14aac:	sub	w24, w24, w1
   14ab0:	sub	w0, w0, w0, lsr #5
   14ab4:	and	w0, w0, #0xffff
   14ab8:	lsl	w1, w27, #1
   14abc:	add	w27, w1, #0x1
   14ac0:	str	w3, [sp, #148]
   14ac4:	b	14720 <lzma_mode_is_supported@@XZ_5.0+0x3190>
   14ac8:	ldr	x25, [sp, #112]
   14acc:	b	14730 <lzma_mode_is_supported@@XZ_5.0+0x31a0>
   14ad0:	add	x0, x23, #0x4, lsl #12
   14ad4:	mov	w1, #0xc                   	// #12
   14ad8:	str	w1, [x0, #11936]
   14adc:	mov	w0, #0x0                   	// #0
   14ae0:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14ae4:	sub	w22, w22, w1
   14ae8:	sub	w24, w24, w1
   14aec:	sub	w0, w0, w0, lsr #5
   14af0:	and	w0, w0, #0xffff
   14af4:	lsl	w1, w27, #1
   14af8:	add	w27, w1, #0x1
   14afc:	str	w3, [sp, #148]
   14b00:	b	147ac <lzma_mode_is_supported@@XZ_5.0+0x321c>
   14b04:	ldr	x25, [sp, #112]
   14b08:	b	147bc <lzma_mode_is_supported@@XZ_5.0+0x322c>
   14b0c:	add	x0, x23, #0x4, lsl #12
   14b10:	mov	w1, #0xd                   	// #13
   14b14:	str	w1, [x0, #11936]
   14b18:	mov	w0, #0x0                   	// #0
   14b1c:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14b20:	sub	w22, w22, w1
   14b24:	sub	w24, w24, w1
   14b28:	sub	w0, w0, w0, lsr #5
   14b2c:	and	w0, w0, #0xffff
   14b30:	lsl	w1, w27, #1
   14b34:	add	w27, w1, #0x1
   14b38:	str	w2, [sp, #148]
   14b3c:	b	14838 <lzma_mode_is_supported@@XZ_5.0+0x32a8>
   14b40:	ldr	x25, [sp, #112]
   14b44:	b	14848 <lzma_mode_is_supported@@XZ_5.0+0x32b8>
   14b48:	add	x0, x23, #0x4, lsl #12
   14b4c:	mov	w1, #0xe                   	// #14
   14b50:	str	w1, [x0, #11936]
   14b54:	mov	w0, #0x0                   	// #0
   14b58:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14b5c:	sub	w24, w24, w0
   14b60:	sub	w1, w1, w1, lsr #5
   14b64:	and	w1, w1, #0xffff
   14b68:	lsl	w3, w27, #1
   14b6c:	add	w27, w3, #0x1
   14b70:	sub	w0, w22, w0
   14b74:	b	148bc <lzma_mode_is_supported@@XZ_5.0+0x332c>
   14b78:	ldr	x25, [sp, #112]
   14b7c:	mov	w0, w22
   14b80:	ldr	w2, [sp, #148]
   14b84:	b	148cc <lzma_mode_is_supported@@XZ_5.0+0x333c>
   14b88:	add	x1, x23, #0x4, lsl #12
   14b8c:	mov	w3, #0xf                   	// #15
   14b90:	str	w3, [x1, #11936]
   14b94:	mov	w22, w0
   14b98:	str	w2, [sp, #148]
   14b9c:	mov	w0, #0x0                   	// #0
   14ba0:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14ba4:	sub	w24, w24, w22
   14ba8:	sub	w1, w1, w1, lsr #5
   14bac:	and	w1, w1, #0xffff
   14bb0:	lsl	w2, w27, #1
   14bb4:	add	w27, w2, #0x1
   14bb8:	sub	w22, w0, w22
   14bbc:	b	14948 <lzma_mode_is_supported@@XZ_5.0+0x33b8>
   14bc0:	ldr	x25, [sp, #112]
   14bc4:	b	14958 <lzma_mode_is_supported@@XZ_5.0+0x33c8>
   14bc8:	add	x0, x23, #0x4, lsl #12
   14bcc:	mov	w1, #0x10                  	// #16
   14bd0:	str	w1, [x0, #11936]
   14bd4:	mov	w0, #0x0                   	// #0
   14bd8:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14bdc:	sub	w24, w24, w0
   14be0:	sub	w1, w1, w1, lsr #5
   14be4:	and	w1, w1, #0xffff
   14be8:	lsl	w4, w27, #1
   14bec:	add	w27, w4, #0x1
   14bf0:	sub	w0, w22, w0
   14bf4:	b	149cc <lzma_mode_is_supported@@XZ_5.0+0x343c>
   14bf8:	ldr	x25, [sp, #112]
   14bfc:	mov	w0, w22
   14c00:	ldr	w2, [sp, #148]
   14c04:	b	149dc <lzma_mode_is_supported@@XZ_5.0+0x344c>
   14c08:	add	x1, x23, #0x4, lsl #12
   14c0c:	mov	w3, #0x11                  	// #17
   14c10:	str	w3, [x1, #11936]
   14c14:	mov	w22, w0
   14c18:	str	w2, [sp, #148]
   14c1c:	mov	w0, #0x0                   	// #0
   14c20:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14c24:	sub	w24, w24, w22
   14c28:	sub	w3, w3, w3, lsr #5
   14c2c:	ldr	x2, [sp, #96]
   14c30:	strh	w3, [x2, x1]
   14c34:	lsl	w1, w27, #1
   14c38:	add	w27, w1, #0x1
   14c3c:	sub	w22, w0, w22
   14c40:	b	143f4 <lzma_mode_is_supported@@XZ_5.0+0x2e64>
   14c44:	ldr	x25, [sp, #112]
   14c48:	b	14408 <lzma_mode_is_supported@@XZ_5.0+0x2e78>
   14c4c:	sub	w22, w22, w3
   14c50:	sub	w24, w24, w3
   14c54:	add	x0, x0, #0x6, lsl #12
   14c58:	sub	w1, w1, w1, lsr #5
   14c5c:	strh	w1, [x0]
   14c60:	mov	x25, x26
   14c64:	b	14c6c <lzma_mode_is_supported@@XZ_5.0+0x36dc>
   14c68:	ldr	x25, [sp, #112]
   14c6c:	mov	w0, #0xffffff              	// #16777215
   14c70:	cmp	w22, w0
   14c74:	b.hi	14c90 <lzma_mode_is_supported@@XZ_5.0+0x3700>  // b.pmore
   14c78:	cmp	x28, x21
   14c7c:	b.eq	14cf8 <lzma_mode_is_supported@@XZ_5.0+0x3768>  // b.none
   14c80:	lsl	w22, w22, #8
   14c84:	ldrb	w0, [x20, x28]
   14c88:	orr	w24, w0, w24, lsl #8
   14c8c:	add	x28, x28, #0x1
   14c90:	ldr	w5, [sp, #152]
   14c94:	add	x0, x23, w5, uxtw #1
   14c98:	add	x1, x0, #0x6, lsl #12
   14c9c:	ldrh	w1, [x1, #384]
   14ca0:	lsr	w3, w22, #11
   14ca4:	mul	w3, w3, w1
   14ca8:	cmp	w3, w24
   14cac:	b.ls	163b0 <lzma_mode_is_supported@@XZ_5.0+0x4e20>  // b.plast
   14cb0:	add	x0, x0, #0x6, lsl #12
   14cb4:	mov	w4, #0x800                 	// #2048
   14cb8:	sub	w4, w4, w1
   14cbc:	add	w1, w1, w4, lsr #5
   14cc0:	strh	w1, [x0, #384]
   14cc4:	cmp	w5, #0x6
   14cc8:	b.ls	14d68 <lzma_mode_is_supported@@XZ_5.0+0x37d8>  // b.plast
   14ccc:	mov	w22, w3
   14cd0:	ldr	w0, [sp, #192]
   14cd4:	str	w0, [sp, #200]
   14cd8:	ldr	w0, [sp, #188]
   14cdc:	str	w0, [sp, #192]
   14ce0:	ldr	w0, [sp, #144]
   14ce4:	str	w0, [sp, #188]
   14ce8:	mov	w27, #0x1                   	// #1
   14cec:	mov	w0, #0xa                   	// #10
   14cf0:	str	w0, [sp, #152]
   14cf4:	b	14d10 <lzma_mode_is_supported@@XZ_5.0+0x3780>
   14cf8:	add	x0, x23, #0x4, lsl #12
   14cfc:	mov	w1, #0x13                  	// #19
   14d00:	str	w1, [x0, #11936]
   14d04:	mov	w0, #0x0                   	// #0
   14d08:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14d0c:	ldr	x25, [sp, #112]
   14d10:	mov	w0, #0xffffff              	// #16777215
   14d14:	cmp	w22, w0
   14d18:	b.hi	14d34 <lzma_mode_is_supported@@XZ_5.0+0x37a4>  // b.pmore
   14d1c:	cmp	x28, x21
   14d20:	b.eq	14d94 <lzma_mode_is_supported@@XZ_5.0+0x3804>  // b.none
   14d24:	lsl	w22, w22, #8
   14d28:	ldrb	w0, [x20, x28]
   14d2c:	orr	w24, w0, w24, lsl #8
   14d30:	add	x28, x28, #0x1
   14d34:	add	x0, x23, #0x6, lsl #12
   14d38:	ldrh	w0, [x0, #1636]
   14d3c:	lsr	w1, w22, #11
   14d40:	mul	w1, w1, w0
   14d44:	cmp	w1, w24
   14d48:	b.ls	14f8c <lzma_mode_is_supported@@XZ_5.0+0x39fc>  // b.plast
   14d4c:	add	x4, x23, #0x6, lsl #12
   14d50:	mov	w3, #0x800                 	// #2048
   14d54:	sub	w3, w3, w0
   14d58:	add	w0, w0, w3, lsr #5
   14d5c:	strh	w0, [x4, #1636]
   14d60:	mov	w22, w1
   14d64:	b	14dac <lzma_mode_is_supported@@XZ_5.0+0x381c>
   14d68:	mov	w22, w3
   14d6c:	ldr	w0, [sp, #192]
   14d70:	str	w0, [sp, #200]
   14d74:	ldr	w0, [sp, #188]
   14d78:	str	w0, [sp, #192]
   14d7c:	ldr	w0, [sp, #144]
   14d80:	str	w0, [sp, #188]
   14d84:	mov	w27, #0x1                   	// #1
   14d88:	mov	w0, #0x7                   	// #7
   14d8c:	str	w0, [sp, #152]
   14d90:	b	14d10 <lzma_mode_is_supported@@XZ_5.0+0x3780>
   14d94:	add	x0, x23, #0x4, lsl #12
   14d98:	mov	w1, #0x14                  	// #20
   14d9c:	str	w1, [x0, #11936]
   14da0:	mov	w0, #0x0                   	// #0
   14da4:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14da8:	ldr	x25, [sp, #112]
   14dac:	mov	w0, #0xffffff              	// #16777215
   14db0:	cmp	w22, w0
   14db4:	b.hi	14dd0 <lzma_mode_is_supported@@XZ_5.0+0x3840>  // b.pmore
   14db8:	cmp	x28, x21
   14dbc:	b.eq	14e14 <lzma_mode_is_supported@@XZ_5.0+0x3884>  // b.none
   14dc0:	lsl	w22, w22, #8
   14dc4:	ldrb	w0, [x20, x28]
   14dc8:	orr	w24, w0, w24, lsl #8
   14dcc:	add	x28, x28, #0x1
   14dd0:	mov	w0, w27
   14dd4:	add	x0, x0, w2, uxtw #3
   14dd8:	add	x0, x23, x0, lsl #1
   14ddc:	add	x1, x0, #0x6, lsl #12
   14de0:	ldrh	w1, [x1, #1640]
   14de4:	lsr	w3, w22, #11
   14de8:	mul	w3, w3, w1
   14dec:	cmp	w3, w24
   14df0:	b.ls	14e28 <lzma_mode_is_supported@@XZ_5.0+0x3898>  // b.plast
   14df4:	add	x0, x0, #0x6, lsl #12
   14df8:	mov	w4, #0x800                 	// #2048
   14dfc:	sub	w4, w4, w1
   14e00:	add	w1, w1, w4, lsr #5
   14e04:	strh	w1, [x0, #1640]
   14e08:	lsl	w27, w27, #1
   14e0c:	mov	w22, w3
   14e10:	b	14e4c <lzma_mode_is_supported@@XZ_5.0+0x38bc>
   14e14:	add	x0, x23, #0x4, lsl #12
   14e18:	mov	w1, #0x15                  	// #21
   14e1c:	str	w1, [x0, #11936]
   14e20:	mov	w0, #0x0                   	// #0
   14e24:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14e28:	sub	w22, w22, w3
   14e2c:	sub	w24, w24, w3
   14e30:	add	x0, x0, #0x6, lsl #12
   14e34:	sub	w1, w1, w1, lsr #5
   14e38:	strh	w1, [x0, #1640]
   14e3c:	lsl	w0, w27, #1
   14e40:	add	w27, w0, #0x1
   14e44:	b	14e4c <lzma_mode_is_supported@@XZ_5.0+0x38bc>
   14e48:	ldr	x25, [sp, #112]
   14e4c:	mov	w0, #0xffffff              	// #16777215
   14e50:	cmp	w22, w0
   14e54:	b.hi	14e70 <lzma_mode_is_supported@@XZ_5.0+0x38e0>  // b.pmore
   14e58:	cmp	x28, x21
   14e5c:	b.eq	14f20 <lzma_mode_is_supported@@XZ_5.0+0x3990>  // b.none
   14e60:	lsl	w22, w22, #8
   14e64:	ldrb	w0, [x20, x28]
   14e68:	orr	w24, w0, w24, lsl #8
   14e6c:	add	x28, x28, #0x1
   14e70:	mov	w0, w27
   14e74:	add	x0, x0, w2, uxtw #3
   14e78:	add	x0, x23, x0, lsl #1
   14e7c:	add	x1, x0, #0x6, lsl #12
   14e80:	ldrh	w1, [x1, #1640]
   14e84:	lsr	w3, w22, #11
   14e88:	mul	w3, w3, w1
   14e8c:	cmp	w3, w24
   14e90:	b.ls	14f34 <lzma_mode_is_supported@@XZ_5.0+0x39a4>  // b.plast
   14e94:	add	x0, x0, #0x6, lsl #12
   14e98:	mov	w4, #0x800                 	// #2048
   14e9c:	sub	w4, w4, w1
   14ea0:	add	w1, w1, w4, lsr #5
   14ea4:	strh	w1, [x0, #1640]
   14ea8:	lsl	w27, w27, #1
   14eac:	mov	w22, w3
   14eb0:	mov	w0, #0xffffff              	// #16777215
   14eb4:	cmp	w22, w0
   14eb8:	b.hi	14ed4 <lzma_mode_is_supported@@XZ_5.0+0x3944>  // b.pmore
   14ebc:	cmp	x28, x21
   14ec0:	b.eq	14f5c <lzma_mode_is_supported@@XZ_5.0+0x39cc>  // b.none
   14ec4:	lsl	w22, w22, #8
   14ec8:	ldrb	w0, [x20, x28]
   14ecc:	orr	w24, w0, w24, lsl #8
   14ed0:	add	x28, x28, #0x1
   14ed4:	mov	w0, w27
   14ed8:	add	x0, x0, w2, uxtw #3
   14edc:	add	x0, x23, x0, lsl #1
   14ee0:	add	x1, x0, #0x6, lsl #12
   14ee4:	ldrh	w1, [x1, #1640]
   14ee8:	lsr	w3, w22, #11
   14eec:	mul	w3, w3, w1
   14ef0:	cmp	w3, w24
   14ef4:	b.ls	14f70 <lzma_mode_is_supported@@XZ_5.0+0x39e0>  // b.plast
   14ef8:	mov	w2, #0x800                 	// #2048
   14efc:	sub	w2, w2, w1
   14f00:	add	w1, w1, w2, lsr #5
   14f04:	and	w1, w1, #0xffff
   14f08:	lsl	w2, w27, #1
   14f0c:	add	x0, x0, #0x6, lsl #12
   14f10:	strh	w1, [x0, #1640]
   14f14:	sub	w0, w2, #0x6
   14f18:	str	w0, [sp, #108]
   14f1c:	b	15538 <lzma_mode_is_supported@@XZ_5.0+0x3fa8>
   14f20:	add	x0, x23, #0x4, lsl #12
   14f24:	mov	w1, #0x16                  	// #22
   14f28:	str	w1, [x0, #11936]
   14f2c:	mov	w0, #0x0                   	// #0
   14f30:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14f34:	sub	w22, w22, w3
   14f38:	sub	w24, w24, w3
   14f3c:	add	x0, x0, #0x6, lsl #12
   14f40:	sub	w1, w1, w1, lsr #5
   14f44:	strh	w1, [x0, #1640]
   14f48:	lsl	w0, w27, #1
   14f4c:	add	w27, w0, #0x1
   14f50:	b	14eb0 <lzma_mode_is_supported@@XZ_5.0+0x3920>
   14f54:	ldr	x25, [sp, #112]
   14f58:	b	14eb0 <lzma_mode_is_supported@@XZ_5.0+0x3920>
   14f5c:	add	x0, x23, #0x4, lsl #12
   14f60:	mov	w1, #0x17                  	// #23
   14f64:	str	w1, [x0, #11936]
   14f68:	mov	w0, #0x0                   	// #0
   14f6c:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   14f70:	sub	w24, w24, w3
   14f74:	sub	w1, w1, w1, lsr #5
   14f78:	and	w1, w1, #0xffff
   14f7c:	lsl	w2, w27, #1
   14f80:	add	w2, w2, #0x1
   14f84:	sub	w3, w22, w3
   14f88:	b	14f0c <lzma_mode_is_supported@@XZ_5.0+0x397c>
   14f8c:	sub	w22, w22, w1
   14f90:	sub	w24, w24, w1
   14f94:	add	x1, x23, #0x6, lsl #12
   14f98:	sub	w0, w0, w0, lsr #5
   14f9c:	strh	w0, [x1, #1636]
   14fa0:	b	14fa8 <lzma_mode_is_supported@@XZ_5.0+0x3a18>
   14fa4:	ldr	x25, [sp, #112]
   14fa8:	mov	w0, #0xffffff              	// #16777215
   14fac:	cmp	w22, w0
   14fb0:	b.hi	14fcc <lzma_mode_is_supported@@XZ_5.0+0x3a3c>  // b.pmore
   14fb4:	cmp	x28, x21
   14fb8:	b.eq	15000 <lzma_mode_is_supported@@XZ_5.0+0x3a70>  // b.none
   14fbc:	lsl	w22, w22, #8
   14fc0:	ldrb	w0, [x20, x28]
   14fc4:	orr	w24, w0, w24, lsl #8
   14fc8:	add	x28, x28, #0x1
   14fcc:	add	x0, x23, #0x6, lsl #12
   14fd0:	ldrh	w0, [x0, #1638]
   14fd4:	lsr	w1, w22, #11
   14fd8:	mul	w1, w1, w0
   14fdc:	cmp	w1, w24
   14fe0:	b.ls	151f8 <lzma_mode_is_supported@@XZ_5.0+0x3c68>  // b.plast
   14fe4:	add	x4, x23, #0x6, lsl #12
   14fe8:	mov	w3, #0x800                 	// #2048
   14fec:	sub	w3, w3, w0
   14ff0:	add	w0, w0, w3, lsr #5
   14ff4:	strh	w0, [x4, #1638]
   14ff8:	mov	w22, w1
   14ffc:	b	15018 <lzma_mode_is_supported@@XZ_5.0+0x3a88>
   15000:	add	x0, x23, #0x4, lsl #12
   15004:	mov	w1, #0x18                  	// #24
   15008:	str	w1, [x0, #11936]
   1500c:	mov	w0, #0x0                   	// #0
   15010:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15014:	ldr	x25, [sp, #112]
   15018:	mov	w0, #0xffffff              	// #16777215
   1501c:	cmp	w22, w0
   15020:	b.hi	1503c <lzma_mode_is_supported@@XZ_5.0+0x3aac>  // b.pmore
   15024:	cmp	x28, x21
   15028:	b.eq	15080 <lzma_mode_is_supported@@XZ_5.0+0x3af0>  // b.none
   1502c:	lsl	w22, w22, #8
   15030:	ldrb	w0, [x20, x28]
   15034:	orr	w24, w0, w24, lsl #8
   15038:	add	x28, x28, #0x1
   1503c:	mov	w0, w27
   15040:	add	x0, x0, w2, uxtw #3
   15044:	add	x0, x23, x0, lsl #1
   15048:	add	x1, x0, #0x6, lsl #12
   1504c:	ldrh	w1, [x1, #1896]
   15050:	lsr	w3, w22, #11
   15054:	mul	w3, w3, w1
   15058:	cmp	w3, w24
   1505c:	b.ls	15094 <lzma_mode_is_supported@@XZ_5.0+0x3b04>  // b.plast
   15060:	add	x0, x0, #0x6, lsl #12
   15064:	mov	w4, #0x800                 	// #2048
   15068:	sub	w4, w4, w1
   1506c:	add	w1, w1, w4, lsr #5
   15070:	strh	w1, [x0, #1896]
   15074:	lsl	w27, w27, #1
   15078:	mov	w22, w3
   1507c:	b	150b8 <lzma_mode_is_supported@@XZ_5.0+0x3b28>
   15080:	add	x0, x23, #0x4, lsl #12
   15084:	mov	w1, #0x19                  	// #25
   15088:	str	w1, [x0, #11936]
   1508c:	mov	w0, #0x0                   	// #0
   15090:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15094:	sub	w22, w22, w3
   15098:	sub	w24, w24, w3
   1509c:	add	x0, x0, #0x6, lsl #12
   150a0:	sub	w1, w1, w1, lsr #5
   150a4:	strh	w1, [x0, #1896]
   150a8:	lsl	w0, w27, #1
   150ac:	add	w27, w0, #0x1
   150b0:	b	150b8 <lzma_mode_is_supported@@XZ_5.0+0x3b28>
   150b4:	ldr	x25, [sp, #112]
   150b8:	mov	w0, #0xffffff              	// #16777215
   150bc:	cmp	w22, w0
   150c0:	b.hi	150dc <lzma_mode_is_supported@@XZ_5.0+0x3b4c>  // b.pmore
   150c4:	cmp	x28, x21
   150c8:	b.eq	1518c <lzma_mode_is_supported@@XZ_5.0+0x3bfc>  // b.none
   150cc:	lsl	w22, w22, #8
   150d0:	ldrb	w0, [x20, x28]
   150d4:	orr	w24, w0, w24, lsl #8
   150d8:	add	x28, x28, #0x1
   150dc:	mov	w0, w27
   150e0:	add	x0, x0, w2, uxtw #3
   150e4:	add	x0, x23, x0, lsl #1
   150e8:	add	x1, x0, #0x6, lsl #12
   150ec:	ldrh	w1, [x1, #1896]
   150f0:	lsr	w3, w22, #11
   150f4:	mul	w3, w3, w1
   150f8:	cmp	w3, w24
   150fc:	b.ls	151a0 <lzma_mode_is_supported@@XZ_5.0+0x3c10>  // b.plast
   15100:	add	x0, x0, #0x6, lsl #12
   15104:	mov	w4, #0x800                 	// #2048
   15108:	sub	w4, w4, w1
   1510c:	add	w1, w1, w4, lsr #5
   15110:	strh	w1, [x0, #1896]
   15114:	lsl	w27, w27, #1
   15118:	mov	w22, w3
   1511c:	mov	w0, #0xffffff              	// #16777215
   15120:	cmp	w22, w0
   15124:	b.hi	15140 <lzma_mode_is_supported@@XZ_5.0+0x3bb0>  // b.pmore
   15128:	cmp	x28, x21
   1512c:	b.eq	151c8 <lzma_mode_is_supported@@XZ_5.0+0x3c38>  // b.none
   15130:	lsl	w22, w22, #8
   15134:	ldrb	w0, [x20, x28]
   15138:	orr	w24, w0, w24, lsl #8
   1513c:	add	x28, x28, #0x1
   15140:	mov	w0, w27
   15144:	add	x0, x0, w2, uxtw #3
   15148:	add	x0, x23, x0, lsl #1
   1514c:	add	x1, x0, #0x6, lsl #12
   15150:	ldrh	w1, [x1, #1896]
   15154:	lsr	w3, w22, #11
   15158:	mul	w3, w3, w1
   1515c:	cmp	w3, w24
   15160:	b.ls	151dc <lzma_mode_is_supported@@XZ_5.0+0x3c4c>  // b.plast
   15164:	mov	w2, #0x800                 	// #2048
   15168:	sub	w2, w2, w1
   1516c:	add	w1, w1, w2, lsr #5
   15170:	and	w1, w1, #0xffff
   15174:	lsl	w2, w27, #1
   15178:	add	x0, x0, #0x6, lsl #12
   1517c:	strh	w1, [x0, #1896]
   15180:	add	w0, w2, #0x2
   15184:	str	w0, [sp, #108]
   15188:	b	15538 <lzma_mode_is_supported@@XZ_5.0+0x3fa8>
   1518c:	add	x0, x23, #0x4, lsl #12
   15190:	mov	w1, #0x1a                  	// #26
   15194:	str	w1, [x0, #11936]
   15198:	mov	w0, #0x0                   	// #0
   1519c:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   151a0:	sub	w22, w22, w3
   151a4:	sub	w24, w24, w3
   151a8:	add	x0, x0, #0x6, lsl #12
   151ac:	sub	w1, w1, w1, lsr #5
   151b0:	strh	w1, [x0, #1896]
   151b4:	lsl	w0, w27, #1
   151b8:	add	w27, w0, #0x1
   151bc:	b	1511c <lzma_mode_is_supported@@XZ_5.0+0x3b8c>
   151c0:	ldr	x25, [sp, #112]
   151c4:	b	1511c <lzma_mode_is_supported@@XZ_5.0+0x3b8c>
   151c8:	add	x0, x23, #0x4, lsl #12
   151cc:	mov	w1, #0x1b                  	// #27
   151d0:	str	w1, [x0, #11936]
   151d4:	mov	w0, #0x0                   	// #0
   151d8:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   151dc:	sub	w24, w24, w3
   151e0:	sub	w1, w1, w1, lsr #5
   151e4:	and	w1, w1, #0xffff
   151e8:	lsl	w2, w27, #1
   151ec:	add	w2, w2, #0x1
   151f0:	sub	w3, w22, w3
   151f4:	b	15178 <lzma_mode_is_supported@@XZ_5.0+0x3be8>
   151f8:	sub	w22, w22, w1
   151fc:	sub	w24, w24, w1
   15200:	add	x1, x23, #0x6, lsl #12
   15204:	sub	w0, w0, w0, lsr #5
   15208:	strh	w0, [x1, #1638]
   1520c:	b	15214 <lzma_mode_is_supported@@XZ_5.0+0x3c84>
   15210:	ldr	x25, [sp, #112]
   15214:	mov	w0, #0xffffff              	// #16777215
   15218:	cmp	w22, w0
   1521c:	b.hi	15238 <lzma_mode_is_supported@@XZ_5.0+0x3ca8>  // b.pmore
   15220:	cmp	x28, x21
   15224:	b.eq	15274 <lzma_mode_is_supported@@XZ_5.0+0x3ce4>  // b.none
   15228:	lsl	w22, w22, #8
   1522c:	ldrb	w0, [x20, x28]
   15230:	orr	w24, w0, w24, lsl #8
   15234:	add	x28, x28, #0x1
   15238:	add	x0, x23, w27, uxtw #1
   1523c:	add	x1, x0, #0x6, lsl #12
   15240:	ldrh	w1, [x1, #2152]
   15244:	lsr	w2, w22, #11
   15248:	mul	w2, w2, w1
   1524c:	cmp	w2, w24
   15250:	b.ls	15288 <lzma_mode_is_supported@@XZ_5.0+0x3cf8>  // b.plast
   15254:	add	x0, x0, #0x6, lsl #12
   15258:	mov	w3, #0x800                 	// #2048
   1525c:	sub	w3, w3, w1
   15260:	add	w1, w1, w3, lsr #5
   15264:	strh	w1, [x0, #2152]
   15268:	lsl	w27, w27, #1
   1526c:	mov	w22, w2
   15270:	b	152ac <lzma_mode_is_supported@@XZ_5.0+0x3d1c>
   15274:	add	x0, x23, #0x4, lsl #12
   15278:	mov	w1, #0x1c                  	// #28
   1527c:	str	w1, [x0, #11936]
   15280:	mov	w0, #0x0                   	// #0
   15284:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15288:	sub	w22, w22, w2
   1528c:	sub	w24, w24, w2
   15290:	add	x0, x0, #0x6, lsl #12
   15294:	sub	w1, w1, w1, lsr #5
   15298:	strh	w1, [x0, #2152]
   1529c:	lsl	w0, w27, #1
   152a0:	add	w27, w0, #0x1
   152a4:	b	152ac <lzma_mode_is_supported@@XZ_5.0+0x3d1c>
   152a8:	ldr	x25, [sp, #112]
   152ac:	mov	w0, #0xffffff              	// #16777215
   152b0:	cmp	w22, w0
   152b4:	b.hi	152d0 <lzma_mode_is_supported@@XZ_5.0+0x3d40>  // b.pmore
   152b8:	cmp	x28, x21
   152bc:	b.eq	15930 <lzma_mode_is_supported@@XZ_5.0+0x43a0>  // b.none
   152c0:	lsl	w22, w22, #8
   152c4:	ldrb	w0, [x20, x28]
   152c8:	orr	w24, w0, w24, lsl #8
   152cc:	add	x28, x28, #0x1
   152d0:	add	x0, x23, w27, uxtw #1
   152d4:	add	x1, x0, #0x6, lsl #12
   152d8:	ldrh	w1, [x1, #2152]
   152dc:	lsr	w2, w22, #11
   152e0:	mul	w2, w2, w1
   152e4:	cmp	w2, w24
   152e8:	b.ls	15944 <lzma_mode_is_supported@@XZ_5.0+0x43b4>  // b.plast
   152ec:	add	x0, x0, #0x6, lsl #12
   152f0:	mov	w3, #0x800                 	// #2048
   152f4:	sub	w3, w3, w1
   152f8:	add	w1, w1, w3, lsr #5
   152fc:	strh	w1, [x0, #2152]
   15300:	lsl	w27, w27, #1
   15304:	mov	w22, w2
   15308:	mov	w0, #0xffffff              	// #16777215
   1530c:	cmp	w22, w0
   15310:	b.hi	1532c <lzma_mode_is_supported@@XZ_5.0+0x3d9c>  // b.pmore
   15314:	cmp	x28, x21
   15318:	b.eq	1596c <lzma_mode_is_supported@@XZ_5.0+0x43dc>  // b.none
   1531c:	lsl	w22, w22, #8
   15320:	ldrb	w0, [x20, x28]
   15324:	orr	w24, w0, w24, lsl #8
   15328:	add	x28, x28, #0x1
   1532c:	add	x1, x23, w27, uxtw #1
   15330:	add	x0, x1, #0x6, lsl #12
   15334:	ldrh	w2, [x0, #2152]
   15338:	lsr	w0, w22, #11
   1533c:	mul	w0, w0, w2
   15340:	cmp	w0, w24
   15344:	b.ls	15980 <lzma_mode_is_supported@@XZ_5.0+0x43f0>  // b.plast
   15348:	add	x1, x1, #0x6, lsl #12
   1534c:	mov	w3, #0x800                 	// #2048
   15350:	sub	w3, w3, w2
   15354:	add	w2, w2, w3, lsr #5
   15358:	strh	w2, [x1, #2152]
   1535c:	lsl	w27, w27, #1
   15360:	mov	w22, w0
   15364:	mov	w0, #0xffffff              	// #16777215
   15368:	cmp	w22, w0
   1536c:	b.hi	15388 <lzma_mode_is_supported@@XZ_5.0+0x3df8>  // b.pmore
   15370:	cmp	x28, x21
   15374:	b.eq	159a8 <lzma_mode_is_supported@@XZ_5.0+0x4418>  // b.none
   15378:	lsl	w22, w22, #8
   1537c:	ldrb	w0, [x20, x28]
   15380:	orr	w24, w0, w24, lsl #8
   15384:	add	x28, x28, #0x1
   15388:	add	x1, x23, w27, uxtw #1
   1538c:	add	x0, x1, #0x6, lsl #12
   15390:	ldrh	w2, [x0, #2152]
   15394:	lsr	w0, w22, #11
   15398:	mul	w0, w0, w2
   1539c:	cmp	w0, w24
   153a0:	b.ls	159bc <lzma_mode_is_supported@@XZ_5.0+0x442c>  // b.plast
   153a4:	add	x1, x1, #0x6, lsl #12
   153a8:	mov	w3, #0x800                 	// #2048
   153ac:	sub	w3, w3, w2
   153b0:	add	w2, w2, w3, lsr #5
   153b4:	strh	w2, [x1, #2152]
   153b8:	lsl	w27, w27, #1
   153bc:	mov	w22, w0
   153c0:	mov	w0, #0xffffff              	// #16777215
   153c4:	cmp	w22, w0
   153c8:	b.hi	153e4 <lzma_mode_is_supported@@XZ_5.0+0x3e54>  // b.pmore
   153cc:	cmp	x28, x21
   153d0:	b.eq	159e4 <lzma_mode_is_supported@@XZ_5.0+0x4454>  // b.none
   153d4:	lsl	w22, w22, #8
   153d8:	ldrb	w0, [x20, x28]
   153dc:	orr	w24, w0, w24, lsl #8
   153e0:	add	x28, x28, #0x1
   153e4:	add	x1, x23, w27, uxtw #1
   153e8:	add	x0, x1, #0x6, lsl #12
   153ec:	ldrh	w2, [x0, #2152]
   153f0:	lsr	w0, w22, #11
   153f4:	mul	w0, w0, w2
   153f8:	cmp	w0, w24
   153fc:	b.ls	159f8 <lzma_mode_is_supported@@XZ_5.0+0x4468>  // b.plast
   15400:	add	x1, x1, #0x6, lsl #12
   15404:	mov	w3, #0x800                 	// #2048
   15408:	sub	w3, w3, w2
   1540c:	add	w2, w2, w3, lsr #5
   15410:	strh	w2, [x1, #2152]
   15414:	lsl	w27, w27, #1
   15418:	mov	w22, w0
   1541c:	mov	w0, #0xffffff              	// #16777215
   15420:	cmp	w22, w0
   15424:	b.hi	15440 <lzma_mode_is_supported@@XZ_5.0+0x3eb0>  // b.pmore
   15428:	cmp	x28, x21
   1542c:	b.eq	15a20 <lzma_mode_is_supported@@XZ_5.0+0x4490>  // b.none
   15430:	lsl	w22, w22, #8
   15434:	ldrb	w0, [x20, x28]
   15438:	orr	w24, w0, w24, lsl #8
   1543c:	add	x28, x28, #0x1
   15440:	add	x1, x23, w27, uxtw #1
   15444:	add	x0, x1, #0x6, lsl #12
   15448:	ldrh	w2, [x0, #2152]
   1544c:	lsr	w0, w22, #11
   15450:	mul	w0, w0, w2
   15454:	cmp	w0, w24
   15458:	b.ls	15a34 <lzma_mode_is_supported@@XZ_5.0+0x44a4>  // b.plast
   1545c:	add	x1, x1, #0x6, lsl #12
   15460:	mov	w3, #0x800                 	// #2048
   15464:	sub	w3, w3, w2
   15468:	add	w2, w2, w3, lsr #5
   1546c:	strh	w2, [x1, #2152]
   15470:	lsl	w27, w27, #1
   15474:	mov	w22, w0
   15478:	mov	w0, #0xffffff              	// #16777215
   1547c:	cmp	w22, w0
   15480:	b.hi	1549c <lzma_mode_is_supported@@XZ_5.0+0x3f0c>  // b.pmore
   15484:	cmp	x28, x21
   15488:	b.eq	15a5c <lzma_mode_is_supported@@XZ_5.0+0x44cc>  // b.none
   1548c:	lsl	w22, w22, #8
   15490:	ldrb	w0, [x20, x28]
   15494:	orr	w24, w0, w24, lsl #8
   15498:	add	x28, x28, #0x1
   1549c:	add	x1, x23, w27, uxtw #1
   154a0:	add	x0, x1, #0x6, lsl #12
   154a4:	ldrh	w2, [x0, #2152]
   154a8:	lsr	w0, w22, #11
   154ac:	mul	w0, w0, w2
   154b0:	cmp	w0, w24
   154b4:	b.ls	15a70 <lzma_mode_is_supported@@XZ_5.0+0x44e0>  // b.plast
   154b8:	add	x1, x1, #0x6, lsl #12
   154bc:	mov	w3, #0x800                 	// #2048
   154c0:	sub	w3, w3, w2
   154c4:	add	w2, w2, w3, lsr #5
   154c8:	strh	w2, [x1, #2152]
   154cc:	lsl	w27, w27, #1
   154d0:	mov	w22, w0
   154d4:	mov	w0, #0xffffff              	// #16777215
   154d8:	cmp	w22, w0
   154dc:	b.hi	154f8 <lzma_mode_is_supported@@XZ_5.0+0x3f68>  // b.pmore
   154e0:	cmp	x28, x21
   154e4:	b.eq	15a98 <lzma_mode_is_supported@@XZ_5.0+0x4508>  // b.none
   154e8:	lsl	w22, w22, #8
   154ec:	ldrb	w0, [x20, x28]
   154f0:	orr	w24, w0, w24, lsl #8
   154f4:	add	x28, x28, #0x1
   154f8:	add	x1, x23, w27, uxtw #1
   154fc:	add	x0, x1, #0x6, lsl #12
   15500:	ldrh	w0, [x0, #2152]
   15504:	lsr	w3, w22, #11
   15508:	mul	w3, w3, w0
   1550c:	cmp	w3, w24
   15510:	b.ls	15aac <lzma_mode_is_supported@@XZ_5.0+0x451c>  // b.plast
   15514:	mov	w2, #0x800                 	// #2048
   15518:	sub	w2, w2, w0
   1551c:	add	w0, w0, w2, lsr #5
   15520:	and	w0, w0, #0xffff
   15524:	lsl	w2, w27, #1
   15528:	add	x1, x1, #0x6, lsl #12
   1552c:	strh	w0, [x1, #2152]
   15530:	sub	w0, w2, #0xee
   15534:	str	w0, [sp, #108]
   15538:	ldr	w1, [sp, #108]
   1553c:	cmp	w1, #0x5
   15540:	mov	w0, #0x5                   	// #5
   15544:	csel	w0, w1, w0, ls  // ls = plast
   15548:	sub	w0, w0, #0x2
   1554c:	add	x0, x23, x0, lsl #7
   15550:	add	x0, x0, #0x6, lsl #12
   15554:	add	x0, x0, #0x360
   15558:	str	x0, [sp, #96]
   1555c:	mov	w27, #0x1                   	// #1
   15560:	mov	w0, #0xffffff              	// #16777215
   15564:	cmp	w3, w0
   15568:	b.hi	15584 <lzma_mode_is_supported@@XZ_5.0+0x3ff4>  // b.pmore
   1556c:	cmp	x28, x21
   15570:	b.eq	15ad4 <lzma_mode_is_supported@@XZ_5.0+0x4544>  // b.none
   15574:	lsl	w3, w3, #8
   15578:	ldrb	w0, [x20, x28]
   1557c:	orr	w24, w0, w24, lsl #8
   15580:	add	x28, x28, #0x1
   15584:	ubfiz	x2, x27, #1, #32
   15588:	ldr	x4, [sp, #96]
   1558c:	ldrh	w1, [x4, x2]
   15590:	lsr	w0, w3, #11
   15594:	mul	w0, w0, w1
   15598:	cmp	w0, w24
   1559c:	b.ls	15aec <lzma_mode_is_supported@@XZ_5.0+0x455c>  // b.plast
   155a0:	mov	w3, #0x800                 	// #2048
   155a4:	sub	w3, w3, w1
   155a8:	add	w1, w1, w3, lsr #5
   155ac:	strh	w1, [x4, x2]
   155b0:	lsl	w27, w27, #1
   155b4:	mov	w22, w0
   155b8:	mov	w0, #0xffffff              	// #16777215
   155bc:	cmp	w22, w0
   155c0:	b.hi	155dc <lzma_mode_is_supported@@XZ_5.0+0x404c>  // b.pmore
   155c4:	cmp	x28, x21
   155c8:	b.eq	15b14 <lzma_mode_is_supported@@XZ_5.0+0x4584>  // b.none
   155cc:	lsl	w22, w22, #8
   155d0:	ldrb	w0, [x20, x28]
   155d4:	orr	w24, w0, w24, lsl #8
   155d8:	add	x28, x28, #0x1
   155dc:	ubfiz	x2, x27, #1, #32
   155e0:	ldr	x4, [sp, #96]
   155e4:	ldrh	w1, [x4, x2]
   155e8:	lsr	w0, w22, #11
   155ec:	mul	w0, w0, w1
   155f0:	cmp	w0, w24
   155f4:	b.ls	15b28 <lzma_mode_is_supported@@XZ_5.0+0x4598>  // b.plast
   155f8:	mov	w3, #0x800                 	// #2048
   155fc:	sub	w3, w3, w1
   15600:	add	w1, w1, w3, lsr #5
   15604:	strh	w1, [x4, x2]
   15608:	lsl	w27, w27, #1
   1560c:	mov	w22, w0
   15610:	mov	w0, #0xffffff              	// #16777215
   15614:	cmp	w22, w0
   15618:	b.hi	15634 <lzma_mode_is_supported@@XZ_5.0+0x40a4>  // b.pmore
   1561c:	cmp	x28, x21
   15620:	b.eq	15b50 <lzma_mode_is_supported@@XZ_5.0+0x45c0>  // b.none
   15624:	lsl	w22, w22, #8
   15628:	ldrb	w0, [x20, x28]
   1562c:	orr	w24, w0, w24, lsl #8
   15630:	add	x28, x28, #0x1
   15634:	ubfiz	x2, x27, #1, #32
   15638:	ldr	x4, [sp, #96]
   1563c:	ldrh	w1, [x4, x2]
   15640:	lsr	w0, w22, #11
   15644:	mul	w0, w0, w1
   15648:	cmp	w0, w24
   1564c:	b.ls	15b64 <lzma_mode_is_supported@@XZ_5.0+0x45d4>  // b.plast
   15650:	mov	w3, #0x800                 	// #2048
   15654:	sub	w3, w3, w1
   15658:	add	w1, w1, w3, lsr #5
   1565c:	strh	w1, [x4, x2]
   15660:	lsl	w27, w27, #1
   15664:	mov	w22, w0
   15668:	mov	w0, #0xffffff              	// #16777215
   1566c:	cmp	w22, w0
   15670:	b.hi	1568c <lzma_mode_is_supported@@XZ_5.0+0x40fc>  // b.pmore
   15674:	cmp	x28, x21
   15678:	b.eq	15b8c <lzma_mode_is_supported@@XZ_5.0+0x45fc>  // b.none
   1567c:	lsl	w22, w22, #8
   15680:	ldrb	w0, [x20, x28]
   15684:	orr	w24, w0, w24, lsl #8
   15688:	add	x28, x28, #0x1
   1568c:	ubfiz	x2, x27, #1, #32
   15690:	ldr	x4, [sp, #96]
   15694:	ldrh	w1, [x4, x2]
   15698:	lsr	w0, w22, #11
   1569c:	mul	w0, w0, w1
   156a0:	cmp	w0, w24
   156a4:	b.ls	15ba0 <lzma_mode_is_supported@@XZ_5.0+0x4610>  // b.plast
   156a8:	mov	w3, #0x800                 	// #2048
   156ac:	sub	w3, w3, w1
   156b0:	add	w1, w1, w3, lsr #5
   156b4:	strh	w1, [x4, x2]
   156b8:	lsl	w27, w27, #1
   156bc:	mov	w22, w0
   156c0:	mov	w0, #0xffffff              	// #16777215
   156c4:	cmp	w22, w0
   156c8:	b.hi	156e4 <lzma_mode_is_supported@@XZ_5.0+0x4154>  // b.pmore
   156cc:	cmp	x28, x21
   156d0:	b.eq	15bc8 <lzma_mode_is_supported@@XZ_5.0+0x4638>  // b.none
   156d4:	lsl	w22, w22, #8
   156d8:	ldrb	w0, [x20, x28]
   156dc:	orr	w24, w0, w24, lsl #8
   156e0:	add	x28, x28, #0x1
   156e4:	ubfiz	x3, x27, #1, #32
   156e8:	ldr	x4, [sp, #96]
   156ec:	ldrh	w1, [x4, x3]
   156f0:	lsr	w0, w22, #11
   156f4:	mul	w0, w0, w1
   156f8:	cmp	w0, w24
   156fc:	b.ls	15bdc <lzma_mode_is_supported@@XZ_5.0+0x464c>  // b.plast
   15700:	mov	w2, #0x800                 	// #2048
   15704:	sub	w2, w2, w1
   15708:	add	w1, w1, w2, lsr #5
   1570c:	strh	w1, [x4, x3]
   15710:	lsl	w27, w27, #1
   15714:	mov	w2, w0
   15718:	mov	w0, #0xffffff              	// #16777215
   1571c:	cmp	w2, w0
   15720:	b.hi	1573c <lzma_mode_is_supported@@XZ_5.0+0x41ac>  // b.pmore
   15724:	cmp	x28, x21
   15728:	b.eq	15c08 <lzma_mode_is_supported@@XZ_5.0+0x4678>  // b.none
   1572c:	lsl	w2, w2, #8
   15730:	ldrb	w0, [x20, x28]
   15734:	orr	w24, w0, w24, lsl #8
   15738:	add	x28, x28, #0x1
   1573c:	ubfiz	x0, x27, #1, #32
   15740:	ldr	x1, [sp, #96]
   15744:	add	x3, x1, x0
   15748:	ldrh	w0, [x1, x0]
   1574c:	lsr	w22, w2, #11
   15750:	mul	w22, w22, w0
   15754:	cmp	w22, w24
   15758:	b.ls	15c20 <lzma_mode_is_supported@@XZ_5.0+0x4690>  // b.plast
   1575c:	mov	w1, #0x800                 	// #2048
   15760:	sub	w1, w1, w0
   15764:	add	w0, w0, w1, lsr #5
   15768:	and	w0, w0, #0xffff
   1576c:	lsl	w1, w27, #1
   15770:	strh	w0, [x3]
   15774:	sub	w2, w1, #0x40
   15778:	str	w2, [sp, #144]
   1577c:	cmp	w2, #0x3
   15780:	b.ls	16238 <lzma_mode_is_supported@@XZ_5.0+0x4ca8>  // b.plast
   15784:	lsr	w0, w2, #1
   15788:	and	w1, w2, #0x1
   1578c:	add	w1, w1, #0x2
   15790:	cmp	w2, #0xd
   15794:	b.hi	15e9c <lzma_mode_is_supported@@XZ_5.0+0x490c>  // b.pmore
   15798:	sub	w0, w0, #0x1
   1579c:	str	w0, [sp, #184]
   157a0:	lsl	w1, w1, w0
   157a4:	mov	w0, w1
   157a8:	sub	x0, x0, w2, uxtw
   157ac:	add	x0, x23, x0, lsl #1
   157b0:	add	x0, x0, #0x6, lsl #12
   157b4:	add	x0, x0, #0x55e
   157b8:	str	x0, [sp, #96]
   157bc:	str	wzr, [sp, #148]
   157c0:	mov	w27, #0x1                   	// #1
   157c4:	ldr	w0, [sp, #184]
   157c8:	cmp	w0, #0x3
   157cc:	b.eq	158c0 <lzma_mode_is_supported@@XZ_5.0+0x4330>  // b.none
   157d0:	b.ls	15c48 <lzma_mode_is_supported@@XZ_5.0+0x46b8>  // b.plast
   157d4:	ldr	w0, [sp, #184]
   157d8:	cmp	w0, #0x4
   157dc:	b.eq	15854 <lzma_mode_is_supported@@XZ_5.0+0x42c4>  // b.none
   157e0:	cmp	w0, #0x5
   157e4:	b.ne	163a8 <lzma_mode_is_supported@@XZ_5.0+0x4e18>  // b.any
   157e8:	mov	w0, #0xffffff              	// #16777215
   157ec:	cmp	w22, w0
   157f0:	b.hi	1580c <lzma_mode_is_supported@@XZ_5.0+0x427c>  // b.pmore
   157f4:	cmp	x28, x21
   157f8:	b.eq	15d30 <lzma_mode_is_supported@@XZ_5.0+0x47a0>  // b.none
   157fc:	lsl	w22, w22, #8
   15800:	ldrb	w0, [x20, x28]
   15804:	orr	w24, w0, w24, lsl #8
   15808:	add	x28, x28, #0x1
   1580c:	ubfiz	x0, x27, #1, #32
   15810:	ldr	x2, [sp, #96]
   15814:	add	x4, x2, x0
   15818:	ldrh	w0, [x2, x0]
   1581c:	lsr	w2, w22, #11
   15820:	mul	w2, w2, w0
   15824:	cmp	w2, w24
   15828:	b.ls	15d48 <lzma_mode_is_supported@@XZ_5.0+0x47b8>  // b.plast
   1582c:	mov	w3, #0x800                 	// #2048
   15830:	sub	w3, w3, w0
   15834:	add	w0, w0, w3, lsr #5
   15838:	and	w0, w0, #0xffff
   1583c:	lsl	w27, w27, #1
   15840:	mov	w22, w2
   15844:	strh	w0, [x4]
   15848:	ldr	w0, [sp, #148]
   1584c:	add	w0, w0, #0x1
   15850:	str	w0, [sp, #148]
   15854:	mov	w0, #0xffffff              	// #16777215
   15858:	cmp	w22, w0
   1585c:	b.hi	15878 <lzma_mode_is_supported@@XZ_5.0+0x42e8>  // b.pmore
   15860:	cmp	x28, x21
   15864:	b.eq	15d68 <lzma_mode_is_supported@@XZ_5.0+0x47d8>  // b.none
   15868:	lsl	w22, w22, #8
   1586c:	ldrb	w0, [x20, x28]
   15870:	orr	w24, w0, w24, lsl #8
   15874:	add	x28, x28, #0x1
   15878:	ubfiz	x0, x27, #1, #32
   1587c:	ldr	x2, [sp, #96]
   15880:	add	x4, x2, x0
   15884:	ldrh	w0, [x2, x0]
   15888:	lsr	w2, w22, #11
   1588c:	mul	w2, w2, w0
   15890:	cmp	w2, w24
   15894:	b.ls	15d88 <lzma_mode_is_supported@@XZ_5.0+0x47f8>  // b.plast
   15898:	mov	w3, #0x800                 	// #2048
   1589c:	sub	w3, w3, w0
   158a0:	add	w0, w0, w3, lsr #5
   158a4:	and	w0, w0, #0xffff
   158a8:	lsl	w27, w27, #1
   158ac:	mov	w22, w2
   158b0:	strh	w0, [x4]
   158b4:	ldr	w0, [sp, #148]
   158b8:	add	w0, w0, #0x1
   158bc:	str	w0, [sp, #148]
   158c0:	mov	w0, #0xffffff              	// #16777215
   158c4:	cmp	w22, w0
   158c8:	b.hi	158e4 <lzma_mode_is_supported@@XZ_5.0+0x4354>  // b.pmore
   158cc:	cmp	x28, x21
   158d0:	b.eq	15db4 <lzma_mode_is_supported@@XZ_5.0+0x4824>  // b.none
   158d4:	lsl	w22, w22, #8
   158d8:	ldrb	w0, [x20, x28]
   158dc:	orr	w24, w0, w24, lsl #8
   158e0:	add	x28, x28, #0x1
   158e4:	ubfiz	x0, x27, #1, #32
   158e8:	ldr	x2, [sp, #96]
   158ec:	add	x4, x2, x0
   158f0:	ldrh	w0, [x2, x0]
   158f4:	lsr	w2, w22, #11
   158f8:	mul	w2, w2, w0
   158fc:	cmp	w2, w24
   15900:	b.ls	15dd4 <lzma_mode_is_supported@@XZ_5.0+0x4844>  // b.plast
   15904:	mov	w3, #0x800                 	// #2048
   15908:	sub	w3, w3, w0
   1590c:	add	w0, w0, w3, lsr #5
   15910:	and	w0, w0, #0xffff
   15914:	lsl	w27, w27, #1
   15918:	mov	w22, w2
   1591c:	strh	w0, [x4]
   15920:	ldr	w0, [sp, #148]
   15924:	add	w0, w0, #0x1
   15928:	str	w0, [sp, #148]
   1592c:	b	15c58 <lzma_mode_is_supported@@XZ_5.0+0x46c8>
   15930:	add	x0, x23, #0x4, lsl #12
   15934:	mov	w1, #0x1d                  	// #29
   15938:	str	w1, [x0, #11936]
   1593c:	mov	w0, #0x0                   	// #0
   15940:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15944:	sub	w22, w22, w2
   15948:	sub	w24, w24, w2
   1594c:	add	x0, x0, #0x6, lsl #12
   15950:	sub	w1, w1, w1, lsr #5
   15954:	strh	w1, [x0, #2152]
   15958:	lsl	w0, w27, #1
   1595c:	add	w27, w0, #0x1
   15960:	b	15308 <lzma_mode_is_supported@@XZ_5.0+0x3d78>
   15964:	ldr	x25, [sp, #112]
   15968:	b	15308 <lzma_mode_is_supported@@XZ_5.0+0x3d78>
   1596c:	add	x0, x23, #0x4, lsl #12
   15970:	mov	w1, #0x1e                  	// #30
   15974:	str	w1, [x0, #11936]
   15978:	mov	w0, #0x0                   	// #0
   1597c:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15980:	sub	w22, w22, w0
   15984:	sub	w24, w24, w0
   15988:	add	x1, x1, #0x6, lsl #12
   1598c:	sub	w2, w2, w2, lsr #5
   15990:	strh	w2, [x1, #2152]
   15994:	lsl	w0, w27, #1
   15998:	add	w27, w0, #0x1
   1599c:	b	15364 <lzma_mode_is_supported@@XZ_5.0+0x3dd4>
   159a0:	ldr	x25, [sp, #112]
   159a4:	b	15364 <lzma_mode_is_supported@@XZ_5.0+0x3dd4>
   159a8:	add	x0, x23, #0x4, lsl #12
   159ac:	mov	w1, #0x1f                  	// #31
   159b0:	str	w1, [x0, #11936]
   159b4:	mov	w0, #0x0                   	// #0
   159b8:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   159bc:	sub	w22, w22, w0
   159c0:	sub	w24, w24, w0
   159c4:	add	x1, x1, #0x6, lsl #12
   159c8:	sub	w2, w2, w2, lsr #5
   159cc:	strh	w2, [x1, #2152]
   159d0:	lsl	w0, w27, #1
   159d4:	add	w27, w0, #0x1
   159d8:	b	153c0 <lzma_mode_is_supported@@XZ_5.0+0x3e30>
   159dc:	ldr	x25, [sp, #112]
   159e0:	b	153c0 <lzma_mode_is_supported@@XZ_5.0+0x3e30>
   159e4:	add	x0, x23, #0x4, lsl #12
   159e8:	mov	w1, #0x20                  	// #32
   159ec:	str	w1, [x0, #11936]
   159f0:	mov	w0, #0x0                   	// #0
   159f4:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   159f8:	sub	w22, w22, w0
   159fc:	sub	w24, w24, w0
   15a00:	add	x1, x1, #0x6, lsl #12
   15a04:	sub	w2, w2, w2, lsr #5
   15a08:	strh	w2, [x1, #2152]
   15a0c:	lsl	w0, w27, #1
   15a10:	add	w27, w0, #0x1
   15a14:	b	1541c <lzma_mode_is_supported@@XZ_5.0+0x3e8c>
   15a18:	ldr	x25, [sp, #112]
   15a1c:	b	1541c <lzma_mode_is_supported@@XZ_5.0+0x3e8c>
   15a20:	add	x0, x23, #0x4, lsl #12
   15a24:	mov	w1, #0x21                  	// #33
   15a28:	str	w1, [x0, #11936]
   15a2c:	mov	w0, #0x0                   	// #0
   15a30:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15a34:	sub	w22, w22, w0
   15a38:	sub	w24, w24, w0
   15a3c:	add	x1, x1, #0x6, lsl #12
   15a40:	sub	w2, w2, w2, lsr #5
   15a44:	strh	w2, [x1, #2152]
   15a48:	lsl	w0, w27, #1
   15a4c:	add	w27, w0, #0x1
   15a50:	b	15478 <lzma_mode_is_supported@@XZ_5.0+0x3ee8>
   15a54:	ldr	x25, [sp, #112]
   15a58:	b	15478 <lzma_mode_is_supported@@XZ_5.0+0x3ee8>
   15a5c:	add	x0, x23, #0x4, lsl #12
   15a60:	mov	w1, #0x22                  	// #34
   15a64:	str	w1, [x0, #11936]
   15a68:	mov	w0, #0x0                   	// #0
   15a6c:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15a70:	sub	w22, w22, w0
   15a74:	sub	w24, w24, w0
   15a78:	add	x1, x1, #0x6, lsl #12
   15a7c:	sub	w2, w2, w2, lsr #5
   15a80:	strh	w2, [x1, #2152]
   15a84:	lsl	w0, w27, #1
   15a88:	add	w27, w0, #0x1
   15a8c:	b	154d4 <lzma_mode_is_supported@@XZ_5.0+0x3f44>
   15a90:	ldr	x25, [sp, #112]
   15a94:	b	154d4 <lzma_mode_is_supported@@XZ_5.0+0x3f44>
   15a98:	add	x0, x23, #0x4, lsl #12
   15a9c:	mov	w1, #0x23                  	// #35
   15aa0:	str	w1, [x0, #11936]
   15aa4:	mov	w0, #0x0                   	// #0
   15aa8:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15aac:	sub	w24, w24, w3
   15ab0:	sub	w0, w0, w0, lsr #5
   15ab4:	and	w0, w0, #0xffff
   15ab8:	lsl	w2, w27, #1
   15abc:	add	w2, w2, #0x1
   15ac0:	sub	w3, w22, w3
   15ac4:	b	15528 <lzma_mode_is_supported@@XZ_5.0+0x3f98>
   15ac8:	ldr	x25, [sp, #112]
   15acc:	mov	w3, w22
   15ad0:	b	15560 <lzma_mode_is_supported@@XZ_5.0+0x3fd0>
   15ad4:	add	x0, x23, #0x4, lsl #12
   15ad8:	mov	w1, #0x24                  	// #36
   15adc:	str	w1, [x0, #11936]
   15ae0:	mov	w22, w3
   15ae4:	mov	w0, #0x0                   	// #0
   15ae8:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15aec:	sub	w22, w3, w0
   15af0:	sub	w24, w24, w0
   15af4:	sub	w1, w1, w1, lsr #5
   15af8:	ldr	x0, [sp, #96]
   15afc:	strh	w1, [x0, x2]
   15b00:	lsl	w0, w27, #1
   15b04:	add	w27, w0, #0x1
   15b08:	b	155b8 <lzma_mode_is_supported@@XZ_5.0+0x4028>
   15b0c:	ldr	x25, [sp, #112]
   15b10:	b	155b8 <lzma_mode_is_supported@@XZ_5.0+0x4028>
   15b14:	add	x0, x23, #0x4, lsl #12
   15b18:	mov	w1, #0x25                  	// #37
   15b1c:	str	w1, [x0, #11936]
   15b20:	mov	w0, #0x0                   	// #0
   15b24:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15b28:	sub	w22, w22, w0
   15b2c:	sub	w24, w24, w0
   15b30:	sub	w1, w1, w1, lsr #5
   15b34:	ldr	x0, [sp, #96]
   15b38:	strh	w1, [x0, x2]
   15b3c:	lsl	w0, w27, #1
   15b40:	add	w27, w0, #0x1
   15b44:	b	15610 <lzma_mode_is_supported@@XZ_5.0+0x4080>
   15b48:	ldr	x25, [sp, #112]
   15b4c:	b	15610 <lzma_mode_is_supported@@XZ_5.0+0x4080>
   15b50:	add	x0, x23, #0x4, lsl #12
   15b54:	mov	w1, #0x26                  	// #38
   15b58:	str	w1, [x0, #11936]
   15b5c:	mov	w0, #0x0                   	// #0
   15b60:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15b64:	sub	w22, w22, w0
   15b68:	sub	w24, w24, w0
   15b6c:	sub	w1, w1, w1, lsr #5
   15b70:	ldr	x0, [sp, #96]
   15b74:	strh	w1, [x0, x2]
   15b78:	lsl	w0, w27, #1
   15b7c:	add	w27, w0, #0x1
   15b80:	b	15668 <lzma_mode_is_supported@@XZ_5.0+0x40d8>
   15b84:	ldr	x25, [sp, #112]
   15b88:	b	15668 <lzma_mode_is_supported@@XZ_5.0+0x40d8>
   15b8c:	add	x0, x23, #0x4, lsl #12
   15b90:	mov	w1, #0x27                  	// #39
   15b94:	str	w1, [x0, #11936]
   15b98:	mov	w0, #0x0                   	// #0
   15b9c:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15ba0:	sub	w22, w22, w0
   15ba4:	sub	w24, w24, w0
   15ba8:	sub	w1, w1, w1, lsr #5
   15bac:	ldr	x0, [sp, #96]
   15bb0:	strh	w1, [x0, x2]
   15bb4:	lsl	w0, w27, #1
   15bb8:	add	w27, w0, #0x1
   15bbc:	b	156c0 <lzma_mode_is_supported@@XZ_5.0+0x4130>
   15bc0:	ldr	x25, [sp, #112]
   15bc4:	b	156c0 <lzma_mode_is_supported@@XZ_5.0+0x4130>
   15bc8:	add	x0, x23, #0x4, lsl #12
   15bcc:	mov	w1, #0x28                  	// #40
   15bd0:	str	w1, [x0, #11936]
   15bd4:	mov	w0, #0x0                   	// #0
   15bd8:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15bdc:	sub	w2, w22, w0
   15be0:	sub	w24, w24, w0
   15be4:	sub	w1, w1, w1, lsr #5
   15be8:	ldr	x0, [sp, #96]
   15bec:	strh	w1, [x0, x3]
   15bf0:	lsl	w0, w27, #1
   15bf4:	add	w27, w0, #0x1
   15bf8:	b	15718 <lzma_mode_is_supported@@XZ_5.0+0x4188>
   15bfc:	ldr	x25, [sp, #112]
   15c00:	mov	w2, w22
   15c04:	b	15718 <lzma_mode_is_supported@@XZ_5.0+0x4188>
   15c08:	add	x0, x23, #0x4, lsl #12
   15c0c:	mov	w1, #0x29                  	// #41
   15c10:	str	w1, [x0, #11936]
   15c14:	mov	w22, w2
   15c18:	mov	w0, #0x0                   	// #0
   15c1c:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15c20:	sub	w24, w24, w22
   15c24:	sub	w0, w0, w0, lsr #5
   15c28:	and	w0, w0, #0xffff
   15c2c:	lsl	w1, w27, #1
   15c30:	add	w1, w1, #0x1
   15c34:	sub	w22, w2, w22
   15c38:	b	15770 <lzma_mode_is_supported@@XZ_5.0+0x41e0>
   15c3c:	ldr	x25, [sp, #112]
   15c40:	ldr	w1, [sp, #144]
   15c44:	b	157c4 <lzma_mode_is_supported@@XZ_5.0+0x4234>
   15c48:	cmp	w0, #0x1
   15c4c:	b.eq	15cc4 <lzma_mode_is_supported@@XZ_5.0+0x4734>  // b.none
   15c50:	cmp	w0, #0x2
   15c54:	b.ne	15d28 <lzma_mode_is_supported@@XZ_5.0+0x4798>  // b.any
   15c58:	mov	w0, #0xffffff              	// #16777215
   15c5c:	cmp	w22, w0
   15c60:	b.hi	15c7c <lzma_mode_is_supported@@XZ_5.0+0x46ec>  // b.pmore
   15c64:	cmp	x28, x21
   15c68:	b.eq	15e00 <lzma_mode_is_supported@@XZ_5.0+0x4870>  // b.none
   15c6c:	lsl	w22, w22, #8
   15c70:	ldrb	w0, [x20, x28]
   15c74:	orr	w24, w0, w24, lsl #8
   15c78:	add	x28, x28, #0x1
   15c7c:	ubfiz	x0, x27, #1, #32
   15c80:	ldr	x2, [sp, #96]
   15c84:	add	x4, x2, x0
   15c88:	ldrh	w0, [x2, x0]
   15c8c:	lsr	w2, w22, #11
   15c90:	mul	w2, w2, w0
   15c94:	cmp	w2, w24
   15c98:	b.ls	15e20 <lzma_mode_is_supported@@XZ_5.0+0x4890>  // b.plast
   15c9c:	mov	w3, #0x800                 	// #2048
   15ca0:	sub	w3, w3, w0
   15ca4:	add	w0, w0, w3, lsr #5
   15ca8:	and	w0, w0, #0xffff
   15cac:	lsl	w27, w27, #1
   15cb0:	mov	w22, w2
   15cb4:	strh	w0, [x4]
   15cb8:	ldr	w0, [sp, #148]
   15cbc:	add	w0, w0, #0x1
   15cc0:	str	w0, [sp, #148]
   15cc4:	mov	w0, #0xffffff              	// #16777215
   15cc8:	cmp	w22, w0
   15ccc:	b.hi	15ce8 <lzma_mode_is_supported@@XZ_5.0+0x4758>  // b.pmore
   15cd0:	cmp	x28, x21
   15cd4:	b.eq	15e4c <lzma_mode_is_supported@@XZ_5.0+0x48bc>  // b.none
   15cd8:	lsl	w22, w22, #8
   15cdc:	ldrb	w0, [x20, x28]
   15ce0:	orr	w24, w0, w24, lsl #8
   15ce4:	add	x28, x28, #0x1
   15ce8:	ubfiz	x3, x27, #1, #32
   15cec:	ldr	x5, [sp, #96]
   15cf0:	ldrh	w2, [x5, x3]
   15cf4:	lsr	w0, w22, #11
   15cf8:	mul	w0, w0, w2
   15cfc:	cmp	w0, w24
   15d00:	b.ls	15e6c <lzma_mode_is_supported@@XZ_5.0+0x48dc>  // b.plast
   15d04:	mov	w4, #0x800                 	// #2048
   15d08:	sub	w4, w4, w2
   15d0c:	add	w2, w2, w4, lsr #5
   15d10:	strh	w2, [x5, x3]
   15d14:	mov	w22, w0
   15d18:	str	w1, [sp, #144]
   15d1c:	mov	w0, #0x1                   	// #1
   15d20:	str	w0, [sp, #184]
   15d24:	b	1623c <lzma_mode_is_supported@@XZ_5.0+0x4cac>
   15d28:	str	w1, [sp, #144]
   15d2c:	b	1623c <lzma_mode_is_supported@@XZ_5.0+0x4cac>
   15d30:	add	x0, x23, #0x4, lsl #12
   15d34:	mov	w2, #0x2a                  	// #42
   15d38:	str	w2, [x0, #11936]
   15d3c:	str	w1, [sp, #144]
   15d40:	mov	w0, #0x0                   	// #0
   15d44:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15d48:	sub	w22, w22, w2
   15d4c:	sub	w24, w24, w2
   15d50:	sub	w0, w0, w0, lsr #5
   15d54:	and	w0, w0, #0xffff
   15d58:	lsl	w2, w27, #1
   15d5c:	add	w27, w2, #0x1
   15d60:	add	w1, w1, #0x1
   15d64:	b	15844 <lzma_mode_is_supported@@XZ_5.0+0x42b4>
   15d68:	add	x0, x23, #0x4, lsl #12
   15d6c:	mov	w2, #0x2a                  	// #42
   15d70:	str	w2, [x0, #11936]
   15d74:	str	w1, [sp, #144]
   15d78:	mov	w0, #0x0                   	// #0
   15d7c:	mov	w1, #0x4                   	// #4
   15d80:	str	w1, [sp, #184]
   15d84:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15d88:	sub	w22, w22, w2
   15d8c:	sub	w24, w24, w2
   15d90:	sub	w0, w0, w0, lsr #5
   15d94:	and	w0, w0, #0xffff
   15d98:	lsl	w2, w27, #1
   15d9c:	add	w27, w2, #0x1
   15da0:	mov	w2, #0x1                   	// #1
   15da4:	ldrb	w3, [sp, #148]
   15da8:	lsl	w2, w2, w3
   15dac:	add	w1, w1, w2
   15db0:	b	158b0 <lzma_mode_is_supported@@XZ_5.0+0x4320>
   15db4:	add	x0, x23, #0x4, lsl #12
   15db8:	mov	w2, #0x2a                  	// #42
   15dbc:	str	w2, [x0, #11936]
   15dc0:	str	w1, [sp, #144]
   15dc4:	mov	w0, #0x0                   	// #0
   15dc8:	mov	w1, #0x3                   	// #3
   15dcc:	str	w1, [sp, #184]
   15dd0:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15dd4:	sub	w22, w22, w2
   15dd8:	sub	w24, w24, w2
   15ddc:	sub	w0, w0, w0, lsr #5
   15de0:	and	w0, w0, #0xffff
   15de4:	lsl	w2, w27, #1
   15de8:	add	w27, w2, #0x1
   15dec:	mov	w2, #0x1                   	// #1
   15df0:	ldrb	w3, [sp, #148]
   15df4:	lsl	w2, w2, w3
   15df8:	add	w1, w1, w2
   15dfc:	b	1591c <lzma_mode_is_supported@@XZ_5.0+0x438c>
   15e00:	add	x0, x23, #0x4, lsl #12
   15e04:	mov	w2, #0x2a                  	// #42
   15e08:	str	w2, [x0, #11936]
   15e0c:	str	w1, [sp, #144]
   15e10:	mov	w0, #0x0                   	// #0
   15e14:	mov	w1, #0x2                   	// #2
   15e18:	str	w1, [sp, #184]
   15e1c:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15e20:	sub	w22, w22, w2
   15e24:	sub	w24, w24, w2
   15e28:	sub	w0, w0, w0, lsr #5
   15e2c:	and	w0, w0, #0xffff
   15e30:	lsl	w2, w27, #1
   15e34:	add	w27, w2, #0x1
   15e38:	mov	w2, #0x1                   	// #1
   15e3c:	ldrb	w3, [sp, #148]
   15e40:	lsl	w2, w2, w3
   15e44:	add	w1, w1, w2
   15e48:	b	15cb4 <lzma_mode_is_supported@@XZ_5.0+0x4724>
   15e4c:	add	x0, x23, #0x4, lsl #12
   15e50:	mov	w2, #0x2a                  	// #42
   15e54:	str	w2, [x0, #11936]
   15e58:	str	w1, [sp, #144]
   15e5c:	mov	w0, #0x0                   	// #0
   15e60:	mov	w1, #0x1                   	// #1
   15e64:	str	w1, [sp, #184]
   15e68:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15e6c:	sub	w22, w22, w0
   15e70:	sub	w24, w24, w0
   15e74:	sub	w2, w2, w2, lsr #5
   15e78:	ldr	x0, [sp, #96]
   15e7c:	strh	w2, [x0, x3]
   15e80:	mov	w0, #0x1                   	// #1
   15e84:	ldrb	w2, [sp, #148]
   15e88:	lsl	w2, w0, w2
   15e8c:	add	w1, w2, w1
   15e90:	str	w1, [sp, #144]
   15e94:	str	w0, [sp, #184]
   15e98:	b	1623c <lzma_mode_is_supported@@XZ_5.0+0x4cac>
   15e9c:	sub	w0, w0, #0x5
   15ea0:	str	w0, [sp, #184]
   15ea4:	mov	w3, #0xffffff              	// #16777215
   15ea8:	ldr	w2, [sp, #184]
   15eac:	mov	w0, w24
   15eb0:	b	15f10 <lzma_mode_is_supported@@XZ_5.0+0x4980>
   15eb4:	ldr	x25, [sp, #112]
   15eb8:	ldr	w1, [sp, #144]
   15ebc:	str	w27, [sp, #144]
   15ec0:	b	15ea4 <lzma_mode_is_supported@@XZ_5.0+0x4914>
   15ec4:	str	w2, [sp, #184]
   15ec8:	mov	w24, w0
   15ecc:	add	x0, x23, #0x4, lsl #12
   15ed0:	mov	w2, #0x2b                  	// #43
   15ed4:	str	w2, [x0, #11936]
   15ed8:	ldr	w27, [sp, #144]
   15edc:	str	w1, [sp, #144]
   15ee0:	mov	x28, x21
   15ee4:	mov	w0, #0x0                   	// #0
   15ee8:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   15eec:	lsr	w22, w22, #1
   15ef0:	sub	w0, w0, w22
   15ef4:	asr	w4, w0, #31
   15ef8:	and	w5, w22, w4
   15efc:	add	w0, w5, w0
   15f00:	add	w1, w4, w1, lsl #1
   15f04:	add	w1, w1, #0x1
   15f08:	subs	w2, w2, #0x1
   15f0c:	b.eq	15f34 <lzma_mode_is_supported@@XZ_5.0+0x49a4>  // b.none
   15f10:	cmp	w22, w3
   15f14:	b.hi	15eec <lzma_mode_is_supported@@XZ_5.0+0x495c>  // b.pmore
   15f18:	cmp	x28, x21
   15f1c:	b.eq	15ec4 <lzma_mode_is_supported@@XZ_5.0+0x4934>  // b.none
   15f20:	lsl	w22, w22, #8
   15f24:	ldrb	w4, [x20, x28]
   15f28:	orr	w0, w4, w0, lsl #8
   15f2c:	add	x28, x28, #0x1
   15f30:	b	15eec <lzma_mode_is_supported@@XZ_5.0+0x495c>
   15f34:	str	w2, [sp, #184]
   15f38:	mov	w24, w0
   15f3c:	lsl	w0, w1, #4
   15f40:	str	w0, [sp, #144]
   15f44:	mov	w27, #0x1                   	// #1
   15f48:	mov	w0, #0xffffff              	// #16777215
   15f4c:	cmp	w22, w0
   15f50:	b.hi	15f6c <lzma_mode_is_supported@@XZ_5.0+0x49dc>  // b.pmore
   15f54:	cmp	x28, x21
   15f58:	b.eq	160dc <lzma_mode_is_supported@@XZ_5.0+0x4b4c>  // b.none
   15f5c:	lsl	w22, w22, #8
   15f60:	ldrb	w0, [x20, x28]
   15f64:	orr	w24, w0, w24, lsl #8
   15f68:	add	x28, x28, #0x1
   15f6c:	add	x0, x23, w27, uxtw #1
   15f70:	add	x1, x0, #0x6, lsl #12
   15f74:	ldrh	w1, [x1, #1604]
   15f78:	lsr	w2, w22, #11
   15f7c:	mul	w2, w2, w1
   15f80:	cmp	w2, w24
   15f84:	b.ls	160f0 <lzma_mode_is_supported@@XZ_5.0+0x4b60>  // b.plast
   15f88:	add	x0, x0, #0x6, lsl #12
   15f8c:	mov	w3, #0x800                 	// #2048
   15f90:	sub	w3, w3, w1
   15f94:	add	w1, w1, w3, lsr #5
   15f98:	strh	w1, [x0, #1604]
   15f9c:	lsl	w27, w27, #1
   15fa0:	mov	w22, w2
   15fa4:	mov	w0, #0xffffff              	// #16777215
   15fa8:	cmp	w22, w0
   15fac:	b.hi	15fc8 <lzma_mode_is_supported@@XZ_5.0+0x4a38>  // b.pmore
   15fb0:	cmp	x28, x21
   15fb4:	b.eq	16124 <lzma_mode_is_supported@@XZ_5.0+0x4b94>  // b.none
   15fb8:	lsl	w22, w22, #8
   15fbc:	ldrb	w0, [x20, x28]
   15fc0:	orr	w24, w0, w24, lsl #8
   15fc4:	add	x28, x28, #0x1
   15fc8:	add	x1, x23, w27, uxtw #1
   15fcc:	add	x0, x1, #0x6, lsl #12
   15fd0:	ldrh	w2, [x0, #1604]
   15fd4:	lsr	w0, w22, #11
   15fd8:	mul	w0, w0, w2
   15fdc:	cmp	w0, w24
   15fe0:	b.ls	16138 <lzma_mode_is_supported@@XZ_5.0+0x4ba8>  // b.plast
   15fe4:	add	x1, x1, #0x6, lsl #12
   15fe8:	mov	w3, #0x800                 	// #2048
   15fec:	sub	w3, w3, w2
   15ff0:	add	w2, w2, w3, lsr #5
   15ff4:	strh	w2, [x1, #1604]
   15ff8:	lsl	w27, w27, #1
   15ffc:	mov	w22, w0
   16000:	mov	w0, #0xffffff              	// #16777215
   16004:	cmp	w22, w0
   16008:	b.hi	16024 <lzma_mode_is_supported@@XZ_5.0+0x4a94>  // b.pmore
   1600c:	cmp	x28, x21
   16010:	b.eq	1616c <lzma_mode_is_supported@@XZ_5.0+0x4bdc>  // b.none
   16014:	lsl	w22, w22, #8
   16018:	ldrb	w0, [x20, x28]
   1601c:	orr	w24, w0, w24, lsl #8
   16020:	add	x28, x28, #0x1
   16024:	add	x1, x23, w27, uxtw #1
   16028:	add	x0, x1, #0x6, lsl #12
   1602c:	ldrh	w3, [x0, #1604]
   16030:	lsr	w0, w22, #11
   16034:	mul	w0, w0, w3
   16038:	cmp	w0, w24
   1603c:	b.ls	16180 <lzma_mode_is_supported@@XZ_5.0+0x4bf0>  // b.plast
   16040:	add	x1, x1, #0x6, lsl #12
   16044:	mov	w2, #0x800                 	// #2048
   16048:	sub	w2, w2, w3
   1604c:	add	w3, w3, w2, lsr #5
   16050:	strh	w3, [x1, #1604]
   16054:	lsl	w27, w27, #1
   16058:	mov	w2, w0
   1605c:	mov	w0, #0xffffff              	// #16777215
   16060:	cmp	w2, w0
   16064:	b.hi	16080 <lzma_mode_is_supported@@XZ_5.0+0x4af0>  // b.pmore
   16068:	cmp	x28, x21
   1606c:	b.eq	161b8 <lzma_mode_is_supported@@XZ_5.0+0x4c28>  // b.none
   16070:	lsl	w2, w2, #8
   16074:	ldrb	w0, [x20, x28]
   16078:	orr	w24, w0, w24, lsl #8
   1607c:	add	x28, x28, #0x1
   16080:	add	x1, x23, w27, uxtw #1
   16084:	add	x0, x1, #0x6, lsl #12
   16088:	ldrh	w0, [x0, #1604]
   1608c:	lsr	w22, w2, #11
   16090:	mul	w22, w22, w0
   16094:	cmp	w22, w24
   16098:	b.ls	161d0 <lzma_mode_is_supported@@XZ_5.0+0x4c40>  // b.plast
   1609c:	mov	w2, #0x800                 	// #2048
   160a0:	sub	w2, w2, w0
   160a4:	add	w0, w0, w2, lsr #5
   160a8:	and	w0, w0, #0xffff
   160ac:	add	x1, x1, #0x6, lsl #12
   160b0:	strh	w0, [x1, #1604]
   160b4:	ldr	w0, [sp, #144]
   160b8:	cmn	w0, #0x1
   160bc:	b.ne	1623c <lzma_mode_is_supported@@XZ_5.0+0x4cac>  // b.any
   160c0:	ldr	x1, [x23, #28312]
   160c4:	mov	w0, #0x9                   	// #9
   160c8:	cmn	x1, #0x1
   160cc:	b.ne	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>  // b.any
   160d0:	b	161f4 <lzma_mode_is_supported@@XZ_5.0+0x4c64>
   160d4:	ldr	x25, [sp, #112]
   160d8:	b	15f48 <lzma_mode_is_supported@@XZ_5.0+0x49b8>
   160dc:	add	x0, x23, #0x4, lsl #12
   160e0:	mov	w1, #0x2c                  	// #44
   160e4:	str	w1, [x0, #11936]
   160e8:	mov	w0, #0x0                   	// #0
   160ec:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   160f0:	sub	w22, w22, w2
   160f4:	sub	w24, w24, w2
   160f8:	add	x0, x0, #0x6, lsl #12
   160fc:	sub	w1, w1, w1, lsr #5
   16100:	strh	w1, [x0, #1604]
   16104:	lsl	w0, w27, #1
   16108:	add	w27, w0, #0x1
   1610c:	ldr	w0, [sp, #144]
   16110:	add	w0, w0, #0x1
   16114:	str	w0, [sp, #144]
   16118:	b	15fa4 <lzma_mode_is_supported@@XZ_5.0+0x4a14>
   1611c:	ldr	x25, [sp, #112]
   16120:	b	15fa4 <lzma_mode_is_supported@@XZ_5.0+0x4a14>
   16124:	add	x0, x23, #0x4, lsl #12
   16128:	mov	w1, #0x2d                  	// #45
   1612c:	str	w1, [x0, #11936]
   16130:	mov	w0, #0x0                   	// #0
   16134:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16138:	sub	w22, w22, w0
   1613c:	sub	w24, w24, w0
   16140:	add	x1, x1, #0x6, lsl #12
   16144:	sub	w2, w2, w2, lsr #5
   16148:	strh	w2, [x1, #1604]
   1614c:	lsl	w0, w27, #1
   16150:	add	w27, w0, #0x1
   16154:	ldr	w0, [sp, #144]
   16158:	add	w0, w0, #0x2
   1615c:	str	w0, [sp, #144]
   16160:	b	16000 <lzma_mode_is_supported@@XZ_5.0+0x4a70>
   16164:	ldr	x25, [sp, #112]
   16168:	b	16000 <lzma_mode_is_supported@@XZ_5.0+0x4a70>
   1616c:	add	x0, x23, #0x4, lsl #12
   16170:	mov	w1, #0x2e                  	// #46
   16174:	str	w1, [x0, #11936]
   16178:	mov	w0, #0x0                   	// #0
   1617c:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16180:	sub	w2, w22, w0
   16184:	sub	w24, w24, w0
   16188:	add	x1, x1, #0x6, lsl #12
   1618c:	sub	w3, w3, w3, lsr #5
   16190:	strh	w3, [x1, #1604]
   16194:	lsl	w0, w27, #1
   16198:	add	w27, w0, #0x1
   1619c:	ldr	w0, [sp, #144]
   161a0:	add	w0, w0, #0x4
   161a4:	str	w0, [sp, #144]
   161a8:	b	1605c <lzma_mode_is_supported@@XZ_5.0+0x4acc>
   161ac:	ldr	x25, [sp, #112]
   161b0:	mov	w2, w22
   161b4:	b	1605c <lzma_mode_is_supported@@XZ_5.0+0x4acc>
   161b8:	add	x0, x23, #0x4, lsl #12
   161bc:	mov	w1, #0x2f                  	// #47
   161c0:	str	w1, [x0, #11936]
   161c4:	mov	w22, w2
   161c8:	mov	w0, #0x0                   	// #0
   161cc:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   161d0:	sub	w24, w24, w22
   161d4:	sub	w0, w0, w0, lsr #5
   161d8:	and	w0, w0, #0xffff
   161dc:	ldr	w3, [sp, #144]
   161e0:	add	w3, w3, #0x8
   161e4:	str	w3, [sp, #144]
   161e8:	sub	w22, w2, w22
   161ec:	b	160ac <lzma_mode_is_supported@@XZ_5.0+0x4b1c>
   161f0:	ldr	x25, [sp, #112]
   161f4:	mov	w0, #0x1                   	// #1
   161f8:	mov	w1, #0xffffff              	// #16777215
   161fc:	cmp	w22, w1
   16200:	b.hi	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>  // b.pmore
   16204:	cmp	x28, x21
   16208:	b.eq	16224 <lzma_mode_is_supported@@XZ_5.0+0x4c94>  // b.none
   1620c:	lsl	w22, w22, #8
   16210:	ldrb	w0, [x20, x28]
   16214:	orr	w24, w0, w24, lsl #8
   16218:	add	x28, x28, #0x1
   1621c:	mov	w0, #0x1                   	// #1
   16220:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16224:	add	x0, x23, #0x4, lsl #12
   16228:	mov	w1, #0x30                  	// #48
   1622c:	str	w1, [x0, #11936]
   16230:	mov	w0, #0x0                   	// #0
   16234:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16238:	ldr	w27, [sp, #144]
   1623c:	ldr	w0, [sp, #144]
   16240:	ldr	x1, [sp, #136]
   16244:	cmp	x1, w0, uxtw
   16248:	b.ls	17258 <lzma_mode_is_supported@@XZ_5.0+0x5cc8>  // b.plast
   1624c:	ldr	x0, [sp, #128]
   16250:	sub	x26, x0, x25
   16254:	ldr	w1, [sp, #108]
   16258:	mov	w0, w1
   1625c:	cmp	x26, x0
   16260:	csel	x26, x26, x0, ls  // ls = plast
   16264:	sub	w0, w1, w26
   16268:	str	w0, [sp, #108]
   1626c:	ldr	w1, [sp, #144]
   16270:	cmp	w1, w26
   16274:	b.cs	170b8 <lzma_mode_is_supported@@XZ_5.0+0x5b28>  // b.hs, b.nlast
   16278:	sub	w26, w26, #0x1
   1627c:	add	x0, x25, #0x1
   16280:	add	x26, x26, x0
   16284:	mov	w2, w1
   16288:	mvn	x4, x2
   1628c:	mov	x3, #0x0                   	// #0
   16290:	ldr	x1, [sp, #160]
   16294:	ldr	x6, [sp, #176]
   16298:	cmp	x2, x25
   1629c:	csel	x5, x6, x3, cs  // cs = hs, nlast
   162a0:	add	x0, x1, x25
   162a4:	add	x0, x0, x4
   162a8:	ldrb	w0, [x0, x5]
   162ac:	strb	w0, [x1, x25]
   162b0:	add	x25, x25, #0x1
   162b4:	cmp	x26, x25
   162b8:	b.ne	16298 <lzma_mode_is_supported@@XZ_5.0+0x4d08>  // b.any
   162bc:	ldr	x0, [sp, #136]
   162c0:	cmp	x0, x26
   162c4:	csel	x0, x0, x26, cs  // cs = hs, nlast
   162c8:	str	x0, [sp, #136]
   162cc:	ldr	w0, [sp, #108]
   162d0:	cbnz	w0, 17180 <lzma_mode_is_supported@@XZ_5.0+0x5bf0>
   162d4:	ldr	w0, [sp, #196]
   162d8:	and	w2, w0, w26
   162dc:	sub	x4, x26, #0x1
   162e0:	ldr	x0, [sp, #168]
   162e4:	cmn	x0, #0x1
   162e8:	b.ne	14094 <lzma_mode_is_supported@@XZ_5.0+0x2b04>  // b.any
   162ec:	mov	w0, #0xffffff              	// #16777215
   162f0:	cmp	w22, w0
   162f4:	b.hi	16310 <lzma_mode_is_supported@@XZ_5.0+0x4d80>  // b.pmore
   162f8:	cmp	x28, x21
   162fc:	b.eq	140dc <lzma_mode_is_supported@@XZ_5.0+0x2b4c>  // b.none
   16300:	lsl	w22, w22, #8
   16304:	ldrb	w0, [x20, x28]
   16308:	orr	w24, w0, w24, lsl #8
   1630c:	add	x28, x28, #0x1
   16310:	ldr	w6, [sp, #152]
   16314:	ubfiz	x0, x6, #4, #32
   16318:	add	x0, x0, w2, uxtw
   1631c:	add	x0, x23, x0, lsl #1
   16320:	add	x1, x0, #0x6, lsl #12
   16324:	ldrh	w1, [x1]
   16328:	lsr	w3, w22, #11
   1632c:	mul	w3, w3, w1
   16330:	cmp	w3, w24
   16334:	b.ls	14c4c <lzma_mode_is_supported@@XZ_5.0+0x36bc>  // b.plast
   16338:	add	x0, x0, #0x6, lsl #12
   1633c:	mov	w2, #0x800                 	// #2048
   16340:	sub	w2, w2, w1
   16344:	add	w1, w1, w2, lsr #5
   16348:	strh	w1, [x0]
   1634c:	ldr	w0, [sp, #204]
   16350:	and	w0, w0, w26
   16354:	ldr	w5, [sp, #208]
   16358:	lsl	x1, x0, x5
   1635c:	cmp	x26, #0x0
   16360:	ldr	x0, [sp, #176]
   16364:	csel	x0, x0, xzr, eq  // eq = none
   16368:	ldr	x2, [sp, #160]
   1636c:	add	x2, x2, x4
   16370:	ldrb	w0, [x2, x0]
   16374:	mov	w2, #0x8                   	// #8
   16378:	sub	w2, w2, w5
   1637c:	asr	w0, w0, w2
   16380:	add	x0, x1, w0, sxtw
   16384:	add	x0, x0, x0, lsl #1
   16388:	add	x0, x23, x0, lsl #9
   1638c:	str	x0, [sp, #96]
   16390:	cmp	w6, #0x6
   16394:	b.hi	145d4 <lzma_mode_is_supported@@XZ_5.0+0x3044>  // b.pmore
   16398:	mov	x25, x26
   1639c:	mov	w22, w3
   163a0:	mov	w27, #0x1                   	// #1
   163a4:	b	140f8 <lzma_mode_is_supported@@XZ_5.0+0x2b68>
   163a8:	str	w1, [sp, #144]
   163ac:	b	1623c <lzma_mode_is_supported@@XZ_5.0+0x4cac>
   163b0:	sub	w22, w22, w3
   163b4:	sub	w24, w24, w3
   163b8:	add	x0, x0, #0x6, lsl #12
   163bc:	sub	w1, w1, w1, lsr #5
   163c0:	strh	w1, [x0, #384]
   163c4:	ldr	x0, [sp, #136]
   163c8:	cbnz	x0, 163d8 <lzma_mode_is_supported@@XZ_5.0+0x4e48>
   163cc:	mov	w0, #0x9                   	// #9
   163d0:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   163d4:	ldr	x25, [sp, #112]
   163d8:	mov	w0, #0xffffff              	// #16777215
   163dc:	cmp	w22, w0
   163e0:	b.hi	163fc <lzma_mode_is_supported@@XZ_5.0+0x4e6c>  // b.pmore
   163e4:	cmp	x28, x21
   163e8:	b.eq	16438 <lzma_mode_is_supported@@XZ_5.0+0x4ea8>  // b.none
   163ec:	lsl	w22, w22, #8
   163f0:	ldrb	w0, [x20, x28]
   163f4:	orr	w24, w0, w24, lsl #8
   163f8:	add	x28, x28, #0x1
   163fc:	ldr	x0, [sp, #152]
   16400:	add	x0, x23, w0, uxtw #1
   16404:	add	x1, x0, #0x6, lsl #12
   16408:	ldrh	w1, [x1, #408]
   1640c:	lsr	w3, w22, #11
   16410:	mul	w3, w3, w1
   16414:	cmp	w3, w24
   16418:	b.ls	16554 <lzma_mode_is_supported@@XZ_5.0+0x4fc4>  // b.plast
   1641c:	add	x0, x0, #0x6, lsl #12
   16420:	mov	w4, #0x800                 	// #2048
   16424:	sub	w4, w4, w1
   16428:	add	w1, w1, w4, lsr #5
   1642c:	strh	w1, [x0, #408]
   16430:	mov	w22, w3
   16434:	b	16450 <lzma_mode_is_supported@@XZ_5.0+0x4ec0>
   16438:	add	x0, x23, #0x4, lsl #12
   1643c:	mov	w1, #0x31                  	// #49
   16440:	str	w1, [x0, #11936]
   16444:	mov	w0, #0x0                   	// #0
   16448:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   1644c:	ldr	x25, [sp, #112]
   16450:	mov	w0, #0xffffff              	// #16777215
   16454:	cmp	w22, w0
   16458:	b.hi	16474 <lzma_mode_is_supported@@XZ_5.0+0x4ee4>  // b.pmore
   1645c:	cmp	x28, x21
   16460:	b.eq	164c8 <lzma_mode_is_supported@@XZ_5.0+0x4f38>  // b.none
   16464:	lsl	w22, w22, #8
   16468:	ldrb	w0, [x20, x28]
   1646c:	orr	w24, w0, w24, lsl #8
   16470:	add	x28, x28, #0x1
   16474:	ldr	w4, [sp, #152]
   16478:	ubfiz	x0, x4, #4, #32
   1647c:	add	x0, x0, w2, uxtw
   16480:	add	x0, x23, x0, lsl #1
   16484:	add	x1, x0, #0x6, lsl #12
   16488:	ldrh	w1, [x1, #480]
   1648c:	lsr	w3, w22, #11
   16490:	mul	w3, w3, w1
   16494:	cmp	w3, w24
   16498:	b.ls	1653c <lzma_mode_is_supported@@XZ_5.0+0x4fac>  // b.plast
   1649c:	add	x0, x0, #0x6, lsl #12
   164a0:	mov	w2, #0x800                 	// #2048
   164a4:	sub	w2, w2, w1
   164a8:	add	w1, w1, w2, lsr #5
   164ac:	strh	w1, [x0, #480]
   164b0:	cmp	w4, #0x6
   164b4:	b.ls	1652c <lzma_mode_is_supported@@XZ_5.0+0x4f9c>  // b.plast
   164b8:	mov	w22, w3
   164bc:	mov	w0, #0xb                   	// #11
   164c0:	str	w0, [sp, #152]
   164c4:	b	164e0 <lzma_mode_is_supported@@XZ_5.0+0x4f50>
   164c8:	add	x0, x23, #0x4, lsl #12
   164cc:	mov	w1, #0x33                  	// #51
   164d0:	str	w1, [x0, #11936]
   164d4:	mov	w0, #0x0                   	// #0
   164d8:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   164dc:	ldr	x25, [sp, #112]
   164e0:	sub	x0, x25, #0x1
   164e4:	ldr	w2, [sp, #144]
   164e8:	cmp	x25, x2
   164ec:	ldr	x1, [sp, #176]
   164f0:	csel	x1, x1, xzr, ls  // ls = plast
   164f4:	sub	x1, x1, x2
   164f8:	ldr	x2, [sp, #160]
   164fc:	add	x0, x2, x0
   16500:	ldrb	w0, [x0, x1]
   16504:	ldr	x1, [sp, #128]
   16508:	cmp	x25, x1
   1650c:	b.eq	172c8 <lzma_mode_is_supported@@XZ_5.0+0x5d38>  // b.none
   16510:	add	x26, x25, #0x1
   16514:	strb	w0, [x2, x25]
   16518:	ldr	x0, [sp, #136]
   1651c:	cmp	x0, x26
   16520:	csel	x0, x0, x26, cs  // cs = hs, nlast
   16524:	str	x0, [sp, #136]
   16528:	b	162d4 <lzma_mode_is_supported@@XZ_5.0+0x4d44>
   1652c:	mov	w22, w3
   16530:	mov	w0, #0x9                   	// #9
   16534:	str	w0, [sp, #152]
   16538:	b	164e0 <lzma_mode_is_supported@@XZ_5.0+0x4f50>
   1653c:	sub	w22, w22, w3
   16540:	sub	w24, w24, w3
   16544:	add	x0, x0, #0x6, lsl #12
   16548:	sub	w1, w1, w1, lsr #5
   1654c:	strh	w1, [x0, #480]
   16550:	b	16684 <lzma_mode_is_supported@@XZ_5.0+0x50f4>
   16554:	sub	w22, w22, w3
   16558:	sub	w24, w24, w3
   1655c:	add	x0, x0, #0x6, lsl #12
   16560:	sub	w1, w1, w1, lsr #5
   16564:	strh	w1, [x0, #408]
   16568:	b	16570 <lzma_mode_is_supported@@XZ_5.0+0x4fe0>
   1656c:	ldr	x25, [sp, #112]
   16570:	mov	w0, #0xffffff              	// #16777215
   16574:	cmp	w22, w0
   16578:	b.hi	16594 <lzma_mode_is_supported@@XZ_5.0+0x5004>  // b.pmore
   1657c:	cmp	x28, x21
   16580:	b.eq	165e0 <lzma_mode_is_supported@@XZ_5.0+0x5050>  // b.none
   16584:	lsl	w22, w22, #8
   16588:	ldrb	w0, [x20, x28]
   1658c:	orr	w24, w0, w24, lsl #8
   16590:	add	x28, x28, #0x1
   16594:	ldr	x0, [sp, #152]
   16598:	add	x0, x23, w0, uxtw #1
   1659c:	add	x1, x0, #0x6, lsl #12
   165a0:	ldrh	w1, [x1, #432]
   165a4:	lsr	w3, w22, #11
   165a8:	mul	w3, w3, w1
   165ac:	cmp	w3, w24
   165b0:	b.ls	165f4 <lzma_mode_is_supported@@XZ_5.0+0x5064>  // b.plast
   165b4:	add	x0, x0, #0x6, lsl #12
   165b8:	mov	w4, #0x800                 	// #2048
   165bc:	sub	w4, w4, w1
   165c0:	add	w1, w1, w4, lsr #5
   165c4:	strh	w1, [x0, #432]
   165c8:	mov	w22, w3
   165cc:	ldr	w0, [sp, #144]
   165d0:	ldr	w1, [sp, #188]
   165d4:	str	w1, [sp, #144]
   165d8:	str	w0, [sp, #188]
   165dc:	b	16684 <lzma_mode_is_supported@@XZ_5.0+0x50f4>
   165e0:	add	x0, x23, #0x4, lsl #12
   165e4:	mov	w1, #0x34                  	// #52
   165e8:	str	w1, [x0, #11936]
   165ec:	mov	w0, #0x0                   	// #0
   165f0:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   165f4:	sub	w22, w22, w3
   165f8:	sub	w24, w24, w3
   165fc:	add	x0, x0, #0x6, lsl #12
   16600:	sub	w1, w1, w1, lsr #5
   16604:	strh	w1, [x0, #432]
   16608:	b	16610 <lzma_mode_is_supported@@XZ_5.0+0x5080>
   1660c:	ldr	x25, [sp, #112]
   16610:	mov	w0, #0xffffff              	// #16777215
   16614:	cmp	w22, w0
   16618:	b.hi	16634 <lzma_mode_is_supported@@XZ_5.0+0x50a4>  // b.pmore
   1661c:	cmp	x28, x21
   16620:	b.eq	16824 <lzma_mode_is_supported@@XZ_5.0+0x5294>  // b.none
   16624:	lsl	w22, w22, #8
   16628:	ldrb	w0, [x20, x28]
   1662c:	orr	w24, w0, w24, lsl #8
   16630:	add	x28, x28, #0x1
   16634:	ldr	x0, [sp, #152]
   16638:	add	x0, x23, w0, uxtw #1
   1663c:	add	x1, x0, #0x6, lsl #12
   16640:	ldrh	w1, [x1, #456]
   16644:	lsr	w3, w22, #11
   16648:	mul	w3, w3, w1
   1664c:	cmp	w3, w24
   16650:	b.ls	16838 <lzma_mode_is_supported@@XZ_5.0+0x52a8>  // b.plast
   16654:	add	x0, x0, #0x6, lsl #12
   16658:	mov	w4, #0x800                 	// #2048
   1665c:	sub	w4, w4, w1
   16660:	add	w1, w1, w4, lsr #5
   16664:	strh	w1, [x0, #456]
   16668:	mov	w22, w3
   1666c:	ldr	w0, [sp, #144]
   16670:	ldr	w1, [sp, #192]
   16674:	str	w1, [sp, #144]
   16678:	ldr	w1, [sp, #188]
   1667c:	str	w1, [sp, #192]
   16680:	str	w0, [sp, #188]
   16684:	ldr	w0, [sp, #152]
   16688:	cmp	w0, #0x6
   1668c:	b.ls	16878 <lzma_mode_is_supported@@XZ_5.0+0x52e8>  // b.plast
   16690:	mov	w27, #0x1                   	// #1
   16694:	mov	w0, #0xb                   	// #11
   16698:	str	w0, [sp, #152]
   1669c:	mov	w0, #0xffffff              	// #16777215
   166a0:	cmp	w22, w0
   166a4:	b.hi	166c0 <lzma_mode_is_supported@@XZ_5.0+0x5130>  // b.pmore
   166a8:	cmp	x28, x21
   166ac:	b.eq	16888 <lzma_mode_is_supported@@XZ_5.0+0x52f8>  // b.none
   166b0:	lsl	w22, w22, #8
   166b4:	ldrb	w0, [x20, x28]
   166b8:	orr	w24, w0, w24, lsl #8
   166bc:	add	x28, x28, #0x1
   166c0:	add	x0, x23, #0x6, lsl #12
   166c4:	ldrh	w1, [x0, #2664]
   166c8:	lsr	w0, w22, #11
   166cc:	mul	w0, w0, w1
   166d0:	cmp	w0, w24
   166d4:	b.ls	1695c <lzma_mode_is_supported@@XZ_5.0+0x53cc>  // b.plast
   166d8:	add	x4, x23, #0x6, lsl #12
   166dc:	mov	w3, #0x800                 	// #2048
   166e0:	sub	w3, w3, w1
   166e4:	add	w1, w1, w3, lsr #5
   166e8:	strh	w1, [x4, #2664]
   166ec:	mov	w1, #0xffffff              	// #16777215
   166f0:	cmp	w0, w1
   166f4:	b.hi	16710 <lzma_mode_is_supported@@XZ_5.0+0x5180>  // b.pmore
   166f8:	cmp	x28, x21
   166fc:	b.eq	168a8 <lzma_mode_is_supported@@XZ_5.0+0x5318>  // b.none
   16700:	lsl	w0, w0, #8
   16704:	ldrb	w1, [x20, x28]
   16708:	orr	w24, w1, w24, lsl #8
   1670c:	add	x28, x28, #0x1
   16710:	mov	w1, w27
   16714:	add	x1, x1, w2, uxtw #3
   16718:	add	x1, x23, x1, lsl #1
   1671c:	add	x3, x1, #0x6, lsl #12
   16720:	ldrh	w3, [x3, #2668]
   16724:	lsr	w4, w0, #11
   16728:	mul	w4, w4, w3
   1672c:	cmp	w4, w24
   16730:	b.ls	168c0 <lzma_mode_is_supported@@XZ_5.0+0x5330>  // b.plast
   16734:	add	x1, x1, #0x6, lsl #12
   16738:	mov	w0, #0x800                 	// #2048
   1673c:	sub	w0, w0, w3
   16740:	add	w3, w3, w0, lsr #5
   16744:	strh	w3, [x1, #2668]
   16748:	lsl	w27, w27, #1
   1674c:	mov	w22, w4
   16750:	mov	w0, #0xffffff              	// #16777215
   16754:	cmp	w22, w0
   16758:	b.hi	16774 <lzma_mode_is_supported@@XZ_5.0+0x51e4>  // b.pmore
   1675c:	cmp	x28, x21
   16760:	b.eq	168e8 <lzma_mode_is_supported@@XZ_5.0+0x5358>  // b.none
   16764:	lsl	w22, w22, #8
   16768:	ldrb	w0, [x20, x28]
   1676c:	orr	w24, w0, w24, lsl #8
   16770:	add	x28, x28, #0x1
   16774:	mov	w0, w27
   16778:	add	x0, x0, w2, uxtw #3
   1677c:	add	x0, x23, x0, lsl #1
   16780:	add	x1, x0, #0x6, lsl #12
   16784:	ldrh	w3, [x1, #2668]
   16788:	lsr	w1, w22, #11
   1678c:	mul	w1, w1, w3
   16790:	cmp	w1, w24
   16794:	b.ls	168fc <lzma_mode_is_supported@@XZ_5.0+0x536c>  // b.plast
   16798:	add	x0, x0, #0x6, lsl #12
   1679c:	mov	w4, #0x800                 	// #2048
   167a0:	sub	w4, w4, w3
   167a4:	add	w3, w3, w4, lsr #5
   167a8:	strh	w3, [x0, #2668]
   167ac:	lsl	w27, w27, #1
   167b0:	mov	w4, w1
   167b4:	mov	w0, #0xffffff              	// #16777215
   167b8:	cmp	w4, w0
   167bc:	b.hi	167d8 <lzma_mode_is_supported@@XZ_5.0+0x5248>  // b.pmore
   167c0:	cmp	x28, x21
   167c4:	b.eq	16928 <lzma_mode_is_supported@@XZ_5.0+0x5398>  // b.none
   167c8:	lsl	w4, w4, #8
   167cc:	ldrb	w0, [x20, x28]
   167d0:	orr	w24, w0, w24, lsl #8
   167d4:	add	x28, x28, #0x1
   167d8:	mov	w0, w27
   167dc:	add	x0, x0, w2, uxtw #3
   167e0:	add	x0, x23, x0, lsl #1
   167e4:	add	x1, x0, #0x6, lsl #12
   167e8:	ldrh	w1, [x1, #2668]
   167ec:	lsr	w22, w4, #11
   167f0:	mul	w22, w22, w1
   167f4:	cmp	w22, w24
   167f8:	b.ls	16940 <lzma_mode_is_supported@@XZ_5.0+0x53b0>  // b.plast
   167fc:	mov	w2, #0x800                 	// #2048
   16800:	sub	w2, w2, w1
   16804:	add	w1, w1, w2, lsr #5
   16808:	and	w1, w1, #0xffff
   1680c:	lsl	w27, w27, #1
   16810:	add	x0, x0, #0x6, lsl #12
   16814:	strh	w1, [x0, #2668]
   16818:	sub	w0, w27, #0x6
   1681c:	str	w0, [sp, #108]
   16820:	b	1624c <lzma_mode_is_supported@@XZ_5.0+0x4cbc>
   16824:	add	x0, x23, #0x4, lsl #12
   16828:	mov	w1, #0x35                  	// #53
   1682c:	str	w1, [x0, #11936]
   16830:	mov	w0, #0x0                   	// #0
   16834:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16838:	sub	w22, w22, w3
   1683c:	sub	w24, w24, w3
   16840:	add	x0, x0, #0x6, lsl #12
   16844:	sub	w1, w1, w1, lsr #5
   16848:	strh	w1, [x0, #456]
   1684c:	ldr	w0, [sp, #144]
   16850:	ldr	w1, [sp, #200]
   16854:	str	w1, [sp, #144]
   16858:	ldr	w1, [sp, #192]
   1685c:	str	w1, [sp, #200]
   16860:	ldr	w1, [sp, #188]
   16864:	str	w1, [sp, #192]
   16868:	str	w0, [sp, #188]
   1686c:	b	16684 <lzma_mode_is_supported@@XZ_5.0+0x50f4>
   16870:	ldr	x25, [sp, #112]
   16874:	b	1669c <lzma_mode_is_supported@@XZ_5.0+0x510c>
   16878:	mov	w27, #0x1                   	// #1
   1687c:	mov	w0, #0x8                   	// #8
   16880:	str	w0, [sp, #152]
   16884:	b	1669c <lzma_mode_is_supported@@XZ_5.0+0x510c>
   16888:	add	x0, x23, #0x4, lsl #12
   1688c:	mov	w1, #0x36                  	// #54
   16890:	str	w1, [x0, #11936]
   16894:	mov	w0, #0x0                   	// #0
   16898:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   1689c:	ldr	x25, [sp, #112]
   168a0:	mov	w0, w22
   168a4:	b	166ec <lzma_mode_is_supported@@XZ_5.0+0x515c>
   168a8:	add	x1, x23, #0x4, lsl #12
   168ac:	mov	w2, #0x37                  	// #55
   168b0:	str	w2, [x1, #11936]
   168b4:	mov	w22, w0
   168b8:	mov	w0, #0x0                   	// #0
   168bc:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   168c0:	sub	w22, w0, w4
   168c4:	sub	w24, w24, w4
   168c8:	add	x1, x1, #0x6, lsl #12
   168cc:	sub	w3, w3, w3, lsr #5
   168d0:	strh	w3, [x1, #2668]
   168d4:	lsl	w0, w27, #1
   168d8:	add	w27, w0, #0x1
   168dc:	b	16750 <lzma_mode_is_supported@@XZ_5.0+0x51c0>
   168e0:	ldr	x25, [sp, #112]
   168e4:	b	16750 <lzma_mode_is_supported@@XZ_5.0+0x51c0>
   168e8:	add	x0, x23, #0x4, lsl #12
   168ec:	mov	w1, #0x38                  	// #56
   168f0:	str	w1, [x0, #11936]
   168f4:	mov	w0, #0x0                   	// #0
   168f8:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   168fc:	sub	w4, w22, w1
   16900:	sub	w24, w24, w1
   16904:	add	x0, x0, #0x6, lsl #12
   16908:	sub	w3, w3, w3, lsr #5
   1690c:	strh	w3, [x0, #2668]
   16910:	lsl	w0, w27, #1
   16914:	add	w27, w0, #0x1
   16918:	b	167b4 <lzma_mode_is_supported@@XZ_5.0+0x5224>
   1691c:	ldr	x25, [sp, #112]
   16920:	mov	w4, w22
   16924:	b	167b4 <lzma_mode_is_supported@@XZ_5.0+0x5224>
   16928:	add	x0, x23, #0x4, lsl #12
   1692c:	mov	w1, #0x39                  	// #57
   16930:	str	w1, [x0, #11936]
   16934:	mov	w22, w4
   16938:	mov	w0, #0x0                   	// #0
   1693c:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16940:	sub	w24, w24, w22
   16944:	sub	w1, w1, w1, lsr #5
   16948:	and	w1, w1, #0xffff
   1694c:	lsl	w2, w27, #1
   16950:	add	w27, w2, #0x1
   16954:	sub	w22, w4, w22
   16958:	b	16810 <lzma_mode_is_supported@@XZ_5.0+0x5280>
   1695c:	sub	w22, w22, w0
   16960:	sub	w24, w24, w0
   16964:	add	x0, x23, #0x6, lsl #12
   16968:	sub	w1, w1, w1, lsr #5
   1696c:	strh	w1, [x0, #2664]
   16970:	mov	w0, #0xffffff              	// #16777215
   16974:	cmp	w22, w0
   16978:	b.hi	16994 <lzma_mode_is_supported@@XZ_5.0+0x5404>  // b.pmore
   1697c:	cmp	x28, x21
   16980:	b.eq	16b08 <lzma_mode_is_supported@@XZ_5.0+0x5578>  // b.none
   16984:	lsl	w22, w22, #8
   16988:	ldrb	w0, [x20, x28]
   1698c:	orr	w24, w0, w24, lsl #8
   16990:	add	x28, x28, #0x1
   16994:	add	x0, x23, #0x6, lsl #12
   16998:	ldrh	w0, [x0, #2666]
   1699c:	lsr	w1, w22, #11
   169a0:	mul	w1, w1, w0
   169a4:	cmp	w1, w24
   169a8:	b.ls	16bcc <lzma_mode_is_supported@@XZ_5.0+0x563c>  // b.plast
   169ac:	add	x4, x23, #0x6, lsl #12
   169b0:	mov	w3, #0x800                 	// #2048
   169b4:	sub	w3, w3, w0
   169b8:	add	w0, w0, w3, lsr #5
   169bc:	strh	w0, [x4, #2666]
   169c0:	mov	w22, w1
   169c4:	mov	w0, #0xffffff              	// #16777215
   169c8:	cmp	w22, w0
   169cc:	b.hi	169e8 <lzma_mode_is_supported@@XZ_5.0+0x5458>  // b.pmore
   169d0:	cmp	x28, x21
   169d4:	b.eq	16b24 <lzma_mode_is_supported@@XZ_5.0+0x5594>  // b.none
   169d8:	lsl	w22, w22, #8
   169dc:	ldrb	w0, [x20, x28]
   169e0:	orr	w24, w0, w24, lsl #8
   169e4:	add	x28, x28, #0x1
   169e8:	mov	w0, w27
   169ec:	add	x0, x0, w2, uxtw #3
   169f0:	add	x0, x23, x0, lsl #1
   169f4:	add	x1, x0, #0x6, lsl #12
   169f8:	ldrh	w1, [x1, #2924]
   169fc:	lsr	w3, w22, #11
   16a00:	mul	w3, w3, w1
   16a04:	cmp	w3, w24
   16a08:	b.ls	16b38 <lzma_mode_is_supported@@XZ_5.0+0x55a8>  // b.plast
   16a0c:	add	x0, x0, #0x6, lsl #12
   16a10:	mov	w4, #0x800                 	// #2048
   16a14:	sub	w4, w4, w1
   16a18:	add	w1, w1, w4, lsr #5
   16a1c:	strh	w1, [x0, #2924]
   16a20:	lsl	w27, w27, #1
   16a24:	mov	w22, w3
   16a28:	mov	w0, #0xffffff              	// #16777215
   16a2c:	cmp	w22, w0
   16a30:	b.hi	16a4c <lzma_mode_is_supported@@XZ_5.0+0x54bc>  // b.pmore
   16a34:	cmp	x28, x21
   16a38:	b.eq	16b60 <lzma_mode_is_supported@@XZ_5.0+0x55d0>  // b.none
   16a3c:	lsl	w22, w22, #8
   16a40:	ldrb	w0, [x20, x28]
   16a44:	orr	w24, w0, w24, lsl #8
   16a48:	add	x28, x28, #0x1
   16a4c:	mov	w0, w27
   16a50:	add	x0, x0, w2, uxtw #3
   16a54:	add	x0, x23, x0, lsl #1
   16a58:	add	x1, x0, #0x6, lsl #12
   16a5c:	ldrh	w1, [x1, #2924]
   16a60:	lsr	w3, w22, #11
   16a64:	mul	w3, w3, w1
   16a68:	cmp	w3, w24
   16a6c:	b.ls	16b74 <lzma_mode_is_supported@@XZ_5.0+0x55e4>  // b.plast
   16a70:	add	x0, x0, #0x6, lsl #12
   16a74:	mov	w4, #0x800                 	// #2048
   16a78:	sub	w4, w4, w1
   16a7c:	add	w1, w1, w4, lsr #5
   16a80:	strh	w1, [x0, #2924]
   16a84:	lsl	w27, w27, #1
   16a88:	mov	w22, w3
   16a8c:	mov	w0, #0xffffff              	// #16777215
   16a90:	cmp	w22, w0
   16a94:	b.hi	16ab0 <lzma_mode_is_supported@@XZ_5.0+0x5520>  // b.pmore
   16a98:	cmp	x28, x21
   16a9c:	b.eq	16b9c <lzma_mode_is_supported@@XZ_5.0+0x560c>  // b.none
   16aa0:	lsl	w22, w22, #8
   16aa4:	ldrb	w0, [x20, x28]
   16aa8:	orr	w24, w0, w24, lsl #8
   16aac:	add	x28, x28, #0x1
   16ab0:	mov	w0, w27
   16ab4:	add	x0, x0, w2, uxtw #3
   16ab8:	add	x0, x23, x0, lsl #1
   16abc:	add	x1, x0, #0x6, lsl #12
   16ac0:	ldrh	w1, [x1, #2924]
   16ac4:	lsr	w2, w22, #11
   16ac8:	mul	w2, w2, w1
   16acc:	cmp	w2, w24
   16ad0:	b.ls	16bb0 <lzma_mode_is_supported@@XZ_5.0+0x5620>  // b.plast
   16ad4:	mov	w3, #0x800                 	// #2048
   16ad8:	sub	w3, w3, w1
   16adc:	add	w1, w1, w3, lsr #5
   16ae0:	and	w1, w1, #0xffff
   16ae4:	lsl	w27, w27, #1
   16ae8:	mov	w22, w2
   16aec:	add	x0, x0, #0x6, lsl #12
   16af0:	strh	w1, [x0, #2924]
   16af4:	add	w0, w27, #0x2
   16af8:	str	w0, [sp, #108]
   16afc:	b	1624c <lzma_mode_is_supported@@XZ_5.0+0x4cbc>
   16b00:	ldr	x25, [sp, #112]
   16b04:	b	16970 <lzma_mode_is_supported@@XZ_5.0+0x53e0>
   16b08:	add	x0, x23, #0x4, lsl #12
   16b0c:	mov	w1, #0x3a                  	// #58
   16b10:	str	w1, [x0, #11936]
   16b14:	mov	w0, #0x0                   	// #0
   16b18:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16b1c:	ldr	x25, [sp, #112]
   16b20:	b	169c4 <lzma_mode_is_supported@@XZ_5.0+0x5434>
   16b24:	add	x0, x23, #0x4, lsl #12
   16b28:	mov	w1, #0x3b                  	// #59
   16b2c:	str	w1, [x0, #11936]
   16b30:	mov	w0, #0x0                   	// #0
   16b34:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16b38:	sub	w22, w22, w3
   16b3c:	sub	w24, w24, w3
   16b40:	add	x0, x0, #0x6, lsl #12
   16b44:	sub	w1, w1, w1, lsr #5
   16b48:	strh	w1, [x0, #2924]
   16b4c:	lsl	w0, w27, #1
   16b50:	add	w27, w0, #0x1
   16b54:	b	16a28 <lzma_mode_is_supported@@XZ_5.0+0x5498>
   16b58:	ldr	x25, [sp, #112]
   16b5c:	b	16a28 <lzma_mode_is_supported@@XZ_5.0+0x5498>
   16b60:	add	x0, x23, #0x4, lsl #12
   16b64:	mov	w1, #0x3c                  	// #60
   16b68:	str	w1, [x0, #11936]
   16b6c:	mov	w0, #0x0                   	// #0
   16b70:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16b74:	sub	w22, w22, w3
   16b78:	sub	w24, w24, w3
   16b7c:	add	x0, x0, #0x6, lsl #12
   16b80:	sub	w1, w1, w1, lsr #5
   16b84:	strh	w1, [x0, #2924]
   16b88:	lsl	w0, w27, #1
   16b8c:	add	w27, w0, #0x1
   16b90:	b	16a8c <lzma_mode_is_supported@@XZ_5.0+0x54fc>
   16b94:	ldr	x25, [sp, #112]
   16b98:	b	16a8c <lzma_mode_is_supported@@XZ_5.0+0x54fc>
   16b9c:	add	x0, x23, #0x4, lsl #12
   16ba0:	mov	w1, #0x3d                  	// #61
   16ba4:	str	w1, [x0, #11936]
   16ba8:	mov	w0, #0x0                   	// #0
   16bac:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16bb0:	sub	w22, w22, w2
   16bb4:	sub	w24, w24, w2
   16bb8:	sub	w1, w1, w1, lsr #5
   16bbc:	and	w1, w1, #0xffff
   16bc0:	lsl	w2, w27, #1
   16bc4:	add	w27, w2, #0x1
   16bc8:	b	16aec <lzma_mode_is_supported@@XZ_5.0+0x555c>
   16bcc:	sub	w22, w22, w1
   16bd0:	sub	w24, w24, w1
   16bd4:	add	x1, x23, #0x6, lsl #12
   16bd8:	sub	w0, w0, w0, lsr #5
   16bdc:	strh	w0, [x1, #2666]
   16be0:	mov	w0, #0xffffff              	// #16777215
   16be4:	cmp	w22, w0
   16be8:	b.hi	16c04 <lzma_mode_is_supported@@XZ_5.0+0x5674>  // b.pmore
   16bec:	cmp	x28, x21
   16bf0:	b.eq	16ed4 <lzma_mode_is_supported@@XZ_5.0+0x5944>  // b.none
   16bf4:	lsl	w22, w22, #8
   16bf8:	ldrb	w0, [x20, x28]
   16bfc:	orr	w24, w0, w24, lsl #8
   16c00:	add	x28, x28, #0x1
   16c04:	add	x0, x23, w27, uxtw #1
   16c08:	add	x1, x0, #0x6, lsl #12
   16c0c:	ldrh	w1, [x1, #3180]
   16c10:	lsr	w2, w22, #11
   16c14:	mul	w2, w2, w1
   16c18:	cmp	w2, w24
   16c1c:	b.ls	16ee8 <lzma_mode_is_supported@@XZ_5.0+0x5958>  // b.plast
   16c20:	add	x0, x0, #0x6, lsl #12
   16c24:	mov	w3, #0x800                 	// #2048
   16c28:	sub	w3, w3, w1
   16c2c:	add	w1, w1, w3, lsr #5
   16c30:	strh	w1, [x0, #3180]
   16c34:	lsl	w27, w27, #1
   16c38:	mov	w22, w2
   16c3c:	mov	w0, #0xffffff              	// #16777215
   16c40:	cmp	w22, w0
   16c44:	b.hi	16c60 <lzma_mode_is_supported@@XZ_5.0+0x56d0>  // b.pmore
   16c48:	cmp	x28, x21
   16c4c:	b.eq	16f10 <lzma_mode_is_supported@@XZ_5.0+0x5980>  // b.none
   16c50:	lsl	w22, w22, #8
   16c54:	ldrb	w0, [x20, x28]
   16c58:	orr	w24, w0, w24, lsl #8
   16c5c:	add	x28, x28, #0x1
   16c60:	add	x0, x23, w27, uxtw #1
   16c64:	add	x1, x0, #0x6, lsl #12
   16c68:	ldrh	w1, [x1, #3180]
   16c6c:	lsr	w2, w22, #11
   16c70:	mul	w2, w2, w1
   16c74:	cmp	w2, w24
   16c78:	b.ls	16f24 <lzma_mode_is_supported@@XZ_5.0+0x5994>  // b.plast
   16c7c:	add	x0, x0, #0x6, lsl #12
   16c80:	mov	w3, #0x800                 	// #2048
   16c84:	sub	w3, w3, w1
   16c88:	add	w1, w1, w3, lsr #5
   16c8c:	strh	w1, [x0, #3180]
   16c90:	lsl	w27, w27, #1
   16c94:	mov	w22, w2
   16c98:	mov	w0, #0xffffff              	// #16777215
   16c9c:	cmp	w22, w0
   16ca0:	b.hi	16cbc <lzma_mode_is_supported@@XZ_5.0+0x572c>  // b.pmore
   16ca4:	cmp	x28, x21
   16ca8:	b.eq	16f4c <lzma_mode_is_supported@@XZ_5.0+0x59bc>  // b.none
   16cac:	lsl	w22, w22, #8
   16cb0:	ldrb	w0, [x20, x28]
   16cb4:	orr	w24, w0, w24, lsl #8
   16cb8:	add	x28, x28, #0x1
   16cbc:	add	x1, x23, w27, uxtw #1
   16cc0:	add	x0, x1, #0x6, lsl #12
   16cc4:	ldrh	w2, [x0, #3180]
   16cc8:	lsr	w0, w22, #11
   16ccc:	mul	w0, w0, w2
   16cd0:	cmp	w0, w24
   16cd4:	b.ls	16f60 <lzma_mode_is_supported@@XZ_5.0+0x59d0>  // b.plast
   16cd8:	add	x1, x1, #0x6, lsl #12
   16cdc:	mov	w3, #0x800                 	// #2048
   16ce0:	sub	w3, w3, w2
   16ce4:	add	w2, w2, w3, lsr #5
   16ce8:	strh	w2, [x1, #3180]
   16cec:	lsl	w27, w27, #1
   16cf0:	mov	w22, w0
   16cf4:	mov	w0, #0xffffff              	// #16777215
   16cf8:	cmp	w22, w0
   16cfc:	b.hi	16d18 <lzma_mode_is_supported@@XZ_5.0+0x5788>  // b.pmore
   16d00:	cmp	x28, x21
   16d04:	b.eq	16f88 <lzma_mode_is_supported@@XZ_5.0+0x59f8>  // b.none
   16d08:	lsl	w22, w22, #8
   16d0c:	ldrb	w0, [x20, x28]
   16d10:	orr	w24, w0, w24, lsl #8
   16d14:	add	x28, x28, #0x1
   16d18:	add	x1, x23, w27, uxtw #1
   16d1c:	add	x0, x1, #0x6, lsl #12
   16d20:	ldrh	w2, [x0, #3180]
   16d24:	lsr	w0, w22, #11
   16d28:	mul	w0, w0, w2
   16d2c:	cmp	w0, w24
   16d30:	b.ls	16f9c <lzma_mode_is_supported@@XZ_5.0+0x5a0c>  // b.plast
   16d34:	add	x1, x1, #0x6, lsl #12
   16d38:	mov	w3, #0x800                 	// #2048
   16d3c:	sub	w3, w3, w2
   16d40:	add	w2, w2, w3, lsr #5
   16d44:	strh	w2, [x1, #3180]
   16d48:	lsl	w27, w27, #1
   16d4c:	mov	w22, w0
   16d50:	mov	w0, #0xffffff              	// #16777215
   16d54:	cmp	w22, w0
   16d58:	b.hi	16d74 <lzma_mode_is_supported@@XZ_5.0+0x57e4>  // b.pmore
   16d5c:	cmp	x28, x21
   16d60:	b.eq	16fc4 <lzma_mode_is_supported@@XZ_5.0+0x5a34>  // b.none
   16d64:	lsl	w22, w22, #8
   16d68:	ldrb	w0, [x20, x28]
   16d6c:	orr	w24, w0, w24, lsl #8
   16d70:	add	x28, x28, #0x1
   16d74:	add	x1, x23, w27, uxtw #1
   16d78:	add	x0, x1, #0x6, lsl #12
   16d7c:	ldrh	w2, [x0, #3180]
   16d80:	lsr	w0, w22, #11
   16d84:	mul	w0, w0, w2
   16d88:	cmp	w0, w24
   16d8c:	b.ls	16fd8 <lzma_mode_is_supported@@XZ_5.0+0x5a48>  // b.plast
   16d90:	add	x1, x1, #0x6, lsl #12
   16d94:	mov	w3, #0x800                 	// #2048
   16d98:	sub	w3, w3, w2
   16d9c:	add	w2, w2, w3, lsr #5
   16da0:	strh	w2, [x1, #3180]
   16da4:	lsl	w27, w27, #1
   16da8:	mov	w22, w0
   16dac:	mov	w0, #0xffffff              	// #16777215
   16db0:	cmp	w22, w0
   16db4:	b.hi	16dd0 <lzma_mode_is_supported@@XZ_5.0+0x5840>  // b.pmore
   16db8:	cmp	x28, x21
   16dbc:	b.eq	17000 <lzma_mode_is_supported@@XZ_5.0+0x5a70>  // b.none
   16dc0:	lsl	w22, w22, #8
   16dc4:	ldrb	w0, [x20, x28]
   16dc8:	orr	w24, w0, w24, lsl #8
   16dcc:	add	x28, x28, #0x1
   16dd0:	add	x1, x23, w27, uxtw #1
   16dd4:	add	x0, x1, #0x6, lsl #12
   16dd8:	ldrh	w2, [x0, #3180]
   16ddc:	lsr	w0, w22, #11
   16de0:	mul	w0, w0, w2
   16de4:	cmp	w0, w24
   16de8:	b.ls	17014 <lzma_mode_is_supported@@XZ_5.0+0x5a84>  // b.plast
   16dec:	add	x1, x1, #0x6, lsl #12
   16df0:	mov	w3, #0x800                 	// #2048
   16df4:	sub	w3, w3, w2
   16df8:	add	w2, w2, w3, lsr #5
   16dfc:	strh	w2, [x1, #3180]
   16e00:	lsl	w27, w27, #1
   16e04:	mov	w22, w0
   16e08:	mov	w0, #0xffffff              	// #16777215
   16e0c:	cmp	w22, w0
   16e10:	b.hi	16e2c <lzma_mode_is_supported@@XZ_5.0+0x589c>  // b.pmore
   16e14:	cmp	x28, x21
   16e18:	b.eq	1703c <lzma_mode_is_supported@@XZ_5.0+0x5aac>  // b.none
   16e1c:	lsl	w22, w22, #8
   16e20:	ldrb	w0, [x20, x28]
   16e24:	orr	w24, w0, w24, lsl #8
   16e28:	add	x28, x28, #0x1
   16e2c:	add	x1, x23, w27, uxtw #1
   16e30:	add	x0, x1, #0x6, lsl #12
   16e34:	ldrh	w3, [x0, #3180]
   16e38:	lsr	w0, w22, #11
   16e3c:	mul	w0, w0, w3
   16e40:	cmp	w0, w24
   16e44:	b.ls	17050 <lzma_mode_is_supported@@XZ_5.0+0x5ac0>  // b.plast
   16e48:	add	x1, x1, #0x6, lsl #12
   16e4c:	mov	w2, #0x800                 	// #2048
   16e50:	sub	w2, w2, w3
   16e54:	add	w3, w3, w2, lsr #5
   16e58:	strh	w3, [x1, #3180]
   16e5c:	lsl	w27, w27, #1
   16e60:	mov	w2, w0
   16e64:	mov	w0, #0xffffff              	// #16777215
   16e68:	cmp	w2, w0
   16e6c:	b.hi	16e88 <lzma_mode_is_supported@@XZ_5.0+0x58f8>  // b.pmore
   16e70:	cmp	x28, x21
   16e74:	b.eq	1707c <lzma_mode_is_supported@@XZ_5.0+0x5aec>  // b.none
   16e78:	lsl	w2, w2, #8
   16e7c:	ldrb	w0, [x20, x28]
   16e80:	orr	w24, w0, w24, lsl #8
   16e84:	add	x28, x28, #0x1
   16e88:	add	x1, x23, w27, uxtw #1
   16e8c:	add	x0, x1, #0x6, lsl #12
   16e90:	ldrh	w0, [x0, #3180]
   16e94:	lsr	w22, w2, #11
   16e98:	mul	w22, w22, w0
   16e9c:	cmp	w22, w24
   16ea0:	b.ls	17094 <lzma_mode_is_supported@@XZ_5.0+0x5b04>  // b.plast
   16ea4:	mov	w2, #0x800                 	// #2048
   16ea8:	sub	w2, w2, w0
   16eac:	add	w0, w0, w2, lsr #5
   16eb0:	and	w0, w0, #0xffff
   16eb4:	lsl	w27, w27, #1
   16eb8:	add	x1, x1, #0x6, lsl #12
   16ebc:	strh	w0, [x1, #3180]
   16ec0:	sub	w0, w27, #0xee
   16ec4:	str	w0, [sp, #108]
   16ec8:	b	1624c <lzma_mode_is_supported@@XZ_5.0+0x4cbc>
   16ecc:	ldr	x25, [sp, #112]
   16ed0:	b	16be0 <lzma_mode_is_supported@@XZ_5.0+0x5650>
   16ed4:	add	x0, x23, #0x4, lsl #12
   16ed8:	mov	w1, #0x3e                  	// #62
   16edc:	str	w1, [x0, #11936]
   16ee0:	mov	w0, #0x0                   	// #0
   16ee4:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16ee8:	sub	w22, w22, w2
   16eec:	sub	w24, w24, w2
   16ef0:	add	x0, x0, #0x6, lsl #12
   16ef4:	sub	w1, w1, w1, lsr #5
   16ef8:	strh	w1, [x0, #3180]
   16efc:	lsl	w0, w27, #1
   16f00:	add	w27, w0, #0x1
   16f04:	b	16c3c <lzma_mode_is_supported@@XZ_5.0+0x56ac>
   16f08:	ldr	x25, [sp, #112]
   16f0c:	b	16c3c <lzma_mode_is_supported@@XZ_5.0+0x56ac>
   16f10:	add	x0, x23, #0x4, lsl #12
   16f14:	mov	w1, #0x3f                  	// #63
   16f18:	str	w1, [x0, #11936]
   16f1c:	mov	w0, #0x0                   	// #0
   16f20:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16f24:	sub	w22, w22, w2
   16f28:	sub	w24, w24, w2
   16f2c:	add	x0, x0, #0x6, lsl #12
   16f30:	sub	w1, w1, w1, lsr #5
   16f34:	strh	w1, [x0, #3180]
   16f38:	lsl	w0, w27, #1
   16f3c:	add	w27, w0, #0x1
   16f40:	b	16c98 <lzma_mode_is_supported@@XZ_5.0+0x5708>
   16f44:	ldr	x25, [sp, #112]
   16f48:	b	16c98 <lzma_mode_is_supported@@XZ_5.0+0x5708>
   16f4c:	add	x0, x23, #0x4, lsl #12
   16f50:	mov	w1, #0x40                  	// #64
   16f54:	str	w1, [x0, #11936]
   16f58:	mov	w0, #0x0                   	// #0
   16f5c:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16f60:	sub	w22, w22, w0
   16f64:	sub	w24, w24, w0
   16f68:	add	x1, x1, #0x6, lsl #12
   16f6c:	sub	w2, w2, w2, lsr #5
   16f70:	strh	w2, [x1, #3180]
   16f74:	lsl	w0, w27, #1
   16f78:	add	w27, w0, #0x1
   16f7c:	b	16cf4 <lzma_mode_is_supported@@XZ_5.0+0x5764>
   16f80:	ldr	x25, [sp, #112]
   16f84:	b	16cf4 <lzma_mode_is_supported@@XZ_5.0+0x5764>
   16f88:	add	x0, x23, #0x4, lsl #12
   16f8c:	mov	w1, #0x41                  	// #65
   16f90:	str	w1, [x0, #11936]
   16f94:	mov	w0, #0x0                   	// #0
   16f98:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16f9c:	sub	w22, w22, w0
   16fa0:	sub	w24, w24, w0
   16fa4:	add	x1, x1, #0x6, lsl #12
   16fa8:	sub	w2, w2, w2, lsr #5
   16fac:	strh	w2, [x1, #3180]
   16fb0:	lsl	w0, w27, #1
   16fb4:	add	w27, w0, #0x1
   16fb8:	b	16d50 <lzma_mode_is_supported@@XZ_5.0+0x57c0>
   16fbc:	ldr	x25, [sp, #112]
   16fc0:	b	16d50 <lzma_mode_is_supported@@XZ_5.0+0x57c0>
   16fc4:	add	x0, x23, #0x4, lsl #12
   16fc8:	mov	w1, #0x42                  	// #66
   16fcc:	str	w1, [x0, #11936]
   16fd0:	mov	w0, #0x0                   	// #0
   16fd4:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   16fd8:	sub	w22, w22, w0
   16fdc:	sub	w24, w24, w0
   16fe0:	add	x1, x1, #0x6, lsl #12
   16fe4:	sub	w2, w2, w2, lsr #5
   16fe8:	strh	w2, [x1, #3180]
   16fec:	lsl	w0, w27, #1
   16ff0:	add	w27, w0, #0x1
   16ff4:	b	16dac <lzma_mode_is_supported@@XZ_5.0+0x581c>
   16ff8:	ldr	x25, [sp, #112]
   16ffc:	b	16dac <lzma_mode_is_supported@@XZ_5.0+0x581c>
   17000:	add	x0, x23, #0x4, lsl #12
   17004:	mov	w1, #0x43                  	// #67
   17008:	str	w1, [x0, #11936]
   1700c:	mov	w0, #0x0                   	// #0
   17010:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   17014:	sub	w22, w22, w0
   17018:	sub	w24, w24, w0
   1701c:	add	x1, x1, #0x6, lsl #12
   17020:	sub	w2, w2, w2, lsr #5
   17024:	strh	w2, [x1, #3180]
   17028:	lsl	w0, w27, #1
   1702c:	add	w27, w0, #0x1
   17030:	b	16e08 <lzma_mode_is_supported@@XZ_5.0+0x5878>
   17034:	ldr	x25, [sp, #112]
   17038:	b	16e08 <lzma_mode_is_supported@@XZ_5.0+0x5878>
   1703c:	add	x0, x23, #0x4, lsl #12
   17040:	mov	w1, #0x44                  	// #68
   17044:	str	w1, [x0, #11936]
   17048:	mov	w0, #0x0                   	// #0
   1704c:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   17050:	sub	w2, w22, w0
   17054:	sub	w24, w24, w0
   17058:	add	x1, x1, #0x6, lsl #12
   1705c:	sub	w3, w3, w3, lsr #5
   17060:	strh	w3, [x1, #3180]
   17064:	lsl	w0, w27, #1
   17068:	add	w27, w0, #0x1
   1706c:	b	16e64 <lzma_mode_is_supported@@XZ_5.0+0x58d4>
   17070:	ldr	x25, [sp, #112]
   17074:	mov	w2, w22
   17078:	b	16e64 <lzma_mode_is_supported@@XZ_5.0+0x58d4>
   1707c:	add	x0, x23, #0x4, lsl #12
   17080:	mov	w1, #0x45                  	// #69
   17084:	str	w1, [x0, #11936]
   17088:	mov	w22, w2
   1708c:	mov	w0, #0x0                   	// #0
   17090:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   17094:	sub	w24, w24, w22
   17098:	sub	w0, w0, w0, lsr #5
   1709c:	and	w0, w0, #0xffff
   170a0:	lsl	w3, w27, #1
   170a4:	add	w27, w3, #0x1
   170a8:	sub	w22, w2, w22
   170ac:	b	16eb8 <lzma_mode_is_supported@@XZ_5.0+0x5928>
   170b0:	ldr	x25, [sp, #112]
   170b4:	b	1624c <lzma_mode_is_supported@@XZ_5.0+0x4cbc>
   170b8:	ldr	w1, [sp, #144]
   170bc:	mov	w0, w1
   170c0:	cmp	x25, w1, uxtw
   170c4:	b.hi	1713c <lzma_mode_is_supported@@XZ_5.0+0x5bac>  // b.pmore
   170c8:	ldr	x2, [sp, #176]
   170cc:	sub	w1, w2, #0x1
   170d0:	ldr	w0, [sp, #144]
   170d4:	sub	w0, w25, w0
   170d8:	add	w1, w1, w0
   170dc:	str	w1, [sp, #212]
   170e0:	sub	w0, w2, w1
   170e4:	cmp	w26, w0
   170e8:	b.ls	17160 <lzma_mode_is_supported@@XZ_5.0+0x5bd0>  // b.plast
   170ec:	mov	w0, w0
   170f0:	str	x0, [sp, #216]
   170f4:	mov	x2, x0
   170f8:	ldr	x0, [sp, #160]
   170fc:	add	x1, x0, w1, uxtw
   17100:	add	x0, x0, x25
   17104:	bl	30b0 <memmove@plt>
   17108:	ldr	x3, [sp, #216]
   1710c:	add	x25, x25, x3
   17110:	ldr	w1, [sp, #212]
   17114:	add	w26, w1, w26
   17118:	ldr	w1, [sp, #176]
   1711c:	sub	w26, w26, w1
   17120:	mov	x2, x26
   17124:	ldr	x0, [sp, #160]
   17128:	mov	x1, x0
   1712c:	add	x0, x0, x25
   17130:	bl	3090 <memcpy@plt>
   17134:	add	x26, x25, x26
   17138:	b	162bc <lzma_mode_is_supported@@XZ_5.0+0x4d2c>
   1713c:	sub	x1, x25, #0x1
   17140:	sub	x1, x1, x0
   17144:	mov	x2, x26
   17148:	ldr	x0, [sp, #160]
   1714c:	add	x1, x0, x1
   17150:	add	x0, x0, x25
   17154:	bl	3090 <memcpy@plt>
   17158:	add	x26, x25, x26
   1715c:	b	162bc <lzma_mode_is_supported@@XZ_5.0+0x4d2c>
   17160:	mov	x2, x26
   17164:	ldr	w1, [sp, #212]
   17168:	ldr	x0, [sp, #160]
   1716c:	add	x1, x0, w1, uxtw
   17170:	add	x0, x0, x25
   17174:	bl	30b0 <memmove@plt>
   17178:	add	x26, x25, x26
   1717c:	b	162bc <lzma_mode_is_supported@@XZ_5.0+0x4d2c>
   17180:	add	x0, x23, #0x4, lsl #12
   17184:	mov	w1, #0x46                  	// #70
   17188:	str	w1, [x0, #11936]
   1718c:	mov	x25, x26
   17190:	mov	w0, #0x0                   	// #0
   17194:	ldr	x1, [sp, #120]
   17198:	str	x25, [x1, #8]
   1719c:	ldr	x2, [sp, #136]
   171a0:	str	x2, [x1, #16]
   171a4:	add	x1, x23, #0x4, lsl #12
   171a8:	str	w22, [x1, #11884]
   171ac:	str	w24, [x1, #11888]
   171b0:	str	wzr, [x1, #11892]
   171b4:	str	x28, [x19]
   171b8:	ldr	w2, [sp, #152]
   171bc:	str	w2, [x1, #11896]
   171c0:	ldr	w2, [sp, #144]
   171c4:	str	w2, [x1, #11900]
   171c8:	ldr	w2, [sp, #188]
   171cc:	str	w2, [x1, #11904]
   171d0:	ldr	w2, [sp, #192]
   171d4:	str	w2, [x1, #11908]
   171d8:	ldr	w2, [sp, #200]
   171dc:	str	w2, [x1, #11912]
   171e0:	ldr	x2, [sp, #96]
   171e4:	str	x2, [x23, #28328]
   171e8:	str	w27, [x1, #11952]
   171ec:	ldr	w2, [sp, #184]
   171f0:	str	w2, [x1, #11956]
   171f4:	ldr	w2, [sp, #148]
   171f8:	str	w2, [x1, #11960]
   171fc:	ldr	w2, [sp, #108]
   17200:	str	w2, [x1, #11964]
   17204:	ldr	x1, [x23, #28312]
   17208:	cmn	x1, #0x1
   1720c:	b.eq	1722c <lzma_mode_is_supported@@XZ_5.0+0x5c9c>  // b.none
   17210:	ldr	x2, [sp, #112]
   17214:	add	x1, x2, x1
   17218:	sub	x25, x1, x25
   1721c:	str	x25, [x23, #28312]
   17220:	cmp	w0, #0x0
   17224:	ccmp	x25, #0x0, #0x0, eq  // eq = none
   17228:	b.eq	17260 <lzma_mode_is_supported@@XZ_5.0+0x5cd0>  // b.none
   1722c:	cmp	w0, #0x1
   17230:	b.eq	17284 <lzma_mode_is_supported@@XZ_5.0+0x5cf4>  // b.none
   17234:	ldp	x25, x26, [sp, #64]
   17238:	ldp	x27, x28, [sp, #80]
   1723c:	b	172f0 <lzma_mode_is_supported@@XZ_5.0+0x5d60>
   17240:	ldr	x25, [sp, #112]
   17244:	b	140a4 <lzma_mode_is_supported@@XZ_5.0+0x2b14>
   17248:	add	x0, x23, #0x4, lsl #12
   1724c:	str	wzr, [x0, #11936]
   17250:	mov	w0, #0x0                   	// #0
   17254:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   17258:	mov	w0, #0x9                   	// #9
   1725c:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   17260:	add	x0, x23, #0x4, lsl #12
   17264:	ldr	w0, [x0, #11936]
   17268:	cbz	w0, 1730c <lzma_mode_is_supported@@XZ_5.0+0x5d7c>
   1726c:	cmp	w0, #0x1
   17270:	b.eq	17284 <lzma_mode_is_supported@@XZ_5.0+0x5cf4>  // b.none
   17274:	mov	w0, #0x9                   	// #9
   17278:	ldp	x25, x26, [sp, #64]
   1727c:	ldp	x27, x28, [sp, #80]
   17280:	b	172f0 <lzma_mode_is_supported@@XZ_5.0+0x5d60>
   17284:	cmp	w24, #0x0
   17288:	mov	w0, #0x9                   	// #9
   1728c:	csinc	w0, w0, wzr, ne  // ne = any
   17290:	add	x23, x23, #0x4, lsl #12
   17294:	mov	w1, #0xffffffff            	// #-1
   17298:	str	w1, [x23, #11884]
   1729c:	str	wzr, [x23, #11888]
   172a0:	mov	w1, #0x5                   	// #5
   172a4:	str	w1, [x23, #11892]
   172a8:	ldp	x25, x26, [sp, #64]
   172ac:	ldp	x27, x28, [sp, #80]
   172b0:	b	172f0 <lzma_mode_is_supported@@XZ_5.0+0x5d60>
   172b4:	add	x0, x23, #0x4, lsl #12
   172b8:	mov	w1, #0x12                  	// #18
   172bc:	str	w1, [x0, #11936]
   172c0:	mov	w0, #0x0                   	// #0
   172c4:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   172c8:	add	x0, x23, #0x4, lsl #12
   172cc:	mov	w1, #0x32                  	// #50
   172d0:	str	w1, [x0, #11936]
   172d4:	ldr	x25, [sp, #128]
   172d8:	mov	w0, #0x0                   	// #0
   172dc:	b	17194 <lzma_mode_is_supported@@XZ_5.0+0x5c04>
   172e0:	stp	x25, x26, [sp, #64]
   172e4:	stp	x27, x28, [sp, #80]
   172e8:	b	13f90 <lzma_mode_is_supported@@XZ_5.0+0x2a00>
   172ec:	mov	w0, #0x0                   	// #0
   172f0:	ldp	x19, x20, [sp, #16]
   172f4:	ldp	x21, x22, [sp, #32]
   172f8:	ldp	x23, x24, [sp, #48]
   172fc:	ldp	x29, x30, [sp], #224
   17300:	ret
   17304:	mov	w0, #0x9                   	// #9
   17308:	b	172f0 <lzma_mode_is_supported@@XZ_5.0+0x5d60>
   1730c:	ldp	x25, x26, [sp, #64]
   17310:	ldp	x27, x28, [sp, #80]
   17314:	b	172f0 <lzma_mode_is_supported@@XZ_5.0+0x5d60>
   17318:	stp	x29, x30, [sp, #-48]!
   1731c:	mov	x29, sp
   17320:	stp	x19, x20, [sp, #16]
   17324:	mov	x20, x2
   17328:	mov	x19, x3
   1732c:	ldr	x3, [x0]
   17330:	cbz	x3, 1735c <lzma_mode_is_supported@@XZ_5.0+0x5dcc>
   17334:	ldr	w0, [x20]
   17338:	str	x0, [x19]
   1733c:	ldr	x0, [x20, #8]
   17340:	str	x0, [x19, #8]
   17344:	ldr	w0, [x20, #16]
   17348:	str	x0, [x19, #16]
   1734c:	mov	w0, #0x0                   	// #0
   17350:	ldp	x19, x20, [sp, #16]
   17354:	ldp	x29, x30, [sp], #48
   17358:	ret
   1735c:	str	x21, [sp, #32]
   17360:	mov	x21, x0
   17364:	mov	x0, #0x6ec0                	// #28352
   17368:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
   1736c:	str	x0, [x21]
   17370:	cbz	x0, 173a0 <lzma_mode_is_supported@@XZ_5.0+0x5e10>
   17374:	adrp	x0, 13000 <lzma_mode_is_supported@@XZ_5.0+0x1a70>
   17378:	add	x0, x0, #0xee8
   1737c:	str	x0, [x21, #8]
   17380:	adrp	x0, 13000 <lzma_mode_is_supported@@XZ_5.0+0x1a70>
   17384:	add	x0, x0, #0xc1c
   17388:	str	x0, [x21, #16]
   1738c:	adrp	x0, 13000 <lzma_mode_is_supported@@XZ_5.0+0x1a70>
   17390:	add	x0, x0, #0xc14
   17394:	str	x0, [x21, #24]
   17398:	ldr	x21, [sp, #32]
   1739c:	b	17334 <lzma_mode_is_supported@@XZ_5.0+0x5da4>
   173a0:	mov	w0, #0x5                   	// #5
   173a4:	ldr	x21, [sp, #32]
   173a8:	b	17350 <lzma_mode_is_supported@@XZ_5.0+0x5dc0>
   173ac:	stp	x29, x30, [sp, #-48]!
   173b0:	mov	x29, sp
   173b4:	stp	x19, x20, [sp, #16]
   173b8:	str	x21, [sp, #32]
   173bc:	mov	x21, x0
   173c0:	ldr	w0, [x2, #20]
   173c4:	mov	w20, #0xb                   	// #11
   173c8:	cmp	w0, #0x4
   173cc:	b.hi	17410 <lzma_mode_is_supported@@XZ_5.0+0x5e80>  // b.pmore
   173d0:	mov	x19, x2
   173d4:	ldr	w2, [x2, #24]
   173d8:	mov	w20, #0xb                   	// #11
   173dc:	cmp	w2, #0x4
   173e0:	b.hi	17410 <lzma_mode_is_supported@@XZ_5.0+0x5e80>  // b.pmore
   173e4:	add	w0, w0, w2
   173e8:	cmp	w0, #0x4
   173ec:	b.hi	17410 <lzma_mode_is_supported@@XZ_5.0+0x5e80>  // b.pmore
   173f0:	ldr	w0, [x19, #28]
   173f4:	cmp	w0, #0x4
   173f8:	b.hi	17410 <lzma_mode_is_supported@@XZ_5.0+0x5e80>  // b.pmore
   173fc:	mov	x2, x19
   17400:	mov	x0, x21
   17404:	bl	17318 <lzma_mode_is_supported@@XZ_5.0+0x5d88>
   17408:	mov	w20, w0
   1740c:	cbz	w0, 17424 <lzma_mode_is_supported@@XZ_5.0+0x5e94>
   17410:	mov	w0, w20
   17414:	ldp	x19, x20, [sp, #16]
   17418:	ldr	x21, [sp, #32]
   1741c:	ldp	x29, x30, [sp], #48
   17420:	ret
   17424:	mov	x1, x19
   17428:	ldr	x0, [x21]
   1742c:	bl	13c1c <lzma_mode_is_supported@@XZ_5.0+0x268c>
   17430:	ldr	x0, [x21]
   17434:	mov	x1, #0xffffffffffffffff    	// #-1
   17438:	str	x1, [x0, #28312]
   1743c:	b	17410 <lzma_mode_is_supported@@XZ_5.0+0x5e80>
   17440:	stp	x29, x30, [sp, #-16]!
   17444:	mov	x29, sp
   17448:	adrp	x3, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5a70>
   1744c:	add	x3, x3, #0x3ac
   17450:	bl	f95c <lzma_mf_is_supported@@XZ_5.0+0x1610>
   17454:	ldp	x29, x30, [sp], #16
   17458:	ret
   1745c:	and	w1, w1, #0xff
   17460:	cmp	w1, #0xe0
   17464:	b.hi	174c8 <lzma_mode_is_supported@@XZ_5.0+0x5f38>  // b.pmore
   17468:	mov	w3, #0xc16d                	// #49517
   1746c:	movk	w3, #0x6c16, lsl #16
   17470:	umull	x3, w1, w3
   17474:	lsr	x4, x3, #32
   17478:	sub	w3, w1, w4
   1747c:	add	w3, w4, w3, lsr #1
   17480:	lsr	w2, w3, #5
   17484:	ubfx	x3, x3, #5, #8
   17488:	str	w3, [x0, #28]
   1748c:	mov	w3, #0x2d                  	// #45
   17490:	msub	w1, w2, w3, w1
   17494:	and	w1, w1, #0xff
   17498:	mov	w2, #0x8e39                	// #36409
   1749c:	movk	w2, #0x38e3, lsl #16
   174a0:	umull	x2, w1, w2
   174a4:	lsr	x2, x2, #33
   174a8:	str	w2, [x0, #24]
   174ac:	add	w3, w2, w2, lsl #3
   174b0:	sub	w1, w1, w3
   174b4:	str	w1, [x0, #20]
   174b8:	add	w2, w2, w1
   174bc:	cmp	w2, #0x4
   174c0:	cset	w0, hi  // hi = pmore
   174c4:	ret
   174c8:	mov	w0, #0x1                   	// #1
   174cc:	b	174c4 <lzma_mode_is_supported@@XZ_5.0+0x5f34>
   174d0:	stp	x29, x30, [sp, #-16]!
   174d4:	mov	x29, sp
   174d8:	ldr	w0, [x0]
   174dc:	bl	fb14 <lzma_mf_is_supported@@XZ_5.0+0x17c8>
   174e0:	add	x0, x0, #0x6, lsl #12
   174e4:	add	x0, x0, #0xec0
   174e8:	ldp	x29, x30, [sp], #16
   174ec:	ret
   174f0:	ldr	w2, [x0, #20]
   174f4:	cmp	w2, #0x4
   174f8:	b.hi	17530 <lzma_mode_is_supported@@XZ_5.0+0x5fa0>  // b.pmore
   174fc:	mov	x1, x0
   17500:	ldr	w3, [x0, #24]
   17504:	mov	x0, #0xffffffffffffffff    	// #-1
   17508:	cmp	w3, #0x4
   1750c:	b.hi	17550 <lzma_mode_is_supported@@XZ_5.0+0x5fc0>  // b.pmore
   17510:	add	w2, w2, w3
   17514:	cmp	w2, #0x4
   17518:	b.hi	17550 <lzma_mode_is_supported@@XZ_5.0+0x5fc0>  // b.pmore
   1751c:	ldr	w0, [x1, #28]
   17520:	cmp	w0, #0x4
   17524:	b.ls	17538 <lzma_mode_is_supported@@XZ_5.0+0x5fa8>  // b.plast
   17528:	mov	x0, #0xffffffffffffffff    	// #-1
   1752c:	ret
   17530:	mov	x0, #0xffffffffffffffff    	// #-1
   17534:	ret
   17538:	stp	x29, x30, [sp, #-16]!
   1753c:	mov	x29, sp
   17540:	mov	x0, x1
   17544:	bl	174d0 <lzma_mode_is_supported@@XZ_5.0+0x5f40>
   17548:	ldp	x29, x30, [sp], #16
   1754c:	ret
   17550:	ret
   17554:	cmp	x3, #0x5
   17558:	b.eq	17564 <lzma_mode_is_supported@@XZ_5.0+0x5fd4>  // b.none
   1755c:	mov	w0, #0x8                   	// #8
   17560:	ret
   17564:	stp	x29, x30, [sp, #-48]!
   17568:	mov	x29, sp
   1756c:	stp	x19, x20, [sp, #16]
   17570:	stp	x21, x22, [sp, #32]
   17574:	mov	x22, x0
   17578:	mov	x20, x1
   1757c:	mov	x19, x2
   17580:	mov	x0, #0x70                  	// #112
   17584:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
   17588:	mov	x21, x0
   1758c:	cbz	x0, 175f8 <lzma_mode_is_supported@@XZ_5.0+0x6068>
   17590:	ldrb	w1, [x19]
   17594:	bl	1745c <lzma_mode_is_supported@@XZ_5.0+0x5ecc>
   17598:	and	w0, w0, #0xff
   1759c:	cbnz	w0, 175e4 <lzma_mode_is_supported@@XZ_5.0+0x6054>
   175a0:	ldrb	w1, [x19, #4]
   175a4:	ldrb	w0, [x19, #1]
   175a8:	orr	w0, w0, w1, lsl #24
   175ac:	ldrb	w1, [x19, #2]
   175b0:	ldrb	w2, [x19, #3]
   175b4:	lsl	w2, w2, #16
   175b8:	orr	w1, w2, w1, lsl #8
   175bc:	orr	w1, w1, w0
   175c0:	str	w1, [x21]
   175c4:	str	xzr, [x21, #8]
   175c8:	str	wzr, [x21, #16]
   175cc:	str	x21, [x22]
   175d0:	mov	w0, #0x0                   	// #0
   175d4:	ldp	x19, x20, [sp, #16]
   175d8:	ldp	x21, x22, [sp, #32]
   175dc:	ldp	x29, x30, [sp], #48
   175e0:	ret
   175e4:	mov	x1, x20
   175e8:	mov	x0, x21
   175ec:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
   175f0:	mov	w0, #0x8                   	// #8
   175f4:	b	175d4 <lzma_mode_is_supported@@XZ_5.0+0x6044>
   175f8:	mov	w0, #0x5                   	// #5
   175fc:	b	175d4 <lzma_mode_is_supported@@XZ_5.0+0x6044>
   17600:	mov	x2, x0
   17604:	ldr	x1, [x1, #8]
   17608:	cbz	x1, 17688 <lzma_mode_is_supported@@XZ_5.0+0x60f8>
   1760c:	ldr	w0, [x0]
   17610:	cbnz	w0, 17690 <lzma_mode_is_supported@@XZ_5.0+0x6100>
   17614:	ldr	w3, [x1, #20]
   17618:	ldr	w4, [x2, #36]
   1761c:	cmp	w4, w3
   17620:	b.eq	17674 <lzma_mode_is_supported@@XZ_5.0+0x60e4>  // b.none
   17624:	cmp	w3, #0x4
   17628:	b.hi	17698 <lzma_mode_is_supported@@XZ_5.0+0x6108>  // b.pmore
   1762c:	ldr	w4, [x1, #24]
   17630:	cmp	w4, #0x4
   17634:	b.hi	176a0 <lzma_mode_is_supported@@XZ_5.0+0x6110>  // b.pmore
   17638:	add	w4, w3, w4
   1763c:	cmp	w4, #0x4
   17640:	b.hi	176a8 <lzma_mode_is_supported@@XZ_5.0+0x6118>  // b.pmore
   17644:	ldr	w4, [x1, #28]
   17648:	cmp	w4, #0x4
   1764c:	b.hi	176b0 <lzma_mode_is_supported@@XZ_5.0+0x6120>  // b.pmore
   17650:	str	w3, [x2, #36]
   17654:	ldr	w3, [x1, #24]
   17658:	str	w3, [x2, #40]
   1765c:	ldr	w1, [x1, #28]
   17660:	str	w1, [x2, #44]
   17664:	mov	w1, #0x1                   	// #1
   17668:	strb	w1, [x2, #128]
   1766c:	strb	w1, [x2, #129]
   17670:	ret
   17674:	ldr	x5, [x2, #40]
   17678:	ldr	x4, [x1, #24]
   1767c:	cmp	x5, x4
   17680:	b.ne	17624 <lzma_mode_is_supported@@XZ_5.0+0x6094>  // b.any
   17684:	b	17670 <lzma_mode_is_supported@@XZ_5.0+0x60e0>
   17688:	mov	w0, #0xb                   	// #11
   1768c:	b	17670 <lzma_mode_is_supported@@XZ_5.0+0x60e0>
   17690:	mov	w0, #0xb                   	// #11
   17694:	b	17670 <lzma_mode_is_supported@@XZ_5.0+0x60e0>
   17698:	mov	w0, #0x8                   	// #8
   1769c:	b	17670 <lzma_mode_is_supported@@XZ_5.0+0x60e0>
   176a0:	mov	w0, #0x8                   	// #8
   176a4:	b	17670 <lzma_mode_is_supported@@XZ_5.0+0x60e0>
   176a8:	mov	w0, #0x8                   	// #8
   176ac:	b	17670 <lzma_mode_is_supported@@XZ_5.0+0x60e0>
   176b0:	mov	w0, #0x8                   	// #8
   176b4:	b	17670 <lzma_mode_is_supported@@XZ_5.0+0x60e0>
   176b8:	cbz	x2, 177d8 <lzma_mode_is_supported@@XZ_5.0+0x6248>
   176bc:	stp	x29, x30, [sp, #-48]!
   176c0:	mov	x29, sp
   176c4:	stp	x19, x20, [sp, #16]
   176c8:	stp	x21, x22, [sp, #32]
   176cc:	mov	x20, x0
   176d0:	mov	x22, x1
   176d4:	mov	x19, x2
   176d8:	mov	x21, x3
   176dc:	ldr	x4, [x0]
   176e0:	cbz	x4, 17794 <lzma_mode_is_supported@@XZ_5.0+0x6204>
   176e4:	ldp	x2, x3, [x19]
   176e8:	stp	x2, x3, [x4, #16]
   176ec:	ldp	x2, x3, [x19, #16]
   176f0:	stp	x2, x3, [x4, #32]
   176f4:	ldp	x2, x3, [x19, #32]
   176f8:	stp	x2, x3, [x4, #48]
   176fc:	ldp	x2, x3, [x19, #48]
   17700:	stp	x2, x3, [x4, #64]
   17704:	ldp	x2, x3, [x19, #64]
   17708:	stp	x2, x3, [x4, #80]
   1770c:	ldp	x2, x3, [x19, #80]
   17710:	stp	x2, x3, [x4, #96]
   17714:	ldp	x2, x3, [x19, #96]
   17718:	stp	x2, x3, [x4, #112]
   1771c:	str	wzr, [x4]
   17720:	mov	w0, #0x1                   	// #1
   17724:	strb	w0, [x4, #128]
   17728:	strb	wzr, [x4, #129]
   1772c:	ldr	x1, [x4, #24]
   17730:	mov	w0, #0x1                   	// #1
   17734:	cbz	x1, 17744 <lzma_mode_is_supported@@XZ_5.0+0x61b4>
   17738:	ldr	w0, [x4, #32]
   1773c:	cmp	w0, #0x0
   17740:	cset	w0, eq  // eq = none
   17744:	strb	w0, [x4, #130]
   17748:	mov	x3, x21
   1774c:	add	x2, x4, #0x10
   17750:	mov	x1, x22
   17754:	add	x0, x4, #0x8
   17758:	bl	112c8 <lzma_lzma_preset@@XZ_5.0+0x178c>
   1775c:	cbnz	w0, 17784 <lzma_mode_is_supported@@XZ_5.0+0x61f4>
   17760:	ldr	x2, [x21, #8]
   17764:	ldr	x1, [x21]
   17768:	add	x1, x2, x1
   1776c:	mov	x3, #0xffff                	// #65535
   17770:	cmp	x1, x3
   17774:	b.hi	17784 <lzma_mode_is_supported@@XZ_5.0+0x61f4>  // b.pmore
   17778:	mov	x1, #0x10000               	// #65536
   1777c:	sub	x2, x1, x2
   17780:	str	x2, [x21]
   17784:	ldp	x19, x20, [sp, #16]
   17788:	ldp	x21, x22, [sp, #32]
   1778c:	ldp	x29, x30, [sp], #48
   17790:	ret
   17794:	mov	x0, #0xa8                  	// #168
   17798:	movk	x0, #0x1, lsl #16
   1779c:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
   177a0:	mov	x4, x0
   177a4:	cbz	x0, 177e0 <lzma_mode_is_supported@@XZ_5.0+0x6250>
   177a8:	str	x0, [x20]
   177ac:	adrp	x0, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5a70>
   177b0:	add	x0, x0, #0x81c
   177b4:	str	x0, [x20, #8]
   177b8:	adrp	x0, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5a70>
   177bc:	add	x0, x0, #0x7e8
   177c0:	str	x0, [x20, #16]
   177c4:	adrp	x0, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5a70>
   177c8:	add	x0, x0, #0x600
   177cc:	str	x0, [x20, #24]
   177d0:	str	xzr, [x4, #8]
   177d4:	b	176e4 <lzma_mode_is_supported@@XZ_5.0+0x6154>
   177d8:	mov	w0, #0xb                   	// #11
   177dc:	ret
   177e0:	mov	w0, #0x5                   	// #5
   177e4:	b	17784 <lzma_mode_is_supported@@XZ_5.0+0x61f4>
   177e8:	stp	x29, x30, [sp, #-32]!
   177ec:	mov	x29, sp
   177f0:	stp	x19, x20, [sp, #16]
   177f4:	mov	x19, x0
   177f8:	mov	x20, x1
   177fc:	ldr	x0, [x0, #8]
   17800:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
   17804:	mov	x1, x20
   17808:	mov	x0, x19
   1780c:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
   17810:	ldp	x19, x20, [sp, #16]
   17814:	ldp	x29, x30, [sp], #32
   17818:	ret
   1781c:	stp	x29, x30, [sp, #-96]!
   17820:	mov	x29, sp
   17824:	stp	x19, x20, [sp, #16]
   17828:	stp	x21, x22, [sp, #32]
   1782c:	stp	x23, x24, [sp, #48]
   17830:	stp	x25, x26, [sp, #64]
   17834:	stp	x27, x28, [sp, #80]
   17838:	mov	x19, x0
   1783c:	mov	x21, x1
   17840:	mov	x24, x2
   17844:	mov	x22, x3
   17848:	mov	x23, x4
   1784c:	add	x26, x0, #0x98
   17850:	add	x25, x0, #0xa0
   17854:	mov	w27, #0x200000              	// #2097152
   17858:	b	17ad0 <lzma_mode_is_supported@@XZ_5.0+0x6540>
   1785c:	cbz	w0, 17930 <lzma_mode_is_supported@@XZ_5.0+0x63a0>
   17860:	ldr	x0, [x19, #136]
   17864:	sub	w0, w27, w0
   17868:	ldr	w1, [x21, #100]
   1786c:	mov	w5, #0x0                   	// #0
   17870:	cmp	w1, w0
   17874:	b.hi	1788c <lzma_mode_is_supported@@XZ_5.0+0x62fc>  // b.pmore
   17878:	ldr	w5, [x21, #24]
   1787c:	add	w0, w0, w5
   17880:	ldr	w5, [x21, #28]
   17884:	add	w1, w1, w5
   17888:	sub	w5, w0, w1
   1788c:	ldr	w28, [x21, #24]
   17890:	ldr	w20, [x21, #28]
   17894:	mov	x4, #0x10000               	// #65536
   17898:	add	x3, x19, #0x90
   1789c:	add	x2, x19, #0xa6
   178a0:	mov	x1, x21
   178a4:	ldr	x0, [x19, #8]
   178a8:	bl	ff58 <lzma_lzma_preset@@XZ_5.0+0x41c>
   178ac:	ldr	w1, [x21, #28]
   178b0:	ldr	w2, [x21, #24]
   178b4:	add	w20, w20, w2
   178b8:	add	w28, w28, w1
   178bc:	sub	w20, w20, w28
   178c0:	ldr	x28, [x19, #136]
   178c4:	add	x20, x20, x28
   178c8:	str	x20, [x19, #136]
   178cc:	cmp	w0, #0x1
   178d0:	b.ne	17b6c <lzma_mode_is_supported@@XZ_5.0+0x65dc>  // b.any
   178d4:	ldr	x2, [x19, #144]
   178d8:	cmp	x20, x2
   178dc:	b.hi	179a0 <lzma_mode_is_supported@@XZ_5.0+0x6410>  // b.pmore
   178e0:	add	x20, x20, w1, uxtw
   178e4:	str	x20, [x19, #136]
   178e8:	str	wzr, [x21, #28]
   178ec:	ldrb	w0, [x19, #130]
   178f0:	cmp	w0, #0x0
   178f4:	cset	w0, eq  // eq = none
   178f8:	add	w0, w0, #0x1
   178fc:	strb	w0, [x19, #160]
   17900:	strb	wzr, [x19, #130]
   17904:	sub	x0, x20, #0x1
   17908:	lsr	x0, x0, #8
   1790c:	strb	w0, [x19, #161]
   17910:	sub	w20, w20, #0x1
   17914:	strb	w20, [x19, #162]
   17918:	str	xzr, [x19, #152]
   1791c:	mov	w0, #0x1                   	// #1
   17920:	strb	w0, [x19, #129]
   17924:	mov	w0, #0x3                   	// #3
   17928:	str	w0, [x19]
   1792c:	b	17ad0 <lzma_mode_is_supported@@XZ_5.0+0x6540>
   17930:	ldr	w0, [x21, #36]
   17934:	ldr	w2, [x21, #28]
   17938:	add	w0, w0, w2
   1793c:	ldr	w2, [x21, #24]
   17940:	cmp	w0, w2
   17944:	b.eq	17964 <lzma_mode_is_supported@@XZ_5.0+0x63d4>  // b.none
   17948:	ldrb	w0, [x19, #129]
   1794c:	cbnz	w0, 1798c <lzma_mode_is_supported@@XZ_5.0+0x63fc>
   17950:	str	xzr, [x19, #136]
   17954:	str	xzr, [x19, #144]
   17958:	mov	w0, #0x1                   	// #1
   1795c:	str	w0, [x19]
   17960:	b	17860 <lzma_mode_is_supported@@XZ_5.0+0x62d0>
   17964:	ldr	w0, [x21, #104]
   17968:	cmp	w0, #0x3
   1796c:	b.eq	1797c <lzma_mode_is_supported@@XZ_5.0+0x63ec>  // b.none
   17970:	cmp	w0, #0x0
   17974:	cset	w0, ne  // ne = any
   17978:	b	17b50 <lzma_mode_is_supported@@XZ_5.0+0x65c0>
   1797c:	add	x2, x1, #0x1
   17980:	str	x2, [x22]
   17984:	strb	wzr, [x24, x1]
   17988:	b	17970 <lzma_mode_is_supported@@XZ_5.0+0x63e0>
   1798c:	add	x1, x19, #0x10
   17990:	ldr	x0, [x19, #8]
   17994:	bl	110ac <lzma_lzma_preset@@XZ_5.0+0x1570>
   17998:	cbz	w0, 17950 <lzma_mode_is_supported@@XZ_5.0+0x63c0>
   1799c:	b	17b50 <lzma_mode_is_supported@@XZ_5.0+0x65c0>
   179a0:	ldrb	w4, [x19, #128]
   179a4:	cbz	w4, 17a5c <lzma_mode_is_supported@@XZ_5.0+0x64cc>
   179a8:	ldrb	w0, [x19, #130]
   179ac:	cbz	w0, 17a4c <lzma_mode_is_supported@@XZ_5.0+0x64bc>
   179b0:	mov	w0, #0xffffffe0            	// #-32
   179b4:	strb	w0, [x19, #160]
   179b8:	mov	x3, #0x0                   	// #0
   179bc:	str	x3, [x19, #152]
   179c0:	sub	x20, x20, #0x1
   179c4:	add	x0, x19, x3
   179c8:	lsr	x5, x20, #16
   179cc:	ldrb	w1, [x0, #160]
   179d0:	add	w1, w1, w5
   179d4:	strb	w1, [x0, #160]
   179d8:	lsr	x1, x20, #8
   179dc:	strb	w1, [x0, #161]
   179e0:	strb	w20, [x0, #162]
   179e4:	sub	x2, x2, #0x1
   179e8:	lsr	x1, x2, #8
   179ec:	strb	w1, [x0, #163]
   179f0:	strb	w2, [x0, #164]
   179f4:	cbnz	w4, 17a84 <lzma_mode_is_supported@@XZ_5.0+0x64f4>
   179f8:	strb	wzr, [x19, #128]
   179fc:	strb	wzr, [x19, #129]
   17a00:	strb	wzr, [x19, #130]
   17a04:	ldr	x0, [x19, #144]
   17a08:	add	x0, x0, #0x6
   17a0c:	str	x0, [x19, #144]
   17a10:	mov	w0, #0x2                   	// #2
   17a14:	str	w0, [x19]
   17a18:	mov	x5, x23
   17a1c:	mov	x4, x22
   17a20:	mov	x3, x24
   17a24:	ldr	x2, [x19, #144]
   17a28:	mov	x1, x26
   17a2c:	mov	x0, x25
   17a30:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
   17a34:	ldr	x1, [x19, #152]
   17a38:	ldr	x0, [x19, #144]
   17a3c:	cmp	x1, x0
   17a40:	b.ne	17b74 <lzma_mode_is_supported@@XZ_5.0+0x65e4>  // b.any
   17a44:	str	wzr, [x19]
   17a48:	b	17ad0 <lzma_mode_is_supported@@XZ_5.0+0x6540>
   17a4c:	mov	w0, #0xffffffc0            	// #-64
   17a50:	strb	w0, [x19, #160]
   17a54:	mov	x3, #0x0                   	// #0
   17a58:	b	179bc <lzma_mode_is_supported@@XZ_5.0+0x642c>
   17a5c:	ldrb	w0, [x19, #129]
   17a60:	cbz	w0, 17a74 <lzma_mode_is_supported@@XZ_5.0+0x64e4>
   17a64:	mov	w0, #0xffffffa0            	// #-96
   17a68:	strb	w0, [x19, #161]
   17a6c:	mov	x3, #0x1                   	// #1
   17a70:	b	179bc <lzma_mode_is_supported@@XZ_5.0+0x642c>
   17a74:	mov	w0, #0xffffff80            	// #-128
   17a78:	strb	w0, [x19, #161]
   17a7c:	mov	x3, #0x1                   	// #1
   17a80:	b	179bc <lzma_mode_is_supported@@XZ_5.0+0x642c>
   17a84:	add	x1, x3, #0x5
   17a88:	add	x1, x25, x1
   17a8c:	add	x0, x19, #0x10
   17a90:	bl	114d8 <lzma_lzma_preset@@XZ_5.0+0x199c>
   17a94:	b	179f8 <lzma_mode_is_supported@@XZ_5.0+0x6468>
   17a98:	mov	x5, x23
   17a9c:	mov	x4, x22
   17aa0:	mov	x3, x24
   17aa4:	mov	x2, #0x3                   	// #3
   17aa8:	mov	x1, x26
   17aac:	mov	x0, x25
   17ab0:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
   17ab4:	ldr	x0, [x19, #152]
   17ab8:	cmp	x0, #0x3
   17abc:	b.ne	17b7c <lzma_mode_is_supported@@XZ_5.0+0x65ec>  // b.any
   17ac0:	mov	w0, #0x4                   	// #4
   17ac4:	str	w0, [x19]
   17ac8:	b	17afc <lzma_mode_is_supported@@XZ_5.0+0x656c>
   17acc:	str	wzr, [x19]
   17ad0:	ldr	x1, [x22]
   17ad4:	cmp	x1, x23
   17ad8:	b.cs	17b4c <lzma_mode_is_supported@@XZ_5.0+0x65bc>  // b.hs, b.nlast
   17adc:	ldr	w0, [x19]
   17ae0:	cmp	w0, #0x2
   17ae4:	b.eq	17a18 <lzma_mode_is_supported@@XZ_5.0+0x6488>  // b.none
   17ae8:	b.ls	1785c <lzma_mode_is_supported@@XZ_5.0+0x62cc>  // b.plast
   17aec:	cmp	w0, #0x3
   17af0:	b.eq	17a98 <lzma_mode_is_supported@@XZ_5.0+0x6508>  // b.none
   17af4:	cmp	w0, #0x4
   17af8:	b.ne	17ad4 <lzma_mode_is_supported@@XZ_5.0+0x6544>  // b.any
   17afc:	ldr	x28, [x22]
   17b00:	ldr	x1, [x19, #136]
   17b04:	sub	x20, x23, x28
   17b08:	cmp	x20, x1
   17b0c:	csel	x20, x20, x1, ls  // ls = plast
   17b10:	ldr	w0, [x21, #24]
   17b14:	sub	x0, x0, x1
   17b18:	ldr	x1, [x21]
   17b1c:	mov	x2, x20
   17b20:	add	x1, x1, x0
   17b24:	add	x0, x24, x28
   17b28:	bl	3090 <memcpy@plt>
   17b2c:	add	x28, x28, x20
   17b30:	str	x28, [x22]
   17b34:	ldr	x0, [x19, #136]
   17b38:	sub	x20, x0, x20
   17b3c:	str	x20, [x19, #136]
   17b40:	cbz	x20, 17acc <lzma_mode_is_supported@@XZ_5.0+0x653c>
   17b44:	mov	w0, #0x0                   	// #0
   17b48:	b	17b50 <lzma_mode_is_supported@@XZ_5.0+0x65c0>
   17b4c:	mov	w0, #0x0                   	// #0
   17b50:	ldp	x19, x20, [sp, #16]
   17b54:	ldp	x21, x22, [sp, #32]
   17b58:	ldp	x23, x24, [sp, #48]
   17b5c:	ldp	x25, x26, [sp, #64]
   17b60:	ldp	x27, x28, [sp, #80]
   17b64:	ldp	x29, x30, [sp], #96
   17b68:	ret
   17b6c:	mov	w0, #0x0                   	// #0
   17b70:	b	17b50 <lzma_mode_is_supported@@XZ_5.0+0x65c0>
   17b74:	mov	w0, #0x0                   	// #0
   17b78:	b	17b50 <lzma_mode_is_supported@@XZ_5.0+0x65c0>
   17b7c:	mov	w0, #0x0                   	// #0
   17b80:	b	17b50 <lzma_mode_is_supported@@XZ_5.0+0x65c0>
   17b84:	stp	x29, x30, [sp, #-16]!
   17b88:	mov	x29, sp
   17b8c:	adrp	x3, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5a70>
   17b90:	add	x3, x3, #0x6b8
   17b94:	bl	e11c <lzma_crc64@@XZ_5.0+0x1740>
   17b98:	ldp	x29, x30, [sp], #16
   17b9c:	ret
   17ba0:	stp	x29, x30, [sp, #-16]!
   17ba4:	mov	x29, sp
   17ba8:	bl	11448 <lzma_lzma_preset@@XZ_5.0+0x190c>
   17bac:	add	x1, x0, #0x10, lsl #12
   17bb0:	add	x1, x1, #0xa8
   17bb4:	cmn	x0, #0x1
   17bb8:	csel	x0, x1, x0, ne  // ne = any
   17bbc:	ldp	x29, x30, [sp], #16
   17bc0:	ret
   17bc4:	ldr	w0, [x0]
   17bc8:	cmp	w0, #0x1, lsl #12
   17bcc:	mov	w2, #0x1000                	// #4096
   17bd0:	csel	w0, w0, w2, cs  // cs = hs, nlast
   17bd4:	sub	w0, w0, #0x1
   17bd8:	orr	w0, w0, w0, lsr #2
   17bdc:	orr	w0, w0, w0, lsr #3
   17be0:	orr	w0, w0, w0, lsr #4
   17be4:	orr	w0, w0, w0, lsr #8
   17be8:	orr	w0, w0, w0, lsr #16
   17bec:	cmn	w0, #0x1
   17bf0:	b.eq	17c34 <lzma_mode_is_supported@@XZ_5.0+0x66a4>  // b.none
   17bf4:	add	w0, w0, #0x1
   17bf8:	mov	w2, #0x1fff                	// #8191
   17bfc:	cmp	w0, w2
   17c00:	b.ls	17c40 <lzma_mode_is_supported@@XZ_5.0+0x66b0>  // b.plast
   17c04:	mov	w2, #0x1ffffff             	// #33554431
   17c08:	cmp	w0, w2
   17c0c:	b.ls	17c50 <lzma_mode_is_supported@@XZ_5.0+0x66c0>  // b.plast
   17c10:	lsr	w0, w0, #24
   17c14:	adrp	x2, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   17c18:	ldr	x2, [x2, #4008]
   17c1c:	ldrb	w0, [x2, w0, uxtw]
   17c20:	add	w0, w0, #0x30
   17c24:	sub	w0, w0, #0x18
   17c28:	strb	w0, [x1]
   17c2c:	mov	w0, #0x0                   	// #0
   17c30:	ret
   17c34:	mov	w0, #0x28                  	// #40
   17c38:	strb	w0, [x1]
   17c3c:	b	17c2c <lzma_mode_is_supported@@XZ_5.0+0x669c>
   17c40:	adrp	x2, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   17c44:	ldr	x2, [x2, #4008]
   17c48:	ldrb	w0, [x2, w0, uxtw]
   17c4c:	b	17c24 <lzma_mode_is_supported@@XZ_5.0+0x6694>
   17c50:	lsr	w0, w0, #12
   17c54:	adrp	x2, 34000 <lzma_mode_is_supported@@XZ_5.0+0x22a70>
   17c58:	ldr	x2, [x2, #4008]
   17c5c:	ldrb	w0, [x2, w0, uxtw]
   17c60:	add	w0, w0, #0x18
   17c64:	b	17c24 <lzma_mode_is_supported@@XZ_5.0+0x6694>
   17c68:	ldr	w0, [x0]
   17c6c:	add	x0, x0, x0, lsl #1
   17c70:	cmp	x0, #0x100, lsl #12
   17c74:	mov	x1, #0x100000              	// #1048576
   17c78:	csel	x0, x0, x1, cs  // cs = hs, nlast
   17c7c:	ret
   17c80:	stp	x29, x30, [sp, #-48]!
   17c84:	mov	x29, sp
   17c88:	stp	x19, x20, [sp, #16]
   17c8c:	stp	x21, x22, [sp, #32]
   17c90:	mov	x21, x1
   17c94:	mov	x19, x2
   17c98:	mov	x22, x3
   17c9c:	ldr	x4, [x0]
   17ca0:	cbz	x4, 17cf0 <lzma_mode_is_supported@@XZ_5.0+0x6760>
   17ca4:	str	wzr, [x4]
   17ca8:	mov	w0, #0x1                   	// #1
   17cac:	strb	w0, [x4, #64]
   17cb0:	ldr	x1, [x19, #8]
   17cb4:	mov	w0, #0x1                   	// #1
   17cb8:	cbz	x1, 17cc8 <lzma_mode_is_supported@@XZ_5.0+0x6738>
   17cbc:	ldr	w0, [x19, #16]
   17cc0:	cmp	w0, #0x0
   17cc4:	cset	w0, eq  // eq = none
   17cc8:	strb	w0, [x4, #65]
   17ccc:	mov	x3, x22
   17cd0:	mov	x2, x19
   17cd4:	mov	x1, x21
   17cd8:	add	x0, x4, #0x8
   17cdc:	bl	17318 <lzma_mode_is_supported@@XZ_5.0+0x5d88>
   17ce0:	ldp	x19, x20, [sp, #16]
   17ce4:	ldp	x21, x22, [sp, #32]
   17ce8:	ldp	x29, x30, [sp], #48
   17cec:	ret
   17cf0:	mov	x20, x0
   17cf4:	mov	x0, #0xb8                  	// #184
   17cf8:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
   17cfc:	mov	x4, x0
   17d00:	cbz	x0, 17d38 <lzma_mode_is_supported@@XZ_5.0+0x67a8>
   17d04:	str	x0, [x20]
   17d08:	adrp	x0, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5a70>
   17d0c:	add	x0, x0, #0xd74
   17d10:	str	x0, [x20, #8]
   17d14:	adrp	x0, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5a70>
   17d18:	add	x0, x0, #0xd40
   17d1c:	str	x0, [x20, #32]
   17d20:	str	xzr, [x4, #8]
   17d24:	str	xzr, [x4, #16]
   17d28:	str	xzr, [x4, #24]
   17d2c:	str	xzr, [x4, #32]
   17d30:	str	xzr, [x4, #40]
   17d34:	b	17ca4 <lzma_mode_is_supported@@XZ_5.0+0x6714>
   17d38:	mov	w0, #0x5                   	// #5
   17d3c:	b	17ce0 <lzma_mode_is_supported@@XZ_5.0+0x6750>
   17d40:	stp	x29, x30, [sp, #-32]!
   17d44:	mov	x29, sp
   17d48:	stp	x19, x20, [sp, #16]
   17d4c:	mov	x19, x0
   17d50:	mov	x20, x1
   17d54:	ldr	x0, [x0, #8]
   17d58:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
   17d5c:	mov	x1, x20
   17d60:	mov	x0, x19
   17d64:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
   17d68:	ldp	x19, x20, [sp, #16]
   17d6c:	ldp	x29, x30, [sp], #32
   17d70:	ret
   17d74:	stp	x29, x30, [sp, #-112]!
   17d78:	mov	x29, sp
   17d7c:	stp	x19, x20, [sp, #16]
   17d80:	stp	x21, x22, [sp, #32]
   17d84:	stp	x23, x24, [sp, #48]
   17d88:	stp	x25, x26, [sp, #64]
   17d8c:	stp	x27, x28, [sp, #80]
   17d90:	mov	x20, x0
   17d94:	mov	x25, x1
   17d98:	mov	x24, x2
   17d9c:	mov	x22, x3
   17da0:	mov	x23, x4
   17da4:	mov	w28, #0x4                   	// #4
   17da8:	add	x26, x0, #0x48
   17dac:	mov	w27, #0x6                   	// #6
   17db0:	add	x0, x1, #0x8
   17db4:	str	x0, [sp, #104]
   17db8:	ldr	x21, [x22]
   17dbc:	cmp	x21, x23
   17dc0:	b.cc	17e24 <lzma_mode_is_supported@@XZ_5.0+0x6894>  // b.lo, b.ul, b.last
   17dc4:	ldr	w0, [x20]
   17dc8:	cmp	w0, #0x6
   17dcc:	b.ne	18090 <lzma_mode_is_supported@@XZ_5.0+0x6b00>  // b.any
   17dd0:	ldr	x5, [x20, #16]
   17dd4:	mov	x4, x23
   17dd8:	mov	x3, x22
   17ddc:	mov	x2, x24
   17de0:	mov	x1, x25
   17de4:	ldr	x0, [x20, #8]
   17de8:	blr	x5
   17dec:	mov	w19, w0
   17df0:	ldr	x0, [x22]
   17df4:	ldr	x1, [x20, #56]
   17df8:	sub	x2, x0, x21
   17dfc:	cmp	x1, x2
   17e00:	b.cc	180b8 <lzma_mode_is_supported@@XZ_5.0+0x6b28>  // b.lo, b.ul, b.last
   17e04:	sub	x0, x21, x0
   17e08:	add	x0, x0, x1
   17e0c:	str	x0, [x20, #56]
   17e10:	cmp	w19, #0x1
   17e14:	b.ne	17f88 <lzma_mode_is_supported@@XZ_5.0+0x69f8>  // b.any
   17e18:	cbnz	x0, 180c0 <lzma_mode_is_supported@@XZ_5.0+0x6b30>
   17e1c:	str	wzr, [x20]
   17e20:	b	17db8 <lzma_mode_is_supported@@XZ_5.0+0x6828>
   17e24:	ldr	w19, [x20]
   17e28:	cmp	w19, #0x3
   17e2c:	b.eq	18040 <lzma_mode_is_supported@@XZ_5.0+0x6ab0>  // b.none
   17e30:	b.hi	17edc <lzma_mode_is_supported@@XZ_5.0+0x694c>  // b.pmore
   17e34:	cmp	w19, #0x1
   17e38:	b.eq	18018 <lzma_mode_is_supported@@XZ_5.0+0x6a88>  // b.none
   17e3c:	cmp	w19, #0x2
   17e40:	b.ne	17e78 <lzma_mode_is_supported@@XZ_5.0+0x68e8>  // b.any
   17e44:	add	x0, x21, #0x1
   17e48:	str	x0, [x22]
   17e4c:	ldrb	w1, [x24, x21]
   17e50:	add	x1, x1, #0x1
   17e54:	ldr	x0, [x20, #48]
   17e58:	add	x1, x1, x0
   17e5c:	str	x1, [x20, #48]
   17e60:	mov	w0, #0x3                   	// #3
   17e64:	str	w0, [x20]
   17e68:	ldr	x2, [x20, #32]
   17e6c:	ldr	x0, [x20, #8]
   17e70:	blr	x2
   17e74:	b	17db8 <lzma_mode_is_supported@@XZ_5.0+0x6828>
   17e78:	cbnz	w19, 17ed4 <lzma_mode_is_supported@@XZ_5.0+0x6944>
   17e7c:	ldrb	w0, [x24, x21]
   17e80:	add	x21, x21, #0x1
   17e84:	str	x21, [x22]
   17e88:	cbz	w0, 18098 <lzma_mode_is_supported@@XZ_5.0+0x6b08>
   17e8c:	cmp	w0, #0xdf
   17e90:	ccmp	w0, #0x1, #0x4, ls  // ls = plast
   17e94:	b.ne	17fb0 <lzma_mode_is_supported@@XZ_5.0+0x6a20>  // b.any
   17e98:	mov	w1, #0x1                   	// #1
   17e9c:	strb	w1, [x20, #64]
   17ea0:	strb	w1, [x20, #65]
   17ea4:	cmp	w0, #0x7f
   17ea8:	b.ls	17fe8 <lzma_mode_is_supported@@XZ_5.0+0x6a58>  // b.plast
   17eac:	ubfiz	x1, x0, #16, #5
   17eb0:	str	x1, [x20, #48]
   17eb4:	mov	w1, #0x1                   	// #1
   17eb8:	str	w1, [x20]
   17ebc:	cmp	w0, #0xbf
   17ec0:	b.ls	17fc0 <lzma_mode_is_supported@@XZ_5.0+0x6a30>  // b.plast
   17ec4:	strb	wzr, [x20, #64]
   17ec8:	mov	w0, #0x5                   	// #5
   17ecc:	str	w0, [x20, #4]
   17ed0:	b	18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>
   17ed4:	mov	w19, #0xb                   	// #11
   17ed8:	b	17f88 <lzma_mode_is_supported@@XZ_5.0+0x69f8>
   17edc:	cmp	w19, #0x5
   17ee0:	b.eq	1805c <lzma_mode_is_supported@@XZ_5.0+0x6acc>  // b.none
   17ee4:	b.ls	17f54 <lzma_mode_is_supported@@XZ_5.0+0x69c4>  // b.plast
   17ee8:	cmp	w19, #0x6
   17eec:	b.eq	17dd0 <lzma_mode_is_supported@@XZ_5.0+0x6840>  // b.none
   17ef0:	cmp	w19, #0x7
   17ef4:	b.ne	17fa8 <lzma_mode_is_supported@@XZ_5.0+0x6a18>  // b.any
   17ef8:	ldr	x0, [x20, #56]
   17efc:	sub	x1, x23, x21
   17f00:	add	x2, x21, x0
   17f04:	cmp	x1, x0
   17f08:	ldr	x5, [x25, #24]
   17f0c:	ldr	x4, [sp, #104]
   17f10:	ldr	x3, [x25]
   17f14:	csel	x2, x2, x23, hi  // hi = pmore
   17f18:	mov	x1, x22
   17f1c:	mov	x0, x24
   17f20:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
   17f24:	ldr	x1, [x20, #56]
   17f28:	sub	x1, x1, x0
   17f2c:	str	x1, [x20, #56]
   17f30:	ldr	x0, [x25, #8]
   17f34:	ldr	x1, [x25, #16]
   17f38:	cmp	x0, x1
   17f3c:	b.ls	17f44 <lzma_mode_is_supported@@XZ_5.0+0x69b4>  // b.plast
   17f40:	str	x0, [x25, #16]
   17f44:	ldr	x0, [x20, #56]
   17f48:	cbnz	x0, 180c8 <lzma_mode_is_supported@@XZ_5.0+0x6b38>
   17f4c:	str	wzr, [x20]
   17f50:	b	17db8 <lzma_mode_is_supported@@XZ_5.0+0x6828>
   17f54:	cmp	w19, #0x4
   17f58:	b.ne	17f84 <lzma_mode_is_supported@@XZ_5.0+0x69f4>  // b.any
   17f5c:	add	x0, x21, #0x1
   17f60:	str	x0, [x22]
   17f64:	ldrb	w0, [x24, x21]
   17f68:	add	x1, x0, #0x1
   17f6c:	ldr	x0, [x20, #56]
   17f70:	add	x0, x0, x1
   17f74:	str	x0, [x20, #56]
   17f78:	ldr	w0, [x20, #4]
   17f7c:	str	w0, [x20]
   17f80:	b	17db8 <lzma_mode_is_supported@@XZ_5.0+0x6828>
   17f84:	mov	w19, #0xb                   	// #11
   17f88:	mov	w0, w19
   17f8c:	ldp	x19, x20, [sp, #16]
   17f90:	ldp	x21, x22, [sp, #32]
   17f94:	ldp	x23, x24, [sp, #48]
   17f98:	ldp	x25, x26, [sp, #64]
   17f9c:	ldp	x27, x28, [sp, #80]
   17fa0:	ldp	x29, x30, [sp], #112
   17fa4:	ret
   17fa8:	mov	w19, #0xb                   	// #11
   17fac:	b	17f88 <lzma_mode_is_supported@@XZ_5.0+0x69f8>
   17fb0:	ldrb	w1, [x20, #65]
   17fb4:	cbz	w1, 17ea4 <lzma_mode_is_supported@@XZ_5.0+0x6914>
   17fb8:	mov	w19, #0x9                   	// #9
   17fbc:	b	17f88 <lzma_mode_is_supported@@XZ_5.0+0x69f8>
   17fc0:	ldrb	w1, [x20, #64]
   17fc4:	cbnz	w1, 180a0 <lzma_mode_is_supported@@XZ_5.0+0x6b10>
   17fc8:	str	w27, [x20, #4]
   17fcc:	cmp	w0, #0x9f
   17fd0:	b.ls	18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>  // b.plast
   17fd4:	ldr	x2, [x20, #24]
   17fd8:	mov	x1, x26
   17fdc:	ldr	x0, [x20, #8]
   17fe0:	blr	x2
   17fe4:	b	18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>
   17fe8:	cmp	w0, #0x2
   17fec:	b.hi	180a8 <lzma_mode_is_supported@@XZ_5.0+0x6b18>  // b.pmore
   17ff0:	mov	w0, #0x3                   	// #3
   17ff4:	str	w0, [x20]
   17ff8:	mov	w0, #0x7                   	// #7
   17ffc:	str	w0, [x20, #4]
   18000:	ldrb	w0, [x20, #65]
   18004:	cbz	w0, 17db8 <lzma_mode_is_supported@@XZ_5.0+0x6828>
   18008:	strb	wzr, [x20, #65]
   1800c:	mov	w0, #0x1                   	// #1
   18010:	strb	w0, [x25, #40]
   18014:	b	17f88 <lzma_mode_is_supported@@XZ_5.0+0x69f8>
   18018:	add	x0, x21, #0x1
   1801c:	str	x0, [x22]
   18020:	ldrb	w0, [x24, x21]
   18024:	ubfiz	x1, x0, #8, #8
   18028:	ldr	x0, [x20, #48]
   1802c:	add	x0, x0, x1
   18030:	str	x0, [x20, #48]
   18034:	mov	w0, #0x2                   	// #2
   18038:	str	w0, [x20]
   1803c:	b	17db8 <lzma_mode_is_supported@@XZ_5.0+0x6828>
   18040:	add	x0, x21, #0x1
   18044:	str	x0, [x22]
   18048:	ldrb	w0, [x24, x21]
   1804c:	ubfiz	x0, x0, #8, #8
   18050:	str	x0, [x20, #56]
   18054:	str	w28, [x20]
   18058:	b	17db8 <lzma_mode_is_supported@@XZ_5.0+0x6828>
   1805c:	add	x0, x21, #0x1
   18060:	str	x0, [x22]
   18064:	ldrb	w1, [x24, x21]
   18068:	mov	x0, x26
   1806c:	bl	1745c <lzma_mode_is_supported@@XZ_5.0+0x5ecc>
   18070:	and	w0, w0, #0xff
   18074:	cbnz	w0, 180b0 <lzma_mode_is_supported@@XZ_5.0+0x6b20>
   18078:	ldr	x2, [x20, #24]
   1807c:	mov	x1, x26
   18080:	ldr	x0, [x20, #8]
   18084:	blr	x2
   18088:	str	w27, [x20]
   1808c:	b	17db8 <lzma_mode_is_supported@@XZ_5.0+0x6828>
   18090:	mov	w19, #0x0                   	// #0
   18094:	b	17f88 <lzma_mode_is_supported@@XZ_5.0+0x69f8>
   18098:	mov	w19, #0x1                   	// #1
   1809c:	b	17f88 <lzma_mode_is_supported@@XZ_5.0+0x69f8>
   180a0:	mov	w19, #0x9                   	// #9
   180a4:	b	17f88 <lzma_mode_is_supported@@XZ_5.0+0x69f8>
   180a8:	mov	w19, #0x9                   	// #9
   180ac:	b	17f88 <lzma_mode_is_supported@@XZ_5.0+0x69f8>
   180b0:	mov	w19, #0x9                   	// #9
   180b4:	b	17f88 <lzma_mode_is_supported@@XZ_5.0+0x69f8>
   180b8:	mov	w19, #0x9                   	// #9
   180bc:	b	17f88 <lzma_mode_is_supported@@XZ_5.0+0x69f8>
   180c0:	mov	w19, #0x9                   	// #9
   180c4:	b	17f88 <lzma_mode_is_supported@@XZ_5.0+0x69f8>
   180c8:	mov	w19, #0x0                   	// #0
   180cc:	b	17f88 <lzma_mode_is_supported@@XZ_5.0+0x69f8>
   180d0:	stp	x29, x30, [sp, #-16]!
   180d4:	mov	x29, sp
   180d8:	adrp	x3, 17000 <lzma_mode_is_supported@@XZ_5.0+0x5a70>
   180dc:	add	x3, x3, #0xc80
   180e0:	bl	f95c <lzma_mf_is_supported@@XZ_5.0+0x1610>
   180e4:	ldp	x29, x30, [sp], #16
   180e8:	ret
   180ec:	stp	x29, x30, [sp, #-16]!
   180f0:	mov	x29, sp
   180f4:	bl	174d0 <lzma_mode_is_supported@@XZ_5.0+0x5f40>
   180f8:	add	x0, x0, #0xb8
   180fc:	ldp	x29, x30, [sp], #16
   18100:	ret
   18104:	cmp	x3, #0x1
   18108:	b.ne	18184 <lzma_mode_is_supported@@XZ_5.0+0x6bf4>  // b.any
   1810c:	stp	x29, x30, [sp, #-32]!
   18110:	mov	x29, sp
   18114:	stp	x19, x20, [sp, #16]
   18118:	mov	x20, x0
   1811c:	mov	x19, x2
   18120:	ldrb	w0, [x2]
   18124:	and	w2, w0, #0xc0
   18128:	cmp	w0, #0x28
   1812c:	mov	w0, #0x8                   	// #8
   18130:	ccmp	w2, #0x0, #0x0, ls  // ls = plast
   18134:	b.ne	18178 <lzma_mode_is_supported@@XZ_5.0+0x6be8>  // b.any
   18138:	mov	x0, #0x70                  	// #112
   1813c:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
   18140:	cbz	x0, 1818c <lzma_mode_is_supported@@XZ_5.0+0x6bfc>
   18144:	ldrb	w2, [x19]
   18148:	cmp	w2, #0x28
   1814c:	and	w1, w2, #0x1
   18150:	orr	w1, w1, #0x2
   18154:	lsr	w3, w2, #1
   18158:	add	w3, w3, #0xb
   1815c:	lsl	w1, w1, w3
   18160:	csinv	w1, w1, wzr, ne  // ne = any
   18164:	str	w1, [x0]
   18168:	str	xzr, [x0, #8]
   1816c:	str	wzr, [x0, #16]
   18170:	str	x0, [x20]
   18174:	mov	w0, #0x0                   	// #0
   18178:	ldp	x19, x20, [sp, #16]
   1817c:	ldp	x29, x30, [sp], #32
   18180:	ret
   18184:	mov	w0, #0x8                   	// #8
   18188:	ret
   1818c:	mov	w0, #0x5                   	// #5
   18190:	b	18178 <lzma_mode_is_supported@@XZ_5.0+0x6be8>
   18194:	stp	x29, x30, [sp, #-32]!
   18198:	mov	x29, sp
   1819c:	stp	x19, x20, [sp, #16]
   181a0:	mov	x19, x0
   181a4:	mov	x20, x1
   181a8:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
   181ac:	mov	x1, x20
   181b0:	mov	x0, x19
   181b4:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
   181b8:	ldp	x19, x20, [sp, #16]
   181bc:	ldp	x29, x30, [sp], #32
   181c0:	ret
   181c4:	mov	x1, x0
   181c8:	cbz	x0, 181f0 <lzma_mode_is_supported@@XZ_5.0+0x6c60>
   181cc:	ldr	w2, [x0]
   181d0:	mov	x0, #0xffffffffffffffff    	// #-1
   181d4:	cbnz	w2, 181ec <lzma_mode_is_supported@@XZ_5.0+0x6c5c>
   181d8:	ldr	w0, [x1, #4]
   181dc:	sub	w0, w0, #0x1
   181e0:	cmp	w0, #0x100
   181e4:	mov	x0, #0x158                 	// #344
   181e8:	csinv	x0, x0, xzr, cc  // cc = lo, ul, last
   181ec:	ret
   181f0:	mov	x0, #0xffffffffffffffff    	// #-1
   181f4:	b	181ec <lzma_mode_is_supported@@XZ_5.0+0x6c5c>
   181f8:	stp	x29, x30, [sp, #-48]!
   181fc:	mov	x29, sp
   18200:	stp	x19, x20, [sp, #16]
   18204:	stp	x21, x22, [sp, #32]
   18208:	mov	x22, x1
   1820c:	mov	x20, x2
   18210:	ldr	x19, [x0]
   18214:	cbz	x19, 18270 <lzma_mode_is_supported@@XZ_5.0+0x6ce0>
   18218:	ldr	x21, [x20, #16]
   1821c:	mov	x0, x21
   18220:	bl	181c4 <lzma_mode_is_supported@@XZ_5.0+0x6c34>
   18224:	mov	x1, x0
   18228:	mov	w0, #0x8                   	// #8
   1822c:	cmn	x1, #0x1
   18230:	b.eq	18260 <lzma_mode_is_supported@@XZ_5.0+0x6cd0>  // b.none
   18234:	ldr	w0, [x21, #4]
   18238:	str	x0, [x19, #72]
   1823c:	strb	wzr, [x19, #80]
   18240:	mov	x2, #0x100                 	// #256
   18244:	mov	w1, #0x0                   	// #0
   18248:	add	x0, x19, #0x51
   1824c:	bl	3230 <memset@plt>
   18250:	add	x2, x20, #0x18
   18254:	mov	x1, x22
   18258:	mov	x0, x19
   1825c:	bl	38d8 <lzma_version_string@@XZ_5.0+0x210>
   18260:	ldp	x19, x20, [sp, #16]
   18264:	ldp	x21, x22, [sp, #32]
   18268:	ldp	x29, x30, [sp], #48
   1826c:	ret
   18270:	mov	x21, x0
   18274:	mov	x0, #0x158                 	// #344
   18278:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
   1827c:	mov	x19, x0
   18280:	cbz	x0, 182c0 <lzma_mode_is_supported@@XZ_5.0+0x6d30>
   18284:	str	x0, [x21]
   18288:	adrp	x0, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>
   1828c:	add	x0, x0, #0x194
   18290:	str	x0, [x21, #32]
   18294:	str	xzr, [x19]
   18298:	mov	x0, #0xffffffffffffffff    	// #-1
   1829c:	str	x0, [x19, #8]
   182a0:	str	xzr, [x19, #16]
   182a4:	str	xzr, [x19, #24]
   182a8:	str	xzr, [x19, #32]
   182ac:	str	xzr, [x19, #40]
   182b0:	str	xzr, [x19, #48]
   182b4:	str	xzr, [x19, #56]
   182b8:	str	xzr, [x19, #64]
   182bc:	b	18218 <lzma_mode_is_supported@@XZ_5.0+0x6c88>
   182c0:	mov	w0, #0x5                   	// #5
   182c4:	b	18260 <lzma_mode_is_supported@@XZ_5.0+0x6cd0>
   182c8:	sub	sp, sp, #0x40
   182cc:	stp	x29, x30, [sp, #16]
   182d0:	add	x29, sp, #0x10
   182d4:	stp	x19, x20, [sp, #32]
   182d8:	stp	x21, x22, [sp, #48]
   182dc:	mov	x19, x0
   182e0:	mov	x20, x5
   182e4:	mov	x21, x6
   182e8:	ldr	x8, [x0, #24]
   182ec:	cbz	x8, 1837c <lzma_mode_is_supported@@XZ_5.0+0x6dec>
   182f0:	ldr	x22, [x6]
   182f4:	ldr	w0, [sp, #64]
   182f8:	str	w0, [sp]
   182fc:	ldr	x0, [x19]
   18300:	blr	x8
   18304:	ldr	x1, [x21]
   18308:	ldr	x8, [x19, #72]
   1830c:	subs	x2, x1, x22
   18310:	b.eq	18368 <lzma_mode_is_supported@@XZ_5.0+0x6dd8>  // b.none
   18314:	ldrb	w1, [x19, #80]
   18318:	add	x5, x20, x22
   1831c:	add	x9, x2, x5
   18320:	mov	x3, x5
   18324:	add	w5, w1, w5
   18328:	sub	w6, w5, w3
   1832c:	add	x4, x8, w6, uxtb
   18330:	add	x4, x19, w4, uxtb
   18334:	ldrb	w7, [x4, #81]
   18338:	ldrb	w4, [x3]
   1833c:	add	x6, x19, w6, uxtb
   18340:	strb	w4, [x6, #81]
   18344:	sub	w4, w4, w7
   18348:	strb	w4, [x3], #1
   1834c:	cmp	x3, x9
   18350:	b.ne	18328 <lzma_mode_is_supported@@XZ_5.0+0x6d98>  // b.any
   18354:	sub	w1, w1, #0x1
   18358:	and	w1, w1, #0xff
   1835c:	sub	x2, x2, #0x1
   18360:	sub	w1, w1, w2
   18364:	strb	w1, [x19, #80]
   18368:	ldp	x19, x20, [sp, #32]
   1836c:	ldp	x21, x22, [sp, #48]
   18370:	ldp	x29, x30, [sp, #16]
   18374:	add	sp, sp, #0x40
   18378:	ret
   1837c:	ldr	x1, [x3]
   18380:	ldr	x5, [x6]
   18384:	sub	x0, x4, x1
   18388:	sub	x7, x7, x5
   1838c:	cmp	x0, x7
   18390:	csel	x7, x0, x7, ls  // ls = plast
   18394:	ldr	x10, [x19, #72]
   18398:	cbz	x7, 183f0 <lzma_mode_is_supported@@XZ_5.0+0x6e60>
   1839c:	ldrb	w8, [x19, #80]
   183a0:	mov	x0, #0x0                   	// #0
   183a4:	add	x2, x2, x1
   183a8:	add	x5, x20, x5
   183ac:	sub	w6, w8, w0
   183b0:	add	x1, x10, w6, uxtb
   183b4:	add	x1, x19, w1, uxtb
   183b8:	ldrb	w9, [x1, #81]
   183bc:	ldrb	w1, [x2, x0]
   183c0:	add	x6, x19, w6, uxtb
   183c4:	strb	w1, [x6, #81]
   183c8:	sub	w1, w1, w9
   183cc:	strb	w1, [x5, x0]
   183d0:	add	x0, x0, #0x1
   183d4:	cmp	x7, x0
   183d8:	b.ne	183ac <lzma_mode_is_supported@@XZ_5.0+0x6e1c>  // b.any
   183dc:	sub	w8, w8, #0x1
   183e0:	and	w8, w8, #0xff
   183e4:	sub	x0, x7, #0x1
   183e8:	sub	w8, w8, w0
   183ec:	strb	w8, [x19, #80]
   183f0:	ldr	x0, [x3]
   183f4:	add	x0, x7, x0
   183f8:	str	x0, [x3]
   183fc:	ldr	x1, [x21]
   18400:	add	x7, x1, x7
   18404:	str	x7, [x21]
   18408:	ldr	w1, [sp, #64]
   1840c:	cmp	w1, #0x0
   18410:	ccmp	x0, x4, #0x0, ne  // ne = any
   18414:	cset	w0, eq  // eq = none
   18418:	b	18368 <lzma_mode_is_supported@@XZ_5.0+0x6dd8>
   1841c:	stp	x29, x30, [sp, #-16]!
   18420:	mov	x29, sp
   18424:	add	x2, x3, #0x10
   18428:	bl	3820 <lzma_version_string@@XZ_5.0+0x158>
   1842c:	ldp	x29, x30, [sp], #16
   18430:	ret
   18434:	stp	x29, x30, [sp, #-16]!
   18438:	mov	x29, sp
   1843c:	adrp	x4, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>
   18440:	add	x4, x4, #0x2c8
   18444:	str	x4, [x0, #24]
   18448:	adrp	x4, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>
   1844c:	add	x4, x4, #0x41c
   18450:	str	x4, [x0, #64]
   18454:	bl	181f8 <lzma_mode_is_supported@@XZ_5.0+0x6c68>
   18458:	ldp	x29, x30, [sp], #16
   1845c:	ret
   18460:	stp	x29, x30, [sp, #-32]!
   18464:	mov	x29, sp
   18468:	stp	x19, x20, [sp, #16]
   1846c:	mov	x20, x0
   18470:	mov	x19, x1
   18474:	bl	181c4 <lzma_mode_is_supported@@XZ_5.0+0x6c34>
   18478:	cmn	x0, #0x1
   1847c:	b.eq	1849c <lzma_mode_is_supported@@XZ_5.0+0x6f0c>  // b.none
   18480:	ldr	w0, [x20, #4]
   18484:	sub	w0, w0, #0x1
   18488:	strb	w0, [x19]
   1848c:	mov	w0, #0x0                   	// #0
   18490:	ldp	x19, x20, [sp, #16]
   18494:	ldp	x29, x30, [sp], #32
   18498:	ret
   1849c:	mov	w0, #0xb                   	// #11
   184a0:	b	18490 <lzma_mode_is_supported@@XZ_5.0+0x6f00>
   184a4:	sub	sp, sp, #0x40
   184a8:	stp	x29, x30, [sp, #16]
   184ac:	add	x29, sp, #0x10
   184b0:	stp	x19, x20, [sp, #32]
   184b4:	stp	x21, x22, [sp, #48]
   184b8:	mov	x19, x0
   184bc:	mov	x20, x5
   184c0:	mov	x21, x6
   184c4:	ldr	x22, [x6]
   184c8:	ldr	w0, [sp, #64]
   184cc:	str	w0, [sp]
   184d0:	ldr	x8, [x19, #24]
   184d4:	ldr	x0, [x19]
   184d8:	blr	x8
   184dc:	ldr	x1, [x21]
   184e0:	ldr	x7, [x19, #72]
   184e4:	subs	x2, x1, x22
   184e8:	b.eq	18544 <lzma_mode_is_supported@@XZ_5.0+0x6fb4>  // b.none
   184ec:	ldrb	w1, [x19, #80]
   184f0:	add	x5, x20, x22
   184f4:	add	x9, x2, x5
   184f8:	mov	x4, x5
   184fc:	add	w5, w1, w5
   18500:	sub	w6, w5, w4
   18504:	add	x3, x7, w6, uxtb
   18508:	add	x3, x19, w3, uxtb
   1850c:	ldrb	w3, [x3, #81]
   18510:	ldrb	w8, [x4]
   18514:	add	w3, w3, w8
   18518:	and	w3, w3, #0xff
   1851c:	strb	w3, [x4], #1
   18520:	add	x6, x19, w6, uxtb
   18524:	strb	w3, [x6, #81]
   18528:	cmp	x4, x9
   1852c:	b.ne	18500 <lzma_mode_is_supported@@XZ_5.0+0x6f70>  // b.any
   18530:	sub	w1, w1, #0x1
   18534:	and	w1, w1, #0xff
   18538:	sub	x2, x2, #0x1
   1853c:	sub	w1, w1, w2
   18540:	strb	w1, [x19, #80]
   18544:	ldp	x19, x20, [sp, #32]
   18548:	ldp	x21, x22, [sp, #48]
   1854c:	ldp	x29, x30, [sp, #16]
   18550:	add	sp, sp, #0x40
   18554:	ret
   18558:	stp	x29, x30, [sp, #-16]!
   1855c:	mov	x29, sp
   18560:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>
   18564:	add	x3, x3, #0x4a4
   18568:	str	x3, [x0, #24]
   1856c:	bl	181f8 <lzma_mode_is_supported@@XZ_5.0+0x6c68>
   18570:	ldp	x29, x30, [sp], #16
   18574:	ret
   18578:	cmp	x3, #0x1
   1857c:	b.eq	18588 <lzma_mode_is_supported@@XZ_5.0+0x6ff8>  // b.none
   18580:	mov	w0, #0x8                   	// #8
   18584:	ret
   18588:	stp	x29, x30, [sp, #-32]!
   1858c:	mov	x29, sp
   18590:	stp	x19, x20, [sp, #16]
   18594:	mov	x19, x0
   18598:	mov	x20, x2
   1859c:	mov	x0, #0x28                  	// #40
   185a0:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
   185a4:	cbz	x0, 185cc <lzma_mode_is_supported@@XZ_5.0+0x703c>
   185a8:	str	wzr, [x0]
   185ac:	ldrb	w1, [x20]
   185b0:	add	w1, w1, #0x1
   185b4:	str	w1, [x0, #4]
   185b8:	str	x0, [x19]
   185bc:	mov	w0, #0x0                   	// #0
   185c0:	ldp	x19, x20, [sp, #16]
   185c4:	ldp	x29, x30, [sp], #32
   185c8:	ret
   185cc:	mov	w0, #0x5                   	// #5
   185d0:	b	185c0 <lzma_mode_is_supported@@XZ_5.0+0x7030>
   185d4:	stp	x29, x30, [sp, #-16]!
   185d8:	mov	x29, sp
   185dc:	add	x2, x3, #0x10
   185e0:	bl	3820 <lzma_version_string@@XZ_5.0+0x158>
   185e4:	ldp	x29, x30, [sp], #16
   185e8:	ret
   185ec:	stp	x29, x30, [sp, #-32]!
   185f0:	mov	x29, sp
   185f4:	stp	x19, x20, [sp, #16]
   185f8:	mov	x19, x0
   185fc:	mov	x20, x1
   18600:	bl	3870 <lzma_version_string@@XZ_5.0+0x1a8>
   18604:	mov	x1, x20
   18608:	ldr	x0, [x19, #88]
   1860c:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
   18610:	mov	x1, x20
   18614:	mov	x0, x19
   18618:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
   1861c:	ldp	x19, x20, [sp, #16]
   18620:	ldp	x29, x30, [sp], #32
   18624:	ret
   18628:	sub	sp, sp, #0x40
   1862c:	stp	x29, x30, [sp, #16]
   18630:	add	x29, sp, #0x10
   18634:	stp	x19, x20, [sp, #32]
   18638:	str	x21, [sp, #48]
   1863c:	mov	x19, x0
   18640:	mov	x0, x2
   18644:	mov	x20, x3
   18648:	mov	x21, x4
   1864c:	mov	x3, x5
   18650:	ldr	x8, [x19, #24]
   18654:	cbz	x8, 1868c <lzma_mode_is_supported@@XZ_5.0+0x70fc>
   18658:	ldr	w2, [sp, #64]
   1865c:	str	w2, [sp]
   18660:	mov	x3, x20
   18664:	mov	x2, x0
   18668:	ldr	x0, [x19]
   1866c:	blr	x8
   18670:	cmp	w0, #0x1
   18674:	b.eq	186d8 <lzma_mode_is_supported@@XZ_5.0+0x7148>  // b.none
   18678:	ldp	x19, x20, [sp, #32]
   1867c:	ldr	x21, [sp, #48]
   18680:	ldp	x29, x30, [sp, #16]
   18684:	add	sp, sp, #0x40
   18688:	ret
   1868c:	mov	x5, x7
   18690:	mov	x4, x6
   18694:	mov	x2, x21
   18698:	mov	x1, x20
   1869c:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
   186a0:	ldr	w0, [sp, #64]
   186a4:	cmp	w0, #0x3
   186a8:	cset	w2, eq  // eq = none
   186ac:	ldrb	w1, [x19, #73]
   186b0:	mov	w0, #0x0                   	// #0
   186b4:	tst	w2, w1
   186b8:	b.eq	18678 <lzma_mode_is_supported@@XZ_5.0+0x70e8>  // b.none
   186bc:	ldr	x1, [x20]
   186c0:	cmp	x1, x21
   186c4:	b.ne	18678 <lzma_mode_is_supported@@XZ_5.0+0x70e8>  // b.any
   186c8:	mov	w0, #0x1                   	// #1
   186cc:	strb	w0, [x19, #72]
   186d0:	mov	w0, #0x0                   	// #0
   186d4:	b	18678 <lzma_mode_is_supported@@XZ_5.0+0x70e8>
   186d8:	strb	w0, [x19, #72]
   186dc:	mov	w0, #0x0                   	// #0
   186e0:	b	18678 <lzma_mode_is_supported@@XZ_5.0+0x70e8>
   186e4:	sub	sp, sp, #0x90
   186e8:	stp	x29, x30, [sp, #16]
   186ec:	add	x29, sp, #0x10
   186f0:	stp	x19, x20, [sp, #32]
   186f4:	stp	x21, x22, [sp, #48]
   186f8:	mov	x19, x0
   186fc:	ldr	w0, [sp, #144]
   18700:	cmp	w0, #0x1
   18704:	b.eq	189b0 <lzma_mode_is_supported@@XZ_5.0+0x7420>  // b.none
   18708:	stp	x23, x24, [sp, #64]
   1870c:	stp	x25, x26, [sp, #80]
   18710:	stp	x27, x28, [sp, #96]
   18714:	mov	x24, x1
   18718:	mov	x25, x2
   1871c:	mov	x26, x3
   18720:	mov	x27, x4
   18724:	mov	x23, x5
   18728:	mov	x20, x6
   1872c:	mov	x22, x7
   18730:	ldr	x2, [x19, #120]
   18734:	ldr	x0, [x19, #112]
   18738:	cmp	x0, x2
   1873c:	b.cc	187ac <lzma_mode_is_supported@@XZ_5.0+0x721c>  // b.lo, b.ul, b.last
   18740:	str	xzr, [x19, #120]
   18744:	ldr	x28, [x20]
   18748:	ldr	x1, [x19, #112]
   1874c:	ldr	x21, [x19, #128]
   18750:	sub	x0, x22, x28
   18754:	subs	x21, x21, x1
   18758:	ccmp	x0, x21, #0x2, ne  // ne = any
   1875c:	b.hi	187f4 <lzma_mode_is_supported@@XZ_5.0+0x7264>  // b.pmore
   18760:	cbnz	x1, 18924 <lzma_mode_is_supported@@XZ_5.0+0x7394>
   18764:	add	x28, x19, #0x88
   18768:	ldr	w0, [sp, #144]
   1876c:	str	w0, [sp]
   18770:	ldr	x7, [x19, #104]
   18774:	add	x6, x19, #0x80
   18778:	mov	x5, x28
   1877c:	mov	x4, x27
   18780:	mov	x3, x26
   18784:	mov	x2, x25
   18788:	mov	x1, x24
   1878c:	mov	x0, x19
   18790:	bl	18628 <lzma_mode_is_supported@@XZ_5.0+0x7098>
   18794:	mov	w21, w0
   18798:	cbz	w0, 18940 <lzma_mode_is_supported@@XZ_5.0+0x73b0>
   1879c:	ldp	x23, x24, [sp, #64]
   187a0:	ldp	x25, x26, [sp, #80]
   187a4:	ldp	x27, x28, [sp, #96]
   187a8:	b	188d0 <lzma_mode_is_supported@@XZ_5.0+0x7340>
   187ac:	mov	x5, x7
   187b0:	mov	x4, x6
   187b4:	mov	x3, x23
   187b8:	add	x1, x19, #0x70
   187bc:	add	x0, x19, #0x88
   187c0:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
   187c4:	ldr	x1, [x19, #112]
   187c8:	ldr	x0, [x19, #120]
   187cc:	mov	w21, #0x0                   	// #0
   187d0:	cmp	x1, x0
   187d4:	b.cc	189b8 <lzma_mode_is_supported@@XZ_5.0+0x7428>  // b.lo, b.ul, b.last
   187d8:	ldrb	w0, [x19, #72]
   187dc:	mov	w21, #0x1                   	// #1
   187e0:	cbz	w0, 18740 <lzma_mode_is_supported@@XZ_5.0+0x71b0>
   187e4:	ldp	x23, x24, [sp, #64]
   187e8:	ldp	x25, x26, [sp, #80]
   187ec:	ldp	x27, x28, [sp, #96]
   187f0:	b	188d0 <lzma_mode_is_supported@@XZ_5.0+0x7340>
   187f4:	add	x3, x23, x28
   187f8:	add	x0, x19, #0x88
   187fc:	str	x0, [sp, #120]
   18800:	mov	x2, x21
   18804:	add	x1, x0, x1
   18808:	str	x3, [sp, #112]
   1880c:	mov	x0, x3
   18810:	bl	3090 <memcpy@plt>
   18814:	add	x21, x28, x21
   18818:	str	x21, [x20]
   1881c:	ldr	w1, [sp, #144]
   18820:	str	w1, [sp]
   18824:	mov	x7, x22
   18828:	mov	x6, x20
   1882c:	mov	x5, x23
   18830:	mov	x4, x27
   18834:	mov	x3, x26
   18838:	mov	x2, x25
   1883c:	mov	x1, x24
   18840:	mov	x0, x19
   18844:	bl	18628 <lzma_mode_is_supported@@XZ_5.0+0x7098>
   18848:	mov	w21, w0
   1884c:	cbz	w0, 18860 <lzma_mode_is_supported@@XZ_5.0+0x72d0>
   18850:	ldp	x23, x24, [sp, #64]
   18854:	ldp	x25, x26, [sp, #80]
   18858:	ldp	x27, x28, [sp, #96]
   1885c:	b	188d0 <lzma_mode_is_supported@@XZ_5.0+0x7340>
   18860:	ldr	x1, [x20]
   18864:	str	x1, [sp, #136]
   18868:	sub	x1, x1, x28
   1886c:	ldr	x5, [x19, #80]
   18870:	str	x1, [sp, #128]
   18874:	mov	x4, x1
   18878:	ldr	x3, [sp, #112]
   1887c:	ldrb	w2, [x19, #73]
   18880:	ldr	w1, [x19, #96]
   18884:	ldr	x0, [x19, #88]
   18888:	blr	x5
   1888c:	ldr	w1, [x19, #96]
   18890:	add	w1, w1, w0
   18894:	str	w1, [x19, #96]
   18898:	ldr	x1, [sp, #128]
   1889c:	sub	x2, x1, x0
   188a0:	str	xzr, [x19, #112]
   188a4:	str	x2, [x19, #128]
   188a8:	ldrb	w1, [x19, #72]
   188ac:	cbz	w1, 188e8 <lzma_mode_is_supported@@XZ_5.0+0x7358>
   188b0:	str	xzr, [x19, #128]
   188b4:	ldr	x1, [x19, #112]
   188b8:	ldr	x0, [x19, #128]
   188bc:	cmp	x1, x0
   188c0:	cset	w21, eq  // eq = none
   188c4:	ldp	x23, x24, [sp, #64]
   188c8:	ldp	x25, x26, [sp, #80]
   188cc:	ldp	x27, x28, [sp, #96]
   188d0:	mov	w0, w21
   188d4:	ldp	x19, x20, [sp, #32]
   188d8:	ldp	x21, x22, [sp, #48]
   188dc:	ldp	x29, x30, [sp, #16]
   188e0:	add	sp, sp, #0x90
   188e4:	ret
   188e8:	cbnz	x2, 188fc <lzma_mode_is_supported@@XZ_5.0+0x736c>
   188ec:	ldp	x23, x24, [sp, #64]
   188f0:	ldp	x25, x26, [sp, #80]
   188f4:	ldp	x27, x28, [sp, #96]
   188f8:	b	188d0 <lzma_mode_is_supported@@XZ_5.0+0x7340>
   188fc:	ldr	x1, [x20]
   18900:	add	x1, x28, x1
   18904:	ldr	x3, [sp, #136]
   18908:	sub	x0, x0, x3
   1890c:	add	x1, x1, x0
   18910:	str	x1, [x20]
   18914:	add	x1, x23, x1
   18918:	ldr	x0, [sp, #120]
   1891c:	bl	3090 <memcpy@plt>
   18920:	b	18764 <lzma_mode_is_supported@@XZ_5.0+0x71d4>
   18924:	add	x0, x19, #0x88
   18928:	mov	x2, x21
   1892c:	add	x1, x0, x1
   18930:	bl	30b0 <memmove@plt>
   18934:	str	x21, [x19, #128]
   18938:	str	xzr, [x19, #112]
   1893c:	b	18764 <lzma_mode_is_supported@@XZ_5.0+0x71d4>
   18940:	ldr	x5, [x19, #80]
   18944:	ldr	x4, [x19, #128]
   18948:	mov	x3, x28
   1894c:	ldrb	w2, [x19, #73]
   18950:	ldr	w1, [x19, #96]
   18954:	ldr	x0, [x19, #88]
   18958:	blr	x5
   1895c:	ldr	w1, [x19, #96]
   18960:	add	w1, w1, w0
   18964:	str	w1, [x19, #96]
   18968:	str	x0, [x19, #120]
   1896c:	ldrb	w0, [x19, #72]
   18970:	cbz	w0, 1897c <lzma_mode_is_supported@@XZ_5.0+0x73ec>
   18974:	ldr	x0, [x19, #128]
   18978:	str	x0, [x19, #120]
   1897c:	mov	x5, x22
   18980:	mov	x4, x20
   18984:	mov	x3, x23
   18988:	ldr	x2, [x19, #120]
   1898c:	add	x1, x19, #0x70
   18990:	mov	x0, x28
   18994:	bl	37b4 <lzma_version_string@@XZ_5.0+0xec>
   18998:	ldrb	w0, [x19, #72]
   1899c:	cbnz	w0, 188b4 <lzma_mode_is_supported@@XZ_5.0+0x7324>
   189a0:	ldp	x23, x24, [sp, #64]
   189a4:	ldp	x25, x26, [sp, #80]
   189a8:	ldp	x27, x28, [sp, #96]
   189ac:	b	188d0 <lzma_mode_is_supported@@XZ_5.0+0x7340>
   189b0:	mov	w21, #0x8                   	// #8
   189b4:	b	188d0 <lzma_mode_is_supported@@XZ_5.0+0x7340>
   189b8:	ldp	x23, x24, [sp, #64]
   189bc:	ldp	x25, x26, [sp, #80]
   189c0:	ldp	x27, x28, [sp, #96]
   189c4:	b	188d0 <lzma_mode_is_supported@@XZ_5.0+0x7340>
   189c8:	stp	x29, x30, [sp, #-96]!
   189cc:	mov	x29, sp
   189d0:	stp	x19, x20, [sp, #16]
   189d4:	stp	x21, x22, [sp, #32]
   189d8:	stp	x23, x24, [sp, #48]
   189dc:	stp	x25, x26, [sp, #64]
   189e0:	mov	x23, x1
   189e4:	mov	x21, x2
   189e8:	mov	w20, w6
   189ec:	and	w26, w7, #0xff
   189f0:	ldr	x19, [x0]
   189f4:	cbz	x19, 18a54 <lzma_mode_is_supported@@XZ_5.0+0x74c4>
   189f8:	ldr	x0, [x21, #16]
   189fc:	cbz	x0, 18b04 <lzma_mode_is_supported@@XZ_5.0+0x7574>
   18a00:	ldr	w1, [x0]
   18a04:	str	w1, [x19, #96]
   18a08:	sub	w20, w20, #0x1
   18a0c:	mov	w0, #0x8                   	// #8
   18a10:	tst	w20, w1
   18a14:	b.ne	18a3c <lzma_mode_is_supported@@XZ_5.0+0x74ac>  // b.any
   18a18:	strb	w26, [x19, #73]
   18a1c:	strb	wzr, [x19, #72]
   18a20:	str	xzr, [x19, #112]
   18a24:	str	xzr, [x19, #120]
   18a28:	str	xzr, [x19, #128]
   18a2c:	add	x2, x21, #0x18
   18a30:	mov	x1, x23
   18a34:	mov	x0, x19
   18a38:	bl	38d8 <lzma_version_string@@XZ_5.0+0x210>
   18a3c:	ldp	x19, x20, [sp, #16]
   18a40:	ldp	x21, x22, [sp, #32]
   18a44:	ldp	x23, x24, [sp, #48]
   18a48:	ldp	x25, x26, [sp, #64]
   18a4c:	ldp	x29, x30, [sp], #96
   18a50:	ret
   18a54:	str	x27, [sp, #80]
   18a58:	mov	x22, x0
   18a5c:	mov	x25, x3
   18a60:	mov	x24, x4
   18a64:	add	x5, x5, #0x44
   18a68:	lsl	x27, x5, #1
   18a6c:	mov	x0, x27
   18a70:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
   18a74:	mov	x19, x0
   18a78:	cbz	x0, 18b0c <lzma_mode_is_supported@@XZ_5.0+0x757c>
   18a7c:	str	x0, [x22]
   18a80:	adrp	x0, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>
   18a84:	add	x0, x0, #0x6e4
   18a88:	str	x0, [x22, #24]
   18a8c:	adrp	x0, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>
   18a90:	add	x0, x0, #0x5ec
   18a94:	str	x0, [x22, #32]
   18a98:	adrp	x0, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>
   18a9c:	add	x0, x0, #0x5d4
   18aa0:	str	x0, [x22, #64]
   18aa4:	str	xzr, [x19]
   18aa8:	mov	x0, #0xffffffffffffffff    	// #-1
   18aac:	str	x0, [x19, #8]
   18ab0:	str	xzr, [x19, #16]
   18ab4:	str	xzr, [x19, #24]
   18ab8:	str	xzr, [x19, #32]
   18abc:	str	xzr, [x19, #40]
   18ac0:	str	xzr, [x19, #48]
   18ac4:	str	xzr, [x19, #56]
   18ac8:	str	xzr, [x19, #64]
   18acc:	str	x25, [x19, #80]
   18ad0:	sub	x27, x27, #0x88
   18ad4:	str	x27, [x19, #104]
   18ad8:	cbnz	x24, 18ae8 <lzma_mode_is_supported@@XZ_5.0+0x7558>
   18adc:	str	xzr, [x19, #88]
   18ae0:	ldr	x27, [sp, #80]
   18ae4:	b	189f8 <lzma_mode_is_supported@@XZ_5.0+0x7468>
   18ae8:	mov	x1, x23
   18aec:	mov	x0, x24
   18af0:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
   18af4:	str	x0, [x19, #88]
   18af8:	cbz	x0, 18b18 <lzma_mode_is_supported@@XZ_5.0+0x7588>
   18afc:	ldr	x27, [sp, #80]
   18b00:	b	189f8 <lzma_mode_is_supported@@XZ_5.0+0x7468>
   18b04:	str	wzr, [x19, #96]
   18b08:	b	18a18 <lzma_mode_is_supported@@XZ_5.0+0x7488>
   18b0c:	mov	w0, #0x5                   	// #5
   18b10:	ldr	x27, [sp, #80]
   18b14:	b	18a3c <lzma_mode_is_supported@@XZ_5.0+0x74ac>
   18b18:	mov	w0, #0x5                   	// #5
   18b1c:	ldr	x27, [sp, #80]
   18b20:	b	18a3c <lzma_mode_is_supported@@XZ_5.0+0x74ac>
   18b24:	mov	w2, #0x0                   	// #0
   18b28:	cbz	x1, 18b3c <lzma_mode_is_supported@@XZ_5.0+0x75ac>
   18b2c:	ldr	w2, [x1]
   18b30:	cmp	w2, #0x0
   18b34:	mov	w1, #0x4                   	// #4
   18b38:	csel	w2, w2, w1, eq  // eq = none
   18b3c:	str	w2, [x0]
   18b40:	mov	w0, #0x0                   	// #0
   18b44:	ret
   18b48:	cbz	x0, 18b70 <lzma_mode_is_supported@@XZ_5.0+0x75e0>
   18b4c:	ldr	w0, [x0]
   18b50:	cbz	w0, 18b70 <lzma_mode_is_supported@@XZ_5.0+0x75e0>
   18b54:	strb	w0, [x1]
   18b58:	lsr	w2, w0, #8
   18b5c:	strb	w2, [x1, #1]
   18b60:	lsr	w2, w0, #16
   18b64:	strb	w2, [x1, #2]
   18b68:	lsr	w0, w0, #24
   18b6c:	strb	w0, [x1, #3]
   18b70:	mov	w0, #0x0                   	// #0
   18b74:	ret
   18b78:	stp	x29, x30, [sp, #-48]!
   18b7c:	mov	x29, sp
   18b80:	stp	x19, x20, [sp, #16]
   18b84:	mov	w19, #0x0                   	// #0
   18b88:	cbz	x3, 18bac <lzma_mode_is_supported@@XZ_5.0+0x761c>
   18b8c:	stp	x21, x22, [sp, #32]
   18b90:	mov	x22, x0
   18b94:	mov	x21, x1
   18b98:	mov	x20, x2
   18b9c:	mov	w19, #0x8                   	// #8
   18ba0:	cmp	x3, #0x4
   18ba4:	b.eq	18bbc <lzma_mode_is_supported@@XZ_5.0+0x762c>  // b.none
   18ba8:	ldp	x21, x22, [sp, #32]
   18bac:	mov	w0, w19
   18bb0:	ldp	x19, x20, [sp, #16]
   18bb4:	ldp	x29, x30, [sp], #48
   18bb8:	ret
   18bbc:	mov	x0, #0x4                   	// #4
   18bc0:	bl	36d4 <lzma_version_string@@XZ_5.0+0xc>
   18bc4:	cbz	x0, 18c10 <lzma_mode_is_supported@@XZ_5.0+0x7680>
   18bc8:	ldrb	w19, [x20, #3]
   18bcc:	ldrb	w1, [x20]
   18bd0:	orr	w1, w1, w19, lsl #24
   18bd4:	ldrb	w19, [x20, #1]
   18bd8:	ldrb	w2, [x20, #2]
   18bdc:	lsl	w2, w2, #16
   18be0:	orr	w19, w2, w19, lsl #8
   18be4:	orr	w19, w19, w1
   18be8:	str	w19, [x0]
   18bec:	cbz	w19, 18c00 <lzma_mode_is_supported@@XZ_5.0+0x7670>
   18bf0:	str	x0, [x22]
   18bf4:	mov	w19, #0x0                   	// #0
   18bf8:	ldp	x21, x22, [sp, #32]
   18bfc:	b	18bac <lzma_mode_is_supported@@XZ_5.0+0x761c>
   18c00:	mov	x1, x21
   18c04:	bl	3780 <lzma_version_string@@XZ_5.0+0xb8>
   18c08:	ldp	x21, x22, [sp, #32]
   18c0c:	b	18bac <lzma_mode_is_supported@@XZ_5.0+0x761c>
   18c10:	mov	w19, #0x5                   	// #5
   18c14:	ldp	x21, x22, [sp, #32]
   18c18:	b	18bac <lzma_mode_is_supported@@XZ_5.0+0x761c>
   18c1c:	cmp	x4, #0x4
   18c20:	b.ls	18e04 <lzma_mode_is_supported@@XZ_5.0+0x7874>  // b.plast
   18c24:	stp	x29, x30, [sp, #-80]!
   18c28:	mov	x29, sp
   18c2c:	stp	x19, x20, [sp, #16]
   18c30:	mov	x10, x0
   18c34:	and	w2, w2, #0xff
   18c38:	ldr	w6, [x0, #4]
   18c3c:	sub	w5, w1, w6
   18c40:	sub	w0, w1, #0x5
   18c44:	cmp	w5, #0x5
   18c48:	csel	w6, w0, w6, hi  // hi = pmore
   18c4c:	ldr	w5, [x10]
   18c50:	sub	x8, x4, #0x5
   18c54:	mov	x0, #0x0                   	// #0
   18c58:	mov	w20, #0x0                   	// #0
   18c5c:	mov	w19, #0xfffffffb            	// #-5
   18c60:	adrp	x11, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xda70>
   18c64:	add	x11, x11, #0x890
   18c68:	add	x15, x11, #0x8
   18c6c:	mov	w14, #0x3                   	// #3
   18c70:	mov	w17, #0x4                   	// #4
   18c74:	mov	w16, #0x1                   	// #1
   18c78:	mov	w30, #0x11                  	// #17
   18c7c:	mov	w7, #0xee                  	// #238
   18c80:	b	18c90 <lzma_mode_is_supported@@XZ_5.0+0x7700>
   18c84:	add	x0, x0, #0x1
   18c88:	cmp	x8, x0
   18c8c:	b.cc	18df0 <lzma_mode_is_supported@@XZ_5.0+0x7860>  // b.lo, b.ul, b.last
   18c90:	ldrb	w4, [x3, x0]
   18c94:	add	w4, w4, #0x18
   18c98:	and	w4, w4, #0xff
   18c9c:	cmp	w4, #0x1
   18ca0:	b.hi	18c84 <lzma_mode_is_supported@@XZ_5.0+0x76f4>  // b.pmore
   18ca4:	add	w9, w1, w0
   18ca8:	sub	w6, w9, w6
   18cac:	cmp	w6, #0x5
   18cb0:	b.hi	18e0c <lzma_mode_is_supported@@XZ_5.0+0x787c>  // b.pmore
   18cb4:	cbz	w6, 18ccc <lzma_mode_is_supported@@XZ_5.0+0x773c>
   18cb8:	mov	w4, #0x0                   	// #0
   18cbc:	and	w5, w7, w5, lsl #1
   18cc0:	add	w4, w4, #0x1
   18cc4:	cmp	w6, w4
   18cc8:	b.ne	18cbc <lzma_mode_is_supported@@XZ_5.0+0x772c>  // b.any
   18ccc:	add	x4, x0, #0x4
   18cd0:	add	x13, x3, x4
   18cd4:	ldrb	w6, [x3, x4]
   18cd8:	sub	w4, w6, #0x1
   18cdc:	and	w4, w4, #0xff
   18ce0:	cmp	w4, #0xfd
   18ce4:	b.ls	18e2c <lzma_mode_is_supported@@XZ_5.0+0x789c>  // b.plast
   18ce8:	lsr	w12, w5, #1
   18cec:	ubfx	x4, x5, #1, #3
   18cf0:	cmp	w5, #0x1f
   18cf4:	cset	w18, ls  // ls = plast
   18cf8:	ldrb	w4, [x11, w4, uxtw]
   18cfc:	tst	w18, w4
   18d00:	b.ne	18d14 <lzma_mode_is_supported@@XZ_5.0+0x7784>  // b.any
   18d04:	add	x0, x0, #0x1
   18d08:	orr	w5, w5, w30
   18d0c:	mov	w6, w9
   18d10:	b	18c88 <lzma_mode_is_supported@@XZ_5.0+0x76f8>
   18d14:	stp	x21, x22, [sp, #32]
   18d18:	stp	x23, x24, [sp, #48]
   18d1c:	str	x25, [sp, #64]
   18d20:	b	18d38 <lzma_mode_is_supported@@XZ_5.0+0x77a8>
   18d24:	stp	x21, x22, [sp, #32]
   18d28:	stp	x23, x24, [sp, #48]
   18d2c:	str	x25, [sp, #64]
   18d30:	mov	w5, #0x0                   	// #0
   18d34:	mov	w12, w20
   18d38:	add	x24, x0, #0x3
   18d3c:	add	x23, x0, #0x2
   18d40:	add	x22, x0, #0x1
   18d44:	ldrb	w4, [x3, x24]
   18d48:	ldrb	w18, [x3, x23]
   18d4c:	lsl	w18, w18, #8
   18d50:	orr	w4, w18, w4, lsl #16
   18d54:	ldrb	w18, [x3, x22]
   18d58:	orr	w6, w18, w6, lsl #24
   18d5c:	orr	w4, w4, w6
   18d60:	add	w21, w9, #0x5
   18d64:	sub	w18, w19, w9
   18d68:	mov	w12, w12
   18d6c:	add	w25, w21, w4
   18d70:	add	w4, w18, w4
   18d74:	cmp	w2, #0x0
   18d78:	csel	w25, w4, w25, eq  // eq = none
   18d7c:	cbz	w5, 18db8 <lzma_mode_is_supported@@XZ_5.0+0x7828>
   18d80:	ldr	w6, [x15, x12, lsl #2]
   18d84:	sub	w4, w14, w6
   18d88:	lsl	w4, w4, #3
   18d8c:	lsr	w4, w25, w4
   18d90:	sub	w4, w4, #0x1
   18d94:	and	w4, w4, #0xff
   18d98:	cmp	w4, #0xfd
   18d9c:	b.ls	18db8 <lzma_mode_is_supported@@XZ_5.0+0x7828>  // b.plast
   18da0:	sub	w4, w17, w6
   18da4:	lsl	w4, w4, #3
   18da8:	lsl	w4, w16, w4
   18dac:	sub	w4, w4, #0x1
   18db0:	eor	w4, w4, w25
   18db4:	b	18d6c <lzma_mode_is_supported@@XZ_5.0+0x77dc>
   18db8:	sbfx	x4, x25, #24, #1
   18dbc:	strb	w4, [x13]
   18dc0:	lsr	w4, w25, #16
   18dc4:	strb	w4, [x3, x24]
   18dc8:	lsr	w4, w25, #8
   18dcc:	strb	w4, [x3, x23]
   18dd0:	strb	w25, [x3, x22]
   18dd4:	add	x0, x0, #0x5
   18dd8:	mov	w6, w9
   18ddc:	mov	w5, #0x0                   	// #0
   18de0:	ldp	x21, x22, [sp, #32]
   18de4:	ldp	x23, x24, [sp, #48]
   18de8:	ldr	x25, [sp, #64]
   18dec:	b	18c88 <lzma_mode_is_supported@@XZ_5.0+0x76f8>
   18df0:	str	w5, [x10]
   18df4:	str	w6, [x10, #4]
   18df8:	ldp	x19, x20, [sp, #16]
   18dfc:	ldp	x29, x30, [sp], #80
   18e00:	ret
   18e04:	mov	x0, #0x0                   	// #0
   18e08:	ret
   18e0c:	add	x4, x0, #0x4
   18e10:	add	x13, x3, x4
   18e14:	ldrb	w6, [x3, x4]
   18e18:	sub	w4, w6, #0x1
   18e1c:	and	w4, w4, #0xff
   18e20:	cmp	w4, #0xfd
   18e24:	b.hi	18d24 <lzma_mode_is_supported@@XZ_5.0+0x7794>  // b.pmore
   18e28:	mov	w5, #0x0                   	// #0
   18e2c:	add	x0, x0, #0x1
   18e30:	orr	w5, w5, #0x1
   18e34:	mov	w6, w9
   18e38:	b	18c88 <lzma_mode_is_supported@@XZ_5.0+0x76f8>
   18e3c:	stp	x29, x30, [sp, #-32]!
   18e40:	mov	x29, sp
   18e44:	str	x19, [sp, #16]
   18e48:	mov	x19, x0
   18e4c:	mov	w7, w3
   18e50:	mov	w6, #0x1                   	// #1
   18e54:	mov	x5, #0x5                   	// #5
   18e58:	mov	x4, #0x8                   	// #8
   18e5c:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>
   18e60:	add	x3, x3, #0xc1c
   18e64:	bl	189c8 <lzma_mode_is_supported@@XZ_5.0+0x7438>
   18e68:	cbnz	w0, 18e80 <lzma_mode_is_supported@@XZ_5.0+0x78f0>
   18e6c:	ldr	x1, [x19]
   18e70:	ldr	x1, [x1, #88]
   18e74:	str	wzr, [x1]
   18e78:	mov	w2, #0xfffffffb            	// #-5
   18e7c:	str	w2, [x1, #4]
   18e80:	ldr	x19, [sp, #16]
   18e84:	ldp	x29, x30, [sp], #32
   18e88:	ret
   18e8c:	stp	x29, x30, [sp, #-16]!
   18e90:	mov	x29, sp
   18e94:	mov	w3, #0x1                   	// #1
   18e98:	bl	18e3c <lzma_mode_is_supported@@XZ_5.0+0x78ac>
   18e9c:	ldp	x29, x30, [sp], #16
   18ea0:	ret
   18ea4:	stp	x29, x30, [sp, #-16]!
   18ea8:	mov	x29, sp
   18eac:	mov	w3, #0x0                   	// #0
   18eb0:	bl	18e3c <lzma_mode_is_supported@@XZ_5.0+0x78ac>
   18eb4:	ldp	x29, x30, [sp], #16
   18eb8:	ret
   18ebc:	and	w2, w2, #0xff
   18ec0:	cmp	x4, #0x3
   18ec4:	b.ls	18f6c <lzma_mode_is_supported@@XZ_5.0+0x79dc>  // b.plast
   18ec8:	mov	x0, #0x4                   	// #4
   18ecc:	mov	w10, #0x48                  	// #72
   18ed0:	sub	w8, w1, #0x4
   18ed4:	b	18eec <lzma_mode_is_supported@@XZ_5.0+0x795c>
   18ed8:	add	x1, x0, #0x4
   18edc:	add	x3, x3, #0x4
   18ee0:	cmp	x1, x4
   18ee4:	b.hi	18f70 <lzma_mode_is_supported@@XZ_5.0+0x79e0>  // b.pmore
   18ee8:	mov	x0, x1
   18eec:	ldrb	w1, [x3]
   18ef0:	lsr	w5, w1, #2
   18ef4:	cmp	w5, #0x12
   18ef8:	b.ne	18ed8 <lzma_mode_is_supported@@XZ_5.0+0x7948>  // b.any
   18efc:	ldrb	w7, [x3, #3]
   18f00:	and	w5, w7, #0x3
   18f04:	cmp	w5, #0x1
   18f08:	b.ne	18ed8 <lzma_mode_is_supported@@XZ_5.0+0x7948>  // b.any
   18f0c:	ldrb	w5, [x3, #1]
   18f10:	ldrb	w9, [x3, #2]
   18f14:	lsl	w9, w9, #8
   18f18:	orr	w5, w9, w5, lsl #16
   18f1c:	ubfiz	w1, w1, #24, #2
   18f20:	and	w7, w7, #0xfffffffc
   18f24:	orr	w1, w1, w7
   18f28:	orr	w1, w5, w1
   18f2c:	add	w5, w8, w0
   18f30:	add	w5, w5, w1
   18f34:	add	w7, w8, w0
   18f38:	sub	w1, w1, w7
   18f3c:	cmp	w2, #0x0
   18f40:	csel	w1, w1, w5, eq  // eq = none
   18f44:	ubfx	x5, x1, #24, #2
   18f48:	orr	w5, w5, w10
   18f4c:	strb	w5, [x3]
   18f50:	lsr	w5, w1, #16
   18f54:	strb	w5, [x3, #1]
   18f58:	lsr	w5, w1, #8
   18f5c:	strb	w5, [x3, #2]
   18f60:	orr	w1, w1, #0x1
   18f64:	strb	w1, [x3, #3]
   18f68:	b	18ed8 <lzma_mode_is_supported@@XZ_5.0+0x7948>
   18f6c:	mov	x0, #0x0                   	// #0
   18f70:	ret
   18f74:	stp	x29, x30, [sp, #-16]!
   18f78:	mov	x29, sp
   18f7c:	mov	w7, #0x1                   	// #1
   18f80:	mov	w6, #0x4                   	// #4
   18f84:	mov	x5, #0x4                   	// #4
   18f88:	mov	x4, #0x0                   	// #0
   18f8c:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>
   18f90:	add	x3, x3, #0xebc
   18f94:	bl	189c8 <lzma_mode_is_supported@@XZ_5.0+0x7438>
   18f98:	ldp	x29, x30, [sp], #16
   18f9c:	ret
   18fa0:	stp	x29, x30, [sp, #-16]!
   18fa4:	mov	x29, sp
   18fa8:	mov	w7, #0x0                   	// #0
   18fac:	mov	w6, #0x4                   	// #4
   18fb0:	mov	x5, #0x4                   	// #4
   18fb4:	mov	x4, #0x0                   	// #0
   18fb8:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>
   18fbc:	add	x3, x3, #0xebc
   18fc0:	bl	189c8 <lzma_mode_is_supported@@XZ_5.0+0x7438>
   18fc4:	ldp	x29, x30, [sp], #16
   18fc8:	ret
   18fcc:	cmp	x4, #0xf
   18fd0:	b.ls	19114 <lzma_mode_is_supported@@XZ_5.0+0x7b84>  // b.plast
   18fd4:	stp	x29, x30, [sp, #-32]!
   18fd8:	mov	x29, sp
   18fdc:	stp	x19, x20, [sp, #16]
   18fe0:	and	w2, w2, #0xff
   18fe4:	mov	x0, #0x10                  	// #16
   18fe8:	adrp	x13, 1f000 <lzma_mode_is_supported@@XZ_5.0+0xda70>
   18fec:	add	x13, x13, #0x8b8
   18ff0:	sub	x14, x3, #0x10
   18ff4:	mov	x16, #0xffff000000001fff    	// #-281474976702465
   18ff8:	movk	x16, #0xffee, lsl #32
   18ffc:	mov	w15, #0x1                   	// #1
   19000:	sub	w12, w1, #0x10
   19004:	b	190f4 <lzma_mode_is_supported@@XZ_5.0+0x7b64>
   19008:	add	x10, x10, #0x1
   1900c:	add	w9, w9, #0x29
   19010:	cmp	w9, #0x80
   19014:	b.eq	190e4 <lzma_mode_is_supported@@XZ_5.0+0x7b54>  // b.none
   19018:	lsr	w1, w11, w10
   1901c:	tbz	w1, #0, 19008 <lzma_mode_is_supported@@XZ_5.0+0x7a78>
   19020:	lsr	w7, w9, #3
   19024:	and	w18, w9, #0x7
   19028:	mov	x1, #0x0                   	// #0
   1902c:	mov	x6, #0x0                   	// #0
   19030:	add	x7, x7, x17
   19034:	add	x7, x3, x7
   19038:	ldrb	w5, [x7, x1]
   1903c:	lsl	w8, w1, #3
   19040:	lsl	x5, x5, x8
   19044:	add	x6, x6, x5
   19048:	add	x1, x1, #0x1
   1904c:	cmp	x1, #0x6
   19050:	b.ne	19038 <lzma_mode_is_supported@@XZ_5.0+0x7aa8>  // b.any
   19054:	lsr	x1, x6, x18
   19058:	ubfx	x5, x1, #37, #4
   1905c:	cmp	x5, #0x5
   19060:	b.ne	19008 <lzma_mode_is_supported@@XZ_5.0+0x7a78>  // b.any
   19064:	ubfx	x5, x1, #9, #3
   19068:	tst	x1, #0xe00
   1906c:	b.ne	19008 <lzma_mode_is_supported@@XZ_5.0+0x7a78>  // b.any
   19070:	ubfx	x19, x1, #13, #20
   19074:	lsr	x8, x1, #36
   19078:	ubfiz	w8, w8, #20, #1
   1907c:	orr	w8, w8, w19
   19080:	lsl	w8, w8, #4
   19084:	add	w19, w30, w8
   19088:	sub	w8, w8, w30
   1908c:	cmp	w2, #0x0
   19090:	csel	w8, w8, w19, eq  // eq = none
   19094:	and	x1, x1, x16
   19098:	lsr	w8, w8, #4
   1909c:	lsl	w20, w15, w18
   190a0:	sub	w20, w20, #0x1
   190a4:	sxtw	x20, w20
   190a8:	and	x20, x20, x6
   190ac:	ubfiz	x19, x8, #13, #20
   190b0:	lsl	x6, x8, #16
   190b4:	and	x6, x6, #0x1000000000
   190b8:	orr	x6, x19, x6
   190bc:	orr	x1, x6, x1
   190c0:	lsl	x6, x1, x18
   190c4:	orr	x6, x6, x20
   190c8:	lsl	w1, w5, #3
   190cc:	lsr	x1, x6, x1
   190d0:	strb	w1, [x7, x5]
   190d4:	add	x5, x5, #0x1
   190d8:	cmp	x5, #0x6
   190dc:	b.ne	190c8 <lzma_mode_is_supported@@XZ_5.0+0x7b38>  // b.any
   190e0:	b	19008 <lzma_mode_is_supported@@XZ_5.0+0x7a78>
   190e4:	add	x1, x0, #0x10
   190e8:	cmp	x1, x4
   190ec:	b.hi	1911c <lzma_mode_is_supported@@XZ_5.0+0x7b8c>  // b.pmore
   190f0:	mov	x0, x1
   190f4:	sub	x17, x0, #0x10
   190f8:	ldrb	w1, [x14, x0]
   190fc:	and	x1, x1, #0x1f
   19100:	ldr	w11, [x13, x1, lsl #2]
   19104:	mov	x10, #0x0                   	// #0
   19108:	mov	w9, #0x5                   	// #5
   1910c:	add	w30, w12, w0
   19110:	b	19018 <lzma_mode_is_supported@@XZ_5.0+0x7a88>
   19114:	mov	x0, #0x0                   	// #0
   19118:	ret
   1911c:	ldp	x19, x20, [sp, #16]
   19120:	ldp	x29, x30, [sp], #32
   19124:	ret
   19128:	stp	x29, x30, [sp, #-16]!
   1912c:	mov	x29, sp
   19130:	mov	w7, #0x1                   	// #1
   19134:	mov	w6, #0x10                  	// #16
   19138:	mov	x5, #0x10                  	// #16
   1913c:	mov	x4, #0x0                   	// #0
   19140:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>
   19144:	add	x3, x3, #0xfcc
   19148:	bl	189c8 <lzma_mode_is_supported@@XZ_5.0+0x7438>
   1914c:	ldp	x29, x30, [sp], #16
   19150:	ret
   19154:	stp	x29, x30, [sp, #-16]!
   19158:	mov	x29, sp
   1915c:	mov	w7, #0x0                   	// #0
   19160:	mov	w6, #0x10                  	// #16
   19164:	mov	x5, #0x10                  	// #16
   19168:	mov	x4, #0x0                   	// #0
   1916c:	adrp	x3, 18000 <lzma_mode_is_supported@@XZ_5.0+0x6a70>
   19170:	add	x3, x3, #0xfcc
   19174:	bl	189c8 <lzma_mode_is_supported@@XZ_5.0+0x7438>
   19178:	ldp	x29, x30, [sp], #16
   1917c:	ret
   19180:	and	w2, w2, #0xff
   19184:	add	w8, w1, #0x8
   19188:	cmp	x4, #0x3
   1918c:	b.ls	19218 <lzma_mode_is_supported@@XZ_5.0+0x7c88>  // b.plast
   19190:	mov	x0, #0x4                   	// #4
   19194:	mov	w7, #0xfffffff8            	// #-8
   19198:	sub	w7, w7, w1
   1919c:	b	191d8 <lzma_mode_is_supported@@XZ_5.0+0x7c48>
   191a0:	sub	w6, w0, #0x4
   191a4:	sub	w1, w1, w6
   191a8:	add	w1, w1, w7
   191ac:	lsr	w6, w1, #18
   191b0:	strb	w6, [x5, #2]
   191b4:	lsr	w6, w1, #10
   191b8:	strb	w6, [x5, #1]
   191bc:	lsr	w1, w1, #2
   191c0:	strb	w1, [x5]
   191c4:	add	x1, x0, #0x4
   191c8:	add	x3, x3, #0x4
   191cc:	cmp	x1, x4
   191d0:	b.hi	1921c <lzma_mode_is_supported@@XZ_5.0+0x7c8c>  // b.pmore
   191d4:	mov	x0, x1
   191d8:	mov	x5, x3
   191dc:	ldrb	w1, [x3, #3]
   191e0:	cmp	w1, #0xeb
   191e4:	b.ne	191c4 <lzma_mode_is_supported@@XZ_5.0+0x7c34>  // b.any
   191e8:	ldrb	w1, [x3, #2]
   191ec:	ldrb	w6, [x3, #1]
   191f0:	lsl	w6, w6, #8
   191f4:	orr	w1, w6, w1, lsl #16
   191f8:	ldrb	w6, [x3]
   191fc:	orr	w1, w1, w6
   19200:	lsl	w1, w1, #2
   19204:	cbz	w2, 191a0 <lzma_mode_is_supported@@XZ_5.0+0x7c10>
   19208:	sub	w6, w0, #0x4
   1920c:	add	w6, w6, w8
   19210:	add	w1, w6, w1
   19214:	b	191ac <lzma_mode_is_supported@@XZ_5.0+0x7c1c>
   19218:	mov	x0, #0x0                   	// #0
   1921c:	ret
   19220:	stp	x29, x30, [sp, #-16]!
   19224:	mov	x29, sp
   19228:	mov	w7, #0x1                   	// #1
   1922c:	mov	w6, #0x4                   	// #4
   19230:	mov	x5, #0x4                   	// #4
   19234:	mov	x4, #0x0                   	// #0
   19238:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7a70>
   1923c:	add	x3, x3, #0x180
   19240:	bl	189c8 <lzma_mode_is_supported@@XZ_5.0+0x7438>
   19244:	ldp	x29, x30, [sp], #16
   19248:	ret
   1924c:	stp	x29, x30, [sp, #-16]!
   19250:	mov	x29, sp
   19254:	mov	w7, #0x0                   	// #0
   19258:	mov	w6, #0x4                   	// #4
   1925c:	mov	x5, #0x4                   	// #4
   19260:	mov	x4, #0x0                   	// #0
   19264:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7a70>
   19268:	add	x3, x3, #0x180
   1926c:	bl	189c8 <lzma_mode_is_supported@@XZ_5.0+0x7438>
   19270:	ldp	x29, x30, [sp], #16
   19274:	ret
   19278:	and	w2, w2, #0xff
   1927c:	add	w10, w1, #0x4
   19280:	cmp	x4, #0x3
   19284:	b.ls	1933c <lzma_mode_is_supported@@XZ_5.0+0x7dac>  // b.plast
   19288:	mov	x0, #0x0                   	// #0
   1928c:	mov	w11, #0xfffffffc            	// #-4
   19290:	sub	w11, w11, w1
   19294:	b	192a8 <lzma_mode_is_supported@@XZ_5.0+0x7d18>
   19298:	add	x0, x1, #0x2
   1929c:	add	x1, x1, #0x6
   192a0:	cmp	x1, x4
   192a4:	b.hi	19340 <lzma_mode_is_supported@@XZ_5.0+0x7db0>  // b.pmore
   192a8:	add	x7, x0, #0x1
   192ac:	ldrb	w5, [x3, x7]
   192b0:	and	w6, w5, #0xf8
   192b4:	mov	x1, x0
   192b8:	cmp	w6, #0xf0
   192bc:	b.ne	19298 <lzma_mode_is_supported@@XZ_5.0+0x7d08>  // b.any
   192c0:	add	x9, x0, #0x3
   192c4:	ldrb	w8, [x3, x9]
   192c8:	and	w6, w8, #0xf8
   192cc:	cmp	w6, #0xf8
   192d0:	b.ne	19298 <lzma_mode_is_supported@@XZ_5.0+0x7d08>  // b.any
   192d4:	add	x1, x0, #0x2
   192d8:	ubfiz	w6, w5, #19, #3
   192dc:	ubfiz	w8, w8, #8, #3
   192e0:	orr	w6, w6, w8
   192e4:	ldrb	w5, [x3, x0]
   192e8:	ldrb	w8, [x3, x1]
   192ec:	orr	w5, w8, w5, lsl #11
   192f0:	orr	w6, w6, w5
   192f4:	lsl	w6, w6, #1
   192f8:	add	w5, w10, w0
   192fc:	add	w8, w5, w6
   19300:	sub	w5, w6, w0
   19304:	add	w5, w11, w5
   19308:	cmp	w2, #0x0
   1930c:	csel	w5, w5, w8, eq  // eq = none
   19310:	ubfx	x6, x5, #20, #3
   19314:	orr	w6, w6, #0xfffffff0
   19318:	strb	w6, [x3, x7]
   1931c:	lsr	w6, w5, #12
   19320:	strb	w6, [x3, x0]
   19324:	lsr	w0, w5, #9
   19328:	orr	w0, w0, #0xfffffff8
   1932c:	strb	w0, [x3, x9]
   19330:	lsr	w5, w5, #1
   19334:	strb	w5, [x3, x1]
   19338:	b	19298 <lzma_mode_is_supported@@XZ_5.0+0x7d08>
   1933c:	mov	x0, #0x0                   	// #0
   19340:	ret
   19344:	stp	x29, x30, [sp, #-16]!
   19348:	mov	x29, sp
   1934c:	mov	w7, #0x1                   	// #1
   19350:	mov	w6, #0x2                   	// #2
   19354:	mov	x5, #0x4                   	// #4
   19358:	mov	x4, #0x0                   	// #0
   1935c:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7a70>
   19360:	add	x3, x3, #0x278
   19364:	bl	189c8 <lzma_mode_is_supported@@XZ_5.0+0x7438>
   19368:	ldp	x29, x30, [sp], #16
   1936c:	ret
   19370:	stp	x29, x30, [sp, #-16]!
   19374:	mov	x29, sp
   19378:	mov	w7, #0x0                   	// #0
   1937c:	mov	w6, #0x2                   	// #2
   19380:	mov	x5, #0x4                   	// #4
   19384:	mov	x4, #0x0                   	// #0
   19388:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7a70>
   1938c:	add	x3, x3, #0x278
   19390:	bl	189c8 <lzma_mode_is_supported@@XZ_5.0+0x7438>
   19394:	ldp	x29, x30, [sp], #16
   19398:	ret
   1939c:	and	w2, w2, #0xff
   193a0:	cmp	x4, #0x3
   193a4:	b.ls	19464 <lzma_mode_is_supported@@XZ_5.0+0x7ed4>  // b.plast
   193a8:	mov	x0, #0x4                   	// #4
   193ac:	sub	w7, w1, #0x4
   193b0:	b	19438 <lzma_mode_is_supported@@XZ_5.0+0x7ea8>
   193b4:	ldrb	w5, [x3, #1]
   193b8:	tst	w5, #0xc0
   193bc:	b.ne	19424 <lzma_mode_is_supported@@XZ_5.0+0x7e94>  // b.any
   193c0:	ldrb	w5, [x6, #1]
   193c4:	lsl	w1, w1, #24
   193c8:	orr	w5, w1, w5, lsl #16
   193cc:	ldrb	w1, [x6, #2]
   193d0:	ldrb	w8, [x6, #3]
   193d4:	orr	w1, w8, w1, lsl #8
   193d8:	orr	w5, w5, w1
   193dc:	lsl	w5, w5, #2
   193e0:	add	w1, w7, w0
   193e4:	add	w8, w1, w5
   193e8:	sub	w1, w5, w1
   193ec:	cmp	w2, #0x0
   193f0:	csel	w1, w1, w8, eq  // eq = none
   193f4:	sbfx	x5, x1, #24, #1
   193f8:	ubfiz	w5, w5, #22, #8
   193fc:	ubfx	x1, x1, #2, #22
   19400:	orr	w1, w5, w1
   19404:	orr	w1, w1, #0x40000000
   19408:	lsr	w5, w1, #24
   1940c:	strb	w5, [x6]
   19410:	lsr	w5, w1, #16
   19414:	strb	w5, [x6, #1]
   19418:	lsr	w5, w1, #8
   1941c:	strb	w5, [x6, #2]
   19420:	strb	w1, [x6, #3]
   19424:	add	x1, x0, #0x4
   19428:	add	x3, x3, #0x4
   1942c:	cmp	x1, x4
   19430:	b.hi	19468 <lzma_mode_is_supported@@XZ_5.0+0x7ed8>  // b.pmore
   19434:	mov	x0, x1
   19438:	mov	x6, x3
   1943c:	ldrb	w1, [x3]
   19440:	cmp	w1, #0x40
   19444:	b.eq	193b4 <lzma_mode_is_supported@@XZ_5.0+0x7e24>  // b.none
   19448:	cmp	w1, #0x7f
   1944c:	b.ne	19424 <lzma_mode_is_supported@@XZ_5.0+0x7e94>  // b.any
   19450:	ldrb	w5, [x3, #1]
   19454:	and	w5, w5, #0xc0
   19458:	cmp	w5, #0xc0
   1945c:	b.ne	19424 <lzma_mode_is_supported@@XZ_5.0+0x7e94>  // b.any
   19460:	b	193c0 <lzma_mode_is_supported@@XZ_5.0+0x7e30>
   19464:	mov	x0, #0x0                   	// #0
   19468:	ret
   1946c:	stp	x29, x30, [sp, #-16]!
   19470:	mov	x29, sp
   19474:	mov	w7, #0x1                   	// #1
   19478:	mov	w6, #0x4                   	// #4
   1947c:	mov	x5, #0x4                   	// #4
   19480:	mov	x4, #0x0                   	// #0
   19484:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7a70>
   19488:	add	x3, x3, #0x39c
   1948c:	bl	189c8 <lzma_mode_is_supported@@XZ_5.0+0x7438>
   19490:	ldp	x29, x30, [sp], #16
   19494:	ret
   19498:	stp	x29, x30, [sp, #-16]!
   1949c:	mov	x29, sp
   194a0:	mov	w7, #0x0                   	// #0
   194a4:	mov	w6, #0x4                   	// #4
   194a8:	mov	x5, #0x4                   	// #4
   194ac:	mov	x4, #0x0                   	// #0
   194b0:	adrp	x3, 19000 <lzma_mode_is_supported@@XZ_5.0+0x7a70>
   194b4:	add	x3, x3, #0x39c
   194b8:	bl	189c8 <lzma_mode_is_supported@@XZ_5.0+0x7438>
   194bc:	ldp	x29, x30, [sp], #16
   194c0:	ret

Disassembly of section .fini:

00000000000194c4 <.fini>:
   194c4:	stp	x29, x30, [sp, #-16]!
   194c8:	mov	x29, sp
   194cc:	ldp	x29, x30, [sp], #16
   194d0:	ret
