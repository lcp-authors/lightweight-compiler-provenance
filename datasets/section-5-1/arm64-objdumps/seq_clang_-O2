
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//seq_clang_-O2:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000000fb0 <_init>:
 fb0:	stp	x29, x30, [sp, #-16]!
 fb4:	mov	x29, sp
 fb8:	bl	11d0 <call_weak_fn>
 fbc:	ldp	x29, x30, [sp], #16
 fc0:	ret

Disassembly of section .plt:

0000000000000fd0 <.plt>:
     fd0:	stp	x16, x30, [sp, #-16]!
     fd4:	adrp	x16, 14000 <__FRAME_END__+0x1015c>
     fd8:	ldr	x17, [x16, #4088]
     fdc:	add	x16, x16, #0xff8
     fe0:	br	x17
     fe4:	nop
     fe8:	nop
     fec:	nop

0000000000000ff0 <memcpy@plt>:
     ff0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
     ff4:	ldr	x17, [x16]
     ff8:	add	x16, x16, #0x0
     ffc:	br	x17

0000000000001000 <all_digits@plt>:
    1000:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1004:	ldr	x17, [x16, #8]
    1008:	add	x16, x16, #0x8
    100c:	br	x17

0000000000001010 <fputs@plt>:
    1010:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1014:	ldr	x17, [x16, #16]
    1018:	add	x16, x16, #0x10
    101c:	br	x17

0000000000001020 <builtin_error@plt>:
    1020:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1024:	ldr	x17, [x16, #24]
    1028:	add	x16, x16, #0x18
    102c:	br	x17

0000000000001030 <builtin_warning@plt>:
    1030:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1034:	ldr	x17, [x16, #32]
    1038:	add	x16, x16, #0x20
    103c:	br	x17

0000000000001040 <__cxa_finalize@plt>:
    1040:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1044:	ldr	x17, [x16, #40]
    1048:	add	x16, x16, #0x28
    104c:	br	x17

0000000000001050 <sprintf@plt>:
    1050:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1054:	ldr	x17, [x16, #48]
    1058:	add	x16, x16, #0x30
    105c:	br	x17

0000000000001060 <snprintf@plt>:
    1060:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1064:	ldr	x17, [x16, #56]
    1068:	add	x16, x16, #0x38
    106c:	br	x17

0000000000001070 <locale_decpoint@plt>:
    1070:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1074:	ldr	x17, [x16, #64]
    1078:	add	x16, x16, #0x40
    107c:	br	x17

0000000000001080 <print_intseq@plt>:
    1080:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1084:	ldr	x17, [x16, #72]
    1088:	add	x16, x16, #0x48
    108c:	br	x17

0000000000001090 <builtin_help@plt>:
    1090:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1094:	ldr	x17, [x16, #80]
    1098:	add	x16, x16, #0x50
    109c:	br	x17

00000000000010a0 <xmalloc@plt>:
    10a0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10a4:	ldr	x17, [x16, #88]
    10a8:	add	x16, x16, #0x58
    10ac:	br	x17

00000000000010b0 <builtin_usage@plt>:
    10b0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10b4:	ldr	x17, [x16, #96]
    10b8:	add	x16, x16, #0x60
    10bc:	br	x17

00000000000010c0 <strerror@plt>:
    10c0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10c4:	ldr	x17, [x16, #104]
    10c8:	add	x16, x16, #0x68
    10cc:	br	x17

00000000000010d0 <__gmon_start__@plt>:
    10d0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10d4:	ldr	x17, [x16, #112]
    10d8:	add	x16, x16, #0x70
    10dc:	br	x17

00000000000010e0 <__ctype_b_loc@plt>:
    10e0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10e4:	ldr	x17, [x16, #120]
    10e8:	add	x16, x16, #0x78
    10ec:	br	x17

00000000000010f0 <strtold@plt>:
    10f0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    10f4:	ldr	x17, [x16, #128]
    10f8:	add	x16, x16, #0x80
    10fc:	br	x17

0000000000001100 <print_fltseq@plt>:
    1100:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1104:	ldr	x17, [x16, #136]
    1108:	add	x16, x16, #0x88
    110c:	br	x17

0000000000001110 <free@plt>:
    1110:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1114:	ldr	x17, [x16, #144]
    1118:	add	x16, x16, #0x90
    111c:	br	x17

0000000000001120 <internal_getopt@plt>:
    1120:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1124:	ldr	x17, [x16, #152]
    1128:	add	x16, x16, #0x98
    112c:	br	x17

0000000000001130 <reset_internal_getopt@plt>:
    1130:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1134:	ldr	x17, [x16, #160]
    1138:	add	x16, x16, #0xa0
    113c:	br	x17

0000000000001140 <strspn@plt>:
    1140:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1144:	ldr	x17, [x16, #168]
    1148:	add	x16, x16, #0xa8
    114c:	br	x17

0000000000001150 <strchr@plt>:
    1150:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1154:	ldr	x17, [x16, #176]
    1158:	add	x16, x16, #0xb0
    115c:	br	x17

0000000000001160 <sh_chkwrite@plt>:
    1160:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1164:	ldr	x17, [x16, #184]
    1168:	add	x16, x16, #0xb8
    116c:	br	x17

0000000000001170 <strcpy@plt>:
    1170:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1174:	ldr	x17, [x16, #192]
    1178:	add	x16, x16, #0xc0
    117c:	br	x17

0000000000001180 <termsig_handler@plt>:
    1180:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1184:	ldr	x17, [x16, #200]
    1188:	add	x16, x16, #0xc8
    118c:	br	x17

0000000000001190 <throw_to_top_level@plt>:
    1190:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    1194:	ldr	x17, [x16, #208]
    1198:	add	x16, x16, #0xd0
    119c:	br	x17

00000000000011a0 <printf@plt>:
    11a0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11a4:	ldr	x17, [x16, #216]
    11a8:	add	x16, x16, #0xd8
    11ac:	br	x17

00000000000011b0 <__errno_location@plt>:
    11b0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11b4:	ldr	x17, [x16, #224]
    11b8:	add	x16, x16, #0xe0
    11bc:	br	x17

00000000000011c0 <sh_invalidnum@plt>:
    11c0:	adrp	x16, 15000 <memcpy@GLIBC_2.17>
    11c4:	ldr	x17, [x16, #232]
    11c8:	add	x16, x16, #0xe8
    11cc:	br	x17

Disassembly of section .text:

00000000000011d0 <call_weak_fn>:
    11d0:	adrp	x0, 14000 <__FRAME_END__+0x1015c>
    11d4:	ldr	x0, [x0, #4032]
    11d8:	cbz	x0, 11e0 <call_weak_fn+0x10>
    11dc:	b	10d0 <__gmon_start__@plt>
    11e0:	ret
    11e4:	nop

00000000000011e8 <deregister_tm_clones>:
    11e8:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    11ec:	add	x0, x0, #0x1a8
    11f0:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    11f4:	add	x1, x1, #0x1a8
    11f8:	cmp	x1, x0
    11fc:	b.eq	1214 <deregister_tm_clones+0x2c>  // b.none
    1200:	adrp	x1, 14000 <__FRAME_END__+0x1015c>
    1204:	ldr	x1, [x1, #3992]
    1208:	cbz	x1, 1214 <deregister_tm_clones+0x2c>
    120c:	mov	x16, x1
    1210:	br	x16
    1214:	ret

0000000000001218 <register_tm_clones>:
    1218:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    121c:	add	x0, x0, #0x1a8
    1220:	adrp	x1, 15000 <memcpy@GLIBC_2.17>
    1224:	add	x1, x1, #0x1a8
    1228:	sub	x1, x1, x0
    122c:	lsr	x2, x1, #63
    1230:	add	x1, x2, x1, asr #3
    1234:	cmp	xzr, x1, asr #1
    1238:	asr	x1, x1, #1
    123c:	b.eq	1254 <register_tm_clones+0x3c>  // b.none
    1240:	adrp	x2, 14000 <__FRAME_END__+0x1015c>
    1244:	ldr	x2, [x2, #4064]
    1248:	cbz	x2, 1254 <register_tm_clones+0x3c>
    124c:	mov	x16, x2
    1250:	br	x16
    1254:	ret

0000000000001258 <__do_global_dtors_aux>:
    1258:	stp	x29, x30, [sp, #-32]!
    125c:	mov	x29, sp
    1260:	str	x19, [sp, #16]
    1264:	adrp	x19, 15000 <memcpy@GLIBC_2.17>
    1268:	ldrb	w0, [x19, #424]
    126c:	cbnz	w0, 1294 <__do_global_dtors_aux+0x3c>
    1270:	adrp	x0, 14000 <__FRAME_END__+0x1015c>
    1274:	ldr	x0, [x0, #4000]
    1278:	cbz	x0, 1288 <__do_global_dtors_aux+0x30>
    127c:	adrp	x0, 15000 <memcpy@GLIBC_2.17>
    1280:	ldr	x0, [x0, #240]
    1284:	bl	1040 <__cxa_finalize@plt>
    1288:	bl	11e8 <deregister_tm_clones>
    128c:	mov	w0, #0x1                   	// #1
    1290:	strb	w0, [x19, #424]
    1294:	ldr	x19, [sp, #16]
    1298:	ldp	x29, x30, [sp], #32
    129c:	ret

00000000000012a0 <frame_dummy>:
    12a0:	b	1218 <register_tm_clones>

00000000000012a4 <print_fltseq>:
    12a4:	sub	sp, sp, #0xb0
    12a8:	stp	x29, x30, [sp, #80]
    12ac:	add	x29, sp, #0x50
    12b0:	str	x27, [sp, #96]
    12b4:	stp	x26, x25, [sp, #112]
    12b8:	stp	x24, x23, [sp, #128]
    12bc:	stp	x22, x21, [sp, #144]
    12c0:	stp	x20, x19, [sp, #160]
    12c4:	stur	q2, [x29, #-32]
    12c8:	stp	q0, q1, [sp, #16]
    12cc:	mov	x19, x0
    12d0:	bl	2c60 <__letf2>
    12d4:	ldp	q0, q1, [sp, #16]
    12d8:	cmp	w0, #0x0
    12dc:	cset	w20, le
    12e0:	bl	2b18 <__getf2>
    12e4:	adrp	x8, 3000 <__multf3+0x260>
    12e8:	ldr	q1, [x8, #1984]
    12ec:	ldur	q0, [x29, #-32]
    12f0:	cmp	w0, #0x0
    12f4:	cset	w21, ge  // ge = tcont
    12f8:	str	q1, [sp]
    12fc:	bl	2b18 <__getf2>
    1300:	cmp	w0, #0x0
    1304:	csel	w8, w20, w21, ge  // ge = tcont
    1308:	cmp	w8, #0x1
    130c:	b.ne	1400 <print_fltseq+0x15c>  // b.any
    1310:	adrp	x22, 14000 <__FRAME_END__+0x1015c>
    1314:	adrp	x23, 14000 <__FRAME_END__+0x1015c>
    1318:	adrp	x24, 14000 <__FRAME_END__+0x1015c>
    131c:	ldr	x22, [x22, #4048]
    1320:	ldr	x23, [x23, #4024]
    1324:	ldr	x24, [x24, #4016]
    1328:	ldr	q0, [sp, #16]
    132c:	adrp	x21, 3000 <__multf3+0x260>
    1330:	add	x21, x21, #0xbe6
    1334:	mov	w20, #0x1                   	// #1
    1338:	adrp	x25, 15000 <memcpy@GLIBC_2.17>
    133c:	stur	q0, [x29, #-16]
    1340:	ldr	w8, [x22]
    1344:	cbz	w8, 1350 <print_fltseq+0xac>
    1348:	ldr	w0, [x22]
    134c:	bl	1180 <termsig_handler@plt>
    1350:	ldr	w8, [x23]
    1354:	cbz	w8, 135c <print_fltseq+0xb8>
    1358:	bl	1190 <throw_to_top_level@plt>
    135c:	ldrb	w8, [x21]
    1360:	cbz	w8, 1378 <print_fltseq+0xd4>
    1364:	ldr	x1, [x24]
    1368:	mov	x0, x21
    136c:	bl	1010 <fputs@plt>
    1370:	cmn	w0, #0x1
    1374:	b.eq	1408 <print_fltseq+0x164>  // b.none
    1378:	ldur	q0, [x29, #-16]
    137c:	mov	x0, x19
    1380:	bl	11a0 <printf@plt>
    1384:	tbnz	w0, #31, 1408 <print_fltseq+0x164>
    1388:	ldr	x21, [x25, #432]
    138c:	mov	w0, w20
    1390:	bl	3588 <__floatsitf>
    1394:	ldur	q1, [x29, #-32]
    1398:	bl	2da0 <__multf3>
    139c:	ldr	q1, [sp, #16]
    13a0:	bl	1ee8 <__addtf3>
    13a4:	stur	q0, [x29, #-16]
    13a8:	ldr	q1, [sp, #32]
    13ac:	bl	2c60 <__letf2>
    13b0:	ldur	q0, [x29, #-16]
    13b4:	ldr	q1, [sp, #32]
    13b8:	cmp	w0, #0x0
    13bc:	cset	w26, le
    13c0:	bl	2b18 <__getf2>
    13c4:	ldur	q0, [x29, #-32]
    13c8:	ldr	q1, [sp]
    13cc:	cmp	w0, #0x0
    13d0:	cset	w27, ge  // ge = tcont
    13d4:	bl	2b18 <__getf2>
    13d8:	cmp	w0, #0x0
    13dc:	csel	w8, w26, w27, ge  // ge = tcont
    13e0:	add	w20, w20, #0x1
    13e4:	tbnz	w8, #0, 1340 <print_fltseq+0x9c>
    13e8:	ldr	x1, [x24]
    13ec:	adrp	x0, 3000 <__multf3+0x260>
    13f0:	add	x0, x0, #0xc4e
    13f4:	bl	1010 <fputs@plt>
    13f8:	cmn	w0, #0x1
    13fc:	b.eq	1408 <print_fltseq+0x164>  // b.none
    1400:	mov	w0, wzr
    1404:	b	140c <print_fltseq+0x168>
    1408:	mov	w0, #0x1                   	// #1
    140c:	ldp	x20, x19, [sp, #160]
    1410:	ldp	x22, x21, [sp, #144]
    1414:	ldp	x24, x23, [sp, #128]
    1418:	ldp	x26, x25, [sp, #112]
    141c:	ldr	x27, [sp, #96]
    1420:	ldp	x29, x30, [sp, #80]
    1424:	add	sp, sp, #0xb0
    1428:	b	1160 <sh_chkwrite@plt>

000000000000142c <width_needed>:
    142c:	mov	x8, x0
    1430:	cmp	x8, #0x0
    1434:	cneg	x9, x8, mi  // mi = first
    1438:	mov	x8, #0x6666666666666666    	// #7378697629483820646
    143c:	lsr	x0, x0, #63
    1440:	movk	x8, #0x6667
    1444:	smulh	x10, x9, x8
    1448:	asr	x11, x10, #2
    144c:	add	x9, x9, #0x9
    1450:	add	x10, x11, x10, lsr #63
    1454:	cmp	x9, #0x12
    1458:	add	w0, w0, #0x1
    145c:	mov	x9, x10
    1460:	b.hi	1444 <width_needed+0x18>  // b.pmore
    1464:	ret

0000000000001468 <print_intseq>:
    1468:	sub	sp, sp, #0x80
    146c:	stp	x29, x30, [sp, #32]
    1470:	stp	x28, x27, [sp, #48]
    1474:	stp	x26, x25, [sp, #64]
    1478:	stp	x24, x23, [sp, #80]
    147c:	stp	x22, x21, [sp, #96]
    1480:	stp	x20, x19, [sp, #112]
    1484:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1488:	ldrb	w8, [x8, #440]
    148c:	mov	x19, x2
    1490:	mov	x20, x1
    1494:	mov	x21, x0
    1498:	cmp	w8, #0x1
    149c:	add	x29, sp, #0x20
    14a0:	b.ne	1530 <print_intseq+0xc8>  // b.any
    14a4:	cmp	x21, #0x0
    14a8:	mov	x9, #0x6666666666666666    	// #7378697629483820646
    14ac:	lsr	x8, x21, #63
    14b0:	cneg	x10, x21, mi  // mi = first
    14b4:	movk	x9, #0x6667
    14b8:	smulh	x11, x10, x9
    14bc:	asr	x12, x11, #2
    14c0:	add	x10, x10, #0x9
    14c4:	add	x11, x12, x11, lsr #63
    14c8:	cmp	x10, #0x12
    14cc:	add	w8, w8, #0x1
    14d0:	mov	x10, x11
    14d4:	b.hi	14b8 <print_intseq+0x50>  // b.pmore
    14d8:	cmp	x20, #0x0
    14dc:	mov	x11, #0x6666666666666666    	// #7378697629483820646
    14e0:	lsr	x9, x20, #63
    14e4:	sub	w10, w8, #0x1
    14e8:	cneg	x12, x20, mi  // mi = first
    14ec:	movk	x11, #0x6667
    14f0:	smulh	x13, x12, x11
    14f4:	asr	x14, x13, #2
    14f8:	add	x12, x12, #0x9
    14fc:	add	x13, x14, x13, lsr #63
    1500:	cmp	x12, #0x12
    1504:	add	w9, w9, #0x1
    1508:	mov	x12, x13
    150c:	b.hi	14f0 <print_intseq+0x88>  // b.pmore
    1510:	sub	w11, w9, #0x1
    1514:	cmp	w10, w11
    1518:	adrp	x2, 3000 <__multf3+0x260>
    151c:	csel	w3, w9, w8, cc  // cc = lo, ul, last
    1520:	add	x2, x2, #0x800
    1524:	add	x0, sp, #0xc
    1528:	mov	w1, #0x14                  	// #20
    152c:	bl	1060 <snprintf@plt>
    1530:	cmp	x21, x20
    1534:	cset	w8, le
    1538:	cset	w9, ge  // ge = tcont
    153c:	csel	w8, w9, w8, gt
    1540:	cmp	w8, #0x1
    1544:	b.ne	15d0 <print_intseq+0x168>  // b.any
    1548:	adrp	x25, 14000 <__FRAME_END__+0x1015c>
    154c:	adrp	x26, 14000 <__FRAME_END__+0x1015c>
    1550:	ldr	x25, [x25, #4048]
    1554:	ldr	x26, [x26, #4024]
    1558:	adrp	x22, 3000 <__multf3+0x260>
    155c:	adrp	x27, 3000 <__multf3+0x260>
    1560:	add	x22, x22, #0xbe6
    1564:	add	x27, x27, #0x80b
    1568:	add	x28, sp, #0xc
    156c:	adrp	x24, 15000 <memcpy@GLIBC_2.17>
    1570:	mov	x23, x21
    1574:	ldr	w8, [x25]
    1578:	cbz	w8, 1584 <print_intseq+0x11c>
    157c:	ldr	w0, [x25]
    1580:	bl	1180 <termsig_handler@plt>
    1584:	ldr	w8, [x26]
    1588:	cbz	w8, 1590 <print_intseq+0x128>
    158c:	bl	1190 <throw_to_top_level@plt>
    1590:	adrp	x8, 15000 <memcpy@GLIBC_2.17>
    1594:	ldrb	w8, [x8, #440]
    1598:	mov	x1, x22
    159c:	mov	x2, x23
    15a0:	cmp	w8, #0x0
    15a4:	csel	x0, x28, x27, ne  // ne = any
    15a8:	bl	11a0 <printf@plt>
    15ac:	tbnz	w0, #31, 15f4 <print_intseq+0x18c>
    15b0:	ldr	x22, [x24, #432]
    15b4:	add	x23, x23, x19
    15b8:	cmp	x23, x20
    15bc:	cset	w8, le
    15c0:	cset	w9, ge  // ge = tcont
    15c4:	cmp	x21, x20
    15c8:	csel	w8, w9, w8, gt
    15cc:	tbnz	w8, #0, 1574 <print_intseq+0x10c>
    15d0:	adrp	x8, 14000 <__FRAME_END__+0x1015c>
    15d4:	ldr	x8, [x8, #4016]
    15d8:	adrp	x0, 3000 <__multf3+0x260>
    15dc:	add	x0, x0, #0xc4e
    15e0:	ldr	x1, [x8]
    15e4:	bl	1010 <fputs@plt>
    15e8:	cmn	w0, #0x1
    15ec:	cset	w0, eq  // eq = none
    15f0:	b	15f8 <print_intseq+0x190>
    15f4:	mov	w0, #0x1                   	// #1
    15f8:	ldp	x20, x19, [sp, #112]
    15fc:	ldp	x22, x21, [sp, #96]
    1600:	ldp	x24, x23, [sp, #80]
    1604:	ldp	x26, x25, [sp, #64]
    1608:	ldp	x28, x27, [sp, #48]
    160c:	ldp	x29, x30, [sp, #32]
    1610:	add	sp, sp, #0x80
    1614:	b	1160 <sh_chkwrite@plt>

0000000000001618 <seq_builtin>:
    1618:	sub	sp, sp, #0xb0
    161c:	adrp	x8, 3000 <__multf3+0x260>
    1620:	stp	x24, x23, [sp, #128]
    1624:	adrp	x24, 15000 <memcpy@GLIBC_2.17>
    1628:	adrp	x23, 15000 <memcpy@GLIBC_2.17>
    162c:	add	x8, x8, #0xc4e
    1630:	stp	x29, x30, [sp, #80]
    1634:	stp	x28, x27, [sp, #96]
    1638:	stp	x26, x25, [sp, #112]
    163c:	stp	x22, x21, [sp, #144]
    1640:	stp	x20, x19, [sp, #160]
    1644:	add	x29, sp, #0x50
    1648:	mov	x20, x0
    164c:	strb	wzr, [x24, #440]
    1650:	str	x8, [x23, #432]
    1654:	bl	1130 <reset_internal_getopt@plt>
    1658:	adrp	x25, 14000 <__FRAME_END__+0x1015c>
    165c:	adrp	x26, 14000 <__FRAME_END__+0x1015c>
    1660:	ldr	x25, [x25, #4008]
    1664:	ldr	x26, [x26, #4040]
    1668:	adrp	x21, 3000 <__multf3+0x260>
    166c:	mov	x19, xzr
    1670:	add	x21, x21, #0x811
    1674:	mov	w27, #0x1                   	// #1
    1678:	ldr	x8, [x25]
    167c:	cmp	x8, #0x0
    1680:	csel	x22, x20, x8, eq  // eq = none
    1684:	cbz	x22, 16c0 <seq_builtin+0xa8>
    1688:	ldr	x8, [x22, #8]
    168c:	cbz	x8, 16c0 <seq_builtin+0xa8>
    1690:	ldr	x8, [x8]
    1694:	cbz	x8, 16c0 <seq_builtin+0xa8>
    1698:	ldrb	w9, [x8]
    169c:	cmp	w9, #0x2d
    16a0:	b.ne	16c0 <seq_builtin+0xa8>  // b.any
    16a4:	ldrb	w8, [x8, #1]
    16a8:	cmp	w8, #0x2e
    16ac:	b.eq	1870 <seq_builtin+0x258>  // b.none
    16b0:	sub	w8, w8, #0x30
    16b4:	and	w8, w8, #0xff
    16b8:	cmp	w8, #0x9
    16bc:	b.ls	1870 <seq_builtin+0x258>  // b.plast
    16c0:	mov	x0, x20
    16c4:	mov	x1, x21
    16c8:	bl	1120 <internal_getopt@plt>
    16cc:	cmp	w0, #0x72
    16d0:	b.gt	16f4 <seq_builtin+0xdc>
    16d4:	cmn	w0, #0x63
    16d8:	b.eq	1718 <seq_builtin+0x100>  // b.none
    16dc:	cmn	w0, #0x1
    16e0:	b.eq	1720 <seq_builtin+0x108>  // b.none
    16e4:	cmp	w0, #0x66
    16e8:	b.ne	175c <seq_builtin+0x144>  // b.any
    16ec:	ldr	x19, [x26]
    16f0:	b	1678 <seq_builtin+0x60>
    16f4:	cmp	w0, #0x73
    16f8:	b.eq	170c <seq_builtin+0xf4>  // b.none
    16fc:	cmp	w0, #0x77
    1700:	b.ne	175c <seq_builtin+0x144>  // b.any
    1704:	strb	w27, [x24, #440]
    1708:	b	1678 <seq_builtin+0x60>
    170c:	ldr	x8, [x26]
    1710:	str	x8, [x23, #432]
    1714:	b	1678 <seq_builtin+0x60>
    1718:	bl	1090 <builtin_help@plt>
    171c:	b	1760 <seq_builtin+0x148>
    1720:	adrp	x8, 14000 <__FRAME_END__+0x1015c>
    1724:	ldr	x8, [x8, #4056]
    1728:	ldr	x22, [x8]
    172c:	cbz	x22, 1750 <seq_builtin+0x138>
    1730:	mov	w27, wzr
    1734:	mov	x9, x22
    1738:	mov	x8, x9
    173c:	ldr	x9, [x9]
    1740:	add	w27, w27, #0x1
    1744:	cbnz	x9, 1738 <seq_builtin+0x120>
    1748:	cmp	w27, #0x4
    174c:	b.cc	1784 <seq_builtin+0x16c>  // b.lo, b.ul, b.last
    1750:	bl	10b0 <builtin_usage@plt>
    1754:	mov	w0, #0x1                   	// #1
    1758:	b	1764 <seq_builtin+0x14c>
    175c:	bl	10b0 <builtin_usage@plt>
    1760:	mov	w0, #0x102                 	// #258
    1764:	ldp	x20, x19, [sp, #160]
    1768:	ldp	x22, x21, [sp, #144]
    176c:	ldp	x24, x23, [sp, #128]
    1770:	ldp	x26, x25, [sp, #112]
    1774:	ldp	x28, x27, [sp, #96]
    1778:	ldp	x29, x30, [sp, #80]
    177c:	add	sp, sp, #0xb0
    1780:	ret
    1784:	adrp	x25, 15000 <memcpy@GLIBC_2.17>
    1788:	strb	wzr, [x25, #444]
    178c:	ldr	x8, [x8, #8]
    1790:	ldr	x20, [x8]
    1794:	bl	11b0 <__errno_location@plt>
    1798:	mov	x23, x0
    179c:	str	wzr, [x0]
    17a0:	sub	x1, x29, #0x8
    17a4:	mov	x0, x20
    17a8:	bl	10f0 <strtold@plt>
    17ac:	ldur	x8, [x29, #-8]
    17b0:	ldrb	w8, [x8]
    17b4:	cbz	w8, 17c4 <seq_builtin+0x1ac>
    17b8:	mov	x0, x20
    17bc:	bl	11c0 <sh_invalidnum@plt>
    17c0:	b	17ec <seq_builtin+0x1d4>
    17c4:	ldr	w8, [x23]
    17c8:	cmp	w8, #0x22
    17cc:	b.ne	17f8 <seq_builtin+0x1e0>  // b.any
    17d0:	mov	w0, #0x22                  	// #34
    17d4:	bl	10c0 <strerror@plt>
    17d8:	mov	x2, x0
    17dc:	adrp	x0, 3000 <__multf3+0x260>
    17e0:	add	x0, x0, #0xb92
    17e4:	mov	x1, x20
    17e8:	bl	1020 <builtin_error@plt>
    17ec:	mov	w0, #0x1                   	// #1
    17f0:	strb	w0, [x25, #444]
    17f4:	b	1764 <seq_builtin+0x14c>
    17f8:	adrp	x26, 3000 <__multf3+0x260>
    17fc:	ldr	q1, [x26, #1984]
    1800:	ldrb	w21, [x25, #444]
    1804:	stur	q0, [x29, #-32]
    1808:	str	q1, [sp, #32]
    180c:	bl	2a10 <__eqtf2>
    1810:	cmp	w0, #0x0
    1814:	b.ne	1820 <seq_builtin+0x208>  // b.any
    1818:	ldr	q0, [sp, #32]
    181c:	stur	q0, [x29, #-32]
    1820:	tbz	w21, #0, 182c <seq_builtin+0x214>
    1824:	mov	w0, #0x1                   	// #1
    1828:	b	1764 <seq_builtin+0x14c>
    182c:	ldr	q1, [x26, #1984]
    1830:	cmp	w27, #0x2
    1834:	str	q1, [sp]
    1838:	b.cc	1880 <seq_builtin+0x268>  // b.lo, b.ul, b.last
    183c:	strb	wzr, [x25, #444]
    1840:	ldr	x8, [x22, #8]
    1844:	sub	x1, x29, #0x8
    1848:	ldr	x21, [x8]
    184c:	str	wzr, [x23]
    1850:	mov	x0, x21
    1854:	bl	10f0 <strtold@plt>
    1858:	ldur	x8, [x29, #-8]
    185c:	ldrb	w8, [x8]
    1860:	cbz	w8, 1950 <seq_builtin+0x338>
    1864:	mov	x0, x21
    1868:	bl	11c0 <sh_invalidnum@plt>
    186c:	b	17ec <seq_builtin+0x1d4>
    1870:	adrp	x8, 14000 <__FRAME_END__+0x1015c>
    1874:	ldr	x8, [x8, #4056]
    1878:	str	x22, [x8]
    187c:	b	1730 <seq_builtin+0x118>
    1880:	adrp	x8, 3000 <__multf3+0x260>
    1884:	ldr	q0, [x8, #2000]
    1888:	mov	x21, xzr
    188c:	mov	x22, xzr
    1890:	str	q1, [sp, #32]
    1894:	str	q0, [sp, #16]
    1898:	ldur	q1, [x29, #-32]
    189c:	bl	2c60 <__letf2>
    18a0:	ldr	q0, [sp, #32]
    18a4:	ldr	q1, [sp]
    18a8:	cmp	w0, #0x0
    18ac:	cset	w23, le
    18b0:	bl	2a10 <__eqtf2>
    18b4:	cmp	w0, #0x0
    18b8:	b.ne	18cc <seq_builtin+0x2b4>  // b.any
    18bc:	adrp	x8, 3000 <__multf3+0x260>
    18c0:	add	x8, x8, #0x7e0
    18c4:	ldr	q0, [x8, w23, uxtw #4]
    18c8:	str	q0, [sp, #32]
    18cc:	ldr	q0, [sp, #16]
    18d0:	ldur	q1, [x29, #-32]
    18d4:	bl	2c60 <__letf2>
    18d8:	cmp	w0, #0x0
    18dc:	b.ge	18f0 <seq_builtin+0x2d8>  // b.tcont
    18e0:	ldr	q1, [x26, #1984]
    18e4:	ldr	q0, [sp, #32]
    18e8:	bl	2c60 <__letf2>
    18ec:	tbnz	w0, #31, 1918 <seq_builtin+0x300>
    18f0:	ldr	q0, [sp, #16]
    18f4:	ldur	q1, [x29, #-32]
    18f8:	bl	2b18 <__getf2>
    18fc:	cmp	w0, #0x0
    1900:	b.le	1978 <seq_builtin+0x360>
    1904:	ldr	q1, [x26, #1984]
    1908:	ldr	q0, [sp, #32]
    190c:	bl	2b18 <__getf2>
    1910:	cmp	w0, #0x0
    1914:	b.le	1978 <seq_builtin+0x360>
    1918:	ldr	q0, [sp, #16]
    191c:	ldur	q1, [x29, #-32]
    1920:	bl	2c60 <__letf2>
    1924:	adrp	x8, 3000 <__multf3+0x260>
    1928:	adrp	x9, 3000 <__multf3+0x260>
    192c:	add	x8, x8, #0x829
    1930:	add	x9, x9, #0x826
    1934:	cmp	w0, #0x0
    1938:	adrp	x0, 3000 <__multf3+0x260>
    193c:	csel	x1, x9, x8, lt  // lt = tstop
    1940:	add	x0, x0, #0x82c
    1944:	bl	1020 <builtin_error@plt>
    1948:	mov	w0, #0x1                   	// #1
    194c:	b	1764 <seq_builtin+0x14c>
    1950:	ldr	w8, [x23]
    1954:	cmp	w8, #0x22
    1958:	b.ne	19c0 <seq_builtin+0x3a8>  // b.any
    195c:	mov	w0, #0x22                  	// #34
    1960:	bl	10c0 <strerror@plt>
    1964:	mov	x2, x0
    1968:	adrp	x0, 3000 <__multf3+0x260>
    196c:	add	x0, x0, #0xb92
    1970:	mov	x1, x21
    1974:	b	17e8 <seq_builtin+0x1d0>
    1978:	cbz	x19, 1a24 <seq_builtin+0x40c>
    197c:	mov	x8, xzr
    1980:	mov	w9, #0x1                   	// #1
    1984:	b	19a4 <seq_builtin+0x38c>
    1988:	add	x23, x8, #0x1
    198c:	ldrb	w11, [x19, x23]
    1990:	cmp	w11, #0x25
    1994:	b.ne	1a60 <seq_builtin+0x448>  // b.any
    1998:	cmp	w10, #0x25
    199c:	cinc	x10, x9, eq  // eq = none
    19a0:	add	x8, x10, x8
    19a4:	ldrb	w10, [x19, x8]
    19a8:	cmp	w10, #0x25
    19ac:	b.eq	1988 <seq_builtin+0x370>  // b.none
    19b0:	cbnz	w10, 1998 <seq_builtin+0x380>
    19b4:	adrp	x0, 3000 <__multf3+0x260>
    19b8:	add	x0, x0, #0xba2
    19bc:	b	1b28 <seq_builtin+0x510>
    19c0:	ldr	q1, [x26, #1984]
    19c4:	ldrb	w28, [x25, #444]
    19c8:	stp	q0, q1, [sp, #16]
    19cc:	bl	2a10 <__eqtf2>
    19d0:	cmp	w0, #0x0
    19d4:	b.ne	19e0 <seq_builtin+0x3c8>  // b.any
    19d8:	ldr	q0, [sp, #32]
    19dc:	str	q0, [sp, #16]
    19e0:	tbnz	w28, #0, 1824 <seq_builtin+0x20c>
    19e4:	cmp	w27, #0x3
    19e8:	b.cc	1b30 <seq_builtin+0x518>  // b.lo, b.ul, b.last
    19ec:	strb	wzr, [x25, #444]
    19f0:	ldr	x8, [x22]
    19f4:	sub	x1, x29, #0x8
    19f8:	ldr	x8, [x8, #8]
    19fc:	ldr	x22, [x8]
    1a00:	str	wzr, [x23]
    1a04:	mov	x0, x22
    1a08:	bl	10f0 <strtold@plt>
    1a0c:	ldur	x8, [x29, #-8]
    1a10:	ldrb	w8, [x8]
    1a14:	cbz	w8, 1b9c <seq_builtin+0x584>
    1a18:	mov	x0, x22
    1a1c:	bl	11c0 <sh_invalidnum@plt>
    1a20:	b	17ec <seq_builtin+0x1d4>
    1a24:	mov	w23, wzr
    1a28:	cbz	x20, 1bdc <seq_builtin+0x5c4>
    1a2c:	mov	x0, x20
    1a30:	bl	1000 <all_digits@plt>
    1a34:	cbz	w0, 1bdc <seq_builtin+0x5c4>
    1a38:	cbz	x21, 1a48 <seq_builtin+0x430>
    1a3c:	mov	x0, x21
    1a40:	bl	1000 <all_digits@plt>
    1a44:	cbz	w0, 1bdc <seq_builtin+0x5c4>
    1a48:	cbz	x22, 1bd8 <seq_builtin+0x5c0>
    1a4c:	mov	x0, x22
    1a50:	bl	1000 <all_digits@plt>
    1a54:	cbnz	x19, 1bdc <seq_builtin+0x5c4>
    1a58:	cbnz	w0, 1c70 <seq_builtin+0x658>
    1a5c:	b	1bdc <seq_builtin+0x5c4>
    1a60:	adrp	x1, 3000 <__multf3+0x260>
    1a64:	add	x0, x19, x23
    1a68:	add	x1, x1, #0xbc0
    1a6c:	bl	1140 <strspn@plt>
    1a70:	add	x23, x0, x23
    1a74:	adrp	x1, 3000 <__multf3+0x260>
    1a78:	add	x0, x19, x23
    1a7c:	add	x1, x1, #0xbc7
    1a80:	bl	1140 <strspn@plt>
    1a84:	add	x23, x23, x0
    1a88:	ldrb	w8, [x19, x23]
    1a8c:	cmp	w8, #0x2e
    1a90:	b.ne	1ab0 <seq_builtin+0x498>  // b.any
    1a94:	add	x23, x23, #0x1
    1a98:	adrp	x1, 3000 <__multf3+0x260>
    1a9c:	add	x0, x19, x23
    1aa0:	add	x1, x1, #0xbc7
    1aa4:	bl	1140 <strspn@plt>
    1aa8:	add	x23, x0, x23
    1aac:	ldrb	w8, [x19, x23]
    1ab0:	cmp	w8, #0x4c
    1ab4:	cinc	x8, x23, eq  // eq = none
    1ab8:	ldrb	w2, [x19, x8]
    1abc:	cset	w25, eq  // eq = none
    1ac0:	sub	w9, w2, #0x41
    1ac4:	cmp	w9, #0x26
    1ac8:	b.hi	1bc8 <seq_builtin+0x5b0>  // b.pmore
    1acc:	mov	w10, #0x1                   	// #1
    1ad0:	lsl	x9, x10, x9
    1ad4:	mov	x10, #0x71                  	// #113
    1ad8:	movk	x10, #0x71, lsl #32
    1adc:	tst	x9, x10
    1ae0:	b.eq	1bc8 <seq_builtin+0x5b0>  // b.none
    1ae4:	add	x26, x19, x23
    1ae8:	add	x8, x8, #0x1
    1aec:	mov	w9, #0x1                   	// #1
    1af0:	b	1b04 <seq_builtin+0x4ec>
    1af4:	cbz	w10, 1b44 <seq_builtin+0x52c>
    1af8:	cmp	w10, #0x25
    1afc:	cinc	x10, x9, eq  // eq = none
    1b00:	add	x8, x10, x8
    1b04:	ldrb	w10, [x19, x8]
    1b08:	cmp	w10, #0x25
    1b0c:	b.ne	1af4 <seq_builtin+0x4dc>  // b.any
    1b10:	add	x11, x8, x19
    1b14:	ldrb	w11, [x11, #1]
    1b18:	cmp	w11, #0x25
    1b1c:	b.eq	1af8 <seq_builtin+0x4e0>  // b.none
    1b20:	adrp	x0, 3000 <__multf3+0x260>
    1b24:	add	x0, x0, #0xc0e
    1b28:	mov	x1, x19
    1b2c:	b	1944 <seq_builtin+0x32c>
    1b30:	ldr	q0, [x26, #1984]
    1b34:	mov	x22, xzr
    1b38:	str	q0, [sp, #32]
    1b3c:	ldr	q0, [sp, #16]
    1b40:	b	1894 <seq_builtin+0x27c>
    1b44:	add	x0, x8, #0x2
    1b48:	bl	10a0 <xmalloc@plt>
    1b4c:	mov	x1, x19
    1b50:	mov	x2, x23
    1b54:	mov	x19, x0
    1b58:	bl	ff0 <memcpy@plt>
    1b5c:	add	x0, x19, x23
    1b60:	mov	w8, #0x4c                  	// #76
    1b64:	strb	w8, [x0], #1
    1b68:	add	x1, x26, x25
    1b6c:	bl	1170 <strcpy@plt>
    1b70:	cbz	x19, 1824 <seq_builtin+0x20c>
    1b74:	ldrb	w8, [x24, #440]
    1b78:	cmp	w8, #0x1
    1b7c:	b.ne	1b90 <seq_builtin+0x578>  // b.any
    1b80:	adrp	x0, 3000 <__multf3+0x260>
    1b84:	add	x0, x0, #0x840
    1b88:	bl	1030 <builtin_warning@plt>
    1b8c:	strb	wzr, [x24, #440]
    1b90:	mov	w23, #0x1                   	// #1
    1b94:	cbnz	x20, 1a2c <seq_builtin+0x414>
    1b98:	b	1bdc <seq_builtin+0x5c4>
    1b9c:	ldr	w8, [x23]
    1ba0:	str	q0, [sp, #32]
    1ba4:	cmp	w8, #0x22
    1ba8:	b.ne	1e24 <seq_builtin+0x80c>  // b.any
    1bac:	mov	w0, #0x22                  	// #34
    1bb0:	bl	10c0 <strerror@plt>
    1bb4:	mov	x2, x0
    1bb8:	adrp	x0, 3000 <__multf3+0x260>
    1bbc:	add	x0, x0, #0xb92
    1bc0:	mov	x1, x22
    1bc4:	b	17e8 <seq_builtin+0x1d0>
    1bc8:	cbnz	w2, 1e6c <seq_builtin+0x854>
    1bcc:	adrp	x0, 3000 <__multf3+0x260>
    1bd0:	add	x0, x0, #0xbd2
    1bd4:	b	1b28 <seq_builtin+0x510>
    1bd8:	cbz	x19, 1c70 <seq_builtin+0x658>
    1bdc:	bl	1070 <locale_decpoint@plt>
    1be0:	ldr	q0, [sp, #16]
    1be4:	adrp	x21, 15000 <memcpy@GLIBC_2.17>
    1be8:	strb	w0, [x21, #448]
    1bec:	cbnz	x19, 1ea4 <seq_builtin+0x88c>
    1bf0:	ldrb	w8, [x24, #440]
    1bf4:	cmp	w8, #0x1
    1bf8:	b.ne	1c64 <seq_builtin+0x64c>  // b.any
    1bfc:	ldr	q0, [sp, #32]
    1c00:	adrp	x19, 15000 <memcpy@GLIBC_2.17>
    1c04:	add	x19, x19, #0x1c1
    1c08:	adrp	x2, 3000 <__multf3+0x260>
    1c0c:	add	x2, x2, #0xc33
    1c10:	mov	w1, #0x1c                  	// #28
    1c14:	mov	x0, x19
    1c18:	bl	1060 <snprintf@plt>
    1c1c:	ldrb	w1, [x21, #448]
    1c20:	mov	x0, x19
    1c24:	bl	1150 <strchr@plt>
    1c28:	cbz	x0, 1cbc <seq_builtin+0x6a4>
    1c2c:	ldrb	w20, [x0, #1]
    1c30:	mov	x19, x0
    1c34:	cbz	w20, 1cbc <seq_builtin+0x6a4>
    1c38:	bl	10e0 <__ctype_b_loc@plt>
    1c3c:	ldr	x8, [x0]
    1c40:	mov	x22, xzr
    1c44:	add	x9, x19, #0x2
    1c48:	and	x10, x20, #0xff
    1c4c:	ldrh	w10, [x8, x10, lsl #1]
    1c50:	tbz	w10, #11, 1cc0 <seq_builtin+0x6a8>
    1c54:	ldrb	w20, [x9, x22]
    1c58:	add	x22, x22, #0x1
    1c5c:	cbnz	w20, 1c48 <seq_builtin+0x630>
    1c60:	b	1cc0 <seq_builtin+0x6a8>
    1c64:	adrp	x19, 3000 <__multf3+0x260>
    1c68:	add	x19, x19, #0xc33
    1c6c:	b	1ea4 <seq_builtin+0x88c>
    1c70:	ldr	q0, [sp, #16]
    1c74:	bl	3608 <__fixtfdi>
    1c78:	ldur	q0, [x29, #-32]
    1c7c:	mov	x19, x0
    1c80:	bl	3608 <__fixtfdi>
    1c84:	ldr	q0, [sp, #32]
    1c88:	mov	x20, x0
    1c8c:	bl	3608 <__fixtfdi>
    1c90:	mov	x2, x0
    1c94:	mov	x0, x19
    1c98:	mov	x1, x20
    1c9c:	ldp	x20, x19, [sp, #160]
    1ca0:	ldp	x22, x21, [sp, #144]
    1ca4:	ldp	x24, x23, [sp, #128]
    1ca8:	ldp	x26, x25, [sp, #112]
    1cac:	ldp	x28, x27, [sp, #96]
    1cb0:	ldp	x29, x30, [sp, #80]
    1cb4:	add	sp, sp, #0xb0
    1cb8:	b	1080 <print_intseq@plt>
    1cbc:	mov	w22, wzr
    1cc0:	ldr	q0, [sp, #16]
    1cc4:	adrp	x20, 15000 <memcpy@GLIBC_2.17>
    1cc8:	add	x20, x20, #0x1c1
    1ccc:	adrp	x2, 3000 <__multf3+0x260>
    1cd0:	add	x2, x2, #0xc33
    1cd4:	mov	w1, #0x1c                  	// #28
    1cd8:	mov	x0, x20
    1cdc:	bl	1060 <snprintf@plt>
    1ce0:	ldrb	w1, [x21, #448]
    1ce4:	mov	w19, w0
    1ce8:	mov	x0, x20
    1cec:	bl	1150 <strchr@plt>
    1cf0:	cbz	x0, 1d2c <seq_builtin+0x714>
    1cf4:	ldrb	w25, [x0, #1]
    1cf8:	mov	x20, x0
    1cfc:	cbz	w25, 1d2c <seq_builtin+0x714>
    1d00:	bl	10e0 <__ctype_b_loc@plt>
    1d04:	ldr	x8, [x0]
    1d08:	mov	x24, xzr
    1d0c:	add	x9, x20, #0x2
    1d10:	and	x10, x25, #0xff
    1d14:	ldrh	w10, [x8, x10, lsl #1]
    1d18:	tbz	w10, #11, 1d30 <seq_builtin+0x718>
    1d1c:	ldrb	w25, [x9, x24]
    1d20:	add	x24, x24, #0x1
    1d24:	cbnz	w25, 1d10 <seq_builtin+0x6f8>
    1d28:	b	1d30 <seq_builtin+0x718>
    1d2c:	mov	w24, wzr
    1d30:	cmp	w24, w22
    1d34:	ldur	q0, [x29, #-32]
    1d38:	csel	w20, w22, w24, cc  // cc = lo, ul, last
    1d3c:	adrp	x22, 15000 <memcpy@GLIBC_2.17>
    1d40:	add	x22, x22, #0x1c1
    1d44:	adrp	x2, 3000 <__multf3+0x260>
    1d48:	add	x2, x2, #0xc33
    1d4c:	mov	w1, #0x1c                  	// #28
    1d50:	mov	x0, x22
    1d54:	bl	1060 <snprintf@plt>
    1d58:	ldrb	w1, [x21, #448]
    1d5c:	mov	w21, w0
    1d60:	mov	x0, x22
    1d64:	bl	1150 <strchr@plt>
    1d68:	cbz	x0, 1da4 <seq_builtin+0x78c>
    1d6c:	ldrb	w25, [x0, #1]
    1d70:	mov	x22, x0
    1d74:	cbz	w25, 1da4 <seq_builtin+0x78c>
    1d78:	bl	10e0 <__ctype_b_loc@plt>
    1d7c:	ldr	x9, [x0]
    1d80:	mov	x8, xzr
    1d84:	add	x10, x22, #0x2
    1d88:	and	x11, x25, #0xff
    1d8c:	ldrh	w11, [x9, x11, lsl #1]
    1d90:	tbz	w11, #11, 1da8 <seq_builtin+0x790>
    1d94:	ldrb	w25, [x10, x8]
    1d98:	add	x8, x8, #0x1
    1d9c:	cbnz	w25, 1d88 <seq_builtin+0x770>
    1da0:	b	1da8 <seq_builtin+0x790>
    1da4:	mov	w8, wzr
    1da8:	cmp	w8, #0x0
    1dac:	add	w9, w20, w21
    1db0:	sub	w10, w19, w24
    1db4:	cset	w11, ne  // ne = any
    1db8:	cset	w12, eq  // eq = none
    1dbc:	cmp	w20, #0x0
    1dc0:	sub	w8, w9, w8
    1dc4:	add	w9, w10, w20
    1dc8:	cset	w10, eq  // eq = none
    1dcc:	cset	w13, ne  // ne = any
    1dd0:	cmp	w24, #0x0
    1dd4:	and	w10, w10, w11
    1dd8:	and	w11, w13, w12
    1ddc:	cset	w12, eq  // eq = none
    1de0:	sub	w8, w8, w10
    1de4:	and	w10, w12, w13
    1de8:	add	w8, w8, w11
    1dec:	add	w9, w9, w10
    1df0:	cmp	w9, w8
    1df4:	adrp	x19, 15000 <memcpy@GLIBC_2.17>
    1df8:	add	x19, x19, #0x1c1
    1dfc:	csel	w2, w8, w9, lt  // lt = tstop
    1e00:	cbz	w2, 1e84 <seq_builtin+0x86c>
    1e04:	adrp	x1, 3000 <__multf3+0x260>
    1e08:	adrp	x4, 3000 <__multf3+0x260>
    1e0c:	add	x1, x1, #0xc37
    1e10:	add	x4, x4, #0xc43
    1e14:	mov	x0, x19
    1e18:	mov	w3, w20
    1e1c:	bl	1050 <sprintf@plt>
    1e20:	b	1ea0 <seq_builtin+0x888>
    1e24:	ldrb	w8, [x25, #444]
    1e28:	tbnz	w8, #0, 1824 <seq_builtin+0x20c>
    1e2c:	ldr	q1, [x26, #1984]
    1e30:	ldr	q0, [sp, #32]
    1e34:	bl	2a10 <__eqtf2>
    1e38:	cbnz	w0, 1b3c <seq_builtin+0x524>
    1e3c:	ldr	q0, [sp, #16]
    1e40:	ldur	q1, [x29, #-32]
    1e44:	bl	2c60 <__letf2>
    1e48:	adrp	x8, 3000 <__multf3+0x260>
    1e4c:	adrp	x9, 3000 <__multf3+0x260>
    1e50:	add	x8, x8, #0x829
    1e54:	add	x9, x9, #0x826
    1e58:	cmp	w0, #0x0
    1e5c:	adrp	x0, 3000 <__multf3+0x260>
    1e60:	csel	x1, x9, x8, lt  // lt = tstop
    1e64:	add	x0, x0, #0x817
    1e68:	b	1944 <seq_builtin+0x32c>
    1e6c:	adrp	x0, 3000 <__multf3+0x260>
    1e70:	add	x0, x0, #0xbe7
    1e74:	mov	x1, x19
    1e78:	bl	1020 <builtin_error@plt>
    1e7c:	mov	w0, #0x1                   	// #1
    1e80:	b	1764 <seq_builtin+0x14c>
    1e84:	adrp	x1, 3000 <__multf3+0x260>
    1e88:	adrp	x3, 3000 <__multf3+0x260>
    1e8c:	add	x1, x1, #0xc45
    1e90:	add	x3, x3, #0xc43
    1e94:	mov	x0, x19
    1e98:	mov	w2, w20
    1e9c:	bl	1050 <sprintf@plt>
    1ea0:	ldr	q0, [sp, #16]
    1ea4:	ldur	q1, [x29, #-32]
    1ea8:	ldr	q2, [sp, #32]
    1eac:	mov	x0, x19
    1eb0:	bl	1100 <print_fltseq@plt>
    1eb4:	cbz	w23, 1ec0 <seq_builtin+0x8a8>
    1eb8:	mov	x0, x19
    1ebc:	bl	1110 <free@plt>
    1ec0:	ldp	x20, x19, [sp, #160]
    1ec4:	ldp	x22, x21, [sp, #144]
    1ec8:	ldp	x24, x23, [sp, #128]
    1ecc:	ldp	x26, x25, [sp, #112]
    1ed0:	ldp	x28, x27, [sp, #96]
    1ed4:	ldp	x29, x30, [sp, #80]
    1ed8:	mov	w0, wzr
    1edc:	add	sp, sp, #0xb0
    1ee0:	b	1160 <sh_chkwrite@plt>
    1ee4:	nop

0000000000001ee8 <__addtf3>:
    1ee8:	stp	x29, x30, [sp, #-48]!
    1eec:	mov	x29, sp
    1ef0:	str	q0, [sp, #16]
    1ef4:	str	q1, [sp, #32]
    1ef8:	ldp	x6, x1, [sp, #16]
    1efc:	ldp	x0, x3, [sp, #32]
    1f00:	mrs	x15, fpcr
    1f04:	lsr	x7, x1, #63
    1f08:	mov	x10, x0
    1f0c:	ubfiz	x4, x3, #3, #48
    1f10:	lsr	x5, x3, #63
    1f14:	mov	x12, x7
    1f18:	ubfiz	x2, x1, #3, #48
    1f1c:	orr	x4, x4, x0, lsr #61
    1f20:	ubfx	x8, x1, #48, #15
    1f24:	ubfx	x0, x3, #48, #15
    1f28:	and	w7, w7, #0xff
    1f2c:	mov	x16, x12
    1f30:	cmp	x12, x5
    1f34:	and	w11, w5, #0xff
    1f38:	orr	x2, x2, x6, lsr #61
    1f3c:	mov	x1, x8
    1f40:	lsl	x9, x6, #3
    1f44:	mov	x3, x0
    1f48:	lsl	x13, x10, #3
    1f4c:	b.eq	20f8 <__addtf3+0x210>  // b.none
    1f50:	sub	w0, w8, w0
    1f54:	cmp	w0, #0x0
    1f58:	b.le	20a4 <__addtf3+0x1bc>
    1f5c:	cbz	x3, 2158 <__addtf3+0x270>
    1f60:	orr	x4, x4, #0x8000000000000
    1f64:	mov	x3, #0x7fff                	// #32767
    1f68:	cmp	x1, x3
    1f6c:	b.eq	235c <__addtf3+0x474>  // b.none
    1f70:	cmp	w0, #0x74
    1f74:	b.gt	23e0 <__addtf3+0x4f8>
    1f78:	cmp	w0, #0x3f
    1f7c:	b.gt	2540 <__addtf3+0x658>
    1f80:	mov	w3, #0x40                  	// #64
    1f84:	sub	w3, w3, w0
    1f88:	lsr	x6, x13, x0
    1f8c:	lsl	x13, x13, x3
    1f90:	cmp	x13, #0x0
    1f94:	cset	x5, ne  // ne = any
    1f98:	lsl	x3, x4, x3
    1f9c:	orr	x3, x3, x6
    1fa0:	lsr	x0, x4, x0
    1fa4:	orr	x3, x3, x5
    1fa8:	sub	x2, x2, x0
    1fac:	subs	x9, x9, x3
    1fb0:	sbc	x2, x2, xzr
    1fb4:	and	x3, x2, #0x7ffffffffffff
    1fb8:	tbz	x2, #51, 2198 <__addtf3+0x2b0>
    1fbc:	cbz	x3, 23c4 <__addtf3+0x4dc>
    1fc0:	clz	x0, x3
    1fc4:	sub	w0, w0, #0xc
    1fc8:	neg	w2, w0
    1fcc:	lsl	x4, x3, x0
    1fd0:	lsl	x3, x9, x0
    1fd4:	lsr	x9, x9, x2
    1fd8:	orr	x2, x9, x4
    1fdc:	cmp	x1, w0, sxtw
    1fe0:	sxtw	x4, w0
    1fe4:	b.gt	23a4 <__addtf3+0x4bc>
    1fe8:	sub	w1, w0, w1
    1fec:	add	w0, w1, #0x1
    1ff0:	cmp	w0, #0x3f
    1ff4:	b.gt	2508 <__addtf3+0x620>
    1ff8:	mov	w1, #0x40                  	// #64
    1ffc:	sub	w1, w1, w0
    2000:	lsr	x4, x3, x0
    2004:	lsl	x3, x3, x1
    2008:	cmp	x3, #0x0
    200c:	lsl	x9, x2, x1
    2010:	cset	x1, ne  // ne = any
    2014:	orr	x9, x9, x4
    2018:	lsr	x2, x2, x0
    201c:	orr	x9, x9, x1
    2020:	orr	x8, x9, x2
    2024:	cbz	x8, 21ac <__addtf3+0x2c4>
    2028:	and	x0, x9, #0x7
    202c:	mov	x1, #0x0                   	// #0
    2030:	mov	w5, #0x1                   	// #1
    2034:	cbz	x0, 23f0 <__addtf3+0x508>
    2038:	and	x3, x15, #0xc00000
    203c:	cmp	x3, #0x400, lsl #12
    2040:	b.eq	2334 <__addtf3+0x44c>  // b.none
    2044:	cmp	x3, #0x800, lsl #12
    2048:	b.eq	2314 <__addtf3+0x42c>  // b.none
    204c:	cbz	x3, 2340 <__addtf3+0x458>
    2050:	and	x3, x2, #0x8000000000000
    2054:	mov	w0, #0x10                  	// #16
    2058:	cbz	w5, 2060 <__addtf3+0x178>
    205c:	orr	w0, w0, #0x8
    2060:	cbz	x3, 2378 <__addtf3+0x490>
    2064:	add	x1, x1, #0x1
    2068:	mov	x3, #0x7fff                	// #32767
    206c:	cmp	x1, x3
    2070:	b.eq	225c <__addtf3+0x374>  // b.none
    2074:	and	w1, w1, #0x7fff
    2078:	extr	x8, x2, x9, #3
    207c:	ubfx	x2, x2, #3, #48
    2080:	mov	x5, #0x0                   	// #0
    2084:	orr	w1, w1, w7, lsl #15
    2088:	bfxil	x5, x2, #0, #48
    208c:	fmov	d0, x8
    2090:	bfi	x5, x1, #48, #16
    2094:	fmov	v0.d[1], x5
    2098:	cbnz	w0, 22b8 <__addtf3+0x3d0>
    209c:	ldp	x29, x30, [sp], #48
    20a0:	ret
    20a4:	mov	x14, x5
    20a8:	b.eq	21c4 <__addtf3+0x2dc>  // b.none
    20ac:	cbnz	x8, 2448 <__addtf3+0x560>
    20b0:	orr	x1, x2, x9
    20b4:	cbz	x1, 2174 <__addtf3+0x28c>
    20b8:	cmn	w0, #0x1
    20bc:	b.eq	2864 <__addtf3+0x97c>  // b.none
    20c0:	mov	x1, #0x7fff                	// #32767
    20c4:	mvn	w0, w0
    20c8:	cmp	x3, x1
    20cc:	b.ne	245c <__addtf3+0x574>  // b.any
    20d0:	orr	x0, x4, x13
    20d4:	cbnz	x0, 27bc <__addtf3+0x8d4>
    20d8:	mov	x16, x14
    20dc:	nop
    20e0:	mov	x4, #0x0                   	// #0
    20e4:	fmov	d0, x4
    20e8:	lsl	x16, x16, #63
    20ec:	orr	x5, x16, #0x7fff000000000000
    20f0:	fmov	v0.d[1], x5
    20f4:	b	209c <__addtf3+0x1b4>
    20f8:	sub	w5, w8, w0
    20fc:	cmp	w5, #0x0
    2100:	b.le	22cc <__addtf3+0x3e4>
    2104:	cbz	x0, 220c <__addtf3+0x324>
    2108:	orr	x4, x4, #0x8000000000000
    210c:	mov	x0, #0x7fff                	// #32767
    2110:	cmp	x1, x0
    2114:	b.eq	235c <__addtf3+0x474>  // b.none
    2118:	cmp	w5, #0x74
    211c:	b.gt	24f0 <__addtf3+0x608>
    2120:	cmp	w5, #0x3f
    2124:	b.gt	25f0 <__addtf3+0x708>
    2128:	mov	w0, #0x40                  	// #64
    212c:	sub	w0, w0, w5
    2130:	lsr	x6, x13, x5
    2134:	lsl	x13, x13, x0
    2138:	cmp	x13, #0x0
    213c:	lsl	x0, x4, x0
    2140:	cset	x3, ne  // ne = any
    2144:	orr	x0, x0, x6
    2148:	lsr	x4, x4, x5
    214c:	orr	x0, x0, x3
    2150:	add	x2, x2, x4
    2154:	b	24fc <__addtf3+0x614>
    2158:	orr	x3, x4, x13
    215c:	cbz	x3, 24cc <__addtf3+0x5e4>
    2160:	subs	w0, w0, #0x1
    2164:	b.ne	1f64 <__addtf3+0x7c>  // b.any
    2168:	subs	x9, x9, x13
    216c:	sbc	x2, x2, x4
    2170:	b	1fb4 <__addtf3+0xcc>
    2174:	mov	x0, #0x7fff                	// #32767
    2178:	cmp	x3, x0
    217c:	b.eq	28b0 <__addtf3+0x9c8>  // b.none
    2180:	mov	w7, w11
    2184:	mov	x2, x4
    2188:	mov	x9, x13
    218c:	mov	x1, x3
    2190:	mov	x12, x5
    2194:	nop
    2198:	orr	x8, x9, x2
    219c:	and	x0, x9, #0x7
    21a0:	mov	w5, #0x0                   	// #0
    21a4:	cbnz	x1, 2034 <__addtf3+0x14c>
    21a8:	cbnz	x8, 2028 <__addtf3+0x140>
    21ac:	mov	x2, #0x0                   	// #0
    21b0:	mov	x1, #0x0                   	// #0
    21b4:	mov	w0, #0x0                   	// #0
    21b8:	and	x2, x2, #0xffffffffffff
    21bc:	and	w1, w1, #0x7fff
    21c0:	b	2080 <__addtf3+0x198>
    21c4:	add	x5, x8, #0x1
    21c8:	tst	x5, #0x7ffe
    21cc:	b.ne	249c <__addtf3+0x5b4>  // b.any
    21d0:	orr	x5, x2, x9
    21d4:	orr	x8, x4, x13
    21d8:	cbnz	x1, 265c <__addtf3+0x774>
    21dc:	cbz	x5, 2704 <__addtf3+0x81c>
    21e0:	cbz	x8, 2718 <__addtf3+0x830>
    21e4:	subs	x5, x9, x13
    21e8:	cmp	x9, x13
    21ec:	sbc	x3, x2, x4
    21f0:	tbz	x3, #51, 28e4 <__addtf3+0x9fc>
    21f4:	subs	x9, x13, x9
    21f8:	mov	w7, w11
    21fc:	sbc	x2, x4, x2
    2200:	mov	x12, x14
    2204:	orr	x8, x9, x2
    2208:	b	2024 <__addtf3+0x13c>
    220c:	orr	x0, x4, x13
    2210:	cbz	x0, 26e4 <__addtf3+0x7fc>
    2214:	subs	w5, w5, #0x1
    2218:	b.ne	210c <__addtf3+0x224>  // b.any
    221c:	adds	x9, x9, x13
    2220:	adc	x2, x4, x2
    2224:	nop
    2228:	tbz	x2, #51, 2198 <__addtf3+0x2b0>
    222c:	add	x1, x1, #0x1
    2230:	mov	x0, #0x7fff                	// #32767
    2234:	cmp	x1, x0
    2238:	b.eq	2724 <__addtf3+0x83c>  // b.none
    223c:	and	x0, x9, #0x1
    2240:	and	x3, x2, #0xfff7ffffffffffff
    2244:	orr	x9, x0, x9, lsr #1
    2248:	mov	w5, #0x0                   	// #0
    224c:	orr	x9, x9, x2, lsl #63
    2250:	lsr	x2, x3, #1
    2254:	and	x0, x9, #0x7
    2258:	b	2034 <__addtf3+0x14c>
    225c:	and	x3, x15, #0xc00000
    2260:	cbz	x3, 2298 <__addtf3+0x3b0>
    2264:	cmp	x3, #0x400, lsl #12
    2268:	b.eq	2290 <__addtf3+0x3a8>  // b.none
    226c:	cmp	x3, #0x800, lsl #12
    2270:	csel	w12, w12, wzr, eq  // eq = none
    2274:	cbnz	w12, 2298 <__addtf3+0x3b0>
    2278:	mov	w1, #0x14                  	// #20
    227c:	mov	x2, #0x1fffffffffffffff    	// #2305843009213693951
    2280:	orr	w0, w0, w1
    2284:	mov	x8, #0xffffffffffffffff    	// #-1
    2288:	mov	x1, #0x7ffe                	// #32766
    228c:	b	21b8 <__addtf3+0x2d0>
    2290:	cbnz	x12, 2278 <__addtf3+0x390>
    2294:	nop
    2298:	mov	w1, #0x14                  	// #20
    229c:	and	x16, x7, #0xff
    22a0:	orr	w0, w0, w1
    22a4:	mov	x4, #0x0                   	// #0
    22a8:	fmov	d0, x4
    22ac:	lsl	x16, x16, #63
    22b0:	orr	x5, x16, #0x7fff000000000000
    22b4:	fmov	v0.d[1], x5
    22b8:	str	q0, [sp, #16]
    22bc:	bl	3740 <__sfp_handle_exceptions>
    22c0:	ldr	q0, [sp, #16]
    22c4:	ldp	x29, x30, [sp], #48
    22c8:	ret
    22cc:	b.eq	240c <__addtf3+0x524>  // b.none
    22d0:	cbnz	x8, 2590 <__addtf3+0x6a8>
    22d4:	orr	x0, x2, x9
    22d8:	cbz	x0, 27fc <__addtf3+0x914>
    22dc:	cmn	w5, #0x1
    22e0:	b.eq	295c <__addtf3+0xa74>  // b.none
    22e4:	mov	x0, #0x7fff                	// #32767
    22e8:	mvn	w5, w5
    22ec:	cmp	x3, x0
    22f0:	b.ne	25a4 <__addtf3+0x6bc>  // b.any
    22f4:	orr	x0, x4, x13
    22f8:	cbz	x0, 20e0 <__addtf3+0x1f8>
    22fc:	lsr	x5, x4, #50
    2300:	mov	x9, x13
    2304:	eor	x5, x5, #0x1
    2308:	mov	x2, x4
    230c:	and	w5, w5, #0x1
    2310:	b	2370 <__addtf3+0x488>
    2314:	mov	w0, #0x10                  	// #16
    2318:	cbz	x12, 2324 <__addtf3+0x43c>
    231c:	adds	x9, x9, #0x8
    2320:	cinc	x2, x2, cs  // cs = hs, nlast
    2324:	and	x3, x2, #0x8000000000000
    2328:	cbz	w5, 2060 <__addtf3+0x178>
    232c:	orr	w0, w0, #0x8
    2330:	b	2060 <__addtf3+0x178>
    2334:	mov	w0, #0x10                  	// #16
    2338:	cbnz	x12, 2324 <__addtf3+0x43c>
    233c:	b	231c <__addtf3+0x434>
    2340:	and	x3, x9, #0xf
    2344:	mov	w0, #0x10                  	// #16
    2348:	cmp	x3, #0x4
    234c:	b.eq	2324 <__addtf3+0x43c>  // b.none
    2350:	adds	x9, x9, #0x4
    2354:	cinc	x2, x2, cs  // cs = hs, nlast
    2358:	b	2324 <__addtf3+0x43c>
    235c:	orr	x0, x2, x9
    2360:	cbz	x0, 20e0 <__addtf3+0x1f8>
    2364:	lsr	x5, x2, #50
    2368:	eor	x5, x5, #0x1
    236c:	and	w5, w5, #0x1
    2370:	mov	w0, w5
    2374:	mov	x1, #0x7fff                	// #32767
    2378:	mov	x3, #0x7fff                	// #32767
    237c:	extr	x8, x2, x9, #3
    2380:	cmp	x1, x3
    2384:	lsr	x2, x2, #3
    2388:	b.ne	21b8 <__addtf3+0x2d0>  // b.any
    238c:	orr	x1, x8, x2
    2390:	cbz	x1, 29fc <__addtf3+0xb14>
    2394:	orr	x2, x2, #0x800000000000
    2398:	mov	w1, #0x7fff                	// #32767
    239c:	and	x2, x2, #0xffffffffffff
    23a0:	b	2080 <__addtf3+0x198>
    23a4:	mov	x9, x3
    23a8:	and	x2, x2, #0xfff7ffffffffffff
    23ac:	sub	x1, x1, x4
    23b0:	orr	x8, x9, x2
    23b4:	and	x0, x9, #0x7
    23b8:	mov	w5, #0x0                   	// #0
    23bc:	cbz	x1, 21a8 <__addtf3+0x2c0>
    23c0:	b	2034 <__addtf3+0x14c>
    23c4:	clz	x2, x9
    23c8:	add	w0, w2, #0x34
    23cc:	cmp	w0, #0x3f
    23d0:	b.le	1fc8 <__addtf3+0xe0>
    23d4:	sub	w2, w2, #0xc
    23d8:	lsl	x2, x9, x2
    23dc:	b	1fdc <__addtf3+0xf4>
    23e0:	orr	x4, x4, x13
    23e4:	cmp	x4, #0x0
    23e8:	cset	x3, ne  // ne = any
    23ec:	b	1fac <__addtf3+0xc4>
    23f0:	and	x3, x2, #0x8000000000000
    23f4:	mov	w0, #0x0                   	// #0
    23f8:	cbz	w5, 2060 <__addtf3+0x178>
    23fc:	mov	w0, #0x0                   	// #0
    2400:	tbz	w15, #11, 2060 <__addtf3+0x178>
    2404:	orr	w0, w0, #0x8
    2408:	b	2060 <__addtf3+0x178>
    240c:	add	x0, x8, #0x1
    2410:	tst	x0, #0x7ffe
    2414:	b.ne	261c <__addtf3+0x734>  // b.any
    2418:	orr	x0, x2, x9
    241c:	cbnz	x8, 27d8 <__addtf3+0x8f0>
    2420:	orr	x8, x4, x13
    2424:	cbz	x0, 282c <__addtf3+0x944>
    2428:	cbz	x8, 2718 <__addtf3+0x830>
    242c:	adds	x9, x9, x13
    2430:	adc	x2, x4, x2
    2434:	tbz	x2, #51, 2204 <__addtf3+0x31c>
    2438:	and	x2, x2, #0xfff7ffffffffffff
    243c:	and	x0, x9, #0x7
    2440:	mov	x1, #0x1                   	// #1
    2444:	b	2034 <__addtf3+0x14c>
    2448:	mov	x1, #0x7fff                	// #32767
    244c:	neg	w0, w0
    2450:	orr	x2, x2, #0x8000000000000
    2454:	cmp	x3, x1
    2458:	b.eq	20d0 <__addtf3+0x1e8>  // b.none
    245c:	cmp	w0, #0x74
    2460:	b.gt	256c <__addtf3+0x684>
    2464:	cmp	w0, #0x3f
    2468:	b.gt	2788 <__addtf3+0x8a0>
    246c:	mov	w1, #0x40                  	// #64
    2470:	sub	w1, w1, w0
    2474:	lsr	x5, x9, x0
    2478:	lsl	x9, x9, x1
    247c:	cmp	x9, #0x0
    2480:	lsl	x9, x2, x1
    2484:	cset	x1, ne  // ne = any
    2488:	orr	x9, x9, x5
    248c:	lsr	x0, x2, x0
    2490:	orr	x9, x9, x1
    2494:	sub	x4, x4, x0
    2498:	b	2578 <__addtf3+0x690>
    249c:	subs	x5, x9, x13
    24a0:	cmp	x9, x13
    24a4:	sbc	x3, x2, x4
    24a8:	tbnz	x3, #51, 2644 <__addtf3+0x75c>
    24ac:	orr	x8, x5, x3
    24b0:	cbnz	x8, 2770 <__addtf3+0x888>
    24b4:	and	x15, x15, #0xc00000
    24b8:	mov	x2, #0x0                   	// #0
    24bc:	cmp	x15, #0x800, lsl #12
    24c0:	mov	x1, #0x0                   	// #0
    24c4:	cset	w7, eq  // eq = none
    24c8:	b	21b8 <__addtf3+0x2d0>
    24cc:	mov	x0, #0x7fff                	// #32767
    24d0:	cmp	x8, x0
    24d4:	b.ne	2198 <__addtf3+0x2b0>  // b.any
    24d8:	orr	x0, x2, x9
    24dc:	cbnz	x0, 2364 <__addtf3+0x47c>
    24e0:	mov	x2, #0x0                   	// #0
    24e4:	mov	x8, #0x0                   	// #0
    24e8:	mov	w0, #0x0                   	// #0
    24ec:	b	238c <__addtf3+0x4a4>
    24f0:	orr	x4, x4, x13
    24f4:	cmp	x4, #0x0
    24f8:	cset	x0, ne  // ne = any
    24fc:	adds	x9, x0, x9
    2500:	cinc	x2, x2, cs  // cs = hs, nlast
    2504:	b	2228 <__addtf3+0x340>
    2508:	mov	w4, #0x80                  	// #128
    250c:	sub	w4, w4, w0
    2510:	cmp	w0, #0x40
    2514:	sub	w9, w1, #0x3f
    2518:	lsl	x0, x2, x4
    251c:	orr	x0, x3, x0
    2520:	csel	x3, x0, x3, ne  // ne = any
    2524:	lsr	x9, x2, x9
    2528:	cmp	x3, #0x0
    252c:	mov	x2, #0x0                   	// #0
    2530:	cset	x0, ne  // ne = any
    2534:	orr	x9, x0, x9
    2538:	mov	x8, x9
    253c:	b	2024 <__addtf3+0x13c>
    2540:	mov	w5, #0x80                  	// #128
    2544:	sub	w5, w5, w0
    2548:	subs	w0, w0, #0x40
    254c:	lsl	x5, x4, x5
    2550:	orr	x5, x13, x5
    2554:	csel	x13, x5, x13, ne  // ne = any
    2558:	lsr	x4, x4, x0
    255c:	cmp	x13, #0x0
    2560:	cset	x3, ne  // ne = any
    2564:	orr	x3, x3, x4
    2568:	b	1fac <__addtf3+0xc4>
    256c:	orr	x2, x2, x9
    2570:	cmp	x2, #0x0
    2574:	cset	x9, ne  // ne = any
    2578:	subs	x9, x13, x9
    257c:	mov	w7, w11
    2580:	sbc	x2, x4, xzr
    2584:	mov	x1, x3
    2588:	mov	x12, x14
    258c:	b	1fb4 <__addtf3+0xcc>
    2590:	mov	x0, #0x7fff                	// #32767
    2594:	neg	w5, w5
    2598:	orr	x2, x2, #0x8000000000000
    259c:	cmp	x3, x0
    25a0:	b.eq	22f4 <__addtf3+0x40c>  // b.none
    25a4:	cmp	w5, #0x74
    25a8:	b.gt	2778 <__addtf3+0x890>
    25ac:	cmp	w5, #0x3f
    25b0:	b.gt	2838 <__addtf3+0x950>
    25b4:	mov	w1, #0x40                  	// #64
    25b8:	sub	w1, w1, w5
    25bc:	lsr	x6, x9, x5
    25c0:	lsl	x9, x9, x1
    25c4:	cmp	x9, #0x0
    25c8:	cset	x0, ne  // ne = any
    25cc:	lsl	x9, x2, x1
    25d0:	orr	x9, x9, x6
    25d4:	lsr	x5, x2, x5
    25d8:	orr	x9, x9, x0
    25dc:	add	x4, x4, x5
    25e0:	adds	x9, x9, x13
    25e4:	mov	x1, x3
    25e8:	cinc	x2, x4, cs  // cs = hs, nlast
    25ec:	b	2228 <__addtf3+0x340>
    25f0:	mov	w0, #0x80                  	// #128
    25f4:	sub	w0, w0, w5
    25f8:	subs	w5, w5, #0x40
    25fc:	lsl	x0, x4, x0
    2600:	orr	x0, x13, x0
    2604:	csel	x13, x0, x13, ne  // ne = any
    2608:	lsr	x4, x4, x5
    260c:	cmp	x13, #0x0
    2610:	cset	x0, ne  // ne = any
    2614:	orr	x0, x0, x4
    2618:	b	24fc <__addtf3+0x614>
    261c:	mov	x1, #0x7fff                	// #32767
    2620:	cmp	x0, x1
    2624:	b.eq	2880 <__addtf3+0x998>  // b.none
    2628:	adds	x9, x9, x13
    262c:	mov	x1, x0
    2630:	adc	x2, x4, x2
    2634:	ubfx	x0, x9, #1, #3
    2638:	extr	x9, x2, x9, #1
    263c:	lsr	x2, x2, #1
    2640:	b	2034 <__addtf3+0x14c>
    2644:	cmp	x13, x9
    2648:	mov	w7, w11
    264c:	sbc	x3, x4, x2
    2650:	sub	x9, x13, x9
    2654:	mov	x12, x14
    2658:	b	1fbc <__addtf3+0xd4>
    265c:	mov	x12, #0x7fff                	// #32767
    2660:	cmp	x1, x12
    2664:	b.eq	2690 <__addtf3+0x7a8>  // b.none
    2668:	cmp	x3, x12
    266c:	b.eq	28c0 <__addtf3+0x9d8>  // b.none
    2670:	cbnz	x5, 26a8 <__addtf3+0x7c0>
    2674:	mov	w5, w0
    2678:	cbnz	x8, 29a0 <__addtf3+0xab8>
    267c:	mov	w7, #0x0                   	// #0
    2680:	mov	x2, #0xffffffffffff        	// #281474976710655
    2684:	mov	w0, #0x1                   	// #1
    2688:	mov	x8, #0xffffffffffffffff    	// #-1
    268c:	b	2394 <__addtf3+0x4ac>
    2690:	cbz	x5, 29bc <__addtf3+0xad4>
    2694:	lsr	x0, x2, #50
    2698:	cmp	x3, x1
    269c:	eor	x0, x0, #0x1
    26a0:	and	w0, w0, #0x1
    26a4:	b.eq	28c0 <__addtf3+0x9d8>  // b.none
    26a8:	cbz	x8, 28dc <__addtf3+0x9f4>
    26ac:	bfi	x6, x2, #61, #3
    26b0:	lsr	x3, x2, #3
    26b4:	tbz	x2, #50, 26d0 <__addtf3+0x7e8>
    26b8:	lsr	x1, x4, #3
    26bc:	tbnz	x4, #50, 26d0 <__addtf3+0x7e8>
    26c0:	mov	x6, x10
    26c4:	mov	w7, w11
    26c8:	bfi	x6, x4, #61, #3
    26cc:	mov	x3, x1
    26d0:	extr	x2, x3, x6, #61
    26d4:	bfi	x6, x2, #61, #3
    26d8:	lsr	x2, x2, #3
    26dc:	mov	x8, x6
    26e0:	b	238c <__addtf3+0x4a4>
    26e4:	mov	x0, #0x7fff                	// #32767
    26e8:	cmp	x8, x0
    26ec:	b.ne	2198 <__addtf3+0x2b0>  // b.any
    26f0:	orr	x0, x2, x9
    26f4:	cbz	x0, 24e0 <__addtf3+0x5f8>
    26f8:	lsr	x5, x2, #50
    26fc:	eor	w5, w5, #0x1
    2700:	b	2370 <__addtf3+0x488>
    2704:	cbz	x8, 2818 <__addtf3+0x930>
    2708:	mov	w7, w11
    270c:	mov	x2, x4
    2710:	mov	x9, x13
    2714:	mov	x12, x14
    2718:	mov	x1, #0x0                   	// #0
    271c:	mov	x3, #0x0                   	// #0
    2720:	b	23fc <__addtf3+0x514>
    2724:	ands	x3, x15, #0xc00000
    2728:	b.eq	27b4 <__addtf3+0x8cc>  // b.none
    272c:	cmp	x3, #0x400, lsl #12
    2730:	eor	w0, w7, #0x1
    2734:	cset	w1, eq  // eq = none
    2738:	tst	w1, w0
    273c:	b.ne	29d8 <__addtf3+0xaf0>  // b.any
    2740:	cmp	x3, #0x800, lsl #12
    2744:	b.eq	2984 <__addtf3+0xa9c>  // b.none
    2748:	cmp	x3, #0x400, lsl #12
    274c:	mov	w0, #0x14                  	// #20
    2750:	b.ne	2260 <__addtf3+0x378>  // b.any
    2754:	mov	x2, #0xffffffffffffffff    	// #-1
    2758:	mov	x1, #0x7ffe                	// #32766
    275c:	mov	x9, x2
    2760:	mov	w5, #0x0                   	// #0
    2764:	mov	w0, #0x14                  	// #20
    2768:	cbnz	x12, 2324 <__addtf3+0x43c>
    276c:	b	231c <__addtf3+0x434>
    2770:	mov	x9, x5
    2774:	b	1fbc <__addtf3+0xd4>
    2778:	orr	x2, x2, x9
    277c:	cmp	x2, #0x0
    2780:	cset	x9, ne  // ne = any
    2784:	b	25e0 <__addtf3+0x6f8>
    2788:	mov	w1, #0x80                  	// #128
    278c:	sub	w1, w1, w0
    2790:	subs	w0, w0, #0x40
    2794:	lsl	x1, x2, x1
    2798:	orr	x1, x9, x1
    279c:	csel	x9, x1, x9, ne  // ne = any
    27a0:	lsr	x2, x2, x0
    27a4:	cmp	x9, #0x0
    27a8:	cset	x9, ne  // ne = any
    27ac:	orr	x9, x9, x2
    27b0:	b	2578 <__addtf3+0x690>
    27b4:	mov	w0, #0x14                  	// #20
    27b8:	b	22a4 <__addtf3+0x3bc>
    27bc:	lsr	x5, x4, #50
    27c0:	mov	w7, w11
    27c4:	eor	x5, x5, #0x1
    27c8:	mov	x9, x13
    27cc:	and	w5, w5, #0x1
    27d0:	mov	x2, x4
    27d4:	b	2370 <__addtf3+0x488>
    27d8:	mov	x8, #0x7fff                	// #32767
    27dc:	cmp	x1, x8
    27e0:	b.eq	2900 <__addtf3+0xa18>  // b.none
    27e4:	cmp	x3, x8
    27e8:	b.eq	2974 <__addtf3+0xa8c>  // b.none
    27ec:	cbnz	x0, 2918 <__addtf3+0xa30>
    27f0:	mov	x2, x4
    27f4:	mov	x9, x13
    27f8:	b	2370 <__addtf3+0x488>
    27fc:	mov	x0, #0x7fff                	// #32767
    2800:	cmp	x3, x0
    2804:	b.eq	29b0 <__addtf3+0xac8>  // b.none
    2808:	mov	x2, x4
    280c:	mov	x9, x13
    2810:	mov	x1, x3
    2814:	b	2198 <__addtf3+0x2b0>
    2818:	and	x15, x15, #0xc00000
    281c:	mov	x2, #0x0                   	// #0
    2820:	cmp	x15, #0x800, lsl #12
    2824:	cset	w7, eq  // eq = none
    2828:	b	21b8 <__addtf3+0x2d0>
    282c:	mov	x2, x4
    2830:	mov	x9, x13
    2834:	b	2024 <__addtf3+0x13c>
    2838:	mov	w0, #0x80                  	// #128
    283c:	sub	w0, w0, w5
    2840:	subs	w5, w5, #0x40
    2844:	lsl	x0, x2, x0
    2848:	orr	x0, x9, x0
    284c:	csel	x9, x0, x9, ne  // ne = any
    2850:	lsr	x2, x2, x5
    2854:	cmp	x9, #0x0
    2858:	cset	x9, ne  // ne = any
    285c:	orr	x9, x9, x2
    2860:	b	25e0 <__addtf3+0x6f8>
    2864:	cmp	x13, x9
    2868:	mov	w7, w11
    286c:	sbc	x2, x4, x2
    2870:	sub	x9, x13, x9
    2874:	mov	x1, x3
    2878:	mov	x12, x5
    287c:	b	1fb4 <__addtf3+0xcc>
    2880:	ands	x3, x15, #0xc00000
    2884:	b.eq	27b4 <__addtf3+0x8cc>  // b.none
    2888:	cmp	x3, #0x400, lsl #12
    288c:	eor	w0, w7, #0x1
    2890:	csel	w0, w0, wzr, eq  // eq = none
    2894:	cbnz	w0, 29d8 <__addtf3+0xaf0>
    2898:	cmp	x3, #0x800, lsl #12
    289c:	b.ne	2748 <__addtf3+0x860>  // b.any
    28a0:	cbz	x12, 2988 <__addtf3+0xaa0>
    28a4:	mov	w0, #0x14                  	// #20
    28a8:	mov	x16, #0x1                   	// #1
    28ac:	b	22a4 <__addtf3+0x3bc>
    28b0:	orr	x0, x4, x13
    28b4:	cbnz	x0, 27bc <__addtf3+0x8d4>
    28b8:	mov	w7, w11
    28bc:	b	24e0 <__addtf3+0x5f8>
    28c0:	cbz	x8, 29cc <__addtf3+0xae4>
    28c4:	tst	x4, #0x4000000000000
    28c8:	csinc	w0, w0, wzr, ne  // ne = any
    28cc:	cbnz	x5, 26ac <__addtf3+0x7c4>
    28d0:	mov	w7, w11
    28d4:	mov	x2, x4
    28d8:	mov	x9, x13
    28dc:	mov	w5, w0
    28e0:	b	2370 <__addtf3+0x488>
    28e4:	orr	x8, x5, x3
    28e8:	cbz	x8, 2818 <__addtf3+0x930>
    28ec:	and	x0, x5, #0x7
    28f0:	mov	x9, x5
    28f4:	mov	x2, x3
    28f8:	mov	w5, #0x1                   	// #1
    28fc:	b	2034 <__addtf3+0x14c>
    2900:	cbz	x0, 296c <__addtf3+0xa84>
    2904:	lsr	x5, x2, #50
    2908:	cmp	x3, x1
    290c:	eor	x5, x5, #0x1
    2910:	and	w5, w5, #0x1
    2914:	b.eq	29e4 <__addtf3+0xafc>  // b.none
    2918:	orr	x13, x4, x13
    291c:	cbz	x13, 2370 <__addtf3+0x488>
    2920:	bfi	x6, x2, #61, #3
    2924:	lsr	x0, x2, #3
    2928:	tbz	x2, #50, 2944 <__addtf3+0xa5c>
    292c:	lsr	x1, x4, #3
    2930:	tbnz	x4, #50, 2944 <__addtf3+0xa5c>
    2934:	and	x6, x10, #0x1fffffffffffffff
    2938:	mov	w7, w11
    293c:	orr	x6, x6, x4, lsl #61
    2940:	mov	x0, x1
    2944:	extr	x2, x0, x6, #61
    2948:	mov	w0, w5
    294c:	bfi	x6, x2, #61, #3
    2950:	lsr	x2, x2, #3
    2954:	mov	x8, x6
    2958:	b	238c <__addtf3+0x4a4>
    295c:	adds	x9, x9, x13
    2960:	mov	x1, x3
    2964:	adc	x2, x4, x2
    2968:	b	2228 <__addtf3+0x340>
    296c:	cmp	x3, x1
    2970:	b.ne	27f0 <__addtf3+0x908>  // b.any
    2974:	orr	x1, x4, x13
    2978:	cbnz	x1, 29ec <__addtf3+0xb04>
    297c:	cbz	x0, 24e0 <__addtf3+0x5f8>
    2980:	b	2370 <__addtf3+0x488>
    2984:	cbnz	x16, 28a4 <__addtf3+0x9bc>
    2988:	mov	x2, #0xffffffffffffffff    	// #-1
    298c:	mov	w7, #0x0                   	// #0
    2990:	mov	x9, x2
    2994:	mov	x1, #0x7ffe                	// #32766
    2998:	mov	w0, #0x14                  	// #20
    299c:	b	2064 <__addtf3+0x17c>
    29a0:	mov	w7, w11
    29a4:	mov	x2, x4
    29a8:	mov	x9, x13
    29ac:	b	2370 <__addtf3+0x488>
    29b0:	orr	x0, x4, x13
    29b4:	cbz	x0, 24e0 <__addtf3+0x5f8>
    29b8:	b	22fc <__addtf3+0x414>
    29bc:	cmp	x3, x1
    29c0:	b.eq	28c0 <__addtf3+0x9d8>  // b.none
    29c4:	mov	w5, #0x0                   	// #0
    29c8:	b	2678 <__addtf3+0x790>
    29cc:	cbnz	x5, 28dc <__addtf3+0x9f4>
    29d0:	mov	w5, w0
    29d4:	b	2678 <__addtf3+0x790>
    29d8:	mov	w0, #0x14                  	// #20
    29dc:	mov	x16, #0x0                   	// #0
    29e0:	b	22a4 <__addtf3+0x3bc>
    29e4:	orr	x1, x4, x13
    29e8:	cbz	x1, 2370 <__addtf3+0x488>
    29ec:	tst	x4, #0x4000000000000
    29f0:	csinc	w5, w5, wzr, ne  // ne = any
    29f4:	cbnz	x0, 2920 <__addtf3+0xa38>
    29f8:	b	27f0 <__addtf3+0x908>
    29fc:	mov	x8, #0x0                   	// #0
    2a00:	mov	w1, #0x7fff                	// #32767
    2a04:	mov	x2, #0x0                   	// #0
    2a08:	b	2080 <__addtf3+0x198>
    2a0c:	nop

0000000000002a10 <__eqtf2>:
    2a10:	stp	x29, x30, [sp, #-48]!
    2a14:	mov	x29, sp
    2a18:	str	q0, [sp, #16]
    2a1c:	str	q1, [sp, #32]
    2a20:	ldp	x6, x1, [sp, #16]
    2a24:	ldp	x7, x0, [sp, #32]
    2a28:	mrs	x2, fpcr
    2a2c:	ubfx	x4, x1, #48, #15
    2a30:	lsr	x2, x1, #63
    2a34:	lsr	x3, x0, #63
    2a38:	ubfx	x9, x0, #0, #48
    2a3c:	mov	x5, #0x7fff                	// #32767
    2a40:	mov	x10, x6
    2a44:	cmp	x4, x5
    2a48:	and	w2, w2, #0xff
    2a4c:	ubfx	x1, x1, #0, #48
    2a50:	and	w3, w3, #0xff
    2a54:	ubfx	x0, x0, #48, #15
    2a58:	b.eq	2a8c <__eqtf2+0x7c>  // b.none
    2a5c:	cmp	x0, x5
    2a60:	b.eq	2a78 <__eqtf2+0x68>  // b.none
    2a64:	cmp	x4, x0
    2a68:	mov	w0, #0x1                   	// #1
    2a6c:	b.eq	2aa4 <__eqtf2+0x94>  // b.none
    2a70:	ldp	x29, x30, [sp], #48
    2a74:	ret
    2a78:	orr	x8, x9, x7
    2a7c:	cbnz	x8, 2b08 <__eqtf2+0xf8>
    2a80:	mov	w0, #0x1                   	// #1
    2a84:	ldp	x29, x30, [sp], #48
    2a88:	ret
    2a8c:	orr	x5, x1, x6
    2a90:	cbnz	x5, 2ad8 <__eqtf2+0xc8>
    2a94:	cmp	x0, x4
    2a98:	b.ne	2a80 <__eqtf2+0x70>  // b.any
    2a9c:	orr	x8, x9, x7
    2aa0:	cbnz	x8, 2b08 <__eqtf2+0xf8>
    2aa4:	cmp	x1, x9
    2aa8:	mov	w0, #0x1                   	// #1
    2aac:	ccmp	x6, x7, #0x0, eq  // eq = none
    2ab0:	b.ne	2a70 <__eqtf2+0x60>  // b.any
    2ab4:	cmp	w2, w3
    2ab8:	mov	w0, #0x0                   	// #0
    2abc:	b.eq	2a70 <__eqtf2+0x60>  // b.none
    2ac0:	mov	w0, #0x1                   	// #1
    2ac4:	cbnz	x4, 2a70 <__eqtf2+0x60>
    2ac8:	orr	x1, x1, x10
    2acc:	cmp	x1, #0x0
    2ad0:	cset	w0, ne  // ne = any
    2ad4:	b	2a70 <__eqtf2+0x60>
    2ad8:	tst	x1, #0x800000000000
    2adc:	b.ne	2af4 <__eqtf2+0xe4>  // b.any
    2ae0:	mov	w0, #0x1                   	// #1
    2ae4:	bl	3740 <__sfp_handle_exceptions>
    2ae8:	mov	w0, #0x1                   	// #1
    2aec:	ldp	x29, x30, [sp], #48
    2af0:	ret
    2af4:	cmp	x0, x4
    2af8:	mov	w0, #0x1                   	// #1
    2afc:	b.ne	2a70 <__eqtf2+0x60>  // b.any
    2b00:	orr	x8, x9, x7
    2b04:	cbz	x8, 2a70 <__eqtf2+0x60>
    2b08:	tst	x9, #0x800000000000
    2b0c:	b.eq	2ae0 <__eqtf2+0xd0>  // b.none
    2b10:	b	2a80 <__eqtf2+0x70>
    2b14:	nop

0000000000002b18 <__getf2>:
    2b18:	stp	x29, x30, [sp, #-48]!
    2b1c:	mov	x29, sp
    2b20:	str	q0, [sp, #16]
    2b24:	str	q1, [sp, #32]
    2b28:	ldp	x8, x1, [sp, #16]
    2b2c:	ldp	x9, x0, [sp, #32]
    2b30:	mrs	x2, fpcr
    2b34:	ubfx	x4, x1, #48, #15
    2b38:	ubfx	x10, x1, #0, #48
    2b3c:	lsr	x2, x1, #63
    2b40:	mov	x7, #0x7fff                	// #32767
    2b44:	mov	x5, x8
    2b48:	cmp	x4, x7
    2b4c:	ubfx	x11, x0, #0, #48
    2b50:	ubfx	x6, x0, #48, #15
    2b54:	lsr	x1, x0, #63
    2b58:	mov	x3, x9
    2b5c:	b.eq	2b98 <__getf2+0x80>  // b.none
    2b60:	cmp	x6, x7
    2b64:	b.eq	2ba8 <__getf2+0x90>  // b.none
    2b68:	cbnz	x4, 2bd0 <__getf2+0xb8>
    2b6c:	orr	x5, x10, x8
    2b70:	cmp	x5, #0x0
    2b74:	cset	w0, eq  // eq = none
    2b78:	cbnz	x6, 2b84 <__getf2+0x6c>
    2b7c:	orr	x3, x11, x9
    2b80:	cbz	x3, 2bf0 <__getf2+0xd8>
    2b84:	cbz	w0, 2bb4 <__getf2+0x9c>
    2b88:	cmp	x1, #0x0
    2b8c:	csinv	w0, w0, wzr, ne  // ne = any
    2b90:	ldp	x29, x30, [sp], #48
    2b94:	ret
    2b98:	orr	x0, x10, x8
    2b9c:	cbnz	x0, 2bfc <__getf2+0xe4>
    2ba0:	cmp	x6, x4
    2ba4:	b.ne	2bd0 <__getf2+0xb8>  // b.any
    2ba8:	orr	x3, x11, x3
    2bac:	cbnz	x3, 2bfc <__getf2+0xe4>
    2bb0:	cbz	x4, 2be0 <__getf2+0xc8>
    2bb4:	cmp	x2, x1
    2bb8:	b.eq	2c10 <__getf2+0xf8>  // b.none
    2bbc:	cmp	x2, #0x0
    2bc0:	mov	w0, #0xffffffff            	// #-1
    2bc4:	cneg	w0, w0, eq  // eq = none
    2bc8:	ldp	x29, x30, [sp], #48
    2bcc:	ret
    2bd0:	cbnz	x6, 2bb4 <__getf2+0x9c>
    2bd4:	orr	x3, x11, x3
    2bd8:	cbnz	x3, 2bb4 <__getf2+0x9c>
    2bdc:	b	2bbc <__getf2+0xa4>
    2be0:	orr	x5, x10, x5
    2be4:	cmp	x5, #0x0
    2be8:	cset	w0, eq  // eq = none
    2bec:	b	2b84 <__getf2+0x6c>
    2bf0:	mov	w0, #0x0                   	// #0
    2bf4:	cbz	x5, 2b90 <__getf2+0x78>
    2bf8:	b	2bbc <__getf2+0xa4>
    2bfc:	mov	w0, #0x1                   	// #1
    2c00:	bl	3740 <__sfp_handle_exceptions>
    2c04:	mov	w0, #0xfffffffe            	// #-2
    2c08:	ldp	x29, x30, [sp], #48
    2c0c:	ret
    2c10:	cmp	x4, x6
    2c14:	b.gt	2bbc <__getf2+0xa4>
    2c18:	b.lt	2c50 <__getf2+0x138>  // b.tstop
    2c1c:	cmp	x10, x11
    2c20:	b.hi	2bbc <__getf2+0xa4>  // b.pmore
    2c24:	cset	w0, eq  // eq = none
    2c28:	cmp	w0, #0x0
    2c2c:	ccmp	x8, x9, #0x0, ne  // ne = any
    2c30:	b.hi	2bbc <__getf2+0xa4>  // b.pmore
    2c34:	cmp	x10, x11
    2c38:	b.cc	2c50 <__getf2+0x138>  // b.lo, b.ul, b.last
    2c3c:	cmp	w0, #0x0
    2c40:	mov	w0, #0x0                   	// #0
    2c44:	ccmp	x8, x9, #0x2, ne  // ne = any
    2c48:	b.cs	2b90 <__getf2+0x78>  // b.hs, b.nlast
    2c4c:	nop
    2c50:	cmp	x2, #0x0
    2c54:	mov	w0, #0x1                   	// #1
    2c58:	cneg	w0, w0, eq  // eq = none
    2c5c:	b	2b90 <__getf2+0x78>

0000000000002c60 <__letf2>:
    2c60:	stp	x29, x30, [sp, #-48]!
    2c64:	mov	x29, sp
    2c68:	str	q0, [sp, #16]
    2c6c:	str	q1, [sp, #32]
    2c70:	ldp	x8, x1, [sp, #16]
    2c74:	ldp	x9, x0, [sp, #32]
    2c78:	mrs	x2, fpcr
    2c7c:	ubfx	x4, x1, #48, #15
    2c80:	ubfx	x10, x1, #0, #48
    2c84:	lsr	x2, x1, #63
    2c88:	mov	x5, #0x7fff                	// #32767
    2c8c:	mov	x6, x8
    2c90:	cmp	x4, x5
    2c94:	ubfx	x11, x0, #0, #48
    2c98:	ubfx	x7, x0, #48, #15
    2c9c:	lsr	x1, x0, #63
    2ca0:	mov	x3, x9
    2ca4:	b.eq	2cdc <__letf2+0x7c>  // b.none
    2ca8:	cmp	x7, x5
    2cac:	b.eq	2cec <__letf2+0x8c>  // b.none
    2cb0:	cbnz	x4, 2d18 <__letf2+0xb8>
    2cb4:	orr	x6, x10, x8
    2cb8:	cmp	x6, #0x0
    2cbc:	cset	w0, eq  // eq = none
    2cc0:	cbnz	x7, 2d04 <__letf2+0xa4>
    2cc4:	orr	x3, x11, x9
    2cc8:	cbnz	x3, 2d04 <__letf2+0xa4>
    2ccc:	mov	w0, #0x0                   	// #0
    2cd0:	cbnz	x6, 2d2c <__letf2+0xcc>
    2cd4:	ldp	x29, x30, [sp], #48
    2cd8:	ret
    2cdc:	orr	x0, x10, x8
    2ce0:	cbnz	x0, 2d40 <__letf2+0xe0>
    2ce4:	cmp	x7, x4
    2ce8:	b.ne	2d18 <__letf2+0xb8>  // b.any
    2cec:	orr	x3, x11, x3
    2cf0:	cbnz	x3, 2d40 <__letf2+0xe0>
    2cf4:	cbnz	x4, 2d24 <__letf2+0xc4>
    2cf8:	orr	x6, x10, x6
    2cfc:	cmp	x6, #0x0
    2d00:	cset	w0, eq  // eq = none
    2d04:	cbz	w0, 2d24 <__letf2+0xc4>
    2d08:	cmp	x1, #0x0
    2d0c:	csinv	w0, w0, wzr, ne  // ne = any
    2d10:	ldp	x29, x30, [sp], #48
    2d14:	ret
    2d18:	cbnz	x7, 2d24 <__letf2+0xc4>
    2d1c:	orr	x3, x11, x3
    2d20:	cbz	x3, 2d2c <__letf2+0xcc>
    2d24:	cmp	x2, x1
    2d28:	b.eq	2d54 <__letf2+0xf4>  // b.none
    2d2c:	cmp	x2, #0x0
    2d30:	mov	w0, #0xffffffff            	// #-1
    2d34:	cneg	w0, w0, eq  // eq = none
    2d38:	ldp	x29, x30, [sp], #48
    2d3c:	ret
    2d40:	mov	w0, #0x1                   	// #1
    2d44:	bl	3740 <__sfp_handle_exceptions>
    2d48:	mov	w0, #0x2                   	// #2
    2d4c:	ldp	x29, x30, [sp], #48
    2d50:	ret
    2d54:	cmp	x4, x7
    2d58:	b.gt	2d2c <__letf2+0xcc>
    2d5c:	b.lt	2d90 <__letf2+0x130>  // b.tstop
    2d60:	cmp	x10, x11
    2d64:	b.hi	2d2c <__letf2+0xcc>  // b.pmore
    2d68:	cset	w0, eq  // eq = none
    2d6c:	cmp	w0, #0x0
    2d70:	ccmp	x8, x9, #0x0, ne  // ne = any
    2d74:	b.hi	2d2c <__letf2+0xcc>  // b.pmore
    2d78:	cmp	x10, x11
    2d7c:	b.cc	2d90 <__letf2+0x130>  // b.lo, b.ul, b.last
    2d80:	cmp	w0, #0x0
    2d84:	mov	w0, #0x0                   	// #0
    2d88:	ccmp	x8, x9, #0x2, ne  // ne = any
    2d8c:	b.cs	2cd4 <__letf2+0x74>  // b.hs, b.nlast
    2d90:	cmp	x2, #0x0
    2d94:	mov	w0, #0x1                   	// #1
    2d98:	cneg	w0, w0, eq  // eq = none
    2d9c:	b	2cd4 <__letf2+0x74>

0000000000002da0 <__multf3>:
    2da0:	stp	x29, x30, [sp, #-80]!
    2da4:	mov	x29, sp
    2da8:	str	q0, [sp, #48]
    2dac:	str	q1, [sp, #64]
    2db0:	ldp	x1, x0, [sp, #48]
    2db4:	ldp	x6, x2, [sp, #64]
    2db8:	mrs	x11, fpcr
    2dbc:	lsr	x3, x0, #63
    2dc0:	ubfx	x7, x0, #0, #48
    2dc4:	and	w12, w3, #0xff
    2dc8:	mov	x14, x3
    2dcc:	ubfx	x3, x0, #48, #15
    2dd0:	cbz	w3, 3178 <__multf3+0x3d8>
    2dd4:	mov	w4, #0x7fff                	// #32767
    2dd8:	cmp	w3, w4
    2ddc:	b.eq	321c <__multf3+0x47c>  // b.none
    2de0:	and	x3, x3, #0xffff
    2de4:	extr	x4, x7, x1, #61
    2de8:	mov	x18, #0xffffffffffffc001    	// #-16383
    2dec:	orr	x7, x4, #0x8000000000000
    2df0:	add	x3, x3, x18
    2df4:	lsl	x5, x1, #3
    2df8:	mov	x16, #0x0                   	// #0
    2dfc:	mov	x1, #0x0                   	// #0
    2e00:	mov	w0, #0x0                   	// #0
    2e04:	lsr	x8, x2, #63
    2e08:	ubfx	x4, x2, #0, #48
    2e0c:	and	w15, w8, #0xff
    2e10:	mov	x13, x8
    2e14:	ubfx	x9, x2, #48, #15
    2e18:	cbz	w9, 31d8 <__multf3+0x438>
    2e1c:	mov	w8, #0x7fff                	// #32767
    2e20:	cmp	w9, w8
    2e24:	b.eq	2ea8 <__multf3+0x108>  // b.none
    2e28:	and	x9, x9, #0xffff
    2e2c:	mov	x17, #0xffffffffffffc001    	// #-16383
    2e30:	add	x9, x9, x17
    2e34:	extr	x2, x4, x6, #61
    2e38:	add	x9, x9, x3
    2e3c:	lsl	x6, x6, #3
    2e40:	orr	x4, x2, #0x8000000000000
    2e44:	mov	x2, #0x0                   	// #0
    2e48:	eor	w8, w12, w15
    2e4c:	cmp	x1, #0xa
    2e50:	and	w10, w8, #0xff
    2e54:	add	x3, x9, #0x1
    2e58:	and	x8, x8, #0xff
    2e5c:	b.le	2ee0 <__multf3+0x140>
    2e60:	cmp	x1, #0xb
    2e64:	b.eq	3578 <__multf3+0x7d8>  // b.none
    2e68:	mov	w15, w12
    2e6c:	mov	x13, x14
    2e70:	mov	w10, w15
    2e74:	cmp	x16, #0x2
    2e78:	b.eq	323c <__multf3+0x49c>  // b.none
    2e7c:	mov	x4, x7
    2e80:	mov	x6, x5
    2e84:	mov	x2, x16
    2e88:	mov	x8, x13
    2e8c:	cmp	x2, #0x3
    2e90:	b.ne	2efc <__multf3+0x15c>  // b.any
    2e94:	orr	x4, x4, #0x800000000000
    2e98:	mov	x5, x6
    2e9c:	and	x4, x4, #0xffffffffffff
    2ea0:	mov	w1, #0x7fff                	// #32767
    2ea4:	b	2f10 <__multf3+0x170>
    2ea8:	mov	x8, #0x7fff                	// #32767
    2eac:	orr	x2, x4, x6
    2eb0:	add	x9, x3, x8
    2eb4:	cbnz	x2, 2f34 <__multf3+0x194>
    2eb8:	eor	w8, w12, w15
    2ebc:	orr	x1, x1, #0x2
    2ec0:	and	w10, w8, #0xff
    2ec4:	cmp	x1, #0xa
    2ec8:	add	x3, x3, #0x8, lsl #12
    2ecc:	and	x8, x8, #0xff
    2ed0:	mov	x6, #0x0                   	// #0
    2ed4:	b.gt	34ec <__multf3+0x74c>
    2ed8:	mov	x4, #0x0                   	// #0
    2edc:	mov	x2, #0x2                   	// #2
    2ee0:	cmp	x1, #0x2
    2ee4:	b.gt	2f5c <__multf3+0x1bc>
    2ee8:	sub	x1, x1, #0x1
    2eec:	cmp	x1, #0x1
    2ef0:	b.hi	2f98 <__multf3+0x1f8>  // b.pmore
    2ef4:	cmp	x2, #0x2
    2ef8:	b.eq	323c <__multf3+0x49c>  // b.none
    2efc:	cmp	x2, #0x1
    2f00:	b.ne	30f8 <__multf3+0x358>  // b.any
    2f04:	mov	w1, #0x0                   	// #0
    2f08:	mov	x4, #0x0                   	// #0
    2f0c:	mov	x5, #0x0                   	// #0
    2f10:	mov	x3, #0x0                   	// #0
    2f14:	orr	w1, w1, w10, lsl #15
    2f18:	bfxil	x3, x4, #0, #48
    2f1c:	fmov	d0, x5
    2f20:	bfi	x3, x1, #48, #16
    2f24:	fmov	v0.d[1], x3
    2f28:	cbnz	w0, 3368 <__multf3+0x5c8>
    2f2c:	ldp	x29, x30, [sp], #80
    2f30:	ret
    2f34:	tst	x4, #0x800000000000
    2f38:	eor	w8, w12, w15
    2f3c:	orr	x1, x1, #0x3
    2f40:	csinc	w0, w0, wzr, ne  // ne = any
    2f44:	and	w10, w8, #0xff
    2f48:	add	x3, x3, #0x8, lsl #12
    2f4c:	cmp	x1, #0xa
    2f50:	and	x8, x8, #0xff
    2f54:	mov	x2, #0x3                   	// #3
    2f58:	b.gt	356c <__multf3+0x7cc>
    2f5c:	mov	x12, #0x1                   	// #1
    2f60:	mov	x14, #0x530                 	// #1328
    2f64:	lsl	x1, x12, x1
    2f68:	tst	x1, x14
    2f6c:	b.ne	316c <__multf3+0x3cc>  // b.any
    2f70:	mov	x14, #0x240                 	// #576
    2f74:	tst	x1, x14
    2f78:	b.ne	3154 <__multf3+0x3b4>  // b.any
    2f7c:	mov	x12, #0x88                  	// #136
    2f80:	tst	x1, x12
    2f84:	b.eq	2f98 <__multf3+0x1f8>  // b.none
    2f88:	mov	x7, x4
    2f8c:	mov	x5, x6
    2f90:	mov	x16, x2
    2f94:	b	2e70 <__multf3+0xd0>
    2f98:	lsr	x13, x5, #32
    2f9c:	and	x12, x6, #0xffffffff
    2fa0:	and	x15, x5, #0xffffffff
    2fa4:	lsr	x6, x6, #32
    2fa8:	and	x18, x4, #0xffffffff
    2fac:	lsr	x2, x4, #32
    2fb0:	mul	x4, x13, x12
    2fb4:	stp	x21, x22, [sp, #32]
    2fb8:	lsr	x22, x7, #32
    2fbc:	and	x5, x7, #0xffffffff
    2fc0:	mul	x16, x12, x15
    2fc4:	madd	x7, x6, x15, x4
    2fc8:	stp	x19, x20, [sp, #16]
    2fcc:	mul	x1, x13, x18
    2fd0:	mul	x17, x15, x18
    2fd4:	and	x30, x16, #0xffffffff
    2fd8:	madd	x15, x2, x15, x1
    2fdc:	add	x16, x7, x16, lsr #32
    2fe0:	mul	x21, x22, x12
    2fe4:	cmp	x4, x16
    2fe8:	mul	x20, x22, x18
    2fec:	mov	x14, #0x100000000           	// #4294967296
    2ff0:	mul	x19, x13, x6
    2ff4:	add	x15, x15, x17, lsr #32
    2ff8:	mul	x12, x12, x5
    2ffc:	and	x17, x17, #0xffffffff
    3000:	mul	x18, x5, x18
    3004:	add	x4, x19, x14
    3008:	madd	x7, x6, x5, x21
    300c:	csel	x19, x4, x19, hi  // hi = pmore
    3010:	madd	x5, x2, x5, x20
    3014:	cmp	x1, x15
    3018:	mul	x13, x13, x2
    301c:	add	x17, x17, x15, lsl #32
    3020:	mul	x6, x6, x22
    3024:	add	x7, x7, x12, lsr #32
    3028:	add	x5, x5, x18, lsr #32
    302c:	add	x4, x13, x14
    3030:	mul	x2, x2, x22
    3034:	csel	x13, x4, x13, hi  // hi = pmore
    3038:	and	x1, x18, #0xffffffff
    303c:	cmp	x21, x7
    3040:	add	x4, x6, x14
    3044:	add	x30, x30, x16, lsl #32
    3048:	csel	x6, x4, x6, hi  // hi = pmore
    304c:	add	x13, x13, x15, lsr #32
    3050:	cmp	x20, x5
    3054:	add	x1, x1, x5, lsl #32
    3058:	add	x16, x17, x16, lsr #32
    305c:	add	x14, x2, x14
    3060:	csel	x2, x14, x2, hi  // hi = pmore
    3064:	add	x16, x19, x16
    3068:	adds	x1, x1, x13
    306c:	and	x12, x12, #0xffffffff
    3070:	cset	x13, cs  // cs = hs, nlast
    3074:	cmp	x16, x17
    3078:	cset	x4, cc  // cc = lo, ul, last
    307c:	add	x12, x12, x7, lsl #32
    3080:	adds	x1, x1, x4
    3084:	lsr	x5, x5, #32
    3088:	cset	x4, cs  // cs = hs, nlast
    308c:	cmp	x13, #0x0
    3090:	ccmp	x4, #0x0, #0x0, eq  // eq = none
    3094:	add	x7, x6, x7, lsr #32
    3098:	cinc	x5, x5, ne  // ne = any
    309c:	adds	x6, x16, x12
    30a0:	cset	x4, cs  // cs = hs, nlast
    30a4:	adds	x1, x1, x7
    30a8:	cset	x7, cs  // cs = hs, nlast
    30ac:	adds	x4, x1, x4
    30b0:	cset	x1, cs  // cs = hs, nlast
    30b4:	cmp	x7, #0x0
    30b8:	orr	x30, x30, x6, lsl #13
    30bc:	ccmp	x1, #0x0, #0x0, eq  // eq = none
    30c0:	cinc	x1, x2, ne  // ne = any
    30c4:	cmp	x30, #0x0
    30c8:	add	x1, x1, x5
    30cc:	cset	x2, ne  // ne = any
    30d0:	orr	x6, x2, x6, lsr #51
    30d4:	orr	x6, x6, x4, lsl #13
    30d8:	extr	x4, x1, x4, #51
    30dc:	tbz	x1, #39, 33f0 <__multf3+0x650>
    30e0:	ldp	x19, x20, [sp, #16]
    30e4:	and	x1, x6, #0x1
    30e8:	ldp	x21, x22, [sp, #32]
    30ec:	orr	x6, x1, x6, lsr #1
    30f0:	orr	x6, x6, x4, lsl #63
    30f4:	lsr	x4, x4, #1
    30f8:	mov	x1, #0x3fff                	// #16383
    30fc:	add	x2, x3, x1
    3100:	cmp	x2, #0x0
    3104:	b.le	329c <__multf3+0x4fc>
    3108:	tst	x6, #0x7
    310c:	b.eq	312c <__multf3+0x38c>  // b.none
    3110:	and	x1, x11, #0xc00000
    3114:	orr	w0, w0, #0x10
    3118:	cmp	x1, #0x400, lsl #12
    311c:	b.eq	34e4 <__multf3+0x744>  // b.none
    3120:	cmp	x1, #0x800, lsl #12
    3124:	b.eq	348c <__multf3+0x6ec>  // b.none
    3128:	cbz	x1, 3474 <__multf3+0x6d4>
    312c:	tbz	x4, #52, 3138 <__multf3+0x398>
    3130:	and	x4, x4, #0xffefffffffffffff
    3134:	add	x2, x3, #0x4, lsl #12
    3138:	mov	x1, #0x7ffe                	// #32766
    313c:	cmp	x2, x1
    3140:	b.gt	33c4 <__multf3+0x624>
    3144:	and	w1, w2, #0x7fff
    3148:	extr	x5, x4, x6, #3
    314c:	ubfx	x4, x4, #3, #48
    3150:	b	2f10 <__multf3+0x170>
    3154:	mov	w0, w12
    3158:	mov	w10, #0x0                   	// #0
    315c:	mov	x4, #0xffffffffffff        	// #281474976710655
    3160:	mov	x5, #0xffffffffffffffff    	// #-1
    3164:	mov	w1, #0x7fff                	// #32767
    3168:	b	2f10 <__multf3+0x170>
    316c:	mov	w15, w10
    3170:	mov	x13, x8
    3174:	b	2e70 <__multf3+0xd0>
    3178:	orr	x5, x7, x1
    317c:	cbz	x5, 3284 <__multf3+0x4e4>
    3180:	cbz	x7, 33a0 <__multf3+0x600>
    3184:	clz	x0, x7
    3188:	sub	x4, x0, #0xf
    318c:	add	w5, w4, #0x3
    3190:	mov	w3, #0x3d                  	// #61
    3194:	sub	w3, w3, w4
    3198:	lsl	x4, x7, x5
    319c:	lsr	x3, x1, x3
    31a0:	orr	x7, x3, x4
    31a4:	lsl	x5, x1, x5
    31a8:	lsr	x8, x2, #63
    31ac:	mov	x3, #0xffffffffffffc011    	// #-16367
    31b0:	ubfx	x4, x2, #0, #48
    31b4:	sub	x3, x3, x0
    31b8:	and	w15, w8, #0xff
    31bc:	mov	x13, x8
    31c0:	ubfx	x9, x2, #48, #15
    31c4:	mov	x1, #0x0                   	// #0
    31c8:	mov	x16, #0x0                   	// #0
    31cc:	mov	w0, #0x0                   	// #0
    31d0:	cbnz	w9, 2e1c <__multf3+0x7c>
    31d4:	nop
    31d8:	orr	x2, x4, x6
    31dc:	cbz	x2, 324c <__multf3+0x4ac>
    31e0:	cbz	x4, 337c <__multf3+0x5dc>
    31e4:	clz	x9, x4
    31e8:	sub	x2, x9, #0xf
    31ec:	add	w10, w2, #0x3
    31f0:	mov	w8, #0x3d                  	// #61
    31f4:	sub	w8, w8, w2
    31f8:	lsl	x2, x4, x10
    31fc:	lsr	x8, x6, x8
    3200:	orr	x4, x8, x2
    3204:	lsl	x6, x6, x10
    3208:	sub	x9, x3, x9
    320c:	mov	x10, #0xffffffffffffc011    	// #-16367
    3210:	mov	x2, #0x0                   	// #0
    3214:	add	x9, x9, x10
    3218:	b	2e48 <__multf3+0xa8>
    321c:	orr	x5, x7, x1
    3220:	cbnz	x5, 3264 <__multf3+0x4c4>
    3224:	mov	x7, #0x0                   	// #0
    3228:	mov	x1, #0x8                   	// #8
    322c:	mov	x3, #0x7fff                	// #32767
    3230:	mov	x16, #0x2                   	// #2
    3234:	mov	w0, #0x0                   	// #0
    3238:	b	2e04 <__multf3+0x64>
    323c:	mov	w1, #0x7fff                	// #32767
    3240:	mov	x4, #0x0                   	// #0
    3244:	mov	x5, #0x0                   	// #0
    3248:	b	2f10 <__multf3+0x170>
    324c:	orr	x1, x1, #0x1
    3250:	mov	x9, x3
    3254:	mov	x4, #0x0                   	// #0
    3258:	mov	x6, #0x0                   	// #0
    325c:	mov	x2, #0x1                   	// #1
    3260:	b	2e48 <__multf3+0xa8>
    3264:	lsr	x0, x7, #47
    3268:	mov	x5, x1
    326c:	eor	x0, x0, #0x1
    3270:	mov	x1, #0xc                   	// #12
    3274:	and	w0, w0, #0x1
    3278:	mov	x3, #0x7fff                	// #32767
    327c:	mov	x16, #0x3                   	// #3
    3280:	b	2e04 <__multf3+0x64>
    3284:	mov	x7, #0x0                   	// #0
    3288:	mov	x1, #0x4                   	// #4
    328c:	mov	x3, #0x0                   	// #0
    3290:	mov	x16, #0x1                   	// #1
    3294:	mov	w0, #0x0                   	// #0
    3298:	b	2e04 <__multf3+0x64>
    329c:	mov	x1, #0x1                   	// #1
    32a0:	sub	x2, x1, x2
    32a4:	cmp	x2, #0x74
    32a8:	b.gt	3320 <__multf3+0x580>
    32ac:	cmp	x2, #0x3f
    32b0:	b.le	3400 <__multf3+0x660>
    32b4:	mov	w1, #0x80                  	// #128
    32b8:	sub	w1, w1, w2
    32bc:	cmp	x2, #0x40
    32c0:	sub	w2, w2, #0x40
    32c4:	lsl	x1, x4, x1
    32c8:	orr	x1, x6, x1
    32cc:	csel	x6, x1, x6, ne  // ne = any
    32d0:	lsr	x2, x4, x2
    32d4:	cmp	x6, #0x0
    32d8:	cset	x5, ne  // ne = any
    32dc:	orr	x5, x5, x2
    32e0:	ands	x2, x5, #0x7
    32e4:	b.eq	3434 <__multf3+0x694>  // b.none
    32e8:	mov	x2, #0x0                   	// #0
    32ec:	and	x11, x11, #0xc00000
    32f0:	orr	w0, w0, #0x10
    32f4:	cmp	x11, #0x400, lsl #12
    32f8:	b.eq	3544 <__multf3+0x7a4>  // b.none
    32fc:	cmp	x11, #0x800, lsl #12
    3300:	b.eq	3558 <__multf3+0x7b8>  // b.none
    3304:	cbz	x11, 349c <__multf3+0x6fc>
    3308:	tbnz	x2, #51, 34b4 <__multf3+0x714>
    330c:	ubfx	x4, x2, #3, #48
    3310:	extr	x5, x2, x5, #3
    3314:	orr	w0, w0, #0x8
    3318:	mov	w1, #0x0                   	// #0
    331c:	b	3350 <__multf3+0x5b0>
    3320:	orr	x5, x6, x4
    3324:	cbz	x5, 3344 <__multf3+0x5a4>
    3328:	and	x11, x11, #0xc00000
    332c:	orr	w0, w0, #0x10
    3330:	cmp	x11, #0x400, lsl #12
    3334:	sub	x5, x1, x8
    3338:	b.eq	3344 <__multf3+0x5a4>  // b.none
    333c:	cmp	x11, #0x800, lsl #12
    3340:	csel	x5, x8, xzr, eq  // eq = none
    3344:	orr	w0, w0, #0x8
    3348:	mov	w1, #0x0                   	// #0
    334c:	mov	x4, #0x0                   	// #0
    3350:	mov	x3, #0x0                   	// #0
    3354:	fmov	d0, x5
    3358:	bfxil	x3, x4, #0, #48
    335c:	bfi	x3, x1, #48, #15
    3360:	bfi	x3, x10, #63, #1
    3364:	fmov	v0.d[1], x3
    3368:	str	q0, [sp, #48]
    336c:	bl	3740 <__sfp_handle_exceptions>
    3370:	ldr	q0, [sp, #48]
    3374:	ldp	x29, x30, [sp], #80
    3378:	ret
    337c:	clz	x9, x6
    3380:	add	x2, x9, #0x31
    3384:	add	x9, x9, #0x40
    3388:	cmp	x2, #0x3c
    338c:	b.le	31ec <__multf3+0x44c>
    3390:	sub	w2, w2, #0x3d
    3394:	lsl	x4, x6, x2
    3398:	mov	x6, #0x0                   	// #0
    339c:	b	3208 <__multf3+0x468>
    33a0:	clz	x3, x1
    33a4:	add	x4, x3, #0x31
    33a8:	add	x0, x3, #0x40
    33ac:	cmp	x4, #0x3c
    33b0:	b.le	318c <__multf3+0x3ec>
    33b4:	sub	w4, w4, #0x3d
    33b8:	mov	x5, #0x0                   	// #0
    33bc:	lsl	x7, x1, x4
    33c0:	b	31a8 <__multf3+0x408>
    33c4:	and	x5, x11, #0xc00000
    33c8:	cmp	x5, #0x400, lsl #12
    33cc:	b.eq	34c8 <__multf3+0x728>  // b.none
    33d0:	cmp	x5, #0x800, lsl #12
    33d4:	b.eq	3458 <__multf3+0x6b8>  // b.none
    33d8:	cbz	x5, 344c <__multf3+0x6ac>
    33dc:	mov	x4, #0xffffffffffff        	// #281474976710655
    33e0:	mov	x5, #0xffffffffffffffff    	// #-1
    33e4:	mov	w2, #0x14                  	// #20
    33e8:	orr	w0, w0, w2
    33ec:	b	3350 <__multf3+0x5b0>
    33f0:	mov	x3, x9
    33f4:	ldp	x19, x20, [sp, #16]
    33f8:	ldp	x21, x22, [sp, #32]
    33fc:	b	30f8 <__multf3+0x358>
    3400:	mov	w1, #0x40                  	// #64
    3404:	sub	w1, w1, w2
    3408:	lsr	x3, x6, x2
    340c:	lsl	x6, x6, x1
    3410:	cmp	x6, #0x0
    3414:	lsl	x5, x4, x1
    3418:	cset	x1, ne  // ne = any
    341c:	orr	x5, x5, x3
    3420:	lsr	x2, x4, x2
    3424:	orr	x5, x5, x1
    3428:	tst	x5, #0x7
    342c:	b.ne	32ec <__multf3+0x54c>  // b.any
    3430:	tbnz	x2, #51, 3564 <__multf3+0x7c4>
    3434:	ubfx	x4, x2, #3, #48
    3438:	extr	x5, x2, x5, #3
    343c:	mov	w1, #0x0                   	// #0
    3440:	tbz	w11, #11, 2f10 <__multf3+0x170>
    3444:	orr	w0, w0, #0x8
    3448:	b	3350 <__multf3+0x5b0>
    344c:	mov	w1, #0x7fff                	// #32767
    3450:	mov	x4, #0x0                   	// #0
    3454:	b	33e4 <__multf3+0x644>
    3458:	cmp	x8, #0x0
    345c:	mov	w2, #0x7fff                	// #32767
    3460:	mov	x4, #0xffffffffffff        	// #281474976710655
    3464:	csel	w1, w1, w2, eq  // eq = none
    3468:	csel	x4, x4, xzr, eq  // eq = none
    346c:	csetm	x5, eq  // eq = none
    3470:	b	33e4 <__multf3+0x644>
    3474:	and	x1, x6, #0xf
    3478:	cmp	x1, #0x4
    347c:	b.eq	312c <__multf3+0x38c>  // b.none
    3480:	adds	x6, x6, #0x4
    3484:	cinc	x4, x4, cs  // cs = hs, nlast
    3488:	b	312c <__multf3+0x38c>
    348c:	cbz	x8, 312c <__multf3+0x38c>
    3490:	adds	x6, x6, #0x8
    3494:	cinc	x4, x4, cs  // cs = hs, nlast
    3498:	b	312c <__multf3+0x38c>
    349c:	and	x1, x5, #0xf
    34a0:	cmp	x1, #0x4
    34a4:	b.eq	34b0 <__multf3+0x710>  // b.none
    34a8:	adds	x5, x5, #0x4
    34ac:	cinc	x2, x2, cs  // cs = hs, nlast
    34b0:	tbz	x2, #51, 330c <__multf3+0x56c>
    34b4:	orr	w0, w0, #0x8
    34b8:	mov	w1, #0x1                   	// #1
    34bc:	mov	x4, #0x0                   	// #0
    34c0:	mov	x5, #0x0                   	// #0
    34c4:	b	3350 <__multf3+0x5b0>
    34c8:	cmp	x8, #0x0
    34cc:	mov	w2, #0x7fff                	// #32767
    34d0:	mov	x4, #0xffffffffffff        	// #281474976710655
    34d4:	csel	w1, w1, w2, ne  // ne = any
    34d8:	csel	x4, x4, xzr, ne  // ne = any
    34dc:	csetm	x5, ne  // ne = any
    34e0:	b	33e4 <__multf3+0x644>
    34e4:	cbnz	x8, 312c <__multf3+0x38c>
    34e8:	b	3490 <__multf3+0x6f0>
    34ec:	mov	x4, #0x2                   	// #2
    34f0:	cmp	x1, #0xf
    34f4:	b.ne	3518 <__multf3+0x778>  // b.any
    34f8:	tbz	x7, #47, 3530 <__multf3+0x790>
    34fc:	tbnz	x2, #47, 3530 <__multf3+0x790>
    3500:	orr	x4, x2, #0x800000000000
    3504:	mov	w10, w15
    3508:	and	x4, x4, #0xffffffffffff
    350c:	mov	x5, x6
    3510:	mov	w1, #0x7fff                	// #32767
    3514:	b	2f10 <__multf3+0x170>
    3518:	cmp	x1, #0xb
    351c:	b.ne	2e68 <__multf3+0xc8>  // b.any
    3520:	mov	x7, x2
    3524:	mov	x5, x6
    3528:	mov	x16, x4
    352c:	b	2e70 <__multf3+0xd0>
    3530:	orr	x4, x7, #0x800000000000
    3534:	mov	w10, w12
    3538:	and	x4, x4, #0xffffffffffff
    353c:	mov	w1, #0x7fff                	// #32767
    3540:	b	2f10 <__multf3+0x170>
    3544:	cbnz	x8, 34b0 <__multf3+0x710>
    3548:	adds	x5, x5, #0x8
    354c:	cinc	x2, x2, cs  // cs = hs, nlast
    3550:	tbnz	x2, #51, 34b4 <__multf3+0x714>
    3554:	b	330c <__multf3+0x56c>
    3558:	cbnz	x8, 3548 <__multf3+0x7a8>
    355c:	tbnz	x2, #51, 34b4 <__multf3+0x714>
    3560:	b	330c <__multf3+0x56c>
    3564:	orr	w0, w0, #0x10
    3568:	b	34b4 <__multf3+0x714>
    356c:	mov	x2, x4
    3570:	mov	x4, #0x3                   	// #3
    3574:	b	34f0 <__multf3+0x750>
    3578:	mov	w10, w15
    357c:	mov	x8, x13
    3580:	b	2e8c <__multf3+0xec>
    3584:	nop

0000000000003588 <__floatsitf>:
    3588:	cmp	w0, #0x0
    358c:	cbz	w0, 35d8 <__floatsitf+0x50>
    3590:	cneg	w1, w0, lt  // lt = tstop
    3594:	mov	w4, #0x403e                	// #16446
    3598:	clz	x3, x1
    359c:	mov	w2, #0x402f                	// #16431
    35a0:	sub	w4, w4, w3
    35a4:	lsr	w0, w0, #31
    35a8:	sub	w2, w2, w4
    35ac:	mov	x3, #0x0                   	// #0
    35b0:	and	w4, w4, #0x7fff
    35b4:	lsl	x1, x1, x2
    35b8:	and	x1, x1, #0xffffffffffff
    35bc:	orr	w0, w4, w0, lsl #15
    35c0:	mov	x2, #0x0                   	// #0
    35c4:	bfxil	x3, x1, #0, #48
    35c8:	fmov	d0, x2
    35cc:	bfi	x3, x0, #48, #16
    35d0:	fmov	v0.d[1], x3
    35d4:	ret
    35d8:	mov	w4, #0x0                   	// #0
    35dc:	mov	x1, #0x0                   	// #0
    35e0:	mov	w0, #0x0                   	// #0
    35e4:	mov	x3, #0x0                   	// #0
    35e8:	orr	w0, w4, w0, lsl #15
    35ec:	bfxil	x3, x1, #0, #48
    35f0:	mov	x2, #0x0                   	// #0
    35f4:	fmov	d0, x2
    35f8:	bfi	x3, x0, #48, #16
    35fc:	fmov	v0.d[1], x3
    3600:	ret
    3604:	nop

0000000000003608 <__fixtfdi>:
    3608:	stp	x29, x30, [sp, #-48]!
    360c:	mov	x29, sp
    3610:	str	x19, [sp, #16]
    3614:	str	q0, [sp, #32]
    3618:	ldp	x2, x0, [sp, #32]
    361c:	mrs	x1, fpcr
    3620:	ubfx	x19, x0, #48, #15
    3624:	mov	x3, #0x3ffe                	// #16382
    3628:	ubfx	x4, x0, #0, #48
    362c:	cmp	x19, x3
    3630:	b.gt	3658 <__fixtfdi+0x50>
    3634:	cbnz	x19, 36f8 <__fixtfdi+0xf0>
    3638:	orr	x2, x4, x2
    363c:	cbz	x2, 3648 <__fixtfdi+0x40>
    3640:	mov	w0, #0x10                  	// #16
    3644:	bl	3740 <__sfp_handle_exceptions>
    3648:	mov	x0, x19
    364c:	ldr	x19, [sp, #16]
    3650:	ldp	x29, x30, [sp], #48
    3654:	ret
    3658:	lsr	x1, x0, #63
    365c:	and	w3, w1, #0xff
    3660:	mov	x1, #0x403d                	// #16445
    3664:	cmp	x19, x1
    3668:	b.le	36a0 <__fixtfdi+0x98>
    366c:	mov	x0, #0x403e                	// #16446
    3670:	and	x5, x3, #0xff
    3674:	cmp	x19, x0
    3678:	mov	x0, #0x7fffffffffffffff    	// #9223372036854775807
    367c:	csel	w1, w3, wzr, eq  // eq = none
    3680:	add	x19, x5, x0
    3684:	cbz	w1, 3708 <__fixtfdi+0x100>
    3688:	extr	x4, x4, x2, #49
    368c:	cbnz	x4, 3708 <__fixtfdi+0x100>
    3690:	cmp	xzr, x2, lsl #15
    3694:	b.eq	3648 <__fixtfdi+0x40>  // b.none
    3698:	mov	w0, #0x10                  	// #16
    369c:	b	3644 <__fixtfdi+0x3c>
    36a0:	mov	x5, #0x406f                	// #16495
    36a4:	sub	x1, x5, x19
    36a8:	mov	x0, x19
    36ac:	cmp	x1, #0x3f
    36b0:	orr	x19, x4, #0x1000000000000
    36b4:	b.le	3714 <__fixtfdi+0x10c>
    36b8:	mov	w4, #0xffffc011            	// #-16367
    36bc:	add	w4, w0, w4
    36c0:	cmp	x1, #0x40
    36c4:	mov	w1, #0x402f                	// #16431
    36c8:	sub	w0, w1, w0
    36cc:	lsl	x1, x19, x4
    36d0:	orr	x1, x2, x1
    36d4:	csel	x2, x1, x2, ne  // ne = any
    36d8:	lsr	x19, x19, x0
    36dc:	cmp	x2, #0x0
    36e0:	cset	w0, ne  // ne = any
    36e4:	cmp	w3, #0x0
    36e8:	cneg	x19, x19, ne  // ne = any
    36ec:	cbz	w0, 3648 <__fixtfdi+0x40>
    36f0:	mov	w0, #0x10                  	// #16
    36f4:	b	3644 <__fixtfdi+0x3c>
    36f8:	mov	x19, #0x0                   	// #0
    36fc:	mov	w0, #0x10                  	// #16
    3700:	bl	3740 <__sfp_handle_exceptions>
    3704:	b	3648 <__fixtfdi+0x40>
    3708:	mov	w0, #0x1                   	// #1
    370c:	bl	3740 <__sfp_handle_exceptions>
    3710:	b	3648 <__fixtfdi+0x40>
    3714:	mov	w6, #0xffffbfd1            	// #-16431
    3718:	add	w4, w0, w6
    371c:	sub	w0, w5, w0
    3720:	lsl	x1, x2, x4
    3724:	cmp	x1, #0x0
    3728:	lsr	x2, x2, x0
    372c:	cset	w0, ne  // ne = any
    3730:	lsl	x19, x19, x4
    3734:	orr	x19, x2, x19
    3738:	b	36e4 <__fixtfdi+0xdc>
    373c:	nop

0000000000003740 <__sfp_handle_exceptions>:
    3740:	tbz	w0, #0, 3750 <__sfp_handle_exceptions+0x10>
    3744:	movi	v1.2s, #0x0
    3748:	fdiv	s0, s1, s1
    374c:	mrs	x1, fpsr
    3750:	tbz	w0, #1, 3764 <__sfp_handle_exceptions+0x24>
    3754:	fmov	s1, #1.000000000000000000e+00
    3758:	movi	v2.2s, #0x0
    375c:	fdiv	s0, s1, s2
    3760:	mrs	x1, fpsr
    3764:	tbz	w0, #2, 3784 <__sfp_handle_exceptions+0x44>
    3768:	mov	w2, #0xc5ae                	// #50606
    376c:	mov	w1, #0x7f7fffff            	// #2139095039
    3770:	movk	w2, #0x749d, lsl #16
    3774:	fmov	s1, w1
    3778:	fmov	s2, w2
    377c:	fadd	s0, s1, s2
    3780:	mrs	x1, fpsr
    3784:	tbz	w0, #3, 3794 <__sfp_handle_exceptions+0x54>
    3788:	movi	v1.2s, #0x80, lsl #16
    378c:	fmul	s0, s1, s1
    3790:	mrs	x1, fpsr
    3794:	tbz	w0, #4, 37ac <__sfp_handle_exceptions+0x6c>
    3798:	mov	w0, #0x7f7fffff            	// #2139095039
    379c:	fmov	s2, #1.000000000000000000e+00
    37a0:	fmov	s1, w0
    37a4:	fsub	s0, s1, s2
    37a8:	mrs	x0, fpsr
    37ac:	ret

Disassembly of section .fini:

00000000000037b0 <_fini>:
    37b0:	stp	x29, x30, [sp, #-16]!
    37b4:	mov	x29, sp
    37b8:	ldp	x29, x30, [sp], #16
    37bc:	ret
