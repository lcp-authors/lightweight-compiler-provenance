
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libopcodes-2.34.so_gcc_-O1:     file format elf64-littleaarch64


Disassembly of section .init:

0000000000034fe8 <.init>:
   34fe8:	stp	x29, x30, [sp, #-16]!
   34fec:	mov	x29, sp
   34ff0:	bl	35bc0 <aarch64_get_operand_modifier_from_value@plt+0x10>
   34ff4:	ldp	x29, x30, [sp], #16
   34ff8:	ret

Disassembly of section .plt:

0000000000035000 <aarch64_ext_sysins_op@plt-0x20>:
   35000:	stp	x16, x30, [sp, #-16]!
   35004:	adrp	x16, a3000 <aarch64_operands@@Base+0x16bc0>
   35008:	ldr	x17, [x16, #4088]
   3500c:	add	x16, x16, #0xff8
   35010:	br	x17
   35014:	nop
   35018:	nop
   3501c:	nop

0000000000035020 <aarch64_ext_sysins_op@plt>:
   35020:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35024:	ldr	x17, [x16]
   35028:	add	x16, x16, #0x0
   3502c:	br	x17

0000000000035030 <aarch64_ins_sve_float_zero_one@plt>:
   35030:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35034:	ldr	x17, [x16, #8]
   35038:	add	x16, x16, #0x8
   3503c:	br	x17

0000000000035040 <aarch64_ins_simd_addr_post@plt>:
   35040:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35044:	ldr	x17, [x16, #16]
   35048:	add	x16, x16, #0x10
   3504c:	br	x17

0000000000035050 <memcpy@plt>:
   35050:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35054:	ldr	x17, [x16, #24]
   35058:	add	x16, x16, #0x18
   3505c:	br	x17

0000000000035060 <memmove@plt>:
   35060:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35064:	ldr	x17, [x16, #32]
   35068:	add	x16, x16, #0x20
   3506c:	br	x17

0000000000035070 <aarch64_ins_sve_quad_index@plt>:
   35070:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35074:	ldr	x17, [x16, #40]
   35078:	add	x16, x16, #0x28
   3507c:	br	x17

0000000000035080 <aarch64_ins_cond@plt>:
   35080:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35084:	ldr	x17, [x16, #48]
   35088:	add	x16, x16, #0x30
   3508c:	br	x17

0000000000035090 <aarch64_ext_sve_addr_zi_u5@plt>:
   35090:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35094:	ldr	x17, [x16, #56]
   35098:	add	x16, x16, #0x38
   3509c:	br	x17

00000000000350a0 <strlen@plt>:
   350a0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   350a4:	ldr	x17, [x16, #64]
   350a8:	add	x16, x16, #0x40
   350ac:	br	x17

00000000000350b0 <aarch64_ins_sve_addr_rz_xtw@plt>:
   350b0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   350b4:	ldr	x17, [x16, #72]
   350b8:	add	x16, x16, #0x48
   350bc:	br	x17

00000000000350c0 <aarch64_ext_sysreg@plt>:
   350c0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   350c4:	ldr	x17, [x16, #80]
   350c8:	add	x16, x16, #0x50
   350cc:	br	x17

00000000000350d0 <aarch64_ins_sve_reglist@plt>:
   350d0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   350d4:	ldr	x17, [x16, #88]
   350d8:	add	x16, x16, #0x58
   350dc:	br	x17

00000000000350e0 <aarch64_ins_imm_rotate1@plt>:
   350e0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   350e4:	ldr	x17, [x16, #96]
   350e8:	add	x16, x16, #0x60
   350ec:	br	x17

00000000000350f0 <exit@plt>:
   350f0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   350f4:	ldr	x17, [x16, #104]
   350f8:	add	x16, x16, #0x68
   350fc:	br	x17

0000000000035100 <aarch64_operand_index@plt>:
   35100:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35104:	ldr	x17, [x16, #112]
   35108:	add	x16, x16, #0x70
   3510c:	br	x17

0000000000035110 <aarch64_ext_regrt_sysins@plt>:
   35110:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35114:	ldr	x17, [x16, #120]
   35118:	add	x16, x16, #0x78
   3511c:	br	x17

0000000000035120 <aarch64_ext_fbits@plt>:
   35120:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35124:	ldr	x17, [x16, #128]
   35128:	add	x16, x16, #0x80
   3512c:	br	x17

0000000000035130 <aarch64_ins_sve_addr_rr_lsl@plt>:
   35130:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35134:	ldr	x17, [x16, #136]
   35138:	add	x16, x16, #0x88
   3513c:	br	x17

0000000000035140 <aarch64_ins_sve_scale@plt>:
   35140:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35144:	ldr	x17, [x16, #144]
   35148:	add	x16, x16, #0x90
   3514c:	br	x17

0000000000035150 <aarch64_ext_ldst_reglist_r@plt>:
   35150:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35154:	ldr	x17, [x16, #152]
   35158:	add	x16, x16, #0x98
   3515c:	br	x17

0000000000035160 <sbrk@plt>:
   35160:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35164:	ldr	x17, [x16, #160]
   35168:	add	x16, x16, #0xa0
   3516c:	br	x17

0000000000035170 <aarch64_num_of_operands@plt>:
   35170:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35174:	ldr	x17, [x16, #168]
   35178:	add	x16, x16, #0xa8
   3517c:	br	x17

0000000000035180 <aarch64_ext_sve_shrimm@plt>:
   35180:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35184:	ldr	x17, [x16, #176]
   35188:	add	x16, x16, #0xb0
   3518c:	br	x17

0000000000035190 <aarch64_ext_sve_shlimm@plt>:
   35190:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35194:	ldr	x17, [x16, #184]
   35198:	add	x16, x16, #0xb8
   3519c:	br	x17

00000000000351a0 <aarch64_ext_addr_uimm12@plt>:
   351a0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   351a4:	ldr	x17, [x16, #192]
   351a8:	add	x16, x16, #0xc0
   351ac:	br	x17

00000000000351b0 <aarch64_ins_addr_simm10@plt>:
   351b0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   351b4:	ldr	x17, [x16, #200]
   351b8:	add	x16, x16, #0xc8
   351bc:	br	x17

00000000000351c0 <aarch64_ext_aimm@plt>:
   351c0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   351c4:	ldr	x17, [x16, #208]
   351c8:	add	x16, x16, #0xd0
   351cc:	br	x17

00000000000351d0 <ldexp@plt>:
   351d0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   351d4:	ldr	x17, [x16, #216]
   351d8:	add	x16, x16, #0xd8
   351dc:	br	x17

00000000000351e0 <aarch64_ext_sve_asimm@plt>:
   351e0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   351e4:	ldr	x17, [x16, #224]
   351e8:	add	x16, x16, #0xe0
   351ec:	br	x17

00000000000351f0 <aarch64_ins_sve_addr_ri_s4xvl@plt>:
   351f0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   351f4:	ldr	x17, [x16, #232]
   351f8:	add	x16, x16, #0xe8
   351fc:	br	x17

0000000000035200 <aarch64_ins_regno@plt>:
   35200:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35204:	ldr	x17, [x16, #240]
   35208:	add	x16, x16, #0xf0
   3520c:	br	x17

0000000000035210 <__cxa_finalize@plt>:
   35210:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35214:	ldr	x17, [x16, #248]
   35218:	add	x16, x16, #0xf8
   3521c:	br	x17

0000000000035220 <aarch64_ins_aimm@plt>:
   35220:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35224:	ldr	x17, [x16, #256]
   35228:	add	x16, x16, #0x100
   3522c:	br	x17

0000000000035230 <sprintf@plt>:
   35230:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35234:	ldr	x17, [x16, #264]
   35238:	add	x16, x16, #0x108
   3523c:	br	x17

0000000000035240 <aarch64_ins_pstatefield@plt>:
   35240:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35244:	ldr	x17, [x16, #272]
   35248:	add	x16, x16, #0x110
   3524c:	br	x17

0000000000035250 <verify_constraints@plt>:
   35250:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35254:	ldr	x17, [x16, #280]
   35258:	add	x16, x16, #0x118
   3525c:	br	x17

0000000000035260 <aarch64_ext_sve_addr_ri_s9xvl@plt>:
   35260:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35264:	ldr	x17, [x16, #288]
   35268:	add	x16, x16, #0x120
   3526c:	br	x17

0000000000035270 <qsort@plt>:
   35270:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35274:	ldr	x17, [x16, #296]
   35278:	add	x16, x16, #0x128
   3527c:	br	x17

0000000000035280 <aarch64_ext_sve_addr_zz_sxtw@plt>:
   35280:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35284:	ldr	x17, [x16, #304]
   35288:	add	x16, x16, #0x130
   3528c:	br	x17

0000000000035290 <aarch64_ins_sve_addr_zz_lsl@plt>:
   35290:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35294:	ldr	x17, [x16, #312]
   35298:	add	x16, x16, #0x138
   3529c:	br	x17

00000000000352a0 <aarch64_ext_addr_simm@plt>:
   352a0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   352a4:	ldr	x17, [x16, #320]
   352a8:	add	x16, x16, #0x140
   352ac:	br	x17

00000000000352b0 <aarch64_ext_reglane@plt>:
   352b0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   352b4:	ldr	x17, [x16, #328]
   352b8:	add	x16, x16, #0x148
   352bc:	br	x17

00000000000352c0 <aarch64_ins_sve_addr_ri_u6@plt>:
   352c0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   352c4:	ldr	x17, [x16, #336]
   352c8:	add	x16, x16, #0x150
   352cc:	br	x17

00000000000352d0 <aarch64_ins_sve_index@plt>:
   352d0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   352d4:	ldr	x17, [x16, #344]
   352d8:	add	x16, x16, #0x158
   352dc:	br	x17

00000000000352e0 <aarch64_decode_insn@plt>:
   352e0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   352e4:	ldr	x17, [x16, #352]
   352e8:	add	x16, x16, #0x160
   352ec:	br	x17

00000000000352f0 <aarch64_find_real_opcode@plt>:
   352f0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   352f4:	ldr	x17, [x16, #360]
   352f8:	add	x16, x16, #0x168
   352fc:	br	x17

0000000000035300 <aarch64_ins_addr_simm@plt>:
   35300:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35304:	ldr	x17, [x16, #368]
   35308:	add	x16, x16, #0x170
   3530c:	br	x17

0000000000035310 <get_cond_from_value@plt>:
   35310:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35314:	ldr	x17, [x16, #376]
   35318:	add	x16, x16, #0x178
   3531c:	br	x17

0000000000035320 <aarch64_ext_addr_simm10@plt>:
   35320:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35324:	ldr	x17, [x16, #384]
   35328:	add	x16, x16, #0x180
   3532c:	br	x17

0000000000035330 <aarch64_ins_sysins_op@plt>:
   35330:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35334:	ldr	x17, [x16, #392]
   35338:	add	x16, x16, #0x188
   3533c:	br	x17

0000000000035340 <aarch64_ins_ft@plt>:
   35340:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35344:	ldr	x17, [x16, #400]
   35348:	add	x16, x16, #0x190
   3534c:	br	x17

0000000000035350 <aarch64_ext_addr_offset@plt>:
   35350:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35354:	ldr	x17, [x16, #408]
   35358:	add	x16, x16, #0x198
   3535c:	br	x17

0000000000035360 <aarch64_find_best_match@plt>:
   35360:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35364:	ldr	x17, [x16, #416]
   35368:	add	x16, x16, #0x1a0
   3536c:	br	x17

0000000000035370 <aarch64_ext_fpimm@plt>:
   35370:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35374:	ldr	x17, [x16, #424]
   35378:	add	x16, x16, #0x1a8
   3537c:	br	x17

0000000000035380 <snprintf@plt>:
   35380:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35384:	ldr	x17, [x16, #432]
   35388:	add	x16, x16, #0x1b0
   3538c:	br	x17

0000000000035390 <extract_fields@plt>:
   35390:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35394:	ldr	x17, [x16, #440]
   35398:	add	x16, x16, #0x1b8
   3539c:	br	x17

00000000000353a0 <aarch64_ins_limm@plt>:
   353a0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   353a4:	ldr	x17, [x16, #448]
   353a8:	add	x16, x16, #0x1c0
   353ac:	br	x17

00000000000353b0 <aarch64_print_operand@plt>:
   353b0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   353b4:	ldr	x17, [x16, #456]
   353b8:	add	x16, x16, #0x1c8
   353bc:	br	x17

00000000000353c0 <aarch64_ext_reg_extended@plt>:
   353c0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   353c4:	ldr	x17, [x16, #464]
   353c8:	add	x16, x16, #0x1d0
   353cc:	br	x17

00000000000353d0 <aarch64_get_qualifier_standard_value@plt>:
   353d0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   353d4:	ldr	x17, [x16, #472]
   353d8:	add	x16, x16, #0x1d8
   353dc:	br	x17

00000000000353e0 <malloc@plt>:
   353e0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   353e4:	ldr	x17, [x16, #480]
   353e8:	add	x16, x16, #0x1e0
   353ec:	br	x17

00000000000353f0 <aarch64_get_qualifier_name@plt>:
   353f0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   353f4:	ldr	x17, [x16, #488]
   353f8:	add	x16, x16, #0x1e8
   353fc:	br	x17

0000000000035400 <aarch64_logical_immediate_p@plt>:
   35400:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35404:	ldr	x17, [x16, #496]
   35408:	add	x16, x16, #0x1f0
   3540c:	br	x17

0000000000035410 <aarch64_replace_opcode@plt>:
   35410:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35414:	ldr	x17, [x16, #504]
   35418:	add	x16, x16, #0x1f8
   3541c:	br	x17

0000000000035420 <aarch64_ext_limm@plt>:
   35420:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35424:	ldr	x17, [x16, #512]
   35428:	add	x16, x16, #0x200
   3542c:	br	x17

0000000000035430 <aarch64_get_operand_modifier_value@plt>:
   35430:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35434:	ldr	x17, [x16, #520]
   35438:	add	x16, x16, #0x208
   3543c:	br	x17

0000000000035440 <strncmp@plt>:
   35440:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35444:	ldr	x17, [x16, #528]
   35448:	add	x16, x16, #0x210
   3544c:	br	x17

0000000000035450 <aarch64_ins_reg_shifted@plt>:
   35450:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35454:	ldr	x17, [x16, #536]
   35458:	add	x16, x16, #0x218
   3545c:	br	x17

0000000000035460 <aarch64_ext_sve_addr_ri_s4xvl@plt>:
   35460:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35464:	ldr	x17, [x16, #544]
   35468:	add	x16, x16, #0x220
   3546c:	br	x17

0000000000035470 <memset@plt>:
   35470:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35474:	ldr	x17, [x16, #552]
   35478:	add	x16, x16, #0x228
   3547c:	br	x17

0000000000035480 <xmalloc@plt>:
   35480:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35484:	ldr	x17, [x16, #560]
   35488:	add	x16, x16, #0x230
   3548c:	br	x17

0000000000035490 <aarch64_ins_sysreg@plt>:
   35490:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35494:	ldr	x17, [x16, #568]
   35498:	add	x16, x16, #0x238
   3549c:	br	x17

00000000000354a0 <print_arm_disassembler_options@plt>:
   354a0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   354a4:	ldr	x17, [x16, #576]
   354a8:	add	x16, x16, #0x240
   354ac:	br	x17

00000000000354b0 <aarch64_ins_fpimm@plt>:
   354b0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   354b4:	ldr	x17, [x16, #584]
   354b8:	add	x16, x16, #0x248
   354bc:	br	x17

00000000000354c0 <aarch64_ext_sve_reglist@plt>:
   354c0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   354c4:	ldr	x17, [x16, #592]
   354c8:	add	x16, x16, #0x250
   354cc:	br	x17

00000000000354d0 <aarch64_ext_sve_quad_index@plt>:
   354d0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   354d4:	ldr	x17, [x16, #600]
   354d8:	add	x16, x16, #0x258
   354dc:	br	x17

00000000000354e0 <aarch64_match_operands_constraint@plt>:
   354e0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   354e4:	ldr	x17, [x16, #608]
   354e8:	add	x16, x16, #0x260
   354ec:	br	x17

00000000000354f0 <aarch64_ins_sve_limm_mov@plt>:
   354f0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   354f4:	ldr	x17, [x16, #616]
   354f8:	add	x16, x16, #0x268
   354fc:	br	x17

0000000000035500 <aarch64_ext_inv_limm@plt>:
   35500:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35504:	ldr	x17, [x16, #624]
   35508:	add	x16, x16, #0x270
   3550c:	br	x17

0000000000035510 <aarch64_ext_sve_float_half_two@plt>:
   35510:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35514:	ldr	x17, [x16, #632]
   35518:	add	x16, x16, #0x278
   3551c:	br	x17

0000000000035520 <calloc@plt>:
   35520:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35524:	ldr	x17, [x16, #640]
   35528:	add	x16, x16, #0x280
   3552c:	br	x17

0000000000035530 <bfd_get_bits@plt>:
   35530:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35534:	ldr	x17, [x16, #648]
   35538:	add	x16, x16, #0x288
   3553c:	br	x17

0000000000035540 <aarch64_sve_dupm_mov_immediate_p@plt>:
   35540:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35544:	ldr	x17, [x16, #656]
   35548:	add	x16, x16, #0x290
   3554c:	br	x17

0000000000035550 <aarch64_ins_advsimd_imm_modified@plt>:
   35550:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35554:	ldr	x17, [x16, #664]
   35558:	add	x16, x16, #0x298
   3555c:	br	x17

0000000000035560 <aarch64_ins_ldst_reglist_r@plt>:
   35560:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35564:	ldr	x17, [x16, #672]
   35568:	add	x16, x16, #0x2a0
   3556c:	br	x17

0000000000035570 <aarch64_ins_sve_addr_zz_sxtw@plt>:
   35570:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35574:	ldr	x17, [x16, #680]
   35578:	add	x16, x16, #0x2a8
   3557c:	br	x17

0000000000035580 <aarch64_ext_ldst_reglist@plt>:
   35580:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35584:	ldr	x17, [x16, #688]
   35588:	add	x16, x16, #0x2b0
   3558c:	br	x17

0000000000035590 <realloc@plt>:
   35590:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35594:	ldr	x17, [x16, #696]
   35598:	add	x16, x16, #0x2b8
   3559c:	br	x17

00000000000355a0 <aarch64_opcode_lookup@plt>:
   355a0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   355a4:	ldr	x17, [x16, #704]
   355a8:	add	x16, x16, #0x2c0
   355ac:	br	x17

00000000000355b0 <aarch64_ext_sve_index@plt>:
   355b0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   355b4:	ldr	x17, [x16, #712]
   355b8:	add	x16, x16, #0x2c8
   355bc:	br	x17

00000000000355c0 <aarch64_ext_imm_rotate2@plt>:
   355c0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   355c4:	ldr	x17, [x16, #720]
   355c8:	add	x16, x16, #0x2d0
   355cc:	br	x17

00000000000355d0 <aarch64_ext_hint@plt>:
   355d0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   355d4:	ldr	x17, [x16, #728]
   355d8:	add	x16, x16, #0x2d8
   355dc:	br	x17

00000000000355e0 <aarch64_ins_reglist@plt>:
   355e0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   355e4:	ldr	x17, [x16, #736]
   355e8:	add	x16, x16, #0x2e0
   355ec:	br	x17

00000000000355f0 <aarch64_extract_operand@plt>:
   355f0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   355f4:	ldr	x17, [x16, #744]
   355f8:	add	x16, x16, #0x2e8
   355fc:	br	x17

0000000000035600 <aarch64_ins_sve_addr_ri_s4@plt>:
   35600:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35604:	ldr	x17, [x16, #752]
   35608:	add	x16, x16, #0x2f0
   3560c:	br	x17

0000000000035610 <aarch64_is_destructive_by_operands@plt>:
   35610:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35614:	ldr	x17, [x16, #760]
   35618:	add	x16, x16, #0x2f8
   3561c:	br	x17

0000000000035620 <aarch64_ins_prfop@plt>:
   35620:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35624:	ldr	x17, [x16, #768]
   35628:	add	x16, x16, #0x300
   3562c:	br	x17

0000000000035630 <aarch64_ins_hint@plt>:
   35630:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35634:	ldr	x17, [x16, #776]
   35638:	add	x16, x16, #0x308
   3563c:	br	x17

0000000000035640 <__gmon_start__@plt>:
   35640:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35644:	ldr	x17, [x16, #784]
   35648:	add	x16, x16, #0x310
   3564c:	br	x17

0000000000035650 <aarch64_ins_sve_float_half_two@plt>:
   35650:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35654:	ldr	x17, [x16, #792]
   35658:	add	x16, x16, #0x318
   3565c:	br	x17

0000000000035660 <aarch64_ext_sve_addr_zz_lsl@plt>:
   35660:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35664:	ldr	x17, [x16, #800]
   35668:	add	x16, x16, #0x320
   3566c:	br	x17

0000000000035670 <abort@plt>:
   35670:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35674:	ldr	x17, [x16, #808]
   35678:	add	x16, x16, #0x328
   3567c:	br	x17

0000000000035680 <aarch64_get_qualifier_esize@plt>:
   35680:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35684:	ldr	x17, [x16, #816]
   35688:	add	x16, x16, #0x330
   3568c:	br	x17

0000000000035690 <aarch64_ins_reglane@plt>:
   35690:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35694:	ldr	x17, [x16, #824]
   35698:	add	x16, x16, #0x338
   3569c:	br	x17

00000000000356a0 <aarch64_ins_sve_addr_zz_uxtw@plt>:
   356a0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   356a4:	ldr	x17, [x16, #832]
   356a8:	add	x16, x16, #0x340
   356ac:	br	x17

00000000000356b0 <aarch64_ins_imm_rotate2@plt>:
   356b0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   356b4:	ldr	x17, [x16, #840]
   356b8:	add	x16, x16, #0x348
   356bc:	br	x17

00000000000356c0 <aarch64_ext_ldst_elemlist@plt>:
   356c0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   356c4:	ldr	x17, [x16, #848]
   356c8:	add	x16, x16, #0x350
   356cc:	br	x17

00000000000356d0 <aarch64_ins_fbits@plt>:
   356d0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   356d4:	ldr	x17, [x16, #856]
   356d8:	add	x16, x16, #0x358
   356dc:	br	x17

00000000000356e0 <aarch64_ins_imm_half@plt>:
   356e0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   356e4:	ldr	x17, [x16, #864]
   356e8:	add	x16, x16, #0x360
   356ec:	br	x17

00000000000356f0 <aarch64_ext_sve_aimm@plt>:
   356f0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   356f4:	ldr	x17, [x16, #872]
   356f8:	add	x16, x16, #0x368
   356fc:	br	x17

0000000000035700 <aarch64_ins_addr_simple@plt>:
   35700:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35704:	ldr	x17, [x16, #880]
   35708:	add	x16, x16, #0x370
   3570c:	br	x17

0000000000035710 <aarch64_get_operand_class@plt>:
   35710:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35714:	ldr	x17, [x16, #888]
   35718:	add	x16, x16, #0x378
   3571c:	br	x17

0000000000035720 <aarch64_ext_imm@plt>:
   35720:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35724:	ldr	x17, [x16, #896]
   35728:	add	x16, x16, #0x380
   3572c:	br	x17

0000000000035730 <aarch64_ins_addr_uimm12@plt>:
   35730:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35734:	ldr	x17, [x16, #904]
   35738:	add	x16, x16, #0x388
   3573c:	br	x17

0000000000035740 <aarch64_stack_pointer_p@plt>:
   35740:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35744:	ldr	x17, [x16, #912]
   35748:	add	x16, x16, #0x390
   3574c:	br	x17

0000000000035750 <aarch64_ext_reglist@plt>:
   35750:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35754:	ldr	x17, [x16, #920]
   35758:	add	x16, x16, #0x398
   3575c:	br	x17

0000000000035760 <aarch64_shrink_expanded_imm8@plt>:
   35760:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35764:	ldr	x17, [x16, #928]
   35768:	add	x16, x16, #0x3a0
   3576c:	br	x17

0000000000035770 <aarch64_ext_shll_imm@plt>:
   35770:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35774:	ldr	x17, [x16, #936]
   35778:	add	x16, x16, #0x3a8
   3577c:	br	x17

0000000000035780 <aarch64_ins_inv_limm@plt>:
   35780:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35784:	ldr	x17, [x16, #944]
   35788:	add	x16, x16, #0x3b0
   3578c:	br	x17

0000000000035790 <free@plt>:
   35790:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35794:	ldr	x17, [x16, #952]
   35798:	add	x16, x16, #0x3b8
   3579c:	br	x17

00000000000357a0 <aarch64_ext_sve_float_zero_one@plt>:
   357a0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   357a4:	ldr	x17, [x16, #960]
   357a8:	add	x16, x16, #0x3c0
   357ac:	br	x17

00000000000357b0 <aarch64_select_operand_for_sizeq_field_coding@plt>:
   357b0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   357b4:	ldr	x17, [x16, #968]
   357b8:	add	x16, x16, #0x3c8
   357bc:	br	x17

00000000000357c0 <aarch64_ext_addr_regoff@plt>:
   357c0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   357c4:	ldr	x17, [x16, #976]
   357c8:	add	x16, x16, #0x3d0
   357cc:	br	x17

00000000000357d0 <aarch64_ext_sve_addr_zz_uxtw@plt>:
   357d0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   357d4:	ldr	x17, [x16, #984]
   357d8:	add	x16, x16, #0x3d8
   357dc:	br	x17

00000000000357e0 <aarch64_ins_imm@plt>:
   357e0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   357e4:	ldr	x17, [x16, #992]
   357e8:	add	x16, x16, #0x3e0
   357ec:	br	x17

00000000000357f0 <aarch64_ins_addr_offset@plt>:
   357f0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   357f4:	ldr	x17, [x16, #1000]
   357f8:	add	x16, x16, #0x3e8
   357fc:	br	x17

0000000000035800 <aarch64_ext_advsimd_imm_shift@plt>:
   35800:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35804:	ldr	x17, [x16, #1008]
   35808:	add	x16, x16, #0x3f0
   3580c:	br	x17

0000000000035810 <aarch64_ins_sve_shrimm@plt>:
   35810:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35814:	ldr	x17, [x16, #1016]
   35818:	add	x16, x16, #0x3f8
   3581c:	br	x17

0000000000035820 <aarch64_ins_ldst_elemlist@plt>:
   35820:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35824:	ldr	x17, [x16, #1024]
   35828:	add	x16, x16, #0x400
   3582c:	br	x17

0000000000035830 <init_insn_sequence@plt>:
   35830:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35834:	ldr	x17, [x16, #1032]
   35838:	add	x16, x16, #0x408
   3583c:	br	x17

0000000000035840 <strchr@plt>:
   35840:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35844:	ldr	x17, [x16, #1040]
   35848:	add	x16, x16, #0x410
   3584c:	br	x17

0000000000035850 <frexp@plt>:
   35850:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35854:	ldr	x17, [x16, #1048]
   35858:	add	x16, x16, #0x418
   3585c:	br	x17

0000000000035860 <aarch64_ins_barrier@plt>:
   35860:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35864:	ldr	x17, [x16, #1056]
   35868:	add	x16, x16, #0x420
   3586c:	br	x17

0000000000035870 <get_inverted_cond@plt>:
   35870:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35874:	ldr	x17, [x16, #1064]
   35878:	add	x16, x16, #0x428
   3587c:	br	x17

0000000000035880 <aarch64_ext_prfop@plt>:
   35880:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35884:	ldr	x17, [x16, #1072]
   35888:	add	x16, x16, #0x430
   3588c:	br	x17

0000000000035890 <print_aarch64_disassembler_options@plt>:
   35890:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35894:	ldr	x17, [x16, #1080]
   35898:	add	x16, x16, #0x438
   3589c:	br	x17

00000000000358a0 <aarch64_ext_addr_simple@plt>:
   358a0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   358a4:	ldr	x17, [x16, #1088]
   358a8:	add	x16, x16, #0x440
   358ac:	br	x17

00000000000358b0 <aarch64_ins_addr_regoff@plt>:
   358b0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   358b4:	ldr	x17, [x16, #1096]
   358b8:	add	x16, x16, #0x448
   358bc:	br	x17

00000000000358c0 <aarch64_ext_regno@plt>:
   358c0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   358c4:	ldr	x17, [x16, #1104]
   358c8:	add	x16, x16, #0x450
   358cc:	br	x17

00000000000358d0 <floatformat_to_double@plt>:
   358d0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   358d4:	ldr	x17, [x16, #1112]
   358d8:	add	x16, x16, #0x458
   358dc:	br	x17

00000000000358e0 <aarch64_ins_advsimd_imm_shift@plt>:
   358e0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   358e4:	ldr	x17, [x16, #1120]
   358e8:	add	x16, x16, #0x460
   358ec:	br	x17

00000000000358f0 <aarch64_get_qualifier_nelem@plt>:
   358f0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   358f4:	ldr	x17, [x16, #1128]
   358f8:	add	x16, x16, #0x468
   358fc:	br	x17

0000000000035900 <aarch64_ext_sve_addr_rr_lsl@plt>:
   35900:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35904:	ldr	x17, [x16, #1136]
   35908:	add	x16, x16, #0x470
   3590c:	br	x17

0000000000035910 <aarch64_ext_sve_addr_ri_s4@plt>:
   35910:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35914:	ldr	x17, [x16, #1144]
   35918:	add	x16, x16, #0x478
   3591c:	br	x17

0000000000035920 <aarch64_ins_sve_aimm@plt>:
   35920:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35924:	ldr	x17, [x16, #1152]
   35928:	add	x16, x16, #0x480
   3592c:	br	x17

0000000000035930 <aarch64_ext_sve_scale@plt>:
   35930:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35934:	ldr	x17, [x16, #1160]
   35938:	add	x16, x16, #0x488
   3593c:	br	x17

0000000000035940 <aarch64_ins_sve_addr_ri_s6xvl@plt>:
   35940:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35944:	ldr	x17, [x16, #1168]
   35948:	add	x16, x16, #0x490
   3594c:	br	x17

0000000000035950 <xexit@plt>:
   35950:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35954:	ldr	x17, [x16, #1176]
   35958:	add	x16, x16, #0x498
   3595c:	br	x17

0000000000035960 <aarch64_ext_imm_half@plt>:
   35960:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35964:	ldr	x17, [x16, #1184]
   35968:	add	x16, x16, #0x4a0
   3596c:	br	x17

0000000000035970 <disassembler_options_cmp@plt>:
   35970:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35974:	ldr	x17, [x16, #1192]
   35978:	add	x16, x16, #0x4a8
   3597c:	br	x17

0000000000035980 <aarch64_insert_operand@plt>:
   35980:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35984:	ldr	x17, [x16, #1200]
   35988:	add	x16, x16, #0x4b0
   3598c:	br	x17

0000000000035990 <aarch64_ins_sve_asimm@plt>:
   35990:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35994:	ldr	x17, [x16, #1208]
   35998:	add	x16, x16, #0x4b8
   3599c:	br	x17

00000000000359a0 <xmalloc_failed@plt>:
   359a0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   359a4:	ldr	x17, [x16, #1216]
   359a8:	add	x16, x16, #0x4c0
   359ac:	br	x17

00000000000359b0 <aarch64_ins_reg_extended@plt>:
   359b0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   359b4:	ldr	x17, [x16, #1224]
   359b8:	add	x16, x16, #0x4c8
   359bc:	br	x17

00000000000359c0 <aarch64_ext_sve_addr_ri_s6xvl@plt>:
   359c0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   359c4:	ldr	x17, [x16, #1232]
   359c8:	add	x16, x16, #0x4d0
   359cc:	br	x17

00000000000359d0 <aarch64_ext_barrier@plt>:
   359d0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   359d4:	ldr	x17, [x16, #1240]
   359d8:	add	x16, x16, #0x4d8
   359dc:	br	x17

00000000000359e0 <dcgettext@plt>:
   359e0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   359e4:	ldr	x17, [x16, #1248]
   359e8:	add	x16, x16, #0x4e0
   359ec:	br	x17

00000000000359f0 <aarch64_ext_sve_float_half_one@plt>:
   359f0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   359f4:	ldr	x17, [x16, #1256]
   359f8:	add	x16, x16, #0x4e8
   359fc:	br	x17

0000000000035a00 <aarch64_sys_ins_reg_has_xt@plt>:
   35a00:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35a04:	ldr	x17, [x16, #1264]
   35a08:	add	x16, x16, #0x4f0
   35a0c:	br	x17

0000000000035a10 <_bfd_error_handler@plt>:
   35a10:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35a14:	ldr	x17, [x16, #1272]
   35a18:	add	x16, x16, #0x4f8
   35a1c:	br	x17

0000000000035a20 <aarch64_ins_sve_addr_zi_u5@plt>:
   35a20:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35a24:	ldr	x17, [x16, #1280]
   35a28:	add	x16, x16, #0x500
   35a2c:	br	x17

0000000000035a30 <aarch64_ins_sve_shlimm@plt>:
   35a30:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35a34:	ldr	x17, [x16, #1288]
   35a38:	add	x16, x16, #0x508
   35a3c:	br	x17

0000000000035a40 <aarch64_wide_constant_p@plt>:
   35a40:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35a44:	ldr	x17, [x16, #1296]
   35a48:	add	x16, x16, #0x510
   35a4c:	br	x17

0000000000035a50 <aarch64_ext_sve_addr_rz_xtw@plt>:
   35a50:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35a54:	ldr	x17, [x16, #1304]
   35a58:	add	x16, x16, #0x518
   35a5c:	br	x17

0000000000035a60 <aarch64_ext_regno_pair@plt>:
   35a60:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35a64:	ldr	x17, [x16, #1312]
   35a68:	add	x16, x16, #0x520
   35a6c:	br	x17

0000000000035a70 <aarch64_ext_ft@plt>:
   35a70:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35a74:	ldr	x17, [x16, #1320]
   35a78:	add	x16, x16, #0x528
   35a7c:	br	x17

0000000000035a80 <strncpy@plt>:
   35a80:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35a84:	ldr	x17, [x16, #1328]
   35a88:	add	x16, x16, #0x530
   35a8c:	br	x17

0000000000035a90 <aarch64_ext_reg_shifted@plt>:
   35a90:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35a94:	ldr	x17, [x16, #1336]
   35a98:	add	x16, x16, #0x538
   35a9c:	br	x17

0000000000035aa0 <aarch64_ins_ldst_reglist@plt>:
   35aa0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35aa4:	ldr	x17, [x16, #1344]
   35aa8:	add	x16, x16, #0x540
   35aac:	br	x17

0000000000035ab0 <aarch64_ext_sve_limm_mov@plt>:
   35ab0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35ab4:	ldr	x17, [x16, #1352]
   35ab8:	add	x16, x16, #0x548
   35abc:	br	x17

0000000000035ac0 <__assert_fail@plt>:
   35ac0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35ac4:	ldr	x17, [x16, #1360]
   35ac8:	add	x16, x16, #0x550
   35acc:	br	x17

0000000000035ad0 <aarch64_ins_sve_float_half_one@plt>:
   35ad0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35ad4:	ldr	x17, [x16, #1368]
   35ad8:	add	x16, x16, #0x558
   35adc:	br	x17

0000000000035ae0 <aarch64_find_next_alias_opcode@plt>:
   35ae0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35ae4:	ldr	x17, [x16, #1376]
   35ae8:	add	x16, x16, #0x560
   35aec:	br	x17

0000000000035af0 <aarch64_ext_imm_rotate1@plt>:
   35af0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35af4:	ldr	x17, [x16, #1384]
   35af8:	add	x16, x16, #0x568
   35afc:	br	x17

0000000000035b00 <aarch64_sys_reg_deprecated_p@plt>:
   35b00:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35b04:	ldr	x17, [x16, #1392]
   35b08:	add	x16, x16, #0x570
   35b0c:	br	x17

0000000000035b10 <aarch64_ext_advsimd_imm_modified@plt>:
   35b10:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35b14:	ldr	x17, [x16, #1400]
   35b18:	add	x16, x16, #0x578
   35b1c:	br	x17

0000000000035b20 <aarch64_ext_pstatefield@plt>:
   35b20:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35b24:	ldr	x17, [x16, #1408]
   35b28:	add	x16, x16, #0x580
   35b2c:	br	x17

0000000000035b30 <aarch64_ins_sve_addr_ri_s9xvl@plt>:
   35b30:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35b34:	ldr	x17, [x16, #1416]
   35b38:	add	x16, x16, #0x588
   35b3c:	br	x17

0000000000035b40 <aarch64_ext_simd_addr_post@plt>:
   35b40:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35b44:	ldr	x17, [x16, #1424]
   35b48:	add	x16, x16, #0x590
   35b4c:	br	x17

0000000000035b50 <aarch64_find_next_opcode@plt>:
   35b50:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35b54:	ldr	x17, [x16, #1432]
   35b58:	add	x16, x16, #0x598
   35b5c:	br	x17

0000000000035b60 <aarch64_ext_sve_addr_ri_u6@plt>:
   35b60:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35b64:	ldr	x17, [x16, #1440]
   35b68:	add	x16, x16, #0x5a0
   35b6c:	br	x17

0000000000035b70 <aarch64_extend_operator_p@plt>:
   35b70:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35b74:	ldr	x17, [x16, #1448]
   35b78:	add	x16, x16, #0x5a8
   35b7c:	br	x17

0000000000035b80 <fprintf@plt>:
   35b80:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35b84:	ldr	x17, [x16, #1456]
   35b88:	add	x16, x16, #0x5b0
   35b8c:	br	x17

0000000000035b90 <aarch64_ext_cond@plt>:
   35b90:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35b94:	ldr	x17, [x16, #1464]
   35b98:	add	x16, x16, #0x5b8
   35b9c:	br	x17

0000000000035ba0 <aarch64_find_alias_opcode@plt>:
   35ba0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35ba4:	ldr	x17, [x16, #1472]
   35ba8:	add	x16, x16, #0x5c0
   35bac:	br	x17

0000000000035bb0 <aarch64_get_operand_modifier_from_value@plt>:
   35bb0:	adrp	x16, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35bb4:	ldr	x17, [x16, #1480]
   35bb8:	add	x16, x16, #0x5c8
   35bbc:	br	x17

Disassembly of section .text:

0000000000035bc0 <buffer_read_memory@@Base-0xd4>:
   35bc0:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   35bc4:	ldr	x0, [x0, #3928]
   35bc8:	cbz	x0, 35bd0 <aarch64_get_operand_modifier_from_value@plt+0x20>
   35bcc:	b	35640 <__gmon_start__@plt>
   35bd0:	ret
   35bd4:	nop
   35bd8:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   35bdc:	add	x0, x0, #0x660
   35be0:	adrp	x1, fa000 <aarch64_opcode_table@@Base+0x55a20>
   35be4:	add	x1, x1, #0x660
   35be8:	cmp	x1, x0
   35bec:	b.eq	35c04 <aarch64_get_operand_modifier_from_value@plt+0x54>  // b.none
   35bf0:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   35bf4:	ldr	x1, [x1, #3800]
   35bf8:	cbz	x1, 35c04 <aarch64_get_operand_modifier_from_value@plt+0x54>
   35bfc:	mov	x16, x1
   35c00:	br	x16
   35c04:	ret
   35c08:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   35c0c:	add	x0, x0, #0x660
   35c10:	adrp	x1, fa000 <aarch64_opcode_table@@Base+0x55a20>
   35c14:	add	x1, x1, #0x660
   35c18:	sub	x1, x1, x0
   35c1c:	lsr	x2, x1, #63
   35c20:	add	x1, x2, x1, asr #3
   35c24:	cmp	xzr, x1, asr #1
   35c28:	asr	x1, x1, #1
   35c2c:	b.eq	35c44 <aarch64_get_operand_modifier_from_value@plt+0x94>  // b.none
   35c30:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   35c34:	ldr	x2, [x2, #4048]
   35c38:	cbz	x2, 35c44 <aarch64_get_operand_modifier_from_value@plt+0x94>
   35c3c:	mov	x16, x2
   35c40:	br	x16
   35c44:	ret
   35c48:	stp	x29, x30, [sp, #-32]!
   35c4c:	mov	x29, sp
   35c50:	str	x19, [sp, #16]
   35c54:	adrp	x19, fa000 <aarch64_opcode_table@@Base+0x55a20>
   35c58:	ldrb	w0, [x19, #1632]
   35c5c:	cbnz	w0, 35c84 <aarch64_get_operand_modifier_from_value@plt+0xd4>
   35c60:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   35c64:	ldr	x0, [x0, #3824]
   35c68:	cbz	x0, 35c78 <aarch64_get_operand_modifier_from_value@plt+0xc8>
   35c6c:	adrp	x0, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   35c70:	ldr	x0, [x0, #1488]
   35c74:	bl	35210 <__cxa_finalize@plt>
   35c78:	bl	35bd8 <aarch64_get_operand_modifier_from_value@plt+0x28>
   35c7c:	mov	w0, #0x1                   	// #1
   35c80:	strb	w0, [x19, #1632]
   35c84:	ldr	x19, [sp, #16]
   35c88:	ldp	x29, x30, [sp], #32
   35c8c:	ret
   35c90:	b	35c08 <aarch64_get_operand_modifier_from_value@plt+0x58>

0000000000035c94 <buffer_read_memory@@Base>:
   35c94:	mov	x4, x0
   35c98:	mov	x7, x1
   35c9c:	ldr	w6, [x3, #180]
   35ca0:	mov	w1, w6
   35ca4:	ldr	x5, [x3, #160]
   35ca8:	udiv	x5, x5, x1
   35cac:	ldr	x0, [x3, #152]
   35cb0:	sub	x8, x4, x0
   35cb4:	cmp	x8, x5
   35cb8:	ccmp	x0, x4, #0x2, ls  // ls = plast
   35cbc:	b.hi	35d18 <buffer_read_memory@@Base+0x84>  // b.pmore
   35cc0:	udiv	w6, w2, w6
   35cc4:	add	x9, x8, x6
   35cc8:	mov	w0, #0x5                   	// #5
   35ccc:	cmp	x9, x5
   35cd0:	b.hi	35d20 <buffer_read_memory@@Base+0x8c>  // b.pmore
   35cd4:	ldr	x5, [x3, #232]
   35cd8:	cbz	x5, 35cf0 <buffer_read_memory@@Base+0x5c>
   35cdc:	cmp	x5, x4
   35ce0:	b.ls	35d20 <buffer_read_memory@@Base+0x8c>  // b.plast
   35ce4:	add	x6, x6, x4
   35ce8:	cmp	x5, x6
   35cec:	b.cc	35d20 <buffer_read_memory@@Base+0x8c>  // b.lo, b.ul, b.last
   35cf0:	stp	x29, x30, [sp, #-16]!
   35cf4:	mov	x29, sp
   35cf8:	ldr	x0, [x3, #144]
   35cfc:	mov	w2, w2
   35d00:	madd	x1, x1, x8, x0
   35d04:	mov	x0, x7
   35d08:	bl	35050 <memcpy@plt>
   35d0c:	mov	w0, #0x0                   	// #0
   35d10:	ldp	x29, x30, [sp], #16
   35d14:	ret
   35d18:	mov	w0, #0x5                   	// #5
   35d1c:	ret
   35d20:	ret

0000000000035d24 <perror_memory@@Base>:
   35d24:	stp	x29, x30, [sp, #-80]!
   35d28:	mov	x29, sp
   35d2c:	stp	x19, x20, [sp, #16]
   35d30:	str	x21, [sp, #32]
   35d34:	mov	x19, x2
   35d38:	cmp	w0, #0x5
   35d3c:	b.eq	35d84 <perror_memory@@Base+0x60>  // b.none
   35d40:	mov	w20, w0
   35d44:	ldr	x21, [x2]
   35d48:	ldr	x19, [x2, #8]
   35d4c:	mov	w2, #0x5                   	// #5
   35d50:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   35d54:	add	x1, x1, #0x8f0
   35d58:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   35d5c:	add	x0, x0, #0x908
   35d60:	bl	359e0 <dcgettext@plt>
   35d64:	mov	w2, w20
   35d68:	mov	x1, x0
   35d6c:	mov	x0, x19
   35d70:	blr	x21
   35d74:	ldp	x19, x20, [sp, #16]
   35d78:	ldr	x21, [sp, #32]
   35d7c:	ldp	x29, x30, [sp], #80
   35d80:	ret
   35d84:	add	x20, sp, #0x30
   35d88:	mov	x2, x1
   35d8c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   35d90:	add	x1, x1, #0x910
   35d94:	mov	x0, x20
   35d98:	bl	35230 <sprintf@plt>
   35d9c:	ldr	x21, [x19]
   35da0:	ldr	x19, [x19, #8]
   35da4:	mov	w2, #0x5                   	// #5
   35da8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   35dac:	add	x1, x1, #0x918
   35db0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   35db4:	add	x0, x0, #0x908
   35db8:	bl	359e0 <dcgettext@plt>
   35dbc:	mov	x2, x20
   35dc0:	mov	x1, x0
   35dc4:	mov	x0, x19
   35dc8:	blr	x21
   35dcc:	b	35d74 <perror_memory@@Base+0x50>

0000000000035dd0 <generic_print_address@@Base>:
   35dd0:	stp	x29, x30, [sp, #-64]!
   35dd4:	mov	x29, sp
   35dd8:	stp	x19, x20, [sp, #16]
   35ddc:	mov	x19, x1
   35de0:	add	x20, sp, #0x20
   35de4:	mov	x2, x0
   35de8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   35dec:	add	x1, x1, #0x910
   35df0:	mov	x0, x20
   35df4:	bl	35230 <sprintf@plt>
   35df8:	ldr	x3, [x19]
   35dfc:	mov	x2, x20
   35e00:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   35e04:	add	x1, x1, #0x938
   35e08:	ldr	x0, [x19, #8]
   35e0c:	blr	x3
   35e10:	ldp	x19, x20, [sp, #16]
   35e14:	ldp	x29, x30, [sp], #64
   35e18:	ret

0000000000035e1c <generic_symbol_at_address@@Base>:
   35e1c:	mov	w0, #0x1                   	// #1
   35e20:	ret

0000000000035e24 <generic_symbol_is_valid@@Base>:
   35e24:	mov	w0, #0x1                   	// #1
   35e28:	ret

0000000000035e2c <disassembler@@Base>:
   35e2c:	cmp	w0, #0x21
   35e30:	b.eq	35e48 <disassembler@@Base+0x1c>  // b.none
   35e34:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   35e38:	ldr	x1, [x1, #4024]
   35e3c:	cmp	w0, #0x52
   35e40:	csel	x0, x1, xzr, eq  // eq = none
   35e44:	ret
   35e48:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   35e4c:	ldr	x2, [x0, #3952]
   35e50:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   35e54:	ldr	x0, [x0, #3808]
   35e58:	cmp	w1, #0x0
   35e5c:	csel	x0, x0, x2, ne  // ne = any
   35e60:	b	35e44 <disassembler@@Base+0x18>

0000000000035e64 <disassembler_usage@@Base>:
   35e64:	stp	x29, x30, [sp, #-32]!
   35e68:	mov	x29, sp
   35e6c:	str	x19, [sp, #16]
   35e70:	mov	x19, x0
   35e74:	bl	35890 <print_aarch64_disassembler_options@plt>
   35e78:	mov	x0, x19
   35e7c:	bl	354a0 <print_arm_disassembler_options@plt>
   35e80:	ldr	x19, [sp, #16]
   35e84:	ldp	x29, x30, [sp], #32
   35e88:	ret

0000000000035e8c <disassemble_init_for_target@@Base>:
   35e8c:	cbz	x0, 35eb8 <disassemble_init_for_target@@Base+0x2c>
   35e90:	ldr	w1, [x0, #28]
   35e94:	cmp	w1, #0x21
   35e98:	b.eq	35ebc <disassemble_init_for_target@@Base+0x30>  // b.none
   35e9c:	cmp	w1, #0x52
   35ea0:	b.ne	35eb8 <disassemble_init_for_target@@Base+0x2c>  // b.any
   35ea4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   35ea8:	ldr	x1, [x1, #3856]
   35eac:	str	x1, [x0, #136]
   35eb0:	mov	w1, #0x1                   	// #1
   35eb4:	str	w1, [x0, #192]
   35eb8:	ret
   35ebc:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   35ec0:	ldr	x1, [x1, #3912]
   35ec4:	str	x1, [x0, #136]
   35ec8:	mov	w1, #0x1                   	// #1
   35ecc:	str	w1, [x0, #192]
   35ed0:	b	35eb8 <disassemble_init_for_target@@Base+0x2c>

0000000000035ed4 <disassemble_free_target@@Base>:
   35ed4:	ret

0000000000035ed8 <remove_whitespace_and_extra_commas@@Base>:
   35ed8:	stp	x29, x30, [sp, #-64]!
   35edc:	mov	x29, sp
   35ee0:	stp	x19, x20, [sp, #16]
   35ee4:	mov	x19, x0
   35ee8:	cbz	x0, 35ff8 <remove_whitespace_and_extra_commas@@Base+0x120>
   35eec:	bl	350a0 <strlen@plt>
   35ef0:	cbz	x0, 35f20 <remove_whitespace_and_extra_commas@@Base+0x48>
   35ef4:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   35ef8:	ldr	x3, [x3, #3880]
   35efc:	sub	x0, x0, #0x1
   35f00:	ldrb	w2, [x19, x0]
   35f04:	ldrh	w1, [x3, w2, sxtw #1]
   35f08:	and	w1, w1, #0x40
   35f0c:	cmp	w2, #0x2c
   35f10:	ccmp	w1, #0x0, #0x0, ne  // ne = any
   35f14:	b.eq	35f20 <remove_whitespace_and_extra_commas@@Base+0x48>  // b.none
   35f18:	strb	wzr, [x19, x0]
   35f1c:	cbnz	x0, 35efc <remove_whitespace_and_extra_commas@@Base+0x24>
   35f20:	ldrb	w0, [x19]
   35f24:	mov	x1, x19
   35f28:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   35f2c:	ldr	x2, [x2, #3880]
   35f30:	mov	w3, #0x2c                  	// #44
   35f34:	cbnz	w0, 35f48 <remove_whitespace_and_extra_commas@@Base+0x70>
   35f38:	mov	x19, #0x0                   	// #0
   35f3c:	b	35ff8 <remove_whitespace_and_extra_commas@@Base+0x120>
   35f40:	ldrb	w0, [x1, #1]!
   35f44:	cbz	w0, 35f58 <remove_whitespace_and_extra_commas@@Base+0x80>
   35f48:	ldrh	w0, [x2, w0, sxtw #1]
   35f4c:	tbz	w0, #6, 35f40 <remove_whitespace_and_extra_commas@@Base+0x68>
   35f50:	strb	w3, [x1]
   35f54:	b	35f40 <remove_whitespace_and_extra_commas@@Base+0x68>
   35f58:	ldrb	w0, [x19]
   35f5c:	cbz	w0, 35f38 <remove_whitespace_and_extra_commas@@Base+0x60>
   35f60:	mov	x20, x19
   35f64:	b	35fac <remove_whitespace_and_extra_commas@@Base+0xd4>
   35f68:	mov	x21, x23
   35f6c:	mov	x0, x21
   35f70:	bl	350a0 <strlen@plt>
   35f74:	mov	x22, x0
   35f78:	cmp	x19, x20
   35f7c:	csel	x20, x19, x23, eq  // eq = none
   35f80:	mov	x2, x0
   35f84:	mov	x1, x21
   35f88:	mov	x0, x20
   35f8c:	bl	35060 <memmove@plt>
   35f90:	strb	wzr, [x20, x22]
   35f94:	ldp	x21, x22, [sp, #32]
   35f98:	ldr	x23, [sp, #48]
   35f9c:	add	x1, x20, #0x1
   35fa0:	ldrb	w0, [x20, #1]
   35fa4:	cbz	w0, 35fec <remove_whitespace_and_extra_commas@@Base+0x114>
   35fa8:	mov	x20, x1
   35fac:	cmp	w0, #0x2c
   35fb0:	b.ne	35f9c <remove_whitespace_and_extra_commas@@Base+0xc4>  // b.any
   35fb4:	ldrb	w0, [x20, #1]
   35fb8:	cmp	w0, #0x2c
   35fbc:	ccmp	x19, x20, #0x4, ne  // ne = any
   35fc0:	b.ne	35f9c <remove_whitespace_and_extra_commas@@Base+0xc4>  // b.any
   35fc4:	stp	x21, x22, [sp, #32]
   35fc8:	str	x23, [sp, #48]
   35fcc:	add	x23, x20, #0x1
   35fd0:	cmp	w0, #0x2c
   35fd4:	b.ne	35f68 <remove_whitespace_and_extra_commas@@Base+0x90>  // b.any
   35fd8:	mov	x21, x23
   35fdc:	ldrb	w0, [x21, #1]!
   35fe0:	cmp	w0, #0x2c
   35fe4:	b.eq	35fdc <remove_whitespace_and_extra_commas@@Base+0x104>  // b.none
   35fe8:	b	35f6c <remove_whitespace_and_extra_commas@@Base+0x94>
   35fec:	ldrb	w0, [x19]
   35ff0:	cmp	w0, #0x0
   35ff4:	csel	x19, x19, xzr, ne  // ne = any
   35ff8:	mov	x0, x19
   35ffc:	ldp	x19, x20, [sp, #16]
   36000:	ldp	x29, x30, [sp], #64
   36004:	ret

0000000000036008 <disassembler_options_cmp@@Base>:
   36008:	mov	x4, #0x0                   	// #0
   3600c:	mov	w5, #0x0                   	// #0
   36010:	ldrb	w2, [x0, x4]
   36014:	cmp	w2, #0x2c
   36018:	csel	w2, w2, w5, ne  // ne = any
   3601c:	ldrb	w3, [x1, x4]
   36020:	cmp	w3, #0x2c
   36024:	b.eq	36048 <disassembler_options_cmp@@Base+0x40>  // b.none
   36028:	cbz	w2, 36040 <disassembler_options_cmp@@Base+0x38>
   3602c:	add	x4, x4, #0x1
   36030:	cmp	w2, w3
   36034:	b.eq	36010 <disassembler_options_cmp@@Base+0x8>  // b.none
   36038:	b	36050 <disassembler_options_cmp@@Base+0x48>
   3603c:	mov	w3, w2
   36040:	neg	w0, w3
   36044:	b	36054 <disassembler_options_cmp@@Base+0x4c>
   36048:	cbz	w2, 3603c <disassembler_options_cmp@@Base+0x34>
   3604c:	mov	w3, #0x0                   	// #0
   36050:	sub	w0, w2, w3
   36054:	ret

0000000000036058 <init_disassemble_info@@Base>:
   36058:	stp	x29, x30, [sp, #-48]!
   3605c:	mov	x29, sp
   36060:	stp	x19, x20, [sp, #16]
   36064:	str	x21, [sp, #32]
   36068:	mov	x19, x0
   3606c:	mov	x20, x1
   36070:	mov	x21, x2
   36074:	mov	x2, #0xe8                  	// #232
   36078:	mov	w1, #0x0                   	// #0
   3607c:	add	x0, x0, #0x10
   36080:	bl	35470 <memset@plt>
   36084:	mov	w0, #0x2                   	// #2
   36088:	str	w0, [x19, #40]
   3608c:	str	w0, [x19, #44]
   36090:	mov	w1, #0x1                   	// #1
   36094:	str	w1, [x19, #180]
   36098:	str	x21, [x19]
   3609c:	str	x20, [x19, #8]
   360a0:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   360a4:	ldr	x1, [x1, #3976]
   360a8:	str	x1, [x19, #104]
   360ac:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   360b0:	ldr	x1, [x1, #3816]
   360b4:	str	x1, [x19, #112]
   360b8:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   360bc:	ldr	x1, [x1, #3784]
   360c0:	str	x1, [x19, #120]
   360c4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   360c8:	ldr	x1, [x1, #3936]
   360cc:	str	x1, [x19, #128]
   360d0:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   360d4:	ldr	x1, [x1, #3872]
   360d8:	str	x1, [x19, #136]
   360dc:	str	w0, [x19, #176]
   360e0:	ldp	x19, x20, [sp, #16]
   360e4:	ldr	x21, [sp, #32]
   360e8:	ldp	x29, x30, [sp], #48
   360ec:	ret
   360f0:	stp	x29, x30, [sp, #-32]!
   360f4:	mov	x29, sp
   360f8:	str	x19, [sp, #16]
   360fc:	mov	x19, x0
   36100:	ldr	x0, [x0, #8]
   36104:	bl	35170 <aarch64_num_of_operands@plt>
   36108:	mov	w7, w0
   3610c:	mov	x8, #0x0                   	// #0
   36110:	mov	w0, #0x0                   	// #0
   36114:	mov	w9, #0x0                   	// #0
   36118:	b	36134 <init_disassemble_info@@Base+0xdc>
   3611c:	cmp	w7, w3
   36120:	b.eq	36184 <init_disassemble_info@@Base+0x12c>  // b.none
   36124:	add	w0, w0, #0x1
   36128:	add	x8, x8, #0x6
   3612c:	cmp	w0, #0xa
   36130:	b.eq	36180 <init_disassemble_info@@Base+0x128>  // b.none
   36134:	mov	w3, w9
   36138:	cmp	w7, #0x0
   3613c:	b.le	3611c <init_disassemble_info@@Base+0xc4>
   36140:	ldr	x6, [x19, #8]
   36144:	add	x2, x19, #0x1c
   36148:	mov	x1, #0x0                   	// #0
   3614c:	add	x3, x8, #0x38
   36150:	add	x6, x6, x3
   36154:	mov	w3, w1
   36158:	ldrb	w5, [x6, x1]
   3615c:	ldrb	w4, [x2]
   36160:	cmp	w5, w4
   36164:	b.ne	3611c <init_disassemble_info@@Base+0xc4>  // b.any
   36168:	add	w3, w1, #0x1
   3616c:	add	x1, x1, #0x1
   36170:	add	x2, x2, #0x38
   36174:	cmp	w7, w1
   36178:	b.gt	36154 <init_disassemble_info@@Base+0xfc>
   3617c:	b	3611c <init_disassemble_info@@Base+0xc4>
   36180:	bl	35670 <abort@plt>
   36184:	ldr	x19, [sp, #16]
   36188:	ldp	x29, x30, [sp], #32
   3618c:	ret
   36190:	stp	x29, x30, [sp, #-96]!
   36194:	mov	x29, sp
   36198:	str	x3, [sp, #56]
   3619c:	str	x4, [sp, #64]
   361a0:	str	x5, [sp, #72]
   361a4:	str	x6, [sp, #80]
   361a8:	str	x7, [sp, #88]
   361ac:	add	x3, sp, #0x60
   361b0:	str	x3, [sp, #16]
   361b4:	str	x3, [sp, #24]
   361b8:	add	x3, sp, #0x30
   361bc:	str	x3, [sp, #32]
   361c0:	str	wzr, [sp, #44]
   361c4:	mov	w3, #0xffffffe0            	// #-32
   361c8:	str	w3, [sp, #40]
   361cc:	cmp	w3, #0x0
   361d0:	b.le	36210 <init_disassemble_info@@Base+0x1b8>
   361d4:	add	x4, sp, #0x60
   361d8:	add	x3, x4, #0x8
   361dc:	str	x3, [sp, #16]
   361e0:	ldr	w3, [x4]
   361e4:	cmp	w3, #0x5
   361e8:	b.hi	3621c <init_disassemble_info@@Base+0x1c4>  // b.pmore
   361ec:	sub	w5, w3, #0x1
   361f0:	cbz	w3, 362fc <init_disassemble_info@@Base+0x2a4>
   361f4:	ldr	x10, [sp, #24]
   361f8:	adrp	x7, a3000 <aarch64_operands@@Base+0x16bc0>
   361fc:	ldr	x8, [x7, #3944]
   36200:	mov	x7, x8
   36204:	mov	w9, #0xffffffff            	// #-1
   36208:	mvn	w6, w2
   3620c:	b	362b4 <init_disassemble_info@@Base+0x25c>
   36210:	ldr	x4, [sp, #24]
   36214:	sub	x4, x4, #0x28
   36218:	b	361e0 <init_disassemble_info@@Base+0x188>
   3621c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36220:	add	x3, x3, #0x18
   36224:	mov	w2, #0x31                  	// #49
   36228:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3622c:	add	x1, x1, #0x940
   36230:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36234:	add	x0, x0, #0x960
   36238:	bl	35ac0 <__assert_fail@plt>
   3623c:	add	w4, w3, #0x8
   36240:	str	w4, [sp, #40]
   36244:	cmp	w4, #0x0
   36248:	b.le	362d0 <init_disassemble_info@@Base+0x278>
   3624c:	add	x3, x2, #0xb
   36250:	and	x3, x3, #0xfffffffffffffff8
   36254:	str	x3, [sp, #16]
   36258:	ldr	w2, [x2]
   3625c:	add	x3, x8, w2, uxtw #3
   36260:	ldr	w3, [x3, #4]
   36264:	sub	w4, w3, #0x1
   36268:	cmp	w4, #0x1e
   3626c:	b.hi	362d8 <init_disassemble_info@@Base+0x280>  // b.pmore
   36270:	ubfiz	x2, x2, #3, #32
   36274:	ldr	w4, [x7, x2]
   36278:	tbnz	w4, #31, 362d8 <init_disassemble_info@@Base+0x280>
   3627c:	add	w2, w3, w4
   36280:	cmp	w2, #0x20
   36284:	b.gt	362d8 <init_disassemble_info@@Base+0x280>
   36288:	lsl	w2, w9, w3
   3628c:	bic	w2, w1, w2
   36290:	lsl	w2, w2, w4
   36294:	and	w2, w6, w2
   36298:	ldr	w4, [x0]
   3629c:	orr	w2, w4, w2
   362a0:	str	w2, [x0]
   362a4:	lsr	w1, w1, w3
   362a8:	sub	w5, w5, #0x1
   362ac:	cmn	w5, #0x1
   362b0:	b.eq	362fc <init_disassemble_info@@Base+0x2a4>  // b.none
   362b4:	ldr	w3, [sp, #40]
   362b8:	ldr	x2, [sp, #16]
   362bc:	tbnz	w3, #31, 3623c <init_disassemble_info@@Base+0x1e4>
   362c0:	add	x3, x2, #0xb
   362c4:	and	x3, x3, #0xfffffffffffffff8
   362c8:	str	x3, [sp, #16]
   362cc:	b	36258 <init_disassemble_info@@Base+0x200>
   362d0:	add	x2, x10, w3, sxtw
   362d4:	b	36258 <init_disassemble_info@@Base+0x200>
   362d8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   362dc:	add	x3, x3, #0x18
   362e0:	add	x3, x3, #0x10
   362e4:	mov	w2, #0x169                 	// #361
   362e8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   362ec:	add	x1, x1, #0x970
   362f0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   362f4:	add	x0, x0, #0x990
   362f8:	bl	35ac0 <__assert_fail@plt>
   362fc:	ldp	x29, x30, [sp], #96
   36300:	ret
   36304:	stp	x29, x30, [sp, #-64]!
   36308:	mov	x29, sp
   3630c:	stp	x19, x20, [sp, #16]
   36310:	stp	x21, x22, [sp, #32]
   36314:	mov	x19, x0
   36318:	mov	x21, x2
   3631c:	mov	w20, w4
   36320:	ldr	x22, [x1, #16]
   36324:	ldrb	w0, [x3, #28]
   36328:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3632c:	cmp	w20, #0x0
   36330:	add	x2, sp, #0x3c
   36334:	and	w1, w0, #0xff
   36338:	cinv	x0, x22, ne  // ne = any
   3633c:	bl	35400 <aarch64_logical_immediate_p@plt>
   36340:	cbz	w0, 36378 <init_disassemble_info@@Base+0x320>
   36344:	ldr	w6, [x19, #20]
   36348:	ldr	w5, [x19, #24]
   3634c:	ldr	w4, [x19, #28]
   36350:	mov	w3, #0x3                   	// #3
   36354:	mov	w2, #0x0                   	// #0
   36358:	ldr	w1, [sp, #60]
   3635c:	mov	x0, x21
   36360:	bl	36190 <init_disassemble_info@@Base+0x138>
   36364:	mov	w0, #0x1                   	// #1
   36368:	ldp	x19, x20, [sp, #16]
   3636c:	ldp	x21, x22, [sp, #32]
   36370:	ldp	x29, x30, [sp], #64
   36374:	ret
   36378:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3637c:	add	x3, x3, #0x18
   36380:	add	x3, x3, #0x20
   36384:	mov	w2, #0x220                 	// #544
   36388:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3638c:	add	x1, x1, #0x940
   36390:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36394:	add	x0, x0, #0x9f0
   36398:	bl	35ac0 <__assert_fail@plt>
   3639c:	add	x3, x0, #0x20
   363a0:	add	x4, x0, #0x10
   363a4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   363a8:	ldr	x9, [x0, #3944]
   363ac:	mov	x6, x9
   363b0:	mov	w8, #0xffffffff            	// #-1
   363b4:	b	363f0 <init_disassemble_info@@Base+0x398>
   363b8:	stp	x29, x30, [sp, #-16]!
   363bc:	mov	x29, sp
   363c0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   363c4:	add	x3, x3, #0x18
   363c8:	add	x3, x3, #0x10
   363cc:	mov	w2, #0x169                 	// #361
   363d0:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   363d4:	add	x1, x1, #0x970
   363d8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   363dc:	add	x0, x0, #0x990
   363e0:	bl	35ac0 <__assert_fail@plt>
   363e4:	sub	x3, x3, #0x4
   363e8:	cmp	x3, x4
   363ec:	b.eq	36444 <init_disassemble_info@@Base+0x3ec>  // b.none
   363f0:	ldr	w0, [x3]
   363f4:	cbz	w0, 363e4 <init_disassemble_info@@Base+0x38c>
   363f8:	add	x5, x9, w0, uxtw #3
   363fc:	ldr	w5, [x5, #4]
   36400:	sub	w7, w5, #0x1
   36404:	cmp	w7, #0x1e
   36408:	b.hi	363b8 <init_disassemble_info@@Base+0x360>  // b.pmore
   3640c:	ubfiz	x0, x0, #3, #32
   36410:	ldr	w7, [x6, x0]
   36414:	tbnz	w7, #31, 363b8 <init_disassemble_info@@Base+0x360>
   36418:	add	w0, w5, w7
   3641c:	cmp	w0, #0x20
   36420:	b.gt	363b8 <init_disassemble_info@@Base+0x360>
   36424:	lsl	w0, w8, w5
   36428:	bic	w0, w2, w0
   3642c:	lsl	w0, w0, w7
   36430:	ldr	w7, [x1]
   36434:	orr	w0, w7, w0
   36438:	str	w0, [x1]
   3643c:	lsr	w2, w2, w5
   36440:	b	363e4 <init_disassemble_info@@Base+0x38c>
   36444:	ret
   36448:	stp	x29, x30, [sp, #-16]!
   3644c:	mov	x29, sp
   36450:	ldr	w5, [x0, #20]
   36454:	ldr	w7, [x1, #16]
   36458:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   3645c:	ldr	x4, [x4, #3944]
   36460:	add	x4, x4, w5, uxtw #3
   36464:	ldr	w4, [x4, #4]
   36468:	sub	w6, w4, #0x1
   3646c:	cmp	w6, #0x1e
   36470:	b.hi	36568 <init_disassemble_info@@Base+0x510>  // b.pmore
   36474:	ubfiz	x5, x5, #3, #32
   36478:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   3647c:	ldr	x6, [x6, #3944]
   36480:	ldr	w5, [x6, x5]
   36484:	tbnz	w5, #31, 36568 <init_disassemble_info@@Base+0x510>
   36488:	add	w3, w4, w5
   3648c:	cmp	w3, #0x20
   36490:	b.gt	36568 <init_disassemble_info@@Base+0x510>
   36494:	mov	w3, #0xffffffff            	// #-1
   36498:	lsl	w3, w3, w4
   3649c:	bic	w3, w7, w3
   364a0:	lsl	w3, w3, w5
   364a4:	ldr	w4, [x2]
   364a8:	orr	w3, w3, w4
   364ac:	str	w3, [x2]
   364b0:	ldr	w5, [x0, #24]
   364b4:	ldr	w7, [x1, #20]
   364b8:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   364bc:	ldr	x4, [x4, #3944]
   364c0:	add	x4, x4, w5, uxtw #3
   364c4:	ldr	w6, [x4, #4]
   364c8:	sub	w4, w6, #0x1
   364cc:	cmp	w4, #0x1e
   364d0:	b.hi	3658c <init_disassemble_info@@Base+0x534>  // b.pmore
   364d4:	ubfiz	x5, x5, #3, #32
   364d8:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   364dc:	ldr	x4, [x4, #3944]
   364e0:	ldr	w4, [x4, x5]
   364e4:	tbnz	w4, #31, 3658c <init_disassemble_info@@Base+0x534>
   364e8:	add	w5, w6, w4
   364ec:	cmp	w5, #0x20
   364f0:	b.gt	3658c <init_disassemble_info@@Base+0x534>
   364f4:	mov	w0, #0xffffffff            	// #-1
   364f8:	lsl	w0, w0, w6
   364fc:	bic	w0, w7, w0
   36500:	lsl	w0, w0, w4
   36504:	orr	w3, w0, w3
   36508:	str	w3, [x2]
   3650c:	ldr	x5, [x1, #40]
   36510:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   36514:	ldr	x1, [x1, #3944]
   36518:	ldr	w4, [x1, #852]
   3651c:	sub	w1, w4, #0x1
   36520:	cmp	w1, #0x1e
   36524:	b.hi	365b0 <init_disassemble_info@@Base+0x558>  // b.pmore
   36528:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3652c:	ldr	x1, [x1, #3944]
   36530:	ldr	w1, [x1, #848]
   36534:	tbnz	w1, #31, 365b0 <init_disassemble_info@@Base+0x558>
   36538:	add	w0, w4, w1
   3653c:	cmp	w0, #0x20
   36540:	b.gt	365b0 <init_disassemble_info@@Base+0x558>
   36544:	mov	w0, #0xffffffff            	// #-1
   36548:	lsl	w0, w0, w4
   3654c:	bic	w0, w5, w0
   36550:	lsl	w0, w0, w1
   36554:	orr	w3, w0, w3
   36558:	str	w3, [x2]
   3655c:	mov	w0, #0x1                   	// #1
   36560:	ldp	x29, x30, [sp], #16
   36564:	ret
   36568:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3656c:	add	x3, x3, #0x18
   36570:	add	x3, x3, #0x10
   36574:	mov	w2, #0x169                 	// #361
   36578:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3657c:	add	x1, x1, #0x970
   36580:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36584:	add	x0, x0, #0x990
   36588:	bl	35ac0 <__assert_fail@plt>
   3658c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36590:	add	x3, x3, #0x18
   36594:	add	x3, x3, #0x10
   36598:	mov	w2, #0x169                 	// #361
   3659c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   365a0:	add	x1, x1, #0x970
   365a4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   365a8:	add	x0, x0, #0x990
   365ac:	bl	35ac0 <__assert_fail@plt>
   365b0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   365b4:	add	x3, x3, #0x18
   365b8:	add	x3, x3, #0x10
   365bc:	mov	w2, #0x169                 	// #361
   365c0:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   365c4:	add	x1, x1, #0x970
   365c8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   365cc:	add	x0, x0, #0x990
   365d0:	bl	35ac0 <__assert_fail@plt>

00000000000365d4 <aarch64_ins_regno@@Base>:
   365d4:	ldr	w3, [x0, #20]
   365d8:	ldr	w5, [x1, #16]
   365dc:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   365e0:	ldr	x1, [x1, #3944]
   365e4:	add	x1, x1, w3, uxtw #3
   365e8:	ldr	w1, [x1, #4]
   365ec:	sub	w4, w1, #0x1
   365f0:	cmp	w4, #0x1e
   365f4:	b.hi	3663c <aarch64_ins_regno@@Base+0x68>  // b.pmore
   365f8:	ubfiz	x3, x3, #3, #32
   365fc:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   36600:	ldr	x4, [x4, #3944]
   36604:	ldr	w3, [x4, x3]
   36608:	tbnz	w3, #31, 3663c <aarch64_ins_regno@@Base+0x68>
   3660c:	add	w0, w1, w3
   36610:	cmp	w0, #0x20
   36614:	b.gt	3663c <aarch64_ins_regno@@Base+0x68>
   36618:	mov	w0, #0xffffffff            	// #-1
   3661c:	lsl	w0, w0, w1
   36620:	bic	w0, w5, w0
   36624:	lsl	w0, w0, w3
   36628:	ldr	w1, [x2]
   3662c:	orr	w0, w1, w0
   36630:	str	w0, [x2]
   36634:	mov	w0, #0x1                   	// #1
   36638:	ret
   3663c:	stp	x29, x30, [sp, #-16]!
   36640:	mov	x29, sp
   36644:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36648:	add	x3, x3, #0x18
   3664c:	add	x3, x3, #0x10
   36650:	mov	w2, #0x169                 	// #361
   36654:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36658:	add	x1, x1, #0x970
   3665c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36660:	add	x0, x0, #0x990
   36664:	bl	35ac0 <__assert_fail@plt>

0000000000036668 <aarch64_ins_reglane@@Base>:
   36668:	stp	x29, x30, [sp, #-16]!
   3666c:	mov	x29, sp
   36670:	mov	x9, x2
   36674:	ldr	w6, [x0, #20]
   36678:	ldr	w2, [x1, #16]
   3667c:	ldr	x0, [x3, #8]
   36680:	ldr	w8, [x0, #12]
   36684:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   36688:	ldr	x5, [x5, #3944]
   3668c:	add	x5, x5, w6, uxtw #3
   36690:	ldr	w5, [x5, #4]
   36694:	sub	w0, w5, #0x1
   36698:	cmp	w0, #0x1e
   3669c:	b.hi	3677c <aarch64_ins_reglane@@Base+0x114>  // b.pmore
   366a0:	ubfiz	x6, x6, #3, #32
   366a4:	adrp	x7, a3000 <aarch64_operands@@Base+0x16bc0>
   366a8:	ldr	x7, [x7, #3944]
   366ac:	ldr	w6, [x7, x6]
   366b0:	tbnz	w6, #31, 3677c <aarch64_ins_reglane@@Base+0x114>
   366b4:	add	w0, w5, w6
   366b8:	cmp	w0, #0x20
   366bc:	b.gt	3677c <aarch64_ins_reglane@@Base+0x114>
   366c0:	mov	w4, #0xffffffff            	// #-1
   366c4:	lsl	w4, w4, w5
   366c8:	bic	w4, w2, w4
   366cc:	lsl	w4, w4, w6
   366d0:	bic	w4, w4, w8
   366d4:	ldr	w0, [x9]
   366d8:	orr	w4, w4, w0
   366dc:	str	w4, [x9]
   366e0:	ldr	x2, [x3, #8]
   366e4:	ldr	w0, [x2, #16]
   366e8:	cmp	w0, #0x17
   366ec:	ccmp	w0, #0xa, #0x4, ne  // ne = any
   366f0:	b.ne	36870 <aarch64_ins_reglane@@Base+0x208>  // b.any
   366f4:	ldrb	w0, [x1, #4]
   366f8:	sub	w0, w0, #0x5
   366fc:	ldr	w3, [x1]
   36700:	cmp	w3, #0x20
   36704:	b.ne	36714 <aarch64_ins_reglane@@Base+0xac>  // b.any
   36708:	ldr	w2, [x2, #32]
   3670c:	cmp	w2, #0x1f
   36710:	b.eq	367a0 <aarch64_ins_reglane@@Base+0x138>  // b.none
   36714:	ldr	x1, [x1, #24]
   36718:	lsl	x1, x1, #1
   3671c:	orr	x1, x1, #0x1
   36720:	lsl	x0, x1, x0
   36724:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   36728:	ldr	x1, [x1, #3944]
   3672c:	ldr	w3, [x1, #348]
   36730:	sub	w1, w3, #0x1
   36734:	cmp	w1, #0x1e
   36738:	b.hi	3684c <aarch64_ins_reglane@@Base+0x1e4>  // b.pmore
   3673c:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   36740:	ldr	x1, [x1, #3944]
   36744:	ldr	w2, [x1, #344]
   36748:	tbnz	w2, #31, 3684c <aarch64_ins_reglane@@Base+0x1e4>
   3674c:	add	w1, w3, w2
   36750:	cmp	w1, #0x20
   36754:	b.gt	3684c <aarch64_ins_reglane@@Base+0x1e4>
   36758:	mov	w1, #0xffffffff            	// #-1
   3675c:	lsl	w1, w1, w3
   36760:	bic	w1, w0, w1
   36764:	lsl	w1, w1, w2
   36768:	orr	w4, w1, w4
   3676c:	str	w4, [x9]
   36770:	mov	w0, #0x1                   	// #1
   36774:	ldp	x29, x30, [sp], #16
   36778:	ret
   3677c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36780:	add	x3, x3, #0x18
   36784:	add	x3, x3, #0x10
   36788:	mov	w2, #0x169                 	// #361
   3678c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36790:	add	x1, x1, #0x970
   36794:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36798:	add	x0, x0, #0x990
   3679c:	bl	35ac0 <__assert_fail@plt>
   367a0:	ldr	w2, [x1, #8]
   367a4:	cmp	w2, #0x1
   367a8:	b.ne	36804 <aarch64_ins_reglane@@Base+0x19c>  // b.any
   367ac:	ldr	x2, [x1, #24]
   367b0:	lsl	x2, x2, x0
   367b4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   367b8:	ldr	x0, [x0, #3944]
   367bc:	ldr	w3, [x0, #324]
   367c0:	sub	w0, w3, #0x1
   367c4:	cmp	w0, #0x1e
   367c8:	b.hi	36828 <aarch64_ins_reglane@@Base+0x1c0>  // b.pmore
   367cc:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   367d0:	ldr	x0, [x0, #3944]
   367d4:	ldr	w1, [x0, #320]
   367d8:	tbnz	w1, #31, 36828 <aarch64_ins_reglane@@Base+0x1c0>
   367dc:	add	w0, w3, w1
   367e0:	cmp	w0, #0x20
   367e4:	b.gt	36828 <aarch64_ins_reglane@@Base+0x1c0>
   367e8:	mov	w0, #0xffffffff            	// #-1
   367ec:	lsl	w0, w0, w3
   367f0:	bic	w0, w2, w0
   367f4:	lsl	w0, w0, w1
   367f8:	orr	w4, w0, w4
   367fc:	str	w4, [x9]
   36800:	b	36770 <aarch64_ins_reglane@@Base+0x108>
   36804:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36808:	add	x3, x3, #0x18
   3680c:	add	x3, x3, #0x38
   36810:	mov	w2, #0x6e                  	// #110
   36814:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36818:	add	x1, x1, #0x940
   3681c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36820:	add	x0, x0, #0xa28
   36824:	bl	35ac0 <__assert_fail@plt>
   36828:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3682c:	add	x3, x3, #0x18
   36830:	add	x3, x3, #0x10
   36834:	mov	w2, #0x169                 	// #361
   36838:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3683c:	add	x1, x1, #0x970
   36840:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36844:	add	x0, x0, #0x990
   36848:	bl	35ac0 <__assert_fail@plt>
   3684c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36850:	add	x3, x3, #0x18
   36854:	add	x3, x3, #0x10
   36858:	mov	w2, #0x169                 	// #361
   3685c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36860:	add	x1, x1, #0x970
   36864:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36868:	add	x0, x0, #0x990
   3686c:	bl	35ac0 <__assert_fail@plt>
   36870:	cmp	w0, #0x5d
   36874:	b.eq	368d4 <aarch64_ins_reglane@@Base+0x26c>  // b.none
   36878:	cmp	w0, #0x5b
   3687c:	b.eq	36958 <aarch64_ins_reglane@@Base+0x2f0>  // b.none
   36880:	ldr	x0, [x1, #24]
   36884:	ldr	w3, [x2, #20]
   36888:	lsl	w2, w0, #1
   3688c:	cmp	w3, #0x50
   36890:	csel	w0, w0, w2, ne  // ne = any
   36894:	ldrb	w1, [x1, #4]
   36898:	cmp	w1, #0x7
   3689c:	b.eq	36a4c <aarch64_ins_reglane@@Base+0x3e4>  // b.none
   368a0:	cmp	w1, #0x8
   368a4:	b.eq	36a98 <aarch64_ins_reglane@@Base+0x430>  // b.none
   368a8:	cmp	w1, #0x6
   368ac:	b.eq	369fc <aarch64_ins_reglane@@Base+0x394>  // b.none
   368b0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   368b4:	add	x3, x3, #0x18
   368b8:	add	x3, x3, #0x38
   368bc:	mov	w2, #0xb1                  	// #177
   368c0:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   368c4:	add	x1, x1, #0x940
   368c8:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   368cc:	add	x0, x0, #0xb60
   368d0:	bl	35ac0 <__assert_fail@plt>
   368d4:	ldr	x6, [x1, #24]
   368d8:	ldrb	w0, [x1, #4]
   368dc:	sub	w0, w0, #0xa
   368e0:	cmp	w0, #0x1
   368e4:	b.hi	36934 <aarch64_ins_reglane@@Base+0x2cc>  // b.pmore
   368e8:	cmp	w6, #0x3
   368ec:	b.hi	36910 <aarch64_ins_reglane@@Base+0x2a8>  // b.pmore
   368f0:	mov	w5, #0x3d                  	// #61
   368f4:	mov	w4, #0x3e                  	// #62
   368f8:	mov	w3, #0x2                   	// #2
   368fc:	mov	w2, #0x0                   	// #0
   36900:	mov	w1, w6
   36904:	mov	x0, x9
   36908:	bl	36190 <init_disassemble_info@@Base+0x138>
   3690c:	b	36770 <aarch64_ins_reglane@@Base+0x108>
   36910:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36914:	add	x3, x3, #0x18
   36918:	add	x3, x3, #0x38
   3691c:	mov	w2, #0x87                  	// #135
   36920:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36924:	add	x1, x1, #0x940
   36928:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3692c:	add	x0, x0, #0xa38
   36930:	bl	35ac0 <__assert_fail@plt>
   36934:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36938:	add	x3, x3, #0x18
   3693c:	add	x3, x3, #0x38
   36940:	mov	w2, #0x8b                  	// #139
   36944:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36948:	add	x1, x1, #0x940
   3694c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   36950:	add	x0, x0, #0xb60
   36954:	bl	35ac0 <__assert_fail@plt>
   36958:	ldr	x3, [x1, #24]
   3695c:	cmp	w3, #0x3
   36960:	b.hi	369b4 <aarch64_ins_reglane@@Base+0x34c>  // b.pmore
   36964:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   36968:	ldr	x1, [x1, #3944]
   3696c:	ldr	w2, [x1, #996]
   36970:	sub	w0, w2, #0x1
   36974:	cmp	w0, #0x1e
   36978:	b.hi	369d8 <aarch64_ins_reglane@@Base+0x370>  // b.pmore
   3697c:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   36980:	ldr	x1, [x1, #3944]
   36984:	ldr	w1, [x1, #992]
   36988:	tbnz	w1, #31, 369d8 <aarch64_ins_reglane@@Base+0x370>
   3698c:	add	w0, w2, w1
   36990:	cmp	w0, #0x20
   36994:	b.gt	369d8 <aarch64_ins_reglane@@Base+0x370>
   36998:	mov	w0, #0xffffffff            	// #-1
   3699c:	lsl	w0, w0, w2
   369a0:	bic	w0, w3, w0
   369a4:	lsl	w0, w0, w1
   369a8:	orr	w4, w0, w4
   369ac:	str	w4, [x9]
   369b0:	b	36770 <aarch64_ins_reglane@@Base+0x108>
   369b4:	adrp	x3, 59000 <xexit@@Base+0x74c>
   369b8:	add	x3, x3, #0x18
   369bc:	add	x3, x3, #0x38
   369c0:	mov	w2, #0x92                  	// #146
   369c4:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   369c8:	add	x1, x1, #0x940
   369cc:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   369d0:	add	x0, x0, #0xa38
   369d4:	bl	35ac0 <__assert_fail@plt>
   369d8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   369dc:	add	x3, x3, #0x18
   369e0:	add	x3, x3, #0x10
   369e4:	mov	w2, #0x169                 	// #361
   369e8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   369ec:	add	x1, x1, #0x970
   369f0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   369f4:	add	x0, x0, #0x990
   369f8:	bl	35ac0 <__assert_fail@plt>
   369fc:	cmp	w0, #0x7
   36a00:	b.hi	36a28 <aarch64_ins_reglane@@Base+0x3c0>  // b.pmore
   36a04:	mov	w6, #0x3d                  	// #61
   36a08:	mov	w5, #0x3e                  	// #62
   36a0c:	mov	w4, #0x3f                  	// #63
   36a10:	mov	w3, #0x3                   	// #3
   36a14:	mov	w2, #0x0                   	// #0
   36a18:	mov	w1, w0
   36a1c:	mov	x0, x9
   36a20:	bl	36190 <init_disassemble_info@@Base+0x138>
   36a24:	b	36770 <aarch64_ins_reglane@@Base+0x108>
   36a28:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36a2c:	add	x3, x3, #0x18
   36a30:	add	x3, x3, #0x38
   36a34:	mov	w2, #0xa3                  	// #163
   36a38:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36a3c:	add	x1, x1, #0x940
   36a40:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36a44:	add	x0, x0, #0xa50
   36a48:	bl	35ac0 <__assert_fail@plt>
   36a4c:	cmp	w0, #0x3
   36a50:	b.hi	36a74 <aarch64_ins_reglane@@Base+0x40c>  // b.pmore
   36a54:	mov	w5, #0x3d                  	// #61
   36a58:	mov	w4, #0x3e                  	// #62
   36a5c:	mov	w3, #0x2                   	// #2
   36a60:	mov	w2, #0x0                   	// #0
   36a64:	mov	w1, w0
   36a68:	mov	x0, x9
   36a6c:	bl	36190 <init_disassemble_info@@Base+0x138>
   36a70:	b	36770 <aarch64_ins_reglane@@Base+0x108>
   36a74:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36a78:	add	x3, x3, #0x18
   36a7c:	add	x3, x3, #0x38
   36a80:	mov	w2, #0xa8                  	// #168
   36a84:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36a88:	add	x1, x1, #0x940
   36a8c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36a90:	add	x0, x0, #0xa38
   36a94:	bl	35ac0 <__assert_fail@plt>
   36a98:	cmp	w0, #0x1
   36a9c:	b.hi	36af0 <aarch64_ins_reglane@@Base+0x488>  // b.pmore
   36aa0:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   36aa4:	ldr	x1, [x1, #3944]
   36aa8:	ldr	w3, [x1, #492]
   36aac:	sub	w1, w3, #0x1
   36ab0:	cmp	w1, #0x1e
   36ab4:	b.hi	36b14 <aarch64_ins_reglane@@Base+0x4ac>  // b.pmore
   36ab8:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   36abc:	ldr	x1, [x1, #3944]
   36ac0:	ldr	w2, [x1, #488]
   36ac4:	tbnz	w2, #31, 36b14 <aarch64_ins_reglane@@Base+0x4ac>
   36ac8:	add	w1, w3, w2
   36acc:	cmp	w1, #0x20
   36ad0:	b.gt	36b14 <aarch64_ins_reglane@@Base+0x4ac>
   36ad4:	mov	w1, #0xffffffff            	// #-1
   36ad8:	lsl	w1, w1, w3
   36adc:	bic	w0, w0, w1
   36ae0:	lsl	w0, w0, w2
   36ae4:	orr	w4, w0, w4
   36ae8:	str	w4, [x9]
   36aec:	b	36770 <aarch64_ins_reglane@@Base+0x108>
   36af0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36af4:	add	x3, x3, #0x18
   36af8:	add	x3, x3, #0x38
   36afc:	mov	w2, #0xad                  	// #173
   36b00:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36b04:	add	x1, x1, #0x940
   36b08:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36b0c:	add	x0, x0, #0xa68
   36b10:	bl	35ac0 <__assert_fail@plt>
   36b14:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36b18:	add	x3, x3, #0x18
   36b1c:	add	x3, x3, #0x10
   36b20:	mov	w2, #0x169                 	// #361
   36b24:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36b28:	add	x1, x1, #0x970
   36b2c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36b30:	add	x0, x0, #0x990
   36b34:	bl	35ac0 <__assert_fail@plt>

0000000000036b38 <aarch64_ins_reglist@@Base>:
   36b38:	stp	x29, x30, [sp, #-16]!
   36b3c:	mov	x29, sp
   36b40:	ldr	w4, [x0, #20]
   36b44:	ldrb	w0, [x1, #16]
   36b48:	and	w5, w0, #0x1f
   36b4c:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   36b50:	ldr	x3, [x3, #3944]
   36b54:	add	x3, x3, w4, uxtw #3
   36b58:	ldr	w3, [x3, #4]
   36b5c:	sub	w0, w3, #0x1
   36b60:	cmp	w0, #0x1e
   36b64:	b.hi	36c08 <aarch64_ins_reglist@@Base+0xd0>  // b.pmore
   36b68:	ubfiz	x4, x4, #3, #32
   36b6c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   36b70:	ldr	x0, [x0, #3944]
   36b74:	ldr	w4, [x0, x4]
   36b78:	tbnz	w4, #31, 36c08 <aarch64_ins_reglist@@Base+0xd0>
   36b7c:	add	w0, w3, w4
   36b80:	cmp	w0, #0x20
   36b84:	b.gt	36c08 <aarch64_ins_reglist@@Base+0xd0>
   36b88:	mov	w0, #0xffffffff            	// #-1
   36b8c:	lsl	w0, w0, w3
   36b90:	bic	w0, w5, w0
   36b94:	lsl	w0, w0, w4
   36b98:	ldr	w3, [x2]
   36b9c:	orr	w0, w0, w3
   36ba0:	str	w0, [x2]
   36ba4:	ldrb	w1, [x1, #16]
   36ba8:	ubfx	x1, x1, #5, #3
   36bac:	sub	w3, w1, #0x1
   36bb0:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   36bb4:	ldr	x1, [x1, #3944]
   36bb8:	ldr	w5, [x1, #220]
   36bbc:	sub	w1, w5, #0x1
   36bc0:	cmp	w1, #0x1e
   36bc4:	b.hi	36c2c <aarch64_ins_reglist@@Base+0xf4>  // b.pmore
   36bc8:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   36bcc:	ldr	x4, [x4, #3944]
   36bd0:	ldr	w4, [x4, #216]
   36bd4:	tbnz	w4, #31, 36c2c <aarch64_ins_reglist@@Base+0xf4>
   36bd8:	add	w1, w5, w4
   36bdc:	cmp	w1, #0x20
   36be0:	b.gt	36c2c <aarch64_ins_reglist@@Base+0xf4>
   36be4:	mov	w1, #0xffffffff            	// #-1
   36be8:	lsl	w1, w1, w5
   36bec:	bic	w1, w3, w1
   36bf0:	lsl	w1, w1, w4
   36bf4:	orr	w0, w1, w0
   36bf8:	str	w0, [x2]
   36bfc:	mov	w0, #0x1                   	// #1
   36c00:	ldp	x29, x30, [sp], #16
   36c04:	ret
   36c08:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36c0c:	add	x3, x3, #0x18
   36c10:	add	x3, x3, #0x10
   36c14:	mov	w2, #0x169                 	// #361
   36c18:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36c1c:	add	x1, x1, #0x970
   36c20:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36c24:	add	x0, x0, #0x990
   36c28:	bl	35ac0 <__assert_fail@plt>
   36c2c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36c30:	add	x3, x3, #0x18
   36c34:	add	x3, x3, #0x10
   36c38:	mov	w2, #0x169                 	// #361
   36c3c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36c40:	add	x1, x1, #0x970
   36c44:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36c48:	add	x0, x0, #0x990
   36c4c:	bl	35ac0 <__assert_fail@plt>

0000000000036c50 <aarch64_ins_ldst_reglist@@Base>:
   36c50:	stp	x29, x30, [sp, #-16]!
   36c54:	mov	x29, sp
   36c58:	ldr	x0, [x3, #8]
   36c5c:	ldr	x3, [x0, #120]
   36c60:	lsr	x7, x3, #24
   36c64:	ubfx	w3, w3, #24, #3
   36c68:	ldrb	w0, [x1, #16]
   36c6c:	and	w5, w0, #0x1f
   36c70:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   36c74:	ldr	x4, [x4, #3944]
   36c78:	ldr	w4, [x4, #100]
   36c7c:	sub	w0, w4, #0x1
   36c80:	cmp	w0, #0x1e
   36c84:	b.hi	36cf8 <aarch64_ins_ldst_reglist@@Base+0xa8>  // b.pmore
   36c88:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   36c8c:	ldr	x0, [x0, #3944]
   36c90:	ldr	w6, [x0, #96]
   36c94:	tbnz	w6, #31, 36cf8 <aarch64_ins_ldst_reglist@@Base+0xa8>
   36c98:	add	w0, w4, w6
   36c9c:	cmp	w0, #0x20
   36ca0:	b.gt	36cf8 <aarch64_ins_ldst_reglist@@Base+0xa8>
   36ca4:	mov	w0, #0xffffffff            	// #-1
   36ca8:	lsl	w0, w0, w4
   36cac:	bic	w0, w5, w0
   36cb0:	lsl	w0, w0, w6
   36cb4:	ldr	w4, [x2]
   36cb8:	orr	w0, w0, w4
   36cbc:	str	w0, [x2]
   36cc0:	cmp	w3, #0x3
   36cc4:	b.eq	36e00 <aarch64_ins_ldst_reglist@@Base+0x1b0>  // b.none
   36cc8:	tbnz	w7, #2, 36d1c <aarch64_ins_ldst_reglist@@Base+0xcc>
   36ccc:	cmp	w3, #0x1
   36cd0:	b.eq	36d80 <aarch64_ins_ldst_reglist@@Base+0x130>  // b.none
   36cd4:	cmp	w3, #0x2
   36cd8:	b.ne	36ddc <aarch64_ins_ldst_reglist@@Base+0x18c>  // b.any
   36cdc:	ldrb	w1, [x1, #16]
   36ce0:	and	w1, w1, #0xe0
   36ce4:	cmp	w1, #0x80
   36ce8:	mov	w1, #0x3                   	// #3
   36cec:	mov	w5, #0x8                   	// #8
   36cf0:	csel	w5, w1, w5, eq  // eq = none
   36cf4:	b	36d28 <aarch64_ins_ldst_reglist@@Base+0xd8>
   36cf8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36cfc:	add	x3, x3, #0x18
   36d00:	add	x3, x3, #0x10
   36d04:	mov	w2, #0x169                 	// #361
   36d08:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36d0c:	add	x1, x1, #0x970
   36d10:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36d14:	add	x0, x0, #0x990
   36d18:	bl	35ac0 <__assert_fail@plt>
   36d1c:	mov	w5, #0x0                   	// #0
   36d20:	cmp	w3, #0x4
   36d24:	b.ne	36ddc <aarch64_ins_ldst_reglist@@Base+0x18c>  // b.any
   36d28:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   36d2c:	ldr	x3, [x3, #3944]
   36d30:	ldr	w3, [x3, #196]
   36d34:	sub	w1, w3, #0x1
   36d38:	cmp	w1, #0x1e
   36d3c:	b.hi	36e18 <aarch64_ins_ldst_reglist@@Base+0x1c8>  // b.pmore
   36d40:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   36d44:	ldr	x4, [x4, #3944]
   36d48:	ldr	w4, [x4, #192]
   36d4c:	tbnz	w4, #31, 36e18 <aarch64_ins_ldst_reglist@@Base+0x1c8>
   36d50:	add	w1, w3, w4
   36d54:	cmp	w1, #0x20
   36d58:	b.gt	36e18 <aarch64_ins_ldst_reglist@@Base+0x1c8>
   36d5c:	mov	w1, #0xffffffff            	// #-1
   36d60:	lsl	w1, w1, w3
   36d64:	bic	w1, w5, w1
   36d68:	lsl	w1, w1, w4
   36d6c:	orr	w0, w1, w0
   36d70:	str	w0, [x2]
   36d74:	mov	w0, #0x1                   	// #1
   36d78:	ldp	x29, x30, [sp], #16
   36d7c:	ret
   36d80:	ldrb	w1, [x1, #16]
   36d84:	ubfx	x1, x1, #5, #3
   36d88:	cmp	w1, #0x3
   36d8c:	b.eq	36e08 <aarch64_ins_ldst_reglist@@Base+0x1b8>  // b.none
   36d90:	b.hi	36dac <aarch64_ins_ldst_reglist@@Base+0x15c>  // b.pmore
   36d94:	cmp	w1, #0x1
   36d98:	b.eq	36e10 <aarch64_ins_ldst_reglist@@Base+0x1c0>  // b.none
   36d9c:	mov	w5, #0xa                   	// #10
   36da0:	cmp	w1, #0x2
   36da4:	b.eq	36d28 <aarch64_ins_ldst_reglist@@Base+0xd8>  // b.none
   36da8:	b	36db8 <aarch64_ins_ldst_reglist@@Base+0x168>
   36dac:	mov	w5, #0x2                   	// #2
   36db0:	cmp	w1, #0x4
   36db4:	b.eq	36d28 <aarch64_ins_ldst_reglist@@Base+0xd8>  // b.none
   36db8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36dbc:	add	x3, x3, #0x18
   36dc0:	add	x3, x3, #0x50
   36dc4:	mov	w2, #0xdd                  	// #221
   36dc8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36dcc:	add	x1, x1, #0x940
   36dd0:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   36dd4:	add	x0, x0, #0xb60
   36dd8:	bl	35ac0 <__assert_fail@plt>
   36ddc:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36de0:	add	x3, x3, #0x18
   36de4:	add	x3, x3, #0x50
   36de8:	mov	w2, #0xea                  	// #234
   36dec:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36df0:	add	x1, x1, #0x940
   36df4:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   36df8:	add	x0, x0, #0xb60
   36dfc:	bl	35ac0 <__assert_fail@plt>
   36e00:	mov	w5, #0x4                   	// #4
   36e04:	b	36d28 <aarch64_ins_ldst_reglist@@Base+0xd8>
   36e08:	mov	w5, #0x6                   	// #6
   36e0c:	b	36d28 <aarch64_ins_ldst_reglist@@Base+0xd8>
   36e10:	mov	w5, #0x7                   	// #7
   36e14:	b	36d28 <aarch64_ins_ldst_reglist@@Base+0xd8>
   36e18:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36e1c:	add	x3, x3, #0x18
   36e20:	add	x3, x3, #0x10
   36e24:	mov	w2, #0x169                 	// #361
   36e28:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36e2c:	add	x1, x1, #0x970
   36e30:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36e34:	add	x0, x0, #0x990
   36e38:	bl	35ac0 <__assert_fail@plt>

0000000000036e3c <aarch64_ins_ldst_reglist_r@@Base>:
   36e3c:	stp	x29, x30, [sp, #-16]!
   36e40:	mov	x29, sp
   36e44:	ldr	x0, [x3, #8]
   36e48:	ldr	x0, [x0, #120]
   36e4c:	ubfx	w4, w0, #24, #3
   36e50:	ldrb	w0, [x1, #16]
   36e54:	and	w5, w0, #0x1f
   36e58:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   36e5c:	ldr	x3, [x3, #3944]
   36e60:	ldr	w3, [x3, #100]
   36e64:	sub	w0, w3, #0x1
   36e68:	cmp	w0, #0x1e
   36e6c:	b.hi	36f0c <aarch64_ins_ldst_reglist_r@@Base+0xd0>  // b.pmore
   36e70:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   36e74:	ldr	x0, [x0, #3944]
   36e78:	ldr	w6, [x0, #96]
   36e7c:	tbnz	w6, #31, 36f0c <aarch64_ins_ldst_reglist_r@@Base+0xd0>
   36e80:	add	w0, w3, w6
   36e84:	cmp	w0, #0x20
   36e88:	b.gt	36f0c <aarch64_ins_ldst_reglist_r@@Base+0xd0>
   36e8c:	mov	w0, #0xffffffff            	// #-1
   36e90:	lsl	w0, w0, w3
   36e94:	bic	w0, w5, w0
   36e98:	lsl	w0, w0, w6
   36e9c:	ldr	w3, [x2]
   36ea0:	orr	w0, w0, w3
   36ea4:	str	w0, [x2]
   36ea8:	mov	w5, #0x0                   	// #0
   36eac:	cmp	w4, #0x1
   36eb0:	b.eq	36f30 <aarch64_ins_ldst_reglist_r@@Base+0xf4>  // b.none
   36eb4:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   36eb8:	ldr	x3, [x3, #3944]
   36ebc:	ldr	w4, [x3, #252]
   36ec0:	sub	w1, w4, #0x1
   36ec4:	cmp	w1, #0x1e
   36ec8:	b.hi	36f44 <aarch64_ins_ldst_reglist_r@@Base+0x108>  // b.pmore
   36ecc:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   36ed0:	ldr	x3, [x3, #3944]
   36ed4:	ldr	w3, [x3, #248]
   36ed8:	tbnz	w3, #31, 36f44 <aarch64_ins_ldst_reglist_r@@Base+0x108>
   36edc:	add	w1, w4, w3
   36ee0:	cmp	w1, #0x20
   36ee4:	b.gt	36f44 <aarch64_ins_ldst_reglist_r@@Base+0x108>
   36ee8:	mov	w1, #0xffffffff            	// #-1
   36eec:	lsl	w1, w1, w4
   36ef0:	bic	w1, w5, w1
   36ef4:	lsl	w1, w1, w3
   36ef8:	orr	w0, w1, w0
   36efc:	str	w0, [x2]
   36f00:	mov	w0, #0x1                   	// #1
   36f04:	ldp	x29, x30, [sp], #16
   36f08:	ret
   36f0c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36f10:	add	x3, x3, #0x18
   36f14:	add	x3, x3, #0x10
   36f18:	mov	w2, #0x169                 	// #361
   36f1c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36f20:	add	x1, x1, #0x970
   36f24:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36f28:	add	x0, x0, #0x990
   36f2c:	bl	35ac0 <__assert_fail@plt>
   36f30:	ldrb	w1, [x1, #16]
   36f34:	and	w1, w1, #0xe0
   36f38:	cmp	w1, #0x40
   36f3c:	cset	w5, eq  // eq = none
   36f40:	b	36eb4 <aarch64_ins_ldst_reglist_r@@Base+0x78>
   36f44:	adrp	x3, 59000 <xexit@@Base+0x74c>
   36f48:	add	x3, x3, #0x18
   36f4c:	add	x3, x3, #0x10
   36f50:	mov	w2, #0x169                 	// #361
   36f54:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   36f58:	add	x1, x1, #0x970
   36f5c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   36f60:	add	x0, x0, #0x990
   36f64:	bl	35ac0 <__assert_fail@plt>

0000000000036f68 <aarch64_ins_ldst_elemlist@@Base>:
   36f68:	stp	x29, x30, [sp, #-32]!
   36f6c:	mov	x29, sp
   36f70:	stp	x19, x20, [sp, #16]
   36f74:	ldrb	w0, [x1, #17]
   36f78:	tbz	w0, #0, 37008 <aarch64_ins_ldst_elemlist@@Base+0xa0>
   36f7c:	mov	x19, x2
   36f80:	ldrb	w0, [x1, #16]
   36f84:	and	w3, w0, #0x1f
   36f88:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   36f8c:	ldr	x2, [x2, #3944]
   36f90:	ldr	w4, [x2, #100]
   36f94:	sub	w0, w4, #0x1
   36f98:	cmp	w0, #0x1e
   36f9c:	b.hi	3702c <aarch64_ins_ldst_elemlist@@Base+0xc4>  // b.pmore
   36fa0:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   36fa4:	ldr	x2, [x2, #3944]
   36fa8:	ldr	w2, [x2, #96]
   36fac:	tbnz	w2, #31, 3702c <aarch64_ins_ldst_elemlist@@Base+0xc4>
   36fb0:	add	w0, w4, w2
   36fb4:	cmp	w0, #0x20
   36fb8:	b.gt	3702c <aarch64_ins_ldst_elemlist@@Base+0xc4>
   36fbc:	mov	w0, #0xffffffff            	// #-1
   36fc0:	lsl	w0, w0, w4
   36fc4:	bic	w0, w3, w0
   36fc8:	lsl	w0, w0, w2
   36fcc:	ldr	w2, [x19]
   36fd0:	orr	w0, w2, w0
   36fd4:	str	w0, [x19]
   36fd8:	ldrb	w0, [x1, #4]
   36fdc:	cmp	w0, #0x7
   36fe0:	b.eq	370dc <aarch64_ins_ldst_elemlist@@Base+0x174>  // b.none
   36fe4:	b.hi	37050 <aarch64_ins_ldst_elemlist@@Base+0xe8>  // b.pmore
   36fe8:	cmp	w0, #0x5
   36fec:	b.eq	3706c <aarch64_ins_ldst_elemlist@@Base+0x104>  // b.none
   36ff0:	cmp	w0, #0x6
   36ff4:	b.ne	370ec <aarch64_ins_ldst_elemlist@@Base+0x184>  // b.any
   36ff8:	ldr	x1, [x1, #24]
   36ffc:	lsl	w1, w1, #1
   37000:	mov	w20, #0x1                   	// #1
   37004:	b	37074 <aarch64_ins_ldst_elemlist@@Base+0x10c>
   37008:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3700c:	add	x3, x3, #0x18
   37010:	add	x3, x3, #0x70
   37014:	mov	w2, #0x117                 	// #279
   37018:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3701c:	add	x1, x1, #0x940
   37020:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37024:	add	x0, x0, #0xa80
   37028:	bl	35ac0 <__assert_fail@plt>
   3702c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37030:	add	x3, x3, #0x18
   37034:	add	x3, x3, #0x10
   37038:	mov	w2, #0x169                 	// #361
   3703c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37040:	add	x1, x1, #0x970
   37044:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37048:	add	x0, x0, #0x990
   3704c:	bl	35ac0 <__assert_fail@plt>
   37050:	cmp	w0, #0x8
   37054:	b.ne	370ec <aarch64_ins_ldst_elemlist@@Base+0x184>  // b.any
   37058:	ldr	x1, [x1, #24]
   3705c:	lsl	x1, x1, #3
   37060:	orr	w1, w1, #0x1
   37064:	mov	w20, #0x2                   	// #2
   37068:	b	37074 <aarch64_ins_ldst_elemlist@@Base+0x10c>
   3706c:	ldr	w1, [x1, #24]
   37070:	mov	w20, #0x0                   	// #0
   37074:	mov	w6, #0xb                   	// #11
   37078:	mov	w5, #0x1f                  	// #31
   3707c:	mov	w4, #0x9                   	// #9
   37080:	mov	w3, #0x3                   	// #3
   37084:	mov	w2, #0x0                   	// #0
   37088:	mov	x0, x19
   3708c:	bl	36190 <init_disassemble_info@@Base+0x138>
   37090:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   37094:	ldr	x0, [x0, #3944]
   37098:	ldr	w0, [x0, #212]
   3709c:	cmp	w0, #0x2
   370a0:	b.le	37110 <aarch64_ins_ldst_elemlist@@Base+0x1a8>
   370a4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   370a8:	ldr	x0, [x0, #3944]
   370ac:	ldr	w0, [x0, #208]
   370b0:	add	w0, w0, #0x1
   370b4:	cmp	w0, #0x1e
   370b8:	b.hi	37110 <aarch64_ins_ldst_elemlist@@Base+0x1a8>  // b.pmore
   370bc:	lsl	w20, w20, w0
   370c0:	ldr	w0, [x19]
   370c4:	orr	w0, w0, w20
   370c8:	str	w0, [x19]
   370cc:	mov	w0, #0x1                   	// #1
   370d0:	ldp	x19, x20, [sp, #16]
   370d4:	ldp	x29, x30, [sp], #32
   370d8:	ret
   370dc:	ldr	x1, [x1, #24]
   370e0:	lsl	w1, w1, #2
   370e4:	mov	w20, #0x2                   	// #2
   370e8:	b	37074 <aarch64_ins_ldst_elemlist@@Base+0x10c>
   370ec:	adrp	x3, 59000 <xexit@@Base+0x74c>
   370f0:	add	x3, x3, #0x18
   370f4:	add	x3, x3, #0x70
   370f8:	mov	w2, #0x133                 	// #307
   370fc:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37100:	add	x1, x1, #0x940
   37104:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   37108:	add	x0, x0, #0xb60
   3710c:	bl	35ac0 <__assert_fail@plt>
   37110:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37114:	add	x3, x3, #0x18
   37118:	add	x3, x3, #0x10
   3711c:	mov	w2, #0x169                 	// #361
   37120:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37124:	add	x1, x1, #0x970
   37128:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3712c:	add	x0, x0, #0x990
   37130:	bl	35ac0 <__assert_fail@plt>

0000000000037134 <aarch64_ins_advsimd_imm_shift@@Base>:
   37134:	stp	x29, x30, [sp, #-48]!
   37138:	mov	x29, sp
   3713c:	stp	x19, x20, [sp, #16]
   37140:	str	x21, [sp, #32]
   37144:	mov	x19, x1
   37148:	mov	x20, x2
   3714c:	mov	x21, x3
   37150:	ldrb	w0, [x1, #4]
   37154:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   37158:	ldr	x1, [x21, #8]
   3715c:	ldr	w2, [x1, #16]
   37160:	cmp	w2, #0xe
   37164:	b.eq	371bc <aarch64_ins_advsimd_imm_shift@@Base+0x88>  // b.none
   37168:	ldr	w1, [x19]
   3716c:	sub	w2, w1, #0x2b
   37170:	cmp	w2, #0x1
   37174:	b.hi	37244 <aarch64_ins_advsimd_imm_shift@@Base+0x110>  // b.pmore
   37178:	cmp	w1, #0x2c
   3717c:	b.eq	37268 <aarch64_ins_advsimd_imm_shift@@Base+0x134>  // b.none
   37180:	ldr	x2, [x19, #16]
   37184:	mov	w1, #0x8                   	// #8
   37188:	lsl	w1, w1, w0
   3718c:	add	w1, w1, w2
   37190:	mov	w5, #0x36                  	// #54
   37194:	mov	w4, #0x35                  	// #53
   37198:	mov	w3, #0x2                   	// #2
   3719c:	mov	w2, #0x0                   	// #0
   371a0:	mov	x0, x20
   371a4:	bl	36190 <init_disassemble_info@@Base+0x138>
   371a8:	mov	w0, #0x1                   	// #1
   371ac:	ldp	x19, x20, [sp, #16]
   371b0:	ldr	x21, [sp, #32]
   371b4:	ldp	x29, x30, [sp], #48
   371b8:	ret
   371bc:	ldr	w2, [x1, #12]
   371c0:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   371c4:	ldr	x1, [x1, #3944]
   371c8:	ldr	w4, [x1, #92]
   371cc:	sub	w1, w4, #0x1
   371d0:	cmp	w1, #0x1e
   371d4:	b.hi	37220 <aarch64_ins_advsimd_imm_shift@@Base+0xec>  // b.pmore
   371d8:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   371dc:	ldr	x1, [x1, #3944]
   371e0:	ldr	w3, [x1, #88]
   371e4:	tbnz	w3, #31, 37220 <aarch64_ins_advsimd_imm_shift@@Base+0xec>
   371e8:	add	w1, w4, w3
   371ec:	cmp	w1, #0x20
   371f0:	b.gt	37220 <aarch64_ins_advsimd_imm_shift@@Base+0xec>
   371f4:	mov	w1, #0xffffffff            	// #-1
   371f8:	lsl	w1, w1, w4
   371fc:	bic	w1, w0, w1
   37200:	and	w1, w1, #0x1
   37204:	lsl	w1, w1, w3
   37208:	bic	w2, w1, w2
   3720c:	ldr	w1, [x20]
   37210:	orr	w1, w1, w2
   37214:	str	w1, [x20]
   37218:	lsr	w0, w0, #1
   3721c:	b	37168 <aarch64_ins_advsimd_imm_shift@@Base+0x34>
   37220:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37224:	add	x3, x3, #0x18
   37228:	add	x3, x3, #0x10
   3722c:	mov	w2, #0x169                 	// #361
   37230:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37234:	add	x1, x1, #0x970
   37238:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3723c:	add	x0, x0, #0x990
   37240:	bl	35ac0 <__assert_fail@plt>
   37244:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37248:	add	x3, x3, #0x18
   3724c:	add	x3, x3, #0x90
   37250:	mov	w2, #0x15a                 	// #346
   37254:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37258:	add	x1, x1, #0x940
   3725c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37260:	add	x0, x0, #0xa98
   37264:	bl	35ac0 <__assert_fail@plt>
   37268:	mov	w3, #0x10                  	// #16
   3726c:	lsl	w1, w3, w0
   37270:	ldr	x0, [x19, #16]
   37274:	sub	w1, w1, w0
   37278:	b	37190 <aarch64_ins_advsimd_imm_shift@@Base+0x5c>

000000000003727c <aarch64_ins_imm@@Base>:
   3727c:	stp	x29, x30, [sp, #-16]!
   37280:	mov	x29, sp
   37284:	mov	x3, x1
   37288:	mov	x1, x2
   3728c:	ldr	x2, [x3, #16]
   37290:	ldr	w3, [x0, #16]
   37294:	asr	x4, x2, #2
   37298:	tst	x3, #0x8
   3729c:	csel	x2, x4, x2, ne  // ne = any
   372a0:	asr	x4, x2, #4
   372a4:	tst	x3, #0x200
   372a8:	csel	x2, x4, x2, ne  // ne = any
   372ac:	bl	3639c <init_disassemble_info@@Base+0x344>
   372b0:	mov	w0, #0x1                   	// #1
   372b4:	ldp	x29, x30, [sp], #16
   372b8:	ret

00000000000372bc <aarch64_ins_imm_half@@Base>:
   372bc:	stp	x29, x30, [sp, #-32]!
   372c0:	mov	x29, sp
   372c4:	stp	x19, x20, [sp, #16]
   372c8:	mov	x20, x1
   372cc:	mov	x19, x2
   372d0:	bl	357e0 <aarch64_ins_imm@plt>
   372d4:	ldr	x0, [x20, #40]
   372d8:	asr	x2, x0, #4
   372dc:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   372e0:	ldr	x1, [x1, #3944]
   372e4:	ldr	w1, [x1, #260]
   372e8:	sub	w0, w1, #0x1
   372ec:	cmp	w0, #0x1e
   372f0:	b.hi	3733c <aarch64_ins_imm_half@@Base+0x80>  // b.pmore
   372f4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   372f8:	ldr	x0, [x0, #3944]
   372fc:	ldr	w3, [x0, #256]
   37300:	tbnz	w3, #31, 3733c <aarch64_ins_imm_half@@Base+0x80>
   37304:	add	w0, w1, w3
   37308:	cmp	w0, #0x20
   3730c:	b.gt	3733c <aarch64_ins_imm_half@@Base+0x80>
   37310:	mov	w0, #0xffffffff            	// #-1
   37314:	lsl	w0, w0, w1
   37318:	bic	w0, w2, w0
   3731c:	lsl	w0, w0, w3
   37320:	ldr	w1, [x19]
   37324:	orr	w0, w1, w0
   37328:	str	w0, [x19]
   3732c:	mov	w0, #0x1                   	// #1
   37330:	ldp	x19, x20, [sp, #16]
   37334:	ldp	x29, x30, [sp], #32
   37338:	ret
   3733c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37340:	add	x3, x3, #0x18
   37344:	add	x3, x3, #0x10
   37348:	mov	w2, #0x169                 	// #361
   3734c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37350:	add	x1, x1, #0x970
   37354:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37358:	add	x0, x0, #0x990
   3735c:	bl	35ac0 <__assert_fail@plt>

0000000000037360 <aarch64_ins_advsimd_imm_modified@@Base>:
   37360:	stp	x29, x30, [sp, #-64]!
   37364:	mov	x29, sp
   37368:	stp	x19, x20, [sp, #16]
   3736c:	stp	x21, x22, [sp, #32]
   37370:	str	x23, [sp, #48]
   37374:	mov	x19, x2
   37378:	ldrb	w23, [x3, #28]
   3737c:	ldr	x22, [x1, #16]
   37380:	ldr	w21, [x1, #32]
   37384:	ldr	x20, [x1, #40]
   37388:	ldrb	w0, [x1, #24]
   3738c:	tbnz	w0, #0, 373a4 <aarch64_ins_advsimd_imm_modified@@Base+0x44>
   37390:	mov	w0, w23
   37394:	bl	35680 <aarch64_get_qualifier_esize@plt>
   37398:	and	w0, w0, #0xff
   3739c:	cmp	w0, #0x8
   373a0:	b.eq	37448 <aarch64_ins_advsimd_imm_modified@@Base+0xe8>  // b.none
   373a4:	mov	w5, #0x4                   	// #4
   373a8:	mov	w4, #0x3                   	// #3
   373ac:	mov	w3, #0x2                   	// #2
   373b0:	mov	w2, #0x0                   	// #0
   373b4:	mov	w1, w22
   373b8:	mov	x0, x19
   373bc:	bl	36190 <init_disassemble_info@@Base+0x138>
   373c0:	cbz	w21, 37430 <aarch64_ins_advsimd_imm_modified@@Base+0xd0>
   373c4:	and	w0, w21, #0xfffffffb
   373c8:	cmp	w0, #0x1
   373cc:	b.ne	3747c <aarch64_ins_advsimd_imm_modified@@Base+0x11c>  // b.any
   373d0:	cmp	w21, #0x5
   373d4:	b.eq	374a0 <aarch64_ins_advsimd_imm_modified@@Base+0x140>  // b.none
   373d8:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   373dc:	ldr	x0, [x0, #3944]
   373e0:	ldr	w0, [x0, #204]
   373e4:	cmp	w0, #0x0
   373e8:	b.le	37550 <aarch64_ins_advsimd_imm_modified@@Base+0x1f0>
   373ec:	asr	w0, w20, #4
   373f0:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   373f4:	ldr	x1, [x1, #3944]
   373f8:	ldr	w1, [x1, #200]
   373fc:	mov	w2, #0x1                   	// #1
   37400:	mov	w20, w0
   37404:	tbnz	w1, #31, 37550 <aarch64_ins_advsimd_imm_modified@@Base+0x1f0>
   37408:	add	w0, w2, w1
   3740c:	cmp	w0, #0x20
   37410:	b.gt	37550 <aarch64_ins_advsimd_imm_modified@@Base+0x1f0>
   37414:	mov	w0, #0xffffffff            	// #-1
   37418:	lsl	w0, w0, w2
   3741c:	bic	w0, w20, w0
   37420:	lsl	w0, w0, w1
   37424:	ldr	w1, [x19]
   37428:	orr	w0, w1, w0
   3742c:	str	w0, [x19]
   37430:	mov	w0, #0x1                   	// #1
   37434:	ldp	x19, x20, [sp, #16]
   37438:	ldp	x21, x22, [sp, #32]
   3743c:	ldr	x23, [sp, #48]
   37440:	ldp	x29, x30, [sp], #64
   37444:	ret
   37448:	mov	x0, x22
   3744c:	bl	35760 <aarch64_shrink_expanded_imm8@plt>
   37450:	sxtw	x22, w0
   37454:	tbz	w0, #31, 373a4 <aarch64_ins_advsimd_imm_modified@@Base+0x44>
   37458:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3745c:	add	x3, x3, #0x18
   37460:	add	x3, x3, #0xb0
   37464:	mov	w2, #0x1ae                 	// #430
   37468:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3746c:	add	x1, x1, #0x940
   37470:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37474:	add	x0, x0, #0xae8
   37478:	bl	35ac0 <__assert_fail@plt>
   3747c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37480:	add	x3, x3, #0x18
   37484:	add	x3, x3, #0xb0
   37488:	mov	w2, #0x1b6                 	// #438
   3748c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37490:	add	x1, x1, #0x940
   37494:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37498:	add	x0, x0, #0xaf8
   3749c:	bl	35ac0 <__assert_fail@plt>
   374a0:	mov	w0, w23
   374a4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   374a8:	and	w1, w0, #0xff
   374ac:	sub	w0, w1, #0x1
   374b0:	and	w0, w0, #0xff
   374b4:	cmp	w0, #0x1
   374b8:	ccmp	w1, #0x4, #0x4, hi  // hi = pmore
   374bc:	b.ne	37500 <aarch64_ins_advsimd_imm_modified@@Base+0x1a0>  // b.any
   374c0:	cmp	w1, #0x1
   374c4:	b.eq	37430 <aarch64_ins_advsimd_imm_modified@@Base+0xd0>  // b.none
   374c8:	asr	w0, w20, #3
   374cc:	cmp	w1, #0x4
   374d0:	b.eq	37524 <aarch64_ins_advsimd_imm_modified@@Base+0x1c4>  // b.none
   374d4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   374d8:	ldr	x1, [x1, #3944]
   374dc:	ldr	w1, [x1, #204]
   374e0:	cmp	w1, #0x1
   374e4:	b.le	37550 <aarch64_ins_advsimd_imm_modified@@Base+0x1f0>
   374e8:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   374ec:	ldr	x1, [x1, #3944]
   374f0:	ldr	w1, [x1, #200]
   374f4:	add	w1, w1, #0x1
   374f8:	mov	w2, #0x1                   	// #1
   374fc:	b	37400 <aarch64_ins_advsimd_imm_modified@@Base+0xa0>
   37500:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37504:	add	x3, x3, #0x18
   37508:	add	x3, x3, #0xb0
   3750c:	mov	w2, #0x1bb                 	// #443
   37510:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37514:	add	x1, x1, #0x940
   37518:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3751c:	add	x0, x0, #0xb30
   37520:	bl	35ac0 <__assert_fail@plt>
   37524:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   37528:	ldr	x1, [x1, #3944]
   3752c:	ldr	w1, [x1, #204]
   37530:	cmp	w1, #0x2
   37534:	b.le	37550 <aarch64_ins_advsimd_imm_modified@@Base+0x1f0>
   37538:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3753c:	ldr	x1, [x1, #3944]
   37540:	ldr	w1, [x1, #200]
   37544:	add	w1, w1, #0x1
   37548:	mov	w2, #0x2                   	// #2
   3754c:	b	37400 <aarch64_ins_advsimd_imm_modified@@Base+0xa0>
   37550:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37554:	add	x3, x3, #0x18
   37558:	add	x3, x3, #0x10
   3755c:	mov	w2, #0x169                 	// #361
   37560:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37564:	add	x1, x1, #0x970
   37568:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3756c:	add	x0, x0, #0x990
   37570:	bl	35ac0 <__assert_fail@plt>

0000000000037574 <aarch64_ins_fpimm@@Base>:
   37574:	stp	x29, x30, [sp, #-16]!
   37578:	mov	x29, sp
   3757c:	mov	x3, x1
   37580:	mov	x1, x2
   37584:	ldr	w2, [x3, #16]
   37588:	bl	3639c <init_disassemble_info@@Base+0x344>
   3758c:	mov	w0, #0x1                   	// #1
   37590:	ldp	x29, x30, [sp], #16
   37594:	ret

0000000000037598 <aarch64_ins_imm_rotate1@@Base>:
   37598:	stp	x29, x30, [sp, #-16]!
   3759c:	mov	x29, sp
   375a0:	ldr	x1, [x1, #16]
   375a4:	sub	x1, x1, #0x5a
   375a8:	mov	x4, #0x2d83                	// #11651
   375ac:	movk	x4, #0x82d8, lsl #16
   375b0:	movk	x4, #0xd82d, lsl #32
   375b4:	movk	x4, #0x2d82, lsl #48
   375b8:	smulh	x4, x1, x4
   375bc:	asr	x4, x4, #5
   375c0:	sub	x1, x4, x1, asr #63
   375c4:	cmp	x1, #0x1
   375c8:	b.hi	37640 <aarch64_ins_imm_rotate1@@Base+0xa8>  // b.pmore
   375cc:	ldr	w4, [x0, #20]
   375d0:	ldr	x0, [x3, #8]
   375d4:	ldr	w6, [x0, #12]
   375d8:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   375dc:	ldr	x0, [x0, #3944]
   375e0:	add	x0, x0, w4, uxtw #3
   375e4:	ldr	w5, [x0, #4]
   375e8:	sub	w0, w5, #0x1
   375ec:	cmp	w0, #0x1e
   375f0:	b.hi	37664 <aarch64_ins_imm_rotate1@@Base+0xcc>  // b.pmore
   375f4:	ubfiz	x4, x4, #3, #32
   375f8:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   375fc:	ldr	x3, [x3, #3944]
   37600:	ldr	w3, [x3, x4]
   37604:	tbnz	w3, #31, 37664 <aarch64_ins_imm_rotate1@@Base+0xcc>
   37608:	add	w0, w5, w3
   3760c:	cmp	w0, #0x20
   37610:	b.gt	37664 <aarch64_ins_imm_rotate1@@Base+0xcc>
   37614:	mov	w0, #0xffffffff            	// #-1
   37618:	lsl	w0, w0, w5
   3761c:	bic	w1, w1, w0
   37620:	lsl	w1, w1, w3
   37624:	bic	w1, w1, w6
   37628:	ldr	w6, [x2]
   3762c:	orr	w1, w6, w1
   37630:	str	w1, [x2]
   37634:	mov	w0, #0x1                   	// #1
   37638:	ldp	x29, x30, [sp], #16
   3763c:	ret
   37640:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37644:	add	x3, x3, #0x18
   37648:	add	x3, x3, #0xd8
   3764c:	mov	w2, #0x1e4                 	// #484
   37650:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37654:	add	x1, x1, #0x940
   37658:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3765c:	add	x0, x0, #0xb58
   37660:	bl	35ac0 <__assert_fail@plt>
   37664:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37668:	add	x3, x3, #0x18
   3766c:	add	x3, x3, #0x10
   37670:	mov	w2, #0x169                 	// #361
   37674:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37678:	add	x1, x1, #0x970
   3767c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37680:	add	x0, x0, #0x990
   37684:	bl	35ac0 <__assert_fail@plt>

0000000000037688 <aarch64_ins_imm_rotate2@@Base>:
   37688:	stp	x29, x30, [sp, #-16]!
   3768c:	mov	x29, sp
   37690:	ldr	x4, [x1, #16]
   37694:	mov	x1, #0x2d83                	// #11651
   37698:	movk	x1, #0x82d8, lsl #16
   3769c:	movk	x1, #0xd82d, lsl #32
   376a0:	movk	x1, #0x2d82, lsl #48
   376a4:	smulh	x1, x4, x1
   376a8:	asr	x1, x1, #4
   376ac:	sub	x1, x1, x4, asr #63
   376b0:	cmp	x1, #0x3
   376b4:	b.hi	3772c <aarch64_ins_imm_rotate2@@Base+0xa4>  // b.pmore
   376b8:	ldr	w4, [x0, #20]
   376bc:	ldr	x0, [x3, #8]
   376c0:	ldr	w6, [x0, #12]
   376c4:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   376c8:	ldr	x3, [x3, #3944]
   376cc:	add	x3, x3, w4, uxtw #3
   376d0:	ldr	w5, [x3, #4]
   376d4:	sub	w0, w5, #0x1
   376d8:	cmp	w0, #0x1e
   376dc:	b.hi	37750 <aarch64_ins_imm_rotate2@@Base+0xc8>  // b.pmore
   376e0:	ubfiz	x4, x4, #3, #32
   376e4:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   376e8:	ldr	x3, [x3, #3944]
   376ec:	ldr	w3, [x3, x4]
   376f0:	tbnz	w3, #31, 37750 <aarch64_ins_imm_rotate2@@Base+0xc8>
   376f4:	add	w0, w5, w3
   376f8:	cmp	w0, #0x20
   376fc:	b.gt	37750 <aarch64_ins_imm_rotate2@@Base+0xc8>
   37700:	mov	w0, #0xffffffff            	// #-1
   37704:	lsl	w0, w0, w5
   37708:	bic	w0, w1, w0
   3770c:	lsl	w0, w0, w3
   37710:	bic	w0, w0, w6
   37714:	ldr	w6, [x2]
   37718:	orr	w0, w6, w0
   3771c:	str	w0, [x2]
   37720:	mov	w0, #0x1                   	// #1
   37724:	ldp	x29, x30, [sp], #16
   37728:	ret
   3772c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37730:	add	x3, x3, #0x18
   37734:	add	x3, x3, #0xf0
   37738:	mov	w2, #0x1f1                 	// #497
   3773c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37740:	add	x1, x1, #0x940
   37744:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37748:	add	x0, x0, #0xb68
   3774c:	bl	35ac0 <__assert_fail@plt>
   37750:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37754:	add	x3, x3, #0x18
   37758:	add	x3, x3, #0x10
   3775c:	mov	w2, #0x169                 	// #361
   37760:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37764:	add	x1, x1, #0x970
   37768:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3776c:	add	x0, x0, #0x990
   37770:	bl	35ac0 <__assert_fail@plt>

0000000000037774 <aarch64_ins_fbits@@Base>:
   37774:	ldr	w3, [x0, #20]
   37778:	ldr	x4, [x1, #16]
   3777c:	mov	w0, #0x40                  	// #64
   37780:	sub	w4, w0, w4
   37784:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   37788:	ldr	x1, [x1, #3944]
   3778c:	add	x1, x1, w3, uxtw #3
   37790:	ldr	w1, [x1, #4]
   37794:	sub	w0, w1, #0x1
   37798:	cmp	w0, #0x1e
   3779c:	b.hi	377e4 <aarch64_ins_fbits@@Base+0x70>  // b.pmore
   377a0:	ubfiz	x3, x3, #3, #32
   377a4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   377a8:	ldr	x0, [x0, #3944]
   377ac:	ldr	w3, [x0, x3]
   377b0:	tbnz	w3, #31, 377e4 <aarch64_ins_fbits@@Base+0x70>
   377b4:	add	w0, w1, w3
   377b8:	cmp	w0, #0x20
   377bc:	b.gt	377e4 <aarch64_ins_fbits@@Base+0x70>
   377c0:	mov	w0, #0xffffffff            	// #-1
   377c4:	lsl	w0, w0, w1
   377c8:	bic	w0, w4, w0
   377cc:	lsl	w0, w0, w3
   377d0:	ldr	w1, [x2]
   377d4:	orr	w0, w1, w0
   377d8:	str	w0, [x2]
   377dc:	mov	w0, #0x1                   	// #1
   377e0:	ret
   377e4:	stp	x29, x30, [sp, #-16]!
   377e8:	mov	x29, sp
   377ec:	adrp	x3, 59000 <xexit@@Base+0x74c>
   377f0:	add	x3, x3, #0x18
   377f4:	add	x3, x3, #0x10
   377f8:	mov	w2, #0x169                 	// #361
   377fc:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37800:	add	x1, x1, #0x970
   37804:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37808:	add	x0, x0, #0x990
   3780c:	bl	35ac0 <__assert_fail@plt>

0000000000037810 <aarch64_ins_aimm@@Base>:
   37810:	stp	x29, x30, [sp, #-16]!
   37814:	mov	x29, sp
   37818:	ldr	x3, [x1, #40]
   3781c:	cmp	x3, #0x0
   37820:	cset	w7, ne  // ne = any
   37824:	ldr	w5, [x0, #20]
   37828:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   3782c:	ldr	x4, [x4, #3944]
   37830:	add	x4, x4, w5, uxtw #3
   37834:	ldr	w4, [x4, #4]
   37838:	sub	w6, w4, #0x1
   3783c:	cmp	w6, #0x1e
   37840:	b.hi	378e8 <aarch64_ins_aimm@@Base+0xd8>  // b.pmore
   37844:	ubfiz	x5, x5, #3, #32
   37848:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   3784c:	ldr	x6, [x6, #3944]
   37850:	ldr	w5, [x6, x5]
   37854:	tbnz	w5, #31, 378e8 <aarch64_ins_aimm@@Base+0xd8>
   37858:	add	w3, w4, w5
   3785c:	cmp	w3, #0x20
   37860:	b.gt	378e8 <aarch64_ins_aimm@@Base+0xd8>
   37864:	mov	w3, #0xffffffff            	// #-1
   37868:	lsl	w3, w3, w4
   3786c:	bic	w3, w7, w3
   37870:	lsl	w3, w3, w5
   37874:	ldr	w4, [x2]
   37878:	orr	w3, w3, w4
   3787c:	str	w3, [x2]
   37880:	ldr	w4, [x0, #24]
   37884:	ldr	x6, [x1, #16]
   37888:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3788c:	ldr	x1, [x1, #3944]
   37890:	add	x1, x1, w4, uxtw #3
   37894:	ldr	w5, [x1, #4]
   37898:	sub	w1, w5, #0x1
   3789c:	cmp	w1, #0x1e
   378a0:	b.hi	3790c <aarch64_ins_aimm@@Base+0xfc>  // b.pmore
   378a4:	ubfiz	x4, x4, #3, #32
   378a8:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   378ac:	ldr	x1, [x1, #3944]
   378b0:	ldr	w1, [x1, x4]
   378b4:	tbnz	w1, #31, 3790c <aarch64_ins_aimm@@Base+0xfc>
   378b8:	add	w4, w5, w1
   378bc:	cmp	w4, #0x20
   378c0:	b.gt	3790c <aarch64_ins_aimm@@Base+0xfc>
   378c4:	mov	w0, #0xffffffff            	// #-1
   378c8:	lsl	w0, w0, w5
   378cc:	bic	w0, w6, w0
   378d0:	lsl	w0, w0, w1
   378d4:	orr	w3, w0, w3
   378d8:	str	w3, [x2]
   378dc:	mov	w0, #0x1                   	// #1
   378e0:	ldp	x29, x30, [sp], #16
   378e4:	ret
   378e8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   378ec:	add	x3, x3, #0x18
   378f0:	add	x3, x3, #0x10
   378f4:	mov	w2, #0x169                 	// #361
   378f8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   378fc:	add	x1, x1, #0x970
   37900:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37904:	add	x0, x0, #0x990
   37908:	bl	35ac0 <__assert_fail@plt>
   3790c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37910:	add	x3, x3, #0x18
   37914:	add	x3, x3, #0x10
   37918:	mov	w2, #0x169                 	// #361
   3791c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37920:	add	x1, x1, #0x970
   37924:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37928:	add	x0, x0, #0x990
   3792c:	bl	35ac0 <__assert_fail@plt>

0000000000037930 <aarch64_ins_limm@@Base>:
   37930:	stp	x29, x30, [sp, #-16]!
   37934:	mov	x29, sp
   37938:	ldr	x5, [x3, #8]
   3793c:	ldr	w5, [x5, #20]
   37940:	cmp	w5, #0x2a
   37944:	mov	x5, x4
   37948:	cset	w4, eq  // eq = none
   3794c:	bl	36304 <init_disassemble_info@@Base+0x2ac>
   37950:	ldp	x29, x30, [sp], #16
   37954:	ret

0000000000037958 <aarch64_ins_inv_limm@@Base>:
   37958:	stp	x29, x30, [sp, #-16]!
   3795c:	mov	x29, sp
   37960:	mov	x5, x4
   37964:	mov	w4, #0x1                   	// #1
   37968:	bl	36304 <init_disassemble_info@@Base+0x2ac>
   3796c:	ldp	x29, x30, [sp], #16
   37970:	ret

0000000000037974 <aarch64_ins_ft@@Base>:
   37974:	stp	x29, x30, [sp, #-48]!
   37978:	mov	x29, sp
   3797c:	stp	x19, x20, [sp, #16]
   37980:	str	x21, [sp, #32]
   37984:	mov	x19, x1
   37988:	ldr	w1, [x1, #8]
   3798c:	cbnz	w1, 379f4 <aarch64_ins_ft@@Base+0x80>
   37990:	mov	x20, x2
   37994:	mov	x21, x3
   37998:	mov	x1, x19
   3799c:	bl	35200 <aarch64_ins_regno@plt>
   379a0:	ldr	x0, [x21, #8]
   379a4:	ldr	w0, [x0, #16]
   379a8:	sub	w0, w0, #0x3d
   379ac:	cmp	w0, #0x3
   379b0:	b.hi	37ab4 <aarch64_ins_ft@@Base+0x140>  // b.pmore
   379b4:	ldrb	w0, [x19, #4]
   379b8:	cmp	w0, #0x8
   379bc:	b.eq	37a18 <aarch64_ins_ft@@Base+0xa4>  // b.none
   379c0:	cmp	w0, #0x9
   379c4:	b.eq	37a20 <aarch64_ins_ft@@Base+0xac>  // b.none
   379c8:	cmp	w0, #0x7
   379cc:	b.eq	37a88 <aarch64_ins_ft@@Base+0x114>  // b.none
   379d0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   379d4:	add	x3, x3, #0x18
   379d8:	add	x3, x3, #0x108
   379dc:	mov	w2, #0x254                 	// #596
   379e0:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   379e4:	add	x1, x1, #0x940
   379e8:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   379ec:	add	x0, x0, #0xb60
   379f0:	bl	35ac0 <__assert_fail@plt>
   379f4:	adrp	x3, 59000 <xexit@@Base+0x74c>
   379f8:	add	x3, x3, #0x18
   379fc:	add	x3, x3, #0x108
   37a00:	mov	w2, #0x245                 	// #581
   37a04:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37a08:	add	x1, x1, #0x940
   37a0c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37a10:	add	x0, x0, #0xb78
   37a14:	bl	35ac0 <__assert_fail@plt>
   37a18:	mov	w3, #0x1                   	// #1
   37a1c:	b	37a24 <aarch64_ins_ft@@Base+0xb0>
   37a20:	mov	w3, #0x2                   	// #2
   37a24:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   37a28:	ldr	x1, [x1, #3944]
   37a2c:	ldr	w1, [x1, #300]
   37a30:	sub	w0, w1, #0x1
   37a34:	cmp	w0, #0x1e
   37a38:	b.hi	37a90 <aarch64_ins_ft@@Base+0x11c>  // b.pmore
   37a3c:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   37a40:	ldr	x2, [x2, #3944]
   37a44:	ldr	w2, [x2, #296]
   37a48:	tbnz	w2, #31, 37a90 <aarch64_ins_ft@@Base+0x11c>
   37a4c:	add	w0, w1, w2
   37a50:	cmp	w0, #0x20
   37a54:	b.gt	37a90 <aarch64_ins_ft@@Base+0x11c>
   37a58:	mov	w0, #0xffffffff            	// #-1
   37a5c:	lsl	w0, w0, w1
   37a60:	bic	w0, w3, w0
   37a64:	lsl	w0, w0, w2
   37a68:	ldr	w1, [x20]
   37a6c:	orr	w0, w1, w0
   37a70:	str	w0, [x20]
   37a74:	mov	w0, #0x1                   	// #1
   37a78:	ldp	x19, x20, [sp, #16]
   37a7c:	ldr	x21, [sp, #32]
   37a80:	ldp	x29, x30, [sp], #48
   37a84:	ret
   37a88:	mov	w3, #0x0                   	// #0
   37a8c:	b	37a24 <aarch64_ins_ft@@Base+0xb0>
   37a90:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37a94:	add	x3, x3, #0x18
   37a98:	add	x3, x3, #0x10
   37a9c:	mov	w2, #0x169                 	// #361
   37aa0:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37aa4:	add	x1, x1, #0x970
   37aa8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37aac:	add	x0, x0, #0x990
   37ab0:	bl	35ac0 <__assert_fail@plt>
   37ab4:	ldrb	w0, [x19, #4]
   37ab8:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   37abc:	mov	w5, #0x22                  	// #34
   37ac0:	mov	w4, #0x25                  	// #37
   37ac4:	mov	w3, #0x2                   	// #2
   37ac8:	mov	w2, #0x0                   	// #0
   37acc:	mov	w1, w0
   37ad0:	mov	x0, x20
   37ad4:	bl	36190 <init_disassemble_info@@Base+0x138>
   37ad8:	b	37a74 <aarch64_ins_ft@@Base+0x100>

0000000000037adc <aarch64_ins_addr_simple@@Base>:
   37adc:	ldr	w4, [x1, #16]
   37ae0:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   37ae4:	ldr	x1, [x1, #3944]
   37ae8:	ldr	w1, [x1, #116]
   37aec:	sub	w3, w1, #0x1
   37af0:	cmp	w3, #0x1e
   37af4:	b.hi	37b38 <aarch64_ins_addr_simple@@Base+0x5c>  // b.pmore
   37af8:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   37afc:	ldr	x3, [x3, #3944]
   37b00:	ldr	w3, [x3, #112]
   37b04:	tbnz	w3, #31, 37b38 <aarch64_ins_addr_simple@@Base+0x5c>
   37b08:	add	w0, w1, w3
   37b0c:	cmp	w0, #0x20
   37b10:	b.gt	37b38 <aarch64_ins_addr_simple@@Base+0x5c>
   37b14:	mov	w0, #0xffffffff            	// #-1
   37b18:	lsl	w0, w0, w1
   37b1c:	bic	w0, w4, w0
   37b20:	lsl	w0, w0, w3
   37b24:	ldr	w1, [x2]
   37b28:	orr	w0, w1, w0
   37b2c:	str	w0, [x2]
   37b30:	mov	w0, #0x1                   	// #1
   37b34:	ret
   37b38:	stp	x29, x30, [sp, #-16]!
   37b3c:	mov	x29, sp
   37b40:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37b44:	add	x3, x3, #0x18
   37b48:	add	x3, x3, #0x10
   37b4c:	mov	w2, #0x169                 	// #361
   37b50:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37b54:	add	x1, x1, #0x970
   37b58:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37b5c:	add	x0, x0, #0x990
   37b60:	bl	35ac0 <__assert_fail@plt>

0000000000037b64 <aarch64_ins_addr_regoff@@Base>:
   37b64:	stp	x29, x30, [sp, #-32]!
   37b68:	mov	x29, sp
   37b6c:	stp	x19, x20, [sp, #16]
   37b70:	mov	x20, x1
   37b74:	mov	x19, x2
   37b78:	ldr	w0, [x1, #32]
   37b7c:	ldr	w4, [x1, #16]
   37b80:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   37b84:	ldr	x1, [x1, #3944]
   37b88:	ldr	w1, [x1, #116]
   37b8c:	sub	w2, w1, #0x1
   37b90:	cmp	w2, #0x1e
   37b94:	b.hi	37cf4 <aarch64_ins_addr_regoff@@Base+0x190>  // b.pmore
   37b98:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   37b9c:	ldr	x2, [x2, #3944]
   37ba0:	ldr	w2, [x2, #112]
   37ba4:	tbnz	w2, #31, 37cf4 <aarch64_ins_addr_regoff@@Base+0x190>
   37ba8:	add	w3, w1, w2
   37bac:	cmp	w3, #0x20
   37bb0:	b.gt	37cf4 <aarch64_ins_addr_regoff@@Base+0x190>
   37bb4:	mov	w3, #0xffffffff            	// #-1
   37bb8:	lsl	w3, w3, w1
   37bbc:	bic	w3, w4, w3
   37bc0:	lsl	w3, w3, w2
   37bc4:	ldr	w1, [x19]
   37bc8:	orr	w3, w3, w1
   37bcc:	str	w3, [x19]
   37bd0:	ldr	w6, [x20, #20]
   37bd4:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   37bd8:	ldr	x2, [x2, #3944]
   37bdc:	ldr	w4, [x2, #228]
   37be0:	sub	w2, w4, #0x1
   37be4:	cmp	w2, #0x1e
   37be8:	b.hi	37d18 <aarch64_ins_addr_regoff@@Base+0x1b4>  // b.pmore
   37bec:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   37bf0:	ldr	x2, [x2, #3944]
   37bf4:	ldr	w2, [x2, #224]
   37bf8:	tbnz	w2, #31, 37d18 <aarch64_ins_addr_regoff@@Base+0x1b4>
   37bfc:	add	w5, w4, w2
   37c00:	cmp	w5, #0x20
   37c04:	b.gt	37d18 <aarch64_ins_addr_regoff@@Base+0x1b4>
   37c08:	mov	w1, #0xffffffff            	// #-1
   37c0c:	lsl	w1, w1, w4
   37c10:	bic	w1, w6, w1
   37c14:	lsl	w1, w1, w2
   37c18:	orr	w3, w1, w3
   37c1c:	str	w3, [x19]
   37c20:	cmp	w0, #0x5
   37c24:	mov	w1, #0x9                   	// #9
   37c28:	csel	w0, w0, w1, ne  // ne = any
   37c2c:	bl	35430 <aarch64_get_operand_modifier_value@plt>
   37c30:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   37c34:	ldr	x1, [x1, #3944]
   37c38:	ldr	w3, [x1, #244]
   37c3c:	sub	w1, w3, #0x1
   37c40:	cmp	w1, #0x1e
   37c44:	b.hi	37d3c <aarch64_ins_addr_regoff@@Base+0x1d8>  // b.pmore
   37c48:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   37c4c:	ldr	x2, [x2, #3944]
   37c50:	ldr	w2, [x2, #240]
   37c54:	tbnz	w2, #31, 37d3c <aarch64_ins_addr_regoff@@Base+0x1d8>
   37c58:	add	w1, w3, w2
   37c5c:	cmp	w1, #0x20
   37c60:	b.gt	37d3c <aarch64_ins_addr_regoff@@Base+0x1d8>
   37c64:	mov	w1, #0xffffffff            	// #-1
   37c68:	lsl	w1, w1, w3
   37c6c:	bic	w0, w0, w1
   37c70:	lsl	w0, w0, w2
   37c74:	ldr	w1, [x19]
   37c78:	orr	w0, w0, w1
   37c7c:	str	w0, [x19]
   37c80:	ldrb	w1, [x20, #4]
   37c84:	cmp	w1, #0x5
   37c88:	b.eq	37d60 <aarch64_ins_addr_regoff@@Base+0x1fc>  // b.none
   37c8c:	ldr	x1, [x20, #40]
   37c90:	cmp	x1, #0x0
   37c94:	cset	w4, ne  // ne = any
   37c98:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   37c9c:	ldr	x2, [x2, #3944]
   37ca0:	ldr	w3, [x2, #252]
   37ca4:	sub	w2, w3, #0x1
   37ca8:	cmp	w2, #0x1e
   37cac:	b.hi	37d74 <aarch64_ins_addr_regoff@@Base+0x210>  // b.pmore
   37cb0:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   37cb4:	ldr	x2, [x2, #3944]
   37cb8:	ldr	w2, [x2, #248]
   37cbc:	tbnz	w2, #31, 37d74 <aarch64_ins_addr_regoff@@Base+0x210>
   37cc0:	add	w1, w3, w2
   37cc4:	cmp	w1, #0x20
   37cc8:	b.gt	37d74 <aarch64_ins_addr_regoff@@Base+0x210>
   37ccc:	mov	w1, #0xffffffff            	// #-1
   37cd0:	lsl	w1, w1, w3
   37cd4:	bic	w1, w4, w1
   37cd8:	lsl	w1, w1, w2
   37cdc:	orr	w0, w1, w0
   37ce0:	str	w0, [x19]
   37ce4:	mov	w0, #0x1                   	// #1
   37ce8:	ldp	x19, x20, [sp, #16]
   37cec:	ldp	x29, x30, [sp], #32
   37cf0:	ret
   37cf4:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37cf8:	add	x3, x3, #0x18
   37cfc:	add	x3, x3, #0x10
   37d00:	mov	w2, #0x169                 	// #361
   37d04:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37d08:	add	x1, x1, #0x970
   37d0c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37d10:	add	x0, x0, #0x990
   37d14:	bl	35ac0 <__assert_fail@plt>
   37d18:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37d1c:	add	x3, x3, #0x18
   37d20:	add	x3, x3, #0x10
   37d24:	mov	w2, #0x169                 	// #361
   37d28:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37d2c:	add	x1, x1, #0x970
   37d30:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37d34:	add	x0, x0, #0x990
   37d38:	bl	35ac0 <__assert_fail@plt>
   37d3c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37d40:	add	x3, x3, #0x18
   37d44:	add	x3, x3, #0x10
   37d48:	mov	w2, #0x169                 	// #361
   37d4c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37d50:	add	x1, x1, #0x970
   37d54:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37d58:	add	x0, x0, #0x990
   37d5c:	bl	35ac0 <__assert_fail@plt>
   37d60:	ldrb	w1, [x20, #36]
   37d64:	and	w1, w1, #0x3
   37d68:	cmp	w1, #0x3
   37d6c:	cset	w4, eq  // eq = none
   37d70:	b	37c98 <aarch64_ins_addr_regoff@@Base+0x134>
   37d74:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37d78:	add	x3, x3, #0x18
   37d7c:	add	x3, x3, #0x10
   37d80:	mov	w2, #0x169                 	// #361
   37d84:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37d88:	add	x1, x1, #0x970
   37d8c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37d90:	add	x0, x0, #0x990
   37d94:	bl	35ac0 <__assert_fail@plt>

0000000000037d98 <aarch64_ins_addr_offset@@Base>:
   37d98:	stp	x29, x30, [sp, #-16]!
   37d9c:	mov	x29, sp
   37da0:	ldr	w5, [x0, #20]
   37da4:	ldr	w7, [x1, #16]
   37da8:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   37dac:	ldr	x4, [x4, #3944]
   37db0:	add	x4, x4, w5, uxtw #3
   37db4:	ldr	w4, [x4, #4]
   37db8:	sub	w6, w4, #0x1
   37dbc:	cmp	w6, #0x1e
   37dc0:	b.hi	37ed8 <aarch64_ins_addr_offset@@Base+0x140>  // b.pmore
   37dc4:	ubfiz	x5, x5, #3, #32
   37dc8:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   37dcc:	ldr	x6, [x6, #3944]
   37dd0:	ldr	w5, [x6, x5]
   37dd4:	tbnz	w5, #31, 37ed8 <aarch64_ins_addr_offset@@Base+0x140>
   37dd8:	add	w3, w4, w5
   37ddc:	cmp	w3, #0x20
   37de0:	b.gt	37ed8 <aarch64_ins_addr_offset@@Base+0x140>
   37de4:	mov	w3, #0xffffffff            	// #-1
   37de8:	lsl	w3, w3, w4
   37dec:	bic	w3, w7, w3
   37df0:	lsl	w3, w3, w5
   37df4:	ldr	w4, [x2]
   37df8:	orr	w3, w3, w4
   37dfc:	str	w3, [x2]
   37e00:	ldr	w6, [x0, #24]
   37e04:	ldr	w8, [x1, #20]
   37e08:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   37e0c:	ldr	x5, [x5, #3944]
   37e10:	add	x5, x5, w6, uxtw #3
   37e14:	ldr	w7, [x5, #4]
   37e18:	sub	w5, w7, #0x1
   37e1c:	cmp	w5, #0x1e
   37e20:	b.hi	37efc <aarch64_ins_addr_offset@@Base+0x164>  // b.pmore
   37e24:	ubfiz	x6, x6, #3, #32
   37e28:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   37e2c:	ldr	x5, [x5, #3944]
   37e30:	ldr	w5, [x5, x6]
   37e34:	tbnz	w5, #31, 37efc <aarch64_ins_addr_offset@@Base+0x164>
   37e38:	add	w6, w7, w5
   37e3c:	cmp	w6, #0x20
   37e40:	b.gt	37efc <aarch64_ins_addr_offset@@Base+0x164>
   37e44:	mov	w4, #0xffffffff            	// #-1
   37e48:	lsl	w4, w4, w7
   37e4c:	bic	w4, w8, w4
   37e50:	lsl	w4, w4, w5
   37e54:	orr	w3, w4, w3
   37e58:	str	w3, [x2]
   37e5c:	ldrb	w1, [x1, #28]
   37e60:	tbz	w1, #1, 37ecc <aarch64_ins_addr_offset@@Base+0x134>
   37e64:	and	w1, w1, #0xc
   37e68:	cmp	w1, #0x4
   37e6c:	b.ne	37f20 <aarch64_ins_addr_offset@@Base+0x188>  // b.any
   37e70:	ldr	w1, [x0, #28]
   37e74:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   37e78:	ldr	x0, [x0, #3944]
   37e7c:	add	x0, x0, w1, uxtw #3
   37e80:	ldr	w4, [x0, #4]
   37e84:	sub	w0, w4, #0x1
   37e88:	cmp	w0, #0x1e
   37e8c:	b.hi	37f44 <aarch64_ins_addr_offset@@Base+0x1ac>  // b.pmore
   37e90:	ubfiz	x1, x1, #3, #32
   37e94:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   37e98:	ldr	x0, [x0, #3944]
   37e9c:	ldr	w1, [x0, x1]
   37ea0:	tbnz	w1, #31, 37f44 <aarch64_ins_addr_offset@@Base+0x1ac>
   37ea4:	add	w0, w4, w1
   37ea8:	cmp	w0, #0x20
   37eac:	b.gt	37f44 <aarch64_ins_addr_offset@@Base+0x1ac>
   37eb0:	mov	w0, #0xffffffff            	// #-1
   37eb4:	lsl	w0, w0, w4
   37eb8:	mvn	w0, w0
   37ebc:	and	w0, w0, #0x1
   37ec0:	lsl	w0, w0, w1
   37ec4:	orr	w3, w0, w3
   37ec8:	str	w3, [x2]
   37ecc:	mov	w0, #0x1                   	// #1
   37ed0:	ldp	x29, x30, [sp], #16
   37ed4:	ret
   37ed8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37edc:	add	x3, x3, #0x18
   37ee0:	add	x3, x3, #0x10
   37ee4:	mov	w2, #0x169                 	// #361
   37ee8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37eec:	add	x1, x1, #0x970
   37ef0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37ef4:	add	x0, x0, #0x990
   37ef8:	bl	35ac0 <__assert_fail@plt>
   37efc:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37f00:	add	x3, x3, #0x18
   37f04:	add	x3, x3, #0x10
   37f08:	mov	w2, #0x169                 	// #361
   37f0c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37f10:	add	x1, x1, #0x970
   37f14:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37f18:	add	x0, x0, #0x990
   37f1c:	bl	35ac0 <__assert_fail@plt>
   37f20:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37f24:	add	x3, x3, #0x18
   37f28:	add	x3, x3, #0x118
   37f2c:	mov	w2, #0x2a2                 	// #674
   37f30:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37f34:	add	x1, x1, #0x940
   37f38:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37f3c:	add	x0, x0, #0xb88
   37f40:	bl	35ac0 <__assert_fail@plt>
   37f44:	adrp	x3, 59000 <xexit@@Base+0x74c>
   37f48:	add	x3, x3, #0x18
   37f4c:	add	x3, x3, #0x10
   37f50:	mov	w2, #0x169                 	// #361
   37f54:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   37f58:	add	x1, x1, #0x970
   37f5c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   37f60:	add	x0, x0, #0x990
   37f64:	bl	35ac0 <__assert_fail@plt>

0000000000037f68 <aarch64_ins_addr_simm@@Base>:
   37f68:	stp	x29, x30, [sp, #-80]!
   37f6c:	mov	x29, sp
   37f70:	stp	x19, x20, [sp, #16]
   37f74:	stp	x21, x22, [sp, #32]
   37f78:	str	x23, [sp, #48]
   37f7c:	mov	x21, x0
   37f80:	mov	x19, x1
   37f84:	mov	x20, x2
   37f88:	ldr	w2, [x1, #16]
   37f8c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   37f90:	ldr	x0, [x0, #3944]
   37f94:	ldr	w0, [x0, #116]
   37f98:	sub	w1, w0, #0x1
   37f9c:	cmp	w1, #0x1e
   37fa0:	b.hi	380ac <aarch64_ins_addr_simm@@Base+0x144>  // b.pmore
   37fa4:	mov	x22, x3
   37fa8:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   37fac:	ldr	x1, [x1, #3944]
   37fb0:	ldr	w1, [x1, #112]
   37fb4:	tbnz	w1, #31, 380ac <aarch64_ins_addr_simm@@Base+0x144>
   37fb8:	add	w3, w0, w1
   37fbc:	cmp	w3, #0x20
   37fc0:	b.gt	380ac <aarch64_ins_addr_simm@@Base+0x144>
   37fc4:	mov	w4, #0xffffffff            	// #-1
   37fc8:	lsl	w4, w4, w0
   37fcc:	bic	w4, w2, w4
   37fd0:	lsl	w4, w4, w1
   37fd4:	ldr	w0, [x20]
   37fd8:	orr	w4, w0, w4
   37fdc:	str	w4, [x20]
   37fe0:	ldr	w23, [x19, #20]
   37fe4:	ldr	w0, [x21, #20]
   37fe8:	cmp	w0, #0x2c
   37fec:	b.eq	380d0 <aarch64_ins_addr_simm@@Base+0x168>  // b.none
   37ff0:	ldrb	w0, [x19, #4]
   37ff4:	cmp	w0, #0x19
   37ff8:	b.eq	380d0 <aarch64_ins_addr_simm@@Base+0x168>  // b.none
   37ffc:	ldr	w1, [x21, #20]
   38000:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   38004:	ldr	x0, [x0, #3944]
   38008:	add	x0, x0, w1, uxtw #3
   3800c:	ldr	w2, [x0, #4]
   38010:	sub	w0, w2, #0x1
   38014:	cmp	w0, #0x1e
   38018:	b.hi	38150 <aarch64_ins_addr_simm@@Base+0x1e8>  // b.pmore
   3801c:	ubfiz	x1, x1, #3, #32
   38020:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   38024:	ldr	x0, [x0, #3944]
   38028:	ldr	w0, [x0, x1]
   3802c:	tbnz	w0, #31, 38150 <aarch64_ins_addr_simm@@Base+0x1e8>
   38030:	add	w1, w2, w0
   38034:	cmp	w1, #0x20
   38038:	b.gt	38150 <aarch64_ins_addr_simm@@Base+0x1e8>
   3803c:	mov	w4, #0xffffffff            	// #-1
   38040:	lsl	w4, w4, w2
   38044:	bic	w4, w23, w4
   38048:	lsl	w4, w4, w0
   3804c:	ldr	w0, [x20]
   38050:	orr	w4, w4, w0
   38054:	str	w4, [x20]
   38058:	ldrb	w0, [x19, #28]
   3805c:	tbz	w0, #1, 38094 <aarch64_ins_addr_simm@@Base+0x12c>
   38060:	ldr	x1, [x22, #8]
   38064:	ldr	w1, [x1, #16]
   38068:	sub	w2, w1, #0x3a
   3806c:	sub	w1, w1, #0x3d
   38070:	cmp	w2, #0x1
   38074:	ccmp	w1, #0x1, #0x0, hi  // hi = pmore
   38078:	b.ls	38174 <aarch64_ins_addr_simm@@Base+0x20c>  // b.plast
   3807c:	ldrb	w1, [x19, #28]
   38080:	ubfx	x2, x1, #2, #1
   38084:	ubfx	x1, x1, #3, #1
   38088:	cmp	w2, w1
   3808c:	b.eq	38198 <aarch64_ins_addr_simm@@Base+0x230>  // b.none
   38090:	tbnz	w0, #2, 381bc <aarch64_ins_addr_simm@@Base+0x254>
   38094:	mov	w0, #0x1                   	// #1
   38098:	ldp	x19, x20, [sp, #16]
   3809c:	ldp	x21, x22, [sp, #32]
   380a0:	ldr	x23, [sp, #48]
   380a4:	ldp	x29, x30, [sp], #80
   380a8:	ret
   380ac:	adrp	x3, 59000 <xexit@@Base+0x74c>
   380b0:	add	x3, x3, #0x18
   380b4:	add	x3, x3, #0x10
   380b8:	mov	w2, #0x169                 	// #361
   380bc:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   380c0:	add	x1, x1, #0x970
   380c4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   380c8:	add	x0, x0, #0x990
   380cc:	bl	35ac0 <__assert_fail@plt>
   380d0:	ldrb	w0, [x19, #4]
   380d4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   380d8:	and	w0, w0, #0xff
   380dc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   380e0:	add	x1, x1, #0x18
   380e4:	ldp	x2, x3, [x1, #304]
   380e8:	stp	x2, x3, [sp, #64]
   380ec:	cmp	w0, #0x10
   380f0:	b.hi	38110 <aarch64_ins_addr_simm@@Base+0x1a8>  // b.pmore
   380f4:	sub	w0, w0, #0x1
   380f8:	add	x1, sp, #0x40
   380fc:	ldrb	w0, [x1, w0, uxtw]
   38100:	cmp	w0, #0xff
   38104:	b.eq	3812c <aarch64_ins_addr_simm@@Base+0x1c4>  // b.none
   38108:	asr	w23, w23, w0
   3810c:	b	37ffc <aarch64_ins_addr_simm@@Base+0x94>
   38110:	add	x3, x1, #0x140
   38114:	mov	w2, #0x200                 	// #512
   38118:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3811c:	add	x1, x1, #0x970
   38120:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   38124:	add	x0, x0, #0xb60
   38128:	bl	35ac0 <__assert_fail@plt>
   3812c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38130:	add	x3, x3, #0x18
   38134:	add	x3, x3, #0x140
   38138:	mov	w2, #0x203                 	// #515
   3813c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38140:	add	x1, x1, #0x970
   38144:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38148:	add	x0, x0, #0xbc0
   3814c:	bl	35ac0 <__assert_fail@plt>
   38150:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38154:	add	x3, x3, #0x18
   38158:	add	x3, x3, #0x10
   3815c:	mov	w2, #0x169                 	// #361
   38160:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38164:	add	x1, x1, #0x970
   38168:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3816c:	add	x0, x0, #0x990
   38170:	bl	35ac0 <__assert_fail@plt>
   38174:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38178:	add	x3, x3, #0x18
   3817c:	add	x3, x3, #0x150
   38180:	mov	w2, #0x2be                 	// #702
   38184:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38188:	add	x1, x1, #0x940
   3818c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38190:	add	x0, x0, #0xbe8
   38194:	bl	35ac0 <__assert_fail@plt>
   38198:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3819c:	add	x3, x3, #0x18
   381a0:	add	x3, x3, #0x150
   381a4:	mov	w2, #0x2c2                 	// #706
   381a8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   381ac:	add	x1, x1, #0x940
   381b0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   381b4:	add	x0, x0, #0xc88
   381b8:	bl	35ac0 <__assert_fail@plt>
   381bc:	ldr	w1, [x21, #24]
   381c0:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   381c4:	ldr	x0, [x0, #3944]
   381c8:	add	x0, x0, w1, uxtw #3
   381cc:	ldr	w2, [x0, #4]
   381d0:	sub	w0, w2, #0x1
   381d4:	cmp	w0, #0x1e
   381d8:	b.hi	3821c <aarch64_ins_addr_simm@@Base+0x2b4>  // b.pmore
   381dc:	ubfiz	x1, x1, #3, #32
   381e0:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   381e4:	ldr	x0, [x0, #3944]
   381e8:	ldr	w1, [x0, x1]
   381ec:	tbnz	w1, #31, 3821c <aarch64_ins_addr_simm@@Base+0x2b4>
   381f0:	add	w0, w2, w1
   381f4:	cmp	w0, #0x20
   381f8:	b.gt	3821c <aarch64_ins_addr_simm@@Base+0x2b4>
   381fc:	mov	w0, #0xffffffff            	// #-1
   38200:	lsl	w0, w0, w2
   38204:	mvn	w0, w0
   38208:	and	w0, w0, #0x1
   3820c:	lsl	w0, w0, w1
   38210:	orr	w4, w0, w4
   38214:	str	w4, [x20]
   38218:	b	38094 <aarch64_ins_addr_simm@@Base+0x12c>
   3821c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38220:	add	x3, x3, #0x18
   38224:	add	x3, x3, #0x10
   38228:	mov	w2, #0x169                 	// #361
   3822c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38230:	add	x1, x1, #0x970
   38234:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38238:	add	x0, x0, #0x990
   3823c:	bl	35ac0 <__assert_fail@plt>

0000000000038240 <aarch64_ins_addr_simm10@@Base>:
   38240:	stp	x29, x30, [sp, #-16]!
   38244:	mov	x29, sp
   38248:	ldr	w5, [x0, #20]
   3824c:	ldr	w7, [x1, #16]
   38250:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   38254:	ldr	x4, [x4, #3944]
   38258:	add	x4, x4, w5, uxtw #3
   3825c:	ldr	w4, [x4, #4]
   38260:	sub	w6, w4, #0x1
   38264:	cmp	w6, #0x1e
   38268:	b.hi	383e0 <aarch64_ins_addr_simm10@@Base+0x1a0>  // b.pmore
   3826c:	ubfiz	x5, x5, #3, #32
   38270:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   38274:	ldr	x6, [x6, #3944]
   38278:	ldr	w5, [x6, x5]
   3827c:	tbnz	w5, #31, 383e0 <aarch64_ins_addr_simm10@@Base+0x1a0>
   38280:	add	w3, w4, w5
   38284:	cmp	w3, #0x20
   38288:	b.gt	383e0 <aarch64_ins_addr_simm10@@Base+0x1a0>
   3828c:	mov	w3, #0xffffffff            	// #-1
   38290:	lsl	w3, w3, w4
   38294:	bic	w3, w7, w3
   38298:	lsl	w3, w3, w5
   3829c:	ldr	w4, [x2]
   382a0:	orr	w3, w3, w4
   382a4:	str	w3, [x2]
   382a8:	ldr	w4, [x1, #20]
   382ac:	asr	w9, w4, #3
   382b0:	ldr	w6, [x0, #24]
   382b4:	asr	w7, w4, #12
   382b8:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   382bc:	ldr	x5, [x5, #3944]
   382c0:	add	x5, x5, w6, uxtw #3
   382c4:	ldr	w8, [x5, #4]
   382c8:	sub	w4, w8, #0x1
   382cc:	cmp	w4, #0x1e
   382d0:	b.hi	38404 <aarch64_ins_addr_simm10@@Base+0x1c4>  // b.pmore
   382d4:	ubfiz	x6, x6, #3, #32
   382d8:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   382dc:	ldr	x5, [x5, #3944]
   382e0:	ldr	w5, [x5, x6]
   382e4:	tbnz	w5, #31, 38404 <aarch64_ins_addr_simm10@@Base+0x1c4>
   382e8:	add	w4, w8, w5
   382ec:	cmp	w4, #0x20
   382f0:	b.gt	38404 <aarch64_ins_addr_simm10@@Base+0x1c4>
   382f4:	mov	w4, #0xffffffff            	// #-1
   382f8:	lsl	w4, w4, w8
   382fc:	bic	w4, w7, w4
   38300:	lsl	w4, w4, w5
   38304:	orr	w3, w4, w3
   38308:	str	w3, [x2]
   3830c:	ldr	w6, [x0, #28]
   38310:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   38314:	ldr	x5, [x5, #3944]
   38318:	add	x5, x5, w6, uxtw #3
   3831c:	ldr	w7, [x5, #4]
   38320:	sub	w4, w7, #0x1
   38324:	cmp	w4, #0x1e
   38328:	b.hi	38428 <aarch64_ins_addr_simm10@@Base+0x1e8>  // b.pmore
   3832c:	ubfiz	x6, x6, #3, #32
   38330:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   38334:	ldr	x5, [x5, #3944]
   38338:	ldr	w5, [x5, x6]
   3833c:	tbnz	w5, #31, 38428 <aarch64_ins_addr_simm10@@Base+0x1e8>
   38340:	add	w4, w7, w5
   38344:	cmp	w4, #0x20
   38348:	b.gt	38428 <aarch64_ins_addr_simm10@@Base+0x1e8>
   3834c:	mov	w4, #0xffffffff            	// #-1
   38350:	lsl	w4, w4, w7
   38354:	bic	w4, w9, w4
   38358:	lsl	w4, w4, w5
   3835c:	orr	w3, w4, w3
   38360:	str	w3, [x2]
   38364:	ldrb	w1, [x1, #28]
   38368:	tbz	w1, #1, 383d4 <aarch64_ins_addr_simm10@@Base+0x194>
   3836c:	and	w1, w1, #0xc
   38370:	cmp	w1, #0x4
   38374:	b.ne	3844c <aarch64_ins_addr_simm10@@Base+0x20c>  // b.any
   38378:	ldr	w1, [x0, #32]
   3837c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   38380:	ldr	x0, [x0, #3944]
   38384:	add	x0, x0, w1, uxtw #3
   38388:	ldr	w4, [x0, #4]
   3838c:	sub	w0, w4, #0x1
   38390:	cmp	w0, #0x1e
   38394:	b.hi	38470 <aarch64_ins_addr_simm10@@Base+0x230>  // b.pmore
   38398:	ubfiz	x1, x1, #3, #32
   3839c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   383a0:	ldr	x0, [x0, #3944]
   383a4:	ldr	w1, [x0, x1]
   383a8:	tbnz	w1, #31, 38470 <aarch64_ins_addr_simm10@@Base+0x230>
   383ac:	add	w0, w4, w1
   383b0:	cmp	w0, #0x20
   383b4:	b.gt	38470 <aarch64_ins_addr_simm10@@Base+0x230>
   383b8:	mov	w0, #0xffffffff            	// #-1
   383bc:	lsl	w0, w0, w4
   383c0:	mvn	w0, w0
   383c4:	and	w0, w0, #0x1
   383c8:	lsl	w0, w0, w1
   383cc:	orr	w3, w0, w3
   383d0:	str	w3, [x2]
   383d4:	mov	w0, #0x1                   	// #1
   383d8:	ldp	x29, x30, [sp], #16
   383dc:	ret
   383e0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   383e4:	add	x3, x3, #0x18
   383e8:	add	x3, x3, #0x10
   383ec:	mov	w2, #0x169                 	// #361
   383f0:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   383f4:	add	x1, x1, #0x970
   383f8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   383fc:	add	x0, x0, #0x990
   38400:	bl	35ac0 <__assert_fail@plt>
   38404:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38408:	add	x3, x3, #0x18
   3840c:	add	x3, x3, #0x10
   38410:	mov	w2, #0x169                 	// #361
   38414:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38418:	add	x1, x1, #0x970
   3841c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38420:	add	x0, x0, #0x990
   38424:	bl	35ac0 <__assert_fail@plt>
   38428:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3842c:	add	x3, x3, #0x18
   38430:	add	x3, x3, #0x10
   38434:	mov	w2, #0x169                 	// #361
   38438:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3843c:	add	x1, x1, #0x970
   38440:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38444:	add	x0, x0, #0x990
   38448:	bl	35ac0 <__assert_fail@plt>
   3844c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38450:	add	x3, x3, #0x18
   38454:	add	x3, x3, #0x168
   38458:	mov	w2, #0x2dd                 	// #733
   3845c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38460:	add	x1, x1, #0x940
   38464:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38468:	add	x0, x0, #0xb88
   3846c:	bl	35ac0 <__assert_fail@plt>
   38470:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38474:	add	x3, x3, #0x18
   38478:	add	x3, x3, #0x10
   3847c:	mov	w2, #0x169                 	// #361
   38480:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38484:	add	x1, x1, #0x970
   38488:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3848c:	add	x0, x0, #0x990
   38490:	bl	35ac0 <__assert_fail@plt>

0000000000038494 <aarch64_ins_addr_uimm12@@Base>:
   38494:	stp	x29, x30, [sp, #-64]!
   38498:	mov	x29, sp
   3849c:	stp	x19, x20, [sp, #16]
   384a0:	str	x21, [sp, #32]
   384a4:	mov	x21, x0
   384a8:	mov	x20, x1
   384ac:	mov	x19, x2
   384b0:	ldrb	w0, [x1, #4]
   384b4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   384b8:	and	w2, w0, #0xff
   384bc:	adrp	x0, 59000 <xexit@@Base+0x74c>
   384c0:	add	x0, x0, #0x18
   384c4:	ldp	x0, x1, [x0, #304]
   384c8:	stp	x0, x1, [sp, #48]
   384cc:	cmp	w2, #0x10
   384d0:	b.hi	385bc <aarch64_ins_addr_uimm12@@Base+0x128>  // b.pmore
   384d4:	sub	w2, w2, #0x1
   384d8:	add	x0, sp, #0x30
   384dc:	ldrb	w5, [x0, w2, uxtw]
   384e0:	cmp	w5, #0xff
   384e4:	b.eq	385e0 <aarch64_ins_addr_uimm12@@Base+0x14c>  // b.none
   384e8:	ldr	w2, [x21, #20]
   384ec:	ldr	w6, [x20, #16]
   384f0:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   384f4:	ldr	x1, [x1, #3944]
   384f8:	add	x1, x1, w2, uxtw #3
   384fc:	ldr	w1, [x1, #4]
   38500:	sub	w0, w1, #0x1
   38504:	cmp	w0, #0x1e
   38508:	b.hi	38604 <aarch64_ins_addr_uimm12@@Base+0x170>  // b.pmore
   3850c:	ubfiz	x2, x2, #3, #32
   38510:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   38514:	ldr	x4, [x4, #3944]
   38518:	ldr	w2, [x4, x2]
   3851c:	tbnz	w2, #31, 38604 <aarch64_ins_addr_uimm12@@Base+0x170>
   38520:	add	w0, w1, w2
   38524:	cmp	w0, #0x20
   38528:	b.gt	38604 <aarch64_ins_addr_uimm12@@Base+0x170>
   3852c:	mov	w3, #0xffffffff            	// #-1
   38530:	lsl	w3, w3, w1
   38534:	bic	w3, w6, w3
   38538:	lsl	w3, w3, w2
   3853c:	ldr	w0, [x19]
   38540:	orr	w3, w3, w0
   38544:	str	w3, [x19]
   38548:	ldr	w2, [x21, #24]
   3854c:	ldr	w0, [x20, #20]
   38550:	asr	w4, w0, w5
   38554:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   38558:	ldr	x1, [x1, #3944]
   3855c:	add	x1, x1, w2, uxtw #3
   38560:	ldr	w1, [x1, #4]
   38564:	sub	w0, w1, #0x1
   38568:	cmp	w0, #0x1e
   3856c:	b.hi	38628 <aarch64_ins_addr_uimm12@@Base+0x194>  // b.pmore
   38570:	ubfiz	x2, x2, #3, #32
   38574:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   38578:	ldr	x0, [x0, #3944]
   3857c:	ldr	w2, [x0, x2]
   38580:	tbnz	w2, #31, 38628 <aarch64_ins_addr_uimm12@@Base+0x194>
   38584:	add	w0, w1, w2
   38588:	cmp	w0, #0x20
   3858c:	b.gt	38628 <aarch64_ins_addr_uimm12@@Base+0x194>
   38590:	mov	w0, #0xffffffff            	// #-1
   38594:	lsl	w0, w0, w1
   38598:	bic	w0, w4, w0
   3859c:	lsl	w0, w0, w2
   385a0:	orr	w3, w0, w3
   385a4:	str	w3, [x19]
   385a8:	mov	w0, #0x1                   	// #1
   385ac:	ldp	x19, x20, [sp, #16]
   385b0:	ldr	x21, [sp, #32]
   385b4:	ldp	x29, x30, [sp], #64
   385b8:	ret
   385bc:	adrp	x3, 59000 <xexit@@Base+0x74c>
   385c0:	add	x3, x3, #0x18
   385c4:	add	x3, x3, #0x140
   385c8:	mov	w2, #0x200                 	// #512
   385cc:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   385d0:	add	x1, x1, #0x970
   385d4:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   385d8:	add	x0, x0, #0xb60
   385dc:	bl	35ac0 <__assert_fail@plt>
   385e0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   385e4:	add	x3, x3, #0x18
   385e8:	add	x3, x3, #0x140
   385ec:	mov	w2, #0x203                 	// #515
   385f0:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   385f4:	add	x1, x1, #0x970
   385f8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   385fc:	add	x0, x0, #0xbc0
   38600:	bl	35ac0 <__assert_fail@plt>
   38604:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38608:	add	x3, x3, #0x18
   3860c:	add	x3, x3, #0x10
   38610:	mov	w2, #0x169                 	// #361
   38614:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38618:	add	x1, x1, #0x970
   3861c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38620:	add	x0, x0, #0x990
   38624:	bl	35ac0 <__assert_fail@plt>
   38628:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3862c:	add	x3, x3, #0x18
   38630:	add	x3, x3, #0x10
   38634:	mov	w2, #0x169                 	// #361
   38638:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3863c:	add	x1, x1, #0x970
   38640:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38644:	add	x0, x0, #0x990
   38648:	bl	35ac0 <__assert_fail@plt>

000000000003864c <aarch64_ins_simd_addr_post@@Base>:
   3864c:	stp	x29, x30, [sp, #-16]!
   38650:	mov	x29, sp
   38654:	ldr	w5, [x1, #16]
   38658:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   3865c:	ldr	x3, [x3, #3944]
   38660:	ldr	w3, [x3, #116]
   38664:	sub	w4, w3, #0x1
   38668:	cmp	w4, #0x1e
   3866c:	b.hi	3870c <aarch64_ins_simd_addr_post@@Base+0xc0>  // b.pmore
   38670:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   38674:	ldr	x4, [x4, #3944]
   38678:	ldr	w4, [x4, #112]
   3867c:	tbnz	w4, #31, 3870c <aarch64_ins_simd_addr_post@@Base+0xc0>
   38680:	add	w0, w3, w4
   38684:	cmp	w0, #0x20
   38688:	b.gt	3870c <aarch64_ins_simd_addr_post@@Base+0xc0>
   3868c:	mov	w0, #0xffffffff            	// #-1
   38690:	lsl	w0, w0, w3
   38694:	bic	w0, w5, w0
   38698:	lsl	w0, w0, w4
   3869c:	ldr	w3, [x2]
   386a0:	orr	w0, w0, w3
   386a4:	str	w0, [x2]
   386a8:	ldr	w3, [x1, #24]
   386ac:	cbz	w3, 38754 <aarch64_ins_simd_addr_post@@Base+0x108>
   386b0:	ldr	w6, [x1, #20]
   386b4:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   386b8:	ldr	x3, [x3, #3944]
   386bc:	ldr	w4, [x3, #228]
   386c0:	sub	w3, w4, #0x1
   386c4:	cmp	w3, #0x1e
   386c8:	b.hi	38730 <aarch64_ins_simd_addr_post@@Base+0xe4>  // b.pmore
   386cc:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   386d0:	ldr	x3, [x3, #3944]
   386d4:	ldr	w3, [x3, #224]
   386d8:	tbnz	w3, #31, 38730 <aarch64_ins_simd_addr_post@@Base+0xe4>
   386dc:	add	w5, w4, w3
   386e0:	cmp	w5, #0x20
   386e4:	b.gt	38730 <aarch64_ins_simd_addr_post@@Base+0xe4>
   386e8:	mov	w1, #0xffffffff            	// #-1
   386ec:	lsl	w1, w1, w4
   386f0:	bic	w1, w6, w1
   386f4:	lsl	w1, w1, w3
   386f8:	orr	w0, w1, w0
   386fc:	str	w0, [x2]
   38700:	mov	w0, #0x1                   	// #1
   38704:	ldp	x29, x30, [sp], #16
   38708:	ret
   3870c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38710:	add	x3, x3, #0x18
   38714:	add	x3, x3, #0x10
   38718:	mov	w2, #0x169                 	// #361
   3871c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38720:	add	x1, x1, #0x970
   38724:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38728:	add	x0, x0, #0x990
   3872c:	bl	35ac0 <__assert_fail@plt>
   38730:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38734:	add	x3, x3, #0x18
   38738:	add	x3, x3, #0x10
   3873c:	mov	w2, #0x169                 	// #361
   38740:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38744:	add	x1, x1, #0x970
   38748:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3874c:	add	x0, x0, #0x990
   38750:	bl	35ac0 <__assert_fail@plt>
   38754:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   38758:	ldr	x1, [x1, #3944]
   3875c:	ldr	w4, [x1, #228]
   38760:	sub	w1, w4, #0x1
   38764:	cmp	w1, #0x1e
   38768:	b.hi	387a8 <aarch64_ins_simd_addr_post@@Base+0x15c>  // b.pmore
   3876c:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   38770:	ldr	x3, [x3, #3944]
   38774:	ldr	w3, [x3, #224]
   38778:	tbnz	w3, #31, 387a8 <aarch64_ins_simd_addr_post@@Base+0x15c>
   3877c:	add	w1, w4, w3
   38780:	cmp	w1, #0x20
   38784:	b.gt	387a8 <aarch64_ins_simd_addr_post@@Base+0x15c>
   38788:	mov	w1, #0xffffffff            	// #-1
   3878c:	lsl	w1, w1, w4
   38790:	mvn	w1, w1
   38794:	and	w1, w1, #0x1f
   38798:	lsl	w1, w1, w3
   3879c:	orr	w0, w1, w0
   387a0:	str	w0, [x2]
   387a4:	b	38700 <aarch64_ins_simd_addr_post@@Base+0xb4>
   387a8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   387ac:	add	x3, x3, #0x18
   387b0:	add	x3, x3, #0x10
   387b4:	mov	w2, #0x169                 	// #361
   387b8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   387bc:	add	x1, x1, #0x970
   387c0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   387c4:	add	x0, x0, #0x990
   387c8:	bl	35ac0 <__assert_fail@plt>

00000000000387cc <aarch64_ins_cond@@Base>:
   387cc:	ldr	x0, [x1, #16]
   387d0:	ldr	w4, [x0, #32]
   387d4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   387d8:	ldr	x1, [x1, #3944]
   387dc:	ldr	w1, [x1, #188]
   387e0:	sub	w3, w1, #0x1
   387e4:	cmp	w3, #0x1e
   387e8:	b.hi	3882c <aarch64_ins_cond@@Base+0x60>  // b.pmore
   387ec:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   387f0:	ldr	x3, [x3, #3944]
   387f4:	ldr	w3, [x3, #184]
   387f8:	tbnz	w3, #31, 3882c <aarch64_ins_cond@@Base+0x60>
   387fc:	add	w0, w1, w3
   38800:	cmp	w0, #0x20
   38804:	b.gt	3882c <aarch64_ins_cond@@Base+0x60>
   38808:	mov	w0, #0xffffffff            	// #-1
   3880c:	lsl	w0, w0, w1
   38810:	bic	w0, w4, w0
   38814:	lsl	w0, w0, w3
   38818:	ldr	w1, [x2]
   3881c:	orr	w0, w1, w0
   38820:	str	w0, [x2]
   38824:	mov	w0, #0x1                   	// #1
   38828:	ret
   3882c:	stp	x29, x30, [sp, #-16]!
   38830:	mov	x29, sp
   38834:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38838:	add	x3, x3, #0x18
   3883c:	add	x3, x3, #0x10
   38840:	mov	w2, #0x169                 	// #361
   38844:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38848:	add	x1, x1, #0x970
   3884c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38850:	add	x0, x0, #0x990
   38854:	bl	35ac0 <__assert_fail@plt>

0000000000038858 <aarch64_ins_sysreg@@Base>:
   38858:	sub	sp, sp, #0x40
   3885c:	stp	x29, x30, [sp, #16]
   38860:	add	x29, sp, #0x10
   38864:	stp	x19, x20, [sp, #32]
   38868:	stp	x21, x22, [sp, #48]
   3886c:	mov	x20, x1
   38870:	mov	x21, x2
   38874:	mov	x19, x3
   38878:	ldr	x0, [x3, #8]
   3887c:	ldr	w1, [x0, #16]
   38880:	cmp	w1, #0x46
   38884:	b.eq	388d0 <aarch64_ins_sysreg@@Base+0x78>  // b.none
   38888:	ldr	x0, [x19, #8]
   3888c:	ldr	w2, [x0, #12]
   38890:	mov	w0, #0x15                  	// #21
   38894:	str	w0, [sp]
   38898:	mov	w7, #0x14                  	// #20
   3889c:	mov	w6, #0x13                  	// #19
   388a0:	mov	w5, #0x12                  	// #18
   388a4:	mov	w4, #0x11                  	// #17
   388a8:	mov	w3, #0x5                   	// #5
   388ac:	ldr	w1, [x20, #16]
   388b0:	mov	x0, x21
   388b4:	bl	36190 <init_disassemble_info@@Base+0x138>
   388b8:	mov	w0, #0x1                   	// #1
   388bc:	ldp	x19, x20, [sp, #32]
   388c0:	ldp	x21, x22, [sp, #48]
   388c4:	ldp	x29, x30, [sp, #16]
   388c8:	add	sp, sp, #0x40
   388cc:	ret
   388d0:	mov	x22, x4
   388d4:	ldr	x0, [x0, #120]
   388d8:	and	x0, x0, #0x60000000
   388dc:	ldr	w1, [x20, #20]
   388e0:	ubfx	x2, x1, #3, #1
   388e4:	tst	x1, #0x10
   388e8:	mov	x1, #0x20000000            	// #536870912
   388ec:	ccmp	x0, x1, #0x0, ne  // ne = any
   388f0:	b.eq	3893c <aarch64_ins_sysreg@@Base+0xe4>  // b.none
   388f4:	cmp	w2, #0x0
   388f8:	mov	x1, #0x40000000            	// #1073741824
   388fc:	ccmp	x0, x1, #0x0, ne  // ne = any
   38900:	b.ne	38888 <aarch64_ins_sysreg@@Base+0x30>  // b.any
   38904:	mov	w0, #0x2                   	// #2
   38908:	str	w0, [x4]
   3890c:	mov	w2, #0x5                   	// #5
   38910:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38914:	add	x1, x1, #0xcd8
   38918:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3891c:	add	x0, x0, #0x908
   38920:	bl	359e0 <dcgettext@plt>
   38924:	str	x0, [x22, #8]
   38928:	ldr	w0, [x20, #8]
   3892c:	str	w0, [x22, #4]
   38930:	mov	w0, #0x1                   	// #1
   38934:	str	w0, [x22, #28]
   38938:	b	38888 <aarch64_ins_sysreg@@Base+0x30>
   3893c:	mov	w0, #0x2                   	// #2
   38940:	str	w0, [x4]
   38944:	mov	w2, #0x5                   	// #5
   38948:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3894c:	add	x1, x1, #0xcb0
   38950:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38954:	add	x0, x0, #0x908
   38958:	bl	359e0 <dcgettext@plt>
   3895c:	str	x0, [x22, #8]
   38960:	ldr	w0, [x20, #8]
   38964:	str	w0, [x22, #4]
   38968:	mov	w0, #0x1                   	// #1
   3896c:	str	w0, [x22, #28]
   38970:	b	38888 <aarch64_ins_sysreg@@Base+0x30>

0000000000038974 <aarch64_ins_pstatefield@@Base>:
   38974:	stp	x29, x30, [sp, #-16]!
   38978:	mov	x29, sp
   3897c:	mov	x0, x2
   38980:	ldr	x2, [x3, #8]
   38984:	mov	w5, #0x14                  	// #20
   38988:	mov	w4, #0x11                  	// #17
   3898c:	mov	w3, #0x2                   	// #2
   38990:	ldr	w2, [x2, #12]
   38994:	ldr	w1, [x1, #16]
   38998:	bl	36190 <init_disassemble_info@@Base+0x138>
   3899c:	mov	w0, #0x1                   	// #1
   389a0:	ldp	x29, x30, [sp], #16
   389a4:	ret

00000000000389a8 <aarch64_ins_sysins_op@@Base>:
   389a8:	stp	x29, x30, [sp, #-16]!
   389ac:	mov	x29, sp
   389b0:	mov	x0, x2
   389b4:	ldr	x2, [x3, #8]
   389b8:	ldr	x1, [x1, #16]
   389bc:	mov	w7, #0x14                  	// #20
   389c0:	mov	w6, #0x13                  	// #19
   389c4:	mov	w5, #0x12                  	// #18
   389c8:	mov	w4, #0x11                  	// #17
   389cc:	mov	w3, #0x4                   	// #4
   389d0:	ldr	w2, [x2, #12]
   389d4:	ldr	w1, [x1, #8]
   389d8:	bl	36190 <init_disassemble_info@@Base+0x138>
   389dc:	mov	w0, #0x1                   	// #1
   389e0:	ldp	x29, x30, [sp], #16
   389e4:	ret

00000000000389e8 <aarch64_ins_barrier@@Base>:
   389e8:	ldr	x0, [x1, #16]
   389ec:	ldr	w4, [x0, #8]
   389f0:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   389f4:	ldr	x1, [x1, #3944]
   389f8:	ldr	w1, [x1, #148]
   389fc:	sub	w3, w1, #0x1
   38a00:	cmp	w3, #0x1e
   38a04:	b.hi	38a48 <aarch64_ins_barrier@@Base+0x60>  // b.pmore
   38a08:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   38a0c:	ldr	x3, [x3, #3944]
   38a10:	ldr	w3, [x3, #144]
   38a14:	tbnz	w3, #31, 38a48 <aarch64_ins_barrier@@Base+0x60>
   38a18:	add	w0, w1, w3
   38a1c:	cmp	w0, #0x20
   38a20:	b.gt	38a48 <aarch64_ins_barrier@@Base+0x60>
   38a24:	mov	w0, #0xffffffff            	// #-1
   38a28:	lsl	w0, w0, w1
   38a2c:	bic	w0, w4, w0
   38a30:	lsl	w0, w0, w3
   38a34:	ldr	w1, [x2]
   38a38:	orr	w0, w1, w0
   38a3c:	str	w0, [x2]
   38a40:	mov	w0, #0x1                   	// #1
   38a44:	ret
   38a48:	stp	x29, x30, [sp, #-16]!
   38a4c:	mov	x29, sp
   38a50:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38a54:	add	x3, x3, #0x18
   38a58:	add	x3, x3, #0x10
   38a5c:	mov	w2, #0x169                 	// #361
   38a60:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38a64:	add	x1, x1, #0x970
   38a68:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38a6c:	add	x0, x0, #0x990
   38a70:	bl	35ac0 <__assert_fail@plt>

0000000000038a74 <aarch64_ins_prfop@@Base>:
   38a74:	ldr	x0, [x1, #16]
   38a78:	ldr	w4, [x0, #8]
   38a7c:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   38a80:	ldr	x1, [x1, #3944]
   38a84:	ldr	w1, [x1, #100]
   38a88:	sub	w3, w1, #0x1
   38a8c:	cmp	w3, #0x1e
   38a90:	b.hi	38ad4 <aarch64_ins_prfop@@Base+0x60>  // b.pmore
   38a94:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   38a98:	ldr	x3, [x3, #3944]
   38a9c:	ldr	w3, [x3, #96]
   38aa0:	tbnz	w3, #31, 38ad4 <aarch64_ins_prfop@@Base+0x60>
   38aa4:	add	w0, w1, w3
   38aa8:	cmp	w0, #0x20
   38aac:	b.gt	38ad4 <aarch64_ins_prfop@@Base+0x60>
   38ab0:	mov	w0, #0xffffffff            	// #-1
   38ab4:	lsl	w0, w0, w1
   38ab8:	bic	w0, w4, w0
   38abc:	lsl	w0, w0, w3
   38ac0:	ldr	w1, [x2]
   38ac4:	orr	w0, w1, w0
   38ac8:	str	w0, [x2]
   38acc:	mov	w0, #0x1                   	// #1
   38ad0:	ret
   38ad4:	stp	x29, x30, [sp, #-16]!
   38ad8:	mov	x29, sp
   38adc:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38ae0:	add	x3, x3, #0x18
   38ae4:	add	x3, x3, #0x10
   38ae8:	mov	w2, #0x169                 	// #361
   38aec:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38af0:	add	x1, x1, #0x970
   38af4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38af8:	add	x0, x0, #0x990
   38afc:	bl	35ac0 <__assert_fail@plt>

0000000000038b00 <aarch64_ins_hint@@Base>:
   38b00:	stp	x29, x30, [sp, #-16]!
   38b04:	mov	x29, sp
   38b08:	mov	x0, x2
   38b0c:	ldr	x1, [x1, #16]
   38b10:	mov	w5, #0x12                  	// #18
   38b14:	mov	w4, #0x11                  	// #17
   38b18:	mov	w3, #0x2                   	// #2
   38b1c:	mov	w2, #0x0                   	// #0
   38b20:	ldr	w1, [x1, #8]
   38b24:	bl	36190 <init_disassemble_info@@Base+0x138>
   38b28:	mov	w0, #0x1                   	// #1
   38b2c:	ldp	x29, x30, [sp], #16
   38b30:	ret

0000000000038b34 <aarch64_ins_reg_extended@@Base>:
   38b34:	stp	x29, x30, [sp, #-32]!
   38b38:	mov	x29, sp
   38b3c:	stp	x19, x20, [sp, #16]
   38b40:	mov	x20, x1
   38b44:	mov	x19, x2
   38b48:	ldr	w3, [x1, #16]
   38b4c:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   38b50:	ldr	x1, [x1, #3944]
   38b54:	ldr	w1, [x1, #228]
   38b58:	sub	w2, w1, #0x1
   38b5c:	cmp	w2, #0x1e
   38b60:	b.hi	38c5c <aarch64_ins_reg_extended@@Base+0x128>  // b.pmore
   38b64:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   38b68:	ldr	x2, [x2, #3944]
   38b6c:	ldr	w2, [x2, #224]
   38b70:	tbnz	w2, #31, 38c5c <aarch64_ins_reg_extended@@Base+0x128>
   38b74:	add	w0, w1, w2
   38b78:	cmp	w0, #0x20
   38b7c:	b.gt	38c5c <aarch64_ins_reg_extended@@Base+0x128>
   38b80:	mov	w0, #0xffffffff            	// #-1
   38b84:	lsl	w0, w0, w1
   38b88:	bic	w0, w3, w0
   38b8c:	lsl	w0, w0, w2
   38b90:	ldr	w1, [x19]
   38b94:	orr	w0, w1, w0
   38b98:	str	w0, [x19]
   38b9c:	ldr	w0, [x20, #32]
   38ba0:	cmp	w0, #0x5
   38ba4:	b.eq	38c80 <aarch64_ins_reg_extended@@Base+0x14c>  // b.none
   38ba8:	bl	35430 <aarch64_get_operand_modifier_value@plt>
   38bac:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   38bb0:	ldr	x1, [x1, #3944]
   38bb4:	ldr	w2, [x1, #244]
   38bb8:	sub	w1, w2, #0x1
   38bbc:	cmp	w1, #0x1e
   38bc0:	b.hi	38c94 <aarch64_ins_reg_extended@@Base+0x160>  // b.pmore
   38bc4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   38bc8:	ldr	x1, [x1, #3944]
   38bcc:	ldr	w1, [x1, #240]
   38bd0:	tbnz	w1, #31, 38c94 <aarch64_ins_reg_extended@@Base+0x160>
   38bd4:	add	w3, w2, w1
   38bd8:	cmp	w3, #0x20
   38bdc:	b.gt	38c94 <aarch64_ins_reg_extended@@Base+0x160>
   38be0:	mov	w3, #0xffffffff            	// #-1
   38be4:	lsl	w3, w3, w2
   38be8:	bic	w0, w0, w3
   38bec:	lsl	w0, w0, w1
   38bf0:	ldr	w1, [x19]
   38bf4:	orr	w0, w0, w1
   38bf8:	str	w0, [x19]
   38bfc:	ldr	x4, [x20, #40]
   38c00:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   38c04:	ldr	x2, [x2, #3944]
   38c08:	ldr	w3, [x2, #180]
   38c0c:	sub	w2, w3, #0x1
   38c10:	cmp	w2, #0x1e
   38c14:	b.hi	38cb8 <aarch64_ins_reg_extended@@Base+0x184>  // b.pmore
   38c18:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   38c1c:	ldr	x2, [x2, #3944]
   38c20:	ldr	w2, [x2, #176]
   38c24:	tbnz	w2, #31, 38cb8 <aarch64_ins_reg_extended@@Base+0x184>
   38c28:	add	w1, w3, w2
   38c2c:	cmp	w1, #0x20
   38c30:	b.gt	38cb8 <aarch64_ins_reg_extended@@Base+0x184>
   38c34:	mov	w1, #0xffffffff            	// #-1
   38c38:	lsl	w1, w1, w3
   38c3c:	bic	w1, w4, w1
   38c40:	lsl	w1, w1, w2
   38c44:	orr	w0, w1, w0
   38c48:	str	w0, [x19]
   38c4c:	mov	w0, #0x1                   	// #1
   38c50:	ldp	x19, x20, [sp, #16]
   38c54:	ldp	x29, x30, [sp], #32
   38c58:	ret
   38c5c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38c60:	add	x3, x3, #0x18
   38c64:	add	x3, x3, #0x10
   38c68:	mov	w2, #0x169                 	// #361
   38c6c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38c70:	add	x1, x1, #0x970
   38c74:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38c78:	add	x0, x0, #0x990
   38c7c:	bl	35ac0 <__assert_fail@plt>
   38c80:	ldrb	w0, [x20, #4]
   38c84:	cmp	w0, #0x1
   38c88:	cset	w0, ne  // ne = any
   38c8c:	add	w0, w0, #0x8
   38c90:	b	38ba8 <aarch64_ins_reg_extended@@Base+0x74>
   38c94:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38c98:	add	x3, x3, #0x18
   38c9c:	add	x3, x3, #0x10
   38ca0:	mov	w2, #0x169                 	// #361
   38ca4:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38ca8:	add	x1, x1, #0x970
   38cac:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38cb0:	add	x0, x0, #0x990
   38cb4:	bl	35ac0 <__assert_fail@plt>
   38cb8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38cbc:	add	x3, x3, #0x18
   38cc0:	add	x3, x3, #0x10
   38cc4:	mov	w2, #0x169                 	// #361
   38cc8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38ccc:	add	x1, x1, #0x970
   38cd0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38cd4:	add	x0, x0, #0x990
   38cd8:	bl	35ac0 <__assert_fail@plt>

0000000000038cdc <aarch64_ins_reg_shifted@@Base>:
   38cdc:	stp	x29, x30, [sp, #-32]!
   38ce0:	mov	x29, sp
   38ce4:	stp	x19, x20, [sp, #16]
   38ce8:	mov	x20, x1
   38cec:	mov	x19, x2
   38cf0:	ldr	w3, [x1, #16]
   38cf4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   38cf8:	ldr	x1, [x1, #3944]
   38cfc:	ldr	w1, [x1, #228]
   38d00:	sub	w2, w1, #0x1
   38d04:	cmp	w2, #0x1e
   38d08:	b.hi	38dfc <aarch64_ins_reg_shifted@@Base+0x120>  // b.pmore
   38d0c:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   38d10:	ldr	x2, [x2, #3944]
   38d14:	ldr	w2, [x2, #224]
   38d18:	tbnz	w2, #31, 38dfc <aarch64_ins_reg_shifted@@Base+0x120>
   38d1c:	add	w0, w1, w2
   38d20:	cmp	w0, #0x20
   38d24:	b.gt	38dfc <aarch64_ins_reg_shifted@@Base+0x120>
   38d28:	mov	w0, #0xffffffff            	// #-1
   38d2c:	lsl	w0, w0, w1
   38d30:	bic	w0, w3, w0
   38d34:	lsl	w0, w0, w2
   38d38:	ldr	w1, [x19]
   38d3c:	orr	w0, w1, w0
   38d40:	str	w0, [x19]
   38d44:	ldr	w0, [x20, #32]
   38d48:	bl	35430 <aarch64_get_operand_modifier_value@plt>
   38d4c:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   38d50:	ldr	x1, [x1, #3944]
   38d54:	ldr	w2, [x1, #284]
   38d58:	sub	w1, w2, #0x1
   38d5c:	cmp	w1, #0x1e
   38d60:	b.hi	38e20 <aarch64_ins_reg_shifted@@Base+0x144>  // b.pmore
   38d64:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   38d68:	ldr	x1, [x1, #3944]
   38d6c:	ldr	w1, [x1, #280]
   38d70:	tbnz	w1, #31, 38e20 <aarch64_ins_reg_shifted@@Base+0x144>
   38d74:	add	w3, w2, w1
   38d78:	cmp	w3, #0x20
   38d7c:	b.gt	38e20 <aarch64_ins_reg_shifted@@Base+0x144>
   38d80:	mov	w3, #0xffffffff            	// #-1
   38d84:	lsl	w3, w3, w2
   38d88:	bic	w0, w0, w3
   38d8c:	lsl	w0, w0, w1
   38d90:	ldr	w1, [x19]
   38d94:	orr	w0, w0, w1
   38d98:	str	w0, [x19]
   38d9c:	ldr	x4, [x20, #40]
   38da0:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   38da4:	ldr	x2, [x2, #3944]
   38da8:	ldr	w3, [x2, #308]
   38dac:	sub	w2, w3, #0x1
   38db0:	cmp	w2, #0x1e
   38db4:	b.hi	38e44 <aarch64_ins_reg_shifted@@Base+0x168>  // b.pmore
   38db8:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   38dbc:	ldr	x2, [x2, #3944]
   38dc0:	ldr	w2, [x2, #304]
   38dc4:	tbnz	w2, #31, 38e44 <aarch64_ins_reg_shifted@@Base+0x168>
   38dc8:	add	w1, w3, w2
   38dcc:	cmp	w1, #0x20
   38dd0:	b.gt	38e44 <aarch64_ins_reg_shifted@@Base+0x168>
   38dd4:	mov	w1, #0xffffffff            	// #-1
   38dd8:	lsl	w1, w1, w3
   38ddc:	bic	w1, w4, w1
   38de0:	lsl	w1, w1, w2
   38de4:	orr	w0, w1, w0
   38de8:	str	w0, [x19]
   38dec:	mov	w0, #0x1                   	// #1
   38df0:	ldp	x19, x20, [sp, #16]
   38df4:	ldp	x29, x30, [sp], #32
   38df8:	ret
   38dfc:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38e00:	add	x3, x3, #0x18
   38e04:	add	x3, x3, #0x10
   38e08:	mov	w2, #0x169                 	// #361
   38e0c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38e10:	add	x1, x1, #0x970
   38e14:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38e18:	add	x0, x0, #0x990
   38e1c:	bl	35ac0 <__assert_fail@plt>
   38e20:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38e24:	add	x3, x3, #0x18
   38e28:	add	x3, x3, #0x10
   38e2c:	mov	w2, #0x169                 	// #361
   38e30:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38e34:	add	x1, x1, #0x970
   38e38:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38e3c:	add	x0, x0, #0x990
   38e40:	bl	35ac0 <__assert_fail@plt>
   38e44:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38e48:	add	x3, x3, #0x18
   38e4c:	add	x3, x3, #0x10
   38e50:	mov	w2, #0x169                 	// #361
   38e54:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38e58:	add	x1, x1, #0x970
   38e5c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38e60:	add	x0, x0, #0x990
   38e64:	bl	35ac0 <__assert_fail@plt>

0000000000038e68 <aarch64_ins_sve_addr_ri_s4xvl@@Base>:
   38e68:	stp	x29, x30, [sp, #-16]!
   38e6c:	mov	x29, sp
   38e70:	ldr	w3, [x0, #16]
   38e74:	ubfx	x3, x3, #5, #3
   38e78:	add	w4, w3, #0x1
   38e7c:	ldr	w5, [x0, #20]
   38e80:	ldr	w7, [x1, #16]
   38e84:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   38e88:	ldr	x3, [x3, #3944]
   38e8c:	add	x3, x3, w5, uxtw #3
   38e90:	ldr	w3, [x3, #4]
   38e94:	sub	w6, w3, #0x1
   38e98:	cmp	w6, #0x1e
   38e9c:	b.hi	38f3c <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xd4>  // b.pmore
   38ea0:	ubfiz	x5, x5, #3, #32
   38ea4:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   38ea8:	ldr	x6, [x6, #3944]
   38eac:	ldr	w5, [x6, x5]
   38eb0:	tbnz	w5, #31, 38f3c <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xd4>
   38eb4:	add	w0, w3, w5
   38eb8:	cmp	w0, #0x20
   38ebc:	b.gt	38f3c <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xd4>
   38ec0:	mov	w0, #0xffffffff            	// #-1
   38ec4:	lsl	w0, w0, w3
   38ec8:	bic	w0, w7, w0
   38ecc:	lsl	w0, w0, w5
   38ed0:	ldr	w3, [x2]
   38ed4:	orr	w0, w0, w3
   38ed8:	str	w0, [x2]
   38edc:	ldr	w1, [x1, #20]
   38ee0:	sdiv	w3, w1, w4
   38ee4:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   38ee8:	ldr	x5, [x5, #3944]
   38eec:	ldr	w4, [x5, #780]
   38ef0:	sub	w1, w4, #0x1
   38ef4:	cmp	w1, #0x1e
   38ef8:	b.hi	38f60 <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xf8>  // b.pmore
   38efc:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   38f00:	ldr	x5, [x5, #3944]
   38f04:	ldr	w5, [x5, #776]
   38f08:	tbnz	w5, #31, 38f60 <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xf8>
   38f0c:	add	w1, w4, w5
   38f10:	cmp	w1, #0x20
   38f14:	b.gt	38f60 <aarch64_ins_sve_addr_ri_s4xvl@@Base+0xf8>
   38f18:	mov	w1, #0xffffffff            	// #-1
   38f1c:	lsl	w1, w1, w4
   38f20:	bic	w1, w3, w1
   38f24:	lsl	w1, w1, w5
   38f28:	orr	w0, w1, w0
   38f2c:	str	w0, [x2]
   38f30:	mov	w0, #0x1                   	// #1
   38f34:	ldp	x29, x30, [sp], #16
   38f38:	ret
   38f3c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38f40:	add	x3, x3, #0x18
   38f44:	add	x3, x3, #0x10
   38f48:	mov	w2, #0x169                 	// #361
   38f4c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38f50:	add	x1, x1, #0x970
   38f54:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38f58:	add	x0, x0, #0x990
   38f5c:	bl	35ac0 <__assert_fail@plt>
   38f60:	adrp	x3, 59000 <xexit@@Base+0x74c>
   38f64:	add	x3, x3, #0x18
   38f68:	add	x3, x3, #0x10
   38f6c:	mov	w2, #0x169                 	// #361
   38f70:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   38f74:	add	x1, x1, #0x970
   38f78:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   38f7c:	add	x0, x0, #0x990
   38f80:	bl	35ac0 <__assert_fail@plt>

0000000000038f84 <aarch64_ins_sve_addr_ri_s6xvl@@Base>:
   38f84:	stp	x29, x30, [sp, #-16]!
   38f88:	mov	x29, sp
   38f8c:	ldr	w3, [x0, #16]
   38f90:	ubfx	x3, x3, #5, #3
   38f94:	add	w4, w3, #0x1
   38f98:	ldr	w5, [x0, #20]
   38f9c:	ldr	w7, [x1, #16]
   38fa0:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   38fa4:	ldr	x3, [x3, #3944]
   38fa8:	add	x3, x3, w5, uxtw #3
   38fac:	ldr	w3, [x3, #4]
   38fb0:	sub	w6, w3, #0x1
   38fb4:	cmp	w6, #0x1e
   38fb8:	b.hi	39058 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xd4>  // b.pmore
   38fbc:	ubfiz	x5, x5, #3, #32
   38fc0:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   38fc4:	ldr	x6, [x6, #3944]
   38fc8:	ldr	w5, [x6, x5]
   38fcc:	tbnz	w5, #31, 39058 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xd4>
   38fd0:	add	w0, w3, w5
   38fd4:	cmp	w0, #0x20
   38fd8:	b.gt	39058 <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xd4>
   38fdc:	mov	w0, #0xffffffff            	// #-1
   38fe0:	lsl	w0, w0, w3
   38fe4:	bic	w0, w7, w0
   38fe8:	lsl	w0, w0, w5
   38fec:	ldr	w3, [x2]
   38ff0:	orr	w0, w0, w3
   38ff4:	str	w0, [x2]
   38ff8:	ldr	w1, [x1, #20]
   38ffc:	sdiv	w3, w1, w4
   39000:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   39004:	ldr	x5, [x5, #3944]
   39008:	ldr	w4, [x5, #804]
   3900c:	sub	w1, w4, #0x1
   39010:	cmp	w1, #0x1e
   39014:	b.hi	3907c <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xf8>  // b.pmore
   39018:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   3901c:	ldr	x5, [x5, #3944]
   39020:	ldr	w5, [x5, #800]
   39024:	tbnz	w5, #31, 3907c <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xf8>
   39028:	add	w1, w4, w5
   3902c:	cmp	w1, #0x20
   39030:	b.gt	3907c <aarch64_ins_sve_addr_ri_s6xvl@@Base+0xf8>
   39034:	mov	w1, #0xffffffff            	// #-1
   39038:	lsl	w1, w1, w4
   3903c:	bic	w1, w3, w1
   39040:	lsl	w1, w1, w5
   39044:	orr	w0, w1, w0
   39048:	str	w0, [x2]
   3904c:	mov	w0, #0x1                   	// #1
   39050:	ldp	x29, x30, [sp], #16
   39054:	ret
   39058:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3905c:	add	x3, x3, #0x18
   39060:	add	x3, x3, #0x10
   39064:	mov	w2, #0x169                 	// #361
   39068:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3906c:	add	x1, x1, #0x970
   39070:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39074:	add	x0, x0, #0x990
   39078:	bl	35ac0 <__assert_fail@plt>
   3907c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39080:	add	x3, x3, #0x18
   39084:	add	x3, x3, #0x10
   39088:	mov	w2, #0x169                 	// #361
   3908c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39090:	add	x1, x1, #0x970
   39094:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39098:	add	x0, x0, #0x990
   3909c:	bl	35ac0 <__assert_fail@plt>

00000000000390a0 <aarch64_ins_sve_addr_ri_s9xvl@@Base>:
   390a0:	stp	x29, x30, [sp, #-16]!
   390a4:	mov	x29, sp
   390a8:	mov	x4, x0
   390ac:	mov	x0, x2
   390b0:	ldr	w3, [x4, #16]
   390b4:	ubfx	x3, x3, #5, #3
   390b8:	ldr	w2, [x4, #20]
   390bc:	ldr	w7, [x1, #16]
   390c0:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   390c4:	ldr	x4, [x4, #3944]
   390c8:	add	x4, x4, w2, uxtw #3
   390cc:	ldr	w4, [x4, #4]
   390d0:	sub	w5, w4, #0x1
   390d4:	cmp	w5, #0x1e
   390d8:	b.hi	39144 <aarch64_ins_sve_addr_ri_s9xvl@@Base+0xa4>  // b.pmore
   390dc:	add	w6, w3, #0x1
   390e0:	ubfiz	x2, x2, #3, #32
   390e4:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   390e8:	ldr	x5, [x5, #3944]
   390ec:	ldr	w2, [x5, x2]
   390f0:	tbnz	w2, #31, 39144 <aarch64_ins_sve_addr_ri_s9xvl@@Base+0xa4>
   390f4:	add	w3, w4, w2
   390f8:	cmp	w3, #0x20
   390fc:	b.gt	39144 <aarch64_ins_sve_addr_ri_s9xvl@@Base+0xa4>
   39100:	mov	w3, #0xffffffff            	// #-1
   39104:	lsl	w3, w3, w4
   39108:	bic	w3, w7, w3
   3910c:	lsl	w3, w3, w2
   39110:	ldr	w2, [x0]
   39114:	orr	w3, w2, w3
   39118:	str	w3, [x0]
   3911c:	ldr	w1, [x1, #20]
   39120:	mov	w5, #0x64                  	// #100
   39124:	mov	w4, #0x16                  	// #22
   39128:	mov	w3, #0x2                   	// #2
   3912c:	mov	w2, #0x0                   	// #0
   39130:	sdiv	w1, w1, w6
   39134:	bl	36190 <init_disassemble_info@@Base+0x138>
   39138:	mov	w0, #0x1                   	// #1
   3913c:	ldp	x29, x30, [sp], #16
   39140:	ret
   39144:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39148:	add	x3, x3, #0x18
   3914c:	add	x3, x3, #0x10
   39150:	mov	w2, #0x169                 	// #361
   39154:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39158:	add	x1, x1, #0x970
   3915c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39160:	add	x0, x0, #0x990
   39164:	bl	35ac0 <__assert_fail@plt>

0000000000039168 <aarch64_ins_sve_addr_ri_s4@@Base>:
   39168:	stp	x29, x30, [sp, #-16]!
   3916c:	mov	x29, sp
   39170:	ldr	w3, [x0, #16]
   39174:	ubfx	x3, x3, #5, #3
   39178:	mov	w4, #0x1                   	// #1
   3917c:	lsl	w5, w4, w3
   39180:	ldr	w4, [x0, #20]
   39184:	ldr	w7, [x1, #16]
   39188:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   3918c:	ldr	x3, [x3, #3944]
   39190:	add	x3, x3, w4, uxtw #3
   39194:	ldr	w3, [x3, #4]
   39198:	sub	w6, w3, #0x1
   3919c:	cmp	w6, #0x1e
   391a0:	b.hi	39240 <aarch64_ins_sve_addr_ri_s4@@Base+0xd8>  // b.pmore
   391a4:	ubfiz	x4, x4, #3, #32
   391a8:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   391ac:	ldr	x6, [x6, #3944]
   391b0:	ldr	w4, [x6, x4]
   391b4:	tbnz	w4, #31, 39240 <aarch64_ins_sve_addr_ri_s4@@Base+0xd8>
   391b8:	add	w0, w3, w4
   391bc:	cmp	w0, #0x20
   391c0:	b.gt	39240 <aarch64_ins_sve_addr_ri_s4@@Base+0xd8>
   391c4:	mov	w0, #0xffffffff            	// #-1
   391c8:	lsl	w0, w0, w3
   391cc:	bic	w0, w7, w0
   391d0:	lsl	w0, w0, w4
   391d4:	ldr	w3, [x2]
   391d8:	orr	w0, w0, w3
   391dc:	str	w0, [x2]
   391e0:	ldr	w1, [x1, #20]
   391e4:	sdiv	w3, w1, w5
   391e8:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   391ec:	ldr	x6, [x6, #3944]
   391f0:	ldr	w4, [x6, #780]
   391f4:	sub	w1, w4, #0x1
   391f8:	cmp	w1, #0x1e
   391fc:	b.hi	39264 <aarch64_ins_sve_addr_ri_s4@@Base+0xfc>  // b.pmore
   39200:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   39204:	ldr	x6, [x6, #3944]
   39208:	ldr	w6, [x6, #776]
   3920c:	tbnz	w6, #31, 39264 <aarch64_ins_sve_addr_ri_s4@@Base+0xfc>
   39210:	add	w1, w4, w6
   39214:	cmp	w1, #0x20
   39218:	b.gt	39264 <aarch64_ins_sve_addr_ri_s4@@Base+0xfc>
   3921c:	mov	w1, #0xffffffff            	// #-1
   39220:	lsl	w1, w1, w4
   39224:	bic	w1, w3, w1
   39228:	lsl	w1, w1, w6
   3922c:	orr	w0, w1, w0
   39230:	str	w0, [x2]
   39234:	mov	w0, #0x1                   	// #1
   39238:	ldp	x29, x30, [sp], #16
   3923c:	ret
   39240:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39244:	add	x3, x3, #0x18
   39248:	add	x3, x3, #0x10
   3924c:	mov	w2, #0x169                 	// #361
   39250:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39254:	add	x1, x1, #0x970
   39258:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3925c:	add	x0, x0, #0x990
   39260:	bl	35ac0 <__assert_fail@plt>
   39264:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39268:	add	x3, x3, #0x18
   3926c:	add	x3, x3, #0x10
   39270:	mov	w2, #0x169                 	// #361
   39274:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39278:	add	x1, x1, #0x970
   3927c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39280:	add	x0, x0, #0x990
   39284:	bl	35ac0 <__assert_fail@plt>

0000000000039288 <aarch64_ins_sve_addr_ri_u6@@Base>:
   39288:	stp	x29, x30, [sp, #-16]!
   3928c:	mov	x29, sp
   39290:	ldr	w3, [x0, #16]
   39294:	ubfx	x3, x3, #5, #3
   39298:	mov	w4, #0x1                   	// #1
   3929c:	lsl	w5, w4, w3
   392a0:	ldr	w4, [x0, #20]
   392a4:	ldr	w7, [x1, #16]
   392a8:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   392ac:	ldr	x3, [x3, #3944]
   392b0:	add	x3, x3, w4, uxtw #3
   392b4:	ldr	w3, [x3, #4]
   392b8:	sub	w6, w3, #0x1
   392bc:	cmp	w6, #0x1e
   392c0:	b.hi	39360 <aarch64_ins_sve_addr_ri_u6@@Base+0xd8>  // b.pmore
   392c4:	ubfiz	x4, x4, #3, #32
   392c8:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   392cc:	ldr	x6, [x6, #3944]
   392d0:	ldr	w4, [x6, x4]
   392d4:	tbnz	w4, #31, 39360 <aarch64_ins_sve_addr_ri_u6@@Base+0xd8>
   392d8:	add	w0, w3, w4
   392dc:	cmp	w0, #0x20
   392e0:	b.gt	39360 <aarch64_ins_sve_addr_ri_u6@@Base+0xd8>
   392e4:	mov	w0, #0xffffffff            	// #-1
   392e8:	lsl	w0, w0, w3
   392ec:	bic	w0, w7, w0
   392f0:	lsl	w0, w0, w4
   392f4:	ldr	w3, [x2]
   392f8:	orr	w0, w0, w3
   392fc:	str	w0, [x2]
   39300:	ldr	w1, [x1, #20]
   39304:	sdiv	w3, w1, w5
   39308:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   3930c:	ldr	x6, [x6, #3944]
   39310:	ldr	w4, [x6, #804]
   39314:	sub	w1, w4, #0x1
   39318:	cmp	w1, #0x1e
   3931c:	b.hi	39384 <aarch64_ins_sve_addr_ri_u6@@Base+0xfc>  // b.pmore
   39320:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   39324:	ldr	x6, [x6, #3944]
   39328:	ldr	w6, [x6, #800]
   3932c:	tbnz	w6, #31, 39384 <aarch64_ins_sve_addr_ri_u6@@Base+0xfc>
   39330:	add	w1, w4, w6
   39334:	cmp	w1, #0x20
   39338:	b.gt	39384 <aarch64_ins_sve_addr_ri_u6@@Base+0xfc>
   3933c:	mov	w1, #0xffffffff            	// #-1
   39340:	lsl	w1, w1, w4
   39344:	bic	w1, w3, w1
   39348:	lsl	w1, w1, w6
   3934c:	orr	w0, w1, w0
   39350:	str	w0, [x2]
   39354:	mov	w0, #0x1                   	// #1
   39358:	ldp	x29, x30, [sp], #16
   3935c:	ret
   39360:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39364:	add	x3, x3, #0x18
   39368:	add	x3, x3, #0x10
   3936c:	mov	w2, #0x169                 	// #361
   39370:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39374:	add	x1, x1, #0x970
   39378:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3937c:	add	x0, x0, #0x990
   39380:	bl	35ac0 <__assert_fail@plt>
   39384:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39388:	add	x3, x3, #0x18
   3938c:	add	x3, x3, #0x10
   39390:	mov	w2, #0x169                 	// #361
   39394:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39398:	add	x1, x1, #0x970
   3939c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   393a0:	add	x0, x0, #0x990
   393a4:	bl	35ac0 <__assert_fail@plt>

00000000000393a8 <aarch64_ins_sve_addr_rr_lsl@@Base>:
   393a8:	stp	x29, x30, [sp, #-16]!
   393ac:	mov	x29, sp
   393b0:	ldr	w5, [x0, #20]
   393b4:	ldr	w7, [x1, #16]
   393b8:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   393bc:	ldr	x4, [x4, #3944]
   393c0:	add	x4, x4, w5, uxtw #3
   393c4:	ldr	w4, [x4, #4]
   393c8:	sub	w6, w4, #0x1
   393cc:	cmp	w6, #0x1e
   393d0:	b.hi	39478 <aarch64_ins_sve_addr_rr_lsl@@Base+0xd0>  // b.pmore
   393d4:	ubfiz	x5, x5, #3, #32
   393d8:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   393dc:	ldr	x6, [x6, #3944]
   393e0:	ldr	w5, [x6, x5]
   393e4:	tbnz	w5, #31, 39478 <aarch64_ins_sve_addr_rr_lsl@@Base+0xd0>
   393e8:	add	w3, w4, w5
   393ec:	cmp	w3, #0x20
   393f0:	b.gt	39478 <aarch64_ins_sve_addr_rr_lsl@@Base+0xd0>
   393f4:	mov	w3, #0xffffffff            	// #-1
   393f8:	lsl	w3, w3, w4
   393fc:	bic	w3, w7, w3
   39400:	lsl	w3, w3, w5
   39404:	ldr	w4, [x2]
   39408:	orr	w3, w3, w4
   3940c:	str	w3, [x2]
   39410:	ldr	w4, [x0, #24]
   39414:	ldr	w6, [x1, #20]
   39418:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3941c:	ldr	x1, [x1, #3944]
   39420:	add	x1, x1, w4, uxtw #3
   39424:	ldr	w5, [x1, #4]
   39428:	sub	w1, w5, #0x1
   3942c:	cmp	w1, #0x1e
   39430:	b.hi	3949c <aarch64_ins_sve_addr_rr_lsl@@Base+0xf4>  // b.pmore
   39434:	ubfiz	x4, x4, #3, #32
   39438:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3943c:	ldr	x1, [x1, #3944]
   39440:	ldr	w1, [x1, x4]
   39444:	tbnz	w1, #31, 3949c <aarch64_ins_sve_addr_rr_lsl@@Base+0xf4>
   39448:	add	w4, w5, w1
   3944c:	cmp	w4, #0x20
   39450:	b.gt	3949c <aarch64_ins_sve_addr_rr_lsl@@Base+0xf4>
   39454:	mov	w0, #0xffffffff            	// #-1
   39458:	lsl	w0, w0, w5
   3945c:	bic	w0, w6, w0
   39460:	lsl	w0, w0, w1
   39464:	orr	w3, w0, w3
   39468:	str	w3, [x2]
   3946c:	mov	w0, #0x1                   	// #1
   39470:	ldp	x29, x30, [sp], #16
   39474:	ret
   39478:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3947c:	add	x3, x3, #0x18
   39480:	add	x3, x3, #0x10
   39484:	mov	w2, #0x169                 	// #361
   39488:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3948c:	add	x1, x1, #0x970
   39490:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39494:	add	x0, x0, #0x990
   39498:	bl	35ac0 <__assert_fail@plt>
   3949c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   394a0:	add	x3, x3, #0x18
   394a4:	add	x3, x3, #0x10
   394a8:	mov	w2, #0x169                 	// #361
   394ac:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   394b0:	add	x1, x1, #0x970
   394b4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   394b8:	add	x0, x0, #0x990
   394bc:	bl	35ac0 <__assert_fail@plt>

00000000000394c0 <aarch64_ins_sve_addr_rz_xtw@@Base>:
   394c0:	stp	x29, x30, [sp, #-16]!
   394c4:	mov	x29, sp
   394c8:	ldr	w5, [x0, #20]
   394cc:	ldr	w7, [x1, #16]
   394d0:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   394d4:	ldr	x4, [x4, #3944]
   394d8:	add	x4, x4, w5, uxtw #3
   394dc:	ldr	w4, [x4, #4]
   394e0:	sub	w6, w4, #0x1
   394e4:	cmp	w6, #0x1e
   394e8:	b.hi	395f8 <aarch64_ins_sve_addr_rz_xtw@@Base+0x138>  // b.pmore
   394ec:	ubfiz	x5, x5, #3, #32
   394f0:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   394f4:	ldr	x6, [x6, #3944]
   394f8:	ldr	w5, [x6, x5]
   394fc:	tbnz	w5, #31, 395f8 <aarch64_ins_sve_addr_rz_xtw@@Base+0x138>
   39500:	add	w3, w4, w5
   39504:	cmp	w3, #0x20
   39508:	b.gt	395f8 <aarch64_ins_sve_addr_rz_xtw@@Base+0x138>
   3950c:	mov	w3, #0xffffffff            	// #-1
   39510:	lsl	w3, w3, w4
   39514:	bic	w3, w7, w3
   39518:	lsl	w3, w3, w5
   3951c:	ldr	w4, [x2]
   39520:	orr	w3, w3, w4
   39524:	str	w3, [x2]
   39528:	ldr	w6, [x0, #24]
   3952c:	ldr	w8, [x1, #20]
   39530:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   39534:	ldr	x5, [x5, #3944]
   39538:	add	x5, x5, w6, uxtw #3
   3953c:	ldr	w7, [x5, #4]
   39540:	sub	w5, w7, #0x1
   39544:	cmp	w5, #0x1e
   39548:	b.hi	3961c <aarch64_ins_sve_addr_rz_xtw@@Base+0x15c>  // b.pmore
   3954c:	ubfiz	x6, x6, #3, #32
   39550:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   39554:	ldr	x5, [x5, #3944]
   39558:	ldr	w5, [x5, x6]
   3955c:	tbnz	w5, #31, 3961c <aarch64_ins_sve_addr_rz_xtw@@Base+0x15c>
   39560:	add	w6, w7, w5
   39564:	cmp	w6, #0x20
   39568:	b.gt	3961c <aarch64_ins_sve_addr_rz_xtw@@Base+0x15c>
   3956c:	mov	w4, #0xffffffff            	// #-1
   39570:	lsl	w4, w4, w7
   39574:	bic	w4, w8, w4
   39578:	lsl	w4, w4, w5
   3957c:	orr	w3, w4, w3
   39580:	str	w3, [x2]
   39584:	ldr	w1, [x1, #32]
   39588:	cmp	w1, #0x8
   3958c:	b.eq	39640 <aarch64_ins_sve_addr_rz_xtw@@Base+0x180>  // b.none
   39590:	ldr	w1, [x0, #28]
   39594:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   39598:	ldr	x0, [x0, #3944]
   3959c:	add	x0, x0, w1, uxtw #3
   395a0:	ldr	w5, [x0, #4]
   395a4:	sub	w0, w5, #0x1
   395a8:	cmp	w0, #0x1e
   395ac:	b.hi	396a4 <aarch64_ins_sve_addr_rz_xtw@@Base+0x1e4>  // b.pmore
   395b0:	ubfiz	x1, x1, #3, #32
   395b4:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   395b8:	ldr	x4, [x4, #3944]
   395bc:	ldr	w1, [x4, x1]
   395c0:	tbnz	w1, #31, 396a4 <aarch64_ins_sve_addr_rz_xtw@@Base+0x1e4>
   395c4:	add	w0, w5, w1
   395c8:	cmp	w0, #0x20
   395cc:	b.gt	396a4 <aarch64_ins_sve_addr_rz_xtw@@Base+0x1e4>
   395d0:	mov	w0, #0xffffffff            	// #-1
   395d4:	lsl	w0, w0, w5
   395d8:	mvn	w0, w0
   395dc:	and	w0, w0, #0x1
   395e0:	lsl	w0, w0, w1
   395e4:	orr	w3, w0, w3
   395e8:	str	w3, [x2]
   395ec:	mov	w0, #0x1                   	// #1
   395f0:	ldp	x29, x30, [sp], #16
   395f4:	ret
   395f8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   395fc:	add	x3, x3, #0x18
   39600:	add	x3, x3, #0x10
   39604:	mov	w2, #0x169                 	// #361
   39608:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3960c:	add	x1, x1, #0x970
   39610:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39614:	add	x0, x0, #0x990
   39618:	bl	35ac0 <__assert_fail@plt>
   3961c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39620:	add	x3, x3, #0x18
   39624:	add	x3, x3, #0x10
   39628:	mov	w2, #0x169                 	// #361
   3962c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39630:	add	x1, x1, #0x970
   39634:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39638:	add	x0, x0, #0x990
   3963c:	bl	35ac0 <__assert_fail@plt>
   39640:	ldr	w1, [x0, #28]
   39644:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   39648:	ldr	x0, [x0, #3944]
   3964c:	add	x0, x0, w1, uxtw #3
   39650:	ldr	w0, [x0, #4]
   39654:	sub	w2, w0, #0x1
   39658:	cmp	w2, #0x1e
   3965c:	b.hi	39680 <aarch64_ins_sve_addr_rz_xtw@@Base+0x1c0>  // b.pmore
   39660:	ubfiz	x1, x1, #3, #32
   39664:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   39668:	ldr	x2, [x2, #3944]
   3966c:	ldr	w1, [x2, x1]
   39670:	tbnz	w1, #31, 39680 <aarch64_ins_sve_addr_rz_xtw@@Base+0x1c0>
   39674:	add	w0, w0, w1
   39678:	cmp	w0, #0x20
   3967c:	b.le	395ec <aarch64_ins_sve_addr_rz_xtw@@Base+0x12c>
   39680:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39684:	add	x3, x3, #0x18
   39688:	add	x3, x3, #0x10
   3968c:	mov	w2, #0x169                 	// #361
   39690:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39694:	add	x1, x1, #0x970
   39698:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3969c:	add	x0, x0, #0x990
   396a0:	bl	35ac0 <__assert_fail@plt>
   396a4:	adrp	x3, 59000 <xexit@@Base+0x74c>
   396a8:	add	x3, x3, #0x18
   396ac:	add	x3, x3, #0x10
   396b0:	mov	w2, #0x169                 	// #361
   396b4:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   396b8:	add	x1, x1, #0x970
   396bc:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   396c0:	add	x0, x0, #0x990
   396c4:	bl	35ac0 <__assert_fail@plt>

00000000000396c8 <aarch64_ins_sve_addr_zi_u5@@Base>:
   396c8:	stp	x29, x30, [sp, #-16]!
   396cc:	mov	x29, sp
   396d0:	ldr	w3, [x0, #16]
   396d4:	ubfx	x3, x3, #5, #3
   396d8:	mov	w4, #0x1                   	// #1
   396dc:	lsl	w5, w4, w3
   396e0:	ldr	w4, [x0, #20]
   396e4:	ldr	w7, [x1, #16]
   396e8:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   396ec:	ldr	x3, [x3, #3944]
   396f0:	add	x3, x3, w4, uxtw #3
   396f4:	ldr	w3, [x3, #4]
   396f8:	sub	w6, w3, #0x1
   396fc:	cmp	w6, #0x1e
   39700:	b.hi	397a0 <aarch64_ins_sve_addr_zi_u5@@Base+0xd8>  // b.pmore
   39704:	ubfiz	x4, x4, #3, #32
   39708:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   3970c:	ldr	x6, [x6, #3944]
   39710:	ldr	w4, [x6, x4]
   39714:	tbnz	w4, #31, 397a0 <aarch64_ins_sve_addr_zi_u5@@Base+0xd8>
   39718:	add	w0, w3, w4
   3971c:	cmp	w0, #0x20
   39720:	b.gt	397a0 <aarch64_ins_sve_addr_zi_u5@@Base+0xd8>
   39724:	mov	w0, #0xffffffff            	// #-1
   39728:	lsl	w0, w0, w3
   3972c:	bic	w0, w7, w0
   39730:	lsl	w0, w0, w4
   39734:	ldr	w3, [x2]
   39738:	orr	w0, w0, w3
   3973c:	str	w0, [x2]
   39740:	ldr	w1, [x1, #20]
   39744:	sdiv	w3, w1, w5
   39748:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   3974c:	ldr	x6, [x6, #3944]
   39750:	ldr	w4, [x6, #348]
   39754:	sub	w1, w4, #0x1
   39758:	cmp	w1, #0x1e
   3975c:	b.hi	397c4 <aarch64_ins_sve_addr_zi_u5@@Base+0xfc>  // b.pmore
   39760:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   39764:	ldr	x6, [x6, #3944]
   39768:	ldr	w6, [x6, #344]
   3976c:	tbnz	w6, #31, 397c4 <aarch64_ins_sve_addr_zi_u5@@Base+0xfc>
   39770:	add	w1, w4, w6
   39774:	cmp	w1, #0x20
   39778:	b.gt	397c4 <aarch64_ins_sve_addr_zi_u5@@Base+0xfc>
   3977c:	mov	w1, #0xffffffff            	// #-1
   39780:	lsl	w1, w1, w4
   39784:	bic	w1, w3, w1
   39788:	lsl	w1, w1, w6
   3978c:	orr	w0, w1, w0
   39790:	str	w0, [x2]
   39794:	mov	w0, #0x1                   	// #1
   39798:	ldp	x29, x30, [sp], #16
   3979c:	ret
   397a0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   397a4:	add	x3, x3, #0x18
   397a8:	add	x3, x3, #0x10
   397ac:	mov	w2, #0x169                 	// #361
   397b0:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   397b4:	add	x1, x1, #0x970
   397b8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   397bc:	add	x0, x0, #0x990
   397c0:	bl	35ac0 <__assert_fail@plt>
   397c4:	adrp	x3, 59000 <xexit@@Base+0x74c>
   397c8:	add	x3, x3, #0x18
   397cc:	add	x3, x3, #0x10
   397d0:	mov	w2, #0x169                 	// #361
   397d4:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   397d8:	add	x1, x1, #0x970
   397dc:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   397e0:	add	x0, x0, #0x990
   397e4:	bl	35ac0 <__assert_fail@plt>

00000000000397e8 <aarch64_ins_sve_addr_zz_lsl@@Base>:
   397e8:	stp	x29, x30, [sp, #-16]!
   397ec:	mov	x29, sp
   397f0:	mov	x3, x4
   397f4:	bl	36448 <init_disassemble_info@@Base+0x3f0>
   397f8:	ldp	x29, x30, [sp], #16
   397fc:	ret

0000000000039800 <aarch64_ins_sve_addr_zz_sxtw@@Base>:
   39800:	stp	x29, x30, [sp, #-16]!
   39804:	mov	x29, sp
   39808:	mov	x3, x4
   3980c:	bl	36448 <init_disassemble_info@@Base+0x3f0>
   39810:	ldp	x29, x30, [sp], #16
   39814:	ret

0000000000039818 <aarch64_ins_sve_addr_zz_uxtw@@Base>:
   39818:	stp	x29, x30, [sp, #-16]!
   3981c:	mov	x29, sp
   39820:	mov	x3, x4
   39824:	bl	36448 <init_disassemble_info@@Base+0x3f0>
   39828:	ldp	x29, x30, [sp], #16
   3982c:	ret

0000000000039830 <aarch64_ins_sve_aimm@@Base>:
   39830:	stp	x29, x30, [sp, #-16]!
   39834:	mov	x29, sp
   39838:	mov	x3, x1
   3983c:	mov	x1, x2
   39840:	ldr	x2, [x3, #40]
   39844:	cmp	x2, #0x8
   39848:	b.eq	39870 <aarch64_ins_sve_aimm@@Base+0x40>  // b.none
   3984c:	ldr	x2, [x3, #16]
   39850:	cbz	x2, 3985c <aarch64_ins_sve_aimm@@Base+0x2c>
   39854:	tst	w2, #0xff
   39858:	b.eq	39880 <aarch64_ins_sve_aimm@@Base+0x50>  // b.none
   3985c:	and	w2, w2, #0xff
   39860:	bl	3639c <init_disassemble_info@@Base+0x344>
   39864:	mov	w0, #0x1                   	// #1
   39868:	ldp	x29, x30, [sp], #16
   3986c:	ret
   39870:	ldrb	w2, [x3, #16]
   39874:	orr	w2, w2, #0x100
   39878:	bl	3639c <init_disassemble_info@@Base+0x344>
   3987c:	b	39864 <aarch64_ins_sve_aimm@@Base+0x34>
   39880:	add	x3, x2, #0xff
   39884:	cmp	x2, #0x0
   39888:	csel	x2, x3, x2, lt  // lt = tstop
   3988c:	ubfx	w2, w2, #8, #8
   39890:	orr	w2, w2, #0x100
   39894:	bl	3639c <init_disassemble_info@@Base+0x344>
   39898:	b	39864 <aarch64_ins_sve_aimm@@Base+0x34>

000000000003989c <aarch64_ins_sve_asimm@@Base>:
   3989c:	stp	x29, x30, [sp, #-16]!
   398a0:	mov	x29, sp
   398a4:	bl	35920 <aarch64_ins_sve_aimm@plt>
   398a8:	ldp	x29, x30, [sp], #16
   398ac:	ret

00000000000398b0 <aarch64_ins_sve_index@@Base>:
   398b0:	stp	x29, x30, [sp, #-48]!
   398b4:	mov	x29, sp
   398b8:	stp	x19, x20, [sp, #16]
   398bc:	str	x21, [sp, #32]
   398c0:	mov	x21, x0
   398c4:	mov	x19, x1
   398c8:	mov	x20, x2
   398cc:	ldrb	w0, [x1, #4]
   398d0:	bl	35680 <aarch64_get_qualifier_esize@plt>
   398d4:	and	w1, w0, #0xff
   398d8:	ldr	w2, [x21, #20]
   398dc:	ldr	w5, [x19, #16]
   398e0:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   398e4:	ldr	x4, [x4, #3944]
   398e8:	add	x4, x4, w2, uxtw #3
   398ec:	ldr	w0, [x4, #4]
   398f0:	sub	w4, w0, #0x1
   398f4:	cmp	w4, #0x1e
   398f8:	b.hi	39970 <aarch64_ins_sve_index@@Base+0xc0>  // b.pmore
   398fc:	ubfiz	x2, x2, #3, #32
   39900:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   39904:	ldr	x4, [x4, #3944]
   39908:	ldr	w2, [x4, x2]
   3990c:	tbnz	w2, #31, 39970 <aarch64_ins_sve_index@@Base+0xc0>
   39910:	add	w3, w0, w2
   39914:	cmp	w3, #0x20
   39918:	b.gt	39970 <aarch64_ins_sve_index@@Base+0xc0>
   3991c:	mov	w3, #0xffffffff            	// #-1
   39920:	lsl	w3, w3, w0
   39924:	bic	w3, w5, w3
   39928:	lsl	w3, w3, w2
   3992c:	ldr	w0, [x20]
   39930:	orr	w3, w0, w3
   39934:	str	w3, [x20]
   39938:	ldr	x0, [x19, #24]
   3993c:	lsl	x0, x0, #1
   39940:	mov	w5, #0x74                  	// #116
   39944:	mov	w4, #0x2b                  	// #43
   39948:	mov	w3, #0x2                   	// #2
   3994c:	mov	w2, #0x0                   	// #0
   39950:	madd	w1, w1, w0, w1
   39954:	mov	x0, x20
   39958:	bl	36190 <init_disassemble_info@@Base+0x138>
   3995c:	mov	w0, #0x1                   	// #1
   39960:	ldp	x19, x20, [sp, #16]
   39964:	ldr	x21, [sp, #32]
   39968:	ldp	x29, x30, [sp], #48
   3996c:	ret
   39970:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39974:	add	x3, x3, #0x18
   39978:	add	x3, x3, #0x10
   3997c:	mov	w2, #0x169                 	// #361
   39980:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39984:	add	x1, x1, #0x970
   39988:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3998c:	add	x0, x0, #0x990
   39990:	bl	35ac0 <__assert_fail@plt>

0000000000039994 <aarch64_ins_sve_limm_mov@@Base>:
   39994:	stp	x29, x30, [sp, #-16]!
   39998:	mov	x29, sp
   3999c:	bl	353a0 <aarch64_ins_limm@plt>
   399a0:	ldp	x29, x30, [sp], #16
   399a4:	ret

00000000000399a8 <aarch64_ins_sve_quad_index@@Base>:
   399a8:	stp	x29, x30, [sp, #-16]!
   399ac:	mov	x29, sp
   399b0:	mov	x4, x1
   399b4:	mov	x1, x2
   399b8:	ldr	w3, [x0, #16]
   399bc:	ubfx	x3, x3, #5, #3
   399c0:	ldr	w2, [x4, #16]
   399c4:	lsr	w5, w2, w3
   399c8:	cbnz	w5, 399e8 <aarch64_ins_sve_quad_index@@Base+0x40>
   399cc:	ldr	x4, [x4, #24]
   399d0:	lsl	x3, x4, x3
   399d4:	add	w2, w2, w3
   399d8:	bl	3639c <init_disassemble_info@@Base+0x344>
   399dc:	mov	w0, #0x1                   	// #1
   399e0:	ldp	x29, x30, [sp], #16
   399e4:	ret
   399e8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   399ec:	add	x3, x3, #0x18
   399f0:	add	x3, x3, #0x180
   399f4:	mov	w2, #0x4a2                 	// #1186
   399f8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   399fc:	add	x1, x1, #0x940
   39a00:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39a04:	add	x0, x0, #0xd00
   39a08:	bl	35ac0 <__assert_fail@plt>

0000000000039a0c <aarch64_ins_sve_reglist@@Base>:
   39a0c:	ldr	w3, [x0, #20]
   39a10:	ldrb	w0, [x1, #16]
   39a14:	and	w4, w0, #0x1f
   39a18:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   39a1c:	ldr	x1, [x1, #3944]
   39a20:	add	x1, x1, w3, uxtw #3
   39a24:	ldr	w1, [x1, #4]
   39a28:	sub	w0, w1, #0x1
   39a2c:	cmp	w0, #0x1e
   39a30:	b.hi	39a78 <aarch64_ins_sve_reglist@@Base+0x6c>  // b.pmore
   39a34:	ubfiz	x3, x3, #3, #32
   39a38:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   39a3c:	ldr	x0, [x0, #3944]
   39a40:	ldr	w3, [x0, x3]
   39a44:	tbnz	w3, #31, 39a78 <aarch64_ins_sve_reglist@@Base+0x6c>
   39a48:	add	w0, w1, w3
   39a4c:	cmp	w0, #0x20
   39a50:	b.gt	39a78 <aarch64_ins_sve_reglist@@Base+0x6c>
   39a54:	mov	w0, #0xffffffff            	// #-1
   39a58:	lsl	w0, w0, w1
   39a5c:	bic	w0, w4, w0
   39a60:	lsl	w0, w0, w3
   39a64:	ldr	w1, [x2]
   39a68:	orr	w0, w1, w0
   39a6c:	str	w0, [x2]
   39a70:	mov	w0, #0x1                   	// #1
   39a74:	ret
   39a78:	stp	x29, x30, [sp, #-16]!
   39a7c:	mov	x29, sp
   39a80:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39a84:	add	x3, x3, #0x18
   39a88:	add	x3, x3, #0x10
   39a8c:	mov	w2, #0x169                 	// #361
   39a90:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39a94:	add	x1, x1, #0x970
   39a98:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39a9c:	add	x0, x0, #0x990
   39aa0:	bl	35ac0 <__assert_fail@plt>

0000000000039aa4 <aarch64_ins_sve_scale@@Base>:
   39aa4:	stp	x29, x30, [sp, #-32]!
   39aa8:	mov	x29, sp
   39aac:	stp	x19, x20, [sp, #16]
   39ab0:	mov	x20, x1
   39ab4:	mov	x19, x2
   39ab8:	ldr	w2, [x1, #16]
   39abc:	mov	x1, x19
   39ac0:	bl	3639c <init_disassemble_info@@Base+0x344>
   39ac4:	ldr	x0, [x20, #40]
   39ac8:	sub	w2, w0, #0x1
   39acc:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   39ad0:	ldr	x1, [x1, #3944]
   39ad4:	ldr	w1, [x1, #780]
   39ad8:	sub	w0, w1, #0x1
   39adc:	cmp	w0, #0x1e
   39ae0:	b.hi	39b2c <aarch64_ins_sve_scale@@Base+0x88>  // b.pmore
   39ae4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   39ae8:	ldr	x0, [x0, #3944]
   39aec:	ldr	w3, [x0, #776]
   39af0:	tbnz	w3, #31, 39b2c <aarch64_ins_sve_scale@@Base+0x88>
   39af4:	add	w0, w1, w3
   39af8:	cmp	w0, #0x20
   39afc:	b.gt	39b2c <aarch64_ins_sve_scale@@Base+0x88>
   39b00:	mov	w0, #0xffffffff            	// #-1
   39b04:	lsl	w0, w0, w1
   39b08:	bic	w0, w2, w0
   39b0c:	lsl	w0, w0, w3
   39b10:	ldr	w1, [x19]
   39b14:	orr	w0, w1, w0
   39b18:	str	w0, [x19]
   39b1c:	mov	w0, #0x1                   	// #1
   39b20:	ldp	x19, x20, [sp, #16]
   39b24:	ldp	x29, x30, [sp], #32
   39b28:	ret
   39b2c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39b30:	add	x3, x3, #0x18
   39b34:	add	x3, x3, #0x10
   39b38:	mov	w2, #0x169                 	// #361
   39b3c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39b40:	add	x1, x1, #0x970
   39b44:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39b48:	add	x0, x0, #0x990
   39b4c:	bl	35ac0 <__assert_fail@plt>

0000000000039b50 <aarch64_ins_sve_shlimm@@Base>:
   39b50:	stp	x29, x30, [sp, #-48]!
   39b54:	mov	x29, sp
   39b58:	stp	x19, x20, [sp, #16]
   39b5c:	str	x21, [sp, #32]
   39b60:	ldr	w4, [x1, #8]
   39b64:	cmp	w4, #0x0
   39b68:	b.le	39bb8 <aarch64_ins_sve_shlimm@@Base+0x68>
   39b6c:	mov	x20, x0
   39b70:	mov	x19, x1
   39b74:	mov	x21, x2
   39b78:	sub	w4, w4, #0x1
   39b7c:	sbfiz	x5, x4, #3, #32
   39b80:	sub	x4, x5, w4, sxtw
   39b84:	add	x4, x3, x4, lsl #3
   39b88:	ldrb	w0, [x4, #28]
   39b8c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   39b90:	ldr	x2, [x19, #16]
   39b94:	add	w2, w2, w0, uxtb #3
   39b98:	mov	x1, x21
   39b9c:	mov	x0, x20
   39ba0:	bl	3639c <init_disassemble_info@@Base+0x344>
   39ba4:	mov	w0, #0x1                   	// #1
   39ba8:	ldp	x19, x20, [sp, #16]
   39bac:	ldr	x21, [sp, #32]
   39bb0:	ldp	x29, x30, [sp], #48
   39bb4:	ret
   39bb8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39bbc:	add	x3, x3, #0x18
   39bc0:	add	x3, x3, #0x1a0
   39bc4:	mov	w2, #0x4cc                 	// #1228
   39bc8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39bcc:	add	x1, x1, #0x940
   39bd0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39bd4:	add	x0, x0, #0xd28
   39bd8:	bl	35ac0 <__assert_fail@plt>

0000000000039bdc <aarch64_ins_sve_shrimm@@Base>:
   39bdc:	stp	x29, x30, [sp, #-48]!
   39be0:	mov	x29, sp
   39be4:	stp	x19, x20, [sp, #16]
   39be8:	str	x21, [sp, #32]
   39bec:	mov	x19, x0
   39bf0:	ldr	w4, [x0, #16]
   39bf4:	ubfx	x0, x4, #5, #3
   39bf8:	ldr	w4, [x1, #8]
   39bfc:	cmp	w4, w0
   39c00:	b.lt	39c50 <aarch64_ins_sve_shrimm@@Base+0x74>  // b.tstop
   39c04:	mov	x20, x1
   39c08:	mov	x21, x2
   39c0c:	sub	w4, w4, w0
   39c10:	lsl	x5, x4, #3
   39c14:	sub	x4, x5, x4
   39c18:	add	x4, x3, x4, lsl #3
   39c1c:	ldrb	w0, [x4, #28]
   39c20:	bl	35680 <aarch64_get_qualifier_esize@plt>
   39c24:	ubfiz	w0, w0, #4, #8
   39c28:	ldr	x2, [x20, #16]
   39c2c:	sub	w2, w0, w2
   39c30:	mov	x1, x21
   39c34:	mov	x0, x19
   39c38:	bl	3639c <init_disassemble_info@@Base+0x344>
   39c3c:	mov	w0, #0x1                   	// #1
   39c40:	ldp	x19, x20, [sp, #16]
   39c44:	ldr	x21, [sp, #32]
   39c48:	ldp	x29, x30, [sp], #48
   39c4c:	ret
   39c50:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39c54:	add	x3, x3, #0x18
   39c58:	add	x3, x3, #0x1b8
   39c5c:	mov	w2, #0x4de                 	// #1246
   39c60:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39c64:	add	x1, x1, #0x940
   39c68:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39c6c:	add	x0, x0, #0xd38
   39c70:	bl	35ac0 <__assert_fail@plt>

0000000000039c74 <aarch64_ins_sve_float_half_one@@Base>:
   39c74:	stp	x29, x30, [sp, #-16]!
   39c78:	mov	x29, sp
   39c7c:	ldr	x3, [x1, #16]
   39c80:	mov	x1, #0x3f000000            	// #1056964608
   39c84:	cmp	x3, x1
   39c88:	b.eq	39cf8 <aarch64_ins_sve_float_half_one@@Base+0x84>  // b.none
   39c8c:	ldr	w1, [x0, #20]
   39c90:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   39c94:	ldr	x0, [x0, #3944]
   39c98:	add	x0, x0, w1, uxtw #3
   39c9c:	ldr	w3, [x0, #4]
   39ca0:	sub	w0, w3, #0x1
   39ca4:	cmp	w0, #0x1e
   39ca8:	b.hi	39d5c <aarch64_ins_sve_float_half_one@@Base+0xe8>  // b.pmore
   39cac:	ubfiz	x1, x1, #3, #32
   39cb0:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   39cb4:	ldr	x0, [x0, #3944]
   39cb8:	ldr	w1, [x0, x1]
   39cbc:	tbnz	w1, #31, 39d5c <aarch64_ins_sve_float_half_one@@Base+0xe8>
   39cc0:	add	w0, w3, w1
   39cc4:	cmp	w0, #0x20
   39cc8:	b.gt	39d5c <aarch64_ins_sve_float_half_one@@Base+0xe8>
   39ccc:	mov	w0, #0xffffffff            	// #-1
   39cd0:	lsl	w0, w0, w3
   39cd4:	mvn	w0, w0
   39cd8:	and	w0, w0, #0x1
   39cdc:	lsl	w0, w0, w1
   39ce0:	ldr	w1, [x2]
   39ce4:	orr	w0, w1, w0
   39ce8:	str	w0, [x2]
   39cec:	mov	w0, #0x1                   	// #1
   39cf0:	ldp	x29, x30, [sp], #16
   39cf4:	ret
   39cf8:	ldr	w1, [x0, #20]
   39cfc:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   39d00:	ldr	x0, [x0, #3944]
   39d04:	add	x0, x0, w1, uxtw #3
   39d08:	ldr	w0, [x0, #4]
   39d0c:	sub	w2, w0, #0x1
   39d10:	cmp	w2, #0x1e
   39d14:	b.hi	39d38 <aarch64_ins_sve_float_half_one@@Base+0xc4>  // b.pmore
   39d18:	ubfiz	x1, x1, #3, #32
   39d1c:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   39d20:	ldr	x2, [x2, #3944]
   39d24:	ldr	w1, [x2, x1]
   39d28:	tbnz	w1, #31, 39d38 <aarch64_ins_sve_float_half_one@@Base+0xc4>
   39d2c:	add	w0, w0, w1
   39d30:	cmp	w0, #0x20
   39d34:	b.le	39cec <aarch64_ins_sve_float_half_one@@Base+0x78>
   39d38:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39d3c:	add	x3, x3, #0x18
   39d40:	add	x3, x3, #0x10
   39d44:	mov	w2, #0x169                 	// #361
   39d48:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39d4c:	add	x1, x1, #0x970
   39d50:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39d54:	add	x0, x0, #0x990
   39d58:	bl	35ac0 <__assert_fail@plt>
   39d5c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39d60:	add	x3, x3, #0x18
   39d64:	add	x3, x3, #0x10
   39d68:	mov	w2, #0x169                 	// #361
   39d6c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39d70:	add	x1, x1, #0x970
   39d74:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39d78:	add	x0, x0, #0x990
   39d7c:	bl	35ac0 <__assert_fail@plt>

0000000000039d80 <aarch64_ins_sve_float_half_two@@Base>:
   39d80:	stp	x29, x30, [sp, #-16]!
   39d84:	mov	x29, sp
   39d88:	ldr	x3, [x1, #16]
   39d8c:	mov	x1, #0x3f000000            	// #1056964608
   39d90:	cmp	x3, x1
   39d94:	b.eq	39e04 <aarch64_ins_sve_float_half_two@@Base+0x84>  // b.none
   39d98:	ldr	w1, [x0, #20]
   39d9c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   39da0:	ldr	x0, [x0, #3944]
   39da4:	add	x0, x0, w1, uxtw #3
   39da8:	ldr	w3, [x0, #4]
   39dac:	sub	w0, w3, #0x1
   39db0:	cmp	w0, #0x1e
   39db4:	b.hi	39e68 <aarch64_ins_sve_float_half_two@@Base+0xe8>  // b.pmore
   39db8:	ubfiz	x1, x1, #3, #32
   39dbc:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   39dc0:	ldr	x0, [x0, #3944]
   39dc4:	ldr	w1, [x0, x1]
   39dc8:	tbnz	w1, #31, 39e68 <aarch64_ins_sve_float_half_two@@Base+0xe8>
   39dcc:	add	w0, w3, w1
   39dd0:	cmp	w0, #0x20
   39dd4:	b.gt	39e68 <aarch64_ins_sve_float_half_two@@Base+0xe8>
   39dd8:	mov	w0, #0xffffffff            	// #-1
   39ddc:	lsl	w0, w0, w3
   39de0:	mvn	w0, w0
   39de4:	and	w0, w0, #0x1
   39de8:	lsl	w0, w0, w1
   39dec:	ldr	w1, [x2]
   39df0:	orr	w0, w1, w0
   39df4:	str	w0, [x2]
   39df8:	mov	w0, #0x1                   	// #1
   39dfc:	ldp	x29, x30, [sp], #16
   39e00:	ret
   39e04:	ldr	w1, [x0, #20]
   39e08:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   39e0c:	ldr	x0, [x0, #3944]
   39e10:	add	x0, x0, w1, uxtw #3
   39e14:	ldr	w0, [x0, #4]
   39e18:	sub	w2, w0, #0x1
   39e1c:	cmp	w2, #0x1e
   39e20:	b.hi	39e44 <aarch64_ins_sve_float_half_two@@Base+0xc4>  // b.pmore
   39e24:	ubfiz	x1, x1, #3, #32
   39e28:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   39e2c:	ldr	x2, [x2, #3944]
   39e30:	ldr	w1, [x2, x1]
   39e34:	tbnz	w1, #31, 39e44 <aarch64_ins_sve_float_half_two@@Base+0xc4>
   39e38:	add	w0, w0, w1
   39e3c:	cmp	w0, #0x20
   39e40:	b.le	39df8 <aarch64_ins_sve_float_half_two@@Base+0x78>
   39e44:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39e48:	add	x3, x3, #0x18
   39e4c:	add	x3, x3, #0x10
   39e50:	mov	w2, #0x169                 	// #361
   39e54:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39e58:	add	x1, x1, #0x970
   39e5c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39e60:	add	x0, x0, #0x990
   39e64:	bl	35ac0 <__assert_fail@plt>
   39e68:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39e6c:	add	x3, x3, #0x18
   39e70:	add	x3, x3, #0x10
   39e74:	mov	w2, #0x169                 	// #361
   39e78:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39e7c:	add	x1, x1, #0x970
   39e80:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39e84:	add	x0, x0, #0x990
   39e88:	bl	35ac0 <__assert_fail@plt>

0000000000039e8c <aarch64_ins_sve_float_zero_one@@Base>:
   39e8c:	stp	x29, x30, [sp, #-16]!
   39e90:	mov	x29, sp
   39e94:	ldr	x1, [x1, #16]
   39e98:	cbnz	x1, 39f0c <aarch64_ins_sve_float_zero_one@@Base+0x80>
   39e9c:	ldr	w1, [x0, #20]
   39ea0:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   39ea4:	ldr	x0, [x0, #3944]
   39ea8:	add	x0, x0, w1, uxtw #3
   39eac:	ldr	w0, [x0, #4]
   39eb0:	sub	w2, w0, #0x1
   39eb4:	cmp	w2, #0x1e
   39eb8:	b.hi	39ee8 <aarch64_ins_sve_float_zero_one@@Base+0x5c>  // b.pmore
   39ebc:	ubfiz	x1, x1, #3, #32
   39ec0:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   39ec4:	ldr	x2, [x2, #3944]
   39ec8:	ldr	w1, [x2, x1]
   39ecc:	tbnz	w1, #31, 39ee8 <aarch64_ins_sve_float_zero_one@@Base+0x5c>
   39ed0:	add	w0, w0, w1
   39ed4:	cmp	w0, #0x20
   39ed8:	b.gt	39ee8 <aarch64_ins_sve_float_zero_one@@Base+0x5c>
   39edc:	mov	w0, #0x1                   	// #1
   39ee0:	ldp	x29, x30, [sp], #16
   39ee4:	ret
   39ee8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39eec:	add	x3, x3, #0x18
   39ef0:	add	x3, x3, #0x10
   39ef4:	mov	w2, #0x169                 	// #361
   39ef8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39efc:	add	x1, x1, #0x970
   39f00:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39f04:	add	x0, x0, #0x990
   39f08:	bl	35ac0 <__assert_fail@plt>
   39f0c:	ldr	w1, [x0, #20]
   39f10:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   39f14:	ldr	x0, [x0, #3944]
   39f18:	add	x0, x0, w1, uxtw #3
   39f1c:	ldr	w3, [x0, #4]
   39f20:	sub	w0, w3, #0x1
   39f24:	cmp	w0, #0x1e
   39f28:	b.hi	39f70 <aarch64_ins_sve_float_zero_one@@Base+0xe4>  // b.pmore
   39f2c:	ubfiz	x1, x1, #3, #32
   39f30:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   39f34:	ldr	x0, [x0, #3944]
   39f38:	ldr	w1, [x0, x1]
   39f3c:	tbnz	w1, #31, 39f70 <aarch64_ins_sve_float_zero_one@@Base+0xe4>
   39f40:	add	w0, w3, w1
   39f44:	cmp	w0, #0x20
   39f48:	b.gt	39f70 <aarch64_ins_sve_float_zero_one@@Base+0xe4>
   39f4c:	mov	w0, #0xffffffff            	// #-1
   39f50:	lsl	w0, w0, w3
   39f54:	mvn	w0, w0
   39f58:	and	w0, w0, #0x1
   39f5c:	lsl	w0, w0, w1
   39f60:	ldr	w1, [x2]
   39f64:	orr	w0, w1, w0
   39f68:	str	w0, [x2]
   39f6c:	b	39edc <aarch64_ins_sve_float_zero_one@@Base+0x50>
   39f70:	adrp	x3, 59000 <xexit@@Base+0x74c>
   39f74:	add	x3, x3, #0x18
   39f78:	add	x3, x3, #0x10
   39f7c:	mov	w2, #0x169                 	// #361
   39f80:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   39f84:	add	x1, x1, #0x970
   39f88:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   39f8c:	add	x0, x0, #0x990
   39f90:	bl	35ac0 <__assert_fail@plt>

0000000000039f94 <aarch64_opcode_encode@@Base>:
   39f94:	stp	x29, x30, [sp, #-464]!
   39f98:	mov	x29, sp
   39f9c:	stp	x19, x20, [sp, #16]
   39fa0:	stp	x21, x22, [sp, #32]
   39fa4:	stp	x23, x24, [sp, #48]
   39fa8:	mov	x19, x0
   39fac:	mov	x23, x2
   39fb0:	mov	x20, x3
   39fb4:	mov	x22, x4
   39fb8:	mov	x24, x5
   39fbc:	mov	x2, #0x168                 	// #360
   39fc0:	add	x0, sp, #0x68
   39fc4:	bl	35050 <memcpy@plt>
   39fc8:	ldr	x0, [sp, #112]
   39fcc:	cmp	x0, #0x0
   39fd0:	ccmp	x0, x19, #0x4, ne  // ne = any
   39fd4:	b.ne	3a000 <aarch64_opcode_encode@@Base+0x6c>  // b.any
   39fd8:	cbz	x0, 3a02c <aarch64_opcode_encode@@Base+0x98>
   39fdc:	mov	x1, x22
   39fe0:	add	x0, sp, #0x68
   39fe4:	bl	354e0 <aarch64_match_operands_constraint@plt>
   39fe8:	cbnz	w0, 3a034 <aarch64_opcode_encode@@Base+0xa0>
   39fec:	ldp	x19, x20, [sp, #16]
   39ff0:	ldp	x21, x22, [sp, #32]
   39ff4:	ldp	x23, x24, [sp, #48]
   39ff8:	ldp	x29, x30, [sp], #464
   39ffc:	ret
   3a000:	stp	x25, x26, [sp, #64]
   3a004:	stp	x27, x28, [sp, #80]
   3a008:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3a00c:	add	x3, x3, #0x18
   3a010:	add	x3, x3, #0x1d0
   3a014:	mov	w2, #0x7cb                 	// #1995
   3a018:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3a01c:	add	x1, x1, #0x940
   3a020:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3a024:	add	x0, x0, #0xd60
   3a028:	bl	35ac0 <__assert_fail@plt>
   3a02c:	str	x19, [sp, #112]
   3a030:	b	39fdc <aarch64_opcode_encode@@Base+0x48>
   3a034:	ldr	w0, [x19, #8]
   3a038:	str	w0, [sp, #104]
   3a03c:	mov	x0, x19
   3a040:	bl	35170 <aarch64_num_of_operands@plt>
   3a044:	cbz	w0, 3b79c <aarch64_opcode_encode@@Base+0x1808>
   3a048:	stp	x25, x26, [sp, #64]
   3a04c:	stp	x27, x28, [sp, #80]
   3a050:	add	x1, sp, #0x80
   3a054:	mov	x6, #0x0                   	// #0
   3a058:	add	x4, x19, #0x20
   3a05c:	b	3a094 <aarch64_opcode_encode@@Base+0x100>
   3a060:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3a064:	add	x3, x3, #0x18
   3a068:	add	x3, x3, #0x1d0
   3a06c:	mov	w2, #0x7e5                 	// #2021
   3a070:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3a074:	add	x1, x1, #0x940
   3a078:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3a07c:	add	x0, x0, #0xd90
   3a080:	bl	35ac0 <__assert_fail@plt>
   3a084:	add	x6, x6, #0x1
   3a088:	add	x1, x1, #0x38
   3a08c:	cmp	x6, #0x6
   3a090:	b.eq	3a0b8 <aarch64_opcode_encode@@Base+0x124>  // b.none
   3a094:	ldr	w2, [x4, x6, lsl #2]
   3a098:	ldr	w0, [x1]
   3a09c:	cmp	w2, w0
   3a0a0:	b.ne	3a060 <aarch64_opcode_encode@@Base+0xcc>  // b.any
   3a0a4:	str	w6, [x1, #8]
   3a0a8:	cbz	x20, 3a084 <aarch64_opcode_encode@@Base+0xf0>
   3a0ac:	ldrb	w0, [x1, #4]
   3a0b0:	strb	w0, [x20]
   3a0b4:	b	3a084 <aarch64_opcode_encode@@Base+0xf0>
   3a0b8:	mov	x0, x19
   3a0bc:	bl	352f0 <aarch64_find_real_opcode@plt>
   3a0c0:	mov	x20, x0
   3a0c4:	cbz	x0, 3a0d0 <aarch64_opcode_encode@@Base+0x13c>
   3a0c8:	ldr	x0, [x19, #120]
   3a0cc:	tbnz	w0, #20, 3a0f0 <aarch64_opcode_encode@@Base+0x15c>
   3a0d0:	add	x20, x19, #0x20
   3a0d4:	add	x25, x19, #0x38
   3a0d8:	add	x21, sp, #0x80
   3a0dc:	adrp	x26, a3000 <aarch64_operands@@Base+0x16bc0>
   3a0e0:	ldr	x27, [x26, #4032]
   3a0e4:	add	x28, sp, #0x68
   3a0e8:	mov	x26, x27
   3a0ec:	b	3a59c <aarch64_opcode_encode@@Base+0x608>
   3a0f0:	ldr	x0, [sp, #112]
   3a0f4:	ldr	x1, [x0, #120]
   3a0f8:	tbz	w1, #20, 3a19c <aarch64_opcode_encode@@Base+0x208>
   3a0fc:	ldr	w0, [x0, #20]
   3a100:	cmp	w0, #0x2f
   3a104:	b.hi	3a1b0 <aarch64_opcode_encode@@Base+0x21c>  // b.pmore
   3a108:	cmp	w0, #0x2d
   3a10c:	b.hi	3a428 <aarch64_opcode_encode@@Base+0x494>  // b.pmore
   3a110:	cmp	w0, #0x28
   3a114:	b.hi	3a174 <aarch64_opcode_encode@@Base+0x1e0>  // b.pmore
   3a118:	cmp	w0, #0x26
   3a11c:	b.hi	3a334 <aarch64_opcode_encode@@Base+0x3a0>  // b.pmore
   3a120:	cmp	w0, #0x25
   3a124:	b.hi	3a484 <aarch64_opcode_encode@@Base+0x4f0>  // b.pmore
   3a128:	cmp	w0, #0x23
   3a12c:	b.hi	3a4b0 <aarch64_opcode_encode@@Base+0x51c>  // b.pmore
   3a130:	b.ne	3a19c <aarch64_opcode_encode@@Base+0x208>  // b.any
   3a134:	ldp	x0, x1, [sp, #184]
   3a138:	stp	x0, x1, [sp, #240]
   3a13c:	ldp	x0, x1, [sp, #200]
   3a140:	stp	x0, x1, [sp, #256]
   3a144:	ldp	x0, x1, [sp, #216]
   3a148:	stp	x0, x1, [sp, #272]
   3a14c:	ldr	x0, [sp, #232]
   3a150:	str	x0, [sp, #288]
   3a154:	mov	w0, #0x2                   	// #2
   3a158:	str	w0, [sp, #248]
   3a15c:	mov	w0, #0x1f                  	// #31
   3a160:	str	w0, [sp, #200]
   3a164:	ldrb	w0, [sp, #232]
   3a168:	and	w0, w0, #0xfffffffe
   3a16c:	strb	w0, [sp, #232]
   3a170:	b	3a19c <aarch64_opcode_encode@@Base+0x208>
   3a174:	cmp	w0, #0x29
   3a178:	b.eq	3a350 <aarch64_opcode_encode@@Base+0x3bc>  // b.none
   3a17c:	sub	w0, w0, #0x2b
   3a180:	cmp	w0, #0x2
   3a184:	b.hi	3a19c <aarch64_opcode_encode@@Base+0x208>  // b.pmore
   3a188:	ldr	x0, [sp, #256]
   3a18c:	ldr	x1, [sp, #312]
   3a190:	add	x0, x0, x1
   3a194:	sub	x0, x0, #0x1
   3a198:	str	x0, [sp, #312]
   3a19c:	mov	x1, x20
   3a1a0:	add	x0, sp, #0x68
   3a1a4:	bl	35410 <aarch64_replace_opcode@plt>
   3a1a8:	mov	x19, x20
   3a1ac:	b	3a0d0 <aarch64_opcode_encode@@Base+0x13c>
   3a1b0:	cmp	w0, #0x39
   3a1b4:	b.hi	3a310 <aarch64_opcode_encode@@Base+0x37c>  // b.pmore
   3a1b8:	cmp	w0, #0x37
   3a1bc:	b.hi	3a398 <aarch64_opcode_encode@@Base+0x404>  // b.pmore
   3a1c0:	cmp	w0, #0x31
   3a1c4:	b.eq	3a428 <aarch64_opcode_encode@@Base+0x494>  // b.none
   3a1c8:	b.ls	3a244 <aarch64_opcode_encode@@Base+0x2b0>  // b.plast
   3a1cc:	sub	w0, w0, #0x35
   3a1d0:	cmp	w0, #0x2
   3a1d4:	b.hi	3a19c <aarch64_opcode_encode@@Base+0x208>  // b.pmore
   3a1d8:	ldp	x0, x1, [sp, #240]
   3a1dc:	add	x2, sp, #0x200
   3a1e0:	stp	x0, x1, [x2, #-216]
   3a1e4:	ldr	x0, [sp, #256]
   3a1e8:	str	x0, [sp, #312]
   3a1ec:	ldr	x1, [sp, #264]
   3a1f0:	str	x1, [sp, #320]
   3a1f4:	ldp	x2, x3, [sp, #272]
   3a1f8:	add	x1, sp, #0x200
   3a1fc:	stp	x2, x3, [x1, #-184]
   3a200:	ldr	x1, [sp, #288]
   3a204:	str	x1, [sp, #344]
   3a208:	mov	w1, #0x3                   	// #3
   3a20c:	str	w1, [sp, #304]
   3a210:	ldp	x2, x3, [sp, #184]
   3a214:	stp	x2, x3, [sp, #240]
   3a218:	ldp	x2, x3, [sp, #200]
   3a21c:	stp	x2, x3, [sp, #256]
   3a220:	ldp	x2, x3, [sp, #216]
   3a224:	stp	x2, x3, [sp, #272]
   3a228:	ldr	x1, [sp, #232]
   3a22c:	str	x1, [sp, #288]
   3a230:	mov	w1, #0x2                   	// #2
   3a234:	str	w1, [sp, #248]
   3a238:	bl	35870 <get_inverted_cond@plt>
   3a23c:	str	x0, [sp, #312]
   3a240:	b	3a19c <aarch64_opcode_encode@@Base+0x208>
   3a244:	cmp	w0, #0x30
   3a248:	b.ne	3a19c <aarch64_opcode_encode@@Base+0x208>  // b.any
   3a24c:	ldp	x0, x1, [sp, #240]
   3a250:	add	x2, sp, #0x200
   3a254:	stp	x0, x1, [x2, #-216]
   3a258:	ldr	x1, [sp, #256]
   3a25c:	str	x1, [sp, #312]
   3a260:	ldr	x0, [sp, #264]
   3a264:	str	x0, [sp, #320]
   3a268:	ldp	x2, x3, [sp, #272]
   3a26c:	add	x0, sp, #0x200
   3a270:	stp	x2, x3, [x0, #-184]
   3a274:	ldr	x0, [sp, #288]
   3a278:	str	x0, [sp, #344]
   3a27c:	mov	w0, #0x3                   	// #3
   3a280:	str	w0, [sp, #304]
   3a284:	ldr	x2, [sp, #184]
   3a288:	str	x2, [sp, #240]
   3a28c:	ldr	x0, [sp, #192]
   3a290:	str	x0, [sp, #248]
   3a294:	ldr	x0, [sp, #200]
   3a298:	str	x0, [sp, #256]
   3a29c:	ldr	x3, [sp, #208]
   3a2a0:	str	x3, [sp, #264]
   3a2a4:	ldp	x4, x5, [sp, #216]
   3a2a8:	stp	x4, x5, [sp, #272]
   3a2ac:	ldr	x3, [sp, #232]
   3a2b0:	str	x3, [sp, #288]
   3a2b4:	mov	w3, #0x2                   	// #2
   3a2b8:	str	w3, [sp, #248]
   3a2bc:	ldp	x4, x5, [sp, #128]
   3a2c0:	stp	x4, x5, [sp, #184]
   3a2c4:	ldp	x4, x5, [sp, #144]
   3a2c8:	stp	x4, x5, [sp, #200]
   3a2cc:	ldp	x4, x5, [sp, #160]
   3a2d0:	stp	x4, x5, [sp, #216]
   3a2d4:	ldr	x3, [sp, #176]
   3a2d8:	str	x3, [sp, #232]
   3a2dc:	mov	w3, #0x1                   	// #1
   3a2e0:	str	w3, [sp, #192]
   3a2e4:	mov	w3, #0x1f                  	// #31
   3a2e8:	str	w3, [sp, #200]
   3a2ec:	ubfx	x2, x2, #32, #8
   3a2f0:	cmp	w2, #0x1d
   3a2f4:	b.eq	3a46c <aarch64_opcode_encode@@Base+0x4d8>  // b.none
   3a2f8:	neg	x0, x0
   3a2fc:	and	x0, x0, #0x3f
   3a300:	str	x0, [sp, #256]
   3a304:	sub	x1, x1, #0x1
   3a308:	str	x1, [sp, #312]
   3a30c:	b	3a19c <aarch64_opcode_encode@@Base+0x208>
   3a310:	cmp	w0, #0x40
   3a314:	b.eq	3a534 <aarch64_opcode_encode@@Base+0x5a0>  // b.none
   3a318:	sub	w0, w0, #0x41
   3a31c:	cmp	w0, #0x3
   3a320:	b.hi	3a19c <aarch64_opcode_encode@@Base+0x208>  // b.pmore
   3a324:	ldrb	w0, [sp, #188]
   3a328:	strb	w0, [sp, #244]
   3a32c:	str	xzr, [sp, #256]
   3a330:	b	3a19c <aarch64_opcode_encode@@Base+0x208>
   3a334:	ldrb	w0, [sp, #244]
   3a338:	cmp	w0, #0x1d
   3a33c:	mov	x0, #0x1f                  	// #31
   3a340:	mov	x1, #0x3f                  	// #63
   3a344:	csel	x0, x0, x1, eq  // eq = none
   3a348:	str	x0, [sp, #312]
   3a34c:	b	3a19c <aarch64_opcode_encode@@Base+0x208>
   3a350:	ldr	x0, [sp, #256]
   3a354:	ldrb	w1, [sp, #244]
   3a358:	cmp	w1, #0x1d
   3a35c:	b.eq	3a37c <aarch64_opcode_encode@@Base+0x3e8>  // b.none
   3a360:	neg	x1, x0
   3a364:	and	x1, x1, #0x3f
   3a368:	str	x1, [sp, #256]
   3a36c:	mov	x1, #0x3f                  	// #63
   3a370:	sub	x0, x1, x0
   3a374:	str	x0, [sp, #312]
   3a378:	b	3a19c <aarch64_opcode_encode@@Base+0x208>
   3a37c:	neg	x1, x0
   3a380:	and	x1, x1, #0x1f
   3a384:	str	x1, [sp, #256]
   3a388:	mov	x1, #0x1f                  	// #31
   3a38c:	sub	x0, x1, x0
   3a390:	str	x0, [sp, #312]
   3a394:	b	3a19c <aarch64_opcode_encode@@Base+0x208>
   3a398:	ldp	x0, x1, [sp, #184]
   3a39c:	add	x2, sp, #0x200
   3a3a0:	stp	x0, x1, [x2, #-216]
   3a3a4:	ldr	x0, [sp, #200]
   3a3a8:	str	x0, [sp, #312]
   3a3ac:	ldr	x1, [sp, #208]
   3a3b0:	str	x1, [sp, #320]
   3a3b4:	ldp	x2, x3, [sp, #216]
   3a3b8:	add	x1, sp, #0x200
   3a3bc:	stp	x2, x3, [x1, #-184]
   3a3c0:	ldr	x1, [sp, #232]
   3a3c4:	str	x1, [sp, #344]
   3a3c8:	mov	w1, #0x3                   	// #3
   3a3cc:	str	w1, [sp, #304]
   3a3d0:	ldp	x6, x7, [sp, #128]
   3a3d4:	stp	x6, x7, [sp, #240]
   3a3d8:	ldp	x4, x5, [sp, #144]
   3a3dc:	stp	x4, x5, [sp, #256]
   3a3e0:	ldp	x2, x3, [sp, #160]
   3a3e4:	stp	x2, x3, [sp, #272]
   3a3e8:	ldr	x1, [sp, #176]
   3a3ec:	str	x1, [sp, #288]
   3a3f0:	mov	w8, #0x2                   	// #2
   3a3f4:	str	w8, [sp, #248]
   3a3f8:	stp	x6, x7, [sp, #184]
   3a3fc:	stp	x4, x5, [sp, #200]
   3a400:	stp	x2, x3, [sp, #216]
   3a404:	str	x1, [sp, #232]
   3a408:	mov	w1, #0x1                   	// #1
   3a40c:	str	w1, [sp, #192]
   3a410:	mov	w1, #0x1f                  	// #31
   3a414:	str	w1, [sp, #200]
   3a418:	str	w1, [sp, #256]
   3a41c:	bl	35870 <get_inverted_cond@plt>
   3a420:	str	x0, [sp, #312]
   3a424:	b	3a19c <aarch64_opcode_encode@@Base+0x208>
   3a428:	ldr	x0, [sp, #256]
   3a42c:	ldr	x1, [sp, #312]
   3a430:	ldrb	w2, [sp, #244]
   3a434:	cmp	w2, #0x1d
   3a438:	b.eq	3a454 <aarch64_opcode_encode@@Base+0x4c0>  // b.none
   3a43c:	neg	x0, x0
   3a440:	and	x0, x0, #0x3f
   3a444:	str	x0, [sp, #256]
   3a448:	sub	x1, x1, #0x1
   3a44c:	str	x1, [sp, #312]
   3a450:	b	3a19c <aarch64_opcode_encode@@Base+0x208>
   3a454:	neg	x0, x0
   3a458:	and	x0, x0, #0x1f
   3a45c:	str	x0, [sp, #256]
   3a460:	sub	x1, x1, #0x1
   3a464:	str	x1, [sp, #312]
   3a468:	b	3a19c <aarch64_opcode_encode@@Base+0x208>
   3a46c:	neg	x0, x0
   3a470:	and	x0, x0, #0x1f
   3a474:	str	x0, [sp, #256]
   3a478:	sub	x1, x1, #0x1
   3a47c:	str	x1, [sp, #312]
   3a480:	b	3a19c <aarch64_opcode_encode@@Base+0x208>
   3a484:	ldp	x0, x1, [sp, #184]
   3a488:	stp	x0, x1, [sp, #240]
   3a48c:	ldp	x0, x1, [sp, #200]
   3a490:	stp	x0, x1, [sp, #256]
   3a494:	ldp	x0, x1, [sp, #216]
   3a498:	stp	x0, x1, [sp, #272]
   3a49c:	ldr	x0, [sp, #232]
   3a4a0:	str	x0, [sp, #288]
   3a4a4:	mov	w0, #0x2                   	// #2
   3a4a8:	str	w0, [sp, #248]
   3a4ac:	b	3a19c <aarch64_opcode_encode@@Base+0x208>
   3a4b0:	cmp	w0, #0x24
   3a4b4:	b.eq	3a4c4 <aarch64_opcode_encode@@Base+0x530>  // b.none
   3a4b8:	ldr	x19, [sp, #200]
   3a4bc:	mvn	x19, x19
   3a4c0:	b	3a4c8 <aarch64_opcode_encode@@Base+0x534>
   3a4c4:	ldr	x19, [sp, #200]
   3a4c8:	mov	w0, #0x46                  	// #70
   3a4cc:	str	w0, [sp, #184]
   3a4d0:	ldrb	w0, [sp, #132]
   3a4d4:	cmp	w0, #0x1
   3a4d8:	add	x2, sp, #0x64
   3a4dc:	cset	w1, eq  // eq = none
   3a4e0:	mov	x0, x19
   3a4e4:	bl	35a40 <aarch64_wide_constant_p@plt>
   3a4e8:	cbz	w0, 3a510 <aarch64_opcode_encode@@Base+0x57c>
   3a4ec:	ldr	w1, [sp, #100]
   3a4f0:	lsr	x0, x19, x1
   3a4f4:	and	x0, x0, #0xffff
   3a4f8:	str	x0, [sp, #200]
   3a4fc:	mov	w0, #0x5                   	// #5
   3a500:	str	w0, [sp, #216]
   3a504:	mov	w1, w1
   3a508:	str	x1, [sp, #224]
   3a50c:	b	3a19c <aarch64_opcode_encode@@Base+0x208>
   3a510:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3a514:	add	x3, x3, #0x18
   3a518:	add	x3, x3, #0x1e8
   3a51c:	mov	w2, #0x75e                 	// #1886
   3a520:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3a524:	add	x1, x1, #0x940
   3a528:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3a52c:	add	x0, x0, #0xb60
   3a530:	bl	35ac0 <__assert_fail@plt>
   3a534:	ldp	x0, x1, [sp, #240]
   3a538:	add	x2, sp, #0x200
   3a53c:	stp	x0, x1, [x2, #-216]
   3a540:	ldp	x0, x1, [sp, #256]
   3a544:	stp	x0, x1, [x2, #-200]
   3a548:	ldp	x0, x1, [sp, #272]
   3a54c:	stp	x0, x1, [x2, #-184]
   3a550:	ldr	x0, [sp, #288]
   3a554:	str	x0, [sp, #344]
   3a558:	mov	w0, #0x3                   	// #3
   3a55c:	str	w0, [sp, #304]
   3a560:	ldp	x0, x1, [sp, #184]
   3a564:	stp	x0, x1, [sp, #240]
   3a568:	ldp	x0, x1, [sp, #200]
   3a56c:	stp	x0, x1, [sp, #256]
   3a570:	ldp	x0, x1, [sp, #216]
   3a574:	stp	x0, x1, [sp, #272]
   3a578:	ldr	x0, [sp, #232]
   3a57c:	str	x0, [sp, #288]
   3a580:	mov	w0, #0x2                   	// #2
   3a584:	str	w0, [sp, #248]
   3a588:	b	3a19c <aarch64_opcode_encode@@Base+0x208>
   3a58c:	add	x21, x21, #0x38
   3a590:	add	x20, x20, #0x4
   3a594:	cmp	x25, x20
   3a598:	b.eq	3a5f0 <aarch64_opcode_encode@@Base+0x65c>  // b.none
   3a59c:	ldr	w0, [x20]
   3a5a0:	cbz	w0, 3a5f0 <aarch64_opcode_encode@@Base+0x65c>
   3a5a4:	ldrb	w1, [x21, #48]
   3a5a8:	tbnz	w1, #0, 3a58c <aarch64_opcode_encode@@Base+0x5f8>
   3a5ac:	ubfiz	x1, x0, #1, #32
   3a5b0:	add	x1, x1, w0, uxtw
   3a5b4:	add	x1, x27, x1, lsl #4
   3a5b8:	ldr	w1, [x1, #16]
   3a5bc:	tbz	w1, #0, 3a58c <aarch64_opcode_encode@@Base+0x5f8>
   3a5c0:	ubfiz	x1, x0, #1, #32
   3a5c4:	add	x0, x1, w0, uxtw
   3a5c8:	mov	x4, x22
   3a5cc:	mov	x3, x28
   3a5d0:	mov	x2, x28
   3a5d4:	mov	x1, x21
   3a5d8:	add	x0, x26, x0, lsl #4
   3a5dc:	bl	35980 <aarch64_insert_operand@plt>
   3a5e0:	cbnz	w0, 3a58c <aarch64_opcode_encode@@Base+0x5f8>
   3a5e4:	ldp	x25, x26, [sp, #64]
   3a5e8:	ldp	x27, x28, [sp, #80]
   3a5ec:	b	39fec <aarch64_opcode_encode@@Base+0x58>
   3a5f0:	ldr	x1, [x19, #120]
   3a5f4:	mov	x0, #0xff0                 	// #4080
   3a5f8:	movk	x0, #0x8c0, lsl #16
   3a5fc:	tst	x1, x0
   3a600:	b.ne	3a68c <aarch64_opcode_encode@@Base+0x6f8>  // b.any
   3a604:	ldr	x0, [sp, #112]
   3a608:	ldr	w0, [x0, #16]
   3a60c:	cmp	w0, #0x52
   3a610:	b.eq	3ba50 <aarch64_opcode_encode@@Base+0x1abc>  // b.none
   3a614:	b.hi	3b7ac <aarch64_opcode_encode@@Base+0x1818>  // b.pmore
   3a618:	cmp	w0, #0x4c
   3a61c:	b.eq	3b888 <aarch64_opcode_encode@@Base+0x18f4>  // b.none
   3a620:	b.ls	3b6f0 <aarch64_opcode_encode@@Base+0x175c>  // b.plast
   3a624:	cmp	w0, #0x50
   3a628:	b.ls	3b72c <aarch64_opcode_encode@@Base+0x1798>  // b.plast
   3a62c:	add	x0, sp, #0x68
   3a630:	bl	360f0 <init_disassemble_info@@Base+0x98>
   3a634:	add	w2, w0, #0x1
   3a638:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3a63c:	ldr	x0, [x0, #3944]
   3a640:	ldr	w3, [x0, #68]
   3a644:	sub	w0, w3, #0x1
   3a648:	cmp	w0, #0x1e
   3a64c:	b.hi	3b988 <aarch64_opcode_encode@@Base+0x19f4>  // b.pmore
   3a650:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3a654:	ldr	x0, [x0, #3944]
   3a658:	ldr	w1, [x0, #64]
   3a65c:	tbnz	w1, #31, 3b988 <aarch64_opcode_encode@@Base+0x19f4>
   3a660:	add	w0, w3, w1
   3a664:	cmp	w0, #0x20
   3a668:	b.gt	3b988 <aarch64_opcode_encode@@Base+0x19f4>
   3a66c:	mov	w0, #0xffffffff            	// #-1
   3a670:	lsl	w0, w0, w3
   3a674:	bic	w0, w2, w0
   3a678:	lsl	w0, w0, w1
   3a67c:	ldr	w1, [sp, #104]
   3a680:	orr	w0, w1, w0
   3a684:	str	w0, [sp, #104]
   3a688:	b	3b734 <aarch64_opcode_encode@@Base+0x17a0>
   3a68c:	ldr	x20, [sp, #112]
   3a690:	ldr	x0, [x20, #120]
   3a694:	tbnz	w0, #4, 3a794 <aarch64_opcode_encode@@Base+0x800>
   3a698:	tbnz	w0, #5, 3a814 <aarch64_opcode_encode@@Base+0x880>
   3a69c:	ldr	x20, [sp, #112]
   3a6a0:	ldr	x0, [x20, #120]
   3a6a4:	tbnz	w0, #27, 3a984 <aarch64_opcode_encode@@Base+0x9f0>
   3a6a8:	ldr	x0, [sp, #112]
   3a6ac:	ldr	x1, [x0, #120]
   3a6b0:	tbnz	w1, #6, 3aa70 <aarch64_opcode_encode@@Base+0xadc>
   3a6b4:	ldr	x20, [sp, #112]
   3a6b8:	ldr	x0, [x20, #120]
   3a6bc:	tbnz	w0, #7, 3abb4 <aarch64_opcode_encode@@Base+0xc20>
   3a6c0:	ldr	x20, [sp, #112]
   3a6c4:	ldr	x0, [x20, #120]
   3a6c8:	tbnz	w0, #8, 3ace0 <aarch64_opcode_encode@@Base+0xd4c>
   3a6cc:	ldr	x0, [sp, #112]
   3a6d0:	ldr	x1, [x0, #120]
   3a6d4:	tbnz	w1, #9, 3ae44 <aarch64_opcode_encode@@Base+0xeb0>
   3a6d8:	ldr	x0, [sp, #112]
   3a6dc:	ldr	x1, [x0, #120]
   3a6e0:	tbnz	w1, #10, 3afc8 <aarch64_opcode_encode@@Base+0x1034>
   3a6e4:	ldr	x0, [sp, #112]
   3a6e8:	ldr	x1, [x0, #120]
   3a6ec:	tbnz	w1, #11, 3b0e0 <aarch64_opcode_encode@@Base+0x114c>
   3a6f0:	ldr	x0, [sp, #112]
   3a6f4:	ldr	x1, [x0, #120]
   3a6f8:	tbz	w1, #22, 3a604 <aarch64_opcode_encode@@Base+0x670>
   3a6fc:	ldr	w0, [x0, #20]
   3a700:	cmp	w0, #0x47
   3a704:	b.eq	3b558 <aarch64_opcode_encode@@Base+0x15c4>  // b.none
   3a708:	b.hi	3b1ac <aarch64_opcode_encode@@Base+0x1218>  // b.pmore
   3a70c:	cmp	w0, #0x3f
   3a710:	b.eq	3b3a0 <aarch64_opcode_encode@@Base+0x140c>  // b.none
   3a714:	b.ls	3b164 <aarch64_opcode_encode@@Base+0x11d0>  // b.plast
   3a718:	cmp	w0, #0x45
   3a71c:	b.eq	3b434 <aarch64_opcode_encode@@Base+0x14a0>  // b.none
   3a720:	cmp	w0, #0x46
   3a724:	b.ne	3a604 <aarch64_opcode_encode@@Base+0x670>  // b.any
   3a728:	ldr	w5, [sp, #104]
   3a72c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3a730:	ldr	x0, [x0, #3944]
   3a734:	ldr	w2, [x0, #688]
   3a738:	lsr	w2, w5, w2
   3a73c:	ldr	w1, [x0, #692]
   3a740:	mov	w3, #0xffffffff            	// #-1
   3a744:	lsl	w3, w3, w1
   3a748:	ldr	w4, [x0, #708]
   3a74c:	sub	w0, w4, #0x1
   3a750:	cmp	w0, #0x1e
   3a754:	b.hi	3b534 <aarch64_opcode_encode@@Base+0x15a0>  // b.pmore
   3a758:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3a75c:	ldr	x0, [x0, #3944]
   3a760:	ldr	w1, [x0, #704]
   3a764:	tbnz	w1, #31, 3b534 <aarch64_opcode_encode@@Base+0x15a0>
   3a768:	add	w0, w4, w1
   3a76c:	cmp	w0, #0x20
   3a770:	b.gt	3b534 <aarch64_opcode_encode@@Base+0x15a0>
   3a774:	mov	w0, #0xffffffff            	// #-1
   3a778:	lsl	w0, w0, w4
   3a77c:	orr	w0, w0, w3
   3a780:	bic	w0, w2, w0
   3a784:	lsl	w0, w0, w1
   3a788:	orr	w0, w0, w5
   3a78c:	str	w0, [sp, #104]
   3a790:	b	3a604 <aarch64_opcode_encode@@Base+0x670>
   3a794:	ldr	x1, [sp, #120]
   3a798:	ldr	w4, [x1, #32]
   3a79c:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3a7a0:	ldr	x1, [x1, #3944]
   3a7a4:	ldr	w3, [x1, #12]
   3a7a8:	sub	w1, w3, #0x1
   3a7ac:	cmp	w1, #0x1e
   3a7b0:	b.hi	3a7f0 <aarch64_opcode_encode@@Base+0x85c>  // b.pmore
   3a7b4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3a7b8:	ldr	x1, [x1, #3944]
   3a7bc:	ldr	w2, [x1, #8]
   3a7c0:	tbnz	w2, #31, 3a7f0 <aarch64_opcode_encode@@Base+0x85c>
   3a7c4:	add	w1, w3, w2
   3a7c8:	cmp	w1, #0x20
   3a7cc:	b.gt	3a7f0 <aarch64_opcode_encode@@Base+0x85c>
   3a7d0:	mov	w1, #0xffffffff            	// #-1
   3a7d4:	lsl	w1, w1, w3
   3a7d8:	bic	w1, w4, w1
   3a7dc:	lsl	w1, w1, w2
   3a7e0:	ldr	w2, [sp, #104]
   3a7e4:	orr	w1, w2, w1
   3a7e8:	str	w1, [sp, #104]
   3a7ec:	b	3a698 <aarch64_opcode_encode@@Base+0x704>
   3a7f0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3a7f4:	add	x3, x3, #0x18
   3a7f8:	add	x3, x3, #0x10
   3a7fc:	mov	w2, #0x169                 	// #361
   3a800:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3a804:	add	x1, x1, #0x970
   3a808:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3a80c:	add	x0, x0, #0x990
   3a810:	bl	35ac0 <__assert_fail@plt>
   3a814:	ldr	w0, [x20, #32]
   3a818:	bl	35710 <aarch64_get_operand_class@plt>
   3a81c:	mov	w1, #0x0                   	// #0
   3a820:	cmp	w0, #0x1
   3a824:	b.ne	3a904 <aarch64_opcode_encode@@Base+0x970>  // b.any
   3a828:	sxtw	x1, w1
   3a82c:	lsl	x0, x1, #3
   3a830:	sub	x0, x0, x1
   3a834:	lsl	x0, x0, #3
   3a838:	add	x1, sp, #0x84
   3a83c:	ldrb	w0, [x1, x0]
   3a840:	sub	w0, w0, #0x2
   3a844:	and	w0, w0, #0xfffffffd
   3a848:	tst	w0, #0xff
   3a84c:	cset	w3, eq  // eq = none
   3a850:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3a854:	ldr	x0, [x0, #3944]
   3a858:	ldr	w2, [x0, #476]
   3a85c:	sub	w0, w2, #0x1
   3a860:	cmp	w0, #0x1e
   3a864:	b.hi	3a93c <aarch64_opcode_encode@@Base+0x9a8>  // b.pmore
   3a868:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3a86c:	ldr	x0, [x0, #3944]
   3a870:	ldr	w1, [x0, #472]
   3a874:	tbnz	w1, #31, 3a93c <aarch64_opcode_encode@@Base+0x9a8>
   3a878:	add	w0, w2, w1
   3a87c:	cmp	w0, #0x20
   3a880:	b.gt	3a93c <aarch64_opcode_encode@@Base+0x9a8>
   3a884:	mov	w0, #0xffffffff            	// #-1
   3a888:	lsl	w0, w0, w2
   3a88c:	bic	w0, w3, w0
   3a890:	lsl	w0, w0, w1
   3a894:	ldr	w1, [sp, #104]
   3a898:	orr	w0, w0, w1
   3a89c:	str	w0, [sp, #104]
   3a8a0:	ldr	x1, [sp, #112]
   3a8a4:	ldr	x2, [x1, #120]
   3a8a8:	tbz	w2, #23, 3a69c <aarch64_opcode_encode@@Base+0x708>
   3a8ac:	ldr	w2, [x1, #12]
   3a8b0:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3a8b4:	ldr	x1, [x1, #3944]
   3a8b8:	ldr	w5, [x1, #452]
   3a8bc:	sub	w1, w5, #0x1
   3a8c0:	cmp	w1, #0x1e
   3a8c4:	b.hi	3a960 <aarch64_opcode_encode@@Base+0x9cc>  // b.pmore
   3a8c8:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3a8cc:	ldr	x1, [x1, #3944]
   3a8d0:	ldr	w4, [x1, #448]
   3a8d4:	tbnz	w4, #31, 3a960 <aarch64_opcode_encode@@Base+0x9cc>
   3a8d8:	add	w1, w5, w4
   3a8dc:	cmp	w1, #0x20
   3a8e0:	b.gt	3a960 <aarch64_opcode_encode@@Base+0x9cc>
   3a8e4:	mov	w1, #0xffffffff            	// #-1
   3a8e8:	lsl	w1, w1, w5
   3a8ec:	bic	w1, w3, w1
   3a8f0:	lsl	w1, w1, w4
   3a8f4:	bic	w1, w1, w2
   3a8f8:	orr	w0, w1, w0
   3a8fc:	str	w0, [sp, #104]
   3a900:	b	3a69c <aarch64_opcode_encode@@Base+0x708>
   3a904:	ldr	w0, [x20, #36]
   3a908:	bl	35710 <aarch64_get_operand_class@plt>
   3a90c:	mov	w1, #0x1                   	// #1
   3a910:	cmp	w0, w1
   3a914:	b.eq	3a828 <aarch64_opcode_encode@@Base+0x894>  // b.none
   3a918:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3a91c:	add	x3, x3, #0x18
   3a920:	add	x3, x3, #0x200
   3a924:	mov	w2, #0x1ab                 	// #427
   3a928:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3a92c:	add	x1, x1, #0x970
   3a930:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3a934:	add	x0, x0, #0xb60
   3a938:	bl	35ac0 <__assert_fail@plt>
   3a93c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3a940:	add	x3, x3, #0x18
   3a944:	add	x3, x3, #0x10
   3a948:	mov	w2, #0x169                 	// #361
   3a94c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3a950:	add	x1, x1, #0x970
   3a954:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3a958:	add	x0, x0, #0x990
   3a95c:	bl	35ac0 <__assert_fail@plt>
   3a960:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3a964:	add	x3, x3, #0x18
   3a968:	add	x3, x3, #0x10
   3a96c:	mov	w2, #0x169                 	// #361
   3a970:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3a974:	add	x1, x1, #0x970
   3a978:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3a97c:	add	x0, x0, #0x990
   3a980:	bl	35ac0 <__assert_fail@plt>
   3a984:	ldr	w0, [x20, #32]
   3a988:	bl	35710 <aarch64_get_operand_class@plt>
   3a98c:	mov	w1, #0x0                   	// #0
   3a990:	cmp	w0, #0x1
   3a994:	b.ne	3aa14 <aarch64_opcode_encode@@Base+0xa80>  // b.any
   3a998:	sxtw	x1, w1
   3a99c:	lsl	x0, x1, #3
   3a9a0:	sub	x0, x0, x1
   3a9a4:	lsl	x0, x0, #3
   3a9a8:	add	x1, sp, #0x84
   3a9ac:	ldrb	w0, [x1, x0]
   3a9b0:	sub	w0, w0, #0x2
   3a9b4:	and	w0, w0, #0xfffffffd
   3a9b8:	tst	w0, #0xff
   3a9bc:	cset	w3, eq  // eq = none
   3a9c0:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3a9c4:	ldr	x0, [x0, #3944]
   3a9c8:	ldr	w2, [x0, #484]
   3a9cc:	sub	w0, w2, #0x1
   3a9d0:	cmp	w0, #0x1e
   3a9d4:	b.hi	3aa4c <aarch64_opcode_encode@@Base+0xab8>  // b.pmore
   3a9d8:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3a9dc:	ldr	x0, [x0, #3944]
   3a9e0:	ldr	w1, [x0, #480]
   3a9e4:	tbnz	w1, #31, 3aa4c <aarch64_opcode_encode@@Base+0xab8>
   3a9e8:	add	w0, w2, w1
   3a9ec:	cmp	w0, #0x20
   3a9f0:	b.gt	3aa4c <aarch64_opcode_encode@@Base+0xab8>
   3a9f4:	mov	w0, #0xffffffff            	// #-1
   3a9f8:	lsl	w0, w0, w2
   3a9fc:	bic	w0, w3, w0
   3aa00:	lsl	w0, w0, w1
   3aa04:	ldr	w1, [sp, #104]
   3aa08:	orr	w0, w1, w0
   3aa0c:	str	w0, [sp, #104]
   3aa10:	b	3a6a8 <aarch64_opcode_encode@@Base+0x714>
   3aa14:	ldr	w0, [x20, #36]
   3aa18:	bl	35710 <aarch64_get_operand_class@plt>
   3aa1c:	mov	w1, #0x1                   	// #1
   3aa20:	cmp	w0, w1
   3aa24:	b.eq	3a998 <aarch64_opcode_encode@@Base+0xa04>  // b.none
   3aa28:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3aa2c:	add	x3, x3, #0x18
   3aa30:	add	x3, x3, #0x200
   3aa34:	mov	w2, #0x1ab                 	// #427
   3aa38:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3aa3c:	add	x1, x1, #0x970
   3aa40:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3aa44:	add	x0, x0, #0xb60
   3aa48:	bl	35ac0 <__assert_fail@plt>
   3aa4c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3aa50:	add	x3, x3, #0x18
   3aa54:	add	x3, x3, #0x10
   3aa58:	mov	w2, #0x169                 	// #361
   3aa5c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3aa60:	add	x1, x1, #0x970
   3aa64:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3aa68:	add	x0, x0, #0x990
   3aa6c:	bl	35ac0 <__assert_fail@plt>
   3aa70:	bl	357b0 <aarch64_select_operand_for_sizeq_field_coding@plt>
   3aa74:	sbfiz	x1, x0, #3, #32
   3aa78:	sub	x0, x1, w0, sxtw
   3aa7c:	lsl	x0, x0, #3
   3aa80:	add	x1, sp, #0x84
   3aa84:	ldrb	w0, [x1, x0]
   3aa88:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3aa8c:	ldr	x5, [sp, #112]
   3aa90:	ldr	w2, [x5, #12]
   3aa94:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3aa98:	ldr	x1, [x1, #3944]
   3aa9c:	ldr	w4, [x1, #92]
   3aaa0:	sub	w1, w4, #0x1
   3aaa4:	cmp	w1, #0x1e
   3aaa8:	b.hi	3ab6c <aarch64_opcode_encode@@Base+0xbd8>  // b.pmore
   3aaac:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3aab0:	ldr	x1, [x1, #3944]
   3aab4:	ldr	w3, [x1, #88]
   3aab8:	tbnz	w3, #31, 3ab6c <aarch64_opcode_encode@@Base+0xbd8>
   3aabc:	add	w1, w4, w3
   3aac0:	cmp	w1, #0x20
   3aac4:	b.gt	3ab6c <aarch64_opcode_encode@@Base+0xbd8>
   3aac8:	mov	w1, #0xffffffff            	// #-1
   3aacc:	lsl	w1, w1, w4
   3aad0:	bic	w1, w0, w1
   3aad4:	and	w1, w1, #0x1
   3aad8:	lsl	w1, w1, w3
   3aadc:	mvn	w4, w2
   3aae0:	bic	w1, w1, w2
   3aae4:	ldr	w2, [sp, #104]
   3aae8:	orr	w1, w1, w2
   3aaec:	str	w1, [sp, #104]
   3aaf0:	ldr	w2, [x5, #16]
   3aaf4:	sub	w2, w2, #0x12
   3aaf8:	cmp	w2, #0x4
   3aafc:	cset	w3, cc  // cc = lo, ul, last
   3ab00:	add	w3, w3, #0x8
   3ab04:	lsr	w2, w0, #1
   3ab08:	ubfiz	x5, x3, #3, #5
   3ab0c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3ab10:	ldr	x0, [x0, #3944]
   3ab14:	add	x0, x0, x5
   3ab18:	ldr	w5, [x0, #4]
   3ab1c:	sub	w0, w5, #0x1
   3ab20:	cmp	w0, #0x1e
   3ab24:	b.hi	3ab90 <aarch64_opcode_encode@@Base+0xbfc>  // b.pmore
   3ab28:	ubfiz	x3, x3, #3, #5
   3ab2c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3ab30:	ldr	x0, [x0, #3944]
   3ab34:	ldr	w3, [x0, x3]
   3ab38:	tbnz	w3, #31, 3ab90 <aarch64_opcode_encode@@Base+0xbfc>
   3ab3c:	add	w0, w5, w3
   3ab40:	cmp	w0, #0x20
   3ab44:	b.gt	3ab90 <aarch64_opcode_encode@@Base+0xbfc>
   3ab48:	mov	w0, #0xffffffff            	// #-1
   3ab4c:	lsl	w0, w0, w5
   3ab50:	bic	w0, w2, w0
   3ab54:	and	w0, w0, #0x3
   3ab58:	lsl	w0, w0, w3
   3ab5c:	and	w0, w4, w0
   3ab60:	orr	w1, w0, w1
   3ab64:	str	w1, [sp, #104]
   3ab68:	b	3a6b4 <aarch64_opcode_encode@@Base+0x720>
   3ab6c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3ab70:	add	x3, x3, #0x18
   3ab74:	add	x3, x3, #0x10
   3ab78:	mov	w2, #0x169                 	// #361
   3ab7c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ab80:	add	x1, x1, #0x970
   3ab84:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ab88:	add	x0, x0, #0x990
   3ab8c:	bl	35ac0 <__assert_fail@plt>
   3ab90:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3ab94:	add	x3, x3, #0x18
   3ab98:	add	x3, x3, #0x10
   3ab9c:	mov	w2, #0x169                 	// #361
   3aba0:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3aba4:	add	x1, x1, #0x970
   3aba8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3abac:	add	x0, x0, #0x990
   3abb0:	bl	35ac0 <__assert_fail@plt>
   3abb4:	ldr	w0, [x20, #36]
   3abb8:	bl	35710 <aarch64_get_operand_class@plt>
   3abbc:	mov	w1, #0x1                   	// #1
   3abc0:	cmp	w0, #0x3
   3abc4:	b.ne	3ac1c <aarch64_opcode_encode@@Base+0xc88>  // b.any
   3abc8:	sxtw	x1, w1
   3abcc:	lsl	x0, x1, #3
   3abd0:	sub	x0, x0, x1
   3abd4:	lsl	x0, x0, #3
   3abd8:	add	x1, sp, #0x84
   3abdc:	ldrb	w0, [x1, x0]
   3abe0:	cmp	w0, #0x7
   3abe4:	b.eq	3ac54 <aarch64_opcode_encode@@Base+0xcc0>  // b.none
   3abe8:	cmp	w0, #0x8
   3abec:	b.eq	3ac5c <aarch64_opcode_encode@@Base+0xcc8>  // b.none
   3abf0:	cmp	w0, #0x6
   3abf4:	b.eq	3acb4 <aarch64_opcode_encode@@Base+0xd20>  // b.none
   3abf8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3abfc:	add	x3, x3, #0x18
   3ac00:	add	x3, x3, #0x250
   3ac04:	mov	w2, #0x5fb                 	// #1531
   3ac08:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ac0c:	add	x1, x1, #0x940
   3ac10:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3ac14:	add	x0, x0, #0xb60
   3ac18:	bl	35ac0 <__assert_fail@plt>
   3ac1c:	ldr	w0, [x20, #32]
   3ac20:	bl	35710 <aarch64_get_operand_class@plt>
   3ac24:	mov	w1, #0x0                   	// #0
   3ac28:	cmp	w0, #0x3
   3ac2c:	b.eq	3abc8 <aarch64_opcode_encode@@Base+0xc34>  // b.none
   3ac30:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3ac34:	add	x3, x3, #0x18
   3ac38:	add	x3, x3, #0x228
   3ac3c:	mov	w2, #0x1c0                 	// #448
   3ac40:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ac44:	add	x1, x1, #0x970
   3ac48:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3ac4c:	add	x0, x0, #0xb60
   3ac50:	bl	35ac0 <__assert_fail@plt>
   3ac54:	mov	w3, #0x0                   	// #0
   3ac58:	b	3ac60 <aarch64_opcode_encode@@Base+0xccc>
   3ac5c:	mov	w3, #0x1                   	// #1
   3ac60:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3ac64:	ldr	x0, [x0, #3944]
   3ac68:	ldr	w2, [x0, #292]
   3ac6c:	sub	w0, w2, #0x1
   3ac70:	cmp	w0, #0x1e
   3ac74:	b.hi	3acbc <aarch64_opcode_encode@@Base+0xd28>  // b.pmore
   3ac78:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3ac7c:	ldr	x0, [x0, #3944]
   3ac80:	ldr	w1, [x0, #288]
   3ac84:	tbnz	w1, #31, 3acbc <aarch64_opcode_encode@@Base+0xd28>
   3ac88:	add	w0, w2, w1
   3ac8c:	cmp	w0, #0x20
   3ac90:	b.gt	3acbc <aarch64_opcode_encode@@Base+0xd28>
   3ac94:	mov	w0, #0xffffffff            	// #-1
   3ac98:	lsl	w0, w0, w2
   3ac9c:	bic	w0, w3, w0
   3aca0:	lsl	w0, w0, w1
   3aca4:	ldr	w1, [sp, #104]
   3aca8:	orr	w0, w1, w0
   3acac:	str	w0, [sp, #104]
   3acb0:	b	3a6c0 <aarch64_opcode_encode@@Base+0x72c>
   3acb4:	mov	w3, #0x3                   	// #3
   3acb8:	b	3ac60 <aarch64_opcode_encode@@Base+0xccc>
   3acbc:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3acc0:	add	x3, x3, #0x18
   3acc4:	add	x3, x3, #0x10
   3acc8:	mov	w2, #0x169                 	// #361
   3accc:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3acd0:	add	x1, x1, #0x970
   3acd4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3acd8:	add	x0, x0, #0x990
   3acdc:	bl	35ac0 <__assert_fail@plt>
   3ace0:	ldr	w0, [x20, #32]
   3ace4:	bl	35710 <aarch64_get_operand_class@plt>
   3ace8:	cmp	w0, #0x6
   3acec:	b.eq	3ad14 <aarch64_opcode_encode@@Base+0xd80>  // b.none
   3acf0:	ldr	w0, [x20, #36]
   3acf4:	bl	35710 <aarch64_get_operand_class@plt>
   3acf8:	mov	w21, #0x0                   	// #0
   3acfc:	cmp	w0, #0x6
   3ad00:	b.ne	3add8 <aarch64_opcode_encode@@Base+0xe44>  // b.any
   3ad04:	ldrb	w0, [x20, #57]
   3ad08:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3ad0c:	and	w1, w0, #0xff
   3ad10:	b	3ad34 <aarch64_opcode_encode@@Base+0xda0>
   3ad14:	ldrb	w0, [x20, #56]
   3ad18:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3ad1c:	and	w21, w0, #0xff
   3ad20:	ldr	w0, [x20, #36]
   3ad24:	bl	35710 <aarch64_get_operand_class@plt>
   3ad28:	mov	w1, #0x0                   	// #0
   3ad2c:	cmp	w0, #0x6
   3ad30:	b.eq	3ad04 <aarch64_opcode_encode@@Base+0xd70>  // b.none
   3ad34:	cmp	w1, #0x0
   3ad38:	ccmp	w21, w1, #0x0, eq  // eq = none
   3ad3c:	b.eq	3add8 <aarch64_opcode_encode@@Base+0xe44>  // b.none
   3ad40:	mov	w0, #0x1                   	// #1
   3ad44:	cbz	w21, 3ad50 <aarch64_opcode_encode@@Base+0xdbc>
   3ad48:	cmp	w21, w1, lsl #1
   3ad4c:	cset	w0, eq  // eq = none
   3ad50:	sxtw	x1, w0
   3ad54:	lsl	x0, x1, #3
   3ad58:	sub	x0, x0, x1
   3ad5c:	lsl	x0, x0, #3
   3ad60:	add	x1, sp, #0x84
   3ad64:	ldrb	w0, [x1, x0]
   3ad68:	sub	w1, w0, #0x5
   3ad6c:	cmp	w1, #0x4
   3ad70:	b.hi	3adfc <aarch64_opcode_encode@@Base+0xe68>  // b.pmore
   3ad74:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3ad78:	ldr	x1, [sp, #112]
   3ad7c:	ldr	w2, [x1, #12]
   3ad80:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3ad84:	ldr	x1, [x1, #3944]
   3ad88:	ldr	w4, [x1, #68]
   3ad8c:	sub	w1, w4, #0x1
   3ad90:	cmp	w1, #0x1e
   3ad94:	b.hi	3ae20 <aarch64_opcode_encode@@Base+0xe8c>  // b.pmore
   3ad98:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3ad9c:	ldr	x1, [x1, #3944]
   3ada0:	ldr	w3, [x1, #64]
   3ada4:	tbnz	w3, #31, 3ae20 <aarch64_opcode_encode@@Base+0xe8c>
   3ada8:	add	w1, w4, w3
   3adac:	cmp	w1, #0x20
   3adb0:	b.gt	3ae20 <aarch64_opcode_encode@@Base+0xe8c>
   3adb4:	mov	w1, #0xffffffff            	// #-1
   3adb8:	lsl	w1, w1, w4
   3adbc:	bic	w0, w0, w1
   3adc0:	lsl	w0, w0, w3
   3adc4:	bic	w1, w0, w2
   3adc8:	ldr	w0, [sp, #104]
   3adcc:	orr	w0, w0, w1
   3add0:	str	w0, [sp, #104]
   3add4:	b	3a6cc <aarch64_opcode_encode@@Base+0x738>
   3add8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3addc:	add	x3, x3, #0x18
   3ade0:	add	x3, x3, #0x268
   3ade4:	mov	w2, #0x1d4                 	// #468
   3ade8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3adec:	add	x1, x1, #0x970
   3adf0:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3adf4:	add	x0, x0, #0xb60
   3adf8:	bl	35ac0 <__assert_fail@plt>
   3adfc:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3ae00:	add	x3, x3, #0x18
   3ae04:	add	x3, x3, #0x250
   3ae08:	mov	w2, #0x604                 	// #1540
   3ae0c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ae10:	add	x1, x1, #0x940
   3ae14:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ae18:	add	x0, x0, #0xdc0
   3ae1c:	bl	35ac0 <__assert_fail@plt>
   3ae20:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3ae24:	add	x3, x3, #0x18
   3ae28:	add	x3, x3, #0x10
   3ae2c:	mov	w2, #0x169                 	// #361
   3ae30:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ae34:	add	x1, x1, #0x970
   3ae38:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ae3c:	add	x0, x0, #0x990
   3ae40:	bl	35ac0 <__assert_fail@plt>
   3ae44:	ldrb	w20, [sp, #132]
   3ae48:	ldr	w0, [x0, #32]
   3ae4c:	bl	35710 <aarch64_get_operand_class@plt>
   3ae50:	cmp	w0, #0x4
   3ae54:	b.ne	3af38 <aarch64_opcode_encode@@Base+0xfa4>  // b.any
   3ae58:	sub	w0, w20, #0xd
   3ae5c:	cmp	w0, #0x8
   3ae60:	b.hi	3af38 <aarch64_opcode_encode@@Base+0xfa4>  // b.pmore
   3ae64:	mov	w0, w20
   3ae68:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3ae6c:	ldr	x1, [sp, #112]
   3ae70:	ldr	w2, [x1, #12]
   3ae74:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3ae78:	ldr	x1, [x1, #3944]
   3ae7c:	ldr	w4, [x1, #92]
   3ae80:	sub	w1, w4, #0x1
   3ae84:	cmp	w1, #0x1e
   3ae88:	b.hi	3af5c <aarch64_opcode_encode@@Base+0xfc8>  // b.pmore
   3ae8c:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3ae90:	ldr	x1, [x1, #3944]
   3ae94:	ldr	w3, [x1, #88]
   3ae98:	tbnz	w3, #31, 3af5c <aarch64_opcode_encode@@Base+0xfc8>
   3ae9c:	add	w1, w4, w3
   3aea0:	cmp	w1, #0x20
   3aea4:	b.gt	3af5c <aarch64_opcode_encode@@Base+0xfc8>
   3aea8:	mov	w1, #0xffffffff            	// #-1
   3aeac:	lsl	w1, w1, w4
   3aeb0:	bic	w1, w0, w1
   3aeb4:	and	w1, w1, #0x1
   3aeb8:	lsl	w1, w1, w3
   3aebc:	mvn	w3, w2
   3aec0:	bic	w1, w1, w2
   3aec4:	ldr	w2, [sp, #104]
   3aec8:	orr	w1, w1, w2
   3aecc:	str	w1, [sp, #104]
   3aed0:	asr	w4, w0, #1
   3aed4:	cmp	w0, #0x7
   3aed8:	b.hi	3af80 <aarch64_opcode_encode@@Base+0xfec>  // b.pmore
   3aedc:	add	w5, w4, #0x1
   3aee0:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3aee4:	ldr	x0, [x0, #3944]
   3aee8:	ldr	w0, [x0, #348]
   3aeec:	cmp	w5, w0
   3aef0:	b.gt	3afa4 <aarch64_opcode_encode@@Base+0x1010>
   3aef4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3aef8:	ldr	x0, [x0, #3944]
   3aefc:	ldr	w2, [x0, #344]
   3af00:	mov	w0, #0x1                   	// #1
   3af04:	lsl	w4, w0, w4
   3af08:	tbnz	w2, #31, 3afa4 <aarch64_opcode_encode@@Base+0x1010>
   3af0c:	add	w0, w5, w2
   3af10:	cmp	w0, #0x20
   3af14:	b.gt	3afa4 <aarch64_opcode_encode@@Base+0x1010>
   3af18:	mov	w0, #0xffffffff            	// #-1
   3af1c:	lsl	w0, w0, w5
   3af20:	bic	w0, w4, w0
   3af24:	lsl	w0, w0, w2
   3af28:	and	w0, w3, w0
   3af2c:	orr	w1, w0, w1
   3af30:	str	w1, [sp, #104]
   3af34:	b	3a6d8 <aarch64_opcode_encode@@Base+0x744>
   3af38:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3af3c:	add	x3, x3, #0x18
   3af40:	add	x3, x3, #0x250
   3af44:	mov	w2, #0x611                 	// #1553
   3af48:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3af4c:	add	x1, x1, #0x940
   3af50:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3af54:	add	x0, x0, #0xe08
   3af58:	bl	35ac0 <__assert_fail@plt>
   3af5c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3af60:	add	x3, x3, #0x18
   3af64:	add	x3, x3, #0x10
   3af68:	mov	w2, #0x169                 	// #361
   3af6c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3af70:	add	x1, x1, #0x970
   3af74:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3af78:	add	x0, x0, #0x990
   3af7c:	bl	35ac0 <__assert_fail@plt>
   3af80:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3af84:	add	x3, x3, #0x18
   3af88:	add	x3, x3, #0x250
   3af8c:	mov	w2, #0x622                 	// #1570
   3af90:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3af94:	add	x1, x1, #0x940
   3af98:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3af9c:	add	x0, x0, #0xeb0
   3afa0:	bl	35ac0 <__assert_fail@plt>
   3afa4:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3afa8:	add	x3, x3, #0x18
   3afac:	add	x3, x3, #0x10
   3afb0:	mov	w2, #0x169                 	// #361
   3afb4:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3afb8:	add	x1, x1, #0x970
   3afbc:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3afc0:	add	x0, x0, #0x990
   3afc4:	bl	35ac0 <__assert_fail@plt>
   3afc8:	mov	w1, #0x4                   	// #4
   3afcc:	add	x0, x0, #0x20
   3afd0:	bl	35100 <aarch64_operand_index@plt>
   3afd4:	mov	w20, w0
   3afd8:	cmn	w0, #0x1
   3afdc:	b.eq	3b090 <aarch64_opcode_encode@@Base+0x10fc>  // b.none
   3afe0:	cmp	w0, #0x1
   3afe4:	b.hi	3b06c <aarch64_opcode_encode@@Base+0x10d8>  // b.pmore
   3afe8:	ldr	x0, [sp, #112]
   3afec:	add	x0, x0, w20, sxtw #2
   3aff0:	ldr	w0, [x0, #32]
   3aff4:	bl	35710 <aarch64_get_operand_class@plt>
   3aff8:	cmp	w0, #0x1
   3affc:	b.ne	3b098 <aarch64_opcode_encode@@Base+0x1104>  // b.any
   3b000:	sbfiz	x0, x20, #3, #32
   3b004:	sub	x0, x0, w20, sxtw
   3b008:	lsl	x0, x0, #3
   3b00c:	add	x1, sp, #0x84
   3b010:	ldrb	w0, [x1, x0]
   3b014:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3b018:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3b01c:	ldr	x1, [x1, #3944]
   3b020:	ldr	w3, [x1, #92]
   3b024:	sub	w1, w3, #0x1
   3b028:	cmp	w1, #0x1e
   3b02c:	b.hi	3b0bc <aarch64_opcode_encode@@Base+0x1128>  // b.pmore
   3b030:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3b034:	ldr	x1, [x1, #3944]
   3b038:	ldr	w2, [x1, #88]
   3b03c:	tbnz	w2, #31, 3b0bc <aarch64_opcode_encode@@Base+0x1128>
   3b040:	add	w1, w3, w2
   3b044:	cmp	w1, #0x20
   3b048:	b.gt	3b0bc <aarch64_opcode_encode@@Base+0x1128>
   3b04c:	mov	w1, #0xffffffff            	// #-1
   3b050:	lsl	w1, w1, w3
   3b054:	bic	w0, w0, w1
   3b058:	lsl	w0, w0, w2
   3b05c:	ldr	w1, [sp, #104]
   3b060:	orr	w0, w1, w0
   3b064:	str	w0, [sp, #104]
   3b068:	b	3a6e4 <aarch64_opcode_encode@@Base+0x750>
   3b06c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b070:	add	x3, x3, #0x18
   3b074:	add	x3, x3, #0x250
   3b078:	mov	w2, #0x630                 	// #1584
   3b07c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b080:	add	x1, x1, #0x940
   3b084:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b088:	add	x0, x0, #0xec8
   3b08c:	bl	35ac0 <__assert_fail@plt>
   3b090:	mov	w20, #0x0                   	// #0
   3b094:	b	3afe8 <aarch64_opcode_encode@@Base+0x1054>
   3b098:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b09c:	add	x3, x3, #0x18
   3b0a0:	add	x3, x3, #0x250
   3b0a4:	mov	w2, #0x631                 	// #1585
   3b0a8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b0ac:	add	x1, x1, #0x940
   3b0b0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b0b4:	add	x0, x0, #0xee0
   3b0b8:	bl	35ac0 <__assert_fail@plt>
   3b0bc:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b0c0:	add	x3, x3, #0x18
   3b0c4:	add	x3, x3, #0x10
   3b0c8:	mov	w2, #0x169                 	// #361
   3b0cc:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b0d0:	add	x1, x1, #0x970
   3b0d4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b0d8:	add	x0, x0, #0x990
   3b0dc:	bl	35ac0 <__assert_fail@plt>
   3b0e0:	ldr	w0, [x0, #32]
   3b0e4:	bl	35710 <aarch64_get_operand_class@plt>
   3b0e8:	cmp	w0, #0x1
   3b0ec:	b.ne	3b140 <aarch64_opcode_encode@@Base+0x11ac>  // b.any
   3b0f0:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3b0f4:	ldr	x0, [x0, #3944]
   3b0f8:	ldr	w0, [x0, #268]
   3b0fc:	cmp	w0, #0x0
   3b100:	b.le	3bb60 <aarch64_opcode_encode@@Base+0x1bcc>
   3b104:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3b108:	ldr	x0, [x0, #3944]
   3b10c:	ldr	w20, [x0, #264]
   3b110:	ldrb	w0, [sp, #132]
   3b114:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3b118:	mov	w1, #0x1                   	// #1
   3b11c:	sub	w0, w1, w0
   3b120:	cmp	w20, #0x1f
   3b124:	b.hi	3bb68 <aarch64_opcode_encode@@Base+0x1bd4>  // b.pmore
   3b128:	and	w0, w0, #0x1
   3b12c:	lsl	w0, w0, w20
   3b130:	ldr	w1, [sp, #104]
   3b134:	orr	w0, w1, w0
   3b138:	str	w0, [sp, #104]
   3b13c:	b	3a6f0 <aarch64_opcode_encode@@Base+0x75c>
   3b140:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b144:	add	x3, x3, #0x18
   3b148:	add	x3, x3, #0x250
   3b14c:	mov	w2, #0x63c                 	// #1596
   3b150:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b154:	add	x1, x1, #0x940
   3b158:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b15c:	add	x0, x0, #0xf38
   3b160:	bl	35ac0 <__assert_fail@plt>
   3b164:	cmp	w0, #0x3a
   3b168:	b.eq	3b2b4 <aarch64_opcode_encode@@Base+0x1320>  // b.none
   3b16c:	sub	w1, w0, #0x3b
   3b170:	cmp	w1, #0x3
   3b174:	b.hi	3a604 <aarch64_opcode_encode@@Base+0x670>  // b.pmore
   3b178:	cmp	w0, #0x3c
   3b17c:	b.hi	3b2f0 <aarch64_opcode_encode@@Base+0x135c>  // b.pmore
   3b180:	cmp	w0, #0x3a
   3b184:	b.hi	3b304 <aarch64_opcode_encode@@Base+0x1370>  // b.pmore
   3b188:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b18c:	add	x3, x3, #0x18
   3b190:	add	x3, x3, #0x298
   3b194:	mov	w2, #0x52e                 	// #1326
   3b198:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b19c:	add	x1, x1, #0x940
   3b1a0:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3b1a4:	add	x0, x0, #0xb60
   3b1a8:	bl	35ac0 <__assert_fail@plt>
   3b1ac:	cmp	w0, #0x4b
   3b1b0:	b.eq	3b434 <aarch64_opcode_encode@@Base+0x14a0>  // b.none
   3b1b4:	b.ls	3b238 <aarch64_opcode_encode@@Base+0x12a4>  // b.plast
   3b1b8:	cmp	w0, #0x4d
   3b1bc:	b.ls	3b63c <aarch64_opcode_encode@@Base+0x16a8>  // b.plast
   3b1c0:	sub	w0, w0, #0x4e
   3b1c4:	cmp	w0, #0x1
   3b1c8:	b.hi	3a604 <aarch64_opcode_encode@@Base+0x670>  // b.pmore
   3b1cc:	ldr	w5, [sp, #104]
   3b1d0:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3b1d4:	ldr	x0, [x0, #3944]
   3b1d8:	ldr	w2, [x0, #592]
   3b1dc:	lsr	w2, w5, w2
   3b1e0:	ldr	w1, [x0, #596]
   3b1e4:	mov	w3, #0xffffffff            	// #-1
   3b1e8:	lsl	w3, w3, w1
   3b1ec:	ldr	w4, [x0, #612]
   3b1f0:	sub	w0, w4, #0x1
   3b1f4:	cmp	w0, #0x1e
   3b1f8:	b.hi	3b6cc <aarch64_opcode_encode@@Base+0x1738>  // b.pmore
   3b1fc:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3b200:	ldr	x0, [x0, #3944]
   3b204:	ldr	w1, [x0, #608]
   3b208:	tbnz	w1, #31, 3b6cc <aarch64_opcode_encode@@Base+0x1738>
   3b20c:	add	w0, w4, w1
   3b210:	cmp	w0, #0x20
   3b214:	b.gt	3b6cc <aarch64_opcode_encode@@Base+0x1738>
   3b218:	mov	w0, #0xffffffff            	// #-1
   3b21c:	lsl	w0, w0, w4
   3b220:	orr	w0, w0, w3
   3b224:	bic	w0, w2, w0
   3b228:	lsl	w0, w0, w1
   3b22c:	orr	w0, w0, w5
   3b230:	str	w0, [sp, #104]
   3b234:	b	3a604 <aarch64_opcode_encode@@Base+0x670>
   3b238:	cmp	w0, #0x48
   3b23c:	b.eq	3b588 <aarch64_opcode_encode@@Base+0x15f4>  // b.none
   3b240:	cmp	w0, #0x4a
   3b244:	b.ne	3a604 <aarch64_opcode_encode@@Base+0x670>  // b.any
   3b248:	ldr	w5, [sp, #104]
   3b24c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3b250:	ldr	x0, [x0, #3944]
   3b254:	ldr	w2, [x0, #568]
   3b258:	lsr	w2, w5, w2
   3b25c:	ldr	w1, [x0, #572]
   3b260:	mov	w3, #0xffffffff            	// #-1
   3b264:	lsl	w3, w3, w1
   3b268:	ldr	w4, [x0, #612]
   3b26c:	sub	w0, w4, #0x1
   3b270:	cmp	w0, #0x1e
   3b274:	b.hi	3b618 <aarch64_opcode_encode@@Base+0x1684>  // b.pmore
   3b278:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3b27c:	ldr	x0, [x0, #3944]
   3b280:	ldr	w1, [x0, #608]
   3b284:	tbnz	w1, #31, 3b618 <aarch64_opcode_encode@@Base+0x1684>
   3b288:	add	w0, w4, w1
   3b28c:	cmp	w0, #0x20
   3b290:	b.gt	3b618 <aarch64_opcode_encode@@Base+0x1684>
   3b294:	mov	w0, #0xffffffff            	// #-1
   3b298:	lsl	w0, w0, w4
   3b29c:	orr	w0, w0, w3
   3b2a0:	bic	w0, w2, w0
   3b2a4:	lsl	w0, w0, w1
   3b2a8:	orr	w0, w0, w5
   3b2ac:	str	w0, [sp, #104]
   3b2b0:	b	3a604 <aarch64_opcode_encode@@Base+0x670>
   3b2b4:	ldrb	w1, [sp, #132]
   3b2b8:	cmp	w1, #0x7
   3b2bc:	b.eq	3b2dc <aarch64_opcode_encode@@Base+0x1348>  // b.none
   3b2c0:	mov	w0, #0x1                   	// #1
   3b2c4:	cmp	w1, #0x8
   3b2c8:	b.eq	3b2e0 <aarch64_opcode_encode@@Base+0x134c>  // b.none
   3b2cc:	mov	w0, #0x3                   	// #3
   3b2d0:	cmp	w1, #0x6
   3b2d4:	b.eq	3b2e0 <aarch64_opcode_encode@@Base+0x134c>  // b.none
   3b2d8:	bl	35670 <abort@plt>
   3b2dc:	mov	w0, #0x0                   	// #0
   3b2e0:	ldr	w1, [sp, #104]
   3b2e4:	orr	w0, w1, w0, lsl #15
   3b2e8:	str	w0, [sp, #104]
   3b2ec:	b	3a604 <aarch64_opcode_encode@@Base+0x670>
   3b2f0:	sub	w0, w0, #0x3d
   3b2f4:	cmp	w0, #0x1
   3b2f8:	b.hi	3b188 <aarch64_opcode_encode@@Base+0x11f4>  // b.pmore
   3b2fc:	ldrb	w0, [sp, #132]
   3b300:	b	3b308 <aarch64_opcode_encode@@Base+0x1374>
   3b304:	ldrb	w0, [sp, #188]
   3b308:	sub	w1, w0, #0x13
   3b30c:	tst	w1, #0xfffffffd
   3b310:	b.ne	3b358 <aarch64_opcode_encode@@Base+0x13c4>  // b.any
   3b314:	cmp	w0, #0x13
   3b318:	cset	w0, ne  // ne = any
   3b31c:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3b320:	ldr	x1, [x1, #3944]
   3b324:	ldr	w1, [x1, #68]
   3b328:	cmp	w1, #0x0
   3b32c:	b.le	3b37c <aarch64_opcode_encode@@Base+0x13e8>
   3b330:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3b334:	ldr	x1, [x1, #3944]
   3b338:	ldr	w1, [x1, #64]
   3b33c:	cmp	w1, #0x1f
   3b340:	b.hi	3b37c <aarch64_opcode_encode@@Base+0x13e8>  // b.pmore
   3b344:	lsl	w1, w0, w1
   3b348:	ldr	w0, [sp, #104]
   3b34c:	orr	w0, w0, w1
   3b350:	str	w0, [sp, #104]
   3b354:	b	3a604 <aarch64_opcode_encode@@Base+0x670>
   3b358:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b35c:	add	x3, x3, #0x18
   3b360:	add	x3, x3, #0x298
   3b364:	mov	w2, #0x530                 	// #1328
   3b368:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b36c:	add	x1, x1, #0x940
   3b370:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b374:	add	x0, x0, #0xf90
   3b378:	bl	35ac0 <__assert_fail@plt>
   3b37c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b380:	add	x3, x3, #0x18
   3b384:	add	x3, x3, #0x10
   3b388:	mov	w2, #0x169                 	// #361
   3b38c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b390:	add	x1, x1, #0x970
   3b394:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b398:	add	x0, x0, #0x990
   3b39c:	bl	35ac0 <__assert_fail@plt>
   3b3a0:	ldrb	w0, [sp, #132]
   3b3a4:	cmp	w0, #0x7
   3b3a8:	b.ne	3b3ec <aarch64_opcode_encode@@Base+0x1458>  // b.any
   3b3ac:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3b3b0:	ldr	x0, [x0, #3944]
   3b3b4:	ldr	w0, [x0, #68]
   3b3b8:	cmp	w0, #0x0
   3b3bc:	b.le	3b410 <aarch64_opcode_encode@@Base+0x147c>
   3b3c0:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3b3c4:	ldr	x0, [x0, #3944]
   3b3c8:	ldr	w1, [x0, #64]
   3b3cc:	cmp	w1, #0x1f
   3b3d0:	b.hi	3b410 <aarch64_opcode_encode@@Base+0x147c>  // b.pmore
   3b3d4:	mov	w0, #0x1                   	// #1
   3b3d8:	lsl	w1, w0, w1
   3b3dc:	ldr	w0, [sp, #104]
   3b3e0:	orr	w0, w0, w1
   3b3e4:	str	w0, [sp, #104]
   3b3e8:	b	3a604 <aarch64_opcode_encode@@Base+0x670>
   3b3ec:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b3f0:	add	x3, x3, #0x18
   3b3f4:	add	x3, x3, #0x2b0
   3b3f8:	mov	w2, #0x53f                 	// #1343
   3b3fc:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b400:	add	x1, x1, #0x940
   3b404:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b408:	add	x0, x0, #0xfe0
   3b40c:	bl	35ac0 <__assert_fail@plt>
   3b410:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b414:	add	x3, x3, #0x18
   3b418:	add	x3, x3, #0x10
   3b41c:	mov	w2, #0x169                 	// #361
   3b420:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b424:	add	x1, x1, #0x970
   3b428:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b42c:	add	x0, x0, #0x990
   3b430:	bl	35ac0 <__assert_fail@plt>
   3b434:	ldr	w4, [sp, #104]
   3b438:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3b43c:	ldr	x0, [x0, #3944]
   3b440:	ldr	w2, [x0, #620]
   3b444:	mov	w1, #0xffffffff            	// #-1
   3b448:	lsl	w1, w1, w2
   3b44c:	ldr	w2, [x0, #616]
   3b450:	lsr	w2, w4, w2
   3b454:	bic	w2, w2, w1
   3b458:	ldr	w3, [x0, #612]
   3b45c:	sub	w0, w3, #0x1
   3b460:	cmp	w0, #0x1e
   3b464:	b.hi	3b4ec <aarch64_opcode_encode@@Base+0x1558>  // b.pmore
   3b468:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3b46c:	ldr	x0, [x0, #3944]
   3b470:	ldr	w1, [x0, #608]
   3b474:	tbnz	w1, #31, 3b4ec <aarch64_opcode_encode@@Base+0x1558>
   3b478:	add	w0, w3, w1
   3b47c:	cmp	w0, #0x20
   3b480:	b.gt	3b4ec <aarch64_opcode_encode@@Base+0x1558>
   3b484:	mov	w0, #0xffffffff            	// #-1
   3b488:	lsl	w0, w0, w3
   3b48c:	bic	w0, w2, w0
   3b490:	lsl	w0, w0, w1
   3b494:	orr	w0, w0, w4
   3b498:	str	w0, [sp, #104]
   3b49c:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3b4a0:	ldr	x1, [x1, #3944]
   3b4a4:	ldr	w4, [x1, #596]
   3b4a8:	sub	w1, w4, #0x1
   3b4ac:	cmp	w1, #0x1e
   3b4b0:	b.hi	3b510 <aarch64_opcode_encode@@Base+0x157c>  // b.pmore
   3b4b4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3b4b8:	ldr	x1, [x1, #3944]
   3b4bc:	ldr	w3, [x1, #592]
   3b4c0:	tbnz	w3, #31, 3b510 <aarch64_opcode_encode@@Base+0x157c>
   3b4c4:	add	w1, w4, w3
   3b4c8:	cmp	w1, #0x20
   3b4cc:	b.gt	3b510 <aarch64_opcode_encode@@Base+0x157c>
   3b4d0:	mov	w1, #0xffffffff            	// #-1
   3b4d4:	lsl	w1, w1, w4
   3b4d8:	bic	w1, w2, w1
   3b4dc:	lsl	w1, w1, w3
   3b4e0:	orr	w0, w1, w0
   3b4e4:	str	w0, [sp, #104]
   3b4e8:	b	3a604 <aarch64_opcode_encode@@Base+0x670>
   3b4ec:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b4f0:	add	x3, x3, #0x18
   3b4f4:	add	x3, x3, #0x10
   3b4f8:	mov	w2, #0x169                 	// #361
   3b4fc:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b500:	add	x1, x1, #0x970
   3b504:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b508:	add	x0, x0, #0x990
   3b50c:	bl	35ac0 <__assert_fail@plt>
   3b510:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b514:	add	x3, x3, #0x18
   3b518:	add	x3, x3, #0x10
   3b51c:	mov	w2, #0x169                 	// #361
   3b520:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b524:	add	x1, x1, #0x970
   3b528:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b52c:	add	x0, x0, #0x990
   3b530:	bl	35ac0 <__assert_fail@plt>
   3b534:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b538:	add	x3, x3, #0x18
   3b53c:	add	x3, x3, #0x10
   3b540:	mov	w2, #0x169                 	// #361
   3b544:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b548:	add	x1, x1, #0x970
   3b54c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b550:	add	x0, x0, #0x990
   3b554:	bl	35ac0 <__assert_fail@plt>
   3b558:	add	x20, sp, #0x68
   3b55c:	mov	x0, x20
   3b560:	bl	360f0 <init_disassemble_info@@Base+0x98>
   3b564:	mov	w5, #0x74                  	// #116
   3b568:	mov	w4, #0x2b                  	// #43
   3b56c:	mov	w3, #0x2                   	// #2
   3b570:	mov	w2, #0x0                   	// #0
   3b574:	mov	w1, #0x1                   	// #1
   3b578:	lsl	w1, w1, w0
   3b57c:	mov	x0, x20
   3b580:	bl	36190 <init_disassemble_info@@Base+0x138>
   3b584:	b	3a604 <aarch64_opcode_encode@@Base+0x670>
   3b588:	ldr	w5, [sp, #104]
   3b58c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3b590:	ldr	x0, [x0, #3944]
   3b594:	ldr	w2, [x0, #712]
   3b598:	lsr	w2, w5, w2
   3b59c:	ldr	w1, [x0, #716]
   3b5a0:	mov	w3, #0xffffffff            	// #-1
   3b5a4:	lsl	w3, w3, w1
   3b5a8:	ldr	w4, [x0, #708]
   3b5ac:	sub	w0, w4, #0x1
   3b5b0:	cmp	w0, #0x1e
   3b5b4:	b.hi	3b5f4 <aarch64_opcode_encode@@Base+0x1660>  // b.pmore
   3b5b8:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3b5bc:	ldr	x0, [x0, #3944]
   3b5c0:	ldr	w1, [x0, #704]
   3b5c4:	tbnz	w1, #31, 3b5f4 <aarch64_opcode_encode@@Base+0x1660>
   3b5c8:	add	w0, w4, w1
   3b5cc:	cmp	w0, #0x20
   3b5d0:	b.gt	3b5f4 <aarch64_opcode_encode@@Base+0x1660>
   3b5d4:	mov	w0, #0xffffffff            	// #-1
   3b5d8:	lsl	w0, w0, w4
   3b5dc:	orr	w0, w0, w3
   3b5e0:	bic	w0, w2, w0
   3b5e4:	lsl	w0, w0, w1
   3b5e8:	orr	w0, w0, w5
   3b5ec:	str	w0, [sp, #104]
   3b5f0:	b	3a604 <aarch64_opcode_encode@@Base+0x670>
   3b5f4:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b5f8:	add	x3, x3, #0x18
   3b5fc:	add	x3, x3, #0x10
   3b600:	mov	w2, #0x169                 	// #361
   3b604:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b608:	add	x1, x1, #0x970
   3b60c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b610:	add	x0, x0, #0x990
   3b614:	bl	35ac0 <__assert_fail@plt>
   3b618:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b61c:	add	x3, x3, #0x18
   3b620:	add	x3, x3, #0x10
   3b624:	mov	w2, #0x169                 	// #361
   3b628:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b62c:	add	x1, x1, #0x970
   3b630:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b634:	add	x0, x0, #0x990
   3b638:	bl	35ac0 <__assert_fail@plt>
   3b63c:	ldr	w5, [sp, #104]
   3b640:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3b644:	ldr	x0, [x0, #3944]
   3b648:	ldr	w2, [x0, #616]
   3b64c:	lsr	w2, w5, w2
   3b650:	ldr	w1, [x0, #620]
   3b654:	mov	w3, #0xffffffff            	// #-1
   3b658:	lsl	w3, w3, w1
   3b65c:	ldr	w4, [x0, #612]
   3b660:	sub	w0, w4, #0x1
   3b664:	cmp	w0, #0x1e
   3b668:	b.hi	3b6a8 <aarch64_opcode_encode@@Base+0x1714>  // b.pmore
   3b66c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3b670:	ldr	x0, [x0, #3944]
   3b674:	ldr	w1, [x0, #608]
   3b678:	tbnz	w1, #31, 3b6a8 <aarch64_opcode_encode@@Base+0x1714>
   3b67c:	add	w0, w4, w1
   3b680:	cmp	w0, #0x20
   3b684:	b.gt	3b6a8 <aarch64_opcode_encode@@Base+0x1714>
   3b688:	mov	w0, #0xffffffff            	// #-1
   3b68c:	lsl	w0, w0, w4
   3b690:	orr	w0, w0, w3
   3b694:	bic	w0, w2, w0
   3b698:	lsl	w0, w0, w1
   3b69c:	orr	w0, w0, w5
   3b6a0:	str	w0, [sp, #104]
   3b6a4:	b	3a604 <aarch64_opcode_encode@@Base+0x670>
   3b6a8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b6ac:	add	x3, x3, #0x18
   3b6b0:	add	x3, x3, #0x10
   3b6b4:	mov	w2, #0x169                 	// #361
   3b6b8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b6bc:	add	x1, x1, #0x970
   3b6c0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b6c4:	add	x0, x0, #0x990
   3b6c8:	bl	35ac0 <__assert_fail@plt>
   3b6cc:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b6d0:	add	x3, x3, #0x18
   3b6d4:	add	x3, x3, #0x10
   3b6d8:	mov	w2, #0x169                 	// #361
   3b6dc:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b6e0:	add	x1, x1, #0x970
   3b6e4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b6e8:	add	x0, x0, #0x990
   3b6ec:	bl	35ac0 <__assert_fail@plt>
   3b6f0:	cmp	w0, #0x47
   3b6f4:	b.eq	3b85c <aarch64_opcode_encode@@Base+0x18c8>  // b.none
   3b6f8:	cmp	w0, #0x4b
   3b6fc:	b.ne	3b734 <aarch64_opcode_encode@@Base+0x17a0>  // b.any
   3b700:	add	x20, sp, #0x68
   3b704:	mov	x0, x20
   3b708:	bl	360f0 <init_disassemble_info@@Base+0x98>
   3b70c:	mov	w5, #0x8                   	// #8
   3b710:	mov	w4, #0x45                  	// #69
   3b714:	mov	w3, #0x2                   	// #2
   3b718:	mov	w2, #0x0                   	// #0
   3b71c:	mov	w1, w0
   3b720:	mov	x0, x20
   3b724:	bl	36190 <init_disassemble_info@@Base+0x138>
   3b728:	b	3b734 <aarch64_opcode_encode@@Base+0x17a0>
   3b72c:	cmp	w0, #0x4e
   3b730:	b.hi	3b908 <aarch64_opcode_encode@@Base+0x1974>  // b.pmore
   3b734:	ldr	x6, [x19, #136]
   3b738:	cbz	x6, 3b768 <aarch64_opcode_encode@@Base+0x17d4>
   3b73c:	mov	x5, x24
   3b740:	mov	x4, x22
   3b744:	mov	w3, #0x1                   	// #1
   3b748:	mov	x2, #0x0                   	// #0
   3b74c:	ldr	w1, [x23]
   3b750:	add	x0, sp, #0x68
   3b754:	blr	x6
   3b758:	sub	w1, w0, #0x1
   3b75c:	mov	w0, #0x0                   	// #0
   3b760:	cmp	w1, #0x2
   3b764:	b.ls	3bb8c <aarch64_opcode_encode@@Base+0x1bf8>  // b.plast
   3b768:	mov	x5, x24
   3b76c:	mov	x4, x22
   3b770:	mov	w3, #0x1                   	// #1
   3b774:	mov	x2, #0x0                   	// #0
   3b778:	ldr	w1, [x23]
   3b77c:	add	x0, sp, #0x68
   3b780:	bl	35250 <verify_constraints@plt>
   3b784:	sub	w1, w0, #0x1
   3b788:	mov	w0, #0x0                   	// #0
   3b78c:	cmp	w1, #0x2
   3b790:	b.ls	3bb98 <aarch64_opcode_encode@@Base+0x1c04>  // b.plast
   3b794:	ldp	x25, x26, [sp, #64]
   3b798:	ldp	x27, x28, [sp, #80]
   3b79c:	ldr	w0, [sp, #104]
   3b7a0:	str	w0, [x23]
   3b7a4:	mov	w0, #0x1                   	// #1
   3b7a8:	b	39fec <aarch64_opcode_encode@@Base+0x58>
   3b7ac:	cmp	w0, #0x56
   3b7b0:	b.eq	3bad4 <aarch64_opcode_encode@@Base+0x1b40>  // b.none
   3b7b4:	b.ls	3b7f0 <aarch64_opcode_encode@@Base+0x185c>  // b.plast
   3b7b8:	cmp	w0, #0x59
   3b7bc:	b.ne	3b734 <aarch64_opcode_encode@@Base+0x17a0>  // b.any
   3b7c0:	add	x20, sp, #0x68
   3b7c4:	mov	x0, x20
   3b7c8:	bl	360f0 <init_disassemble_info@@Base+0x98>
   3b7cc:	mov	w5, #0x70                  	// #112
   3b7d0:	mov	w4, #0x76                  	// #118
   3b7d4:	mov	w3, #0x2                   	// #2
   3b7d8:	mov	w2, #0x0                   	// #0
   3b7dc:	mov	w1, #0x1                   	// #1
   3b7e0:	lsl	w1, w1, w0
   3b7e4:	mov	x0, x20
   3b7e8:	bl	36190 <init_disassemble_info@@Base+0x138>
   3b7ec:	b	3b734 <aarch64_opcode_encode@@Base+0x17a0>
   3b7f0:	cmp	w0, #0x54
   3b7f4:	b.ls	3b9ac <aarch64_opcode_encode@@Base+0x1a18>  // b.plast
   3b7f8:	cmp	w0, #0x55
   3b7fc:	b.ne	3b734 <aarch64_opcode_encode@@Base+0x17a0>  // b.any
   3b800:	add	x0, sp, #0x68
   3b804:	bl	360f0 <init_disassemble_info@@Base+0x98>
   3b808:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3b80c:	ldr	x1, [x1, #3944]
   3b810:	ldr	w3, [x1, #916]
   3b814:	sub	w1, w3, #0x1
   3b818:	cmp	w1, #0x1e
   3b81c:	b.hi	3ba2c <aarch64_opcode_encode@@Base+0x1a98>  // b.pmore
   3b820:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3b824:	ldr	x1, [x1, #3944]
   3b828:	ldr	w2, [x1, #912]
   3b82c:	tbnz	w2, #31, 3ba2c <aarch64_opcode_encode@@Base+0x1a98>
   3b830:	add	w1, w3, w2
   3b834:	cmp	w1, #0x20
   3b838:	b.gt	3ba2c <aarch64_opcode_encode@@Base+0x1a98>
   3b83c:	mov	w1, #0xffffffff            	// #-1
   3b840:	lsl	w1, w1, w3
   3b844:	bic	w0, w0, w1
   3b848:	lsl	w0, w0, w2
   3b84c:	ldr	w1, [sp, #104]
   3b850:	orr	w0, w1, w0
   3b854:	str	w0, [sp, #104]
   3b858:	b	3b734 <aarch64_opcode_encode@@Base+0x17a0>
   3b85c:	add	x20, sp, #0x68
   3b860:	mov	x0, x20
   3b864:	bl	360f0 <init_disassemble_info@@Base+0x98>
   3b868:	mov	w5, #0x8                   	// #8
   3b86c:	mov	w4, #0x44                  	// #68
   3b870:	mov	w3, #0x2                   	// #2
   3b874:	mov	w2, #0x0                   	// #0
   3b878:	mov	w1, w0
   3b87c:	mov	x0, x20
   3b880:	bl	36190 <init_disassemble_info@@Base+0x138>
   3b884:	b	3b734 <aarch64_opcode_encode@@Base+0x17a0>
   3b888:	add	x0, sp, #0x68
   3b88c:	bl	360f0 <init_disassemble_info@@Base+0x98>
   3b890:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3b894:	ldr	x1, [x1, #3944]
   3b898:	ldr	w3, [x1, #540]
   3b89c:	sub	w1, w3, #0x1
   3b8a0:	cmp	w1, #0x1e
   3b8a4:	b.hi	3b8e4 <aarch64_opcode_encode@@Base+0x1950>  // b.pmore
   3b8a8:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3b8ac:	ldr	x1, [x1, #3944]
   3b8b0:	ldr	w2, [x1, #536]
   3b8b4:	tbnz	w2, #31, 3b8e4 <aarch64_opcode_encode@@Base+0x1950>
   3b8b8:	add	w1, w3, w2
   3b8bc:	cmp	w1, #0x20
   3b8c0:	b.gt	3b8e4 <aarch64_opcode_encode@@Base+0x1950>
   3b8c4:	mov	w1, #0xffffffff            	// #-1
   3b8c8:	lsl	w1, w1, w3
   3b8cc:	bic	w0, w0, w1
   3b8d0:	lsl	w0, w0, w2
   3b8d4:	ldr	w1, [sp, #104]
   3b8d8:	orr	w0, w1, w0
   3b8dc:	str	w0, [sp, #104]
   3b8e0:	b	3b734 <aarch64_opcode_encode@@Base+0x17a0>
   3b8e4:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b8e8:	add	x3, x3, #0x18
   3b8ec:	add	x3, x3, #0x10
   3b8f0:	mov	w2, #0x169                 	// #361
   3b8f4:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b8f8:	add	x1, x1, #0x970
   3b8fc:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b900:	add	x0, x0, #0x990
   3b904:	bl	35ac0 <__assert_fail@plt>
   3b908:	add	x0, sp, #0x68
   3b90c:	bl	360f0 <init_disassemble_info@@Base+0x98>
   3b910:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3b914:	ldr	x1, [x1, #3944]
   3b918:	ldr	w3, [x1, #68]
   3b91c:	sub	w1, w3, #0x1
   3b920:	cmp	w1, #0x1e
   3b924:	b.hi	3b964 <aarch64_opcode_encode@@Base+0x19d0>  // b.pmore
   3b928:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3b92c:	ldr	x1, [x1, #3944]
   3b930:	ldr	w2, [x1, #64]
   3b934:	tbnz	w2, #31, 3b964 <aarch64_opcode_encode@@Base+0x19d0>
   3b938:	add	w1, w3, w2
   3b93c:	cmp	w1, #0x20
   3b940:	b.gt	3b964 <aarch64_opcode_encode@@Base+0x19d0>
   3b944:	mov	w1, #0xffffffff            	// #-1
   3b948:	lsl	w1, w1, w3
   3b94c:	bic	w0, w0, w1
   3b950:	lsl	w0, w0, w2
   3b954:	ldr	w1, [sp, #104]
   3b958:	orr	w0, w1, w0
   3b95c:	str	w0, [sp, #104]
   3b960:	b	3b734 <aarch64_opcode_encode@@Base+0x17a0>
   3b964:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b968:	add	x3, x3, #0x18
   3b96c:	add	x3, x3, #0x10
   3b970:	mov	w2, #0x169                 	// #361
   3b974:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b978:	add	x1, x1, #0x970
   3b97c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b980:	add	x0, x0, #0x990
   3b984:	bl	35ac0 <__assert_fail@plt>
   3b988:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3b98c:	add	x3, x3, #0x18
   3b990:	add	x3, x3, #0x10
   3b994:	mov	w2, #0x169                 	// #361
   3b998:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b99c:	add	x1, x1, #0x970
   3b9a0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3b9a4:	add	x0, x0, #0x990
   3b9a8:	bl	35ac0 <__assert_fail@plt>
   3b9ac:	add	x0, sp, #0x68
   3b9b0:	bl	360f0 <init_disassemble_info@@Base+0x98>
   3b9b4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3b9b8:	ldr	x1, [x1, #3944]
   3b9bc:	ldr	w3, [x1, #900]
   3b9c0:	sub	w1, w3, #0x1
   3b9c4:	cmp	w1, #0x1e
   3b9c8:	b.hi	3ba08 <aarch64_opcode_encode@@Base+0x1a74>  // b.pmore
   3b9cc:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3b9d0:	ldr	x1, [x1, #3944]
   3b9d4:	ldr	w2, [x1, #896]
   3b9d8:	tbnz	w2, #31, 3ba08 <aarch64_opcode_encode@@Base+0x1a74>
   3b9dc:	add	w1, w3, w2
   3b9e0:	cmp	w1, #0x20
   3b9e4:	b.gt	3ba08 <aarch64_opcode_encode@@Base+0x1a74>
   3b9e8:	mov	w1, #0xffffffff            	// #-1
   3b9ec:	lsl	w1, w1, w3
   3b9f0:	bic	w0, w0, w1
   3b9f4:	lsl	w0, w0, w2
   3b9f8:	ldr	w1, [sp, #104]
   3b9fc:	orr	w0, w1, w0
   3ba00:	str	w0, [sp, #104]
   3ba04:	b	3b734 <aarch64_opcode_encode@@Base+0x17a0>
   3ba08:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3ba0c:	add	x3, x3, #0x18
   3ba10:	add	x3, x3, #0x10
   3ba14:	mov	w2, #0x169                 	// #361
   3ba18:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ba1c:	add	x1, x1, #0x970
   3ba20:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ba24:	add	x0, x0, #0x990
   3ba28:	bl	35ac0 <__assert_fail@plt>
   3ba2c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3ba30:	add	x3, x3, #0x18
   3ba34:	add	x3, x3, #0x10
   3ba38:	mov	w2, #0x169                 	// #361
   3ba3c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ba40:	add	x1, x1, #0x970
   3ba44:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ba48:	add	x0, x0, #0x990
   3ba4c:	bl	35ac0 <__assert_fail@plt>
   3ba50:	add	x0, sp, #0x68
   3ba54:	bl	360f0 <init_disassemble_info@@Base+0x98>
   3ba58:	add	w2, w0, #0x1
   3ba5c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3ba60:	ldr	x0, [x0, #3944]
   3ba64:	ldr	w3, [x0, #908]
   3ba68:	sub	w0, w3, #0x1
   3ba6c:	cmp	w0, #0x1e
   3ba70:	b.hi	3bab0 <aarch64_opcode_encode@@Base+0x1b1c>  // b.pmore
   3ba74:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3ba78:	ldr	x0, [x0, #3944]
   3ba7c:	ldr	w1, [x0, #904]
   3ba80:	tbnz	w1, #31, 3bab0 <aarch64_opcode_encode@@Base+0x1b1c>
   3ba84:	add	w0, w3, w1
   3ba88:	cmp	w0, #0x20
   3ba8c:	b.gt	3bab0 <aarch64_opcode_encode@@Base+0x1b1c>
   3ba90:	mov	w0, #0xffffffff            	// #-1
   3ba94:	lsl	w0, w0, w3
   3ba98:	bic	w0, w2, w0
   3ba9c:	lsl	w0, w0, w1
   3baa0:	ldr	w1, [sp, #104]
   3baa4:	orr	w0, w1, w0
   3baa8:	str	w0, [sp, #104]
   3baac:	b	3b734 <aarch64_opcode_encode@@Base+0x17a0>
   3bab0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3bab4:	add	x3, x3, #0x18
   3bab8:	add	x3, x3, #0x10
   3babc:	mov	w2, #0x169                 	// #361
   3bac0:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3bac4:	add	x1, x1, #0x970
   3bac8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3bacc:	add	x0, x0, #0x990
   3bad0:	bl	35ac0 <__assert_fail@plt>
   3bad4:	add	x0, sp, #0x68
   3bad8:	bl	360f0 <init_disassemble_info@@Base+0x98>
   3badc:	cmp	w0, #0x1
   3bae0:	mov	w1, #0x3                   	// #3
   3bae4:	csinc	w1, w1, w0, eq  // eq = none
   3bae8:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3baec:	ldr	x0, [x0, #3944]
   3baf0:	ldr	w3, [x0, #68]
   3baf4:	sub	w0, w3, #0x1
   3baf8:	cmp	w0, #0x1e
   3bafc:	b.hi	3bb3c <aarch64_opcode_encode@@Base+0x1ba8>  // b.pmore
   3bb00:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3bb04:	ldr	x0, [x0, #3944]
   3bb08:	ldr	w2, [x0, #64]
   3bb0c:	tbnz	w2, #31, 3bb3c <aarch64_opcode_encode@@Base+0x1ba8>
   3bb10:	add	w0, w3, w2
   3bb14:	cmp	w0, #0x20
   3bb18:	b.gt	3bb3c <aarch64_opcode_encode@@Base+0x1ba8>
   3bb1c:	mov	w0, #0xffffffff            	// #-1
   3bb20:	lsl	w0, w0, w3
   3bb24:	bic	w0, w1, w0
   3bb28:	lsl	w0, w0, w2
   3bb2c:	ldr	w1, [sp, #104]
   3bb30:	orr	w0, w1, w0
   3bb34:	str	w0, [sp, #104]
   3bb38:	b	3b734 <aarch64_opcode_encode@@Base+0x17a0>
   3bb3c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3bb40:	add	x3, x3, #0x18
   3bb44:	add	x3, x3, #0x10
   3bb48:	mov	w2, #0x169                 	// #361
   3bb4c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3bb50:	add	x1, x1, #0x970
   3bb54:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3bb58:	add	x0, x0, #0x990
   3bb5c:	bl	35ac0 <__assert_fail@plt>
   3bb60:	ldrb	w0, [sp, #132]
   3bb64:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3bb68:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3bb6c:	add	x3, x3, #0x18
   3bb70:	add	x3, x3, #0x10
   3bb74:	mov	w2, #0x169                 	// #361
   3bb78:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3bb7c:	add	x1, x1, #0x970
   3bb80:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3bb84:	add	x0, x0, #0x990
   3bb88:	bl	35ac0 <__assert_fail@plt>
   3bb8c:	ldp	x25, x26, [sp, #64]
   3bb90:	ldp	x27, x28, [sp, #80]
   3bb94:	b	39fec <aarch64_opcode_encode@@Base+0x58>
   3bb98:	ldp	x25, x26, [sp, #64]
   3bb9c:	ldp	x27, x28, [sp, #80]
   3bba0:	b	39fec <aarch64_opcode_encode@@Base+0x58>
   3bba4:	add	x4, x0, #0x14
   3bba8:	add	x6, x0, #0x24
   3bbac:	mov	w0, #0x0                   	// #0
   3bbb0:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   3bbb4:	ldr	x5, [x5, #3944]
   3bbb8:	mov	w7, #0xffffffff            	// #-1
   3bbbc:	ldr	w3, [x4]
   3bbc0:	cbz	w3, 3bbf4 <aarch64_opcode_encode@@Base+0x1c60>
   3bbc4:	ubfiz	x3, x3, #3, #32
   3bbc8:	add	x2, x5, x3
   3bbcc:	ldr	w2, [x2, #4]
   3bbd0:	lsl	w0, w0, w2
   3bbd4:	ldr	w3, [x5, x3]
   3bbd8:	lsr	w3, w1, w3
   3bbdc:	lsl	w2, w7, w2
   3bbe0:	bic	w2, w3, w2
   3bbe4:	orr	w0, w2, w0
   3bbe8:	add	x4, x4, #0x4
   3bbec:	cmp	x4, x6
   3bbf0:	b.ne	3bbbc <aarch64_opcode_encode@@Base+0x1c28>  // b.any
   3bbf4:	ret
   3bbf8:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   3bbfc:	ldr	x6, [x6, #3944]
   3bc00:	ldr	w5, [x0, #20]
   3bc04:	lsl	x5, x5, #3
   3bc08:	add	x4, x6, x5
   3bc0c:	ldr	w7, [x4, #4]
   3bc10:	mov	w4, #0xffffffff            	// #-1
   3bc14:	lsl	w4, w4, w7
   3bc18:	ldr	w5, [x6, x5]
   3bc1c:	lsr	w2, w2, w5
   3bc20:	bic	w4, w2, w4
   3bc24:	str	w4, [x1, #16]
   3bc28:	ldr	w2, [x0, #16]
   3bc2c:	ubfx	x2, x2, #5, #3
   3bc30:	madd	w2, w2, w3, w3
   3bc34:	str	w2, [x1, #20]
   3bc38:	str	wzr, [x1, #24]
   3bc3c:	ldrb	w0, [x1, #28]
   3bc40:	and	w0, w0, #0xfffffffd
   3bc44:	orr	w0, w0, #0x4
   3bc48:	strb	w0, [x1, #28]
   3bc4c:	cbz	x3, 3bc58 <aarch64_opcode_encode@@Base+0x1cc4>
   3bc50:	mov	w0, #0xf                   	// #15
   3bc54:	str	w0, [x1, #32]
   3bc58:	mov	x0, #0x1                   	// #1
   3bc5c:	str	x0, [x1, #40]
   3bc60:	cmp	w2, #0x0
   3bc64:	cset	w3, ne  // ne = any
   3bc68:	ldrb	w2, [x1, #36]
   3bc6c:	bfxil	w2, w3, #0, #1
   3bc70:	and	w2, w2, #0xfffffffd
   3bc74:	strb	w2, [x1, #36]
   3bc78:	ret
   3bc7c:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   3bc80:	ldr	x6, [x6, #3944]
   3bc84:	ldr	w5, [x0, #20]
   3bc88:	lsl	x5, x5, #3
   3bc8c:	add	x4, x6, x5
   3bc90:	ldr	w7, [x4, #4]
   3bc94:	mov	w4, #0xffffffff            	// #-1
   3bc98:	lsl	w4, w4, w7
   3bc9c:	ldr	w5, [x6, x5]
   3bca0:	lsr	w2, w2, w5
   3bca4:	bic	w4, w2, w4
   3bca8:	str	w4, [x1, #16]
   3bcac:	ldr	w0, [x0, #16]
   3bcb0:	ubfx	x0, x0, #5, #3
   3bcb4:	lsl	w3, w3, w0
   3bcb8:	str	w3, [x1, #20]
   3bcbc:	str	wzr, [x1, #24]
   3bcc0:	ldrb	w0, [x1, #28]
   3bcc4:	and	w0, w0, #0xfffffffd
   3bcc8:	orr	w0, w0, #0x4
   3bccc:	strb	w0, [x1, #28]
   3bcd0:	ldrb	w0, [x1, #36]
   3bcd4:	and	w0, w0, #0xfffffffc
   3bcd8:	strb	w0, [x1, #36]
   3bcdc:	mov	w0, #0x1                   	// #1
   3bce0:	ret
   3bce4:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   3bce8:	ldr	x5, [x5, #3944]
   3bcec:	ldr	w7, [x0, #20]
   3bcf0:	lsl	x7, x7, #3
   3bcf4:	add	x4, x5, x7
   3bcf8:	ldr	w6, [x4, #4]
   3bcfc:	mov	w4, #0xffffffff            	// #-1
   3bd00:	lsl	w6, w4, w6
   3bd04:	ldr	w7, [x5, x7]
   3bd08:	lsr	w7, w2, w7
   3bd0c:	bic	w6, w7, w6
   3bd10:	str	w6, [x1, #16]
   3bd14:	ldr	w6, [x0, #24]
   3bd18:	lsl	x6, x6, #3
   3bd1c:	add	x0, x5, x6
   3bd20:	ldr	w0, [x0, #4]
   3bd24:	lsl	w0, w4, w0
   3bd28:	ldr	w6, [x5, x6]
   3bd2c:	lsr	w6, w2, w6
   3bd30:	bic	w0, w6, w0
   3bd34:	str	w0, [x1, #20]
   3bd38:	mov	w0, #0x1                   	// #1
   3bd3c:	str	w0, [x1, #24]
   3bd40:	ldrb	w6, [x1, #28]
   3bd44:	and	w6, w6, #0xfffffffd
   3bd48:	orr	w6, w6, #0x4
   3bd4c:	strb	w6, [x1, #28]
   3bd50:	str	w3, [x1, #32]
   3bd54:	ldr	w6, [x5, #852]
   3bd58:	lsl	w4, w4, w6
   3bd5c:	ldr	w5, [x5, #848]
   3bd60:	lsr	w2, w2, w5
   3bd64:	bic	w4, w2, w4
   3bd68:	str	x4, [x1, #40]
   3bd6c:	cmp	x4, #0x0
   3bd70:	cset	w4, ne  // ne = any
   3bd74:	cmp	w4, #0x0
   3bd78:	ccmp	w3, #0x5, #0x0, eq  // eq = none
   3bd7c:	cset	w3, ne  // ne = any
   3bd80:	ldrb	w2, [x1, #36]
   3bd84:	bfxil	w2, w3, #0, #1
   3bd88:	bfi	w2, w4, #1, #1
   3bd8c:	strb	w2, [x1, #36]
   3bd90:	ret
   3bd94:	mov	x3, x0
   3bd98:	ldr	x4, [x0, #48]
   3bd9c:	cbz	x4, 3bdbc <aarch64_opcode_encode@@Base+0x1e28>
   3bda0:	ldr	x0, [x0, #72]
   3bda4:	ldr	x0, [x0, w1, sxtw #3]
   3bda8:	ldr	x5, [x0, #32]
   3bdac:	mov	w0, #0x0                   	// #0
   3bdb0:	cmp	x4, x5
   3bdb4:	b.eq	3bdbc <aarch64_opcode_encode@@Base+0x1e28>  // b.none
   3bdb8:	ret
   3bdbc:	ldr	x0, [x3, #72]
   3bdc0:	ldr	x1, [x0, w1, sxtw #3]
   3bdc4:	ldrb	w0, [x1, #72]
   3bdc8:	and	w0, w0, #0xf
   3bdcc:	cmp	w0, #0x2
   3bdd0:	b.eq	3be20 <aarch64_opcode_encode@@Base+0x1e8c>  // b.none
   3bdd4:	ldr	x1, [x1, #8]
   3bdd8:	ldrb	w3, [x1]
   3bddc:	mov	w0, #0x0                   	// #0
   3bde0:	cmp	w3, #0x24
   3bde4:	b.ne	3bdb8 <aarch64_opcode_encode@@Base+0x1e24>  // b.any
   3bde8:	ldrb	w3, [x1, #1]
   3bdec:	cmp	w3, #0x78
   3bdf0:	mov	w4, #0x64                  	// #100
   3bdf4:	ccmp	w3, w4, #0x4, ne  // ne = any
   3bdf8:	b.ne	3bdb8 <aarch64_opcode_encode@@Base+0x1e24>  // b.any
   3bdfc:	ldrb	w1, [x1, #2]
   3be00:	cmp	w1, #0x2e
   3be04:	ccmp	w1, #0x0, #0x4, ne  // ne = any
   3be08:	b.ne	3bdb8 <aarch64_opcode_encode@@Base+0x1e24>  // b.any
   3be0c:	cmp	w3, #0x78
   3be10:	cset	w0, ne  // ne = any
   3be14:	str	w0, [x2]
   3be18:	mov	w0, #0x1                   	// #1
   3be1c:	b	3bdb8 <aarch64_opcode_encode@@Base+0x1e24>
   3be20:	str	wzr, [x2]
   3be24:	mov	w0, #0x1                   	// #1
   3be28:	b	3bdb8 <aarch64_opcode_encode@@Base+0x1e24>
   3be2c:	stp	x29, x30, [sp, #-64]!
   3be30:	mov	x29, sp
   3be34:	stp	x19, x20, [sp, #16]
   3be38:	stp	x21, x22, [sp, #32]
   3be3c:	str	x23, [sp, #48]
   3be40:	mov	w22, w0
   3be44:	mov	w21, w2
   3be48:	mov	x19, x1
   3be4c:	add	x20, x1, #0x28
   3be50:	ldr	w0, [x19]
   3be54:	cbz	w0, 3be78 <aarch64_opcode_encode@@Base+0x1ee4>
   3be58:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3be5c:	eor	w0, w0, w22
   3be60:	tst	w0, w21
   3be64:	b.eq	3be8c <aarch64_opcode_encode@@Base+0x1ef8>  // b.none
   3be68:	add	x19, x19, #0x4
   3be6c:	cmp	x19, x20
   3be70:	b.ne	3be50 <aarch64_opcode_encode@@Base+0x1ebc>  // b.any
   3be74:	mov	w0, #0x0                   	// #0
   3be78:	ldp	x19, x20, [sp, #16]
   3be7c:	ldp	x21, x22, [sp, #32]
   3be80:	ldr	x23, [sp, #48]
   3be84:	ldp	x29, x30, [sp], #64
   3be88:	ret
   3be8c:	ldr	w0, [x19]
   3be90:	b	3be78 <aarch64_opcode_encode@@Base+0x1ee4>
   3be94:	stp	x29, x30, [sp, #-48]!
   3be98:	mov	x29, sp
   3be9c:	stp	x19, x20, [sp, #16]
   3bea0:	mov	w19, w1
   3bea4:	sbfiz	x1, x1, #3, #32
   3bea8:	sub	x1, x1, w19, sxtw
   3beac:	add	x1, x0, x1, lsl #3
   3beb0:	ldrb	w20, [x1, #28]
   3beb4:	cbnz	w20, 3bee8 <aarch64_opcode_encode@@Base+0x1f54>
   3beb8:	ldr	x1, [x0, #8]
   3bebc:	add	x3, sp, #0x28
   3bec0:	mov	w2, w19
   3bec4:	add	x1, x1, #0x38
   3bec8:	bl	35360 <aarch64_find_best_match@plt>
   3becc:	cbz	w0, 3bed8 <aarch64_opcode_encode@@Base+0x1f44>
   3bed0:	add	x0, sp, #0x28
   3bed4:	ldrb	w20, [x0, w19, sxtw]
   3bed8:	mov	w0, w20
   3bedc:	ldp	x19, x20, [sp, #16]
   3bee0:	ldp	x29, x30, [sp], #48
   3bee4:	ret
   3bee8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3beec:	add	x3, x3, #0xa48
   3bef0:	mov	w2, #0xf4                  	// #244
   3bef4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3bef8:	add	x1, x1, #0x2e0
   3befc:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3bf00:	add	x0, x0, #0x300
   3bf04:	bl	35ac0 <__assert_fail@plt>
   3bf08:	stp	x29, x30, [sp, #-16]!
   3bf0c:	mov	x29, sp
   3bf10:	mov	x0, x2
   3bf14:	ldr	w2, [x2, #172]
   3bf18:	cmp	w2, #0x2
   3bf1c:	b.eq	3bf6c <aarch64_opcode_encode@@Base+0x1fd8>  // b.none
   3bf20:	cmp	w2, #0x4
   3bf24:	b.ne	3bf44 <aarch64_opcode_encode@@Base+0x1fb0>  // b.any
   3bf28:	ldr	x3, [x0]
   3bf2c:	mov	w2, w1
   3bf30:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3bf34:	add	x1, x1, #0x358
   3bf38:	ldr	x0, [x0, #8]
   3bf3c:	blr	x3
   3bf40:	b	3bf64 <aarch64_opcode_encode@@Base+0x1fd0>
   3bf44:	cmp	w2, #0x1
   3bf48:	b.ne	3bf88 <aarch64_opcode_encode@@Base+0x1ff4>  // b.any
   3bf4c:	ldr	x3, [x0]
   3bf50:	mov	w2, w1
   3bf54:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3bf58:	add	x1, x1, #0x338
   3bf5c:	ldr	x0, [x0, #8]
   3bf60:	blr	x3
   3bf64:	ldp	x29, x30, [sp], #16
   3bf68:	ret
   3bf6c:	ldr	x3, [x0]
   3bf70:	mov	w2, w1
   3bf74:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3bf78:	add	x1, x1, #0x348
   3bf7c:	ldr	x0, [x0, #8]
   3bf80:	blr	x3
   3bf84:	b	3bf64 <aarch64_opcode_encode@@Base+0x1fd0>
   3bf88:	bl	35670 <abort@plt>
   3bf8c:	stp	x29, x30, [sp, #-48]!
   3bf90:	mov	x29, sp
   3bf94:	stp	x19, x20, [sp, #16]
   3bf98:	str	x21, [sp, #32]
   3bf9c:	mov	x20, x0
   3bfa0:	mov	x19, x1
   3bfa4:	ldr	x0, [x1, #8]
   3bfa8:	ldr	x21, [x0]
   3bfac:	mov	w1, #0x2e                  	// #46
   3bfb0:	mov	x0, x21
   3bfb4:	bl	35840 <strchr@plt>
   3bfb8:	cbz	x0, 3bff4 <aarch64_opcode_encode@@Base+0x2060>
   3bfbc:	ldr	x1, [x19, #16]
   3bfc0:	cbz	x1, 3bff4 <aarch64_opcode_encode@@Base+0x2060>
   3bfc4:	sub	x19, x0, x21
   3bfc8:	cmp	x19, #0x7
   3bfcc:	b.hi	3c018 <aarch64_opcode_encode@@Base+0x2084>  // b.pmore
   3bfd0:	mov	x2, x19
   3bfd4:	mov	x1, x21
   3bfd8:	mov	x0, x20
   3bfdc:	bl	35a80 <strncpy@plt>
   3bfe0:	strb	wzr, [x20, x19]
   3bfe4:	ldp	x19, x20, [sp, #16]
   3bfe8:	ldr	x21, [sp, #32]
   3bfec:	ldp	x29, x30, [sp], #48
   3bff0:	ret
   3bff4:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3bff8:	add	x3, x3, #0xa48
   3bffc:	add	x3, x3, #0x18
   3c000:	mov	w2, #0xc19                 	// #3097
   3c004:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3c008:	add	x1, x1, #0x2e0
   3c00c:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3c010:	add	x0, x0, #0x368
   3c014:	bl	35ac0 <__assert_fail@plt>
   3c018:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3c01c:	add	x3, x3, #0xa48
   3c020:	add	x3, x3, #0x18
   3c024:	mov	w2, #0xc1b                 	// #3099
   3c028:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3c02c:	add	x1, x1, #0x2e0
   3c030:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3c034:	add	x0, x0, #0x380
   3c038:	bl	35ac0 <__assert_fail@plt>

000000000003c03c <extract_fields@@Base>:
   3c03c:	stp	x29, x30, [sp, #-96]!
   3c040:	mov	x29, sp
   3c044:	mov	w8, w0
   3c048:	str	x2, [sp, #48]
   3c04c:	str	x3, [sp, #56]
   3c050:	str	x4, [sp, #64]
   3c054:	str	x5, [sp, #72]
   3c058:	str	x6, [sp, #80]
   3c05c:	str	x7, [sp, #88]
   3c060:	add	x0, sp, #0x60
   3c064:	str	x0, [sp, #16]
   3c068:	str	x0, [sp, #24]
   3c06c:	add	x0, sp, #0x30
   3c070:	str	x0, [sp, #32]
   3c074:	str	wzr, [sp, #44]
   3c078:	mov	w0, #0xffffffd8            	// #-40
   3c07c:	str	w0, [sp, #40]
   3c080:	cmp	w0, #0x0
   3c084:	b.le	3c0c4 <extract_fields@@Base+0x88>
   3c088:	add	x2, sp, #0x60
   3c08c:	add	x0, x2, #0x8
   3c090:	str	x0, [sp, #16]
   3c094:	ldr	w0, [x2]
   3c098:	cmp	w0, #0x5
   3c09c:	b.hi	3c0d0 <extract_fields@@Base+0x94>  // b.pmore
   3c0a0:	sub	w3, w0, #0x1
   3c0a4:	cbz	w0, 3c168 <extract_fields@@Base+0x12c>
   3c0a8:	ldr	x9, [sp, #24]
   3c0ac:	mov	w0, #0x0                   	// #0
   3c0b0:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   3c0b4:	ldr	x4, [x4, #3944]
   3c0b8:	bic	w5, w8, w1
   3c0bc:	mov	w7, #0xffffffff            	// #-1
   3c0c0:	b	3c144 <extract_fields@@Base+0x108>
   3c0c4:	ldr	x2, [sp, #24]
   3c0c8:	sub	x2, x2, #0x30
   3c0cc:	b	3c094 <extract_fields@@Base+0x58>
   3c0d0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3c0d4:	add	x3, x3, #0xa48
   3c0d8:	add	x3, x3, #0x30
   3c0dc:	mov	w2, #0x94                  	// #148
   3c0e0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3c0e4:	add	x1, x1, #0x2e0
   3c0e8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3c0ec:	add	x0, x0, #0x960
   3c0f0:	bl	35ac0 <__assert_fail@plt>
   3c0f4:	add	w6, w2, #0x8
   3c0f8:	str	w6, [sp, #40]
   3c0fc:	cmp	w6, #0x0
   3c100:	b.le	3c160 <extract_fields@@Base+0x124>
   3c104:	add	x2, x1, #0xb
   3c108:	and	x2, x2, #0xfffffffffffffff8
   3c10c:	str	x2, [sp, #16]
   3c110:	ldr	w2, [x1]
   3c114:	lsl	x2, x2, #3
   3c118:	add	x1, x4, x2
   3c11c:	ldr	w1, [x1, #4]
   3c120:	lsl	w0, w0, w1
   3c124:	ldr	w2, [x4, x2]
   3c128:	lsr	w2, w5, w2
   3c12c:	lsl	w1, w7, w1
   3c130:	bic	w1, w2, w1
   3c134:	orr	w0, w1, w0
   3c138:	sub	w3, w3, #0x1
   3c13c:	cmn	w3, #0x1
   3c140:	b.eq	3c168 <extract_fields@@Base+0x12c>  // b.none
   3c144:	ldr	w2, [sp, #40]
   3c148:	ldr	x1, [sp, #16]
   3c14c:	tbnz	w2, #31, 3c0f4 <extract_fields@@Base+0xb8>
   3c150:	add	x2, x1, #0xb
   3c154:	and	x2, x2, #0xfffffffffffffff8
   3c158:	str	x2, [sp, #16]
   3c15c:	b	3c110 <extract_fields@@Base+0xd4>
   3c160:	add	x1, x9, w2, sxtw
   3c164:	b	3c110 <extract_fields@@Base+0xd4>
   3c168:	ldp	x29, x30, [sp], #96
   3c16c:	ret
   3c170:	stp	x29, x30, [sp, #-160]!
   3c174:	mov	x29, sp
   3c178:	str	w3, [sp, #108]
   3c17c:	cmp	x0, #0x0
   3c180:	ccmp	x2, #0x0, #0x4, ne  // ne = any
   3c184:	b.eq	3c2b0 <extract_fields@@Base+0x274>  // b.none
   3c188:	stp	x19, x20, [sp, #16]
   3c18c:	stp	x21, x22, [sp, #32]
   3c190:	stp	x23, x24, [sp, #48]
   3c194:	stp	x25, x26, [sp, #64]
   3c198:	mov	x21, x0
   3c19c:	mov	w23, w1
   3c1a0:	mov	x19, x2
   3c1a4:	mov	x25, x4
   3c1a8:	mov	x2, #0x168                 	// #360
   3c1ac:	mov	w1, #0x0                   	// #0
   3c1b0:	mov	x0, x19
   3c1b4:	bl	35470 <memset@plt>
   3c1b8:	ldr	w0, [x21, #8]
   3c1bc:	eor	w0, w23, w0
   3c1c0:	ldr	w1, [x21, #12]
   3c1c4:	tst	w0, w1
   3c1c8:	b.ne	3d33c <extract_fields@@Base+0x1300>  // b.any
   3c1cc:	stp	x27, x28, [sp, #80]
   3c1d0:	str	x21, [x19, #8]
   3c1d4:	mov	x22, x19
   3c1d8:	str	w23, [x22], #24
   3c1dc:	mov	x1, x22
   3c1e0:	mov	x0, #0x0                   	// #0
   3c1e4:	add	x20, x21, #0x20
   3c1e8:	ldr	w2, [x20, x0, lsl #2]
   3c1ec:	cbz	w2, 3c208 <extract_fields@@Base+0x1cc>
   3c1f0:	str	w2, [x1]
   3c1f4:	str	w0, [x1, #8]
   3c1f8:	add	x0, x0, #0x1
   3c1fc:	add	x1, x1, #0x38
   3c200:	cmp	x0, #0x6
   3c204:	b.ne	3c1e8 <extract_fields@@Base+0x1ac>  // b.any
   3c208:	ldr	x0, [x21, #120]
   3c20c:	mov	x1, #0xff0                 	// #4080
   3c210:	movk	x1, #0x8c0, lsl #16
   3c214:	tst	x0, x1
   3c218:	b.eq	3d368 <extract_fields@@Base+0x132c>  // b.none
   3c21c:	tbnz	w0, #4, 3c2e8 <extract_fields@@Base+0x2ac>
   3c220:	ldr	x24, [x19, #8]
   3c224:	ldr	x0, [x24, #120]
   3c228:	tbnz	w0, #5, 3c314 <extract_fields@@Base+0x2d8>
   3c22c:	ldr	x24, [x19, #8]
   3c230:	ldr	x0, [x24, #120]
   3c234:	tbnz	w0, #27, 3c418 <extract_fields@@Base+0x3dc>
   3c238:	ldr	x24, [x19, #8]
   3c23c:	ldr	x0, [x24, #120]
   3c240:	tbnz	w0, #6, 3c4e4 <extract_fields@@Base+0x4a8>
   3c244:	tbnz	w0, #7, 3c618 <extract_fields@@Base+0x5dc>
   3c248:	ldr	x24, [x19, #8]
   3c24c:	ldr	x0, [x24, #120]
   3c250:	tbnz	w0, #8, 3c6fc <extract_fields@@Base+0x6c0>
   3c254:	ldr	x0, [x19, #8]
   3c258:	ldr	x1, [x0, #120]
   3c25c:	tbnz	w1, #9, 3c87c <extract_fields@@Base+0x840>
   3c260:	ldr	x0, [x19, #8]
   3c264:	ldr	x1, [x0, #120]
   3c268:	tbnz	w1, #10, 3c990 <extract_fields@@Base+0x954>
   3c26c:	ldr	x0, [x19, #8]
   3c270:	ldr	x1, [x0, #120]
   3c274:	tbnz	w1, #11, 3ca8c <extract_fields@@Base+0xa50>
   3c278:	ldr	x0, [x19, #8]
   3c27c:	ldr	x1, [x0, #120]
   3c280:	tbnz	w1, #22, 3cb04 <extract_fields@@Base+0xac8>
   3c284:	ldr	x0, [x19, #8]
   3c288:	ldr	w0, [x0, #16]
   3c28c:	sub	w0, w0, #0x47
   3c290:	cmp	w0, #0x12
   3c294:	b.hi	3d004 <extract_fields@@Base+0xfc8>  // b.pmore
   3c298:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3c29c:	add	x1, x1, #0x9f8
   3c2a0:	ldrh	w0, [x1, w0, uxtw #1]
   3c2a4:	adr	x1, 3c2b0 <extract_fields@@Base+0x274>
   3c2a8:	add	x0, x1, w0, sxth #2
   3c2ac:	br	x0
   3c2b0:	stp	x19, x20, [sp, #16]
   3c2b4:	stp	x21, x22, [sp, #32]
   3c2b8:	stp	x23, x24, [sp, #48]
   3c2bc:	stp	x25, x26, [sp, #64]
   3c2c0:	stp	x27, x28, [sp, #80]
   3c2c4:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3c2c8:	add	x3, x3, #0xa48
   3c2cc:	add	x3, x3, #0x40
   3c2d0:	mov	w2, #0xb4b                 	// #2891
   3c2d4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3c2d8:	add	x1, x1, #0x2e0
   3c2dc:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3c2e0:	add	x0, x0, #0x388
   3c2e4:	bl	35ac0 <__assert_fail@plt>
   3c2e8:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3c2ec:	ldr	x1, [x1, #3944]
   3c2f0:	ldr	w0, [x1, #12]
   3c2f4:	mov	w2, #0xffffffff            	// #-1
   3c2f8:	lsl	w2, w2, w0
   3c2fc:	ldr	w0, [x1, #8]
   3c300:	lsr	w0, w23, w0
   3c304:	bic	w0, w0, w2
   3c308:	bl	35310 <get_cond_from_value@plt>
   3c30c:	str	x0, [x19, #16]
   3c310:	b	3c220 <extract_fields@@Base+0x1e4>
   3c314:	ldr	w0, [x24, #32]
   3c318:	bl	35710 <aarch64_get_operand_class@plt>
   3c31c:	mov	w26, #0x0                   	// #0
   3c320:	cmp	w0, #0x1
   3c324:	b.ne	3c3bc <extract_fields@@Base+0x380>  // b.any
   3c328:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3c32c:	ldr	x0, [x0, #3944]
   3c330:	ldr	w24, [x0, #472]
   3c334:	ldr	w1, [x19]
   3c338:	lsr	w1, w1, w24
   3c33c:	ldr	w0, [x0, #476]
   3c340:	mov	w24, #0xffffffff            	// #-1
   3c344:	lsl	w24, w24, w0
   3c348:	bic	w24, w1, w24
   3c34c:	add	w27, w24, #0x1
   3c350:	cmp	w24, #0x1
   3c354:	b.hi	3c3f4 <extract_fields@@Base+0x3b8>  // b.pmore
   3c358:	and	w27, w27, #0xff
   3c35c:	mov	w0, w27
   3c360:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3c364:	cmp	w24, w0
   3c368:	b.ne	3c3f4 <extract_fields@@Base+0x3b8>  // b.any
   3c36c:	sxtw	x26, w26
   3c370:	lsl	x0, x26, #3
   3c374:	sub	x0, x0, x26
   3c378:	add	x0, x19, x0, lsl #3
   3c37c:	strb	w27, [x0, #28]
   3c380:	ldr	x0, [x19, #8]
   3c384:	ldr	x0, [x0, #120]
   3c388:	tbz	w0, #23, 3c22c <extract_fields@@Base+0x1f0>
   3c38c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3c390:	ldr	x0, [x0, #3944]
   3c394:	ldr	w2, [x0, #448]
   3c398:	ldr	w1, [x19]
   3c39c:	lsr	w1, w1, w2
   3c3a0:	ldr	w2, [x0, #452]
   3c3a4:	mov	w0, #0xffffffff            	// #-1
   3c3a8:	lsl	w0, w0, w2
   3c3ac:	bic	w0, w1, w0
   3c3b0:	cmp	w24, w0
   3c3b4:	b.ne	3c8c4 <extract_fields@@Base+0x888>  // b.any
   3c3b8:	b	3c22c <extract_fields@@Base+0x1f0>
   3c3bc:	ldr	w0, [x24, #36]
   3c3c0:	bl	35710 <aarch64_get_operand_class@plt>
   3c3c4:	mov	w26, #0x1                   	// #1
   3c3c8:	cmp	w0, w26
   3c3cc:	b.eq	3c328 <extract_fields@@Base+0x2ec>  // b.none
   3c3d0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3c3d4:	add	x3, x3, #0xa48
   3c3d8:	add	x3, x3, #0x58
   3c3dc:	mov	w2, #0x1ab                 	// #427
   3c3e0:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3c3e4:	add	x1, x1, #0x970
   3c3e8:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3c3ec:	add	x0, x0, #0xb60
   3c3f0:	bl	35ac0 <__assert_fail@plt>
   3c3f4:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3c3f8:	add	x3, x3, #0xa48
   3c3fc:	add	x3, x3, #0x80
   3c400:	mov	w2, #0xc8                  	// #200
   3c404:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3c408:	add	x1, x1, #0x2e0
   3c40c:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3c410:	add	x0, x0, #0x398
   3c414:	bl	35ac0 <__assert_fail@plt>
   3c418:	ldr	w0, [x24, #32]
   3c41c:	bl	35710 <aarch64_get_operand_class@plt>
   3c420:	mov	w26, #0x0                   	// #0
   3c424:	cmp	w0, #0x1
   3c428:	b.ne	3c488 <extract_fields@@Base+0x44c>  // b.any
   3c42c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3c430:	ldr	x0, [x0, #3944]
   3c434:	ldr	w24, [x0, #480]
   3c438:	ldr	w1, [x19]
   3c43c:	lsr	w1, w1, w24
   3c440:	ldr	w0, [x0, #484]
   3c444:	mov	w24, #0xffffffff            	// #-1
   3c448:	lsl	w24, w24, w0
   3c44c:	bic	w24, w1, w24
   3c450:	add	w27, w24, #0x1
   3c454:	cmp	w24, #0x1
   3c458:	b.hi	3c4c0 <extract_fields@@Base+0x484>  // b.pmore
   3c45c:	and	w27, w27, #0xff
   3c460:	mov	w0, w27
   3c464:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3c468:	cmp	w24, w0
   3c46c:	b.ne	3c4c0 <extract_fields@@Base+0x484>  // b.any
   3c470:	sxtw	x26, w26
   3c474:	lsl	x0, x26, #3
   3c478:	sub	x0, x0, x26
   3c47c:	add	x0, x19, x0, lsl #3
   3c480:	strb	w27, [x0, #28]
   3c484:	b	3c238 <extract_fields@@Base+0x1fc>
   3c488:	ldr	w0, [x24, #36]
   3c48c:	bl	35710 <aarch64_get_operand_class@plt>
   3c490:	mov	w26, #0x1                   	// #1
   3c494:	cmp	w0, w26
   3c498:	b.eq	3c42c <extract_fields@@Base+0x3f0>  // b.none
   3c49c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3c4a0:	add	x3, x3, #0xa48
   3c4a4:	add	x3, x3, #0x58
   3c4a8:	mov	w2, #0x1ab                 	// #427
   3c4ac:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3c4b0:	add	x1, x1, #0x970
   3c4b4:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3c4b8:	add	x0, x0, #0xb60
   3c4bc:	bl	35ac0 <__assert_fail@plt>
   3c4c0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3c4c4:	add	x3, x3, #0xa48
   3c4c8:	add	x3, x3, #0x80
   3c4cc:	mov	w2, #0xc8                  	// #200
   3c4d0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3c4d4:	add	x1, x1, #0x2e0
   3c4d8:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3c4dc:	add	x0, x0, #0x398
   3c4e0:	bl	35ac0 <__assert_fail@plt>
   3c4e4:	ldr	w0, [x24, #16]
   3c4e8:	sub	w0, w0, #0x12
   3c4ec:	cmp	w0, #0x4
   3c4f0:	cset	w26, cc  // cc = lo, ul, last
   3c4f4:	add	w26, w26, #0x8
   3c4f8:	mov	w4, #0xb                   	// #11
   3c4fc:	mov	w3, w26
   3c500:	mov	w2, #0x2                   	// #2
   3c504:	ldr	w1, [x24, #12]
   3c508:	ldr	w0, [x19]
   3c50c:	bl	35390 <extract_fields@plt>
   3c510:	mov	w27, w0
   3c514:	ldr	x0, [x19, #8]
   3c518:	ldr	w0, [x0, #12]
   3c51c:	mov	w4, #0xb                   	// #11
   3c520:	mov	w3, w26
   3c524:	mov	w2, #0x2                   	// #2
   3c528:	mov	w1, #0x0                   	// #0
   3c52c:	mvn	w0, w0
   3c530:	bl	35390 <extract_fields@plt>
   3c534:	mov	w24, w0
   3c538:	ldr	x0, [x19, #8]
   3c53c:	bl	357b0 <aarch64_select_operand_for_sizeq_field_coding@plt>
   3c540:	mov	w26, w0
   3c544:	cmp	w24, #0x7
   3c548:	b.eq	3c5b0 <extract_fields@@Base+0x574>  // b.none
   3c54c:	ldr	x1, [x19, #8]
   3c550:	add	x1, x1, w0, sxtw
   3c554:	add	x0, sp, #0x78
   3c558:	add	x3, sp, #0xa0
   3c55c:	ldrb	w2, [x1, #56]
   3c560:	str	w2, [x0]
   3c564:	cbz	w2, 3c578 <extract_fields@@Base+0x53c>
   3c568:	add	x1, x1, #0x6
   3c56c:	add	x0, x0, #0x4
   3c570:	cmp	x3, x0
   3c574:	b.ne	3c55c <extract_fields@@Base+0x520>  // b.any
   3c578:	mov	w2, w24
   3c57c:	add	x1, sp, #0x78
   3c580:	mov	w0, w27
   3c584:	bl	3be2c <aarch64_opcode_encode@@Base+0x1e98>
   3c588:	mov	w24, #0x0                   	// #0
   3c58c:	cbz	w0, 3c5a4 <extract_fields@@Base+0x568>
   3c590:	sbfiz	x1, x26, #3, #32
   3c594:	sub	x1, x1, w26, sxtw
   3c598:	add	x1, x19, x1, lsl #3
   3c59c:	strb	w0, [x1, #28]
   3c5a0:	mov	w24, #0x1                   	// #1
   3c5a4:	cbnz	w24, 3c284 <extract_fields@@Base+0x248>
   3c5a8:	ldp	x27, x28, [sp, #80]
   3c5ac:	b	3d340 <extract_fields@@Base+0x1304>
   3c5b0:	add	w24, w27, #0xd
   3c5b4:	add	w0, w27, #0xe
   3c5b8:	cmp	w24, #0xe
   3c5bc:	csel	w24, w0, w24, hi  // hi = pmore
   3c5c0:	cmp	w27, #0x8
   3c5c4:	b.hi	3c5f4 <extract_fields@@Base+0x5b8>  // b.pmore
   3c5c8:	and	w24, w24, #0xff
   3c5cc:	mov	w0, w24
   3c5d0:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3c5d4:	cmp	w27, w0
   3c5d8:	b.ne	3c5f4 <extract_fields@@Base+0x5b8>  // b.any
   3c5dc:	sbfiz	x0, x26, #3, #32
   3c5e0:	sub	x0, x0, w26, sxtw
   3c5e4:	add	x0, x19, x0, lsl #3
   3c5e8:	strb	w24, [x0, #28]
   3c5ec:	mov	w24, #0x1                   	// #1
   3c5f0:	b	3c5a4 <extract_fields@@Base+0x568>
   3c5f4:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3c5f8:	add	x3, x3, #0xa48
   3c5fc:	add	x3, x3, #0xa0
   3c600:	mov	w2, #0xda                  	// #218
   3c604:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3c608:	add	x1, x1, #0x2e0
   3c60c:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3c610:	add	x0, x0, #0x3e8
   3c614:	bl	35ac0 <__assert_fail@plt>
   3c618:	ldr	w0, [x24, #36]
   3c61c:	bl	35710 <aarch64_get_operand_class@plt>
   3c620:	mov	w1, #0x1                   	// #1
   3c624:	cmp	w0, #0x3
   3c628:	b.ne	3c670 <extract_fields@@Base+0x634>  // b.any
   3c62c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3c630:	ldr	x0, [x0, #3944]
   3c634:	ldr	w3, [x0, #288]
   3c638:	ldr	w2, [x19]
   3c63c:	lsr	w2, w2, w3
   3c640:	ldr	w3, [x0, #292]
   3c644:	mov	w0, #0xffffffff            	// #-1
   3c648:	lsl	w0, w0, w3
   3c64c:	bic	w0, w2, w0
   3c650:	cmp	w0, #0x1
   3c654:	b.eq	3c6c4 <extract_fields@@Base+0x688>  // b.none
   3c658:	cmp	w0, #0x3
   3c65c:	b.eq	3c6e0 <extract_fields@@Base+0x6a4>  // b.none
   3c660:	cbz	w0, 3c6a8 <extract_fields@@Base+0x66c>
   3c664:	mov	w24, #0x0                   	// #0
   3c668:	ldp	x27, x28, [sp, #80]
   3c66c:	b	3d340 <extract_fields@@Base+0x1304>
   3c670:	ldr	w0, [x24, #32]
   3c674:	bl	35710 <aarch64_get_operand_class@plt>
   3c678:	mov	w1, #0x0                   	// #0
   3c67c:	cmp	w0, #0x3
   3c680:	b.eq	3c62c <extract_fields@@Base+0x5f0>  // b.none
   3c684:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3c688:	add	x3, x3, #0xa48
   3c68c:	add	x3, x3, #0xc0
   3c690:	mov	w2, #0x1c0                 	// #448
   3c694:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3c698:	add	x1, x1, #0x970
   3c69c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3c6a0:	add	x0, x0, #0xb60
   3c6a4:	bl	35ac0 <__assert_fail@plt>
   3c6a8:	sxtw	x1, w1
   3c6ac:	lsl	x0, x1, #3
   3c6b0:	sub	x1, x0, x1
   3c6b4:	add	x0, x19, x1, lsl #3
   3c6b8:	mov	w1, #0x7                   	// #7
   3c6bc:	strb	w1, [x0, #28]
   3c6c0:	b	3c248 <extract_fields@@Base+0x20c>
   3c6c4:	sxtw	x1, w1
   3c6c8:	lsl	x0, x1, #3
   3c6cc:	sub	x1, x0, x1
   3c6d0:	add	x0, x19, x1, lsl #3
   3c6d4:	mov	w1, #0x8                   	// #8
   3c6d8:	strb	w1, [x0, #28]
   3c6dc:	b	3c248 <extract_fields@@Base+0x20c>
   3c6e0:	sxtw	x1, w1
   3c6e4:	lsl	x0, x1, #3
   3c6e8:	sub	x1, x0, x1
   3c6ec:	add	x0, x19, x1, lsl #3
   3c6f0:	mov	w1, #0x6                   	// #6
   3c6f4:	strb	w1, [x0, #28]
   3c6f8:	b	3c248 <extract_fields@@Base+0x20c>
   3c6fc:	ldr	w0, [x24, #32]
   3c700:	bl	35710 <aarch64_get_operand_class@plt>
   3c704:	cmp	w0, #0x6
   3c708:	b.eq	3c730 <extract_fields@@Base+0x6f4>  // b.none
   3c70c:	ldr	w0, [x24, #36]
   3c710:	bl	35710 <aarch64_get_operand_class@plt>
   3c714:	mov	w27, #0x0                   	// #0
   3c718:	cmp	w0, #0x6
   3c71c:	b.ne	3c7fc <extract_fields@@Base+0x7c0>  // b.any
   3c720:	ldrb	w0, [x24, #57]
   3c724:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3c728:	and	w1, w0, #0xff
   3c72c:	b	3c750 <extract_fields@@Base+0x714>
   3c730:	ldrb	w0, [x24, #56]
   3c734:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3c738:	and	w27, w0, #0xff
   3c73c:	ldr	w0, [x24, #36]
   3c740:	bl	35710 <aarch64_get_operand_class@plt>
   3c744:	mov	w1, #0x0                   	// #0
   3c748:	cmp	w0, #0x6
   3c74c:	b.eq	3c720 <extract_fields@@Base+0x6e4>  // b.none
   3c750:	cmp	w1, #0x0
   3c754:	ccmp	w1, w27, #0x0, eq  // eq = none
   3c758:	b.eq	3c7fc <extract_fields@@Base+0x7c0>  // b.none
   3c75c:	mov	w26, #0x1                   	// #1
   3c760:	cbz	w27, 3c76c <extract_fields@@Base+0x730>
   3c764:	cmp	w27, w1, lsl #1
   3c768:	cset	w26, eq  // eq = none
   3c76c:	ldr	x1, [x19, #8]
   3c770:	ldr	w2, [x1, #12]
   3c774:	mvn	w3, w2
   3c778:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3c77c:	ldr	x0, [x0, #3944]
   3c780:	ldr	w4, [x0, #64]
   3c784:	ldr	w5, [x0, #68]
   3c788:	mov	w0, #0xffffffff            	// #-1
   3c78c:	lsl	w0, w0, w5
   3c790:	ldr	w24, [x19]
   3c794:	bic	w24, w24, w2
   3c798:	lsr	w24, w24, w4
   3c79c:	bic	w24, w24, w0
   3c7a0:	lsr	w2, w3, w4
   3c7a4:	bic	w2, w2, w0
   3c7a8:	cmp	w2, #0x3
   3c7ac:	b.eq	3c820 <extract_fields@@Base+0x7e4>  // b.none
   3c7b0:	add	x1, x1, w26, sxtw
   3c7b4:	add	x0, sp, #0x78
   3c7b8:	add	x4, sp, #0xa0
   3c7bc:	ldrb	w3, [x1, #56]
   3c7c0:	str	w3, [x0]
   3c7c4:	cbz	w3, 3c7d8 <extract_fields@@Base+0x79c>
   3c7c8:	add	x1, x1, #0x6
   3c7cc:	add	x0, x0, #0x4
   3c7d0:	cmp	x4, x0
   3c7d4:	b.ne	3c7bc <extract_fields@@Base+0x780>  // b.any
   3c7d8:	add	x1, sp, #0x78
   3c7dc:	mov	w0, w24
   3c7e0:	bl	3be2c <aarch64_opcode_encode@@Base+0x1e98>
   3c7e4:	sxtw	x26, w26
   3c7e8:	lsl	x1, x26, #3
   3c7ec:	sub	x26, x1, x26
   3c7f0:	add	x1, x19, x26, lsl #3
   3c7f4:	strb	w0, [x1, #28]
   3c7f8:	b	3c254 <extract_fields@@Base+0x218>
   3c7fc:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3c800:	add	x3, x3, #0xa48
   3c804:	add	x3, x3, #0xe8
   3c808:	mov	w2, #0x1d4                 	// #468
   3c80c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3c810:	add	x1, x1, #0x970
   3c814:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3c818:	add	x0, x0, #0xb60
   3c81c:	bl	35ac0 <__assert_fail@plt>
   3c820:	add	w27, w24, #0x5
   3c824:	cmp	w24, #0x4
   3c828:	b.hi	3c858 <extract_fields@@Base+0x81c>  // b.pmore
   3c82c:	and	w27, w27, #0xff
   3c830:	mov	w0, w27
   3c834:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3c838:	cmp	w24, w0
   3c83c:	b.ne	3c858 <extract_fields@@Base+0x81c>  // b.any
   3c840:	sxtw	x26, w26
   3c844:	lsl	x0, x26, #3
   3c848:	sub	x0, x0, x26
   3c84c:	add	x0, x19, x0, lsl #3
   3c850:	strb	w27, [x0, #28]
   3c854:	b	3c254 <extract_fields@@Base+0x218>
   3c858:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3c85c:	add	x3, x3, #0xa48
   3c860:	add	x3, x3, #0x118
   3c864:	mov	w2, #0xe5                  	// #229
   3c868:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3c86c:	add	x1, x1, #0x2e0
   3c870:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3c874:	add	x0, x0, #0x438
   3c878:	bl	35ac0 <__assert_fail@plt>
   3c87c:	ldr	w0, [x0, #32]
   3c880:	bl	35710 <aarch64_get_operand_class@plt>
   3c884:	cmp	w0, #0x4
   3c888:	b.ne	3c8d0 <extract_fields@@Base+0x894>  // b.any
   3c88c:	ldr	w2, [x19]
   3c890:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3c894:	ldr	x1, [x1, #3944]
   3c898:	ldr	w3, [x1, #348]
   3c89c:	mov	w0, #0xffffffff            	// #-1
   3c8a0:	lsl	w0, w0, w3
   3c8a4:	ldr	w1, [x1, #344]
   3c8a8:	lsr	w1, w2, w1
   3c8ac:	bic	w0, w1, w0
   3c8b0:	tbnz	w0, #0, 3c904 <extract_fields@@Base+0x8c8>
   3c8b4:	tbnz	w0, #1, 3c8f4 <extract_fields@@Base+0x8b8>
   3c8b8:	tbnz	w0, #2, 3c8fc <extract_fields@@Base+0x8c0>
   3c8bc:	mov	w26, #0x3                   	// #3
   3c8c0:	tbnz	w0, #3, 3c908 <extract_fields@@Base+0x8cc>
   3c8c4:	mov	w24, #0x0                   	// #0
   3c8c8:	ldp	x27, x28, [sp, #80]
   3c8cc:	b	3d340 <extract_fields@@Base+0x1304>
   3c8d0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3c8d4:	add	x3, x3, #0xa48
   3c8d8:	add	x3, x3, #0x138
   3c8dc:	mov	w2, #0x884                 	// #2180
   3c8e0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3c8e4:	add	x1, x1, #0x2e0
   3c8e8:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3c8ec:	add	x0, x0, #0x488
   3c8f0:	bl	35ac0 <__assert_fail@plt>
   3c8f4:	mov	w26, #0x1                   	// #1
   3c8f8:	b	3c908 <extract_fields@@Base+0x8cc>
   3c8fc:	mov	w26, #0x2                   	// #2
   3c900:	b	3c908 <extract_fields@@Base+0x8cc>
   3c904:	mov	w26, #0x0                   	// #0
   3c908:	ldr	x0, [x19, #8]
   3c90c:	ldr	w0, [x0, #12]
   3c910:	bic	w0, w2, w0
   3c914:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   3c918:	ldr	x2, [x2, #3944]
   3c91c:	ldr	w1, [x2, #88]
   3c920:	lsr	w1, w0, w1
   3c924:	ldr	w2, [x2, #92]
   3c928:	mov	w0, #0xffffffff            	// #-1
   3c92c:	lsl	w0, w0, w2
   3c930:	bic	w0, w1, w0
   3c934:	orr	w26, w0, w26, lsl #1
   3c938:	add	w0, w26, #0xd
   3c93c:	add	w1, w26, #0xe
   3c940:	cmp	w0, #0xe
   3c944:	csel	w0, w1, w0, hi  // hi = pmore
   3c948:	cmp	w26, #0x8
   3c94c:	b.hi	3c96c <extract_fields@@Base+0x930>  // b.pmore
   3c950:	and	w24, w0, #0xff
   3c954:	mov	w0, w24
   3c958:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3c95c:	cmp	w26, w0
   3c960:	b.ne	3c96c <extract_fields@@Base+0x930>  // b.any
   3c964:	strb	w24, [x19, #28]
   3c968:	b	3c260 <extract_fields@@Base+0x224>
   3c96c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3c970:	add	x3, x3, #0xa48
   3c974:	add	x3, x3, #0xa0
   3c978:	mov	w2, #0xda                  	// #218
   3c97c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3c980:	add	x1, x1, #0x2e0
   3c984:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3c988:	add	x0, x0, #0x3e8
   3c98c:	bl	35ac0 <__assert_fail@plt>
   3c990:	mov	w1, #0x4                   	// #4
   3c994:	add	x0, x0, #0x20
   3c998:	bl	35100 <aarch64_operand_index@plt>
   3c99c:	mov	w26, w0
   3c9a0:	cmn	w0, #0x1
   3c9a4:	b.eq	3ca08 <extract_fields@@Base+0x9cc>  // b.none
   3c9a8:	cmp	w0, #0x1
   3c9ac:	b.hi	3ca44 <extract_fields@@Base+0xa08>  // b.pmore
   3c9b0:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3c9b4:	ldr	x0, [x0, #3944]
   3c9b8:	ldr	w24, [x0, #88]
   3c9bc:	ldr	w1, [x19]
   3c9c0:	lsr	w1, w1, w24
   3c9c4:	ldr	w0, [x0, #92]
   3c9c8:	mov	w24, #0xffffffff            	// #-1
   3c9cc:	lsl	w24, w24, w0
   3c9d0:	bic	w24, w1, w24
   3c9d4:	add	w27, w24, #0x1
   3c9d8:	cmp	w24, #0x1
   3c9dc:	b.hi	3ca68 <extract_fields@@Base+0xa2c>  // b.pmore
   3c9e0:	and	w27, w27, #0xff
   3c9e4:	mov	w0, w27
   3c9e8:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3c9ec:	cmp	w24, w0
   3c9f0:	b.ne	3ca68 <extract_fields@@Base+0xa2c>  // b.any
   3c9f4:	sbfiz	x0, x26, #3, #32
   3c9f8:	sub	x0, x0, w26, sxtw
   3c9fc:	add	x0, x19, x0, lsl #3
   3ca00:	strb	w27, [x0, #28]
   3ca04:	b	3c26c <extract_fields@@Base+0x230>
   3ca08:	ldr	x0, [x19, #8]
   3ca0c:	ldr	w0, [x0, #32]
   3ca10:	bl	35710 <aarch64_get_operand_class@plt>
   3ca14:	mov	w26, #0x0                   	// #0
   3ca18:	cmp	w0, #0x1
   3ca1c:	b.eq	3c9b0 <extract_fields@@Base+0x974>  // b.none
   3ca20:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3ca24:	add	x3, x3, #0xa48
   3ca28:	add	x3, x3, #0x138
   3ca2c:	mov	w2, #0x8a3                 	// #2211
   3ca30:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3ca34:	add	x1, x1, #0x2e0
   3ca38:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ca3c:	add	x0, x0, #0xf38
   3ca40:	bl	35ac0 <__assert_fail@plt>
   3ca44:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3ca48:	add	x3, x3, #0xa48
   3ca4c:	add	x3, x3, #0x138
   3ca50:	mov	w2, #0x8a7                 	// #2215
   3ca54:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3ca58:	add	x1, x1, #0x2e0
   3ca5c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ca60:	add	x0, x0, #0xec8
   3ca64:	bl	35ac0 <__assert_fail@plt>
   3ca68:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3ca6c:	add	x3, x3, #0xa48
   3ca70:	add	x3, x3, #0x80
   3ca74:	mov	w2, #0xc8                  	// #200
   3ca78:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3ca7c:	add	x1, x1, #0x2e0
   3ca80:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3ca84:	add	x0, x0, #0x398
   3ca88:	bl	35ac0 <__assert_fail@plt>
   3ca8c:	ldr	w0, [x0, #32]
   3ca90:	bl	35710 <aarch64_get_operand_class@plt>
   3ca94:	cmp	w0, #0x1
   3ca98:	b.ne	3cae0 <extract_fields@@Base+0xaa4>  // b.any
   3ca9c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3caa0:	ldr	x0, [x0, #3944]
   3caa4:	ldr	w1, [x0, #268]
   3caa8:	mov	w0, #0x2                   	// #2
   3caac:	cmp	w1, #0x0
   3cab0:	b.le	3cad8 <extract_fields@@Base+0xa9c>
   3cab4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3cab8:	ldr	x0, [x0, #3944]
   3cabc:	ldr	w1, [x0, #264]
   3cac0:	ldr	w0, [x19]
   3cac4:	lsr	w0, w0, w1
   3cac8:	and	w1, w0, #0x1
   3cacc:	mov	w0, #0x2                   	// #2
   3cad0:	sub	w0, w0, w1
   3cad4:	and	w0, w0, #0xff
   3cad8:	strb	w0, [x19, #28]
   3cadc:	b	3c278 <extract_fields@@Base+0x23c>
   3cae0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3cae4:	add	x3, x3, #0xa48
   3cae8:	add	x3, x3, #0x138
   3caec:	mov	w2, #0x8af                 	// #2223
   3caf0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3caf4:	add	x1, x1, #0x2e0
   3caf8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3cafc:	add	x0, x0, #0xf38
   3cb00:	bl	35ac0 <__assert_fail@plt>
   3cb04:	ldr	w0, [x0, #20]
   3cb08:	cmp	w0, #0x48
   3cb0c:	b.eq	3ce14 <extract_fields@@Base+0xdd8>  // b.none
   3cb10:	b.hi	3cc74 <extract_fields@@Base+0xc38>  // b.pmore
   3cb14:	cmp	w0, #0x3f
   3cb18:	b.eq	3cd98 <extract_fields@@Base+0xd5c>  // b.none
   3cb1c:	b.ls	3cb64 <extract_fields@@Base+0xb28>  // b.plast
   3cb20:	cmp	w0, #0x46
   3cb24:	b.eq	3cdd0 <extract_fields@@Base+0xd94>  // b.none
   3cb28:	cmp	w0, #0x47
   3cb2c:	b.ne	3cbf4 <extract_fields@@Base+0xbb8>  // b.any
   3cb30:	mov	w4, #0x2b                  	// #43
   3cb34:	mov	w3, #0x74                  	// #116
   3cb38:	mov	w2, #0x2                   	// #2
   3cb3c:	mov	w1, #0x0                   	// #0
   3cb40:	ldr	w0, [x19]
   3cb44:	bl	35390 <extract_fields@plt>
   3cb48:	sub	w1, w0, #0x1
   3cb4c:	cmp	w1, #0xf
   3cb50:	b.hi	3c8c4 <extract_fields@@Base+0x888>  // b.pmore
   3cb54:	neg	w1, w0
   3cb58:	bics	wzr, w0, w1
   3cb5c:	b.ne	3c8c4 <extract_fields@@Base+0x888>  // b.any
   3cb60:	b	3c284 <extract_fields@@Base+0x248>
   3cb64:	cmp	w0, #0x3a
   3cb68:	b.eq	3cd38 <extract_fields@@Base+0xcfc>  // b.none
   3cb6c:	sub	w1, w0, #0x3b
   3cb70:	mov	w24, #0x0                   	// #0
   3cb74:	cmp	w1, #0x3
   3cb78:	b.ls	3cb84 <extract_fields@@Base+0xb48>  // b.plast
   3cb7c:	ldp	x27, x28, [sp, #80]
   3cb80:	b	3d340 <extract_fields@@Base+0x1304>
   3cb84:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3cb88:	ldr	x1, [x1, #3944]
   3cb8c:	ldr	w1, [x1, #68]
   3cb90:	mov	w2, #0x13                  	// #19
   3cb94:	cmp	w1, #0x0
   3cb98:	b.le	3cbc0 <extract_fields@@Base+0xb84>
   3cb9c:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3cba0:	ldr	x1, [x1, #3944]
   3cba4:	ldr	w2, [x1, #64]
   3cba8:	ldr	w1, [x19]
   3cbac:	lsr	w1, w1, w2
   3cbb0:	tst	x1, #0x1
   3cbb4:	mov	w2, #0x13                  	// #19
   3cbb8:	mov	w1, #0x15                  	// #21
   3cbbc:	csel	w2, w2, w1, eq  // eq = none
   3cbc0:	cmp	w0, #0x3c
   3cbc4:	b.hi	3cd7c <extract_fields@@Base+0xd40>  // b.pmore
   3cbc8:	cmp	w0, #0x3a
   3cbcc:	b.hi	3cd90 <extract_fields@@Base+0xd54>  // b.pmore
   3cbd0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3cbd4:	add	x3, x3, #0xa48
   3cbd8:	add	x3, x3, #0x150
   3cbdc:	mov	w2, #0x7cb                 	// #1995
   3cbe0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3cbe4:	add	x1, x1, #0x2e0
   3cbe8:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3cbec:	add	x0, x0, #0xb60
   3cbf0:	bl	35ac0 <__assert_fail@plt>
   3cbf4:	cmp	w0, #0x45
   3cbf8:	b.ne	3cc68 <extract_fields@@Base+0xc2c>  // b.any
   3cbfc:	ldr	w3, [x19]
   3cc00:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   3cc04:	ldr	x2, [x2, #3944]
   3cc08:	ldr	w0, [x2, #620]
   3cc0c:	mov	w1, #0xffffffff            	// #-1
   3cc10:	lsl	w0, w1, w0
   3cc14:	ldr	w4, [x2, #616]
   3cc18:	lsr	w4, w3, w4
   3cc1c:	bic	w0, w4, w0
   3cc20:	ldr	w4, [x2, #612]
   3cc24:	lsl	w1, w1, w4
   3cc28:	ldr	w2, [x2, #608]
   3cc2c:	lsr	w2, w3, w2
   3cc30:	bic	w1, w2, w1
   3cc34:	cmp	w0, w1
   3cc38:	b.ne	3c8c4 <extract_fields@@Base+0x888>  // b.any
   3cc3c:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   3cc40:	ldr	x2, [x2, #3944]
   3cc44:	ldr	w4, [x2, #596]
   3cc48:	mov	w1, #0xffffffff            	// #-1
   3cc4c:	lsl	w1, w1, w4
   3cc50:	ldr	w2, [x2, #592]
   3cc54:	lsr	w3, w3, w2
   3cc58:	bic	w1, w3, w1
   3cc5c:	cmp	w1, w0
   3cc60:	cset	w24, eq  // eq = none
   3cc64:	b	3c5a4 <extract_fields@@Base+0x568>
   3cc68:	mov	w24, #0x0                   	// #0
   3cc6c:	ldp	x27, x28, [sp, #80]
   3cc70:	b	3d340 <extract_fields@@Base+0x1304>
   3cc74:	cmp	w0, #0x4b
   3cc78:	b.eq	3cbfc <extract_fields@@Base+0xbc0>  // b.none
   3cc7c:	b.ls	3ccd8 <extract_fields@@Base+0xc9c>  // b.plast
   3cc80:	cmp	w0, #0x4d
   3cc84:	b.ls	3ce84 <extract_fields@@Base+0xe48>  // b.plast
   3cc88:	sub	w0, w0, #0x4e
   3cc8c:	cmp	w0, #0x1
   3cc90:	b.hi	3d35c <extract_fields@@Base+0x1320>  // b.pmore
   3cc94:	ldr	w3, [x19]
   3cc98:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3cc9c:	ldr	x1, [x1, #3944]
   3cca0:	ldr	w2, [x1, #612]
   3cca4:	mov	w0, #0xffffffff            	// #-1
   3cca8:	lsl	w2, w0, w2
   3ccac:	ldr	w4, [x1, #608]
   3ccb0:	lsr	w4, w3, w4
   3ccb4:	bic	w2, w4, w2
   3ccb8:	ldr	w4, [x1, #596]
   3ccbc:	lsl	w0, w0, w4
   3ccc0:	ldr	w1, [x1, #592]
   3ccc4:	lsr	w3, w3, w1
   3ccc8:	bic	w0, w3, w0
   3cccc:	cmp	w2, w0
   3ccd0:	cset	w24, eq  // eq = none
   3ccd4:	b	3c5a4 <extract_fields@@Base+0x568>
   3ccd8:	cmp	w0, #0x49
   3ccdc:	b.eq	3ce58 <extract_fields@@Base+0xe1c>  // b.none
   3cce0:	cmp	w0, #0x4a
   3cce4:	b.ne	3cd2c <extract_fields@@Base+0xcf0>  // b.any
   3cce8:	ldr	w3, [x19]
   3ccec:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3ccf0:	ldr	x1, [x1, #3944]
   3ccf4:	ldr	w2, [x1, #572]
   3ccf8:	mov	w0, #0xffffffff            	// #-1
   3ccfc:	lsl	w2, w0, w2
   3cd00:	ldr	w4, [x1, #568]
   3cd04:	lsr	w4, w3, w4
   3cd08:	bic	w2, w4, w2
   3cd0c:	ldr	w4, [x1, #612]
   3cd10:	lsl	w0, w0, w4
   3cd14:	ldr	w1, [x1, #608]
   3cd18:	lsr	w3, w3, w1
   3cd1c:	bic	w0, w3, w0
   3cd20:	cmp	w2, w0
   3cd24:	cset	w24, eq  // eq = none
   3cd28:	b	3c5a4 <extract_fields@@Base+0x568>
   3cd2c:	mov	w24, #0x0                   	// #0
   3cd30:	ldp	x27, x28, [sp, #80]
   3cd34:	b	3d340 <extract_fields@@Base+0x1304>
   3cd38:	ldr	w0, [x19]
   3cd3c:	ubfx	x0, x0, #15, #2
   3cd40:	cmp	w0, #0x1
   3cd44:	b.eq	3cd6c <extract_fields@@Base+0xd30>  // b.none
   3cd48:	cmp	w0, #0x3
   3cd4c:	b.eq	3cd74 <extract_fields@@Base+0xd38>  // b.none
   3cd50:	mov	w24, #0x0                   	// #0
   3cd54:	cbz	w0, 3cd60 <extract_fields@@Base+0xd24>
   3cd58:	ldp	x27, x28, [sp, #80]
   3cd5c:	b	3d340 <extract_fields@@Base+0x1304>
   3cd60:	mov	w0, #0x7                   	// #7
   3cd64:	strb	w0, [x19, #28]
   3cd68:	b	3c284 <extract_fields@@Base+0x248>
   3cd6c:	mov	w0, #0x8                   	// #8
   3cd70:	b	3cd64 <extract_fields@@Base+0xd28>
   3cd74:	mov	w0, #0x6                   	// #6
   3cd78:	b	3cd64 <extract_fields@@Base+0xd28>
   3cd7c:	sub	w0, w0, #0x3d
   3cd80:	cmp	w0, #0x1
   3cd84:	b.hi	3cbd0 <extract_fields@@Base+0xb94>  // b.pmore
   3cd88:	strb	w2, [x19, #28]
   3cd8c:	b	3c284 <extract_fields@@Base+0x248>
   3cd90:	strb	w2, [x19, #84]
   3cd94:	b	3c284 <extract_fields@@Base+0x248>
   3cd98:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3cd9c:	ldr	x0, [x0, #3944]
   3cda0:	ldr	w0, [x0, #68]
   3cda4:	cmp	w0, #0x0
   3cda8:	b.le	3c8c4 <extract_fields@@Base+0x888>
   3cdac:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3cdb0:	ldr	x0, [x0, #3944]
   3cdb4:	ldr	w1, [x0, #64]
   3cdb8:	ldr	w0, [x19]
   3cdbc:	lsr	w0, w0, w1
   3cdc0:	tbz	w0, #0, 3c8c4 <extract_fields@@Base+0x888>
   3cdc4:	mov	w0, #0x7                   	// #7
   3cdc8:	strb	w0, [x19, #28]
   3cdcc:	b	3c284 <extract_fields@@Base+0x248>
   3cdd0:	ldr	w3, [x19]
   3cdd4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3cdd8:	ldr	x1, [x1, #3944]
   3cddc:	ldr	w2, [x1, #692]
   3cde0:	mov	w0, #0xffffffff            	// #-1
   3cde4:	lsl	w2, w0, w2
   3cde8:	ldr	w4, [x1, #688]
   3cdec:	lsr	w4, w3, w4
   3cdf0:	bic	w2, w4, w2
   3cdf4:	ldr	w4, [x1, #708]
   3cdf8:	lsl	w0, w0, w4
   3cdfc:	ldr	w1, [x1, #704]
   3ce00:	lsr	w3, w3, w1
   3ce04:	bic	w0, w3, w0
   3ce08:	cmp	w2, w0
   3ce0c:	cset	w24, eq  // eq = none
   3ce10:	b	3c5a4 <extract_fields@@Base+0x568>
   3ce14:	ldr	w3, [x19]
   3ce18:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3ce1c:	ldr	x1, [x1, #3944]
   3ce20:	ldr	w2, [x1, #716]
   3ce24:	mov	w0, #0xffffffff            	// #-1
   3ce28:	lsl	w2, w0, w2
   3ce2c:	ldr	w4, [x1, #712]
   3ce30:	lsr	w4, w3, w4
   3ce34:	bic	w2, w4, w2
   3ce38:	ldr	w4, [x1, #708]
   3ce3c:	lsl	w0, w0, w4
   3ce40:	ldr	w1, [x1, #704]
   3ce44:	lsr	w3, w3, w1
   3ce48:	bic	w0, w3, w0
   3ce4c:	cmp	w2, w0
   3ce50:	cset	w24, eq  // eq = none
   3ce54:	b	3c5a4 <extract_fields@@Base+0x568>
   3ce58:	mov	w4, #0x2b                  	// #43
   3ce5c:	mov	w3, #0x74                  	// #116
   3ce60:	mov	w2, #0x2                   	// #2
   3ce64:	mov	w1, #0x0                   	// #0
   3ce68:	ldr	w0, [x19]
   3ce6c:	bl	35390 <extract_fields@plt>
   3ce70:	cbz	w0, 3c8c4 <extract_fields@@Base+0x888>
   3ce74:	neg	w1, w0
   3ce78:	bics	wzr, w0, w1
   3ce7c:	b.ne	3c284 <extract_fields@@Base+0x248>  // b.any
   3ce80:	b	3c8c4 <extract_fields@@Base+0x888>
   3ce84:	ldr	w3, [x19]
   3ce88:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3ce8c:	ldr	x1, [x1, #3944]
   3ce90:	ldr	w2, [x1, #620]
   3ce94:	mov	w0, #0xffffffff            	// #-1
   3ce98:	lsl	w2, w0, w2
   3ce9c:	ldr	w4, [x1, #616]
   3cea0:	lsr	w4, w3, w4
   3cea4:	bic	w2, w4, w2
   3cea8:	ldr	w4, [x1, #612]
   3ceac:	lsl	w0, w0, w4
   3ceb0:	ldr	w1, [x1, #608]
   3ceb4:	lsr	w3, w3, w1
   3ceb8:	bic	w0, w3, w0
   3cebc:	cmp	w2, w0
   3cec0:	cset	w24, eq  // eq = none
   3cec4:	b	3c5a4 <extract_fields@@Base+0x568>
   3cec8:	mov	w4, #0x44                  	// #68
   3cecc:	mov	w3, #0x8                   	// #8
   3ced0:	mov	w2, #0x2                   	// #2
   3ced4:	mov	w1, #0x0                   	// #0
   3ced8:	ldr	w0, [x19]
   3cedc:	bl	35390 <extract_fields@plt>
   3cee0:	mov	w1, w0
   3cee4:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3cee8:	mov	w4, #0x2b                  	// #43
   3ceec:	mov	w3, #0x74                  	// #116
   3cef0:	mov	w2, #0x2                   	// #2
   3cef4:	mov	w1, #0x0                   	// #0
   3cef8:	ldr	w0, [x19]
   3cefc:	bl	35390 <extract_fields@plt>
   3cf00:	tst	x0, #0x1f
   3cf04:	b.eq	3d060 <extract_fields@@Base+0x1024>  // b.none
   3cf08:	and	w1, w0, #0x1
   3cf0c:	tbnz	w0, #0, 3d234 <extract_fields@@Base+0x11f8>
   3cf10:	asr	w0, w0, #1
   3cf14:	add	w1, w1, #0x1
   3cf18:	tbz	w0, #0, 3cf10 <extract_fields@@Base+0xed4>
   3cf1c:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3cf20:	ldr	w2, [x19]
   3cf24:	and	w0, w2, #0x3fe00
   3cf28:	and	w0, w0, #0xfffe07ff
   3cf2c:	mov	w1, #0x0                   	// #0
   3cf30:	cmp	w0, #0x600
   3cf34:	b.eq	3cfd8 <extract_fields@@Base+0xf9c>  // b.none
   3cf38:	and	w0, w2, #0x3fc00
   3cf3c:	and	w0, w0, #0xfffe07ff
   3cf40:	mov	w1, #0x1                   	// #1
   3cf44:	cmp	w0, #0x400
   3cf48:	b.eq	3cfd8 <extract_fields@@Base+0xf9c>  // b.none
   3cf4c:	ubfx	x1, x2, #17, #1
   3cf50:	add	w1, w1, #0x2
   3cf54:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3cf58:	mov	w4, #0x45                  	// #69
   3cf5c:	mov	w3, #0x8                   	// #8
   3cf60:	mov	w2, #0x2                   	// #2
   3cf64:	mov	w1, #0x0                   	// #0
   3cf68:	ldr	w0, [x19]
   3cf6c:	bl	35390 <extract_fields@plt>
   3cf70:	mov	w1, w0
   3cf74:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3cf78:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3cf7c:	ldr	x0, [x0, #3944]
   3cf80:	ldr	w2, [x0, #536]
   3cf84:	ldr	w1, [x19]
   3cf88:	lsr	w2, w1, w2
   3cf8c:	ldr	w0, [x0, #540]
   3cf90:	mov	w1, #0xffffffff            	// #-1
   3cf94:	lsl	w1, w1, w0
   3cf98:	bic	w1, w2, w1
   3cf9c:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3cfa0:	mov	w4, #0x75                  	// #117
   3cfa4:	mov	w3, #0x74                  	// #116
   3cfa8:	mov	w2, #0x2                   	// #2
   3cfac:	mov	w1, #0x0                   	// #0
   3cfb0:	ldr	w0, [x19]
   3cfb4:	bl	35390 <extract_fields@plt>
   3cfb8:	cbz	w0, 3d060 <extract_fields@@Base+0x1024>
   3cfbc:	cmp	w0, #0x1
   3cfc0:	b.eq	3d23c <extract_fields@@Base+0x1200>  // b.none
   3cfc4:	mov	w1, #0x0                   	// #0
   3cfc8:	asr	w0, w0, #1
   3cfcc:	add	w1, w1, #0x1
   3cfd0:	cmp	w0, #0x1
   3cfd4:	b.ne	3cfc8 <extract_fields@@Base+0xf8c>  // b.any
   3cfd8:	sbfiz	x0, x1, #1, #32
   3cfdc:	add	x0, x0, w1, sxtw
   3cfe0:	ldr	x1, [x19, #8]
   3cfe4:	add	x0, x1, x0, lsl #1
   3cfe8:	add	x1, x19, #0x1c
   3cfec:	add	x3, x19, #0x16c
   3cff0:	ldrb	w2, [x0, #56]
   3cff4:	strb	w2, [x1], #56
   3cff8:	add	x0, x0, #0x1
   3cffc:	cmp	x1, x3
   3d000:	b.ne	3cff0 <extract_fields@@Base+0xfb4>  // b.any
   3d004:	add	x28, x19, #0x168
   3d008:	adrp	x27, a3000 <aarch64_operands@@Base+0x16bc0>
   3d00c:	ldr	x26, [x27, #4032]
   3d010:	mov	x27, x26
   3d014:	b	3d27c <extract_fields@@Base+0x1240>
   3d018:	mov	w4, #0x76                  	// #118
   3d01c:	mov	w3, #0x74                  	// #116
   3d020:	mov	w2, #0x2                   	// #2
   3d024:	mov	w1, #0x0                   	// #0
   3d028:	ldr	w0, [x19]
   3d02c:	bl	35390 <extract_fields@plt>
   3d030:	b	3cfb8 <extract_fields@@Base+0xf7c>
   3d034:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3d038:	ldr	x0, [x0, #3944]
   3d03c:	ldr	w2, [x0, #64]
   3d040:	ldr	w1, [x19]
   3d044:	lsr	w2, w1, w2
   3d048:	ldr	w0, [x0, #68]
   3d04c:	mov	w1, #0xffffffff            	// #-1
   3d050:	lsl	w1, w1, w0
   3d054:	bic	w1, w2, w1
   3d058:	cmp	w1, #0x2
   3d05c:	b.le	3cfd8 <extract_fields@@Base+0xf9c>
   3d060:	mov	w24, #0x0                   	// #0
   3d064:	ldp	x27, x28, [sp, #80]
   3d068:	b	3d340 <extract_fields@@Base+0x1304>
   3d06c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3d070:	ldr	x0, [x0, #3944]
   3d074:	ldr	w2, [x0, #64]
   3d078:	ldr	w1, [x19]
   3d07c:	lsr	w2, w1, w2
   3d080:	ldr	w0, [x0, #68]
   3d084:	mov	w1, #0xffffffff            	// #-1
   3d088:	lsl	w1, w1, w0
   3d08c:	bic	w1, w2, w1
   3d090:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d094:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3d098:	ldr	x0, [x0, #3944]
   3d09c:	ldr	w2, [x0, #64]
   3d0a0:	ldr	w1, [x19]
   3d0a4:	lsr	w2, w1, w2
   3d0a8:	ldr	w0, [x0, #68]
   3d0ac:	mov	w1, #0xffffffff            	// #-1
   3d0b0:	lsl	w1, w1, w0
   3d0b4:	bic	w1, w2, w1
   3d0b8:	cmp	w1, #0x0
   3d0bc:	b.le	3d060 <extract_fields@@Base+0x1024>
   3d0c0:	sub	w1, w1, #0x1
   3d0c4:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d0c8:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3d0cc:	ldr	x0, [x0, #3944]
   3d0d0:	ldr	w2, [x0, #896]
   3d0d4:	ldr	w1, [x19]
   3d0d8:	lsr	w2, w1, w2
   3d0dc:	ldr	w0, [x0, #900]
   3d0e0:	mov	w1, #0xffffffff            	// #-1
   3d0e4:	lsl	w1, w1, w0
   3d0e8:	bic	w1, w2, w1
   3d0ec:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d0f0:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3d0f4:	ldr	x0, [x0, #3944]
   3d0f8:	ldr	w2, [x0, #912]
   3d0fc:	ldr	w1, [x19]
   3d100:	lsr	w2, w1, w2
   3d104:	ldr	w0, [x0, #916]
   3d108:	mov	w1, #0xffffffff            	// #-1
   3d10c:	lsl	w1, w1, w0
   3d110:	bic	w1, w2, w1
   3d114:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d118:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3d11c:	ldr	x0, [x0, #3944]
   3d120:	ldr	w2, [x0, #904]
   3d124:	ldr	w1, [x19]
   3d128:	lsr	w2, w1, w2
   3d12c:	ldr	w0, [x0, #908]
   3d130:	mov	w1, #0xffffffff            	// #-1
   3d134:	lsl	w1, w1, w0
   3d138:	bic	w1, w2, w1
   3d13c:	cmp	w1, #0x0
   3d140:	b.le	3d060 <extract_fields@@Base+0x1024>
   3d144:	sub	w1, w1, #0x1
   3d148:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d14c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3d150:	ldr	x0, [x0, #3944]
   3d154:	ldr	w2, [x0, #64]
   3d158:	ldr	w1, [x19]
   3d15c:	lsr	w2, w1, w2
   3d160:	ldr	w0, [x0, #68]
   3d164:	mov	w1, #0xffffffff            	// #-1
   3d168:	lsl	w1, w1, w0
   3d16c:	bic	w1, w2, w1
   3d170:	ubfx	x1, x1, #1, #1
   3d174:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d178:	mov	w4, #0x76                  	// #118
   3d17c:	mov	w3, #0x74                  	// #116
   3d180:	mov	w2, #0x2                   	// #2
   3d184:	mov	w1, #0x0                   	// #0
   3d188:	ldr	w0, [x19]
   3d18c:	bl	35390 <extract_fields@plt>
   3d190:	cbz	w0, 3d060 <extract_fields@@Base+0x1024>
   3d194:	cmp	w0, #0x1
   3d198:	b.eq	3d244 <extract_fields@@Base+0x1208>  // b.none
   3d19c:	mov	w1, #0x0                   	// #0
   3d1a0:	asr	w0, w0, #1
   3d1a4:	add	w1, w1, #0x1
   3d1a8:	cmp	w0, #0x1
   3d1ac:	b.ne	3d1a0 <extract_fields@@Base+0x1164>  // b.any
   3d1b0:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d1b4:	mov	w4, #0x76                  	// #118
   3d1b8:	mov	w3, #0x70                  	// #112
   3d1bc:	mov	w2, #0x2                   	// #2
   3d1c0:	mov	w1, #0x0                   	// #0
   3d1c4:	ldr	w0, [x19]
   3d1c8:	bl	35390 <extract_fields@plt>
   3d1cc:	cbz	w0, 3d060 <extract_fields@@Base+0x1024>
   3d1d0:	cmp	w0, #0x1
   3d1d4:	b.eq	3d24c <extract_fields@@Base+0x1210>  // b.none
   3d1d8:	and	w1, w0, #0x1
   3d1dc:	tbnz	w0, #0, 3d060 <extract_fields@@Base+0x1024>
   3d1e0:	asr	w0, w0, #1
   3d1e4:	add	w1, w1, #0x1
   3d1e8:	cmp	w0, #0x1
   3d1ec:	b.eq	3cfd8 <extract_fields@@Base+0xf9c>  // b.none
   3d1f0:	tbz	w0, #0, 3d1e0 <extract_fields@@Base+0x11a4>
   3d1f4:	b	3d060 <extract_fields@@Base+0x1024>
   3d1f8:	mov	w4, #0x76                  	// #118
   3d1fc:	mov	w3, #0x70                  	// #112
   3d200:	mov	w2, #0x2                   	// #2
   3d204:	mov	w1, #0x0                   	// #0
   3d208:	ldr	w0, [x19]
   3d20c:	bl	35390 <extract_fields@plt>
   3d210:	cbz	w0, 3d060 <extract_fields@@Base+0x1024>
   3d214:	cmp	w0, #0x1
   3d218:	b.eq	3d254 <extract_fields@@Base+0x1218>  // b.none
   3d21c:	mov	w1, #0x0                   	// #0
   3d220:	asr	w0, w0, #1
   3d224:	add	w1, w1, #0x1
   3d228:	cmp	w0, #0x1
   3d22c:	b.ne	3d220 <extract_fields@@Base+0x11e4>  // b.any
   3d230:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d234:	mov	w1, #0x0                   	// #0
   3d238:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d23c:	mov	w1, #0x0                   	// #0
   3d240:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d244:	mov	w1, #0x0                   	// #0
   3d248:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d24c:	mov	w1, #0x0                   	// #0
   3d250:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d254:	mov	w1, #0x0                   	// #0
   3d258:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d25c:	mov	w1, #0x0                   	// #0
   3d260:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d264:	mov	w1, #0x0                   	// #0
   3d268:	b	3cfd8 <extract_fields@@Base+0xf9c>
   3d26c:	add	x20, x20, #0x4
   3d270:	add	x22, x22, #0x38
   3d274:	cmp	x22, x28
   3d278:	b.eq	3d2c8 <extract_fields@@Base+0x128c>  // b.none
   3d27c:	ldr	w0, [x20]
   3d280:	cbz	w0, 3d2c8 <extract_fields@@Base+0x128c>
   3d284:	ubfiz	x1, x0, #1, #32
   3d288:	add	x1, x1, w0, uxtw
   3d28c:	add	x1, x26, x1, lsl #4
   3d290:	ldr	w1, [x1, #16]
   3d294:	tbz	w1, #1, 3d26c <extract_fields@@Base+0x1230>
   3d298:	ubfiz	x1, x0, #1, #32
   3d29c:	add	x0, x1, w0, uxtw
   3d2a0:	mov	x4, x25
   3d2a4:	mov	x3, x19
   3d2a8:	mov	w2, w23
   3d2ac:	mov	x1, x22
   3d2b0:	add	x0, x27, x0, lsl #4
   3d2b4:	bl	355f0 <aarch64_extract_operand@plt>
   3d2b8:	mov	w24, w0
   3d2bc:	cbnz	w0, 3d26c <extract_fields@@Base+0x1230>
   3d2c0:	ldp	x27, x28, [sp, #80]
   3d2c4:	b	3d340 <extract_fields@@Base+0x1304>
   3d2c8:	ldr	x6, [x21, #136]
   3d2cc:	cbz	x6, 3d2f4 <extract_fields@@Base+0x12b8>
   3d2d0:	mov	x5, #0x0                   	// #0
   3d2d4:	mov	x4, x25
   3d2d8:	mov	w3, #0x0                   	// #0
   3d2dc:	mov	x2, #0x0                   	// #0
   3d2e0:	mov	w1, w23
   3d2e4:	mov	x0, x19
   3d2e8:	blr	x6
   3d2ec:	mov	w24, #0x0                   	// #0
   3d2f0:	cbnz	w0, 3d394 <extract_fields@@Base+0x1358>
   3d2f4:	mov	x1, #0x0                   	// #0
   3d2f8:	mov	x0, x19
   3d2fc:	bl	354e0 <aarch64_match_operands_constraint@plt>
   3d300:	mov	w24, w0
   3d304:	cmp	w0, #0x1
   3d308:	b.eq	3d318 <extract_fields@@Base+0x12dc>  // b.none
   3d30c:	mov	w24, #0x0                   	// #0
   3d310:	ldp	x27, x28, [sp, #80]
   3d314:	b	3d340 <extract_fields@@Base+0x1304>
   3d318:	ldr	w0, [sp, #108]
   3d31c:	cbz	w0, 3d328 <extract_fields@@Base+0x12ec>
   3d320:	ldp	x27, x28, [sp, #80]
   3d324:	b	3d340 <extract_fields@@Base+0x1304>
   3d328:	mov	x1, x25
   3d32c:	mov	x0, x19
   3d330:	bl	3d39c <extract_fields@@Base+0x1360>
   3d334:	ldp	x27, x28, [sp, #80]
   3d338:	b	3d340 <extract_fields@@Base+0x1304>
   3d33c:	mov	w24, #0x0                   	// #0
   3d340:	mov	w0, w24
   3d344:	ldp	x19, x20, [sp, #16]
   3d348:	ldp	x21, x22, [sp, #32]
   3d34c:	ldp	x23, x24, [sp, #48]
   3d350:	ldp	x25, x26, [sp, #64]
   3d354:	ldp	x29, x30, [sp], #160
   3d358:	ret
   3d35c:	mov	w24, #0x0                   	// #0
   3d360:	ldp	x27, x28, [sp, #80]
   3d364:	b	3d340 <extract_fields@@Base+0x1304>
   3d368:	ldr	x0, [x19, #8]
   3d36c:	ldr	w0, [x0, #16]
   3d370:	sub	w0, w0, #0x47
   3d374:	cmp	w0, #0x12
   3d378:	b.hi	3d004 <extract_fields@@Base+0xfc8>  // b.pmore
   3d37c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3d380:	add	x1, x1, #0xa20
   3d384:	ldrh	w0, [x1, w0, uxtw #1]
   3d388:	adr	x1, 3d394 <extract_fields@@Base+0x1358>
   3d38c:	add	x0, x1, w0, sxth #2
   3d390:	br	x0
   3d394:	ldp	x27, x28, [sp, #80]
   3d398:	b	3d340 <extract_fields@@Base+0x1304>
   3d39c:	stp	x29, x30, [sp, #-480]!
   3d3a0:	mov	x29, sp
   3d3a4:	stp	x19, x20, [sp, #16]
   3d3a8:	stp	x21, x22, [sp, #32]
   3d3ac:	mov	x20, x0
   3d3b0:	ldr	x21, [x0, #8]
   3d3b4:	ldr	x0, [x21, #120]
   3d3b8:	tst	w0, #0x2
   3d3bc:	b.ne	3d3d0 <extract_fields@@Base+0x1394>  // b.any
   3d3c0:	ldp	x19, x20, [sp, #16]
   3d3c4:	ldp	x21, x22, [sp, #32]
   3d3c8:	ldp	x29, x30, [sp], #480
   3d3cc:	ret
   3d3d0:	stp	x23, x24, [sp, #48]
   3d3d4:	stp	x25, x26, [sp, #64]
   3d3d8:	stp	x27, x28, [sp, #80]
   3d3dc:	mov	x23, x1
   3d3e0:	mov	x0, x21
   3d3e4:	bl	35ba0 <aarch64_find_alias_opcode@plt>
   3d3e8:	mov	x19, x0
   3d3ec:	cbz	x0, 3d408 <extract_fields@@Base+0x13cc>
   3d3f0:	add	x22, sp, #0x78
   3d3f4:	mov	x24, #0x168                 	// #360
   3d3f8:	mov	w25, #0x1                   	// #1
   3d3fc:	mov	x26, #0x20                  	// #32
   3d400:	mov	x28, #0x40                  	// #64
   3d404:	b	3da74 <extract_fields@@Base+0x1a38>
   3d408:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3d40c:	add	x3, x3, #0xa48
   3d410:	add	x3, x3, #0x168
   3d414:	mov	w2, #0xa58                 	// #2648
   3d418:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3d41c:	add	x1, x1, #0x2e0
   3d420:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3d424:	add	x0, x0, #0x4e0
   3d428:	bl	35ac0 <__assert_fail@plt>
   3d42c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3d430:	add	x3, x3, #0xa48
   3d434:	add	x3, x3, #0x168
   3d438:	mov	w2, #0xa6b                 	// #2667
   3d43c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3d440:	add	x1, x1, #0x2e0
   3d444:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3d448:	add	x0, x0, #0x4e8
   3d44c:	bl	35ac0 <__assert_fail@plt>
   3d450:	mov	x1, x19
   3d454:	mov	x0, x20
   3d458:	bl	35410 <aarch64_replace_opcode@plt>
   3d45c:	ldp	x23, x24, [sp, #48]
   3d460:	ldp	x25, x26, [sp, #64]
   3d464:	ldp	x27, x28, [sp, #80]
   3d468:	b	3d3c0 <extract_fields@@Base+0x1384>
   3d46c:	cmp	w0, #0x29
   3d470:	b.eq	3d67c <extract_fields@@Base+0x1640>  // b.none
   3d474:	sub	w0, w0, #0x2b
   3d478:	cmp	w0, #0x2
   3d47c:	b.hi	3da64 <extract_fields@@Base+0x1a28>  // b.pmore
   3d480:	ldr	x1, [sp, #272]
   3d484:	ldr	x0, [sp, #328]
   3d488:	cmp	x1, x0
   3d48c:	b.gt	3da64 <extract_fields@@Base+0x1a28>
   3d490:	add	x0, x0, #0x1
   3d494:	sub	x0, x0, x1
   3d498:	str	x0, [sp, #328]
   3d49c:	ldr	x0, [sp, #128]
   3d4a0:	bl	35170 <aarch64_num_of_operands@plt>
   3d4a4:	cmp	w0, #0x2
   3d4a8:	b.le	3d72c <extract_fields@@Base+0x16f0>
   3d4ac:	strb	wzr, [sp, #260]
   3d4b0:	ldr	x0, [sp, #128]
   3d4b4:	bl	35170 <aarch64_num_of_operands@plt>
   3d4b8:	cmp	w0, #0x3
   3d4bc:	b.le	3d750 <extract_fields@@Base+0x1714>
   3d4c0:	strb	wzr, [sp, #316]
   3d4c4:	b	3d900 <extract_fields@@Base+0x18c4>
   3d4c8:	cmp	w0, #0x39
   3d4cc:	b.hi	3d630 <extract_fields@@Base+0x15f4>  // b.pmore
   3d4d0:	cmp	w0, #0x37
   3d4d4:	b.hi	3d6c0 <extract_fields@@Base+0x1684>  // b.pmore
   3d4d8:	cmp	w0, #0x31
   3d4dc:	b.eq	3d774 <extract_fields@@Base+0x1738>  // b.none
   3d4e0:	b.ls	3d550 <extract_fields@@Base+0x1514>  // b.plast
   3d4e4:	sub	w0, w0, #0x35
   3d4e8:	cmp	w0, #0x2
   3d4ec:	b.hi	3da64 <extract_fields@@Base+0x1a28>  // b.pmore
   3d4f0:	ldr	w1, [sp, #216]
   3d4f4:	ldr	w0, [sp, #272]
   3d4f8:	cmp	w1, w0
   3d4fc:	b.ne	3da64 <extract_fields@@Base+0x1a28>  // b.any
   3d500:	ldr	x0, [sp, #328]
   3d504:	ldr	w1, [x0, #32]
   3d508:	and	w1, w1, #0xe
   3d50c:	cmp	w1, #0xe
   3d510:	b.eq	3da64 <extract_fields@@Base+0x1a28>  // b.none
   3d514:	add	x1, sp, #0x210
   3d518:	ldp	x2, x3, [x1, #-216]
   3d51c:	stp	x2, x3, [sp, #256]
   3d520:	ldp	x2, x3, [x1, #-200]
   3d524:	stp	x2, x3, [sp, #272]
   3d528:	ldp	x2, x3, [x1, #-184]
   3d52c:	stp	x2, x3, [sp, #288]
   3d530:	ldr	x1, [sp, #360]
   3d534:	str	x1, [sp, #304]
   3d538:	mov	w1, #0x2                   	// #2
   3d53c:	str	w1, [sp, #264]
   3d540:	bl	35870 <get_inverted_cond@plt>
   3d544:	str	x0, [sp, #272]
   3d548:	str	wzr, [sp, #312]
   3d54c:	b	3d900 <extract_fields@@Base+0x18c4>
   3d550:	cmp	w0, #0x30
   3d554:	b.ne	3da64 <extract_fields@@Base+0x1a28>  // b.any
   3d558:	ldr	w0, [sp, #216]
   3d55c:	cmp	w0, #0x1f
   3d560:	b.ne	3d81c <extract_fields@@Base+0x17e0>  // b.any
   3d564:	ldr	x0, [sp, #272]
   3d568:	ldr	x1, [sp, #328]
   3d56c:	ldrb	w2, [sp, #260]
   3d570:	cmp	w2, #0x1d
   3d574:	csel	x2, x26, x28, eq  // eq = none
   3d578:	cmp	x0, x1
   3d57c:	b.le	3da64 <extract_fields@@Base+0x1a28>
   3d580:	ldp	x4, x5, [sp, #256]
   3d584:	stp	x4, x5, [sp, #200]
   3d588:	ldp	x4, x5, [sp, #272]
   3d58c:	stp	x4, x5, [sp, #216]
   3d590:	ldp	x4, x5, [sp, #288]
   3d594:	stp	x4, x5, [sp, #232]
   3d598:	ldr	x3, [sp, #304]
   3d59c:	str	x3, [sp, #248]
   3d5a0:	mov	w3, #0x1                   	// #1
   3d5a4:	str	w3, [sp, #208]
   3d5a8:	add	x3, sp, #0x210
   3d5ac:	ldp	x4, x5, [x3, #-216]
   3d5b0:	stp	x4, x5, [sp, #256]
   3d5b4:	ldp	x4, x5, [x3, #-200]
   3d5b8:	stp	x4, x5, [sp, #272]
   3d5bc:	ldp	x4, x5, [x3, #-184]
   3d5c0:	stp	x4, x5, [sp, #288]
   3d5c4:	ldr	x3, [sp, #360]
   3d5c8:	str	x3, [sp, #304]
   3d5cc:	mov	w3, #0x2                   	// #2
   3d5d0:	str	w3, [sp, #264]
   3d5d4:	str	wzr, [sp, #312]
   3d5d8:	sub	x0, x2, x0
   3d5dc:	sub	x2, x2, #0x1
   3d5e0:	and	x0, x0, x2
   3d5e4:	str	x0, [sp, #216]
   3d5e8:	add	x1, x1, #0x1
   3d5ec:	str	x1, [sp, #272]
   3d5f0:	ldr	x0, [sp, #128]
   3d5f4:	bl	35170 <aarch64_num_of_operands@plt>
   3d5f8:	cmp	w0, #0x1
   3d5fc:	b.le	3d840 <extract_fields@@Base+0x1804>
   3d600:	strb	wzr, [sp, #204]
   3d604:	ldr	x0, [sp, #128]
   3d608:	bl	35170 <aarch64_num_of_operands@plt>
   3d60c:	cmp	w0, #0x2
   3d610:	b.le	3d864 <extract_fields@@Base+0x1828>
   3d614:	strb	wzr, [sp, #260]
   3d618:	ldr	x0, [sp, #128]
   3d61c:	bl	35170 <aarch64_num_of_operands@plt>
   3d620:	cmp	w0, #0x3
   3d624:	b.le	3d888 <extract_fields@@Base+0x184c>
   3d628:	strb	wzr, [sp, #316]
   3d62c:	b	3d900 <extract_fields@@Base+0x18c4>
   3d630:	cmp	w0, #0x40
   3d634:	b.eq	3d9c4 <extract_fields@@Base+0x1988>  // b.none
   3d638:	sub	w0, w0, #0x41
   3d63c:	cmp	w0, #0x3
   3d640:	b.hi	3da64 <extract_fields@@Base+0x1a28>  // b.pmore
   3d644:	ldr	x0, [sp, #272]
   3d648:	cbnz	x0, 3da64 <extract_fields@@Base+0x1a28>
   3d64c:	str	wzr, [sp, #256]
   3d650:	b	3d900 <extract_fields@@Base+0x18c4>
   3d654:	ldrb	w0, [sp, #260]
   3d658:	cmp	w0, #0x1d
   3d65c:	mov	x0, #0x1f                  	// #31
   3d660:	mov	x1, #0x3f                  	// #63
   3d664:	csel	x0, x0, x1, eq  // eq = none
   3d668:	ldr	x1, [sp, #328]
   3d66c:	cmp	x1, x0
   3d670:	b.ne	3da64 <extract_fields@@Base+0x1a28>  // b.any
   3d674:	str	wzr, [sp, #312]
   3d678:	b	3d900 <extract_fields@@Base+0x18c4>
   3d67c:	ldr	x2, [sp, #272]
   3d680:	ldr	x1, [sp, #328]
   3d684:	ldrb	w0, [sp, #260]
   3d688:	cmp	w0, #0x1d
   3d68c:	mov	x0, #0x1f                  	// #31
   3d690:	mov	x3, #0x3f                  	// #63
   3d694:	csel	x0, x0, x3, eq  // eq = none
   3d698:	cmp	x2, #0x0
   3d69c:	ccmp	x1, x0, #0x0, eq  // eq = none
   3d6a0:	b.eq	3d6b0 <extract_fields@@Base+0x1674>  // b.none
   3d6a4:	add	x3, x1, #0x1
   3d6a8:	cmp	x2, x3
   3d6ac:	b.ne	3da64 <extract_fields@@Base+0x1a28>  // b.any
   3d6b0:	str	wzr, [sp, #312]
   3d6b4:	sub	x0, x0, x1
   3d6b8:	str	x0, [sp, #272]
   3d6bc:	b	3d900 <extract_fields@@Base+0x18c4>
   3d6c0:	ldr	w0, [sp, #216]
   3d6c4:	cmp	w0, #0x1f
   3d6c8:	b.ne	3da64 <extract_fields@@Base+0x1a28>  // b.any
   3d6cc:	ldr	w0, [sp, #272]
   3d6d0:	cmp	w0, #0x1f
   3d6d4:	b.ne	3da64 <extract_fields@@Base+0x1a28>  // b.any
   3d6d8:	ldr	x0, [sp, #328]
   3d6dc:	ldr	w1, [x0, #32]
   3d6e0:	and	w1, w1, #0xe
   3d6e4:	cmp	w1, #0xe
   3d6e8:	b.eq	3da64 <extract_fields@@Base+0x1a28>  // b.none
   3d6ec:	add	x1, sp, #0x210
   3d6f0:	ldp	x2, x3, [x1, #-216]
   3d6f4:	stp	x2, x3, [sp, #200]
   3d6f8:	ldp	x2, x3, [x1, #-200]
   3d6fc:	stp	x2, x3, [sp, #216]
   3d700:	ldp	x2, x3, [x1, #-184]
   3d704:	stp	x2, x3, [sp, #232]
   3d708:	ldr	x1, [sp, #360]
   3d70c:	str	x1, [sp, #248]
   3d710:	mov	w1, #0x1                   	// #1
   3d714:	str	w1, [sp, #208]
   3d718:	bl	35870 <get_inverted_cond@plt>
   3d71c:	str	x0, [sp, #216]
   3d720:	str	wzr, [sp, #312]
   3d724:	str	wzr, [sp, #256]
   3d728:	b	3d900 <extract_fields@@Base+0x18c4>
   3d72c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3d730:	add	x3, x3, #0xa48
   3d734:	add	x3, x3, #0x190
   3d738:	mov	w2, #0x148                 	// #328
   3d73c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3d740:	add	x1, x1, #0x970
   3d744:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3d748:	add	x0, x0, #0x520
   3d74c:	bl	35ac0 <__assert_fail@plt>
   3d750:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3d754:	add	x3, x3, #0xa48
   3d758:	add	x3, x3, #0x190
   3d75c:	mov	w2, #0x148                 	// #328
   3d760:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3d764:	add	x1, x1, #0x970
   3d768:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3d76c:	add	x0, x0, #0x520
   3d770:	bl	35ac0 <__assert_fail@plt>
   3d774:	ldr	x0, [sp, #272]
   3d778:	ldr	x1, [sp, #328]
   3d77c:	ldrb	w2, [sp, #260]
   3d780:	cmp	w2, #0x1d
   3d784:	csel	x2, x26, x28, eq  // eq = none
   3d788:	cmp	x0, x1
   3d78c:	b.le	3da64 <extract_fields@@Base+0x1a28>
   3d790:	sub	x0, x2, x0
   3d794:	sub	x2, x2, #0x1
   3d798:	and	x0, x0, x2
   3d79c:	str	x0, [sp, #272]
   3d7a0:	add	x1, x1, #0x1
   3d7a4:	str	x1, [sp, #328]
   3d7a8:	ldr	x0, [sp, #128]
   3d7ac:	bl	35170 <aarch64_num_of_operands@plt>
   3d7b0:	cmp	w0, #0x2
   3d7b4:	b.le	3d7d4 <extract_fields@@Base+0x1798>
   3d7b8:	strb	wzr, [sp, #260]
   3d7bc:	ldr	x0, [sp, #128]
   3d7c0:	bl	35170 <aarch64_num_of_operands@plt>
   3d7c4:	cmp	w0, #0x3
   3d7c8:	b.le	3d7f8 <extract_fields@@Base+0x17bc>
   3d7cc:	strb	wzr, [sp, #316]
   3d7d0:	b	3d900 <extract_fields@@Base+0x18c4>
   3d7d4:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3d7d8:	add	x3, x3, #0xa48
   3d7dc:	add	x3, x3, #0x190
   3d7e0:	mov	w2, #0x148                 	// #328
   3d7e4:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3d7e8:	add	x1, x1, #0x970
   3d7ec:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3d7f0:	add	x0, x0, #0x520
   3d7f4:	bl	35ac0 <__assert_fail@plt>
   3d7f8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3d7fc:	add	x3, x3, #0xa48
   3d800:	add	x3, x3, #0x190
   3d804:	mov	w2, #0x148                 	// #328
   3d808:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3d80c:	add	x1, x1, #0x970
   3d810:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3d814:	add	x0, x0, #0x520
   3d818:	bl	35ac0 <__assert_fail@plt>
   3d81c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3d820:	add	x3, x3, #0xa48
   3d824:	add	x3, x3, #0x1a8
   3d828:	mov	w2, #0x941                 	// #2369
   3d82c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3d830:	add	x1, x1, #0x2e0
   3d834:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3d838:	add	x0, x0, #0x558
   3d83c:	bl	35ac0 <__assert_fail@plt>
   3d840:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3d844:	add	x3, x3, #0xa48
   3d848:	add	x3, x3, #0x190
   3d84c:	mov	w2, #0x148                 	// #328
   3d850:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3d854:	add	x1, x1, #0x970
   3d858:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3d85c:	add	x0, x0, #0x520
   3d860:	bl	35ac0 <__assert_fail@plt>
   3d864:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3d868:	add	x3, x3, #0xa48
   3d86c:	add	x3, x3, #0x190
   3d870:	mov	w2, #0x148                 	// #328
   3d874:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3d878:	add	x1, x1, #0x970
   3d87c:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3d880:	add	x0, x0, #0x520
   3d884:	bl	35ac0 <__assert_fail@plt>
   3d888:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3d88c:	add	x3, x3, #0xa48
   3d890:	add	x3, x3, #0x190
   3d894:	mov	w2, #0x148                 	// #328
   3d898:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3d89c:	add	x1, x1, #0x970
   3d8a0:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3d8a4:	add	x0, x0, #0x520
   3d8a8:	bl	35ac0 <__assert_fail@plt>
   3d8ac:	ldr	w1, [sp, #216]
   3d8b0:	ldr	w0, [sp, #272]
   3d8b4:	cmp	w1, w0
   3d8b8:	b.ne	3da64 <extract_fields@@Base+0x1a28>  // b.any
   3d8bc:	str	wzr, [sp, #256]
   3d8c0:	b	3d900 <extract_fields@@Base+0x18c4>
   3d8c4:	ldr	x0, [sp, #216]
   3d8c8:	cbnz	x0, 3d8d4 <extract_fields@@Base+0x1898>
   3d8cc:	ldr	x1, [sp, #240]
   3d8d0:	cbnz	x1, 3da64 <extract_fields@@Base+0x1a28>
   3d8d4:	mov	w1, #0x48                  	// #72
   3d8d8:	str	w1, [sp, #200]
   3d8dc:	str	wzr, [sp, #232]
   3d8e0:	ldr	x27, [sp, #240]
   3d8e4:	lsl	x27, x0, x27
   3d8e8:	ldr	x0, [sp, #128]
   3d8ec:	ldr	w0, [x0, #20]
   3d8f0:	cmp	w0, #0x20
   3d8f4:	b.eq	3d940 <extract_fields@@Base+0x1904>  // b.none
   3d8f8:	str	x27, [sp, #216]
   3d8fc:	str	xzr, [sp, #240]
   3d900:	add	x0, sp, #0x78
   3d904:	mov	x1, x19
   3d908:	mov	x19, x0
   3d90c:	bl	35410 <aarch64_replace_opcode@plt>
   3d910:	mov	x1, #0x0                   	// #0
   3d914:	mov	x0, x19
   3d918:	bl	354e0 <aarch64_match_operands_constraint@plt>
   3d91c:	cbz	w0, 3da10 <extract_fields@@Base+0x19d4>
   3d920:	mov	x2, #0x168                 	// #360
   3d924:	add	x1, sp, #0x78
   3d928:	mov	x0, x20
   3d92c:	bl	35050 <memcpy@plt>
   3d930:	ldp	x23, x24, [sp, #48]
   3d934:	ldp	x25, x26, [sp, #64]
   3d938:	ldp	x27, x28, [sp, #80]
   3d93c:	b	3d3c0 <extract_fields@@Base+0x1384>
   3d940:	mvn	x27, x27
   3d944:	ldrb	w0, [sp, #148]
   3d948:	cmp	w0, #0x1
   3d94c:	mov	x2, #0x0                   	// #0
   3d950:	cset	w1, eq  // eq = none
   3d954:	mov	x0, x27
   3d958:	bl	35a40 <aarch64_wide_constant_p@plt>
   3d95c:	cbz	w0, 3d8f8 <extract_fields@@Base+0x18bc>
   3d960:	b	3da64 <extract_fields@@Base+0x1a28>
   3d964:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3d968:	add	x3, x3, #0xa48
   3d96c:	add	x3, x3, #0x1c0
   3d970:	mov	w2, #0x9d0                 	// #2512
   3d974:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3d978:	add	x1, x1, #0x2e0
   3d97c:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3d980:	add	x0, x0, #0x558
   3d984:	bl	35ac0 <__assert_fail@plt>
   3d988:	cmp	w1, #0x1
   3d98c:	cset	w0, eq  // eq = none
   3d990:	ldr	x27, [sp, #216]
   3d994:	mov	x2, #0x0                   	// #0
   3d998:	str	w0, [sp, #108]
   3d99c:	mov	w1, w0
   3d9a0:	mov	x0, x27
   3d9a4:	bl	35a40 <aarch64_wide_constant_p@plt>
   3d9a8:	cbnz	w0, 3da64 <extract_fields@@Base+0x1a28>
   3d9ac:	mov	x2, #0x0                   	// #0
   3d9b0:	ldr	w1, [sp, #108]
   3d9b4:	mvn	x0, x27
   3d9b8:	bl	35a40 <aarch64_wide_constant_p@plt>
   3d9bc:	cbz	w0, 3db58 <extract_fields@@Base+0x1b1c>
   3d9c0:	b	3da64 <extract_fields@@Base+0x1a28>
   3d9c4:	ldr	w1, [sp, #216]
   3d9c8:	ldr	w0, [sp, #272]
   3d9cc:	cmp	w1, w0
   3d9d0:	b.ne	3da64 <extract_fields@@Base+0x1a28>  // b.any
   3d9d4:	add	x0, sp, #0x210
   3d9d8:	ldp	x0, x1, [x0, #-216]
   3d9dc:	stp	x0, x1, [sp, #256]
   3d9e0:	add	x0, sp, #0x210
   3d9e4:	ldp	x0, x1, [x0, #-200]
   3d9e8:	stp	x0, x1, [sp, #272]
   3d9ec:	add	x0, sp, #0x210
   3d9f0:	ldp	x0, x1, [x0, #-184]
   3d9f4:	stp	x0, x1, [sp, #288]
   3d9f8:	ldr	x0, [sp, #360]
   3d9fc:	str	x0, [sp, #304]
   3da00:	mov	w0, #0x2                   	// #2
   3da04:	str	w0, [sp, #264]
   3da08:	str	wzr, [sp, #312]
   3da0c:	b	3d900 <extract_fields@@Base+0x18c4>
   3da10:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3da14:	add	x3, x3, #0xa48
   3da18:	add	x3, x3, #0x168
   3da1c:	mov	w2, #0xa8c                 	// #2700
   3da20:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3da24:	add	x1, x1, #0x2e0
   3da28:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3da2c:	add	x0, x0, #0x580
   3da30:	bl	35ac0 <__assert_fail@plt>
   3da34:	mov	x2, x24
   3da38:	mov	w1, #0x0                   	// #0
   3da3c:	mov	x0, x22
   3da40:	bl	35470 <memset@plt>
   3da44:	mov	x4, x23
   3da48:	mov	w3, w25
   3da4c:	mov	x2, x22
   3da50:	ldr	w1, [x20]
   3da54:	mov	x0, x19
   3da58:	bl	3c170 <extract_fields@@Base+0x134>
   3da5c:	cmp	w0, #0x1
   3da60:	b.eq	3db60 <extract_fields@@Base+0x1b24>  // b.none
   3da64:	mov	x0, x19
   3da68:	bl	35ae0 <aarch64_find_next_alias_opcode@plt>
   3da6c:	mov	x19, x0
   3da70:	cbz	x0, 3db80 <extract_fields@@Base+0x1b44>
   3da74:	ldr	x0, [x19, #120]
   3da78:	tbnz	w0, #0, 3da84 <extract_fields@@Base+0x1a48>
   3da7c:	ldr	x1, [x21, #120]
   3da80:	tbz	w1, #1, 3d42c <extract_fields@@Base+0x13f0>
   3da84:	tbnz	w0, #21, 3da64 <extract_fields@@Base+0x1a28>
   3da88:	ldr	w0, [x20]
   3da8c:	ldr	w1, [x19, #12]
   3da90:	and	w0, w0, w1
   3da94:	ldr	w1, [x19, #8]
   3da98:	cmp	w0, w1
   3da9c:	b.ne	3da64 <extract_fields@@Base+0x1a28>  // b.any
   3daa0:	mov	x0, x19
   3daa4:	bl	35170 <aarch64_num_of_operands@plt>
   3daa8:	cbnz	w0, 3dabc <extract_fields@@Base+0x1a80>
   3daac:	ldr	w1, [x19, #8]
   3dab0:	ldr	w0, [x20]
   3dab4:	cmp	w1, w0
   3dab8:	b.eq	3d450 <extract_fields@@Base+0x1414>  // b.none
   3dabc:	ldr	x0, [x19, #120]
   3dac0:	tbz	w0, #20, 3da34 <extract_fields@@Base+0x19f8>
   3dac4:	mov	x2, x24
   3dac8:	mov	x1, x20
   3dacc:	mov	x0, x22
   3dad0:	bl	35050 <memcpy@plt>
   3dad4:	ldr	w0, [x19, #20]
   3dad8:	cmp	w0, #0x2f
   3dadc:	b.hi	3d4c8 <extract_fields@@Base+0x148c>  // b.pmore
   3dae0:	cmp	w0, #0x2d
   3dae4:	b.hi	3d774 <extract_fields@@Base+0x1738>  // b.pmore
   3dae8:	cmp	w0, #0x28
   3daec:	b.hi	3d46c <extract_fields@@Base+0x1430>  // b.pmore
   3daf0:	cmp	w0, #0x26
   3daf4:	b.hi	3d654 <extract_fields@@Base+0x1618>  // b.pmore
   3daf8:	cmp	w0, #0x25
   3dafc:	b.hi	3d8ac <extract_fields@@Base+0x1870>  // b.pmore
   3db00:	cmp	w0, #0x23
   3db04:	b.hi	3d8c4 <extract_fields@@Base+0x1888>  // b.pmore
   3db08:	cmp	w0, #0x23
   3db0c:	b.ne	3da64 <extract_fields@@Base+0x1a28>  // b.any
   3db10:	ldr	w0, [sp, #216]
   3db14:	cmp	w0, #0x1f
   3db18:	b.ne	3d964 <extract_fields@@Base+0x1928>  // b.any
   3db1c:	ldp	x0, x1, [sp, #256]
   3db20:	stp	x0, x1, [sp, #200]
   3db24:	ldp	x0, x1, [sp, #272]
   3db28:	stp	x0, x1, [sp, #216]
   3db2c:	ldp	x0, x1, [sp, #288]
   3db30:	stp	x0, x1, [sp, #232]
   3db34:	ldr	x0, [sp, #304]
   3db38:	str	x0, [sp, #248]
   3db3c:	str	w25, [sp, #208]
   3db40:	ldrb	w1, [sp, #148]
   3db44:	mov	w0, #0x48                  	// #72
   3db48:	str	w0, [sp, #200]
   3db4c:	ldr	w0, [sp, #160]
   3db50:	cmp	w0, #0x1f
   3db54:	b.ne	3d988 <extract_fields@@Base+0x194c>  // b.any
   3db58:	str	wzr, [sp, #256]
   3db5c:	b	3d900 <extract_fields@@Base+0x18c4>
   3db60:	mov	x2, #0x168                 	// #360
   3db64:	add	x1, sp, #0x78
   3db68:	mov	x0, x20
   3db6c:	bl	35050 <memcpy@plt>
   3db70:	ldp	x23, x24, [sp, #48]
   3db74:	ldp	x25, x26, [sp, #64]
   3db78:	ldp	x27, x28, [sp, #80]
   3db7c:	b	3d3c0 <extract_fields@@Base+0x1384>
   3db80:	ldp	x23, x24, [sp, #48]
   3db84:	ldp	x25, x26, [sp, #64]
   3db88:	ldp	x27, x28, [sp, #80]
   3db8c:	b	3d3c0 <extract_fields@@Base+0x1384>

000000000003db90 <aarch64_ext_regno@@Base>:
   3db90:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   3db94:	ldr	x4, [x4, #3944]
   3db98:	ldr	w3, [x0, #20]
   3db9c:	lsl	x3, x3, #3
   3dba0:	add	x0, x4, x3
   3dba4:	ldr	w5, [x0, #4]
   3dba8:	mov	w0, #0xffffffff            	// #-1
   3dbac:	lsl	w0, w0, w5
   3dbb0:	ldr	w3, [x4, x3]
   3dbb4:	lsr	w2, w2, w3
   3dbb8:	bic	w0, w2, w0
   3dbbc:	str	w0, [x1, #16]
   3dbc0:	mov	w0, #0x1                   	// #1
   3dbc4:	ret

000000000003dbc8 <aarch64_ext_regno_pair@@Base>:
   3dbc8:	ldr	w0, [x1, #8]
   3dbcc:	and	w2, w0, #0xfffffffd
   3dbd0:	cmp	w2, #0x1
   3dbd4:	b.ne	3dbfc <aarch64_ext_regno_pair@@Base+0x34>  // b.any
   3dbd8:	sub	w0, w0, #0x1
   3dbdc:	sbfiz	x2, x0, #3, #32
   3dbe0:	sub	x0, x2, w0, sxtw
   3dbe4:	add	x0, x3, x0, lsl #3
   3dbe8:	ldr	w0, [x0, #40]
   3dbec:	add	w0, w0, #0x1
   3dbf0:	str	w0, [x1, #16]
   3dbf4:	mov	w0, #0x1                   	// #1
   3dbf8:	ret
   3dbfc:	stp	x29, x30, [sp, #-16]!
   3dc00:	mov	x29, sp
   3dc04:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3dc08:	add	x3, x3, #0xa48
   3dc0c:	add	x3, x3, #0x1e0
   3dc10:	mov	w2, #0x10e                 	// #270
   3dc14:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3dc18:	add	x1, x1, #0x2e0
   3dc1c:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3dc20:	add	x0, x0, #0x5b0
   3dc24:	bl	35ac0 <__assert_fail@plt>

000000000003dc28 <aarch64_ext_regrt_sysins@@Base>:
   3dc28:	stp	x29, x30, [sp, #-32]!
   3dc2c:	mov	x29, sp
   3dc30:	stp	x19, x20, [sp, #16]
   3dc34:	mov	x19, x1
   3dc38:	mov	x20, x3
   3dc3c:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   3dc40:	ldr	x4, [x4, #3944]
   3dc44:	ldr	w1, [x0, #20]
   3dc48:	lsl	x1, x1, #3
   3dc4c:	add	x0, x4, x1
   3dc50:	ldr	w3, [x0, #4]
   3dc54:	mov	w0, #0xffffffff            	// #-1
   3dc58:	lsl	w0, w0, w3
   3dc5c:	ldr	w1, [x4, x1]
   3dc60:	lsr	w2, w2, w1
   3dc64:	bic	w0, w2, w0
   3dc68:	str	w0, [x19, #16]
   3dc6c:	ldr	w0, [x19, #8]
   3dc70:	cmp	w0, #0x1
   3dc74:	b.ne	3dcac <aarch64_ext_regrt_sysins@@Base+0x84>  // b.any
   3dc78:	ldr	w0, [x20, #24]
   3dc7c:	bl	35710 <aarch64_get_operand_class@plt>
   3dc80:	cmp	w0, #0xc
   3dc84:	b.ne	3dcac <aarch64_ext_regrt_sysins@@Base+0x84>  // b.any
   3dc88:	ldr	x0, [x20, #40]
   3dc8c:	bl	35a00 <aarch64_sys_ins_reg_has_xt@plt>
   3dc90:	ldrb	w1, [x19, #48]
   3dc94:	bfi	w1, w0, #1, #1
   3dc98:	strb	w1, [x19, #48]
   3dc9c:	mov	w0, #0x1                   	// #1
   3dca0:	ldp	x19, x20, [sp, #16]
   3dca4:	ldp	x29, x30, [sp], #32
   3dca8:	ret
   3dcac:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3dcb0:	add	x3, x3, #0xa48
   3dcb4:	add	x3, x3, #0x1f8
   3dcb8:	mov	w2, #0x11c                 	// #284
   3dcbc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3dcc0:	add	x1, x1, #0x2e0
   3dcc4:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3dcc8:	add	x0, x0, #0x5d0
   3dccc:	bl	35ac0 <__assert_fail@plt>

000000000003dcd0 <aarch64_ext_reglane@@Base>:
   3dcd0:	stp	x29, x30, [sp, #-64]!
   3dcd4:	mov	x29, sp
   3dcd8:	stp	x19, x20, [sp, #16]
   3dcdc:	stp	x21, x22, [sp, #32]
   3dce0:	mov	x19, x1
   3dce4:	mov	w21, w2
   3dce8:	mov	x20, x3
   3dcec:	ldr	x1, [x3, #8]
   3dcf0:	ldr	w1, [x1, #12]
   3dcf4:	bic	w1, w2, w1
   3dcf8:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   3dcfc:	ldr	x2, [x2, #3944]
   3dd00:	ldr	w0, [x0, #20]
   3dd04:	lsl	x0, x0, #3
   3dd08:	add	x3, x2, x0
   3dd0c:	ldr	w0, [x2, x0]
   3dd10:	lsr	w1, w1, w0
   3dd14:	ldr	w2, [x3, #4]
   3dd18:	mov	w0, #0xffffffff            	// #-1
   3dd1c:	lsl	w0, w0, w2
   3dd20:	bic	w0, w1, w0
   3dd24:	str	w0, [x19, #16]
   3dd28:	ldr	x1, [x20, #8]
   3dd2c:	ldr	w0, [x1, #16]
   3dd30:	cmp	w0, #0x17
   3dd34:	ccmp	w0, #0xa, #0x4, ne  // ne = any
   3dd38:	b.ne	3df08 <aarch64_ext_reglane@@Base+0x238>  // b.any
   3dd3c:	ldr	w0, [x19]
   3dd40:	cmp	w0, #0x20
   3dd44:	b.eq	3dda4 <aarch64_ext_reglane@@Base+0xd4>  // b.none
   3dd48:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3dd4c:	ldr	x0, [x0, #3944]
   3dd50:	ldr	w1, [x0, #348]
   3dd54:	mov	w20, #0xffffffff            	// #-1
   3dd58:	lsl	w20, w20, w1
   3dd5c:	ldr	w2, [x0, #344]
   3dd60:	lsr	w21, w21, w2
   3dd64:	bic	w20, w21, w20
   3dd68:	mov	w22, #0x0                   	// #0
   3dd6c:	mov	w21, #0xffffffff            	// #-1
   3dd70:	tbnz	w20, #0, 3dea8 <aarch64_ext_reglane@@Base+0x1d8>
   3dd74:	lsr	w0, w20, #1
   3dd78:	tbnz	w20, #1, 3de9c <aarch64_ext_reglane@@Base+0x1cc>
   3dd7c:	lsr	w0, w20, #2
   3dd80:	tbnz	w20, #2, 3ded4 <aarch64_ext_reglane@@Base+0x204>
   3dd84:	lsr	w20, w20, #3
   3dd88:	mov	w22, #0x0                   	// #0
   3dd8c:	tbnz	w20, #0, 3e0cc <aarch64_ext_reglane@@Base+0x3fc>
   3dd90:	mov	w0, w22
   3dd94:	ldp	x19, x20, [sp, #16]
   3dd98:	ldp	x21, x22, [sp, #32]
   3dd9c:	ldp	x29, x30, [sp], #64
   3dda0:	ret
   3dda4:	ldr	w0, [x1, #32]
   3dda8:	cmp	w0, #0x1f
   3ddac:	b.ne	3dd48 <aarch64_ext_reglane@@Base+0x78>  // b.any
   3ddb0:	ldr	w22, [x19, #8]
   3ddb4:	cmp	w22, #0x1
   3ddb8:	b.ne	3de30 <aarch64_ext_reglane@@Base+0x160>  // b.any
   3ddbc:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3ddc0:	ldr	x0, [x0, #3944]
   3ddc4:	ldr	w2, [x0, #324]
   3ddc8:	mov	w1, #0xffffffff            	// #-1
   3ddcc:	lsl	w1, w1, w2
   3ddd0:	ldr	w0, [x0, #320]
   3ddd4:	lsr	w21, w21, w0
   3ddd8:	bic	w21, w21, w1
   3dddc:	mov	w1, #0x1                   	// #1
   3dde0:	mov	x0, x20
   3dde4:	bl	3be94 <aarch64_opcode_encode@@Base+0x1f00>
   3dde8:	strb	w0, [x19, #4]
   3ddec:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3ddf0:	and	w0, w0, #0xff
   3ddf4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3ddf8:	add	x1, x1, #0xa48
   3ddfc:	add	x1, x1, #0x200
   3de00:	ldp	x2, x3, [x1, #48]
   3de04:	stp	x2, x3, [sp, #48]
   3de08:	cmp	w0, #0x10
   3de0c:	b.hi	3de54 <aarch64_ext_reglane@@Base+0x184>  // b.pmore
   3de10:	sub	w0, w0, #0x1
   3de14:	add	x1, sp, #0x30
   3de18:	ldrb	w0, [x1, w0, uxtw]
   3de1c:	cmp	w0, #0xff
   3de20:	b.eq	3de78 <aarch64_ext_reglane@@Base+0x1a8>  // b.none
   3de24:	lsr	w21, w21, w0
   3de28:	str	x21, [x19, #24]
   3de2c:	b	3dd90 <aarch64_ext_reglane@@Base+0xc0>
   3de30:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3de34:	add	x3, x3, #0xa48
   3de38:	add	x3, x3, #0x218
   3de3c:	mov	w2, #0x13b                 	// #315
   3de40:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3de44:	add	x1, x1, #0x2e0
   3de48:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3de4c:	add	x0, x0, #0xa28
   3de50:	bl	35ac0 <__assert_fail@plt>
   3de54:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3de58:	add	x3, x3, #0xa48
   3de5c:	add	x3, x3, #0x240
   3de60:	mov	w2, #0x200                 	// #512
   3de64:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3de68:	add	x1, x1, #0x970
   3de6c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3de70:	add	x0, x0, #0xb60
   3de74:	bl	35ac0 <__assert_fail@plt>
   3de78:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3de7c:	add	x3, x3, #0xa48
   3de80:	add	x3, x3, #0x240
   3de84:	mov	w2, #0x203                 	// #515
   3de88:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3de8c:	add	x1, x1, #0x970
   3de90:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3de94:	add	x0, x0, #0xbc0
   3de98:	bl	35ac0 <__assert_fail@plt>
   3de9c:	mov	w20, w0
   3dea0:	mov	w21, #0x0                   	// #0
   3dea4:	mov	w22, #0x1                   	// #1
   3dea8:	add	w21, w21, #0x6
   3deac:	and	w21, w21, #0xff
   3deb0:	mov	w0, w21
   3deb4:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3deb8:	cmp	w22, w0
   3debc:	b.ne	3dee4 <aarch64_ext_reglane@@Base+0x214>  // b.any
   3dec0:	strb	w21, [x19, #4]
   3dec4:	lsr	w20, w20, #1
   3dec8:	str	x20, [x19, #24]
   3decc:	mov	w22, #0x1                   	// #1
   3ded0:	b	3dd90 <aarch64_ext_reglane@@Base+0xc0>
   3ded4:	mov	w20, w0
   3ded8:	mov	w21, #0x1                   	// #1
   3dedc:	mov	w22, #0x2                   	// #2
   3dee0:	b	3dea8 <aarch64_ext_reglane@@Base+0x1d8>
   3dee4:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3dee8:	add	x3, x3, #0xa48
   3deec:	add	x3, x3, #0x118
   3def0:	mov	w2, #0xe5                  	// #229
   3def4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3def8:	add	x1, x1, #0x2e0
   3defc:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3df00:	add	x0, x0, #0x438
   3df04:	bl	35ac0 <__assert_fail@plt>
   3df08:	cmp	w0, #0x5d
   3df0c:	b.eq	3df44 <aarch64_ext_reglane@@Base+0x274>  // b.none
   3df10:	cmp	w0, #0x5b
   3df14:	b.ne	3df9c <aarch64_ext_reglane@@Base+0x2cc>  // b.any
   3df18:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3df1c:	ldr	x1, [x1, #3944]
   3df20:	ldr	w2, [x1, #996]
   3df24:	mov	w0, #0xffffffff            	// #-1
   3df28:	lsl	w0, w0, w2
   3df2c:	ldr	w1, [x1, #992]
   3df30:	lsr	w21, w21, w1
   3df34:	bic	w21, w21, w0
   3df38:	str	x21, [x19, #24]
   3df3c:	mov	w22, #0x1                   	// #1
   3df40:	b	3dd90 <aarch64_ext_reglane@@Base+0xc0>
   3df44:	ldr	w1, [x19, #8]
   3df48:	mov	x0, x20
   3df4c:	bl	3be94 <aarch64_opcode_encode@@Base+0x1f00>
   3df50:	and	w1, w0, #0xff
   3df54:	strb	w0, [x19, #4]
   3df58:	sub	w0, w1, #0xa
   3df5c:	mov	w22, #0x0                   	// #0
   3df60:	cmp	w0, #0x1
   3df64:	b.hi	3dd90 <aarch64_ext_reglane@@Base+0xc0>  // b.pmore
   3df68:	mov	w4, #0x3e                  	// #62
   3df6c:	mov	w3, #0x3d                  	// #61
   3df70:	mov	w2, #0x2                   	// #2
   3df74:	mov	w1, #0x0                   	// #0
   3df78:	mov	w0, w21
   3df7c:	bl	35390 <extract_fields@plt>
   3df80:	mov	w0, w0
   3df84:	str	x0, [x19, #24]
   3df88:	ldr	w0, [x19, #16]
   3df8c:	and	w0, w0, #0x1f
   3df90:	str	w0, [x19, #16]
   3df94:	mov	w22, #0x1                   	// #1
   3df98:	b	3dd90 <aarch64_ext_reglane@@Base+0xc0>
   3df9c:	ldr	w1, [x19, #8]
   3dfa0:	mov	x0, x20
   3dfa4:	bl	3be94 <aarch64_opcode_encode@@Base+0x1f00>
   3dfa8:	and	w1, w0, #0xff
   3dfac:	strb	w0, [x19, #4]
   3dfb0:	cmp	w1, #0x7
   3dfb4:	b.eq	3e030 <aarch64_ext_reglane@@Base+0x360>  // b.none
   3dfb8:	cmp	w1, #0x8
   3dfbc:	b.eq	3e074 <aarch64_ext_reglane@@Base+0x3a4>  // b.none
   3dfc0:	mov	w22, #0x0                   	// #0
   3dfc4:	cmp	w1, #0x6
   3dfc8:	b.ne	3dd90 <aarch64_ext_reglane@@Base+0xc0>  // b.any
   3dfcc:	ldr	w0, [x19]
   3dfd0:	cmp	w0, #0x22
   3dfd4:	b.eq	3dffc <aarch64_ext_reglane@@Base+0x32c>  // b.none
   3dfd8:	mov	w4, #0x3e                  	// #62
   3dfdc:	mov	w3, #0x3d                  	// #61
   3dfe0:	mov	w2, #0x2                   	// #2
   3dfe4:	mov	w1, #0x0                   	// #0
   3dfe8:	mov	w0, w21
   3dfec:	bl	35390 <extract_fields@plt>
   3dff0:	mov	w0, w0
   3dff4:	str	x0, [x19, #24]
   3dff8:	b	3e050 <aarch64_ext_reglane@@Base+0x380>
   3dffc:	mov	w5, #0x3f                  	// #63
   3e000:	mov	w4, #0x3e                  	// #62
   3e004:	mov	w3, #0x3d                  	// #61
   3e008:	mov	w2, #0x3                   	// #3
   3e00c:	mov	w1, #0x0                   	// #0
   3e010:	mov	w0, w21
   3e014:	bl	35390 <extract_fields@plt>
   3e018:	mov	w0, w0
   3e01c:	str	x0, [x19, #24]
   3e020:	ldr	w0, [x19, #16]
   3e024:	and	w0, w0, #0xf
   3e028:	str	w0, [x19, #16]
   3e02c:	b	3e050 <aarch64_ext_reglane@@Base+0x380>
   3e030:	mov	w4, #0x3e                  	// #62
   3e034:	mov	w3, #0x3d                  	// #61
   3e038:	mov	w2, #0x2                   	// #2
   3e03c:	mov	w1, #0x0                   	// #0
   3e040:	mov	w0, w21
   3e044:	bl	35390 <extract_fields@plt>
   3e048:	mov	w0, w0
   3e04c:	str	x0, [x19, #24]
   3e050:	ldr	x0, [x20, #8]
   3e054:	ldr	w0, [x0, #20]
   3e058:	mov	w22, #0x1                   	// #1
   3e05c:	cmp	w0, #0x50
   3e060:	b.ne	3dd90 <aarch64_ext_reglane@@Base+0xc0>  // b.any
   3e064:	ldrb	w0, [x19, #4]
   3e068:	cmp	w0, #0x6
   3e06c:	b.eq	3dd90 <aarch64_ext_reglane@@Base+0xc0>  // b.none
   3e070:	b	3e0ac <aarch64_ext_reglane@@Base+0x3dc>
   3e074:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3e078:	ldr	x1, [x1, #3944]
   3e07c:	ldr	w2, [x1, #492]
   3e080:	mov	w0, #0xffffffff            	// #-1
   3e084:	lsl	w0, w0, w2
   3e088:	ldr	w1, [x1, #488]
   3e08c:	lsr	w21, w21, w1
   3e090:	bic	w21, w21, w0
   3e094:	str	x21, [x19, #24]
   3e098:	ldr	x0, [x20, #8]
   3e09c:	ldr	w0, [x0, #20]
   3e0a0:	mov	w22, #0x1                   	// #1
   3e0a4:	cmp	w0, #0x50
   3e0a8:	b.ne	3dd90 <aarch64_ext_reglane@@Base+0xc0>  // b.any
   3e0ac:	ldr	x0, [x19, #24]
   3e0b0:	mov	w22, #0x0                   	// #0
   3e0b4:	tbnz	w0, #0, 3dd90 <aarch64_ext_reglane@@Base+0xc0>
   3e0b8:	add	x0, x0, x0, lsr #63
   3e0bc:	asr	x0, x0, #1
   3e0c0:	str	x0, [x19, #24]
   3e0c4:	mov	w22, #0x1                   	// #1
   3e0c8:	b	3dd90 <aarch64_ext_reglane@@Base+0xc0>
   3e0cc:	mov	w21, #0x2                   	// #2
   3e0d0:	mov	w22, #0x3                   	// #3
   3e0d4:	b	3dea8 <aarch64_ext_reglane@@Base+0x1d8>

000000000003e0d8 <aarch64_ext_reglist@@Base>:
   3e0d8:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   3e0dc:	ldr	x3, [x3, #3944]
   3e0e0:	ldr	w4, [x0, #20]
   3e0e4:	lsl	x4, x4, #3
   3e0e8:	add	x0, x3, x4
   3e0ec:	ldr	w5, [x0, #4]
   3e0f0:	mov	w0, #0xffffffff            	// #-1
   3e0f4:	lsl	w5, w0, w5
   3e0f8:	ldr	w4, [x3, x4]
   3e0fc:	lsr	w4, w2, w4
   3e100:	bic	w5, w4, w5
   3e104:	ldrb	w4, [x1, #16]
   3e108:	bfxil	w4, w5, #0, #5
   3e10c:	ldr	w5, [x3, #220]
   3e110:	lsl	w0, w0, w5
   3e114:	ldr	w3, [x3, #216]
   3e118:	lsr	w2, w2, w3
   3e11c:	bic	w0, w2, w0
   3e120:	add	w0, w0, #0x1
   3e124:	mov	w2, w4
   3e128:	bfi	w2, w0, #5, #3
   3e12c:	strb	w2, [x1, #16]
   3e130:	mov	w0, #0x1                   	// #1
   3e134:	ret

000000000003e138 <aarch64_ext_ldst_reglist@@Base>:
   3e138:	stp	x29, x30, [sp, #-192]!
   3e13c:	mov	x29, sp
   3e140:	stp	x19, x20, [sp, #16]
   3e144:	str	x21, [sp, #32]
   3e148:	mov	x20, x1
   3e14c:	mov	w19, w2
   3e150:	ldr	x0, [x3, #8]
   3e154:	ldr	x21, [x0, #120]
   3e158:	mov	x2, #0x84                  	// #132
   3e15c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3e160:	add	x1, x1, #0xa48
   3e164:	add	x1, x1, #0x250
   3e168:	add	x0, sp, #0x38
   3e16c:	bl	35050 <memcpy@plt>
   3e170:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   3e174:	ldr	x3, [x3, #3944]
   3e178:	ldr	w2, [x3, #100]
   3e17c:	mov	w0, #0xffffffff            	// #-1
   3e180:	lsl	w2, w0, w2
   3e184:	ldr	w1, [x3, #96]
   3e188:	lsr	w1, w19, w1
   3e18c:	bic	w2, w1, w2
   3e190:	ldrb	w1, [x20, #16]
   3e194:	bfxil	w1, w2, #0, #5
   3e198:	strb	w1, [x20, #16]
   3e19c:	ldr	w2, [x3, #196]
   3e1a0:	lsl	w0, w0, w2
   3e1a4:	ldr	w2, [x3, #192]
   3e1a8:	lsr	w2, w19, w2
   3e1ac:	bic	w2, w2, w0
   3e1b0:	mov	w0, #0x0                   	// #0
   3e1b4:	cmp	w2, #0xa
   3e1b8:	b.hi	3e214 <aarch64_ext_ldst_reglist@@Base+0xdc>  // b.pmore
   3e1bc:	ubfiz	x0, x2, #1, #32
   3e1c0:	add	x0, x0, w2, uxtw
   3e1c4:	ubfx	w21, w21, #24, #3
   3e1c8:	add	x1, sp, #0x40
   3e1cc:	ldr	w1, [x1, x0, lsl #2]
   3e1d0:	mov	w0, #0x0                   	// #0
   3e1d4:	cmp	w1, w21
   3e1d8:	b.ne	3e214 <aarch64_ext_ldst_reglist@@Base+0xdc>  // b.any
   3e1dc:	ubfiz	x0, x2, #1, #32
   3e1e0:	add	x0, x0, w2, uxtw
   3e1e4:	add	x1, sp, #0x38
   3e1e8:	ldr	w1, [x1, x0, lsl #2]
   3e1ec:	mov	w0, #0x0                   	// #0
   3e1f0:	cbnz	w1, 3e214 <aarch64_ext_ldst_reglist@@Base+0xdc>
   3e1f4:	ubfiz	x0, x2, #1, #32
   3e1f8:	add	x2, x0, w2, uxtw
   3e1fc:	ldrb	w0, [x20, #16]
   3e200:	add	x1, sp, #0x3c
   3e204:	ldr	w1, [x1, x2, lsl #2]
   3e208:	bfi	w0, w1, #5, #3
   3e20c:	strb	w0, [x20, #16]
   3e210:	mov	w0, #0x1                   	// #1
   3e214:	ldp	x19, x20, [sp, #16]
   3e218:	ldr	x21, [sp, #32]
   3e21c:	ldp	x29, x30, [sp], #192
   3e220:	ret

000000000003e224 <aarch64_ext_ldst_reglist_r@@Base>:
   3e224:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   3e228:	ldr	x4, [x4, #3944]
   3e22c:	ldr	w6, [x4, #100]
   3e230:	mov	w5, #0xffffffff            	// #-1
   3e234:	lsl	w6, w5, w6
   3e238:	ldr	w0, [x4, #96]
   3e23c:	lsr	w0, w2, w0
   3e240:	bic	w6, w0, w6
   3e244:	ldrb	w0, [x1, #16]
   3e248:	bfxil	w0, w6, #0, #5
   3e24c:	strb	w0, [x1, #16]
   3e250:	ldr	w6, [x4, #252]
   3e254:	lsl	w5, w5, w6
   3e258:	ldr	w4, [x4, #248]
   3e25c:	lsr	w2, w2, w4
   3e260:	bic	w2, w2, w5
   3e264:	ldr	x3, [x3, #8]
   3e268:	ldr	x3, [x3, #120]
   3e26c:	ubfx	w3, w3, #24, #3
   3e270:	bfi	w0, w3, #5, #3
   3e274:	strb	w0, [x1, #16]
   3e278:	ands	w0, w0, #0xe0
   3e27c:	ccmp	w3, #0x4, #0x2, ne  // ne = any
   3e280:	b.hi	3e298 <aarch64_ext_ldst_reglist_r@@Base+0x74>  // b.pmore
   3e284:	cmp	w0, #0x20
   3e288:	ccmp	w2, #0x1, #0x0, eq  // eq = none
   3e28c:	b.eq	3e2c4 <aarch64_ext_ldst_reglist_r@@Base+0xa0>  // b.none
   3e290:	mov	w0, #0x1                   	// #1
   3e294:	ret
   3e298:	stp	x29, x30, [sp, #-16]!
   3e29c:	mov	x29, sp
   3e2a0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3e2a4:	add	x3, x3, #0xa48
   3e2a8:	add	x3, x3, #0x2d8
   3e2ac:	mov	w2, #0x1e5                 	// #485
   3e2b0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3e2b4:	add	x1, x1, #0x2e0
   3e2b8:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3e2bc:	add	x0, x0, #0x638
   3e2c0:	bl	35ac0 <__assert_fail@plt>
   3e2c4:	ldrb	w0, [x1, #16]
   3e2c8:	mov	w2, #0x2                   	// #2
   3e2cc:	bfi	w0, w2, #5, #3
   3e2d0:	strb	w0, [x1, #16]
   3e2d4:	b	3e290 <aarch64_ext_ldst_reglist_r@@Base+0x6c>

000000000003e2d8 <aarch64_ext_ldst_elemlist@@Base>:
   3e2d8:	stp	x29, x30, [sp, #-48]!
   3e2dc:	mov	x29, sp
   3e2e0:	stp	x19, x20, [sp, #16]
   3e2e4:	stp	x21, x22, [sp, #32]
   3e2e8:	mov	x19, x1
   3e2ec:	mov	w21, w2
   3e2f0:	mov	x22, x3
   3e2f4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3e2f8:	ldr	x0, [x0, #3944]
   3e2fc:	ldr	w2, [x0, #100]
   3e300:	mov	w1, #0xffffffff            	// #-1
   3e304:	lsl	w1, w1, w2
   3e308:	ldr	w2, [x0, #96]
   3e30c:	lsr	w2, w21, w2
   3e310:	bic	w1, w2, w1
   3e314:	ldrb	w2, [x19, #16]
   3e318:	bfxil	w2, w1, #0, #5
   3e31c:	strb	w2, [x19, #16]
   3e320:	ldr	w0, [x0, #212]
   3e324:	cmp	w0, #0x2
   3e328:	b.le	3e430 <aarch64_ext_ldst_elemlist@@Base+0x158>
   3e32c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3e330:	ldr	x0, [x0, #3944]
   3e334:	ldr	w20, [x0, #208]
   3e338:	add	w20, w20, #0x1
   3e33c:	lsr	w20, w21, w20
   3e340:	and	w20, w20, #0x3
   3e344:	mov	w5, #0x9                   	// #9
   3e348:	mov	w4, #0x1f                  	// #31
   3e34c:	mov	w3, #0xb                   	// #11
   3e350:	mov	w2, #0x3                   	// #3
   3e354:	mov	w1, #0x0                   	// #0
   3e358:	mov	w0, w21
   3e35c:	bl	35390 <extract_fields@plt>
   3e360:	cmp	w20, #0x2
   3e364:	b.eq	3e398 <aarch64_ext_ldst_elemlist@@Base+0xc0>  // b.none
   3e368:	b.hi	3e410 <aarch64_ext_ldst_elemlist@@Base+0x138>  // b.pmore
   3e36c:	cbz	w20, 3e44c <aarch64_ext_ldst_elemlist@@Base+0x174>
   3e370:	cmp	w20, #0x1
   3e374:	b.ne	3e390 <aarch64_ext_ldst_elemlist@@Base+0xb8>  // b.any
   3e378:	tbnz	w0, #0, 3e418 <aarch64_ext_ldst_elemlist@@Base+0x140>
   3e37c:	mov	w1, #0x6                   	// #6
   3e380:	strb	w1, [x19, #4]
   3e384:	lsr	w0, w0, #1
   3e388:	str	x0, [x19, #24]
   3e38c:	b	3e45c <aarch64_ext_ldst_elemlist@@Base+0x184>
   3e390:	mov	w0, #0x0                   	// #0
   3e394:	b	3e498 <aarch64_ext_ldst_elemlist@@Base+0x1c0>
   3e398:	tbnz	w0, #1, 3e420 <aarch64_ext_ldst_elemlist@@Base+0x148>
   3e39c:	tbnz	w0, #0, 3e3b4 <aarch64_ext_ldst_elemlist@@Base+0xdc>
   3e3a0:	mov	w1, #0x7                   	// #7
   3e3a4:	strb	w1, [x19, #4]
   3e3a8:	lsr	w0, w0, #2
   3e3ac:	str	x0, [x19, #24]
   3e3b0:	b	3e45c <aarch64_ext_ldst_elemlist@@Base+0x184>
   3e3b4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3e3b8:	ldr	x1, [x1, #3944]
   3e3bc:	ldr	w3, [x1, #252]
   3e3c0:	mov	w2, #0xffffffff            	// #-1
   3e3c4:	lsl	w2, w2, w3
   3e3c8:	ldr	w1, [x1, #248]
   3e3cc:	lsr	w21, w21, w1
   3e3d0:	bics	wzr, w21, w2
   3e3d4:	b.ne	3e428 <aarch64_ext_ldst_elemlist@@Base+0x150>  // b.any
   3e3d8:	mov	w1, #0x8                   	// #8
   3e3dc:	strb	w1, [x19, #4]
   3e3e0:	lsr	w0, w0, #3
   3e3e4:	str	x0, [x19, #24]
   3e3e8:	b	3e45c <aarch64_ext_ldst_elemlist@@Base+0x184>
   3e3ec:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3e3f0:	add	x3, x3, #0xa48
   3e3f4:	add	x3, x3, #0x2f8
   3e3f8:	mov	w2, #0x22d                 	// #557
   3e3fc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3e400:	add	x1, x1, #0x2e0
   3e404:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3e408:	add	x0, x0, #0x638
   3e40c:	bl	35ac0 <__assert_fail@plt>
   3e410:	mov	w0, #0x0                   	// #0
   3e414:	b	3e498 <aarch64_ext_ldst_elemlist@@Base+0x1c0>
   3e418:	mov	w0, #0x0                   	// #0
   3e41c:	b	3e498 <aarch64_ext_ldst_elemlist@@Base+0x1c0>
   3e420:	mov	w0, #0x0                   	// #0
   3e424:	b	3e498 <aarch64_ext_ldst_elemlist@@Base+0x1c0>
   3e428:	mov	w0, #0x0                   	// #0
   3e42c:	b	3e498 <aarch64_ext_ldst_elemlist@@Base+0x1c0>
   3e430:	mov	w5, #0x9                   	// #9
   3e434:	mov	w4, #0x1f                  	// #31
   3e438:	mov	w3, #0xb                   	// #11
   3e43c:	mov	w2, #0x3                   	// #3
   3e440:	mov	w1, #0x0                   	// #0
   3e444:	mov	w0, w21
   3e448:	bl	35390 <extract_fields@plt>
   3e44c:	mov	w1, #0x5                   	// #5
   3e450:	strb	w1, [x19, #4]
   3e454:	mov	w0, w0
   3e458:	str	x0, [x19, #24]
   3e45c:	ldrb	w0, [x19, #17]
   3e460:	orr	w0, w0, #0x1
   3e464:	strb	w0, [x19, #17]
   3e468:	ldrb	w0, [x19, #16]
   3e46c:	and	w0, w0, #0x1f
   3e470:	strb	w0, [x19, #16]
   3e474:	ldr	x1, [x22, #8]
   3e478:	ldr	x1, [x1, #120]
   3e47c:	ubfx	w1, w1, #24, #3
   3e480:	bfi	w0, w1, #5, #3
   3e484:	strb	w0, [x19, #16]
   3e488:	tst	w0, #0xe0
   3e48c:	mov	w0, #0x1                   	// #1
   3e490:	ccmp	w1, #0x4, #0x2, ne  // ne = any
   3e494:	b.hi	3e3ec <aarch64_ext_ldst_elemlist@@Base+0x114>  // b.pmore
   3e498:	ldp	x19, x20, [sp, #16]
   3e49c:	ldp	x21, x22, [sp, #32]
   3e4a0:	ldp	x29, x30, [sp], #48
   3e4a4:	ret

000000000003e4a8 <aarch64_ext_advsimd_imm_shift@@Base>:
   3e4a8:	stp	x29, x30, [sp, #-64]!
   3e4ac:	mov	x29, sp
   3e4b0:	stp	x19, x20, [sp, #16]
   3e4b4:	mov	x20, x1
   3e4b8:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3e4bc:	ldr	x0, [x0, #3944]
   3e4c0:	ldr	w1, [x0, #436]
   3e4c4:	mov	w19, #0xffffffff            	// #-1
   3e4c8:	lsl	w19, w19, w1
   3e4cc:	ldr	w4, [x0, #432]
   3e4d0:	lsr	w4, w2, w4
   3e4d4:	mov	w0, #0x0                   	// #0
   3e4d8:	bics	w19, w4, w19
   3e4dc:	b.ne	3e4ec <aarch64_ext_advsimd_imm_shift@@Base+0x44>  // b.any
   3e4e0:	ldp	x19, x20, [sp, #16]
   3e4e4:	ldp	x29, x30, [sp], #64
   3e4e8:	ret
   3e4ec:	stp	x21, x22, [sp, #32]
   3e4f0:	stp	x23, x24, [sp, #48]
   3e4f4:	mov	w21, w2
   3e4f8:	ldr	x0, [x3, #8]
   3e4fc:	ldr	w22, [x0, #16]
   3e500:	mov	w4, #0x35                  	// #53
   3e504:	mov	w3, #0x36                  	// #54
   3e508:	mov	w2, #0x2                   	// #2
   3e50c:	mov	w1, #0x0                   	// #0
   3e510:	mov	w0, w21
   3e514:	bl	35390 <extract_fields@plt>
   3e518:	mov	w23, w0
   3e51c:	tbnz	w19, #3, 3e5ac <aarch64_ext_advsimd_imm_shift@@Base+0x104>
   3e520:	tbnz	w19, #2, 3e5b8 <aarch64_ext_advsimd_imm_shift@@Base+0x110>
   3e524:	tbnz	w19, #1, 3e5c4 <aarch64_ext_advsimd_imm_shift@@Base+0x11c>
   3e528:	ubfiz	w0, w19, #3, #1
   3e52c:	and	w19, w19, #0x1
   3e530:	cmp	w0, #0x0
   3e534:	csetm	w24, eq  // eq = none
   3e538:	cmp	w22, #0xe
   3e53c:	ccmp	w22, #0x1a, #0x4, ne  // ne = any
   3e540:	b.ne	3e5d0 <aarch64_ext_advsimd_imm_shift@@Base+0x128>  // b.any
   3e544:	ldr	w0, [x20]
   3e548:	sub	w0, w0, #0x2b
   3e54c:	cmp	w0, #0x1
   3e550:	b.hi	3e5d0 <aarch64_ext_advsimd_imm_shift@@Base+0x128>  // b.pmore
   3e554:	cmp	w22, #0xe
   3e558:	b.eq	3e5f4 <aarch64_ext_advsimd_imm_shift@@Base+0x14c>  // b.none
   3e55c:	add	w19, w19, #0x4
   3e560:	cmp	w24, #0x4
   3e564:	b.hi	3e670 <aarch64_ext_advsimd_imm_shift@@Base+0x1c8>  // b.pmore
   3e568:	and	w19, w19, #0xff
   3e56c:	mov	w0, w19
   3e570:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3e574:	cmp	w24, w0
   3e578:	b.ne	3e670 <aarch64_ext_advsimd_imm_shift@@Base+0x1c8>  // b.any
   3e57c:	strb	w19, [x20, #4]
   3e580:	ldr	w0, [x20]
   3e584:	cmp	w0, #0x2c
   3e588:	b.eq	3e694 <aarch64_ext_advsimd_imm_shift@@Base+0x1ec>  // b.none
   3e58c:	mov	w0, #0x8                   	// #8
   3e590:	lsl	w0, w0, w24
   3e594:	sub	w23, w23, w0
   3e598:	str	x23, [x20, #16]
   3e59c:	mov	w0, #0x1                   	// #1
   3e5a0:	ldp	x21, x22, [sp, #32]
   3e5a4:	ldp	x23, x24, [sp, #48]
   3e5a8:	b	3e4e0 <aarch64_ext_advsimd_imm_shift@@Base+0x38>
   3e5ac:	mov	w24, #0x3                   	// #3
   3e5b0:	mov	w19, #0x4                   	// #4
   3e5b4:	b	3e538 <aarch64_ext_advsimd_imm_shift@@Base+0x90>
   3e5b8:	mov	w19, #0x3                   	// #3
   3e5bc:	mov	w24, #0x2                   	// #2
   3e5c0:	b	3e538 <aarch64_ext_advsimd_imm_shift@@Base+0x90>
   3e5c4:	mov	w19, #0x2                   	// #2
   3e5c8:	mov	w24, #0x1                   	// #1
   3e5cc:	b	3e538 <aarch64_ext_advsimd_imm_shift@@Base+0x90>
   3e5d0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3e5d4:	add	x3, x3, #0xa48
   3e5d8:	add	x3, x3, #0x318
   3e5dc:	mov	w2, #0x249                 	// #585
   3e5e0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3e5e4:	add	x1, x1, #0x2e0
   3e5e8:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3e5ec:	add	x0, x0, #0x678
   3e5f0:	bl	35ac0 <__assert_fail@plt>
   3e5f4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3e5f8:	ldr	x0, [x0, #3944]
   3e5fc:	ldr	w1, [x0, #92]
   3e600:	mov	w19, #0xffffffff            	// #-1
   3e604:	lsl	w19, w19, w1
   3e608:	ldr	w0, [x0, #88]
   3e60c:	lsr	w21, w21, w0
   3e610:	bic	w19, w21, w19
   3e614:	orr	w19, w19, w24, lsl #1
   3e618:	add	w0, w19, #0xd
   3e61c:	add	w1, w19, #0xe
   3e620:	cmp	w0, #0xe
   3e624:	csel	w0, w1, w0, hi  // hi = pmore
   3e628:	cmp	w19, #0x8
   3e62c:	b.hi	3e64c <aarch64_ext_advsimd_imm_shift@@Base+0x1a4>  // b.pmore
   3e630:	and	w21, w0, #0xff
   3e634:	mov	w0, w21
   3e638:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3e63c:	cmp	w19, w0
   3e640:	b.ne	3e64c <aarch64_ext_advsimd_imm_shift@@Base+0x1a4>  // b.any
   3e644:	strb	w21, [x20, #4]
   3e648:	b	3e580 <aarch64_ext_advsimd_imm_shift@@Base+0xd8>
   3e64c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3e650:	add	x3, x3, #0xa48
   3e654:	add	x3, x3, #0xa0
   3e658:	mov	w2, #0xda                  	// #218
   3e65c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3e660:	add	x1, x1, #0x2e0
   3e664:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3e668:	add	x0, x0, #0x3e8
   3e66c:	bl	35ac0 <__assert_fail@plt>
   3e670:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3e674:	add	x3, x3, #0xa48
   3e678:	add	x3, x3, #0x118
   3e67c:	mov	w2, #0xe5                  	// #229
   3e680:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3e684:	add	x1, x1, #0x2e0
   3e688:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3e68c:	add	x0, x0, #0x438
   3e690:	bl	35ac0 <__assert_fail@plt>
   3e694:	mov	w0, #0x10                  	// #16
   3e698:	lsl	w0, w0, w24
   3e69c:	sub	w23, w0, w23
   3e6a0:	str	x23, [x20, #16]
   3e6a4:	mov	w0, #0x1                   	// #1
   3e6a8:	ldp	x21, x22, [sp, #32]
   3e6ac:	ldp	x23, x24, [sp, #48]
   3e6b0:	b	3e4e0 <aarch64_ext_advsimd_imm_shift@@Base+0x38>

000000000003e6b4 <aarch64_ext_shll_imm@@Base>:
   3e6b4:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   3e6b8:	ldr	x3, [x3, #3944]
   3e6bc:	ldr	w4, [x3, #68]
   3e6c0:	mov	w0, #0xffffffff            	// #-1
   3e6c4:	lsl	w0, w0, w4
   3e6c8:	ldr	w3, [x3, #64]
   3e6cc:	lsr	w2, w2, w3
   3e6d0:	bic	w2, w2, w0
   3e6d4:	cmp	w2, #0x1
   3e6d8:	b.eq	3e6fc <aarch64_ext_shll_imm@@Base+0x48>  // b.none
   3e6dc:	cmp	w2, #0x2
   3e6e0:	b.eq	3e704 <aarch64_ext_shll_imm@@Base+0x50>  // b.none
   3e6e4:	mov	w0, #0x0                   	// #0
   3e6e8:	cbnz	w2, 3e6f8 <aarch64_ext_shll_imm@@Base+0x44>
   3e6ec:	mov	x0, #0x8                   	// #8
   3e6f0:	str	x0, [x1, #16]
   3e6f4:	mov	w0, #0x1                   	// #1
   3e6f8:	ret
   3e6fc:	mov	x0, #0x10                  	// #16
   3e700:	b	3e6f0 <aarch64_ext_shll_imm@@Base+0x3c>
   3e704:	mov	x0, #0x20                  	// #32
   3e708:	b	3e6f0 <aarch64_ext_shll_imm@@Base+0x3c>

000000000003e70c <aarch64_ext_imm@@Base>:
   3e70c:	stp	x29, x30, [sp, #-32]!
   3e710:	mov	x29, sp
   3e714:	stp	x19, x20, [sp, #16]
   3e718:	mov	x19, x0
   3e71c:	mov	x20, x1
   3e720:	mov	w1, w2
   3e724:	bl	3bba4 <aarch64_opcode_encode@@Base+0x1c10>
   3e728:	mov	w2, w0
   3e72c:	ldr	w3, [x19, #16]
   3e730:	tbnz	w3, #2, 3e760 <aarch64_ext_imm@@Base+0x54>
   3e734:	tbz	w3, #3, 3e7e0 <aarch64_ext_imm@@Base+0xd4>
   3e738:	lsl	x2, x2, #2
   3e73c:	ldr	w1, [x20]
   3e740:	lsl	x0, x2, #12
   3e744:	cmp	w1, #0x4e
   3e748:	csel	x2, x0, x2, eq  // eq = none
   3e74c:	str	x2, [x20, #16]
   3e750:	mov	w0, #0x1                   	// #1
   3e754:	ldp	x19, x20, [sp, #16]
   3e758:	ldp	x29, x30, [sp], #32
   3e75c:	ret
   3e760:	ldr	w0, [x19, #20]
   3e764:	cbz	w0, 3e7bc <aarch64_ext_imm@@Base+0xb0>
   3e768:	add	x19, x19, #0x18
   3e76c:	mov	w1, #0x0                   	// #0
   3e770:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   3e774:	ldr	x4, [x4, #3944]
   3e778:	add	x0, x4, w0, uxtw #3
   3e77c:	ldr	w0, [x0, #4]
   3e780:	add	w1, w1, w0
   3e784:	ldr	w0, [x19], #4
   3e788:	cbnz	w0, 3e778 <aarch64_ext_imm@@Base+0x6c>
   3e78c:	sub	w1, w1, #0x1
   3e790:	cmp	w1, #0x1e
   3e794:	b.hi	3e7bc <aarch64_ext_imm@@Base+0xb0>  // b.pmore
   3e798:	mov	x4, #0x1                   	// #1
   3e79c:	lsl	x4, x4, x1
   3e7a0:	mov	x0, #0x2                   	// #2
   3e7a4:	lsl	x1, x0, x1
   3e7a8:	sub	x1, x1, #0x1
   3e7ac:	and	x2, x1, x2
   3e7b0:	eor	x2, x2, x4
   3e7b4:	sub	x2, x2, x4
   3e7b8:	b	3e734 <aarch64_ext_imm@@Base+0x28>
   3e7bc:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3e7c0:	add	x3, x3, #0xa48
   3e7c4:	add	x3, x3, #0x338
   3e7c8:	mov	w2, #0x12e                 	// #302
   3e7cc:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3e7d0:	add	x1, x1, #0x970
   3e7d4:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3e7d8:	add	x0, x0, #0x6f8
   3e7dc:	bl	35ac0 <__assert_fail@plt>
   3e7e0:	lsl	x0, x2, #4
   3e7e4:	tst	x3, #0x200
   3e7e8:	csel	x2, x0, x2, ne  // ne = any
   3e7ec:	b	3e73c <aarch64_ext_imm@@Base+0x30>

000000000003e7f0 <aarch64_ext_imm_half@@Base>:
   3e7f0:	stp	x29, x30, [sp, #-32]!
   3e7f4:	mov	x29, sp
   3e7f8:	stp	x19, x20, [sp, #16]
   3e7fc:	mov	x20, x1
   3e800:	mov	w19, w2
   3e804:	bl	35720 <aarch64_ext_imm@plt>
   3e808:	mov	w0, #0x5                   	// #5
   3e80c:	str	w0, [x20, #32]
   3e810:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3e814:	ldr	x1, [x1, #3944]
   3e818:	ldr	w2, [x1, #260]
   3e81c:	mov	w0, #0xffffffff            	// #-1
   3e820:	lsl	w0, w0, w2
   3e824:	ldr	w2, [x1, #256]
   3e828:	lsr	w19, w19, w2
   3e82c:	bic	w0, w19, w0
   3e830:	lsl	w0, w0, #4
   3e834:	str	x0, [x20, #40]
   3e838:	mov	w0, #0x1                   	// #1
   3e83c:	ldp	x19, x20, [sp, #16]
   3e840:	ldp	x29, x30, [sp], #32
   3e844:	ret

000000000003e848 <aarch64_ext_advsimd_imm_modified@@Base>:
   3e848:	stp	x29, x30, [sp, #-80]!
   3e84c:	mov	x29, sp
   3e850:	stp	x19, x20, [sp, #16]
   3e854:	stp	x21, x22, [sp, #32]
   3e858:	stp	x23, x24, [sp, #48]
   3e85c:	str	x25, [sp, #64]
   3e860:	ldrb	w23, [x3, #28]
   3e864:	ldr	w22, [x1, #8]
   3e868:	cmp	w22, #0x1
   3e86c:	b.ne	3e900 <aarch64_ext_advsimd_imm_modified@@Base+0xb8>  // b.any
   3e870:	mov	x19, x1
   3e874:	mov	w21, w2
   3e878:	mov	x20, x3
   3e87c:	ldr	w0, [x1]
   3e880:	cmp	w0, #0x2f
   3e884:	b.eq	3e924 <aarch64_ext_advsimd_imm_modified@@Base+0xdc>  // b.none
   3e888:	mov	w4, #0x3                   	// #3
   3e88c:	mov	w3, #0x4                   	// #4
   3e890:	mov	w2, #0x2                   	// #2
   3e894:	mov	w1, #0x0                   	// #0
   3e898:	mov	w0, w21
   3e89c:	bl	35390 <extract_fields@plt>
   3e8a0:	mov	w24, w0
   3e8a4:	mov	w25, w0
   3e8a8:	ldrb	w0, [x19, #24]
   3e8ac:	tbz	w0, #0, 3e934 <aarch64_ext_advsimd_imm_modified@@Base+0xec>
   3e8b0:	str	x25, [x19, #16]
   3e8b4:	ldr	w1, [x19, #8]
   3e8b8:	mov	x0, x20
   3e8bc:	bl	3be94 <aarch64_opcode_encode@@Base+0x1f00>
   3e8c0:	and	w1, w0, #0xff
   3e8c4:	strb	w0, [x19, #4]
   3e8c8:	cmp	w1, #0x21
   3e8cc:	b.eq	3e99c <aarch64_ext_advsimd_imm_modified@@Base+0x154>  // b.none
   3e8d0:	cmp	w1, #0x22
   3e8d4:	b.eq	3ea7c <aarch64_ext_advsimd_imm_modified@@Base+0x234>  // b.none
   3e8d8:	cbz	w1, 3e97c <aarch64_ext_advsimd_imm_modified@@Base+0x134>
   3e8dc:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3e8e0:	add	x3, x3, #0xa48
   3e8e4:	add	x3, x3, #0x358
   3e8e8:	mov	w2, #0x2f1                 	// #753
   3e8ec:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3e8f0:	add	x1, x1, #0x2e0
   3e8f4:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3e8f8:	add	x0, x0, #0xb60
   3e8fc:	bl	35ac0 <__assert_fail@plt>
   3e900:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3e904:	add	x3, x3, #0xa48
   3e908:	add	x3, x3, #0x358
   3e90c:	mov	w2, #0x2bf                 	// #703
   3e910:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3e914:	add	x1, x1, #0x2e0
   3e918:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3e91c:	add	x0, x0, #0xa28
   3e920:	bl	35ac0 <__assert_fail@plt>
   3e924:	ldrb	w0, [x1, #24]
   3e928:	orr	w0, w0, #0x1
   3e92c:	strb	w0, [x1, #24]
   3e930:	b	3e888 <aarch64_ext_advsimd_imm_modified@@Base+0x40>
   3e934:	mov	w0, w23
   3e938:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3e93c:	and	w0, w0, #0xff
   3e940:	cmp	w0, #0x8
   3e944:	b.ne	3e8b0 <aarch64_ext_advsimd_imm_modified@@Base+0x68>  // b.any
   3e948:	mov	w0, #0x0                   	// #0
   3e94c:	mov	x25, #0x0                   	// #0
   3e950:	mov	x3, #0xff                  	// #255
   3e954:	lsr	w2, w24, w0
   3e958:	lsl	w1, w0, #3
   3e95c:	lsl	x1, x3, x1
   3e960:	orr	x1, x25, x1
   3e964:	tst	x2, #0x1
   3e968:	csel	x25, x1, x25, ne  // ne = any
   3e96c:	add	w0, w0, #0x1
   3e970:	cmp	w0, #0x8
   3e974:	b.ne	3e954 <aarch64_ext_advsimd_imm_modified@@Base+0x10c>  // b.any
   3e978:	b	3e8b0 <aarch64_ext_advsimd_imm_modified@@Base+0x68>
   3e97c:	str	wzr, [x19, #32]
   3e980:	mov	w0, #0x1                   	// #1
   3e984:	ldp	x19, x20, [sp, #16]
   3e988:	ldp	x21, x22, [sp, #32]
   3e98c:	ldp	x23, x24, [sp, #48]
   3e990:	ldr	x25, [sp, #64]
   3e994:	ldp	x29, x30, [sp], #80
   3e998:	ret
   3e99c:	mov	w0, #0x5                   	// #5
   3e9a0:	str	w0, [x19, #32]
   3e9a4:	mov	w0, w23
   3e9a8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3e9ac:	and	w0, w0, #0xff
   3e9b0:	cmp	w0, #0x2
   3e9b4:	b.eq	3ea18 <aarch64_ext_advsimd_imm_modified@@Base+0x1d0>  // b.none
   3e9b8:	cmp	w0, #0x4
   3e9bc:	b.eq	3e9ec <aarch64_ext_advsimd_imm_modified@@Base+0x1a4>  // b.none
   3e9c0:	cmp	w0, #0x1
   3e9c4:	b.eq	3ea40 <aarch64_ext_advsimd_imm_modified@@Base+0x1f8>  // b.none
   3e9c8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3e9cc:	add	x3, x3, #0xa48
   3e9d0:	add	x3, x3, #0x358
   3e9d4:	mov	w2, #0x2e5                 	// #741
   3e9d8:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3e9dc:	add	x1, x1, #0x2e0
   3e9e0:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3e9e4:	add	x0, x0, #0xb60
   3e9e8:	bl	35ac0 <__assert_fail@plt>
   3e9ec:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3e9f0:	ldr	x0, [x0, #3944]
   3e9f4:	ldr	w0, [x0, #204]
   3e9f8:	cmp	w0, #0x2
   3e9fc:	b.le	3ea64 <aarch64_ext_advsimd_imm_modified@@Base+0x21c>
   3ea00:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3ea04:	ldr	x0, [x0, #3944]
   3ea08:	ldr	w2, [x0, #200]
   3ea0c:	add	w2, w2, #0x1
   3ea10:	mov	w22, #0x2                   	// #2
   3ea14:	b	3ea48 <aarch64_ext_advsimd_imm_modified@@Base+0x200>
   3ea18:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3ea1c:	ldr	x0, [x0, #3944]
   3ea20:	ldr	w0, [x0, #204]
   3ea24:	cmp	w0, #0x1
   3ea28:	b.le	3ea70 <aarch64_ext_advsimd_imm_modified@@Base+0x228>
   3ea2c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3ea30:	ldr	x0, [x0, #3944]
   3ea34:	ldr	w2, [x0, #200]
   3ea38:	add	w2, w2, #0x1
   3ea3c:	b	3ea48 <aarch64_ext_advsimd_imm_modified@@Base+0x200>
   3ea40:	mov	w22, #0x0                   	// #0
   3ea44:	mov	w2, #0x0                   	// #0
   3ea48:	mov	w0, #0xffffffff            	// #-1
   3ea4c:	lsl	w22, w0, w22
   3ea50:	lsr	w21, w21, w2
   3ea54:	bic	w21, w21, w22
   3ea58:	lsl	w21, w21, #3
   3ea5c:	str	x21, [x19, #40]
   3ea60:	b	3e980 <aarch64_ext_advsimd_imm_modified@@Base+0x138>
   3ea64:	mov	w22, #0x0                   	// #0
   3ea68:	mov	w2, #0x0                   	// #0
   3ea6c:	b	3ea48 <aarch64_ext_advsimd_imm_modified@@Base+0x200>
   3ea70:	mov	w22, #0x0                   	// #0
   3ea74:	mov	w2, #0x0                   	// #0
   3ea78:	b	3ea48 <aarch64_ext_advsimd_imm_modified@@Base+0x200>
   3ea7c:	mov	w0, #0x1                   	// #1
   3ea80:	str	w0, [x19, #32]
   3ea84:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3ea88:	ldr	x0, [x0, #3944]
   3ea8c:	ldr	w1, [x0, #204]
   3ea90:	mov	x0, #0x8                   	// #8
   3ea94:	cmp	w1, #0x0
   3ea98:	b.le	3eabc <aarch64_ext_advsimd_imm_modified@@Base+0x274>
   3ea9c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3eaa0:	ldr	x0, [x0, #3944]
   3eaa4:	ldr	w2, [x0, #200]
   3eaa8:	lsr	w21, w21, w2
   3eaac:	tst	x21, #0x1
   3eab0:	mov	x0, #0x10                  	// #16
   3eab4:	mov	x1, #0x8                   	// #8
   3eab8:	csel	x0, x0, x1, ne  // ne = any
   3eabc:	str	x0, [x19, #40]
   3eac0:	b	3e980 <aarch64_ext_advsimd_imm_modified@@Base+0x138>

000000000003eac4 <aarch64_ext_fpimm@@Base>:
   3eac4:	stp	x29, x30, [sp, #-32]!
   3eac8:	mov	x29, sp
   3eacc:	str	x19, [sp, #16]
   3ead0:	mov	x19, x1
   3ead4:	mov	w1, w2
   3ead8:	bl	3bba4 <aarch64_opcode_encode@@Base+0x1c10>
   3eadc:	mov	w0, w0
   3eae0:	str	x0, [x19, #16]
   3eae4:	ldrb	w0, [x19, #24]
   3eae8:	orr	w0, w0, #0x1
   3eaec:	strb	w0, [x19, #24]
   3eaf0:	mov	w0, #0x1                   	// #1
   3eaf4:	ldr	x19, [sp, #16]
   3eaf8:	ldp	x29, x30, [sp], #32
   3eafc:	ret

000000000003eb00 <aarch64_ext_imm_rotate1@@Base>:
   3eb00:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   3eb04:	ldr	x4, [x4, #3944]
   3eb08:	ldr	w3, [x0, #20]
   3eb0c:	lsl	x3, x3, #3
   3eb10:	add	x0, x4, x3
   3eb14:	ldr	w5, [x0, #4]
   3eb18:	mov	w0, #0xffffffff            	// #-1
   3eb1c:	lsl	w0, w0, w5
   3eb20:	ldr	w3, [x4, x3]
   3eb24:	lsr	w2, w2, w3
   3eb28:	bic	w2, w2, w0
   3eb2c:	cmp	x2, #0x1
   3eb30:	b.hi	3eb54 <aarch64_ext_imm_rotate1@@Base+0x54>  // b.pmore
   3eb34:	add	x2, x2, x2, lsl #1
   3eb38:	lsl	x0, x2, #4
   3eb3c:	sub	x2, x0, x2
   3eb40:	lsl	x2, x2, #2
   3eb44:	add	x2, x2, #0x5a
   3eb48:	str	x2, [x1, #16]
   3eb4c:	mov	w0, #0x1                   	// #1
   3eb50:	ret
   3eb54:	stp	x29, x30, [sp, #-16]!
   3eb58:	mov	x29, sp
   3eb5c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3eb60:	add	x3, x3, #0xa48
   3eb64:	add	x3, x3, #0x380
   3eb68:	mov	w2, #0x30c                 	// #780
   3eb6c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3eb70:	add	x1, x1, #0x2e0
   3eb74:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3eb78:	add	x0, x0, #0xb58
   3eb7c:	bl	35ac0 <__assert_fail@plt>

000000000003eb80 <aarch64_ext_imm_rotate2@@Base>:
   3eb80:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   3eb84:	ldr	x4, [x4, #3944]
   3eb88:	ldr	w3, [x0, #20]
   3eb8c:	lsl	x3, x3, #3
   3eb90:	add	x0, x4, x3
   3eb94:	ldr	w5, [x0, #4]
   3eb98:	mov	w0, #0xffffffff            	// #-1
   3eb9c:	lsl	w0, w0, w5
   3eba0:	ldr	w3, [x4, x3]
   3eba4:	lsr	w2, w2, w3
   3eba8:	bic	w2, w2, w0
   3ebac:	cmp	x2, #0x3
   3ebb0:	b.hi	3ebd0 <aarch64_ext_imm_rotate2@@Base+0x50>  // b.pmore
   3ebb4:	add	x2, x2, x2, lsl #1
   3ebb8:	lsl	x0, x2, #4
   3ebbc:	sub	x2, x0, x2
   3ebc0:	lsl	x2, x2, #1
   3ebc4:	str	x2, [x1, #16]
   3ebc8:	mov	w0, #0x1                   	// #1
   3ebcc:	ret
   3ebd0:	stp	x29, x30, [sp, #-16]!
   3ebd4:	mov	x29, sp
   3ebd8:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3ebdc:	add	x3, x3, #0xa48
   3ebe0:	add	x3, x3, #0x398
   3ebe4:	mov	w2, #0x319                 	// #793
   3ebe8:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3ebec:	add	x1, x1, #0x2e0
   3ebf0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3ebf4:	add	x0, x0, #0xb68
   3ebf8:	bl	35ac0 <__assert_fail@plt>

000000000003ebfc <aarch64_ext_fbits@@Base>:
   3ebfc:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   3ec00:	ldr	x3, [x3, #3944]
   3ec04:	ldr	w4, [x3, #532]
   3ec08:	mov	w0, #0xffffffff            	// #-1
   3ec0c:	lsl	w0, w0, w4
   3ec10:	ldr	w3, [x3, #528]
   3ec14:	lsr	w2, w2, w3
   3ec18:	bic	w0, w2, w0
   3ec1c:	mov	w2, #0x40                  	// #64
   3ec20:	sub	w0, w2, w0
   3ec24:	str	x0, [x1, #16]
   3ec28:	mov	w0, #0x1                   	// #1
   3ec2c:	ret

000000000003ec30 <aarch64_ext_aimm@@Base>:
   3ec30:	mov	w0, #0x5                   	// #5
   3ec34:	str	w0, [x1, #32]
   3ec38:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3ec3c:	ldr	x0, [x0, #3944]
   3ec40:	ldr	w4, [x0, #284]
   3ec44:	mov	w3, #0xffffffff            	// #-1
   3ec48:	lsl	w3, w3, w4
   3ec4c:	ldr	w0, [x0, #280]
   3ec50:	lsr	w0, w2, w0
   3ec54:	bic	w3, w0, w3
   3ec58:	mov	w0, #0x0                   	// #0
   3ec5c:	cmp	w3, #0x1
   3ec60:	b.hi	3ec9c <aarch64_ext_aimm@@Base+0x6c>  // b.pmore
   3ec64:	cmp	w3, #0x0
   3ec68:	mov	x0, #0xc                   	// #12
   3ec6c:	csel	x0, x0, xzr, ne  // ne = any
   3ec70:	str	x0, [x1, #40]
   3ec74:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   3ec78:	ldr	x3, [x3, #3944]
   3ec7c:	ldr	w4, [x3, #380]
   3ec80:	mov	w0, #0xffffffff            	// #-1
   3ec84:	lsl	w0, w0, w4
   3ec88:	ldr	w3, [x3, #376]
   3ec8c:	lsr	w2, w2, w3
   3ec90:	bic	w2, w2, w0
   3ec94:	str	x2, [x1, #16]
   3ec98:	mov	w0, #0x1                   	// #1
   3ec9c:	ret

000000000003eca0 <aarch64_ext_limm@@Base>:
   3eca0:	stp	x29, x30, [sp, #-48]!
   3eca4:	mov	x29, sp
   3eca8:	stp	x19, x20, [sp, #16]
   3ecac:	str	x21, [sp, #32]
   3ecb0:	mov	x6, x0
   3ecb4:	mov	x20, x1
   3ecb8:	mov	w0, w2
   3ecbc:	mov	x21, x3
   3ecc0:	ldr	w5, [x6, #28]
   3ecc4:	ldr	w4, [x6, #24]
   3ecc8:	ldr	w3, [x6, #20]
   3eccc:	mov	w2, #0x3                   	// #3
   3ecd0:	mov	w1, #0x0                   	// #0
   3ecd4:	bl	35390 <extract_fields@plt>
   3ecd8:	mov	w19, w0
   3ecdc:	ldrb	w0, [x21, #28]
   3ece0:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3ece4:	and	w0, w0, #0xff
   3ece8:	and	w3, w19, #0x3f
   3ecec:	ubfx	x5, x19, #6, #6
   3ecf0:	tbnz	w19, #12, 3ed64 <aarch64_ext_limm@@Base+0xc4>
   3ecf4:	cmp	w3, #0x37
   3ecf8:	b.hi	3ed2c <aarch64_ext_limm@@Base+0x8c>  // b.pmore
   3ecfc:	cmp	w3, #0x2f
   3ed00:	b.hi	3ed4c <aarch64_ext_limm@@Base+0xac>  // b.pmore
   3ed04:	mov	w2, #0x20                  	// #32
   3ed08:	tbz	w19, #5, 3ed14 <aarch64_ext_limm@@Base+0x74>
   3ed0c:	and	w3, w19, #0xf
   3ed10:	mov	w2, #0x10                  	// #16
   3ed14:	mov	x4, #0x1                   	// #1
   3ed18:	lsl	x4, x4, x2
   3ed1c:	sub	x4, x4, #0x1
   3ed20:	sub	w1, w2, #0x1
   3ed24:	and	w5, w5, w1
   3ed28:	b	3ed6c <aarch64_ext_limm@@Base+0xcc>
   3ed2c:	cmp	w3, #0x3b
   3ed30:	b.ls	3ed58 <aarch64_ext_limm@@Base+0xb8>  // b.plast
   3ed34:	sub	w3, w3, #0x3c
   3ed38:	cmp	w3, #0x1
   3ed3c:	b.hi	3ee48 <aarch64_ext_limm@@Base+0x1a8>  // b.pmore
   3ed40:	and	w3, w19, #0x1
   3ed44:	mov	w2, #0x2                   	// #2
   3ed48:	b	3ed14 <aarch64_ext_limm@@Base+0x74>
   3ed4c:	and	w3, w19, #0x7
   3ed50:	mov	w2, #0x8                   	// #8
   3ed54:	b	3ed14 <aarch64_ext_limm@@Base+0x74>
   3ed58:	and	w3, w19, #0x3
   3ed5c:	mov	w2, #0x4                   	// #4
   3ed60:	b	3ed14 <aarch64_ext_limm@@Base+0x74>
   3ed64:	mov	w2, #0x40                  	// #64
   3ed68:	mov	x4, #0xffffffffffffffff    	// #-1
   3ed6c:	cmp	w2, w0, lsl #3
   3ed70:	b.hi	3ee50 <aarch64_ext_limm@@Base+0x1b0>  // b.pmore
   3ed74:	sub	w1, w2, #0x1
   3ed78:	cmp	w1, w3
   3ed7c:	b.eq	3ee58 <aarch64_ext_limm@@Base+0x1b8>  // b.none
   3ed80:	add	w1, w3, #0x1
   3ed84:	mov	x3, #0x1                   	// #1
   3ed88:	lsl	x3, x3, x1
   3ed8c:	sub	x3, x3, #0x1
   3ed90:	cbz	w5, 3eda8 <aarch64_ext_limm@@Base+0x108>
   3ed94:	sub	w1, w2, w5
   3ed98:	lsl	x1, x3, x1
   3ed9c:	and	x4, x1, x4
   3eda0:	lsr	x3, x3, x5
   3eda4:	orr	x3, x4, x3
   3eda8:	cmp	w2, #0x10
   3edac:	b.eq	3edc8 <aarch64_ext_limm@@Base+0x128>  // b.none
   3edb0:	b.hi	3ede8 <aarch64_ext_limm@@Base+0x148>  // b.pmore
   3edb4:	cmp	w2, #0x4
   3edb8:	b.eq	3ede0 <aarch64_ext_limm@@Base+0x140>  // b.none
   3edbc:	cmp	w2, #0x8
   3edc0:	b.ne	3edd4 <aarch64_ext_limm@@Base+0x134>  // b.any
   3edc4:	orr	x3, x3, x3, lsl #8
   3edc8:	orr	x3, x3, x3, lsl #16
   3edcc:	orr	x3, x3, x3, lsl #32
   3edd0:	b	3edf8 <aarch64_ext_limm@@Base+0x158>
   3edd4:	cmp	w2, #0x2
   3edd8:	b.ne	3ee24 <aarch64_ext_limm@@Base+0x184>  // b.any
   3eddc:	orr	x3, x3, x3, lsl #2
   3ede0:	orr	x3, x3, x3, lsl #4
   3ede4:	b	3edc4 <aarch64_ext_limm@@Base+0x124>
   3ede8:	cmp	w2, #0x20
   3edec:	b.eq	3edcc <aarch64_ext_limm@@Base+0x12c>  // b.none
   3edf0:	cmp	w2, #0x40
   3edf4:	b.ne	3ee24 <aarch64_ext_limm@@Base+0x184>  // b.any
   3edf8:	lsl	w0, w0, #2
   3edfc:	mov	x1, #0xffffffffffffffff    	// #-1
   3ee00:	lsl	x1, x1, x0
   3ee04:	lsl	x0, x1, x0
   3ee08:	bic	x3, x3, x0
   3ee0c:	str	x3, [x20, #16]
   3ee10:	mov	w0, #0x1                   	// #1
   3ee14:	ldp	x19, x20, [sp, #16]
   3ee18:	ldr	x21, [sp, #32]
   3ee1c:	ldp	x29, x30, [sp], #48
   3ee20:	ret
   3ee24:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3ee28:	add	x3, x3, #0xa48
   3ee2c:	add	x3, x3, #0x3b0
   3ee30:	mov	w2, #0x37f                 	// #895
   3ee34:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3ee38:	add	x1, x1, #0x2e0
   3ee3c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3ee40:	add	x0, x0, #0xb60
   3ee44:	bl	35ac0 <__assert_fail@plt>
   3ee48:	mov	w0, #0x0                   	// #0
   3ee4c:	b	3ee14 <aarch64_ext_limm@@Base+0x174>
   3ee50:	mov	w0, #0x0                   	// #0
   3ee54:	b	3ee14 <aarch64_ext_limm@@Base+0x174>
   3ee58:	mov	w0, #0x0                   	// #0
   3ee5c:	b	3ee14 <aarch64_ext_limm@@Base+0x174>

000000000003ee60 <aarch64_ext_inv_limm@@Base>:
   3ee60:	stp	x29, x30, [sp, #-32]!
   3ee64:	mov	x29, sp
   3ee68:	str	x19, [sp, #16]
   3ee6c:	mov	x19, x1
   3ee70:	bl	35420 <aarch64_ext_limm@plt>
   3ee74:	cbz	w0, 3ee88 <aarch64_ext_inv_limm@@Base+0x28>
   3ee78:	ldr	x0, [x19, #16]
   3ee7c:	mvn	x0, x0
   3ee80:	str	x0, [x19, #16]
   3ee84:	mov	w0, #0x1                   	// #1
   3ee88:	ldr	x19, [sp, #16]
   3ee8c:	ldp	x29, x30, [sp], #32
   3ee90:	ret

000000000003ee94 <aarch64_ext_ft@@Base>:
   3ee94:	stp	x29, x30, [sp, #-48]!
   3ee98:	mov	x29, sp
   3ee9c:	stp	x19, x20, [sp, #16]
   3eea0:	mov	x19, x1
   3eea4:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   3eea8:	ldr	x5, [x5, #3944]
   3eeac:	ldr	w6, [x5, #100]
   3eeb0:	mov	w4, #0xffffffff            	// #-1
   3eeb4:	lsl	w6, w4, w6
   3eeb8:	ldr	w1, [x5, #96]
   3eebc:	lsr	w1, w2, w1
   3eec0:	bic	w6, w1, w6
   3eec4:	str	w6, [x19, #16]
   3eec8:	ldr	w1, [x5, #300]
   3eecc:	lsl	w4, w4, w1
   3eed0:	ldr	w1, [x5, #296]
   3eed4:	lsr	w1, w2, w1
   3eed8:	bic	w4, w1, w4
   3eedc:	ldr	x1, [x3, #8]
   3eee0:	ldr	w1, [x1, #16]
   3eee4:	sub	w1, w1, #0x3d
   3eee8:	cmp	w1, #0x3
   3eeec:	b.hi	3ef30 <aarch64_ext_ft@@Base+0x9c>  // b.pmore
   3eef0:	cmp	w4, #0x1
   3eef4:	b.eq	3ef20 <aarch64_ext_ft@@Base+0x8c>  // b.none
   3eef8:	cmp	w4, #0x2
   3eefc:	b.eq	3ef28 <aarch64_ext_ft@@Base+0x94>  // b.none
   3ef00:	mov	w0, #0x0                   	// #0
   3ef04:	cbnz	w4, 3ef14 <aarch64_ext_ft@@Base+0x80>
   3ef08:	mov	w0, #0x7                   	// #7
   3ef0c:	strb	w0, [x19, #4]
   3ef10:	mov	w0, #0x1                   	// #1
   3ef14:	ldp	x19, x20, [sp, #16]
   3ef18:	ldp	x29, x30, [sp], #48
   3ef1c:	ret
   3ef20:	mov	w0, #0x8                   	// #8
   3ef24:	b	3ef0c <aarch64_ext_ft@@Base+0x78>
   3ef28:	mov	w0, #0x9                   	// #9
   3ef2c:	b	3ef0c <aarch64_ext_ft@@Base+0x78>
   3ef30:	mov	w0, w2
   3ef34:	mov	w4, #0x25                  	// #37
   3ef38:	mov	w3, #0x22                  	// #34
   3ef3c:	mov	w2, #0x2                   	// #2
   3ef40:	mov	w1, #0x0                   	// #0
   3ef44:	bl	35390 <extract_fields@plt>
   3ef48:	mov	w20, w0
   3ef4c:	mov	w0, #0x0                   	// #0
   3ef50:	cmp	w20, #0x4
   3ef54:	b.hi	3ef14 <aarch64_ext_ft@@Base+0x80>  // b.pmore
   3ef58:	str	x21, [sp, #32]
   3ef5c:	add	w21, w20, #0x5
   3ef60:	and	w21, w21, #0xff
   3ef64:	mov	w0, w21
   3ef68:	bl	353d0 <aarch64_get_qualifier_standard_value@plt>
   3ef6c:	cmp	w20, w0
   3ef70:	b.ne	3ef84 <aarch64_ext_ft@@Base+0xf0>  // b.any
   3ef74:	strb	w21, [x19, #4]
   3ef78:	mov	w0, #0x1                   	// #1
   3ef7c:	ldr	x21, [sp, #32]
   3ef80:	b	3ef14 <aarch64_ext_ft@@Base+0x80>
   3ef84:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3ef88:	add	x3, x3, #0xa48
   3ef8c:	add	x3, x3, #0x118
   3ef90:	mov	w2, #0xe5                  	// #229
   3ef94:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3ef98:	add	x1, x1, #0x2e0
   3ef9c:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3efa0:	add	x0, x0, #0x438
   3efa4:	bl	35ac0 <__assert_fail@plt>

000000000003efa8 <aarch64_ext_addr_simple@@Base>:
   3efa8:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   3efac:	ldr	x3, [x3, #3944]
   3efb0:	ldr	w4, [x3, #116]
   3efb4:	mov	w0, #0xffffffff            	// #-1
   3efb8:	lsl	w0, w0, w4
   3efbc:	ldr	w3, [x3, #112]
   3efc0:	lsr	w2, w2, w3
   3efc4:	bic	w0, w2, w0
   3efc8:	str	w0, [x1, #16]
   3efcc:	mov	w0, #0x1                   	// #1
   3efd0:	ret

000000000003efd4 <aarch64_ext_addr_offset@@Base>:
   3efd4:	stp	x29, x30, [sp, #-64]!
   3efd8:	mov	x29, sp
   3efdc:	stp	x19, x20, [sp, #16]
   3efe0:	stp	x21, x22, [sp, #32]
   3efe4:	str	x23, [sp, #48]
   3efe8:	mov	x23, x0
   3efec:	mov	x21, x1
   3eff0:	mov	w19, w2
   3eff4:	mov	x0, x3
   3eff8:	ldr	w1, [x1, #8]
   3effc:	bl	3be94 <aarch64_opcode_encode@@Base+0x1f00>
   3f000:	strb	w0, [x21, #4]
   3f004:	adrp	x22, a3000 <aarch64_operands@@Base+0x16bc0>
   3f008:	ldr	x22, [x22, #3944]
   3f00c:	ldr	w1, [x23, #20]
   3f010:	lsl	x1, x1, #3
   3f014:	add	x0, x22, x1
   3f018:	ldr	w0, [x0, #4]
   3f01c:	mov	w20, #0xffffffff            	// #-1
   3f020:	lsl	w0, w20, w0
   3f024:	ldr	w1, [x22, x1]
   3f028:	lsr	w1, w19, w1
   3f02c:	bic	w0, w1, w0
   3f030:	str	w0, [x21, #16]
   3f034:	ldr	w3, [x23, #24]
   3f038:	mov	w2, #0x1                   	// #1
   3f03c:	mov	w1, #0x0                   	// #0
   3f040:	mov	w0, w19
   3f044:	bl	35390 <extract_fields@plt>
   3f048:	sbfx	x0, x0, #0, #9
   3f04c:	str	w0, [x21, #20]
   3f050:	ldr	w0, [x23, #28]
   3f054:	lsl	x0, x0, #3
   3f058:	add	x1, x22, x0
   3f05c:	ldr	w1, [x1, #4]
   3f060:	lsl	w20, w20, w1
   3f064:	ldr	w2, [x22, x0]
   3f068:	lsr	w19, w19, w2
   3f06c:	bic	w19, w19, w20
   3f070:	cmp	w19, #0x1
   3f074:	b.eq	3f090 <aarch64_ext_addr_offset@@Base+0xbc>  // b.none
   3f078:	mov	w0, #0x1                   	// #1
   3f07c:	ldp	x19, x20, [sp, #16]
   3f080:	ldp	x21, x22, [sp, #32]
   3f084:	ldr	x23, [sp, #48]
   3f088:	ldp	x29, x30, [sp], #64
   3f08c:	ret
   3f090:	ldrb	w0, [x21, #28]
   3f094:	orr	w0, w0, #0x6
   3f098:	strb	w0, [x21, #28]
   3f09c:	b	3f078 <aarch64_ext_addr_offset@@Base+0xa4>

000000000003f0a0 <aarch64_ext_addr_regoff@@Base>:
   3f0a0:	stp	x29, x30, [sp, #-64]!
   3f0a4:	mov	x29, sp
   3f0a8:	stp	x19, x20, [sp, #16]
   3f0ac:	str	x21, [sp, #32]
   3f0b0:	mov	x19, x1
   3f0b4:	mov	w20, w2
   3f0b8:	mov	x21, x3
   3f0bc:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3f0c0:	ldr	x1, [x1, #3944]
   3f0c4:	ldr	w2, [x1, #116]
   3f0c8:	mov	w0, #0xffffffff            	// #-1
   3f0cc:	lsl	w2, w0, w2
   3f0d0:	ldr	w3, [x1, #112]
   3f0d4:	lsr	w3, w20, w3
   3f0d8:	bic	w2, w3, w2
   3f0dc:	str	w2, [x19, #16]
   3f0e0:	ldr	w2, [x1, #228]
   3f0e4:	lsl	w2, w0, w2
   3f0e8:	ldr	w3, [x1, #224]
   3f0ec:	lsr	w3, w20, w3
   3f0f0:	bic	w2, w3, w2
   3f0f4:	str	w2, [x19, #20]
   3f0f8:	ldr	w2, [x1, #244]
   3f0fc:	lsl	w0, w0, w2
   3f100:	ldr	w2, [x1, #240]
   3f104:	lsr	w2, w20, w2
   3f108:	mov	w1, #0x1                   	// #1
   3f10c:	bic	w0, w2, w0
   3f110:	bl	35bb0 <aarch64_get_operand_modifier_from_value@plt>
   3f114:	cmp	w0, #0x9
   3f118:	mov	w1, #0x5                   	// #5
   3f11c:	csel	w0, w0, w1, ne  // ne = any
   3f120:	str	w0, [x19, #32]
   3f124:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3f128:	ldr	x0, [x0, #3944]
   3f12c:	ldr	w2, [x0, #252]
   3f130:	mov	w1, #0xffffffff            	// #-1
   3f134:	lsl	w1, w1, w2
   3f138:	ldr	w2, [x0, #248]
   3f13c:	lsr	w20, w20, w2
   3f140:	bics	wzr, w20, w1
   3f144:	b.ne	3f16c <aarch64_ext_addr_regoff@@Base+0xcc>  // b.any
   3f148:	str	xzr, [x19, #40]
   3f14c:	ldrb	w0, [x19, #36]
   3f150:	and	w0, w0, #0xfffffffd
   3f154:	strb	w0, [x19, #36]
   3f158:	mov	w0, #0x1                   	// #1
   3f15c:	ldp	x19, x20, [sp, #16]
   3f160:	ldr	x21, [sp, #32]
   3f164:	ldp	x29, x30, [sp], #64
   3f168:	ret
   3f16c:	ldr	w1, [x19, #8]
   3f170:	mov	x0, x21
   3f174:	bl	3be94 <aarch64_opcode_encode@@Base+0x1f00>
   3f178:	strb	w0, [x19, #4]
   3f17c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3f180:	and	w0, w0, #0xff
   3f184:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3f188:	add	x1, x1, #0xa48
   3f18c:	add	x1, x1, #0x200
   3f190:	ldp	x2, x3, [x1, #48]
   3f194:	stp	x2, x3, [sp, #48]
   3f198:	cmp	w0, #0x10
   3f19c:	b.hi	3f1cc <aarch64_ext_addr_regoff@@Base+0x12c>  // b.pmore
   3f1a0:	sub	w0, w0, #0x1
   3f1a4:	add	x1, sp, #0x30
   3f1a8:	ldrb	w0, [x1, w0, uxtw]
   3f1ac:	cmp	w0, #0xff
   3f1b0:	b.eq	3f1f0 <aarch64_ext_addr_regoff@@Base+0x150>  // b.none
   3f1b4:	and	x0, x0, #0xff
   3f1b8:	str	x0, [x19, #40]
   3f1bc:	ldrb	w0, [x19, #36]
   3f1c0:	orr	w0, w0, #0x2
   3f1c4:	strb	w0, [x19, #36]
   3f1c8:	b	3f158 <aarch64_ext_addr_regoff@@Base+0xb8>
   3f1cc:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3f1d0:	add	x3, x3, #0xa48
   3f1d4:	add	x3, x3, #0x240
   3f1d8:	mov	w2, #0x200                 	// #512
   3f1dc:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3f1e0:	add	x1, x1, #0x970
   3f1e4:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3f1e8:	add	x0, x0, #0xb60
   3f1ec:	bl	35ac0 <__assert_fail@plt>
   3f1f0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3f1f4:	add	x3, x3, #0xa48
   3f1f8:	add	x3, x3, #0x240
   3f1fc:	mov	w2, #0x203                 	// #515
   3f200:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3f204:	add	x1, x1, #0x970
   3f208:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3f20c:	add	x0, x0, #0xbc0
   3f210:	bl	35ac0 <__assert_fail@plt>

000000000003f214 <aarch64_ext_addr_simm@@Base>:
   3f214:	stp	x29, x30, [sp, #-48]!
   3f218:	mov	x29, sp
   3f21c:	stp	x19, x20, [sp, #16]
   3f220:	stp	x21, x22, [sp, #32]
   3f224:	mov	x21, x0
   3f228:	mov	x19, x1
   3f22c:	mov	w20, w2
   3f230:	mov	x22, x3
   3f234:	ldr	w1, [x1, #8]
   3f238:	mov	x0, x3
   3f23c:	bl	3be94 <aarch64_opcode_encode@@Base+0x1f00>
   3f240:	strb	w0, [x19, #4]
   3f244:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3f248:	ldr	x1, [x1, #3944]
   3f24c:	ldr	w2, [x1, #116]
   3f250:	mov	w4, #0xffffffff            	// #-1
   3f254:	lsl	w2, w4, w2
   3f258:	ldr	w3, [x1, #112]
   3f25c:	lsr	w3, w20, w3
   3f260:	bic	w2, w3, w2
   3f264:	str	w2, [x19, #16]
   3f268:	ldr	w3, [x21, #20]
   3f26c:	lsl	x3, x3, #3
   3f270:	add	x2, x1, x3
   3f274:	ldr	w2, [x2, #4]
   3f278:	ldr	w1, [x1, x3]
   3f27c:	lsr	w1, w20, w1
   3f280:	lsl	w4, w4, w2
   3f284:	bic	w4, w1, w4
   3f288:	sub	w1, w2, #0x1
   3f28c:	cmp	w1, #0x1f
   3f290:	b.hi	3f308 <aarch64_ext_addr_simm@@Base+0xf4>  // b.pmore
   3f294:	and	w5, w0, #0xff
   3f298:	mov	x3, #0x1                   	// #1
   3f29c:	lsl	x3, x3, x1
   3f2a0:	mov	x2, #0x2                   	// #2
   3f2a4:	lsl	x1, x2, x1
   3f2a8:	sub	x1, x1, #0x1
   3f2ac:	and	w4, w4, w1
   3f2b0:	eor	x4, x4, x3
   3f2b4:	sub	x4, x4, x3
   3f2b8:	str	w4, [x19, #20]
   3f2bc:	ldr	w1, [x21, #20]
   3f2c0:	cmp	w1, #0x2c
   3f2c4:	ccmp	w5, #0x19, #0x4, ne  // ne = any
   3f2c8:	b.eq	3f32c <aarch64_ext_addr_simm@@Base+0x118>  // b.none
   3f2cc:	ldr	x0, [x22, #8]
   3f2d0:	ldr	w0, [x0, #16]
   3f2d4:	sub	w1, w0, #0x3a
   3f2d8:	sub	w0, w0, #0x3d
   3f2dc:	cmp	w1, #0x1
   3f2e0:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
   3f2e4:	b.hi	3f344 <aarch64_ext_addr_simm@@Base+0x130>  // b.pmore
   3f2e8:	ldrb	w0, [x19, #28]
   3f2ec:	and	w0, w0, #0xfffffffd
   3f2f0:	strb	w0, [x19, #28]
   3f2f4:	mov	w0, #0x1                   	// #1
   3f2f8:	ldp	x19, x20, [sp, #16]
   3f2fc:	ldp	x21, x22, [sp, #32]
   3f300:	ldp	x29, x30, [sp], #48
   3f304:	ret
   3f308:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3f30c:	add	x3, x3, #0xa48
   3f310:	add	x3, x3, #0x3c0
   3f314:	mov	w2, #0xba                  	// #186
   3f318:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3f31c:	add	x1, x1, #0x2e0
   3f320:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3f324:	add	x0, x0, #0x710
   3f328:	bl	35ac0 <__assert_fail@plt>
   3f32c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3f330:	and	w1, w0, #0xff
   3f334:	ldr	w0, [x19, #20]
   3f338:	mul	w0, w0, w1
   3f33c:	str	w0, [x19, #20]
   3f340:	b	3f2cc <aarch64_ext_addr_simm@@Base+0xb8>
   3f344:	ldrb	w0, [x19, #28]
   3f348:	orr	w0, w0, #0x2
   3f34c:	strb	w0, [x19, #28]
   3f350:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   3f354:	ldr	x2, [x2, #3944]
   3f358:	ldr	w1, [x21, #24]
   3f35c:	lsl	x1, x1, #3
   3f360:	add	x0, x2, x1
   3f364:	ldr	w3, [x0, #4]
   3f368:	mov	w0, #0xffffffff            	// #-1
   3f36c:	lsl	w0, w0, w3
   3f370:	ldr	w2, [x2, x1]
   3f374:	lsr	w20, w20, w2
   3f378:	bic	w20, w20, w0
   3f37c:	cmp	w20, #0x1
   3f380:	b.eq	3f394 <aarch64_ext_addr_simm@@Base+0x180>  // b.none
   3f384:	ldrb	w0, [x19, #28]
   3f388:	orr	w0, w0, #0x8
   3f38c:	strb	w0, [x19, #28]
   3f390:	b	3f2f4 <aarch64_ext_addr_simm@@Base+0xe0>
   3f394:	ldrb	w0, [x19, #28]
   3f398:	orr	w0, w0, #0x4
   3f39c:	strb	w0, [x19, #28]
   3f3a0:	b	3f2f4 <aarch64_ext_addr_simm@@Base+0xe0>

000000000003f3a4 <aarch64_ext_addr_uimm12@@Base>:
   3f3a4:	stp	x29, x30, [sp, #-64]!
   3f3a8:	mov	x29, sp
   3f3ac:	stp	x19, x20, [sp, #16]
   3f3b0:	str	x21, [sp, #32]
   3f3b4:	mov	x21, x0
   3f3b8:	mov	x19, x1
   3f3bc:	mov	w20, w2
   3f3c0:	mov	x0, x3
   3f3c4:	ldr	w1, [x1, #8]
   3f3c8:	bl	3be94 <aarch64_opcode_encode@@Base+0x1f00>
   3f3cc:	strb	w0, [x19, #4]
   3f3d0:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3f3d4:	and	w1, w0, #0xff
   3f3d8:	adrp	x2, 59000 <xexit@@Base+0x74c>
   3f3dc:	add	x2, x2, #0xa48
   3f3e0:	add	x2, x2, #0x200
   3f3e4:	ldp	x2, x3, [x2, #48]
   3f3e8:	stp	x2, x3, [sp, #48]
   3f3ec:	cmp	w1, #0x10
   3f3f0:	b.hi	3f474 <aarch64_ext_addr_uimm12@@Base+0xd0>  // b.pmore
   3f3f4:	sub	w1, w1, #0x1
   3f3f8:	add	x0, sp, #0x30
   3f3fc:	ldrb	w4, [x0, w1, uxtw]
   3f400:	cmp	w4, #0xff
   3f404:	b.eq	3f498 <aarch64_ext_addr_uimm12@@Base+0xf4>  // b.none
   3f408:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3f40c:	ldr	x1, [x1, #3944]
   3f410:	ldr	w2, [x21, #20]
   3f414:	lsl	x2, x2, #3
   3f418:	add	x0, x1, x2
   3f41c:	ldr	w0, [x0, #4]
   3f420:	mov	w3, #0xffffffff            	// #-1
   3f424:	lsl	w0, w3, w0
   3f428:	ldr	w2, [x1, x2]
   3f42c:	lsr	w2, w20, w2
   3f430:	bic	w0, w2, w0
   3f434:	str	w0, [x19, #16]
   3f438:	ldr	w0, [x21, #24]
   3f43c:	lsl	x0, x0, #3
   3f440:	add	x2, x1, x0
   3f444:	ldr	w2, [x2, #4]
   3f448:	lsl	w3, w3, w2
   3f44c:	ldr	w2, [x1, x0]
   3f450:	lsr	w20, w20, w2
   3f454:	bic	w3, w20, w3
   3f458:	lsl	w3, w3, w4
   3f45c:	str	w3, [x19, #20]
   3f460:	mov	w0, #0x1                   	// #1
   3f464:	ldp	x19, x20, [sp, #16]
   3f468:	ldr	x21, [sp, #32]
   3f46c:	ldp	x29, x30, [sp], #64
   3f470:	ret
   3f474:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3f478:	add	x3, x3, #0xa48
   3f47c:	add	x3, x3, #0x240
   3f480:	mov	w2, #0x200                 	// #512
   3f484:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3f488:	add	x1, x1, #0x970
   3f48c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3f490:	add	x0, x0, #0xb60
   3f494:	bl	35ac0 <__assert_fail@plt>
   3f498:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3f49c:	add	x3, x3, #0xa48
   3f4a0:	add	x3, x3, #0x240
   3f4a4:	mov	w2, #0x203                 	// #515
   3f4a8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   3f4ac:	add	x1, x1, #0x970
   3f4b0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   3f4b4:	add	x0, x0, #0xbc0
   3f4b8:	bl	35ac0 <__assert_fail@plt>

000000000003f4bc <aarch64_ext_addr_simm10@@Base>:
   3f4bc:	stp	x29, x30, [sp, #-64]!
   3f4c0:	mov	x29, sp
   3f4c4:	stp	x19, x20, [sp, #16]
   3f4c8:	stp	x21, x22, [sp, #32]
   3f4cc:	str	x23, [sp, #48]
   3f4d0:	mov	x21, x0
   3f4d4:	mov	x22, x1
   3f4d8:	mov	w19, w2
   3f4dc:	mov	x0, x3
   3f4e0:	ldr	w1, [x1, #8]
   3f4e4:	bl	3be94 <aarch64_opcode_encode@@Base+0x1f00>
   3f4e8:	strb	w0, [x22, #4]
   3f4ec:	adrp	x23, a3000 <aarch64_operands@@Base+0x16bc0>
   3f4f0:	ldr	x23, [x23, #3944]
   3f4f4:	ldr	w1, [x21, #20]
   3f4f8:	lsl	x1, x1, #3
   3f4fc:	add	x0, x23, x1
   3f500:	ldr	w0, [x0, #4]
   3f504:	mov	w20, #0xffffffff            	// #-1
   3f508:	lsl	w0, w20, w0
   3f50c:	ldr	w1, [x23, x1]
   3f510:	lsr	w1, w19, w1
   3f514:	bic	w0, w1, w0
   3f518:	str	w0, [x22, #16]
   3f51c:	ldr	w4, [x21, #28]
   3f520:	ldr	w3, [x21, #24]
   3f524:	mov	w2, #0x2                   	// #2
   3f528:	mov	w1, #0x0                   	// #0
   3f52c:	mov	w0, w19
   3f530:	bl	35390 <extract_fields@plt>
   3f534:	sbfiz	x0, x0, #3, #10
   3f538:	str	w0, [x22, #20]
   3f53c:	ldr	w0, [x21, #32]
   3f540:	lsl	x0, x0, #3
   3f544:	add	x1, x23, x0
   3f548:	ldr	w1, [x1, #4]
   3f54c:	lsl	w20, w20, w1
   3f550:	ldr	w2, [x23, x0]
   3f554:	lsr	w19, w19, w2
   3f558:	bic	w19, w19, w20
   3f55c:	cmp	w19, #0x1
   3f560:	b.eq	3f57c <aarch64_ext_addr_simm10@@Base+0xc0>  // b.none
   3f564:	mov	w0, #0x1                   	// #1
   3f568:	ldp	x19, x20, [sp, #16]
   3f56c:	ldp	x21, x22, [sp, #32]
   3f570:	ldr	x23, [sp, #48]
   3f574:	ldp	x29, x30, [sp], #64
   3f578:	ret
   3f57c:	ldrb	w0, [x22, #28]
   3f580:	orr	w0, w0, #0x6
   3f584:	strb	w0, [x22, #28]
   3f588:	b	3f564 <aarch64_ext_addr_simm10@@Base+0xa8>

000000000003f58c <aarch64_ext_simd_addr_post@@Base>:
   3f58c:	stp	x29, x30, [sp, #-48]!
   3f590:	mov	x29, sp
   3f594:	stp	x19, x20, [sp, #16]
   3f598:	mov	x19, x1
   3f59c:	mov	x20, x3
   3f5a0:	ldr	x0, [x3, #8]
   3f5a4:	ldr	x5, [x0, #120]
   3f5a8:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3f5ac:	ldr	x1, [x1, #3944]
   3f5b0:	ldr	w4, [x1, #116]
   3f5b4:	mov	w0, #0xffffffff            	// #-1
   3f5b8:	lsl	w4, w0, w4
   3f5bc:	ldr	w3, [x1, #112]
   3f5c0:	lsr	w3, w2, w3
   3f5c4:	bic	w4, w3, w4
   3f5c8:	str	w4, [x19, #16]
   3f5cc:	ldr	w3, [x1, #228]
   3f5d0:	lsl	w0, w0, w3
   3f5d4:	ldr	w1, [x1, #224]
   3f5d8:	lsr	w2, w2, w1
   3f5dc:	bic	w2, w2, w0
   3f5e0:	str	w2, [x19, #20]
   3f5e4:	cmp	w2, #0x1f
   3f5e8:	b.eq	3f610 <aarch64_ext_simd_addr_post@@Base+0x84>  // b.none
   3f5ec:	mov	w0, #0x1                   	// #1
   3f5f0:	str	w0, [x19, #24]
   3f5f4:	ldrb	w0, [x19, #28]
   3f5f8:	orr	w0, w0, #0x2
   3f5fc:	strb	w0, [x19, #28]
   3f600:	mov	w0, #0x1                   	// #1
   3f604:	ldp	x19, x20, [sp, #16]
   3f608:	ldp	x29, x30, [sp], #48
   3f60c:	ret
   3f610:	str	x21, [sp, #32]
   3f614:	ldr	x0, [x20, #8]
   3f618:	ldr	w0, [x0, #32]
   3f61c:	cmp	w0, #0x25
   3f620:	b.ne	3f658 <aarch64_ext_simd_addr_post@@Base+0xcc>  // b.any
   3f624:	ubfx	w5, w5, #24, #3
   3f628:	mov	w21, #0x1                   	// #1
   3f62c:	cmp	w5, w21
   3f630:	b.eq	3f63c <aarch64_ext_simd_addr_post@@Base+0xb0>  // b.none
   3f634:	ldrb	w0, [x20, #40]
   3f638:	ubfx	x21, x0, #5, #3
   3f63c:	ldrb	w0, [x20, #28]
   3f640:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3f644:	and	w0, w0, #0xff
   3f648:	mul	w0, w0, w21
   3f64c:	str	w0, [x19, #20]
   3f650:	ldr	x21, [sp, #32]
   3f654:	b	3f5f4 <aarch64_ext_simd_addr_post@@Base+0x68>
   3f658:	ldrb	w21, [x20, #40]
   3f65c:	ubfx	x21, x21, #5, #3
   3f660:	ldrb	w0, [x20, #28]
   3f664:	bl	35680 <aarch64_get_qualifier_esize@plt>
   3f668:	and	w0, w0, #0xff
   3f66c:	mul	w21, w0, w21
   3f670:	ldrb	w0, [x20, #28]
   3f674:	bl	358f0 <aarch64_get_qualifier_nelem@plt>
   3f678:	and	w0, w0, #0xff
   3f67c:	mul	w0, w0, w21
   3f680:	str	w0, [x19, #20]
   3f684:	ldr	x21, [sp, #32]
   3f688:	b	3f5f4 <aarch64_ext_simd_addr_post@@Base+0x68>

000000000003f68c <aarch64_ext_cond@@Base>:
   3f68c:	stp	x29, x30, [sp, #-32]!
   3f690:	mov	x29, sp
   3f694:	str	x19, [sp, #16]
   3f698:	mov	x19, x1
   3f69c:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   3f6a0:	ldr	x3, [x3, #3944]
   3f6a4:	ldr	w1, [x3, #188]
   3f6a8:	mov	w0, #0xffffffff            	// #-1
   3f6ac:	lsl	w0, w0, w1
   3f6b0:	ldr	w1, [x3, #184]
   3f6b4:	lsr	w2, w2, w1
   3f6b8:	bic	w0, w2, w0
   3f6bc:	bl	35310 <get_cond_from_value@plt>
   3f6c0:	str	x0, [x19, #16]
   3f6c4:	mov	w0, #0x1                   	// #1
   3f6c8:	ldr	x19, [sp, #16]
   3f6cc:	ldp	x29, x30, [sp], #32
   3f6d0:	ret

000000000003f6d4 <aarch64_ext_sysreg@@Base>:
   3f6d4:	stp	x29, x30, [sp, #-32]!
   3f6d8:	mov	x29, sp
   3f6dc:	stp	x19, x20, [sp, #16]
   3f6e0:	mov	x19, x1
   3f6e4:	mov	w0, w2
   3f6e8:	mov	x20, x3
   3f6ec:	mov	w7, #0x11                  	// #17
   3f6f0:	mov	w6, #0x12                  	// #18
   3f6f4:	mov	w5, #0x13                  	// #19
   3f6f8:	mov	w4, #0x14                  	// #20
   3f6fc:	mov	w3, #0x15                  	// #21
   3f700:	mov	w2, #0x5                   	// #5
   3f704:	mov	w1, #0x0                   	// #0
   3f708:	bl	35390 <extract_fields@plt>
   3f70c:	str	w0, [x19, #16]
   3f710:	str	wzr, [x19, #20]
   3f714:	ldr	x0, [x20, #8]
   3f718:	ldr	w1, [x0, #16]
   3f71c:	cmp	w1, #0x46
   3f720:	b.eq	3f734 <aarch64_ext_sysreg@@Base+0x60>  // b.none
   3f724:	mov	w0, #0x1                   	// #1
   3f728:	ldp	x19, x20, [sp, #16]
   3f72c:	ldp	x29, x30, [sp], #32
   3f730:	ret
   3f734:	ldr	x0, [x0, #120]
   3f738:	and	x0, x0, #0x60000000
   3f73c:	mov	x1, #0x20000000            	// #536870912
   3f740:	cmp	x0, x1
   3f744:	b.eq	3f760 <aarch64_ext_sysreg@@Base+0x8c>  // b.none
   3f748:	mov	x1, #0x40000000            	// #1073741824
   3f74c:	cmp	x0, x1
   3f750:	b.ne	3f724 <aarch64_ext_sysreg@@Base+0x50>  // b.any
   3f754:	mov	w0, #0x10                  	// #16
   3f758:	str	w0, [x19, #20]
   3f75c:	b	3f724 <aarch64_ext_sysreg@@Base+0x50>
   3f760:	mov	w0, #0x8                   	// #8
   3f764:	str	w0, [x19, #20]
   3f768:	b	3f724 <aarch64_ext_sysreg@@Base+0x50>

000000000003f76c <aarch64_ext_pstatefield@@Base>:
   3f76c:	stp	x29, x30, [sp, #-32]!
   3f770:	mov	x29, sp
   3f774:	str	x19, [sp, #16]
   3f778:	mov	x19, x1
   3f77c:	mov	w0, w2
   3f780:	mov	w4, #0x11                  	// #17
   3f784:	mov	w3, #0x14                  	// #20
   3f788:	mov	w2, #0x2                   	// #2
   3f78c:	mov	w1, #0x0                   	// #0
   3f790:	bl	35390 <extract_fields@plt>
   3f794:	str	w0, [x19, #16]
   3f798:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3f79c:	ldr	x1, [x1, #3832]
   3f7a0:	ldr	x1, [x1]
   3f7a4:	cbz	x1, 3f7d4 <aarch64_ext_pstatefield@@Base+0x68>
   3f7a8:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3f7ac:	ldr	x1, [x1, #3832]
   3f7b0:	add	x1, x1, #0x8
   3f7b4:	ldr	w2, [x1]
   3f7b8:	cmp	w0, w2
   3f7bc:	b.eq	3f7dc <aarch64_ext_pstatefield@@Base+0x70>  // b.none
   3f7c0:	add	x1, x1, #0x10
   3f7c4:	ldur	x2, [x1, #-8]
   3f7c8:	cbnz	x2, 3f7b4 <aarch64_ext_pstatefield@@Base+0x48>
   3f7cc:	mov	w0, #0x0                   	// #0
   3f7d0:	b	3f7e0 <aarch64_ext_pstatefield@@Base+0x74>
   3f7d4:	mov	w0, #0x0                   	// #0
   3f7d8:	b	3f7e0 <aarch64_ext_pstatefield@@Base+0x74>
   3f7dc:	mov	w0, #0x1                   	// #1
   3f7e0:	ldr	x19, [sp, #16]
   3f7e4:	ldp	x29, x30, [sp], #32
   3f7e8:	ret

000000000003f7ec <aarch64_ext_sysins_op@@Base>:
   3f7ec:	stp	x29, x30, [sp, #-32]!
   3f7f0:	mov	x29, sp
   3f7f4:	str	x19, [sp, #16]
   3f7f8:	mov	x19, x1
   3f7fc:	mov	w0, w2
   3f800:	mov	w7, #0x11                  	// #17
   3f804:	mov	w6, #0x12                  	// #18
   3f808:	mov	w5, #0x13                  	// #19
   3f80c:	mov	w4, #0x14                  	// #20
   3f810:	mov	w3, #0x15                  	// #21
   3f814:	mov	w2, #0x5                   	// #5
   3f818:	mov	w1, #0x0                   	// #0
   3f81c:	bl	35390 <extract_fields@plt>
   3f820:	ldr	w1, [x19]
   3f824:	cmp	w1, #0x63
   3f828:	b.eq	3f8b0 <aarch64_ext_sysins_op@@Base+0xc4>  // b.none
   3f82c:	b.hi	3f86c <aarch64_ext_sysins_op@@Base+0x80>  // b.pmore
   3f830:	cmp	w1, #0x61
   3f834:	b.eq	3f8bc <aarch64_ext_sysins_op@@Base+0xd0>  // b.none
   3f838:	cmp	w1, #0x62
   3f83c:	b.ne	3f88c <aarch64_ext_sysins_op@@Base+0xa0>  // b.any
   3f840:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   3f844:	ldr	x2, [x2, #3920]
   3f848:	ldr	x1, [x2]
   3f84c:	cbz	x1, 3f8e8 <aarch64_ext_sysins_op@@Base+0xfc>
   3f850:	ldr	w3, [x2, #8]
   3f854:	cmp	w3, w0
   3f858:	b.eq	3f8d4 <aarch64_ext_sysins_op@@Base+0xe8>  // b.none
   3f85c:	ldr	x3, [x2, #16]!
   3f860:	cbnz	x3, 3f850 <aarch64_ext_sysins_op@@Base+0x64>
   3f864:	mov	w0, #0x0                   	// #0
   3f868:	b	3f8dc <aarch64_ext_sysins_op@@Base+0xf0>
   3f86c:	cmp	w1, #0x64
   3f870:	b.eq	3f8c8 <aarch64_ext_sysins_op@@Base+0xdc>  // b.none
   3f874:	cmp	w1, #0x65
   3f878:	b.ne	3f88c <aarch64_ext_sysins_op@@Base+0xa0>  // b.any
   3f87c:	and	w0, w0, #0xfffffff8
   3f880:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   3f884:	ldr	x2, [x2, #4064]
   3f888:	b	3f848 <aarch64_ext_sysins_op@@Base+0x5c>
   3f88c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3f890:	add	x3, x3, #0xa48
   3f894:	add	x3, x3, #0x3d0
   3f898:	mov	w2, #0x4e6                 	// #1254
   3f89c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3f8a0:	add	x1, x1, #0x2e0
   3f8a4:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   3f8a8:	add	x0, x0, #0xb60
   3f8ac:	bl	35ac0 <__assert_fail@plt>
   3f8b0:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   3f8b4:	ldr	x2, [x2, #3888]
   3f8b8:	b	3f848 <aarch64_ext_sysins_op@@Base+0x5c>
   3f8bc:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   3f8c0:	ldr	x2, [x2, #3992]
   3f8c4:	b	3f848 <aarch64_ext_sysins_op@@Base+0x5c>
   3f8c8:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   3f8cc:	ldr	x2, [x2, #3896]
   3f8d0:	b	3f848 <aarch64_ext_sysins_op@@Base+0x5c>
   3f8d4:	str	x2, [x19, #16]
   3f8d8:	mov	w0, #0x1                   	// #1
   3f8dc:	ldr	x19, [sp, #16]
   3f8e0:	ldp	x29, x30, [sp], #32
   3f8e4:	ret
   3f8e8:	mov	w0, #0x0                   	// #0
   3f8ec:	b	3f8dc <aarch64_ext_sysins_op@@Base+0xf0>

000000000003f8f0 <aarch64_ext_barrier@@Base>:
   3f8f0:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   3f8f4:	ldr	x3, [x3, #3944]
   3f8f8:	ldr	w4, [x3, #148]
   3f8fc:	mov	w0, #0xffffffff            	// #-1
   3f900:	lsl	w0, w0, w4
   3f904:	ldr	w3, [x3, #144]
   3f908:	lsr	w2, w2, w3
   3f90c:	bic	w0, w2, w0
   3f910:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   3f914:	ldr	x2, [x2, #4040]
   3f918:	add	x0, x2, x0, lsl #4
   3f91c:	str	x0, [x1, #16]
   3f920:	mov	w0, #0x1                   	// #1
   3f924:	ret

000000000003f928 <aarch64_ext_prfop@@Base>:
   3f928:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   3f92c:	ldr	x3, [x3, #3944]
   3f930:	ldr	w4, [x3, #100]
   3f934:	mov	w0, #0xffffffff            	// #-1
   3f938:	lsl	w0, w0, w4
   3f93c:	ldr	w3, [x3, #96]
   3f940:	lsr	w2, w2, w3
   3f944:	bic	w0, w2, w0
   3f948:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   3f94c:	ldr	x2, [x2, #3960]
   3f950:	add	x0, x2, x0, lsl #4
   3f954:	str	x0, [x1, #16]
   3f958:	mov	w0, #0x1                   	// #1
   3f95c:	ret

000000000003f960 <aarch64_ext_hint@@Base>:
   3f960:	stp	x29, x30, [sp, #-32]!
   3f964:	mov	x29, sp
   3f968:	str	x19, [sp, #16]
   3f96c:	mov	x19, x1
   3f970:	mov	w0, w2
   3f974:	mov	w4, #0x11                  	// #17
   3f978:	mov	w3, #0x12                  	// #18
   3f97c:	mov	w2, #0x2                   	// #2
   3f980:	mov	w1, #0x0                   	// #0
   3f984:	bl	35390 <extract_fields@plt>
   3f988:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3f98c:	ldr	x1, [x1, #4016]
   3f990:	ldr	x1, [x1]
   3f994:	cbz	x1, 3f9ec <aarch64_ext_hint@@Base+0x8c>
   3f998:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   3f99c:	ldr	x2, [x2, #4016]
   3f9a0:	add	x2, x2, #0x8
   3f9a4:	mov	w3, #0x0                   	// #0
   3f9a8:	ldrb	w4, [x2]
   3f9ac:	cmp	w4, w0
   3f9b0:	b.eq	3f9cc <aarch64_ext_hint@@Base+0x6c>  // b.none
   3f9b4:	add	w3, w3, #0x1
   3f9b8:	add	x2, x2, #0x10
   3f9bc:	ldur	x4, [x2, #-8]
   3f9c0:	cbnz	x4, 3f9a8 <aarch64_ext_hint@@Base+0x48>
   3f9c4:	mov	w0, #0x0                   	// #0
   3f9c8:	b	3f9e0 <aarch64_ext_hint@@Base+0x80>
   3f9cc:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   3f9d0:	ldr	x0, [x0, #4016]
   3f9d4:	add	x3, x0, w3, sxtw #4
   3f9d8:	str	x3, [x19, #16]
   3f9dc:	mov	w0, #0x1                   	// #1
   3f9e0:	ldr	x19, [sp, #16]
   3f9e4:	ldp	x29, x30, [sp], #32
   3f9e8:	ret
   3f9ec:	mov	w0, #0x0                   	// #0
   3f9f0:	b	3f9e0 <aarch64_ext_hint@@Base+0x80>

000000000003f9f4 <aarch64_ext_reg_extended@@Base>:
   3f9f4:	stp	x29, x30, [sp, #-64]!
   3f9f8:	mov	x29, sp
   3f9fc:	stp	x19, x20, [sp, #16]
   3fa00:	stp	x21, x22, [sp, #32]
   3fa04:	str	x23, [sp, #48]
   3fa08:	mov	x19, x1
   3fa0c:	mov	w22, w2
   3fa10:	mov	x23, x3
   3fa14:	adrp	x20, a3000 <aarch64_operands@@Base+0x16bc0>
   3fa18:	ldr	x20, [x20, #3944]
   3fa1c:	ldr	w0, [x20, #228]
   3fa20:	mov	w21, #0xffffffff            	// #-1
   3fa24:	lsl	w0, w21, w0
   3fa28:	ldr	w1, [x20, #224]
   3fa2c:	lsr	w1, w2, w1
   3fa30:	bic	w0, w1, w0
   3fa34:	str	w0, [x19, #16]
   3fa38:	ldr	w2, [x20, #244]
   3fa3c:	lsl	w2, w21, w2
   3fa40:	ldr	w0, [x20, #240]
   3fa44:	lsr	w0, w22, w0
   3fa48:	mov	w1, #0x1                   	// #1
   3fa4c:	bic	w0, w0, w2
   3fa50:	bl	35bb0 <aarch64_get_operand_modifier_from_value@plt>
   3fa54:	str	w0, [x19, #32]
   3fa58:	ldr	w1, [x20, #180]
   3fa5c:	lsl	w21, w21, w1
   3fa60:	ldr	w2, [x20, #176]
   3fa64:	lsr	w22, w22, w2
   3fa68:	bic	w21, w22, w21
   3fa6c:	str	x21, [x19, #40]
   3fa70:	ldrb	w1, [x19, #36]
   3fa74:	orr	w1, w1, #0x1
   3fa78:	strb	w1, [x19, #36]
   3fa7c:	ldrb	w1, [x23, #28]
   3fa80:	cbz	w1, 3fab0 <aarch64_ext_reg_extended@@Base+0xbc>
   3fa84:	mov	w1, #0x1                   	// #1
   3fa88:	strb	w1, [x19, #4]
   3fa8c:	ldrb	w1, [x23, #28]
   3fa90:	cmp	w1, #0x2
   3fa94:	b.eq	3fad4 <aarch64_ext_reg_extended@@Base+0xe0>  // b.none
   3fa98:	mov	w0, #0x1                   	// #1
   3fa9c:	ldp	x19, x20, [sp, #16]
   3faa0:	ldp	x21, x22, [sp, #32]
   3faa4:	ldr	x23, [sp, #48]
   3faa8:	ldp	x29, x30, [sp], #64
   3faac:	ret
   3fab0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   3fab4:	add	x3, x3, #0xa48
   3fab8:	add	x3, x3, #0x3e8
   3fabc:	mov	w2, #0x547                 	// #1351
   3fac0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   3fac4:	add	x1, x1, #0x2e0
   3fac8:	adrp	x0, 59000 <xexit@@Base+0x74c>
   3facc:	add	x0, x0, #0x718
   3fad0:	bl	35ac0 <__assert_fail@plt>
   3fad4:	and	w0, w0, #0xfffffffb
   3fad8:	cmp	w0, #0x9
   3fadc:	b.ne	3fa98 <aarch64_ext_reg_extended@@Base+0xa4>  // b.any
   3fae0:	mov	w0, #0x2                   	// #2
   3fae4:	strb	w0, [x19, #4]
   3fae8:	b	3fa98 <aarch64_ext_reg_extended@@Base+0xa4>

000000000003faec <aarch64_ext_reg_shifted@@Base>:
   3faec:	stp	x29, x30, [sp, #-48]!
   3faf0:	mov	x29, sp
   3faf4:	stp	x19, x20, [sp, #16]
   3faf8:	str	x21, [sp, #32]
   3fafc:	mov	x19, x1
   3fb00:	mov	w20, w2
   3fb04:	mov	x21, x3
   3fb08:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3fb0c:	ldr	x1, [x1, #3944]
   3fb10:	ldr	w2, [x1, #228]
   3fb14:	mov	w0, #0xffffffff            	// #-1
   3fb18:	lsl	w2, w0, w2
   3fb1c:	ldr	w3, [x1, #224]
   3fb20:	lsr	w3, w20, w3
   3fb24:	bic	w2, w3, w2
   3fb28:	str	w2, [x19, #16]
   3fb2c:	ldr	w2, [x1, #284]
   3fb30:	lsl	w0, w0, w2
   3fb34:	ldr	w2, [x1, #280]
   3fb38:	lsr	w2, w20, w2
   3fb3c:	mov	w1, #0x0                   	// #0
   3fb40:	bic	w0, w2, w0
   3fb44:	bl	35bb0 <aarch64_get_operand_modifier_from_value@plt>
   3fb48:	str	w0, [x19, #32]
   3fb4c:	cmp	w0, #0x2
   3fb50:	b.eq	3fb98 <aarch64_ext_reg_shifted@@Base+0xac>  // b.none
   3fb54:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   3fb58:	ldr	x1, [x1, #3944]
   3fb5c:	ldr	w2, [x1, #308]
   3fb60:	mov	w0, #0xffffffff            	// #-1
   3fb64:	lsl	w0, w0, w2
   3fb68:	ldr	w2, [x1, #304]
   3fb6c:	lsr	w20, w20, w2
   3fb70:	bic	w20, w20, w0
   3fb74:	str	x20, [x19, #40]
   3fb78:	ldrb	w0, [x19, #36]
   3fb7c:	orr	w0, w0, #0x1
   3fb80:	strb	w0, [x19, #36]
   3fb84:	mov	w0, #0x1                   	// #1
   3fb88:	ldp	x19, x20, [sp, #16]
   3fb8c:	ldr	x21, [sp, #32]
   3fb90:	ldp	x29, x30, [sp], #48
   3fb94:	ret
   3fb98:	ldr	x0, [x21, #8]
   3fb9c:	ldr	w1, [x0, #16]
   3fba0:	mov	w0, #0x0                   	// #0
   3fba4:	cmp	w1, #0x42
   3fba8:	b.ne	3fb88 <aarch64_ext_reg_shifted@@Base+0x9c>  // b.any
   3fbac:	b	3fb54 <aarch64_ext_reg_shifted@@Base+0x68>

000000000003fbb0 <aarch64_ext_sve_addr_ri_s4xvl@@Base>:
   3fbb0:	stp	x29, x30, [sp, #-16]!
   3fbb4:	mov	x29, sp
   3fbb8:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   3fbbc:	ldr	x4, [x4, #3944]
   3fbc0:	ldr	w5, [x4, #780]
   3fbc4:	mov	w3, #0xffffffff            	// #-1
   3fbc8:	lsl	w3, w3, w5
   3fbcc:	ldr	w4, [x4, #776]
   3fbd0:	lsr	w4, w2, w4
   3fbd4:	bic	w3, w4, w3
   3fbd8:	add	w3, w3, #0x8
   3fbdc:	and	w3, w3, #0xf
   3fbe0:	sub	w3, w3, #0x8
   3fbe4:	sxtw	x3, w3
   3fbe8:	bl	3bbf8 <aarch64_opcode_encode@@Base+0x1c64>
   3fbec:	ldp	x29, x30, [sp], #16
   3fbf0:	ret

000000000003fbf4 <aarch64_ext_sve_addr_ri_s6xvl@@Base>:
   3fbf4:	stp	x29, x30, [sp, #-16]!
   3fbf8:	mov	x29, sp
   3fbfc:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   3fc00:	ldr	x4, [x4, #3944]
   3fc04:	ldr	w5, [x4, #804]
   3fc08:	mov	w3, #0xffffffff            	// #-1
   3fc0c:	lsl	w3, w3, w5
   3fc10:	ldr	w4, [x4, #800]
   3fc14:	lsr	w4, w2, w4
   3fc18:	bic	w3, w4, w3
   3fc1c:	add	w3, w3, #0x20
   3fc20:	and	w3, w3, #0x3f
   3fc24:	sub	w3, w3, #0x20
   3fc28:	sxtw	x3, w3
   3fc2c:	bl	3bbf8 <aarch64_opcode_encode@@Base+0x1c64>
   3fc30:	ldp	x29, x30, [sp], #16
   3fc34:	ret

000000000003fc38 <aarch64_ext_sve_addr_ri_s9xvl@@Base>:
   3fc38:	stp	x29, x30, [sp, #-48]!
   3fc3c:	mov	x29, sp
   3fc40:	stp	x19, x20, [sp, #16]
   3fc44:	str	x21, [sp, #32]
   3fc48:	mov	x20, x0
   3fc4c:	mov	x21, x1
   3fc50:	mov	w19, w2
   3fc54:	mov	w4, #0x16                  	// #22
   3fc58:	mov	w3, #0x64                  	// #100
   3fc5c:	mov	w2, #0x2                   	// #2
   3fc60:	mov	w1, #0x0                   	// #0
   3fc64:	mov	w0, w19
   3fc68:	bl	35390 <extract_fields@plt>
   3fc6c:	add	w3, w0, #0x100
   3fc70:	and	w3, w3, #0x1ff
   3fc74:	sub	w3, w3, #0x100
   3fc78:	sxtw	x3, w3
   3fc7c:	mov	w2, w19
   3fc80:	mov	x1, x21
   3fc84:	mov	x0, x20
   3fc88:	bl	3bbf8 <aarch64_opcode_encode@@Base+0x1c64>
   3fc8c:	ldp	x19, x20, [sp, #16]
   3fc90:	ldr	x21, [sp, #32]
   3fc94:	ldp	x29, x30, [sp], #48
   3fc98:	ret

000000000003fc9c <aarch64_ext_sve_addr_ri_s4@@Base>:
   3fc9c:	stp	x29, x30, [sp, #-16]!
   3fca0:	mov	x29, sp
   3fca4:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   3fca8:	ldr	x4, [x4, #3944]
   3fcac:	ldr	w5, [x4, #780]
   3fcb0:	mov	w3, #0xffffffff            	// #-1
   3fcb4:	lsl	w3, w3, w5
   3fcb8:	ldr	w4, [x4, #776]
   3fcbc:	lsr	w4, w2, w4
   3fcc0:	bic	w3, w4, w3
   3fcc4:	sbfx	x3, x3, #0, #4
   3fcc8:	bl	3bc7c <aarch64_opcode_encode@@Base+0x1ce8>
   3fccc:	ldp	x29, x30, [sp], #16
   3fcd0:	ret

000000000003fcd4 <aarch64_ext_sve_addr_ri_u6@@Base>:
   3fcd4:	stp	x29, x30, [sp, #-16]!
   3fcd8:	mov	x29, sp
   3fcdc:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   3fce0:	ldr	x4, [x4, #3944]
   3fce4:	ldr	w5, [x4, #804]
   3fce8:	mov	w3, #0xffffffff            	// #-1
   3fcec:	lsl	w3, w3, w5
   3fcf0:	ldr	w4, [x4, #800]
   3fcf4:	lsr	w4, w2, w4
   3fcf8:	bic	w3, w4, w3
   3fcfc:	sxtw	x3, w3
   3fd00:	bl	3bc7c <aarch64_opcode_encode@@Base+0x1ce8>
   3fd04:	ldp	x29, x30, [sp], #16
   3fd08:	ret

000000000003fd0c <aarch64_ext_sve_addr_rr_lsl@@Base>:
   3fd0c:	mov	x4, x0
   3fd10:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   3fd14:	ldr	x5, [x5, #3944]
   3fd18:	ldr	w0, [x0, #24]
   3fd1c:	lsl	x0, x0, #3
   3fd20:	add	x3, x5, x0
   3fd24:	ldr	w6, [x3, #4]
   3fd28:	mov	w3, #0xffffffff            	// #-1
   3fd2c:	lsl	w3, w3, w6
   3fd30:	ldr	w0, [x5, x0]
   3fd34:	lsr	w0, w2, w0
   3fd38:	bic	w3, w0, w3
   3fd3c:	cmp	w3, #0x1f
   3fd40:	b.eq	3fdc0 <aarch64_ext_sve_addr_rr_lsl@@Base+0xb4>  // b.none
   3fd44:	adrp	x6, a3000 <aarch64_operands@@Base+0x16bc0>
   3fd48:	ldr	x6, [x6, #3944]
   3fd4c:	ldr	w5, [x4, #20]
   3fd50:	lsl	x5, x5, #3
   3fd54:	add	x0, x6, x5
   3fd58:	ldr	w7, [x0, #4]
   3fd5c:	mov	w0, #0xffffffff            	// #-1
   3fd60:	lsl	w0, w0, w7
   3fd64:	ldr	w5, [x6, x5]
   3fd68:	lsr	w2, w2, w5
   3fd6c:	bic	w2, w2, w0
   3fd70:	str	w2, [x1, #16]
   3fd74:	str	w3, [x1, #20]
   3fd78:	mov	w0, #0x1                   	// #1
   3fd7c:	str	w0, [x1, #24]
   3fd80:	ldrb	w2, [x1, #28]
   3fd84:	and	w2, w2, #0xfffffffd
   3fd88:	orr	w2, w2, #0x4
   3fd8c:	strb	w2, [x1, #28]
   3fd90:	mov	w2, #0x5                   	// #5
   3fd94:	str	w2, [x1, #32]
   3fd98:	ldr	w2, [x4, #16]
   3fd9c:	ubfx	x2, x2, #5, #3
   3fda0:	str	x2, [x1, #40]
   3fda4:	cmp	x2, #0x0
   3fda8:	cset	w3, ne  // ne = any
   3fdac:	ldrb	w2, [x1, #36]
   3fdb0:	bfxil	w2, w3, #0, #1
   3fdb4:	bfi	w2, w3, #1, #1
   3fdb8:	strb	w2, [x1, #36]
   3fdbc:	ret
   3fdc0:	ldr	w5, [x4, #16]
   3fdc4:	mov	w0, #0x0                   	// #0
   3fdc8:	tbz	w5, #8, 3fd44 <aarch64_ext_sve_addr_rr_lsl@@Base+0x38>
   3fdcc:	b	3fdbc <aarch64_ext_sve_addr_rr_lsl@@Base+0xb0>

000000000003fdd0 <aarch64_ext_sve_addr_rz_xtw@@Base>:
   3fdd0:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   3fdd4:	ldr	x3, [x3, #3944]
   3fdd8:	ldr	w6, [x0, #20]
   3fddc:	lsl	x6, x6, #3
   3fde0:	add	x4, x3, x6
   3fde4:	ldr	w5, [x4, #4]
   3fde8:	mov	w4, #0xffffffff            	// #-1
   3fdec:	lsl	w5, w4, w5
   3fdf0:	ldr	w6, [x3, x6]
   3fdf4:	lsr	w6, w2, w6
   3fdf8:	bic	w5, w6, w5
   3fdfc:	str	w5, [x1, #16]
   3fe00:	ldr	w6, [x0, #24]
   3fe04:	lsl	x6, x6, #3
   3fe08:	add	x5, x3, x6
   3fe0c:	ldr	w5, [x5, #4]
   3fe10:	lsl	w5, w4, w5
   3fe14:	ldr	w6, [x3, x6]
   3fe18:	lsr	w6, w2, w6
   3fe1c:	bic	w5, w6, w5
   3fe20:	str	w5, [x1, #20]
   3fe24:	mov	w5, #0x1                   	// #1
   3fe28:	str	w5, [x1, #24]
   3fe2c:	ldrb	w5, [x1, #28]
   3fe30:	and	w5, w5, #0xfffffffd
   3fe34:	orr	w5, w5, #0x4
   3fe38:	strb	w5, [x1, #28]
   3fe3c:	ldr	w5, [x0, #28]
   3fe40:	lsl	x5, x5, #3
   3fe44:	add	x6, x3, x5
   3fe48:	ldr	w6, [x6, #4]
   3fe4c:	lsl	w4, w4, w6
   3fe50:	ldr	w3, [x3, x5]
   3fe54:	lsr	w2, w2, w3
   3fe58:	bics	wzr, w2, w4
   3fe5c:	mov	w2, #0xc                   	// #12
   3fe60:	mov	w3, #0x8                   	// #8
   3fe64:	csel	w2, w2, w3, ne  // ne = any
   3fe68:	str	w2, [x1, #32]
   3fe6c:	ldr	w2, [x0, #16]
   3fe70:	ubfx	x2, x2, #5, #3
   3fe74:	str	x2, [x1, #40]
   3fe78:	ldrb	w0, [x1, #36]
   3fe7c:	cmp	x2, #0x0
   3fe80:	cset	w2, ne  // ne = any
   3fe84:	orr	w0, w0, #0x1
   3fe88:	bfi	w0, w2, #1, #1
   3fe8c:	strb	w0, [x1, #36]
   3fe90:	mov	w0, #0x1                   	// #1
   3fe94:	ret

000000000003fe98 <aarch64_ext_sve_addr_zi_u5@@Base>:
   3fe98:	stp	x29, x30, [sp, #-16]!
   3fe9c:	mov	x29, sp
   3fea0:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   3fea4:	ldr	x4, [x4, #3944]
   3fea8:	ldr	w5, [x4, #348]
   3feac:	mov	w3, #0xffffffff            	// #-1
   3feb0:	lsl	w3, w3, w5
   3feb4:	ldr	w4, [x4, #344]
   3feb8:	lsr	w4, w2, w4
   3febc:	bic	w3, w4, w3
   3fec0:	sxtw	x3, w3
   3fec4:	bl	3bc7c <aarch64_opcode_encode@@Base+0x1ce8>
   3fec8:	ldp	x29, x30, [sp], #16
   3fecc:	ret

000000000003fed0 <aarch64_ext_sve_addr_zz_lsl@@Base>:
   3fed0:	stp	x29, x30, [sp, #-16]!
   3fed4:	mov	x29, sp
   3fed8:	mov	w3, #0x5                   	// #5
   3fedc:	bl	3bce4 <aarch64_opcode_encode@@Base+0x1d50>
   3fee0:	ldp	x29, x30, [sp], #16
   3fee4:	ret

000000000003fee8 <aarch64_ext_sve_addr_zz_sxtw@@Base>:
   3fee8:	stp	x29, x30, [sp, #-16]!
   3feec:	mov	x29, sp
   3fef0:	mov	w3, #0xc                   	// #12
   3fef4:	bl	3bce4 <aarch64_opcode_encode@@Base+0x1d50>
   3fef8:	ldp	x29, x30, [sp], #16
   3fefc:	ret

000000000003ff00 <aarch64_ext_sve_addr_zz_uxtw@@Base>:
   3ff00:	stp	x29, x30, [sp, #-16]!
   3ff04:	mov	x29, sp
   3ff08:	mov	w3, #0x8                   	// #8
   3ff0c:	bl	3bce4 <aarch64_opcode_encode@@Base+0x1d50>
   3ff10:	ldp	x29, x30, [sp], #16
   3ff14:	ret

000000000003ff18 <aarch64_ext_sve_aimm@@Base>:
   3ff18:	stp	x29, x30, [sp, #-32]!
   3ff1c:	mov	x29, sp
   3ff20:	str	x19, [sp, #16]
   3ff24:	mov	x19, x1
   3ff28:	bl	35720 <aarch64_ext_imm@plt>
   3ff2c:	cbnz	w0, 3ff3c <aarch64_ext_sve_aimm@@Base+0x24>
   3ff30:	ldr	x19, [sp, #16]
   3ff34:	ldp	x29, x30, [sp], #32
   3ff38:	ret
   3ff3c:	ldr	x0, [x19, #16]
   3ff40:	and	x2, x0, #0xff
   3ff44:	mov	w1, #0x5                   	// #5
   3ff48:	str	w1, [x19, #32]
   3ff4c:	str	xzr, [x19, #40]
   3ff50:	tbz	w0, #8, 3ff60 <aarch64_ext_sve_aimm@@Base+0x48>
   3ff54:	cbnz	x2, 3ff88 <aarch64_ext_sve_aimm@@Base+0x70>
   3ff58:	mov	x0, #0x8                   	// #8
   3ff5c:	str	x0, [x19, #40]
   3ff60:	ldr	x0, [x19, #40]
   3ff64:	cmp	x0, #0x0
   3ff68:	cset	w1, ne  // ne = any
   3ff6c:	ldrb	w0, [x19, #36]
   3ff70:	bfxil	w0, w1, #0, #1
   3ff74:	bfi	w0, w1, #1, #1
   3ff78:	strb	w0, [x19, #36]
   3ff7c:	str	x2, [x19, #16]
   3ff80:	mov	w0, #0x1                   	// #1
   3ff84:	b	3ff30 <aarch64_ext_sve_aimm@@Base+0x18>
   3ff88:	lsl	x2, x2, #8
   3ff8c:	b	3ff60 <aarch64_ext_sve_aimm@@Base+0x48>

000000000003ff90 <aarch64_ext_sve_asimm@@Base>:
   3ff90:	stp	x29, x30, [sp, #-32]!
   3ff94:	mov	x29, sp
   3ff98:	str	x19, [sp, #16]
   3ff9c:	mov	x19, x1
   3ffa0:	bl	35720 <aarch64_ext_imm@plt>
   3ffa4:	cbnz	w0, 3ffb4 <aarch64_ext_sve_asimm@@Base+0x24>
   3ffa8:	ldr	x19, [sp, #16]
   3ffac:	ldp	x29, x30, [sp], #32
   3ffb0:	ret
   3ffb4:	ldr	x0, [x19, #16]
   3ffb8:	sxtb	x2, w0
   3ffbc:	mov	w1, #0x5                   	// #5
   3ffc0:	str	w1, [x19, #32]
   3ffc4:	str	xzr, [x19, #40]
   3ffc8:	tbz	w0, #8, 3ffd8 <aarch64_ext_sve_asimm@@Base+0x48>
   3ffcc:	cbnz	x2, 40000 <aarch64_ext_sve_asimm@@Base+0x70>
   3ffd0:	mov	x0, #0x8                   	// #8
   3ffd4:	str	x0, [x19, #40]
   3ffd8:	ldr	x0, [x19, #40]
   3ffdc:	cmp	x0, #0x0
   3ffe0:	cset	w1, ne  // ne = any
   3ffe4:	ldrb	w0, [x19, #36]
   3ffe8:	bfxil	w0, w1, #0, #1
   3ffec:	bfi	w0, w1, #1, #1
   3fff0:	strb	w0, [x19, #36]
   3fff4:	str	x2, [x19, #16]
   3fff8:	mov	w0, #0x1                   	// #1
   3fffc:	b	3ffa8 <aarch64_ext_sve_asimm@@Base+0x18>
   40000:	lsl	x2, x2, #8
   40004:	b	3ffd8 <aarch64_ext_sve_asimm@@Base+0x48>

0000000000040008 <aarch64_ext_sve_float_half_one@@Base>:
   40008:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   4000c:	ldr	x3, [x3, #3944]
   40010:	ldr	w0, [x0, #20]
   40014:	lsl	x0, x0, #3
   40018:	add	x4, x3, x0
   4001c:	ldr	w5, [x4, #4]
   40020:	mov	w4, #0xffffffff            	// #-1
   40024:	lsl	w4, w4, w5
   40028:	ldr	w0, [x3, x0]
   4002c:	lsr	w2, w2, w0
   40030:	bics	wzr, w2, w4
   40034:	mov	x0, #0x3f800000            	// #1065353216
   40038:	mov	x2, #0x3f000000            	// #1056964608
   4003c:	csel	x0, x0, x2, ne  // ne = any
   40040:	str	x0, [x1, #16]
   40044:	ldrb	w0, [x1, #24]
   40048:	orr	w0, w0, #0x1
   4004c:	strb	w0, [x1, #24]
   40050:	mov	w0, #0x1                   	// #1
   40054:	ret

0000000000040058 <aarch64_ext_sve_float_half_two@@Base>:
   40058:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   4005c:	ldr	x3, [x3, #3944]
   40060:	ldr	w0, [x0, #20]
   40064:	lsl	x0, x0, #3
   40068:	add	x4, x3, x0
   4006c:	ldr	w5, [x4, #4]
   40070:	mov	w4, #0xffffffff            	// #-1
   40074:	lsl	w4, w4, w5
   40078:	ldr	w0, [x3, x0]
   4007c:	lsr	w2, w2, w0
   40080:	bics	wzr, w2, w4
   40084:	mov	x0, #0x40000000            	// #1073741824
   40088:	mov	x2, #0x3f000000            	// #1056964608
   4008c:	csel	x0, x0, x2, ne  // ne = any
   40090:	str	x0, [x1, #16]
   40094:	ldrb	w0, [x1, #24]
   40098:	orr	w0, w0, #0x1
   4009c:	strb	w0, [x1, #24]
   400a0:	mov	w0, #0x1                   	// #1
   400a4:	ret

00000000000400a8 <aarch64_ext_sve_float_zero_one@@Base>:
   400a8:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   400ac:	ldr	x3, [x3, #3944]
   400b0:	ldr	w0, [x0, #20]
   400b4:	lsl	x0, x0, #3
   400b8:	add	x4, x3, x0
   400bc:	ldr	w5, [x4, #4]
   400c0:	mov	w4, #0xffffffff            	// #-1
   400c4:	lsl	w4, w4, w5
   400c8:	ldr	w0, [x3, x0]
   400cc:	lsr	w2, w2, w0
   400d0:	bics	wzr, w2, w4
   400d4:	mov	x0, #0x3f800000            	// #1065353216
   400d8:	csel	x0, x0, xzr, ne  // ne = any
   400dc:	str	x0, [x1, #16]
   400e0:	ldrb	w0, [x1, #24]
   400e4:	orr	w0, w0, #0x1
   400e8:	strb	w0, [x1, #24]
   400ec:	mov	w0, #0x1                   	// #1
   400f0:	ret

00000000000400f4 <aarch64_ext_sve_index@@Base>:
   400f4:	stp	x29, x30, [sp, #-32]!
   400f8:	mov	x29, sp
   400fc:	str	x19, [sp, #16]
   40100:	mov	x3, x0
   40104:	mov	x19, x1
   40108:	mov	w0, w2
   4010c:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   40110:	ldr	x2, [x2, #3944]
   40114:	ldr	w1, [x3, #20]
   40118:	lsl	x1, x1, #3
   4011c:	add	x3, x2, x1
   40120:	ldr	w4, [x3, #4]
   40124:	mov	w3, #0xffffffff            	// #-1
   40128:	lsl	w3, w3, w4
   4012c:	ldr	w1, [x2, x1]
   40130:	lsr	w1, w0, w1
   40134:	bic	w3, w1, w3
   40138:	str	w3, [x19, #16]
   4013c:	mov	w4, #0x2b                  	// #43
   40140:	mov	w3, #0x74                  	// #116
   40144:	mov	w2, #0x2                   	// #2
   40148:	mov	w1, #0x0                   	// #0
   4014c:	bl	35390 <extract_fields@plt>
   40150:	mov	w2, w0
   40154:	ands	w0, w0, #0x1f
   40158:	b.eq	40180 <aarch64_ext_sve_index@@Base+0x8c>  // b.none
   4015c:	tbnz	w2, #0, 4016c <aarch64_ext_sve_index@@Base+0x78>
   40160:	add	w0, w2, w2, lsr #31
   40164:	asr	w2, w0, #1
   40168:	tbz	w0, #1, 40160 <aarch64_ext_sve_index@@Base+0x6c>
   4016c:	add	w0, w2, w2, lsr #31
   40170:	asr	w0, w0, #1
   40174:	sxtw	x0, w0
   40178:	str	x0, [x19, #24]
   4017c:	mov	w0, #0x1                   	// #1
   40180:	ldr	x19, [sp, #16]
   40184:	ldp	x29, x30, [sp], #32
   40188:	ret

000000000004018c <aarch64_ext_sve_limm_mov@@Base>:
   4018c:	stp	x29, x30, [sp, #-64]!
   40190:	mov	x29, sp
   40194:	stp	x19, x20, [sp, #16]
   40198:	stp	x21, x22, [sp, #32]
   4019c:	stp	x23, x24, [sp, #48]
   401a0:	mov	x21, x0
   401a4:	mov	x20, x1
   401a8:	mov	w22, w2
   401ac:	mov	x19, x3
   401b0:	mov	x23, x4
   401b4:	ldrb	w0, [x3, #28]
   401b8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   401bc:	and	w24, w0, #0xff
   401c0:	mov	x4, x23
   401c4:	mov	x3, x19
   401c8:	mov	w2, w22
   401cc:	mov	x1, x20
   401d0:	mov	x0, x21
   401d4:	bl	35420 <aarch64_ext_limm@plt>
   401d8:	cbnz	w0, 401f0 <aarch64_ext_sve_limm_mov@@Base+0x64>
   401dc:	ldp	x19, x20, [sp, #16]
   401e0:	ldp	x21, x22, [sp, #32]
   401e4:	ldp	x23, x24, [sp, #48]
   401e8:	ldp	x29, x30, [sp], #64
   401ec:	ret
   401f0:	mov	w1, w24
   401f4:	ldr	x0, [x20, #16]
   401f8:	bl	35540 <aarch64_sve_dupm_mov_immediate_p@plt>
   401fc:	cmp	w0, #0x0
   40200:	cset	w0, ne  // ne = any
   40204:	b	401dc <aarch64_ext_sve_limm_mov@@Base+0x50>

0000000000040208 <aarch64_ext_sve_quad_index@@Base>:
   40208:	stp	x29, x30, [sp, #-32]!
   4020c:	mov	x29, sp
   40210:	stp	x19, x20, [sp, #16]
   40214:	mov	x19, x1
   40218:	mov	w1, w2
   4021c:	ldr	w20, [x0, #16]
   40220:	ubfx	x20, x20, #5, #3
   40224:	bl	3bba4 <aarch64_opcode_encode@@Base+0x1c10>
   40228:	mov	w2, w0
   4022c:	mov	w0, #0x1                   	// #1
   40230:	lsl	w3, w0, w20
   40234:	sub	w3, w3, #0x1
   40238:	and	w3, w3, w2
   4023c:	str	w3, [x19, #16]
   40240:	lsr	w2, w2, w20
   40244:	str	x2, [x19, #24]
   40248:	ldp	x19, x20, [sp, #16]
   4024c:	ldp	x29, x30, [sp], #32
   40250:	ret

0000000000040254 <aarch64_ext_sve_reglist@@Base>:
   40254:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   40258:	ldr	x5, [x5, #3944]
   4025c:	ldr	w4, [x0, #20]
   40260:	lsl	x4, x4, #3
   40264:	add	x0, x5, x4
   40268:	ldr	w6, [x0, #4]
   4026c:	mov	w0, #0xffffffff            	// #-1
   40270:	lsl	w0, w0, w6
   40274:	ldr	w4, [x5, x4]
   40278:	lsr	w2, w2, w4
   4027c:	bic	w2, w2, w0
   40280:	ldrb	w0, [x1, #16]
   40284:	bfxil	w0, w2, #0, #5
   40288:	strb	w0, [x1, #16]
   4028c:	ldr	x2, [x3, #8]
   40290:	ldr	x2, [x2, #120]
   40294:	lsr	x2, x2, #24
   40298:	bfi	w0, w2, #5, #3
   4029c:	strb	w0, [x1, #16]
   402a0:	mov	w0, #0x1                   	// #1
   402a4:	ret

00000000000402a8 <aarch64_ext_sve_scale@@Base>:
   402a8:	stp	x29, x30, [sp, #-32]!
   402ac:	mov	x29, sp
   402b0:	stp	x19, x20, [sp, #16]
   402b4:	mov	x19, x1
   402b8:	mov	w20, w2
   402bc:	bl	35720 <aarch64_ext_imm@plt>
   402c0:	cbz	w0, 40310 <aarch64_ext_sve_scale@@Base+0x68>
   402c4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   402c8:	ldr	x1, [x1, #3944]
   402cc:	ldr	w0, [x1, #780]
   402d0:	mov	w2, #0xffffffff            	// #-1
   402d4:	lsl	w0, w2, w0
   402d8:	ldr	w2, [x1, #776]
   402dc:	lsr	w2, w20, w2
   402e0:	bics	w2, w2, w0
   402e4:	mov	w0, #0xe                   	// #14
   402e8:	str	w0, [x19, #32]
   402ec:	add	w0, w2, #0x1
   402f0:	sxtw	x0, w0
   402f4:	str	x0, [x19, #40]
   402f8:	cset	w1, ne  // ne = any
   402fc:	ldrb	w0, [x19, #36]
   40300:	bfxil	w0, w1, #0, #1
   40304:	bfi	w0, w1, #1, #1
   40308:	strb	w0, [x19, #36]
   4030c:	mov	w0, #0x1                   	// #1
   40310:	ldp	x19, x20, [sp, #16]
   40314:	ldp	x29, x30, [sp], #32
   40318:	ret

000000000004031c <aarch64_ext_sve_shlimm@@Base>:
   4031c:	stp	x29, x30, [sp, #-32]!
   40320:	mov	x29, sp
   40324:	str	x19, [sp, #16]
   40328:	mov	x19, x1
   4032c:	bl	35720 <aarch64_ext_imm@plt>
   40330:	cbz	w0, 40340 <aarch64_ext_sve_shlimm@@Base+0x24>
   40334:	ldr	x1, [x19, #16]
   40338:	mov	w0, #0x0                   	// #0
   4033c:	cbnz	x1, 4034c <aarch64_ext_sve_shlimm@@Base+0x30>
   40340:	ldr	x19, [sp, #16]
   40344:	ldp	x29, x30, [sp], #32
   40348:	ret
   4034c:	neg	x0, x1
   40350:	and	x3, x0, x1
   40354:	bics	xzr, x1, x0
   40358:	b.eq	40378 <aarch64_ext_sve_shlimm@@Base+0x5c>  // b.none
   4035c:	mov	x0, x1
   40360:	sub	x2, x0, #0x1
   40364:	and	x0, x0, x2
   40368:	neg	x2, x0
   4036c:	and	x3, x2, x0
   40370:	bics	xzr, x0, x2
   40374:	b.ne	40360 <aarch64_ext_sve_shlimm@@Base+0x44>  // b.any
   40378:	sub	x1, x1, x3
   4037c:	str	x1, [x19, #16]
   40380:	mov	w0, #0x1                   	// #1
   40384:	b	40340 <aarch64_ext_sve_shlimm@@Base+0x24>

0000000000040388 <aarch64_ext_sve_shrimm@@Base>:
   40388:	stp	x29, x30, [sp, #-32]!
   4038c:	mov	x29, sp
   40390:	str	x19, [sp, #16]
   40394:	mov	x19, x1
   40398:	bl	35720 <aarch64_ext_imm@plt>
   4039c:	cbz	w0, 403ac <aarch64_ext_sve_shrimm@@Base+0x24>
   403a0:	ldr	x4, [x19, #16]
   403a4:	mov	w0, #0x0                   	// #0
   403a8:	cbnz	x4, 403b8 <aarch64_ext_sve_shrimm@@Base+0x30>
   403ac:	ldr	x19, [sp, #16]
   403b0:	ldp	x29, x30, [sp], #32
   403b4:	ret
   403b8:	neg	x0, x4
   403bc:	and	x3, x0, x4
   403c0:	bics	xzr, x4, x0
   403c4:	b.eq	403e4 <aarch64_ext_sve_shrimm@@Base+0x5c>  // b.none
   403c8:	mov	x0, x4
   403cc:	sub	x1, x0, #0x1
   403d0:	and	x0, x0, x1
   403d4:	neg	x2, x0
   403d8:	and	x3, x2, x0
   403dc:	bics	xzr, x0, x2
   403e0:	b.ne	403cc <aarch64_ext_sve_shrimm@@Base+0x44>  // b.any
   403e4:	lsl	x3, x3, #1
   403e8:	sub	x3, x3, x4
   403ec:	str	x3, [x19, #16]
   403f0:	mov	w0, #0x1                   	// #1
   403f4:	b	403ac <aarch64_ext_sve_shrimm@@Base+0x24>

00000000000403f8 <aarch64_decode_insn@@Base>:
   403f8:	stp	x29, x30, [sp, #-64]!
   403fc:	mov	x29, sp
   40400:	stp	x19, x20, [sp, #16]
   40404:	stp	x21, x22, [sp, #32]
   40408:	str	x23, [sp, #48]
   4040c:	mov	w23, w0
   40410:	mov	x22, x1
   40414:	mov	w21, w2
   40418:	mov	x20, x3
   4041c:	bl	355a0 <aarch64_opcode_lookup@plt>
   40420:	mov	x19, x0
   40424:	cbz	x0, 40460 <aarch64_decode_insn@@Base+0x68>
   40428:	mov	x4, x20
   4042c:	mov	w3, w21
   40430:	mov	x2, x22
   40434:	mov	w1, w23
   40438:	mov	x0, x19
   4043c:	bl	3c170 <extract_fields@@Base+0x134>
   40440:	cmp	w0, #0x1
   40444:	b.eq	40468 <aarch64_decode_insn@@Base+0x70>  // b.none
   40448:	mov	x0, x19
   4044c:	bl	35b50 <aarch64_find_next_opcode@plt>
   40450:	mov	x19, x0
   40454:	cbnz	x0, 40428 <aarch64_decode_insn@@Base+0x30>
   40458:	mov	w0, #0x1                   	// #1
   4045c:	b	4046c <aarch64_decode_insn@@Base+0x74>
   40460:	mov	w0, #0x1                   	// #1
   40464:	b	4046c <aarch64_decode_insn@@Base+0x74>
   40468:	mov	w0, #0x0                   	// #0
   4046c:	ldp	x19, x20, [sp, #16]
   40470:	ldp	x21, x22, [sp, #32]
   40474:	ldr	x23, [sp, #48]
   40478:	ldp	x29, x30, [sp], #64
   4047c:	ret
   40480:	sub	sp, sp, #0x290
   40484:	stp	x29, x30, [sp, #16]
   40488:	add	x29, sp, #0x10
   4048c:	stp	x19, x20, [sp, #32]
   40490:	stp	x21, x22, [sp, #48]
   40494:	stp	x25, x26, [sp, #80]
   40498:	mov	w20, w1
   4049c:	mov	x19, x2
   404a0:	mov	x22, x3
   404a4:	mov	w1, #0x1                   	// #1
   404a8:	strb	w1, [x2, #196]
   404ac:	strb	wzr, [x2, #197]
   404b0:	strb	wzr, [x2, #198]
   404b4:	str	xzr, [x2, #208]
   404b8:	str	xzr, [x2, #216]
   404bc:	ldr	x1, [x2, #88]
   404c0:	tst	x1, #0x80000000
   404c4:	csel	x26, x0, xzr, eq  // eq = none
   404c8:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   404cc:	ldr	w2, [x0, #1640]
   404d0:	add	x1, sp, #0x128
   404d4:	mov	w0, w20
   404d8:	bl	352e0 <aarch64_decode_insn@plt>
   404dc:	ubfx	x1, x20, #21, #10
   404e0:	cmp	w1, #0x1
   404e4:	b.eq	40538 <aarch64_decode_insn@@Base+0x140>  // b.none
   404e8:	cbz	w0, 4057c <aarch64_decode_insn@@Base+0x184>
   404ec:	sub	w1, w0, #0x1
   404f0:	cmp	w1, #0x2
   404f4:	b.hi	40570 <aarch64_decode_insn@@Base+0x178>  // b.pmore
   404f8:	str	wzr, [x19, #200]
   404fc:	ldr	x4, [x19]
   40500:	adrp	x1, 89000 <_sch_istable@@Base+0x13f58>
   40504:	add	x1, x1, #0x3a0
   40508:	ldr	x3, [x1, w0, uxtw #3]
   4050c:	mov	w2, w20
   40510:	adrp	x1, 59000 <xexit@@Base+0x74c>
   40514:	add	x1, x1, #0x770
   40518:	ldr	x0, [x19, #8]
   4051c:	blr	x4
   40520:	ldp	x19, x20, [sp, #32]
   40524:	ldp	x21, x22, [sp, #48]
   40528:	ldp	x25, x26, [sp, #80]
   4052c:	ldp	x29, x30, [sp, #16]
   40530:	add	sp, sp, #0x290
   40534:	ret
   40538:	cbz	w0, 40544 <aarch64_decode_insn@@Base+0x14c>
   4053c:	mov	w0, #0x3                   	// #3
   40540:	b	404f8 <aarch64_decode_insn@@Base+0x100>
   40544:	stp	x23, x24, [sp, #64]
   40548:	stp	x27, x28, [sp, #96]
   4054c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   40550:	add	x3, x3, #0xa48
   40554:	add	x3, x3, #0x408
   40558:	mov	w2, #0xca8                 	// #3240
   4055c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   40560:	add	x1, x1, #0x2e0
   40564:	adrp	x0, 59000 <xexit@@Base+0x74c>
   40568:	add	x0, x0, #0x760
   4056c:	bl	35ac0 <__assert_fail@plt>
   40570:	stp	x23, x24, [sp, #64]
   40574:	stp	x27, x28, [sp, #96]
   40578:	bl	35670 <abort@plt>
   4057c:	stp	x23, x24, [sp, #64]
   40580:	stp	x27, x28, [sp, #96]
   40584:	ldr	x0, [sp, #304]
   40588:	ldr	w1, [x0, #16]
   4058c:	cmp	w1, #0x5a
   40590:	b.eq	405e0 <aarch64_decode_insn@@Base+0x1e8>  // b.none
   40594:	ldr	x1, [x0, #120]
   40598:	tbnz	w1, #4, 405f8 <aarch64_decode_insn@@Base+0x200>
   4059c:	ldr	x3, [x19]
   405a0:	ldr	x2, [x0]
   405a4:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   405a8:	add	x1, x1, #0x588
   405ac:	ldr	x0, [x19, #8]
   405b0:	blr	x3
   405b4:	ldr	x24, [sp, #304]
   405b8:	str	xzr, [sp, #160]
   405bc:	add	x23, sp, #0x140
   405c0:	mov	x21, #0x0                   	// #0
   405c4:	mov	w25, #0x0                   	// #0
   405c8:	add	x0, sp, #0x9c
   405cc:	str	x0, [sp, #120]
   405d0:	str	x23, [sp, #128]
   405d4:	add	x27, sp, #0xa8
   405d8:	add	x28, sp, #0xa0
   405dc:	b	40654 <aarch64_decode_insn@@Base+0x25c>
   405e0:	ldr	x1, [sp, #392]
   405e4:	cmp	x1, #0x1f
   405e8:	b.gt	40594 <aarch64_decode_insn@@Base+0x19c>
   405ec:	mov	w1, #0x1                   	// #1
   405f0:	strb	w1, [sp, #324]
   405f4:	b	40594 <aarch64_decode_insn@@Base+0x19c>
   405f8:	add	x21, sp, #0xa8
   405fc:	add	x1, sp, #0x128
   40600:	mov	x0, x21
   40604:	bl	3bf8c <aarch64_opcode_encode@@Base+0x1ff8>
   40608:	ldr	x4, [x19]
   4060c:	ldr	x0, [sp, #312]
   40610:	ldr	x3, [x0]
   40614:	mov	x2, x21
   40618:	adrp	x1, 59000 <xexit@@Base+0x74c>
   4061c:	add	x1, x1, #0x788
   40620:	ldr	x0, [x19, #8]
   40624:	blr	x4
   40628:	b	405b4 <aarch64_decode_insn@@Base+0x1bc>
   4062c:	ldr	x3, [x19]
   40630:	mov	x2, x27
   40634:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   40638:	add	x1, x1, #0x588
   4063c:	ldr	x0, [x19, #8]
   40640:	blr	x3
   40644:	add	x21, x21, #0x1
   40648:	add	x23, x23, #0x38
   4064c:	cmp	x21, #0x6
   40650:	b.eq	406ec <aarch64_decode_insn@@Base+0x2f4>  // b.none
   40654:	mov	w5, w21
   40658:	add	x0, x24, #0x20
   4065c:	ldr	w0, [x0, x21, lsl #2]
   40660:	cbz	w0, 406ec <aarch64_decode_insn@@Base+0x2f4>
   40664:	ldr	w0, [x23]
   40668:	cbz	w0, 406ec <aarch64_decode_insn@@Base+0x2f4>
   4066c:	str	x28, [sp]
   40670:	add	x7, x19, #0xd0
   40674:	ldr	x6, [sp, #120]
   40678:	ldr	x4, [sp, #128]
   4067c:	mov	x3, x24
   40680:	mov	x2, x26
   40684:	mov	x1, #0x80                  	// #128
   40688:	mov	x0, x27
   4068c:	bl	353b0 <aarch64_print_operand@plt>
   40690:	ldrb	w0, [sp, #168]
   40694:	cbz	w0, 406d0 <aarch64_decode_insn@@Base+0x2d8>
   40698:	ldr	x3, [x19]
   4069c:	add	w0, w25, #0x1
   406a0:	str	w0, [sp, #140]
   406a4:	adrp	x0, 59000 <xexit@@Base+0x74c>
   406a8:	add	x0, x0, #0x758
   406ac:	adrp	x2, 59000 <xexit@@Base+0x74c>
   406b0:	add	x2, x2, #0x750
   406b4:	cmp	w25, #0x0
   406b8:	csel	x2, x2, x0, eq  // eq = none
   406bc:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   406c0:	add	x1, x1, #0x588
   406c4:	ldr	x0, [x19, #8]
   406c8:	blr	x3
   406cc:	ldr	w25, [sp, #140]
   406d0:	ldr	w0, [sp, #156]
   406d4:	cbz	w0, 4062c <aarch64_decode_insn@@Base+0x234>
   406d8:	ldr	x2, [x19, #120]
   406dc:	mov	x1, x19
   406e0:	ldr	x0, [x19, #208]
   406e4:	blr	x2
   406e8:	b	40644 <aarch64_decode_insn@@Base+0x24c>
   406ec:	ldr	x2, [sp, #160]
   406f0:	cbz	x2, 40844 <aarch64_decode_insn@@Base+0x44c>
   406f4:	adrp	x0, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   406f8:	ldr	w0, [x0, #1496]
   406fc:	cbnz	w0, 40844 <aarch64_decode_insn@@Base+0x44c>
   40700:	ldr	x3, [x19]
   40704:	adrp	x1, 59000 <xexit@@Base+0x74c>
   40708:	add	x1, x1, #0x790
   4070c:	ldr	x0, [x19, #8]
   40710:	blr	x3
   40714:	ldr	x0, [sp, #304]
   40718:	ldr	x0, [x0, #120]
   4071c:	mov	w27, #0x1                   	// #1
   40720:	tbnz	w0, #4, 40734 <aarch64_decode_insn@@Base+0x33c>
   40724:	ldp	x23, x24, [sp, #64]
   40728:	ldp	x27, x28, [sp, #96]
   4072c:	b	40520 <aarch64_decode_insn@@Base+0x128>
   40730:	mov	w27, #0x0                   	// #0
   40734:	add	x1, sp, #0x128
   40738:	add	x0, sp, #0xa8
   4073c:	bl	3bf8c <aarch64_opcode_encode@@Base+0x1ff8>
   40740:	mov	w21, #0x1                   	// #1
   40744:	add	x25, sp, #0xa8
   40748:	adrp	x24, 59000 <xexit@@Base+0x74c>
   4074c:	add	x24, x24, #0x7f0
   40750:	adrp	x23, 59000 <xexit@@Base+0x74c>
   40754:	add	x23, x23, #0x7a8
   40758:	b	407f8 <aarch64_decode_insn@@Base+0x400>
   4075c:	cbnz	w0, 40778 <aarch64_decode_insn@@Base+0x380>
   40760:	ldp	x23, x24, [sp, #64]
   40764:	ldp	x27, x28, [sp, #96]
   40768:	b	40520 <aarch64_decode_insn@@Base+0x128>
   4076c:	ldp	x23, x24, [sp, #64]
   40770:	ldp	x27, x28, [sp, #96]
   40774:	b	40520 <aarch64_decode_insn@@Base+0x128>
   40778:	adrp	x3, 59000 <xexit@@Base+0x74c>
   4077c:	add	x3, x3, #0xa48
   40780:	add	x3, x3, #0x420
   40784:	mov	w2, #0xc79                 	// #3193
   40788:	adrp	x1, 59000 <xexit@@Base+0x74c>
   4078c:	add	x1, x1, #0x2e0
   40790:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   40794:	add	x0, x0, #0xb60
   40798:	bl	35ac0 <__assert_fail@plt>
   4079c:	adrp	x3, 59000 <xexit@@Base+0x74c>
   407a0:	add	x3, x3, #0xa48
   407a4:	add	x3, x3, #0x438
   407a8:	mov	w2, #0xc52                 	// #3154
   407ac:	adrp	x1, 59000 <xexit@@Base+0x74c>
   407b0:	add	x1, x1, #0x2e0
   407b4:	adrp	x0, 59000 <xexit@@Base+0x74c>
   407b8:	add	x0, x0, #0x7b8
   407bc:	bl	35ac0 <__assert_fail@plt>
   407c0:	adrp	x3, 59000 <xexit@@Base+0x74c>
   407c4:	add	x3, x3, #0xa48
   407c8:	add	x3, x3, #0x438
   407cc:	mov	w2, #0xc53                 	// #3155
   407d0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   407d4:	add	x1, x1, #0x2e0
   407d8:	adrp	x0, 59000 <xexit@@Base+0x74c>
   407dc:	add	x0, x0, #0x7d0
   407e0:	bl	35ac0 <__assert_fail@plt>
   407e4:	mov	x3, x25
   407e8:	mov	x2, x24
   407ec:	mov	x1, x23
   407f0:	blr	x5
   407f4:	add	w21, w21, #0x1
   407f8:	ldr	x0, [sp, #312]
   407fc:	ldr	x4, [x0, w21, uxtw #3]
   40800:	cbz	x4, 40834 <aarch64_decode_insn@@Base+0x43c>
   40804:	ldr	x5, [x19]
   40808:	ldr	x0, [x19, #8]
   4080c:	cmp	w21, #0x1
   40810:	b.eq	407e4 <aarch64_decode_insn@@Base+0x3ec>  // b.none
   40814:	mov	x3, x25
   40818:	adrp	x2, 59000 <xexit@@Base+0x74c>
   4081c:	add	x2, x2, #0x7a0
   40820:	mov	x1, x23
   40824:	blr	x5
   40828:	add	w0, w21, #0x1
   4082c:	cmp	w0, #0x3
   40830:	b.ls	407f4 <aarch64_decode_insn@@Base+0x3fc>  // b.plast
   40834:	cbz	w27, 40850 <aarch64_decode_insn@@Base+0x458>
   40838:	ldp	x23, x24, [sp, #64]
   4083c:	ldp	x27, x28, [sp, #96]
   40840:	b	40520 <aarch64_decode_insn@@Base+0x128>
   40844:	ldr	x0, [sp, #304]
   40848:	ldr	x0, [x0, #120]
   4084c:	tbnz	w0, #4, 40730 <aarch64_decode_insn@@Base+0x338>
   40850:	adrp	x5, fa000 <aarch64_opcode_table@@Base+0x55a20>
   40854:	add	x5, x5, #0x668
   40858:	add	x5, x5, #0x8
   4085c:	mov	x4, x22
   40860:	mov	w3, #0x0                   	// #0
   40864:	mov	x2, x26
   40868:	mov	w1, w20
   4086c:	add	x0, sp, #0x128
   40870:	bl	35250 <verify_constraints@plt>
   40874:	cmp	w0, #0x3
   40878:	b.ls	4075c <aarch64_decode_insn@@Base+0x364>  // b.plast
   4087c:	cmp	w0, #0x4
   40880:	b.ne	4076c <aarch64_decode_insn@@Base+0x374>  // b.any
   40884:	adrp	x0, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   40888:	ldr	w0, [x0, #1496]
   4088c:	cbnz	w0, 408e0 <aarch64_decode_insn@@Base+0x4e8>
   40890:	ldr	w0, [x22, #28]
   40894:	cbz	w0, 4079c <aarch64_decode_insn@@Base+0x3a4>
   40898:	ldr	x2, [x22, #8]
   4089c:	cbz	x2, 407c0 <aarch64_decode_insn@@Base+0x3c8>
   408a0:	ldr	x3, [x19]
   408a4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   408a8:	add	x1, x1, #0x790
   408ac:	ldr	x0, [x19, #8]
   408b0:	blr	x3
   408b4:	ldr	w2, [x22, #4]
   408b8:	tbnz	w2, #31, 408ec <aarch64_decode_insn@@Base+0x4f4>
   408bc:	ldr	x3, [x19]
   408c0:	add	w2, w2, #0x1
   408c4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   408c8:	add	x1, x1, #0x7e0
   408cc:	ldr	x0, [x19, #8]
   408d0:	blr	x3
   408d4:	ldp	x23, x24, [sp, #64]
   408d8:	ldp	x27, x28, [sp, #96]
   408dc:	b	40520 <aarch64_decode_insn@@Base+0x128>
   408e0:	ldp	x23, x24, [sp, #64]
   408e4:	ldp	x27, x28, [sp, #96]
   408e8:	b	40520 <aarch64_decode_insn@@Base+0x128>
   408ec:	ldp	x23, x24, [sp, #64]
   408f0:	ldp	x27, x28, [sp, #96]
   408f4:	b	40520 <aarch64_decode_insn@@Base+0x128>

00000000000408f8 <aarch64_symbol_is_valid@@Base>:
   408f8:	cbz	x0, 40944 <aarch64_symbol_is_valid@@Base+0x4c>
   408fc:	ldr	x1, [x0, #8]
   40900:	mov	w0, #0x0                   	// #0
   40904:	cbz	x1, 40918 <aarch64_symbol_is_valid@@Base+0x20>
   40908:	ldrb	w2, [x1]
   4090c:	mov	w0, #0x1                   	// #1
   40910:	cmp	w2, #0x24
   40914:	b.eq	4091c <aarch64_symbol_is_valid@@Base+0x24>  // b.none
   40918:	ret
   4091c:	ldrb	w2, [x1, #1]
   40920:	cmp	w2, #0x78
   40924:	mov	w3, #0x64                  	// #100
   40928:	ccmp	w2, w3, #0x4, ne  // ne = any
   4092c:	b.ne	40918 <aarch64_symbol_is_valid@@Base+0x20>  // b.any
   40930:	ldrb	w0, [x1, #2]
   40934:	cmp	w0, #0x2e
   40938:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   4093c:	cset	w0, ne  // ne = any
   40940:	b	40918 <aarch64_symbol_is_valid@@Base+0x20>
   40944:	mov	w0, #0x0                   	// #0
   40948:	b	40918 <aarch64_symbol_is_valid@@Base+0x20>

000000000004094c <print_insn_aarch64@@Base>:
   4094c:	stp	x29, x30, [sp, #-144]!
   40950:	mov	x29, sp
   40954:	stp	x19, x20, [sp, #16]
   40958:	stp	x21, x22, [sp, #32]
   4095c:	mov	x21, x0
   40960:	mov	x19, x1
   40964:	ldr	x20, [x1, #224]
   40968:	cbz	x20, 40a8c <print_insn_aarch64@@Base+0x140>
   4096c:	ldrb	w0, [x20]
   40970:	cbz	w0, 40a88 <print_insn_aarch64@@Base+0x13c>
   40974:	stp	x23, x24, [sp, #48]
   40978:	stp	x25, x26, [sp, #64]
   4097c:	adrp	x24, 59000 <xexit@@Base+0x74c>
   40980:	add	x24, x24, #0x7f8
   40984:	mov	x25, #0xa                   	// #10
   40988:	adrp	x23, 59000 <xexit@@Base+0x74c>
   4098c:	add	x23, x23, #0x808
   40990:	b	409ac <print_insn_aarch64@@Base+0x60>
   40994:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   40998:	mov	w1, #0x1                   	// #1
   4099c:	str	w1, [x0, #1640]
   409a0:	ldrb	w0, [x22]
   409a4:	cbz	w0, 40a80 <print_insn_aarch64@@Base+0x134>
   409a8:	mov	x20, x22
   409ac:	add	x22, x20, #0x1
   409b0:	cmp	w0, #0x2c
   409b4:	b.eq	409a0 <print_insn_aarch64@@Base+0x54>  // b.none
   409b8:	add	x22, x20, #0x1
   409bc:	ldrb	w0, [x20, #1]
   409c0:	cmp	w0, #0x2c
   409c4:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   409c8:	b.eq	409dc <print_insn_aarch64@@Base+0x90>  // b.none
   409cc:	ldrb	w0, [x22, #1]!
   409d0:	cmp	w0, #0x2c
   409d4:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   409d8:	b.ne	409cc <print_insn_aarch64@@Base+0x80>  // b.any
   409dc:	mov	x2, x25
   409e0:	mov	x1, x24
   409e4:	mov	x0, x20
   409e8:	bl	35440 <strncmp@plt>
   409ec:	cbz	w0, 40994 <print_insn_aarch64@@Base+0x48>
   409f0:	mov	x2, #0x7                   	// #7
   409f4:	mov	x1, x23
   409f8:	mov	x0, x20
   409fc:	bl	35440 <strncmp@plt>
   40a00:	cbz	w0, 40a40 <print_insn_aarch64@@Base+0xf4>
   40a04:	mov	x2, #0x8                   	// #8
   40a08:	adrp	x1, 59000 <xexit@@Base+0x74c>
   40a0c:	add	x1, x1, #0x810
   40a10:	mov	x0, x20
   40a14:	bl	35440 <strncmp@plt>
   40a18:	cbz	w0, 40a4c <print_insn_aarch64@@Base+0x100>
   40a1c:	mov	x2, #0x5                   	// #5
   40a20:	adrp	x1, 59000 <xexit@@Base+0x74c>
   40a24:	add	x1, x1, #0x820
   40a28:	mov	x0, x20
   40a2c:	bl	35440 <strncmp@plt>
   40a30:	cbnz	w0, 40a5c <print_insn_aarch64@@Base+0x110>
   40a34:	adrp	x0, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   40a38:	str	wzr, [x0, #1496]
   40a3c:	b	409a0 <print_insn_aarch64@@Base+0x54>
   40a40:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   40a44:	str	wzr, [x0, #1640]
   40a48:	b	409a0 <print_insn_aarch64@@Base+0x54>
   40a4c:	adrp	x0, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   40a50:	mov	w1, #0x1                   	// #1
   40a54:	str	w1, [x0, #1496]
   40a58:	b	409a0 <print_insn_aarch64@@Base+0x54>
   40a5c:	mov	w2, #0x5                   	// #5
   40a60:	adrp	x1, 59000 <xexit@@Base+0x74c>
   40a64:	add	x1, x1, #0x828
   40a68:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   40a6c:	add	x0, x0, #0x908
   40a70:	bl	359e0 <dcgettext@plt>
   40a74:	mov	x1, x20
   40a78:	bl	35a10 <_bfd_error_handler@plt>
   40a7c:	b	409a0 <print_insn_aarch64@@Base+0x54>
   40a80:	ldp	x23, x24, [sp, #48]
   40a84:	ldp	x25, x26, [sp, #64]
   40a88:	str	xzr, [x19, #224]
   40a8c:	mov	w0, #0x1                   	// #1
   40a90:	str	w0, [x19, #44]
   40a94:	str	w0, [sp, #100]
   40a98:	ldr	x0, [x19, #48]
   40a9c:	cbz	x0, 40aa8 <print_insn_aarch64@@Base+0x15c>
   40aa0:	ldr	w0, [x0, #32]
   40aa4:	tbz	w0, #4, 40aac <print_insn_aarch64@@Base+0x160>
   40aa8:	str	wzr, [sp, #100]
   40aac:	ldr	w0, [x19, #84]
   40ab0:	cbz	w0, 40ad8 <print_insn_aarch64@@Base+0x18c>
   40ab4:	ldr	x1, [x19, #72]
   40ab8:	ldr	x1, [x1]
   40abc:	ldr	w2, [x1, #24]
   40ac0:	tbnz	w2, #21, 40ad8 <print_insn_aarch64@@Base+0x18c>
   40ac4:	ldr	x1, [x1]
   40ac8:	ldr	x1, [x1, #8]
   40acc:	ldr	w1, [x1, #8]
   40ad0:	cmp	w1, #0x5
   40ad4:	b.eq	40b60 <print_insn_aarch64@@Base+0x214>  // b.none
   40ad8:	ldr	w0, [sp, #100]
   40adc:	adrp	x1, fa000 <aarch64_opcode_table@@Base+0x55a20>
   40ae0:	str	w0, [x1, #1688]
   40ae4:	cmp	w0, #0x1
   40ae8:	b.eq	40d78 <print_insn_aarch64@@Base+0x42c>  // b.none
   40aec:	mov	w20, #0x4                   	// #4
   40af0:	str	w20, [x19, #172]
   40af4:	ldr	w0, [x19, #44]
   40af8:	str	w0, [x19, #176]
   40afc:	adrp	x22, 40000 <aarch64_ext_sve_asimm@@Base+0x70>
   40b00:	add	x22, x22, #0x480
   40b04:	ldr	x4, [x19, #104]
   40b08:	mov	x3, x19
   40b0c:	mov	w2, w20
   40b10:	add	x1, sp, #0x88
   40b14:	mov	x0, x21
   40b18:	blr	x4
   40b1c:	cbnz	w0, 40d9c <print_insn_aarch64@@Base+0x450>
   40b20:	ldr	w0, [x19, #176]
   40b24:	cmp	w0, #0x0
   40b28:	cset	w2, eq  // eq = none
   40b2c:	lsl	w1, w20, #3
   40b30:	add	x0, sp, #0x88
   40b34:	bl	35530 <bfd_get_bits@plt>
   40b38:	add	x3, sp, #0x68
   40b3c:	mov	x2, x19
   40b40:	mov	w1, w0
   40b44:	mov	x0, x21
   40b48:	blr	x22
   40b4c:	mov	w0, w20
   40b50:	ldp	x19, x20, [sp, #16]
   40b54:	ldp	x21, x22, [sp, #32]
   40b58:	ldp	x29, x30, [sp], #144
   40b5c:	ret
   40b60:	stp	x23, x24, [sp, #48]
   40b64:	stp	x25, x26, [sp, #64]
   40b68:	stp	x27, x28, [sp, #80]
   40b6c:	cbnz	x21, 40c30 <print_insn_aarch64@@Base+0x2e4>
   40b70:	mov	w27, #0xffffffff            	// #-1
   40b74:	adrp	x1, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   40b78:	str	w27, [x1, #1500]
   40b7c:	ldr	w20, [x19, #80]
   40b80:	add	w20, w20, #0x1
   40b84:	mov	w28, #0x0                   	// #0
   40b88:	cmp	w0, w20
   40b8c:	b.le	40db4 <print_insn_aarch64@@Base+0x468>
   40b90:	sbfiz	x23, x20, #3, #32
   40b94:	mov	w22, #0xffffffff            	// #-1
   40b98:	mov	w24, #0x0                   	// #0
   40b9c:	add	x26, sp, #0x64
   40ba0:	mov	w25, #0x1                   	// #1
   40ba4:	ldr	x0, [x19, #72]
   40ba8:	ldr	x1, [x0, x23]
   40bac:	ldr	x0, [x1, #32]
   40bb0:	ldr	x0, [x0, #40]
   40bb4:	ldr	x1, [x1, #16]
   40bb8:	add	x0, x0, x1
   40bbc:	cmp	x21, x0
   40bc0:	b.cc	40bf4 <print_insn_aarch64@@Base+0x2a8>  // b.lo, b.ul, b.last
   40bc4:	mov	x2, x26
   40bc8:	mov	w1, w20
   40bcc:	mov	x0, x19
   40bd0:	bl	3bd94 <aarch64_opcode_encode@@Base+0x1e00>
   40bd4:	cmp	w0, #0x0
   40bd8:	csel	w22, w22, w20, eq  // eq = none
   40bdc:	csel	w24, w24, w25, eq  // eq = none
   40be0:	add	w20, w20, #0x1
   40be4:	add	x23, x23, #0x8
   40be8:	ldr	w0, [x19, #84]
   40bec:	cmp	w0, w20
   40bf0:	b.gt	40ba4 <print_insn_aarch64@@Base+0x258>
   40bf4:	cbz	w24, 40c78 <print_insn_aarch64@@Base+0x32c>
   40bf8:	adrp	x0, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   40bfc:	str	w22, [x0, #1500]
   40c00:	ldr	w1, [sp, #100]
   40c04:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   40c08:	add	x0, x0, #0x668
   40c0c:	str	w1, [x0, #48]
   40c10:	ldr	x2, [x19, #240]
   40c14:	str	x2, [x0, #40]
   40c18:	cmp	w1, #0x1
   40c1c:	b.eq	40cf4 <print_insn_aarch64@@Base+0x3a8>  // b.none
   40c20:	ldp	x23, x24, [sp, #48]
   40c24:	ldp	x25, x26, [sp, #64]
   40c28:	ldp	x27, x28, [sp, #80]
   40c2c:	b	40aec <print_insn_aarch64@@Base+0x1a0>
   40c30:	ldr	w20, [x19, #80]
   40c34:	add	w20, w20, #0x1
   40c38:	adrp	x1, a4000 <aarch64_ext_sysins_op@@Base+0x64814>
   40c3c:	ldr	w27, [x1, #1500]
   40c40:	tbnz	w27, #31, 40b84 <print_insn_aarch64@@Base+0x238>
   40c44:	ldr	x2, [x19, #240]
   40c48:	adrp	x1, fa000 <aarch64_opcode_table@@Base+0x55a20>
   40c4c:	ldr	x1, [x1, #1680]
   40c50:	cmp	x2, x1
   40c54:	b.ne	40b84 <print_insn_aarch64@@Base+0x238>  // b.any
   40c58:	cmp	w20, w27
   40c5c:	csel	w20, w20, w27, le
   40c60:	cmp	w0, w20
   40c64:	b.le	40c70 <print_insn_aarch64@@Base+0x324>
   40c68:	mov	w28, #0x1                   	// #1
   40c6c:	b	40b90 <print_insn_aarch64@@Base+0x244>
   40c70:	mov	w28, #0x1                   	// #1
   40c74:	mov	w22, #0xffffffff            	// #-1
   40c78:	ldr	w20, [x19, #80]
   40c7c:	cmp	w28, #0x0
   40c80:	ccmp	w27, w20, #0x0, ne  // ne = any
   40c84:	csel	w20, w20, w27, gt
   40c88:	ldr	x0, [x19, #48]
   40c8c:	mov	x24, #0x0                   	// #0
   40c90:	cbz	x0, 40c98 <print_insn_aarch64@@Base+0x34c>
   40c94:	ldr	x24, [x0, #40]
   40c98:	sbfiz	x23, x20, #3, #32
   40c9c:	add	x25, sp, #0x64
   40ca0:	tbnz	w20, #31, 40bf8 <print_insn_aarch64@@Base+0x2ac>
   40ca4:	ldr	x0, [x19, #72]
   40ca8:	ldr	x1, [x0, x23]
   40cac:	ldr	x0, [x1, #32]
   40cb0:	ldr	x0, [x0, #40]
   40cb4:	ldr	x1, [x1, #16]
   40cb8:	add	x0, x0, x1
   40cbc:	cmp	x24, x0
   40cc0:	b.hi	40bf8 <print_insn_aarch64@@Base+0x2ac>  // b.pmore
   40cc4:	mov	x2, x25
   40cc8:	mov	w1, w20
   40ccc:	mov	x0, x19
   40cd0:	bl	3bd94 <aarch64_opcode_encode@@Base+0x1e00>
   40cd4:	cbnz	w0, 40cec <print_insn_aarch64@@Base+0x3a0>
   40cd8:	sub	w20, w20, #0x1
   40cdc:	sub	x23, x23, #0x8
   40ce0:	cmn	w20, #0x1
   40ce4:	b.ne	40ca4 <print_insn_aarch64@@Base+0x358>  // b.any
   40ce8:	b	40bf8 <print_insn_aarch64@@Base+0x2ac>
   40cec:	mov	w22, w20
   40cf0:	b	40bf8 <print_insn_aarch64@@Base+0x2ac>
   40cf4:	and	w0, w21, #0x3
   40cf8:	mov	w20, #0x4                   	// #4
   40cfc:	sub	w20, w20, w0
   40d00:	add	w22, w22, #0x1
   40d04:	ldr	w2, [x19, #84]
   40d08:	cmp	w22, w2
   40d0c:	b.ge	40d54 <print_insn_aarch64@@Base+0x408>  // b.tcont
   40d10:	ldr	x3, [x19, #72]
   40d14:	sxtw	x22, w22
   40d18:	ldr	x1, [x3, x22, lsl #3]
   40d1c:	ldr	x0, [x1, #32]
   40d20:	ldr	x0, [x0, #40]
   40d24:	ldr	x1, [x1, #16]
   40d28:	add	x0, x0, x1
   40d2c:	cmp	x21, x0
   40d30:	b.cc	40d44 <print_insn_aarch64@@Base+0x3f8>  // b.lo, b.ul, b.last
   40d34:	add	x22, x22, #0x1
   40d38:	cmp	w2, w22
   40d3c:	b.gt	40d18 <print_insn_aarch64@@Base+0x3cc>
   40d40:	b	40d54 <print_insn_aarch64@@Base+0x408>
   40d44:	sub	x1, x0, x21
   40d48:	sub	w0, w0, w21
   40d4c:	cmp	x1, w20, uxtw
   40d50:	csel	w20, w0, w20, cc  // cc = lo, ul, last
   40d54:	and	x0, x21, #0x1
   40d58:	mov	x1, #0x2                   	// #2
   40d5c:	sub	x0, x1, x0
   40d60:	cmp	w20, #0x3
   40d64:	csel	w20, w0, w20, eq  // eq = none
   40d68:	ldp	x23, x24, [sp, #48]
   40d6c:	ldp	x25, x26, [sp, #64]
   40d70:	ldp	x27, x28, [sp, #80]
   40d74:	b	40d7c <print_insn_aarch64@@Base+0x430>
   40d78:	mov	w20, #0x4                   	// #4
   40d7c:	ldr	x0, [x19, #88]
   40d80:	tbnz	w0, #30, 40aec <print_insn_aarch64@@Base+0x1a0>
   40d84:	str	w20, [x19, #172]
   40d88:	ldr	w0, [x19, #40]
   40d8c:	str	w0, [x19, #176]
   40d90:	adrp	x22, 3b000 <aarch64_opcode_encode@@Base+0x106c>
   40d94:	add	x22, x22, #0xf08
   40d98:	b	40b04 <print_insn_aarch64@@Base+0x1b8>
   40d9c:	ldr	x3, [x19, #112]
   40da0:	mov	x2, x19
   40da4:	mov	x1, x21
   40da8:	blr	x3
   40dac:	mov	w0, #0xffffffff            	// #-1
   40db0:	b	40b50 <print_insn_aarch64@@Base+0x204>
   40db4:	ldr	w20, [x19, #80]
   40db8:	mov	w22, #0xffffffff            	// #-1
   40dbc:	b	40c88 <print_insn_aarch64@@Base+0x33c>

0000000000040dc0 <print_aarch64_disassembler_options@@Base>:
   40dc0:	stp	x29, x30, [sp, #-32]!
   40dc4:	mov	x29, sp
   40dc8:	stp	x19, x20, [sp, #16]
   40dcc:	mov	x19, x0
   40dd0:	adrp	x20, 58000 <print_arm_disassembler_options@@Base+0x228>
   40dd4:	add	x20, x20, #0x908
   40dd8:	mov	w2, #0x5                   	// #5
   40ddc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   40de0:	add	x1, x1, #0x850
   40de4:	mov	x0, x20
   40de8:	bl	359e0 <dcgettext@plt>
   40dec:	mov	x1, x0
   40df0:	mov	x0, x19
   40df4:	bl	35b80 <fprintf@plt>
   40df8:	mov	w2, #0x5                   	// #5
   40dfc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   40e00:	add	x1, x1, #0x8e8
   40e04:	mov	x0, x20
   40e08:	bl	359e0 <dcgettext@plt>
   40e0c:	mov	x1, x0
   40e10:	mov	x0, x19
   40e14:	bl	35b80 <fprintf@plt>
   40e18:	mov	w2, #0x5                   	// #5
   40e1c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   40e20:	add	x1, x1, #0x920
   40e24:	mov	x0, x20
   40e28:	bl	359e0 <dcgettext@plt>
   40e2c:	mov	x1, x0
   40e30:	mov	x0, x19
   40e34:	bl	35b80 <fprintf@plt>
   40e38:	mov	w2, #0x5                   	// #5
   40e3c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   40e40:	add	x1, x1, #0x958
   40e44:	mov	x0, x20
   40e48:	bl	359e0 <dcgettext@plt>
   40e4c:	mov	x1, x0
   40e50:	mov	x0, x19
   40e54:	bl	35b80 <fprintf@plt>
   40e58:	mov	w2, #0x5                   	// #5
   40e5c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   40e60:	add	x1, x1, #0x990
   40e64:	mov	x0, x20
   40e68:	bl	359e0 <dcgettext@plt>
   40e6c:	mov	x1, x0
   40e70:	mov	x0, x19
   40e74:	bl	35b80 <fprintf@plt>
   40e78:	mov	w2, #0x5                   	// #5
   40e7c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   40e80:	add	x1, x1, #0x900
   40e84:	mov	x0, x20
   40e88:	bl	359e0 <dcgettext@plt>
   40e8c:	mov	x1, x0
   40e90:	mov	x0, x19
   40e94:	bl	35b80 <fprintf@plt>
   40e98:	ldp	x19, x20, [sp, #16]
   40e9c:	ldp	x29, x30, [sp], #32
   40ea0:	ret
   40ea4:	ldr	x2, [x0]
   40ea8:	ldr	x0, [x1]
   40eac:	cmp	x2, x0
   40eb0:	b.cc	40ebc <print_aarch64_disassembler_options@@Base+0xfc>  // b.lo, b.ul, b.last
   40eb4:	cset	w0, hi  // hi = pmore
   40eb8:	ret
   40ebc:	mov	w0, #0xffffffff            	// #-1
   40ec0:	b	40eb8 <print_aarch64_disassembler_options@@Base+0xf8>
   40ec4:	and	w3, w1, #0x1f
   40ec8:	ubfx	x2, x1, #10, #5
   40ecc:	ubfx	x0, x1, #23, #1
   40ed0:	tbz	w1, #23, 40ee8 <print_aarch64_disassembler_options@@Base+0x128>
   40ed4:	ubfx	x4, x1, #5, #5
   40ed8:	cmp	w3, w4
   40edc:	ccmp	w4, w2, #0x4, ne  // ne = any
   40ee0:	ccmp	w4, #0x1f, #0x4, eq  // eq = none
   40ee4:	b.ne	40ef4 <print_aarch64_disassembler_options@@Base+0x134>  // b.any
   40ee8:	tst	x1, #0x400000
   40eec:	ccmp	w3, w2, #0x0, ne  // ne = any
   40ef0:	cset	w0, eq  // eq = none
   40ef4:	ret
   40ef8:	ubfx	x3, x1, #7, #1
   40efc:	and	w5, w1, #0x7f
   40f00:	ubfx	x1, x1, #6, #1
   40f04:	lsl	w2, w1, #2
   40f08:	orr	w2, w2, w1, lsl #3
   40f0c:	lsl	w4, w1, #1
   40f10:	orr	w4, w4, w1
   40f14:	orr	w2, w2, w4
   40f18:	cmp	w0, #0x8
   40f1c:	b.eq	40f4c <print_aarch64_disassembler_options@@Base+0x18c>  // b.none
   40f20:	sub	w0, w0, #0x2
   40f24:	tst	w0, #0xfffffffd
   40f28:	b.ne	40f7c <print_aarch64_disassembler_options@@Base+0x1bc>  // b.any
   40f2c:	lsl	w1, w1, #30
   40f30:	eor	w1, w1, #0x40000000
   40f34:	orr	w2, w1, w2, lsl #26
   40f38:	lsl	w0, w5, #19
   40f3c:	orr	w0, w0, w3, lsl #31
   40f40:	orr	w0, w2, w0
   40f44:	mov	w0, w0
   40f48:	ret
   40f4c:	lsl	w4, w1, #25
   40f50:	orr	w3, w4, w3, lsl #31
   40f54:	lsl	w0, w1, #23
   40f58:	orr	w0, w0, w1, lsl #24
   40f5c:	orr	w4, w3, w0
   40f60:	lsl	w0, w1, #30
   40f64:	eor	w0, w0, #0x40000000
   40f68:	orr	w0, w0, w5, lsl #16
   40f6c:	orr	w0, w4, w0
   40f70:	orr	w2, w0, w2, lsl #26
   40f74:	lsl	x0, x2, #32
   40f78:	ret
   40f7c:	stp	x29, x30, [sp, #-16]!
   40f80:	mov	x29, sp
   40f84:	adrp	x3, 60000 <xexit@@Base+0x774c>
   40f88:	add	x3, x3, #0x78
   40f8c:	mov	w2, #0xbac                 	// #2988
   40f90:	adrp	x1, 59000 <xexit@@Base+0x74c>
   40f94:	add	x1, x1, #0xe98
   40f98:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   40f9c:	add	x0, x0, #0xb60
   40fa0:	bl	35ac0 <__assert_fail@plt>
   40fa4:	stp	x29, x30, [sp, #-16]!
   40fa8:	mov	x29, sp
   40fac:	ldrb	w4, [x2, #28]
   40fb0:	tbz	w4, #1, 41008 <print_aarch64_disassembler_options@@Base+0x248>
   40fb4:	tbz	w4, #2, 40ff4 <print_aarch64_disassembler_options@@Base+0x234>
   40fb8:	ldr	w4, [x2]
   40fbc:	cmp	w4, #0x58
   40fc0:	b.ne	40fcc <print_aarch64_disassembler_options@@Base+0x20c>  // b.any
   40fc4:	ldr	w4, [x2, #20]
   40fc8:	cbz	w4, 40fe4 <print_aarch64_disassembler_options@@Base+0x224>
   40fcc:	ldr	w4, [x2, #20]
   40fd0:	adrp	x2, 59000 <xexit@@Base+0x74c>
   40fd4:	add	x2, x2, #0xec0
   40fd8:	bl	35380 <snprintf@plt>
   40fdc:	ldp	x29, x30, [sp], #16
   40fe0:	ret
   40fe4:	adrp	x2, 59000 <xexit@@Base+0x74c>
   40fe8:	add	x2, x2, #0xeb8
   40fec:	bl	35380 <snprintf@plt>
   40ff0:	b	40fdc <print_aarch64_disassembler_options@@Base+0x21c>
   40ff4:	ldr	w4, [x2, #20]
   40ff8:	adrp	x2, 59000 <xexit@@Base+0x74c>
   40ffc:	add	x2, x2, #0xed0
   41000:	bl	35380 <snprintf@plt>
   41004:	b	40fdc <print_aarch64_disassembler_options@@Base+0x21c>
   41008:	ldrb	w4, [x2, #36]
   4100c:	tbz	w4, #0, 41054 <print_aarch64_disassembler_options@@Base+0x294>
   41010:	ldr	w4, [x2, #32]
   41014:	cmp	w4, #0xf
   41018:	b.ne	41030 <print_aarch64_disassembler_options@@Base+0x270>  // b.any
   4101c:	ldr	w4, [x2, #20]
   41020:	adrp	x2, 59000 <xexit@@Base+0x74c>
   41024:	add	x2, x2, #0xf10
   41028:	bl	35380 <snprintf@plt>
   4102c:	b	40fdc <print_aarch64_disassembler_options@@Base+0x21c>
   41030:	adrp	x3, 60000 <xexit@@Base+0x774c>
   41034:	add	x3, x3, #0x78
   41038:	add	x3, x3, #0x10
   4103c:	mov	w2, #0xc05                 	// #3077
   41040:	adrp	x1, 59000 <xexit@@Base+0x74c>
   41044:	add	x1, x1, #0xe98
   41048:	adrp	x0, 59000 <xexit@@Base+0x74c>
   4104c:	add	x0, x0, #0xee0
   41050:	bl	35ac0 <__assert_fail@plt>
   41054:	ldr	w4, [x2, #20]
   41058:	cbz	w4, 4106c <print_aarch64_disassembler_options@@Base+0x2ac>
   4105c:	adrp	x2, 59000 <xexit@@Base+0x74c>
   41060:	add	x2, x2, #0xf28
   41064:	bl	35380 <snprintf@plt>
   41068:	b	40fdc <print_aarch64_disassembler_options@@Base+0x21c>
   4106c:	adrp	x2, 59000 <xexit@@Base+0x74c>
   41070:	add	x2, x2, #0xf38
   41074:	bl	35380 <snprintf@plt>
   41078:	b	40fdc <print_aarch64_disassembler_options@@Base+0x21c>
   4107c:	stp	x29, x30, [sp, #-64]!
   41080:	mov	x29, sp
   41084:	stp	x19, x20, [sp, #16]
   41088:	stp	x21, x22, [sp, #32]
   4108c:	mov	x19, x0
   41090:	mov	x20, x1
   41094:	mov	x21, x3
   41098:	mov	x22, x4
   4109c:	ldr	w1, [x2, #32]
   410a0:	ubfiz	x3, x1, #4, #32
   410a4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   410a8:	ldr	x0, [x0, #3904]
   410ac:	ldr	x3, [x0, x3]
   410b0:	ldr	x0, [x2, #40]
   410b4:	cbnz	x0, 410ec <print_aarch64_disassembler_options@@Base+0x32c>
   410b8:	ldrb	w4, [x2, #4]
   410bc:	cmp	w4, #0x5
   410c0:	b.eq	410e4 <print_aarch64_disassembler_options@@Base+0x324>  // b.none
   410c4:	cmp	w1, #0x5
   410c8:	b.eq	4115c <print_aarch64_disassembler_options@@Base+0x39c>  // b.none
   410cc:	adrp	x2, 59000 <xexit@@Base+0x74c>
   410d0:	add	x2, x2, #0xf60
   410d4:	mov	x1, #0x10                  	// #16
   410d8:	add	x0, sp, #0x30
   410dc:	bl	35380 <snprintf@plt>
   410e0:	b	4112c <print_aarch64_disassembler_options@@Base+0x36c>
   410e4:	ldrb	w2, [x2, #36]
   410e8:	tbz	w2, #1, 410c4 <print_aarch64_disassembler_options@@Base+0x304>
   410ec:	mov	x2, #0xd70b                	// #55051
   410f0:	movk	x2, #0x70a3, lsl #16
   410f4:	movk	x2, #0xa3d, lsl #32
   410f8:	movk	x2, #0xa3d7, lsl #48
   410fc:	smulh	x2, x0, x2
   41100:	add	x2, x2, x0
   41104:	asr	x2, x2, #6
   41108:	sub	x2, x2, x0, asr #63
   4110c:	add	x4, x2, x2, lsl #1
   41110:	add	x4, x2, x4, lsl #3
   41114:	sub	x4, x0, x4, lsl #2
   41118:	adrp	x2, 59000 <xexit@@Base+0x74c>
   4111c:	add	x2, x2, #0xf50
   41120:	mov	x1, #0x10                  	// #16
   41124:	add	x0, sp, #0x30
   41128:	bl	35380 <snprintf@plt>
   4112c:	add	x5, sp, #0x30
   41130:	mov	x4, x22
   41134:	mov	x3, x21
   41138:	adrp	x2, 59000 <xexit@@Base+0x74c>
   4113c:	add	x2, x2, #0xf40
   41140:	mov	x1, x20
   41144:	mov	x0, x19
   41148:	bl	35380 <snprintf@plt>
   4114c:	ldp	x19, x20, [sp, #16]
   41150:	ldp	x21, x22, [sp, #32]
   41154:	ldp	x29, x30, [sp], #64
   41158:	ret
   4115c:	strb	wzr, [sp, #48]
   41160:	b	4112c <print_aarch64_disassembler_options@@Base+0x36c>
   41164:	stp	x29, x30, [sp, #-16]!
   41168:	mov	x29, sp
   4116c:	mov	x2, x0
   41170:	mov	w0, w1
   41174:	ldr	x1, [x2, #8]
   41178:	cbz	x1, 411b8 <print_aarch64_disassembler_options@@Base+0x3f8>
   4117c:	ldr	w1, [x1, #40]
   41180:	cmp	w1, #0x21
   41184:	b.ne	411dc <print_aarch64_disassembler_options@@Base+0x41c>  // b.any
   41188:	cbz	w3, 41190 <print_aarch64_disassembler_options@@Base+0x3d0>
   4118c:	ldr	w0, [x2]
   41190:	cbz	w0, 41200 <print_aarch64_disassembler_options@@Base+0x440>
   41194:	mov	w4, #0x3e                  	// #62
   41198:	mov	w3, #0x7d                  	// #125
   4119c:	mov	w2, #0x2                   	// #2
   411a0:	mov	w1, #0x0                   	// #0
   411a4:	bl	35390 <extract_fields@plt>
   411a8:	cmp	w0, #0x3
   411ac:	cset	w0, eq  // eq = none
   411b0:	ldp	x29, x30, [sp], #16
   411b4:	ret
   411b8:	adrp	x3, 60000 <xexit@@Base+0x774c>
   411bc:	add	x3, x3, #0x78
   411c0:	add	x3, x3, #0x30
   411c4:	mov	w2, #0x12b7                	// #4791
   411c8:	adrp	x1, 59000 <xexit@@Base+0x74c>
   411cc:	add	x1, x1, #0xe98
   411d0:	adrp	x0, 59000 <xexit@@Base+0x74c>
   411d4:	add	x0, x0, #0xf68
   411d8:	bl	35ac0 <__assert_fail@plt>
   411dc:	adrp	x3, 60000 <xexit@@Base+0x774c>
   411e0:	add	x3, x3, #0x78
   411e4:	add	x3, x3, #0x30
   411e8:	mov	w2, #0x12b8                	// #4792
   411ec:	adrp	x1, 59000 <xexit@@Base+0x74c>
   411f0:	add	x1, x1, #0xe98
   411f4:	adrp	x0, 59000 <xexit@@Base+0x74c>
   411f8:	add	x0, x0, #0xf78
   411fc:	bl	35ac0 <__assert_fail@plt>
   41200:	adrp	x3, 60000 <xexit@@Base+0x774c>
   41204:	add	x3, x3, #0x78
   41208:	add	x3, x3, #0x30
   4120c:	mov	w2, #0x12ba                	// #4794
   41210:	adrp	x1, 59000 <xexit@@Base+0x74c>
   41214:	add	x1, x1, #0xe98
   41218:	adrp	x0, 59000 <xexit@@Base+0x74c>
   4121c:	add	x0, x0, #0xfa8
   41220:	bl	35ac0 <__assert_fail@plt>

0000000000041224 <aarch64_get_operand_class@@Base>:
   41224:	ubfiz	x1, x0, #1, #32
   41228:	add	x0, x1, w0, uxtw
   4122c:	lsl	x0, x0, #4
   41230:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   41234:	ldr	x1, [x1, #4032]
   41238:	ldr	w0, [x1, x0]
   4123c:	ret

0000000000041240 <aarch64_get_operand_name@@Base>:
   41240:	ubfiz	x1, x0, #1, #32
   41244:	add	x0, x1, w0, uxtw
   41248:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   4124c:	ldr	x1, [x1, #4032]
   41250:	add	x0, x1, x0, lsl #4
   41254:	ldr	x0, [x0, #8]
   41258:	ret

000000000004125c <aarch64_get_operand_desc@@Base>:
   4125c:	ubfiz	x1, x0, #1, #32
   41260:	add	x0, x1, w0, uxtw
   41264:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   41268:	ldr	x1, [x1, #4032]
   4126c:	add	x0, x1, x0, lsl #4
   41270:	ldr	x0, [x0, #40]
   41274:	ret

0000000000041278 <get_cond_from_value@@Base>:
   41278:	cmp	w0, #0xf
   4127c:	b.hi	41298 <get_cond_from_value@@Base+0x20>  // b.pmore
   41280:	ubfiz	x1, x0, #2, #32
   41284:	add	x0, x1, w0, uxtw
   41288:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   4128c:	ldr	x1, [x1, #4000]
   41290:	add	x0, x1, x0, lsl #3
   41294:	ret
   41298:	stp	x29, x30, [sp, #-16]!
   4129c:	mov	x29, sp
   412a0:	adrp	x3, 60000 <xexit@@Base+0x774c>
   412a4:	add	x3, x3, #0x78
   412a8:	add	x3, x3, #0x40
   412ac:	mov	w2, #0x178                 	// #376
   412b0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   412b4:	add	x1, x1, #0xe98
   412b8:	adrp	x0, 59000 <xexit@@Base+0x74c>
   412bc:	add	x0, x0, #0xfb0
   412c0:	bl	35ac0 <__assert_fail@plt>

00000000000412c4 <get_inverted_cond@@Base>:
   412c4:	ldr	w0, [x0, #32]
   412c8:	eor	w0, w0, #0x1
   412cc:	add	x0, x0, x0, lsl #2
   412d0:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   412d4:	ldr	x1, [x1, #4000]
   412d8:	add	x0, x1, x0, lsl #3
   412dc:	ret

00000000000412e0 <aarch64_get_operand_modifier@@Base>:
   412e0:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   412e4:	ldr	x1, [x1, #3904]
   412e8:	sub	x0, x0, x1
   412ec:	ubfx	x0, x0, #4, #32
   412f0:	ret

00000000000412f4 <aarch64_get_operand_modifier_value@@Base>:
   412f4:	ubfiz	x1, x0, #4, #32
   412f8:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   412fc:	ldr	x0, [x0, #3904]
   41300:	add	x0, x0, x1
   41304:	ldr	w0, [x0, #8]
   41308:	ret

000000000004130c <aarch64_get_operand_modifier_from_value@@Base>:
   4130c:	add	w3, w0, #0x6
   41310:	mov	w2, #0x5                   	// #5
   41314:	sub	w0, w2, w0
   41318:	cmp	w1, #0x1
   4131c:	csel	w0, w0, w3, ne  // ne = any
   41320:	ret

0000000000041324 <aarch64_extend_operator_p@@Base>:
   41324:	sub	w0, w0, #0x6
   41328:	cmp	w0, #0x7
   4132c:	cset	w0, ls  // ls = plast
   41330:	ret

0000000000041334 <aarch64_stack_pointer_p@@Base>:
   41334:	stp	x29, x30, [sp, #-32]!
   41338:	mov	x29, sp
   4133c:	str	x19, [sp, #16]
   41340:	mov	x19, x0
   41344:	ldr	w0, [x0]
   41348:	bl	35710 <aarch64_get_operand_class@plt>
   4134c:	cmp	w0, #0x1
   41350:	b.eq	41364 <aarch64_stack_pointer_p@@Base+0x30>  // b.none
   41354:	mov	w0, #0x0                   	// #0
   41358:	ldr	x19, [sp, #16]
   4135c:	ldp	x29, x30, [sp], #32
   41360:	ret
   41364:	ldr	w0, [x19]
   41368:	add	x0, x0, x0, lsl #1
   4136c:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   41370:	ldr	x1, [x1, #4032]
   41374:	add	x0, x1, x0, lsl #4
   41378:	ldr	w1, [x0, #16]
   4137c:	ubfx	x0, x1, #4, #1
   41380:	tbz	w1, #4, 41358 <aarch64_stack_pointer_p@@Base+0x24>
   41384:	ldr	w0, [x19, #16]
   41388:	cmp	w0, #0x1f
   4138c:	cset	w0, eq  // eq = none
   41390:	b	41358 <aarch64_stack_pointer_p@@Base+0x24>

0000000000041394 <aarch64_zero_register_p@@Base>:
   41394:	stp	x29, x30, [sp, #-32]!
   41398:	mov	x29, sp
   4139c:	str	x19, [sp, #16]
   413a0:	mov	x19, x0
   413a4:	ldr	w0, [x0]
   413a8:	bl	35710 <aarch64_get_operand_class@plt>
   413ac:	cmp	w0, #0x1
   413b0:	b.eq	413c4 <aarch64_zero_register_p@@Base+0x30>  // b.none
   413b4:	mov	w0, #0x0                   	// #0
   413b8:	ldr	x19, [sp, #16]
   413bc:	ldp	x29, x30, [sp], #32
   413c0:	ret
   413c4:	ldr	w0, [x19]
   413c8:	add	x0, x0, x0, lsl #1
   413cc:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   413d0:	ldr	x1, [x1, #4032]
   413d4:	add	x0, x1, x0, lsl #4
   413d8:	ldr	w1, [x0, #16]
   413dc:	mov	w0, #0x0                   	// #0
   413e0:	tbnz	w1, #4, 413b8 <aarch64_zero_register_p@@Base+0x24>
   413e4:	ldr	w0, [x19, #16]
   413e8:	cmp	w0, #0x1f
   413ec:	cset	w0, eq  // eq = none
   413f0:	b	413b8 <aarch64_zero_register_p@@Base+0x24>

00000000000413f4 <aarch64_get_expected_qualifier@@Base>:
   413f4:	ands	w2, w2, #0xff
   413f8:	b.ne	41438 <aarch64_get_expected_qualifier@@Base+0x44>  // b.any
   413fc:	ldrb	w2, [x0, w3, sxtw]
   41400:	cbnz	w2, 4140c <aarch64_get_expected_qualifier@@Base+0x18>
   41404:	ldrb	w0, [x0, w1, sxtw]
   41408:	ret
   4140c:	stp	x29, x30, [sp, #-16]!
   41410:	mov	x29, sp
   41414:	adrp	x3, 60000 <xexit@@Base+0x774c>
   41418:	add	x3, x3, #0x78
   4141c:	add	x3, x3, #0x58
   41420:	mov	w2, #0x28f                 	// #655
   41424:	adrp	x1, 59000 <xexit@@Base+0x74c>
   41428:	add	x1, x1, #0xe98
   4142c:	adrp	x0, 59000 <xexit@@Base+0x74c>
   41430:	add	x0, x0, #0xfc0
   41434:	bl	35ac0 <__assert_fail@plt>
   41438:	add	x3, x0, w3, sxtw
   4143c:	mov	w6, #0xffffffff            	// #-1
   41440:	mov	w4, #0x0                   	// #0
   41444:	b	41458 <aarch64_get_expected_qualifier@@Base+0x64>
   41448:	add	w4, w4, #0x1
   4144c:	add	x3, x3, #0x6
   41450:	cmp	w4, #0xa
   41454:	b.eq	41474 <aarch64_get_expected_qualifier@@Base+0x80>  // b.none
   41458:	ldrb	w5, [x3]
   4145c:	cmp	w5, w2
   41460:	b.ne	41448 <aarch64_get_expected_qualifier@@Base+0x54>  // b.any
   41464:	cmn	w6, #0x1
   41468:	b.ne	41488 <aarch64_get_expected_qualifier@@Base+0x94>  // b.any
   4146c:	mov	w6, w4
   41470:	b	41448 <aarch64_get_expected_qualifier@@Base+0x54>
   41474:	sbfiz	x2, x6, #1, #32
   41478:	add	x6, x2, w6, sxtw
   4147c:	add	x6, x0, x6, lsl #1
   41480:	ldrb	w0, [x6, w1, sxtw]
   41484:	ret
   41488:	mov	w0, #0x0                   	// #0
   4148c:	ret

0000000000041490 <aarch64_get_qualifier_name@@Base>:
   41490:	ubfiz	x0, x0, #5, #8
   41494:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   41498:	ldr	x1, [x1, #3776]
   4149c:	add	x1, x1, x0
   414a0:	ldr	x0, [x1, #16]
   414a4:	ret
   414a8:	sub	sp, sp, #0xa0
   414ac:	stp	x29, x30, [sp, #64]
   414b0:	add	x29, sp, #0x40
   414b4:	stp	x19, x20, [sp, #80]
   414b8:	stp	x21, x22, [sp, #96]
   414bc:	stp	x23, x24, [sp, #112]
   414c0:	stp	x25, x26, [sp, #128]
   414c4:	mov	x25, x0
   414c8:	mov	x26, x1
   414cc:	mov	x21, x2
   414d0:	mov	x24, x3
   414d4:	ldrb	w19, [x2, #16]
   414d8:	ubfx	x20, x19, #5, #3
   414dc:	and	w19, w19, #0x1f
   414e0:	add	w22, w20, w19
   414e4:	sub	w22, w22, #0x1
   414e8:	and	w22, w22, #0x1f
   414ec:	ldrb	w0, [x2, #4]
   414f0:	bl	353f0 <aarch64_get_qualifier_name@plt>
   414f4:	mov	x23, x0
   414f8:	ldr	w0, [x21]
   414fc:	cmp	w0, #0x26
   41500:	b.eq	41588 <aarch64_get_qualifier_name@@Base+0xf8>  // b.none
   41504:	sub	w0, w20, #0x1
   41508:	cmp	w0, #0x3
   4150c:	b.hi	41608 <aarch64_get_qualifier_name@@Base+0x178>  // b.pmore
   41510:	ldrb	w0, [x21, #17]
   41514:	tbnz	w0, #0, 4159c <aarch64_get_qualifier_name@@Base+0x10c>
   41518:	strb	wzr, [sp, #152]
   4151c:	cmp	w20, #0x2
   41520:	ccmp	w19, w22, #0x0, gt
   41524:	b.lt	4162c <aarch64_get_qualifier_name@@Base+0x19c>  // b.tstop
   41528:	add	w7, w19, #0x1
   4152c:	and	w7, w7, #0x1f
   41530:	add	w0, w19, #0x2
   41534:	and	w0, w0, #0x1f
   41538:	cmp	w20, #0x3
   4153c:	b.eq	41700 <aarch64_get_qualifier_name@@Base+0x270>  // b.none
   41540:	b.hi	4167c <aarch64_get_qualifier_name@@Base+0x1ec>  // b.pmore
   41544:	cmp	w20, #0x1
   41548:	b.eq	416d8 <aarch64_get_qualifier_name@@Base+0x248>  // b.none
   4154c:	cmp	w20, #0x2
   41550:	b.ne	41660 <aarch64_get_qualifier_name@@Base+0x1d0>  // b.any
   41554:	add	x0, sp, #0x98
   41558:	str	x0, [sp, #8]
   4155c:	str	x23, [sp]
   41560:	mov	x6, x24
   41564:	mov	x5, x23
   41568:	mov	w4, w19
   4156c:	mov	x3, x24
   41570:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   41574:	add	x2, x2, #0x80
   41578:	mov	x1, x26
   4157c:	mov	x0, x25
   41580:	bl	35380 <snprintf@plt>
   41584:	b	41660 <aarch64_get_qualifier_name@@Base+0x1d0>
   41588:	ldrb	w0, [x21, #17]
   4158c:	tbz	w0, #0, 415e4 <aarch64_get_qualifier_name@@Base+0x154>
   41590:	sub	w0, w20, #0x1
   41594:	cmp	w0, #0x3
   41598:	b.hi	41608 <aarch64_get_qualifier_name@@Base+0x178>  // b.pmore
   4159c:	ldr	x1, [x21, #24]
   415a0:	mov	x0, #0xd70b                	// #55051
   415a4:	movk	x0, #0x70a3, lsl #16
   415a8:	movk	x0, #0xa3d, lsl #32
   415ac:	movk	x0, #0xa3d7, lsl #48
   415b0:	smulh	x0, x1, x0
   415b4:	add	x0, x0, x1
   415b8:	asr	x0, x0, #6
   415bc:	sub	x0, x0, x1, asr #63
   415c0:	add	x3, x0, x0, lsl #1
   415c4:	add	x3, x0, x3, lsl #3
   415c8:	sub	x3, x1, x3, lsl #2
   415cc:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   415d0:	add	x2, x2, #0x50
   415d4:	mov	x1, #0x8                   	// #8
   415d8:	add	x0, sp, #0x98
   415dc:	bl	35380 <snprintf@plt>
   415e0:	b	4151c <aarch64_get_qualifier_name@@Base+0x8c>
   415e4:	adrp	x3, 60000 <xexit@@Base+0x774c>
   415e8:	add	x3, x3, #0x78
   415ec:	add	x3, x3, #0x78
   415f0:	mov	w2, #0xbbf                 	// #3007
   415f4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   415f8:	add	x1, x1, #0xe98
   415fc:	adrp	x0, 59000 <xexit@@Base+0x74c>
   41600:	add	x0, x0, #0xff0
   41604:	bl	35ac0 <__assert_fail@plt>
   41608:	adrp	x3, 60000 <xexit@@Base+0x774c>
   4160c:	add	x3, x3, #0x78
   41610:	add	x3, x3, #0x78
   41614:	mov	w2, #0xbc0                 	// #3008
   41618:	adrp	x1, 59000 <xexit@@Base+0x74c>
   4161c:	add	x1, x1, #0xe98
   41620:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   41624:	add	x0, x0, #0x30
   41628:	bl	35ac0 <__assert_fail@plt>
   4162c:	add	x0, sp, #0x98
   41630:	str	x0, [sp, #8]
   41634:	str	x23, [sp]
   41638:	mov	w7, w22
   4163c:	mov	x6, x24
   41640:	mov	x5, x23
   41644:	mov	w4, w19
   41648:	mov	x3, x24
   4164c:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   41650:	add	x2, x2, #0x58
   41654:	mov	x1, x26
   41658:	mov	x0, x25
   4165c:	bl	35380 <snprintf@plt>
   41660:	ldp	x19, x20, [sp, #80]
   41664:	ldp	x21, x22, [sp, #96]
   41668:	ldp	x23, x24, [sp, #112]
   4166c:	ldp	x25, x26, [sp, #128]
   41670:	ldp	x29, x30, [sp, #64]
   41674:	add	sp, sp, #0xa0
   41678:	ret
   4167c:	cmp	w20, #0x4
   41680:	b.ne	41660 <aarch64_get_qualifier_name@@Base+0x1d0>  // b.any
   41684:	add	x1, sp, #0x98
   41688:	str	x1, [sp, #56]
   4168c:	str	x23, [sp, #48]
   41690:	add	w1, w19, #0x3
   41694:	and	w1, w1, #0x1f
   41698:	str	w1, [sp, #40]
   4169c:	str	x24, [sp, #32]
   416a0:	str	x23, [sp, #24]
   416a4:	str	w0, [sp, #16]
   416a8:	str	x24, [sp, #8]
   416ac:	str	x23, [sp]
   416b0:	mov	x6, x24
   416b4:	mov	x5, x23
   416b8:	mov	w4, w19
   416bc:	mov	x3, x24
   416c0:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   416c4:	add	x2, x2, #0xb8
   416c8:	mov	x1, x26
   416cc:	mov	x0, x25
   416d0:	bl	35380 <snprintf@plt>
   416d4:	b	41660 <aarch64_get_qualifier_name@@Base+0x1d0>
   416d8:	add	x6, sp, #0x98
   416dc:	mov	x5, x23
   416e0:	mov	w4, w19
   416e4:	mov	x3, x24
   416e8:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   416ec:	add	x2, x2, #0x70
   416f0:	mov	x1, x26
   416f4:	mov	x0, x25
   416f8:	bl	35380 <snprintf@plt>
   416fc:	b	41660 <aarch64_get_qualifier_name@@Base+0x1d0>
   41700:	add	x1, sp, #0x98
   41704:	str	x1, [sp, #32]
   41708:	str	x23, [sp, #24]
   4170c:	str	w0, [sp, #16]
   41710:	str	x24, [sp, #8]
   41714:	str	x23, [sp]
   41718:	mov	x6, x24
   4171c:	mov	x5, x23
   41720:	mov	w4, w19
   41724:	mov	x3, x24
   41728:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   4172c:	add	x2, x2, #0x98
   41730:	mov	x1, x26
   41734:	mov	x0, x25
   41738:	bl	35380 <snprintf@plt>
   4173c:	b	41660 <aarch64_get_qualifier_name@@Base+0x1d0>

0000000000041740 <aarch64_get_qualifier_esize@@Base>:
   41740:	and	w2, w0, #0xff
   41744:	ubfiz	x0, x0, #5, #8
   41748:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   4174c:	ldr	x1, [x1, #3776]
   41750:	add	x1, x1, x0
   41754:	ldr	w0, [x1, #24]
   41758:	cmp	w0, #0x1
   4175c:	b.ne	41774 <aarch64_get_qualifier_esize@@Base+0x34>  // b.any
   41760:	sbfiz	x2, x2, #5, #32
   41764:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   41768:	ldr	x0, [x0, #3776]
   4176c:	ldrb	w0, [x0, x2]
   41770:	ret
   41774:	stp	x29, x30, [sp, #-16]!
   41778:	mov	x29, sp
   4177c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   41780:	add	x3, x3, #0x78
   41784:	add	x3, x3, #0x90
   41788:	mov	w2, #0x30e                 	// #782
   4178c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   41790:	add	x1, x1, #0xe98
   41794:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   41798:	add	x0, x0, #0xe0
   4179c:	bl	35ac0 <__assert_fail@plt>

00000000000417a0 <aarch64_select_operand_for_sizeq_field_coding@@Base>:
   417a0:	stp	x29, x30, [sp, #-32]!
   417a4:	mov	x29, sp
   417a8:	stp	x19, x20, [sp, #16]
   417ac:	mov	x19, x0
   417b0:	ldrb	w0, [x0, #56]
   417b4:	sub	w1, w0, #0xd
   417b8:	cmp	w1, #0x9
   417bc:	b.hi	4191c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x17c>  // b.pmore
   417c0:	ldrb	w1, [x19, #57]
   417c4:	cmp	w0, w1
   417c8:	b.eq	417f8 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x58>  // b.none
   417cc:	sub	w1, w1, #0xd
   417d0:	cmp	w1, #0x9
   417d4:	b.ls	41844 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xa4>  // b.plast
   417d8:	mov	w1, #0x0                   	// #0
   417dc:	adrp	x0, 60000 <xexit@@Base+0x774c>
   417e0:	add	x0, x0, #0x78
   417e4:	add	x0, x0, #0xb0
   417e8:	ldrb	w0, [x0, w1, uxtw]
   417ec:	ldp	x19, x20, [sp, #16]
   417f0:	ldp	x29, x30, [sp], #32
   417f4:	ret
   417f8:	ldrb	w2, [x19, #58]
   417fc:	sub	w2, w2, #0xd
   41800:	cmp	w2, #0x9
   41804:	b.ls	4181c <aarch64_select_operand_for_sizeq_field_coding@@Base+0x7c>  // b.plast
   41808:	sub	w1, w1, #0xd
   4180c:	cmp	w1, #0x9
   41810:	b.ls	41844 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xa4>  // b.plast
   41814:	mov	w1, #0x0                   	// #0
   41818:	b	417dc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>
   4181c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   41820:	and	w20, w0, #0xff
   41824:	ldrb	w0, [x19, #57]
   41828:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4182c:	cmp	w20, w0, uxtb
   41830:	b.eq	418d0 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x130>  // b.none
   41834:	ldrb	w0, [x19, #57]
   41838:	sub	w0, w0, #0xd
   4183c:	cmp	w0, #0x9
   41840:	b.hi	41854 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xb4>  // b.pmore
   41844:	ldrb	w0, [x19, #56]
   41848:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4184c:	and	w0, w0, #0xff
   41850:	cbnz	w0, 418f4 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x154>
   41854:	ldrb	w0, [x19, #57]
   41858:	ldrb	w2, [x19, #56]
   4185c:	mov	w1, #0x0                   	// #0
   41860:	cmp	w2, w0
   41864:	b.ne	417dc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>  // b.any
   41868:	ldrb	w2, [x19, #58]
   4186c:	sub	w2, w2, #0xd
   41870:	cmp	w2, #0x9
   41874:	b.hi	417dc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>  // b.pmore
   41878:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4187c:	and	w0, w0, #0xff
   41880:	mov	w1, #0x0                   	// #0
   41884:	cbz	w0, 417dc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>
   41888:	ldrb	w0, [x19, #56]
   4188c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   41890:	and	w20, w0, #0xff
   41894:	ldrb	w0, [x19, #58]
   41898:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4189c:	ubfiz	w0, w0, #1, #8
   418a0:	mov	w1, #0x0                   	// #0
   418a4:	cmp	w20, w0
   418a8:	b.ne	417dc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>  // b.any
   418ac:	ldrb	w0, [x19, #56]
   418b0:	bl	35680 <aarch64_get_qualifier_esize@plt>
   418b4:	and	w20, w0, #0xff
   418b8:	ldrb	w0, [x19, #57]
   418bc:	bl	35680 <aarch64_get_qualifier_esize@plt>
   418c0:	cmp	w20, w0, uxtb
   418c4:	mov	w1, #0x3                   	// #3
   418c8:	csel	w1, w1, wzr, eq  // eq = none
   418cc:	b	417dc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>
   418d0:	ldrb	w0, [x19, #56]
   418d4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   418d8:	and	w20, w0, #0xff
   418dc:	ldrb	w0, [x19, #58]
   418e0:	bl	35680 <aarch64_get_qualifier_esize@plt>
   418e4:	mov	w1, #0x1                   	// #1
   418e8:	cmp	w20, w0, uxtb
   418ec:	b.ne	41834 <aarch64_select_operand_for_sizeq_field_coding@@Base+0x94>  // b.any
   418f0:	b	417dc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>
   418f4:	ldrb	w0, [x19, #56]
   418f8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   418fc:	and	w20, w0, #0xff
   41900:	ldrb	w0, [x19, #57]
   41904:	bl	35680 <aarch64_get_qualifier_esize@plt>
   41908:	ubfiz	w0, w0, #1, #8
   4190c:	cmp	w20, w0
   41910:	b.ne	41854 <aarch64_select_operand_for_sizeq_field_coding@@Base+0xb4>  // b.any
   41914:	mov	w1, #0x2                   	// #2
   41918:	b	417dc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>
   4191c:	sub	w0, w0, #0x5
   41920:	mov	w1, #0x0                   	// #0
   41924:	cmp	w0, #0x4
   41928:	b.hi	417dc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>  // b.pmore
   4192c:	ldrb	w0, [x19, #57]
   41930:	sub	w0, w0, #0xd
   41934:	cmp	w0, #0x9
   41938:	b.hi	417dc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>  // b.pmore
   4193c:	ldrb	w0, [x19, #58]
   41940:	cmp	w0, #0x0
   41944:	cset	w1, eq  // eq = none
   41948:	lsl	w1, w1, #2
   4194c:	b	417dc <aarch64_select_operand_for_sizeq_field_coding@@Base+0x3c>

0000000000041950 <aarch64_get_qualifier_nelem@@Base>:
   41950:	and	w2, w0, #0xff
   41954:	ubfiz	x0, x0, #5, #8
   41958:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   4195c:	ldr	x1, [x1, #3776]
   41960:	add	x1, x1, x0
   41964:	ldr	w0, [x1, #24]
   41968:	cmp	w0, #0x1
   4196c:	b.ne	41988 <aarch64_get_qualifier_nelem@@Base+0x38>  // b.any
   41970:	sbfiz	x2, x2, #5, #32
   41974:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   41978:	ldr	x0, [x0, #3776]
   4197c:	add	x0, x0, x2
   41980:	ldrb	w0, [x0, #4]
   41984:	ret
   41988:	stp	x29, x30, [sp, #-16]!
   4198c:	mov	x29, sp
   41990:	adrp	x3, 60000 <xexit@@Base+0x774c>
   41994:	add	x3, x3, #0x78
   41998:	add	x3, x3, #0xb8
   4199c:	mov	w2, #0x315                 	// #789
   419a0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   419a4:	add	x1, x1, #0xe98
   419a8:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   419ac:	add	x0, x0, #0xe0
   419b0:	bl	35ac0 <__assert_fail@plt>

00000000000419b4 <aarch64_get_qualifier_standard_value@@Base>:
   419b4:	and	w2, w0, #0xff
   419b8:	ubfiz	x0, x0, #5, #8
   419bc:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   419c0:	ldr	x1, [x1, #3776]
   419c4:	add	x1, x1, x0
   419c8:	ldr	w0, [x1, #24]
   419cc:	cmp	w0, #0x1
   419d0:	b.ne	419ec <aarch64_get_qualifier_standard_value@@Base+0x38>  // b.any
   419d4:	sbfiz	x2, x2, #5, #32
   419d8:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   419dc:	ldr	x0, [x0, #3776]
   419e0:	add	x0, x0, x2
   419e4:	ldr	w0, [x0, #8]
   419e8:	ret
   419ec:	stp	x29, x30, [sp, #-16]!
   419f0:	mov	x29, sp
   419f4:	adrp	x3, 60000 <xexit@@Base+0x774c>
   419f8:	add	x3, x3, #0x78
   419fc:	add	x3, x3, #0xd8
   41a00:	mov	w2, #0x31c                 	// #796
   41a04:	adrp	x1, 59000 <xexit@@Base+0x74c>
   41a08:	add	x1, x1, #0xe98
   41a0c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   41a10:	add	x0, x0, #0xe0
   41a14:	bl	35ac0 <__assert_fail@plt>

0000000000041a18 <aarch64_is_destructive_by_operands@@Base>:
   41a18:	ldr	w2, [x0, #32]
   41a1c:	add	x0, x0, #0x24
   41a20:	cbz	w2, 41a48 <aarch64_is_destructive_by_operands@@Base+0x30>
   41a24:	ldr	w1, [x0]
   41a28:	cbz	w1, 41a40 <aarch64_is_destructive_by_operands@@Base+0x28>
   41a2c:	add	x0, x0, #0x4
   41a30:	cmp	w2, w1
   41a34:	b.ne	41a24 <aarch64_is_destructive_by_operands@@Base+0xc>  // b.any
   41a38:	mov	w0, #0x1                   	// #1
   41a3c:	b	41a4c <aarch64_is_destructive_by_operands@@Base+0x34>
   41a40:	mov	w0, #0x0                   	// #0
   41a44:	b	41a4c <aarch64_is_destructive_by_operands@@Base+0x34>
   41a48:	mov	w0, #0x0                   	// #0
   41a4c:	ret

0000000000041a50 <aarch64_num_of_operands@@Base>:
   41a50:	mov	x1, #0x0                   	// #0
   41a54:	add	x3, x0, #0x1c
   41a58:	mov	w0, w1
   41a5c:	add	x1, x1, #0x1
   41a60:	ldr	w2, [x3, x1, lsl #2]
   41a64:	cbnz	w2, 41a58 <aarch64_num_of_operands@@Base+0x8>
   41a68:	cmp	w0, #0x6
   41a6c:	b.hi	41a74 <aarch64_num_of_operands@@Base+0x24>  // b.pmore
   41a70:	ret
   41a74:	stp	x29, x30, [sp, #-16]!
   41a78:	mov	x29, sp
   41a7c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   41a80:	add	x3, x3, #0x78
   41a84:	add	x3, x3, #0x100
   41a88:	mov	w2, #0x372                 	// #882
   41a8c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   41a90:	add	x1, x1, #0xe98
   41a94:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   41a98:	add	x0, x0, #0x110
   41a9c:	bl	35ac0 <__assert_fail@plt>

0000000000041aa0 <aarch64_find_best_match@@Base>:
   41aa0:	stp	x29, x30, [sp, #-112]!
   41aa4:	mov	x29, sp
   41aa8:	stp	x21, x22, [sp, #32]
   41aac:	stp	x23, x24, [sp, #48]
   41ab0:	stp	x25, x26, [sp, #64]
   41ab4:	stp	x27, x28, [sp, #80]
   41ab8:	mov	x26, x0
   41abc:	mov	x22, x1
   41ac0:	mov	w23, w2
   41ac4:	mov	x27, x3
   41ac8:	ldr	x0, [x0, #8]
   41acc:	bl	35170 <aarch64_num_of_operands@plt>
   41ad0:	cbz	w0, 41c5c <aarch64_find_best_match@@Base+0x1bc>
   41ad4:	stp	x19, x20, [sp, #16]
   41ad8:	mov	w24, w0
   41adc:	cmp	w23, #0x0
   41ae0:	sub	w0, w0, #0x1
   41ae4:	ccmp	w24, w23, #0x4, ge  // ge = tcont
   41ae8:	csel	w23, w0, w23, le
   41aec:	add	x21, x22, #0x6
   41af0:	mov	w25, #0x0                   	// #0
   41af4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   41af8:	ldr	x28, [x0, #4032]
   41afc:	str	x28, [sp, #104]
   41b00:	b	41b4c <aarch64_find_best_match@@Base+0xac>
   41b04:	cmp	w1, #0x4
   41b08:	b.ne	41b38 <aarch64_find_best_match@@Base+0x98>  // b.any
   41b0c:	cmp	w2, #0x2
   41b10:	b.ne	41b38 <aarch64_find_best_match@@Base+0x98>  // b.any
   41b14:	ldr	w0, [x19]
   41b18:	add	x0, x0, x0, lsl #1
   41b1c:	ldr	x1, [sp, #104]
   41b20:	add	x0, x1, x0, lsl #4
   41b24:	ldr	w0, [x0, #16]
   41b28:	ubfx	x0, x0, #4, #1
   41b2c:	b	41ba0 <aarch64_find_best_match@@Base+0x100>
   41b30:	cmp	w2, #0x3
   41b34:	b.eq	41b74 <aarch64_find_best_match@@Base+0xd4>  // b.none
   41b38:	add	w25, w25, #0x1
   41b3c:	add	x22, x22, #0x6
   41b40:	add	x21, x21, #0x6
   41b44:	cmp	w25, #0xa
   41b48:	b.eq	41c84 <aarch64_find_best_match@@Base+0x1e4>  // b.none
   41b4c:	mov	x0, x22
   41b50:	ldrb	w1, [x0]
   41b54:	cbnz	w1, 41c90 <aarch64_find_best_match@@Base+0x1f0>
   41b58:	add	x0, x0, #0x1
   41b5c:	cmp	x0, x21
   41b60:	b.ne	41b50 <aarch64_find_best_match@@Base+0xb0>  // b.any
   41b64:	mov	w0, #0x0                   	// #0
   41b68:	cbz	w25, 41c50 <aarch64_find_best_match@@Base+0x1b0>
   41b6c:	ldp	x19, x20, [sp, #16]
   41b70:	b	41c60 <aarch64_find_best_match@@Base+0x1c0>
   41b74:	bl	35740 <aarch64_stack_pointer_p@plt>
   41b78:	cmp	w0, #0x0
   41b7c:	cset	w0, ne  // ne = any
   41b80:	b	41ba0 <aarch64_find_best_match@@Base+0x100>
   41b84:	cmp	w2, #0x1
   41b88:	b.ne	41b38 <aarch64_find_best_match@@Base+0x98>  // b.any
   41b8c:	ldr	w0, [x19]
   41b90:	add	x0, x0, x0, lsl #1
   41b94:	add	x0, x28, x0, lsl #4
   41b98:	ldr	w0, [x0, #16]
   41b9c:	ubfx	x0, x0, #4, #1
   41ba0:	cbz	w0, 41b38 <aarch64_find_best_match@@Base+0x98>
   41ba4:	add	w0, w20, #0x1
   41ba8:	add	x19, x19, #0x38
   41bac:	cmp	w24, w0
   41bb0:	add	x20, x20, #0x1
   41bb4:	ccmp	w23, w0, #0x1, gt
   41bb8:	b.lt	41c08 <aarch64_find_best_match@@Base+0x168>  // b.tstop
   41bbc:	mov	x0, x19
   41bc0:	ldrb	w1, [x19, #4]
   41bc4:	cbz	w1, 41ba4 <aarch64_find_best_match@@Base+0x104>
   41bc8:	ldrb	w2, [x22, x20]
   41bcc:	cmp	w1, w2
   41bd0:	b.eq	41ba4 <aarch64_find_best_match@@Base+0x104>  // b.none
   41bd4:	cmp	w1, #0x3
   41bd8:	b.eq	41b84 <aarch64_find_best_match@@Base+0xe4>  // b.none
   41bdc:	b.hi	41b04 <aarch64_find_best_match@@Base+0x64>  // b.pmore
   41be0:	cmp	w1, #0x1
   41be4:	b.eq	41b30 <aarch64_find_best_match@@Base+0x90>  // b.none
   41be8:	cmp	w1, #0x2
   41bec:	b.ne	41b38 <aarch64_find_best_match@@Base+0x98>  // b.any
   41bf0:	cmp	w2, #0x4
   41bf4:	b.ne	41b38 <aarch64_find_best_match@@Base+0x98>  // b.any
   41bf8:	bl	35740 <aarch64_stack_pointer_p@plt>
   41bfc:	cmp	w0, #0x0
   41c00:	cset	w0, ne  // ne = any
   41c04:	b	41ba0 <aarch64_find_best_match@@Base+0x100>
   41c08:	mov	w2, w23
   41c0c:	mov	x0, #0x0                   	// #0
   41c10:	ldrb	w1, [x22, x0]
   41c14:	strb	w1, [x27, x0]
   41c18:	cmp	x0, x2
   41c1c:	add	x0, x0, #0x1
   41c20:	b.ne	41c10 <aarch64_find_best_match@@Base+0x170>  // b.any
   41c24:	add	w0, w23, #0x1
   41c28:	cmp	w0, #0x5
   41c2c:	b.gt	41c78 <aarch64_find_best_match@@Base+0x1d8>
   41c30:	sxtw	x0, w0
   41c34:	strb	wzr, [x27, x0]
   41c38:	add	x0, x0, #0x1
   41c3c:	cmp	w0, #0x5
   41c40:	b.le	41c34 <aarch64_find_best_match@@Base+0x194>
   41c44:	mov	w0, #0x1                   	// #1
   41c48:	ldp	x19, x20, [sp, #16]
   41c4c:	b	41c60 <aarch64_find_best_match@@Base+0x1c0>
   41c50:	tbz	w23, #31, 41c08 <aarch64_find_best_match@@Base+0x168>
   41c54:	mov	w0, #0x0                   	// #0
   41c58:	b	41c30 <aarch64_find_best_match@@Base+0x190>
   41c5c:	mov	w0, #0x1                   	// #1
   41c60:	ldp	x21, x22, [sp, #32]
   41c64:	ldp	x23, x24, [sp, #48]
   41c68:	ldp	x25, x26, [sp, #64]
   41c6c:	ldp	x27, x28, [sp, #80]
   41c70:	ldp	x29, x30, [sp], #112
   41c74:	ret
   41c78:	mov	w0, #0x1                   	// #1
   41c7c:	ldp	x19, x20, [sp, #16]
   41c80:	b	41c60 <aarch64_find_best_match@@Base+0x1c0>
   41c84:	mov	w0, #0x0                   	// #0
   41c88:	ldp	x19, x20, [sp, #16]
   41c8c:	b	41c60 <aarch64_find_best_match@@Base+0x1c0>
   41c90:	cmp	w24, #0x0
   41c94:	ccmp	w23, #0x0, #0x1, gt
   41c98:	b.lt	41c50 <aarch64_find_best_match@@Base+0x1b0>  // b.tstop
   41c9c:	add	x19, x26, #0x18
   41ca0:	mov	x20, #0x0                   	// #0
   41ca4:	b	41bbc <aarch64_find_best_match@@Base+0x11c>

0000000000041ca8 <aarch64_wide_constant_p@@Base>:
   41ca8:	mov	x3, x0
   41cac:	cbz	w1, 41ccc <aarch64_wide_constant_p@@Base+0x24>
   41cb0:	lsr	x4, x0, #32
   41cb4:	cmp	x4, #0x0
   41cb8:	mov	w0, #0x0                   	// #0
   41cbc:	mov	x5, #0xffffffff            	// #4294967295
   41cc0:	ccmp	x4, x5, #0x4, ne  // ne = any
   41cc4:	b.ne	41d10 <aarch64_wide_constant_p@@Base+0x68>  // b.any
   41cc8:	and	x3, x3, x5
   41ccc:	tst	x3, #0xffffffffffff0000
   41cd0:	b.eq	41d00 <aarch64_wide_constant_p@@Base+0x58>  // b.none
   41cd4:	tst	x3, #0xffffffff0000ffff
   41cd8:	b.eq	41d14 <aarch64_wide_constant_p@@Base+0x6c>  // b.none
   41cdc:	mov	w0, #0x0                   	// #0
   41ce0:	cbnz	w1, 41d10 <aarch64_wide_constant_p@@Base+0x68>
   41ce4:	tst	x3, #0xffff0000ffffffff
   41ce8:	b.eq	41d1c <aarch64_wide_constant_p@@Base+0x74>  // b.none
   41cec:	mov	w0, w1
   41cf0:	mov	w1, #0x30                  	// #48
   41cf4:	tst	x3, #0xffffffffffff
   41cf8:	b.eq	41d04 <aarch64_wide_constant_p@@Base+0x5c>  // b.none
   41cfc:	b	41d10 <aarch64_wide_constant_p@@Base+0x68>
   41d00:	mov	w1, #0x0                   	// #0
   41d04:	mov	w0, #0x1                   	// #1
   41d08:	cbz	x2, 41d10 <aarch64_wide_constant_p@@Base+0x68>
   41d0c:	str	w1, [x2]
   41d10:	ret
   41d14:	mov	w1, #0x10                  	// #16
   41d18:	b	41d04 <aarch64_wide_constant_p@@Base+0x5c>
   41d1c:	mov	w1, #0x20                  	// #32
   41d20:	b	41d04 <aarch64_wide_constant_p@@Base+0x5c>

0000000000041d24 <aarch64_logical_immediate_p@@Base>:
   41d24:	stp	x29, x30, [sp, #-96]!
   41d28:	mov	x29, sp
   41d2c:	stp	x19, x20, [sp, #16]
   41d30:	stp	x21, x22, [sp, #32]
   41d34:	stp	x23, x24, [sp, #48]
   41d38:	mov	x20, x0
   41d3c:	mov	w19, w1
   41d40:	mov	x21, x2
   41d44:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   41d48:	ldr	w15, [x0, #1696]
   41d4c:	cbz	w15, 41db8 <aarch64_logical_immediate_p@@Base+0x94>
   41d50:	lsl	w0, w19, #2
   41d54:	mov	x2, #0xffffffffffffffff    	// #-1
   41d58:	lsl	x2, x2, x0
   41d5c:	lsl	x2, x2, x0
   41d60:	bic	x1, x20, x2
   41d64:	tst	x2, x20
   41d68:	b.eq	41d78 <aarch64_logical_immediate_p@@Base+0x54>  // b.none
   41d6c:	mov	w0, #0x0                   	// #0
   41d70:	bics	xzr, x2, x20
   41d74:	b.ne	41fb0 <aarch64_logical_immediate_p@@Base+0x28c>  // b.any
   41d78:	str	x25, [sp, #64]
   41d7c:	lsl	w19, w19, #3
   41d80:	cmp	w19, #0x3f
   41d84:	b.gt	41d9c <aarch64_logical_immediate_p@@Base+0x78>
   41d88:	lsl	x0, x1, x19
   41d8c:	orr	x1, x1, x0
   41d90:	lsl	w19, w19, #1
   41d94:	cmp	w19, #0x3f
   41d98:	b.le	41d88 <aarch64_logical_immediate_p@@Base+0x64>
   41d9c:	str	x1, [sp, #80]
   41da0:	mov	x22, #0x14d6                	// #5334
   41da4:	mov	x20, #0x0                   	// #0
   41da8:	adrp	x24, fa000 <aarch64_opcode_table@@Base+0x55a20>
   41dac:	add	x24, x24, #0x6a8
   41db0:	add	x25, sp, #0x50
   41db4:	b	41f74 <aarch64_logical_immediate_p@@Base+0x250>
   41db8:	mov	w1, w15
   41dbc:	mov	w5, #0x1                   	// #1
   41dc0:	mov	w16, w5
   41dc4:	mov	x12, #0x1                   	// #1
   41dc8:	adrp	x14, fa000 <aarch64_opcode_table@@Base+0x55a20>
   41dcc:	add	x14, x14, #0x6a8
   41dd0:	mov	w30, #0x3f                  	// #63
   41dd4:	mov	w22, #0x0                   	// #0
   41dd8:	mov	x18, #0xffffffffffffffff    	// #-1
   41ddc:	mov	w17, #0x5                   	// #5
   41de0:	b	41eb8 <aarch64_logical_immediate_p@@Base+0x194>
   41de4:	cmp	w5, #0x1
   41de8:	b.ne	41e70 <aarch64_logical_immediate_p@@Base+0x14c>  // b.any
   41dec:	orr	x3, x3, x3, lsl #2
   41df0:	orr	x3, x3, x3, lsl #4
   41df4:	b	41e60 <aarch64_logical_immediate_p@@Base+0x13c>
   41df8:	cmp	w5, #0x5
   41dfc:	b.eq	41e68 <aarch64_logical_immediate_p@@Base+0x144>  // b.none
   41e00:	cmp	w5, #0x6
   41e04:	b.ne	41e70 <aarch64_logical_immediate_p@@Base+0x14c>  // b.any
   41e08:	str	x3, [x0]
   41e0c:	orr	w1, w23, w4, lsl #6
   41e10:	str	w1, [x0, #8]
   41e14:	add	w1, w24, w4
   41e18:	add	w4, w4, #0x1
   41e1c:	cmp	w8, w4
   41e20:	b.eq	41e78 <aarch64_logical_immediate_p@@Base+0x154>  // b.none
   41e24:	mov	x3, x6
   41e28:	cbz	w4, 41e40 <aarch64_logical_immediate_p@@Base+0x11c>
   41e2c:	lsr	x3, x6, x4
   41e30:	sub	w7, w8, w4
   41e34:	lsl	x7, x6, x7
   41e38:	and	x7, x7, x11
   41e3c:	orr	x3, x3, x7
   41e40:	add	x0, x0, #0x10
   41e44:	cmp	w5, #0x4
   41e48:	b.eq	41e64 <aarch64_logical_immediate_p@@Base+0x140>  // b.none
   41e4c:	b.hi	41df8 <aarch64_logical_immediate_p@@Base+0xd4>  // b.pmore
   41e50:	cmp	w5, #0x2
   41e54:	b.eq	41df0 <aarch64_logical_immediate_p@@Base+0xcc>  // b.none
   41e58:	cmp	w5, #0x3
   41e5c:	b.ne	41de4 <aarch64_logical_immediate_p@@Base+0xc0>  // b.any
   41e60:	orr	x3, x3, x3, lsl #8
   41e64:	orr	x3, x3, x3, lsl #16
   41e68:	orr	x3, x3, x3, lsl #32
   41e6c:	b	41e08 <aarch64_logical_immediate_p@@Base+0xe4>
   41e70:	str	x25, [sp, #64]
   41e74:	bl	35670 <abort@plt>
   41e78:	add	w2, w2, #0x1
   41e7c:	add	w9, w9, #0x1
   41e80:	cmp	w2, w13
   41e84:	b.cs	41eac <aarch64_logical_immediate_p@@Base+0x188>  // b.hs, b.nlast
   41e88:	cbz	w8, 41e78 <aarch64_logical_immediate_p@@Base+0x154>
   41e8c:	lsl	x6, x12, x9
   41e90:	sub	x6, x6, #0x1
   41e94:	add	x0, x14, w1, sxtw #4
   41e98:	mov	x3, x6
   41e9c:	mov	w4, #0x0                   	// #0
   41ea0:	orr	w23, w10, w2
   41ea4:	add	w24, w1, #0x1
   41ea8:	b	41e44 <aarch64_logical_immediate_p@@Base+0x120>
   41eac:	add	w5, w5, #0x1
   41eb0:	cmp	w5, #0x7
   41eb4:	b.eq	41f10 <aarch64_logical_immediate_p@@Base+0x1ec>  // b.none
   41eb8:	lsl	w8, w16, w5
   41ebc:	cmp	w5, #0x6
   41ec0:	b.eq	41efc <aarch64_logical_immediate_p@@Base+0x1d8>  // b.none
   41ec4:	lsl	x11, x12, x8
   41ec8:	sub	x11, x11, #0x1
   41ecc:	sub	w10, w17, w5
   41ed0:	lsl	w10, w12, w10
   41ed4:	sub	w10, w10, #0x1
   41ed8:	add	w0, w5, #0x1
   41edc:	lsl	w0, w10, w0
   41ee0:	mov	w10, w15
   41ee4:	subs	w13, w8, #0x1
   41ee8:	b.eq	41fe8 <aarch64_logical_immediate_p@@Base+0x2c4>  // b.none
   41eec:	orr	w10, w0, w10, lsl #12
   41ef0:	mov	w9, #0x1                   	// #1
   41ef4:	mov	w2, #0x0                   	// #0
   41ef8:	b	41e88 <aarch64_logical_immediate_p@@Base+0x164>
   41efc:	mov	w13, w30
   41f00:	mov	w10, w16
   41f04:	mov	w0, w22
   41f08:	mov	x11, x18
   41f0c:	b	41eec <aarch64_logical_immediate_p@@Base+0x1c8>
   41f10:	mov	w0, #0x14d6                	// #5334
   41f14:	cmp	w1, w0
   41f18:	b.ne	41f48 <aarch64_logical_immediate_p@@Base+0x224>  // b.any
   41f1c:	adrp	x3, 40000 <aarch64_ext_sve_asimm@@Base+0x70>
   41f20:	add	x3, x3, #0xea4
   41f24:	mov	x2, #0x10                  	// #16
   41f28:	sxtw	x1, w1
   41f2c:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   41f30:	add	x0, x0, #0x6a8
   41f34:	bl	35270 <qsort@plt>
   41f38:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   41f3c:	mov	w1, #0x1                   	// #1
   41f40:	str	w1, [x0, #1696]
   41f44:	b	41d50 <aarch64_logical_immediate_p@@Base+0x2c>
   41f48:	str	x25, [sp, #64]
   41f4c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   41f50:	add	x3, x3, #0x78
   41f54:	add	x3, x3, #0x118
   41f58:	mov	w2, #0x4c9                 	// #1225
   41f5c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   41f60:	add	x1, x1, #0xe98
   41f64:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   41f68:	add	x0, x0, #0x138
   41f6c:	bl	35ac0 <__assert_fail@plt>
   41f70:	mov	x22, x19
   41f74:	cmp	x22, x20
   41f78:	b.ls	41fa8 <aarch64_logical_immediate_p@@Base+0x284>  // b.plast
   41f7c:	add	x19, x22, x20
   41f80:	lsr	x19, x19, #1
   41f84:	add	x23, x24, x19, lsl #4
   41f88:	mov	x1, x23
   41f8c:	mov	x0, x25
   41f90:	bl	40ea4 <print_aarch64_disassembler_options@@Base+0xe4>
   41f94:	tbnz	w0, #31, 41f70 <aarch64_logical_immediate_p@@Base+0x24c>
   41f98:	cmp	w0, #0x0
   41f9c:	b.le	41fc4 <aarch64_logical_immediate_p@@Base+0x2a0>
   41fa0:	add	x20, x19, #0x1
   41fa4:	b	41f74 <aarch64_logical_immediate_p@@Base+0x250>
   41fa8:	mov	w0, #0x0                   	// #0
   41fac:	ldr	x25, [sp, #64]
   41fb0:	ldp	x19, x20, [sp, #16]
   41fb4:	ldp	x21, x22, [sp, #32]
   41fb8:	ldp	x23, x24, [sp, #48]
   41fbc:	ldp	x29, x30, [sp], #96
   41fc0:	ret
   41fc4:	cbz	x21, 41fdc <aarch64_logical_immediate_p@@Base+0x2b8>
   41fc8:	ldr	w0, [x23, #8]
   41fcc:	str	w0, [x21]
   41fd0:	mov	w0, #0x1                   	// #1
   41fd4:	ldr	x25, [sp, #64]
   41fd8:	b	41fb0 <aarch64_logical_immediate_p@@Base+0x28c>
   41fdc:	mov	w0, #0x1                   	// #1
   41fe0:	ldr	x25, [sp, #64]
   41fe4:	b	41fb0 <aarch64_logical_immediate_p@@Base+0x28c>
   41fe8:	add	w5, w5, #0x1
   41fec:	b	41eb8 <aarch64_logical_immediate_p@@Base+0x194>

0000000000041ff0 <aarch64_shrink_expanded_imm8@@Base>:
   41ff0:	mov	x3, x0
   41ff4:	mov	w0, #0x0                   	// #0
   41ff8:	mov	w2, #0x0                   	// #0
   41ffc:	mov	w4, #0x1                   	// #1
   42000:	b	42018 <aarch64_shrink_expanded_imm8@@Base+0x28>
   42004:	lsl	w1, w4, w2
   42008:	orr	w0, w0, w1
   4200c:	add	w2, w2, #0x1
   42010:	cmp	w2, #0x8
   42014:	b.eq	42034 <aarch64_shrink_expanded_imm8@@Base+0x44>  // b.none
   42018:	lsl	w1, w2, #3
   4201c:	lsr	x1, x3, x1
   42020:	and	w1, w1, #0xff
   42024:	cmp	w1, #0xff
   42028:	b.eq	42004 <aarch64_shrink_expanded_imm8@@Base+0x14>  // b.none
   4202c:	cbz	w1, 4200c <aarch64_shrink_expanded_imm8@@Base+0x1c>
   42030:	mov	w0, #0xffffffff            	// #-1
   42034:	ret

0000000000042038 <aarch64_replace_opcode@@Base>:
   42038:	mov	x4, x0
   4203c:	ldr	x0, [x0, #8]
   42040:	str	x1, [x4, #8]
   42044:	add	x1, x1, #0x20
   42048:	add	x2, x4, #0x18
   4204c:	add	x4, x4, #0x168
   42050:	ldr	w3, [x1]
   42054:	str	w3, [x2]
   42058:	cbz	w3, 4206c <aarch64_replace_opcode@@Base+0x34>
   4205c:	add	x1, x1, #0x4
   42060:	add	x2, x2, #0x38
   42064:	cmp	x2, x4
   42068:	b.ne	42050 <aarch64_replace_opcode@@Base+0x18>  // b.any
   4206c:	ret

0000000000042070 <aarch64_operand_index@@Base>:
   42070:	mov	x4, x0
   42074:	mov	x2, #0x0                   	// #0
   42078:	mov	w0, w2
   4207c:	ldr	w3, [x4, x2, lsl #2]
   42080:	cmp	w3, w1
   42084:	b.eq	4209c <aarch64_operand_index@@Base+0x2c>  // b.none
   42088:	cbz	w3, 420a0 <aarch64_operand_index@@Base+0x30>
   4208c:	add	x2, x2, #0x1
   42090:	cmp	x2, #0x6
   42094:	b.ne	42078 <aarch64_operand_index@@Base+0x8>  // b.any
   42098:	mov	w0, #0xffffffff            	// #-1
   4209c:	ret
   420a0:	mov	w0, #0xffffffff            	// #-1
   420a4:	b	4209c <aarch64_operand_index@@Base+0x2c>

00000000000420a8 <aarch64_sys_reg_deprecated_p@@Base>:
   420a8:	ldr	w0, [x0, #12]
   420ac:	and	w0, w0, #0x1
   420b0:	ret

00000000000420b4 <aarch64_print_operand@@Base>:
   420b4:	stp	x29, x30, [sp, #-112]!
   420b8:	mov	x29, sp
   420bc:	stp	x19, x20, [sp, #16]
   420c0:	stp	x21, x22, [sp, #32]
   420c4:	stp	x23, x24, [sp, #48]
   420c8:	mov	x19, x0
   420cc:	mov	x20, x1
   420d0:	mov	x23, x4
   420d4:	mov	w22, w5
   420d8:	sbfiz	x0, x5, #3, #32
   420dc:	sub	x0, x0, w5, sxtw
   420e0:	lsl	x0, x0, #3
   420e4:	add	x21, x4, x0
   420e8:	strb	wzr, [x19]
   420ec:	cbz	x6, 420f4 <aarch64_print_operand@@Base+0x40>
   420f0:	str	wzr, [x6]
   420f4:	ldr	w1, [x23, x0]
   420f8:	sub	w0, w1, #0x1
   420fc:	cmp	w0, #0xce
   42100:	b.hi	4331c <aarch64_print_operand@@Base+0x1268>  // b.pmore
   42104:	adrp	x4, 5f000 <xexit@@Base+0x674c>
   42108:	add	x4, x4, #0xd00
   4210c:	ldrh	w0, [x4, w0, uxtw #1]
   42110:	adr	x4, 4211c <aarch64_print_operand@@Base+0x68>
   42114:	add	x0, x4, w0, sxth #2
   42118:	br	x0
   4211c:	cmp	w1, #0x9
   42120:	b.eq	42190 <aarch64_print_operand@@Base+0xdc>  // b.none
   42124:	ldr	x0, [x3, #120]
   42128:	add	w22, w22, #0x1
   4212c:	ubfx	x1, x0, #12, #3
   42130:	cmp	x22, x1
   42134:	b.eq	4219c <aarch64_print_operand@@Base+0xe8>  // b.none
   42138:	ldrb	w0, [x21, #4]
   4213c:	sub	w1, w0, #0x1
   42140:	and	w1, w1, #0xff
   42144:	cmp	w1, #0x1
   42148:	b.hi	421b0 <aarch64_print_operand@@Base+0xfc>  // b.pmore
   4214c:	ldr	w21, [x21, #16]
   42150:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42154:	and	w0, w0, #0xff
   42158:	cmp	w0, #0x4
   4215c:	cset	x0, ne  // ne = any
   42160:	lsl	x0, x0, #5
   42164:	add	x0, x0, w21, sxtw
   42168:	add	x0, x0, #0x40
   4216c:	adrp	x1, 89000 <_sch_istable@@Base+0x13f58>
   42170:	add	x1, x1, #0x3d0
   42174:	ldr	x3, [x1, x0, lsl #3]
   42178:	adrp	x2, 6a000 <fields@@Base+0x9c40>
   4217c:	add	x2, x2, #0x588
   42180:	mov	x1, x20
   42184:	mov	x0, x19
   42188:	bl	35380 <snprintf@plt>
   4218c:	b	42508 <aarch64_print_operand@@Base+0x454>
   42190:	ldrb	w0, [x21, #48]
   42194:	tbz	w0, #1, 42508 <aarch64_print_operand@@Base+0x454>
   42198:	b	42138 <aarch64_print_operand@@Base+0x84>
   4219c:	ubfx	w0, w0, #15, #5
   421a0:	ldr	w1, [x21, #16]
   421a4:	cmp	w1, w0
   421a8:	b.ne	42138 <aarch64_print_operand@@Base+0x84>  // b.any
   421ac:	b	42508 <aarch64_print_operand@@Base+0x454>
   421b0:	stp	x25, x26, [sp, #64]
   421b4:	stp	x27, x28, [sp, #80]
   421b8:	adrp	x3, 60000 <xexit@@Base+0x774c>
   421bc:	add	x3, x3, #0x78
   421c0:	add	x3, x3, #0x130
   421c4:	mov	w2, #0xc6d                 	// #3181
   421c8:	adrp	x1, 59000 <xexit@@Base+0x74c>
   421cc:	add	x1, x1, #0xe98
   421d0:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   421d4:	add	x0, x0, #0x168
   421d8:	bl	35ac0 <__assert_fail@plt>
   421dc:	ldrb	w0, [x21, #4]
   421e0:	sub	w1, w0, #0x1
   421e4:	and	w1, w1, #0xff
   421e8:	cmp	w1, #0x3
   421ec:	b.hi	42230 <aarch64_print_operand@@Base+0x17c>  // b.pmore
   421f0:	ldr	w21, [x21, #16]
   421f4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   421f8:	and	w0, w0, #0xff
   421fc:	cmp	w0, #0x4
   42200:	cset	x0, ne  // ne = any
   42204:	lsl	x0, x0, #5
   42208:	add	x21, x0, w21, sxtw
   4220c:	adrp	x0, 89000 <_sch_istable@@Base+0x13f58>
   42210:	add	x0, x0, #0x3d0
   42214:	ldr	x3, [x0, x21, lsl #3]
   42218:	adrp	x2, 6a000 <fields@@Base+0x9c40>
   4221c:	add	x2, x2, #0x588
   42220:	mov	x1, x20
   42224:	mov	x0, x19
   42228:	bl	35380 <snprintf@plt>
   4222c:	b	42508 <aarch64_print_operand@@Base+0x454>
   42230:	stp	x25, x26, [sp, #64]
   42234:	stp	x27, x28, [sp, #80]
   42238:	adrp	x3, 60000 <xexit@@Base+0x774c>
   4223c:	add	x3, x3, #0x78
   42240:	add	x3, x3, #0x130
   42244:	mov	w2, #0xc78                 	// #3192
   42248:	adrp	x1, 59000 <xexit@@Base+0x74c>
   4224c:	add	x1, x1, #0xe98
   42250:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   42254:	add	x0, x0, #0x1b8
   42258:	bl	35ac0 <__assert_fail@plt>
   4225c:	ldr	w24, [x21, #32]
   42260:	sub	w0, w22, #0x1
   42264:	cmp	w0, #0x1
   42268:	b.hi	422e0 <aarch64_print_operand@@Base+0x22c>  // b.pmore
   4226c:	mov	x0, x23
   42270:	bl	35740 <aarch64_stack_pointer_p@plt>
   42274:	cbnz	w0, 42318 <aarch64_print_operand@@Base+0x264>
   42278:	cmp	w22, #0x2
   4227c:	b.eq	4230c <aarch64_print_operand@@Base+0x258>  // b.none
   42280:	ldr	x0, [x21, #40]
   42284:	cbnz	x0, 4233c <aarch64_print_operand@@Base+0x288>
   42288:	ldr	w22, [x21, #16]
   4228c:	ldrb	w0, [x21, #4]
   42290:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42294:	and	w0, w0, #0xff
   42298:	ubfiz	x24, x24, #4, #32
   4229c:	cmp	w0, #0x4
   422a0:	cset	x0, ne  // ne = any
   422a4:	lsl	x0, x0, #5
   422a8:	add	x0, x0, w22, sxtw
   422ac:	add	x0, x0, #0x40
   422b0:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   422b4:	ldr	x1, [x1, #3904]
   422b8:	ldr	x4, [x1, x24]
   422bc:	adrp	x1, 89000 <_sch_istable@@Base+0x13f58>
   422c0:	add	x1, x1, #0x3d0
   422c4:	ldr	x3, [x1, x0, lsl #3]
   422c8:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   422cc:	add	x2, x2, #0x288
   422d0:	mov	x1, x20
   422d4:	mov	x0, x19
   422d8:	bl	35380 <snprintf@plt>
   422dc:	b	42508 <aarch64_print_operand@@Base+0x454>
   422e0:	stp	x25, x26, [sp, #64]
   422e4:	stp	x27, x28, [sp, #80]
   422e8:	adrp	x3, 60000 <xexit@@Base+0x774c>
   422ec:	add	x3, x3, #0x78
   422f0:	add	x3, x3, #0x130
   422f4:	mov	w2, #0xc82                 	// #3202
   422f8:	adrp	x1, 59000 <xexit@@Base+0x74c>
   422fc:	add	x1, x1, #0xe98
   42300:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   42304:	add	x0, x0, #0x260
   42308:	bl	35ac0 <__assert_fail@plt>
   4230c:	add	x0, x23, #0x38
   42310:	bl	35740 <aarch64_stack_pointer_p@plt>
   42314:	cbz	w0, 42280 <aarch64_print_operand@@Base+0x1cc>
   42318:	ldrb	w0, [x21, #4]
   4231c:	cmp	w0, #0x1
   42320:	b.eq	42398 <aarch64_print_operand@@Base+0x2e4>  // b.none
   42324:	cmp	w24, #0x9
   42328:	ccmp	w0, #0x2, #0x0, eq  // eq = none
   4232c:	b.ne	42280 <aarch64_print_operand@@Base+0x1cc>  // b.any
   42330:	ldr	x1, [x21, #40]
   42334:	mov	w24, #0x5                   	// #5
   42338:	cbz	x1, 423ac <aarch64_print_operand@@Base+0x2f8>
   4233c:	ldr	w22, [x21, #16]
   42340:	ldrb	w0, [x21, #4]
   42344:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42348:	and	w0, w0, #0xff
   4234c:	ubfiz	x24, x24, #4, #32
   42350:	cmp	w0, #0x4
   42354:	cset	x0, ne  // ne = any
   42358:	lsl	x0, x0, #5
   4235c:	add	x0, x0, w22, sxtw
   42360:	add	x0, x0, #0x40
   42364:	ldr	x5, [x21, #40]
   42368:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   4236c:	ldr	x1, [x1, #3904]
   42370:	ldr	x4, [x1, x24]
   42374:	adrp	x1, 89000 <_sch_istable@@Base+0x13f58>
   42378:	add	x1, x1, #0x3d0
   4237c:	ldr	x3, [x1, x0, lsl #3]
   42380:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42384:	add	x2, x2, #0x278
   42388:	mov	x1, x20
   4238c:	mov	x0, x19
   42390:	bl	35380 <snprintf@plt>
   42394:	b	42508 <aarch64_print_operand@@Base+0x454>
   42398:	ldrb	w1, [x23, #4]
   4239c:	cmp	w1, #0x1
   423a0:	ccmp	w24, #0x8, #0x0, eq  // eq = none
   423a4:	b.ne	42280 <aarch64_print_operand@@Base+0x1cc>  // b.any
   423a8:	b	42330 <aarch64_print_operand@@Base+0x27c>
   423ac:	ldr	w21, [x21, #16]
   423b0:	bl	35680 <aarch64_get_qualifier_esize@plt>
   423b4:	and	w0, w0, #0xff
   423b8:	cmp	w0, #0x4
   423bc:	cset	x0, ne  // ne = any
   423c0:	lsl	x0, x0, #5
   423c4:	add	x0, x0, w21, sxtw
   423c8:	add	x0, x0, #0x40
   423cc:	adrp	x1, 89000 <_sch_istable@@Base+0x13f58>
   423d0:	add	x1, x1, #0x3d0
   423d4:	ldr	x3, [x1, x0, lsl #3]
   423d8:	adrp	x2, 6a000 <fields@@Base+0x9c40>
   423dc:	add	x2, x2, #0x588
   423e0:	mov	x1, x20
   423e4:	mov	x0, x19
   423e8:	bl	35380 <snprintf@plt>
   423ec:	b	42508 <aarch64_print_operand@@Base+0x454>
   423f0:	ldrb	w0, [x21, #4]
   423f4:	sub	w1, w0, #0x1
   423f8:	and	w1, w1, #0xff
   423fc:	cmp	w1, #0x1
   42400:	b.hi	42474 <aarch64_print_operand@@Base+0x3c0>  // b.pmore
   42404:	ldr	x1, [x21, #40]
   42408:	cbnz	x1, 42418 <aarch64_print_operand@@Base+0x364>
   4240c:	ldr	w1, [x21, #32]
   42410:	cmp	w1, #0x5
   42414:	b.eq	424a0 <aarch64_print_operand@@Base+0x3ec>  // b.none
   42418:	ldr	w22, [x21, #16]
   4241c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42420:	and	w0, w0, #0xff
   42424:	ldr	w1, [x21, #32]
   42428:	lsl	x1, x1, #4
   4242c:	cmp	w0, #0x4
   42430:	cset	x0, ne  // ne = any
   42434:	lsl	x0, x0, #5
   42438:	add	x0, x0, w22, sxtw
   4243c:	add	x0, x0, #0x40
   42440:	ldr	x5, [x21, #40]
   42444:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   42448:	ldr	x2, [x2, #3904]
   4244c:	ldr	x4, [x2, x1]
   42450:	adrp	x1, 89000 <_sch_istable@@Base+0x13f58>
   42454:	add	x1, x1, #0x3d0
   42458:	ldr	x3, [x1, x0, lsl #3]
   4245c:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42460:	add	x2, x2, #0x278
   42464:	mov	x1, x20
   42468:	mov	x0, x19
   4246c:	bl	35380 <snprintf@plt>
   42470:	b	42508 <aarch64_print_operand@@Base+0x454>
   42474:	stp	x25, x26, [sp, #64]
   42478:	stp	x27, x28, [sp, #80]
   4247c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   42480:	add	x3, x3, #0x78
   42484:	add	x3, x3, #0x130
   42488:	mov	w2, #0xca1                 	// #3233
   4248c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   42490:	add	x1, x1, #0xe98
   42494:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   42498:	add	x0, x0, #0x168
   4249c:	bl	35ac0 <__assert_fail@plt>
   424a0:	ldr	w21, [x21, #16]
   424a4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   424a8:	and	w0, w0, #0xff
   424ac:	cmp	w0, #0x4
   424b0:	cset	x0, ne  // ne = any
   424b4:	lsl	x0, x0, #5
   424b8:	add	x0, x0, w21, sxtw
   424bc:	add	x0, x0, #0x40
   424c0:	adrp	x1, 89000 <_sch_istable@@Base+0x13f58>
   424c4:	add	x1, x1, #0x3d0
   424c8:	ldr	x3, [x1, x0, lsl #3]
   424cc:	adrp	x2, 6a000 <fields@@Base+0x9c40>
   424d0:	add	x2, x2, #0x588
   424d4:	mov	x1, x20
   424d8:	mov	x0, x19
   424dc:	bl	35380 <snprintf@plt>
   424e0:	b	42508 <aarch64_print_operand@@Base+0x454>
   424e4:	ldrb	w0, [x21, #4]
   424e8:	bl	353f0 <aarch64_get_qualifier_name@plt>
   424ec:	ldr	w4, [x21, #16]
   424f0:	mov	x3, x0
   424f4:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   424f8:	add	x2, x2, #0x290
   424fc:	mov	x1, x20
   42500:	mov	x0, x19
   42504:	bl	35380 <snprintf@plt>
   42508:	ldp	x19, x20, [sp, #16]
   4250c:	ldp	x21, x22, [sp, #32]
   42510:	ldp	x23, x24, [sp, #48]
   42514:	ldp	x29, x30, [sp], #112
   42518:	ret
   4251c:	ldr	w22, [x21, #16]
   42520:	ldrb	w0, [x21, #4]
   42524:	bl	353f0 <aarch64_get_qualifier_name@plt>
   42528:	mov	x4, x0
   4252c:	mov	w3, w22
   42530:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42534:	add	x2, x2, #0x298
   42538:	mov	x1, x20
   4253c:	mov	x0, x19
   42540:	bl	35380 <snprintf@plt>
   42544:	b	42508 <aarch64_print_operand@@Base+0x454>
   42548:	ldr	w22, [x21, #16]
   4254c:	ldrb	w0, [x21, #4]
   42550:	bl	353f0 <aarch64_get_qualifier_name@plt>
   42554:	ldr	x5, [x21, #24]
   42558:	mov	x4, x0
   4255c:	mov	w3, w22
   42560:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42564:	add	x2, x2, #0x2a0
   42568:	mov	x1, x20
   4256c:	mov	x0, x19
   42570:	bl	35380 <snprintf@plt>
   42574:	b	42508 <aarch64_print_operand@@Base+0x454>
   42578:	ldr	w3, [x21, #16]
   4257c:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42580:	add	x2, x2, #0x2b0
   42584:	mov	x1, x20
   42588:	mov	x0, x19
   4258c:	bl	35380 <snprintf@plt>
   42590:	b	42508 <aarch64_print_operand@@Base+0x454>
   42594:	adrp	x3, 5a000 <xexit@@Base+0x174c>
   42598:	add	x3, x3, #0x2c0
   4259c:	mov	x2, x21
   425a0:	mov	x1, x20
   425a4:	mov	x0, x19
   425a8:	bl	414a8 <aarch64_get_qualifier_name@@Base+0x18>
   425ac:	b	42508 <aarch64_print_operand@@Base+0x454>
   425b0:	ldrb	w0, [x21, #4]
   425b4:	cbz	w0, 425f0 <aarch64_print_operand@@Base+0x53c>
   425b8:	sub	w1, w0, #0x17
   425bc:	and	w1, w1, #0xff
   425c0:	cmp	w1, #0x1
   425c4:	b.ls	4260c <aarch64_print_operand@@Base+0x558>  // b.plast
   425c8:	ldr	w21, [x21, #16]
   425cc:	bl	353f0 <aarch64_get_qualifier_name@plt>
   425d0:	mov	x4, x0
   425d4:	mov	w3, w21
   425d8:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   425dc:	add	x2, x2, #0x2d8
   425e0:	mov	x1, x20
   425e4:	mov	x0, x19
   425e8:	bl	35380 <snprintf@plt>
   425ec:	b	42508 <aarch64_print_operand@@Base+0x454>
   425f0:	ldr	w3, [x21, #16]
   425f4:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   425f8:	add	x2, x2, #0x2c8
   425fc:	mov	x1, x20
   42600:	mov	x0, x19
   42604:	bl	35380 <snprintf@plt>
   42608:	b	42508 <aarch64_print_operand@@Base+0x454>
   4260c:	ldr	w21, [x21, #16]
   42610:	bl	353f0 <aarch64_get_qualifier_name@plt>
   42614:	mov	x4, x0
   42618:	mov	w3, w21
   4261c:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42620:	add	x2, x2, #0x2d0
   42624:	mov	x1, x20
   42628:	mov	x0, x19
   4262c:	bl	35380 <snprintf@plt>
   42630:	b	42508 <aarch64_print_operand@@Base+0x454>
   42634:	ldrb	w0, [x21, #4]
   42638:	cbnz	w0, 42658 <aarch64_print_operand@@Base+0x5a4>
   4263c:	ldr	w3, [x21, #16]
   42640:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42644:	add	x2, x2, #0x2e0
   42648:	mov	x1, x20
   4264c:	mov	x0, x19
   42650:	bl	35380 <snprintf@plt>
   42654:	b	42508 <aarch64_print_operand@@Base+0x454>
   42658:	ldr	w21, [x21, #16]
   4265c:	bl	353f0 <aarch64_get_qualifier_name@plt>
   42660:	mov	x4, x0
   42664:	mov	w3, w21
   42668:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   4266c:	add	x2, x2, #0x2e8
   42670:	mov	x1, x20
   42674:	mov	x0, x19
   42678:	bl	35380 <snprintf@plt>
   4267c:	b	42508 <aarch64_print_operand@@Base+0x454>
   42680:	adrp	x3, 5a000 <xexit@@Base+0x174c>
   42684:	add	x3, x3, #0x2f0
   42688:	mov	x2, x21
   4268c:	mov	x1, x20
   42690:	mov	x0, x19
   42694:	bl	414a8 <aarch64_get_qualifier_name@@Base+0x18>
   42698:	b	42508 <aarch64_print_operand@@Base+0x454>
   4269c:	ldr	w22, [x21, #16]
   426a0:	ldrb	w0, [x21, #4]
   426a4:	bl	353f0 <aarch64_get_qualifier_name@plt>
   426a8:	ldr	x5, [x21, #24]
   426ac:	mov	x4, x0
   426b0:	mov	w3, w22
   426b4:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   426b8:	add	x2, x2, #0x2f8
   426bc:	mov	x1, x20
   426c0:	mov	x0, x19
   426c4:	bl	35380 <snprintf@plt>
   426c8:	b	42508 <aarch64_print_operand@@Base+0x454>
   426cc:	ldr	x3, [x21, #16]
   426d0:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   426d4:	add	x2, x2, #0x308
   426d8:	mov	x1, x20
   426dc:	mov	x0, x19
   426e0:	bl	35380 <snprintf@plt>
   426e4:	b	42508 <aarch64_print_operand@@Base+0x454>
   426e8:	ldr	x3, [x21, #16]
   426ec:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   426f0:	add	x2, x2, #0x310
   426f4:	mov	x1, x20
   426f8:	mov	x0, x19
   426fc:	bl	35380 <snprintf@plt>
   42700:	b	42508 <aarch64_print_operand@@Base+0x454>
   42704:	ldr	s0, [x21, #16]
   42708:	fcvt	d0, s0
   4270c:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42710:	add	x2, x2, #0x318
   42714:	mov	x1, x20
   42718:	mov	x0, x19
   4271c:	bl	35380 <snprintf@plt>
   42720:	b	42508 <aarch64_print_operand@@Base+0x454>
   42724:	ldr	x0, [x3, #120]
   42728:	ubfx	x1, x0, #12, #3
   4272c:	add	w22, w22, #0x1
   42730:	cmp	x1, x22
   42734:	b.eq	4276c <aarch64_print_operand@@Base+0x6b8>  // b.none
   42738:	ldr	x1, [x21, #16]
   4273c:	cmp	x1, #0x1f
   42740:	b.hi	42780 <aarch64_print_operand@@Base+0x6cc>  // b.pmore
   42744:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   42748:	ldr	x0, [x0, #3792]
   4274c:	ldr	x3, [x0, x1, lsl #3]
   42750:	cbz	x3, 427ac <aarch64_print_operand@@Base+0x6f8>
   42754:	adrp	x2, 6a000 <fields@@Base+0x9c40>
   42758:	add	x2, x2, #0x588
   4275c:	mov	x1, x20
   42760:	mov	x0, x19
   42764:	bl	35380 <snprintf@plt>
   42768:	b	42508 <aarch64_print_operand@@Base+0x454>
   4276c:	ubfx	x0, x0, #15, #5
   42770:	ldr	x1, [x21, #16]
   42774:	cmp	x1, x0
   42778:	b.ne	42738 <aarch64_print_operand@@Base+0x684>  // b.any
   4277c:	b	42508 <aarch64_print_operand@@Base+0x454>
   42780:	stp	x25, x26, [sp, #64]
   42784:	stp	x27, x28, [sp, #80]
   42788:	adrp	x3, 60000 <xexit@@Base+0x774c>
   4278c:	add	x3, x3, #0x78
   42790:	add	x3, x3, #0x130
   42794:	mov	w2, #0xd49                 	// #3401
   42798:	adrp	x1, 59000 <xexit@@Base+0x74c>
   4279c:	add	x1, x1, #0xe98
   427a0:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   427a4:	add	x0, x0, #0x320
   427a8:	bl	35ac0 <__assert_fail@plt>
   427ac:	mov	x3, x1
   427b0:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   427b4:	add	x2, x2, #0x310
   427b8:	mov	x1, x20
   427bc:	mov	x0, x19
   427c0:	bl	35380 <snprintf@plt>
   427c4:	b	42508 <aarch64_print_operand@@Base+0x454>
   427c8:	ldr	x0, [x3, #120]
   427cc:	ubfx	x1, x0, #12, #3
   427d0:	add	w22, w22, #0x1
   427d4:	cmp	x1, x22
   427d8:	b.eq	4284c <aarch64_print_operand@@Base+0x798>  // b.none
   427dc:	ldr	x1, [x21, #16]
   427e0:	cmp	x1, #0x1f
   427e4:	b.hi	42868 <aarch64_print_operand@@Base+0x7b4>  // b.pmore
   427e8:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   427ec:	ldr	x0, [x0, #3792]
   427f0:	ldr	x3, [x0, x1, lsl #3]
   427f4:	cbz	x3, 42894 <aarch64_print_operand@@Base+0x7e0>
   427f8:	adrp	x2, 6a000 <fields@@Base+0x9c40>
   427fc:	add	x2, x2, #0x588
   42800:	mov	x1, x20
   42804:	mov	x0, x19
   42808:	bl	35380 <snprintf@plt>
   4280c:	ldrb	w0, [x21, #36]
   42810:	tbz	w0, #0, 42508 <aarch64_print_operand@@Base+0x454>
   42814:	mov	x0, x19
   42818:	bl	350a0 <strlen@plt>
   4281c:	ldr	w1, [x21, #32]
   42820:	lsl	x1, x1, #4
   42824:	ldr	x4, [x21, #40]
   42828:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   4282c:	ldr	x2, [x2, #3904]
   42830:	ldr	x3, [x2, x1]
   42834:	adrp	x2, 59000 <xexit@@Base+0x74c>
   42838:	add	x2, x2, #0xf50
   4283c:	sub	x1, x20, x0
   42840:	add	x0, x19, x0
   42844:	bl	35380 <snprintf@plt>
   42848:	b	42508 <aarch64_print_operand@@Base+0x454>
   4284c:	ldrb	w1, [x21, #36]
   42850:	tbnz	w1, #0, 427dc <aarch64_print_operand@@Base+0x728>
   42854:	ubfx	x0, x0, #15, #5
   42858:	ldr	x1, [x21, #16]
   4285c:	cmp	x1, x0
   42860:	b.ne	427dc <aarch64_print_operand@@Base+0x728>  // b.any
   42864:	b	42508 <aarch64_print_operand@@Base+0x454>
   42868:	stp	x25, x26, [sp, #64]
   4286c:	stp	x27, x28, [sp, #80]
   42870:	adrp	x3, 60000 <xexit@@Base+0x774c>
   42874:	add	x3, x3, #0x78
   42878:	add	x3, x3, #0x130
   4287c:	mov	w2, #0xd56                 	// #3414
   42880:	adrp	x1, 59000 <xexit@@Base+0x74c>
   42884:	add	x1, x1, #0xe98
   42888:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   4288c:	add	x0, x0, #0x320
   42890:	bl	35ac0 <__assert_fail@plt>
   42894:	mov	x3, x1
   42898:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   4289c:	add	x2, x2, #0x310
   428a0:	mov	x1, x20
   428a4:	mov	x0, x19
   428a8:	bl	35380 <snprintf@plt>
   428ac:	b	4280c <aarch64_print_operand@@Base+0x758>
   428b0:	ldr	x1, [x21, #16]
   428b4:	cmp	x1, #0xf
   428b8:	b.hi	428e4 <aarch64_print_operand@@Base+0x830>  // b.pmore
   428bc:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   428c0:	ldr	x0, [x0, #4056]
   428c4:	ldr	x3, [x0, x1, lsl #3]
   428c8:	cbz	x3, 42910 <aarch64_print_operand@@Base+0x85c>
   428cc:	adrp	x2, 6a000 <fields@@Base+0x9c40>
   428d0:	add	x2, x2, #0x588
   428d4:	mov	x1, x20
   428d8:	mov	x0, x19
   428dc:	bl	35380 <snprintf@plt>
   428e0:	b	42508 <aarch64_print_operand@@Base+0x454>
   428e4:	stp	x25, x26, [sp, #64]
   428e8:	stp	x27, x28, [sp, #80]
   428ec:	adrp	x3, 60000 <xexit@@Base+0x774c>
   428f0:	add	x3, x3, #0x78
   428f4:	add	x3, x3, #0x130
   428f8:	mov	w2, #0xd66                 	// #3430
   428fc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   42900:	add	x1, x1, #0xe98
   42904:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   42908:	add	x0, x0, #0x358
   4290c:	bl	35ac0 <__assert_fail@plt>
   42910:	mov	x3, x1
   42914:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42918:	add	x2, x2, #0x310
   4291c:	mov	x1, x20
   42920:	mov	x0, x19
   42924:	bl	35380 <snprintf@plt>
   42928:	b	42508 <aarch64_print_operand@@Base+0x454>
   4292c:	ldrb	w0, [x23, #4]
   42930:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42934:	and	w0, w0, #0xff
   42938:	cmp	w0, #0x4
   4293c:	b.eq	42994 <aarch64_print_operand@@Base+0x8e0>  // b.none
   42940:	cmp	w0, #0x8
   42944:	b.ne	42968 <aarch64_print_operand@@Base+0x8b4>  // b.any
   42948:	ldr	x3, [x21, #16]
   4294c:	mov	x4, x3
   42950:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42954:	add	x2, x2, #0x3a0
   42958:	mov	x1, x20
   4295c:	mov	x0, x19
   42960:	bl	35380 <snprintf@plt>
   42964:	b	42508 <aarch64_print_operand@@Base+0x454>
   42968:	stp	x25, x26, [sp, #64]
   4296c:	stp	x27, x28, [sp, #80]
   42970:	adrp	x3, 60000 <xexit@@Base+0x774c>
   42974:	add	x3, x3, #0x78
   42978:	add	x3, x3, #0x130
   4297c:	mov	w2, #0xd7a                 	// #3450
   42980:	adrp	x1, 59000 <xexit@@Base+0x74c>
   42984:	add	x1, x1, #0xe98
   42988:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   4298c:	add	x0, x0, #0xb60
   42990:	bl	35ac0 <__assert_fail@plt>
   42994:	ldr	x3, [x21, #16]
   42998:	mov	w4, w3
   4299c:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   429a0:	add	x2, x2, #0x390
   429a4:	mov	x1, x20
   429a8:	mov	x0, x19
   429ac:	bl	35380 <snprintf@plt>
   429b0:	b	42508 <aarch64_print_operand@@Base+0x454>
   429b4:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   429b8:	add	x2, x2, #0x3b8
   429bc:	mov	x1, x20
   429c0:	mov	x0, x19
   429c4:	bl	35380 <snprintf@plt>
   429c8:	b	42508 <aarch64_print_operand@@Base+0x454>
   429cc:	ldr	x4, [x21, #40]
   429d0:	cbz	x4, 429f0 <aarch64_print_operand@@Base+0x93c>
   429d4:	ldr	x3, [x21, #16]
   429d8:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   429dc:	add	x2, x2, #0x3c0
   429e0:	mov	x1, x20
   429e4:	mov	x0, x19
   429e8:	bl	35380 <snprintf@plt>
   429ec:	b	42508 <aarch64_print_operand@@Base+0x454>
   429f0:	ldr	x3, [x21, #16]
   429f4:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   429f8:	add	x2, x2, #0x3d8
   429fc:	mov	x1, x20
   42a00:	mov	x0, x19
   42a04:	bl	35380 <snprintf@plt>
   42a08:	b	42508 <aarch64_print_operand@@Base+0x454>
   42a0c:	ldr	x5, [x21, #40]
   42a10:	cbnz	x5, 42a20 <aarch64_print_operand@@Base+0x96c>
   42a14:	ldr	w0, [x21, #32]
   42a18:	cmp	w0, #0x5
   42a1c:	b.eq	42a28 <aarch64_print_operand@@Base+0x974>  // b.none
   42a20:	ldr	w0, [x21, #32]
   42a24:	cbnz	w0, 42a44 <aarch64_print_operand@@Base+0x990>
   42a28:	ldr	x3, [x21, #16]
   42a2c:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42a30:	add	x2, x2, #0x3d8
   42a34:	mov	x1, x20
   42a38:	mov	x0, x19
   42a3c:	bl	35380 <snprintf@plt>
   42a40:	b	42508 <aarch64_print_operand@@Base+0x454>
   42a44:	ubfiz	x0, x0, #4, #32
   42a48:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   42a4c:	ldr	x1, [x1, #3904]
   42a50:	ldr	x4, [x1, x0]
   42a54:	ldr	x3, [x21, #16]
   42a58:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42a5c:	add	x2, x2, #0x3e0
   42a60:	mov	x1, x20
   42a64:	mov	x0, x19
   42a68:	bl	35380 <snprintf@plt>
   42a6c:	b	42508 <aarch64_print_operand@@Base+0x454>
   42a70:	ldr	x4, [x21, #40]
   42a74:	cbz	x4, 42a94 <aarch64_print_operand@@Base+0x9e0>
   42a78:	ldr	x3, [x21, #16]
   42a7c:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42a80:	add	x2, x2, #0x3f0
   42a84:	mov	x1, x20
   42a88:	mov	x0, x19
   42a8c:	bl	35380 <snprintf@plt>
   42a90:	b	42508 <aarch64_print_operand@@Base+0x454>
   42a94:	ldr	x3, [x21, #16]
   42a98:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42a9c:	add	x2, x2, #0x310
   42aa0:	mov	x1, x20
   42aa4:	mov	x0, x19
   42aa8:	bl	35380 <snprintf@plt>
   42aac:	b	42508 <aarch64_print_operand@@Base+0x454>
   42ab0:	ldrb	w0, [x23, #4]
   42ab4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42ab8:	and	w0, w0, #0xff
   42abc:	cmp	w0, #0x4
   42ac0:	b.eq	42b28 <aarch64_print_operand@@Base+0xa74>  // b.none
   42ac4:	cmp	w0, #0x8
   42ac8:	b.eq	42b54 <aarch64_print_operand@@Base+0xaa0>  // b.none
   42acc:	cmp	w0, #0x2
   42ad0:	b.eq	42b00 <aarch64_print_operand@@Base+0xa4c>  // b.none
   42ad4:	stp	x25, x26, [sp, #64]
   42ad8:	stp	x27, x28, [sp, #80]
   42adc:	adrp	x3, 60000 <xexit@@Base+0x774c>
   42ae0:	add	x3, x3, #0x78
   42ae4:	add	x3, x3, #0x130
   42ae8:	mov	w2, #0xdbd                 	// #3517
   42aec:	adrp	x1, 59000 <xexit@@Base+0x74c>
   42af0:	add	x1, x1, #0xe98
   42af4:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   42af8:	add	x0, x0, #0xb60
   42afc:	bl	35ac0 <__assert_fail@plt>
   42b00:	ldr	w1, [x21, #16]
   42b04:	bl	40ef8 <print_aarch64_disassembler_options@@Base+0x138>
   42b08:	fmov	s0, w0
   42b0c:	fcvt	d0, s0
   42b10:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42b14:	add	x2, x2, #0x400
   42b18:	mov	x1, x20
   42b1c:	mov	x0, x19
   42b20:	bl	35380 <snprintf@plt>
   42b24:	b	42508 <aarch64_print_operand@@Base+0x454>
   42b28:	ldr	w1, [x21, #16]
   42b2c:	mov	w0, #0x4                   	// #4
   42b30:	bl	40ef8 <print_aarch64_disassembler_options@@Base+0x138>
   42b34:	fmov	s0, w0
   42b38:	fcvt	d0, s0
   42b3c:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42b40:	add	x2, x2, #0x400
   42b44:	mov	x1, x20
   42b48:	mov	x0, x19
   42b4c:	bl	35380 <snprintf@plt>
   42b50:	b	42508 <aarch64_print_operand@@Base+0x454>
   42b54:	ldr	w1, [x21, #16]
   42b58:	mov	w0, #0x8                   	// #8
   42b5c:	bl	40ef8 <print_aarch64_disassembler_options@@Base+0x138>
   42b60:	fmov	d0, x0
   42b64:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42b68:	add	x2, x2, #0x400
   42b6c:	mov	x1, x20
   42b70:	mov	x0, x19
   42b74:	bl	35380 <snprintf@plt>
   42b78:	b	42508 <aarch64_print_operand@@Base+0x454>
   42b7c:	ldr	x0, [x3, #120]
   42b80:	ubfx	x1, x0, #12, #3
   42b84:	add	w22, w22, #0x1
   42b88:	cmp	x1, x22
   42b8c:	b.ne	42ba0 <aarch64_print_operand@@Base+0xaec>  // b.any
   42b90:	ubfx	x0, x0, #15, #5
   42b94:	ldr	x1, [x21, #16]
   42b98:	cmp	x1, x0
   42b9c:	b.eq	42508 <aarch64_print_operand@@Base+0x454>  // b.none
   42ba0:	ldr	w3, [x21, #16]
   42ba4:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42ba8:	add	x2, x2, #0x408
   42bac:	mov	x1, x20
   42bb0:	mov	x0, x19
   42bb4:	bl	35380 <snprintf@plt>
   42bb8:	b	42508 <aarch64_print_operand@@Base+0x454>
   42bbc:	stp	x25, x26, [sp, #64]
   42bc0:	ldr	x0, [x21, #16]
   42bc4:	ldr	x3, [x0]
   42bc8:	adrp	x2, 6a000 <fields@@Base+0x9c40>
   42bcc:	add	x2, x2, #0x588
   42bd0:	mov	x1, x20
   42bd4:	mov	x0, x19
   42bd8:	bl	35380 <snprintf@plt>
   42bdc:	mov	w22, #0x1                   	// #1
   42be0:	adrp	x25, 59000 <xexit@@Base+0x74c>
   42be4:	add	x25, x25, #0xf60
   42be8:	adrp	x26, 5a000 <xexit@@Base+0x174c>
   42bec:	add	x26, x26, #0x410
   42bf0:	b	42c10 <aarch64_print_operand@@Base+0xb5c>
   42bf4:	mov	x4, x23
   42bf8:	ldr	x3, [x24]
   42bfc:	mov	x2, x26
   42c00:	sub	x1, x20, x0
   42c04:	add	x0, x19, x0
   42c08:	bl	35380 <snprintf@plt>
   42c0c:	add	w22, w22, #0x1
   42c10:	ldr	x24, [x21, #16]
   42c14:	ldr	x23, [x24, w22, uxtw #3]
   42c18:	cbz	x23, 42c54 <aarch64_print_operand@@Base+0xba0>
   42c1c:	mov	x0, x19
   42c20:	bl	350a0 <strlen@plt>
   42c24:	cmp	w22, #0x1
   42c28:	b.eq	42bf4 <aarch64_print_operand@@Base+0xb40>  // b.none
   42c2c:	mov	x3, x23
   42c30:	mov	x2, x25
   42c34:	sub	x1, x20, x0
   42c38:	add	x0, x19, x0
   42c3c:	bl	35380 <snprintf@plt>
   42c40:	add	w0, w22, #0x1
   42c44:	cmp	w0, #0x3
   42c48:	b.ls	42c0c <aarch64_print_operand@@Base+0xb58>  // b.plast
   42c4c:	ldp	x25, x26, [sp, #64]
   42c50:	b	42508 <aarch64_print_operand@@Base+0x454>
   42c54:	ldp	x25, x26, [sp, #64]
   42c58:	b	42508 <aarch64_print_operand@@Base+0x454>
   42c5c:	and	x2, x2, #0xfffffffffffff000
   42c60:	ldr	x3, [x21, #16]
   42c64:	add	x3, x2, x3
   42c68:	cbz	x6, 42c74 <aarch64_print_operand@@Base+0xbc0>
   42c6c:	mov	w0, #0x1                   	// #1
   42c70:	str	w0, [x6]
   42c74:	cbz	x7, 42c7c <aarch64_print_operand@@Base+0xbc8>
   42c78:	str	x3, [x7]
   42c7c:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42c80:	add	x2, x2, #0x3d8
   42c84:	mov	x1, x20
   42c88:	mov	x0, x19
   42c8c:	bl	35380 <snprintf@plt>
   42c90:	b	42508 <aarch64_print_operand@@Base+0x454>
   42c94:	ldr	x3, [x21, #16]
   42c98:	add	x3, x2, x3
   42c9c:	cbz	x6, 42ca8 <aarch64_print_operand@@Base+0xbf4>
   42ca0:	mov	w0, #0x1                   	// #1
   42ca4:	str	w0, [x6]
   42ca8:	cbz	x7, 42cb0 <aarch64_print_operand@@Base+0xbfc>
   42cac:	str	x3, [x7]
   42cb0:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42cb4:	add	x2, x2, #0x3d8
   42cb8:	mov	x1, x20
   42cbc:	mov	x0, x19
   42cc0:	bl	35380 <snprintf@plt>
   42cc4:	b	42508 <aarch64_print_operand@@Base+0x454>
   42cc8:	ldrsw	x2, [x21, #16]
   42ccc:	add	x2, x2, #0x20
   42cd0:	adrp	x0, 89000 <_sch_istable@@Base+0x13f58>
   42cd4:	add	x0, x0, #0x3d0
   42cd8:	ldr	x3, [x0, x2, lsl #3]
   42cdc:	cmp	w1, #0x5e
   42ce0:	b.ne	42d24 <aarch64_print_operand@@Base+0xc70>  // b.any
   42ce4:	ldr	w0, [x21, #24]
   42ce8:	cbz	w0, 42d08 <aarch64_print_operand@@Base+0xc54>
   42cec:	ldr	w4, [x21, #20]
   42cf0:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   42cf4:	add	x2, x2, #0x420
   42cf8:	mov	x1, x20
   42cfc:	mov	x0, x19
   42d00:	bl	35380 <snprintf@plt>
   42d04:	b	42508 <aarch64_print_operand@@Base+0x454>
   42d08:	ldr	w4, [x21, #20]
   42d0c:	adrp	x2, 59000 <xexit@@Base+0x74c>
   42d10:	add	x2, x2, #0xed0
   42d14:	mov	x1, x20
   42d18:	mov	x0, x19
   42d1c:	bl	35380 <snprintf@plt>
   42d20:	b	42508 <aarch64_print_operand@@Base+0x454>
   42d24:	adrp	x2, 59000 <xexit@@Base+0x74c>
   42d28:	add	x2, x2, #0xf38
   42d2c:	mov	x1, x20
   42d30:	mov	x0, x19
   42d34:	bl	35380 <snprintf@plt>
   42d38:	b	42508 <aarch64_print_operand@@Base+0x454>
   42d3c:	ldrsw	x1, [x21, #16]
   42d40:	add	x1, x1, #0x20
   42d44:	adrp	x0, 89000 <_sch_istable@@Base+0x13f58>
   42d48:	add	x0, x0, #0x3d0
   42d4c:	ldr	x23, [x0, x1, lsl #3]
   42d50:	ldr	w0, [x21, #32]
   42d54:	cmp	w0, #0xc
   42d58:	b.eq	42d70 <aarch64_print_operand@@Base+0xcbc>  // b.none
   42d5c:	b.hi	42db8 <aarch64_print_operand@@Base+0xd04>  // b.pmore
   42d60:	cmp	w0, #0x5
   42d64:	b.eq	42dc0 <aarch64_print_operand@@Base+0xd0c>  // b.none
   42d68:	cmp	w0, #0x8
   42d6c:	b.ne	42df4 <aarch64_print_operand@@Base+0xd40>  // b.any
   42d70:	ldr	w22, [x21, #20]
   42d74:	mov	w0, #0x1                   	// #1
   42d78:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42d7c:	and	w0, w0, #0xff
   42d80:	cmp	w0, #0x4
   42d84:	cset	x0, ne  // ne = any
   42d88:	lsl	x0, x0, #5
   42d8c:	add	x0, x0, w22, sxtw
   42d90:	add	x0, x0, #0x40
   42d94:	adrp	x1, 89000 <_sch_istable@@Base+0x13f58>
   42d98:	add	x1, x1, #0x3d0
   42d9c:	ldr	x4, [x1, x0, lsl #3]
   42da0:	mov	x3, x23
   42da4:	mov	x2, x21
   42da8:	mov	x1, x20
   42dac:	mov	x0, x19
   42db0:	bl	4107c <print_aarch64_disassembler_options@@Base+0x2bc>
   42db4:	b	42508 <aarch64_print_operand@@Base+0x454>
   42db8:	cmp	w0, #0xd
   42dbc:	b.ne	42df4 <aarch64_print_operand@@Base+0xd40>  // b.any
   42dc0:	ldr	w22, [x21, #20]
   42dc4:	mov	w0, #0x2                   	// #2
   42dc8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   42dcc:	and	w0, w0, #0xff
   42dd0:	cmp	w0, #0x4
   42dd4:	cset	x0, ne  // ne = any
   42dd8:	lsl	x0, x0, #5
   42ddc:	add	x0, x0, w22, sxtw
   42de0:	add	x0, x0, #0x40
   42de4:	adrp	x1, 89000 <_sch_istable@@Base+0x13f58>
   42de8:	add	x1, x1, #0x3d0
   42dec:	ldr	x4, [x1, x0, lsl #3]
   42df0:	b	42da0 <aarch64_print_operand@@Base+0xcec>
   42df4:	stp	x25, x26, [sp, #64]
   42df8:	stp	x27, x28, [sp, #80]
   42dfc:	bl	35670 <abort@plt>
   42e00:	ldr	w1, [x21, #16]
   42e04:	ldrb	w3, [x21, #4]
   42e08:	sub	w0, w3, #0x7
   42e0c:	and	w0, w0, #0xff
   42e10:	cmp	w0, #0x1
   42e14:	b.hi	42e58 <aarch64_print_operand@@Base+0xda4>  // b.pmore
   42e18:	adrp	x0, 89000 <_sch_istable@@Base+0x13f58>
   42e1c:	add	x0, x0, #0x3d0
   42e20:	ldrsw	x2, [x21, #20]
   42e24:	add	x2, x2, #0x60
   42e28:	add	x5, x0, #0x400
   42e2c:	cmp	w3, #0x8
   42e30:	cset	x3, eq  // eq = none
   42e34:	lsl	x3, x3, #5
   42e38:	add	x1, x3, w1, sxtw
   42e3c:	ldr	x4, [x0, x2, lsl #3]
   42e40:	ldr	x3, [x5, x1, lsl #3]
   42e44:	mov	x2, x21
   42e48:	mov	x1, x20
   42e4c:	mov	x0, x19
   42e50:	bl	4107c <print_aarch64_disassembler_options@@Base+0x2bc>
   42e54:	b	42508 <aarch64_print_operand@@Base+0x454>
   42e58:	stp	x25, x26, [sp, #64]
   42e5c:	stp	x27, x28, [sp, #80]
   42e60:	adrp	x3, 60000 <xexit@@Base+0x774c>
   42e64:	add	x3, x3, #0x78
   42e68:	add	x3, x3, #0x148
   42e6c:	mov	w2, #0xb6d                 	// #2925
   42e70:	adrp	x1, 59000 <xexit@@Base+0x74c>
   42e74:	add	x1, x1, #0xe98
   42e78:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   42e7c:	add	x0, x0, #0x430
   42e80:	bl	35ac0 <__assert_fail@plt>
   42e84:	ldrsw	x1, [x21, #16]
   42e88:	add	x1, x1, #0x20
   42e8c:	adrp	x0, 89000 <_sch_istable@@Base+0x13f58>
   42e90:	add	x0, x0, #0x3d0
   42e94:	ldr	x3, [x0, x1, lsl #3]
   42e98:	ldr	w1, [x21, #20]
   42e9c:	ldrb	w2, [x21, #4]
   42ea0:	sub	w0, w2, #0x7
   42ea4:	and	w0, w0, #0xff
   42ea8:	cmp	w0, #0x1
   42eac:	b.hi	42ee4 <aarch64_print_operand@@Base+0xe30>  // b.pmore
   42eb0:	adrp	x0, 89000 <_sch_istable@@Base+0x13f58>
   42eb4:	add	x0, x0, #0x3d0
   42eb8:	cmp	w2, #0x8
   42ebc:	cset	x2, eq  // eq = none
   42ec0:	lsl	x2, x2, #5
   42ec4:	add	x1, x2, w1, sxtw
   42ec8:	add	x0, x0, #0x400
   42ecc:	ldr	x4, [x0, x1, lsl #3]
   42ed0:	mov	x2, x21
   42ed4:	mov	x1, x20
   42ed8:	mov	x0, x19
   42edc:	bl	4107c <print_aarch64_disassembler_options@@Base+0x2bc>
   42ee0:	b	42508 <aarch64_print_operand@@Base+0x454>
   42ee4:	stp	x25, x26, [sp, #64]
   42ee8:	stp	x27, x28, [sp, #80]
   42eec:	adrp	x3, 60000 <xexit@@Base+0x774c>
   42ef0:	add	x3, x3, #0x78
   42ef4:	add	x3, x3, #0x148
   42ef8:	mov	w2, #0xb6d                 	// #2925
   42efc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   42f00:	add	x1, x1, #0xe98
   42f04:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   42f08:	add	x0, x0, #0x430
   42f0c:	bl	35ac0 <__assert_fail@plt>
   42f10:	ldrsw	x1, [x21, #16]
   42f14:	add	x1, x1, #0x20
   42f18:	adrp	x0, 89000 <_sch_istable@@Base+0x13f58>
   42f1c:	add	x0, x0, #0x3d0
   42f20:	ldr	x3, [x0, x1, lsl #3]
   42f24:	mov	x2, x21
   42f28:	mov	x1, x20
   42f2c:	mov	x0, x19
   42f30:	bl	40fa4 <print_aarch64_disassembler_options@@Base+0x1e4>
   42f34:	b	42508 <aarch64_print_operand@@Base+0x454>
   42f38:	ldr	w1, [x21, #16]
   42f3c:	ldrb	w2, [x21, #4]
   42f40:	sub	w0, w2, #0x7
   42f44:	and	w0, w0, #0xff
   42f48:	cmp	w0, #0x1
   42f4c:	b.hi	42f84 <aarch64_print_operand@@Base+0xed0>  // b.pmore
   42f50:	adrp	x0, 89000 <_sch_istable@@Base+0x13f58>
   42f54:	add	x0, x0, #0x3d0
   42f58:	cmp	w2, #0x8
   42f5c:	cset	x2, eq  // eq = none
   42f60:	lsl	x2, x2, #5
   42f64:	add	x1, x2, w1, sxtw
   42f68:	add	x0, x0, #0x400
   42f6c:	ldr	x3, [x0, x1, lsl #3]
   42f70:	mov	x2, x21
   42f74:	mov	x1, x20
   42f78:	mov	x0, x19
   42f7c:	bl	40fa4 <print_aarch64_disassembler_options@@Base+0x1e4>
   42f80:	b	42508 <aarch64_print_operand@@Base+0x454>
   42f84:	stp	x25, x26, [sp, #64]
   42f88:	stp	x27, x28, [sp, #80]
   42f8c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   42f90:	add	x3, x3, #0x78
   42f94:	add	x3, x3, #0x148
   42f98:	mov	w2, #0xb6d                 	// #2925
   42f9c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   42fa0:	add	x1, x1, #0xe98
   42fa4:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   42fa8:	add	x0, x0, #0x430
   42fac:	bl	35ac0 <__assert_fail@plt>
   42fb0:	ldr	w2, [x21, #16]
   42fb4:	ldrb	w1, [x21, #4]
   42fb8:	sub	w0, w1, #0x7
   42fbc:	and	w0, w0, #0xff
   42fc0:	cmp	w0, #0x1
   42fc4:	b.hi	43008 <aarch64_print_operand@@Base+0xf54>  // b.pmore
   42fc8:	cmp	w1, #0x8
   42fcc:	adrp	x0, 89000 <_sch_istable@@Base+0x13f58>
   42fd0:	add	x0, x0, #0x3d0
   42fd4:	add	x0, x0, #0x400
   42fd8:	ldrsw	x3, [x21, #20]
   42fdc:	cset	x1, eq  // eq = none
   42fe0:	lsl	x1, x1, #5
   42fe4:	add	x3, x1, x3
   42fe8:	add	x1, x1, w2, sxtw
   42fec:	ldr	x4, [x0, x3, lsl #3]
   42ff0:	ldr	x3, [x0, x1, lsl #3]
   42ff4:	mov	x2, x21
   42ff8:	mov	x1, x20
   42ffc:	mov	x0, x19
   43000:	bl	4107c <print_aarch64_disassembler_options@@Base+0x2bc>
   43004:	b	42508 <aarch64_print_operand@@Base+0x454>
   43008:	stp	x25, x26, [sp, #64]
   4300c:	stp	x27, x28, [sp, #80]
   43010:	adrp	x3, 60000 <xexit@@Base+0x774c>
   43014:	add	x3, x3, #0x78
   43018:	add	x3, x3, #0x148
   4301c:	mov	w2, #0xb6d                 	// #2925
   43020:	adrp	x1, 59000 <xexit@@Base+0x74c>
   43024:	add	x1, x1, #0xe98
   43028:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   4302c:	add	x0, x0, #0x430
   43030:	bl	35ac0 <__assert_fail@plt>
   43034:	ldrsw	x1, [x21, #16]
   43038:	add	x1, x1, #0x20
   4303c:	adrp	x0, 89000 <_sch_istable@@Base+0x13f58>
   43040:	add	x0, x0, #0x3d0
   43044:	ldr	x3, [x0, x1, lsl #3]
   43048:	ldr	w4, [x21, #20]
   4304c:	cbz	w4, 43068 <aarch64_print_operand@@Base+0xfb4>
   43050:	adrp	x2, 59000 <xexit@@Base+0x74c>
   43054:	add	x2, x2, #0xf28
   43058:	mov	x1, x20
   4305c:	mov	x0, x19
   43060:	bl	35380 <snprintf@plt>
   43064:	b	42508 <aarch64_print_operand@@Base+0x454>
   43068:	adrp	x2, 59000 <xexit@@Base+0x74c>
   4306c:	add	x2, x2, #0xf38
   43070:	mov	x1, x20
   43074:	mov	x0, x19
   43078:	bl	35380 <snprintf@plt>
   4307c:	b	42508 <aarch64_print_operand@@Base+0x454>
   43080:	stp	x25, x26, [sp, #64]
   43084:	stp	x27, x28, [sp, #80]
   43088:	adrp	x22, a3000 <aarch64_operands@@Base+0x16bc0>
   4308c:	ldr	x22, [x22, #3968]
   43090:	add	x22, x22, #0x8
   43094:	mov	x26, #0x0                   	// #0
   43098:	adrp	x23, 5a000 <xexit@@Base+0x174c>
   4309c:	add	x23, x23, #0x150
   430a0:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   430a4:	add	x0, x0, #0x4a0
   430a8:	str	x0, [sp, #104]
   430ac:	adrp	x27, 58000 <print_arm_disassembler_options@@Base+0x228>
   430b0:	add	x27, x27, #0x908
   430b4:	mov	w28, #0x5                   	// #5
   430b8:	b	43120 <aarch64_print_operand@@Base+0x106c>
   430bc:	mov	x26, x23
   430c0:	ldr	x0, [sp, #112]
   430c4:	cbz	x0, 430cc <aarch64_print_operand@@Base+0x1018>
   430c8:	str	xzr, [x0]
   430cc:	cbz	x26, 43184 <aarch64_print_operand@@Base+0x10d0>
   430d0:	mov	x3, x26
   430d4:	adrp	x2, 6a000 <fields@@Base+0x9c40>
   430d8:	add	x2, x2, #0x588
   430dc:	mov	x1, x20
   430e0:	mov	x0, x19
   430e4:	bl	35380 <snprintf@plt>
   430e8:	ldp	x25, x26, [sp, #64]
   430ec:	ldp	x27, x28, [sp, #80]
   430f0:	b	42508 <aarch64_print_operand@@Base+0x454>
   430f4:	mov	w2, w28
   430f8:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   430fc:	add	x1, x1, #0x478
   43100:	mov	x0, x27
   43104:	bl	359e0 <dcgettext@plt>
   43108:	ldr	x1, [sp, #112]
   4310c:	str	x0, [x1]
   43110:	mov	x26, x23
   43114:	add	x22, x22, #0x10
   43118:	ldur	x23, [x22, #-8]
   4311c:	cbz	x23, 430cc <aarch64_print_operand@@Base+0x1018>
   43120:	ldr	w1, [x22]
   43124:	ldr	w0, [x21, #16]
   43128:	cmp	w1, w0
   4312c:	b.ne	43114 <aarch64_print_operand@@Base+0x1060>  // b.any
   43130:	ldr	w25, [x22, #4]
   43134:	ldr	w24, [x21, #20]
   43138:	sub	x0, x22, #0x8
   4313c:	bl	35b00 <aarch64_sys_reg_deprecated_p@plt>
   43140:	cbnz	w0, 43114 <aarch64_print_operand@@Base+0x1060>
   43144:	and	w0, w25, w24
   43148:	cmp	x26, #0x0
   4314c:	ccmp	w24, w0, #0x4, ne  // ne = any
   43150:	b.ne	43114 <aarch64_print_operand@@Base+0x1060>  // b.any
   43154:	cmp	w24, w0
   43158:	b.eq	430bc <aarch64_print_operand@@Base+0x1008>  // b.none
   4315c:	tbnz	w25, #4, 430f4 <aarch64_print_operand@@Base+0x1040>
   43160:	mov	x26, x23
   43164:	tbz	w25, #3, 43114 <aarch64_print_operand@@Base+0x1060>
   43168:	mov	w2, w28
   4316c:	ldr	x1, [sp, #104]
   43170:	mov	x0, x27
   43174:	bl	359e0 <dcgettext@plt>
   43178:	ldr	x1, [sp, #112]
   4317c:	str	x0, [x1]
   43180:	b	43114 <aarch64_print_operand@@Base+0x1060>
   43184:	ldr	w3, [x21, #16]
   43188:	and	w7, w3, #0x7
   4318c:	ubfx	x6, x3, #3, #4
   43190:	ubfx	x5, x3, #7, #4
   43194:	ubfx	x4, x3, #11, #3
   43198:	ubfx	x3, x3, #14, #2
   4319c:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   431a0:	add	x2, x2, #0x4c0
   431a4:	mov	x1, x20
   431a8:	mov	x0, x19
   431ac:	bl	35380 <snprintf@plt>
   431b0:	ldp	x25, x26, [sp, #64]
   431b4:	ldp	x27, x28, [sp, #80]
   431b8:	b	42508 <aarch64_print_operand@@Base+0x454>
   431bc:	ldr	w2, [x21, #16]
   431c0:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   431c4:	ldr	x0, [x0, #3832]
   431c8:	adrp	x3, 5a000 <xexit@@Base+0x174c>
   431cc:	add	x3, x3, #0x160
   431d0:	ldr	w1, [x0, #8]
   431d4:	cmp	w1, w2
   431d8:	b.eq	43210 <aarch64_print_operand@@Base+0x115c>  // b.none
   431dc:	ldr	x3, [x0, #16]!
   431e0:	cbnz	x3, 431d0 <aarch64_print_operand@@Base+0x111c>
   431e4:	stp	x25, x26, [sp, #64]
   431e8:	stp	x27, x28, [sp, #80]
   431ec:	adrp	x3, 60000 <xexit@@Base+0x774c>
   431f0:	add	x3, x3, #0x78
   431f4:	add	x3, x3, #0x130
   431f8:	mov	w2, #0xe95                 	// #3733
   431fc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   43200:	add	x1, x1, #0xe98
   43204:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   43208:	add	x0, x0, #0x4d8
   4320c:	bl	35ac0 <__assert_fail@plt>
   43210:	cbz	x3, 431e4 <aarch64_print_operand@@Base+0x1130>
   43214:	adrp	x2, 6a000 <fields@@Base+0x9c40>
   43218:	add	x2, x2, #0x588
   4321c:	mov	x1, x20
   43220:	mov	x0, x19
   43224:	bl	35380 <snprintf@plt>
   43228:	b	42508 <aarch64_print_operand@@Base+0x454>
   4322c:	ldr	x0, [x21, #16]
   43230:	ldr	x3, [x0]
   43234:	adrp	x2, 6a000 <fields@@Base+0x9c40>
   43238:	add	x2, x2, #0x588
   4323c:	mov	x1, x20
   43240:	mov	x0, x19
   43244:	bl	35380 <snprintf@plt>
   43248:	b	42508 <aarch64_print_operand@@Base+0x454>
   4324c:	ldr	x0, [x21, #16]
   43250:	ldr	x3, [x0]
   43254:	adrp	x2, 6a000 <fields@@Base+0x9c40>
   43258:	add	x2, x2, #0x588
   4325c:	mov	x1, x20
   43260:	mov	x0, x19
   43264:	bl	35380 <snprintf@plt>
   43268:	b	42508 <aarch64_print_operand@@Base+0x454>
   4326c:	ldr	x0, [x3, #120]
   43270:	ubfx	x1, x0, #12, #3
   43274:	add	w22, w22, #0x1
   43278:	cmp	x1, x22
   4327c:	b.ne	43294 <aarch64_print_operand@@Base+0x11e0>  // b.any
   43280:	ldr	x1, [x21, #16]
   43284:	ubfx	w0, w0, #15, #5
   43288:	ldr	w1, [x1, #8]
   4328c:	cmp	w1, w0
   43290:	b.eq	42508 <aarch64_print_operand@@Base+0x454>  // b.none
   43294:	ldr	x0, [x21, #16]
   43298:	ldr	w3, [x0, #8]
   4329c:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   432a0:	add	x2, x2, #0x408
   432a4:	mov	x1, x20
   432a8:	mov	x0, x19
   432ac:	bl	35380 <snprintf@plt>
   432b0:	b	42508 <aarch64_print_operand@@Base+0x454>
   432b4:	ldr	x0, [x21, #16]
   432b8:	ldr	x3, [x0]
   432bc:	cbz	x3, 432d8 <aarch64_print_operand@@Base+0x1224>
   432c0:	adrp	x2, 6a000 <fields@@Base+0x9c40>
   432c4:	add	x2, x2, #0x588
   432c8:	mov	x1, x20
   432cc:	mov	x0, x19
   432d0:	bl	35380 <snprintf@plt>
   432d4:	b	42508 <aarch64_print_operand@@Base+0x454>
   432d8:	ldr	w3, [x0, #8]
   432dc:	adrp	x2, 5a000 <xexit@@Base+0x174c>
   432e0:	add	x2, x2, #0x4f8
   432e4:	mov	x1, x20
   432e8:	mov	x0, x19
   432ec:	bl	35380 <snprintf@plt>
   432f0:	b	42508 <aarch64_print_operand@@Base+0x454>
   432f4:	ldr	x0, [x21, #16]
   432f8:	ldr	w1, [x0, #8]
   432fc:	tbnz	w1, #8, 42508 <aarch64_print_operand@@Base+0x454>
   43300:	ldr	x3, [x0]
   43304:	adrp	x2, 6a000 <fields@@Base+0x9c40>
   43308:	add	x2, x2, #0x588
   4330c:	mov	x1, x20
   43310:	mov	x0, x19
   43314:	bl	35380 <snprintf@plt>
   43318:	b	42508 <aarch64_print_operand@@Base+0x454>
   4331c:	stp	x25, x26, [sp, #64]
   43320:	stp	x27, x28, [sp, #80]
   43324:	adrp	x3, 60000 <xexit@@Base+0x774c>
   43328:	add	x3, x3, #0x78
   4332c:	add	x3, x3, #0x130
   43330:	mov	w2, #0xebb                 	// #3771
   43334:	adrp	x1, 59000 <xexit@@Base+0x74c>
   43338:	add	x1, x1, #0xe98
   4333c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   43340:	add	x0, x0, #0xb60
   43344:	bl	35ac0 <__assert_fail@plt>

0000000000043348 <aarch64_sys_reg_supported_p@@Base>:
   43348:	mov	x2, x0
   4334c:	ldr	w0, [x1, #12]
   43350:	tbz	w0, #1, 43780 <aarch64_sys_reg_supported_p@@Base+0x438>
   43354:	ldr	w1, [x1, #8]
   43358:	mov	w0, #0xc213                	// #49683
   4335c:	cmp	w1, w0
   43360:	b.eq	433d8 <aarch64_sys_reg_supported_p@@Base+0x90>  // b.none
   43364:	and	w4, w1, #0xffffdfff
   43368:	sub	w0, w1, #0xd, lsl #12
   4336c:	sub	w0, w0, #0xe87
   43370:	and	w0, w0, #0xffffefff
   43374:	mov	w3, #0xc687                	// #50823
   43378:	cmp	w4, w3
   4337c:	mov	w3, #0xf687                	// #63111
   43380:	ccmp	w1, w3, #0x4, ne  // ne = any
   43384:	ccmp	w0, #0x0, #0x4, ne  // ne = any
   43388:	b.ne	43394 <aarch64_sys_reg_supported_p@@Base+0x4c>  // b.any
   4338c:	mov	w0, #0x0                   	// #0
   43390:	tbz	x2, #45, 43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   43394:	mov	w0, #0xc01c                	// #49180
   43398:	cmp	w1, w0
   4339c:	b.eq	433e4 <aarch64_sys_reg_supported_p@@Base+0x9c>  // b.none
   433a0:	mov	w0, #0xda16                	// #55830
   433a4:	cmp	w1, w0
   433a8:	b.ne	433f0 <aarch64_sys_reg_supported_p@@Base+0xa8>  // b.any
   433ac:	mov	w0, #0x0                   	// #0
   433b0:	and	w5, w1, #0xfffffffd
   433b4:	and	w6, w1, #0xfffffff7
   433b8:	tbz	x2, #47, 43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   433bc:	sub	w0, w6, #0xe, lsl #12
   433c0:	sub	w0, w0, #0xf10
   433c4:	cmp	w0, #0x2
   433c8:	b.hi	434a0 <aarch64_sys_reg_supported_p@@Base+0x158>  // b.pmore
   433cc:	mov	w0, #0x0                   	// #0
   433d0:	tbz	w2, #24, 43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   433d4:	b	434a0 <aarch64_sys_reg_supported_p@@Base+0x158>
   433d8:	mov	w0, #0x0                   	// #0
   433dc:	tbnz	w2, #21, 43418 <aarch64_sys_reg_supported_p@@Base+0xd0>
   433e0:	b	43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   433e4:	mov	w0, #0x0                   	// #0
   433e8:	tbnz	x2, #46, 43418 <aarch64_sys_reg_supported_p@@Base+0xd0>
   433ec:	b	43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   433f0:	sub	w0, w1, #0xe, lsl #12
   433f4:	sub	w0, w0, #0x718
   433f8:	mov	w3, #0xe101                	// #57601
   433fc:	cmp	w1, w3
   43400:	mov	w3, #0xe681                	// #59009
   43404:	ccmp	w1, w3, #0x4, ne  // ne = any
   43408:	ccmp	w0, #0x2, #0x0, ne  // ne = any
   4340c:	b.hi	43418 <aarch64_sys_reg_supported_p@@Base+0xd0>  // b.pmore
   43410:	mov	w0, #0x0                   	// #0
   43414:	tbz	w2, #24, 43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   43418:	and	w5, w1, #0xfffffffd
   4341c:	and	w6, w1, #0xfffffff7
   43420:	mov	w0, #0xea90                	// #60048
   43424:	cmp	w1, w0
   43428:	mov	w0, #0xeb00                	// #60160
   4342c:	ccmp	w1, w0, #0x4, ne  // ne = any
   43430:	cset	w0, eq  // eq = none
   43434:	mov	w3, #0xee00                	// #60928
   43438:	cmp	w1, w3
   4343c:	mov	w3, #0xee81                	// #61057
   43440:	ccmp	w1, w3, #0x4, ne  // ne = any
   43444:	csinc	w0, w0, wzr, ne  // ne = any
   43448:	sub	w3, w1, #0xe, lsl #12
   4344c:	sub	w3, w3, #0xa00
   43450:	cmp	w3, #0x1
   43454:	mov	w3, #0xe880                	// #59520
   43458:	ccmp	w5, w3, #0x4, hi  // hi = pmore
   4345c:	csinc	w3, w0, wzr, ne  // ne = any
   43460:	sub	w4, w1, #0xe, lsl #12
   43464:	sub	w4, w4, #0x900
   43468:	sub	w0, w1, #0xe, lsl #12
   4346c:	sub	w0, w0, #0xa88
   43470:	cmp	w4, #0x2
   43474:	ccmp	w0, #0x1, #0x0, hi  // hi = pmore
   43478:	cset	w0, ls  // ls = plast
   4347c:	orr	w0, w0, w3
   43480:	mov	w3, #0xef08                	// #61192
   43484:	cmp	w1, w3
   43488:	mov	w3, #0xed10                	// #60688
   4348c:	ccmp	w6, w3, #0x4, ne  // ne = any
   43490:	csinc	w0, w0, wzr, ne  // ne = any
   43494:	cbz	w0, 433bc <aarch64_sys_reg_supported_p@@Base+0x74>
   43498:	mov	w0, #0x0                   	// #0
   4349c:	tbz	w2, #24, 43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   434a0:	mov	w0, #0xc03a                	// #49210
   434a4:	cmp	w1, w0
   434a8:	b.eq	4372c <aarch64_sys_reg_supported_p@@Base+0x3e4>  // b.none
   434ac:	mov	w0, #0xc214                	// #49684
   434b0:	cmp	w1, w0
   434b4:	b.eq	43758 <aarch64_sys_reg_supported_p@@Base+0x410>  // b.none
   434b8:	sub	w3, w1, #0xc, lsl #12
   434bc:	sub	w3, w3, #0x298
   434c0:	sub	w0, w1, #0xc, lsl #12
   434c4:	sub	w0, w0, #0x2a8
   434c8:	mov	w4, #0xfffffff4            	// #-12
   434cc:	tst	w3, w4
   434d0:	ccmp	w0, #0x1, #0x0, ne  // ne = any
   434d4:	b.hi	43734 <aarch64_sys_reg_supported_p@@Base+0x3ec>  // b.pmore
   434d8:	mov	w0, #0x0                   	// #0
   434dc:	tbz	w2, #26, 43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   434e0:	and	w3, w1, #0xfffffffb
   434e4:	and	w7, w1, #0xffffdfff
   434e8:	sub	w0, w1, #0xc, lsl #12
   434ec:	sub	w0, w0, #0x4ca
   434f0:	cmp	w0, #0x7
   434f4:	mov	w0, #0xecc8                	// #60616
   434f8:	ccmp	w1, w0, #0x4, hi  // hi = pmore
   434fc:	cset	w0, eq  // eq = none
   43500:	mov	w4, #0xc4c8                	// #50376
   43504:	cmp	w7, w4
   43508:	mov	w4, #0xc4d3                	// #50387
   4350c:	ccmp	w3, w4, #0x4, ne  // ne = any
   43510:	csinc	w0, w0, wzr, ne  // ne = any
   43514:	cbz	w0, 43520 <aarch64_sys_reg_supported_p@@Base+0x1d8>
   43518:	mov	w0, #0x0                   	// #0
   4351c:	tbz	w2, #27, 43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   43520:	sub	w4, w1, #0xc, lsl #12
   43524:	sub	w4, w4, #0x108
   43528:	sub	w0, w1, #0xc, lsl #12
   4352c:	sub	w0, w0, #0x118
   43530:	mov	w8, #0xfffffff4            	// #-12
   43534:	tst	w4, w8
   43538:	ccmp	w0, #0x1, #0x0, ne  // ne = any
   4353c:	b.hi	43548 <aarch64_sys_reg_supported_p@@Base+0x200>  // b.pmore
   43540:	mov	w0, #0x0                   	// #0
   43544:	tbz	w2, #6, 43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   43548:	sub	w0, w1, #0xe, lsl #12
   4354c:	sub	w0, w0, #0x890
   43550:	tst	w0, #0xfffff7ff
   43554:	mov	w0, #0xc090                	// #49296
   43558:	ccmp	w7, w0, #0x4, ne  // ne = any
   4355c:	cset	w0, eq  // eq = none
   43560:	mov	w4, #0xc024                	// #49188
   43564:	cmp	w1, w4
   43568:	mov	w4, #0xc007                	// #49159
   4356c:	ccmp	w1, w4, #0x4, ne  // ne = any
   43570:	csinc	w0, w0, wzr, ne  // ne = any
   43574:	cbz	w0, 43580 <aarch64_sys_reg_supported_p@@Base+0x238>
   43578:	mov	w0, #0x0                   	// #0
   4357c:	tbz	w2, #28, 43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   43580:	mov	w0, #0xda15                	// #55829
   43584:	cmp	w1, w0
   43588:	b.eq	43764 <aarch64_sys_reg_supported_p@@Base+0x41c>  // b.none
   4358c:	and	w4, w1, #0xffffffdf
   43590:	sub	w6, w6, #0xe, lsl #12
   43594:	sub	w6, w6, #0x720
   43598:	mov	w0, #0xe110                	// #57616
   4359c:	cmp	w4, w0
   435a0:	ccmp	w6, #0x2, #0x0, ne  // ne = any
   435a4:	cset	w0, ls  // ls = plast
   435a8:	mov	w4, #0xe132                	// #57650
   435ac:	cmp	w1, w4
   435b0:	mov	w4, #0xe099                	// #57497
   435b4:	ccmp	w1, w4, #0x4, ne  // ne = any
   435b8:	csinc	w0, w0, wzr, ne  // ne = any
   435bc:	cbz	w0, 435c8 <aarch64_sys_reg_supported_p@@Base+0x280>
   435c0:	mov	w0, #0x0                   	// #0
   435c4:	tbz	w2, #11, 43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   435c8:	sub	w0, w1, #0x4, lsl #12
   435cc:	sub	w0, w0, #0x408
   435d0:	cmp	w0, #0x3
   435d4:	mov	w0, #0x440d                	// #17421
   435d8:	ccmp	w5, w0, #0x4, hi  // hi = pmore
   435dc:	cset	w0, eq  // eq = none
   435e0:	mov	w4, #0x6420                	// #25632
   435e4:	cmp	w1, w4
   435e8:	mov	w4, #0x7429                	// #29737
   435ec:	ccmp	w1, w4, #0x4, ne  // ne = any
   435f0:	csinc	w0, w0, wzr, ne  // ne = any
   435f4:	mov	w6, #0xffffeffe            	// #-4098
   435f8:	and	w6, w1, w6
   435fc:	and	w4, w1, #0xffffffdf
   43600:	mov	w7, #0x6408                	// #25608
   43604:	cmp	w6, w7
   43608:	mov	w6, #0x740d                	// #29709
   4360c:	ccmp	w4, w6, #0x4, ne  // ne = any
   43610:	csinc	w0, w0, wzr, ne  // ne = any
   43614:	sub	w4, w1, #0x6, lsl #12
   43618:	sub	w4, w4, #0x40c
   4361c:	cmp	w4, #0x2
   43620:	mov	w4, #0x4431                	// #17457
   43624:	ccmp	w5, w4, #0x4, hi  // hi = pmore
   43628:	csinc	w0, w0, wzr, ne  // ne = any
   4362c:	mov	w4, #0x4411                	// #17425
   43630:	cmp	w5, w4
   43634:	mov	w4, #0x4435                	// #17461
   43638:	ccmp	w5, w4, #0x4, ne  // ne = any
   4363c:	csinc	w0, w0, wzr, ne  // ne = any
   43640:	mov	w4, #0x4415                	// #17429
   43644:	cmp	w5, w4
   43648:	mov	w4, #0x4429                	// #17449
   4364c:	ccmp	w5, w4, #0x4, ne  // ne = any
   43650:	csinc	w0, w0, wzr, ne  // ne = any
   43654:	mov	w4, #0x442d                	// #17453
   43658:	cmp	w5, w4
   4365c:	mov	w4, #0x6402                	// #25602
   43660:	ccmp	w3, w4, #0x4, ne  // ne = any
   43664:	csinc	w0, w0, wzr, ne  // ne = any
   43668:	sub	w5, w1, #0x6, lsl #12
   4366c:	sub	w5, w5, #0x422
   43670:	sub	w4, w1, #0x6, lsl #12
   43674:	sub	w4, w4, #0x426
   43678:	cmp	w5, #0x2
   4367c:	ccmp	w4, #0x1, #0x0, hi  // hi = pmore
   43680:	cset	w4, ls  // ls = plast
   43684:	orr	w0, w4, w0
   43688:	mov	w4, #0x6411                	// #25617
   4368c:	cmp	w3, w4
   43690:	mov	w4, #0x6431                	// #25649
   43694:	ccmp	w3, w4, #0x4, ne  // ne = any
   43698:	csinc	w0, w0, wzr, ne  // ne = any
   4369c:	mov	w4, #0x6429                	// #25641
   436a0:	cmp	w3, w4
   436a4:	mov	w4, #0x7431                	// #29745
   436a8:	ccmp	w3, w4, #0x4, ne  // ne = any
   436ac:	csinc	w0, w0, wzr, ne  // ne = any
   436b0:	mov	w4, #0x7411                	// #29713
   436b4:	cmp	w3, w4
   436b8:	csinc	w0, w0, wzr, ne  // ne = any
   436bc:	cbz	w0, 436c8 <aarch64_sys_reg_supported_p@@Base+0x380>
   436c0:	mov	w0, #0x0                   	// #0
   436c4:	tbz	w2, #11, 43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   436c8:	sub	w0, w1, #0xd, lsl #12
   436cc:	sub	w0, w0, #0x920
   436d0:	cmp	w0, #0x1
   436d4:	b.ls	43770 <aarch64_sys_reg_supported_p@@Base+0x428>  // b.plast
   436d8:	sub	w0, w1, #0xc, lsl #12
   436dc:	sub	w0, w0, #0x2b0
   436e0:	and	w3, w1, #0xfffff7ff
   436e4:	cmp	w0, #0x1
   436e8:	mov	w0, #0xe2b0                	// #58032
   436ec:	ccmp	w3, w0, #0x4, hi  // hi = pmore
   436f0:	cset	w0, eq  // eq = none
   436f4:	mov	w3, #0xda17                	// #55831
   436f8:	cmp	w1, w3
   436fc:	mov	w3, #0xf2b0                	// #62128
   43700:	ccmp	w1, w3, #0x4, ne  // ne = any
   43704:	csinc	w0, w0, wzr, ne  // ne = any
   43708:	sub	w3, w1, #0xc, lsl #12
   4370c:	sub	w3, w3, #0x85
   43710:	cmp	w3, #0x1
   43714:	mov	w3, #0xc804                	// #51204
   43718:	ccmp	w1, w3, #0x4, hi  // hi = pmore
   4371c:	csinc	w0, w0, wzr, ne  // ne = any
   43720:	cbz	w0, 43788 <aarch64_sys_reg_supported_p@@Base+0x440>
   43724:	ubfx	x0, x2, #48, #1
   43728:	b	43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   4372c:	mov	w0, #0x0                   	// #0
   43730:	tbz	w2, #5, 43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   43734:	and	w3, w1, #0xffffdfff
   43738:	mov	w0, #0xc609                	// #50697
   4373c:	cmp	w3, w0
   43740:	mov	w0, #0xe293                	// #58003
   43744:	ccmp	w1, w0, #0x4, ne  // ne = any
   43748:	b.ne	434e0 <aarch64_sys_reg_supported_p@@Base+0x198>  // b.any
   4374c:	mov	w0, #0x0                   	// #0
   43750:	tbz	w2, #26, 43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   43754:	b	434e0 <aarch64_sys_reg_supported_p@@Base+0x198>
   43758:	mov	w0, #0x0                   	// #0
   4375c:	tbnz	w2, #5, 434e0 <aarch64_sys_reg_supported_p@@Base+0x198>
   43760:	b	43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   43764:	mov	w0, #0x0                   	// #0
   43768:	tbnz	w2, #11, 436c8 <aarch64_sys_reg_supported_p@@Base+0x380>
   4376c:	b	43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   43770:	mov	x0, #0x82000000000         	// #8933531975680
   43774:	bics	xzr, x0, x2
   43778:	cset	w0, eq  // eq = none
   4377c:	b	43784 <aarch64_sys_reg_supported_p@@Base+0x43c>
   43780:	mov	w0, #0x1                   	// #1
   43784:	ret
   43788:	mov	w0, #0x1                   	// #1
   4378c:	b	43784 <aarch64_sys_reg_supported_p@@Base+0x43c>

0000000000043790 <aarch64_pstatefield_supported_p@@Base>:
   43790:	ldr	w2, [x1, #12]
   43794:	tbz	w2, #1, 437ec <aarch64_pstatefield_supported_p@@Base+0x5c>
   43798:	ldr	w1, [x1, #8]
   4379c:	cmp	w1, #0x4
   437a0:	b.eq	437c4 <aarch64_pstatefield_supported_p@@Base+0x34>  // b.none
   437a4:	cmp	w1, #0x3
   437a8:	b.eq	437cc <aarch64_pstatefield_supported_p@@Base+0x3c>  // b.none
   437ac:	cmp	w1, #0x19
   437b0:	b.eq	437d4 <aarch64_pstatefield_supported_p@@Base+0x44>  // b.none
   437b4:	cmp	w1, #0x1a
   437b8:	b.ne	437dc <aarch64_pstatefield_supported_p@@Base+0x4c>  // b.any
   437bc:	ubfx	w0, w0, #11, #1
   437c0:	b	437f0 <aarch64_pstatefield_supported_p@@Base+0x60>
   437c4:	ubfx	w0, w0, #21, #1
   437c8:	b	437f0 <aarch64_pstatefield_supported_p@@Base+0x60>
   437cc:	ubfx	w0, w0, #5, #1
   437d0:	b	437f0 <aarch64_pstatefield_supported_p@@Base+0x60>
   437d4:	ubfx	x0, x0, #47, #1
   437d8:	b	437f0 <aarch64_pstatefield_supported_p@@Base+0x60>
   437dc:	cmp	w1, #0x1c
   437e0:	b.ne	437f4 <aarch64_pstatefield_supported_p@@Base+0x64>  // b.any
   437e4:	ubfx	x0, x0, #48, #1
   437e8:	b	437f0 <aarch64_pstatefield_supported_p@@Base+0x60>
   437ec:	mov	w0, #0x1                   	// #1
   437f0:	ret
   437f4:	mov	w0, #0x1                   	// #1
   437f8:	b	437f0 <aarch64_pstatefield_supported_p@@Base+0x60>

00000000000437fc <aarch64_sys_ins_reg_has_xt@@Base>:
   437fc:	ldr	w0, [x0, #12]
   43800:	ubfx	x0, x0, #2, #1
   43804:	ret

0000000000043808 <aarch64_sys_ins_reg_supported_p@@Base>:
   43808:	mov	x2, x0
   4380c:	ldr	w0, [x1, #12]
   43810:	tbz	w0, #1, 438e0 <aarch64_sys_ins_reg_supported_p@@Base+0xd8>
   43814:	ldr	w1, [x1, #8]
   43818:	mov	w0, #0x5be1                	// #23521
   4381c:	cmp	w1, w0
   43820:	b.eq	438b8 <aarch64_sys_ins_reg_supported_p@@Base+0xb0>  // b.none
   43824:	mov	w0, #0x5be9                	// #23529
   43828:	cmp	w1, w0
   4382c:	b.eq	438c4 <aarch64_sys_ins_reg_supported_p@@Base+0xbc>  // b.none
   43830:	and	w5, w1, #0xfffffffd
   43834:	and	w4, w1, #0xffffffdf
   43838:	and	w3, w1, #0xfffffff7
   4383c:	sub	w0, w1, #0x4, lsl #12
   43840:	sub	w0, w0, #0x3b3
   43844:	cmp	w0, #0x3
   43848:	mov	w0, #0x43d4                	// #17364
   4384c:	ccmp	w5, w0, #0x4, hi  // hi = pmore
   43850:	cset	w0, eq  // eq = none
   43854:	mov	w6, #0x43f4                	// #17396
   43858:	cmp	w5, w6
   4385c:	mov	w5, #0x5bd3                	// #23507
   43860:	ccmp	w4, w5, #0x4, ne  // ne = any
   43864:	csinc	w0, w0, wzr, ne  // ne = any
   43868:	sub	w5, w1, #0x5, lsl #12
   4386c:	sub	w5, w5, #0xba3
   43870:	cmp	w5, #0x1
   43874:	mov	w5, #0x5be3                	// #23523
   43878:	ccmp	w3, w5, #0x4, hi  // hi = pmore
   4387c:	csinc	w0, w0, wzr, ne  // ne = any
   43880:	mov	w5, #0x5bd5                	// #23509
   43884:	cmp	w4, w5
   43888:	mov	w4, #0x5be5                	// #23525
   4388c:	ccmp	w3, w4, #0x4, ne  // ne = any
   43890:	csinc	w0, w0, wzr, ne  // ne = any
   43894:	cbz	w0, 438a0 <aarch64_sys_ins_reg_supported_p@@Base+0x98>
   43898:	mov	w0, #0x0                   	// #0
   4389c:	tbz	x2, #48, 438e4 <aarch64_sys_ins_reg_supported_p@@Base+0xdc>
   438a0:	sub	w0, w1, #0x4, lsl #12
   438a4:	sub	w0, w0, #0x3c8
   438a8:	cmp	w0, #0x1
   438ac:	b.hi	438cc <aarch64_sys_ins_reg_supported_p@@Base+0xc4>  // b.pmore
   438b0:	ubfx	w0, w2, #5, #1
   438b4:	b	438e4 <aarch64_sys_ins_reg_supported_p@@Base+0xdc>
   438b8:	mov	w0, #0x0                   	// #0
   438bc:	tbnz	w2, #5, 438a0 <aarch64_sys_ins_reg_supported_p@@Base+0x98>
   438c0:	b	438e4 <aarch64_sys_ins_reg_supported_p@@Base+0xdc>
   438c4:	ubfx	x0, x2, #42, #1
   438c8:	b	438e4 <aarch64_sys_ins_reg_supported_p@@Base+0xdc>
   438cc:	mov	w0, #0x5b98                	// #23448
   438d0:	cmp	w1, w0
   438d4:	b.ne	438e8 <aarch64_sys_ins_reg_supported_p@@Base+0xe0>  // b.any
   438d8:	ubfx	x0, x2, #41, #1
   438dc:	b	438e4 <aarch64_sys_ins_reg_supported_p@@Base+0xdc>
   438e0:	mov	w0, #0x1                   	// #1
   438e4:	ret
   438e8:	mov	w0, #0x1                   	// #1
   438ec:	b	438e4 <aarch64_sys_ins_reg_supported_p@@Base+0xdc>

00000000000438f0 <init_insn_sequence@@Base>:
   438f0:	stp	x29, x30, [sp, #-32]!
   438f4:	mov	x29, sp
   438f8:	stp	x19, x20, [sp, #16]
   438fc:	mov	x20, x0
   43900:	mov	x19, x1
   43904:	str	wzr, [x1, #24]
   43908:	str	wzr, [x1, #8]
   4390c:	ldr	x0, [x1]
   43910:	cbz	x0, 43918 <init_insn_sequence@@Base+0x28>
   43914:	bl	35790 <free@plt>
   43918:	str	xzr, [x19]
   4391c:	cbz	x20, 43980 <init_insn_sequence@@Base+0x90>
   43920:	mov	x0, #0x168                 	// #360
   43924:	bl	35480 <xmalloc@plt>
   43928:	str	x0, [x19]
   4392c:	mov	x2, #0x168                 	// #360
   43930:	mov	x1, x20
   43934:	bl	35050 <memcpy@plt>
   43938:	ldr	x0, [x20, #8]
   4393c:	ldr	w20, [x0, #128]
   43940:	and	w20, w20, #0x1
   43944:	ldr	x0, [x19, #16]
   43948:	cbz	x0, 43950 <init_insn_sequence@@Base+0x60>
   4394c:	bl	35790 <free@plt>
   43950:	str	xzr, [x19, #16]
   43954:	cbnz	w20, 43964 <init_insn_sequence@@Base+0x74>
   43958:	ldp	x19, x20, [sp, #16]
   4395c:	ldp	x29, x30, [sp], #32
   43960:	ret
   43964:	mov	x0, #0x168                 	// #360
   43968:	bl	35480 <xmalloc@plt>
   4396c:	str	x0, [x19, #16]
   43970:	mov	x2, #0x168                 	// #360
   43974:	mov	w1, #0x0                   	// #0
   43978:	bl	35470 <memset@plt>
   4397c:	b	43958 <init_insn_sequence@@Base+0x68>
   43980:	ldr	x0, [x19, #16]
   43984:	mov	w20, #0x0                   	// #0
   43988:	cbnz	x0, 4394c <init_insn_sequence@@Base+0x5c>
   4398c:	b	43958 <init_insn_sequence@@Base+0x68>

0000000000043990 <verify_constraints@@Base>:
   43990:	stp	x29, x30, [sp, #-304]!
   43994:	mov	x29, sp
   43998:	cbz	x0, 43a30 <verify_constraints@@Base+0xa0>
   4399c:	stp	x19, x20, [sp, #16]
   439a0:	stp	x21, x22, [sp, #32]
   439a4:	stp	x23, x24, [sp, #48]
   439a8:	mov	x20, x0
   439ac:	mov	x22, x4
   439b0:	mov	x19, x5
   439b4:	ldr	x23, [x0, #8]
   439b8:	cbz	x23, 43a68 <verify_constraints@@Base+0xd8>
   439bc:	ldr	w0, [x23, #128]
   439c0:	cbnz	w0, 43a94 <verify_constraints@@Base+0x104>
   439c4:	ldr	x1, [x5]
   439c8:	cbz	x1, 44078 <verify_constraints@@Base+0x6e8>
   439cc:	ldr	x1, [x23, #120]
   439d0:	tbz	w1, #31, 43aa0 <verify_constraints@@Base+0x110>
   439d4:	mov	w0, #0x2                   	// #2
   439d8:	str	w0, [x22]
   439dc:	mov	w2, #0x5                   	// #5
   439e0:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   439e4:	add	x1, x1, #0x518
   439e8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   439ec:	add	x0, x0, #0x908
   439f0:	bl	359e0 <dcgettext@plt>
   439f4:	str	x0, [x22, #8]
   439f8:	mov	w0, #0xffffffff            	// #-1
   439fc:	str	w0, [x22, #4]
   43a00:	mov	w0, #0x1                   	// #1
   43a04:	str	w0, [x22, #28]
   43a08:	mov	w21, #0x4                   	// #4
   43a0c:	mov	x1, x19
   43a10:	mov	x0, x20
   43a14:	bl	35830 <init_insn_sequence@plt>
   43a18:	mov	w0, w21
   43a1c:	ldp	x19, x20, [sp, #16]
   43a20:	ldp	x21, x22, [sp, #32]
   43a24:	ldp	x23, x24, [sp, #48]
   43a28:	ldp	x29, x30, [sp], #304
   43a2c:	ret
   43a30:	stp	x19, x20, [sp, #16]
   43a34:	stp	x21, x22, [sp, #32]
   43a38:	stp	x23, x24, [sp, #48]
   43a3c:	stp	x25, x26, [sp, #64]
   43a40:	stp	x27, x28, [sp, #80]
   43a44:	adrp	x3, 60000 <xexit@@Base+0x774c>
   43a48:	add	x3, x3, #0x78
   43a4c:	add	x3, x3, #0x160
   43a50:	mov	w2, #0x12ff                	// #4863
   43a54:	adrp	x1, 59000 <xexit@@Base+0x74c>
   43a58:	add	x1, x1, #0xe98
   43a5c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   43a60:	add	x0, x0, #0x500
   43a64:	bl	35ac0 <__assert_fail@plt>
   43a68:	stp	x25, x26, [sp, #64]
   43a6c:	stp	x27, x28, [sp, #80]
   43a70:	adrp	x3, 60000 <xexit@@Base+0x774c>
   43a74:	add	x3, x3, #0x78
   43a78:	add	x3, x3, #0x160
   43a7c:	mov	w2, #0x1300                	// #4864
   43a80:	adrp	x1, 59000 <xexit@@Base+0x74c>
   43a84:	add	x1, x1, #0xe98
   43a88:	adrp	x0, 59000 <xexit@@Base+0x74c>
   43a8c:	add	x0, x0, #0xf68
   43a90:	bl	35ac0 <__assert_fail@plt>
   43a94:	cbz	x5, 43b74 <verify_constraints@@Base+0x1e4>
   43a98:	ldr	x1, [x23, #120]
   43a9c:	tbnz	w1, #31, 43ba0 <verify_constraints@@Base+0x210>
   43aa0:	ldr	x1, [x19]
   43aa4:	cbz	x1, 44080 <verify_constraints@@Base+0x6f0>
   43aa8:	ldr	x4, [x1, #8]
   43aac:	cmp	w3, #0x0
   43ab0:	ccmp	x2, #0x0, #0x0, eq  // eq = none
   43ab4:	b.eq	43bb0 <verify_constraints@@Base+0x220>  // b.none
   43ab8:	ldr	w2, [x4, #128]
   43abc:	and	w21, w2, #0x1
   43ac0:	tbz	w2, #0, 43c30 <verify_constraints@@Base+0x2a0>
   43ac4:	ldr	x2, [x23, #24]
   43ac8:	cbz	x2, 43bf8 <verify_constraints@@Base+0x268>
   43acc:	ldr	x2, [x2]
   43ad0:	and	x2, x2, #0x1ffffff0
   43ad4:	and	x2, x2, #0xfffffffff000001f
   43ad8:	cbz	x2, 43bf8 <verify_constraints@@Base+0x268>
   43adc:	tbz	w0, #0, 43c70 <verify_constraints@@Base+0x2e0>
   43ae0:	stp	x25, x26, [sp, #64]
   43ae4:	stp	x27, x28, [sp, #80]
   43ae8:	ldr	w0, [x1, #24]
   43aec:	ldrb	w2, [x1, #28]
   43af0:	str	w2, [sp, #124]
   43af4:	ldr	w2, [x1, #40]
   43af8:	str	w2, [sp, #108]
   43afc:	stp	xzr, xzr, [sp, #136]
   43b00:	stp	xzr, xzr, [sp, #152]
   43b04:	stp	xzr, xzr, [sp, #168]
   43b08:	str	xzr, [sp, #184]
   43b0c:	stp	xzr, xzr, [sp, #192]
   43b10:	stp	xzr, xzr, [sp, #208]
   43b14:	stp	xzr, xzr, [sp, #224]
   43b18:	str	xzr, [sp, #240]
   43b1c:	cmp	w0, #0xc1
   43b20:	b.ne	43ca8 <verify_constraints@@Base+0x318>  // b.any
   43b24:	ldr	w0, [x1, #80]
   43b28:	str	wzr, [sp, #116]
   43b2c:	cmp	w0, #0xa4
   43b30:	b.eq	43ccc <verify_constraints@@Base+0x33c>  // b.none
   43b34:	mov	x0, x23
   43b38:	bl	35170 <aarch64_num_of_operands@plt>
   43b3c:	mov	w27, w0
   43b40:	cmp	w0, #0x0
   43b44:	b.le	43e80 <verify_constraints@@Base+0x4f0>
   43b48:	add	x21, x20, #0x18
   43b4c:	mov	w0, #0xffffffff            	// #-1
   43b50:	str	w0, [sp, #104]
   43b54:	mov	w24, #0x0                   	// #0
   43b58:	str	wzr, [sp, #120]
   43b5c:	str	wzr, [sp, #112]
   43b60:	mov	w28, #0x0                   	// #0
   43b64:	mov	x26, #0x1                   	// #1
   43b68:	mov	x25, #0xcc000000            	// #3422552064
   43b6c:	movk	x25, #0x241, lsl #32
   43b70:	b	43d18 <verify_constraints@@Base+0x388>
   43b74:	stp	x25, x26, [sp, #64]
   43b78:	stp	x27, x28, [sp, #80]
   43b7c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   43b80:	add	x3, x3, #0x78
   43b84:	add	x3, x3, #0x160
   43b88:	mov	w2, #0x1306                	// #4870
   43b8c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   43b90:	add	x1, x1, #0xe98
   43b94:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   43b98:	add	x0, x0, #0x508
   43b9c:	bl	35ac0 <__assert_fail@plt>
   43ba0:	ldr	x0, [x5]
   43ba4:	mov	w21, #0x0                   	// #0
   43ba8:	cbz	x0, 43a0c <verify_constraints@@Base+0x7c>
   43bac:	b	439d4 <verify_constraints@@Base+0x44>
   43bb0:	mov	w0, #0x2                   	// #2
   43bb4:	str	w0, [x22]
   43bb8:	mov	w2, #0x5                   	// #5
   43bbc:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   43bc0:	add	x1, x1, #0x560
   43bc4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   43bc8:	add	x0, x0, #0x908
   43bcc:	bl	359e0 <dcgettext@plt>
   43bd0:	str	x0, [x22, #8]
   43bd4:	mov	w0, #0xffffffff            	// #-1
   43bd8:	str	w0, [x22, #4]
   43bdc:	mov	w0, #0x1                   	// #1
   43be0:	str	w0, [x22, #28]
   43be4:	mov	x1, x19
   43be8:	mov	x0, #0x0                   	// #0
   43bec:	bl	35830 <init_insn_sequence@plt>
   43bf0:	mov	w21, #0x4                   	// #4
   43bf4:	b	43a18 <verify_constraints@@Base+0x88>
   43bf8:	mov	w0, #0x2                   	// #2
   43bfc:	str	w0, [x22]
   43c00:	mov	w2, #0x5                   	// #5
   43c04:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   43c08:	add	x1, x1, #0x588
   43c0c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   43c10:	add	x0, x0, #0x908
   43c14:	bl	359e0 <dcgettext@plt>
   43c18:	str	x0, [x22, #8]
   43c1c:	mov	w0, #0xffffffff            	// #-1
   43c20:	str	w0, [x22, #4]
   43c24:	mov	w0, #0x1                   	// #1
   43c28:	str	w0, [x22, #28]
   43c2c:	mov	w21, #0x4                   	// #4
   43c30:	ldr	x3, [x19, #16]
   43c34:	ldr	w0, [x19, #24]
   43c38:	add	w1, w0, #0x1
   43c3c:	str	w1, [x19, #24]
   43c40:	mov	x2, #0x168                 	// #360
   43c44:	mov	x1, x20
   43c48:	add	x0, x3, w0, sxtw #3
   43c4c:	bl	35050 <memcpy@plt>
   43c50:	ldr	w1, [x19, #24]
   43c54:	ldr	w0, [x19, #8]
   43c58:	cmp	w1, w0
   43c5c:	b.lt	43a18 <verify_constraints@@Base+0x88>  // b.tstop
   43c60:	mov	x1, x19
   43c64:	mov	x0, #0x0                   	// #0
   43c68:	bl	35830 <init_insn_sequence@plt>
   43c6c:	b	43a18 <verify_constraints@@Base+0x88>
   43c70:	mov	w0, #0x2                   	// #2
   43c74:	str	w0, [x22]
   43c78:	mov	w2, #0x5                   	// #5
   43c7c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   43c80:	add	x1, x1, #0x5b8
   43c84:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   43c88:	add	x0, x0, #0x908
   43c8c:	bl	359e0 <dcgettext@plt>
   43c90:	str	x0, [x22, #8]
   43c94:	mov	w0, #0xffffffff            	// #-1
   43c98:	str	w0, [x22, #4]
   43c9c:	mov	w0, #0x1                   	// #1
   43ca0:	str	w0, [x22, #28]
   43ca4:	b	43c2c <verify_constraints@@Base+0x29c>
   43ca8:	adrp	x3, 60000 <xexit@@Base+0x774c>
   43cac:	add	x3, x3, #0x78
   43cb0:	add	x3, x3, #0x160
   43cb4:	mov	w2, #0x1352                	// #4946
   43cb8:	adrp	x1, 59000 <xexit@@Base+0x74c>
   43cbc:	add	x1, x1, #0xe98
   43cc0:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   43cc4:	add	x0, x0, #0x5e8
   43cc8:	bl	35ac0 <__assert_fail@plt>
   43ccc:	ldp	x2, x3, [x1, #80]
   43cd0:	stp	x2, x3, [sp, #136]
   43cd4:	ldp	x2, x3, [x1, #96]
   43cd8:	stp	x2, x3, [sp, #152]
   43cdc:	ldp	x2, x3, [x1, #112]
   43ce0:	stp	x2, x3, [sp, #168]
   43ce4:	ldr	x0, [x1, #128]
   43ce8:	str	x0, [sp, #184]
   43cec:	mov	w0, #0x1                   	// #1
   43cf0:	str	w0, [sp, #116]
   43cf4:	b	43b34 <verify_constraints@@Base+0x1a4>
   43cf8:	cmp	w1, #0x19
   43cfc:	b.hi	43d74 <verify_constraints@@Base+0x3e4>  // b.pmore
   43d00:	cmp	w1, #0x16
   43d04:	b.hi	43d80 <verify_constraints@@Base+0x3f0>  // b.pmore
   43d08:	add	w24, w24, #0x1
   43d0c:	add	x21, x21, #0x38
   43d10:	cmp	w27, w24
   43d14:	b.eq	43dec <verify_constraints@@Base+0x45c>  // b.none
   43d18:	ldp	x0, x1, [x21]
   43d1c:	stp	x0, x1, [sp, #248]
   43d20:	ldp	x0, x1, [x21, #16]
   43d24:	add	x2, sp, #0x200
   43d28:	stp	x0, x1, [x2, #-248]
   43d2c:	ldp	x0, x1, [x21, #32]
   43d30:	stp	x0, x1, [x2, #-232]
   43d34:	ldr	x0, [x21, #48]
   43d38:	str	x0, [sp, #296]
   43d3c:	ldrb	w0, [x21, #4]
   43d40:	ldr	w2, [x21, #16]
   43d44:	ldr	w1, [x21]
   43d48:	cmp	w1, #0xcc
   43d4c:	b.hi	43d08 <verify_constraints@@Base+0x378>  // b.pmore
   43d50:	cmp	w1, #0xa2
   43d54:	b.ls	43cf8 <verify_constraints@@Base+0x368>  // b.plast
   43d58:	sub	w1, w1, #0xa3
   43d5c:	lsl	x1, x26, x1
   43d60:	tst	w1, #0xff
   43d64:	b.ne	43db4 <verify_constraints@@Base+0x424>  // b.any
   43d68:	tst	x1, x25
   43d6c:	b.eq	43d08 <verify_constraints@@Base+0x378>  // b.none
   43d70:	b	43d80 <verify_constraints@@Base+0x3f0>
   43d74:	sub	w1, w1, #0x1b
   43d78:	cmp	w1, #0x1
   43d7c:	b.hi	43d08 <verify_constraints@@Base+0x378>  // b.pmore
   43d80:	ldr	w1, [sp, #108]
   43d84:	cmp	w2, w1
   43d88:	b.eq	43da0 <verify_constraints@@Base+0x410>  // b.none
   43d8c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43d90:	cmp	w28, w0, uxtb
   43d94:	csel	w28, w28, w0, hi  // hi = pmore
   43d98:	and	w28, w28, #0xff
   43d9c:	b	43d08 <verify_constraints@@Base+0x378>
   43da0:	ldr	w1, [sp, #112]
   43da4:	add	w1, w1, #0x1
   43da8:	str	w1, [sp, #112]
   43dac:	str	w24, [sp, #120]
   43db0:	b	43d8c <verify_constraints@@Base+0x3fc>
   43db4:	strb	w0, [sp, #252]
   43db8:	str	w2, [sp, #264]
   43dbc:	ldp	x0, x1, [sp, #248]
   43dc0:	stp	x0, x1, [sp, #192]
   43dc4:	add	x0, sp, #0x200
   43dc8:	ldp	x0, x1, [x0, #-248]
   43dcc:	stp	x0, x1, [sp, #208]
   43dd0:	add	x0, sp, #0x200
   43dd4:	ldp	x0, x1, [x0, #-232]
   43dd8:	stp	x0, x1, [sp, #224]
   43ddc:	ldr	x0, [sp, #296]
   43de0:	str	x0, [sp, #240]
   43de4:	str	w24, [sp, #104]
   43de8:	b	43d08 <verify_constraints@@Base+0x378>
   43dec:	cbz	w28, 43e80 <verify_constraints@@Base+0x4f0>
   43df0:	ldrb	w24, [x20, #28]
   43df4:	ldr	w21, [x20, #40]
   43df8:	ldr	w0, [x23, #128]
   43dfc:	tbz	w0, #1, 43ea4 <verify_constraints@@Base+0x514>
   43e00:	ldr	w0, [sp, #116]
   43e04:	cbz	w0, 43e2c <verify_constraints@@Base+0x49c>
   43e08:	ldr	w0, [sp, #104]
   43e0c:	tbnz	w0, #31, 43eb4 <verify_constraints@@Base+0x524>
   43e10:	ldrb	w0, [sp, #196]
   43e14:	cmp	w0, #0x18
   43e18:	b.ne	43ef4 <verify_constraints@@Base+0x564>  // b.any
   43e1c:	ldr	w1, [sp, #152]
   43e20:	ldr	w0, [sp, #208]
   43e24:	cmp	w1, w0
   43e28:	b.ne	43f34 <verify_constraints@@Base+0x5a4>  // b.any
   43e2c:	mov	x0, x23
   43e30:	bl	35610 <aarch64_is_destructive_by_operands@plt>
   43e34:	cmp	w0, #0x0
   43e38:	cset	w0, ne  // ne = any
   43e3c:	add	w0, w0, #0x1
   43e40:	ldr	w1, [sp, #112]
   43e44:	cbz	w1, 43f74 <verify_constraints@@Base+0x5e4>
   43e48:	ldr	w1, [sp, #108]
   43e4c:	cmp	w1, w21
   43e50:	b.ne	43fb0 <verify_constraints@@Base+0x620>  // b.any
   43e54:	ldr	w1, [sp, #112]
   43e58:	cmp	w1, w0
   43e5c:	b.gt	43fec <verify_constraints@@Base+0x65c>
   43e60:	ldr	w0, [sp, #124]
   43e64:	cmp	w0, #0x0
   43e68:	ccmp	w24, #0x0, #0x4, ne  // ne = any
   43e6c:	b.ne	4402c <verify_constraints@@Base+0x69c>  // b.any
   43e70:	mov	w21, #0x0                   	// #0
   43e74:	ldp	x25, x26, [sp, #64]
   43e78:	ldp	x27, x28, [sp, #80]
   43e7c:	b	43c30 <verify_constraints@@Base+0x2a0>
   43e80:	adrp	x3, 60000 <xexit@@Base+0x774c>
   43e84:	add	x3, x3, #0x78
   43e88:	add	x3, x3, #0x160
   43e8c:	mov	w2, #0x138b                	// #5003
   43e90:	adrp	x1, 59000 <xexit@@Base+0x74c>
   43e94:	add	x1, x1, #0xe98
   43e98:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   43e9c:	add	x0, x0, #0x610
   43ea0:	bl	35ac0 <__assert_fail@plt>
   43ea4:	mov	w0, w24
   43ea8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   43eac:	and	w28, w0, #0xff
   43eb0:	b	43e00 <verify_constraints@@Base+0x470>
   43eb4:	mov	w0, #0x2                   	// #2
   43eb8:	str	w0, [x22]
   43ebc:	mov	w2, #0x5                   	// #5
   43ec0:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   43ec4:	add	x1, x1, #0x628
   43ec8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   43ecc:	add	x0, x0, #0x908
   43ed0:	bl	359e0 <dcgettext@plt>
   43ed4:	str	x0, [x22, #8]
   43ed8:	mov	w0, #0xffffffff            	// #-1
   43edc:	str	w0, [x22, #4]
   43ee0:	mov	w0, #0x1                   	// #1
   43ee4:	str	w0, [x22, #28]
   43ee8:	ldp	x25, x26, [sp, #64]
   43eec:	ldp	x27, x28, [sp, #80]
   43ef0:	b	43c2c <verify_constraints@@Base+0x29c>
   43ef4:	mov	w0, #0x2                   	// #2
   43ef8:	str	w0, [x22]
   43efc:	mov	w2, #0x5                   	// #5
   43f00:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   43f04:	add	x1, x1, #0x658
   43f08:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   43f0c:	add	x0, x0, #0x908
   43f10:	bl	359e0 <dcgettext@plt>
   43f14:	str	x0, [x22, #8]
   43f18:	ldr	w0, [sp, #104]
   43f1c:	str	w0, [x22, #4]
   43f20:	mov	w0, #0x1                   	// #1
   43f24:	str	w0, [x22, #28]
   43f28:	ldp	x25, x26, [sp, #64]
   43f2c:	ldp	x27, x28, [sp, #80]
   43f30:	b	43c2c <verify_constraints@@Base+0x29c>
   43f34:	mov	w0, #0x2                   	// #2
   43f38:	str	w0, [x22]
   43f3c:	mov	w2, #0x5                   	// #5
   43f40:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   43f44:	add	x1, x1, #0x690
   43f48:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   43f4c:	add	x0, x0, #0x908
   43f50:	bl	359e0 <dcgettext@plt>
   43f54:	str	x0, [x22, #8]
   43f58:	ldr	w0, [sp, #104]
   43f5c:	str	w0, [x22, #4]
   43f60:	mov	w0, #0x1                   	// #1
   43f64:	str	w0, [x22, #28]
   43f68:	ldp	x25, x26, [sp, #64]
   43f6c:	ldp	x27, x28, [sp, #80]
   43f70:	b	43c2c <verify_constraints@@Base+0x29c>
   43f74:	mov	w0, #0x2                   	// #2
   43f78:	str	w0, [x22]
   43f7c:	mov	w2, #0x5                   	// #5
   43f80:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   43f84:	add	x1, x1, #0x6d0
   43f88:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   43f8c:	add	x0, x0, #0x908
   43f90:	bl	359e0 <dcgettext@plt>
   43f94:	str	x0, [x22, #8]
   43f98:	str	wzr, [x22, #4]
   43f9c:	mov	w0, #0x1                   	// #1
   43fa0:	str	w0, [x22, #28]
   43fa4:	ldp	x25, x26, [sp, #64]
   43fa8:	ldp	x27, x28, [sp, #80]
   43fac:	b	43c2c <verify_constraints@@Base+0x29c>
   43fb0:	mov	w0, #0x2                   	// #2
   43fb4:	str	w0, [x22]
   43fb8:	mov	w2, #0x5                   	// #5
   43fbc:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   43fc0:	add	x1, x1, #0x718
   43fc4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   43fc8:	add	x0, x0, #0x908
   43fcc:	bl	359e0 <dcgettext@plt>
   43fd0:	str	x0, [x22, #8]
   43fd4:	str	wzr, [x22, #4]
   43fd8:	mov	w0, #0x1                   	// #1
   43fdc:	str	w0, [x22, #28]
   43fe0:	ldp	x25, x26, [sp, #64]
   43fe4:	ldp	x27, x28, [sp, #80]
   43fe8:	b	43c2c <verify_constraints@@Base+0x29c>
   43fec:	mov	w0, #0x2                   	// #2
   43ff0:	str	w0, [x22]
   43ff4:	mov	w2, #0x5                   	// #5
   43ff8:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   43ffc:	add	x1, x1, #0x758
   44000:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44004:	add	x0, x0, #0x908
   44008:	bl	359e0 <dcgettext@plt>
   4400c:	str	x0, [x22, #8]
   44010:	ldr	w0, [sp, #120]
   44014:	str	w0, [x22, #4]
   44018:	mov	w0, #0x1                   	// #1
   4401c:	str	w0, [x22, #28]
   44020:	ldp	x25, x26, [sp, #64]
   44024:	ldp	x27, x28, [sp, #80]
   44028:	b	43c2c <verify_constraints@@Base+0x29c>
   4402c:	ldrb	w0, [sp, #124]
   44030:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44034:	cmp	w28, w0, uxtb
   44038:	b.eq	43e70 <verify_constraints@@Base+0x4e0>  // b.none
   4403c:	mov	w0, #0x2                   	// #2
   44040:	str	w0, [x22]
   44044:	mov	w2, #0x5                   	// #5
   44048:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   4404c:	add	x1, x1, #0x790
   44050:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44054:	add	x0, x0, #0x908
   44058:	bl	359e0 <dcgettext@plt>
   4405c:	str	x0, [x22, #8]
   44060:	str	wzr, [x22, #4]
   44064:	mov	w0, #0x1                   	// #1
   44068:	str	w0, [x22, #28]
   4406c:	ldp	x25, x26, [sp, #64]
   44070:	ldp	x27, x28, [sp, #80]
   44074:	b	43c2c <verify_constraints@@Base+0x29c>
   44078:	mov	w21, w0
   4407c:	b	43a18 <verify_constraints@@Base+0x88>
   44080:	mov	w21, #0x0                   	// #0
   44084:	b	43a18 <verify_constraints@@Base+0x88>

0000000000044088 <aarch64_sve_dupm_mov_immediate_p@@Base>:
   44088:	mov	x2, x0
   4408c:	lsl	w0, w1, #2
   44090:	mov	x3, #0xffffffffffffffff    	// #-1
   44094:	lsl	x3, x3, x0
   44098:	lsl	x3, x3, x0
   4409c:	tst	x3, x2
   440a0:	b.eq	440b0 <aarch64_sve_dupm_mov_immediate_p@@Base+0x28>  // b.none
   440a4:	mov	w0, #0x0                   	// #0
   440a8:	bics	xzr, x3, x2
   440ac:	b.ne	440ec <aarch64_sve_dupm_mov_immediate_p@@Base+0x64>  // b.any
   440b0:	cmp	w1, #0x4
   440b4:	b.le	440f0 <aarch64_sve_dupm_mov_immediate_p@@Base+0x68>
   440b8:	lsr	x0, x2, #32
   440bc:	mov	x1, x2
   440c0:	cmp	w2, w0
   440c4:	b.eq	44124 <aarch64_sve_dupm_mov_immediate_p@@Base+0x9c>  // b.none
   440c8:	tst	w1, #0xff
   440cc:	b.ne	440e0 <aarch64_sve_dupm_mov_immediate_p@@Base+0x58>  // b.any
   440d0:	add	x0, x1, #0xff
   440d4:	cmp	x1, #0x0
   440d8:	csel	x1, x0, x1, lt  // lt = tstop
   440dc:	asr	x1, x1, #8
   440e0:	add	x1, x1, #0x80
   440e4:	cmp	x1, #0xff
   440e8:	cset	w0, hi  // hi = pmore
   440ec:	ret
   440f0:	cmp	w1, #0x2
   440f4:	b.gt	4411c <aarch64_sve_dupm_mov_immediate_p@@Base+0x94>
   440f8:	mov	w0, #0x0                   	// #0
   440fc:	cmp	w1, #0x1
   44100:	b.eq	440ec <aarch64_sve_dupm_mov_immediate_p@@Base+0x64>  // b.none
   44104:	sxth	x1, w2
   44108:	ubfx	w3, w2, #8, #8
   4410c:	mov	w0, #0x0                   	// #0
   44110:	cmp	w3, w2, uxtb
   44114:	b.ne	440c8 <aarch64_sve_dupm_mov_immediate_p@@Base+0x40>  // b.any
   44118:	b	440ec <aarch64_sve_dupm_mov_immediate_p@@Base+0x64>
   4411c:	sxtw	x1, w2
   44120:	b	44128 <aarch64_sve_dupm_mov_immediate_p@@Base+0xa0>
   44124:	sxtw	x1, w2
   44128:	lsr	w0, w2, #16
   4412c:	cmp	w0, w2, uxth
   44130:	b.ne	440c8 <aarch64_sve_dupm_mov_immediate_p@@Base+0x40>  // b.any
   44134:	sxth	x1, w2
   44138:	b	44108 <aarch64_sve_dupm_mov_immediate_p@@Base+0x80>

000000000004413c <aarch64_match_operands_constraint@@Base>:
   4413c:	stp	x29, x30, [sp, #-144]!
   44140:	mov	x29, sp
   44144:	stp	x19, x20, [sp, #16]
   44148:	stp	x21, x22, [sp, #32]
   4414c:	mov	x19, x0
   44150:	mov	x22, x1
   44154:	ldr	x1, [x0, #8]
   44158:	ldrb	w2, [x1, #132]
   4415c:	cbz	w2, 441a8 <aarch64_match_operands_constraint@@Base+0x6c>
   44160:	sbfiz	x0, x2, #3, #32
   44164:	sub	x0, x0, w2, sxtw
   44168:	add	x0, x19, x0, lsl #3
   4416c:	ldr	w3, [x19, #40]
   44170:	ldr	w0, [x0, #40]
   44174:	cmp	w3, w0
   44178:	b.eq	441a8 <aarch64_match_operands_constraint@@Base+0x6c>  // b.none
   4417c:	mov	w0, #0x0                   	// #0
   44180:	cbz	x22, 44198 <aarch64_match_operands_constraint@@Base+0x5c>
   44184:	mov	w0, #0x5                   	// #5
   44188:	str	w0, [x22]
   4418c:	str	w2, [x22, #4]
   44190:	str	xzr, [x22, #8]
   44194:	mov	w0, #0x0                   	// #0
   44198:	ldp	x19, x20, [sp, #16]
   4419c:	ldp	x21, x22, [sp, #32]
   441a0:	ldp	x29, x30, [sp], #144
   441a4:	ret
   441a8:	add	x3, sp, #0x80
   441ac:	mov	w2, #0xffffffff            	// #-1
   441b0:	add	x1, x1, #0x38
   441b4:	mov	x0, x19
   441b8:	bl	35360 <aarch64_find_best_match@plt>
   441bc:	cbz	w0, 46db0 <aarch64_match_operands_constraint@@Base+0x2c74>
   441c0:	ldr	x0, [x19, #8]
   441c4:	ldr	x1, [x0, #120]
   441c8:	tbnz	w1, #28, 44234 <aarch64_match_operands_constraint@@Base+0xf8>
   441cc:	stp	x23, x24, [sp, #48]
   441d0:	stp	x25, x26, [sp, #64]
   441d4:	stp	x27, x28, [sp, #80]
   441d8:	ldr	x3, [x19, #8]
   441dc:	add	x1, x19, #0x1c
   441e0:	mov	x0, #0x1                   	// #1
   441e4:	add	x3, x3, #0x1c
   441e8:	add	x4, sp, #0x80
   441ec:	ldr	w2, [x3, x0, lsl #2]
   441f0:	cbz	w2, 4420c <aarch64_match_operands_constraint@@Base+0xd0>
   441f4:	add	x2, x0, x4
   441f8:	ldurb	w2, [x2, #-1]
   441fc:	strb	w2, [x1], #56
   44200:	add	x0, x0, #0x1
   44204:	cmp	x0, #0x7
   44208:	b.ne	441ec <aarch64_match_operands_constraint@@Base+0xb0>  // b.any
   4420c:	add	x23, x19, #0x18
   44210:	mov	w21, #0x0                   	// #0
   44214:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   44218:	ldr	x27, [x0, #4032]
   4421c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   44220:	ldr	x0, [x0, #3944]
   44224:	str	x0, [sp, #104]
   44228:	add	x0, sp, #0x80
   4422c:	str	x0, [sp, #112]
   44230:	b	44704 <aarch64_match_operands_constraint@@Base+0x5c8>
   44234:	bl	35170 <aarch64_num_of_operands@plt>
   44238:	cmp	w0, #0x0
   4423c:	b.le	4428c <aarch64_match_operands_constraint@@Base+0x150>
   44240:	add	x1, x19, #0x1c
   44244:	add	x2, sp, #0x80
   44248:	sub	w0, w0, #0x1
   4424c:	lsl	x4, x0, #3
   44250:	sub	x4, x4, x0
   44254:	add	x0, x19, #0x54
   44258:	add	x4, x0, x4, lsl #3
   4425c:	ldrb	w3, [x1]
   44260:	ldrb	w0, [x2]
   44264:	cmp	w3, w0
   44268:	b.ne	46db0 <aarch64_match_operands_constraint@@Base+0x2c74>  // b.any
   4426c:	add	x1, x1, #0x38
   44270:	add	x2, x2, #0x1
   44274:	cmp	x1, x4
   44278:	b.ne	4425c <aarch64_match_operands_constraint@@Base+0x120>  // b.any
   4427c:	stp	x23, x24, [sp, #48]
   44280:	stp	x25, x26, [sp, #64]
   44284:	stp	x27, x28, [sp, #80]
   44288:	b	441d8 <aarch64_match_operands_constraint@@Base+0x9c>
   4428c:	stp	x23, x24, [sp, #48]
   44290:	stp	x25, x26, [sp, #64]
   44294:	stp	x27, x28, [sp, #80]
   44298:	b	441d8 <aarch64_match_operands_constraint@@Base+0x9c>
   4429c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   442a0:	add	x3, x3, #0x78
   442a4:	add	x3, x3, #0x178
   442a8:	mov	w2, #0x5b3                 	// #1459
   442ac:	adrp	x1, 59000 <xexit@@Base+0x74c>
   442b0:	add	x1, x1, #0xe98
   442b4:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   442b8:	add	x0, x0, #0x7c8
   442bc:	bl	35ac0 <__assert_fail@plt>
   442c0:	cmp	w0, #0x1
   442c4:	b.eq	44394 <aarch64_match_operands_constraint@@Base+0x258>  // b.none
   442c8:	cmp	w0, #0x2
   442cc:	b.ne	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.any
   442d0:	sub	w0, w21, #0x1
   442d4:	cmp	w0, #0x1
   442d8:	b.hi	46a64 <aarch64_match_operands_constraint@@Base+0x2928>  // b.pmore
   442dc:	cmp	w20, #0xe
   442e0:	b.eq	46a88 <aarch64_match_operands_constraint@@Base+0x294c>  // b.none
   442e4:	cmp	w20, #0xf
   442e8:	b.eq	46c30 <aarch64_match_operands_constraint@@Base+0x2af4>  // b.none
   442ec:	add	w21, w21, #0x1
   442f0:	add	x23, x23, #0x38
   442f4:	b	44704 <aarch64_match_operands_constraint@@Base+0x5c8>
   442f8:	cmp	w0, #0xc
   442fc:	b.eq	46848 <aarch64_match_operands_constraint@@Base+0x270c>  // b.none
   44300:	b.ls	44340 <aarch64_match_operands_constraint@@Base+0x204>  // b.plast
   44304:	cmp	w0, #0xd
   44308:	b.ne	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.any
   4430c:	cmp	w20, #0x4d
   44310:	b.ne	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.any
   44314:	ldr	x0, [x23, #16]
   44318:	ldr	w0, [x0, #32]
   4431c:	and	w0, w0, #0xe
   44320:	cmp	x22, #0x0
   44324:	ccmp	w0, #0xe, #0x0, ne  // ne = any
   44328:	b.ne	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.any
   4432c:	mov	w0, #0x2                   	// #2
   44330:	str	w0, [x22]
   44334:	str	w21, [x22, #4]
   44338:	str	xzr, [x22, #8]
   4433c:	b	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   44340:	cmp	w0, #0xa
   44344:	b.eq	448fc <aarch64_match_operands_constraint@@Base+0x7c0>  // b.none
   44348:	cmp	w0, #0xb
   4434c:	b.ne	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.any
   44350:	ldr	x3, [x23, #16]
   44354:	sbfiz	x0, x26, #5, #32
   44358:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   4435c:	ldr	x1, [x1, #3776]
   44360:	add	x0, x1, x0
   44364:	ldr	w2, [x0, #24]
   44368:	cmp	w2, #0x2
   4436c:	b.eq	456e8 <aarch64_match_operands_constraint@@Base+0x15ac>  // b.none
   44370:	sub	w1, w20, #0x2b
   44374:	cmp	w1, #0xa3
   44378:	b.hi	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.pmore
   4437c:	adrp	x0, 5f000 <xexit@@Base+0x674c>
   44380:	add	x0, x0, #0xea0
   44384:	ldrh	w0, [x0, w1, uxtw #1]
   44388:	adr	x1, 44394 <aarch64_match_operands_constraint@@Base+0x258>
   4438c:	add	x0, x1, w0, sxth #2
   44390:	br	x0
   44394:	cmp	w20, #0xd
   44398:	b.eq	443ec <aarch64_match_operands_constraint@@Base+0x2b0>  // b.none
   4439c:	cmp	w20, #0x9
   443a0:	b.eq	444a4 <aarch64_match_operands_constraint@@Base+0x368>  // b.none
   443a4:	sub	w26, w26, #0x3
   443a8:	cmp	w26, #0x1
   443ac:	b.hi	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.pmore
   443b0:	mov	x0, x25
   443b4:	bl	35740 <aarch64_stack_pointer_p@plt>
   443b8:	cbnz	w0, 446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   443bc:	mov	w2, #0x5                   	// #5
   443c0:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   443c4:	add	x1, x1, #0x8f0
   443c8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   443cc:	add	x0, x0, #0x908
   443d0:	bl	359e0 <dcgettext@plt>
   443d4:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   443d8:	mov	w1, #0x9                   	// #9
   443dc:	str	w1, [x22]
   443e0:	str	w21, [x22, #4]
   443e4:	str	x0, [x22, #8]
   443e8:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   443ec:	and	w0, w21, #0xfffffffd
   443f0:	cmp	w0, #0x1
   443f4:	b.ne	4441c <aarch64_match_operands_constraint@@Base+0x2e0>  // b.any
   443f8:	ldur	w0, [x23, #-40]
   443fc:	tbnz	w0, #0, 44440 <aarch64_match_operands_constraint@@Base+0x304>
   44400:	add	w0, w0, #0x1
   44404:	ldr	w1, [x23, #16]
   44408:	cmp	w1, w0
   4440c:	b.ne	44474 <aarch64_match_operands_constraint@@Base+0x338>  // b.any
   44410:	add	w21, w21, #0x1
   44414:	add	x23, x23, #0x38
   44418:	b	44704 <aarch64_match_operands_constraint@@Base+0x5c8>
   4441c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   44420:	add	x3, x3, #0x78
   44424:	add	x3, x3, #0x178
   44428:	mov	w2, #0x5bb                 	// #1467
   4442c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   44430:	add	x1, x1, #0xe98
   44434:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   44438:	add	x0, x0, #0x808
   4443c:	bl	35ac0 <__assert_fail@plt>
   44440:	sub	w21, w21, #0x1
   44444:	mov	w2, #0x5                   	// #5
   44448:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   4444c:	add	x1, x1, #0x820
   44450:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44454:	add	x0, x0, #0x908
   44458:	bl	359e0 <dcgettext@plt>
   4445c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44460:	mov	w1, #0x2                   	// #2
   44464:	str	w1, [x22]
   44468:	str	w21, [x22, #4]
   4446c:	str	x0, [x22, #8]
   44470:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44474:	mov	w2, #0x5                   	// #5
   44478:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   4447c:	add	x1, x1, #0x848
   44480:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44484:	add	x0, x0, #0x908
   44488:	bl	359e0 <dcgettext@plt>
   4448c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44490:	mov	w1, #0x2                   	// #2
   44494:	str	w1, [x22]
   44498:	str	w21, [x22, #4]
   4449c:	str	x0, [x22, #8]
   444a0:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   444a4:	cmp	w21, #0x1
   444a8:	b.ne	44504 <aarch64_match_operands_constraint@@Base+0x3c8>  // b.any
   444ac:	ldr	w0, [x19, #24]
   444b0:	bl	35710 <aarch64_get_operand_class@plt>
   444b4:	cmp	w0, #0xc
   444b8:	b.ne	44504 <aarch64_match_operands_constraint@@Base+0x3c8>  // b.any
   444bc:	ldrb	w0, [x19, #128]
   444c0:	tbnz	w0, #1, 44528 <aarch64_match_operands_constraint@@Base+0x3ec>
   444c4:	ldr	x0, [x19, #40]
   444c8:	bl	35a00 <aarch64_sys_ins_reg_has_xt@plt>
   444cc:	cbz	w0, 443a4 <aarch64_match_operands_constraint@@Base+0x268>
   444d0:	mov	w2, #0x5                   	// #5
   444d4:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   444d8:	add	x1, x1, #0x8d8
   444dc:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   444e0:	add	x0, x0, #0x908
   444e4:	bl	359e0 <dcgettext@plt>
   444e8:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   444ec:	mov	w1, #0x9                   	// #9
   444f0:	str	w1, [x22]
   444f4:	mov	w1, #0x1                   	// #1
   444f8:	str	w1, [x22, #4]
   444fc:	str	x0, [x22, #8]
   44500:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44504:	adrp	x3, 60000 <xexit@@Base+0x774c>
   44508:	add	x3, x3, #0x78
   4450c:	add	x3, x3, #0x178
   44510:	mov	w2, #0x5ce                 	// #1486
   44514:	adrp	x1, 59000 <xexit@@Base+0x74c>
   44518:	add	x1, x1, #0xe98
   4451c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   44520:	add	x0, x0, #0x868
   44524:	bl	35ac0 <__assert_fail@plt>
   44528:	ldr	x0, [x19, #40]
   4452c:	bl	35a00 <aarch64_sys_ins_reg_has_xt@plt>
   44530:	cbz	w0, 44540 <aarch64_match_operands_constraint@@Base+0x404>
   44534:	ldrb	w0, [x19, #128]
   44538:	tbnz	w0, #1, 443a4 <aarch64_match_operands_constraint@@Base+0x268>
   4453c:	b	444c4 <aarch64_match_operands_constraint@@Base+0x388>
   44540:	mov	w2, #0x5                   	// #5
   44544:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44548:	add	x1, x1, #0x8c0
   4454c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44550:	add	x0, x0, #0x908
   44554:	bl	359e0 <dcgettext@plt>
   44558:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4455c:	mov	w1, #0x9                   	// #9
   44560:	str	w1, [x22]
   44564:	mov	w1, #0x1                   	// #1
   44568:	str	w1, [x22, #4]
   4456c:	str	x0, [x22, #8]
   44570:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44574:	sub	w20, w20, #0xcb
   44578:	tst	w20, #0xfffffffd
   4457c:	b.ne	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.any
   44580:	ldrb	w1, [x23, #16]
   44584:	ubfx	x1, x1, #5, #3
   44588:	ldr	x0, [x24, #120]
   4458c:	ubfx	w0, w0, #24, #3
   44590:	cmp	w1, w0
   44594:	b.eq	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.none
   44598:	mov	w2, #0x5                   	// #5
   4459c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   445a0:	add	x1, x1, #0x960
   445a4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   445a8:	add	x0, x0, #0x908
   445ac:	bl	359e0 <dcgettext@plt>
   445b0:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   445b4:	mov	w1, #0x9                   	// #9
   445b8:	str	w1, [x22]
   445bc:	str	w21, [x22, #4]
   445c0:	str	x0, [x22, #8]
   445c4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   445c8:	adrp	x3, 60000 <xexit@@Base+0x774c>
   445cc:	add	x3, x3, #0x78
   445d0:	add	x3, x3, #0x1a0
   445d4:	mov	w2, #0x12e                 	// #302
   445d8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   445dc:	add	x1, x1, #0x970
   445e0:	adrp	x0, 59000 <xexit@@Base+0x74c>
   445e4:	add	x0, x0, #0x6f8
   445e8:	bl	35ac0 <__assert_fail@plt>
   445ec:	adrp	x3, 60000 <xexit@@Base+0x774c>
   445f0:	add	x3, x3, #0x78
   445f4:	add	x3, x3, #0x178
   445f8:	mov	w2, #0x5fa                 	// #1530
   445fc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   44600:	add	x1, x1, #0xe98
   44604:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   44608:	add	x0, x0, #0x910
   4460c:	bl	35ac0 <__assert_fail@plt>
   44610:	mov	w2, #0x5                   	// #5
   44614:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44618:	add	x1, x1, #0x928
   4461c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44620:	add	x0, x0, #0x908
   44624:	bl	359e0 <dcgettext@plt>
   44628:	b	44840 <aarch64_match_operands_constraint@@Base+0x704>
   4462c:	ldr	x3, [x25, #24]
   44630:	and	w0, w2, #0xff
   44634:	sub	w0, w0, w1
   44638:	mov	w20, #0x1                   	// #1
   4463c:	lsl	w0, w20, w0
   44640:	sub	w20, w0, #0x1
   44644:	tbnz	x3, #63, 44650 <aarch64_match_operands_constraint@@Base+0x514>
   44648:	cmp	x3, w20, sxtw
   4464c:	b.le	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   44650:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44654:	mov	w2, #0x5                   	// #5
   44658:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   4465c:	add	x1, x1, #0x948
   44660:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44664:	add	x0, x0, #0x908
   44668:	bl	359e0 <dcgettext@plt>
   4466c:	mov	w1, #0x6                   	// #6
   44670:	str	w1, [x22]
   44674:	str	w21, [x22, #4]
   44678:	str	x0, [x22, #8]
   4467c:	str	wzr, [x22, #16]
   44680:	str	w20, [x22, #20]
   44684:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44688:	mov	w0, w26
   4468c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44690:	and	w1, w0, #0xff
   44694:	ldr	x2, [x23, #24]
   44698:	mov	w0, #0x40                  	// #64
   4469c:	sdiv	w0, w0, w1
   446a0:	sub	w20, w0, #0x1
   446a4:	tbnz	x2, #63, 446b0 <aarch64_match_operands_constraint@@Base+0x574>
   446a8:	cmp	x2, w20, sxtw
   446ac:	b.le	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   446b0:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   446b4:	mov	w2, #0x5                   	// #5
   446b8:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   446bc:	add	x1, x1, #0x948
   446c0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   446c4:	add	x0, x0, #0x908
   446c8:	bl	359e0 <dcgettext@plt>
   446cc:	mov	w1, #0x6                   	// #6
   446d0:	str	w1, [x22]
   446d4:	str	w21, [x22, #4]
   446d8:	str	x0, [x22, #8]
   446dc:	str	wzr, [x22, #16]
   446e0:	str	w20, [x22, #20]
   446e4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   446e8:	ldr	w0, [x23, #16]
   446ec:	cmp	w0, #0x7
   446f0:	b.hi	44858 <aarch64_match_operands_constraint@@Base+0x71c>  // b.pmore
   446f4:	add	w21, w21, #0x1
   446f8:	add	x23, x23, #0x38
   446fc:	cmp	w21, #0x6
   44700:	b.eq	46d10 <aarch64_match_operands_constraint@@Base+0x2bd4>  // b.none
   44704:	ldr	x24, [x19, #8]
   44708:	add	x0, x24, w21, sxtw #2
   4470c:	ldr	w20, [x0, #32]
   44710:	cbz	w20, 46d24 <aarch64_match_operands_constraint@@Base+0x2be8>
   44714:	sbfiz	x0, x21, #3, #32
   44718:	sub	x0, x0, w21, sxtw
   4471c:	add	x0, x19, x0, lsl #3
   44720:	ldrb	w0, [x0, #72]
   44724:	tbnz	w0, #0, 446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   44728:	add	x28, x19, #0x18
   4472c:	mov	x25, x23
   44730:	ldrb	w26, [x23, #4]
   44734:	ldr	w0, [x23]
   44738:	cmp	w20, w0
   4473c:	b.ne	4429c <aarch64_match_operands_constraint@@Base+0x160>  // b.any
   44740:	ubfiz	x0, x20, #1, #32
   44744:	add	x0, x0, w20, uxtw
   44748:	lsl	x0, x0, #4
   4474c:	ldr	w0, [x27, x0]
   44750:	cmp	w0, #0x9
   44754:	b.eq	446e8 <aarch64_match_operands_constraint@@Base+0x5ac>  // b.none
   44758:	b.hi	442f8 <aarch64_match_operands_constraint@@Base+0x1bc>  // b.pmore
   4475c:	cmp	w0, #0x5
   44760:	b.eq	46934 <aarch64_match_operands_constraint@@Base+0x27f8>  // b.none
   44764:	b.ls	442c0 <aarch64_match_operands_constraint@@Base+0x184>  // b.plast
   44768:	cmp	w0, #0x7
   4476c:	b.eq	455a4 <aarch64_match_operands_constraint@@Base+0x1468>  // b.none
   44770:	cmp	w0, #0x8
   44774:	b.ne	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.any
   44778:	cmp	w20, #0xca
   4477c:	b.eq	44688 <aarch64_match_operands_constraint@@Base+0x54c>  // b.none
   44780:	b.hi	44574 <aarch64_match_operands_constraint@@Base+0x438>  // b.pmore
   44784:	sub	w0, w20, #0xc4
   44788:	cmp	w0, #0x4
   4478c:	b.hi	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.pmore
   44790:	ubfiz	x1, x20, #1, #32
   44794:	add	x1, x1, w20, uxtw
   44798:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   4479c:	ldr	x0, [x0, #4032]
   447a0:	add	x1, x0, x1, lsl #4
   447a4:	ldr	w0, [x1, #20]
   447a8:	cbz	w0, 445c8 <aarch64_match_operands_constraint@@Base+0x48c>
   447ac:	add	x1, x1, #0x18
   447b0:	mov	w2, #0x0                   	// #0
   447b4:	adrp	x3, a3000 <aarch64_operands@@Base+0x16bc0>
   447b8:	ldr	x3, [x3, #3944]
   447bc:	add	x0, x3, w0, uxtw #3
   447c0:	ldr	w0, [x0, #4]
   447c4:	add	w2, w2, w0
   447c8:	ldr	w0, [x1], #4
   447cc:	cbnz	w0, 447bc <aarch64_match_operands_constraint@@Base+0x680>
   447d0:	sub	w0, w2, #0x1
   447d4:	cmp	w0, #0x1e
   447d8:	b.hi	445c8 <aarch64_match_operands_constraint@@Base+0x48c>  // b.pmore
   447dc:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   447e0:	ldr	x0, [x0, #4032]
   447e4:	ubfiz	x1, x20, #1, #32
   447e8:	add	x20, x1, w20, uxtw
   447ec:	add	x0, x0, x20, lsl #4
   447f0:	ldr	w0, [x0, #16]
   447f4:	ubfx	x1, x0, #5, #3
   447f8:	mov	w0, #0x1                   	// #1
   447fc:	lsl	w0, w0, w1
   44800:	sub	w3, w0, #0x1
   44804:	sxtw	x5, w3
   44808:	ldr	w4, [x25, #16]
   4480c:	cmp	x4, w3, sxtw
   44810:	b.ls	4462c <aarch64_match_operands_constraint@@Base+0x4f0>  // b.plast
   44814:	sub	w0, w0, #0x8
   44818:	tst	w0, #0xfffffff7
   4481c:	b.ne	445ec <aarch64_match_operands_constraint@@Base+0x4b0>  // b.any
   44820:	cmp	x5, #0xf
   44824:	b.eq	44610 <aarch64_match_operands_constraint@@Base+0x4d4>  // b.none
   44828:	mov	w2, #0x5                   	// #5
   4482c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44830:	add	x1, x1, #0x938
   44834:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44838:	add	x0, x0, #0x908
   4483c:	bl	359e0 <dcgettext@plt>
   44840:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44844:	mov	w1, #0x9                   	// #9
   44848:	str	w1, [x22]
   4484c:	str	w21, [x22, #4]
   44850:	str	x0, [x22, #8]
   44854:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44858:	ubfiz	x1, x20, #1, #32
   4485c:	add	x1, x1, w20, uxtw
   44860:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   44864:	ldr	x0, [x0, #4032]
   44868:	add	x1, x0, x1, lsl #4
   4486c:	ldr	w0, [x1, #20]
   44870:	cbz	w0, 448d8 <aarch64_match_operands_constraint@@Base+0x79c>
   44874:	add	x1, x1, #0x18
   44878:	mov	w2, #0x0                   	// #0
   4487c:	ldr	x3, [sp, #104]
   44880:	add	x0, x3, w0, uxtw #3
   44884:	ldr	w0, [x0, #4]
   44888:	add	w2, w2, w0
   4488c:	ldr	w0, [x1], #4
   44890:	cbnz	w0, 4487c <aarch64_match_operands_constraint@@Base+0x740>
   44894:	sub	w0, w2, #0x1
   44898:	cmp	w0, #0x1e
   4489c:	b.hi	448d8 <aarch64_match_operands_constraint@@Base+0x79c>  // b.pmore
   448a0:	cmp	w2, #0x3
   448a4:	b.ne	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.any
   448a8:	mov	w2, #0x5                   	// #5
   448ac:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   448b0:	add	x1, x1, #0x978
   448b4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   448b8:	add	x0, x0, #0x908
   448bc:	bl	359e0 <dcgettext@plt>
   448c0:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   448c4:	mov	w1, #0x9                   	// #9
   448c8:	str	w1, [x22]
   448cc:	str	w21, [x22, #4]
   448d0:	str	x0, [x22, #8]
   448d4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   448d8:	adrp	x3, 60000 <xexit@@Base+0x774c>
   448dc:	add	x3, x3, #0x78
   448e0:	add	x3, x3, #0x1a0
   448e4:	mov	w2, #0x12e                 	// #302
   448e8:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   448ec:	add	x1, x1, #0x970
   448f0:	adrp	x0, 59000 <xexit@@Base+0x74c>
   448f4:	add	x0, x0, #0x6f8
   448f8:	bl	35ac0 <__assert_fail@plt>
   448fc:	ldr	w1, [x24, #16]
   44900:	cmp	w1, #0x3f
   44904:	b.hi	449e0 <aarch64_match_operands_constraint@@Base+0x8a4>  // b.pmore
   44908:	mov	x0, #0x1                   	// #1
   4490c:	lsl	x0, x0, x1
   44910:	mov	x1, #0x6d00000000000000    	// #7854277750134145024
   44914:	tst	x0, x1
   44918:	b.ne	44970 <aarch64_match_operands_constraint@@Base+0x834>  // b.any
   4491c:	mov	x1, #0x280000              	// #2621440
   44920:	movk	x1, #0x8040, lsl #48
   44924:	tst	x0, x1
   44928:	b.ne	449a8 <aarch64_match_operands_constraint@@Base+0x86c>  // b.any
   4492c:	tbz	x0, #55, 449e0 <aarch64_match_operands_constraint@@Base+0x8a4>
   44930:	ldrb	w0, [x23, #28]
   44934:	and	w0, w0, #0x6
   44938:	cmp	w0, #0x2
   4493c:	b.ne	449e8 <aarch64_match_operands_constraint@@Base+0x8ac>  // b.any
   44940:	mov	w2, #0x5                   	// #5
   44944:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44948:	add	x1, x1, #0x988
   4494c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44950:	add	x0, x0, #0x908
   44954:	bl	359e0 <dcgettext@plt>
   44958:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4495c:	mov	w1, #0x2                   	// #2
   44960:	str	w1, [x22]
   44964:	str	w21, [x22, #4]
   44968:	str	x0, [x22, #8]
   4496c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44970:	ldrb	w0, [x23, #28]
   44974:	tbz	w0, #1, 449e8 <aarch64_match_operands_constraint@@Base+0x8ac>
   44978:	mov	w2, #0x5                   	// #5
   4497c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44980:	add	x1, x1, #0x988
   44984:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44988:	add	x0, x0, #0x908
   4498c:	bl	359e0 <dcgettext@plt>
   44990:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44994:	mov	w1, #0x2                   	// #2
   44998:	str	w1, [x22]
   4499c:	str	w21, [x22, #4]
   449a0:	str	x0, [x22, #8]
   449a4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   449a8:	ldrb	w0, [x23, #28]
   449ac:	tbnz	w0, #1, 449e8 <aarch64_match_operands_constraint@@Base+0x8ac>
   449b0:	mov	w2, #0x5                   	// #5
   449b4:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   449b8:	add	x1, x1, #0x9a8
   449bc:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   449c0:	add	x0, x0, #0x908
   449c4:	bl	359e0 <dcgettext@plt>
   449c8:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   449cc:	mov	w1, #0x2                   	// #2
   449d0:	str	w1, [x22]
   449d4:	str	w21, [x22, #4]
   449d8:	str	x0, [x22, #8]
   449dc:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   449e0:	ldrb	w0, [x25, #28]
   449e4:	tbnz	w0, #1, 44a0c <aarch64_match_operands_constraint@@Base+0x8d0>
   449e8:	sub	w1, w20, #0x4f
   449ec:	cmp	w1, #0x44
   449f0:	b.hi	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.pmore
   449f4:	adrp	x0, 5f000 <xexit@@Base+0x674c>
   449f8:	add	x0, x0, #0xfe8
   449fc:	ldrh	w0, [x0, w1, uxtw #1]
   44a00:	adr	x1, 44a0c <aarch64_match_operands_constraint@@Base+0x8d0>
   44a04:	add	x0, x1, w0, sxth #2
   44a08:	br	x0
   44a0c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   44a10:	add	x3, x3, #0x78
   44a14:	add	x3, x3, #0x178
   44a18:	mov	w2, #0x658                 	// #1624
   44a1c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   44a20:	add	x1, x1, #0xe98
   44a24:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   44a28:	add	x0, x0, #0x9c8
   44a2c:	bl	35ac0 <__assert_fail@plt>
   44a30:	mov	w0, w26
   44a34:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44a38:	and	w2, w0, #0xff
   44a3c:	ldrsw	x1, [x25, #20]
   44a40:	mov	w4, w2
   44a44:	neg	w3, w2, lsl #6
   44a48:	mov	w24, w3
   44a4c:	lsl	w20, w2, #6
   44a50:	sub	w20, w20, w2
   44a54:	cmp	x1, w3, sxtw
   44a58:	b.lt	44a64 <aarch64_match_operands_constraint@@Base+0x928>  // b.tstop
   44a5c:	cmp	x1, w20, sxtw
   44a60:	b.le	44a9c <aarch64_match_operands_constraint@@Base+0x960>
   44a64:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44a68:	mov	w2, #0x5                   	// #5
   44a6c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44a70:	add	x1, x1, #0x9e8
   44a74:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44a78:	add	x0, x0, #0x908
   44a7c:	bl	359e0 <dcgettext@plt>
   44a80:	mov	w1, #0x6                   	// #6
   44a84:	str	w1, [x22]
   44a88:	str	w21, [x22, #4]
   44a8c:	str	x0, [x22, #8]
   44a90:	str	w24, [x22, #16]
   44a94:	str	w20, [x22, #20]
   44a98:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44a9c:	and	x0, x0, #0xff
   44aa0:	sdiv	x2, x1, x0
   44aa4:	msub	x0, x2, x0, x1
   44aa8:	cbz	x0, 446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   44aac:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44ab0:	mov	w0, #0x7                   	// #7
   44ab4:	str	w0, [x22]
   44ab8:	str	w21, [x22, #4]
   44abc:	str	xzr, [x22, #8]
   44ac0:	str	w4, [x22, #16]
   44ac4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44ac8:	ldrsw	x0, [x25, #20]
   44acc:	add	x0, x0, #0x100
   44ad0:	cmp	x0, #0x1ff
   44ad4:	b.ls	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.plast
   44ad8:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44adc:	mov	w2, #0x5                   	// #5
   44ae0:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44ae4:	add	x1, x1, #0x9e8
   44ae8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44aec:	add	x0, x0, #0x908
   44af0:	bl	359e0 <dcgettext@plt>
   44af4:	mov	w1, #0x6                   	// #6
   44af8:	str	w1, [x22]
   44afc:	str	w21, [x22, #4]
   44b00:	str	x0, [x22, #8]
   44b04:	mov	w0, #0xffffff00            	// #-256
   44b08:	str	w0, [x22, #16]
   44b0c:	mov	w0, #0xff                  	// #255
   44b10:	str	w0, [x22, #20]
   44b14:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44b18:	mov	w0, w26
   44b1c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44b20:	ldr	w1, [x25, #20]
   44b24:	sxtw	x2, w1
   44b28:	cmp	x2, #0xff
   44b2c:	b.ls	44b6c <aarch64_match_operands_constraint@@Base+0xa30>  // b.plast
   44b30:	add	x2, x2, #0x100
   44b34:	cmp	x2, #0xff
   44b38:	b.ls	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.plast
   44b3c:	mov	w2, #0x5                   	// #5
   44b40:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44b44:	add	x1, x1, #0xa00
   44b48:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44b4c:	add	x0, x0, #0x908
   44b50:	bl	359e0 <dcgettext@plt>
   44b54:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44b58:	mov	w1, #0x9                   	// #9
   44b5c:	str	w1, [x22]
   44b60:	str	w21, [x22, #4]
   44b64:	str	x0, [x22, #8]
   44b68:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44b6c:	mov	x1, x2
   44b70:	and	x0, x0, #0xff
   44b74:	sdiv	x2, x2, x0
   44b78:	msub	x0, x2, x0, x1
   44b7c:	cbz	x0, 44b3c <aarch64_match_operands_constraint@@Base+0xa00>
   44b80:	b	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   44b84:	ldr	w1, [x25, #20]
   44b88:	sxtw	x0, w1
   44b8c:	add	x0, x0, #0x1, lsl #12
   44b90:	mov	x2, #0x1ff8                	// #8184
   44b94:	cmp	x0, x2
   44b98:	b.ls	44bdc <aarch64_match_operands_constraint@@Base+0xaa0>  // b.plast
   44b9c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44ba0:	mov	w2, #0x5                   	// #5
   44ba4:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44ba8:	add	x1, x1, #0x9e8
   44bac:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44bb0:	add	x0, x0, #0x908
   44bb4:	bl	359e0 <dcgettext@plt>
   44bb8:	mov	w1, #0x6                   	// #6
   44bbc:	str	w1, [x22]
   44bc0:	str	w21, [x22, #4]
   44bc4:	str	x0, [x22, #8]
   44bc8:	mov	w0, #0xfffff000            	// #-4096
   44bcc:	str	w0, [x22, #16]
   44bd0:	mov	w0, #0xff8                 	// #4088
   44bd4:	str	w0, [x22, #20]
   44bd8:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44bdc:	tst	x1, #0x7
   44be0:	b.eq	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.none
   44be4:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44be8:	mov	w0, #0x7                   	// #7
   44bec:	str	w0, [x22]
   44bf0:	str	w21, [x22, #4]
   44bf4:	str	xzr, [x22, #8]
   44bf8:	mov	w0, #0x8                   	// #8
   44bfc:	str	w0, [x22, #16]
   44c00:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44c04:	ldr	w1, [x25, #20]
   44c08:	sxtw	x0, w1
   44c0c:	add	x0, x0, #0x400
   44c10:	cmp	x0, #0x7f0
   44c14:	b.ls	44c58 <aarch64_match_operands_constraint@@Base+0xb1c>  // b.plast
   44c18:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44c1c:	mov	w2, #0x5                   	// #5
   44c20:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44c24:	add	x1, x1, #0x9e8
   44c28:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44c2c:	add	x0, x0, #0x908
   44c30:	bl	359e0 <dcgettext@plt>
   44c34:	mov	w1, #0x6                   	// #6
   44c38:	str	w1, [x22]
   44c3c:	str	w21, [x22, #4]
   44c40:	str	x0, [x22, #8]
   44c44:	mov	w0, #0xfffffc00            	// #-1024
   44c48:	str	w0, [x22, #16]
   44c4c:	mov	w0, #0x3f0                 	// #1008
   44c50:	str	w0, [x22, #20]
   44c54:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44c58:	tst	x1, #0xf
   44c5c:	b.eq	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.none
   44c60:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44c64:	mov	w0, #0x7                   	// #7
   44c68:	str	w0, [x22]
   44c6c:	str	w21, [x22, #4]
   44c70:	str	xzr, [x22, #8]
   44c74:	mov	w0, #0x10                  	// #16
   44c78:	str	w0, [x22, #16]
   44c7c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44c80:	ldr	w1, [x25, #20]
   44c84:	sxtw	x0, w1
   44c88:	add	x0, x0, #0x1, lsl #12
   44c8c:	mov	x2, #0x1ff0                	// #8176
   44c90:	cmp	x0, x2
   44c94:	b.ls	44cd8 <aarch64_match_operands_constraint@@Base+0xb9c>  // b.plast
   44c98:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44c9c:	mov	w2, #0x5                   	// #5
   44ca0:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44ca4:	add	x1, x1, #0x9e8
   44ca8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44cac:	add	x0, x0, #0x908
   44cb0:	bl	359e0 <dcgettext@plt>
   44cb4:	mov	w1, #0x6                   	// #6
   44cb8:	str	w1, [x22]
   44cbc:	str	w21, [x22, #4]
   44cc0:	str	x0, [x22, #8]
   44cc4:	mov	w0, #0xfffff000            	// #-4096
   44cc8:	str	w0, [x22, #16]
   44ccc:	mov	w0, #0xff0                 	// #4080
   44cd0:	str	w0, [x22, #20]
   44cd4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44cd8:	tst	x1, #0xf
   44cdc:	b.eq	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.none
   44ce0:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44ce4:	mov	w0, #0x7                   	// #7
   44ce8:	str	w0, [x22]
   44cec:	str	w21, [x22, #4]
   44cf0:	str	xzr, [x22, #8]
   44cf4:	mov	w0, #0x10                  	// #16
   44cf8:	str	w0, [x22, #16]
   44cfc:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44d00:	cmp	w21, #0x1
   44d04:	b.ne	44d50 <aarch64_match_operands_constraint@@Base+0xc14>  // b.any
   44d08:	ldr	w0, [x25, #24]
   44d0c:	cbz	w0, 44d74 <aarch64_match_operands_constraint@@Base+0xc38>
   44d10:	ldr	w0, [x25, #20]
   44d14:	cmp	w0, #0x1e
   44d18:	b.ls	44410 <aarch64_match_operands_constraint@@Base+0x2d4>  // b.plast
   44d1c:	mov	w2, #0x5                   	// #5
   44d20:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44d24:	add	x1, x1, #0xa38
   44d28:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44d2c:	add	x0, x0, #0x908
   44d30:	bl	359e0 <dcgettext@plt>
   44d34:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44d38:	mov	w1, #0x9                   	// #9
   44d3c:	str	w1, [x22]
   44d40:	mov	w1, #0x1                   	// #1
   44d44:	str	w1, [x22, #4]
   44d48:	str	x0, [x22, #8]
   44d4c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44d50:	adrp	x3, 60000 <xexit@@Base+0x774c>
   44d54:	add	x3, x3, #0x78
   44d58:	add	x3, x3, #0x178
   44d5c:	mov	w2, #0x6b3                 	// #1715
   44d60:	adrp	x1, 59000 <xexit@@Base+0x74c>
   44d64:	add	x1, x1, #0xe98
   44d68:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   44d6c:	add	x0, x0, #0xa28
   44d70:	bl	35ac0 <__assert_fail@plt>
   44d74:	ldr	w0, [x24, #32]
   44d78:	cmp	w0, #0x25
   44d7c:	b.ne	44df0 <aarch64_match_operands_constraint@@Base+0xcb4>  // b.any
   44d80:	ldr	x0, [x24, #120]
   44d84:	ubfx	w0, w0, #24, #3
   44d88:	cmp	w0, #0x1
   44d8c:	b.eq	44de8 <aarch64_match_operands_constraint@@Base+0xcac>  // b.none
   44d90:	ldurb	w20, [x23, #-40]
   44d94:	ubfx	x20, x20, #5, #3
   44d98:	ldurb	w0, [x25, #-52]
   44d9c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44da0:	and	w0, w0, #0xff
   44da4:	mul	w20, w0, w20
   44da8:	ldr	w0, [x25, #20]
   44dac:	cmp	w0, w20
   44db0:	b.eq	44410 <aarch64_match_operands_constraint@@Base+0x2d4>  // b.none
   44db4:	mov	w2, #0x5                   	// #5
   44db8:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44dbc:	add	x1, x1, #0xa50
   44dc0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44dc4:	add	x0, x0, #0x908
   44dc8:	bl	359e0 <dcgettext@plt>
   44dcc:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44dd0:	mov	w1, #0x9                   	// #9
   44dd4:	str	w1, [x22]
   44dd8:	mov	w1, #0x1                   	// #1
   44ddc:	str	w1, [x22, #4]
   44de0:	str	x0, [x22, #8]
   44de4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44de8:	mov	w20, w21
   44dec:	b	44d98 <aarch64_match_operands_constraint@@Base+0xc5c>
   44df0:	ldurb	w20, [x23, #-40]
   44df4:	ubfx	x20, x20, #5, #3
   44df8:	ldurb	w0, [x25, #-52]
   44dfc:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44e00:	and	w0, w0, #0xff
   44e04:	mul	w20, w0, w20
   44e08:	ldurb	w0, [x25, #-52]
   44e0c:	bl	358f0 <aarch64_get_qualifier_nelem@plt>
   44e10:	and	w0, w0, #0xff
   44e14:	mul	w20, w0, w20
   44e18:	b	44da8 <aarch64_match_operands_constraint@@Base+0xc6c>
   44e1c:	mov	w0, w26
   44e20:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44e24:	and	w0, w0, #0xff
   44e28:	ldr	x2, [x25, #40]
   44e2c:	cbnz	x2, 44e80 <aarch64_match_operands_constraint@@Base+0xd44>
   44e30:	ldr	w1, [x25, #32]
   44e34:	cmp	w1, #0xd
   44e38:	b.hi	44e50 <aarch64_match_operands_constraint@@Base+0xd14>  // b.pmore
   44e3c:	mov	x0, #0x1                   	// #1
   44e40:	lsl	x0, x0, x1
   44e44:	mov	x1, #0x3120                	// #12576
   44e48:	tst	x0, x1
   44e4c:	b.ne	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.any
   44e50:	mov	w2, #0x5                   	// #5
   44e54:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44e58:	add	x1, x1, #0xa88
   44e5c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44e60:	add	x0, x0, #0x908
   44e64:	bl	359e0 <dcgettext@plt>
   44e68:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44e6c:	mov	w1, #0x9                   	// #9
   44e70:	str	w1, [x22]
   44e74:	str	w21, [x22, #4]
   44e78:	str	x0, [x22, #8]
   44e7c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44e80:	adrp	x1, 60000 <xexit@@Base+0x774c>
   44e84:	add	x1, x1, #0x78
   44e88:	ldp	x4, x5, [x1, #448]
   44e8c:	stp	x4, x5, [sp, #128]
   44e90:	cmp	w0, #0x10
   44e94:	b.hi	44ee4 <aarch64_match_operands_constraint@@Base+0xda8>  // b.pmore
   44e98:	sub	w0, w0, #0x1
   44e9c:	ldr	x1, [sp, #112]
   44ea0:	ldrb	w0, [x1, w0, uxtw]
   44ea4:	cmp	w0, #0xff
   44ea8:	b.eq	44f00 <aarch64_match_operands_constraint@@Base+0xdc4>  // b.none
   44eac:	cmp	x2, w0, uxtb
   44eb0:	b.eq	44e30 <aarch64_match_operands_constraint@@Base+0xcf4>  // b.none
   44eb4:	mov	w2, #0x5                   	// #5
   44eb8:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44ebc:	add	x1, x1, #0xa70
   44ec0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44ec4:	add	x0, x0, #0x908
   44ec8:	bl	359e0 <dcgettext@plt>
   44ecc:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44ed0:	mov	w1, #0x9                   	// #9
   44ed4:	str	w1, [x22]
   44ed8:	str	w21, [x22, #4]
   44edc:	str	x0, [x22, #8]
   44ee0:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44ee4:	add	x3, x1, #0x1d0
   44ee8:	mov	w2, #0x200                 	// #512
   44eec:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   44ef0:	add	x1, x1, #0x970
   44ef4:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   44ef8:	add	x0, x0, #0xb60
   44efc:	bl	35ac0 <__assert_fail@plt>
   44f00:	adrp	x3, 60000 <xexit@@Base+0x774c>
   44f04:	add	x3, x3, #0x78
   44f08:	add	x3, x3, #0x1d0
   44f0c:	mov	w2, #0x203                 	// #515
   44f10:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   44f14:	add	x1, x1, #0x970
   44f18:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44f1c:	add	x0, x0, #0xbc0
   44f20:	bl	35ac0 <__assert_fail@plt>
   44f24:	mov	w0, w26
   44f28:	bl	35680 <aarch64_get_qualifier_esize@plt>
   44f2c:	and	w2, w0, #0xff
   44f30:	ldrsw	x1, [x25, #20]
   44f34:	mov	w3, w2
   44f38:	lsl	w20, w2, #12
   44f3c:	sub	w20, w20, w2
   44f40:	tbnz	x1, #63, 44f4c <aarch64_match_operands_constraint@@Base+0xe10>
   44f44:	cmp	x1, w20, sxtw
   44f48:	b.le	44f84 <aarch64_match_operands_constraint@@Base+0xe48>
   44f4c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44f50:	mov	w2, #0x5                   	// #5
   44f54:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   44f58:	add	x1, x1, #0x9e8
   44f5c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   44f60:	add	x0, x0, #0x908
   44f64:	bl	359e0 <dcgettext@plt>
   44f68:	mov	w1, #0x6                   	// #6
   44f6c:	str	w1, [x22]
   44f70:	str	w21, [x22, #4]
   44f74:	str	x0, [x22, #8]
   44f78:	str	wzr, [x22, #16]
   44f7c:	str	w20, [x22, #20]
   44f80:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44f84:	and	x0, x0, #0xff
   44f88:	sdiv	x2, x1, x0
   44f8c:	msub	x0, x2, x0, x1
   44f90:	cbz	x0, 446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   44f94:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44f98:	mov	w0, #0x7                   	// #7
   44f9c:	str	w0, [x22]
   44fa0:	str	w21, [x22, #4]
   44fa4:	str	xzr, [x22, #8]
   44fa8:	str	w3, [x22, #16]
   44fac:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   44fb0:	ldr	x3, [x25, #16]
   44fb4:	ubfiz	x1, x20, #1, #32
   44fb8:	add	x1, x1, w20, uxtw
   44fbc:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   44fc0:	ldr	x0, [x0, #4032]
   44fc4:	add	x1, x0, x1, lsl #4
   44fc8:	ldr	w0, [x1, #16]
   44fcc:	tbz	w0, #3, 44fdc <aarch64_match_operands_constraint@@Base+0xea0>
   44fd0:	tst	x3, #0x3
   44fd4:	b.ne	45064 <aarch64_match_operands_constraint@@Base+0xf28>  // b.any
   44fd8:	asr	x3, x3, #2
   44fdc:	ldr	w0, [x1, #20]
   44fe0:	cbz	w0, 45084 <aarch64_match_operands_constraint@@Base+0xf48>
   44fe4:	add	x1, x1, #0x18
   44fe8:	mov	w2, #0x0                   	// #0
   44fec:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   44ff0:	ldr	x4, [x4, #3944]
   44ff4:	add	x0, x4, w0, uxtw #3
   44ff8:	ldr	w0, [x0, #4]
   44ffc:	add	w2, w2, w0
   45000:	ldr	w0, [x1], #4
   45004:	cbnz	w0, 44ff4 <aarch64_match_operands_constraint@@Base+0xeb8>
   45008:	sub	w0, w2, #0x1
   4500c:	cmp	w0, #0x1e
   45010:	b.hi	45084 <aarch64_match_operands_constraint@@Base+0xf48>  // b.pmore
   45014:	and	w0, w2, #0xff
   45018:	sub	w0, w0, #0x1
   4501c:	mov	x1, #0x1                   	// #1
   45020:	lsl	x0, x1, x0
   45024:	neg	x1, x0
   45028:	cmp	x3, x1
   4502c:	ccmp	x3, x0, #0x0, ge  // ge = tcont
   45030:	b.lt	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.tstop
   45034:	mov	w2, #0x5                   	// #5
   45038:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   4503c:	add	x1, x1, #0xaa8
   45040:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45044:	add	x0, x0, #0x908
   45048:	bl	359e0 <dcgettext@plt>
   4504c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45050:	mov	w1, #0x9                   	// #9
   45054:	str	w1, [x22]
   45058:	str	w21, [x22, #4]
   4505c:	str	x0, [x22, #8]
   45060:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45064:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45068:	mov	w0, #0x7                   	// #7
   4506c:	str	w0, [x22]
   45070:	str	w21, [x22, #4]
   45074:	str	xzr, [x22, #8]
   45078:	mov	w0, #0x4                   	// #4
   4507c:	str	w0, [x22, #16]
   45080:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45084:	adrp	x3, 60000 <xexit@@Base+0x774c>
   45088:	add	x3, x3, #0x78
   4508c:	add	x3, x3, #0x1a0
   45090:	mov	w2, #0x12e                 	// #302
   45094:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   45098:	add	x1, x1, #0x970
   4509c:	adrp	x0, 59000 <xexit@@Base+0x74c>
   450a0:	add	x0, x0, #0x6f8
   450a4:	bl	35ac0 <__assert_fail@plt>
   450a8:	mov	x1, #0x7                   	// #7
   450ac:	mov	x0, #0xfffffffffffffff8    	// #-8
   450b0:	b	45104 <aarch64_match_operands_constraint@@Base+0xfc8>
   450b4:	adrp	x3, 60000 <xexit@@Base+0x774c>
   450b8:	add	x3, x3, #0x78
   450bc:	add	x3, x3, #0x178
   450c0:	mov	w2, #0x728                 	// #1832
   450c4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   450c8:	add	x1, x1, #0xe98
   450cc:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   450d0:	add	x0, x0, #0xac0
   450d4:	bl	35ac0 <__assert_fail@plt>
   450d8:	adrp	x3, 60000 <xexit@@Base+0x774c>
   450dc:	add	x3, x3, #0x78
   450e0:	add	x3, x3, #0x178
   450e4:	mov	w2, #0x729                 	// #1833
   450e8:	adrp	x1, 59000 <xexit@@Base+0x74c>
   450ec:	add	x1, x1, #0xe98
   450f0:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   450f4:	add	x0, x0, #0xae0
   450f8:	bl	35ac0 <__assert_fail@plt>
   450fc:	mov	x1, #0xff                  	// #255
   45100:	mov	x0, #0xffffffffffffff00    	// #-256
   45104:	ldr	w2, [x25, #24]
   45108:	cbnz	w2, 450b4 <aarch64_match_operands_constraint@@Base+0xf78>
   4510c:	ldrb	w2, [x25, #28]
   45110:	tbz	w2, #2, 450d8 <aarch64_match_operands_constraint@@Base+0xf9c>
   45114:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   45118:	ldr	x3, [x2, #4032]
   4511c:	ubfiz	x2, x20, #1, #32
   45120:	add	x20, x2, w20, uxtw
   45124:	add	x2, x3, x20, lsl #4
   45128:	ldr	w2, [x2, #16]
   4512c:	ubfx	x2, x2, #5, #3
   45130:	add	w2, w2, #0x1
   45134:	mov	w3, w2
   45138:	mul	x0, x3, x0
   4513c:	mul	x20, x3, x1
   45140:	ldr	w1, [x25, #20]
   45144:	cbz	w1, 46d44 <aarch64_match_operands_constraint@@Base+0x2c08>
   45148:	ldrb	w3, [x25, #36]
   4514c:	tbz	w3, #0, 46df4 <aarch64_match_operands_constraint@@Base+0x2cb8>
   45150:	ldr	w3, [x25, #32]
   45154:	cmp	w3, #0xf
   45158:	b.ne	46df4 <aarch64_match_operands_constraint@@Base+0x2cb8>  // b.any
   4515c:	sxtw	x3, w1
   45160:	mov	w24, w0
   45164:	sxtw	x0, w0
   45168:	cmp	x0, w1, sxtw
   4516c:	b.le	46ddc <aarch64_match_operands_constraint@@Base+0x2ca0>
   45170:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45174:	mov	w2, #0x5                   	// #5
   45178:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   4517c:	add	x1, x1, #0x9e8
   45180:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45184:	add	x0, x0, #0x908
   45188:	bl	359e0 <dcgettext@plt>
   4518c:	mov	w1, #0x6                   	// #6
   45190:	str	w1, [x22]
   45194:	str	w21, [x22, #4]
   45198:	str	x0, [x22, #8]
   4519c:	str	w24, [x22, #16]
   451a0:	str	w20, [x22, #20]
   451a4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   451a8:	mov	x1, #0x3f                  	// #63
   451ac:	mov	x0, #0x0                   	// #0
   451b0:	b	45450 <aarch64_match_operands_constraint@@Base+0x1314>
   451b4:	adrp	x3, 60000 <xexit@@Base+0x774c>
   451b8:	add	x3, x3, #0x78
   451bc:	add	x3, x3, #0x178
   451c0:	mov	w2, #0x753                 	// #1875
   451c4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   451c8:	add	x1, x1, #0xe98
   451cc:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   451d0:	add	x0, x0, #0xac0
   451d4:	bl	35ac0 <__assert_fail@plt>
   451d8:	adrp	x3, 60000 <xexit@@Base+0x774c>
   451dc:	add	x3, x3, #0x78
   451e0:	add	x3, x3, #0x178
   451e4:	mov	w2, #0x754                 	// #1876
   451e8:	adrp	x1, 59000 <xexit@@Base+0x74c>
   451ec:	add	x1, x1, #0xe98
   451f0:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   451f4:	add	x0, x0, #0xae0
   451f8:	bl	35ac0 <__assert_fail@plt>
   451fc:	mov	w2, #0x5                   	// #5
   45200:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45204:	add	x1, x1, #0xaf8
   45208:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   4520c:	add	x0, x0, #0x908
   45210:	bl	359e0 <dcgettext@plt>
   45214:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45218:	mov	w1, #0x9                   	// #9
   4521c:	str	w1, [x22]
   45220:	str	w21, [x22, #4]
   45224:	str	x0, [x22, #8]
   45228:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4522c:	sxtw	x1, w3
   45230:	sdiv	x0, x2, x1
   45234:	msub	x2, x0, x1, x2
   45238:	cbz	x2, 446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   4523c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45240:	mov	w0, #0x7                   	// #7
   45244:	str	w0, [x22]
   45248:	str	w21, [x22, #4]
   4524c:	str	xzr, [x22, #8]
   45250:	str	w3, [x22, #16]
   45254:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45258:	ldr	w0, [x25, #24]
   4525c:	cbz	w0, 452b0 <aarch64_match_operands_constraint@@Base+0x1174>
   45260:	ldrb	w0, [x25, #28]
   45264:	tbz	w0, #2, 452d4 <aarch64_match_operands_constraint@@Base+0x1198>
   45268:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   4526c:	ldr	x0, [x0, #4032]
   45270:	ldr	w0, [x0, #6160]
   45274:	tbnz	w0, #8, 452f8 <aarch64_match_operands_constraint@@Base+0x11bc>
   45278:	ldr	w0, [x25, #32]
   4527c:	cmp	w0, #0x5
   45280:	b.ne	4531c <aarch64_match_operands_constraint@@Base+0x11e0>  // b.any
   45284:	ldrb	w0, [x25, #36]
   45288:	tbz	w0, #0, 446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   4528c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   45290:	add	x3, x3, #0x78
   45294:	add	x3, x3, #0x178
   45298:	mov	w2, #0x77a                 	// #1914
   4529c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   452a0:	add	x1, x1, #0xe98
   452a4:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   452a8:	add	x0, x0, #0xb90
   452ac:	bl	35ac0 <__assert_fail@plt>
   452b0:	adrp	x3, 60000 <xexit@@Base+0x774c>
   452b4:	add	x3, x3, #0x78
   452b8:	add	x3, x3, #0x178
   452bc:	mov	w2, #0x776                 	// #1910
   452c0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   452c4:	add	x1, x1, #0xe98
   452c8:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   452cc:	add	x0, x0, #0xb10
   452d0:	bl	35ac0 <__assert_fail@plt>
   452d4:	adrp	x3, 60000 <xexit@@Base+0x774c>
   452d8:	add	x3, x3, #0x78
   452dc:	add	x3, x3, #0x178
   452e0:	mov	w2, #0x777                 	// #1911
   452e4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   452e8:	add	x1, x1, #0xe98
   452ec:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   452f0:	add	x0, x0, #0xae0
   452f4:	bl	35ac0 <__assert_fail@plt>
   452f8:	adrp	x3, 60000 <xexit@@Base+0x774c>
   452fc:	add	x3, x3, #0x78
   45300:	add	x3, x3, #0x178
   45304:	mov	w2, #0x778                 	// #1912
   45308:	adrp	x1, 59000 <xexit@@Base+0x74c>
   4530c:	add	x1, x1, #0xe98
   45310:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   45314:	add	x0, x0, #0xb30
   45318:	bl	35ac0 <__assert_fail@plt>
   4531c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   45320:	add	x3, x3, #0x78
   45324:	add	x3, x3, #0x178
   45328:	mov	w2, #0x779                 	// #1913
   4532c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   45330:	add	x1, x1, #0xe98
   45334:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   45338:	add	x0, x0, #0xb68
   4533c:	bl	35ac0 <__assert_fail@plt>
   45340:	mov	w0, #0x20                  	// #32
   45344:	ldr	w1, [x25, #24]
   45348:	cbz	w1, 453d0 <aarch64_match_operands_constraint@@Base+0x1294>
   4534c:	ldrb	w1, [x25, #28]
   45350:	tbz	w1, #2, 453f4 <aarch64_match_operands_constraint@@Base+0x12b8>
   45354:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   45358:	ldr	x2, [x1, #4032]
   4535c:	ubfiz	x1, x20, #1, #32
   45360:	add	x1, x1, w20, uxtw
   45364:	add	x1, x2, x1, lsl #4
   45368:	ldr	w1, [x1, #16]
   4536c:	tbz	w1, #8, 4537c <aarch64_match_operands_constraint@@Base+0x1240>
   45370:	ldr	w2, [x25, #20]
   45374:	cmp	w2, #0x1f
   45378:	b.eq	45418 <aarch64_match_operands_constraint@@Base+0x12dc>  // b.none
   4537c:	ldr	w3, [x25, #32]
   45380:	mov	w2, #0x1                   	// #1
   45384:	lsl	w2, w2, w3
   45388:	tst	w2, w0
   4538c:	b.eq	453a0 <aarch64_match_operands_constraint@@Base+0x1264>  // b.none
   45390:	ubfx	x1, x1, #5, #3
   45394:	ldr	x0, [x25, #40]
   45398:	cmp	x0, x1
   4539c:	b.eq	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.none
   453a0:	mov	w2, #0x5                   	// #5
   453a4:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   453a8:	add	x1, x1, #0xaf8
   453ac:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   453b0:	add	x0, x0, #0x908
   453b4:	bl	359e0 <dcgettext@plt>
   453b8:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   453bc:	mov	w1, #0x9                   	// #9
   453c0:	str	w1, [x22]
   453c4:	str	w21, [x22, #4]
   453c8:	str	x0, [x22, #8]
   453cc:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   453d0:	adrp	x3, 60000 <xexit@@Base+0x774c>
   453d4:	add	x3, x3, #0x78
   453d8:	add	x3, x3, #0x178
   453dc:	mov	w2, #0x78c                 	// #1932
   453e0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   453e4:	add	x1, x1, #0xe98
   453e8:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   453ec:	add	x0, x0, #0xb10
   453f0:	bl	35ac0 <__assert_fail@plt>
   453f4:	adrp	x3, 60000 <xexit@@Base+0x774c>
   453f8:	add	x3, x3, #0x78
   453fc:	add	x3, x3, #0x178
   45400:	mov	w2, #0x78d                 	// #1933
   45404:	adrp	x1, 59000 <xexit@@Base+0x74c>
   45408:	add	x1, x1, #0xe98
   4540c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   45410:	add	x0, x0, #0xae0
   45414:	bl	35ac0 <__assert_fail@plt>
   45418:	mov	w2, #0x5                   	// #5
   4541c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45420:	add	x1, x1, #0xbb8
   45424:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45428:	add	x0, x0, #0x908
   4542c:	bl	359e0 <dcgettext@plt>
   45430:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45434:	mov	w1, #0x9                   	// #9
   45438:	str	w1, [x22]
   4543c:	str	w21, [x22, #4]
   45440:	str	x0, [x22, #8]
   45444:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45448:	mov	x1, #0x1f                  	// #31
   4544c:	mov	x0, #0x0                   	// #0
   45450:	ldr	w2, [x25, #24]
   45454:	cbnz	w2, 451b4 <aarch64_match_operands_constraint@@Base+0x1078>
   45458:	ldrb	w2, [x25, #28]
   4545c:	tbz	w2, #2, 451d8 <aarch64_match_operands_constraint@@Base+0x109c>
   45460:	adrp	x2, a3000 <aarch64_operands@@Base+0x16bc0>
   45464:	ldr	x3, [x2, #4032]
   45468:	ubfiz	x2, x20, #1, #32
   4546c:	add	x20, x2, w20, uxtw
   45470:	add	x2, x3, x20, lsl #4
   45474:	ldr	w2, [x2, #16]
   45478:	ubfx	x2, x2, #5, #3
   4547c:	mov	w3, #0x1                   	// #1
   45480:	lsl	w3, w3, w2
   45484:	mov	w2, w3
   45488:	mul	x0, x2, x0
   4548c:	mul	x1, x2, x1
   45490:	ldrb	w2, [x25, #36]
   45494:	tst	x2, #0x3
   45498:	b.ne	451fc <aarch64_match_operands_constraint@@Base+0x10c0>  // b.any
   4549c:	ldrsw	x2, [x25, #20]
   454a0:	mov	w20, w0
   454a4:	mov	w24, w1
   454a8:	cmp	x2, w0, sxtw
   454ac:	b.lt	454b8 <aarch64_match_operands_constraint@@Base+0x137c>  // b.tstop
   454b0:	cmp	x2, w1, sxtw
   454b4:	b.le	4522c <aarch64_match_operands_constraint@@Base+0x10f0>
   454b8:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   454bc:	mov	w2, #0x5                   	// #5
   454c0:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   454c4:	add	x1, x1, #0x9e8
   454c8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   454cc:	add	x0, x0, #0x908
   454d0:	bl	359e0 <dcgettext@plt>
   454d4:	mov	w1, #0x6                   	// #6
   454d8:	str	w1, [x22]
   454dc:	str	w21, [x22, #4]
   454e0:	str	x0, [x22, #8]
   454e4:	str	w20, [x22, #16]
   454e8:	str	w24, [x22, #20]
   454ec:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   454f0:	mov	w0, #0x20                  	// #32
   454f4:	b	45544 <aarch64_match_operands_constraint@@Base+0x1408>
   454f8:	adrp	x3, 60000 <xexit@@Base+0x774c>
   454fc:	add	x3, x3, #0x78
   45500:	add	x3, x3, #0x178
   45504:	mov	w2, #0x7b5                 	// #1973
   45508:	adrp	x1, 59000 <xexit@@Base+0x74c>
   4550c:	add	x1, x1, #0xe98
   45510:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   45514:	add	x0, x0, #0xb10
   45518:	bl	35ac0 <__assert_fail@plt>
   4551c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   45520:	add	x3, x3, #0x78
   45524:	add	x3, x3, #0x178
   45528:	mov	w2, #0x7b6                 	// #1974
   4552c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   45530:	add	x1, x1, #0xe98
   45534:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   45538:	add	x0, x0, #0xae0
   4553c:	bl	35ac0 <__assert_fail@plt>
   45540:	mov	w0, #0x100                 	// #256
   45544:	ldr	w1, [x25, #24]
   45548:	cbz	w1, 454f8 <aarch64_match_operands_constraint@@Base+0x13bc>
   4554c:	ldrb	w1, [x25, #28]
   45550:	tbz	w1, #2, 4551c <aarch64_match_operands_constraint@@Base+0x13e0>
   45554:	ldr	w2, [x25, #32]
   45558:	mov	w1, #0x1                   	// #1
   4555c:	lsl	w1, w1, w2
   45560:	tst	w1, w0
   45564:	b.eq	45574 <aarch64_match_operands_constraint@@Base+0x1438>  // b.none
   45568:	ldr	x0, [x25, #40]
   4556c:	cmp	x0, #0x3
   45570:	b.ls	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.plast
   45574:	mov	w2, #0x5                   	// #5
   45578:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   4557c:	add	x1, x1, #0xaf8
   45580:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45584:	add	x0, x0, #0x908
   45588:	bl	359e0 <dcgettext@plt>
   4558c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45590:	mov	w1, #0x9                   	// #9
   45594:	str	w1, [x22]
   45598:	str	w21, [x22, #4]
   4559c:	str	x0, [x22, #8]
   455a0:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   455a4:	cmp	w20, #0x26
   455a8:	b.eq	45600 <aarch64_match_operands_constraint@@Base+0x14c4>  // b.none
   455ac:	ldr	x0, [x24, #120]
   455b0:	ubfx	w0, w0, #24, #3
   455b4:	cmp	w20, #0x24
   455b8:	b.eq	45660 <aarch64_match_operands_constraint@@Base+0x1524>  // b.none
   455bc:	sub	w20, w20, #0x25
   455c0:	cmp	w20, #0x1
   455c4:	b.hi	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.pmore
   455c8:	sub	w1, w0, #0x1
   455cc:	cmp	w1, #0x3
   455d0:	b.hi	456c4 <aarch64_match_operands_constraint@@Base+0x1588>  // b.pmore
   455d4:	ldrb	w1, [x25, #16]
   455d8:	ubfx	x1, x1, #5, #3
   455dc:	cmp	w1, w0
   455e0:	b.eq	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.none
   455e4:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   455e8:	mov	w1, #0x8                   	// #8
   455ec:	str	w1, [x22]
   455f0:	str	w21, [x22, #4]
   455f4:	str	xzr, [x22, #8]
   455f8:	str	w0, [x22, #16]
   455fc:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45600:	mov	w0, w26
   45604:	bl	35680 <aarch64_get_qualifier_esize@plt>
   45608:	and	w0, w0, #0xff
   4560c:	mov	w20, #0x10                  	// #16
   45610:	sdiv	w20, w20, w0
   45614:	sub	w20, w20, #0x1
   45618:	ldr	x0, [x23, #24]
   4561c:	tbnz	x0, #63, 45628 <aarch64_match_operands_constraint@@Base+0x14ec>
   45620:	cmp	x0, w20, sxtw
   45624:	b.le	46d38 <aarch64_match_operands_constraint@@Base+0x2bfc>
   45628:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4562c:	mov	w2, #0x5                   	// #5
   45630:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45634:	add	x1, x1, #0x948
   45638:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   4563c:	add	x0, x0, #0x908
   45640:	bl	359e0 <dcgettext@plt>
   45644:	mov	w1, #0x6                   	// #6
   45648:	str	w1, [x22]
   4564c:	str	w21, [x22, #4]
   45650:	str	x0, [x22, #8]
   45654:	str	wzr, [x22, #16]
   45658:	str	w20, [x22, #20]
   4565c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45660:	sub	w1, w0, #0x1
   45664:	cmp	w1, #0x3
   45668:	b.hi	456a0 <aarch64_match_operands_constraint@@Base+0x1564>  // b.pmore
   4566c:	cmp	w0, #0x1
   45670:	b.eq	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.none
   45674:	ldrb	w1, [x25, #16]
   45678:	ubfx	x1, x1, #5, #3
   4567c:	cmp	w1, w0
   45680:	b.eq	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.none
   45684:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45688:	mov	w1, #0x8                   	// #8
   4568c:	str	w1, [x22]
   45690:	str	w21, [x22, #4]
   45694:	str	xzr, [x22, #8]
   45698:	str	w0, [x22, #16]
   4569c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   456a0:	adrp	x3, 60000 <xexit@@Base+0x774c>
   456a4:	add	x3, x3, #0x78
   456a8:	add	x3, x3, #0x178
   456ac:	mov	w2, #0x7df                 	// #2015
   456b0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   456b4:	add	x1, x1, #0xe98
   456b8:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   456bc:	add	x0, x0, #0xbe0
   456c0:	bl	35ac0 <__assert_fail@plt>
   456c4:	adrp	x3, 60000 <xexit@@Base+0x774c>
   456c8:	add	x3, x3, #0x78
   456cc:	add	x3, x3, #0x178
   456d0:	mov	w2, #0x7ea                 	// #2026
   456d4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   456d8:	add	x1, x1, #0xe98
   456dc:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   456e0:	add	x0, x0, #0xbe0
   456e4:	bl	35ac0 <__assert_fail@plt>
   456e8:	mov	x0, x1
   456ec:	sbfiz	x1, x26, #5, #32
   456f0:	add	x4, x0, x1
   456f4:	ldr	w0, [x0, x1]
   456f8:	str	w0, [sp, #124]
   456fc:	ldr	w1, [x4, #4]
   45700:	str	w1, [sp, #120]
   45704:	cmp	x3, w0, sxtw
   45708:	b.lt	45714 <aarch64_match_operands_constraint@@Base+0x15d8>  // b.tstop
   4570c:	cmp	x3, w1, sxtw
   45710:	b.le	44370 <aarch64_match_operands_constraint@@Base+0x234>
   45714:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45718:	mov	w2, #0x5                   	// #5
   4571c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45720:	add	x1, x1, #0xbf8
   45724:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45728:	add	x0, x0, #0x908
   4572c:	bl	359e0 <dcgettext@plt>
   45730:	mov	w1, #0x6                   	// #6
   45734:	str	w1, [x22]
   45738:	str	w21, [x22, #4]
   4573c:	str	x0, [x22, #8]
   45740:	ldr	w0, [sp, #124]
   45744:	str	w0, [x22, #16]
   45748:	ldr	w0, [sp, #120]
   4574c:	str	w0, [x22, #20]
   45750:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45754:	ldr	w0, [x25, #32]
   45758:	cmp	w0, #0x5
   4575c:	b.ne	457a8 <aarch64_match_operands_constraint@@Base+0x166c>  // b.any
   45760:	ldr	x0, [x25, #40]
   45764:	cmp	x0, #0x0
   45768:	ccmp	x0, #0xc, #0x4, ne  // ne = any
   4576c:	b.ne	457d8 <aarch64_match_operands_constraint@@Base+0x169c>  // b.any
   45770:	cmp	x3, #0xfff
   45774:	b.ls	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.plast
   45778:	mov	w2, #0x5                   	// #5
   4577c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45780:	add	x1, x1, #0xaa8
   45784:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45788:	add	x0, x0, #0x908
   4578c:	bl	359e0 <dcgettext@plt>
   45790:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45794:	mov	w1, #0x9                   	// #9
   45798:	str	w1, [x22]
   4579c:	str	w21, [x22, #4]
   457a0:	str	x0, [x22, #8]
   457a4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   457a8:	mov	w2, #0x5                   	// #5
   457ac:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   457b0:	add	x1, x1, #0xc08
   457b4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   457b8:	add	x0, x0, #0x908
   457bc:	bl	359e0 <dcgettext@plt>
   457c0:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   457c4:	mov	w1, #0x9                   	// #9
   457c8:	str	w1, [x22]
   457cc:	str	w21, [x22, #4]
   457d0:	str	x0, [x22, #8]
   457d4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   457d8:	mov	w2, #0x5                   	// #5
   457dc:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   457e0:	add	x1, x1, #0xc20
   457e4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   457e8:	add	x0, x0, #0x908
   457ec:	bl	359e0 <dcgettext@plt>
   457f0:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   457f4:	mov	w1, #0x9                   	// #9
   457f8:	str	w1, [x22]
   457fc:	str	w21, [x22, #4]
   45800:	str	x0, [x22, #8]
   45804:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45808:	cmp	w21, #0x1
   4580c:	b.ne	4585c <aarch64_match_operands_constraint@@Base+0x1720>  // b.any
   45810:	ldr	w0, [x19, #24]
   45814:	cmp	w0, #0x1
   45818:	b.ne	4585c <aarch64_match_operands_constraint@@Base+0x1720>  // b.any
   4581c:	ldr	w0, [x25, #32]
   45820:	cmp	w0, #0x5
   45824:	b.eq	45880 <aarch64_match_operands_constraint@@Base+0x1744>  // b.none
   45828:	mov	w2, #0x5                   	// #5
   4582c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45830:	add	x1, x1, #0xc08
   45834:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45838:	add	x0, x0, #0x908
   4583c:	bl	359e0 <dcgettext@plt>
   45840:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45844:	mov	w1, #0x9                   	// #9
   45848:	str	w1, [x22]
   4584c:	mov	w1, #0x1                   	// #1
   45850:	str	w1, [x22, #4]
   45854:	str	x0, [x22, #8]
   45858:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4585c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   45860:	add	x3, x3, #0x78
   45864:	add	x3, x3, #0x178
   45868:	mov	w2, #0x81e                 	// #2078
   4586c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   45870:	add	x1, x1, #0xe98
   45874:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   45878:	add	x0, x0, #0xc40
   4587c:	bl	35ac0 <__assert_fail@plt>
   45880:	ldrb	w0, [x19, #28]
   45884:	bl	35680 <aarch64_get_qualifier_esize@plt>
   45888:	and	w20, w0, #0xff
   4588c:	ldr	x0, [x25, #40]
   45890:	tst	x0, #0xf
   45894:	b.ne	458e8 <aarch64_match_operands_constraint@@Base+0x17ac>  // b.any
   45898:	sub	w20, w20, #0x2
   4589c:	lsl	w20, w20, #3
   458a0:	tbnz	x0, #63, 458ac <aarch64_match_operands_constraint@@Base+0x1770>
   458a4:	cmp	x0, w20, sxtw
   458a8:	b.le	4591c <aarch64_match_operands_constraint@@Base+0x17e0>
   458ac:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   458b0:	mov	w2, #0x5                   	// #5
   458b4:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   458b8:	add	x1, x1, #0xa78
   458bc:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   458c0:	add	x0, x0, #0x908
   458c4:	bl	359e0 <dcgettext@plt>
   458c8:	mov	w1, #0x6                   	// #6
   458cc:	str	w1, [x22]
   458d0:	mov	w1, #0x1                   	// #1
   458d4:	str	w1, [x22, #4]
   458d8:	str	x0, [x22, #8]
   458dc:	str	wzr, [x22, #16]
   458e0:	str	w20, [x22, #20]
   458e4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   458e8:	mov	w2, #0x5                   	// #5
   458ec:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   458f0:	add	x1, x1, #0xc70
   458f4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   458f8:	add	x0, x0, #0x908
   458fc:	bl	359e0 <dcgettext@plt>
   45900:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45904:	mov	w1, #0x9                   	// #9
   45908:	str	w1, [x22]
   4590c:	mov	w1, #0x1                   	// #1
   45910:	str	w1, [x22, #4]
   45914:	str	x0, [x22, #8]
   45918:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4591c:	ldr	x0, [x25, #16]
   45920:	tbnz	x0, #63, 45964 <aarch64_match_operands_constraint@@Base+0x1828>
   45924:	mov	x1, #0xffff                	// #65535
   45928:	cmp	x0, x1
   4592c:	b.le	44410 <aarch64_match_operands_constraint@@Base+0x2d4>
   45930:	mov	w2, #0x5                   	// #5
   45934:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45938:	add	x1, x1, #0xaa8
   4593c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45940:	add	x0, x0, #0x908
   45944:	bl	359e0 <dcgettext@plt>
   45948:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4594c:	mov	w1, #0x9                   	// #9
   45950:	str	w1, [x22]
   45954:	mov	w1, #0x1                   	// #1
   45958:	str	w1, [x22, #4]
   4595c:	str	x0, [x22, #8]
   45960:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45964:	mov	w2, #0x5                   	// #5
   45968:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   4596c:	add	x1, x1, #0xc98
   45970:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45974:	add	x0, x0, #0x908
   45978:	bl	359e0 <dcgettext@plt>
   4597c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45980:	mov	w1, #0x9                   	// #9
   45984:	str	w1, [x22]
   45988:	mov	w1, #0x1                   	// #1
   4598c:	str	w1, [x22, #4]
   45990:	str	x0, [x22, #8]
   45994:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45998:	ldrb	w0, [x19, #28]
   4599c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   459a0:	and	w1, w0, #0xff
   459a4:	ldr	x0, [x25, #16]
   459a8:	cmp	w21, #0x1
   459ac:	b.ne	459f0 <aarch64_match_operands_constraint@@Base+0x18b4>  // b.any
   459b0:	ldr	w2, [x24, #20]
   459b4:	cmp	w2, #0x24
   459b8:	b.eq	45a18 <aarch64_match_operands_constraint@@Base+0x18dc>  // b.none
   459bc:	cmp	w2, #0x25
   459c0:	b.eq	45a14 <aarch64_match_operands_constraint@@Base+0x18d8>  // b.none
   459c4:	cmp	w2, #0x23
   459c8:	b.eq	45a60 <aarch64_match_operands_constraint@@Base+0x1924>  // b.none
   459cc:	adrp	x3, 60000 <xexit@@Base+0x774c>
   459d0:	add	x3, x3, #0x78
   459d4:	add	x3, x3, #0x178
   459d8:	mov	w2, #0x85b                 	// #2139
   459dc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   459e0:	add	x1, x1, #0xe98
   459e4:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   459e8:	add	x0, x0, #0xb60
   459ec:	bl	35ac0 <__assert_fail@plt>
   459f0:	adrp	x3, 60000 <xexit@@Base+0x774c>
   459f4:	add	x3, x3, #0x78
   459f8:	add	x3, x3, #0x178
   459fc:	mov	w2, #0x844                 	// #2116
   45a00:	adrp	x1, 59000 <xexit@@Base+0x74c>
   45a04:	add	x1, x1, #0xe98
   45a08:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   45a0c:	add	x0, x0, #0xa28
   45a10:	bl	35ac0 <__assert_fail@plt>
   45a14:	mvn	x0, x0
   45a18:	cmp	w1, #0x4
   45a1c:	mov	x2, #0x0                   	// #0
   45a20:	cset	w1, eq  // eq = none
   45a24:	bl	35a40 <aarch64_wide_constant_p@plt>
   45a28:	cbnz	w0, 44410 <aarch64_match_operands_constraint@@Base+0x2d4>
   45a2c:	mov	w2, #0x5                   	// #5
   45a30:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45a34:	add	x1, x1, #0xaa8
   45a38:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45a3c:	add	x0, x0, #0x908
   45a40:	bl	359e0 <dcgettext@plt>
   45a44:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45a48:	mov	w1, #0x9                   	// #9
   45a4c:	str	w1, [x22]
   45a50:	mov	w1, #0x1                   	// #1
   45a54:	str	w1, [x22, #4]
   45a58:	str	x0, [x22, #8]
   45a5c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45a60:	mov	x2, #0x0                   	// #0
   45a64:	bl	35400 <aarch64_logical_immediate_p@plt>
   45a68:	cbnz	w0, 44410 <aarch64_match_operands_constraint@@Base+0x2d4>
   45a6c:	mov	w2, #0x5                   	// #5
   45a70:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45a74:	add	x1, x1, #0xaa8
   45a78:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45a7c:	add	x0, x0, #0x908
   45a80:	bl	359e0 <dcgettext@plt>
   45a84:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45a88:	mov	w1, #0x9                   	// #9
   45a8c:	str	w1, [x22]
   45a90:	mov	w1, #0x1                   	// #1
   45a94:	str	w1, [x22, #4]
   45a98:	str	x0, [x22, #8]
   45a9c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45aa0:	ubfiz	x1, x20, #1, #32
   45aa4:	add	x1, x1, w20, uxtw
   45aa8:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   45aac:	ldr	x0, [x0, #4032]
   45ab0:	add	x1, x0, x1, lsl #4
   45ab4:	ldr	w0, [x1, #20]
   45ab8:	cbz	w0, 45b44 <aarch64_match_operands_constraint@@Base+0x1a08>
   45abc:	add	x1, x1, #0x18
   45ac0:	mov	w2, #0x0                   	// #0
   45ac4:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   45ac8:	ldr	x4, [x4, #3944]
   45acc:	add	x0, x4, w0, uxtw #3
   45ad0:	ldr	w0, [x0, #4]
   45ad4:	add	w2, w2, w0
   45ad8:	ldr	w0, [x1], #4
   45adc:	cbnz	w0, 45acc <aarch64_match_operands_constraint@@Base+0x1990>
   45ae0:	sub	w0, w2, #0x1
   45ae4:	cmp	w0, #0x1e
   45ae8:	b.hi	45b44 <aarch64_match_operands_constraint@@Base+0x1a08>  // b.pmore
   45aec:	and	w20, w2, #0xff
   45af0:	mov	x0, #0x1                   	// #1
   45af4:	lsl	x2, x0, x2
   45af8:	cmp	x3, x2
   45afc:	b.cc	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.lo, b.ul, b.last
   45b00:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45b04:	mov	w2, #0x5                   	// #5
   45b08:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45b0c:	add	x1, x1, #0xbf8
   45b10:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45b14:	add	x0, x0, #0x908
   45b18:	bl	359e0 <dcgettext@plt>
   45b1c:	mov	w1, #0x6                   	// #6
   45b20:	str	w1, [x22]
   45b24:	str	w21, [x22, #4]
   45b28:	str	x0, [x22, #8]
   45b2c:	str	wzr, [x22, #16]
   45b30:	mov	w0, #0x1                   	// #1
   45b34:	lsl	w0, w0, w20
   45b38:	sub	w0, w0, #0x1
   45b3c:	str	w0, [x22, #20]
   45b40:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45b44:	adrp	x3, 60000 <xexit@@Base+0x774c>
   45b48:	add	x3, x3, #0x78
   45b4c:	add	x3, x3, #0x1a0
   45b50:	mov	w2, #0x12e                 	// #302
   45b54:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   45b58:	add	x1, x1, #0x970
   45b5c:	adrp	x0, 59000 <xexit@@Base+0x74c>
   45b60:	add	x0, x0, #0x6f8
   45b64:	bl	35ac0 <__assert_fail@plt>
   45b68:	cmp	x3, #0x3f0
   45b6c:	b.ls	45bac <aarch64_match_operands_constraint@@Base+0x1a70>  // b.plast
   45b70:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45b74:	mov	w2, #0x5                   	// #5
   45b78:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45b7c:	add	x1, x1, #0xbf8
   45b80:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45b84:	add	x0, x0, #0x908
   45b88:	bl	359e0 <dcgettext@plt>
   45b8c:	mov	w1, #0x6                   	// #6
   45b90:	str	w1, [x22]
   45b94:	str	w21, [x22, #4]
   45b98:	str	x0, [x22, #8]
   45b9c:	str	wzr, [x22, #16]
   45ba0:	mov	w0, #0x3f0                 	// #1008
   45ba4:	str	w0, [x22, #20]
   45ba8:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45bac:	tst	x3, #0xf
   45bb0:	b.eq	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.none
   45bb4:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45bb8:	mov	w0, #0x7                   	// #7
   45bbc:	str	w0, [x22]
   45bc0:	str	w21, [x22, #4]
   45bc4:	str	xzr, [x22, #8]
   45bc8:	mov	w0, #0x10                  	// #16
   45bcc:	str	w0, [x22, #16]
   45bd0:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45bd4:	ubfiz	x2, x20, #1, #32
   45bd8:	add	x2, x2, w20, uxtw
   45bdc:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   45be0:	ldr	x0, [x0, #4032]
   45be4:	add	x2, x0, x2, lsl #4
   45be8:	ldr	w0, [x2, #20]
   45bec:	cbz	w0, 45c8c <aarch64_match_operands_constraint@@Base+0x1b50>
   45bf0:	add	x2, x2, #0x18
   45bf4:	mov	w1, #0x0                   	// #0
   45bf8:	adrp	x4, a3000 <aarch64_operands@@Base+0x16bc0>
   45bfc:	ldr	x4, [x4, #3944]
   45c00:	add	x0, x4, w0, uxtw #3
   45c04:	ldr	w0, [x0, #4]
   45c08:	add	w1, w1, w0
   45c0c:	ldr	w0, [x2], #4
   45c10:	cbnz	w0, 45c00 <aarch64_match_operands_constraint@@Base+0x1ac4>
   45c14:	sub	w0, w1, #0x1
   45c18:	cmp	w0, #0x1e
   45c1c:	b.hi	45c8c <aarch64_match_operands_constraint@@Base+0x1b50>  // b.pmore
   45c20:	and	w1, w1, #0xff
   45c24:	sub	w2, w1, #0x1
   45c28:	mov	x0, #0x1                   	// #1
   45c2c:	lsl	x0, x0, x2
   45c30:	neg	x2, x0
   45c34:	cmp	x3, x2
   45c38:	ccmp	x3, x0, #0x0, ge  // ge = tcont
   45c3c:	b.lt	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.tstop
   45c40:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45c44:	sub	w1, w1, #0x1
   45c48:	mov	w19, #0x1                   	// #1
   45c4c:	lsl	w19, w19, w1
   45c50:	mov	w2, #0x5                   	// #5
   45c54:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45c58:	add	x1, x1, #0xbf8
   45c5c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45c60:	add	x0, x0, #0x908
   45c64:	bl	359e0 <dcgettext@plt>
   45c68:	mov	w1, #0x6                   	// #6
   45c6c:	str	w1, [x22]
   45c70:	str	w21, [x22, #4]
   45c74:	str	x0, [x22, #8]
   45c78:	neg	w0, w19
   45c7c:	str	w0, [x22, #16]
   45c80:	sub	w1, w19, #0x1
   45c84:	str	w1, [x22, #20]
   45c88:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45c8c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   45c90:	add	x3, x3, #0x78
   45c94:	add	x3, x3, #0x1a0
   45c98:	mov	w2, #0x12e                 	// #302
   45c9c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   45ca0:	add	x1, x1, #0x970
   45ca4:	adrp	x0, 59000 <xexit@@Base+0x74c>
   45ca8:	add	x0, x0, #0x6f8
   45cac:	bl	35ac0 <__assert_fail@plt>
   45cb0:	cmp	w21, #0x1
   45cb4:	b.le	45d40 <aarch64_match_operands_constraint@@Base+0x1c04>
   45cb8:	ldur	w0, [x25, #-56]
   45cbc:	cmp	w0, #0x37
   45cc0:	b.ne	45d40 <aarch64_match_operands_constraint@@Base+0x1c04>  // b.any
   45cc4:	ldr	w0, [x19, #24]
   45cc8:	cmp	w0, #0x1
   45ccc:	b.ne	45d40 <aarch64_match_operands_constraint@@Base+0x1c04>  // b.any
   45cd0:	cmp	w2, #0x2
   45cd4:	b.ne	45d64 <aarch64_match_operands_constraint@@Base+0x1c28>  // b.any
   45cd8:	sbfiz	x26, x26, #5, #32
   45cdc:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   45ce0:	ldr	x0, [x0, #3776]
   45ce4:	add	x0, x0, x26
   45ce8:	ldr	w20, [x0, #4]
   45cec:	ldur	x24, [x25, #-40]
   45cf0:	add	x3, x3, x24
   45cf4:	cmp	x3, w20, uxtb
   45cf8:	b.le	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   45cfc:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45d00:	mov	w2, #0x5                   	// #5
   45d04:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45d08:	add	x1, x1, #0xbf8
   45d0c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45d10:	add	x0, x0, #0x908
   45d14:	bl	359e0 <dcgettext@plt>
   45d18:	mov	w1, #0x6                   	// #6
   45d1c:	str	w1, [x22]
   45d20:	str	w21, [x22, #4]
   45d24:	str	x0, [x22, #8]
   45d28:	mov	w0, #0x1                   	// #1
   45d2c:	str	w0, [x22, #16]
   45d30:	and	w20, w20, #0xff
   45d34:	sub	w24, w20, w24
   45d38:	str	w24, [x22, #20]
   45d3c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45d40:	adrp	x3, 60000 <xexit@@Base+0x774c>
   45d44:	add	x3, x3, #0x78
   45d48:	add	x3, x3, #0x178
   45d4c:	mov	w2, #0x898                 	// #2200
   45d50:	adrp	x1, 59000 <xexit@@Base+0x74c>
   45d54:	add	x1, x1, #0xe98
   45d58:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   45d5c:	add	x0, x0, #0xcc0
   45d60:	bl	35ac0 <__assert_fail@plt>
   45d64:	adrp	x3, 60000 <xexit@@Base+0x774c>
   45d68:	add	x3, x3, #0x78
   45d6c:	add	x3, x3, #0x1e0
   45d70:	mov	w2, #0x32a                 	// #810
   45d74:	adrp	x1, 59000 <xexit@@Base+0x74c>
   45d78:	add	x1, x1, #0xe98
   45d7c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   45d80:	add	x0, x0, #0xd18
   45d84:	bl	35ac0 <__assert_fail@plt>
   45d88:	ldrb	w0, [x19, #28]
   45d8c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   45d90:	mov	w1, w0
   45d94:	ldr	x0, [x25, #16]
   45d98:	ldr	w2, [x24, #20]
   45d9c:	cmp	w2, #0x2a
   45da0:	mov	x2, #0x0                   	// #0
   45da4:	and	w1, w1, #0xff
   45da8:	cinv	x0, x0, eq  // eq = none
   45dac:	bl	35400 <aarch64_logical_immediate_p@plt>
   45db0:	cbnz	w0, 446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   45db4:	mov	w2, #0x5                   	// #5
   45db8:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45dbc:	add	x1, x1, #0xaa8
   45dc0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45dc4:	add	x0, x0, #0x908
   45dc8:	bl	359e0 <dcgettext@plt>
   45dcc:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45dd0:	mov	w1, #0x9                   	// #9
   45dd4:	str	w1, [x22]
   45dd8:	str	w21, [x22, #4]
   45ddc:	str	x0, [x22, #8]
   45de0:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45de4:	cbz	x3, 446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   45de8:	mov	w2, #0x5                   	// #5
   45dec:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45df0:	add	x1, x1, #0xd58
   45df4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45df8:	add	x0, x0, #0x908
   45dfc:	bl	359e0 <dcgettext@plt>
   45e00:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45e04:	mov	w1, #0x9                   	// #9
   45e08:	str	w1, [x22]
   45e0c:	str	w21, [x22, #4]
   45e10:	str	x0, [x22, #8]
   45e14:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45e18:	cmp	x3, #0x5a
   45e1c:	ccmp	x3, #0x0, #0x4, ne  // ne = any
   45e20:	cset	w0, ne  // ne = any
   45e24:	cmp	x3, #0xb4
   45e28:	mov	x1, #0x10e                 	// #270
   45e2c:	ccmp	x3, x1, #0x4, ne  // ne = any
   45e30:	csel	w0, w0, wzr, ne  // ne = any
   45e34:	cbz	w0, 446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   45e38:	mov	w2, #0x5                   	// #5
   45e3c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45e40:	add	x1, x1, #0xd70
   45e44:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45e48:	add	x0, x0, #0x908
   45e4c:	bl	359e0 <dcgettext@plt>
   45e50:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45e54:	mov	w1, #0x9                   	// #9
   45e58:	str	w1, [x22]
   45e5c:	str	w21, [x22, #4]
   45e60:	str	x0, [x22, #8]
   45e64:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45e68:	cmp	x3, #0x5a
   45e6c:	mov	x0, #0x10e                 	// #270
   45e70:	ccmp	x3, x0, #0x4, ne  // ne = any
   45e74:	b.eq	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.none
   45e78:	mov	w2, #0x5                   	// #5
   45e7c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45e80:	add	x1, x1, #0xd98
   45e84:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45e88:	add	x0, x0, #0x908
   45e8c:	bl	359e0 <dcgettext@plt>
   45e90:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45e94:	mov	w1, #0x9                   	// #9
   45e98:	str	w1, [x22]
   45e9c:	str	w21, [x22, #4]
   45ea0:	str	x0, [x22, #8]
   45ea4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45ea8:	cmp	w21, #0x2
   45eac:	b.ne	45efc <aarch64_match_operands_constraint@@Base+0x1dc0>  // b.any
   45eb0:	ldurb	w0, [x25, #-52]
   45eb4:	bl	35680 <aarch64_get_qualifier_esize@plt>
   45eb8:	ubfiz	x0, x0, #3, #5
   45ebc:	ldr	x1, [x25, #16]
   45ec0:	cmp	x1, x0
   45ec4:	b.eq	44410 <aarch64_match_operands_constraint@@Base+0x2d4>  // b.none
   45ec8:	mov	w2, #0x5                   	// #5
   45ecc:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45ed0:	add	x1, x1, #0xa70
   45ed4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45ed8:	add	x0, x0, #0x908
   45edc:	bl	359e0 <dcgettext@plt>
   45ee0:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45ee4:	mov	w1, #0x9                   	// #9
   45ee8:	str	w1, [x22]
   45eec:	mov	w1, #0x2                   	// #2
   45ef0:	str	w1, [x22, #4]
   45ef4:	str	x0, [x22, #8]
   45ef8:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45efc:	adrp	x3, 60000 <xexit@@Base+0x774c>
   45f00:	add	x3, x3, #0x78
   45f04:	add	x3, x3, #0x178
   45f08:	mov	w2, #0x8d8                 	// #2264
   45f0c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   45f10:	add	x1, x1, #0xe98
   45f14:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   45f18:	add	x0, x0, #0xdb8
   45f1c:	bl	35ac0 <__assert_fail@plt>
   45f20:	mov	w0, w26
   45f24:	bl	35680 <aarch64_get_qualifier_esize@plt>
   45f28:	ldr	x1, [x25, #16]
   45f2c:	ubfiz	w20, w0, #3, #8
   45f30:	sub	w20, w20, #0x1
   45f34:	tbnz	x1, #63, 45f40 <aarch64_match_operands_constraint@@Base+0x1e04>
   45f38:	cmp	x1, w20, sxtw
   45f3c:	b.le	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   45f40:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45f44:	mov	w2, #0x5                   	// #5
   45f48:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45f4c:	add	x1, x1, #0xbf8
   45f50:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45f54:	add	x0, x0, #0x908
   45f58:	bl	359e0 <dcgettext@plt>
   45f5c:	mov	w1, #0x6                   	// #6
   45f60:	str	w1, [x22]
   45f64:	str	w21, [x22, #4]
   45f68:	str	x0, [x22, #8]
   45f6c:	str	wzr, [x22, #16]
   45f70:	str	w20, [x22, #20]
   45f74:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45f78:	mov	w0, w26
   45f7c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   45f80:	ldr	x1, [x25, #16]
   45f84:	ubfiz	w20, w0, #3, #8
   45f88:	cmp	x1, #0x0
   45f8c:	b.le	45f98 <aarch64_match_operands_constraint@@Base+0x1e5c>
   45f90:	cmp	x1, w20, sxtw
   45f94:	b.le	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   45f98:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45f9c:	mov	w2, #0x5                   	// #5
   45fa0:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   45fa4:	add	x1, x1, #0xbf8
   45fa8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   45fac:	add	x0, x0, #0x908
   45fb0:	bl	359e0 <dcgettext@plt>
   45fb4:	mov	w1, #0x6                   	// #6
   45fb8:	str	w1, [x22]
   45fbc:	str	w21, [x22, #4]
   45fc0:	str	x0, [x22, #8]
   45fc4:	mov	w0, #0x1                   	// #1
   45fc8:	str	w0, [x22, #16]
   45fcc:	str	w20, [x22, #20]
   45fd0:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   45fd4:	cmp	w26, #0x21
   45fd8:	b.eq	4600c <aarch64_match_operands_constraint@@Base+0x1ed0>  // b.none
   45fdc:	cmp	w26, #0x22
   45fe0:	b.eq	46048 <aarch64_match_operands_constraint@@Base+0x1f0c>  // b.none
   45fe4:	cbz	w26, 46084 <aarch64_match_operands_constraint@@Base+0x1f48>
   45fe8:	adrp	x3, 60000 <xexit@@Base+0x774c>
   45fec:	add	x3, x3, #0x78
   45ff0:	add	x3, x3, #0x178
   45ff4:	mov	w2, #0x913                 	// #2323
   45ff8:	adrp	x1, 59000 <xexit@@Base+0x74c>
   45ffc:	add	x1, x1, #0xe98
   46000:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   46004:	add	x0, x0, #0xb60
   46008:	bl	35ac0 <__assert_fail@plt>
   4600c:	ldr	w0, [x25, #32]
   46010:	cmp	w0, #0x5
   46014:	b.eq	4608c <aarch64_match_operands_constraint@@Base+0x1f50>  // b.none
   46018:	mov	w2, #0x5                   	// #5
   4601c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   46020:	add	x1, x1, #0xc08
   46024:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46028:	add	x0, x0, #0x908
   4602c:	bl	359e0 <dcgettext@plt>
   46030:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46034:	mov	w1, #0x9                   	// #9
   46038:	str	w1, [x22]
   4603c:	str	w21, [x22, #4]
   46040:	str	x0, [x22, #8]
   46044:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46048:	ldr	w0, [x25, #32]
   4604c:	cmp	w0, #0x1
   46050:	b.eq	4608c <aarch64_match_operands_constraint@@Base+0x1f50>  // b.none
   46054:	mov	w2, #0x5                   	// #5
   46058:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   4605c:	add	x1, x1, #0xc08
   46060:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46064:	add	x0, x0, #0x908
   46068:	bl	359e0 <dcgettext@plt>
   4606c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46070:	mov	w1, #0x9                   	// #9
   46074:	str	w1, [x22]
   46078:	str	w21, [x22, #4]
   4607c:	str	x0, [x22, #8]
   46080:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46084:	ldr	w0, [x25, #32]
   46088:	cbnz	w0, 460fc <aarch64_match_operands_constraint@@Base+0x1fc0>
   4608c:	cmp	w21, #0x1
   46090:	b.ne	4612c <aarch64_match_operands_constraint@@Base+0x1ff0>  // b.any
   46094:	ldrb	w0, [x19, #28]
   46098:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4609c:	and	w0, w0, #0xff
   460a0:	cmp	w0, #0x8
   460a4:	b.eq	46150 <aarch64_match_operands_constraint@@Base+0x2014>  // b.none
   460a8:	ldr	x0, [x25, #16]
   460ac:	add	x0, x0, #0x80
   460b0:	cmp	x0, #0x17f
   460b4:	b.ls	4615c <aarch64_match_operands_constraint@@Base+0x2020>  // b.plast
   460b8:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   460bc:	mov	w2, #0x5                   	// #5
   460c0:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   460c4:	add	x1, x1, #0xbf8
   460c8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   460cc:	add	x0, x0, #0x908
   460d0:	bl	359e0 <dcgettext@plt>
   460d4:	mov	w1, #0x6                   	// #6
   460d8:	str	w1, [x22]
   460dc:	mov	w1, #0x1                   	// #1
   460e0:	str	w1, [x22, #4]
   460e4:	str	x0, [x22, #8]
   460e8:	mov	w0, #0xffffff80            	// #-128
   460ec:	str	w0, [x22, #16]
   460f0:	mov	w0, #0xff                  	// #255
   460f4:	str	w0, [x22, #20]
   460f8:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   460fc:	mov	w2, #0x5                   	// #5
   46100:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   46104:	add	x1, x1, #0xdc8
   46108:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   4610c:	add	x0, x0, #0x908
   46110:	bl	359e0 <dcgettext@plt>
   46114:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46118:	mov	w1, #0x9                   	// #9
   4611c:	str	w1, [x22]
   46120:	str	w21, [x22, #4]
   46124:	str	x0, [x22, #8]
   46128:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4612c:	adrp	x3, 60000 <xexit@@Base+0x774c>
   46130:	add	x3, x3, #0x78
   46134:	add	x3, x3, #0x178
   46138:	mov	w2, #0x917                 	// #2327
   4613c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   46140:	add	x1, x1, #0xe98
   46144:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   46148:	add	x0, x0, #0xa28
   4614c:	bl	35ac0 <__assert_fail@plt>
   46150:	ldr	x0, [x25, #16]
   46154:	bl	35760 <aarch64_shrink_expanded_imm8@plt>
   46158:	tbnz	w0, #31, 461cc <aarch64_match_operands_constraint@@Base+0x2090>
   4615c:	ldr	w0, [x25, #32]
   46160:	cmp	w0, #0x1
   46164:	b.eq	4622c <aarch64_match_operands_constraint@@Base+0x20f0>  // b.none
   46168:	cmp	w0, #0x5
   4616c:	b.ne	46270 <aarch64_match_operands_constraint@@Base+0x2134>  // b.any
   46170:	ldrb	w0, [x19, #28]
   46174:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46178:	ldr	x1, [x25, #40]
   4617c:	ubfiz	w20, w0, #3, #8
   46180:	sub	w20, w20, #0x8
   46184:	tbnz	x1, #63, 46190 <aarch64_match_operands_constraint@@Base+0x2054>
   46188:	cmp	x1, w20, sxtw
   4618c:	b.le	46200 <aarch64_match_operands_constraint@@Base+0x20c4>
   46190:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46194:	mov	w2, #0x5                   	// #5
   46198:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   4619c:	add	x1, x1, #0xa78
   461a0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   461a4:	add	x0, x0, #0x908
   461a8:	bl	359e0 <dcgettext@plt>
   461ac:	mov	w1, #0x6                   	// #6
   461b0:	str	w1, [x22]
   461b4:	mov	w1, #0x1                   	// #1
   461b8:	str	w1, [x22, #4]
   461bc:	str	x0, [x22, #8]
   461c0:	str	wzr, [x22, #16]
   461c4:	str	w20, [x22, #20]
   461c8:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   461cc:	mov	w2, #0x5                   	// #5
   461d0:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   461d4:	add	x1, x1, #0xde0
   461d8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   461dc:	add	x0, x0, #0x908
   461e0:	bl	359e0 <dcgettext@plt>
   461e4:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   461e8:	mov	w1, #0x9                   	// #9
   461ec:	str	w1, [x22]
   461f0:	mov	w1, #0x1                   	// #1
   461f4:	str	w1, [x22, #4]
   461f8:	str	x0, [x22, #8]
   461fc:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46200:	tst	x1, #0x7
   46204:	b.eq	44410 <aarch64_match_operands_constraint@@Base+0x2d4>  // b.none
   46208:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4620c:	mov	w0, #0x7                   	// #7
   46210:	str	w0, [x22]
   46214:	mov	w0, #0x1                   	// #1
   46218:	str	w0, [x22, #4]
   4621c:	str	xzr, [x22, #8]
   46220:	mov	w0, #0x8                   	// #8
   46224:	str	w0, [x22, #16]
   46228:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4622c:	ldr	x0, [x25, #40]
   46230:	sub	x0, x0, #0x8
   46234:	tst	x0, #0xfffffffffffffff7
   46238:	b.eq	44410 <aarch64_match_operands_constraint@@Base+0x2d4>  // b.none
   4623c:	mov	w2, #0x5                   	// #5
   46240:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   46244:	add	x1, x1, #0xe00
   46248:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   4624c:	add	x0, x0, #0x908
   46250:	bl	359e0 <dcgettext@plt>
   46254:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46258:	mov	w1, #0x9                   	// #9
   4625c:	str	w1, [x22]
   46260:	mov	w1, #0x1                   	// #1
   46264:	str	w1, [x22, #4]
   46268:	str	x0, [x22, #8]
   4626c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46270:	cbz	w0, 44410 <aarch64_match_operands_constraint@@Base+0x2d4>
   46274:	mov	w2, #0x5                   	// #5
   46278:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   4627c:	add	x1, x1, #0xc08
   46280:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46284:	add	x0, x0, #0x908
   46288:	bl	359e0 <dcgettext@plt>
   4628c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46290:	mov	w1, #0x9                   	// #9
   46294:	str	w1, [x22]
   46298:	mov	w1, #0x1                   	// #1
   4629c:	str	w1, [x22, #4]
   462a0:	str	x0, [x22, #8]
   462a4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   462a8:	ldrb	w0, [x25, #24]
   462ac:	tbz	w0, #0, 462e8 <aarch64_match_operands_constraint@@Base+0x21ac>
   462b0:	cmp	x3, #0xff
   462b4:	b.ls	46318 <aarch64_match_operands_constraint@@Base+0x21dc>  // b.plast
   462b8:	mov	w2, #0x5                   	// #5
   462bc:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   462c0:	add	x1, x1, #0xaa8
   462c4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   462c8:	add	x0, x0, #0x908
   462cc:	bl	359e0 <dcgettext@plt>
   462d0:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   462d4:	mov	w1, #0x9                   	// #9
   462d8:	str	w1, [x22]
   462dc:	str	w21, [x22, #4]
   462e0:	str	x0, [x22, #8]
   462e4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   462e8:	mov	w2, #0x5                   	// #5
   462ec:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   462f0:	add	x1, x1, #0xe20
   462f4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   462f8:	add	x0, x0, #0x908
   462fc:	bl	359e0 <dcgettext@plt>
   46300:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46304:	mov	w1, #0x9                   	// #9
   46308:	str	w1, [x22]
   4630c:	str	w21, [x22, #4]
   46310:	str	x0, [x22, #8]
   46314:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46318:	ldr	w0, [x25, #32]
   4631c:	cbz	w0, 446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   46320:	mov	w2, #0x5                   	// #5
   46324:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   46328:	add	x1, x1, #0xc08
   4632c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46330:	add	x0, x0, #0x908
   46334:	bl	359e0 <dcgettext@plt>
   46338:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4633c:	mov	w1, #0x9                   	// #9
   46340:	str	w1, [x22]
   46344:	str	w21, [x22, #4]
   46348:	str	x0, [x22, #8]
   4634c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46350:	mov	x20, #0x0                   	// #0
   46354:	ldr	w0, [x25, #32]
   46358:	cmp	w0, #0x5
   4635c:	b.ne	463bc <aarch64_match_operands_constraint@@Base+0x2280>  // b.any
   46360:	ldrb	w0, [x19, #28]
   46364:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46368:	and	w5, w0, #0xff
   4636c:	ubfiz	w1, w0, #2, #8
   46370:	mov	x0, #0xffffffffffffffff    	// #-1
   46374:	lsl	x0, x0, x1
   46378:	lsl	x0, x0, x1
   4637c:	mvn	x0, x0
   46380:	ldr	x3, [x25, #16]
   46384:	mov	x1, x3
   46388:	ldr	x2, [x25, #40]
   4638c:	mov	w4, w2
   46390:	cmp	w5, #0x1
   46394:	b.eq	463e0 <aarch64_match_operands_constraint@@Base+0x22a4>  // b.none
   46398:	tst	w2, #0xfffffff7
   4639c:	b.ne	4646c <aarch64_match_operands_constraint@@Base+0x2330>  // b.any
   463a0:	cbnz	w2, 463e4 <aarch64_match_operands_constraint@@Base+0x22a8>
   463a4:	tst	w3, #0xff
   463a8:	b.ne	463e4 <aarch64_match_operands_constraint@@Base+0x22a8>  // b.any
   463ac:	mov	x1, #0x100                 	// #256
   463b0:	sdiv	x1, x3, x1
   463b4:	mov	w4, #0x8                   	// #8
   463b8:	b	463e4 <aarch64_match_operands_constraint@@Base+0x22a8>
   463bc:	adrp	x3, 60000 <xexit@@Base+0x774c>
   463c0:	add	x3, x3, #0x78
   463c4:	add	x3, x3, #0x178
   463c8:	mov	w2, #0x96d                 	// #2413
   463cc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   463d0:	add	x1, x1, #0xe98
   463d4:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   463d8:	add	x0, x0, #0xb68
   463dc:	bl	35ac0 <__assert_fail@plt>
   463e0:	cbnz	w2, 4643c <aarch64_match_operands_constraint@@Base+0x2300>
   463e4:	lsr	x0, x0, x4
   463e8:	bics	xzr, x1, x0
   463ec:	b.eq	463fc <aarch64_match_operands_constraint@@Base+0x22c0>  // b.none
   463f0:	orn	x2, x1, x0
   463f4:	cmp	x1, x2
   463f8:	b.ne	4649c <aarch64_match_operands_constraint@@Base+0x2360>  // b.any
   463fc:	sub	x1, x1, x20
   46400:	and	x0, x0, x1
   46404:	cmp	x0, #0xff
   46408:	b.ls	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.plast
   4640c:	mov	w2, #0x5                   	// #5
   46410:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   46414:	add	x1, x1, #0xec0
   46418:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   4641c:	add	x0, x0, #0x908
   46420:	bl	359e0 <dcgettext@plt>
   46424:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46428:	mov	w1, #0x9                   	// #9
   4642c:	str	w1, [x22]
   46430:	str	w21, [x22, #4]
   46434:	str	x0, [x22, #8]
   46438:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4643c:	mov	w2, #0x5                   	// #5
   46440:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   46444:	add	x1, x1, #0xe48
   46448:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   4644c:	add	x0, x0, #0x908
   46450:	bl	359e0 <dcgettext@plt>
   46454:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46458:	mov	w1, #0x9                   	// #9
   4645c:	str	w1, [x22]
   46460:	str	w21, [x22, #4]
   46464:	str	x0, [x22, #8]
   46468:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4646c:	mov	w2, #0x5                   	// #5
   46470:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   46474:	add	x1, x1, #0xe78
   46478:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   4647c:	add	x0, x0, #0x908
   46480:	bl	359e0 <dcgettext@plt>
   46484:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46488:	mov	w1, #0x9                   	// #9
   4648c:	str	w1, [x22]
   46490:	str	w21, [x22, #4]
   46494:	str	x0, [x22, #8]
   46498:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4649c:	mov	w2, #0x5                   	// #5
   464a0:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   464a4:	add	x1, x1, #0xe98
   464a8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   464ac:	add	x0, x0, #0x908
   464b0:	bl	359e0 <dcgettext@plt>
   464b4:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   464b8:	mov	w1, #0x9                   	// #9
   464bc:	str	w1, [x22]
   464c0:	str	w21, [x22, #4]
   464c4:	str	x0, [x22, #8]
   464c8:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   464cc:	ldrb	w0, [x25, #24]
   464d0:	tbz	w0, #0, 46514 <aarch64_match_operands_constraint@@Base+0x23d8>
   464d4:	and	x3, x3, #0xffffffffff7fffff
   464d8:	mov	x0, #0x3f000000            	// #1056964608
   464dc:	cmp	x3, x0
   464e0:	b.eq	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.none
   464e4:	mov	w2, #0x5                   	// #5
   464e8:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   464ec:	add	x1, x1, #0xef0
   464f0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   464f4:	add	x0, x0, #0x908
   464f8:	bl	359e0 <dcgettext@plt>
   464fc:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46500:	mov	w1, #0x9                   	// #9
   46504:	str	w1, [x22]
   46508:	str	w21, [x22, #4]
   4650c:	str	x0, [x22, #8]
   46510:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46514:	adrp	x3, 60000 <xexit@@Base+0x774c>
   46518:	add	x3, x3, #0x78
   4651c:	add	x3, x3, #0x178
   46520:	mov	w2, #0x99f                 	// #2463
   46524:	adrp	x1, 59000 <xexit@@Base+0x74c>
   46528:	add	x1, x1, #0xe98
   4652c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   46530:	add	x0, x0, #0xee0
   46534:	bl	35ac0 <__assert_fail@plt>
   46538:	ldrb	w0, [x25, #24]
   4653c:	tbz	w0, #0, 46584 <aarch64_match_operands_constraint@@Base+0x2448>
   46540:	mov	x0, #0xffffffffffff0000    	// #-65536
   46544:	movk	x0, #0xc100, lsl #16
   46548:	add	x3, x3, x0
   4654c:	tst	x3, #0xfffffffffeffffff
   46550:	b.eq	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.none
   46554:	mov	w2, #0x5                   	// #5
   46558:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   4655c:	add	x1, x1, #0xf18
   46560:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46564:	add	x0, x0, #0x908
   46568:	bl	359e0 <dcgettext@plt>
   4656c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46570:	mov	w1, #0x9                   	// #9
   46574:	str	w1, [x22]
   46578:	str	w21, [x22, #4]
   4657c:	str	x0, [x22, #8]
   46580:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46584:	adrp	x3, 60000 <xexit@@Base+0x774c>
   46588:	add	x3, x3, #0x78
   4658c:	add	x3, x3, #0x178
   46590:	mov	w2, #0x9a9                 	// #2473
   46594:	adrp	x1, 59000 <xexit@@Base+0x74c>
   46598:	add	x1, x1, #0xe98
   4659c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   465a0:	add	x0, x0, #0xee0
   465a4:	bl	35ac0 <__assert_fail@plt>
   465a8:	ldrb	w0, [x25, #24]
   465ac:	tbz	w0, #0, 465f0 <aarch64_match_operands_constraint@@Base+0x24b4>
   465b0:	cmp	x3, #0x0
   465b4:	mov	x0, #0x3f800000            	// #1065353216
   465b8:	ccmp	x3, x0, #0x4, ne  // ne = any
   465bc:	b.eq	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.none
   465c0:	mov	w2, #0x5                   	// #5
   465c4:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   465c8:	add	x1, x1, #0xf40
   465cc:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   465d0:	add	x0, x0, #0x908
   465d4:	bl	359e0 <dcgettext@plt>
   465d8:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   465dc:	mov	w1, #0x9                   	// #9
   465e0:	str	w1, [x22]
   465e4:	str	w21, [x22, #4]
   465e8:	str	x0, [x22, #8]
   465ec:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   465f0:	adrp	x3, 60000 <xexit@@Base+0x774c>
   465f4:	add	x3, x3, #0x78
   465f8:	add	x3, x3, #0x178
   465fc:	mov	w2, #0x9b3                 	// #2483
   46600:	adrp	x1, 59000 <xexit@@Base+0x74c>
   46604:	add	x1, x1, #0xe98
   46608:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   4660c:	add	x0, x0, #0xee0
   46610:	bl	35ac0 <__assert_fail@plt>
   46614:	ldrb	w0, [x19, #28]
   46618:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4661c:	ldr	x3, [x25, #16]
   46620:	mov	x2, #0x0                   	// #0
   46624:	and	w1, w0, #0xff
   46628:	mvn	x0, x3
   4662c:	bl	35400 <aarch64_logical_immediate_p@plt>
   46630:	cbnz	w0, 446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   46634:	mov	w2, #0x5                   	// #5
   46638:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   4663c:	add	x1, x1, #0xaa8
   46640:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46644:	add	x0, x0, #0x908
   46648:	bl	359e0 <dcgettext@plt>
   4664c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46650:	mov	w1, #0x9                   	// #9
   46654:	str	w1, [x22]
   46658:	str	w21, [x22, #4]
   4665c:	str	x0, [x22, #8]
   46660:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46664:	ldrb	w0, [x19, #28]
   46668:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4666c:	and	w24, w0, #0xff
   46670:	ldr	x20, [x25, #16]
   46674:	mov	x2, #0x0                   	// #0
   46678:	mov	w1, w24
   4667c:	mov	x0, x20
   46680:	bl	35400 <aarch64_logical_immediate_p@plt>
   46684:	cbz	w0, 466c8 <aarch64_match_operands_constraint@@Base+0x258c>
   46688:	mov	w1, w24
   4668c:	mov	x0, x20
   46690:	bl	35540 <aarch64_sve_dupm_mov_immediate_p@plt>
   46694:	cbnz	w0, 446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   46698:	mov	w2, #0x5                   	// #5
   4669c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   466a0:	add	x1, x1, #0xf68
   466a4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   466a8:	add	x0, x0, #0x908
   466ac:	bl	359e0 <dcgettext@plt>
   466b0:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   466b4:	mov	w1, #0x9                   	// #9
   466b8:	str	w1, [x22]
   466bc:	str	w21, [x22, #4]
   466c0:	str	x0, [x22, #8]
   466c4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   466c8:	mov	w2, #0x5                   	// #5
   466cc:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   466d0:	add	x1, x1, #0xaa8
   466d4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   466d8:	add	x0, x0, #0x908
   466dc:	bl	359e0 <dcgettext@plt>
   466e0:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   466e4:	mov	w1, #0x9                   	// #9
   466e8:	str	w1, [x22]
   466ec:	str	w21, [x22, #4]
   466f0:	str	x0, [x22, #8]
   466f4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   466f8:	ldr	w0, [x25, #32]
   466fc:	cmp	w0, #0xe
   46700:	b.ne	46754 <aarch64_match_operands_constraint@@Base+0x2618>  // b.any
   46704:	ldr	x0, [x25, #40]
   46708:	sub	x0, x0, #0x1
   4670c:	cmp	x0, #0xf
   46710:	b.ls	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.plast
   46714:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46718:	mov	w2, #0x5                   	// #5
   4671c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   46720:	add	x1, x1, #0xfb8
   46724:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46728:	add	x0, x0, #0x908
   4672c:	bl	359e0 <dcgettext@plt>
   46730:	mov	w1, #0x6                   	// #6
   46734:	str	w1, [x22]
   46738:	str	w21, [x22, #4]
   4673c:	str	x0, [x22, #8]
   46740:	mov	w0, #0x1                   	// #1
   46744:	str	w0, [x22, #16]
   46748:	mov	w0, #0x10                  	// #16
   4674c:	str	w0, [x22, #20]
   46750:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46754:	adrp	x3, 60000 <xexit@@Base+0x774c>
   46758:	add	x3, x3, #0x78
   4675c:	add	x3, x3, #0x178
   46760:	mov	w2, #0x9dd                 	// #2525
   46764:	adrp	x1, 59000 <xexit@@Base+0x74c>
   46768:	add	x1, x1, #0xe98
   4676c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   46770:	add	x0, x0, #0xf90
   46774:	bl	35ac0 <__assert_fail@plt>
   46778:	ldurb	w0, [x25, #-52]
   4677c:	bl	35680 <aarch64_get_qualifier_esize@plt>
   46780:	ldr	x1, [x25, #16]
   46784:	ubfiz	w20, w0, #3, #8
   46788:	sub	w20, w20, #0x1
   4678c:	tbnz	x1, #63, 46798 <aarch64_match_operands_constraint@@Base+0x265c>
   46790:	cmp	x1, w20, sxtw
   46794:	b.le	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   46798:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4679c:	mov	w2, #0x5                   	// #5
   467a0:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   467a4:	add	x1, x1, #0xbf8
   467a8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   467ac:	add	x0, x0, #0x908
   467b0:	bl	359e0 <dcgettext@plt>
   467b4:	mov	w1, #0x6                   	// #6
   467b8:	str	w1, [x22]
   467bc:	str	w21, [x22, #4]
   467c0:	str	x0, [x22, #8]
   467c4:	str	wzr, [x22, #16]
   467c8:	str	w20, [x22, #20]
   467cc:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   467d0:	cmp	w20, #0xb2
   467d4:	cset	w0, eq  // eq = none
   467d8:	add	w0, w0, #0x1
   467dc:	sub	w0, w21, w0
   467e0:	lsl	x1, x0, #3
   467e4:	sub	x0, x1, x0
   467e8:	add	x28, x28, x0, lsl #3
   467ec:	ldrb	w0, [x28, #4]
   467f0:	bl	35680 <aarch64_get_qualifier_esize@plt>
   467f4:	ldr	x1, [x25, #16]
   467f8:	ubfiz	w20, w0, #3, #8
   467fc:	cmp	x1, #0x0
   46800:	b.le	4680c <aarch64_match_operands_constraint@@Base+0x26d0>
   46804:	cmp	x1, w20, sxtw
   46808:	b.le	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   4680c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46810:	mov	w2, #0x5                   	// #5
   46814:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   46818:	add	x1, x1, #0xbf8
   4681c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46820:	add	x0, x0, #0x908
   46824:	bl	359e0 <dcgettext@plt>
   46828:	mov	w1, #0x6                   	// #6
   4682c:	str	w1, [x22]
   46830:	str	w21, [x22, #4]
   46834:	str	x0, [x22, #8]
   46838:	mov	w0, #0x1                   	// #1
   4683c:	str	w0, [x22, #16]
   46840:	str	w20, [x22, #20]
   46844:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46848:	cmp	w20, #0x60
   4684c:	b.ne	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.any
   46850:	cbnz	w21, 468d4 <aarch64_match_operands_constraint@@Base+0x2798>
   46854:	ldr	w0, [x19, #80]
   46858:	cmp	w0, #0x3b
   4685c:	b.ne	468d4 <aarch64_match_operands_constraint@@Base+0x2798>  // b.any
   46860:	ldr	w0, [x23, #16]
   46864:	sub	w2, w0, #0x3
   46868:	sub	w1, w0, #0x19
   4686c:	cmp	w2, #0x1
   46870:	ccmp	w1, #0x1, #0x0, hi  // hi = pmore
   46874:	b.hi	46884 <aarch64_match_operands_constraint@@Base+0x2748>  // b.pmore
   46878:	ldr	x1, [x19, #96]
   4687c:	cmp	x1, #0x1
   46880:	b.gt	468f8 <aarch64_match_operands_constraint@@Base+0x27bc>
   46884:	cmp	w0, #0x5
   46888:	b.ne	44410 <aarch64_match_operands_constraint@@Base+0x2d4>  // b.any
   4688c:	ldr	x0, [x19, #96]
   46890:	cmp	x0, #0x1
   46894:	b.le	44410 <aarch64_match_operands_constraint@@Base+0x2d4>
   46898:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   4689c:	mov	w2, #0x5                   	// #5
   468a0:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   468a4:	add	x1, x1, #0xbf8
   468a8:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   468ac:	add	x0, x0, #0x908
   468b0:	bl	359e0 <dcgettext@plt>
   468b4:	mov	w1, #0x6                   	// #6
   468b8:	str	w1, [x22]
   468bc:	str	wzr, [x22, #4]
   468c0:	str	x0, [x22, #8]
   468c4:	str	wzr, [x22, #16]
   468c8:	mov	w0, #0x1                   	// #1
   468cc:	str	w0, [x22, #20]
   468d0:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   468d4:	adrp	x3, 60000 <xexit@@Base+0x774c>
   468d8:	add	x3, x3, #0x78
   468dc:	add	x3, x3, #0x178
   468e0:	mov	w2, #0xa06                 	// #2566
   468e4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   468e8:	add	x1, x1, #0xe98
   468ec:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   468f0:	add	x0, x0, #0xfc8
   468f4:	bl	35ac0 <__assert_fail@plt>
   468f8:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   468fc:	mov	w2, #0x5                   	// #5
   46900:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   46904:	add	x1, x1, #0xbf8
   46908:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   4690c:	add	x0, x0, #0x908
   46910:	bl	359e0 <dcgettext@plt>
   46914:	mov	w1, #0x6                   	// #6
   46918:	str	w1, [x22]
   4691c:	str	wzr, [x22, #4]
   46920:	str	x0, [x22, #8]
   46924:	str	wzr, [x22, #16]
   46928:	mov	w0, #0x1                   	// #1
   4692c:	str	w0, [x22, #20]
   46930:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46934:	ldr	w0, [x24, #20]
   46938:	mov	w24, #0x10                  	// #16
   4693c:	cmp	w0, #0x50
   46940:	b.eq	469c8 <aarch64_match_operands_constraint@@Base+0x288c>  // b.none
   46944:	mov	w0, w26
   46948:	bl	35680 <aarch64_get_qualifier_esize@plt>
   4694c:	and	w0, w0, #0xff
   46950:	udiv	w24, w24, w0
   46954:	sub	w24, w24, #0x1
   46958:	mov	w0, w26
   4695c:	bl	358f0 <aarch64_get_qualifier_nelem@plt>
   46960:	and	w0, w0, #0xff
   46964:	cmp	w0, #0x1
   46968:	b.ne	469ec <aarch64_match_operands_constraint@@Base+0x28b0>  // b.any
   4696c:	ldr	x0, [x25, #24]
   46970:	mov	w28, w24
   46974:	tbnz	x0, #63, 46980 <aarch64_match_operands_constraint@@Base+0x2844>
   46978:	cmp	x0, w24, sxtw
   4697c:	b.le	46a10 <aarch64_match_operands_constraint@@Base+0x28d4>
   46980:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46984:	mov	w2, #0x5                   	// #5
   46988:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   4698c:	add	x1, x1, #0x948
   46990:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46994:	add	x0, x0, #0x908
   46998:	bl	359e0 <dcgettext@plt>
   4699c:	mov	w1, #0x6                   	// #6
   469a0:	str	w1, [x22]
   469a4:	str	w21, [x22, #4]
   469a8:	str	x0, [x22, #8]
   469ac:	str	wzr, [x22, #16]
   469b0:	str	w28, [x22, #20]
   469b4:	mov	w0, #0x0                   	// #0
   469b8:	ldp	x23, x24, [sp, #48]
   469bc:	ldp	x25, x26, [sp, #64]
   469c0:	ldp	x27, x28, [sp, #80]
   469c4:	b	44198 <aarch64_match_operands_constraint@@Base+0x5c>
   469c8:	ldrb	w0, [x19, #28]
   469cc:	bl	358f0 <aarch64_get_qualifier_nelem@plt>
   469d0:	and	w28, w0, #0xff
   469d4:	ldrb	w0, [x19, #28]
   469d8:	bl	35680 <aarch64_get_qualifier_esize@plt>
   469dc:	and	w24, w0, #0xff
   469e0:	mul	w24, w28, w24
   469e4:	asr	w24, w24, #1
   469e8:	b	46944 <aarch64_match_operands_constraint@@Base+0x2808>
   469ec:	adrp	x3, 60000 <xexit@@Base+0x774c>
   469f0:	add	x3, x3, #0x78
   469f4:	add	x3, x3, #0x178
   469f8:	mov	w2, #0xa2e                 	// #2606
   469fc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   46a00:	add	x1, x1, #0xe98
   46a04:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   46a08:	add	x0, x0, #0xff8
   46a0c:	bl	35ac0 <__assert_fail@plt>
   46a10:	cmp	w20, #0x22
   46a14:	ccmp	w26, #0x6, #0x0, eq  // eq = none
   46a18:	b.ne	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.any
   46a1c:	ldr	w0, [x25, #16]
   46a20:	cmp	w0, #0xf
   46a24:	b.ls	446f4 <aarch64_match_operands_constraint@@Base+0x5b8>  // b.plast
   46a28:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46a2c:	mov	w2, #0x5                   	// #5
   46a30:	adrp	x1, 5b000 <xexit@@Base+0x274c>
   46a34:	add	x1, x1, #0x28
   46a38:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46a3c:	add	x0, x0, #0x908
   46a40:	bl	359e0 <dcgettext@plt>
   46a44:	mov	w1, #0x6                   	// #6
   46a48:	str	w1, [x22]
   46a4c:	str	w21, [x22, #4]
   46a50:	str	x0, [x22, #8]
   46a54:	str	wzr, [x22, #16]
   46a58:	mov	w0, #0xf                   	// #15
   46a5c:	str	w0, [x22, #20]
   46a60:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46a64:	adrp	x3, 60000 <xexit@@Base+0x774c>
   46a68:	add	x3, x3, #0x78
   46a6c:	add	x3, x3, #0x178
   46a70:	mov	w2, #0xa47                 	// #2631
   46a74:	adrp	x1, 59000 <xexit@@Base+0x74c>
   46a78:	add	x1, x1, #0xe98
   46a7c:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   46a80:	add	x0, x0, #0x260
   46a84:	bl	35ac0 <__assert_fail@plt>
   46a88:	ldr	w0, [x23, #32]
   46a8c:	bl	35b70 <aarch64_extend_operator_p@plt>
   46a90:	cbnz	w0, 46aa0 <aarch64_match_operands_constraint@@Base+0x2964>
   46a94:	ldr	w0, [x23, #32]
   46a98:	cmp	w0, #0x5
   46a9c:	b.ne	46af8 <aarch64_match_operands_constraint@@Base+0x29bc>  // b.any
   46aa0:	mov	x0, x28
   46aa4:	bl	35740 <aarch64_stack_pointer_p@plt>
   46aa8:	cbnz	w0, 46b34 <aarch64_match_operands_constraint@@Base+0x29f8>
   46aac:	cmp	w21, #0x2
   46ab0:	b.eq	46b28 <aarch64_match_operands_constraint@@Base+0x29ec>  // b.none
   46ab4:	ldrb	w0, [x25, #36]
   46ab8:	tbz	w0, #0, 46b90 <aarch64_match_operands_constraint@@Base+0x2a54>
   46abc:	ldr	w0, [x25, #32]
   46ac0:	cmp	w0, #0x5
   46ac4:	b.ne	46b48 <aarch64_match_operands_constraint@@Base+0x2a0c>  // b.any
   46ac8:	mov	w2, #0x5                   	// #5
   46acc:	adrp	x1, 5b000 <xexit@@Base+0x274c>
   46ad0:	add	x1, x1, #0x70
   46ad4:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46ad8:	add	x0, x0, #0x908
   46adc:	bl	359e0 <dcgettext@plt>
   46ae0:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46ae4:	mov	w1, #0x9                   	// #9
   46ae8:	str	w1, [x22]
   46aec:	str	w21, [x22, #4]
   46af0:	str	x0, [x22, #8]
   46af4:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46af8:	mov	w2, #0x5                   	// #5
   46afc:	adrp	x1, 5b000 <xexit@@Base+0x274c>
   46b00:	add	x1, x1, #0x38
   46b04:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46b08:	add	x0, x0, #0x908
   46b0c:	bl	359e0 <dcgettext@plt>
   46b10:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46b14:	mov	w1, #0x9                   	// #9
   46b18:	str	w1, [x22]
   46b1c:	str	w21, [x22, #4]
   46b20:	str	x0, [x22, #8]
   46b24:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46b28:	add	x0, x19, #0x50
   46b2c:	bl	35740 <aarch64_stack_pointer_p@plt>
   46b30:	cbz	w0, 46ab4 <aarch64_match_operands_constraint@@Base+0x2978>
   46b34:	ldrb	w0, [x25, #36]
   46b38:	tbnz	w0, #0, 46b48 <aarch64_match_operands_constraint@@Base+0x2a0c>
   46b3c:	ldr	w0, [x25, #32]
   46b40:	cmp	w0, #0x5
   46b44:	b.ne	46bc0 <aarch64_match_operands_constraint@@Base+0x2a84>  // b.any
   46b48:	ldr	x0, [x25, #40]
   46b4c:	cmp	x0, #0x4
   46b50:	b.ls	46be4 <aarch64_match_operands_constraint@@Base+0x2aa8>  // b.plast
   46b54:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46b58:	mov	w2, #0x5                   	// #5
   46b5c:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   46b60:	add	x1, x1, #0xa78
   46b64:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46b68:	add	x0, x0, #0x908
   46b6c:	bl	359e0 <dcgettext@plt>
   46b70:	mov	w1, #0x6                   	// #6
   46b74:	str	w1, [x22]
   46b78:	str	w21, [x22, #4]
   46b7c:	str	x0, [x22, #8]
   46b80:	str	wzr, [x22, #16]
   46b84:	mov	w0, #0x4                   	// #4
   46b88:	str	w0, [x22, #20]
   46b8c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46b90:	mov	w2, #0x5                   	// #5
   46b94:	adrp	x1, 5b000 <xexit@@Base+0x274c>
   46b98:	add	x1, x1, #0x58
   46b9c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46ba0:	add	x0, x0, #0x908
   46ba4:	bl	359e0 <dcgettext@plt>
   46ba8:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46bac:	mov	w1, #0x9                   	// #9
   46bb0:	str	w1, [x22]
   46bb4:	str	w21, [x22, #4]
   46bb8:	str	x0, [x22, #8]
   46bbc:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46bc0:	adrp	x3, 60000 <xexit@@Base+0x774c>
   46bc4:	add	x3, x3, #0x78
   46bc8:	add	x3, x3, #0x178
   46bcc:	mov	w2, #0xa66                 	// #2662
   46bd0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   46bd4:	add	x1, x1, #0xe98
   46bd8:	adrp	x0, 5b000 <xexit@@Base+0x274c>
   46bdc:	add	x0, x0, #0x90
   46be0:	bl	35ac0 <__assert_fail@plt>
   46be4:	cmp	w26, #0x2
   46be8:	b.ne	44410 <aarch64_match_operands_constraint@@Base+0x2d4>  // b.any
   46bec:	ldr	w0, [x25, #32]
   46bf0:	and	w1, w0, #0xfffffff7
   46bf4:	cmp	w1, #0x5
   46bf8:	ccmp	w0, #0x9, #0x4, ne  // ne = any
   46bfc:	b.eq	44410 <aarch64_match_operands_constraint@@Base+0x2d4>  // b.none
   46c00:	mov	w2, #0x5                   	// #5
   46c04:	adrp	x1, 5b000 <xexit@@Base+0x274c>
   46c08:	add	x1, x1, #0xd8
   46c0c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46c10:	add	x0, x0, #0x908
   46c14:	bl	359e0 <dcgettext@plt>
   46c18:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46c1c:	mov	w1, #0x9                   	// #9
   46c20:	str	w1, [x22]
   46c24:	str	w21, [x22, #4]
   46c28:	str	x0, [x22, #8]
   46c2c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46c30:	ldr	w0, [x23, #32]
   46c34:	sub	w1, w0, #0x2
   46c38:	cmp	w1, #0x3
   46c3c:	b.hi	46ca4 <aarch64_match_operands_constraint@@Base+0x2b68>  // b.pmore
   46c40:	cmp	w0, #0x2
   46c44:	b.eq	46cd4 <aarch64_match_operands_constraint@@Base+0x2b98>  // b.none
   46c48:	cmp	w26, #0x1
   46c4c:	mov	w0, #0x1f                  	// #31
   46c50:	mov	w1, #0x3f                  	// #63
   46c54:	csel	w0, w0, w1, eq  // eq = none
   46c58:	ldr	x1, [x25, #40]
   46c5c:	mov	w20, w0
   46c60:	tbnz	x1, #63, 46c6c <aarch64_match_operands_constraint@@Base+0x2b30>
   46c64:	cmp	x1, w0, sxtw
   46c68:	b.le	44410 <aarch64_match_operands_constraint@@Base+0x2d4>
   46c6c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46c70:	mov	w2, #0x5                   	// #5
   46c74:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   46c78:	add	x1, x1, #0xa78
   46c7c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46c80:	add	x0, x0, #0x908
   46c84:	bl	359e0 <dcgettext@plt>
   46c88:	mov	w1, #0x6                   	// #6
   46c8c:	str	w1, [x22]
   46c90:	str	w21, [x22, #4]
   46c94:	str	x0, [x22, #8]
   46c98:	str	wzr, [x22, #16]
   46c9c:	str	w20, [x22, #20]
   46ca0:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46ca4:	mov	w2, #0x5                   	// #5
   46ca8:	adrp	x1, 5b000 <xexit@@Base+0x274c>
   46cac:	add	x1, x1, #0xf0
   46cb0:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46cb4:	add	x0, x0, #0x908
   46cb8:	bl	359e0 <dcgettext@plt>
   46cbc:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46cc0:	mov	w1, #0x9                   	// #9
   46cc4:	str	w1, [x22]
   46cc8:	str	w21, [x22, #4]
   46ccc:	str	x0, [x22, #8]
   46cd0:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46cd4:	ldr	w0, [x24, #16]
   46cd8:	cmp	w0, #0x42
   46cdc:	b.eq	46c48 <aarch64_match_operands_constraint@@Base+0x2b0c>  // b.none
   46ce0:	mov	w2, #0x5                   	// #5
   46ce4:	adrp	x1, 5b000 <xexit@@Base+0x274c>
   46ce8:	add	x1, x1, #0x108
   46cec:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46cf0:	add	x0, x0, #0x908
   46cf4:	bl	359e0 <dcgettext@plt>
   46cf8:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46cfc:	mov	w1, #0x9                   	// #9
   46d00:	str	w1, [x22]
   46d04:	str	w21, [x22, #4]
   46d08:	str	x0, [x22, #8]
   46d0c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46d10:	mov	w0, #0x1                   	// #1
   46d14:	ldp	x23, x24, [sp, #48]
   46d18:	ldp	x25, x26, [sp, #64]
   46d1c:	ldp	x27, x28, [sp, #80]
   46d20:	b	44198 <aarch64_match_operands_constraint@@Base+0x5c>
   46d24:	mov	w0, #0x1                   	// #1
   46d28:	ldp	x23, x24, [sp, #48]
   46d2c:	ldp	x25, x26, [sp, #64]
   46d30:	ldp	x27, x28, [sp, #80]
   46d34:	b	44198 <aarch64_match_operands_constraint@@Base+0x5c>
   46d38:	ldr	x0, [x24, #120]
   46d3c:	ubfx	w0, w0, #24, #3
   46d40:	b	455c8 <aarch64_match_operands_constraint@@Base+0x148c>
   46d44:	ldrb	w3, [x25, #36]
   46d48:	tbnz	w3, #0, 46de8 <aarch64_match_operands_constraint@@Base+0x2cac>
   46d4c:	mov	x3, #0x0                   	// #0
   46d50:	mov	w1, w2
   46d54:	sxtw	x2, w2
   46d58:	sdiv	x0, x3, x2
   46d5c:	msub	x2, x0, x2, x3
   46d60:	cbz	x2, 446f4 <aarch64_match_operands_constraint@@Base+0x5b8>
   46d64:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46d68:	mov	w0, #0x7                   	// #7
   46d6c:	str	w0, [x22]
   46d70:	str	w21, [x22, #4]
   46d74:	str	xzr, [x22, #8]
   46d78:	str	w1, [x22, #16]
   46d7c:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46d80:	mov	w0, #0x1000                	// #4096
   46d84:	b	45544 <aarch64_match_operands_constraint@@Base+0x1408>
   46d88:	mov	w0, #0x1100                	// #4352
   46d8c:	b	45344 <aarch64_match_operands_constraint@@Base+0x1208>
   46d90:	mov	x1, #0x1f                  	// #31
   46d94:	mov	x0, #0xffffffffffffffe0    	// #-32
   46d98:	b	45104 <aarch64_match_operands_constraint@@Base+0xfc8>
   46d9c:	mov	x1, #0x7                   	// #7
   46da0:	mov	x0, #0xfffffffffffffff8    	// #-8
   46da4:	b	45450 <aarch64_match_operands_constraint@@Base+0x1314>
   46da8:	mov	x20, #0xffffffffffffff80    	// #-128
   46dac:	b	46354 <aarch64_match_operands_constraint@@Base+0x2218>
   46db0:	mov	w0, #0x0                   	// #0
   46db4:	cbz	x22, 44198 <aarch64_match_operands_constraint@@Base+0x5c>
   46db8:	mov	w0, #0x4                   	// #4
   46dbc:	str	w0, [x22]
   46dc0:	mov	w0, #0xffffffff            	// #-1
   46dc4:	str	w0, [x22, #4]
   46dc8:	str	xzr, [x22, #8]
   46dcc:	mov	w0, #0x0                   	// #0
   46dd0:	b	44198 <aarch64_match_operands_constraint@@Base+0x5c>
   46dd4:	sxtw	x3, w1
   46dd8:	mov	w24, w0
   46ddc:	cmp	x3, w20, sxtw
   46de0:	b.gt	45170 <aarch64_match_operands_constraint@@Base+0x1034>
   46de4:	b	46d50 <aarch64_match_operands_constraint@@Base+0x2c14>
   46de8:	ldr	w3, [x25, #32]
   46dec:	cmp	w3, #0xf
   46df0:	b.eq	46dd4 <aarch64_match_operands_constraint@@Base+0x2c98>  // b.none
   46df4:	mov	w2, #0x5                   	// #5
   46df8:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   46dfc:	add	x1, x1, #0xaf8
   46e00:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   46e04:	add	x0, x0, #0x908
   46e08:	bl	359e0 <dcgettext@plt>
   46e0c:	cbz	x22, 469b4 <aarch64_match_operands_constraint@@Base+0x2878>
   46e10:	mov	w1, #0x9                   	// #9
   46e14:	str	w1, [x22]
   46e18:	str	w21, [x22, #4]
   46e1c:	str	x0, [x22, #8]
   46e20:	b	469b4 <aarch64_match_operands_constraint@@Base+0x2878>

0000000000046e24 <aarch64_find_real_opcode@@Base>:
   46e24:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   46e28:	ldr	x1, [x1, #3848]
   46e2c:	sub	x0, x0, x1
   46e30:	asr	x0, x0, #4
   46e34:	mov	x1, #0x8e39                	// #36409
   46e38:	movk	x1, #0x38e3, lsl #16
   46e3c:	movk	x1, #0xe38e, lsl #32
   46e40:	movk	x1, #0x8e38, lsl #48
   46e44:	mul	x0, x0, x1
   46e48:	sub	w0, w0, #0x2
   46e4c:	cmp	w0, #0x7fb
   46e50:	b.hi	47278 <aarch64_find_real_opcode@@Base+0x454>  // b.pmore
   46e54:	adrp	x1, 60000 <xexit@@Base+0x774c>
   46e58:	add	x1, x1, #0x7b0
   46e5c:	ldrh	w0, [x1, w0, uxtw #1]
   46e60:	adr	x1, 46e6c <aarch64_find_real_opcode@@Base+0x48>
   46e64:	add	x0, x1, w0, sxth #2
   46e68:	br	x0
   46e6c:	mov	w0, #0x4                   	// #4
   46e70:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46e74:	mov	w0, #0x7                   	// #7
   46e78:	sbfiz	x1, x0, #3, #32
   46e7c:	add	x0, x1, w0, sxtw
   46e80:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   46e84:	ldr	x1, [x1, #3848]
   46e88:	add	x0, x1, x0, lsl #4
   46e8c:	ret
   46e90:	mov	w0, #0xa                   	// #10
   46e94:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46e98:	mov	w0, #0xc                   	// #12
   46e9c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46ea0:	mov	w0, #0xe                   	// #14
   46ea4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46ea8:	mov	w0, #0x11                  	// #17
   46eac:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46eb0:	mov	w0, #0x16                  	// #22
   46eb4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46eb8:	mov	w0, #0x18                  	// #24
   46ebc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46ec0:	mov	w0, #0x1a                  	// #26
   46ec4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46ec8:	mov	w0, #0x98                  	// #152
   46ecc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46ed0:	mov	w0, #0x9a                  	// #154
   46ed4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46ed8:	mov	w0, #0x9c                  	// #156
   46edc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46ee0:	mov	w0, #0xf2                  	// #242
   46ee4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46ee8:	mov	w0, #0x13d                 	// #317
   46eec:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46ef0:	mov	w0, #0x184                 	// #388
   46ef4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46ef8:	mov	w0, #0x186                 	// #390
   46efc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f00:	mov	w0, #0x19c                 	// #412
   46f04:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f08:	mov	w0, #0x19e                 	// #414
   46f0c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f10:	mov	w0, #0x217                 	// #535
   46f14:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f18:	mov	w0, #0x26a                 	// #618
   46f1c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f20:	mov	w0, #0x271                 	// #625
   46f24:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f28:	mov	w0, #0x275                 	// #629
   46f2c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f30:	mov	w0, #0x297                 	// #663
   46f34:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f38:	mov	w0, #0x29a                 	// #666
   46f3c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f40:	mov	w0, #0x29d                 	// #669
   46f44:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f48:	mov	w0, #0x2b0                 	// #688
   46f4c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f50:	mov	w0, #0x2c9                 	// #713
   46f54:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f58:	mov	w0, #0x2cb                 	// #715
   46f5c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f60:	mov	w0, #0x2cd                 	// #717
   46f64:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f68:	mov	w0, #0x2cf                 	// #719
   46f6c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f70:	mov	w0, #0x2d2                 	// #722
   46f74:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f78:	mov	w0, #0x2df                 	// #735
   46f7c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f80:	mov	w0, #0x2e1                 	// #737
   46f84:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f88:	mov	w0, #0x2e3                 	// #739
   46f8c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f90:	mov	w0, #0x2e5                 	// #741
   46f94:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46f98:	mov	w0, #0x2e8                 	// #744
   46f9c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46fa0:	mov	w0, #0x2ea                 	// #746
   46fa4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46fa8:	mov	w0, #0x2f5                 	// #757
   46fac:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46fb0:	mov	w0, #0x3de                 	// #990
   46fb4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46fb8:	mov	w0, #0x3e0                 	// #992
   46fbc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46fc0:	mov	w0, #0x3e3                 	// #995
   46fc4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46fc8:	mov	w0, #0x3e7                 	// #999
   46fcc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46fd0:	mov	w0, #0x3ea                 	// #1002
   46fd4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46fd8:	mov	w0, #0x3ee                 	// #1006
   46fdc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46fe0:	mov	w0, #0x40d                 	// #1037
   46fe4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46fe8:	mov	w0, #0x40e                 	// #1038
   46fec:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46ff0:	mov	w0, #0x40f                 	// #1039
   46ff4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   46ff8:	mov	w0, #0x411                 	// #1041
   46ffc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47000:	mov	w0, #0x414                 	// #1044
   47004:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47008:	mov	w0, #0x417                 	// #1047
   4700c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47010:	mov	w0, #0x419                 	// #1049
   47014:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47018:	mov	w0, #0x41a                 	// #1050
   4701c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47020:	mov	w0, #0x41b                 	// #1051
   47024:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47028:	mov	w0, #0x41d                 	// #1053
   4702c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47030:	mov	w0, #0x420                 	// #1056
   47034:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47038:	mov	w0, #0x423                 	// #1059
   4703c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47040:	mov	w0, #0x425                 	// #1061
   47044:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47048:	mov	w0, #0x426                 	// #1062
   4704c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47050:	mov	w0, #0x427                 	// #1063
   47054:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47058:	mov	w0, #0x429                 	// #1065
   4705c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47060:	mov	w0, #0x42c                 	// #1068
   47064:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47068:	mov	w0, #0x42f                 	// #1071
   4706c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47070:	mov	w0, #0x431                 	// #1073
   47074:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47078:	mov	w0, #0x432                 	// #1074
   4707c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47080:	mov	w0, #0x433                 	// #1075
   47084:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47088:	mov	w0, #0x435                 	// #1077
   4708c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47090:	mov	w0, #0x438                 	// #1080
   47094:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47098:	mov	w0, #0x43b                 	// #1083
   4709c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   470a0:	mov	w0, #0x43d                 	// #1085
   470a4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   470a8:	mov	w0, #0x43e                 	// #1086
   470ac:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   470b0:	mov	w0, #0x43f                 	// #1087
   470b4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   470b8:	mov	w0, #0x441                 	// #1089
   470bc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   470c0:	mov	w0, #0x444                 	// #1092
   470c4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   470c8:	mov	w0, #0x447                 	// #1095
   470cc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   470d0:	mov	w0, #0x449                 	// #1097
   470d4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   470d8:	mov	w0, #0x44a                 	// #1098
   470dc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   470e0:	mov	w0, #0x44b                 	// #1099
   470e4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   470e8:	mov	w0, #0x44d                 	// #1101
   470ec:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   470f0:	mov	w0, #0x450                 	// #1104
   470f4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   470f8:	mov	w0, #0x453                 	// #1107
   470fc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47100:	mov	w0, #0x455                 	// #1109
   47104:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47108:	mov	w0, #0x456                 	// #1110
   4710c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47110:	mov	w0, #0x457                 	// #1111
   47114:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47118:	mov	w0, #0x459                 	// #1113
   4711c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47120:	mov	w0, #0x45c                 	// #1116
   47124:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47128:	mov	w0, #0x45f                 	// #1119
   4712c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47130:	mov	w0, #0x461                 	// #1121
   47134:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47138:	mov	w0, #0x462                 	// #1122
   4713c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47140:	mov	w0, #0x463                 	// #1123
   47144:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47148:	mov	w0, #0x465                 	// #1125
   4714c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47150:	mov	w0, #0x468                 	// #1128
   47154:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47158:	mov	w0, #0x46b                 	// #1131
   4715c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47160:	mov	w0, #0x49d                 	// #1181
   47164:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47168:	mov	w0, #0x49f                 	// #1183
   4716c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47170:	mov	w0, #0x4a9                 	// #1193
   47174:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47178:	mov	w0, #0x4ba                 	// #1210
   4717c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47180:	mov	w0, #0x4c0                 	// #1216
   47184:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47188:	mov	w0, #0x503                 	// #1283
   4718c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47190:	mov	w0, #0x505                 	// #1285
   47194:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47198:	mov	w0, #0x506                 	// #1286
   4719c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   471a0:	mov	w0, #0x529                 	// #1321
   471a4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   471a8:	mov	w0, #0x52c                 	// #1324
   471ac:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   471b0:	mov	w0, #0x52e                 	// #1326
   471b4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   471b8:	mov	w0, #0x531                 	// #1329
   471bc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   471c0:	mov	w0, #0x547                 	// #1351
   471c4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   471c8:	mov	w0, #0x548                 	// #1352
   471cc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   471d0:	mov	w0, #0x549                 	// #1353
   471d4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   471d8:	mov	w0, #0x555                 	// #1365
   471dc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   471e0:	mov	w0, #0x556                 	// #1366
   471e4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   471e8:	mov	w0, #0x557                 	// #1367
   471ec:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   471f0:	mov	w0, #0x558                 	// #1368
   471f4:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   471f8:	mov	w0, #0x55a                 	// #1370
   471fc:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47200:	mov	w0, #0x55c                 	// #1372
   47204:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47208:	mov	w0, #0x55d                 	// #1373
   4720c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47210:	mov	w0, #0x562                 	// #1378
   47214:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47218:	mov	w0, #0x563                 	// #1379
   4721c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47220:	mov	w0, #0x570                 	// #1392
   47224:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47228:	mov	w0, #0x572                 	// #1394
   4722c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47230:	mov	w0, #0x578                 	// #1400
   47234:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47238:	mov	w0, #0x58f                 	// #1423
   4723c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47240:	mov	w0, #0x6da                 	// #1754
   47244:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47248:	mov	w0, #0x6db                 	// #1755
   4724c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47250:	mov	w0, #0x6dd                 	// #1757
   47254:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47258:	mov	w0, #0x6de                 	// #1758
   4725c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47260:	mov	w0, #0x71c                 	// #1820
   47264:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47268:	mov	w0, #0x71d                 	// #1821
   4726c:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47270:	mov	w0, #0x2                   	// #2
   47274:	b	46e78 <aarch64_find_real_opcode@@Base+0x54>
   47278:	mov	x0, #0x0                   	// #0
   4727c:	b	46e8c <aarch64_find_real_opcode@@Base+0x68>

0000000000047280 <aarch64_insert_operand@@Base>:
   47280:	stp	x29, x30, [sp, #-16]!
   47284:	mov	x29, sp
   47288:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   4728c:	ldr	x5, [x5, #4032]
   47290:	sub	x5, x0, x5
   47294:	asr	x5, x5, #4
   47298:	mov	x6, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
   4729c:	movk	x6, #0xaaab
   472a0:	mul	x5, x5, x6
   472a4:	sub	w5, w5, #0x1
   472a8:	cmp	w5, #0xce
   472ac:	b.hi	47494 <aarch64_insert_operand@@Base+0x214>  // b.pmore
   472b0:	adrp	x6, 61000 <fields@@Base+0xc40>
   472b4:	add	x6, x6, #0x7a8
   472b8:	ldrb	w5, [x6, w5, uxtw]
   472bc:	adr	x6, 472c8 <aarch64_insert_operand@@Base+0x48>
   472c0:	add	x5, x6, w5, sxtb #2
   472c4:	br	x5
   472c8:	bl	35200 <aarch64_ins_regno@plt>
   472cc:	ldp	x29, x30, [sp], #16
   472d0:	ret
   472d4:	bl	359b0 <aarch64_ins_reg_extended@plt>
   472d8:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   472dc:	bl	35450 <aarch64_ins_reg_shifted@plt>
   472e0:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   472e4:	bl	35340 <aarch64_ins_ft@plt>
   472e8:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   472ec:	bl	35690 <aarch64_ins_reglane@plt>
   472f0:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   472f4:	bl	355e0 <aarch64_ins_reglist@plt>
   472f8:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   472fc:	bl	35aa0 <aarch64_ins_ldst_reglist@plt>
   47300:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47304:	bl	35560 <aarch64_ins_ldst_reglist_r@plt>
   47308:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4730c:	bl	35820 <aarch64_ins_ldst_elemlist@plt>
   47310:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47314:	bl	357e0 <aarch64_ins_imm@plt>
   47318:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4731c:	bl	358e0 <aarch64_ins_advsimd_imm_shift@plt>
   47320:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47324:	bl	35550 <aarch64_ins_advsimd_imm_modified@plt>
   47328:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4732c:	bl	354b0 <aarch64_ins_fpimm@plt>
   47330:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47334:	bl	353a0 <aarch64_ins_limm@plt>
   47338:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4733c:	bl	35220 <aarch64_ins_aimm@plt>
   47340:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47344:	bl	356e0 <aarch64_ins_imm_half@plt>
   47348:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4734c:	bl	356d0 <aarch64_ins_fbits@plt>
   47350:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47354:	bl	356b0 <aarch64_ins_imm_rotate2@plt>
   47358:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4735c:	bl	350e0 <aarch64_ins_imm_rotate1@plt>
   47360:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47364:	bl	35080 <aarch64_ins_cond@plt>
   47368:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4736c:	bl	35700 <aarch64_ins_addr_simple@plt>
   47370:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47374:	bl	358b0 <aarch64_ins_addr_regoff@plt>
   47378:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4737c:	bl	35300 <aarch64_ins_addr_simm@plt>
   47380:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47384:	bl	351b0 <aarch64_ins_addr_simm10@plt>
   47388:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4738c:	bl	35730 <aarch64_ins_addr_uimm12@plt>
   47390:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47394:	bl	357f0 <aarch64_ins_addr_offset@plt>
   47398:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4739c:	bl	35040 <aarch64_ins_simd_addr_post@plt>
   473a0:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   473a4:	bl	35490 <aarch64_ins_sysreg@plt>
   473a8:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   473ac:	bl	35240 <aarch64_ins_pstatefield@plt>
   473b0:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   473b4:	bl	35330 <aarch64_ins_sysins_op@plt>
   473b8:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   473bc:	bl	35860 <aarch64_ins_barrier@plt>
   473c0:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   473c4:	bl	35620 <aarch64_ins_prfop@plt>
   473c8:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   473cc:	bl	35630 <aarch64_ins_hint@plt>
   473d0:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   473d4:	bl	35600 <aarch64_ins_sve_addr_ri_s4@plt>
   473d8:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   473dc:	bl	351f0 <aarch64_ins_sve_addr_ri_s4xvl@plt>
   473e0:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   473e4:	bl	35940 <aarch64_ins_sve_addr_ri_s6xvl@plt>
   473e8:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   473ec:	bl	35b30 <aarch64_ins_sve_addr_ri_s9xvl@plt>
   473f0:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   473f4:	bl	352c0 <aarch64_ins_sve_addr_ri_u6@plt>
   473f8:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   473fc:	bl	35130 <aarch64_ins_sve_addr_rr_lsl@plt>
   47400:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47404:	bl	350b0 <aarch64_ins_sve_addr_rz_xtw@plt>
   47408:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4740c:	bl	35a20 <aarch64_ins_sve_addr_zi_u5@plt>
   47410:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47414:	bl	35290 <aarch64_ins_sve_addr_zz_lsl@plt>
   47418:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4741c:	bl	35570 <aarch64_ins_sve_addr_zz_sxtw@plt>
   47420:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47424:	bl	356a0 <aarch64_ins_sve_addr_zz_uxtw@plt>
   47428:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4742c:	bl	35920 <aarch64_ins_sve_aimm@plt>
   47430:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47434:	bl	35990 <aarch64_ins_sve_asimm@plt>
   47438:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4743c:	bl	35ad0 <aarch64_ins_sve_float_half_one@plt>
   47440:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47444:	bl	35650 <aarch64_ins_sve_float_half_two@plt>
   47448:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4744c:	bl	35030 <aarch64_ins_sve_float_zero_one@plt>
   47450:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47454:	bl	35780 <aarch64_ins_inv_limm@plt>
   47458:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4745c:	bl	354f0 <aarch64_ins_sve_limm_mov@plt>
   47460:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47464:	bl	35140 <aarch64_ins_sve_scale@plt>
   47468:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4746c:	bl	35a30 <aarch64_ins_sve_shlimm@plt>
   47470:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47474:	bl	35810 <aarch64_ins_sve_shrimm@plt>
   47478:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4747c:	bl	35070 <aarch64_ins_sve_quad_index@plt>
   47480:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47484:	bl	352d0 <aarch64_ins_sve_index@plt>
   47488:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   4748c:	bl	350d0 <aarch64_ins_sve_reglist@plt>
   47490:	b	472cc <aarch64_insert_operand@@Base+0x4c>
   47494:	adrp	x3, 61000 <fields@@Base+0xc40>
   47498:	add	x3, x3, #0x878
   4749c:	mov	w2, #0x35f                 	// #863
   474a0:	adrp	x1, 61000 <fields@@Base+0xc40>
   474a4:	add	x1, x1, #0x890
   474a8:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   474ac:	add	x0, x0, #0xb60
   474b0:	bl	35ac0 <__assert_fail@plt>

00000000000474b4 <aarch64_opcode_lookup@@Base>:
   474b4:	tbnz	w0, #26, 48180 <aarch64_opcode_lookup@@Base+0xccc>
   474b8:	tbnz	w0, #25, 47dc4 <aarch64_opcode_lookup@@Base+0x910>
   474bc:	tbnz	w0, #27, 47510 <aarch64_opcode_lookup@@Base+0x5c>
   474c0:	tbnz	w0, #24, 474e4 <aarch64_opcode_lookup@@Base+0x30>
   474c4:	lsr	w1, w0, #31
   474c8:	add	w1, w1, #0x4a2
   474cc:	sbfiz	x0, x1, #3, #32
   474d0:	add	x0, x0, w1, sxtw
   474d4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   474d8:	ldr	x1, [x1, #3848]
   474dc:	add	x0, x1, x0, lsl #4
   474e0:	ret
   474e4:	tbnz	w0, #29, 474fc <aarch64_opcode_lookup@@Base+0x48>
   474e8:	tst	x0, #0x40000000
   474ec:	mov	w0, #0xc                   	// #12
   474f0:	mov	w1, #0x10                  	// #16
   474f4:	csel	w1, w0, w1, eq  // eq = none
   474f8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   474fc:	tst	x0, #0x40000000
   47500:	mov	w0, #0xe                   	// #14
   47504:	mov	w1, #0x11                  	// #17
   47508:	csel	w1, w0, w1, eq  // eq = none
   4750c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47510:	tbnz	w0, #28, 47708 <aarch64_opcode_lookup@@Base+0x254>
   47514:	tbnz	w0, #22, 4760c <aarch64_opcode_lookup@@Base+0x158>
   47518:	tbnz	w0, #23, 47598 <aarch64_opcode_lookup@@Base+0xe4>
   4751c:	tbnz	w0, #29, 47584 <aarch64_opcode_lookup@@Base+0xd0>
   47520:	tbnz	w0, #15, 47554 <aarch64_opcode_lookup@@Base+0xa0>
   47524:	tbnz	w0, #21, 47540 <aarch64_opcode_lookup@@Base+0x8c>
   47528:	tbnz	w0, #31, 4c774 <aarch64_opcode_lookup@@Base+0x52c0>
   4752c:	tst	x0, #0x40000000
   47530:	mov	w0, #0x3a8                 	// #936
   47534:	mov	w1, #0x3ae                 	// #942
   47538:	csel	w1, w0, w1, eq  // eq = none
   4753c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47540:	cmp	w0, #0x0
   47544:	mov	w0, #0x3fd                 	// #1021
   47548:	mov	w1, #0x3b6                 	// #950
   4754c:	csel	w1, w0, w1, ge  // ge = tcont
   47550:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47554:	tbnz	w0, #21, 47570 <aarch64_opcode_lookup@@Base+0xbc>
   47558:	tbnz	w0, #31, 4c77c <aarch64_opcode_lookup@@Base+0x52c8>
   4755c:	tst	x0, #0x40000000
   47560:	mov	w0, #0x3a9                 	// #937
   47564:	mov	w1, #0x3af                 	// #943
   47568:	csel	w1, w0, w1, eq  // eq = none
   4756c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47570:	cmp	w0, #0x0
   47574:	mov	w0, #0x3ff                 	// #1023
   47578:	mov	w1, #0x3b7                 	// #951
   4757c:	csel	w1, w0, w1, ge  // ge = tcont
   47580:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47584:	tst	x0, #0x40000000
   47588:	mov	w0, #0x3ca                 	// #970
   4758c:	mov	w1, #0x3d3                 	// #979
   47590:	csel	w1, w0, w1, eq  // eq = none
   47594:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47598:	tbnz	w0, #29, 475f8 <aarch64_opcode_lookup@@Base+0x144>
   4759c:	tbnz	w0, #15, 475c4 <aarch64_opcode_lookup@@Base+0x110>
   475a0:	tbnz	w0, #21, 475b4 <aarch64_opcode_lookup@@Base+0x100>
   475a4:	mvn	w0, w0
   475a8:	lsr	w1, w0, #31
   475ac:	add	w1, w1, #0x3c7
   475b0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   475b4:	tbnz	w0, #31, 4c784 <aarch64_opcode_lookup@@Base+0x52d0>
   475b8:	ubfx	x0, x0, #30, #1
   475bc:	add	w1, w0, #0x3f1
   475c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   475c4:	tbnz	w0, #21, 475e0 <aarch64_opcode_lookup@@Base+0x12c>
   475c8:	tbnz	w0, #31, 4c78c <aarch64_opcode_lookup@@Base+0x52d8>
   475cc:	tst	x0, #0x40000000
   475d0:	mov	w0, #0x3ac                 	// #940
   475d4:	mov	w1, #0x3b2                 	// #946
   475d8:	csel	w1, w0, w1, eq  // eq = none
   475dc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   475e0:	tbnz	w0, #31, 4c794 <aarch64_opcode_lookup@@Base+0x52e0>
   475e4:	tst	x0, #0x40000000
   475e8:	mov	w0, #0x3f5                 	// #1013
   475ec:	mov	w1, #0x3f8                 	// #1016
   475f0:	csel	w1, w0, w1, eq  // eq = none
   475f4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   475f8:	tst	x0, #0x40000000
   475fc:	mov	w0, #0x3d4                 	// #980
   47600:	mov	w1, #0x3d9                 	// #985
   47604:	csel	w1, w0, w1, eq  // eq = none
   47608:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4760c:	tbnz	w0, #23, 4768c <aarch64_opcode_lookup@@Base+0x1d8>
   47610:	tbnz	w0, #29, 47678 <aarch64_opcode_lookup@@Base+0x1c4>
   47614:	tbnz	w0, #15, 47648 <aarch64_opcode_lookup@@Base+0x194>
   47618:	tbnz	w0, #21, 47634 <aarch64_opcode_lookup@@Base+0x180>
   4761c:	tbnz	w0, #31, 4c79c <aarch64_opcode_lookup@@Base+0x52e8>
   47620:	tst	x0, #0x40000000
   47624:	mov	w0, #0x3aa                 	// #938
   47628:	mov	w1, #0x3b0                 	// #944
   4762c:	csel	w1, w0, w1, eq  // eq = none
   47630:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47634:	cmp	w0, #0x0
   47638:	mov	w0, #0x3fe                 	// #1022
   4763c:	mov	w1, #0x3ba                 	// #954
   47640:	csel	w1, w0, w1, ge  // ge = tcont
   47644:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47648:	tbnz	w0, #21, 47664 <aarch64_opcode_lookup@@Base+0x1b0>
   4764c:	tbnz	w0, #31, 4c7a4 <aarch64_opcode_lookup@@Base+0x52f0>
   47650:	tst	x0, #0x40000000
   47654:	mov	w0, #0x3ab                 	// #939
   47658:	mov	w1, #0x3b1                 	// #945
   4765c:	csel	w1, w0, w1, eq  // eq = none
   47660:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47664:	cmp	w0, #0x0
   47668:	mov	w0, #0x400                 	// #1024
   4766c:	mov	w1, #0x3bb                 	// #955
   47670:	csel	w1, w0, w1, ge  // ge = tcont
   47674:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47678:	tst	x0, #0x40000000
   4767c:	mov	w0, #0x3cb                 	// #971
   47680:	mov	w1, #0x3d2                 	// #978
   47684:	csel	w1, w0, w1, eq  // eq = none
   47688:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4768c:	tbnz	w0, #29, 476f4 <aarch64_opcode_lookup@@Base+0x240>
   47690:	tbnz	w0, #15, 476c0 <aarch64_opcode_lookup@@Base+0x20c>
   47694:	tbnz	w0, #21, 476a8 <aarch64_opcode_lookup@@Base+0x1f4>
   47698:	tbnz	w0, #31, 4c7ac <aarch64_opcode_lookup@@Base+0x52f8>
   4769c:	ubfx	x0, x0, #30, #1
   476a0:	add	w1, w0, #0x3c5
   476a4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   476a8:	tbnz	w0, #31, 4c7b4 <aarch64_opcode_lookup@@Base+0x5300>
   476ac:	tst	x0, #0x40000000
   476b0:	mov	w0, #0x3f4                 	// #1012
   476b4:	mov	w1, #0x3f7                 	// #1015
   476b8:	csel	w1, w0, w1, eq  // eq = none
   476bc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   476c0:	tbnz	w0, #21, 476dc <aarch64_opcode_lookup@@Base+0x228>
   476c4:	tbnz	w0, #31, 4c7bc <aarch64_opcode_lookup@@Base+0x5308>
   476c8:	tst	x0, #0x40000000
   476cc:	mov	w0, #0x3ad                 	// #941
   476d0:	mov	w1, #0x3b3                 	// #947
   476d4:	csel	w1, w0, w1, eq  // eq = none
   476d8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   476dc:	tbnz	w0, #31, 4c7c4 <aarch64_opcode_lookup@@Base+0x5310>
   476e0:	tst	x0, #0x40000000
   476e4:	mov	w0, #0x3f6                 	// #1014
   476e8:	mov	w1, #0x3f9                 	// #1017
   476ec:	csel	w1, w0, w1, eq  // eq = none
   476f0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   476f4:	tst	x0, #0x40000000
   476f8:	mov	w0, #0x3d5                 	// #981
   476fc:	mov	w1, #0x3d8                 	// #984
   47700:	csel	w1, w0, w1, eq  // eq = none
   47704:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47708:	tbnz	w0, #24, 47c68 <aarch64_opcode_lookup@@Base+0x7b4>
   4770c:	tbnz	w0, #29, 47724 <aarch64_opcode_lookup@@Base+0x270>
   47710:	mov	w1, #0x3da                 	// #986
   47714:	tbz	w0, #31, 474cc <aarch64_opcode_lookup@@Base+0x18>
   47718:	ubfx	x0, x0, #30, #1
   4771c:	add	w1, w0, #0x3dc
   47720:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47724:	tbnz	w0, #10, 47c04 <aarch64_opcode_lookup@@Base+0x750>
   47728:	tbnz	w0, #11, 47b4c <aarch64_opcode_lookup@@Base+0x698>
   4772c:	tbnz	w0, #21, 47794 <aarch64_opcode_lookup@@Base+0x2e0>
   47730:	tbnz	w0, #23, 47768 <aarch64_opcode_lookup@@Base+0x2b4>
   47734:	tbnz	w0, #22, 47750 <aarch64_opcode_lookup@@Base+0x29c>
   47738:	tbnz	w0, #31, 4c7cc <aarch64_opcode_lookup@@Base+0x5318>
   4773c:	tst	x0, #0x40000000
   47740:	mov	w0, #0x399                 	// #921
   47744:	mov	w1, #0x39e                 	// #926
   47748:	csel	w1, w0, w1, eq  // eq = none
   4774c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47750:	tbnz	w0, #31, 4c7d4 <aarch64_opcode_lookup@@Base+0x5320>
   47754:	tst	x0, #0x40000000
   47758:	mov	w0, #0x39a                 	// #922
   4775c:	mov	w1, #0x39f                 	// #927
   47760:	csel	w1, w0, w1, eq  // eq = none
   47764:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47768:	tbnz	w0, #30, 47780 <aarch64_opcode_lookup@@Base+0x2cc>
   4776c:	cmp	w0, #0x0
   47770:	mov	w0, #0x39b                 	// #923
   47774:	mov	w1, #0x3a3                 	// #931
   47778:	csel	w1, w0, w1, ge  // ge = tcont
   4777c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47780:	cmp	w0, #0x0
   47784:	mov	w0, #0x3a0                 	// #928
   47788:	mov	w1, #0x3a4                 	// #932
   4778c:	csel	w1, w0, w1, ge  // ge = tcont
   47790:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47794:	tbnz	w0, #12, 479b0 <aarch64_opcode_lookup@@Base+0x4fc>
   47798:	tbnz	w0, #13, 478e4 <aarch64_opcode_lookup@@Base+0x430>
   4779c:	tbnz	w0, #14, 4786c <aarch64_opcode_lookup@@Base+0x3b8>
   477a0:	tbnz	w0, #15, 47808 <aarch64_opcode_lookup@@Base+0x354>
   477a4:	tbnz	w0, #22, 477d4 <aarch64_opcode_lookup@@Base+0x320>
   477a8:	tbnz	w0, #23, 477bc <aarch64_opcode_lookup@@Base+0x308>
   477ac:	tbnz	w0, #31, 4c7dc <aarch64_opcode_lookup@@Base+0x5328>
   477b0:	ubfx	x0, x0, #30, #1
   477b4:	add	w1, w0, #0x40d
   477b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   477bc:	tbnz	w0, #31, 4c7e4 <aarch64_opcode_lookup@@Base+0x5330>
   477c0:	tst	x0, #0x40000000
   477c4:	mov	w0, #0x410                 	// #1040
   477c8:	mov	w1, #0x413                 	// #1043
   477cc:	csel	w1, w0, w1, eq  // eq = none
   477d0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   477d4:	tbnz	w0, #23, 477f0 <aarch64_opcode_lookup@@Base+0x33c>
   477d8:	tbnz	w0, #31, 4c7ec <aarch64_opcode_lookup@@Base+0x5338>
   477dc:	tst	x0, #0x40000000
   477e0:	mov	w0, #0x411                 	// #1041
   477e4:	mov	w1, #0x414                 	// #1044
   477e8:	csel	w1, w0, w1, eq  // eq = none
   477ec:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   477f0:	tbnz	w0, #31, 4c7f4 <aarch64_opcode_lookup@@Base+0x5340>
   477f4:	tst	x0, #0x40000000
   477f8:	mov	w0, #0x412                 	// #1042
   477fc:	mov	w1, #0x415                 	// #1045
   47800:	csel	w1, w0, w1, eq  // eq = none
   47804:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47808:	tbnz	w0, #22, 47838 <aarch64_opcode_lookup@@Base+0x384>
   4780c:	tbnz	w0, #23, 47820 <aarch64_opcode_lookup@@Base+0x36c>
   47810:	tbnz	w0, #31, 4c7fc <aarch64_opcode_lookup@@Base+0x5348>
   47814:	ubfx	x0, x0, #30, #1
   47818:	add	w1, w0, #0x401
   4781c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47820:	tbnz	w0, #31, 4c804 <aarch64_opcode_lookup@@Base+0x5350>
   47824:	tst	x0, #0x40000000
   47828:	mov	w0, #0x404                 	// #1028
   4782c:	mov	w1, #0x407                 	// #1031
   47830:	csel	w1, w0, w1, eq  // eq = none
   47834:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47838:	tbnz	w0, #23, 47854 <aarch64_opcode_lookup@@Base+0x3a0>
   4783c:	tbnz	w0, #31, 4c80c <aarch64_opcode_lookup@@Base+0x5358>
   47840:	tst	x0, #0x40000000
   47844:	mov	w0, #0x405                 	// #1029
   47848:	mov	w1, #0x408                 	// #1032
   4784c:	csel	w1, w0, w1, eq  // eq = none
   47850:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47854:	tbnz	w0, #31, 4c814 <aarch64_opcode_lookup@@Base+0x5360>
   47858:	tst	x0, #0x40000000
   4785c:	mov	w0, #0x406                 	// #1030
   47860:	mov	w1, #0x409                 	// #1033
   47864:	csel	w1, w0, w1, eq  // eq = none
   47868:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4786c:	tbnz	w0, #15, 478d4 <aarch64_opcode_lookup@@Base+0x420>
   47870:	tbnz	w0, #22, 478a0 <aarch64_opcode_lookup@@Base+0x3ec>
   47874:	tbnz	w0, #23, 47888 <aarch64_opcode_lookup@@Base+0x3d4>
   47878:	tbnz	w0, #31, 4c81c <aarch64_opcode_lookup@@Base+0x5368>
   4787c:	ubfx	x0, x0, #30, #1
   47880:	add	w1, w0, #0x43d
   47884:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47888:	tbnz	w0, #31, 4c824 <aarch64_opcode_lookup@@Base+0x5370>
   4788c:	tst	x0, #0x40000000
   47890:	mov	w0, #0x440                 	// #1088
   47894:	mov	w1, #0x443                 	// #1091
   47898:	csel	w1, w0, w1, eq  // eq = none
   4789c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   478a0:	tbnz	w0, #23, 478bc <aarch64_opcode_lookup@@Base+0x408>
   478a4:	tbnz	w0, #31, 4c82c <aarch64_opcode_lookup@@Base+0x5378>
   478a8:	tst	x0, #0x40000000
   478ac:	mov	w0, #0x441                 	// #1089
   478b0:	mov	w1, #0x444                 	// #1092
   478b4:	csel	w1, w0, w1, eq  // eq = none
   478b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   478bc:	tbnz	w0, #31, 4c834 <aarch64_opcode_lookup@@Base+0x5380>
   478c0:	tst	x0, #0x40000000
   478c4:	mov	w0, #0x442                 	// #1090
   478c8:	mov	w1, #0x445                 	// #1093
   478cc:	csel	w1, w0, w1, eq  // eq = none
   478d0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   478d4:	tbnz	w0, #31, 4c83c <aarch64_opcode_lookup@@Base+0x5388>
   478d8:	ubfx	x0, x0, #30, #1
   478dc:	add	w1, w0, #0x3be
   478e0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   478e4:	tbnz	w0, #14, 4794c <aarch64_opcode_lookup@@Base+0x498>
   478e8:	tbnz	w0, #22, 47918 <aarch64_opcode_lookup@@Base+0x464>
   478ec:	tbnz	w0, #23, 47900 <aarch64_opcode_lookup@@Base+0x44c>
   478f0:	tbnz	w0, #31, 4c844 <aarch64_opcode_lookup@@Base+0x5390>
   478f4:	ubfx	x0, x0, #30, #1
   478f8:	add	w1, w0, #0x425
   478fc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47900:	tbnz	w0, #31, 4c84c <aarch64_opcode_lookup@@Base+0x5398>
   47904:	tst	x0, #0x40000000
   47908:	mov	w0, #0x428                 	// #1064
   4790c:	mov	w1, #0x42b                 	// #1067
   47910:	csel	w1, w0, w1, eq  // eq = none
   47914:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47918:	tbnz	w0, #23, 47934 <aarch64_opcode_lookup@@Base+0x480>
   4791c:	tbnz	w0, #31, 4c854 <aarch64_opcode_lookup@@Base+0x53a0>
   47920:	tst	x0, #0x40000000
   47924:	mov	w0, #0x429                 	// #1065
   47928:	mov	w1, #0x42c                 	// #1068
   4792c:	csel	w1, w0, w1, eq  // eq = none
   47930:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47934:	tbnz	w0, #31, 4c85c <aarch64_opcode_lookup@@Base+0x53a8>
   47938:	tst	x0, #0x40000000
   4793c:	mov	w0, #0x42a                 	// #1066
   47940:	mov	w1, #0x42d                 	// #1069
   47944:	csel	w1, w0, w1, eq  // eq = none
   47948:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4794c:	tbnz	w0, #22, 4797c <aarch64_opcode_lookup@@Base+0x4c8>
   47950:	tbnz	w0, #23, 47964 <aarch64_opcode_lookup@@Base+0x4b0>
   47954:	tbnz	w0, #31, 4c864 <aarch64_opcode_lookup@@Base+0x53b0>
   47958:	ubfx	x0, x0, #30, #1
   4795c:	add	w1, w0, #0x455
   47960:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47964:	tbnz	w0, #31, 4c86c <aarch64_opcode_lookup@@Base+0x53b8>
   47968:	tst	x0, #0x40000000
   4796c:	mov	w0, #0x458                 	// #1112
   47970:	mov	w1, #0x45b                 	// #1115
   47974:	csel	w1, w0, w1, eq  // eq = none
   47978:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4797c:	tbnz	w0, #23, 47998 <aarch64_opcode_lookup@@Base+0x4e4>
   47980:	tbnz	w0, #31, 4c874 <aarch64_opcode_lookup@@Base+0x53c0>
   47984:	tst	x0, #0x40000000
   47988:	mov	w0, #0x459                 	// #1113
   4798c:	mov	w1, #0x45c                 	// #1116
   47990:	csel	w1, w0, w1, eq  // eq = none
   47994:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47998:	tbnz	w0, #31, 4c87c <aarch64_opcode_lookup@@Base+0x53c8>
   4799c:	tst	x0, #0x40000000
   479a0:	mov	w0, #0x45a                 	// #1114
   479a4:	mov	w1, #0x45d                 	// #1117
   479a8:	csel	w1, w0, w1, eq  // eq = none
   479ac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   479b0:	tbnz	w0, #13, 47a80 <aarch64_opcode_lookup@@Base+0x5cc>
   479b4:	tbnz	w0, #14, 47a1c <aarch64_opcode_lookup@@Base+0x568>
   479b8:	tbnz	w0, #22, 479e8 <aarch64_opcode_lookup@@Base+0x534>
   479bc:	tbnz	w0, #23, 479d0 <aarch64_opcode_lookup@@Base+0x51c>
   479c0:	tbnz	w0, #31, 4c884 <aarch64_opcode_lookup@@Base+0x53d0>
   479c4:	ubfx	x0, x0, #30, #1
   479c8:	add	w1, w0, #0x419
   479cc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   479d0:	tbnz	w0, #31, 4c88c <aarch64_opcode_lookup@@Base+0x53d8>
   479d4:	tst	x0, #0x40000000
   479d8:	mov	w0, #0x41c                 	// #1052
   479dc:	mov	w1, #0x41f                 	// #1055
   479e0:	csel	w1, w0, w1, eq  // eq = none
   479e4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   479e8:	tbnz	w0, #23, 47a04 <aarch64_opcode_lookup@@Base+0x550>
   479ec:	tbnz	w0, #31, 4c894 <aarch64_opcode_lookup@@Base+0x53e0>
   479f0:	tst	x0, #0x40000000
   479f4:	mov	w0, #0x41d                 	// #1053
   479f8:	mov	w1, #0x420                 	// #1056
   479fc:	csel	w1, w0, w1, eq  // eq = none
   47a00:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47a04:	tbnz	w0, #31, 4c89c <aarch64_opcode_lookup@@Base+0x53e8>
   47a08:	tst	x0, #0x40000000
   47a0c:	mov	w0, #0x41e                 	// #1054
   47a10:	mov	w1, #0x421                 	// #1057
   47a14:	csel	w1, w0, w1, eq  // eq = none
   47a18:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47a1c:	tbnz	w0, #22, 47a4c <aarch64_opcode_lookup@@Base+0x598>
   47a20:	tbnz	w0, #23, 47a34 <aarch64_opcode_lookup@@Base+0x580>
   47a24:	tbnz	w0, #31, 4c8a4 <aarch64_opcode_lookup@@Base+0x53f0>
   47a28:	ubfx	x0, x0, #30, #1
   47a2c:	add	w1, w0, #0x449
   47a30:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47a34:	tbnz	w0, #31, 4c8ac <aarch64_opcode_lookup@@Base+0x53f8>
   47a38:	tst	x0, #0x40000000
   47a3c:	mov	w0, #0x44c                 	// #1100
   47a40:	mov	w1, #0x44f                 	// #1103
   47a44:	csel	w1, w0, w1, eq  // eq = none
   47a48:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47a4c:	tbnz	w0, #23, 47a68 <aarch64_opcode_lookup@@Base+0x5b4>
   47a50:	tbnz	w0, #31, 4c8b4 <aarch64_opcode_lookup@@Base+0x5400>
   47a54:	tst	x0, #0x40000000
   47a58:	mov	w0, #0x44d                 	// #1101
   47a5c:	mov	w1, #0x450                 	// #1104
   47a60:	csel	w1, w0, w1, eq  // eq = none
   47a64:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47a68:	tbnz	w0, #31, 4c8bc <aarch64_opcode_lookup@@Base+0x5408>
   47a6c:	tst	x0, #0x40000000
   47a70:	mov	w0, #0x44e                 	// #1102
   47a74:	mov	w1, #0x451                 	// #1105
   47a78:	csel	w1, w0, w1, eq  // eq = none
   47a7c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47a80:	tbnz	w0, #14, 47ae8 <aarch64_opcode_lookup@@Base+0x634>
   47a84:	tbnz	w0, #22, 47ab4 <aarch64_opcode_lookup@@Base+0x600>
   47a88:	tbnz	w0, #23, 47a9c <aarch64_opcode_lookup@@Base+0x5e8>
   47a8c:	tbnz	w0, #31, 4c8c4 <aarch64_opcode_lookup@@Base+0x5410>
   47a90:	ubfx	x0, x0, #30, #1
   47a94:	add	w1, w0, #0x431
   47a98:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47a9c:	tbnz	w0, #31, 4c8cc <aarch64_opcode_lookup@@Base+0x5418>
   47aa0:	tst	x0, #0x40000000
   47aa4:	mov	w0, #0x434                 	// #1076
   47aa8:	mov	w1, #0x437                 	// #1079
   47aac:	csel	w1, w0, w1, eq  // eq = none
   47ab0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47ab4:	tbnz	w0, #23, 47ad0 <aarch64_opcode_lookup@@Base+0x61c>
   47ab8:	tbnz	w0, #31, 4c8d4 <aarch64_opcode_lookup@@Base+0x5420>
   47abc:	tst	x0, #0x40000000
   47ac0:	mov	w0, #0x435                 	// #1077
   47ac4:	mov	w1, #0x438                 	// #1080
   47ac8:	csel	w1, w0, w1, eq  // eq = none
   47acc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47ad0:	tbnz	w0, #31, 4c8dc <aarch64_opcode_lookup@@Base+0x5428>
   47ad4:	tst	x0, #0x40000000
   47ad8:	mov	w0, #0x436                 	// #1078
   47adc:	mov	w1, #0x439                 	// #1081
   47ae0:	csel	w1, w0, w1, eq  // eq = none
   47ae4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47ae8:	tbnz	w0, #22, 47b18 <aarch64_opcode_lookup@@Base+0x664>
   47aec:	tbnz	w0, #23, 47b00 <aarch64_opcode_lookup@@Base+0x64c>
   47af0:	tbnz	w0, #31, 4c8e4 <aarch64_opcode_lookup@@Base+0x5430>
   47af4:	ubfx	x0, x0, #30, #1
   47af8:	add	w1, w0, #0x461
   47afc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47b00:	tbnz	w0, #31, 4c8ec <aarch64_opcode_lookup@@Base+0x5438>
   47b04:	tst	x0, #0x40000000
   47b08:	mov	w0, #0x464                 	// #1124
   47b0c:	mov	w1, #0x467                 	// #1127
   47b10:	csel	w1, w0, w1, eq  // eq = none
   47b14:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47b18:	tbnz	w0, #23, 47b34 <aarch64_opcode_lookup@@Base+0x680>
   47b1c:	tbnz	w0, #31, 4c8f4 <aarch64_opcode_lookup@@Base+0x5440>
   47b20:	tst	x0, #0x40000000
   47b24:	mov	w0, #0x465                 	// #1125
   47b28:	mov	w1, #0x468                 	// #1128
   47b2c:	csel	w1, w0, w1, eq  // eq = none
   47b30:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47b34:	tbnz	w0, #31, 4c8fc <aarch64_opcode_lookup@@Base+0x5448>
   47b38:	tst	x0, #0x40000000
   47b3c:	mov	w0, #0x466                 	// #1126
   47b40:	mov	w1, #0x469                 	// #1129
   47b44:	csel	w1, w0, w1, eq  // eq = none
   47b48:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47b4c:	tbnz	w0, #21, 47ba0 <aarch64_opcode_lookup@@Base+0x6ec>
   47b50:	tbnz	w0, #23, 47b88 <aarch64_opcode_lookup@@Base+0x6d4>
   47b54:	tbnz	w0, #22, 47b70 <aarch64_opcode_lookup@@Base+0x6bc>
   47b58:	tbnz	w0, #31, 4c904 <aarch64_opcode_lookup@@Base+0x5450>
   47b5c:	tst	x0, #0x40000000
   47b60:	mov	w0, #0x390                 	// #912
   47b64:	mov	w1, #0x393                 	// #915
   47b68:	csel	w1, w0, w1, eq  // eq = none
   47b6c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47b70:	tbnz	w0, #31, 4c90c <aarch64_opcode_lookup@@Base+0x5458>
   47b74:	tst	x0, #0x40000000
   47b78:	mov	w0, #0x391                 	// #913
   47b7c:	mov	w1, #0x394                 	// #916
   47b80:	csel	w1, w0, w1, eq  // eq = none
   47b84:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47b88:	tbnz	w0, #30, 4c914 <aarch64_opcode_lookup@@Base+0x5460>
   47b8c:	cmp	w0, #0x0
   47b90:	mov	w0, #0x392                 	// #914
   47b94:	mov	w1, #0x398                 	// #920
   47b98:	csel	w1, w0, w1, ge  // ge = tcont
   47b9c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47ba0:	tbnz	w0, #23, 47bd8 <aarch64_opcode_lookup@@Base+0x724>
   47ba4:	tbnz	w0, #22, 47bc0 <aarch64_opcode_lookup@@Base+0x70c>
   47ba8:	tbnz	w0, #31, 4c91c <aarch64_opcode_lookup@@Base+0x5468>
   47bac:	tst	x0, #0x40000000
   47bb0:	mov	w0, #0x384                 	// #900
   47bb4:	mov	w1, #0x389                 	// #905
   47bb8:	csel	w1, w0, w1, eq  // eq = none
   47bbc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47bc0:	tbnz	w0, #31, 4c924 <aarch64_opcode_lookup@@Base+0x5470>
   47bc4:	tst	x0, #0x40000000
   47bc8:	mov	w0, #0x385                 	// #901
   47bcc:	mov	w1, #0x38a                 	// #906
   47bd0:	csel	w1, w0, w1, eq  // eq = none
   47bd4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47bd8:	tbnz	w0, #30, 47bf0 <aarch64_opcode_lookup@@Base+0x73c>
   47bdc:	cmp	w0, #0x0
   47be0:	mov	w0, #0x386                 	// #902
   47be4:	mov	w1, #0x38e                 	// #910
   47be8:	csel	w1, w0, w1, ge  // ge = tcont
   47bec:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47bf0:	cmp	w0, #0x0
   47bf4:	mov	w0, #0x38b                 	// #907
   47bf8:	mov	w1, #0x38f                 	// #911
   47bfc:	csel	w1, w0, w1, ge  // ge = tcont
   47c00:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47c04:	tbnz	w0, #21, 47c5c <aarch64_opcode_lookup@@Base+0x7a8>
   47c08:	tbnz	w0, #23, 47c40 <aarch64_opcode_lookup@@Base+0x78c>
   47c0c:	tbnz	w0, #22, 47c28 <aarch64_opcode_lookup@@Base+0x774>
   47c10:	tbnz	w0, #31, 4c92c <aarch64_opcode_lookup@@Base+0x5478>
   47c14:	tst	x0, #0x40000000
   47c18:	mov	w0, #0x365                 	// #869
   47c1c:	mov	w1, #0x36a                 	// #874
   47c20:	csel	w1, w0, w1, eq  // eq = none
   47c24:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47c28:	tbnz	w0, #31, 4c934 <aarch64_opcode_lookup@@Base+0x5480>
   47c2c:	tst	x0, #0x40000000
   47c30:	mov	w0, #0x366                 	// #870
   47c34:	mov	w1, #0x36b                 	// #875
   47c38:	csel	w1, w0, w1, eq  // eq = none
   47c3c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47c40:	mov	w1, #0x36c                 	// #876
   47c44:	tbnz	w0, #30, 474cc <aarch64_opcode_lookup@@Base+0x18>
   47c48:	cmp	w0, #0x0
   47c4c:	mov	w0, #0x367                 	// #871
   47c50:	mov	w1, #0x36f                 	// #879
   47c54:	csel	w1, w0, w1, ge  // ge = tcont
   47c58:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47c5c:	ubfx	x0, x0, #23, #1
   47c60:	add	w1, w0, #0x3a6
   47c64:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47c68:	tbnz	w0, #23, 47d30 <aarch64_opcode_lookup@@Base+0x87c>
   47c6c:	tbnz	w0, #22, 47cd0 <aarch64_opcode_lookup@@Base+0x81c>
   47c70:	tbnz	w0, #29, 47cb8 <aarch64_opcode_lookup@@Base+0x804>
   47c74:	mov	w1, #0x374                 	// #884
   47c78:	tbnz	w0, #10, 474cc <aarch64_opcode_lookup@@Base+0x18>
   47c7c:	mov	w1, #0x370                 	// #880
   47c80:	tbnz	w0, #11, 474cc <aarch64_opcode_lookup@@Base+0x18>
   47c84:	mov	w1, #0x3c3                 	// #963
   47c88:	tbnz	w0, #21, 474cc <aarch64_opcode_lookup@@Base+0x18>
   47c8c:	tbnz	w0, #30, 47ca4 <aarch64_opcode_lookup@@Base+0x7f0>
   47c90:	cmp	w0, #0x0
   47c94:	mov	w0, #0x949                 	// #2377
   47c98:	mov	w1, #0x951                 	// #2385
   47c9c:	csel	w1, w0, w1, ge  // ge = tcont
   47ca0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47ca4:	cmp	w0, #0x0
   47ca8:	mov	w0, #0x94d                 	// #2381
   47cac:	mov	w1, #0x954                 	// #2388
   47cb0:	csel	w1, w0, w1, ge  // ge = tcont
   47cb4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47cb8:	tbnz	w0, #31, 4c93c <aarch64_opcode_lookup@@Base+0x5488>
   47cbc:	tst	x0, #0x40000000
   47cc0:	mov	w0, #0x378                 	// #888
   47cc4:	mov	w1, #0x37d                 	// #893
   47cc8:	csel	w1, w0, w1, eq  // eq = none
   47ccc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47cd0:	tbnz	w0, #29, 47d18 <aarch64_opcode_lookup@@Base+0x864>
   47cd4:	mov	w1, #0x375                 	// #885
   47cd8:	tbnz	w0, #10, 474cc <aarch64_opcode_lookup@@Base+0x18>
   47cdc:	mov	w1, #0x371                 	// #881
   47ce0:	tbnz	w0, #11, 474cc <aarch64_opcode_lookup@@Base+0x18>
   47ce4:	mov	w1, #0x3a5                 	// #933
   47ce8:	tbnz	w0, #21, 474cc <aarch64_opcode_lookup@@Base+0x18>
   47cec:	tbnz	w0, #30, 47d04 <aarch64_opcode_lookup@@Base+0x850>
   47cf0:	cmp	w0, #0x0
   47cf4:	mov	w0, #0x94a                 	// #2378
   47cf8:	mov	w1, #0x952                 	// #2386
   47cfc:	csel	w1, w0, w1, ge  // ge = tcont
   47d00:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47d04:	cmp	w0, #0x0
   47d08:	mov	w0, #0x94e                 	// #2382
   47d0c:	mov	w1, #0x955                 	// #2389
   47d10:	csel	w1, w0, w1, ge  // ge = tcont
   47d14:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47d18:	tbnz	w0, #31, 4c944 <aarch64_opcode_lookup@@Base+0x5490>
   47d1c:	tst	x0, #0x40000000
   47d20:	mov	w0, #0x379                 	// #889
   47d24:	mov	w1, #0x37e                 	// #894
   47d28:	csel	w1, w0, w1, eq  // eq = none
   47d2c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47d30:	tbnz	w0, #29, 47d98 <aarch64_opcode_lookup@@Base+0x8e4>
   47d34:	tbnz	w0, #10, 47d8c <aarch64_opcode_lookup@@Base+0x8d8>
   47d38:	tbnz	w0, #11, 47d80 <aarch64_opcode_lookup@@Base+0x8cc>
   47d3c:	tbnz	w0, #21, 47d70 <aarch64_opcode_lookup@@Base+0x8bc>
   47d40:	tbnz	w0, #22, 47d5c <aarch64_opcode_lookup@@Base+0x8a8>
   47d44:	tbnz	w0, #30, 4c94c <aarch64_opcode_lookup@@Base+0x5498>
   47d48:	cmp	w0, #0x0
   47d4c:	mov	w0, #0x94c                 	// #2380
   47d50:	mov	w1, #0x953                 	// #2387
   47d54:	csel	w1, w0, w1, ge  // ge = tcont
   47d58:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47d5c:	tst	x0, #0x40000000
   47d60:	mov	w0, #0x94b                 	// #2379
   47d64:	mov	w1, #0x94f                 	// #2383
   47d68:	csel	w1, w0, w1, eq  // eq = none
   47d6c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47d70:	tst	x0, #0x400000
   47d74:	cset	w0, eq  // eq = none
   47d78:	add	w1, w0, #0x3c1
   47d7c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47d80:	ubfx	x0, x0, #22, #1
   47d84:	add	w1, w0, #0x372
   47d88:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47d8c:	ubfx	x0, x0, #22, #1
   47d90:	add	w1, w0, #0x376
   47d94:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47d98:	tbnz	w0, #30, 47db0 <aarch64_opcode_lookup@@Base+0x8fc>
   47d9c:	cmp	w0, #0x0
   47da0:	mov	w0, #0x37a                 	// #890
   47da4:	mov	w1, #0x382                 	// #898
   47da8:	csel	w1, w0, w1, ge  // ge = tcont
   47dac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47db0:	cmp	w0, #0x0
   47db4:	mov	w0, #0x37f                 	// #895
   47db8:	mov	w1, #0x383                 	// #899
   47dbc:	csel	w1, w0, w1, ge  // ge = tcont
   47dc0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47dc4:	tbnz	w0, #24, 480a4 <aarch64_opcode_lookup@@Base+0xbf0>
   47dc8:	tbnz	w0, #27, 47e18 <aarch64_opcode_lookup@@Base+0x964>
   47dcc:	tbnz	w0, #23, 47dfc <aarch64_opcode_lookup@@Base+0x948>
   47dd0:	tbnz	w0, #29, 47de8 <aarch64_opcode_lookup@@Base+0x934>
   47dd4:	tst	x0, #0x40000000
   47dd8:	mov	w0, #0x3de                 	// #990
   47ddc:	mov	w1, #0x3e2                 	// #994
   47de0:	csel	w1, w0, w1, eq  // eq = none
   47de4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47de8:	tst	x0, #0x40000000
   47dec:	mov	w0, #0x3e0                 	// #992
   47df0:	mov	w1, #0x3e3                 	// #995
   47df4:	csel	w1, w0, w1, eq  // eq = none
   47df8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47dfc:	mov	w1, #0x4a1                 	// #1185
   47e00:	tbnz	w0, #29, 474cc <aarch64_opcode_lookup@@Base+0x18>
   47e04:	tst	x0, #0x40000000
   47e08:	mov	w0, #0x49d                 	// #1181
   47e0c:	mov	w1, #0x49f                 	// #1183
   47e10:	csel	w1, w0, w1, eq  // eq = none
   47e14:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47e18:	tbnz	w0, #21, 48078 <aarch64_opcode_lookup@@Base+0xbc4>
   47e1c:	tbnz	w0, #28, 47e4c <aarch64_opcode_lookup@@Base+0x998>
   47e20:	tbnz	w0, #29, 47e38 <aarch64_opcode_lookup@@Base+0x984>
   47e24:	tst	x0, #0x40000000
   47e28:	mov	w0, #0x3e5                 	// #997
   47e2c:	mov	w1, #0x3ec                 	// #1004
   47e30:	csel	w1, w0, w1, eq  // eq = none
   47e34:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47e38:	tst	x0, #0x40000000
   47e3c:	mov	w0, #0x3e7                 	// #999
   47e40:	mov	w1, #0x3ee                 	// #1006
   47e44:	csel	w1, w0, w1, eq  // eq = none
   47e48:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47e4c:	tbnz	w0, #10, 47f98 <aarch64_opcode_lookup@@Base+0xae4>
   47e50:	tbnz	w0, #11, 47f24 <aarch64_opcode_lookup@@Base+0xa70>
   47e54:	tbnz	w0, #22, 47e90 <aarch64_opcode_lookup@@Base+0x9dc>
   47e58:	tbnz	w0, #23, 47e7c <aarch64_opcode_lookup@@Base+0x9c8>
   47e5c:	tbnz	w0, #29, 47e6c <aarch64_opcode_lookup@@Base+0x9b8>
   47e60:	ubfx	x0, x0, #30, #1
   47e64:	lsl	w1, w0, #1
   47e68:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47e6c:	tst	x0, #0x40000000
   47e70:	mov	w0, #0x4                   	// #4
   47e74:	csinc	w1, w0, wzr, ne  // ne = any
   47e78:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47e7c:	tst	x0, #0x40000000
   47e80:	mov	w0, #0x296                 	// #662
   47e84:	mov	w1, #0x29a                 	// #666
   47e88:	csel	w1, w0, w1, eq  // eq = none
   47e8c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47e90:	tbnz	w0, #23, 47ea0 <aarch64_opcode_lookup@@Base+0x9ec>
   47e94:	ubfx	x0, x0, #30, #1
   47e98:	add	w1, w0, #0x294
   47e9c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47ea0:	tbnz	w0, #12, 47ef0 <aarch64_opcode_lookup@@Base+0xa3c>
   47ea4:	tbnz	w0, #13, 47edc <aarch64_opcode_lookup@@Base+0xa28>
   47ea8:	tbnz	w0, #14, 47ec8 <aarch64_opcode_lookup@@Base+0xa14>
   47eac:	tbnz	w0, #29, 4c954 <aarch64_opcode_lookup@@Base+0x54a0>
   47eb0:	tbz	w0, #30, 4c95c <aarch64_opcode_lookup@@Base+0x54a8>
   47eb4:	tst	x0, #0x10000
   47eb8:	mov	w0, #0x2ad                 	// #685
   47ebc:	mov	w1, #0x2b5                 	// #693
   47ec0:	csel	w1, w0, w1, eq  // eq = none
   47ec4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47ec8:	tst	x0, #0x40000000
   47ecc:	mov	w0, #0x2d7                 	// #727
   47ed0:	mov	w1, #0x2c5                 	// #709
   47ed4:	csel	w1, w0, w1, eq  // eq = none
   47ed8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47edc:	tst	x0, #0x40000000
   47ee0:	mov	w0, #0x2c9                 	// #713
   47ee4:	mov	w1, #0x2bd                 	// #701
   47ee8:	csel	w1, w0, w1, eq  // eq = none
   47eec:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47ef0:	tbnz	w0, #13, 47f10 <aarch64_opcode_lookup@@Base+0xa5c>
   47ef4:	tbnz	w0, #14, 4c964 <aarch64_opcode_lookup@@Base+0x54b0>
   47ef8:	tbz	w0, #30, 4c96c <aarch64_opcode_lookup@@Base+0x54b8>
   47efc:	tst	x0, #0x10000
   47f00:	mov	w0, #0x2b2                 	// #690
   47f04:	mov	w1, #0x2b9                 	// #697
   47f08:	csel	w1, w0, w1, eq  // eq = none
   47f0c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47f10:	tst	x0, #0x40000000
   47f14:	mov	w0, #0x2d6                 	// #726
   47f18:	mov	w1, #0x2c1                 	// #705
   47f1c:	csel	w1, w0, w1, eq  // eq = none
   47f20:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47f24:	tbnz	w0, #22, 47f34 <aarch64_opcode_lookup@@Base+0xa80>
   47f28:	ubfx	x0, x0, #14, #1
   47f2c:	add	w1, w0, #0x947
   47f30:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47f34:	tbnz	w0, #23, 47f44 <aarch64_opcode_lookup@@Base+0xa90>
   47f38:	ubfx	x0, x0, #30, #1
   47f3c:	add	w1, w0, #0x292
   47f40:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47f44:	tbnz	w0, #12, 47f80 <aarch64_opcode_lookup@@Base+0xacc>
   47f48:	tbnz	w0, #13, 47f6c <aarch64_opcode_lookup@@Base+0xab8>
   47f4c:	tbnz	w0, #14, 4c974 <aarch64_opcode_lookup@@Base+0x54c0>
   47f50:	tbz	w0, #30, 4c97c <aarch64_opcode_lookup@@Base+0x54c8>
   47f54:	tbnz	w0, #16, 4c984 <aarch64_opcode_lookup@@Base+0x54d0>
   47f58:	cmp	w0, #0x0
   47f5c:	mov	w0, #0x2af                 	// #687
   47f60:	mov	w1, #0x2b4                 	// #692
   47f64:	csel	w1, w0, w1, ge  // ge = tcont
   47f68:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47f6c:	tst	x0, #0x40000000
   47f70:	mov	w0, #0x2cd                 	// #717
   47f74:	mov	w1, #0x2bf                 	// #703
   47f78:	csel	w1, w0, w1, eq  // eq = none
   47f7c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47f80:	tbnz	w0, #13, 4c98c <aarch64_opcode_lookup@@Base+0x54d8>
   47f84:	tst	x0, #0x4000
   47f88:	mov	w0, #0x2bb                 	// #699
   47f8c:	mov	w1, #0x2dd                 	// #733
   47f90:	csel	w1, w0, w1, eq  // eq = none
   47f94:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47f98:	tbnz	w0, #11, 48024 <aarch64_opcode_lookup@@Base+0xb70>
   47f9c:	tbnz	w0, #22, 47fbc <aarch64_opcode_lookup@@Base+0xb08>
   47fa0:	mov	w1, #0x946                 	// #2374
   47fa4:	tbz	w0, #23, 474cc <aarch64_opcode_lookup@@Base+0x18>
   47fa8:	tst	x0, #0x40000000
   47fac:	mov	w0, #0x297                 	// #663
   47fb0:	mov	w1, #0x29d                 	// #669
   47fb4:	csel	w1, w0, w1, eq  // eq = none
   47fb8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47fbc:	tbnz	w0, #12, 48004 <aarch64_opcode_lookup@@Base+0xb50>
   47fc0:	tbnz	w0, #13, 47ff0 <aarch64_opcode_lookup@@Base+0xb3c>
   47fc4:	tbnz	w0, #14, 47fdc <aarch64_opcode_lookup@@Base+0xb28>
   47fc8:	tst	x0, #0x10000
   47fcc:	mov	w0, #0x2ae                 	// #686
   47fd0:	mov	w1, #0x2b6                 	// #694
   47fd4:	csel	w1, w0, w1, eq  // eq = none
   47fd8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47fdc:	tst	x0, #0x40000000
   47fe0:	mov	w0, #0x2d8                 	// #728
   47fe4:	mov	w1, #0x2c6                 	// #710
   47fe8:	csel	w1, w0, w1, eq  // eq = none
   47fec:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   47ff0:	tst	x0, #0x40000000
   47ff4:	mov	w0, #0x2cb                 	// #715
   47ff8:	mov	w1, #0x2be                 	// #702
   47ffc:	csel	w1, w0, w1, eq  // eq = none
   48000:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48004:	tbnz	w0, #13, 4c994 <aarch64_opcode_lookup@@Base+0x54e0>
   48008:	tbnz	w0, #14, 4c99c <aarch64_opcode_lookup@@Base+0x54e8>
   4800c:	tbz	w0, #30, 4c9a4 <aarch64_opcode_lookup@@Base+0x54f0>
   48010:	tst	x0, #0x10000
   48014:	mov	w0, #0x2b3                 	// #691
   48018:	mov	w1, #0x2ba                 	// #698
   4801c:	csel	w1, w0, w1, eq  // eq = none
   48020:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48024:	tbnz	w0, #12, 4805c <aarch64_opcode_lookup@@Base+0xba8>
   48028:	tbnz	w0, #13, 48048 <aarch64_opcode_lookup@@Base+0xb94>
   4802c:	tbnz	w0, #14, 4c9ac <aarch64_opcode_lookup@@Base+0x54f8>
   48030:	tbz	w0, #30, 4c9b4 <aarch64_opcode_lookup@@Base+0x5500>
   48034:	tst	x0, #0x10000
   48038:	mov	w0, #0x2b0                 	// #688
   4803c:	mov	w1, #0x2b8                 	// #696
   48040:	csel	w1, w0, w1, eq  // eq = none
   48044:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48048:	tst	x0, #0x40000000
   4804c:	mov	w0, #0x2cf                 	// #719
   48050:	mov	w1, #0x2c0                 	// #704
   48054:	csel	w1, w0, w1, eq  // eq = none
   48058:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4805c:	mov	w1, #0x2c4                 	// #708
   48060:	tbnz	w0, #13, 474cc <aarch64_opcode_lookup@@Base+0x18>
   48064:	tst	x0, #0x4000
   48068:	mov	w0, #0x2bc                 	// #700
   4806c:	mov	w1, #0x2de                 	// #734
   48070:	csel	w1, w0, w1, eq  // eq = none
   48074:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48078:	tbnz	w0, #29, 48090 <aarch64_opcode_lookup@@Base+0xbdc>
   4807c:	tst	x0, #0x40000000
   48080:	mov	w0, #0x3e6                 	// #998
   48084:	mov	w1, #0x3ed                 	// #1005
   48088:	csel	w1, w0, w1, eq  // eq = none
   4808c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48090:	tst	x0, #0x40000000
   48094:	mov	w0, #0x3ea                 	// #1002
   48098:	mov	w1, #0x3f0                 	// #1008
   4809c:	csel	w1, w0, w1, eq  // eq = none
   480a0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   480a4:	tbnz	w0, #27, 480cc <aarch64_opcode_lookup@@Base+0xc18>
   480a8:	mov	w1, #0x2f5                 	// #757
   480ac:	tbnz	w0, #23, 474cc <aarch64_opcode_lookup@@Base+0x18>
   480b0:	mov	w1, #0x271                 	// #625
   480b4:	tbnz	w0, #29, 474cc <aarch64_opcode_lookup@@Base+0x18>
   480b8:	tst	x0, #0x40000000
   480bc:	mov	w0, #0x26a                 	// #618
   480c0:	mov	w1, #0x275                 	// #629
   480c4:	csel	w1, w0, w1, eq  // eq = none
   480c8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   480cc:	tbnz	w0, #21, 48124 <aarch64_opcode_lookup@@Base+0xc70>
   480d0:	tbnz	w0, #28, 48100 <aarch64_opcode_lookup@@Base+0xc4c>
   480d4:	tbnz	w0, #29, 480ec <aarch64_opcode_lookup@@Base+0xc38>
   480d8:	tst	x0, #0x40000000
   480dc:	mov	w0, #0x15                  	// #21
   480e0:	mov	w1, #0x18                  	// #24
   480e4:	csel	w1, w0, w1, eq  // eq = none
   480e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   480ec:	tst	x0, #0x40000000
   480f0:	mov	w0, #0x16                  	// #22
   480f4:	mov	w1, #0x1a                  	// #26
   480f8:	csel	w1, w0, w1, eq  // eq = none
   480fc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48100:	mov	w1, #0x2e1                 	// #737
   48104:	tbnz	w0, #15, 474cc <aarch64_opcode_lookup@@Base+0x18>
   48108:	mov	w1, #0x2df                 	// #735
   4810c:	tbz	w0, #22, 474cc <aarch64_opcode_lookup@@Base+0x18>
   48110:	tst	x0, #0x800000
   48114:	mov	w0, #0x2e7                 	// #743
   48118:	mov	w1, #0x2ec                 	// #748
   4811c:	csel	w1, w0, w1, eq  // eq = none
   48120:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48124:	tbnz	w0, #23, 4816c <aarch64_opcode_lookup@@Base+0xcb8>
   48128:	tbnz	w0, #28, 48158 <aarch64_opcode_lookup@@Base+0xca4>
   4812c:	tbnz	w0, #29, 48144 <aarch64_opcode_lookup@@Base+0xc90>
   48130:	tst	x0, #0x40000000
   48134:	mov	w0, #0x6                   	// #6
   48138:	mov	w1, #0x9                   	// #9
   4813c:	csel	w1, w0, w1, eq  // eq = none
   48140:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48144:	tst	x0, #0x40000000
   48148:	mov	w0, #0x7                   	// #7
   4814c:	mov	w1, #0xa                   	// #10
   48150:	csel	w1, w0, w1, eq  // eq = none
   48154:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48158:	tst	x0, #0x8000
   4815c:	mov	w0, #0x2e3                 	// #739
   48160:	mov	w1, #0x2e5                 	// #741
   48164:	csel	w1, w0, w1, eq  // eq = none
   48168:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4816c:	tst	x0, #0x8000
   48170:	mov	w0, #0x2e8                 	// #744
   48174:	mov	w1, #0x2ea                 	// #746
   48178:	csel	w1, w0, w1, eq  // eq = none
   4817c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48180:	tbnz	w0, #27, 4ad90 <aarch64_opcode_lookup@@Base+0x38dc>
   48184:	tbnz	w0, #28, 4ac30 <aarch64_opcode_lookup@@Base+0x377c>
   48188:	tbnz	w0, #24, 497ac <aarch64_opcode_lookup@@Base+0x22f8>
   4818c:	tbnz	w0, #29, 490e0 <aarch64_opcode_lookup@@Base+0x1c2c>
   48190:	tbnz	w0, #13, 48918 <aarch64_opcode_lookup@@Base+0x1464>
   48194:	tbnz	w0, #14, 48678 <aarch64_opcode_lookup@@Base+0x11c4>
   48198:	tbnz	w0, #15, 483bc <aarch64_opcode_lookup@@Base+0xf08>
   4819c:	tbnz	w0, #21, 482d0 <aarch64_opcode_lookup@@Base+0xe1c>
   481a0:	tbnz	w0, #30, 48288 <aarch64_opcode_lookup@@Base+0xdd4>
   481a4:	tbnz	w0, #31, 48274 <aarch64_opcode_lookup@@Base+0xdc0>
   481a8:	tbnz	w0, #16, 48210 <aarch64_opcode_lookup@@Base+0xd5c>
   481ac:	tbnz	w0, #17, 481f4 <aarch64_opcode_lookup@@Base+0xd40>
   481b0:	tbnz	w0, #18, 481e0 <aarch64_opcode_lookup@@Base+0xd2c>
   481b4:	tbnz	w0, #19, 481cc <aarch64_opcode_lookup@@Base+0xd18>
   481b8:	tst	x0, #0x100000
   481bc:	mov	w0, #0x4fc                 	// #1276
   481c0:	mov	w1, #0x6d1                 	// #1745
   481c4:	csel	w1, w0, w1, eq  // eq = none
   481c8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   481cc:	tst	x0, #0x100000
   481d0:	mov	w0, #0x720                 	// #1824
   481d4:	mov	w1, #0x6dc                 	// #1756
   481d8:	csel	w1, w0, w1, eq  // eq = none
   481dc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   481e0:	tst	x0, #0x80000
   481e4:	mov	w0, #0x717                 	// #1815
   481e8:	mov	w1, #0x70e                 	// #1806
   481ec:	csel	w1, w0, w1, eq  // eq = none
   481f0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   481f4:	tbnz	w0, #18, 4c9bc <aarch64_opcode_lookup@@Base+0x5508>
   481f8:	tbz	w0, #19, 4c9c4 <aarch64_opcode_lookup@@Base+0x5510>
   481fc:	tst	x0, #0x100000
   48200:	mov	w0, #0x723                 	// #1827
   48204:	mov	w1, #0x504                 	// #1284
   48208:	csel	w1, w0, w1, eq  // eq = none
   4820c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48210:	tbnz	w0, #17, 48244 <aarch64_opcode_lookup@@Base+0xd90>
   48214:	tbnz	w0, #18, 48230 <aarch64_opcode_lookup@@Base+0xd7c>
   48218:	tbz	w0, #19, 4c9cc <aarch64_opcode_lookup@@Base+0x5518>
   4821c:	tst	x0, #0x100000
   48220:	mov	w0, #0x7b5                 	// #1973
   48224:	mov	w1, #0x55b                 	// #1371
   48228:	csel	w1, w0, w1, eq  // eq = none
   4822c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48230:	tst	x0, #0x80000
   48234:	mov	w0, #0x7af                 	// #1967
   48238:	mov	w1, #0x7a6                 	// #1958
   4823c:	csel	w1, w0, w1, eq  // eq = none
   48240:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48244:	tbnz	w0, #18, 4c9d4 <aarch64_opcode_lookup@@Base+0x5520>
   48248:	tbnz	w0, #19, 48260 <aarch64_opcode_lookup@@Base+0xdac>
   4824c:	tst	x0, #0x100000
   48250:	mov	w0, #0x79b                 	// #1947
   48254:	mov	w1, #0x7ba                 	// #1978
   48258:	csel	w1, w0, w1, eq  // eq = none
   4825c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48260:	tst	x0, #0x100000
   48264:	mov	w0, #0x7b8                 	// #1976
   48268:	mov	w1, #0x510                 	// #1296
   4826c:	csel	w1, w0, w1, eq  // eq = none
   48270:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48274:	tst	x0, #0x800000
   48278:	mov	w0, #0x616                 	// #1558
   4827c:	mov	w1, #0x621                 	// #1569
   48280:	csel	w1, w0, w1, eq  // eq = none
   48284:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48288:	tbnz	w0, #31, 482bc <aarch64_opcode_lookup@@Base+0xe08>
   4828c:	tbnz	w0, #12, 4c9dc <aarch64_opcode_lookup@@Base+0x5528>
   48290:	tbnz	w0, #10, 482a8 <aarch64_opcode_lookup@@Base+0xdf4>
   48294:	tst	x0, #0x800
   48298:	mov	w0, #0x719                 	// #1817
   4829c:	mov	w1, #0x877                 	// #2167
   482a0:	csel	w1, w0, w1, eq  // eq = none
   482a4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   482a8:	tst	x0, #0x800
   482ac:	mov	w0, #0x7b1                 	// #1969
   482b0:	mov	w1, #0x87e                 	// #2174
   482b4:	csel	w1, w0, w1, eq  // eq = none
   482b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   482bc:	tst	x0, #0x800000
   482c0:	mov	w0, #0x61a                 	// #1562
   482c4:	mov	w1, #0x625                 	// #1573
   482c8:	csel	w1, w0, w1, eq  // eq = none
   482cc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   482d0:	tbnz	w0, #30, 48320 <aarch64_opcode_lookup@@Base+0xe6c>
   482d4:	tbnz	w0, #31, 4830c <aarch64_opcode_lookup@@Base+0xe58>
   482d8:	tbnz	w0, #10, 482f4 <aarch64_opcode_lookup@@Base+0xe40>
   482dc:	tbnz	w0, #11, 4c9e4 <aarch64_opcode_lookup@@Base+0x5530>
   482e0:	tst	x0, #0x1000
   482e4:	mov	w0, #0x4fa                 	// #1274
   482e8:	mov	w1, #0x727                 	// #1831
   482ec:	csel	w1, w0, w1, eq  // eq = none
   482f0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   482f4:	tbnz	w0, #11, 4c9ec <aarch64_opcode_lookup@@Base+0x5538>
   482f8:	tst	x0, #0x1000
   482fc:	mov	w0, #0x797                 	// #1943
   48300:	mov	w1, #0x7bb                 	// #1979
   48304:	csel	w1, w0, w1, eq  // eq = none
   48308:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4830c:	tst	x0, #0x800000
   48310:	mov	w0, #0x6e4                 	// #1764
   48314:	mov	w1, #0x622                 	// #1570
   48318:	csel	w1, w0, w1, eq  // eq = none
   4831c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48320:	tbnz	w0, #23, 48354 <aarch64_opcode_lookup@@Base+0xea0>
   48324:	tbnz	w0, #31, 4c9f4 <aarch64_opcode_lookup@@Base+0x5540>
   48328:	tbnz	w0, #10, 48340 <aarch64_opcode_lookup@@Base+0xe8c>
   4832c:	tst	x0, #0x800
   48330:	mov	w0, #0x890                 	// #2192
   48334:	mov	w1, #0x833                 	// #2099
   48338:	csel	w1, w0, w1, eq  // eq = none
   4833c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48340:	tst	x0, #0x800
   48344:	mov	w0, #0x894                 	// #2196
   48348:	mov	w1, #0x836                 	// #2102
   4834c:	csel	w1, w0, w1, eq  // eq = none
   48350:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48354:	tbnz	w0, #31, 4c9fc <aarch64_opcode_lookup@@Base+0x5548>
   48358:	tbnz	w0, #10, 4838c <aarch64_opcode_lookup@@Base+0xed8>
   4835c:	tbnz	w0, #11, 4837c <aarch64_opcode_lookup@@Base+0xec8>
   48360:	tbnz	w0, #12, 48370 <aarch64_opcode_lookup@@Base+0xebc>
   48364:	ubfx	x0, x0, #22, #1
   48368:	add	w1, w0, #0x71a
   4836c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48370:	ubfx	x0, x0, #22, #1
   48374:	add	w1, w0, #0x891
   48378:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4837c:	tbnz	w0, #12, 4ca04 <aarch64_opcode_lookup@@Base+0x5550>
   48380:	ubfx	x0, x0, #22, #1
   48384:	add	w1, w0, #0x834
   48388:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4838c:	tbnz	w0, #11, 483ac <aarch64_opcode_lookup@@Base+0xef8>
   48390:	tbnz	w0, #12, 483a0 <aarch64_opcode_lookup@@Base+0xeec>
   48394:	ubfx	x0, x0, #22, #1
   48398:	add	w1, w0, #0x7b2
   4839c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   483a0:	ubfx	x0, x0, #22, #1
   483a4:	add	w1, w0, #0x895
   483a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   483ac:	tbnz	w0, #12, 4ca0c <aarch64_opcode_lookup@@Base+0x5558>
   483b0:	ubfx	x0, x0, #22, #1
   483b4:	add	w1, w0, #0x837
   483b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   483bc:	tbnz	w0, #31, 4860c <aarch64_opcode_lookup@@Base+0x1158>
   483c0:	tbnz	w0, #21, 48598 <aarch64_opcode_lookup@@Base+0x10e4>
   483c4:	tbnz	w0, #16, 48498 <aarch64_opcode_lookup@@Base+0xfe4>
   483c8:	tbnz	w0, #17, 48438 <aarch64_opcode_lookup@@Base+0xf84>
   483cc:	tbnz	w0, #18, 48404 <aarch64_opcode_lookup@@Base+0xf50>
   483d0:	tbnz	w0, #19, 483ec <aarch64_opcode_lookup@@Base+0xf38>
   483d4:	tbz	w0, #20, 4ca14 <aarch64_opcode_lookup@@Base+0x5560>
   483d8:	tst	x0, #0x40000000
   483dc:	mov	w0, #0x50a                 	// #1290
   483e0:	mov	w1, #0x855                 	// #2133
   483e4:	csel	w1, w0, w1, eq  // eq = none
   483e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   483ec:	tbz	w0, #20, 4ca1c <aarch64_opcode_lookup@@Base+0x5568>
   483f0:	tst	x0, #0x40000000
   483f4:	mov	w0, #0x50b                 	// #1291
   483f8:	mov	w1, #0x872                 	// #2162
   483fc:	csel	w1, w0, w1, eq  // eq = none
   48400:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48404:	tbnz	w0, #19, 48420 <aarch64_opcode_lookup@@Base+0xf6c>
   48408:	tbz	w0, #20, 4ca24 <aarch64_opcode_lookup@@Base+0x5570>
   4840c:	tst	x0, #0x40000000
   48410:	mov	w0, #0x50e                 	// #1294
   48414:	mov	w1, #0x8b0                 	// #2224
   48418:	csel	w1, w0, w1, eq  // eq = none
   4841c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48420:	tbnz	w0, #20, 4ca2c <aarch64_opcode_lookup@@Base+0x5578>
   48424:	tst	x0, #0x40000000
   48428:	mov	w0, #0x8b4                 	// #2228
   4842c:	mov	w1, #0x8a4                 	// #2212
   48430:	csel	w1, w0, w1, eq  // eq = none
   48434:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48438:	tbnz	w0, #18, 48468 <aarch64_opcode_lookup@@Base+0xfb4>
   4843c:	tbnz	w0, #19, 48454 <aarch64_opcode_lookup@@Base+0xfa0>
   48440:	tst	x0, #0x100000
   48444:	mov	w0, #0x8b2                 	// #2226
   48448:	mov	w1, #0x858                 	// #2136
   4844c:	csel	w1, w0, w1, eq  // eq = none
   48450:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48454:	tst	x0, #0x100000
   48458:	mov	w0, #0x89c                 	// #2204
   4845c:	mov	w1, #0x8aa                 	// #2218
   48460:	csel	w1, w0, w1, eq  // eq = none
   48464:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48468:	tbnz	w0, #19, 48484 <aarch64_opcode_lookup@@Base+0xfd0>
   4846c:	tbnz	w0, #20, 4ca34 <aarch64_opcode_lookup@@Base+0x5580>
   48470:	tst	x0, #0x40000000
   48474:	mov	w0, #0x8a2                 	// #2210
   48478:	mov	w1, #0x8b3                 	// #2227
   4847c:	csel	w1, w0, w1, eq  // eq = none
   48480:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48484:	tst	x0, #0x100000
   48488:	mov	w0, #0x89d                 	// #2205
   4848c:	mov	w1, #0x8ab                 	// #2219
   48490:	csel	w1, w0, w1, eq  // eq = none
   48494:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48498:	tbnz	w0, #17, 48504 <aarch64_opcode_lookup@@Base+0x1050>
   4849c:	tbnz	w0, #18, 484d4 <aarch64_opcode_lookup@@Base+0x1020>
   484a0:	tbnz	w0, #19, 484bc <aarch64_opcode_lookup@@Base+0x1008>
   484a4:	tbz	w0, #20, 4ca3c <aarch64_opcode_lookup@@Base+0x5588>
   484a8:	tst	x0, #0x40000000
   484ac:	mov	w0, #0x6c6                 	// #1734
   484b0:	mov	w1, #0x8d5                 	// #2261
   484b4:	csel	w1, w0, w1, eq  // eq = none
   484b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   484bc:	tbz	w0, #20, 4ca44 <aarch64_opcode_lookup@@Base+0x5590>
   484c0:	tst	x0, #0x40000000
   484c4:	mov	w0, #0x6c7                 	// #1735
   484c8:	mov	w1, #0x8ed                 	// #2285
   484cc:	csel	w1, w0, w1, eq  // eq = none
   484d0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   484d4:	tbnz	w0, #19, 484ec <aarch64_opcode_lookup@@Base+0x1038>
   484d8:	tst	x0, #0x40000000
   484dc:	mov	w0, #0x6c9                 	// #1737
   484e0:	mov	w1, #0x8fc                 	// #2300
   484e4:	csel	w1, w0, w1, eq  // eq = none
   484e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   484ec:	tbnz	w0, #20, 4ca4c <aarch64_opcode_lookup@@Base+0x5598>
   484f0:	tst	x0, #0x40000000
   484f4:	mov	w0, #0x8ff                 	// #2303
   484f8:	mov	w1, #0x8f4                 	// #2292
   484fc:	csel	w1, w0, w1, eq  // eq = none
   48500:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48504:	tbnz	w0, #18, 48550 <aarch64_opcode_lookup@@Base+0x109c>
   48508:	tbnz	w0, #19, 48538 <aarch64_opcode_lookup@@Base+0x1084>
   4850c:	tbnz	w0, #20, 48524 <aarch64_opcode_lookup@@Base+0x1070>
   48510:	tst	x0, #0x40000000
   48514:	mov	w0, #0x6c2                 	// #1730
   48518:	mov	w1, #0x8fd                 	// #2301
   4851c:	csel	w1, w0, w1, eq  // eq = none
   48520:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48524:	tst	x0, #0x40000000
   48528:	mov	w0, #0x6c0                 	// #1728
   4852c:	mov	w1, #0x8d6                 	// #2262
   48530:	csel	w1, w0, w1, eq  // eq = none
   48534:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48538:	tbz	w0, #20, 4ca54 <aarch64_opcode_lookup@@Base+0x55a0>
   4853c:	tst	x0, #0x40000000
   48540:	mov	w0, #0x6c1                 	// #1729
   48544:	mov	w1, #0x8f7                 	// #2295
   48548:	csel	w1, w0, w1, eq  // eq = none
   4854c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48550:	tbnz	w0, #19, 48580 <aarch64_opcode_lookup@@Base+0x10cc>
   48554:	tbnz	w0, #20, 4856c <aarch64_opcode_lookup@@Base+0x10b8>
   48558:	tst	x0, #0x40000000
   4855c:	mov	w0, #0x8f2                 	// #2290
   48560:	mov	w1, #0x8fe                 	// #2302
   48564:	csel	w1, w0, w1, eq  // eq = none
   48568:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4856c:	tst	x0, #0x40000000
   48570:	mov	w0, #0x6c3                 	// #1731
   48574:	mov	w1, #0x8d7                 	// #2263
   48578:	csel	w1, w0, w1, eq  // eq = none
   4857c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48580:	tbnz	w0, #20, 4ca5c <aarch64_opcode_lookup@@Base+0x55a8>
   48584:	tst	x0, #0x40000000
   48588:	mov	w0, #0x8a5                 	// #2213
   4858c:	mov	w1, #0x8ef                 	// #2287
   48590:	csel	w1, w0, w1, eq  // eq = none
   48594:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48598:	tbnz	w0, #10, 485c0 <aarch64_opcode_lookup@@Base+0x110c>
   4859c:	tbnz	w0, #12, 485b0 <aarch64_opcode_lookup@@Base+0x10fc>
   485a0:	tbz	w0, #30, 4ca64 <aarch64_opcode_lookup@@Base+0x55b0>
   485a4:	ubfx	x0, x0, #22, #1
   485a8:	add	w1, w0, #0x85d
   485ac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   485b0:	tbz	w0, #30, 4ca6c <aarch64_opcode_lookup@@Base+0x55b8>
   485b4:	ubfx	x0, x0, #22, #1
   485b8:	add	w1, w0, #0x8da
   485bc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   485c0:	tbnz	w0, #12, 485e8 <aarch64_opcode_lookup@@Base+0x1134>
   485c4:	tbnz	w0, #30, 485dc <aarch64_opcode_lookup@@Base+0x1128>
   485c8:	tst	x0, #0x800
   485cc:	mov	w0, #0x6c4                 	// #1732
   485d0:	mov	w1, #0x6be                 	// #1726
   485d4:	csel	w1, w0, w1, eq  // eq = none
   485d8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   485dc:	ubfx	x0, x0, #22, #1
   485e0:	add	w1, w0, #0x860
   485e4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   485e8:	tbnz	w0, #30, 48600 <aarch64_opcode_lookup@@Base+0x114c>
   485ec:	tst	x0, #0x800
   485f0:	mov	w0, #0x6c5                 	// #1733
   485f4:	mov	w1, #0x6bf                 	// #1727
   485f8:	csel	w1, w0, w1, eq  // eq = none
   485fc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48600:	ubfx	x0, x0, #22, #1
   48604:	add	w1, w0, #0x8dd
   48608:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4860c:	tbnz	w0, #22, 4864c <aarch64_opcode_lookup@@Base+0x1198>
   48610:	tbnz	w0, #21, 48620 <aarch64_opcode_lookup@@Base+0x116c>
   48614:	ubfx	x0, x0, #23, #1
   48618:	add	w1, w0, #0x82d
   4861c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48620:	tbnz	w0, #23, 48638 <aarch64_opcode_lookup@@Base+0x1184>
   48624:	tst	x0, #0x40000000
   48628:	mov	w0, #0x61c                 	// #1564
   4862c:	mov	w1, #0x620                 	// #1568
   48630:	csel	w1, w0, w1, eq  // eq = none
   48634:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48638:	tst	x0, #0x40000000
   4863c:	mov	w0, #0x629                 	// #1577
   48640:	mov	w1, #0x62c                 	// #1580
   48644:	csel	w1, w0, w1, eq  // eq = none
   48648:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4864c:	tbnz	w0, #23, 48668 <aarch64_opcode_lookup@@Base+0x11b4>
   48650:	tbz	w0, #30, 4ca74 <aarch64_opcode_lookup@@Base+0x55c0>
   48654:	tst	x0, #0x200000
   48658:	mov	w0, #0x61b                 	// #1563
   4865c:	mov	w1, #0x6e6                 	// #1766
   48660:	csel	w1, w0, w1, eq  // eq = none
   48664:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48668:	tbz	w0, #30, 4ca7c <aarch64_opcode_lookup@@Base+0x55c8>
   4866c:	ubfx	x0, x0, #21, #1
   48670:	add	w1, w0, #0x627
   48674:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48678:	tbnz	w0, #15, 48784 <aarch64_opcode_lookup@@Base+0x12d0>
   4867c:	tbnz	w0, #21, 48710 <aarch64_opcode_lookup@@Base+0x125c>
   48680:	tbnz	w0, #30, 4869c <aarch64_opcode_lookup@@Base+0x11e8>
   48684:	tbz	w0, #31, 4ca84 <aarch64_opcode_lookup@@Base+0x55d0>
   48688:	tst	x0, #0x800000
   4868c:	mov	w0, #0x5dc                 	// #1500
   48690:	mov	w1, #0x5f0                 	// #1520
   48694:	csel	w1, w0, w1, eq  // eq = none
   48698:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4869c:	tbnz	w0, #31, 486fc <aarch64_opcode_lookup@@Base+0x1248>
   486a0:	tbnz	w0, #10, 486d0 <aarch64_opcode_lookup@@Base+0x121c>
   486a4:	tbnz	w0, #11, 486bc <aarch64_opcode_lookup@@Base+0x1208>
   486a8:	tst	x0, #0x1000
   486ac:	mov	w0, #0x85f                 	// #2143
   486b0:	mov	w1, #0x865                 	// #2149
   486b4:	csel	w1, w0, w1, eq  // eq = none
   486b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   486bc:	tst	x0, #0x1000
   486c0:	mov	w0, #0x8dc                 	// #2268
   486c4:	mov	w1, #0x8e2                 	// #2274
   486c8:	csel	w1, w0, w1, eq  // eq = none
   486cc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   486d0:	tbnz	w0, #11, 486e8 <aarch64_opcode_lookup@@Base+0x1234>
   486d4:	tst	x0, #0x1000
   486d8:	mov	w0, #0x862                 	// #2146
   486dc:	mov	w1, #0x868                 	// #2152
   486e0:	csel	w1, w0, w1, eq  // eq = none
   486e4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   486e8:	tst	x0, #0x1000
   486ec:	mov	w0, #0x8df                 	// #2271
   486f0:	mov	w1, #0x8e5                 	// #2277
   486f4:	csel	w1, w0, w1, eq  // eq = none
   486f8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   486fc:	tst	x0, #0x800000
   48700:	mov	w0, #0x5e1                 	// #1505
   48704:	mov	w1, #0x5f5                 	// #1525
   48708:	csel	w1, w0, w1, eq  // eq = none
   4870c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48710:	tbnz	w0, #30, 4876c <aarch64_opcode_lookup@@Base+0x12b8>
   48714:	tbnz	w0, #31, 48758 <aarch64_opcode_lookup@@Base+0x12a4>
   48718:	tbnz	w0, #11, 48744 <aarch64_opcode_lookup@@Base+0x1290>
   4871c:	tbnz	w0, #12, 4872c <aarch64_opcode_lookup@@Base+0x1278>
   48720:	ubfx	x0, x0, #10, #1
   48724:	add	w1, w0, #0x5d3
   48728:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4872c:	tbnz	w0, #22, 4ca8c <aarch64_opcode_lookup@@Base+0x55d8>
   48730:	tst	x0, #0x800000
   48734:	mov	w0, #0x4fe                 	// #1278
   48738:	mov	w1, #0x708                 	// #1800
   4873c:	csel	w1, w0, w1, eq  // eq = none
   48740:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48744:	tst	x0, #0x400
   48748:	mov	w0, #0x5d5                 	// #1493
   4874c:	mov	w1, #0x5d2                 	// #1490
   48750:	csel	w1, w0, w1, eq  // eq = none
   48754:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48758:	tst	x0, #0x800000
   4875c:	mov	w0, #0x6f8                 	// #1784
   48760:	mov	w1, #0x5f1                 	// #1521
   48764:	csel	w1, w0, w1, eq  // eq = none
   48768:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4876c:	tbz	w0, #23, 4ca94 <aarch64_opcode_lookup@@Base+0x55e0>
   48770:	tbnz	w0, #31, 4ca9c <aarch64_opcode_lookup@@Base+0x55e8>
   48774:	tst	x0, #0x400000
   48778:	cset	w0, eq  // eq = none
   4877c:	add	w1, w0, #0x809
   48780:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48784:	tbnz	w0, #30, 4887c <aarch64_opcode_lookup@@Base+0x13c8>
   48788:	tbnz	w0, #31, 48838 <aarch64_opcode_lookup@@Base+0x1384>
   4878c:	mov	w1, #0x6ca                 	// #1738
   48790:	tbz	w0, #21, 474cc <aarch64_opcode_lookup@@Base+0x18>
   48794:	tbnz	w0, #10, 487e8 <aarch64_opcode_lookup@@Base+0x1334>
   48798:	tbnz	w0, #11, 487d0 <aarch64_opcode_lookup@@Base+0x131c>
   4879c:	tbnz	w0, #20, 487b8 <aarch64_opcode_lookup@@Base+0x1304>
   487a0:	tbz	w0, #22, 4caa4 <aarch64_opcode_lookup@@Base+0x55f0>
   487a4:	tst	x0, #0x800000
   487a8:	mov	w0, #0x73c                 	// #1852
   487ac:	mov	w1, #0x739                 	// #1849
   487b0:	csel	w1, w0, w1, eq  // eq = none
   487b4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   487b8:	tbz	w0, #22, 4caac <aarch64_opcode_lookup@@Base+0x55f8>
   487bc:	tst	x0, #0x800000
   487c0:	mov	w0, #0x5cc                 	// #1484
   487c4:	mov	w1, #0x5ca                 	// #1482
   487c8:	csel	w1, w0, w1, eq  // eq = none
   487cc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   487d0:	tbz	w0, #22, 4cab4 <aarch64_opcode_lookup@@Base+0x5600>
   487d4:	tst	x0, #0x800000
   487d8:	mov	w0, #0x72e                 	// #1838
   487dc:	mov	w1, #0x72b                 	// #1835
   487e0:	csel	w1, w0, w1, eq  // eq = none
   487e4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   487e8:	tbnz	w0, #11, 48820 <aarch64_opcode_lookup@@Base+0x136c>
   487ec:	tbnz	w0, #20, 48808 <aarch64_opcode_lookup@@Base+0x1354>
   487f0:	tbz	w0, #22, 4cabc <aarch64_opcode_lookup@@Base+0x5608>
   487f4:	tst	x0, #0x800000
   487f8:	mov	w0, #0x7d0                 	// #2000
   487fc:	mov	w1, #0x7cd                 	// #1997
   48800:	csel	w1, w0, w1, eq  // eq = none
   48804:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48808:	tbz	w0, #22, 4cac4 <aarch64_opcode_lookup@@Base+0x5610>
   4880c:	tst	x0, #0x800000
   48810:	mov	w0, #0x54f                 	// #1359
   48814:	mov	w1, #0x54d                 	// #1357
   48818:	csel	w1, w0, w1, eq  // eq = none
   4881c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48820:	tbz	w0, #22, 4cacc <aarch64_opcode_lookup@@Base+0x5618>
   48824:	tst	x0, #0x800000
   48828:	mov	w0, #0x7c2                 	// #1986
   4882c:	mov	w1, #0x7bf                 	// #1983
   48830:	csel	w1, w0, w1, eq  // eq = none
   48834:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48838:	tbnz	w0, #22, 48868 <aarch64_opcode_lookup@@Base+0x13b4>
   4883c:	tbnz	w0, #21, 48854 <aarch64_opcode_lookup@@Base+0x13a0>
   48840:	tst	x0, #0x800000
   48844:	mov	w0, #0x6e3                 	// #1763
   48848:	mov	w1, #0x6f2                 	// #1778
   4884c:	csel	w1, w0, w1, eq  // eq = none
   48850:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48854:	tst	x0, #0x800000
   48858:	mov	w0, #0x5e3                 	// #1507
   4885c:	mov	w1, #0x5f9                 	// #1529
   48860:	csel	w1, w0, w1, eq  // eq = none
   48864:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48868:	tst	x0, #0x800000
   4886c:	mov	w0, #0x600                 	// #1536
   48870:	mov	w1, #0x604                 	// #1540
   48874:	csel	w1, w0, w1, eq  // eq = none
   48878:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4887c:	tbnz	w0, #21, 488ac <aarch64_opcode_lookup@@Base+0x13f8>
   48880:	tbnz	w0, #22, 48898 <aarch64_opcode_lookup@@Base+0x13e4>
   48884:	tst	x0, #0x800000
   48888:	mov	w0, #0x829                 	// #2089
   4888c:	mov	w1, #0x82c                 	// #2092
   48890:	csel	w1, w0, w1, eq  // eq = none
   48894:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48898:	tst	x0, #0x800000
   4889c:	mov	w0, #0x5e2                 	// #1506
   488a0:	mov	w1, #0x5f7                 	// #1527
   488a4:	csel	w1, w0, w1, eq  // eq = none
   488a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   488ac:	tbnz	w0, #22, 488e4 <aarch64_opcode_lookup@@Base+0x1430>
   488b0:	tbz	w0, #23, 4cad4 <aarch64_opcode_lookup@@Base+0x5620>
   488b4:	tbnz	w0, #31, 4cadc <aarch64_opcode_lookup@@Base+0x5628>
   488b8:	tbnz	w0, #10, 488d0 <aarch64_opcode_lookup@@Base+0x141c>
   488bc:	tst	x0, #0x1000
   488c0:	mov	w0, #0x86a                 	// #2154
   488c4:	mov	w1, #0x8e7                 	// #2279
   488c8:	csel	w1, w0, w1, eq  // eq = none
   488cc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   488d0:	tst	x0, #0x1000
   488d4:	mov	w0, #0x86d                 	// #2157
   488d8:	mov	w1, #0x8ea                 	// #2282
   488dc:	csel	w1, w0, w1, eq  // eq = none
   488e0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   488e4:	tbz	w0, #23, 4cae4 <aarch64_opcode_lookup@@Base+0x5630>
   488e8:	tbnz	w0, #31, 4caec <aarch64_opcode_lookup@@Base+0x5638>
   488ec:	tbnz	w0, #10, 48904 <aarch64_opcode_lookup@@Base+0x1450>
   488f0:	tst	x0, #0x1000
   488f4:	mov	w0, #0x86b                 	// #2155
   488f8:	mov	w1, #0x8e8                 	// #2280
   488fc:	csel	w1, w0, w1, eq  // eq = none
   48900:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48904:	tst	x0, #0x1000
   48908:	mov	w0, #0x86e                 	// #2158
   4890c:	mov	w1, #0x8eb                 	// #2283
   48910:	csel	w1, w0, w1, eq  // eq = none
   48914:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48918:	tbnz	w0, #14, 48cbc <aarch64_opcode_lookup@@Base+0x1808>
   4891c:	tbnz	w0, #15, 48aa8 <aarch64_opcode_lookup@@Base+0x15f4>
   48920:	tbnz	w0, #21, 489d0 <aarch64_opcode_lookup@@Base+0x151c>
   48924:	tbnz	w0, #30, 489a4 <aarch64_opcode_lookup@@Base+0x14f0>
   48928:	tbnz	w0, #31, 48990 <aarch64_opcode_lookup@@Base+0x14dc>
   4892c:	tbnz	w0, #17, 48978 <aarch64_opcode_lookup@@Base+0x14c4>
   48930:	tbnz	w0, #19, 4894c <aarch64_opcode_lookup@@Base+0x1498>
   48934:	tbnz	w0, #20, 4caf4 <aarch64_opcode_lookup@@Base+0x5640>
   48938:	tst	x0, #0x10000
   4893c:	mov	w0, #0x70f                 	// #1807
   48940:	mov	w1, #0x7a7                 	// #1959
   48944:	csel	w1, w0, w1, eq  // eq = none
   48948:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4894c:	tbnz	w0, #16, 48964 <aarch64_opcode_lookup@@Base+0x14b0>
   48950:	tst	x0, #0x100000
   48954:	mov	w0, #0x721                 	// #1825
   48958:	mov	w1, #0x6df                 	// #1759
   4895c:	csel	w1, w0, w1, eq  // eq = none
   48960:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48964:	tst	x0, #0x100000
   48968:	mov	w0, #0x7b6                 	// #1974
   4896c:	mov	w1, #0x55e                 	// #1374
   48970:	csel	w1, w0, w1, eq  // eq = none
   48974:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48978:	tbnz	w0, #16, 4cafc <aarch64_opcode_lookup@@Base+0x5648>
   4897c:	tst	x0, #0x100000
   48980:	mov	w0, #0x724                 	// #1828
   48984:	mov	w1, #0x507                 	// #1287
   48988:	csel	w1, w0, w1, eq  // eq = none
   4898c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48990:	tst	x0, #0x800000
   48994:	mov	w0, #0x67a                 	// #1658
   48998:	mov	w1, #0x685                 	// #1669
   4899c:	csel	w1, w0, w1, eq  // eq = none
   489a0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   489a4:	tbnz	w0, #31, 489bc <aarch64_opcode_lookup@@Base+0x1508>
   489a8:	tst	x0, #0x1000
   489ac:	mov	w0, #0x80b                 	// #2059
   489b0:	mov	w1, #0x88f                 	// #2191
   489b4:	csel	w1, w0, w1, eq  // eq = none
   489b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   489bc:	tst	x0, #0x800000
   489c0:	mov	w0, #0x681                 	// #1665
   489c4:	mov	w1, #0x68b                 	// #1675
   489c8:	csel	w1, w0, w1, eq  // eq = none
   489cc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   489d0:	tbnz	w0, #30, 48a64 <aarch64_opcode_lookup@@Base+0x15b0>
   489d4:	tbnz	w0, #31, 48a50 <aarch64_opcode_lookup@@Base+0x159c>
   489d8:	tbnz	w0, #10, 48a20 <aarch64_opcode_lookup@@Base+0x156c>
   489dc:	tbnz	w0, #11, 48a0c <aarch64_opcode_lookup@@Base+0x1558>
   489e0:	tbnz	w0, #22, 489f8 <aarch64_opcode_lookup@@Base+0x1544>
   489e4:	tst	x0, #0x800000
   489e8:	mov	w0, #0x502                 	// #1282
   489ec:	mov	w1, #0x559                 	// #1369
   489f0:	csel	w1, w0, w1, eq  // eq = none
   489f4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   489f8:	tst	x0, #0x800000
   489fc:	mov	w0, #0x6da                 	// #1754
   48a00:	mov	w1, #0x50f                 	// #1295
   48a04:	csel	w1, w0, w1, eq  // eq = none
   48a08:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48a0c:	tst	x0, #0x400000
   48a10:	mov	w0, #0x80e                 	// #2062
   48a14:	mov	w1, #0x803                 	// #2051
   48a18:	csel	w1, w0, w1, eq  // eq = none
   48a1c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48a20:	tbz	w0, #11, 4cb04 <aarch64_opcode_lookup@@Base+0x5650>
   48a24:	tbnz	w0, #22, 48a3c <aarch64_opcode_lookup@@Base+0x1588>
   48a28:	tst	x0, #0x800000
   48a2c:	mov	w0, #0x804                 	// #2052
   48a30:	mov	w1, #0x806                 	// #2054
   48a34:	csel	w1, w0, w1, eq  // eq = none
   48a38:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48a3c:	tst	x0, #0x800000
   48a40:	mov	w0, #0x805                 	// #2053
   48a44:	mov	w1, #0x83d                 	// #2109
   48a48:	csel	w1, w0, w1, eq  // eq = none
   48a4c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48a50:	tst	x0, #0x800000
   48a54:	mov	w0, #0x6f1                 	// #1777
   48a58:	mov	w1, #0x686                 	// #1670
   48a5c:	csel	w1, w0, w1, eq  // eq = none
   48a60:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48a64:	tbz	w0, #23, 4cb0c <aarch64_opcode_lookup@@Base+0x5658>
   48a68:	tbnz	w0, #31, 4cb14 <aarch64_opcode_lookup@@Base+0x5660>
   48a6c:	tbnz	w0, #10, 48a8c <aarch64_opcode_lookup@@Base+0x15d8>
   48a70:	tbnz	w0, #12, 48a80 <aarch64_opcode_lookup@@Base+0x15cc>
   48a74:	ubfx	x0, x0, #22, #1
   48a78:	add	w1, w0, #0x874
   48a7c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48a80:	ubfx	x0, x0, #22, #1
   48a84:	add	w1, w0, #0x87b
   48a88:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48a8c:	tbnz	w0, #12, 48a9c <aarch64_opcode_lookup@@Base+0x15e8>
   48a90:	ubfx	x0, x0, #22, #1
   48a94:	add	w1, w0, #0x878
   48a98:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48a9c:	ubfx	x0, x0, #22, #1
   48aa0:	add	w1, w0, #0x87f
   48aa4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48aa8:	tbnz	w0, #30, 48bcc <aarch64_opcode_lookup@@Base+0x1718>
   48aac:	tbnz	w0, #31, 48b88 <aarch64_opcode_lookup@@Base+0x16d4>
   48ab0:	tbnz	w0, #21, 48b5c <aarch64_opcode_lookup@@Base+0x16a8>
   48ab4:	tbnz	w0, #16, 48b14 <aarch64_opcode_lookup@@Base+0x1660>
   48ab8:	tbnz	w0, #17, 48ae8 <aarch64_opcode_lookup@@Base+0x1634>
   48abc:	tbnz	w0, #18, 48ad4 <aarch64_opcode_lookup@@Base+0x1620>
   48ac0:	tst	x0, #0x80000
   48ac4:	mov	w0, #0x79e                 	// #1950
   48ac8:	mov	w1, #0x523                 	// #1315
   48acc:	csel	w1, w0, w1, eq  // eq = none
   48ad0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48ad4:	tst	x0, #0x80000
   48ad8:	mov	w0, #0x7a0                 	// #1952
   48adc:	mov	w1, #0x561                 	// #1377
   48ae0:	csel	w1, w0, w1, eq  // eq = none
   48ae4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48ae8:	tbnz	w0, #18, 48b00 <aarch64_opcode_lookup@@Base+0x164c>
   48aec:	tst	x0, #0x80000
   48af0:	mov	w0, #0x79f                 	// #1951
   48af4:	mov	w1, #0x540                 	// #1344
   48af8:	csel	w1, w0, w1, eq  // eq = none
   48afc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48b00:	tst	x0, #0x80000
   48b04:	mov	w0, #0x4f9                 	// #1273
   48b08:	mov	w1, #0x6d7                 	// #1751
   48b0c:	csel	w1, w0, w1, eq  // eq = none
   48b10:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48b14:	tbnz	w0, #17, 48b44 <aarch64_opcode_lookup@@Base+0x1690>
   48b18:	tbnz	w0, #18, 48b30 <aarch64_opcode_lookup@@Base+0x167c>
   48b1c:	tst	x0, #0x80000
   48b20:	mov	w0, #0x7dd                 	// #2013
   48b24:	mov	w1, #0x524                 	// #1316
   48b28:	csel	w1, w0, w1, eq  // eq = none
   48b2c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48b30:	tst	x0, #0x80000
   48b34:	mov	w0, #0x7df                 	// #2015
   48b38:	mov	w1, #0x5ae                 	// #1454
   48b3c:	csel	w1, w0, w1, eq  // eq = none
   48b40:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48b44:	tbnz	w0, #18, 4cb1c <aarch64_opcode_lookup@@Base+0x5668>
   48b48:	tst	x0, #0x80000
   48b4c:	mov	w0, #0x7de                 	// #2014
   48b50:	mov	w1, #0x53f                 	// #1343
   48b54:	csel	w1, w0, w1, eq  // eq = none
   48b58:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48b5c:	tbnz	w0, #12, 48b70 <aarch64_opcode_lookup@@Base+0x16bc>
   48b60:	tbnz	w0, #23, 4cb24 <aarch64_opcode_lookup@@Base+0x5670>
   48b64:	ubfx	x0, x0, #22, #1
   48b68:	add	w1, w0, #0x4ff
   48b6c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48b70:	tbnz	w0, #10, 4cb2c <aarch64_opcode_lookup@@Base+0x5678>
   48b74:	tst	x0, #0x800
   48b78:	mov	w0, #0x5c8                 	// #1480
   48b7c:	mov	w1, #0x590                 	// #1424
   48b80:	csel	w1, w0, w1, eq  // eq = none
   48b84:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48b88:	tbnz	w0, #22, 48bb8 <aarch64_opcode_lookup@@Base+0x1704>
   48b8c:	tbnz	w0, #21, 48ba4 <aarch64_opcode_lookup@@Base+0x16f0>
   48b90:	tst	x0, #0x800000
   48b94:	mov	w0, #0x828                 	// #2088
   48b98:	mov	w1, #0x82b                 	// #2091
   48b9c:	csel	w1, w0, w1, eq  // eq = none
   48ba0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48ba4:	tst	x0, #0x800000
   48ba8:	mov	w0, #0x683                 	// #1667
   48bac:	mov	w1, #0x68f                 	// #1679
   48bb0:	csel	w1, w0, w1, eq  // eq = none
   48bb4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48bb8:	tst	x0, #0x800000
   48bbc:	mov	w0, #0x5ff                 	// #1535
   48bc0:	mov	w1, #0x603                 	// #1539
   48bc4:	csel	w1, w0, w1, eq  // eq = none
   48bc8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48bcc:	tbnz	w0, #21, 48c50 <aarch64_opcode_lookup@@Base+0x179c>
   48bd0:	tbnz	w0, #31, 48c3c <aarch64_opcode_lookup@@Base+0x1788>
   48bd4:	tbnz	w0, #16, 48c08 <aarch64_opcode_lookup@@Base+0x1754>
   48bd8:	tbnz	w0, #17, 4cb34 <aarch64_opcode_lookup@@Base+0x5680>
   48bdc:	tbnz	w0, #18, 48bf4 <aarch64_opcode_lookup@@Base+0x1740>
   48be0:	tst	x0, #0x80000
   48be4:	mov	w0, #0x8fb                 	// #2299
   48be8:	mov	w1, #0x871                 	// #2161
   48bec:	csel	w1, w0, w1, eq  // eq = none
   48bf0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48bf4:	tst	x0, #0x100000
   48bf8:	mov	w0, #0x84d                 	// #2125
   48bfc:	mov	w1, #0x85b                 	// #2139
   48c00:	csel	w1, w0, w1, eq  // eq = none
   48c04:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48c08:	tbnz	w0, #17, 4cb3c <aarch64_opcode_lookup@@Base+0x5688>
   48c0c:	tbnz	w0, #18, 48c28 <aarch64_opcode_lookup@@Base+0x1774>
   48c10:	tbnz	w0, #19, 4cb44 <aarch64_opcode_lookup@@Base+0x5690>
   48c14:	tst	x0, #0x100000
   48c18:	mov	w0, #0x900                 	// #2304
   48c1c:	mov	w1, #0x802                 	// #2050
   48c20:	csel	w1, w0, w1, eq  // eq = none
   48c24:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48c28:	tst	x0, #0x100000
   48c2c:	mov	w0, #0x8d0                 	// #2256
   48c30:	mov	w1, #0x8d8                 	// #2264
   48c34:	csel	w1, w0, w1, eq  // eq = none
   48c38:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48c3c:	tst	x0, #0x800000
   48c40:	mov	w0, #0x682                 	// #1666
   48c44:	mov	w1, #0x68d                 	// #1677
   48c48:	csel	w1, w0, w1, eq  // eq = none
   48c4c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48c50:	tbnz	w0, #22, 48c88 <aarch64_opcode_lookup@@Base+0x17d4>
   48c54:	tbz	w0, #23, 4cb4c <aarch64_opcode_lookup@@Base+0x5698>
   48c58:	tbnz	w0, #31, 4cb54 <aarch64_opcode_lookup@@Base+0x56a0>
   48c5c:	tbnz	w0, #10, 48c74 <aarch64_opcode_lookup@@Base+0x17c0>
   48c60:	tst	x0, #0x1000
   48c64:	mov	w0, #0x863                 	// #2147
   48c68:	mov	w1, #0x8e0                 	// #2272
   48c6c:	csel	w1, w0, w1, eq  // eq = none
   48c70:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48c74:	tst	x0, #0x1000
   48c78:	mov	w0, #0x866                 	// #2150
   48c7c:	mov	w1, #0x8e3                 	// #2275
   48c80:	csel	w1, w0, w1, eq  // eq = none
   48c84:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48c88:	tbz	w0, #23, 4cb5c <aarch64_opcode_lookup@@Base+0x56a8>
   48c8c:	tbnz	w0, #31, 4cb64 <aarch64_opcode_lookup@@Base+0x56b0>
   48c90:	tbnz	w0, #10, 48ca8 <aarch64_opcode_lookup@@Base+0x17f4>
   48c94:	tst	x0, #0x1000
   48c98:	mov	w0, #0x864                 	// #2148
   48c9c:	mov	w1, #0x8e1                 	// #2273
   48ca0:	csel	w1, w0, w1, eq  // eq = none
   48ca4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48ca8:	tst	x0, #0x1000
   48cac:	mov	w0, #0x867                 	// #2151
   48cb0:	mov	w1, #0x8e4                 	// #2276
   48cb4:	csel	w1, w0, w1, eq  // eq = none
   48cb8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48cbc:	tbnz	w0, #15, 48db4 <aarch64_opcode_lookup@@Base+0x1900>
   48cc0:	tbnz	w0, #21, 48d40 <aarch64_opcode_lookup@@Base+0x188c>
   48cc4:	tbnz	w0, #30, 48ce0 <aarch64_opcode_lookup@@Base+0x182c>
   48cc8:	tbz	w0, #31, 4cb6c <aarch64_opcode_lookup@@Base+0x56b8>
   48ccc:	tst	x0, #0x800000
   48cd0:	mov	w0, #0x658                 	// #1624
   48cd4:	mov	w1, #0x66c                 	// #1644
   48cd8:	csel	w1, w0, w1, eq  // eq = none
   48cdc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48ce0:	tbnz	w0, #31, 48d2c <aarch64_opcode_lookup@@Base+0x1878>
   48ce4:	tbnz	w0, #10, 48d14 <aarch64_opcode_lookup@@Base+0x1860>
   48ce8:	tbnz	w0, #11, 48d00 <aarch64_opcode_lookup@@Base+0x184c>
   48cec:	tst	x0, #0x1000
   48cf0:	mov	w0, #0x876                 	// #2166
   48cf4:	mov	w1, #0x893                 	// #2195
   48cf8:	csel	w1, w0, w1, eq  // eq = none
   48cfc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48d00:	tst	x0, #0x1000
   48d04:	mov	w0, #0x87d                 	// #2173
   48d08:	mov	w1, #0x95a                 	// #2394
   48d0c:	csel	w1, w0, w1, eq  // eq = none
   48d10:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48d14:	tbnz	w0, #11, 4cb74 <aarch64_opcode_lookup@@Base+0x56c0>
   48d18:	tst	x0, #0x1000
   48d1c:	mov	w0, #0x87a                 	// #2170
   48d20:	mov	w1, #0x897                 	// #2199
   48d24:	csel	w1, w0, w1, eq  // eq = none
   48d28:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48d2c:	tst	x0, #0x800000
   48d30:	mov	w0, #0x661                 	// #1633
   48d34:	mov	w1, #0x674                 	// #1652
   48d38:	csel	w1, w0, w1, eq  // eq = none
   48d3c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48d40:	tbnz	w0, #30, 48d90 <aarch64_opcode_lookup@@Base+0x18dc>
   48d44:	tbnz	w0, #31, 48d7c <aarch64_opcode_lookup@@Base+0x18c8>
   48d48:	tbnz	w0, #10, 48d64 <aarch64_opcode_lookup@@Base+0x18b0>
   48d4c:	tbnz	w0, #11, 4cb7c <aarch64_opcode_lookup@@Base+0x56c8>
   48d50:	tst	x0, #0x1000
   48d54:	mov	w0, #0x83c                 	// #2108
   48d58:	mov	w1, #0x885                 	// #2181
   48d5c:	csel	w1, w0, w1, eq  // eq = none
   48d60:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48d64:	tbnz	w0, #11, 4cb84 <aarch64_opcode_lookup@@Base+0x56d0>
   48d68:	tst	x0, #0x1000
   48d6c:	mov	w0, #0x83f                 	// #2111
   48d70:	mov	w1, #0x89b                 	// #2203
   48d74:	csel	w1, w0, w1, eq  // eq = none
   48d78:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48d7c:	tst	x0, #0x800000
   48d80:	mov	w0, #0x6ea                 	// #1770
   48d84:	mov	w1, #0x66d                 	// #1645
   48d88:	csel	w1, w0, w1, eq  // eq = none
   48d8c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48d90:	tbz	w0, #23, 4cb8c <aarch64_opcode_lookup@@Base+0x56d8>
   48d94:	tbnz	w0, #31, 4cb94 <aarch64_opcode_lookup@@Base+0x56e0>
   48d98:	tbnz	w0, #12, 48da8 <aarch64_opcode_lookup@@Base+0x18f4>
   48d9c:	ubfx	x0, x0, #22, #1
   48da0:	add	w1, w0, #0x80c
   48da4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48da8:	ubfx	x0, x0, #22, #1
   48dac:	add	w1, w0, #0x88d
   48db0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48db4:	tbnz	w0, #30, 49010 <aarch64_opcode_lookup@@Base+0x1b5c>
   48db8:	tbnz	w0, #31, 48fcc <aarch64_opcode_lookup@@Base+0x1b18>
   48dbc:	mov	w1, #0x6cf                 	// #1743
   48dc0:	tbz	w0, #21, 474cc <aarch64_opcode_lookup@@Base+0x18>
   48dc4:	tbnz	w0, #10, 48ee0 <aarch64_opcode_lookup@@Base+0x1a2c>
   48dc8:	tbnz	w0, #11, 48e84 <aarch64_opcode_lookup@@Base+0x19d0>
   48dcc:	tbnz	w0, #12, 48e28 <aarch64_opcode_lookup@@Base+0x1974>
   48dd0:	tbnz	w0, #20, 48dfc <aarch64_opcode_lookup@@Base+0x1948>
   48dd4:	tbnz	w0, #22, 48dec <aarch64_opcode_lookup@@Base+0x1938>
   48dd8:	tst	x0, #0x800000
   48ddc:	mov	w0, #0x541                 	// #1345
   48de0:	mov	w1, #0x545                 	// #1349
   48de4:	csel	w1, w0, w1, eq  // eq = none
   48de8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48dec:	tst	x0, #0x800000
   48df0:	cset	w0, eq  // eq = none
   48df4:	add	w1, w0, #0x542
   48df8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48dfc:	tbnz	w0, #22, 48e14 <aarch64_opcode_lookup@@Base+0x1960>
   48e00:	tst	x0, #0x800000
   48e04:	mov	w0, #0x5c9                 	// #1481
   48e08:	mov	w1, #0x5d1                 	// #1489
   48e0c:	csel	w1, w0, w1, eq  // eq = none
   48e10:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48e14:	tst	x0, #0x800000
   48e18:	mov	w0, #0x5cd                 	// #1485
   48e1c:	mov	w1, #0x5cb                 	// #1483
   48e20:	csel	w1, w0, w1, eq  // eq = none
   48e24:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48e28:	tbnz	w0, #20, 48e58 <aarch64_opcode_lookup@@Base+0x19a4>
   48e2c:	tbnz	w0, #22, 48e44 <aarch64_opcode_lookup@@Base+0x1990>
   48e30:	tst	x0, #0x800000
   48e34:	mov	w0, #0x738                 	// #1848
   48e38:	mov	w1, #0x744                 	// #1860
   48e3c:	csel	w1, w0, w1, eq  // eq = none
   48e40:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48e44:	tst	x0, #0x800000
   48e48:	mov	w0, #0x73e                 	// #1854
   48e4c:	mov	w1, #0x73b                 	// #1851
   48e50:	csel	w1, w0, w1, eq  // eq = none
   48e54:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48e58:	tbnz	w0, #22, 48e70 <aarch64_opcode_lookup@@Base+0x19bc>
   48e5c:	tst	x0, #0x800000
   48e60:	mov	w0, #0x737                 	// #1847
   48e64:	mov	w1, #0x743                 	// #1859
   48e68:	csel	w1, w0, w1, eq  // eq = none
   48e6c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48e70:	tst	x0, #0x800000
   48e74:	mov	w0, #0x73d                 	// #1853
   48e78:	mov	w1, #0x73a                 	// #1850
   48e7c:	csel	w1, w0, w1, eq  // eq = none
   48e80:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48e84:	tbnz	w0, #20, 48eb4 <aarch64_opcode_lookup@@Base+0x1a00>
   48e88:	tbnz	w0, #22, 48ea0 <aarch64_opcode_lookup@@Base+0x19ec>
   48e8c:	tst	x0, #0x800000
   48e90:	mov	w0, #0x72a                 	// #1834
   48e94:	mov	w1, #0x736                 	// #1846
   48e98:	csel	w1, w0, w1, eq  // eq = none
   48e9c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48ea0:	tst	x0, #0x800000
   48ea4:	mov	w0, #0x730                 	// #1840
   48ea8:	mov	w1, #0x72d                 	// #1837
   48eac:	csel	w1, w0, w1, eq  // eq = none
   48eb0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48eb4:	tbnz	w0, #22, 48ecc <aarch64_opcode_lookup@@Base+0x1a18>
   48eb8:	tst	x0, #0x800000
   48ebc:	mov	w0, #0x729                 	// #1833
   48ec0:	mov	w1, #0x735                 	// #1845
   48ec4:	csel	w1, w0, w1, eq  // eq = none
   48ec8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48ecc:	tst	x0, #0x800000
   48ed0:	mov	w0, #0x72f                 	// #1839
   48ed4:	mov	w1, #0x72c                 	// #1836
   48ed8:	csel	w1, w0, w1, eq  // eq = none
   48edc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48ee0:	tbnz	w0, #11, 48f70 <aarch64_opcode_lookup@@Base+0x1abc>
   48ee4:	tbnz	w0, #12, 48f14 <aarch64_opcode_lookup@@Base+0x1a60>
   48ee8:	tbnz	w0, #22, 48f00 <aarch64_opcode_lookup@@Base+0x1a4c>
   48eec:	tst	x0, #0x800000
   48ef0:	mov	w0, #0x54c                 	// #1356
   48ef4:	mov	w1, #0x554                 	// #1364
   48ef8:	csel	w1, w0, w1, eq  // eq = none
   48efc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48f00:	tst	x0, #0x800000
   48f04:	mov	w0, #0x550                 	// #1360
   48f08:	mov	w1, #0x54e                 	// #1358
   48f0c:	csel	w1, w0, w1, eq  // eq = none
   48f10:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48f14:	tbnz	w0, #20, 48f44 <aarch64_opcode_lookup@@Base+0x1a90>
   48f18:	tbnz	w0, #22, 48f30 <aarch64_opcode_lookup@@Base+0x1a7c>
   48f1c:	tst	x0, #0x800000
   48f20:	mov	w0, #0x7cb                 	// #1995
   48f24:	mov	w1, #0x7d7                 	// #2007
   48f28:	csel	w1, w0, w1, eq  // eq = none
   48f2c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48f30:	tst	x0, #0x800000
   48f34:	mov	w0, #0x7d1                 	// #2001
   48f38:	mov	w1, #0x7ce                 	// #1998
   48f3c:	csel	w1, w0, w1, eq  // eq = none
   48f40:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48f44:	tbnz	w0, #22, 48f5c <aarch64_opcode_lookup@@Base+0x1aa8>
   48f48:	tst	x0, #0x800000
   48f4c:	mov	w0, #0x7cc                 	// #1996
   48f50:	mov	w1, #0x7d8                 	// #2008
   48f54:	csel	w1, w0, w1, eq  // eq = none
   48f58:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48f5c:	tst	x0, #0x800000
   48f60:	mov	w0, #0x7d2                 	// #2002
   48f64:	mov	w1, #0x7cf                 	// #1999
   48f68:	csel	w1, w0, w1, eq  // eq = none
   48f6c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48f70:	tbnz	w0, #20, 48fa0 <aarch64_opcode_lookup@@Base+0x1aec>
   48f74:	tbnz	w0, #22, 48f8c <aarch64_opcode_lookup@@Base+0x1ad8>
   48f78:	tst	x0, #0x800000
   48f7c:	mov	w0, #0x7bd                 	// #1981
   48f80:	mov	w1, #0x7c9                 	// #1993
   48f84:	csel	w1, w0, w1, eq  // eq = none
   48f88:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48f8c:	tst	x0, #0x800000
   48f90:	mov	w0, #0x7c3                 	// #1987
   48f94:	mov	w1, #0x7c0                 	// #1984
   48f98:	csel	w1, w0, w1, eq  // eq = none
   48f9c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48fa0:	tbnz	w0, #22, 48fb8 <aarch64_opcode_lookup@@Base+0x1b04>
   48fa4:	tst	x0, #0x800000
   48fa8:	mov	w0, #0x7be                 	// #1982
   48fac:	mov	w1, #0x7ca                 	// #1994
   48fb0:	csel	w1, w0, w1, eq  // eq = none
   48fb4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48fb8:	tst	x0, #0x800000
   48fbc:	mov	w0, #0x7c4                 	// #1988
   48fc0:	mov	w1, #0x7c1                 	// #1985
   48fc4:	csel	w1, w0, w1, eq  // eq = none
   48fc8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48fcc:	tbnz	w0, #22, 48ffc <aarch64_opcode_lookup@@Base+0x1b48>
   48fd0:	tbnz	w0, #21, 48fe8 <aarch64_opcode_lookup@@Base+0x1b34>
   48fd4:	tst	x0, #0x800000
   48fd8:	mov	w0, #0x6e7                 	// #1767
   48fdc:	mov	w1, #0x6f5                 	// #1781
   48fe0:	csel	w1, w0, w1, eq  // eq = none
   48fe4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48fe8:	tst	x0, #0x800000
   48fec:	mov	w0, #0x663                 	// #1635
   48ff0:	mov	w1, #0x678                 	// #1656
   48ff4:	csel	w1, w0, w1, eq  // eq = none
   48ff8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   48ffc:	tst	x0, #0x800000
   49000:	mov	w0, #0x601                 	// #1537
   49004:	mov	w1, #0x605                 	// #1541
   49008:	csel	w1, w0, w1, eq  // eq = none
   4900c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49010:	tbnz	w0, #21, 49040 <aarch64_opcode_lookup@@Base+0x1b8c>
   49014:	tbnz	w0, #22, 4902c <aarch64_opcode_lookup@@Base+0x1b78>
   49018:	tst	x0, #0x800000
   4901c:	mov	w0, #0x6e9                 	// #1769
   49020:	mov	w1, #0x6f7                 	// #1783
   49024:	csel	w1, w0, w1, eq  // eq = none
   49028:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4902c:	tst	x0, #0x800000
   49030:	mov	w0, #0x662                 	// #1634
   49034:	mov	w1, #0x676                 	// #1654
   49038:	csel	w1, w0, w1, eq  // eq = none
   4903c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49040:	tbnz	w0, #23, 49074 <aarch64_opcode_lookup@@Base+0x1bc0>
   49044:	tbnz	w0, #31, 49060 <aarch64_opcode_lookup@@Base+0x1bac>
   49048:	tbnz	w0, #10, 4cb9c <aarch64_opcode_lookup@@Base+0x56e8>
   4904c:	tst	x0, #0x800
   49050:	mov	w0, #0x882                 	// #2178
   49054:	mov	w1, #0x839                 	// #2105
   49058:	csel	w1, w0, w1, eq  // eq = none
   4905c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49060:	tst	x0, #0x400000
   49064:	mov	w0, #0x664                 	// #1636
   49068:	mov	w1, #0x6ed                 	// #1773
   4906c:	csel	w1, w0, w1, eq  // eq = none
   49070:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49074:	tbnz	w0, #22, 490ac <aarch64_opcode_lookup@@Base+0x1bf8>
   49078:	tbnz	w0, #31, 4cba4 <aarch64_opcode_lookup@@Base+0x56f0>
   4907c:	tbnz	w0, #10, 49098 <aarch64_opcode_lookup@@Base+0x1be4>
   49080:	tbz	w0, #12, 4cbac <aarch64_opcode_lookup@@Base+0x56f8>
   49084:	tst	x0, #0x800
   49088:	mov	w0, #0x883                 	// #2179
   4908c:	mov	w1, #0x83a                 	// #2106
   49090:	csel	w1, w0, w1, eq  // eq = none
   49094:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49098:	tst	x0, #0x1000
   4909c:	mov	w0, #0x889                 	// #2185
   490a0:	mov	w1, #0x899                 	// #2201
   490a4:	csel	w1, w0, w1, eq  // eq = none
   490a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   490ac:	tbnz	w0, #31, 4cbb4 <aarch64_opcode_lookup@@Base+0x5700>
   490b0:	tbnz	w0, #10, 490cc <aarch64_opcode_lookup@@Base+0x1c18>
   490b4:	tbz	w0, #12, 4cbbc <aarch64_opcode_lookup@@Base+0x5708>
   490b8:	tst	x0, #0x800
   490bc:	mov	w0, #0x884                 	// #2180
   490c0:	mov	w1, #0x83b                 	// #2107
   490c4:	csel	w1, w0, w1, eq  // eq = none
   490c8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   490cc:	tst	x0, #0x1000
   490d0:	mov	w0, #0x88a                 	// #2186
   490d4:	mov	w1, #0x89a                 	// #2202
   490d8:	csel	w1, w0, w1, eq  // eq = none
   490dc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   490e0:	tbnz	w0, #21, 49494 <aarch64_opcode_lookup@@Base+0x1fe0>
   490e4:	tbnz	w0, #15, 4925c <aarch64_opcode_lookup@@Base+0x1da8>
   490e8:	tbnz	w0, #30, 491d8 <aarch64_opcode_lookup@@Base+0x1d24>
   490ec:	tbnz	w0, #13, 49164 <aarch64_opcode_lookup@@Base+0x1cb0>
   490f0:	tbnz	w0, #14, 49120 <aarch64_opcode_lookup@@Base+0x1c6c>
   490f4:	tbnz	w0, #31, 4910c <aarch64_opcode_lookup@@Base+0x1c58>
   490f8:	tst	x0, #0x10
   490fc:	mov	w0, #0x531                 	// #1329
   49100:	mov	w1, #0x52e                 	// #1326
   49104:	csel	w1, w0, w1, eq  // eq = none
   49108:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4910c:	tst	x0, #0x800000
   49110:	mov	w0, #0x607                 	// #1543
   49114:	mov	w1, #0x60b                 	// #1547
   49118:	csel	w1, w0, w1, eq  // eq = none
   4911c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49120:	tbnz	w0, #31, 49138 <aarch64_opcode_lookup@@Base+0x1c84>
   49124:	tst	x0, #0x10
   49128:	mov	w0, #0x528                 	// #1320
   4912c:	mov	w1, #0x52b                 	// #1323
   49130:	csel	w1, w0, w1, eq  // eq = none
   49134:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49138:	tbnz	w0, #22, 49150 <aarch64_opcode_lookup@@Base+0x1c9c>
   4913c:	tst	x0, #0x800000
   49140:	mov	w0, #0x5dd                 	// #1501
   49144:	mov	w1, #0x62d                 	// #1581
   49148:	csel	w1, w0, w1, eq  // eq = none
   4914c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49150:	tst	x0, #0x800000
   49154:	mov	w0, #0x5df                 	// #1503
   49158:	mov	w1, #0x5f3                 	// #1523
   4915c:	csel	w1, w0, w1, eq  // eq = none
   49160:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49164:	tbnz	w0, #14, 49194 <aarch64_opcode_lookup@@Base+0x1ce0>
   49168:	tbnz	w0, #31, 49180 <aarch64_opcode_lookup@@Base+0x1ccc>
   4916c:	tst	x0, #0x10
   49170:	mov	w0, #0x525                 	// #1317
   49174:	mov	w1, #0x53c                 	// #1340
   49178:	csel	w1, w0, w1, eq  // eq = none
   4917c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49180:	tst	x0, #0x800000
   49184:	mov	w0, #0x606                 	// #1542
   49188:	mov	w1, #0x60a                 	// #1546
   4918c:	csel	w1, w0, w1, eq  // eq = none
   49190:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49194:	tbnz	w0, #31, 491ac <aarch64_opcode_lookup@@Base+0x1cf8>
   49198:	tst	x0, #0x10
   4919c:	mov	w0, #0x53a                 	// #1338
   491a0:	mov	w1, #0x534                 	// #1332
   491a4:	csel	w1, w0, w1, eq  // eq = none
   491a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   491ac:	tbnz	w0, #22, 491c4 <aarch64_opcode_lookup@@Base+0x1d10>
   491b0:	tst	x0, #0x800000
   491b4:	mov	w0, #0x659                 	// #1625
   491b8:	mov	w1, #0x691                 	// #1681
   491bc:	csel	w1, w0, w1, eq  // eq = none
   491c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   491c4:	tst	x0, #0x800000
   491c8:	mov	w0, #0x65d                 	// #1629
   491cc:	mov	w1, #0x670                 	// #1648
   491d0:	csel	w1, w0, w1, eq  // eq = none
   491d4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   491d8:	mov	w1, #0x56a                 	// #1386
   491dc:	tbz	w0, #31, 474cc <aarch64_opcode_lookup@@Base+0x18>
   491e0:	tbnz	w0, #13, 49200 <aarch64_opcode_lookup@@Base+0x1d4c>
   491e4:	mov	w1, #0x747                 	// #1863
   491e8:	tbz	w0, #22, 474cc <aarch64_opcode_lookup@@Base+0x18>
   491ec:	tst	x0, #0x800000
   491f0:	mov	w0, #0x74b                 	// #1867
   491f4:	mov	w1, #0x760                 	// #1888
   491f8:	csel	w1, w0, w1, eq  // eq = none
   491fc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49200:	tbnz	w0, #14, 49230 <aarch64_opcode_lookup@@Base+0x1d7c>
   49204:	tbnz	w0, #22, 4921c <aarch64_opcode_lookup@@Base+0x1d68>
   49208:	tst	x0, #0x800000
   4920c:	mov	w0, #0x8c0                 	// #2240
   49210:	mov	w1, #0x8c3                 	// #2243
   49214:	csel	w1, w0, w1, eq  // eq = none
   49218:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4921c:	tst	x0, #0x800000
   49220:	mov	w0, #0x8bf                 	// #2239
   49224:	mov	w1, #0x8c2                 	// #2242
   49228:	csel	w1, w0, w1, eq  // eq = none
   4922c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49230:	tbnz	w0, #22, 49248 <aarch64_opcode_lookup@@Base+0x1d94>
   49234:	tst	x0, #0x800000
   49238:	mov	w0, #0x78d                 	// #1933
   4923c:	mov	w1, #0x791                 	// #1937
   49240:	csel	w1, w0, w1, eq  // eq = none
   49244:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49248:	tst	x0, #0x800000
   4924c:	mov	w0, #0x77d                 	// #1917
   49250:	mov	w1, #0x781                 	// #1921
   49254:	csel	w1, w0, w1, eq  // eq = none
   49258:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4925c:	tbnz	w0, #13, 49334 <aarch64_opcode_lookup@@Base+0x1e80>
   49260:	tbnz	w0, #30, 492c0 <aarch64_opcode_lookup@@Base+0x1e0c>
   49264:	tbnz	w0, #14, 4927c <aarch64_opcode_lookup@@Base+0x1dc8>
   49268:	tst	x0, #0x10
   4926c:	mov	w0, #0x529                 	// #1321
   49270:	mov	w1, #0x52c                 	// #1324
   49274:	csel	w1, w0, w1, eq  // eq = none
   49278:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4927c:	tbnz	w0, #31, 49294 <aarch64_opcode_lookup@@Base+0x1de0>
   49280:	tst	x0, #0x10
   49284:	mov	w0, #0x532                 	// #1330
   49288:	mov	w1, #0x52f                 	// #1327
   4928c:	csel	w1, w0, w1, eq  // eq = none
   49290:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49294:	tbnz	w0, #22, 492ac <aarch64_opcode_lookup@@Base+0x1df8>
   49298:	tst	x0, #0x800000
   4929c:	mov	w0, #0x6b4                 	// #1716
   492a0:	mov	w1, #0x6b8                 	// #1720
   492a4:	csel	w1, w0, w1, eq  // eq = none
   492a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   492ac:	tst	x0, #0x800000
   492b0:	mov	w0, #0x648                 	// #1608
   492b4:	mov	w1, #0x64c                 	// #1612
   492b8:	csel	w1, w0, w1, eq  // eq = none
   492bc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   492c0:	tbnz	w0, #31, 49308 <aarch64_opcode_lookup@@Base+0x1e54>
   492c4:	tbnz	w0, #17, 492f4 <aarch64_opcode_lookup@@Base+0x1e40>
   492c8:	tbnz	w0, #18, 492e0 <aarch64_opcode_lookup@@Base+0x1e2c>
   492cc:	tst	x0, #0x100000
   492d0:	mov	w0, #0x569                 	// #1385
   492d4:	mov	w1, #0x812                 	// #2066
   492d8:	csel	w1, w0, w1, eq  // eq = none
   492dc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   492e0:	tst	x0, #0x10000
   492e4:	mov	w0, #0x81a                 	// #2074
   492e8:	mov	w1, #0x81c                 	// #2076
   492ec:	csel	w1, w0, w1, eq  // eq = none
   492f0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   492f4:	tst	x0, #0x10000
   492f8:	mov	w0, #0x81b                 	// #2075
   492fc:	mov	w1, #0x81d                 	// #2077
   49300:	csel	w1, w0, w1, eq  // eq = none
   49304:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49308:	tbnz	w0, #22, 49320 <aarch64_opcode_lookup@@Base+0x1e6c>
   4930c:	tst	x0, #0x800000
   49310:	mov	w0, #0x748                 	// #1864
   49314:	mov	w1, #0x75b                 	// #1883
   49318:	csel	w1, w0, w1, eq  // eq = none
   4931c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49320:	tst	x0, #0x800000
   49324:	mov	w0, #0x74c                 	// #1868
   49328:	mov	w1, #0x761                 	// #1889
   4932c:	csel	w1, w0, w1, eq  // eq = none
   49330:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49334:	tbnz	w0, #14, 49404 <aarch64_opcode_lookup@@Base+0x1f50>
   49338:	tbnz	w0, #30, 493b0 <aarch64_opcode_lookup@@Base+0x1efc>
   4933c:	tbnz	w0, #31, 49354 <aarch64_opcode_lookup@@Base+0x1ea0>
   49340:	tst	x0, #0x10
   49344:	mov	w0, #0x526                 	// #1318
   49348:	mov	w1, #0x53d                 	// #1341
   4934c:	csel	w1, w0, w1, eq  // eq = none
   49350:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49354:	tbnz	w0, #20, 49384 <aarch64_opcode_lookup@@Base+0x1ed0>
   49358:	tbnz	w0, #22, 49370 <aarch64_opcode_lookup@@Base+0x1ebc>
   4935c:	tst	x0, #0x800000
   49360:	mov	w0, #0x5e4                 	// #1508
   49364:	mov	w1, #0x632                 	// #1586
   49368:	csel	w1, w0, w1, eq  // eq = none
   4936c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49370:	tst	x0, #0x800000
   49374:	mov	w0, #0x5e6                 	// #1510
   49378:	mov	w1, #0x5fb                 	// #1531
   4937c:	csel	w1, w0, w1, eq  // eq = none
   49380:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49384:	tbnz	w0, #22, 4939c <aarch64_opcode_lookup@@Base+0x1ee8>
   49388:	tst	x0, #0x800000
   4938c:	mov	w0, #0x6a4                 	// #1700
   49390:	mov	w1, #0x6b1                 	// #1713
   49394:	csel	w1, w0, w1, eq  // eq = none
   49398:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4939c:	tst	x0, #0x800000
   493a0:	mov	w0, #0x6a6                 	// #1702
   493a4:	mov	w1, #0x6aa                 	// #1706
   493a8:	csel	w1, w0, w1, eq  // eq = none
   493ac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   493b0:	tbnz	w0, #22, 493e8 <aarch64_opcode_lookup@@Base+0x1f34>
   493b4:	tbnz	w0, #23, 493cc <aarch64_opcode_lookup@@Base+0x1f18>
   493b8:	cmp	w0, #0x0
   493bc:	mov	w0, #0x818                 	// #2072
   493c0:	mov	w1, #0x749                 	// #1865
   493c4:	csel	w1, w0, w1, ge  // ge = tcont
   493c8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   493cc:	tbnz	w0, #31, 4cbc4 <aarch64_opcode_lookup@@Base+0x5710>
   493d0:	tbnz	w0, #16, 4cbcc <aarch64_opcode_lookup@@Base+0x5718>
   493d4:	tst	x0, #0x20000
   493d8:	mov	w0, #0x815                 	// #2069
   493dc:	mov	w1, #0x977                 	// #2423
   493e0:	csel	w1, w0, w1, eq  // eq = none
   493e4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   493e8:	tbz	w0, #23, 4cbd4 <aarch64_opcode_lookup@@Base+0x5720>
   493ec:	tbnz	w0, #31, 4cbdc <aarch64_opcode_lookup@@Base+0x5728>
   493f0:	tst	x0, #0x10000
   493f4:	mov	w0, #0x816                 	// #2070
   493f8:	mov	w1, #0x814                 	// #2068
   493fc:	csel	w1, w0, w1, eq  // eq = none
   49400:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49404:	tbnz	w0, #30, 4944c <aarch64_opcode_lookup@@Base+0x1f98>
   49408:	tbnz	w0, #31, 49420 <aarch64_opcode_lookup@@Base+0x1f6c>
   4940c:	tst	x0, #0x10
   49410:	mov	w0, #0x536                 	// #1334
   49414:	mov	w1, #0x538                 	// #1336
   49418:	csel	w1, w0, w1, eq  // eq = none
   4941c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49420:	tbnz	w0, #22, 49438 <aarch64_opcode_lookup@@Base+0x1f84>
   49424:	tst	x0, #0x800000
   49428:	mov	w0, #0x6b5                 	// #1717
   4942c:	mov	w1, #0x6b9                 	// #1721
   49430:	csel	w1, w0, w1, eq  // eq = none
   49434:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49438:	tst	x0, #0x800000
   4943c:	mov	w0, #0x649                 	// #1609
   49440:	mov	w1, #0x64d                 	// #1613
   49444:	csel	w1, w0, w1, eq  // eq = none
   49448:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4944c:	tbnz	w0, #20, 49468 <aarch64_opcode_lookup@@Base+0x1fb4>
   49450:	tbz	w0, #22, 4cbe4 <aarch64_opcode_lookup@@Base+0x5730>
   49454:	tst	x0, #0x800000
   49458:	mov	w0, #0x751                 	// #1873
   4945c:	mov	w1, #0x766                 	// #1894
   49460:	csel	w1, w0, w1, eq  // eq = none
   49464:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49468:	tbnz	w0, #22, 49480 <aarch64_opcode_lookup@@Base+0x1fcc>
   4946c:	tst	x0, #0x800000
   49470:	mov	w0, #0x78e                 	// #1934
   49474:	mov	w1, #0x792                 	// #1938
   49478:	csel	w1, w0, w1, eq  // eq = none
   4947c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49480:	tst	x0, #0x800000
   49484:	mov	w0, #0x77e                 	// #1918
   49488:	mov	w1, #0x782                 	// #1922
   4948c:	csel	w1, w0, w1, eq  // eq = none
   49490:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49494:	tbnz	w0, #13, 495dc <aarch64_opcode_lookup@@Base+0x2128>
   49498:	tbnz	w0, #30, 49520 <aarch64_opcode_lookup@@Base+0x206c>
   4949c:	tbnz	w0, #31, 494b4 <aarch64_opcode_lookup@@Base+0x2000>
   494a0:	tst	x0, #0x10
   494a4:	mov	w0, #0x533                 	// #1331
   494a8:	mov	w1, #0x530                 	// #1328
   494ac:	csel	w1, w0, w1, eq  // eq = none
   494b0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   494b4:	tbnz	w0, #14, 494c4 <aarch64_opcode_lookup@@Base+0x2010>
   494b8:	ubfx	x0, x0, #23, #1
   494bc:	add	w1, w0, #0x95f
   494c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   494c4:	tbnz	w0, #15, 494f4 <aarch64_opcode_lookup@@Base+0x2040>
   494c8:	tbnz	w0, #22, 494e0 <aarch64_opcode_lookup@@Base+0x202c>
   494cc:	tst	x0, #0x800000
   494d0:	mov	w0, #0x5de                 	// #1502
   494d4:	mov	w1, #0x5f2                 	// #1522
   494d8:	csel	w1, w0, w1, eq  // eq = none
   494dc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   494e0:	tst	x0, #0x800000
   494e4:	mov	w0, #0x5e0                 	// #1504
   494e8:	mov	w1, #0x5f4                 	// #1524
   494ec:	csel	w1, w0, w1, eq  // eq = none
   494f0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   494f4:	tbnz	w0, #22, 4950c <aarch64_opcode_lookup@@Base+0x2058>
   494f8:	tst	x0, #0x800000
   494fc:	mov	w0, #0x640                 	// #1600
   49500:	mov	w1, #0x644                 	// #1604
   49504:	csel	w1, w0, w1, eq  // eq = none
   49508:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4950c:	tst	x0, #0x800000
   49510:	mov	w0, #0x650                 	// #1616
   49514:	mov	w1, #0x654                 	// #1620
   49518:	csel	w1, w0, w1, eq  // eq = none
   4951c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49520:	tbnz	w0, #15, 495a8 <aarch64_opcode_lookup@@Base+0x20f4>
   49524:	tbnz	w0, #14, 4955c <aarch64_opcode_lookup@@Base+0x20a8>
   49528:	tbnz	w0, #12, 49550 <aarch64_opcode_lookup@@Base+0x209c>
   4952c:	tbnz	w0, #10, 49540 <aarch64_opcode_lookup@@Base+0x208c>
   49530:	tbz	w0, #23, 4cbec <aarch64_opcode_lookup@@Base+0x5738>
   49534:	ubfx	x0, x0, #22, #1
   49538:	add	w1, w0, #0x5a0
   4953c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49540:	tbz	w0, #23, 4cbf4 <aarch64_opcode_lookup@@Base+0x5740>
   49544:	ubfx	x0, x0, #22, #1
   49548:	add	w1, w0, #0x5a4
   4954c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49550:	ubfx	x0, x0, #22, #1
   49554:	add	w1, w0, #0x56b
   49558:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4955c:	tbnz	w0, #22, 4957c <aarch64_opcode_lookup@@Base+0x20c8>
   49560:	tbz	w0, #23, 4cbfc <aarch64_opcode_lookup@@Base+0x5748>
   49564:	tbnz	w0, #31, 4cc04 <aarch64_opcode_lookup@@Base+0x5750>
   49568:	tst	x0, #0x400
   4956c:	mov	w0, #0x81e                 	// #2078
   49570:	mov	w1, #0x820                 	// #2080
   49574:	csel	w1, w0, w1, eq  // eq = none
   49578:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4957c:	tbnz	w0, #23, 49594 <aarch64_opcode_lookup@@Base+0x20e0>
   49580:	cmp	w0, #0x0
   49584:	mov	w0, #0x974                 	// #2420
   49588:	mov	w1, #0x74d                 	// #1869
   4958c:	csel	w1, w0, w1, ge  // ge = tcont
   49590:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49594:	tbnz	w0, #31, 4cc0c <aarch64_opcode_lookup@@Base+0x5758>
   49598:	tst	x0, #0x400
   4959c:	cset	w0, eq  // eq = none
   495a0:	add	w1, w0, #0x97a
   495a4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   495a8:	tbnz	w0, #22, 495c4 <aarch64_opcode_lookup@@Base+0x2110>
   495ac:	tbnz	w0, #31, 4cc14 <aarch64_opcode_lookup@@Base+0x5760>
   495b0:	tst	x0, #0x400
   495b4:	mov	w0, #0x81f                 	// #2079
   495b8:	mov	w1, #0x821                 	// #2081
   495bc:	csel	w1, w0, w1, eq  // eq = none
   495c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   495c4:	tbz	w0, #23, 4cc1c <aarch64_opcode_lookup@@Base+0x5768>
   495c8:	tbnz	w0, #31, 4cc24 <aarch64_opcode_lookup@@Base+0x5770>
   495cc:	tst	x0, #0x400
   495d0:	cset	w0, eq  // eq = none
   495d4:	add	w1, w0, #0x978
   495d8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   495dc:	tbnz	w0, #30, 496c4 <aarch64_opcode_lookup@@Base+0x2210>
   495e0:	tbnz	w0, #31, 495f8 <aarch64_opcode_lookup@@Base+0x2144>
   495e4:	tst	x0, #0x10
   495e8:	mov	w0, #0x537                 	// #1335
   495ec:	mov	w1, #0x539                 	// #1337
   495f0:	csel	w1, w0, w1, eq  // eq = none
   495f4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   495f8:	tbnz	w0, #14, 49668 <aarch64_opcode_lookup@@Base+0x21b4>
   495fc:	tbnz	w0, #15, 4960c <aarch64_opcode_lookup@@Base+0x2158>
   49600:	ubfx	x0, x0, #23, #1
   49604:	add	w1, w0, #0x963
   49608:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4960c:	tbnz	w0, #20, 4963c <aarch64_opcode_lookup@@Base+0x2188>
   49610:	tbnz	w0, #22, 49628 <aarch64_opcode_lookup@@Base+0x2174>
   49614:	tst	x0, #0x800000
   49618:	mov	w0, #0x5e5                 	// #1509
   4961c:	mov	w1, #0x5fa                 	// #1530
   49620:	csel	w1, w0, w1, eq  // eq = none
   49624:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49628:	tst	x0, #0x800000
   4962c:	mov	w0, #0x5e7                 	// #1511
   49630:	mov	w1, #0x5fc                 	// #1532
   49634:	csel	w1, w0, w1, eq  // eq = none
   49638:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4963c:	tbnz	w0, #22, 49654 <aarch64_opcode_lookup@@Base+0x21a0>
   49640:	tst	x0, #0x800000
   49644:	mov	w0, #0x6a5                 	// #1701
   49648:	mov	w1, #0x6a9                 	// #1705
   4964c:	csel	w1, w0, w1, eq  // eq = none
   49650:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49654:	tst	x0, #0x800000
   49658:	mov	w0, #0x6a7                 	// #1703
   4965c:	mov	w1, #0x6ab                 	// #1707
   49660:	csel	w1, w0, w1, eq  // eq = none
   49664:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49668:	tbnz	w0, #15, 49698 <aarch64_opcode_lookup@@Base+0x21e4>
   4966c:	tbnz	w0, #22, 49684 <aarch64_opcode_lookup@@Base+0x21d0>
   49670:	tst	x0, #0x800000
   49674:	mov	w0, #0x65b                 	// #1627
   49678:	mov	w1, #0x66e                 	// #1646
   4967c:	csel	w1, w0, w1, eq  // eq = none
   49680:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49684:	tst	x0, #0x800000
   49688:	mov	w0, #0x65f                 	// #1631
   4968c:	mov	w1, #0x672                 	// #1650
   49690:	csel	w1, w0, w1, eq  // eq = none
   49694:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49698:	tbnz	w0, #22, 496b0 <aarch64_opcode_lookup@@Base+0x21fc>
   4969c:	tst	x0, #0x800000
   496a0:	mov	w0, #0x641                 	// #1601
   496a4:	mov	w1, #0x645                 	// #1605
   496a8:	csel	w1, w0, w1, eq  // eq = none
   496ac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   496b0:	tst	x0, #0x800000
   496b4:	mov	w0, #0x651                 	// #1617
   496b8:	mov	w1, #0x655                 	// #1621
   496bc:	csel	w1, w0, w1, eq  // eq = none
   496c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   496c4:	tbnz	w0, #14, 4970c <aarch64_opcode_lookup@@Base+0x2258>
   496c8:	tbnz	w0, #15, 496dc <aarch64_opcode_lookup@@Base+0x2228>
   496cc:	tbz	w0, #23, 4cc2c <aarch64_opcode_lookup@@Base+0x5778>
   496d0:	ubfx	x0, x0, #22, #1
   496d4:	add	w1, w0, #0x5ab
   496d8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   496dc:	tbnz	w0, #22, 496f8 <aarch64_opcode_lookup@@Base+0x2244>
   496e0:	tbnz	w0, #31, 4cc34 <aarch64_opcode_lookup@@Base+0x5780>
   496e4:	tst	x0, #0x400
   496e8:	mov	w0, #0x823                 	// #2083
   496ec:	mov	w1, #0x825                 	// #2085
   496f0:	csel	w1, w0, w1, eq  // eq = none
   496f4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   496f8:	tst	x0, #0x800000
   496fc:	mov	w0, #0x752                 	// #1874
   49700:	mov	w1, #0x767                 	// #1895
   49704:	csel	w1, w0, w1, eq  // eq = none
   49708:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4970c:	tbnz	w0, #15, 49744 <aarch64_opcode_lookup@@Base+0x2290>
   49710:	tbnz	w0, #22, 49730 <aarch64_opcode_lookup@@Base+0x227c>
   49714:	tbz	w0, #23, 4cc3c <aarch64_opcode_lookup@@Base+0x5788>
   49718:	tbnz	w0, #31, 4cc44 <aarch64_opcode_lookup@@Base+0x5790>
   4971c:	tst	x0, #0x400
   49720:	mov	w0, #0x822                 	// #2082
   49724:	mov	w1, #0x824                 	// #2084
   49728:	csel	w1, w0, w1, eq  // eq = none
   4972c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49730:	tst	x0, #0x800000
   49734:	mov	w0, #0x785                 	// #1925
   49738:	mov	w1, #0x789                 	// #1929
   4973c:	csel	w1, w0, w1, eq  // eq = none
   49740:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49744:	tbnz	w0, #22, 49778 <aarch64_opcode_lookup@@Base+0x22c4>
   49748:	tbnz	w0, #23, 49760 <aarch64_opcode_lookup@@Base+0x22ac>
   4974c:	tst	x0, #0x100000
   49750:	mov	w0, #0x74f                 	// #1871
   49754:	mov	w1, #0x776                 	// #1910
   49758:	csel	w1, w0, w1, eq  // eq = none
   4975c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49760:	tbz	w0, #31, 4cc4c <aarch64_opcode_lookup@@Base+0x5798>
   49764:	tst	x0, #0x100000
   49768:	mov	w0, #0x764                 	// #1892
   4976c:	mov	w1, #0x77a                 	// #1914
   49770:	csel	w1, w0, w1, eq  // eq = none
   49774:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49778:	tbnz	w0, #23, 49794 <aarch64_opcode_lookup@@Base+0x22e0>
   4977c:	tbz	w0, #31, 4cc54 <aarch64_opcode_lookup@@Base+0x57a0>
   49780:	tst	x0, #0x100000
   49784:	mov	w0, #0x753                 	// #1875
   49788:	mov	w1, #0x786                 	// #1926
   4978c:	csel	w1, w0, w1, eq  // eq = none
   49790:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49794:	tbz	w0, #31, 4cc5c <aarch64_opcode_lookup@@Base+0x57a8>
   49798:	tst	x0, #0x100000
   4979c:	mov	w0, #0x768                 	// #1896
   497a0:	mov	w1, #0x78a                 	// #1930
   497a4:	csel	w1, w0, w1, eq  // eq = none
   497a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   497ac:	tbnz	w0, #29, 4a0a4 <aarch64_opcode_lookup@@Base+0x2bf0>
   497b0:	tbnz	w0, #30, 49ae4 <aarch64_opcode_lookup@@Base+0x2630>
   497b4:	tbnz	w0, #31, 499ec <aarch64_opcode_lookup@@Base+0x2538>
   497b8:	tbnz	w0, #21, 49800 <aarch64_opcode_lookup@@Base+0x234c>
   497bc:	tbnz	w0, #20, 497ec <aarch64_opcode_lookup@@Base+0x2338>
   497c0:	tbnz	w0, #22, 497d8 <aarch64_opcode_lookup@@Base+0x2324>
   497c4:	tst	x0, #0x800000
   497c8:	mov	w0, #0x6db                 	// #1755
   497cc:	mov	w1, #0x503                 	// #1283
   497d0:	csel	w1, w0, w1, eq  // eq = none
   497d4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   497d8:	tst	x0, #0x800000
   497dc:	mov	w0, #0x55a                 	// #1370
   497e0:	mov	w1, #0x558                 	// #1368
   497e4:	csel	w1, w0, w1, eq  // eq = none
   497e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   497ec:	tst	x0, #0x8000
   497f0:	mov	w0, #0x549                 	// #1353
   497f4:	mov	w1, #0x578                 	// #1400
   497f8:	csel	w1, w0, w1, eq  // eq = none
   497fc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49800:	tbnz	w0, #14, 49974 <aarch64_opcode_lookup@@Base+0x24c0>
   49804:	tbnz	w0, #13, 498dc <aarch64_opcode_lookup@@Base+0x2428>
   49808:	tbnz	w0, #15, 49848 <aarch64_opcode_lookup@@Base+0x2394>
   4980c:	tbnz	w0, #22, 4cc64 <aarch64_opcode_lookup@@Base+0x57b0>
   49810:	tbz	w0, #23, 4cc6c <aarch64_opcode_lookup@@Base+0x57b8>
   49814:	tbnz	w0, #10, 49830 <aarch64_opcode_lookup@@Base+0x237c>
   49818:	tbz	w0, #11, 4cc74 <aarch64_opcode_lookup@@Base+0x57c0>
   4981c:	tst	x0, #0x1000
   49820:	mov	w0, #0x969                 	// #2409
   49824:	mov	w1, #0x96b                 	// #2411
   49828:	csel	w1, w0, w1, eq  // eq = none
   4982c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49830:	tbz	w0, #11, 4cc7c <aarch64_opcode_lookup@@Base+0x57c8>
   49834:	tst	x0, #0x1000
   49838:	mov	w0, #0x96a                 	// #2410
   4983c:	mov	w1, #0x96c                 	// #2412
   49840:	csel	w1, w0, w1, eq  // eq = none
   49844:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49848:	tbnz	w0, #16, 49894 <aarch64_opcode_lookup@@Base+0x23e0>
   4984c:	tbnz	w0, #17, 4987c <aarch64_opcode_lookup@@Base+0x23c8>
   49850:	tbnz	w0, #18, 49868 <aarch64_opcode_lookup@@Base+0x23b4>
   49854:	tst	x0, #0x80000
   49858:	mov	w0, #0x547                 	// #1351
   4985c:	mov	w1, #0x51d                 	// #1309
   49860:	csel	w1, w0, w1, eq  // eq = none
   49864:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49868:	tst	x0, #0x80000
   4986c:	mov	w0, #0x70b                 	// #1803
   49870:	mov	w1, #0x726                 	// #1830
   49874:	csel	w1, w0, w1, eq  // eq = none
   49878:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4987c:	tbnz	w0, #18, 4cc84 <aarch64_opcode_lookup@@Base+0x57d0>
   49880:	tst	x0, #0x80000
   49884:	mov	w0, #0x5d9                 	// #1497
   49888:	mov	w1, #0x51e                 	// #1310
   4988c:	csel	w1, w0, w1, eq  // eq = none
   49890:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49894:	tbnz	w0, #17, 498c4 <aarch64_opcode_lookup@@Base+0x2410>
   49898:	tbnz	w0, #18, 498b0 <aarch64_opcode_lookup@@Base+0x23fc>
   4989c:	tst	x0, #0x80000
   498a0:	mov	w0, #0x546                 	// #1350
   498a4:	mov	w1, #0x520                 	// #1312
   498a8:	csel	w1, w0, w1, eq  // eq = none
   498ac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   498b0:	tst	x0, #0x80000
   498b4:	mov	w0, #0x70c                 	// #1804
   498b8:	mov	w1, #0x870                 	// #2160
   498bc:	csel	w1, w0, w1, eq  // eq = none
   498c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   498c4:	tbnz	w0, #18, 4cc8c <aarch64_opcode_lookup@@Base+0x57d8>
   498c8:	tst	x0, #0x80000
   498cc:	mov	w0, #0x5db                 	// #1499
   498d0:	mov	w1, #0x521                 	// #1313
   498d4:	csel	w1, w0, w1, eq  // eq = none
   498d8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   498dc:	tbnz	w0, #15, 49944 <aarch64_opcode_lookup@@Base+0x2490>
   498e0:	tbnz	w0, #10, 4cc94 <aarch64_opcode_lookup@@Base+0x57e0>
   498e4:	tbnz	w0, #11, 498fc <aarch64_opcode_lookup@@Base+0x2448>
   498e8:	tst	x0, #0x1000
   498ec:	mov	w0, #0x556                 	// #1366
   498f0:	mov	w1, #0x7a1                 	// #1953
   498f4:	csel	w1, w0, w1, eq  // eq = none
   498f8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   498fc:	tbz	w0, #12, 4cc9c <aarch64_opcode_lookup@@Base+0x57e8>
   49900:	tbnz	w0, #16, 49930 <aarch64_opcode_lookup@@Base+0x247c>
   49904:	tbnz	w0, #17, 4cca4 <aarch64_opcode_lookup@@Base+0x57f0>
   49908:	tbnz	w0, #18, 49924 <aarch64_opcode_lookup@@Base+0x2470>
   4990c:	tbnz	w0, #19, 4ccac <aarch64_opcode_lookup@@Base+0x57f8>
   49910:	tst	x0, #0x100000
   49914:	mov	w0, #0x555                 	// #1365
   49918:	mov	w1, #0x79d                 	// #1949
   4991c:	csel	w1, w0, w1, eq  // eq = none
   49920:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49924:	ubfx	x0, x0, #20, #1
   49928:	add	w1, w0, #0x5d6
   4992c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49930:	tst	x0, #0x20000
   49934:	mov	w0, #0x79c                 	// #1948
   49938:	mov	w1, #0x7db                 	// #2011
   4993c:	csel	w1, w0, w1, eq  // eq = none
   49940:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49944:	tbnz	w0, #16, 49960 <aarch64_opcode_lookup@@Base+0x24ac>
   49948:	tbnz	w0, #19, 4ccb4 <aarch64_opcode_lookup@@Base+0x5800>
   4994c:	tst	x0, #0x100000
   49950:	mov	w0, #0x5d8                 	// #1496
   49954:	mov	w1, #0x51f                 	// #1311
   49958:	csel	w1, w0, w1, eq  // eq = none
   4995c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49960:	tst	x0, #0x100000
   49964:	mov	w0, #0x5da                 	// #1498
   49968:	mov	w1, #0x522                 	// #1314
   4996c:	csel	w1, w0, w1, eq  // eq = none
   49970:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49974:	mov	w1, #0x71c                 	// #1820
   49978:	tbnz	w0, #15, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4997c:	tbnz	w0, #10, 499c0 <aarch64_opcode_lookup@@Base+0x250c>
   49980:	tbnz	w0, #11, 499b4 <aarch64_opcode_lookup@@Base+0x2500>
   49984:	tbnz	w0, #12, 499a8 <aarch64_opcode_lookup@@Base+0x24f4>
   49988:	tbnz	w0, #13, 4ccbc <aarch64_opcode_lookup@@Base+0x5808>
   4998c:	tbz	w0, #20, 4ccc4 <aarch64_opcode_lookup@@Base+0x5810>
   49990:	tbnz	w0, #16, 4cccc <aarch64_opcode_lookup@@Base+0x5818>
   49994:	tst	x0, #0x40000
   49998:	mov	w0, #0x703                 	// #1795
   4999c:	mov	w1, #0x709                 	// #1801
   499a0:	csel	w1, w0, w1, eq  // eq = none
   499a4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   499a8:	ubfx	x0, x0, #13, #1
   499ac:	add	w1, w0, #0x7a2
   499b0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   499b4:	ubfx	x0, x0, #13, #1
   499b8:	add	w1, w0, #0x7e0
   499bc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   499c0:	tbnz	w0, #11, 499e0 <aarch64_opcode_lookup@@Base+0x252c>
   499c4:	tbnz	w0, #12, 499d4 <aarch64_opcode_lookup@@Base+0x2520>
   499c8:	ubfx	x0, x0, #13, #1
   499cc:	add	w1, w0, #0x7ef
   499d0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   499d4:	ubfx	x0, x0, #13, #1
   499d8:	add	w1, w0, #0x7a4
   499dc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   499e0:	ubfx	x0, x0, #13, #1
   499e4:	add	w1, w0, #0x7e2
   499e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   499ec:	tbnz	w0, #13, 49a78 <aarch64_opcode_lookup@@Base+0x25c4>
   499f0:	tbnz	w0, #14, 49a20 <aarch64_opcode_lookup@@Base+0x256c>
   499f4:	tbnz	w0, #15, 49a0c <aarch64_opcode_lookup@@Base+0x2558>
   499f8:	tst	x0, #0x400000
   499fc:	mov	w0, #0x6bc                 	// #1724
   49a00:	mov	w1, #0x6e8                 	// #1768
   49a04:	csel	w1, w0, w1, eq  // eq = none
   49a08:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49a0c:	tst	x0, #0x800000
   49a10:	mov	w0, #0x611                 	// #1553
   49a14:	mov	w1, #0x60e                 	// #1550
   49a18:	csel	w1, w0, w1, eq  // eq = none
   49a1c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49a20:	tbnz	w0, #15, 49a48 <aarch64_opcode_lookup@@Base+0x2594>
   49a24:	tbnz	w0, #23, 49a34 <aarch64_opcode_lookup@@Base+0x2580>
   49a28:	ubfx	x0, x0, #21, #1
   49a2c:	add	w1, w0, #0x634
   49a30:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49a34:	tst	x0, #0x400000
   49a38:	mov	w0, #0x6bd                 	// #1725
   49a3c:	mov	w1, #0x6fd                 	// #1789
   49a40:	csel	w1, w0, w1, eq  // eq = none
   49a44:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49a48:	tbnz	w0, #22, 49a64 <aarch64_opcode_lookup@@Base+0x25b0>
   49a4c:	tbnz	w0, #21, 4ccd4 <aarch64_opcode_lookup@@Base+0x5820>
   49a50:	tst	x0, #0x800000
   49a54:	mov	w0, #0x6f9                 	// #1785
   49a58:	mov	w1, #0x6eb                 	// #1771
   49a5c:	csel	w1, w0, w1, eq  // eq = none
   49a60:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49a64:	tst	x0, #0x800000
   49a68:	mov	w0, #0x614                 	// #1556
   49a6c:	mov	w1, #0x610                 	// #1552
   49a70:	csel	w1, w0, w1, eq  // eq = none
   49a74:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49a78:	tbnz	w0, #14, 49aa0 <aarch64_opcode_lookup@@Base+0x25ec>
   49a7c:	mov	w1, #0x6f6                 	// #1782
   49a80:	tbz	w0, #15, 474cc <aarch64_opcode_lookup@@Base+0x18>
   49a84:	mov	w1, #0x830                 	// #2096
   49a88:	tbz	w0, #22, 474cc <aarch64_opcode_lookup@@Base+0x18>
   49a8c:	tst	x0, #0x800000
   49a90:	mov	w0, #0x612                 	// #1554
   49a94:	mov	w1, #0x60f                 	// #1551
   49a98:	csel	w1, w0, w1, eq  // eq = none
   49a9c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49aa0:	tbnz	w0, #15, 49ab4 <aarch64_opcode_lookup@@Base+0x2600>
   49aa4:	tbnz	w0, #23, 4ccdc <aarch64_opcode_lookup@@Base+0x5828>
   49aa8:	ubfx	x0, x0, #21, #1
   49aac:	add	w1, w0, #0x698
   49ab0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49ab4:	tbnz	w0, #22, 49ad0 <aarch64_opcode_lookup@@Base+0x261c>
   49ab8:	tbnz	w0, #21, 4cce4 <aarch64_opcode_lookup@@Base+0x5830>
   49abc:	tst	x0, #0x800000
   49ac0:	mov	w0, #0x6fc                 	// #1788
   49ac4:	mov	w1, #0x6ee                 	// #1774
   49ac8:	csel	w1, w0, w1, eq  // eq = none
   49acc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49ad0:	tst	x0, #0x800000
   49ad4:	mov	w0, #0x615                 	// #1557
   49ad8:	mov	w1, #0x602                 	// #1538
   49adc:	csel	w1, w0, w1, eq  // eq = none
   49ae0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49ae4:	tbnz	w0, #13, 49dc0 <aarch64_opcode_lookup@@Base+0x290c>
   49ae8:	tbnz	w0, #14, 49c48 <aarch64_opcode_lookup@@Base+0x2794>
   49aec:	tbnz	w0, #15, 49bb4 <aarch64_opcode_lookup@@Base+0x2700>
   49af0:	tbnz	w0, #21, 49b54 <aarch64_opcode_lookup@@Base+0x26a0>
   49af4:	tbnz	w0, #31, 4ccec <aarch64_opcode_lookup@@Base+0x5838>
   49af8:	tbnz	w0, #10, 49b28 <aarch64_opcode_lookup@@Base+0x2674>
   49afc:	tbnz	w0, #11, 49b14 <aarch64_opcode_lookup@@Base+0x2660>
   49b00:	tst	x0, #0x1000
   49b04:	mov	w0, #0x84e                 	// #2126
   49b08:	mov	w1, #0x8b9                 	// #2233
   49b0c:	csel	w1, w0, w1, eq  // eq = none
   49b10:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49b14:	tst	x0, #0x1000
   49b18:	mov	w0, #0x8d1                 	// #2257
   49b1c:	mov	w1, #0x906                 	// #2310
   49b20:	csel	w1, w0, w1, eq  // eq = none
   49b24:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49b28:	tbnz	w0, #11, 49b40 <aarch64_opcode_lookup@@Base+0x268c>
   49b2c:	tst	x0, #0x1000
   49b30:	mov	w0, #0x850                 	// #2128
   49b34:	mov	w1, #0x8bb                 	// #2235
   49b38:	csel	w1, w0, w1, eq  // eq = none
   49b3c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49b40:	tst	x0, #0x1000
   49b44:	mov	w0, #0x8d2                 	// #2258
   49b48:	mov	w1, #0x907                 	// #2311
   49b4c:	csel	w1, w0, w1, eq  // eq = none
   49b50:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49b54:	tbnz	w0, #31, 4ccf4 <aarch64_opcode_lookup@@Base+0x5840>
   49b58:	tbnz	w0, #10, 49b88 <aarch64_opcode_lookup@@Base+0x26d4>
   49b5c:	tbnz	w0, #11, 49b74 <aarch64_opcode_lookup@@Base+0x26c0>
   49b60:	tst	x0, #0x1000
   49b64:	mov	w0, #0x8a8                 	// #2216
   49b68:	mov	w1, #0x856                 	// #2134
   49b6c:	csel	w1, w0, w1, eq  // eq = none
   49b70:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49b74:	tst	x0, #0x1000
   49b78:	mov	w0, #0x8a0                 	// #2208
   49b7c:	mov	w1, #0x844                 	// #2116
   49b80:	csel	w1, w0, w1, eq  // eq = none
   49b84:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49b88:	tbnz	w0, #11, 49ba0 <aarch64_opcode_lookup@@Base+0x26ec>
   49b8c:	tst	x0, #0x1000
   49b90:	mov	w0, #0x8a9                 	// #2217
   49b94:	mov	w1, #0x857                 	// #2135
   49b98:	csel	w1, w0, w1, eq  // eq = none
   49b9c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49ba0:	tst	x0, #0x1000
   49ba4:	mov	w0, #0x8a1                 	// #2209
   49ba8:	mov	w1, #0x845                 	// #2117
   49bac:	csel	w1, w0, w1, eq  // eq = none
   49bb0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49bb4:	tbnz	w0, #21, 49c1c <aarch64_opcode_lookup@@Base+0x2768>
   49bb8:	tbnz	w0, #31, 49c08 <aarch64_opcode_lookup@@Base+0x2754>
   49bbc:	tbnz	w0, #10, 49bf4 <aarch64_opcode_lookup@@Base+0x2740>
   49bc0:	tbnz	w0, #11, 49bd8 <aarch64_opcode_lookup@@Base+0x2724>
   49bc4:	tst	x0, #0x1000
   49bc8:	mov	w0, #0x84f                 	// #2127
   49bcc:	mov	w1, #0x80f                 	// #2063
   49bd0:	csel	w1, w0, w1, eq  // eq = none
   49bd4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49bd8:	tbz	w0, #12, 4ccfc <aarch64_opcode_lookup@@Base+0x5848>
   49bdc:	tbnz	w0, #22, 4cd04 <aarch64_opcode_lookup@@Base+0x5850>
   49be0:	tst	x0, #0x800000
   49be4:	mov	w0, #0x957                 	// #2391
   49be8:	mov	w1, #0x959                 	// #2393
   49bec:	csel	w1, w0, w1, eq  // eq = none
   49bf0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49bf4:	tst	x0, #0x800
   49bf8:	mov	w0, #0x810                 	// #2064
   49bfc:	mov	w1, #0x8bc                 	// #2236
   49c00:	csel	w1, w0, w1, eq  // eq = none
   49c04:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49c08:	tst	x0, #0x400000
   49c0c:	mov	w0, #0x82f                 	// #2095
   49c10:	mov	w1, #0x630                 	// #1584
   49c14:	csel	w1, w0, w1, eq  // eq = none
   49c18:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49c1c:	tbnz	w0, #31, 49c34 <aarch64_opcode_lookup@@Base+0x2780>
   49c20:	tst	x0, #0x10
   49c24:	mov	w0, #0x832                 	// #2098
   49c28:	mov	w1, #0x83e                 	// #2110
   49c2c:	csel	w1, w0, w1, eq  // eq = none
   49c30:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49c34:	tst	x0, #0x400000
   49c38:	mov	w0, #0x633                 	// #1587
   49c3c:	mov	w1, #0x631                 	// #1585
   49c40:	csel	w1, w0, w1, eq  // eq = none
   49c44:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49c48:	tbnz	w0, #15, 49d00 <aarch64_opcode_lookup@@Base+0x284c>
   49c4c:	tbnz	w0, #21, 49cc4 <aarch64_opcode_lookup@@Base+0x2810>
   49c50:	tbnz	w0, #31, 49cb0 <aarch64_opcode_lookup@@Base+0x27fc>
   49c54:	tbnz	w0, #10, 49c84 <aarch64_opcode_lookup@@Base+0x27d0>
   49c58:	tbnz	w0, #11, 49c70 <aarch64_opcode_lookup@@Base+0x27bc>
   49c5c:	tst	x0, #0x1000
   49c60:	mov	w0, #0x851                 	// #2129
   49c64:	mov	w1, #0x8bd                 	// #2237
   49c68:	csel	w1, w0, w1, eq  // eq = none
   49c6c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49c70:	tst	x0, #0x1000
   49c74:	mov	w0, #0x8d3                 	// #2259
   49c78:	mov	w1, #0x908                 	// #2312
   49c7c:	csel	w1, w0, w1, eq  // eq = none
   49c80:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49c84:	tbnz	w0, #11, 49c9c <aarch64_opcode_lookup@@Base+0x27e8>
   49c88:	tst	x0, #0x1000
   49c8c:	mov	w0, #0x852                 	// #2130
   49c90:	mov	w1, #0x8be                 	// #2238
   49c94:	csel	w1, w0, w1, eq  // eq = none
   49c98:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49c9c:	tst	x0, #0x1000
   49ca0:	mov	w0, #0x8d4                 	// #2260
   49ca4:	mov	w1, #0x909                 	// #2313
   49ca8:	csel	w1, w0, w1, eq  // eq = none
   49cac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49cb0:	tst	x0, #0x800000
   49cb4:	mov	w0, #0x638                 	// #1592
   49cb8:	mov	w1, #0x5ea                 	// #1514
   49cbc:	csel	w1, w0, w1, eq  // eq = none
   49cc0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49cc4:	tbnz	w0, #23, 4cd0c <aarch64_opcode_lookup@@Base+0x5858>
   49cc8:	tbnz	w0, #31, 4cd14 <aarch64_opcode_lookup@@Base+0x5860>
   49ccc:	tbnz	w0, #10, 49ce8 <aarch64_opcode_lookup@@Base+0x2834>
   49cd0:	tbnz	w0, #11, 4cd1c <aarch64_opcode_lookup@@Base+0x5868>
   49cd4:	tst	x0, #0x1000
   49cd8:	mov	w0, #0x8ac                 	// #2220
   49cdc:	mov	w1, #0x8ae                 	// #2222
   49ce0:	csel	w1, w0, w1, eq  // eq = none
   49ce4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49ce8:	tbnz	w0, #11, 4cd24 <aarch64_opcode_lookup@@Base+0x5870>
   49cec:	tst	x0, #0x1000
   49cf0:	mov	w0, #0x8ad                 	// #2221
   49cf4:	mov	w1, #0x8af                 	// #2223
   49cf8:	csel	w1, w0, w1, eq  // eq = none
   49cfc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49d00:	tbnz	w0, #21, 49d90 <aarch64_opcode_lookup@@Base+0x28dc>
   49d04:	tbnz	w0, #31, 49d64 <aarch64_opcode_lookup@@Base+0x28b0>
   49d08:	tbnz	w0, #11, 49d40 <aarch64_opcode_lookup@@Base+0x288c>
   49d0c:	tbnz	w0, #10, 49d28 <aarch64_opcode_lookup@@Base+0x2874>
   49d10:	tbz	w0, #12, 4cd2c <aarch64_opcode_lookup@@Base+0x5878>
   49d14:	tst	x0, #0x800000
   49d18:	mov	w0, #0x7fe                 	// #2046
   49d1c:	mov	w1, #0x853                 	// #2131
   49d20:	csel	w1, w0, w1, eq  // eq = none
   49d24:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49d28:	tbz	w0, #12, 4cd34 <aarch64_opcode_lookup@@Base+0x5880>
   49d2c:	tst	x0, #0x800000
   49d30:	mov	w0, #0x7ff                 	// #2047
   49d34:	mov	w1, #0x854                 	// #2132
   49d38:	csel	w1, w0, w1, eq  // eq = none
   49d3c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49d40:	tbnz	w0, #12, 49d50 <aarch64_opcode_lookup@@Base+0x289c>
   49d44:	ubfx	x0, x0, #10, #1
   49d48:	add	w1, w0, #0x8cc
   49d4c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49d50:	tst	x0, #0x10000
   49d54:	mov	w0, #0x807                 	// #2055
   49d58:	mov	w1, #0x873                 	// #2163
   49d5c:	csel	w1, w0, w1, eq  // eq = none
   49d60:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49d64:	tbnz	w0, #22, 49d7c <aarch64_opcode_lookup@@Base+0x28c8>
   49d68:	tst	x0, #0x800000
   49d6c:	mov	w0, #0x831                 	// #2097
   49d70:	mov	w1, #0x82a                 	// #2090
   49d74:	csel	w1, w0, w1, eq  // eq = none
   49d78:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49d7c:	tst	x0, #0x800000
   49d80:	mov	w0, #0x63a                 	// #1594
   49d84:	mov	w1, #0x5ec                 	// #1516
   49d88:	csel	w1, w0, w1, eq  // eq = none
   49d8c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49d90:	tbnz	w0, #23, 49da8 <aarch64_opcode_lookup@@Base+0x28f4>
   49d94:	tst	x0, #0x400000
   49d98:	mov	w0, #0x63f                 	// #1599
   49d9c:	mov	w1, #0x63b                 	// #1595
   49da0:	csel	w1, w0, w1, eq  // eq = none
   49da4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49da8:	tbz	w0, #31, 4cd3c <aarch64_opcode_lookup@@Base+0x5888>
   49dac:	tst	x0, #0x400000
   49db0:	mov	w0, #0x5ef                 	// #1519
   49db4:	mov	w1, #0x5ed                 	// #1517
   49db8:	csel	w1, w0, w1, eq  // eq = none
   49dbc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49dc0:	tbnz	w0, #14, 49ec4 <aarch64_opcode_lookup@@Base+0x2a10>
   49dc4:	tbnz	w0, #15, 49e5c <aarch64_opcode_lookup@@Base+0x29a8>
   49dc8:	tbnz	w0, #21, 49dfc <aarch64_opcode_lookup@@Base+0x2948>
   49dcc:	tbnz	w0, #31, 4cd44 <aarch64_opcode_lookup@@Base+0x5890>
   49dd0:	tbnz	w0, #10, 49de8 <aarch64_opcode_lookup@@Base+0x2934>
   49dd4:	tst	x0, #0x800
   49dd8:	mov	w0, #0x84b                 	// #2123
   49ddc:	mov	w1, #0x8ce                 	// #2254
   49de0:	csel	w1, w0, w1, eq  // eq = none
   49de4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49de8:	tst	x0, #0x800
   49dec:	mov	w0, #0x84c                 	// #2124
   49df0:	mov	w1, #0x8cf                 	// #2255
   49df4:	csel	w1, w0, w1, eq  // eq = none
   49df8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49dfc:	tbnz	w0, #31, 4cd4c <aarch64_opcode_lookup@@Base+0x5898>
   49e00:	tbnz	w0, #10, 49e30 <aarch64_opcode_lookup@@Base+0x297c>
   49e04:	tbnz	w0, #11, 49e1c <aarch64_opcode_lookup@@Base+0x2968>
   49e08:	tst	x0, #0x1000
   49e0c:	mov	w0, #0x8a6                 	// #2214
   49e10:	mov	w1, #0x8f5                 	// #2293
   49e14:	csel	w1, w0, w1, eq  // eq = none
   49e18:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49e1c:	tst	x0, #0x1000
   49e20:	mov	w0, #0x89e                 	// #2206
   49e24:	mov	w1, #0x8f0                 	// #2288
   49e28:	csel	w1, w0, w1, eq  // eq = none
   49e2c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49e30:	tbnz	w0, #11, 49e48 <aarch64_opcode_lookup@@Base+0x2994>
   49e34:	tst	x0, #0x1000
   49e38:	mov	w0, #0x8a7                 	// #2215
   49e3c:	mov	w1, #0x8f6                 	// #2294
   49e40:	csel	w1, w0, w1, eq  // eq = none
   49e44:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49e48:	tst	x0, #0x1000
   49e4c:	mov	w0, #0x89f                 	// #2207
   49e50:	mov	w1, #0x8f1                 	// #2289
   49e54:	csel	w1, w0, w1, eq  // eq = none
   49e58:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49e5c:	tbnz	w0, #21, 49eac <aarch64_opcode_lookup@@Base+0x29f8>
   49e60:	tbnz	w0, #31, 4cd54 <aarch64_opcode_lookup@@Base+0x58a0>
   49e64:	tbnz	w0, #10, 49e94 <aarch64_opcode_lookup@@Base+0x29e0>
   49e68:	tbnz	w0, #11, 49e80 <aarch64_opcode_lookup@@Base+0x29cc>
   49e6c:	tst	x0, #0x1000
   49e70:	mov	w0, #0x8b6                 	// #2230
   49e74:	mov	w1, #0x91f                 	// #2335
   49e78:	csel	w1, w0, w1, eq  // eq = none
   49e7c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49e80:	tst	x0, #0x1000
   49e84:	mov	w0, #0x902                 	// #2306
   49e88:	mov	w1, #0x920                 	// #2336
   49e8c:	csel	w1, w0, w1, eq  // eq = none
   49e90:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49e94:	tbnz	w0, #11, 4cd5c <aarch64_opcode_lookup@@Base+0x58a8>
   49e98:	tst	x0, #0x1000
   49e9c:	mov	w0, #0x8b7                 	// #2231
   49ea0:	mov	w1, #0x91e                 	// #2334
   49ea4:	csel	w1, w0, w1, eq  // eq = none
   49ea8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49eac:	tbnz	w0, #22, 4cd64 <aarch64_opcode_lookup@@Base+0x58b0>
   49eb0:	cmp	w0, #0x0
   49eb4:	mov	w0, #0x827                 	// #2087
   49eb8:	mov	w1, #0x697                 	// #1687
   49ebc:	csel	w1, w0, w1, ge  // ge = tcont
   49ec0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49ec4:	tbnz	w0, #15, 49fbc <aarch64_opcode_lookup@@Base+0x2b08>
   49ec8:	tbnz	w0, #21, 49f48 <aarch64_opcode_lookup@@Base+0x2a94>
   49ecc:	tbnz	w0, #31, 49f34 <aarch64_opcode_lookup@@Base+0x2a80>
   49ed0:	tbnz	w0, #10, 49f04 <aarch64_opcode_lookup@@Base+0x2a50>
   49ed4:	tbnz	w0, #11, 49eec <aarch64_opcode_lookup@@Base+0x2a38>
   49ed8:	tst	x0, #0x1000
   49edc:	mov	w0, #0x888                 	// #2184
   49ee0:	mov	w1, #0x86c                 	// #2156
   49ee4:	csel	w1, w0, w1, eq  // eq = none
   49ee8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49eec:	tbnz	w0, #12, 4cd6c <aarch64_opcode_lookup@@Base+0x58b8>
   49ef0:	tst	x0, #0x400000
   49ef4:	mov	w0, #0x91b                 	// #2331
   49ef8:	mov	w1, #0x840                 	// #2112
   49efc:	csel	w1, w0, w1, eq  // eq = none
   49f00:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49f04:	tbnz	w0, #11, 49f1c <aarch64_opcode_lookup@@Base+0x2a68>
   49f08:	tst	x0, #0x1000
   49f0c:	mov	w0, #0x88b                 	// #2187
   49f10:	mov	w1, #0x86f                 	// #2159
   49f14:	csel	w1, w0, w1, eq  // eq = none
   49f18:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49f1c:	tbnz	w0, #12, 4cd74 <aarch64_opcode_lookup@@Base+0x58c0>
   49f20:	tst	x0, #0x400000
   49f24:	mov	w0, #0x91c                 	// #2332
   49f28:	mov	w1, #0x841                 	// #2113
   49f2c:	csel	w1, w0, w1, eq  // eq = none
   49f30:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49f34:	tst	x0, #0x800000
   49f38:	mov	w0, #0x69e                 	// #1694
   49f3c:	mov	w1, #0x667                 	// #1639
   49f40:	csel	w1, w0, w1, eq  // eq = none
   49f44:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49f48:	tbnz	w0, #31, 49fa8 <aarch64_opcode_lookup@@Base+0x2af4>
   49f4c:	tbnz	w0, #10, 49f7c <aarch64_opcode_lookup@@Base+0x2ac8>
   49f50:	tbnz	w0, #11, 49f68 <aarch64_opcode_lookup@@Base+0x2ab4>
   49f54:	tst	x0, #0x1000
   49f58:	mov	w0, #0x800                 	// #2048
   49f5c:	mov	w1, #0x8c6                 	// #2246
   49f60:	csel	w1, w0, w1, eq  // eq = none
   49f64:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49f68:	tst	x0, #0x1000
   49f6c:	mov	w0, #0x842                 	// #2114
   49f70:	mov	w1, #0x846                 	// #2118
   49f74:	csel	w1, w0, w1, eq  // eq = none
   49f78:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49f7c:	tbnz	w0, #11, 49f94 <aarch64_opcode_lookup@@Base+0x2ae0>
   49f80:	tst	x0, #0x1000
   49f84:	mov	w0, #0x801                 	// #2049
   49f88:	mov	w1, #0x8c7                 	// #2247
   49f8c:	csel	w1, w0, w1, eq  // eq = none
   49f90:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49f94:	tst	x0, #0x1000
   49f98:	mov	w0, #0x843                 	// #2115
   49f9c:	mov	w1, #0x847                 	// #2119
   49fa0:	csel	w1, w0, w1, eq  // eq = none
   49fa4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49fa8:	tst	x0, #0x800000
   49fac:	mov	w0, #0x69f                 	// #1695
   49fb0:	mov	w1, #0x668                 	// #1640
   49fb4:	csel	w1, w0, w1, eq  // eq = none
   49fb8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49fbc:	tbnz	w0, #21, 4a04c <aarch64_opcode_lookup@@Base+0x2b98>
   49fc0:	tbnz	w0, #31, 4a020 <aarch64_opcode_lookup@@Base+0x2b6c>
   49fc4:	tbnz	w0, #10, 49ff4 <aarch64_opcode_lookup@@Base+0x2b40>
   49fc8:	tbnz	w0, #11, 49fe0 <aarch64_opcode_lookup@@Base+0x2b2c>
   49fcc:	tst	x0, #0x1000
   49fd0:	mov	w0, #0x8b8                 	// #2232
   49fd4:	mov	w1, #0x8b1                 	// #2225
   49fd8:	csel	w1, w0, w1, eq  // eq = none
   49fdc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49fe0:	tst	x0, #0x1000
   49fe4:	mov	w0, #0x8b5                 	// #2229
   49fe8:	mov	w1, #0x848                 	// #2120
   49fec:	csel	w1, w0, w1, eq  // eq = none
   49ff0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   49ff4:	tbnz	w0, #11, 4a00c <aarch64_opcode_lookup@@Base+0x2b58>
   49ff8:	tst	x0, #0x1000
   49ffc:	mov	w0, #0x905                 	// #2309
   4a000:	mov	w1, #0x85a                 	// #2138
   4a004:	csel	w1, w0, w1, eq  // eq = none
   4a008:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a00c:	tst	x0, #0x1000
   4a010:	mov	w0, #0x901                 	// #2305
   4a014:	mov	w1, #0x8cb                 	// #2251
   4a018:	csel	w1, w0, w1, eq  // eq = none
   4a01c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a020:	tbnz	w0, #22, 4a038 <aarch64_opcode_lookup@@Base+0x2b84>
   4a024:	tst	x0, #0x800000
   4a028:	mov	w0, #0x6fe                 	// #1790
   4a02c:	mov	w1, #0x6f0                 	// #1776
   4a030:	csel	w1, w0, w1, eq  // eq = none
   4a034:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a038:	tst	x0, #0x800000
   4a03c:	mov	w0, #0x6a0                 	// #1696
   4a040:	mov	w1, #0x669                 	// #1641
   4a044:	csel	w1, w0, w1, eq  // eq = none
   4a048:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a04c:	tbnz	w0, #22, 4a090 <aarch64_opcode_lookup@@Base+0x2bdc>
   4a050:	tbnz	w0, #23, 4cd7c <aarch64_opcode_lookup@@Base+0x58c8>
   4a054:	tbnz	w0, #31, 4cd84 <aarch64_opcode_lookup@@Base+0x58d0>
   4a058:	tbnz	w0, #10, 4a078 <aarch64_opcode_lookup@@Base+0x2bc4>
   4a05c:	tbnz	w0, #12, 4cd8c <aarch64_opcode_lookup@@Base+0x58d8>
   4a060:	tbnz	w0, #16, 4cd94 <aarch64_opcode_lookup@@Base+0x58e0>
   4a064:	tst	x0, #0x20000
   4a068:	mov	w0, #0x91a                 	// #2330
   4a06c:	mov	w1, #0x918                 	// #2328
   4a070:	csel	w1, w0, w1, eq  // eq = none
   4a074:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a078:	tbnz	w0, #12, 4cd9c <aarch64_opcode_lookup@@Base+0x58e8>
   4a07c:	tst	x0, #0x20000
   4a080:	mov	w0, #0x919                 	// #2329
   4a084:	mov	w1, #0x917                 	// #2327
   4a088:	csel	w1, w0, w1, eq  // eq = none
   4a08c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a090:	tst	x0, #0x800000
   4a094:	mov	w0, #0x6a1                 	// #1697
   4a098:	mov	w1, #0x66a                 	// #1642
   4a09c:	csel	w1, w0, w1, eq  // eq = none
   4a0a0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a0a4:	tbnz	w0, #15, 4a500 <aarch64_opcode_lookup@@Base+0x304c>
   4a0a8:	tbnz	w0, #14, 4a2b4 <aarch64_opcode_lookup@@Base+0x2e00>
   4a0ac:	tbnz	w0, #13, 4a1b0 <aarch64_opcode_lookup@@Base+0x2cfc>
   4a0b0:	tbnz	w0, #30, 4a170 <aarch64_opcode_lookup@@Base+0x2cbc>
   4a0b4:	tbnz	w0, #21, 4a0e4 <aarch64_opcode_lookup@@Base+0x2c30>
   4a0b8:	tbnz	w0, #31, 4a0d0 <aarch64_opcode_lookup@@Base+0x2c1c>
   4a0bc:	tst	x0, #0x10
   4a0c0:	mov	w0, #0x52a                 	// #1322
   4a0c4:	mov	w1, #0x52d                 	// #1325
   4a0c8:	csel	w1, w0, w1, eq  // eq = none
   4a0cc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a0d0:	tst	x0, #0x800000
   4a0d4:	mov	w0, #0x60d                 	// #1549
   4a0d8:	mov	w1, #0x609                 	// #1545
   4a0dc:	csel	w1, w0, w1, eq  // eq = none
   4a0e0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a0e4:	tbnz	w0, #31, 4a164 <aarch64_opcode_lookup@@Base+0x2cb0>
   4a0e8:	tbnz	w0, #4, 4a128 <aarch64_opcode_lookup@@Base+0x2c74>
   4a0ec:	tbnz	w0, #10, 4a10c <aarch64_opcode_lookup@@Base+0x2c58>
   4a0f0:	tbnz	w0, #11, 4a100 <aarch64_opcode_lookup@@Base+0x2c4c>
   4a0f4:	ubfx	x0, x0, #12, #1
   4a0f8:	add	w1, w0, #0x90a
   4a0fc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a100:	ubfx	x0, x0, #12, #1
   4a104:	add	w1, w0, #0x910
   4a108:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a10c:	tbnz	w0, #11, 4a11c <aarch64_opcode_lookup@@Base+0x2c68>
   4a110:	ubfx	x0, x0, #12, #1
   4a114:	add	w1, w0, #0x7ea
   4a118:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a11c:	ubfx	x0, x0, #12, #1
   4a120:	add	w1, w0, #0x7e6
   4a124:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a128:	tbnz	w0, #10, 4a148 <aarch64_opcode_lookup@@Base+0x2c94>
   4a12c:	tbnz	w0, #11, 4a13c <aarch64_opcode_lookup@@Base+0x2c88>
   4a130:	ubfx	x0, x0, #12, #1
   4a134:	add	w1, w0, #0x90c
   4a138:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a13c:	ubfx	x0, x0, #12, #1
   4a140:	add	w1, w0, #0x90e
   4a144:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a148:	tbnz	w0, #11, 4a158 <aarch64_opcode_lookup@@Base+0x2ca4>
   4a14c:	ubfx	x0, x0, #12, #1
   4a150:	add	w1, w0, #0x7e4
   4a154:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a158:	ubfx	x0, x0, #12, #1
   4a15c:	add	w1, w0, #0x7e8
   4a160:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a164:	ubfx	x0, x0, #23, #1
   4a168:	add	w1, w0, #0x961
   4a16c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a170:	tbnz	w0, #31, 4cda4 <aarch64_opcode_lookup@@Base+0x58f0>
   4a174:	mov	w1, #0x59e                 	// #1438
   4a178:	tbnz	w0, #21, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4a17c:	tbnz	w0, #10, 4a198 <aarch64_opcode_lookup@@Base+0x2ce4>
   4a180:	tbz	w0, #11, 4cdac <aarch64_opcode_lookup@@Base+0x58f8>
   4a184:	tst	x0, #0x1000
   4a188:	mov	w0, #0x5a7                 	// #1447
   4a18c:	mov	w1, #0x5b4                 	// #1460
   4a190:	csel	w1, w0, w1, eq  // eq = none
   4a194:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a198:	tbz	w0, #11, 4cdb4 <aarch64_opcode_lookup@@Base+0x5900>
   4a19c:	tst	x0, #0x1000
   4a1a0:	mov	w0, #0x5c7                 	// #1479
   4a1a4:	mov	w1, #0x5be                 	// #1470
   4a1a8:	csel	w1, w0, w1, eq  // eq = none
   4a1ac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a1b0:	tbnz	w0, #21, 4a270 <aarch64_opcode_lookup@@Base+0x2dbc>
   4a1b4:	tbnz	w0, #30, 4a1e4 <aarch64_opcode_lookup@@Base+0x2d30>
   4a1b8:	tbnz	w0, #31, 4a1d0 <aarch64_opcode_lookup@@Base+0x2d1c>
   4a1bc:	tst	x0, #0x10
   4a1c0:	mov	w0, #0x53b                 	// #1339
   4a1c4:	mov	w1, #0x535                 	// #1333
   4a1c8:	csel	w1, w0, w1, eq  // eq = none
   4a1cc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a1d0:	tst	x0, #0x800000
   4a1d4:	mov	w0, #0x60c                 	// #1548
   4a1d8:	mov	w1, #0x608                 	// #1544
   4a1dc:	csel	w1, w0, w1, eq  // eq = none
   4a1e0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a1e4:	tbnz	w0, #31, 4a258 <aarch64_opcode_lookup@@Base+0x2da4>
   4a1e8:	tbnz	w0, #16, 4a228 <aarch64_opcode_lookup@@Base+0x2d74>
   4a1ec:	tbnz	w0, #17, 4a210 <aarch64_opcode_lookup@@Base+0x2d5c>
   4a1f0:	tbnz	w0, #18, 4cdbc <aarch64_opcode_lookup@@Base+0x5908>
   4a1f4:	tbnz	w0, #19, 4cdc4 <aarch64_opcode_lookup@@Base+0x5910>
   4a1f8:	tbz	w0, #20, 4cdcc <aarch64_opcode_lookup@@Base+0x5918>
   4a1fc:	tst	x0, #0x10
   4a200:	mov	w0, #0x56f                 	// #1391
   4a204:	mov	w1, #0x571                 	// #1393
   4a208:	csel	w1, w0, w1, eq  // eq = none
   4a20c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a210:	tbz	w0, #18, 4cdd4 <aarch64_opcode_lookup@@Base+0x5920>
   4a214:	tst	x0, #0x80000
   4a218:	mov	w0, #0x597                 	// #1431
   4a21c:	mov	w1, #0x5b3                 	// #1459
   4a220:	csel	w1, w0, w1, eq  // eq = none
   4a224:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a228:	tbnz	w0, #17, 4a240 <aarch64_opcode_lookup@@Base+0x2d8c>
   4a22c:	tbnz	w0, #18, 4cddc <aarch64_opcode_lookup@@Base+0x5928>
   4a230:	tst	x0, #0x10
   4a234:	cset	w0, eq  // eq = none
   4a238:	add	w1, w0, #0x573
   4a23c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a240:	tbz	w0, #18, 4cde4 <aarch64_opcode_lookup@@Base+0x5930>
   4a244:	tst	x0, #0x80000
   4a248:	mov	w0, #0x59d                 	// #1437
   4a24c:	mov	w1, #0x5bd                 	// #1469
   4a250:	csel	w1, w0, w1, eq  // eq = none
   4a254:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a258:	tbnz	w0, #22, 4cdec <aarch64_opcode_lookup@@Base+0x5938>
   4a25c:	tst	x0, #0x800000
   4a260:	mov	w0, #0x8c5                 	// #2245
   4a264:	mov	w1, #0x8c1                 	// #2241
   4a268:	csel	w1, w0, w1, eq  // eq = none
   4a26c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a270:	mov	w1, #0x5a2                 	// #1442
   4a274:	tbnz	w0, #30, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4a278:	tbnz	w0, #31, 4a2a8 <aarch64_opcode_lookup@@Base+0x2df4>
   4a27c:	tbnz	w0, #4, 4a294 <aarch64_opcode_lookup@@Base+0x2de0>
   4a280:	tst	x0, #0x1000
   4a284:	mov	w0, #0x54a                 	// #1354
   4a288:	mov	w1, #0x913                 	// #2323
   4a28c:	csel	w1, w0, w1, eq  // eq = none
   4a290:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a294:	tst	x0, #0x1000
   4a298:	mov	w0, #0x54b                 	// #1355
   4a29c:	mov	w1, #0x912                 	// #2322
   4a2a0:	csel	w1, w0, w1, eq  // eq = none
   4a2a4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a2a8:	ubfx	x0, x0, #23, #1
   4a2ac:	add	w1, w0, #0x965
   4a2b0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a2b4:	tbnz	w0, #30, 4a448 <aarch64_opcode_lookup@@Base+0x2f94>
   4a2b8:	tbnz	w0, #21, 4a3ec <aarch64_opcode_lookup@@Base+0x2f38>
   4a2bc:	tbnz	w0, #22, 4a368 <aarch64_opcode_lookup@@Base+0x2eb4>
   4a2c0:	tbnz	w0, #23, 4a320 <aarch64_opcode_lookup@@Base+0x2e6c>
   4a2c4:	tbnz	w0, #31, 4a30c <aarch64_opcode_lookup@@Base+0x2e58>
   4a2c8:	tbnz	w0, #9, 4a2f8 <aarch64_opcode_lookup@@Base+0x2e44>
   4a2cc:	tbnz	w0, #20, 4a2e4 <aarch64_opcode_lookup@@Base+0x2e30>
   4a2d0:	tst	x0, #0x10
   4a2d4:	mov	w0, #0x505                 	// #1285
   4a2d8:	mov	w1, #0x511                 	// #1297
   4a2dc:	csel	w1, w0, w1, eq  // eq = none
   4a2e0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a2e4:	tst	x0, #0x80000
   4a2e8:	mov	w0, #0x513                 	// #1299
   4a2ec:	mov	w1, #0x517                 	// #1303
   4a2f0:	csel	w1, w0, w1, eq  // eq = none
   4a2f4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a2f8:	tst	x0, #0x10
   4a2fc:	mov	w0, #0x55c                 	// #1372
   4a300:	mov	w1, #0x71d                 	// #1821
   4a304:	csel	w1, w0, w1, eq  // eq = none
   4a308:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a30c:	tst	x0, #0x2000
   4a310:	mov	w0, #0x623                 	// #1571
   4a314:	mov	w1, #0x687                 	// #1671
   4a318:	csel	w1, w0, w1, eq  // eq = none
   4a31c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a320:	tbnz	w0, #31, 4a354 <aarch64_opcode_lookup@@Base+0x2ea0>
   4a324:	tbnz	w0, #9, 4a340 <aarch64_opcode_lookup@@Base+0x2e8c>
   4a328:	tbnz	w0, #20, 4cdf4 <aarch64_opcode_lookup@@Base+0x5940>
   4a32c:	tst	x0, #0x10
   4a330:	mov	w0, #0x6dd                 	// #1757
   4a334:	mov	w1, #0x6d8                 	// #1752
   4a338:	csel	w1, w0, w1, eq  // eq = none
   4a33c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a340:	tst	x0, #0x10
   4a344:	mov	w0, #0x6d5                 	// #1749
   4a348:	mov	w1, #0x6d2                 	// #1746
   4a34c:	csel	w1, w0, w1, eq  // eq = none
   4a350:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a354:	tst	x0, #0x2000
   4a358:	mov	w0, #0x617                 	// #1559
   4a35c:	mov	w1, #0x67b                 	// #1659
   4a360:	csel	w1, w0, w1, eq  // eq = none
   4a364:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a368:	tbnz	w0, #23, 4a3a4 <aarch64_opcode_lookup@@Base+0x2ef0>
   4a36c:	tbnz	w0, #31, 4a390 <aarch64_opcode_lookup@@Base+0x2edc>
   4a370:	tbnz	w0, #4, 4cdfc <aarch64_opcode_lookup@@Base+0x5948>
   4a374:	tbnz	w0, #9, 4ce04 <aarch64_opcode_lookup@@Base+0x5950>
   4a378:	tbz	w0, #20, 4ce0c <aarch64_opcode_lookup@@Base+0x5958>
   4a37c:	tst	x0, #0x80000
   4a380:	mov	w0, #0x514                 	// #1300
   4a384:	mov	w1, #0x518                 	// #1304
   4a388:	csel	w1, w0, w1, eq  // eq = none
   4a38c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a390:	tst	x0, #0x2000
   4a394:	mov	w0, #0x636                 	// #1590
   4a398:	mov	w1, #0x69a                 	// #1690
   4a39c:	csel	w1, w0, w1, eq  // eq = none
   4a3a0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a3a4:	tbnz	w0, #31, 4a3d8 <aarch64_opcode_lookup@@Base+0x2f24>
   4a3a8:	tbnz	w0, #4, 4a3c4 <aarch64_opcode_lookup@@Base+0x2f10>
   4a3ac:	tbnz	w0, #9, 4ce14 <aarch64_opcode_lookup@@Base+0x5960>
   4a3b0:	tst	x0, #0x100000
   4a3b4:	mov	w0, #0x6de                 	// #1758
   4a3b8:	mov	w1, #0x516                 	// #1302
   4a3bc:	csel	w1, w0, w1, eq  // eq = none
   4a3c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a3c4:	tst	x0, #0x200
   4a3c8:	mov	w0, #0x6d9                 	// #1753
   4a3cc:	mov	w1, #0x6d3                 	// #1747
   4a3d0:	csel	w1, w0, w1, eq  // eq = none
   4a3d4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a3d8:	tst	x0, #0x2000
   4a3dc:	mov	w0, #0x619                 	// #1561
   4a3e0:	mov	w1, #0x67f                 	// #1663
   4a3e4:	csel	w1, w0, w1, eq  // eq = none
   4a3e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a3ec:	tbnz	w0, #13, 4a41c <aarch64_opcode_lookup@@Base+0x2f68>
   4a3f0:	tbnz	w0, #22, 4a408 <aarch64_opcode_lookup@@Base+0x2f54>
   4a3f4:	tst	x0, #0x800000
   4a3f8:	mov	w0, #0x624                 	// #1572
   4a3fc:	mov	w1, #0x618                 	// #1560
   4a400:	csel	w1, w0, w1, eq  // eq = none
   4a404:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a408:	tst	x0, #0x800000
   4a40c:	mov	w0, #0x637                 	// #1591
   4a410:	mov	w1, #0x5e9                 	// #1513
   4a414:	csel	w1, w0, w1, eq  // eq = none
   4a418:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a41c:	tbnz	w0, #22, 4a434 <aarch64_opcode_lookup@@Base+0x2f80>
   4a420:	tst	x0, #0x800000
   4a424:	mov	w0, #0x689                 	// #1673
   4a428:	mov	w1, #0x67d                 	// #1661
   4a42c:	csel	w1, w0, w1, eq  // eq = none
   4a430:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a434:	tst	x0, #0x800000
   4a438:	mov	w0, #0x69c                 	// #1692
   4a43c:	mov	w1, #0x665                 	// #1637
   4a440:	csel	w1, w0, w1, eq  // eq = none
   4a444:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a448:	tbnz	w0, #13, 4a488 <aarch64_opcode_lookup@@Base+0x2fd4>
   4a44c:	tbnz	w0, #31, 4a46c <aarch64_opcode_lookup@@Base+0x2fb8>
   4a450:	mov	w1, #0x5b0                 	// #1456
   4a454:	tbnz	w0, #21, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4a458:	tst	x0, #0x10
   4a45c:	mov	w0, #0x570                 	// #1392
   4a460:	mov	w1, #0x572                 	// #1394
   4a464:	csel	w1, w0, w1, eq  // eq = none
   4a468:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a46c:	tbz	w0, #22, 4ce1c <aarch64_opcode_lookup@@Base+0x5968>
   4a470:	tbz	w0, #21, 4ce24 <aarch64_opcode_lookup@@Base+0x5970>
   4a474:	tst	x0, #0x800000
   4a478:	mov	w0, #0x76f                 	// #1903
   4a47c:	mov	w1, #0x758                 	// #1880
   4a480:	csel	w1, w0, w1, eq  // eq = none
   4a484:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a488:	tbnz	w0, #21, 4a4d0 <aarch64_opcode_lookup@@Base+0x301c>
   4a48c:	tbnz	w0, #31, 4a4a4 <aarch64_opcode_lookup@@Base+0x2ff0>
   4a490:	tst	x0, #0x10
   4a494:	mov	w0, #0x56e                 	// #1390
   4a498:	mov	w1, #0x576                 	// #1398
   4a49c:	csel	w1, w0, w1, eq  // eq = none
   4a4a0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a4a4:	tbnz	w0, #22, 4a4bc <aarch64_opcode_lookup@@Base+0x3008>
   4a4a8:	tst	x0, #0x800000
   4a4ac:	mov	w0, #0x793                 	// #1939
   4a4b0:	mov	w1, #0x78f                 	// #1935
   4a4b4:	csel	w1, w0, w1, eq  // eq = none
   4a4b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a4bc:	tst	x0, #0x800000
   4a4c0:	mov	w0, #0x783                 	// #1923
   4a4c4:	mov	w1, #0x77f                 	// #1919
   4a4c8:	csel	w1, w0, w1, eq  // eq = none
   4a4cc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a4d0:	tbz	w0, #31, 4ce2c <aarch64_opcode_lookup@@Base+0x5978>
   4a4d4:	tbnz	w0, #22, 4a4ec <aarch64_opcode_lookup@@Base+0x3038>
   4a4d8:	tst	x0, #0x800000
   4a4dc:	mov	w0, #0x77b                 	// #1915
   4a4e0:	mov	w1, #0x777                 	// #1911
   4a4e4:	csel	w1, w0, w1, eq  // eq = none
   4a4e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a4ec:	tst	x0, #0x800000
   4a4f0:	mov	w0, #0x78b                 	// #1931
   4a4f4:	mov	w1, #0x787                 	// #1927
   4a4f8:	csel	w1, w0, w1, eq  // eq = none
   4a4fc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a500:	tbnz	w0, #21, 4a9a0 <aarch64_opcode_lookup@@Base+0x34ec>
   4a504:	tbnz	w0, #30, 4a648 <aarch64_opcode_lookup@@Base+0x3194>
   4a508:	tbnz	w0, #14, 4a580 <aarch64_opcode_lookup@@Base+0x30cc>
   4a50c:	tbnz	w0, #13, 4a524 <aarch64_opcode_lookup@@Base+0x3070>
   4a510:	tst	x0, #0x10
   4a514:	mov	w0, #0x527                 	// #1319
   4a518:	mov	w1, #0x53e                 	// #1342
   4a51c:	csel	w1, w0, w1, eq  // eq = none
   4a520:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a524:	tbnz	w0, #20, 4a554 <aarch64_opcode_lookup@@Base+0x30a0>
   4a528:	tbnz	w0, #22, 4a540 <aarch64_opcode_lookup@@Base+0x308c>
   4a52c:	tst	x0, #0x800000
   4a530:	mov	w0, #0x62a                 	// #1578
   4a534:	mov	w1, #0x61d                 	// #1565
   4a538:	csel	w1, w0, w1, eq  // eq = none
   4a53c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a540:	tst	x0, #0x800000
   4a544:	mov	w0, #0x63d                 	// #1597
   4a548:	mov	w1, #0x61f                 	// #1567
   4a54c:	csel	w1, w0, w1, eq  // eq = none
   4a550:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a554:	tbnz	w0, #22, 4a56c <aarch64_opcode_lookup@@Base+0x30b8>
   4a558:	tst	x0, #0x800000
   4a55c:	mov	w0, #0x6af                 	// #1711
   4a560:	mov	w1, #0x6ac                 	// #1708
   4a564:	csel	w1, w0, w1, eq  // eq = none
   4a568:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a56c:	tst	x0, #0x800000
   4a570:	mov	w0, #0x6b2                 	// #1714
   4a574:	mov	w1, #0x6ae                 	// #1710
   4a578:	csel	w1, w0, w1, eq  // eq = none
   4a57c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a580:	tbnz	w0, #31, 4a5ec <aarch64_opcode_lookup@@Base+0x3138>
   4a584:	tbnz	w0, #4, 4a5e0 <aarch64_opcode_lookup@@Base+0x312c>
   4a588:	tbnz	w0, #20, 4a598 <aarch64_opcode_lookup@@Base+0x30e4>
   4a58c:	ubfx	x0, x0, #22, #1
   4a590:	add	w1, w0, #0x519
   4a594:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a598:	tbnz	w0, #16, 4a5c8 <aarch64_opcode_lookup@@Base+0x3114>
   4a59c:	tbz	w0, #19, 4ce34 <aarch64_opcode_lookup@@Base+0x5980>
   4a5a0:	tbnz	w0, #10, 4ce3c <aarch64_opcode_lookup@@Base+0x5988>
   4a5a4:	tbnz	w0, #12, 4a5bc <aarch64_opcode_lookup@@Base+0x3108>
   4a5a8:	tst	x0, #0x2000
   4a5ac:	mov	w0, #0x6e1                 	// #1761
   4a5b0:	mov	w1, #0x700                 	// #1792
   4a5b4:	csel	w1, w0, w1, eq  // eq = none
   4a5b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a5bc:	ubfx	x0, x0, #22, #1
   4a5c0:	add	w1, w0, #0x706
   4a5c4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a5c8:	tbnz	w0, #10, 4ce44 <aarch64_opcode_lookup@@Base+0x5990>
   4a5cc:	tst	x0, #0x1000
   4a5d0:	mov	w0, #0x701                 	// #1793
   4a5d4:	mov	w1, #0x705                 	// #1797
   4a5d8:	csel	w1, w0, w1, eq  // eq = none
   4a5dc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a5e0:	ubfx	x0, x0, #22, #1
   4a5e4:	add	w1, w0, #0x51b
   4a5e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a5ec:	tbnz	w0, #13, 4a61c <aarch64_opcode_lookup@@Base+0x3168>
   4a5f0:	tbnz	w0, #22, 4a608 <aarch64_opcode_lookup@@Base+0x3154>
   4a5f4:	tst	x0, #0x800000
   4a5f8:	mov	w0, #0x6ba                 	// #1722
   4a5fc:	mov	w1, #0x6b6                 	// #1718
   4a600:	csel	w1, w0, w1, eq  // eq = none
   4a604:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a608:	tst	x0, #0x800000
   4a60c:	mov	w0, #0x64e                 	// #1614
   4a610:	mov	w1, #0x64a                 	// #1610
   4a614:	csel	w1, w0, w1, eq  // eq = none
   4a618:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a61c:	tbnz	w0, #22, 4a634 <aarch64_opcode_lookup@@Base+0x3180>
   4a620:	tst	x0, #0x800000
   4a624:	mov	w0, #0x6bb                 	// #1723
   4a628:	mov	w1, #0x6b7                 	// #1719
   4a62c:	csel	w1, w0, w1, eq  // eq = none
   4a630:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a634:	tst	x0, #0x800000
   4a638:	mov	w0, #0x64f                 	// #1615
   4a63c:	mov	w1, #0x64b                 	// #1611
   4a640:	csel	w1, w0, w1, eq  // eq = none
   4a644:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a648:	tbnz	w0, #13, 4a774 <aarch64_opcode_lookup@@Base+0x32c0>
   4a64c:	tbnz	w0, #31, 4a75c <aarch64_opcode_lookup@@Base+0x32a8>
   4a650:	tbnz	w0, #14, 4a748 <aarch64_opcode_lookup@@Base+0x3294>
   4a654:	tbnz	w0, #19, 4a6b8 <aarch64_opcode_lookup@@Base+0x3204>
   4a658:	tbnz	w0, #20, 4ce4c <aarch64_opcode_lookup@@Base+0x5998>
   4a65c:	tbnz	w0, #16, 4a68c <aarch64_opcode_lookup@@Base+0x31d8>
   4a660:	tbnz	w0, #17, 4a678 <aarch64_opcode_lookup@@Base+0x31c4>
   4a664:	tst	x0, #0x40000
   4a668:	mov	w0, #0x565                 	// #1381
   4a66c:	mov	w1, #0x594                 	// #1428
   4a670:	csel	w1, w0, w1, eq  // eq = none
   4a674:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a678:	tst	x0, #0x40000
   4a67c:	mov	w0, #0x5a8                 	// #1448
   4a680:	mov	w1, #0x592                 	// #1426
   4a684:	csel	w1, w0, w1, eq  // eq = none
   4a688:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a68c:	tbnz	w0, #17, 4a6a4 <aarch64_opcode_lookup@@Base+0x31f0>
   4a690:	tst	x0, #0x40000
   4a694:	mov	w0, #0x5c2                 	// #1474
   4a698:	mov	w1, #0x59a                 	// #1434
   4a69c:	csel	w1, w0, w1, eq  // eq = none
   4a6a0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a6a4:	tst	x0, #0x40000
   4a6a8:	mov	w0, #0x5c4                 	// #1476
   4a6ac:	mov	w1, #0x598                 	// #1432
   4a6b0:	csel	w1, w0, w1, eq  // eq = none
   4a6b4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a6b8:	tbnz	w0, #16, 4a704 <aarch64_opcode_lookup@@Base+0x3250>
   4a6bc:	tbnz	w0, #17, 4a6ec <aarch64_opcode_lookup@@Base+0x3238>
   4a6c0:	tbnz	w0, #18, 4a6d8 <aarch64_opcode_lookup@@Base+0x3224>
   4a6c4:	tst	x0, #0x100000
   4a6c8:	mov	w0, #0x560                 	// #1376
   4a6cc:	mov	w1, #0x566                 	// #1382
   4a6d0:	csel	w1, w0, w1, eq  // eq = none
   4a6d4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a6d8:	tst	x0, #0x100000
   4a6dc:	mov	w0, #0x58e                 	// #1422
   4a6e0:	mov	w1, #0x595                 	// #1429
   4a6e4:	csel	w1, w0, w1, eq  // eq = none
   4a6e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a6ec:	tbnz	w0, #18, 4ce54 <aarch64_opcode_lookup@@Base+0x59a0>
   4a6f0:	tst	x0, #0x100000
   4a6f4:	mov	w0, #0x5ad                 	// #1453
   4a6f8:	mov	w1, #0x5a9                 	// #1449
   4a6fc:	csel	w1, w0, w1, eq  // eq = none
   4a700:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a704:	tbnz	w0, #17, 4a734 <aarch64_opcode_lookup@@Base+0x3280>
   4a708:	tbnz	w0, #18, 4a720 <aarch64_opcode_lookup@@Base+0x326c>
   4a70c:	tst	x0, #0x100000
   4a710:	mov	w0, #0x5bf                 	// #1471
   4a714:	mov	w1, #0x5c3                 	// #1475
   4a718:	csel	w1, w0, w1, eq  // eq = none
   4a71c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a720:	tst	x0, #0x100000
   4a724:	mov	w0, #0x58d                 	// #1421
   4a728:	mov	w1, #0x59b                 	// #1435
   4a72c:	csel	w1, w0, w1, eq  // eq = none
   4a730:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a734:	tst	x0, #0x40000
   4a738:	mov	w0, #0x5c5                 	// #1477
   4a73c:	mov	w1, #0x599                 	// #1433
   4a740:	csel	w1, w0, w1, eq  // eq = none
   4a744:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a748:	tst	x0, #0x10
   4a74c:	mov	w0, #0x577                 	// #1399
   4a750:	mov	w1, #0x562                 	// #1378
   4a754:	csel	w1, w0, w1, eq  // eq = none
   4a758:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a75c:	tbnz	w0, #22, 4ce5c <aarch64_opcode_lookup@@Base+0x59a8>
   4a760:	tst	x0, #0x800000
   4a764:	mov	w0, #0x769                 	// #1897
   4a768:	mov	w1, #0x754                 	// #1876
   4a76c:	csel	w1, w0, w1, eq  // eq = none
   4a770:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a774:	tbnz	w0, #14, 4a96c <aarch64_opcode_lookup@@Base+0x34b8>
   4a778:	tbnz	w0, #31, 4a940 <aarch64_opcode_lookup@@Base+0x348c>
   4a77c:	tbnz	w0, #16, 4a870 <aarch64_opcode_lookup@@Base+0x33bc>
   4a780:	tbnz	w0, #19, 4a7ec <aarch64_opcode_lookup@@Base+0x3338>
   4a784:	tbnz	w0, #17, 4a7bc <aarch64_opcode_lookup@@Base+0x3308>
   4a788:	tbnz	w0, #18, 4a7a0 <aarch64_opcode_lookup@@Base+0x32ec>
   4a78c:	tst	x0, #0x100000
   4a790:	mov	w0, #0x5b9                 	// #1465
   4a794:	mov	w1, #0x713                 	// #1811
   4a798:	csel	w1, w0, w1, eq  // eq = none
   4a79c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a7a0:	tbz	w0, #20, 4ce64 <aarch64_opcode_lookup@@Base+0x59b0>
   4a7a4:	tbz	w0, #22, 4ce6c <aarch64_opcode_lookup@@Base+0x59b8>
   4a7a8:	tst	x0, #0x800000
   4a7ac:	mov	w0, #0x711                 	// #1809
   4a7b0:	mov	w1, #0x715                 	// #1813
   4a7b4:	csel	w1, w0, w1, eq  // eq = none
   4a7b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a7bc:	tbnz	w0, #18, 4a7d4 <aarch64_opcode_lookup@@Base+0x3320>
   4a7c0:	tst	x0, #0x100000
   4a7c4:	mov	w0, #0x5b8                 	// #1464
   4a7c8:	mov	w1, #0x710                 	// #1808
   4a7cc:	csel	w1, w0, w1, eq  // eq = none
   4a7d0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a7d4:	tbz	w0, #20, 4ce74 <aarch64_opcode_lookup@@Base+0x59c0>
   4a7d8:	tst	x0, #0x800000
   4a7dc:	mov	w0, #0x714                 	// #1812
   4a7e0:	mov	w1, #0x716                 	// #1814
   4a7e4:	csel	w1, w0, w1, eq  // eq = none
   4a7e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a7ec:	tbnz	w0, #20, 4a824 <aarch64_opcode_lookup@@Base+0x3370>
   4a7f0:	tbnz	w0, #17, 4a80c <aarch64_opcode_lookup@@Base+0x3358>
   4a7f4:	tbnz	w0, #18, 4ce7c <aarch64_opcode_lookup@@Base+0x59c8>
   4a7f8:	tst	x0, #0x400000
   4a7fc:	mov	w0, #0x579                 	// #1401
   4a800:	mov	w1, #0x57b                 	// #1403
   4a804:	csel	w1, w0, w1, eq  // eq = none
   4a808:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a80c:	tbnz	w0, #22, 4ce84 <aarch64_opcode_lookup@@Base+0x59d0>
   4a810:	tst	x0, #0x800000
   4a814:	mov	w0, #0x817                 	// #2071
   4a818:	mov	w1, #0x976                 	// #2422
   4a81c:	csel	w1, w0, w1, eq  // eq = none
   4a820:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a824:	tbnz	w0, #22, 4a83c <aarch64_opcode_lookup@@Base+0x3388>
   4a828:	tst	x0, #0x800000
   4a82c:	mov	w0, #0x819                 	// #2073
   4a830:	mov	w1, #0x582                 	// #1410
   4a834:	csel	w1, w0, w1, eq  // eq = none
   4a838:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a83c:	tbnz	w0, #17, 4a858 <aarch64_opcode_lookup@@Base+0x33a4>
   4a840:	tbz	w0, #18, 4ce8c <aarch64_opcode_lookup@@Base+0x59d8>
   4a844:	tst	x0, #0x800000
   4a848:	mov	w0, #0x580                 	// #1408
   4a84c:	mov	w1, #0x584                 	// #1412
   4a850:	csel	w1, w0, w1, eq  // eq = none
   4a854:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a858:	tbz	w0, #18, 4ce94 <aarch64_opcode_lookup@@Base+0x59e0>
   4a85c:	tst	x0, #0x800000
   4a860:	mov	w0, #0x581                 	// #1409
   4a864:	mov	w1, #0x585                 	// #1413
   4a868:	csel	w1, w0, w1, eq  // eq = none
   4a86c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a870:	tbnz	w0, #17, 4a8e0 <aarch64_opcode_lookup@@Base+0x342c>
   4a874:	tbnz	w0, #18, 4a8a8 <aarch64_opcode_lookup@@Base+0x33f4>
   4a878:	tbnz	w0, #19, 4a890 <aarch64_opcode_lookup@@Base+0x33dc>
   4a87c:	tst	x0, #0x100000
   4a880:	mov	w0, #0x5ba                 	// #1466
   4a884:	mov	w1, #0x7ab                 	// #1963
   4a888:	csel	w1, w0, w1, eq  // eq = none
   4a88c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a890:	tbnz	w0, #20, 4ce9c <aarch64_opcode_lookup@@Base+0x59e8>
   4a894:	tst	x0, #0x400000
   4a898:	mov	w0, #0x57a                 	// #1402
   4a89c:	mov	w1, #0x57c                 	// #1404
   4a8a0:	csel	w1, w0, w1, eq  // eq = none
   4a8a4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a8a8:	tbnz	w0, #19, 4a8c4 <aarch64_opcode_lookup@@Base+0x3410>
   4a8ac:	tbz	w0, #22, 4cea4 <aarch64_opcode_lookup@@Base+0x59f0>
   4a8b0:	tst	x0, #0x800000
   4a8b4:	mov	w0, #0x7a9                 	// #1961
   4a8b8:	mov	w1, #0x7ad                 	// #1965
   4a8bc:	csel	w1, w0, w1, eq  // eq = none
   4a8c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a8c4:	tbz	w0, #20, 4ceac <aarch64_opcode_lookup@@Base+0x59f8>
   4a8c8:	tbz	w0, #22, 4ceb4 <aarch64_opcode_lookup@@Base+0x5a00>
   4a8cc:	tst	x0, #0x800000
   4a8d0:	mov	w0, #0x587                 	// #1415
   4a8d4:	mov	w1, #0x58b                 	// #1419
   4a8d8:	csel	w1, w0, w1, eq  // eq = none
   4a8dc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a8e0:	tbnz	w0, #18, 4a910 <aarch64_opcode_lookup@@Base+0x345c>
   4a8e4:	tbnz	w0, #19, 4a8fc <aarch64_opcode_lookup@@Base+0x3448>
   4a8e8:	tst	x0, #0x100000
   4a8ec:	mov	w0, #0x5bc                 	// #1468
   4a8f0:	mov	w1, #0x7a8                 	// #1960
   4a8f4:	csel	w1, w0, w1, eq  // eq = none
   4a8f8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a8fc:	tst	x0, #0x100000
   4a900:	mov	w0, #0x57e                 	// #1406
   4a904:	mov	w1, #0x586                 	// #1414
   4a908:	csel	w1, w0, w1, eq  // eq = none
   4a90c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a910:	tbnz	w0, #19, 4a92c <aarch64_opcode_lookup@@Base+0x3478>
   4a914:	tbz	w0, #20, 4cebc <aarch64_opcode_lookup@@Base+0x5a08>
   4a918:	tst	x0, #0x800000
   4a91c:	mov	w0, #0x7ac                 	// #1964
   4a920:	mov	w1, #0x7ae                 	// #1966
   4a924:	csel	w1, w0, w1, eq  // eq = none
   4a928:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a92c:	tst	x0, #0x800000
   4a930:	mov	w0, #0x588                 	// #1416
   4a934:	mov	w1, #0x58c                 	// #1420
   4a938:	csel	w1, w0, w1, eq  // eq = none
   4a93c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a940:	tbnz	w0, #22, 4a958 <aarch64_opcode_lookup@@Base+0x34a4>
   4a944:	tst	x0, #0x800000
   4a948:	mov	w0, #0x76a                 	// #1898
   4a94c:	mov	w1, #0x755                 	// #1877
   4a950:	csel	w1, w0, w1, eq  // eq = none
   4a954:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a958:	tst	x0, #0x800000
   4a95c:	mov	w0, #0x771                 	// #1905
   4a960:	mov	w1, #0x759                 	// #1881
   4a964:	csel	w1, w0, w1, eq  // eq = none
   4a968:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a96c:	tbz	w0, #31, 4cec4 <aarch64_opcode_lookup@@Base+0x5a10>
   4a970:	tbz	w0, #20, 4cecc <aarch64_opcode_lookup@@Base+0x5a18>
   4a974:	tbnz	w0, #22, 4a98c <aarch64_opcode_lookup@@Base+0x34d8>
   4a978:	tst	x0, #0x800000
   4a97c:	mov	w0, #0x794                 	// #1940
   4a980:	mov	w1, #0x790                 	// #1936
   4a984:	csel	w1, w0, w1, eq  // eq = none
   4a988:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a98c:	tst	x0, #0x800000
   4a990:	mov	w0, #0x784                 	// #1924
   4a994:	mov	w1, #0x780                 	// #1920
   4a998:	csel	w1, w0, w1, eq  // eq = none
   4a99c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a9a0:	tbnz	w0, #30, 4ab94 <aarch64_opcode_lookup@@Base+0x36e0>
   4a9a4:	tbnz	w0, #14, 4aab0 <aarch64_opcode_lookup@@Base+0x35fc>
   4a9a8:	tbnz	w0, #20, 4aa84 <aarch64_opcode_lookup@@Base+0x35d0>
   4a9ac:	tbnz	w0, #31, 4aa58 <aarch64_opcode_lookup@@Base+0x35a4>
   4a9b0:	tbnz	w0, #16, 4aa0c <aarch64_opcode_lookup@@Base+0x3558>
   4a9b4:	tbnz	w0, #17, 4a9f4 <aarch64_opcode_lookup@@Base+0x3540>
   4a9b8:	tbnz	w0, #18, 4a9dc <aarch64_opcode_lookup@@Base+0x3528>
   4a9bc:	tbz	w0, #19, 4ced4 <aarch64_opcode_lookup@@Base+0x5a20>
   4a9c0:	tbnz	w0, #10, 4cedc <aarch64_opcode_lookup@@Base+0x5a28>
   4a9c4:	tbnz	w0, #11, 4cee4 <aarch64_opcode_lookup@@Base+0x5a30>
   4a9c8:	tst	x0, #0x1000
   4a9cc:	mov	w0, #0x73f                 	// #1855
   4a9d0:	mov	w1, #0x7ec                 	// #2028
   4a9d4:	csel	w1, w0, w1, eq  // eq = none
   4a9d8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a9dc:	tbnz	w0, #11, 4ceec <aarch64_opcode_lookup@@Base+0x5a38>
   4a9e0:	tst	x0, #0x1000
   4a9e4:	mov	w0, #0x5ce                 	// #1486
   4a9e8:	mov	w1, #0x71e                 	// #1822
   4a9ec:	csel	w1, w0, w1, eq  // eq = none
   4a9f0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4a9f4:	tbnz	w0, #10, 4cef4 <aarch64_opcode_lookup@@Base+0x5a40>
   4a9f8:	tst	x0, #0x800
   4a9fc:	mov	w0, #0x731                 	// #1841
   4aa00:	mov	w1, #0x733                 	// #1843
   4aa04:	csel	w1, w0, w1, eq  // eq = none
   4aa08:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aa0c:	tbnz	w0, #10, 4aa44 <aarch64_opcode_lookup@@Base+0x3590>
   4aa10:	tbnz	w0, #11, 4aa2c <aarch64_opcode_lookup@@Base+0x3578>
   4aa14:	tbnz	w0, #17, 4cefc <aarch64_opcode_lookup@@Base+0x5a48>
   4aa18:	tst	x0, #0x40000
   4aa1c:	mov	w0, #0x7d3                 	// #2003
   4aa20:	mov	w1, #0x551                 	// #1361
   4aa24:	csel	w1, w0, w1, eq  // eq = none
   4aa28:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aa2c:	tbnz	w0, #17, 4cf04 <aarch64_opcode_lookup@@Base+0x5a50>
   4aa30:	tst	x0, #0x40000
   4aa34:	mov	w0, #0x7d4                 	// #2004
   4aa38:	mov	w1, #0x552                 	// #1362
   4aa3c:	csel	w1, w0, w1, eq  // eq = none
   4aa40:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aa44:	tst	x0, #0x20000
   4aa48:	mov	w0, #0x7d5                 	// #2005
   4aa4c:	mov	w1, #0x7c7                 	// #1991
   4aa50:	csel	w1, w0, w1, eq  // eq = none
   4aa54:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aa58:	tbnz	w0, #22, 4aa70 <aarch64_opcode_lookup@@Base+0x35bc>
   4aa5c:	tst	x0, #0x800000
   4aa60:	mov	w0, #0x62b                 	// #1579
   4aa64:	mov	w1, #0x61e                 	// #1566
   4aa68:	csel	w1, w0, w1, eq  // eq = none
   4aa6c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aa70:	tst	x0, #0x800000
   4aa74:	mov	w0, #0x63e                 	// #1598
   4aa78:	mov	w1, #0x5ee                 	// #1518
   4aa7c:	csel	w1, w0, w1, eq  // eq = none
   4aa80:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aa84:	tbnz	w0, #22, 4aa9c <aarch64_opcode_lookup@@Base+0x35e8>
   4aa88:	tst	x0, #0x800000
   4aa8c:	mov	w0, #0x6b0                 	// #1712
   4aa90:	mov	w1, #0x6ad                 	// #1709
   4aa94:	csel	w1, w0, w1, eq  // eq = none
   4aa98:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aa9c:	tst	x0, #0x800000
   4aaa0:	mov	w0, #0x6b3                 	// #1715
   4aaa4:	mov	w1, #0x6a8                 	// #1704
   4aaa8:	csel	w1, w0, w1, eq  // eq = none
   4aaac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aab0:	tbnz	w0, #31, 4ab38 <aarch64_opcode_lookup@@Base+0x3684>
   4aab4:	tbnz	w0, #16, 4ab00 <aarch64_opcode_lookup@@Base+0x364c>
   4aab8:	tbnz	w0, #17, 4aaec <aarch64_opcode_lookup@@Base+0x3638>
   4aabc:	tbnz	w0, #18, 4cf0c <aarch64_opcode_lookup@@Base+0x5a58>
   4aac0:	tbnz	w0, #19, 4aad8 <aarch64_opcode_lookup@@Base+0x3624>
   4aac4:	tst	x0, #0x100000
   4aac8:	mov	w0, #0x4fb                 	// #1275
   4aacc:	mov	w1, #0x6d0                 	// #1744
   4aad0:	csel	w1, w0, w1, eq  // eq = none
   4aad4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aad8:	tst	x0, #0x100000
   4aadc:	mov	w0, #0x71f                 	// #1823
   4aae0:	mov	w1, #0x557                 	// #1367
   4aae4:	csel	w1, w0, w1, eq  // eq = none
   4aae8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aaec:	tst	x0, #0x40000
   4aaf0:	mov	w0, #0x722                 	// #1826
   4aaf4:	mov	w1, #0x746                 	// #1862
   4aaf8:	csel	w1, w0, w1, eq  // eq = none
   4aafc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ab00:	tbnz	w0, #17, 4ab20 <aarch64_opcode_lookup@@Base+0x366c>
   4ab04:	tbnz	w0, #18, 4cf14 <aarch64_opcode_lookup@@Base+0x5a60>
   4ab08:	tbz	w0, #19, 4cf1c <aarch64_opcode_lookup@@Base+0x5a68>
   4ab0c:	tst	x0, #0x100000
   4ab10:	mov	w0, #0x7b4                 	// #1972
   4ab14:	mov	w1, #0x58f                 	// #1423
   4ab18:	csel	w1, w0, w1, eq  // eq = none
   4ab1c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ab20:	tbnz	w0, #18, 4cf24 <aarch64_opcode_lookup@@Base+0x5a70>
   4ab24:	tst	x0, #0x80000
   4ab28:	mov	w0, #0x79a                 	// #1946
   4ab2c:	mov	w1, #0x7b7                 	// #1975
   4ab30:	csel	w1, w0, w1, eq  // eq = none
   4ab34:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ab38:	tbnz	w0, #13, 4ab68 <aarch64_opcode_lookup@@Base+0x36b4>
   4ab3c:	tbnz	w0, #22, 4ab54 <aarch64_opcode_lookup@@Base+0x36a0>
   4ab40:	tst	x0, #0x800000
   4ab44:	mov	w0, #0x646                 	// #1606
   4ab48:	mov	w1, #0x642                 	// #1602
   4ab4c:	csel	w1, w0, w1, eq  // eq = none
   4ab50:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ab54:	tst	x0, #0x800000
   4ab58:	mov	w0, #0x656                 	// #1622
   4ab5c:	mov	w1, #0x652                 	// #1618
   4ab60:	csel	w1, w0, w1, eq  // eq = none
   4ab64:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ab68:	tbnz	w0, #22, 4ab80 <aarch64_opcode_lookup@@Base+0x36cc>
   4ab6c:	tst	x0, #0x800000
   4ab70:	mov	w0, #0x647                 	// #1607
   4ab74:	mov	w1, #0x643                 	// #1603
   4ab78:	csel	w1, w0, w1, eq  // eq = none
   4ab7c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ab80:	tst	x0, #0x800000
   4ab84:	mov	w0, #0x657                 	// #1623
   4ab88:	mov	w1, #0x653                 	// #1619
   4ab8c:	csel	w1, w0, w1, eq  // eq = none
   4ab90:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ab94:	tbnz	w0, #13, 4abc8 <aarch64_opcode_lookup@@Base+0x3714>
   4ab98:	tbnz	w0, #31, 4abb0 <aarch64_opcode_lookup@@Base+0x36fc>
   4ab9c:	tst	x0, #0x4000
   4aba0:	mov	w0, #0x591                 	// #1425
   4aba4:	mov	w1, #0x5af                 	// #1455
   4aba8:	csel	w1, w0, w1, eq  // eq = none
   4abac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4abb0:	tbnz	w0, #22, 4cf2c <aarch64_opcode_lookup@@Base+0x5a78>
   4abb4:	tst	x0, #0x800000
   4abb8:	mov	w0, #0x76b                 	// #1899
   4abbc:	mov	w1, #0x756                 	// #1878
   4abc0:	csel	w1, w0, w1, eq  // eq = none
   4abc4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4abc8:	tbnz	w0, #14, 4abe8 <aarch64_opcode_lookup@@Base+0x3734>
   4abcc:	tbz	w0, #31, 4cf34 <aarch64_opcode_lookup@@Base+0x5a80>
   4abd0:	tbnz	w0, #22, 4cf3c <aarch64_opcode_lookup@@Base+0x5a88>
   4abd4:	tst	x0, #0x800000
   4abd8:	mov	w0, #0x76c                 	// #1900
   4abdc:	mov	w1, #0x757                 	// #1879
   4abe0:	csel	w1, w0, w1, eq  // eq = none
   4abe4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4abe8:	tbz	w0, #31, 4cf44 <aarch64_opcode_lookup@@Base+0x5a90>
   4abec:	tbnz	w0, #20, 4ac04 <aarch64_opcode_lookup@@Base+0x3750>
   4abf0:	tst	x0, #0x800000
   4abf4:	mov	w0, #0x774                 	// #1908
   4abf8:	mov	w1, #0x75a                 	// #1882
   4abfc:	csel	w1, w0, w1, eq  // eq = none
   4ac00:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ac04:	tbnz	w0, #22, 4ac1c <aarch64_opcode_lookup@@Base+0x3768>
   4ac08:	tst	x0, #0x800000
   4ac0c:	mov	w0, #0x77c                 	// #1916
   4ac10:	mov	w1, #0x778                 	// #1912
   4ac14:	csel	w1, w0, w1, eq  // eq = none
   4ac18:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ac1c:	tst	x0, #0x800000
   4ac20:	mov	w0, #0x78c                 	// #1932
   4ac24:	mov	w1, #0x788                 	// #1928
   4ac28:	csel	w1, w0, w1, eq  // eq = none
   4ac2c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ac30:	tbnz	w0, #29, 4ad64 <aarch64_opcode_lookup@@Base+0x38b0>
   4ac34:	tbnz	w0, #30, 4ac44 <aarch64_opcode_lookup@@Base+0x3790>
   4ac38:	lsr	w1, w0, #31
   4ac3c:	add	w1, w1, #0x27c
   4ac40:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ac44:	tbnz	w0, #24, 4ad38 <aarch64_opcode_lookup@@Base+0x3884>
   4ac48:	tbnz	w0, #4, 4acec <aarch64_opcode_lookup@@Base+0x3838>
   4ac4c:	tbnz	w0, #25, 4acb8 <aarch64_opcode_lookup@@Base+0x3804>
   4ac50:	mov	w1, #0x291                 	// #657
   4ac54:	tbz	w0, #31, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4ac58:	tbnz	w0, #0, 4ac8c <aarch64_opcode_lookup@@Base+0x37d8>
   4ac5c:	tbnz	w0, #1, 4ac78 <aarch64_opcode_lookup@@Base+0x37c4>
   4ac60:	tbz	w0, #21, 4cf4c <aarch64_opcode_lookup@@Base+0x5a98>
   4ac64:	tst	x0, #0x400000
   4ac68:	mov	w0, #0x2f0                 	// #752
   4ac6c:	mov	w1, #0x4a7                 	// #1191
   4ac70:	csel	w1, w0, w1, eq  // eq = none
   4ac74:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ac78:	tst	x0, #0x200000
   4ac7c:	mov	w0, #0x2ee                 	// #750
   4ac80:	mov	w1, #0x2f3                 	// #755
   4ac84:	csel	w1, w0, w1, eq  // eq = none
   4ac88:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ac8c:	tbnz	w0, #1, 4aca4 <aarch64_opcode_lookup@@Base+0x37f0>
   4ac90:	tst	x0, #0x200000
   4ac94:	mov	w0, #0x2ed                 	// #749
   4ac98:	mov	w1, #0x2f2                 	// #754
   4ac9c:	csel	w1, w0, w1, eq  // eq = none
   4aca0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aca4:	tst	x0, #0x200000
   4aca8:	mov	w0, #0x2ef                 	// #751
   4acac:	mov	w1, #0x2f4                 	// #756
   4acb0:	csel	w1, w0, w1, eq  // eq = none
   4acb4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4acb8:	tbnz	w0, #21, 4acd8 <aarch64_opcode_lookup@@Base+0x3824>
   4acbc:	mov	w1, #0x280                 	// #640
   4acc0:	tbnz	w0, #22, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4acc4:	tst	x0, #0x800000
   4acc8:	mov	w0, #0x27e                 	// #638
   4accc:	mov	w1, #0x281                 	// #641
   4acd0:	csel	w1, w0, w1, eq  // eq = none
   4acd4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4acd8:	tst	x0, #0x800000
   4acdc:	mov	w0, #0x27f                 	// #639
   4ace0:	mov	w1, #0x282                 	// #642
   4ace4:	csel	w1, w0, w1, eq  // eq = none
   4ace8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4acec:	tbnz	w0, #10, 4ad14 <aarch64_opcode_lookup@@Base+0x3860>
   4acf0:	mov	w1, #0x289                 	// #649
   4acf4:	tbnz	w0, #21, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4acf8:	mov	w1, #0x28b                 	// #651
   4acfc:	tbnz	w0, #22, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4ad00:	tst	x0, #0x800000
   4ad04:	mov	w0, #0x287                 	// #647
   4ad08:	mov	w1, #0x28d                 	// #653
   4ad0c:	csel	w1, w0, w1, eq  // eq = none
   4ad10:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ad14:	mov	w1, #0x28a                 	// #650
   4ad18:	tbnz	w0, #21, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4ad1c:	mov	w1, #0x28c                 	// #652
   4ad20:	tbnz	w0, #22, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4ad24:	tst	x0, #0x800000
   4ad28:	mov	w0, #0x288                 	// #648
   4ad2c:	mov	w1, #0x28e                 	// #654
   4ad30:	csel	w1, w0, w1, eq  // eq = none
   4ad34:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ad38:	tbnz	w0, #21, 4ad50 <aarch64_opcode_lookup@@Base+0x389c>
   4ad3c:	mov	w1, #0x32a                 	// #810
   4ad40:	tbz	w0, #25, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4ad44:	ubfx	x0, x0, #10, #1
   4ad48:	add	w1, w0, #0x283
   4ad4c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ad50:	mov	w1, #0x4a4                 	// #1188
   4ad54:	tbz	w0, #25, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4ad58:	ubfx	x0, x0, #10, #1
   4ad5c:	add	w1, w0, #0x285
   4ad60:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ad64:	tbnz	w0, #24, 4ad7c <aarch64_opcode_lookup@@Base+0x38c8>
   4ad68:	tst	x0, #0x2000000
   4ad6c:	mov	w0, #0x28f                 	// #655
   4ad70:	mov	w1, #0x4d4                 	// #1236
   4ad74:	csel	w1, w0, w1, eq  // eq = none
   4ad78:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ad7c:	tst	x0, #0x2000000
   4ad80:	mov	w0, #0x290                 	// #656
   4ad84:	mov	w1, #0x4d5                 	// #1237
   4ad88:	csel	w1, w0, w1, eq  // eq = none
   4ad8c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ad90:	tbnz	w0, #25, 4aed8 <aarch64_opcode_lookup@@Base+0x3a24>
   4ad94:	tbnz	w0, #28, 4ae94 <aarch64_opcode_lookup@@Base+0x39e0>
   4ad98:	tbnz	w0, #22, 4ae18 <aarch64_opcode_lookup@@Base+0x3964>
   4ad9c:	tbnz	w0, #23, 4adec <aarch64_opcode_lookup@@Base+0x3938>
   4ada0:	tbnz	w0, #24, 4adb8 <aarch64_opcode_lookup@@Base+0x3904>
   4ada4:	tst	x0, #0x20000000
   4ada8:	mov	w0, #0x1b8                 	// #440
   4adac:	mov	w1, #0x3cc                 	// #972
   4adb0:	csel	w1, w0, w1, eq  // eq = none
   4adb4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4adb8:	mov	w1, #0x3d0                 	// #976
   4adbc:	tbnz	w0, #29, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4adc0:	tbnz	w0, #13, 4add8 <aarch64_opcode_lookup@@Base+0x3924>
   4adc4:	tst	x0, #0x200000
   4adc8:	mov	w0, #0x1c8                 	// #456
   4adcc:	mov	w1, #0x1ca                 	// #458
   4add0:	csel	w1, w0, w1, eq  // eq = none
   4add4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4add8:	tst	x0, #0x200000
   4addc:	mov	w0, #0x1c9                 	// #457
   4ade0:	mov	w1, #0x1cb                 	// #459
   4ade4:	csel	w1, w0, w1, eq  // eq = none
   4ade8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4adec:	mov	w1, #0x3d6                 	// #982
   4adf0:	tbnz	w0, #29, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4adf4:	tbnz	w0, #21, 4ae0c <aarch64_opcode_lookup@@Base+0x3958>
   4adf8:	mov	w1, #0x1c0                 	// #448
   4adfc:	tbz	w0, #24, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4ae00:	ubfx	x0, x0, #13, #1
   4ae04:	add	w1, w0, #0x1d4
   4ae08:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ae0c:	ubfx	x0, x0, #13, #1
   4ae10:	add	w1, w0, #0x1d6
   4ae14:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ae18:	tbnz	w0, #23, 4ae68 <aarch64_opcode_lookup@@Base+0x39b4>
   4ae1c:	tbnz	w0, #24, 4ae34 <aarch64_opcode_lookup@@Base+0x3980>
   4ae20:	tst	x0, #0x20000000
   4ae24:	mov	w0, #0x1bc                 	// #444
   4ae28:	mov	w1, #0x3cd                 	// #973
   4ae2c:	csel	w1, w0, w1, eq  // eq = none
   4ae30:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ae34:	mov	w1, #0x3d1                 	// #977
   4ae38:	tbnz	w0, #29, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4ae3c:	tbnz	w0, #13, 4ae54 <aarch64_opcode_lookup@@Base+0x39a0>
   4ae40:	tst	x0, #0x200000
   4ae44:	mov	w0, #0x1cc                 	// #460
   4ae48:	mov	w1, #0x1d0                 	// #464
   4ae4c:	csel	w1, w0, w1, eq  // eq = none
   4ae50:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ae54:	tst	x0, #0x200000
   4ae58:	mov	w0, #0x1cd                 	// #461
   4ae5c:	mov	w1, #0x1d1                 	// #465
   4ae60:	csel	w1, w0, w1, eq  // eq = none
   4ae64:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ae68:	mov	w1, #0x3d7                 	// #983
   4ae6c:	tbnz	w0, #29, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4ae70:	tbnz	w0, #21, 4ae88 <aarch64_opcode_lookup@@Base+0x39d4>
   4ae74:	mov	w1, #0x1c4                 	// #452
   4ae78:	tbz	w0, #24, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4ae7c:	ubfx	x0, x0, #13, #1
   4ae80:	add	w1, w0, #0x1d8
   4ae84:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ae88:	ubfx	x0, x0, #13, #1
   4ae8c:	add	w1, w0, #0x1dc
   4ae90:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ae94:	tbnz	w0, #24, 4aecc <aarch64_opcode_lookup@@Base+0x3a18>
   4ae98:	mov	w1, #0x3db                 	// #987
   4ae9c:	tbz	w0, #29, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4aea0:	tbnz	w0, #10, 4aec0 <aarch64_opcode_lookup@@Base+0x3a0c>
   4aea4:	tbnz	w0, #11, 4aeb4 <aarch64_opcode_lookup@@Base+0x3a00>
   4aea8:	ubfx	x0, x0, #22, #1
   4aeac:	add	w1, w0, #0x39c
   4aeb0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aeb4:	ubfx	x0, x0, #22, #1
   4aeb8:	add	w1, w0, #0x387
   4aebc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aec0:	ubfx	x0, x0, #22, #1
   4aec4:	add	w1, w0, #0x368
   4aec8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aecc:	ubfx	x0, x0, #22, #1
   4aed0:	add	w1, w0, #0x37b
   4aed4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4aed8:	tbnz	w0, #24, 4c2ec <aarch64_opcode_lookup@@Base+0x4e38>
   4aedc:	tbnz	w0, #21, 4b254 <aarch64_opcode_lookup@@Base+0x3da0>
   4aee0:	tbnz	w0, #28, 4b160 <aarch64_opcode_lookup@@Base+0x3cac>
   4aee4:	tbnz	w0, #29, 4b068 <aarch64_opcode_lookup@@Base+0x3bb4>
   4aee8:	tbnz	w0, #31, 4b014 <aarch64_opcode_lookup@@Base+0x3b60>
   4aeec:	tbnz	w0, #10, 4af44 <aarch64_opcode_lookup@@Base+0x3a90>
   4aef0:	tbnz	w0, #11, 4af00 <aarch64_opcode_lookup@@Base+0x3a4c>
   4aef4:	ubfx	x0, x0, #12, #1
   4aef8:	add	w1, w0, #0x1a4
   4aefc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4af00:	tbnz	w0, #12, 4af18 <aarch64_opcode_lookup@@Base+0x3a64>
   4af04:	tst	x0, #0x4000
   4af08:	mov	w0, #0x107                 	// #263
   4af0c:	mov	w1, #0x10a                 	// #266
   4af10:	csel	w1, w0, w1, eq  // eq = none
   4af14:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4af18:	tbnz	w0, #13, 4af30 <aarch64_opcode_lookup@@Base+0x3a7c>
   4af1c:	tst	x0, #0x4000
   4af20:	mov	w0, #0x106                 	// #262
   4af24:	mov	w1, #0x109                 	// #265
   4af28:	csel	w1, w0, w1, eq  // eq = none
   4af2c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4af30:	tst	x0, #0x4000
   4af34:	mov	w0, #0x108                 	// #264
   4af38:	mov	w1, #0x10b                 	// #267
   4af3c:	csel	w1, w0, w1, eq  // eq = none
   4af40:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4af44:	tbnz	w0, #11, 4afac <aarch64_opcode_lookup@@Base+0x3af8>
   4af48:	tbnz	w0, #12, 4af7c <aarch64_opcode_lookup@@Base+0x3ac8>
   4af4c:	tbnz	w0, #13, 4af68 <aarch64_opcode_lookup@@Base+0x3ab4>
   4af50:	tbz	w0, #22, 4cf54 <aarch64_opcode_lookup@@Base+0x5aa0>
   4af54:	tst	x0, #0x800000
   4af58:	mov	w0, #0x124                 	// #292
   4af5c:	mov	w1, #0x134                 	// #308
   4af60:	csel	w1, w0, w1, eq  // eq = none
   4af64:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4af68:	tst	x0, #0x8000
   4af6c:	mov	w0, #0x12c                 	// #300
   4af70:	mov	w1, #0x96d                 	// #2413
   4af74:	csel	w1, w0, w1, eq  // eq = none
   4af78:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4af7c:	tbnz	w0, #13, 4af98 <aarch64_opcode_lookup@@Base+0x3ae4>
   4af80:	tbnz	w0, #15, 4cf5c <aarch64_opcode_lookup@@Base+0x5aa8>
   4af84:	tst	x0, #0x800000
   4af88:	mov	w0, #0x128                 	// #296
   4af8c:	mov	w1, #0x138                 	// #312
   4af90:	csel	w1, w0, w1, eq  // eq = none
   4af94:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4af98:	tst	x0, #0x800000
   4af9c:	mov	w0, #0x12e                 	// #302
   4afa0:	mov	w1, #0x13a                 	// #314
   4afa4:	csel	w1, w0, w1, eq  // eq = none
   4afa8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4afac:	tbnz	w0, #12, 4afe0 <aarch64_opcode_lookup@@Base+0x3b2c>
   4afb0:	tbnz	w0, #13, 4afcc <aarch64_opcode_lookup@@Base+0x3b18>
   4afb4:	tbz	w0, #22, 4cf64 <aarch64_opcode_lookup@@Base+0x5ab0>
   4afb8:	tst	x0, #0x800000
   4afbc:	mov	w0, #0x126                 	// #294
   4afc0:	mov	w1, #0x136                 	// #310
   4afc4:	csel	w1, w0, w1, eq  // eq = none
   4afc8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4afcc:	tst	x0, #0x8000
   4afd0:	mov	w0, #0x97                  	// #151
   4afd4:	mov	w1, #0x96f                 	// #2415
   4afd8:	csel	w1, w0, w1, eq  // eq = none
   4afdc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4afe0:	tbnz	w0, #13, 4affc <aarch64_opcode_lookup@@Base+0x3b48>
   4afe4:	tbnz	w0, #15, 4cf6c <aarch64_opcode_lookup@@Base+0x5ab8>
   4afe8:	tst	x0, #0x400000
   4afec:	mov	w0, #0x9a                  	// #154
   4aff0:	mov	w1, #0x12a                 	// #298
   4aff4:	csel	w1, w0, w1, eq  // eq = none
   4aff8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4affc:	tbz	w0, #22, 4cf74 <aarch64_opcode_lookup@@Base+0x5ac0>
   4b000:	tst	x0, #0x800000
   4b004:	mov	w0, #0x130                 	// #304
   4b008:	mov	w1, #0x13c                 	// #316
   4b00c:	csel	w1, w0, w1, eq  // eq = none
   4b010:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b014:	tbnz	w0, #22, 4b02c <aarch64_opcode_lookup@@Base+0x3b78>
   4b018:	tst	x0, #0x800000
   4b01c:	mov	w0, #0x929                 	// #2345
   4b020:	mov	w1, #0x92b                 	// #2347
   4b024:	csel	w1, w0, w1, eq  // eq = none
   4b028:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b02c:	mov	w1, #0x92d                 	// #2349
   4b030:	tbz	w0, #15, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4b034:	tbnz	w0, #10, 4b050 <aarch64_opcode_lookup@@Base+0x3b9c>
   4b038:	tbnz	w0, #11, 4cf7c <aarch64_opcode_lookup@@Base+0x5ac8>
   4b03c:	tst	x0, #0x800000
   4b040:	mov	w0, #0x92e                 	// #2350
   4b044:	mov	w1, #0x927                 	// #2343
   4b048:	csel	w1, w0, w1, eq  // eq = none
   4b04c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b050:	tbnz	w0, #11, 4cf84 <aarch64_opcode_lookup@@Base+0x5ad0>
   4b054:	tst	x0, #0x800000
   4b058:	mov	w0, #0x92f                 	// #2351
   4b05c:	mov	w1, #0x934                 	// #2356
   4b060:	csel	w1, w0, w1, eq  // eq = none
   4b064:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b068:	mov	w1, #0x84                  	// #132
   4b06c:	tbz	w0, #10, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4b070:	tbnz	w0, #15, 4b108 <aarch64_opcode_lookup@@Base+0x3c54>
   4b074:	mov	w1, #0x9c                  	// #156
   4b078:	tbz	w0, #22, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4b07c:	tbnz	w0, #11, 4b0dc <aarch64_opcode_lookup@@Base+0x3c28>
   4b080:	tbnz	w0, #12, 4b0b0 <aarch64_opcode_lookup@@Base+0x3bfc>
   4b084:	tbnz	w0, #13, 4b09c <aarch64_opcode_lookup@@Base+0x3be8>
   4b088:	tst	x0, #0x800000
   4b08c:	mov	w0, #0x157                 	// #343
   4b090:	mov	w1, #0x167                 	// #359
   4b094:	csel	w1, w0, w1, eq  // eq = none
   4b098:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b09c:	tst	x0, #0x800000
   4b0a0:	mov	w0, #0x15d                 	// #349
   4b0a4:	mov	w1, #0x16b                 	// #363
   4b0a8:	csel	w1, w0, w1, eq  // eq = none
   4b0ac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b0b0:	tbnz	w0, #13, 4b0c8 <aarch64_opcode_lookup@@Base+0x3c14>
   4b0b4:	tst	x0, #0x800000
   4b0b8:	mov	w0, #0x159                 	// #345
   4b0bc:	mov	w1, #0x169                 	// #361
   4b0c0:	csel	w1, w0, w1, eq  // eq = none
   4b0c4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b0c8:	tst	x0, #0x800000
   4b0cc:	mov	w0, #0x161                 	// #353
   4b0d0:	mov	w1, #0x16f                 	// #367
   4b0d4:	csel	w1, w0, w1, eq  // eq = none
   4b0d8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b0dc:	tbnz	w0, #12, 4b0f4 <aarch64_opcode_lookup@@Base+0x3c40>
   4b0e0:	tst	x0, #0x800000
   4b0e4:	mov	w0, #0x15f                 	// #351
   4b0e8:	mov	w1, #0x16d                 	// #365
   4b0ec:	csel	w1, w0, w1, eq  // eq = none
   4b0f0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b0f4:	tst	x0, #0x2000
   4b0f8:	mov	w0, #0x15b                 	// #347
   4b0fc:	mov	w1, #0x163                 	// #355
   4b100:	csel	w1, w0, w1, eq  // eq = none
   4b104:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b108:	tbnz	w0, #13, 4b130 <aarch64_opcode_lookup@@Base+0x3c7c>
   4b10c:	mov	w1, #0x174                 	// #372
   4b110:	tbnz	w0, #14, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4b114:	mov	w1, #0x173                 	// #371
   4b118:	tbnz	w0, #11, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4b11c:	tst	x0, #0x1000
   4b120:	mov	w0, #0x172                 	// #370
   4b124:	mov	w1, #0x921                 	// #2337
   4b128:	csel	w1, w0, w1, eq  // eq = none
   4b12c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b130:	tbnz	w0, #11, 4b148 <aarch64_opcode_lookup@@Base+0x3c94>
   4b134:	tst	x0, #0x4000
   4b138:	mov	w0, #0x96e                 	// #2414
   4b13c:	mov	w1, #0x175                 	// #373
   4b140:	csel	w1, w0, w1, eq  // eq = none
   4b144:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b148:	tbz	w0, #12, 4cf8c <aarch64_opcode_lookup@@Base+0x5ad8>
   4b14c:	tbz	w0, #23, 4cf94 <aarch64_opcode_lookup@@Base+0x5ae0>
   4b150:	tst	x0, #0x40000000
   4b154:	cset	w0, eq  // eq = none
   4b158:	add	w1, w0, #0x982
   4b15c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b160:	tbnz	w0, #29, 4b210 <aarch64_opcode_lookup@@Base+0x3d5c>
   4b164:	tbnz	w0, #30, 4b194 <aarch64_opcode_lookup@@Base+0x3ce0>
   4b168:	tbnz	w0, #16, 4b180 <aarch64_opcode_lookup@@Base+0x3ccc>
   4b16c:	tst	x0, #0x20000
   4b170:	mov	w0, #0x2fb                 	// #763
   4b174:	mov	w1, #0x2f7                 	// #759
   4b178:	csel	w1, w0, w1, eq  // eq = none
   4b17c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b180:	tst	x0, #0x20000
   4b184:	mov	w0, #0x2fd                 	// #765
   4b188:	mov	w1, #0x2f9                 	// #761
   4b18c:	csel	w1, w0, w1, eq  // eq = none
   4b190:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b194:	tbnz	w0, #10, 4b1e0 <aarch64_opcode_lookup@@Base+0x3d2c>
   4b198:	tbnz	w0, #12, 4b1c8 <aarch64_opcode_lookup@@Base+0x3d14>
   4b19c:	tbnz	w0, #13, 4b1b4 <aarch64_opcode_lookup@@Base+0x3d00>
   4b1a0:	tst	x0, #0x4000
   4b1a4:	mov	w0, #0x2a6                 	// #678
   4b1a8:	mov	w1, #0x2aa                 	// #682
   4b1ac:	csel	w1, w0, w1, eq  // eq = none
   4b1b0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b1b4:	tst	x0, #0x4000
   4b1b8:	mov	w0, #0x2a8                 	// #680
   4b1bc:	mov	w1, #0x2ac                 	// #684
   4b1c0:	csel	w1, w0, w1, eq  // eq = none
   4b1c4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b1c8:	tbnz	w0, #13, 4cf9c <aarch64_opcode_lookup@@Base+0x5ae8>
   4b1cc:	tst	x0, #0x4000
   4b1d0:	mov	w0, #0x2a7                 	// #679
   4b1d4:	mov	w1, #0x2ab                 	// #683
   4b1d8:	csel	w1, w0, w1, eq  // eq = none
   4b1dc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b1e0:	tbnz	w0, #11, 4b1f8 <aarch64_opcode_lookup@@Base+0x3d44>
   4b1e4:	tst	x0, #0x2000
   4b1e8:	mov	w0, #0x217                 	// #535
   4b1ec:	mov	w1, #0x22c                 	// #556
   4b1f0:	csel	w1, w0, w1, eq  // eq = none
   4b1f4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b1f8:	tbz	w0, #13, 4cfa4 <aarch64_opcode_lookup@@Base+0x5af0>
   4b1fc:	tst	x0, #0x800000
   4b200:	mov	w0, #0x22e                 	// #558
   4b204:	mov	w1, #0x230                 	// #560
   4b208:	csel	w1, w0, w1, eq  // eq = none
   4b20c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b210:	tbnz	w0, #11, 4b238 <aarch64_opcode_lookup@@Base+0x3d84>
   4b214:	mov	w1, #0x241                 	// #577
   4b218:	tbnz	w0, #12, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4b21c:	mov	w1, #0x24c                 	// #588
   4b220:	tbz	w0, #13, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4b224:	tst	x0, #0x800000
   4b228:	mov	w0, #0x23d                 	// #573
   4b22c:	mov	w1, #0x243                 	// #579
   4b230:	csel	w1, w0, w1, eq  // eq = none
   4b234:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b238:	mov	w1, #0x24d                 	// #589
   4b23c:	tbz	w0, #13, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4b240:	tst	x0, #0x800000
   4b244:	mov	w0, #0x23f                 	// #575
   4b248:	mov	w1, #0x245                 	// #581
   4b24c:	csel	w1, w0, w1, eq  // eq = none
   4b250:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b254:	tbnz	w0, #28, 4bcc4 <aarch64_opcode_lookup@@Base+0x4810>
   4b258:	tbnz	w0, #15, 4b66c <aarch64_opcode_lookup@@Base+0x41b8>
   4b25c:	tbnz	w0, #29, 4b490 <aarch64_opcode_lookup@@Base+0x3fdc>
   4b260:	tbnz	w0, #31, 4cfac <aarch64_opcode_lookup@@Base+0x5af8>
   4b264:	tbnz	w0, #10, 4b3b8 <aarch64_opcode_lookup@@Base+0x3f04>
   4b268:	tbnz	w0, #11, 4b2e8 <aarch64_opcode_lookup@@Base+0x3e34>
   4b26c:	tbnz	w0, #12, 4b2ac <aarch64_opcode_lookup@@Base+0x3df8>
   4b270:	tbnz	w0, #13, 4b290 <aarch64_opcode_lookup@@Base+0x3ddc>
   4b274:	tbnz	w0, #14, 4b284 <aarch64_opcode_lookup@@Base+0x3dd0>
   4b278:	ubfx	x0, x0, #30, #1
   4b27c:	add	w1, w0, #0x2c
   4b280:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b284:	ubfx	x0, x0, #30, #1
   4b288:	add	w1, w0, #0x34
   4b28c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b290:	tbnz	w0, #14, 4b2a0 <aarch64_opcode_lookup@@Base+0x3dec>
   4b294:	ubfx	x0, x0, #30, #1
   4b298:	add	w1, w0, #0x30
   4b29c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b2a0:	ubfx	x0, x0, #30, #1
   4b2a4:	add	w1, w0, #0x38
   4b2a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b2ac:	tbnz	w0, #13, 4b2cc <aarch64_opcode_lookup@@Base+0x3e18>
   4b2b0:	tbnz	w0, #14, 4b2c0 <aarch64_opcode_lookup@@Base+0x3e0c>
   4b2b4:	ubfx	x0, x0, #30, #1
   4b2b8:	add	w1, w0, #0x2e
   4b2bc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b2c0:	ubfx	x0, x0, #30, #1
   4b2c4:	add	w1, w0, #0x36
   4b2c8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b2cc:	tbnz	w0, #14, 4b2dc <aarch64_opcode_lookup@@Base+0x3e28>
   4b2d0:	ubfx	x0, x0, #30, #1
   4b2d4:	add	w1, w0, #0x32
   4b2d8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b2dc:	ubfx	x0, x0, #30, #1
   4b2e0:	add	w1, w0, #0x3a
   4b2e4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b2e8:	tbnz	w0, #12, 4b360 <aarch64_opcode_lookup@@Base+0x3eac>
   4b2ec:	tbnz	w0, #13, 4b318 <aarch64_opcode_lookup@@Base+0x3e64>
   4b2f0:	tbz	w0, #14, 4cfb4 <aarch64_opcode_lookup@@Base+0x5b00>
   4b2f4:	tbnz	w0, #16, 4b30c <aarch64_opcode_lookup@@Base+0x3e58>
   4b2f8:	tst	x0, #0x80000
   4b2fc:	mov	w0, #0xa6                  	// #166
   4b300:	mov	w1, #0x29f                 	// #671
   4b304:	csel	w1, w0, w1, eq  // eq = none
   4b308:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b30c:	ubfx	x0, x0, #30, #1
   4b310:	add	w1, w0, #0xb0
   4b314:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b318:	tbnz	w0, #14, 4b32c <aarch64_opcode_lookup@@Base+0x3e78>
   4b31c:	tbz	w0, #16, 4cfbc <aarch64_opcode_lookup@@Base+0x5b08>
   4b320:	ubfx	x0, x0, #30, #1
   4b324:	add	w1, w0, #0xae
   4b328:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b32c:	tbnz	w0, #16, 4b344 <aarch64_opcode_lookup@@Base+0x3e90>
   4b330:	tst	x0, #0x80000
   4b334:	mov	w0, #0xa8                  	// #168
   4b338:	mov	w1, #0x2a1                 	// #673
   4b33c:	csel	w1, w0, w1, eq  // eq = none
   4b340:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b344:	tbnz	w0, #23, 4b354 <aarch64_opcode_lookup@@Base+0x3ea0>
   4b348:	ubfx	x0, x0, #30, #1
   4b34c:	add	w1, w0, #0xb2
   4b350:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b354:	ubfx	x0, x0, #30, #1
   4b358:	add	w1, w0, #0x97f
   4b35c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b360:	tbnz	w0, #13, 4b37c <aarch64_opcode_lookup@@Base+0x3ec8>
   4b364:	tbz	w0, #14, 4cfc4 <aarch64_opcode_lookup@@Base+0x5b10>
   4b368:	tst	x0, #0x80000
   4b36c:	mov	w0, #0xa7                  	// #167
   4b370:	mov	w1, #0x2a0                 	// #672
   4b374:	csel	w1, w0, w1, eq  // eq = none
   4b378:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b37c:	tbnz	w0, #14, 4b394 <aarch64_opcode_lookup@@Base+0x3ee0>
   4b380:	tst	x0, #0x100000
   4b384:	mov	w0, #0xa5                  	// #165
   4b388:	mov	w1, #0x1d                  	// #29
   4b38c:	csel	w1, w0, w1, eq  // eq = none
   4b390:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b394:	tbnz	w0, #16, 4b3ac <aarch64_opcode_lookup@@Base+0x3ef8>
   4b398:	tst	x0, #0x80000
   4b39c:	mov	w0, #0xa9                  	// #169
   4b3a0:	mov	w1, #0x2a2                 	// #674
   4b3a4:	csel	w1, w0, w1, eq  // eq = none
   4b3a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b3ac:	ubfx	x0, x0, #30, #1
   4b3b0:	add	w1, w0, #0xb4
   4b3b4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b3b8:	tbnz	w0, #11, 4b418 <aarch64_opcode_lookup@@Base+0x3f64>
   4b3bc:	tbnz	w0, #12, 4b3ec <aarch64_opcode_lookup@@Base+0x3f38>
   4b3c0:	tbnz	w0, #13, 4b3d8 <aarch64_opcode_lookup@@Base+0x3f24>
   4b3c4:	tst	x0, #0x4000
   4b3c8:	mov	w0, #0x10c                 	// #268
   4b3cc:	mov	w1, #0x113                 	// #275
   4b3d0:	csel	w1, w0, w1, eq  // eq = none
   4b3d4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b3d8:	tst	x0, #0x4000
   4b3dc:	mov	w0, #0x10f                 	// #271
   4b3e0:	mov	w1, #0x117                 	// #279
   4b3e4:	csel	w1, w0, w1, eq  // eq = none
   4b3e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b3ec:	tbnz	w0, #13, 4b404 <aarch64_opcode_lookup@@Base+0x3f50>
   4b3f0:	tst	x0, #0x4000
   4b3f4:	mov	w0, #0x10e                 	// #270
   4b3f8:	mov	w1, #0x115                 	// #277
   4b3fc:	csel	w1, w0, w1, eq  // eq = none
   4b400:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b404:	tst	x0, #0x4000
   4b408:	mov	w0, #0x111                 	// #273
   4b40c:	mov	w1, #0x119                 	// #281
   4b410:	csel	w1, w0, w1, eq  // eq = none
   4b414:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b418:	tbnz	w0, #12, 4b448 <aarch64_opcode_lookup@@Base+0x3f94>
   4b41c:	tbnz	w0, #13, 4b434 <aarch64_opcode_lookup@@Base+0x3f80>
   4b420:	tst	x0, #0x4000
   4b424:	mov	w0, #0x10d                 	// #269
   4b428:	mov	w1, #0x114                 	// #276
   4b42c:	csel	w1, w0, w1, eq  // eq = none
   4b430:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b434:	tst	x0, #0x4000
   4b438:	mov	w0, #0x110                 	// #272
   4b43c:	mov	w1, #0x118                 	// #280
   4b440:	csel	w1, w0, w1, eq  // eq = none
   4b444:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b448:	tbnz	w0, #13, 4b47c <aarch64_opcode_lookup@@Base+0x3fc8>
   4b44c:	tbnz	w0, #14, 4cfcc <aarch64_opcode_lookup@@Base+0x5b18>
   4b450:	tbnz	w0, #22, 4b468 <aarch64_opcode_lookup@@Base+0x3fb4>
   4b454:	tst	x0, #0x800000
   4b458:	mov	w0, #0x131                 	// #305
   4b45c:	mov	w1, #0x13d                 	// #317
   4b460:	csel	w1, w0, w1, eq  // eq = none
   4b464:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b468:	tst	x0, #0x800000
   4b46c:	mov	w0, #0x132                 	// #306
   4b470:	mov	w1, #0x13f                 	// #319
   4b474:	csel	w1, w0, w1, eq  // eq = none
   4b478:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b47c:	tst	x0, #0x4000
   4b480:	mov	w0, #0x112                 	// #274
   4b484:	mov	w1, #0x11a                 	// #282
   4b488:	csel	w1, w0, w1, eq  // eq = none
   4b48c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b490:	tbnz	w0, #10, 4b594 <aarch64_opcode_lookup@@Base+0x40e0>
   4b494:	tbnz	w0, #11, 4b514 <aarch64_opcode_lookup@@Base+0x4060>
   4b498:	tbnz	w0, #12, 4b4d8 <aarch64_opcode_lookup@@Base+0x4024>
   4b49c:	tbnz	w0, #13, 4b4bc <aarch64_opcode_lookup@@Base+0x4008>
   4b4a0:	tbnz	w0, #14, 4b4b0 <aarch64_opcode_lookup@@Base+0x3ffc>
   4b4a4:	ubfx	x0, x0, #30, #1
   4b4a8:	add	w1, w0, #0x4c
   4b4ac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b4b0:	ubfx	x0, x0, #30, #1
   4b4b4:	add	w1, w0, #0x54
   4b4b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b4bc:	tbnz	w0, #14, 4b4cc <aarch64_opcode_lookup@@Base+0x4018>
   4b4c0:	ubfx	x0, x0, #30, #1
   4b4c4:	add	w1, w0, #0x50
   4b4c8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b4cc:	ubfx	x0, x0, #30, #1
   4b4d0:	add	w1, w0, #0x58
   4b4d4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b4d8:	tbnz	w0, #13, 4b4f8 <aarch64_opcode_lookup@@Base+0x4044>
   4b4dc:	tbnz	w0, #14, 4b4ec <aarch64_opcode_lookup@@Base+0x4038>
   4b4e0:	ubfx	x0, x0, #30, #1
   4b4e4:	add	w1, w0, #0x4e
   4b4e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b4ec:	ubfx	x0, x0, #30, #1
   4b4f0:	add	w1, w0, #0x56
   4b4f4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b4f8:	tbnz	w0, #14, 4b508 <aarch64_opcode_lookup@@Base+0x4054>
   4b4fc:	ubfx	x0, x0, #30, #1
   4b500:	add	w1, w0, #0x52
   4b504:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b508:	ubfx	x0, x0, #30, #1
   4b50c:	add	w1, w0, #0x5a
   4b510:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b514:	tbnz	w0, #12, 4b554 <aarch64_opcode_lookup@@Base+0x40a0>
   4b518:	tbnz	w0, #13, 4b530 <aarch64_opcode_lookup@@Base+0x407c>
   4b51c:	tbz	w0, #14, 4cfd4 <aarch64_opcode_lookup@@Base+0x5b20>
   4b520:	tbz	w0, #16, 4cfdc <aarch64_opcode_lookup@@Base+0x5b28>
   4b524:	ubfx	x0, x0, #30, #1
   4b528:	add	w1, w0, #0xe2
   4b52c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b530:	tbnz	w0, #14, 4b544 <aarch64_opcode_lookup@@Base+0x4090>
   4b534:	tbz	w0, #16, 4cfe4 <aarch64_opcode_lookup@@Base+0x5b30>
   4b538:	ubfx	x0, x0, #30, #1
   4b53c:	add	w1, w0, #0xde
   4b540:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b544:	tbz	w0, #16, 4cfec <aarch64_opcode_lookup@@Base+0x5b38>
   4b548:	ubfx	x0, x0, #30, #1
   4b54c:	add	w1, w0, #0xe4
   4b550:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b554:	tbnz	w0, #13, 4b56c <aarch64_opcode_lookup@@Base+0x40b8>
   4b558:	tst	x0, #0x400000
   4b55c:	mov	w0, #0xf2                  	// #242
   4b560:	mov	w1, #0xf4                  	// #244
   4b564:	csel	w1, w0, w1, eq  // eq = none
   4b568:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b56c:	tbnz	w0, #14, 4cff4 <aarch64_opcode_lookup@@Base+0x5b40>
   4b570:	tbnz	w0, #16, 4b588 <aarch64_opcode_lookup@@Base+0x40d4>
   4b574:	tst	x0, #0x100000
   4b578:	mov	w0, #0xd7                  	// #215
   4b57c:	mov	w1, #0x21                  	// #33
   4b580:	csel	w1, w0, w1, eq  // eq = none
   4b584:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b588:	ubfx	x0, x0, #30, #1
   4b58c:	add	w1, w0, #0xe0
   4b590:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b594:	tbnz	w0, #11, 4b5f4 <aarch64_opcode_lookup@@Base+0x4140>
   4b598:	tbnz	w0, #12, 4b5c8 <aarch64_opcode_lookup@@Base+0x4114>
   4b59c:	tbnz	w0, #13, 4b5b4 <aarch64_opcode_lookup@@Base+0x4100>
   4b5a0:	tst	x0, #0x4000
   4b5a4:	mov	w0, #0x140                 	// #320
   4b5a8:	mov	w1, #0x147                 	// #327
   4b5ac:	csel	w1, w0, w1, eq  // eq = none
   4b5b0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b5b4:	tst	x0, #0x4000
   4b5b8:	mov	w0, #0x143                 	// #323
   4b5bc:	mov	w1, #0x14b                 	// #331
   4b5c0:	csel	w1, w0, w1, eq  // eq = none
   4b5c4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b5c8:	tbnz	w0, #13, 4b5e0 <aarch64_opcode_lookup@@Base+0x412c>
   4b5cc:	tst	x0, #0x4000
   4b5d0:	mov	w0, #0x142                 	// #322
   4b5d4:	mov	w1, #0x149                 	// #329
   4b5d8:	csel	w1, w0, w1, eq  // eq = none
   4b5dc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b5e0:	tst	x0, #0x4000
   4b5e4:	mov	w0, #0x145                 	// #325
   4b5e8:	mov	w1, #0x14d                 	// #333
   4b5ec:	csel	w1, w0, w1, eq  // eq = none
   4b5f0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b5f4:	tbnz	w0, #12, 4b624 <aarch64_opcode_lookup@@Base+0x4170>
   4b5f8:	tbnz	w0, #13, 4b610 <aarch64_opcode_lookup@@Base+0x415c>
   4b5fc:	tst	x0, #0x4000
   4b600:	mov	w0, #0x141                 	// #321
   4b604:	mov	w1, #0x148                 	// #328
   4b608:	csel	w1, w0, w1, eq  // eq = none
   4b60c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b610:	tst	x0, #0x4000
   4b614:	mov	w0, #0x144                 	// #324
   4b618:	mov	w1, #0x14c                 	// #332
   4b61c:	csel	w1, w0, w1, eq  // eq = none
   4b620:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b624:	tbnz	w0, #13, 4b658 <aarch64_opcode_lookup@@Base+0x41a4>
   4b628:	tbnz	w0, #14, 4cffc <aarch64_opcode_lookup@@Base+0x5b48>
   4b62c:	tbnz	w0, #22, 4b644 <aarch64_opcode_lookup@@Base+0x4190>
   4b630:	tst	x0, #0x800000
   4b634:	mov	w0, #0x164                 	// #356
   4b638:	mov	w1, #0x170                 	// #368
   4b63c:	csel	w1, w0, w1, eq  // eq = none
   4b640:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b644:	tst	x0, #0x800000
   4b648:	mov	w0, #0x165                 	// #357
   4b64c:	mov	w1, #0x171                 	// #369
   4b650:	csel	w1, w0, w1, eq  // eq = none
   4b654:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b658:	tst	x0, #0x4000
   4b65c:	mov	w0, #0x146                 	// #326
   4b660:	mov	w1, #0x14e                 	// #334
   4b664:	csel	w1, w0, w1, eq  // eq = none
   4b668:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b66c:	tbnz	w0, #10, 4bac0 <aarch64_opcode_lookup@@Base+0x460c>
   4b670:	tbnz	w0, #11, 4b748 <aarch64_opcode_lookup@@Base+0x4294>
   4b674:	tbnz	w0, #12, 4b71c <aarch64_opcode_lookup@@Base+0x4268>
   4b678:	tbnz	w0, #13, 4b6d0 <aarch64_opcode_lookup@@Base+0x421c>
   4b67c:	tbnz	w0, #14, 4b6a8 <aarch64_opcode_lookup@@Base+0x41f4>
   4b680:	tbnz	w0, #29, 4b69c <aarch64_opcode_lookup@@Base+0x41e8>
   4b684:	tbz	w0, #30, 4d004 <aarch64_opcode_lookup@@Base+0x5b50>
   4b688:	cmp	w0, #0x0
   4b68c:	mov	w0, #0x3d                  	// #61
   4b690:	mov	w1, #0x925                 	// #2341
   4b694:	csel	w1, w0, w1, ge  // ge = tcont
   4b698:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b69c:	ubfx	x0, x0, #30, #1
   4b6a0:	add	w1, w0, #0x5c
   4b6a4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b6a8:	tbnz	w0, #29, 4b6c4 <aarch64_opcode_lookup@@Base+0x4210>
   4b6ac:	tbz	w0, #30, 4d00c <aarch64_opcode_lookup@@Base+0x5b58>
   4b6b0:	cmp	w0, #0x0
   4b6b4:	mov	w0, #0x45                  	// #69
   4b6b8:	mov	w1, #0x932                 	// #2354
   4b6bc:	csel	w1, w0, w1, ge  // ge = tcont
   4b6c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b6c4:	ubfx	x0, x0, #30, #1
   4b6c8:	add	w1, w0, #0x60
   4b6cc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b6d0:	tbnz	w0, #14, 4b6f0 <aarch64_opcode_lookup@@Base+0x423c>
   4b6d4:	tbnz	w0, #29, 4b6e4 <aarch64_opcode_lookup@@Base+0x4230>
   4b6d8:	ubfx	x0, x0, #30, #1
   4b6dc:	add	w1, w0, #0x40
   4b6e0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b6e4:	ubfx	x0, x0, #30, #1
   4b6e8:	add	w1, w0, #0x5e
   4b6ec:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b6f0:	tbnz	w0, #22, 4b708 <aarch64_opcode_lookup@@Base+0x4254>
   4b6f4:	tst	x0, #0x40000000
   4b6f8:	mov	w0, #0x48                  	// #72
   4b6fc:	mov	w1, #0x4a                  	// #74
   4b700:	csel	w1, w0, w1, eq  // eq = none
   4b704:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b708:	tst	x0, #0x40000000
   4b70c:	mov	w0, #0x49                  	// #73
   4b710:	mov	w1, #0x4b                  	// #75
   4b714:	csel	w1, w0, w1, eq  // eq = none
   4b718:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b71c:	tbnz	w0, #13, 4b73c <aarch64_opcode_lookup@@Base+0x4288>
   4b720:	tbnz	w0, #14, 4b730 <aarch64_opcode_lookup@@Base+0x427c>
   4b724:	ubfx	x0, x0, #30, #1
   4b728:	add	w1, w0, #0x3e
   4b72c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b730:	ubfx	x0, x0, #30, #1
   4b734:	add	w1, w0, #0x46
   4b738:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b73c:	ubfx	x0, x0, #30, #1
   4b740:	add	w1, w0, #0x42
   4b744:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b748:	tbnz	w0, #12, 4b8d0 <aarch64_opcode_lookup@@Base+0x441c>
   4b74c:	tbnz	w0, #13, 4b820 <aarch64_opcode_lookup@@Base+0x436c>
   4b750:	tbnz	w0, #14, 4b79c <aarch64_opcode_lookup@@Base+0x42e8>
   4b754:	tbnz	w0, #29, 4b78c <aarch64_opcode_lookup@@Base+0x42d8>
   4b758:	tbnz	w0, #31, 4d014 <aarch64_opcode_lookup@@Base+0x5b60>
   4b75c:	tbz	w0, #16, 4d01c <aarch64_opcode_lookup@@Base+0x5b68>
   4b760:	tbnz	w0, #19, 4b778 <aarch64_opcode_lookup@@Base+0x42c4>
   4b764:	tst	x0, #0x800000
   4b768:	mov	w0, #0xb6                  	// #182
   4b76c:	mov	w1, #0xca                  	// #202
   4b770:	csel	w1, w0, w1, eq  // eq = none
   4b774:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b778:	tst	x0, #0x800000
   4b77c:	mov	w0, #0xb7                  	// #183
   4b780:	mov	w1, #0xcb                  	// #203
   4b784:	csel	w1, w0, w1, eq  // eq = none
   4b788:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b78c:	tbz	w0, #16, 4d024 <aarch64_opcode_lookup@@Base+0x5b70>
   4b790:	ubfx	x0, x0, #19, #1
   4b794:	add	w1, w0, #0xe6
   4b798:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b79c:	tbnz	w0, #23, 4b7c8 <aarch64_opcode_lookup@@Base+0x4314>
   4b7a0:	tbnz	w0, #29, 4b7b8 <aarch64_opcode_lookup@@Base+0x4304>
   4b7a4:	tbnz	w0, #31, 4d02c <aarch64_opcode_lookup@@Base+0x5b78>
   4b7a8:	tbz	w0, #16, 4d034 <aarch64_opcode_lookup@@Base+0x5b80>
   4b7ac:	ubfx	x0, x0, #19, #1
   4b7b0:	add	w1, w0, #0xbe
   4b7b4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b7b8:	tbz	w0, #16, 4d03c <aarch64_opcode_lookup@@Base+0x5b88>
   4b7bc:	ubfx	x0, x0, #19, #1
   4b7c0:	add	w1, w0, #0xee
   4b7c4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b7c8:	tbnz	w0, #16, 4b80c <aarch64_opcode_lookup@@Base+0x4358>
   4b7cc:	tbnz	w0, #19, 4b7f8 <aarch64_opcode_lookup@@Base+0x4344>
   4b7d0:	tbnz	w0, #20, 4b7e8 <aarch64_opcode_lookup@@Base+0x4334>
   4b7d4:	tst	x0, #0x20000000
   4b7d8:	mov	w0, #0xc2                  	// #194
   4b7dc:	mov	w1, #0xf5                  	// #245
   4b7e0:	csel	w1, w0, w1, eq  // eq = none
   4b7e4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b7e8:	tst	x0, #0x20000000
   4b7ec:	cset	w0, eq  // eq = none
   4b7f0:	add	w1, w0, #0x28
   4b7f4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b7f8:	tst	x0, #0x20000000
   4b7fc:	mov	w0, #0xc3                  	// #195
   4b800:	mov	w1, #0xf6                  	// #246
   4b804:	csel	w1, w0, w1, eq  // eq = none
   4b808:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b80c:	tst	x0, #0x20000000
   4b810:	mov	w0, #0xd2                  	// #210
   4b814:	mov	w1, #0x101                 	// #257
   4b818:	csel	w1, w0, w1, eq  // eq = none
   4b81c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b820:	tbnz	w0, #14, 4b8b4 <aarch64_opcode_lookup@@Base+0x4400>
   4b824:	tbnz	w0, #16, 4b840 <aarch64_opcode_lookup@@Base+0x438c>
   4b828:	tbz	w0, #20, 4d044 <aarch64_opcode_lookup@@Base+0x5b90>
   4b82c:	tst	x0, #0x20000000
   4b830:	mov	w0, #0x1e                  	// #30
   4b834:	mov	w1, #0x22                  	// #34
   4b838:	csel	w1, w0, w1, eq  // eq = none
   4b83c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b840:	tbnz	w0, #19, 4b888 <aarch64_opcode_lookup@@Base+0x43d4>
   4b844:	tbnz	w0, #20, 4b874 <aarch64_opcode_lookup@@Base+0x43c0>
   4b848:	tbnz	w0, #23, 4b860 <aarch64_opcode_lookup@@Base+0x43ac>
   4b84c:	tst	x0, #0x20000000
   4b850:	mov	w0, #0xba                  	// #186
   4b854:	mov	w1, #0xea                  	// #234
   4b858:	csel	w1, w0, w1, eq  // eq = none
   4b85c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b860:	tst	x0, #0x20000000
   4b864:	mov	w0, #0xce                  	// #206
   4b868:	mov	w1, #0xfd                  	// #253
   4b86c:	csel	w1, w0, w1, eq  // eq = none
   4b870:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b874:	tst	x0, #0x20000000
   4b878:	mov	w0, #0x1f                  	// #31
   4b87c:	mov	w1, #0x23                  	// #35
   4b880:	csel	w1, w0, w1, eq  // eq = none
   4b884:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b888:	tbnz	w0, #23, 4b8a0 <aarch64_opcode_lookup@@Base+0x43ec>
   4b88c:	tst	x0, #0x20000000
   4b890:	mov	w0, #0xbb                  	// #187
   4b894:	mov	w1, #0xeb                  	// #235
   4b898:	csel	w1, w0, w1, eq  // eq = none
   4b89c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b8a0:	tst	x0, #0x20000000
   4b8a4:	mov	w0, #0xcf                  	// #207
   4b8a8:	mov	w1, #0xfe                  	// #254
   4b8ac:	csel	w1, w0, w1, eq  // eq = none
   4b8b0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b8b4:	tbnz	w0, #16, 4b8c4 <aarch64_opcode_lookup@@Base+0x4410>
   4b8b8:	ubfx	x0, x0, #19, #1
   4b8bc:	add	w1, w0, #0xc6
   4b8c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b8c4:	ubfx	x0, x0, #29, #1
   4b8c8:	add	w1, w0, #0x9e
   4b8cc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b8d0:	tbnz	w0, #13, 4b9d8 <aarch64_opcode_lookup@@Base+0x4524>
   4b8d4:	tbnz	w0, #14, 4b94c <aarch64_opcode_lookup@@Base+0x4498>
   4b8d8:	tbnz	w0, #16, 4b8f0 <aarch64_opcode_lookup@@Base+0x443c>
   4b8dc:	tst	x0, #0x20000000
   4b8e0:	mov	w0, #0xab                  	// #171
   4b8e4:	mov	w1, #0xdc                  	// #220
   4b8e8:	csel	w1, w0, w1, eq  // eq = none
   4b8ec:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b8f0:	tbnz	w0, #19, 4b920 <aarch64_opcode_lookup@@Base+0x446c>
   4b8f4:	tbnz	w0, #23, 4b90c <aarch64_opcode_lookup@@Base+0x4458>
   4b8f8:	tst	x0, #0x20000000
   4b8fc:	mov	w0, #0xb8                  	// #184
   4b900:	mov	w1, #0xe8                  	// #232
   4b904:	csel	w1, w0, w1, eq  // eq = none
   4b908:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b90c:	tst	x0, #0x20000000
   4b910:	mov	w0, #0xcc                  	// #204
   4b914:	mov	w1, #0xfb                  	// #251
   4b918:	csel	w1, w0, w1, eq  // eq = none
   4b91c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b920:	tbnz	w0, #23, 4b938 <aarch64_opcode_lookup@@Base+0x4484>
   4b924:	tst	x0, #0x20000000
   4b928:	mov	w0, #0xb9                  	// #185
   4b92c:	mov	w1, #0xe9                  	// #233
   4b930:	csel	w1, w0, w1, eq  // eq = none
   4b934:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b938:	tst	x0, #0x20000000
   4b93c:	mov	w0, #0xcd                  	// #205
   4b940:	mov	w1, #0xfc                  	// #252
   4b944:	csel	w1, w0, w1, eq  // eq = none
   4b948:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b94c:	tbnz	w0, #16, 4b97c <aarch64_opcode_lookup@@Base+0x44c8>
   4b950:	tbnz	w0, #19, 4b968 <aarch64_opcode_lookup@@Base+0x44b4>
   4b954:	tst	x0, #0x20000000
   4b958:	mov	w0, #0xc4                  	// #196
   4b95c:	mov	w1, #0xf7                  	// #247
   4b960:	csel	w1, w0, w1, eq  // eq = none
   4b964:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b968:	tst	x0, #0x20000000
   4b96c:	mov	w0, #0xc5                  	// #197
   4b970:	mov	w1, #0xf8                  	// #248
   4b974:	csel	w1, w0, w1, eq  // eq = none
   4b978:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b97c:	tbnz	w0, #19, 4b9ac <aarch64_opcode_lookup@@Base+0x44f8>
   4b980:	tbnz	w0, #23, 4b998 <aarch64_opcode_lookup@@Base+0x44e4>
   4b984:	tst	x0, #0x20000000
   4b988:	mov	w0, #0xc0                  	// #192
   4b98c:	mov	w1, #0xf0                  	// #240
   4b990:	csel	w1, w0, w1, eq  // eq = none
   4b994:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b998:	tst	x0, #0x20000000
   4b99c:	mov	w0, #0xd3                  	// #211
   4b9a0:	mov	w1, #0x102                 	// #258
   4b9a4:	csel	w1, w0, w1, eq  // eq = none
   4b9a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b9ac:	tbnz	w0, #23, 4b9c4 <aarch64_opcode_lookup@@Base+0x4510>
   4b9b0:	tst	x0, #0x20000000
   4b9b4:	mov	w0, #0xc1                  	// #193
   4b9b8:	mov	w1, #0xf1                  	// #241
   4b9bc:	csel	w1, w0, w1, eq  // eq = none
   4b9c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b9c4:	tst	x0, #0x20000000
   4b9c8:	mov	w0, #0xd4                  	// #212
   4b9cc:	mov	w1, #0x103                 	// #259
   4b9d0:	csel	w1, w0, w1, eq  // eq = none
   4b9d4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b9d8:	tbnz	w0, #14, 4ba54 <aarch64_opcode_lookup@@Base+0x45a0>
   4b9dc:	tbnz	w0, #16, 4b9f4 <aarch64_opcode_lookup@@Base+0x4540>
   4b9e0:	tst	x0, #0x20000000
   4b9e4:	mov	w0, #0xad                  	// #173
   4b9e8:	mov	w1, #0xdd                  	// #221
   4b9ec:	csel	w1, w0, w1, eq  // eq = none
   4b9f0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4b9f4:	tbnz	w0, #19, 4ba28 <aarch64_opcode_lookup@@Base+0x4574>
   4b9f8:	tbnz	w0, #20, 4d04c <aarch64_opcode_lookup@@Base+0x5b98>
   4b9fc:	tbnz	w0, #23, 4ba14 <aarch64_opcode_lookup@@Base+0x4560>
   4ba00:	tst	x0, #0x20000000
   4ba04:	mov	w0, #0xbc                  	// #188
   4ba08:	mov	w1, #0xec                  	// #236
   4ba0c:	csel	w1, w0, w1, eq  // eq = none
   4ba10:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ba14:	tst	x0, #0x20000000
   4ba18:	mov	w0, #0xd0                  	// #208
   4ba1c:	mov	w1, #0xff                  	// #255
   4ba20:	csel	w1, w0, w1, eq  // eq = none
   4ba24:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ba28:	tbnz	w0, #23, 4ba40 <aarch64_opcode_lookup@@Base+0x458c>
   4ba2c:	tst	x0, #0x20000000
   4ba30:	mov	w0, #0xbd                  	// #189
   4ba34:	mov	w1, #0xed                  	// #237
   4ba38:	csel	w1, w0, w1, eq  // eq = none
   4ba3c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ba40:	tst	x0, #0x20000000
   4ba44:	mov	w0, #0xd1                  	// #209
   4ba48:	mov	w1, #0x100                 	// #256
   4ba4c:	csel	w1, w0, w1, eq  // eq = none
   4ba50:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ba54:	tbnz	w0, #16, 4baac <aarch64_opcode_lookup@@Base+0x45f8>
   4ba58:	tbnz	w0, #19, 4ba98 <aarch64_opcode_lookup@@Base+0x45e4>
   4ba5c:	tbnz	w0, #20, 4ba74 <aarch64_opcode_lookup@@Base+0x45c0>
   4ba60:	tst	x0, #0x20000000
   4ba64:	mov	w0, #0xc8                  	// #200
   4ba68:	mov	w1, #0xf9                  	// #249
   4ba6c:	csel	w1, w0, w1, eq  // eq = none
   4ba70:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ba74:	tbnz	w0, #23, 4ba88 <aarch64_opcode_lookup@@Base+0x45d4>
   4ba78:	tst	x0, #0x20000000
   4ba7c:	cset	w0, eq  // eq = none
   4ba80:	add	w1, w0, #0x26
   4ba84:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ba88:	tst	x0, #0x20000000
   4ba8c:	cset	w0, eq  // eq = none
   4ba90:	add	w1, w0, #0x2a
   4ba94:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ba98:	tst	x0, #0x20000000
   4ba9c:	mov	w0, #0xc9                  	// #201
   4baa0:	mov	w1, #0xfa                  	// #250
   4baa4:	csel	w1, w0, w1, eq  // eq = none
   4baa8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4baac:	tbnz	w0, #19, 4d054 <aarch64_opcode_lookup@@Base+0x5ba0>
   4bab0:	tbnz	w0, #23, 4d05c <aarch64_opcode_lookup@@Base+0x5ba8>
   4bab4:	ubfx	x0, x0, #29, #1
   4bab8:	add	w1, w0, #0xa0
   4babc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bac0:	tbnz	w0, #11, 4bbd4 <aarch64_opcode_lookup@@Base+0x4720>
   4bac4:	tbnz	w0, #12, 4bb48 <aarch64_opcode_lookup@@Base+0x4694>
   4bac8:	tbnz	w0, #13, 4bb18 <aarch64_opcode_lookup@@Base+0x4664>
   4bacc:	tbnz	w0, #14, 4bae8 <aarch64_opcode_lookup@@Base+0x4634>
   4bad0:	tbnz	w0, #29, 4d064 <aarch64_opcode_lookup@@Base+0x5bb0>
   4bad4:	cmp	w0, #0x0
   4bad8:	mov	w0, #0x11b                 	// #283
   4badc:	mov	w1, #0x926                 	// #2342
   4bae0:	csel	w1, w0, w1, ge  // ge = tcont
   4bae4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bae8:	tbnz	w0, #23, 4bb04 <aarch64_opcode_lookup@@Base+0x4650>
   4baec:	tbnz	w0, #29, 4d06c <aarch64_opcode_lookup@@Base+0x5bb8>
   4baf0:	cmp	w0, #0x0
   4baf4:	mov	w0, #0x123                 	// #291
   4baf8:	mov	w1, #0x933                 	// #2355
   4bafc:	csel	w1, w0, w1, ge  // ge = tcont
   4bb00:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bb04:	tst	x0, #0x20000000
   4bb08:	mov	w0, #0x133                 	// #307
   4bb0c:	mov	w1, #0x166                 	// #358
   4bb10:	csel	w1, w0, w1, eq  // eq = none
   4bb14:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bb18:	tbnz	w0, #14, 4bb30 <aarch64_opcode_lookup@@Base+0x467c>
   4bb1c:	tst	x0, #0x20000000
   4bb20:	mov	w0, #0x11f                 	// #287
   4bb24:	mov	w1, #0x153                 	// #339
   4bb28:	csel	w1, w0, w1, eq  // eq = none
   4bb2c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bb30:	tbnz	w0, #23, 4d074 <aarch64_opcode_lookup@@Base+0x5bc0>
   4bb34:	tst	x0, #0x20000000
   4bb38:	mov	w0, #0x12b                 	// #299
   4bb3c:	mov	w1, #0x15c                 	// #348
   4bb40:	csel	w1, w0, w1, eq  // eq = none
   4bb44:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bb48:	tbnz	w0, #13, 4bb90 <aarch64_opcode_lookup@@Base+0x46dc>
   4bb4c:	tbnz	w0, #14, 4bb64 <aarch64_opcode_lookup@@Base+0x46b0>
   4bb50:	tst	x0, #0x20000000
   4bb54:	mov	w0, #0x11d                 	// #285
   4bb58:	mov	w1, #0x151                 	// #337
   4bb5c:	csel	w1, w0, w1, eq  // eq = none
   4bb60:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bb64:	tbnz	w0, #23, 4bb7c <aarch64_opcode_lookup@@Base+0x46c8>
   4bb68:	tst	x0, #0x20000000
   4bb6c:	mov	w0, #0x127                 	// #295
   4bb70:	mov	w1, #0x158                 	// #344
   4bb74:	csel	w1, w0, w1, eq  // eq = none
   4bb78:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bb7c:	tst	x0, #0x20000000
   4bb80:	mov	w0, #0x137                 	// #311
   4bb84:	mov	w1, #0x168                 	// #360
   4bb88:	csel	w1, w0, w1, eq  // eq = none
   4bb8c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bb90:	tbnz	w0, #14, 4bba8 <aarch64_opcode_lookup@@Base+0x46f4>
   4bb94:	tst	x0, #0x20000000
   4bb98:	mov	w0, #0x121                 	// #289
   4bb9c:	mov	w1, #0x155                 	// #341
   4bba0:	csel	w1, w0, w1, eq  // eq = none
   4bba4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bba8:	tbnz	w0, #23, 4bbc0 <aarch64_opcode_lookup@@Base+0x470c>
   4bbac:	tst	x0, #0x20000000
   4bbb0:	mov	w0, #0x12d                 	// #301
   4bbb4:	mov	w1, #0x160                 	// #352
   4bbb8:	csel	w1, w0, w1, eq  // eq = none
   4bbbc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bbc0:	tst	x0, #0x20000000
   4bbc4:	mov	w0, #0x139                 	// #313
   4bbc8:	mov	w1, #0x16e                 	// #366
   4bbcc:	csel	w1, w0, w1, eq  // eq = none
   4bbd0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bbd4:	tbnz	w0, #12, 4bc78 <aarch64_opcode_lookup@@Base+0x47c4>
   4bbd8:	tbnz	w0, #13, 4bc2c <aarch64_opcode_lookup@@Base+0x4778>
   4bbdc:	tbnz	w0, #14, 4bbf8 <aarch64_opcode_lookup@@Base+0x4744>
   4bbe0:	tbnz	w0, #29, 4d07c <aarch64_opcode_lookup@@Base+0x5bc8>
   4bbe4:	cmp	w0, #0x0
   4bbe8:	mov	w0, #0x11c                 	// #284
   4bbec:	mov	w1, #0x92a                 	// #2346
   4bbf0:	csel	w1, w0, w1, ge  // ge = tcont
   4bbf4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bbf8:	tbnz	w0, #23, 4bc14 <aarch64_opcode_lookup@@Base+0x4760>
   4bbfc:	tbz	w0, #29, 4d084 <aarch64_opcode_lookup@@Base+0x5bd0>
   4bc00:	tst	x0, #0x40000000
   4bc04:	mov	w0, #0x938                 	// #2360
   4bc08:	mov	w1, #0x93c                 	// #2364
   4bc0c:	csel	w1, w0, w1, eq  // eq = none
   4bc10:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bc14:	tbz	w0, #29, 4d08c <aarch64_opcode_lookup@@Base+0x5bd8>
   4bc18:	tst	x0, #0x40000000
   4bc1c:	mov	w0, #0x939                 	// #2361
   4bc20:	mov	w1, #0x93d                 	// #2365
   4bc24:	csel	w1, w0, w1, eq  // eq = none
   4bc28:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bc2c:	tbnz	w0, #14, 4bc44 <aarch64_opcode_lookup@@Base+0x4790>
   4bc30:	tst	x0, #0x20000000
   4bc34:	mov	w0, #0x120                 	// #288
   4bc38:	mov	w1, #0x154                 	// #340
   4bc3c:	csel	w1, w0, w1, eq  // eq = none
   4bc40:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bc44:	tbnz	w0, #23, 4bc60 <aarch64_opcode_lookup@@Base+0x47ac>
   4bc48:	tbnz	w0, #29, 4d094 <aarch64_opcode_lookup@@Base+0x5be0>
   4bc4c:	tst	x0, #0x40000000
   4bc50:	mov	w0, #0x936                 	// #2358
   4bc54:	mov	w1, #0x93a                 	// #2362
   4bc58:	csel	w1, w0, w1, eq  // eq = none
   4bc5c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bc60:	tbnz	w0, #29, 4d09c <aarch64_opcode_lookup@@Base+0x5be8>
   4bc64:	tst	x0, #0x40000000
   4bc68:	mov	w0, #0x937                 	// #2359
   4bc6c:	mov	w1, #0x93b                 	// #2363
   4bc70:	csel	w1, w0, w1, eq  // eq = none
   4bc74:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bc78:	tbnz	w0, #13, 4bca8 <aarch64_opcode_lookup@@Base+0x47f4>
   4bc7c:	tbnz	w0, #14, 4bc94 <aarch64_opcode_lookup@@Base+0x47e0>
   4bc80:	tst	x0, #0x20000000
   4bc84:	mov	w0, #0x11e                 	// #286
   4bc88:	mov	w1, #0x152                 	// #338
   4bc8c:	csel	w1, w0, w1, eq  // eq = none
   4bc90:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bc94:	tst	x0, #0x20000000
   4bc98:	mov	w0, #0x129                 	// #297
   4bc9c:	mov	w1, #0x15a                 	// #346
   4bca0:	csel	w1, w0, w1, eq  // eq = none
   4bca4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bca8:	tbz	w0, #14, 4d0a4 <aarch64_opcode_lookup@@Base+0x5bf0>
   4bcac:	tbnz	w0, #23, 4d0ac <aarch64_opcode_lookup@@Base+0x5bf8>
   4bcb0:	tst	x0, #0x20000000
   4bcb4:	mov	w0, #0x12f                 	// #303
   4bcb8:	mov	w1, #0x162                 	// #354
   4bcbc:	csel	w1, w0, w1, eq  // eq = none
   4bcc0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bcc4:	tbnz	w0, #10, 4c194 <aarch64_opcode_lookup@@Base+0x4ce0>
   4bcc8:	tbnz	w0, #11, 4be54 <aarch64_opcode_lookup@@Base+0x49a0>
   4bccc:	tbnz	w0, #12, 4be30 <aarch64_opcode_lookup@@Base+0x497c>
   4bcd0:	tbnz	w0, #13, 4be04 <aarch64_opcode_lookup@@Base+0x4950>
   4bcd4:	tbnz	w0, #14, 4bd78 <aarch64_opcode_lookup@@Base+0x48c4>
   4bcd8:	tbnz	w0, #16, 4bd2c <aarch64_opcode_lookup@@Base+0x4878>
   4bcdc:	tbnz	w0, #17, 4bd10 <aarch64_opcode_lookup@@Base+0x485c>
   4bce0:	tbnz	w0, #18, 4d0b4 <aarch64_opcode_lookup@@Base+0x5c00>
   4bce4:	tbnz	w0, #19, 4bcfc <aarch64_opcode_lookup@@Base+0x4848>
   4bce8:	tst	x0, #0x100000
   4bcec:	mov	w0, #0x2ff                 	// #767
   4bcf0:	mov	w1, #0x313                 	// #787
   4bcf4:	csel	w1, w0, w1, eq  // eq = none
   4bcf8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bcfc:	tst	x0, #0x100000
   4bd00:	mov	w0, #0x30f                 	// #783
   4bd04:	mov	w1, #0x317                 	// #791
   4bd08:	csel	w1, w0, w1, eq  // eq = none
   4bd0c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bd10:	tbz	w0, #18, 4d0bc <aarch64_opcode_lookup@@Base+0x5c08>
   4bd14:	tbz	w0, #19, 4d0c4 <aarch64_opcode_lookup@@Base+0x5c10>
   4bd18:	tst	x0, #0x100000
   4bd1c:	mov	w0, #0x31b                 	// #795
   4bd20:	mov	w1, #0x31d                 	// #797
   4bd24:	csel	w1, w0, w1, eq  // eq = none
   4bd28:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bd2c:	tbnz	w0, #17, 4bd60 <aarch64_opcode_lookup@@Base+0x48ac>
   4bd30:	tbnz	w0, #18, 4d0cc <aarch64_opcode_lookup@@Base+0x5c18>
   4bd34:	tbnz	w0, #19, 4bd4c <aarch64_opcode_lookup@@Base+0x4898>
   4bd38:	tst	x0, #0x100000
   4bd3c:	mov	w0, #0x301                 	// #769
   4bd40:	mov	w1, #0x315                 	// #789
   4bd44:	csel	w1, w0, w1, eq  // eq = none
   4bd48:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bd4c:	tst	x0, #0x100000
   4bd50:	mov	w0, #0x311                 	// #785
   4bd54:	mov	w1, #0x319                 	// #793
   4bd58:	csel	w1, w0, w1, eq  // eq = none
   4bd5c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bd60:	tbz	w0, #18, 4d0d4 <aarch64_opcode_lookup@@Base+0x5c20>
   4bd64:	tst	x0, #0x80000
   4bd68:	mov	w0, #0x30d                 	// #781
   4bd6c:	mov	w1, #0x31c                 	// #796
   4bd70:	csel	w1, w0, w1, eq  // eq = none
   4bd74:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bd78:	tbnz	w0, #17, 4bde8 <aarch64_opcode_lookup@@Base+0x4934>
   4bd7c:	tbnz	w0, #15, 4bdb4 <aarch64_opcode_lookup@@Base+0x4900>
   4bd80:	tbnz	w0, #16, 4bd9c <aarch64_opcode_lookup@@Base+0x48e8>
   4bd84:	tbnz	w0, #18, 4d0dc <aarch64_opcode_lookup@@Base+0x5c28>
   4bd88:	tst	x0, #0x80000
   4bd8c:	mov	w0, #0x330                 	// #816
   4bd90:	mov	w1, #0x32c                 	// #812
   4bd94:	csel	w1, w0, w1, eq  // eq = none
   4bd98:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bd9c:	tbnz	w0, #18, 4d0e4 <aarch64_opcode_lookup@@Base+0x5c30>
   4bda0:	tst	x0, #0x80000
   4bda4:	mov	w0, #0x334                 	// #820
   4bda8:	mov	w1, #0x32e                 	// #814
   4bdac:	csel	w1, w0, w1, eq  // eq = none
   4bdb0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bdb4:	tbnz	w0, #16, 4bdd0 <aarch64_opcode_lookup@@Base+0x491c>
   4bdb8:	tbnz	w0, #18, 4d0ec <aarch64_opcode_lookup@@Base+0x5c38>
   4bdbc:	tst	x0, #0x80000
   4bdc0:	mov	w0, #0x332                 	// #818
   4bdc4:	mov	w1, #0x32d                 	// #813
   4bdc8:	csel	w1, w0, w1, eq  // eq = none
   4bdcc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bdd0:	tbnz	w0, #18, 4d0f4 <aarch64_opcode_lookup@@Base+0x5c40>
   4bdd4:	tst	x0, #0x80000
   4bdd8:	mov	w0, #0x336                 	// #822
   4bddc:	mov	w1, #0x32f                 	// #815
   4bde0:	csel	w1, w0, w1, eq  // eq = none
   4bde4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bde8:	tbz	w0, #18, 4d0fc <aarch64_opcode_lookup@@Base+0x5c48>
   4bdec:	tbnz	w0, #15, 4d104 <aarch64_opcode_lookup@@Base+0x5c50>
   4bdf0:	tst	x0, #0x10000
   4bdf4:	mov	w0, #0x341                 	// #833
   4bdf8:	mov	w1, #0x343                 	// #835
   4bdfc:	csel	w1, w0, w1, eq  // eq = none
   4be00:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4be04:	tbnz	w0, #3, 4be1c <aarch64_opcode_lookup@@Base+0x4968>
   4be08:	tst	x0, #0x10
   4be0c:	mov	w0, #0x322                 	// #802
   4be10:	mov	w1, #0x324                 	// #804
   4be14:	csel	w1, w0, w1, eq  // eq = none
   4be18:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4be1c:	tst	x0, #0x10
   4be20:	mov	w0, #0x326                 	// #806
   4be24:	mov	w1, #0x328                 	// #808
   4be28:	csel	w1, w0, w1, eq  // eq = none
   4be2c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4be30:	mov	w1, #0x361                 	// #865
   4be34:	tbz	w0, #30, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4be38:	mov	w1, #0x1a7                 	// #423
   4be3c:	tbnz	w0, #13, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4be40:	tst	x0, #0x4000
   4be44:	mov	w0, #0x1a6                 	// #422
   4be48:	mov	w1, #0x1a8                 	// #424
   4be4c:	csel	w1, w0, w1, eq  // eq = none
   4be50:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4be54:	tbnz	w0, #12, 4bfd4 <aarch64_opcode_lookup@@Base+0x4b20>
   4be58:	tbnz	w0, #13, 4bf30 <aarch64_opcode_lookup@@Base+0x4a7c>
   4be5c:	tbnz	w0, #14, 4be90 <aarch64_opcode_lookup@@Base+0x49dc>
   4be60:	tbnz	w0, #15, 4be78 <aarch64_opcode_lookup@@Base+0x49c4>
   4be64:	tst	x0, #0x40000000
   4be68:	mov	w0, #0x347                 	// #839
   4be6c:	mov	w1, #0x2a3                 	// #675
   4be70:	csel	w1, w0, w1, eq  // eq = none
   4be74:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4be78:	tbnz	w0, #29, 4d10c <aarch64_opcode_lookup@@Base+0x5c58>
   4be7c:	tst	x0, #0x40000000
   4be80:	mov	w0, #0x357                 	// #855
   4be84:	mov	w1, #0x1e2                 	// #482
   4be88:	csel	w1, w0, w1, eq  // eq = none
   4be8c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4be90:	tbnz	w0, #15, 4beac <aarch64_opcode_lookup@@Base+0x49f8>
   4be94:	tbnz	w0, #29, 4d114 <aarch64_opcode_lookup@@Base+0x5c60>
   4be98:	tst	x0, #0x40000000
   4be9c:	mov	w0, #0x34f                 	// #847
   4bea0:	mov	w1, #0x1e6                 	// #486
   4bea4:	csel	w1, w0, w1, eq  // eq = none
   4bea8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4beac:	tbnz	w0, #16, 4bf04 <aarch64_opcode_lookup@@Base+0x4a50>
   4beb0:	tbnz	w0, #19, 4bef0 <aarch64_opcode_lookup@@Base+0x4a3c>
   4beb4:	tbnz	w0, #20, 4becc <aarch64_opcode_lookup@@Base+0x4a18>
   4beb8:	tst	x0, #0x20000000
   4bebc:	mov	w0, #0x1ef                 	// #495
   4bec0:	mov	w1, #0x20d                 	// #525
   4bec4:	csel	w1, w0, w1, eq  // eq = none
   4bec8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4becc:	tbnz	w0, #23, 4bee0 <aarch64_opcode_lookup@@Base+0x4a2c>
   4bed0:	tst	x0, #0x20000000
   4bed4:	cset	w0, eq  // eq = none
   4bed8:	add	w1, w0, #0x21a
   4bedc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bee0:	tst	x0, #0x20000000
   4bee4:	cset	w0, eq  // eq = none
   4bee8:	add	w1, w0, #0x220
   4beec:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bef0:	tst	x0, #0x20000000
   4bef4:	mov	w0, #0x1f0                 	// #496
   4bef8:	mov	w1, #0x20e                 	// #526
   4befc:	csel	w1, w0, w1, eq  // eq = none
   4bf00:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bf04:	tbnz	w0, #19, 4bf1c <aarch64_opcode_lookup@@Base+0x4a68>
   4bf08:	tst	x0, #0x20000000
   4bf0c:	mov	w0, #0x1eb                 	// #491
   4bf10:	mov	w1, #0x209                 	// #521
   4bf14:	csel	w1, w0, w1, eq  // eq = none
   4bf18:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bf1c:	tst	x0, #0x20000000
   4bf20:	mov	w0, #0x1ec                 	// #492
   4bf24:	mov	w1, #0x20a                 	// #522
   4bf28:	csel	w1, w0, w1, eq  // eq = none
   4bf2c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bf30:	tbnz	w0, #14, 4bfb0 <aarch64_opcode_lookup@@Base+0x4afc>
   4bf34:	tbnz	w0, #15, 4bf50 <aarch64_opcode_lookup@@Base+0x4a9c>
   4bf38:	tbnz	w0, #29, 4d11c <aarch64_opcode_lookup@@Base+0x5c68>
   4bf3c:	tst	x0, #0x40000000
   4bf40:	mov	w0, #0x34b                 	// #843
   4bf44:	mov	w1, #0x2a5                 	// #677
   4bf48:	csel	w1, w0, w1, eq  // eq = none
   4bf4c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bf50:	tbz	w0, #16, 4d124 <aarch64_opcode_lookup@@Base+0x5c70>
   4bf54:	tbnz	w0, #19, 4bf84 <aarch64_opcode_lookup@@Base+0x4ad0>
   4bf58:	tbnz	w0, #23, 4bf70 <aarch64_opcode_lookup@@Base+0x4abc>
   4bf5c:	tst	x0, #0x20000000
   4bf60:	mov	w0, #0x1e7                 	// #487
   4bf64:	mov	w1, #0x205                 	// #517
   4bf68:	csel	w1, w0, w1, eq  // eq = none
   4bf6c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bf70:	tst	x0, #0x20000000
   4bf74:	mov	w0, #0x1f5                 	// #501
   4bf78:	mov	w1, #0x211                 	// #529
   4bf7c:	csel	w1, w0, w1, eq  // eq = none
   4bf80:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bf84:	tbnz	w0, #23, 4bf9c <aarch64_opcode_lookup@@Base+0x4ae8>
   4bf88:	tst	x0, #0x20000000
   4bf8c:	mov	w0, #0x1e8                 	// #488
   4bf90:	mov	w1, #0x206                 	// #518
   4bf94:	csel	w1, w0, w1, eq  // eq = none
   4bf98:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bf9c:	tst	x0, #0x20000000
   4bfa0:	mov	w0, #0x1f6                 	// #502
   4bfa4:	mov	w1, #0x212                 	// #530
   4bfa8:	csel	w1, w0, w1, eq  // eq = none
   4bfac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bfb0:	tbnz	w0, #15, 4bfc8 <aarch64_opcode_lookup@@Base+0x4b14>
   4bfb4:	tst	x0, #0x20000000
   4bfb8:	mov	w0, #0x353                 	// #851
   4bfbc:	mov	w1, #0x204                 	// #516
   4bfc0:	csel	w1, w0, w1, eq  // eq = none
   4bfc4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bfc8:	ubfx	x0, x0, #19, #1
   4bfcc:	add	w1, w0, #0x1f3
   4bfd0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bfd4:	tbnz	w0, #13, 4c0ac <aarch64_opcode_lookup@@Base+0x4bf8>
   4bfd8:	tbnz	w0, #14, 4c008 <aarch64_opcode_lookup@@Base+0x4b54>
   4bfdc:	tbnz	w0, #15, 4bff4 <aarch64_opcode_lookup@@Base+0x4b40>
   4bfe0:	tst	x0, #0x40000000
   4bfe4:	mov	w0, #0x349                 	// #841
   4bfe8:	mov	w1, #0x2a4                 	// #676
   4bfec:	csel	w1, w0, w1, eq  // eq = none
   4bff0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4bff4:	tst	x0, #0x20000000
   4bff8:	mov	w0, #0x1e3                 	// #483
   4bffc:	mov	w1, #0x200                 	// #512
   4c000:	csel	w1, w0, w1, eq  // eq = none
   4c004:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c008:	tbz	w0, #15, 4d12c <aarch64_opcode_lookup@@Base+0x5c78>
   4c00c:	tbnz	w0, #16, 4c050 <aarch64_opcode_lookup@@Base+0x4b9c>
   4c010:	tbnz	w0, #19, 4c03c <aarch64_opcode_lookup@@Base+0x4b88>
   4c014:	tbnz	w0, #20, 4c02c <aarch64_opcode_lookup@@Base+0x4b78>
   4c018:	tst	x0, #0x20000000
   4c01c:	mov	w0, #0x1f1                 	// #497
   4c020:	mov	w1, #0x20f                 	// #527
   4c024:	csel	w1, w0, w1, eq  // eq = none
   4c028:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c02c:	tst	x0, #0x20000000
   4c030:	cset	w0, eq  // eq = none
   4c034:	add	w1, w0, #0x21c
   4c038:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c03c:	tst	x0, #0x20000000
   4c040:	mov	w0, #0x1f2                 	// #498
   4c044:	mov	w1, #0x210                 	// #528
   4c048:	csel	w1, w0, w1, eq  // eq = none
   4c04c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c050:	tbnz	w0, #19, 4c080 <aarch64_opcode_lookup@@Base+0x4bcc>
   4c054:	tbnz	w0, #23, 4c06c <aarch64_opcode_lookup@@Base+0x4bb8>
   4c058:	tst	x0, #0x20000000
   4c05c:	mov	w0, #0x1ed                 	// #493
   4c060:	mov	w1, #0x20b                 	// #523
   4c064:	csel	w1, w0, w1, eq  // eq = none
   4c068:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c06c:	tst	x0, #0x20000000
   4c070:	mov	w0, #0x1f9                 	// #505
   4c074:	mov	w1, #0x215                 	// #533
   4c078:	csel	w1, w0, w1, eq  // eq = none
   4c07c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c080:	tbnz	w0, #23, 4c098 <aarch64_opcode_lookup@@Base+0x4be4>
   4c084:	tst	x0, #0x20000000
   4c088:	mov	w0, #0x1ee                 	// #494
   4c08c:	mov	w1, #0x20c                 	// #524
   4c090:	csel	w1, w0, w1, eq  // eq = none
   4c094:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c098:	tst	x0, #0x20000000
   4c09c:	mov	w0, #0x1fa                 	// #506
   4c0a0:	mov	w1, #0x216                 	// #534
   4c0a4:	csel	w1, w0, w1, eq  // eq = none
   4c0a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c0ac:	tbnz	w0, #14, 4c144 <aarch64_opcode_lookup@@Base+0x4c90>
   4c0b0:	tbnz	w0, #15, 4c0cc <aarch64_opcode_lookup@@Base+0x4c18>
   4c0b4:	tbnz	w0, #29, 4d134 <aarch64_opcode_lookup@@Base+0x5c80>
   4c0b8:	tst	x0, #0x40000000
   4c0bc:	mov	w0, #0x34d                 	// #845
   4c0c0:	mov	w1, #0x1e0                 	// #480
   4c0c4:	csel	w1, w0, w1, eq  // eq = none
   4c0c8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c0cc:	tbnz	w0, #16, 4c0e4 <aarch64_opcode_lookup@@Base+0x4c30>
   4c0d0:	tst	x0, #0x20000000
   4c0d4:	mov	w0, #0x1e5                 	// #485
   4c0d8:	mov	w1, #0x201                 	// #513
   4c0dc:	csel	w1, w0, w1, eq  // eq = none
   4c0e0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c0e4:	tbnz	w0, #19, 4c118 <aarch64_opcode_lookup@@Base+0x4c64>
   4c0e8:	tbnz	w0, #20, 4d13c <aarch64_opcode_lookup@@Base+0x5c88>
   4c0ec:	tbnz	w0, #23, 4c104 <aarch64_opcode_lookup@@Base+0x4c50>
   4c0f0:	tst	x0, #0x20000000
   4c0f4:	mov	w0, #0x1e9                 	// #489
   4c0f8:	mov	w1, #0x207                 	// #519
   4c0fc:	csel	w1, w0, w1, eq  // eq = none
   4c100:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c104:	tst	x0, #0x20000000
   4c108:	mov	w0, #0x1f7                 	// #503
   4c10c:	mov	w1, #0x213                 	// #531
   4c110:	csel	w1, w0, w1, eq  // eq = none
   4c114:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c118:	tbnz	w0, #23, 4c130 <aarch64_opcode_lookup@@Base+0x4c7c>
   4c11c:	tst	x0, #0x20000000
   4c120:	mov	w0, #0x1ea                 	// #490
   4c124:	mov	w1, #0x208                 	// #520
   4c128:	csel	w1, w0, w1, eq  // eq = none
   4c12c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c130:	tst	x0, #0x20000000
   4c134:	mov	w0, #0x1f8                 	// #504
   4c138:	mov	w1, #0x214                 	// #532
   4c13c:	csel	w1, w0, w1, eq  // eq = none
   4c140:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c144:	tbnz	w0, #15, 4c160 <aarch64_opcode_lookup@@Base+0x4cac>
   4c148:	tbnz	w0, #29, 4d144 <aarch64_opcode_lookup@@Base+0x5c90>
   4c14c:	tst	x0, #0x40000000
   4c150:	mov	w0, #0x355                 	// #853
   4c154:	mov	w1, #0x1e1                 	// #481
   4c158:	csel	w1, w0, w1, eq  // eq = none
   4c15c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c160:	tbnz	w0, #16, 4c188 <aarch64_opcode_lookup@@Base+0x4cd4>
   4c164:	tbnz	w0, #23, 4c178 <aarch64_opcode_lookup@@Base+0x4cc4>
   4c168:	tst	x0, #0x20000000
   4c16c:	cset	w0, eq  // eq = none
   4c170:	add	w1, w0, #0x21e
   4c174:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c178:	tst	x0, #0x20000000
   4c17c:	cset	w0, eq  // eq = none
   4c180:	add	w1, w0, #0x222
   4c184:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c188:	ubfx	x0, x0, #19, #1
   4c18c:	add	w1, w0, #0x1fb
   4c190:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c194:	tbnz	w0, #11, 4c244 <aarch64_opcode_lookup@@Base+0x4d90>
   4c198:	tbnz	w0, #29, 4c1e8 <aarch64_opcode_lookup@@Base+0x4d34>
   4c19c:	tbnz	w0, #30, 4c1b4 <aarch64_opcode_lookup@@Base+0x4d00>
   4c1a0:	tst	x0, #0x10
   4c1a4:	mov	w0, #0x31e                 	// #798
   4c1a8:	mov	w1, #0x320                 	// #800
   4c1ac:	csel	w1, w0, w1, eq  // eq = none
   4c1b0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c1b4:	tbnz	w0, #12, 4c1d0 <aarch64_opcode_lookup@@Base+0x4d1c>
   4c1b8:	tbnz	w0, #13, 4d14c <aarch64_opcode_lookup@@Base+0x5c98>
   4c1bc:	tst	x0, #0x4000
   4c1c0:	mov	w0, #0x235                 	// #565
   4c1c4:	mov	w1, #0x233                 	// #563
   4c1c8:	csel	w1, w0, w1, eq  // eq = none
   4c1cc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c1d0:	tbz	w0, #13, 4d154 <aarch64_opcode_lookup@@Base+0x5ca0>
   4c1d4:	tst	x0, #0x8000
   4c1d8:	mov	w0, #0x231                 	// #561
   4c1dc:	mov	w1, #0x228                 	// #552
   4c1e0:	csel	w1, w0, w1, eq  // eq = none
   4c1e4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c1e8:	tbnz	w0, #12, 4c218 <aarch64_opcode_lookup@@Base+0x4d64>
   4c1ec:	tbnz	w0, #13, 4c204 <aarch64_opcode_lookup@@Base+0x4d50>
   4c1f0:	tst	x0, #0x4000
   4c1f4:	mov	w0, #0x24a                 	// #586
   4c1f8:	mov	w1, #0x248                 	// #584
   4c1fc:	csel	w1, w0, w1, eq  // eq = none
   4c200:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c204:	tst	x0, #0x800000
   4c208:	mov	w0, #0x23c                 	// #572
   4c20c:	mov	w1, #0x242                 	// #578
   4c210:	csel	w1, w0, w1, eq  // eq = none
   4c214:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c218:	tbnz	w0, #13, 4c230 <aarch64_opcode_lookup@@Base+0x4d7c>
   4c21c:	tst	x0, #0x8000
   4c220:	mov	w0, #0x249                 	// #585
   4c224:	mov	w1, #0x240                 	// #576
   4c228:	csel	w1, w0, w1, eq  // eq = none
   4c22c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c230:	tst	x0, #0x8000
   4c234:	mov	w0, #0x246                 	// #582
   4c238:	mov	w1, #0x23b                 	// #571
   4c23c:	csel	w1, w0, w1, eq  // eq = none
   4c240:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c244:	tbnz	w0, #29, 4c2a0 <aarch64_opcode_lookup@@Base+0x4dec>
   4c248:	mov	w1, #0x363                 	// #867
   4c24c:	tbz	w0, #30, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4c250:	tbnz	w0, #12, 4c270 <aarch64_opcode_lookup@@Base+0x4dbc>
   4c254:	tbnz	w0, #13, 4d15c <aarch64_opcode_lookup@@Base+0x5ca8>
   4c258:	tbnz	w0, #14, 4d164 <aarch64_opcode_lookup@@Base+0x5cb0>
   4c25c:	tst	x0, #0x8000
   4c260:	mov	w0, #0x224                 	// #548
   4c264:	mov	w1, #0x236                 	// #566
   4c268:	csel	w1, w0, w1, eq  // eq = none
   4c26c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c270:	tbnz	w0, #13, 4c288 <aarch64_opcode_lookup@@Base+0x4dd4>
   4c274:	tst	x0, #0x8000
   4c278:	mov	w0, #0x227                 	// #551
   4c27c:	mov	w1, #0x229                 	// #553
   4c280:	csel	w1, w0, w1, eq  // eq = none
   4c284:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c288:	tbz	w0, #14, 4d16c <aarch64_opcode_lookup@@Base+0x5cb8>
   4c28c:	tst	x0, #0x800000
   4c290:	mov	w0, #0x22d                 	// #557
   4c294:	mov	w1, #0x22f                 	// #559
   4c298:	csel	w1, w0, w1, eq  // eq = none
   4c29c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c2a0:	tbnz	w0, #12, 4c2d8 <aarch64_opcode_lookup@@Base+0x4e24>
   4c2a4:	tbnz	w0, #13, 4c2c0 <aarch64_opcode_lookup@@Base+0x4e0c>
   4c2a8:	tbnz	w0, #14, 4d174 <aarch64_opcode_lookup@@Base+0x5cc0>
   4c2ac:	tst	x0, #0x8000
   4c2b0:	mov	w0, #0x237                 	// #567
   4c2b4:	mov	w1, #0x24b                 	// #587
   4c2b8:	csel	w1, w0, w1, eq  // eq = none
   4c2bc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c2c0:	tbz	w0, #14, 4d17c <aarch64_opcode_lookup@@Base+0x5cc8>
   4c2c4:	tst	x0, #0x800000
   4c2c8:	mov	w0, #0x23e                 	// #574
   4c2cc:	mov	w1, #0x244                 	// #580
   4c2d0:	csel	w1, w0, w1, eq  // eq = none
   4c2d4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c2d8:	tst	x0, #0x2000
   4c2dc:	mov	w0, #0x23a                 	// #570
   4c2e0:	mov	w1, #0x247                 	// #583
   4c2e4:	csel	w1, w0, w1, eq  // eq = none
   4c2e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c2ec:	tbnz	w0, #15, 4c4dc <aarch64_opcode_lookup@@Base+0x5028>
   4c2f0:	tbnz	w0, #28, 4c3e8 <aarch64_opcode_lookup@@Base+0x4f34>
   4c2f4:	tbnz	w0, #10, 4c3bc <aarch64_opcode_lookup@@Base+0x4f08>
   4c2f8:	tbnz	w0, #12, 4c370 <aarch64_opcode_lookup@@Base+0x4ebc>
   4c2fc:	tbnz	w0, #13, 4c334 <aarch64_opcode_lookup@@Base+0x4e80>
   4c300:	tbnz	w0, #14, 4c31c <aarch64_opcode_lookup@@Base+0x4e68>
   4c304:	tbnz	w0, #29, 4d184 <aarch64_opcode_lookup@@Base+0x5cd0>
   4c308:	tst	x0, #0x40000000
   4c30c:	mov	w0, #0x93e                 	// #2366
   4c310:	mov	w1, #0x942                 	// #2370
   4c314:	csel	w1, w0, w1, eq  // eq = none
   4c318:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c31c:	tbnz	w0, #29, 4d18c <aarch64_opcode_lookup@@Base+0x5cd8>
   4c320:	tst	x0, #0x40000000
   4c324:	mov	w0, #0x93f                 	// #2367
   4c328:	mov	w1, #0x943                 	// #2371
   4c32c:	csel	w1, w0, w1, eq  // eq = none
   4c330:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c334:	tbnz	w0, #14, 4c354 <aarch64_opcode_lookup@@Base+0x4ea0>
   4c338:	tbnz	w0, #29, 4c348 <aarch64_opcode_lookup@@Base+0x4e94>
   4c33c:	ubfx	x0, x0, #30, #1
   4c340:	add	w1, w0, #0x62
   4c344:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c348:	ubfx	x0, x0, #30, #1
   4c34c:	add	w1, w0, #0x78
   4c350:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c354:	tbnz	w0, #29, 4c364 <aarch64_opcode_lookup@@Base+0x4eb0>
   4c358:	ubfx	x0, x0, #30, #1
   4c35c:	add	w1, w0, #0x66
   4c360:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c364:	ubfx	x0, x0, #30, #1
   4c368:	add	w1, w0, #0x7b
   4c36c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c370:	mov	w1, #0x83                  	// #131
   4c374:	tbnz	w0, #29, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4c378:	tbnz	w0, #13, 4c3a0 <aarch64_opcode_lookup@@Base+0x4eec>
   4c37c:	tbnz	w0, #14, 4c390 <aarch64_opcode_lookup@@Base+0x4edc>
   4c380:	tst	x0, #0x800000
   4c384:	cset	w0, eq  // eq = none
   4c388:	add	w1, w0, #0x71
   4c38c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c390:	tst	x0, #0x800000
   4c394:	cset	w0, eq  // eq = none
   4c398:	add	w1, w0, #0x73
   4c39c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c3a0:	tbnz	w0, #14, 4c3b0 <aarch64_opcode_lookup@@Base+0x4efc>
   4c3a4:	ubfx	x0, x0, #30, #1
   4c3a8:	add	w1, w0, #0x64
   4c3ac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c3b0:	ubfx	x0, x0, #30, #1
   4c3b4:	add	w1, w0, #0x68
   4c3b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c3bc:	tbnz	w0, #12, 4c3d4 <aarch64_opcode_lookup@@Base+0x4f20>
   4c3c0:	tst	x0, #0x20000000
   4c3c4:	mov	w0, #0x85                  	// #133
   4c3c8:	mov	w1, #0x8d                  	// #141
   4c3cc:	csel	w1, w0, w1, eq  // eq = none
   4c3d0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c3d4:	tst	x0, #0x20000000
   4c3d8:	mov	w0, #0x86                  	// #134
   4c3dc:	mov	w1, #0x8e                  	// #142
   4c3e0:	csel	w1, w0, w1, eq  // eq = none
   4c3e4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c3e8:	tbnz	w0, #29, 4c480 <aarch64_opcode_lookup@@Base+0x4fcc>
   4c3ec:	tbnz	w0, #30, 4c404 <aarch64_opcode_lookup@@Base+0x4f50>
   4c3f0:	tst	x0, #0x200000
   4c3f4:	mov	w0, #0x359                 	// #857
   4c3f8:	mov	w1, #0x35d                 	// #861
   4c3fc:	csel	w1, w0, w1, eq  // eq = none
   4c400:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c404:	tbnz	w0, #10, 4c43c <aarch64_opcode_lookup@@Base+0x4f88>
   4c408:	tbnz	w0, #13, 4c430 <aarch64_opcode_lookup@@Base+0x4f7c>
   4c40c:	tbnz	w0, #14, 4c420 <aarch64_opcode_lookup@@Base+0x4f6c>
   4c410:	tst	x0, #0x800000
   4c414:	cset	w0, eq  // eq = none
   4c418:	add	w1, w0, #0x1ae
   4c41c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c420:	tst	x0, #0x800000
   4c424:	cset	w0, eq  // eq = none
   4c428:	add	w1, w0, #0x1b0
   4c42c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c430:	ubfx	x0, x0, #14, #1
   4c434:	add	w1, w0, #0x1a9
   4c438:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c43c:	tbnz	w0, #12, 4c454 <aarch64_opcode_lookup@@Base+0x4fa0>
   4c440:	tst	x0, #0x2000
   4c444:	mov	w0, #0x24e                 	// #590
   4c448:	mov	w1, #0x250                 	// #592
   4c44c:	csel	w1, w0, w1, eq  // eq = none
   4c450:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c454:	tbnz	w0, #13, 4c46c <aarch64_opcode_lookup@@Base+0x4fb8>
   4c458:	tst	x0, #0x4000
   4c45c:	mov	w0, #0x24f                 	// #591
   4c460:	mov	w1, #0x252                 	// #594
   4c464:	csel	w1, w0, w1, eq  // eq = none
   4c468:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c46c:	tst	x0, #0x4000
   4c470:	mov	w0, #0x251                 	// #593
   4c474:	mov	w1, #0x253                 	// #595
   4c478:	csel	w1, w0, w1, eq  // eq = none
   4c47c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c480:	tbnz	w0, #12, 4c4b0 <aarch64_opcode_lookup@@Base+0x4ffc>
   4c484:	tbnz	w0, #13, 4c49c <aarch64_opcode_lookup@@Base+0x4fe8>
   4c488:	tst	x0, #0x4000
   4c48c:	mov	w0, #0x25a                 	// #602
   4c490:	mov	w1, #0x25e                 	// #606
   4c494:	csel	w1, w0, w1, eq  // eq = none
   4c498:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c49c:	tst	x0, #0x4000
   4c4a0:	mov	w0, #0x25c                 	// #604
   4c4a4:	mov	w1, #0x260                 	// #608
   4c4a8:	csel	w1, w0, w1, eq  // eq = none
   4c4ac:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c4b0:	tbnz	w0, #13, 4c4c8 <aarch64_opcode_lookup@@Base+0x5014>
   4c4b4:	tst	x0, #0x4000
   4c4b8:	mov	w0, #0x25b                 	// #603
   4c4bc:	mov	w1, #0x25f                 	// #607
   4c4c0:	csel	w1, w0, w1, eq  // eq = none
   4c4c4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c4c8:	tst	x0, #0x4000
   4c4cc:	mov	w0, #0x25d                 	// #605
   4c4d0:	mov	w1, #0x261                 	// #609
   4c4d4:	csel	w1, w0, w1, eq  // eq = none
   4c4d8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c4dc:	tbnz	w0, #28, 4c6a0 <aarch64_opcode_lookup@@Base+0x51ec>
   4c4e0:	tbnz	w0, #10, 4c5d4 <aarch64_opcode_lookup@@Base+0x5120>
   4c4e4:	tbnz	w0, #12, 4c550 <aarch64_opcode_lookup@@Base+0x509c>
   4c4e8:	tbnz	w0, #13, 4c520 <aarch64_opcode_lookup@@Base+0x506c>
   4c4ec:	tbnz	w0, #14, 4c508 <aarch64_opcode_lookup@@Base+0x5054>
   4c4f0:	tbz	w0, #29, 4d194 <aarch64_opcode_lookup@@Base+0x5ce0>
   4c4f4:	tst	x0, #0x40000000
   4c4f8:	mov	w0, #0x940                 	// #2368
   4c4fc:	mov	w1, #0x944                 	// #2372
   4c500:	csel	w1, w0, w1, eq  // eq = none
   4c504:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c508:	tbz	w0, #29, 4d19c <aarch64_opcode_lookup@@Base+0x5ce8>
   4c50c:	tst	x0, #0x40000000
   4c510:	mov	w0, #0x941                 	// #2369
   4c514:	mov	w1, #0x945                 	// #2373
   4c518:	csel	w1, w0, w1, eq  // eq = none
   4c51c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c520:	tbnz	w0, #14, 4c540 <aarch64_opcode_lookup@@Base+0x508c>
   4c524:	tbnz	w0, #29, 4c534 <aarch64_opcode_lookup@@Base+0x5080>
   4c528:	ubfx	x0, x0, #30, #1
   4c52c:	add	w1, w0, #0x6b
   4c530:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c534:	ubfx	x0, x0, #30, #1
   4c538:	add	w1, w0, #0x7d
   4c53c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c540:	tst	x0, #0x20000000
   4c544:	cset	w0, eq  // eq = none
   4c548:	add	w1, w0, #0x923
   4c54c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c550:	tbnz	w0, #13, 4c598 <aarch64_opcode_lookup@@Base+0x50e4>
   4c554:	tbnz	w0, #14, 4c584 <aarch64_opcode_lookup@@Base+0x50d0>
   4c558:	tbnz	w0, #23, 4c570 <aarch64_opcode_lookup@@Base+0x50bc>
   4c55c:	tst	x0, #0x20000000
   4c560:	mov	w0, #0x76                  	// #118
   4c564:	mov	w1, #0x80                  	// #128
   4c568:	csel	w1, w0, w1, eq  // eq = none
   4c56c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c570:	tst	x0, #0x20000000
   4c574:	mov	w0, #0x75                  	// #117
   4c578:	mov	w1, #0x7f                  	// #127
   4c57c:	csel	w1, w0, w1, eq  // eq = none
   4c580:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c584:	tst	x0, #0x20000000
   4c588:	mov	w0, #0x70                  	// #112
   4c58c:	mov	w1, #0x81                  	// #129
   4c590:	csel	w1, w0, w1, eq  // eq = none
   4c594:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c598:	tbnz	w0, #14, 4c5a8 <aarch64_opcode_lookup@@Base+0x50f4>
   4c59c:	ubfx	x0, x0, #30, #1
   4c5a0:	add	w1, w0, #0x6d
   4c5a4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c5a8:	tbnz	w0, #29, 4d1a4 <aarch64_opcode_lookup@@Base+0x5cf0>
   4c5ac:	tbnz	w0, #22, 4c5c0 <aarch64_opcode_lookup@@Base+0x510c>
   4c5b0:	tst	x0, #0x800000
   4c5b4:	cset	w0, eq  // eq = none
   4c5b8:	add	w1, w0, #0x971
   4c5bc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c5c0:	tbz	w0, #23, 4d1ac <aarch64_opcode_lookup@@Base+0x5cf8>
   4c5c4:	tst	x0, #0x40000000
   4c5c8:	cset	w0, eq  // eq = none
   4c5cc:	add	w1, w0, #0x984
   4c5d0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c5d4:	tbnz	w0, #11, 4c64c <aarch64_opcode_lookup@@Base+0x5198>
   4c5d8:	tbnz	w0, #14, 4c608 <aarch64_opcode_lookup@@Base+0x5154>
   4c5dc:	tbnz	w0, #12, 4c5f4 <aarch64_opcode_lookup@@Base+0x5140>
   4c5e0:	tst	x0, #0x20000000
   4c5e4:	mov	w0, #0x87                  	// #135
   4c5e8:	mov	w1, #0x8f                  	// #143
   4c5ec:	csel	w1, w0, w1, eq  // eq = none
   4c5f0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c5f4:	tst	x0, #0x20000000
   4c5f8:	mov	w0, #0x88                  	// #136
   4c5fc:	mov	w1, #0x90                  	// #144
   4c600:	csel	w1, w0, w1, eq  // eq = none
   4c604:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c608:	tbnz	w0, #13, 4c620 <aarch64_opcode_lookup@@Base+0x516c>
   4c60c:	tst	x0, #0x20000000
   4c610:	mov	w0, #0x89                  	// #137
   4c614:	mov	w1, #0x91                  	// #145
   4c618:	csel	w1, w0, w1, eq  // eq = none
   4c61c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c620:	tbnz	w0, #12, 4c638 <aarch64_opcode_lookup@@Base+0x5184>
   4c624:	tst	x0, #0x20000000
   4c628:	mov	w0, #0x8a                  	// #138
   4c62c:	mov	w1, #0x92                  	// #146
   4c630:	csel	w1, w0, w1, eq  // eq = none
   4c634:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c638:	tst	x0, #0x20000000
   4c63c:	mov	w0, #0x8b                  	// #139
   4c640:	mov	w1, #0x94                  	// #148
   4c644:	csel	w1, w0, w1, eq  // eq = none
   4c648:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c64c:	tbnz	w0, #12, 4c66c <aarch64_opcode_lookup@@Base+0x51b8>
   4c650:	tbnz	w0, #29, 4c660 <aarch64_opcode_lookup@@Base+0x51ac>
   4c654:	ubfx	x0, x0, #30, #1
   4c658:	add	w1, w0, #0x17e
   4c65c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c660:	ubfx	x0, x0, #30, #1
   4c664:	add	w1, w0, #0x196
   4c668:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c66c:	tbnz	w0, #13, 4c68c <aarch64_opcode_lookup@@Base+0x51d8>
   4c670:	tbnz	w0, #29, 4c680 <aarch64_opcode_lookup@@Base+0x51cc>
   4c674:	ubfx	x0, x0, #30, #1
   4c678:	add	w1, w0, #0x182
   4c67c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c680:	ubfx	x0, x0, #30, #1
   4c684:	add	w1, w0, #0x19a
   4c688:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c68c:	tst	x0, #0x20000000
   4c690:	mov	w0, #0x8c                  	// #140
   4c694:	mov	w1, #0x1a2                 	// #418
   4c698:	csel	w1, w0, w1, eq  // eq = none
   4c69c:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c6a0:	tbnz	w0, #29, 4c714 <aarch64_opcode_lookup@@Base+0x5260>
   4c6a4:	tbnz	w0, #30, 4c6bc <aarch64_opcode_lookup@@Base+0x5208>
   4c6a8:	tst	x0, #0x200000
   4c6ac:	mov	w0, #0x35b                 	// #859
   4c6b0:	mov	w1, #0x35f                 	// #863
   4c6b4:	csel	w1, w0, w1, eq  // eq = none
   4c6b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c6bc:	tbnz	w0, #10, 4c6e8 <aarch64_opcode_lookup@@Base+0x5234>
   4c6c0:	mov	w1, #0x1ac                 	// #428
   4c6c4:	tbz	w0, #12, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4c6c8:	mov	w1, #0x1ab                 	// #427
   4c6cc:	tbnz	w0, #13, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4c6d0:	mov	w1, #0x1ad                 	// #429
   4c6d4:	tbnz	w0, #14, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4c6d8:	tst	x0, #0x800000
   4c6dc:	cset	w0, eq  // eq = none
   4c6e0:	add	w1, w0, #0x1b2
   4c6e4:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c6e8:	tbnz	w0, #11, 4c700 <aarch64_opcode_lookup@@Base+0x524c>
   4c6ec:	tst	x0, #0x1000
   4c6f0:	mov	w0, #0x256                 	// #598
   4c6f4:	mov	w1, #0x254                 	// #596
   4c6f8:	csel	w1, w0, w1, eq  // eq = none
   4c6fc:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c700:	tst	x0, #0x2000
   4c704:	mov	w0, #0x255                 	// #597
   4c708:	mov	w1, #0x258                 	// #600
   4c70c:	csel	w1, w0, w1, eq  // eq = none
   4c710:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c714:	tbnz	w0, #10, 4c738 <aarch64_opcode_lookup@@Base+0x5284>
   4c718:	mov	w1, #0x1b7                 	// #439
   4c71c:	tbnz	w0, #13, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4c720:	mov	w1, #0x1b6                 	// #438
   4c724:	tbnz	w0, #14, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4c728:	tst	x0, #0x800000
   4c72c:	cset	w0, eq  // eq = none
   4c730:	add	w1, w0, #0x1b4
   4c734:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c738:	tbnz	w0, #11, 4c758 <aarch64_opcode_lookup@@Base+0x52a4>
   4c73c:	mov	w1, #0x264                 	// #612
   4c740:	tbnz	w0, #12, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4c744:	tst	x0, #0x2000
   4c748:	mov	w0, #0x262                 	// #610
   4c74c:	mov	w1, #0x266                 	// #614
   4c750:	csel	w1, w0, w1, eq  // eq = none
   4c754:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c758:	mov	w1, #0x263                 	// #611
   4c75c:	tbz	w0, #12, 474cc <aarch64_opcode_lookup@@Base+0x18>
   4c760:	tst	x0, #0x2000
   4c764:	mov	w0, #0x265                 	// #613
   4c768:	mov	w1, #0x268                 	// #616
   4c76c:	csel	w1, w0, w1, eq  // eq = none
   4c770:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c774:	mov	w1, #0x3b4                 	// #948
   4c778:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c77c:	mov	w1, #0x3b5                 	// #949
   4c780:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c784:	mov	w1, #0x3f3                 	// #1011
   4c788:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c78c:	mov	w1, #0x3bc                 	// #956
   4c790:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c794:	mov	w1, #0x3fb                 	// #1019
   4c798:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c79c:	mov	w1, #0x3b8                 	// #952
   4c7a0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c7a4:	mov	w1, #0x3b9                 	// #953
   4c7a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c7ac:	mov	w1, #0x3c4                 	// #964
   4c7b0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c7b4:	mov	w1, #0x3fa                 	// #1018
   4c7b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c7bc:	mov	w1, #0x3bd                 	// #957
   4c7c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c7c4:	mov	w1, #0x3fc                 	// #1020
   4c7c8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c7cc:	mov	w1, #0x3a1                 	// #929
   4c7d0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c7d4:	mov	w1, #0x3a2                 	// #930
   4c7d8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c7dc:	mov	w1, #0x40f                 	// #1039
   4c7e0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c7e4:	mov	w1, #0x416                 	// #1046
   4c7e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c7ec:	mov	w1, #0x417                 	// #1047
   4c7f0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c7f4:	mov	w1, #0x418                 	// #1048
   4c7f8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c7fc:	mov	w1, #0x403                 	// #1027
   4c800:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c804:	mov	w1, #0x40a                 	// #1034
   4c808:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c80c:	mov	w1, #0x40b                 	// #1035
   4c810:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c814:	mov	w1, #0x40c                 	// #1036
   4c818:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c81c:	mov	w1, #0x43f                 	// #1087
   4c820:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c824:	mov	w1, #0x446                 	// #1094
   4c828:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c82c:	mov	w1, #0x447                 	// #1095
   4c830:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c834:	mov	w1, #0x448                 	// #1096
   4c838:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c83c:	mov	w1, #0x3c0                 	// #960
   4c840:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c844:	mov	w1, #0x427                 	// #1063
   4c848:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c84c:	mov	w1, #0x42e                 	// #1070
   4c850:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c854:	mov	w1, #0x42f                 	// #1071
   4c858:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c85c:	mov	w1, #0x430                 	// #1072
   4c860:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c864:	mov	w1, #0x457                 	// #1111
   4c868:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c86c:	mov	w1, #0x45e                 	// #1118
   4c870:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c874:	mov	w1, #0x45f                 	// #1119
   4c878:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c87c:	mov	w1, #0x460                 	// #1120
   4c880:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c884:	mov	w1, #0x41b                 	// #1051
   4c888:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c88c:	mov	w1, #0x422                 	// #1058
   4c890:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c894:	mov	w1, #0x423                 	// #1059
   4c898:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c89c:	mov	w1, #0x424                 	// #1060
   4c8a0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c8a4:	mov	w1, #0x44b                 	// #1099
   4c8a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c8ac:	mov	w1, #0x452                 	// #1106
   4c8b0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c8b4:	mov	w1, #0x453                 	// #1107
   4c8b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c8bc:	mov	w1, #0x454                 	// #1108
   4c8c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c8c4:	mov	w1, #0x433                 	// #1075
   4c8c8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c8cc:	mov	w1, #0x43a                 	// #1082
   4c8d0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c8d4:	mov	w1, #0x43b                 	// #1083
   4c8d8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c8dc:	mov	w1, #0x43c                 	// #1084
   4c8e0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c8e4:	mov	w1, #0x463                 	// #1123
   4c8e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c8ec:	mov	w1, #0x46a                 	// #1130
   4c8f0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c8f4:	mov	w1, #0x46b                 	// #1131
   4c8f8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c8fc:	mov	w1, #0x46c                 	// #1132
   4c900:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c904:	mov	w1, #0x396                 	// #918
   4c908:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c90c:	mov	w1, #0x397                 	// #919
   4c910:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c914:	mov	w1, #0x395                 	// #917
   4c918:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c91c:	mov	w1, #0x38c                 	// #908
   4c920:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c924:	mov	w1, #0x38d                 	// #909
   4c928:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c92c:	mov	w1, #0x36d                 	// #877
   4c930:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c934:	mov	w1, #0x36e                 	// #878
   4c938:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c93c:	mov	w1, #0x380                 	// #896
   4c940:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c944:	mov	w1, #0x381                 	// #897
   4c948:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c94c:	mov	w1, #0x950                 	// #2384
   4c950:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c954:	mov	w1, #0x2d2                 	// #722
   4c958:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c95c:	mov	w1, #0x2d1                 	// #721
   4c960:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c964:	mov	w1, #0x2db                 	// #731
   4c968:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c96c:	mov	w1, #0x2d4                 	// #724
   4c970:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c974:	mov	w1, #0x2d9                 	// #729
   4c978:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c97c:	mov	w1, #0x2c7                 	// #711
   4c980:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c984:	mov	w1, #0x2b7                 	// #695
   4c988:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c98c:	mov	w1, #0x2c3                 	// #707
   4c990:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c994:	mov	w1, #0x2c2                 	// #706
   4c998:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c99c:	mov	w1, #0x2dc                 	// #732
   4c9a0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c9a4:	mov	w1, #0x2d5                 	// #725
   4c9a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c9ac:	mov	w1, #0x2da                 	// #730
   4c9b0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c9b4:	mov	w1, #0x2c8                 	// #712
   4c9b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c9bc:	mov	w1, #0x718                 	// #1816
   4c9c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c9c4:	mov	w1, #0x725                 	// #1829
   4c9c8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c9cc:	mov	w1, #0x799                 	// #1945
   4c9d0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c9d4:	mov	w1, #0x7b0                 	// #1968
   4c9d8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c9dc:	mov	w1, #0x808                 	// #2056
   4c9e0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c9e4:	mov	w1, #0x745                 	// #1861
   4c9e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c9ec:	mov	w1, #0x7d9                 	// #2009
   4c9f0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c9f4:	mov	w1, #0x6e5                 	// #1765
   4c9f8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4c9fc:	mov	w1, #0x626                 	// #1574
   4ca00:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca04:	mov	w1, #0x95b                 	// #2395
   4ca08:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca0c:	mov	w1, #0x95c                 	// #2396
   4ca10:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca14:	mov	w1, #0x50c                 	// #1292
   4ca18:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca1c:	mov	w1, #0x8a3                 	// #2211
   4ca20:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca24:	mov	w1, #0x50d                 	// #1293
   4ca28:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca2c:	mov	w1, #0x8c8                 	// #2248
   4ca30:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca34:	mov	w1, #0x859                 	// #2137
   4ca38:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca3c:	mov	w1, #0x6c8                 	// #1736
   4ca40:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca44:	mov	w1, #0x8f3                 	// #2291
   4ca48:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca4c:	mov	w1, #0x904                 	// #2308
   4ca50:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca54:	mov	w1, #0x8ee                 	// #2286
   4ca58:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca5c:	mov	w1, #0x8f8                 	// #2296
   4ca60:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca64:	mov	w1, #0x508                 	// #1288
   4ca68:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca6c:	mov	w1, #0x509                 	// #1289
   4ca70:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca74:	mov	w1, #0x5fe                 	// #1534
   4ca78:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca7c:	mov	w1, #0x613                 	// #1555
   4ca80:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca84:	mov	w1, #0x6cb                 	// #1739
   4ca88:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca8c:	mov	w1, #0x4fd                 	// #1277
   4ca90:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca94:	mov	w1, #0x6fa                 	// #1786
   4ca98:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ca9c:	mov	w1, #0x5f6                 	// #1526
   4caa0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4caa4:	mov	w1, #0x742                 	// #1858
   4caa8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4caac:	mov	w1, #0x5d0                 	// #1488
   4cab0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cab4:	mov	w1, #0x734                 	// #1844
   4cab8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cabc:	mov	w1, #0x7d6                 	// #2006
   4cac0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cac4:	mov	w1, #0x553                 	// #1363
   4cac8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cacc:	mov	w1, #0x7c8                 	// #1992
   4cad0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cad4:	mov	w1, #0x5e8                 	// #1512
   4cad8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cadc:	mov	w1, #0x5fd                 	// #1533
   4cae0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cae4:	mov	w1, #0x6fb                 	// #1787
   4cae8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4caec:	mov	w1, #0x5f8                 	// #1528
   4caf0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4caf4:	mov	w1, #0x6ce                 	// #1742
   4caf8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cafc:	mov	w1, #0x7b9                 	// #1977
   4cb00:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb04:	mov	w1, #0x914                 	// #2324
   4cb08:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb0c:	mov	w1, #0x6f3                 	// #1779
   4cb10:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb14:	mov	w1, #0x68c                 	// #1676
   4cb18:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb1c:	mov	w1, #0x6d4                 	// #1748
   4cb20:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb24:	mov	w1, #0x501                 	// #1281
   4cb28:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb2c:	mov	w1, #0x6cd                 	// #1741
   4cb30:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb34:	mov	w1, #0x85c                 	// #2140
   4cb38:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb3c:	mov	w1, #0x8d9                 	// #2265
   4cb40:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb44:	mov	w1, #0x88c                 	// #2188
   4cb48:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb4c:	mov	w1, #0x684                 	// #1668
   4cb50:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb54:	mov	w1, #0x690                 	// #1680
   4cb58:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb5c:	mov	w1, #0x6f4                 	// #1780
   4cb60:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb64:	mov	w1, #0x68e                 	// #1678
   4cb68:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb6c:	mov	w1, #0x6cc                 	// #1740
   4cb70:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb74:	mov	w1, #0x881                 	// #2177
   4cb78:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb7c:	mov	w1, #0x869                 	// #2153
   4cb80:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb84:	mov	w1, #0x8e6                 	// #2278
   4cb88:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb8c:	mov	w1, #0x6ec                 	// #1772
   4cb90:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb94:	mov	w1, #0x675                 	// #1653
   4cb98:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cb9c:	mov	w1, #0x898                 	// #2200
   4cba0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cba4:	mov	w1, #0x679                 	// #1657
   4cba8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cbac:	mov	w1, #0x886                 	// #2182
   4cbb0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cbb4:	mov	w1, #0x677                 	// #1655
   4cbb8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cbbc:	mov	w1, #0x887                 	// #2183
   4cbc0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cbc4:	mov	w1, #0x75c                 	// #1884
   4cbc8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cbcc:	mov	w1, #0x813                 	// #2067
   4cbd0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cbd4:	mov	w1, #0x750                 	// #1872
   4cbd8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cbdc:	mov	w1, #0x765                 	// #1893
   4cbe0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cbe4:	mov	w1, #0x74e                 	// #1870
   4cbe8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cbec:	mov	w1, #0x59f                 	// #1439
   4cbf0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cbf4:	mov	w1, #0x5a3                 	// #1443
   4cbf8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cbfc:	mov	w1, #0x74a                 	// #1866
   4cc00:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc04:	mov	w1, #0x75d                 	// #1885
   4cc08:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc0c:	mov	w1, #0x762                 	// #1890
   4cc10:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc14:	mov	w1, #0x75e                 	// #1886
   4cc18:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc1c:	mov	w1, #0x973                 	// #2419
   4cc20:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc24:	mov	w1, #0x763                 	// #1891
   4cc28:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc2c:	mov	w1, #0x5aa                 	// #1450
   4cc30:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc34:	mov	w1, #0x75f                 	// #1887
   4cc38:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc3c:	mov	w1, #0x775                 	// #1909
   4cc40:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc44:	mov	w1, #0x779                 	// #1913
   4cc48:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc4c:	mov	w1, #0x95d                 	// #2397
   4cc50:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc54:	mov	w1, #0x975                 	// #2421
   4cc58:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc5c:	mov	w1, #0x95e                 	// #2398
   4cc60:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc64:	mov	w1, #0x811                 	// #2065
   4cc68:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc6c:	mov	w1, #0x55f                 	// #1375
   4cc70:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc74:	mov	w1, #0x967                 	// #2407
   4cc78:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc7c:	mov	w1, #0x968                 	// #2408
   4cc80:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc84:	mov	w1, #0x70d                 	// #1805
   4cc88:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc8c:	mov	w1, #0x704                 	// #1796
   4cc90:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc94:	mov	w1, #0x8ca                 	// #2250
   4cc98:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cc9c:	mov	w1, #0x8c9                 	// #2249
   4cca0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cca4:	mov	w1, #0x7dc                 	// #2012
   4cca8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ccac:	mov	w1, #0x70a                 	// #1802
   4ccb0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ccb4:	mov	w1, #0x548                 	// #1352
   4ccb8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ccbc:	mov	w1, #0x7ee                 	// #2030
   4ccc0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ccc4:	mov	w1, #0x7ed                 	// #2029
   4ccc8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cccc:	mov	w1, #0x702                 	// #1794
   4ccd0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ccd4:	mov	w1, #0x63c                 	// #1596
   4ccd8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ccdc:	mov	w1, #0x6ef                 	// #1775
   4cce0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cce4:	mov	w1, #0x6a2                 	// #1698
   4cce8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ccec:	mov	w1, #0x62e                 	// #1582
   4ccf0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ccf4:	mov	w1, #0x62f                 	// #1583
   4ccf8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ccfc:	mov	w1, #0x8ba                 	// #2234
   4cd00:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd04:	mov	w1, #0x958                 	// #2392
   4cd08:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd0c:	mov	w1, #0x5eb                 	// #1515
   4cd10:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd14:	mov	w1, #0x639                 	// #1593
   4cd18:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd1c:	mov	w1, #0x8f9                 	// #2297
   4cd20:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd24:	mov	w1, #0x8fa                 	// #2298
   4cd28:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd2c:	mov	w1, #0x849                 	// #2121
   4cd30:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd34:	mov	w1, #0x84a                 	// #2122
   4cd38:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd3c:	mov	w1, #0x826                 	// #2086
   4cd40:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd44:	mov	w1, #0x693                 	// #1683
   4cd48:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd4c:	mov	w1, #0x694                 	// #1684
   4cd50:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd54:	mov	w1, #0x695                 	// #1685
   4cd58:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd5c:	mov	w1, #0x903                 	// #2307
   4cd60:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd64:	mov	w1, #0x696                 	// #1686
   4cd68:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd6c:	mov	w1, #0x8e9                 	// #2281
   4cd70:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd74:	mov	w1, #0x8ec                 	// #2284
   4cd78:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd7c:	mov	w1, #0x66b                 	// #1643
   4cd80:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd84:	mov	w1, #0x6a3                 	// #1699
   4cd88:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd8c:	mov	w1, #0x916                 	// #2326
   4cd90:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd94:	mov	w1, #0x915                 	// #2325
   4cd98:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cd9c:	mov	w1, #0x91d                 	// #2333
   4cda0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cda4:	mov	w1, #0x795                 	// #1941
   4cda8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cdac:	mov	w1, #0x564                 	// #1380
   4cdb0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cdb4:	mov	w1, #0x5c1                 	// #1473
   4cdb8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cdbc:	mov	w1, #0x596                 	// #1430
   4cdc0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cdc4:	mov	w1, #0x567                 	// #1383
   4cdc8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cdcc:	mov	w1, #0x568                 	// #1384
   4cdd0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cdd4:	mov	w1, #0x56d                 	// #1389
   4cdd8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cddc:	mov	w1, #0x59c                 	// #1436
   4cde0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cde4:	mov	w1, #0x575                 	// #1397
   4cde8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cdec:	mov	w1, #0x8c4                 	// #2244
   4cdf0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cdf4:	mov	w1, #0x515                 	// #1301
   4cdf8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cdfc:	mov	w1, #0x512                 	// #1298
   4ce00:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce04:	mov	w1, #0x55d                 	// #1373
   4ce08:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce0c:	mov	w1, #0x506                 	// #1286
   4ce10:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce14:	mov	w1, #0x6d6                 	// #1750
   4ce18:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce1c:	mov	w1, #0x796                 	// #1942
   4ce20:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce24:	mov	w1, #0x76d                 	// #1901
   4ce28:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce2c:	mov	w1, #0x5b1                 	// #1457
   4ce30:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce34:	mov	w1, #0x6ff                 	// #1791
   4ce38:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce3c:	mov	w1, #0x6e0                 	// #1760
   4ce40:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce44:	mov	w1, #0x6e2                 	// #1762
   4ce48:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce4c:	mov	w1, #0x5c6                 	// #1478
   4ce50:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce54:	mov	w1, #0x593                 	// #1427
   4ce58:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce5c:	mov	w1, #0x76e                 	// #1902
   4ce60:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce64:	mov	w1, #0x5b6                 	// #1462
   4ce68:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce6c:	mov	w1, #0x712                 	// #1810
   4ce70:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce74:	mov	w1, #0x5bb                 	// #1467
   4ce78:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce7c:	mov	w1, #0x5b5                 	// #1461
   4ce80:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce84:	mov	w1, #0x57d                 	// #1405
   4ce88:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce8c:	mov	w1, #0x583                 	// #1411
   4ce90:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce94:	mov	w1, #0x57f                 	// #1407
   4ce98:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ce9c:	mov	w1, #0x58a                 	// #1418
   4cea0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cea4:	mov	w1, #0x7aa                 	// #1962
   4cea8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ceac:	mov	w1, #0x5c0                 	// #1472
   4ceb0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ceb4:	mov	w1, #0x589                 	// #1417
   4ceb8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cebc:	mov	w1, #0x5b7                 	// #1463
   4cec0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cec4:	mov	w1, #0x563                 	// #1379
   4cec8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cecc:	mov	w1, #0x772                 	// #1906
   4ced0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ced4:	mov	w1, #0x544                 	// #1348
   4ced8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cedc:	mov	w1, #0x740                 	// #1856
   4cee0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cee4:	mov	w1, #0x741                 	// #1857
   4cee8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4ceec:	mov	w1, #0x5cf                 	// #1487
   4cef0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cef4:	mov	w1, #0x732                 	// #1842
   4cef8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cefc:	mov	w1, #0x7c5                 	// #1989
   4cf00:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf04:	mov	w1, #0x7c6                 	// #1990
   4cf08:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf0c:	mov	w1, #0x728                 	// #1832
   4cf10:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf14:	mov	w1, #0x7bc                 	// #1980
   4cf18:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf1c:	mov	w1, #0x798                 	// #1944
   4cf20:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf24:	mov	w1, #0x7da                 	// #2010
   4cf28:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf2c:	mov	w1, #0x770                 	// #1904
   4cf30:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf34:	mov	w1, #0x5a6                 	// #1446
   4cf38:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf3c:	mov	w1, #0x773                 	// #1907
   4cf40:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf44:	mov	w1, #0x5b2                 	// #1458
   4cf48:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf4c:	mov	w1, #0x2f1                 	// #753
   4cf50:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf54:	mov	w1, #0x95                  	// #149
   4cf58:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf5c:	mov	w1, #0x922                 	// #2338
   4cf60:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf64:	mov	w1, #0x96                  	// #150
   4cf68:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf6c:	mov	w1, #0x970                 	// #2416
   4cf70:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf74:	mov	w1, #0x98                  	// #152
   4cf78:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf7c:	mov	w1, #0x930                 	// #2352
   4cf80:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf84:	mov	w1, #0x931                 	// #2353
   4cf88:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf8c:	mov	w1, #0x97e                 	// #2430
   4cf90:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf94:	mov	w1, #0x97c                 	// #2428
   4cf98:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cf9c:	mov	w1, #0x2a9                 	// #681
   4cfa0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cfa4:	mov	w1, #0x22a                 	// #554
   4cfa8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cfac:	mov	w1, #0x92c                 	// #2348
   4cfb0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cfb4:	mov	w1, #0xa2                  	// #162
   4cfb8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cfbc:	mov	w1, #0xa4                  	// #164
   4cfc0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cfc4:	mov	w1, #0xa3                  	// #163
   4cfc8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cfcc:	mov	w1, #0x116                 	// #278
   4cfd0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cfd4:	mov	w1, #0xd5                  	// #213
   4cfd8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cfdc:	mov	w1, #0xd8                  	// #216
   4cfe0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cfe4:	mov	w1, #0xd6                  	// #214
   4cfe8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cfec:	mov	w1, #0xd9                  	// #217
   4cff0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cff4:	mov	w1, #0xda                  	// #218
   4cff8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4cffc:	mov	w1, #0x14a                 	// #330
   4d000:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d004:	mov	w1, #0x3c                  	// #60
   4d008:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d00c:	mov	w1, #0x44                  	// #68
   4d010:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d014:	mov	w1, #0x928                 	// #2344
   4d018:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d01c:	mov	w1, #0xaa                  	// #170
   4d020:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d024:	mov	w1, #0xdb                  	// #219
   4d028:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d02c:	mov	w1, #0x935                 	// #2357
   4d030:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d034:	mov	w1, #0x25                  	// #37
   4d038:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d03c:	mov	w1, #0x24                  	// #36
   4d040:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d044:	mov	w1, #0xac                  	// #172
   4d048:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d04c:	mov	w1, #0x20                  	// #32
   4d050:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d054:	mov	w1, #0x105                 	// #261
   4d058:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d05c:	mov	w1, #0x104                 	// #260
   4d060:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d064:	mov	w1, #0x14f                 	// #335
   4d068:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d06c:	mov	w1, #0x156                 	// #342
   4d070:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d074:	mov	w1, #0x16a                 	// #362
   4d078:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d07c:	mov	w1, #0x150                 	// #336
   4d080:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d084:	mov	w1, #0x125                 	// #293
   4d088:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d08c:	mov	w1, #0x135                 	// #309
   4d090:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d094:	mov	w1, #0x15e                 	// #350
   4d098:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d09c:	mov	w1, #0x16c                 	// #364
   4d0a0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d0a4:	mov	w1, #0x122                 	// #290
   4d0a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d0ac:	mov	w1, #0x13b                 	// #315
   4d0b0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d0b4:	mov	w1, #0x307                 	// #775
   4d0b8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d0bc:	mov	w1, #0x303                 	// #771
   4d0c0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d0c4:	mov	w1, #0x30b                 	// #779
   4d0c8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d0cc:	mov	w1, #0x309                 	// #777
   4d0d0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d0d4:	mov	w1, #0x305                 	// #773
   4d0d8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d0dc:	mov	w1, #0x339                 	// #825
   4d0e0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d0e4:	mov	w1, #0x33d                 	// #829
   4d0e8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d0ec:	mov	w1, #0x33b                 	// #827
   4d0f0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d0f4:	mov	w1, #0x33f                 	// #831
   4d0f8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d0fc:	mov	w1, #0x338                 	// #824
   4d100:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d104:	mov	w1, #0x345                 	// #837
   4d108:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d10c:	mov	w1, #0x1ff                 	// #511
   4d110:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d114:	mov	w1, #0x203                 	// #515
   4d118:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d11c:	mov	w1, #0x202                 	// #514
   4d120:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d124:	mov	w1, #0x1e4                 	// #484
   4d128:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d12c:	mov	w1, #0x351                 	// #849
   4d130:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d134:	mov	w1, #0x1fd                 	// #509
   4d138:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d13c:	mov	w1, #0x219                 	// #537
   4d140:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d144:	mov	w1, #0x1fe                 	// #510
   4d148:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d14c:	mov	w1, #0x22b                 	// #555
   4d150:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d154:	mov	w1, #0x234                 	// #564
   4d158:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d15c:	mov	w1, #0x225                 	// #549
   4d160:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d164:	mov	w1, #0x226                 	// #550
   4d168:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d16c:	mov	w1, #0x232                 	// #562
   4d170:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d174:	mov	w1, #0x239                 	// #569
   4d178:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d17c:	mov	w1, #0x238                 	// #568
   4d180:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d184:	mov	w1, #0x77                  	// #119
   4d188:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d18c:	mov	w1, #0x7a                  	// #122
   4d190:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d194:	mov	w1, #0x6a                  	// #106
   4d198:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d19c:	mov	w1, #0x6f                  	// #111
   4d1a0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d1a4:	mov	w1, #0x82                  	// #130
   4d1a8:	b	474cc <aarch64_opcode_lookup@@Base+0x18>
   4d1ac:	mov	w1, #0x97d                 	// #2429
   4d1b0:	b	474cc <aarch64_opcode_lookup@@Base+0x18>

000000000004d1b4 <aarch64_find_next_opcode@@Base>:
   4d1b4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   4d1b8:	ldr	x1, [x1, #3848]
   4d1bc:	sub	x0, x0, x1
   4d1c0:	asr	x0, x0, #4
   4d1c4:	mov	x1, #0x8e39                	// #36409
   4d1c8:	movk	x1, #0x38e3, lsl #16
   4d1cc:	movk	x1, #0xe38e, lsl #32
   4d1d0:	movk	x1, #0x8e38, lsl #48
   4d1d4:	mul	x0, x0, x1
   4d1d8:	cmp	w0, #0x4ca
   4d1dc:	b.gt	4d2e4 <aarch64_find_next_opcode@@Base+0x130>
   4d1e0:	cmp	w0, #0x175
   4d1e4:	b.le	4d20c <aarch64_find_next_opcode@@Base+0x58>
   4d1e8:	sub	w0, w0, #0x176
   4d1ec:	cmp	w0, #0x354
   4d1f0:	b.hi	4d7cc <aarch64_find_next_opcode@@Base+0x618>  // b.pmore
   4d1f4:	adrp	x1, 61000 <fields@@Base+0xc40>
   4d1f8:	add	x1, x1, #0x8b0
   4d1fc:	ldrh	w0, [x1, w0, uxtw #1]
   4d200:	adr	x1, 4d20c <aarch64_find_next_opcode@@Base+0x58>
   4d204:	add	x0, x1, w0, sxth #2
   4d208:	br	x0
   4d20c:	cmp	w0, #0x8c
   4d210:	b.eq	4d74c <aarch64_find_next_opcode@@Base+0x598>  // b.none
   4d214:	b.le	4d240 <aarch64_find_next_opcode@@Base+0x8c>
   4d218:	cmp	w0, #0x90
   4d21c:	b.eq	4d774 <aarch64_find_next_opcode@@Base+0x5c0>  // b.none
   4d220:	b.le	4d2bc <aarch64_find_next_opcode@@Base+0x108>
   4d224:	cmp	w0, #0x92
   4d228:	b.eq	4d784 <aarch64_find_next_opcode@@Base+0x5d0>  // b.none
   4d22c:	mov	w1, #0x1a0                 	// #416
   4d230:	cmp	w0, #0x93
   4d234:	b.eq	4d288 <aarch64_find_next_opcode@@Base+0xd4>  // b.none
   4d238:	mov	x0, #0x0                   	// #0
   4d23c:	b	4d29c <aarch64_find_next_opcode@@Base+0xe8>
   4d240:	cmp	w0, #0x86
   4d244:	b.eq	4d754 <aarch64_find_next_opcode@@Base+0x5a0>  // b.none
   4d248:	b.le	4d274 <aarch64_find_next_opcode@@Base+0xc0>
   4d24c:	cmp	w0, #0x88
   4d250:	b.eq	4d76c <aarch64_find_next_opcode@@Base+0x5b8>  // b.none
   4d254:	mov	w1, #0x188                 	// #392
   4d258:	cmp	w0, #0x8a
   4d25c:	b.eq	4d288 <aarch64_find_next_opcode@@Base+0xd4>  // b.none
   4d260:	mov	w1, #0x17c                 	// #380
   4d264:	cmp	w0, #0x87
   4d268:	b.eq	4d288 <aarch64_find_next_opcode@@Base+0xd4>  // b.none
   4d26c:	mov	x0, #0x0                   	// #0
   4d270:	b	4d29c <aarch64_find_next_opcode@@Base+0xe8>
   4d274:	cmp	w0, #0x10
   4d278:	b.eq	4d75c <aarch64_find_next_opcode@@Base+0x5a8>  // b.none
   4d27c:	mov	w1, #0x176                 	// #374
   4d280:	cmp	w0, #0x85
   4d284:	b.ne	4d2a0 <aarch64_find_next_opcode@@Base+0xec>  // b.any
   4d288:	sbfiz	x0, x1, #3, #32
   4d28c:	add	x1, x0, w1, sxtw
   4d290:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   4d294:	ldr	x0, [x0, #3848]
   4d298:	add	x0, x0, x1, lsl #4
   4d29c:	ret
   4d2a0:	mov	w1, #0x13                  	// #19
   4d2a4:	cmp	w0, #0xc
   4d2a8:	b.eq	4d288 <aarch64_find_next_opcode@@Base+0xd4>  // b.none
   4d2ac:	mov	x0, #0x0                   	// #0
   4d2b0:	b	4d29c <aarch64_find_next_opcode@@Base+0xe8>
   4d2b4:	mov	w1, #0x3ce                 	// #974
   4d2b8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d2bc:	cmp	w0, #0x8e
   4d2c0:	b.eq	4d77c <aarch64_find_next_opcode@@Base+0x5c8>  // b.none
   4d2c4:	mov	w1, #0x194                 	// #404
   4d2c8:	cmp	w0, #0x8f
   4d2cc:	b.eq	4d288 <aarch64_find_next_opcode@@Base+0xd4>  // b.none
   4d2d0:	mov	w1, #0x18c                 	// #396
   4d2d4:	cmp	w0, #0x8d
   4d2d8:	b.eq	4d288 <aarch64_find_next_opcode@@Base+0xd4>  // b.none
   4d2dc:	mov	x0, #0x0                   	// #0
   4d2e0:	b	4d29c <aarch64_find_next_opcode@@Base+0xe8>
   4d2e4:	cmp	w0, #0x67b
   4d2e8:	b.eq	4d78c <aarch64_find_next_opcode@@Base+0x5d8>  // b.none
   4d2ec:	b.le	4d324 <aarch64_find_next_opcode@@Base+0x170>
   4d2f0:	cmp	w0, #0x689
   4d2f4:	b.eq	4d7b4 <aarch64_find_next_opcode@@Base+0x600>  // b.none
   4d2f8:	b.le	4d394 <aarch64_find_next_opcode@@Base+0x1e0>
   4d2fc:	cmp	w0, #0x69a
   4d300:	b.eq	4d7c4 <aarch64_find_next_opcode@@Base+0x610>  // b.none
   4d304:	mov	w1, #0x69d                 	// #1693
   4d308:	cmp	w0, #0x69c
   4d30c:	b.eq	4d288 <aarch64_find_next_opcode@@Base+0xd4>  // b.none
   4d310:	mov	w1, #0x692                 	// #1682
   4d314:	cmp	w0, #0x691
   4d318:	b.eq	4d288 <aarch64_find_next_opcode@@Base+0xd4>  // b.none
   4d31c:	mov	x0, #0x0                   	// #0
   4d320:	b	4d29c <aarch64_find_next_opcode@@Base+0xe8>
   4d324:	cmp	w0, #0x665
   4d328:	b.eq	4d794 <aarch64_find_next_opcode@@Base+0x5e0>  // b.none
   4d32c:	b.le	4d358 <aarch64_find_next_opcode@@Base+0x1a4>
   4d330:	cmp	w0, #0x670
   4d334:	b.eq	4d7ac <aarch64_find_next_opcode@@Base+0x5f8>  // b.none
   4d338:	mov	w1, #0x673                 	// #1651
   4d33c:	cmp	w0, #0x672
   4d340:	b.eq	4d288 <aarch64_find_next_opcode@@Base+0xd4>  // b.none
   4d344:	mov	w1, #0x66f                 	// #1647
   4d348:	cmp	w0, #0x66e
   4d34c:	b.eq	4d288 <aarch64_find_next_opcode@@Base+0xd4>  // b.none
   4d350:	mov	x0, #0x0                   	// #0
   4d354:	b	4d29c <aarch64_find_next_opcode@@Base+0xe8>
   4d358:	cmp	w0, #0x65d
   4d35c:	b.eq	4d79c <aarch64_find_next_opcode@@Base+0x5e8>  // b.none
   4d360:	b.le	4d378 <aarch64_find_next_opcode@@Base+0x1c4>
   4d364:	mov	w1, #0x660                 	// #1632
   4d368:	cmp	w0, #0x65f
   4d36c:	b.eq	4d288 <aarch64_find_next_opcode@@Base+0xd4>  // b.none
   4d370:	mov	x0, #0x0                   	// #0
   4d374:	b	4d29c <aarch64_find_next_opcode@@Base+0xe8>
   4d378:	cmp	w0, #0x659
   4d37c:	b.eq	4d7a4 <aarch64_find_next_opcode@@Base+0x5f0>  // b.none
   4d380:	mov	w1, #0x65c                 	// #1628
   4d384:	cmp	w0, #0x65b
   4d388:	b.eq	4d288 <aarch64_find_next_opcode@@Base+0xd4>  // b.none
   4d38c:	mov	x0, #0x0                   	// #0
   4d390:	b	4d29c <aarch64_find_next_opcode@@Base+0xe8>
   4d394:	cmp	w0, #0x67f
   4d398:	b.eq	4d7bc <aarch64_find_next_opcode@@Base+0x608>  // b.none
   4d39c:	mov	w1, #0x688                 	// #1672
   4d3a0:	cmp	w0, #0x687
   4d3a4:	b.eq	4d288 <aarch64_find_next_opcode@@Base+0xd4>  // b.none
   4d3a8:	mov	w1, #0x67e                 	// #1662
   4d3ac:	cmp	w0, #0x67d
   4d3b0:	b.eq	4d288 <aarch64_find_next_opcode@@Base+0xd4>  // b.none
   4d3b4:	mov	x0, #0x0                   	// #0
   4d3b8:	b	4d29c <aarch64_find_next_opcode@@Base+0xe8>
   4d3bc:	mov	w1, #0x3cf                 	// #975
   4d3c0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d3c4:	mov	w1, #0x32b                 	// #811
   4d3c8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d3cc:	mov	w1, #0x4a5                 	// #1189
   4d3d0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d3d4:	mov	w1, #0x4a8                 	// #1192
   4d3d8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d3dc:	mov	w1, #0x4a9                 	// #1193
   4d3e0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d3e4:	mov	w1, #0x4b9                 	// #1209
   4d3e8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d3ec:	mov	w1, #0x4ba                 	// #1210
   4d3f0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d3f4:	mov	w1, #0x4bd                 	// #1213
   4d3f8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d3fc:	mov	w1, #0x4be                 	// #1214
   4d400:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d404:	mov	w1, #0x4bf                 	// #1215
   4d408:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d40c:	mov	w1, #0x4c0                 	// #1216
   4d410:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d414:	mov	w1, #0x4c8                 	// #1224
   4d418:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d41c:	mov	w1, #0x4c9                 	// #1225
   4d420:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d424:	mov	w1, #0x956                 	// #2390
   4d428:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d42c:	mov	w1, #0x4a6                 	// #1190
   4d430:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d434:	mov	w1, #0x4ca                 	// #1226
   4d438:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d43c:	mov	w1, #0x4cb                 	// #1227
   4d440:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d444:	mov	w1, #0x1b9                 	// #441
   4d448:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d44c:	mov	w1, #0x1ba                 	// #442
   4d450:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d454:	mov	w1, #0x1bb                 	// #443
   4d458:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d45c:	mov	w1, #0x1c1                 	// #449
   4d460:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d464:	mov	w1, #0x1c2                 	// #450
   4d468:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d46c:	mov	w1, #0x1c3                 	// #451
   4d470:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d474:	mov	w1, #0x1bd                 	// #445
   4d478:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d47c:	mov	w1, #0x1be                 	// #446
   4d480:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d484:	mov	w1, #0x1bf                 	// #447
   4d488:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d48c:	mov	w1, #0x1ce                 	// #462
   4d490:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d494:	mov	w1, #0x1d2                 	// #466
   4d498:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d49c:	mov	w1, #0x1cf                 	// #463
   4d4a0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d4a4:	mov	w1, #0x1d3                 	// #467
   4d4a8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d4ac:	mov	w1, #0x1c5                 	// #453
   4d4b0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d4b4:	mov	w1, #0x1c6                 	// #454
   4d4b8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d4bc:	mov	w1, #0x1c7                 	// #455
   4d4c0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d4c4:	mov	w1, #0x1da                 	// #474
   4d4c8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d4cc:	mov	w1, #0x1db                 	// #475
   4d4d0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d4d4:	mov	w1, #0x1de                 	// #478
   4d4d8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d4dc:	mov	w1, #0x1df                 	// #479
   4d4e0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d4e4:	mov	w1, #0x2fc                 	// #764
   4d4e8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d4ec:	mov	w1, #0x2f8                 	// #760
   4d4f0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d4f4:	mov	w1, #0x2fe                 	// #766
   4d4f8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d4fc:	mov	w1, #0x2fa                 	// #762
   4d500:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d504:	mov	w1, #0x300                 	// #768
   4d508:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d50c:	mov	w1, #0x314                 	// #788
   4d510:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d514:	mov	w1, #0x310                 	// #784
   4d518:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d51c:	mov	w1, #0x318                 	// #792
   4d520:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d524:	mov	w1, #0x308                 	// #776
   4d528:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d52c:	mov	w1, #0x304                 	// #772
   4d530:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d534:	mov	w1, #0x30c                 	// #780
   4d538:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d53c:	mov	w1, #0x302                 	// #770
   4d540:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d544:	mov	w1, #0x316                 	// #790
   4d548:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d54c:	mov	w1, #0x312                 	// #786
   4d550:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d554:	mov	w1, #0x31a                 	// #794
   4d558:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d55c:	mov	w1, #0x30a                 	// #778
   4d560:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d564:	mov	w1, #0x306                 	// #774
   4d568:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d56c:	mov	w1, #0x30e                 	// #782
   4d570:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d574:	mov	w1, #0x331                 	// #817
   4d578:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d57c:	mov	w1, #0x33a                 	// #826
   4d580:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d584:	mov	w1, #0x335                 	// #821
   4d588:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d58c:	mov	w1, #0x33e                 	// #830
   4d590:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d594:	mov	w1, #0x333                 	// #819
   4d598:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d59c:	mov	w1, #0x33c                 	// #828
   4d5a0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d5a4:	mov	w1, #0x337                 	// #823
   4d5a8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d5ac:	mov	w1, #0x340                 	// #832
   4d5b0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d5b4:	mov	w1, #0x981                 	// #2433
   4d5b8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d5bc:	mov	w1, #0x342                 	// #834
   4d5c0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d5c4:	mov	w1, #0x344                 	// #836
   4d5c8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d5cc:	mov	w1, #0x346                 	// #838
   4d5d0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d5d4:	mov	w1, #0x323                 	// #803
   4d5d8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d5dc:	mov	w1, #0x325                 	// #805
   4d5e0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d5e4:	mov	w1, #0x327                 	// #807
   4d5e8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d5ec:	mov	w1, #0x329                 	// #809
   4d5f0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d5f4:	mov	w1, #0x362                 	// #866
   4d5f8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d5fc:	mov	w1, #0x348                 	// #840
   4d600:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d604:	mov	w1, #0x358                 	// #856
   4d608:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d60c:	mov	w1, #0x350                 	// #848
   4d610:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d614:	mov	w1, #0x34c                 	// #844
   4d618:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d61c:	mov	w1, #0x354                 	// #852
   4d620:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d624:	mov	w1, #0x34a                 	// #842
   4d628:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d62c:	mov	w1, #0x352                 	// #850
   4d630:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d634:	mov	w1, #0x34e                 	// #846
   4d638:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d63c:	mov	w1, #0x356                 	// #854
   4d640:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d644:	mov	w1, #0x31f                 	// #799
   4d648:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d64c:	mov	w1, #0x321                 	// #801
   4d650:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d654:	mov	w1, #0x364                 	// #868
   4d658:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d65c:	mov	w1, #0x178                 	// #376
   4d660:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d664:	mov	w1, #0x18e                 	// #398
   4d668:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d66c:	mov	w1, #0x190                 	// #400
   4d670:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d674:	mov	w1, #0x192                 	// #402
   4d678:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d67c:	mov	w1, #0x179                 	// #377
   4d680:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d684:	mov	w1, #0x17a                 	// #378
   4d688:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d68c:	mov	w1, #0x17b                 	// #379
   4d690:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d694:	mov	w1, #0x18f                 	// #399
   4d698:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d69c:	mov	w1, #0x191                 	// #401
   4d6a0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d6a4:	mov	w1, #0x193                 	// #403
   4d6a8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d6ac:	mov	w1, #0x35a                 	// #858
   4d6b0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d6b4:	mov	w1, #0x35e                 	// #862
   4d6b8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d6bc:	mov	w1, #0x17d                 	// #381
   4d6c0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d6c4:	mov	w1, #0x184                 	// #388
   4d6c8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d6cc:	mov	w1, #0x186                 	// #390
   4d6d0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d6d4:	mov	w1, #0x195                 	// #405
   4d6d8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d6dc:	mov	w1, #0x19c                 	// #412
   4d6e0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d6e4:	mov	w1, #0x19e                 	// #414
   4d6e8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d6ec:	mov	w1, #0x181                 	// #385
   4d6f0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d6f4:	mov	w1, #0x199                 	// #409
   4d6f8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d6fc:	mov	w1, #0x189                 	// #393
   4d700:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d704:	mov	w1, #0x1a1                 	// #417
   4d708:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d70c:	mov	w1, #0x18b                 	// #395
   4d710:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d714:	mov	w1, #0x1a3                 	// #419
   4d718:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d71c:	mov	w1, #0x35c                 	// #860
   4d720:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d724:	mov	w1, #0x360                 	// #864
   4d728:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d72c:	mov	w1, #0x257                 	// #599
   4d730:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d734:	mov	w1, #0x259                 	// #601
   4d738:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d73c:	mov	w1, #0x267                 	// #615
   4d740:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d744:	mov	w1, #0x269                 	// #617
   4d748:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d74c:	mov	w1, #0x18a                 	// #394
   4d750:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d754:	mov	w1, #0x177                 	// #375
   4d758:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d75c:	mov	w1, #0x14                  	// #20
   4d760:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d764:	mov	w1, #0x3c9                 	// #969
   4d768:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d76c:	mov	w1, #0x180                 	// #384
   4d770:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d774:	mov	w1, #0x198                 	// #408
   4d778:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d77c:	mov	w1, #0x18d                 	// #397
   4d780:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d784:	mov	w1, #0x93                  	// #147
   4d788:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d78c:	mov	w1, #0x67c                 	// #1660
   4d790:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d794:	mov	w1, #0x666                 	// #1638
   4d798:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d79c:	mov	w1, #0x65e                 	// #1630
   4d7a0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d7a4:	mov	w1, #0x65a                 	// #1626
   4d7a8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d7ac:	mov	w1, #0x671                 	// #1649
   4d7b0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d7b4:	mov	w1, #0x68a                 	// #1674
   4d7b8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d7bc:	mov	w1, #0x680                 	// #1664
   4d7c0:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d7c4:	mov	w1, #0x69b                 	// #1691
   4d7c8:	b	4d288 <aarch64_find_next_opcode@@Base+0xd4>
   4d7cc:	mov	x0, #0x0                   	// #0
   4d7d0:	b	4d29c <aarch64_find_next_opcode@@Base+0xe8>

000000000004d7d4 <aarch64_find_alias_opcode@@Base>:
   4d7d4:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   4d7d8:	ldr	x1, [x1, #3848]
   4d7dc:	sub	x0, x0, x1
   4d7e0:	asr	x0, x0, #4
   4d7e4:	mov	x1, #0x8e39                	// #36409
   4d7e8:	movk	x1, #0x38e3, lsl #16
   4d7ec:	movk	x1, #0xe38e, lsl #32
   4d7f0:	movk	x1, #0x8e38, lsl #48
   4d7f4:	mul	x0, x0, x1
   4d7f8:	mov	w1, w0
   4d7fc:	cmp	w0, #0x58f
   4d800:	b.gt	4d96c <aarch64_find_alias_opcode@@Base+0x198>
   4d804:	cmp	w0, #0x269
   4d808:	b.le	4d830 <aarch64_find_alias_opcode@@Base+0x5c>
   4d80c:	sub	w0, w0, #0x26a
   4d810:	cmp	w0, #0x325
   4d814:	b.hi	4dd4c <aarch64_find_alias_opcode@@Base+0x578>  // b.pmore
   4d818:	adrp	x2, 61000 <fields@@Base+0xc40>
   4d81c:	add	x2, x2, #0xf5c
   4d820:	ldrh	w0, [x2, w0, uxtw #1]
   4d824:	adr	x2, 4d830 <aarch64_find_alias_opcode@@Base+0x5c>
   4d828:	add	x0, x2, w0, sxth #2
   4d82c:	br	x0
   4d830:	cmp	w0, #0x98
   4d834:	b.eq	4dccc <aarch64_find_alias_opcode@@Base+0x4f8>  // b.none
   4d838:	b.le	4d868 <aarch64_find_alias_opcode@@Base+0x94>
   4d83c:	cmp	w0, #0x184
   4d840:	b.eq	4dd0c <aarch64_find_alias_opcode@@Base+0x538>  // b.none
   4d844:	b.le	4d914 <aarch64_find_alias_opcode@@Base+0x140>
   4d848:	cmp	w0, #0x19e
   4d84c:	b.eq	4dd24 <aarch64_find_alias_opcode@@Base+0x550>  // b.none
   4d850:	b.le	4d950 <aarch64_find_alias_opcode@@Base+0x17c>
   4d854:	mov	w1, #0x218                 	// #536
   4d858:	cmp	w0, #0x217
   4d85c:	b.eq	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>  // b.none
   4d860:	mov	x0, #0x0                   	// #0
   4d864:	b	4d8e4 <aarch64_find_alias_opcode@@Base+0x110>
   4d868:	cmp	w0, #0xe
   4d86c:	b.eq	4dcd4 <aarch64_find_alias_opcode@@Base+0x500>  // b.none
   4d870:	b.le	4d894 <aarch64_find_alias_opcode@@Base+0xc0>
   4d874:	cmp	w0, #0x18
   4d878:	b.eq	4dcfc <aarch64_find_alias_opcode@@Base+0x528>  // b.none
   4d87c:	b.le	4d8f8 <aarch64_find_alias_opcode@@Base+0x124>
   4d880:	mov	w1, #0x1b                  	// #27
   4d884:	cmp	w0, #0x1a
   4d888:	b.eq	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>  // b.none
   4d88c:	mov	x0, #0x0                   	// #0
   4d890:	b	4d8e4 <aarch64_find_alias_opcode@@Base+0x110>
   4d894:	cmp	w0, #0x7
   4d898:	b.eq	4dcdc <aarch64_find_alias_opcode@@Base+0x508>  // b.none
   4d89c:	b.le	4d8bc <aarch64_find_alias_opcode@@Base+0xe8>
   4d8a0:	cmp	w0, #0xa
   4d8a4:	b.eq	4dcf4 <aarch64_find_alias_opcode@@Base+0x520>  // b.none
   4d8a8:	mov	w1, #0xd                   	// #13
   4d8ac:	cmp	w0, #0xc
   4d8b0:	b.eq	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>  // b.none
   4d8b4:	mov	x0, #0x0                   	// #0
   4d8b8:	b	4d8e4 <aarch64_find_alias_opcode@@Base+0x110>
   4d8bc:	cmp	w0, #0x2
   4d8c0:	b.eq	4dce4 <aarch64_find_alias_opcode@@Base+0x510>  // b.none
   4d8c4:	mov	w1, #0x5                   	// #5
   4d8c8:	cmp	w0, #0x4
   4d8cc:	b.ne	4d8e8 <aarch64_find_alias_opcode@@Base+0x114>  // b.any
   4d8d0:	sbfiz	x0, x1, #3, #32
   4d8d4:	add	x1, x0, w1, sxtw
   4d8d8:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   4d8dc:	ldr	x0, [x0, #3848]
   4d8e0:	add	x0, x0, x1, lsl #4
   4d8e4:	ret
   4d8e8:	mov	x0, #0x0                   	// #0
   4d8ec:	b	4d8e4 <aarch64_find_alias_opcode@@Base+0x110>
   4d8f0:	mov	w1, #0x26f                 	// #623
   4d8f4:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4d8f8:	cmp	w0, #0x11
   4d8fc:	b.eq	4dd04 <aarch64_find_alias_opcode@@Base+0x530>  // b.none
   4d900:	mov	w1, #0x17                  	// #23
   4d904:	cmp	w0, #0x16
   4d908:	b.eq	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>  // b.none
   4d90c:	mov	x0, #0x0                   	// #0
   4d910:	b	4d8e4 <aarch64_find_alias_opcode@@Base+0x110>
   4d914:	cmp	w0, #0xf2
   4d918:	b.eq	4dd14 <aarch64_find_alias_opcode@@Base+0x540>  // b.none
   4d91c:	b.le	4d934 <aarch64_find_alias_opcode@@Base+0x160>
   4d920:	mov	w1, #0x13e                 	// #318
   4d924:	cmp	w0, #0x13d
   4d928:	b.eq	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>  // b.none
   4d92c:	mov	x0, #0x0                   	// #0
   4d930:	b	4d8e4 <aarch64_find_alias_opcode@@Base+0x110>
   4d934:	cmp	w0, #0x9a
   4d938:	b.eq	4dd1c <aarch64_find_alias_opcode@@Base+0x548>  // b.none
   4d93c:	mov	w1, #0x9d                  	// #157
   4d940:	cmp	w0, #0x9c
   4d944:	b.eq	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>  // b.none
   4d948:	mov	x0, #0x0                   	// #0
   4d94c:	b	4d8e4 <aarch64_find_alias_opcode@@Base+0x110>
   4d950:	cmp	w0, #0x186
   4d954:	b.eq	4dd2c <aarch64_find_alias_opcode@@Base+0x558>  // b.none
   4d958:	mov	w1, #0x19d                 	// #413
   4d95c:	cmp	w0, #0x19c
   4d960:	b.eq	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>  // b.none
   4d964:	mov	x0, #0x0                   	// #0
   4d968:	b	4d8e4 <aarch64_find_alias_opcode@@Base+0x110>
   4d96c:	cmp	w0, #0x6de
   4d970:	b.eq	4dd34 <aarch64_find_alias_opcode@@Base+0x560>  // b.none
   4d974:	b.le	4d994 <aarch64_find_alias_opcode@@Base+0x1c0>
   4d978:	cmp	w0, #0x71c
   4d97c:	b.eq	4dd44 <aarch64_find_alias_opcode@@Base+0x570>  // b.none
   4d980:	mov	w1, #0x4f3                 	// #1267
   4d984:	cmp	w0, #0x71d
   4d988:	b.eq	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>  // b.none
   4d98c:	mov	x0, #0x0                   	// #0
   4d990:	b	4d8e4 <aarch64_find_alias_opcode@@Base+0x110>
   4d994:	cmp	w0, #0x6db
   4d998:	b.eq	4dd3c <aarch64_find_alias_opcode@@Base+0x568>  // b.none
   4d99c:	mov	w1, #0x4eb                 	// #1259
   4d9a0:	cmp	w0, #0x6dd
   4d9a4:	b.eq	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>  // b.none
   4d9a8:	mov	w1, #0x4e8                 	// #1256
   4d9ac:	cmp	w0, #0x6da
   4d9b0:	b.eq	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>  // b.none
   4d9b4:	mov	x0, #0x0                   	// #0
   4d9b8:	b	4d8e4 <aarch64_find_alias_opcode@@Base+0x110>
   4d9bc:	mov	w1, #0x279                 	// #633
   4d9c0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4d9c4:	mov	w1, #0x299                 	// #665
   4d9c8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4d9cc:	mov	w1, #0x29c                 	// #668
   4d9d0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4d9d4:	mov	w1, #0x29e                 	// #670
   4d9d8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4d9dc:	mov	w1, #0x2ca                 	// #714
   4d9e0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4d9e4:	mov	w1, #0x2cc                 	// #716
   4d9e8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4d9ec:	mov	w1, #0x2ce                 	// #718
   4d9f0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4d9f4:	mov	w1, #0x2d0                 	// #720
   4d9f8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4d9fc:	mov	w1, #0x2d3                 	// #723
   4da00:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da04:	mov	w1, #0x2e0                 	// #736
   4da08:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da0c:	mov	w1, #0x2e2                 	// #738
   4da10:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da14:	mov	w1, #0x2e4                 	// #740
   4da18:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da1c:	mov	w1, #0x2e6                 	// #742
   4da20:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da24:	mov	w1, #0x2e9                 	// #745
   4da28:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da2c:	mov	w1, #0x2eb                 	// #747
   4da30:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da34:	mov	w1, #0x2f6                 	// #758
   4da38:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da3c:	mov	w1, #0x3df                 	// #991
   4da40:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da44:	mov	w1, #0x3e1                 	// #993
   4da48:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da4c:	mov	w1, #0x3e4                 	// #996
   4da50:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da54:	mov	w1, #0x3e9                 	// #1001
   4da58:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da5c:	mov	w1, #0x3eb                 	// #1003
   4da60:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da64:	mov	w1, #0x3ef                 	// #1007
   4da68:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da6c:	mov	w1, #0x46d                 	// #1133
   4da70:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da74:	mov	w1, #0x46e                 	// #1134
   4da78:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da7c:	mov	w1, #0x46f                 	// #1135
   4da80:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da84:	mov	w1, #0x470                 	// #1136
   4da88:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da8c:	mov	w1, #0x471                 	// #1137
   4da90:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da94:	mov	w1, #0x472                 	// #1138
   4da98:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4da9c:	mov	w1, #0x473                 	// #1139
   4daa0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4daa4:	mov	w1, #0x474                 	// #1140
   4daa8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4daac:	mov	w1, #0x475                 	// #1141
   4dab0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dab4:	mov	w1, #0x476                 	// #1142
   4dab8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dabc:	mov	w1, #0x477                 	// #1143
   4dac0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dac4:	mov	w1, #0x478                 	// #1144
   4dac8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dacc:	mov	w1, #0x479                 	// #1145
   4dad0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dad4:	mov	w1, #0x47a                 	// #1146
   4dad8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dadc:	mov	w1, #0x47b                 	// #1147
   4dae0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dae4:	mov	w1, #0x47c                 	// #1148
   4dae8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4daec:	mov	w1, #0x47d                 	// #1149
   4daf0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4daf4:	mov	w1, #0x47e                 	// #1150
   4daf8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dafc:	mov	w1, #0x47f                 	// #1151
   4db00:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db04:	mov	w1, #0x480                 	// #1152
   4db08:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db0c:	mov	w1, #0x481                 	// #1153
   4db10:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db14:	mov	w1, #0x482                 	// #1154
   4db18:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db1c:	mov	w1, #0x483                 	// #1155
   4db20:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db24:	mov	w1, #0x484                 	// #1156
   4db28:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db2c:	mov	w1, #0x485                 	// #1157
   4db30:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db34:	mov	w1, #0x486                 	// #1158
   4db38:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db3c:	mov	w1, #0x487                 	// #1159
   4db40:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db44:	mov	w1, #0x488                 	// #1160
   4db48:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db4c:	mov	w1, #0x489                 	// #1161
   4db50:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db54:	mov	w1, #0x48a                 	// #1162
   4db58:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db5c:	mov	w1, #0x48b                 	// #1163
   4db60:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db64:	mov	w1, #0x48c                 	// #1164
   4db68:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db6c:	mov	w1, #0x48d                 	// #1165
   4db70:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db74:	mov	w1, #0x48e                 	// #1166
   4db78:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db7c:	mov	w1, #0x48f                 	// #1167
   4db80:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db84:	mov	w1, #0x490                 	// #1168
   4db88:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db8c:	mov	w1, #0x491                 	// #1169
   4db90:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db94:	mov	w1, #0x492                 	// #1170
   4db98:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4db9c:	mov	w1, #0x493                 	// #1171
   4dba0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dba4:	mov	w1, #0x494                 	// #1172
   4dba8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dbac:	mov	w1, #0x495                 	// #1173
   4dbb0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dbb4:	mov	w1, #0x496                 	// #1174
   4dbb8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dbbc:	mov	w1, #0x497                 	// #1175
   4dbc0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dbc4:	mov	w1, #0x498                 	// #1176
   4dbc8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dbcc:	mov	w1, #0x499                 	// #1177
   4dbd0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dbd4:	mov	w1, #0x49a                 	// #1178
   4dbd8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dbdc:	mov	w1, #0x49b                 	// #1179
   4dbe0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dbe4:	mov	w1, #0x49c                 	// #1180
   4dbe8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dbec:	mov	w1, #0x49e                 	// #1182
   4dbf0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dbf4:	mov	w1, #0x4a0                 	// #1184
   4dbf8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dbfc:	mov	w1, #0x4d3                 	// #1235
   4dc00:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc04:	mov	w1, #0x4bc                 	// #1212
   4dc08:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc0c:	mov	w1, #0x4c7                 	// #1223
   4dc10:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc14:	mov	w1, #0x7f1                 	// #2033
   4dc18:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc1c:	mov	w1, #0x4f2                 	// #1266
   4dc20:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc24:	mov	w1, #0x4f6                 	// #1270
   4dc28:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc2c:	mov	w1, #0x7f2                 	// #2034
   4dc30:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc34:	mov	w1, #0x7f5                 	// #2037
   4dc38:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc3c:	mov	w1, #0x7f3                 	// #2035
   4dc40:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc44:	mov	w1, #0x7f4                 	// #2036
   4dc48:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc4c:	mov	w1, #0x4ef                 	// #1263
   4dc50:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc54:	mov	w1, #0x4f1                 	// #1265
   4dc58:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc5c:	mov	w1, #0x7fc                 	// #2044
   4dc60:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc64:	mov	w1, #0x4ea                 	// #1258
   4dc68:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc6c:	mov	w1, #0x4ec                 	// #1260
   4dc70:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc74:	mov	w1, #0x7fb                 	// #2043
   4dc78:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc7c:	mov	w1, #0x4ed                 	// #1261
   4dc80:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc84:	mov	w1, #0x7f6                 	// #2038
   4dc88:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc8c:	mov	w1, #0x4f7                 	// #1271
   4dc90:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc94:	mov	w1, #0x4f8                 	// #1272
   4dc98:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dc9c:	mov	w1, #0x7f7                 	// #2039
   4dca0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dca4:	mov	w1, #0x7f8                 	// #2040
   4dca8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dcac:	mov	w1, #0x7f9                 	// #2041
   4dcb0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dcb4:	mov	w1, #0x7fa                 	// #2042
   4dcb8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dcbc:	mov	w1, #0x4e7                 	// #1255
   4dcc0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dcc4:	mov	w1, #0x4e6                 	// #1254
   4dcc8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dccc:	mov	w1, #0x99                  	// #153
   4dcd0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dcd4:	mov	w1, #0xf                   	// #15
   4dcd8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dcdc:	mov	w1, #0x8                   	// #8
   4dce0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dce4:	mov	w1, #0x3                   	// #3
   4dce8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dcec:	mov	w1, #0x273                 	// #627
   4dcf0:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dcf4:	mov	w1, #0xb                   	// #11
   4dcf8:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dcfc:	mov	w1, #0x19                  	// #25
   4dd00:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dd04:	mov	w1, #0x12                  	// #18
   4dd08:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dd0c:	mov	w1, #0x185                 	// #389
   4dd10:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dd14:	mov	w1, #0xf3                  	// #243
   4dd18:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dd1c:	mov	w1, #0x9b                  	// #155
   4dd20:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dd24:	mov	w1, #0x19f                 	// #415
   4dd28:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dd2c:	mov	w1, #0x187                 	// #391
   4dd30:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dd34:	mov	w1, #0x4f5                 	// #1269
   4dd38:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dd3c:	mov	w1, #0x7fd                 	// #2045
   4dd40:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dd44:	mov	w1, #0x4f0                 	// #1264
   4dd48:	b	4d8d0 <aarch64_find_alias_opcode@@Base+0xfc>
   4dd4c:	mov	x0, #0x0                   	// #0
   4dd50:	b	4d8e4 <aarch64_find_alias_opcode@@Base+0x110>

000000000004dd54 <aarch64_find_next_alias_opcode@@Base>:
   4dd54:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   4dd58:	ldr	x1, [x1, #3848]
   4dd5c:	sub	x0, x0, x1
   4dd60:	asr	x0, x0, #4
   4dd64:	mov	x1, #0x8e39                	// #36409
   4dd68:	movk	x1, #0x38e3, lsl #16
   4dd6c:	movk	x1, #0xe38e, lsl #32
   4dd70:	movk	x1, #0x8e38, lsl #48
   4dd74:	mul	x0, x0, x1
   4dd78:	cmp	w0, #0x4f8
   4dd7c:	b.gt	4ddb4 <aarch64_find_next_alias_opcode@@Base+0x60>
   4dd80:	cmp	w0, #0x2
   4dd84:	b.le	4e3b8 <aarch64_find_next_alias_opcode@@Base+0x664>
   4dd88:	sub	w0, w0, #0x3
   4dd8c:	cmp	w0, #0x4f5
   4dd90:	b.hi	4e3c0 <aarch64_find_next_alias_opcode@@Base+0x66c>  // b.pmore
   4dd94:	adrp	x1, 62000 <fields@@Base+0x1c40>
   4dd98:	add	x1, x1, #0x5a8
   4dd9c:	ldrh	w0, [x1, w0, uxtw #1]
   4dda0:	adr	x1, 4ddac <aarch64_find_next_alias_opcode@@Base+0x58>
   4dda4:	add	x0, x1, w0, sxth #2
   4dda8:	br	x0
   4ddac:	mov	w1, #0x4                   	// #4
   4ddb0:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4ddb4:	cmp	w0, #0x7f7
   4ddb8:	b.eq	4e380 <aarch64_find_next_alias_opcode@@Base+0x62c>  // b.none
   4ddbc:	b.le	4dde8 <aarch64_find_next_alias_opcode@@Base+0x94>
   4ddc0:	cmp	w0, #0x7fb
   4ddc4:	b.eq	4e3a0 <aarch64_find_next_alias_opcode@@Base+0x64c>  // b.none
   4ddc8:	b.le	4de50 <aarch64_find_next_alias_opcode@@Base+0xfc>
   4ddcc:	cmp	w0, #0x7fc
   4ddd0:	b.eq	4e3b0 <aarch64_find_next_alias_opcode@@Base+0x65c>  // b.none
   4ddd4:	mov	w1, #0x6db                 	// #1755
   4ddd8:	cmp	w0, #0x7fd
   4dddc:	b.eq	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>  // b.none
   4dde0:	mov	x0, #0x0                   	// #0
   4dde4:	b	4de38 <aarch64_find_next_alias_opcode@@Base+0xe4>
   4dde8:	cmp	w0, #0x7f4
   4ddec:	b.eq	4e388 <aarch64_find_next_alias_opcode@@Base+0x634>  // b.none
   4ddf0:	b.le	4de10 <aarch64_find_next_alias_opcode@@Base+0xbc>
   4ddf4:	cmp	w0, #0x7f5
   4ddf8:	b.eq	4e398 <aarch64_find_next_alias_opcode@@Base+0x644>  // b.none
   4ddfc:	mov	w1, #0x55a                 	// #1370
   4de00:	cmp	w0, #0x7f6
   4de04:	b.eq	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>  // b.none
   4de08:	mov	x0, #0x0                   	// #0
   4de0c:	b	4de38 <aarch64_find_next_alias_opcode@@Base+0xe4>
   4de10:	cmp	w0, #0x7f2
   4de14:	b.eq	4e390 <aarch64_find_next_alias_opcode@@Base+0x63c>  // b.none
   4de18:	mov	w1, #0x52e                 	// #1326
   4de1c:	cmp	w0, #0x7f3
   4de20:	b.ne	4de3c <aarch64_find_next_alias_opcode@@Base+0xe8>  // b.any
   4de24:	sbfiz	x0, x1, #3, #32
   4de28:	add	x1, x0, w1, sxtw
   4de2c:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   4de30:	ldr	x0, [x0, #3848]
   4de34:	add	x0, x0, x1, lsl #4
   4de38:	ret
   4de3c:	mov	w1, #0x503                 	// #1283
   4de40:	cmp	w0, #0x7f1
   4de44:	b.eq	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>  // b.none
   4de48:	mov	x0, #0x0                   	// #0
   4de4c:	b	4de38 <aarch64_find_next_alias_opcode@@Base+0xe4>
   4de50:	cmp	w0, #0x7f9
   4de54:	b.eq	4e3a8 <aarch64_find_next_alias_opcode@@Base+0x654>  // b.none
   4de58:	mov	w1, #0x572                 	// #1394
   4de5c:	cmp	w0, #0x7fa
   4de60:	b.eq	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>  // b.none
   4de64:	mov	w1, #0x563                 	// #1379
   4de68:	cmp	w0, #0x7f8
   4de6c:	b.eq	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>  // b.none
   4de70:	mov	x0, #0x0                   	// #0
   4de74:	b	4de38 <aarch64_find_next_alias_opcode@@Base+0xe4>
   4de78:	mov	w1, #0x7                   	// #7
   4de7c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4de80:	mov	w1, #0xa                   	// #10
   4de84:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4de88:	mov	w1, #0xc                   	// #12
   4de8c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4de90:	mov	w1, #0xe                   	// #14
   4de94:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4de98:	mov	w1, #0x11                  	// #17
   4de9c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dea0:	mov	w1, #0x16                  	// #22
   4dea4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dea8:	mov	w1, #0x18                  	// #24
   4deac:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4deb0:	mov	w1, #0x1c                  	// #28
   4deb4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4deb8:	mov	w1, #0x1a                  	// #26
   4debc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dec0:	mov	w1, #0x98                  	// #152
   4dec4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dec8:	mov	w1, #0x9a                  	// #154
   4decc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4ded0:	mov	w1, #0x9c                  	// #156
   4ded4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4ded8:	mov	w1, #0xf2                  	// #242
   4dedc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dee0:	mov	w1, #0x13d                 	// #317
   4dee4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dee8:	mov	w1, #0x184                 	// #388
   4deec:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4def0:	mov	w1, #0x186                 	// #390
   4def4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4def8:	mov	w1, #0x19c                 	// #412
   4defc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df00:	mov	w1, #0x19e                 	// #414
   4df04:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df08:	mov	w1, #0x217                 	// #535
   4df0c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df10:	mov	w1, #0x26e                 	// #622
   4df14:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df18:	mov	w1, #0x26d                 	// #621
   4df1c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df20:	mov	w1, #0x270                 	// #624
   4df24:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df28:	mov	w1, #0x26c                 	// #620
   4df2c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df30:	mov	w1, #0x26b                 	// #619
   4df34:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df38:	mov	w1, #0x26a                 	// #618
   4df3c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df40:	mov	w1, #0x274                 	// #628
   4df44:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df48:	mov	w1, #0x272                 	// #626
   4df4c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df50:	mov	w1, #0x271                 	// #625
   4df54:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df58:	mov	w1, #0x278                 	// #632
   4df5c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df60:	mov	w1, #0x27b                 	// #635
   4df64:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df68:	mov	w1, #0x27a                 	// #634
   4df6c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df70:	mov	w1, #0x277                 	// #631
   4df74:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df78:	mov	w1, #0x276                 	// #630
   4df7c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df80:	mov	w1, #0x275                 	// #629
   4df84:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df88:	mov	w1, #0x298                 	// #664
   4df8c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df90:	mov	w1, #0x297                 	// #663
   4df94:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4df98:	mov	w1, #0x29b                 	// #667
   4df9c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dfa0:	mov	w1, #0x29a                 	// #666
   4dfa4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dfa8:	mov	w1, #0x29d                 	// #669
   4dfac:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dfb0:	mov	w1, #0x2b1                 	// #689
   4dfb4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dfb8:	mov	w1, #0x2c9                 	// #713
   4dfbc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dfc0:	mov	w1, #0x2cb                 	// #715
   4dfc4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dfc8:	mov	w1, #0x2cd                 	// #717
   4dfcc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dfd0:	mov	w1, #0x2cf                 	// #719
   4dfd4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dfd8:	mov	w1, #0x2d2                 	// #722
   4dfdc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dfe0:	mov	w1, #0x2df                 	// #735
   4dfe4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dfe8:	mov	w1, #0x2e1                 	// #737
   4dfec:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dff0:	mov	w1, #0x2e3                 	// #739
   4dff4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4dff8:	mov	w1, #0x2e5                 	// #741
   4dffc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e000:	mov	w1, #0x2e8                 	// #744
   4e004:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e008:	mov	w1, #0x2ea                 	// #746
   4e00c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e010:	mov	w1, #0x2f5                 	// #757
   4e014:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e018:	mov	w1, #0x3de                 	// #990
   4e01c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e020:	mov	w1, #0x3e0                 	// #992
   4e024:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e028:	mov	w1, #0x3e3                 	// #995
   4e02c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e030:	mov	w1, #0x3e8                 	// #1000
   4e034:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e038:	mov	w1, #0x3e7                 	// #999
   4e03c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e040:	mov	w1, #0x3ea                 	// #1002
   4e044:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e048:	mov	w1, #0x3ee                 	// #1006
   4e04c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e050:	mov	w1, #0x40d                 	// #1037
   4e054:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e058:	mov	w1, #0x40e                 	// #1038
   4e05c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e060:	mov	w1, #0x40f                 	// #1039
   4e064:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e068:	mov	w1, #0x411                 	// #1041
   4e06c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e070:	mov	w1, #0x414                 	// #1044
   4e074:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e078:	mov	w1, #0x417                 	// #1047
   4e07c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e080:	mov	w1, #0x419                 	// #1049
   4e084:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e088:	mov	w1, #0x41a                 	// #1050
   4e08c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e090:	mov	w1, #0x41b                 	// #1051
   4e094:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e098:	mov	w1, #0x41d                 	// #1053
   4e09c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e0a0:	mov	w1, #0x420                 	// #1056
   4e0a4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e0a8:	mov	w1, #0x423                 	// #1059
   4e0ac:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e0b0:	mov	w1, #0x425                 	// #1061
   4e0b4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e0b8:	mov	w1, #0x426                 	// #1062
   4e0bc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e0c0:	mov	w1, #0x427                 	// #1063
   4e0c4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e0c8:	mov	w1, #0x429                 	// #1065
   4e0cc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e0d0:	mov	w1, #0x42c                 	// #1068
   4e0d4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e0d8:	mov	w1, #0x42f                 	// #1071
   4e0dc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e0e0:	mov	w1, #0x431                 	// #1073
   4e0e4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e0e8:	mov	w1, #0x432                 	// #1074
   4e0ec:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e0f0:	mov	w1, #0x433                 	// #1075
   4e0f4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e0f8:	mov	w1, #0x435                 	// #1077
   4e0fc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e100:	mov	w1, #0x438                 	// #1080
   4e104:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e108:	mov	w1, #0x43b                 	// #1083
   4e10c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e110:	mov	w1, #0x43d                 	// #1085
   4e114:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e118:	mov	w1, #0x43e                 	// #1086
   4e11c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e120:	mov	w1, #0x43f                 	// #1087
   4e124:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e128:	mov	w1, #0x441                 	// #1089
   4e12c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e130:	mov	w1, #0x444                 	// #1092
   4e134:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e138:	mov	w1, #0x447                 	// #1095
   4e13c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e140:	mov	w1, #0x449                 	// #1097
   4e144:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e148:	mov	w1, #0x44a                 	// #1098
   4e14c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e150:	mov	w1, #0x44b                 	// #1099
   4e154:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e158:	mov	w1, #0x44d                 	// #1101
   4e15c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e160:	mov	w1, #0x450                 	// #1104
   4e164:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e168:	mov	w1, #0x453                 	// #1107
   4e16c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e170:	mov	w1, #0x455                 	// #1109
   4e174:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e178:	mov	w1, #0x456                 	// #1110
   4e17c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e180:	mov	w1, #0x457                 	// #1111
   4e184:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e188:	mov	w1, #0x459                 	// #1113
   4e18c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e190:	mov	w1, #0x45c                 	// #1116
   4e194:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e198:	mov	w1, #0x45f                 	// #1119
   4e19c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e1a0:	mov	w1, #0x461                 	// #1121
   4e1a4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e1a8:	mov	w1, #0x462                 	// #1122
   4e1ac:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e1b0:	mov	w1, #0x463                 	// #1123
   4e1b4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e1b8:	mov	w1, #0x465                 	// #1125
   4e1bc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e1c0:	mov	w1, #0x468                 	// #1128
   4e1c4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e1c8:	mov	w1, #0x46b                 	// #1131
   4e1cc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e1d0:	mov	w1, #0x49d                 	// #1181
   4e1d4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e1d8:	mov	w1, #0x49f                 	// #1183
   4e1dc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e1e0:	mov	w1, #0x4d2                 	// #1234
   4e1e4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e1e8:	mov	w1, #0x4d1                 	// #1233
   4e1ec:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e1f0:	mov	w1, #0x4d0                 	// #1232
   4e1f4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e1f8:	mov	w1, #0x4cf                 	// #1231
   4e1fc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e200:	mov	w1, #0x4ce                 	// #1230
   4e204:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e208:	mov	w1, #0x4cd                 	// #1229
   4e20c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e210:	mov	w1, #0x4cc                 	// #1228
   4e214:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e218:	mov	w1, #0x4b8                 	// #1208
   4e21c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e220:	mov	w1, #0x4b7                 	// #1207
   4e224:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e228:	mov	w1, #0x4b6                 	// #1206
   4e22c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e230:	mov	w1, #0x4b5                 	// #1205
   4e234:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e238:	mov	w1, #0x4b4                 	// #1204
   4e23c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e240:	mov	w1, #0x4b3                 	// #1203
   4e244:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e248:	mov	w1, #0x4b2                 	// #1202
   4e24c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e250:	mov	w1, #0x4b1                 	// #1201
   4e254:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e258:	mov	w1, #0x4b0                 	// #1200
   4e25c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e260:	mov	w1, #0x4af                 	// #1199
   4e264:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e268:	mov	w1, #0x4ae                 	// #1198
   4e26c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e270:	mov	w1, #0x4ad                 	// #1197
   4e274:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e278:	mov	w1, #0x4ac                 	// #1196
   4e27c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e280:	mov	w1, #0x4ab                 	// #1195
   4e284:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e288:	mov	w1, #0x4aa                 	// #1194
   4e28c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e290:	mov	w1, #0x4a9                 	// #1193
   4e294:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e298:	mov	w1, #0x4bb                 	// #1211
   4e29c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e2a0:	mov	w1, #0x4ba                 	// #1210
   4e2a4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e2a8:	mov	w1, #0x4c6                 	// #1222
   4e2ac:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e2b0:	mov	w1, #0x4c5                 	// #1221
   4e2b4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e2b8:	mov	w1, #0x4c4                 	// #1220
   4e2bc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e2c0:	mov	w1, #0x4c3                 	// #1219
   4e2c4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e2c8:	mov	w1, #0x4c2                 	// #1218
   4e2cc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e2d0:	mov	w1, #0x4c1                 	// #1217
   4e2d4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e2d8:	mov	w1, #0x4c0                 	// #1216
   4e2dc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e2e0:	mov	w1, #0x505                 	// #1285
   4e2e4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e2e8:	mov	w1, #0x506                 	// #1286
   4e2ec:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e2f0:	mov	w1, #0x547                 	// #1351
   4e2f4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e2f8:	mov	w1, #0x548                 	// #1352
   4e2fc:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e300:	mov	w1, #0x549                 	// #1353
   4e304:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e308:	mov	w1, #0x555                 	// #1365
   4e30c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e310:	mov	w1, #0x4e9                 	// #1257
   4e314:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e318:	mov	w1, #0x556                 	// #1366
   4e31c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e320:	mov	w1, #0x557                 	// #1367
   4e324:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e328:	mov	w1, #0x558                 	// #1368
   4e32c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e330:	mov	w1, #0x55c                 	// #1372
   4e334:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e338:	mov	w1, #0x55d                 	// #1373
   4e33c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e340:	mov	w1, #0x578                 	// #1400
   4e344:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e348:	mov	w1, #0x58f                 	// #1423
   4e34c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e350:	mov	w1, #0x6da                 	// #1754
   4e354:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e358:	mov	w1, #0x6dd                 	// #1757
   4e35c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e360:	mov	w1, #0x6de                 	// #1758
   4e364:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e368:	mov	w1, #0x71c                 	// #1820
   4e36c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e370:	mov	w1, #0x71d                 	// #1821
   4e374:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e378:	mov	w1, #0x2                   	// #2
   4e37c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e380:	mov	w1, #0x562                 	// #1378
   4e384:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e388:	mov	w1, #0x531                 	// #1329
   4e38c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e390:	mov	w1, #0x529                 	// #1321
   4e394:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e398:	mov	w1, #0x52c                 	// #1324
   4e39c:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e3a0:	mov	w1, #0x4ee                 	// #1262
   4e3a4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e3a8:	mov	w1, #0x570                 	// #1392
   4e3ac:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e3b0:	mov	w1, #0x4f4                 	// #1268
   4e3b4:	b	4de24 <aarch64_find_next_alias_opcode@@Base+0xd0>
   4e3b8:	mov	x0, #0x0                   	// #0
   4e3bc:	b	4de38 <aarch64_find_next_alias_opcode@@Base+0xe4>
   4e3c0:	mov	x0, #0x0                   	// #0
   4e3c4:	b	4de38 <aarch64_find_next_alias_opcode@@Base+0xe4>

000000000004e3c8 <aarch64_extract_operand@@Base>:
   4e3c8:	stp	x29, x30, [sp, #-16]!
   4e3cc:	mov	x29, sp
   4e3d0:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   4e3d4:	ldr	x5, [x5, #4032]
   4e3d8:	sub	x5, x0, x5
   4e3dc:	asr	x5, x5, #4
   4e3e0:	mov	x6, #0xaaaaaaaaaaaaaaaa    	// #-6148914691236517206
   4e3e4:	movk	x6, #0xaaab
   4e3e8:	mul	x5, x5, x6
   4e3ec:	sub	w5, w5, #0x1
   4e3f0:	cmp	w5, #0xce
   4e3f4:	b.hi	4e5f4 <aarch64_extract_operand@@Base+0x22c>  // b.pmore
   4e3f8:	adrp	x6, 62000 <fields@@Base+0x1c40>
   4e3fc:	add	x6, x6, #0xf94
   4e400:	ldrb	w5, [x6, w5, uxtw]
   4e404:	adr	x6, 4e410 <aarch64_extract_operand@@Base+0x48>
   4e408:	add	x5, x6, w5, sxtb #2
   4e40c:	br	x5
   4e410:	bl	358c0 <aarch64_ext_regno@plt>
   4e414:	ldp	x29, x30, [sp], #16
   4e418:	ret
   4e41c:	bl	35110 <aarch64_ext_regrt_sysins@plt>
   4e420:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e424:	bl	35a60 <aarch64_ext_regno_pair@plt>
   4e428:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e42c:	bl	353c0 <aarch64_ext_reg_extended@plt>
   4e430:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e434:	bl	35a90 <aarch64_ext_reg_shifted@plt>
   4e438:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e43c:	bl	35a70 <aarch64_ext_ft@plt>
   4e440:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e444:	bl	352b0 <aarch64_ext_reglane@plt>
   4e448:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e44c:	bl	35750 <aarch64_ext_reglist@plt>
   4e450:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e454:	bl	35580 <aarch64_ext_ldst_reglist@plt>
   4e458:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e45c:	bl	35150 <aarch64_ext_ldst_reglist_r@plt>
   4e460:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e464:	bl	356c0 <aarch64_ext_ldst_elemlist@plt>
   4e468:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e46c:	bl	35720 <aarch64_ext_imm@plt>
   4e470:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e474:	bl	35800 <aarch64_ext_advsimd_imm_shift@plt>
   4e478:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e47c:	bl	35b10 <aarch64_ext_advsimd_imm_modified@plt>
   4e480:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e484:	bl	35770 <aarch64_ext_shll_imm@plt>
   4e488:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e48c:	bl	35370 <aarch64_ext_fpimm@plt>
   4e490:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e494:	bl	35420 <aarch64_ext_limm@plt>
   4e498:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e49c:	bl	351c0 <aarch64_ext_aimm@plt>
   4e4a0:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e4a4:	bl	35960 <aarch64_ext_imm_half@plt>
   4e4a8:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e4ac:	bl	35120 <aarch64_ext_fbits@plt>
   4e4b0:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e4b4:	bl	355c0 <aarch64_ext_imm_rotate2@plt>
   4e4b8:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e4bc:	bl	35af0 <aarch64_ext_imm_rotate1@plt>
   4e4c0:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e4c4:	bl	35b90 <aarch64_ext_cond@plt>
   4e4c8:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e4cc:	bl	358a0 <aarch64_ext_addr_simple@plt>
   4e4d0:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e4d4:	bl	357c0 <aarch64_ext_addr_regoff@plt>
   4e4d8:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e4dc:	bl	352a0 <aarch64_ext_addr_simm@plt>
   4e4e0:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e4e4:	bl	35320 <aarch64_ext_addr_simm10@plt>
   4e4e8:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e4ec:	bl	351a0 <aarch64_ext_addr_uimm12@plt>
   4e4f0:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e4f4:	bl	35350 <aarch64_ext_addr_offset@plt>
   4e4f8:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e4fc:	bl	35b40 <aarch64_ext_simd_addr_post@plt>
   4e500:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e504:	bl	350c0 <aarch64_ext_sysreg@plt>
   4e508:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e50c:	bl	35b20 <aarch64_ext_pstatefield@plt>
   4e510:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e514:	bl	35020 <aarch64_ext_sysins_op@plt>
   4e518:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e51c:	bl	359d0 <aarch64_ext_barrier@plt>
   4e520:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e524:	bl	35880 <aarch64_ext_prfop@plt>
   4e528:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e52c:	bl	355d0 <aarch64_ext_hint@plt>
   4e530:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e534:	bl	35910 <aarch64_ext_sve_addr_ri_s4@plt>
   4e538:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e53c:	bl	35460 <aarch64_ext_sve_addr_ri_s4xvl@plt>
   4e540:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e544:	bl	359c0 <aarch64_ext_sve_addr_ri_s6xvl@plt>
   4e548:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e54c:	bl	35260 <aarch64_ext_sve_addr_ri_s9xvl@plt>
   4e550:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e554:	bl	35b60 <aarch64_ext_sve_addr_ri_u6@plt>
   4e558:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e55c:	bl	35900 <aarch64_ext_sve_addr_rr_lsl@plt>
   4e560:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e564:	bl	35a50 <aarch64_ext_sve_addr_rz_xtw@plt>
   4e568:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e56c:	bl	35090 <aarch64_ext_sve_addr_zi_u5@plt>
   4e570:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e574:	bl	35660 <aarch64_ext_sve_addr_zz_lsl@plt>
   4e578:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e57c:	bl	35280 <aarch64_ext_sve_addr_zz_sxtw@plt>
   4e580:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e584:	bl	357d0 <aarch64_ext_sve_addr_zz_uxtw@plt>
   4e588:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e58c:	bl	356f0 <aarch64_ext_sve_aimm@plt>
   4e590:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e594:	bl	351e0 <aarch64_ext_sve_asimm@plt>
   4e598:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e59c:	bl	359f0 <aarch64_ext_sve_float_half_one@plt>
   4e5a0:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e5a4:	bl	35510 <aarch64_ext_sve_float_half_two@plt>
   4e5a8:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e5ac:	bl	357a0 <aarch64_ext_sve_float_zero_one@plt>
   4e5b0:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e5b4:	bl	35500 <aarch64_ext_inv_limm@plt>
   4e5b8:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e5bc:	bl	35ab0 <aarch64_ext_sve_limm_mov@plt>
   4e5c0:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e5c4:	bl	35930 <aarch64_ext_sve_scale@plt>
   4e5c8:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e5cc:	bl	35190 <aarch64_ext_sve_shlimm@plt>
   4e5d0:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e5d4:	bl	35180 <aarch64_ext_sve_shrimm@plt>
   4e5d8:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e5dc:	bl	354d0 <aarch64_ext_sve_quad_index@plt>
   4e5e0:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e5e4:	bl	355b0 <aarch64_ext_sve_index@plt>
   4e5e8:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e5ec:	bl	354c0 <aarch64_ext_sve_reglist@plt>
   4e5f0:	b	4e414 <aarch64_extract_operand@@Base+0x4c>
   4e5f4:	adrp	x3, 63000 <fields@@Base+0x2c40>
   4e5f8:	add	x3, x3, #0x68
   4e5fc:	mov	w2, #0x5dcb                	// #24011
   4e600:	adrp	x1, 63000 <fields@@Base+0x2c40>
   4e604:	add	x1, x1, #0x80
   4e608:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   4e60c:	add	x0, x0, #0xb60
   4e610:	bl	35ac0 <__assert_fail@plt>

000000000004e614 <aarch64_get_opcode@@Base>:
   4e614:	adrp	x1, 64000 <fields@@Base+0x3c40>
   4e618:	add	x1, x1, #0xfa8
   4e61c:	ldr	w0, [x1, w0, uxtw #2]
   4e620:	add	x0, x0, x0, lsl #3
   4e624:	adrp	x1, a3000 <aarch64_operands@@Base+0x16bc0>
   4e628:	ldr	x1, [x1, #3848]
   4e62c:	add	x0, x1, x0, lsl #4
   4e630:	ret
   4e634:	asr	x1, x0, #19
   4e638:	and	x1, x1, #0x8
   4e63c:	ubfx	x0, x0, #13, #3
   4e640:	orr	x0, x1, x0
   4e644:	ret
   4e648:	stp	x29, x30, [sp, #-48]!
   4e64c:	mov	x29, sp
   4e650:	stp	x19, x20, [sp, #16]
   4e654:	stp	x21, x22, [sp, #32]
   4e658:	mov	x19, x0
   4e65c:	mov	x20, x1
   4e660:	mov	x21, x2
   4e664:	mov	w22, w3
   4e668:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   4e66c:	ldr	w4, [x0, #1616]
   4e670:	and	x0, x19, #0xf
   4e674:	add	x4, x4, x4, lsl #3
   4e678:	add	x4, x0, x4, lsl #1
   4e67c:	add	x4, x4, #0x2
   4e680:	adrp	x0, 8e000 <aarch64_operands@@Base+0x1bc0>
   4e684:	add	x0, x0, #0xb70
   4e688:	ldr	x2, [x0, x4, lsl #3]
   4e68c:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   4e690:	add	x1, x1, #0x588
   4e694:	mov	x0, x21
   4e698:	blr	x20
   4e69c:	tst	x19, #0xff0
   4e6a0:	b.eq	4e72c <aarch64_get_opcode@@Base+0x118>  // b.none
   4e6a4:	tbnz	w19, #4, 4e718 <aarch64_get_opcode@@Base+0x104>
   4e6a8:	ubfx	w2, w19, #7, #5
   4e6ac:	ubfx	w1, w19, #5, #2
   4e6b0:	tst	w19, #0xf80
   4e6b4:	b.ne	4e6c4 <aarch64_get_opcode@@Base+0xb0>  // b.any
   4e6b8:	mov	w2, #0x20                  	// #32
   4e6bc:	cmp	w1, #0x3
   4e6c0:	b.eq	4e6f0 <aarch64_get_opcode@@Base+0xdc>  // b.none
   4e6c4:	cbz	w22, 4e704 <aarch64_get_opcode@@Base+0xf0>
   4e6c8:	adrp	x0, 8e000 <aarch64_operands@@Base+0x1bc0>
   4e6cc:	add	x0, x0, #0xb70
   4e6d0:	add	x0, x0, #0x480
   4e6d4:	mov	w3, w2
   4e6d8:	ldr	x2, [x0, w1, sxtw #3]
   4e6dc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e6e0:	add	x1, x1, #0xf8
   4e6e4:	mov	x0, x21
   4e6e8:	blr	x20
   4e6ec:	b	4e72c <aarch64_get_opcode@@Base+0x118>
   4e6f0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e6f4:	add	x1, x1, #0xf0
   4e6f8:	mov	x0, x21
   4e6fc:	blr	x20
   4e700:	b	4e72c <aarch64_get_opcode@@Base+0x118>
   4e704:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e708:	add	x1, x1, #0x108
   4e70c:	mov	x0, x21
   4e710:	blr	x20
   4e714:	b	4e72c <aarch64_get_opcode@@Base+0x118>
   4e718:	tbz	w19, #7, 4e73c <aarch64_get_opcode@@Base+0x128>
   4e71c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e720:	add	x1, x1, #0x110
   4e724:	mov	x0, x21
   4e728:	blr	x20
   4e72c:	ldp	x19, x20, [sp, #16]
   4e730:	ldp	x21, x22, [sp, #32]
   4e734:	ldp	x29, x30, [sp], #48
   4e738:	ret
   4e73c:	cbz	w22, 4e784 <aarch64_get_opcode@@Base+0x170>
   4e740:	adrp	x2, 8e000 <aarch64_operands@@Base+0x1bc0>
   4e744:	add	x2, x2, #0xb70
   4e748:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   4e74c:	ldr	w0, [x0, #1616]
   4e750:	ubfx	x1, x19, #8, #4
   4e754:	add	x0, x0, x0, lsl #3
   4e758:	add	x1, x1, x0, lsl #1
   4e75c:	add	x1, x1, #0x2
   4e760:	add	x4, x2, #0x480
   4e764:	ubfx	x19, x19, #5, #2
   4e768:	ldr	x3, [x2, x1, lsl #3]
   4e76c:	ldr	x2, [x4, x19, lsl #3]
   4e770:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e774:	add	x1, x1, #0x130
   4e778:	mov	x0, x21
   4e77c:	blr	x20
   4e780:	b	4e72c <aarch64_get_opcode@@Base+0x118>
   4e784:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   4e788:	ldr	w0, [x0, #1616]
   4e78c:	ubfx	x19, x19, #8, #4
   4e790:	add	x0, x0, x0, lsl #3
   4e794:	add	x19, x19, x0, lsl #1
   4e798:	add	x19, x19, #0x2
   4e79c:	adrp	x0, 8e000 <aarch64_operands@@Base+0x1bc0>
   4e7a0:	add	x0, x0, #0xb70
   4e7a4:	ldr	x2, [x0, x19, lsl #3]
   4e7a8:	adrp	x1, 59000 <xexit@@Base+0x74c>
   4e7ac:	add	x1, x1, #0xf60
   4e7b0:	mov	x0, x21
   4e7b4:	blr	x20
   4e7b8:	b	4e72c <aarch64_get_opcode@@Base+0x118>
   4e7bc:	stp	x29, x30, [sp, #-48]!
   4e7c0:	mov	x29, sp
   4e7c4:	stp	x19, x20, [sp, #16]
   4e7c8:	str	x21, [sp, #32]
   4e7cc:	mov	w19, w1
   4e7d0:	ldr	x21, [x0, #8]
   4e7d4:	ldr	x20, [x0]
   4e7d8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e7dc:	add	x1, x1, #0x138
   4e7e0:	mov	x0, x21
   4e7e4:	blr	x20
   4e7e8:	cmp	w19, #0x10
   4e7ec:	b.hi	4e818 <aarch64_get_opcode@@Base+0x204>  // b.pmore
   4e7f0:	adrp	x0, 74000 <fields@@Base+0x13c40>
   4e7f4:	add	x0, x0, #0x78
   4e7f8:	ldrb	w0, [x0, w19, uxtw]
   4e7fc:	adr	x1, 4e808 <aarch64_get_opcode@@Base+0x1f4>
   4e800:	add	x0, x1, w0, sxtb #2
   4e804:	br	x0
   4e808:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e80c:	add	x1, x1, #0x158
   4e810:	mov	x0, x21
   4e814:	blr	x20
   4e818:	ldp	x19, x20, [sp, #16]
   4e81c:	ldr	x21, [sp, #32]
   4e820:	ldp	x29, x30, [sp], #48
   4e824:	ret
   4e828:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e82c:	add	x1, x1, #0x168
   4e830:	mov	x0, x21
   4e834:	blr	x20
   4e838:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e83c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e840:	add	x1, x1, #0x180
   4e844:	mov	x0, x21
   4e848:	blr	x20
   4e84c:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e850:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e854:	add	x1, x1, #0x190
   4e858:	mov	x0, x21
   4e85c:	blr	x20
   4e860:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e864:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e868:	add	x1, x1, #0x1a8
   4e86c:	mov	x0, x21
   4e870:	blr	x20
   4e874:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e878:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e87c:	add	x1, x1, #0x1b8
   4e880:	mov	x0, x21
   4e884:	blr	x20
   4e888:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e88c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e890:	add	x1, x1, #0x1d0
   4e894:	mov	x0, x21
   4e898:	blr	x20
   4e89c:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e8a0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e8a4:	add	x1, x1, #0x1e8
   4e8a8:	mov	x0, x21
   4e8ac:	blr	x20
   4e8b0:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e8b4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e8b8:	add	x1, x1, #0x200
   4e8bc:	mov	x0, x21
   4e8c0:	blr	x20
   4e8c4:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e8c8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e8cc:	add	x1, x1, #0x220
   4e8d0:	mov	x0, x21
   4e8d4:	blr	x20
   4e8d8:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e8dc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e8e0:	add	x1, x1, #0x240
   4e8e4:	mov	x0, x21
   4e8e8:	blr	x20
   4e8ec:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e8f0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e8f4:	add	x1, x1, #0x250
   4e8f8:	mov	x0, x21
   4e8fc:	blr	x20
   4e900:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e904:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e908:	add	x1, x1, #0x260
   4e90c:	mov	x0, x21
   4e910:	blr	x20
   4e914:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e918:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e91c:	add	x1, x1, #0x280
   4e920:	mov	x0, x21
   4e924:	blr	x20
   4e928:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e92c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e930:	add	x1, x1, #0x2a8
   4e934:	mov	x0, x21
   4e938:	blr	x20
   4e93c:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e940:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e944:	add	x1, x1, #0x2d0
   4e948:	mov	x0, x21
   4e94c:	blr	x20
   4e950:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e954:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e958:	add	x1, x1, #0x2f0
   4e95c:	mov	x0, x21
   4e960:	blr	x20
   4e964:	b	4e818 <aarch64_get_opcode@@Base+0x204>
   4e968:	stp	x29, x30, [sp, #-48]!
   4e96c:	mov	x29, sp
   4e970:	stp	x19, x20, [sp, #16]
   4e974:	str	x21, [sp, #32]
   4e978:	mov	w19, w1
   4e97c:	ldr	x21, [x0, #8]
   4e980:	ldr	x20, [x0]
   4e984:	adrp	x2, 65000 <fields@@Base+0x4c40>
   4e988:	add	x2, x2, #0x310
   4e98c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e990:	add	x1, x1, #0x328
   4e994:	mov	x0, x21
   4e998:	blr	x20
   4e99c:	cmp	w19, #0x6
   4e9a0:	b.eq	4eaa8 <aarch64_get_opcode@@Base+0x494>  // b.none
   4e9a4:	b.hi	4ea18 <aarch64_get_opcode@@Base+0x404>  // b.pmore
   4e9a8:	cmp	w19, #0x3
   4e9ac:	b.eq	4ea80 <aarch64_get_opcode@@Base+0x46c>  // b.none
   4e9b0:	b.hi	4e9fc <aarch64_get_opcode@@Base+0x3e8>  // b.pmore
   4e9b4:	cmp	w19, #0x1
   4e9b8:	b.eq	4ea6c <aarch64_get_opcode@@Base+0x458>  // b.none
   4e9bc:	cmp	w19, #0x2
   4e9c0:	b.ne	4e9d8 <aarch64_get_opcode@@Base+0x3c4>  // b.any
   4e9c4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e9c8:	add	x1, x1, #0x378
   4e9cc:	mov	x0, x21
   4e9d0:	blr	x20
   4e9d4:	b	4e9ec <aarch64_get_opcode@@Base+0x3d8>
   4e9d8:	cbnz	w19, 4e9ec <aarch64_get_opcode@@Base+0x3d8>
   4e9dc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4e9e0:	add	x1, x1, #0x330
   4e9e4:	mov	x0, x21
   4e9e8:	blr	x20
   4e9ec:	ldp	x19, x20, [sp, #16]
   4e9f0:	ldr	x21, [sp, #32]
   4e9f4:	ldp	x29, x30, [sp], #48
   4e9f8:	ret
   4e9fc:	cmp	w19, #0x4
   4ea00:	b.eq	4ea94 <aarch64_get_opcode@@Base+0x480>  // b.none
   4ea04:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ea08:	add	x1, x1, #0x3b8
   4ea0c:	mov	x0, x21
   4ea10:	blr	x20
   4ea14:	b	4e9ec <aarch64_get_opcode@@Base+0x3d8>
   4ea18:	cmp	w19, #0x9
   4ea1c:	b.eq	4ead0 <aarch64_get_opcode@@Base+0x4bc>  // b.none
   4ea20:	b.ls	4ea48 <aarch64_get_opcode@@Base+0x434>  // b.plast
   4ea24:	cmp	w19, #0xa
   4ea28:	b.eq	4eae4 <aarch64_get_opcode@@Base+0x4d0>  // b.none
   4ea2c:	cmp	w19, #0xb
   4ea30:	b.ne	4e9ec <aarch64_get_opcode@@Base+0x3d8>  // b.any
   4ea34:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ea38:	add	x1, x1, #0x488
   4ea3c:	mov	x0, x21
   4ea40:	blr	x20
   4ea44:	b	4e9ec <aarch64_get_opcode@@Base+0x3d8>
   4ea48:	cmp	w19, #0x7
   4ea4c:	b.eq	4eabc <aarch64_get_opcode@@Base+0x4a8>  // b.none
   4ea50:	cmp	w19, #0x8
   4ea54:	b.ne	4e9ec <aarch64_get_opcode@@Base+0x3d8>  // b.any
   4ea58:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ea5c:	add	x1, x1, #0x438
   4ea60:	mov	x0, x21
   4ea64:	blr	x20
   4ea68:	b	4e9ec <aarch64_get_opcode@@Base+0x3d8>
   4ea6c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ea70:	add	x1, x1, #0x350
   4ea74:	mov	x0, x21
   4ea78:	blr	x20
   4ea7c:	b	4e9ec <aarch64_get_opcode@@Base+0x3d8>
   4ea80:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ea84:	add	x1, x1, #0x388
   4ea88:	mov	x0, x21
   4ea8c:	blr	x20
   4ea90:	b	4e9ec <aarch64_get_opcode@@Base+0x3d8>
   4ea94:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ea98:	add	x1, x1, #0x398
   4ea9c:	mov	x0, x21
   4eaa0:	blr	x20
   4eaa4:	b	4e9ec <aarch64_get_opcode@@Base+0x3d8>
   4eaa8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4eaac:	add	x1, x1, #0x3d8
   4eab0:	mov	x0, x21
   4eab4:	blr	x20
   4eab8:	b	4e9ec <aarch64_get_opcode@@Base+0x3d8>
   4eabc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4eac0:	add	x1, x1, #0x3f8
   4eac4:	mov	x0, x21
   4eac8:	blr	x20
   4eacc:	b	4e9ec <aarch64_get_opcode@@Base+0x3d8>
   4ead0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ead4:	add	x1, x1, #0x450
   4ead8:	mov	x0, x21
   4eadc:	blr	x20
   4eae0:	b	4e9ec <aarch64_get_opcode@@Base+0x3d8>
   4eae4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4eae8:	add	x1, x1, #0x488
   4eaec:	mov	x0, x21
   4eaf0:	blr	x20
   4eaf4:	b	4e9ec <aarch64_get_opcode@@Base+0x3d8>
   4eaf8:	stp	x29, x30, [sp, #-64]!
   4eafc:	mov	x29, sp
   4eb00:	stp	x19, x20, [sp, #16]
   4eb04:	stp	x21, x22, [sp, #32]
   4eb08:	mov	x20, x1
   4eb0c:	mov	x19, x2
   4eb10:	ldr	x22, [x1, #8]
   4eb14:	ldr	x21, [x1]
   4eb18:	mov	x1, #0x20f0000             	// #34537472
   4eb1c:	and	x1, x2, x1
   4eb20:	cmp	x1, #0xf0, lsl #12
   4eb24:	b.eq	4ebac <aarch64_get_opcode@@Base+0x598>  // b.none
   4eb28:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   4eb2c:	ldr	w0, [x0, #1616]
   4eb30:	ubfx	x2, x2, #16, #4
   4eb34:	add	x1, x0, x0, lsl #3
   4eb38:	add	x0, x2, x1, lsl #1
   4eb3c:	add	x0, x0, #0x2
   4eb40:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   4eb44:	add	x1, x1, #0xb70
   4eb48:	ldr	x2, [x1, x0, lsl #3]
   4eb4c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4eb50:	add	x1, x1, #0x4f8
   4eb54:	mov	x0, x22
   4eb58:	blr	x21
   4eb5c:	tbz	w19, #24, 4ed30 <aarch64_get_opcode@@Base+0x71c>
   4eb60:	tbnz	w19, #25, 4eca4 <aarch64_get_opcode@@Base+0x690>
   4eb64:	and	x20, x19, #0xfff
   4eb68:	mov	x0, #0xa00000              	// #10485760
   4eb6c:	and	x0, x19, x0
   4eb70:	cmp	x0, #0x800, lsl #12
   4eb74:	ccmp	x20, #0x0, #0x0, eq  // eq = none
   4eb78:	b.eq	4ed28 <aarch64_get_opcode@@Base+0x714>  // b.none
   4eb7c:	adrp	x0, 59000 <xexit@@Base+0x74c>
   4eb80:	add	x0, x0, #0x9c0
   4eb84:	adrp	x2, 65000 <fields@@Base+0x4c40>
   4eb88:	add	x2, x2, #0x4b8
   4eb8c:	tst	x19, #0x800000
   4eb90:	mov	w3, w20
   4eb94:	csel	x2, x2, x0, eq  // eq = none
   4eb98:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4eb9c:	add	x1, x1, #0x4d0
   4eba0:	mov	x0, x22
   4eba4:	blr	x21
   4eba8:	b	4ece4 <aarch64_get_opcode@@Base+0x6d0>
   4ebac:	stp	x23, x24, [sp, #48]
   4ebb0:	mov	x23, x0
   4ebb4:	and	x24, x2, #0xfff
   4ebb8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ebbc:	add	x1, x1, #0x4c8
   4ebc0:	mov	x0, x22
   4ebc4:	blr	x21
   4ebc8:	tbz	w19, #24, 4ec70 <aarch64_get_opcode@@Base+0x65c>
   4ebcc:	mov	x0, #0xa00000              	// #10485760
   4ebd0:	and	x0, x19, x0
   4ebd4:	cmp	x0, #0x800, lsl #12
   4ebd8:	ccmp	x24, #0x0, #0x0, eq  // eq = none
   4ebdc:	b.eq	4ec0c <aarch64_get_opcode@@Base+0x5f8>  // b.none
   4ebe0:	adrp	x0, 59000 <xexit@@Base+0x74c>
   4ebe4:	add	x0, x0, #0x9c0
   4ebe8:	adrp	x2, 65000 <fields@@Base+0x4c40>
   4ebec:	add	x2, x2, #0x4b8
   4ebf0:	tst	x19, #0x800000
   4ebf4:	mov	w3, w24
   4ebf8:	csel	x2, x2, x0, eq  // eq = none
   4ebfc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ec00:	add	x1, x1, #0x4d0
   4ec04:	mov	x0, x22
   4ec08:	blr	x21
   4ec0c:	tst	x19, #0x800000
   4ec10:	cneg	x24, x24, eq  // eq = none
   4ec14:	add	x23, x23, #0x8
   4ec18:	add	x23, x23, x24
   4ec1c:	adrp	x0, 59000 <xexit@@Base+0x74c>
   4ec20:	add	x0, x0, #0x9c0
   4ec24:	adrp	x2, 65000 <fields@@Base+0x4c40>
   4ec28:	add	x2, x2, #0x4c0
   4ec2c:	tst	x19, #0x200000
   4ec30:	csel	x2, x2, x0, ne  // ne = any
   4ec34:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ec38:	add	x1, x1, #0x4d8
   4ec3c:	mov	x0, x22
   4ec40:	blr	x21
   4ec44:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ec48:	add	x1, x1, #0x4f0
   4ec4c:	mov	x0, x22
   4ec50:	blr	x21
   4ec54:	ldr	x2, [x20, #120]
   4ec58:	mov	x1, x20
   4ec5c:	mov	x0, x23
   4ec60:	blr	x2
   4ec64:	mov	x20, #0x0                   	// #0
   4ec68:	ldp	x23, x24, [sp, #48]
   4ec6c:	b	4ed14 <aarch64_get_opcode@@Base+0x700>
   4ec70:	adrp	x0, 59000 <xexit@@Base+0x74c>
   4ec74:	add	x0, x0, #0x9c0
   4ec78:	adrp	x2, 65000 <fields@@Base+0x4c40>
   4ec7c:	add	x2, x2, #0x4b8
   4ec80:	tst	x19, #0x800000
   4ec84:	mov	w3, w24
   4ec88:	csel	x2, x2, x0, eq  // eq = none
   4ec8c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ec90:	add	x1, x1, #0x4e0
   4ec94:	mov	x0, x22
   4ec98:	blr	x21
   4ec9c:	add	x23, x23, #0x8
   4eca0:	b	4ec44 <aarch64_get_opcode@@Base+0x630>
   4eca4:	adrp	x0, 59000 <xexit@@Base+0x74c>
   4eca8:	add	x0, x0, #0x9c0
   4ecac:	adrp	x2, 65000 <fields@@Base+0x4c40>
   4ecb0:	add	x2, x2, #0x4b8
   4ecb4:	tst	x19, #0x800000
   4ecb8:	csel	x2, x2, x0, eq  // eq = none
   4ecbc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   4ecc0:	add	x1, x1, #0xf60
   4ecc4:	mov	x0, x22
   4ecc8:	blr	x21
   4eccc:	mov	w3, #0x1                   	// #1
   4ecd0:	mov	x2, x22
   4ecd4:	mov	x1, x21
   4ecd8:	mov	x0, x19
   4ecdc:	bl	4e648 <aarch64_get_opcode@@Base+0x34>
   4ece0:	mov	x20, #0x0                   	// #0
   4ece4:	adrp	x0, 59000 <xexit@@Base+0x74c>
   4ece8:	add	x0, x0, #0x9c0
   4ecec:	adrp	x2, 65000 <fields@@Base+0x4c40>
   4ecf0:	add	x2, x2, #0x4c0
   4ecf4:	tst	x19, #0x200000
   4ecf8:	csel	x2, x2, x0, ne  // ne = any
   4ecfc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ed00:	add	x1, x1, #0x4d8
   4ed04:	mov	x0, x22
   4ed08:	blr	x21
   4ed0c:	tst	x19, #0x800000
   4ed10:	cneg	x20, x20, eq  // eq = none
   4ed14:	mov	x0, x20
   4ed18:	ldp	x19, x20, [sp, #16]
   4ed1c:	ldp	x21, x22, [sp, #32]
   4ed20:	ldp	x29, x30, [sp], #64
   4ed24:	ret
   4ed28:	mov	x20, #0x0                   	// #0
   4ed2c:	b	4ece4 <aarch64_get_opcode@@Base+0x6d0>
   4ed30:	tbnz	w19, #25, 4ed68 <aarch64_get_opcode@@Base+0x754>
   4ed34:	and	x20, x19, #0xfff
   4ed38:	adrp	x0, 59000 <xexit@@Base+0x74c>
   4ed3c:	add	x0, x0, #0x9c0
   4ed40:	adrp	x2, 65000 <fields@@Base+0x4c40>
   4ed44:	add	x2, x2, #0x4b8
   4ed48:	tst	x19, #0x800000
   4ed4c:	mov	w3, w20
   4ed50:	csel	x2, x2, x0, eq  // eq = none
   4ed54:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ed58:	add	x1, x1, #0x4e0
   4ed5c:	mov	x0, x22
   4ed60:	blr	x21
   4ed64:	b	4ed0c <aarch64_get_opcode@@Base+0x6f8>
   4ed68:	adrp	x0, 59000 <xexit@@Base+0x74c>
   4ed6c:	add	x0, x0, #0x9c0
   4ed70:	adrp	x2, 65000 <fields@@Base+0x4c40>
   4ed74:	add	x2, x2, #0x4b8
   4ed78:	tst	x19, #0x800000
   4ed7c:	csel	x2, x2, x0, eq  // eq = none
   4ed80:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4ed84:	add	x1, x1, #0x500
   4ed88:	mov	x0, x22
   4ed8c:	blr	x21
   4ed90:	mov	w3, #0x1                   	// #1
   4ed94:	mov	x2, x22
   4ed98:	mov	x1, x21
   4ed9c:	mov	x0, x19
   4eda0:	bl	4e648 <aarch64_get_opcode@@Base+0x34>
   4eda4:	mov	x20, #0x0                   	// #0
   4eda8:	b	4ed0c <aarch64_get_opcode@@Base+0x6f8>
   4edac:	sub	w0, w0, #0xf
   4edb0:	cmp	w0, #0x6f
   4edb4:	b.hi	4ef68 <aarch64_get_opcode@@Base+0x954>  // b.pmore
   4edb8:	adrp	x1, 74000 <fields@@Base+0x13c40>
   4edbc:	add	x1, x1, #0x8c
   4edc0:	ldrb	w0, [x1, w0, uxtw]
   4edc4:	adr	x1, 4edd0 <aarch64_get_opcode@@Base+0x7bc>
   4edc8:	add	x0, x1, w0, sxtb #2
   4edcc:	br	x0
   4edd0:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4edd4:	add	x0, x0, #0x650
   4edd8:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4eddc:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ede0:	add	x0, x0, #0x510
   4ede4:	ret
   4ede8:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4edec:	add	x0, x0, #0x518
   4edf0:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4edf4:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4edf8:	add	x0, x0, #0x520
   4edfc:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ee00:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ee04:	add	x0, x0, #0x528
   4ee08:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ee0c:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ee10:	add	x0, x0, #0x530
   4ee14:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ee18:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ee1c:	add	x0, x0, #0x538
   4ee20:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ee24:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ee28:	add	x0, x0, #0x540
   4ee2c:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ee30:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ee34:	add	x0, x0, #0x548
   4ee38:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ee3c:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ee40:	add	x0, x0, #0x550
   4ee44:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ee48:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ee4c:	add	x0, x0, #0x558
   4ee50:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ee54:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ee58:	add	x0, x0, #0x560
   4ee5c:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ee60:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ee64:	add	x0, x0, #0x568
   4ee68:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ee6c:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ee70:	add	x0, x0, #0x570
   4ee74:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ee78:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ee7c:	add	x0, x0, #0x578
   4ee80:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ee84:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ee88:	add	x0, x0, #0x580
   4ee8c:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ee90:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ee94:	add	x0, x0, #0x588
   4ee98:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ee9c:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4eea0:	add	x0, x0, #0x590
   4eea4:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4eea8:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4eeac:	add	x0, x0, #0x598
   4eeb0:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4eeb4:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4eeb8:	add	x0, x0, #0x5a0
   4eebc:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4eec0:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4eec4:	add	x0, x0, #0x5a8
   4eec8:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4eecc:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4eed0:	add	x0, x0, #0x5b0
   4eed4:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4eed8:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4eedc:	add	x0, x0, #0x5b8
   4eee0:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4eee4:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4eee8:	add	x0, x0, #0x5c0
   4eeec:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4eef0:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4eef4:	add	x0, x0, #0x5c8
   4eef8:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4eefc:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ef00:	add	x0, x0, #0x5d0
   4ef04:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ef08:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ef0c:	add	x0, x0, #0x5d8
   4ef10:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ef14:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ef18:	add	x0, x0, #0x5e0
   4ef1c:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ef20:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ef24:	add	x0, x0, #0x5f0
   4ef28:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ef2c:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ef30:	add	x0, x0, #0x600
   4ef34:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ef38:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ef3c:	add	x0, x0, #0x610
   4ef40:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ef44:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ef48:	add	x0, x0, #0x620
   4ef4c:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ef50:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ef54:	add	x0, x0, #0x630
   4ef58:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ef5c:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ef60:	add	x0, x0, #0x640
   4ef64:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ef68:	mov	x0, #0x0                   	// #0
   4ef6c:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ef70:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ef74:	add	x0, x0, #0x508
   4ef78:	b	4ede4 <aarch64_get_opcode@@Base+0x7d0>
   4ef7c:	and	w1, w0, #0xf
   4ef80:	cmp	w1, #0x9
   4ef84:	b.eq	4f028 <aarch64_get_opcode@@Base+0xa14>  // b.none
   4ef88:	b.hi	4efe4 <aarch64_get_opcode@@Base+0x9d0>  // b.pmore
   4ef8c:	cmp	w1, #0x5
   4ef90:	b.eq	4f034 <aarch64_get_opcode@@Base+0xa20>  // b.none
   4ef94:	b.hi	4efc8 <aarch64_get_opcode@@Base+0x9b4>  // b.pmore
   4ef98:	cmp	w1, #0x2
   4ef9c:	b.eq	4f040 <aarch64_get_opcode@@Base+0xa2c>  // b.none
   4efa0:	cmp	w1, #0x3
   4efa4:	b.ne	4efb4 <aarch64_get_opcode@@Base+0x9a0>  // b.any
   4efa8:	adrp	x0, 5f000 <xexit@@Base+0x674c>
   4efac:	add	x0, x0, #0xb28
   4efb0:	b	4efc4 <aarch64_get_opcode@@Base+0x9b0>
   4efb4:	cmp	w1, #0x1
   4efb8:	b.ne	4f04c <aarch64_get_opcode@@Base+0xa38>  // b.any
   4efbc:	adrp	x0, 5f000 <xexit@@Base+0x674c>
   4efc0:	add	x0, x0, #0xb18
   4efc4:	ret
   4efc8:	cmp	w1, #0x6
   4efcc:	b.eq	4f054 <aarch64_get_opcode@@Base+0xa40>  // b.none
   4efd0:	cmp	w1, #0x7
   4efd4:	b.ne	4f060 <aarch64_get_opcode@@Base+0xa4c>  // b.any
   4efd8:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4efdc:	add	x0, x0, #0x658
   4efe0:	b	4efc4 <aarch64_get_opcode@@Base+0x9b0>
   4efe4:	cmp	w1, #0xd
   4efe8:	b.eq	4f068 <aarch64_get_opcode@@Base+0xa54>  // b.none
   4efec:	b.ls	4f00c <aarch64_get_opcode@@Base+0x9f8>  // b.plast
   4eff0:	adrp	x0, 63000 <fields@@Base+0x2c40>
   4eff4:	add	x2, x0, #0x388
   4eff8:	adrp	x0, 5f000 <xexit@@Base+0x674c>
   4effc:	add	x0, x0, #0xb78
   4f000:	cmp	w1, #0xe
   4f004:	csel	x0, x0, x2, ne  // ne = any
   4f008:	b	4efc4 <aarch64_get_opcode@@Base+0x9b0>
   4f00c:	cmp	w1, #0xa
   4f010:	b.eq	4f074 <aarch64_get_opcode@@Base+0xa60>  // b.none
   4f014:	cmp	w1, #0xb
   4f018:	b.ne	4f080 <aarch64_get_opcode@@Base+0xa6c>  // b.any
   4f01c:	adrp	x0, 5f000 <xexit@@Base+0x674c>
   4f020:	add	x0, x0, #0xb68
   4f024:	b	4efc4 <aarch64_get_opcode@@Base+0x9b0>
   4f028:	adrp	x0, 5f000 <xexit@@Base+0x674c>
   4f02c:	add	x0, x0, #0xb58
   4f030:	b	4efc4 <aarch64_get_opcode@@Base+0x9b0>
   4f034:	adrp	x0, 5f000 <xexit@@Base+0x674c>
   4f038:	add	x0, x0, #0xb38
   4f03c:	b	4efc4 <aarch64_get_opcode@@Base+0x9b0>
   4f040:	adrp	x0, 5f000 <xexit@@Base+0x674c>
   4f044:	add	x0, x0, #0xb20
   4f048:	b	4efc4 <aarch64_get_opcode@@Base+0x9b0>
   4f04c:	mov	x0, #0x0                   	// #0
   4f050:	b	4efc4 <aarch64_get_opcode@@Base+0x9b0>
   4f054:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f058:	add	x0, x0, #0x660
   4f05c:	b	4efc4 <aarch64_get_opcode@@Base+0x9b0>
   4f060:	mov	x0, #0x0                   	// #0
   4f064:	b	4efc4 <aarch64_get_opcode@@Base+0x9b0>
   4f068:	adrp	x0, 63000 <fields@@Base+0x2c40>
   4f06c:	add	x0, x0, #0x620
   4f070:	b	4efc4 <aarch64_get_opcode@@Base+0x9b0>
   4f074:	adrp	x0, 5f000 <xexit@@Base+0x674c>
   4f078:	add	x0, x0, #0xb60
   4f07c:	b	4efc4 <aarch64_get_opcode@@Base+0x9b0>
   4f080:	mov	x0, #0x0                   	// #0
   4f084:	b	4efc4 <aarch64_get_opcode@@Base+0x9b0>
   4f088:	cmp	w0, #0x98
   4f08c:	b.hi	4f1c8 <aarch64_get_opcode@@Base+0xbb4>  // b.pmore
   4f090:	adrp	x1, 74000 <fields@@Base+0x13c40>
   4f094:	add	x1, x1, #0xfc
   4f098:	ldrb	w0, [x1, w0, uxtw]
   4f09c:	adr	x1, 4f0a8 <aarch64_get_opcode@@Base+0xa94>
   4f0a0:	add	x0, x1, w0, sxtb #2
   4f0a4:	br	x0
   4f0a8:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f0ac:	add	x0, x0, #0x778
   4f0b0:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f0b4:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f0b8:	add	x0, x0, #0x680
   4f0bc:	ret
   4f0c0:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f0c4:	add	x0, x0, #0x688
   4f0c8:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f0cc:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f0d0:	add	x0, x0, #0x690
   4f0d4:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f0d8:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f0dc:	add	x0, x0, #0x698
   4f0e0:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f0e4:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f0e8:	add	x0, x0, #0x6a0
   4f0ec:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f0f0:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f0f4:	add	x0, x0, #0x6a8
   4f0f8:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f0fc:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f100:	add	x0, x0, #0x6b0
   4f104:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f108:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f10c:	add	x0, x0, #0x6b8
   4f110:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f114:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f118:	add	x0, x0, #0x6c0
   4f11c:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f120:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f124:	add	x0, x0, #0x6c8
   4f128:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f12c:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f130:	add	x0, x0, #0x6d0
   4f134:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f138:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f13c:	add	x0, x0, #0x6d8
   4f140:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f144:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f148:	add	x0, x0, #0x6e8
   4f14c:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f150:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f154:	add	x0, x0, #0x6f8
   4f158:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f15c:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f160:	add	x0, x0, #0x700
   4f164:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f168:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f16c:	add	x0, x0, #0x708
   4f170:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f174:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f178:	add	x0, x0, #0x710
   4f17c:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f180:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f184:	add	x0, x0, #0x720
   4f188:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f18c:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f190:	add	x0, x0, #0x730
   4f194:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f198:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f19c:	add	x0, x0, #0x740
   4f1a0:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f1a4:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f1a8:	add	x0, x0, #0x750
   4f1ac:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f1b0:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f1b4:	add	x0, x0, #0x760
   4f1b8:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f1bc:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f1c0:	add	x0, x0, #0x770
   4f1c4:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f1c8:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f1cc:	add	x0, x0, #0x668
   4f1d0:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f1d4:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f1d8:	add	x0, x0, #0x678
   4f1dc:	b	4f0bc <aarch64_get_opcode@@Base+0xaa8>
   4f1e0:	ldr	x0, [x0, #72]
   4f1e4:	ldr	x0, [x0, w1, sxtw #3]
   4f1e8:	ldr	x1, [x0, #8]
   4f1ec:	ldrb	w0, [x1]
   4f1f0:	cmp	w0, #0x24
   4f1f4:	b.eq	4f200 <aarch64_get_opcode@@Base+0xbec>  // b.none
   4f1f8:	mov	w0, #0x0                   	// #0
   4f1fc:	ret
   4f200:	ldrb	w3, [x1, #1]
   4f204:	and	w0, w3, #0xffffffef
   4f208:	and	w0, w0, #0xff
   4f20c:	cmp	w0, #0x64
   4f210:	mov	w0, #0x0                   	// #0
   4f214:	mov	w4, #0x61                  	// #97
   4f218:	ccmp	w3, w4, #0x4, ne  // ne = any
   4f21c:	b.ne	4f1fc <aarch64_get_opcode@@Base+0xbe8>  // b.any
   4f220:	ldrb	w1, [x1, #2]
   4f224:	cmp	w1, #0x2e
   4f228:	ccmp	w1, #0x0, #0x4, ne  // ne = any
   4f22c:	b.ne	4f1fc <aarch64_get_opcode@@Base+0xbe8>  // b.any
   4f230:	cmp	w3, w4
   4f234:	b.eq	4f244 <aarch64_get_opcode@@Base+0xc30>  // b.none
   4f238:	cmp	w3, #0x74
   4f23c:	cset	w0, ne  // ne = any
   4f240:	add	w0, w0, #0x1
   4f244:	str	w0, [x2]
   4f248:	mov	w0, #0x1                   	// #1
   4f24c:	b	4f1fc <aarch64_get_opcode@@Base+0xbe8>
   4f250:	mov	x7, x0
   4f254:	mov	w8, #0x0                   	// #0
   4f258:	mov	x10, #0x0                   	// #0
   4f25c:	mov	w9, #0x0                   	// #0
   4f260:	mov	x11, #0x2                   	// #2
   4f264:	b	4f2ac <aarch64_get_opcode@@Base+0xc98>
   4f268:	mov	w4, w9
   4f26c:	b	4f2e4 <aarch64_get_opcode@@Base+0xcd0>
   4f270:	mov	w5, w9
   4f274:	subs	w5, w5, w4
   4f278:	b.mi	4f334 <aarch64_get_opcode@@Base+0xd20>  // b.first
   4f27c:	lsl	x6, x11, x5
   4f280:	sub	x6, x6, #0x1
   4f284:	lsr	x4, x1, x4
   4f288:	and	x4, x6, x4
   4f28c:	lsl	x4, x4, x8
   4f290:	orr	x10, x10, x4
   4f294:	add	w5, w5, #0x1
   4f298:	add	w8, w8, w5
   4f29c:	mov	x7, x0
   4f2a0:	ldrb	w4, [x7], #1
   4f2a4:	cmp	w4, #0x2c
   4f2a8:	b.ne	4f340 <aarch64_get_opcode@@Base+0xd2c>  // b.any
   4f2ac:	ldrb	w6, [x7]
   4f2b0:	sub	w0, w6, #0x30
   4f2b4:	and	w0, w0, #0xff
   4f2b8:	cmp	w0, #0x9
   4f2bc:	b.hi	4f268 <aarch64_get_opcode@@Base+0xc54>  // b.pmore
   4f2c0:	mov	w4, w9
   4f2c4:	add	w4, w4, w4, lsl #2
   4f2c8:	add	w4, w6, w4, lsl #1
   4f2cc:	sub	w4, w4, #0x30
   4f2d0:	ldrb	w6, [x7, #1]!
   4f2d4:	sub	w5, w6, #0x30
   4f2d8:	and	w5, w5, #0xff
   4f2dc:	cmp	w5, #0x9
   4f2e0:	b.ls	4f2c4 <aarch64_get_opcode@@Base+0xcb0>  // b.plast
   4f2e4:	mov	x0, x7
   4f2e8:	mov	w5, w9
   4f2ec:	cmp	w6, #0x2d
   4f2f0:	b.ne	4f27c <aarch64_get_opcode@@Base+0xc68>  // b.any
   4f2f4:	add	x0, x7, #0x1
   4f2f8:	ldrb	w7, [x7, #1]
   4f2fc:	sub	w5, w7, #0x30
   4f300:	and	w5, w5, #0xff
   4f304:	cmp	w5, #0x9
   4f308:	b.hi	4f270 <aarch64_get_opcode@@Base+0xc5c>  // b.pmore
   4f30c:	mov	w5, w9
   4f310:	add	w5, w5, w5, lsl #2
   4f314:	add	w5, w7, w5, lsl #1
   4f318:	sub	w5, w5, #0x30
   4f31c:	ldrb	w7, [x0, #1]!
   4f320:	sub	w6, w7, #0x30
   4f324:	and	w6, w6, #0xff
   4f328:	cmp	w6, #0x9
   4f32c:	b.ls	4f310 <aarch64_get_opcode@@Base+0xcfc>  // b.plast
   4f330:	b	4f274 <aarch64_get_opcode@@Base+0xc60>
   4f334:	stp	x29, x30, [sp, #-16]!
   4f338:	mov	x29, sp
   4f33c:	bl	35670 <abort@plt>
   4f340:	str	x10, [x2]
   4f344:	cbz	x3, 4f34c <aarch64_get_opcode@@Base+0xd38>
   4f348:	str	w8, [x3]
   4f34c:	ret
   4f350:	stp	x29, x30, [sp, #-192]!
   4f354:	mov	x29, sp
   4f358:	stp	x19, x20, [sp, #16]
   4f35c:	stp	x21, x22, [sp, #32]
   4f360:	stp	x23, x24, [sp, #48]
   4f364:	mov	x4, x0
   4f368:	mov	x24, x1
   4f36c:	mov	x19, x2
   4f370:	ldr	x23, [x1, #8]
   4f374:	ldr	x22, [x1]
   4f378:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   4f37c:	add	x1, x1, #0xb70
   4f380:	add	x1, x1, #0x4a0
   4f384:	adrp	x20, 65000 <fields@@Base+0x4c40>
   4f388:	add	x20, x20, #0x780
   4f38c:	ldrh	w2, [x1, #26]
   4f390:	and	x2, x2, x19
   4f394:	ldrh	w3, [x1, #24]
   4f398:	cmp	x2, x3
   4f39c:	b.eq	4f3d4 <aarch64_get_opcode@@Base+0xdc0>  // b.none
   4f3a0:	add	x1, x1, #0x28
   4f3a4:	ldr	x20, [x1, #32]
   4f3a8:	cbnz	x20, 4f38c <aarch64_get_opcode@@Base+0xd78>
   4f3ac:	mov	w2, w19
   4f3b0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4f3b4:	add	x1, x1, #0x820
   4f3b8:	mov	x0, x23
   4f3bc:	blr	x22
   4f3c0:	ldp	x19, x20, [sp, #16]
   4f3c4:	ldp	x21, x22, [sp, #32]
   4f3c8:	ldp	x23, x24, [sp, #48]
   4f3cc:	ldp	x29, x30, [sp], #192
   4f3d0:	ret
   4f3d4:	ldrb	w2, [x20]
   4f3d8:	cbz	w2, 4f3c0 <aarch64_get_opcode@@Base+0xdac>
   4f3dc:	stp	x25, x26, [sp, #64]
   4f3e0:	stp	x27, x28, [sp, #80]
   4f3e4:	ubfx	x0, x19, #6, #5
   4f3e8:	tst	x19, #0x7c0
   4f3ec:	mov	x1, #0x20                  	// #32
   4f3f0:	csel	x0, x0, x1, ne  // ne = any
   4f3f4:	str	x0, [sp, #168]
   4f3f8:	asr	x0, x19, #3
   4f3fc:	add	x27, x4, #0x4
   4f400:	asr	x1, x19, #2
   4f404:	and	x1, x1, #0x3e
   4f408:	and	x3, x0, #0x40
   4f40c:	orr	x1, x1, x3
   4f410:	add	x1, x1, x27
   4f414:	str	x1, [sp, #176]
   4f418:	ubfx	w3, w19, #8, #3
   4f41c:	mov	w1, #0x1                   	// #1
   4f420:	lsl	w1, w1, w3
   4f424:	sxtw	x1, w1
   4f428:	and	x1, x1, x19
   4f42c:	str	x1, [sp, #144]
   4f430:	and	x0, x0, #0x7
   4f434:	add	x1, x0, #0x8
   4f438:	tst	x19, #0x40
   4f43c:	csel	x0, x0, x1, eq  // eq = none
   4f440:	str	x0, [sp, #152]
   4f444:	str	w19, [sp, #132]
   4f448:	lsl	w0, w19, #1
   4f44c:	str	w0, [sp, #188]
   4f450:	ubfiz	w0, w19, #1, #3
   4f454:	str	w0, [sp, #184]
   4f458:	ubfx	x0, x19, #4, #4
   4f45c:	str	x0, [sp, #136]
   4f460:	and	x0, x19, #0x7
   4f464:	add	x1, x0, #0x8
   4f468:	tst	x19, #0x80
   4f46c:	csel	x0, x0, x1, eq  // eq = none
   4f470:	str	x0, [sp, #160]
   4f474:	str	xzr, [sp, #112]
   4f478:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4f47c:	add	x0, x0, #0x7f0
   4f480:	str	x0, [sp, #120]
   4f484:	adrp	x26, 8e000 <aarch64_operands@@Base+0x1bc0>
   4f488:	add	x26, x26, #0xb70
   4f48c:	b	4f4b0 <aarch64_get_opcode@@Base+0xe9c>
   4f490:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4f494:	add	x1, x1, #0x790
   4f498:	mov	x0, x23
   4f49c:	blr	x22
   4f4a0:	mov	x21, x20
   4f4a4:	add	x20, x21, #0x1
   4f4a8:	ldrb	w2, [x21, #1]
   4f4ac:	cbz	w2, 4fb50 <aarch64_get_opcode@@Base+0x153c>
   4f4b0:	cmp	w2, #0x25
   4f4b4:	b.ne	4f490 <aarch64_get_opcode@@Base+0xe7c>  // b.any
   4f4b8:	add	x21, x20, #0x1
   4f4bc:	ldrb	w0, [x20, #1]
   4f4c0:	cmp	w0, #0x4f
   4f4c4:	b.eq	4f718 <aarch64_get_opcode@@Base+0x1104>  // b.none
   4f4c8:	cmp	w0, #0x4f
   4f4cc:	b.ls	4f50c <aarch64_get_opcode@@Base+0xef8>  // b.plast
   4f4d0:	cmp	w0, #0x62
   4f4d4:	b.eq	4f870 <aarch64_get_opcode@@Base+0x125c>  // b.none
   4f4d8:	b.ls	4f61c <aarch64_get_opcode@@Base+0x1008>  // b.plast
   4f4dc:	cmp	w0, #0x73
   4f4e0:	b.eq	4f89c <aarch64_get_opcode@@Base+0x1288>  // b.none
   4f4e4:	cmp	w0, #0x78
   4f4e8:	b.ne	4f698 <aarch64_get_opcode@@Base+0x1084>  // b.any
   4f4ec:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   4f4f0:	ldr	w0, [x0, #1036]
   4f4f4:	cbz	w0, 4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f4f8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4f4fc:	add	x1, x1, #0x7a8
   4f500:	mov	x0, x23
   4f504:	blr	x22
   4f508:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f50c:	cmp	w0, #0x44
   4f510:	b.eq	4f6e8 <aarch64_get_opcode@@Base+0x10d4>  // b.none
   4f514:	b.ls	4f538 <aarch64_get_opcode@@Base+0xf24>  // b.plast
   4f518:	cmp	w0, #0x4d
   4f51c:	b.eq	4f728 <aarch64_get_opcode@@Base+0x1114>  // b.none
   4f520:	cmp	w0, #0x4e
   4f524:	b.ne	4f5a0 <aarch64_get_opcode@@Base+0xf8c>  // b.any
   4f528:	ubfx	w0, w19, #8, #1
   4f52c:	str	w0, [sp, #108]
   4f530:	str	wzr, [sp, #128]
   4f534:	b	4f730 <aarch64_get_opcode@@Base+0x111c>
   4f538:	cmp	w0, #0x39
   4f53c:	b.hi	4f564 <aarch64_get_opcode@@Base+0xf50>  // b.pmore
   4f540:	cmp	w0, #0x2f
   4f544:	b.hi	4f8b4 <aarch64_get_opcode@@Base+0x12a0>  // b.pmore
   4f548:	cmp	w0, #0x25
   4f54c:	b.ne	4fb4c <aarch64_get_opcode@@Base+0x1538>  // b.any
   4f550:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4f554:	add	x1, x1, #0x798
   4f558:	mov	x0, x23
   4f55c:	blr	x22
   4f560:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f564:	cmp	w0, #0x43
   4f568:	b.ne	4fb4c <aarch64_get_opcode@@Base+0x1538>  // b.any
   4f56c:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   4f570:	ldr	w0, [x0, #1032]
   4f574:	cbz	w0, 4f6d4 <aarch64_get_opcode@@Base+0x10c0>
   4f578:	adrp	x1, 8f000 <aarch64_operands@@Base+0x2bc0>
   4f57c:	add	x1, x1, #0xc70
   4f580:	ubfx	x0, x0, #4, #4
   4f584:	add	x1, x1, #0x188
   4f588:	ldr	x2, [x1, x0, lsl #3]
   4f58c:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   4f590:	add	x1, x1, #0x588
   4f594:	mov	x0, x23
   4f598:	blr	x22
   4f59c:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f5a0:	cmp	w0, #0x49
   4f5a4:	b.ne	4fb4c <aarch64_get_opcode@@Base+0x1538>  // b.any
   4f5a8:	ldr	w0, [sp, #132]
   4f5ac:	and	w0, w0, #0xff
   4f5b0:	adrp	x1, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   4f5b4:	str	w0, [x1, #1036]
   4f5b8:	ldr	w0, [sp, #184]
   4f5bc:	cbz	w0, 4f5f4 <aarch64_get_opcode@@Base+0xfe0>
   4f5c0:	ldr	w20, [sp, #188]
   4f5c4:	adrp	x28, 5d000 <xexit@@Base+0x474c>
   4f5c8:	add	x28, x28, #0x350
   4f5cc:	adrp	x25, 6f000 <fields@@Base+0xec40>
   4f5d0:	add	x25, x25, #0x518
   4f5d4:	eor	x0, x19, x20
   4f5d8:	tst	x0, #0x10
   4f5dc:	csel	x1, x25, x28, ne  // ne = any
   4f5e0:	mov	x0, x23
   4f5e4:	blr	x22
   4f5e8:	lsl	w20, w20, #1
   4f5ec:	tst	x20, #0xf
   4f5f0:	b.ne	4f5d4 <aarch64_get_opcode@@Base+0xfc0>  // b.any
   4f5f4:	adrp	x0, 8f000 <aarch64_operands@@Base+0x2bc0>
   4f5f8:	add	x0, x0, #0xc70
   4f5fc:	add	x0, x0, #0x188
   4f600:	ldr	x1, [sp, #136]
   4f604:	ldr	x2, [x0, x1, lsl #3]
   4f608:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4f60c:	add	x1, x1, #0x7a0
   4f610:	mov	x0, x23
   4f614:	blr	x22
   4f618:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f61c:	cmp	w0, #0x57
   4f620:	b.eq	4f854 <aarch64_get_opcode@@Base+0x1240>  // b.none
   4f624:	cmp	w0, #0x58
   4f628:	b.ne	4f660 <aarch64_get_opcode@@Base+0x104c>  // b.any
   4f62c:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   4f630:	ldr	w0, [x0, #1032]
   4f634:	cbz	w0, 4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f638:	adrp	x1, 8f000 <aarch64_operands@@Base+0x2bc0>
   4f63c:	add	x1, x1, #0xc70
   4f640:	ubfx	x0, x0, #4, #4
   4f644:	add	x1, x1, #0x188
   4f648:	ldr	x2, [x1, x0, lsl #3]
   4f64c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4f650:	add	x1, x1, #0x7d0
   4f654:	mov	x0, x23
   4f658:	blr	x22
   4f65c:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f660:	cmp	w0, #0x53
   4f664:	b.ne	4fb4c <aarch64_get_opcode@@Base+0x1538>  // b.any
   4f668:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   4f66c:	ldr	w0, [x0, #1616]
   4f670:	add	x0, x0, x0, lsl #3
   4f674:	ldr	x1, [sp, #152]
   4f678:	add	x0, x1, x0, lsl #1
   4f67c:	add	x0, x0, #0x2
   4f680:	ldr	x2, [x26, x0, lsl #3]
   4f684:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   4f688:	add	x1, x1, #0x588
   4f68c:	mov	x0, x23
   4f690:	blr	x22
   4f694:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f698:	cmp	w0, #0x63
   4f69c:	b.ne	4fb4c <aarch64_get_opcode@@Base+0x1538>  // b.any
   4f6a0:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   4f6a4:	ldr	w0, [x0, #1032]
   4f6a8:	cbz	w0, 4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f6ac:	adrp	x1, 8f000 <aarch64_operands@@Base+0x2bc0>
   4f6b0:	add	x1, x1, #0xc70
   4f6b4:	ubfx	x0, x0, #4, #4
   4f6b8:	add	x1, x1, #0x188
   4f6bc:	ldr	x2, [x1, x0, lsl #3]
   4f6c0:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   4f6c4:	add	x1, x1, #0x588
   4f6c8:	mov	x0, x23
   4f6cc:	blr	x22
   4f6d0:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f6d4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   4f6d8:	add	x1, x1, #0x780
   4f6dc:	mov	x0, x23
   4f6e0:	blr	x22
   4f6e4:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f6e8:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   4f6ec:	ldr	w0, [x0, #1616]
   4f6f0:	add	x0, x0, x0, lsl #3
   4f6f4:	ldr	x1, [sp, #160]
   4f6f8:	add	x0, x1, x0, lsl #1
   4f6fc:	add	x0, x0, #0x2
   4f700:	ldr	x2, [x26, x0, lsl #3]
   4f704:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   4f708:	add	x1, x1, #0x588
   4f70c:	mov	x0, x23
   4f710:	blr	x22
   4f714:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f718:	ubfx	w0, w19, #8, #1
   4f71c:	str	w0, [sp, #128]
   4f720:	str	wzr, [sp, #108]
   4f724:	b	4f730 <aarch64_get_opcode@@Base+0x111c>
   4f728:	str	wzr, [sp, #108]
   4f72c:	str	wzr, [sp, #128]
   4f730:	ldr	x1, [sp, #120]
   4f734:	mov	x0, x23
   4f738:	blr	x22
   4f73c:	mov	w20, #0x0                   	// #0
   4f740:	mov	w1, #0x0                   	// #0
   4f744:	mov	w25, #0x1                   	// #1
   4f748:	adrp	x28, fa000 <aarch64_opcode_table@@Base+0x55a20>
   4f74c:	add	x28, x28, #0x650
   4f750:	b	4f78c <aarch64_get_opcode@@Base+0x1178>
   4f754:	ldr	w0, [x28]
   4f758:	add	x0, x0, x0, lsl #3
   4f75c:	lsl	x0, x0, #1
   4f760:	add	x0, x0, w20, sxtw
   4f764:	add	x0, x0, #0x2
   4f768:	ldr	x2, [x26, x0, lsl #3]
   4f76c:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   4f770:	add	x1, x1, #0x588
   4f774:	mov	x0, x23
   4f778:	blr	x22
   4f77c:	mov	w1, w25
   4f780:	add	w20, w20, #0x1
   4f784:	cmp	w20, #0x8
   4f788:	b.eq	4f7b4 <aarch64_get_opcode@@Base+0x11a0>  // b.none
   4f78c:	lsl	w0, w25, w20
   4f790:	sxtw	x0, w0
   4f794:	tst	x0, x19
   4f798:	b.eq	4f780 <aarch64_get_opcode@@Base+0x116c>  // b.none
   4f79c:	cbz	w1, 4f754 <aarch64_get_opcode@@Base+0x1140>
   4f7a0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   4f7a4:	add	x1, x1, #0x758
   4f7a8:	mov	x0, x23
   4f7ac:	blr	x22
   4f7b0:	b	4f754 <aarch64_get_opcode@@Base+0x1140>
   4f7b4:	ldr	w0, [sp, #108]
   4f7b8:	cbz	w0, 4f810 <aarch64_get_opcode@@Base+0x11fc>
   4f7bc:	cbz	w1, 4f7d0 <aarch64_get_opcode@@Base+0x11bc>
   4f7c0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   4f7c4:	add	x1, x1, #0x758
   4f7c8:	mov	x0, x23
   4f7cc:	blr	x22
   4f7d0:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   4f7d4:	ldr	w0, [x0, #1616]
   4f7d8:	add	x0, x0, x0, lsl #3
   4f7dc:	add	x0, x26, x0, lsl #4
   4f7e0:	ldr	x2, [x0, #128]
   4f7e4:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   4f7e8:	add	x1, x1, #0x588
   4f7ec:	mov	x0, x23
   4f7f0:	blr	x22
   4f7f4:	ldr	w0, [sp, #128]
   4f7f8:	cbz	w0, 4f840 <aarch64_get_opcode@@Base+0x122c>
   4f7fc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   4f800:	add	x1, x1, #0x758
   4f804:	mov	x0, x23
   4f808:	blr	x22
   4f80c:	b	4f81c <aarch64_get_opcode@@Base+0x1208>
   4f810:	ldr	w0, [sp, #128]
   4f814:	cbz	w0, 4f840 <aarch64_get_opcode@@Base+0x122c>
   4f818:	cbnz	w1, 4f7fc <aarch64_get_opcode@@Base+0x11e8>
   4f81c:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   4f820:	ldr	w0, [x0, #1616]
   4f824:	add	x0, x0, x0, lsl #3
   4f828:	add	x0, x26, x0, lsl #4
   4f82c:	ldr	x2, [x0, #136]
   4f830:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   4f834:	add	x1, x1, #0x588
   4f838:	mov	x0, x23
   4f83c:	blr	x22
   4f840:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4f844:	add	x1, x1, #0x9a0
   4f848:	mov	x0, x23
   4f84c:	blr	x22
   4f850:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f854:	ldr	x0, [sp, #144]
   4f858:	cbnz	x0, 4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f85c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4f860:	add	x1, x1, #0x4c0
   4f864:	mov	x0, x23
   4f868:	blr	x22
   4f86c:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f870:	ldr	x2, [x24, #120]
   4f874:	mov	x1, x24
   4f878:	ldr	x20, [sp, #176]
   4f87c:	mov	x0, x20
   4f880:	blr	x2
   4f884:	mov	w0, #0x1                   	// #1
   4f888:	strb	w0, [x24, #196]
   4f88c:	mov	w0, #0x2                   	// #2
   4f890:	str	w0, [x24, #200]
   4f894:	str	x20, [x24, #208]
   4f898:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f89c:	ldr	x2, [sp, #168]
   4f8a0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4f8a4:	add	x1, x1, #0x7f8
   4f8a8:	mov	x0, x23
   4f8ac:	blr	x22
   4f8b0:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f8b4:	add	x3, x20, #0x2
   4f8b8:	sub	w0, w0, #0x30
   4f8bc:	ldrb	w2, [x20, #2]
   4f8c0:	sub	w1, w2, #0x30
   4f8c4:	and	w1, w1, #0xff
   4f8c8:	cmp	w1, #0x9
   4f8cc:	b.hi	4f8f0 <aarch64_get_opcode@@Base+0x12dc>  // b.pmore
   4f8d0:	add	w0, w0, w0, lsl #2
   4f8d4:	add	w0, w2, w0, lsl #1
   4f8d8:	sub	w0, w0, #0x30
   4f8dc:	ldrb	w2, [x3, #1]!
   4f8e0:	sub	w1, w2, #0x30
   4f8e4:	and	w1, w1, #0xff
   4f8e8:	cmp	w1, #0x9
   4f8ec:	b.ls	4f8d0 <aarch64_get_opcode@@Base+0x12bc>  // b.plast
   4f8f0:	cmp	w2, #0x2d
   4f8f4:	b.eq	4f90c <aarch64_get_opcode@@Base+0x12f8>  // b.none
   4f8f8:	cmp	w2, #0x3f
   4f8fc:	b.eq	4fb00 <aarch64_get_opcode@@Base+0x14ec>  // b.none
   4f900:	cmp	w2, #0x27
   4f904:	b.eq	4fad0 <aarch64_get_opcode@@Base+0x14bc>  // b.none
   4f908:	bl	35670 <abort@plt>
   4f90c:	add	x21, x3, #0x1
   4f910:	ldrb	w3, [x3, #1]
   4f914:	sub	w1, w3, #0x30
   4f918:	and	w1, w1, #0xff
   4f91c:	cmp	w1, #0x9
   4f920:	b.hi	4f9b0 <aarch64_get_opcode@@Base+0x139c>  // b.pmore
   4f924:	mov	w1, #0x0                   	// #0
   4f928:	add	w1, w1, w1, lsl #2
   4f92c:	add	w1, w3, w1, lsl #1
   4f930:	sub	w1, w1, #0x30
   4f934:	ldrb	w3, [x21, #1]!
   4f938:	sub	w2, w3, #0x30
   4f93c:	and	w2, w2, #0xff
   4f940:	cmp	w2, #0x9
   4f944:	b.ls	4f928 <aarch64_get_opcode@@Base+0x1314>  // b.plast
   4f948:	cbz	w1, 4f9b0 <aarch64_get_opcode@@Base+0x139c>
   4f94c:	asr	x4, x19, x0
   4f950:	sub	w0, w1, w0
   4f954:	mov	w2, #0x2                   	// #2
   4f958:	lsl	w0, w2, w0
   4f95c:	sub	w2, w0, #0x1
   4f960:	sxtw	x2, w2
   4f964:	and	x2, x2, x4
   4f968:	cmp	w3, #0x63
   4f96c:	b.eq	4faa8 <aarch64_get_opcode@@Base+0x1494>  // b.none
   4f970:	b.hi	4f9d8 <aarch64_get_opcode@@Base+0x13c4>  // b.pmore
   4f974:	cmp	w3, #0x57
   4f978:	b.eq	4fa48 <aarch64_get_opcode@@Base+0x1434>  // b.none
   4f97c:	b.hi	4f9b4 <aarch64_get_opcode@@Base+0x13a0>  // b.pmore
   4f980:	cmp	w3, #0x42
   4f984:	b.eq	4fa68 <aarch64_get_opcode@@Base+0x1454>  // b.none
   4f988:	cmp	w3, #0x48
   4f98c:	b.ne	4facc <aarch64_get_opcode@@Base+0x14b8>  // b.any
   4f990:	lsl	x0, x2, #1
   4f994:	str	x0, [sp, #112]
   4f998:	mov	x2, x0
   4f99c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4f9a0:	add	x1, x1, #0x800
   4f9a4:	mov	x0, x23
   4f9a8:	blr	x22
   4f9ac:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f9b0:	bl	35670 <abort@plt>
   4f9b4:	cmp	w3, #0x61
   4f9b8:	b.ne	4facc <aarch64_get_opcode@@Base+0x14b8>  // b.any
   4f9bc:	and	x0, x27, #0xfffffffffffffffc
   4f9c0:	ldr	x3, [x24, #120]
   4f9c4:	mov	x1, x24
   4f9c8:	add	x0, x0, x2, lsl #2
   4f9cc:	blr	x3
   4f9d0:	str	xzr, [sp, #112]
   4f9d4:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f9d8:	cmp	w3, #0x72
   4f9dc:	b.eq	4fa1c <aarch64_get_opcode@@Base+0x1408>  // b.none
   4f9e0:	cmp	w3, #0x78
   4f9e4:	b.ne	4f9fc <aarch64_get_opcode@@Base+0x13e8>  // b.any
   4f9e8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4f9ec:	add	x1, x1, #0x808
   4f9f0:	mov	x0, x23
   4f9f4:	blr	x22
   4f9f8:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4f9fc:	cmp	w3, #0x64
   4fa00:	b.ne	4facc <aarch64_get_opcode@@Base+0x14b8>  // b.any
   4fa04:	str	x2, [sp, #112]
   4fa08:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4fa0c:	add	x1, x1, #0x800
   4fa10:	mov	x0, x23
   4fa14:	blr	x22
   4fa18:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4fa1c:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   4fa20:	ldr	w0, [x0, #1616]
   4fa24:	add	x0, x0, x0, lsl #3
   4fa28:	add	x0, x2, x0, lsl #1
   4fa2c:	add	x0, x0, #0x2
   4fa30:	ldr	x2, [x26, x0, lsl #3]
   4fa34:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   4fa38:	add	x1, x1, #0x588
   4fa3c:	mov	x0, x23
   4fa40:	blr	x22
   4fa44:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4fa48:	lsl	x0, x2, #2
   4fa4c:	str	x0, [sp, #112]
   4fa50:	mov	x2, x0
   4fa54:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4fa58:	add	x1, x1, #0x800
   4fa5c:	mov	x0, x23
   4fa60:	blr	x22
   4fa64:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4fa68:	mov	w20, #0x1                   	// #1
   4fa6c:	lsl	w1, w20, w1
   4fa70:	sxtw	x1, w1
   4fa74:	eor	x2, x1, x2
   4fa78:	sub	x1, x2, x1
   4fa7c:	add	x25, x27, x1, lsl #1
   4fa80:	ldr	x2, [x24, #120]
   4fa84:	mov	x1, x24
   4fa88:	mov	x0, x25
   4fa8c:	blr	x2
   4fa90:	strb	w20, [x24, #196]
   4fa94:	mov	w0, #0x2                   	// #2
   4fa98:	str	w0, [x24, #200]
   4fa9c:	str	x25, [x24, #208]
   4faa0:	str	xzr, [sp, #112]
   4faa4:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4faa8:	adrp	x0, 8f000 <aarch64_operands@@Base+0x2bc0>
   4faac:	add	x0, x0, #0xc70
   4fab0:	add	x0, x0, #0x188
   4fab4:	ldr	x2, [x0, x2, lsl #3]
   4fab8:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   4fabc:	add	x1, x1, #0x588
   4fac0:	mov	x0, x23
   4fac4:	blr	x22
   4fac8:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4facc:	bl	35670 <abort@plt>
   4fad0:	add	x21, x3, #0x1
   4fad4:	mov	w1, #0x1                   	// #1
   4fad8:	lsl	w0, w1, w0
   4fadc:	sxtw	x0, w0
   4fae0:	tst	x0, x19
   4fae4:	b.eq	4f4a4 <aarch64_get_opcode@@Base+0xe90>  // b.none
   4fae8:	ldrb	w2, [x3, #1]
   4faec:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4faf0:	add	x1, x1, #0x790
   4faf4:	mov	x0, x23
   4faf8:	blr	x22
   4fafc:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4fb00:	mov	w1, #0x1                   	// #1
   4fb04:	lsl	w0, w1, w0
   4fb08:	sxtw	x0, w0
   4fb0c:	tst	x0, x19
   4fb10:	b.eq	4fb30 <aarch64_get_opcode@@Base+0x151c>  // b.none
   4fb14:	add	x21, x3, #0x2
   4fb18:	ldrb	w2, [x3, #1]
   4fb1c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4fb20:	add	x1, x1, #0x790
   4fb24:	mov	x0, x23
   4fb28:	blr	x22
   4fb2c:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4fb30:	add	x21, x3, #0x2
   4fb34:	ldrb	w2, [x3, #2]
   4fb38:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4fb3c:	add	x1, x1, #0x790
   4fb40:	mov	x0, x23
   4fb44:	blr	x22
   4fb48:	b	4f4a4 <aarch64_get_opcode@@Base+0xe90>
   4fb4c:	bl	35670 <abort@plt>
   4fb50:	ldr	x2, [sp, #112]
   4fb54:	add	x0, x2, #0x10
   4fb58:	cmp	x0, #0x30
   4fb5c:	b.ls	4fb7c <aarch64_get_opcode@@Base+0x1568>  // b.plast
   4fb60:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4fb64:	add	x1, x1, #0x810
   4fb68:	mov	x0, x23
   4fb6c:	blr	x22
   4fb70:	ldp	x25, x26, [sp, #64]
   4fb74:	ldp	x27, x28, [sp, #80]
   4fb78:	b	4f3c0 <aarch64_get_opcode@@Base+0xdac>
   4fb7c:	ldp	x25, x26, [sp, #64]
   4fb80:	ldp	x27, x28, [sp, #80]
   4fb84:	b	4f3c0 <aarch64_get_opcode@@Base+0xdac>
   4fb88:	stp	x29, x30, [sp, #-16]!
   4fb8c:	mov	x29, sp
   4fb90:	mov	x0, x1
   4fb94:	ldr	w1, [x1, #172]
   4fb98:	cmp	w1, #0x2
   4fb9c:	b.eq	4fbe4 <aarch64_get_opcode@@Base+0x15d0>  // b.none
   4fba0:	cmp	w1, #0x4
   4fba4:	b.ne	4fbc0 <aarch64_get_opcode@@Base+0x15ac>  // b.any
   4fba8:	ldr	x3, [x0]
   4fbac:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4fbb0:	add	x1, x1, #0x868
   4fbb4:	ldr	x0, [x0, #8]
   4fbb8:	blr	x3
   4fbbc:	b	4fbdc <aarch64_get_opcode@@Base+0x15c8>
   4fbc0:	cmp	w1, #0x1
   4fbc4:	b.ne	4fbfc <aarch64_get_opcode@@Base+0x15e8>  // b.any
   4fbc8:	ldr	x3, [x0]
   4fbcc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4fbd0:	add	x1, x1, #0x848
   4fbd4:	ldr	x0, [x0, #8]
   4fbd8:	blr	x3
   4fbdc:	ldp	x29, x30, [sp], #16
   4fbe0:	ret
   4fbe4:	ldr	x3, [x0]
   4fbe8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   4fbec:	add	x1, x1, #0x858
   4fbf0:	ldr	x0, [x0, #8]
   4fbf4:	blr	x3
   4fbf8:	b	4fbdc <aarch64_get_opcode@@Base+0x15c8>
   4fbfc:	bl	35670 <abort@plt>
   4fc00:	stp	x29, x30, [sp, #-352]!
   4fc04:	mov	x29, sp
   4fc08:	stp	x21, x22, [sp, #32]
   4fc0c:	mov	x22, x1
   4fc10:	str	w2, [sp, #120]
   4fc14:	cbz	w2, 4fca0 <aarch64_get_opcode@@Base+0x168c>
   4fc18:	mov	x1, #0xef000000            	// #4009754624
   4fc1c:	bics	xzr, x1, x22
   4fc20:	b.eq	4fc6c <aarch64_get_opcode@@Base+0x1658>  // b.none
   4fc24:	and	x2, x22, #0xff000000
   4fc28:	mov	x1, #0xf9000000            	// #4177526784
   4fc2c:	cmp	x2, x1
   4fc30:	b.eq	4fc90 <aarch64_get_opcode@@Base+0x167c>  // b.none
   4fc34:	mov	x1, #0xfd000000            	// #4244635648
   4fc38:	and	x1, x22, x1
   4fc3c:	mov	x2, #0xfc000000            	// #4227858432
   4fc40:	cmp	x1, x2
   4fc44:	b.eq	4fcf0 <aarch64_get_opcode@@Base+0x16dc>  // b.none
   4fc48:	mov	x1, #0xf5f                 	// #3935
   4fc4c:	movk	x1, #0xff91, lsl #16
   4fc50:	and	x1, x22, x1
   4fc54:	mov	x2, #0xb10                 	// #2832
   4fc58:	movk	x2, #0xee80, lsl #16
   4fc5c:	cmp	x1, x2
   4fc60:	b.ne	50a88 <aarch64_get_opcode@@Base+0x2474>  // b.any
   4fc64:	stp	x23, x24, [sp, #48]
   4fc68:	b	4fca4 <aarch64_get_opcode@@Base+0x1690>
   4fc6c:	stp	x23, x24, [sp, #48]
   4fc70:	and	x1, x22, #0xffffff
   4fc74:	mov	x2, #0xf3000000            	// #4076863488
   4fc78:	orr	x2, x1, x2
   4fc7c:	mov	x3, #0xf2000000            	// #4060086272
   4fc80:	orr	x1, x1, x3
   4fc84:	tst	x22, #0x10000000
   4fc88:	csel	x22, x1, x2, eq  // eq = none
   4fc8c:	b	4fca4 <aarch64_get_opcode@@Base+0x1690>
   4fc90:	stp	x23, x24, [sp, #48]
   4fc94:	mov	x1, #0xd000000             	// #218103808
   4fc98:	eor	x22, x22, x1
   4fc9c:	b	4fca4 <aarch64_get_opcode@@Base+0x1690>
   4fca0:	stp	x23, x24, [sp, #48]
   4fca4:	adrp	x1, 9a000 <aarch64_operands@@Base+0xdbc0>
   4fca8:	add	x1, x1, #0x570
   4fcac:	adrp	x23, 65000 <fields@@Base+0x4c40>
   4fcb0:	add	x23, x23, #0x878
   4fcb4:	str	x22, [sp, #96]
   4fcb8:	ldr	x2, [x1, #32]
   4fcbc:	and	x2, x22, x2
   4fcc0:	ldr	x3, [x1, #24]
   4fcc4:	cmp	x2, x3
   4fcc8:	b.eq	4fcf8 <aarch64_get_opcode@@Base+0x16e4>  // b.none
   4fccc:	add	x1, x1, #0x30
   4fcd0:	ldr	x23, [x1, #40]
   4fcd4:	cbnz	x23, 4fcb8 <aarch64_get_opcode@@Base+0x16a4>
   4fcd8:	str	wzr, [sp, #112]
   4fcdc:	ldp	x23, x24, [sp, #48]
   4fce0:	ldr	w0, [sp, #112]
   4fce4:	ldp	x21, x22, [sp, #32]
   4fce8:	ldp	x29, x30, [sp], #352
   4fcec:	ret
   4fcf0:	stp	x23, x24, [sp, #48]
   4fcf4:	b	4fca4 <aarch64_get_opcode@@Base+0x1690>
   4fcf8:	stp	x19, x20, [sp, #16]
   4fcfc:	ldr	x21, [x0, #8]
   4fd00:	ldr	x20, [x0]
   4fd04:	ldrb	w2, [x23]
   4fd08:	cbz	w2, 50a90 <aarch64_get_opcode@@Base+0x247c>
   4fd0c:	stp	x25, x26, [sp, #64]
   4fd10:	stp	x27, x28, [sp, #80]
   4fd14:	asr	x3, x22, #16
   4fd18:	ubfx	w1, w22, #16, #4
   4fd1c:	str	w1, [sp, #116]
   4fd20:	asr	x0, x22, #3
   4fd24:	and	w0, w0, #0x10
   4fd28:	orr	w0, w0, w1
   4fd2c:	str	w0, [sp, #196]
   4fd30:	asr	x1, x22, #8
   4fd34:	ubfx	w6, w22, #8, #2
   4fd38:	str	w6, [sp, #168]
   4fd3c:	add	w0, w0, w6
   4fd40:	str	w0, [sp, #212]
   4fd44:	ubfx	w0, w22, #8, #4
   4fd48:	str	w0, [sp, #124]
   4fd4c:	ubfx	w0, w22, #5, #1
   4fd50:	str	w0, [sp, #228]
   4fd54:	asr	x0, x22, #24
   4fd58:	ubfiz	w0, w0, #7, #1
   4fd5c:	ubfiz	w3, w3, #4, #3
   4fd60:	orr	w0, w0, w3
   4fd64:	and	w7, w22, #0xf
   4fd68:	str	w7, [sp, #108]
   4fd6c:	orr	w5, w7, w0
   4fd70:	str	w5, [sp, #316]
   4fd74:	and	w0, w1, #0x8
   4fd78:	str	w0, [sp, #184]
   4fd7c:	mov	x0, x5
   4fd80:	ubfiz	x3, x0, #19, #7
   4fd84:	lsl	w0, w5, #24
   4fd88:	and	x0, x0, #0x80000000
   4fd8c:	orr	x0, x0, x3
   4fd90:	mov	x3, x5
   4fd94:	tst	x3, #0x40
   4fd98:	mov	w3, #0x3c                  	// #60
   4fd9c:	mov	w4, #0x40                  	// #64
   4fda0:	csel	w3, w3, w4, ne  // ne = any
   4fda4:	sbfiz	x3, x3, #24, #32
   4fda8:	orr	x0, x3, x0
   4fdac:	str	x0, [sp, #320]
   4fdb0:	sxtw	x5, w5
   4fdb4:	str	x5, [sp, #256]
   4fdb8:	and	w0, w1, #0x1
   4fdbc:	add	w0, w0, #0x1
   4fdc0:	lsl	w0, w0, #3
   4fdc4:	lsl	x3, x5, x0
   4fdc8:	mov	x4, #0x1                   	// #1
   4fdcc:	lsl	x0, x4, x0
   4fdd0:	sub	x0, x0, #0x1
   4fdd4:	orr	x0, x0, x3
   4fdd8:	str	x0, [sp, #296]
   4fddc:	ubfx	w0, w22, #9, #1
   4fde0:	lsl	w0, w0, #3
   4fde4:	lsl	x0, x5, x0
   4fde8:	str	x0, [sp, #264]
   4fdec:	ubfx	w0, w22, #9, #2
   4fdf0:	lsl	w0, w0, #3
   4fdf4:	lsl	x0, x5, x0
   4fdf8:	str	x0, [sp, #240]
   4fdfc:	asr	x0, x22, #1
   4fe00:	and	w0, w0, #0x10
   4fe04:	orr	w0, w0, w7
   4fe08:	ubfx	w5, w22, #20, #2
   4fe0c:	mov	w3, #0x4                   	// #4
   4fe10:	lsl	w3, w3, w5
   4fe14:	sub	w3, w3, #0x1
   4fe18:	and	w3, w3, w0
   4fe1c:	str	w3, [sp, #188]
   4fe20:	asr	w0, w0, w5
   4fe24:	asr	w0, w0, #2
   4fe28:	str	w0, [sp, #192]
   4fe2c:	asr	x0, x22, #22
   4fe30:	ubfiz	w0, w0, #4, #1
   4fe34:	ubfx	w3, w22, #12, #4
   4fe38:	orr	w8, w0, w3
   4fe3c:	str	w8, [sp, #164]
   4fe40:	asr	x5, x22, #4
   4fe44:	ubfx	w0, w22, #4, #1
   4fe48:	str	w0, [sp, #128]
   4fe4c:	asr	x3, x22, #6
   4fe50:	mov	w7, w6
   4fe54:	add	w9, w6, #0x1
   4fe58:	str	w9, [sp, #232]
   4fe5c:	ubfx	w0, w22, #5, #1
   4fe60:	cmp	w6, #0x0
   4fe64:	csel	w6, w0, wzr, eq  // eq = none
   4fe68:	str	w6, [sp, #180]
   4fe6c:	str	w8, [sp, #132]
   4fe70:	sub	w6, w8, #0x1
   4fe74:	csel	w0, w0, wzr, eq  // eq = none
   4fe78:	cmp	w0, #0x0
   4fe7c:	mov	w0, #0x2                   	// #2
   4fe80:	csinc	w0, w0, w7, ne  // ne = any
   4fe84:	add	w0, w6, w0
   4fe88:	str	w0, [sp, #248]
   4fe8c:	lsl	w6, w9, #3
   4fe90:	ubfx	w0, w22, #6, #2
   4fe94:	lsl	w6, w6, w0
   4fe98:	str	w6, [sp, #284]
   4fe9c:	asr	w0, w6, #1
   4fea0:	tst	x22, #0x80
   4fea4:	csel	w0, w6, w0, eq  // eq = none
   4fea8:	cmp	w7, #0x3
   4feac:	csel	w0, w6, w0, ne  // ne = any
   4feb0:	str	w0, [sp, #272]
   4feb4:	orr	w0, w1, w3
   4feb8:	and	w0, w0, #0x3
   4febc:	str	w0, [sp, #252]
   4fec0:	ubfx	w0, w22, #4, #4
   4fec4:	ubfx	w6, w22, #10, #2
   4fec8:	str	w6, [sp, #208]
   4fecc:	add	w3, w6, #0x1
   4fed0:	asr	w3, w0, w3
   4fed4:	str	w3, [sp, #200]
   4fed8:	and	w1, w1, #0x3
   4fedc:	add	w1, w1, #0x1
   4fee0:	str	w1, [sp, #160]
   4fee4:	str	w1, [sp, #204]
   4fee8:	cmp	w1, #0x1
   4feec:	cset	w3, gt
   4fef0:	cmp	w6, #0x0
   4fef4:	cset	w1, gt
   4fef8:	and	w1, w3, w1
   4fefc:	str	w1, [sp, #176]
   4ff00:	lsl	w4, w4, w6
   4ff04:	sub	w3, w4, #0x1
   4ff08:	str	w3, [sp, #292]
   4ff0c:	asr	w1, w0, w6
   4ff10:	and	w1, w1, #0x1
   4ff14:	str	w1, [sp, #224]
   4ff18:	and	w0, w0, w3
   4ff1c:	str	w0, [sp, #288]
   4ff20:	mov	w0, #0x8                   	// #8
   4ff24:	lsl	w0, w0, w6
   4ff28:	str	w0, [sp, #332]
   4ff2c:	mov	w1, #0x20                  	// #32
   4ff30:	lsl	w0, w1, w6
   4ff34:	str	w0, [sp, #276]
   4ff38:	ubfx	w3, w22, #4, #2
   4ff3c:	str	w3, [sp, #172]
   4ff40:	lsl	w0, w3, #6
   4ff44:	str	w0, [sp, #328]
   4ff48:	and	w0, w5, #0x2
   4ff4c:	str	w0, [sp, #312]
   4ff50:	mov	w0, #0x10                  	// #16
   4ff54:	lsl	w0, w0, w6
   4ff58:	str	w0, [sp, #280]
   4ff5c:	lsl	w0, w1, w3
   4ff60:	str	w0, [sp, #236]
   4ff64:	str	wzr, [sp, #112]
   4ff68:	str	xzr, [sp, #216]
   4ff6c:	adrp	x0, 65000 <fields@@Base+0x4c40>
   4ff70:	add	x27, x0, #0x790
   4ff74:	adrp	x0, 59000 <xexit@@Base+0x74c>
   4ff78:	add	x28, x0, #0x9c0
   4ff7c:	str	x22, [sp, #304]
   4ff80:	b	509d4 <aarch64_get_opcode@@Base+0x23c0>
   4ff84:	cmp	w0, #0x41
   4ff88:	b.eq	500e4 <aarch64_get_opcode@@Base+0x1ad0>  // b.none
   4ff8c:	b.ls	4ffc0 <aarch64_get_opcode@@Base+0x19ac>  // b.plast
   4ff90:	ldr	w0, [sp, #176]
   4ff94:	cbz	w0, 50278 <aarch64_get_opcode@@Base+0x1c64>
   4ff98:	ldr	w0, [sp, #224]
   4ff9c:	cbnz	w0, 50b24 <aarch64_get_opcode@@Base+0x2510>
   4ffa0:	ldr	w0, [sp, #160]
   4ffa4:	cmp	w0, #0x2
   4ffa8:	b.eq	502f8 <aarch64_get_opcode@@Base+0x1ce4>  // b.none
   4ffac:	mov	w25, #0x1                   	// #1
   4ffb0:	cmp	w0, #0x3
   4ffb4:	b.ne	5034c <aarch64_get_opcode@@Base+0x1d38>  // b.any
   4ffb8:	mov	w25, #0x1                   	// #1
   4ffbc:	b	5029c <aarch64_get_opcode@@Base+0x1c88>
   4ffc0:	cmp	w0, #0x25
   4ffc4:	b.eq	50094 <aarch64_get_opcode@@Base+0x1a80>  // b.none
   4ffc8:	sub	w0, w0, #0x30
   4ffcc:	and	w0, w0, #0xff
   4ffd0:	cmp	w0, #0x9
   4ffd4:	b.hi	509b4 <aarch64_get_opcode@@Base+0x23a0>  // b.pmore
   4ffd8:	add	x3, sp, #0x150
   4ffdc:	add	x2, sp, #0x158
   4ffe0:	ldr	x1, [sp, #96]
   4ffe4:	mov	x0, x19
   4ffe8:	bl	4f250 <aarch64_get_opcode@@Base+0xc3c>
   4ffec:	mov	x19, x0
   4fff0:	ldrb	w0, [x0]
   4fff4:	cmp	w0, #0x52
   4fff8:	b.eq	50930 <aarch64_get_opcode@@Base+0x231c>  // b.none
   4fffc:	b.ls	507a4 <aarch64_get_opcode@@Base+0x2190>  // b.plast
   50000:	cmp	w0, #0x64
   50004:	b.eq	50850 <aarch64_get_opcode@@Base+0x223c>  // b.none
   50008:	b.ls	5081c <aarch64_get_opcode@@Base+0x2208>  // b.plast
   5000c:	cmp	w0, #0x65
   50010:	b.eq	50870 <aarch64_get_opcode@@Base+0x225c>  // b.none
   50014:	cmp	w0, #0x72
   50018:	b.ne	509a8 <aarch64_get_opcode@@Base+0x2394>  // b.any
   5001c:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   50020:	ldr	w0, [x0, #1616]
   50024:	add	x0, x0, x0, lsl #3
   50028:	ldr	x1, [sp, #344]
   5002c:	add	x0, x1, x0, lsl #1
   50030:	add	x0, x0, #0x2
   50034:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   50038:	add	x1, x1, #0xb70
   5003c:	ldr	x2, [x1, x0, lsl #3]
   50040:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   50044:	add	x1, x1, #0x588
   50048:	mov	x0, x21
   5004c:	blr	x20
   50050:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50054:	cmp	w0, #0x44
   50058:	b.eq	5066c <aarch64_get_opcode@@Base+0x2058>  // b.none
   5005c:	cmp	w0, #0x45
   50060:	b.ne	509b4 <aarch64_get_opcode@@Base+0x23a0>  // b.any
   50064:	ldr	w0, [sp, #184]
   50068:	cbz	w0, 50c1c <aarch64_get_opcode@@Base+0x2608>
   5006c:	ldr	w0, [sp, #124]
   50070:	cmp	w0, #0xb
   50074:	b.gt	50688 <aarch64_get_opcode@@Base+0x2074>
   50078:	ldr	x2, [sp, #264]
   5007c:	mov	x3, x2
   50080:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50084:	add	x1, x1, #0x928
   50088:	mov	x0, x21
   5008c:	blr	x20
   50090:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50094:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50098:	add	x1, x1, #0x798
   5009c:	mov	x0, x21
   500a0:	blr	x20
   500a4:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   500a8:	ldr	w0, [sp, #120]
   500ac:	cbz	w0, 509c8 <aarch64_get_opcode@@Base+0x23b4>
   500b0:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   500b4:	ldr	w1, [x0, #1032]
   500b8:	cbz	w1, 509c8 <aarch64_get_opcode@@Base+0x23b4>
   500bc:	adrp	x0, 8f000 <aarch64_operands@@Base+0x2bc0>
   500c0:	add	x0, x0, #0xc70
   500c4:	ubfx	x1, x1, #4, #4
   500c8:	add	x0, x0, #0x188
   500cc:	ldr	x2, [x0, x1, lsl #3]
   500d0:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   500d4:	add	x1, x1, #0x588
   500d8:	mov	x0, x21
   500dc:	blr	x20
   500e0:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   500e4:	adrp	x0, 74000 <fields@@Base+0x13c40>
   500e8:	add	x0, x0, #0xba8
   500ec:	ldr	w1, [sp, #124]
   500f0:	ldrb	w23, [x0, w1, sxtw]
   500f4:	and	w25, w23, #0xf
   500f8:	lsr	w23, w23, #4
   500fc:	add	w23, w23, #0x1
   50100:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50104:	add	x1, x1, #0x7f0
   50108:	mov	x0, x21
   5010c:	blr	x20
   50110:	cmp	w23, #0x1
   50114:	b.gt	501f0 <aarch64_get_opcode@@Base+0x1bdc>
   50118:	cmp	w25, #0x1
   5011c:	b.eq	5024c <aarch64_get_opcode@@Base+0x1c38>  // b.none
   50120:	ldr	w2, [sp, #164]
   50124:	add	w3, w2, w25
   50128:	sub	w3, w3, #0x1
   5012c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50130:	add	x1, x1, #0x8c0
   50134:	mov	x0, x21
   50138:	blr	x20
   5013c:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   50140:	ldr	w0, [x0, #1616]
   50144:	add	x0, x0, x0, lsl #3
   50148:	lsl	x0, x0, #1
   5014c:	ldr	w1, [sp, #116]
   50150:	add	x0, x0, w1, sxtw
   50154:	add	x0, x0, #0x2
   50158:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   5015c:	add	x1, x1, #0xb70
   50160:	ldr	x2, [x1, x0, lsl #3]
   50164:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50168:	add	x1, x1, #0x8c8
   5016c:	mov	x0, x21
   50170:	blr	x20
   50174:	ldr	w0, [sp, #172]
   50178:	cbz	w0, 50190 <aarch64_get_opcode@@Base+0x1b7c>
   5017c:	ldr	w2, [sp, #236]
   50180:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50184:	add	x1, x1, #0x8d0
   50188:	mov	x0, x21
   5018c:	blr	x20
   50190:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   50194:	add	x1, x1, #0x0
   50198:	mov	x0, x21
   5019c:	blr	x20
   501a0:	ldr	w0, [sp, #108]
   501a4:	cmp	w0, #0xd
   501a8:	b.eq	50264 <aarch64_get_opcode@@Base+0x1c50>  // b.none
   501ac:	ldr	w1, [sp, #108]
   501b0:	cmp	w1, #0xf
   501b4:	b.eq	509c8 <aarch64_get_opcode@@Base+0x23b4>  // b.none
   501b8:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   501bc:	ldr	w0, [x0, #1616]
   501c0:	add	x0, x0, x0, lsl #3
   501c4:	lsl	x0, x0, #1
   501c8:	add	x0, x0, w1, sxtw
   501cc:	add	x0, x0, #0x2
   501d0:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   501d4:	add	x1, x1, #0xb70
   501d8:	ldr	x2, [x1, x0, lsl #3]
   501dc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   501e0:	add	x1, x1, #0xf60
   501e4:	mov	x0, x21
   501e8:	blr	x20
   501ec:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   501f0:	cbz	w25, 5013c <aarch64_get_opcode@@Base+0x1b28>
   501f4:	ldr	w24, [sp, #132]
   501f8:	mov	w22, #0x0                   	// #0
   501fc:	mov	x2, x28
   50200:	adrp	x26, 65000 <fields@@Base+0x4c40>
   50204:	add	x1, x26, #0x8b0
   50208:	adrp	x0, 59000 <xexit@@Base+0x74c>
   5020c:	add	x26, x0, #0x7a0
   50210:	str	x19, [sp, #136]
   50214:	mov	x19, x1
   50218:	b	50224 <aarch64_get_opcode@@Base+0x1c10>
   5021c:	cmp	w22, #0x0
   50220:	csel	x2, x26, x28, ne  // ne = any
   50224:	mov	w3, w24
   50228:	mov	x1, x19
   5022c:	mov	x0, x21
   50230:	blr	x20
   50234:	add	w22, w22, #0x1
   50238:	add	w24, w24, w23
   5023c:	cmp	w25, w22
   50240:	b.ne	5021c <aarch64_get_opcode@@Base+0x1c08>  // b.any
   50244:	ldr	x19, [sp, #136]
   50248:	b	5013c <aarch64_get_opcode@@Base+0x1b28>
   5024c:	ldr	w2, [sp, #164]
   50250:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50254:	add	x1, x1, #0x8b8
   50258:	mov	x0, x21
   5025c:	blr	x20
   50260:	b	5013c <aarch64_get_opcode@@Base+0x1b28>
   50264:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50268:	add	x1, x1, #0x4c0
   5026c:	mov	x0, x21
   50270:	blr	x20
   50274:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50278:	ldr	w0, [sp, #160]
   5027c:	cmp	w0, #0x2
   50280:	b.eq	502f0 <aarch64_get_opcode@@Base+0x1cdc>  // b.none
   50284:	b.ls	502b8 <aarch64_get_opcode@@Base+0x1ca4>  // b.plast
   50288:	ldr	w0, [sp, #160]
   5028c:	mov	w25, #0x1                   	// #1
   50290:	cmp	w0, #0x3
   50294:	b.ne	5034c <aarch64_get_opcode@@Base+0x1d38>  // b.any
   50298:	mov	w25, #0x1                   	// #1
   5029c:	ldr	w0, [sp, #208]
   502a0:	cmp	w0, #0x2
   502a4:	b.eq	50328 <aarch64_get_opcode@@Base+0x1d14>  // b.none
   502a8:	ldr	w0, [sp, #128]
   502ac:	cbnz	w0, 50ad8 <aarch64_get_opcode@@Base+0x24c4>
   502b0:	str	w0, [sp, #136]
   502b4:	b	50b60 <aarch64_get_opcode@@Base+0x254c>
   502b8:	cmp	w0, #0x1
   502bc:	b.ne	50384 <aarch64_get_opcode@@Base+0x1d70>  // b.any
   502c0:	ldr	w0, [sp, #224]
   502c4:	cbnz	w0, 50aa4 <aarch64_get_opcode@@Base+0x2490>
   502c8:	ldr	w0, [sp, #208]
   502cc:	cbz	w0, 50388 <aarch64_get_opcode@@Base+0x1d74>
   502d0:	ldr	w0, [sp, #288]
   502d4:	ldr	w1, [sp, #292]
   502d8:	cmp	w0, w1
   502dc:	b.eq	50398 <aarch64_get_opcode@@Base+0x1d84>  // b.none
   502e0:	cbnz	w0, 50abc <aarch64_get_opcode@@Base+0x24a8>
   502e4:	str	w0, [sp, #136]
   502e8:	mov	w25, #0x1                   	// #1
   502ec:	b	50b60 <aarch64_get_opcode@@Base+0x254c>
   502f0:	mov	w25, #0x1                   	// #1
   502f4:	b	50b40 <aarch64_get_opcode@@Base+0x252c>
   502f8:	mov	w25, #0x1                   	// #1
   502fc:	b	50b40 <aarch64_get_opcode@@Base+0x252c>
   50300:	ldr	w0, [sp, #312]
   50304:	cbz	w0, 50b4c <aarch64_get_opcode@@Base+0x2538>
   50308:	str	wzr, [sp, #112]
   5030c:	ldp	x19, x20, [sp, #16]
   50310:	ldp	x23, x24, [sp, #48]
   50314:	ldp	x25, x26, [sp, #64]
   50318:	ldp	x27, x28, [sp, #80]
   5031c:	b	4fce0 <aarch64_get_opcode@@Base+0x16cc>
   50320:	mov	w25, #0x2                   	// #2
   50324:	b	5029c <aarch64_get_opcode@@Base+0x1c88>
   50328:	ldr	w0, [sp, #172]
   5032c:	cbz	w0, 502a8 <aarch64_get_opcode@@Base+0x1c94>
   50330:	str	wzr, [sp, #112]
   50334:	ldp	x19, x20, [sp, #16]
   50338:	ldp	x23, x24, [sp, #48]
   5033c:	ldp	x25, x26, [sp, #64]
   50340:	ldp	x27, x28, [sp, #80]
   50344:	b	4fce0 <aarch64_get_opcode@@Base+0x16cc>
   50348:	mov	w25, #0x2                   	// #2
   5034c:	ldr	w0, [sp, #128]
   50350:	cmp	w0, #0x0
   50354:	ldr	w1, [sp, #276]
   50358:	csel	w0, w0, w1, eq  // eq = none
   5035c:	str	w0, [sp, #136]
   50360:	ldr	w0, [sp, #208]
   50364:	cmp	w0, #0x2
   50368:	b.ne	50b60 <aarch64_get_opcode@@Base+0x254c>  // b.any
   5036c:	ldr	w0, [sp, #172]
   50370:	cmp	w0, #0x3
   50374:	b.eq	50af0 <aarch64_get_opcode@@Base+0x24dc>  // b.none
   50378:	ldr	w0, [sp, #328]
   5037c:	str	w0, [sp, #136]
   50380:	b	50b60 <aarch64_get_opcode@@Base+0x254c>
   50384:	bl	35670 <abort@plt>
   50388:	ldr	w0, [sp, #224]
   5038c:	str	w0, [sp, #136]
   50390:	mov	w25, #0x1                   	// #1
   50394:	b	50b60 <aarch64_get_opcode@@Base+0x254c>
   50398:	ldr	w0, [sp, #332]
   5039c:	str	w0, [sp, #136]
   503a0:	mov	w25, #0x1                   	// #1
   503a4:	b	50b60 <aarch64_get_opcode@@Base+0x254c>
   503a8:	ldr	x19, [sp, #144]
   503ac:	ldr	x27, [sp, #152]
   503b0:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   503b4:	ldr	w0, [x0, #1616]
   503b8:	add	x0, x0, x0, lsl #3
   503bc:	lsl	x0, x0, #1
   503c0:	ldr	w1, [sp, #116]
   503c4:	add	x0, x0, w1, sxtw
   503c8:	add	x0, x0, #0x2
   503cc:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   503d0:	add	x1, x1, #0xb70
   503d4:	ldr	x2, [x1, x0, lsl #3]
   503d8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   503dc:	add	x1, x1, #0x8c8
   503e0:	mov	x0, x21
   503e4:	blr	x20
   503e8:	ldr	w0, [sp, #136]
   503ec:	cbz	w0, 50404 <aarch64_get_opcode@@Base+0x1df0>
   503f0:	mov	w2, w0
   503f4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   503f8:	add	x1, x1, #0x8d0
   503fc:	mov	x0, x21
   50400:	blr	x20
   50404:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   50408:	add	x1, x1, #0x0
   5040c:	mov	x0, x21
   50410:	blr	x20
   50414:	ldr	w0, [sp, #108]
   50418:	cmp	w0, #0xd
   5041c:	b.eq	50464 <aarch64_get_opcode@@Base+0x1e50>  // b.none
   50420:	ldr	w1, [sp, #108]
   50424:	cmp	w1, #0xf
   50428:	b.eq	509c8 <aarch64_get_opcode@@Base+0x23b4>  // b.none
   5042c:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   50430:	ldr	w0, [x0, #1616]
   50434:	add	x0, x0, x0, lsl #3
   50438:	lsl	x0, x0, #1
   5043c:	add	x0, x0, w1, sxtw
   50440:	add	x0, x0, #0x2
   50444:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   50448:	add	x1, x1, #0xb70
   5044c:	ldr	x2, [x1, x0, lsl #3]
   50450:	adrp	x1, 59000 <xexit@@Base+0x74c>
   50454:	add	x1, x1, #0xf60
   50458:	mov	x0, x21
   5045c:	blr	x20
   50460:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50464:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50468:	add	x1, x1, #0x4c0
   5046c:	mov	x0, x21
   50470:	blr	x20
   50474:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50478:	ldr	w0, [sp, #180]
   5047c:	cbz	w0, 50548 <aarch64_get_opcode@@Base+0x1f34>
   50480:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50484:	add	x1, x1, #0x7f0
   50488:	mov	x0, x21
   5048c:	blr	x20
   50490:	ldr	w3, [sp, #248]
   50494:	ldr	w2, [sp, #164]
   50498:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5049c:	add	x1, x1, #0x8f8
   504a0:	mov	x0, x21
   504a4:	blr	x20
   504a8:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   504ac:	ldr	w0, [x0, #1616]
   504b0:	add	x0, x0, x0, lsl #3
   504b4:	lsl	x0, x0, #1
   504b8:	ldr	w1, [sp, #116]
   504bc:	add	x0, x0, w1, sxtw
   504c0:	add	x0, x0, #0x2
   504c4:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   504c8:	add	x1, x1, #0xb70
   504cc:	ldr	x2, [x1, x0, lsl #3]
   504d0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   504d4:	add	x1, x1, #0x8c8
   504d8:	mov	x0, x21
   504dc:	blr	x20
   504e0:	ldr	w0, [sp, #128]
   504e4:	cbnz	w0, 5061c <aarch64_get_opcode@@Base+0x2008>
   504e8:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   504ec:	add	x1, x1, #0x0
   504f0:	mov	x0, x21
   504f4:	blr	x20
   504f8:	ldr	w0, [sp, #108]
   504fc:	cmp	w0, #0xd
   50500:	b.eq	50658 <aarch64_get_opcode@@Base+0x2044>  // b.none
   50504:	ldr	w1, [sp, #108]
   50508:	cmp	w1, #0xf
   5050c:	b.eq	509c8 <aarch64_get_opcode@@Base+0x23b4>  // b.none
   50510:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   50514:	ldr	w0, [x0, #1616]
   50518:	add	x0, x0, x0, lsl #3
   5051c:	lsl	x0, x0, #1
   50520:	add	x0, x0, w1, sxtw
   50524:	add	x0, x0, #0x2
   50528:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   5052c:	add	x1, x1, #0xb70
   50530:	ldr	x2, [x1, x0, lsl #3]
   50534:	adrp	x1, 59000 <xexit@@Base+0x74c>
   50538:	add	x1, x1, #0xf60
   5053c:	mov	x0, x21
   50540:	blr	x20
   50544:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50548:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5054c:	add	x1, x1, #0x7f0
   50550:	mov	x0, x21
   50554:	blr	x20
   50558:	ldr	w0, [sp, #228]
   5055c:	cbz	w0, 505ac <aarch64_get_opcode@@Base+0x1f98>
   50560:	ldr	w23, [sp, #132]
   50564:	mov	w22, #0x0                   	// #0
   50568:	mov	x2, x28
   5056c:	adrp	x24, 65000 <fields@@Base+0x4c40>
   50570:	add	x24, x24, #0x8e8
   50574:	adrp	x25, 59000 <xexit@@Base+0x74c>
   50578:	add	x25, x25, #0x7a0
   5057c:	ldr	w26, [sp, #232]
   50580:	mov	w3, w23
   50584:	mov	x1, x24
   50588:	mov	x0, x21
   5058c:	blr	x20
   50590:	add	w22, w22, #0x1
   50594:	add	w23, w23, #0x2
   50598:	cmp	w26, w22
   5059c:	b.eq	504a8 <aarch64_get_opcode@@Base+0x1e94>  // b.none
   505a0:	cmp	w22, #0x0
   505a4:	csel	x2, x25, x28, ne  // ne = any
   505a8:	b	50580 <aarch64_get_opcode@@Base+0x1f6c>
   505ac:	ldr	w0, [sp, #232]
   505b0:	cmp	w0, #0x1
   505b4:	b.ne	50490 <aarch64_get_opcode@@Base+0x1e7c>  // b.any
   505b8:	ldr	w2, [sp, #164]
   505bc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   505c0:	add	x1, x1, #0x8f0
   505c4:	mov	x0, x21
   505c8:	blr	x20
   505cc:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   505d0:	ldr	w0, [x0, #1616]
   505d4:	add	x0, x0, x0, lsl #3
   505d8:	lsl	x0, x0, #1
   505dc:	ldr	w1, [sp, #116]
   505e0:	add	x0, x0, w1, sxtw
   505e4:	add	x0, x0, #0x2
   505e8:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   505ec:	add	x1, x1, #0xb70
   505f0:	ldr	x2, [x1, x0, lsl #3]
   505f4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   505f8:	add	x1, x1, #0x8c8
   505fc:	mov	x0, x21
   50600:	blr	x20
   50604:	ldr	w0, [sp, #128]
   50608:	cbz	w0, 504e8 <aarch64_get_opcode@@Base+0x1ed4>
   5060c:	ldr	w0, [sp, #252]
   50610:	cbnz	w0, 50640 <aarch64_get_opcode@@Base+0x202c>
   50614:	ldr	w2, [sp, #272]
   50618:	b	5062c <aarch64_get_opcode@@Base+0x2018>
   5061c:	ldr	w2, [sp, #284]
   50620:	ldr	w0, [sp, #168]
   50624:	cmp	w0, #0x2
   50628:	b.ne	5060c <aarch64_get_opcode@@Base+0x1ff8>  // b.any
   5062c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50630:	add	x1, x1, #0x908
   50634:	mov	x0, x21
   50638:	blr	x20
   5063c:	b	504e8 <aarch64_get_opcode@@Base+0x1ed4>
   50640:	ldr	w2, [sp, #272]
   50644:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50648:	add	x1, x1, #0x8d0
   5064c:	mov	x0, x21
   50650:	blr	x20
   50654:	b	504e8 <aarch64_get_opcode@@Base+0x1ed4>
   50658:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5065c:	add	x1, x1, #0x4c0
   50660:	mov	x0, x21
   50664:	blr	x20
   50668:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   5066c:	ldr	w3, [sp, #192]
   50670:	ldr	w2, [sp, #188]
   50674:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50678:	add	x1, x1, #0x920
   5067c:	mov	x0, x21
   50680:	blr	x20
   50684:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50688:	ldr	w0, [sp, #124]
   5068c:	cmp	w0, #0xd
   50690:	b.le	50c40 <aarch64_get_opcode@@Base+0x262c>
   50694:	cmp	w0, #0xe
   50698:	b.eq	506c4 <aarch64_get_opcode@@Base+0x20b0>  // b.none
   5069c:	ldr	w0, [sp, #228]
   506a0:	cbz	w0, 50bcc <aarch64_get_opcode@@Base+0x25b8>
   506a4:	mov	w4, #0x1                   	// #1
   506a8:	mov	w3, #0xf                   	// #15
   506ac:	ldr	w2, [sp, #316]
   506b0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   506b4:	add	x1, x1, #0x948
   506b8:	mov	x0, x21
   506bc:	blr	x20
   506c0:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   506c4:	ldr	w0, [sp, #228]
   506c8:	cbnz	w0, 506e8 <aarch64_get_opcode@@Base+0x20d4>
   506cc:	ldr	x2, [sp, #256]
   506d0:	mov	x3, x2
   506d4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   506d8:	add	x1, x1, #0x938
   506dc:	mov	x0, x21
   506e0:	blr	x20
   506e4:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   506e8:	mov	w0, #0x7                   	// #7
   506ec:	mov	x2, #0x0                   	// #0
   506f0:	mov	x3, #0x0                   	// #0
   506f4:	mov	x5, #0xff                  	// #255
   506f8:	mov	x4, #0x0                   	// #0
   506fc:	ldr	w6, [sp, #316]
   50700:	b	5070c <aarch64_get_opcode@@Base+0x20f8>
   50704:	orr	x2, x1, x2, lsl #8
   50708:	sub	w0, w0, #0x1
   5070c:	asr	w1, w6, w0
   50710:	tst	x1, #0x1
   50714:	csel	x1, x5, x4, ne  // ne = any
   50718:	cmp	w0, #0x3
   5071c:	b.gt	50704 <aarch64_get_opcode@@Base+0x20f0>
   50720:	orr	x3, x1, x3, lsl #8
   50724:	cmp	w0, #0x1
   50728:	b.pl	50708 <aarch64_get_opcode@@Base+0x20f4>  // b.nfrst
   5072c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50730:	add	x1, x1, #0x9e8
   50734:	mov	x0, x21
   50738:	blr	x20
   5073c:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50740:	ldr	w0, [sp, #168]
   50744:	cbnz	w0, 50760 <aarch64_get_opcode@@Base+0x214c>
   50748:	ldr	w2, [sp, #196]
   5074c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50750:	add	x1, x1, #0x978
   50754:	mov	x0, x21
   50758:	blr	x20
   5075c:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50760:	ldr	w0, [sp, #212]
   50764:	cmp	w0, #0x1f
   50768:	b.le	50788 <aarch64_get_opcode@@Base+0x2174>
   5076c:	mov	w3, w0
   50770:	ldr	w2, [sp, #196]
   50774:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50778:	add	x1, x1, #0x980
   5077c:	mov	x0, x21
   50780:	blr	x20
   50784:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50788:	ldr	w3, [sp, #212]
   5078c:	ldr	w2, [sp, #196]
   50790:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50794:	add	x1, x1, #0x998
   50798:	mov	x0, x21
   5079c:	blr	x20
   507a0:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   507a4:	cmp	w0, #0x44
   507a8:	b.eq	50938 <aarch64_get_opcode@@Base+0x2324>  // b.none
   507ac:	b.ls	507d8 <aarch64_get_opcode@@Base+0x21c4>  // b.plast
   507b0:	cmp	w0, #0x51
   507b4:	b.ne	509a8 <aarch64_get_opcode@@Base+0x2394>  // b.any
   507b8:	ldr	x2, [sp, #344]
   507bc:	tbz	w2, #0, 50950 <aarch64_get_opcode@@Base+0x233c>
   507c0:	lsr	x2, x2, #1
   507c4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   507c8:	add	x1, x1, #0x9c8
   507cc:	mov	x0, x21
   507d0:	blr	x20
   507d4:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   507d8:	cmp	w0, #0x27
   507dc:	b.eq	50968 <aarch64_get_opcode@@Base+0x2354>  // b.none
   507e0:	cmp	w0, #0x3f
   507e4:	b.ne	509a8 <aarch64_get_opcode@@Base+0x2394>  // b.any
   507e8:	mov	w22, #0x1                   	// #1
   507ec:	ldr	w0, [sp, #336]
   507f0:	lsl	w0, w22, w0
   507f4:	ldr	x1, [sp, #344]
   507f8:	sub	w0, w0, w1
   507fc:	ldrb	w2, [x19, w0, sxtw]
   50800:	mov	x1, x27
   50804:	mov	x0, x21
   50808:	blr	x20
   5080c:	ldr	w0, [sp, #336]
   50810:	lsl	w22, w22, w0
   50814:	add	x19, x19, w22, sxtw
   50818:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   5081c:	cmp	w0, #0x55
   50820:	b.ls	50898 <aarch64_get_opcode@@Base+0x2284>  // b.plast
   50824:	cmp	w0, #0x60
   50828:	b.ne	509a8 <aarch64_get_opcode@@Base+0x2394>  // b.any
   5082c:	add	x22, x19, #0x1
   50830:	ldr	x0, [sp, #344]
   50834:	cbnz	x0, 509ac <aarch64_get_opcode@@Base+0x2398>
   50838:	ldrb	w2, [x19, #1]
   5083c:	mov	x1, x27
   50840:	mov	x0, x21
   50844:	blr	x20
   50848:	mov	x19, x22
   5084c:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50850:	ldr	x2, [sp, #344]
   50854:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50858:	add	x1, x1, #0x800
   5085c:	mov	x0, x21
   50860:	blr	x20
   50864:	ldr	x0, [sp, #344]
   50868:	str	x0, [sp, #216]
   5086c:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50870:	ldr	w1, [sp, #336]
   50874:	mov	x0, #0x1                   	// #1
   50878:	lsl	x0, x0, x1
   5087c:	ldr	x2, [sp, #344]
   50880:	sub	x2, x0, x2
   50884:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50888:	add	x1, x1, #0x800
   5088c:	mov	x0, x21
   50890:	blr	x20
   50894:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50898:	sub	w0, w0, #0x53
   5089c:	mov	w1, #0x8                   	// #8
   508a0:	lsl	w1, w1, w0
   508a4:	add	x22, x19, #0x1
   508a8:	ldrb	w0, [x19, #1]
   508ac:	sub	w2, w0, #0x30
   508b0:	and	w2, w2, #0xff
   508b4:	cmp	w2, #0x9
   508b8:	b.hi	508f8 <aarch64_get_opcode@@Base+0x22e4>  // b.pmore
   508bc:	sub	w0, w0, #0x30
   508c0:	ldr	x2, [sp, #344]
   508c4:	asr	w3, w0, #2
   508c8:	cmp	x3, x2
   508cc:	b.hi	508dc <aarch64_get_opcode@@Base+0x22c8>  // b.pmore
   508d0:	and	x0, x0, #0x3
   508d4:	cmp	x2, x0
   508d8:	b.ls	50914 <aarch64_get_opcode@@Base+0x2300>  // b.plast
   508dc:	lsl	w2, w1, w2
   508e0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   508e4:	add	x1, x1, #0x9a8
   508e8:	mov	x0, x21
   508ec:	blr	x20
   508f0:	mov	x19, x22
   508f4:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   508f8:	sub	w2, w0, #0x61
   508fc:	and	w2, w2, #0xff
   50900:	cmp	w2, #0x5
   50904:	b.hi	50910 <aarch64_get_opcode@@Base+0x22fc>  // b.pmore
   50908:	sub	w0, w0, #0x57
   5090c:	b	508c0 <aarch64_get_opcode@@Base+0x22ac>
   50910:	bl	35670 <abort@plt>
   50914:	lsl	w2, w1, w2
   50918:	adrp	x1, 6b000 <fields@@Base+0xac40>
   5091c:	add	x1, x1, #0x7d0
   50920:	mov	x0, x21
   50924:	blr	x20
   50928:	mov	x19, x22
   5092c:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50930:	ldr	x0, [sp, #304]
   50934:	tbnz	w0, #6, 507b8 <aarch64_get_opcode@@Base+0x21a4>
   50938:	ldr	x2, [sp, #344]
   5093c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50940:	add	x1, x1, #0x9c0
   50944:	mov	x0, x21
   50948:	blr	x20
   5094c:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50950:	lsr	x2, x2, #1
   50954:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50958:	add	x1, x1, #0x9e0
   5095c:	mov	x0, x21
   50960:	blr	x20
   50964:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50968:	add	x22, x19, #0x1
   5096c:	ldr	w1, [sp, #336]
   50970:	mov	x0, #0x1                   	// #1
   50974:	lsl	x0, x0, x1
   50978:	sub	x0, x0, #0x1
   5097c:	ldr	x1, [sp, #344]
   50980:	cmp	x0, x1
   50984:	b.eq	50990 <aarch64_get_opcode@@Base+0x237c>  // b.none
   50988:	mov	x19, x22
   5098c:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50990:	ldrb	w2, [x19, #1]
   50994:	mov	x1, x27
   50998:	mov	x0, x21
   5099c:	blr	x20
   509a0:	mov	x19, x22
   509a4:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   509a8:	bl	35670 <abort@plt>
   509ac:	mov	x19, x22
   509b0:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   509b4:	bl	35670 <abort@plt>
   509b8:	mov	x1, x27
   509bc:	mov	x0, x21
   509c0:	blr	x20
   509c4:	mov	x19, x23
   509c8:	add	x23, x19, #0x1
   509cc:	ldrb	w2, [x19, #1]
   509d0:	cbz	w2, 50a3c <aarch64_get_opcode@@Base+0x2428>
   509d4:	cmp	w2, #0x25
   509d8:	b.ne	509b8 <aarch64_get_opcode@@Base+0x23a4>  // b.any
   509dc:	add	x19, x23, #0x1
   509e0:	ldrb	w0, [x23, #1]
   509e4:	cmp	w0, #0x43
   509e8:	b.eq	50478 <aarch64_get_opcode@@Base+0x1e64>  // b.none
   509ec:	cmp	w0, #0x43
   509f0:	b.ls	4ff84 <aarch64_get_opcode@@Base+0x1970>  // b.plast
   509f4:	cmp	w0, #0x46
   509f8:	b.eq	50740 <aarch64_get_opcode@@Base+0x212c>  // b.none
   509fc:	cmp	w0, #0x46
   50a00:	b.ls	50054 <aarch64_get_opcode@@Base+0x1a40>  // b.plast
   50a04:	cmp	w0, #0x63
   50a08:	b.eq	500a8 <aarch64_get_opcode@@Base+0x1a94>  // b.none
   50a0c:	cmp	w0, #0x75
   50a10:	b.ne	509b4 <aarch64_get_opcode@@Base+0x23a0>  // b.any
   50a14:	ldr	w0, [sp, #120]
   50a18:	cbz	w0, 509c8 <aarch64_get_opcode@@Base+0x23b4>
   50a1c:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   50a20:	ldr	w0, [x0, #1032]
   50a24:	cbz	w0, 509c8 <aarch64_get_opcode@@Base+0x23b4>
   50a28:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   50a2c:	ldr	w1, [x0, #1032]
   50a30:	mov	w0, #0x1                   	// #1
   50a34:	str	w0, [sp, #112]
   50a38:	b	500bc <aarch64_get_opcode@@Base+0x1aa8>
   50a3c:	ldr	x2, [sp, #216]
   50a40:	add	x0, x2, #0x10
   50a44:	cmp	x0, #0x30
   50a48:	b.ls	50a5c <aarch64_get_opcode@@Base+0x2448>  // b.plast
   50a4c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50a50:	add	x1, x1, #0x810
   50a54:	mov	x0, x21
   50a58:	blr	x20
   50a5c:	ldr	w0, [sp, #112]
   50a60:	cbz	w0, 50b08 <aarch64_get_opcode@@Base+0x24f4>
   50a64:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50a68:	add	x1, x1, #0x310
   50a6c:	mov	x0, x21
   50a70:	blr	x20
   50a74:	ldp	x19, x20, [sp, #16]
   50a78:	ldp	x23, x24, [sp, #48]
   50a7c:	ldp	x25, x26, [sp, #64]
   50a80:	ldp	x27, x28, [sp, #80]
   50a84:	b	4fce0 <aarch64_get_opcode@@Base+0x16cc>
   50a88:	str	wzr, [sp, #112]
   50a8c:	b	4fce0 <aarch64_get_opcode@@Base+0x16cc>
   50a90:	mov	w0, #0x1                   	// #1
   50a94:	str	w0, [sp, #112]
   50a98:	ldp	x19, x20, [sp, #16]
   50a9c:	ldp	x23, x24, [sp, #48]
   50aa0:	b	4fce0 <aarch64_get_opcode@@Base+0x16cc>
   50aa4:	str	wzr, [sp, #112]
   50aa8:	ldp	x19, x20, [sp, #16]
   50aac:	ldp	x23, x24, [sp, #48]
   50ab0:	ldp	x25, x26, [sp, #64]
   50ab4:	ldp	x27, x28, [sp, #80]
   50ab8:	b	4fce0 <aarch64_get_opcode@@Base+0x16cc>
   50abc:	ldr	w0, [sp, #224]
   50ac0:	str	w0, [sp, #112]
   50ac4:	ldp	x19, x20, [sp, #16]
   50ac8:	ldp	x23, x24, [sp, #48]
   50acc:	ldp	x25, x26, [sp, #64]
   50ad0:	ldp	x27, x28, [sp, #80]
   50ad4:	b	4fce0 <aarch64_get_opcode@@Base+0x16cc>
   50ad8:	str	wzr, [sp, #112]
   50adc:	ldp	x19, x20, [sp, #16]
   50ae0:	ldp	x23, x24, [sp, #48]
   50ae4:	ldp	x25, x26, [sp, #64]
   50ae8:	ldp	x27, x28, [sp, #80]
   50aec:	b	4fce0 <aarch64_get_opcode@@Base+0x16cc>
   50af0:	str	wzr, [sp, #112]
   50af4:	ldp	x19, x20, [sp, #16]
   50af8:	ldp	x23, x24, [sp, #48]
   50afc:	ldp	x25, x26, [sp, #64]
   50b00:	ldp	x27, x28, [sp, #80]
   50b04:	b	4fce0 <aarch64_get_opcode@@Base+0x16cc>
   50b08:	mov	w0, #0x1                   	// #1
   50b0c:	str	w0, [sp, #112]
   50b10:	ldp	x19, x20, [sp, #16]
   50b14:	ldp	x23, x24, [sp, #48]
   50b18:	ldp	x25, x26, [sp, #64]
   50b1c:	ldp	x27, x28, [sp, #80]
   50b20:	b	4fce0 <aarch64_get_opcode@@Base+0x16cc>
   50b24:	ldr	w0, [sp, #160]
   50b28:	cmp	w0, #0x3
   50b2c:	b.eq	50320 <aarch64_get_opcode@@Base+0x1d0c>  // b.none
   50b30:	b.hi	50348 <aarch64_get_opcode@@Base+0x1d34>  // b.pmore
   50b34:	cmp	w0, #0x2
   50b38:	b.ne	50384 <aarch64_get_opcode@@Base+0x1d70>  // b.any
   50b3c:	mov	w25, #0x2                   	// #2
   50b40:	ldr	w0, [sp, #208]
   50b44:	cmp	w0, #0x2
   50b48:	b.eq	50300 <aarch64_get_opcode@@Base+0x1cec>  // b.none
   50b4c:	ldr	w0, [sp, #128]
   50b50:	cmp	w0, #0x0
   50b54:	ldr	w1, [sp, #280]
   50b58:	csel	w0, w0, w1, eq  // eq = none
   50b5c:	str	w0, [sp, #136]
   50b60:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50b64:	add	x1, x1, #0x7f0
   50b68:	mov	x0, x21
   50b6c:	blr	x20
   50b70:	ldr	w23, [sp, #132]
   50b74:	mov	w22, #0x0                   	// #0
   50b78:	mov	x2, x28
   50b7c:	adrp	x24, 65000 <fields@@Base+0x4c40>
   50b80:	add	x24, x24, #0x8d8
   50b84:	adrp	x26, 59000 <xexit@@Base+0x74c>
   50b88:	add	x26, x26, #0x7a0
   50b8c:	str	x19, [sp, #144]
   50b90:	ldr	w19, [sp, #204]
   50b94:	str	x27, [sp, #152]
   50b98:	ldr	w27, [sp, #200]
   50b9c:	mov	w4, w27
   50ba0:	mov	w3, w23
   50ba4:	mov	x1, x24
   50ba8:	mov	x0, x21
   50bac:	blr	x20
   50bb0:	add	w22, w22, #0x1
   50bb4:	cmp	w19, w22
   50bb8:	b.le	503a8 <aarch64_get_opcode@@Base+0x1d94>
   50bbc:	cmp	w22, #0x0
   50bc0:	csel	x2, x28, x26, eq  // eq = none
   50bc4:	add	w23, w23, w25
   50bc8:	b	50b9c <aarch64_get_opcode@@Base+0x2588>
   50bcc:	ldr	x22, [sp, #320]
   50bd0:	strb	w22, [sp, #336]
   50bd4:	lsr	x0, x22, #8
   50bd8:	strb	w0, [sp, #337]
   50bdc:	lsr	x0, x22, #16
   50be0:	strb	w0, [sp, #338]
   50be4:	lsr	x0, x22, #24
   50be8:	strb	w0, [sp, #339]
   50bec:	add	x2, sp, #0x158
   50bf0:	add	x1, sp, #0x150
   50bf4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   50bf8:	ldr	x0, [x0, #3864]
   50bfc:	bl	358d0 <floatformat_to_double@plt>
   50c00:	mov	x2, x22
   50c04:	ldr	d0, [sp, #344]
   50c08:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50c0c:	add	x1, x1, #0x9f8
   50c10:	mov	x0, x21
   50c14:	blr	x20
   50c18:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50c1c:	ldr	x3, [sp, #240]
   50c20:	orr	x2, x3, #0xffffffff00000000
   50c24:	tst	x3, #0x80000000
   50c28:	csel	x2, x2, x3, ne  // ne = any
   50c2c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50c30:	add	x1, x1, #0x968
   50c34:	mov	x0, x21
   50c38:	blr	x20
   50c3c:	b	509c8 <aarch64_get_opcode@@Base+0x23b4>
   50c40:	ldr	x3, [sp, #296]
   50c44:	b	50c20 <aarch64_get_opcode@@Base+0x260c>
   50c48:	stp	x29, x30, [sp, #-64]!
   50c4c:	mov	x29, sp
   50c50:	stp	x19, x20, [sp, #16]
   50c54:	str	x21, [sp, #32]
   50c58:	lsr	x4, x1, #8
   50c5c:	ubfx	w19, w1, #8, #4
   50c60:	ldr	x20, [x0, #8]
   50c64:	ldr	x21, [x0]
   50c68:	lsr	x2, x1, x2
   50c6c:	ubfiz	w2, w2, #7, #1
   50c70:	lsr	x0, x1, #16
   50c74:	ubfiz	w0, w0, #4, #3
   50c78:	orr	w2, w2, w0
   50c7c:	and	w0, w1, #0xf
   50c80:	orr	w2, w2, w0
   50c84:	tbnz	w4, #3, 50cd0 <aarch64_get_opcode@@Base+0x26bc>
   50c88:	and	w5, w4, #0x8
   50c8c:	sxtw	x2, w2
   50c90:	ubfx	x19, x19, #1, #2
   50c94:	lsl	w19, w19, #3
   50c98:	lsl	x19, x2, x19
   50c9c:	ldr	w0, [x3, #24]
   50ca0:	sub	w1, w0, #0x3d
   50ca4:	cmp	w1, #0xa
   50ca8:	b.hi	50e7c <aarch64_get_opcode@@Base+0x2868>  // b.pmore
   50cac:	mov	x0, #0x1                   	// #1
   50cb0:	lsl	x0, x0, x1
   50cb4:	mov	x1, #0x4a1                 	// #1185
   50cb8:	tst	x0, x1
   50cbc:	b.eq	50e7c <aarch64_get_opcode@@Base+0x2868>  // b.none
   50cc0:	cbnz	w5, 50e80 <aarch64_get_opcode@@Base+0x286c>
   50cc4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50cc8:	add	x1, x1, #0xa18
   50ccc:	b	50e58 <aarch64_get_opcode@@Base+0x2844>
   50cd0:	mov	w0, w2
   50cd4:	cmp	w19, #0xb
   50cd8:	b.gt	50d24 <aarch64_get_opcode@@Base+0x2710>
   50cdc:	sxtw	x2, w2
   50ce0:	ubfx	x19, x19, #1, #1
   50ce4:	lsl	w19, w19, #3
   50ce8:	lsl	x2, x2, x19
   50cec:	ldr	w3, [x3, #24]
   50cf0:	sub	w0, w3, #0x3d
   50cf4:	cmp	w0, #0xa
   50cf8:	b.hi	50e34 <aarch64_get_opcode@@Base+0x2820>  // b.pmore
   50cfc:	mov	x3, #0x1                   	// #1
   50d00:	lsl	x3, x3, x0
   50d04:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50d08:	add	x0, x1, #0x928
   50d0c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50d10:	add	x1, x1, #0xa08
   50d14:	mov	x4, #0x4a1                 	// #1185
   50d18:	tst	x3, x4
   50d1c:	csel	x1, x1, x0, ne  // ne = any
   50d20:	b	50e3c <aarch64_get_opcode@@Base+0x2828>
   50d24:	cmp	w19, #0xd
   50d28:	b.gt	50d58 <aarch64_get_opcode@@Base+0x2744>
   50d2c:	and	w0, w4, #0x1
   50d30:	add	w0, w0, #0x1
   50d34:	lsl	w0, w0, #3
   50d38:	sxtw	x19, w2
   50d3c:	lsl	x19, x19, x0
   50d40:	mov	x1, #0x1                   	// #1
   50d44:	lsl	x0, x1, x0
   50d48:	sub	x0, x0, #0x1
   50d4c:	orr	x19, x0, x19
   50d50:	mov	w5, #0x0                   	// #0
   50d54:	b	50c9c <aarch64_get_opcode@@Base+0x2688>
   50d58:	ubfx	w1, w1, #5, #1
   50d5c:	cmp	w19, #0xe
   50d60:	b.eq	50d98 <aarch64_get_opcode@@Base+0x2784>  // b.none
   50d64:	cbnz	w1, 50e18 <aarch64_get_opcode@@Base+0x2804>
   50d68:	ubfiz	x0, x2, #19, #7
   50d6c:	lsl	w19, w2, #24
   50d70:	and	x19, x19, #0x80000000
   50d74:	orr	x0, x19, x0
   50d78:	tst	x2, #0x40
   50d7c:	mov	w19, #0x3c                  	// #60
   50d80:	mov	w1, #0x40                  	// #64
   50d84:	csel	w19, w19, w1, ne  // ne = any
   50d88:	sbfiz	x19, x19, #24, #32
   50d8c:	orr	x19, x19, x0
   50d90:	mov	w5, #0x1                   	// #1
   50d94:	b	50c9c <aarch64_get_opcode@@Base+0x2688>
   50d98:	cbz	w1, 50df0 <aarch64_get_opcode@@Base+0x27dc>
   50d9c:	mov	w1, #0x7                   	// #7
   50da0:	mov	x2, #0x0                   	// #0
   50da4:	mov	x3, #0x0                   	// #0
   50da8:	mov	x6, #0xff                  	// #255
   50dac:	mov	x5, #0x0                   	// #0
   50db0:	b	50dbc <aarch64_get_opcode@@Base+0x27a8>
   50db4:	orr	x2, x4, x2, lsl #8
   50db8:	sub	w1, w1, #0x1
   50dbc:	asr	w4, w0, w1
   50dc0:	tst	x4, #0x1
   50dc4:	csel	x4, x6, x5, ne  // ne = any
   50dc8:	cmp	w1, #0x3
   50dcc:	b.gt	50db4 <aarch64_get_opcode@@Base+0x27a0>
   50dd0:	orr	x3, x4, x3, lsl #8
   50dd4:	cmp	w1, #0x1
   50dd8:	b.pl	50db8 <aarch64_get_opcode@@Base+0x27a4>  // b.nfrst
   50ddc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50de0:	add	x1, x1, #0x9e8
   50de4:	mov	x0, x20
   50de8:	blr	x21
   50dec:	b	50e08 <aarch64_get_opcode@@Base+0x27f4>
   50df0:	sxtw	x2, w2
   50df4:	mov	x3, x2
   50df8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50dfc:	add	x1, x1, #0x938
   50e00:	mov	x0, x20
   50e04:	blr	x21
   50e08:	ldp	x19, x20, [sp, #16]
   50e0c:	ldr	x21, [sp, #32]
   50e10:	ldp	x29, x30, [sp], #64
   50e14:	ret
   50e18:	mov	w4, #0x1                   	// #1
   50e1c:	mov	w3, #0xf                   	// #15
   50e20:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50e24:	add	x1, x1, #0x948
   50e28:	mov	x0, x20
   50e2c:	blr	x21
   50e30:	b	50e08 <aarch64_get_opcode@@Base+0x27f4>
   50e34:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50e38:	add	x1, x1, #0x928
   50e3c:	mov	x3, x2
   50e40:	mov	x0, x20
   50e44:	blr	x21
   50e48:	b	50e08 <aarch64_get_opcode@@Base+0x27f4>
   50e4c:	tbnz	w19, #31, 50e6c <aarch64_get_opcode@@Base+0x2858>
   50e50:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50e54:	add	x1, x1, #0x968
   50e58:	mov	x2, x19
   50e5c:	mov	x3, x19
   50e60:	mov	x0, x20
   50e64:	blr	x21
   50e68:	b	50e08 <aarch64_get_opcode@@Base+0x27f4>
   50e6c:	orr	x2, x19, #0xffffffff00000000
   50e70:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50e74:	add	x1, x1, #0x968
   50e78:	b	50e5c <aarch64_get_opcode@@Base+0x2848>
   50e7c:	cbz	w5, 50e4c <aarch64_get_opcode@@Base+0x2838>
   50e80:	strb	w19, [sp, #48]
   50e84:	lsr	x0, x19, #8
   50e88:	strb	w0, [sp, #49]
   50e8c:	lsr	x0, x19, #16
   50e90:	strb	w0, [sp, #50]
   50e94:	lsr	x0, x19, #24
   50e98:	strb	w0, [sp, #51]
   50e9c:	add	x2, sp, #0x38
   50ea0:	add	x1, sp, #0x30
   50ea4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   50ea8:	ldr	x0, [x0, #3864]
   50eac:	bl	358d0 <floatformat_to_double@plt>
   50eb0:	mov	x2, x19
   50eb4:	ldr	d0, [sp, #56]
   50eb8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50ebc:	add	x1, x1, #0x9f8
   50ec0:	mov	x0, x20
   50ec4:	blr	x21
   50ec8:	b	50e08 <aarch64_get_opcode@@Base+0x27f4>
   50ecc:	stp	x29, x30, [sp, #-32]!
   50ed0:	mov	x29, sp
   50ed4:	str	x19, [sp, #16]
   50ed8:	adrp	x1, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   50edc:	add	x1, x1, #0x408
   50ee0:	add	x19, x1, #0x8
   50ee4:	mov	w2, #0x1                   	// #1
   50ee8:	str	w2, [x1, #8]
   50eec:	str	w2, [x1, #12]
   50ef0:	bl	4e634 <aarch64_get_opcode@@Base+0x20>
   50ef4:	str	x0, [x19, #8]
   50ef8:	str	xzr, [x19, #16]
   50efc:	cbz	x0, 50f24 <aarch64_get_opcode@@Base+0x2910>
   50f00:	cmp	x0, #0x8
   50f04:	b.eq	50f50 <aarch64_get_opcode@@Base+0x293c>  // b.none
   50f08:	and	x1, x0, #0x7
   50f0c:	cmp	x1, #0x4
   50f10:	b.eq	50f68 <aarch64_get_opcode@@Base+0x2954>  // b.none
   50f14:	and	x1, x0, #0x3
   50f18:	cmp	x1, #0x2
   50f1c:	b.eq	50f70 <aarch64_get_opcode@@Base+0x295c>  // b.none
   50f20:	tbnz	w0, #0, 50f78 <aarch64_get_opcode@@Base+0x2964>
   50f24:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   50f28:	str	xzr, [x0, #1064]
   50f2c:	adrp	x3, 74000 <fields@@Base+0x13c40>
   50f30:	add	x3, x3, #0xba8
   50f34:	add	x3, x3, #0x10
   50f38:	mov	w2, #0x148f                	// #5263
   50f3c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   50f40:	add	x1, x1, #0xa28
   50f44:	adrp	x0, 65000 <fields@@Base+0x4c40>
   50f48:	add	x0, x0, #0xa40
   50f4c:	bl	35ac0 <__assert_fail@plt>
   50f50:	mov	x1, #0x1                   	// #1
   50f54:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   50f58:	str	x1, [x0, #1064]
   50f5c:	ldr	x19, [sp, #16]
   50f60:	ldp	x29, x30, [sp], #32
   50f64:	ret
   50f68:	mov	x1, #0x2                   	// #2
   50f6c:	b	50f54 <aarch64_get_opcode@@Base+0x2940>
   50f70:	mov	x1, #0x3                   	// #3
   50f74:	b	50f54 <aarch64_get_opcode@@Base+0x2940>
   50f78:	mov	x1, #0x4                   	// #4
   50f7c:	b	50f54 <aarch64_get_opcode@@Base+0x2940>
   50f80:	stp	x29, x30, [sp, #-128]!
   50f84:	mov	x29, sp
   50f88:	stp	x19, x20, [sp, #16]
   50f8c:	stp	x21, x22, [sp, #32]
   50f90:	stp	x23, x24, [sp, #48]
   50f94:	stp	x25, x26, [sp, #64]
   50f98:	mov	x22, x0
   50f9c:	mov	x19, x1
   50fa0:	mov	x24, x2
   50fa4:	mov	w0, #0x2                   	// #2
   50fa8:	str	w0, [sp, #124]
   50fac:	ldr	x0, [x1, #48]
   50fb0:	cbz	x0, 50fbc <aarch64_get_opcode@@Base+0x29a8>
   50fb4:	ldr	w0, [x0, #32]
   50fb8:	tbz	w0, #4, 50fc0 <aarch64_get_opcode@@Base+0x29ac>
   50fbc:	str	wzr, [sp, #124]
   50fc0:	ldr	x25, [x19, #96]
   50fc4:	cbz	x25, 5123c <aarch64_get_opcode@@Base+0x2c28>
   50fc8:	ldr	x0, [x19, #72]
   50fcc:	ldr	x0, [x0]
   50fd0:	ldr	w1, [x0, #24]
   50fd4:	mov	w21, #0x0                   	// #0
   50fd8:	tbnz	w1, #21, 511c8 <aarch64_get_opcode@@Base+0x2bb4>
   50fdc:	ldr	x0, [x0]
   50fe0:	ldr	x0, [x0, #8]
   50fe4:	ldr	w0, [x0, #8]
   50fe8:	cmp	w0, #0x5
   50fec:	b.ne	511c8 <aarch64_get_opcode@@Base+0x2bb4>  // b.any
   50ff0:	ldr	w0, [x19, #84]
   50ff4:	cbz	w0, 511a0 <aarch64_get_opcode@@Base+0x2b8c>
   50ff8:	ldr	x0, [x25, #40]
   50ffc:	cmp	x0, x22
   51000:	b.cc	51040 <aarch64_get_opcode@@Base+0x2a2c>  // b.lo, b.ul, b.last
   51004:	mov	w0, #0xffffffff            	// #-1
   51008:	str	w0, [x25, #28]
   5100c:	ldr	w20, [x19, #80]
   51010:	add	w20, w20, #0x1
   51014:	ldr	w0, [x19, #84]
   51018:	str	wzr, [sp, #108]
   5101c:	cmp	w0, w20
   51020:	b.le	51244 <aarch64_get_opcode@@Base+0x2c30>
   51024:	stp	x27, x28, [sp, #80]
   51028:	sbfiz	x23, x20, #3, #32
   5102c:	mov	w21, #0x0                   	// #0
   51030:	mov	w26, #0xffffffff            	// #-1
   51034:	add	x28, sp, #0x7c
   51038:	mov	w27, #0x1                   	// #1
   5103c:	b	510b4 <aarch64_get_opcode@@Base+0x2aa0>
   51040:	ldr	w20, [x19, #80]
   51044:	add	w20, w20, #0x1
   51048:	ldr	w0, [x25, #28]
   5104c:	tbnz	w0, #31, 51014 <aarch64_get_opcode@@Base+0x2a00>
   51050:	ldr	x2, [x19, #240]
   51054:	ldr	x1, [x25, #32]
   51058:	cmp	x2, x1
   5105c:	b.ne	51014 <aarch64_get_opcode@@Base+0x2a00>  // b.any
   51060:	cmp	w20, w0
   51064:	csel	w20, w20, w0, le
   51068:	ldr	w0, [x19, #84]
   5106c:	cmp	w0, w20
   51070:	b.le	51130 <aarch64_get_opcode@@Base+0x2b1c>
   51074:	stp	x27, x28, [sp, #80]
   51078:	mov	w0, #0x1                   	// #1
   5107c:	str	w0, [sp, #108]
   51080:	b	51028 <aarch64_get_opcode@@Base+0x2a14>
   51084:	mov	x2, x28
   51088:	mov	w1, w20
   5108c:	mov	x0, x19
   51090:	bl	4f1e0 <aarch64_get_opcode@@Base+0xbcc>
   51094:	cmp	w0, #0x0
   51098:	csel	w26, w26, w20, eq  // eq = none
   5109c:	csel	w21, w21, w27, eq  // eq = none
   510a0:	add	w20, w20, #0x1
   510a4:	add	x23, x23, #0x8
   510a8:	ldr	w0, [x19, #84]
   510ac:	cmp	w0, w20
   510b0:	b.le	510e8 <aarch64_get_opcode@@Base+0x2ad4>
   510b4:	ldr	x0, [x19, #72]
   510b8:	ldr	x1, [x0, x23]
   510bc:	ldr	x2, [x1, #32]
   510c0:	ldr	x0, [x2, #40]
   510c4:	ldr	x1, [x1, #16]
   510c8:	add	x0, x0, x1
   510cc:	cmp	x22, x0
   510d0:	b.cc	510e8 <aarch64_get_opcode@@Base+0x2ad4>  // b.lo, b.ul, b.last
   510d4:	ldr	x0, [x19, #48]
   510d8:	cmp	x0, #0x0
   510dc:	ccmp	x2, x0, #0x4, ne  // ne = any
   510e0:	b.eq	51084 <aarch64_get_opcode@@Base+0x2a70>  // b.none
   510e4:	b	510a0 <aarch64_get_opcode@@Base+0x2a8c>
   510e8:	cbz	w21, 510f4 <aarch64_get_opcode@@Base+0x2ae0>
   510ec:	ldp	x27, x28, [sp, #80]
   510f0:	b	511b0 <aarch64_get_opcode@@Base+0x2b9c>
   510f4:	ldp	x27, x28, [sp, #80]
   510f8:	ldr	w20, [x19, #80]
   510fc:	ldr	w0, [x25, #28]
   51100:	ldr	w1, [sp, #108]
   51104:	cmp	w1, #0x0
   51108:	ccmp	w0, w20, #0x0, ne  // ne = any
   5110c:	csel	w20, w20, w0, gt
   51110:	ldr	x0, [x19, #48]
   51114:	mov	x22, #0x0                   	// #0
   51118:	cbz	x0, 51120 <aarch64_get_opcode@@Base+0x2b0c>
   5111c:	ldr	x22, [x0, #40]
   51120:	sbfiz	x21, x20, #3, #32
   51124:	add	x23, sp, #0x7c
   51128:	tbz	w20, #31, 51150 <aarch64_get_opcode@@Base+0x2b3c>
   5112c:	b	511a4 <aarch64_get_opcode@@Base+0x2b90>
   51130:	mov	w0, #0x1                   	// #1
   51134:	str	w0, [sp, #108]
   51138:	mov	w26, #0xffffffff            	// #-1
   5113c:	b	510f8 <aarch64_get_opcode@@Base+0x2ae4>
   51140:	sub	w20, w20, #0x1
   51144:	sub	x21, x21, #0x8
   51148:	cmn	w20, #0x1
   5114c:	b.eq	511a4 <aarch64_get_opcode@@Base+0x2b90>  // b.none
   51150:	ldr	x0, [x19, #72]
   51154:	ldr	x1, [x0, x21]
   51158:	ldr	x2, [x1, #32]
   5115c:	ldr	x0, [x2, #40]
   51160:	ldr	x1, [x1, #16]
   51164:	add	x0, x0, x1
   51168:	cmp	x22, x0
   5116c:	b.hi	511a4 <aarch64_get_opcode@@Base+0x2b90>  // b.pmore
   51170:	ldr	x0, [x19, #48]
   51174:	cmp	x0, #0x0
   51178:	ccmp	x2, x0, #0x4, ne  // ne = any
   5117c:	b.ne	51140 <aarch64_get_opcode@@Base+0x2b2c>  // b.any
   51180:	mov	x2, x23
   51184:	mov	w1, w20
   51188:	mov	x0, x19
   5118c:	bl	4f1e0 <aarch64_get_opcode@@Base+0xbcc>
   51190:	cbz	w0, 51140 <aarch64_get_opcode@@Base+0x2b2c>
   51194:	mov	w26, w20
   51198:	mov	w21, #0x1                   	// #1
   5119c:	b	511b0 <aarch64_get_opcode@@Base+0x2b9c>
   511a0:	mov	w26, #0xffffffff            	// #-1
   511a4:	ldr	w0, [x19, #80]
   511a8:	mov	w21, #0x0                   	// #0
   511ac:	tbz	w0, #31, 511e4 <aarch64_get_opcode@@Base+0x2bd0>
   511b0:	str	w26, [x25, #28]
   511b4:	ldr	w0, [sp, #124]
   511b8:	str	w0, [x25, #24]
   511bc:	ldr	x1, [x19, #240]
   511c0:	str	x1, [x25, #32]
   511c4:	str	w0, [x24]
   511c8:	mov	w0, w21
   511cc:	ldp	x19, x20, [sp, #16]
   511d0:	ldp	x21, x22, [sp, #32]
   511d4:	ldp	x23, x24, [sp, #48]
   511d8:	ldp	x25, x26, [sp, #64]
   511dc:	ldp	x29, x30, [sp], #128
   511e0:	ret
   511e4:	ldr	x1, [x19, #48]
   511e8:	cbz	x1, 51200 <aarch64_get_opcode@@Base+0x2bec>
   511ec:	ldr	x2, [x19, #72]
   511f0:	ldr	x2, [x2, w0, sxtw #3]
   511f4:	ldr	x2, [x2, #32]
   511f8:	cmp	x1, x2
   511fc:	b.ne	511b0 <aarch64_get_opcode@@Base+0x2b9c>  // b.any
   51200:	ldr	x1, [x19, #72]
   51204:	ldr	x2, [x1, w0, sxtw #3]
   51208:	ldrb	w1, [x2, #72]
   5120c:	and	w1, w1, #0x7
   51210:	mov	w21, #0x0                   	// #0
   51214:	cmp	w1, #0x2
   51218:	b.ne	511b0 <aarch64_get_opcode@@Base+0x2b9c>  // b.any
   5121c:	ldrb	w1, [x2, #74]
   51220:	and	w1, w1, #0x3
   51224:	cmp	w1, #0x1
   51228:	cset	w1, eq  // eq = none
   5122c:	str	w1, [sp, #124]
   51230:	mov	w26, w0
   51234:	mov	w21, #0x1                   	// #1
   51238:	b	511b0 <aarch64_get_opcode@@Base+0x2b9c>
   5123c:	mov	w21, #0x0                   	// #0
   51240:	b	511c8 <aarch64_get_opcode@@Base+0x2bb4>
   51244:	ldr	w20, [x19, #80]
   51248:	mov	w26, #0xffffffff            	// #-1
   5124c:	b	51110 <aarch64_get_opcode@@Base+0x2afc>
   51250:	stp	x29, x30, [sp, #-144]!
   51254:	mov	x29, sp
   51258:	stp	x19, x20, [sp, #16]
   5125c:	stp	x21, x22, [sp, #32]
   51260:	stp	x23, x24, [sp, #48]
   51264:	stp	x25, x26, [sp, #64]
   51268:	stp	x27, x28, [sp, #80]
   5126c:	mov	x25, x0
   51270:	mov	x19, x1
   51274:	mov	w22, w2
   51278:	strb	wzr, [x1, #196]
   5127c:	strb	wzr, [x1, #197]
   51280:	strb	wzr, [x1, #198]
   51284:	str	wzr, [x1, #200]
   51288:	str	xzr, [x1, #208]
   5128c:	str	xzr, [x1, #216]
   51290:	ldr	x20, [x1, #224]
   51294:	cbz	x20, 51bdc <aarch64_get_opcode@@Base+0x35c8>
   51298:	adrp	x27, 65000 <fields@@Base+0x4c40>
   5129c:	add	x27, x27, #0xa68
   512a0:	adrp	x26, 65000 <fields@@Base+0x4c40>
   512a4:	add	x26, x26, #0xaa0
   512a8:	adrp	x24, 65000 <fields@@Base+0x4c40>
   512ac:	add	x24, x24, #0xab0
   512b0:	b	51348 <aarch64_get_opcode@@Base+0x2d34>
   512b4:	adrp	x21, 8e000 <aarch64_operands@@Base+0x1bc0>
   512b8:	add	x21, x21, #0xb70
   512bc:	mov	w23, #0x0                   	// #0
   512c0:	ldr	x1, [x21]
   512c4:	mov	x0, x20
   512c8:	bl	35970 <disassembler_options_cmp@plt>
   512cc:	cbz	w0, 51304 <aarch64_get_opcode@@Base+0x2cf0>
   512d0:	add	w23, w23, #0x1
   512d4:	add	x21, x21, #0x90
   512d8:	cmp	w23, #0x8
   512dc:	b.ne	512c0 <aarch64_get_opcode@@Base+0x2cac>  // b.any
   512e0:	mov	w2, #0x5                   	// #5
   512e4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   512e8:	add	x1, x1, #0xa78
   512ec:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   512f0:	add	x0, x0, #0x908
   512f4:	bl	359e0 <dcgettext@plt>
   512f8:	mov	x1, x20
   512fc:	bl	35a10 <_bfd_error_handler@plt>
   51300:	b	51334 <aarch64_get_opcode@@Base+0x2d20>
   51304:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   51308:	str	w23, [x0, #1616]
   5130c:	cmp	w23, #0x7
   51310:	b.ls	51334 <aarch64_get_opcode@@Base+0x2d20>  // b.plast
   51314:	b	512e0 <aarch64_get_opcode@@Base+0x2ccc>
   51318:	mov	x2, #0xe                   	// #14
   5131c:	mov	x1, x24
   51320:	mov	x0, x20
   51324:	bl	35440 <strncmp@plt>
   51328:	cbnz	w0, 51380 <aarch64_get_opcode@@Base+0x2d6c>
   5132c:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   51330:	str	wzr, [x0, #1072]
   51334:	mov	w1, #0x2c                  	// #44
   51338:	mov	x0, x20
   5133c:	bl	35840 <strchr@plt>
   51340:	cbz	x0, 51bd8 <aarch64_get_opcode@@Base+0x35c4>
   51344:	add	x20, x0, #0x1
   51348:	mov	x2, #0xa                   	// #10
   5134c:	mov	x1, x27
   51350:	mov	x0, x20
   51354:	bl	35440 <strncmp@plt>
   51358:	cbz	w0, 512b4 <aarch64_get_opcode@@Base+0x2ca0>
   5135c:	mov	x2, #0xb                   	// #11
   51360:	mov	x1, x26
   51364:	mov	x0, x20
   51368:	bl	35440 <strncmp@plt>
   5136c:	cbnz	w0, 51318 <aarch64_get_opcode@@Base+0x2d04>
   51370:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   51374:	mov	w1, #0x1                   	// #1
   51378:	str	w1, [x0, #1072]
   5137c:	b	51334 <aarch64_get_opcode@@Base+0x2d20>
   51380:	mov	w2, #0x5                   	// #5
   51384:	adrp	x1, 59000 <xexit@@Base+0x74c>
   51388:	add	x1, x1, #0x828
   5138c:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   51390:	add	x0, x0, #0x908
   51394:	bl	359e0 <dcgettext@plt>
   51398:	mov	x1, x20
   5139c:	bl	35a10 <_bfd_error_handler@plt>
   513a0:	b	51334 <aarch64_get_opcode@@Base+0x2d20>
   513a4:	ldr	x0, [x19, #88]
   513a8:	tbnz	w0, #29, 513bc <aarch64_get_opcode@@Base+0x2da8>
   513ac:	str	xzr, [x19, #32]
   513b0:	mov	x1, #0xffffffffffcfffff    	// #-3145729
   513b4:	mov	x3, #0xffffffffffffffff    	// #-1
   513b8:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   513bc:	ldr	x1, [x19, #32]
   513c0:	mov	x2, x1
   513c4:	cmp	x1, #0x1b
   513c8:	b.hi	51574 <aarch64_get_opcode@@Base+0x2f60>  // b.pmore
   513cc:	cmp	w1, #0x1b
   513d0:	b.hi	51574 <aarch64_get_opcode@@Base+0x2f60>  // b.pmore
   513d4:	adrp	x0, 74000 <fields@@Base+0x13c40>
   513d8:	add	x0, x0, #0x198
   513dc:	ldrb	w0, [x0, w2, uxtw]
   513e0:	adr	x2, 513ec <aarch64_get_opcode@@Base+0x2dd8>
   513e4:	add	x0, x2, w0, sxtb #2
   513e8:	br	x0
   513ec:	mov	x1, #0x0                   	// #0
   513f0:	mov	x3, #0x7                   	// #7
   513f4:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   513f8:	mov	x1, #0x0                   	// #0
   513fc:	mov	x3, #0x1f                  	// #31
   51400:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   51404:	mov	x1, #0x0                   	// #0
   51408:	mov	x3, #0x3f                  	// #63
   5140c:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   51410:	mov	x1, #0x0                   	// #0
   51414:	mov	x3, #0x7f                  	// #127
   51418:	movk	x3, #0x2000, lsl #16
   5141c:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   51420:	mov	x1, #0x0                   	// #0
   51424:	mov	x3, #0xbf                  	// #191
   51428:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   5142c:	mov	x1, #0x0                   	// #0
   51430:	mov	x3, #0x1ff                 	// #511
   51434:	movk	x3, #0x2000, lsl #16
   51438:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   5143c:	mov	x1, #0x0                   	// #0
   51440:	mov	x3, #0x7ff                 	// #2047
   51444:	movk	x3, #0x2000, lsl #16
   51448:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   5144c:	mov	x1, #0x0                   	// #0
   51450:	mov	x3, #0x7ff                 	// #2047
   51454:	movk	x3, #0x2000, lsl #16
   51458:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   5145c:	mov	x1, #0x0                   	// #0
   51460:	mov	x3, #0x7f                  	// #127
   51464:	movk	x3, #0x2000, lsl #16
   51468:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   5146c:	mov	x1, #0x0                   	// #0
   51470:	mov	x3, #0x7ff                 	// #2047
   51474:	movk	x3, #0x2000, lsl #16
   51478:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   5147c:	mov	x1, #0x0                   	// #0
   51480:	mov	x3, #0x7ff                 	// #2047
   51484:	movk	x3, #0x2000, lsl #16
   51488:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   5148c:	mov	x1, #0x0                   	// #0
   51490:	mov	x3, #0xfff                 	// #4095
   51494:	movk	x3, #0x2000, lsl #16
   51498:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   5149c:	mov	x1, #0x0                   	// #0
   514a0:	mov	x3, #0x1fff                	// #8191
   514a4:	movk	x3, #0x2000, lsl #16
   514a8:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   514ac:	mov	x1, #0x0                   	// #0
   514b0:	mov	x3, #0x3fff                	// #16383
   514b4:	movk	x3, #0x3000, lsl #16
   514b8:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   514bc:	mov	x1, #0x10                  	// #16
   514c0:	mov	x3, #0xbfff                	// #49151
   514c4:	movk	x3, #0x3604, lsl #16
   514c8:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   514cc:	mov	x1, #0x0                   	// #0
   514d0:	mov	x3, #0x3fff                	// #16383
   514d4:	movk	x3, #0x2000, lsl #16
   514d8:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   514dc:	mov	x1, #0x10                  	// #16
   514e0:	mov	x3, #0xbfff                	// #49151
   514e4:	movk	x3, #0xff1d, lsl #16
   514e8:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   514ec:	mov	x1, #0x0                   	// #0
   514f0:	mov	x3, #0x35c0                	// #13760
   514f4:	movk	x3, #0x380, lsl #16
   514f8:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   514fc:	mov	x1, #0x0                   	// #0
   51500:	mov	x3, #0x35c0                	// #13760
   51504:	movk	x3, #0x2380, lsl #16
   51508:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   5150c:	mov	x1, #0x10                  	// #16
   51510:	mov	x3, #0xb7c0                	// #47040
   51514:	movk	x3, #0x27c9, lsl #16
   51518:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   5151c:	mov	x1, #0x7fbb                	// #32699
   51520:	movk	x1, #0xb, lsl #16
   51524:	mov	w3, #0xff1dffff            	// #-14811137
   51528:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   5152c:	mov	w3, #0xff1dffff            	// #-14811137
   51530:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   51534:	mov	x1, #0x1c                  	// #28
   51538:	mov	x3, #0x35c0                	// #13760
   5153c:	movk	x3, #0x2381, lsl #16
   51540:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   51544:	mov	x1, #0x5c                  	// #92
   51548:	mov	x3, #0xb5c0                	// #46528
   5154c:	movk	x3, #0x23c9, lsl #16
   51550:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   51554:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   51558:	mov	w1, #0x1                   	// #1
   5155c:	str	w1, [x0, #1072]
   51560:	mov	x1, #0x807c                	// #32892
   51564:	movk	x1, #0x30, lsl #16
   51568:	mov	x3, #0xb5c0                	// #46528
   5156c:	movk	x3, #0x23c9, lsl #16
   51570:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   51574:	bl	35670 <abort@plt>
   51578:	mov	x1, #0x0                   	// #0
   5157c:	mov	x3, #0x3                   	// #3
   51580:	adrp	x2, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   51584:	add	x2, x2, #0x408
   51588:	add	x0, x2, #0x30
   5158c:	str	x3, [x2, #48]
   51590:	str	x1, [x2, #56]
   51594:	mov	x1, #0xffffffffffffffff    	// #-1
   51598:	str	x1, [x2, #64]
   5159c:	str	w1, [x2, #76]
   515a0:	str	xzr, [x2, #88]
   515a4:	str	xzr, [x2, #80]
   515a8:	str	x0, [x19, #96]
   515ac:	b	51be4 <aarch64_get_opcode@@Base+0x35d0>
   515b0:	mov	x1, #0x0                   	// #0
   515b4:	mov	x3, #0xf                   	// #15
   515b8:	b	51580 <aarch64_get_opcode@@Base+0x2f6c>
   515bc:	ldr	x23, [x19, #96]
   515c0:	str	wzr, [sp, #132]
   515c4:	add	x2, sp, #0x84
   515c8:	mov	x1, x19
   515cc:	mov	x0, x25
   515d0:	bl	50f80 <aarch64_get_opcode@@Base+0x296c>
   515d4:	ldr	w1, [x23, #24]
   515d8:	cmp	w1, #0x1
   515dc:	cset	w21, eq  // eq = none
   515e0:	cmp	w1, #0x2
   515e4:	cset	w2, eq  // eq = none
   515e8:	mov	w24, #0x4                   	// #4
   515ec:	b.ne	51688 <aarch64_get_opcode@@Base+0x3074>  // b.any
   515f0:	mov	w8, w25
   515f4:	and	w1, w25, #0x3
   515f8:	sub	w24, w24, w1
   515fc:	ldr	w1, [x23, #28]
   51600:	add	w1, w1, #0x1
   51604:	ldr	w6, [x19, #84]
   51608:	cmp	w1, w6
   5160c:	b.ge	51664 <aarch64_get_opcode@@Base+0x3050>  // b.tcont
   51610:	ldr	x7, [x19, #72]
   51614:	sxtw	x1, w1
   51618:	b	51628 <aarch64_get_opcode@@Base+0x3014>
   5161c:	add	x1, x1, #0x1
   51620:	cmp	w6, w1
   51624:	b.le	51664 <aarch64_get_opcode@@Base+0x3050>
   51628:	ldr	x4, [x7, x1, lsl #3]
   5162c:	ldr	x5, [x4, #32]
   51630:	ldr	x3, [x5, #40]
   51634:	ldr	x4, [x4, #16]
   51638:	add	x3, x3, x4
   5163c:	cmp	x25, x3
   51640:	b.cs	5161c <aarch64_get_opcode@@Base+0x3008>  // b.hs, b.nlast
   51644:	ldr	x4, [x19, #48]
   51648:	cmp	x4, #0x0
   5164c:	ccmp	x4, x5, #0x4, ne  // ne = any
   51650:	b.ne	5161c <aarch64_get_opcode@@Base+0x3008>  // b.any
   51654:	sub	x1, x3, x25
   51658:	sub	w3, w3, w8
   5165c:	cmp	x1, w24, uxtw
   51660:	csel	w24, w3, w24, cc  // cc = lo, ul, last
   51664:	and	x1, x25, #0x1
   51668:	mov	x3, #0x2                   	// #2
   5166c:	sub	x1, x3, x1
   51670:	cmp	w24, #0x3
   51674:	csel	w24, w1, w24, eq  // eq = none
   51678:	b	51688 <aarch64_get_opcode@@Base+0x3074>
   5167c:	mov	w0, w21
   51680:	mov	w2, w21
   51684:	mov	w24, #0x4                   	// #4
   51688:	ldr	x1, [x19, #56]
   5168c:	cbz	x1, 516c4 <aarch64_get_opcode@@Base+0x30b0>
   51690:	ldr	x1, [x1]
   51694:	ldr	w3, [x1, #24]
   51698:	tbnz	w3, #21, 516c4 <aarch64_get_opcode@@Base+0x30b0>
   5169c:	ldr	x3, [x1]
   516a0:	ldr	x3, [x3, #8]
   516a4:	ldr	w3, [x3, #8]
   516a8:	cmp	w3, #0x2
   516ac:	b.eq	5175c <aarch64_get_opcode@@Base+0x3148>  // b.none
   516b0:	cmp	w0, #0x0
   516b4:	ccmp	w3, #0x5, #0x0, eq  // eq = none
   516b8:	b.eq	5178c <aarch64_get_opcode@@Base+0x3178>  // b.none
   516bc:	cmp	w3, #0x11
   516c0:	b.eq	517ac <aarch64_get_opcode@@Base+0x3198>  // b.none
   516c4:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   516c8:	ldr	w0, [x0, #1072]
   516cc:	cmp	w0, #0x0
   516d0:	csinc	w21, w21, wzr, eq  // eq = none
   516d4:	cbz	w2, 517b8 <aarch64_get_opcode@@Base+0x31a4>
   516d8:	str	w20, [x19, #176]
   516dc:	mov	w0, #0x4                   	// #4
   516e0:	str	w0, [x19, #168]
   516e4:	ldr	x0, [x19, #88]
   516e8:	and	x23, x0, #0x40000000
   516ec:	tbnz	w0, #30, 517c4 <aarch64_get_opcode@@Base+0x31b0>
   516f0:	mov	w20, w24
   516f4:	str	w24, [x19, #172]
   516f8:	ldr	x4, [x19, #104]
   516fc:	mov	x3, x19
   51700:	mov	w2, w24
   51704:	add	x1, sp, #0x88
   51708:	mov	x0, x25
   5170c:	blr	x4
   51710:	str	w0, [sp, #120]
   51714:	cbnz	w22, 51890 <aarch64_get_opcode@@Base+0x327c>
   51718:	add	x0, sp, #0x88
   5171c:	cmp	w24, #0x0
   51720:	b.le	51880 <aarch64_get_opcode@@Base+0x326c>
   51724:	ldrb	w1, [x0], #1
   51728:	orr	x23, x1, x23, lsl #8
   5172c:	add	w22, w22, #0x1
   51730:	cmp	w20, w22
   51734:	b.ne	51724 <aarch64_get_opcode@@Base+0x3110>  // b.any
   51738:	adrp	x0, 4f000 <aarch64_get_opcode@@Base+0x9ec>
   5173c:	add	x0, x0, #0xb88
   51740:	str	x0, [sp, #96]
   51744:	b	5181c <aarch64_get_opcode@@Base+0x3208>
   51748:	mov	w0, #0x0                   	// #0
   5174c:	mov	w24, #0x4                   	// #4
   51750:	mov	w2, #0x0                   	// #0
   51754:	mov	w21, #0x0                   	// #0
   51758:	b	51688 <aarch64_get_opcode@@Base+0x3074>
   5175c:	ldr	x0, [x1, #48]
   51760:	ldrb	w0, [x0, #40]
   51764:	add	w3, w0, #0x7e
   51768:	and	w3, w3, #0xff
   5176c:	add	w1, w0, #0x6a
   51770:	and	w1, w1, #0xff
   51774:	cmp	w3, #0x1
   51778:	ccmp	w1, #0x1, #0x0, hi  // hi = pmore
   5177c:	mov	w1, #0x86                  	// #134
   51780:	ccmp	w0, w1, #0x4, hi  // hi = pmore
   51784:	cset	w21, eq  // eq = none
   51788:	b	516c4 <aarch64_get_opcode@@Base+0x30b0>
   5178c:	ldrb	w3, [x1, #72]
   51790:	and	w3, w3, #0xf
   51794:	ldrb	w0, [x1, #74]
   51798:	and	w0, w0, #0x3
   5179c:	cmp	w3, #0xf
   517a0:	ccmp	w0, #0x1, #0x4, ne  // ne = any
   517a4:	cset	w21, eq  // eq = none
   517a8:	b	516c4 <aarch64_get_opcode@@Base+0x30b0>
   517ac:	ldrh	w21, [x1, #50]
   517b0:	and	w21, w21, #0x8
   517b4:	b	516c4 <aarch64_get_opcode@@Base+0x30b0>
   517b8:	str	w28, [x19, #176]
   517bc:	mov	w0, #0x4                   	// #4
   517c0:	str	w0, [x19, #168]
   517c4:	cbnz	w21, 518f4 <aarch64_get_opcode@@Base+0x32e0>
   517c8:	mov	w2, #0x4                   	// #4
   517cc:	str	w2, [x19, #172]
   517d0:	ldr	x4, [x19, #104]
   517d4:	mov	x3, x19
   517d8:	add	x1, sp, #0x88
   517dc:	mov	x0, x25
   517e0:	blr	x4
   517e4:	str	w0, [sp, #120]
   517e8:	cbz	w28, 518c0 <aarch64_get_opcode@@Base+0x32ac>
   517ec:	ldrb	w23, [sp, #137]
   517f0:	ldrb	w0, [sp, #138]
   517f4:	lsl	w0, w0, #16
   517f8:	orr	w23, w0, w23, lsl #8
   517fc:	ldrb	w0, [sp, #136]
   51800:	orr	w0, w23, w0
   51804:	ldrb	w23, [sp, #139]
   51808:	orr	w23, w0, w23, lsl #24
   5180c:	adrp	x0, 54000 <aarch64_get_opcode@@Base+0x59ec>
   51810:	add	x0, x0, #0x448
   51814:	str	x0, [sp, #96]
   51818:	mov	w24, #0x4                   	// #4
   5181c:	ldr	w0, [sp, #120]
   51820:	cbnz	w0, 51bbc <aarch64_get_opcode@@Base+0x35a8>
   51824:	ldr	x0, [x19, #88]
   51828:	tst	x0, #0x80000000
   5182c:	mov	x2, x23
   51830:	mov	x1, x19
   51834:	csel	x0, x25, xzr, eq  // eq = none
   51838:	ldr	x3, [sp, #96]
   5183c:	blr	x3
   51840:	cbz	w21, 51860 <aarch64_get_opcode@@Base+0x324c>
   51844:	adrp	x1, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   51848:	add	x0, x1, #0x408
   5184c:	ldr	w2, [x0, #4]
   51850:	str	w2, [x1, #1032]
   51854:	ldr	x1, [x0, #96]
   51858:	add	x1, x1, w24, uxtw
   5185c:	str	x1, [x0, #96]
   51860:	mov	w0, w24
   51864:	ldp	x19, x20, [sp, #16]
   51868:	ldp	x21, x22, [sp, #32]
   5186c:	ldp	x23, x24, [sp, #48]
   51870:	ldp	x25, x26, [sp, #64]
   51874:	ldp	x27, x28, [sp, #80]
   51878:	ldp	x29, x30, [sp], #144
   5187c:	ret
   51880:	adrp	x0, 4f000 <aarch64_get_opcode@@Base+0x9ec>
   51884:	add	x0, x0, #0xb88
   51888:	str	x0, [sp, #96]
   5188c:	b	5181c <aarch64_get_opcode@@Base+0x3208>
   51890:	subs	w0, w24, #0x1
   51894:	b.mi	51bac <aarch64_get_opcode@@Base+0x3598>  // b.first
   51898:	add	x1, sp, #0x88
   5189c:	add	x1, x1, w0, sxtw
   518a0:	ldrb	w2, [x1], #-1
   518a4:	orr	x23, x2, x23, lsl #8
   518a8:	subs	w0, w0, #0x1
   518ac:	b.pl	518a0 <aarch64_get_opcode@@Base+0x328c>  // b.nfrst
   518b0:	adrp	x0, 4f000 <aarch64_get_opcode@@Base+0x9ec>
   518b4:	add	x0, x0, #0xb88
   518b8:	str	x0, [sp, #96]
   518bc:	b	5181c <aarch64_get_opcode@@Base+0x3208>
   518c0:	ldrb	w23, [sp, #138]
   518c4:	ldrb	w0, [sp, #137]
   518c8:	lsl	w0, w0, #16
   518cc:	orr	w23, w0, w23, lsl #8
   518d0:	ldrb	w0, [sp, #139]
   518d4:	orr	w0, w23, w0
   518d8:	ldrb	w23, [sp, #136]
   518dc:	orr	w23, w0, w23, lsl #24
   518e0:	adrp	x0, 54000 <aarch64_get_opcode@@Base+0x59ec>
   518e4:	add	x0, x0, #0x448
   518e8:	str	x0, [sp, #96]
   518ec:	mov	w24, #0x4                   	// #4
   518f0:	b	5181c <aarch64_get_opcode@@Base+0x3208>
   518f4:	mov	w2, #0x2                   	// #2
   518f8:	str	w2, [x19, #172]
   518fc:	ldr	x4, [x19, #104]
   51900:	mov	x3, x19
   51904:	add	x1, sp, #0x88
   51908:	mov	x0, x25
   5190c:	blr	x4
   51910:	str	w0, [sp, #120]
   51914:	cbz	w28, 51990 <aarch64_get_opcode@@Base+0x337c>
   51918:	ldrb	w23, [sp, #137]
   5191c:	ldrb	w0, [sp, #136]
   51920:	orr	w23, w0, w23, lsl #8
   51924:	sxtw	x23, w23
   51928:	ldr	w0, [sp, #120]
   5192c:	cbnz	w0, 519cc <aarch64_get_opcode@@Base+0x33b8>
   51930:	and	x0, x23, #0xf800
   51934:	mov	x1, #0xe800                	// #59392
   51938:	and	x2, x23, x1
   5193c:	cmp	x0, #0xf, lsl #12
   51940:	ccmp	x2, x1, #0x4, ne  // ne = any
   51944:	b.ne	51a1c <aarch64_get_opcode@@Base+0x3408>  // b.any
   51948:	ldr	x4, [x19, #104]
   5194c:	mov	x3, x19
   51950:	mov	w2, #0x2                   	// #2
   51954:	add	x1, sp, #0x88
   51958:	add	x0, x25, #0x2
   5195c:	blr	x4
   51960:	str	w0, [sp, #120]
   51964:	cbz	w28, 519a4 <aarch64_get_opcode@@Base+0x3390>
   51968:	ldrb	w0, [sp, #137]
   5196c:	ldrb	w1, [sp, #136]
   51970:	orr	w0, w1, w0, lsl #8
   51974:	sxtw	x0, w0
   51978:	orr	x23, x0, x23, lsl #16
   5197c:	adrp	x0, 55000 <aarch64_get_opcode@@Base+0x69ec>
   51980:	add	x0, x0, #0x544
   51984:	str	x0, [sp, #96]
   51988:	mov	w24, #0x4                   	// #4
   5198c:	b	519dc <aarch64_get_opcode@@Base+0x33c8>
   51990:	ldrb	w23, [sp, #136]
   51994:	ldrb	w0, [sp, #137]
   51998:	orr	w23, w0, w23, lsl #8
   5199c:	sxtw	x23, w23
   519a0:	b	51928 <aarch64_get_opcode@@Base+0x3314>
   519a4:	ldrb	w0, [sp, #136]
   519a8:	ldrb	w1, [sp, #137]
   519ac:	orr	w0, w1, w0, lsl #8
   519b0:	sxtw	x0, w0
   519b4:	orr	x23, x0, x23, lsl #16
   519b8:	adrp	x0, 55000 <aarch64_get_opcode@@Base+0x69ec>
   519bc:	add	x0, x0, #0x544
   519c0:	str	x0, [sp, #96]
   519c4:	mov	w24, #0x4                   	// #4
   519c8:	b	519dc <aarch64_get_opcode@@Base+0x33c8>
   519cc:	adrp	x0, 4f000 <aarch64_get_opcode@@Base+0x9ec>
   519d0:	add	x0, x0, #0x350
   519d4:	str	x0, [sp, #96]
   519d8:	mov	w24, #0x2                   	// #2
   519dc:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   519e0:	ldr	x0, [x0, #1128]
   519e4:	cmp	x0, x25
   519e8:	b.ne	51a30 <aarch64_get_opcode@@Base+0x341c>  // b.any
   519ec:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   519f0:	ldr	w0, [x0, #1032]
   519f4:	cbz	w0, 5181c <aarch64_get_opcode@@Base+0x3208>
   519f8:	and	w1, w0, #0xf
   519fc:	cmp	w1, #0x8
   51a00:	b.eq	51ba0 <aarch64_get_opcode@@Base+0x358c>  // b.none
   51a04:	ubfiz	w1, w0, #1, #4
   51a08:	and	w0, w0, #0xe0
   51a0c:	orr	w0, w1, w0
   51a10:	adrp	x1, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   51a14:	str	w0, [x1, #1036]
   51a18:	b	5181c <aarch64_get_opcode@@Base+0x3208>
   51a1c:	adrp	x0, 4f000 <aarch64_get_opcode@@Base+0x9ec>
   51a20:	add	x0, x0, #0x350
   51a24:	str	x0, [sp, #96]
   51a28:	mov	w24, #0x2                   	// #2
   51a2c:	b	519dc <aarch64_get_opcode@@Base+0x33c8>
   51a30:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   51a34:	add	x1, x0, #0x408
   51a38:	str	x25, [x1, #96]
   51a3c:	str	wzr, [x0, #1032]
   51a40:	mov	x26, x25
   51a44:	mov	w27, #0x0                   	// #0
   51a48:	str	wzr, [sp, #124]
   51a4c:	mov	w22, #0x1                   	// #1
   51a50:	add	x0, sp, #0x80
   51a54:	str	x0, [sp, #104]
   51a58:	add	x0, sp, #0x84
   51a5c:	str	x0, [sp, #112]
   51a60:	b	51ad4 <aarch64_get_opcode@@Base+0x34c0>
   51a64:	cbz	w27, 519ec <aarch64_get_opcode@@Base+0x33d8>
   51a68:	tbz	w22, #0, 519ec <aarch64_get_opcode@@Base+0x33d8>
   51a6c:	ldrb	w0, [sp, #124]
   51a70:	lsl	w0, w27, w0
   51a74:	and	w0, w0, #0x1f
   51a78:	and	w27, w27, #0xe0
   51a7c:	orr	w27, w0, w27
   51a80:	tst	x0, #0xf
   51a84:	b.eq	51b94 <aarch64_get_opcode@@Base+0x3580>  // b.none
   51a88:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   51a8c:	str	w27, [x0, #1032]
   51a90:	b	519ec <aarch64_get_opcode@@Base+0x33d8>
   51a94:	ldrb	w20, [sp, #128]
   51a98:	ldrb	w0, [sp, #129]
   51a9c:	orr	w20, w0, w20, lsl #8
   51aa0:	b	51b1c <aarch64_get_opcode@@Base+0x3508>
   51aa4:	and	w0, w20, #0xff00
   51aa8:	mov	w1, #0xbf00                	// #48896
   51aac:	cmp	w0, w1
   51ab0:	b.eq	51b54 <aarch64_get_opcode@@Base+0x3540>  // b.none
   51ab4:	and	w20, w20, #0xf800
   51ab8:	mov	w0, #0xe7ff                	// #59391
   51abc:	cmp	w20, w0
   51ac0:	b.ls	51b48 <aarch64_get_opcode@@Base+0x3534>  // b.plast
   51ac4:	add	w22, w22, #0x1
   51ac8:	cmp	w27, #0x0
   51acc:	ccmp	w22, #0x7, #0x4, eq  // eq = none
   51ad0:	b.gt	519ec <aarch64_get_opcode@@Base+0x33d8>
   51ad4:	cbz	x26, 51a64 <aarch64_get_opcode@@Base+0x3450>
   51ad8:	ldr	x2, [x19, #128]
   51adc:	mov	x1, x19
   51ae0:	mov	x0, x26
   51ae4:	blr	x2
   51ae8:	cbnz	w0, 51a64 <aarch64_get_opcode@@Base+0x3450>
   51aec:	sub	x26, x26, #0x2
   51af0:	ldr	x4, [x19, #104]
   51af4:	mov	x3, x19
   51af8:	mov	w2, #0x2                   	// #2
   51afc:	ldr	x1, [sp, #104]
   51b00:	mov	x0, x26
   51b04:	blr	x4
   51b08:	cbnz	w0, 519ec <aarch64_get_opcode@@Base+0x33d8>
   51b0c:	cbz	w28, 51a94 <aarch64_get_opcode@@Base+0x3480>
   51b10:	ldrb	w20, [sp, #129]
   51b14:	ldrb	w0, [sp, #128]
   51b18:	orr	w20, w0, w20, lsl #8
   51b1c:	cbz	w27, 51aa4 <aarch64_get_opcode@@Base+0x3490>
   51b20:	and	w0, w20, #0xf800
   51b24:	mov	w1, #0xe7ff                	// #59391
   51b28:	cmp	w0, w1
   51b2c:	b.hi	51ac4 <aarch64_get_opcode@@Base+0x34b0>  // b.pmore
   51b30:	tbnz	w22, #0, 51a6c <aarch64_get_opcode@@Base+0x3458>
   51b34:	and	w0, w20, #0xff00
   51b38:	mov	w1, #0xbf00                	// #48896
   51b3c:	mov	w27, #0x0                   	// #0
   51b40:	cmp	w0, w1
   51b44:	b.eq	51c38 <aarch64_get_opcode@@Base+0x3624>  // b.none
   51b48:	add	w22, w22, #0x2
   51b4c:	orr	w22, w22, #0x1
   51b50:	b	51ac8 <aarch64_get_opcode@@Base+0x34b4>
   51b54:	ands	w27, w20, #0xf
   51b58:	b.eq	51ab4 <aarch64_get_opcode@@Base+0x34a0>  // b.none
   51b5c:	str	wzr, [sp, #132]
   51b60:	ldr	x2, [sp, #112]
   51b64:	mov	x1, x19
   51b68:	mov	x0, x26
   51b6c:	bl	50f80 <aarch64_get_opcode@@Base+0x296c>
   51b70:	cbz	w0, 51b84 <aarch64_get_opcode@@Base+0x3570>
   51b74:	mov	w27, #0x0                   	// #0
   51b78:	ldr	w0, [sp, #132]
   51b7c:	cmp	w0, #0x1
   51b80:	b.ne	51ab4 <aarch64_get_opcode@@Base+0x34a0>  // b.any
   51b84:	asr	w0, w22, #1
   51b88:	str	w0, [sp, #124]
   51b8c:	mov	w27, w20
   51b90:	b	51ab4 <aarch64_get_opcode@@Base+0x34a0>
   51b94:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   51b98:	str	wzr, [x0, #1032]
   51b9c:	b	519ec <aarch64_get_opcode@@Base+0x33d8>
   51ba0:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   51ba4:	str	wzr, [x0, #1036]
   51ba8:	b	5181c <aarch64_get_opcode@@Base+0x3208>
   51bac:	adrp	x0, 4f000 <aarch64_get_opcode@@Base+0x9ec>
   51bb0:	add	x0, x0, #0xb88
   51bb4:	str	x0, [sp, #96]
   51bb8:	b	5181c <aarch64_get_opcode@@Base+0x3208>
   51bbc:	ldr	x3, [x19, #112]
   51bc0:	mov	x2, x19
   51bc4:	mov	x1, x25
   51bc8:	ldr	w0, [sp, #120]
   51bcc:	blr	x3
   51bd0:	mov	w0, #0xffffffff            	// #-1
   51bd4:	b	51864 <aarch64_get_opcode@@Base+0x3250>
   51bd8:	str	xzr, [x19, #224]
   51bdc:	ldr	x0, [x19, #96]
   51be0:	cbz	x0, 513a4 <aarch64_get_opcode@@Base+0x2d90>
   51be4:	cmp	w22, #0x0
   51be8:	cset	w20, ne  // ne = any
   51bec:	ldr	w0, [x19, #44]
   51bf0:	cmp	w0, #0x1
   51bf4:	csinc	w28, w20, wzr, ne  // ne = any
   51bf8:	ldr	w21, [x19, #84]
   51bfc:	cbz	w21, 5167c <aarch64_get_opcode@@Base+0x3068>
   51c00:	ldr	x0, [x19, #72]
   51c04:	ldr	x0, [x0]
   51c08:	ldr	w1, [x0, #24]
   51c0c:	tbnz	w1, #21, 51748 <aarch64_get_opcode@@Base+0x3134>
   51c10:	ldr	x0, [x0]
   51c14:	ldr	x0, [x0, #8]
   51c18:	ldr	w0, [x0, #8]
   51c1c:	cmp	w0, #0x5
   51c20:	b.eq	515bc <aarch64_get_opcode@@Base+0x2fa8>  // b.none
   51c24:	mov	w0, #0x0                   	// #0
   51c28:	mov	w24, #0x4                   	// #4
   51c2c:	mov	w2, #0x0                   	// #0
   51c30:	mov	w21, #0x0                   	// #0
   51c34:	b	51688 <aarch64_get_opcode@@Base+0x3074>
   51c38:	ands	w27, w20, #0xf
   51c3c:	b.eq	51b48 <aarch64_get_opcode@@Base+0x3534>  // b.none
   51c40:	b	51b5c <aarch64_get_opcode@@Base+0x3548>
   51c44:	stp	x29, x30, [sp, #-16]!
   51c48:	mov	x29, sp
   51c4c:	sub	w2, w2, w1
   51c50:	subs	w4, w4, w3
   51c54:	b.mi	51c94 <aarch64_get_opcode@@Base+0x3680>  // b.first
   51c58:	tbnz	w2, #31, 51c98 <aarch64_get_opcode@@Base+0x3684>
   51c5c:	mov	x5, #0x2                   	// #2
   51c60:	lsl	x4, x5, x4
   51c64:	sub	x4, x4, #0x1
   51c68:	lsr	x3, x0, x3
   51c6c:	and	x3, x4, x3
   51c70:	add	w4, w2, #0x1
   51c74:	lsl	x3, x3, x4
   51c78:	lsl	x5, x5, x2
   51c7c:	sub	x5, x5, #0x1
   51c80:	lsr	x0, x0, x1
   51c84:	and	x0, x5, x0
   51c88:	orr	x0, x3, x0
   51c8c:	ldp	x29, x30, [sp], #16
   51c90:	ret
   51c94:	bl	35670 <abort@plt>
   51c98:	bl	35670 <abort@plt>
   51c9c:	cmp	w1, #0xdb
   51ca0:	b.hi	51f94 <aarch64_get_opcode@@Base+0x3980>  // b.pmore
   51ca4:	stp	x29, x30, [sp, #-32]!
   51ca8:	mov	x29, sp
   51cac:	str	x19, [sp, #16]
   51cb0:	mov	x19, x0
   51cb4:	adrp	x0, 74000 <fields@@Base+0x13c40>
   51cb8:	add	x0, x0, #0x1b4
   51cbc:	ldrh	w0, [x0, w1, uxtw #1]
   51cc0:	adr	x2, 51ccc <aarch64_get_opcode@@Base+0x36b8>
   51cc4:	add	x0, x2, w0, sxth #2
   51cc8:	br	x0
   51ccc:	mov	w4, #0x16                  	// #22
   51cd0:	mov	w3, w4
   51cd4:	mov	w2, #0xf                   	// #15
   51cd8:	mov	w1, #0xd                   	// #13
   51cdc:	mov	x0, x19
   51ce0:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   51ce4:	cmp	x0, #0x0
   51ce8:	cset	w0, eq  // eq = none
   51cec:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51cf0:	mov	w4, #0x16                  	// #22
   51cf4:	mov	w3, w4
   51cf8:	mov	w2, #0xf                   	// #15
   51cfc:	mov	w1, #0xd                   	// #13
   51d00:	mov	x0, x19
   51d04:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   51d08:	mov	x1, x0
   51d0c:	mov	w0, #0x1                   	// #1
   51d10:	cbz	x1, 51f80 <aarch64_get_opcode@@Base+0x396c>
   51d14:	and	w0, w19, w0
   51d18:	tst	x19, #0x1000
   51d1c:	csel	w0, w0, wzr, eq  // eq = none
   51d20:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51d24:	mov	w4, #0x16                  	// #22
   51d28:	mov	w3, w4
   51d2c:	mov	w2, #0xf                   	// #15
   51d30:	mov	w1, #0xd                   	// #13
   51d34:	mov	x0, x19
   51d38:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   51d3c:	mov	x1, x0
   51d40:	mov	w0, #0x1                   	// #1
   51d44:	cbz	x1, 51f80 <aarch64_get_opcode@@Base+0x396c>
   51d48:	and	x19, x19, #0xf
   51d4c:	cmp	x19, #0xd
   51d50:	cset	w0, eq  // eq = none
   51d54:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51d58:	mov	w4, #0x16                  	// #22
   51d5c:	mov	w3, w4
   51d60:	mov	w2, #0xf                   	// #15
   51d64:	mov	w1, #0xd                   	// #13
   51d68:	mov	x0, x19
   51d6c:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   51d70:	mov	x1, x0
   51d74:	mov	w0, #0x1                   	// #1
   51d78:	cbz	x1, 51f80 <aarch64_get_opcode@@Base+0x396c>
   51d7c:	ubfx	x19, x19, #20, #2
   51d80:	cmp	x19, #0x3
   51d84:	cset	w0, eq  // eq = none
   51d88:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51d8c:	and	x0, x19, #0x1
   51d90:	tst	x19, #0x1000
   51d94:	csel	w0, w0, wzr, eq  // eq = none
   51d98:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51d9c:	and	x19, x19, #0xf
   51da0:	cmp	x19, #0xd
   51da4:	cset	w0, eq  // eq = none
   51da8:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51dac:	ubfx	x19, x19, #20, #2
   51db0:	cmp	x19, #0x3
   51db4:	cset	w0, eq  // eq = none
   51db8:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51dbc:	ubfx	x19, x19, #7, #2
   51dc0:	cmp	x19, #0x3
   51dc4:	cset	w0, eq  // eq = none
   51dc8:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51dcc:	lsr	x0, x19, #21
   51dd0:	orr	x0, x0, x19, lsr #24
   51dd4:	tbz	w0, #0, 51f8c <aarch64_get_opcode@@Base+0x3978>
   51dd8:	ubfx	x19, x19, #7, #2
   51ddc:	cmp	x19, #0x3
   51de0:	cset	w0, eq  // eq = none
   51de4:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51de8:	lsr	x0, x19, #21
   51dec:	orr	x0, x0, x19, lsr #24
   51df0:	eor	x0, x0, #0x1
   51df4:	and	w0, w0, #0x1
   51df8:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51dfc:	lsr	x19, x19, #16
   51e00:	tst	x19, #0x38
   51e04:	cset	w0, eq  // eq = none
   51e08:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51e0c:	lsr	x1, x19, #8
   51e10:	mov	w0, #0x1                   	// #1
   51e14:	tbz	w19, #8, 51f80 <aarch64_get_opcode@@Base+0x396c>
   51e18:	and	x1, x1, #0xc
   51e1c:	cmp	x1, #0xc
   51e20:	cset	w0, eq  // eq = none
   51e24:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51e28:	lsr	x1, x19, #8
   51e2c:	ubfx	x19, x19, #8, #4
   51e30:	mov	w0, #0x1                   	// #1
   51e34:	cmp	x19, #0xe
   51e38:	b.eq	51f80 <aarch64_get_opcode@@Base+0x396c>  // b.none
   51e3c:	mov	x2, #0x9                   	// #9
   51e40:	and	x2, x1, x2
   51e44:	cmp	x2, #0x1
   51e48:	b.eq	51f80 <aarch64_get_opcode@@Base+0x396c>  // b.none
   51e4c:	mov	x0, #0xd                   	// #13
   51e50:	and	x1, x1, x0
   51e54:	cmp	x1, #0x9
   51e58:	cset	w0, eq  // eq = none
   51e5c:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51e60:	mov	w0, #0x0                   	// #0
   51e64:	tbz	w19, #5, 51f80 <aarch64_get_opcode@@Base+0x396c>
   51e68:	ubfx	x19, x19, #8, #4
   51e6c:	cmp	x19, #0xe
   51e70:	cset	w0, ne  // ne = any
   51e74:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51e78:	ubfx	x0, x19, #19, #2
   51e7c:	tst	x19, #0x180000
   51e80:	ccmp	x0, #0x3, #0x4, ne  // ne = any
   51e84:	cset	w0, eq  // eq = none
   51e88:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51e8c:	ubfx	x19, x19, #18, #2
   51e90:	cmp	x19, #0x3
   51e94:	cset	w0, eq  // eq = none
   51e98:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51e9c:	ubfx	x19, x19, #20, #3
   51ea0:	cmp	x19, #0x7
   51ea4:	cset	w0, eq  // eq = none
   51ea8:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51eac:	lsr	x19, x19, #20
   51eb0:	and	x19, x19, #0x6
   51eb4:	cmp	x19, #0x6
   51eb8:	cset	w0, eq  // eq = none
   51ebc:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51ec0:	ubfx	x1, x19, #20, #2
   51ec4:	mov	w0, #0x1                   	// #1
   51ec8:	cmp	x1, #0x3
   51ecc:	b.eq	51f80 <aarch64_get_opcode@@Base+0x396c>  // b.none
   51ed0:	ubfx	x19, x19, #1, #3
   51ed4:	cmp	x19, #0x7
   51ed8:	cset	w0, eq  // eq = none
   51edc:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51ee0:	mov	w0, #0x0                   	// #0
   51ee4:	tst	x19, #0x70000
   51ee8:	b.ne	51f80 <aarch64_get_opcode@@Base+0x396c>  // b.any
   51eec:	ubfx	x0, x19, #19, #2
   51ef0:	sub	x0, x0, #0x1
   51ef4:	cmp	x0, #0x1
   51ef8:	cset	w0, ls  // ls = plast
   51efc:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51f00:	tst	x19, #0x380000
   51f04:	cset	w0, eq  // eq = none
   51f08:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51f0c:	ubfx	x19, x19, #16, #4
   51f10:	cmp	x19, #0xf
   51f14:	cset	w0, eq  // eq = none
   51f18:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51f1c:	ubfx	x19, x19, #9, #3
   51f20:	cmp	x19, #0x7
   51f24:	cset	w0, eq  // eq = none
   51f28:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51f2c:	and	x3, x19, #0xf
   51f30:	ubfx	x2, x19, #16, #4
   51f34:	cmp	x3, #0xf
   51f38:	mov	w0, #0x1                   	// #1
   51f3c:	ccmp	x2, #0xf, #0x0, eq  // eq = none
   51f40:	b.eq	51f80 <aarch64_get_opcode@@Base+0x396c>  // b.none
   51f44:	cmp	x2, x3
   51f48:	ccmp	x2, #0xf, #0x4, eq  // eq = none
   51f4c:	b.ne	51f80 <aarch64_get_opcode@@Base+0x396c>  // b.any
   51f50:	and	x2, x19, #0xf
   51f54:	mov	w0, #0x1                   	// #1
   51f58:	cmp	x2, #0xd
   51f5c:	b.eq	51f80 <aarch64_get_opcode@@Base+0x396c>  // b.none
   51f60:	mov	w0, #0x0                   	// #0
   51f64:	cmp	w1, #0xda
   51f68:	b.ne	51f80 <aarch64_get_opcode@@Base+0x396c>  // b.any
   51f6c:	ubfx	x19, x19, #16, #4
   51f70:	cmp	x19, x2
   51f74:	cset	w0, eq  // eq = none
   51f78:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51f7c:	mov	w0, #0x0                   	// #0
   51f80:	ldr	x19, [sp, #16]
   51f84:	ldp	x29, x30, [sp], #32
   51f88:	ret
   51f8c:	mov	w0, #0x1                   	// #1
   51f90:	b	51f80 <aarch64_get_opcode@@Base+0x396c>
   51f94:	mov	w0, #0x0                   	// #0
   51f98:	ret
   51f9c:	stp	x29, x30, [sp, #-48]!
   51fa0:	mov	x29, sp
   51fa4:	stp	x19, x20, [sp, #16]
   51fa8:	mov	x19, x0
   51fac:	mov	w0, #0xc                   	// #12
   51fb0:	str	w0, [x2]
   51fb4:	sub	w1, w1, #0x2
   51fb8:	cmp	w1, #0xcf
   51fbc:	b.hi	52798 <aarch64_get_opcode@@Base+0x4184>  // b.pmore
   51fc0:	mov	x20, x2
   51fc4:	adrp	x0, 74000 <fields@@Base+0x13c40>
   51fc8:	add	x0, x0, #0x36c
   51fcc:	ldrh	w0, [x0, w1, uxtw #1]
   51fd0:	adr	x1, 51fdc <aarch64_get_opcode@@Base+0x39c8>
   51fd4:	add	x0, x1, w0, sxth #2
   51fd8:	br	x0
   51fdc:	mov	w0, #0x0                   	// #0
   51fe0:	tbnz	w19, #12, 5279c <aarch64_get_opcode@@Base+0x4188>
   51fe4:	tbz	w19, #5, 5279c <aarch64_get_opcode@@Base+0x4188>
   51fe8:	mov	w0, #0x1                   	// #1
   51fec:	str	w0, [x2]
   51ff0:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   51ff4:	and	x19, x19, #0xf
   51ff8:	mov	w0, #0x0                   	// #0
   51ffc:	cmp	x19, #0xd
   52000:	b.ne	5279c <aarch64_get_opcode@@Base+0x4188>  // b.any
   52004:	mov	w0, #0x2                   	// #2
   52008:	str	w0, [x2]
   5200c:	mov	w0, #0x1                   	// #1
   52010:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52014:	ubfx	x19, x19, #12, #4
   52018:	cmp	x19, #0xd
   5201c:	b.eq	5203c <aarch64_get_opcode@@Base+0x3a28>  // b.none
   52020:	mov	w0, #0x0                   	// #0
   52024:	cmp	x19, #0xf
   52028:	b.ne	5279c <aarch64_get_opcode@@Base+0x4188>  // b.any
   5202c:	mov	w0, #0x3                   	// #3
   52030:	str	w0, [x2]
   52034:	mov	w0, #0x1                   	// #1
   52038:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   5203c:	mov	w0, #0x2                   	// #2
   52040:	str	w0, [x2]
   52044:	mov	w0, #0x1                   	// #1
   52048:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   5204c:	and	x19, x19, #0xf
   52050:	cmp	x19, #0xd
   52054:	b.eq	52074 <aarch64_get_opcode@@Base+0x3a60>  // b.none
   52058:	mov	w0, #0x0                   	// #0
   5205c:	cmp	x19, #0xf
   52060:	b.ne	5279c <aarch64_get_opcode@@Base+0x4188>  // b.any
   52064:	mov	w0, #0x3                   	// #3
   52068:	str	w0, [x2]
   5206c:	mov	w0, #0x1                   	// #1
   52070:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52074:	mov	w0, #0x2                   	// #2
   52078:	str	w0, [x2]
   5207c:	mov	w0, #0x1                   	// #1
   52080:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52084:	ubfx	x0, x19, #16, #4
   52088:	cmp	x0, #0xd
   5208c:	b.eq	520d0 <aarch64_get_opcode@@Base+0x3abc>  // b.none
   52090:	cmp	x0, #0xf
   52094:	b.eq	520e4 <aarch64_get_opcode@@Base+0x3ad0>  // b.none
   52098:	mov	w4, #0x16                  	// #22
   5209c:	mov	w3, w4
   520a0:	mov	w2, #0xf                   	// #15
   520a4:	mov	w1, #0xd                   	// #13
   520a8:	mov	x0, x19
   520ac:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   520b0:	mov	x1, x0
   520b4:	mov	w0, #0x0                   	// #0
   520b8:	cmp	x1, #0x6
   520bc:	b.ls	5279c <aarch64_get_opcode@@Base+0x4188>  // b.plast
   520c0:	mov	w0, #0x5                   	// #5
   520c4:	str	w0, [x20]
   520c8:	mov	w0, #0x1                   	// #1
   520cc:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   520d0:	tbz	w19, #21, 52098 <aarch64_get_opcode@@Base+0x3a84>
   520d4:	mov	w0, #0x6                   	// #6
   520d8:	str	w0, [x2]
   520dc:	mov	w0, #0x1                   	// #1
   520e0:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   520e4:	mov	w0, #0x3                   	// #3
   520e8:	str	w0, [x2]
   520ec:	mov	w0, #0x1                   	// #1
   520f0:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   520f4:	ubfx	x0, x19, #16, #4
   520f8:	cmp	x0, #0xd
   520fc:	b.eq	52140 <aarch64_get_opcode@@Base+0x3b2c>  // b.none
   52100:	cmp	x0, #0xf
   52104:	b.eq	52154 <aarch64_get_opcode@@Base+0x3b40>  // b.none
   52108:	mov	w4, #0x16                  	// #22
   5210c:	mov	w3, w4
   52110:	mov	w2, #0xf                   	// #15
   52114:	mov	w1, #0xd                   	// #13
   52118:	mov	x0, x19
   5211c:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   52120:	mov	x1, x0
   52124:	mov	w0, #0x0                   	// #0
   52128:	cmp	x1, #0x4
   5212c:	b.ls	5279c <aarch64_get_opcode@@Base+0x4188>  // b.plast
   52130:	mov	w0, #0x4                   	// #4
   52134:	str	w0, [x20]
   52138:	mov	w0, #0x1                   	// #1
   5213c:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52140:	tbz	w19, #21, 52108 <aarch64_get_opcode@@Base+0x3af4>
   52144:	mov	w0, #0x6                   	// #6
   52148:	str	w0, [x2]
   5214c:	mov	w0, #0x1                   	// #1
   52150:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52154:	mov	w0, #0x3                   	// #3
   52158:	str	w0, [x2]
   5215c:	mov	w0, #0x1                   	// #1
   52160:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52164:	ubfx	x1, x19, #16, #4
   52168:	cmp	x1, #0xd
   5216c:	b.eq	5218c <aarch64_get_opcode@@Base+0x3b78>  // b.none
   52170:	mov	w0, #0x0                   	// #0
   52174:	cmp	x1, #0xf
   52178:	b.ne	5279c <aarch64_get_opcode@@Base+0x4188>  // b.any
   5217c:	mov	w0, #0x3                   	// #3
   52180:	str	w0, [x2]
   52184:	mov	w0, #0x1                   	// #1
   52188:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   5218c:	mov	w0, #0x0                   	// #0
   52190:	tbz	w19, #21, 5279c <aarch64_get_opcode@@Base+0x4188>
   52194:	mov	w0, #0x6                   	// #6
   52198:	str	w0, [x2]
   5219c:	mov	w0, #0x1                   	// #1
   521a0:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   521a4:	tbnz	w19, #0, 52200 <aarch64_get_opcode@@Base+0x3bec>
   521a8:	stp	x21, x22, [sp, #32]
   521ac:	mov	w4, #0x16                  	// #22
   521b0:	mov	w3, w4
   521b4:	mov	w2, #0xf                   	// #15
   521b8:	mov	w1, #0xd                   	// #13
   521bc:	mov	x0, x19
   521c0:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   521c4:	mov	x21, x0
   521c8:	mov	w4, #0x5                   	// #5
   521cc:	mov	w3, w4
   521d0:	mov	w2, #0x3                   	// #3
   521d4:	mov	w1, #0x1                   	// #1
   521d8:	mov	x0, x19
   521dc:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   521e0:	cmp	x21, x0
   521e4:	b.eq	52210 <aarch64_get_opcode@@Base+0x3bfc>  // b.none
   521e8:	ubfx	x19, x19, #16, #4
   521ec:	mov	w0, #0x0                   	// #0
   521f0:	cmp	x19, #0xf
   521f4:	b.eq	52224 <aarch64_get_opcode@@Base+0x3c10>  // b.none
   521f8:	ldp	x21, x22, [sp, #32]
   521fc:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52200:	mov	w0, #0x8                   	// #8
   52204:	str	w0, [x2]
   52208:	mov	w0, #0x1                   	// #1
   5220c:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52210:	mov	w0, #0x7                   	// #7
   52214:	str	w0, [x20]
   52218:	mov	w0, #0x1                   	// #1
   5221c:	ldp	x21, x22, [sp, #32]
   52220:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52224:	mov	w0, #0x3                   	// #3
   52228:	str	w0, [x20]
   5222c:	mov	w0, #0x1                   	// #1
   52230:	ldp	x21, x22, [sp, #32]
   52234:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52238:	stp	x21, x22, [sp, #32]
   5223c:	mov	w4, #0x16                  	// #22
   52240:	mov	w3, w4
   52244:	mov	w2, #0xf                   	// #15
   52248:	mov	w1, #0xd                   	// #13
   5224c:	mov	x0, x19
   52250:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   52254:	mov	x21, x0
   52258:	mov	w4, #0x7                   	// #7
   5225c:	mov	w3, w4
   52260:	mov	w2, #0x13                  	// #19
   52264:	mov	w1, #0x11                  	// #17
   52268:	mov	x0, x19
   5226c:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   52270:	mov	x1, x0
   52274:	mov	w0, #0x0                   	// #0
   52278:	cmp	x21, x1
   5227c:	b.eq	52288 <aarch64_get_opcode@@Base+0x3c74>  // b.none
   52280:	ldp	x21, x22, [sp, #32]
   52284:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52288:	mov	w0, #0x7                   	// #7
   5228c:	str	w0, [x20]
   52290:	mov	w0, #0x1                   	// #1
   52294:	ldp	x21, x22, [sp, #32]
   52298:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   5229c:	ubfx	x0, x19, #16, #4
   522a0:	cmp	x0, #0xf
   522a4:	b.eq	522c0 <aarch64_get_opcode@@Base+0x3cac>  // b.none
   522a8:	mov	w0, #0x0                   	// #0
   522ac:	tbz	w19, #0, 5279c <aarch64_get_opcode@@Base+0x4188>
   522b0:	mov	w0, #0x8                   	// #8
   522b4:	str	w0, [x2]
   522b8:	mov	w0, #0x1                   	// #1
   522bc:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   522c0:	mov	w0, #0x3                   	// #3
   522c4:	str	w0, [x2]
   522c8:	mov	w0, #0x1                   	// #1
   522cc:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   522d0:	ubfx	x19, x19, #16, #4
   522d4:	mov	w0, #0x0                   	// #0
   522d8:	cmp	x19, #0xf
   522dc:	b.ne	5279c <aarch64_get_opcode@@Base+0x4188>  // b.any
   522e0:	mov	w0, #0x3                   	// #3
   522e4:	str	w0, [x2]
   522e8:	mov	w0, #0x1                   	// #1
   522ec:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   522f0:	and	x1, x19, #0xf
   522f4:	ubfx	x19, x19, #16, #4
   522f8:	cmp	x1, #0xd
   522fc:	ccmp	x19, #0xd, #0x4, ne  // ne = any
   52300:	b.eq	5232c <aarch64_get_opcode@@Base+0x3d18>  // b.none
   52304:	cmp	x1, #0xf
   52308:	ccmp	x19, #0xf, #0x4, ne  // ne = any
   5230c:	b.eq	5233c <aarch64_get_opcode@@Base+0x3d28>  // b.none
   52310:	mov	w0, #0x0                   	// #0
   52314:	cmp	x19, x1
   52318:	b.ne	5279c <aarch64_get_opcode@@Base+0x4188>  // b.any
   5231c:	mov	w0, #0x9                   	// #9
   52320:	str	w0, [x2]
   52324:	mov	w0, #0x1                   	// #1
   52328:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   5232c:	mov	w0, #0x2                   	// #2
   52330:	str	w0, [x2]
   52334:	mov	w0, #0x1                   	// #1
   52338:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   5233c:	mov	w0, #0x3                   	// #3
   52340:	str	w0, [x2]
   52344:	mov	w0, #0x1                   	// #1
   52348:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   5234c:	ubfx	x19, x19, #12, #4
   52350:	cmp	x19, #0xd
   52354:	b.eq	52374 <aarch64_get_opcode@@Base+0x3d60>  // b.none
   52358:	mov	w0, #0x0                   	// #0
   5235c:	cmp	x19, #0xf
   52360:	b.ne	5279c <aarch64_get_opcode@@Base+0x4188>  // b.any
   52364:	mov	w0, #0x3                   	// #3
   52368:	str	w0, [x2]
   5236c:	mov	w0, #0x1                   	// #1
   52370:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52374:	mov	w0, #0x2                   	// #2
   52378:	str	w0, [x2]
   5237c:	mov	w0, #0x1                   	// #1
   52380:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52384:	ubfx	x1, x19, #20, #2
   52388:	mov	w0, #0x0                   	// #0
   5238c:	cmp	x1, #0x2
   52390:	b.ne	5279c <aarch64_get_opcode@@Base+0x4188>  // b.any
   52394:	stp	x21, x22, [sp, #32]
   52398:	mov	w4, #0x16                  	// #22
   5239c:	mov	w3, w4
   523a0:	mov	w2, #0xf                   	// #15
   523a4:	mov	w1, #0xd                   	// #13
   523a8:	mov	x0, x19
   523ac:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   523b0:	mov	x21, x0
   523b4:	mov	w4, #0x5                   	// #5
   523b8:	mov	w3, w4
   523bc:	mov	w2, #0x3                   	// #3
   523c0:	mov	w1, #0x1                   	// #1
   523c4:	mov	x0, x19
   523c8:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   523cc:	mov	x22, x0
   523d0:	mov	w4, #0x7                   	// #7
   523d4:	mov	w3, w4
   523d8:	mov	w2, #0x13                  	// #19
   523dc:	mov	w1, #0x11                  	// #17
   523e0:	mov	x0, x19
   523e4:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   523e8:	cmp	x21, x0
   523ec:	mov	w0, #0x0                   	// #0
   523f0:	ccmp	x21, x22, #0x4, ne  // ne = any
   523f4:	b.ne	527a8 <aarch64_get_opcode@@Base+0x4194>  // b.any
   523f8:	mov	w0, #0xb                   	// #11
   523fc:	str	w0, [x20]
   52400:	mov	w0, #0x1                   	// #1
   52404:	ldp	x21, x22, [sp, #32]
   52408:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   5240c:	mov	w0, #0x0                   	// #0
   52410:	tbz	w19, #28, 5279c <aarch64_get_opcode@@Base+0x4188>
   52414:	stp	x21, x22, [sp, #32]
   52418:	mov	w4, #0x16                  	// #22
   5241c:	mov	w3, w4
   52420:	mov	w2, #0xf                   	// #15
   52424:	mov	w1, #0xd                   	// #13
   52428:	mov	x0, x19
   5242c:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   52430:	mov	x21, x0
   52434:	mov	w4, #0x5                   	// #5
   52438:	mov	w3, w4
   5243c:	mov	w2, #0x3                   	// #3
   52440:	mov	w1, #0x1                   	// #1
   52444:	mov	x0, x19
   52448:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   5244c:	mov	x22, x0
   52450:	mov	w4, #0x7                   	// #7
   52454:	mov	w3, w4
   52458:	mov	w2, #0x13                  	// #19
   5245c:	mov	w1, #0x11                  	// #17
   52460:	mov	x0, x19
   52464:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   52468:	cmp	x21, x0
   5246c:	mov	w0, #0x0                   	// #0
   52470:	ccmp	x21, x22, #0x4, ne  // ne = any
   52474:	b.ne	527b0 <aarch64_get_opcode@@Base+0x419c>  // b.any
   52478:	mov	w0, #0xa                   	// #10
   5247c:	str	w0, [x20]
   52480:	mov	w0, #0x1                   	// #1
   52484:	ldp	x21, x22, [sp, #32]
   52488:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   5248c:	and	x0, x19, #0xf
   52490:	cmp	x0, #0xd
   52494:	b.eq	524f8 <aarch64_get_opcode@@Base+0x3ee4>  // b.none
   52498:	cmp	x0, #0xf
   5249c:	b.eq	52508 <aarch64_get_opcode@@Base+0x3ef4>  // b.none
   524a0:	mov	w0, #0x0                   	// #0
   524a4:	tbz	w19, #28, 5279c <aarch64_get_opcode@@Base+0x4188>
   524a8:	stp	x21, x22, [sp, #32]
   524ac:	mov	w4, #0x16                  	// #22
   524b0:	mov	w3, w4
   524b4:	mov	w2, #0xf                   	// #15
   524b8:	mov	w1, #0xd                   	// #13
   524bc:	mov	x0, x19
   524c0:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   524c4:	mov	x21, x0
   524c8:	mov	w4, #0x7                   	// #7
   524cc:	mov	w3, w4
   524d0:	mov	w2, #0x13                  	// #19
   524d4:	mov	w1, #0x11                  	// #17
   524d8:	mov	x0, x19
   524dc:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   524e0:	mov	x1, x0
   524e4:	mov	w0, #0x0                   	// #0
   524e8:	cmp	x21, x1
   524ec:	b.eq	52518 <aarch64_get_opcode@@Base+0x3f04>  // b.none
   524f0:	ldp	x21, x22, [sp, #32]
   524f4:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   524f8:	mov	w0, #0x2                   	// #2
   524fc:	str	w0, [x2]
   52500:	mov	w0, #0x1                   	// #1
   52504:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52508:	mov	w0, #0x3                   	// #3
   5250c:	str	w0, [x2]
   52510:	mov	w0, #0x1                   	// #1
   52514:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52518:	mov	w0, #0xa                   	// #10
   5251c:	str	w0, [x20]
   52520:	mov	w0, #0x1                   	// #1
   52524:	ldp	x21, x22, [sp, #32]
   52528:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   5252c:	ubfx	x19, x19, #20, #3
   52530:	mov	w0, #0x0                   	// #0
   52534:	cmp	x19, #0x6
   52538:	b.ne	5279c <aarch64_get_opcode@@Base+0x4188>  // b.any
   5253c:	mov	w0, #0x2                   	// #2
   52540:	str	w0, [x2]
   52544:	mov	w0, #0x1                   	// #1
   52548:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   5254c:	ubfx	x19, x19, #1, #3
   52550:	mov	w0, #0x0                   	// #0
   52554:	cmp	x19, #0x6
   52558:	b.ne	5279c <aarch64_get_opcode@@Base+0x4188>  // b.any
   5255c:	mov	w0, #0x2                   	// #2
   52560:	str	w0, [x2]
   52564:	mov	w0, #0x1                   	// #1
   52568:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   5256c:	stp	x21, x22, [sp, #32]
   52570:	mov	w4, #0x16                  	// #22
   52574:	mov	w3, w4
   52578:	mov	w2, #0xf                   	// #15
   5257c:	mov	w1, #0xd                   	// #13
   52580:	mov	x0, x19
   52584:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   52588:	mov	x21, x0
   5258c:	mov	w4, #0x5                   	// #5
   52590:	mov	w3, w4
   52594:	mov	w2, #0x3                   	// #3
   52598:	mov	w1, #0x1                   	// #1
   5259c:	mov	x0, x19
   525a0:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   525a4:	mov	x1, x0
   525a8:	mov	w0, #0x0                   	// #0
   525ac:	cmp	x21, x1
   525b0:	b.eq	525bc <aarch64_get_opcode@@Base+0x3fa8>  // b.none
   525b4:	ldp	x21, x22, [sp, #32]
   525b8:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   525bc:	ubfx	x19, x19, #20, #2
   525c0:	cmp	x19, #0x2
   525c4:	b.eq	525d0 <aarch64_get_opcode@@Base+0x3fbc>  // b.none
   525c8:	ldp	x21, x22, [sp, #32]
   525cc:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   525d0:	mov	w0, #0xb                   	// #11
   525d4:	str	w0, [x20]
   525d8:	mov	w0, #0x1                   	// #1
   525dc:	ldp	x21, x22, [sp, #32]
   525e0:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   525e4:	stp	x21, x22, [sp, #32]
   525e8:	mov	w4, #0x16                  	// #22
   525ec:	mov	w3, w4
   525f0:	mov	w2, #0xf                   	// #15
   525f4:	mov	w1, #0xd                   	// #13
   525f8:	mov	x0, x19
   525fc:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   52600:	mov	x21, x0
   52604:	mov	w4, #0x5                   	// #5
   52608:	mov	w3, w4
   5260c:	mov	w2, #0x3                   	// #3
   52610:	mov	w1, #0x1                   	// #1
   52614:	mov	x0, x19
   52618:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   5261c:	mov	x1, x0
   52620:	mov	w0, #0x0                   	// #0
   52624:	cmp	x21, x1
   52628:	b.eq	52634 <aarch64_get_opcode@@Base+0x4020>  // b.none
   5262c:	ldp	x21, x22, [sp, #32]
   52630:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52634:	tbnz	w19, #20, 52640 <aarch64_get_opcode@@Base+0x402c>
   52638:	ldp	x21, x22, [sp, #32]
   5263c:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52640:	mov	w0, #0xa                   	// #10
   52644:	str	w0, [x20]
   52648:	mov	w0, #0x1                   	// #1
   5264c:	ldp	x21, x22, [sp, #32]
   52650:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52654:	mov	w0, #0x0                   	// #0
   52658:	tbz	w19, #20, 5279c <aarch64_get_opcode@@Base+0x4188>
   5265c:	stp	x21, x22, [sp, #32]
   52660:	mov	w4, #0x16                  	// #22
   52664:	mov	w3, w4
   52668:	mov	w2, #0xf                   	// #15
   5266c:	mov	w1, #0xd                   	// #13
   52670:	mov	x0, x19
   52674:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   52678:	mov	x21, x0
   5267c:	mov	w4, #0x5                   	// #5
   52680:	mov	w3, w4
   52684:	mov	w2, #0x3                   	// #3
   52688:	mov	w1, #0x1                   	// #1
   5268c:	mov	x0, x19
   52690:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   52694:	mov	x22, x0
   52698:	mov	w4, #0x7                   	// #7
   5269c:	mov	w3, w4
   526a0:	mov	w2, #0x13                  	// #19
   526a4:	mov	w1, #0x11                  	// #17
   526a8:	mov	x0, x19
   526ac:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   526b0:	cmp	x21, x0
   526b4:	mov	w0, #0x0                   	// #0
   526b8:	ccmp	x21, x22, #0x4, ne  // ne = any
   526bc:	b.ne	527b8 <aarch64_get_opcode@@Base+0x41a4>  // b.any
   526c0:	mov	w0, #0xa                   	// #10
   526c4:	str	w0, [x20]
   526c8:	mov	w0, #0x1                   	// #1
   526cc:	ldp	x21, x22, [sp, #32]
   526d0:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   526d4:	ubfx	x19, x19, #16, #4
   526d8:	mov	w0, #0x0                   	// #0
   526dc:	cmp	x19, #0xd
   526e0:	b.ne	5279c <aarch64_get_opcode@@Base+0x4188>  // b.any
   526e4:	mov	w0, #0x2                   	// #2
   526e8:	str	w0, [x2]
   526ec:	mov	w0, #0x1                   	// #1
   526f0:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   526f4:	stp	x21, x22, [sp, #32]
   526f8:	mov	w4, #0x16                  	// #22
   526fc:	mov	w3, w4
   52700:	mov	w2, #0xf                   	// #15
   52704:	mov	w1, #0xd                   	// #13
   52708:	mov	x0, x19
   5270c:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   52710:	mov	x21, x0
   52714:	mov	w4, #0x6                   	// #6
   52718:	mov	w3, w4
   5271c:	mov	w2, #0x3                   	// #3
   52720:	mov	w1, #0x1                   	// #1
   52724:	mov	x0, x19
   52728:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   5272c:	mov	x1, x0
   52730:	mov	w0, #0x0                   	// #0
   52734:	cmp	x21, x1
   52738:	b.eq	52744 <aarch64_get_opcode@@Base+0x4130>  // b.none
   5273c:	ldp	x21, x22, [sp, #32]
   52740:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52744:	mov	w0, #0x7                   	// #7
   52748:	str	w0, [x20]
   5274c:	mov	w0, #0x1                   	// #1
   52750:	ldp	x21, x22, [sp, #32]
   52754:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52758:	lsr	x1, x19, #9
   5275c:	ubfiz	x1, x1, #1, #3
   52760:	orr	x1, x1, #0x1
   52764:	cmp	x1, #0xd
   52768:	b.eq	52788 <aarch64_get_opcode@@Base+0x4174>  // b.none
   5276c:	mov	w0, #0x0                   	// #0
   52770:	cmp	x1, #0xf
   52774:	b.ne	5279c <aarch64_get_opcode@@Base+0x4188>  // b.any
   52778:	mov	w0, #0x3                   	// #3
   5277c:	str	w0, [x2]
   52780:	mov	w0, #0x1                   	// #1
   52784:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52788:	mov	w0, #0x2                   	// #2
   5278c:	str	w0, [x2]
   52790:	mov	w0, #0x1                   	// #1
   52794:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   52798:	mov	w0, #0x0                   	// #0
   5279c:	ldp	x19, x20, [sp, #16]
   527a0:	ldp	x29, x30, [sp], #48
   527a4:	ret
   527a8:	ldp	x21, x22, [sp, #32]
   527ac:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   527b0:	ldp	x21, x22, [sp, #32]
   527b4:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   527b8:	ldp	x21, x22, [sp, #32]
   527bc:	b	5279c <aarch64_get_opcode@@Base+0x4188>
   527c0:	mov	x5, x0
   527c4:	mov	w0, #0x11                  	// #17
   527c8:	str	w0, [x2]
   527cc:	sub	w1, w1, #0x11
   527d0:	cmp	w1, #0xb0
   527d4:	b.hi	52cd0 <aarch64_get_opcode@@Base+0x46bc>  // b.pmore
   527d8:	stp	x29, x30, [sp, #-32]!
   527dc:	mov	x29, sp
   527e0:	str	x19, [sp, #16]
   527e4:	mov	x19, x2
   527e8:	adrp	x0, 74000 <fields@@Base+0x13c40>
   527ec:	add	x0, x0, #0x50c
   527f0:	ldrh	w0, [x0, w1, uxtw #1]
   527f4:	adr	x1, 52800 <aarch64_get_opcode@@Base+0x41ec>
   527f8:	add	x0, x1, w0, sxth #2
   527fc:	br	x0
   52800:	mov	w4, #0x16                  	// #22
   52804:	mov	w3, w4
   52808:	mov	w2, #0x5                   	// #5
   5280c:	mov	w1, w2
   52810:	mov	x0, x5
   52814:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   52818:	mov	x1, x0
   5281c:	mov	w0, #0x0                   	// #0
   52820:	cmp	x1, #0x3
   52824:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   52828:	mov	w0, #0x3                   	// #3
   5282c:	str	w0, [x19]
   52830:	mov	w0, #0x1                   	// #1
   52834:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52838:	ubfx	x5, x5, #20, #2
   5283c:	mov	w0, #0x0                   	// #0
   52840:	cmp	x5, #0x3
   52844:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   52848:	mov	w0, #0x3                   	// #3
   5284c:	str	w0, [x2]
   52850:	mov	w0, #0x1                   	// #1
   52854:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52858:	ubfx	x5, x5, #7, #2
   5285c:	mov	w0, #0x0                   	// #0
   52860:	cmp	x5, #0x3
   52864:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   52868:	mov	w0, #0x3                   	// #3
   5286c:	str	w0, [x2]
   52870:	mov	w0, #0x1                   	// #1
   52874:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52878:	mov	w0, #0x0                   	// #0
   5287c:	tbnz	w5, #8, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52880:	mov	w0, #0x4                   	// #4
   52884:	str	w0, [x2]
   52888:	mov	w0, #0x1                   	// #1
   5288c:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52890:	mov	w0, #0x0                   	// #0
   52894:	tst	x5, #0x180
   52898:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   5289c:	mov	w5, #0x1                   	// #1
   528a0:	str	w5, [x2]
   528a4:	mov	w0, w5
   528a8:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   528ac:	mov	w0, #0x0                   	// #0
   528b0:	tbnz	w5, #8, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   528b4:	mov	w0, #0x4                   	// #4
   528b8:	str	w0, [x2]
   528bc:	mov	w0, #0x1                   	// #1
   528c0:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   528c4:	ubfx	x0, x5, #7, #2
   528c8:	cmp	x0, #0x3
   528cc:	b.eq	528f0 <aarch64_get_opcode@@Base+0x42dc>  // b.none
   528d0:	ubfx	x1, x5, #28, #1
   528d4:	orr	x1, x1, x0
   528d8:	mov	w0, #0x0                   	// #0
   528dc:	cbnz	x1, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   528e0:	mov	w0, #0x8                   	// #8
   528e4:	str	w0, [x2]
   528e8:	mov	w0, #0x1                   	// #1
   528ec:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   528f0:	str	w0, [x2]
   528f4:	mov	w0, #0x1                   	// #1
   528f8:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   528fc:	ubfx	x1, x5, #7, #2
   52900:	cmp	x1, #0x3
   52904:	b.eq	5292c <aarch64_get_opcode@@Base+0x4318>  // b.none
   52908:	tst	x5, #0x10000000
   5290c:	ccmp	x1, #0x1, #0x0, eq  // eq = none
   52910:	b.eq	5293c <aarch64_get_opcode@@Base+0x4328>  // b.none
   52914:	mov	w0, #0x0                   	// #0
   52918:	cbnz	x1, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   5291c:	mov	w5, #0x1                   	// #1
   52920:	str	w5, [x2]
   52924:	mov	w0, w5
   52928:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   5292c:	mov	w0, #0x3                   	// #3
   52930:	str	w0, [x2]
   52934:	mov	w0, #0x1                   	// #1
   52938:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   5293c:	mov	w0, #0x9                   	// #9
   52940:	str	w0, [x2]
   52944:	mov	w0, #0x1                   	// #1
   52948:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   5294c:	ubfx	x0, x5, #7, #2
   52950:	cmp	x0, #0x2
   52954:	b.eq	52968 <aarch64_get_opcode@@Base+0x4354>  // b.none
   52958:	mov	w0, #0x6                   	// #6
   5295c:	str	w0, [x2]
   52960:	mov	w0, #0x1                   	// #1
   52964:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52968:	mov	w0, #0x0                   	// #0
   5296c:	tbnz	w5, #28, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52970:	mov	w0, #0xa                   	// #10
   52974:	str	w0, [x2]
   52978:	mov	w0, #0x1                   	// #1
   5297c:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52980:	ubfx	x0, x5, #7, #2
   52984:	cmp	x0, #0x3
   52988:	b.eq	5299c <aarch64_get_opcode@@Base+0x4388>  // b.none
   5298c:	mov	w0, #0x7                   	// #7
   52990:	str	w0, [x2]
   52994:	mov	w0, #0x1                   	// #1
   52998:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   5299c:	mov	w0, #0x0                   	// #0
   529a0:	tbnz	w5, #28, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   529a4:	mov	w0, #0xa                   	// #10
   529a8:	str	w0, [x2]
   529ac:	mov	w0, #0x1                   	// #1
   529b0:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   529b4:	ubfx	x5, x5, #7, #2
   529b8:	mov	w0, #0x0                   	// #0
   529bc:	cmp	x5, #0x3
   529c0:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   529c4:	mov	w0, #0x3                   	// #3
   529c8:	str	w0, [x2]
   529cc:	mov	w0, #0x1                   	// #1
   529d0:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   529d4:	ubfx	x5, x5, #7, #2
   529d8:	cmp	x5, #0x3
   529dc:	b.eq	529f8 <aarch64_get_opcode@@Base+0x43e4>  // b.none
   529e0:	mov	w0, #0x0                   	// #0
   529e4:	cbnz	x5, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   529e8:	mov	w5, #0x1                   	// #1
   529ec:	str	w5, [x2]
   529f0:	mov	w0, w5
   529f4:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   529f8:	mov	w0, #0x3                   	// #3
   529fc:	str	w0, [x2]
   52a00:	mov	w0, #0x1                   	// #1
   52a04:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52a08:	ubfx	x5, x5, #7, #2
   52a0c:	mov	w0, #0x0                   	// #0
   52a10:	cmp	x5, #0x2
   52a14:	b.eq	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.none
   52a18:	mov	w0, #0x6                   	// #6
   52a1c:	str	w0, [x2]
   52a20:	mov	w0, #0x1                   	// #1
   52a24:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52a28:	ubfx	x5, x5, #7, #2
   52a2c:	mov	w0, #0x0                   	// #0
   52a30:	cmp	x5, #0x3
   52a34:	b.eq	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.none
   52a38:	mov	w0, #0x7                   	// #7
   52a3c:	str	w0, [x2]
   52a40:	mov	w0, #0x1                   	// #1
   52a44:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52a48:	lsr	x1, x5, #16
   52a4c:	tbnz	w5, #21, 52a60 <aarch64_get_opcode@@Base+0x444c>
   52a50:	mov	w0, #0xb                   	// #11
   52a54:	str	w0, [x2]
   52a58:	mov	w0, #0x1                   	// #1
   52a5c:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52a60:	mov	w0, #0x0                   	// #0
   52a64:	tbnz	w5, #9, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52a68:	and	x1, x1, #0x30
   52a6c:	cmp	x1, #0x20
   52a70:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   52a74:	mov	w0, #0xc                   	// #12
   52a78:	str	w0, [x2]
   52a7c:	mov	w0, #0x1                   	// #1
   52a80:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52a84:	ubfx	x1, x5, #18, #2
   52a88:	tst	x5, #0xc0000
   52a8c:	b.eq	52aac <aarch64_get_opcode@@Base+0x4498>  // b.none
   52a90:	mov	w0, #0x0                   	// #0
   52a94:	cmp	x1, #0x3
   52a98:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   52a9c:	mov	w0, #0x3                   	// #3
   52aa0:	str	w0, [x2]
   52aa4:	mov	w0, #0x1                   	// #1
   52aa8:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52aac:	mov	w5, #0x1                   	// #1
   52ab0:	str	w5, [x2]
   52ab4:	mov	w0, w5
   52ab8:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52abc:	lsr	x2, x5, #21
   52ac0:	ubfx	x1, x5, #5, #2
   52ac4:	tst	x5, #0x800000
   52ac8:	ccmp	x1, #0x0, #0x0, ne  // ne = any
   52acc:	b.ne	52ae8 <aarch64_get_opcode@@Base+0x44d4>  // b.any
   52ad0:	mov	w0, #0x0                   	// #0
   52ad4:	tbnz	w2, #1, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52ad8:	mov	w0, #0xe                   	// #14
   52adc:	str	w0, [x19]
   52ae0:	mov	w0, #0x1                   	// #1
   52ae4:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52ae8:	mov	w0, #0x0                   	// #0
   52aec:	cmp	x1, #0x2
   52af0:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   52af4:	tbnz	w2, #1, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52af8:	mov	w0, #0xd                   	// #13
   52afc:	str	w0, [x19]
   52b00:	mov	w0, #0x1                   	// #1
   52b04:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52b08:	ubfx	x1, x5, #5, #2
   52b0c:	mov	w0, #0x0                   	// #0
   52b10:	cmp	x1, #0x2
   52b14:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   52b18:	tbnz	w5, #22, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52b1c:	mov	w0, #0xd                   	// #13
   52b20:	str	w0, [x2]
   52b24:	mov	w0, #0x1                   	// #1
   52b28:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52b2c:	lsr	x0, x5, #22
   52b30:	orr	x5, x0, x5, lsr #5
   52b34:	and	w0, w5, #0x1
   52b38:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52b3c:	mov	w0, #0x0                   	// #0
   52b40:	tbnz	w5, #5, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52b44:	lsr	x5, x5, #8
   52b48:	mov	x0, #0x9                   	// #9
   52b4c:	and	x0, x5, x0
   52b50:	cmp	x0, #0x1
   52b54:	b.eq	52b6c <aarch64_get_opcode@@Base+0x4558>  // b.none
   52b58:	mov	x1, #0x5                   	// #5
   52b5c:	and	x1, x5, x1
   52b60:	mov	w0, #0x0                   	// #0
   52b64:	cmp	x1, #0x1
   52b68:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   52b6c:	mov	w0, #0xf                   	// #15
   52b70:	str	w0, [x19]
   52b74:	mov	w0, #0x1                   	// #1
   52b78:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52b7c:	ubfx	x5, x5, #18, #2
   52b80:	mov	w0, #0x0                   	// #0
   52b84:	cmp	x5, #0x2
   52b88:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   52b8c:	mov	w0, #0x2                   	// #2
   52b90:	str	w0, [x2]
   52b94:	mov	w0, #0x1                   	// #1
   52b98:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52b9c:	mov	w0, #0x0                   	// #0
   52ba0:	mov	w1, #0x10001000            	// #268439552
   52ba4:	bics	xzr, x1, x5
   52ba8:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   52bac:	mov	w0, #0x10                  	// #16
   52bb0:	str	w0, [x2]
   52bb4:	mov	w0, #0x1                   	// #1
   52bb8:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52bbc:	lsr	x1, x5, #19
   52bc0:	ubfx	x5, x5, #19, #2
   52bc4:	mov	w0, #0x0                   	// #0
   52bc8:	cmp	x5, #0x1
   52bcc:	b.eq	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.none
   52bd0:	tbnz	w1, #1, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52bd4:	str	wzr, [x2]
   52bd8:	mov	w0, #0x1                   	// #1
   52bdc:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52be0:	lsr	x2, x5, #19
   52be4:	ubfx	x5, x5, #19, #3
   52be8:	mov	w0, #0x0                   	// #0
   52bec:	cmp	x5, #0x1
   52bf0:	b.eq	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.none
   52bf4:	and	x1, x2, #0x6
   52bf8:	cmp	x1, #0x2
   52bfc:	b.eq	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.none
   52c00:	tbnz	w2, #2, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52c04:	str	wzr, [x19]
   52c08:	mov	w0, #0x1                   	// #1
   52c0c:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52c10:	mov	w0, #0x0                   	// #0
   52c14:	tst	x5, #0x180000
   52c18:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   52c1c:	mov	w5, #0x1                   	// #1
   52c20:	str	w5, [x2]
   52c24:	mov	w0, w5
   52c28:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52c2c:	ubfx	x5, x5, #18, #2
   52c30:	mov	w0, #0x0                   	// #0
   52c34:	cmp	x5, #0x3
   52c38:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   52c3c:	mov	w0, #0x3                   	// #3
   52c40:	str	w0, [x2]
   52c44:	mov	w0, #0x1                   	// #1
   52c48:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52c4c:	ubfx	x5, x5, #18, #2
   52c50:	mov	w0, #0x0                   	// #0
   52c54:	cmp	x5, #0x3
   52c58:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   52c5c:	mov	w0, #0x3                   	// #3
   52c60:	str	w0, [x2]
   52c64:	mov	w0, #0x1                   	// #1
   52c68:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52c6c:	mov	w0, #0x0                   	// #0
   52c70:	tst	x5, #0xc0000
   52c74:	b.eq	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.none
   52c78:	mov	w0, #0x5                   	// #5
   52c7c:	str	w0, [x2]
   52c80:	mov	w0, #0x1                   	// #1
   52c84:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52c88:	mov	w0, #0x0                   	// #0
   52c8c:	tbz	w5, #19, 52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52c90:	mov	w0, #0x2                   	// #2
   52c94:	str	w0, [x2]
   52c98:	mov	w0, #0x1                   	// #1
   52c9c:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52ca0:	ubfx	x5, x5, #18, #2
   52ca4:	mov	w0, #0x0                   	// #0
   52ca8:	cmp	x5, #0x3
   52cac:	b.ne	52cc4 <aarch64_get_opcode@@Base+0x46b0>  // b.any
   52cb0:	mov	w0, #0x3                   	// #3
   52cb4:	str	w0, [x2]
   52cb8:	mov	w0, #0x1                   	// #1
   52cbc:	b	52cc4 <aarch64_get_opcode@@Base+0x46b0>
   52cc0:	mov	w0, #0x0                   	// #0
   52cc4:	ldr	x19, [sp, #16]
   52cc8:	ldp	x29, x30, [sp], #32
   52ccc:	ret
   52cd0:	mov	w0, #0x0                   	// #0
   52cd4:	ret
   52cd8:	stp	x29, x30, [sp, #-32]!
   52cdc:	mov	x29, sp
   52ce0:	stp	x19, x20, [sp, #16]
   52ce4:	mov	x3, x0
   52ce8:	mov	x0, x1
   52cec:	ldr	x19, [x3, #8]
   52cf0:	ldr	x20, [x3]
   52cf4:	cmp	w2, #0x38
   52cf8:	b.eq	52f44 <aarch64_get_opcode@@Base+0x4930>  // b.none
   52cfc:	b.hi	52d54 <aarch64_get_opcode@@Base+0x4740>  // b.pmore
   52d00:	cmp	w2, #0x36
   52d04:	b.eq	52da0 <aarch64_get_opcode@@Base+0x478c>  // b.none
   52d08:	cmp	w2, #0x37
   52d0c:	b.ne	52f58 <aarch64_get_opcode@@Base+0x4944>  // b.any
   52d10:	ubfx	x1, x1, #18, #2
   52d14:	ubfx	x0, x0, #7, #2
   52d18:	cmp	x1, #0x1
   52d1c:	b.eq	52ea0 <aarch64_get_opcode@@Base+0x488c>  // b.none
   52d20:	cmp	x1, #0x2
   52d24:	b.ne	52f58 <aarch64_get_opcode@@Base+0x4944>  // b.any
   52d28:	cmp	x0, #0x2
   52d2c:	b.eq	52f1c <aarch64_get_opcode@@Base+0x4908>  // b.none
   52d30:	b.hi	52f30 <aarch64_get_opcode@@Base+0x491c>  // b.pmore
   52d34:	cbz	x0, 52f08 <aarch64_get_opcode@@Base+0x48f4>
   52d38:	cmp	x0, #0x1
   52d3c:	b.ne	52f58 <aarch64_get_opcode@@Base+0x4944>  // b.any
   52d40:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52d44:	add	x1, x1, #0xaf0
   52d48:	mov	x0, x19
   52d4c:	blr	x20
   52d50:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52d54:	cmp	w2, #0x39
   52d58:	b.ne	52f58 <aarch64_get_opcode@@Base+0x4944>  // b.any
   52d5c:	mov	w4, #0x13                  	// #19
   52d60:	mov	w3, #0x12                  	// #18
   52d64:	mov	w2, #0x7                   	// #7
   52d68:	mov	w1, w2
   52d6c:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   52d70:	cmp	x0, #0x4
   52d74:	b.eq	52fa8 <aarch64_get_opcode@@Base+0x4994>  // b.none
   52d78:	b.hi	52f78 <aarch64_get_opcode@@Base+0x4964>  // b.pmore
   52d7c:	cmp	x0, #0x2
   52d80:	b.eq	52f94 <aarch64_get_opcode@@Base+0x4980>  // b.none
   52d84:	cmp	x0, #0x3
   52d88:	b.ne	52f58 <aarch64_get_opcode@@Base+0x4944>  // b.any
   52d8c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52d90:	add	x1, x1, #0xad8
   52d94:	mov	x0, x19
   52d98:	blr	x20
   52d9c:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52da0:	lsr	x1, x1, #7
   52da4:	and	x1, x1, #0x4
   52da8:	lsr	x2, x0, #27
   52dac:	and	x2, x2, #0x2
   52db0:	orr	x1, x1, x2
   52db4:	ubfx	x0, x0, #8, #1
   52db8:	orr	x0, x1, x0
   52dbc:	cmp	x0, #0x4
   52dc0:	b.eq	52e78 <aarch64_get_opcode@@Base+0x4864>  // b.none
   52dc4:	b.hi	52e10 <aarch64_get_opcode@@Base+0x47fc>  // b.pmore
   52dc8:	cmp	x0, #0x2
   52dcc:	b.eq	52e64 <aarch64_get_opcode@@Base+0x4850>  // b.none
   52dd0:	b.ls	52df0 <aarch64_get_opcode@@Base+0x47dc>  // b.plast
   52dd4:	cmp	x0, #0x3
   52dd8:	b.ne	52f58 <aarch64_get_opcode@@Base+0x4944>  // b.any
   52ddc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52de0:	add	x1, x1, #0xad8
   52de4:	mov	x0, x19
   52de8:	blr	x20
   52dec:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52df0:	cbz	x0, 52e50 <aarch64_get_opcode@@Base+0x483c>
   52df4:	cmp	x0, #0x1
   52df8:	b.ne	52f58 <aarch64_get_opcode@@Base+0x4944>  // b.any
   52dfc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52e00:	add	x1, x1, #0xac8
   52e04:	mov	x0, x19
   52e08:	blr	x20
   52e0c:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52e10:	cmp	x0, #0x6
   52e14:	b.eq	52e8c <aarch64_get_opcode@@Base+0x4878>  // b.none
   52e18:	cmp	x0, #0x7
   52e1c:	b.ne	52e34 <aarch64_get_opcode@@Base+0x4820>  // b.any
   52e20:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52e24:	add	x1, x1, #0xaf8
   52e28:	mov	x0, x19
   52e2c:	blr	x20
   52e30:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52e34:	cmp	x0, #0x5
   52e38:	b.ne	52f58 <aarch64_get_opcode@@Base+0x4944>  // b.any
   52e3c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52e40:	add	x1, x1, #0xae8
   52e44:	mov	x0, x19
   52e48:	blr	x20
   52e4c:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52e50:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52e54:	add	x1, x1, #0xac0
   52e58:	mov	x0, x19
   52e5c:	blr	x20
   52e60:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52e64:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52e68:	add	x1, x1, #0xad0
   52e6c:	mov	x0, x19
   52e70:	blr	x20
   52e74:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52e78:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52e7c:	add	x1, x1, #0xae0
   52e80:	mov	x0, x19
   52e84:	blr	x20
   52e88:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52e8c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52e90:	add	x1, x1, #0xaf0
   52e94:	mov	x0, x19
   52e98:	blr	x20
   52e9c:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52ea0:	cmp	x0, #0x2
   52ea4:	b.eq	52ee0 <aarch64_get_opcode@@Base+0x48cc>  // b.none
   52ea8:	b.hi	52ef4 <aarch64_get_opcode@@Base+0x48e0>  // b.pmore
   52eac:	cbz	x0, 52ecc <aarch64_get_opcode@@Base+0x48b8>
   52eb0:	cmp	x0, #0x1
   52eb4:	b.ne	52f58 <aarch64_get_opcode@@Base+0x4944>  // b.any
   52eb8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52ebc:	add	x1, x1, #0xad0
   52ec0:	mov	x0, x19
   52ec4:	blr	x20
   52ec8:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52ecc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52ed0:	add	x1, x1, #0xac0
   52ed4:	mov	x0, x19
   52ed8:	blr	x20
   52edc:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52ee0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52ee4:	add	x1, x1, #0xac8
   52ee8:	mov	x0, x19
   52eec:	blr	x20
   52ef0:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52ef4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52ef8:	add	x1, x1, #0xad8
   52efc:	mov	x0, x19
   52f00:	blr	x20
   52f04:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52f08:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52f0c:	add	x1, x1, #0xae0
   52f10:	mov	x0, x19
   52f14:	blr	x20
   52f18:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52f1c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52f20:	add	x1, x1, #0xae8
   52f24:	mov	x0, x19
   52f28:	blr	x20
   52f2c:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52f30:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52f34:	add	x1, x1, #0xaf8
   52f38:	mov	x0, x19
   52f3c:	blr	x20
   52f40:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52f44:	tbnz	w1, #28, 52f64 <aarch64_get_opcode@@Base+0x4950>
   52f48:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52f4c:	add	x1, x1, #0xb00
   52f50:	mov	x0, x19
   52f54:	blr	x20
   52f58:	ldp	x19, x20, [sp, #16]
   52f5c:	ldp	x29, x30, [sp], #32
   52f60:	ret
   52f64:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52f68:	add	x1, x1, #0xb08
   52f6c:	mov	x0, x19
   52f70:	blr	x20
   52f74:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52f78:	cmp	x0, #0x5
   52f7c:	b.ne	52f58 <aarch64_get_opcode@@Base+0x4944>  // b.any
   52f80:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52f84:	add	x1, x1, #0xaf8
   52f88:	mov	x0, x19
   52f8c:	blr	x20
   52f90:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52f94:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52f98:	add	x1, x1, #0xac8
   52f9c:	mov	x0, x19
   52fa0:	blr	x20
   52fa4:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52fa8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   52fac:	add	x1, x1, #0xae8
   52fb0:	mov	x0, x19
   52fb4:	blr	x20
   52fb8:	b	52f58 <aarch64_get_opcode@@Base+0x4944>
   52fbc:	stp	x29, x30, [sp, #-368]!
   52fc0:	mov	x29, sp
   52fc4:	stp	x19, x20, [sp, #16]
   52fc8:	stp	x21, x22, [sp, #32]
   52fcc:	stp	x23, x24, [sp, #48]
   52fd0:	str	x1, [sp, #160]
   52fd4:	str	x2, [sp, #128]
   52fd8:	ldr	x22, [x2, #8]
   52fdc:	ldr	x21, [x2]
   52fe0:	str	xzr, [sp, #360]
   52fe4:	ldr	x12, [x2, #96]
   52fe8:	ldr	x9, [x12]
   52fec:	ldr	x11, [x12, #8]
   52ff0:	ldr	x24, [x12, #16]
   52ff4:	ldr	x20, [x0, #48]
   52ff8:	cbz	x20, 5437c <aarch64_get_opcode@@Base+0x5d68>
   52ffc:	stp	x25, x26, [sp, #64]
   53000:	stp	x27, x28, [sp, #80]
   53004:	mov	x19, x3
   53008:	ubfx	w2, w3, #8, #4
   5300c:	str	w2, [sp, #124]
   53010:	lsr	w6, w3, #28
   53014:	adrp	x1, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   53018:	ldr	w1, [x1, #1032]
   5301c:	ubfx	x8, x1, #4, #4
   53020:	mov	x26, x3
   53024:	lsr	x7, x3, #21
   53028:	orr	x7, x7, x3, lsr #24
   5302c:	and	x3, x7, #0x1
   53030:	str	x3, [sp, #112]
   53034:	sub	w23, w2, #0x9
   53038:	mov	w3, w2
   5303c:	sub	w2, w2, #0xe
   53040:	cmp	w2, #0x1
   53044:	cset	w10, ls  // ls = plast
   53048:	cmp	w3, #0x8
   5304c:	csinc	w10, w10, wzr, ne  // ne = any
   53050:	cmp	w23, #0x2
   53054:	cset	w2, ls  // ls = plast
   53058:	str	w2, [sp, #108]
   5305c:	cmp	w1, #0x0
   53060:	mov	x17, #0x10                  	// #16
   53064:	movk	x17, #0xfe00, lsl #16
   53068:	mov	x16, #0xfc000000            	// #4227858432
   5306c:	mov	x28, #0xe000000             	// #234881024
   53070:	mov	x27, #0xc000000             	// #201326592
   53074:	mov	x25, #0x10                  	// #16
   53078:	movk	x25, #0xe10, lsl #16
   5307c:	and	x18, x11, #0x8000
   53080:	mov	x30, #0xffffffffffcfffff    	// #-3145729
   53084:	and	x15, x19, #0xf0000000
   53088:	mov	x14, #0xf0000000            	// #4026531840
   5308c:	mov	w13, #0x10                  	// #16
   53090:	csel	w8, w8, w13, ne  // ne = any
   53094:	b	5430c <aarch64_get_opcode@@Base+0x5cf8>
   53098:	cmp	x1, #0x1
   5309c:	b.ne	530f8 <aarch64_get_opcode@@Base+0x4ae4>  // b.any
   530a0:	ldr	x1, [sp, #128]
   530a4:	ldr	x2, [x1, #32]
   530a8:	sub	x1, x2, #0xc
   530ac:	cmp	x1, #0x1
   530b0:	mov	x1, x0
   530b4:	ccmp	x2, #0xa, #0x4, hi  // hi = pmore
   530b8:	b.eq	54300 <aarch64_get_opcode@@Base+0x5cec>  // b.none
   530bc:	b	530cc <aarch64_get_opcode@@Base+0x4ab8>
   530c0:	ldr	x1, [x0, #32]
   530c4:	cmp	x1, #0x2
   530c8:	b.eq	530f0 <aarch64_get_opcode@@Base+0x4adc>  // b.none
   530cc:	add	x0, x0, #0x38
   530d0:	ldr	x1, [x0, #8]
   530d4:	cbnz	x1, 530c0 <aarch64_get_opcode@@Base+0x4aac>
   530d8:	ldr	x1, [x0, #16]
   530dc:	cbnz	x1, 530c0 <aarch64_get_opcode@@Base+0x4aac>
   530e0:	ldr	x1, [x0, #24]
   530e4:	cbnz	x1, 530c0 <aarch64_get_opcode@@Base+0x4aac>
   530e8:	mov	x1, x0
   530ec:	b	54300 <aarch64_get_opcode@@Base+0x5cec>
   530f0:	mov	x1, x0
   530f4:	b	54300 <aarch64_get_opcode@@Base+0x5cec>
   530f8:	bl	35670 <abort@plt>
   530fc:	ldr	x1, [x0, #40]
   53100:	ldr	x2, [x0, #32]
   53104:	str	x2, [sp, #360]
   53108:	cbz	w4, 5338c <aarch64_get_opcode@@Base+0x4d78>
   5310c:	orr	x1, x1, #0xf0000000
   53110:	orr	x5, x2, #0xe0000000
   53114:	str	x5, [sp, #360]
   53118:	ldr	w5, [x0]
   5311c:	cmp	w5, #0x2
   53120:	b.eq	542f4 <aarch64_get_opcode@@Base+0x5ce0>  // b.none
   53124:	mov	w5, w8
   53128:	and	x1, x26, x1
   5312c:	ldr	x7, [sp, #360]
   53130:	cmp	x1, x7
   53134:	b.ne	542fc <aarch64_get_opcode@@Base+0x5ce8>  // b.any
   53138:	tst	x3, x9
   5313c:	b.ne	53158 <aarch64_get_opcode@@Base+0x4b44>  // b.any
   53140:	ldr	x1, [x0, #16]
   53144:	tst	x11, x1
   53148:	b.ne	53158 <aarch64_get_opcode@@Base+0x4b44>  // b.any
   5314c:	ldr	x1, [x0, #24]
   53150:	tst	x24, x1
   53154:	b.eq	54344 <aarch64_get_opcode@@Base+0x5d30>  // b.none
   53158:	and	x1, x2, #0xffffffffffefffff
   5315c:	cmp	x1, x17
   53160:	ccmp	x1, x16, #0x4, ne  // ne = any
   53164:	b.ne	533bc <aarch64_get_opcode@@Base+0x4da8>  // b.any
   53168:	cbz	x18, 54294 <aarch64_get_opcode@@Base+0x5c80>
   5316c:	cmp	x11, x30
   53170:	ccmn	x9, #0x1, #0x0, eq  // eq = none
   53174:	b.eq	5429c <aarch64_get_opcode@@Base+0x5c88>  // b.none
   53178:	cbnz	w10, 5434c <aarch64_get_opcode@@Base+0x5d38>
   5317c:	str	w5, [sp, #120]
   53180:	ldrb	w2, [x20]
   53184:	cbz	w2, 542c8 <aarch64_get_opcode@@Base+0x5cb4>
   53188:	asr	x5, x19, #12
   5318c:	ubfx	w4, w19, #12, #4
   53190:	asr	x3, x19, #22
   53194:	ubfiz	w0, w3, #4, #1
   53198:	orr	w0, w0, w4
   5319c:	str	w0, [sp, #284]
   531a0:	and	w0, w3, #0x1
   531a4:	add	w0, w0, w4, lsl #1
   531a8:	str	w0, [sp, #316]
   531ac:	asr	x6, x19, #16
   531b0:	ubfx	w25, w19, #16, #4
   531b4:	asr	x0, x19, #7
   531b8:	ubfiz	w1, w0, #4, #1
   531bc:	orr	w1, w1, w25
   531c0:	str	w1, [sp, #320]
   531c4:	and	w0, w0, #0x1
   531c8:	add	w0, w0, w25, lsl #1
   531cc:	str	w0, [sp, #336]
   531d0:	and	w0, w19, #0xf
   531d4:	asr	x1, x19, #5
   531d8:	ubfiz	w7, w1, #4, #1
   531dc:	orr	w7, w7, w0
   531e0:	str	w7, [sp, #324]
   531e4:	ubfx	w7, w19, #1, #7
   531e8:	str	w7, [sp, #312]
   531ec:	and	w1, w1, #0x1
   531f0:	add	w1, w1, w0, lsl #1
   531f4:	str	w1, [sp, #340]
   531f8:	asr	x1, x19, #4
   531fc:	ubfx	w7, w19, #4, #4
   53200:	str	w7, [sp, #172]
   53204:	ubfx	w28, w19, #21, #1
   53208:	and	w7, w3, #0x6
   5320c:	orr	w9, w28, w7
   53210:	str	w9, [sp, #224]
   53214:	ubfx	x7, x19, #16, #4
   53218:	str	x7, [sp, #136]
   5321c:	ands	x10, x19, #0x800000
   53220:	str	x10, [sp, #176]
   53224:	mov	w8, #0x2b                  	// #43
   53228:	mov	w7, #0x2d                  	// #45
   5322c:	csel	w7, w8, w7, ne  // ne = any
   53230:	str	w7, [sp, #184]
   53234:	and	w7, w9, #0xfffffffd
   53238:	str	w7, [sp, #280]
   5323c:	and	w7, w19, #0xff
   53240:	str	w7, [sp, #188]
   53244:	ubfiz	x7, x19, #2, #8
   53248:	str	x7, [sp, #288]
   5324c:	neg	x7, x7
   53250:	str	x7, [sp, #296]
   53254:	adrp	x7, 59000 <xexit@@Base+0x74c>
   53258:	add	x7, x7, #0x9c0
   5325c:	cmp	x10, #0x0
   53260:	adrp	x8, 65000 <fields@@Base+0x4c40>
   53264:	add	x8, x8, #0x4b8
   53268:	csel	x8, x8, x7, eq  // eq = none
   5326c:	str	x8, [sp, #272]
   53270:	ands	x8, x19, #0x200000
   53274:	str	x8, [sp, #248]
   53278:	adrp	x8, 65000 <fields@@Base+0x4c40>
   5327c:	add	x8, x8, #0x4c0
   53280:	csel	x7, x8, x7, ne  // ne = any
   53284:	str	x7, [sp, #264]
   53288:	and	x28, x19, #0xf
   5328c:	and	x1, x1, #0x10
   53290:	orr	x1, x1, x28
   53294:	mov	x7, #0x20                  	// #32
   53298:	cmp	x1, #0x0
   5329c:	csel	x1, x1, x7, ne  // ne = any
   532a0:	str	x1, [sp, #216]
   532a4:	and	x1, x6, #0xf0
   532a8:	orr	x1, x1, x28
   532ac:	str	x1, [sp, #200]
   532b0:	str	w1, [sp, #208]
   532b4:	asr	x6, x19, #1
   532b8:	and	w1, w6, #0x70
   532bc:	orr	w0, w1, w0
   532c0:	sub	w8, w0, #0x80
   532c4:	tst	x1, #0x40
   532c8:	csel	w0, w0, w8, eq  // eq = none
   532cc:	str	w0, [sp, #212]
   532d0:	ubfiz	w0, w3, #4, #1
   532d4:	orr	w0, w0, w4
   532d8:	str	w0, [sp, #256]
   532dc:	and	x0, x19, #0x100
   532e0:	str	x0, [sp, #144]
   532e4:	ubfx	w0, w19, #8, #1
   532e8:	asr	x0, x19, x0
   532ec:	and	w0, w0, #0x7f
   532f0:	str	w0, [sp, #168]
   532f4:	ubfiz	w1, w5, #1, #4
   532f8:	and	w0, w3, #0x1
   532fc:	orr	w0, w1, w0
   53300:	str	w0, [sp, #260]
   53304:	asr	x0, x19, #18
   53308:	and	w0, w0, #0x10
   5330c:	orr	w0, w0, w4
   53310:	str	w0, [sp, #228]
   53314:	and	w1, w6, #0x3f
   53318:	str	w1, [sp, #232]
   5331c:	add	w0, w0, w1
   53320:	str	w0, [sp, #240]
   53324:	sub	w0, w0, #0x1
   53328:	str	w0, [sp, #244]
   5332c:	mov	x0, #0x1200000             	// #18874368
   53330:	ands	x0, x19, x0
   53334:	str	x0, [sp, #192]
   53338:	cset	w0, ne  // ne = any
   5333c:	cmp	w25, #0xf
   53340:	csel	w0, w0, wzr, eq  // eq = none
   53344:	str	w0, [sp, #236]
   53348:	tst	x19, #0x80
   5334c:	mov	w0, #0x10                  	// #16
   53350:	csel	w7, w7, w0, ne  // ne = any
   53354:	sxtw	x0, w7
   53358:	str	x0, [sp, #328]
   5335c:	str	xzr, [sp, #112]
   53360:	mov	x0, #0x10                  	// #16
   53364:	str	x0, [sp, #304]
   53368:	mov	x0, #0x100                 	// #256
   5336c:	movk	x0, #0x40, lsl #16
   53370:	and	x0, x19, x0
   53374:	str	x0, [sp, #152]
   53378:	adrp	x27, 8f000 <aarch64_operands@@Base+0x2bc0>
   5337c:	add	x27, x27, #0xc70
   53380:	add	x0, x27, #0x370
   53384:	str	x0, [sp, #344]
   53388:	b	5423c <aarch64_get_opcode@@Base+0x5c28>
   5338c:	cmp	w6, #0xe
   53390:	csel	w5, w6, w13, ne  // ne = any
   53394:	cmp	x15, x14
   53398:	b.eq	533b0 <aarch64_get_opcode@@Base+0x4d9c>  // b.none
   5339c:	ldr	w7, [x0]
   533a0:	cmp	w7, #0x1
   533a4:	b.ne	53128 <aarch64_get_opcode@@Base+0x4b14>  // b.any
   533a8:	mov	x1, x0
   533ac:	b	54300 <aarch64_get_opcode@@Base+0x5cec>
   533b0:	orr	x1, x1, #0xf0000000
   533b4:	mov	w5, w13
   533b8:	b	5339c <aarch64_get_opcode@@Base+0x4d88>
   533bc:	and	x3, x2, #0xffffffffffffffef
   533c0:	cmp	x3, x28
   533c4:	ccmp	x1, x27, #0x4, ne  // ne = any
   533c8:	cset	w3, eq  // eq = none
   533cc:	mov	x7, #0xfe000000            	// #4261412864
   533d0:	cmp	x2, x7
   533d4:	ccmp	x2, x25, #0x4, ne  // ne = any
   533d8:	csinc	w2, w3, wzr, ne  // ne = any
   533dc:	cbz	w2, 53408 <aarch64_get_opcode@@Base+0x4df4>
   533e0:	cmp	w23, #0x2
   533e4:	b.ls	54354 <aarch64_get_opcode@@Base+0x5d40>  // b.plast
   533e8:	cbz	x18, 54270 <aarch64_get_opcode@@Base+0x5c5c>
   533ec:	cmp	x11, x30
   533f0:	ccmn	x9, #0x1, #0x0, eq  // eq = none
   533f4:	b.eq	5427c <aarch64_get_opcode@@Base+0x5c68>  // b.none
   533f8:	cbnz	w10, 5435c <aarch64_get_opcode@@Base+0x5d48>
   533fc:	str	w5, [sp, #120]
   53400:	str	wzr, [sp, #108]
   53404:	b	53180 <aarch64_get_opcode@@Base+0x4b6c>
   53408:	mov	x2, #0xf80                 	// #3968
   5340c:	movk	x2, #0xec00, lsl #16
   53410:	cmp	x1, x2
   53414:	b.ne	54288 <aarch64_get_opcode@@Base+0x5c74>  // b.any
   53418:	ldr	x1, [sp, #112]
   5341c:	cbz	x1, 54364 <aarch64_get_opcode@@Base+0x5d50>
   53420:	str	w5, [sp, #120]
   53424:	str	wzr, [sp, #108]
   53428:	b	53180 <aarch64_get_opcode@@Base+0x4b6c>
   5342c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53430:	add	x1, x1, #0x798
   53434:	mov	x0, x22
   53438:	blr	x21
   5343c:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53440:	and	x0, x26, #0xff
   53444:	and	x20, x26, #0x7f
   53448:	cmp	w24, #0x4b
   5344c:	csel	x20, x20, x0, eq  // eq = none
   53450:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   53454:	ldr	w0, [x0, #1616]
   53458:	add	x0, x0, x0, lsl #3
   5345c:	ldr	x1, [sp, #136]
   53460:	add	x0, x1, x0, lsl #1
   53464:	add	x0, x0, #0x2
   53468:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   5346c:	add	x1, x1, #0xb70
   53470:	ldr	x2, [x1, x0, lsl #3]
   53474:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53478:	add	x1, x1, #0x4f8
   5347c:	mov	x0, x22
   53480:	blr	x21
   53484:	ldr	x0, [sp, #192]
   53488:	cbz	x0, 534bc <aarch64_get_opcode@@Base+0x4ea8>
   5348c:	lsl	x0, x20, #1
   53490:	lsl	x20, x20, #2
   53494:	ldr	w1, [sp, #124]
   53498:	cmp	w1, #0x9
   5349c:	csel	x20, x20, x0, ne  // ne = any
   534a0:	ldr	x0, [sp, #176]
   534a4:	cmp	x0, #0x0
   534a8:	cneg	x20, x20, eq  // eq = none
   534ac:	cmp	w25, #0xf
   534b0:	ldr	x0, [sp, #112]
   534b4:	csel	x0, x0, x20, eq  // eq = none
   534b8:	str	x0, [sp, #112]
   534bc:	tbz	w19, #24, 53550 <aarch64_get_opcode@@Base+0x4f3c>
   534c0:	cbz	x20, 53520 <aarch64_get_opcode@@Base+0x4f0c>
   534c4:	ldr	x3, [sp, #264]
   534c8:	mov	w2, w20
   534cc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   534d0:	add	x1, x1, #0xb10
   534d4:	mov	x0, x22
   534d8:	blr	x21
   534dc:	ldr	w0, [sp, #236]
   534e0:	cbz	w0, 54230 <aarch64_get_opcode@@Base+0x5c1c>
   534e4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   534e8:	add	x1, x1, #0x4f0
   534ec:	mov	x0, x22
   534f0:	blr	x21
   534f4:	ldr	x2, [sp, #128]
   534f8:	ldr	w0, [x2, #172]
   534fc:	lsl	w0, w0, #1
   53500:	ldr	x1, [sp, #160]
   53504:	and	x1, x1, #0xfffffffffffffffc
   53508:	add	x0, x1, w0, sxtw
   5350c:	mov	x1, x2
   53510:	ldr	x2, [x2, #120]
   53514:	add	x0, x0, x20
   53518:	blr	x2
   5351c:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53520:	ldr	x0, [sp, #176]
   53524:	cbnz	x0, 5353c <aarch64_get_opcode@@Base+0x4f28>
   53528:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5352c:	add	x1, x1, #0xb20
   53530:	mov	x0, x22
   53534:	blr	x21
   53538:	b	534dc <aarch64_get_opcode@@Base+0x4ec8>
   5353c:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   53540:	add	x1, x1, #0x0
   53544:	mov	x0, x22
   53548:	blr	x21
   5354c:	b	534dc <aarch64_get_opcode@@Base+0x4ec8>
   53550:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   53554:	add	x1, x1, #0x0
   53558:	mov	x0, x22
   5355c:	blr	x21
   53560:	ldr	x0, [sp, #248]
   53564:	cbz	x0, 535a0 <aarch64_get_opcode@@Base+0x4f8c>
   53568:	cbz	x20, 53584 <aarch64_get_opcode@@Base+0x4f70>
   5356c:	mov	w2, w20
   53570:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53574:	add	x1, x1, #0x108
   53578:	mov	x0, x22
   5357c:	blr	x21
   53580:	b	534dc <aarch64_get_opcode@@Base+0x4ec8>
   53584:	ldr	x0, [sp, #176]
   53588:	cbnz	x0, 534dc <aarch64_get_opcode@@Base+0x4ec8>
   5358c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53590:	add	x1, x1, #0xb28
   53594:	mov	x0, x22
   53598:	blr	x21
   5359c:	b	534dc <aarch64_get_opcode@@Base+0x4ec8>
   535a0:	str	x20, [sp, #112]
   535a4:	ldr	x0, [sp, #176]
   535a8:	orr	x1, x0, x20
   535ac:	adrp	x0, 59000 <xexit@@Base+0x74c>
   535b0:	add	x0, x0, #0x9c0
   535b4:	adrp	x2, 65000 <fields@@Base+0x4c40>
   535b8:	add	x2, x2, #0x4b8
   535bc:	cmp	x1, #0x0
   535c0:	mov	w3, w20
   535c4:	csel	x2, x2, x0, eq  // eq = none
   535c8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   535cc:	add	x1, x1, #0xb30
   535d0:	mov	x0, x22
   535d4:	blr	x21
   535d8:	b	534dc <aarch64_get_opcode@@Base+0x4ec8>
   535dc:	ldr	w0, [sp, #232]
   535e0:	cmp	w0, #0x1
   535e4:	b.eq	53610 <aarch64_get_opcode@@Base+0x4ffc>  // b.none
   535e8:	ldr	w0, [sp, #240]
   535ec:	cmp	w0, #0x20
   535f0:	b.le	53628 <aarch64_get_opcode@@Base+0x5014>
   535f4:	ldr	w3, [sp, #244]
   535f8:	ldr	w2, [sp, #228]
   535fc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53600:	add	x1, x1, #0xb40
   53604:	mov	x0, x22
   53608:	blr	x21
   5360c:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53610:	ldr	w2, [sp, #228]
   53614:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53618:	add	x1, x1, #0x978
   5361c:	mov	x0, x22
   53620:	blr	x21
   53624:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53628:	ldr	w3, [sp, #244]
   5362c:	ldr	w2, [sp, #228]
   53630:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53634:	add	x1, x1, #0x998
   53638:	mov	x0, x22
   5363c:	blr	x21
   53640:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53644:	ldr	x0, [sp, #144]
   53648:	cbz	x0, 53674 <aarch64_get_opcode@@Base+0x5060>
   5364c:	ldr	w3, [sp, #256]
   53650:	mov	w2, #0x64                  	// #100
   53654:	mov	w0, #0xf                   	// #15
   53658:	ldr	w1, [sp, #168]
   5365c:	cbnz	w1, 53684 <aarch64_get_opcode@@Base+0x5070>
   53660:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53664:	add	x1, x1, #0xb60
   53668:	mov	x0, x22
   5366c:	blr	x21
   53670:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53674:	ldr	w3, [sp, #260]
   53678:	mov	w2, #0x73                  	// #115
   5367c:	mov	w0, #0x1f                  	// #31
   53680:	b	53658 <aarch64_get_opcode@@Base+0x5044>
   53684:	ldr	w1, [sp, #168]
   53688:	cmp	w1, #0x1
   5368c:	b.eq	536c8 <aarch64_get_opcode@@Base+0x50b4>  // b.none
   53690:	ldr	w1, [sp, #168]
   53694:	add	w5, w1, w3
   53698:	sub	w5, w5, #0x1
   5369c:	cmp	w0, w5
   536a0:	b.ge	536dc <aarch64_get_opcode@@Base+0x50c8>  // b.tcont
   536a4:	asr	w4, w5, #1
   536a8:	ldr	x0, [sp, #144]
   536ac:	cmp	x0, #0x0
   536b0:	csel	w4, w4, w5, eq  // eq = none
   536b4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   536b8:	add	x1, x1, #0xb78
   536bc:	mov	x0, x22
   536c0:	blr	x21
   536c4:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   536c8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   536cc:	add	x1, x1, #0xb68
   536d0:	mov	x0, x22
   536d4:	blr	x21
   536d8:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   536dc:	mov	w4, w2
   536e0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   536e4:	add	x1, x1, #0xb98
   536e8:	mov	x0, x22
   536ec:	blr	x21
   536f0:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   536f4:	ldr	w0, [sp, #120]
   536f8:	cmp	w0, #0x10
   536fc:	b.eq	53724 <aarch64_get_opcode@@Base+0x5110>  // b.none
   53700:	mov	w0, #0x1                   	// #1
   53704:	str	w0, [sp, #108]
   53708:	ldr	w0, [sp, #120]
   5370c:	cmp	w0, #0x10
   53710:	ldr	w0, [sp, #124]
   53714:	ccmp	w0, #0x9, #0x0, ne  // ne = any
   53718:	ldr	w0, [sp, #108]
   5371c:	csinc	w0, w0, wzr, ne  // ne = any
   53720:	str	w0, [sp, #108]
   53724:	add	x0, x27, #0x188
   53728:	ldr	w1, [sp, #120]
   5372c:	ldr	x2, [x0, w1, sxtw #3]
   53730:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   53734:	add	x1, x1, #0x588
   53738:	mov	x0, x22
   5373c:	blr	x21
   53740:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53744:	ldr	w2, [sp, #212]
   53748:	adrp	x1, 6b000 <fields@@Base+0xac40>
   5374c:	add	x1, x1, #0x7d0
   53750:	mov	x0, x22
   53754:	blr	x21
   53758:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   5375c:	mov	w4, #0x16                  	// #22
   53760:	mov	w3, w4
   53764:	mov	w2, #0xf                   	// #15
   53768:	mov	w1, #0xd                   	// #13
   5376c:	mov	x0, x26
   53770:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   53774:	cmp	x0, #0xd
   53778:	b.eq	537f8 <aarch64_get_opcode@@Base+0x51e4>  // b.none
   5377c:	b.hi	537c0 <aarch64_get_opcode@@Base+0x51ac>  // b.pmore
   53780:	cmp	x0, #0x2
   53784:	b.eq	537e4 <aarch64_get_opcode@@Base+0x51d0>  // b.none
   53788:	cmp	x0, #0xc
   5378c:	b.ne	537a4 <aarch64_get_opcode@@Base+0x5190>  // b.any
   53790:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53794:	add	x1, x1, #0xbc8
   53798:	mov	x0, x22
   5379c:	blr	x21
   537a0:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   537a4:	cmp	x0, #0x1
   537a8:	b.ne	53820 <aarch64_get_opcode@@Base+0x520c>  // b.any
   537ac:	adrp	x1, 65000 <fields@@Base+0x4c40>
   537b0:	add	x1, x1, #0xbb0
   537b4:	mov	x0, x22
   537b8:	blr	x21
   537bc:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   537c0:	cmp	x0, #0xe
   537c4:	b.eq	5380c <aarch64_get_opcode@@Base+0x51f8>  // b.none
   537c8:	cmp	x0, #0xf
   537cc:	b.ne	53820 <aarch64_get_opcode@@Base+0x520c>  // b.any
   537d0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   537d4:	add	x1, x1, #0xbe0
   537d8:	mov	x0, x22
   537dc:	blr	x21
   537e0:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   537e4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   537e8:	add	x1, x1, #0xbb8
   537ec:	mov	x0, x22
   537f0:	blr	x21
   537f4:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   537f8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   537fc:	add	x1, x1, #0xbd0
   53800:	mov	x0, x22
   53804:	blr	x21
   53808:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   5380c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53810:	add	x1, x1, #0xbd8
   53814:	mov	x0, x22
   53818:	blr	x21
   5381c:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53820:	mov	x2, x0
   53824:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53828:	add	x1, x1, #0xbe8
   5382c:	mov	x0, x22
   53830:	blr	x21
   53834:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53838:	and	x0, x19, #0x7f8000
   5383c:	and	x0, x0, #0xffffffffffc0ffff
   53840:	cmp	x0, #0x8, lsl #12
   53844:	b.eq	5387c <aarch64_get_opcode@@Base+0x5268>  // b.none
   53848:	cmp	x0, #0x400, lsl #12
   5384c:	b.eq	53890 <aarch64_get_opcode@@Base+0x527c>  // b.none
   53850:	cbz	x0, 53868 <aarch64_get_opcode@@Base+0x5254>
   53854:	adrp	x1, 64000 <fields@@Base+0x3c40>
   53858:	add	x1, x1, #0xd60
   5385c:	mov	x0, x22
   53860:	blr	x21
   53864:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53868:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   5386c:	add	x1, x1, #0xa48
   53870:	mov	x0, x22
   53874:	blr	x21
   53878:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   5387c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53880:	add	x1, x1, #0x4b0
   53884:	mov	x0, x22
   53888:	blr	x21
   5388c:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53890:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   53894:	add	x1, x1, #0xa78
   53898:	mov	x0, x22
   5389c:	blr	x21
   538a0:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   538a4:	and	x0, x19, #0xfff80
   538a8:	and	x0, x0, #0xfffffffffff800ff
   538ac:	cmp	x0, #0x80
   538b0:	b.eq	538fc <aarch64_get_opcode@@Base+0x52e8>  // b.none
   538b4:	cmp	x0, #0x80, lsl #12
   538b8:	b.eq	53910 <aarch64_get_opcode@@Base+0x52fc>  // b.none
   538bc:	cbz	x0, 538e8 <aarch64_get_opcode@@Base+0x52d4>
   538c0:	mov	w2, #0x5                   	// #5
   538c4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   538c8:	add	x1, x1, #0xc00
   538cc:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   538d0:	add	x0, x0, #0x908
   538d4:	bl	359e0 <dcgettext@plt>
   538d8:	mov	x1, x0
   538dc:	mov	x0, x22
   538e0:	blr	x21
   538e4:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   538e8:	adrp	x1, 59000 <xexit@@Base+0x74c>
   538ec:	add	x1, x1, #0x780
   538f0:	mov	x0, x22
   538f4:	blr	x21
   538f8:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   538fc:	adrp	x1, 6c000 <fields@@Base+0xbc40>
   53900:	add	x1, x1, #0xe60
   53904:	mov	x0, x22
   53908:	blr	x21
   5390c:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53910:	adrp	x1, 6f000 <fields@@Base+0xec40>
   53914:	add	x1, x1, #0x518
   53918:	mov	x0, x22
   5391c:	blr	x21
   53920:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53924:	and	x0, x19, #0x7f8000
   53928:	and	x0, x0, #0xffffffffffc0ffff
   5392c:	cmp	x0, #0x8, lsl #12
   53930:	b.eq	53968 <aarch64_get_opcode@@Base+0x5354>  // b.none
   53934:	cmp	x0, #0x400, lsl #12
   53938:	b.eq	5397c <aarch64_get_opcode@@Base+0x5368>  // b.none
   5393c:	cbz	x0, 53954 <aarch64_get_opcode@@Base+0x5340>
   53940:	adrp	x1, 5f000 <xexit@@Base+0x674c>
   53944:	add	x1, x1, #0x9e0
   53948:	mov	x0, x22
   5394c:	blr	x21
   53950:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53954:	adrp	x1, 59000 <xexit@@Base+0x74c>
   53958:	add	x1, x1, #0x780
   5395c:	mov	x0, x22
   53960:	blr	x21
   53964:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53968:	adrp	x1, 6c000 <fields@@Base+0xbc40>
   5396c:	add	x1, x1, #0xe60
   53970:	mov	x0, x22
   53974:	blr	x21
   53978:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   5397c:	adrp	x1, 6f000 <fields@@Base+0xec40>
   53980:	add	x1, x1, #0x518
   53984:	mov	x0, x22
   53988:	blr	x21
   5398c:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53990:	and	x0, x19, #0x60
   53994:	cmp	x0, #0x20
   53998:	b.eq	539bc <aarch64_get_opcode@@Base+0x53a8>  // b.none
   5399c:	cmp	x0, #0x40
   539a0:	b.eq	539d0 <aarch64_get_opcode@@Base+0x53bc>  // b.none
   539a4:	cbz	x0, 54230 <aarch64_get_opcode@@Base+0x5c1c>
   539a8:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   539ac:	add	x1, x1, #0x2f0
   539b0:	mov	x0, x22
   539b4:	blr	x21
   539b8:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   539bc:	adrp	x1, 5f000 <xexit@@Base+0x674c>
   539c0:	add	x1, x1, #0x9e0
   539c4:	mov	x0, x22
   539c8:	blr	x21
   539cc:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   539d0:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   539d4:	add	x1, x1, #0xa80
   539d8:	mov	x0, x22
   539dc:	blr	x21
   539e0:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   539e4:	add	x3, sp, #0x164
   539e8:	add	x2, sp, #0x168
   539ec:	mov	x1, x26
   539f0:	mov	x0, x23
   539f4:	bl	4f250 <aarch64_get_opcode@@Base+0xc3c>
   539f8:	mov	x23, x0
   539fc:	ldrb	w0, [x0]
   53a00:	sub	w0, w0, #0x27
   53a04:	cmp	w0, #0x51
   53a08:	b.hi	53ea8 <aarch64_get_opcode@@Base+0x5894>  // b.pmore
   53a0c:	adrp	x1, 74000 <fields@@Base+0x13c40>
   53a10:	add	x1, x1, #0x670
   53a14:	ldrh	w0, [x1, w0, uxtw #1]
   53a18:	adr	x1, 53a24 <aarch64_get_opcode@@Base+0x5410>
   53a1c:	add	x0, x1, w0, sxth #2
   53a20:	br	x0
   53a24:	ldr	x0, [sp, #360]
   53a28:	cmp	x0, #0xf
   53a2c:	ldr	w0, [sp, #108]
   53a30:	csinc	w0, w0, wzr, ne  // ne = any
   53a34:	str	w0, [sp, #108]
   53a38:	ldrb	w0, [x23, #1]
   53a3c:	cmp	w0, #0x75
   53a40:	b.eq	53a7c <aarch64_get_opcode@@Base+0x5468>  // b.none
   53a44:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   53a48:	ldr	w0, [x0, #1616]
   53a4c:	add	x0, x0, x0, lsl #3
   53a50:	ldr	x1, [sp, #360]
   53a54:	add	x0, x1, x0, lsl #1
   53a58:	add	x0, x0, #0x2
   53a5c:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   53a60:	add	x1, x1, #0xb70
   53a64:	ldr	x2, [x1, x0, lsl #3]
   53a68:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   53a6c:	add	x1, x1, #0x588
   53a70:	mov	x0, x22
   53a74:	blr	x21
   53a78:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53a7c:	add	x23, x23, #0x1
   53a80:	ldr	x0, [sp, #360]
   53a84:	ldr	x1, [sp, #304]
   53a88:	cmp	x0, x1
   53a8c:	b.eq	53a98 <aarch64_get_opcode@@Base+0x5484>  // b.none
   53a90:	str	x0, [sp, #304]
   53a94:	b	53a44 <aarch64_get_opcode@@Base+0x5430>
   53a98:	str	x0, [sp, #304]
   53a9c:	mov	w0, #0x1                   	// #1
   53aa0:	str	w0, [sp, #108]
   53aa4:	b	53a44 <aarch64_get_opcode@@Base+0x5430>
   53aa8:	tbnz	w19, #6, 53ac4 <aarch64_get_opcode@@Base+0x54b0>
   53aac:	ldr	x2, [sp, #360]
   53ab0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53ab4:	add	x1, x1, #0x9c0
   53ab8:	mov	x0, x22
   53abc:	blr	x21
   53ac0:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53ac4:	ldr	x2, [sp, #360]
   53ac8:	tbz	w2, #0, 53ae4 <aarch64_get_opcode@@Base+0x54d0>
   53acc:	lsr	x2, x2, #1
   53ad0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53ad4:	add	x1, x1, #0x9c8
   53ad8:	mov	x0, x22
   53adc:	blr	x21
   53ae0:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53ae4:	lsr	x2, x2, #1
   53ae8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53aec:	add	x1, x1, #0x9e0
   53af0:	mov	x0, x22
   53af4:	blr	x21
   53af8:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53afc:	ldr	x2, [sp, #360]
   53b00:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53b04:	add	x1, x1, #0x800
   53b08:	mov	x0, x22
   53b0c:	blr	x21
   53b10:	ldr	x0, [sp, #360]
   53b14:	str	x0, [sp, #112]
   53b18:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53b1c:	ldr	x2, [sp, #360]
   53b20:	lsl	w3, w2, #24
   53b24:	and	w3, w3, #0x80000000
   53b28:	ubfiz	w0, w2, #19, #6
   53b2c:	orr	w3, w3, w0
   53b30:	tst	x2, #0x40
   53b34:	mov	w0, #0x3e000000            	// #1040187392
   53b38:	mov	w1, #0x40000000            	// #1073741824
   53b3c:	csel	w0, w0, w1, ne  // ne = any
   53b40:	orr	w3, w3, w0
   53b44:	ubfx	x1, x3, #23, #8
   53b48:	sub	w1, w1, #0x7c
   53b4c:	mov	w0, #0x312d                	// #12589
   53b50:	movk	w0, #0x1, lsl #16
   53b54:	lsl	w1, w0, w1
   53b58:	and	x0, x2, #0xf
   53b5c:	add	x0, x0, #0x10
   53b60:	mul	w0, w1, w0
   53b64:	mov	w1, #0xde83                	// #56963
   53b68:	movk	w1, #0x431b, lsl #16
   53b6c:	umull	x1, w0, w1
   53b70:	lsr	x1, x1, #50
   53b74:	mov	w4, #0x4240                	// #16960
   53b78:	movk	w4, #0xf, lsl #16
   53b7c:	msub	w1, w1, w4, w0
   53b80:	cbnz	w1, 53bd4 <aarch64_get_opcode@@Base+0x55c0>
   53b84:	tst	x2, #0x80
   53b88:	mov	w5, #0xca6b                	// #51819
   53b8c:	movk	w5, #0x6b5f, lsl #16
   53b90:	umull	x5, w0, w5
   53b94:	lsr	x5, x5, #54
   53b98:	mov	w1, #0x9680                	// #38528
   53b9c:	movk	w1, #0x98, lsl #16
   53ba0:	msub	w0, w5, w1, w0
   53ba4:	mov	w6, #0xde83                	// #56963
   53ba8:	movk	w6, #0x431b, lsl #16
   53bac:	umull	x6, w0, w6
   53bb0:	lsr	x6, x6, #50
   53bb4:	mov	w4, #0x2d                  	// #45
   53bb8:	mov	w0, #0x20                  	// #32
   53bbc:	csel	w4, w4, w0, ne  // ne = any
   53bc0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53bc4:	add	x1, x1, #0xc18
   53bc8:	mov	x0, x22
   53bcc:	blr	x21
   53bd0:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53bd4:	mov	w1, #0x1759                	// #5977
   53bd8:	movk	w1, #0xd1b7, lsl #16
   53bdc:	umull	x1, w0, w1
   53be0:	lsr	x1, x1, #45
   53be4:	mov	w4, #0x2710                	// #10000
   53be8:	msub	w1, w1, w4, w0
   53bec:	cbnz	w1, 53c40 <aarch64_get_opcode@@Base+0x562c>
   53bf0:	tst	x2, #0x80
   53bf4:	mov	w5, #0xca6b                	// #51819
   53bf8:	movk	w5, #0x6b5f, lsl #16
   53bfc:	umull	x5, w0, w5
   53c00:	lsr	x5, x5, #54
   53c04:	mov	w1, #0x9680                	// #38528
   53c08:	movk	w1, #0x98, lsl #16
   53c0c:	msub	w0, w5, w1, w0
   53c10:	mov	w6, #0x1759                	// #5977
   53c14:	movk	w6, #0xd1b7, lsl #16
   53c18:	umull	x6, w0, w6
   53c1c:	lsr	x6, x6, #45
   53c20:	mov	w4, #0x2d                  	// #45
   53c24:	mov	w0, #0x20                  	// #32
   53c28:	csel	w4, w4, w0, ne  // ne = any
   53c2c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53c30:	add	x1, x1, #0xc30
   53c34:	mov	x0, x22
   53c38:	blr	x21
   53c3c:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53c40:	tst	x2, #0x80
   53c44:	mov	w5, #0xca6b                	// #51819
   53c48:	movk	w5, #0x6b5f, lsl #16
   53c4c:	umull	x5, w0, w5
   53c50:	lsr	x5, x5, #54
   53c54:	mov	w6, #0x9680                	// #38528
   53c58:	movk	w6, #0x98, lsl #16
   53c5c:	msub	w6, w5, w6, w0
   53c60:	mov	w4, #0x2d                  	// #45
   53c64:	mov	w0, #0x20                  	// #32
   53c68:	csel	w4, w4, w0, ne  // ne = any
   53c6c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53c70:	add	x1, x1, #0xc48
   53c74:	mov	x0, x22
   53c78:	blr	x21
   53c7c:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53c80:	ldr	x2, [sp, #360]
   53c84:	ldr	x0, [sp, #328]
   53c88:	sub	x2, x0, x2
   53c8c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53c90:	add	x1, x1, #0x800
   53c94:	mov	x0, x22
   53c98:	blr	x21
   53c9c:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53ca0:	ldr	x2, [sp, #360]
   53ca4:	cmp	x2, #0x7
   53ca8:	b.ls	53ccc <aarch64_get_opcode@@Base+0x56b8>  // b.plast
   53cac:	add	x0, x27, #0x210
   53cb0:	and	x2, x2, #0x7
   53cb4:	ldr	x2, [x0, x2, lsl #3]
   53cb8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53cbc:	add	x1, x1, #0xc60
   53cc0:	mov	x0, x22
   53cc4:	blr	x21
   53cc8:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53ccc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53cd0:	add	x1, x1, #0xc68
   53cd4:	mov	x0, x22
   53cd8:	blr	x21
   53cdc:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53ce0:	ldr	w0, [sp, #356]
   53ce4:	cmp	w0, #0x2
   53ce8:	b.eq	53d0c <aarch64_get_opcode@@Base+0x56f8>  // b.none
   53cec:	add	x0, x27, #0x270
   53cf0:	ldr	x1, [sp, #360]
   53cf4:	ldr	x2, [x0, x1, lsl #3]
   53cf8:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   53cfc:	add	x1, x1, #0x588
   53d00:	mov	x0, x22
   53d04:	blr	x21
   53d08:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53d0c:	add	x0, x27, #0x250
   53d10:	ldr	x1, [sp, #360]
   53d14:	ldr	x2, [x0, x1, lsl #3]
   53d18:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   53d1c:	add	x1, x1, #0x588
   53d20:	mov	x0, x22
   53d24:	blr	x21
   53d28:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53d2c:	add	x0, x27, #0x2f0
   53d30:	ldr	x1, [sp, #360]
   53d34:	ldr	x2, [x0, x1, lsl #3]
   53d38:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   53d3c:	add	x1, x1, #0x588
   53d40:	mov	x0, x22
   53d44:	blr	x21
   53d48:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53d4c:	ldr	x0, [sp, #360]
   53d50:	ldr	x1, [sp, #344]
   53d54:	ldr	x2, [x1, x0, lsl #3]
   53d58:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   53d5c:	add	x1, x1, #0x588
   53d60:	mov	x0, x22
   53d64:	blr	x21
   53d68:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53d6c:	ldr	w2, [sp, #360]
   53d70:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53d74:	add	x1, x1, #0xc70
   53d78:	mov	x0, x22
   53d7c:	blr	x21
   53d80:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53d84:	ldr	x0, [sp, #360]
   53d88:	cmp	x0, #0x2
   53d8c:	b.eq	53ddc <aarch64_get_opcode@@Base+0x57c8>  // b.none
   53d90:	b.hi	53dac <aarch64_get_opcode@@Base+0x5798>  // b.pmore
   53d94:	cbz	x0, 53dc8 <aarch64_get_opcode@@Base+0x57b4>
   53d98:	adrp	x1, 5f000 <xexit@@Base+0x674c>
   53d9c:	add	x1, x1, #0xc10
   53da0:	mov	x0, x22
   53da4:	blr	x21
   53da8:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53dac:	cmp	x0, #0x3
   53db0:	b.ne	53df0 <aarch64_get_opcode@@Base+0x57dc>  // b.any
   53db4:	adrp	x1, 5f000 <xexit@@Base+0x674c>
   53db8:	add	x1, x1, #0xc60
   53dbc:	mov	x0, x22
   53dc0:	blr	x21
   53dc4:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53dc8:	adrp	x1, 5f000 <xexit@@Base+0x674c>
   53dcc:	add	x1, x1, #0xba0
   53dd0:	mov	x0, x22
   53dd4:	blr	x21
   53dd8:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53ddc:	adrp	x1, 5f000 <xexit@@Base+0x674c>
   53de0:	add	x1, x1, #0xc40
   53de4:	mov	x0, x22
   53de8:	blr	x21
   53dec:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53df0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53df4:	add	x1, x1, #0xc78
   53df8:	mov	x0, x22
   53dfc:	blr	x21
   53e00:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53e04:	add	x20, x23, #0x1
   53e08:	ldr	x0, [sp, #360]
   53e0c:	cbnz	x0, 53eac <aarch64_get_opcode@@Base+0x5898>
   53e10:	ldrb	w2, [x23, #1]
   53e14:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53e18:	add	x1, x1, #0x790
   53e1c:	mov	x0, x22
   53e20:	blr	x21
   53e24:	mov	x23, x20
   53e28:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53e2c:	add	x20, x23, #0x1
   53e30:	ldr	w1, [sp, #356]
   53e34:	mov	x0, #0x1                   	// #1
   53e38:	lsl	x0, x0, x1
   53e3c:	sub	x0, x0, #0x1
   53e40:	ldr	x1, [sp, #360]
   53e44:	cmp	x0, x1
   53e48:	b.eq	53e54 <aarch64_get_opcode@@Base+0x5840>  // b.none
   53e4c:	mov	x23, x20
   53e50:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53e54:	ldrb	w2, [x23, #1]
   53e58:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53e5c:	add	x1, x1, #0x790
   53e60:	mov	x0, x22
   53e64:	blr	x21
   53e68:	mov	x23, x20
   53e6c:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53e70:	mov	w20, #0x1                   	// #1
   53e74:	ldr	w0, [sp, #356]
   53e78:	lsl	w0, w20, w0
   53e7c:	ldr	x1, [sp, #360]
   53e80:	sub	w0, w0, w1
   53e84:	ldrb	w2, [x23, w0, sxtw]
   53e88:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53e8c:	add	x1, x1, #0x790
   53e90:	mov	x0, x22
   53e94:	blr	x21
   53e98:	ldr	w0, [sp, #356]
   53e9c:	lsl	w20, w20, w0
   53ea0:	add	x23, x23, w20, sxtw
   53ea4:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53ea8:	bl	35670 <abort@plt>
   53eac:	mov	x23, x20
   53eb0:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53eb4:	add	x23, x20, #0x2
   53eb8:	ldrb	w0, [x20, #2]
   53ebc:	cmp	w0, #0x32
   53ec0:	b.eq	53f6c <aarch64_get_opcode@@Base+0x5958>  // b.none
   53ec4:	b.hi	53ee8 <aarch64_get_opcode@@Base+0x58d4>  // b.pmore
   53ec8:	cmp	w0, #0x30
   53ecc:	b.eq	53f18 <aarch64_get_opcode@@Base+0x5904>  // b.none
   53ed0:	cmp	w0, #0x31
   53ed4:	b.ne	53f7c <aarch64_get_opcode@@Base+0x5968>  // b.any
   53ed8:	cmp	w24, #0x79
   53edc:	b.eq	54430 <aarch64_get_opcode@@Base+0x5e1c>  // b.none
   53ee0:	ldr	w24, [sp, #284]
   53ee4:	b	53f24 <aarch64_get_opcode@@Base+0x5910>
   53ee8:	cmp	w0, #0x33
   53eec:	b.ne	53f10 <aarch64_get_opcode@@Base+0x58fc>  // b.any
   53ef0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53ef4:	add	x1, x1, #0x7f0
   53ef8:	mov	x0, x22
   53efc:	blr	x21
   53f00:	cmp	w24, #0x79
   53f04:	b.eq	54440 <aarch64_get_opcode@@Base+0x5e2c>  // b.none
   53f08:	ldr	w24, [sp, #284]
   53f0c:	b	53f24 <aarch64_get_opcode@@Base+0x5910>
   53f10:	cmp	w0, #0x34
   53f14:	b.ne	53f7c <aarch64_get_opcode@@Base+0x5968>  // b.any
   53f18:	cmp	w24, #0x79
   53f1c:	b.eq	543f8 <aarch64_get_opcode@@Base+0x5de4>  // b.none
   53f20:	ldr	w24, [sp, #324]
   53f24:	mov	w3, w24
   53f28:	mov	w2, #0x64                  	// #100
   53f2c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53f30:	add	x1, x1, #0xcd8
   53f34:	mov	x0, x22
   53f38:	blr	x21
   53f3c:	ldrb	w0, [x20, #2]
   53f40:	mov	w2, #0x64                  	// #100
   53f44:	cmp	w0, #0x33
   53f48:	b.eq	53f80 <aarch64_get_opcode@@Base+0x596c>  // b.none
   53f4c:	cmp	w0, #0x34
   53f50:	b.ne	54230 <aarch64_get_opcode@@Base+0x5c1c>  // b.any
   53f54:	add	w3, w24, #0x1
   53f58:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53f5c:	add	x1, x1, #0xc88
   53f60:	mov	x0, x22
   53f64:	blr	x21
   53f68:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53f6c:	cmp	w24, #0x79
   53f70:	b.eq	54438 <aarch64_get_opcode@@Base+0x5e24>  // b.none
   53f74:	ldr	w24, [sp, #320]
   53f78:	b	53f24 <aarch64_get_opcode@@Base+0x5910>
   53f7c:	bl	35670 <abort@plt>
   53f80:	ldr	w0, [sp, #312]
   53f84:	mov	w2, #0x64                  	// #100
   53f88:	subs	w0, w0, #0x1
   53f8c:	b.eq	53fa4 <aarch64_get_opcode@@Base+0x5990>  // b.none
   53f90:	add	w3, w0, w24
   53f94:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53f98:	add	x1, x1, #0xc80
   53f9c:	mov	x0, x22
   53fa0:	blr	x21
   53fa4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   53fa8:	add	x1, x1, #0x9a0
   53fac:	mov	x0, x22
   53fb0:	blr	x21
   53fb4:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53fb8:	ldr	x0, [sp, #152]
   53fbc:	cmp	x0, #0x400, lsl #12
   53fc0:	b.eq	54024 <aarch64_get_opcode@@Base+0x5a10>  // b.none
   53fc4:	b.gt	53fe8 <aarch64_get_opcode@@Base+0x59d4>
   53fc8:	cbz	x0, 54010 <aarch64_get_opcode@@Base+0x59fc>
   53fcc:	cmp	x0, #0x100
   53fd0:	b.ne	54230 <aarch64_get_opcode@@Base+0x5c1c>  // b.any
   53fd4:	adrp	x1, 66000 <fields@@Base+0x5c40>
   53fd8:	add	x1, x1, #0xa08
   53fdc:	mov	x0, x22
   53fe0:	blr	x21
   53fe4:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   53fe8:	ldr	x0, [sp, #152]
   53fec:	mov	x1, #0x100                 	// #256
   53ff0:	movk	x1, #0x40, lsl #16
   53ff4:	cmp	x0, x1
   53ff8:	b.ne	54230 <aarch64_get_opcode@@Base+0x5c1c>  // b.any
   53ffc:	adrp	x1, 6c000 <fields@@Base+0xbc40>
   54000:	add	x1, x1, #0xe60
   54004:	mov	x0, x22
   54008:	blr	x21
   5400c:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   54010:	adrp	x1, 5c000 <xexit@@Base+0x374c>
   54014:	add	x1, x1, #0x518
   54018:	mov	x0, x22
   5401c:	blr	x21
   54020:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   54024:	adrp	x1, 5d000 <xexit@@Base+0x474c>
   54028:	add	x1, x1, #0x3c0
   5402c:	mov	x0, x22
   54030:	blr	x21
   54034:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   54038:	ldr	x0, [sp, #200]
   5403c:	str	x0, [sp, #360]
   54040:	ldr	w2, [sp, #208]
   54044:	adrp	x1, 6b000 <fields@@Base+0xac40>
   54048:	add	x1, x1, #0x7d0
   5404c:	mov	x0, x22
   54050:	blr	x21
   54054:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   54058:	ldr	x0, [sp, #144]
   5405c:	cbnz	x0, 543ac <aarch64_get_opcode@@Base+0x5d98>
   54060:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   54064:	ldr	w0, [x0, #1616]
   54068:	add	x0, x0, x0, lsl #3
   5406c:	ldr	x1, [sp, #136]
   54070:	add	x0, x1, x0, lsl #1
   54074:	add	x0, x0, #0x2
   54078:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   5407c:	add	x1, x1, #0xb70
   54080:	ldr	x2, [x1, x0, lsl #3]
   54084:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54088:	add	x1, x1, #0x4f8
   5408c:	mov	x0, x22
   54090:	blr	x21
   54094:	mov	w3, #0x1                   	// #1
   54098:	ldr	w0, [sp, #188]
   5409c:	cbz	w0, 540f4 <aarch64_get_opcode@@Base+0x5ae0>
   540a0:	tbz	w19, #24, 540d4 <aarch64_get_opcode@@Base+0x5ac0>
   540a4:	ldr	x4, [sp, #264]
   540a8:	mul	w3, w0, w3
   540ac:	ldr	x2, [sp, #272]
   540b0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   540b4:	add	x1, x1, #0xc90
   540b8:	mov	x0, x22
   540bc:	blr	x21
   540c0:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   540c4:	ldr	x0, [sp, #296]
   540c8:	str	x0, [sp, #112]
   540cc:	mov	w3, #0x4                   	// #4
   540d0:	b	54098 <aarch64_get_opcode@@Base+0x5a84>
   540d4:	ldr	w0, [sp, #188]
   540d8:	mul	w3, w0, w3
   540dc:	ldr	x2, [sp, #272]
   540e0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   540e4:	add	x1, x1, #0x4e0
   540e8:	mov	x0, x22
   540ec:	blr	x21
   540f0:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   540f4:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   540f8:	add	x1, x1, #0x0
   540fc:	mov	x0, x22
   54100:	blr	x21
   54104:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   54108:	adrp	x2, 8e000 <aarch64_operands@@Base+0x1bc0>
   5410c:	add	x2, x2, #0xb70
   54110:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   54114:	ldr	w3, [x0, #1616]
   54118:	lsl	x0, x3, #3
   5411c:	add	x1, x0, x3
   54120:	add	x1, x28, x1, lsl #1
   54124:	add	x1, x1, #0x2
   54128:	ldr	x4, [x2, x1, lsl #3]
   5412c:	add	x0, x0, x3
   54130:	ldr	x1, [sp, #136]
   54134:	add	x0, x1, x0, lsl #1
   54138:	add	x0, x0, #0x2
   5413c:	ldr	x2, [x2, x0, lsl #3]
   54140:	ldr	w0, [sp, #224]
   54144:	cmp	w0, #0x3
   54148:	b.eq	541cc <aarch64_get_opcode@@Base+0x5bb8>  // b.none
   5414c:	b.le	541b0 <aarch64_get_opcode@@Base+0x5b9c>
   54150:	ldr	w3, [sp, #184]
   54154:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54158:	add	x1, x1, #0xca0
   5415c:	mov	x0, x22
   54160:	blr	x21
   54164:	ldr	w0, [sp, #172]
   54168:	cbz	w0, 54180 <aarch64_get_opcode@@Base+0x5b6c>
   5416c:	ldr	w2, [sp, #172]
   54170:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54174:	add	x1, x1, #0xcc0
   54178:	mov	x0, x22
   5417c:	blr	x21
   54180:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   54184:	add	x1, x1, #0x0
   54188:	mov	x0, x22
   5418c:	blr	x21
   54190:	ldr	w0, [sp, #280]
   54194:	cmp	w0, #0x5
   54198:	b.ne	54230 <aarch64_get_opcode@@Base+0x5c1c>  // b.any
   5419c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   541a0:	add	x1, x1, #0x4c0
   541a4:	mov	x0, x22
   541a8:	blr	x21
   541ac:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   541b0:	cmp	w0, #0x1
   541b4:	b.eq	541cc <aarch64_get_opcode@@Base+0x5bb8>  // b.none
   541b8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   541bc:	add	x1, x1, #0xcd0
   541c0:	mov	x0, x22
   541c4:	blr	x21
   541c8:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   541cc:	ldr	w3, [sp, #184]
   541d0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   541d4:	add	x1, x1, #0xcb0
   541d8:	mov	x0, x22
   541dc:	blr	x21
   541e0:	ldr	w0, [sp, #172]
   541e4:	cbz	w0, 54230 <aarch64_get_opcode@@Base+0x5c1c>
   541e8:	mov	w2, w0
   541ec:	adrp	x1, 65000 <fields@@Base+0x4c40>
   541f0:	add	x1, x1, #0xcc0
   541f4:	mov	x0, x22
   541f8:	blr	x21
   541fc:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   54200:	ldr	x2, [sp, #216]
   54204:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54208:	add	x1, x1, #0x800
   5420c:	mov	x0, x22
   54210:	blr	x21
   54214:	b	54230 <aarch64_get_opcode@@Base+0x5c1c>
   54218:	bl	35670 <abort@plt>
   5421c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54220:	add	x1, x1, #0x790
   54224:	mov	x0, x22
   54228:	blr	x21
   5422c:	mov	x23, x20
   54230:	add	x20, x23, #0x1
   54234:	ldrb	w2, [x23, #1]
   54238:	cbz	w2, 542a4 <aarch64_get_opcode@@Base+0x5c90>
   5423c:	cmp	w2, #0x25
   54240:	b.ne	5421c <aarch64_get_opcode@@Base+0x5c08>  // b.any
   54244:	add	x23, x20, #0x1
   54248:	ldrb	w24, [x20, #1]
   5424c:	sub	w0, w24, #0x25
   54250:	cmp	w0, #0x55
   54254:	b.hi	54218 <aarch64_get_opcode@@Base+0x5c04>  // b.pmore
   54258:	adrp	x1, 74000 <fields@@Base+0x13c40>
   5425c:	add	x1, x1, #0x714
   54260:	ldrh	w0, [x1, w0, uxtw #1]
   54264:	adr	x1, 54270 <aarch64_get_opcode@@Base+0x5c5c>
   54268:	add	x0, x1, w0, sxth #2
   5426c:	br	x0
   54270:	str	w5, [sp, #120]
   54274:	str	wzr, [sp, #108]
   54278:	b	53180 <aarch64_get_opcode@@Base+0x4b6c>
   5427c:	str	w5, [sp, #120]
   54280:	str	wzr, [sp, #108]
   54284:	b	53180 <aarch64_get_opcode@@Base+0x4b6c>
   54288:	str	w5, [sp, #120]
   5428c:	str	wzr, [sp, #108]
   54290:	b	53180 <aarch64_get_opcode@@Base+0x4b6c>
   54294:	str	w5, [sp, #120]
   54298:	b	53180 <aarch64_get_opcode@@Base+0x4b6c>
   5429c:	str	w5, [sp, #120]
   542a0:	b	53180 <aarch64_get_opcode@@Base+0x4b6c>
   542a4:	ldr	x1, [sp, #112]
   542a8:	add	x0, x1, #0x10
   542ac:	cmp	x0, #0x30
   542b0:	b.ls	542c8 <aarch64_get_opcode@@Base+0x5cb4>  // b.plast
   542b4:	mov	w2, w1
   542b8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   542bc:	add	x1, x1, #0x810
   542c0:	mov	x0, x22
   542c4:	blr	x21
   542c8:	ldr	w0, [sp, #108]
   542cc:	cbz	w0, 54384 <aarch64_get_opcode@@Base+0x5d70>
   542d0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   542d4:	add	x1, x1, #0x310
   542d8:	mov	x0, x22
   542dc:	blr	x21
   542e0:	ldp	x25, x26, [sp, #64]
   542e4:	ldp	x27, x28, [sp, #80]
   542e8:	b	54394 <aarch64_get_opcode@@Base+0x5d80>
   542ec:	mov	x1, x0
   542f0:	b	54300 <aarch64_get_opcode@@Base+0x5cec>
   542f4:	mov	x1, x0
   542f8:	b	54300 <aarch64_get_opcode@@Base+0x5cec>
   542fc:	mov	x1, x0
   54300:	add	x0, x1, #0x38
   54304:	ldr	x20, [x0, #48]
   54308:	cbz	x20, 5436c <aarch64_get_opcode@@Base+0x5d58>
   5430c:	ldr	x3, [x0, #8]
   54310:	cbnz	x3, 530fc <aarch64_get_opcode@@Base+0x4ae8>
   54314:	ldr	x1, [x0, #16]
   54318:	cbnz	x1, 530fc <aarch64_get_opcode@@Base+0x4ae8>
   5431c:	ldr	x1, [x0, #24]
   54320:	cbnz	x1, 530fc <aarch64_get_opcode@@Base+0x4ae8>
   54324:	ldr	x1, [x0, #32]
   54328:	cmp	x1, #0x2
   5432c:	b.eq	542ec <aarch64_get_opcode@@Base+0x5cd8>  // b.none
   54330:	cmp	x1, #0x3
   54334:	b.ne	53098 <aarch64_get_opcode@@Base+0x4a84>  // b.any
   54338:	ldr	x9, [x12]
   5433c:	mov	x1, x0
   54340:	b	54300 <aarch64_get_opcode@@Base+0x5cec>
   54344:	mov	x1, x0
   54348:	b	54300 <aarch64_get_opcode@@Base+0x5cec>
   5434c:	mov	x1, x0
   54350:	b	54300 <aarch64_get_opcode@@Base+0x5cec>
   54354:	mov	x1, x0
   54358:	b	54300 <aarch64_get_opcode@@Base+0x5cec>
   5435c:	mov	x1, x0
   54360:	b	54300 <aarch64_get_opcode@@Base+0x5cec>
   54364:	mov	x1, x0
   54368:	b	54300 <aarch64_get_opcode@@Base+0x5cec>
   5436c:	str	wzr, [sp, #108]
   54370:	ldp	x25, x26, [sp, #64]
   54374:	ldp	x27, x28, [sp, #80]
   54378:	b	54394 <aarch64_get_opcode@@Base+0x5d80>
   5437c:	str	wzr, [sp, #108]
   54380:	b	54394 <aarch64_get_opcode@@Base+0x5d80>
   54384:	mov	w0, #0x1                   	// #1
   54388:	str	w0, [sp, #108]
   5438c:	ldp	x25, x26, [sp, #64]
   54390:	ldp	x27, x28, [sp, #80]
   54394:	ldr	w0, [sp, #108]
   54398:	ldp	x19, x20, [sp, #16]
   5439c:	ldp	x21, x22, [sp, #32]
   543a0:	ldp	x23, x24, [sp, #48]
   543a4:	ldp	x29, x30, [sp], #368
   543a8:	ret
   543ac:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   543b0:	ldr	w0, [x0, #1616]
   543b4:	add	x0, x0, x0, lsl #3
   543b8:	ldr	x1, [sp, #136]
   543bc:	add	x0, x1, x0, lsl #1
   543c0:	add	x0, x0, #0x2
   543c4:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   543c8:	add	x1, x1, #0xb70
   543cc:	ldr	x2, [x1, x0, lsl #3]
   543d0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   543d4:	add	x1, x1, #0x4f8
   543d8:	mov	x0, x22
   543dc:	blr	x21
   543e0:	ldr	x0, [sp, #176]
   543e4:	cbz	x0, 540c4 <aarch64_get_opcode@@Base+0x5ab0>
   543e8:	ldr	x0, [sp, #288]
   543ec:	str	x0, [sp, #112]
   543f0:	mov	w3, #0x4                   	// #4
   543f4:	b	54098 <aarch64_get_opcode@@Base+0x5a84>
   543f8:	ldr	w24, [sp, #340]
   543fc:	mov	w3, w24
   54400:	mov	w2, #0x73                  	// #115
   54404:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54408:	add	x1, x1, #0xcd8
   5440c:	mov	x0, x22
   54410:	blr	x21
   54414:	ldrb	w0, [x20, #2]
   54418:	mov	w2, #0x73                  	// #115
   5441c:	cmp	w0, #0x33
   54420:	b.ne	53f4c <aarch64_get_opcode@@Base+0x5938>  // b.any
   54424:	ldr	w0, [sp, #188]
   54428:	mov	w2, #0x73                  	// #115
   5442c:	b	53f88 <aarch64_get_opcode@@Base+0x5974>
   54430:	ldr	w24, [sp, #316]
   54434:	b	543fc <aarch64_get_opcode@@Base+0x5de8>
   54438:	ldr	w24, [sp, #336]
   5443c:	b	543fc <aarch64_get_opcode@@Base+0x5de8>
   54440:	ldr	w24, [sp, #316]
   54444:	b	543fc <aarch64_get_opcode@@Base+0x5de8>
   54448:	stp	x29, x30, [sp, #-432]!
   5444c:	mov	x29, sp
   54450:	stp	x19, x20, [sp, #16]
   54454:	stp	x21, x22, [sp, #32]
   54458:	stp	x23, x24, [sp, #48]
   5445c:	stp	x27, x28, [sp, #80]
   54460:	mov	x28, x0
   54464:	mov	x20, x1
   54468:	mov	x19, x2
   5446c:	ldr	x24, [x1, #8]
   54470:	ldr	x23, [x1]
   54474:	ldr	x21, [x1, #96]
   54478:	mov	w4, #0x0                   	// #0
   5447c:	mov	x3, x2
   54480:	mov	x2, x1
   54484:	mov	x1, x0
   54488:	adrp	x0, 9d000 <aarch64_operands@@Base+0x10bc0>
   5448c:	add	x0, x0, #0xe70
   54490:	bl	52fbc <aarch64_get_opcode@@Base+0x49a8>
   54494:	cbz	w0, 544b0 <aarch64_get_opcode@@Base+0x5e9c>
   54498:	ldp	x19, x20, [sp, #16]
   5449c:	ldp	x21, x22, [sp, #32]
   544a0:	ldp	x23, x24, [sp, #48]
   544a4:	ldp	x27, x28, [sp, #80]
   544a8:	ldp	x29, x30, [sp], #432
   544ac:	ret
   544b0:	mov	w2, #0x0                   	// #0
   544b4:	mov	x1, x19
   544b8:	mov	x0, x20
   544bc:	bl	4fc00 <aarch64_get_opcode@@Base+0x15ec>
   544c0:	cbnz	w0, 54498 <aarch64_get_opcode@@Base+0x5e84>
   544c4:	stp	x25, x26, [sp, #64]
   544c8:	mov	w4, #0x0                   	// #0
   544cc:	mov	x3, x19
   544d0:	mov	x2, x20
   544d4:	mov	x1, x28
   544d8:	adrp	x0, 8f000 <aarch64_operands@@Base+0x2bc0>
   544dc:	add	x0, x0, #0xc70
   544e0:	add	x0, x0, #0x3f0
   544e4:	bl	52fbc <aarch64_get_opcode@@Base+0x49a8>
   544e8:	mov	w26, w0
   544ec:	cbnz	w0, 55350 <aarch64_get_opcode@@Base+0x6d3c>
   544f0:	adrp	x0, 93000 <aarch64_operands@@Base+0x6bc0>
   544f4:	add	x0, x0, #0x280
   544f8:	adrp	x25, 65000 <fields@@Base+0x4c40>
   544fc:	add	x25, x25, #0xce0
   54500:	str	x19, [sp, #104]
   54504:	and	x6, x19, #0xf0000000
   54508:	mov	x5, #0xf0000000            	// #4026531840
   5450c:	b	54538 <aarch64_get_opcode@@Base+0x5f24>
   54510:	cmp	x6, x5
   54514:	b.ne	54580 <aarch64_get_opcode@@Base+0x5f6c>  // b.any
   54518:	and	x3, x1, #0xf0000000
   5451c:	cmp	x3, x5
   54520:	b.eq	54580 <aarch64_get_opcode@@Base+0x5f6c>  // b.none
   54524:	orr	x1, x1, x2
   54528:	cbz	x1, 54580 <aarch64_get_opcode@@Base+0x5f6c>
   5452c:	add	x0, x0, #0x30
   54530:	ldr	x25, [x0, #40]
   54534:	cbz	x25, 552b4 <aarch64_get_opcode@@Base+0x6ca0>
   54538:	ldr	x1, [x0, #32]
   5453c:	ldr	x2, [x0, #24]
   54540:	and	x3, x1, x19
   54544:	cmp	x3, x2
   54548:	b.ne	5452c <aarch64_get_opcode@@Base+0x5f18>  // b.any
   5454c:	ldr	x4, [x0]
   54550:	ldr	x3, [x21]
   54554:	tst	x4, x3
   54558:	b.ne	54510 <aarch64_get_opcode@@Base+0x5efc>  // b.any
   5455c:	ldr	x4, [x0, #8]
   54560:	ldr	x3, [x21, #8]
   54564:	tst	x4, x3
   54568:	b.ne	54510 <aarch64_get_opcode@@Base+0x5efc>  // b.any
   5456c:	ldr	x4, [x0, #16]
   54570:	ldr	x3, [x21, #16]
   54574:	tst	x4, x3
   54578:	b.ne	54510 <aarch64_get_opcode@@Base+0x5efc>  // b.any
   5457c:	b	5452c <aarch64_get_opcode@@Base+0x5f18>
   54580:	ldrb	w2, [x25]
   54584:	cbz	w2, 54784 <aarch64_get_opcode@@Base+0x6170>
   54588:	asr	x4, x19, #7
   5458c:	and	w0, w4, #0x1e
   54590:	str	w0, [sp, #336]
   54594:	str	w19, [sp, #312]
   54598:	and	w6, w19, #0xff
   5459c:	str	w6, [sp, #364]
   545a0:	ror	w0, w6, w0
   545a4:	str	w0, [sp, #340]
   545a8:	mov	w0, w0
   545ac:	str	x0, [sp, #368]
   545b0:	and	w5, w19, #0xf
   545b4:	str	w5, [sp, #328]
   545b8:	asr	x0, x19, #4
   545bc:	and	w1, w0, #0xfff0
   545c0:	orr	w1, w1, w5
   545c4:	str	w1, [sp, #232]
   545c8:	sxtw	x1, w1
   545cc:	str	x1, [sp, #200]
   545d0:	lsr	w1, w19, #28
   545d4:	str	x1, [sp, #168]
   545d8:	add	x1, x28, #0x8
   545dc:	mov	x3, x1
   545e0:	str	x1, [sp, #392]
   545e4:	sbfiz	x1, x19, #2, #24
   545e8:	add	x1, x1, x3
   545ec:	str	x1, [sp, #208]
   545f0:	and	x3, x0, #0xf000
   545f4:	and	x1, x19, #0xfff
   545f8:	orr	x1, x3, x1
   545fc:	str	x1, [sp, #216]
   54600:	and	w1, w0, #0xf0
   54604:	orr	w7, w1, w5
   54608:	str	w7, [sp, #276]
   5460c:	asr	x5, x19, #16
   54610:	ubfx	x1, x19, #16, #4
   54614:	str	x1, [sp, #144]
   54618:	adrp	x1, 59000 <xexit@@Base+0x74c>
   5461c:	add	x1, x1, #0x9c0
   54620:	ands	x27, x19, #0x800000
   54624:	adrp	x3, 65000 <fields@@Base+0x4c40>
   54628:	add	x3, x3, #0x4b8
   5462c:	csel	x3, x3, x1, eq  // eq = none
   54630:	str	x3, [sp, #192]
   54634:	eor	x3, x19, x19, asr #12
   54638:	and	x3, x3, #0xf
   5463c:	str	x3, [sp, #304]
   54640:	cmp	x27, #0x0
   54644:	cneg	w3, w7, eq  // eq = none
   54648:	sxtw	x3, w3
   5464c:	str	x3, [sp, #344]
   54650:	mov	x3, #0xa00000              	// #10485760
   54654:	ldr	x8, [sp, #104]
   54658:	and	x3, x8, x3
   5465c:	cmp	x3, #0x800, lsl #12
   54660:	cset	w3, ne  // ne = any
   54664:	cmp	w7, #0x0
   54668:	csinc	w3, w3, wzr, eq  // eq = none
   5466c:	str	w3, [sp, #360]
   54670:	and	x3, x19, #0xf
   54674:	mov	x7, x3
   54678:	str	x3, [sp, #240]
   5467c:	and	x3, x0, #0xf0
   54680:	orr	x3, x3, x7
   54684:	str	x3, [sp, #280]
   54688:	str	w3, [sp, #272]
   5468c:	neg	x3, x3
   54690:	str	x3, [sp, #376]
   54694:	and	w0, w0, #0x30
   54698:	mov	w3, #0x4f                  	// #79
   5469c:	and	w3, w5, w3
   546a0:	orr	w0, w0, w3
   546a4:	str	w0, [sp, #160]
   546a8:	mov	w0, w0
   546ac:	str	x0, [sp, #320]
   546b0:	and	x0, x5, #0x1f
   546b4:	str	x0, [sp, #384]
   546b8:	and	x3, x4, #0x1f
   546bc:	str	x3, [sp, #288]
   546c0:	add	x0, x0, #0x1
   546c4:	sub	x0, x0, x3
   546c8:	str	x0, [sp, #224]
   546cc:	ands	x0, x19, #0x400000
   546d0:	str	x0, [sp, #176]
   546d4:	mov	w3, #0x53                  	// #83
   546d8:	mov	w0, #0x43                  	// #67
   546dc:	csel	w0, w3, w0, ne  // ne = any
   546e0:	str	w0, [sp, #332]
   546e4:	cmp	x27, #0x0
   546e8:	mov	x0, #0xffffffffff000000    	// #-16777216
   546ec:	csel	x3, x0, xzr, ne  // ne = any
   546f0:	and	x0, x8, #0xffffff
   546f4:	add	x0, x0, x3
   546f8:	add	x0, x28, x0, lsl #2
   546fc:	add	x3, x0, #0x8
   54700:	add	x0, x0, #0xa
   54704:	ands	x4, x19, #0x1000000
   54708:	str	x4, [sp, #136]
   5470c:	csel	x0, x3, x0, eq  // eq = none
   54710:	str	x0, [sp, #184]
   54714:	str	w6, [sp, #236]
   54718:	mov	x0, x6
   5471c:	ubfiz	x0, x0, #2, #8
   54720:	cmp	x27, #0x0
   54724:	cneg	x0, x0, eq  // eq = none
   54728:	str	x0, [sp, #264]
   5472c:	str	w0, [sp, #316]
   54730:	ands	x0, x19, #0x200000
   54734:	str	x0, [sp, #152]
   54738:	adrp	x0, 65000 <fields@@Base+0x4c40>
   5473c:	add	x0, x0, #0x4c0
   54740:	csel	x0, x0, x1, ne  // ne = any
   54744:	str	x0, [sp, #352]
   54748:	str	w26, [sp, #124]
   5474c:	str	xzr, [sp, #112]
   54750:	mov	x0, #0x10                  	// #16
   54754:	str	x0, [sp, #256]
   54758:	str	x0, [sp, #248]
   5475c:	adrp	x0, 8e000 <aarch64_operands@@Base+0x1bc0>
   54760:	add	x0, x0, #0xb70
   54764:	str	x0, [sp, #128]
   54768:	and	x0, x8, #0x7fffff
   5476c:	and	x0, x0, #0xffffffffffc0000f
   54770:	str	x0, [sp, #400]
   54774:	str	x27, [sp, #296]
   54778:	str	x21, [sp, #408]
   5477c:	str	w26, [sp, #164]
   54780:	b	55224 <aarch64_get_opcode@@Base+0x6c10>
   54784:	ldp	x25, x26, [sp, #64]
   54788:	b	54498 <aarch64_get_opcode@@Base+0x5e84>
   5478c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54790:	add	x1, x1, #0x798
   54794:	mov	x0, x24
   54798:	blr	x23
   5479c:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   547a0:	mov	x2, x19
   547a4:	mov	x1, x20
   547a8:	mov	x0, x28
   547ac:	bl	4eaf8 <aarch64_get_opcode@@Base+0x4e4>
   547b0:	str	x0, [sp, #112]
   547b4:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   547b8:	orr	x2, x19, #0x1000000
   547bc:	mov	x1, x20
   547c0:	mov	x0, x28
   547c4:	bl	4eaf8 <aarch64_get_opcode@@Base+0x4e4>
   547c8:	str	x0, [sp, #112]
   547cc:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   547d0:	mov	w22, #0x1                   	// #1
   547d4:	b	547dc <aarch64_get_opcode@@Base+0x61c8>
   547d8:	ldr	w22, [sp, #164]
   547dc:	mov	x0, #0x4f0000              	// #5177344
   547e0:	and	x0, x19, x0
   547e4:	cmp	x0, #0x4f0, lsl #12
   547e8:	b.eq	54884 <aarch64_get_opcode@@Base+0x6270>  // b.none
   547ec:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   547f0:	ldr	w0, [x0, #1616]
   547f4:	add	x0, x0, x0, lsl #3
   547f8:	ldr	x1, [sp, #144]
   547fc:	add	x0, x1, x0, lsl #1
   54800:	add	x0, x0, #0x2
   54804:	ldr	x1, [sp, #128]
   54808:	ldr	x2, [x1, x0, lsl #3]
   5480c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54810:	add	x1, x1, #0x4f8
   54814:	mov	x0, x24
   54818:	blr	x23
   5481c:	ldr	x0, [sp, #136]
   54820:	cbz	x0, 54978 <aarch64_get_opcode@@Base+0x6364>
   54824:	ldr	x0, [sp, #176]
   54828:	cbz	x0, 5490c <aarch64_get_opcode@@Base+0x62f8>
   5482c:	ldr	w0, [sp, #360]
   54830:	cbz	w0, 5484c <aarch64_get_opcode@@Base+0x6238>
   54834:	ldr	w3, [sp, #276]
   54838:	ldr	x2, [sp, #192]
   5483c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54840:	add	x1, x1, #0x4d0
   54844:	mov	x0, x24
   54848:	blr	x23
   5484c:	ldr	x0, [sp, #344]
   54850:	str	x0, [sp, #112]
   54854:	adrp	x0, 59000 <xexit@@Base+0x74c>
   54858:	add	x0, x0, #0x9c0
   5485c:	adrp	x2, 65000 <fields@@Base+0x4c40>
   54860:	add	x2, x2, #0x4c0
   54864:	ldr	x1, [sp, #152]
   54868:	cmp	x1, #0x0
   5486c:	csel	x2, x2, x0, ne  // ne = any
   54870:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54874:	add	x1, x1, #0x4d8
   54878:	mov	x0, x24
   5487c:	blr	x23
   54880:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54884:	ldr	x0, [sp, #136]
   54888:	cbz	x0, 548e0 <aarch64_get_opcode@@Base+0x62cc>
   5488c:	ldr	x0, [sp, #280]
   54890:	cbnz	x0, 548b4 <aarch64_get_opcode@@Base+0x62a0>
   54894:	ldr	x0, [sp, #296]
   54898:	cbz	x0, 55318 <aarch64_get_opcode@@Base+0x6d04>
   5489c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   548a0:	add	x1, x1, #0xcf8
   548a4:	mov	x0, x24
   548a8:	blr	x23
   548ac:	ldr	x0, [sp, #280]
   548b0:	b	55338 <aarch64_get_opcode@@Base+0x6d24>
   548b4:	ldr	x0, [sp, #296]
   548b8:	cbz	x0, 55318 <aarch64_get_opcode@@Base+0x6d04>
   548bc:	ldr	w3, [sp, #272]
   548c0:	adrp	x2, 59000 <xexit@@Base+0x74c>
   548c4:	add	x2, x2, #0x9c0
   548c8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   548cc:	add	x1, x1, #0xdd0
   548d0:	mov	x0, x24
   548d4:	blr	x23
   548d8:	ldr	x0, [sp, #280]
   548dc:	b	55338 <aarch64_get_opcode@@Base+0x6d24>
   548e0:	ldr	w3, [sp, #272]
   548e4:	ldr	x2, [sp, #192]
   548e8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   548ec:	add	x1, x1, #0xd00
   548f0:	mov	x0, x24
   548f4:	blr	x23
   548f8:	cmp	w22, #0x0
   548fc:	ldr	w0, [sp, #124]
   54900:	csinc	w0, w0, wzr, ne  // ne = any
   54904:	str	w0, [sp, #124]
   54908:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   5490c:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   54910:	ldr	w0, [x0, #1616]
   54914:	add	x0, x0, x0, lsl #3
   54918:	ldr	x1, [sp, #240]
   5491c:	add	x0, x1, x0, lsl #1
   54920:	add	x0, x0, #0x2
   54924:	ldr	x1, [sp, #128]
   54928:	ldr	x3, [x1, x0, lsl #3]
   5492c:	ldr	x2, [sp, #192]
   54930:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54934:	add	x1, x1, #0xd10
   54938:	mov	x0, x24
   5493c:	blr	x23
   54940:	cbnz	w22, 54854 <aarch64_get_opcode@@Base+0x6240>
   54944:	ldr	x0, [sp, #152]
   54948:	cbz	x0, 5496c <aarch64_get_opcode@@Base+0x6358>
   5494c:	ldr	x0, [sp, #304]
   54950:	cmp	x0, #0x0
   54954:	ldr	w0, [sp, #124]
   54958:	csinc	w0, w0, wzr, ne  // ne = any
   5495c:	str	w0, [sp, #124]
   54960:	adrp	x2, 65000 <fields@@Base+0x4c40>
   54964:	add	x2, x2, #0x4c0
   54968:	b	54870 <aarch64_get_opcode@@Base+0x625c>
   5496c:	adrp	x2, 59000 <xexit@@Base+0x74c>
   54970:	add	x2, x2, #0x9c0
   54974:	b	54870 <aarch64_get_opcode@@Base+0x625c>
   54978:	ldr	x0, [sp, #176]
   5497c:	cbz	x0, 549a8 <aarch64_get_opcode@@Base+0x6394>
   54980:	ldr	x0, [sp, #296]
   54984:	cbz	x0, 552d0 <aarch64_get_opcode@@Base+0x6cbc>
   54988:	ldr	w3, [sp, #276]
   5498c:	adrp	x2, 59000 <xexit@@Base+0x74c>
   54990:	add	x2, x2, #0x9c0
   54994:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54998:	add	x1, x1, #0x4e0
   5499c:	mov	x0, x24
   549a0:	blr	x23
   549a4:	b	552ec <aarch64_get_opcode@@Base+0x6cd8>
   549a8:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   549ac:	ldr	w0, [x0, #1616]
   549b0:	add	x0, x0, x0, lsl #3
   549b4:	ldr	x1, [sp, #240]
   549b8:	add	x0, x1, x0, lsl #1
   549bc:	add	x0, x0, #0x2
   549c0:	ldr	x1, [sp, #128]
   549c4:	ldr	x3, [x1, x0, lsl #3]
   549c8:	ldr	x2, [sp, #192]
   549cc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   549d0:	add	x1, x1, #0xd18
   549d4:	mov	x0, x24
   549d8:	blr	x23
   549dc:	cbnz	w22, 55218 <aarch64_get_opcode@@Base+0x6c04>
   549e0:	ldr	x0, [sp, #304]
   549e4:	cmp	x0, #0x0
   549e8:	ldr	w0, [sp, #124]
   549ec:	csinc	w0, w0, wzr, ne  // ne = any
   549f0:	str	w0, [sp, #124]
   549f4:	b	552f8 <aarch64_get_opcode@@Base+0x6ce4>
   549f8:	ldr	x2, [x20, #120]
   549fc:	mov	x1, x20
   54a00:	ldr	x22, [sp, #208]
   54a04:	mov	x0, x22
   54a08:	blr	x2
   54a0c:	mov	w0, #0x1                   	// #1
   54a10:	strb	w0, [x20, #196]
   54a14:	mov	w0, #0x2                   	// #2
   54a18:	str	w0, [x20, #200]
   54a1c:	str	x22, [x20, #208]
   54a20:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54a24:	ldr	x1, [sp, #168]
   54a28:	cmp	x1, #0xe
   54a2c:	b.eq	55218 <aarch64_get_opcode@@Base+0x6c04>  // b.none
   54a30:	adrp	x0, 8f000 <aarch64_operands@@Base+0x2bc0>
   54a34:	add	x0, x0, #0xc70
   54a38:	add	x0, x0, #0x188
   54a3c:	ldr	x2, [x0, x1, lsl #3]
   54a40:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   54a44:	add	x1, x1, #0x588
   54a48:	mov	x0, x24
   54a4c:	blr	x23
   54a50:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54a54:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54a58:	add	x1, x1, #0x7f0
   54a5c:	mov	x0, x24
   54a60:	blr	x23
   54a64:	ldr	w26, [sp, #164]
   54a68:	mov	w22, w26
   54a6c:	mov	w25, #0x1                   	// #1
   54a70:	adrp	x27, fa000 <aarch64_opcode_table@@Base+0x55a20>
   54a74:	add	x27, x27, #0x650
   54a78:	mov	w1, w26
   54a7c:	mov	x26, x20
   54a80:	ldr	x20, [sp, #128]
   54a84:	b	54ac0 <aarch64_get_opcode@@Base+0x64ac>
   54a88:	ldr	w0, [x27]
   54a8c:	add	x0, x0, x0, lsl #3
   54a90:	lsl	x0, x0, #1
   54a94:	add	x0, x0, w22, sxtw
   54a98:	add	x0, x0, #0x2
   54a9c:	ldr	x2, [x20, x0, lsl #3]
   54aa0:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   54aa4:	add	x1, x1, #0x588
   54aa8:	mov	x0, x24
   54aac:	blr	x23
   54ab0:	mov	w1, w25
   54ab4:	add	w22, w22, #0x1
   54ab8:	cmp	w22, #0x10
   54abc:	b.eq	54ae8 <aarch64_get_opcode@@Base+0x64d4>  // b.none
   54ac0:	lsl	w0, w25, w22
   54ac4:	sxtw	x0, w0
   54ac8:	tst	x0, x19
   54acc:	b.eq	54ab4 <aarch64_get_opcode@@Base+0x64a0>  // b.none
   54ad0:	cbz	w1, 54a88 <aarch64_get_opcode@@Base+0x6474>
   54ad4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   54ad8:	add	x1, x1, #0x758
   54adc:	mov	x0, x24
   54ae0:	blr	x23
   54ae4:	b	54a88 <aarch64_get_opcode@@Base+0x6474>
   54ae8:	mov	x20, x26
   54aec:	mov	w26, w1
   54af0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54af4:	add	x1, x1, #0x9a0
   54af8:	mov	x0, x24
   54afc:	blr	x23
   54b00:	cmp	w26, #0x0
   54b04:	ldr	w0, [sp, #124]
   54b08:	csinc	w0, w0, wzr, ne  // ne = any
   54b0c:	str	w0, [sp, #124]
   54b10:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54b14:	mov	w3, #0x0                   	// #0
   54b18:	mov	x2, x24
   54b1c:	mov	x1, x23
   54b20:	mov	x0, x19
   54b24:	bl	4e648 <aarch64_get_opcode@@Base+0x34>
   54b28:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54b2c:	tbnz	w19, #25, 54b48 <aarch64_get_opcode@@Base+0x6534>
   54b30:	mov	w3, #0x1                   	// #1
   54b34:	mov	x2, x24
   54b38:	mov	x1, x23
   54b3c:	mov	x0, x19
   54b40:	bl	4e648 <aarch64_get_opcode@@Base+0x34>
   54b44:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54b48:	ldr	w2, [sp, #340]
   54b4c:	cmp	w2, #0xff
   54b50:	b.ls	54b98 <aarch64_get_opcode@@Base+0x6584>  // b.plast
   54b54:	mov	w0, #0x2                   	// #2
   54b58:	neg	w1, w0
   54b5c:	ror	w1, w2, w1
   54b60:	cmp	w1, #0xff
   54b64:	b.ls	54b9c <aarch64_get_opcode@@Base+0x6588>  // b.plast
   54b68:	add	w0, w0, #0x2
   54b6c:	cmp	w0, #0x20
   54b70:	b.ne	54b58 <aarch64_get_opcode@@Base+0x6544>  // b.any
   54b74:	ldr	w3, [sp, #336]
   54b78:	ldr	w2, [sp, #364]
   54b7c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54b80:	add	x1, x1, #0xd20
   54b84:	mov	x0, x24
   54b88:	blr	x23
   54b8c:	ldr	x0, [sp, #368]
   54b90:	str	x0, [sp, #112]
   54b94:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54b98:	mov	w0, #0x0                   	// #0
   54b9c:	ldr	w1, [sp, #336]
   54ba0:	cmp	w1, w0
   54ba4:	b.ne	54b74 <aarch64_get_opcode@@Base+0x6560>  // b.any
   54ba8:	ldr	w2, [sp, #340]
   54bac:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54bb0:	add	x1, x1, #0xd28
   54bb4:	mov	x0, x24
   54bb8:	blr	x23
   54bbc:	b	54b8c <aarch64_get_opcode@@Base+0x6578>
   54bc0:	and	x0, x19, #0xf000
   54bc4:	cmp	x0, #0xf, lsl #12
   54bc8:	b.ne	55218 <aarch64_get_opcode@@Base+0x6c04>  // b.any
   54bcc:	ldr	x0, [sp, #408]
   54bd0:	ldr	x0, [x0]
   54bd4:	tbnz	w0, #12, 55264 <aarch64_get_opcode@@Base+0x6c50>
   54bd8:	adrp	x1, 5f000 <xexit@@Base+0x674c>
   54bdc:	add	x1, x1, #0x9e0
   54be0:	mov	x0, x24
   54be4:	blr	x23
   54be8:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54bec:	mov	x0, #0x1200000             	// #18874368
   54bf0:	and	x0, x19, x0
   54bf4:	cmp	x0, #0x200, lsl #12
   54bf8:	b.ne	55218 <aarch64_get_opcode@@Base+0x6c04>  // b.any
   54bfc:	adrp	x1, 5d000 <xexit@@Base+0x474c>
   54c00:	add	x1, x1, #0x350
   54c04:	mov	x0, x24
   54c08:	blr	x23
   54c0c:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54c10:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   54c14:	ldr	w0, [x0, #1616]
   54c18:	add	x0, x0, x0, lsl #3
   54c1c:	ldr	x1, [sp, #144]
   54c20:	add	x0, x1, x0, lsl #1
   54c24:	add	x0, x0, #0x2
   54c28:	ldr	x1, [sp, #128]
   54c2c:	ldr	x2, [x1, x0, lsl #3]
   54c30:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54c34:	add	x1, x1, #0x4f8
   54c38:	mov	x0, x24
   54c3c:	blr	x23
   54c40:	ldr	x0, [sp, #136]
   54c44:	cbz	x0, 54c90 <aarch64_get_opcode@@Base+0x667c>
   54c48:	ldr	w0, [sp, #236]
   54c4c:	cbz	w0, 54c74 <aarch64_get_opcode@@Base+0x6660>
   54c50:	ldr	x3, [sp, #352]
   54c54:	ldr	w2, [sp, #316]
   54c58:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54c5c:	add	x1, x1, #0xb10
   54c60:	mov	x0, x24
   54c64:	blr	x23
   54c68:	ldr	x0, [sp, #264]
   54c6c:	str	x0, [sp, #112]
   54c70:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54c74:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   54c78:	add	x1, x1, #0x0
   54c7c:	mov	x0, x24
   54c80:	blr	x23
   54c84:	ldr	x0, [sp, #264]
   54c88:	str	x0, [sp, #112]
   54c8c:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54c90:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   54c94:	add	x1, x1, #0x0
   54c98:	mov	x0, x24
   54c9c:	blr	x23
   54ca0:	ldr	x0, [sp, #152]
   54ca4:	cbz	x0, 54cd4 <aarch64_get_opcode@@Base+0x66c0>
   54ca8:	ldr	x22, [sp, #264]
   54cac:	str	x22, [sp, #112]
   54cb0:	ldr	w0, [sp, #236]
   54cb4:	cbz	w0, 55218 <aarch64_get_opcode@@Base+0x6c04>
   54cb8:	ldr	w2, [sp, #316]
   54cbc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54cc0:	add	x1, x1, #0x108
   54cc4:	mov	x0, x24
   54cc8:	blr	x23
   54ccc:	str	x22, [sp, #112]
   54cd0:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54cd4:	ldr	w22, [sp, #236]
   54cd8:	mov	w2, w22
   54cdc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54ce0:	add	x1, x1, #0xd30
   54ce4:	mov	x0, x24
   54ce8:	blr	x23
   54cec:	sxtw	x0, w22
   54cf0:	str	x0, [sp, #112]
   54cf4:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54cf8:	ldr	x2, [x20, #120]
   54cfc:	mov	x1, x20
   54d00:	ldr	x22, [sp, #184]
   54d04:	mov	x0, x22
   54d08:	blr	x2
   54d0c:	mov	w0, #0x1                   	// #1
   54d10:	strb	w0, [x20, #196]
   54d14:	mov	w0, #0x2                   	// #2
   54d18:	str	w0, [x20, #200]
   54d1c:	str	x22, [x20, #208]
   54d20:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54d24:	and	x0, x19, #0x3fffe00
   54d28:	and	x0, x0, #0xfffffffffe0003ff
   54d2c:	cmp	x0, #0x200
   54d30:	b.eq	54d9c <aarch64_get_opcode@@Base+0x6788>  // b.none
   54d34:	ldr	w2, [sp, #332]
   54d38:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54d3c:	add	x1, x1, #0xd48
   54d40:	mov	x0, x24
   54d44:	blr	x23
   54d48:	tbz	w19, #19, 54d5c <aarch64_get_opcode@@Base+0x6748>
   54d4c:	adrp	x1, 71000 <fields@@Base+0x10c40>
   54d50:	add	x1, x1, #0x838
   54d54:	mov	x0, x24
   54d58:	blr	x23
   54d5c:	tbz	w19, #18, 54d70 <aarch64_get_opcode@@Base+0x675c>
   54d60:	adrp	x1, 59000 <xexit@@Base+0x74c>
   54d64:	add	x1, x1, #0x780
   54d68:	mov	x0, x24
   54d6c:	blr	x23
   54d70:	tbz	w19, #17, 54d84 <aarch64_get_opcode@@Base+0x6770>
   54d74:	adrp	x1, 68000 <fields@@Base+0x7c40>
   54d78:	add	x1, x1, #0x1d8
   54d7c:	mov	x0, x24
   54d80:	blr	x23
   54d84:	tbz	w19, #16, 55218 <aarch64_get_opcode@@Base+0x6c04>
   54d88:	adrp	x1, 5f000 <xexit@@Base+0x674c>
   54d8c:	add	x1, x1, #0xb00
   54d90:	mov	x0, x24
   54d94:	blr	x23
   54d98:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54d9c:	ldr	w0, [sp, #160]
   54da0:	bl	4edac <aarch64_get_opcode@@Base+0x798>
   54da4:	mov	x2, x0
   54da8:	cbz	x0, 54dc0 <aarch64_get_opcode@@Base+0x67ac>
   54dac:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   54db0:	add	x1, x1, #0x588
   54db4:	mov	x0, x24
   54db8:	blr	x23
   54dbc:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54dc0:	ldr	x2, [sp, #320]
   54dc4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54dc8:	add	x1, x1, #0xd38
   54dcc:	mov	x0, x24
   54dd0:	blr	x23
   54dd4:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54dd8:	and	x0, x19, #0xf0
   54ddc:	cmp	x0, #0x60
   54de0:	b.eq	54e0c <aarch64_get_opcode@@Base+0x67f8>  // b.none
   54de4:	ldr	w0, [sp, #312]
   54de8:	and	w0, w0, #0xf
   54dec:	bl	4ef7c <aarch64_get_opcode@@Base+0x968>
   54df0:	mov	x2, x0
   54df4:	cbz	x0, 54e44 <aarch64_get_opcode@@Base+0x6830>
   54df8:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   54dfc:	add	x1, x1, #0x588
   54e00:	mov	x0, x24
   54e04:	blr	x23
   54e08:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54e0c:	ldr	x0, [sp, #240]
   54e10:	cmp	x0, #0xf
   54e14:	b.eq	54e30 <aarch64_get_opcode@@Base+0x681c>  // b.none
   54e18:	ldr	w2, [sp, #328]
   54e1c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54e20:	add	x1, x1, #0xd28
   54e24:	mov	x0, x24
   54e28:	blr	x23
   54e2c:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54e30:	adrp	x1, 5f000 <xexit@@Base+0x674c>
   54e34:	add	x1, x1, #0xb78
   54e38:	mov	x0, x24
   54e3c:	blr	x23
   54e40:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54e44:	ldr	w2, [sp, #328]
   54e48:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54e4c:	add	x1, x1, #0xd28
   54e50:	mov	x0, x24
   54e54:	blr	x23
   54e58:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54e5c:	add	x3, sp, #0x1a4
   54e60:	add	x2, sp, #0x1a8
   54e64:	ldr	x1, [sp, #104]
   54e68:	mov	x0, x21
   54e6c:	bl	4f250 <aarch64_get_opcode@@Base+0xc3c>
   54e70:	mov	x21, x0
   54e74:	ldrb	w0, [x0]
   54e78:	cmp	w0, #0x58
   54e7c:	b.eq	550a8 <aarch64_get_opcode@@Base+0x6a94>  // b.none
   54e80:	b.hi	54f10 <aarch64_get_opcode@@Base+0x68fc>  // b.pmore
   54e84:	cmp	w0, #0x52
   54e88:	b.eq	54fac <aarch64_get_opcode@@Base+0x6998>  // b.none
   54e8c:	b.ls	54ec8 <aarch64_get_opcode@@Base+0x68b4>  // b.plast
   54e90:	cmp	w0, #0x54
   54e94:	b.eq	5500c <aarch64_get_opcode@@Base+0x69f8>  // b.none
   54e98:	cmp	w0, #0x57
   54e9c:	b.ne	55138 <aarch64_get_opcode@@Base+0x6b24>  // b.any
   54ea0:	ldr	x2, [sp, #424]
   54ea4:	add	x2, x2, #0x1
   54ea8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54eac:	add	x1, x1, #0x800
   54eb0:	mov	x0, x24
   54eb4:	blr	x23
   54eb8:	ldr	x0, [sp, #424]
   54ebc:	add	x0, x0, #0x1
   54ec0:	str	x0, [sp, #112]
   54ec4:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54ec8:	cmp	w0, #0x27
   54ecc:	b.eq	550f4 <aarch64_get_opcode@@Base+0x6ae0>  // b.none
   54ed0:	cmp	w0, #0x3f
   54ed4:	b.ne	55138 <aarch64_get_opcode@@Base+0x6b24>  // b.any
   54ed8:	mov	w22, #0x1                   	// #1
   54edc:	ldr	w0, [sp, #420]
   54ee0:	lsl	w0, w22, w0
   54ee4:	ldr	x1, [sp, #424]
   54ee8:	sub	w0, w0, w1
   54eec:	ldrb	w2, [x21, w0, sxtw]
   54ef0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54ef4:	add	x1, x1, #0x790
   54ef8:	mov	x0, x24
   54efc:	blr	x23
   54f00:	ldr	w0, [sp, #420]
   54f04:	lsl	w22, w22, w0
   54f08:	add	x21, x21, w22, sxtw
   54f0c:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54f10:	cmp	w0, #0x64
   54f14:	b.eq	55074 <aarch64_get_opcode@@Base+0x6a60>  // b.none
   54f18:	b.ls	54f74 <aarch64_get_opcode@@Base+0x6960>  // b.plast
   54f1c:	cmp	w0, #0x72
   54f20:	b.eq	54fc0 <aarch64_get_opcode@@Base+0x69ac>  // b.none
   54f24:	cmp	w0, #0x78
   54f28:	b.ne	55138 <aarch64_get_opcode@@Base+0x6b24>  // b.any
   54f2c:	ldr	x2, [sp, #424]
   54f30:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54f34:	add	x1, x1, #0xd50
   54f38:	mov	x0, x24
   54f3c:	blr	x23
   54f40:	and	x0, x19, #0xfffffff
   54f44:	mov	x1, #0xff00000             	// #267386880
   54f48:	cmp	x0, x1
   54f4c:	b.eq	55094 <aarch64_get_opcode@@Base+0x6a80>  // b.none
   54f50:	mov	x1, #0x1                   	// #1
   54f54:	movk	x1, #0xff0, lsl #16
   54f58:	cmp	x0, x1
   54f5c:	b.ne	55218 <aarch64_get_opcode@@Base+0x6c04>  // b.any
   54f60:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54f64:	add	x1, x1, #0xd60
   54f68:	mov	x0, x24
   54f6c:	blr	x23
   54f70:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54f74:	cmp	w0, #0x60
   54f78:	b.eq	550cc <aarch64_get_opcode@@Base+0x6ab8>  // b.none
   54f7c:	cmp	w0, #0x62
   54f80:	b.ne	55138 <aarch64_get_opcode@@Base+0x6b24>  // b.any
   54f84:	ldr	x2, [sp, #424]
   54f88:	lsl	x2, x2, #3
   54f8c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   54f90:	add	x1, x1, #0x800
   54f94:	mov	x0, x24
   54f98:	blr	x23
   54f9c:	ldr	x0, [sp, #424]
   54fa0:	lsl	x0, x0, #3
   54fa4:	str	x0, [sp, #112]
   54fa8:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   54fac:	ldr	x0, [sp, #424]
   54fb0:	cmp	x0, #0xf
   54fb4:	ldr	w0, [sp, #124]
   54fb8:	csinc	w0, w0, wzr, ne  // ne = any
   54fbc:	str	w0, [sp, #124]
   54fc0:	ldrb	w0, [x21, #1]
   54fc4:	cmp	w0, #0x75
   54fc8:	b.eq	5501c <aarch64_get_opcode@@Base+0x6a08>  // b.none
   54fcc:	ldrb	w0, [x21, #1]
   54fd0:	cmp	w0, #0x55
   54fd4:	b.eq	55048 <aarch64_get_opcode@@Base+0x6a34>  // b.none
   54fd8:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   54fdc:	ldr	w0, [x0, #1616]
   54fe0:	add	x0, x0, x0, lsl #3
   54fe4:	ldr	x1, [sp, #424]
   54fe8:	add	x0, x1, x0, lsl #1
   54fec:	add	x0, x0, #0x2
   54ff0:	ldr	x1, [sp, #128]
   54ff4:	ldr	x2, [x1, x0, lsl #3]
   54ff8:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   54ffc:	add	x1, x1, #0x588
   55000:	mov	x0, x24
   55004:	blr	x23
   55008:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   5500c:	ldr	x0, [sp, #424]
   55010:	add	x0, x0, #0x1
   55014:	str	x0, [sp, #424]
   55018:	b	54fc0 <aarch64_get_opcode@@Base+0x69ac>
   5501c:	add	x21, x21, #0x1
   55020:	ldr	x0, [sp, #424]
   55024:	ldr	x1, [sp, #248]
   55028:	cmp	x0, x1
   5502c:	b.eq	55038 <aarch64_get_opcode@@Base+0x6a24>  // b.none
   55030:	str	x0, [sp, #248]
   55034:	b	54fcc <aarch64_get_opcode@@Base+0x69b8>
   55038:	str	x0, [sp, #248]
   5503c:	mov	w0, #0x1                   	// #1
   55040:	str	w0, [sp, #124]
   55044:	b	54fcc <aarch64_get_opcode@@Base+0x69b8>
   55048:	add	x21, x21, #0x1
   5504c:	ldr	x0, [sp, #424]
   55050:	ldr	x1, [sp, #256]
   55054:	cmp	x0, x1
   55058:	b.eq	55064 <aarch64_get_opcode@@Base+0x6a50>  // b.none
   5505c:	str	x0, [sp, #256]
   55060:	b	54fd8 <aarch64_get_opcode@@Base+0x69c4>
   55064:	str	x0, [sp, #256]
   55068:	mov	w0, #0x1                   	// #1
   5506c:	str	w0, [sp, #124]
   55070:	b	54fd8 <aarch64_get_opcode@@Base+0x69c4>
   55074:	ldr	x2, [sp, #424]
   55078:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5507c:	add	x1, x1, #0x800
   55080:	mov	x0, x24
   55084:	blr	x23
   55088:	ldr	x0, [sp, #424]
   5508c:	str	x0, [sp, #112]
   55090:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   55094:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55098:	add	x1, x1, #0xd58
   5509c:	mov	x0, x24
   550a0:	blr	x23
   550a4:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   550a8:	ldr	x2, [sp, #424]
   550ac:	and	x2, x2, #0xf
   550b0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   550b4:	add	x1, x1, #0xd70
   550b8:	mov	x0, x24
   550bc:	blr	x23
   550c0:	ldr	x0, [sp, #424]
   550c4:	str	x0, [sp, #112]
   550c8:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   550cc:	add	x22, x21, #0x1
   550d0:	ldr	x0, [sp, #424]
   550d4:	cbnz	x0, 5513c <aarch64_get_opcode@@Base+0x6b28>
   550d8:	ldrb	w2, [x21, #1]
   550dc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   550e0:	add	x1, x1, #0x790
   550e4:	mov	x0, x24
   550e8:	blr	x23
   550ec:	mov	x21, x22
   550f0:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   550f4:	add	x22, x21, #0x1
   550f8:	ldr	w1, [sp, #420]
   550fc:	mov	x0, #0x1                   	// #1
   55100:	lsl	x0, x0, x1
   55104:	sub	x0, x0, #0x1
   55108:	ldr	x1, [sp, #424]
   5510c:	cmp	x0, x1
   55110:	b.eq	5511c <aarch64_get_opcode@@Base+0x6b08>  // b.none
   55114:	mov	x21, x22
   55118:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   5511c:	ldrb	w2, [x21, #1]
   55120:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55124:	add	x1, x1, #0x790
   55128:	mov	x0, x24
   5512c:	blr	x23
   55130:	mov	x21, x22
   55134:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   55138:	bl	35670 <abort@plt>
   5513c:	mov	x21, x22
   55140:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   55144:	ldr	w2, [sp, #232]
   55148:	adrp	x1, 6b000 <fields@@Base+0xac40>
   5514c:	add	x1, x1, #0x7d0
   55150:	mov	x0, x24
   55154:	blr	x23
   55158:	ldr	x0, [sp, #200]
   5515c:	str	x0, [sp, #112]
   55160:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   55164:	ldr	x3, [sp, #224]
   55168:	cmp	x3, #0x0
   5516c:	b.le	55188 <aarch64_get_opcode@@Base+0x6b74>
   55170:	ldr	x2, [sp, #288]
   55174:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55178:	add	x1, x1, #0xd78
   5517c:	mov	x0, x24
   55180:	blr	x23
   55184:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   55188:	ldr	x3, [sp, #384]
   5518c:	ldr	x2, [sp, #288]
   55190:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55194:	add	x1, x1, #0xd88
   55198:	mov	x0, x24
   5519c:	blr	x23
   551a0:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   551a4:	ldr	w0, [sp, #160]
   551a8:	bl	4edac <aarch64_get_opcode@@Base+0x798>
   551ac:	mov	x2, x0
   551b0:	cbz	x0, 551c8 <aarch64_get_opcode@@Base+0x6bb4>
   551b4:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   551b8:	add	x1, x1, #0x588
   551bc:	mov	x0, x24
   551c0:	blr	x23
   551c4:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   551c8:	ldr	x2, [sp, #320]
   551cc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   551d0:	add	x1, x1, #0xd38
   551d4:	mov	x0, x24
   551d8:	blr	x23
   551dc:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   551e0:	ldr	x22, [sp, #216]
   551e4:	mov	x2, x22
   551e8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   551ec:	add	x1, x1, #0xda0
   551f0:	mov	x0, x24
   551f4:	blr	x23
   551f8:	str	x22, [sp, #112]
   551fc:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   55200:	bl	35670 <abort@plt>
   55204:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55208:	add	x1, x1, #0x790
   5520c:	mov	x0, x24
   55210:	blr	x23
   55214:	mov	x21, x25
   55218:	add	x25, x21, #0x1
   5521c:	ldrb	w2, [x21, #1]
   55220:	cbz	w2, 55270 <aarch64_get_opcode@@Base+0x6c5c>
   55224:	cmp	w2, #0x25
   55228:	b.ne	55204 <aarch64_get_opcode@@Base+0x6bf0>  // b.any
   5522c:	add	x21, x25, #0x1
   55230:	ldrb	w0, [x25, #1]
   55234:	sub	w0, w0, #0x25
   55238:	cmp	w0, #0x4f
   5523c:	b.hi	55200 <aarch64_get_opcode@@Base+0x6bec>  // b.pmore
   55240:	adrp	x1, 74000 <fields@@Base+0x13c40>
   55244:	add	x1, x1, #0x7c0
   55248:	ldrh	w0, [x1, w0, uxtw #1]
   5524c:	adr	x1, 55258 <aarch64_get_opcode@@Base+0x6c44>
   55250:	add	x0, x1, w0, sxth #2
   55254:	br	x0
   55258:	mov	w0, #0x1                   	// #1
   5525c:	str	w0, [sp, #124]
   55260:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   55264:	mov	w0, #0x1                   	// #1
   55268:	str	w0, [sp, #124]
   5526c:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   55270:	ldr	x1, [sp, #112]
   55274:	add	x0, x1, #0x10
   55278:	cmp	x0, #0x30
   5527c:	b.ls	55294 <aarch64_get_opcode@@Base+0x6c80>  // b.plast
   55280:	mov	w2, w1
   55284:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55288:	add	x1, x1, #0x810
   5528c:	mov	x0, x24
   55290:	blr	x23
   55294:	ldr	w0, [sp, #124]
   55298:	cbz	w0, 55358 <aarch64_get_opcode@@Base+0x6d44>
   5529c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   552a0:	add	x1, x1, #0x310
   552a4:	mov	x0, x24
   552a8:	blr	x23
   552ac:	ldp	x25, x26, [sp, #64]
   552b0:	b	54498 <aarch64_get_opcode@@Base+0x5e84>
   552b4:	mov	w2, w19
   552b8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   552bc:	add	x1, x1, #0xda8
   552c0:	mov	x0, x24
   552c4:	blr	x23
   552c8:	ldp	x25, x26, [sp, #64]
   552cc:	b	54498 <aarch64_get_opcode@@Base+0x5e84>
   552d0:	ldr	w3, [sp, #276]
   552d4:	adrp	x2, 65000 <fields@@Base+0x4c40>
   552d8:	add	x2, x2, #0x4b8
   552dc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   552e0:	add	x1, x1, #0x4e0
   552e4:	mov	x0, x24
   552e8:	blr	x23
   552ec:	ldr	x0, [sp, #344]
   552f0:	str	x0, [sp, #112]
   552f4:	cbnz	w22, 55218 <aarch64_get_opcode@@Base+0x6c04>
   552f8:	ldr	x0, [sp, #152]
   552fc:	cbnz	x0, 55258 <aarch64_get_opcode@@Base+0x6c44>
   55300:	ldr	x0, [sp, #400]
   55304:	cmp	x0, #0xf
   55308:	ldr	w0, [sp, #124]
   5530c:	csinc	w0, w0, wzr, ne  // ne = any
   55310:	str	w0, [sp, #124]
   55314:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   55318:	ldr	w3, [sp, #272]
   5531c:	adrp	x2, 65000 <fields@@Base+0x4c40>
   55320:	add	x2, x2, #0x4b8
   55324:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55328:	add	x1, x1, #0xdd0
   5532c:	mov	x0, x24
   55330:	blr	x23
   55334:	ldr	x0, [sp, #376]
   55338:	ldr	x2, [x20, #120]
   5533c:	mov	x1, x20
   55340:	ldr	x3, [sp, #392]
   55344:	add	x0, x0, x3
   55348:	blr	x2
   5534c:	b	55218 <aarch64_get_opcode@@Base+0x6c04>
   55350:	ldp	x25, x26, [sp, #64]
   55354:	b	54498 <aarch64_get_opcode@@Base+0x5e84>
   55358:	ldp	x25, x26, [sp, #64]
   5535c:	b	54498 <aarch64_get_opcode@@Base+0x5e84>
   55360:	stp	x29, x30, [sp, #-16]!
   55364:	mov	x29, sp
   55368:	mov	x4, x0
   5536c:	lsr	x5, x1, #21
   55370:	ubfx	x2, x1, #5, #2
   55374:	lsr	x3, x1, #16
   55378:	ldr	x0, [x0, #8]
   5537c:	ldr	x4, [x4]
   55380:	tbnz	w1, #22, 553b0 <aarch64_get_opcode@@Base+0x6d9c>
   55384:	lsr	x6, x1, #5
   55388:	tbz	w6, #0, 55398 <aarch64_get_opcode@@Base+0x6d84>
   5538c:	lsr	x2, x2, #1
   55390:	mov	x6, #0x10                  	// #16
   55394:	b	553b4 <aarch64_get_opcode@@Base+0x6da0>
   55398:	mov	x6, #0x20                  	// #32
   5539c:	cbz	x2, 553b4 <aarch64_get_opcode@@Base+0x6da0>
   553a0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   553a4:	add	x1, x1, #0xde0
   553a8:	blr	x4
   553ac:	b	553d8 <aarch64_get_opcode@@Base+0x6dc4>
   553b0:	mov	x6, #0x8                   	// #8
   553b4:	ubfiz	x3, x3, #1, #1
   553b8:	and	x5, x5, #0x1
   553bc:	orr	x3, x3, x5
   553c0:	mov	x1, #0x20                  	// #32
   553c4:	udiv	x1, x1, x6
   553c8:	madd	x2, x3, x1, x2
   553cc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   553d0:	add	x1, x1, #0xe40
   553d4:	blr	x4
   553d8:	ldp	x29, x30, [sp], #16
   553dc:	ret
   553e0:	mov	x3, x0
   553e4:	ldr	x0, [x0, #8]
   553e8:	ldr	x6, [x3]
   553ec:	and	x4, x1, #0x7f
   553f0:	cmp	w2, #0x25
   553f4:	b.eq	5547c <aarch64_get_opcode@@Base+0x6e68>  // b.none
   553f8:	b.hi	5543c <aarch64_get_opcode@@Base+0x6e28>  // b.pmore
   553fc:	cmp	w2, #0x22
   55400:	b.eq	5546c <aarch64_get_opcode@@Base+0x6e58>  // b.none
   55404:	b.ls	5541c <aarch64_get_opcode@@Base+0x6e08>  // b.plast
   55408:	cmp	w2, #0x23
   5540c:	b.ne	55450 <aarch64_get_opcode@@Base+0x6e3c>  // b.any
   55410:	ubfx	x7, x1, #16, #4
   55414:	lsl	x4, x4, #1
   55418:	b	55480 <aarch64_get_opcode@@Base+0x6e6c>
   5541c:	cmp	w2, #0x20
   55420:	b.eq	5547c <aarch64_get_opcode@@Base+0x6e68>  // b.none
   55424:	cmp	w2, #0x21
   55428:	b.ne	55438 <aarch64_get_opcode@@Base+0x6e24>  // b.any
   5542c:	ubfx	x7, x1, #16, #3
   55430:	lsl	x4, x4, #1
   55434:	b	55480 <aarch64_get_opcode@@Base+0x6e6c>
   55438:	ret
   5543c:	cmp	w2, #0x28
   55440:	b.eq	55410 <aarch64_get_opcode@@Base+0x6dfc>  // b.none
   55444:	b.ls	5545c <aarch64_get_opcode@@Base+0x6e48>  // b.plast
   55448:	cmp	w2, #0x29
   5544c:	b.ne	55478 <aarch64_get_opcode@@Base+0x6e64>  // b.any
   55450:	ubfx	x7, x1, #16, #4
   55454:	lsl	x4, x4, #2
   55458:	b	55480 <aarch64_get_opcode@@Base+0x6e6c>
   5545c:	cmp	w2, #0x26
   55460:	b.eq	5542c <aarch64_get_opcode@@Base+0x6e18>  // b.none
   55464:	cmp	w2, #0x27
   55468:	b.ne	55474 <aarch64_get_opcode@@Base+0x6e60>  // b.any
   5546c:	ubfx	x7, x1, #16, #4
   55470:	b	55480 <aarch64_get_opcode@@Base+0x6e6c>
   55474:	ret
   55478:	ret
   5547c:	ubfx	x7, x1, #16, #3
   55480:	stp	x29, x30, [sp, #-16]!
   55484:	mov	x29, sp
   55488:	ubfx	x5, x1, #21, #1
   5548c:	adrp	x3, 65000 <fields@@Base+0x4c40>
   55490:	add	x2, x3, #0x4b8
   55494:	adrp	x3, 59000 <xexit@@Base+0x74c>
   55498:	add	x3, x3, #0x9c0
   5549c:	tst	x1, #0x800000
   554a0:	csel	x3, x3, x2, ne  // ne = any
   554a4:	tbnz	w1, #24, 554e0 <aarch64_get_opcode@@Base+0x6ecc>
   554a8:	cbz	x5, 554d8 <aarch64_get_opcode@@Base+0x6ec4>
   554ac:	adrp	x1, fa000 <aarch64_opcode_table@@Base+0x55a20>
   554b0:	ldr	w1, [x1, #1616]
   554b4:	add	x1, x1, x1, lsl #3
   554b8:	add	x1, x7, x1, lsl #1
   554bc:	add	x1, x1, #0x2
   554c0:	adrp	x2, 8e000 <aarch64_operands@@Base+0x1bc0>
   554c4:	add	x2, x2, #0xb70
   554c8:	ldr	x2, [x2, x1, lsl #3]
   554cc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   554d0:	add	x1, x1, #0xe18
   554d4:	blr	x6
   554d8:	ldp	x29, x30, [sp], #16
   554dc:	ret
   554e0:	cbnz	x5, 55514 <aarch64_get_opcode@@Base+0x6f00>
   554e4:	adrp	x1, fa000 <aarch64_opcode_table@@Base+0x55a20>
   554e8:	ldr	w1, [x1, #1616]
   554ec:	add	x1, x1, x1, lsl #3
   554f0:	add	x1, x7, x1, lsl #1
   554f4:	add	x1, x1, #0x2
   554f8:	adrp	x2, 8e000 <aarch64_operands@@Base+0x1bc0>
   554fc:	add	x2, x2, #0xb70
   55500:	ldr	x2, [x2, x1, lsl #3]
   55504:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55508:	add	x1, x1, #0xdf8
   5550c:	blr	x6
   55510:	b	554d8 <aarch64_get_opcode@@Base+0x6ec4>
   55514:	adrp	x1, fa000 <aarch64_opcode_table@@Base+0x55a20>
   55518:	ldr	w1, [x1, #1616]
   5551c:	add	x1, x1, x1, lsl #3
   55520:	add	x1, x7, x1, lsl #1
   55524:	add	x1, x1, #0x2
   55528:	adrp	x2, 8e000 <aarch64_operands@@Base+0x1bc0>
   5552c:	add	x2, x2, #0xb70
   55530:	ldr	x2, [x2, x1, lsl #3]
   55534:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55538:	add	x1, x1, #0xe08
   5553c:	blr	x6
   55540:	b	554d8 <aarch64_get_opcode@@Base+0x6ec4>
   55544:	sub	sp, sp, #0x210
   55548:	stp	x29, x30, [sp]
   5554c:	mov	x29, sp
   55550:	stp	x19, x20, [sp, #16]
   55554:	stp	x21, x22, [sp, #32]
   55558:	stp	x23, x24, [sp, #48]
   5555c:	stp	x27, x28, [sp, #80]
   55560:	mov	x20, x0
   55564:	mov	x23, x1
   55568:	mov	x22, x2
   5556c:	ldr	x24, [x1, #8]
   55570:	ldr	x28, [x1]
   55574:	ldr	x1, [x1, #96]
   55578:	ldr	x0, [x1, #8]
   5557c:	tbz	w0, #15, 57be0 <aarch64_get_opcode@@Base+0x95cc>
   55580:	ldr	x1, [x1]
   55584:	mov	x2, #0xffffffffffcfffff    	// #-3145729
   55588:	cmp	x0, x2
   5558c:	ccmn	x1, #0x1, #0x0, eq  // eq = none
   55590:	b.eq	57be0 <aarch64_get_opcode@@Base+0x95cc>  // b.none
   55594:	mov	w4, #0x1                   	// #1
   55598:	mov	x3, x22
   5559c:	mov	x2, x23
   555a0:	mov	x1, x20
   555a4:	adrp	x0, 9d000 <aarch64_operands@@Base+0x10bc0>
   555a8:	add	x0, x0, #0xe70
   555ac:	bl	52fbc <aarch64_get_opcode@@Base+0x49a8>
   555b0:	cbnz	w0, 57c00 <aarch64_get_opcode@@Base+0x95ec>
   555b4:	stp	x25, x26, [sp, #64]
   555b8:	ldr	x25, [x23, #8]
   555bc:	ldr	x27, [x23]
   555c0:	mov	x26, x22
   555c4:	ubfx	x0, x22, #1, #3
   555c8:	str	x0, [sp, #112]
   555cc:	ubfx	x0, x22, #17, #3
   555d0:	str	x0, [sp, #104]
   555d4:	adrp	x19, 97000 <aarch64_operands@@Base+0xabc0>
   555d8:	add	x19, x19, #0x240
   555dc:	add	x0, sp, #0x200
   555e0:	str	x0, [sp, #96]
   555e4:	add	x0, sp, #0x1fc
   555e8:	str	x0, [sp, #120]
   555ec:	b	569e4 <aarch64_get_opcode@@Base+0x83d0>
   555f0:	mov	w2, #0x1                   	// #1
   555f4:	mov	x1, x22
   555f8:	mov	x0, x23
   555fc:	bl	4fc00 <aarch64_get_opcode@@Base+0x15ec>
   55600:	cbnz	w0, 57c00 <aarch64_get_opcode@@Base+0x95ec>
   55604:	mov	w4, #0x1                   	// #1
   55608:	mov	x3, x22
   5560c:	mov	x2, x23
   55610:	mov	x1, x20
   55614:	adrp	x0, 8f000 <aarch64_operands@@Base+0x2bc0>
   55618:	add	x0, x0, #0xc70
   5561c:	add	x0, x0, #0x3f0
   55620:	bl	52fbc <aarch64_get_opcode@@Base+0x49a8>
   55624:	str	w0, [sp, #96]
   55628:	cbnz	w0, 57c00 <aarch64_get_opcode@@Base+0x95ec>
   5562c:	adrp	x0, 90000 <aarch64_operands@@Base+0x3bc0>
   55630:	add	x0, x0, #0x4c0
   55634:	adrp	x21, 65000 <fields@@Base+0x4c40>
   55638:	add	x21, x21, #0xe28
   5563c:	str	x22, [sp, #120]
   55640:	ldr	x1, [x0, #32]
   55644:	and	x1, x22, x1
   55648:	ldr	x2, [x0, #24]
   5564c:	cmp	x1, x2
   55650:	b.eq	56a54 <aarch64_get_opcode@@Base+0x8440>  // b.none
   55654:	add	x0, x0, #0x30
   55658:	ldr	x21, [x0, #40]
   5565c:	cbnz	x21, 55640 <aarch64_get_opcode@@Base+0x702c>
   55660:	mov	w2, w22
   55664:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55668:	add	x1, x1, #0xda8
   5566c:	mov	x0, x24
   55670:	blr	x28
   55674:	b	57c00 <aarch64_get_opcode@@Base+0x95ec>
   55678:	sub	w0, w21, #0xc2
   5567c:	cmp	w0, #0x10
   55680:	b.hi	56a40 <aarch64_get_opcode@@Base+0x842c>  // b.pmore
   55684:	ldr	x2, [sp, #120]
   55688:	mov	w1, w21
   5568c:	mov	x0, x26
   55690:	bl	51f9c <aarch64_get_opcode@@Base+0x3988>
   55694:	cmp	w0, #0x0
   55698:	cset	w21, ne  // ne = any
   5569c:	ldr	x2, [sp, #96]
   556a0:	ldr	w1, [x19, #24]
   556a4:	mov	x0, x26
   556a8:	bl	527c0 <aarch64_get_opcode@@Base+0x41ac>
   556ac:	str	w0, [sp, #136]
   556b0:	ldr	w0, [x19, #24]
   556b4:	cmp	w0, #0x45
   556b8:	b.ne	556cc <aarch64_get_opcode@@Base+0x70b8>  // b.any
   556bc:	ldr	x0, [sp, #104]
   556c0:	ldr	x1, [sp, #112]
   556c4:	cmp	x0, x1
   556c8:	b.eq	569d8 <aarch64_get_opcode@@Base+0x83c4>  // b.none
   556cc:	str	w21, [sp, #96]
   556d0:	ldr	x21, [x19, #48]
   556d4:	ldrb	w2, [x21]
   556d8:	cbz	w2, 567bc <aarch64_get_opcode@@Base+0x81a8>
   556dc:	lsr	x0, x22, #21
   556e0:	ubfx	x1, x22, #21, #1
   556e4:	str	x1, [sp, #144]
   556e8:	ubfx	x1, x22, #28, #1
   556ec:	str	x1, [sp, #160]
   556f0:	ubfx	x1, x22, #23, #1
   556f4:	str	x1, [sp, #128]
   556f8:	ubfx	x1, x22, #5, #2
   556fc:	and	x0, x0, #0x2
   55700:	orr	x0, x1, x0
   55704:	str	x0, [sp, #256]
   55708:	lsr	x3, x22, #6
   5570c:	ubfiz	x1, x3, #1, #1
   55710:	ubfx	x0, x22, #4, #1
   55714:	orr	x0, x1, x0
   55718:	str	x0, [sp, #192]
   5571c:	asr	x1, x22, #4
   55720:	and	x1, x1, #0x2
   55724:	ubfx	x28, x22, #7, #1
   55728:	orr	x0, x1, x28
   5572c:	orr	x0, x0, #0x4
   55730:	str	x0, [sp, #240]
   55734:	orr	x0, x28, #0x2
   55738:	str	x0, [sp, #184]
   5573c:	ubfiz	x4, x22, #1, #1
   55740:	orr	x0, x4, x28
   55744:	orr	x0, x0, #0x4
   55748:	str	x0, [sp, #232]
   5574c:	asr	x0, x22, #10
   55750:	and	x0, x0, #0x4
   55754:	orr	x1, x0, x1
   55758:	orr	x1, x1, x28
   5575c:	str	x1, [sp, #224]
   55760:	orr	x0, x0, x4
   55764:	orr	x0, x0, x28
   55768:	str	x0, [sp, #216]
   5576c:	lsr	x0, x22, #7
   55770:	str	x0, [sp, #176]
   55774:	ubfx	x0, x22, #7, #3
   55778:	str	x0, [sp, #152]
   5577c:	ubfx	x0, x22, #8, #2
   55780:	str	x0, [sp, #168]
   55784:	mov	w4, #0x40                  	// #64
   55788:	tst	x22, #0x80
   5578c:	mov	w0, #0x30                  	// #48
   55790:	csel	w0, w4, w0, eq  // eq = none
   55794:	str	w0, [sp, #296]
   55798:	lsr	x1, x22, #12
   5579c:	ubfiz	x0, x1, #2, #3
   557a0:	and	x3, x3, #0x3
   557a4:	orr	w0, w0, w3
   557a8:	and	x1, x1, #0x1
   557ac:	str	x1, [sp, #120]
   557b0:	and	x1, x22, #0x7f
   557b4:	str	x1, [sp, #248]
   557b8:	ubfiz	x1, x22, #3, #7
   557bc:	str	x1, [sp, #208]
   557c0:	ubfiz	x1, x22, #2, #7
   557c4:	str	x1, [sp, #200]
   557c8:	asr	x1, x22, #16
   557cc:	ubfx	w3, w22, #16, #6
   557d0:	str	w3, [sp, #264]
   557d4:	and	w5, w1, #0x20
   557d8:	str	w5, [sp, #280]
   557dc:	sub	w4, w4, w3
   557e0:	str	w4, [sp, #300]
   557e4:	sub	w3, w3, #0x20
   557e8:	str	w3, [sp, #288]
   557ec:	and	w1, w1, #0x1f
   557f0:	str	w1, [sp, #272]
   557f4:	cmp	w0, #0x0
   557f8:	mov	w1, #0x20                  	// #32
   557fc:	csel	w0, w0, w1, ne  // ne = any
   55800:	str	w0, [sp, #140]
   55804:	str	xzr, [sp, #104]
   55808:	adrp	x24, 65000 <fields@@Base+0x4c40>
   5580c:	add	x24, x24, #0x790
   55810:	adrp	x0, 8f000 <aarch64_operands@@Base+0x2bc0>
   55814:	add	x0, x0, #0xc70
   55818:	str	x0, [sp, #112]
   5581c:	add	x0, x0, #0x830
   55820:	str	x0, [sp, #304]
   55824:	mov	x0, x28
   55828:	mov	x28, x26
   5582c:	mov	x26, x0
   55830:	b	56768 <aarch64_get_opcode@@Base+0x8154>
   55834:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55838:	add	x1, x1, #0x798
   5583c:	mov	x0, x25
   55840:	blr	x27
   55844:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55848:	ldr	x0, [sp, #128]
   5584c:	cbnz	x0, 5675c <aarch64_get_opcode@@Base+0x8148>
   55850:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55854:	add	x1, x1, #0x4b8
   55858:	mov	x0, x25
   5585c:	blr	x27
   55860:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55864:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   55868:	ldr	w0, [x0, #1032]
   5586c:	cbz	w0, 5675c <aarch64_get_opcode@@Base+0x8148>
   55870:	ldr	x1, [sp, #112]
   55874:	add	x1, x1, #0x188
   55878:	ubfx	x0, x0, #4, #4
   5587c:	ldr	x2, [x1, x0, lsl #3]
   55880:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55884:	add	x1, x1, #0x588
   55888:	mov	x0, x25
   5588c:	blr	x27
   55890:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55894:	ldr	w2, [x19, #24]
   55898:	mov	x1, x28
   5589c:	mov	x0, x23
   558a0:	bl	553e0 <aarch64_get_opcode@@Base+0x6dcc>
   558a4:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   558a8:	mov	x0, x22
   558ac:	bl	4e634 <aarch64_get_opcode@@Base+0x20>
   558b0:	ldr	x1, [sp, #112]
   558b4:	add	x1, x1, #0x770
   558b8:	ldr	x2, [x1, x0, lsl #3]
   558bc:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   558c0:	add	x1, x1, #0x588
   558c4:	mov	x0, x25
   558c8:	blr	x27
   558cc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   558d0:	ldr	w2, [sp, #140]
   558d4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   558d8:	add	x1, x1, #0xe30
   558dc:	mov	x0, x25
   558e0:	blr	x27
   558e4:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   558e8:	ldr	w2, [sp, #296]
   558ec:	adrp	x1, 65000 <fields@@Base+0x4c40>
   558f0:	add	x1, x1, #0xe30
   558f4:	mov	x0, x25
   558f8:	blr	x27
   558fc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55900:	ldr	w1, [x19, #24]
   55904:	ldr	x0, [x23, #8]
   55908:	ldr	x3, [x23]
   5590c:	cmp	w1, #0x9
   55910:	b.eq	55a24 <aarch64_get_opcode@@Base+0x7410>  // b.none
   55914:	b.hi	559c0 <aarch64_get_opcode@@Base+0x73ac>  // b.pmore
   55918:	cmp	w1, #0x5
   5591c:	b.eq	55a60 <aarch64_get_opcode@@Base+0x744c>  // b.none
   55920:	b.hi	5596c <aarch64_get_opcode@@Base+0x7358>  // b.pmore
   55924:	cmp	w1, #0x3
   55928:	b.eq	55a44 <aarch64_get_opcode@@Base+0x7430>  // b.none
   5592c:	b.ls	5593c <aarch64_get_opcode@@Base+0x7328>  // b.plast
   55930:	cmp	w1, #0x4
   55934:	b.eq	559f8 <aarch64_get_opcode@@Base+0x73e4>  // b.none
   55938:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   5593c:	cmp	w1, #0x1
   55940:	b.eq	55a24 <aarch64_get_opcode@@Base+0x7410>  // b.none
   55944:	cmp	w1, #0x2
   55948:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   5594c:	ldr	x1, [sp, #112]
   55950:	add	x1, x1, #0x7f0
   55954:	ldr	x2, [sp, #224]
   55958:	ldr	x2, [x1, x2, lsl #3]
   5595c:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55960:	add	x1, x1, #0x588
   55964:	blr	x3
   55968:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   5596c:	cmp	w1, #0x7
   55970:	b.eq	55a80 <aarch64_get_opcode@@Base+0x746c>  // b.none
   55974:	cmp	w1, #0x8
   55978:	b.ne	5599c <aarch64_get_opcode@@Base+0x7388>  // b.any
   5597c:	ldr	x1, [sp, #112]
   55980:	add	x1, x1, #0x7f0
   55984:	ldr	x2, [sp, #240]
   55988:	ldr	x2, [x1, x2, lsl #3]
   5598c:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55990:	add	x1, x1, #0x588
   55994:	blr	x3
   55998:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   5599c:	cmp	w1, #0x6
   559a0:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   559a4:	ldr	x1, [sp, #112]
   559a8:	add	x1, x1, #0x7f0
   559ac:	ldr	x2, [x1, x26, lsl #3]
   559b0:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   559b4:	add	x1, x1, #0x588
   559b8:	blr	x3
   559bc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   559c0:	cmp	w1, #0xd
   559c4:	b.eq	55a60 <aarch64_get_opcode@@Base+0x744c>  // b.none
   559c8:	b.ls	559e8 <aarch64_get_opcode@@Base+0x73d4>  // b.plast
   559cc:	cmp	w1, #0xf
   559d0:	b.eq	55a80 <aarch64_get_opcode@@Base+0x746c>  // b.none
   559d4:	cmp	w1, #0x10
   559d8:	b.eq	5597c <aarch64_get_opcode@@Base+0x7368>  // b.none
   559dc:	cmp	w1, #0xe
   559e0:	b.eq	559a4 <aarch64_get_opcode@@Base+0x7390>  // b.none
   559e4:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   559e8:	cmp	w1, #0xb
   559ec:	b.eq	55a44 <aarch64_get_opcode@@Base+0x7430>  // b.none
   559f0:	cmp	w1, #0xc
   559f4:	b.ne	55a18 <aarch64_get_opcode@@Base+0x7404>  // b.any
   559f8:	ldr	x1, [sp, #112]
   559fc:	add	x1, x1, #0x7f0
   55a00:	ldr	x2, [sp, #184]
   55a04:	ldr	x2, [x1, x2, lsl #3]
   55a08:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55a0c:	add	x1, x1, #0x588
   55a10:	blr	x3
   55a14:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55a18:	cmp	w1, #0xa
   55a1c:	b.eq	5594c <aarch64_get_opcode@@Base+0x7338>  // b.none
   55a20:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55a24:	ldr	x1, [sp, #112]
   55a28:	add	x1, x1, #0x7f0
   55a2c:	ldr	x2, [sp, #216]
   55a30:	ldr	x2, [x1, x2, lsl #3]
   55a34:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55a38:	add	x1, x1, #0x588
   55a3c:	blr	x3
   55a40:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55a44:	ldr	x1, [sp, #112]
   55a48:	add	x1, x1, #0x7f0
   55a4c:	ldr	x2, [x1, x26, lsl #3]
   55a50:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55a54:	add	x1, x1, #0x588
   55a58:	blr	x3
   55a5c:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55a60:	ldr	x1, [sp, #112]
   55a64:	add	x1, x1, #0x7f0
   55a68:	ldr	x2, [sp, #232]
   55a6c:	ldr	x2, [x1, x2, lsl #3]
   55a70:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55a74:	add	x1, x1, #0x588
   55a78:	blr	x3
   55a7c:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55a80:	ldr	x1, [sp, #112]
   55a84:	add	x1, x1, #0x7f0
   55a88:	ldr	x2, [sp, #184]
   55a8c:	ldr	x2, [x1, x2, lsl #3]
   55a90:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55a94:	add	x1, x1, #0x588
   55a98:	blr	x3
   55a9c:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55aa0:	tbz	w28, #0, 5675c <aarch64_get_opcode@@Base+0x8148>
   55aa4:	ldr	x2, [sp, #192]
   55aa8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55aac:	add	x1, x1, #0xe38
   55ab0:	mov	x0, x25
   55ab4:	blr	x27
   55ab8:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55abc:	ldr	w1, [x19, #24]
   55ac0:	ldr	x0, [x23, #8]
   55ac4:	ldr	x2, [x23]
   55ac8:	cmp	w1, #0x39
   55acc:	b.eq	55b0c <aarch64_get_opcode@@Base+0x74f8>  // b.none
   55ad0:	cmp	w1, #0x3a
   55ad4:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   55ad8:	ldr	x1, [sp, #152]
   55adc:	cmp	x1, #0x3
   55ae0:	b.eq	55bb0 <aarch64_get_opcode@@Base+0x759c>  // b.none
   55ae4:	ldr	x3, [sp, #176]
   55ae8:	tbnz	w3, #2, 55b7c <aarch64_get_opcode@@Base+0x7568>
   55aec:	cmp	x1, #0x1
   55af0:	b.eq	55ba0 <aarch64_get_opcode@@Base+0x758c>  // b.none
   55af4:	cmp	x1, #0x2
   55af8:	b.ne	55b68 <aarch64_get_opcode@@Base+0x7554>  // b.any
   55afc:	adrp	x1, 66000 <fields@@Base+0x5c40>
   55b00:	add	x1, x1, #0x9e0
   55b04:	blr	x2
   55b08:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55b0c:	ldr	x1, [sp, #168]
   55b10:	cmp	x1, #0x2
   55b14:	b.eq	55b48 <aarch64_get_opcode@@Base+0x7534>  // b.none
   55b18:	b.hi	55b58 <aarch64_get_opcode@@Base+0x7544>  // b.pmore
   55b1c:	cbz	x1, 55b38 <aarch64_get_opcode@@Base+0x7524>
   55b20:	cmp	x1, #0x1
   55b24:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   55b28:	adrp	x1, 66000 <fields@@Base+0x5c40>
   55b2c:	add	x1, x1, #0x5f8
   55b30:	blr	x2
   55b34:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55b38:	adrp	x1, 66000 <fields@@Base+0x5c40>
   55b3c:	add	x1, x1, #0x9e0
   55b40:	blr	x2
   55b44:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55b48:	adrp	x1, 5f000 <xexit@@Base+0x674c>
   55b4c:	add	x1, x1, #0x9e0
   55b50:	blr	x2
   55b54:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55b58:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55b5c:	add	x1, x1, #0xa80
   55b60:	blr	x2
   55b64:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55b68:	cbnz	x1, 5675c <aarch64_get_opcode@@Base+0x8148>
   55b6c:	adrp	x1, 66000 <fields@@Base+0x5c40>
   55b70:	add	x1, x1, #0x5f8
   55b74:	blr	x2
   55b78:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55b7c:	ldr	x1, [sp, #152]
   55b80:	cmp	x1, #0x5
   55b84:	b.eq	55bc0 <aarch64_get_opcode@@Base+0x75ac>  // b.none
   55b88:	cmp	x1, #0x7
   55b8c:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   55b90:	adrp	x1, 5f000 <xexit@@Base+0x674c>
   55b94:	add	x1, x1, #0x9e0
   55b98:	blr	x2
   55b9c:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55ba0:	adrp	x1, 68000 <fields@@Base+0x7c40>
   55ba4:	add	x1, x1, #0x1d8
   55ba8:	blr	x2
   55bac:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55bb0:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   55bb4:	add	x1, x1, #0x2f0
   55bb8:	blr	x2
   55bbc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55bc0:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55bc4:	add	x1, x1, #0xa80
   55bc8:	blr	x2
   55bcc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55bd0:	ldr	w2, [x19, #24]
   55bd4:	mov	x1, x28
   55bd8:	mov	x0, x23
   55bdc:	bl	52cd8 <aarch64_get_opcode@@Base+0x46c4>
   55be0:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55be4:	ldr	w0, [x19, #24]
   55be8:	cmp	w0, #0x41
   55bec:	b.eq	55c0c <aarch64_get_opcode@@Base+0x75f8>  // b.none
   55bf0:	ldr	x0, [sp, #160]
   55bf4:	cbnz	x0, 55c44 <aarch64_get_opcode@@Base+0x7630>
   55bf8:	adrp	x1, 59000 <xexit@@Base+0x74c>
   55bfc:	add	x1, x1, #0x780
   55c00:	mov	x0, x25
   55c04:	blr	x27
   55c08:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55c0c:	ldr	x0, [sp, #128]
   55c10:	cbz	x0, 55c28 <aarch64_get_opcode@@Base+0x7614>
   55c14:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55c18:	add	x1, x1, #0xf20
   55c1c:	mov	x0, x25
   55c20:	blr	x27
   55c24:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55c28:	ldr	x0, [sp, #256]
   55c2c:	cbz	x0, 5675c <aarch64_get_opcode@@Base+0x8148>
   55c30:	adrp	x1, 59000 <xexit@@Base+0x74c>
   55c34:	add	x1, x1, #0x780
   55c38:	mov	x0, x25
   55c3c:	blr	x27
   55c40:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55c44:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55c48:	add	x1, x1, #0xf20
   55c4c:	mov	x0, x25
   55c50:	blr	x27
   55c54:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55c58:	ldr	x0, [x23, #8]
   55c5c:	ldr	x2, [x23]
   55c60:	adrp	x1, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   55c64:	ldr	w1, [x1, #1044]
   55c68:	cmp	w1, #0x1
   55c6c:	b.eq	55c88 <aarch64_get_opcode@@Base+0x7674>  // b.none
   55c70:	cmp	w1, #0x2
   55c74:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   55c78:	adrp	x1, 6f000 <fields@@Base+0xec40>
   55c7c:	add	x1, x1, #0x518
   55c80:	blr	x2
   55c84:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55c88:	adrp	x1, 5d000 <xexit@@Base+0x474c>
   55c8c:	add	x1, x1, #0x350
   55c90:	blr	x2
   55c94:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55c98:	ldr	x0, [sp, #144]
   55c9c:	cbz	x0, 5675c <aarch64_get_opcode@@Base+0x8148>
   55ca0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55ca4:	add	x1, x1, #0x4c0
   55ca8:	mov	x0, x25
   55cac:	blr	x27
   55cb0:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55cb4:	ldr	w21, [x19, #24]
   55cb8:	ldr	x0, [x23, #8]
   55cbc:	str	x0, [sp, #312]
   55cc0:	ldr	x0, [x23]
   55cc4:	str	x0, [sp, #320]
   55cc8:	mov	w4, #0x16                  	// #22
   55ccc:	mov	w3, w4
   55cd0:	mov	w2, #0xf                   	// #15
   55cd4:	mov	w1, #0xd                   	// #13
   55cd8:	mov	x0, x28
   55cdc:	bl	51c44 <aarch64_get_opcode@@Base+0x3630>
   55ce0:	mov	x2, x0
   55ce4:	cmp	w21, #0x1e
   55ce8:	b.eq	55d38 <aarch64_get_opcode@@Base+0x7724>  // b.none
   55cec:	b.hi	55d2c <aarch64_get_opcode@@Base+0x7718>  // b.pmore
   55cf0:	cmp	w21, #0x1c
   55cf4:	b.eq	55d38 <aarch64_get_opcode@@Base+0x7724>  // b.none
   55cf8:	cmp	w21, #0x1d
   55cfc:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   55d00:	cmp	x2, #0x4
   55d04:	b.hi	55d74 <aarch64_get_opcode@@Base+0x7760>  // b.pmore
   55d08:	add	x5, x2, #0x3
   55d0c:	add	x4, x2, #0x2
   55d10:	add	x3, x2, #0x1
   55d14:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55d18:	add	x1, x1, #0xe70
   55d1c:	ldr	x0, [sp, #312]
   55d20:	ldr	x6, [sp, #320]
   55d24:	blr	x6
   55d28:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55d2c:	cmp	w21, #0x1f
   55d30:	b.eq	55d00 <aarch64_get_opcode@@Base+0x76ec>  // b.none
   55d34:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55d38:	cmp	x2, #0x6
   55d3c:	b.hi	55d5c <aarch64_get_opcode@@Base+0x7748>  // b.pmore
   55d40:	add	x3, x2, #0x1
   55d44:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55d48:	add	x1, x1, #0xe48
   55d4c:	ldr	x0, [sp, #312]
   55d50:	ldr	x4, [sp, #320]
   55d54:	blr	x4
   55d58:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55d5c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55d60:	add	x1, x1, #0xe58
   55d64:	ldr	x0, [sp, #312]
   55d68:	ldr	x3, [sp, #320]
   55d6c:	blr	x3
   55d70:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55d74:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55d78:	add	x1, x1, #0xe58
   55d7c:	ldr	x0, [sp, #312]
   55d80:	ldr	x3, [sp, #320]
   55d84:	blr	x3
   55d88:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55d8c:	mov	x3, x19
   55d90:	mov	w2, #0x1c                  	// #28
   55d94:	mov	x1, x28
   55d98:	mov	x0, x23
   55d9c:	bl	50c48 <aarch64_get_opcode@@Base+0x2634>
   55da0:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55da4:	mov	x1, x28
   55da8:	mov	x0, x23
   55dac:	bl	55360 <aarch64_get_opcode@@Base+0x6d4c>
   55db0:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55db4:	ldr	x0, [sp, #120]
   55db8:	cbnz	x0, 55dd0 <aarch64_get_opcode@@Base+0x77bc>
   55dbc:	adrp	x1, 5c000 <xexit@@Base+0x374c>
   55dc0:	add	x1, x1, #0x518
   55dc4:	mov	x0, x25
   55dc8:	blr	x27
   55dcc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55dd0:	adrp	x1, 5d000 <xexit@@Base+0x474c>
   55dd4:	add	x1, x1, #0x350
   55dd8:	mov	x0, x25
   55ddc:	blr	x27
   55de0:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55de4:	ldr	x0, [sp, #120]
   55de8:	cbz	x0, 5675c <aarch64_get_opcode@@Base+0x8148>
   55dec:	adrp	x1, 68000 <fields@@Base+0x7c40>
   55df0:	add	x1, x1, #0x1d8
   55df4:	mov	x0, x25
   55df8:	blr	x27
   55dfc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55e00:	add	x3, sp, #0x204
   55e04:	add	x2, sp, #0x208
   55e08:	mov	x1, x28
   55e0c:	mov	x0, x20
   55e10:	bl	4f250 <aarch64_get_opcode@@Base+0xc3c>
   55e14:	mov	x20, x0
   55e18:	ldrb	w0, [x0]
   55e1c:	sub	w0, w0, #0x41
   55e20:	cmp	w0, #0x37
   55e24:	b.hi	5672c <aarch64_get_opcode@@Base+0x8118>  // b.pmore
   55e28:	adrp	x1, 74000 <fields@@Base+0x13c40>
   55e2c:	add	x1, x1, #0x860
   55e30:	ldrh	w0, [x1, w0, uxtw #1]
   55e34:	adr	x1, 55e40 <aarch64_get_opcode@@Base+0x782c>
   55e38:	add	x0, x1, w0, sxth #2
   55e3c:	br	x0
   55e40:	ldr	x1, [sp, #520]
   55e44:	cmp	x1, #0xd
   55e48:	b.eq	56734 <aarch64_get_opcode@@Base+0x8120>  // b.none
   55e4c:	cmp	x1, #0xf
   55e50:	b.eq	55e88 <aarch64_get_opcode@@Base+0x7874>  // b.none
   55e54:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   55e58:	ldr	w0, [x0, #1616]
   55e5c:	add	x0, x0, x0, lsl #3
   55e60:	add	x0, x1, x0, lsl #1
   55e64:	add	x0, x0, #0x2
   55e68:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   55e6c:	add	x1, x1, #0xb70
   55e70:	ldr	x2, [x1, x0, lsl #3]
   55e74:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55e78:	add	x1, x1, #0x588
   55e7c:	mov	x0, x25
   55e80:	blr	x27
   55e84:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55e88:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55e8c:	add	x1, x1, #0xe90
   55e90:	mov	x0, x25
   55e94:	blr	x27
   55e98:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55e9c:	ldr	x0, [sp, #112]
   55ea0:	add	x0, x0, #0x188
   55ea4:	ldr	x1, [sp, #520]
   55ea8:	ldr	x2, [x0, x1, lsl #3]
   55eac:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55eb0:	add	x1, x1, #0x588
   55eb4:	mov	x0, x25
   55eb8:	blr	x27
   55ebc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55ec0:	ldr	x0, [sp, #520]
   55ec4:	eor	x0, x0, #0x1
   55ec8:	str	x0, [sp, #520]
   55ecc:	ldr	x1, [sp, #112]
   55ed0:	add	x1, x1, #0x188
   55ed4:	ldr	x2, [x1, x0, lsl #3]
   55ed8:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55edc:	add	x1, x1, #0x588
   55ee0:	mov	x0, x25
   55ee4:	blr	x27
   55ee8:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55eec:	ldr	x1, [sp, #520]
   55ef0:	and	x0, x1, #0xfffffffffffffffd
   55ef4:	cmp	x0, #0xd
   55ef8:	b.eq	56740 <aarch64_get_opcode@@Base+0x812c>  // b.none
   55efc:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   55f00:	ldr	w0, [x0, #1616]
   55f04:	add	x0, x0, x0, lsl #3
   55f08:	add	x0, x1, x0, lsl #1
   55f0c:	add	x0, x0, #0x2
   55f10:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   55f14:	add	x1, x1, #0xb70
   55f18:	ldr	x2, [x1, x0, lsl #3]
   55f1c:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55f20:	add	x1, x1, #0x588
   55f24:	mov	x0, x25
   55f28:	blr	x27
   55f2c:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55f30:	ldr	x1, [sp, #520]
   55f34:	ldr	x0, [x23, #8]
   55f38:	ldr	x3, [x23]
   55f3c:	ldr	w2, [x19, #24]
   55f40:	sub	w2, w2, #0x1
   55f44:	cmp	w2, #0xc0
   55f48:	b.hi	5675c <aarch64_get_opcode@@Base+0x8148>  // b.pmore
   55f4c:	adrp	x4, 74000 <fields@@Base+0x13c40>
   55f50:	add	x4, x4, #0x8d0
   55f54:	ldrh	w2, [x4, w2, uxtw #1]
   55f58:	adr	x4, 55f64 <aarch64_get_opcode@@Base+0x7950>
   55f5c:	add	x2, x4, w2, sxth #2
   55f60:	br	x2
   55f64:	cmp	x1, #0x3
   55f68:	b.hi	55f84 <aarch64_get_opcode@@Base+0x7970>  // b.pmore
   55f6c:	ldr	x2, [sp, #304]
   55f70:	ldr	x2, [x2, x1, lsl #3]
   55f74:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   55f78:	add	x1, x1, #0x588
   55f7c:	blr	x3
   55f80:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55f84:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55f88:	add	x1, x1, #0xe98
   55f8c:	blr	x3
   55f90:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55f94:	cbnz	x1, 55fa8 <aarch64_get_opcode@@Base+0x7994>
   55f98:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55f9c:	add	x1, x1, #0xea8
   55fa0:	blr	x3
   55fa4:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55fa8:	cmp	x1, #0x1
   55fac:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   55fb0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   55fb4:	add	x1, x1, #0xfb8
   55fb8:	blr	x3
   55fbc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55fc0:	cbnz	x1, 55fd4 <aarch64_get_opcode@@Base+0x79c0>
   55fc4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   55fc8:	add	x1, x1, #0xfb8
   55fcc:	blr	x3
   55fd0:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55fd4:	cmp	x1, #0x1
   55fd8:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   55fdc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   55fe0:	add	x1, x1, #0xea8
   55fe4:	blr	x3
   55fe8:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   55fec:	cmp	x1, #0x1
   55ff0:	b.eq	5600c <aarch64_get_opcode@@Base+0x79f8>  // b.none
   55ff4:	cmp	x1, #0x2
   55ff8:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   55ffc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   56000:	add	x1, x1, #0xfb8
   56004:	blr	x3
   56008:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   5600c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   56010:	add	x1, x1, #0xa60
   56014:	blr	x3
   56018:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   5601c:	cmp	x1, #0x1
   56020:	b.eq	56040 <aarch64_get_opcode@@Base+0x7a2c>  // b.none
   56024:	cmp	x1, #0x2
   56028:	b.eq	56050 <aarch64_get_opcode@@Base+0x7a3c>  // b.none
   5602c:	cbnz	x1, 5675c <aarch64_get_opcode@@Base+0x8148>
   56030:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56034:	add	x1, x1, #0xea8
   56038:	blr	x3
   5603c:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56040:	adrp	x1, 59000 <xexit@@Base+0x74c>
   56044:	add	x1, x1, #0xfb8
   56048:	blr	x3
   5604c:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56050:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   56054:	add	x1, x1, #0xa60
   56058:	blr	x3
   5605c:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56060:	cmp	x1, #0xf
   56064:	b.hi	5675c <aarch64_get_opcode@@Base+0x8148>  // b.pmore
   56068:	mov	x2, #0x1                   	// #1
   5606c:	lsl	x1, x2, x1
   56070:	tst	x1, #0xff00
   56074:	b.ne	560b0 <aarch64_get_opcode@@Base+0x7a9c>  // b.any
   56078:	mov	x2, #0xaa                  	// #170
   5607c:	tst	x1, x2
   56080:	b.ne	560a0 <aarch64_get_opcode@@Base+0x7a8c>  // b.any
   56084:	mov	x2, #0x11                  	// #17
   56088:	tst	x1, x2
   5608c:	b.eq	5675c <aarch64_get_opcode@@Base+0x8148>  // b.none
   56090:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56094:	add	x1, x1, #0xea8
   56098:	blr	x3
   5609c:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   560a0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   560a4:	add	x1, x1, #0xfb8
   560a8:	blr	x3
   560ac:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   560b0:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   560b4:	add	x1, x1, #0xa60
   560b8:	blr	x3
   560bc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   560c0:	cmp	x1, #0x1c
   560c4:	b.eq	56138 <aarch64_get_opcode@@Base+0x7b24>  // b.none
   560c8:	b.hi	56108 <aarch64_get_opcode@@Base+0x7af4>  // b.pmore
   560cc:	cmp	x1, #0x1a
   560d0:	b.hi	5675c <aarch64_get_opcode@@Base+0x8148>  // b.pmore
   560d4:	mov	x2, #0x1                   	// #1
   560d8:	lsl	x1, x2, x1
   560dc:	mov	x2, #0x1111                	// #4369
   560e0:	movk	x2, #0x500, lsl #16
   560e4:	tst	x1, x2
   560e8:	b.ne	56128 <aarch64_get_opcode@@Base+0x7b14>  // b.any
   560ec:	mov	x2, #0x110000              	// #1114112
   560f0:	tst	x1, x2
   560f4:	b.eq	5675c <aarch64_get_opcode@@Base+0x8148>  // b.none
   560f8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   560fc:	add	x1, x1, #0xeb8
   56100:	blr	x3
   56104:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56108:	cmp	x1, #0x1d
   5610c:	b.eq	56148 <aarch64_get_opcode@@Base+0x7b34>  // b.none
   56110:	cmp	x1, #0x1e
   56114:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   56118:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5611c:	add	x1, x1, #0xed0
   56120:	blr	x3
   56124:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56128:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5612c:	add	x1, x1, #0xeb0
   56130:	blr	x3
   56134:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56138:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5613c:	add	x1, x1, #0xec0
   56140:	blr	x3
   56144:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56148:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5614c:	add	x1, x1, #0xec8
   56150:	blr	x3
   56154:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56158:	cbnz	x1, 5616c <aarch64_get_opcode@@Base+0x7b58>
   5615c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56160:	add	x1, x1, #0xed8
   56164:	blr	x3
   56168:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   5616c:	cmp	x1, #0x1
   56170:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   56174:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56178:	add	x1, x1, #0xee0
   5617c:	blr	x3
   56180:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56184:	cmp	x1, #0xd
   56188:	b.hi	5675c <aarch64_get_opcode@@Base+0x8148>  // b.pmore
   5618c:	mov	x2, #0x1                   	// #1
   56190:	lsl	x1, x2, x1
   56194:	mov	x2, #0x3055                	// #12373
   56198:	tst	x1, x2
   5619c:	b.ne	561bc <aarch64_get_opcode@@Base+0x7ba8>  // b.any
   561a0:	mov	x2, #0x500                 	// #1280
   561a4:	tst	x1, x2
   561a8:	b.eq	5675c <aarch64_get_opcode@@Base+0x8148>  // b.none
   561ac:	adrp	x1, 59000 <xexit@@Base+0x74c>
   561b0:	add	x1, x1, #0xfb8
   561b4:	blr	x3
   561b8:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   561bc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   561c0:	add	x1, x1, #0xea8
   561c4:	blr	x3
   561c8:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   561cc:	cmp	x1, #0xb
   561d0:	b.hi	5675c <aarch64_get_opcode@@Base+0x8148>  // b.pmore
   561d4:	mov	x2, #0x1                   	// #1
   561d8:	lsl	x1, x2, x1
   561dc:	mov	x2, #0xaa                  	// #170
   561e0:	tst	x1, x2
   561e4:	b.ne	56204 <aarch64_get_opcode@@Base+0x7bf0>  // b.any
   561e8:	mov	x2, #0xa00                 	// #2560
   561ec:	tst	x1, x2
   561f0:	b.eq	5675c <aarch64_get_opcode@@Base+0x8148>  // b.none
   561f4:	adrp	x1, 59000 <xexit@@Base+0x74c>
   561f8:	add	x1, x1, #0xfb8
   561fc:	blr	x3
   56200:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56204:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56208:	add	x1, x1, #0xea8
   5620c:	blr	x3
   56210:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56214:	cmp	x1, #0x1
   56218:	b.eq	56238 <aarch64_get_opcode@@Base+0x7c24>  // b.none
   5621c:	sub	x1, x1, #0x2
   56220:	cmp	x1, #0x1
   56224:	b.hi	5675c <aarch64_get_opcode@@Base+0x8148>  // b.pmore
   56228:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5622c:	add	x1, x1, #0xea8
   56230:	blr	x3
   56234:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56238:	adrp	x1, 59000 <xexit@@Base+0x74c>
   5623c:	add	x1, x1, #0xfb8
   56240:	blr	x3
   56244:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56248:	cmp	x1, #0x3
   5624c:	b.hi	5626c <aarch64_get_opcode@@Base+0x7c58>  // b.pmore
   56250:	cmp	x1, #0x1
   56254:	b.hi	56288 <aarch64_get_opcode@@Base+0x7c74>  // b.pmore
   56258:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   5625c:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   56260:	add	x1, x1, #0xa60
   56264:	blr	x3
   56268:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   5626c:	sub	x1, x1, #0x4
   56270:	cmp	x1, #0x3
   56274:	b.hi	5675c <aarch64_get_opcode@@Base+0x8148>  // b.pmore
   56278:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5627c:	add	x1, x1, #0xea8
   56280:	blr	x3
   56284:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56288:	adrp	x1, 59000 <xexit@@Base+0x74c>
   5628c:	add	x1, x1, #0xfb8
   56290:	blr	x3
   56294:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56298:	ldr	x0, [sp, #520]
   5629c:	cmp	x0, #0x1
   562a0:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   562a4:	adrp	x1, 71000 <fields@@Base+0x10c40>
   562a8:	add	x1, x1, #0x380
   562ac:	mov	x0, x25
   562b0:	blr	x27
   562b4:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   562b8:	ldr	x0, [sp, #520]
   562bc:	cmp	x0, #0x1
   562c0:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   562c4:	adrp	x1, 66000 <fields@@Base+0x5c40>
   562c8:	add	x1, x1, #0x9e0
   562cc:	mov	x0, x25
   562d0:	blr	x27
   562d4:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   562d8:	ldr	x0, [sp, #520]
   562dc:	lsl	w0, w0, #1
   562e0:	orr	w1, w0, #0x1
   562e4:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   562e8:	ldr	w0, [x0, #1616]
   562ec:	add	x0, x0, x0, lsl #3
   562f0:	add	x0, x1, x0, lsl #1
   562f4:	add	x0, x0, #0x2
   562f8:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   562fc:	add	x1, x1, #0xb70
   56300:	ldr	x2, [x1, x0, lsl #3]
   56304:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   56308:	add	x1, x1, #0x588
   5630c:	mov	x0, x25
   56310:	blr	x27
   56314:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56318:	ldr	w0, [x19, #24]
   5631c:	cmp	w0, #0x34
   56320:	b.eq	5636c <aarch64_get_opcode@@Base+0x7d58>  // b.none
   56324:	b.hi	56358 <aarch64_get_opcode@@Base+0x7d44>  // b.pmore
   56328:	ldr	x2, [sp, #200]
   5632c:	cmp	w0, #0x2e
   56330:	b.eq	56344 <aarch64_get_opcode@@Base+0x7d30>  // b.none
   56334:	cmp	w0, #0x2f
   56338:	ldr	x0, [sp, #248]
   5633c:	ldr	x1, [sp, #208]
   56340:	csel	x2, x0, x1, ne  // ne = any
   56344:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56348:	add	x1, x1, #0xe40
   5634c:	mov	x0, x25
   56350:	blr	x27
   56354:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56358:	cmp	w0, #0x35
   5635c:	ldr	x0, [sp, #248]
   56360:	ldr	x1, [sp, #208]
   56364:	csel	x2, x0, x1, ne  // ne = any
   56368:	b	56344 <aarch64_get_opcode@@Base+0x7d30>
   5636c:	ldr	x2, [sp, #200]
   56370:	b	56344 <aarch64_get_opcode@@Base+0x7d30>
   56374:	mov	x2, #0x40                  	// #64
   56378:	ldr	x0, [sp, #520]
   5637c:	sub	x2, x2, x0
   56380:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56384:	add	x1, x1, #0xe40
   56388:	mov	x0, x25
   5638c:	blr	x27
   56390:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56394:	ldr	x0, [sp, #520]
   56398:	lsl	w1, w0, #1
   5639c:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   563a0:	ldr	w0, [x0, #1616]
   563a4:	add	x0, x0, x0, lsl #3
   563a8:	add	x0, x1, x0, lsl #1
   563ac:	add	x0, x0, #0x2
   563b0:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   563b4:	add	x1, x1, #0xb70
   563b8:	ldr	x2, [x1, x0, lsl #3]
   563bc:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   563c0:	add	x1, x1, #0x588
   563c4:	mov	x0, x25
   563c8:	blr	x27
   563cc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   563d0:	ldr	x0, [sp, #520]
   563d4:	cmp	x0, #0x2
   563d8:	b.eq	56428 <aarch64_get_opcode@@Base+0x7e14>  // b.none
   563dc:	b.hi	563f8 <aarch64_get_opcode@@Base+0x7de4>  // b.pmore
   563e0:	cbz	x0, 56414 <aarch64_get_opcode@@Base+0x7e00>
   563e4:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   563e8:	add	x1, x1, #0xa78
   563ec:	mov	x0, x25
   563f0:	blr	x27
   563f4:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   563f8:	cmp	x0, #0x3
   563fc:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   56400:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   56404:	add	x1, x1, #0xa60
   56408:	mov	x0, x25
   5640c:	blr	x27
   56410:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56414:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56418:	add	x1, x1, #0x4b0
   5641c:	mov	x0, x25
   56420:	blr	x27
   56424:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56428:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   5642c:	add	x1, x1, #0xa48
   56430:	mov	x0, x25
   56434:	blr	x27
   56438:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   5643c:	ldr	x1, [sp, #520]
   56440:	ldrsw	x3, [sp, #516]
   56444:	ldr	x0, [x23, #8]
   56448:	ldr	x2, [x23]
   5644c:	cmp	x3, #0x1
   56450:	b.eq	5647c <aarch64_get_opcode@@Base+0x7e68>  // b.none
   56454:	cmp	x3, #0x2
   56458:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   5645c:	cmp	x1, #0x2
   56460:	b.eq	564d0 <aarch64_get_opcode@@Base+0x7ebc>  // b.none
   56464:	b.hi	564a8 <aarch64_get_opcode@@Base+0x7e94>  // b.pmore
   56468:	cbz	x1, 564c0 <aarch64_get_opcode@@Base+0x7eac>
   5646c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56470:	add	x1, x1, #0xee8
   56474:	blr	x2
   56478:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   5647c:	cbz	x1, 56498 <aarch64_get_opcode@@Base+0x7e84>
   56480:	cmp	x1, #0x1
   56484:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   56488:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5648c:	add	x1, x1, #0xef0
   56490:	blr	x2
   56494:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56498:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5649c:	add	x1, x1, #0xee8
   564a0:	blr	x2
   564a4:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   564a8:	cmp	x1, #0x3
   564ac:	b.ne	5675c <aarch64_get_opcode@@Base+0x8148>  // b.any
   564b0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   564b4:	add	x1, x1, #0xef0
   564b8:	blr	x2
   564bc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   564c0:	adrp	x1, 5a000 <xexit@@Base+0x174c>
   564c4:	add	x1, x1, #0xb60
   564c8:	blr	x2
   564cc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   564d0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   564d4:	add	x1, x1, #0xef8
   564d8:	blr	x2
   564dc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   564e0:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   564e4:	ldr	w0, [x0, #1616]
   564e8:	add	x0, x0, x0, lsl #3
   564ec:	ldr	x1, [sp, #520]
   564f0:	add	x0, x1, x0, lsl #1
   564f4:	add	x0, x0, #0x2
   564f8:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   564fc:	add	x1, x1, #0xb70
   56500:	ldr	x2, [x1, x0, lsl #3]
   56504:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   56508:	add	x1, x1, #0x588
   5650c:	mov	x0, x25
   56510:	blr	x27
   56514:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56518:	ldr	w0, [x19, #24]
   5651c:	sub	w1, w0, #0x77
   56520:	cmp	w1, #0x1
   56524:	cset	w3, ls  // ls = plast
   56528:	and	w1, w0, #0xfffffff7
   5652c:	cmp	w1, #0x80
   56530:	cset	w4, eq  // eq = none
   56534:	cmp	w0, #0x84
   56538:	cset	w1, eq  // eq = none
   5653c:	sub	w2, w0, #0x86
   56540:	cmp	w1, #0x0
   56544:	ccmp	w2, #0x3, #0x0, eq  // eq = none
   56548:	cset	w2, ls  // ls = plast
   5654c:	sub	w5, w0, #0x7e
   56550:	cmp	w3, #0x0
   56554:	ccmp	w5, #0x2, #0x0, eq  // eq = none
   56558:	cset	w5, ls  // ls = plast
   5655c:	orr	w2, w2, w5
   56560:	cbz	w2, 56614 <aarch64_get_opcode@@Base+0x8000>
   56564:	ldr	x2, [x23, #8]
   56568:	str	x2, [sp, #312]
   5656c:	ldr	x2, [x23]
   56570:	str	x2, [sp, #320]
   56574:	cmp	w4, #0x0
   56578:	ccmp	w3, #0x0, #0x0, eq  // eq = none
   5657c:	csinc	w1, w1, wzr, eq  // eq = none
   56580:	cmp	w0, #0x84
   56584:	b.eq	565bc <aarch64_get_opcode@@Base+0x7fa8>  // b.none
   56588:	ldr	w0, [sp, #280]
   5658c:	cbz	w0, 565dc <aarch64_get_opcode@@Base+0x7fc8>
   56590:	cmp	w1, #0x0
   56594:	ldr	w0, [sp, #288]
   56598:	ldr	w1, [sp, #300]
   5659c:	csel	w21, w0, w1, ne  // ne = any
   565a0:	mov	w2, w21
   565a4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   565a8:	add	x1, x1, #0xf00
   565ac:	ldr	x0, [sp, #312]
   565b0:	ldr	x3, [sp, #320]
   565b4:	blr	x3
   565b8:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   565bc:	ldr	w0, [sp, #272]
   565c0:	tbz	w0, #4, 565e4 <aarch64_get_opcode@@Base+0x7fd0>
   565c4:	sub	w2, w0, #0x10
   565c8:	mov	w21, #0x20                  	// #32
   565cc:	sub	w0, w21, w0
   565d0:	cmp	w1, #0x0
   565d4:	csel	w21, w0, w2, eq  // eq = none
   565d8:	b	565a0 <aarch64_get_opcode@@Base+0x7f8c>
   565dc:	ldr	w0, [sp, #264]
   565e0:	b	565c0 <aarch64_get_opcode@@Base+0x7fac>
   565e4:	and	w21, w0, #0x8
   565e8:	tbz	w0, #3, 56604 <aarch64_get_opcode@@Base+0x7ff0>
   565ec:	sub	w2, w0, #0x8
   565f0:	mov	w21, #0x10                  	// #16
   565f4:	sub	w0, w21, w0
   565f8:	cmp	w1, #0x0
   565fc:	csel	w21, w0, w2, eq  // eq = none
   56600:	b	565a0 <aarch64_get_opcode@@Base+0x7f8c>
   56604:	mov	w1, #0x1                   	// #1
   56608:	mov	x0, x23
   5660c:	bl	4e7bc <aarch64_get_opcode@@Base+0x1a8>
   56610:	b	565a0 <aarch64_get_opcode@@Base+0x7f8c>
   56614:	cmp	w0, #0x85
   56618:	b.eq	56644 <aarch64_get_opcode@@Base+0x8030>  // b.none
   5661c:	cmp	w0, #0x83
   56620:	b.eq	566b8 <aarch64_get_opcode@@Base+0x80a4>  // b.none
   56624:	ldr	x2, [sp, #520]
   56628:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5662c:	add	x1, x1, #0x800
   56630:	mov	x0, x25
   56634:	blr	x27
   56638:	ldr	x0, [sp, #520]
   5663c:	str	x0, [sp, #104]
   56640:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56644:	ldr	x0, [sp, #520]
   56648:	cmp	x0, #0x1
   5664c:	b.eq	56694 <aarch64_get_opcode@@Base+0x8080>  // b.none
   56650:	cmp	x0, #0x10
   56654:	b.eq	566a8 <aarch64_get_opcode@@Base+0x8094>  // b.none
   56658:	cbz	x0, 56680 <aarch64_get_opcode@@Base+0x806c>
   5665c:	adrp	x3, 74000 <fields@@Base+0x13c40>
   56660:	add	x3, x3, #0xba8
   56664:	add	x3, x3, #0x28
   56668:	mov	w2, #0x2570                	// #9584
   5666c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56670:	add	x1, x1, #0xa28
   56674:	adrp	x0, 5a000 <xexit@@Base+0x174c>
   56678:	add	x0, x0, #0xb60
   5667c:	bl	35ac0 <__assert_fail@plt>
   56680:	adrp	x1, 58000 <print_arm_disassembler_options@@Base+0x228>
   56684:	add	x1, x1, #0xa60
   56688:	mov	x0, x25
   5668c:	blr	x27
   56690:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56694:	adrp	x1, 59000 <xexit@@Base+0x74c>
   56698:	add	x1, x1, #0xfb8
   5669c:	mov	x0, x25
   566a0:	blr	x27
   566a4:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   566a8:	mov	w1, #0x1                   	// #1
   566ac:	mov	x0, x23
   566b0:	bl	4e7bc <aarch64_get_opcode@@Base+0x1a8>
   566b4:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   566b8:	ldr	x0, [sp, #520]
   566bc:	cbnz	x0, 56624 <aarch64_get_opcode@@Base+0x8010>
   566c0:	mov	x0, #0x20                  	// #32
   566c4:	str	x0, [sp, #520]
   566c8:	b	56624 <aarch64_get_opcode@@Base+0x8010>
   566cc:	ldr	x2, [sp, #520]
   566d0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   566d4:	add	x1, x1, #0xf08
   566d8:	mov	x0, x25
   566dc:	blr	x27
   566e0:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   566e4:	ldr	x2, [sp, #520]
   566e8:	tbz	w2, #3, 56700 <aarch64_get_opcode@@Base+0x80ec>
   566ec:	adrp	x1, 65000 <fields@@Base+0x4c40>
   566f0:	add	x1, x1, #0x9c8
   566f4:	mov	x0, x25
   566f8:	blr	x27
   566fc:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56700:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56704:	add	x1, x1, #0x9e0
   56708:	mov	x0, x25
   5670c:	blr	x27
   56710:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56714:	ldr	x2, [sp, #520]
   56718:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5671c:	add	x1, x1, #0xd50
   56720:	mov	x0, x25
   56724:	blr	x27
   56728:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   5672c:	bl	35670 <abort@plt>
   56730:	bl	35670 <abort@plt>
   56734:	mov	w0, #0x1                   	// #1
   56738:	str	w0, [sp, #96]
   5673c:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   56740:	mov	w0, #0x1                   	// #1
   56744:	str	w0, [sp, #96]
   56748:	b	5675c <aarch64_get_opcode@@Base+0x8148>
   5674c:	mov	x1, x24
   56750:	mov	x0, x25
   56754:	blr	x27
   56758:	mov	x20, x21
   5675c:	add	x21, x20, #0x1
   56760:	ldrb	w2, [x20, #1]
   56764:	cbz	w2, 5679c <aarch64_get_opcode@@Base+0x8188>
   56768:	cmp	w2, #0x25
   5676c:	b.ne	5674c <aarch64_get_opcode@@Base+0x8138>  // b.any
   56770:	add	x20, x21, #0x1
   56774:	ldrb	w0, [x21, #1]
   56778:	sub	w0, w0, #0x25
   5677c:	cmp	w0, #0x52
   56780:	b.hi	56730 <aarch64_get_opcode@@Base+0x811c>  // b.pmore
   56784:	adrp	x1, 74000 <fields@@Base+0x13c40>
   56788:	add	x1, x1, #0xa54
   5678c:	ldrh	w0, [x1, w0, uxtw #1]
   56790:	adr	x1, 5679c <aarch64_get_opcode@@Base+0x8188>
   56794:	add	x0, x1, w0, sxth #2
   56798:	br	x0
   5679c:	ldr	x2, [sp, #104]
   567a0:	add	x0, x2, #0x10
   567a4:	cmp	x0, #0x30
   567a8:	b.ls	567bc <aarch64_get_opcode@@Base+0x81a8>  // b.plast
   567ac:	adrp	x1, 65000 <fields@@Base+0x4c40>
   567b0:	add	x1, x1, #0x810
   567b4:	mov	x0, x25
   567b8:	blr	x27
   567bc:	ldr	w0, [sp, #96]
   567c0:	cbnz	w0, 5688c <aarch64_get_opcode@@Base+0x8278>
   567c4:	ldr	w0, [sp, #136]
   567c8:	cbnz	w0, 5689c <aarch64_get_opcode@@Base+0x8288>
   567cc:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   567d0:	ldr	w0, [x0, #1040]
   567d4:	cbnz	w0, 568f4 <aarch64_get_opcode@@Base+0x82e0>
   567d8:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   567dc:	ldr	w0, [x0, #1032]
   567e0:	cbnz	w0, 57c1c <aarch64_get_opcode@@Base+0x9608>
   567e4:	and	x0, x22, #0x7fe000
   567e8:	and	x0, x0, #0xffffffffffc0ffff
   567ec:	cbz	x0, 57c24 <aarch64_get_opcode@@Base+0x9610>
   567f0:	mov	x0, #0xf50                 	// #3920
   567f4:	movk	x0, #0xefb1, lsl #16
   567f8:	and	x0, x22, x0
   567fc:	mov	x1, #0xf00                 	// #3840
   56800:	movk	x1, #0xee31, lsl #16
   56804:	cmp	x0, x1
   56808:	b.eq	568ac <aarch64_get_opcode@@Base+0x8298>  // b.none
   5680c:	mov	x1, #0xf40                 	// #3904
   56810:	movk	x1, #0xee31, lsl #16
   56814:	cmp	x0, x1
   56818:	b.eq	5687c <aarch64_get_opcode@@Base+0x8268>  // b.none
   5681c:	mov	x0, #0x1f51                	// #8017
   56820:	movk	x0, #0xff81, lsl #16
   56824:	and	x0, x22, x0
   56828:	mov	x1, #0xf00                 	// #3840
   5682c:	movk	x1, #0xfe01, lsl #16
   56830:	cmp	x0, x1
   56834:	b.eq	5687c <aarch64_get_opcode@@Base+0x8268>  // b.none
   56838:	add	x1, x1, #0x1
   5683c:	cmp	x0, x1
   56840:	b.eq	568c0 <aarch64_get_opcode@@Base+0x82ac>  // b.none
   56844:	mov	x0, #0x1f10                	// #7952
   56848:	movk	x0, #0xff81, lsl #16
   5684c:	and	x0, x22, x0
   56850:	mov	x1, #0x1f00                	// #7936
   56854:	movk	x1, #0xfe01, lsl #16
   56858:	cmp	x0, x1
   5685c:	b.eq	5687c <aarch64_get_opcode@@Base+0x8268>  // b.none
   56860:	mov	x0, #0x1f50                	// #8016
   56864:	movk	x0, #0xff81, lsl #16
   56868:	and	x0, x22, x0
   5686c:	mov	x1, #0xf40                 	// #3904
   56870:	movk	x1, #0xfe01, lsl #16
   56874:	cmp	x0, x1
   56878:	b.ne	568d0 <aarch64_get_opcode@@Base+0x82bc>  // b.any
   5687c:	mov	x0, x22
   56880:	bl	50ecc <aarch64_get_opcode@@Base+0x28b8>
   56884:	ldp	x25, x26, [sp, #64]
   56888:	b	57c00 <aarch64_get_opcode@@Base+0x95ec>
   5688c:	ldr	w1, [sp, #508]
   56890:	mov	x0, x23
   56894:	bl	4e968 <aarch64_get_opcode@@Base+0x354>
   56898:	b	567c4 <aarch64_get_opcode@@Base+0x81b0>
   5689c:	ldr	w1, [sp, #512]
   568a0:	mov	x0, x23
   568a4:	bl	4e7bc <aarch64_get_opcode@@Base+0x1a8>
   568a8:	b	567cc <aarch64_get_opcode@@Base+0x81b8>
   568ac:	mov	x0, #0x1001                	// #4097
   568b0:	and	x0, x22, x0
   568b4:	cmp	x0, #0x1
   568b8:	b.ne	5687c <aarch64_get_opcode@@Base+0x8268>  // b.any
   568bc:	b	5681c <aarch64_get_opcode@@Base+0x8208>
   568c0:	and	x0, x22, #0x300000
   568c4:	cmp	x0, #0x300, lsl #12
   568c8:	b.ne	5687c <aarch64_get_opcode@@Base+0x8268>  // b.any
   568cc:	b	56844 <aarch64_get_opcode@@Base+0x8230>
   568d0:	mov	x0, #0x1fff                	// #8191
   568d4:	movk	x0, #0xffbf, lsl #16
   568d8:	and	x0, x22, x0
   568dc:	mov	x1, #0xf4d                 	// #3917
   568e0:	movk	x1, #0xfe31, lsl #16
   568e4:	cmp	x0, x1
   568e8:	b.eq	5687c <aarch64_get_opcode@@Base+0x8268>  // b.none
   568ec:	ldp	x25, x26, [sp, #64]
   568f0:	b	57c00 <aarch64_get_opcode@@Base+0x95ec>
   568f4:	cmp	w0, #0x1
   568f8:	b.eq	56904 <aarch64_get_opcode@@Base+0x82f0>  // b.none
   568fc:	ldp	x25, x26, [sp, #64]
   56900:	b	57c00 <aarch64_get_opcode@@Base+0x95ec>
   56904:	adrp	x1, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   56908:	add	x1, x1, #0x408
   5690c:	ldr	x0, [x1, #24]
   56910:	add	x0, x0, #0x1
   56914:	str	x0, [x1, #24]
   56918:	add	x1, x1, #0x8
   5691c:	ldr	x1, [x1, #24]
   56920:	cmp	x0, x1
   56924:	b.eq	56974 <aarch64_get_opcode@@Base+0x8360>  // b.none
   56928:	cmp	x0, #0x3
   5692c:	b.eq	569b4 <aarch64_get_opcode@@Base+0x83a0>  // b.none
   56930:	b.gt	56998 <aarch64_get_opcode@@Base+0x8384>
   56934:	cmp	x0, #0x1
   56938:	b.eq	569bc <aarch64_get_opcode@@Base+0x83a8>  // b.none
   5693c:	mov	x1, #0x4                   	// #4
   56940:	cmp	x0, #0x2
   56944:	b.ne	569c4 <aarch64_get_opcode@@Base+0x83b0>  // b.any
   56948:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5694c:	ldr	x0, [x0, #1048]
   56950:	tst	x1, x0
   56954:	b.eq	569c4 <aarch64_get_opcode@@Base+0x83b0>  // b.none
   56958:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5695c:	ldr	w0, [x0, #1044]
   56960:	cmp	w0, #0x1
   56964:	b.eq	569d0 <aarch64_get_opcode@@Base+0x83bc>  // b.none
   56968:	cmp	w0, #0x2
   5696c:	cset	w1, eq  // eq = none
   56970:	b	569a4 <aarch64_get_opcode@@Base+0x8390>
   56974:	adrp	x1, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   56978:	add	x1, x1, #0x408
   5697c:	str	wzr, [x1, #8]
   56980:	str	wzr, [x1, #12]
   56984:	str	xzr, [x1, #16]
   56988:	str	xzr, [x1, #24]
   5698c:	str	xzr, [x1, #32]
   56990:	ldp	x25, x26, [sp, #64]
   56994:	b	57c00 <aarch64_get_opcode@@Base+0x95ec>
   56998:	mov	w1, #0x0                   	// #0
   5699c:	cmp	x0, #0x4
   569a0:	b.ne	569c4 <aarch64_get_opcode@@Base+0x83b0>  // b.any
   569a4:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   569a8:	str	w1, [x0, #1044]
   569ac:	ldp	x25, x26, [sp, #64]
   569b0:	b	57c00 <aarch64_get_opcode@@Base+0x95ec>
   569b4:	mov	x1, #0x2                   	// #2
   569b8:	b	56948 <aarch64_get_opcode@@Base+0x8334>
   569bc:	mov	x1, #0x8                   	// #8
   569c0:	b	56948 <aarch64_get_opcode@@Base+0x8334>
   569c4:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   569c8:	ldr	w1, [x0, #1044]
   569cc:	b	569a4 <aarch64_get_opcode@@Base+0x8390>
   569d0:	mov	w1, #0x2                   	// #2
   569d4:	b	569a4 <aarch64_get_opcode@@Base+0x8390>
   569d8:	add	x19, x19, #0x38
   569dc:	ldr	x0, [x19, #48]
   569e0:	cbz	x0, 56a4c <aarch64_get_opcode@@Base+0x8438>
   569e4:	ldr	x0, [x19, #40]
   569e8:	and	x0, x26, x0
   569ec:	ldr	x1, [x19, #32]
   569f0:	cmp	x0, x1
   569f4:	b.ne	569d8 <aarch64_get_opcode@@Base+0x83c4>  // b.any
   569f8:	ldr	w21, [x19, #24]
   569fc:	mov	w1, w21
   56a00:	mov	x0, x26
   56a04:	bl	51c9c <aarch64_get_opcode@@Base+0x3688>
   56a08:	cbnz	w0, 569d8 <aarch64_get_opcode@@Base+0x83c4>
   56a0c:	mov	w0, #0xc                   	// #12
   56a10:	str	w0, [sp, #508]
   56a14:	mov	w0, #0x11                  	// #17
   56a18:	str	w0, [sp, #512]
   56a1c:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   56a20:	ldr	w0, [x0, #1032]
   56a24:	cbz	w0, 55684 <aarch64_get_opcode@@Base+0x7070>
   56a28:	cmp	w21, #0x41
   56a2c:	b.hi	55678 <aarch64_get_opcode@@Base+0x7064>  // b.pmore
   56a30:	cmp	w21, #0x3e
   56a34:	b.hi	55684 <aarch64_get_opcode@@Base+0x7070>  // b.pmore
   56a38:	cmp	w21, #0x3c
   56a3c:	b.eq	55684 <aarch64_get_opcode@@Base+0x7070>  // b.none
   56a40:	str	wzr, [sp, #508]
   56a44:	mov	w21, #0x1                   	// #1
   56a48:	b	5569c <aarch64_get_opcode@@Base+0x7088>
   56a4c:	ldp	x25, x26, [sp, #64]
   56a50:	b	55604 <aarch64_get_opcode@@Base+0x6ff0>
   56a54:	ldrb	w2, [x21]
   56a58:	cbz	w2, 57c00 <aarch64_get_opcode@@Base+0x95ec>
   56a5c:	stp	x25, x26, [sp, #64]
   56a60:	ubfx	w0, w22, #24, #1
   56a64:	str	w0, [sp, #456]
   56a68:	ubfx	w0, w22, #21, #2
   56a6c:	str	w0, [sp, #300]
   56a70:	tst	w22, #0x1000000
   56a74:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56a78:	add	x1, x1, #0xf10
   56a7c:	adrp	x0, 5d000 <xexit@@Base+0x474c>
   56a80:	add	x0, x0, #0x3c0
   56a84:	csel	x0, x1, x0, ne  // ne = any
   56a88:	str	x0, [sp, #448]
   56a8c:	tst	w22, #0x1000000
   56a90:	adrp	x1, 5c000 <xexit@@Base+0x374c>
   56a94:	add	x1, x1, #0x980
   56a98:	adrp	x0, 5c000 <xexit@@Base+0x374c>
   56a9c:	add	x0, x0, #0x518
   56aa0:	csel	x0, x1, x0, ne  // ne = any
   56aa4:	str	x0, [sp, #440]
   56aa8:	ubfx	w1, w22, #6, #2
   56aac:	asr	x0, x22, #10
   56ab0:	and	w0, w0, #0x1c
   56ab4:	orr	w14, w1, w0
   56ab8:	str	w14, [sp, #140]
   56abc:	ubfx	w7, w22, #26, #1
   56ac0:	asr	x5, x22, #13
   56ac4:	asr	x4, x22, #11
   56ac8:	asr	x0, x22, #4
   56acc:	ubfiz	x6, x22, #1, #11
   56ad0:	ubfiz	w1, w4, #19, #1
   56ad4:	ubfiz	w3, w5, #18, #1
   56ad8:	orr	w1, w1, w3
   56adc:	mov	w1, w1
   56ae0:	tst	w22, #0x4000000
   56ae4:	mov	x3, #0x100000              	// #1048576
   56ae8:	csel	x3, x3, xzr, eq  // eq = none
   56aec:	orr	x1, x1, x3
   56af0:	and	x3, x0, #0x3f000
   56af4:	orr	x3, x3, x6
   56af8:	orr	x1, x1, x3
   56afc:	sub	x3, x20, #0xff, lsl #12
   56b00:	sub	x3, x3, #0xffc
   56b04:	add	x1, x1, x3
   56b08:	str	x1, [sp, #304]
   56b0c:	asr	x3, x22, #16
   56b10:	ubfx	w16, w22, #16, #4
   56b14:	str	w16, [sp, #296]
   56b18:	ubfx	w17, w22, #8, #4
   56b1c:	str	w17, [sp, #376]
   56b20:	str	w22, [sp, #128]
   56b24:	and	w27, w22, #0xff
   56b28:	ubfx	w1, w22, #4, #2
   56b2c:	str	w1, [sp, #460]
   56b30:	asr	x1, x22, #1
   56b34:	ubfiz	w1, w1, #2, #10
   56b38:	ubfiz	w8, w4, #1, #1
   56b3c:	ubfiz	w10, w3, #12, #1
   56b40:	orr	w10, w10, w1
   56b44:	orr	w9, w10, w8
   56b48:	add	x26, x20, #0x4
   56b4c:	sub	x11, x9, #0x2, lsl #12
   56b50:	tst	x10, #0x1000
   56b54:	csel	x9, x9, x11, eq  // eq = none
   56b58:	add	x9, x9, x26
   56b5c:	str	x9, [sp, #248]
   56b60:	asr	x9, x22, #23
   56b64:	ubfiz	w11, w9, #1, #4
   56b68:	str	w11, [sp, #312]
   56b6c:	tst	w22, #0x20000
   56b70:	mov	w9, #0x4                   	// #4
   56b74:	mov	w10, #0x2                   	// #2
   56b78:	csel	w9, w9, w10, ne  // ne = any
   56b7c:	add	w9, w9, w11
   56b80:	str	w9, [sp, #256]
   56b84:	ubfiz	w10, w3, #12, #7
   56b88:	orr	w10, w10, w1
   56b8c:	orr	w9, w10, w8
   56b90:	sub	x11, x9, #0x80, lsl #12
   56b94:	tst	x10, #0x40000
   56b98:	csel	x9, x9, x11, eq  // eq = none
   56b9c:	add	x9, x9, x26
   56ba0:	str	x9, [sp, #240]
   56ba4:	ubfiz	w10, w3, #12, #5
   56ba8:	orr	w10, w10, w1
   56bac:	orr	w9, w10, w8
   56bb0:	sub	x11, x9, #0x20, lsl #12
   56bb4:	tst	x10, #0x10000
   56bb8:	csel	x9, x9, x11, eq  // eq = none
   56bbc:	add	x9, x9, x26
   56bc0:	str	x9, [sp, #232]
   56bc4:	str	w22, [sp, #408]
   56bc8:	and	w9, w0, #0xf000
   56bcc:	and	w10, w22, #0xfff
   56bd0:	orr	w10, w10, w9
   56bd4:	str	w10, [sp, #168]
   56bd8:	mov	w10, w10
   56bdc:	str	x10, [sp, #176]
   56be0:	and	w10, w0, #0x3
   56be4:	str	w10, [sp, #184]
   56be8:	ubfiz	w10, w0, #3, #2
   56bec:	str	w10, [sp, #388]
   56bf0:	orr	w1, w1, w8
   56bf4:	mov	w1, w1
   56bf8:	add	x8, x1, x26
   56bfc:	str	x8, [sp, #264]
   56c00:	sub	x1, x26, x1
   56c04:	str	x1, [sp, #272]
   56c08:	str	w27, [sp, #396]
   56c0c:	asr	x1, x22, #15
   56c10:	and	w1, w1, #0x800
   56c14:	and	w8, w0, #0x700
   56c18:	orr	w1, w1, w8
   56c1c:	orr	w15, w27, w1
   56c20:	str	w15, [sp, #320]
   56c24:	lsr	w8, w1, #8
   56c28:	str	w8, [sp, #152]
   56c2c:	lsl	w11, w27, #24
   56c30:	lsl	w8, w27, #16
   56c34:	lsl	w10, w27, #8
   56c38:	orr	w13, w11, w8
   56c3c:	orr	w12, w10, w27
   56c40:	orr	w12, w13, w12
   56c44:	str	w12, [sp, #328]
   56c48:	orr	w10, w11, w10
   56c4c:	str	w10, [sp, #464]
   56c50:	orr	w8, w8, w27
   56c54:	str	w8, [sp, #332]
   56c58:	orr	w10, w27, #0x80
   56c5c:	lsr	w8, w15, #7
   56c60:	ror	w8, w10, w8
   56c64:	str	w8, [sp, #192]
   56c68:	and	x8, x3, #0xf
   56c6c:	str	x8, [sp, #280]
   56c70:	and	x8, x22, #0xff
   56c74:	str	x8, [sp, #160]
   56c78:	ubfiz	x8, x22, #2, #8
   56c7c:	and	x10, x20, #0xfffffffffffffffc
   56c80:	add	x10, x10, #0x4
   56c84:	ands	x12, x22, #0x800000
   56c88:	str	x12, [sp, #200]
   56c8c:	cneg	x8, x8, eq  // eq = none
   56c90:	add	x8, x10, x8
   56c94:	str	x8, [sp, #400]
   56c98:	ubfiz	w8, w22, #12, #4
   56c9c:	and	w3, w3, #0xf
   56ca0:	orr	w3, w8, w3
   56ca4:	and	w8, w22, #0xff0
   56ca8:	orr	w3, w3, w8
   56cac:	str	w3, [sp, #344]
   56cb0:	mov	w3, w3
   56cb4:	str	x3, [sp, #336]
   56cb8:	orr	w9, w27, w9
   56cbc:	orr	w1, w9, w1
   56cc0:	str	w1, [sp, #348]
   56cc4:	mov	w1, w1
   56cc8:	str	x1, [sp, #352]
   56ccc:	mov	w1, w15
   56cd0:	str	x1, [sp, #360]
   56cd4:	and	w1, w22, #0x1f
   56cd8:	add	w1, w1, #0x1
   56cdc:	str	w1, [sp, #368]
   56ce0:	sub	w1, w1, w14
   56ce4:	str	w1, [sp, #224]
   56ce8:	asr	x1, x22, #14
   56cec:	and	w1, w1, #0x40
   56cf0:	and	w3, w22, #0x30
   56cf4:	orr	w1, w1, w3
   56cf8:	orr	w3, w16, w1
   56cfc:	str	w3, [sp, #380]
   56d00:	mov	w3, w3
   56d04:	str	x3, [sp, #432]
   56d08:	orr	w1, w17, w1
   56d0c:	str	w1, [sp, #468]
   56d10:	mov	w1, w1
   56d14:	str	x1, [sp, #424]
   56d18:	tst	x22, #0x100000
   56d1c:	mov	w3, #0x53                  	// #83
   56d20:	mov	w1, #0x43                  	// #67
   56d24:	csel	w1, w3, w1, ne  // ne = any
   56d28:	str	w1, [sp, #392]
   56d2c:	and	w5, w5, #0x1
   56d30:	cmp	w7, w5
   56d34:	mov	x1, #0x800000              	// #8388608
   56d38:	csel	x1, x1, xzr, eq  // eq = none
   56d3c:	cmp	w7, #0x0
   56d40:	mov	x3, #0x1000000             	// #16777216
   56d44:	csel	x3, x3, xzr, eq  // eq = none
   56d48:	orr	x1, x1, x3
   56d4c:	and	x0, x0, #0x3ff000
   56d50:	orr	x0, x0, x6
   56d54:	orr	x0, x1, x0
   56d58:	and	w4, w4, #0x1
   56d5c:	cmp	w7, w4
   56d60:	mov	x1, #0x400000              	// #4194304
   56d64:	csel	x1, x1, xzr, eq  // eq = none
   56d68:	orr	x0, x0, x1
   56d6c:	sub	x20, x20, #0xfff, lsl #12
   56d70:	sub	x20, x20, #0xffc
   56d74:	add	x0, x20, x0
   56d78:	and	x1, x0, #0xffffffff
   56d7c:	and	x1, x1, #0xfffffffffffffffd
   56d80:	tst	x22, #0x1000
   56d84:	csel	x0, x0, x1, ne  // ne = any
   56d88:	str	x0, [sp, #288]
   56d8c:	lsl	w0, w27, #2
   56d90:	str	w0, [sp, #384]
   56d94:	cmp	x12, #0x0
   56d98:	mov	w0, #0xffffffff            	// #-1
   56d9c:	csinc	w0, w0, wzr, eq  // eq = none
   56da0:	mul	w0, w0, w27
   56da4:	lsl	w0, w0, #2
   56da8:	str	x0, [sp, #416]
   56dac:	cmp	w14, #0x0
   56db0:	mov	w0, #0x20                  	// #32
   56db4:	csel	w0, w14, w0, ne  // ne = any
   56db8:	str	w0, [sp, #412]
   56dbc:	ldr	w0, [sp, #96]
   56dc0:	str	w0, [sp, #136]
   56dc4:	str	w0, [sp, #144]
   56dc8:	str	xzr, [sp, #112]
   56dcc:	adrp	x0, 74000 <fields@@Base+0x13c40>
   56dd0:	add	x0, x0, #0xafc
   56dd4:	str	x0, [sp, #104]
   56dd8:	adrp	x0, 8f000 <aarch64_operands@@Base+0x2bc0>
   56ddc:	add	x0, x0, #0xc70
   56de0:	str	x0, [sp, #216]
   56de4:	add	x0, x0, #0x830
   56de8:	str	x0, [sp, #472]
   56dec:	str	w27, [sp, #208]
   56df0:	str	w27, [sp, #372]
   56df4:	str	x26, [sp, #480]
   56df8:	b	56e1c <aarch64_get_opcode@@Base+0x8808>
   56dfc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56e00:	add	x1, x1, #0x790
   56e04:	mov	x0, x24
   56e08:	blr	x28
   56e0c:	mov	x19, x21
   56e10:	add	x21, x19, #0x1
   56e14:	ldrb	w2, [x19, #1]
   56e18:	cbz	w2, 57b3c <aarch64_get_opcode@@Base+0x9528>
   56e1c:	cmp	w2, #0x25
   56e20:	b.ne	56dfc <aarch64_get_opcode@@Base+0x87e8>  // b.any
   56e24:	add	x19, x21, #0x1
   56e28:	ldrb	w0, [x21, #1]
   56e2c:	sub	w0, w0, #0x25
   56e30:	cmp	w0, #0x53
   56e34:	b.hi	57b38 <aarch64_get_opcode@@Base+0x9524>  // b.pmore
   56e38:	ldr	x1, [sp, #104]
   56e3c:	ldrh	w0, [x1, w0, uxtw #1]
   56e40:	adr	x1, 56e4c <aarch64_get_opcode@@Base+0x8838>
   56e44:	add	x0, x1, w0, sxth #2
   56e48:	br	x0
   56e4c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56e50:	add	x1, x1, #0x798
   56e54:	mov	x0, x24
   56e58:	blr	x28
   56e5c:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   56e60:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   56e64:	ldr	w0, [x0, #1032]
   56e68:	cbz	w0, 56e10 <aarch64_get_opcode@@Base+0x87fc>
   56e6c:	ldr	x1, [sp, #216]
   56e70:	add	x1, x1, #0x188
   56e74:	ubfx	x0, x0, #4, #4
   56e78:	ldr	x2, [x1, x0, lsl #3]
   56e7c:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   56e80:	add	x1, x1, #0x588
   56e84:	mov	x0, x24
   56e88:	blr	x28
   56e8c:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   56e90:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   56e94:	ldr	w0, [x0, #1036]
   56e98:	cbz	w0, 56e10 <aarch64_get_opcode@@Base+0x87fc>
   56e9c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56ea0:	add	x1, x1, #0x7a8
   56ea4:	mov	x0, x24
   56ea8:	blr	x28
   56eac:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   56eb0:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   56eb4:	ldr	w0, [x0, #1032]
   56eb8:	cbz	w0, 56e10 <aarch64_get_opcode@@Base+0x87fc>
   56ebc:	ldr	x1, [sp, #216]
   56ec0:	add	x1, x1, #0x188
   56ec4:	ubfx	x0, x0, #4, #4
   56ec8:	ldr	x2, [x1, x0, lsl #3]
   56ecc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56ed0:	add	x1, x1, #0x7d0
   56ed4:	mov	x0, x24
   56ed8:	blr	x28
   56edc:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   56ee0:	ldr	w2, [sp, #320]
   56ee4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56ee8:	add	x1, x1, #0xe30
   56eec:	mov	x0, x24
   56ef0:	blr	x28
   56ef4:	ldr	x0, [sp, #360]
   56ef8:	str	x0, [sp, #112]
   56efc:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   56f00:	ldr	w0, [sp, #152]
   56f04:	cmp	w0, #0x2
   56f08:	b.eq	56f60 <aarch64_get_opcode@@Base+0x894c>  // b.none
   56f0c:	b.hi	56f48 <aarch64_get_opcode@@Base+0x8934>  // b.pmore
   56f10:	ldr	w20, [sp, #372]
   56f14:	cbz	w0, 56f28 <aarch64_get_opcode@@Base+0x8914>
   56f18:	cmp	w0, #0x1
   56f1c:	ldr	w0, [sp, #192]
   56f20:	ldr	w1, [sp, #332]
   56f24:	csel	w20, w0, w1, ne  // ne = any
   56f28:	mov	w2, w20
   56f2c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56f30:	add	x1, x1, #0xe30
   56f34:	mov	x0, x24
   56f38:	blr	x28
   56f3c:	mov	w0, w20
   56f40:	str	x0, [sp, #112]
   56f44:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   56f48:	ldr	w0, [sp, #152]
   56f4c:	cmp	w0, #0x3
   56f50:	ldr	w0, [sp, #192]
   56f54:	ldr	w1, [sp, #328]
   56f58:	csel	w20, w0, w1, ne  // ne = any
   56f5c:	b	56f28 <aarch64_get_opcode@@Base+0x8914>
   56f60:	ldr	w20, [sp, #464]
   56f64:	b	56f28 <aarch64_get_opcode@@Base+0x8914>
   56f68:	ldr	w2, [sp, #348]
   56f6c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56f70:	add	x1, x1, #0xe30
   56f74:	mov	x0, x24
   56f78:	blr	x28
   56f7c:	ldr	x0, [sp, #352]
   56f80:	str	x0, [sp, #112]
   56f84:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   56f88:	ldr	w2, [sp, #344]
   56f8c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56f90:	add	x1, x1, #0xe30
   56f94:	mov	x0, x24
   56f98:	blr	x28
   56f9c:	ldr	x0, [sp, #336]
   56fa0:	str	x0, [sp, #112]
   56fa4:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   56fa8:	ldr	w2, [sp, #168]
   56fac:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56fb0:	add	x1, x1, #0xe30
   56fb4:	mov	x0, x24
   56fb8:	blr	x28
   56fbc:	ldr	x0, [sp, #176]
   56fc0:	str	x0, [sp, #112]
   56fc4:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   56fc8:	ldr	w2, [sp, #168]
   56fcc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   56fd0:	add	x1, x1, #0xe30
   56fd4:	mov	x0, x24
   56fd8:	blr	x28
   56fdc:	ldr	x0, [sp, #176]
   56fe0:	str	x0, [sp, #112]
   56fe4:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   56fe8:	ldr	x0, [sp, #128]
   56fec:	and	x1, x0, #0xf
   56ff0:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   56ff4:	ldr	w0, [x0, #1616]
   56ff8:	add	x0, x0, x0, lsl #3
   56ffc:	add	x0, x1, x0, lsl #1
   57000:	add	x0, x0, #0x2
   57004:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   57008:	add	x1, x1, #0xb70
   5700c:	ldr	x2, [x1, x0, lsl #3]
   57010:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   57014:	add	x1, x1, #0x588
   57018:	mov	x0, x24
   5701c:	blr	x28
   57020:	ldr	w0, [sp, #184]
   57024:	cmp	w0, #0x2
   57028:	b.eq	57074 <aarch64_get_opcode@@Base+0x8a60>  // b.none
   5702c:	b.hi	5708c <aarch64_get_opcode@@Base+0x8a78>  // b.pmore
   57030:	cbz	w0, 57054 <aarch64_get_opcode@@Base+0x8a40>
   57034:	cmp	w0, #0x1
   57038:	b.ne	56e10 <aarch64_get_opcode@@Base+0x87fc>  // b.any
   5703c:	ldr	w2, [sp, #412]
   57040:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57044:	add	x1, x1, #0xf28
   57048:	mov	x0, x24
   5704c:	blr	x28
   57050:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57054:	ldr	w0, [sp, #140]
   57058:	cbz	w0, 56e10 <aarch64_get_opcode@@Base+0x87fc>
   5705c:	mov	w2, w0
   57060:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57064:	add	x1, x1, #0xf18
   57068:	mov	x0, x24
   5706c:	blr	x28
   57070:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57074:	ldr	w2, [sp, #412]
   57078:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5707c:	add	x1, x1, #0xf38
   57080:	mov	x0, x24
   57084:	blr	x28
   57088:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   5708c:	ldr	w0, [sp, #140]
   57090:	cbnz	w0, 570a8 <aarch64_get_opcode@@Base+0x8a94>
   57094:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57098:	add	x1, x1, #0xf0
   5709c:	mov	x0, x24
   570a0:	blr	x28
   570a4:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   570a8:	ldr	w2, [sp, #140]
   570ac:	adrp	x1, 65000 <fields@@Base+0x4c40>
   570b0:	add	x1, x1, #0xf48
   570b4:	mov	x0, x24
   570b8:	blr	x28
   570bc:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   570c0:	ldr	w0, [sp, #128]
   570c4:	and	w21, w0, #0xfff
   570c8:	ldr	w25, [sp, #296]
   570cc:	mov	w1, w25
   570d0:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   570d4:	ldr	w0, [x0, #1616]
   570d8:	add	x0, x0, x0, lsl #3
   570dc:	add	x0, x1, x0, lsl #1
   570e0:	add	x0, x0, #0x2
   570e4:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   570e8:	add	x1, x1, #0xb70
   570ec:	ldr	x2, [x1, x0, lsl #3]
   570f0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   570f4:	add	x1, x1, #0x4f8
   570f8:	mov	x0, x24
   570fc:	blr	x28
   57100:	ldr	x0, [sp, #200]
   57104:	cbz	x0, 5712c <aarch64_get_opcode@@Base+0x8b18>
   57108:	mov	w20, w21
   5710c:	cmp	w25, #0xf
   57110:	ldr	x0, [sp, #112]
   57114:	csel	x0, x20, x0, ne  // ne = any
   57118:	str	x0, [sp, #112]
   5711c:	cbnz	x20, 57250 <aarch64_get_opcode@@Base+0x8c3c>
   57120:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   57124:	add	x1, x1, #0x0
   57128:	b	57280 <aarch64_get_opcode@@Base+0x8c6c>
   5712c:	ldr	w0, [sp, #296]
   57130:	neg	w20, w21
   57134:	sxtw	x20, w20
   57138:	cmp	w0, #0xf
   5713c:	b.eq	5711c <aarch64_get_opcode@@Base+0x8b08>  // b.none
   57140:	ldr	w0, [sp, #376]
   57144:	cbnz	w0, 571b0 <aarch64_get_opcode@@Base+0x8b9c>
   57148:	ldr	x0, [sp, #128]
   5714c:	and	x1, x0, #0xf
   57150:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   57154:	ldr	w0, [x0, #1616]
   57158:	add	x0, x0, x0, lsl #3
   5715c:	add	x0, x1, x0, lsl #1
   57160:	add	x0, x0, #0x2
   57164:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   57168:	add	x1, x1, #0xb70
   5716c:	ldr	x2, [x1, x0, lsl #3]
   57170:	adrp	x1, 59000 <xexit@@Base+0x74c>
   57174:	add	x1, x1, #0xf60
   57178:	mov	x0, x24
   5717c:	blr	x28
   57180:	ldr	w0, [sp, #460]
   57184:	cbz	w0, 5719c <aarch64_get_opcode@@Base+0x8b88>
   57188:	mov	w2, w0
   5718c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57190:	add	x1, x1, #0xf18
   57194:	mov	x0, x24
   57198:	blr	x28
   5719c:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   571a0:	add	x1, x1, #0x0
   571a4:	mov	x0, x24
   571a8:	blr	x28
   571ac:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   571b0:	ldr	w0, [sp, #376]
   571b4:	cmp	w0, #0xd
   571b8:	b.eq	57228 <aarch64_get_opcode@@Base+0x8c14>  // b.none
   571bc:	cmp	w0, #0xd
   571c0:	b.hi	57204 <aarch64_get_opcode@@Base+0x8bf0>  // b.pmore
   571c4:	cmp	w0, #0xb
   571c8:	b.eq	57234 <aarch64_get_opcode@@Base+0x8c20>  // b.none
   571cc:	ldr	w1, [sp, #208]
   571d0:	neg	w20, w1
   571d4:	cmp	w0, #0xc
   571d8:	b.eq	5711c <aarch64_get_opcode@@Base+0x8b08>  // b.none
   571dc:	ldr	w0, [sp, #208]
   571e0:	neg	w2, w0
   571e4:	ldr	w0, [sp, #376]
   571e8:	cmp	w0, #0x9
   571ec:	b.ne	5723c <aarch64_get_opcode@@Base+0x8c28>  // b.any
   571f0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   571f4:	add	x1, x1, #0xfa8
   571f8:	mov	x0, x24
   571fc:	blr	x28
   57200:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57204:	ldr	w0, [sp, #208]
   57208:	mov	w20, w0
   5720c:	ldr	w1, [sp, #376]
   57210:	cmp	w1, #0xe
   57214:	b.eq	5711c <aarch64_get_opcode@@Base+0x8b08>  // b.none
   57218:	cbnz	x20, 572c0 <aarch64_get_opcode@@Base+0x8cac>
   5721c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   57220:	add	x1, x1, #0xec8
   57224:	b	57280 <aarch64_get_opcode@@Base+0x8c6c>
   57228:	ldr	w0, [sp, #208]
   5722c:	neg	w20, w0
   57230:	b	57218 <aarch64_get_opcode@@Base+0x8c04>
   57234:	ldr	w2, [sp, #208]
   57238:	b	571f0 <aarch64_get_opcode@@Base+0x8bdc>
   5723c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57240:	add	x1, x1, #0xf58
   57244:	mov	x0, x24
   57248:	blr	x28
   5724c:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57250:	ldr	w21, [sp, #96]
   57254:	mov	w2, w20
   57258:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5725c:	add	x1, x1, #0x108
   57260:	mov	x0, x24
   57264:	blr	x28
   57268:	adrp	x0, 6a000 <fields@@Base+0x9c40>
   5726c:	add	x0, x0, #0x0
   57270:	adrp	x1, 59000 <xexit@@Base+0x74c>
   57274:	add	x1, x1, #0xec8
   57278:	cmp	w21, #0x0
   5727c:	csel	x1, x1, x0, ne  // ne = any
   57280:	mov	x0, x24
   57284:	blr	x28
   57288:	ldr	w0, [sp, #296]
   5728c:	cmp	w0, #0xf
   57290:	b.ne	56e10 <aarch64_get_opcode@@Base+0x87fc>  // b.any
   57294:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57298:	add	x1, x1, #0x4f0
   5729c:	mov	x0, x24
   572a0:	blr	x28
   572a4:	ldr	x0, [sp, #480]
   572a8:	and	x0, x0, #0xfffffffffffffffc
   572ac:	ldr	x2, [x23, #120]
   572b0:	mov	x1, x23
   572b4:	add	x0, x0, x20
   572b8:	blr	x2
   572bc:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   572c0:	mov	w21, #0x1                   	// #1
   572c4:	b	57254 <aarch64_get_opcode@@Base+0x8c40>
   572c8:	ldr	w0, [sp, #128]
   572cc:	and	w20, w0, #0x200000
   572d0:	ldr	w1, [sp, #296]
   572d4:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   572d8:	ldr	w0, [x0, #1616]
   572dc:	add	x0, x0, x0, lsl #3
   572e0:	add	x0, x1, x0, lsl #1
   572e4:	add	x0, x0, #0x2
   572e8:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   572ec:	add	x1, x1, #0xb70
   572f0:	ldr	x2, [x1, x0, lsl #3]
   572f4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   572f8:	add	x1, x1, #0x4f8
   572fc:	mov	x0, x24
   57300:	blr	x28
   57304:	tbz	w22, #24, 5733c <aarch64_get_opcode@@Base+0x8d28>
   57308:	ldr	w0, [sp, #208]
   5730c:	cmp	w0, #0x0
   57310:	ldr	x0, [sp, #200]
   57314:	ccmp	x0, #0x0, #0x4, eq  // eq = none
   57318:	b.ne	57b9c <aarch64_get_opcode@@Base+0x9588>  // b.any
   5731c:	cbnz	x0, 57b7c <aarch64_get_opcode@@Base+0x9568>
   57320:	ldr	w3, [sp, #384]
   57324:	mov	w2, #0x2d                  	// #45
   57328:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5732c:	add	x1, x1, #0xf98
   57330:	mov	x0, x24
   57334:	blr	x28
   57338:	b	57b94 <aarch64_get_opcode@@Base+0x9580>
   5733c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57340:	add	x1, x1, #0xf68
   57344:	mov	x0, x24
   57348:	blr	x28
   5734c:	cbz	w20, 5737c <aarch64_get_opcode@@Base+0x8d68>
   57350:	ldr	x0, [sp, #200]
   57354:	cbnz	x0, 57bc4 <aarch64_get_opcode@@Base+0x95b0>
   57358:	ldr	w3, [sp, #384]
   5735c:	mov	w2, #0x2d                  	// #45
   57360:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57364:	add	x1, x1, #0xfa0
   57368:	mov	x0, x24
   5736c:	blr	x28
   57370:	ldr	x0, [sp, #416]
   57374:	str	x0, [sp, #112]
   57378:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   5737c:	ldr	w20, [sp, #208]
   57380:	mov	w2, w20
   57384:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57388:	add	x1, x1, #0xf70
   5738c:	mov	x0, x24
   57390:	blr	x28
   57394:	mov	w0, w20
   57398:	str	x0, [sp, #112]
   5739c:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   573a0:	ldr	w0, [sp, #300]
   573a4:	cmp	w0, #0x2
   573a8:	b.eq	573e0 <aarch64_get_opcode@@Base+0x8dcc>  // b.none
   573ac:	cmp	w0, #0x2
   573b0:	b.hi	573fc <aarch64_get_opcode@@Base+0x8de8>  // b.pmore
   573b4:	cbz	w0, 573d0 <aarch64_get_opcode@@Base+0x8dbc>
   573b8:	cmp	w0, #0x1
   573bc:	b.ne	56e10 <aarch64_get_opcode@@Base+0x87fc>  // b.any
   573c0:	ldr	x1, [sp, #448]
   573c4:	mov	x0, x24
   573c8:	blr	x28
   573cc:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   573d0:	ldr	x1, [sp, #440]
   573d4:	mov	x0, x24
   573d8:	blr	x28
   573dc:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   573e0:	ldr	w0, [sp, #456]
   573e4:	cbz	w0, 56e10 <aarch64_get_opcode@@Base+0x87fc>
   573e8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   573ec:	add	x1, x1, #0xc78
   573f0:	mov	x0, x24
   573f4:	blr	x28
   573f8:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   573fc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57400:	add	x1, x1, #0xc78
   57404:	mov	x0, x24
   57408:	blr	x28
   5740c:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57410:	mov	w0, #0x1                   	// #1
   57414:	str	w0, [sp, #144]
   57418:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5741c:	add	x1, x1, #0x7f0
   57420:	mov	x0, x24
   57424:	blr	x28
   57428:	ldr	w1, [sp, #96]
   5742c:	mov	w20, #0x0                   	// #0
   57430:	mov	w25, #0x1                   	// #1
   57434:	adrp	x27, 8e000 <aarch64_operands@@Base+0x1bc0>
   57438:	add	x27, x27, #0xb70
   5743c:	adrp	x26, fa000 <aarch64_opcode_table@@Base+0x55a20>
   57440:	add	x26, x26, #0x650
   57444:	str	x19, [sp, #488]
   57448:	ldr	w19, [sp, #144]
   5744c:	b	574c8 <aarch64_get_opcode@@Base+0x8eb4>
   57450:	cmp	w0, #0x0
   57454:	ccmp	w21, #0xf, #0x0, ne  // ne = any
   57458:	b.ne	5748c <aarch64_get_opcode@@Base+0x8e78>  // b.any
   5745c:	ldr	x19, [sp, #488]
   57460:	adrp	x2, 65000 <fields@@Base+0x4c40>
   57464:	add	x2, x2, #0x678
   57468:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   5746c:	add	x1, x1, #0x588
   57470:	mov	x0, x24
   57474:	blr	x28
   57478:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5747c:	add	x1, x1, #0x9a0
   57480:	mov	x0, x24
   57484:	blr	x28
   57488:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   5748c:	ldr	w0, [x26]
   57490:	add	x0, x0, x0, lsl #3
   57494:	lsl	x0, x0, #1
   57498:	add	x0, x0, w21, sxtw
   5749c:	add	x0, x0, #0x2
   574a0:	ldr	x2, [x27, x0, lsl #3]
   574a4:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   574a8:	add	x1, x1, #0x588
   574ac:	mov	x0, x24
   574b0:	blr	x28
   574b4:	mov	w1, w25
   574b8:	add	w0, w20, #0x1
   574bc:	cmp	w0, #0xf
   574c0:	b.gt	5752c <aarch64_get_opcode@@Base+0x8f18>
   574c4:	add	w20, w20, #0x1
   574c8:	mov	w21, w20
   574cc:	lsl	w0, w25, w20
   574d0:	sxtw	x0, w0
   574d4:	tst	x0, x22
   574d8:	b.eq	574b8 <aarch64_get_opcode@@Base+0x8ea4>  // b.none
   574dc:	cbz	w1, 574f0 <aarch64_get_opcode@@Base+0x8edc>
   574e0:	adrp	x1, 59000 <xexit@@Base+0x74c>
   574e4:	add	x1, x1, #0x758
   574e8:	mov	x0, x24
   574ec:	blr	x28
   574f0:	cmp	w19, #0x0
   574f4:	cset	w0, ne  // ne = any
   574f8:	cmp	w0, #0x0
   574fc:	ccmp	w21, #0xd, #0x0, ne  // ne = any
   57500:	b.ne	57450 <aarch64_get_opcode@@Base+0x8e3c>  // b.any
   57504:	ldr	w0, [x26]
   57508:	add	x0, x0, x0, lsl #3
   5750c:	add	x0, x27, x0, lsl #4
   57510:	ldr	x2, [x0, #120]
   57514:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57518:	add	x1, x1, #0xf78
   5751c:	mov	x0, x24
   57520:	blr	x28
   57524:	mov	w1, w25
   57528:	b	574c4 <aarch64_get_opcode@@Base+0x8eb0>
   5752c:	ldr	x19, [sp, #488]
   57530:	b	57478 <aarch64_get_opcode@@Base+0x8e64>
   57534:	ldr	w3, [sp, #224]
   57538:	ldr	w2, [sp, #140]
   5753c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57540:	add	x1, x1, #0xf88
   57544:	mov	x0, x24
   57548:	blr	x28
   5754c:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57550:	ldr	w3, [sp, #368]
   57554:	ldr	w2, [sp, #140]
   57558:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5755c:	add	x1, x1, #0xf88
   57560:	mov	x0, x24
   57564:	blr	x28
   57568:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   5756c:	ldr	w2, [sp, #312]
   57570:	adrp	x1, 68000 <fields@@Base+0x7c40>
   57574:	add	x1, x1, #0x1c8
   57578:	mov	x0, x24
   5757c:	blr	x28
   57580:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57584:	ldr	x2, [x23, #120]
   57588:	mov	x1, x23
   5758c:	ldr	x0, [sp, #232]
   57590:	blr	x2
   57594:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57598:	ldr	x2, [x23, #120]
   5759c:	mov	x1, x23
   575a0:	ldr	x0, [sp, #240]
   575a4:	blr	x2
   575a8:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   575ac:	ldr	x2, [x23, #120]
   575b0:	mov	x1, x23
   575b4:	ldr	x0, [sp, #248]
   575b8:	blr	x2
   575bc:	adrp	x1, 59000 <xexit@@Base+0x74c>
   575c0:	add	x1, x1, #0x758
   575c4:	mov	x0, x24
   575c8:	blr	x28
   575cc:	ldr	w2, [sp, #256]
   575d0:	adrp	x1, 68000 <fields@@Base+0x7c40>
   575d4:	add	x1, x1, #0x1c8
   575d8:	mov	x0, x24
   575dc:	blr	x28
   575e0:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   575e4:	ldr	x2, [x23, #120]
   575e8:	mov	x1, x23
   575ec:	ldr	x0, [sp, #264]
   575f0:	blr	x2
   575f4:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   575f8:	ldr	x2, [x23, #120]
   575fc:	mov	x1, x23
   57600:	ldr	x0, [sp, #272]
   57604:	blr	x2
   57608:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   5760c:	ldr	x2, [x23, #120]
   57610:	mov	x1, x23
   57614:	ldr	x20, [sp, #304]
   57618:	mov	x0, x20
   5761c:	blr	x2
   57620:	mov	w0, #0x1                   	// #1
   57624:	strb	w0, [x23, #196]
   57628:	mov	w0, #0x2                   	// #2
   5762c:	str	w0, [x23, #200]
   57630:	str	x20, [x23, #208]
   57634:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57638:	ldr	x2, [x23, #120]
   5763c:	mov	x1, x23
   57640:	ldr	x20, [sp, #288]
   57644:	mov	x0, x20
   57648:	blr	x2
   5764c:	mov	w0, #0x1                   	// #1
   57650:	strb	w0, [x23, #196]
   57654:	mov	w0, #0x2                   	// #2
   57658:	str	w0, [x23, #200]
   5765c:	str	x20, [x23, #208]
   57660:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57664:	tbz	w22, #21, 57680 <aarch64_get_opcode@@Base+0x906c>
   57668:	ldr	w2, [sp, #140]
   5766c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57670:	add	x1, x1, #0xf38
   57674:	mov	x0, x24
   57678:	blr	x28
   5767c:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57680:	ldr	w0, [sp, #140]
   57684:	cbz	w0, 56e10 <aarch64_get_opcode@@Base+0x87fc>
   57688:	mov	w2, w0
   5768c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57690:	add	x1, x1, #0xf18
   57694:	mov	x0, x24
   57698:	blr	x28
   5769c:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   576a0:	ldr	w0, [sp, #184]
   576a4:	cbz	w0, 56e10 <aarch64_get_opcode@@Base+0x87fc>
   576a8:	ldr	w2, [sp, #388]
   576ac:	adrp	x1, 65000 <fields@@Base+0x4c40>
   576b0:	add	x1, x1, #0xf48
   576b4:	mov	x0, x24
   576b8:	blr	x28
   576bc:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   576c0:	and	x0, x22, #0xf0
   576c4:	cmp	x0, #0x60
   576c8:	b.eq	576f4 <aarch64_get_opcode@@Base+0x90e0>  // b.none
   576cc:	ldr	w0, [sp, #128]
   576d0:	and	w0, w0, #0xf
   576d4:	bl	4ef7c <aarch64_get_opcode@@Base+0x968>
   576d8:	mov	x2, x0
   576dc:	cbz	x0, 57730 <aarch64_get_opcode@@Base+0x911c>
   576e0:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   576e4:	add	x1, x1, #0x588
   576e8:	mov	x0, x24
   576ec:	blr	x28
   576f0:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   576f4:	and	x0, x22, #0xf
   576f8:	cmp	x0, #0xf
   576fc:	b.eq	5771c <aarch64_get_opcode@@Base+0x9108>  // b.none
   57700:	ldr	w0, [sp, #408]
   57704:	and	w2, w0, #0xf
   57708:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5770c:	add	x1, x1, #0xd28
   57710:	mov	x0, x24
   57714:	blr	x28
   57718:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   5771c:	adrp	x1, 5f000 <xexit@@Base+0x674c>
   57720:	add	x1, x1, #0xb78
   57724:	mov	x0, x24
   57728:	blr	x28
   5772c:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57730:	ldr	w0, [sp, #408]
   57734:	and	w2, w0, #0xf
   57738:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5773c:	add	x1, x1, #0xd28
   57740:	mov	x0, x24
   57744:	blr	x28
   57748:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   5774c:	ldr	x0, [sp, #160]
   57750:	cbnz	x0, 577bc <aarch64_get_opcode@@Base+0x91a8>
   57754:	ldr	w2, [sp, #392]
   57758:	adrp	x1, 65000 <fields@@Base+0x4c40>
   5775c:	add	x1, x1, #0xd48
   57760:	mov	x0, x24
   57764:	blr	x28
   57768:	tbz	w22, #11, 5777c <aarch64_get_opcode@@Base+0x9168>
   5776c:	adrp	x1, 71000 <fields@@Base+0x10c40>
   57770:	add	x1, x1, #0x838
   57774:	mov	x0, x24
   57778:	blr	x28
   5777c:	tbz	w22, #10, 57790 <aarch64_get_opcode@@Base+0x917c>
   57780:	adrp	x1, 59000 <xexit@@Base+0x74c>
   57784:	add	x1, x1, #0x780
   57788:	mov	x0, x24
   5778c:	blr	x28
   57790:	tbz	w22, #9, 577a4 <aarch64_get_opcode@@Base+0x9190>
   57794:	adrp	x1, 68000 <fields@@Base+0x7c40>
   57798:	add	x1, x1, #0x1d8
   5779c:	mov	x0, x24
   577a0:	blr	x28
   577a4:	tbz	w22, #8, 56e10 <aarch64_get_opcode@@Base+0x87fc>
   577a8:	adrp	x1, 5f000 <xexit@@Base+0x674c>
   577ac:	add	x1, x1, #0xb00
   577b0:	mov	x0, x24
   577b4:	blr	x28
   577b8:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   577bc:	tbz	w22, #5, 577fc <aarch64_get_opcode@@Base+0x91e8>
   577c0:	ldr	w0, [sp, #468]
   577c4:	bl	4edac <aarch64_get_opcode@@Base+0x798>
   577c8:	mov	x2, x0
   577cc:	cbz	x0, 577e4 <aarch64_get_opcode@@Base+0x91d0>
   577d0:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   577d4:	add	x1, x1, #0x588
   577d8:	mov	x0, x24
   577dc:	blr	x28
   577e0:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   577e4:	ldr	x2, [sp, #424]
   577e8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   577ec:	add	x1, x1, #0xd38
   577f0:	mov	x0, x24
   577f4:	blr	x28
   577f8:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   577fc:	ldr	w0, [sp, #396]
   57800:	bl	4f088 <aarch64_get_opcode@@Base+0xa74>
   57804:	mov	x2, x0
   57808:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   5780c:	add	x1, x1, #0x588
   57810:	mov	x0, x24
   57814:	blr	x28
   57818:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   5781c:	ldr	x0, [sp, #160]
   57820:	cbz	x0, 57828 <aarch64_get_opcode@@Base+0x9214>
   57824:	tbz	w22, #5, 57864 <aarch64_get_opcode@@Base+0x9250>
   57828:	ldr	w0, [sp, #380]
   5782c:	bl	4edac <aarch64_get_opcode@@Base+0x798>
   57830:	mov	x2, x0
   57834:	cbz	x0, 5784c <aarch64_get_opcode@@Base+0x9238>
   57838:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   5783c:	add	x1, x1, #0x588
   57840:	mov	x0, x24
   57844:	blr	x28
   57848:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   5784c:	ldr	x2, [sp, #432]
   57850:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57854:	add	x1, x1, #0xd38
   57858:	mov	x0, x24
   5785c:	blr	x28
   57860:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57864:	ldr	w0, [sp, #396]
   57868:	bl	4f088 <aarch64_get_opcode@@Base+0xa74>
   5786c:	mov	x2, x0
   57870:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   57874:	add	x1, x1, #0x588
   57878:	mov	x0, x24
   5787c:	blr	x28
   57880:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57884:	add	x3, sp, #0x204
   57888:	add	x2, sp, #0x208
   5788c:	ldr	x1, [sp, #120]
   57890:	mov	x0, x19
   57894:	bl	4f250 <aarch64_get_opcode@@Base+0xc3c>
   57898:	mov	x19, x0
   5789c:	ldrb	w0, [x0]
   578a0:	cmp	w0, #0x57
   578a4:	b.eq	57a60 <aarch64_get_opcode@@Base+0x944c>  // b.none
   578a8:	b.ls	578e8 <aarch64_get_opcode@@Base+0x92d4>  // b.plast
   578ac:	cmp	w0, #0x72
   578b0:	b.eq	57924 <aarch64_get_opcode@@Base+0x9310>  // b.none
   578b4:	b.hi	579d4 <aarch64_get_opcode@@Base+0x93c0>  // b.pmore
   578b8:	cmp	w0, #0x63
   578bc:	b.eq	57a94 <aarch64_get_opcode@@Base+0x9480>  // b.none
   578c0:	cmp	w0, #0x64
   578c4:	b.ne	579a4 <aarch64_get_opcode@@Base+0x9390>  // b.any
   578c8:	ldr	x2, [sp, #520]
   578cc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   578d0:	add	x1, x1, #0xe40
   578d4:	mov	x0, x24
   578d8:	blr	x28
   578dc:	ldr	x0, [sp, #520]
   578e0:	str	x0, [sp, #112]
   578e4:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   578e8:	cmp	w0, #0x44
   578ec:	b.eq	57a38 <aarch64_get_opcode@@Base+0x9424>  // b.none
   578f0:	b.ls	5795c <aarch64_get_opcode@@Base+0x9348>  // b.plast
   578f4:	cmp	w0, #0x52
   578f8:	b.eq	57910 <aarch64_get_opcode@@Base+0x92fc>  // b.none
   578fc:	cmp	w0, #0x53
   57900:	b.ne	57afc <aarch64_get_opcode@@Base+0x94e8>  // b.any
   57904:	ldr	x0, [sp, #520]
   57908:	cmp	x0, #0xd
   5790c:	b.eq	57a88 <aarch64_get_opcode@@Base+0x9474>  // b.none
   57910:	ldr	x0, [sp, #520]
   57914:	cmp	x0, #0xf
   57918:	ldr	w0, [sp, #136]
   5791c:	csinc	w0, w0, wzr, ne  // ne = any
   57920:	str	w0, [sp, #136]
   57924:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   57928:	ldr	w0, [x0, #1616]
   5792c:	add	x0, x0, x0, lsl #3
   57930:	ldr	x1, [sp, #520]
   57934:	add	x0, x1, x0, lsl #1
   57938:	add	x0, x0, #0x2
   5793c:	adrp	x1, 8e000 <aarch64_operands@@Base+0x1bc0>
   57940:	add	x1, x1, #0xb70
   57944:	ldr	x2, [x1, x0, lsl #3]
   57948:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   5794c:	add	x1, x1, #0x588
   57950:	mov	x0, x24
   57954:	blr	x28
   57958:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   5795c:	cmp	w0, #0x27
   57960:	b.eq	57ab8 <aarch64_get_opcode@@Base+0x94a4>  // b.none
   57964:	cmp	w0, #0x3f
   57968:	b.ne	57afc <aarch64_get_opcode@@Base+0x94e8>  // b.any
   5796c:	mov	w20, #0x1                   	// #1
   57970:	ldr	w0, [sp, #516]
   57974:	lsl	w0, w20, w0
   57978:	ldr	x1, [sp, #520]
   5797c:	sub	w0, w0, w1
   57980:	ldrb	w2, [x19, w0, sxtw]
   57984:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57988:	add	x1, x1, #0x790
   5798c:	mov	x0, x24
   57990:	blr	x28
   57994:	ldr	w0, [sp, #516]
   57998:	lsl	w20, w20, w0
   5799c:	add	x19, x19, w20, sxtw
   579a0:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   579a4:	cmp	w0, #0x60
   579a8:	b.ne	57afc <aarch64_get_opcode@@Base+0x94e8>  // b.any
   579ac:	add	x20, x19, #0x1
   579b0:	ldr	x0, [sp, #520]
   579b4:	cbnz	x0, 57b00 <aarch64_get_opcode@@Base+0x94ec>
   579b8:	ldrb	w2, [x19, #1]
   579bc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   579c0:	add	x1, x1, #0x790
   579c4:	mov	x0, x24
   579c8:	blr	x28
   579cc:	mov	x19, x20
   579d0:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   579d4:	cmp	w0, #0x73
   579d8:	b.eq	579fc <aarch64_get_opcode@@Base+0x93e8>  // b.none
   579dc:	cmp	w0, #0x78
   579e0:	b.ne	57afc <aarch64_get_opcode@@Base+0x94e8>  // b.any
   579e4:	ldr	w2, [sp, #520]
   579e8:	adrp	x1, 65000 <fields@@Base+0x4c40>
   579ec:	add	x1, x1, #0xc70
   579f0:	mov	x0, x24
   579f4:	blr	x28
   579f8:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   579fc:	ldr	x0, [sp, #520]
   57a00:	cmp	x0, #0x3
   57a04:	b.hi	57a24 <aarch64_get_opcode@@Base+0x9410>  // b.pmore
   57a08:	ldr	x1, [sp, #472]
   57a0c:	ldr	x2, [x1, x0, lsl #3]
   57a10:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   57a14:	add	x1, x1, #0x588
   57a18:	mov	x0, x24
   57a1c:	blr	x28
   57a20:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57a24:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57a28:	add	x1, x1, #0xe98
   57a2c:	mov	x0, x24
   57a30:	blr	x28
   57a34:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57a38:	ldr	x2, [sp, #520]
   57a3c:	add	x2, x2, #0x1
   57a40:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57a44:	add	x1, x1, #0xe40
   57a48:	mov	x0, x24
   57a4c:	blr	x28
   57a50:	ldr	x0, [sp, #520]
   57a54:	add	x0, x0, #0x1
   57a58:	str	x0, [sp, #112]
   57a5c:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57a60:	ldr	x2, [sp, #520]
   57a64:	lsl	x2, x2, #2
   57a68:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57a6c:	add	x1, x1, #0xe40
   57a70:	mov	x0, x24
   57a74:	blr	x28
   57a78:	ldr	x0, [sp, #520]
   57a7c:	lsl	x0, x0, #2
   57a80:	str	x0, [sp, #112]
   57a84:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57a88:	mov	w0, #0x1                   	// #1
   57a8c:	str	w0, [sp, #136]
   57a90:	b	57924 <aarch64_get_opcode@@Base+0x9310>
   57a94:	ldr	x0, [sp, #216]
   57a98:	add	x0, x0, #0x188
   57a9c:	ldr	x1, [sp, #520]
   57aa0:	ldr	x2, [x0, x1, lsl #3]
   57aa4:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   57aa8:	add	x1, x1, #0x588
   57aac:	mov	x0, x24
   57ab0:	blr	x28
   57ab4:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57ab8:	add	x20, x19, #0x1
   57abc:	ldr	w1, [sp, #516]
   57ac0:	mov	x0, #0x1                   	// #1
   57ac4:	lsl	x0, x0, x1
   57ac8:	sub	x0, x0, #0x1
   57acc:	ldr	x1, [sp, #520]
   57ad0:	cmp	x0, x1
   57ad4:	b.eq	57ae0 <aarch64_get_opcode@@Base+0x94cc>  // b.none
   57ad8:	mov	x19, x20
   57adc:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57ae0:	ldrb	w2, [x19, #1]
   57ae4:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57ae8:	add	x1, x1, #0x790
   57aec:	mov	x0, x24
   57af0:	blr	x28
   57af4:	mov	x19, x20
   57af8:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57afc:	bl	35670 <abort@plt>
   57b00:	mov	x19, x20
   57b04:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57b08:	ldr	x0, [sp, #280]
   57b0c:	cmp	x0, #0xf
   57b10:	b.ne	56e10 <aarch64_get_opcode@@Base+0x87fc>  // b.any
   57b14:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57b18:	add	x1, x1, #0x4f0
   57b1c:	mov	x0, x24
   57b20:	blr	x28
   57b24:	ldr	x2, [x23, #120]
   57b28:	mov	x1, x23
   57b2c:	ldr	x0, [sp, #400]
   57b30:	blr	x2
   57b34:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57b38:	bl	35670 <abort@plt>
   57b3c:	ldr	x2, [sp, #112]
   57b40:	add	x0, x2, #0x10
   57b44:	cmp	x0, #0x30
   57b48:	b.ls	57b5c <aarch64_get_opcode@@Base+0x9548>  // b.plast
   57b4c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57b50:	add	x1, x1, #0x810
   57b54:	mov	x0, x24
   57b58:	blr	x28
   57b5c:	ldr	w0, [sp, #136]
   57b60:	cbz	w0, 57c2c <aarch64_get_opcode@@Base+0x9618>
   57b64:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57b68:	add	x1, x1, #0x310
   57b6c:	mov	x0, x24
   57b70:	blr	x28
   57b74:	ldp	x25, x26, [sp, #64]
   57b78:	b	57c00 <aarch64_get_opcode@@Base+0x95ec>
   57b7c:	ldr	w3, [sp, #384]
   57b80:	mov	w2, #0x2b                  	// #43
   57b84:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57b88:	add	x1, x1, #0xf98
   57b8c:	mov	x0, x24
   57b90:	blr	x28
   57b94:	ldr	x0, [sp, #416]
   57b98:	str	x0, [sp, #112]
   57b9c:	adrp	x1, 6a000 <fields@@Base+0x9c40>
   57ba0:	add	x1, x1, #0x0
   57ba4:	mov	x0, x24
   57ba8:	blr	x28
   57bac:	cbz	w20, 56e10 <aarch64_get_opcode@@Base+0x87fc>
   57bb0:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57bb4:	add	x1, x1, #0x4c0
   57bb8:	mov	x0, x24
   57bbc:	blr	x28
   57bc0:	b	56e10 <aarch64_get_opcode@@Base+0x87fc>
   57bc4:	ldr	w3, [sp, #384]
   57bc8:	mov	w2, #0x2b                  	// #43
   57bcc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57bd0:	add	x1, x1, #0xfa0
   57bd4:	mov	x0, x24
   57bd8:	blr	x28
   57bdc:	b	57370 <aarch64_get_opcode@@Base+0x8d5c>
   57be0:	mov	w4, #0x1                   	// #1
   57be4:	mov	x3, x22
   57be8:	mov	x2, x23
   57bec:	mov	x1, x20
   57bf0:	adrp	x0, 9d000 <aarch64_operands@@Base+0x10bc0>
   57bf4:	add	x0, x0, #0xe70
   57bf8:	bl	52fbc <aarch64_get_opcode@@Base+0x49a8>
   57bfc:	cbz	w0, 555f0 <aarch64_get_opcode@@Base+0x6fdc>
   57c00:	ldp	x19, x20, [sp, #16]
   57c04:	ldp	x21, x22, [sp, #32]
   57c08:	ldp	x23, x24, [sp, #48]
   57c0c:	ldp	x27, x28, [sp, #80]
   57c10:	ldp	x29, x30, [sp]
   57c14:	add	sp, sp, #0x210
   57c18:	ret
   57c1c:	ldp	x25, x26, [sp, #64]
   57c20:	b	57c00 <aarch64_get_opcode@@Base+0x95ec>
   57c24:	ldp	x25, x26, [sp, #64]
   57c28:	b	57c00 <aarch64_get_opcode@@Base+0x95ec>
   57c2c:	ldp	x25, x26, [sp, #64]
   57c30:	b	57c00 <aarch64_get_opcode@@Base+0x95ec>

0000000000057c34 <arm_symbol_is_valid@@Base>:
   57c34:	cbz	x0, 57c7c <arm_symbol_is_valid@@Base+0x48>
   57c38:	ldr	x3, [x0, #8]
   57c3c:	mov	w0, #0x0                   	// #0
   57c40:	cbz	x3, 57c84 <arm_symbol_is_valid@@Base+0x50>
   57c44:	ldrb	w1, [x3]
   57c48:	cmp	w1, #0x24
   57c4c:	b.eq	57c84 <arm_symbol_is_valid@@Base+0x50>  // b.none
   57c50:	stp	x29, x30, [sp, #-16]!
   57c54:	mov	x29, sp
   57c58:	mov	x2, #0xa                   	// #10
   57c5c:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57c60:	add	x1, x1, #0xfb0
   57c64:	mov	x0, x3
   57c68:	bl	35440 <strncmp@plt>
   57c6c:	cmp	w0, #0x0
   57c70:	cset	w0, ne  // ne = any
   57c74:	ldp	x29, x30, [sp], #16
   57c78:	ret
   57c7c:	mov	w0, #0x0                   	// #0
   57c80:	ret
   57c84:	ret

0000000000057c88 <print_insn_big_arm@@Base>:
   57c88:	stp	x29, x30, [sp, #-16]!
   57c8c:	mov	x29, sp
   57c90:	ldr	w2, [x1, #24]
   57c94:	cmp	w2, #0x5
   57c98:	b.eq	57cac <print_insn_big_arm@@Base+0x24>  // b.none
   57c9c:	mov	w2, #0x0                   	// #0
   57ca0:	bl	51250 <aarch64_get_opcode@@Base+0x2c3c>
   57ca4:	ldp	x29, x30, [sp], #16
   57ca8:	ret
   57cac:	ldr	x2, [x1, #48]
   57cb0:	cbz	x2, 57c9c <print_insn_big_arm@@Base+0x14>
   57cb4:	ldr	x2, [x2, #240]
   57cb8:	ldr	x2, [x2, #248]
   57cbc:	ldr	x2, [x2, #48]
   57cc0:	tbz	w2, #23, 57c9c <print_insn_big_arm@@Base+0x14>
   57cc4:	mov	w2, #0x1                   	// #1
   57cc8:	str	w2, [x1, #44]
   57ccc:	b	57c9c <print_insn_big_arm@@Base+0x14>

0000000000057cd0 <print_insn_little_arm@@Base>:
   57cd0:	stp	x29, x30, [sp, #-16]!
   57cd4:	mov	x29, sp
   57cd8:	mov	w2, #0x1                   	// #1
   57cdc:	bl	51250 <aarch64_get_opcode@@Base+0x2c3c>
   57ce0:	ldp	x29, x30, [sp], #16
   57ce4:	ret

0000000000057ce8 <disassembler_options_arm@@Base>:
   57ce8:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   57cec:	ldr	x0, [x0, #1136]
   57cf0:	cbz	x0, 57d00 <disassembler_options_arm@@Base+0x18>
   57cf4:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   57cf8:	ldr	x0, [x0, #1136]
   57cfc:	ret
   57d00:	stp	x29, x30, [sp, #-64]!
   57d04:	mov	x29, sp
   57d08:	stp	x19, x20, [sp, #16]
   57d0c:	stp	x21, x22, [sp, #32]
   57d10:	stp	x23, x24, [sp, #48]
   57d14:	mov	x0, #0x20                  	// #32
   57d18:	bl	35480 <xmalloc@plt>
   57d1c:	mov	x21, x0
   57d20:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   57d24:	str	x21, [x0, #1136]
   57d28:	str	xzr, [x21, #24]
   57d2c:	mov	x0, #0x48                  	// #72
   57d30:	bl	35480 <xmalloc@plt>
   57d34:	str	x0, [x21]
   57d38:	mov	x0, #0x48                  	// #72
   57d3c:	bl	35480 <xmalloc@plt>
   57d40:	str	x0, [x21, #8]
   57d44:	str	xzr, [x21, #16]
   57d48:	adrp	x20, 8e000 <aarch64_operands@@Base+0x1bc0>
   57d4c:	add	x20, x20, #0xb70
   57d50:	add	x20, x20, #0x8
   57d54:	mov	x19, #0x0                   	// #0
   57d58:	adrp	x23, 58000 <print_arm_disassembler_options@@Base+0x228>
   57d5c:	add	x23, x23, #0x908
   57d60:	mov	w24, #0x5                   	// #5
   57d64:	b	57d8c <disassembler_options_arm@@Base+0xa4>
   57d68:	ldr	x22, [x21, #8]
   57d6c:	mov	w2, w24
   57d70:	mov	x0, x23
   57d74:	bl	359e0 <dcgettext@plt>
   57d78:	str	x0, [x22, x19]
   57d7c:	add	x19, x19, #0x8
   57d80:	add	x20, x20, #0x90
   57d84:	cmp	x19, #0x40
   57d88:	b.eq	57dac <disassembler_options_arm@@Base+0xc4>  // b.none
   57d8c:	ldur	x1, [x20, #-8]
   57d90:	ldr	x0, [x21]
   57d94:	str	x1, [x0, x19]
   57d98:	ldr	x1, [x20]
   57d9c:	cbnz	x1, 57d68 <disassembler_options_arm@@Base+0x80>
   57da0:	ldr	x0, [x21, #8]
   57da4:	str	xzr, [x0, x19]
   57da8:	b	57d7c <disassembler_options_arm@@Base+0x94>
   57dac:	ldr	x0, [x21]
   57db0:	str	xzr, [x0, #64]
   57db4:	ldr	x0, [x21, #8]
   57db8:	str	xzr, [x0, #64]
   57dbc:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   57dc0:	ldr	x0, [x0, #1136]
   57dc4:	ldp	x19, x20, [sp, #16]
   57dc8:	ldp	x21, x22, [sp, #32]
   57dcc:	ldp	x23, x24, [sp, #48]
   57dd0:	ldp	x29, x30, [sp], #64
   57dd4:	ret

0000000000057dd8 <print_arm_disassembler_options@@Base>:
   57dd8:	stp	x29, x30, [sp, #-96]!
   57ddc:	mov	x29, sp
   57de0:	stp	x19, x20, [sp, #16]
   57de4:	stp	x21, x22, [sp, #32]
   57de8:	stp	x23, x24, [sp, #48]
   57dec:	stp	x25, x26, [sp, #64]
   57df0:	stp	x27, x28, [sp, #80]
   57df4:	mov	x24, x0
   57df8:	mov	w2, #0x5                   	// #5
   57dfc:	adrp	x1, 65000 <fields@@Base+0x4c40>
   57e00:	add	x1, x1, #0xfc0
   57e04:	adrp	x0, 58000 <print_arm_disassembler_options@@Base+0x228>
   57e08:	add	x0, x0, #0x908
   57e0c:	bl	359e0 <dcgettext@plt>
   57e10:	mov	x1, x0
   57e14:	mov	x0, x24
   57e18:	bl	35b80 <fprintf@plt>
   57e1c:	adrp	x19, 8e000 <aarch64_operands@@Base+0x1bc0>
   57e20:	add	x19, x19, #0xb70
   57e24:	add	x23, x19, #0x480
   57e28:	mov	x21, x19
   57e2c:	mov	w20, #0x0                   	// #0
   57e30:	ldr	x0, [x21], #144
   57e34:	bl	350a0 <strlen@plt>
   57e38:	cmp	w20, w0
   57e3c:	csel	w20, w20, w0, cs  // cs = hs, nlast
   57e40:	cmp	x21, x23
   57e44:	b.ne	57e30 <print_arm_disassembler_options@@Base+0x58>  // b.any
   57e48:	add	w20, w20, #0x1
   57e4c:	adrp	x26, 58000 <print_arm_disassembler_options@@Base+0x228>
   57e50:	add	x26, x26, #0x908
   57e54:	mov	w28, #0x5                   	// #5
   57e58:	adrp	x25, 66000 <fields@@Base+0x5c40>
   57e5c:	add	x25, x25, #0x20
   57e60:	mov	w27, #0x20                  	// #32
   57e64:	ldr	x22, [x19]
   57e68:	mov	x0, x22
   57e6c:	bl	350a0 <strlen@plt>
   57e70:	mov	x21, x0
   57e74:	mov	w2, w28
   57e78:	ldr	x1, [x19, #8]
   57e7c:	mov	x0, x26
   57e80:	bl	359e0 <dcgettext@plt>
   57e84:	mov	x5, x0
   57e88:	mov	w4, w27
   57e8c:	sub	w3, w20, w21
   57e90:	mov	x2, x22
   57e94:	mov	x1, x25
   57e98:	mov	x0, x24
   57e9c:	bl	35b80 <fprintf@plt>
   57ea0:	add	x19, x19, #0x90
   57ea4:	cmp	x19, x23
   57ea8:	b.ne	57e64 <print_arm_disassembler_options@@Base+0x8c>  // b.any
   57eac:	ldp	x19, x20, [sp, #16]
   57eb0:	ldp	x21, x22, [sp, #32]
   57eb4:	ldp	x23, x24, [sp, #48]
   57eb8:	ldp	x25, x26, [sp, #64]
   57ebc:	ldp	x27, x28, [sp, #80]
   57ec0:	ldp	x29, x30, [sp], #96
   57ec4:	ret
   57ec8:	mov	w0, #0x1                   	// #1
   57ecc:	ret
   57ed0:	mov	x7, x0
   57ed4:	cbz	w1, 57ef0 <print_arm_disassembler_options@@Base+0x118>
   57ed8:	add	w3, w3, w4
   57edc:	sub	w1, w2, w3
   57ee0:	sub	w3, w3, #0x1
   57ee4:	lsr	w5, w3, #3
   57ee8:	mov	w8, #0xffffffff            	// #-1
   57eec:	b	57f00 <print_arm_disassembler_options@@Base+0x128>
   57ef0:	sub	w1, w2, w4
   57ef4:	sub	w1, w1, w3
   57ef8:	lsr	w5, w1, #3
   57efc:	mov	w8, #0x1                   	// #1
   57f00:	and	w3, w1, #0x7
   57f04:	add	w2, w3, w4
   57f08:	cmp	w2, #0x8
   57f0c:	mov	w0, #0x8                   	// #8
   57f10:	csel	w2, w2, w0, ls  // ls = plast
   57f14:	mov	w6, #0x0                   	// #0
   57f18:	mov	x0, #0x0                   	// #0
   57f1c:	mov	w11, #0x1                   	// #1
   57f20:	mov	w10, #0x8                   	// #8
   57f24:	mov	w9, #0x0                   	// #0
   57f28:	sub	w2, w2, w3
   57f2c:	ldrb	w1, [x7, w5, uxtw]
   57f30:	asr	w1, w1, w3
   57f34:	lsl	w3, w11, w2
   57f38:	sub	w3, w3, #0x1
   57f3c:	and	w1, w1, w3
   57f40:	lsl	w1, w1, w6
   57f44:	orr	x0, x0, x1
   57f48:	sub	w4, w4, w2
   57f4c:	add	w6, w6, w2
   57f50:	add	w5, w5, w8
   57f54:	cmp	w4, #0x8
   57f58:	csel	w2, w4, w10, ls  // ls = plast
   57f5c:	mov	w3, w9
   57f60:	cbnz	w4, 57f28 <print_arm_disassembler_options@@Base+0x150>
   57f64:	ret
   57f68:	stp	x29, x30, [sp, #-64]!
   57f6c:	mov	x29, sp
   57f70:	stp	x19, x20, [sp, #16]
   57f74:	stp	x21, x22, [sp, #32]
   57f78:	str	x23, [sp, #48]
   57f7c:	mov	x19, x0
   57f80:	mov	x20, x1
   57f84:	ldr	w22, [x0]
   57f88:	ldr	w23, [x0, #4]
   57f8c:	ldr	w4, [x0, #16]
   57f90:	ldr	w3, [x0, #12]
   57f94:	mov	w2, w23
   57f98:	mov	w1, w22
   57f9c:	mov	x0, x20
   57fa0:	bl	57ed0 <print_arm_disassembler_options@@Base+0xf8>
   57fa4:	mov	x21, x0
   57fa8:	mov	w4, #0x1                   	// #1
   57fac:	ldr	w3, [x19, #28]
   57fb0:	mov	w2, w23
   57fb4:	mov	w1, w22
   57fb8:	mov	x0, x20
   57fbc:	bl	57ed0 <print_arm_disassembler_options@@Base+0xf8>
   57fc0:	cmp	x21, #0x0
   57fc4:	cset	w1, eq  // eq = none
   57fc8:	cmp	x0, #0x0
   57fcc:	cset	w0, eq  // eq = none
   57fd0:	cmp	w0, w1, uxtb
   57fd4:	cset	w0, eq  // eq = none
   57fd8:	ldp	x19, x20, [sp, #16]
   57fdc:	ldp	x21, x22, [sp, #32]
   57fe0:	ldr	x23, [sp, #48]
   57fe4:	ldp	x29, x30, [sp], #64
   57fe8:	ret
   57fec:	stp	x29, x30, [sp, #-80]!
   57ff0:	mov	x29, sp
   57ff4:	stp	x19, x20, [sp, #16]
   57ff8:	stp	x21, x22, [sp, #32]
   57ffc:	ldr	w21, [x0, #28]
   58000:	ldr	w19, [x0, #32]
   58004:	cmp	w19, #0x0
   58008:	b.le	58064 <print_arm_disassembler_options@@Base+0x28c>
   5800c:	stp	x23, x24, [sp, #48]
   58010:	str	x25, [sp, #64]
   58014:	mov	x22, x1
   58018:	ldr	w25, [x0]
   5801c:	ldr	w24, [x0, #4]
   58020:	mov	w23, #0x20                  	// #32
   58024:	cmp	w19, #0x20
   58028:	csel	w20, w19, w23, le
   5802c:	mov	w4, w20
   58030:	mov	w3, w21
   58034:	mov	w2, w24
   58038:	mov	w1, w25
   5803c:	mov	x0, x22
   58040:	bl	57ed0 <print_arm_disassembler_options@@Base+0xf8>
   58044:	cbnz	x0, 5806c <print_arm_disassembler_options@@Base+0x294>
   58048:	add	w21, w21, w20
   5804c:	sub	w19, w19, w20
   58050:	cmp	w19, #0x0
   58054:	b.gt	58024 <print_arm_disassembler_options@@Base+0x24c>
   58058:	ldp	x23, x24, [sp, #48]
   5805c:	ldr	x25, [sp, #64]
   58060:	b	58078 <print_arm_disassembler_options@@Base+0x2a0>
   58064:	mov	w0, #0x0                   	// #0
   58068:	b	58078 <print_arm_disassembler_options@@Base+0x2a0>
   5806c:	mov	w0, #0x1                   	// #1
   58070:	ldp	x23, x24, [sp, #48]
   58074:	ldr	x25, [sp, #64]
   58078:	ldp	x19, x20, [sp, #16]
   5807c:	ldp	x21, x22, [sp, #32]
   58080:	ldp	x29, x30, [sp], #80
   58084:	ret
   58088:	stp	x29, x30, [sp, #-112]!
   5808c:	mov	x29, sp
   58090:	stp	x19, x20, [sp, #16]
   58094:	stp	x21, x22, [sp, #32]
   58098:	stp	x23, x24, [sp, #48]
   5809c:	stp	x25, x26, [sp, #64]
   580a0:	mov	x20, x1
   580a4:	ldr	x19, [x0, #56]
   580a8:	ldr	w21, [x19]
   580ac:	ldr	w22, [x19, #4]
   580b0:	ldr	w25, [x19, #12]
   580b4:	ldr	w26, [x19, #16]
   580b8:	mov	w4, w26
   580bc:	mov	w3, w25
   580c0:	mov	w2, w22
   580c4:	mov	w1, w21
   580c8:	mov	x0, x20
   580cc:	bl	57ed0 <print_arm_disassembler_options@@Base+0xf8>
   580d0:	mov	x24, x0
   580d4:	add	x23, x20, #0x8
   580d8:	mov	w4, w26
   580dc:	mov	w3, w25
   580e0:	mov	w2, w22
   580e4:	mov	w1, w21
   580e8:	mov	x0, x23
   580ec:	bl	57ed0 <print_arm_disassembler_options@@Base+0xf8>
   580f0:	mov	x25, x0
   580f4:	ldr	w0, [x19, #24]
   580f8:	cmp	x24, x0
   580fc:	b.eq	58124 <print_arm_disassembler_options@@Base+0x34c>  // b.none
   58100:	cbnz	x24, 58158 <print_arm_disassembler_options@@Base+0x380>
   58104:	mov	w0, #0x0                   	// #0
   58108:	cbz	x25, 58140 <print_arm_disassembler_options@@Base+0x368>
   5810c:	ldp	x19, x20, [sp, #16]
   58110:	ldp	x21, x22, [sp, #32]
   58114:	ldp	x23, x24, [sp, #48]
   58118:	ldp	x25, x26, [sp, #64]
   5811c:	ldp	x29, x30, [sp], #112
   58120:	ret
   58124:	mov	x1, x20
   58128:	mov	x0, x19
   5812c:	bl	57fec <print_arm_disassembler_options@@Base+0x214>
   58130:	mov	w1, w0
   58134:	mov	w0, #0x1                   	// #1
   58138:	cbz	w1, 58104 <print_arm_disassembler_options@@Base+0x32c>
   5813c:	b	5810c <print_arm_disassembler_options@@Base+0x334>
   58140:	mov	x1, x23
   58144:	mov	x0, x19
   58148:	bl	57fec <print_arm_disassembler_options@@Base+0x214>
   5814c:	cmp	w0, #0x0
   58150:	cset	w0, eq  // eq = none
   58154:	b	5810c <print_arm_disassembler_options@@Base+0x334>
   58158:	stp	x27, x28, [sp, #80]
   5815c:	sub	x28, x24, #0x35
   58160:	mov	w0, #0x1                   	// #1
   58164:	cmp	x28, x25
   58168:	b.gt	582b8 <print_arm_disassembler_options@@Base+0x4e0>
   5816c:	sub	x0, x24, #0x34
   58170:	str	x0, [sp, #96]
   58174:	cmp	x25, #0x0
   58178:	ccmp	x0, x25, #0x0, ne  // ne = any
   5817c:	b.le	582a0 <print_arm_disassembler_options@@Base+0x4c8>
   58180:	cbnz	x25, 5824c <print_arm_disassembler_options@@Base+0x474>
   58184:	ldr	w27, [x19, #32]
   58188:	str	w27, [sp, #108]
   5818c:	cbz	w27, 582ac <print_arm_disassembler_options@@Base+0x4d4>
   58190:	ldr	w25, [x19, #28]
   58194:	mov	w19, #0x0                   	// #0
   58198:	mov	w24, #0xffffffff            	// #-1
   5819c:	mov	w26, #0x1                   	// #1
   581a0:	b	581b0 <print_arm_disassembler_options@@Base+0x3d8>
   581a4:	add	w19, w19, #0x1
   581a8:	cmp	w19, w27
   581ac:	b.eq	581dc <print_arm_disassembler_options@@Base+0x404>  // b.none
   581b0:	mov	w4, w26
   581b4:	add	w3, w19, w25
   581b8:	mov	w2, w22
   581bc:	mov	w1, w21
   581c0:	mov	x0, x23
   581c4:	bl	57ed0 <print_arm_disassembler_options@@Base+0xf8>
   581c8:	cbz	x0, 581a4 <print_arm_disassembler_options@@Base+0x3cc>
   581cc:	cmn	w24, #0x1
   581d0:	b.ne	581ec <print_arm_disassembler_options@@Base+0x414>  // b.any
   581d4:	mov	w24, w19
   581d8:	b	581a4 <print_arm_disassembler_options@@Base+0x3cc>
   581dc:	mov	w0, #0x1                   	// #1
   581e0:	cmn	w24, #0x1
   581e4:	b.eq	582c0 <print_arm_disassembler_options@@Base+0x4e8>  // b.none
   581e8:	mov	w19, #0xffffffff            	// #-1
   581ec:	neg	w24, w24
   581f0:	sxtw	x1, w24
   581f4:	mov	w0, #0x1                   	// #1
   581f8:	cmp	x28, w24, sxtw
   581fc:	b.gt	582c8 <print_arm_disassembler_options@@Base+0x4f0>
   58200:	ldr	x0, [sp, #96]
   58204:	cmp	x0, x1
   58208:	mov	w0, #0x0                   	// #0
   5820c:	ccmn	w19, #0x1, #0x0, gt
   58210:	b.eq	5821c <print_arm_disassembler_options@@Base+0x444>  // b.none
   58214:	ldp	x27, x28, [sp, #80]
   58218:	b	5810c <print_arm_disassembler_options@@Base+0x334>
   5821c:	ldr	w0, [sp, #108]
   58220:	add	w3, w25, w0
   58224:	mov	w4, #0x1                   	// #1
   58228:	sub	w3, w3, #0x1
   5822c:	mov	w2, w22
   58230:	mov	w1, w21
   58234:	mov	x0, x20
   58238:	bl	57ed0 <print_arm_disassembler_options@@Base+0xf8>
   5823c:	cmp	x0, #0x0
   58240:	cset	w0, eq  // eq = none
   58244:	ldp	x27, x28, [sp, #80]
   58248:	b	5810c <print_arm_disassembler_options@@Base+0x334>
   5824c:	ldr	w3, [x19, #28]
   58250:	ldr	w0, [x19, #32]
   58254:	add	w3, w3, w0
   58258:	mov	w4, #0x1                   	// #1
   5825c:	sub	w3, w3, #0x1
   58260:	mov	w2, w22
   58264:	mov	w1, w21
   58268:	mov	x0, x20
   5826c:	bl	57ed0 <print_arm_disassembler_options@@Base+0xf8>
   58270:	mov	x1, x0
   58274:	mov	w0, #0x0                   	// #0
   58278:	cbz	x1, 58284 <print_arm_disassembler_options@@Base+0x4ac>
   5827c:	ldp	x27, x28, [sp, #80]
   58280:	b	5810c <print_arm_disassembler_options@@Base+0x334>
   58284:	mov	x1, x23
   58288:	mov	x0, x19
   5828c:	bl	57fec <print_arm_disassembler_options@@Base+0x214>
   58290:	cmp	w0, #0x0
   58294:	cset	w0, eq  // eq = none
   58298:	ldp	x27, x28, [sp, #80]
   5829c:	b	5810c <print_arm_disassembler_options@@Base+0x334>
   582a0:	mov	w0, #0x0                   	// #0
   582a4:	ldp	x27, x28, [sp, #80]
   582a8:	b	5810c <print_arm_disassembler_options@@Base+0x334>
   582ac:	mov	w0, #0x1                   	// #1
   582b0:	ldp	x27, x28, [sp, #80]
   582b4:	b	5810c <print_arm_disassembler_options@@Base+0x334>
   582b8:	ldp	x27, x28, [sp, #80]
   582bc:	b	5810c <print_arm_disassembler_options@@Base+0x334>
   582c0:	ldp	x27, x28, [sp, #80]
   582c4:	b	5810c <print_arm_disassembler_options@@Base+0x334>
   582c8:	ldp	x27, x28, [sp, #80]
   582cc:	b	5810c <print_arm_disassembler_options@@Base+0x334>
   582d0:	cbz	w1, 582ec <print_arm_disassembler_options@@Base+0x514>
   582d4:	add	w3, w3, w4
   582d8:	sub	w1, w2, w3
   582dc:	sub	w3, w3, #0x1
   582e0:	lsr	w7, w3, #3
   582e4:	mov	w8, #0xffffffff            	// #-1
   582e8:	b	582fc <print_arm_disassembler_options@@Base+0x524>
   582ec:	sub	w1, w2, w4
   582f0:	sub	w1, w1, w3
   582f4:	lsr	w7, w1, #3
   582f8:	mov	w8, #0x1                   	// #1
   582fc:	and	w1, w1, #0x7
   58300:	add	w3, w1, w4
   58304:	cmp	w3, #0x8
   58308:	mov	w2, #0x8                   	// #8
   5830c:	csel	w3, w3, w2, ls  // ls = plast
   58310:	mov	w11, #0x1                   	// #1
   58314:	mov	w10, w2
   58318:	mov	w9, #0x0                   	// #0
   5831c:	sub	w3, w3, w1
   58320:	ldrb	w6, [x0, w7, uxtw]
   58324:	lsl	w2, w11, w3
   58328:	sub	w2, w2, #0x1
   5832c:	lsl	w2, w2, w1
   58330:	lsl	x1, x5, x1
   58334:	eor	w1, w6, w1
   58338:	and	w1, w2, w1
   5833c:	eor	w1, w6, w1
   58340:	strb	w1, [x0, w7, uxtw]
   58344:	lsr	x5, x5, x3
   58348:	sub	w4, w4, w3
   5834c:	add	w7, w7, w8
   58350:	cmp	w4, #0x8
   58354:	csel	w3, w4, w10, ls  // ls = plast
   58358:	mov	w1, w9
   5835c:	cbnz	w4, 5831c <print_arm_disassembler_options@@Base+0x544>
   58360:	ret

0000000000058364 <floatformat_to_double@@Base>:
   58364:	stp	x29, x30, [sp, #-96]!
   58368:	mov	x29, sp
   5836c:	stp	x19, x20, [sp, #16]
   58370:	stp	x21, x22, [sp, #32]
   58374:	stp	x23, x24, [sp, #48]
   58378:	str	d8, [sp, #80]
   5837c:	mov	x22, x0
   58380:	mov	x23, x1
   58384:	mov	x24, x2
   58388:	ldr	w19, [x0]
   5838c:	ldr	w20, [x0, #4]
   58390:	ldr	w4, [x0, #16]
   58394:	ldr	w3, [x0, #12]
   58398:	mov	w2, w20
   5839c:	mov	w1, w19
   583a0:	mov	x0, x23
   583a4:	bl	57ed0 <print_arm_disassembler_options@@Base+0xf8>
   583a8:	ldr	w1, [x22, #24]
   583ac:	cmp	x0, x1
   583b0:	b.eq	58470 <floatformat_to_double@@Base+0x10c>  // b.none
   583b4:	stp	x25, x26, [sp, #64]
   583b8:	ldr	w20, [x22, #32]
   583bc:	ldr	w25, [x22, #28]
   583c0:	cbnz	x0, 584c0 <floatformat_to_double@@Base+0x15c>
   583c4:	ldr	w0, [x22, #20]
   583c8:	mov	w21, #0x1                   	// #1
   583cc:	sub	w21, w21, w0
   583d0:	sxtw	x21, w21
   583d4:	movi	d8, #0x0
   583d8:	cmp	w20, #0x0
   583dc:	b.le	5842c <floatformat_to_double@@Base+0xc8>
   583e0:	mov	w26, #0x20                  	// #32
   583e4:	cmp	w20, #0x20
   583e8:	csel	w19, w20, w26, le
   583ec:	mov	w4, w19
   583f0:	mov	w3, w25
   583f4:	ldr	w2, [x22, #4]
   583f8:	ldr	w1, [x22]
   583fc:	mov	x0, x23
   58400:	bl	57ed0 <print_arm_disassembler_options@@Base+0xf8>
   58404:	mov	x1, x0
   58408:	sub	w0, w21, w19
   5840c:	ucvtf	d0, x1
   58410:	bl	351d0 <ldexp@plt>
   58414:	fadd	d8, d8, d0
   58418:	sub	x21, x21, w19, uxtw
   5841c:	add	w25, w25, w19
   58420:	sub	w20, w20, w19
   58424:	cmp	w20, #0x0
   58428:	b.gt	583e4 <floatformat_to_double@@Base+0x80>
   5842c:	mov	w4, #0x1                   	// #1
   58430:	ldr	w3, [x22, #8]
   58434:	ldr	w2, [x22, #4]
   58438:	ldr	w1, [x22]
   5843c:	mov	x0, x23
   58440:	bl	57ed0 <print_arm_disassembler_options@@Base+0xf8>
   58444:	fneg	d0, d8
   58448:	cmp	x0, #0x0
   5844c:	fcsel	d8, d0, d8, ne  // ne = any
   58450:	str	d8, [x24]
   58454:	ldp	x25, x26, [sp, #64]
   58458:	ldp	x19, x20, [sp, #16]
   5845c:	ldp	x21, x22, [sp, #32]
   58460:	ldp	x23, x24, [sp, #48]
   58464:	ldr	d8, [sp, #80]
   58468:	ldp	x29, x30, [sp], #96
   5846c:	ret
   58470:	mov	x1, x23
   58474:	mov	x0, x22
   58478:	bl	57fec <print_arm_disassembler_options@@Base+0x214>
   5847c:	mov	x1, #0x7ff8000000000000    	// #9221120237041090560
   58480:	fmov	d8, x1
   58484:	mov	x1, #0x7ff0000000000000    	// #9218868437227405312
   58488:	fmov	d0, x1
   5848c:	cmp	w0, #0x0
   58490:	fcsel	d8, d8, d0, ne  // ne = any
   58494:	mov	w4, #0x1                   	// #1
   58498:	ldr	w3, [x22, #8]
   5849c:	mov	w2, w20
   584a0:	mov	w1, w19
   584a4:	mov	x0, x23
   584a8:	bl	57ed0 <print_arm_disassembler_options@@Base+0xf8>
   584ac:	fneg	d0, d8
   584b0:	cmp	x0, #0x0
   584b4:	fcsel	d8, d0, d8, ne  // ne = any
   584b8:	str	d8, [x24]
   584bc:	b	58458 <floatformat_to_double@@Base+0xf4>
   584c0:	ldrsw	x21, [x22, #20]
   584c4:	sub	x21, x0, x21
   584c8:	ldr	w0, [x22, #36]
   584cc:	cmp	w0, #0x1
   584d0:	b.eq	584e0 <floatformat_to_double@@Base+0x17c>  // b.none
   584d4:	add	x21, x21, #0x1
   584d8:	movi	d8, #0x0
   584dc:	b	583d8 <floatformat_to_double@@Base+0x74>
   584e0:	mov	w0, w21
   584e4:	fmov	d0, #1.000000000000000000e+00
   584e8:	bl	351d0 <ldexp@plt>
   584ec:	fmov	d8, d0
   584f0:	b	583d8 <floatformat_to_double@@Base+0x74>

00000000000584f4 <floatformat_from_double@@Base>:
   584f4:	stp	x29, x30, [sp, #-112]!
   584f8:	mov	x29, sp
   584fc:	stp	x19, x20, [sp, #16]
   58500:	stp	x21, x22, [sp, #32]
   58504:	stp	d8, d9, [sp, #80]
   58508:	mov	x19, x0
   5850c:	mov	x22, x2
   58510:	ldr	d8, [x1]
   58514:	ldr	w2, [x0, #4]
   58518:	lsr	w2, w2, #3
   5851c:	mov	w1, #0x0                   	// #0
   58520:	mov	x0, x22
   58524:	bl	35470 <memset@plt>
   58528:	fcmpe	d8, #0.0
   5852c:	b.mi	585b8 <floatformat_from_double@@Base+0xc4>  // b.first
   58530:	fcmp	d8, #0.0
   58534:	b.eq	58700 <floatformat_from_double@@Base+0x20c>  // b.none
   58538:	fcmp	d8, d8
   5853c:	b.ne	585dc <floatformat_from_double@@Base+0xe8>  // b.any
   58540:	fadd	d0, d8, d8
   58544:	fcmp	d0, d8
   58548:	b.eq	58618 <floatformat_from_double@@Base+0x124>  // b.none
   5854c:	str	x25, [sp, #64]
   58550:	add	x0, sp, #0x6c
   58554:	fmov	d0, d8
   58558:	bl	35850 <frexp@plt>
   5855c:	fmov	d8, d0
   58560:	ldr	w25, [sp, #108]
   58564:	ldr	w5, [x19, #20]
   58568:	add	w5, w25, w5
   5856c:	cmp	w5, #0x1
   58570:	b.le	58638 <floatformat_from_double@@Base+0x144>
   58574:	sub	w5, w5, #0x1
   58578:	sxtw	x5, w5
   5857c:	ldr	w4, [x19, #16]
   58580:	ldr	w3, [x19, #12]
   58584:	ldr	w2, [x19, #4]
   58588:	ldr	w1, [x19]
   5858c:	mov	x0, x22
   58590:	bl	582d0 <print_arm_disassembler_options@@Base+0x4f8>
   58594:	ldr	w0, [x19, #32]
   58598:	ldr	w21, [x19, #28]
   5859c:	cmp	w0, #0x0
   585a0:	b.le	58714 <floatformat_from_double@@Base+0x220>
   585a4:	stp	x23, x24, [sp, #48]
   585a8:	mov	w23, #0x20                  	// #32
   585ac:	adrp	x1, 74000 <fields@@Base+0x13c40>
   585b0:	ldr	d9, [x1, #3744]
   585b4:	b	586a8 <floatformat_from_double@@Base+0x1b4>
   585b8:	mov	x5, #0x1                   	// #1
   585bc:	mov	w4, w5
   585c0:	ldr	w3, [x19, #8]
   585c4:	ldr	w2, [x19, #4]
   585c8:	ldr	w1, [x19]
   585cc:	mov	x0, x22
   585d0:	bl	582d0 <print_arm_disassembler_options@@Base+0x4f8>
   585d4:	fneg	d8, d8
   585d8:	b	58530 <floatformat_from_double@@Base+0x3c>
   585dc:	ldr	w5, [x19, #24]
   585e0:	ldr	w4, [x19, #16]
   585e4:	ldr	w3, [x19, #12]
   585e8:	ldr	w2, [x19, #4]
   585ec:	ldr	w1, [x19]
   585f0:	mov	x0, x22
   585f4:	bl	582d0 <print_arm_disassembler_options@@Base+0x4f8>
   585f8:	mov	x5, #0x1                   	// #1
   585fc:	mov	w4, #0x20                  	// #32
   58600:	ldr	w3, [x19, #28]
   58604:	ldr	w2, [x19, #4]
   58608:	ldr	w1, [x19]
   5860c:	mov	x0, x22
   58610:	bl	582d0 <print_arm_disassembler_options@@Base+0x4f8>
   58614:	b	58700 <floatformat_from_double@@Base+0x20c>
   58618:	ldr	w5, [x19, #24]
   5861c:	ldr	w4, [x19, #16]
   58620:	ldr	w3, [x19, #12]
   58624:	ldr	w2, [x19, #4]
   58628:	ldr	w1, [x19]
   5862c:	mov	x0, x22
   58630:	bl	582d0 <print_arm_disassembler_options@@Base+0x4f8>
   58634:	b	58700 <floatformat_from_double@@Base+0x20c>
   58638:	mov	x5, #0x0                   	// #0
   5863c:	ldr	w4, [x19, #16]
   58640:	ldr	w3, [x19, #12]
   58644:	ldr	w2, [x19, #4]
   58648:	ldr	w1, [x19]
   5864c:	mov	x0, x22
   58650:	bl	582d0 <print_arm_disassembler_options@@Base+0x4f8>
   58654:	ldr	w0, [x19, #20]
   58658:	add	w0, w25, w0
   5865c:	sub	w0, w0, #0x1
   58660:	fmov	d0, d8
   58664:	bl	351d0 <ldexp@plt>
   58668:	fmov	d8, d0
   5866c:	b	58594 <floatformat_from_double@@Base+0xa0>
   58670:	sub	w0, w23, w20
   58674:	lsr	x0, x5, x0
   58678:	cmp	w20, #0x20
   5867c:	csel	x5, x0, x5, cc  // cc = lo, ul, last
   58680:	mov	w4, w20
   58684:	mov	w3, w21
   58688:	ldr	w2, [x19, #4]
   5868c:	ldr	w1, [x19]
   58690:	mov	x0, x22
   58694:	bl	582d0 <print_arm_disassembler_options@@Base+0x4f8>
   58698:	add	w21, w21, w20
   5869c:	sub	w0, w24, w20
   586a0:	cmp	w0, #0x0
   586a4:	b.le	586f8 <floatformat_from_double@@Base+0x204>
   586a8:	cmp	w0, #0x20
   586ac:	csel	w20, w0, w23, le
   586b0:	fmul	d0, d8, d9
   586b4:	fcvtzu	x5, d0
   586b8:	ucvtf	d8, x5
   586bc:	fsub	d8, d0, d8
   586c0:	mov	w24, w0
   586c4:	ldr	w1, [x19, #32]
   586c8:	cmp	w1, w0
   586cc:	b.ne	58670 <floatformat_from_double@@Base+0x17c>  // b.any
   586d0:	ldr	w0, [x19, #36]
   586d4:	cmp	w0, #0x1
   586d8:	b.ne	58670 <floatformat_from_double@@Base+0x17c>  // b.any
   586dc:	ldr	w0, [x19, #20]
   586e0:	add	w0, w25, w0
   586e4:	cmp	w0, #0x1
   586e8:	b.le	58670 <floatformat_from_double@@Base+0x17c>
   586ec:	and	x5, x5, #0x7fffffff
   586f0:	sub	w20, w20, #0x1
   586f4:	b	58680 <floatformat_from_double@@Base+0x18c>
   586f8:	ldp	x23, x24, [sp, #48]
   586fc:	ldr	x25, [sp, #64]
   58700:	ldp	x19, x20, [sp, #16]
   58704:	ldp	x21, x22, [sp, #32]
   58708:	ldp	d8, d9, [sp, #80]
   5870c:	ldp	x29, x30, [sp], #112
   58710:	ret
   58714:	ldr	x25, [sp, #64]
   58718:	b	58700 <floatformat_from_double@@Base+0x20c>

000000000005871c <floatformat_is_valid@@Base>:
   5871c:	stp	x29, x30, [sp, #-16]!
   58720:	mov	x29, sp
   58724:	ldr	x2, [x0, #48]
   58728:	blr	x2
   5872c:	ldp	x29, x30, [sp], #16
   58730:	ret

0000000000058734 <xmalloc_set_program_name@@Base>:
   58734:	adrp	x1, fa000 <aarch64_opcode_table@@Base+0x55a20>
   58738:	str	x0, [x1, #1624]
   5873c:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   58740:	ldr	x0, [x0, #1144]
   58744:	cbz	x0, 5874c <xmalloc_set_program_name@@Base+0x18>
   58748:	ret
   5874c:	stp	x29, x30, [sp, #-16]!
   58750:	mov	x29, sp
   58754:	bl	35160 <sbrk@plt>
   58758:	adrp	x1, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5875c:	str	x0, [x1, #1144]
   58760:	ldp	x29, x30, [sp], #16
   58764:	ret

0000000000058768 <xmalloc_failed@@Base>:
   58768:	stp	x29, x30, [sp, #-32]!
   5876c:	mov	x29, sp
   58770:	stp	x19, x20, [sp, #16]
   58774:	mov	x19, x0
   58778:	adrp	x0, 10f000 <aarch64_opnd_qualifiers@@Base+0x14e30>
   5877c:	ldr	x20, [x0, #1144]
   58780:	cbz	x20, 587d8 <xmalloc_failed@@Base+0x70>
   58784:	mov	x0, #0x0                   	// #0
   58788:	bl	35160 <sbrk@plt>
   5878c:	sub	x5, x0, x20
   58790:	adrp	x0, fa000 <aarch64_opcode_table@@Base+0x55a20>
   58794:	ldr	x2, [x0, #1624]
   58798:	ldrb	w0, [x2]
   5879c:	adrp	x1, 59000 <xexit@@Base+0x74c>
   587a0:	add	x1, x1, #0x9c0
   587a4:	adrp	x3, 75000 <_sch_tolower@@Base+0x58>
   587a8:	add	x3, x3, #0x2a8
   587ac:	cmp	w0, #0x0
   587b0:	mov	x4, x19
   587b4:	csel	x3, x3, x1, ne  // ne = any
   587b8:	adrp	x1, 75000 <_sch_tolower@@Base+0x58>
   587bc:	add	x1, x1, #0x2b0
   587c0:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   587c4:	ldr	x0, [x0, #3840]
   587c8:	ldr	x0, [x0]
   587cc:	bl	35b80 <fprintf@plt>
   587d0:	mov	w0, #0x1                   	// #1
   587d4:	bl	35950 <xexit@plt>
   587d8:	mov	x0, #0x0                   	// #0
   587dc:	bl	35160 <sbrk@plt>
   587e0:	adrp	x5, a3000 <aarch64_operands@@Base+0x16bc0>
   587e4:	ldr	x5, [x5, #4008]
   587e8:	sub	x5, x0, x5
   587ec:	b	58790 <xmalloc_failed@@Base+0x28>

00000000000587f0 <xmalloc@@Base>:
   587f0:	stp	x29, x30, [sp, #-32]!
   587f4:	mov	x29, sp
   587f8:	str	x19, [sp, #16]
   587fc:	cmp	x0, #0x0
   58800:	csinc	x19, x0, xzr, ne  // ne = any
   58804:	mov	x0, x19
   58808:	bl	353e0 <malloc@plt>
   5880c:	cbz	x0, 5881c <xmalloc@@Base+0x2c>
   58810:	ldr	x19, [sp, #16]
   58814:	ldp	x29, x30, [sp], #32
   58818:	ret
   5881c:	mov	x0, x19
   58820:	bl	359a0 <xmalloc_failed@plt>

0000000000058824 <xcalloc@@Base>:
   58824:	stp	x29, x30, [sp, #-32]!
   58828:	mov	x29, sp
   5882c:	stp	x19, x20, [sp, #16]
   58830:	mov	x20, x0
   58834:	mov	x19, x1
   58838:	cmp	x0, #0x0
   5883c:	ccmp	x1, #0x0, #0x4, ne  // ne = any
   58840:	b.ne	5884c <xcalloc@@Base+0x28>  // b.any
   58844:	mov	x19, #0x1                   	// #1
   58848:	mov	x20, x19
   5884c:	mov	x1, x19
   58850:	mov	x0, x20
   58854:	bl	35520 <calloc@plt>
   58858:	cbz	x0, 58868 <xcalloc@@Base+0x44>
   5885c:	ldp	x19, x20, [sp, #16]
   58860:	ldp	x29, x30, [sp], #32
   58864:	ret
   58868:	mul	x0, x20, x19
   5886c:	bl	359a0 <xmalloc_failed@plt>

0000000000058870 <xrealloc@@Base>:
   58870:	stp	x29, x30, [sp, #-32]!
   58874:	mov	x29, sp
   58878:	str	x19, [sp, #16]
   5887c:	cmp	x1, #0x0
   58880:	csinc	x19, x1, xzr, ne  // ne = any
   58884:	cbz	x0, 588a0 <xrealloc@@Base+0x30>
   58888:	mov	x1, x19
   5888c:	bl	35590 <realloc@plt>
   58890:	cbz	x0, 588ac <xrealloc@@Base+0x3c>
   58894:	ldr	x19, [sp, #16]
   58898:	ldp	x29, x30, [sp], #32
   5889c:	ret
   588a0:	mov	x0, x19
   588a4:	bl	353e0 <malloc@plt>
   588a8:	b	58890 <xrealloc@@Base+0x20>
   588ac:	mov	x0, x19
   588b0:	bl	359a0 <xmalloc_failed@plt>

00000000000588b4 <xexit@@Base>:
   588b4:	stp	x29, x30, [sp, #-32]!
   588b8:	mov	x29, sp
   588bc:	str	x19, [sp, #16]
   588c0:	mov	w19, w0
   588c4:	adrp	x0, a3000 <aarch64_operands@@Base+0x16bc0>
   588c8:	ldr	x0, [x0, #3984]
   588cc:	ldr	x0, [x0]
   588d0:	cbz	x0, 588d8 <xexit@@Base+0x24>
   588d4:	blr	x0
   588d8:	mov	w0, w19
   588dc:	bl	350f0 <exit@plt>

Disassembly of section .fini:

00000000000588e0 <.fini>:
   588e0:	stp	x29, x30, [sp, #-16]!
   588e4:	mov	x29, sp
   588e8:	ldp	x29, x30, [sp], #16
   588ec:	ret
