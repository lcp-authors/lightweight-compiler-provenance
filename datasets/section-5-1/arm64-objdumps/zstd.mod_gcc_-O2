
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//zstd.mod_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <FSE_versionNumber>:
       0:	mov	w0, #0x384                 	// #900
       4:	ret

0000000000000008 <FSE_isError>:
       8:	cmn	x0, #0x78
       c:	cset	w0, hi  // hi = pmore
      10:	ret
      14:	nop

0000000000000018 <FSE_getErrorName>:
      18:	cmn	x0, #0x78
      1c:	csneg	w0, wzr, w0, ls  // ls = plast
      20:	b	558 <ERR_getErrorString>
      24:	nop

0000000000000028 <HUF_isError>:
      28:	cmn	x0, #0x78
      2c:	cset	w0, hi  // hi = pmore
      30:	ret
      34:	nop

0000000000000038 <HUF_getErrorName>:
      38:	b	18 <FSE_getErrorName>
      3c:	nop

0000000000000040 <FSE_readNCount>:
      40:	stp	x29, x30, [sp, #-80]!
      44:	cmp	x4, #0x3
      48:	mov	x29, sp
      4c:	stp	x19, x20, [sp, #16]
      50:	mov	x20, x1
      54:	mov	x19, x3
      58:	stp	x21, x22, [sp, #32]
      5c:	mov	x22, x4
      60:	mov	x21, x0
      64:	str	x23, [sp, #48]
      68:	mov	x23, x2
      6c:	b.hi	d0 <FSE_readNCount+0x90>  // b.pmore
      70:	mov	x2, #0x4                   	// #4
      74:	mov	w1, #0x0                   	// #0
      78:	add	x0, sp, #0x48
      7c:	bl	0 <grub_memset>
      80:	mov	x2, x22
      84:	mov	x1, x19
      88:	add	x0, sp, #0x48
      8c:	bl	0 <grub_memmove>
      90:	mov	x2, x23
      94:	mov	x1, x20
      98:	add	x3, sp, #0x48
      9c:	mov	x0, x21
      a0:	mov	x4, #0x4                   	// #4
      a4:	bl	40 <FSE_readNCount>
      a8:	cmp	x22, x0
      ac:	mov	x2, #0xffffffffffffff88    	// #-120
      b0:	ccmp	x0, x2, #0x2, cc  // cc = lo, ul, last
      b4:	mov	x1, #0xffffffffffffffec    	// #-20
      b8:	csel	x0, x0, x1, hi  // hi = pmore
      bc:	ldp	x19, x20, [sp, #16]
      c0:	ldp	x21, x22, [sp, #32]
      c4:	ldr	x23, [sp, #48]
      c8:	ldp	x29, x30, [sp], #80
      cc:	ret
      d0:	ldr	w2, [x20]
      d4:	mov	w1, #0x0                   	// #0
      d8:	add	w2, w2, #0x1
      dc:	lsl	x2, x2, #1
      e0:	bl	0 <grub_memset>
      e4:	ldr	w4, [x19]
      e8:	mov	x0, #0xffffffffffffffd4    	// #-44
      ec:	and	w5, w4, #0xf
      f0:	add	w1, w5, #0x5
      f4:	cmp	w1, #0xf
      f8:	b.hi	bc <FSE_readNCount+0x7c>  // b.pmore
      fc:	mov	w2, #0x1                   	// #1
     100:	lsr	w4, w4, #4
     104:	lsl	w2, w2, w1
     108:	add	w7, w2, #0x1
     10c:	lsl	w11, w2, #1
     110:	sub	w6, w2, #0x1
     114:	sub	w11, w11, #0x1
     118:	str	w1, [x23]
     11c:	add	x0, x19, x22
     120:	and	w6, w6, w4
     124:	sub	w16, w11, w7
     128:	sub	x12, x0, #0x7
     12c:	sub	x13, x0, #0x4
     130:	ldr	w3, [x20]
     134:	add	w5, w5, #0x6
     138:	sub	x0, x0, #0x5
     13c:	mov	x9, x19
     140:	add	x14, x21, #0x2
     144:	cmp	w6, w16
     148:	mov	w10, #0x0                   	// #0
     14c:	mov	w8, #0x4                   	// #4
     150:	mov	w15, #0xfffffffe            	// #-2
     154:	mov	w1, #0xffff                	// #65535
     158:	b.cs	1f8 <FSE_readNCount+0x1b8>  // b.hs, b.nlast
     15c:	nop
     160:	sub	w11, w5, #0x1
     164:	mov	w4, w6
     168:	add	w8, w11, w8
     16c:	subs	w6, w4, #0x1
     170:	strh	w6, [x21, w10, uxtw #1]
     174:	cneg	w4, w6, mi  // mi = first
     178:	add	w16, w10, #0x1
     17c:	sub	w7, w7, w4
     180:	cmp	w2, w7
     184:	b.le	198 <FSE_readNCount+0x158>
     188:	asr	w2, w2, #1
     18c:	sub	w5, w5, #0x1
     190:	cmp	w7, w2
     194:	b.lt	188 <FSE_readNCount+0x148>  // b.tstop
     198:	asr	w4, w8, #3
     19c:	cmp	x9, x12
     1a0:	add	x4, x9, w4, sxtw
     1a4:	b.ls	2e4 <FSE_readNCount+0x2a4>  // b.plast
     1a8:	cmp	x13, x4
     1ac:	b.cs	2e4 <FSE_readNCount+0x2a4>  // b.hs, b.nlast
     1b0:	sub	x4, x13, x9
     1b4:	mov	x9, x13
     1b8:	cmp	w7, #0x1
     1bc:	sub	w8, w8, w4, lsl #3
     1c0:	ccmp	w16, w3, #0x2, gt
     1c4:	ldr	w4, [x9]
     1c8:	and	w11, w8, #0x1f
     1cc:	lsr	w4, w4, w11
     1d0:	b.hi	304 <FSE_readNCount+0x2c4>  // b.pmore
     1d4:	cbz	w6, 210 <FSE_readNCount+0x1d0>
     1d8:	mov	w10, w16
     1dc:	lsl	w11, w2, #1
     1e0:	sub	w6, w2, #0x1
     1e4:	sub	w11, w11, #0x1
     1e8:	and	w6, w6, w4
     1ec:	sub	w16, w11, w7
     1f0:	cmp	w6, w16
     1f4:	b.cc	160 <FSE_readNCount+0x120>  // b.lo, b.ul, b.last
     1f8:	and	w4, w11, w4
     1fc:	add	w8, w8, w5
     200:	sub	w16, w4, w16
     204:	cmp	w2, w4
     208:	csel	w4, w16, w4, le
     20c:	b	16c <FSE_readNCount+0x12c>
     210:	mov	w6, w16
     214:	cmp	w1, w4, uxth
     218:	b.eq	238 <FSE_readNCount+0x1f8>  // b.none
     21c:	b	258 <FSE_readNCount+0x218>
     220:	ldur	w4, [x9, #2]
     224:	add	x9, x9, #0x2
     228:	lsr	w4, w4, w8
     22c:	and	w11, w4, #0xffff
     230:	cmp	w11, w1
     234:	b.ne	258 <FSE_readNCount+0x218>  // b.any
     238:	lsr	w4, w4, #16
     23c:	add	w6, w6, #0x18
     240:	mov	w11, w4
     244:	cmp	x9, x0
     248:	b.cc	220 <FSE_readNCount+0x1e0>  // b.lo, b.ul, b.last
     24c:	add	w8, w8, #0x10
     250:	cmp	w11, w1
     254:	b.eq	238 <FSE_readNCount+0x1f8>  // b.none
     258:	and	w11, w4, #0x3
     25c:	cmp	w11, #0x3
     260:	b.ne	280 <FSE_readNCount+0x240>  // b.any
     264:	nop
     268:	lsr	w4, w4, #2
     26c:	add	w6, w6, #0x3
     270:	and	w11, w4, #0x3
     274:	add	w8, w8, #0x2
     278:	cmp	w11, #0x3
     27c:	b.eq	268 <FSE_readNCount+0x228>  // b.none
     280:	add	w6, w11, w6
     284:	add	w8, w8, #0x2
     288:	cmp	w6, w3
     28c:	b.hi	360 <FSE_readNCount+0x320>  // b.pmore
     290:	cmp	w6, w16
     294:	b.ls	358 <FSE_readNCount+0x318>  // b.plast
     298:	sub	w10, w15, w10
     29c:	add	x11, x21, w16, uxtw #1
     2a0:	add	w10, w10, w6
     2a4:	add	x10, x10, w16, uxtw
     2a8:	add	x10, x14, x10, lsl #1
     2ac:	nop
     2b0:	strh	wzr, [x11], #2
     2b4:	cmp	x10, x11
     2b8:	b.ne	2b0 <FSE_readNCount+0x270>  // b.any
     2bc:	asr	w10, w8, #3
     2c0:	cmp	x9, x12
     2c4:	add	x10, x9, w10, sxtw
     2c8:	b.ls	33c <FSE_readNCount+0x2fc>  // b.plast
     2cc:	cmp	x10, x13
     2d0:	b.ls	33c <FSE_readNCount+0x2fc>  // b.plast
     2d4:	mov	w16, w6
     2d8:	lsr	w4, w4, #2
     2dc:	mov	w10, w16
     2e0:	b	1dc <FSE_readNCount+0x19c>
     2e4:	mov	x9, x4
     2e8:	and	w8, w8, #0x7
     2ec:	mov	w11, w8
     2f0:	cmp	w7, #0x1
     2f4:	ccmp	w16, w3, #0x2, gt
     2f8:	ldr	w4, [x9]
     2fc:	lsr	w4, w4, w11
     300:	b.ls	1d4 <FSE_readNCount+0x194>  // b.plast
     304:	cmp	w8, #0x20
     308:	mov	x0, #0xffffffffffffffec    	// #-20
     30c:	ccmp	w7, #0x1, #0x0, le
     310:	b.ne	bc <FSE_readNCount+0x7c>  // b.any
     314:	add	w0, w8, #0x7
     318:	str	w10, [x20]
     31c:	ldp	x21, x22, [sp, #32]
     320:	asr	w0, w0, #3
     324:	ldr	x23, [sp, #48]
     328:	add	x0, x9, w0, sxtw
     32c:	sub	x0, x0, x19
     330:	ldp	x19, x20, [sp, #16]
     334:	ldp	x29, x30, [sp], #80
     338:	ret
     33c:	ldr	w4, [x10]
     340:	and	w8, w8, #0x7
     344:	mov	w16, w6
     348:	mov	x9, x10
     34c:	mov	w10, w16
     350:	lsr	w4, w4, w8
     354:	b	1dc <FSE_readNCount+0x19c>
     358:	mov	w6, w16
     35c:	b	2bc <FSE_readNCount+0x27c>
     360:	mov	x0, #0xffffffffffffffd0    	// #-48
     364:	b	bc <FSE_readNCount+0x7c>

0000000000000368 <HUF_readStats>:
     368:	stp	x29, x30, [sp, #-336]!
     36c:	mov	x29, sp
     370:	stp	x21, x22, [sp, #32]
     374:	mov	x22, #0xffffffffffffffb8    	// #-72
     378:	cbz	x6, 460 <HUF_readStats+0xf8>
     37c:	stp	x19, x20, [sp, #16]
     380:	mov	x20, x3
     384:	mov	x21, x2
     388:	stp	x23, x24, [sp, #48]
     38c:	mov	x19, x0
     390:	mov	x23, x4
     394:	ldrb	w3, [x5]
     398:	cmp	x3, #0x7f
     39c:	b.ls	470 <HUF_readStats+0x108>  // b.plast
     3a0:	sub	x0, x3, #0x7e
     3a4:	sub	x22, x3, #0x7f
     3a8:	lsr	x3, x0, #1
     3ac:	add	x24, x3, #0x1
     3b0:	cmp	x24, x6
     3b4:	b.hi	548 <HUF_readStats+0x1e0>  // b.pmore
     3b8:	cmp	x1, x22
     3bc:	mov	x2, #0x0                   	// #0
     3c0:	mov	w1, #0x0                   	// #0
     3c4:	b.ls	454 <HUF_readStats+0xec>  // b.plast
     3c8:	lsr	w6, w1, #1
     3cc:	add	w3, w1, #0x1
     3d0:	add	x6, x6, #0x1
     3d4:	add	w1, w1, #0x2
     3d8:	cmp	x22, w1, uxtw
     3dc:	ldrb	w0, [x5, x6]
     3e0:	lsr	w0, w0, #4
     3e4:	strb	w0, [x19, x2]
     3e8:	mov	w2, w1
     3ec:	ldrb	w0, [x5, x6]
     3f0:	and	w0, w0, #0xf
     3f4:	strb	w0, [x19, w3, uxtw]
     3f8:	b.hi	3c8 <HUF_readStats+0x60>  // b.pmore
     3fc:	mov	x0, x21
     400:	mov	x2, #0x34                  	// #52
     404:	mov	w1, #0x0                   	// #0
     408:	bl	0 <grub_memset>
     40c:	mov	w1, #0x0                   	// #0
     410:	mov	w0, #0x0                   	// #0
     414:	mov	x3, #0x0                   	// #0
     418:	mov	w4, #0x1                   	// #1
     41c:	b	444 <HUF_readStats+0xdc>
     420:	ldr	w5, [x21, x2, lsl #2]
     424:	cmp	x22, w1, uxtw
     428:	add	w5, w5, #0x1
     42c:	str	w5, [x21, x2, lsl #2]
     430:	ldrb	w5, [x19, x3]
     434:	mov	w3, w1
     438:	lsl	w5, w4, w5
     43c:	add	w0, w0, w5, asr #1
     440:	b.ls	4d0 <HUF_readStats+0x168>  // b.plast
     444:	ldrb	w2, [x19, x3]
     448:	add	w1, w1, #0x1
     44c:	cmp	w2, #0xb
     450:	b.ls	420 <HUF_readStats+0xb8>  // b.plast
     454:	ldp	x19, x20, [sp, #16]
     458:	mov	x22, #0xffffffffffffffec    	// #-20
     45c:	ldp	x23, x24, [sp, #48]
     460:	mov	x0, x22
     464:	ldp	x21, x22, [sp, #32]
     468:	ldp	x29, x30, [sp], #336
     46c:	ret
     470:	add	x24, x3, #0x1
     474:	mov	x22, #0xffffffffffffffb8    	// #-72
     478:	cmp	x24, x6
     47c:	b.ls	498 <HUF_readStats+0x130>  // b.plast
     480:	mov	x0, x22
     484:	ldp	x19, x20, [sp, #16]
     488:	ldp	x21, x22, [sp, #32]
     48c:	ldp	x23, x24, [sp, #48]
     490:	ldp	x29, x30, [sp], #336
     494:	ret
     498:	add	x2, x5, #0x1
     49c:	sub	x1, x1, #0x1
     4a0:	add	x4, sp, #0x48
     4a4:	mov	w5, #0x6                   	// #6
     4a8:	bl	1338 <FSE_decompress_wksp>
     4ac:	mov	x22, x0
     4b0:	cmn	x0, #0x78
     4b4:	b.hi	480 <HUF_readStats+0x118>  // b.pmore
     4b8:	mov	x0, x21
     4bc:	mov	x2, #0x34                  	// #52
     4c0:	mov	w1, #0x0                   	// #0
     4c4:	bl	0 <grub_memset>
     4c8:	cbnz	x22, 40c <HUF_readStats+0xa4>
     4cc:	b	454 <HUF_readStats+0xec>
     4d0:	cbz	w0, 454 <HUF_readStats+0xec>
     4d4:	clz	w2, w0
     4d8:	mov	w1, #0x1f                  	// #31
     4dc:	sub	w2, w1, w2
     4e0:	add	w2, w2, #0x1
     4e4:	cmp	w2, #0xc
     4e8:	b.hi	454 <HUF_readStats+0xec>  // b.pmore
     4ec:	lsl	w3, w4, w2
     4f0:	sub	w0, w3, w0
     4f4:	clz	w3, w0
     4f8:	str	w2, [x23]
     4fc:	sub	w1, w1, w3
     500:	lsl	w4, w4, w1
     504:	cmp	w0, w4
     508:	b.ne	454 <HUF_readStats+0xec>  // b.any
     50c:	add	w0, w1, #0x1
     510:	strb	w0, [x19, x22]
     514:	ldr	w1, [x21, x0, lsl #2]
     518:	add	w1, w1, #0x1
     51c:	str	w1, [x21, x0, lsl #2]
     520:	ldr	w0, [x21, #4]
     524:	cmp	w0, #0x1
     528:	b.ls	454 <HUF_readStats+0xec>  // b.plast
     52c:	tbnz	w0, #0, 454 <HUF_readStats+0xec>
     530:	add	w0, w22, #0x1
     534:	mov	x22, x24
     538:	ldp	x23, x24, [sp, #48]
     53c:	str	w0, [x20]
     540:	ldp	x19, x20, [sp, #16]
     544:	b	460 <HUF_readStats+0xf8>
     548:	mov	x22, #0xffffffffffffffb8    	// #-72
     54c:	ldp	x19, x20, [sp, #16]
     550:	ldp	x23, x24, [sp, #48]
     554:	b	460 <HUF_readStats+0xf8>

0000000000000558 <ERR_getErrorString>:
     558:	cmp	w0, #0x66
     55c:	b.hi	570 <ERR_getErrorString+0x18>  // b.pmore
     560:	adrp	x1, 0 <FSE_versionNumber>
     564:	ldr	x1, [x1]
     568:	ldr	x0, [x1, w0, uxtw #3]
     56c:	ret
     570:	adrp	x0, 0 <FSE_versionNumber>
     574:	ldr	x0, [x0]
     578:	ret
     57c:	nop
	...

0000000000000590 <FSE_createDTable>:
     590:	mov	w2, #0xf                   	// #15
     594:	cmp	w0, w2
     598:	csel	w0, w0, w2, ls  // ls = plast
     59c:	mov	w1, #0x1                   	// #1
     5a0:	lsl	w0, w1, w0
     5a4:	add	w0, w0, w1
     5a8:	sbfiz	x0, x0, #2, #32
     5ac:	b	0 <grub_malloc>

00000000000005b0 <FSE_freeDTable>:
     5b0:	b	0 <grub_free>
     5b4:	nop

00000000000005b8 <FSE_buildDTable>:
     5b8:	cmp	w2, #0xff
     5bc:	b.hi	7a8 <FSE_buildDTable+0x1f0>  // b.pmore
     5c0:	sub	sp, sp, #0x270
     5c4:	cmp	w3, #0xc
     5c8:	stp	x29, x30, [sp]
     5cc:	mov	x29, sp
     5d0:	stp	x23, x24, [sp, #48]
     5d4:	mov	x24, x0
     5d8:	mov	w23, w3
     5dc:	mov	x0, #0xffffffffffffffd4    	// #-44
     5e0:	b.hi	798 <FSE_buildDTable+0x1e0>  // b.pmore
     5e4:	sub	w3, w3, #0x1
     5e8:	str	x27, [sp, #80]
     5ec:	mov	x27, x1
     5f0:	mov	w1, #0x1                   	// #1
     5f4:	lsl	w3, w1, w3
     5f8:	stp	x19, x20, [sp, #16]
     5fc:	mov	w5, w1
     600:	stp	x21, x22, [sp, #32]
     604:	add	x22, sp, #0x70
     608:	add	x21, x24, #0x4
     60c:	stp	x25, x26, [sp, #64]
     610:	mov	w25, w2
     614:	lsl	w26, w1, w23
     618:	sub	w20, w26, #0x1
     61c:	mov	x2, x22
     620:	mov	w7, w25
     624:	mov	w19, w20
     628:	sxth	w3, w3
     62c:	mov	w8, w1
     630:	mov	w9, w1
     634:	mov	x0, #0x0                   	// #0
     638:	mov	w6, #0x0                   	// #0
     63c:	strh	w23, [sp, #104]
     640:	strh	w1, [sp, #106]
     644:	b	668 <FSE_buildDTable+0xb0>
     648:	strh	w1, [x2]
     64c:	cmp	w1, w3
     650:	csel	w6, w6, w8, lt  // lt = tstop
     654:	csel	w5, w5, wzr, lt  // lt = tstop
     658:	add	x2, x2, #0x2
     65c:	cmp	x7, x0
     660:	add	x0, x0, #0x1
     664:	b.eq	694 <FSE_buildDTable+0xdc>  // b.none
     668:	ldrsh	w1, [x27, x0, lsl #1]
     66c:	cmn	w1, #0x1
     670:	b.ne	648 <FSE_buildDTable+0x90>  // b.any
     674:	add	x1, x21, w19, uxtw #2
     678:	strh	w9, [x2]
     67c:	cmp	x7, x0
     680:	sub	w19, w19, #0x1
     684:	add	x2, x2, #0x2
     688:	strb	w0, [x1, #2]
     68c:	add	x0, x0, #0x1
     690:	b.ne	668 <FSE_buildDTable+0xb0>  // b.any
     694:	cbz	w6, 69c <FSE_buildDTable+0xe4>
     698:	strh	w5, [sp, #106]
     69c:	add	x1, sp, #0x68
     6a0:	mov	x0, x24
     6a4:	mov	x2, #0x4                   	// #4
     6a8:	bl	0 <grub_memmove>
     6ac:	lsr	w0, w26, #3
     6b0:	mov	x4, x27
     6b4:	add	w0, w0, w26, lsr #1
     6b8:	mov	w1, #0x0                   	// #0
     6bc:	add	w0, w0, #0x3
     6c0:	mov	w6, #0x0                   	// #0
     6c4:	nop
     6c8:	ldrsh	w3, [x4]
     6cc:	and	w5, w6, #0xff
     6d0:	mov	w2, #0x0                   	// #0
     6d4:	cmp	w3, #0x0
     6d8:	b.le	718 <FSE_buildDTable+0x160>
     6dc:	nop
     6e0:	add	x3, x21, w1, uxtw #2
     6e4:	add	w1, w0, w1
     6e8:	and	w1, w1, w20
     6ec:	cmp	w19, w1
     6f0:	strb	w5, [x3, #2]
     6f4:	b.cs	708 <FSE_buildDTable+0x150>  // b.hs, b.nlast
     6f8:	add	w1, w0, w1
     6fc:	and	w1, w1, w20
     700:	cmp	w19, w1
     704:	b.cc	6f8 <FSE_buildDTable+0x140>  // b.lo, b.ul, b.last
     708:	ldrsh	w3, [x4]
     70c:	add	w2, w2, #0x1
     710:	cmp	w3, w2
     714:	b.gt	6e0 <FSE_buildDTable+0x128>
     718:	cmp	w25, w6
     71c:	add	x4, x4, #0x2
     720:	add	w6, w6, #0x1
     724:	b.ne	6c8 <FSE_buildDTable+0x110>  // b.any
     728:	mov	x0, #0xffffffffffffffff    	// #-1
     72c:	cbnz	w1, 7b0 <FSE_buildDTable+0x1f8>
     730:	add	x24, x24, #0x8
     734:	and	w23, w23, #0xff
     738:	add	x20, x24, w20, uxtw #2
     73c:	and	w26, w26, #0xffff
     740:	mov	w4, #0x1f                  	// #31
     744:	nop
     748:	ldrb	w2, [x21, #2]
     74c:	lsl	x2, x2, #1
     750:	ldrh	w1, [x22, x2]
     754:	clz	w0, w1
     758:	add	w3, w1, #0x1
     75c:	sub	w0, w4, w0
     760:	strh	w3, [x22, x2]
     764:	sub	w0, w23, w0
     768:	and	w0, w0, #0xff
     76c:	strb	w0, [x21, #3]
     770:	lsl	w0, w1, w0
     774:	sub	w0, w0, w26
     778:	strh	w0, [x21], #4
     77c:	cmp	x20, x21
     780:	b.ne	748 <FSE_buildDTable+0x190>  // b.any
     784:	ldp	x19, x20, [sp, #16]
     788:	mov	x0, #0x0                   	// #0
     78c:	ldp	x21, x22, [sp, #32]
     790:	ldp	x25, x26, [sp, #64]
     794:	ldr	x27, [sp, #80]
     798:	ldp	x29, x30, [sp]
     79c:	ldp	x23, x24, [sp, #48]
     7a0:	add	sp, sp, #0x270
     7a4:	ret
     7a8:	mov	x0, #0xffffffffffffffd2    	// #-46
     7ac:	ret
     7b0:	ldp	x29, x30, [sp]
     7b4:	ldp	x19, x20, [sp, #16]
     7b8:	ldp	x21, x22, [sp, #32]
     7bc:	ldp	x23, x24, [sp, #48]
     7c0:	ldp	x25, x26, [sp, #64]
     7c4:	ldr	x27, [sp, #80]
     7c8:	add	sp, sp, #0x270
     7cc:	ret

00000000000007d0 <FSE_buildDTable_rle>:
     7d0:	mov	x2, x0
     7d4:	mov	x0, #0x0                   	// #0
     7d8:	str	wzr, [x2]
     7dc:	strh	wzr, [x2, #4]
     7e0:	strb	w1, [x2, #6]
     7e4:	strb	wzr, [x2, #7]
     7e8:	ret
     7ec:	nop

00000000000007f0 <FSE_buildDTable_raw>:
     7f0:	mov	w4, #0x1                   	// #1
     7f4:	lsl	w3, w4, w1
     7f8:	cbz	w1, 83c <FSE_buildDTable_raw+0x4c>
     7fc:	strh	w1, [x0]
     800:	and	w2, w1, #0xff
     804:	strh	w4, [x0, #2]
     808:	mov	w1, #0x0                   	// #0
     80c:	add	x0, x0, #0x4
     810:	cbz	w3, 834 <FSE_buildDTable_raw+0x44>
     814:	nop
     818:	strh	wzr, [x0]
     81c:	add	x0, x0, #0x4
     820:	sturb	w1, [x0, #-2]
     824:	add	w1, w1, #0x1
     828:	sturb	w2, [x0, #-1]
     82c:	cmp	w3, w1
     830:	b.ne	818 <FSE_buildDTable_raw+0x28>  // b.any
     834:	mov	x0, #0x0                   	// #0
     838:	ret
     83c:	mov	x0, #0xffffffffffffffff    	// #-1
     840:	ret
     844:	nop

0000000000000848 <FSE_decompress_usingDTable>:
     848:	stp	x29, x30, [sp, #-64]!
     84c:	add	x1, x0, x1
     850:	mov	x10, x0
     854:	mov	x29, sp
     858:	ldrh	w0, [x4, #2]
     85c:	mov	x6, x4
     860:	sub	x13, x1, #0x3
     864:	cbnz	w0, b9c <FSE_decompress_usingDTable+0x354>
     868:	cbz	x3, 1238 <FSE_decompress_usingDTable+0x9f0>
     86c:	add	x0, x2, x3
     870:	add	x12, x2, #0x8
     874:	stp	x2, x12, [sp, #48]
     878:	cmp	x3, #0x7
     87c:	ldurb	w8, [x0, #-1]
     880:	b.hi	b10 <FSE_decompress_usingDTable+0x2c8>  // b.pmore
     884:	ldrb	w0, [x2]
     888:	cmp	x3, #0x5
     88c:	str	x0, [sp, #24]
     890:	str	x2, [sp, #40]
     894:	b.eq	b7c <FSE_decompress_usingDTable+0x334>  // b.none
     898:	b.hi	b64 <FSE_decompress_usingDTable+0x31c>  // b.pmore
     89c:	cmp	x3, #0x3
     8a0:	b.eq	8b8 <FSE_decompress_usingDTable+0x70>  // b.none
     8a4:	cmp	x3, #0x4
     8a8:	b.ne	b90 <FSE_decompress_usingDTable+0x348>  // b.any
     8ac:	ldrb	w4, [x2, #3]
     8b0:	add	x0, x0, x4, lsl #24
     8b4:	nop
     8b8:	ldrb	w4, [x2, #2]
     8bc:	add	x0, x0, x4, lsl #16
     8c0:	ldrb	w4, [x2, #1]
     8c4:	add	x0, x0, x4, lsl #8
     8c8:	str	x0, [sp, #24]
     8cc:	mov	x0, #0xffffffffffffffec    	// #-20
     8d0:	cbz	w8, b5c <FSE_decompress_usingDTable+0x314>
     8d4:	mov	w7, #0x9                   	// #9
     8d8:	sub	w3, w7, w3
     8dc:	clz	w8, w8
     8e0:	add	w3, w8, w3, lsl #3
     8e4:	sub	w8, w3, #0x1f
     8e8:	ldr	x7, [sp, #24]
     8ec:	and	w0, w8, #0x3f
     8f0:	ldrh	w9, [x6]
     8f4:	lsl	x4, x7, x0
     8f8:	lsr	x4, x4, #1
     8fc:	add	w3, w9, w8
     900:	mvn	w5, w9
     904:	str	w3, [sp, #32]
     908:	cmp	w3, #0x40
     90c:	lsr	x4, x4, x5
     910:	and	w5, w5, #0x3f
     914:	b.hi	1274 <FSE_decompress_usingDTable+0xa2c>  // b.pmore
     918:	ldr	x0, [sp, #40]
     91c:	cmp	x12, x0
     920:	b.ls	e50 <FSE_decompress_usingDTable+0x608>  // b.plast
     924:	and	w11, w3, #0x3f
     928:	cmp	x2, x0
     92c:	b.eq	964 <FSE_decompress_usingDTable+0x11c>  // b.none
     930:	lsr	w8, w3, #3
     934:	lsr	w7, w3, #3
     938:	sub	x8, x0, x8
     93c:	cmp	x2, x8
     940:	b.ls	950 <FSE_decompress_usingDTable+0x108>  // b.plast
     944:	sub	x8, x0, x2
     948:	mov	w7, w8
     94c:	sub	x8, x0, w8, uxtw
     950:	sub	w3, w3, w7, lsl #3
     954:	and	w11, w3, #0x3f
     958:	ldr	x7, [x8]
     95c:	str	x7, [sp, #24]
     960:	str	x8, [sp, #40]
     964:	lsl	x7, x7, x11
     968:	add	w8, w9, w3
     96c:	lsr	x7, x7, #1
     970:	str	w8, [sp, #32]
     974:	cmp	w8, #0x40
     978:	add	x6, x6, #0x4
     97c:	lsr	x5, x7, x5
     980:	b.hi	132c <FSE_decompress_usingDTable+0xae4>  // b.pmore
     984:	ldr	x3, [sp, #40]
     988:	cmp	x12, x3
     98c:	b.ls	1254 <FSE_decompress_usingDTable+0xa0c>  // b.plast
     990:	cmp	x2, x3
     994:	b.eq	1294 <FSE_decompress_usingDTable+0xa4c>  // b.none
     998:	lsr	w0, w8, #3
     99c:	lsr	w7, w8, #3
     9a0:	sub	x0, x3, x0
     9a4:	cmp	x2, x0
     9a8:	b.ls	9b8 <FSE_decompress_usingDTable+0x170>  // b.plast
     9ac:	sub	x0, x3, x2
     9b0:	mov	w7, w0
     9b4:	sub	x0, x3, w0, uxtw
     9b8:	ldr	x3, [x0]
     9bc:	sub	w8, w8, w7, lsl #3
     9c0:	str	x3, [sp, #24]
     9c4:	cmp	w8, #0x40
     9c8:	str	w8, [sp, #32]
     9cc:	str	x0, [sp, #40]
     9d0:	b.hi	132c <FSE_decompress_usingDTable+0xae4>  // b.pmore
     9d4:	mov	x7, x10
     9d8:	mov	w14, #0x0                   	// #0
     9dc:	mov	w11, #0x3f                  	// #63
     9e0:	b	ae4 <FSE_decompress_usingDTable+0x29c>
     9e4:	cmp	x2, x0
     9e8:	b.eq	1020 <FSE_decompress_usingDTable+0x7d8>  // b.none
     9ec:	cmp	x2, x9
     9f0:	lsr	w3, w8, #3
     9f4:	b.hi	ffc <FSE_decompress_usingDTable+0x7b4>  // b.pmore
     9f8:	cmp	x7, x13
     9fc:	sub	w3, w8, w3, lsl #3
     a00:	cset	w14, cc  // cc = lo, ul, last
     a04:	mov	x0, x9
     a08:	ldr	x8, [x9]
     a0c:	str	x8, [sp, #24]
     a10:	lsl	x9, x4, #2
     a14:	lsl	x16, x5, #2
     a18:	add	x8, x6, x9
     a1c:	add	x17, x6, x16
     a20:	cbz	w14, 1014 <FSE_decompress_usingDTable+0x7cc>
     a24:	ldr	x5, [sp, #24]
     a28:	add	x7, x7, #0x4
     a2c:	ldrb	w4, [x8, #3]
     a30:	ldrb	w15, [x8, #2]
     a34:	ldrh	w8, [x6, x9]
     a38:	lsl	x9, x5, x3
     a3c:	sturb	w15, [x7, #-4]
     a40:	add	w3, w3, w4
     a44:	lsr	x9, x9, #1
     a48:	sub	w4, w11, w4
     a4c:	ldrb	w15, [x17, #3]
     a50:	lsr	x9, x9, x4
     a54:	add	x9, x9, x8
     a58:	lsl	x8, x5, x3
     a5c:	ldrh	w18, [x6, x16]
     a60:	sub	w4, w11, w15
     a64:	lsr	x8, x8, #1
     a68:	lsl	x9, x9, #2
     a6c:	ldrb	w16, [x17, #2]
     a70:	lsr	x8, x8, x4
     a74:	add	x4, x6, x9
     a78:	add	x8, x8, x18
     a7c:	sturb	w16, [x7, #-3]
     a80:	add	w3, w3, w15
     a84:	lsl	x8, x8, #2
     a88:	ldrb	w15, [x4, #3]
     a8c:	add	x17, x6, x8
     a90:	ldrb	w4, [x4, #2]
     a94:	ldrh	w30, [x6, x9]
     a98:	add	w16, w3, w15
     a9c:	sturb	w4, [x7, #-2]
     aa0:	lsl	x4, x5, x3
     aa4:	lsl	x5, x5, x16
     aa8:	sub	w15, w11, w15
     aac:	ldrb	w9, [x17, #3]
     ab0:	lsr	x4, x4, #1
     ab4:	ldrb	w3, [x17, #2]
     ab8:	lsr	x5, x5, #1
     abc:	ldrh	w17, [x6, x8]
     ac0:	sub	w18, w11, w9
     ac4:	sturb	w3, [x7, #-1]
     ac8:	add	w8, w16, w9
     acc:	lsr	x4, x4, x15
     ad0:	cmp	w8, #0x40
     ad4:	lsr	x5, x5, x18
     ad8:	add	x4, x4, x30
     adc:	add	x5, x5, x17
     ae0:	b.hi	e70 <FSE_decompress_usingDTable+0x628>  // b.pmore
     ae4:	lsr	w3, w8, #3
     ae8:	cmp	x0, x12
     aec:	sub	x9, x0, x3
     af0:	b.cc	9e4 <FSE_decompress_usingDTable+0x19c>  // b.lo, b.ul, b.last
     af4:	cmp	x7, x13
     af8:	and	w3, w8, #0x7
     afc:	ldr	x8, [x9]
     b00:	mov	x0, x9
     b04:	cset	w14, cc  // cc = lo, ul, last
     b08:	str	x8, [sp, #24]
     b0c:	b	a10 <FSE_decompress_usingDTable+0x1c8>
     b10:	sub	x4, x3, #0x8
     b14:	mov	x0, #0xffffffffffffffff    	// #-1
     b18:	add	x5, x2, x4
     b1c:	str	x5, [sp, #40]
     b20:	ldr	x7, [x2, x4]
     b24:	str	x7, [sp, #24]
     b28:	cbz	w8, b5c <FSE_decompress_usingDTable+0x314>
     b2c:	clz	w8, w8
     b30:	cmn	x3, #0x78
     b34:	sub	w8, w8, #0x17
     b38:	mov	x0, x3
     b3c:	b.hi	b5c <FSE_decompress_usingDTable+0x314>  // b.pmore
     b40:	mov	w0, w8
     b44:	b	8f0 <FSE_decompress_usingDTable+0xa8>
     b48:	add	x5, x6, x5, lsl #2
     b4c:	add	x0, x7, #0x2
     b50:	sub	x0, x0, x10
     b54:	ldrb	w1, [x5, #2]
     b58:	strb	w1, [x7, #1]
     b5c:	ldp	x29, x30, [sp], #64
     b60:	ret
     b64:	cmp	x3, #0x6
     b68:	b.eq	b74 <FSE_decompress_usingDTable+0x32c>  // b.none
     b6c:	ldrb	w4, [x2, #6]
     b70:	add	x0, x0, x4, lsl #48
     b74:	ldrb	w4, [x2, #5]
     b78:	add	x0, x0, x4, lsl #40
     b7c:	ldrb	w4, [x2, #4]
     b80:	add	x0, x0, x4, lsl #32
     b84:	ldrb	w4, [x2, #3]
     b88:	add	x0, x0, x4, lsl #24
     b8c:	b	8b8 <FSE_decompress_usingDTable+0x70>
     b90:	cmp	x3, #0x2
     b94:	b.eq	8c0 <FSE_decompress_usingDTable+0x78>  // b.none
     b98:	b	8cc <FSE_decompress_usingDTable+0x84>
     b9c:	cbz	x3, 1238 <FSE_decompress_usingDTable+0x9f0>
     ba0:	add	x0, x2, x3
     ba4:	add	x8, x2, #0x8
     ba8:	stp	x2, x8, [sp, #48]
     bac:	cmp	x3, #0x7
     bb0:	ldurb	w4, [x0, #-1]
     bb4:	b.hi	e18 <FSE_decompress_usingDTable+0x5d0>  // b.pmore
     bb8:	ldrb	w0, [x2]
     bbc:	cmp	x3, #0x5
     bc0:	str	x0, [sp, #24]
     bc4:	str	x2, [sp, #40]
     bc8:	b.eq	1220 <FSE_decompress_usingDTable+0x9d8>  // b.none
     bcc:	b.hi	1208 <FSE_decompress_usingDTable+0x9c0>  // b.pmore
     bd0:	cmp	x3, #0x3
     bd4:	b.eq	be8 <FSE_decompress_usingDTable+0x3a0>  // b.none
     bd8:	cmp	x3, #0x4
     bdc:	b.ne	122c <FSE_decompress_usingDTable+0x9e4>  // b.any
     be0:	ldrb	w5, [x2, #3]
     be4:	add	x0, x0, x5, lsl #24
     be8:	ldrb	w5, [x2, #2]
     bec:	add	x0, x0, x5, lsl #16
     bf0:	ldrb	w5, [x2, #1]
     bf4:	add	x0, x0, x5, lsl #8
     bf8:	str	x0, [sp, #24]
     bfc:	mov	x0, #0xffffffffffffffec    	// #-20
     c00:	cbz	w4, b5c <FSE_decompress_usingDTable+0x314>
     c04:	mov	w0, #0x9                   	// #9
     c08:	sub	w3, w0, w3
     c0c:	clz	w4, w4
     c10:	add	w3, w4, w3, lsl #3
     c14:	sub	w4, w3, #0x1f
     c18:	ldr	x5, [sp, #24]
     c1c:	and	w0, w4, #0x3f
     c20:	ldrh	w7, [x6]
     c24:	lsl	x9, x5, x0
     c28:	lsr	x9, x9, #1
     c2c:	add	w3, w7, w4
     c30:	mvn	w0, w7
     c34:	str	w3, [sp, #32]
     c38:	cmp	w3, #0x40
     c3c:	lsr	x9, x9, x0
     c40:	and	w0, w0, #0x3f
     c44:	b.hi	12fc <FSE_decompress_usingDTable+0xab4>  // b.pmore
     c48:	ldr	x4, [sp, #40]
     c4c:	cmp	x8, x4
     c50:	b.ls	12bc <FSE_decompress_usingDTable+0xa74>  // b.plast
     c54:	and	w12, w3, #0x3f
     c58:	cmp	x2, x4
     c5c:	b.eq	c88 <FSE_decompress_usingDTable+0x440>  // b.none
     c60:	lsr	w11, w3, #3
     c64:	lsr	w5, w3, #3
     c68:	sub	x11, x4, x11
     c6c:	cmp	x2, x11
     c70:	b.hi	12ac <FSE_decompress_usingDTable+0xa64>  // b.pmore
     c74:	sub	w3, w3, w5, lsl #3
     c78:	and	w12, w3, #0x3f
     c7c:	ldr	x5, [x11]
     c80:	str	x5, [sp, #24]
     c84:	str	x11, [sp, #40]
     c88:	lsl	x5, x5, x12
     c8c:	add	w3, w7, w3
     c90:	lsr	x5, x5, #1
     c94:	str	w3, [sp, #32]
     c98:	cmp	w3, #0x40
     c9c:	add	x6, x6, #0x4
     ca0:	lsr	x0, x5, x0
     ca4:	b.hi	1324 <FSE_decompress_usingDTable+0xadc>  // b.pmore
     ca8:	ldr	x4, [sp, #40]
     cac:	cmp	x8, x4
     cb0:	b.ls	12dc <FSE_decompress_usingDTable+0xa94>  // b.plast
     cb4:	cmp	x2, x4
     cb8:	b.eq	131c <FSE_decompress_usingDTable+0xad4>  // b.none
     cbc:	lsr	w11, w3, #3
     cc0:	lsr	w5, w3, #3
     cc4:	sub	x11, x4, x11
     cc8:	cmp	x2, x11
     ccc:	b.hi	129c <FSE_decompress_usingDTable+0xa54>  // b.pmore
     cd0:	ldr	x4, [x11]
     cd4:	sub	w3, w3, w5, lsl #3
     cd8:	str	x4, [sp, #24]
     cdc:	cmp	w3, #0x40
     ce0:	str	w3, [sp, #32]
     ce4:	str	x11, [sp, #40]
     ce8:	b.hi	1324 <FSE_decompress_usingDTable+0xadc>  // b.pmore
     cec:	mov	x4, x10
     cf0:	mov	w12, #0x0                   	// #0
     cf4:	b	de8 <FSE_decompress_usingDTable+0x5a0>
     cf8:	cmp	x2, x11
     cfc:	b.eq	11f8 <FSE_decompress_usingDTable+0x9b0>  // b.none
     d00:	cmp	x2, x5
     d04:	lsr	w14, w3, #3
     d08:	b.hi	11c8 <FSE_decompress_usingDTable+0x980>  // b.pmore
     d0c:	cmp	x4, x13
     d10:	sub	w14, w3, w14, lsl #3
     d14:	cset	w12, cc  // cc = lo, ul, last
     d18:	mov	x11, x5
     d1c:	ldr	x3, [x5]
     d20:	str	x3, [sp, #24]
     d24:	lsl	x7, x9, #2
     d28:	lsl	x16, x0, #2
     d2c:	add	x5, x6, x7
     d30:	add	x15, x6, x16
     d34:	cbz	w12, 11e0 <FSE_decompress_usingDTable+0x998>
     d38:	ldr	x0, [sp, #24]
     d3c:	add	x4, x4, #0x4
     d40:	ldrb	w3, [x5, #3]
     d44:	ldrb	w17, [x5, #2]
     d48:	neg	w9, w3
     d4c:	ldrh	w5, [x6, x7]
     d50:	sturb	w17, [x4, #-4]
     d54:	lsl	x7, x0, x14
     d58:	lsr	x7, x7, x9
     d5c:	add	w3, w3, w14
     d60:	ldrb	w9, [x15, #3]
     d64:	add	x7, x7, x5
     d68:	ldrh	w16, [x6, x16]
     d6c:	lsl	x5, x0, x3
     d70:	neg	w17, w9
     d74:	lsl	x7, x7, #2
     d78:	ldrb	w15, [x15, #2]
     d7c:	add	x14, x6, x7
     d80:	lsr	x5, x5, x17
     d84:	add	x5, x5, x16
     d88:	sturb	w15, [x4, #-3]
     d8c:	add	w3, w3, w9
     d90:	lsl	x5, x5, #2
     d94:	ldrb	w17, [x14, #2]
     d98:	add	x15, x6, x5
     d9c:	ldrh	w16, [x6, x7]
     da0:	lsl	x9, x0, x3
     da4:	ldrb	w7, [x14, #3]
     da8:	sturb	w17, [x4, #-2]
     dac:	add	w3, w3, w7
     db0:	neg	w7, w7
     db4:	ldrb	w14, [x15, #3]
     db8:	ldrb	w17, [x15, #2]
     dbc:	lsl	x0, x0, x3
     dc0:	ldrh	w5, [x6, x5]
     dc4:	neg	w15, w14
     dc8:	sturb	w17, [x4, #-1]
     dcc:	add	w3, w3, w14
     dd0:	lsr	x0, x0, x15
     dd4:	cmp	w3, #0x40
     dd8:	lsr	x7, x9, x7
     ddc:	add	x0, x0, x5
     de0:	add	x9, x7, x16
     de4:	b.hi	1030 <FSE_decompress_usingDTable+0x7e8>  // b.pmore
     de8:	lsr	w5, w3, #3
     dec:	cmp	x11, x8
     df0:	sub	x5, x11, x5
     df4:	b.cc	cf8 <FSE_decompress_usingDTable+0x4b0>  // b.lo, b.ul, b.last
     df8:	lsr	w5, w3, #3
     dfc:	cmp	x4, x13
     e00:	sub	x11, x11, x5
     e04:	and	w14, w3, #0x7
     e08:	cset	w12, cc  // cc = lo, ul, last
     e0c:	ldr	x3, [x11]
     e10:	str	x3, [sp, #24]
     e14:	b	d24 <FSE_decompress_usingDTable+0x4dc>
     e18:	sub	x5, x3, #0x8
     e1c:	mov	x0, #0xffffffffffffffff    	// #-1
     e20:	add	x7, x2, x5
     e24:	str	x7, [sp, #40]
     e28:	ldr	x5, [x2, x5]
     e2c:	str	x5, [sp, #24]
     e30:	cbz	w4, b5c <FSE_decompress_usingDTable+0x314>
     e34:	clz	w4, w4
     e38:	cmn	x3, #0x78
     e3c:	sub	w4, w4, #0x17
     e40:	mov	x0, x3
     e44:	b.hi	b5c <FSE_decompress_usingDTable+0x314>  // b.pmore
     e48:	mov	w0, w4
     e4c:	b	c20 <FSE_decompress_usingDTable+0x3d8>
     e50:	lsr	w7, w3, #3
     e54:	and	w3, w3, #0x7
     e58:	sub	x0, x0, x7
     e5c:	mov	w11, w3
     e60:	ldr	x7, [x0]
     e64:	str	x7, [sp, #24]
     e68:	str	x0, [sp, #40]
     e6c:	b	964 <FSE_decompress_usingDTable+0x11c>
     e70:	str	w8, [sp, #32]
     e74:	str	x0, [sp, #40]
     e78:	sub	x13, x1, #0x2
     e7c:	cmp	x13, x7
     e80:	b.cc	11ec <FSE_decompress_usingDTable+0x9a4>  // b.lo, b.ul, b.last
     e84:	sub	x11, x1, #0x1
     e88:	ldr	w0, [sp, #32]
     e8c:	sub	x11, x11, x7
     e90:	mov	w14, #0x3f                  	// #63
     e94:	and	x11, x11, #0xfffffffffffffffe
     e98:	ldr	x9, [sp, #40]
     e9c:	add	x11, x7, x11
     ea0:	lsl	x4, x4, #2
     ea4:	add	x3, x6, x4
     ea8:	ldr	x8, [sp, #24]
     eac:	ldrb	w1, [x3, #3]
     eb0:	ldrb	w15, [x3, #2]
     eb4:	lsl	x8, x8, x0
     eb8:	ldrh	w4, [x6, x4]
     ebc:	sub	w3, w14, w1
     ec0:	lsr	x8, x8, #1
     ec4:	strb	w15, [x7]
     ec8:	add	w0, w1, w0
     ecc:	cmp	w0, #0x40
     ed0:	lsr	x1, x8, x3
     ed4:	add	x4, x1, x4
     ed8:	b.hi	b48 <FSE_decompress_usingDTable+0x300>  // b.pmore
     edc:	cmp	x12, x9
     ee0:	b.ls	fb4 <FSE_decompress_usingDTable+0x76c>  // b.plast
     ee4:	mov	x15, x2
     ee8:	cmp	x2, x9
     eec:	b.eq	f1c <FSE_decompress_usingDTable+0x6d4>  // b.none
     ef0:	lsr	w1, w0, #3
     ef4:	lsr	w3, w0, #3
     ef8:	sub	x15, x9, x1
     efc:	cmp	x2, x15
     f00:	b.ls	f10 <FSE_decompress_usingDTable+0x6c8>  // b.plast
     f04:	sub	x1, x9, x2
     f08:	mov	w3, w1
     f0c:	sub	x15, x9, w1, uxtw
     f10:	sub	w0, w0, w3, lsl #3
     f14:	ldr	x1, [x15]
     f18:	str	x1, [sp, #24]
     f1c:	cmp	x7, x11
     f20:	b.eq	11ec <FSE_decompress_usingDTable+0x9a4>  // b.none
     f24:	lsl	x5, x5, #2
     f28:	add	x16, x7, #0x2
     f2c:	add	x8, x6, x5
     f30:	ldr	x3, [sp, #24]
     f34:	ldrb	w1, [x8, #3]
     f38:	ldrb	w9, [x8, #2]
     f3c:	lsl	x3, x3, x0
     f40:	ldrh	w5, [x6, x5]
     f44:	sub	w8, w14, w1
     f48:	lsr	x3, x3, #1
     f4c:	sturb	w9, [x16, #-1]
     f50:	add	w0, w1, w0
     f54:	cmp	w0, #0x40
     f58:	lsr	x1, x3, x8
     f5c:	add	x5, x1, x5
     f60:	b.hi	fe4 <FSE_decompress_usingDTable+0x79c>  // b.pmore
     f64:	cmp	x12, x15
     f68:	b.ls	fcc <FSE_decompress_usingDTable+0x784>  // b.plast
     f6c:	mov	x9, x2
     f70:	cmp	x2, x15
     f74:	b.eq	fa4 <FSE_decompress_usingDTable+0x75c>  // b.none
     f78:	lsr	w9, w0, #3
     f7c:	lsr	w1, w0, #3
     f80:	sub	x9, x15, x9
     f84:	cmp	x2, x9
     f88:	b.ls	f98 <FSE_decompress_usingDTable+0x750>  // b.plast
     f8c:	sub	x9, x15, x2
     f90:	mov	w1, w9
     f94:	sub	x9, x15, w9, uxtw
     f98:	sub	w0, w0, w1, lsl #3
     f9c:	ldr	x3, [x9]
     fa0:	str	x3, [sp, #24]
     fa4:	cmp	x13, x16
     fa8:	b.cc	11ec <FSE_decompress_usingDTable+0x9a4>  // b.lo, b.ul, b.last
     fac:	mov	x7, x16
     fb0:	b	ea0 <FSE_decompress_usingDTable+0x658>
     fb4:	lsr	w1, w0, #3
     fb8:	and	w0, w0, #0x7
     fbc:	sub	x15, x9, x1
     fc0:	ldr	x1, [x15]
     fc4:	str	x1, [sp, #24]
     fc8:	b	f1c <FSE_decompress_usingDTable+0x6d4>
     fcc:	lsr	w9, w0, #3
     fd0:	and	w0, w0, #0x7
     fd4:	sub	x9, x15, x9
     fd8:	ldr	x1, [x9]
     fdc:	str	x1, [sp, #24]
     fe0:	b	fa4 <FSE_decompress_usingDTable+0x75c>
     fe4:	add	x4, x6, x4, lsl #2
     fe8:	add	x0, x7, #0x3
     fec:	sub	x0, x0, x10
     ff0:	ldrb	w1, [x4, #2]
     ff4:	strb	w1, [x7, #2]
     ff8:	b	b5c <FSE_decompress_usingDTable+0x314>
     ffc:	sub	w9, w0, w2
    1000:	sub	x3, x0, x2
    1004:	sub	x0, x0, x9
    1008:	sub	w3, w8, w3, lsl #3
    100c:	ldr	x8, [x0]
    1010:	str	x8, [sp, #24]
    1014:	str	w3, [sp, #32]
    1018:	str	x0, [sp, #40]
    101c:	b	e78 <FSE_decompress_usingDTable+0x630>
    1020:	cbz	w14, e78 <FSE_decompress_usingDTable+0x630>
    1024:	str	w8, [sp, #32]
    1028:	str	x2, [sp, #40]
    102c:	b	e78 <FSE_decompress_usingDTable+0x630>
    1030:	str	w3, [sp, #32]
    1034:	str	x11, [sp, #40]
    1038:	sub	x13, x1, #0x2
    103c:	cmp	x13, x4
    1040:	b.cc	11ec <FSE_decompress_usingDTable+0x9a4>  // b.lo, b.ul, b.last
    1044:	sub	x12, x1, #0x1
    1048:	ldr	w1, [sp, #32]
    104c:	sub	x12, x12, x4
    1050:	and	x12, x12, #0xfffffffffffffffe
    1054:	ldr	x5, [sp, #40]
    1058:	add	x12, x4, x12
    105c:	lsl	x9, x9, #2
    1060:	add	x11, x6, x9
    1064:	ldr	x7, [sp, #24]
    1068:	ldrb	w3, [x11, #3]
    106c:	ldrb	w14, [x11, #2]
    1070:	ldrh	w9, [x6, x9]
    1074:	neg	w11, w3
    1078:	strb	w14, [x4]
    107c:	add	w3, w3, w1
    1080:	lsl	x1, x7, x1
    1084:	cmp	w3, #0x40
    1088:	lsr	x1, x1, x11
    108c:	add	x9, x1, x9
    1090:	b.hi	1198 <FSE_decompress_usingDTable+0x950>  // b.pmore
    1094:	cmp	x8, x5
    1098:	b.ls	1168 <FSE_decompress_usingDTable+0x920>  // b.plast
    109c:	mov	x7, x2
    10a0:	cmp	x2, x5
    10a4:	b.eq	10d4 <FSE_decompress_usingDTable+0x88c>  // b.none
    10a8:	lsr	w7, w3, #3
    10ac:	lsr	w1, w3, #3
    10b0:	sub	x7, x5, x7
    10b4:	cmp	x2, x7
    10b8:	b.ls	10c8 <FSE_decompress_usingDTable+0x880>  // b.plast
    10bc:	sub	x7, x5, x2
    10c0:	mov	w1, w7
    10c4:	sub	x7, x5, w7, uxtw
    10c8:	sub	w3, w3, w1, lsl #3
    10cc:	ldr	x5, [x7]
    10d0:	str	x5, [sp, #24]
    10d4:	cmp	x4, x12
    10d8:	b.eq	11ec <FSE_decompress_usingDTable+0x9a4>  // b.none
    10dc:	lsl	x0, x0, #2
    10e0:	add	x15, x4, #0x2
    10e4:	add	x11, x6, x0
    10e8:	ldr	x5, [sp, #24]
    10ec:	ldrb	w1, [x11, #3]
    10f0:	ldrb	w14, [x11, #2]
    10f4:	ldrh	w0, [x6, x0]
    10f8:	neg	w11, w1
    10fc:	sturb	w14, [x15, #-1]
    1100:	add	w1, w1, w3
    1104:	lsl	x3, x5, x3
    1108:	cmp	w1, #0x40
    110c:	lsr	x3, x3, x11
    1110:	add	x0, x3, x0
    1114:	b.hi	11b0 <FSE_decompress_usingDTable+0x968>  // b.pmore
    1118:	cmp	x8, x7
    111c:	b.ls	1180 <FSE_decompress_usingDTable+0x938>  // b.plast
    1120:	mov	x5, x2
    1124:	cmp	x2, x7
    1128:	b.eq	1158 <FSE_decompress_usingDTable+0x910>  // b.none
    112c:	lsr	w5, w1, #3
    1130:	lsr	w3, w1, #3
    1134:	sub	x5, x7, x5
    1138:	cmp	x2, x5
    113c:	b.ls	114c <FSE_decompress_usingDTable+0x904>  // b.plast
    1140:	sub	x5, x7, x2
    1144:	mov	w3, w5
    1148:	sub	x5, x7, w5, uxtw
    114c:	sub	w1, w1, w3, lsl #3
    1150:	ldr	x4, [x5]
    1154:	str	x4, [sp, #24]
    1158:	cmp	x13, x15
    115c:	b.cc	11ec <FSE_decompress_usingDTable+0x9a4>  // b.lo, b.ul, b.last
    1160:	mov	x4, x15
    1164:	b	105c <FSE_decompress_usingDTable+0x814>
    1168:	lsr	w7, w3, #3
    116c:	and	w3, w3, #0x7
    1170:	sub	x7, x5, x7
    1174:	ldr	x1, [x7]
    1178:	str	x1, [sp, #24]
    117c:	b	10d4 <FSE_decompress_usingDTable+0x88c>
    1180:	lsr	w5, w1, #3
    1184:	and	w1, w1, #0x7
    1188:	sub	x5, x7, x5
    118c:	ldr	x3, [x5]
    1190:	str	x3, [sp, #24]
    1194:	b	1158 <FSE_decompress_usingDTable+0x910>
    1198:	add	x0, x6, x0, lsl #2
    119c:	add	x2, x4, #0x2
    11a0:	ldrb	w0, [x0, #2]
    11a4:	strb	w0, [x4, #1]
    11a8:	sub	x0, x2, x10
    11ac:	b	b5c <FSE_decompress_usingDTable+0x314>
    11b0:	add	x6, x6, x9, lsl #2
    11b4:	add	x2, x4, #0x3
    11b8:	ldrb	w0, [x6, #2]
    11bc:	strb	w0, [x4, #2]
    11c0:	sub	x0, x2, x10
    11c4:	b	b5c <FSE_decompress_usingDTable+0x314>
    11c8:	sub	w5, w11, w2
    11cc:	sub	x14, x11, x2
    11d0:	sub	x11, x11, x5
    11d4:	sub	w14, w3, w14, lsl #3
    11d8:	ldr	x3, [x11]
    11dc:	str	x3, [sp, #24]
    11e0:	str	w14, [sp, #32]
    11e4:	str	x11, [sp, #40]
    11e8:	b	1038 <FSE_decompress_usingDTable+0x7f0>
    11ec:	mov	x0, #0xffffffffffffffba    	// #-70
    11f0:	ldp	x29, x30, [sp], #64
    11f4:	ret
    11f8:	cbz	w12, 1038 <FSE_decompress_usingDTable+0x7f0>
    11fc:	str	w3, [sp, #32]
    1200:	str	x2, [sp, #40]
    1204:	b	1038 <FSE_decompress_usingDTable+0x7f0>
    1208:	cmp	x3, #0x6
    120c:	b.eq	1218 <FSE_decompress_usingDTable+0x9d0>  // b.none
    1210:	ldrb	w5, [x2, #6]
    1214:	add	x0, x0, x5, lsl #48
    1218:	ldrb	w5, [x2, #5]
    121c:	add	x0, x0, x5, lsl #40
    1220:	ldrb	w5, [x2, #4]
    1224:	add	x0, x0, x5, lsl #32
    1228:	b	be0 <FSE_decompress_usingDTable+0x398>
    122c:	cmp	x3, #0x2
    1230:	b.eq	bf0 <FSE_decompress_usingDTable+0x3a8>  // b.none
    1234:	b	bfc <FSE_decompress_usingDTable+0x3b4>
    1238:	add	x0, sp, #0x18
    123c:	mov	x2, #0x28                  	// #40
    1240:	mov	w1, #0x0                   	// #0
    1244:	bl	0 <grub_memset>
    1248:	mov	x0, #0xffffffffffffffb8    	// #-72
    124c:	ldp	x29, x30, [sp], #64
    1250:	ret
    1254:	lsr	w0, w8, #3
    1258:	and	w8, w8, #0x7
    125c:	sub	x0, x3, x0
    1260:	ldr	x3, [x0]
    1264:	str	x3, [sp, #24]
    1268:	str	w8, [sp, #32]
    126c:	str	x0, [sp, #40]
    1270:	b	9d4 <FSE_decompress_usingDTable+0x18c>
    1274:	lsl	x0, x7, x3
    1278:	add	w8, w9, w3
    127c:	lsr	x0, x0, #1
    1280:	add	x6, x6, #0x4
    1284:	mov	x7, x10
    1288:	str	w8, [sp, #32]
    128c:	lsr	x5, x0, x5
    1290:	b	e78 <FSE_decompress_usingDTable+0x630>
    1294:	mov	x0, x2
    1298:	b	9d4 <FSE_decompress_usingDTable+0x18c>
    129c:	sub	x11, x4, x2
    12a0:	mov	w5, w11
    12a4:	sub	x11, x4, w11, uxtw
    12a8:	b	cd0 <FSE_decompress_usingDTable+0x488>
    12ac:	sub	x11, x4, x2
    12b0:	mov	w5, w11
    12b4:	sub	x11, x4, w11, uxtw
    12b8:	b	c74 <FSE_decompress_usingDTable+0x42c>
    12bc:	lsr	w5, w3, #3
    12c0:	and	w3, w3, #0x7
    12c4:	sub	x4, x4, x5
    12c8:	mov	w12, w3
    12cc:	ldr	x5, [x4]
    12d0:	str	x5, [sp, #24]
    12d4:	str	x4, [sp, #40]
    12d8:	b	c88 <FSE_decompress_usingDTable+0x440>
    12dc:	lsr	w11, w3, #3
    12e0:	and	w3, w3, #0x7
    12e4:	sub	x11, x4, x11
    12e8:	ldr	x4, [x11]
    12ec:	str	x4, [sp, #24]
    12f0:	str	w3, [sp, #32]
    12f4:	str	x11, [sp, #40]
    12f8:	b	cec <FSE_decompress_usingDTable+0x4a4>
    12fc:	lsl	x5, x5, x3
    1300:	add	w7, w7, w3
    1304:	lsr	x3, x5, #1
    1308:	add	x6, x6, #0x4
    130c:	mov	x4, x10
    1310:	str	w7, [sp, #32]
    1314:	lsr	x0, x3, x0
    1318:	b	1038 <FSE_decompress_usingDTable+0x7f0>
    131c:	mov	x11, x2
    1320:	b	cec <FSE_decompress_usingDTable+0x4a4>
    1324:	mov	x4, x10
    1328:	b	1038 <FSE_decompress_usingDTable+0x7f0>
    132c:	mov	x7, x10
    1330:	b	e78 <FSE_decompress_usingDTable+0x630>
    1334:	nop

0000000000001338 <FSE_decompress_wksp>:
    1338:	sub	sp, sp, #0x260
    133c:	stp	x29, x30, [sp]
    1340:	mov	x29, sp
    1344:	stp	x21, x22, [sp, #32]
    1348:	mov	w22, w5
    134c:	mov	w5, #0xff                  	// #255
    1350:	mov	x21, x3
    1354:	stp	x19, x20, [sp, #16]
    1358:	mov	x20, x2
    135c:	stp	x23, x24, [sp, #48]
    1360:	mov	x23, x0
    1364:	mov	x24, x1
    1368:	add	x0, sp, #0x60
    136c:	add	x1, sp, #0x5c
    1370:	str	x25, [sp, #64]
    1374:	mov	x25, x4
    1378:	mov	x4, x3
    137c:	mov	x3, x2
    1380:	add	x2, sp, #0x58
    1384:	str	w5, [sp, #92]
    1388:	bl	40 <FSE_readNCount>
    138c:	mov	x19, x0
    1390:	cmn	x0, #0x78
    1394:	b.hi	13d8 <FSE_decompress_wksp+0xa0>  // b.pmore
    1398:	ldr	w3, [sp, #88]
    139c:	cmp	w3, w22
    13a0:	b.hi	13f8 <FSE_decompress_wksp+0xc0>  // b.pmore
    13a4:	ldr	w2, [sp, #92]
    13a8:	add	x1, sp, #0x60
    13ac:	mov	x0, x25
    13b0:	bl	5b8 <FSE_buildDTable>
    13b4:	cmn	x0, #0x78
    13b8:	b.hi	141c <FSE_decompress_wksp+0xe4>  // b.pmore
    13bc:	sub	x3, x21, x19
    13c0:	add	x2, x20, x19
    13c4:	mov	x4, x25
    13c8:	mov	x1, x24
    13cc:	mov	x0, x23
    13d0:	bl	848 <FSE_decompress_usingDTable>
    13d4:	mov	x19, x0
    13d8:	mov	x0, x19
    13dc:	ldp	x29, x30, [sp]
    13e0:	ldp	x19, x20, [sp, #16]
    13e4:	ldp	x21, x22, [sp, #32]
    13e8:	ldp	x23, x24, [sp, #48]
    13ec:	ldr	x25, [sp, #64]
    13f0:	add	sp, sp, #0x260
    13f4:	ret
    13f8:	mov	x19, #0xffffffffffffffd4    	// #-44
    13fc:	mov	x0, x19
    1400:	ldp	x29, x30, [sp]
    1404:	ldp	x19, x20, [sp, #16]
    1408:	ldp	x21, x22, [sp, #32]
    140c:	ldp	x23, x24, [sp, #48]
    1410:	ldr	x25, [sp, #64]
    1414:	add	sp, sp, #0x260
    1418:	ret
    141c:	mov	x19, x0
    1420:	mov	x0, x19
    1424:	ldp	x29, x30, [sp]
    1428:	ldp	x19, x20, [sp, #16]
    142c:	ldp	x21, x22, [sp, #32]
    1430:	ldp	x23, x24, [sp, #48]
    1434:	ldr	x25, [sp, #64]
    1438:	add	sp, sp, #0x260
    143c:	ret

0000000000001440 <FSE_decompress>:
    1440:	mov	x12, #0x4020                	// #16416
    1444:	sub	sp, sp, x12
    1448:	add	x4, sp, #0x18
    144c:	mov	w5, #0xc                   	// #12
    1450:	stp	x29, x30, [sp]
    1454:	mov	x29, sp
    1458:	bl	1338 <FSE_decompress_wksp>
    145c:	mov	x12, #0x4020                	// #16416
    1460:	ldp	x29, x30, [sp]
    1464:	add	sp, sp, x12
    1468:	ret
    146c:	nop
    1470:	stp	x29, x30, [sp, #-32]!
    1474:	mov	x1, x0
    1478:	mov	x2, #0x4                   	// #4
    147c:	mov	x29, sp
    1480:	add	x0, sp, #0x18
    1484:	bl	0 <grub_memmove>
    1488:	ldr	w0, [sp, #24]
    148c:	ldp	x29, x30, [sp], #32
    1490:	ret
    1494:	nop
    1498:	stp	x29, x30, [sp, #-112]!
    149c:	mov	x29, sp
    14a0:	stp	x19, x20, [sp, #16]
    14a4:	mov	x19, x0
    14a8:	add	x20, x4, #0x4
    14ac:	mov	x0, x4
    14b0:	stp	x21, x22, [sp, #32]
    14b4:	mov	x22, x1
    14b8:	mov	x21, x2
    14bc:	str	x23, [sp, #48]
    14c0:	mov	x23, x3
    14c4:	bl	1470 <FSE_decompress+0x30>
    14c8:	add	x6, x19, x22
    14cc:	ubfx	x8, x0, #16, #8
    14d0:	cbz	x23, 175c <FSE_decompress+0x31c>
    14d4:	add	x0, x21, x23
    14d8:	add	x9, x21, #0x8
    14dc:	stp	x21, x9, [sp, #96]
    14e0:	cmp	x23, #0x7
    14e4:	ldurb	w1, [x0, #-1]
    14e8:	b.ls	166c <FSE_decompress+0x22c>  // b.plast
    14ec:	sub	x2, x23, #0x8
    14f0:	mov	x0, #0xffffffffffffffff    	// #-1
    14f4:	add	x10, x21, x2
    14f8:	str	x10, [sp, #88]
    14fc:	ldr	x2, [x21, x2]
    1500:	str	x2, [sp, #72]
    1504:	cbz	w1, 1658 <FSE_decompress+0x218>
    1508:	clz	w4, w1
    150c:	cmn	x23, #0x78
    1510:	sub	w4, w4, #0x17
    1514:	str	w4, [sp, #80]
    1518:	b.hi	1784 <FSE_decompress+0x344>  // b.pmore
    151c:	neg	w7, w8
    1520:	mov	x2, x10
    1524:	and	w7, w7, #0x3f
    1528:	sub	x11, x6, #0x3
    152c:	mov	w0, #0x0                   	// #0
    1530:	lsr	w1, w4, #3
    1534:	cmp	x2, x9
    1538:	sub	x1, x2, x1
    153c:	b.cs	16d4 <FSE_decompress+0x294>  // b.hs, b.nlast
    1540:	cmp	x21, x2
    1544:	b.eq	170c <FSE_decompress+0x2cc>  // b.none
    1548:	cmp	x21, x1
    154c:	lsr	w0, w4, #3
    1550:	b.hi	16f0 <FSE_decompress+0x2b0>  // b.pmore
    1554:	cmp	x19, x11
    1558:	sub	w4, w4, w0, lsl #3
    155c:	mov	x2, x1
    1560:	cset	w0, cc  // cc = lo, ul, last
    1564:	ldr	x1, [x1]
    1568:	str	x1, [sp, #72]
    156c:	cbz	w0, 1600 <FSE_decompress+0x1c0>
    1570:	ldr	x3, [sp, #72]
    1574:	add	x19, x19, #0x4
    1578:	lsl	x5, x3, x4
    157c:	lsr	x5, x5, x7
    1580:	lsl	x5, x5, #1
    1584:	add	x1, x20, x5
    1588:	ldrb	w5, [x20, x5]
    158c:	ldrb	w1, [x1, #1]
    1590:	sturb	w5, [x19, #-4]
    1594:	add	w4, w1, w4
    1598:	lsl	x5, x3, x4
    159c:	lsr	x5, x5, x7
    15a0:	lsl	x5, x5, #1
    15a4:	add	x1, x20, x5
    15a8:	ldrb	w5, [x20, x5]
    15ac:	ldrb	w1, [x1, #1]
    15b0:	sturb	w5, [x19, #-3]
    15b4:	add	w1, w1, w4
    15b8:	lsl	x5, x3, x1
    15bc:	lsr	x5, x5, x7
    15c0:	lsl	x5, x5, #1
    15c4:	add	x4, x20, x5
    15c8:	ldrb	w5, [x20, x5]
    15cc:	ldrb	w4, [x4, #1]
    15d0:	sturb	w5, [x19, #-2]
    15d4:	add	w1, w4, w1
    15d8:	lsl	x3, x3, x1
    15dc:	lsr	x3, x3, x7
    15e0:	lsl	x3, x3, #1
    15e4:	add	x4, x20, x3
    15e8:	ldrb	w3, [x20, x3]
    15ec:	ldrb	w4, [x4, #1]
    15f0:	sturb	w3, [x19, #-1]
    15f4:	add	w4, w4, w1
    15f8:	cmp	w4, #0x40
    15fc:	b.ls	1530 <FSE_decompress+0xf0>  // b.plast
    1600:	str	w4, [sp, #80]
    1604:	cmp	x6, x19
    1608:	b.ls	164c <FSE_decompress+0x20c>  // b.plast
    160c:	neg	w8, w8
    1610:	ldr	w3, [sp, #80]
    1614:	ldr	x4, [sp, #72]
    1618:	and	w8, w8, #0x3f
    161c:	lsl	x0, x4, x3
    1620:	lsr	x0, x0, x8
    1624:	lsl	x0, x0, #1
    1628:	add	x1, x20, x0
    162c:	ldrb	w0, [x20, x0]
    1630:	ldrb	w1, [x1, #1]
    1634:	strb	w0, [x19], #1
    1638:	add	w1, w1, w3
    163c:	mov	w3, w1
    1640:	cmp	x6, x19
    1644:	b.ne	161c <FSE_decompress+0x1dc>  // b.any
    1648:	str	w1, [sp, #80]
    164c:	cmp	x21, x2
    1650:	b.eq	1748 <FSE_decompress+0x308>  // b.none
    1654:	mov	x0, #0xffffffffffffffec    	// #-20
    1658:	ldp	x19, x20, [sp, #16]
    165c:	ldp	x21, x22, [sp, #32]
    1660:	ldr	x23, [sp, #48]
    1664:	ldp	x29, x30, [sp], #112
    1668:	ret
    166c:	ldrb	w0, [x21]
    1670:	cmp	x23, #0x5
    1674:	str	x0, [sp, #72]
    1678:	str	x21, [sp, #88]
    167c:	b.eq	1730 <FSE_decompress+0x2f0>  // b.none
    1680:	b.hi	1718 <FSE_decompress+0x2d8>  // b.pmore
    1684:	cmp	x23, #0x3
    1688:	b.eq	169c <FSE_decompress+0x25c>  // b.none
    168c:	cmp	x23, #0x4
    1690:	b.ne	173c <FSE_decompress+0x2fc>  // b.any
    1694:	ldrb	w2, [x21, #3]
    1698:	add	x0, x0, x2, lsl #24
    169c:	ldrb	w2, [x21, #2]
    16a0:	add	x0, x0, x2, lsl #16
    16a4:	ldrb	w2, [x21, #1]
    16a8:	add	x0, x0, x2, lsl #8
    16ac:	str	x0, [sp, #72]
    16b0:	cbz	w1, 1654 <FSE_decompress+0x214>
    16b4:	mov	w4, #0x9                   	// #9
    16b8:	sub	w4, w4, w23
    16bc:	clz	w1, w1
    16c0:	mov	x10, x21
    16c4:	add	w4, w1, w4, lsl #3
    16c8:	sub	w4, w4, #0x1f
    16cc:	str	w4, [sp, #80]
    16d0:	b	151c <FSE_decompress+0xdc>
    16d4:	cmp	x19, x11
    16d8:	mov	x2, x1
    16dc:	ldr	x1, [x1]
    16e0:	and	w4, w4, #0x7
    16e4:	cset	w0, cc  // cc = lo, ul, last
    16e8:	str	x1, [sp, #72]
    16ec:	b	156c <FSE_decompress+0x12c>
    16f0:	sub	w1, w2, w21
    16f4:	sub	x0, x2, x21
    16f8:	sub	x2, x2, x1
    16fc:	sub	w4, w4, w0, lsl #3
    1700:	ldr	x0, [x2]
    1704:	str	x0, [sp, #72]
    1708:	b	1600 <FSE_decompress+0x1c0>
    170c:	cbnz	w0, 1600 <FSE_decompress+0x1c0>
    1710:	mov	x2, x10
    1714:	b	1604 <FSE_decompress+0x1c4>
    1718:	cmp	x23, #0x6
    171c:	b.eq	1728 <FSE_decompress+0x2e8>  // b.none
    1720:	ldrb	w2, [x21, #6]
    1724:	add	x0, x0, x2, lsl #48
    1728:	ldrb	w2, [x21, #5]
    172c:	add	x0, x0, x2, lsl #40
    1730:	ldrb	w2, [x21, #4]
    1734:	add	x0, x0, x2, lsl #32
    1738:	b	1694 <FSE_decompress+0x254>
    173c:	cmp	x23, #0x2
    1740:	b.eq	16a4 <FSE_decompress+0x264>  // b.none
    1744:	b	16b0 <FSE_decompress+0x270>
    1748:	ldr	w1, [sp, #80]
    174c:	mov	x0, x22
    1750:	cmp	w1, #0x40
    1754:	b.ne	1654 <FSE_decompress+0x214>  // b.any
    1758:	b	1658 <FSE_decompress+0x218>
    175c:	add	x0, sp, #0x48
    1760:	mov	x2, #0x28                  	// #40
    1764:	mov	w1, #0x0                   	// #0
    1768:	bl	0 <grub_memset>
    176c:	mov	x0, #0xffffffffffffffb8    	// #-72
    1770:	ldp	x19, x20, [sp, #16]
    1774:	ldp	x21, x22, [sp, #32]
    1778:	ldr	x23, [sp, #48]
    177c:	ldp	x29, x30, [sp], #112
    1780:	ret
    1784:	mov	x0, x23
    1788:	b	1658 <FSE_decompress+0x218>
    178c:	nop
    1790:	stp	x29, x30, [sp, #-144]!
    1794:	mov	x29, sp
    1798:	cbz	x3, 1c6c <FSE_decompress+0x82c>
    179c:	stp	x19, x20, [sp, #16]
    17a0:	mov	x19, x0
    17a4:	add	x0, x2, x3
    17a8:	stp	x23, x24, [sp, #48]
    17ac:	mov	x23, x1
    17b0:	add	x1, x2, #0x8
    17b4:	stp	x2, x1, [sp, #128]
    17b8:	cmp	x3, #0x7
    17bc:	ldurb	w1, [x0, #-1]
    17c0:	b.hi	19c8 <FSE_decompress+0x588>  // b.pmore
    17c4:	ldrb	w0, [x2]
    17c8:	cmp	x3, #0x5
    17cc:	str	x0, [sp, #104]
    17d0:	str	x2, [sp, #120]
    17d4:	b.eq	1bc8 <FSE_decompress+0x788>  // b.none
    17d8:	b.hi	1bb0 <FSE_decompress+0x770>  // b.pmore
    17dc:	cmp	x3, #0x3
    17e0:	b.eq	17f4 <FSE_decompress+0x3b4>  // b.none
    17e4:	cmp	x3, #0x4
    17e8:	b.ne	1bd4 <FSE_decompress+0x794>  // b.any
    17ec:	ldrb	w5, [x2, #3]
    17f0:	add	x0, x0, x5, lsl #24
    17f4:	ldrb	w5, [x2, #2]
    17f8:	add	x0, x0, x5, lsl #16
    17fc:	ldrb	w2, [x2, #1]
    1800:	add	x0, x0, x2, lsl #8
    1804:	str	x0, [sp, #104]
    1808:	cbz	w1, 1b5c <FSE_decompress+0x71c>
    180c:	mov	w0, #0x9                   	// #9
    1810:	sub	w3, w0, w3
    1814:	clz	w1, w1
    1818:	stp	x21, x22, [sp, #32]
    181c:	add	w1, w1, w3, lsl #3
    1820:	sub	w1, w1, #0x1f
    1824:	stp	x25, x26, [sp, #64]
    1828:	str	w1, [sp, #112]
    182c:	add	x20, x4, #0x4
    1830:	mov	x0, x4
    1834:	bl	1470 <FSE_decompress+0x30>
    1838:	add	x24, x19, x23
    183c:	ldr	w1, [sp, #112]
    1840:	ubfx	x22, x0, #16, #8
    1844:	cmp	w1, #0x40
    1848:	b.hi	1b74 <FSE_decompress+0x734>  // b.pmore
    184c:	neg	w21, w22
    1850:	sub	x25, x24, #0x7
    1854:	and	w21, w21, #0x3f
    1858:	str	x27, [sp, #80]
    185c:	b	1984 <FSE_decompress+0x544>
    1860:	ldr	x4, [sp, #128]
    1864:	cmp	x2, x4
    1868:	b.eq	1a0c <FSE_decompress+0x5cc>  // b.none
    186c:	sub	x7, x2, x4
    1870:	cmp	x4, x0
    1874:	mov	w5, #0x0                   	// #0
    1878:	b.hi	1b7c <FSE_decompress+0x73c>  // b.pmore
    187c:	cmp	x19, x25
    1880:	cset	w5, cc  // cc = lo, ul, last
    1884:	str	x0, [sp, #120]
    1888:	sub	w1, w1, w6, lsl #3
    188c:	ldr	x0, [x0]
    1890:	str	x0, [sp, #104]
    1894:	str	w1, [sp, #112]
    1898:	mov	x0, x19
    189c:	mov	x2, #0x2                   	// #2
    18a0:	cbz	w5, 1a0c <FSE_decompress+0x5cc>
    18a4:	ldr	x27, [sp, #104]
    18a8:	lsl	x1, x27, x1
    18ac:	lsr	x27, x1, x21
    18b0:	add	x27, x20, x27, lsl #2
    18b4:	mov	x1, x27
    18b8:	bl	0 <grub_memmove>
    18bc:	ldr	w3, [sp, #112]
    18c0:	mov	x2, #0x2                   	// #2
    18c4:	ldrb	w1, [x27, #2]
    18c8:	ldr	x26, [sp, #104]
    18cc:	add	w1, w1, w3
    18d0:	ldrb	w0, [x27, #3]
    18d4:	str	w1, [sp, #112]
    18d8:	lsl	x26, x26, x1
    18dc:	add	x19, x19, x0
    18e0:	lsr	x26, x26, x21
    18e4:	mov	x0, x19
    18e8:	add	x26, x20, x26, lsl #2
    18ec:	mov	x1, x26
    18f0:	bl	0 <grub_memmove>
    18f4:	ldr	w3, [sp, #112]
    18f8:	mov	x2, #0x2                   	// #2
    18fc:	ldrb	w1, [x26, #2]
    1900:	ldr	x27, [sp, #104]
    1904:	add	w1, w1, w3
    1908:	ldrb	w0, [x26, #3]
    190c:	str	w1, [sp, #112]
    1910:	lsl	x27, x27, x1
    1914:	add	x19, x19, x0
    1918:	lsr	x27, x27, x21
    191c:	mov	x0, x19
    1920:	add	x27, x20, x27, lsl #2
    1924:	mov	x1, x27
    1928:	bl	0 <grub_memmove>
    192c:	ldr	w3, [sp, #112]
    1930:	mov	x2, #0x2                   	// #2
    1934:	ldrb	w1, [x27, #2]
    1938:	ldr	x26, [sp, #104]
    193c:	add	w1, w1, w3
    1940:	ldrb	w0, [x27, #3]
    1944:	str	w1, [sp, #112]
    1948:	lsl	x26, x26, x1
    194c:	add	x19, x19, x0
    1950:	lsr	x26, x26, x21
    1954:	mov	x0, x19
    1958:	add	x26, x20, x26, lsl #2
    195c:	mov	x1, x26
    1960:	bl	0 <grub_memmove>
    1964:	ldr	w1, [sp, #112]
    1968:	ldrb	w2, [x26, #2]
    196c:	ldrb	w0, [x26, #3]
    1970:	add	w1, w2, w1
    1974:	str	w1, [sp, #112]
    1978:	add	x19, x19, x0
    197c:	cmp	w1, #0x40
    1980:	b.hi	1b70 <FSE_decompress+0x730>  // b.pmore
    1984:	ldr	x2, [sp, #120]
    1988:	lsr	w0, w1, #3
    198c:	ldr	x3, [sp, #136]
    1990:	lsr	w6, w1, #3
    1994:	sub	x0, x2, x0
    1998:	cmp	x2, x3
    199c:	b.cc	1860 <FSE_decompress+0x420>  // b.lo, b.ul, b.last
    19a0:	lsr	w0, w1, #3
    19a4:	cmp	x19, x25
    19a8:	sub	x2, x2, x0
    19ac:	and	w1, w1, #0x7
    19b0:	cset	w5, cc  // cc = lo, ul, last
    19b4:	ldr	x0, [x2]
    19b8:	str	x0, [sp, #104]
    19bc:	str	w1, [sp, #112]
    19c0:	str	x2, [sp, #120]
    19c4:	b	1898 <FSE_decompress+0x458>
    19c8:	sub	x5, x3, #0x8
    19cc:	mov	x0, #0xffffffffffffffff    	// #-1
    19d0:	add	x6, x2, x5
    19d4:	str	x6, [sp, #120]
    19d8:	ldr	x2, [x2, x5]
    19dc:	str	x2, [sp, #104]
    19e0:	cbz	w1, 19fc <FSE_decompress+0x5bc>
    19e4:	clz	w1, w1
    19e8:	mov	x0, x3
    19ec:	sub	w1, w1, #0x17
    19f0:	str	w1, [sp, #112]
    19f4:	cmn	x3, #0x78
    19f8:	b.ls	1be0 <FSE_decompress+0x7a0>  // b.plast
    19fc:	ldp	x19, x20, [sp, #16]
    1a00:	ldp	x23, x24, [sp, #48]
    1a04:	ldp	x29, x30, [sp], #144
    1a08:	ret
    1a0c:	ldr	w0, [sp, #112]
    1a10:	sub	x25, x24, #0x2
    1a14:	cmp	w0, #0x40
    1a18:	b.hi	1ae4 <FSE_decompress+0x6a4>  // b.pmore
    1a1c:	neg	w26, w22
    1a20:	and	w26, w26, #0x3f
    1a24:	b	1aa4 <FSE_decompress+0x664>
    1a28:	ldr	x3, [sp, #128]
    1a2c:	cmp	x1, x3
    1a30:	b.eq	1ae4 <FSE_decompress+0x6a4>  // b.none
    1a34:	cmp	x3, x2
    1a38:	b.hi	1b88 <FSE_decompress+0x748>  // b.pmore
    1a3c:	cmp	x19, x25
    1a40:	sub	w0, w0, w4, lsl #3
    1a44:	cset	w3, ls  // ls = plast
    1a48:	ldr	x1, [x2]
    1a4c:	str	x1, [sp, #104]
    1a50:	str	w0, [sp, #112]
    1a54:	str	x2, [sp, #120]
    1a58:	mov	x0, x19
    1a5c:	mov	x2, #0x2                   	// #2
    1a60:	cbz	w3, 1ae4 <FSE_decompress+0x6a4>
    1a64:	ldr	x21, [sp, #104]
    1a68:	ldr	w1, [sp, #112]
    1a6c:	lsl	x21, x21, x1
    1a70:	lsr	x21, x21, x26
    1a74:	add	x21, x20, x21, lsl #2
    1a78:	mov	x1, x21
    1a7c:	bl	0 <grub_memmove>
    1a80:	ldr	w2, [sp, #112]
    1a84:	ldrb	w0, [x21, #2]
    1a88:	ldrb	w1, [x21, #3]
    1a8c:	add	w0, w0, w2
    1a90:	str	w0, [sp, #112]
    1a94:	add	x19, x19, x1
    1a98:	cmp	w0, #0x40
    1a9c:	b.hi	1ae4 <FSE_decompress+0x6a4>  // b.pmore
    1aa0:	ldr	x3, [sp, #136]
    1aa4:	lsr	w2, w0, #3
    1aa8:	ldr	x1, [sp, #120]
    1aac:	lsr	w4, w0, #3
    1ab0:	sub	x2, x1, x2
    1ab4:	cmp	x3, x1
    1ab8:	b.hi	1a28 <FSE_decompress+0x5e8>  // b.pmore
    1abc:	lsr	w2, w0, #3
    1ac0:	and	w0, w0, #0x7
    1ac4:	sub	x1, x1, x2
    1ac8:	cmp	x19, x25
    1acc:	str	w0, [sp, #112]
    1ad0:	cset	w3, ls  // ls = plast
    1ad4:	str	x1, [sp, #120]
    1ad8:	ldr	x0, [x1]
    1adc:	str	x0, [sp, #104]
    1ae0:	b	1a58 <FSE_decompress+0x618>
    1ae4:	ldr	x27, [sp, #80]
    1ae8:	cmp	x25, x19
    1aec:	b.cc	1b40 <FSE_decompress+0x700>  // b.lo, b.ul, b.last
    1af0:	neg	w26, w22
    1af4:	ldr	w1, [sp, #112]
    1af8:	and	w26, w26, #0x3f
    1afc:	nop
    1b00:	ldr	x21, [sp, #104]
    1b04:	mov	x0, x19
    1b08:	mov	x2, #0x2                   	// #2
    1b0c:	lsl	x21, x21, x1
    1b10:	lsr	x21, x21, x26
    1b14:	add	x21, x20, x21, lsl #2
    1b18:	mov	x1, x21
    1b1c:	bl	0 <grub_memmove>
    1b20:	ldr	w2, [sp, #112]
    1b24:	ldrb	w1, [x21, #2]
    1b28:	ldrb	w0, [x21, #3]
    1b2c:	add	w1, w1, w2
    1b30:	str	w1, [sp, #112]
    1b34:	add	x19, x19, x0
    1b38:	cmp	x19, x25
    1b3c:	b.ls	1b00 <FSE_decompress+0x6c0>  // b.plast
    1b40:	cmp	x24, x19
    1b44:	b.hi	1bec <FSE_decompress+0x7ac>  // b.pmore
    1b48:	ldp	x1, x0, [sp, #120]
    1b4c:	cmp	x1, x0
    1b50:	b.eq	1c48 <FSE_decompress+0x808>  // b.none
    1b54:	ldp	x21, x22, [sp, #32]
    1b58:	ldp	x25, x26, [sp, #64]
    1b5c:	mov	x0, #0xffffffffffffffec    	// #-20
    1b60:	ldp	x19, x20, [sp, #16]
    1b64:	ldp	x23, x24, [sp, #48]
    1b68:	ldp	x29, x30, [sp], #144
    1b6c:	ret
    1b70:	ldr	x27, [sp, #80]
    1b74:	sub	x25, x24, #0x2
    1b78:	b	1ae8 <FSE_decompress+0x6a8>
    1b7c:	sub	x0, x2, w7, uxtw
    1b80:	mov	w6, w7
    1b84:	b	1884 <FSE_decompress+0x444>
    1b88:	sub	w2, w1, w3
    1b8c:	sub	x3, x1, x3
    1b90:	sub	x1, x1, x2
    1b94:	str	x1, [sp, #120]
    1b98:	sub	w0, w0, w3, lsl #3
    1b9c:	str	w0, [sp, #112]
    1ba0:	ldr	x27, [sp, #80]
    1ba4:	ldr	x0, [x1]
    1ba8:	str	x0, [sp, #104]
    1bac:	b	1ae8 <FSE_decompress+0x6a8>
    1bb0:	cmp	x3, #0x6
    1bb4:	b.eq	1bc0 <FSE_decompress+0x780>  // b.none
    1bb8:	ldrb	w5, [x2, #6]
    1bbc:	add	x0, x0, x5, lsl #48
    1bc0:	ldrb	w5, [x2, #5]
    1bc4:	add	x0, x0, x5, lsl #40
    1bc8:	ldrb	w5, [x2, #4]
    1bcc:	add	x0, x0, x5, lsl #32
    1bd0:	b	17ec <FSE_decompress+0x3ac>
    1bd4:	cmp	x3, #0x2
    1bd8:	b.eq	17fc <FSE_decompress+0x3bc>  // b.none
    1bdc:	b	1808 <FSE_decompress+0x3c8>
    1be0:	stp	x21, x22, [sp, #32]
    1be4:	stp	x25, x26, [sp, #64]
    1be8:	b	182c <FSE_decompress+0x3ec>
    1bec:	ldr	x1, [sp, #104]
    1bf0:	neg	w22, w22
    1bf4:	ldr	w3, [sp, #112]
    1bf8:	mov	x0, x19
    1bfc:	mov	x2, #0x1                   	// #1
    1c00:	lsl	x1, x1, x3
    1c04:	lsr	x1, x1, x22
    1c08:	add	x20, x20, x1, lsl #2
    1c0c:	mov	x1, x20
    1c10:	bl	0 <grub_memmove>
    1c14:	ldrb	w0, [x20, #3]
    1c18:	cmp	w0, #0x1
    1c1c:	b.eq	1c88 <FSE_decompress+0x848>  // b.none
    1c20:	ldr	w0, [sp, #112]
    1c24:	cmp	w0, #0x3f
    1c28:	b.hi	1b48 <FSE_decompress+0x708>  // b.pmore
    1c2c:	ldrb	w1, [x20, #2]
    1c30:	add	w0, w1, w0
    1c34:	cmp	w0, #0x40
    1c38:	b.ls	1c40 <FSE_decompress+0x800>  // b.plast
    1c3c:	mov	w0, #0x40                  	// #64
    1c40:	str	w0, [sp, #112]
    1c44:	b	1b48 <FSE_decompress+0x708>
    1c48:	ldr	w1, [sp, #112]
    1c4c:	mov	x0, x23
    1c50:	cmp	w1, #0x40
    1c54:	b.ne	1b54 <FSE_decompress+0x714>  // b.any
    1c58:	ldp	x19, x20, [sp, #16]
    1c5c:	ldp	x21, x22, [sp, #32]
    1c60:	ldp	x23, x24, [sp, #48]
    1c64:	ldp	x25, x26, [sp, #64]
    1c68:	b	1a04 <FSE_decompress+0x5c4>
    1c6c:	add	x0, sp, #0x68
    1c70:	mov	x2, #0x28                  	// #40
    1c74:	mov	w1, #0x0                   	// #0
    1c78:	bl	0 <grub_memset>
    1c7c:	mov	x0, #0xffffffffffffffb8    	// #-72
    1c80:	ldp	x29, x30, [sp], #144
    1c84:	ret
    1c88:	ldrb	w1, [x20, #2]
    1c8c:	ldr	w0, [sp, #112]
    1c90:	add	w0, w0, w1
    1c94:	str	w0, [sp, #112]
    1c98:	b	1b48 <FSE_decompress+0x708>
    1c9c:	nop
    1ca0:	stp	x29, x30, [sp, #-352]!
    1ca4:	mov	x29, sp
    1ca8:	stp	x19, x20, [sp, #16]
    1cac:	mov	x19, x0
    1cb0:	ldrh	w20, [x2, #2]
    1cb4:	stp	x25, x26, [sp, #64]
    1cb8:	mov	x0, x4
    1cbc:	ldrh	w25, [x2]
    1cc0:	stp	x21, x22, [sp, #32]
    1cc4:	and	x26, x20, #0xffff
    1cc8:	ldrh	w22, [x2, #4]
    1ccc:	mov	x21, x2
    1cd0:	stp	x4, x1, [sp, #104]
    1cd4:	and	x2, x22, #0xffff
    1cd8:	add	x1, x26, w25, uxth
    1cdc:	stp	x27, x28, [sp, #80]
    1ce0:	sub	x27, x3, w22, uxth
    1ce4:	sub	x27, x27, x1
    1ce8:	stp	x23, x24, [sp, #48]
    1cec:	mov	x23, x3
    1cf0:	sub	x24, x27, #0x6
    1cf4:	str	x2, [sp, #120]
    1cf8:	bl	1470 <FSE_decompress+0x30>
    1cfc:	cmp	x23, x24
    1d00:	ldr	x4, [sp, #104]
    1d04:	b.cs	1d2c <FSE_decompress+0x8ec>  // b.hs, b.nlast
    1d08:	mov	x24, #0xffffffffffffffec    	// #-20
    1d0c:	mov	x0, x24
    1d10:	ldp	x19, x20, [sp, #16]
    1d14:	ldp	x21, x22, [sp, #32]
    1d18:	ldp	x23, x24, [sp, #48]
    1d1c:	ldp	x25, x26, [sp, #64]
    1d20:	ldp	x27, x28, [sp, #80]
    1d24:	ldp	x29, x30, [sp], #352
    1d28:	ret
    1d2c:	and	x28, x25, #0xffff
    1d30:	cbz	x28, 2524 <FSE_decompress+0x10e4>
    1d34:	add	x11, x21, #0x6
    1d38:	ubfx	x0, x0, #16, #8
    1d3c:	add	x10, x11, x28
    1d40:	add	x30, x21, #0xe
    1d44:	str	x0, [sp, #104]
    1d48:	cmp	x28, #0x7
    1d4c:	stp	x11, x30, [sp, #216]
    1d50:	ldurb	w0, [x10, #-1]
    1d54:	b.ls	23cc <FSE_decompress+0xf8c>  // b.plast
    1d58:	sub	x1, x28, #0x8
    1d5c:	add	x6, x11, x1
    1d60:	str	x6, [sp, #208]
    1d64:	ldr	x1, [x11, x1]
    1d68:	str	x1, [sp, #192]
    1d6c:	cbz	w0, 246c <FSE_decompress+0x102c>
    1d70:	clz	w0, w0
    1d74:	sub	w0, w0, #0x17
    1d78:	str	w0, [sp, #200]
    1d7c:	cbz	x26, 2650 <FSE_decompress+0x1210>
    1d80:	add	x15, x10, x26
    1d84:	add	x0, x10, #0x8
    1d88:	str	x0, [sp, #128]
    1d8c:	cmp	x26, #0x7
    1d90:	stp	x10, x0, [sp, #256]
    1d94:	ldurb	w0, [x15, #-1]
    1d98:	b.ls	2490 <FSE_decompress+0x1050>  // b.plast
    1d9c:	sub	x1, x26, #0x8
    1da0:	add	x5, x10, x1
    1da4:	str	x5, [sp, #248]
    1da8:	ldr	x1, [x10, x1]
    1dac:	str	x1, [sp, #232]
    1db0:	cbz	w0, 246c <FSE_decompress+0x102c>
    1db4:	clz	w0, w0
    1db8:	sub	w0, w0, #0x17
    1dbc:	str	w0, [sp, #240]
    1dc0:	and	x0, x22, #0xffff
    1dc4:	cbz	x0, 2700 <FSE_decompress+0x12c0>
    1dc8:	and	x1, x22, #0xffff
    1dcc:	add	x20, x15, #0x8
    1dd0:	add	x21, x15, x1
    1dd4:	stp	x15, x20, [sp, #296]
    1dd8:	cmp	x1, #0x7
    1ddc:	ldurb	w0, [x21, #-1]
    1de0:	b.ls	253c <FSE_decompress+0x10fc>  // b.plast
    1de4:	sub	x1, x1, #0x8
    1de8:	add	x2, x15, x1
    1dec:	str	x2, [sp, #288]
    1df0:	ldr	x1, [x15, x1]
    1df4:	str	x1, [sp, #272]
    1df8:	cbz	w0, 246c <FSE_decompress+0x102c>
    1dfc:	clz	w0, w0
    1e00:	sub	w0, w0, #0x17
    1e04:	str	w0, [sp, #280]
    1e08:	cbz	x24, 2f24 <FSE_decompress+0x1ae4>
    1e0c:	add	x0, x21, x27
    1e10:	add	x26, x21, #0x8
    1e14:	stp	x21, x26, [sp, #336]
    1e18:	cmp	x24, #0x7
    1e1c:	ldurb	w0, [x0, #-7]
    1e20:	b.ls	2668 <FSE_decompress+0x1228>  // b.plast
    1e24:	sub	x27, x27, #0xe
    1e28:	add	x1, x21, x27
    1e2c:	str	x1, [sp, #328]
    1e30:	ldr	x1, [x21, x27]
    1e34:	str	x1, [sp, #312]
    1e38:	cbz	w0, 246c <FSE_decompress+0x102c>
    1e3c:	clz	w0, w0
    1e40:	cmn	x24, #0x78
    1e44:	sub	w1, w0, #0x17
    1e48:	str	w1, [sp, #320]
    1e4c:	b.hi	1d0c <FSE_decompress+0x8cc>  // b.pmore
    1e50:	ldr	w0, [sp, #200]
    1e54:	mov	w3, #0x3                   	// #3
    1e58:	cmp	w0, #0x40
    1e5c:	b.hi	1eb0 <FSE_decompress+0xa70>  // b.pmore
    1e60:	ldr	x2, [sp, #208]
    1e64:	cmp	x30, x2
    1e68:	b.ls	2ea0 <FSE_decompress+0x1a60>  // b.plast
    1e6c:	cmp	x11, x2
    1e70:	b.eq	2f80 <FSE_decompress+0x1b40>  // b.none
    1e74:	lsr	w5, w0, #3
    1e78:	lsr	w6, w0, #3
    1e7c:	sub	x5, x2, x5
    1e80:	mov	w3, #0x0                   	// #0
    1e84:	cmp	x11, x5
    1e88:	b.ls	1e9c <FSE_decompress+0xa5c>  // b.plast
    1e8c:	sub	x5, x2, x11
    1e90:	mov	w3, #0x1                   	// #1
    1e94:	mov	w6, w5
    1e98:	sub	x5, x2, w5, uxtw
    1e9c:	ldr	x2, [x5]
    1ea0:	sub	w0, w0, w6, lsl #3
    1ea4:	str	x2, [sp, #192]
    1ea8:	str	w0, [sp, #200]
    1eac:	str	x5, [sp, #208]
    1eb0:	ldr	w0, [sp, #240]
    1eb4:	cmp	w0, #0x40
    1eb8:	b.hi	2f44 <FSE_decompress+0x1b04>  // b.pmore
    1ebc:	ldr	x5, [sp, #128]
    1ec0:	ldr	x2, [sp, #248]
    1ec4:	cmp	x5, x2
    1ec8:	b.ls	2f04 <FSE_decompress+0x1ac4>  // b.plast
    1ecc:	cmp	x10, x2
    1ed0:	b.eq	2f58 <FSE_decompress+0x1b18>  // b.none
    1ed4:	lsr	w5, w0, #3
    1ed8:	lsr	w6, w0, #3
    1edc:	sub	x5, x2, x5
    1ee0:	cmp	x10, x5
    1ee4:	b.ls	1ef8 <FSE_decompress+0xab8>  // b.plast
    1ee8:	sub	x5, x2, x10
    1eec:	orr	w3, w3, #0x1
    1ef0:	mov	w6, w5
    1ef4:	sub	x5, x2, w5, uxtw
    1ef8:	ldr	x2, [x5]
    1efc:	sub	w0, w0, w6, lsl #3
    1f00:	str	x2, [sp, #232]
    1f04:	str	w0, [sp, #240]
    1f08:	str	x5, [sp, #248]
    1f0c:	ldr	w0, [sp, #280]
    1f10:	cmp	w0, #0x40
    1f14:	b.hi	2f3c <FSE_decompress+0x1afc>  // b.pmore
    1f18:	ldr	x2, [sp, #288]
    1f1c:	cmp	x20, x2
    1f20:	b.ls	2ee4 <FSE_decompress+0x1aa4>  // b.plast
    1f24:	cmp	x15, x2
    1f28:	b.eq	2f6c <FSE_decompress+0x1b2c>  // b.none
    1f2c:	lsr	w5, w0, #3
    1f30:	lsr	w6, w0, #3
    1f34:	sub	x5, x2, x5
    1f38:	cmp	x15, x5
    1f3c:	b.ls	1f50 <FSE_decompress+0xb10>  // b.plast
    1f40:	sub	x5, x2, x15
    1f44:	orr	w3, w3, #0x1
    1f48:	mov	w6, w5
    1f4c:	sub	x5, x2, w5, uxtw
    1f50:	ldr	x2, [x5]
    1f54:	sub	w0, w0, w6, lsl #3
    1f58:	str	x2, [sp, #272]
    1f5c:	str	w0, [sp, #280]
    1f60:	str	x5, [sp, #288]
    1f64:	ldr	x5, [sp, #112]
    1f68:	add	x2, x4, #0x4
    1f6c:	ldr	x4, [sp, #328]
    1f70:	add	x0, x5, #0x3
    1f74:	add	x5, x19, x5
    1f78:	str	x5, [sp, #176]
    1f7c:	lsr	x0, x0, #2
    1f80:	cmp	x26, x4
    1f84:	add	x6, x19, x0
    1f88:	str	x6, [sp, #160]
    1f8c:	add	x5, x6, x0
    1f90:	str	x5, [sp, #168]
    1f94:	add	x0, x5, x0
    1f98:	str	x0, [sp, #152]
    1f9c:	b.ls	2ec4 <FSE_decompress+0x1a84>  // b.plast
    1fa0:	cmp	x21, x4
    1fa4:	b.eq	2f4c <FSE_decompress+0x1b0c>  // b.none
    1fa8:	lsr	w0, w1, #3
    1fac:	lsr	w5, w1, #3
    1fb0:	sub	x0, x4, x0
    1fb4:	cmp	x21, x0
    1fb8:	b.ls	1fcc <FSE_decompress+0xb8c>  // b.plast
    1fbc:	sub	x0, x4, x21
    1fc0:	orr	w3, w3, #0x1
    1fc4:	mov	w5, w0
    1fc8:	sub	x0, x4, w0, uxtw
    1fcc:	ldr	x4, [x0]
    1fd0:	sub	w1, w1, w5, lsl #3
    1fd4:	str	x4, [sp, #312]
    1fd8:	str	w1, [sp, #320]
    1fdc:	str	x0, [sp, #328]
    1fe0:	cbnz	w3, 2f4c <FSE_decompress+0x1b0c>
    1fe4:	ldr	x0, [sp, #176]
    1fe8:	ldr	x12, [sp, #152]
    1fec:	sub	x13, x0, #0x3
    1ff0:	cmp	x12, x13
    1ff4:	b.cs	2f4c <FSE_decompress+0x1b0c>  // b.hs, b.nlast
    1ff8:	ldr	w0, [sp, #104]
    1ffc:	mov	x16, x19
    2000:	ldr	w28, [sp, #200]
    2004:	neg	w3, w0
    2008:	ldr	w9, [sp, #240]
    200c:	ldr	w8, [sp, #280]
    2010:	and	w3, w3, #0x3f
    2014:	ldr	w7, [sp, #320]
    2018:	str	wzr, [sp, #120]
    201c:	stp	wzr, wzr, [sp, #140]
    2020:	str	wzr, [sp, #148]
    2024:	str	x19, [sp, #184]
    2028:	ldp	x17, x18, [sp, #160]
    202c:	ldr	x25, [sp, #208]
    2030:	ldr	x24, [sp, #248]
    2034:	ldr	x23, [sp, #288]
    2038:	ldr	x22, [sp, #328]
    203c:	b	2178 <FSE_decompress+0xd38>
    2040:	cmp	x11, x25
    2044:	b.eq	207c <FSE_decompress+0xc3c>  // b.none
    2048:	lsr	w0, w14, #3
    204c:	lsr	w28, w14, #3
    2050:	sub	x0, x25, x0
    2054:	cmp	x11, x0
    2058:	b.ls	2648 <FSE_decompress+0x1208>  // b.plast
    205c:	sub	x0, x25, x11
    2060:	mov	w28, w0
    2064:	sub	x25, x25, w0, uxtw
    2068:	mov	w0, #0x1                   	// #1
    206c:	sub	w28, w14, w28, lsl #3
    2070:	str	w0, [sp, #148]
    2074:	ldr	x0, [x25]
    2078:	str	x0, [sp, #192]
    207c:	mov	w9, w4
    2080:	cmp	w4, #0x40
    2084:	b.hi	20d0 <FSE_decompress+0xc90>  // b.pmore
    2088:	ldr	x0, [sp, #128]
    208c:	cmp	x0, x24
    2090:	b.ls	25f0 <FSE_decompress+0x11b0>  // b.plast
    2094:	cmp	x10, x24
    2098:	b.eq	20d0 <FSE_decompress+0xc90>  // b.none
    209c:	lsr	w0, w4, #3
    20a0:	lsr	w9, w4, #3
    20a4:	sub	x0, x24, x0
    20a8:	cmp	x10, x0
    20ac:	b.ls	2640 <FSE_decompress+0x1200>  // b.plast
    20b0:	sub	x0, x24, x10
    20b4:	mov	w9, w0
    20b8:	sub	x24, x24, w0, uxtw
    20bc:	mov	w0, #0x1                   	// #1
    20c0:	sub	w9, w4, w9, lsl #3
    20c4:	str	w0, [sp, #144]
    20c8:	ldr	x0, [x24]
    20cc:	str	x0, [sp, #232]
    20d0:	mov	w8, w27
    20d4:	cmp	w27, #0x40
    20d8:	b.hi	2120 <FSE_decompress+0xce0>  // b.pmore
    20dc:	cmp	x23, x20
    20e0:	b.cs	2610 <FSE_decompress+0x11d0>  // b.hs, b.nlast
    20e4:	cmp	x15, x23
    20e8:	b.eq	2120 <FSE_decompress+0xce0>  // b.none
    20ec:	lsr	w0, w27, #3
    20f0:	lsr	w8, w27, #3
    20f4:	sub	x0, x23, x0
    20f8:	cmp	x15, x0
    20fc:	b.ls	2630 <FSE_decompress+0x11f0>  // b.plast
    2100:	sub	x0, x23, x15
    2104:	mov	w8, w0
    2108:	sub	x23, x23, w0, uxtw
    210c:	mov	w0, #0x1                   	// #1
    2110:	sub	w8, w27, w8, lsl #3
    2114:	str	w0, [sp, #140]
    2118:	ldr	x0, [x23]
    211c:	str	x0, [sp, #272]
    2120:	mov	w7, w19
    2124:	cmp	w19, #0x40
    2128:	b.hi	2170 <FSE_decompress+0xd30>  // b.pmore
    212c:	cmp	x26, x22
    2130:	b.ls	25d0 <FSE_decompress+0x1190>  // b.plast
    2134:	cmp	x21, x22
    2138:	b.eq	2170 <FSE_decompress+0xd30>  // b.none
    213c:	lsr	w0, w19, #3
    2140:	lsr	w7, w19, #3
    2144:	sub	x0, x22, x0
    2148:	cmp	x21, x0
    214c:	b.ls	2638 <FSE_decompress+0x11f8>  // b.plast
    2150:	sub	x0, x22, x21
    2154:	mov	w7, w0
    2158:	sub	x22, x22, w0, uxtw
    215c:	mov	w0, #0x1                   	// #1
    2160:	sub	w7, w19, w7, lsl #3
    2164:	str	w0, [sp, #120]
    2168:	ldr	x0, [x22]
    216c:	str	x0, [sp, #312]
    2170:	cmp	x13, x12
    2174:	b.ls	2718 <FSE_decompress+0x12d8>  // b.plast
    2178:	ldr	x5, [sp, #192]
    217c:	add	x16, x16, #0x4
    2180:	ldr	x4, [sp, #232]
    2184:	add	x17, x17, #0x4
    2188:	lsl	x0, x5, x28
    218c:	add	x18, x18, #0x4
    2190:	lsr	x0, x0, x3
    2194:	add	x12, x12, #0x4
    2198:	lsl	x0, x0, #1
    219c:	lsl	x6, x4, x9
    21a0:	add	x14, x2, x0
    21a4:	lsr	x6, x6, x3
    21a8:	ldr	x1, [sp, #272]
    21ac:	lsl	x6, x6, #1
    21b0:	ldrb	w27, [x2, x0]
    21b4:	add	x19, x2, x6
    21b8:	ldrb	w14, [x14, #1]
    21bc:	sturb	w27, [x16, #-4]
    21c0:	lsl	x27, x1, x8
    21c4:	ldr	x0, [sp, #312]
    21c8:	lsr	x27, x27, x3
    21cc:	ldrb	w6, [x2, x6]
    21d0:	lsl	x27, x27, #1
    21d4:	add	w14, w14, w28
    21d8:	ldrb	w28, [x19, #1]
    21dc:	add	x19, x2, x27
    21e0:	sturb	w6, [x17, #-4]
    21e4:	lsl	x6, x0, x7
    21e8:	add	w9, w28, w9
    21ec:	lsr	x6, x6, x3
    21f0:	ldrb	w27, [x2, x27]
    21f4:	lsl	x6, x6, #1
    21f8:	ldrb	w28, [x19, #1]
    21fc:	sturb	w27, [x18, #-4]
    2200:	add	x19, x2, x6
    2204:	lsl	x27, x5, x14
    2208:	add	w8, w28, w8
    220c:	ldrb	w6, [x2, x6]
    2210:	lsr	x27, x27, x3
    2214:	lsl	x27, x27, #1
    2218:	ldrb	w19, [x19, #1]
    221c:	add	x28, x2, x27
    2220:	sturb	w6, [x12, #-4]
    2224:	lsl	x6, x4, x9
    2228:	add	w19, w19, w7
    222c:	lsr	x6, x6, x3
    2230:	ldrb	w7, [x2, x27]
    2234:	lsl	x6, x6, #1
    2238:	ldrb	w28, [x28, #1]
    223c:	sturb	w7, [x16, #-3]
    2240:	add	x27, x2, x6
    2244:	lsl	x7, x1, x8
    2248:	add	w14, w28, w14
    224c:	ldrb	w6, [x2, x6]
    2250:	lsr	x7, x7, x3
    2254:	lsl	x7, x7, #1
    2258:	ldrb	w28, [x27, #1]
    225c:	add	x27, x2, x7
    2260:	sturb	w6, [x17, #-3]
    2264:	lsl	x6, x0, x19
    2268:	add	w9, w28, w9
    226c:	lsr	x6, x6, x3
    2270:	ldrb	w7, [x2, x7]
    2274:	lsl	x6, x6, #1
    2278:	ldrb	w28, [x27, #1]
    227c:	sturb	w7, [x18, #-3]
    2280:	add	x27, x2, x6
    2284:	lsl	x7, x5, x14
    2288:	add	w8, w28, w8
    228c:	ldrb	w6, [x2, x6]
    2290:	lsr	x7, x7, x3
    2294:	lsl	x7, x7, #1
    2298:	ldrb	w28, [x27, #1]
    229c:	add	x27, x2, x7
    22a0:	sturb	w6, [x12, #-3]
    22a4:	lsl	x6, x4, x9
    22a8:	add	w19, w28, w19
    22ac:	lsr	x6, x6, x3
    22b0:	ldrb	w7, [x2, x7]
    22b4:	lsl	x6, x6, #1
    22b8:	ldrb	w28, [x27, #1]
    22bc:	sturb	w7, [x16, #-2]
    22c0:	add	x27, x2, x6
    22c4:	lsl	x7, x1, x8
    22c8:	add	w14, w28, w14
    22cc:	ldrb	w6, [x2, x6]
    22d0:	lsr	x7, x7, x3
    22d4:	lsl	x7, x7, #1
    22d8:	ldrb	w28, [x27, #1]
    22dc:	add	x27, x2, x7
    22e0:	sturb	w6, [x17, #-2]
    22e4:	lsl	x6, x0, x19
    22e8:	add	w9, w28, w9
    22ec:	lsr	x6, x6, x3
    22f0:	ldrb	w7, [x2, x7]
    22f4:	lsl	x6, x6, #1
    22f8:	ldrb	w27, [x27, #1]
    22fc:	lsl	x5, x5, x14
    2300:	sturb	w7, [x18, #-2]
    2304:	add	x7, x2, x6
    2308:	lsr	x5, x5, x3
    230c:	ldrb	w6, [x2, x6]
    2310:	lsl	x5, x5, #1
    2314:	lsl	x4, x4, x9
    2318:	add	w8, w27, w8
    231c:	ldrb	w7, [x7, #1]
    2320:	lsr	x4, x4, x3
    2324:	sturb	w6, [x12, #-2]
    2328:	add	x6, x2, x5
    232c:	lsl	x4, x4, #1
    2330:	lsl	x1, x1, x8
    2334:	ldrb	w27, [x2, x5]
    2338:	add	w19, w7, w19
    233c:	ldrb	w5, [x6, #1]
    2340:	add	x6, x2, x4
    2344:	sturb	w27, [x16, #-1]
    2348:	lsr	x1, x1, x3
    234c:	lsl	x1, x1, #1
    2350:	lsl	x0, x0, x19
    2354:	ldrb	w7, [x2, x4]
    2358:	lsr	x0, x0, x3
    235c:	ldrb	w4, [x6, #1]
    2360:	add	x6, x2, x1
    2364:	sturb	w7, [x17, #-1]
    2368:	lsl	x0, x0, #1
    236c:	add	w14, w5, w14
    2370:	add	w4, w4, w9
    2374:	ldrb	w7, [x2, x1]
    2378:	add	x1, x2, x0
    237c:	ldrb	w27, [x6, #1]
    2380:	mov	w28, w14
    2384:	sturb	w7, [x18, #-1]
    2388:	cmp	w14, #0x40
    238c:	add	w27, w27, w8
    2390:	ldrb	w0, [x2, x0]
    2394:	ldrb	w7, [x1, #1]
    2398:	sturb	w0, [x12, #-1]
    239c:	add	w19, w7, w19
    23a0:	b.hi	207c <FSE_decompress+0xc3c>  // b.pmore
    23a4:	cmp	x30, x25
    23a8:	b.hi	2040 <FSE_decompress+0xc00>  // b.pmore
    23ac:	lsr	w0, w14, #3
    23b0:	and	w28, w14, #0x7
    23b4:	sub	x25, x25, x0
    23b8:	mov	w0, #0x1                   	// #1
    23bc:	str	w0, [sp, #148]
    23c0:	ldr	x0, [x25]
    23c4:	str	x0, [sp, #192]
    23c8:	b	207c <FSE_decompress+0xc3c>
    23cc:	ldrb	w1, [x21, #6]
    23d0:	cmp	w25, #0x5
    23d4:	str	x1, [sp, #192]
    23d8:	str	x11, [sp, #208]
    23dc:	b.eq	2448 <FSE_decompress+0x1008>  // b.none
    23e0:	b.hi	2430 <FSE_decompress+0xff0>  // b.pmore
    23e4:	cmp	w25, #0x3
    23e8:	b.eq	23fc <FSE_decompress+0xfbc>  // b.none
    23ec:	cmp	w25, #0x4
    23f0:	b.ne	2454 <FSE_decompress+0x1014>  // b.any
    23f4:	ldrb	w6, [x21, #9]
    23f8:	add	x1, x1, x6, lsl #24
    23fc:	ldrb	w6, [x21, #8]
    2400:	add	x1, x1, x6, lsl #16
    2404:	ldrb	w6, [x21, #7]
    2408:	add	x1, x1, x6, lsl #8
    240c:	str	x1, [sp, #192]
    2410:	cbz	w0, 1d08 <FSE_decompress+0x8c8>
    2414:	mov	w1, #0x9                   	// #9
    2418:	sub	w25, w1, w25
    241c:	clz	w0, w0
    2420:	add	w0, w0, w25, lsl #3
    2424:	sub	w0, w0, #0x1f
    2428:	str	w0, [sp, #200]
    242c:	b	1d7c <FSE_decompress+0x93c>
    2430:	cmp	w25, #0x6
    2434:	b.eq	2440 <FSE_decompress+0x1000>  // b.none
    2438:	ldrb	w6, [x21, #12]
    243c:	add	x1, x1, x6, lsl #48
    2440:	ldrb	w6, [x21, #11]
    2444:	add	x1, x1, x6, lsl #40
    2448:	ldrb	w6, [x21, #10]
    244c:	add	x1, x1, x6, lsl #32
    2450:	b	23f4 <FSE_decompress+0xfb4>
    2454:	cmp	w25, #0x2
    2458:	b.ne	2410 <FSE_decompress+0xfd0>  // b.any
    245c:	ldrb	w6, [x21, #7]
    2460:	add	x1, x1, x6, lsl #8
    2464:	str	x1, [sp, #192]
    2468:	b	2410 <FSE_decompress+0xfd0>
    246c:	mov	x24, #0xffffffffffffffff    	// #-1
    2470:	mov	x0, x24
    2474:	ldp	x19, x20, [sp, #16]
    2478:	ldp	x21, x22, [sp, #32]
    247c:	ldp	x23, x24, [sp, #48]
    2480:	ldp	x25, x26, [sp, #64]
    2484:	ldp	x27, x28, [sp, #80]
    2488:	ldp	x29, x30, [sp], #352
    248c:	ret
    2490:	ldrb	w1, [x11, x28]
    2494:	cmp	w20, #0x5
    2498:	str	x1, [sp, #232]
    249c:	str	x10, [sp, #248]
    24a0:	b.eq	250c <FSE_decompress+0x10cc>  // b.none
    24a4:	b.hi	24f4 <FSE_decompress+0x10b4>  // b.pmore
    24a8:	cmp	w20, #0x3
    24ac:	b.eq	24c0 <FSE_decompress+0x1080>  // b.none
    24b0:	cmp	w20, #0x4
    24b4:	b.ne	2518 <FSE_decompress+0x10d8>  // b.any
    24b8:	ldrb	w6, [x10, #3]
    24bc:	add	x1, x1, x6, lsl #24
    24c0:	ldrb	w6, [x10, #2]
    24c4:	add	x1, x1, x6, lsl #16
    24c8:	ldrb	w6, [x10, #1]
    24cc:	add	x1, x1, x6, lsl #8
    24d0:	str	x1, [sp, #232]
    24d4:	cbz	w0, 1d08 <FSE_decompress+0x8c8>
    24d8:	mov	w1, #0x9                   	// #9
    24dc:	sub	w5, w1, w20
    24e0:	clz	w0, w0
    24e4:	add	w0, w0, w5, lsl #3
    24e8:	sub	w0, w0, #0x1f
    24ec:	str	w0, [sp, #240]
    24f0:	b	1dc0 <FSE_decompress+0x980>
    24f4:	cmp	w20, #0x6
    24f8:	b.eq	2504 <FSE_decompress+0x10c4>  // b.none
    24fc:	ldrb	w6, [x10, #6]
    2500:	add	x1, x1, x6, lsl #48
    2504:	ldrb	w6, [x10, #5]
    2508:	add	x1, x1, x6, lsl #40
    250c:	ldrb	w6, [x10, #4]
    2510:	add	x1, x1, x6, lsl #32
    2514:	b	24b8 <FSE_decompress+0x1078>
    2518:	cmp	w20, #0x2
    251c:	b.eq	24c8 <FSE_decompress+0x1088>  // b.none
    2520:	b	24d4 <FSE_decompress+0x1094>
    2524:	add	x0, sp, #0xc0
    2528:	mov	x2, #0x28                  	// #40
    252c:	mov	w1, #0x0                   	// #0
    2530:	mov	x24, #0xffffffffffffffb8    	// #-72
    2534:	bl	0 <grub_memset>
    2538:	b	1d0c <FSE_decompress+0x8cc>
    253c:	ldrb	w1, [x10, x26]
    2540:	cmp	w22, #0x5
    2544:	str	x1, [sp, #272]
    2548:	str	x15, [sp, #288]
    254c:	b.eq	25b8 <FSE_decompress+0x1178>  // b.none
    2550:	b.hi	25a0 <FSE_decompress+0x1160>  // b.pmore
    2554:	cmp	w22, #0x3
    2558:	b.eq	256c <FSE_decompress+0x112c>  // b.none
    255c:	cmp	w22, #0x4
    2560:	b.ne	25c4 <FSE_decompress+0x1184>  // b.any
    2564:	ldrb	w3, [x15, #3]
    2568:	add	x1, x1, x3, lsl #24
    256c:	ldrb	w3, [x15, #2]
    2570:	add	x1, x1, x3, lsl #16
    2574:	ldrb	w3, [x15, #1]
    2578:	add	x1, x1, x3, lsl #8
    257c:	str	x1, [sp, #272]
    2580:	cbz	w0, 1d08 <FSE_decompress+0x8c8>
    2584:	mov	w1, #0x9                   	// #9
    2588:	sub	w2, w1, w22
    258c:	clz	w0, w0
    2590:	add	w0, w0, w2, lsl #3
    2594:	sub	w0, w0, #0x1f
    2598:	str	w0, [sp, #280]
    259c:	b	1e08 <FSE_decompress+0x9c8>
    25a0:	cmp	w22, #0x6
    25a4:	b.eq	25b0 <FSE_decompress+0x1170>  // b.none
    25a8:	ldrb	w3, [x15, #6]
    25ac:	add	x1, x1, x3, lsl #48
    25b0:	ldrb	w3, [x15, #5]
    25b4:	add	x1, x1, x3, lsl #40
    25b8:	ldrb	w3, [x15, #4]
    25bc:	add	x1, x1, x3, lsl #32
    25c0:	b	2564 <FSE_decompress+0x1124>
    25c4:	cmp	w22, #0x2
    25c8:	b.eq	2574 <FSE_decompress+0x1134>  // b.none
    25cc:	b	2580 <FSE_decompress+0x1140>
    25d0:	lsr	w0, w19, #3
    25d4:	and	w7, w19, #0x7
    25d8:	sub	x22, x22, x0
    25dc:	mov	w0, #0x1                   	// #1
    25e0:	str	w0, [sp, #120]
    25e4:	ldr	x0, [x22]
    25e8:	str	x0, [sp, #312]
    25ec:	b	2170 <FSE_decompress+0xd30>
    25f0:	lsr	w0, w4, #3
    25f4:	and	w9, w4, #0x7
    25f8:	sub	x24, x24, x0
    25fc:	mov	w0, #0x1                   	// #1
    2600:	str	w0, [sp, #144]
    2604:	ldr	x0, [x24]
    2608:	str	x0, [sp, #232]
    260c:	b	20d0 <FSE_decompress+0xc90>
    2610:	lsr	w0, w27, #3
    2614:	and	w8, w27, #0x7
    2618:	sub	x23, x23, x0
    261c:	mov	w0, #0x1                   	// #1
    2620:	str	w0, [sp, #140]
    2624:	ldr	x0, [x23]
    2628:	str	x0, [sp, #272]
    262c:	b	2120 <FSE_decompress+0xce0>
    2630:	mov	x23, x0
    2634:	b	210c <FSE_decompress+0xccc>
    2638:	mov	x22, x0
    263c:	b	215c <FSE_decompress+0xd1c>
    2640:	mov	x24, x0
    2644:	b	20bc <FSE_decompress+0xc7c>
    2648:	mov	x25, x0
    264c:	b	2068 <FSE_decompress+0xc28>
    2650:	add	x0, sp, #0xe8
    2654:	mov	x2, #0x28                  	// #40
    2658:	mov	w1, #0x0                   	// #0
    265c:	mov	x24, #0xffffffffffffffb8    	// #-72
    2660:	bl	0 <grub_memset>
    2664:	b	1d0c <FSE_decompress+0x8cc>
    2668:	ldr	x1, [sp, #120]
    266c:	str	x21, [sp, #328]
    2670:	cmp	x24, #0x5
    2674:	ldrb	w1, [x15, x1]
    2678:	str	x1, [sp, #312]
    267c:	b.eq	26e8 <FSE_decompress+0x12a8>  // b.none
    2680:	b.hi	26d0 <FSE_decompress+0x1290>  // b.pmore
    2684:	cmp	x24, #0x3
    2688:	b.eq	269c <FSE_decompress+0x125c>  // b.none
    268c:	cmp	x24, #0x4
    2690:	b.ne	26f4 <FSE_decompress+0x12b4>  // b.any
    2694:	ldrb	w2, [x21, #3]
    2698:	add	x1, x1, x2, lsl #24
    269c:	ldrb	w2, [x21, #2]
    26a0:	add	x1, x1, x2, lsl #16
    26a4:	ldrb	w2, [x21, #1]
    26a8:	add	x1, x1, x2, lsl #8
    26ac:	str	x1, [sp, #312]
    26b0:	cbz	w0, 1d08 <FSE_decompress+0x8c8>
    26b4:	mov	w1, #0x9                   	// #9
    26b8:	sub	w1, w1, w24
    26bc:	clz	w0, w0
    26c0:	add	w0, w0, w1, lsl #3
    26c4:	sub	w1, w0, #0x1f
    26c8:	str	w1, [sp, #320]
    26cc:	b	1e50 <FSE_decompress+0xa10>
    26d0:	cmp	x24, #0x6
    26d4:	b.eq	26e0 <FSE_decompress+0x12a0>  // b.none
    26d8:	ldrb	w2, [x21, #6]
    26dc:	add	x1, x1, x2, lsl #48
    26e0:	ldrb	w2, [x21, #5]
    26e4:	add	x1, x1, x2, lsl #40
    26e8:	ldrb	w2, [x21, #4]
    26ec:	add	x1, x1, x2, lsl #32
    26f0:	b	2694 <FSE_decompress+0x1254>
    26f4:	cmp	x24, #0x2
    26f8:	b.eq	26a4 <FSE_decompress+0x1264>  // b.none
    26fc:	b	26b0 <FSE_decompress+0x1270>
    2700:	add	x0, sp, #0x110
    2704:	mov	x2, #0x28                  	// #40
    2708:	mov	w1, #0x0                   	// #0
    270c:	mov	x24, #0xffffffffffffffb8    	// #-72
    2710:	bl	0 <grub_memset>
    2714:	b	1d0c <FSE_decompress+0x8cc>
    2718:	ldp	x1, x0, [sp, #168]
    271c:	str	w28, [sp, #200]
    2720:	ldr	x4, [sp, #152]
    2724:	str	w9, [sp, #240]
    2728:	ldr	x19, [sp, #184]
    272c:	str	w8, [sp, #280]
    2730:	sub	x3, x0, #0x4
    2734:	str	w7, [sp, #320]
    2738:	sub	x3, x3, x4
    273c:	ldr	x0, [sp, #160]
    2740:	and	x3, x3, #0xfffffffffffffffc
    2744:	add	x3, x3, #0x4
    2748:	add	x19, x19, x3
    274c:	add	x1, x1, x3
    2750:	add	x0, x0, x3
    2754:	add	x3, x4, x3
    2758:	ldr	w4, [sp, #120]
    275c:	cbz	w4, 2764 <FSE_decompress+0x1324>
    2760:	str	x22, [sp, #328]
    2764:	ldr	w4, [sp, #140]
    2768:	cbz	w4, 2770 <FSE_decompress+0x1330>
    276c:	str	x23, [sp, #288]
    2770:	ldr	w4, [sp, #144]
    2774:	cbz	w4, 277c <FSE_decompress+0x133c>
    2778:	str	x24, [sp, #248]
    277c:	ldr	w4, [sp, #148]
    2780:	cbz	w4, 2788 <FSE_decompress+0x1348>
    2784:	str	x25, [sp, #208]
    2788:	ldr	x4, [sp, #168]
    278c:	cmp	x4, x0
    2790:	ldr	x4, [sp, #160]
    2794:	ccmp	x4, x19, #0x0, cs  // cs = hs, nlast
    2798:	ldr	x4, [sp, #152]
    279c:	cset	w6, cc  // cc = lo, ul, last
    27a0:	cmp	x4, x1
    27a4:	cset	w4, cc  // cc = lo, ul, last
    27a8:	orr	w6, w6, w4
    27ac:	cbnz	w6, 1d08 <FSE_decompress+0x8c8>
    27b0:	ldr	x13, [sp, #208]
    27b4:	ldr	w14, [sp, #200]
    27b8:	mov	x5, x13
    27bc:	cmp	w14, #0x40
    27c0:	b.hi	28b8 <FSE_decompress+0x1478>  // b.pmore
    27c4:	ldr	w4, [sp, #104]
    27c8:	mov	w9, #0x0                   	// #0
    27cc:	neg	w8, w4
    27d0:	ldr	x4, [sp, #160]
    27d4:	and	w8, w8, #0x3f
    27d8:	sub	x12, x4, #0x3
    27dc:	nop
    27e0:	lsr	w4, w14, #3
    27e4:	cmp	x30, x5
    27e8:	sub	x4, x5, x4
    27ec:	b.ls	2da4 <FSE_decompress+0x1964>  // b.plast
    27f0:	cmp	x11, x5
    27f4:	b.eq	2e90 <FSE_decompress+0x1a50>  // b.none
    27f8:	cmp	x11, x4
    27fc:	lsr	w7, w14, #3
    2800:	b.hi	2de4 <FSE_decompress+0x19a4>  // b.pmore
    2804:	cmp	x19, x12
    2808:	mov	x5, x4
    280c:	sub	w14, w14, w7, lsl #3
    2810:	cset	w9, cc  // cc = lo, ul, last
    2814:	ldr	x4, [x4]
    2818:	str	x4, [sp, #192]
    281c:	cbz	w9, 28b0 <FSE_decompress+0x1470>
    2820:	ldr	x4, [sp, #192]
    2824:	add	x19, x19, #0x4
    2828:	lsl	x7, x4, x14
    282c:	lsr	x7, x7, x8
    2830:	lsl	x7, x7, #1
    2834:	add	x16, x2, x7
    2838:	ldrb	w7, [x2, x7]
    283c:	ldrb	w16, [x16, #1]
    2840:	sturb	w7, [x19, #-4]
    2844:	add	w14, w16, w14
    2848:	lsl	x7, x4, x14
    284c:	lsr	x7, x7, x8
    2850:	lsl	x7, x7, #1
    2854:	add	x17, x2, x7
    2858:	ldrb	w16, [x2, x7]
    285c:	ldrb	w7, [x17, #1]
    2860:	sturb	w16, [x19, #-3]
    2864:	add	w16, w7, w14
    2868:	lsl	x7, x4, x16
    286c:	lsr	x7, x7, x8
    2870:	lsl	x7, x7, #1
    2874:	add	x14, x2, x7
    2878:	ldrb	w7, [x2, x7]
    287c:	ldrb	w14, [x14, #1]
    2880:	sturb	w7, [x19, #-2]
    2884:	add	w7, w14, w16
    2888:	lsl	x4, x4, x7
    288c:	lsr	x4, x4, x8
    2890:	lsl	x4, x4, #1
    2894:	add	x14, x2, x4
    2898:	ldrb	w4, [x2, x4]
    289c:	ldrb	w14, [x14, #1]
    28a0:	sturb	w4, [x19, #-1]
    28a4:	add	w14, w14, w7
    28a8:	cmp	w14, #0x40
    28ac:	b.ls	27e0 <FSE_decompress+0x13a0>  // b.plast
    28b0:	str	w14, [sp, #200]
    28b4:	str	x5, [sp, #208]
    28b8:	ldr	x4, [sp, #160]
    28bc:	cmp	x4, x19
    28c0:	b.ls	290c <FSE_decompress+0x14cc>  // b.plast
    28c4:	ldr	w4, [sp, #104]
    28c8:	ldr	w8, [sp, #200]
    28cc:	neg	w7, w4
    28d0:	ldr	x14, [sp, #160]
    28d4:	and	w7, w7, #0x3f
    28d8:	ldr	x13, [sp, #192]
    28dc:	lsl	x4, x13, x8
    28e0:	lsr	x4, x4, x7
    28e4:	lsl	x4, x4, #1
    28e8:	add	x12, x2, x4
    28ec:	ldrb	w9, [x2, x4]
    28f0:	ldrb	w4, [x12, #1]
    28f4:	strb	w9, [x19], #1
    28f8:	add	w4, w4, w8
    28fc:	mov	w8, w4
    2900:	cmp	x14, x19
    2904:	b.ne	28dc <FSE_decompress+0x149c>  // b.any
    2908:	str	w4, [sp, #200]
    290c:	ldr	x14, [sp, #248]
    2910:	ldr	w8, [sp, #240]
    2914:	mov	x7, x14
    2918:	cmp	w8, #0x40
    291c:	b.hi	2a18 <FSE_decompress+0x15d8>  // b.pmore
    2920:	ldr	w4, [sp, #104]
    2924:	mov	w12, #0x0                   	// #0
    2928:	ldr	x17, [sp, #128]
    292c:	neg	w9, w4
    2930:	ldr	x4, [sp, #168]
    2934:	and	w9, w9, #0x3f
    2938:	sub	x13, x4, #0x3
    293c:	nop
    2940:	lsr	w4, w8, #3
    2944:	cmp	x7, x17
    2948:	sub	x4, x7, x4
    294c:	b.cs	2dc4 <FSE_decompress+0x1984>  // b.hs, b.nlast
    2950:	cmp	x10, x7
    2954:	b.eq	2e74 <FSE_decompress+0x1a34>  // b.none
    2958:	cmp	x10, x4
    295c:	lsr	w12, w8, #3
    2960:	b.hi	2e00 <FSE_decompress+0x19c0>  // b.pmore
    2964:	cmp	x0, x13
    2968:	sub	w8, w8, w12, lsl #3
    296c:	mov	x7, x4
    2970:	cset	w12, cc  // cc = lo, ul, last
    2974:	ldr	x4, [x4]
    2978:	str	x4, [sp, #232]
    297c:	cbz	w12, 2fc8 <FSE_decompress+0x1b88>
    2980:	ldr	x4, [sp, #232]
    2984:	add	x0, x0, #0x4
    2988:	lsl	x16, x4, x8
    298c:	lsr	x16, x16, x9
    2990:	lsl	x16, x16, #1
    2994:	add	x19, x2, x16
    2998:	ldrb	w18, [x2, x16]
    299c:	ldrb	w16, [x19, #1]
    29a0:	sturb	w18, [x0, #-4]
    29a4:	add	w8, w16, w8
    29a8:	lsl	x16, x4, x8
    29ac:	lsr	x16, x16, x9
    29b0:	lsl	x16, x16, #1
    29b4:	add	x19, x2, x16
    29b8:	ldrb	w18, [x2, x16]
    29bc:	ldrb	w16, [x19, #1]
    29c0:	sturb	w18, [x0, #-3]
    29c4:	add	w16, w16, w8
    29c8:	lsl	x8, x4, x16
    29cc:	lsr	x8, x8, x9
    29d0:	lsl	x8, x8, #1
    29d4:	add	x19, x2, x8
    29d8:	ldrb	w18, [x2, x8]
    29dc:	ldrb	w8, [x19, #1]
    29e0:	sturb	w18, [x0, #-2]
    29e4:	add	w16, w8, w16
    29e8:	lsl	x4, x4, x16
    29ec:	lsr	x4, x4, x9
    29f0:	lsl	x4, x4, #1
    29f4:	add	x8, x2, x4
    29f8:	ldrb	w4, [x2, x4]
    29fc:	ldrb	w8, [x8, #1]
    2a00:	sturb	w4, [x0, #-1]
    2a04:	add	w8, w8, w16
    2a08:	cmp	w8, #0x40
    2a0c:	b.ls	2940 <FSE_decompress+0x1500>  // b.plast
    2a10:	str	w8, [sp, #240]
    2a14:	str	x7, [sp, #248]
    2a18:	ldr	x4, [sp, #168]
    2a1c:	cmp	x4, x0
    2a20:	b.ls	2a6c <FSE_decompress+0x162c>  // b.plast
    2a24:	ldr	w4, [sp, #104]
    2a28:	ldr	w8, [sp, #240]
    2a2c:	neg	w9, w4
    2a30:	ldr	x16, [sp, #168]
    2a34:	and	w9, w9, #0x3f
    2a38:	ldr	x14, [sp, #232]
    2a3c:	lsl	x4, x14, x8
    2a40:	lsr	x4, x4, x9
    2a44:	lsl	x4, x4, #1
    2a48:	add	x13, x2, x4
    2a4c:	ldrb	w12, [x2, x4]
    2a50:	ldrb	w4, [x13, #1]
    2a54:	strb	w12, [x0], #1
    2a58:	add	w4, w4, w8
    2a5c:	mov	w8, w4
    2a60:	cmp	x16, x0
    2a64:	b.ne	2a3c <FSE_decompress+0x15fc>  // b.any
    2a68:	str	w4, [sp, #240]
    2a6c:	ldr	x14, [sp, #288]
    2a70:	ldr	w0, [sp, #280]
    2a74:	mov	x8, x14
    2a78:	cmp	w0, #0x40
    2a7c:	b.hi	2b70 <FSE_decompress+0x1730>  // b.pmore
    2a80:	ldr	w4, [sp, #104]
    2a84:	mov	w12, #0x0                   	// #0
    2a88:	neg	w9, w4
    2a8c:	ldr	x4, [sp, #152]
    2a90:	and	w9, w9, #0x3f
    2a94:	sub	x13, x4, #0x3
    2a98:	lsr	w4, w0, #3
    2a9c:	cmp	x8, x20
    2aa0:	sub	x4, x8, x4
    2aa4:	b.cs	2d84 <FSE_decompress+0x1944>  // b.hs, b.nlast
    2aa8:	cmp	x15, x8
    2aac:	b.eq	2e64 <FSE_decompress+0x1a24>  // b.none
    2ab0:	cmp	x15, x4
    2ab4:	lsr	w16, w0, #3
    2ab8:	b.hi	2e40 <FSE_decompress+0x1a00>  // b.pmore
    2abc:	cmp	x1, x13
    2ac0:	sub	w16, w0, w16, lsl #3
    2ac4:	cset	w12, cc  // cc = lo, ul, last
    2ac8:	mov	x8, x4
    2acc:	ldr	x0, [x4]
    2ad0:	str	x0, [sp, #272]
    2ad4:	cbz	w12, 2e58 <FSE_decompress+0x1a18>
    2ad8:	ldr	x0, [sp, #272]
    2adc:	add	x1, x1, #0x4
    2ae0:	lsl	x4, x0, x16
    2ae4:	lsr	x4, x4, x9
    2ae8:	lsl	x4, x4, #1
    2aec:	add	x18, x2, x4
    2af0:	ldrb	w17, [x2, x4]
    2af4:	ldrb	w4, [x18, #1]
    2af8:	sturb	w17, [x1, #-4]
    2afc:	add	w16, w4, w16
    2b00:	lsl	x4, x0, x16
    2b04:	lsr	x4, x4, x9
    2b08:	lsl	x4, x4, #1
    2b0c:	add	x18, x2, x4
    2b10:	ldrb	w17, [x2, x4]
    2b14:	ldrb	w4, [x18, #1]
    2b18:	sturb	w17, [x1, #-3]
    2b1c:	add	w16, w4, w16
    2b20:	lsl	x4, x0, x16
    2b24:	lsr	x4, x4, x9
    2b28:	lsl	x4, x4, #1
    2b2c:	add	x18, x2, x4
    2b30:	ldrb	w17, [x2, x4]
    2b34:	ldrb	w4, [x18, #1]
    2b38:	sturb	w17, [x1, #-2]
    2b3c:	add	w4, w4, w16
    2b40:	lsl	x0, x0, x4
    2b44:	lsr	x0, x0, x9
    2b48:	lsl	x0, x0, #1
    2b4c:	add	x17, x2, x0
    2b50:	ldrb	w16, [x2, x0]
    2b54:	ldrb	w0, [x17, #1]
    2b58:	sturb	w16, [x1, #-1]
    2b5c:	add	w0, w0, w4
    2b60:	cmp	w0, #0x40
    2b64:	b.ls	2a98 <FSE_decompress+0x1658>  // b.plast
    2b68:	str	w0, [sp, #280]
    2b6c:	str	x8, [sp, #288]
    2b70:	ldr	x0, [sp, #152]
    2b74:	cmp	x0, x1
    2b78:	b.ls	2bc4 <FSE_decompress+0x1784>  // b.plast
    2b7c:	ldr	w0, [sp, #104]
    2b80:	ldr	w4, [sp, #280]
    2b84:	neg	w9, w0
    2b88:	ldr	x16, [sp, #152]
    2b8c:	and	w9, w9, #0x3f
    2b90:	ldr	x14, [sp, #272]
    2b94:	lsl	x0, x14, x4
    2b98:	lsr	x0, x0, x9
    2b9c:	lsl	x0, x0, #1
    2ba0:	add	x13, x2, x0
    2ba4:	ldrb	w12, [x2, x0]
    2ba8:	ldrb	w0, [x13, #1]
    2bac:	strb	w12, [x1], #1
    2bb0:	add	w0, w0, w4
    2bb4:	mov	w4, w0
    2bb8:	cmp	x16, x1
    2bbc:	b.ne	2b94 <FSE_decompress+0x1754>  // b.any
    2bc0:	str	w0, [sp, #280]
    2bc4:	ldr	x14, [sp, #328]
    2bc8:	ldr	w0, [sp, #320]
    2bcc:	mov	x9, x14
    2bd0:	cmp	w0, #0x40
    2bd4:	b.hi	2cc4 <FSE_decompress+0x1884>  // b.pmore
    2bd8:	ldr	w1, [sp, #104]
    2bdc:	neg	w12, w1
    2be0:	ldr	x1, [sp, #176]
    2be4:	and	w12, w12, #0x3f
    2be8:	sub	x13, x1, #0x3
    2bec:	nop
    2bf0:	lsr	w1, w0, #3
    2bf4:	cmp	x26, x9
    2bf8:	sub	x1, x9, x1
    2bfc:	b.ls	2d64 <FSE_decompress+0x1924>  // b.plast
    2c00:	cmp	x21, x9
    2c04:	b.eq	2e84 <FSE_decompress+0x1a44>  // b.none
    2c08:	cmp	x21, x1
    2c0c:	lsr	w4, w0, #3
    2c10:	b.hi	2e24 <FSE_decompress+0x19e4>  // b.pmore
    2c14:	cmp	x3, x13
    2c18:	mov	x9, x1
    2c1c:	sub	w0, w0, w4, lsl #3
    2c20:	cset	w6, cc  // cc = lo, ul, last
    2c24:	ldr	x1, [x1]
    2c28:	str	x1, [sp, #312]
    2c2c:	cbz	w6, 2cc0 <FSE_decompress+0x1880>
    2c30:	ldr	x1, [sp, #312]
    2c34:	add	x3, x3, #0x4
    2c38:	lsl	x4, x1, x0
    2c3c:	lsr	x4, x4, x12
    2c40:	lsl	x4, x4, #1
    2c44:	add	x17, x2, x4
    2c48:	ldrb	w16, [x2, x4]
    2c4c:	ldrb	w4, [x17, #1]
    2c50:	sturb	w16, [x3, #-4]
    2c54:	add	w0, w4, w0
    2c58:	lsl	x4, x1, x0
    2c5c:	lsr	x4, x4, x12
    2c60:	lsl	x4, x4, #1
    2c64:	add	x17, x2, x4
    2c68:	ldrb	w16, [x2, x4]
    2c6c:	ldrb	w4, [x17, #1]
    2c70:	sturb	w16, [x3, #-3]
    2c74:	add	w4, w4, w0
    2c78:	lsl	x0, x1, x4
    2c7c:	lsr	x0, x0, x12
    2c80:	lsl	x0, x0, #1
    2c84:	add	x17, x2, x0
    2c88:	ldrb	w16, [x2, x0]
    2c8c:	ldrb	w0, [x17, #1]
    2c90:	sturb	w16, [x3, #-2]
    2c94:	add	w4, w0, w4
    2c98:	lsl	x0, x1, x4
    2c9c:	lsr	x0, x0, x12
    2ca0:	lsl	x0, x0, #1
    2ca4:	add	x16, x2, x0
    2ca8:	ldrb	w1, [x2, x0]
    2cac:	ldrb	w0, [x16, #1]
    2cb0:	sturb	w1, [x3, #-1]
    2cb4:	add	w0, w0, w4
    2cb8:	cmp	w0, #0x40
    2cbc:	b.ls	2bf0 <FSE_decompress+0x17b0>  // b.plast
    2cc0:	str	w0, [sp, #320]
    2cc4:	ldr	x0, [sp, #176]
    2cc8:	cmp	x0, x3
    2ccc:	b.ls	2d18 <FSE_decompress+0x18d8>  // b.plast
    2cd0:	ldr	w0, [sp, #104]
    2cd4:	ldr	w1, [sp, #320]
    2cd8:	neg	w4, w0
    2cdc:	ldr	x14, [sp, #176]
    2ce0:	and	w4, w4, #0x3f
    2ce4:	ldr	x13, [sp, #312]
    2ce8:	lsl	x0, x13, x1
    2cec:	lsr	x0, x0, x4
    2cf0:	lsl	x0, x0, #1
    2cf4:	add	x12, x2, x0
    2cf8:	ldrb	w6, [x2, x0]
    2cfc:	ldrb	w0, [x12, #1]
    2d00:	strb	w6, [x3], #1
    2d04:	add	w0, w0, w1
    2d08:	mov	w1, w0
    2d0c:	cmp	x14, x3
    2d10:	b.ne	2ce8 <FSE_decompress+0x18a8>  // b.any
    2d14:	str	w0, [sp, #320]
    2d18:	cmp	x11, x5
    2d1c:	mov	w0, #0x0                   	// #0
    2d20:	b.eq	2fb8 <FSE_decompress+0x1b78>  // b.none
    2d24:	cmp	x10, x7
    2d28:	b.eq	2fa8 <FSE_decompress+0x1b68>  // b.none
    2d2c:	mov	w0, #0x0                   	// #0
    2d30:	cmp	x15, x8
    2d34:	b.ne	1d08 <FSE_decompress+0x8c8>  // b.any
    2d38:	ldr	w1, [sp, #280]
    2d3c:	cmp	w1, #0x40
    2d40:	b.ne	1d08 <FSE_decompress+0x8c8>  // b.any
    2d44:	cmp	x21, x9
    2d48:	b.ne	1d08 <FSE_decompress+0x8c8>  // b.any
    2d4c:	ldr	w1, [sp, #320]
    2d50:	cmp	w1, #0x40
    2d54:	b.ne	1d08 <FSE_decompress+0x8c8>  // b.any
    2d58:	cbz	w0, 1d08 <FSE_decompress+0x8c8>
    2d5c:	ldr	x24, [sp, #112]
    2d60:	b	1d0c <FSE_decompress+0x8cc>
    2d64:	lsr	w1, w0, #3
    2d68:	cmp	x3, x13
    2d6c:	sub	x9, x9, x1
    2d70:	and	w0, w0, #0x7
    2d74:	cset	w6, cc  // cc = lo, ul, last
    2d78:	ldr	x1, [x9]
    2d7c:	str	x1, [sp, #312]
    2d80:	b	2c2c <FSE_decompress+0x17ec>
    2d84:	lsr	w4, w0, #3
    2d88:	cmp	x1, x13
    2d8c:	sub	x8, x8, x4
    2d90:	and	w16, w0, #0x7
    2d94:	cset	w12, cc  // cc = lo, ul, last
    2d98:	ldr	x0, [x8]
    2d9c:	str	x0, [sp, #272]
    2da0:	b	2ad4 <FSE_decompress+0x1694>
    2da4:	lsr	w4, w14, #3
    2da8:	cmp	x19, x12
    2dac:	sub	x5, x5, x4
    2db0:	and	w14, w14, #0x7
    2db4:	cset	w9, cc  // cc = lo, ul, last
    2db8:	ldr	x4, [x5]
    2dbc:	str	x4, [sp, #192]
    2dc0:	b	281c <FSE_decompress+0x13dc>
    2dc4:	lsr	w4, w8, #3
    2dc8:	cmp	x0, x13
    2dcc:	sub	x7, x7, x4
    2dd0:	and	w8, w8, #0x7
    2dd4:	cset	w12, cc  // cc = lo, ul, last
    2dd8:	ldr	x4, [x7]
    2ddc:	str	x4, [sp, #232]
    2de0:	b	297c <FSE_decompress+0x153c>
    2de4:	sub	w7, w5, w11
    2de8:	sub	x4, x5, x11
    2dec:	sub	x5, x5, x7
    2df0:	sub	w14, w14, w4, lsl #3
    2df4:	ldr	x4, [x5]
    2df8:	str	x4, [sp, #192]
    2dfc:	b	28b0 <FSE_decompress+0x1470>
    2e00:	sub	w4, w7, w10
    2e04:	sub	x16, x7, x10
    2e08:	sub	x7, x7, x4
    2e0c:	sub	w16, w8, w16, lsl #3
    2e10:	ldr	x4, [x7]
    2e14:	str	x4, [sp, #232]
    2e18:	str	w16, [sp, #240]
    2e1c:	str	x7, [sp, #248]
    2e20:	b	2a18 <FSE_decompress+0x15d8>
    2e24:	sub	w4, w9, w21
    2e28:	sub	x1, x9, x21
    2e2c:	sub	x9, x9, x4
    2e30:	sub	w0, w0, w1, lsl #3
    2e34:	ldr	x1, [x9]
    2e38:	str	x1, [sp, #312]
    2e3c:	b	2cc0 <FSE_decompress+0x1880>
    2e40:	sub	w4, w8, w15
    2e44:	sub	x16, x8, x15
    2e48:	sub	x8, x8, x4
    2e4c:	sub	w16, w0, w16, lsl #3
    2e50:	ldr	x0, [x8]
    2e54:	str	x0, [sp, #272]
    2e58:	str	w16, [sp, #280]
    2e5c:	str	x8, [sp, #288]
    2e60:	b	2b70 <FSE_decompress+0x1730>
    2e64:	cbz	w12, 2f98 <FSE_decompress+0x1b58>
    2e68:	str	w0, [sp, #280]
    2e6c:	str	x15, [sp, #288]
    2e70:	b	2b70 <FSE_decompress+0x1730>
    2e74:	cbz	w12, 2fa0 <FSE_decompress+0x1b60>
    2e78:	str	w8, [sp, #240]
    2e7c:	str	x10, [sp, #248]
    2e80:	b	2a18 <FSE_decompress+0x15d8>
    2e84:	cbnz	w6, 2cc0 <FSE_decompress+0x1880>
    2e88:	mov	x9, x14
    2e8c:	b	2cc4 <FSE_decompress+0x1884>
    2e90:	cbz	w9, 2f90 <FSE_decompress+0x1b50>
    2e94:	str	w14, [sp, #200]
    2e98:	str	x11, [sp, #208]
    2e9c:	b	28b8 <FSE_decompress+0x1478>
    2ea0:	lsr	w3, w0, #3
    2ea4:	and	w0, w0, #0x7
    2ea8:	sub	x2, x2, x3
    2eac:	str	w0, [sp, #200]
    2eb0:	mov	w3, #0x0                   	// #0
    2eb4:	str	x2, [sp, #208]
    2eb8:	ldr	x0, [x2]
    2ebc:	str	x0, [sp, #192]
    2ec0:	b	1eb0 <FSE_decompress+0xa70>
    2ec4:	lsr	w5, w1, #3
    2ec8:	and	w0, w1, #0x7
    2ecc:	sub	x4, x4, x5
    2ed0:	str	w0, [sp, #320]
    2ed4:	str	x4, [sp, #328]
    2ed8:	ldr	x0, [x4]
    2edc:	str	x0, [sp, #312]
    2ee0:	b	1fe0 <FSE_decompress+0xba0>
    2ee4:	lsr	w5, w0, #3
    2ee8:	and	w0, w0, #0x7
    2eec:	sub	x2, x2, x5
    2ef0:	str	w0, [sp, #280]
    2ef4:	str	x2, [sp, #288]
    2ef8:	ldr	x0, [x2]
    2efc:	str	x0, [sp, #272]
    2f00:	b	1f64 <FSE_decompress+0xb24>
    2f04:	lsr	w5, w0, #3
    2f08:	and	w0, w0, #0x7
    2f0c:	sub	x2, x2, x5
    2f10:	str	w0, [sp, #240]
    2f14:	str	x2, [sp, #248]
    2f18:	ldr	x0, [x2]
    2f1c:	str	x0, [sp, #232]
    2f20:	b	1f0c <FSE_decompress+0xacc>
    2f24:	add	x0, sp, #0x138
    2f28:	mov	x2, #0x28                  	// #40
    2f2c:	mov	w1, #0x0                   	// #0
    2f30:	mov	x24, #0xffffffffffffffb8    	// #-72
    2f34:	bl	0 <grub_memset>
    2f38:	b	1d0c <FSE_decompress+0x8cc>
    2f3c:	mov	w3, #0x3                   	// #3
    2f40:	b	1f64 <FSE_decompress+0xb24>
    2f44:	mov	w3, #0x3                   	// #3
    2f48:	b	1f0c <FSE_decompress+0xacc>
    2f4c:	ldp	x3, x0, [sp, #152]
    2f50:	ldr	x1, [sp, #168]
    2f54:	b	2788 <FSE_decompress+0x1348>
    2f58:	cmp	w0, #0x40
    2f5c:	orr	w0, w3, #0x1
    2f60:	orr	w3, w3, #0x2
    2f64:	csel	w3, w3, w0, eq  // eq = none
    2f68:	b	1f0c <FSE_decompress+0xacc>
    2f6c:	cmp	w0, #0x40
    2f70:	orr	w0, w3, #0x1
    2f74:	orr	w3, w3, #0x2
    2f78:	csel	w3, w3, w0, eq  // eq = none
    2f7c:	b	1f64 <FSE_decompress+0xb24>
    2f80:	cmp	w0, #0x40
    2f84:	cset	w3, eq  // eq = none
    2f88:	add	w3, w3, #0x1
    2f8c:	b	1eb0 <FSE_decompress+0xa70>
    2f90:	mov	x5, x13
    2f94:	b	28b8 <FSE_decompress+0x1478>
    2f98:	mov	x8, x14
    2f9c:	b	2b70 <FSE_decompress+0x1730>
    2fa0:	mov	x7, x14
    2fa4:	b	2a18 <FSE_decompress+0x15d8>
    2fa8:	ldr	w1, [sp, #240]
    2fac:	cmp	w1, #0x40
    2fb0:	csel	w0, w0, wzr, eq  // eq = none
    2fb4:	b	2d30 <FSE_decompress+0x18f0>
    2fb8:	ldr	w0, [sp, #200]
    2fbc:	cmp	w0, #0x40
    2fc0:	cset	w0, eq  // eq = none
    2fc4:	b	2d24 <FSE_decompress+0x18e4>
    2fc8:	mov	w16, w8
    2fcc:	b	2e18 <FSE_decompress+0x19d8>
    2fd0:	stp	x29, x30, [sp, #-304]!
    2fd4:	mov	x29, sp
    2fd8:	stp	x25, x26, [sp, #64]
    2fdc:	ldrh	w25, [x2]
    2fe0:	stp	x27, x28, [sp, #80]
    2fe4:	ldrh	w28, [x2, #2]
    2fe8:	stp	x23, x24, [sp, #48]
    2fec:	mov	x23, x3
    2ff0:	ldrh	w3, [x2, #4]
    2ff4:	and	x26, x28, #0xffff
    2ff8:	stp	x21, x22, [sp, #32]
    2ffc:	mov	x21, x2
    3000:	and	x2, x3, #0xffff
    3004:	stp	x2, x1, [sp, #112]
    3008:	add	x1, x26, w25, uxth
    300c:	sub	x27, x23, w3, uxth
    3010:	stp	x19, x20, [sp, #16]
    3014:	sub	x27, x27, x1
    3018:	mov	x19, x4
    301c:	mov	x20, x0
    3020:	sub	x24, x27, #0x6
    3024:	mov	x0, x4
    3028:	str	w3, [sp, #104]
    302c:	bl	1470 <FSE_decompress+0x30>
    3030:	ldr	w3, [sp, #104]
    3034:	cmp	x23, x24
    3038:	b.cs	3060 <FSE_decompress+0x1c20>  // b.hs, b.nlast
    303c:	mov	x24, #0xffffffffffffffec    	// #-20
    3040:	mov	x0, x24
    3044:	ldp	x19, x20, [sp, #16]
    3048:	ldp	x21, x22, [sp, #32]
    304c:	ldp	x23, x24, [sp, #48]
    3050:	ldp	x25, x26, [sp, #64]
    3054:	ldp	x27, x28, [sp, #80]
    3058:	ldp	x29, x30, [sp], #304
    305c:	ret
    3060:	and	x22, x25, #0xffff
    3064:	cbz	x22, 39fc <FSE_decompress+0x25bc>
    3068:	add	x2, x21, #0x6
    306c:	ubfx	x0, x0, #16, #8
    3070:	add	x1, x2, x22
    3074:	add	x8, x21, #0xe
    3078:	str	x0, [sp, #104]
    307c:	cmp	x22, #0x7
    3080:	stp	x2, x8, [sp, #168]
    3084:	ldurb	w0, [x1, #-1]
    3088:	b.ls	38a4 <FSE_decompress+0x2464>  // b.plast
    308c:	sub	x7, x22, #0x8
    3090:	add	x9, x2, x7
    3094:	str	x9, [sp, #160]
    3098:	ldr	x7, [x2, x7]
    309c:	str	x7, [sp, #144]
    30a0:	cbz	w0, 3944 <FSE_decompress+0x2504>
    30a4:	clz	w0, w0
    30a8:	sub	w0, w0, #0x17
    30ac:	str	w0, [sp, #152]
    30b0:	cbz	x26, 3b50 <FSE_decompress+0x2710>
    30b4:	add	x0, x1, x26
    30b8:	add	x9, x1, #0x8
    30bc:	stp	x1, x9, [sp, #208]
    30c0:	cmp	x26, #0x7
    30c4:	ldurb	w7, [x0, #-1]
    30c8:	b.ls	3968 <FSE_decompress+0x2528>  // b.plast
    30cc:	sub	x5, x26, #0x8
    30d0:	add	x6, x1, x5
    30d4:	str	x6, [sp, #200]
    30d8:	ldr	x5, [x1, x5]
    30dc:	str	x5, [sp, #184]
    30e0:	cbz	w7, 3944 <FSE_decompress+0x2504>
    30e4:	clz	w7, w7
    30e8:	sub	w7, w7, #0x17
    30ec:	str	w7, [sp, #192]
    30f0:	ldr	x4, [sp, #112]
    30f4:	cbz	x4, 3ea0 <FSE_decompress+0x2a60>
    30f8:	ldr	x4, [sp, #112]
    30fc:	add	x7, x0, #0x8
    3100:	stp	x0, x7, [sp, #248]
    3104:	add	x5, x0, x4
    3108:	cmp	x4, #0x7
    310c:	ldurb	w6, [x5, #-1]
    3110:	b.ls	3a14 <FSE_decompress+0x25d4>  // b.plast
    3114:	sub	x3, x4, #0x8
    3118:	add	x4, x0, x3
    311c:	str	x4, [sp, #240]
    3120:	ldr	x3, [x0, x3]
    3124:	str	x3, [sp, #224]
    3128:	cbz	w6, 3944 <FSE_decompress+0x2504>
    312c:	clz	w3, w6
    3130:	sub	w3, w3, #0x17
    3134:	str	w3, [sp, #232]
    3138:	cbz	x24, 4910 <FSE_decompress+0x34d0>
    313c:	add	x3, x5, x27
    3140:	add	x6, x5, #0x8
    3144:	stp	x5, x6, [sp, #288]
    3148:	cmp	x24, #0x7
    314c:	ldurb	w3, [x3, #-7]
    3150:	b.ls	3d28 <FSE_decompress+0x28e8>  // b.plast
    3154:	sub	x27, x27, #0xe
    3158:	add	x4, x5, x27
    315c:	str	x4, [sp, #280]
    3160:	ldr	x4, [x5, x27]
    3164:	str	x4, [sp, #264]
    3168:	cbz	w3, 3944 <FSE_decompress+0x2504>
    316c:	clz	w3, w3
    3170:	cmn	x24, #0x78
    3174:	sub	w3, w3, #0x17
    3178:	str	w3, [sp, #272]
    317c:	b.hi	3040 <FSE_decompress+0x1c00>  // b.pmore
    3180:	ldr	w10, [sp, #152]
    3184:	mov	w4, #0x3                   	// #3
    3188:	cmp	w10, #0x40
    318c:	b.hi	31e0 <FSE_decompress+0x1da0>  // b.pmore
    3190:	ldr	x11, [sp, #160]
    3194:	cmp	x8, x11
    3198:	b.ls	488c <FSE_decompress+0x344c>  // b.plast
    319c:	cmp	x2, x11
    31a0:	b.eq	4964 <FSE_decompress+0x3524>  // b.none
    31a4:	lsr	w8, w10, #3
    31a8:	lsr	w12, w10, #3
    31ac:	sub	x8, x11, x8
    31b0:	mov	w4, #0x0                   	// #0
    31b4:	cmp	x2, x8
    31b8:	b.ls	31cc <FSE_decompress+0x1d8c>  // b.plast
    31bc:	sub	x2, x11, x2
    31c0:	mov	w4, #0x1                   	// #1
    31c4:	mov	w12, w2
    31c8:	sub	x8, x11, w2, uxtw
    31cc:	ldr	x2, [x8]
    31d0:	sub	w10, w10, w12, lsl #3
    31d4:	str	x2, [sp, #144]
    31d8:	str	w10, [sp, #152]
    31dc:	str	x8, [sp, #160]
    31e0:	ldr	w2, [sp, #192]
    31e4:	cmp	w2, #0x40
    31e8:	b.hi	4930 <FSE_decompress+0x34f0>  // b.pmore
    31ec:	ldr	x8, [sp, #200]
    31f0:	cmp	x9, x8
    31f4:	b.ls	48d0 <FSE_decompress+0x3490>  // b.plast
    31f8:	cmp	x1, x8
    31fc:	b.eq	4974 <FSE_decompress+0x3534>  // b.none
    3200:	lsr	w9, w2, #3
    3204:	lsr	w10, w2, #3
    3208:	sub	x9, x8, x9
    320c:	cmp	x1, x9
    3210:	b.ls	3224 <FSE_decompress+0x1de4>  // b.plast
    3214:	sub	x1, x8, x1
    3218:	orr	w4, w4, #0x1
    321c:	mov	w10, w1
    3220:	sub	x9, x8, w1, uxtw
    3224:	ldr	x1, [x9]
    3228:	sub	w2, w2, w10, lsl #3
    322c:	str	x1, [sp, #184]
    3230:	str	w2, [sp, #192]
    3234:	str	x9, [sp, #200]
    3238:	ldr	w1, [sp, #232]
    323c:	cmp	w1, #0x40
    3240:	b.hi	4928 <FSE_decompress+0x34e8>  // b.pmore
    3244:	ldr	x2, [sp, #240]
    3248:	cmp	x7, x2
    324c:	b.ls	48b0 <FSE_decompress+0x3470>  // b.plast
    3250:	cmp	x0, x2
    3254:	b.eq	4988 <FSE_decompress+0x3548>  // b.none
    3258:	lsr	w7, w1, #3
    325c:	lsr	w8, w1, #3
    3260:	sub	x7, x2, x7
    3264:	cmp	x0, x7
    3268:	b.ls	327c <FSE_decompress+0x1e3c>  // b.plast
    326c:	sub	x0, x2, x0
    3270:	orr	w4, w4, #0x1
    3274:	mov	w8, w0
    3278:	sub	x7, x2, w0, uxtw
    327c:	ldr	x0, [x7]
    3280:	sub	w1, w1, w8, lsl #3
    3284:	str	x0, [sp, #224]
    3288:	str	w1, [sp, #232]
    328c:	str	x7, [sp, #240]
    3290:	ldr	x2, [sp, #120]
    3294:	add	x19, x19, #0x4
    3298:	ldr	x1, [sp, #280]
    329c:	add	x0, x2, #0x3
    32a0:	add	x2, x20, x2
    32a4:	lsr	x0, x0, #2
    32a8:	cmp	x6, x1
    32ac:	add	x7, x20, x0
    32b0:	str	x7, [sp, #112]
    32b4:	add	x28, x7, x0
    32b8:	add	x0, x28, x0
    32bc:	stp	x0, x2, [sp, #128]
    32c0:	b.ls	48f0 <FSE_decompress+0x34b0>  // b.plast
    32c4:	cmp	x5, x1
    32c8:	b.eq	499c <FSE_decompress+0x355c>  // b.none
    32cc:	lsr	w0, w3, #3
    32d0:	lsr	w2, w3, #3
    32d4:	sub	x0, x1, x0
    32d8:	cmp	x5, x0
    32dc:	b.ls	32f0 <FSE_decompress+0x1eb0>  // b.plast
    32e0:	sub	x0, x1, x5
    32e4:	orr	w4, w4, #0x1
    32e8:	mov	w2, w0
    32ec:	sub	x0, x1, w0, uxtw
    32f0:	ldr	x1, [x0]
    32f4:	sub	w2, w3, w2, lsl #3
    32f8:	str	x1, [sp, #264]
    32fc:	str	w2, [sp, #272]
    3300:	str	x0, [sp, #280]
    3304:	ldp	x23, x0, [sp, #128]
    3308:	cmp	w4, #0x0
    330c:	sub	x27, x0, #0x7
    3310:	ccmp	x23, x27, #0x2, eq  // eq = none
    3314:	b.cs	3b68 <FSE_decompress+0x2728>  // b.hs, b.nlast
    3318:	ldr	w0, [sp, #104]
    331c:	mov	x25, x28
    3320:	ldr	x24, [sp, #112]
    3324:	neg	w21, w0
    3328:	and	w21, w21, #0x3f
    332c:	b	34a0 <FSE_decompress+0x2060>
    3330:	ldr	x5, [sp, #168]
    3334:	cmp	x3, x5
    3338:	b.eq	3b40 <FSE_decompress+0x2700>  // b.none
    333c:	lsr	w4, w1, #3
    3340:	lsr	w6, w1, #3
    3344:	sub	x4, x3, x4
    3348:	mov	w2, #0x0                   	// #0
    334c:	cmp	x5, x4
    3350:	b.ls	3364 <FSE_decompress+0x1f24>  // b.plast
    3354:	sub	x4, x3, x5
    3358:	mov	w2, #0x1                   	// #1
    335c:	mov	w6, w4
    3360:	sub	x4, x3, w4, uxtw
    3364:	ldr	x3, [x4]
    3368:	sub	w1, w1, w6, lsl #3
    336c:	str	x3, [sp, #144]
    3370:	str	w1, [sp, #152]
    3374:	str	x4, [sp, #160]
    3378:	ldr	w1, [sp, #192]
    337c:	cmp	w1, #0x40
    3380:	b.hi	3b08 <FSE_decompress+0x26c8>  // b.pmore
    3384:	ldr	x3, [sp, #200]
    3388:	ldr	x4, [sp, #216]
    338c:	cmp	x3, x4
    3390:	b.cs	3ac8 <FSE_decompress+0x2688>  // b.hs, b.nlast
    3394:	ldr	x5, [sp, #208]
    3398:	cmp	x3, x5
    339c:	b.eq	3b18 <FSE_decompress+0x26d8>  // b.none
    33a0:	lsr	w4, w1, #3
    33a4:	lsr	w6, w1, #3
    33a8:	sub	x4, x3, x4
    33ac:	cmp	x5, x4
    33b0:	b.ls	33c4 <FSE_decompress+0x1f84>  // b.plast
    33b4:	sub	x4, x3, x5
    33b8:	orr	w2, w2, #0x1
    33bc:	mov	w6, w4
    33c0:	sub	x4, x3, w4, uxtw
    33c4:	ldr	x3, [x4]
    33c8:	sub	w1, w1, w6, lsl #3
    33cc:	str	x3, [sp, #184]
    33d0:	str	w1, [sp, #192]
    33d4:	str	x4, [sp, #200]
    33d8:	ldr	w1, [sp, #232]
    33dc:	cmp	w1, #0x40
    33e0:	b.hi	3b10 <FSE_decompress+0x26d0>  // b.pmore
    33e4:	ldr	x3, [sp, #240]
    33e8:	ldr	x4, [sp, #256]
    33ec:	cmp	x3, x4
    33f0:	b.cs	3ae8 <FSE_decompress+0x26a8>  // b.hs, b.nlast
    33f4:	ldr	x5, [sp, #248]
    33f8:	cmp	x3, x5
    33fc:	b.eq	3b2c <FSE_decompress+0x26ec>  // b.none
    3400:	lsr	w4, w1, #3
    3404:	lsr	w6, w1, #3
    3408:	sub	x4, x3, x4
    340c:	cmp	x5, x4
    3410:	b.ls	3424 <FSE_decompress+0x1fe4>  // b.plast
    3414:	sub	x4, x3, x5
    3418:	orr	w2, w2, #0x1
    341c:	mov	w6, w4
    3420:	sub	x4, x3, w4, uxtw
    3424:	ldr	x3, [x4]
    3428:	sub	w1, w1, w6, lsl #3
    342c:	str	x3, [sp, #224]
    3430:	str	w1, [sp, #232]
    3434:	str	x4, [sp, #240]
    3438:	cmp	w0, #0x40
    343c:	b.hi	3b78 <FSE_decompress+0x2738>  // b.pmore
    3440:	ldr	x1, [sp, #280]
    3444:	ldr	x3, [sp, #296]
    3448:	cmp	x1, x3
    344c:	b.cs	3aa8 <FSE_decompress+0x2668>  // b.hs, b.nlast
    3450:	ldr	x4, [sp, #288]
    3454:	cmp	x1, x4
    3458:	b.eq	3b78 <FSE_decompress+0x2738>  // b.none
    345c:	lsr	w3, w0, #3
    3460:	lsr	w5, w0, #3
    3464:	sub	x3, x1, x3
    3468:	cmp	x4, x3
    346c:	b.ls	3480 <FSE_decompress+0x2040>  // b.plast
    3470:	sub	x3, x1, x4
    3474:	orr	w2, w2, #0x1
    3478:	mov	w5, w3
    347c:	sub	x3, x1, w3, uxtw
    3480:	ldr	x1, [x3]
    3484:	sub	w0, w0, w5, lsl #3
    3488:	str	x1, [sp, #264]
    348c:	str	w0, [sp, #272]
    3490:	str	x3, [sp, #280]
    3494:	cmp	w2, #0x0
    3498:	ccmp	x23, x27, #0x2, eq  // eq = none
    349c:	b.cs	3b78 <FSE_decompress+0x2738>  // b.hs, b.nlast
    34a0:	ldr	x1, [sp, #144]
    34a4:	mov	x0, x20
    34a8:	ldr	w3, [sp, #152]
    34ac:	mov	x2, #0x2                   	// #2
    34b0:	lsl	x1, x1, x3
    34b4:	lsr	x1, x1, x21
    34b8:	add	x22, x19, x1, lsl #2
    34bc:	mov	x1, x22
    34c0:	bl	0 <grub_memmove>
    34c4:	ldr	x3, [sp, #184]
    34c8:	mov	x0, x24
    34cc:	ldr	w6, [sp, #192]
    34d0:	mov	x2, #0x2                   	// #2
    34d4:	ldrb	w4, [x22, #2]
    34d8:	ldrb	w5, [x22, #3]
    34dc:	lsl	x1, x3, x6
    34e0:	ldr	w3, [sp, #152]
    34e4:	lsr	x1, x1, x21
    34e8:	add	x20, x20, x5
    34ec:	add	w3, w3, w4
    34f0:	add	x22, x19, x1, lsl #2
    34f4:	mov	x1, x22
    34f8:	str	w3, [sp, #152]
    34fc:	bl	0 <grub_memmove>
    3500:	ldr	x3, [sp, #224]
    3504:	mov	x0, x25
    3508:	ldr	w6, [sp, #232]
    350c:	mov	x2, #0x2                   	// #2
    3510:	ldrb	w4, [x22, #2]
    3514:	ldrb	w5, [x22, #3]
    3518:	lsl	x1, x3, x6
    351c:	ldr	w3, [sp, #192]
    3520:	lsr	x1, x1, x21
    3524:	add	x24, x24, x5
    3528:	add	w3, w3, w4
    352c:	add	x22, x19, x1, lsl #2
    3530:	mov	x1, x22
    3534:	str	w3, [sp, #192]
    3538:	bl	0 <grub_memmove>
    353c:	ldr	x3, [sp, #264]
    3540:	mov	x0, x23
    3544:	ldr	w6, [sp, #272]
    3548:	mov	x2, #0x2                   	// #2
    354c:	ldrb	w4, [x22, #2]
    3550:	ldrb	w5, [x22, #3]
    3554:	lsl	x1, x3, x6
    3558:	ldr	w3, [sp, #232]
    355c:	lsr	x1, x1, x21
    3560:	add	x25, x25, x5
    3564:	add	w3, w3, w4
    3568:	add	x22, x19, x1, lsl #2
    356c:	mov	x1, x22
    3570:	str	w3, [sp, #232]
    3574:	bl	0 <grub_memmove>
    3578:	ldr	x3, [sp, #144]
    357c:	mov	x0, x20
    3580:	ldr	w6, [sp, #152]
    3584:	mov	x2, #0x2                   	// #2
    3588:	ldrb	w4, [x22, #2]
    358c:	ldrb	w5, [x22, #3]
    3590:	lsl	x1, x3, x6
    3594:	ldr	w3, [sp, #272]
    3598:	lsr	x1, x1, x21
    359c:	add	x23, x23, x5
    35a0:	add	w3, w3, w4
    35a4:	add	x22, x19, x1, lsl #2
    35a8:	mov	x1, x22
    35ac:	str	w3, [sp, #272]
    35b0:	bl	0 <grub_memmove>
    35b4:	ldr	x3, [sp, #184]
    35b8:	mov	x0, x24
    35bc:	ldr	w6, [sp, #192]
    35c0:	mov	x2, #0x2                   	// #2
    35c4:	ldrb	w4, [x22, #2]
    35c8:	ldrb	w5, [x22, #3]
    35cc:	lsl	x1, x3, x6
    35d0:	ldr	w3, [sp, #152]
    35d4:	lsr	x1, x1, x21
    35d8:	add	x20, x20, x5
    35dc:	add	w3, w3, w4
    35e0:	add	x22, x19, x1, lsl #2
    35e4:	mov	x1, x22
    35e8:	str	w3, [sp, #152]
    35ec:	bl	0 <grub_memmove>
    35f0:	ldr	x3, [sp, #224]
    35f4:	mov	x0, x25
    35f8:	ldr	w6, [sp, #232]
    35fc:	mov	x2, #0x2                   	// #2
    3600:	ldrb	w4, [x22, #2]
    3604:	ldrb	w5, [x22, #3]
    3608:	lsl	x1, x3, x6
    360c:	ldr	w3, [sp, #192]
    3610:	lsr	x1, x1, x21
    3614:	add	x24, x24, x5
    3618:	add	w3, w3, w4
    361c:	add	x22, x19, x1, lsl #2
    3620:	mov	x1, x22
    3624:	str	w3, [sp, #192]
    3628:	bl	0 <grub_memmove>
    362c:	ldr	x3, [sp, #264]
    3630:	mov	x0, x23
    3634:	ldr	w6, [sp, #272]
    3638:	mov	x2, #0x2                   	// #2
    363c:	ldrb	w4, [x22, #2]
    3640:	ldrb	w5, [x22, #3]
    3644:	lsl	x1, x3, x6
    3648:	ldr	w3, [sp, #232]
    364c:	lsr	x1, x1, x21
    3650:	add	x25, x25, x5
    3654:	add	w3, w3, w4
    3658:	add	x22, x19, x1, lsl #2
    365c:	mov	x1, x22
    3660:	str	w3, [sp, #232]
    3664:	bl	0 <grub_memmove>
    3668:	ldr	x3, [sp, #144]
    366c:	mov	x0, x20
    3670:	ldr	w6, [sp, #152]
    3674:	mov	x2, #0x2                   	// #2
    3678:	ldrb	w4, [x22, #2]
    367c:	ldrb	w5, [x22, #3]
    3680:	lsl	x1, x3, x6
    3684:	ldr	w3, [sp, #272]
    3688:	lsr	x1, x1, x21
    368c:	add	x23, x23, x5
    3690:	add	w3, w3, w4
    3694:	add	x22, x19, x1, lsl #2
    3698:	mov	x1, x22
    369c:	str	w3, [sp, #272]
    36a0:	bl	0 <grub_memmove>
    36a4:	ldr	x3, [sp, #184]
    36a8:	mov	x0, x24
    36ac:	ldr	w6, [sp, #192]
    36b0:	mov	x2, #0x2                   	// #2
    36b4:	ldrb	w4, [x22, #2]
    36b8:	ldrb	w5, [x22, #3]
    36bc:	lsl	x1, x3, x6
    36c0:	ldr	w3, [sp, #152]
    36c4:	lsr	x1, x1, x21
    36c8:	add	x20, x20, x5
    36cc:	add	w3, w3, w4
    36d0:	add	x22, x19, x1, lsl #2
    36d4:	mov	x1, x22
    36d8:	str	w3, [sp, #152]
    36dc:	bl	0 <grub_memmove>
    36e0:	ldr	x3, [sp, #224]
    36e4:	mov	x0, x25
    36e8:	ldr	w6, [sp, #232]
    36ec:	mov	x2, #0x2                   	// #2
    36f0:	ldrb	w4, [x22, #2]
    36f4:	ldrb	w5, [x22, #3]
    36f8:	lsl	x1, x3, x6
    36fc:	ldr	w3, [sp, #192]
    3700:	lsr	x1, x1, x21
    3704:	add	x24, x24, x5
    3708:	add	w3, w3, w4
    370c:	add	x22, x19, x1, lsl #2
    3710:	mov	x1, x22
    3714:	str	w3, [sp, #192]
    3718:	bl	0 <grub_memmove>
    371c:	ldr	x3, [sp, #264]
    3720:	mov	x0, x23
    3724:	ldr	w6, [sp, #272]
    3728:	mov	x2, #0x2                   	// #2
    372c:	ldrb	w4, [x22, #2]
    3730:	ldrb	w5, [x22, #3]
    3734:	lsl	x1, x3, x6
    3738:	ldr	w3, [sp, #232]
    373c:	lsr	x1, x1, x21
    3740:	add	x25, x25, x5
    3744:	add	w3, w3, w4
    3748:	add	x22, x19, x1, lsl #2
    374c:	mov	x1, x22
    3750:	str	w3, [sp, #232]
    3754:	bl	0 <grub_memmove>
    3758:	ldr	x3, [sp, #144]
    375c:	mov	x0, x20
    3760:	ldr	w6, [sp, #152]
    3764:	mov	x2, #0x2                   	// #2
    3768:	ldrb	w4, [x22, #2]
    376c:	ldrb	w5, [x22, #3]
    3770:	lsl	x1, x3, x6
    3774:	ldr	w3, [sp, #272]
    3778:	lsr	x1, x1, x21
    377c:	add	x23, x23, x5
    3780:	add	w3, w3, w4
    3784:	add	x22, x19, x1, lsl #2
    3788:	mov	x1, x22
    378c:	str	w3, [sp, #272]
    3790:	bl	0 <grub_memmove>
    3794:	ldr	x3, [sp, #184]
    3798:	mov	x0, x24
    379c:	ldr	w6, [sp, #192]
    37a0:	mov	x2, #0x2                   	// #2
    37a4:	ldrb	w4, [x22, #2]
    37a8:	ldrb	w5, [x22, #3]
    37ac:	lsl	x1, x3, x6
    37b0:	ldr	w3, [sp, #152]
    37b4:	lsr	x1, x1, x21
    37b8:	add	x20, x20, x5
    37bc:	add	w3, w3, w4
    37c0:	add	x22, x19, x1, lsl #2
    37c4:	mov	x1, x22
    37c8:	str	w3, [sp, #152]
    37cc:	bl	0 <grub_memmove>
    37d0:	ldr	x3, [sp, #224]
    37d4:	mov	x0, x25
    37d8:	ldr	w6, [sp, #232]
    37dc:	mov	x2, #0x2                   	// #2
    37e0:	ldrb	w4, [x22, #2]
    37e4:	ldrb	w5, [x22, #3]
    37e8:	lsl	x1, x3, x6
    37ec:	ldr	w3, [sp, #192]
    37f0:	lsr	x1, x1, x21
    37f4:	add	x24, x24, x5
    37f8:	add	w3, w3, w4
    37fc:	add	x22, x19, x1, lsl #2
    3800:	mov	x1, x22
    3804:	str	w3, [sp, #192]
    3808:	bl	0 <grub_memmove>
    380c:	ldr	x3, [sp, #264]
    3810:	mov	x0, x23
    3814:	ldr	w6, [sp, #272]
    3818:	mov	x2, #0x2                   	// #2
    381c:	ldrb	w4, [x22, #2]
    3820:	ldrb	w5, [x22, #3]
    3824:	lsl	x1, x3, x6
    3828:	ldr	w3, [sp, #232]
    382c:	lsr	x1, x1, x21
    3830:	add	x25, x25, x5
    3834:	add	w3, w3, w4
    3838:	add	x22, x19, x1, lsl #2
    383c:	mov	x1, x22
    3840:	str	w3, [sp, #232]
    3844:	bl	0 <grub_memmove>
    3848:	ldr	w0, [sp, #272]
    384c:	mov	w2, #0x3                   	// #3
    3850:	ldrb	w4, [x22, #2]
    3854:	ldrb	w3, [x22, #3]
    3858:	ldr	w1, [sp, #152]
    385c:	add	w0, w4, w0
    3860:	str	w0, [sp, #272]
    3864:	add	x23, x23, x3
    3868:	cmp	w1, #0x40
    386c:	b.hi	3378 <FSE_decompress+0x1f38>  // b.pmore
    3870:	ldr	x3, [sp, #160]
    3874:	ldr	x2, [sp, #176]
    3878:	cmp	x3, x2
    387c:	b.cc	3330 <FSE_decompress+0x1ef0>  // b.lo, b.ul, b.last
    3880:	lsr	w2, w1, #3
    3884:	and	w1, w1, #0x7
    3888:	sub	x3, x3, x2
    388c:	str	w1, [sp, #152]
    3890:	mov	w2, #0x0                   	// #0
    3894:	str	x3, [sp, #160]
    3898:	ldr	x1, [x3]
    389c:	str	x1, [sp, #144]
    38a0:	b	3378 <FSE_decompress+0x1f38>
    38a4:	ldrb	w7, [x21, #6]
    38a8:	cmp	w25, #0x5
    38ac:	str	x7, [sp, #144]
    38b0:	str	x2, [sp, #160]
    38b4:	b.eq	3920 <FSE_decompress+0x24e0>  // b.none
    38b8:	b.hi	3908 <FSE_decompress+0x24c8>  // b.pmore
    38bc:	cmp	w25, #0x3
    38c0:	b.eq	38d4 <FSE_decompress+0x2494>  // b.none
    38c4:	cmp	w25, #0x4
    38c8:	b.ne	392c <FSE_decompress+0x24ec>  // b.any
    38cc:	ldrb	w9, [x21, #9]
    38d0:	add	x7, x7, x9, lsl #24
    38d4:	ldrb	w9, [x21, #8]
    38d8:	add	x7, x7, x9, lsl #16
    38dc:	ldrb	w9, [x21, #7]
    38e0:	add	x7, x7, x9, lsl #8
    38e4:	str	x7, [sp, #144]
    38e8:	cbz	w0, 303c <FSE_decompress+0x1bfc>
    38ec:	mov	w7, #0x9                   	// #9
    38f0:	sub	w25, w7, w25
    38f4:	clz	w0, w0
    38f8:	add	w0, w0, w25, lsl #3
    38fc:	sub	w0, w0, #0x1f
    3900:	str	w0, [sp, #152]
    3904:	b	30b0 <FSE_decompress+0x1c70>
    3908:	cmp	w25, #0x6
    390c:	b.eq	3918 <FSE_decompress+0x24d8>  // b.none
    3910:	ldrb	w9, [x21, #12]
    3914:	add	x7, x7, x9, lsl #48
    3918:	ldrb	w9, [x21, #11]
    391c:	add	x7, x7, x9, lsl #40
    3920:	ldrb	w9, [x21, #10]
    3924:	add	x7, x7, x9, lsl #32
    3928:	b	38cc <FSE_decompress+0x248c>
    392c:	cmp	w25, #0x2
    3930:	b.ne	38e8 <FSE_decompress+0x24a8>  // b.any
    3934:	ldrb	w9, [x21, #7]
    3938:	add	x7, x7, x9, lsl #8
    393c:	str	x7, [sp, #144]
    3940:	b	38e8 <FSE_decompress+0x24a8>
    3944:	mov	x24, #0xffffffffffffffff    	// #-1
    3948:	mov	x0, x24
    394c:	ldp	x19, x20, [sp, #16]
    3950:	ldp	x21, x22, [sp, #32]
    3954:	ldp	x23, x24, [sp, #48]
    3958:	ldp	x25, x26, [sp, #64]
    395c:	ldp	x27, x28, [sp, #80]
    3960:	ldp	x29, x30, [sp], #304
    3964:	ret
    3968:	ldrb	w5, [x2, x22]
    396c:	cmp	w28, #0x5
    3970:	str	x5, [sp, #184]
    3974:	str	x1, [sp, #200]
    3978:	b.eq	39e4 <FSE_decompress+0x25a4>  // b.none
    397c:	b.hi	39cc <FSE_decompress+0x258c>  // b.pmore
    3980:	cmp	w28, #0x3
    3984:	b.eq	3998 <FSE_decompress+0x2558>  // b.none
    3988:	cmp	w28, #0x4
    398c:	b.ne	39f0 <FSE_decompress+0x25b0>  // b.any
    3990:	ldrb	w10, [x1, #3]
    3994:	add	x5, x5, x10, lsl #24
    3998:	ldrb	w10, [x1, #2]
    399c:	add	x5, x5, x10, lsl #16
    39a0:	ldrb	w10, [x1, #1]
    39a4:	add	x5, x5, x10, lsl #8
    39a8:	str	x5, [sp, #184]
    39ac:	cbz	w7, 303c <FSE_decompress+0x1bfc>
    39b0:	mov	w5, #0x9                   	// #9
    39b4:	sub	w6, w5, w28
    39b8:	clz	w7, w7
    39bc:	add	w7, w7, w6, lsl #3
    39c0:	sub	w7, w7, #0x1f
    39c4:	str	w7, [sp, #192]
    39c8:	b	30f0 <FSE_decompress+0x1cb0>
    39cc:	cmp	w28, #0x6
    39d0:	b.eq	39dc <FSE_decompress+0x259c>  // b.none
    39d4:	ldrb	w10, [x1, #6]
    39d8:	add	x5, x5, x10, lsl #48
    39dc:	ldrb	w10, [x1, #5]
    39e0:	add	x5, x5, x10, lsl #40
    39e4:	ldrb	w10, [x1, #4]
    39e8:	add	x5, x5, x10, lsl #32
    39ec:	b	3990 <FSE_decompress+0x2550>
    39f0:	cmp	w28, #0x2
    39f4:	b.eq	39a0 <FSE_decompress+0x2560>  // b.none
    39f8:	b	39ac <FSE_decompress+0x256c>
    39fc:	add	x0, sp, #0x90
    3a00:	mov	x2, #0x28                  	// #40
    3a04:	mov	w1, #0x0                   	// #0
    3a08:	mov	x24, #0xffffffffffffffb8    	// #-72
    3a0c:	bl	0 <grub_memset>
    3a10:	b	3040 <FSE_decompress+0x1c00>
    3a14:	ldrb	w4, [x1, x26]
    3a18:	cmp	w3, #0x5
    3a1c:	str	x4, [sp, #224]
    3a20:	str	x0, [sp, #240]
    3a24:	b.eq	3a90 <FSE_decompress+0x2650>  // b.none
    3a28:	b.hi	3a78 <FSE_decompress+0x2638>  // b.pmore
    3a2c:	cmp	w3, #0x3
    3a30:	b.eq	3a44 <FSE_decompress+0x2604>  // b.none
    3a34:	cmp	w3, #0x4
    3a38:	b.ne	3a9c <FSE_decompress+0x265c>  // b.any
    3a3c:	ldrb	w10, [x0, #3]
    3a40:	add	x4, x4, x10, lsl #24
    3a44:	ldrb	w10, [x0, #2]
    3a48:	add	x4, x4, x10, lsl #16
    3a4c:	ldrb	w10, [x0, #1]
    3a50:	add	x4, x4, x10, lsl #8
    3a54:	str	x4, [sp, #224]
    3a58:	cbz	w6, 303c <FSE_decompress+0x1bfc>
    3a5c:	mov	w4, #0x9                   	// #9
    3a60:	sub	w3, w4, w3
    3a64:	clz	w6, w6
    3a68:	add	w6, w6, w3, lsl #3
    3a6c:	sub	w6, w6, #0x1f
    3a70:	str	w6, [sp, #232]
    3a74:	b	3138 <FSE_decompress+0x1cf8>
    3a78:	cmp	w3, #0x6
    3a7c:	b.eq	3a88 <FSE_decompress+0x2648>  // b.none
    3a80:	ldrb	w10, [x0, #6]
    3a84:	add	x4, x4, x10, lsl #48
    3a88:	ldrb	w10, [x0, #5]
    3a8c:	add	x4, x4, x10, lsl #40
    3a90:	ldrb	w10, [x0, #4]
    3a94:	add	x4, x4, x10, lsl #32
    3a98:	b	3a3c <FSE_decompress+0x25fc>
    3a9c:	cmp	w3, #0x2
    3aa0:	b.eq	3a4c <FSE_decompress+0x260c>  // b.none
    3aa4:	b	3a58 <FSE_decompress+0x2618>
    3aa8:	lsr	w3, w0, #3
    3aac:	and	w0, w0, #0x7
    3ab0:	sub	x1, x1, x3
    3ab4:	str	w0, [sp, #272]
    3ab8:	str	x1, [sp, #280]
    3abc:	ldr	x0, [x1]
    3ac0:	str	x0, [sp, #264]
    3ac4:	b	3494 <FSE_decompress+0x2054>
    3ac8:	lsr	w4, w1, #3
    3acc:	and	w1, w1, #0x7
    3ad0:	sub	x3, x3, x4
    3ad4:	str	w1, [sp, #192]
    3ad8:	str	x3, [sp, #200]
    3adc:	ldr	x1, [x3]
    3ae0:	str	x1, [sp, #184]
    3ae4:	b	33d8 <FSE_decompress+0x1f98>
    3ae8:	lsr	w4, w1, #3
    3aec:	and	w1, w1, #0x7
    3af0:	sub	x3, x3, x4
    3af4:	str	w1, [sp, #232]
    3af8:	str	x3, [sp, #240]
    3afc:	ldr	x1, [x3]
    3b00:	str	x1, [sp, #224]
    3b04:	b	3438 <FSE_decompress+0x1ff8>
    3b08:	mov	w2, #0x3                   	// #3
    3b0c:	b	33d8 <FSE_decompress+0x1f98>
    3b10:	mov	w2, #0x3                   	// #3
    3b14:	b	3438 <FSE_decompress+0x1ff8>
    3b18:	cmp	w1, #0x40
    3b1c:	orr	w1, w2, #0x1
    3b20:	orr	w2, w2, #0x2
    3b24:	csel	w2, w2, w1, eq  // eq = none
    3b28:	b	33d8 <FSE_decompress+0x1f98>
    3b2c:	cmp	w1, #0x40
    3b30:	orr	w1, w2, #0x1
    3b34:	orr	w2, w2, #0x2
    3b38:	csel	w2, w2, w1, eq  // eq = none
    3b3c:	b	3438 <FSE_decompress+0x1ff8>
    3b40:	cmp	w1, #0x40
    3b44:	cset	w2, eq  // eq = none
    3b48:	add	w2, w2, #0x1
    3b4c:	b	3378 <FSE_decompress+0x1f38>
    3b50:	add	x0, sp, #0xb8
    3b54:	mov	x2, #0x28                  	// #40
    3b58:	mov	w1, #0x0                   	// #0
    3b5c:	mov	x24, #0xffffffffffffffb8    	// #-72
    3b60:	bl	0 <grub_memset>
    3b64:	b	3040 <FSE_decompress+0x1c00>
    3b68:	ldr	x24, [sp, #112]
    3b6c:	mov	x25, x28
    3b70:	ldr	x23, [sp, #128]
    3b74:	nop
    3b78:	ldr	x0, [sp, #112]
    3b7c:	ldr	x1, [sp, #128]
    3b80:	cmp	x0, x20
    3b84:	ccmp	x28, x24, #0x0, cs  // cs = hs, nlast
    3b88:	cset	w0, cc  // cc = lo, ul, last
    3b8c:	cmp	x1, x25
    3b90:	cset	w1, cc  // cc = lo, ul, last
    3b94:	orr	w0, w0, w1
    3b98:	cbnz	w0, 303c <FSE_decompress+0x1bfc>
    3b9c:	ldr	w1, [sp, #152]
    3ba0:	cmp	w1, #0x40
    3ba4:	b.hi	4938 <FSE_decompress+0x34f8>  // b.pmore
    3ba8:	ldr	w0, [sp, #104]
    3bac:	neg	w21, w0
    3bb0:	ldr	x0, [sp, #112]
    3bb4:	and	w21, w21, #0x3f
    3bb8:	sub	x22, x0, #0x7
    3bbc:	b	3ce4 <FSE_decompress+0x28a4>
    3bc0:	ldr	x4, [sp, #168]
    3bc4:	cmp	x2, x4
    3bc8:	b.eq	3dc0 <FSE_decompress+0x2980>  // b.none
    3bcc:	sub	x7, x2, x4
    3bd0:	cmp	x4, x0
    3bd4:	mov	w5, #0x0                   	// #0
    3bd8:	b.hi	3eb8 <FSE_decompress+0x2a78>  // b.pmore
    3bdc:	cmp	x20, x22
    3be0:	cset	w5, cc  // cc = lo, ul, last
    3be4:	str	x0, [sp, #160]
    3be8:	sub	w1, w1, w6, lsl #3
    3bec:	ldr	x0, [x0]
    3bf0:	str	x0, [sp, #144]
    3bf4:	str	w1, [sp, #152]
    3bf8:	mov	x0, x20
    3bfc:	mov	x2, #0x2                   	// #2
    3c00:	cbz	w5, 3dc0 <FSE_decompress+0x2980>
    3c04:	ldr	x3, [sp, #144]
    3c08:	lsl	x1, x3, x1
    3c0c:	lsr	x1, x1, x21
    3c10:	add	x26, x19, x1, lsl #2
    3c14:	mov	x1, x26
    3c18:	bl	0 <grub_memmove>
    3c1c:	ldr	w5, [sp, #152]
    3c20:	mov	x2, #0x2                   	// #2
    3c24:	ldrb	w4, [x26, #2]
    3c28:	ldr	x3, [sp, #144]
    3c2c:	add	w1, w4, w5
    3c30:	str	w1, [sp, #152]
    3c34:	ldrb	w0, [x26, #3]
    3c38:	lsl	x1, x3, x1
    3c3c:	lsr	x1, x1, x21
    3c40:	add	x20, x20, x0
    3c44:	add	x26, x19, x1, lsl #2
    3c48:	mov	x0, x20
    3c4c:	mov	x1, x26
    3c50:	bl	0 <grub_memmove>
    3c54:	ldr	w5, [sp, #152]
    3c58:	mov	x2, #0x2                   	// #2
    3c5c:	ldrb	w3, [x26, #2]
    3c60:	ldr	x0, [sp, #144]
    3c64:	add	w1, w3, w5
    3c68:	ldrb	w4, [x26, #3]
    3c6c:	str	w1, [sp, #152]
    3c70:	lsl	x1, x0, x1
    3c74:	add	x20, x20, x4
    3c78:	lsr	x1, x1, x21
    3c7c:	mov	x0, x20
    3c80:	add	x26, x19, x1, lsl #2
    3c84:	mov	x1, x26
    3c88:	bl	0 <grub_memmove>
    3c8c:	ldr	w5, [sp, #152]
    3c90:	mov	x2, #0x2                   	// #2
    3c94:	ldrb	w3, [x26, #2]
    3c98:	ldr	x0, [sp, #144]
    3c9c:	add	w1, w3, w5
    3ca0:	ldrb	w4, [x26, #3]
    3ca4:	str	w1, [sp, #152]
    3ca8:	lsl	x1, x0, x1
    3cac:	add	x20, x20, x4
    3cb0:	lsr	x1, x1, x21
    3cb4:	mov	x0, x20
    3cb8:	add	x26, x19, x1, lsl #2
    3cbc:	mov	x1, x26
    3cc0:	bl	0 <grub_memmove>
    3cc4:	ldr	w3, [sp, #152]
    3cc8:	ldrb	w2, [x26, #2]
    3ccc:	ldrb	w0, [x26, #3]
    3cd0:	add	w1, w2, w3
    3cd4:	str	w1, [sp, #152]
    3cd8:	add	x20, x20, x0
    3cdc:	cmp	w1, #0x40
    3ce0:	b.hi	4938 <FSE_decompress+0x34f8>  // b.pmore
    3ce4:	ldr	x2, [sp, #160]
    3ce8:	lsr	w0, w1, #3
    3cec:	ldr	x3, [sp, #176]
    3cf0:	lsr	w6, w1, #3
    3cf4:	sub	x0, x2, x0
    3cf8:	cmp	x2, x3
    3cfc:	b.cc	3bc0 <FSE_decompress+0x2780>  // b.lo, b.ul, b.last
    3d00:	lsr	w0, w1, #3
    3d04:	cmp	x20, x22
    3d08:	sub	x2, x2, x0
    3d0c:	and	w1, w1, #0x7
    3d10:	cset	w5, cc  // cc = lo, ul, last
    3d14:	ldr	x0, [x2]
    3d18:	str	x0, [sp, #144]
    3d1c:	str	w1, [sp, #152]
    3d20:	str	x2, [sp, #160]
    3d24:	b	3bf8 <FSE_decompress+0x27b8>
    3d28:	ldr	x4, [sp, #112]
    3d2c:	str	x5, [sp, #280]
    3d30:	cmp	x24, #0x5
    3d34:	ldrb	w4, [x0, x4]
    3d38:	str	x4, [sp, #264]
    3d3c:	b.eq	3da8 <FSE_decompress+0x2968>  // b.none
    3d40:	b.hi	3d90 <FSE_decompress+0x2950>  // b.pmore
    3d44:	cmp	x24, #0x3
    3d48:	b.eq	3d5c <FSE_decompress+0x291c>  // b.none
    3d4c:	cmp	x24, #0x4
    3d50:	b.ne	3db4 <FSE_decompress+0x2974>  // b.any
    3d54:	ldrb	w10, [x5, #3]
    3d58:	add	x4, x4, x10, lsl #24
    3d5c:	ldrb	w10, [x5, #2]
    3d60:	add	x4, x4, x10, lsl #16
    3d64:	ldrb	w10, [x5, #1]
    3d68:	add	x4, x4, x10, lsl #8
    3d6c:	str	x4, [sp, #264]
    3d70:	cbz	w3, 303c <FSE_decompress+0x1bfc>
    3d74:	mov	w4, #0x9                   	// #9
    3d78:	sub	w24, w4, w24
    3d7c:	clz	w3, w3
    3d80:	add	w3, w3, w24, lsl #3
    3d84:	sub	w3, w3, #0x1f
    3d88:	str	w3, [sp, #272]
    3d8c:	b	3180 <FSE_decompress+0x1d40>
    3d90:	cmp	x24, #0x6
    3d94:	b.eq	3da0 <FSE_decompress+0x2960>  // b.none
    3d98:	ldrb	w10, [x5, #6]
    3d9c:	add	x4, x4, x10, lsl #48
    3da0:	ldrb	w10, [x5, #5]
    3da4:	add	x4, x4, x10, lsl #40
    3da8:	ldrb	w10, [x5, #4]
    3dac:	add	x4, x4, x10, lsl #32
    3db0:	b	3d54 <FSE_decompress+0x2914>
    3db4:	cmp	x24, #0x2
    3db8:	b.eq	3d64 <FSE_decompress+0x2924>  // b.none
    3dbc:	b	3d70 <FSE_decompress+0x2930>
    3dc0:	ldr	x1, [sp, #112]
    3dc4:	ldr	w0, [sp, #152]
    3dc8:	sub	x21, x1, #0x2
    3dcc:	cmp	w0, #0x40
    3dd0:	b.hi	3ee4 <FSE_decompress+0x2aa4>  // b.pmore
    3dd4:	ldr	w1, [sp, #104]
    3dd8:	neg	w1, w1
    3ddc:	and	w22, w1, #0x3f
    3de0:	b	3e60 <FSE_decompress+0x2a20>
    3de4:	ldr	x3, [sp, #168]
    3de8:	cmp	x1, x3
    3dec:	b.eq	3ee4 <FSE_decompress+0x2aa4>  // b.none
    3df0:	cmp	x3, x2
    3df4:	b.hi	3ec4 <FSE_decompress+0x2a84>  // b.pmore
    3df8:	cmp	x20, x21
    3dfc:	sub	w0, w0, w4, lsl #3
    3e00:	cset	w3, ls  // ls = plast
    3e04:	ldr	x1, [x2]
    3e08:	str	x1, [sp, #144]
    3e0c:	str	w0, [sp, #152]
    3e10:	str	x2, [sp, #160]
    3e14:	mov	x0, x20
    3e18:	mov	x2, #0x2                   	// #2
    3e1c:	cbz	w3, 3ee4 <FSE_decompress+0x2aa4>
    3e20:	ldr	x1, [sp, #144]
    3e24:	ldr	w3, [sp, #152]
    3e28:	lsl	x1, x1, x3
    3e2c:	lsr	x1, x1, x22
    3e30:	add	x26, x19, x1, lsl #2
    3e34:	mov	x1, x26
    3e38:	bl	0 <grub_memmove>
    3e3c:	ldr	w2, [sp, #152]
    3e40:	ldrb	w0, [x26, #2]
    3e44:	ldrb	w1, [x26, #3]
    3e48:	add	w0, w0, w2
    3e4c:	str	w0, [sp, #152]
    3e50:	add	x20, x20, x1
    3e54:	cmp	w0, #0x40
    3e58:	b.hi	3ee4 <FSE_decompress+0x2aa4>  // b.pmore
    3e5c:	ldr	x3, [sp, #176]
    3e60:	lsr	w2, w0, #3
    3e64:	ldr	x1, [sp, #160]
    3e68:	lsr	w4, w0, #3
    3e6c:	sub	x2, x1, x2
    3e70:	cmp	x1, x3
    3e74:	b.cc	3de4 <FSE_decompress+0x29a4>  // b.lo, b.ul, b.last
    3e78:	lsr	w2, w0, #3
    3e7c:	and	w0, w0, #0x7
    3e80:	sub	x1, x1, x2
    3e84:	cmp	x20, x21
    3e88:	str	w0, [sp, #152]
    3e8c:	cset	w3, ls  // ls = plast
    3e90:	str	x1, [sp, #160]
    3e94:	ldr	x0, [x1]
    3e98:	str	x0, [sp, #144]
    3e9c:	b	3e14 <FSE_decompress+0x29d4>
    3ea0:	add	x0, sp, #0xe0
    3ea4:	mov	x2, #0x28                  	// #40
    3ea8:	mov	w1, #0x0                   	// #0
    3eac:	mov	x24, #0xffffffffffffffb8    	// #-72
    3eb0:	bl	0 <grub_memset>
    3eb4:	b	3040 <FSE_decompress+0x1c00>
    3eb8:	sub	x0, x2, w7, uxtw
    3ebc:	mov	w6, w7
    3ec0:	b	3be4 <FSE_decompress+0x27a4>
    3ec4:	sub	w2, w1, w3
    3ec8:	sub	x3, x1, x3
    3ecc:	sub	x1, x1, x2
    3ed0:	str	x1, [sp, #160]
    3ed4:	sub	w0, w0, w3, lsl #3
    3ed8:	str	w0, [sp, #152]
    3edc:	ldr	x0, [x1]
    3ee0:	str	x0, [sp, #144]
    3ee4:	cmp	x21, x20
    3ee8:	b.cc	3f40 <FSE_decompress+0x2b00>  // b.lo, b.ul, b.last
    3eec:	ldr	w0, [sp, #104]
    3ef0:	ldr	w3, [sp, #152]
    3ef4:	neg	w0, w0
    3ef8:	and	w22, w0, #0x3f
    3efc:	nop
    3f00:	ldr	x1, [sp, #144]
    3f04:	mov	x0, x20
    3f08:	mov	x2, #0x2                   	// #2
    3f0c:	lsl	x1, x1, x3
    3f10:	lsr	x1, x1, x22
    3f14:	add	x26, x19, x1, lsl #2
    3f18:	mov	x1, x26
    3f1c:	bl	0 <grub_memmove>
    3f20:	ldr	w2, [sp, #152]
    3f24:	ldrb	w3, [x26, #2]
    3f28:	ldrb	w0, [x26, #3]
    3f2c:	add	w3, w3, w2
    3f30:	str	w3, [sp, #152]
    3f34:	add	x20, x20, x0
    3f38:	cmp	x21, x20
    3f3c:	b.cs	3f00 <FSE_decompress+0x2ac0>  // b.hs, b.nlast
    3f40:	ldr	x0, [sp, #112]
    3f44:	cmp	x0, x20
    3f48:	b.hi	4a10 <FSE_decompress+0x35d0>  // b.pmore
    3f4c:	ldr	w0, [sp, #192]
    3f50:	cmp	w0, #0x40
    3f54:	b.hi	495c <FSE_decompress+0x351c>  // b.pmore
    3f58:	ldr	w1, [sp, #104]
    3f5c:	sub	x21, x28, #0x7
    3f60:	neg	w20, w1
    3f64:	and	w20, w20, #0x3f
    3f68:	b	4090 <FSE_decompress+0x2c50>
    3f6c:	ldr	x4, [sp, #208]
    3f70:	cmp	x1, x4
    3f74:	b.eq	40d4 <FSE_decompress+0x2c94>  // b.none
    3f78:	sub	x7, x1, x4
    3f7c:	cmp	x4, x2
    3f80:	mov	w5, #0x0                   	// #0
    3f84:	b.hi	4880 <FSE_decompress+0x3440>  // b.pmore
    3f88:	cmp	x24, x21
    3f8c:	cset	w5, cc  // cc = lo, ul, last
    3f90:	sub	w1, w0, w6, lsl #3
    3f94:	ldr	x0, [x2]
    3f98:	str	x0, [sp, #184]
    3f9c:	str	w1, [sp, #192]
    3fa0:	str	x2, [sp, #200]
    3fa4:	mov	x0, x24
    3fa8:	mov	x2, #0x2                   	// #2
    3fac:	cbz	w5, 40d4 <FSE_decompress+0x2c94>
    3fb0:	ldr	x3, [sp, #184]
    3fb4:	lsl	x1, x3, x1
    3fb8:	lsr	x1, x1, x20
    3fbc:	add	x22, x19, x1, lsl #2
    3fc0:	mov	x1, x22
    3fc4:	bl	0 <grub_memmove>
    3fc8:	ldr	w5, [sp, #192]
    3fcc:	mov	x2, #0x2                   	// #2
    3fd0:	ldrb	w4, [x22, #2]
    3fd4:	ldr	x3, [sp, #184]
    3fd8:	add	w1, w4, w5
    3fdc:	str	w1, [sp, #192]
    3fe0:	ldrb	w0, [x22, #3]
    3fe4:	lsl	x1, x3, x1
    3fe8:	lsr	x1, x1, x20
    3fec:	add	x24, x24, x0
    3ff0:	add	x22, x19, x1, lsl #2
    3ff4:	mov	x0, x24
    3ff8:	mov	x1, x22
    3ffc:	bl	0 <grub_memmove>
    4000:	ldr	w5, [sp, #192]
    4004:	mov	x2, #0x2                   	// #2
    4008:	ldrb	w3, [x22, #2]
    400c:	ldr	x0, [sp, #184]
    4010:	add	w1, w3, w5
    4014:	ldrb	w4, [x22, #3]
    4018:	str	w1, [sp, #192]
    401c:	lsl	x1, x0, x1
    4020:	add	x24, x24, x4
    4024:	lsr	x1, x1, x20
    4028:	mov	x0, x24
    402c:	add	x22, x19, x1, lsl #2
    4030:	mov	x1, x22
    4034:	bl	0 <grub_memmove>
    4038:	ldr	w5, [sp, #192]
    403c:	mov	x2, #0x2                   	// #2
    4040:	ldrb	w3, [x22, #2]
    4044:	ldr	x0, [sp, #184]
    4048:	add	w1, w3, w5
    404c:	ldrb	w4, [x22, #3]
    4050:	str	w1, [sp, #192]
    4054:	lsl	x1, x0, x1
    4058:	add	x24, x24, x4
    405c:	lsr	x1, x1, x20
    4060:	mov	x0, x24
    4064:	add	x22, x19, x1, lsl #2
    4068:	mov	x1, x22
    406c:	bl	0 <grub_memmove>
    4070:	ldr	w2, [sp, #192]
    4074:	ldrb	w0, [x22, #2]
    4078:	ldrb	w1, [x22, #3]
    407c:	add	w0, w0, w2
    4080:	str	w0, [sp, #192]
    4084:	add	x24, x24, x1
    4088:	cmp	w0, #0x40
    408c:	b.hi	495c <FSE_decompress+0x351c>  // b.pmore
    4090:	ldr	x1, [sp, #200]
    4094:	lsr	w2, w0, #3
    4098:	ldr	x3, [sp, #216]
    409c:	lsr	w6, w0, #3
    40a0:	sub	x2, x1, x2
    40a4:	cmp	x1, x3
    40a8:	b.cc	3f6c <FSE_decompress+0x2b2c>  // b.lo, b.ul, b.last
    40ac:	lsr	w2, w0, #3
    40b0:	cmp	x24, x21
    40b4:	sub	x2, x1, x2
    40b8:	and	w1, w0, #0x7
    40bc:	cset	w5, cc  // cc = lo, ul, last
    40c0:	ldr	x0, [x2]
    40c4:	str	x0, [sp, #184]
    40c8:	str	w1, [sp, #192]
    40cc:	str	x2, [sp, #200]
    40d0:	b	3fa4 <FSE_decompress+0x2b64>
    40d4:	ldr	w0, [sp, #192]
    40d8:	sub	x20, x28, #0x2
    40dc:	cmp	w0, #0x40
    40e0:	b.hi	41d0 <FSE_decompress+0x2d90>  // b.pmore
    40e4:	ldr	w1, [sp, #104]
    40e8:	neg	w21, w1
    40ec:	and	w21, w21, #0x3f
    40f0:	b	4170 <FSE_decompress+0x2d30>
    40f4:	ldr	x3, [sp, #208]
    40f8:	cmp	x1, x3
    40fc:	b.eq	41d0 <FSE_decompress+0x2d90>  // b.none
    4100:	cmp	x3, x2
    4104:	b.hi	41b0 <FSE_decompress+0x2d70>  // b.pmore
    4108:	cmp	x24, x20
    410c:	sub	w0, w0, w4, lsl #3
    4110:	cset	w3, ls  // ls = plast
    4114:	ldr	x1, [x2]
    4118:	str	x1, [sp, #184]
    411c:	str	w0, [sp, #192]
    4120:	str	x2, [sp, #200]
    4124:	mov	x0, x24
    4128:	mov	x2, #0x2                   	// #2
    412c:	cbz	w3, 41d0 <FSE_decompress+0x2d90>
    4130:	ldr	x1, [sp, #184]
    4134:	ldr	w3, [sp, #192]
    4138:	lsl	x1, x1, x3
    413c:	lsr	x1, x1, x21
    4140:	add	x22, x19, x1, lsl #2
    4144:	mov	x1, x22
    4148:	bl	0 <grub_memmove>
    414c:	ldr	w2, [sp, #192]
    4150:	ldrb	w0, [x22, #2]
    4154:	ldrb	w1, [x22, #3]
    4158:	add	w0, w0, w2
    415c:	str	w0, [sp, #192]
    4160:	add	x24, x24, x1
    4164:	cmp	w0, #0x40
    4168:	b.hi	41d0 <FSE_decompress+0x2d90>  // b.pmore
    416c:	ldr	x3, [sp, #216]
    4170:	lsr	w2, w0, #3
    4174:	ldr	x1, [sp, #200]
    4178:	lsr	w4, w0, #3
    417c:	sub	x2, x1, x2
    4180:	cmp	x3, x1
    4184:	b.hi	40f4 <FSE_decompress+0x2cb4>  // b.pmore
    4188:	lsr	w2, w0, #3
    418c:	and	w0, w0, #0x7
    4190:	sub	x1, x1, x2
    4194:	cmp	x24, x20
    4198:	str	w0, [sp, #192]
    419c:	cset	w3, ls  // ls = plast
    41a0:	str	x1, [sp, #200]
    41a4:	ldr	x0, [x1]
    41a8:	str	x0, [sp, #184]
    41ac:	b	4124 <FSE_decompress+0x2ce4>
    41b0:	sub	w2, w1, w3
    41b4:	sub	x3, x1, x3
    41b8:	sub	x1, x1, x2
    41bc:	str	x1, [sp, #200]
    41c0:	sub	w0, w0, w3, lsl #3
    41c4:	str	w0, [sp, #192]
    41c8:	ldr	x0, [x1]
    41cc:	str	x0, [sp, #184]
    41d0:	cmp	x20, x24
    41d4:	b.cc	4228 <FSE_decompress+0x2de8>  // b.lo, b.ul, b.last
    41d8:	ldr	w0, [sp, #104]
    41dc:	ldr	w3, [sp, #192]
    41e0:	neg	w21, w0
    41e4:	and	w21, w21, #0x3f
    41e8:	ldr	x1, [sp, #184]
    41ec:	mov	x0, x24
    41f0:	mov	x2, #0x2                   	// #2
    41f4:	lsl	x1, x1, x3
    41f8:	lsr	x1, x1, x21
    41fc:	add	x22, x19, x1, lsl #2
    4200:	mov	x1, x22
    4204:	bl	0 <grub_memmove>
    4208:	ldr	w2, [sp, #192]
    420c:	ldrb	w3, [x22, #2]
    4210:	ldrb	w0, [x22, #3]
    4214:	add	w3, w3, w2
    4218:	str	w3, [sp, #192]
    421c:	add	x24, x24, x0
    4220:	cmp	x24, x20
    4224:	b.ls	41e8 <FSE_decompress+0x2da8>  // b.plast
    4228:	cmp	x28, x24
    422c:	b.hi	4ad0 <FSE_decompress+0x3690>  // b.pmore
    4230:	ldr	w0, [sp, #232]
    4234:	cmp	w0, #0x40
    4238:	b.hi	4950 <FSE_decompress+0x3510>  // b.pmore
    423c:	ldr	w1, [sp, #104]
    4240:	neg	w20, w1
    4244:	ldr	x1, [sp, #128]
    4248:	and	w20, w20, #0x3f
    424c:	sub	x21, x1, #0x7
    4250:	b	4378 <FSE_decompress+0x2f38>
    4254:	ldr	x4, [sp, #248]
    4258:	cmp	x1, x4
    425c:	b.eq	43bc <FSE_decompress+0x2f7c>  // b.none
    4260:	sub	x7, x1, x4
    4264:	cmp	x4, x2
    4268:	mov	w5, #0x0                   	// #0
    426c:	b.hi	449c <FSE_decompress+0x305c>  // b.pmore
    4270:	cmp	x25, x21
    4274:	cset	w5, cc  // cc = lo, ul, last
    4278:	sub	w1, w0, w6, lsl #3
    427c:	ldr	x0, [x2]
    4280:	str	x0, [sp, #224]
    4284:	str	w1, [sp, #232]
    4288:	str	x2, [sp, #240]
    428c:	mov	x0, x25
    4290:	mov	x2, #0x2                   	// #2
    4294:	cbz	w5, 43bc <FSE_decompress+0x2f7c>
    4298:	ldr	x24, [sp, #224]
    429c:	lsl	x24, x24, x1
    42a0:	lsr	x24, x24, x20
    42a4:	add	x24, x19, x24, lsl #2
    42a8:	mov	x1, x24
    42ac:	bl	0 <grub_memmove>
    42b0:	ldr	w1, [sp, #232]
    42b4:	mov	x2, #0x2                   	// #2
    42b8:	ldrb	w0, [x24, #2]
    42bc:	ldr	x28, [sp, #224]
    42c0:	add	w0, w0, w1
    42c4:	ldrb	w24, [x24, #3]
    42c8:	str	w0, [sp, #232]
    42cc:	lsl	x28, x28, x0
    42d0:	add	x25, x25, x24
    42d4:	lsr	x28, x28, x20
    42d8:	mov	x0, x25
    42dc:	add	x28, x19, x28, lsl #2
    42e0:	mov	x1, x28
    42e4:	bl	0 <grub_memmove>
    42e8:	ldr	w3, [sp, #232]
    42ec:	mov	x2, #0x2                   	// #2
    42f0:	ldrb	w0, [x28, #2]
    42f4:	ldr	x24, [sp, #224]
    42f8:	add	w0, w0, w3
    42fc:	ldrb	w1, [x28, #3]
    4300:	str	w0, [sp, #232]
    4304:	lsl	x24, x24, x0
    4308:	add	x25, x25, x1
    430c:	lsr	x24, x24, x20
    4310:	mov	x0, x25
    4314:	add	x24, x19, x24, lsl #2
    4318:	mov	x1, x24
    431c:	bl	0 <grub_memmove>
    4320:	ldr	w3, [sp, #232]
    4324:	mov	x2, #0x2                   	// #2
    4328:	ldrb	w1, [x24, #2]
    432c:	ldr	x0, [sp, #224]
    4330:	add	w1, w1, w3
    4334:	ldrb	w24, [x24, #3]
    4338:	str	w1, [sp, #232]
    433c:	add	x24, x25, x24
    4340:	lsl	x25, x0, x1
    4344:	lsr	x25, x25, x20
    4348:	mov	x0, x24
    434c:	add	x25, x19, x25, lsl #2
    4350:	mov	x1, x25
    4354:	bl	0 <grub_memmove>
    4358:	ldr	w1, [sp, #232]
    435c:	ldrb	w0, [x25, #2]
    4360:	ldrb	w25, [x25, #3]
    4364:	add	w0, w0, w1
    4368:	str	w0, [sp, #232]
    436c:	add	x25, x24, x25
    4370:	cmp	w0, #0x40
    4374:	b.hi	4950 <FSE_decompress+0x3510>  // b.pmore
    4378:	ldr	x1, [sp, #240]
    437c:	lsr	w2, w0, #3
    4380:	ldr	x3, [sp, #256]
    4384:	lsr	w6, w0, #3
    4388:	sub	x2, x1, x2
    438c:	cmp	x1, x3
    4390:	b.cc	4254 <FSE_decompress+0x2e14>  // b.lo, b.ul, b.last
    4394:	lsr	w2, w0, #3
    4398:	cmp	x25, x21
    439c:	sub	x2, x1, x2
    43a0:	and	w1, w0, #0x7
    43a4:	cset	w5, cc  // cc = lo, ul, last
    43a8:	ldr	x0, [x2]
    43ac:	str	x0, [sp, #224]
    43b0:	str	w1, [sp, #232]
    43b4:	str	x2, [sp, #240]
    43b8:	b	428c <FSE_decompress+0x2e4c>
    43bc:	ldr	x1, [sp, #128]
    43c0:	ldr	w0, [sp, #232]
    43c4:	sub	x20, x1, #0x2
    43c8:	cmp	w0, #0x40
    43cc:	b.hi	44c8 <FSE_decompress+0x3088>  // b.pmore
    43d0:	ldr	w1, [sp, #104]
    43d4:	neg	w21, w1
    43d8:	and	w21, w21, #0x3f
    43dc:	b	445c <FSE_decompress+0x301c>
    43e0:	ldr	x3, [sp, #248]
    43e4:	cmp	x1, x3
    43e8:	b.eq	44c8 <FSE_decompress+0x3088>  // b.none
    43ec:	cmp	x3, x2
    43f0:	b.hi	44a8 <FSE_decompress+0x3068>  // b.pmore
    43f4:	cmp	x25, x20
    43f8:	sub	w0, w0, w4, lsl #3
    43fc:	cset	w3, ls  // ls = plast
    4400:	ldr	x1, [x2]
    4404:	str	x1, [sp, #224]
    4408:	str	w0, [sp, #232]
    440c:	str	x2, [sp, #240]
    4410:	mov	x0, x25
    4414:	mov	x2, #0x2                   	// #2
    4418:	cbz	w3, 44c8 <FSE_decompress+0x3088>
    441c:	ldr	x24, [sp, #224]
    4420:	ldr	w1, [sp, #232]
    4424:	lsl	x24, x24, x1
    4428:	lsr	x24, x24, x21
    442c:	add	x24, x19, x24, lsl #2
    4430:	mov	x1, x24
    4434:	bl	0 <grub_memmove>
    4438:	ldr	w2, [sp, #232]
    443c:	ldrb	w0, [x24, #2]
    4440:	ldrb	w1, [x24, #3]
    4444:	add	w0, w0, w2
    4448:	str	w0, [sp, #232]
    444c:	add	x25, x25, x1
    4450:	cmp	w0, #0x40
    4454:	b.hi	44c8 <FSE_decompress+0x3088>  // b.pmore
    4458:	ldr	x3, [sp, #256]
    445c:	lsr	w2, w0, #3
    4460:	ldr	x1, [sp, #240]
    4464:	lsr	w4, w0, #3
    4468:	sub	x2, x1, x2
    446c:	cmp	x1, x3
    4470:	b.cc	43e0 <FSE_decompress+0x2fa0>  // b.lo, b.ul, b.last
    4474:	lsr	w2, w0, #3
    4478:	and	w0, w0, #0x7
    447c:	sub	x1, x1, x2
    4480:	cmp	x25, x20
    4484:	str	w0, [sp, #232]
    4488:	cset	w3, ls  // ls = plast
    448c:	str	x1, [sp, #240]
    4490:	ldr	x0, [x1]
    4494:	str	x0, [sp, #224]
    4498:	b	4410 <FSE_decompress+0x2fd0>
    449c:	sub	x2, x1, w7, uxtw
    44a0:	mov	w6, w7
    44a4:	b	4278 <FSE_decompress+0x2e38>
    44a8:	sub	w2, w1, w3
    44ac:	sub	x3, x1, x3
    44b0:	sub	x1, x1, x2
    44b4:	str	x1, [sp, #240]
    44b8:	sub	w0, w0, w3, lsl #3
    44bc:	str	w0, [sp, #232]
    44c0:	ldr	x0, [x1]
    44c4:	str	x0, [sp, #224]
    44c8:	cmp	x20, x25
    44cc:	b.cc	4520 <FSE_decompress+0x30e0>  // b.lo, b.ul, b.last
    44d0:	ldr	w0, [sp, #104]
    44d4:	ldr	w1, [sp, #232]
    44d8:	neg	w21, w0
    44dc:	and	w21, w21, #0x3f
    44e0:	ldr	x24, [sp, #224]
    44e4:	mov	x0, x25
    44e8:	mov	x2, #0x2                   	// #2
    44ec:	lsl	x24, x24, x1
    44f0:	lsr	x24, x24, x21
    44f4:	add	x24, x19, x24, lsl #2
    44f8:	mov	x1, x24
    44fc:	bl	0 <grub_memmove>
    4500:	ldr	w2, [sp, #232]
    4504:	ldrb	w1, [x24, #2]
    4508:	ldrb	w0, [x24, #3]
    450c:	add	w1, w1, w2
    4510:	str	w1, [sp, #232]
    4514:	add	x25, x25, x0
    4518:	cmp	x25, x20
    451c:	b.ls	44e0 <FSE_decompress+0x30a0>  // b.plast
    4520:	ldr	x0, [sp, #128]
    4524:	cmp	x0, x25
    4528:	b.hi	4a70 <FSE_decompress+0x3630>  // b.pmore
    452c:	ldr	w0, [sp, #272]
    4530:	cmp	w0, #0x40
    4534:	b.hi	4944 <FSE_decompress+0x3504>  // b.pmore
    4538:	ldr	w1, [sp, #104]
    453c:	neg	w21, w1
    4540:	and	w21, w21, #0x3f
    4544:	b	466c <FSE_decompress+0x322c>
    4548:	ldr	x4, [sp, #288]
    454c:	cmp	x1, x4
    4550:	b.eq	46b0 <FSE_decompress+0x3270>  // b.none
    4554:	sub	x7, x1, x4
    4558:	cmp	x4, x2
    455c:	mov	w5, #0x0                   	// #0
    4560:	b.hi	4790 <FSE_decompress+0x3350>  // b.pmore
    4564:	cmp	x23, x27
    4568:	cset	w5, cc  // cc = lo, ul, last
    456c:	sub	w1, w0, w6, lsl #3
    4570:	ldr	x0, [x2]
    4574:	str	x0, [sp, #264]
    4578:	str	w1, [sp, #272]
    457c:	str	x2, [sp, #280]
    4580:	mov	x0, x23
    4584:	mov	x2, #0x2                   	// #2
    4588:	cbz	w5, 46b0 <FSE_decompress+0x3270>
    458c:	ldr	x20, [sp, #264]
    4590:	lsl	x20, x20, x1
    4594:	lsr	x20, x20, x21
    4598:	add	x20, x19, x20, lsl #2
    459c:	mov	x1, x20
    45a0:	bl	0 <grub_memmove>
    45a4:	ldr	w1, [sp, #272]
    45a8:	mov	x2, #0x2                   	// #2
    45ac:	ldrb	w0, [x20, #2]
    45b0:	ldr	x24, [sp, #264]
    45b4:	add	w0, w0, w1
    45b8:	ldrb	w20, [x20, #3]
    45bc:	str	w0, [sp, #272]
    45c0:	lsl	x24, x24, x0
    45c4:	add	x23, x23, x20
    45c8:	lsr	x24, x24, x21
    45cc:	mov	x0, x23
    45d0:	add	x24, x19, x24, lsl #2
    45d4:	mov	x1, x24
    45d8:	bl	0 <grub_memmove>
    45dc:	ldr	w3, [sp, #272]
    45e0:	mov	x2, #0x2                   	// #2
    45e4:	ldrb	w0, [x24, #2]
    45e8:	ldr	x20, [sp, #264]
    45ec:	add	w0, w0, w3
    45f0:	ldrb	w1, [x24, #3]
    45f4:	str	w0, [sp, #272]
    45f8:	lsl	x20, x20, x0
    45fc:	add	x23, x23, x1
    4600:	lsr	x20, x20, x21
    4604:	mov	x0, x23
    4608:	add	x20, x19, x20, lsl #2
    460c:	mov	x1, x20
    4610:	bl	0 <grub_memmove>
    4614:	ldr	w3, [sp, #272]
    4618:	mov	x2, #0x2                   	// #2
    461c:	ldrb	w1, [x20, #2]
    4620:	ldr	x0, [sp, #264]
    4624:	add	w1, w1, w3
    4628:	ldrb	w20, [x20, #3]
    462c:	str	w1, [sp, #272]
    4630:	add	x20, x23, x20
    4634:	lsl	x23, x0, x1
    4638:	lsr	x23, x23, x21
    463c:	mov	x0, x20
    4640:	add	x23, x19, x23, lsl #2
    4644:	mov	x1, x23
    4648:	bl	0 <grub_memmove>
    464c:	ldr	w1, [sp, #272]
    4650:	ldrb	w0, [x23, #2]
    4654:	ldrb	w23, [x23, #3]
    4658:	add	w0, w0, w1
    465c:	str	w0, [sp, #272]
    4660:	add	x23, x20, x23
    4664:	cmp	w0, #0x40
    4668:	b.hi	4944 <FSE_decompress+0x3504>  // b.pmore
    466c:	ldr	x1, [sp, #280]
    4670:	lsr	w2, w0, #3
    4674:	ldr	x3, [sp, #296]
    4678:	lsr	w6, w0, #3
    467c:	sub	x2, x1, x2
    4680:	cmp	x1, x3
    4684:	b.cc	4548 <FSE_decompress+0x3108>  // b.lo, b.ul, b.last
    4688:	lsr	w2, w0, #3
    468c:	cmp	x23, x27
    4690:	sub	x2, x1, x2
    4694:	and	w1, w0, #0x7
    4698:	cset	w5, cc  // cc = lo, ul, last
    469c:	ldr	x0, [x2]
    46a0:	str	x0, [sp, #264]
    46a4:	str	w1, [sp, #272]
    46a8:	str	x2, [sp, #280]
    46ac:	b	4580 <FSE_decompress+0x3140>
    46b0:	ldr	x1, [sp, #136]
    46b4:	ldr	w0, [sp, #272]
    46b8:	sub	x21, x1, #0x2
    46bc:	cmp	w0, #0x40
    46c0:	b.hi	47bc <FSE_decompress+0x337c>  // b.pmore
    46c4:	ldr	w1, [sp, #104]
    46c8:	neg	w24, w1
    46cc:	and	w24, w24, #0x3f
    46d0:	b	4750 <FSE_decompress+0x3310>
    46d4:	ldr	x3, [sp, #288]
    46d8:	cmp	x1, x3
    46dc:	b.eq	47bc <FSE_decompress+0x337c>  // b.none
    46e0:	cmp	x3, x2
    46e4:	b.hi	479c <FSE_decompress+0x335c>  // b.pmore
    46e8:	cmp	x23, x21
    46ec:	sub	w0, w0, w4, lsl #3
    46f0:	cset	w3, ls  // ls = plast
    46f4:	ldr	x1, [x2]
    46f8:	str	x1, [sp, #264]
    46fc:	str	w0, [sp, #272]
    4700:	str	x2, [sp, #280]
    4704:	mov	x0, x23
    4708:	mov	x2, #0x2                   	// #2
    470c:	cbz	w3, 47bc <FSE_decompress+0x337c>
    4710:	ldr	x20, [sp, #264]
    4714:	ldr	w1, [sp, #272]
    4718:	lsl	x20, x20, x1
    471c:	lsr	x20, x20, x24
    4720:	add	x20, x19, x20, lsl #2
    4724:	mov	x1, x20
    4728:	bl	0 <grub_memmove>
    472c:	ldr	w2, [sp, #272]
    4730:	ldrb	w0, [x20, #2]
    4734:	ldrb	w1, [x20, #3]
    4738:	add	w0, w0, w2
    473c:	str	w0, [sp, #272]
    4740:	add	x23, x23, x1
    4744:	cmp	w0, #0x40
    4748:	b.hi	47bc <FSE_decompress+0x337c>  // b.pmore
    474c:	ldr	x3, [sp, #296]
    4750:	lsr	w2, w0, #3
    4754:	ldr	x1, [sp, #280]
    4758:	lsr	w4, w0, #3
    475c:	sub	x2, x1, x2
    4760:	cmp	x1, x3
    4764:	b.cc	46d4 <FSE_decompress+0x3294>  // b.lo, b.ul, b.last
    4768:	lsr	w2, w0, #3
    476c:	and	w0, w0, #0x7
    4770:	sub	x1, x1, x2
    4774:	cmp	x23, x21
    4778:	str	w0, [sp, #272]
    477c:	cset	w3, ls  // ls = plast
    4780:	str	x1, [sp, #280]
    4784:	ldr	x0, [x1]
    4788:	str	x0, [sp, #264]
    478c:	b	4704 <FSE_decompress+0x32c4>
    4790:	sub	x2, x1, w7, uxtw
    4794:	mov	w6, w7
    4798:	b	456c <FSE_decompress+0x312c>
    479c:	sub	w2, w1, w3
    47a0:	sub	x3, x1, x3
    47a4:	sub	x1, x1, x2
    47a8:	str	x1, [sp, #280]
    47ac:	sub	w0, w0, w3, lsl #3
    47b0:	str	w0, [sp, #272]
    47b4:	ldr	x0, [x1]
    47b8:	str	x0, [sp, #264]
    47bc:	cmp	x21, x23
    47c0:	b.cc	4818 <FSE_decompress+0x33d8>  // b.lo, b.ul, b.last
    47c4:	ldr	w0, [sp, #104]
    47c8:	ldr	w1, [sp, #272]
    47cc:	neg	w24, w0
    47d0:	and	w24, w24, #0x3f
    47d4:	nop
    47d8:	ldr	x20, [sp, #264]
    47dc:	mov	x0, x23
    47e0:	mov	x2, #0x2                   	// #2
    47e4:	lsl	x20, x20, x1
    47e8:	lsr	x20, x20, x24
    47ec:	add	x20, x19, x20, lsl #2
    47f0:	mov	x1, x20
    47f4:	bl	0 <grub_memmove>
    47f8:	ldr	w2, [sp, #272]
    47fc:	ldrb	w1, [x20, #2]
    4800:	ldrb	w0, [x20, #3]
    4804:	add	w1, w1, w2
    4808:	str	w1, [sp, #272]
    480c:	add	x23, x23, x0
    4810:	cmp	x23, x21
    4814:	b.ls	47d8 <FSE_decompress+0x3398>  // b.plast
    4818:	ldr	x0, [sp, #136]
    481c:	cmp	x0, x23
    4820:	b.hi	49b0 <FSE_decompress+0x3570>  // b.pmore
    4824:	ldp	x2, x1, [sp, #160]
    4828:	mov	w0, #0x0                   	// #0
    482c:	cmp	x2, x1
    4830:	b.eq	4b30 <FSE_decompress+0x36f0>  // b.none
    4834:	ldp	x2, x1, [sp, #200]
    4838:	cmp	x2, x1
    483c:	b.eq	4b40 <FSE_decompress+0x3700>  // b.none
    4840:	mov	w0, #0x0                   	// #0
    4844:	ldp	x2, x1, [sp, #240]
    4848:	cmp	x2, x1
    484c:	b.ne	303c <FSE_decompress+0x1bfc>  // b.any
    4850:	ldr	w1, [sp, #232]
    4854:	cmp	w1, #0x40
    4858:	b.ne	303c <FSE_decompress+0x1bfc>  // b.any
    485c:	ldp	x2, x1, [sp, #280]
    4860:	cmp	x2, x1
    4864:	b.ne	303c <FSE_decompress+0x1bfc>  // b.any
    4868:	ldr	w1, [sp, #272]
    486c:	cmp	w1, #0x40
    4870:	b.ne	303c <FSE_decompress+0x1bfc>  // b.any
    4874:	cbz	w0, 303c <FSE_decompress+0x1bfc>
    4878:	ldr	x24, [sp, #120]
    487c:	b	3040 <FSE_decompress+0x1c00>
    4880:	sub	x2, x1, w7, uxtw
    4884:	mov	w6, w7
    4888:	b	3f90 <FSE_decompress+0x2b50>
    488c:	lsr	w2, w10, #3
    4890:	mov	w4, #0x0                   	// #0
    4894:	sub	x11, x11, x2
    4898:	and	w10, w10, #0x7
    489c:	ldr	x2, [x11]
    48a0:	str	x2, [sp, #144]
    48a4:	str	w10, [sp, #152]
    48a8:	str	x11, [sp, #160]
    48ac:	b	31e0 <FSE_decompress+0x1da0>
    48b0:	lsr	w0, w1, #3
    48b4:	and	w1, w1, #0x7
    48b8:	sub	x2, x2, x0
    48bc:	ldr	x0, [x2]
    48c0:	str	x0, [sp, #224]
    48c4:	str	w1, [sp, #232]
    48c8:	str	x2, [sp, #240]
    48cc:	b	3290 <FSE_decompress+0x1e50>
    48d0:	lsr	w1, w2, #3
    48d4:	and	w2, w2, #0x7
    48d8:	sub	x8, x8, x1
    48dc:	ldr	x1, [x8]
    48e0:	str	x1, [sp, #184]
    48e4:	str	w2, [sp, #192]
    48e8:	str	x8, [sp, #200]
    48ec:	b	3238 <FSE_decompress+0x1df8>
    48f0:	lsr	w0, w3, #3
    48f4:	and	w3, w3, #0x7
    48f8:	sub	x1, x1, x0
    48fc:	ldr	x0, [x1]
    4900:	str	x0, [sp, #264]
    4904:	str	w3, [sp, #272]
    4908:	str	x1, [sp, #280]
    490c:	b	3304 <FSE_decompress+0x1ec4>
    4910:	add	x0, sp, #0x108
    4914:	mov	x2, #0x28                  	// #40
    4918:	mov	w1, #0x0                   	// #0
    491c:	mov	x24, #0xffffffffffffffb8    	// #-72
    4920:	bl	0 <grub_memset>
    4924:	b	3040 <FSE_decompress+0x1c00>
    4928:	mov	w4, #0x3                   	// #3
    492c:	b	3290 <FSE_decompress+0x1e50>
    4930:	mov	w4, #0x3                   	// #3
    4934:	b	3238 <FSE_decompress+0x1df8>
    4938:	ldr	x0, [sp, #112]
    493c:	sub	x21, x0, #0x2
    4940:	b	3ee4 <FSE_decompress+0x2aa4>
    4944:	ldr	x0, [sp, #136]
    4948:	sub	x21, x0, #0x2
    494c:	b	47bc <FSE_decompress+0x337c>
    4950:	ldr	x0, [sp, #128]
    4954:	sub	x20, x0, #0x2
    4958:	b	44c8 <FSE_decompress+0x3088>
    495c:	sub	x20, x28, #0x2
    4960:	b	41d0 <FSE_decompress+0x2d90>
    4964:	cmp	w10, #0x40
    4968:	cset	w4, eq  // eq = none
    496c:	add	w4, w4, #0x1
    4970:	b	31e0 <FSE_decompress+0x1da0>
    4974:	orr	w1, w4, #0x1
    4978:	cmp	w2, #0x40
    497c:	orr	w4, w4, #0x2
    4980:	csel	w4, w4, w1, eq  // eq = none
    4984:	b	3238 <FSE_decompress+0x1df8>
    4988:	orr	w0, w4, #0x1
    498c:	cmp	w1, #0x40
    4990:	orr	w4, w4, #0x2
    4994:	csel	w4, w4, w0, eq  // eq = none
    4998:	b	3290 <FSE_decompress+0x1e50>
    499c:	ldp	x23, x0, [sp, #128]
    49a0:	mov	x25, x28
    49a4:	ldr	x24, [sp, #112]
    49a8:	sub	x27, x0, #0x7
    49ac:	b	3b78 <FSE_decompress+0x2738>
    49b0:	ldr	x1, [sp, #264]
    49b4:	mov	x2, #0x1                   	// #1
    49b8:	ldr	w0, [sp, #104]
    49bc:	ldr	w3, [sp, #272]
    49c0:	neg	w26, w0
    49c4:	mov	x0, x23
    49c8:	lsl	x1, x1, x3
    49cc:	lsr	x1, x1, x26
    49d0:	add	x19, x19, x1, lsl #2
    49d4:	mov	x1, x19
    49d8:	bl	0 <grub_memmove>
    49dc:	ldrb	w0, [x19, #3]
    49e0:	cmp	w0, #0x1
    49e4:	b.eq	4b50 <FSE_decompress+0x3710>  // b.none
    49e8:	ldr	w1, [sp, #272]
    49ec:	cmp	w1, #0x3f
    49f0:	b.hi	4824 <FSE_decompress+0x33e4>  // b.pmore
    49f4:	ldrb	w0, [x19, #2]
    49f8:	add	w0, w0, w1
    49fc:	cmp	w0, #0x40
    4a00:	b.ls	4a08 <FSE_decompress+0x35c8>  // b.plast
    4a04:	mov	w0, #0x40                  	// #64
    4a08:	str	w0, [sp, #272]
    4a0c:	b	4824 <FSE_decompress+0x33e4>
    4a10:	ldr	x1, [sp, #144]
    4a14:	mov	x2, #0x1                   	// #1
    4a18:	ldr	w0, [sp, #104]
    4a1c:	ldr	w4, [sp, #152]
    4a20:	neg	w3, w0
    4a24:	mov	x0, x20
    4a28:	lsl	x20, x1, x4
    4a2c:	lsr	x20, x20, x3
    4a30:	add	x20, x19, x20, lsl #2
    4a34:	mov	x1, x20
    4a38:	bl	0 <grub_memmove>
    4a3c:	ldrb	w0, [x20, #3]
    4a40:	cmp	w0, #0x1
    4a44:	b.eq	4b8c <FSE_decompress+0x374c>  // b.none
    4a48:	ldr	w1, [sp, #152]
    4a4c:	cmp	w1, #0x3f
    4a50:	b.hi	3f4c <FSE_decompress+0x2b0c>  // b.pmore
    4a54:	ldrb	w0, [x20, #2]
    4a58:	add	w0, w0, w1
    4a5c:	cmp	w0, #0x40
    4a60:	b.ls	4a68 <FSE_decompress+0x3628>  // b.plast
    4a64:	mov	w0, #0x40                  	// #64
    4a68:	str	w0, [sp, #152]
    4a6c:	b	3f4c <FSE_decompress+0x2b0c>
    4a70:	ldr	x20, [sp, #224]
    4a74:	mov	x2, #0x1                   	// #1
    4a78:	ldr	w0, [sp, #104]
    4a7c:	ldr	w3, [sp, #232]
    4a80:	neg	w1, w0
    4a84:	mov	x0, x25
    4a88:	lsl	x20, x20, x3
    4a8c:	lsr	x20, x20, x1
    4a90:	add	x20, x19, x20, lsl #2
    4a94:	mov	x1, x20
    4a98:	bl	0 <grub_memmove>
    4a9c:	ldrb	w0, [x20, #3]
    4aa0:	cmp	w0, #0x1
    4aa4:	b.eq	4b78 <FSE_decompress+0x3738>  // b.none
    4aa8:	ldr	w1, [sp, #232]
    4aac:	cmp	w1, #0x3f
    4ab0:	b.hi	452c <FSE_decompress+0x30ec>  // b.pmore
    4ab4:	ldrb	w0, [x20, #2]
    4ab8:	add	w0, w0, w1
    4abc:	cmp	w0, #0x40
    4ac0:	b.ls	4ac8 <FSE_decompress+0x3688>  // b.plast
    4ac4:	mov	w0, #0x40                  	// #64
    4ac8:	str	w0, [sp, #232]
    4acc:	b	452c <FSE_decompress+0x30ec>
    4ad0:	ldr	x20, [sp, #184]
    4ad4:	mov	x2, #0x1                   	// #1
    4ad8:	ldr	w0, [sp, #104]
    4adc:	ldr	w3, [sp, #192]
    4ae0:	neg	w1, w0
    4ae4:	mov	x0, x24
    4ae8:	lsl	x20, x20, x3
    4aec:	lsr	x20, x20, x1
    4af0:	add	x20, x19, x20, lsl #2
    4af4:	mov	x1, x20
    4af8:	bl	0 <grub_memmove>
    4afc:	ldrb	w0, [x20, #3]
    4b00:	cmp	w0, #0x1
    4b04:	b.eq	4b64 <FSE_decompress+0x3724>  // b.none
    4b08:	ldr	w1, [sp, #192]
    4b0c:	cmp	w1, #0x3f
    4b10:	b.hi	4230 <FSE_decompress+0x2df0>  // b.pmore
    4b14:	ldrb	w0, [x20, #2]
    4b18:	add	w0, w0, w1
    4b1c:	cmp	w0, #0x40
    4b20:	b.ls	4b28 <FSE_decompress+0x36e8>  // b.plast
    4b24:	mov	w0, #0x40                  	// #64
    4b28:	str	w0, [sp, #192]
    4b2c:	b	4230 <FSE_decompress+0x2df0>
    4b30:	ldr	w0, [sp, #152]
    4b34:	cmp	w0, #0x40
    4b38:	cset	w0, eq  // eq = none
    4b3c:	b	4834 <FSE_decompress+0x33f4>
    4b40:	ldr	w1, [sp, #192]
    4b44:	cmp	w1, #0x40
    4b48:	csel	w0, w0, wzr, eq  // eq = none
    4b4c:	b	4844 <FSE_decompress+0x3404>
    4b50:	ldrb	w1, [x19, #2]
    4b54:	ldr	w0, [sp, #272]
    4b58:	add	w0, w0, w1
    4b5c:	str	w0, [sp, #272]
    4b60:	b	4824 <FSE_decompress+0x33e4>
    4b64:	ldrb	w1, [x20, #2]
    4b68:	ldr	w0, [sp, #192]
    4b6c:	add	w0, w0, w1
    4b70:	str	w0, [sp, #192]
    4b74:	b	4230 <FSE_decompress+0x2df0>
    4b78:	ldrb	w1, [x20, #2]
    4b7c:	ldr	w0, [sp, #232]
    4b80:	add	w0, w0, w1
    4b84:	str	w0, [sp, #232]
    4b88:	b	452c <FSE_decompress+0x30ec>
    4b8c:	ldrb	w1, [x20, #2]
    4b90:	ldr	w0, [sp, #152]
    4b94:	add	w0, w0, w1
    4b98:	str	w0, [sp, #152]
    4b9c:	b	3f4c <FSE_decompress+0x2b0c>

0000000000004ba0 <HUF_readDTableX1_wksp>:
    4ba0:	stp	x29, x30, [sp, #-64]!
    4ba4:	cmp	x4, #0x13f
    4ba8:	mov	x29, sp
    4bac:	stp	x21, x22, [sp, #32]
    4bb0:	mov	x22, #0xffffffffffffffd4    	// #-44
    4bb4:	stp	wzr, wzr, [sp, #56]
    4bb8:	b.ls	4bfc <HUF_readDTableX1_wksp+0x5c>  // b.plast
    4bbc:	add	x21, x3, #0x40
    4bc0:	stp	x19, x20, [sp, #16]
    4bc4:	mov	x19, x3
    4bc8:	mov	x5, x1
    4bcc:	mov	x6, x2
    4bd0:	mov	x20, x0
    4bd4:	add	x4, sp, #0x38
    4bd8:	mov	x0, x21
    4bdc:	add	x3, sp, #0x3c
    4be0:	mov	x2, x19
    4be4:	mov	x1, #0x100                 	// #256
    4be8:	bl	368 <HUF_readStats>
    4bec:	mov	x22, x0
    4bf0:	cmn	x0, #0x78
    4bf4:	b.ls	4c0c <HUF_readDTableX1_wksp+0x6c>  // b.plast
    4bf8:	ldp	x19, x20, [sp, #16]
    4bfc:	mov	x0, x22
    4c00:	ldp	x21, x22, [sp, #32]
    4c04:	ldp	x29, x30, [sp], #64
    4c08:	ret
    4c0c:	add	x0, sp, #0x30
    4c10:	mov	x1, x20
    4c14:	mov	x2, #0x4                   	// #4
    4c18:	bl	0 <grub_memmove>
    4c1c:	ldrb	w0, [sp, #48]
    4c20:	ldr	w3, [sp, #56]
    4c24:	strb	w0, [sp, #48]
    4c28:	add	w0, w0, #0x1
    4c2c:	cmp	w0, w3
    4c30:	b.cc	4d10 <HUF_readDTableX1_wksp+0x170>  // b.lo, b.ul, b.last
    4c34:	add	x1, sp, #0x30
    4c38:	mov	x0, x20
    4c3c:	mov	x2, #0x4                   	// #4
    4c40:	strb	wzr, [sp, #49]
    4c44:	strb	w3, [sp, #50]
    4c48:	bl	0 <grub_memmove>
    4c4c:	ldr	w6, [sp, #56]
    4c50:	add	w5, w6, #0x1
    4c54:	cmp	w5, #0x1
    4c58:	b.ls	4c8c <HUF_readDTableX1_wksp+0xec>  // b.plast
    4c5c:	sub	w6, w6, #0x1
    4c60:	add	x0, x19, #0x4
    4c64:	mov	x1, #0x0                   	// #0
    4c68:	mov	w3, #0x0                   	// #0
    4c6c:	nop
    4c70:	ldr	w2, [x0, x1, lsl #2]
    4c74:	cmp	x6, x1
    4c78:	str	w3, [x0, x1, lsl #2]
    4c7c:	lsl	w2, w2, w1
    4c80:	add	x1, x1, #0x1
    4c84:	add	w3, w3, w2
    4c88:	b.ne	4c70 <HUF_readDTableX1_wksp+0xd0>  // b.any
    4c8c:	ldr	w8, [sp, #60]
    4c90:	and	w0, w5, #0xff
    4c94:	add	x10, x20, #0x6
    4c98:	mov	x6, #0x0                   	// #0
    4c9c:	mov	w9, #0x1                   	// #1
    4ca0:	cbz	w8, 4bf8 <HUF_readDTableX1_wksp+0x58>
    4ca4:	nop
    4ca8:	ldrb	w7, [x21, x6]
    4cac:	and	w5, w6, #0xff
    4cb0:	sub	w4, w0, w7
    4cb4:	lsl	w1, w9, w7
    4cb8:	and	w4, w4, #0xff
    4cbc:	asr	w2, w1, #1
    4cc0:	ldr	w1, [x19, x7, lsl #2]
    4cc4:	add	w3, w2, w1
    4cc8:	cmp	w1, w3
    4ccc:	b.cs	4cfc <HUF_readDTableX1_wksp+0x15c>  // b.hs, b.nlast
    4cd0:	mov	w1, w1
    4cd4:	sub	w2, w2, #0x1
    4cd8:	add	x2, x2, x1
    4cdc:	add	x1, x1, #0x2
    4ce0:	add	x2, x10, x2, lsl #1
    4ce4:	add	x1, x20, x1, lsl #1
    4ce8:	strb	w5, [x1]
    4cec:	add	x1, x1, #0x2
    4cf0:	sturb	w4, [x1, #-1]
    4cf4:	cmp	x2, x1
    4cf8:	b.ne	4ce8 <HUF_readDTableX1_wksp+0x148>  // b.any
    4cfc:	str	w3, [x19, x7, lsl #2]
    4d00:	add	x6, x6, #0x1
    4d04:	cmp	w8, w6
    4d08:	b.hi	4ca8 <HUF_readDTableX1_wksp+0x108>  // b.pmore
    4d0c:	b	4bf8 <HUF_readDTableX1_wksp+0x58>
    4d10:	mov	x22, #0xffffffffffffffd4    	// #-44
    4d14:	mov	x0, x22
    4d18:	ldp	x19, x20, [sp, #16]
    4d1c:	ldp	x21, x22, [sp, #32]
    4d20:	ldp	x29, x30, [sp], #64
    4d24:	ret
    4d28:	stp	x29, x30, [sp, #-64]!
    4d2c:	mov	x29, sp
    4d30:	stp	x19, x20, [sp, #16]
    4d34:	mov	x20, x3
    4d38:	mov	x19, x4
    4d3c:	mov	x3, x5
    4d40:	mov	x4, x6
    4d44:	stp	x21, x22, [sp, #32]
    4d48:	mov	x21, x1
    4d4c:	mov	x22, x2
    4d50:	mov	x1, x20
    4d54:	mov	x2, x19
    4d58:	str	x23, [sp, #48]
    4d5c:	mov	x23, x0
    4d60:	bl	4ba0 <HUF_readDTableX1_wksp>
    4d64:	cmn	x0, #0x78
    4d68:	b.hi	4da8 <HUF_readDTableX1_wksp+0x208>  // b.pmore
    4d6c:	cmp	x19, x0
    4d70:	b.ls	4dbc <HUF_readDTableX1_wksp+0x21c>  // b.plast
    4d74:	sub	x3, x19, x0
    4d78:	cmp	x3, #0x9
    4d7c:	b.ls	4da4 <HUF_readDTableX1_wksp+0x204>  // b.plast
    4d80:	add	x2, x20, x0
    4d84:	mov	x4, x23
    4d88:	mov	x1, x22
    4d8c:	mov	x0, x21
    4d90:	ldp	x19, x20, [sp, #16]
    4d94:	ldp	x21, x22, [sp, #32]
    4d98:	ldr	x23, [sp, #48]
    4d9c:	ldp	x29, x30, [sp], #64
    4da0:	b	1ca0 <FSE_decompress+0x860>
    4da4:	mov	x0, #0xffffffffffffffec    	// #-20
    4da8:	ldp	x19, x20, [sp, #16]
    4dac:	ldp	x21, x22, [sp, #32]
    4db0:	ldr	x23, [sp, #48]
    4db4:	ldp	x29, x30, [sp], #64
    4db8:	ret
    4dbc:	mov	x0, #0xffffffffffffffb8    	// #-72
    4dc0:	ldp	x19, x20, [sp, #16]
    4dc4:	ldp	x21, x22, [sp, #32]
    4dc8:	ldr	x23, [sp, #48]
    4dcc:	ldp	x29, x30, [sp], #64
    4dd0:	ret
    4dd4:	nop

0000000000004dd8 <HUF_decompress4X1>:
    4dd8:	mov	x12, #0x2840                	// #10304
    4ddc:	sub	sp, sp, x12
    4de0:	stp	x29, x30, [sp]
    4de4:	mov	x29, sp
    4de8:	stp	x19, x20, [sp, #16]
    4dec:	mov	x19, x0
    4df0:	mov	x20, x1
    4df4:	add	x0, sp, #0x838
    4df8:	mov	w1, #0x0                   	// #0
    4dfc:	stp	x21, x22, [sp, #32]
    4e00:	mov	x22, x3
    4e04:	mov	x21, x2
    4e08:	mov	x2, #0x2004                	// #8196
    4e0c:	bl	0 <memset>
    4e10:	mov	w7, #0xb                   	// #11
    4e14:	mov	x4, x22
    4e18:	movk	w7, #0xb00, lsl #16
    4e1c:	mov	x3, x21
    4e20:	mov	x2, x20
    4e24:	mov	x1, x19
    4e28:	add	x5, sp, #0x38
    4e2c:	add	x0, sp, #0x838
    4e30:	mov	x6, #0x800                 	// #2048
    4e34:	str	w7, [sp, #2104]
    4e38:	bl	4d28 <HUF_readDTableX1_wksp+0x188>
    4e3c:	mov	x12, #0x2840                	// #10304
    4e40:	ldp	x29, x30, [sp]
    4e44:	ldp	x19, x20, [sp, #16]
    4e48:	ldp	x21, x22, [sp, #32]
    4e4c:	add	sp, sp, x12
    4e50:	ret
    4e54:	nop

0000000000004e58 <HUF_readDTableX1>:
    4e58:	sub	sp, sp, #0x810
    4e5c:	mov	x4, #0x800                 	// #2048
    4e60:	add	x3, sp, #0x10
    4e64:	stp	x29, x30, [sp]
    4e68:	mov	x29, sp
    4e6c:	bl	4ba0 <HUF_readDTableX1_wksp>
    4e70:	ldp	x29, x30, [sp]
    4e74:	add	sp, sp, #0x810
    4e78:	ret
    4e7c:	nop

0000000000004e80 <HUF_decompress1X1_usingDTable>:
    4e80:	stp	x29, x30, [sp, #-80]!
    4e84:	mov	x29, sp
    4e88:	stp	x19, x20, [sp, #16]
    4e8c:	mov	x19, x4
    4e90:	mov	x20, x0
    4e94:	add	x0, sp, #0x48
    4e98:	stp	x21, x22, [sp, #32]
    4e9c:	mov	x21, x1
    4ea0:	mov	x22, x2
    4ea4:	mov	x1, x4
    4ea8:	mov	x2, #0x4                   	// #4
    4eac:	str	x23, [sp, #48]
    4eb0:	mov	x23, x3
    4eb4:	bl	0 <grub_memmove>
    4eb8:	ldrb	w0, [sp, #73]
    4ebc:	cbnz	w0, 4eec <HUF_decompress1X1_usingDTable+0x6c>
    4ec0:	mov	x4, x19
    4ec4:	mov	x3, x23
    4ec8:	mov	x2, x22
    4ecc:	mov	x1, x21
    4ed0:	mov	x0, x20
    4ed4:	bl	1498 <FSE_decompress+0x58>
    4ed8:	ldp	x19, x20, [sp, #16]
    4edc:	ldp	x21, x22, [sp, #32]
    4ee0:	ldr	x23, [sp, #48]
    4ee4:	ldp	x29, x30, [sp], #80
    4ee8:	ret
    4eec:	mov	x0, #0xffffffffffffffff    	// #-1
    4ef0:	ldp	x19, x20, [sp, #16]
    4ef4:	ldp	x21, x22, [sp, #32]
    4ef8:	ldr	x23, [sp, #48]
    4efc:	ldp	x29, x30, [sp], #80
    4f00:	ret
    4f04:	nop

0000000000004f08 <HUF_decompress1X1_DCtx_wksp>:
    4f08:	stp	x29, x30, [sp, #-64]!
    4f0c:	mov	x29, sp
    4f10:	stp	x19, x20, [sp, #16]
    4f14:	mov	x20, x3
    4f18:	mov	x19, x4
    4f1c:	mov	x3, x5
    4f20:	mov	x4, x6
    4f24:	stp	x21, x22, [sp, #32]
    4f28:	mov	x21, x1
    4f2c:	mov	x22, x2
    4f30:	mov	x1, x20
    4f34:	mov	x2, x19
    4f38:	str	x23, [sp, #48]
    4f3c:	mov	x23, x0
    4f40:	bl	4ba0 <HUF_readDTableX1_wksp>
    4f44:	cmn	x0, #0x78
    4f48:	b.hi	4f80 <HUF_decompress1X1_DCtx_wksp+0x78>  // b.pmore
    4f4c:	cmp	x19, x0
    4f50:	b.ls	4f7c <HUF_decompress1X1_DCtx_wksp+0x74>  // b.plast
    4f54:	sub	x3, x19, x0
    4f58:	add	x2, x20, x0
    4f5c:	mov	x4, x23
    4f60:	mov	x1, x22
    4f64:	mov	x0, x21
    4f68:	ldp	x19, x20, [sp, #16]
    4f6c:	ldp	x21, x22, [sp, #32]
    4f70:	ldr	x23, [sp, #48]
    4f74:	ldp	x29, x30, [sp], #64
    4f78:	b	1498 <FSE_decompress+0x58>
    4f7c:	mov	x0, #0xffffffffffffffb8    	// #-72
    4f80:	ldp	x19, x20, [sp, #16]
    4f84:	ldp	x21, x22, [sp, #32]
    4f88:	ldr	x23, [sp, #48]
    4f8c:	ldp	x29, x30, [sp], #64
    4f90:	ret
    4f94:	nop

0000000000004f98 <HUF_decompress1X1_DCtx>:
    4f98:	sub	sp, sp, #0x810
    4f9c:	mov	x6, #0x800                 	// #2048
    4fa0:	add	x5, sp, #0x10
    4fa4:	stp	x29, x30, [sp]
    4fa8:	mov	x29, sp
    4fac:	bl	4f08 <HUF_decompress1X1_DCtx_wksp>
    4fb0:	ldp	x29, x30, [sp]
    4fb4:	add	sp, sp, #0x810
    4fb8:	ret
    4fbc:	nop

0000000000004fc0 <HUF_decompress1X1>:
    4fc0:	mov	x12, #0x2840                	// #10304
    4fc4:	sub	sp, sp, x12
    4fc8:	stp	x29, x30, [sp]
    4fcc:	mov	x29, sp
    4fd0:	stp	x19, x20, [sp, #16]
    4fd4:	mov	x19, x0
    4fd8:	mov	x20, x1
    4fdc:	add	x0, sp, #0x838
    4fe0:	mov	w1, #0x0                   	// #0
    4fe4:	stp	x21, x22, [sp, #32]
    4fe8:	mov	x22, x3
    4fec:	mov	x21, x2
    4ff0:	mov	x2, #0x2004                	// #8196
    4ff4:	bl	0 <memset>
    4ff8:	mov	w7, #0xb                   	// #11
    4ffc:	mov	x4, x22
    5000:	movk	w7, #0xb00, lsl #16
    5004:	mov	x3, x21
    5008:	mov	x2, x20
    500c:	mov	x1, x19
    5010:	add	x5, sp, #0x38
    5014:	add	x0, sp, #0x838
    5018:	mov	x6, #0x800                 	// #2048
    501c:	str	w7, [sp, #2104]
    5020:	bl	4f08 <HUF_decompress1X1_DCtx_wksp>
    5024:	mov	x12, #0x2840                	// #10304
    5028:	ldp	x29, x30, [sp]
    502c:	ldp	x19, x20, [sp, #16]
    5030:	ldp	x21, x22, [sp, #32]
    5034:	add	sp, sp, x12
    5038:	ret
    503c:	nop

0000000000005040 <HUF_decompress4X1_usingDTable>:
    5040:	stp	x29, x30, [sp, #-80]!
    5044:	mov	x29, sp
    5048:	stp	x19, x20, [sp, #16]
    504c:	mov	x19, x4
    5050:	mov	x20, x3
    5054:	stp	x21, x22, [sp, #32]
    5058:	mov	x21, x0
    505c:	mov	x22, x1
    5060:	add	x0, sp, #0x48
    5064:	mov	x1, x4
    5068:	str	x23, [sp, #48]
    506c:	mov	x23, x2
    5070:	mov	x2, #0x4                   	// #4
    5074:	bl	0 <grub_memmove>
    5078:	ldrb	w0, [sp, #73]
    507c:	cbnz	w0, 50b8 <HUF_decompress4X1_usingDTable+0x78>
    5080:	cmp	x20, #0x9
    5084:	mov	x0, #0xffffffffffffffec    	// #-20
    5088:	b.ls	50a4 <HUF_decompress4X1_usingDTable+0x64>  // b.plast
    508c:	mov	x4, x19
    5090:	mov	x3, x20
    5094:	mov	x2, x23
    5098:	mov	x1, x22
    509c:	mov	x0, x21
    50a0:	bl	1ca0 <FSE_decompress+0x860>
    50a4:	ldp	x19, x20, [sp, #16]
    50a8:	ldp	x21, x22, [sp, #32]
    50ac:	ldr	x23, [sp, #48]
    50b0:	ldp	x29, x30, [sp], #80
    50b4:	ret
    50b8:	mov	x0, #0xffffffffffffffff    	// #-1
    50bc:	ldp	x19, x20, [sp, #16]
    50c0:	ldp	x21, x22, [sp, #32]
    50c4:	ldr	x23, [sp, #48]
    50c8:	ldp	x29, x30, [sp], #80
    50cc:	ret

00000000000050d0 <HUF_decompress4X1_DCtx_wksp>:
    50d0:	b	4d28 <HUF_readDTableX1_wksp+0x188>
    50d4:	nop

00000000000050d8 <HUF_decompress4X1_DCtx>:
    50d8:	sub	sp, sp, #0x810
    50dc:	mov	x6, #0x800                 	// #2048
    50e0:	add	x5, sp, #0x10
    50e4:	stp	x29, x30, [sp]
    50e8:	mov	x29, sp
    50ec:	bl	4d28 <HUF_readDTableX1_wksp+0x188>
    50f0:	ldp	x29, x30, [sp]
    50f4:	add	sp, sp, #0x810
    50f8:	ret
    50fc:	nop

0000000000005100 <HUF_readDTableX2_wksp>:
    5100:	stp	x29, x30, [sp, #-336]!
    5104:	mov	x29, sp
    5108:	stp	x25, x26, [sp, #64]
    510c:	add	x25, sp, #0x118
    5110:	stp	x19, x20, [sp, #16]
    5114:	mov	x19, x4
    5118:	mov	x20, x0
    511c:	stp	x21, x22, [sp, #32]
    5120:	mov	x21, x3
    5124:	stp	x23, x24, [sp, #48]
    5128:	mov	x23, x1
    512c:	mov	x24, x2
    5130:	mov	x1, x0
    5134:	mov	x2, #0x4                   	// #4
    5138:	mov	x0, x25
    513c:	bl	0 <grub_memmove>
    5140:	ldr	w0, [sp, #280]
    5144:	cmp	x19, #0x5db
    5148:	str	w0, [sp, #208]
    514c:	ldrb	w0, [sp, #280]
    5150:	str	w0, [sp, #108]
    5154:	b.ls	5550 <HUF_readDTableX2_wksp+0x450>  // b.plast
    5158:	add	x22, x21, #0x270
    515c:	mov	x2, #0x6c                  	// #108
    5160:	mov	x0, x22
    5164:	mov	w1, #0x0                   	// #0
    5168:	stp	x27, x28, [sp, #80]
    516c:	bl	0 <grub_memset>
    5170:	ldr	w27, [sp, #108]
    5174:	add	w26, w27, #0x1
    5178:	cmp	w27, #0xc
    517c:	b.hi	554c <HUF_readDTableX2_wksp+0x44c>  // b.pmore
    5180:	add	x19, x21, #0x4dc
    5184:	mov	x5, x23
    5188:	mov	x6, x24
    518c:	mov	x0, x19
    5190:	add	x4, sp, #0xd8
    5194:	add	x3, sp, #0xdc
    5198:	mov	x2, x22
    519c:	mov	x1, #0x100                 	// #256
    51a0:	bl	368 <HUF_readStats>
    51a4:	mov	x23, x0
    51a8:	cmn	x0, #0x78
    51ac:	b.hi	55bc <HUF_readDTableX2_wksp+0x4bc>  // b.pmore
    51b0:	ldr	w2, [sp, #216]
    51b4:	cmp	w2, w27
    51b8:	b.hi	554c <HUF_readDTableX2_wksp+0x44c>  // b.pmore
    51bc:	ldr	w0, [x22, w2, uxtw #2]
    51c0:	add	w27, w2, #0x1
    51c4:	cbnz	w0, 55dc <HUF_readDTableX2_wksp+0x4dc>
    51c8:	mov	w3, w2
    51cc:	nop
    51d0:	mov	w6, w3
    51d4:	sub	w3, w3, #0x1
    51d8:	ldr	w0, [x22, w3, uxtw #2]
    51dc:	cbz	w0, 51d0 <HUF_readDTableX2_wksp+0xd0>
    51e0:	sub	w7, w3, w27
    51e4:	sub	w3, w27, w3
    51e8:	add	w7, w7, w26
    51ec:	cmp	w6, #0x1
    51f0:	add	x8, x21, #0x2a8
    51f4:	b.ls	5600 <HUF_readDTableX2_wksp+0x500>  // b.plast
    51f8:	sub	w1, w6, #0x2
    51fc:	add	x4, x21, #0x278
    5200:	add	x0, x21, #0x274
    5204:	mov	w10, #0x0                   	// #0
    5208:	add	x4, x4, w1, uxtw #2
    520c:	nop
    5210:	ldr	w1, [x0]
    5214:	add	x0, x0, #0x4
    5218:	str	w10, [x0, #52]
    521c:	cmp	x4, x0
    5220:	add	w10, w10, w1
    5224:	b.ne	5210 <HUF_readDTableX2_wksp+0x110>  // b.any
    5228:	ldr	w12, [sp, #220]
    522c:	add	x26, x21, #0x2dc
    5230:	str	w10, [x21, #680]
    5234:	cbz	w12, 55ec <HUF_readDTableX2_wksp+0x4ec>
    5238:	mov	x1, #0x0                   	// #0
    523c:	nop
    5240:	ldrb	w5, [x19, x1]
    5244:	mov	x4, x5
    5248:	ldr	w0, [x8, x5, lsl #2]
    524c:	add	w9, w0, #0x1
    5250:	str	w9, [x8, x5, lsl #2]
    5254:	ubfiz	x0, x0, #1, #32
    5258:	add	x5, x26, x0
    525c:	strb	w1, [x26, x0]
    5260:	add	x1, x1, #0x1
    5264:	strb	w4, [x5, #1]
    5268:	cmp	w12, w1
    526c:	b.hi	5240 <HUF_readDTableX2_wksp+0x140>  // b.pmore
    5270:	ldr	w0, [sp, #108]
    5274:	cmp	w6, #0x1
    5278:	str	wzr, [x21, #680]
    527c:	sub	w0, w0, w2
    5280:	sub	w8, w0, #0x1
    5284:	b.ls	52b4 <HUF_readDTableX2_wksp+0x1b4>  // b.plast
    5288:	add	w8, w6, w8
    528c:	add	x4, x21, #0x4
    5290:	mov	w2, #0x0                   	// #0
    5294:	nop
    5298:	ldr	w1, [x4, #624]
    529c:	str	w2, [x4], #4
    52a0:	lsl	w1, w1, w0
    52a4:	add	w0, w0, #0x1
    52a8:	cmp	w8, w0
    52ac:	add	w2, w2, w1
    52b0:	b.ne	5298 <HUF_readDTableX2_wksp+0x198>  // b.any
    52b4:	cmp	w3, w7
    52b8:	b.cs	5310 <HUF_readDTableX2_wksp+0x210>  // b.hs, b.nlast
    52bc:	mov	w4, #0x34                  	// #52
    52c0:	sub	w0, w6, #0x2
    52c4:	add	x5, x21, #0x8
    52c8:	mov	w2, w3
    52cc:	umull	x4, w3, w4
    52d0:	add	x5, x5, w0, uxtw #2
    52d4:	nop
    52d8:	cmp	w6, #0x1
    52dc:	add	x0, x21, #0x4
    52e0:	b.ls	5300 <HUF_readDTableX2_wksp+0x200>  // b.plast
    52e4:	nop
    52e8:	ldr	w1, [x0]
    52ec:	lsr	w1, w1, w2
    52f0:	str	w1, [x0, x4]
    52f4:	add	x0, x0, #0x4
    52f8:	cmp	x5, x0
    52fc:	b.ne	52e8 <HUF_readDTableX2_wksp+0x1e8>  // b.any
    5300:	add	w2, w2, #0x1
    5304:	add	x4, x4, #0x34
    5308:	cmp	w2, w7
    530c:	b.ne	52d8 <HUF_readDTableX2_wksp+0x1d8>  // b.any
    5310:	add	x12, sp, #0xe0
    5314:	ldr	w0, [sp, #108]
    5318:	mov	x1, x21
    531c:	mov	x2, #0x34                  	// #52
    5320:	sub	w0, w27, w0
    5324:	str	w10, [sp, #112]
    5328:	str	w3, [sp, #120]
    532c:	str	w0, [sp, #168]
    5330:	mov	x0, x12
    5334:	bl	0 <grub_memmove>
    5338:	ldr	w10, [sp, #112]
    533c:	add	x12, sp, #0xe0
    5340:	ldr	w3, [sp, #120]
    5344:	cbz	w10, 550c <HUF_readDTableX2_wksp+0x40c>
    5348:	sub	w22, w10, #0x1
    534c:	add	x0, x21, #0x2de
    5350:	str	x0, [sp, #176]
    5354:	mov	w28, #0x1                   	// #1
    5358:	add	x0, x0, w22, uxtw #1
    535c:	str	x0, [sp, #144]
    5360:	add	x0, x20, #0x4
    5364:	str	x0, [sp, #160]
    5368:	ldr	w0, [sp, #108]
    536c:	mov	w22, w28
    5370:	stp	x23, x20, [sp, #192]
    5374:	mov	x23, x26
    5378:	sub	w0, w0, w27
    537c:	mov	x26, x21
    5380:	str	w0, [sp, #152]
    5384:	add	x0, x20, #0x8
    5388:	mov	w20, w27
    538c:	str	w3, [sp, #156]
    5390:	str	w10, [sp, #172]
    5394:	str	x0, [sp, #184]
    5398:	ldrb	w21, [x23, #1]
    539c:	ldr	w0, [sp, #152]
    53a0:	ldrb	w19, [x23]
    53a4:	sub	w24, w20, w21
    53a8:	add	w27, w21, w0
    53ac:	ldr	w0, [sp, #156]
    53b0:	ldr	w5, [x12, x21, lsl #2]
    53b4:	cmp	w27, w0
    53b8:	lsl	w10, w28, w27
    53bc:	b.cc	5570 <HUF_readDTableX2_wksp+0x470>  // b.lo, b.ul, b.last
    53c0:	ldp	w0, w4, [sp, #168]
    53c4:	mov	x3, #0x2a4                 	// #676
    53c8:	mov	x2, #0x34                  	// #52
    53cc:	add	w6, w0, w24
    53d0:	mov	w0, #0x34                  	// #52
    53d4:	cmp	w6, #0x0
    53d8:	stp	w6, w10, [sp, #136]
    53dc:	csel	w14, w6, w28, gt
    53e0:	umaddl	x1, w24, w0, x26
    53e4:	ldr	x0, [sp, #160]
    53e8:	add	x3, x3, w14, sxtw #2
    53ec:	ldr	w3, [x26, x3]
    53f0:	add	x5, x0, w5, uxtw #2
    53f4:	mov	x0, x25
    53f8:	str	x5, [sp, #128]
    53fc:	mov	w15, w3
    5400:	sub	w3, w4, w3
    5404:	str	x15, [sp, #112]
    5408:	stp	w3, w14, [sp, #120]
    540c:	bl	0 <grub_memmove>
    5410:	ldp	w6, w10, [sp, #136]
    5414:	add	x12, sp, #0xe0
    5418:	ldp	w3, w14, [sp, #120]
    541c:	cmp	w6, #0x1
    5420:	ldr	x15, [sp, #112]
    5424:	ldr	x5, [sp, #128]
    5428:	b.le	5460 <HUF_readDTableX2_wksp+0x360>
    542c:	ldr	w1, [x25, w14, sxtw #2]
    5430:	and	w6, w24, #0xff
    5434:	cbz	w1, 5460 <HUF_readDTableX2_wksp+0x360>
    5438:	sub	w2, w1, #0x1
    543c:	add	x1, x5, #0x4
    5440:	mov	x0, x5
    5444:	add	x1, x1, w2, uxtw #2
    5448:	strh	w19, [x0]
    544c:	add	x0, x0, #0x4
    5450:	sturb	w6, [x0, #-2]
    5454:	sturb	w22, [x0, #-1]
    5458:	cmp	x1, x0
    545c:	b.ne	5448 <HUF_readDTableX2_wksp+0x348>  // b.any
    5460:	cbz	w3, 54ec <HUF_readDTableX2_wksp+0x3ec>
    5464:	ldr	x0, [sp, #176]
    5468:	sub	w16, w3, #0x1
    546c:	add	x14, x15, #0x16e
    5470:	add	x16, x16, x15
    5474:	sub	w30, w27, w20
    5478:	and	w18, w24, #0xff
    547c:	add	x14, x26, x14, lsl #1
    5480:	add	x16, x0, x16, lsl #1
    5484:	mov	w17, #0x2                   	// #2
    5488:	ldrb	w6, [x14, #1]
    548c:	ldrb	w3, [x14]
    5490:	add	w4, w6, w30
    5494:	sub	w0, w20, w6
    5498:	add	w0, w18, w0
    549c:	ldr	w1, [x25, x6, lsl #2]
    54a0:	ubfiz	w3, w3, #8, #8
    54a4:	add	w3, w19, w3
    54a8:	lsl	w4, w28, w4
    54ac:	and	w0, w0, #0xff
    54b0:	add	w4, w4, w1
    54b4:	and	w3, w3, #0xffff
    54b8:	mov	w2, w1
    54bc:	add	w1, w1, #0x1
    54c0:	cmp	w4, w1
    54c4:	ubfiz	x2, x2, #2, #32
    54c8:	add	x7, x5, x2
    54cc:	strh	w3, [x5, x2]
    54d0:	strb	w0, [x7, #2]
    54d4:	strb	w17, [x7, #3]
    54d8:	b.hi	54b8 <HUF_readDTableX2_wksp+0x3b8>  // b.pmore
    54dc:	str	w4, [x25, x6, lsl #2]
    54e0:	add	x14, x14, #0x2
    54e4:	cmp	x16, x14
    54e8:	b.ne	5488 <HUF_readDTableX2_wksp+0x388>  // b.any
    54ec:	ldr	w0, [x12, x21, lsl #2]
    54f0:	add	w10, w10, w0
    54f4:	ldr	x0, [sp, #144]
    54f8:	str	w10, [x12, x21, lsl #2]
    54fc:	add	x23, x23, #0x2
    5500:	cmp	x0, x23
    5504:	b.ne	5398 <HUF_readDTableX2_wksp+0x298>  // b.any
    5508:	ldp	x23, x20, [sp, #192]
    550c:	mov	w3, #0x1                   	// #1
    5510:	strb	w3, [sp, #209]
    5514:	add	x1, sp, #0xd0
    5518:	ldrb	w3, [sp, #108]
    551c:	mov	x0, x20
    5520:	mov	x2, #0x4                   	// #4
    5524:	strb	w3, [sp, #210]
    5528:	bl	0 <grub_memmove>
    552c:	mov	x0, x23
    5530:	ldp	x19, x20, [sp, #16]
    5534:	ldp	x21, x22, [sp, #32]
    5538:	ldp	x23, x24, [sp, #48]
    553c:	ldp	x25, x26, [sp, #64]
    5540:	ldp	x27, x28, [sp, #80]
    5544:	ldp	x29, x30, [sp], #336
    5548:	ret
    554c:	ldp	x27, x28, [sp, #80]
    5550:	mov	x23, #0xffffffffffffffd4    	// #-44
    5554:	mov	x0, x23
    5558:	ldp	x19, x20, [sp, #16]
    555c:	ldp	x21, x22, [sp, #32]
    5560:	ldp	x23, x24, [sp, #48]
    5564:	ldp	x25, x26, [sp, #64]
    5568:	ldp	x29, x30, [sp], #336
    556c:	ret
    5570:	add	w10, w5, w10
    5574:	and	w18, w24, #0xff
    5578:	cmp	w5, w10
    557c:	b.cs	54f4 <HUF_readDTableX2_wksp+0x3f4>  // b.hs, b.nlast
    5580:	ldr	x1, [sp, #160]
    5584:	mvn	w0, w5
    5588:	add	w0, w0, w10
    558c:	add	x1, x1, w5, uxtw #2
    5590:	add	x5, x0, w5, uxtw
    5594:	ldr	x0, [sp, #184]
    5598:	add	x0, x0, x5, lsl #2
    559c:	nop
    55a0:	strh	w19, [x1]
    55a4:	add	x1, x1, #0x4
    55a8:	sturb	w18, [x1, #-2]
    55ac:	sturb	w22, [x1, #-1]
    55b0:	cmp	x0, x1
    55b4:	b.ne	55a0 <HUF_readDTableX2_wksp+0x4a0>  // b.any
    55b8:	b	54f4 <HUF_readDTableX2_wksp+0x3f4>
    55bc:	mov	x0, x23
    55c0:	ldp	x19, x20, [sp, #16]
    55c4:	ldp	x21, x22, [sp, #32]
    55c8:	ldp	x23, x24, [sp, #48]
    55cc:	ldp	x25, x26, [sp, #64]
    55d0:	ldp	x27, x28, [sp, #80]
    55d4:	ldp	x29, x30, [sp], #336
    55d8:	ret
    55dc:	ldr	w7, [sp, #108]
    55e0:	mov	w6, w27
    55e4:	mov	w3, #0x1                   	// #1
    55e8:	b	51ec <HUF_readDTableX2_wksp+0xec>
    55ec:	ldr	w0, [sp, #108]
    55f0:	str	wzr, [x21, #680]
    55f4:	sub	w0, w0, w2
    55f8:	sub	w8, w0, #0x1
    55fc:	b	5288 <HUF_readDTableX2_wksp+0x188>
    5600:	ldr	w12, [sp, #220]
    5604:	add	x26, x21, #0x2dc
    5608:	str	wzr, [x21, #680]
    560c:	mov	w10, #0x0                   	// #0
    5610:	cbnz	w12, 5238 <HUF_readDTableX2_wksp+0x138>
    5614:	b	52b4 <HUF_readDTableX2_wksp+0x1b4>
    5618:	stp	x29, x30, [sp, #-64]!
    561c:	mov	x29, sp
    5620:	stp	x19, x20, [sp, #16]
    5624:	mov	x20, x3
    5628:	mov	x19, x4
    562c:	mov	x3, x5
    5630:	mov	x4, x6
    5634:	stp	x21, x22, [sp, #32]
    5638:	mov	x21, x1
    563c:	mov	x22, x2
    5640:	mov	x1, x20
    5644:	mov	x2, x19
    5648:	str	x23, [sp, #48]
    564c:	mov	x23, x0
    5650:	bl	5100 <HUF_readDTableX2_wksp>
    5654:	cmn	x0, #0x78
    5658:	b.hi	5698 <HUF_readDTableX2_wksp+0x598>  // b.pmore
    565c:	cmp	x19, x0
    5660:	b.ls	56ac <HUF_readDTableX2_wksp+0x5ac>  // b.plast
    5664:	sub	x3, x19, x0
    5668:	cmp	x3, #0x9
    566c:	b.ls	5694 <HUF_readDTableX2_wksp+0x594>  // b.plast
    5670:	add	x2, x20, x0
    5674:	mov	x4, x23
    5678:	mov	x1, x22
    567c:	mov	x0, x21
    5680:	ldp	x19, x20, [sp, #16]
    5684:	ldp	x21, x22, [sp, #32]
    5688:	ldr	x23, [sp, #48]
    568c:	ldp	x29, x30, [sp], #64
    5690:	b	2fd0 <FSE_decompress+0x1b90>
    5694:	mov	x0, #0xffffffffffffffec    	// #-20
    5698:	ldp	x19, x20, [sp, #16]
    569c:	ldp	x21, x22, [sp, #32]
    56a0:	ldr	x23, [sp, #48]
    56a4:	ldp	x29, x30, [sp], #64
    56a8:	ret
    56ac:	mov	x0, #0xffffffffffffffb8    	// #-72
    56b0:	ldp	x19, x20, [sp, #16]
    56b4:	ldp	x21, x22, [sp, #32]
    56b8:	ldr	x23, [sp, #48]
    56bc:	ldp	x29, x30, [sp], #64
    56c0:	ret
    56c4:	nop

00000000000056c8 <HUF_decompress4X2>:
    56c8:	mov	x12, #0x4840                	// #18496
    56cc:	sub	sp, sp, x12
    56d0:	stp	x29, x30, [sp]
    56d4:	mov	x29, sp
    56d8:	stp	x19, x20, [sp, #16]
    56dc:	mov	x19, x0
    56e0:	mov	x20, x1
    56e4:	add	x0, sp, #0x838
    56e8:	mov	w1, #0x0                   	// #0
    56ec:	stp	x21, x22, [sp, #32]
    56f0:	mov	x22, x3
    56f4:	mov	x21, x2
    56f8:	mov	x2, #0x4004                	// #16388
    56fc:	bl	0 <memset>
    5700:	mov	w7, #0xc                   	// #12
    5704:	mov	x4, x22
    5708:	movk	w7, #0xc00, lsl #16
    570c:	mov	x3, x21
    5710:	mov	x2, x20
    5714:	mov	x1, x19
    5718:	add	x5, sp, #0x38
    571c:	add	x0, sp, #0x838
    5720:	mov	x6, #0x800                 	// #2048
    5724:	str	w7, [sp, #2104]
    5728:	bl	5618 <HUF_readDTableX2_wksp+0x518>
    572c:	mov	x12, #0x4840                	// #18496
    5730:	ldp	x29, x30, [sp]
    5734:	ldp	x19, x20, [sp, #16]
    5738:	ldp	x21, x22, [sp, #32]
    573c:	add	sp, sp, x12
    5740:	ret
    5744:	nop
    5748:	cmp	x2, x4
    574c:	b.ls	5798 <HUF_decompress4X2+0xd0>  // b.plast
    5750:	lsl	x7, x4, #4
    5754:	adrp	x8, 0 <FSE_versionNumber>
    5758:	ldr	x8, [x8]
    575c:	udiv	x7, x7, x2
    5760:	ubfiz	x9, x7, #1, #32
    5764:	add	x7, x9, w7, uxtw
    5768:	lsl	x7, x7, #3
    576c:	add	x9, x8, x7
    5770:	ldr	w10, [x8, x7]
    5774:	ldp	w8, w11, [x9, #4]
    5778:	ldr	w7, [x9, #12]
    577c:	lsr	x9, x2, #8
    5780:	madd	w8, w8, w9, w10
    5784:	madd	w7, w7, w9, w11
    5788:	add	w7, w7, w7, lsr #3
    578c:	cmp	w8, w7
    5790:	b.ls	57c0 <HUF_decompress4X2+0xf8>  // b.plast
    5794:	b	5618 <HUF_readDTableX2_wksp+0x518>
    5798:	lsr	x9, x2, #8
    579c:	mov	w7, #0x91                  	// #145
    57a0:	mov	w11, #0x763                 	// #1891
    57a4:	mov	w8, #0x80                  	// #128
    57a8:	mov	w10, #0x2d2                 	// #722
    57ac:	madd	w7, w7, w9, w11
    57b0:	madd	w8, w8, w9, w10
    57b4:	add	w7, w7, w7, lsr #3
    57b8:	cmp	w8, w7
    57bc:	b.hi	5794 <HUF_decompress4X2+0xcc>  // b.pmore
    57c0:	b	4d28 <HUF_readDTableX1_wksp+0x188>
    57c4:	nop
	...

00000000000057d0 <HUF_readDTableX2>:
    57d0:	sub	sp, sp, #0x810
    57d4:	mov	x4, #0x800                 	// #2048
    57d8:	add	x3, sp, #0x10
    57dc:	stp	x29, x30, [sp]
    57e0:	mov	x29, sp
    57e4:	bl	5100 <HUF_readDTableX2_wksp>
    57e8:	ldp	x29, x30, [sp]
    57ec:	add	sp, sp, #0x810
    57f0:	ret
    57f4:	nop

00000000000057f8 <HUF_decompress1X2_usingDTable>:
    57f8:	stp	x29, x30, [sp, #-80]!
    57fc:	mov	x29, sp
    5800:	stp	x19, x20, [sp, #16]
    5804:	mov	x19, x4
    5808:	mov	x20, x0
    580c:	add	x0, sp, #0x48
    5810:	stp	x21, x22, [sp, #32]
    5814:	mov	x21, x1
    5818:	mov	x22, x2
    581c:	mov	x1, x4
    5820:	mov	x2, #0x4                   	// #4
    5824:	str	x23, [sp, #48]
    5828:	mov	x23, x3
    582c:	bl	0 <grub_memmove>
    5830:	ldrb	w0, [sp, #73]
    5834:	cmp	w0, #0x1
    5838:	b.eq	5854 <HUF_decompress1X2_usingDTable+0x5c>  // b.none
    583c:	mov	x0, #0xffffffffffffffff    	// #-1
    5840:	ldp	x19, x20, [sp, #16]
    5844:	ldp	x21, x22, [sp, #32]
    5848:	ldr	x23, [sp, #48]
    584c:	ldp	x29, x30, [sp], #80
    5850:	ret
    5854:	mov	x4, x19
    5858:	mov	x3, x23
    585c:	mov	x2, x22
    5860:	mov	x1, x21
    5864:	mov	x0, x20
    5868:	bl	1790 <FSE_decompress+0x350>
    586c:	ldp	x19, x20, [sp, #16]
    5870:	ldp	x21, x22, [sp, #32]
    5874:	ldr	x23, [sp, #48]
    5878:	ldp	x29, x30, [sp], #80
    587c:	ret

0000000000005880 <HUF_decompress1X2_DCtx_wksp>:
    5880:	stp	x29, x30, [sp, #-64]!
    5884:	mov	x29, sp
    5888:	stp	x19, x20, [sp, #16]
    588c:	mov	x20, x3
    5890:	mov	x19, x4
    5894:	mov	x3, x5
    5898:	mov	x4, x6
    589c:	stp	x21, x22, [sp, #32]
    58a0:	mov	x21, x1
    58a4:	mov	x22, x2
    58a8:	mov	x1, x20
    58ac:	mov	x2, x19
    58b0:	str	x23, [sp, #48]
    58b4:	mov	x23, x0
    58b8:	bl	5100 <HUF_readDTableX2_wksp>
    58bc:	cmn	x0, #0x78
    58c0:	b.hi	58f8 <HUF_decompress1X2_DCtx_wksp+0x78>  // b.pmore
    58c4:	cmp	x19, x0
    58c8:	b.ls	58f4 <HUF_decompress1X2_DCtx_wksp+0x74>  // b.plast
    58cc:	sub	x3, x19, x0
    58d0:	add	x2, x20, x0
    58d4:	mov	x4, x23
    58d8:	mov	x1, x22
    58dc:	mov	x0, x21
    58e0:	ldp	x19, x20, [sp, #16]
    58e4:	ldp	x21, x22, [sp, #32]
    58e8:	ldr	x23, [sp, #48]
    58ec:	ldp	x29, x30, [sp], #64
    58f0:	b	1790 <FSE_decompress+0x350>
    58f4:	mov	x0, #0xffffffffffffffb8    	// #-72
    58f8:	ldp	x19, x20, [sp, #16]
    58fc:	ldp	x21, x22, [sp, #32]
    5900:	ldr	x23, [sp, #48]
    5904:	ldp	x29, x30, [sp], #64
    5908:	ret
    590c:	nop

0000000000005910 <HUF_decompress1X2_DCtx>:
    5910:	sub	sp, sp, #0x810
    5914:	mov	x6, #0x800                 	// #2048
    5918:	add	x5, sp, #0x10
    591c:	stp	x29, x30, [sp]
    5920:	mov	x29, sp
    5924:	bl	5880 <HUF_decompress1X2_DCtx_wksp>
    5928:	ldp	x29, x30, [sp]
    592c:	add	sp, sp, #0x810
    5930:	ret
    5934:	nop

0000000000005938 <HUF_decompress1X2>:
    5938:	mov	x12, #0x4840                	// #18496
    593c:	sub	sp, sp, x12
    5940:	stp	x29, x30, [sp]
    5944:	mov	x29, sp
    5948:	stp	x19, x20, [sp, #16]
    594c:	mov	x19, x0
    5950:	mov	x20, x1
    5954:	add	x0, sp, #0x838
    5958:	mov	w1, #0x0                   	// #0
    595c:	stp	x21, x22, [sp, #32]
    5960:	mov	x22, x3
    5964:	mov	x21, x2
    5968:	mov	x2, #0x4004                	// #16388
    596c:	bl	0 <memset>
    5970:	mov	w7, #0xc                   	// #12
    5974:	mov	x4, x22
    5978:	movk	w7, #0xc00, lsl #16
    597c:	mov	x3, x21
    5980:	mov	x2, x20
    5984:	mov	x1, x19
    5988:	add	x5, sp, #0x38
    598c:	add	x0, sp, #0x838
    5990:	mov	x6, #0x800                 	// #2048
    5994:	str	w7, [sp, #2104]
    5998:	bl	5880 <HUF_decompress1X2_DCtx_wksp>
    599c:	mov	x12, #0x4840                	// #18496
    59a0:	ldp	x29, x30, [sp]
    59a4:	ldp	x19, x20, [sp, #16]
    59a8:	ldp	x21, x22, [sp, #32]
    59ac:	add	sp, sp, x12
    59b0:	ret
    59b4:	nop

00000000000059b8 <HUF_decompress4X2_usingDTable>:
    59b8:	stp	x29, x30, [sp, #-80]!
    59bc:	mov	x29, sp
    59c0:	stp	x19, x20, [sp, #16]
    59c4:	mov	x19, x4
    59c8:	mov	x20, x3
    59cc:	stp	x21, x22, [sp, #32]
    59d0:	mov	x21, x0
    59d4:	mov	x22, x1
    59d8:	add	x0, sp, #0x48
    59dc:	mov	x1, x4
    59e0:	str	x23, [sp, #48]
    59e4:	mov	x23, x2
    59e8:	mov	x2, #0x4                   	// #4
    59ec:	bl	0 <grub_memmove>
    59f0:	ldrb	w0, [sp, #73]
    59f4:	cmp	w0, #0x1
    59f8:	b.ne	5a34 <HUF_decompress4X2_usingDTable+0x7c>  // b.any
    59fc:	cmp	x20, #0x9
    5a00:	mov	x0, #0xffffffffffffffec    	// #-20
    5a04:	b.ls	5a20 <HUF_decompress4X2_usingDTable+0x68>  // b.plast
    5a08:	mov	x4, x19
    5a0c:	mov	x3, x20
    5a10:	mov	x2, x23
    5a14:	mov	x1, x22
    5a18:	mov	x0, x21
    5a1c:	bl	2fd0 <FSE_decompress+0x1b90>
    5a20:	ldp	x19, x20, [sp, #16]
    5a24:	ldp	x21, x22, [sp, #32]
    5a28:	ldr	x23, [sp, #48]
    5a2c:	ldp	x29, x30, [sp], #80
    5a30:	ret
    5a34:	mov	x0, #0xffffffffffffffff    	// #-1
    5a38:	ldp	x19, x20, [sp, #16]
    5a3c:	ldp	x21, x22, [sp, #32]
    5a40:	ldr	x23, [sp, #48]
    5a44:	ldp	x29, x30, [sp], #80
    5a48:	ret
    5a4c:	nop

0000000000005a50 <HUF_decompress4X2_DCtx_wksp>:
    5a50:	b	5618 <HUF_readDTableX2_wksp+0x518>
    5a54:	nop

0000000000005a58 <HUF_decompress4X2_DCtx>:
    5a58:	sub	sp, sp, #0x810
    5a5c:	mov	x6, #0x800                 	// #2048
    5a60:	add	x5, sp, #0x10
    5a64:	stp	x29, x30, [sp]
    5a68:	mov	x29, sp
    5a6c:	bl	5618 <HUF_readDTableX2_wksp+0x518>
    5a70:	ldp	x29, x30, [sp]
    5a74:	add	sp, sp, #0x810
    5a78:	ret
    5a7c:	nop

0000000000005a80 <HUF_decompress1X_usingDTable>:
    5a80:	stp	x29, x30, [sp, #-80]!
    5a84:	mov	x29, sp
    5a88:	stp	x19, x20, [sp, #16]
    5a8c:	mov	x19, x4
    5a90:	mov	x20, x0
    5a94:	add	x0, sp, #0x48
    5a98:	stp	x21, x22, [sp, #32]
    5a9c:	mov	x21, x1
    5aa0:	mov	x22, x2
    5aa4:	mov	x1, x4
    5aa8:	mov	x2, #0x4                   	// #4
    5aac:	str	x23, [sp, #48]
    5ab0:	mov	x23, x3
    5ab4:	bl	0 <grub_memmove>
    5ab8:	ldrb	w0, [sp, #73]
    5abc:	mov	x4, x19
    5ac0:	mov	x3, x23
    5ac4:	mov	x2, x22
    5ac8:	mov	x1, x21
    5acc:	cbz	w0, 5aec <HUF_decompress1X_usingDTable+0x6c>
    5ad0:	mov	x0, x20
    5ad4:	bl	1790 <FSE_decompress+0x350>
    5ad8:	ldp	x19, x20, [sp, #16]
    5adc:	ldp	x21, x22, [sp, #32]
    5ae0:	ldr	x23, [sp, #48]
    5ae4:	ldp	x29, x30, [sp], #80
    5ae8:	ret
    5aec:	mov	x0, x20
    5af0:	bl	1498 <FSE_decompress+0x58>
    5af4:	ldp	x19, x20, [sp, #16]
    5af8:	ldp	x21, x22, [sp, #32]
    5afc:	ldr	x23, [sp, #48]
    5b00:	ldp	x29, x30, [sp], #80
    5b04:	ret

0000000000005b08 <HUF_decompress4X_usingDTable>:
    5b08:	stp	x29, x30, [sp, #-80]!
    5b0c:	mov	x29, sp
    5b10:	stp	x19, x20, [sp, #16]
    5b14:	mov	x19, x3
    5b18:	mov	x20, x4
    5b1c:	stp	x21, x22, [sp, #32]
    5b20:	mov	x21, x0
    5b24:	mov	x22, x1
    5b28:	add	x0, sp, #0x48
    5b2c:	mov	x1, x4
    5b30:	str	x23, [sp, #48]
    5b34:	mov	x23, x2
    5b38:	mov	x2, #0x4                   	// #4
    5b3c:	bl	0 <grub_memmove>
    5b40:	ldrb	w0, [sp, #73]
    5b44:	cmp	x19, #0x9
    5b48:	cbz	w0, 5b80 <HUF_decompress4X_usingDTable+0x78>
    5b4c:	mov	x0, #0xffffffffffffffec    	// #-20
    5b50:	b.ls	5b6c <HUF_decompress4X_usingDTable+0x64>  // b.plast
    5b54:	mov	x4, x20
    5b58:	mov	x3, x19
    5b5c:	mov	x2, x23
    5b60:	mov	x1, x22
    5b64:	mov	x0, x21
    5b68:	bl	2fd0 <FSE_decompress+0x1b90>
    5b6c:	ldp	x19, x20, [sp, #16]
    5b70:	ldp	x21, x22, [sp, #32]
    5b74:	ldr	x23, [sp, #48]
    5b78:	ldp	x29, x30, [sp], #80
    5b7c:	ret
    5b80:	mov	x0, #0xffffffffffffffec    	// #-20
    5b84:	b.ls	5b6c <HUF_decompress4X_usingDTable+0x64>  // b.plast
    5b88:	mov	x4, x20
    5b8c:	mov	x3, x19
    5b90:	mov	x2, x23
    5b94:	mov	x1, x22
    5b98:	mov	x0, x21
    5b9c:	bl	1ca0 <FSE_decompress+0x860>
    5ba0:	ldp	x19, x20, [sp, #16]
    5ba4:	ldp	x21, x22, [sp, #32]
    5ba8:	ldr	x23, [sp, #48]
    5bac:	ldp	x29, x30, [sp], #80
    5bb0:	ret
    5bb4:	nop

0000000000005bb8 <HUF_selectDecoder>:
    5bb8:	cmp	x1, x0
    5bbc:	b.cs	5c08 <HUF_selectDecoder+0x50>  // b.hs, b.nlast
    5bc0:	lsl	x1, x1, #4
    5bc4:	adrp	x2, 0 <FSE_versionNumber>
    5bc8:	ldr	x2, [x2]
    5bcc:	udiv	x1, x1, x0
    5bd0:	lsr	x0, x0, #8
    5bd4:	ubfiz	x3, x1, #1, #32
    5bd8:	add	x1, x3, w1, uxtw
    5bdc:	lsl	x1, x1, #3
    5be0:	add	x5, x2, x1
    5be4:	ldr	w3, [x2, x1]
    5be8:	ldp	w2, w4, [x5, #4]
    5bec:	ldr	w1, [x5, #12]
    5bf0:	madd	w1, w1, w0, w4
    5bf4:	madd	w0, w2, w0, w3
    5bf8:	add	w1, w1, w1, lsr #3
    5bfc:	cmp	w0, w1
    5c00:	cset	w0, hi  // hi = pmore
    5c04:	ret
    5c08:	lsr	x0, x0, #8
    5c0c:	mov	w4, #0x763                 	// #1891
    5c10:	mov	w1, #0x91                  	// #145
    5c14:	mov	w2, #0x80                  	// #128
    5c18:	mov	w3, #0x2d2                 	// #722
    5c1c:	madd	w1, w1, w0, w4
    5c20:	madd	w0, w2, w0, w3
    5c24:	add	w1, w1, w1, lsr #3
    5c28:	cmp	w0, w1
    5c2c:	cset	w0, hi  // hi = pmore
    5c30:	ret
    5c34:	nop
	...

0000000000005c40 <HUF_decompress>:
    5c40:	stp	x29, x30, [sp, #-32]!
    5c44:	mov	x29, sp
    5c48:	str	x19, [sp, #16]
    5c4c:	mov	x19, x1
    5c50:	cbz	x1, 5cf4 <HUF_decompress+0xb4>
    5c54:	cmp	x1, x3
    5c58:	b.cc	5d18 <HUF_decompress+0xd8>  // b.lo, b.ul, b.last
    5c5c:	b.eq	5d28 <HUF_decompress+0xe8>  // b.none
    5c60:	cmp	x3, #0x1
    5c64:	b.eq	5d04 <HUF_decompress+0xc4>  // b.none
    5c68:	mov	x1, x0
    5c6c:	cmp	x19, x3
    5c70:	b.ls	5cd8 <HUF_decompress+0x98>  // b.plast
    5c74:	lsl	x0, x3, #4
    5c78:	adrp	x4, 0 <FSE_versionNumber>
    5c7c:	ldr	x7, [x4]
    5c80:	udiv	x0, x0, x19
    5c84:	ubfiz	x4, x0, #1, #32
    5c88:	add	x0, x4, w0, uxtw
    5c8c:	lsl	x0, x0, #3
    5c90:	add	x4, x7, x0
    5c94:	ldr	w8, [x7, x0]
    5c98:	ldp	w5, w9, [x4, #4]
    5c9c:	ldr	w4, [x4, #12]
    5ca0:	lsr	x6, x19, #8
    5ca4:	mov	x0, x1
    5ca8:	mov	x1, x19
    5cac:	ldr	x19, [sp, #16]
    5cb0:	madd	w4, w4, w6, w9
    5cb4:	madd	w5, w5, w6, w8
    5cb8:	ldp	x29, x30, [sp], #32
    5cbc:	add	w4, w4, w4, lsr #3
    5cc0:	cmp	w5, w4
    5cc4:	cset	x4, hi  // hi = pmore
    5cc8:	add	x4, x7, x4, lsl #3
    5ccc:	ldr	x4, [x4, #384]
    5cd0:	mov	x16, x4
    5cd4:	br	x16
    5cd8:	adrp	x0, 0 <FSE_versionNumber>
    5cdc:	mov	w4, #0x91                  	// #145
    5ce0:	mov	w9, #0x763                 	// #1891
    5ce4:	mov	w5, #0x80                  	// #128
    5ce8:	ldr	x7, [x0]
    5cec:	mov	w8, #0x2d2                 	// #722
    5cf0:	b	5ca0 <HUF_decompress+0x60>
    5cf4:	mov	x0, #0xffffffffffffffba    	// #-70
    5cf8:	ldr	x19, [sp, #16]
    5cfc:	ldp	x29, x30, [sp], #32
    5d00:	ret
    5d04:	ldrb	w1, [x2]
    5d08:	mov	x2, x19
    5d0c:	bl	0 <grub_memset>
    5d10:	mov	x0, x19
    5d14:	b	5cf8 <HUF_decompress+0xb8>
    5d18:	mov	x0, #0xffffffffffffffec    	// #-20
    5d1c:	ldr	x19, [sp, #16]
    5d20:	ldp	x29, x30, [sp], #32
    5d24:	ret
    5d28:	mov	x1, x2
    5d2c:	mov	x2, x19
    5d30:	bl	0 <grub_memmove>
    5d34:	mov	x0, x19
    5d38:	b	5cf8 <HUF_decompress+0xb8>
    5d3c:	nop
	...

0000000000005d48 <HUF_decompress4X_DCtx>:
    5d48:	cbz	x2, 5df4 <HUF_decompress4X_DCtx+0xac>
    5d4c:	stp	x29, x30, [sp, #-32]!
    5d50:	cmp	x2, x4
    5d54:	mov	x29, sp
    5d58:	str	x19, [sp, #16]
    5d5c:	mov	x19, x2
    5d60:	b.cc	5e18 <HUF_decompress4X_DCtx+0xd0>  // b.lo, b.ul, b.last
    5d64:	mov	x5, x1
    5d68:	b.eq	5e28 <HUF_decompress4X_DCtx+0xe0>  // b.none
    5d6c:	cmp	x4, #0x1
    5d70:	b.eq	5dfc <HUF_decompress4X_DCtx+0xb4>  // b.none
    5d74:	cmp	x2, x4
    5d78:	b.ls	5de0 <HUF_decompress4X_DCtx+0x98>  // b.plast
    5d7c:	lsl	x1, x4, #4
    5d80:	adrp	x2, 0 <FSE_versionNumber>
    5d84:	ldr	x2, [x2]
    5d88:	udiv	x1, x1, x19
    5d8c:	ubfiz	x6, x1, #1, #32
    5d90:	add	x1, x6, w1, uxtw
    5d94:	lsl	x1, x1, #3
    5d98:	add	x6, x2, x1
    5d9c:	ldr	w7, [x2, x1]
    5da0:	ldp	w2, w8, [x6, #4]
    5da4:	ldr	w1, [x6, #12]
    5da8:	lsr	x6, x19, #8
    5dac:	madd	w1, w1, w6, w8
    5db0:	madd	w2, w2, w6, w7
    5db4:	add	w1, w1, w1, lsr #3
    5db8:	cmp	w2, w1
    5dbc:	mov	x2, x19
    5dc0:	mov	x1, x5
    5dc4:	b.ls	5dd4 <HUF_decompress4X_DCtx+0x8c>  // b.plast
    5dc8:	ldr	x19, [sp, #16]
    5dcc:	ldp	x29, x30, [sp], #32
    5dd0:	b	5a58 <HUF_decompress4X2_DCtx>
    5dd4:	ldr	x19, [sp, #16]
    5dd8:	ldp	x29, x30, [sp], #32
    5ddc:	b	50d8 <HUF_decompress4X1_DCtx>
    5de0:	mov	w1, #0x91                  	// #145
    5de4:	mov	w8, #0x763                 	// #1891
    5de8:	mov	w2, #0x80                  	// #128
    5dec:	mov	w7, #0x2d2                 	// #722
    5df0:	b	5da8 <HUF_decompress4X_DCtx+0x60>
    5df4:	mov	x0, #0xffffffffffffffba    	// #-70
    5df8:	ret
    5dfc:	ldrb	w1, [x3]
    5e00:	mov	x0, x5
    5e04:	bl	0 <grub_memset>
    5e08:	mov	x0, x19
    5e0c:	ldr	x19, [sp, #16]
    5e10:	ldp	x29, x30, [sp], #32
    5e14:	ret
    5e18:	mov	x0, #0xffffffffffffffec    	// #-20
    5e1c:	ldr	x19, [sp, #16]
    5e20:	ldp	x29, x30, [sp], #32
    5e24:	ret
    5e28:	mov	x1, x3
    5e2c:	mov	x0, x5
    5e30:	bl	0 <grub_memmove>
    5e34:	mov	x0, x19
    5e38:	b	5e0c <HUF_decompress4X_DCtx+0xc4>
    5e3c:	nop
	...

0000000000005e48 <HUF_decompress4X_hufOnly>:
    5e48:	cbz	x2, 5e78 <HUF_decompress4X_hufOnly+0x30>
    5e4c:	mov	x5, #0xffffffffffffffec    	// #-20
    5e50:	cbz	x4, 5e7c <HUF_decompress4X_hufOnly+0x34>
    5e54:	sub	sp, sp, #0x810
    5e58:	mov	x6, #0x800                 	// #2048
    5e5c:	add	x5, sp, #0x10
    5e60:	stp	x29, x30, [sp]
    5e64:	mov	x29, sp
    5e68:	bl	5748 <HUF_decompress4X2+0x80>
    5e6c:	ldp	x29, x30, [sp]
    5e70:	add	sp, sp, #0x810
    5e74:	ret
    5e78:	mov	x5, #0xffffffffffffffba    	// #-70
    5e7c:	mov	x0, x5
    5e80:	ret
    5e84:	nop

0000000000005e88 <HUF_decompress4X_hufOnly_wksp>:
    5e88:	cbz	x2, 5e94 <HUF_decompress4X_hufOnly_wksp+0xc>
    5e8c:	cbz	x4, 5e9c <HUF_decompress4X_hufOnly_wksp+0x14>
    5e90:	b	5748 <HUF_decompress4X2+0x80>
    5e94:	mov	x0, #0xffffffffffffffba    	// #-70
    5e98:	ret
    5e9c:	mov	x0, #0xffffffffffffffec    	// #-20
    5ea0:	ret
    5ea4:	nop

0000000000005ea8 <HUF_decompress1X_DCtx_wksp>:
    5ea8:	cbz	x2, 5f54 <HUF_decompress1X_DCtx_wksp+0xac>
    5eac:	stp	x29, x30, [sp, #-32]!
    5eb0:	cmp	x2, x4
    5eb4:	mov	x29, sp
    5eb8:	str	x19, [sp, #16]
    5ebc:	mov	x19, x2
    5ec0:	b.cc	5f78 <HUF_decompress1X_DCtx_wksp+0xd0>  // b.lo, b.ul, b.last
    5ec4:	mov	x7, x1
    5ec8:	b.eq	5f88 <HUF_decompress1X_DCtx_wksp+0xe0>  // b.none
    5ecc:	cmp	x4, #0x1
    5ed0:	b.eq	5f5c <HUF_decompress1X_DCtx_wksp+0xb4>  // b.none
    5ed4:	cmp	x2, x4
    5ed8:	b.ls	5f40 <HUF_decompress1X_DCtx_wksp+0x98>  // b.plast
    5edc:	lsl	x2, x4, #4
    5ee0:	adrp	x1, 0 <FSE_versionNumber>
    5ee4:	ldr	x1, [x1]
    5ee8:	udiv	x2, x2, x19
    5eec:	ubfiz	x8, x2, #1, #32
    5ef0:	add	x2, x8, w2, uxtw
    5ef4:	lsl	x2, x2, #3
    5ef8:	add	x8, x1, x2
    5efc:	ldr	w9, [x1, x2]
    5f00:	ldp	w1, w10, [x8, #4]
    5f04:	ldr	w2, [x8, #12]
    5f08:	lsr	x8, x19, #8
    5f0c:	madd	w2, w2, w8, w10
    5f10:	madd	w1, w1, w8, w9
    5f14:	add	w2, w2, w2, lsr #3
    5f18:	cmp	w1, w2
    5f1c:	mov	x2, x19
    5f20:	mov	x1, x7
    5f24:	b.ls	5f34 <HUF_decompress1X_DCtx_wksp+0x8c>  // b.plast
    5f28:	ldr	x19, [sp, #16]
    5f2c:	ldp	x29, x30, [sp], #32
    5f30:	b	5880 <HUF_decompress1X2_DCtx_wksp>
    5f34:	ldr	x19, [sp, #16]
    5f38:	ldp	x29, x30, [sp], #32
    5f3c:	b	4f08 <HUF_decompress1X1_DCtx_wksp>
    5f40:	mov	w2, #0x91                  	// #145
    5f44:	mov	w10, #0x763                 	// #1891
    5f48:	mov	w1, #0x80                  	// #128
    5f4c:	mov	w9, #0x2d2                 	// #722
    5f50:	b	5f08 <HUF_decompress1X_DCtx_wksp+0x60>
    5f54:	mov	x0, #0xffffffffffffffba    	// #-70
    5f58:	ret
    5f5c:	ldrb	w1, [x3]
    5f60:	mov	x0, x7
    5f64:	bl	0 <grub_memset>
    5f68:	mov	x0, x19
    5f6c:	ldr	x19, [sp, #16]
    5f70:	ldp	x29, x30, [sp], #32
    5f74:	ret
    5f78:	mov	x0, #0xffffffffffffffec    	// #-20
    5f7c:	ldr	x19, [sp, #16]
    5f80:	ldp	x29, x30, [sp], #32
    5f84:	ret
    5f88:	mov	x1, x3
    5f8c:	mov	x0, x7
    5f90:	bl	0 <grub_memmove>
    5f94:	mov	x0, x19
    5f98:	b	5f6c <HUF_decompress1X_DCtx_wksp+0xc4>
    5f9c:	nop
	...

0000000000005fa8 <HUF_decompress1X_DCtx>:
    5fa8:	sub	sp, sp, #0x810
    5fac:	mov	x6, #0x800                 	// #2048
    5fb0:	add	x5, sp, #0x10
    5fb4:	stp	x29, x30, [sp]
    5fb8:	mov	x29, sp
    5fbc:	bl	5ea8 <HUF_decompress1X_DCtx_wksp>
    5fc0:	ldp	x29, x30, [sp]
    5fc4:	add	sp, sp, #0x810
    5fc8:	ret
    5fcc:	nop

0000000000005fd0 <HUF_decompress1X_usingDTable_bmi2>:
    5fd0:	stp	x29, x30, [sp, #-80]!
    5fd4:	mov	x29, sp
    5fd8:	stp	x19, x20, [sp, #16]
    5fdc:	mov	x19, x4
    5fe0:	mov	x20, x0
    5fe4:	add	x0, sp, #0x48
    5fe8:	stp	x21, x22, [sp, #32]
    5fec:	mov	x21, x1
    5ff0:	mov	x22, x2
    5ff4:	mov	x1, x4
    5ff8:	mov	x2, #0x4                   	// #4
    5ffc:	str	x23, [sp, #48]
    6000:	mov	x23, x3
    6004:	bl	0 <grub_memmove>
    6008:	ldrb	w0, [sp, #73]
    600c:	mov	x4, x19
    6010:	mov	x3, x23
    6014:	mov	x2, x22
    6018:	mov	x1, x21
    601c:	cbz	w0, 603c <HUF_decompress1X_usingDTable_bmi2+0x6c>
    6020:	mov	x0, x20
    6024:	bl	1790 <FSE_decompress+0x350>
    6028:	ldp	x19, x20, [sp, #16]
    602c:	ldp	x21, x22, [sp, #32]
    6030:	ldr	x23, [sp, #48]
    6034:	ldp	x29, x30, [sp], #80
    6038:	ret
    603c:	mov	x0, x20
    6040:	bl	1498 <FSE_decompress+0x58>
    6044:	ldp	x19, x20, [sp, #16]
    6048:	ldp	x21, x22, [sp, #32]
    604c:	ldr	x23, [sp, #48]
    6050:	ldp	x29, x30, [sp], #80
    6054:	ret

0000000000006058 <HUF_decompress1X1_DCtx_wksp_bmi2>:
    6058:	stp	x29, x30, [sp, #-64]!
    605c:	mov	x29, sp
    6060:	stp	x19, x20, [sp, #16]
    6064:	mov	x20, x3
    6068:	mov	x19, x4
    606c:	mov	x3, x5
    6070:	mov	x4, x6
    6074:	stp	x21, x22, [sp, #32]
    6078:	mov	x21, x1
    607c:	mov	x22, x2
    6080:	mov	x1, x20
    6084:	mov	x2, x19
    6088:	str	x23, [sp, #48]
    608c:	mov	x23, x0
    6090:	bl	4ba0 <HUF_readDTableX1_wksp>
    6094:	cmn	x0, #0x78
    6098:	b.hi	60d0 <HUF_decompress1X1_DCtx_wksp_bmi2+0x78>  // b.pmore
    609c:	cmp	x19, x0
    60a0:	b.ls	60cc <HUF_decompress1X1_DCtx_wksp_bmi2+0x74>  // b.plast
    60a4:	sub	x3, x19, x0
    60a8:	add	x2, x20, x0
    60ac:	mov	x4, x23
    60b0:	mov	x1, x22
    60b4:	mov	x0, x21
    60b8:	ldp	x19, x20, [sp, #16]
    60bc:	ldp	x21, x22, [sp, #32]
    60c0:	ldr	x23, [sp, #48]
    60c4:	ldp	x29, x30, [sp], #64
    60c8:	b	1498 <FSE_decompress+0x58>
    60cc:	mov	x0, #0xffffffffffffffb8    	// #-72
    60d0:	ldp	x19, x20, [sp, #16]
    60d4:	ldp	x21, x22, [sp, #32]
    60d8:	ldr	x23, [sp, #48]
    60dc:	ldp	x29, x30, [sp], #64
    60e0:	ret
    60e4:	nop

00000000000060e8 <HUF_decompress4X_usingDTable_bmi2>:
    60e8:	stp	x29, x30, [sp, #-80]!
    60ec:	mov	x29, sp
    60f0:	stp	x19, x20, [sp, #16]
    60f4:	mov	x19, x3
    60f8:	mov	x20, x4
    60fc:	stp	x21, x22, [sp, #32]
    6100:	mov	x21, x0
    6104:	mov	x22, x1
    6108:	add	x0, sp, #0x48
    610c:	mov	x1, x4
    6110:	str	x23, [sp, #48]
    6114:	mov	x23, x2
    6118:	mov	x2, #0x4                   	// #4
    611c:	bl	0 <grub_memmove>
    6120:	ldrb	w0, [sp, #73]
    6124:	cmp	x19, #0x9
    6128:	cbz	w0, 6160 <HUF_decompress4X_usingDTable_bmi2+0x78>
    612c:	mov	x0, #0xffffffffffffffec    	// #-20
    6130:	b.ls	614c <HUF_decompress4X_usingDTable_bmi2+0x64>  // b.plast
    6134:	mov	x4, x20
    6138:	mov	x3, x19
    613c:	mov	x2, x23
    6140:	mov	x1, x22
    6144:	mov	x0, x21
    6148:	bl	2fd0 <FSE_decompress+0x1b90>
    614c:	ldp	x19, x20, [sp, #16]
    6150:	ldp	x21, x22, [sp, #32]
    6154:	ldr	x23, [sp, #48]
    6158:	ldp	x29, x30, [sp], #80
    615c:	ret
    6160:	mov	x0, #0xffffffffffffffec    	// #-20
    6164:	b.ls	614c <HUF_decompress4X_usingDTable_bmi2+0x64>  // b.plast
    6168:	mov	x4, x20
    616c:	mov	x3, x19
    6170:	mov	x2, x23
    6174:	mov	x1, x22
    6178:	mov	x0, x21
    617c:	bl	1ca0 <FSE_decompress+0x860>
    6180:	ldp	x19, x20, [sp, #16]
    6184:	ldp	x21, x22, [sp, #32]
    6188:	ldr	x23, [sp, #48]
    618c:	ldp	x29, x30, [sp], #80
    6190:	ret
    6194:	nop

0000000000006198 <HUF_decompress4X_hufOnly_wksp_bmi2>:
    6198:	cbz	x2, 621c <HUF_decompress4X_hufOnly_wksp_bmi2+0x84>
    619c:	cbz	x4, 6224 <HUF_decompress4X_hufOnly_wksp_bmi2+0x8c>
    61a0:	cmp	x2, x4
    61a4:	b.hi	61d4 <HUF_decompress4X_hufOnly_wksp_bmi2+0x3c>  // b.pmore
    61a8:	lsr	x9, x2, #8
    61ac:	mov	w7, #0x91                  	// #145
    61b0:	mov	w11, #0x763                 	// #1891
    61b4:	mov	w8, #0x80                  	// #128
    61b8:	mov	w10, #0x2d2                 	// #722
    61bc:	madd	w7, w7, w9, w11
    61c0:	madd	w8, w8, w9, w10
    61c4:	add	w7, w7, w7, lsr #3
    61c8:	cmp	w8, w7
    61cc:	b.ls	6218 <HUF_decompress4X_hufOnly_wksp_bmi2+0x80>  // b.plast
    61d0:	b	5618 <HUF_readDTableX2_wksp+0x518>
    61d4:	lsl	x7, x4, #4
    61d8:	adrp	x8, 0 <FSE_versionNumber>
    61dc:	ldr	x8, [x8]
    61e0:	udiv	x7, x7, x2
    61e4:	ubfiz	x9, x7, #1, #32
    61e8:	add	x7, x9, w7, uxtw
    61ec:	lsl	x7, x7, #3
    61f0:	add	x9, x8, x7
    61f4:	ldr	w10, [x8, x7]
    61f8:	ldp	w8, w11, [x9, #4]
    61fc:	ldr	w7, [x9, #12]
    6200:	lsr	x9, x2, #8
    6204:	madd	w8, w8, w9, w10
    6208:	madd	w7, w7, w9, w11
    620c:	add	w7, w7, w7, lsr #3
    6210:	cmp	w8, w7
    6214:	b.hi	61d0 <HUF_decompress4X_hufOnly_wksp_bmi2+0x38>  // b.pmore
    6218:	b	4d28 <HUF_readDTableX1_wksp+0x188>
    621c:	mov	x0, #0xffffffffffffffba    	// #-70
    6220:	ret
    6224:	mov	x0, #0xffffffffffffffec    	// #-20
    6228:	ret
    622c:	nop
	...

0000000000006238 <XXH_versionNumber>:
    6238:	mov	w0, #0x25a                 	// #602
    623c:	ret

0000000000006240 <XXH32_copyState>:
    6240:	mov	x2, #0x30                  	// #48
    6244:	b	0 <grub_memmove>

0000000000006248 <XXH64_copyState>:
    6248:	mov	x2, #0x58                  	// #88
    624c:	b	0 <grub_memmove>

0000000000006250 <XXH32>:
    6250:	stp	x29, x30, [sp, #-128]!
    6254:	tst	x0, #0x3
    6258:	mov	x29, sp
    625c:	stp	x19, x20, [sp, #16]
    6260:	add	x20, x0, x1
    6264:	mov	w19, w2
    6268:	stp	x27, x28, [sp, #80]
    626c:	mov	x28, x0
    6270:	str	x1, [sp, #96]
    6274:	b.ne	6348 <XXH32+0xf8>  // b.any
    6278:	cmp	x1, #0xf
    627c:	b.hi	6560 <XXH32+0x310>  // b.pmore
    6280:	mov	w0, #0x67b1                	// #26545
    6284:	movk	w0, #0x1656, lsl #16
    6288:	add	w19, w2, w0
    628c:	ldr	w0, [sp, #96]
    6290:	add	x5, x28, #0x4
    6294:	cmp	x5, x20
    6298:	add	w19, w19, w0
    629c:	b.hi	62e4 <XXH32+0x94>  // b.pmore
    62a0:	mov	w4, #0xae3d                	// #44605
    62a4:	mov	w2, #0xeb2f                	// #60207
    62a8:	mov	x1, x5
    62ac:	movk	w4, #0xc2b2, lsl #16
    62b0:	movk	w2, #0x27d4, lsl #16
    62b4:	nop
    62b8:	ldur	w0, [x1, #-4]
    62bc:	add	x1, x1, #0x4
    62c0:	cmp	x20, x1
    62c4:	madd	w19, w0, w4, w19
    62c8:	ror	w19, w19, #15
    62cc:	mul	w19, w19, w2
    62d0:	b.cs	62b8 <XXH32+0x68>  // b.hs, b.nlast
    62d4:	sub	x0, x20, #0x4
    62d8:	sub	x3, x0, x28
    62dc:	and	x3, x3, #0xfffffffffffffffc
    62e0:	add	x28, x5, x3
    62e4:	cmp	x28, x20
    62e8:	b.cs	6314 <XXH32+0xc4>  // b.hs, b.nlast
    62ec:	mov	w2, #0x67b1                	// #26545
    62f0:	mov	w1, #0x79b1                	// #31153
    62f4:	movk	w2, #0x1656, lsl #16
    62f8:	movk	w1, #0x9e37, lsl #16
    62fc:	ldrb	w0, [x28], #1
    6300:	cmp	x28, x20
    6304:	madd	w19, w0, w2, w19
    6308:	ror	w19, w19, #21
    630c:	mul	w19, w19, w1
    6310:	b.ne	62fc <XXH32+0xac>  // b.any
    6314:	eor	w19, w19, w19, lsr #15
    6318:	mov	w0, #0xca77                	// #51831
    631c:	movk	w0, #0x85eb, lsl #16
    6320:	mov	w1, #0xae3d                	// #44605
    6324:	movk	w1, #0xc2b2, lsl #16
    6328:	mul	w0, w19, w0
    632c:	ldp	x19, x20, [sp, #16]
    6330:	eor	w0, w0, w0, lsr #13
    6334:	ldp	x27, x28, [sp, #80]
    6338:	mul	w0, w0, w1
    633c:	ldp	x29, x30, [sp], #128
    6340:	eor	w0, w0, w0, lsr #16
    6344:	ret
    6348:	ldr	x0, [sp, #96]
    634c:	stp	x21, x22, [sp, #32]
    6350:	stp	x23, x24, [sp, #48]
    6354:	cmp	x0, #0xf
    6358:	stp	x25, x26, [sp, #64]
    635c:	b.hi	644c <XXH32+0x1fc>  // b.pmore
    6360:	mov	w2, #0x67b1                	// #26545
    6364:	movk	w2, #0x1656, lsl #16
    6368:	add	w2, w19, w2
    636c:	ldr	w0, [sp, #96]
    6370:	add	x24, x28, #0x4
    6374:	cmp	x24, x20
    6378:	add	w19, w2, w0
    637c:	b.hi	63dc <XXH32+0x18c>  // b.pmore
    6380:	sub	x26, x20, #0x4
    6384:	mov	w25, #0xae3d                	// #44605
    6388:	sub	x26, x26, x28
    638c:	mov	w22, #0xeb2f                	// #60207
    6390:	and	x21, x26, #0xfffffffffffffffc
    6394:	add	x23, sp, #0x7c
    6398:	add	x21, x24, x21
    639c:	movk	w25, #0xc2b2, lsl #16
    63a0:	movk	w22, #0x27d4, lsl #16
    63a4:	nop
    63a8:	mov	x1, x28
    63ac:	mov	x0, x23
    63b0:	mov	x2, #0x4                   	// #4
    63b4:	bl	0 <grub_memmove>
    63b8:	ldr	w0, [sp, #124]
    63bc:	add	x28, x28, #0x4
    63c0:	cmp	x21, x28
    63c4:	madd	w19, w0, w25, w19
    63c8:	ror	w19, w19, #15
    63cc:	mul	w19, w19, w22
    63d0:	b.ne	63a8 <XXH32+0x158>  // b.any
    63d4:	and	x3, x26, #0xfffffffffffffffc
    63d8:	add	x28, x24, x3
    63dc:	cmp	x28, x20
    63e0:	b.cs	640c <XXH32+0x1bc>  // b.hs, b.nlast
    63e4:	mov	w2, #0x67b1                	// #26545
    63e8:	mov	w1, #0x79b1                	// #31153
    63ec:	movk	w2, #0x1656, lsl #16
    63f0:	movk	w1, #0x9e37, lsl #16
    63f4:	ldrb	w0, [x28], #1
    63f8:	cmp	x28, x20
    63fc:	madd	w19, w0, w2, w19
    6400:	ror	w19, w19, #21
    6404:	mul	w19, w19, w1
    6408:	b.ne	63f4 <XXH32+0x1a4>  // b.any
    640c:	eor	w19, w19, w19, lsr #15
    6410:	mov	w0, #0xca77                	// #51831
    6414:	movk	w0, #0x85eb, lsl #16
    6418:	mov	w1, #0xae3d                	// #44605
    641c:	movk	w1, #0xc2b2, lsl #16
    6420:	mul	w0, w19, w0
    6424:	ldp	x19, x20, [sp, #16]
    6428:	eor	w0, w0, w0, lsr #13
    642c:	ldp	x21, x22, [sp, #32]
    6430:	mul	w0, w0, w1
    6434:	ldp	x23, x24, [sp, #48]
    6438:	eor	w0, w0, w0, lsr #16
    643c:	ldp	x25, x26, [sp, #64]
    6440:	ldp	x27, x28, [sp, #80]
    6444:	ldp	x29, x30, [sp], #128
    6448:	ret
    644c:	mov	w26, #0x4428                	// #17448
    6450:	mov	w24, #0xca77                	// #51831
    6454:	movk	w26, #0x2423, lsl #16
    6458:	movk	w24, #0x85eb, lsl #16
    645c:	add	w26, w2, w26
    6460:	add	w27, w2, w24
    6464:	mov	w2, #0x864f                	// #34383
    6468:	mov	w25, #0x79b1                	// #31153
    646c:	movk	w2, #0x61c8, lsl #16
    6470:	mov	x21, x28
    6474:	add	w22, w19, w2
    6478:	add	x23, sp, #0x7c
    647c:	sub	x0, x20, #0x10
    6480:	movk	w25, #0x9e37, lsl #16
    6484:	str	x0, [sp, #104]
    6488:	mov	x1, x21
    648c:	mov	x2, #0x4                   	// #4
    6490:	mov	x0, x23
    6494:	bl	0 <grub_memmove>
    6498:	ldr	w4, [sp, #124]
    649c:	mov	x2, #0x4                   	// #4
    64a0:	mov	x0, x23
    64a4:	add	x1, x21, x2
    64a8:	madd	w26, w4, w24, w26
    64ac:	bl	0 <grub_memmove>
    64b0:	ldr	w4, [sp, #124]
    64b4:	add	x1, x21, #0x8
    64b8:	mov	x2, #0x4                   	// #4
    64bc:	mov	x0, x23
    64c0:	ror	w26, w26, #19
    64c4:	madd	w27, w4, w24, w27
    64c8:	bl	0 <grub_memmove>
    64cc:	ldr	w4, [sp, #124]
    64d0:	add	x1, x21, #0xc
    64d4:	mov	x2, #0x4                   	// #4
    64d8:	mov	x0, x23
    64dc:	add	x21, x21, #0x10
    64e0:	ror	w27, w27, #19
    64e4:	mul	w26, w26, w25
    64e8:	madd	w19, w4, w24, w19
    64ec:	bl	0 <grub_memmove>
    64f0:	ldr	w2, [sp, #124]
    64f4:	mul	w27, w27, w25
    64f8:	ldr	x0, [sp, #104]
    64fc:	ror	w19, w19, #19
    6500:	madd	w2, w2, w24, w22
    6504:	cmp	x0, x21
    6508:	mul	w19, w19, w25
    650c:	ror	w2, w2, #19
    6510:	mul	w22, w2, w25
    6514:	b.cs	6488 <XXH32+0x238>  // b.hs, b.nlast
    6518:	ldr	x0, [sp, #96]
    651c:	sub	x1, x20, #0xf
    6520:	add	x4, x28, #0x1
    6524:	ror	w2, w19, #20
    6528:	sub	x0, x0, #0x10
    652c:	cmp	x1, x4
    6530:	and	x0, x0, #0xfffffffffffffff0
    6534:	ror	w5, w22, #14
    6538:	ror	w19, w26, #31
    653c:	add	x0, x0, #0x10
    6540:	ror	w27, w27, #25
    6544:	add	w2, w2, w5
    6548:	add	w19, w19, w27
    654c:	mov	x1, #0x10                  	// #16
    6550:	csel	x0, x0, x1, cs  // cs = hs, nlast
    6554:	add	w2, w2, w19
    6558:	add	x28, x28, x0
    655c:	b	636c <XXH32+0x11c>
    6560:	mov	w5, #0x4428                	// #17448
    6564:	mov	w6, #0xca77                	// #51831
    6568:	mov	w1, #0x864f                	// #34383
    656c:	movk	w5, #0x2423, lsl #16
    6570:	movk	w6, #0x85eb, lsl #16
    6574:	movk	w1, #0x61c8, lsl #16
    6578:	mov	w7, #0x79b1                	// #31153
    657c:	add	w8, w2, w5
    6580:	add	w10, w2, w6
    6584:	sub	x11, x20, #0x10
    6588:	add	w9, w2, w1
    658c:	movk	w7, #0x9e37, lsl #16
    6590:	ldp	w2, w1, [x0, #8]
    6594:	ldp	w5, w4, [x0]
    6598:	add	x0, x0, #0x10
    659c:	madd	w19, w2, w6, w19
    65a0:	cmp	x11, x0
    65a4:	madd	w1, w1, w6, w9
    65a8:	madd	w5, w5, w6, w8
    65ac:	madd	w4, w4, w6, w10
    65b0:	ror	w19, w19, #19
    65b4:	ror	w1, w1, #19
    65b8:	ror	w5, w5, #19
    65bc:	mul	w19, w19, w7
    65c0:	ror	w2, w4, #19
    65c4:	mul	w9, w1, w7
    65c8:	mul	w8, w5, w7
    65cc:	mul	w10, w2, w7
    65d0:	b.cs	6590 <XXH32+0x340>  // b.hs, b.nlast
    65d4:	ldr	x0, [sp, #96]
    65d8:	add	x6, x28, #0x1
    65dc:	sub	x4, x20, #0xf
    65e0:	ror	w2, w19, #20
    65e4:	sub	x0, x0, #0x10
    65e8:	ror	w1, w9, #14
    65ec:	and	x0, x0, #0xfffffffffffffff0
    65f0:	ror	w5, w8, #31
    65f4:	cmp	x4, x6
    65f8:	ror	w19, w10, #25
    65fc:	add	x0, x0, #0x10
    6600:	add	w2, w2, w1
    6604:	add	w19, w5, w19
    6608:	mov	x1, #0x10                  	// #16
    660c:	csel	x0, x0, x1, cs  // cs = hs, nlast
    6610:	add	w19, w2, w19
    6614:	add	x28, x28, x0
    6618:	b	628c <XXH32+0x3c>
    661c:	nop

0000000000006620 <XXH64>:
    6620:	stp	x29, x30, [sp, #-160]!
    6624:	tst	x0, #0x7
    6628:	mov	x29, sp
    662c:	stp	x19, x20, [sp, #16]
    6630:	mov	x19, x2
    6634:	stp	x21, x22, [sp, #32]
    6638:	mov	x22, x0
    663c:	stp	x27, x28, [sp, #80]
    6640:	add	x28, x0, x1
    6644:	str	x1, [sp, #120]
    6648:	b.ne	6928 <XXH64+0x308>  // b.any
    664c:	cmp	x1, #0x1f
    6650:	b.hi	67cc <XXH64+0x1ac>  // b.pmore
    6654:	mov	x3, #0x67c5                	// #26565
    6658:	movk	x3, #0x1656, lsl #16
    665c:	movk	x3, #0xeb2f, lsl #32
    6660:	movk	x3, #0x27d4, lsl #48
    6664:	add	x2, x2, x3
    6668:	ldr	x0, [sp, #120]
    666c:	add	x7, x22, #0x8
    6670:	cmp	x7, x28
    6674:	add	x19, x0, x2
    6678:	b.hi	66e8 <XXH64+0xc8>  // b.pmore
    667c:	mov	x6, #0xeb4f                	// #60239
    6680:	mov	x2, #0xca87                	// #51847
    6684:	mov	x3, #0xae63                	// #44643
    6688:	movk	x6, #0x27d4, lsl #16
    668c:	movk	x2, #0x85eb, lsl #16
    6690:	movk	x3, #0xc2b2, lsl #16
    6694:	movk	x6, #0xae3d, lsl #32
    6698:	movk	x2, #0x79b1, lsl #32
    669c:	movk	x3, #0xca77, lsl #32
    66a0:	mov	x1, x7
    66a4:	movk	x6, #0xc2b2, lsl #48
    66a8:	movk	x2, #0x9e37, lsl #48
    66ac:	movk	x3, #0x85eb, lsl #48
    66b0:	ldur	x0, [x1, #-8]
    66b4:	add	x1, x1, #0x8
    66b8:	cmp	x1, x28
    66bc:	mul	x0, x0, x6
    66c0:	ror	x0, x0, #33
    66c4:	mul	x0, x0, x2
    66c8:	eor	x19, x0, x19
    66cc:	ror	x19, x19, #37
    66d0:	madd	x19, x19, x2, x3
    66d4:	b.ls	66b0 <XXH64+0x90>  // b.plast
    66d8:	sub	x0, x28, #0x8
    66dc:	sub	x4, x0, x22
    66e0:	and	x4, x4, #0xfffffffffffffff8
    66e4:	add	x22, x7, x4
    66e8:	add	x1, x22, #0x4
    66ec:	cmp	x1, x28
    66f0:	b.hi	673c <XXH64+0x11c>  // b.pmore
    66f4:	mov	x6, #0xca87                	// #51847
    66f8:	ldr	w0, [x22]
    66fc:	movk	x6, #0x85eb, lsl #16
    6700:	mov	x3, #0xeb4f                	// #60239
    6704:	movk	x6, #0x79b1, lsl #32
    6708:	mov	x2, #0x79f9                	// #31225
    670c:	movk	x6, #0x9e37, lsl #48
    6710:	movk	x3, #0x27d4, lsl #16
    6714:	movk	x2, #0x9e37, lsl #16
    6718:	movk	x3, #0xae3d, lsl #32
    671c:	mul	x0, x0, x6
    6720:	movk	x2, #0x67b1, lsl #32
    6724:	movk	x3, #0xc2b2, lsl #48
    6728:	movk	x2, #0x1656, lsl #48
    672c:	eor	x19, x0, x19
    6730:	mov	x22, x1
    6734:	ror	x19, x19, #41
    6738:	madd	x19, x19, x3, x2
    673c:	cmp	x22, x28
    6740:	b.cs	6784 <XXH64+0x164>  // b.hs, b.nlast
    6744:	mov	x2, #0x67c5                	// #26565
    6748:	mov	x1, #0xca87                	// #51847
    674c:	movk	x2, #0x1656, lsl #16
    6750:	movk	x1, #0x85eb, lsl #16
    6754:	movk	x2, #0xeb2f, lsl #32
    6758:	movk	x1, #0x79b1, lsl #32
    675c:	movk	x2, #0x27d4, lsl #48
    6760:	movk	x1, #0x9e37, lsl #48
    6764:	nop
    6768:	ldrb	w0, [x22], #1
    676c:	cmp	x22, x28
    6770:	mul	x0, x0, x2
    6774:	eor	x19, x0, x19
    6778:	ror	x19, x19, #53
    677c:	mul	x19, x19, x1
    6780:	b.ne	6768 <XXH64+0x148>  // b.any
    6784:	mov	x0, #0xeb4f                	// #60239
    6788:	eor	x19, x19, x19, lsr #33
    678c:	movk	x0, #0x27d4, lsl #16
    6790:	mov	x1, #0x79f9                	// #31225
    6794:	movk	x0, #0xae3d, lsl #32
    6798:	movk	x1, #0x9e37, lsl #16
    679c:	movk	x0, #0xc2b2, lsl #48
    67a0:	movk	x1, #0x67b1, lsl #32
    67a4:	movk	x1, #0x1656, lsl #48
    67a8:	mul	x0, x19, x0
    67ac:	ldp	x19, x20, [sp, #16]
    67b0:	eor	x0, x0, x0, lsr #29
    67b4:	ldp	x21, x22, [sp, #32]
    67b8:	mul	x0, x0, x1
    67bc:	ldp	x27, x28, [sp, #80]
    67c0:	eor	x0, x0, x0, lsr #32
    67c4:	ldp	x29, x30, [sp], #160
    67c8:	ret
    67cc:	mov	x7, #0xb5d6                	// #46550
    67d0:	mov	x8, #0xeb4f                	// #60239
    67d4:	mov	x3, #0x3579                	// #13689
    67d8:	movk	x7, #0xadc0, lsl #16
    67dc:	movk	x8, #0x27d4, lsl #16
    67e0:	movk	x3, #0x7a14, lsl #16
    67e4:	mov	x9, #0xca87                	// #51847
    67e8:	movk	x7, #0x27ee, lsl #32
    67ec:	movk	x8, #0xae3d, lsl #32
    67f0:	movk	x3, #0x864e, lsl #32
    67f4:	movk	x9, #0x85eb, lsl #16
    67f8:	movk	x7, #0x60ea, lsl #48
    67fc:	movk	x8, #0xc2b2, lsl #48
    6800:	movk	x3, #0x61c8, lsl #48
    6804:	movk	x9, #0x79b1, lsl #32
    6808:	add	x10, x2, x7
    680c:	add	x12, x2, x8
    6810:	sub	x13, x28, #0x20
    6814:	add	x11, x2, x3
    6818:	mov	x1, x0
    681c:	movk	x9, #0x9e37, lsl #48
    6820:	stp	x25, x26, [sp, #64]
    6824:	nop
    6828:	ldp	x7, x0, [x1]
    682c:	ldp	x2, x3, [x1, #16]
    6830:	add	x1, x1, #0x20
    6834:	cmp	x13, x1
    6838:	madd	x7, x7, x8, x10
    683c:	madd	x0, x0, x8, x12
    6840:	madd	x2, x2, x8, x19
    6844:	madd	x3, x3, x8, x11
    6848:	ror	x7, x7, #33
    684c:	ror	x0, x0, #33
    6850:	ror	x25, x2, #33
    6854:	mul	x10, x7, x9
    6858:	ror	x3, x3, #33
    685c:	mul	x12, x0, x9
    6860:	mul	x19, x25, x9
    6864:	mul	x11, x3, x9
    6868:	b.cs	6828 <XXH64+0x208>  // b.hs, b.nlast
    686c:	mov	x2, #0x6ca9                	// #27817
    6870:	ror	x6, x19, #52
    6874:	movk	x2, #0xf79, lsl #16
    6878:	ror	x11, x11, #46
    687c:	movk	x2, #0x5b01, lsl #32
    6880:	ror	x12, x12, #57
    6884:	movk	x2, #0xdef3, lsl #48
    6888:	add	x11, x6, x11
    688c:	mov	x19, #0xae63                	// #44643
    6890:	sub	x8, x28, #0x1f
    6894:	mul	x1, x7, x2
    6898:	ror	x7, x10, #63
    689c:	mul	x0, x0, x2
    68a0:	add	x7, x7, x12
    68a4:	add	x7, x11, x7
    68a8:	movk	x19, #0xc2b2, lsl #16
    68ac:	movk	x19, #0xca77, lsl #32
    68b0:	ror	x1, x1, #33
    68b4:	movk	x19, #0x85eb, lsl #48
    68b8:	ror	x0, x0, #33
    68bc:	mul	x25, x25, x2
    68c0:	mul	x1, x1, x9
    68c4:	mul	x2, x3, x2
    68c8:	eor	x7, x7, x1
    68cc:	mul	x0, x0, x9
    68d0:	ror	x1, x25, #33
    68d4:	ror	x2, x2, #33
    68d8:	madd	x3, x7, x9, x19
    68dc:	add	x7, x22, #0x1
    68e0:	mul	x1, x1, x9
    68e4:	cmp	x8, x7
    68e8:	eor	x0, x0, x3
    68ec:	mul	x2, x2, x9
    68f0:	ldr	x4, [sp, #120]
    68f4:	madd	x0, x0, x9, x19
    68f8:	sub	x6, x4, #0x20
    68fc:	eor	x0, x1, x0
    6900:	and	x6, x6, #0xffffffffffffffe0
    6904:	add	x3, x6, #0x20
    6908:	mov	x6, #0x20                  	// #32
    690c:	csel	x3, x3, x6, cs  // cs = hs, nlast
    6910:	madd	x0, x0, x9, x19
    6914:	add	x22, x22, x3
    6918:	ldp	x25, x26, [sp, #64]
    691c:	eor	x2, x2, x0
    6920:	madd	x2, x2, x9, x19
    6924:	b	6668 <XXH64+0x48>
    6928:	ldr	x0, [sp, #120]
    692c:	stp	x23, x24, [sp, #48]
    6930:	stp	x25, x26, [sp, #64]
    6934:	cmp	x0, #0x1f
    6938:	b.ls	6c8c <XXH64+0x66c>  // b.plast
    693c:	mov	x27, #0xb5d6                	// #46550
    6940:	mov	x26, #0xeb4f                	// #60239
    6944:	mov	x0, #0x3579                	// #13689
    6948:	movk	x27, #0xadc0, lsl #16
    694c:	movk	x26, #0x27d4, lsl #16
    6950:	movk	x0, #0x7a14, lsl #16
    6954:	mov	x25, #0xca87                	// #51847
    6958:	movk	x27, #0x27ee, lsl #32
    695c:	movk	x26, #0xae3d, lsl #32
    6960:	movk	x0, #0x864e, lsl #32
    6964:	movk	x25, #0x85eb, lsl #16
    6968:	movk	x27, #0x60ea, lsl #48
    696c:	movk	x26, #0xc2b2, lsl #48
    6970:	movk	x0, #0x61c8, lsl #48
    6974:	movk	x25, #0x79b1, lsl #32
    6978:	add	x27, x2, x27
    697c:	add	x20, x2, x26
    6980:	add	x7, x2, x0
    6984:	mov	x21, x22
    6988:	add	x24, sp, #0x98
    698c:	sub	x1, x28, #0x20
    6990:	movk	x25, #0x9e37, lsl #48
    6994:	str	x1, [sp, #128]
    6998:	mov	x1, x21
    699c:	mov	x2, #0x8                   	// #8
    69a0:	mov	x0, x24
    69a4:	str	x7, [sp, #112]
    69a8:	bl	0 <grub_memmove>
    69ac:	mov	x2, #0x8                   	// #8
    69b0:	mov	x0, x24
    69b4:	add	x1, x21, x2
    69b8:	ldr	x23, [sp, #152]
    69bc:	bl	0 <grub_memmove>
    69c0:	ldr	x3, [sp, #152]
    69c4:	add	x1, x21, #0x10
    69c8:	mov	x2, #0x8                   	// #8
    69cc:	mov	x0, x24
    69d0:	madd	x23, x23, x26, x27
    69d4:	madd	x20, x3, x26, x20
    69d8:	ror	x23, x23, #33
    69dc:	ror	x3, x20, #33
    69e0:	mov	x20, x3
    69e4:	str	x3, [sp, #136]
    69e8:	mul	x27, x23, x25
    69ec:	bl	0 <grub_memmove>
    69f0:	ldr	x3, [sp, #152]
    69f4:	add	x1, x21, #0x18
    69f8:	mov	x0, x24
    69fc:	mov	x2, #0x8                   	// #8
    6a00:	add	x21, x21, #0x20
    6a04:	mul	x20, x20, x25
    6a08:	madd	x6, x3, x26, x19
    6a0c:	ror	x3, x6, #33
    6a10:	str	x3, [sp, #104]
    6a14:	bl	0 <grub_memmove>
    6a18:	ldp	x3, x7, [sp, #104]
    6a1c:	ldr	x0, [sp, #152]
    6a20:	ldr	x1, [sp, #128]
    6a24:	madd	x0, x0, x26, x7
    6a28:	mul	x19, x3, x25
    6a2c:	cmp	x1, x21
    6a30:	ror	x0, x0, #33
    6a34:	mul	x7, x0, x25
    6a38:	b.cs	6998 <XXH64+0x378>  // b.hs, b.nlast
    6a3c:	mov	x9, #0x6ca9                	// #27817
    6a40:	ror	x6, x19, #52
    6a44:	movk	x9, #0xf79, lsl #16
    6a48:	ror	x4, x20, #57
    6a4c:	movk	x9, #0x5b01, lsl #32
    6a50:	ror	x7, x7, #46
    6a54:	movk	x9, #0xdef3, lsl #48
    6a58:	ror	x27, x27, #63
    6a5c:	ldr	x1, [sp, #136]
    6a60:	mul	x2, x23, x9
    6a64:	add	x7, x6, x7
    6a68:	add	x27, x27, x4
    6a6c:	mov	x19, #0xae63                	// #44643
    6a70:	add	x27, x7, x27
    6a74:	mul	x1, x1, x9
    6a78:	ror	x2, x2, #33
    6a7c:	movk	x19, #0xc2b2, lsl #16
    6a80:	mul	x3, x3, x9
    6a84:	movk	x19, #0xca77, lsl #32
    6a88:	mul	x6, x0, x9
    6a8c:	mul	x2, x2, x25
    6a90:	ror	x1, x1, #33
    6a94:	movk	x19, #0x85eb, lsl #48
    6a98:	ror	x0, x3, #33
    6a9c:	eor	x2, x27, x2
    6aa0:	ror	x6, x6, #33
    6aa4:	mul	x1, x1, x25
    6aa8:	add	x9, x22, #0x1
    6aac:	mul	x0, x0, x25
    6ab0:	sub	x7, x28, #0x1f
    6ab4:	madd	x2, x2, x25, x19
    6ab8:	cmp	x7, x9
    6abc:	ldr	x4, [sp, #120]
    6ac0:	eor	x1, x1, x2
    6ac4:	mul	x6, x6, x25
    6ac8:	mov	x3, #0x20                  	// #32
    6acc:	sub	x8, x4, #0x20
    6ad0:	madd	x1, x1, x25, x19
    6ad4:	and	x8, x8, #0xffffffffffffffe0
    6ad8:	add	x2, x8, #0x20
    6adc:	eor	x0, x0, x1
    6ae0:	csel	x2, x2, x3, cs  // cs = hs, nlast
    6ae4:	add	x22, x22, x2
    6ae8:	madd	x0, x0, x25, x19
    6aec:	eor	x6, x6, x0
    6af0:	madd	x19, x6, x25, x19
    6af4:	ldr	x0, [sp, #120]
    6af8:	add	x23, x22, #0x8
    6afc:	cmp	x23, x28
    6b00:	add	x19, x0, x19
    6b04:	b.hi	6b90 <XXH64+0x570>  // b.pmore
    6b08:	sub	x25, x28, #0x8
    6b0c:	mov	x26, x22
    6b10:	sub	x25, x25, x22
    6b14:	mov	x27, #0xca87                	// #51847
    6b18:	mov	x22, #0xeb4f                	// #60239
    6b1c:	mov	x21, #0xae63                	// #44643
    6b20:	and	x20, x25, #0xfffffffffffffff8
    6b24:	movk	x22, #0x27d4, lsl #16
    6b28:	movk	x27, #0x85eb, lsl #16
    6b2c:	movk	x21, #0xc2b2, lsl #16
    6b30:	movk	x22, #0xae3d, lsl #32
    6b34:	movk	x27, #0x79b1, lsl #32
    6b38:	movk	x21, #0xca77, lsl #32
    6b3c:	add	x24, sp, #0x98
    6b40:	add	x20, x23, x20
    6b44:	movk	x22, #0xc2b2, lsl #48
    6b48:	movk	x27, #0x9e37, lsl #48
    6b4c:	movk	x21, #0x85eb, lsl #48
    6b50:	mov	x1, x26
    6b54:	mov	x0, x24
    6b58:	mov	x2, #0x8                   	// #8
    6b5c:	bl	0 <grub_memmove>
    6b60:	ldr	x0, [sp, #152]
    6b64:	add	x26, x26, #0x8
    6b68:	cmp	x20, x26
    6b6c:	mul	x0, x0, x22
    6b70:	ror	x0, x0, #33
    6b74:	mul	x0, x0, x27
    6b78:	eor	x19, x0, x19
    6b7c:	ror	x19, x19, #37
    6b80:	madd	x19, x19, x27, x21
    6b84:	b.ne	6b50 <XXH64+0x530>  // b.any
    6b88:	and	x4, x25, #0xfffffffffffffff8
    6b8c:	add	x22, x23, x4
    6b90:	add	x20, x22, #0x4
    6b94:	cmp	x20, x28
    6b98:	b.hi	6bf4 <XXH64+0x5d4>  // b.pmore
    6b9c:	mov	x1, x22
    6ba0:	mov	x2, #0x4                   	// #4
    6ba4:	add	x0, sp, #0x98
    6ba8:	bl	0 <grub_memmove>
    6bac:	mov	x3, #0xca87                	// #51847
    6bb0:	ldr	w0, [sp, #152]
    6bb4:	movk	x3, #0x85eb, lsl #16
    6bb8:	mov	x2, #0xeb4f                	// #60239
    6bbc:	movk	x3, #0x79b1, lsl #32
    6bc0:	mov	x1, #0x79f9                	// #31225
    6bc4:	movk	x3, #0x9e37, lsl #48
    6bc8:	movk	x2, #0x27d4, lsl #16
    6bcc:	movk	x1, #0x9e37, lsl #16
    6bd0:	movk	x2, #0xae3d, lsl #32
    6bd4:	mul	x0, x0, x3
    6bd8:	movk	x1, #0x67b1, lsl #32
    6bdc:	movk	x2, #0xc2b2, lsl #48
    6be0:	movk	x1, #0x1656, lsl #48
    6be4:	eor	x19, x0, x19
    6be8:	mov	x22, x20
    6bec:	ror	x19, x19, #41
    6bf0:	madd	x19, x19, x2, x1
    6bf4:	cmp	x22, x28
    6bf8:	b.cs	6c3c <XXH64+0x61c>  // b.hs, b.nlast
    6bfc:	mov	x2, #0x67c5                	// #26565
    6c00:	mov	x1, #0xca87                	// #51847
    6c04:	movk	x2, #0x1656, lsl #16
    6c08:	movk	x1, #0x85eb, lsl #16
    6c0c:	movk	x2, #0xeb2f, lsl #32
    6c10:	movk	x1, #0x79b1, lsl #32
    6c14:	movk	x2, #0x27d4, lsl #48
    6c18:	movk	x1, #0x9e37, lsl #48
    6c1c:	nop
    6c20:	ldrb	w0, [x22], #1
    6c24:	cmp	x22, x28
    6c28:	mul	x0, x0, x2
    6c2c:	eor	x19, x0, x19
    6c30:	ror	x19, x19, #53
    6c34:	mul	x19, x19, x1
    6c38:	b.ne	6c20 <XXH64+0x600>  // b.any
    6c3c:	mov	x0, #0xeb4f                	// #60239
    6c40:	eor	x19, x19, x19, lsr #33
    6c44:	movk	x0, #0x27d4, lsl #16
    6c48:	mov	x1, #0x79f9                	// #31225
    6c4c:	movk	x0, #0xae3d, lsl #32
    6c50:	movk	x1, #0x9e37, lsl #16
    6c54:	movk	x0, #0xc2b2, lsl #48
    6c58:	movk	x1, #0x67b1, lsl #32
    6c5c:	movk	x1, #0x1656, lsl #48
    6c60:	mul	x0, x19, x0
    6c64:	ldp	x19, x20, [sp, #16]
    6c68:	eor	x0, x0, x0, lsr #29
    6c6c:	ldp	x21, x22, [sp, #32]
    6c70:	mul	x0, x0, x1
    6c74:	ldp	x23, x24, [sp, #48]
    6c78:	eor	x0, x0, x0, lsr #32
    6c7c:	ldp	x25, x26, [sp, #64]
    6c80:	ldp	x27, x28, [sp, #80]
    6c84:	ldp	x29, x30, [sp], #160
    6c88:	ret
    6c8c:	mov	x0, #0x67c5                	// #26565
    6c90:	movk	x0, #0x1656, lsl #16
    6c94:	movk	x0, #0xeb2f, lsl #32
    6c98:	movk	x0, #0x27d4, lsl #48
    6c9c:	add	x19, x2, x0
    6ca0:	b	6af4 <XXH64+0x4d4>
    6ca4:	nop

0000000000006ca8 <XXH32_createState>:
    6ca8:	mov	x0, #0x30                  	// #48
    6cac:	b	0 <grub_malloc>

0000000000006cb0 <XXH32_freeState>:
    6cb0:	stp	x29, x30, [sp, #-16]!
    6cb4:	mov	x29, sp
    6cb8:	bl	0 <grub_free>
    6cbc:	mov	w0, #0x0                   	// #0
    6cc0:	ldp	x29, x30, [sp], #16
    6cc4:	ret

0000000000006cc8 <XXH64_createState>:
    6cc8:	mov	x0, #0x58                  	// #88
    6ccc:	b	0 <grub_malloc>

0000000000006cd0 <XXH64_freeState>:
    6cd0:	stp	x29, x30, [sp, #-16]!
    6cd4:	mov	x29, sp
    6cd8:	bl	0 <grub_free>
    6cdc:	mov	w0, #0x0                   	// #0
    6ce0:	ldp	x29, x30, [sp], #16
    6ce4:	ret

0000000000006ce8 <XXH32_reset>:
    6ce8:	stp	x29, x30, [sp, #-80]!
    6cec:	mov	x2, #0x2c                  	// #44
    6cf0:	mov	x29, sp
    6cf4:	stp	x19, x20, [sp, #16]
    6cf8:	mov	w19, w1
    6cfc:	mov	x20, x0
    6d00:	mov	w1, #0x0                   	// #0
    6d04:	add	x0, sp, #0x20
    6d08:	bl	0 <grub_memset>
    6d0c:	mov	w5, #0x4428                	// #17448
    6d10:	mov	w4, #0xca77                	// #51831
    6d14:	mov	w3, #0x864f                	// #34383
    6d18:	movk	w5, #0x2423, lsl #16
    6d1c:	movk	w4, #0x85eb, lsl #16
    6d20:	add	w5, w19, w5
    6d24:	add	w4, w19, w4
    6d28:	movk	w3, #0x61c8, lsl #16
    6d2c:	add	w3, w19, w3
    6d30:	add	x1, sp, #0x20
    6d34:	mov	x0, x20
    6d38:	mov	x2, #0x30                  	// #48
    6d3c:	stp	w5, w4, [sp, #40]
    6d40:	stp	w19, w3, [sp, #48]
    6d44:	bl	0 <grub_memmove>
    6d48:	mov	w0, #0x0                   	// #0
    6d4c:	ldp	x19, x20, [sp, #16]
    6d50:	ldp	x29, x30, [sp], #80
    6d54:	ret

0000000000006d58 <XXH64_reset>:
    6d58:	stp	x29, x30, [sp, #-128]!
    6d5c:	mov	x2, #0x50                  	// #80
    6d60:	mov	x29, sp
    6d64:	stp	x19, x20, [sp, #16]
    6d68:	mov	x19, x1
    6d6c:	mov	x20, x0
    6d70:	mov	w1, #0x0                   	// #0
    6d74:	add	x0, sp, #0x28
    6d78:	bl	0 <grub_memset>
    6d7c:	mov	x5, #0xb5d6                	// #46550
    6d80:	mov	x4, #0xeb4f                	// #60239
    6d84:	mov	x3, #0x3579                	// #13689
    6d88:	movk	x5, #0xadc0, lsl #16
    6d8c:	movk	x4, #0x27d4, lsl #16
    6d90:	movk	x3, #0x7a14, lsl #16
    6d94:	movk	x5, #0x27ee, lsl #32
    6d98:	movk	x4, #0xae3d, lsl #32
    6d9c:	movk	x3, #0x864e, lsl #32
    6da0:	movk	x5, #0x60ea, lsl #48
    6da4:	movk	x4, #0xc2b2, lsl #48
    6da8:	add	x5, x19, x5
    6dac:	add	x4, x19, x4
    6db0:	movk	x3, #0x61c8, lsl #48
    6db4:	add	x3, x19, x3
    6db8:	add	x1, sp, #0x28
    6dbc:	mov	x0, x20
    6dc0:	mov	x2, #0x58                  	// #88
    6dc4:	stp	x5, x4, [sp, #48]
    6dc8:	stp	x19, x3, [sp, #64]
    6dcc:	bl	0 <grub_memmove>
    6dd0:	mov	w0, #0x0                   	// #0
    6dd4:	ldp	x19, x20, [sp, #16]
    6dd8:	ldp	x29, x30, [sp], #128
    6ddc:	ret

0000000000006de0 <XXH32_update>:
    6de0:	stp	x29, x30, [sp, #-128]!
    6de4:	add	x3, x1, x2
    6de8:	cmp	x2, #0xf
    6dec:	mov	x29, sp
    6df0:	stp	x27, x28, [sp, #80]
    6df4:	mov	x28, x0
    6df8:	ldr	w0, [x0]
    6dfc:	str	x3, [sp, #104]
    6e00:	add	w0, w0, w2
    6e04:	ldr	w3, [x28, #4]
    6e08:	ccmp	w0, #0xf, #0x2, ls  // ls = plast
    6e0c:	ldr	w5, [x28, #40]
    6e10:	cset	w6, hi  // hi = pmore
    6e14:	stp	x19, x20, [sp, #16]
    6e18:	orr	w3, w3, w6
    6e1c:	str	w0, [x28]
    6e20:	mov	w0, w5
    6e24:	str	w3, [x28, #4]
    6e28:	add	x3, x2, x0
    6e2c:	cmp	x3, #0xf
    6e30:	b.ls	7078 <XXH32_update+0x298>  // b.plast
    6e34:	stp	x23, x24, [sp, #48]
    6e38:	mov	x23, x1
    6e3c:	cbnz	w5, 6f8c <XXH32_update+0x1ac>
    6e40:	ldr	x0, [sp, #104]
    6e44:	sub	x0, x0, #0x10
    6e48:	str	x0, [sp, #96]
    6e4c:	cmp	x0, x23
    6e50:	b.cs	6e78 <XXH32_update+0x98>  // b.hs, b.nlast
    6e54:	ldr	x0, [sp, #104]
    6e58:	cmp	x0, x23
    6e5c:	b.hi	6f5c <XXH32_update+0x17c>  // b.pmore
    6e60:	mov	w0, #0x0                   	// #0
    6e64:	ldp	x19, x20, [sp, #16]
    6e68:	ldp	x23, x24, [sp, #48]
    6e6c:	ldp	x27, x28, [sp, #80]
    6e70:	ldp	x29, x30, [sp], #128
    6e74:	ret
    6e78:	ldp	w24, w27, [x28, #16]
    6e7c:	stp	x25, x26, [sp, #64]
    6e80:	mov	x19, x23
    6e84:	ldp	w26, w25, [x28, #8]
    6e88:	add	x20, sp, #0x7c
    6e8c:	stp	x21, x22, [sp, #32]
    6e90:	mov	w22, #0xca77                	// #51831
    6e94:	mov	w21, #0x79b1                	// #31153
    6e98:	movk	w22, #0x85eb, lsl #16
    6e9c:	movk	w21, #0x9e37, lsl #16
    6ea0:	mov	x1, x19
    6ea4:	mov	x2, #0x4                   	// #4
    6ea8:	mov	x0, x20
    6eac:	bl	0 <grub_memmove>
    6eb0:	ldr	w3, [sp, #124]
    6eb4:	mov	x2, #0x4                   	// #4
    6eb8:	mov	x0, x20
    6ebc:	add	x1, x19, x2
    6ec0:	madd	w26, w3, w22, w26
    6ec4:	bl	0 <grub_memmove>
    6ec8:	ldr	w3, [sp, #124]
    6ecc:	add	x1, x19, #0x8
    6ed0:	mov	x2, #0x4                   	// #4
    6ed4:	mov	x0, x20
    6ed8:	ror	w26, w26, #19
    6edc:	madd	w25, w3, w22, w25
    6ee0:	bl	0 <grub_memmove>
    6ee4:	ldr	w3, [sp, #124]
    6ee8:	add	x1, x19, #0xc
    6eec:	mov	x0, x20
    6ef0:	mov	x2, #0x4                   	// #4
    6ef4:	add	x19, x19, #0x10
    6ef8:	ror	w25, w25, #19
    6efc:	mul	w26, w26, w21
    6f00:	madd	w24, w3, w22, w24
    6f04:	bl	0 <grub_memmove>
    6f08:	ldr	w1, [sp, #124]
    6f0c:	mul	w25, w25, w21
    6f10:	ldr	x0, [sp, #96]
    6f14:	ror	w24, w24, #19
    6f18:	madd	w1, w1, w22, w27
    6f1c:	cmp	x0, x19
    6f20:	mul	w24, w24, w21
    6f24:	ror	w1, w1, #19
    6f28:	mul	w27, w1, w21
    6f2c:	b.cs	6ea0 <XXH32_update+0xc0>  // b.hs, b.nlast
    6f30:	sub	x0, x0, x23
    6f34:	and	x0, x0, #0xfffffffffffffff0
    6f38:	add	x0, x0, #0x10
    6f3c:	add	x23, x23, x0
    6f40:	ldr	x0, [sp, #104]
    6f44:	ldp	x21, x22, [sp, #32]
    6f48:	stp	w26, w25, [x28, #8]
    6f4c:	stp	w24, w27, [x28, #16]
    6f50:	cmp	x0, x23
    6f54:	ldp	x25, x26, [sp, #64]
    6f58:	b.ls	6e60 <XXH32_update+0x80>  // b.plast
    6f5c:	sub	x19, x0, x23
    6f60:	mov	x1, x23
    6f64:	mov	x2, x19
    6f68:	add	x0, x28, #0x18
    6f6c:	bl	0 <grub_memmove>
    6f70:	ldp	x23, x24, [sp, #48]
    6f74:	str	w19, [x28, #40]
    6f78:	mov	w0, #0x0                   	// #0
    6f7c:	ldp	x19, x20, [sp, #16]
    6f80:	ldp	x27, x28, [sp, #80]
    6f84:	ldp	x29, x30, [sp], #128
    6f88:	ret
    6f8c:	add	x19, x28, #0x18
    6f90:	add	x20, sp, #0x7c
    6f94:	add	x0, x19, x0
    6f98:	stp	x21, x22, [sp, #32]
    6f9c:	mov	w22, #0x10                  	// #16
    6fa0:	sub	w2, w22, w5
    6fa4:	stp	x25, x26, [sp, #64]
    6fa8:	bl	0 <grub_memmove>
    6fac:	mov	x1, x19
    6fb0:	ldr	w24, [x28, #8]
    6fb4:	mov	x0, x20
    6fb8:	mov	x2, #0x4                   	// #4
    6fbc:	bl	0 <grub_memmove>
    6fc0:	mov	w21, #0xca77                	// #51831
    6fc4:	ldr	w3, [sp, #124]
    6fc8:	movk	w21, #0x85eb, lsl #16
    6fcc:	mov	w19, #0x79b1                	// #31153
    6fd0:	ldr	w25, [x28, #12]
    6fd4:	movk	w19, #0x9e37, lsl #16
    6fd8:	mov	x0, x20
    6fdc:	add	x1, x28, #0x1c
    6fe0:	mov	x2, #0x4                   	// #4
    6fe4:	madd	w3, w3, w21, w24
    6fe8:	ror	w3, w3, #19
    6fec:	mul	w3, w3, w19
    6ff0:	str	w3, [x28, #8]
    6ff4:	bl	0 <grub_memmove>
    6ff8:	ldr	w24, [x28, #16]
    6ffc:	ldr	w5, [sp, #124]
    7000:	mov	x0, x20
    7004:	add	x1, x28, #0x20
    7008:	mov	x2, #0x4                   	// #4
    700c:	madd	w5, w5, w21, w25
    7010:	ror	w5, w5, #19
    7014:	mul	w5, w5, w19
    7018:	str	w5, [x28, #12]
    701c:	bl	0 <grub_memmove>
    7020:	ldr	w3, [sp, #124]
    7024:	mov	x0, x20
    7028:	add	x1, x28, #0x24
    702c:	ldr	w20, [x28, #20]
    7030:	mov	x2, #0x4                   	// #4
    7034:	madd	w3, w3, w21, w24
    7038:	ror	w3, w3, #19
    703c:	mul	w3, w3, w19
    7040:	str	w3, [x28, #16]
    7044:	bl	0 <grub_memmove>
    7048:	ldr	w0, [sp, #124]
    704c:	ldr	w1, [x28, #40]
    7050:	ldp	x25, x26, [sp, #64]
    7054:	sub	w22, w22, w1
    7058:	madd	w0, w0, w21, w20
    705c:	add	x23, x23, x22
    7060:	ldp	x21, x22, [sp, #32]
    7064:	str	wzr, [x28, #40]
    7068:	ror	w0, w0, #19
    706c:	mul	w0, w0, w19
    7070:	str	w0, [x28, #20]
    7074:	b	6e40 <XXH32_update+0x60>
    7078:	add	x3, x28, #0x18
    707c:	mov	x19, x2
    7080:	add	x0, x3, x0
    7084:	bl	0 <grub_memmove>
    7088:	ldr	w0, [x28, #40]
    708c:	add	w19, w0, w19
    7090:	str	w19, [x28, #40]
    7094:	mov	w0, #0x0                   	// #0
    7098:	ldp	x19, x20, [sp, #16]
    709c:	ldp	x27, x28, [sp, #80]
    70a0:	ldp	x29, x30, [sp], #128
    70a4:	ret

00000000000070a8 <XXH32_digest>:
    70a8:	stp	x29, x30, [sp, #-96]!
    70ac:	mov	x29, sp
    70b0:	ldr	w2, [x0, #4]
    70b4:	stp	x19, x20, [sp, #16]
    70b8:	ldr	w19, [x0, #16]
    70bc:	stp	x21, x22, [sp, #32]
    70c0:	ldr	w22, [x0, #40]
    70c4:	stp	x23, x24, [sp, #48]
    70c8:	stp	x25, x26, [sp, #64]
    70cc:	add	x26, x0, #0x18
    70d0:	mov	x1, x26
    70d4:	add	x22, x26, x22
    70d8:	cbz	w2, 71d8 <XXH32_digest+0x130>
    70dc:	ldp	w3, w4, [x0, #8]
    70e0:	ror	w19, w19, #20
    70e4:	ldr	w2, [x0, #20]
    70e8:	ror	w3, w3, #31
    70ec:	ror	w2, w2, #14
    70f0:	add	w19, w2, w19
    70f4:	ror	w4, w4, #25
    70f8:	add	w2, w3, w4
    70fc:	add	w19, w2, w19
    7100:	mov	x24, x0
    7104:	ldr	w2, [x24], #28
    7108:	add	w19, w19, w2
    710c:	cmp	x22, x24
    7110:	b.cc	716c <XXH32_digest+0xc4>  // b.lo, b.ul, b.last
    7114:	sub	x0, x22, x0
    7118:	mov	w25, #0xae3d                	// #44605
    711c:	sub	x20, x0, #0x1c
    7120:	mov	w23, #0xeb2f                	// #60207
    7124:	and	x21, x20, #0xfffffffffffffffc
    7128:	movk	w25, #0xc2b2, lsl #16
    712c:	add	x21, x24, x21
    7130:	movk	w23, #0x27d4, lsl #16
    7134:	nop
    7138:	mov	x1, x26
    713c:	add	x0, sp, #0x5c
    7140:	mov	x2, #0x4                   	// #4
    7144:	bl	0 <grub_memmove>
    7148:	ldr	w0, [sp, #92]
    714c:	add	x26, x26, #0x4
    7150:	cmp	x21, x26
    7154:	madd	w0, w0, w25, w19
    7158:	ror	w0, w0, #15
    715c:	mul	w19, w0, w23
    7160:	b.ne	7138 <XXH32_digest+0x90>  // b.any
    7164:	and	x20, x20, #0xfffffffffffffffc
    7168:	add	x1, x24, x20
    716c:	cmp	x22, x1
    7170:	b.ls	719c <XXH32_digest+0xf4>  // b.plast
    7174:	mov	w3, #0x67b1                	// #26545
    7178:	mov	w2, #0x79b1                	// #31153
    717c:	movk	w3, #0x1656, lsl #16
    7180:	movk	w2, #0x9e37, lsl #16
    7184:	ldrb	w0, [x1], #1
    7188:	cmp	x22, x1
    718c:	madd	w0, w0, w3, w19
    7190:	ror	w0, w0, #21
    7194:	mul	w19, w0, w2
    7198:	b.ne	7184 <XXH32_digest+0xdc>  // b.any
    719c:	eor	w0, w19, w19, lsr #15
    71a0:	mov	w19, #0xca77                	// #51831
    71a4:	movk	w19, #0x85eb, lsl #16
    71a8:	mov	w1, #0xae3d                	// #44605
    71ac:	movk	w1, #0xc2b2, lsl #16
    71b0:	mul	w0, w0, w19
    71b4:	ldp	x19, x20, [sp, #16]
    71b8:	eor	w0, w0, w0, lsr #13
    71bc:	ldp	x21, x22, [sp, #32]
    71c0:	mul	w0, w0, w1
    71c4:	ldp	x23, x24, [sp, #48]
    71c8:	eor	w0, w0, w0, lsr #16
    71cc:	ldp	x25, x26, [sp, #64]
    71d0:	ldp	x29, x30, [sp], #96
    71d4:	ret
    71d8:	mov	w2, #0x67b1                	// #26545
    71dc:	movk	w2, #0x1656, lsl #16
    71e0:	add	w19, w19, w2
    71e4:	b	7100 <XXH32_digest+0x58>

00000000000071e8 <XXH64_update>:
    71e8:	stp	x29, x30, [sp, #-128]!
    71ec:	add	x3, x1, x2
    71f0:	mov	x29, sp
    71f4:	stp	x27, x28, [sp, #80]
    71f8:	mov	x28, x0
    71fc:	ldr	x0, [x0]
    7200:	str	x3, [sp, #104]
    7204:	ldr	w3, [x28, #72]
    7208:	add	x0, x0, x2
    720c:	stp	x19, x20, [sp, #16]
    7210:	str	x0, [x28]
    7214:	mov	w0, w3
    7218:	add	x5, x2, x0
    721c:	cmp	x5, #0x1f
    7220:	b.ls	7490 <XXH64_update+0x2a8>  // b.plast
    7224:	stp	x23, x24, [sp, #48]
    7228:	mov	x23, x1
    722c:	cbnz	w3, 7394 <XXH64_update+0x1ac>
    7230:	ldr	x1, [sp, #104]
    7234:	add	x0, x23, #0x20
    7238:	cmp	x1, x0
    723c:	b.cs	7264 <XXH64_update+0x7c>  // b.hs, b.nlast
    7240:	ldr	x0, [sp, #104]
    7244:	cmp	x0, x23
    7248:	b.hi	7364 <XXH64_update+0x17c>  // b.pmore
    724c:	mov	w0, #0x0                   	// #0
    7250:	ldp	x19, x20, [sp, #16]
    7254:	ldp	x23, x24, [sp, #48]
    7258:	ldp	x27, x28, [sp, #80]
    725c:	ldp	x29, x30, [sp], #128
    7260:	ret
    7264:	stp	x25, x26, [sp, #64]
    7268:	mov	x19, x23
    726c:	add	x20, sp, #0x78
    7270:	ldp	x26, x25, [x28, #8]
    7274:	stp	x21, x22, [sp, #32]
    7278:	mov	x22, #0xeb4f                	// #60239
    727c:	ldp	x24, x27, [x28, #24]
    7280:	mov	x21, #0xca87                	// #51847
    7284:	movk	x22, #0x27d4, lsl #16
    7288:	movk	x21, #0x85eb, lsl #16
    728c:	movk	x22, #0xae3d, lsl #32
    7290:	movk	x21, #0x79b1, lsl #32
    7294:	sub	x0, x1, #0x20
    7298:	movk	x22, #0xc2b2, lsl #48
    729c:	movk	x21, #0x9e37, lsl #48
    72a0:	str	x0, [sp, #96]
    72a4:	nop
    72a8:	mov	x1, x19
    72ac:	mov	x2, #0x8                   	// #8
    72b0:	mov	x0, x20
    72b4:	bl	0 <grub_memmove>
    72b8:	ldr	x3, [sp, #120]
    72bc:	mov	x2, #0x8                   	// #8
    72c0:	mov	x0, x20
    72c4:	add	x1, x19, x2
    72c8:	madd	x26, x3, x22, x26
    72cc:	bl	0 <grub_memmove>
    72d0:	ldr	x3, [sp, #120]
    72d4:	add	x1, x19, #0x10
    72d8:	mov	x2, #0x8                   	// #8
    72dc:	mov	x0, x20
    72e0:	ror	x26, x26, #33
    72e4:	madd	x25, x3, x22, x25
    72e8:	bl	0 <grub_memmove>
    72ec:	ldr	x3, [sp, #120]
    72f0:	add	x1, x19, #0x18
    72f4:	mov	x0, x20
    72f8:	mov	x2, #0x8                   	// #8
    72fc:	add	x19, x19, #0x20
    7300:	ror	x25, x25, #33
    7304:	madd	x24, x3, x22, x24
    7308:	bl	0 <grub_memmove>
    730c:	ldr	x1, [sp, #120]
    7310:	mul	x26, x26, x21
    7314:	ror	x24, x24, #33
    7318:	ldr	x0, [sp, #96]
    731c:	madd	x1, x1, x22, x27
    7320:	mul	x25, x25, x21
    7324:	mul	x24, x24, x21
    7328:	cmp	x0, x19
    732c:	ror	x1, x1, #33
    7330:	mul	x27, x1, x21
    7334:	b.cs	72a8 <XXH64_update+0xc0>  // b.hs, b.nlast
    7338:	sub	x0, x0, x23
    733c:	and	x0, x0, #0xffffffffffffffe0
    7340:	add	x0, x0, #0x20
    7344:	add	x23, x23, x0
    7348:	ldr	x0, [sp, #104]
    734c:	ldp	x21, x22, [sp, #32]
    7350:	stp	x26, x25, [x28, #8]
    7354:	cmp	x0, x23
    7358:	stp	x24, x27, [x28, #24]
    735c:	ldp	x25, x26, [sp, #64]
    7360:	b.ls	724c <XXH64_update+0x64>  // b.plast
    7364:	sub	x19, x0, x23
    7368:	mov	x1, x23
    736c:	mov	x2, x19
    7370:	add	x0, x28, #0x28
    7374:	bl	0 <grub_memmove>
    7378:	ldp	x23, x24, [sp, #48]
    737c:	str	w19, [x28, #72]
    7380:	mov	w0, #0x0                   	// #0
    7384:	ldp	x19, x20, [sp, #16]
    7388:	ldp	x27, x28, [sp, #80]
    738c:	ldp	x29, x30, [sp], #128
    7390:	ret
    7394:	add	x19, x28, #0x28
    7398:	add	x20, sp, #0x78
    739c:	add	x0, x19, x0
    73a0:	stp	x21, x22, [sp, #32]
    73a4:	mov	w22, #0x20                  	// #32
    73a8:	sub	w2, w22, w3
    73ac:	stp	x25, x26, [sp, #64]
    73b0:	bl	0 <grub_memmove>
    73b4:	mov	x1, x19
    73b8:	mov	x0, x20
    73bc:	mov	x2, #0x8                   	// #8
    73c0:	mov	x21, #0xeb4f                	// #60239
    73c4:	ldr	x24, [x28, #8]
    73c8:	bl	0 <grub_memmove>
    73cc:	movk	x21, #0x27d4, lsl #16
    73d0:	mov	x19, #0xca87                	// #51847
    73d4:	ldr	x3, [sp, #120]
    73d8:	movk	x21, #0xae3d, lsl #32
    73dc:	movk	x21, #0xc2b2, lsl #48
    73e0:	movk	x19, #0x85eb, lsl #16
    73e4:	movk	x19, #0x79b1, lsl #32
    73e8:	mov	x0, x20
    73ec:	madd	x3, x3, x21, x24
    73f0:	movk	x19, #0x9e37, lsl #48
    73f4:	add	x1, x28, #0x30
    73f8:	mov	x2, #0x8                   	// #8
    73fc:	ldr	x25, [x28, #16]
    7400:	ror	x3, x3, #33
    7404:	mul	x3, x3, x19
    7408:	str	x3, [x28, #8]
    740c:	bl	0 <grub_memmove>
    7410:	ldr	x5, [sp, #120]
    7414:	mov	x0, x20
    7418:	add	x1, x28, #0x38
    741c:	mov	x2, #0x8                   	// #8
    7420:	ldr	x24, [x28, #24]
    7424:	madd	x5, x5, x21, x25
    7428:	ror	x5, x5, #33
    742c:	mul	x5, x5, x19
    7430:	str	x5, [x28, #16]
    7434:	bl	0 <grub_memmove>
    7438:	ldr	x3, [sp, #120]
    743c:	mov	x0, x20
    7440:	add	x1, x28, #0x40
    7444:	mov	x2, #0x8                   	// #8
    7448:	ldr	x20, [x28, #32]
    744c:	madd	x3, x3, x21, x24
    7450:	ror	x3, x3, #33
    7454:	mul	x3, x3, x19
    7458:	str	x3, [x28, #24]
    745c:	bl	0 <grub_memmove>
    7460:	ldr	x0, [sp, #120]
    7464:	ldr	w1, [x28, #72]
    7468:	ldp	x25, x26, [sp, #64]
    746c:	madd	x0, x0, x21, x20
    7470:	sub	w22, w22, w1
    7474:	add	x23, x23, x22
    7478:	ror	x0, x0, #33
    747c:	ldp	x21, x22, [sp, #32]
    7480:	str	wzr, [x28, #72]
    7484:	mul	x0, x0, x19
    7488:	str	x0, [x28, #32]
    748c:	b	7230 <XXH64_update+0x48>
    7490:	add	x3, x28, #0x28
    7494:	mov	x19, x2
    7498:	add	x0, x3, x0
    749c:	bl	0 <grub_memmove>
    74a0:	ldr	w0, [x28, #72]
    74a4:	add	w19, w0, w19
    74a8:	str	w19, [x28, #72]
    74ac:	mov	w0, #0x0                   	// #0
    74b0:	ldp	x19, x20, [sp, #16]
    74b4:	ldp	x27, x28, [sp, #80]
    74b8:	ldp	x29, x30, [sp], #128
    74bc:	ret

00000000000074c0 <XXH64_digest>:
    74c0:	stp	x29, x30, [sp, #-112]!
    74c4:	mov	x29, sp
    74c8:	ldr	x7, [x0]
    74cc:	stp	x19, x20, [sp, #16]
    74d0:	ldr	w20, [x0, #72]
    74d4:	stp	x23, x24, [sp, #48]
    74d8:	mov	x19, x0
    74dc:	cmp	x7, #0x1f
    74e0:	stp	x25, x26, [sp, #64]
    74e4:	add	x26, x0, #0x28
    74e8:	mov	x1, x26
    74ec:	add	x20, x26, x20
    74f0:	ldr	x2, [x0, #24]
    74f4:	b.ls	772c <XXH64_digest+0x26c>  // b.plast
    74f8:	ldp	x0, x3, [x0, #8]
    74fc:	mov	x9, #0xeb4f                	// #60239
    7500:	movk	x9, #0x27d4, lsl #16
    7504:	mov	x25, #0xca87                	// #51847
    7508:	movk	x9, #0xae3d, lsl #32
    750c:	movk	x25, #0x85eb, lsl #16
    7510:	movk	x9, #0xc2b2, lsl #48
    7514:	movk	x25, #0x79b1, lsl #32
    7518:	ldr	x5, [x19, #32]
    751c:	mul	x8, x0, x9
    7520:	movk	x25, #0x9e37, lsl #48
    7524:	mul	x4, x3, x9
    7528:	ror	x6, x2, #52
    752c:	ror	x8, x8, #33
    7530:	ror	x10, x3, #57
    7534:	ror	x0, x0, #63
    7538:	add	x0, x0, x10
    753c:	ror	x3, x5, #46
    7540:	add	x6, x6, x3
    7544:	mul	x3, x8, x25
    7548:	add	x6, x6, x0
    754c:	mov	x0, #0xae63                	// #44643
    7550:	movk	x0, #0xc2b2, lsl #16
    7554:	eor	x6, x6, x3
    7558:	movk	x0, #0xca77, lsl #32
    755c:	ror	x4, x4, #33
    7560:	movk	x0, #0x85eb, lsl #48
    7564:	mul	x3, x2, x9
    7568:	mul	x2, x5, x9
    756c:	madd	x6, x6, x25, x0
    7570:	mul	x4, x4, x25
    7574:	ror	x3, x3, #33
    7578:	ror	x2, x2, #33
    757c:	eor	x4, x4, x6
    7580:	mul	x3, x3, x25
    7584:	mul	x2, x2, x25
    7588:	madd	x4, x4, x25, x0
    758c:	eor	x3, x3, x4
    7590:	madd	x3, x3, x25, x0
    7594:	eor	x3, x2, x3
    7598:	madd	x0, x3, x25, x0
    759c:	add	x24, x19, #0x30
    75a0:	add	x25, x7, x0
    75a4:	cmp	x20, x24
    75a8:	b.cc	7640 <XXH64_digest+0x180>  // b.lo, b.ul, b.last
    75ac:	sub	x19, x20, x19
    75b0:	mov	x23, #0xeb4f                	// #60239
    75b4:	sub	x19, x19, #0x30
    75b8:	stp	x21, x22, [sp, #32]
    75bc:	mov	x22, #0xae63                	// #44643
    75c0:	str	x27, [sp, #80]
    75c4:	mov	x27, #0xca87                	// #51847
    75c8:	and	x21, x19, #0xfffffffffffffff8
    75cc:	movk	x23, #0x27d4, lsl #16
    75d0:	movk	x22, #0xc2b2, lsl #16
    75d4:	movk	x27, #0x85eb, lsl #16
    75d8:	movk	x23, #0xae3d, lsl #32
    75dc:	movk	x22, #0xca77, lsl #32
    75e0:	movk	x27, #0x79b1, lsl #32
    75e4:	add	x21, x24, x21
    75e8:	movk	x23, #0xc2b2, lsl #48
    75ec:	movk	x22, #0x85eb, lsl #48
    75f0:	movk	x27, #0x9e37, lsl #48
    75f4:	nop
    75f8:	mov	x1, x26
    75fc:	add	x0, sp, #0x68
    7600:	mov	x2, #0x8                   	// #8
    7604:	bl	0 <grub_memmove>
    7608:	ldr	x0, [sp, #104]
    760c:	add	x26, x26, #0x8
    7610:	cmp	x21, x26
    7614:	mul	x0, x0, x23
    7618:	ror	x0, x0, #33
    761c:	mul	x0, x0, x27
    7620:	eor	x0, x0, x25
    7624:	ror	x0, x0, #37
    7628:	madd	x25, x0, x27, x22
    762c:	b.ne	75f8 <XXH64_digest+0x138>  // b.any
    7630:	ldp	x21, x22, [sp, #32]
    7634:	and	x1, x19, #0xfffffffffffffff8
    7638:	ldr	x27, [sp, #80]
    763c:	add	x1, x24, x1
    7640:	add	x19, x1, #0x4
    7644:	cmp	x20, x19
    7648:	b.cc	76a0 <XXH64_digest+0x1e0>  // b.lo, b.ul, b.last
    764c:	mov	x2, #0x4                   	// #4
    7650:	add	x0, sp, #0x68
    7654:	bl	0 <grub_memmove>
    7658:	mov	x4, #0xca87                	// #51847
    765c:	ldr	w0, [sp, #104]
    7660:	movk	x4, #0x85eb, lsl #16
    7664:	mov	x3, #0xeb4f                	// #60239
    7668:	movk	x4, #0x79b1, lsl #32
    766c:	mov	x2, #0x79f9                	// #31225
    7670:	movk	x4, #0x9e37, lsl #48
    7674:	movk	x3, #0x27d4, lsl #16
    7678:	movk	x2, #0x9e37, lsl #16
    767c:	movk	x3, #0xae3d, lsl #32
    7680:	mul	x0, x0, x4
    7684:	movk	x2, #0x67b1, lsl #32
    7688:	movk	x3, #0xc2b2, lsl #48
    768c:	movk	x2, #0x1656, lsl #48
    7690:	eor	x0, x0, x25
    7694:	mov	x1, x19
    7698:	ror	x0, x0, #41
    769c:	madd	x25, x0, x3, x2
    76a0:	cmp	x20, x1
    76a4:	b.ls	76e4 <XXH64_digest+0x224>  // b.plast
    76a8:	mov	x3, #0x67c5                	// #26565
    76ac:	mov	x2, #0xca87                	// #51847
    76b0:	movk	x3, #0x1656, lsl #16
    76b4:	movk	x2, #0x85eb, lsl #16
    76b8:	movk	x3, #0xeb2f, lsl #32
    76bc:	movk	x2, #0x79b1, lsl #32
    76c0:	movk	x3, #0x27d4, lsl #48
    76c4:	movk	x2, #0x9e37, lsl #48
    76c8:	ldrb	w0, [x1], #1
    76cc:	cmp	x20, x1
    76d0:	mul	x0, x0, x3
    76d4:	eor	x0, x0, x25
    76d8:	ror	x0, x0, #53
    76dc:	mul	x25, x0, x2
    76e0:	b.ne	76c8 <XXH64_digest+0x208>  // b.any
    76e4:	eor	x0, x25, x25, lsr #33
    76e8:	mov	x25, #0xeb4f                	// #60239
    76ec:	movk	x25, #0x27d4, lsl #16
    76f0:	mov	x1, #0x79f9                	// #31225
    76f4:	movk	x25, #0xae3d, lsl #32
    76f8:	movk	x1, #0x9e37, lsl #16
    76fc:	movk	x25, #0xc2b2, lsl #48
    7700:	movk	x1, #0x67b1, lsl #32
    7704:	movk	x1, #0x1656, lsl #48
    7708:	mul	x0, x0, x25
    770c:	ldp	x19, x20, [sp, #16]
    7710:	eor	x0, x0, x0, lsr #29
    7714:	ldp	x23, x24, [sp, #48]
    7718:	mul	x0, x0, x1
    771c:	ldp	x25, x26, [sp, #64]
    7720:	eor	x0, x0, x0, lsr #32
    7724:	ldp	x29, x30, [sp], #112
    7728:	ret
    772c:	mov	x0, #0x67c5                	// #26565
    7730:	movk	x0, #0x1656, lsl #16
    7734:	movk	x0, #0xeb2f, lsl #32
    7738:	movk	x0, #0x27d4, lsl #48
    773c:	add	x0, x2, x0
    7740:	b	759c <XXH64_digest+0xdc>
    7744:	nop

0000000000007748 <XXH32_canonicalFromHash>:
    7748:	stp	x29, x30, [sp, #-32]!
    774c:	rev	w3, w1
    7750:	mov	x2, #0x4                   	// #4
    7754:	mov	x29, sp
    7758:	add	x1, sp, #0x1c
    775c:	str	w3, [sp, #28]
    7760:	bl	0 <grub_memmove>
    7764:	ldp	x29, x30, [sp], #32
    7768:	ret
    776c:	nop

0000000000007770 <XXH64_canonicalFromHash>:
    7770:	stp	x29, x30, [sp, #-32]!
    7774:	rev	x3, x1
    7778:	mov	x2, #0x8                   	// #8
    777c:	mov	x29, sp
    7780:	add	x1, sp, #0x18
    7784:	str	x3, [sp, #24]
    7788:	bl	0 <grub_memmove>
    778c:	ldp	x29, x30, [sp], #32
    7790:	ret
    7794:	nop

0000000000007798 <XXH32_hashFromCanonical>:
    7798:	stp	x29, x30, [sp, #-32]!
    779c:	mov	x1, x0
    77a0:	mov	x2, #0x4                   	// #4
    77a4:	mov	x29, sp
    77a8:	add	x0, sp, #0x1c
    77ac:	bl	0 <grub_memmove>
    77b0:	ldr	w0, [sp, #28]
    77b4:	ldp	x29, x30, [sp], #32
    77b8:	rev	w0, w0
    77bc:	ret

00000000000077c0 <XXH64_hashFromCanonical>:
    77c0:	stp	x29, x30, [sp, #-32]!
    77c4:	mov	x1, x0
    77c8:	mov	x2, #0x8                   	// #8
    77cc:	mov	x29, sp
    77d0:	add	x0, sp, #0x18
    77d4:	bl	0 <grub_memmove>
    77d8:	ldr	x0, [sp, #24]
    77dc:	ldp	x29, x30, [sp], #32
    77e0:	rev	x0, x0
    77e4:	ret

00000000000077e8 <ZSTD_versionNumber>:
    77e8:	mov	w0, #0x2842                	// #10306
    77ec:	ret

00000000000077f0 <ZSTD_versionString>:
    77f0:	adrp	x0, 0 <FSE_versionNumber>
    77f4:	ldr	x0, [x0]
    77f8:	ret
    77fc:	nop
	...

0000000000007808 <ZSTD_isError>:
    7808:	cmn	x0, #0x78
    780c:	cset	w0, hi  // hi = pmore
    7810:	ret
    7814:	nop

0000000000007818 <ZSTD_getErrorName>:
    7818:	cmn	x0, #0x78
    781c:	csneg	w0, wzr, w0, ls  // ls = plast
    7820:	b	558 <ERR_getErrorString>
    7824:	nop

0000000000007828 <ZSTD_getErrorCode>:
    7828:	cmn	x0, #0x78
    782c:	csneg	w0, wzr, w0, ls  // ls = plast
    7830:	ret
    7834:	nop

0000000000007838 <ZSTD_getErrorString>:
    7838:	b	558 <ERR_getErrorString>
    783c:	nop

0000000000007840 <ZSTD_malloc>:
    7840:	mov	x2, x1
    7844:	mov	x1, x0
    7848:	ldr	x3, [x2]
    784c:	cbz	x3, 785c <ZSTD_malloc+0x1c>
    7850:	ldr	x0, [x2, #16]
    7854:	mov	x16, x3
    7858:	br	x16
    785c:	b	0 <grub_malloc>

0000000000007860 <ZSTD_calloc>:
    7860:	ldr	x2, [x1]
    7864:	cbz	x2, 78a8 <ZSTD_calloc+0x48>
    7868:	stp	x29, x30, [sp, #-32]!
    786c:	mov	x3, x1
    7870:	mov	x1, x0
    7874:	mov	x29, sp
    7878:	str	x19, [sp, #16]
    787c:	mov	x19, x0
    7880:	ldr	x0, [x3, #16]
    7884:	blr	x2
    7888:	mov	x2, x19
    788c:	mov	w1, #0x0                   	// #0
    7890:	mov	x19, x0
    7894:	bl	0 <grub_memset>
    7898:	mov	x0, x19
    789c:	ldr	x19, [sp, #16]
    78a0:	ldp	x29, x30, [sp], #32
    78a4:	ret
    78a8:	b	0 <grub_zalloc>
    78ac:	nop

00000000000078b0 <ZSTD_free>:
    78b0:	mov	x2, x1
    78b4:	mov	x1, x0
    78b8:	cbz	x0, 78d0 <ZSTD_free+0x20>
    78bc:	ldr	x3, [x2, #8]
    78c0:	cbz	x3, 78d4 <ZSTD_free+0x24>
    78c4:	ldr	x0, [x2, #16]
    78c8:	mov	x16, x3
    78cc:	br	x16
    78d0:	ret
    78d4:	b	0 <grub_free>
    78d8:	cmp	w2, #0x1
    78dc:	mov	x2, #0x5                   	// #5
    78e0:	csinc	x2, x2, xzr, ne  // ne = any
    78e4:	cmp	x2, x1
    78e8:	b.hi	7940 <ZSTD_free+0x90>  // b.pmore
    78ec:	add	x0, x0, x2
    78f0:	adrp	x1, 0 <FSE_versionNumber>
    78f4:	ldr	x4, [x1]
    78f8:	ldurb	w1, [x0, #-1]
    78fc:	add	x5, x4, #0x20
    7900:	and	x7, x1, #0x3
    7904:	ubfx	x6, x1, #6, #2
    7908:	lsr	w0, w1, #5
    790c:	cmp	wzr, w1, lsr #6
    7910:	mvn	w3, w0
    7914:	ldr	x1, [x4, x7, lsl #3]
    7918:	and	x3, x3, #0x1
    791c:	ldr	x4, [x5, x6, lsl #3]
    7920:	and	w0, w0, #0x1
    7924:	add	x2, x3, x2
    7928:	csel	w0, w0, wzr, eq  // eq = none
    792c:	add	x1, x1, x4
    7930:	and	x0, x0, #0xff
    7934:	add	x1, x1, x2
    7938:	add	x0, x1, x0
    793c:	ret
    7940:	mov	x0, #0xffffffffffffffb8    	// #-72
    7944:	ret
	...
    7950:	stp	x29, x30, [sp, #-224]!
    7954:	mov	x29, sp
    7958:	stp	x25, x26, [sp, #64]
    795c:	mov	w26, w5
    7960:	sub	w6, w26, #0x1
    7964:	mov	w5, #0x1                   	// #1
    7968:	stp	x19, x20, [sp, #16]
    796c:	lsl	w6, w5, w6
    7970:	stp	x21, x22, [sp, #32]
    7974:	mov	x22, x3
    7978:	add	x21, x0, #0x8
    797c:	stp	x23, x24, [sp, #48]
    7980:	mov	w24, w2
    7984:	cmn	w24, #0x1
    7988:	stp	x27, x28, [sp, #80]
    798c:	mov	x23, x4
    7990:	lsl	w28, w5, w26
    7994:	stp	w5, w26, [sp, #104]
    7998:	mov	x27, x0
    799c:	sub	w20, w28, #0x1
    79a0:	b.eq	7b2c <ZSTD_free+0x27c>  // b.none
    79a4:	sxth	w4, w6
    79a8:	mov	w3, w5
    79ac:	mov	w6, w5
    79b0:	mov	w7, w5
    79b4:	mov	x25, x1
    79b8:	add	x2, sp, #0x70
    79bc:	mov	w19, w20
    79c0:	mov	x0, #0x0                   	// #0
    79c4:	mov	w5, #0x0                   	// #0
    79c8:	b	79ec <ZSTD_free+0x13c>
    79cc:	strh	w1, [x2]
    79d0:	cmp	w1, w4
    79d4:	csel	w5, w5, w6, lt  // lt = tstop
    79d8:	csel	w3, w3, wzr, lt  // lt = tstop
    79dc:	add	x2, x2, #0x2
    79e0:	cmp	x24, x0
    79e4:	add	x0, x0, #0x1
    79e8:	b.eq	7a18 <ZSTD_free+0x168>  // b.none
    79ec:	ldrsh	w1, [x25, x0, lsl #1]
    79f0:	cmn	w1, #0x1
    79f4:	b.ne	79cc <ZSTD_free+0x11c>  // b.any
    79f8:	add	x1, x21, w19, uxtw #3
    79fc:	strh	w7, [x2]
    7a00:	cmp	x24, x0
    7a04:	sub	w19, w19, #0x1
    7a08:	add	x2, x2, #0x2
    7a0c:	str	w0, [x1, #4]
    7a10:	add	x0, x0, #0x1
    7a14:	b.ne	79ec <ZSTD_free+0x13c>  // b.any
    7a18:	cbz	w5, 7a20 <ZSTD_free+0x170>
    7a1c:	str	w3, [sp, #104]
    7a20:	add	x1, sp, #0x68
    7a24:	mov	x0, x27
    7a28:	mov	x2, #0x8                   	// #8
    7a2c:	bl	0 <grub_memmove>
    7a30:	lsr	w1, w28, #3
    7a34:	mov	x6, #0x0                   	// #0
    7a38:	add	w1, w1, w28, lsr #1
    7a3c:	mov	w0, #0x0                   	// #0
    7a40:	add	w1, w1, #0x3
    7a44:	nop
    7a48:	ldrsh	w4, [x25, x6, lsl #1]
    7a4c:	mov	w5, w6
    7a50:	mov	w2, #0x0                   	// #0
    7a54:	cmp	w4, #0x0
    7a58:	b.le	7a94 <ZSTD_free+0x1e4>
    7a5c:	nop
    7a60:	add	x3, x21, w0, uxtw #3
    7a64:	add	w0, w1, w0
    7a68:	and	w0, w0, w20
    7a6c:	cmp	w19, w0
    7a70:	str	w5, [x3, #4]
    7a74:	b.cs	7a88 <ZSTD_free+0x1d8>  // b.hs, b.nlast
    7a78:	add	w0, w1, w0
    7a7c:	and	w0, w0, w20
    7a80:	cmp	w19, w0
    7a84:	b.cc	7a78 <ZSTD_free+0x1c8>  // b.lo, b.ul, b.last
    7a88:	add	w2, w2, #0x1
    7a8c:	cmp	w2, w4
    7a90:	b.ne	7a60 <ZSTD_free+0x1b0>  // b.any
    7a94:	cmp	x24, x6
    7a98:	add	x6, x6, #0x1
    7a9c:	b.ne	7a48 <ZSTD_free+0x198>  // b.any
    7aa0:	cbz	w28, 7b10 <ZSTD_free+0x260>
    7aa4:	add	x27, x27, #0x10
    7aa8:	and	w26, w26, #0xff
    7aac:	add	x20, x27, w20, uxtw #3
    7ab0:	and	w28, w28, #0xffff
    7ab4:	add	x4, sp, #0x70
    7ab8:	mov	w6, #0x1f                  	// #31
    7abc:	nop
    7ac0:	ldr	w2, [x21, #4]
    7ac4:	add	x21, x21, #0x8
    7ac8:	lsl	x3, x2, #1
    7acc:	ldrh	w1, [x4, x3]
    7ad0:	clz	w0, w1
    7ad4:	add	w5, w1, #0x1
    7ad8:	sub	w0, w6, w0
    7adc:	strh	w5, [x4, x3]
    7ae0:	sub	w0, w26, w0
    7ae4:	and	w0, w0, #0xff
    7ae8:	sturb	w0, [x21, #-5]
    7aec:	ldr	w3, [x23, x2, lsl #2]
    7af0:	lsl	w0, w1, w0
    7af4:	sturb	w3, [x21, #-6]
    7af8:	sub	w0, w0, w28
    7afc:	sturh	w0, [x21, #-8]
    7b00:	ldr	w0, [x22, x2, lsl #2]
    7b04:	stur	w0, [x21, #-4]
    7b08:	cmp	x20, x21
    7b0c:	b.ne	7ac0 <ZSTD_free+0x210>  // b.any
    7b10:	ldp	x19, x20, [sp, #16]
    7b14:	ldp	x21, x22, [sp, #32]
    7b18:	ldp	x23, x24, [sp, #48]
    7b1c:	ldp	x25, x26, [sp, #64]
    7b20:	ldp	x27, x28, [sp, #80]
    7b24:	ldp	x29, x30, [sp], #224
    7b28:	ret
    7b2c:	add	x1, sp, #0x68
    7b30:	mov	x2, #0x8                   	// #8
    7b34:	bl	0 <grub_memmove>
    7b38:	b	7aa0 <ZSTD_free+0x1f0>
    7b3c:	nop
    7b40:	stp	x29, x30, [sp, #-208]!
    7b44:	cmp	w2, #0x2
    7b48:	mov	x29, sp
    7b4c:	stp	x19, x20, [sp, #16]
    7b50:	mov	x19, x0
    7b54:	mov	w20, w4
    7b58:	stp	x21, x22, [sp, #32]
    7b5c:	mov	x21, x7
    7b60:	str	x23, [sp, #48]
    7b64:	mov	x23, x1
    7b68:	str	w3, [sp, #76]
    7b6c:	b.eq	7ba4 <ZSTD_free+0x2f4>  // b.none
    7b70:	cmp	w2, #0x3
    7b74:	b.eq	7bf4 <ZSTD_free+0x344>  // b.none
    7b78:	cmp	w2, #0x1
    7b7c:	b.eq	7c48 <ZSTD_free+0x398>  // b.none
    7b80:	ldr	x0, [sp, #216]
    7b84:	mov	x22, #0x0                   	// #0
    7b88:	str	x0, [x1]
    7b8c:	mov	x0, x22
    7b90:	ldp	x19, x20, [sp, #16]
    7b94:	ldp	x21, x22, [sp, #32]
    7b98:	ldr	x23, [sp, #48]
    7b9c:	ldp	x29, x30, [sp], #208
    7ba0:	ret
    7ba4:	mov	x4, x6
    7ba8:	mov	x3, x5
    7bac:	add	x0, sp, #0x60
    7bb0:	add	x2, sp, #0x5c
    7bb4:	add	x1, sp, #0x4c
    7bb8:	bl	40 <FSE_readNCount>
    7bbc:	mov	x22, x0
    7bc0:	cmn	x0, #0x78
    7bc4:	b.hi	7ca0 <ZSTD_free+0x3f0>  // b.pmore
    7bc8:	ldr	w5, [sp, #92]
    7bcc:	cmp	w5, w20
    7bd0:	b.hi	7ca0 <ZSTD_free+0x3f0>  // b.pmore
    7bd4:	ldr	w2, [sp, #76]
    7bd8:	mov	x3, x21
    7bdc:	ldr	x4, [sp, #208]
    7be0:	add	x1, sp, #0x60
    7be4:	mov	x0, x19
    7be8:	bl	7950 <ZSTD_free+0xa0>
    7bec:	str	x19, [x23]
    7bf0:	b	7b8c <ZSTD_free+0x2dc>
    7bf4:	ldr	w0, [sp, #224]
    7bf8:	mov	x22, #0xffffffffffffffec    	// #-20
    7bfc:	cbz	w0, 7b8c <ZSTD_free+0x2dc>
    7c00:	ldr	w0, [sp, #232]
    7c04:	mov	x22, #0x0                   	// #0
    7c08:	cmp	w0, #0x0
    7c0c:	ldr	w0, [sp, #240]
    7c10:	ccmp	w0, #0x18, #0x4, ne  // ne = any
    7c14:	b.le	7b8c <ZSTD_free+0x2dc>
    7c18:	mov	w1, #0x1                   	// #1
    7c1c:	mov	x0, #0x0                   	// #0
    7c20:	lsl	w1, w1, w4
    7c24:	add	w1, w1, #0x1
    7c28:	ldr	x2, [x23]
    7c2c:	sbfiz	x1, x1, #3, #32
    7c30:	prfm	pldl2keep, [x2, x0]
    7c34:	add	x0, x0, #0x40
    7c38:	cmp	x1, x0
    7c3c:	b.hi	7c30 <ZSTD_free+0x380>  // b.pmore
    7c40:	mov	x22, #0x0                   	// #0
    7c44:	b	7b8c <ZSTD_free+0x2dc>
    7c48:	mov	x22, #0xffffffffffffffb8    	// #-72
    7c4c:	cbz	x6, 7b8c <ZSTD_free+0x2dc>
    7c50:	ldrb	w0, [x5]
    7c54:	mov	x22, #0xffffffffffffffec    	// #-20
    7c58:	cmp	w0, w3
    7c5c:	b.hi	7b8c <ZSTD_free+0x2dc>  // b.pmore
    7c60:	ldr	x2, [sp, #208]
    7c64:	mov	x22, #0x1                   	// #1
    7c68:	ldr	w1, [x7, x0, lsl #2]
    7c6c:	ldr	w0, [x2, x0, lsl #2]
    7c70:	str	xzr, [x19]
    7c74:	strh	wzr, [x19, #8]
    7c78:	strb	w0, [x19, #10]
    7c7c:	mov	x0, x22
    7c80:	strb	wzr, [x19, #11]
    7c84:	str	w1, [x19, #12]
    7c88:	str	x19, [x23]
    7c8c:	ldp	x19, x20, [sp, #16]
    7c90:	ldp	x21, x22, [sp, #32]
    7c94:	ldr	x23, [sp, #48]
    7c98:	ldp	x29, x30, [sp], #208
    7c9c:	ret
    7ca0:	mov	x22, #0xffffffffffffffec    	// #-20
    7ca4:	mov	x0, x22
    7ca8:	ldp	x19, x20, [sp, #16]
    7cac:	ldp	x21, x22, [sp, #32]
    7cb0:	ldr	x23, [sp, #48]
    7cb4:	ldp	x29, x30, [sp], #208
    7cb8:	ret
    7cbc:	nop
    7cc0:	cmp	x2, #0x8
    7cc4:	b.ls	7e8c <ZSTD_free+0x5dc>  // b.plast
    7cc8:	stp	x29, x30, [sp, #-192]!
    7ccc:	mov	x4, #0x2818                	// #10264
    7cd0:	mov	x29, sp
    7cd4:	stp	x19, x20, [sp, #16]
    7cd8:	mov	x20, x0
    7cdc:	mov	x19, x2
    7ce0:	stp	x21, x22, [sp, #32]
    7ce4:	add	x22, x1, #0x8
    7ce8:	mov	x21, x1
    7cec:	add	x0, x0, x4
    7cf0:	mov	x1, x22
    7cf4:	mov	x3, x20
    7cf8:	sub	x2, x2, #0x8
    7cfc:	bl	5100 <HUF_readDTableX2_wksp>
    7d00:	cmn	x0, #0x78
    7d04:	b.hi	7e78 <ZSTD_free+0x5c8>  // b.pmore
    7d08:	mov	w5, #0x1f                  	// #31
    7d0c:	add	x22, x22, x0
    7d10:	add	x19, x21, x19
    7d14:	mov	x3, x22
    7d18:	sub	x4, x19, x22
    7d1c:	add	x2, sp, #0x4c
    7d20:	add	x1, sp, #0x48
    7d24:	add	x0, sp, #0x50
    7d28:	str	w5, [sp, #72]
    7d2c:	bl	40 <FSE_readNCount>
    7d30:	cmn	x0, #0x78
    7d34:	b.hi	7e78 <ZSTD_free+0x5c8>  // b.pmore
    7d38:	ldr	w2, [sp, #72]
    7d3c:	cmp	w2, #0x1f
    7d40:	b.hi	7e78 <ZSTD_free+0x5c8>  // b.pmore
    7d44:	ldr	w5, [sp, #76]
    7d48:	cmp	w5, #0x8
    7d4c:	b.hi	7e78 <ZSTD_free+0x5c8>  // b.pmore
    7d50:	adrp	x1, 0 <FSE_versionNumber>
    7d54:	stp	x23, x24, [sp, #48]
    7d58:	mov	x7, #0x1008                	// #4104
    7d5c:	ldr	x23, [x1]
    7d60:	add	x22, x22, x0
    7d64:	add	x1, sp, #0x50
    7d68:	add	x0, x20, x7
    7d6c:	add	x4, x23, #0x40
    7d70:	add	x3, x23, #0xc0
    7d74:	bl	7950 <ZSTD_free+0xa0>
    7d78:	mov	w5, #0x34                  	// #52
    7d7c:	sub	x4, x19, x22
    7d80:	mov	x3, x22
    7d84:	add	x2, sp, #0x4c
    7d88:	add	x1, sp, #0x48
    7d8c:	add	x0, sp, #0x50
    7d90:	str	w5, [sp, #72]
    7d94:	bl	40 <FSE_readNCount>
    7d98:	cmn	x0, #0x78
    7d9c:	b.hi	7e94 <ZSTD_free+0x5e4>  // b.pmore
    7da0:	ldr	w2, [sp, #72]
    7da4:	cmp	w2, #0x34
    7da8:	b.hi	7e94 <ZSTD_free+0x5e4>  // b.pmore
    7dac:	ldr	w5, [sp, #76]
    7db0:	cmp	w5, #0x9
    7db4:	b.hi	7e94 <ZSTD_free+0x5e4>  // b.pmore
    7db8:	mov	x6, #0x1810                	// #6160
    7dbc:	add	x22, x22, x0
    7dc0:	add	x4, x23, #0x140
    7dc4:	add	x0, x20, x6
    7dc8:	add	x3, x23, #0x218
    7dcc:	add	x1, sp, #0x50
    7dd0:	bl	7950 <ZSTD_free+0xa0>
    7dd4:	mov	w5, #0x23                  	// #35
    7dd8:	add	x2, sp, #0x4c
    7ddc:	add	x1, sp, #0x48
    7de0:	sub	x4, x19, x22
    7de4:	mov	x3, x22
    7de8:	add	x0, sp, #0x50
    7dec:	str	w5, [sp, #72]
    7df0:	bl	40 <FSE_readNCount>
    7df4:	mov	x24, x0
    7df8:	cmn	x0, #0x78
    7dfc:	b.hi	7e94 <ZSTD_free+0x5e4>  // b.pmore
    7e00:	ldr	w2, [sp, #72]
    7e04:	cmp	w2, #0x23
    7e08:	b.hi	7e94 <ZSTD_free+0x5e4>  // b.pmore
    7e0c:	ldr	w5, [sp, #76]
    7e10:	cmp	w5, #0x9
    7e14:	b.hi	7e94 <ZSTD_free+0x5e4>  // b.pmore
    7e18:	mov	x0, x20
    7e1c:	add	x1, sp, #0x50
    7e20:	add	x4, x23, #0x2f0
    7e24:	add	x3, x23, #0x380
    7e28:	add	x22, x22, x24
    7e2c:	bl	7950 <ZSTD_free+0xa0>
    7e30:	add	x0, x22, #0xc
    7e34:	cmp	x0, x19
    7e38:	b.hi	7e70 <ZSTD_free+0x5c0>  // b.pmore
    7e3c:	mov	x1, #0x681c                	// #26652
    7e40:	sub	x19, x19, x0
    7e44:	add	x20, x20, x1
    7e48:	ldr	w1, [x22], #4
    7e4c:	cmp	x19, w1, uxtw
    7e50:	cbz	w1, 7e70 <ZSTD_free+0x5c0>
    7e54:	b.ls	7e70 <ZSTD_free+0x5c0>  // b.plast
    7e58:	str	w1, [x20], #4
    7e5c:	cmp	x0, x22
    7e60:	b.ne	7e48 <ZSTD_free+0x598>  // b.any
    7e64:	sub	x0, x0, x21
    7e68:	ldp	x23, x24, [sp, #48]
    7e6c:	b	7e7c <ZSTD_free+0x5cc>
    7e70:	ldp	x23, x24, [sp, #48]
    7e74:	nop
    7e78:	mov	x0, #0xffffffffffffffe2    	// #-30
    7e7c:	ldp	x19, x20, [sp, #16]
    7e80:	ldp	x21, x22, [sp, #32]
    7e84:	ldp	x29, x30, [sp], #192
    7e88:	ret
    7e8c:	mov	x0, #0xffffffffffffffe2    	// #-30
    7e90:	ret
    7e94:	mov	x0, #0xffffffffffffffe2    	// #-30
    7e98:	ldp	x19, x20, [sp, #16]
    7e9c:	ldp	x21, x22, [sp, #32]
    7ea0:	ldp	x23, x24, [sp, #48]
    7ea4:	ldp	x29, x30, [sp], #192
    7ea8:	ret
    7eac:	nop
	...
    7eb8:	stp	x29, x30, [sp, #-80]!
    7ebc:	cmp	x1, #0x0
    7ec0:	ccmp	w3, #0x1, #0x4, ne  // ne = any
    7ec4:	mov	x29, sp
    7ec8:	stp	x19, x20, [sp, #16]
    7ecc:	mov	x20, x1
    7ed0:	mov	x19, x0
    7ed4:	stp	x21, x22, [sp, #32]
    7ed8:	mov	x21, x2
    7edc:	mov	w22, w4
    7ee0:	b.eq	7f1c <ZSTD_free+0x66c>  // b.none
    7ee4:	cbnz	x2, 7f5c <ZSTD_free+0x6ac>
    7ee8:	mov	w0, #0xc                   	// #12
    7eec:	stp	xzr, x1, [x19]
    7ef0:	movk	w0, #0xc00, lsl #16
    7ef4:	str	xzr, [x19, #16]
    7ef8:	cmp	w4, #0x1
    7efc:	str	w0, [x19, #10288]
    7f00:	str	xzr, [x19, #26688]
    7f04:	b.ne	7fd0 <ZSTD_free+0x720>  // b.any
    7f08:	mov	x0, #0x0                   	// #0
    7f0c:	ldp	x19, x20, [sp, #16]
    7f10:	ldp	x21, x22, [sp, #32]
    7f14:	ldp	x29, x30, [sp], #80
    7f18:	ret
    7f1c:	stp	xzr, x1, [x0]
    7f20:	cbnz	x1, 7f94 <ZSTD_free+0x6e4>
    7f24:	mov	w0, #0xc                   	// #12
    7f28:	str	xzr, [x19, #16]
    7f2c:	movk	w0, #0xc00, lsl #16
    7f30:	str	w0, [x19, #10288]
    7f34:	str	xzr, [x19, #26688]
    7f38:	cmp	w4, #0x1
    7f3c:	b.eq	7f08 <ZSTD_free+0x658>  // b.none
    7f40:	cmp	w22, #0x2
    7f44:	b.ne	7f08 <ZSTD_free+0x658>  // b.any
    7f48:	mov	x0, #0xffffffffffffffe2    	// #-30
    7f4c:	ldp	x19, x20, [sp, #16]
    7f50:	ldp	x21, x22, [sp, #32]
    7f54:	ldp	x29, x30, [sp], #80
    7f58:	ret
    7f5c:	mov	x0, #0x6800                	// #26624
    7f60:	add	x2, x19, x0
    7f64:	add	x1, sp, #0x30
    7f68:	mov	x0, x21
    7f6c:	ldp	x4, x5, [x2, #72]
    7f70:	stp	x4, x5, [sp, #48]
    7f74:	ldr	x2, [x19, #26712]
    7f78:	str	x2, [sp, #64]
    7f7c:	bl	7840 <ZSTD_malloc>
    7f80:	stp	x0, x0, [x19]
    7f84:	cbz	x0, 8010 <ZSTD_free+0x760>
    7f88:	mov	x1, x20
    7f8c:	mov	x2, x21
    7f90:	bl	0 <grub_memmove>
    7f94:	mov	w0, #0xc                   	// #12
    7f98:	str	x21, [x19, #16]
    7f9c:	movk	w0, #0xc00, lsl #16
    7fa0:	str	w0, [x19, #10288]
    7fa4:	str	xzr, [x19, #26688]
    7fa8:	cmp	w22, #0x1
    7fac:	b.eq	7f08 <ZSTD_free+0x658>  // b.none
    7fb0:	cmp	x21, #0x7
    7fb4:	b.ls	7fd0 <ZSTD_free+0x720>  // b.plast
    7fb8:	ldr	x1, [x19, #8]
    7fbc:	mov	w0, #0xa437                	// #42039
    7fc0:	movk	w0, #0xec30, lsl #16
    7fc4:	ldr	w2, [x1]
    7fc8:	cmp	w2, w0
    7fcc:	b.eq	7fe0 <ZSTD_free+0x730>  // b.none
    7fd0:	cmp	w22, #0x2
    7fd4:	b.ne	7f08 <ZSTD_free+0x658>  // b.any
    7fd8:	mov	x0, #0xffffffffffffffe2    	// #-30
    7fdc:	b	7f4c <ZSTD_free+0x69c>
    7fe0:	add	x20, x19, #0x4, lsl #12
    7fe4:	ldr	w3, [x1, #4]
    7fe8:	mov	x2, x21
    7fec:	add	x0, x19, #0x18
    7ff0:	str	w3, [x20, #10304]
    7ff4:	bl	7cc0 <ZSTD_free+0x410>
    7ff8:	cmn	x0, #0x78
    7ffc:	b.hi	7f48 <ZSTD_free+0x698>  // b.pmore
    8000:	mov	w1, #0x1                   	// #1
    8004:	mov	x0, #0x0                   	// #0
    8008:	str	w1, [x20, #10308]
    800c:	b	7f0c <ZSTD_free+0x65c>
    8010:	mov	x0, #0xffffffffffffffc0    	// #-64
    8014:	b	7f0c <ZSTD_free+0x65c>
    8018:	stp	x29, x30, [sp, #-112]!
    801c:	mov	x29, sp
    8020:	stp	x19, x20, [sp, #16]
    8024:	mov	x20, x0
    8028:	ldr	x19, [x5]
    802c:	stp	x21, x22, [sp, #32]
    8030:	stp	x25, x26, [sp, #64]
    8034:	add	x25, x2, x3
    8038:	add	x22, x0, x25
    803c:	cmp	x22, x1
    8040:	add	x0, x19, x2
    8044:	b.hi	81b4 <ZSTD_free+0x904>  // b.pmore
    8048:	cmp	x0, x6
    804c:	b.hi	8198 <ZSTD_free+0x8e8>  // b.pmore
    8050:	stp	x27, x28, [sp, #80]
    8054:	add	x21, x20, x2
    8058:	sub	x28, x1, #0x8
    805c:	cmp	x21, x28
    8060:	b.ls	81d0 <ZSTD_free+0x920>  // b.plast
    8064:	stp	x23, x24, [sp, #48]
    8068:	mov	x27, x5
    806c:	mov	x23, x3
    8070:	mov	x24, x4
    8074:	mov	x26, x7
    8078:	cmp	x20, x28
    807c:	b.cs	8184 <ZSTD_free+0x8d4>  // b.hs, b.nlast
    8080:	sub	x0, x28, x20
    8084:	str	x0, [sp, #104]
    8088:	mov	x1, x19
    808c:	mov	x0, x20
    8090:	mov	x2, #0x8                   	// #8
    8094:	add	x20, x20, x2
    8098:	bl	0 <grub_memmove>
    809c:	add	x19, x19, #0x8
    80a0:	cmp	x28, x20
    80a4:	b.hi	8088 <ZSTD_free+0x7d8>  // b.pmore
    80a8:	ldr	x19, [x27]
    80ac:	mov	x20, x28
    80b0:	ldr	x0, [sp, #104]
    80b4:	add	x19, x19, x0
    80b8:	mov	x0, x20
    80bc:	b	80c4 <ZSTD_free+0x814>
    80c0:	ldr	x19, [x27]
    80c4:	add	x1, x19, #0x1
    80c8:	str	x1, [x27]
    80cc:	ldrb	w1, [x19]
    80d0:	strb	w1, [x0], #1
    80d4:	cmp	x21, x0
    80d8:	b.hi	80c0 <ZSTD_free+0x810>  // b.pmore
    80dc:	add	x1, x20, #0x1
    80e0:	sub	x0, x21, x20
    80e4:	cmp	x21, x1
    80e8:	csinc	x0, x0, xzr, cs  // cs = hs, nlast
    80ec:	add	x20, x20, x0
    80f0:	sub	x0, x21, x26
    80f4:	sub	x2, x21, x24
    80f8:	cmp	x0, x24
    80fc:	b.cs	813c <ZSTD_free+0x88c>  // b.hs, b.nlast
    8100:	ldr	x0, [sp, #112]
    8104:	sub	x0, x21, x0
    8108:	cmp	x0, x24
    810c:	b.cc	8190 <ZSTD_free+0x8e0>  // b.lo, b.ul, b.last
    8110:	ldr	x0, [sp, #120]
    8114:	sub	x2, x26, x2
    8118:	ldr	x3, [sp, #120]
    811c:	sub	x1, x0, x2
    8120:	add	x0, x1, x23
    8124:	cmp	x3, x0
    8128:	b.cs	81f0 <ZSTD_free+0x940>  // b.hs, b.nlast
    812c:	add	x20, x21, x2
    8130:	mov	x0, x21
    8134:	bl	0 <grub_memmove>
    8138:	mov	x2, x26
    813c:	cmp	x22, x20
    8140:	b.ls	8164 <ZSTD_free+0x8b4>  // b.plast
    8144:	sub	x22, x22, x20
    8148:	mov	x0, #0x0                   	// #0
    814c:	nop
    8150:	ldrb	w1, [x2, x0]
    8154:	strb	w1, [x20, x0]
    8158:	add	x0, x0, #0x1
    815c:	cmp	x0, x22
    8160:	b.ne	8150 <ZSTD_free+0x8a0>  // b.any
    8164:	ldp	x23, x24, [sp, #48]
    8168:	ldp	x27, x28, [sp, #80]
    816c:	mov	x0, x25
    8170:	ldp	x19, x20, [sp, #16]
    8174:	ldp	x21, x22, [sp, #32]
    8178:	ldp	x25, x26, [sp, #64]
    817c:	ldp	x29, x30, [sp], #112
    8180:	ret
    8184:	cmp	x20, x21
    8188:	b.cc	80b8 <ZSTD_free+0x808>  // b.lo, b.ul, b.last
    818c:	b	80f0 <ZSTD_free+0x840>
    8190:	ldp	x23, x24, [sp, #48]
    8194:	ldp	x27, x28, [sp, #80]
    8198:	mov	x25, #0xffffffffffffffec    	// #-20
    819c:	mov	x0, x25
    81a0:	ldp	x19, x20, [sp, #16]
    81a4:	ldp	x21, x22, [sp, #32]
    81a8:	ldp	x25, x26, [sp, #64]
    81ac:	ldp	x29, x30, [sp], #112
    81b0:	ret
    81b4:	mov	x25, #0xffffffffffffffba    	// #-70
    81b8:	mov	x0, x25
    81bc:	ldp	x19, x20, [sp, #16]
    81c0:	ldp	x21, x22, [sp, #32]
    81c4:	ldp	x25, x26, [sp, #64]
    81c8:	ldp	x29, x30, [sp], #112
    81cc:	ret
    81d0:	mov	x25, #0xffffffffffffffff    	// #-1
    81d4:	mov	x0, x25
    81d8:	ldp	x19, x20, [sp, #16]
    81dc:	ldp	x21, x22, [sp, #32]
    81e0:	ldp	x25, x26, [sp, #64]
    81e4:	ldp	x27, x28, [sp, #80]
    81e8:	ldp	x29, x30, [sp], #112
    81ec:	ret
    81f0:	mov	x2, x23
    81f4:	mov	x0, x21
    81f8:	bl	0 <grub_memmove>
    81fc:	ldp	x23, x24, [sp, #48]
    8200:	ldp	x27, x28, [sp, #80]
    8204:	b	816c <ZSTD_free+0x8bc>
    8208:	stp	x29, x30, [sp, #-96]!
    820c:	mov	x29, sp
    8210:	str	x19, [sp, #16]
    8214:	mov	x19, x0
    8218:	mov	x0, #0x6800                	// #26624
    821c:	add	x2, x19, x0
    8220:	add	x1, sp, #0x20
    8224:	ldr	x0, [x19]
    8228:	ldp	x4, x5, [x2, #72]
    822c:	stp	x4, x5, [sp, #72]
    8230:	ldr	x2, [x19, #26712]
    8234:	stp	x4, x5, [sp, #32]
    8238:	str	x2, [sp, #48]
    823c:	str	x2, [sp, #88]
    8240:	bl	78b0 <ZSTD_free>
    8244:	ldp	x4, x5, [sp, #72]
    8248:	mov	x0, x19
    824c:	ldr	x2, [sp, #88]
    8250:	add	x1, sp, #0x20
    8254:	stp	x4, x5, [sp, #32]
    8258:	str	x2, [sp, #48]
    825c:	bl	78b0 <ZSTD_free>
    8260:	ldr	x19, [sp, #16]
    8264:	ldp	x29, x30, [sp], #96
    8268:	ret
    826c:	nop
    8270:	stp	x29, x30, [sp, #-96]!
    8274:	add	x1, x0, #0x7, lsl #12
    8278:	mov	x29, sp
    827c:	ldp	x2, x3, [x1, #288]
    8280:	str	x19, [sp, #16]
    8284:	mov	x19, x0
    8288:	stp	x2, x3, [sp, #72]
    828c:	ldr	x0, [x0, #29016]
    8290:	ldr	x1, [x19, #28976]
    8294:	str	x1, [sp, #88]
    8298:	cbz	x0, 82a0 <ZSTD_free+0x9f0>
    829c:	bl	8208 <ZSTD_free+0x958>
    82a0:	ldp	x4, x5, [sp, #72]
    82a4:	str	xzr, [x19, #29016]
    82a8:	ldr	x2, [sp, #88]
    82ac:	add	x1, sp, #0x20
    82b0:	ldr	x0, [x19, #29048]
    82b4:	stp	x4, x5, [sp, #32]
    82b8:	str	x2, [sp, #48]
    82bc:	bl	78b0 <ZSTD_free>
    82c0:	str	xzr, [x19, #29048]
    82c4:	ldp	x4, x5, [sp, #72]
    82c8:	add	x1, sp, #0x20
    82cc:	ldr	x2, [sp, #88]
    82d0:	mov	x0, x19
    82d4:	stp	x4, x5, [sp, #32]
    82d8:	str	x2, [sp, #48]
    82dc:	bl	78b0 <ZSTD_free>
    82e0:	mov	x0, #0x0                   	// #0
    82e4:	ldr	x19, [sp, #16]
    82e8:	ldp	x29, x30, [sp], #96
    82ec:	ret
    82f0:	ldr	x5, [x2]
    82f4:	ldr	w6, [x2, #8]
    82f8:	ldr	w4, [x3, #4]
    82fc:	lsl	x5, x5, x6
    8300:	mvn	w7, w4
    8304:	lsr	x5, x5, #1
    8308:	add	w4, w4, w6
    830c:	str	w4, [x2, #8]
    8310:	cmp	w4, #0x40
    8314:	lsr	x5, x5, x7
    8318:	str	x5, [x0]
    831c:	b.hi	8370 <ZSTD_free+0xac0>  // b.pmore
    8320:	ldr	x0, [x2, #16]
    8324:	ldr	x5, [x2, #32]
    8328:	cmp	x0, x5
    832c:	b.cs	837c <ZSTD_free+0xacc>  // b.hs, b.nlast
    8330:	ldr	x6, [x2, #24]
    8334:	cmp	x0, x6
    8338:	b.eq	8370 <ZSTD_free+0xac0>  // b.none
    833c:	lsr	w5, w4, #3
    8340:	lsr	w7, w4, #3
    8344:	sub	x5, x0, x5
    8348:	cmp	x6, x5
    834c:	b.ls	835c <ZSTD_free+0xaac>  // b.plast
    8350:	sub	x5, x0, x6
    8354:	mov	w7, w5
    8358:	sub	x5, x0, w5, uxtw
    835c:	ldr	x0, [x5]
    8360:	sub	w4, w4, w7, lsl #3
    8364:	str	x0, [x2]
    8368:	str	w4, [x2, #8]
    836c:	str	x5, [x2, #16]
    8370:	add	x3, x3, #0x8
    8374:	str	x3, [x1]
    8378:	ret
    837c:	lsr	w5, w4, #3
    8380:	and	w4, w4, #0x7
    8384:	sub	x0, x0, x5
    8388:	str	x0, [x2, #16]
    838c:	str	w4, [x2, #8]
    8390:	add	x3, x3, #0x8
    8394:	ldr	x0, [x0]
    8398:	str	x0, [x2]
    839c:	str	x3, [x1]
    83a0:	ret
    83a4:	nop
    83a8:	sub	sp, sp, #0x210
    83ac:	add	x2, x1, x2
    83b0:	mov	x8, x0
    83b4:	mov	x7, x1
    83b8:	stp	x29, x30, [sp, #16]
    83bc:	add	x29, sp, #0x10
    83c0:	stp	x2, x1, [sp, #120]
    83c4:	ldr	x1, [x0, #28952]
    83c8:	stp	x25, x26, [sp, #80]
    83cc:	ldr	x0, [x0, #28984]
    83d0:	stp	x27, x28, [sp, #96]
    83d4:	add	x0, x1, x0
    83d8:	str	x0, [sp, #136]
    83dc:	str	w5, [sp, #240]
    83e0:	str	x1, [sp, #256]
    83e4:	cbz	w5, 8480 <ZSTD_free+0xbd0>
    83e8:	ldr	x1, [x8, #28752]
    83ec:	add	x2, x8, #0x4, lsl #12
    83f0:	ldr	x9, [x8, #28768]
    83f4:	stp	x1, x9, [sp, #144]
    83f8:	ldr	w6, [x2, #10300]
    83fc:	stp	x1, x9, [sp, #504]
    8400:	sub	x1, x7, x1
    8404:	mov	x7, x2
    8408:	ldr	w5, [x2, #10304]
    840c:	mov	w0, #0x1                   	// #1
    8410:	str	x2, [sp, #200]
    8414:	ldr	w2, [x2, #10308]
    8418:	str	x1, [sp, #520]
    841c:	ldr	x1, [x8, #28760]
    8420:	str	x1, [sp, #160]
    8424:	stp	x6, x5, [sp, #480]
    8428:	str	x2, [sp, #496]
    842c:	str	w0, [x7, #12460]
    8430:	cbz	x4, 8b1c <ZSTD_free+0x126c>
    8434:	add	x0, x3, x4
    8438:	add	x1, x3, #0x8
    843c:	stp	x3, x1, [sp, #416]
    8440:	cmp	x4, #0x7
    8444:	ldurb	w0, [x0, #-1]
    8448:	b.ls	8764 <ZSTD_free+0xeb4>  // b.plast
    844c:	sub	x1, x4, #0x8
    8450:	add	x2, x3, x1
    8454:	str	x2, [sp, #408]
    8458:	ldr	x1, [x3, x1]
    845c:	str	x1, [sp, #392]
    8460:	cbz	w0, 8748 <ZSTD_free+0xe98>
    8464:	clz	w0, w0
    8468:	cmn	x4, #0x78
    846c:	sub	w0, w0, #0x17
    8470:	str	w0, [sp, #400]
    8474:	b.hi	8748 <ZSTD_free+0xe98>  // b.pmore
    8478:	stp	x19, x20, [sp, #32]
    847c:	b	87c8 <ZSTD_free+0xf18>
    8480:	ldr	x26, [sp, #128]
    8484:	stp	x19, x20, [sp, #32]
    8488:	mov	x27, #0xffffffffffffffba    	// #-70
    848c:	ldr	x0, [sp, #136]
    8490:	sub	x19, x0, x1
    8494:	ldr	x0, [sp, #120]
    8498:	sub	x2, x0, x26
    849c:	cmp	x19, x2
    84a0:	b.hi	8b00 <ZSTD_free+0x1250>  // b.pmore
    84a4:	mov	x2, x19
    84a8:	mov	x0, x26
    84ac:	bl	0 <grub_memmove>
    84b0:	add	x10, x26, x19
    84b4:	ldp	x19, x20, [sp, #32]
    84b8:	ldr	x0, [sp, #128]
    84bc:	sub	x27, x10, x0
    84c0:	mov	x0, x27
    84c4:	ldp	x29, x30, [sp, #16]
    84c8:	ldp	x25, x26, [sp, #80]
    84cc:	ldp	x27, x28, [sp, #96]
    84d0:	add	sp, sp, #0x210
    84d4:	ret
    84d8:	cbz	w26, 84e0 <ZSTD_free+0xc30>
    84dc:	str	x7, [sp, #408]
    84e0:	cbz	w10, 84e8 <ZSTD_free+0xc38>
    84e4:	str	x3, [sp, #520]
    84e8:	ldr	w0, [sp, #400]
    84ec:	ldr	x26, [sp, #128]
    84f0:	cmp	w0, #0x40
    84f4:	b.hi	9098 <ZSTD_free+0x17e8>  // b.pmore
    84f8:	ldr	x1, [sp, #120]
    84fc:	mov	w23, w8
    8500:	str	w9, [sp, #244]
    8504:	sub	x2, x1, #0x8
    8508:	sub	x1, x1, #0xd
    850c:	str	x2, [sp, #184]
    8510:	str	x1, [sp, #232]
    8514:	ldr	x1, [sp, #408]
    8518:	cmp	x1, x25
    851c:	b.cs	8e3c <ZSTD_free+0x158c>  // b.hs, b.nlast
    8520:	ldr	x3, [sp, #416]
    8524:	cmp	x1, x3
    8528:	b.eq	8560 <ZSTD_free+0xcb0>  // b.none
    852c:	lsr	w2, w0, #3
    8530:	lsr	w4, w0, #3
    8534:	sub	x2, x1, x2
    8538:	cmp	x3, x2
    853c:	b.ls	854c <ZSTD_free+0xc9c>  // b.plast
    8540:	sub	x2, x1, x3
    8544:	mov	w4, w2
    8548:	sub	x2, x1, w2, uxtw
    854c:	ldr	x1, [x2]
    8550:	sub	w0, w0, w4, lsl #3
    8554:	str	x1, [sp, #392]
    8558:	str	w0, [sp, #400]
    855c:	str	x2, [sp, #408]
    8560:	ldr	w0, [sp, #240]
    8564:	cmp	w0, w23
    8568:	b.le	9140 <ZSTD_free+0x1890>
    856c:	ldp	x5, x9, [sp, #448]
    8570:	ldp	x3, x13, [sp, #432]
    8574:	ldp	x4, x14, [sp, #464]
    8578:	lsl	x5, x5, #3
    857c:	add	x10, x9, x5
    8580:	lsl	x3, x3, #3
    8584:	add	x6, x13, x3
    8588:	lsl	x4, x4, #3
    858c:	ldrb	w0, [x10, #2]
    8590:	add	x7, x14, x4
    8594:	ldrb	w8, [x6, #2]
    8598:	ldr	w21, [x6, #4]
    859c:	ldrb	w2, [x7, #2]
    85a0:	ldr	w16, [x7, #4]
    85a4:	add	w1, w8, w2
    85a8:	add	w1, w1, w0
    85ac:	ldr	x15, [sp, #480]
    85b0:	cbnz	w0, 8d2c <ZSTD_free+0x147c>
    85b4:	cbz	w21, 9034 <ZSTD_free+0x1784>
    85b8:	ldr	w12, [sp, #400]
    85bc:	mov	w0, w12
    85c0:	mov	x27, x15
    85c4:	mov	w11, w16
    85c8:	str	x11, [sp, #112]
    85cc:	cbnz	w2, 8d74 <ZSTD_free+0x14c4>
    85d0:	cmp	w1, #0x1e
    85d4:	b.hi	8da0 <ZSTD_free+0x14f0>  // b.pmore
    85d8:	ldr	x2, [sp, #392]
    85dc:	and	w1, w0, #0x3f
    85e0:	mov	w21, w21
    85e4:	lsl	x1, x2, x1
    85e8:	cbnz	w8, 8e20 <ZSTD_free+0x1570>
    85ec:	ldrb	w12, [x6, #3]
    85f0:	ubfiz	x11, x23, #5, #2
    85f4:	ldrh	w6, [x13, x3]
    85f8:	mov	w3, #0x3f                  	// #63
    85fc:	add	w0, w12, w0
    8600:	str	w0, [sp, #400]
    8604:	sub	w12, w3, w12
    8608:	lsr	x1, x1, #1
    860c:	ldrb	w7, [x7, #3]
    8610:	lsl	x3, x2, x0
    8614:	ldrh	w8, [x14, x4]
    8618:	mov	w4, #0x3f                  	// #63
    861c:	add	w0, w0, w7
    8620:	str	w0, [sp, #400]
    8624:	ldr	x13, [sp, #176]
    8628:	lsl	x2, x2, x0
    862c:	ldrb	w10, [x10, #3]
    8630:	sub	w7, w4, w7
    8634:	add	x22, x13, x11
    8638:	ldrh	w9, [x9, x5]
    863c:	add	w0, w0, w10
    8640:	str	w0, [sp, #400]
    8644:	ldr	x19, [sp, #520]
    8648:	lsr	x4, x1, x12
    864c:	ldr	x0, [sp, #112]
    8650:	lsr	x2, x2, #1
    8654:	mov	w1, #0x3f                  	// #63
    8658:	sub	w1, w1, w10
    865c:	ldr	x20, [x13, x11]
    8660:	add	x4, x4, w6, uxth
    8664:	ldr	x25, [x22, #8]
    8668:	add	x19, x21, x19
    866c:	lsr	x3, x3, #1
    8670:	add	x0, x19, x0
    8674:	ldr	x6, [sp, #504]
    8678:	lsr	x2, x2, x1
    867c:	ldr	x5, [sp, #512]
    8680:	cmp	x19, x27
    8684:	add	x2, x2, w9, uxth
    8688:	lsr	x3, x3, x7
    868c:	add	x7, x20, x25
    8690:	str	x0, [sp, #520]
    8694:	ldr	x0, [sp, #120]
    8698:	add	x3, x3, w8, uxth
    869c:	ldr	x1, [sp, #256]
    86a0:	str	x7, [sp, #168]
    86a4:	str	x4, [sp, #432]
    86a8:	add	x4, x26, x7
    86ac:	str	x2, [sp, #448]
    86b0:	csel	x2, x5, x6, cc  // cc = lo, ul, last
    86b4:	stp	x2, x4, [sp, #208]
    86b8:	add	x28, x1, x20
    86bc:	cmp	x0, x4
    86c0:	str	x3, [sp, #464]
    86c4:	b.cc	8ed8 <ZSTD_free+0x1628>  // b.lo, b.ul, b.last
    86c8:	ldr	x0, [sp, #136]
    86cc:	cmp	x0, x28
    86d0:	b.cc	8738 <ZSTD_free+0xe88>  // b.lo, b.ul, b.last
    86d4:	ldr	x0, [sp, #184]
    86d8:	add	x24, x26, x20
    86dc:	cmp	x24, x0
    86e0:	ldr	x0, [x22, #16]
    86e4:	str	x0, [sp, #192]
    86e8:	b.hi	8eec <ZSTD_free+0x163c>  // b.pmore
    86ec:	ldr	x3, [x22, #24]
    86f0:	mov	x0, x26
    86f4:	mov	x2, #0x8                   	// #8
    86f8:	str	x3, [sp, #224]
    86fc:	bl	0 <grub_memmove>
    8700:	cmp	x20, #0x8
    8704:	b.hi	9050 <ZSTD_free+0x17a0>  // b.pmore
    8708:	ldr	x0, [sp, #144]
    870c:	str	x28, [sp, #256]
    8710:	ldr	x1, [sp, #192]
    8714:	sub	x0, x24, x0
    8718:	cmp	x1, x0
    871c:	b.ls	8e68 <ZSTD_free+0x15b8>  // b.plast
    8720:	ldr	x0, [sp, #160]
    8724:	ldr	x1, [sp, #192]
    8728:	sub	x0, x24, x0
    872c:	cmp	x1, x0
    8730:	b.ls	8f6c <ZSTD_free+0x16bc>  // b.plast
    8734:	nop
    8738:	ldp	x19, x20, [sp, #32]
    873c:	ldp	x21, x22, [sp, #48]
    8740:	ldp	x23, x24, [sp, #64]
    8744:	nop
    8748:	mov	x27, #0xffffffffffffffec    	// #-20
    874c:	mov	x0, x27
    8750:	ldp	x29, x30, [sp, #16]
    8754:	ldp	x25, x26, [sp, #80]
    8758:	ldp	x27, x28, [sp, #96]
    875c:	add	sp, sp, #0x210
    8760:	ret
    8764:	ldrb	w1, [x3]
    8768:	cmp	x4, #0x5
    876c:	str	x1, [sp, #392]
    8770:	str	x3, [sp, #408]
    8774:	b.eq	8adc <ZSTD_free+0x122c>  // b.none
    8778:	b.hi	8ac4 <ZSTD_free+0x1214>  // b.pmore
    877c:	cmp	x4, #0x3
    8780:	b.eq	8794 <ZSTD_free+0xee4>  // b.none
    8784:	cmp	x4, #0x4
    8788:	b.ne	8ae8 <ZSTD_free+0x1238>  // b.any
    878c:	ldrb	w2, [x3, #3]
    8790:	add	x1, x1, x2, lsl #24
    8794:	ldrb	w2, [x3, #2]
    8798:	add	x1, x1, x2, lsl #16
    879c:	ldrb	w2, [x3, #1]
    87a0:	add	x1, x1, x2, lsl #8
    87a4:	str	x1, [sp, #392]
    87a8:	cbz	w0, 8748 <ZSTD_free+0xe98>
    87ac:	mov	w1, #0x9                   	// #9
    87b0:	sub	w4, w1, w4
    87b4:	clz	w0, w0
    87b8:	stp	x19, x20, [sp, #32]
    87bc:	add	w0, w0, w4, lsl #3
    87c0:	sub	w0, w0, #0x1f
    87c4:	str	w0, [sp, #400]
    87c8:	ldr	w0, [sp, #240]
    87cc:	mov	w19, #0x4                   	// #4
    87d0:	ldr	x3, [x8]
    87d4:	cmp	w0, #0x4
    87d8:	csel	w9, w0, w19, le
    87dc:	add	x2, sp, #0x188
    87e0:	add	x1, x2, #0x30
    87e4:	add	x0, x2, #0x28
    87e8:	bl	82f0 <ZSTD_free+0xa40>
    87ec:	ldr	x3, [x8, #16]
    87f0:	add	x2, sp, #0x188
    87f4:	add	x1, x2, #0x40
    87f8:	add	x0, x2, #0x38
    87fc:	bl	82f0 <ZSTD_free+0xa40>
    8800:	ldr	x3, [x8, #8]
    8804:	add	x2, sp, #0x188
    8808:	add	x0, x2, #0x48
    880c:	add	x1, x2, #0x50
    8810:	bl	82f0 <ZSTD_free+0xa40>
    8814:	ldr	w0, [sp, #400]
    8818:	cmp	w0, #0x40
    881c:	b.hi	8f64 <ZSTD_free+0x16b4>  // b.pmore
    8820:	add	x1, sp, #0x108
    8824:	mov	w10, #0x0                   	// #0
    8828:	ldp	x30, x28, [sp, #504]
    882c:	mov	x4, x1
    8830:	mov	w26, #0x0                   	// #0
    8834:	mov	w8, #0x0                   	// #0
    8838:	mov	w19, #0x3f                  	// #63
    883c:	stp	x21, x22, [sp, #48]
    8840:	stp	x23, x24, [sp, #64]
    8844:	str	x28, [sp, #112]
    8848:	str	x1, [sp, #176]
    884c:	ldp	x7, x24, [sp, #408]
    8850:	ldr	x25, [sp, #424]
    8854:	ldr	x23, [sp, #440]
    8858:	ldr	x22, [sp, #456]
    885c:	ldr	x21, [sp, #472]
    8860:	ldr	x3, [sp, #520]
    8864:	b	894c <ZSTD_free+0x109c>
    8868:	cbz	w1, 8d10 <ZSTD_free+0x1460>
    886c:	ldr	w17, [sp, #400]
    8870:	mov	w0, w17
    8874:	mov	x20, x18
    8878:	mov	w2, w2
    887c:	cbnz	w15, 8a28 <ZSTD_free+0x1178>
    8880:	cmp	w13, #0x1e
    8884:	b.hi	8a4c <ZSTD_free+0x119c>  // b.pmore
    8888:	ldr	x13, [sp, #392]
    888c:	and	w15, w0, #0x3f
    8890:	mov	w1, w1
    8894:	lsl	x15, x13, x15
    8898:	cbnz	w14, 8aa8 <ZSTD_free+0x11f8>
    889c:	ldrb	w14, [x11, #3]
    88a0:	lsr	x15, x15, #1
    88a4:	ldrh	w11, [x23, x5]
    88a8:	add	x3, x3, x1
    88ac:	add	w0, w14, w0
    88b0:	str	w0, [sp, #400]
    88b4:	sub	w5, w19, w14
    88b8:	cmp	x3, x20
    88bc:	ldrb	w17, [x12, #3]
    88c0:	lsl	x14, x13, x0
    88c4:	ldrh	w6, [x21, x6]
    88c8:	lsr	x15, x15, x5
    88cc:	add	w0, w0, w17
    88d0:	str	w0, [sp, #400]
    88d4:	lsr	x14, x14, #1
    88d8:	sub	w17, w19, w17
    88dc:	ldrb	w12, [x16, #3]
    88e0:	lsl	x13, x13, x0
    88e4:	lsr	x13, x13, #1
    88e8:	ldrh	w10, [x22, x10]
    88ec:	sub	w5, w19, w12
    88f0:	sub	x16, x3, x20
    88f4:	lsr	x14, x14, x17
    88f8:	add	w0, w0, w12
    88fc:	lsr	x13, x13, x5
    8900:	add	x15, x15, w11, uxth
    8904:	ldr	x5, [sp, #112]
    8908:	add	x13, x13, w10, uxth
    890c:	add	x6, x14, w6, uxth
    8910:	stp	x1, x2, [x4]
    8914:	csel	x5, x30, x5, cs  // cs = hs, nlast
    8918:	add	x5, x5, x16
    891c:	str	x20, [x4, #16]
    8920:	str	x5, [x4, #24]
    8924:	add	w8, w8, #0x1
    8928:	str	w0, [sp, #400]
    892c:	add	x3, x3, x2
    8930:	str	x15, [sp, #432]
    8934:	cmp	w0, #0x40
    8938:	str	x13, [sp, #448]
    893c:	add	x4, x4, #0x20
    8940:	str	x6, [sp, #464]
    8944:	mov	w10, #0x1                   	// #1
    8948:	b.hi	8b54 <ZSTD_free+0x12a4>  // b.pmore
    894c:	cmp	x7, x25
    8950:	b.cs	8b34 <ZSTD_free+0x1284>  // b.hs, b.nlast
    8954:	cmp	x7, x24
    8958:	b.eq	8994 <ZSTD_free+0x10e4>  // b.none
    895c:	lsr	w1, w0, #3
    8960:	lsr	w12, w0, #3
    8964:	sub	x1, x7, x1
    8968:	cmp	x24, x1
    896c:	b.ls	897c <ZSTD_free+0x10cc>  // b.plast
    8970:	sub	x1, x7, x24
    8974:	mov	w12, w1
    8978:	sub	x1, x7, w1, uxtw
    897c:	mov	x7, x1
    8980:	sub	w0, w0, w12, lsl #3
    8984:	ldr	x2, [x1]
    8988:	mov	w26, #0x1                   	// #1
    898c:	str	x2, [sp, #392]
    8990:	str	w0, [sp, #400]
    8994:	cmp	w9, w8
    8998:	b.le	84d8 <ZSTD_free+0xc28>
    899c:	ldr	x10, [sp, #448]
    89a0:	ldr	x5, [sp, #432]
    89a4:	ldr	x6, [sp, #464]
    89a8:	lsl	x10, x10, #3
    89ac:	lsl	x5, x5, #3
    89b0:	add	x16, x22, x10
    89b4:	add	x11, x23, x5
    89b8:	lsl	x6, x6, #3
    89bc:	add	x12, x21, x6
    89c0:	ldrb	w0, [x16, #2]
    89c4:	ldrb	w14, [x11, #2]
    89c8:	ldr	w1, [x11, #4]
    89cc:	ldrb	w15, [x12, #2]
    89d0:	ldr	w2, [x12, #4]
    89d4:	add	w13, w14, w15
    89d8:	add	w13, w13, w0
    89dc:	ldr	x18, [sp, #480]
    89e0:	cbz	w0, 8868 <ZSTD_free+0xfb8>
    89e4:	ldr	x28, [sp, #392]
    89e8:	neg	w27, w0
    89ec:	ldr	w17, [sp, #400]
    89f0:	cmp	w0, #0x1
    89f4:	ldr	w20, [x16, #4]
    89f8:	add	w0, w0, w17
    89fc:	str	w0, [sp, #400]
    8a00:	lsl	x17, x28, x17
    8a04:	lsr	x27, x17, x27
    8a08:	mov	w17, w0
    8a0c:	add	x20, x20, x27
    8a10:	b.eq	9330 <ZSTD_free+0x1a80>  // b.none
    8a14:	ldr	x17, [sp, #488]
    8a18:	stp	x20, x18, [sp, #480]
    8a1c:	mov	w2, w2
    8a20:	str	x17, [sp, #496]
    8a24:	cbz	w15, 8880 <ZSTD_free+0xfd0>
    8a28:	ldr	x17, [sp, #392]
    8a2c:	neg	w18, w15
    8a30:	cmp	w13, #0x1e
    8a34:	lsl	x17, x17, x0
    8a38:	add	w0, w0, w15
    8a3c:	str	w0, [sp, #400]
    8a40:	lsr	x15, x17, x18
    8a44:	add	x2, x2, x15
    8a48:	b.ls	8888 <ZSTD_free+0xfd8>  // b.plast
    8a4c:	cmp	w0, #0x40
    8a50:	b.hi	8888 <ZSTD_free+0xfd8>  // b.pmore
    8a54:	cmp	x25, x7
    8a58:	b.ls	8df8 <ZSTD_free+0x1548>  // b.plast
    8a5c:	cmp	x24, x7
    8a60:	b.eq	8888 <ZSTD_free+0xfd8>  // b.none
    8a64:	lsr	w13, w0, #3
    8a68:	lsr	w15, w0, #3
    8a6c:	sub	x13, x7, x13
    8a70:	cmp	x13, x24
    8a74:	b.cs	8e18 <ZSTD_free+0x1568>  // b.hs, b.nlast
    8a78:	sub	x13, x7, x24
    8a7c:	mov	w15, w13
    8a80:	sub	x7, x7, w13, uxtw
    8a84:	ldr	x13, [x7]
    8a88:	sub	w0, w0, w15, lsl #3
    8a8c:	and	w15, w0, #0x3f
    8a90:	str	x13, [sp, #392]
    8a94:	mov	w1, w1
    8a98:	mov	w26, #0x1                   	// #1
    8a9c:	lsl	x15, x13, x15
    8aa0:	cbz	w14, 889c <ZSTD_free+0xfec>
    8aa4:	nop
    8aa8:	neg	w17, w14
    8aac:	add	w0, w0, w14
    8ab0:	str	w0, [sp, #400]
    8ab4:	lsr	x15, x15, x17
    8ab8:	add	x1, x1, x15
    8abc:	lsl	x15, x13, x0
    8ac0:	b	889c <ZSTD_free+0xfec>
    8ac4:	cmp	x4, #0x6
    8ac8:	b.eq	8ad4 <ZSTD_free+0x1224>  // b.none
    8acc:	ldrb	w2, [x3, #6]
    8ad0:	add	x1, x1, x2, lsl #48
    8ad4:	ldrb	w2, [x3, #5]
    8ad8:	add	x1, x1, x2, lsl #40
    8adc:	ldrb	w2, [x3, #4]
    8ae0:	add	x1, x1, x2, lsl #32
    8ae4:	b	878c <ZSTD_free+0xedc>
    8ae8:	cmp	x4, #0x2
    8aec:	b.ne	87a8 <ZSTD_free+0xef8>  // b.any
    8af0:	ldrb	w2, [x3, #1]
    8af4:	add	x1, x1, x2, lsl #8
    8af8:	str	x1, [sp, #392]
    8afc:	b	87a8 <ZSTD_free+0xef8>
    8b00:	mov	x0, x27
    8b04:	ldp	x29, x30, [sp, #16]
    8b08:	ldp	x19, x20, [sp, #32]
    8b0c:	ldp	x25, x26, [sp, #80]
    8b10:	ldp	x27, x28, [sp, #96]
    8b14:	add	sp, sp, #0x210
    8b18:	ret
    8b1c:	add	x0, sp, #0x188
    8b20:	mov	x2, #0x28                  	// #40
    8b24:	mov	w1, #0x0                   	// #0
    8b28:	mov	x27, #0xffffffffffffffec    	// #-20
    8b2c:	bl	0 <grub_memset>
    8b30:	b	84c0 <ZSTD_free+0xc10>
    8b34:	lsr	w1, w0, #3
    8b38:	and	w0, w0, #0x7
    8b3c:	sub	x7, x7, x1
    8b40:	str	w0, [sp, #400]
    8b44:	mov	w26, #0x1                   	// #1
    8b48:	ldr	x0, [x7]
    8b4c:	str	x0, [sp, #392]
    8b50:	b	8994 <ZSTD_free+0x10e4>
    8b54:	cbz	w26, 8b5c <ZSTD_free+0x12ac>
    8b58:	str	x7, [sp, #408]
    8b5c:	ldp	x21, x22, [sp, #48]
    8b60:	str	x3, [sp, #520]
    8b64:	ldp	x23, x24, [sp, #64]
    8b68:	cmp	w9, w8
    8b6c:	b.le	8b7c <ZSTD_free+0x12cc>
    8b70:	mov	x27, #0xffffffffffffffec    	// #-20
    8b74:	ldp	x19, x20, [sp, #32]
    8b78:	b	874c <ZSTD_free+0xe9c>
    8b7c:	ldr	x26, [sp, #128]
    8b80:	ldr	w0, [sp, #240]
    8b84:	cmp	w0, w8
    8b88:	b.gt	8b70 <ZSTD_free+0x12c0>
    8b8c:	ldr	w0, [sp, #240]
    8b90:	sub	w19, w8, w9
    8b94:	ldr	x1, [sp, #256]
    8b98:	cmp	w0, w19
    8b9c:	b.le	92b8 <ZSTD_free+0x1a08>
    8ba0:	add	x3, sp, #0x108
    8ba4:	ubfiz	x2, x19, #5, #2
    8ba8:	add	x0, x3, x2
    8bac:	stp	x21, x22, [sp, #48]
    8bb0:	ldr	x28, [x3, x2]
    8bb4:	stp	x23, x24, [sp, #64]
    8bb8:	ldr	x22, [x0, #8]
    8bbc:	add	x25, x26, x28
    8bc0:	ldr	x4, [sp, #120]
    8bc4:	add	x27, x28, x22
    8bc8:	add	x21, x26, x27
    8bcc:	add	x23, x1, x28
    8bd0:	sub	x5, x4, #0x8
    8bd4:	stp	x5, x3, [sp, #168]
    8bd8:	cmp	x4, x21
    8bdc:	b.cc	8ed8 <ZSTD_free+0x1628>  // b.lo, b.ul, b.last
    8be0:	sub	x2, x4, #0xd
    8be4:	ldr	x20, [x0, #24]
    8be8:	str	x2, [sp, #184]
    8bec:	ldr	x2, [x0, #16]
    8bf0:	str	x2, [sp, #112]
    8bf4:	ldr	x0, [sp, #136]
    8bf8:	cmp	x0, x23
    8bfc:	b.cc	8738 <ZSTD_free+0xe88>  // b.lo, b.ul, b.last
    8c00:	ldr	x0, [sp, #168]
    8c04:	cmp	x0, x25
    8c08:	b.cc	920c <ZSTD_free+0x195c>  // b.lo, b.ul, b.last
    8c0c:	mov	x0, x26
    8c10:	mov	x2, #0x8                   	// #8
    8c14:	bl	0 <grub_memmove>
    8c18:	cmp	x28, #0x8
    8c1c:	b.hi	9240 <ZSTD_free+0x1990>  // b.pmore
    8c20:	ldr	x0, [sp, #144]
    8c24:	str	x23, [sp, #256]
    8c28:	ldr	x1, [sp, #112]
    8c2c:	sub	x0, x25, x0
    8c30:	cmp	x0, x1
    8c34:	b.cs	9158 <ZSTD_free+0x18a8>  // b.hs, b.nlast
    8c38:	ldr	x0, [sp, #160]
    8c3c:	ldr	x1, [sp, #112]
    8c40:	sub	x0, x25, x0
    8c44:	cmp	x0, x1
    8c48:	b.cc	8738 <ZSTD_free+0xe88>  // b.lo, b.ul, b.last
    8c4c:	ldr	x1, [sp, #152]
    8c50:	add	x0, x20, x22
    8c54:	cmp	x1, x0
    8c58:	b.cs	930c <ZSTD_free+0x1a5c>  // b.hs, b.nlast
    8c5c:	ldr	x0, [sp, #152]
    8c60:	mov	x1, x20
    8c64:	sub	x23, x0, x20
    8c68:	mov	x0, x25
    8c6c:	mov	x2, x23
    8c70:	bl	0 <grub_memmove>
    8c74:	ldr	x0, [sp, #168]
    8c78:	sub	x22, x22, x23
    8c7c:	cmp	x22, #0x2
    8c80:	add	x25, x25, x23
    8c84:	ccmp	x25, x0, #0x2, hi  // hi = pmore
    8c88:	b.ls	9154 <ZSTD_free+0x18a4>  // b.plast
    8c8c:	cbz	x22, 8cb4 <ZSTD_free+0x1404>
    8c90:	mov	w0, #0x0                   	// #0
    8c94:	mov	x1, #0x0                   	// #0
    8c98:	ldr	x2, [sp, #144]
    8c9c:	add	w0, w0, #0x1
    8ca0:	cmp	x22, w0, uxtw
    8ca4:	ldrb	w2, [x2, x1]
    8ca8:	strb	w2, [x25, x1]
    8cac:	mov	w1, w0
    8cb0:	b.hi	8c98 <ZSTD_free+0x13e8>  // b.pmore
    8cb4:	cmn	x27, #0x78
    8cb8:	b.hi	9320 <ZSTD_free+0x1a70>  // b.pmore
    8cbc:	ldr	w0, [sp, #240]
    8cc0:	add	w19, w19, #0x1
    8cc4:	add	x26, x26, x27
    8cc8:	cmp	w0, w19
    8ccc:	ldr	x1, [sp, #256]
    8cd0:	b.eq	92b0 <ZSTD_free+0x1a00>  // b.none
    8cd4:	ldr	x3, [sp, #176]
    8cd8:	ubfiz	x2, x19, #5, #2
    8cdc:	add	x0, x3, x2
    8ce0:	ldr	x28, [x3, x2]
    8ce4:	ldr	x22, [x0, #8]
    8ce8:	add	x25, x26, x28
    8cec:	ldr	x2, [sp, #120]
    8cf0:	add	x27, x28, x22
    8cf4:	add	x21, x26, x27
    8cf8:	add	x23, x1, x28
    8cfc:	cmp	x2, x21
    8d00:	b.cc	8ed8 <ZSTD_free+0x1628>  // b.lo, b.ul, b.last
    8d04:	ldp	x2, x20, [x0, #16]
    8d08:	str	x2, [sp, #112]
    8d0c:	b	8bf4 <ZSTD_free+0x1344>
    8d10:	ldr	x20, [sp, #488]
    8d14:	ldr	w17, [sp, #400]
    8d18:	cmp	x20, #0x0
    8d1c:	cinc	x20, x20, eq  // eq = none
    8d20:	mov	w0, w17
    8d24:	stp	x20, x18, [sp, #480]
    8d28:	b	8878 <ZSTD_free+0xfc8>
    8d2c:	ldr	x11, [sp, #392]
    8d30:	neg	w18, w0
    8d34:	ldr	w12, [sp, #400]
    8d38:	cmp	w0, #0x1
    8d3c:	ldr	w17, [x10, #4]
    8d40:	add	w0, w0, w12
    8d44:	str	w0, [sp, #400]
    8d48:	lsl	x11, x11, x12
    8d4c:	mov	w12, w0
    8d50:	lsr	x18, x11, x18
    8d54:	add	x27, x17, x18
    8d58:	b.eq	9380 <ZSTD_free+0x1ad0>  // b.none
    8d5c:	ldr	x11, [sp, #488]
    8d60:	stp	x27, x15, [sp, #480]
    8d64:	str	x11, [sp, #496]
    8d68:	mov	w11, w16
    8d6c:	str	x11, [sp, #112]
    8d70:	cbz	w2, 85d0 <ZSTD_free+0xd20>
    8d74:	ldr	x11, [sp, #392]
    8d78:	neg	w12, w2
    8d7c:	cmp	w1, #0x1e
    8d80:	lsl	x11, x11, x0
    8d84:	add	w0, w0, w2
    8d88:	lsr	x2, x11, x12
    8d8c:	str	w0, [sp, #400]
    8d90:	ldr	x11, [sp, #112]
    8d94:	add	x2, x11, x2
    8d98:	str	x2, [sp, #112]
    8d9c:	b.ls	85d8 <ZSTD_free+0xd28>  // b.plast
    8da0:	cmp	w0, #0x40
    8da4:	b.hi	85d8 <ZSTD_free+0xd28>  // b.pmore
    8da8:	ldr	x1, [sp, #408]
    8dac:	cmp	x1, x25
    8db0:	b.cs	90a4 <ZSTD_free+0x17f4>  // b.hs, b.nlast
    8db4:	ldr	x11, [sp, #416]
    8db8:	cmp	x1, x11
    8dbc:	b.eq	85d8 <ZSTD_free+0xd28>  // b.none
    8dc0:	lsr	w2, w0, #3
    8dc4:	lsr	w12, w0, #3
    8dc8:	sub	x2, x1, x2
    8dcc:	cmp	x11, x2
    8dd0:	b.ls	8de0 <ZSTD_free+0x1530>  // b.plast
    8dd4:	sub	x2, x1, x11
    8dd8:	mov	w12, w2
    8ddc:	sub	x2, x1, w2, uxtw
    8de0:	sub	w0, w0, w12, lsl #3
    8de4:	str	x2, [sp, #408]
    8de8:	ldr	x2, [x2]
    8dec:	and	w1, w0, #0x3f
    8df0:	str	x2, [sp, #392]
    8df4:	b	85e0 <ZSTD_free+0xd30>
    8df8:	lsr	w13, w0, #3
    8dfc:	and	w0, w0, #0x7
    8e00:	sub	x7, x7, x13
    8e04:	mov	w15, w0
    8e08:	mov	w26, #0x1                   	// #1
    8e0c:	ldr	x13, [x7]
    8e10:	str	x13, [sp, #392]
    8e14:	b	8890 <ZSTD_free+0xfe0>
    8e18:	mov	x7, x13
    8e1c:	b	8a84 <ZSTD_free+0x11d4>
    8e20:	neg	w11, w8
    8e24:	add	w0, w0, w8
    8e28:	str	w0, [sp, #400]
    8e2c:	lsr	x1, x1, x11
    8e30:	add	x21, x21, x1
    8e34:	lsl	x1, x2, x0
    8e38:	b	85ec <ZSTD_free+0xd3c>
    8e3c:	lsr	w2, w0, #3
    8e40:	and	w0, w0, #0x7
    8e44:	sub	x1, x1, x2
    8e48:	str	w0, [sp, #400]
    8e4c:	str	x1, [sp, #408]
    8e50:	ldr	x0, [x1]
    8e54:	str	x0, [sp, #392]
    8e58:	b	8560 <ZSTD_free+0xcb0>
    8e5c:	ldr	x0, [sp, #144]
    8e60:	str	x0, [sp, #224]
    8e64:	nop
    8e68:	ldr	x3, [sp, #192]
    8e6c:	cmp	x3, #0x7
    8e70:	b.ls	8fdc <ZSTD_free+0x172c>  // b.plast
    8e74:	ldr	x1, [sp, #224]
    8e78:	mov	x0, x24
    8e7c:	mov	x2, #0x8                   	// #8
    8e80:	bl	0 <grub_memmove>
    8e84:	ldp	x0, x1, [sp, #224]
    8e88:	add	x28, x24, #0x8
    8e8c:	add	x20, x0, #0x8
    8e90:	ldr	x0, [sp, #216]
    8e94:	cmp	x0, x1
    8e98:	b.ls	90c4 <ZSTD_free+0x1814>  // b.plast
    8e9c:	ldr	x0, [sp, #184]
    8ea0:	cmp	x0, x28
    8ea4:	b.hi	90ec <ZSTD_free+0x183c>  // b.pmore
    8ea8:	ldr	x0, [sp, #216]
    8eac:	cmp	x28, x0
    8eb0:	b.cs	8f20 <ZSTD_free+0x1670>  // b.hs, b.nlast
    8eb4:	sub	x24, x0, x28
    8eb8:	mov	x0, #0x0                   	// #0
    8ebc:	nop
    8ec0:	ldrb	w1, [x20, x0]
    8ec4:	strb	w1, [x28, x0]
    8ec8:	add	x0, x0, #0x1
    8ecc:	cmp	x24, x0
    8ed0:	b.ne	8ec0 <ZSTD_free+0x1610>  // b.any
    8ed4:	b	8f20 <ZSTD_free+0x1670>
    8ed8:	mov	x27, #0xffffffffffffffba    	// #-70
    8edc:	ldp	x19, x20, [sp, #32]
    8ee0:	ldp	x21, x22, [sp, #48]
    8ee4:	ldp	x23, x24, [sp, #64]
    8ee8:	b	84c0 <ZSTD_free+0xc10>
    8eec:	ldp	x6, x7, [sp, #136]
    8ef0:	mov	x3, x25
    8ef4:	ldr	x1, [sp, #120]
    8ef8:	mov	x2, x20
    8efc:	ldr	x0, [sp, #160]
    8f00:	str	x0, [sp]
    8f04:	ldr	x4, [sp, #192]
    8f08:	add	x5, sp, #0x100
    8f0c:	ldr	x0, [sp, #152]
    8f10:	str	x0, [sp, #8]
    8f14:	mov	x0, x26
    8f18:	bl	8018 <ZSTD_free+0x768>
    8f1c:	str	x0, [sp, #168]
    8f20:	ldr	x0, [sp, #168]
    8f24:	cmn	x0, #0x78
    8f28:	b.hi	91f8 <ZSTD_free+0x1948>  // b.pmore
    8f2c:	add	x26, x26, x0
    8f30:	sub	x19, x19, x27
    8f34:	ldr	x0, [sp, #208]
    8f38:	add	w23, w23, #0x1
    8f3c:	ldr	x1, [sp, #112]
    8f40:	add	x19, x0, x19
    8f44:	ldr	w0, [sp, #400]
    8f48:	prfm	pldl2keep, [x19]
    8f4c:	cmp	w0, #0x40
    8f50:	stp	x21, x1, [x22]
    8f54:	stp	x27, x19, [x22, #16]
    8f58:	b.hi	9090 <ZSTD_free+0x17e0>  // b.pmore
    8f5c:	ldr	x25, [sp, #424]
    8f60:	b	8514 <ZSTD_free+0xc64>
    8f64:	mov	w8, #0x0                   	// #0
    8f68:	b	8b68 <ZSTD_free+0x12b8>
    8f6c:	ldr	x0, [sp, #224]
    8f70:	ldr	x1, [sp, #152]
    8f74:	add	x0, x0, x25
    8f78:	cmp	x1, x0
    8f7c:	b.cs	912c <ZSTD_free+0x187c>  // b.hs, b.nlast
    8f80:	ldr	x0, [sp, #152]
    8f84:	ldr	x1, [sp, #224]
    8f88:	sub	x20, x0, x1
    8f8c:	mov	x0, x24
    8f90:	mov	x2, x20
    8f94:	bl	0 <grub_memmove>
    8f98:	ldr	x0, [sp, #184]
    8f9c:	sub	x25, x25, x20
    8fa0:	cmp	x25, #0x2
    8fa4:	add	x24, x24, x20
    8fa8:	ccmp	x0, x24, #0x0, hi  // hi = pmore
    8fac:	b.cs	8e5c <ZSTD_free+0x15ac>  // b.hs, b.nlast
    8fb0:	cbz	x25, 8f20 <ZSTD_free+0x1670>
    8fb4:	ldr	x3, [sp, #144]
    8fb8:	mov	w0, #0x0                   	// #0
    8fbc:	mov	x1, #0x0                   	// #0
    8fc0:	ldrb	w2, [x3, x1]
    8fc4:	add	w0, w0, #0x1
    8fc8:	strb	w2, [x24, x1]
    8fcc:	mov	w1, w0
    8fd0:	cmp	x25, w0, uxtw
    8fd4:	b.hi	8fc0 <ZSTD_free+0x1710>  // b.pmore
    8fd8:	b	8f20 <ZSTD_free+0x1670>
    8fdc:	ldr	x5, [sp, #224]
    8fe0:	adrp	x0, 0 <FSE_versionNumber>
    8fe4:	ldr	x0, [x0]
    8fe8:	ldrb	w1, [x5]
    8fec:	strb	w1, [x24]
    8ff0:	adrp	x1, 0 <FSE_versionNumber>
    8ff4:	ldrb	w2, [x5, #1]
    8ff8:	strb	w2, [x24, #1]
    8ffc:	ldr	x2, [x1]
    9000:	ldrb	w1, [x5, #2]
    9004:	strb	w1, [x24, #2]
    9008:	ldr	w4, [x2, x3, lsl #2]
    900c:	mov	x2, #0x4                   	// #4
    9010:	ldr	w1, [x0, x3, lsl #2]
    9014:	ldrb	w0, [x5, #3]
    9018:	add	x1, x5, x1
    901c:	strb	w0, [x24, #3]
    9020:	sub	x3, x1, w4, sxtw
    9024:	add	x0, x24, x2
    9028:	str	x3, [sp, #224]
    902c:	bl	0 <grub_memmove>
    9030:	b	8e84 <ZSTD_free+0x15d4>
    9034:	ldr	x0, [sp, #488]
    9038:	ldr	w12, [sp, #400]
    903c:	cmp	x0, #0x0
    9040:	cinc	x27, x0, eq  // eq = none
    9044:	mov	w0, w12
    9048:	stp	x27, x15, [sp, #480]
    904c:	b	85c4 <ZSTD_free+0xd14>
    9050:	ldr	x1, [sp, #256]
    9054:	add	x20, x26, #0x8
    9058:	str	x19, [sp, #248]
    905c:	add	x1, x1, #0x8
    9060:	mov	x19, x1
    9064:	nop
    9068:	mov	x1, x19
    906c:	mov	x0, x20
    9070:	mov	x2, #0x8                   	// #8
    9074:	add	x20, x20, x2
    9078:	bl	0 <grub_memmove>
    907c:	add	x19, x19, #0x8
    9080:	cmp	x24, x20
    9084:	b.hi	9068 <ZSTD_free+0x17b8>  // b.pmore
    9088:	ldr	x19, [sp, #248]
    908c:	b	8708 <ZSTD_free+0xe58>
    9090:	ldr	w9, [sp, #244]
    9094:	mov	w8, w23
    9098:	ldp	x21, x22, [sp, #48]
    909c:	ldp	x23, x24, [sp, #64]
    90a0:	b	8b80 <ZSTD_free+0x12d0>
    90a4:	lsr	w2, w0, #3
    90a8:	and	w0, w0, #0x7
    90ac:	sub	x2, x1, x2
    90b0:	str	x2, [sp, #408]
    90b4:	mov	w1, w0
    90b8:	ldr	x2, [x2]
    90bc:	str	x2, [sp, #392]
    90c0:	b	85e0 <ZSTD_free+0xd30>
    90c4:	add	x25, x24, x25
    90c8:	mov	x1, x20
    90cc:	mov	x0, x28
    90d0:	mov	x2, #0x8                   	// #8
    90d4:	add	x28, x28, x2
    90d8:	bl	0 <grub_memmove>
    90dc:	add	x20, x20, #0x8
    90e0:	cmp	x25, x28
    90e4:	b.hi	90c8 <ZSTD_free+0x1818>  // b.pmore
    90e8:	b	8f20 <ZSTD_free+0x1670>
    90ec:	mov	x24, x20
    90f0:	mov	x25, x0
    90f4:	sub	x0, x0, x28
    90f8:	str	x0, [sp, #192]
    90fc:	nop
    9100:	mov	x1, x24
    9104:	mov	x0, x28
    9108:	mov	x2, #0x8                   	// #8
    910c:	add	x28, x28, x2
    9110:	bl	0 <grub_memmove>
    9114:	add	x24, x24, #0x8
    9118:	cmp	x25, x28
    911c:	b.hi	9100 <ZSTD_free+0x1850>  // b.pmore
    9120:	ldp	x28, x0, [sp, #184]
    9124:	add	x20, x20, x0
    9128:	b	8ea8 <ZSTD_free+0x15f8>
    912c:	ldr	x1, [sp, #224]
    9130:	mov	x2, x25
    9134:	mov	x0, x24
    9138:	bl	0 <grub_memmove>
    913c:	b	8f20 <ZSTD_free+0x1670>
    9140:	mov	w8, w23
    9144:	ldr	w9, [sp, #244]
    9148:	ldp	x21, x22, [sp, #48]
    914c:	ldp	x23, x24, [sp, #64]
    9150:	b	8b8c <ZSTD_free+0x12dc>
    9154:	ldr	x20, [sp, #144]
    9158:	ldr	x4, [sp, #112]
    915c:	cmp	x4, #0x7
    9160:	b.hi	9274 <ZSTD_free+0x19c4>  // b.pmore
    9164:	ldrb	w0, [x20]
    9168:	mov	x2, #0x4                   	// #4
    916c:	strb	w0, [x25]
    9170:	adrp	x0, 0 <FSE_versionNumber>
    9174:	ldrb	w1, [x20, #1]
    9178:	strb	w1, [x25, #1]
    917c:	adrp	x1, 0 <FSE_versionNumber>
    9180:	ldr	x0, [x0]
    9184:	ldr	x3, [x1]
    9188:	ldrb	w1, [x20, #2]
    918c:	strb	w1, [x25, #2]
    9190:	ldr	w3, [x3, x4, lsl #2]
    9194:	ldr	w1, [x0, x4, lsl #2]
    9198:	ldrb	w0, [x20, #3]
    919c:	strb	w0, [x25, #3]
    91a0:	add	x1, x20, x1
    91a4:	add	x0, x25, x2
    91a8:	sub	x20, x1, w3, sxtw
    91ac:	bl	0 <grub_memmove>
    91b0:	ldr	x0, [sp, #184]
    91b4:	add	x20, x20, #0x8
    91b8:	add	x24, x25, #0x8
    91bc:	cmp	x21, x0
    91c0:	b.ls	9288 <ZSTD_free+0x19d8>  // b.plast
    91c4:	ldr	x0, [sp, #168]
    91c8:	cmp	x24, x0
    91cc:	b.cc	92d4 <ZSTD_free+0x1a24>  // b.lo, b.ul, b.last
    91d0:	cmp	x21, x24
    91d4:	b.ls	8cb4 <ZSTD_free+0x1404>  // b.plast
    91d8:	sub	x21, x21, x24
    91dc:	mov	x0, #0x0                   	// #0
    91e0:	ldrb	w1, [x20, x0]
    91e4:	strb	w1, [x24, x0]
    91e8:	add	x0, x0, #0x1
    91ec:	cmp	x0, x21
    91f0:	b.ne	91e0 <ZSTD_free+0x1930>  // b.any
    91f4:	b	8cb4 <ZSTD_free+0x1404>
    91f8:	ldp	x19, x20, [sp, #32]
    91fc:	ldp	x21, x22, [sp, #48]
    9200:	ldp	x23, x24, [sp, #64]
    9204:	ldr	x27, [sp, #168]
    9208:	b	84c0 <ZSTD_free+0xc10>
    920c:	ldp	x4, x1, [sp, #112]
    9210:	mov	x3, x22
    9214:	ldp	x6, x7, [sp, #136]
    9218:	mov	x2, x28
    921c:	ldr	x0, [sp, #160]
    9220:	str	x0, [sp]
    9224:	ldr	x0, [sp, #152]
    9228:	str	x0, [sp, #8]
    922c:	add	x5, sp, #0x100
    9230:	mov	x0, x26
    9234:	bl	8018 <ZSTD_free+0x768>
    9238:	mov	x27, x0
    923c:	b	8cb4 <ZSTD_free+0x1404>
    9240:	ldr	x1, [sp, #256]
    9244:	add	x24, x26, #0x8
    9248:	add	x28, x1, #0x8
    924c:	nop
    9250:	mov	x1, x28
    9254:	mov	x0, x24
    9258:	mov	x2, #0x8                   	// #8
    925c:	add	x24, x24, x2
    9260:	bl	0 <grub_memmove>
    9264:	add	x28, x28, #0x8
    9268:	cmp	x24, x25
    926c:	b.cc	9250 <ZSTD_free+0x19a0>  // b.lo, b.ul, b.last
    9270:	b	8c20 <ZSTD_free+0x1370>
    9274:	mov	x1, x20
    9278:	mov	x0, x25
    927c:	mov	x2, #0x8                   	// #8
    9280:	bl	0 <grub_memmove>
    9284:	b	91b0 <ZSTD_free+0x1900>
    9288:	add	x22, x25, x22
    928c:	mov	x1, x20
    9290:	mov	x0, x24
    9294:	mov	x2, #0x8                   	// #8
    9298:	add	x24, x24, x2
    929c:	bl	0 <grub_memmove>
    92a0:	add	x20, x20, #0x8
    92a4:	cmp	x22, x24
    92a8:	b.hi	928c <ZSTD_free+0x19dc>  // b.pmore
    92ac:	b	8cb4 <ZSTD_free+0x1404>
    92b0:	ldp	x21, x22, [sp, #48]
    92b4:	ldp	x23, x24, [sp, #64]
    92b8:	ldr	x3, [sp, #200]
    92bc:	ldp	x0, x2, [sp, #480]
    92c0:	str	w0, [x3, #10300]
    92c4:	ldr	x0, [sp, #496]
    92c8:	str	w2, [x3, #10304]
    92cc:	str	w0, [x3, #10308]
    92d0:	b	8488 <ZSTD_free+0xbd8>
    92d4:	mov	x22, x0
    92d8:	sub	x23, x0, x24
    92dc:	mov	x25, x20
    92e0:	mov	x1, x25
    92e4:	mov	x0, x24
    92e8:	mov	x2, #0x8                   	// #8
    92ec:	add	x24, x24, x2
    92f0:	bl	0 <grub_memmove>
    92f4:	add	x25, x25, #0x8
    92f8:	cmp	x22, x24
    92fc:	b.hi	92e0 <ZSTD_free+0x1a30>  // b.pmore
    9300:	add	x20, x20, x23
    9304:	ldr	x24, [sp, #168]
    9308:	b	91d0 <ZSTD_free+0x1920>
    930c:	mov	x2, x22
    9310:	mov	x1, x20
    9314:	mov	x0, x25
    9318:	bl	0 <grub_memmove>
    931c:	b	8cb4 <ZSTD_free+0x1404>
    9320:	ldp	x19, x20, [sp, #32]
    9324:	ldp	x21, x22, [sp, #48]
    9328:	ldp	x23, x24, [sp, #64]
    932c:	b	84c0 <ZSTD_free+0xc10>
    9330:	cmp	w1, #0x0
    9334:	cinc	x27, x20, eq  // eq = none
    9338:	cbz	x27, 8870 <ZSTD_free+0xfc0>
    933c:	cmp	x27, #0x3
    9340:	b.ne	935c <ZSTD_free+0x1aac>  // b.any
    9344:	subs	x20, x18, #0x1
    9348:	cinc	x20, x20, eq  // eq = none
    934c:	ldr	x17, [sp, #488]
    9350:	stp	x20, x18, [sp, #480]
    9354:	str	x17, [sp, #496]
    9358:	b	8878 <ZSTD_free+0xfc8>
    935c:	add	x20, x27, #0xa
    9360:	add	x28, sp, #0x190
    9364:	ldr	x20, [x28, x20, lsl #3]
    9368:	cmp	x20, #0x0
    936c:	cinc	x20, x20, eq  // eq = none
    9370:	cmp	x27, #0x1
    9374:	b.ne	934c <ZSTD_free+0x1a9c>  // b.any
    9378:	mov	w0, w17
    937c:	b	8d24 <ZSTD_free+0x1474>
    9380:	cmp	w21, #0x0
    9384:	cinc	x11, x27, eq  // eq = none
    9388:	cbz	x11, 85bc <ZSTD_free+0xd0c>
    938c:	cmp	x11, #0x3
    9390:	b.ne	93ac <ZSTD_free+0x1afc>  // b.any
    9394:	subs	x11, x15, #0x1
    9398:	cinc	x27, x11, eq  // eq = none
    939c:	ldr	x11, [sp, #488]
    93a0:	stp	x27, x15, [sp, #480]
    93a4:	str	x11, [sp, #496]
    93a8:	b	85c4 <ZSTD_free+0xd14>
    93ac:	add	x17, x11, #0xa
    93b0:	add	x18, sp, #0x190
    93b4:	ldr	x17, [x18, x17, lsl #3]
    93b8:	cmp	x17, #0x0
    93bc:	cinc	x27, x17, eq  // eq = none
    93c0:	cmp	x11, #0x1
    93c4:	b.ne	939c <ZSTD_free+0x1aec>  // b.any
    93c8:	mov	w0, w12
    93cc:	b	9048 <ZSTD_free+0x1798>
	...

00000000000093e0 <ZSTD_sizeof_DCtx>:
    93e0:	cbz	x0, 9414 <ZSTD_sizeof_DCtx+0x34>
    93e4:	ldr	x1, [x0, #29016]
    93e8:	cbz	x1, 941c <ZSTD_sizeof_DCtx+0x3c>
    93ec:	ldr	x2, [x1]
    93f0:	cbz	x2, 9428 <ZSTD_sizeof_DCtx+0x48>
    93f4:	ldr	x2, [x1, #16]
    93f8:	add	x2, x2, #0x2d, lsl #12
    93fc:	add	x2, x2, #0xa58
    9400:	ldr	x1, [x0, #29056]
    9404:	ldr	x0, [x0, #29088]
    9408:	add	x0, x1, x0
    940c:	add	x0, x0, x2
    9410:	ret
    9414:	mov	x0, #0x0                   	// #0
    9418:	ret
    941c:	mov	x2, #0x71f8                	// #29176
    9420:	movk	x2, #0x2, lsl #16
    9424:	b	9400 <ZSTD_sizeof_DCtx+0x20>
    9428:	mov	x2, #0xda58                	// #55896
    942c:	movk	x2, #0x2, lsl #16
    9430:	b	9400 <ZSTD_sizeof_DCtx+0x20>
    9434:	nop

0000000000009438 <ZSTD_estimateDCtxSize>:
    9438:	mov	x0, #0x71f8                	// #29176
    943c:	movk	x0, #0x2, lsl #16
    9440:	ret
    9444:	nop

0000000000009448 <ZSTD_initStaticDCtx>:
    9448:	mov	x2, x0
    944c:	mov	x0, #0x71f7                	// #29175
    9450:	movk	x0, #0x2, lsl #16
    9454:	tst	x2, #0x7
    9458:	ccmp	x1, x0, #0x0, eq  // eq = none
    945c:	mov	x0, #0x0                   	// #0
    9460:	b.ls	94bc <ZSTD_initStaticDCtx+0x74>  // b.plast
    9464:	add	x3, x2, #0x4, lsl #12
    9468:	mov	x0, #0x7200                	// #29184
    946c:	add	x5, x2, x0
    9470:	mov	x6, #0x1                   	// #1
    9474:	movk	x6, #0x800, lsl #16
    9478:	add	x4, x2, #0x27, lsl #12
    947c:	str	wzr, [x3, #12560]
    9480:	mov	x0, x2
    9484:	str	xzr, [x2, #28768]
    9488:	add	x4, x4, #0x1f8
    948c:	str	xzr, [x2, #29016]
    9490:	str	xzr, [x2, #29024]
    9494:	str	xzr, [x2, #29056]
    9498:	str	x6, [x2, #29072]
    949c:	str	xzr, [x2, #29088]
    94a0:	stur	xzr, [x5, #-148]
    94a4:	str	xzr, [x2, #29120]
    94a8:	str	wzr, [x3, #12624]
    94ac:	str	wzr, [x3, #12744]
    94b0:	str	wzr, [x3, #12756]
    94b4:	str	x1, [x2, #29000]
    94b8:	str	x4, [x2, #29048]
    94bc:	ret

00000000000094c0 <ZSTD_createDCtx_advanced>:
    94c0:	stp	x29, x30, [sp, #-64]!
    94c4:	mov	x29, sp
    94c8:	ldr	x1, [x0]
    94cc:	str	x19, [sp, #16]
    94d0:	mov	x19, x0
    94d4:	ldr	x0, [x0, #8]
    94d8:	cmp	x1, #0x0
    94dc:	cset	w1, eq  // eq = none
    94e0:	cmp	x0, #0x0
    94e4:	cset	w0, eq  // eq = none
    94e8:	cmp	w1, w0
    94ec:	b.ne	9580 <ZSTD_createDCtx_advanced+0xc0>  // b.any
    94f0:	ldp	x4, x5, [x19]
    94f4:	mov	x0, #0x71f8                	// #29176
    94f8:	ldr	x2, [x19, #16]
    94fc:	add	x1, sp, #0x20
    9500:	movk	x0, #0x2, lsl #16
    9504:	stp	x4, x5, [sp, #32]
    9508:	str	x2, [sp, #48]
    950c:	bl	7840 <ZSTD_malloc>
    9510:	cbz	x0, 9574 <ZSTD_createDCtx_advanced+0xb4>
    9514:	add	x3, x0, #0x7, lsl #12
    9518:	add	x1, x0, #0x4, lsl #12
    951c:	ldp	x6, x7, [x19]
    9520:	mov	x2, #0x7200                	// #29184
    9524:	stp	x6, x7, [x3, #288]
    9528:	add	x2, x0, x2
    952c:	mov	x4, #0x1                   	// #1
    9530:	ldr	x5, [x19, #16]
    9534:	str	x5, [x0, #28976]
    9538:	str	wzr, [x1, #12560]
    953c:	movk	x4, #0x800, lsl #16
    9540:	str	xzr, [x0, #28768]
    9544:	str	xzr, [x0, #29000]
    9548:	str	xzr, [x0, #29016]
    954c:	str	xzr, [x0, #29024]
    9550:	str	xzr, [x0, #29048]
    9554:	str	xzr, [x0, #29056]
    9558:	str	x4, [x0, #29072]
    955c:	str	xzr, [x0, #29088]
    9560:	stur	xzr, [x2, #-148]
    9564:	str	xzr, [x0, #29120]
    9568:	str	wzr, [x1, #12624]
    956c:	str	wzr, [x1, #12744]
    9570:	str	wzr, [x1, #12756]
    9574:	ldr	x19, [sp, #16]
    9578:	ldp	x29, x30, [sp], #64
    957c:	ret
    9580:	mov	x0, #0x0                   	// #0
    9584:	ldr	x19, [sp, #16]
    9588:	ldp	x29, x30, [sp], #64
    958c:	ret

0000000000009590 <ZSTD_createDCtx>:
    9590:	stp	x29, x30, [sp, #-48]!
    9594:	adrp	x1, 0 <FSE_versionNumber>
    9598:	mov	x29, sp
    959c:	ldr	x1, [x1]
    95a0:	add	x0, sp, #0x10
    95a4:	add	x1, x1, #0x410
    95a8:	ldp	x2, x3, [x1]
    95ac:	stp	x2, x3, [sp, #16]
    95b0:	ldr	x1, [x1, #16]
    95b4:	str	x1, [sp, #32]
    95b8:	bl	94c0 <ZSTD_createDCtx_advanced>
    95bc:	ldp	x29, x30, [sp], #48
    95c0:	ret
    95c4:	nop
	...

00000000000095d0 <ZSTD_freeDCtx>:
    95d0:	cbz	x0, 95e0 <ZSTD_freeDCtx+0x10>
    95d4:	ldr	x1, [x0, #29000]
    95d8:	cbnz	x1, 95e8 <ZSTD_freeDCtx+0x18>
    95dc:	b	8270 <ZSTD_free+0x9c0>
    95e0:	mov	x0, #0x0                   	// #0
    95e4:	ret
    95e8:	mov	x0, #0xffffffffffffffc0    	// #-64
    95ec:	ret

00000000000095f0 <ZSTD_copyDCtx>:
    95f0:	mov	x2, #0x7178                	// #29048
    95f4:	b	0 <grub_memmove>

00000000000095f8 <ZSTD_isFrame>:
    95f8:	cmp	x1, #0x3
    95fc:	b.ls	9630 <ZSTD_isFrame+0x38>  // b.plast
    9600:	ldr	w1, [x0]
    9604:	mov	w2, #0xb528                	// #46376
    9608:	movk	w2, #0xfd2f, lsl #16
    960c:	mov	w0, #0x1                   	// #1
    9610:	cmp	w1, w2
    9614:	b.eq	962c <ZSTD_isFrame+0x34>  // b.none
    9618:	and	w1, w1, #0xfffffff0
    961c:	mov	w0, #0x2a50                	// #10832
    9620:	movk	w0, #0x184d, lsl #16
    9624:	cmp	w1, w0
    9628:	cset	w0, eq  // eq = none
    962c:	ret
    9630:	mov	w0, #0x0                   	// #0
    9634:	ret

0000000000009638 <ZSTD_frameHeaderSize>:
    9638:	cmp	x1, #0x4
    963c:	b.ls	9690 <ZSTD_frameHeaderSize+0x58>  // b.plast
    9640:	adrp	x2, 0 <FSE_versionNumber>
    9644:	ldrb	w1, [x0, #4]
    9648:	ldr	x3, [x2]
    964c:	ubfx	x5, x1, #6, #2
    9650:	and	x6, x1, #0x3
    9654:	lsr	w0, w1, #5
    9658:	add	x4, x3, #0x20
    965c:	cmp	wzr, w1, lsr #6
    9660:	mvn	w2, w0
    9664:	and	w0, w0, #0x1
    9668:	ldr	x1, [x3, x6, lsl #3]
    966c:	and	x2, x2, #0x1
    9670:	ldr	x3, [x4, x5, lsl #3]
    9674:	add	x2, x2, #0x5
    9678:	csel	w0, w0, wzr, eq  // eq = none
    967c:	add	x1, x1, x3
    9680:	and	x0, x0, #0xff
    9684:	add	x1, x1, x2
    9688:	add	x0, x1, x0
    968c:	ret
    9690:	mov	x0, #0xffffffffffffffb8    	// #-72
    9694:	ret
	...

00000000000096a0 <ZSTD_getFrameHeader_advanced>:
    96a0:	stp	x29, x30, [sp, #-64]!
    96a4:	cmp	w3, #0x1
    96a8:	mov	x29, sp
    96ac:	stp	x19, x20, [sp, #16]
    96b0:	mov	w20, w3
    96b4:	mov	x19, #0x5                   	// #5
    96b8:	stp	x21, x22, [sp, #32]
    96bc:	mov	x21, x2
    96c0:	mov	x22, x1
    96c4:	mov	x2, #0x28                  	// #40
    96c8:	mov	w1, #0x0                   	// #0
    96cc:	stp	x23, x24, [sp, #48]
    96d0:	mov	x23, x0
    96d4:	mov	x24, #0x1                   	// #1
    96d8:	csel	x19, x24, x19, eq  // eq = none
    96dc:	bl	0 <grub_memset>
    96e0:	cmp	x21, x19
    96e4:	b.cc	974c <ZSTD_getFrameHeader_advanced+0xac>  // b.lo, b.ul, b.last
    96e8:	cbz	x22, 9874 <ZSTD_getFrameHeader_advanced+0x1d4>
    96ec:	cmp	w20, #0x1
    96f0:	b.eq	9764 <ZSTD_getFrameHeader_advanced+0xc4>  // b.none
    96f4:	ldr	w0, [x22]
    96f8:	mov	w1, #0xb528                	// #46376
    96fc:	movk	w1, #0xfd2f, lsl #16
    9700:	cmp	w0, w1
    9704:	b.eq	9764 <ZSTD_getFrameHeader_advanced+0xc4>  // b.none
    9708:	and	w0, w0, #0xfffffff0
    970c:	mov	w1, #0x2a50                	// #10832
    9710:	movk	w1, #0x184d, lsl #16
    9714:	mov	x19, #0xfffffffffffffff6    	// #-10
    9718:	cmp	w0, w1
    971c:	b.ne	974c <ZSTD_getFrameHeader_advanced+0xac>  // b.any
    9720:	cmp	x21, #0x7
    9724:	mov	x19, #0x8                   	// #8
    9728:	b.ls	974c <ZSTD_getFrameHeader_advanced+0xac>  // b.plast
    972c:	mov	x0, x23
    9730:	mov	x2, #0x28                  	// #40
    9734:	mov	w1, #0x0                   	// #0
    9738:	bl	0 <grub_memset>
    973c:	ldr	w0, [x22, #4]
    9740:	mov	x19, #0x0                   	// #0
    9744:	str	x0, [x23]
    9748:	str	w24, [x23, #20]
    974c:	mov	x0, x19
    9750:	ldp	x19, x20, [sp, #16]
    9754:	ldp	x21, x22, [sp, #32]
    9758:	ldp	x23, x24, [sp, #48]
    975c:	ldp	x29, x30, [sp], #64
    9760:	ret
    9764:	mov	w2, w20
    9768:	mov	x1, x21
    976c:	mov	x0, x22
    9770:	bl	78d8 <ZSTD_free+0x28>
    9774:	cmp	x21, x0
    9778:	b.cc	9850 <ZSTD_getFrameHeader_advanced+0x1b0>  // b.lo, b.ul, b.last
    977c:	add	x1, x22, x19
    9780:	str	w0, [x23, #24]
    9784:	ldurb	w0, [x1, #-1]
    9788:	ubfx	x3, x0, #5, #1
    978c:	tbnz	w0, #3, 987c <ZSTD_getFrameHeader_advanced+0x1dc>
    9790:	cbnz	w3, 986c <ZSTD_getFrameHeader_advanced+0x1cc>
    9794:	ldrb	w1, [x22, x19]
    9798:	add	x6, x19, #0x1
    979c:	mov	x19, #0xfffffffffffffff0    	// #-16
    97a0:	lsr	w2, w1, #3
    97a4:	add	w2, w2, #0xa
    97a8:	cmp	w2, #0x1f
    97ac:	b.gt	974c <ZSTD_getFrameHeader_advanced+0xac>
    97b0:	mov	x5, #0x1                   	// #1
    97b4:	and	x4, x1, #0x7
    97b8:	lsl	x2, x5, x2
    97bc:	mov	x19, x6
    97c0:	lsr	x1, x2, #3
    97c4:	madd	x1, x1, x4, x2
    97c8:	and	w2, w0, #0x3
    97cc:	cmp	w2, #0x2
    97d0:	b.eq	98a8 <ZSTD_getFrameHeader_advanced+0x208>  // b.none
    97d4:	cmp	w2, #0x3
    97d8:	b.eq	98e4 <ZSTD_getFrameHeader_advanced+0x244>  // b.none
    97dc:	cmp	w2, #0x1
    97e0:	mov	w4, #0x0                   	// #0
    97e4:	b.eq	98b4 <ZSTD_getFrameHeader_advanced+0x214>  // b.none
    97e8:	lsr	w2, w0, #6
    97ec:	cmp	w2, #0x2
    97f0:	b.eq	9898 <ZSTD_getFrameHeader_advanced+0x1f8>  // b.none
    97f4:	cmp	w2, #0x3
    97f8:	b.eq	98c0 <ZSTD_getFrameHeader_advanced+0x220>  // b.none
    97fc:	cmp	w2, #0x1
    9800:	b.eq	98c8 <ZSTD_getFrameHeader_advanced+0x228>  // b.none
    9804:	cbnz	w3, 9884 <ZSTD_getFrameHeader_advanced+0x1e4>
    9808:	mov	x5, #0xffffffffffffffff    	// #-1
    980c:	nop
    9810:	mov	x2, #0x1ffff               	// #131071
    9814:	cmp	x1, x2
    9818:	mov	w2, #0x20000               	// #131072
    981c:	csel	w2, w1, w2, ls  // ls = plast
    9820:	stp	x5, x1, [x23]
    9824:	str	wzr, [x23, #20]
    9828:	ubfx	x0, x0, #2, #1
    982c:	str	w2, [x23, #16]
    9830:	stp	w4, w0, [x23, #28]
    9834:	mov	x19, #0x0                   	// #0
    9838:	mov	x0, x19
    983c:	ldp	x19, x20, [sp, #16]
    9840:	ldp	x21, x22, [sp, #32]
    9844:	ldp	x23, x24, [sp, #48]
    9848:	ldp	x29, x30, [sp], #64
    984c:	ret
    9850:	mov	x19, x0
    9854:	mov	x0, x19
    9858:	ldp	x19, x20, [sp, #16]
    985c:	ldp	x21, x22, [sp, #32]
    9860:	ldp	x23, x24, [sp, #48]
    9864:	ldp	x29, x30, [sp], #64
    9868:	ret
    986c:	mov	x1, #0x0                   	// #0
    9870:	b	97c8 <ZSTD_getFrameHeader_advanced+0x128>
    9874:	mov	x19, #0xffffffffffffffff    	// #-1
    9878:	b	974c <ZSTD_getFrameHeader_advanced+0xac>
    987c:	mov	x19, #0xfffffffffffffff2    	// #-14
    9880:	b	974c <ZSTD_getFrameHeader_advanced+0xac>
    9884:	ldrb	w2, [x22, x19]
    9888:	str	wzr, [x23, #20]
    988c:	and	x1, x2, #0xff
    9890:	stp	x1, x1, [x23]
    9894:	b	9828 <ZSTD_getFrameHeader_advanced+0x188>
    9898:	ldr	w5, [x22, x19]
    989c:	cmp	w3, #0x0
    98a0:	csel	x1, x1, x5, eq  // eq = none
    98a4:	b	9810 <ZSTD_getFrameHeader_advanced+0x170>
    98a8:	ldrh	w4, [x22, x19]
    98ac:	add	x19, x19, #0x2
    98b0:	b	97e8 <ZSTD_getFrameHeader_advanced+0x148>
    98b4:	ldrb	w4, [x22, x19]
    98b8:	add	x19, x19, #0x1
    98bc:	b	97e8 <ZSTD_getFrameHeader_advanced+0x148>
    98c0:	ldr	x5, [x22, x19]
    98c4:	b	989c <ZSTD_getFrameHeader_advanced+0x1fc>
    98c8:	ldrh	w2, [x22, x19]
    98cc:	add	w2, w2, #0x100
    98d0:	sxtw	x5, w2
    98d4:	cbz	w3, 9810 <ZSTD_getFrameHeader_advanced+0x170>
    98d8:	stp	x5, x5, [x23]
    98dc:	str	wzr, [x23, #20]
    98e0:	b	9828 <ZSTD_getFrameHeader_advanced+0x188>
    98e4:	ldr	w4, [x22, x19]
    98e8:	add	x19, x19, #0x4
    98ec:	b	97e8 <ZSTD_getFrameHeader_advanced+0x148>
    98f0:	stp	x29, x30, [sp, #-48]!
    98f4:	mov	x3, #0x7070                	// #28784
    98f8:	mov	x29, sp
    98fc:	str	x21, [sp, #32]
    9900:	add	x21, x0, #0x4, lsl #12
    9904:	stp	x19, x20, [sp, #16]
    9908:	mov	x20, x0
    990c:	add	x0, x0, x3
    9910:	ldr	w3, [x21, #12560]
    9914:	bl	96a0 <ZSTD_getFrameHeader_advanced>
    9918:	mov	x19, x0
    991c:	cmn	x0, #0x78
    9920:	b.hi	9944 <ZSTD_getFrameHeader_advanced+0x2a4>  // b.pmore
    9924:	cbnz	x0, 9984 <ZSTD_getFrameHeader_advanced+0x2e4>
    9928:	ldr	w0, [x21, #12428]
    992c:	cbz	w0, 993c <ZSTD_getFrameHeader_advanced+0x29c>
    9930:	ldr	w1, [x21, #12648]
    9934:	cmp	w0, w1
    9938:	b.ne	997c <ZSTD_getFrameHeader_advanced+0x2dc>  // b.any
    993c:	ldr	w0, [x21, #12432]
    9940:	cbnz	w0, 9958 <ZSTD_getFrameHeader_advanced+0x2b8>
    9944:	mov	x0, x19
    9948:	ldp	x19, x20, [sp, #16]
    994c:	ldr	x21, [sp, #32]
    9950:	ldp	x29, x30, [sp], #48
    9954:	ret
    9958:	mov	x1, #0x0                   	// #0
    995c:	mov	x0, #0x70b0                	// #28848
    9960:	add	x0, x20, x0
    9964:	bl	6d58 <XXH64_reset>
    9968:	mov	x0, x19
    996c:	ldp	x19, x20, [sp, #16]
    9970:	ldr	x21, [sp, #32]
    9974:	ldp	x29, x30, [sp], #48
    9978:	ret
    997c:	mov	x19, #0xffffffffffffffe0    	// #-32
    9980:	b	9944 <ZSTD_getFrameHeader_advanced+0x2a4>
    9984:	mov	x19, #0xffffffffffffffb8    	// #-72
    9988:	mov	x0, x19
    998c:	ldp	x19, x20, [sp, #16]
    9990:	ldr	x21, [sp, #32]
    9994:	ldp	x29, x30, [sp], #48
    9998:	ret
    999c:	nop

00000000000099a0 <ZSTD_getFrameHeader>:
    99a0:	mov	w3, #0x0                   	// #0
    99a4:	b	96a0 <ZSTD_getFrameHeader_advanced>

00000000000099a8 <ZSTD_getFrameContentSize>:
    99a8:	stp	x29, x30, [sp, #-64]!
    99ac:	mov	x2, x1
    99b0:	mov	w3, #0x0                   	// #0
    99b4:	mov	x29, sp
    99b8:	mov	x1, x0
    99bc:	add	x0, sp, #0x18
    99c0:	bl	96a0 <ZSTD_getFrameHeader_advanced>
    99c4:	cbnz	x0, 99e0 <ZSTD_getFrameContentSize+0x38>
    99c8:	ldr	w1, [sp, #44]
    99cc:	ldr	x0, [sp, #24]
    99d0:	cmp	w1, #0x1
    99d4:	ldp	x29, x30, [sp], #64
    99d8:	csel	x0, x0, xzr, ne  // ne = any
    99dc:	ret
    99e0:	mov	x0, #0xfffffffffffffffe    	// #-2
    99e4:	ldp	x29, x30, [sp], #64
    99e8:	ret
    99ec:	nop

00000000000099f0 <ZSTD_getDecompressedSize>:
    99f0:	stp	x29, x30, [sp, #-16]!
    99f4:	mov	x29, sp
    99f8:	bl	99a8 <ZSTD_getFrameContentSize>
    99fc:	cmn	x0, #0x2
    9a00:	csel	x0, x0, xzr, cc  // cc = lo, ul, last
    9a04:	ldp	x29, x30, [sp], #16
    9a08:	ret
    9a0c:	nop

0000000000009a10 <ZSTD_getcBlockSize>:
    9a10:	mov	x3, x0
    9a14:	cmp	x1, #0x2
    9a18:	mov	x0, #0xffffffffffffffb8    	// #-72
    9a1c:	b.ls	9a5c <ZSTD_getcBlockSize+0x4c>  // b.plast
    9a20:	ldrb	w1, [x3, #2]
    9a24:	mov	x0, #0x1                   	// #1
    9a28:	ldrh	w3, [x3]
    9a2c:	add	w1, w3, w1, lsl #16
    9a30:	and	w3, w1, #0x1
    9a34:	str	w3, [x2, #4]
    9a38:	lsr	w3, w1, #3
    9a3c:	ubfx	x1, x1, #1, #2
    9a40:	str	w1, [x2]
    9a44:	cmp	w1, #0x1
    9a48:	str	w3, [x2, #8]
    9a4c:	b.eq	9a5c <ZSTD_getcBlockSize+0x4c>  // b.none
    9a50:	cmp	w1, #0x3
    9a54:	mov	x0, #0xffffffffffffffec    	// #-20
    9a58:	csel	x0, x3, x0, ne  // ne = any
    9a5c:	ret

0000000000009a60 <ZSTD_decodeLiteralsBlock>:
    9a60:	stp	x29, x30, [sp, #-80]!
    9a64:	cmp	x2, #0x2
    9a68:	mov	x29, sp
    9a6c:	stp	x21, x22, [sp, #32]
    9a70:	b.ls	9ad4 <ZSTD_decodeLiteralsBlock+0x74>  // b.plast
    9a74:	stp	x19, x20, [sp, #16]
    9a78:	mov	x20, x0
    9a7c:	ldrb	w3, [x1]
    9a80:	and	w19, w3, #0x3
    9a84:	cmp	w19, #0x2
    9a88:	b.eq	9af8 <ZSTD_decodeLiteralsBlock+0x98>  // b.none
    9a8c:	cmp	w19, #0x3
    9a90:	b.eq	9ae8 <ZSTD_decodeLiteralsBlock+0x88>  // b.none
    9a94:	cmp	w19, #0x1
    9a98:	b.eq	9c38 <ZSTD_decodeLiteralsBlock+0x1d8>  // b.none
    9a9c:	ubfx	x0, x3, #2, #2
    9aa0:	cmp	w0, #0x1
    9aa4:	b.eq	9c28 <ZSTD_decodeLiteralsBlock+0x1c8>  // b.none
    9aa8:	cmp	w0, #0x3
    9aac:	b.eq	9ca0 <ZSTD_decodeLiteralsBlock+0x240>  // b.none
    9ab0:	ubfx	x19, x3, #3, #5
    9ab4:	mov	x0, #0x1                   	// #1
    9ab8:	add	x21, x19, x0
    9abc:	add	x3, x21, #0x8
    9ac0:	cmp	x3, x2
    9ac4:	b.ls	9c8c <ZSTD_decodeLiteralsBlock+0x22c>  // b.plast
    9ac8:	cmp	x21, x2
    9acc:	b.ls	9d40 <ZSTD_decodeLiteralsBlock+0x2e0>  // b.plast
    9ad0:	ldp	x19, x20, [sp, #16]
    9ad4:	mov	x21, #0xffffffffffffffec    	// #-20
    9ad8:	mov	x0, x21
    9adc:	ldp	x21, x22, [sp, #32]
    9ae0:	ldp	x29, x30, [sp], #80
    9ae4:	ret
    9ae8:	add	x0, x0, #0x4, lsl #12
    9aec:	mov	x21, #0xffffffffffffffe2    	// #-30
    9af0:	ldr	w0, [x0, #12456]
    9af4:	cbz	w0, 9d78 <ZSTD_decodeLiteralsBlock+0x318>
    9af8:	cmp	x2, #0x4
    9afc:	b.ls	9ad0 <ZSTD_decodeLiteralsBlock+0x70>  // b.plast
    9b00:	ldr	w0, [x1]
    9b04:	ubfx	x3, x3, #2, #2
    9b08:	cmp	w3, #0x2
    9b0c:	lsr	w22, w0, #4
    9b10:	b.eq	9c14 <ZSTD_decodeLiteralsBlock+0x1b4>  // b.none
    9b14:	cmp	w3, #0x3
    9b18:	b.eq	9bec <ZSTD_decodeLiteralsBlock+0x18c>  // b.none
    9b1c:	eor	w6, w3, #0x1
    9b20:	and	x22, x22, #0x3ff
    9b24:	ubfx	x3, x0, #14, #10
    9b28:	mov	x5, #0x3                   	// #3
    9b2c:	add	x21, x5, x3
    9b30:	cmp	x21, x2
    9b34:	b.hi	9ad0 <ZSTD_decodeLiteralsBlock+0x70>  // b.pmore
    9b38:	stp	x23, x24, [sp, #48]
    9b3c:	add	x23, x20, #0x4, lsl #12
    9b40:	cmp	x22, #0x300
    9b44:	ldr	w0, [x23, #12652]
    9b48:	ccmp	w0, #0x0, #0x4, hi  // hi = pmore
    9b4c:	b.ne	9d90 <ZSTD_decodeLiteralsBlock+0x330>  // b.any
    9b50:	mov	x9, #0x71d8                	// #29144
    9b54:	ldr	w7, [x23, #12624]
    9b58:	add	x2, x1, x5
    9b5c:	cmp	w19, #0x3
    9b60:	add	x24, x20, x9
    9b64:	b.eq	9cf4 <ZSTD_decodeLiteralsBlock+0x294>  // b.none
    9b68:	str	x25, [sp, #64]
    9b6c:	mov	x4, #0x6848                	// #26696
    9b70:	mov	x8, #0x2838                	// #10296
    9b74:	add	x5, x20, x4
    9b78:	add	x25, x20, x8
    9b7c:	mov	x4, x3
    9b80:	mov	x3, x2
    9b84:	cbz	w6, 9d28 <ZSTD_decodeLiteralsBlock+0x2c8>
    9b88:	mov	x2, x22
    9b8c:	mov	x1, x24
    9b90:	mov	x0, x25
    9b94:	mov	x6, #0x800                 	// #2048
    9b98:	bl	6058 <HUF_decompress1X1_DCtx_wksp_bmi2>
    9b9c:	cmn	x0, #0x78
    9ba0:	b.hi	9db4 <ZSTD_decodeLiteralsBlock+0x354>  // b.pmore
    9ba4:	str	x24, [x20, #28952]
    9ba8:	mov	w0, #0x1                   	// #1
    9bac:	str	x22, [x20, #28984]
    9bb0:	cmp	w19, #0x2
    9bb4:	str	w0, [x23, #12456]
    9bb8:	b.ne	9d80 <ZSTD_decodeLiteralsBlock+0x320>  // b.any
    9bbc:	str	x25, [x20, #24]
    9bc0:	ldr	x25, [sp, #64]
    9bc4:	add	x0, x24, x22
    9bc8:	mov	x2, #0x8                   	// #8
    9bcc:	mov	w1, #0x0                   	// #0
    9bd0:	bl	0 <grub_memset>
    9bd4:	mov	x0, x21
    9bd8:	ldp	x19, x20, [sp, #16]
    9bdc:	ldp	x21, x22, [sp, #32]
    9be0:	ldp	x23, x24, [sp, #48]
    9be4:	ldp	x29, x30, [sp], #80
    9be8:	ret
    9bec:	and	w3, w22, #0x3ffff
    9bf0:	and	x22, x22, #0x3ffff
    9bf4:	cmp	w3, #0x20, lsl #12
    9bf8:	ldrb	w3, [x1, #4]
    9bfc:	b.hi	9ad0 <ZSTD_decodeLiteralsBlock+0x70>  // b.pmore
    9c00:	lsl	w3, w3, #10
    9c04:	mov	w6, #0x0                   	// #0
    9c08:	mov	x5, #0x5                   	// #5
    9c0c:	add	w3, w3, w0, lsr #22
    9c10:	b	9b2c <ZSTD_decodeLiteralsBlock+0xcc>
    9c14:	and	x22, x22, #0x3fff
    9c18:	lsr	w3, w0, #18
    9c1c:	mov	w6, #0x0                   	// #0
    9c20:	mov	x5, #0x4                   	// #4
    9c24:	b	9b2c <ZSTD_decodeLiteralsBlock+0xcc>
    9c28:	ldrh	w3, [x1]
    9c2c:	mov	x0, #0x2                   	// #2
    9c30:	ubfx	x19, x3, #4, #12
    9c34:	b	9ab8 <ZSTD_decodeLiteralsBlock+0x58>
    9c38:	ubfx	x0, x3, #2, #2
    9c3c:	cmp	w0, #0x1
    9c40:	b.eq	9ce0 <ZSTD_decodeLiteralsBlock+0x280>  // b.none
    9c44:	cmp	w0, #0x3
    9c48:	b.eq	9cb8 <ZSTD_decodeLiteralsBlock+0x258>  // b.none
    9c4c:	ubfx	x19, x3, #3, #5
    9c50:	mov	x21, #0x2                   	// #2
    9c54:	mov	x0, #0x1                   	// #1
    9c58:	ldrb	w1, [x1, x0]
    9c5c:	mov	x0, #0x71d8                	// #29144
    9c60:	add	x22, x20, x0
    9c64:	add	x2, x19, #0x8
    9c68:	mov	x0, x22
    9c6c:	bl	0 <grub_memset>
    9c70:	str	x22, [x20, #28952]
    9c74:	str	x19, [x20, #28984]
    9c78:	mov	x0, x21
    9c7c:	ldp	x19, x20, [sp, #16]
    9c80:	ldp	x21, x22, [sp, #32]
    9c84:	ldp	x29, x30, [sp], #80
    9c88:	ret
    9c8c:	add	x0, x1, x0
    9c90:	str	x0, [x20, #28952]
    9c94:	str	x19, [x20, #28984]
    9c98:	ldp	x19, x20, [sp, #16]
    9c9c:	b	9ad8 <ZSTD_decodeLiteralsBlock+0x78>
    9ca0:	ldrh	w19, [x1]
    9ca4:	mov	x0, #0x3                   	// #3
    9ca8:	ldrb	w3, [x1, #2]
    9cac:	add	w3, w19, w3, lsl #16
    9cb0:	ubfx	x19, x3, #4, #21
    9cb4:	b	9ab8 <ZSTD_decodeLiteralsBlock+0x58>
    9cb8:	ldrh	w19, [x1]
    9cbc:	ldrb	w3, [x1, #2]
    9cc0:	add	w3, w19, w3, lsl #16
    9cc4:	ubfx	x19, x3, #4, #21
    9cc8:	cmp	x19, #0x20, lsl #12
    9ccc:	ccmp	x2, #0x3, #0x4, ls  // ls = plast
    9cd0:	b.eq	9ad0 <ZSTD_decodeLiteralsBlock+0x70>  // b.none
    9cd4:	mov	x21, #0x4                   	// #4
    9cd8:	mov	x0, #0x3                   	// #3
    9cdc:	b	9c58 <ZSTD_decodeLiteralsBlock+0x1f8>
    9ce0:	ldrh	w3, [x1]
    9ce4:	mov	x21, #0x3                   	// #3
    9ce8:	mov	x0, #0x2                   	// #2
    9cec:	ubfx	x19, x3, #4, #12
    9cf0:	b	9c58 <ZSTD_decodeLiteralsBlock+0x1f8>
    9cf4:	mov	w5, w7
    9cf8:	mov	x1, x22
    9cfc:	mov	x0, x24
    9d00:	ldr	x4, [x20, #24]
    9d04:	cbnz	w6, 9d88 <ZSTD_decodeLiteralsBlock+0x328>
    9d08:	bl	60e8 <HUF_decompress4X_usingDTable_bmi2>
    9d0c:	cmn	x0, #0x78
    9d10:	b.hi	9dc4 <ZSTD_decodeLiteralsBlock+0x364>  // b.pmore
    9d14:	str	x24, [x20, #28952]
    9d18:	mov	w0, #0x1                   	// #1
    9d1c:	str	x22, [x20, #28984]
    9d20:	str	w0, [x23, #12456]
    9d24:	b	9bc4 <ZSTD_decodeLiteralsBlock+0x164>
    9d28:	mov	x2, x22
    9d2c:	mov	x1, x24
    9d30:	mov	x0, x25
    9d34:	mov	x6, #0x800                 	// #2048
    9d38:	bl	6198 <HUF_decompress4X_hufOnly_wksp_bmi2>
    9d3c:	b	9b9c <ZSTD_decodeLiteralsBlock+0x13c>
    9d40:	mov	x2, #0x71d8                	// #29144
    9d44:	add	x22, x20, x2
    9d48:	add	x1, x1, x0
    9d4c:	mov	x2, x19
    9d50:	mov	x0, x22
    9d54:	bl	0 <grub_memmove>
    9d58:	str	x22, [x20, #28952]
    9d5c:	add	x0, x22, x19
    9d60:	str	x19, [x20, #28984]
    9d64:	mov	x2, #0x8                   	// #8
    9d68:	mov	w1, #0x0                   	// #0
    9d6c:	bl	0 <grub_memset>
    9d70:	ldp	x19, x20, [sp, #16]
    9d74:	b	9ad8 <ZSTD_decodeLiteralsBlock+0x78>
    9d78:	ldp	x19, x20, [sp, #16]
    9d7c:	b	9ad8 <ZSTD_decodeLiteralsBlock+0x78>
    9d80:	ldr	x25, [sp, #64]
    9d84:	b	9bc4 <ZSTD_decodeLiteralsBlock+0x164>
    9d88:	bl	5fd0 <HUF_decompress1X_usingDTable_bmi2>
    9d8c:	b	9d0c <ZSTD_decodeLiteralsBlock+0x2ac>
    9d90:	ldr	x2, [x20, #24]
    9d94:	mov	x10, #0x4040                	// #16448
    9d98:	add	x4, x2, x10
    9d9c:	nop
    9da0:	prfm	pldl2keep, [x2]
    9da4:	add	x2, x2, #0x40
    9da8:	cmp	x4, x2
    9dac:	b.ne	9da0 <ZSTD_decodeLiteralsBlock+0x340>  // b.any
    9db0:	b	9b50 <ZSTD_decodeLiteralsBlock+0xf0>
    9db4:	ldp	x19, x20, [sp, #16]
    9db8:	ldp	x23, x24, [sp, #48]
    9dbc:	ldr	x25, [sp, #64]
    9dc0:	b	9ad4 <ZSTD_decodeLiteralsBlock+0x74>
    9dc4:	ldp	x19, x20, [sp, #16]
    9dc8:	ldp	x23, x24, [sp, #48]
    9dcc:	b	9ad4 <ZSTD_decodeLiteralsBlock+0x74>

0000000000009dd0 <ZSTD_decodeSeqHeaders>:
    9dd0:	cbz	x3, a038 <ZSTD_decodeSeqHeaders+0x268>
    9dd4:	sub	sp, sp, #0x80
    9dd8:	stp	x29, x30, [sp, #48]
    9ddc:	add	x29, sp, #0x30
    9de0:	stp	x21, x22, [sp, #80]
    9de4:	mov	x21, x2
    9de8:	ldrb	w22, [x2]
    9dec:	cbz	w22, a004 <ZSTD_decodeSeqHeaders+0x234>
    9df0:	stp	x19, x20, [sp, #64]
    9df4:	cmp	w22, #0x7f
    9df8:	add	x20, x2, x3
    9dfc:	stp	x23, x24, [sp, #96]
    9e00:	add	x5, x2, #0x1
    9e04:	mov	x24, x0
    9e08:	b.gt	9f98 <ZSTD_decodeSeqHeaders+0x1c8>
    9e0c:	str	w22, [x1]
    9e10:	add	x0, x5, #0x4
    9e14:	cmp	x20, x0
    9e18:	b.cc	9fc8 <ZSTD_decodeSeqHeaders+0x1f8>  // b.lo, b.ul, b.last
    9e1c:	adrp	x0, 0 <FSE_versionNumber>
    9e20:	mov	x19, x5
    9e24:	stp	x25, x26, [sp, #112]
    9e28:	add	x25, x24, #0x4, lsl #12
    9e2c:	mov	w4, #0x9                   	// #9
    9e30:	ldr	x23, [x0]
    9e34:	str	w22, [sp, #32]
    9e38:	mov	w3, #0x23                  	// #35
    9e3c:	ldrb	w26, [x19], #1
    9e40:	add	x2, x23, #0x428
    9e44:	ldr	w1, [x25, #12460]
    9e48:	add	x5, x23, #0x2f0
    9e4c:	ldr	w0, [x25, #12652]
    9e50:	add	x7, x23, #0x380
    9e54:	stp	x5, x2, [sp]
    9e58:	sub	x6, x20, x19
    9e5c:	mov	x5, x19
    9e60:	str	w1, [sp, #16]
    9e64:	lsr	w2, w26, #6
    9e68:	str	w0, [sp, #24]
    9e6c:	mov	x1, x24
    9e70:	add	x0, x24, #0x20
    9e74:	bl	7b40 <ZSTD_free+0x290>
    9e78:	cmn	x0, #0x78
    9e7c:	b.hi	9fe4 <ZSTD_decodeSeqHeaders+0x214>  // b.pmore
    9e80:	mov	x1, #0x1028                	// #4136
    9e84:	ldr	w2, [x25, #12460]
    9e88:	add	x19, x19, x0
    9e8c:	add	x0, x24, x1
    9e90:	ldr	w1, [x25, #12652]
    9e94:	add	x3, x23, #0x630
    9e98:	add	x4, x23, #0x40
    9e9c:	stp	x4, x3, [sp]
    9ea0:	sub	x6, x20, x19
    9ea4:	str	w2, [sp, #16]
    9ea8:	mov	x5, x19
    9eac:	str	w1, [sp, #24]
    9eb0:	add	x7, x23, #0xc0
    9eb4:	str	w22, [sp, #32]
    9eb8:	ubfx	x2, x26, #4, #2
    9ebc:	add	x1, x24, #0x10
    9ec0:	mov	w4, #0x8                   	// #8
    9ec4:	mov	w3, #0x1f                  	// #31
    9ec8:	bl	7b40 <ZSTD_free+0x290>
    9ecc:	cmn	x0, #0x78
    9ed0:	b.hi	9fe4 <ZSTD_decodeSeqHeaders+0x214>  // b.pmore
    9ed4:	ldr	w2, [x25, #12460]
    9ed8:	add	x3, x23, #0x738
    9edc:	ldr	w1, [x25, #12652]
    9ee0:	add	x4, x23, #0x140
    9ee4:	stp	x4, x3, [sp]
    9ee8:	add	x19, x19, x0
    9eec:	sub	x6, x20, x19
    9ef0:	str	w2, [sp, #16]
    9ef4:	mov	x5, x19
    9ef8:	str	w1, [sp, #24]
    9efc:	add	x7, x23, #0x218
    9f00:	str	w22, [sp, #32]
    9f04:	ubfx	x2, x26, #2, #2
    9f08:	add	x1, x24, #0x8
    9f0c:	mov	x0, #0x1830                	// #6192
    9f10:	mov	w4, #0x9                   	// #9
    9f14:	add	x0, x24, x0
    9f18:	mov	w3, #0x34                  	// #52
    9f1c:	bl	7b40 <ZSTD_free+0x290>
    9f20:	cmn	x0, #0x78
    9f24:	b.hi	9fe4 <ZSTD_decodeSeqHeaders+0x214>  // b.pmore
    9f28:	ldr	w1, [x25, #12652]
    9f2c:	add	x19, x19, x0
    9f30:	cbz	w1, 9f84 <ZSTD_decodeSeqHeaders+0x1b4>
    9f34:	ldr	x0, [x24, #28752]
    9f38:	lsl	w22, w22, #6
    9f3c:	ldr	x2, [x24, #28760]
    9f40:	mov	x1, #0x20000               	// #131072
    9f44:	sxtw	x22, w22
    9f48:	sub	x0, x0, x2
    9f4c:	cmp	x0, x1
    9f50:	csel	x0, x0, x1, ls  // ls = plast
    9f54:	cmp	x0, x22
    9f58:	csel	x22, x0, x22, ls  // ls = plast
    9f5c:	ldr	x1, [x24, #28768]
    9f60:	cbz	x22, 9f80 <ZSTD_decodeSeqHeaders+0x1b0>
    9f64:	sub	x1, x1, x22
    9f68:	mov	x0, #0x0                   	// #0
    9f6c:	nop
    9f70:	prfm	pldl2keep, [x1, x0]
    9f74:	add	x0, x0, #0x40
    9f78:	cmp	x22, x0
    9f7c:	b.hi	9f70 <ZSTD_decodeSeqHeaders+0x1a0>  // b.pmore
    9f80:	str	wzr, [x25, #12652]
    9f84:	sub	x0, x19, x21
    9f88:	ldp	x19, x20, [sp, #64]
    9f8c:	ldp	x23, x24, [sp, #96]
    9f90:	ldp	x25, x26, [sp, #112]
    9f94:	b	9ff4 <ZSTD_decodeSeqHeaders+0x224>
    9f98:	cmp	w22, #0xff
    9f9c:	b.eq	a01c <ZSTD_decodeSeqHeaders+0x24c>  // b.none
    9fa0:	cmp	x20, x5
    9fa4:	b.ls	9fc8 <ZSTD_decodeSeqHeaders+0x1f8>  // b.plast
    9fa8:	ldrb	w0, [x2, #1]
    9fac:	sub	w22, w22, #0x80
    9fb0:	add	x5, x2, #0x2
    9fb4:	add	w22, w0, w22, lsl #8
    9fb8:	str	w22, [x1]
    9fbc:	add	x0, x5, #0x4
    9fc0:	cmp	x20, x0
    9fc4:	b.cs	9e1c <ZSTD_decodeSeqHeaders+0x4c>  // b.hs, b.nlast
    9fc8:	mov	x0, #0xffffffffffffffb8    	// #-72
    9fcc:	ldp	x29, x30, [sp, #48]
    9fd0:	ldp	x19, x20, [sp, #64]
    9fd4:	ldp	x21, x22, [sp, #80]
    9fd8:	ldp	x23, x24, [sp, #96]
    9fdc:	add	sp, sp, #0x80
    9fe0:	ret
    9fe4:	ldp	x19, x20, [sp, #64]
    9fe8:	mov	x0, #0xffffffffffffffec    	// #-20
    9fec:	ldp	x23, x24, [sp, #96]
    9ff0:	ldp	x25, x26, [sp, #112]
    9ff4:	ldp	x29, x30, [sp, #48]
    9ff8:	ldp	x21, x22, [sp, #80]
    9ffc:	add	sp, sp, #0x80
    a000:	ret
    a004:	mov	x0, #0x1                   	// #1
    a008:	str	wzr, [x1]
    a00c:	ldp	x29, x30, [sp, #48]
    a010:	ldp	x21, x22, [sp, #80]
    a014:	add	sp, sp, #0x80
    a018:	ret
    a01c:	add	x5, x2, #0x3
    a020:	cmp	x5, x20
    a024:	b.hi	9fc8 <ZSTD_decodeSeqHeaders+0x1f8>  // b.pmore
    a028:	ldurh	w22, [x2, #1]
    a02c:	mov	w2, #0x7f00                	// #32512
    a030:	add	w22, w22, w2
    a034:	b	9e0c <ZSTD_decodeSeqHeaders+0x3c>
    a038:	mov	x0, #0xffffffffffffffb8    	// #-72
    a03c:	ret
	...
    a048:	sub	sp, sp, #0x160
    a04c:	stp	x29, x30, [sp, #16]
    a050:	add	x29, sp, #0x10
    a054:	stp	x19, x20, [sp, #32]
    a058:	mov	x20, x1
    a05c:	mov	x19, x2
    a060:	mov	x1, x3
    a064:	mov	x2, x4
    a068:	stp	x21, x22, [sp, #48]
    a06c:	mov	x22, x3
    a070:	mov	x21, x4
    a074:	stp	x23, x24, [sp, #64]
    a078:	mov	w23, w5
    a07c:	mov	x24, x0
    a080:	stp	x25, x26, [sp, #80]
    a084:	bl	9a60 <ZSTD_decodeLiteralsBlock>
    a088:	mov	x26, x0
    a08c:	cmn	x0, #0x78
    a090:	b.ls	a0b4 <ZSTD_decodeSeqHeaders+0x2e4>  // b.plast
    a094:	mov	x0, x26
    a098:	ldp	x29, x30, [sp, #16]
    a09c:	ldp	x19, x20, [sp, #32]
    a0a0:	ldp	x21, x22, [sp, #48]
    a0a4:	ldp	x23, x24, [sp, #64]
    a0a8:	ldp	x25, x26, [sp, #80]
    a0ac:	add	sp, sp, #0x160
    a0b0:	ret
    a0b4:	add	x22, x22, x0
    a0b8:	sub	x21, x21, x0
    a0bc:	mov	x3, x21
    a0c0:	mov	x2, x22
    a0c4:	add	x1, sp, #0xcc
    a0c8:	mov	x0, x24
    a0cc:	bl	9dd0 <ZSTD_decodeSeqHeaders>
    a0d0:	mov	x26, x0
    a0d4:	cmn	x0, #0x78
    a0d8:	b.hi	a094 <ZSTD_decodeSeqHeaders+0x2c4>  // b.pmore
    a0dc:	ldr	w25, [sp, #204]
    a0e0:	add	x3, x22, x0
    a0e4:	sub	x4, x21, x0
    a0e8:	cbz	w23, a14c <ZSTD_decodeSeqHeaders+0x37c>
    a0ec:	ldr	x1, [x24, #28792]
    a0f0:	mov	x0, #0x1000000             	// #16777216
    a0f4:	cmp	x1, x0
    a0f8:	b.hi	a14c <ZSTD_decodeSeqHeaders+0x37c>  // b.pmore
    a0fc:	ldr	x1, [x24, #28952]
    a100:	str	x1, [sp, #208]
    a104:	ldr	x21, [x24, #28984]
    a108:	add	x19, x20, x19
    a10c:	mov	x22, x20
    a110:	add	x0, x1, x21
    a114:	str	x0, [sp, #120]
    a118:	cbnz	w25, a7b8 <ZSTD_decodeSeqHeaders+0x9e8>
    a11c:	ldr	x0, [sp, #120]
    a120:	sub	x19, x19, x22
    a124:	mov	x26, #0xffffffffffffffba    	// #-70
    a128:	sub	x21, x0, x1
    a12c:	cmp	x21, x19
    a130:	b.hi	a094 <ZSTD_decodeSeqHeaders+0x2c4>  // b.pmore
    a134:	mov	x2, x21
    a138:	mov	x0, x22
    a13c:	bl	0 <grub_memmove>
    a140:	add	x8, x22, x21
    a144:	sub	x26, x8, x20
    a148:	b	a094 <ZSTD_decodeSeqHeaders+0x2c4>
    a14c:	cmp	w25, #0x0
    a150:	b.le	a0fc <ZSTD_decodeSeqHeaders+0x32c>
    a154:	ldr	x0, [x24, #16]
    a158:	mov	w5, #0x1                   	// #1
    a15c:	ldr	w6, [x0, #4]
    a160:	lsl	w5, w5, w6
    a164:	cbz	w5, a1a8 <ZSTD_decodeSeqHeaders+0x3d8>
    a168:	sub	w5, w5, #0x1
    a16c:	add	x2, x0, #0x12
    a170:	add	x0, x0, #0xa
    a174:	mov	w1, #0x0                   	// #0
    a178:	add	x5, x2, w5, uxtw #3
    a17c:	nop
    a180:	ldrb	w2, [x0], #8
    a184:	cmp	w2, #0x16
    a188:	cinc	w1, w1, hi  // hi = pmore
    a18c:	cmp	x5, x0
    a190:	b.ne	a180 <ZSTD_decodeSeqHeaders+0x3b0>  // b.any
    a194:	mov	w0, #0x8                   	// #8
    a198:	sub	w0, w0, w6
    a19c:	lsl	w1, w1, w0
    a1a0:	cmp	w1, #0x6
    a1a4:	b.hi	a7ec <ZSTD_decodeSeqHeaders+0xa1c>  // b.pmore
    a1a8:	ldr	x21, [x24, #28952]
    a1ac:	add	x19, x20, x19
    a1b0:	ldr	x2, [x24, #28984]
    a1b4:	str	x21, [sp, #208]
    a1b8:	ldr	x0, [x24, #28752]
    a1bc:	str	x0, [sp, #128]
    a1c0:	add	x0, x21, x2
    a1c4:	str	x0, [sp, #120]
    a1c8:	ldr	x0, [x24, #28760]
    a1cc:	str	x0, [sp, #144]
    a1d0:	ldr	x0, [x24, #28768]
    a1d4:	str	x0, [sp, #152]
    a1d8:	add	x21, x24, #0x4, lsl #12
    a1dc:	mov	w0, #0x1                   	// #1
    a1e0:	ldr	w5, [x21, #10300]
    a1e4:	ldr	w2, [x21, #10304]
    a1e8:	ldr	w1, [x21, #10308]
    a1ec:	stp	x5, x2, [sp, #304]
    a1f0:	str	x1, [sp, #320]
    a1f4:	str	w0, [x21, #12460]
    a1f8:	cbz	x4, a83c <ZSTD_decodeSeqHeaders+0xa6c>
    a1fc:	add	x0, x3, x4
    a200:	add	x1, x3, #0x8
    a204:	stp	x3, x1, [sp, #240]
    a208:	cmp	x4, #0x7
    a20c:	ldurb	w0, [x0, #-1]
    a210:	b.ls	a264 <ZSTD_decodeSeqHeaders+0x494>  // b.plast
    a214:	sub	x1, x4, #0x8
    a218:	add	x2, x3, x1
    a21c:	str	x2, [sp, #232]
    a220:	ldr	x1, [x3, x1]
    a224:	str	x1, [sp, #216]
    a228:	cbz	w0, a240 <ZSTD_decodeSeqHeaders+0x470>
    a22c:	clz	w0, w0
    a230:	cmn	x4, #0x78
    a234:	sub	w0, w0, #0x17
    a238:	str	w0, [sp, #224]
    a23c:	b.ls	a2d4 <ZSTD_decodeSeqHeaders+0x504>  // b.plast
    a240:	mov	x26, #0xffffffffffffffec    	// #-20
    a244:	mov	x0, x26
    a248:	ldp	x29, x30, [sp, #16]
    a24c:	ldp	x19, x20, [sp, #32]
    a250:	ldp	x21, x22, [sp, #48]
    a254:	ldp	x23, x24, [sp, #64]
    a258:	ldp	x25, x26, [sp, #80]
    a25c:	add	sp, sp, #0x160
    a260:	ret
    a264:	ldrb	w1, [x3]
    a268:	cmp	x4, #0x5
    a26c:	str	x1, [sp, #216]
    a270:	str	x3, [sp, #232]
    a274:	b.eq	a294 <ZSTD_decodeSeqHeaders+0x4c4>  // b.none
    a278:	b.ls	a604 <ZSTD_decodeSeqHeaders+0x834>  // b.plast
    a27c:	cmp	x4, #0x6
    a280:	b.eq	a28c <ZSTD_decodeSeqHeaders+0x4bc>  // b.none
    a284:	ldrb	w2, [x3, #6]
    a288:	add	x1, x1, x2, lsl #48
    a28c:	ldrb	w2, [x3, #5]
    a290:	add	x1, x1, x2, lsl #40
    a294:	ldrb	w2, [x3, #4]
    a298:	add	x1, x1, x2, lsl #32
    a29c:	ldrb	w2, [x3, #3]
    a2a0:	add	x1, x1, x2, lsl #24
    a2a4:	ldrb	w2, [x3, #2]
    a2a8:	add	x1, x1, x2, lsl #16
    a2ac:	ldrb	w2, [x3, #1]
    a2b0:	add	x1, x1, x2, lsl #8
    a2b4:	str	x1, [sp, #216]
    a2b8:	cbz	w0, a240 <ZSTD_decodeSeqHeaders+0x470>
    a2bc:	mov	w1, #0x9                   	// #9
    a2c0:	sub	w4, w1, w4
    a2c4:	clz	w0, w0
    a2c8:	add	w0, w0, w4, lsl #3
    a2cc:	sub	w0, w0, #0x1f
    a2d0:	str	w0, [sp, #224]
    a2d4:	ldr	x3, [x24]
    a2d8:	add	x2, sp, #0xd8
    a2dc:	add	x1, x2, #0x30
    a2e0:	add	x0, x2, #0x28
    a2e4:	bl	82f0 <ZSTD_free+0xa40>
    a2e8:	ldr	x3, [x24, #16]
    a2ec:	add	x2, sp, #0xd8
    a2f0:	add	x1, x2, #0x40
    a2f4:	add	x0, x2, #0x38
    a2f8:	bl	82f0 <ZSTD_free+0xa40>
    a2fc:	ldr	x3, [x24, #8]
    a300:	add	x2, sp, #0xd8
    a304:	add	x0, x2, #0x48
    a308:	add	x1, x2, #0x50
    a30c:	bl	82f0 <ZSTD_free+0xa40>
    a310:	ldr	w0, [sp, #224]
    a314:	cmp	w0, #0x40
    a318:	b.hi	a240 <ZSTD_decodeSeqHeaders+0x470>  // b.pmore
    a31c:	sub	x1, x19, #0x8
    a320:	mov	x22, x20
    a324:	stp	x27, x28, [sp, #96]
    a328:	str	x19, [sp, #136]
    a32c:	str	x1, [sp, #160]
    a330:	sub	x1, x19, #0xd
    a334:	str	x1, [sp, #168]
    a338:	stp	x20, x21, [sp, #176]
    a33c:	ldr	x1, [sp, #232]
    a340:	ldr	x17, [sp, #248]
    a344:	cmp	x1, x17
    a348:	b.cs	a798 <ZSTD_decodeSeqHeaders+0x9c8>  // b.hs, b.nlast
    a34c:	ldr	x3, [sp, #240]
    a350:	cmp	x1, x3
    a354:	b.eq	a380 <ZSTD_decodeSeqHeaders+0x5b0>  // b.none
    a358:	lsr	w2, w0, #3
    a35c:	lsr	w4, w0, #3
    a360:	sub	x2, x1, x2
    a364:	cmp	x3, x2
    a368:	b.hi	a6a4 <ZSTD_decodeSeqHeaders+0x8d4>  // b.pmore
    a36c:	ldr	x1, [x2]
    a370:	sub	w0, w0, w4, lsl #3
    a374:	str	x1, [sp, #216]
    a378:	str	w0, [sp, #224]
    a37c:	str	x2, [sp, #232]
    a380:	ldr	x18, [sp, #304]
    a384:	cbz	w25, a910 <ZSTD_decodeSeqHeaders+0xb40>
    a388:	ldp	x8, x9, [sp, #272]
    a38c:	ldp	x6, x14, [sp, #256]
    a390:	ldp	x7, x13, [sp, #288]
    a394:	lsl	x8, x8, #3
    a398:	add	x10, x9, x8
    a39c:	lsl	x6, x6, #3
    a3a0:	add	x5, x14, x6
    a3a4:	lsl	x7, x7, #3
    a3a8:	ldrb	w0, [x10, #2]
    a3ac:	add	x11, x13, x7
    a3b0:	ldrb	w12, [x5, #2]
    a3b4:	ldr	w28, [x5, #4]
    a3b8:	ldrb	w2, [x11, #2]
    a3bc:	ldr	w3, [x11, #4]
    a3c0:	add	w1, w12, w2
    a3c4:	add	w1, w1, w0
    a3c8:	cbnz	w0, a3e0 <ZSTD_decodeSeqHeaders+0x610>
    a3cc:	cbz	w28, a6b4 <ZSTD_decodeSeqHeaders+0x8e4>
    a3d0:	ldr	w16, [sp, #224]
    a3d4:	mov	w0, w16
    a3d8:	mov	x21, x18
    a3dc:	b	a41c <ZSTD_decodeSeqHeaders+0x64c>
    a3e0:	ldr	x15, [sp, #216]
    a3e4:	neg	w23, w0
    a3e8:	ldr	w16, [sp, #224]
    a3ec:	cmp	w0, #0x1
    a3f0:	ldr	w4, [x10, #4]
    a3f4:	add	w0, w0, w16
    a3f8:	str	w0, [sp, #224]
    a3fc:	lsl	x15, x15, x16
    a400:	mov	w16, w0
    a404:	lsr	x23, x15, x23
    a408:	add	x21, x4, x23
    a40c:	b.eq	a924 <ZSTD_decodeSeqHeaders+0xb54>  // b.none
    a410:	ldr	x15, [sp, #312]
    a414:	stp	x21, x18, [sp, #304]
    a418:	str	x15, [sp, #320]
    a41c:	mov	w20, w3
    a420:	cbnz	w2, a704 <ZSTD_decodeSeqHeaders+0x934>
    a424:	cmp	w1, #0x1e
    a428:	b.hi	a740 <ZSTD_decodeSeqHeaders+0x970>  // b.pmore
    a42c:	ldr	x2, [sp, #216]
    a430:	and	w1, w0, #0x3f
    a434:	mov	w28, w28
    a438:	lsl	x1, x2, x1
    a43c:	cbnz	w12, a724 <ZSTD_decodeSeqHeaders+0x954>
    a440:	ldrb	w15, [x5, #3]
    a444:	lsr	x5, x1, #1
    a448:	ldrh	w12, [x14, x6]
    a44c:	mov	w1, #0x3f                  	// #63
    a450:	add	w0, w15, w0
    a454:	str	w0, [sp, #224]
    a458:	sub	w6, w1, w15
    a45c:	add	x26, x20, x28
    a460:	ldr	x1, [sp, #136]
    a464:	add	x23, x22, x26
    a468:	ldrb	w11, [x11, #3]
    a46c:	mov	w3, #0x3f                  	// #63
    a470:	ldrh	w7, [x13, x7]
    a474:	cmp	x23, x1
    a478:	lsl	x1, x2, x0
    a47c:	add	w0, w0, w11
    a480:	str	w0, [sp, #224]
    a484:	lsr	x1, x1, #1
    a488:	lsl	x2, x2, x0
    a48c:	sub	w11, w3, w11
    a490:	ldrb	w10, [x10, #3]
    a494:	lsr	x2, x2, #1
    a498:	ldrh	w8, [x9, x8]
    a49c:	lsr	x5, x5, x6
    a4a0:	sub	w9, w3, w10
    a4a4:	lsr	x1, x1, x11
    a4a8:	add	x12, x5, w12, uxth
    a4ac:	add	x5, x1, w7, uxth
    a4b0:	lsr	x2, x2, x9
    a4b4:	add	w0, w0, w10
    a4b8:	ldr	x1, [sp, #208]
    a4bc:	add	x2, x2, w8, uxth
    a4c0:	str	w0, [sp, #224]
    a4c4:	str	x12, [sp, #256]
    a4c8:	add	x27, x1, x28
    a4cc:	str	x2, [sp, #272]
    a4d0:	str	x5, [sp, #288]
    a4d4:	b.hi	a7d4 <ZSTD_decodeSeqHeaders+0xa04>  // b.pmore
    a4d8:	ldr	x0, [sp, #120]
    a4dc:	cmp	x27, x0
    a4e0:	b.hi	a7e0 <ZSTD_decodeSeqHeaders+0xa10>  // b.pmore
    a4e4:	ldr	x0, [sp, #160]
    a4e8:	add	x24, x22, x28
    a4ec:	cmp	x24, x0
    a4f0:	b.hi	a808 <ZSTD_decodeSeqHeaders+0xa38>  // b.pmore
    a4f4:	mov	x0, x22
    a4f8:	mov	x2, #0x8                   	// #8
    a4fc:	bl	0 <grub_memmove>
    a500:	cmp	x28, #0x8
    a504:	b.hi	a6d0 <ZSTD_decodeSeqHeaders+0x900>  // b.pmore
    a508:	ldr	x0, [sp, #128]
    a50c:	str	x27, [sp, #208]
    a510:	sub	x28, x24, x21
    a514:	sub	x0, x24, x0
    a518:	cmp	x21, x0
    a51c:	b.hi	a620 <ZSTD_decodeSeqHeaders+0x850>  // b.pmore
    a520:	cmp	x21, #0x7
    a524:	b.hi	a854 <ZSTD_decodeSeqHeaders+0xa84>  // b.pmore
    a528:	ldrb	w1, [x28]
    a52c:	adrp	x0, 0 <FSE_versionNumber>
    a530:	strb	w1, [x24]
    a534:	mov	x2, #0x4                   	// #4
    a538:	ldr	x0, [x0]
    a53c:	ldrb	w1, [x28, #1]
    a540:	strb	w1, [x24, #1]
    a544:	add	x1, x0, #0x960
    a548:	add	x0, x0, #0x940
    a54c:	ldrb	w5, [x28, #2]
    a550:	strb	w5, [x24, #2]
    a554:	ldr	w4, [x0, x21, lsl #2]
    a558:	add	x0, x24, x2
    a55c:	ldrb	w5, [x28, #3]
    a560:	ldr	w1, [x1, x21, lsl #2]
    a564:	strb	w5, [x24, #3]
    a568:	add	x1, x28, x1
    a56c:	sub	x28, x1, w4, sxtw
    a570:	bl	0 <grub_memmove>
    a574:	ldr	x0, [sp, #168]
    a578:	add	x28, x28, #0x8
    a57c:	add	x21, x24, #0x8
    a580:	cmp	x23, x0
    a584:	b.ls	a888 <ZSTD_decodeSeqHeaders+0xab8>  // b.plast
    a588:	ldr	x0, [sp, #160]
    a58c:	cmp	x0, x21
    a590:	b.hi	a8b4 <ZSTD_decodeSeqHeaders+0xae4>  // b.pmore
    a594:	cmp	x23, x21
    a598:	b.ls	a5bc <ZSTD_decodeSeqHeaders+0x7ec>  // b.plast
    a59c:	sub	x23, x23, x21
    a5a0:	mov	x0, #0x0                   	// #0
    a5a4:	nop
    a5a8:	ldrb	w1, [x28, x0]
    a5ac:	strb	w1, [x21, x0]
    a5b0:	add	x0, x0, #0x1
    a5b4:	cmp	x0, x23
    a5b8:	b.ne	a5a8 <ZSTD_decodeSeqHeaders+0x7d8>  // b.any
    a5bc:	cmn	x26, #0x78
    a5c0:	b.hi	a91c <ZSTD_decodeSeqHeaders+0xb4c>  // b.pmore
    a5c4:	ldr	w0, [sp, #224]
    a5c8:	sub	w25, w25, #0x1
    a5cc:	add	x22, x22, x26
    a5d0:	cmp	w0, #0x40
    a5d4:	b.ls	a33c <ZSTD_decodeSeqHeaders+0x56c>  // b.plast
    a5d8:	ldr	x19, [sp, #136]
    a5dc:	ldp	x20, x21, [sp, #176]
    a5e0:	cbnz	w25, a904 <ZSTD_decodeSeqHeaders+0xb34>
    a5e4:	ldr	x18, [sp, #304]
    a5e8:	ldp	x1, x0, [sp, #312]
    a5ec:	ldp	x27, x28, [sp, #96]
    a5f0:	str	w18, [x21, #10300]
    a5f4:	str	w1, [x21, #10304]
    a5f8:	str	w0, [x21, #10308]
    a5fc:	ldr	x1, [sp, #208]
    a600:	b	a11c <ZSTD_decodeSeqHeaders+0x34c>
    a604:	cmp	x4, #0x3
    a608:	b.eq	a2a4 <ZSTD_decodeSeqHeaders+0x4d4>  // b.none
    a60c:	cmp	x4, #0x4
    a610:	b.eq	a29c <ZSTD_decodeSeqHeaders+0x4cc>  // b.none
    a614:	cmp	x4, #0x2
    a618:	b.eq	a2ac <ZSTD_decodeSeqHeaders+0x4dc>  // b.none
    a61c:	b	a2b8 <ZSTD_decodeSeqHeaders+0x4e8>
    a620:	ldr	x0, [sp, #144]
    a624:	sub	x0, x24, x0
    a628:	cmp	x21, x0
    a62c:	b.hi	a7e0 <ZSTD_decodeSeqHeaders+0xa10>  // b.pmore
    a630:	ldr	x0, [sp, #128]
    a634:	ldr	x2, [sp, #152]
    a638:	sub	x1, x28, x0
    a63c:	add	x1, x2, x1
    a640:	add	x0, x1, x20
    a644:	cmp	x2, x0
    a648:	b.cs	a8ec <ZSTD_decodeSeqHeaders+0xb1c>  // b.hs, b.nlast
    a64c:	ldr	x19, [sp, #128]
    a650:	mov	x0, x24
    a654:	sub	x28, x19, x28
    a658:	mov	x2, x28
    a65c:	bl	0 <grub_memmove>
    a660:	ldr	x0, [sp, #160]
    a664:	add	x24, x24, x28
    a668:	sub	x20, x20, x28
    a66c:	cmp	x0, x24
    a670:	ccmp	x20, #0x2, #0x0, cs  // cs = hs, nlast
    a674:	b.hi	a8fc <ZSTD_decodeSeqHeaders+0xb2c>  // b.pmore
    a678:	cbz	x20, a5bc <ZSTD_decodeSeqHeaders+0x7ec>
    a67c:	mov	x3, x19
    a680:	mov	w0, #0x0                   	// #0
    a684:	mov	x1, #0x0                   	// #0
    a688:	ldrb	w2, [x3, x1]
    a68c:	add	w0, w0, #0x1
    a690:	strb	w2, [x24, x1]
    a694:	mov	w1, w0
    a698:	cmp	x20, w0, uxtw
    a69c:	b.hi	a688 <ZSTD_decodeSeqHeaders+0x8b8>  // b.pmore
    a6a0:	b	a5bc <ZSTD_decodeSeqHeaders+0x7ec>
    a6a4:	sub	x2, x1, x3
    a6a8:	mov	w4, w2
    a6ac:	sub	x2, x1, w2, uxtw
    a6b0:	b	a36c <ZSTD_decodeSeqHeaders+0x59c>
    a6b4:	ldr	x4, [sp, #312]
    a6b8:	ldr	w16, [sp, #224]
    a6bc:	cmp	x4, #0x0
    a6c0:	cinc	x21, x4, eq  // eq = none
    a6c4:	mov	w0, w16
    a6c8:	stp	x21, x18, [sp, #304]
    a6cc:	b	a41c <ZSTD_decodeSeqHeaders+0x64c>
    a6d0:	ldr	x1, [sp, #208]
    a6d4:	add	x28, x22, #0x8
    a6d8:	add	x19, x1, #0x8
    a6dc:	nop
    a6e0:	mov	x1, x19
    a6e4:	mov	x0, x28
    a6e8:	mov	x2, #0x8                   	// #8
    a6ec:	add	x28, x28, x2
    a6f0:	bl	0 <grub_memmove>
    a6f4:	add	x19, x19, #0x8
    a6f8:	cmp	x24, x28
    a6fc:	b.hi	a6e0 <ZSTD_decodeSeqHeaders+0x910>  // b.pmore
    a700:	b	a508 <ZSTD_decodeSeqHeaders+0x738>
    a704:	ldr	x15, [sp, #216]
    a708:	neg	w16, w2
    a70c:	lsl	x15, x15, x0
    a710:	add	w0, w0, w2
    a714:	lsr	x2, x15, x16
    a718:	add	x20, x20, x2
    a71c:	str	w0, [sp, #224]
    a720:	b	a424 <ZSTD_decodeSeqHeaders+0x654>
    a724:	neg	w15, w12
    a728:	add	w0, w0, w12
    a72c:	str	w0, [sp, #224]
    a730:	lsr	x1, x1, x15
    a734:	add	x28, x28, x1
    a738:	lsl	x1, x2, x0
    a73c:	b	a440 <ZSTD_decodeSeqHeaders+0x670>
    a740:	cmp	w0, #0x40
    a744:	b.hi	a42c <ZSTD_decodeSeqHeaders+0x65c>  // b.pmore
    a748:	ldr	x1, [sp, #232]
    a74c:	cmp	x1, x17
    a750:	b.cs	a868 <ZSTD_decodeSeqHeaders+0xa98>  // b.hs, b.nlast
    a754:	ldr	x15, [sp, #240]
    a758:	cmp	x1, x15
    a75c:	b.eq	a42c <ZSTD_decodeSeqHeaders+0x65c>  // b.none
    a760:	lsr	w2, w0, #3
    a764:	lsr	w16, w0, #3
    a768:	sub	x2, x1, x2
    a76c:	cmp	x15, x2
    a770:	b.ls	a780 <ZSTD_decodeSeqHeaders+0x9b0>  // b.plast
    a774:	sub	x2, x1, x15
    a778:	mov	w16, w2
    a77c:	sub	x2, x1, w2, uxtw
    a780:	sub	w0, w0, w16, lsl #3
    a784:	str	x2, [sp, #232]
    a788:	ldr	x2, [x2]
    a78c:	and	w1, w0, #0x3f
    a790:	str	x2, [sp, #216]
    a794:	b	a434 <ZSTD_decodeSeqHeaders+0x664>
    a798:	lsr	w2, w0, #3
    a79c:	and	w0, w0, #0x7
    a7a0:	sub	x1, x1, x2
    a7a4:	str	w0, [sp, #224]
    a7a8:	str	x1, [sp, #232]
    a7ac:	ldr	x0, [x1]
    a7b0:	str	x0, [sp, #216]
    a7b4:	b	a380 <ZSTD_decodeSeqHeaders+0x5b0>
    a7b8:	ldr	x0, [x24, #28752]
    a7bc:	str	x0, [sp, #128]
    a7c0:	ldr	x0, [x24, #28760]
    a7c4:	str	x0, [sp, #144]
    a7c8:	ldr	x0, [x24, #28768]
    a7cc:	str	x0, [sp, #152]
    a7d0:	b	a1d8 <ZSTD_decodeSeqHeaders+0x408>
    a7d4:	mov	x26, #0xffffffffffffffba    	// #-70
    a7d8:	ldp	x27, x28, [sp, #96]
    a7dc:	b	a094 <ZSTD_decodeSeqHeaders+0x2c4>
    a7e0:	mov	x26, #0xffffffffffffffec    	// #-20
    a7e4:	ldp	x27, x28, [sp, #96]
    a7e8:	b	a094 <ZSTD_decodeSeqHeaders+0x2c4>
    a7ec:	mov	w5, w25
    a7f0:	mov	x2, x19
    a7f4:	mov	x1, x20
    a7f8:	mov	x0, x24
    a7fc:	bl	83a8 <ZSTD_free+0xaf8>
    a800:	mov	x26, x0
    a804:	b	a094 <ZSTD_decodeSeqHeaders+0x2c4>
    a808:	ldp	x6, x7, [sp, #120]
    a80c:	mov	x4, x21
    a810:	ldp	x1, x0, [sp, #136]
    a814:	str	x0, [sp]
    a818:	ldr	x0, [sp, #152]
    a81c:	str	x0, [sp, #8]
    a820:	mov	x3, x20
    a824:	mov	x2, x28
    a828:	add	x5, sp, #0xd0
    a82c:	mov	x0, x22
    a830:	bl	8018 <ZSTD_free+0x768>
    a834:	mov	x26, x0
    a838:	b	a5bc <ZSTD_decodeSeqHeaders+0x7ec>
    a83c:	add	x0, sp, #0xd8
    a840:	mov	x2, #0x28                  	// #40
    a844:	mov	w1, #0x0                   	// #0
    a848:	mov	x26, #0xffffffffffffffec    	// #-20
    a84c:	bl	0 <grub_memset>
    a850:	b	a094 <ZSTD_decodeSeqHeaders+0x2c4>
    a854:	mov	x1, x28
    a858:	mov	x0, x24
    a85c:	mov	x2, #0x8                   	// #8
    a860:	bl	0 <grub_memmove>
    a864:	b	a574 <ZSTD_decodeSeqHeaders+0x7a4>
    a868:	lsr	w2, w0, #3
    a86c:	and	w0, w0, #0x7
    a870:	sub	x2, x1, x2
    a874:	str	x2, [sp, #232]
    a878:	mov	w1, w0
    a87c:	ldr	x2, [x2]
    a880:	str	x2, [sp, #216]
    a884:	b	a434 <ZSTD_decodeSeqHeaders+0x664>
    a888:	add	x23, x24, x20
    a88c:	nop
    a890:	mov	x1, x28
    a894:	mov	x0, x21
    a898:	mov	x2, #0x8                   	// #8
    a89c:	add	x21, x21, x2
    a8a0:	bl	0 <grub_memmove>
    a8a4:	add	x28, x28, #0x8
    a8a8:	cmp	x23, x21
    a8ac:	b.hi	a890 <ZSTD_decodeSeqHeaders+0xac0>  // b.pmore
    a8b0:	b	a5bc <ZSTD_decodeSeqHeaders+0x7ec>
    a8b4:	mov	x27, x0
    a8b8:	sub	x19, x0, x21
    a8bc:	mov	x24, x28
    a8c0:	mov	x1, x24
    a8c4:	mov	x0, x21
    a8c8:	mov	x2, #0x8                   	// #8
    a8cc:	add	x21, x21, x2
    a8d0:	bl	0 <grub_memmove>
    a8d4:	add	x24, x24, #0x8
    a8d8:	cmp	x27, x21
    a8dc:	b.hi	a8c0 <ZSTD_decodeSeqHeaders+0xaf0>  // b.pmore
    a8e0:	add	x28, x28, x19
    a8e4:	ldr	x21, [sp, #160]
    a8e8:	b	a594 <ZSTD_decodeSeqHeaders+0x7c4>
    a8ec:	mov	x2, x20
    a8f0:	mov	x0, x24
    a8f4:	bl	0 <grub_memmove>
    a8f8:	b	a5bc <ZSTD_decodeSeqHeaders+0x7ec>
    a8fc:	ldr	x28, [sp, #128]
    a900:	b	a520 <ZSTD_decodeSeqHeaders+0x750>
    a904:	mov	x26, #0xffffffffffffffec    	// #-20
    a908:	ldp	x27, x28, [sp, #96]
    a90c:	b	a244 <ZSTD_decodeSeqHeaders+0x474>
    a910:	ldr	x19, [sp, #136]
    a914:	ldp	x20, x21, [sp, #176]
    a918:	b	a5e8 <ZSTD_decodeSeqHeaders+0x818>
    a91c:	ldp	x27, x28, [sp, #96]
    a920:	b	a094 <ZSTD_decodeSeqHeaders+0x2c4>
    a924:	cmp	w28, #0x0
    a928:	cinc	x15, x21, eq  // eq = none
    a92c:	cbz	x15, a3d4 <ZSTD_decodeSeqHeaders+0x604>
    a930:	cmp	x15, #0x3
    a934:	b.ne	a950 <ZSTD_decodeSeqHeaders+0xb80>  // b.any
    a938:	subs	x4, x18, #0x1
    a93c:	cinc	x21, x4, eq  // eq = none
    a940:	ldr	x15, [sp, #312]
    a944:	stp	x21, x18, [sp, #304]
    a948:	str	x15, [sp, #320]
    a94c:	b	a41c <ZSTD_decodeSeqHeaders+0x64c>
    a950:	add	x4, x15, #0xa
    a954:	add	x19, sp, #0xe0
    a958:	ldr	x4, [x19, x4, lsl #3]
    a95c:	cmp	x4, #0x0
    a960:	cinc	x21, x4, eq  // eq = none
    a964:	cmp	x15, #0x1
    a968:	b.ne	a940 <ZSTD_decodeSeqHeaders+0xb70>  // b.any
    a96c:	mov	w0, w16
    a970:	b	a6c8 <ZSTD_decodeSeqHeaders+0x8f8>
    a974:	nop
	...
    a980:	stp	x29, x30, [sp, #-64]!
    a984:	mov	x29, sp
    a988:	stp	x19, x20, [sp, #16]
    a98c:	mov	x19, x0
    a990:	mov	x20, x1
    a994:	stp	x21, x22, [sp, #32]
    a998:	mov	x22, x3
    a99c:	stp	x23, x24, [sp, #48]
    a9a0:	mov	x24, x4
    a9a4:	cbz	x2, a9d0 <ZSTD_decodeSeqHeaders+0xc00>
    a9a8:	ldr	x0, [x0, #28744]
    a9ac:	cmp	x0, x1
    a9b0:	b.eq	a9d0 <ZSTD_decodeSeqHeaders+0xc00>  // b.none
    a9b4:	ldr	x1, [x19, #28752]
    a9b8:	str	x20, [x19, #28744]
    a9bc:	str	x20, [x19, #28752]
    a9c0:	sub	x1, x0, x1
    a9c4:	str	x0, [x19, #28768]
    a9c8:	sub	x1, x20, x1
    a9cc:	str	x1, [x19, #28760]
    a9d0:	add	x23, x19, #0x4, lsl #12
    a9d4:	ldr	w5, [x23, #12452]
    a9d8:	cmp	w5, #0x4
    a9dc:	b.hi	aa6c <ZSTD_decodeSeqHeaders+0xc9c>  // b.pmore
    a9e0:	cmp	w5, #0x2
    a9e4:	b.hi	abcc <ZSTD_decodeSeqHeaders+0xdfc>  // b.pmore
    a9e8:	cmp	w5, #0x1
    a9ec:	b.eq	ac00 <ZSTD_decodeSeqHeaders+0xe30>  // b.none
    a9f0:	cmp	w5, #0x2
    a9f4:	b.ne	aac8 <ZSTD_decodeSeqHeaders+0xcf8>  // b.any
    a9f8:	ldrh	w1, [x22]
    a9fc:	ldrb	w0, [x22, #2]
    aa00:	add	w0, w1, w0, lsl #16
    aa04:	and	w2, w0, #0x1
    aa08:	ubfx	x1, x0, #1, #2
    aa0c:	lsr	w0, w0, #3
    aa10:	cmp	w1, #0x1
    aa14:	b.eq	acd0 <ZSTD_decodeSeqHeaders+0xf00>  // b.none
    aa18:	cmp	w1, #0x3
    aa1c:	b.eq	abe4 <ZSTD_decodeSeqHeaders+0xe14>  // b.none
    aa20:	mov	w3, w0
    aa24:	str	x3, [x19, #28776]
    aa28:	str	w1, [x23, #12448]
    aa2c:	str	x3, [x19, #28992]
    aa30:	cbnz	w0, ace0 <ZSTD_decodeSeqHeaders+0xf10>
    aa34:	cbz	w2, acbc <ZSTD_decodeSeqHeaders+0xeec>
    aa38:	ldr	w0, [x23, #12432]
    aa3c:	cbz	w0, aa7c <ZSTD_decodeSeqHeaders+0xcac>
    aa40:	mov	x0, #0x4                   	// #4
    aa44:	str	x0, [x19, #28776]
    aa48:	mov	x21, #0x0                   	// #0
    aa4c:	mov	w0, #0x5                   	// #5
    aa50:	str	w0, [x23, #12452]
    aa54:	mov	x0, x21
    aa58:	ldp	x19, x20, [sp, #16]
    aa5c:	ldp	x21, x22, [sp, #32]
    aa60:	ldp	x23, x24, [sp, #48]
    aa64:	ldp	x29, x30, [sp], #64
    aa68:	ret
    aa6c:	cmp	w5, #0x6
    aa70:	b.eq	ab84 <ZSTD_decodeSeqHeaders+0xdb4>  // b.none
    aa74:	cmp	w5, #0x7
    aa78:	b.ne	aaa0 <ZSTD_decodeSeqHeaders+0xcd0>  // b.any
    aa7c:	str	xzr, [x19, #28776]
    aa80:	mov	x21, #0x0                   	// #0
    aa84:	str	wzr, [x23, #12452]
    aa88:	mov	x0, x21
    aa8c:	ldp	x19, x20, [sp, #16]
    aa90:	ldp	x21, x22, [sp, #32]
    aa94:	ldp	x23, x24, [sp, #48]
    aa98:	ldp	x29, x30, [sp], #64
    aa9c:	ret
    aaa0:	cmp	w5, #0x5
    aaa4:	b.ne	ab20 <ZSTD_decodeSeqHeaders+0xd50>  // b.any
    aaa8:	mov	x0, #0x70b0                	// #28848
    aaac:	add	x0, x19, x0
    aab0:	bl	74c0 <XXH64_digest>
    aab4:	mov	x21, #0xffffffffffffffea    	// #-22
    aab8:	ldr	w1, [x22]
    aabc:	cmp	w1, w0
    aac0:	b.eq	aa7c <ZSTD_decodeSeqHeaders+0xcac>  // b.none
    aac4:	b	aa54 <ZSTD_decodeSeqHeaders+0xc84>
    aac8:	cbnz	w5, ab20 <ZSTD_decodeSeqHeaders+0xd50>
    aacc:	ldr	w2, [x23, #12560]
    aad0:	cbz	w2, ab3c <ZSTD_decodeSeqHeaders+0xd6c>
    aad4:	mov	x1, x24
    aad8:	mov	x0, x22
    aadc:	bl	78d8 <ZSTD_free+0x28>
    aae0:	str	x0, [x19, #28936]
    aae4:	mov	x21, x0
    aae8:	cmn	x0, #0x78
    aaec:	b.hi	aa54 <ZSTD_decodeSeqHeaders+0xc84>  // b.pmore
    aaf0:	add	x0, x19, #0x27, lsl #12
    aaf4:	mov	x1, x22
    aaf8:	mov	x2, x24
    aafc:	add	x0, x0, #0x1e0
    ab00:	bl	0 <grub_memmove>
    ab04:	mov	x21, #0x0                   	// #0
    ab08:	ldr	x0, [x19, #28936]
    ab0c:	mov	w1, #0x1                   	// #1
    ab10:	sub	x4, x0, x24
    ab14:	str	x4, [x19, #28776]
    ab18:	str	w1, [x23, #12452]
    ab1c:	b	aa54 <ZSTD_decodeSeqHeaders+0xc84>
    ab20:	mov	x21, #0xffffffffffffffff    	// #-1
    ab24:	mov	x0, x21
    ab28:	ldp	x19, x20, [sp, #16]
    ab2c:	ldp	x21, x22, [sp, #32]
    ab30:	ldp	x23, x24, [sp, #48]
    ab34:	ldp	x29, x30, [sp], #64
    ab38:	ret
    ab3c:	ldr	w0, [x22]
    ab40:	mov	w1, #0x2a50                	// #10832
    ab44:	movk	w1, #0x184d, lsl #16
    ab48:	and	w0, w0, #0xfffffff0
    ab4c:	cmp	w0, w1
    ab50:	b.ne	aad4 <ZSTD_decodeSeqHeaders+0xd04>  // b.any
    ab54:	add	x0, x19, #0x27, lsl #12
    ab58:	mov	x1, x22
    ab5c:	mov	x2, x24
    ab60:	add	x0, x0, #0x1e0
    ab64:	bl	0 <grub_memmove>
    ab68:	mov	x21, #0x0                   	// #0
    ab6c:	mov	x0, #0x8                   	// #8
    ab70:	sub	x4, x0, x24
    ab74:	str	x4, [x19, #28776]
    ab78:	mov	w0, #0x6                   	// #6
    ab7c:	str	w0, [x23, #12452]
    ab80:	b	aa54 <ZSTD_decodeSeqHeaders+0xc84>
    ab84:	sub	x0, x19, x24
    ab88:	mov	x1, x22
    ab8c:	add	x0, x0, #0x27, lsl #12
    ab90:	mov	x2, x24
    ab94:	add	x0, x0, #0x1e8
    ab98:	bl	0 <grub_memmove>
    ab9c:	add	x1, x19, #0x24, lsl #12
    aba0:	mov	w0, #0x7                   	// #7
    aba4:	mov	x21, #0x0                   	// #0
    aba8:	ldr	w1, [x1, #12772]
    abac:	str	x1, [x19, #28776]
    abb0:	str	w0, [x23, #12452]
    abb4:	mov	x0, x21
    abb8:	ldp	x19, x20, [sp, #16]
    abbc:	ldp	x21, x22, [sp, #32]
    abc0:	ldp	x23, x24, [sp, #48]
    abc4:	ldp	x29, x30, [sp], #64
    abc8:	ret
    abcc:	ldr	w0, [x23, #12448]
    abd0:	cmp	w0, #0x1
    abd4:	b.eq	acf0 <ZSTD_decodeSeqHeaders+0xf20>  // b.none
    abd8:	cmp	w0, #0x2
    abdc:	b.eq	ad1c <ZSTD_decodeSeqHeaders+0xf4c>  // b.none
    abe0:	cbz	w0, ac54 <ZSTD_decodeSeqHeaders+0xe84>
    abe4:	mov	x21, #0xffffffffffffffec    	// #-20
    abe8:	mov	x0, x21
    abec:	ldp	x19, x20, [sp, #16]
    abf0:	ldp	x21, x22, [sp, #32]
    abf4:	ldp	x23, x24, [sp, #48]
    abf8:	ldp	x29, x30, [sp], #64
    abfc:	ret
    ac00:	ldr	x0, [x19, #28936]
    ac04:	add	x20, x19, #0x27, lsl #12
    ac08:	add	x20, x20, #0x1e0
    ac0c:	mov	x1, x22
    ac10:	sub	x0, x0, x24
    ac14:	mov	x2, x24
    ac18:	add	x0, x20, x0
    ac1c:	bl	0 <grub_memmove>
    ac20:	ldr	x2, [x19, #28936]
    ac24:	mov	x1, x20
    ac28:	mov	x0, x19
    ac2c:	bl	98f0 <ZSTD_getFrameHeader_advanced+0x250>
    ac30:	mov	x21, x0
    ac34:	cmn	x0, #0x78
    ac38:	b.hi	aa54 <ZSTD_decodeSeqHeaders+0xc84>  // b.pmore
    ac3c:	mov	x0, #0x3                   	// #3
    ac40:	str	x0, [x19, #28776]
    ac44:	mov	x21, #0x0                   	// #0
    ac48:	mov	w0, #0x2                   	// #2
    ac4c:	str	w0, [x23, #12452]
    ac50:	b	aa54 <ZSTD_decodeSeqHeaders+0xc84>
    ac54:	cmp	x20, #0x0
    ac58:	mov	x21, #0xffffffffffffffba    	// #-70
    ac5c:	ccmp	x2, x24, #0x0, ne  // ne = any
    ac60:	b.cc	aa54 <ZSTD_decodeSeqHeaders+0xc84>  // b.lo, b.ul, b.last
    ac64:	mov	x1, x22
    ac68:	mov	x2, x24
    ac6c:	mov	x21, x24
    ac70:	mov	x0, x20
    ac74:	bl	0 <grub_memmove>
    ac78:	cmn	x21, #0x78
    ac7c:	b.hi	aa54 <ZSTD_decodeSeqHeaders+0xc84>  // b.pmore
    ac80:	ldr	x0, [x19, #28824]
    ac84:	ldr	w1, [x23, #12432]
    ac88:	add	x0, x0, x21
    ac8c:	str	x0, [x19, #28824]
    ac90:	cbnz	w1, ad80 <ZSTD_decodeSeqHeaders+0xfb0>
    ac94:	ldr	w0, [x23, #12452]
    ac98:	cmp	w0, #0x4
    ac9c:	b.eq	ad4c <ZSTD_decodeSeqHeaders+0xf7c>  // b.none
    aca0:	mov	w0, #0x2                   	// #2
    aca4:	str	w0, [x23, #12452]
    aca8:	add	x20, x20, x21
    acac:	mov	x0, #0x3                   	// #3
    acb0:	str	x20, [x19, #28744]
    acb4:	str	x0, [x19, #28776]
    acb8:	b	aa54 <ZSTD_decodeSeqHeaders+0xc84>
    acbc:	mov	x0, #0x3                   	// #3
    acc0:	str	x0, [x19, #28776]
    acc4:	mov	x21, #0x0                   	// #0
    acc8:	str	w5, [x23, #12452]
    accc:	b	aa54 <ZSTD_decodeSeqHeaders+0xc84>
    acd0:	mov	x1, #0x1                   	// #1
    acd4:	str	x1, [x19, #28776]
    acd8:	str	w1, [x23, #12448]
    acdc:	str	x0, [x19, #28992]
    ace0:	add	w2, w2, #0x3
    ace4:	mov	x21, #0x0                   	// #0
    ace8:	str	w2, [x23, #12452]
    acec:	b	aa54 <ZSTD_decodeSeqHeaders+0xc84>
    acf0:	cmp	x24, #0x1
    acf4:	mov	x21, #0xffffffffffffffb8    	// #-72
    acf8:	b.ne	aa54 <ZSTD_decodeSeqHeaders+0xc84>  // b.any
    acfc:	ldr	x21, [x19, #28992]
    ad00:	cmp	x2, x21
    ad04:	b.cc	ada4 <ZSTD_decodeSeqHeaders+0xfd4>  // b.lo, b.ul, b.last
    ad08:	ldrb	w1, [x22]
    ad0c:	mov	x2, x21
    ad10:	mov	x0, x20
    ad14:	bl	0 <grub_memset>
    ad18:	b	ac78 <ZSTD_decodeSeqHeaders+0xea8>
    ad1c:	mov	x0, #0x1ffff               	// #131071
    ad20:	mov	x21, #0xffffffffffffffb8    	// #-72
    ad24:	cmp	x24, x0
    ad28:	b.hi	aa54 <ZSTD_decodeSeqHeaders+0xc84>  // b.pmore
    ad2c:	mov	x4, x24
    ad30:	mov	x3, x22
    ad34:	mov	x1, x20
    ad38:	mov	x0, x19
    ad3c:	mov	w5, #0x1                   	// #1
    ad40:	bl	a048 <ZSTD_decodeSeqHeaders+0x278>
    ad44:	mov	x21, x0
    ad48:	b	ac78 <ZSTD_decodeSeqHeaders+0xea8>
    ad4c:	ldr	x0, [x19, #28784]
    ad50:	cmn	x0, #0x1
    ad54:	b.eq	ad64 <ZSTD_decodeSeqHeaders+0xf94>  // b.none
    ad58:	ldr	x1, [x19, #28824]
    ad5c:	cmp	x0, x1
    ad60:	b.ne	abe4 <ZSTD_decodeSeqHeaders+0xe14>  // b.any
    ad64:	ldr	w0, [x23, #12432]
    ad68:	cbz	w0, ad98 <ZSTD_decodeSeqHeaders+0xfc8>
    ad6c:	mov	x0, #0x4                   	// #4
    ad70:	str	x0, [x19, #28776]
    ad74:	mov	w0, #0x5                   	// #5
    ad78:	str	w0, [x23, #12452]
    ad7c:	b	aa54 <ZSTD_decodeSeqHeaders+0xc84>
    ad80:	mov	x3, #0x70b0                	// #28848
    ad84:	mov	x2, x21
    ad88:	mov	x1, x20
    ad8c:	add	x0, x19, x3
    ad90:	bl	71e8 <XXH64_update>
    ad94:	b	ac94 <ZSTD_decodeSeqHeaders+0xec4>
    ad98:	str	xzr, [x19, #28776]
    ad9c:	str	wzr, [x23, #12452]
    ada0:	b	aa54 <ZSTD_decodeSeqHeaders+0xc84>
    ada4:	mov	x21, #0xffffffffffffffba    	// #-70
    ada8:	b	aa54 <ZSTD_decodeSeqHeaders+0xc84>
    adac:	nop

000000000000adb0 <ZSTD_decompressBlock>:
    adb0:	stp	x29, x30, [sp, #-32]!
    adb4:	mov	x29, sp
    adb8:	stp	x19, x20, [sp, #16]
    adbc:	mov	x19, x1
    adc0:	mov	x20, x0
    adc4:	ldr	x1, [x0, #28744]
    adc8:	cmp	x19, x1
    adcc:	b.eq	adec <ZSTD_decompressBlock+0x3c>  // b.none
    add0:	ldr	x0, [x0, #28752]
    add4:	str	x19, [x20, #28744]
    add8:	str	x19, [x20, #28752]
    addc:	sub	x0, x1, x0
    ade0:	str	x1, [x20, #28768]
    ade4:	sub	x0, x19, x0
    ade8:	str	x0, [x20, #28760]
    adec:	mov	x1, #0x1ffff               	// #131071
    adf0:	mov	x0, #0xffffffffffffffb8    	// #-72
    adf4:	cmp	x4, x1
    adf8:	b.hi	ae0c <ZSTD_decompressBlock+0x5c>  // b.pmore
    adfc:	mov	x1, x19
    ae00:	mov	x0, x20
    ae04:	mov	w5, #0x0                   	// #0
    ae08:	bl	a048 <ZSTD_decodeSeqHeaders+0x278>
    ae0c:	add	x19, x19, x0
    ae10:	str	x19, [x20, #28744]
    ae14:	ldp	x19, x20, [sp, #16]
    ae18:	ldp	x29, x30, [sp], #32
    ae1c:	ret

000000000000ae20 <ZSTD_insertBlock>:
    ae20:	mov	x3, x0
    ae24:	mov	x0, x2
    ae28:	ldr	x4, [x3, #28744]
    ae2c:	cmp	x1, x4
    ae30:	b.eq	ae4c <ZSTD_insertBlock+0x2c>  // b.none
    ae34:	ldr	x2, [x3, #28752]
    ae38:	str	x4, [x3, #28768]
    ae3c:	str	x1, [x3, #28752]
    ae40:	sub	x4, x4, x2
    ae44:	sub	x4, x1, x4
    ae48:	str	x4, [x3, #28760]
    ae4c:	add	x1, x1, x0
    ae50:	str	x1, [x3, #28744]
    ae54:	ret

000000000000ae58 <ZSTD_findFrameCompressedSize>:
    ae58:	stp	x29, x30, [sp, #-80]!
    ae5c:	cmp	x1, #0x7
    ae60:	mov	x29, sp
    ae64:	stp	x19, x20, [sp, #16]
    ae68:	mov	x19, x1
    ae6c:	mov	x20, x0
    ae70:	b.ls	ae8c <ZSTD_findFrameCompressedSize+0x34>  // b.plast
    ae74:	ldr	w0, [x0]
    ae78:	mov	w1, #0x2a50                	// #10832
    ae7c:	movk	w1, #0x184d, lsl #16
    ae80:	and	w0, w0, #0xfffffff0
    ae84:	cmp	w0, w1
    ae88:	b.eq	af4c <ZSTD_findFrameCompressedSize+0xf4>  // b.none
    ae8c:	mov	x2, x19
    ae90:	mov	x1, x20
    ae94:	add	x0, sp, #0x28
    ae98:	mov	w3, #0x0                   	// #0
    ae9c:	bl	96a0 <ZSTD_getFrameHeader_advanced>
    aea0:	cmn	x0, #0x78
    aea4:	b.hi	af24 <ZSTD_findFrameCompressedSize+0xcc>  // b.pmore
    aea8:	cbnz	x0, af30 <ZSTD_findFrameCompressedSize+0xd8>
    aeac:	ldr	w1, [sp, #64]
    aeb0:	mov	x6, #0xfffffffffffffffd    	// #-3
    aeb4:	sub	x2, x19, x1
    aeb8:	add	x1, x20, x1
    aebc:	cmp	x2, #0x2
    aec0:	b.ls	af30 <ZSTD_findFrameCompressedSize+0xd8>  // b.plast
    aec4:	ldrh	w0, [x1]
    aec8:	ldrb	w3, [x1, #2]
    aecc:	and	w5, w0, #0x1
    aed0:	ubfx	x4, x0, #1, #2
    aed4:	cmp	w4, #0x1
    aed8:	add	w3, w0, w3, lsl #16
    aedc:	b.eq	af40 <ZSTD_findFrameCompressedSize+0xe8>  // b.none
    aee0:	ubfx	x3, x3, #3, #22
    aee4:	cmp	w4, #0x3
    aee8:	b.eq	af60 <ZSTD_findFrameCompressedSize+0x108>  // b.none
    aeec:	add	x0, x3, #0x3
    aef0:	sub	x3, x6, x3
    aef4:	cmp	x2, x0
    aef8:	b.cc	af30 <ZSTD_findFrameCompressedSize+0xd8>  // b.lo, b.ul, b.last
    aefc:	add	x2, x2, x3
    af00:	add	x1, x1, x0
    af04:	cbz	w5, aebc <ZSTD_findFrameCompressedSize+0x64>
    af08:	ldr	w0, [sp, #72]
    af0c:	cbz	w0, af20 <ZSTD_findFrameCompressedSize+0xc8>
    af10:	cmp	x2, #0x3
    af14:	mov	x0, #0xffffffffffffffb8    	// #-72
    af18:	b.ls	af24 <ZSTD_findFrameCompressedSize+0xcc>  // b.plast
    af1c:	add	x1, x1, #0x4
    af20:	sub	x0, x1, x20
    af24:	ldp	x19, x20, [sp, #16]
    af28:	ldp	x29, x30, [sp], #80
    af2c:	ret
    af30:	mov	x0, #0xffffffffffffffb8    	// #-72
    af34:	ldp	x19, x20, [sp, #16]
    af38:	ldp	x29, x30, [sp], #80
    af3c:	ret
    af40:	mov	x0, #0x4                   	// #4
    af44:	mov	x3, #0x1                   	// #1
    af48:	b	aef0 <ZSTD_findFrameCompressedSize+0x98>
    af4c:	ldr	w0, [x20, #4]
    af50:	ldp	x19, x20, [sp, #16]
    af54:	add	x0, x0, #0x8
    af58:	ldp	x29, x30, [sp], #80
    af5c:	ret
    af60:	mov	x0, #0xffffffffffffffec    	// #-20
    af64:	b	af24 <ZSTD_findFrameCompressedSize+0xcc>

000000000000af68 <ZSTD_findDecompressedSize>:
    af68:	stp	x29, x30, [sp, #-48]!
    af6c:	cmp	x1, #0x4
    af70:	mov	x29, sp
    af74:	stp	x19, x20, [sp, #16]
    af78:	mov	x19, x1
    af7c:	stp	x21, x22, [sp, #32]
    af80:	b.ls	b03c <ZSTD_findDecompressedSize+0xd4>  // b.plast
    af84:	mov	w21, #0x2a50                	// #10832
    af88:	mov	x20, x0
    af8c:	mov	x22, #0x0                   	// #0
    af90:	movk	w21, #0x184d, lsl #16
    af94:	ldr	w2, [x20]
    af98:	mov	x1, x19
    af9c:	mov	x0, x20
    afa0:	and	w2, w2, #0xfffffff0
    afa4:	cmp	w2, w21
    afa8:	b.ne	aff0 <ZSTD_findDecompressedSize+0x88>  // b.any
    afac:	cmp	x19, #0x7
    afb0:	b.ls	b02c <ZSTD_findDecompressedSize+0xc4>  // b.plast
    afb4:	ldr	w0, [x20, #4]
    afb8:	add	x0, x0, #0x8
    afbc:	cmp	x19, x0
    afc0:	b.cc	afd8 <ZSTD_findDecompressedSize+0x70>  // b.lo, b.ul, b.last
    afc4:	add	x20, x20, x0
    afc8:	sub	x19, x19, x0
    afcc:	cmp	x19, #0x4
    afd0:	b.hi	af94 <ZSTD_findDecompressedSize+0x2c>  // b.pmore
    afd4:	cbz	x19, afdc <ZSTD_findDecompressedSize+0x74>
    afd8:	mov	x22, #0xfffffffffffffffe    	// #-2
    afdc:	mov	x0, x22
    afe0:	ldp	x19, x20, [sp, #16]
    afe4:	ldp	x21, x22, [sp, #32]
    afe8:	ldp	x29, x30, [sp], #48
    afec:	ret
    aff0:	bl	99a8 <ZSTD_getFrameContentSize>
    aff4:	mov	x2, x0
    aff8:	mov	x1, x19
    affc:	mov	x0, x20
    b000:	cmn	x2, #0x3
    b004:	b.hi	b034 <ZSTD_findDecompressedSize+0xcc>  // b.pmore
    b008:	adds	x2, x2, x22
    b00c:	mov	x22, x2
    b010:	b.cs	afd8 <ZSTD_findDecompressedSize+0x70>  // b.hs, b.nlast
    b014:	bl	ae58 <ZSTD_findFrameCompressedSize>
    b018:	sub	x19, x19, x0
    b01c:	add	x20, x20, x0
    b020:	cmn	x0, #0x78
    b024:	b.ls	afcc <ZSTD_findDecompressedSize+0x64>  // b.plast
    b028:	b	afd8 <ZSTD_findDecompressedSize+0x70>
    b02c:	mov	x22, #0xffffffffffffffb8    	// #-72
    b030:	b	afdc <ZSTD_findDecompressedSize+0x74>
    b034:	mov	x22, x2
    b038:	b	afdc <ZSTD_findDecompressedSize+0x74>
    b03c:	mov	x22, #0x0                   	// #0
    b040:	cbz	x19, afdc <ZSTD_findDecompressedSize+0x74>
    b044:	b	afd8 <ZSTD_findDecompressedSize+0x70>

000000000000b048 <ZSTD_nextSrcSizeToDecompress>:
    b048:	ldr	x0, [x0, #28776]
    b04c:	ret

000000000000b050 <ZSTD_nextInputType>:
    b050:	add	x0, x0, #0x4, lsl #12
    b054:	ldr	w0, [x0, #12452]
    b058:	sub	w0, w0, #0x2
    b05c:	cmp	w0, #0x5
    b060:	b.hi	b078 <ZSTD_nextInputType+0x28>  // b.pmore
    b064:	adrp	x1, 0 <FSE_versionNumber>
    b068:	ldr	x1, [x1]
    b06c:	add	x1, x1, #0x980
    b070:	ldr	w0, [x1, w0, uxtw #2]
    b074:	ret
    b078:	mov	w0, #0x0                   	// #0
    b07c:	ret
	...

000000000000b088 <ZSTD_decompressContinue>:
    b088:	ldr	x5, [x0, #28776]
    b08c:	cmp	x5, x4
    b090:	b.ne	b098 <ZSTD_decompressContinue+0x10>  // b.any
    b094:	b	a980 <ZSTD_decodeSeqHeaders+0xbb0>
    b098:	mov	x0, #0xffffffffffffffb8    	// #-72
    b09c:	ret

000000000000b0a0 <ZSTD_decompressBegin>:
    b0a0:	stp	x29, x30, [sp, #-32]!
    b0a4:	add	x3, x0, #0x4, lsl #12
    b0a8:	mov	w6, #0xc                   	// #12
    b0ac:	mov	x29, sp
    b0b0:	ldr	w5, [x3, #12560]
    b0b4:	movk	w6, #0xc00, lsl #16
    b0b8:	str	x19, [sp, #16]
    b0bc:	mov	x19, x0
    b0c0:	cmp	w5, #0x1
    b0c4:	mov	x4, #0x5                   	// #5
    b0c8:	adrp	x1, 0 <FSE_versionNumber>
    b0cc:	csinc	x4, x4, xzr, ne  // ne = any
    b0d0:	str	w6, [x19, #10296]
    b0d4:	mov	x2, #0xc                   	// #12
    b0d8:	str	xzr, [x19, #28744]
    b0dc:	mov	x0, #0x683c                	// #26684
    b0e0:	str	xzr, [x19, #28752]
    b0e4:	add	x0, x19, x0
    b0e8:	str	xzr, [x19, #28760]
    b0ec:	str	xzr, [x19, #28768]
    b0f0:	str	x4, [x19, #28776]
    b0f4:	str	xzr, [x19, #28824]
    b0f8:	str	wzr, [x3, #12452]
    b0fc:	ldr	x1, [x1]
    b100:	str	xzr, [x19, #28840]
    b104:	str	wzr, [x3, #12648]
    b108:	add	x1, x1, #0x998
    b10c:	bl	0 <grub_memmove>
    b110:	add	x4, x19, #0x20
    b114:	mov	x7, #0x1830                	// #6192
    b118:	mov	x8, #0x1028                	// #4136
    b11c:	add	x3, x19, x7
    b120:	add	x2, x19, x8
    b124:	mov	x9, #0x2838                	// #10296
    b128:	add	x1, x19, x9
    b12c:	stp	x4, x3, [x19]
    b130:	mov	x0, #0x0                   	// #0
    b134:	stp	x2, x1, [x19, #16]
    b138:	ldr	x19, [sp, #16]
    b13c:	ldp	x29, x30, [sp], #32
    b140:	ret
    b144:	nop
	...

000000000000b150 <ZSTD_decompressBegin_usingDict>:
    b150:	stp	x29, x30, [sp, #-48]!
    b154:	mov	x29, sp
    b158:	stp	x19, x20, [sp, #16]
    b15c:	mov	x19, x1
    b160:	mov	x20, x2
    b164:	str	x21, [sp, #32]
    b168:	mov	x21, x0
    b16c:	bl	b0a0 <ZSTD_decompressBegin>
    b170:	cmn	x0, #0x78
    b174:	b.hi	b188 <ZSTD_decompressBegin_usingDict+0x38>  // b.pmore
    b178:	cmp	x19, #0x0
    b17c:	mov	x0, #0x0                   	// #0
    b180:	ccmp	x20, #0x0, #0x4, ne  // ne = any
    b184:	b.ne	b198 <ZSTD_decompressBegin_usingDict+0x48>  // b.any
    b188:	ldp	x19, x20, [sp, #16]
    b18c:	ldr	x21, [sp, #32]
    b190:	ldp	x29, x30, [sp], #48
    b194:	ret
    b198:	cmp	x20, #0x7
    b19c:	b.ls	b1b4 <ZSTD_decompressBegin_usingDict+0x64>  // b.plast
    b1a0:	ldr	w1, [x19]
    b1a4:	mov	w0, #0xa437                	// #42039
    b1a8:	movk	w0, #0xec30, lsl #16
    b1ac:	cmp	w1, w0
    b1b0:	b.eq	b1ec <ZSTD_decompressBegin_usingDict+0x9c>  // b.none
    b1b4:	ldr	x2, [x21, #28744]
    b1b8:	add	x20, x19, x20
    b1bc:	ldr	x1, [x21, #28752]
    b1c0:	str	x20, [x21, #28744]
    b1c4:	str	x19, [x21, #28752]
    b1c8:	mov	x0, #0x0                   	// #0
    b1cc:	sub	x1, x2, x1
    b1d0:	str	x2, [x21, #28768]
    b1d4:	sub	x19, x19, x1
    b1d8:	str	x19, [x21, #28760]
    b1dc:	ldp	x19, x20, [sp, #16]
    b1e0:	ldr	x21, [sp, #32]
    b1e4:	ldp	x29, x30, [sp], #48
    b1e8:	ret
    b1ec:	add	x3, x21, #0x4, lsl #12
    b1f0:	ldr	w4, [x19, #4]
    b1f4:	mov	x1, x19
    b1f8:	mov	x2, x20
    b1fc:	add	x0, x21, #0x20
    b200:	str	w4, [x3, #12648]
    b204:	bl	7cc0 <ZSTD_free+0x410>
    b208:	mov	x1, x0
    b20c:	cmn	x1, #0x78
    b210:	mov	x0, #0xffffffffffffffe2    	// #-30
    b214:	b.hi	b188 <ZSTD_decompressBegin_usingDict+0x38>  // b.pmore
    b218:	ldr	x3, [x21, #28744]
    b21c:	add	x1, x19, x1
    b220:	ldr	x2, [x21, #28752]
    b224:	add	x19, x19, x20
    b228:	mov	x4, #0x100000001           	// #4294967297
    b22c:	mov	x0, #0x0                   	// #0
    b230:	sub	x2, x3, x2
    b234:	str	x19, [x21, #28744]
    b238:	sub	x2, x1, x2
    b23c:	str	x1, [x21, #28752]
    b240:	str	x2, [x21, #28760]
    b244:	str	x3, [x21, #28768]
    b248:	str	x4, [x21, #28840]
    b24c:	b	b188 <ZSTD_decompressBegin_usingDict+0x38>

000000000000b250 <ZSTD_decompressBegin_usingDDict>:
    b250:	stp	x29, x30, [sp, #-48]!
    b254:	mov	x29, sp
    b258:	cbz	x1, b32c <ZSTD_decompressBegin_usingDDict+0xdc>
    b25c:	stp	x19, x20, [sp, #16]
    b260:	mov	x19, x1
    b264:	mov	x20, x0
    b268:	ldp	x1, x3, [x1, #8]
    b26c:	ldr	x2, [x0, #28768]
    b270:	str	x21, [sp, #32]
    b274:	add	x21, x0, #0x4, lsl #12
    b278:	add	x1, x1, x3
    b27c:	cmp	x2, x1
    b280:	cset	w1, ne  // ne = any
    b284:	str	w1, [x21, #12652]
    b288:	bl	b0a0 <ZSTD_decompressBegin>
    b28c:	cmn	x0, #0x78
    b290:	b.hi	b31c <ZSTD_decompressBegin_usingDDict+0xcc>  // b.pmore
    b294:	ldp	x2, x0, [x19, #8]
    b298:	add	x1, x19, #0x4, lsl #12
    b29c:	ldr	w4, [x1, #10304]
    b2a0:	ldr	w3, [x1, #10308]
    b2a4:	str	w4, [x21, #12648]
    b2a8:	add	x0, x2, x0
    b2ac:	str	x0, [x20, #28744]
    b2b0:	str	x2, [x20, #28752]
    b2b4:	str	x2, [x20, #28760]
    b2b8:	str	x0, [x20, #28768]
    b2bc:	cbz	w3, b340 <ZSTD_decompressBegin_usingDDict+0xf0>
    b2c0:	mov	x0, #0x100000001           	// #4294967297
    b2c4:	mov	x2, #0x1828                	// #6184
    b2c8:	str	x0, [x20, #28840]
    b2cc:	add	x3, x19, x2
    b2d0:	mov	x4, #0x1020                	// #4128
    b2d4:	add	x2, x19, x4
    b2d8:	add	x0, x19, #0x18
    b2dc:	mov	x5, #0x2830                	// #10288
    b2e0:	add	x19, x19, x5
    b2e4:	stp	x3, x2, [x20, #8]
    b2e8:	ldr	w3, [x1, #10292]
    b2ec:	ldr	w2, [x1, #10296]
    b2f0:	ldr	w1, [x1, #10300]
    b2f4:	str	x0, [x20]
    b2f8:	mov	x0, #0x0                   	// #0
    b2fc:	str	x19, [x20, #24]
    b300:	ldp	x19, x20, [sp, #16]
    b304:	str	w3, [x21, #10300]
    b308:	str	w2, [x21, #10304]
    b30c:	str	w1, [x21, #10308]
    b310:	ldr	x21, [sp, #32]
    b314:	ldp	x29, x30, [sp], #48
    b318:	ret
    b31c:	ldp	x19, x20, [sp, #16]
    b320:	ldr	x21, [sp, #32]
    b324:	ldp	x29, x30, [sp], #48
    b328:	ret
    b32c:	bl	b0a0 <ZSTD_decompressBegin>
    b330:	cmn	x0, #0x78
    b334:	csel	x0, x0, xzr, hi  // hi = pmore
    b338:	ldp	x29, x30, [sp], #48
    b33c:	ret
    b340:	ldr	x21, [sp, #32]
    b344:	str	xzr, [x20, #28840]
    b348:	mov	x0, #0x0                   	// #0
    b34c:	ldp	x19, x20, [sp, #16]
    b350:	ldp	x29, x30, [sp], #48
    b354:	ret
    b358:	stp	x29, x30, [sp, #-176]!
    b35c:	mov	x29, sp
    b360:	stp	x19, x20, [sp, #16]
    b364:	mov	x20, x2
    b368:	mov	x19, x7
    b36c:	stp	x23, x24, [sp, #48]
    b370:	mov	x23, x3
    b374:	mov	x24, x6
    b378:	stp	x25, x26, [sp, #64]
    b37c:	mov	x25, x0
    b380:	mov	x26, x4
    b384:	stp	x27, x28, [sp, #80]
    b388:	stp	x5, x1, [sp, #96]
    b38c:	cbz	x7, b398 <ZSTD_decompressBegin_usingDDict+0x148>
    b390:	ldp	x0, x24, [x7, #8]
    b394:	str	x0, [sp, #96]
    b398:	cmp	x26, #0x4
    b39c:	b.ls	b7b8 <ZSTD_decompressBegin_usingDDict+0x568>  // b.plast
    b3a0:	ldr	x27, [sp, #104]
    b3a4:	stp	x21, x22, [sp, #32]
    b3a8:	mov	w21, #0x2a50                	// #10832
    b3ac:	mov	x3, #0x70b0                	// #28848
    b3b0:	mov	w22, #0x0                   	// #0
    b3b4:	add	x0, x25, x3
    b3b8:	movk	w21, #0x184d, lsl #16
    b3bc:	str	x0, [sp, #120]
    b3c0:	ldr	w0, [x23]
    b3c4:	and	w0, w0, #0xfffffff0
    b3c8:	cmp	w0, w21
    b3cc:	b.eq	b588 <ZSTD_decompressBegin_usingDDict+0x338>  // b.none
    b3d0:	cbz	x19, b5ac <ZSTD_decompressBegin_usingDDict+0x35c>
    b3d4:	mov	x1, x19
    b3d8:	mov	x0, x25
    b3dc:	bl	b250 <ZSTD_decompressBegin_usingDDict>
    b3e0:	mov	x28, x0
    b3e4:	cmn	x0, #0x78
    b3e8:	b.hi	b5c8 <ZSTD_decompressBegin_usingDDict+0x378>  // b.pmore
    b3ec:	ldr	x1, [x25, #28744]
    b3f0:	cmp	x1, x27
    b3f4:	b.eq	b414 <ZSTD_decompressBegin_usingDDict+0x1c4>  // b.none
    b3f8:	ldr	x0, [x25, #28752]
    b3fc:	str	x27, [x25, #28744]
    b400:	str	x27, [x25, #28752]
    b404:	sub	x0, x1, x0
    b408:	str	x1, [x25, #28768]
    b40c:	sub	x0, x27, x0
    b410:	str	x0, [x25, #28760]
    b414:	cmp	x26, #0x8
    b418:	b.ls	b570 <ZSTD_decompressBegin_usingDDict+0x320>  // b.plast
    b41c:	adrp	x0, 0 <FSE_versionNumber>
    b420:	ldrb	w2, [x23, #4]
    b424:	ldr	x3, [x0]
    b428:	ubfx	x5, x2, #6, #2
    b42c:	and	x7, x2, #0x3
    b430:	lsr	w0, w2, #5
    b434:	add	x4, x3, #0x20
    b438:	cmp	wzr, w2, lsr #6
    b43c:	mvn	w1, w0
    b440:	and	w0, w0, #0x1
    b444:	ldr	x2, [x3, x7, lsl #3]
    b448:	and	x1, x1, #0x1
    b44c:	ldr	x3, [x4, x5, lsl #3]
    b450:	csel	w0, w0, wzr, eq  // eq = none
    b454:	add	x1, x1, #0x5
    b458:	and	x0, x0, #0xff
    b45c:	add	x2, x2, x3
    b460:	add	x2, x2, x1
    b464:	add	x28, x2, x0
    b468:	cmn	x28, #0x78
    b46c:	b.hi	b518 <ZSTD_decompressBegin_usingDDict+0x2c8>  // b.pmore
    b470:	add	x0, x28, #0x3
    b474:	cmp	x0, x26
    b478:	b.hi	b570 <ZSTD_decompressBegin_usingDDict+0x320>  // b.pmore
    b47c:	mov	x2, x28
    b480:	mov	x1, x23
    b484:	mov	x0, x25
    b488:	bl	98f0 <ZSTD_getFrameHeader_advanced+0x250>
    b48c:	cmn	x0, #0x78
    b490:	b.hi	b60c <ZSTD_decompressBegin_usingDDict+0x3bc>  // b.pmore
    b494:	add	x1, x23, x28
    b498:	sub	x7, x26, x28
    b49c:	mov	x12, x27
    b4a0:	add	x0, x27, x20
    b4a4:	str	x0, [sp, #112]
    b4a8:	cmp	x7, #0x2
    b4ac:	b.ls	b570 <ZSTD_decompressBegin_usingDDict+0x320>  // b.plast
    b4b0:	ldrh	w0, [x1]
    b4b4:	ldrb	w11, [x1, #2]
    b4b8:	add	w11, w0, w11, lsl #16
    b4bc:	ubfx	x0, x11, #1, #2
    b4c0:	lsr	w2, w11, #3
    b4c4:	cmp	w0, #0x1
    b4c8:	b.eq	b6ac <ZSTD_decompressBegin_usingDDict+0x45c>  // b.none
    b4cc:	cmp	w0, #0x3
    b4d0:	b.eq	b514 <ZSTD_decompressBegin_usingDDict+0x2c4>  // b.none
    b4d4:	mov	w4, w2
    b4d8:	sub	x7, x7, #0x3
    b4dc:	cmp	x4, x7
    b4e0:	add	x3, x1, #0x3
    b4e4:	b.hi	b570 <ZSTD_decompressBegin_usingDDict+0x320>  // b.pmore
    b4e8:	cmp	w0, #0x2
    b4ec:	b.eq	b55c <ZSTD_decompressBegin_usingDDict+0x30c>  // b.none
    b4f0:	cbz	w0, b624 <ZSTD_decompressBegin_usingDDict+0x3d4>
    b4f4:	mov	x0, #0xffffffffffffffec    	// #-20
    b4f8:	bl	7828 <ZSTD_getErrorCode>
    b4fc:	cmp	w0, #0xa
    b500:	b.ne	b508 <ZSTD_decompressBegin_usingDDict+0x2b8>  // b.any
    b504:	cbnz	w22, b5e8 <ZSTD_decompressBegin_usingDDict+0x398>
    b508:	mov	x28, #0xffffffffffffffec    	// #-20
    b50c:	ldp	x21, x22, [sp, #32]
    b510:	b	b5f0 <ZSTD_decompressBegin_usingDDict+0x3a0>
    b514:	mov	x28, #0xffffffffffffffec    	// #-20
    b518:	mov	x0, x28
    b51c:	bl	7828 <ZSTD_getErrorCode>
    b520:	cmp	w0, #0xa
    b524:	b.ne	b5c8 <ZSTD_decompressBegin_usingDDict+0x378>  // b.any
    b528:	cbnz	w22, b5e8 <ZSTD_decompressBegin_usingDDict+0x398>
    b52c:	cmn	x28, #0x78
    b530:	b.hi	b5c8 <ZSTD_decompressBegin_usingDDict+0x378>  // b.pmore
    b534:	add	x27, x27, x28
    b538:	sub	x20, x20, x28
    b53c:	mov	w22, #0x1                   	// #1
    b540:	cmp	x26, #0x4
    b544:	b.hi	b3c0 <ZSTD_decompressBegin_usingDDict+0x170>  // b.pmore
    b548:	ldp	x21, x22, [sp, #32]
    b54c:	cbnz	x26, b5ec <ZSTD_decompressBegin_usingDDict+0x39c>
    b550:	ldr	x0, [sp, #104]
    b554:	sub	x28, x27, x0
    b558:	b	b5f0 <ZSTD_decompressBegin_usingDDict+0x3a0>
    b55c:	str	w11, [sp, #128]
    b560:	mov	x0, #0x1ffff               	// #131071
    b564:	str	x7, [sp, #136]
    b568:	cmp	x4, x0
    b56c:	b.ls	b77c <ZSTD_decompressBegin_usingDDict+0x52c>  // b.plast
    b570:	mov	x28, #0xffffffffffffffb8    	// #-72
    b574:	mov	x0, x28
    b578:	bl	7828 <ZSTD_getErrorCode>
    b57c:	cmp	w0, #0xa
    b580:	b.eq	b528 <ZSTD_decompressBegin_usingDDict+0x2d8>  // b.none
    b584:	b	b5c8 <ZSTD_decompressBegin_usingDDict+0x378>
    b588:	cmp	x26, #0x7
    b58c:	b.ls	b5e8 <ZSTD_decompressBegin_usingDDict+0x398>  // b.plast
    b590:	ldr	w0, [x23, #4]
    b594:	add	x0, x0, #0x8
    b598:	cmp	x0, x26
    b59c:	b.hi	b5e8 <ZSTD_decompressBegin_usingDDict+0x398>  // b.pmore
    b5a0:	add	x23, x23, x0
    b5a4:	sub	x26, x26, x0
    b5a8:	b	b540 <ZSTD_decompressBegin_usingDDict+0x2f0>
    b5ac:	ldr	x1, [sp, #96]
    b5b0:	mov	x2, x24
    b5b4:	mov	x0, x25
    b5b8:	bl	b150 <ZSTD_decompressBegin_usingDict>
    b5bc:	mov	x28, x0
    b5c0:	cmn	x0, #0x78
    b5c4:	b.ls	b3ec <ZSTD_decompressBegin_usingDDict+0x19c>  // b.plast
    b5c8:	mov	x0, x28
    b5cc:	ldp	x19, x20, [sp, #16]
    b5d0:	ldp	x21, x22, [sp, #32]
    b5d4:	ldp	x23, x24, [sp, #48]
    b5d8:	ldp	x25, x26, [sp, #64]
    b5dc:	ldp	x27, x28, [sp, #80]
    b5e0:	ldp	x29, x30, [sp], #176
    b5e4:	ret
    b5e8:	ldp	x21, x22, [sp, #32]
    b5ec:	mov	x28, #0xffffffffffffffb8    	// #-72
    b5f0:	mov	x0, x28
    b5f4:	ldp	x19, x20, [sp, #16]
    b5f8:	ldp	x23, x24, [sp, #48]
    b5fc:	ldp	x25, x26, [sp, #64]
    b600:	ldp	x27, x28, [sp, #80]
    b604:	ldp	x29, x30, [sp], #176
    b608:	ret
    b60c:	mov	x28, x0
    b610:	mov	x0, x28
    b614:	bl	7828 <ZSTD_getErrorCode>
    b618:	cmp	w0, #0xa
    b61c:	b.eq	b528 <ZSTD_decompressBegin_usingDDict+0x2d8>  // b.none
    b620:	b	b5c8 <ZSTD_decompressBegin_usingDDict+0x378>
    b624:	ldr	x0, [sp, #112]
    b628:	str	w11, [sp, #128]
    b62c:	str	x7, [sp, #136]
    b630:	cmp	x12, #0x0
    b634:	sub	x0, x0, x12
    b638:	ccmp	x4, x0, #0x2, ne  // ne = any
    b63c:	b.hi	b6cc <ZSTD_decompressBegin_usingDDict+0x47c>  // b.pmore
    b640:	mov	x2, x4
    b644:	mov	x1, x3
    b648:	mov	x0, x12
    b64c:	stp	x12, x3, [sp, #144]
    b650:	str	x4, [sp, #160]
    b654:	bl	0 <grub_memmove>
    b658:	add	x5, x25, #0x4, lsl #12
    b65c:	ldr	w11, [sp, #128]
    b660:	ldp	x3, x4, [sp, #152]
    b664:	ldr	w0, [x5, #12432]
    b668:	ldp	x7, x12, [sp, #136]
    b66c:	mov	x28, x4
    b670:	cbz	w0, b724 <ZSTD_decompressBegin_usingDDict+0x4d4>
    b674:	nop
    b678:	ldr	x0, [sp, #120]
    b67c:	mov	x1, x12
    b680:	mov	x2, x28
    b684:	stp	x12, x3, [sp, #128]
    b688:	str	w11, [sp, #144]
    b68c:	stp	x4, x7, [sp, #152]
    b690:	str	x5, [sp, #168]
    b694:	bl	71e8 <XXH64_update>
    b698:	ldr	w11, [sp, #144]
    b69c:	ldp	x12, x3, [sp, #128]
    b6a0:	ldp	x4, x7, [sp, #152]
    b6a4:	ldr	x5, [sp, #168]
    b6a8:	b	b724 <ZSTD_decompressBegin_usingDDict+0x4d4>
    b6ac:	subs	x7, x7, #0x3
    b6b0:	add	x3, x1, #0x3
    b6b4:	b.eq	b570 <ZSTD_decompressBegin_usingDDict+0x320>  // b.none
    b6b8:	ldr	x0, [sp, #112]
    b6bc:	mov	w28, w2
    b6c0:	sub	x0, x0, x12
    b6c4:	cmp	x28, x0
    b6c8:	b.ls	b6e4 <ZSTD_decompressBegin_usingDDict+0x494>  // b.plast
    b6cc:	mov	x28, #0xffffffffffffffba    	// #-70
    b6d0:	mov	x0, x28
    b6d4:	bl	7828 <ZSTD_getErrorCode>
    b6d8:	cmp	w0, #0xa
    b6dc:	b.eq	b528 <ZSTD_decompressBegin_usingDDict+0x2d8>  // b.none
    b6e0:	b	b5c8 <ZSTD_decompressBegin_usingDDict+0x378>
    b6e4:	ldrb	w1, [x1, #3]
    b6e8:	mov	x4, #0x1                   	// #1
    b6ec:	mov	x0, x12
    b6f0:	mov	x2, x28
    b6f4:	stp	x12, x4, [sp, #128]
    b6f8:	str	x3, [sp, #144]
    b6fc:	str	w11, [sp, #152]
    b700:	str	x7, [sp, #160]
    b704:	bl	0 <grub_memset>
    b708:	ldp	x12, x4, [sp, #128]
    b70c:	ldr	w11, [sp, #152]
    b710:	ldr	x3, [sp, #144]
    b714:	ldr	x7, [sp, #160]
    b718:	add	x5, x25, #0x4, lsl #12
    b71c:	ldr	w0, [x5, #12432]
    b720:	cbnz	w0, b678 <ZSTD_decompressBegin_usingDDict+0x428>
    b724:	add	x12, x12, x28
    b728:	add	x1, x3, x4
    b72c:	sub	x7, x7, x4
    b730:	tbz	w11, #0, b4a8 <ZSTD_decompressBegin_usingDDict+0x258>
    b734:	ldr	x0, [x25, #28784]
    b738:	cmn	x0, #0x1
    b73c:	b.eq	b74c <ZSTD_decompressBegin_usingDDict+0x4fc>  // b.none
    b740:	sub	x2, x12, x27
    b744:	cmp	x0, x2
    b748:	b.ne	b514 <ZSTD_decompressBegin_usingDDict+0x2c4>  // b.any
    b74c:	ldr	w0, [x5, #12432]
    b750:	cbnz	w0, b7c0 <ZSTD_decompressBegin_usingDDict+0x570>
    b754:	sub	x28, x12, x27
    b758:	mov	x26, x7
    b75c:	mov	x0, x28
    b760:	str	x1, [sp, #112]
    b764:	bl	7828 <ZSTD_getErrorCode>
    b768:	cmp	w0, #0xa
    b76c:	ldr	x1, [sp, #112]
    b770:	mov	x23, x1
    b774:	b.ne	b52c <ZSTD_decompressBegin_usingDDict+0x2dc>  // b.any
    b778:	b	b528 <ZSTD_decompressBegin_usingDDict+0x2d8>
    b77c:	ldr	x0, [sp, #112]
    b780:	mov	x1, x12
    b784:	mov	w5, #0x1                   	// #1
    b788:	stp	x12, x3, [sp, #144]
    b78c:	sub	x2, x0, x12
    b790:	mov	x0, x25
    b794:	str	x4, [sp, #160]
    b798:	bl	a048 <ZSTD_decodeSeqHeaders+0x278>
    b79c:	mov	x28, x0
    b7a0:	ldr	w11, [sp, #128]
    b7a4:	cmn	x0, #0x78
    b7a8:	ldp	x7, x12, [sp, #136]
    b7ac:	ldp	x3, x4, [sp, #152]
    b7b0:	b.ls	b718 <ZSTD_decompressBegin_usingDDict+0x4c8>  // b.plast
    b7b4:	b	b518 <ZSTD_decompressBegin_usingDDict+0x2c8>
    b7b8:	ldr	x27, [sp, #104]
    b7bc:	b	b54c <ZSTD_decompressBegin_usingDDict+0x2fc>
    b7c0:	ldr	x0, [sp, #120]
    b7c4:	str	x7, [sp, #112]
    b7c8:	stp	x1, x12, [sp, #128]
    b7cc:	bl	74c0 <XXH64_digest>
    b7d0:	ldr	x7, [sp, #112]
    b7d4:	cmp	x7, #0x3
    b7d8:	b.ls	b7fc <ZSTD_decompressBegin_usingDDict+0x5ac>  // b.plast
    b7dc:	ldr	x1, [sp, #128]
    b7e0:	ldr	w2, [x1]
    b7e4:	cmp	w0, w2
    b7e8:	b.ne	b7fc <ZSTD_decompressBegin_usingDDict+0x5ac>  // b.any
    b7ec:	add	x1, x1, #0x4
    b7f0:	sub	x7, x7, #0x4
    b7f4:	ldr	x12, [sp, #136]
    b7f8:	b	b754 <ZSTD_decompressBegin_usingDDict+0x504>
    b7fc:	mov	x28, #0xffffffffffffffea    	// #-22
    b800:	b	b518 <ZSTD_decompressBegin_usingDDict+0x2c8>
    b804:	nop
	...

000000000000b810 <ZSTD_decompress_usingDict>:
    b810:	mov	x7, #0x0                   	// #0
    b814:	b	b358 <ZSTD_decompressBegin_usingDDict+0x108>

000000000000b818 <ZSTD_decompressDCtx>:
    b818:	mov	x7, #0x0                   	// #0
    b81c:	mov	x6, #0x0                   	// #0
    b820:	mov	x5, #0x0                   	// #0
    b824:	b	b358 <ZSTD_decompressBegin_usingDDict+0x108>

000000000000b828 <ZSTD_decompress>:
    b828:	stp	x29, x30, [sp, #-96]!
    b82c:	adrp	x4, 0 <FSE_versionNumber>
    b830:	mov	x29, sp
    b834:	ldr	x5, [x4]
    b838:	stp	x21, x22, [sp, #32]
    b83c:	mov	x22, x2
    b840:	add	x5, x5, #0x410
    b844:	str	x23, [sp, #48]
    b848:	mov	x23, x3
    b84c:	mov	x21, x1
    b850:	stp	x19, x20, [sp, #16]
    b854:	mov	x20, x0
    b858:	add	x0, sp, #0x40
    b85c:	ldp	x2, x3, [x5]
    b860:	stp	x2, x3, [sp, #64]
    b864:	ldr	x1, [x5, #16]
    b868:	str	x1, [sp, #80]
    b86c:	bl	94c0 <ZSTD_createDCtx_advanced>
    b870:	cbz	x0, b8c4 <ZSTD_decompress+0x9c>
    b874:	mov	x19, x0
    b878:	mov	x1, x20
    b87c:	mov	x4, x23
    b880:	mov	x3, x22
    b884:	mov	x2, x21
    b888:	mov	x7, #0x0                   	// #0
    b88c:	mov	x6, #0x0                   	// #0
    b890:	mov	x5, #0x0                   	// #0
    b894:	bl	b358 <ZSTD_decompressBegin_usingDDict+0x108>
    b898:	mov	x20, x0
    b89c:	ldr	x1, [x19, #29000]
    b8a0:	cbnz	x1, b8ac <ZSTD_decompress+0x84>
    b8a4:	mov	x0, x19
    b8a8:	bl	8270 <ZSTD_free+0x9c0>
    b8ac:	mov	x0, x20
    b8b0:	ldp	x19, x20, [sp, #16]
    b8b4:	ldp	x21, x22, [sp, #32]
    b8b8:	ldr	x23, [sp, #48]
    b8bc:	ldp	x29, x30, [sp], #96
    b8c0:	ret
    b8c4:	mov	x20, #0xffffffffffffffc0    	// #-64
    b8c8:	mov	x0, x20
    b8cc:	ldp	x19, x20, [sp, #16]
    b8d0:	ldp	x21, x22, [sp, #32]
    b8d4:	ldr	x23, [sp, #48]
    b8d8:	ldp	x29, x30, [sp], #96
    b8dc:	ret
	...

000000000000b8e8 <ZSTD_createDDict_advanced>:
    b8e8:	stp	x29, x30, [sp, #-96]!
    b8ec:	mov	x29, sp
    b8f0:	stp	x21, x22, [sp, #32]
    b8f4:	mov	x21, x0
    b8f8:	mov	x22, x1
    b8fc:	ldp	x1, x0, [x4]
    b900:	stp	x19, x20, [sp, #16]
    b904:	cmp	x1, #0x0
    b908:	cset	w1, eq  // eq = none
    b90c:	cmp	x0, #0x0
    b910:	cset	w0, eq  // eq = none
    b914:	cmp	w1, w0
    b918:	b.ne	b9a0 <ZSTD_createDDict_advanced+0xb8>  // b.any
    b91c:	mov	x19, x4
    b920:	stp	x23, x24, [sp, #48]
    b924:	mov	w23, w2
    b928:	ldp	x4, x5, [x4]
    b92c:	mov	w24, w3
    b930:	ldr	x2, [x19, #16]
    b934:	add	x1, sp, #0x40
    b938:	mov	x0, #0x6860                	// #26720
    b93c:	stp	x4, x5, [sp, #64]
    b940:	str	x2, [sp, #80]
    b944:	bl	7840 <ZSTD_malloc>
    b948:	mov	x20, x0
    b94c:	cbz	x0, b99c <ZSTD_createDDict_advanced+0xb4>
    b950:	mov	x1, #0x6800                	// #26624
    b954:	add	x1, x0, x1
    b958:	ldp	x6, x7, [x19]
    b95c:	mov	w4, w24
    b960:	ldr	x5, [x19, #16]
    b964:	stp	x6, x7, [x1, #72]
    b968:	mov	w3, w23
    b96c:	str	x5, [x0, #26712]
    b970:	mov	x2, x22
    b974:	mov	x1, x21
    b978:	bl	7eb8 <ZSTD_free+0x608>
    b97c:	cmn	x0, #0x78
    b980:	b.hi	b9b8 <ZSTD_createDDict_advanced+0xd0>  // b.pmore
    b984:	mov	x0, x20
    b988:	ldp	x19, x20, [sp, #16]
    b98c:	ldp	x21, x22, [sp, #32]
    b990:	ldp	x23, x24, [sp, #48]
    b994:	ldp	x29, x30, [sp], #96
    b998:	ret
    b99c:	ldp	x23, x24, [sp, #48]
    b9a0:	mov	x20, #0x0                   	// #0
    b9a4:	mov	x0, x20
    b9a8:	ldp	x19, x20, [sp, #16]
    b9ac:	ldp	x21, x22, [sp, #32]
    b9b0:	ldp	x29, x30, [sp], #96
    b9b4:	ret
    b9b8:	mov	x0, x20
    b9bc:	mov	x20, #0x0                   	// #0
    b9c0:	bl	8208 <ZSTD_free+0x958>
    b9c4:	ldp	x23, x24, [sp, #48]
    b9c8:	b	b9a4 <ZSTD_createDDict_advanced+0xbc>
    b9cc:	nop

000000000000b9d0 <ZSTD_createDDict>:
    b9d0:	stp	x29, x30, [sp, #-80]!
    b9d4:	mov	w3, #0x0                   	// #0
    b9d8:	mov	w2, #0x0                   	// #0
    b9dc:	mov	x29, sp
    b9e0:	stp	xzr, xzr, [sp, #56]
    b9e4:	add	x4, sp, #0x10
    b9e8:	ldp	x6, x7, [sp, #56]
    b9ec:	stp	x6, x7, [sp, #16]
    b9f0:	str	xzr, [sp, #32]
    b9f4:	bl	b8e8 <ZSTD_createDDict_advanced>
    b9f8:	ldp	x29, x30, [sp], #80
    b9fc:	ret

000000000000ba00 <ZSTD_createDDict_byReference>:
    ba00:	stp	x29, x30, [sp, #-80]!
    ba04:	mov	w3, #0x0                   	// #0
    ba08:	mov	w2, #0x1                   	// #1
    ba0c:	mov	x29, sp
    ba10:	stp	xzr, xzr, [sp, #56]
    ba14:	add	x4, sp, #0x10
    ba18:	ldp	x6, x7, [sp, #56]
    ba1c:	stp	x6, x7, [sp, #16]
    ba20:	str	xzr, [sp, #32]
    ba24:	bl	b8e8 <ZSTD_createDDict_advanced>
    ba28:	ldp	x29, x30, [sp], #80
    ba2c:	ret

000000000000ba30 <ZSTD_initStaticDDict>:
    ba30:	stp	x29, x30, [sp, #-48]!
    ba34:	tst	x0, #0x7
    ba38:	mov	x7, x1
    ba3c:	mov	x29, sp
    ba40:	stp	x19, x20, [sp, #16]
    ba44:	mov	x1, x2
    ba48:	mov	x19, x0
    ba4c:	stp	x21, x22, [sp, #32]
    ba50:	cset	w0, ne  // ne = any
    ba54:	mov	x20, x3
    ba58:	mov	w21, w5
    ba5c:	cmp	w4, #0x1
    ba60:	b.eq	bac0 <ZSTD_initStaticDDict+0x90>  // b.none
    ba64:	cmp	w0, #0x0
    ba68:	mov	x0, #0x6860                	// #26720
    ba6c:	add	x2, x3, x0
    ba70:	ccmp	x2, x7, #0x2, eq  // eq = none
    ba74:	b.hi	bad0 <ZSTD_initStaticDDict+0xa0>  // b.pmore
    ba78:	cbnz	w4, ba90 <ZSTD_initStaticDDict+0x60>
    ba7c:	add	x22, x19, x0
    ba80:	mov	x2, x3
    ba84:	mov	x0, x22
    ba88:	bl	0 <grub_memmove>
    ba8c:	mov	x1, x22
    ba90:	mov	w4, w21
    ba94:	mov	x2, x20
    ba98:	mov	x0, x19
    ba9c:	mov	w3, #0x1                   	// #1
    baa0:	bl	7eb8 <ZSTD_free+0x608>
    baa4:	cmn	x0, #0x78
    baa8:	b.hi	bad0 <ZSTD_initStaticDDict+0xa0>  // b.pmore
    baac:	mov	x0, x19
    bab0:	ldp	x19, x20, [sp, #16]
    bab4:	ldp	x21, x22, [sp, #32]
    bab8:	ldp	x29, x30, [sp], #48
    babc:	ret
    bac0:	cmp	w0, #0x0
    bac4:	mov	x0, #0x685f                	// #26719
    bac8:	ccmp	x7, x0, #0x0, eq  // eq = none
    bacc:	b.hi	ba90 <ZSTD_initStaticDDict+0x60>  // b.pmore
    bad0:	mov	x19, #0x0                   	// #0
    bad4:	mov	x0, x19
    bad8:	ldp	x19, x20, [sp, #16]
    badc:	ldp	x21, x22, [sp, #32]
    bae0:	ldp	x29, x30, [sp], #48
    bae4:	ret

000000000000bae8 <ZSTD_freeDDict>:
    bae8:	cbz	x0, bb04 <ZSTD_freeDDict+0x1c>
    baec:	stp	x29, x30, [sp, #-16]!
    baf0:	mov	x29, sp
    baf4:	bl	8208 <ZSTD_free+0x958>
    baf8:	mov	x0, #0x0                   	// #0
    bafc:	ldp	x29, x30, [sp], #16
    bb00:	ret
    bb04:	mov	x0, #0x0                   	// #0
    bb08:	ret
    bb0c:	nop

000000000000bb10 <ZSTD_estimateDDictSize>:
    bb10:	cmp	w1, #0x1
    bb14:	mov	x1, #0x6860                	// #26720
    bb18:	add	x0, x0, x1
    bb1c:	csel	x0, x0, x1, ne  // ne = any
    bb20:	ret
    bb24:	nop

000000000000bb28 <ZSTD_sizeof_DDict>:
    bb28:	cbz	x0, bb44 <ZSTD_sizeof_DDict+0x1c>
    bb2c:	ldr	x1, [x0]
    bb30:	cbz	x1, bb4c <ZSTD_sizeof_DDict+0x24>
    bb34:	ldr	x0, [x0, #16]
    bb38:	mov	x1, #0x6860                	// #26720
    bb3c:	add	x0, x0, x1
    bb40:	ret
    bb44:	mov	x0, #0x0                   	// #0
    bb48:	ret
    bb4c:	mov	x0, #0x6860                	// #26720
    bb50:	ret
    bb54:	nop

000000000000bb58 <ZSTD_getDictID_fromDict>:
    bb58:	mov	x2, x0
    bb5c:	cmp	x1, #0x7
    bb60:	mov	w0, #0x0                   	// #0
    bb64:	b.ls	bb80 <ZSTD_getDictID_fromDict+0x28>  // b.plast
    bb68:	ldr	w3, [x2]
    bb6c:	mov	w1, #0xa437                	// #42039
    bb70:	movk	w1, #0xec30, lsl #16
    bb74:	mov	w0, #0x0                   	// #0
    bb78:	cmp	w3, w1
    bb7c:	b.eq	bb84 <ZSTD_getDictID_fromDict+0x2c>  // b.none
    bb80:	ret
    bb84:	ldr	w0, [x2, #4]
    bb88:	ret
    bb8c:	nop

000000000000bb90 <ZSTD_getDictID_fromDDict>:
    bb90:	mov	x1, x0
    bb94:	cbz	x0, bbcc <ZSTD_getDictID_fromDDict+0x3c>
    bb98:	ldr	x2, [x1, #16]
    bb9c:	mov	w0, #0x0                   	// #0
    bba0:	cmp	x2, #0x7
    bba4:	b.ls	bbc0 <ZSTD_getDictID_fromDDict+0x30>  // b.plast
    bba8:	ldr	x1, [x1, #8]
    bbac:	mov	w2, #0xa437                	// #42039
    bbb0:	movk	w2, #0xec30, lsl #16
    bbb4:	ldr	w3, [x1]
    bbb8:	cmp	w3, w2
    bbbc:	b.eq	bbc4 <ZSTD_getDictID_fromDDict+0x34>  // b.none
    bbc0:	ret
    bbc4:	ldr	w0, [x1, #4]
    bbc8:	ret
    bbcc:	mov	w0, #0x0                   	// #0
    bbd0:	ret
    bbd4:	nop

000000000000bbd8 <ZSTD_getDictID_fromFrame>:
    bbd8:	stp	x29, x30, [sp, #-64]!
    bbdc:	mov	x2, x1
    bbe0:	mov	w3, #0x0                   	// #0
    bbe4:	mov	x29, sp
    bbe8:	mov	x1, x0
    bbec:	add	x0, sp, #0x18
    bbf0:	stp	xzr, xzr, [sp, #24]
    bbf4:	stp	xzr, xzr, [sp, #40]
    bbf8:	str	wzr, [sp, #56]
    bbfc:	bl	96a0 <ZSTD_getFrameHeader_advanced>
    bc00:	ldr	w1, [sp, #52]
    bc04:	cmn	x0, #0x77
    bc08:	ldp	x29, x30, [sp], #64
    bc0c:	csel	w0, w1, wzr, cc  // cc = lo, ul, last
    bc10:	ret
    bc14:	nop

000000000000bc18 <ZSTD_decompress_usingDDict>:
    bc18:	mov	x7, x5
    bc1c:	mov	x6, #0x0                   	// #0
    bc20:	mov	x5, #0x0                   	// #0
    bc24:	b	b358 <ZSTD_decompressBegin_usingDDict+0x108>

000000000000bc28 <ZSTD_createDStream>:
    bc28:	stp	x29, x30, [sp, #-80]!
    bc2c:	adrp	x1, 0 <FSE_versionNumber>
    bc30:	mov	x29, sp
    bc34:	ldr	x1, [x1]
    bc38:	add	x0, sp, #0x10
    bc3c:	add	x1, x1, #0x410
    bc40:	ldp	x2, x3, [x1]
    bc44:	stp	x2, x3, [sp, #16]
    bc48:	ldr	x1, [x1, #16]
    bc4c:	str	x1, [sp, #32]
    bc50:	bl	94c0 <ZSTD_createDCtx_advanced>
    bc54:	ldp	x29, x30, [sp], #80
    bc58:	ret
    bc5c:	nop
	...

000000000000bc68 <ZSTD_initStaticDStream>:
    bc68:	mov	x2, x0
    bc6c:	mov	x0, #0x71f7                	// #29175
    bc70:	movk	x0, #0x2, lsl #16
    bc74:	tst	x2, #0x7
    bc78:	ccmp	x1, x0, #0x0, eq  // eq = none
    bc7c:	mov	x0, #0x0                   	// #0
    bc80:	b.ls	bcdc <ZSTD_initStaticDStream+0x74>  // b.plast
    bc84:	add	x3, x2, #0x4, lsl #12
    bc88:	mov	x0, #0x7200                	// #29184
    bc8c:	add	x5, x2, x0
    bc90:	mov	x6, #0x1                   	// #1
    bc94:	movk	x6, #0x800, lsl #16
    bc98:	add	x4, x2, #0x27, lsl #12
    bc9c:	str	wzr, [x3, #12560]
    bca0:	mov	x0, x2
    bca4:	str	xzr, [x2, #28768]
    bca8:	add	x4, x4, #0x1f8
    bcac:	str	xzr, [x2, #29016]
    bcb0:	str	xzr, [x2, #29024]
    bcb4:	str	xzr, [x2, #29056]
    bcb8:	str	x6, [x2, #29072]
    bcbc:	str	xzr, [x2, #29088]
    bcc0:	stur	xzr, [x5, #-148]
    bcc4:	str	xzr, [x2, #29120]
    bcc8:	str	wzr, [x3, #12624]
    bccc:	str	wzr, [x3, #12744]
    bcd0:	str	wzr, [x3, #12756]
    bcd4:	str	x1, [x2, #29000]
    bcd8:	str	x4, [x2, #29048]
    bcdc:	ret

000000000000bce0 <ZSTD_createDStream_advanced>:
    bce0:	mov	x1, x0
    bce4:	stp	x29, x30, [sp, #-48]!
    bce8:	mov	x29, sp
    bcec:	ldp	x2, x3, [x1]
    bcf0:	stp	x2, x3, [sp, #16]
    bcf4:	add	x0, sp, #0x10
    bcf8:	ldr	x1, [x1, #16]
    bcfc:	str	x1, [sp, #32]
    bd00:	bl	94c0 <ZSTD_createDCtx_advanced>
    bd04:	ldp	x29, x30, [sp], #48
    bd08:	ret
    bd0c:	nop

000000000000bd10 <ZSTD_freeDStream>:
    bd10:	cbz	x0, bd20 <ZSTD_freeDStream+0x10>
    bd14:	ldr	x1, [x0, #29000]
    bd18:	cbnz	x1, bd28 <ZSTD_freeDStream+0x18>
    bd1c:	b	8270 <ZSTD_free+0x9c0>
    bd20:	mov	x0, #0x0                   	// #0
    bd24:	ret
    bd28:	mov	x0, #0xffffffffffffffc0    	// #-64
    bd2c:	ret

000000000000bd30 <ZSTD_DStreamInSize>:
    bd30:	mov	x0, #0x3                   	// #3
    bd34:	movk	x0, #0x2, lsl #16
    bd38:	ret
    bd3c:	nop

000000000000bd40 <ZSTD_DStreamOutSize>:
    bd40:	mov	x0, #0x20000               	// #131072
    bd44:	ret

000000000000bd48 <ZSTD_DCtx_loadDictionary_advanced>:
    bd48:	stp	x29, x30, [sp, #-96]!
    bd4c:	mov	x29, sp
    bd50:	stp	x19, x20, [sp, #16]
    bd54:	mov	x19, x0
    bd58:	add	x0, x0, #0x4, lsl #12
    bd5c:	ldr	w0, [x0, #12656]
    bd60:	cbnz	w0, be00 <ZSTD_DCtx_loadDictionary_advanced+0xb8>
    bd64:	ldr	x0, [x19, #29016]
    bd68:	stp	x21, x22, [sp, #32]
    bd6c:	mov	x20, x1
    bd70:	str	x23, [sp, #48]
    bd74:	mov	x21, x2
    bd78:	mov	w22, w3
    bd7c:	mov	w23, w4
    bd80:	cbz	x0, bd88 <ZSTD_DCtx_loadDictionary_advanced+0x40>
    bd84:	bl	8208 <ZSTD_free+0x958>
    bd88:	cmp	x20, #0x0
    bd8c:	ccmp	x21, #0x7, #0x0, ne  // ne = any
    bd90:	b.hi	bdb8 <ZSTD_DCtx_loadDictionary_advanced+0x70>  // b.pmore
    bd94:	mov	x1, #0x0                   	// #0
    bd98:	str	xzr, [x19, #29016]
    bd9c:	mov	x0, #0x0                   	// #0
    bda0:	ldp	x21, x22, [sp, #32]
    bda4:	ldr	x23, [sp, #48]
    bda8:	str	x1, [x19, #29024]
    bdac:	ldp	x19, x20, [sp, #16]
    bdb0:	ldp	x29, x30, [sp], #96
    bdb4:	ret
    bdb8:	add	x5, x19, #0x7, lsl #12
    bdbc:	mov	x1, x21
    bdc0:	mov	w3, w23
    bdc4:	mov	w2, w22
    bdc8:	mov	x0, x20
    bdcc:	add	x4, sp, #0x40
    bdd0:	ldp	x6, x7, [x5, #288]
    bdd4:	stp	x6, x7, [sp, #64]
    bdd8:	ldr	x5, [x19, #28976]
    bddc:	str	x5, [sp, #80]
    bde0:	bl	b8e8 <ZSTD_createDDict_advanced>
    bde4:	str	x0, [x19, #29016]
    bde8:	mov	x1, x0
    bdec:	cbnz	x0, bd9c <ZSTD_DCtx_loadDictionary_advanced+0x54>
    bdf0:	mov	x0, #0xffffffffffffffc0    	// #-64
    bdf4:	ldp	x21, x22, [sp, #32]
    bdf8:	ldr	x23, [sp, #48]
    bdfc:	b	bdac <ZSTD_DCtx_loadDictionary_advanced+0x64>
    be00:	mov	x0, #0xffffffffffffffc4    	// #-60
    be04:	ldp	x19, x20, [sp, #16]
    be08:	ldp	x29, x30, [sp], #96
    be0c:	ret

000000000000be10 <ZSTD_DCtx_loadDictionary_byReference>:
    be10:	mov	w4, #0x0                   	// #0
    be14:	mov	w3, #0x1                   	// #1
    be18:	b	bd48 <ZSTD_DCtx_loadDictionary_advanced>
    be1c:	nop

000000000000be20 <ZSTD_DCtx_loadDictionary>:
    be20:	mov	w4, #0x0                   	// #0
    be24:	mov	w3, #0x0                   	// #0
    be28:	b	bd48 <ZSTD_DCtx_loadDictionary_advanced>
    be2c:	nop

000000000000be30 <ZSTD_DCtx_refPrefix_advanced>:
    be30:	mov	w4, w3
    be34:	mov	w3, #0x1                   	// #1
    be38:	b	bd48 <ZSTD_DCtx_loadDictionary_advanced>
    be3c:	nop

000000000000be40 <ZSTD_DCtx_refPrefix>:
    be40:	mov	w4, #0x1                   	// #1
    be44:	mov	w3, w4
    be48:	b	bd48 <ZSTD_DCtx_loadDictionary_advanced>
    be4c:	nop

000000000000be50 <ZSTD_initDStream_usingDict>:
    be50:	stp	x29, x30, [sp, #-16]!
    be54:	add	x5, x0, #0x4, lsl #12
    be58:	mov	w4, #0x0                   	// #0
    be5c:	mov	x29, sp
    be60:	str	wzr, [x5, #12656]
    be64:	mov	w3, #0x0                   	// #0
    be68:	str	wzr, [x5, #12756]
    be6c:	bl	bd48 <ZSTD_DCtx_loadDictionary_advanced>
    be70:	cmn	x0, #0x78
    be74:	mov	x1, #0x5                   	// #5
    be78:	csel	x0, x0, x1, hi  // hi = pmore
    be7c:	ldp	x29, x30, [sp], #16
    be80:	ret
    be84:	nop

000000000000be88 <ZSTD_initDStream>:
    be88:	stp	x29, x30, [sp, #-16]!
    be8c:	add	x5, x0, #0x4, lsl #12
    be90:	mov	w4, #0x0                   	// #0
    be94:	mov	x29, sp
    be98:	str	wzr, [x5, #12656]
    be9c:	mov	w3, #0x0                   	// #0
    bea0:	str	wzr, [x5, #12756]
    bea4:	mov	x2, #0x0                   	// #0
    bea8:	mov	x1, #0x0                   	// #0
    beac:	bl	bd48 <ZSTD_DCtx_loadDictionary_advanced>
    beb0:	cmn	x0, #0x78
    beb4:	mov	x1, #0x5                   	// #5
    beb8:	csel	x0, x0, x1, hi  // hi = pmore
    bebc:	ldp	x29, x30, [sp], #16
    bec0:	ret
    bec4:	nop

000000000000bec8 <ZSTD_initDStream_usingDDict>:
    bec8:	stp	x29, x30, [sp, #-32]!
    becc:	add	x5, x0, #0x4, lsl #12
    bed0:	mov	w4, #0x0                   	// #0
    bed4:	mov	x29, sp
    bed8:	stp	x19, x20, [sp, #16]
    bedc:	mov	x19, x0
    bee0:	mov	x20, x1
    bee4:	str	wzr, [x5, #12656]
    bee8:	mov	w3, #0x0                   	// #0
    beec:	str	wzr, [x5, #12756]
    bef0:	mov	x2, #0x0                   	// #0
    bef4:	mov	x1, #0x0                   	// #0
    bef8:	bl	bd48 <ZSTD_DCtx_loadDictionary_advanced>
    befc:	str	x20, [x19, #29024]
    bf00:	cmn	x0, #0x78
    bf04:	mov	x1, #0x5                   	// #5
    bf08:	csel	x0, x0, x1, hi  // hi = pmore
    bf0c:	ldp	x19, x20, [sp, #16]
    bf10:	ldp	x29, x30, [sp], #32
    bf14:	ret

000000000000bf18 <ZSTD_resetDStream>:
    bf18:	mov	x1, x0
    bf1c:	mov	x2, #0x7200                	// #29184
    bf20:	add	x3, x1, #0x4, lsl #12
    bf24:	add	x2, x1, x2
    bf28:	mov	w4, #0x1                   	// #1
    bf2c:	mov	x0, #0x5                   	// #5
    bf30:	str	w4, [x3, #12656]
    bf34:	str	xzr, [x1, #29064]
    bf38:	str	xzr, [x1, #29096]
    bf3c:	str	xzr, [x1, #29104]
    bf40:	str	xzr, [x1, #29112]
    bf44:	stur	xzr, [x2, #-52]
    bf48:	ret
    bf4c:	nop

000000000000bf50 <ZSTD_setDStreamParameter>:
    bf50:	mov	x3, x0
    bf54:	add	x0, x0, #0x4, lsl #12
    bf58:	ldr	w0, [x0, #12656]
    bf5c:	cbnz	w0, bf7c <ZSTD_setDStreamParameter+0x2c>
    bf60:	mov	x0, #0xffffffffffffffd8    	// #-40
    bf64:	cbnz	w1, bf78 <ZSTD_setDStreamParameter+0x28>
    bf68:	cmp	w2, #0x0
    bf6c:	mov	x0, #0x0                   	// #0
    bf70:	csinv	w2, w2, wzr, ne  // ne = any
    bf74:	str	x2, [x3, #29072]
    bf78:	ret
    bf7c:	mov	x0, #0xffffffffffffffc4    	// #-60
    bf80:	ret
    bf84:	nop

000000000000bf88 <ZSTD_DCtx_refDDict>:
    bf88:	mov	x2, x0
    bf8c:	add	x0, x0, #0x4, lsl #12
    bf90:	ldr	w0, [x0, #12656]
    bf94:	cbnz	w0, bfa4 <ZSTD_DCtx_refDDict+0x1c>
    bf98:	mov	x0, #0x0                   	// #0
    bf9c:	str	x1, [x2, #29024]
    bfa0:	ret
    bfa4:	mov	x0, #0xffffffffffffffc4    	// #-60
    bfa8:	ret
    bfac:	nop

000000000000bfb0 <ZSTD_DCtx_setMaxWindowSize>:
    bfb0:	mov	x2, x0
    bfb4:	add	x0, x0, #0x4, lsl #12
    bfb8:	ldr	w0, [x0, #12656]
    bfbc:	cbnz	w0, bfcc <ZSTD_DCtx_setMaxWindowSize+0x1c>
    bfc0:	mov	x0, #0x0                   	// #0
    bfc4:	str	x1, [x2, #29072]
    bfc8:	ret
    bfcc:	mov	x0, #0xffffffffffffffc4    	// #-60
    bfd0:	ret
    bfd4:	nop

000000000000bfd8 <ZSTD_DCtx_setFormat>:
    bfd8:	add	x2, x0, #0x4, lsl #12
    bfdc:	ldr	w0, [x2, #12656]
    bfe0:	cbnz	w0, bff0 <ZSTD_DCtx_setFormat+0x18>
    bfe4:	mov	x0, #0x0                   	// #0
    bfe8:	str	w1, [x2, #12560]
    bfec:	ret
    bff0:	mov	x0, #0xffffffffffffffc4    	// #-60
    bff4:	ret

000000000000bff8 <ZSTD_sizeof_DStream>:
    bff8:	b	93e0 <ZSTD_sizeof_DCtx>
    bffc:	nop

000000000000c000 <ZSTD_decodingBufferSize_min>:
    c000:	mov	x2, #0x1ffff               	// #131071
    c004:	cmp	x0, x2
    c008:	add	x3, x0, #0x10
    c00c:	mov	x2, #0x20000               	// #131072
    c010:	csel	x2, x0, x2, ls  // ls = plast
    c014:	add	x0, x3, x2
    c018:	cmp	x0, x1
    c01c:	csel	x0, x0, x1, ls  // ls = plast
    c020:	ret
    c024:	nop

000000000000c028 <ZSTD_estimateDStreamSize>:
    c028:	mov	x2, #0x20000               	// #131072
    c02c:	cmp	x0, x2
    c030:	csel	x1, x0, x2, ls  // ls = plast
    c034:	mov	x4, #0x1ffff               	// #131071
    c038:	cmp	x0, x4
    c03c:	add	x3, x0, #0x27, lsl #12
    c040:	csel	x0, x0, x2, ls  // ls = plast
    c044:	add	x3, x3, #0x208
    c048:	add	x0, x1, x0
    c04c:	add	x0, x0, x3
    c050:	ret
    c054:	nop

000000000000c058 <ZSTD_estimateDStreamSize_fromFrame>:
    c058:	stp	x29, x30, [sp, #-64]!
    c05c:	mov	x2, x1
    c060:	mov	w3, #0x0                   	// #0
    c064:	mov	x29, sp
    c068:	mov	x1, x0
    c06c:	add	x0, sp, #0x18
    c070:	bl	96a0 <ZSTD_getFrameHeader_advanced>
    c074:	cmn	x0, #0x78
    c078:	b.hi	c0bc <ZSTD_estimateDStreamSize_fromFrame+0x64>  // b.pmore
    c07c:	cbnz	x0, c0c4 <ZSTD_estimateDStreamSize_fromFrame+0x6c>
    c080:	ldr	x1, [sp, #32]
    c084:	mov	x2, #0x80000000            	// #2147483648
    c088:	mov	x0, #0xfffffffffffffff0    	// #-16
    c08c:	add	x3, x1, #0x27, lsl #12
    c090:	cmp	x1, x2
    c094:	add	x3, x3, #0x208
    c098:	b.hi	c0bc <ZSTD_estimateDStreamSize_fromFrame+0x64>  // b.pmore
    c09c:	cmp	x1, #0x20, lsl #12
    c0a0:	mov	x2, #0x20000               	// #131072
    c0a4:	mov	x4, #0x1ffff               	// #131071
    c0a8:	csel	x0, x1, x2, ls  // ls = plast
    c0ac:	cmp	x1, x4
    c0b0:	csel	x1, x1, x2, ls  // ls = plast
    c0b4:	add	x0, x0, x1
    c0b8:	add	x0, x0, x3
    c0bc:	ldp	x29, x30, [sp], #64
    c0c0:	ret
    c0c4:	mov	x0, #0xffffffffffffffb8    	// #-72
    c0c8:	ldp	x29, x30, [sp], #64
    c0cc:	ret

000000000000c0d0 <ZSTD_decompressStream>:
    c0d0:	stp	x29, x30, [sp, #-208]!
    c0d4:	mov	x29, sp
    c0d8:	stp	x25, x26, [sp, #64]
    c0dc:	ldp	x3, x25, [x2, #8]
    c0e0:	stp	x27, x28, [sp, #80]
    c0e4:	mov	x28, #0xffffffffffffffb8    	// #-72
    c0e8:	str	x3, [sp, #120]
    c0ec:	cmp	x25, x3
    c0f0:	b.hi	c2a8 <ZSTD_decompressStream+0x1d8>  // b.pmore
    c0f4:	mov	x27, x0
    c0f8:	stp	x21, x22, [sp, #32]
    c0fc:	mov	x21, x1
    c100:	ldp	x0, x1, [x1, #8]
    c104:	mov	x28, #0xffffffffffffffba    	// #-70
    c108:	cmp	x1, x0
    c10c:	b.hi	c674 <ZSTD_decompressStream+0x5a4>  // b.pmore
    c110:	stp	x19, x20, [sp, #16]
    c114:	mov	x19, x2
    c118:	add	x26, x27, #0x27, lsl #12
    c11c:	ldr	x22, [x2]
    c120:	stp	x23, x24, [sp, #48]
    c124:	add	x24, x27, #0x4, lsl #12
    c128:	ldr	x2, [x21]
    c12c:	add	x20, x22, x25
    c130:	add	x26, x26, #0x1e0
    c134:	add	x22, x22, x3
    c138:	add	x0, x2, x0
    c13c:	add	x23, x2, x1
    c140:	mov	x1, #0x7070                	// #28784
    c144:	str	x0, [sp, #112]
    c148:	add	x0, x27, x1
    c14c:	str	x0, [sp, #104]
    c150:	ldr	w0, [x24, #12656]
    c154:	str	x20, [sp, #144]
    c158:	str	x23, [sp, #160]
    c15c:	cmp	w0, #0x2
    c160:	b.eq	c1c8 <ZSTD_decompressStream+0xf8>  // b.none
    c164:	b.hi	c1d8 <ZSTD_decompressStream+0x108>  // b.pmore
    c168:	cbz	w0, c418 <ZSTD_decompressStream+0x348>
    c16c:	ldr	x2, [x27, #29112]
    c170:	mov	x1, x26
    c174:	ldr	w3, [x24, #12560]
    c178:	ldr	x0, [sp, #104]
    c17c:	bl	96a0 <ZSTD_getFrameHeader_advanced>
    c180:	mov	x28, x0
    c184:	cmn	x0, #0x78
    c188:	b.hi	c748 <ZSTD_decompressStream+0x678>  // b.pmore
    c18c:	cbz	x0, c2bc <ZSTD_decompressStream+0x1ec>
    c190:	ldr	x0, [x27, #29112]
    c194:	sub	x4, x22, x20
    c198:	sub	x2, x28, x0
    c19c:	cmp	x2, x4
    c1a0:	b.hi	c7c8 <ZSTD_decompressStream+0x6f8>  // b.pmore
    c1a4:	mov	x1, x20
    c1a8:	add	x0, x26, x0
    c1ac:	add	x20, x20, x2
    c1b0:	bl	0 <grub_memmove>
    c1b4:	ldr	w0, [x24, #12656]
    c1b8:	str	x28, [x27, #29112]
    c1bc:	cmp	w0, #0x2
    c1c0:	b.ne	c164 <ZSTD_decompressStream+0x94>  // b.any
    c1c4:	nop
    c1c8:	ldr	x4, [x27, #28776]
    c1cc:	cbnz	x4, c3bc <ZSTD_decompressStream+0x2ec>
    c1d0:	str	wzr, [x24, #12656]
    c1d4:	b	c234 <ZSTD_decompressStream+0x164>
    c1d8:	cmp	w0, #0x3
    c1dc:	b.eq	c444 <ZSTD_decompressStream+0x374>  // b.none
    c1e0:	cmp	w0, #0x4
    c1e4:	b.ne	c874 <ZSTD_decompressStream+0x7a4>  // b.any
    c1e8:	ldr	x1, [x27, #29096]
    c1ec:	ldr	x0, [x27, #29104]
    c1f0:	sub	x28, x0, x1
    c1f4:	ldr	x0, [sp, #112]
    c1f8:	ldr	x5, [x27, #29080]
    c1fc:	sub	x4, x0, x23
    c200:	cmp	x4, x28
    c204:	mov	x0, x23
    c208:	csel	x2, x4, x28, ls  // ls = plast
    c20c:	add	x1, x5, x1
    c210:	add	x23, x23, x2
    c214:	stp	x2, x4, [sp, #128]
    c218:	bl	0 <grub_memmove>
    c21c:	ldp	x2, x4, [sp, #128]
    c220:	ldr	x0, [x27, #29096]
    c224:	add	x2, x2, x0
    c228:	str	x2, [x27, #29096]
    c22c:	cmp	x4, x28
    c230:	b.cs	c520 <ZSTD_decompressStream+0x450>  // b.hs, b.nlast
    c234:	ldr	x1, [sp, #144]
    c238:	ldr	x0, [x19]
    c23c:	cmp	x1, x20
    c240:	ldr	x1, [x21]
    c244:	sub	x0, x20, x0
    c248:	str	x0, [x19, #16]
    c24c:	ldr	x2, [sp, #160]
    c250:	sub	x1, x23, x1
    c254:	str	x1, [x21, #16]
    c258:	ccmp	x2, x23, #0x0, eq  // eq = none
    c25c:	b.eq	c638 <ZSTD_decompressStream+0x568>  // b.none
    c260:	str	wzr, [x24, #12756]
    c264:	ldr	x28, [x27, #28776]
    c268:	cbnz	x28, c758 <ZSTD_decompressStream+0x688>
    c26c:	ldr	x1, [x27, #29096]
    c270:	ldr	x2, [x27, #29104]
    c274:	ldr	w4, [x24, #12752]
    c278:	cmp	x2, x1
    c27c:	b.ne	c7a4 <ZSTD_decompressStream+0x6d4>  // b.any
    c280:	cbz	w4, c748 <ZSTD_decompressStream+0x678>
    c284:	ldr	x1, [x19, #8]
    c288:	cmp	x0, x1
    c28c:	b.cc	c820 <ZSTD_decompressStream+0x750>  // b.lo, b.ul, b.last
    c290:	mov	w0, #0x2                   	// #2
    c294:	mov	x28, #0x1                   	// #1
    c298:	ldp	x19, x20, [sp, #16]
    c29c:	ldp	x21, x22, [sp, #32]
    c2a0:	str	w0, [x24, #12656]
    c2a4:	ldp	x23, x24, [sp, #48]
    c2a8:	mov	x0, x28
    c2ac:	ldp	x25, x26, [sp, #64]
    c2b0:	ldp	x27, x28, [sp, #80]
    c2b4:	ldp	x29, x30, [sp], #208
    c2b8:	ret
    c2bc:	ldr	x0, [x27, #28784]
    c2c0:	cbz	x0, c2cc <ZSTD_decompressStream+0x1fc>
    c2c4:	ldr	x1, [x27, #28792]
    c2c8:	cbnz	x1, c5b8 <ZSTD_decompressStream+0x4e8>
    c2cc:	ldr	x1, [x27, #29024]
    c2d0:	mov	x0, x27
    c2d4:	bl	b250 <ZSTD_decompressBegin_usingDDict>
    c2d8:	mov	x28, x0
    c2dc:	cmn	x0, #0x78
    c2e0:	b.hi	c748 <ZSTD_decompressStream+0x678>  // b.pmore
    c2e4:	add	x1, x27, #0x24, lsl #12
    c2e8:	mov	w2, #0x2a50                	// #10832
    c2ec:	movk	w2, #0x184d, lsl #16
    c2f0:	ldr	w0, [x1, #12768]
    c2f4:	and	w0, w0, #0xfffffff0
    c2f8:	cmp	w0, w2
    c2fc:	b.ne	c588 <ZSTD_decompressStream+0x4b8>  // b.any
    c300:	ldr	w1, [x1, #12772]
    c304:	mov	w0, #0x7                   	// #7
    c308:	str	x1, [x27, #28776]
    c30c:	str	w0, [x24, #12452]
    c310:	ldr	x1, [x27, #28792]
    c314:	mov	x0, #0x400                 	// #1024
    c318:	ldr	x2, [x27, #29072]
    c31c:	cmp	x1, x0
    c320:	csel	x0, x1, x0, cs  // cs = hs, nlast
    c324:	str	x0, [x27, #28792]
    c328:	cmp	x0, x2
    c32c:	b.hi	c7f8 <ZSTD_decompressStream+0x728>  // b.pmore
    c330:	ldr	w3, [x24, #12416]
    c334:	mov	w5, #0x4                   	// #4
    c338:	mov	x2, #0x1ffff               	// #131071
    c33c:	mov	x4, #0x20000               	// #131072
    c340:	cmp	w3, w5
    c344:	csel	w3, w3, w5, cs  // cs = hs, nlast
    c348:	cmp	x1, x2
    c34c:	ldr	x2, [x27, #28784]
    c350:	csel	x1, x0, x4, ls  // ls = plast
    c354:	add	x0, x0, #0x10
    c358:	ldr	x4, [x27, #29056]
    c35c:	add	x0, x0, x1
    c360:	cmp	x0, x2
    c364:	csel	x28, x0, x2, ls  // ls = plast
    c368:	cmp	x4, x3
    c36c:	b.cc	c37c <ZSTD_decompressStream+0x2ac>  // b.lo, b.ul, b.last
    c370:	ldr	x0, [x27, #29088]
    c374:	cmp	x0, x28
    c378:	b.cs	c3ac <ZSTD_decompressStream+0x2dc>  // b.hs, b.nlast
    c37c:	ldr	x0, [x27, #29000]
    c380:	add	x6, x3, x28
    c384:	cbz	x0, c6cc <ZSTD_decompressStream+0x5fc>
    c388:	sub	x0, x0, #0x27, lsl #12
    c38c:	sub	x0, x0, #0x1f8
    c390:	cmp	x0, x6
    c394:	b.cc	c734 <ZSTD_decompressStream+0x664>  // b.lo, b.ul, b.last
    c398:	ldr	x0, [x27, #29048]
    c39c:	add	x0, x0, x3
    c3a0:	str	x3, [x27, #29056]
    c3a4:	str	x0, [x27, #29080]
    c3a8:	str	x28, [x27, #29088]
    c3ac:	ldr	x4, [x27, #28776]
    c3b0:	mov	w0, #0x2                   	// #2
    c3b4:	str	w0, [x24, #12656]
    c3b8:	cbz	x4, c1d0 <ZSTD_decompressStream+0x100>
    c3bc:	sub	x0, x22, x20
    c3c0:	cmp	x0, x4
    c3c4:	b.cc	c554 <ZSTD_decompressStream+0x484>  // b.lo, b.ul, b.last
    c3c8:	ldr	x1, [x27, #29080]
    c3cc:	ldr	x0, [x27, #29096]
    c3d0:	ldr	w2, [x24, #12452]
    c3d4:	add	x1, x1, x0
    c3d8:	cmp	w2, #0x7
    c3dc:	b.eq	c68c <ZSTD_decompressStream+0x5bc>  // b.none
    c3e0:	ldr	x2, [x27, #29088]
    c3e4:	mov	x3, x20
    c3e8:	str	x4, [sp, #128]
    c3ec:	sub	x2, x2, x0
    c3f0:	mov	x0, x27
    c3f4:	bl	a980 <ZSTD_decodeSeqHeaders+0xbb0>
    c3f8:	mov	x28, x0
    c3fc:	cmn	x0, #0x78
    c400:	b.hi	c748 <ZSTD_decompressStream+0x678>  // b.pmore
    c404:	ldr	x4, [sp, #128]
    c408:	add	x20, x20, x4
    c40c:	cbnz	x0, c6b4 <ZSTD_decompressStream+0x5e4>
    c410:	ldr	w0, [x24, #12656]
    c414:	b	c15c <ZSTD_decompressStream+0x8c>
    c418:	mov	x0, #0x7200                	// #29184
    c41c:	add	x0, x27, x0
    c420:	mov	w1, #0x1                   	// #1
    c424:	str	w1, [x24, #12656]
    c428:	str	xzr, [x27, #29064]
    c42c:	mov	x2, #0x0                   	// #0
    c430:	str	xzr, [x27, #29096]
    c434:	str	xzr, [x27, #29104]
    c438:	str	xzr, [x27, #29112]
    c43c:	stur	xzr, [x0, #-52]
    c440:	b	c170 <ZSTD_decompressStream+0xa0>
    c444:	ldr	x4, [x27, #28776]
    c448:	ldr	x0, [x27, #29064]
    c44c:	ldr	w5, [x24, #12452]
    c450:	sub	x28, x4, x0
    c454:	cmp	w5, #0x7
    c458:	b.eq	c578 <ZSTD_decompressStream+0x4a8>  // b.none
    c45c:	ldr	x1, [x27, #29056]
    c460:	str	w5, [sp, #128]
    c464:	str	x4, [sp, #136]
    c468:	sub	x1, x1, x0
    c46c:	cmp	x1, x28
    c470:	b.cc	c80c <ZSTD_decompressStream+0x73c>  // b.lo, b.ul, b.last
    c474:	sub	x2, x22, x20
    c478:	mov	x1, x20
    c47c:	ldr	x6, [x27, #29048]
    c480:	cmp	x2, x28
    c484:	csel	x2, x2, x28, ls  // ls = plast
    c488:	str	x2, [sp, #152]
    c48c:	add	x0, x6, x0
    c490:	bl	0 <grub_memmove>
    c494:	ldr	w5, [sp, #128]
    c498:	ldr	x4, [sp, #136]
    c49c:	ldr	x2, [sp, #152]
    c4a0:	ldr	x0, [x27, #29064]
    c4a4:	add	x0, x2, x0
    c4a8:	str	x0, [x27, #29064]
    c4ac:	add	x20, x20, x2
    c4b0:	cmp	x2, x28
    c4b4:	b.cc	c234 <ZSTD_decompressStream+0x164>  // b.lo, b.ul, b.last
    c4b8:	ldr	x0, [x27, #28776]
    c4bc:	cmp	x0, x4
    c4c0:	b.ne	c660 <ZSTD_decompressStream+0x590>  // b.any
    c4c4:	ldr	x3, [x27, #29048]
    c4c8:	mov	x0, x27
    c4cc:	ldr	x6, [x27, #29080]
    c4d0:	str	w5, [sp, #128]
    c4d4:	ldr	x2, [x27, #29088]
    c4d8:	ldr	x1, [x27, #29096]
    c4dc:	sub	x2, x2, x1
    c4e0:	add	x1, x6, x1
    c4e4:	bl	a980 <ZSTD_decodeSeqHeaders+0xbb0>
    c4e8:	mov	x28, x0
    c4ec:	cmn	x0, #0x78
    c4f0:	b.hi	c748 <ZSTD_decompressStream+0x678>  // b.pmore
    c4f4:	ldr	w5, [sp, #128]
    c4f8:	cmp	x0, #0x0
    c4fc:	str	xzr, [x27, #29064]
    c500:	ccmp	w5, #0x7, #0x4, eq  // eq = none
    c504:	b.ne	c3ac <ZSTD_decompressStream+0x2dc>  // b.any
    c508:	ldr	x1, [x27, #29096]
    c50c:	mov	w0, #0x4                   	// #4
    c510:	add	x2, x1, x28
    c514:	str	x2, [x27, #29104]
    c518:	str	w0, [x24, #12656]
    c51c:	b	c1f4 <ZSTD_decompressStream+0x124>
    c520:	ldr	x1, [x27, #28784]
    c524:	mov	w3, #0x2                   	// #2
    c528:	ldr	x0, [x27, #29088]
    c52c:	str	w3, [x24, #12656]
    c530:	cmp	x0, x1
    c534:	b.cs	c1c8 <ZSTD_decompressStream+0xf8>  // b.hs, b.nlast
    c538:	ldr	w1, [x24, #12416]
    c53c:	add	x2, x1, x2
    c540:	cmp	x0, x2
    c544:	b.cs	c1c8 <ZSTD_decompressStream+0xf8>  // b.hs, b.nlast
    c548:	str	xzr, [x27, #29096]
    c54c:	str	xzr, [x27, #29104]
    c550:	b	c1c8 <ZSTD_decompressStream+0xf8>
    c554:	cmp	x22, x20
    c558:	b.eq	c234 <ZSTD_decompressStream+0x164>  // b.none
    c55c:	mov	w0, #0x3                   	// #3
    c560:	str	w0, [x24, #12656]
    c564:	ldr	x0, [x27, #29064]
    c568:	ldr	w5, [x24, #12452]
    c56c:	sub	x28, x4, x0
    c570:	cmp	w5, #0x7
    c574:	b.ne	c45c <ZSTD_decompressStream+0x38c>  // b.any
    c578:	sub	x2, x22, x20
    c57c:	cmp	x2, x28
    c580:	csel	x2, x2, x28, ls  // ls = plast
    c584:	b	c4a4 <ZSTD_decompressStream+0x3d4>
    c588:	ldr	x2, [x27, #29112]
    c58c:	mov	x1, x26
    c590:	mov	x0, x27
    c594:	bl	98f0 <ZSTD_getFrameHeader_advanced+0x250>
    c598:	mov	x28, x0
    c59c:	cmn	x0, #0x78
    c5a0:	b.hi	c748 <ZSTD_decompressStream+0x678>  // b.pmore
    c5a4:	mov	x0, #0x3                   	// #3
    c5a8:	str	x0, [x27, #28776]
    c5ac:	mov	w0, #0x2                   	// #2
    c5b0:	str	w0, [x24, #12452]
    c5b4:	b	c310 <ZSTD_decompressStream+0x240>
    c5b8:	ldr	x1, [sp, #112]
    c5bc:	sub	x28, x1, x23
    c5c0:	cmp	x0, x28
    c5c4:	b.hi	c2cc <ZSTD_decompressStream+0x1fc>  // b.pmore
    c5c8:	ldr	x0, [sp, #120]
    c5cc:	sub	x1, x0, x25
    c5d0:	str	x1, [sp, #128]
    c5d4:	ldr	x0, [sp, #144]
    c5d8:	bl	ae58 <ZSTD_findFrameCompressedSize>
    c5dc:	mov	x4, x0
    c5e0:	ldr	x1, [sp, #128]
    c5e4:	cmp	x1, x0
    c5e8:	b.cc	c2cc <ZSTD_decompressStream+0x1fc>  // b.lo, b.ul, b.last
    c5ec:	ldr	x7, [x27, #29024]
    c5f0:	mov	x2, x28
    c5f4:	ldr	x20, [sp, #144]
    c5f8:	mov	x1, x23
    c5fc:	mov	x0, x27
    c600:	mov	x6, #0x0                   	// #0
    c604:	mov	x3, x20
    c608:	mov	x5, #0x0                   	// #0
    c60c:	str	x4, [sp, #104]
    c610:	bl	b358 <ZSTD_decompressBegin_usingDDict+0x108>
    c614:	mov	x28, x0
    c618:	cmn	x0, #0x78
    c61c:	b.hi	c748 <ZSTD_decompressStream+0x678>  // b.pmore
    c620:	ldr	x4, [sp, #104]
    c624:	str	xzr, [x27, #28776]
    c628:	add	x23, x23, x0
    c62c:	str	wzr, [x24, #12656]
    c630:	add	x20, x20, x4
    c634:	b	c234 <ZSTD_decompressStream+0x164>
    c638:	ldr	w1, [x24, #12756]
    c63c:	add	w1, w1, #0x1
    c640:	str	w1, [x24, #12756]
    c644:	cmp	w1, #0xf
    c648:	b.le	c264 <ZSTD_decompressStream+0x194>
    c64c:	ldr	x1, [sp, #112]
    c650:	cmp	x1, x23
    c654:	b.eq	c860 <ZSTD_decompressStream+0x790>  // b.none
    c658:	cmp	x22, x20
    c65c:	b.ne	c264 <ZSTD_decompressStream+0x194>  // b.any
    c660:	mov	x28, #0xffffffffffffffb8    	// #-72
    c664:	ldp	x19, x20, [sp, #16]
    c668:	ldp	x21, x22, [sp, #32]
    c66c:	ldp	x23, x24, [sp, #48]
    c670:	b	c2a8 <ZSTD_decompressStream+0x1d8>
    c674:	mov	x0, x28
    c678:	ldp	x21, x22, [sp, #32]
    c67c:	ldp	x25, x26, [sp, #64]
    c680:	ldp	x27, x28, [sp, #80]
    c684:	ldp	x29, x30, [sp], #208
    c688:	ret
    c68c:	mov	x3, x20
    c690:	mov	x0, x27
    c694:	mov	x2, #0x0                   	// #0
    c698:	str	x4, [sp, #128]
    c69c:	bl	a980 <ZSTD_decodeSeqHeaders+0xbb0>
    c6a0:	mov	x28, x0
    c6a4:	cmn	x0, #0x78
    c6a8:	ldr	x4, [sp, #128]
    c6ac:	b.hi	c748 <ZSTD_decompressStream+0x678>  // b.pmore
    c6b0:	add	x20, x20, x4
    c6b4:	ldr	x1, [x27, #29096]
    c6b8:	mov	w2, #0x4                   	// #4
    c6bc:	add	x0, x1, x28
    c6c0:	str	x0, [x27, #29104]
    c6c4:	str	w2, [x24, #12656]
    c6c8:	b	c1ec <ZSTD_decompressStream+0x11c>
    c6cc:	add	x7, x27, #0x7, lsl #12
    c6d0:	add	x1, sp, #0xb0
    c6d4:	ldr	x4, [x27, #28976]
    c6d8:	add	x10, x7, #0x120
    c6dc:	ldr	x0, [x27, #29048]
    c6e0:	str	x4, [sp, #192]
    c6e4:	stp	x7, x10, [sp, #128]
    c6e8:	ldp	x4, x5, [x7, #288]
    c6ec:	str	x3, [sp, #152]
    c6f0:	str	x6, [sp, #168]
    c6f4:	stp	x4, x5, [sp, #176]
    c6f8:	bl	78b0 <ZSTD_free>
    c6fc:	ldp	x7, x10, [sp, #128]
    c700:	add	x1, sp, #0xb0
    c704:	ldr	x6, [sp, #168]
    c708:	mov	x0, x6
    c70c:	ldr	x4, [x10, #16]
    c710:	str	xzr, [x27, #29056]
    c714:	str	xzr, [x27, #29088]
    c718:	str	x4, [sp, #192]
    c71c:	ldp	x4, x5, [x7, #288]
    c720:	stp	x4, x5, [sp, #176]
    c724:	bl	7840 <ZSTD_malloc>
    c728:	str	x0, [x27, #29048]
    c72c:	ldr	x3, [sp, #152]
    c730:	cbnz	x0, c39c <ZSTD_decompressStream+0x2cc>
    c734:	mov	x28, #0xffffffffffffffc0    	// #-64
    c738:	ldp	x19, x20, [sp, #16]
    c73c:	ldp	x21, x22, [sp, #32]
    c740:	ldp	x23, x24, [sp, #48]
    c744:	b	c2a8 <ZSTD_decompressStream+0x1d8>
    c748:	ldp	x19, x20, [sp, #16]
    c74c:	ldp	x21, x22, [sp, #32]
    c750:	ldp	x23, x24, [sp, #48]
    c754:	b	c2a8 <ZSTD_decompressStream+0x1d8>
    c758:	ldr	w0, [x24, #12452]
    c75c:	mov	x1, #0x0                   	// #0
    c760:	sub	w0, w0, #0x2
    c764:	cmp	w0, #0x5
    c768:	b.hi	c788 <ZSTD_decompressStream+0x6b8>  // b.pmore
    c76c:	adrp	x2, 0 <FSE_versionNumber>
    c770:	mov	x1, #0x3                   	// #3
    c774:	ldr	x2, [x2]
    c778:	add	x2, x2, #0x980
    c77c:	ldr	w0, [x2, w0, uxtw #2]
    c780:	cmp	w0, #0x2
    c784:	csel	x1, xzr, x1, ne  // ne = any
    c788:	ldr	x0, [x27, #29064]
    c78c:	ldp	x19, x20, [sp, #16]
    c790:	sub	x3, x28, x0
    c794:	add	x28, x3, x1
    c798:	ldp	x21, x22, [sp, #32]
    c79c:	ldp	x23, x24, [sp, #48]
    c7a0:	b	c2a8 <ZSTD_decompressStream+0x1d8>
    c7a4:	mov	x28, #0x1                   	// #1
    c7a8:	cbnz	w4, c748 <ZSTD_decompressStream+0x678>
    c7ac:	sub	x0, x0, #0x1
    c7b0:	ldp	x21, x22, [sp, #32]
    c7b4:	str	x0, [x19, #16]
    c7b8:	ldp	x19, x20, [sp, #16]
    c7bc:	str	w28, [x24, #12752]
    c7c0:	ldp	x23, x24, [sp, #48]
    c7c4:	b	c2a8 <ZSTD_decompressStream+0x1d8>
    c7c8:	cbnz	x4, c838 <ZSTD_decompressStream+0x768>
    c7cc:	cmp	x28, #0x6
    c7d0:	mov	x1, #0x6                   	// #6
    c7d4:	csel	x3, x28, x1, cs  // cs = hs, nlast
    c7d8:	add	x3, x3, #0x3
    c7dc:	ldr	x1, [x19, #8]
    c7e0:	sub	x28, x3, x0
    c7e4:	ldp	x21, x22, [sp, #32]
    c7e8:	ldp	x23, x24, [sp, #48]
    c7ec:	str	x1, [x19, #16]
    c7f0:	ldp	x19, x20, [sp, #16]
    c7f4:	b	c2a8 <ZSTD_decompressStream+0x1d8>
    c7f8:	mov	x28, #0xfffffffffffffff0    	// #-16
    c7fc:	ldp	x19, x20, [sp, #16]
    c800:	ldp	x21, x22, [sp, #32]
    c804:	ldp	x23, x24, [sp, #48]
    c808:	b	c2a8 <ZSTD_decompressStream+0x1d8>
    c80c:	mov	x28, #0xffffffffffffffec    	// #-20
    c810:	ldp	x19, x20, [sp, #16]
    c814:	ldp	x21, x22, [sp, #32]
    c818:	ldp	x23, x24, [sp, #48]
    c81c:	b	c2a8 <ZSTD_decompressStream+0x1d8>
    c820:	add	x0, x0, #0x1
    c824:	ldp	x21, x22, [sp, #32]
    c828:	ldp	x23, x24, [sp, #48]
    c82c:	str	x0, [x19, #16]
    c830:	ldp	x19, x20, [sp, #16]
    c834:	b	c2a8 <ZSTD_decompressStream+0x1d8>
    c838:	mov	x2, x4
    c83c:	mov	x1, x20
    c840:	add	x0, x26, x0
    c844:	str	x4, [sp, #104]
    c848:	bl	0 <grub_memmove>
    c84c:	ldr	x4, [sp, #104]
    c850:	ldr	x0, [x27, #29112]
    c854:	add	x0, x4, x0
    c858:	str	x0, [x27, #29112]
    c85c:	b	c7cc <ZSTD_decompressStream+0x6fc>
    c860:	mov	x28, #0xffffffffffffffba    	// #-70
    c864:	ldp	x19, x20, [sp, #16]
    c868:	ldp	x21, x22, [sp, #32]
    c86c:	ldp	x23, x24, [sp, #48]
    c870:	b	c2a8 <ZSTD_decompressStream+0x1d8>
    c874:	mov	x28, #0xffffffffffffffff    	// #-1
    c878:	ldp	x19, x20, [sp, #16]
    c87c:	ldp	x21, x22, [sp, #32]
    c880:	ldp	x23, x24, [sp, #48]
    c884:	b	c2a8 <ZSTD_decompressStream+0x1d8>
	...

000000000000c890 <ZSTD_decompress_generic>:
    c890:	b	c0d0 <ZSTD_decompressStream>
    c894:	nop

000000000000c898 <ZSTD_decompress_generic_simpleArgs>:
    c898:	stp	x29, x30, [sp, #-80]!
    c89c:	mov	x8, x1
    c8a0:	mov	x7, x2
    c8a4:	mov	x29, sp
    c8a8:	stp	x19, x20, [sp, #16]
    c8ac:	mov	x20, x3
    c8b0:	mov	x19, x6
    c8b4:	ldr	x3, [x6]
    c8b8:	add	x2, sp, #0x38
    c8bc:	ldr	x6, [x20]
    c8c0:	add	x1, sp, #0x20
    c8c4:	stp	x8, x7, [sp, #32]
    c8c8:	stp	x6, x4, [sp, #48]
    c8cc:	stp	x5, x3, [sp, #64]
    c8d0:	bl	c0d0 <ZSTD_decompressStream>
    c8d4:	ldr	x1, [sp, #48]
    c8d8:	str	x1, [x20]
    c8dc:	ldr	x1, [sp, #72]
    c8e0:	str	x1, [x19]
    c8e4:	ldp	x19, x20, [sp, #16]
    c8e8:	ldp	x29, x30, [sp], #80
    c8ec:	ret

000000000000c8f0 <ZSTD_DCtx_reset>:
    c8f0:	stp	x29, x30, [sp, #-32]!
    c8f4:	mov	x29, sp
    c8f8:	str	x19, [sp, #16]
    c8fc:	mov	x19, x0
    c900:	bl	be88 <ZSTD_initDStream>
    c904:	add	x1, x19, #0x4, lsl #12
    c908:	mov	x0, #0x1                   	// #1
    c90c:	movk	x0, #0x800, lsl #16
    c910:	str	wzr, [x1, #12560]
    c914:	str	x0, [x19, #29072]
    c918:	ldr	x19, [sp, #16]
    c91c:	ldp	x29, x30, [sp], #32
    c920:	ret
