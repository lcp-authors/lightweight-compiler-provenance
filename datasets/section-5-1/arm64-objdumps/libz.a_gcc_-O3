In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libz.a_gcc_-O3:

adler32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <adler32_z>:
   0:	mov	x10, x2
   4:	cmp	x2, #0x1
   8:	lsr	w8, w0, #16
   c:	mov	x2, x1
  10:	and	x1, x0, #0xffff
  14:	b.eq	308 <adler32_z+0x308>  // b.none
  18:	cbz	x2, 5b0 <adler32_z+0x5b0>
  1c:	cmp	x10, #0xf
  20:	b.ls	194 <adler32_z+0x194>  // b.plast
  24:	stp	x29, x30, [sp, #-32]!
  28:	mov	x14, #0x15af                	// #5551
  2c:	mov	x15, #0x15b0                	// #5552
  30:	mov	x29, sp
  34:	cmp	x10, x14
  38:	add	x9, x2, x15
  3c:	b.ls	348 <adler32_z+0x348>  // b.plast
  40:	mov	x12, #0xc5cd                	// #50637
  44:	mov	x13, #0xffffffffffffea50    	// #-5552
  48:	movk	x12, #0xd2f, lsl #16
  4c:	str	x19, [sp, #16]
  50:	movk	x12, #0xe1, lsl #32
  54:	movk	x12, #0xf, lsl #48
  58:	mov	x11, x10
  5c:	add	x2, x9, x13
  60:	add	x10, x10, x13
  64:	nop
  68:	ldrb	w4, [x2]
  6c:	add	x2, x2, #0x10
  70:	ldurb	w16, [x2, #-15]
  74:	add	x4, x4, x1
  78:	ldurb	w0, [x2, #-14]
  7c:	add	x16, x16, x4
  80:	ldurb	w1, [x2, #-13]
  84:	add	x0, x0, x16
  88:	ldurb	w7, [x2, #-12]
  8c:	add	x1, x1, x0
  90:	ldurb	w18, [x2, #-11]
  94:	add	x7, x7, x1
  98:	ldurb	w3, [x2, #-10]
  9c:	add	x18, x18, x7
  a0:	ldurb	w19, [x2, #-9]
  a4:	add	x3, x3, x18
  a8:	ldurb	w6, [x2, #-8]
  ac:	add	x19, x19, x3
  b0:	ldurb	w30, [x2, #-7]
  b4:	add	x6, x6, x19
  b8:	ldurb	w5, [x2, #-6]
  bc:	add	x30, x30, x6
  c0:	ldurb	w17, [x2, #-5]
  c4:	add	x16, x4, x16
  c8:	add	x1, x0, x1
  cc:	ldurb	w4, [x2, #-4]
  d0:	add	x5, x5, x30
  d4:	add	x1, x1, x16
  d8:	add	x18, x7, x18
  dc:	add	x16, x17, x5
  e0:	ldurb	w7, [x2, #-3]
  e4:	add	x0, x3, x19
  e8:	add	x4, x4, x16
  ec:	ldurb	w3, [x2, #-2]
  f0:	add	x1, x1, x18
  f4:	add	x1, x1, x0
  f8:	add	x7, x7, x4
  fc:	add	x0, x6, x30
 100:	ldurb	w6, [x2, #-1]
 104:	add	x0, x1, x0
 108:	add	x3, x3, x7
 10c:	add	x5, x5, x16
 110:	add	x4, x4, x7
 114:	add	x0, x0, x5
 118:	add	x1, x6, x3
 11c:	add	x0, x0, x4
 120:	add	x3, x3, x1
 124:	add	x0, x0, x3
 128:	cmp	x2, x9
 12c:	add	x8, x8, x0
 130:	b.ne	68 <adler32_z+0x68>  // b.any
 134:	umulh	x5, x1, x12
 138:	cmp	x10, x14
 13c:	umulh	x4, x8, x12
 140:	add	x9, x2, x15
 144:	sub	x3, x1, x5
 148:	sub	x0, x8, x4
 14c:	add	x3, x5, x3, lsr #1
 150:	add	x0, x4, x0, lsr #1
 154:	lsr	x3, x3, #15
 158:	lsr	x0, x0, #15
 15c:	lsl	x5, x3, #12
 160:	lsl	x4, x0, #12
 164:	sub	x5, x5, x3
 168:	sub	x4, x4, x0
 16c:	add	x3, x3, x5, lsl #4
 170:	add	x0, x0, x4, lsl #4
 174:	sub	x1, x1, x3
 178:	sub	x8, x8, x0
 17c:	b.hi	58 <adler32_z+0x58>  // b.pmore
 180:	cbnz	x10, 33c <adler32_z+0x33c>
 184:	orr	x0, x1, x8, lsl #16
 188:	ldr	x19, [sp, #16]
 18c:	ldp	x29, x30, [sp], #32
 190:	ret
 194:	cbz	x10, 2bc <adler32_z+0x2bc>
 198:	ldrb	w0, [x2]
 19c:	cmp	x10, #0x1
 1a0:	add	x1, x1, x0
 1a4:	add	x8, x8, x1
 1a8:	b.eq	2bc <adler32_z+0x2bc>  // b.none
 1ac:	ldrb	w0, [x2, #1]
 1b0:	cmp	x10, #0x2
 1b4:	add	x1, x1, x0
 1b8:	add	x8, x8, x1
 1bc:	b.eq	2bc <adler32_z+0x2bc>  // b.none
 1c0:	ldrb	w0, [x2, #2]
 1c4:	cmp	x10, #0x3
 1c8:	add	x1, x1, x0
 1cc:	add	x8, x8, x1
 1d0:	b.eq	2bc <adler32_z+0x2bc>  // b.none
 1d4:	ldrb	w0, [x2, #3]
 1d8:	cmp	x10, #0x4
 1dc:	add	x1, x1, x0
 1e0:	add	x8, x8, x1
 1e4:	b.eq	2bc <adler32_z+0x2bc>  // b.none
 1e8:	ldrb	w0, [x2, #4]
 1ec:	cmp	x10, #0x5
 1f0:	add	x1, x1, x0
 1f4:	add	x8, x8, x1
 1f8:	b.eq	2bc <adler32_z+0x2bc>  // b.none
 1fc:	ldrb	w0, [x2, #5]
 200:	cmp	x10, #0x6
 204:	add	x1, x1, x0
 208:	add	x8, x8, x1
 20c:	b.eq	2bc <adler32_z+0x2bc>  // b.none
 210:	ldrb	w0, [x2, #6]
 214:	cmp	x10, #0x7
 218:	add	x1, x1, x0
 21c:	add	x8, x8, x1
 220:	b.eq	2bc <adler32_z+0x2bc>  // b.none
 224:	ldrb	w0, [x2, #7]
 228:	cmp	x10, #0x8
 22c:	add	x1, x1, x0
 230:	add	x8, x8, x1
 234:	b.eq	2bc <adler32_z+0x2bc>  // b.none
 238:	ldrb	w0, [x2, #8]
 23c:	cmp	x10, #0x9
 240:	add	x1, x1, x0
 244:	add	x8, x8, x1
 248:	b.eq	2bc <adler32_z+0x2bc>  // b.none
 24c:	ldrb	w0, [x2, #9]
 250:	cmp	x10, #0xa
 254:	add	x1, x1, x0
 258:	add	x8, x8, x1
 25c:	b.eq	2bc <adler32_z+0x2bc>  // b.none
 260:	ldrb	w0, [x2, #10]
 264:	cmp	x10, #0xb
 268:	add	x1, x1, x0
 26c:	add	x8, x8, x1
 270:	b.eq	2bc <adler32_z+0x2bc>  // b.none
 274:	ldrb	w0, [x2, #11]
 278:	cmp	x10, #0xc
 27c:	add	x1, x1, x0
 280:	add	x8, x8, x1
 284:	b.eq	2bc <adler32_z+0x2bc>  // b.none
 288:	ldrb	w0, [x2, #12]
 28c:	cmp	x10, #0xd
 290:	add	x1, x1, x0
 294:	add	x8, x8, x1
 298:	b.eq	2bc <adler32_z+0x2bc>  // b.none
 29c:	ldrb	w0, [x2, #13]
 2a0:	cmp	x10, #0xe
 2a4:	add	x1, x1, x0
 2a8:	add	x8, x8, x1
 2ac:	b.eq	2bc <adler32_z+0x2bc>  // b.none
 2b0:	ldrb	w0, [x2, #14]
 2b4:	add	x1, x1, x0
 2b8:	add	x8, x8, x1
 2bc:	mov	x0, #0xc5cd                	// #50637
 2c0:	mov	x2, #0xfff0                	// #65520
 2c4:	movk	x0, #0xd2f, lsl #16
 2c8:	cmp	x1, x2
 2cc:	movk	x0, #0xe1, lsl #32
 2d0:	mov	x3, #0xffffffffffff000f    	// #-65521
 2d4:	movk	x0, #0xf, lsl #48
 2d8:	add	x3, x1, x3
 2dc:	csel	x1, x3, x1, hi  // hi = pmore
 2e0:	umulh	x2, x8, x0
 2e4:	sub	x0, x8, x2
 2e8:	add	x0, x2, x0, lsr #1
 2ec:	lsr	x2, x0, #15
 2f0:	lsl	x0, x2, #12
 2f4:	sub	x0, x0, x2
 2f8:	add	x0, x2, x0, lsl #4
 2fc:	sub	x8, x8, x0
 300:	orr	x0, x1, x8, lsl #16
 304:	ret
 308:	ldrb	w0, [x2]
 30c:	mov	x3, #0xfff0                	// #65520
 310:	mov	x2, #0xffffffffffff000f    	// #-65521
 314:	add	x1, x0, x1
 318:	add	x0, x1, x2
 31c:	cmp	x1, x3
 320:	csel	x1, x0, x1, hi  // hi = pmore
 324:	add	x8, x1, x8
 328:	add	x2, x8, x2
 32c:	cmp	x8, x3
 330:	csel	x8, x2, x8, hi  // hi = pmore
 334:	orr	x0, x1, x8, lsl #16
 338:	ret
 33c:	cmp	x10, #0xf
 340:	b.ls	5b8 <adler32_z+0x5b8>  // b.plast
 344:	ldr	x19, [sp, #16]
 348:	sub	x7, x10, #0x10
 34c:	lsr	x7, x7, #4
 350:	add	x9, x7, #0x1
 354:	add	x9, x2, x9, lsl #4
 358:	ldrb	w5, [x2]
 35c:	add	x2, x2, #0x10
 360:	ldurb	w11, [x2, #-15]
 364:	add	x5, x5, x1
 368:	ldurb	w0, [x2, #-14]
 36c:	add	x11, x11, x5
 370:	ldurb	w16, [x2, #-13]
 374:	add	x0, x0, x11
 378:	ldurb	w4, [x2, #-12]
 37c:	ldurb	w15, [x2, #-11]
 380:	add	x16, x16, x0
 384:	ldurb	w3, [x2, #-10]
 388:	add	x4, x4, x16
 38c:	ldurb	w14, [x2, #-9]
 390:	add	x15, x15, x4
 394:	add	x3, x3, x15
 398:	ldurb	w1, [x2, #-8]
 39c:	add	x14, x14, x3
 3a0:	ldurb	w13, [x2, #-7]
 3a4:	ldurb	w6, [x2, #-6]
 3a8:	add	x1, x1, x14
 3ac:	ldurb	w12, [x2, #-5]
 3b0:	add	x13, x13, x1
 3b4:	add	x11, x5, x11
 3b8:	add	x6, x6, x13
 3bc:	ldurb	w5, [x2, #-4]
 3c0:	add	x0, x0, x16
 3c4:	add	x0, x0, x11
 3c8:	add	x4, x4, x15
 3cc:	ldurb	w11, [x2, #-3]
 3d0:	add	x12, x12, x6
 3d4:	add	x0, x0, x4
 3d8:	add	x5, x5, x12
 3dc:	add	x4, x3, x14
 3e0:	ldurb	w3, [x2, #-2]
 3e4:	add	x0, x0, x4
 3e8:	add	x1, x1, x13
 3ec:	ldurb	w4, [x2, #-1]
 3f0:	add	x11, x11, x5
 3f4:	add	x0, x0, x1
 3f8:	add	x3, x3, x11
 3fc:	add	x6, x6, x12
 400:	add	x5, x5, x11
 404:	add	x0, x0, x6
 408:	add	x1, x4, x3
 40c:	add	x0, x0, x5
 410:	add	x3, x3, x1
 414:	add	x0, x0, x3
 418:	cmp	x2, x9
 41c:	add	x8, x8, x0
 420:	b.ne	358 <adler32_z+0x358>  // b.any
 424:	sub	x11, x10, #0x11
 428:	tst	x10, #0xf
 42c:	sub	x7, x11, x7, lsl #4
 430:	b.eq	554 <adler32_z+0x554>  // b.none
 434:	ldrb	w0, [x9]
 438:	add	x1, x1, x0
 43c:	add	x8, x8, x1
 440:	cbz	x7, 554 <adler32_z+0x554>
 444:	ldrb	w0, [x9, #1]
 448:	cmp	x7, #0x1
 44c:	add	x1, x1, x0
 450:	add	x8, x8, x1
 454:	b.eq	554 <adler32_z+0x554>  // b.none
 458:	ldrb	w0, [x9, #2]
 45c:	cmp	x7, #0x2
 460:	add	x1, x1, x0
 464:	add	x8, x8, x1
 468:	b.eq	554 <adler32_z+0x554>  // b.none
 46c:	ldrb	w0, [x9, #3]
 470:	cmp	x7, #0x3
 474:	add	x1, x1, x0
 478:	add	x8, x8, x1
 47c:	b.eq	554 <adler32_z+0x554>  // b.none
 480:	ldrb	w0, [x9, #4]
 484:	cmp	x7, #0x4
 488:	add	x1, x1, x0
 48c:	add	x8, x8, x1
 490:	b.eq	554 <adler32_z+0x554>  // b.none
 494:	ldrb	w0, [x9, #5]
 498:	cmp	x7, #0x5
 49c:	add	x1, x1, x0
 4a0:	add	x8, x8, x1
 4a4:	b.eq	554 <adler32_z+0x554>  // b.none
 4a8:	ldrb	w0, [x9, #6]
 4ac:	cmp	x7, #0x6
 4b0:	add	x1, x1, x0
 4b4:	add	x8, x8, x1
 4b8:	b.eq	554 <adler32_z+0x554>  // b.none
 4bc:	ldrb	w0, [x9, #7]
 4c0:	cmp	x7, #0x7
 4c4:	add	x1, x1, x0
 4c8:	add	x8, x8, x1
 4cc:	b.eq	554 <adler32_z+0x554>  // b.none
 4d0:	ldrb	w0, [x9, #8]
 4d4:	cmp	x7, #0x8
 4d8:	add	x1, x1, x0
 4dc:	add	x8, x8, x1
 4e0:	b.eq	554 <adler32_z+0x554>  // b.none
 4e4:	ldrb	w0, [x9, #9]
 4e8:	cmp	x7, #0x9
 4ec:	add	x1, x1, x0
 4f0:	add	x8, x8, x1
 4f4:	b.eq	554 <adler32_z+0x554>  // b.none
 4f8:	ldrb	w0, [x9, #10]
 4fc:	cmp	x7, #0xa
 500:	add	x1, x1, x0
 504:	add	x8, x8, x1
 508:	b.eq	554 <adler32_z+0x554>  // b.none
 50c:	ldrb	w0, [x9, #11]
 510:	cmp	x7, #0xb
 514:	add	x1, x1, x0
 518:	add	x8, x8, x1
 51c:	b.eq	554 <adler32_z+0x554>  // b.none
 520:	ldrb	w0, [x9, #12]
 524:	cmp	x7, #0xc
 528:	add	x1, x1, x0
 52c:	add	x8, x8, x1
 530:	b.eq	554 <adler32_z+0x554>  // b.none
 534:	ldrb	w0, [x9, #13]
 538:	cmp	x7, #0xd
 53c:	add	x1, x1, x0
 540:	add	x8, x8, x1
 544:	b.eq	554 <adler32_z+0x554>  // b.none
 548:	ldrb	w0, [x9, #14]
 54c:	add	x1, x1, x0
 550:	add	x8, x8, x1
 554:	mov	x0, #0xc5cd                	// #50637
 558:	movk	x0, #0xd2f, lsl #16
 55c:	movk	x0, #0xe1, lsl #32
 560:	movk	x0, #0xf, lsl #48
 564:	ldp	x29, x30, [sp], #32
 568:	umulh	x3, x8, x0
 56c:	umulh	x4, x1, x0
 570:	sub	x0, x8, x3
 574:	sub	x2, x1, x4
 578:	add	x0, x3, x0, lsr #1
 57c:	add	x2, x4, x2, lsr #1
 580:	lsr	x0, x0, #15
 584:	lsr	x2, x2, #15
 588:	lsl	x3, x0, #12
 58c:	lsl	x4, x2, #12
 590:	sub	x3, x3, x0
 594:	sub	x4, x4, x2
 598:	add	x0, x0, x3, lsl #4
 59c:	add	x2, x2, x4, lsl #4
 5a0:	sub	x8, x8, x0
 5a4:	sub	x1, x1, x2
 5a8:	orr	x0, x1, x8, lsl #16
 5ac:	ret
 5b0:	mov	x0, #0x1                   	// #1
 5b4:	ret
 5b8:	mov	x0, #0xffffffffffffea4f    	// #-5553
 5bc:	mov	x9, x2
 5c0:	add	x7, x11, x0
 5c4:	ldr	x19, [sp, #16]
 5c8:	b	434 <adler32_z+0x434>
 5cc:	nop

00000000000005d0 <adler32>:
 5d0:	mov	w2, w2
 5d4:	b	0 <adler32_z>

00000000000005d8 <adler32_combine>:
 5d8:	tbnz	x2, #63, 6b4 <adler32_combine+0xdc>
 5dc:	mov	x3, #0xe2e7                	// #58087
 5e0:	and	x4, x0, #0xffff
 5e4:	movk	x3, #0x8697, lsl #16
 5e8:	lsr	w7, w1, #16
 5ec:	movk	x3, #0x8070, lsl #32
 5f0:	mov	x5, #0xc5cd                	// #50637
 5f4:	movk	x3, #0x8007, lsl #48
 5f8:	movk	x5, #0xd2f, lsl #16
 5fc:	movk	x5, #0xe1, lsl #32
 600:	adds	x1, x4, w1, uxth
 604:	smulh	x3, x2, x3
 608:	movk	x5, #0xf, lsl #48
 60c:	lsr	w0, w0, #16
 610:	mov	x6, #0xfff0                	// #65520
 614:	add	x3, x3, x2
 618:	asr	x3, x3, #15
 61c:	sub	x3, x3, x2, asr #63
 620:	lsl	x8, x3, #12
 624:	sub	x8, x8, x3
 628:	add	x3, x3, x8, lsl #4
 62c:	sub	x3, x2, x3
 630:	sub	x7, x7, x3
 634:	mul	x3, x4, x3
 638:	umulh	x4, x3, x5
 63c:	sub	x2, x3, x4
 640:	add	x2, x4, x2, lsr #1
 644:	lsr	x2, x2, #15
 648:	lsl	x4, x2, #12
 64c:	sub	x4, x4, x2
 650:	add	x2, x2, x4, lsl #4
 654:	mov	x4, #0xfff1                	// #65521
 658:	sub	x3, x3, x2
 65c:	add	x3, x0, x3
 660:	add	x3, x3, x7
 664:	add	x0, x3, x4
 668:	b.eq	684 <adler32_combine+0xac>  // b.none
 66c:	sub	x6, x1, #0x1
 670:	mov	x2, #0xffffffffffff000e    	// #-65522
 674:	add	x1, x1, x2
 678:	mov	x2, #0xfff0                	// #65520
 67c:	cmp	x6, x2
 680:	csel	x6, x1, x6, hi  // hi = pmore
 684:	mov	x2, #0xffe1                	// #65505
 688:	mov	x1, #0xffffffffffff000f    	// #-65521
 68c:	movk	x2, #0x1, lsl #16
 690:	add	x3, x3, x1
 694:	cmp	x0, x2
 698:	mov	x2, #0xfff0                	// #65520
 69c:	csel	x0, x3, x0, hi  // hi = pmore
 6a0:	add	x1, x0, x1
 6a4:	cmp	x0, x2
 6a8:	csel	x0, x1, x0, hi  // hi = pmore
 6ac:	orr	x0, x6, x0, lsl #16
 6b0:	ret
 6b4:	mov	x0, #0xffffffff            	// #4294967295
 6b8:	ret
 6bc:	nop

00000000000006c0 <adler32_combine64>:
 6c0:	tbnz	x2, #63, 79c <adler32_combine64+0xdc>
 6c4:	mov	x3, #0xe2e7                	// #58087
 6c8:	and	x4, x0, #0xffff
 6cc:	movk	x3, #0x8697, lsl #16
 6d0:	lsr	w7, w1, #16
 6d4:	movk	x3, #0x8070, lsl #32
 6d8:	mov	x5, #0xc5cd                	// #50637
 6dc:	movk	x3, #0x8007, lsl #48
 6e0:	movk	x5, #0xd2f, lsl #16
 6e4:	movk	x5, #0xe1, lsl #32
 6e8:	adds	x1, x4, w1, uxth
 6ec:	smulh	x3, x2, x3
 6f0:	movk	x5, #0xf, lsl #48
 6f4:	lsr	w0, w0, #16
 6f8:	mov	x6, #0xfff0                	// #65520
 6fc:	add	x3, x3, x2
 700:	asr	x3, x3, #15
 704:	sub	x3, x3, x2, asr #63
 708:	lsl	x8, x3, #12
 70c:	sub	x8, x8, x3
 710:	add	x3, x3, x8, lsl #4
 714:	sub	x3, x2, x3
 718:	sub	x7, x7, x3
 71c:	mul	x3, x4, x3
 720:	umulh	x4, x3, x5
 724:	sub	x2, x3, x4
 728:	add	x2, x4, x2, lsr #1
 72c:	lsr	x2, x2, #15
 730:	lsl	x4, x2, #12
 734:	sub	x4, x4, x2
 738:	add	x2, x2, x4, lsl #4
 73c:	mov	x4, #0xfff1                	// #65521
 740:	sub	x3, x3, x2
 744:	add	x3, x0, x3
 748:	add	x3, x3, x7
 74c:	add	x0, x3, x4
 750:	b.eq	76c <adler32_combine64+0xac>  // b.none
 754:	sub	x6, x1, #0x1
 758:	mov	x2, #0xffffffffffff000e    	// #-65522
 75c:	add	x1, x1, x2
 760:	mov	x2, #0xfff0                	// #65520
 764:	cmp	x6, x2
 768:	csel	x6, x1, x6, hi  // hi = pmore
 76c:	mov	x2, #0xffe1                	// #65505
 770:	mov	x1, #0xffffffffffff000f    	// #-65521
 774:	movk	x2, #0x1, lsl #16
 778:	add	x3, x3, x1
 77c:	cmp	x0, x2
 780:	mov	x2, #0xfff0                	// #65520
 784:	csel	x0, x3, x0, hi  // hi = pmore
 788:	add	x1, x0, x1
 78c:	cmp	x0, x2
 790:	csel	x0, x1, x0, hi  // hi = pmore
 794:	orr	x0, x6, x0, lsl #16
 798:	ret
 79c:	mov	x0, #0xffffffff            	// #4294967295
 7a0:	ret

crc32.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <crc32_little>:
   0:	mov	w4, w0
   4:	mvn	w3, w0
   8:	cbz	x2, 48 <crc32_little+0x48>
   c:	tst	x1, #0x3
  10:	b.eq	50 <crc32_little+0x50>  // b.none
  14:	adrp	x0, 0 <crc32_little>
  18:	add	x0, x0, #0x0
  1c:	b	28 <crc32_little+0x28>
  20:	tst	x1, #0x3
  24:	b.eq	50 <crc32_little+0x50>  // b.none
  28:	ldrb	w4, [x1], #1
  2c:	subs	x2, x2, #0x1
  30:	eor	w4, w4, w3
  34:	and	x4, x4, #0xff
  38:	ldr	w4, [x0, x4, lsl #2]
  3c:	eor	w3, w4, w3, lsr #8
  40:	b.ne	20 <crc32_little+0x20>  // b.any
  44:	mvn	w4, w3
  48:	mov	w0, w4
  4c:	ret
  50:	cmp	x2, #0x1f
  54:	b.ls	258 <crc32_little+0x258>  // b.plast
  58:	sub	x7, x2, #0x20
  5c:	adrp	x0, 0 <crc32_little>
  60:	and	x7, x7, #0xffffffffffffffe0
  64:	add	x0, x0, #0x0
  68:	add	x7, x7, #0x20
  6c:	add	x7, x1, x7
  70:	ldp	w4, w8, [x1]
  74:	ldp	w13, w12, [x1, #8]
  78:	eor	w3, w3, w4
  7c:	ldr	w4, [x1, #16]
  80:	add	x1, x1, #0x20
  84:	ubfx	x6, x3, #8, #8
  88:	ubfx	x5, x3, #16, #8
  8c:	add	x10, x0, w3, uxtb #2
  90:	add	x6, x6, #0x200
  94:	add	x5, x5, #0x100
  98:	lsr	w3, w3, #24
  9c:	ldur	w11, [x1, #-12]
  a0:	ldr	w9, [x0, x6, lsl #2]
  a4:	ldr	w6, [x0, x5, lsl #2]
  a8:	ldr	w5, [x0, x3, lsl #2]
  ac:	ldr	w3, [x10, #3072]
  b0:	eor	w9, w9, w6
  b4:	ldur	w10, [x1, #-8]
  b8:	cmp	x1, x7
  bc:	eor	w3, w3, w5
  c0:	eor	w9, w9, w3
  c4:	eor	w9, w9, w8
  c8:	ubfx	x5, x9, #8, #8
  cc:	ubfx	x3, x9, #16, #8
  d0:	add	x5, x5, #0x200
  d4:	add	x3, x3, #0x100
  d8:	add	x14, x0, w9, uxtb #2
  dc:	lsr	w9, w9, #24
  e0:	ldr	w6, [x0, x3, lsl #2]
  e4:	ldr	w8, [x0, x5, lsl #2]
  e8:	ldr	w3, [x14, #3072]
  ec:	ldr	w5, [x0, x9, lsl #2]
  f0:	eor	w8, w8, w6
  f4:	eor	w3, w3, w5
  f8:	eor	w8, w8, w3
  fc:	eor	w8, w8, w13
 100:	ubfx	x5, x8, #8, #8
 104:	ubfx	x3, x8, #16, #8
 108:	add	x5, x5, #0x200
 10c:	add	x3, x3, #0x100
 110:	add	x13, x0, w8, uxtb #2
 114:	lsr	w8, w8, #24
 118:	ldr	w9, [x0, x3, lsl #2]
 11c:	ldr	w6, [x0, x5, lsl #2]
 120:	ldr	w3, [x13, #3072]
 124:	ldr	w5, [x0, x8, lsl #2]
 128:	eor	w6, w6, w9
 12c:	eor	w3, w3, w5
 130:	eor	w6, w6, w3
 134:	eor	w6, w6, w12
 138:	ubfx	x5, x6, #8, #8
 13c:	ubfx	x3, x6, #16, #8
 140:	add	x3, x3, #0x100
 144:	add	x9, x0, w6, uxtb #2
 148:	add	x5, x5, #0x200
 14c:	lsr	w6, w6, #24
 150:	ldr	w8, [x0, x3, lsl #2]
 154:	ldr	w6, [x0, x6, lsl #2]
 158:	ldr	w5, [x0, x5, lsl #2]
 15c:	ldr	w3, [x9, #3072]
 160:	eor	w5, w5, w8
 164:	eor	w3, w3, w6
 168:	eor	w5, w5, w3
 16c:	eor	w5, w5, w4
 170:	ubfx	x4, x5, #8, #8
 174:	ubfx	x3, x5, #16, #8
 178:	add	x8, x0, w5, uxtb #2
 17c:	add	x3, x3, #0x100
 180:	add	x4, x4, #0x200
 184:	lsr	w5, w5, #24
 188:	ldr	w6, [x0, x3, lsl #2]
 18c:	ldr	w5, [x0, x5, lsl #2]
 190:	ldr	w3, [x8, #3072]
 194:	ldr	w4, [x0, x4, lsl #2]
 198:	eor	w3, w3, w5
 19c:	eor	w4, w4, w6
 1a0:	eor	w4, w4, w3
 1a4:	eor	w4, w4, w11
 1a8:	ubfx	x3, x4, #8, #8
 1ac:	ubfx	x5, x4, #16, #8
 1b0:	add	x8, x0, w4, uxtb #2
 1b4:	add	x5, x5, #0x100
 1b8:	lsr	w4, w4, #24
 1bc:	add	x3, x3, #0x200
 1c0:	ldr	w6, [x0, x5, lsl #2]
 1c4:	ldr	w3, [x0, x3, lsl #2]
 1c8:	ldr	w5, [x0, x4, lsl #2]
 1cc:	ldr	w4, [x8, #3072]
 1d0:	eor	w3, w3, w6
 1d4:	eor	w4, w4, w5
 1d8:	eor	w3, w3, w4
 1dc:	eor	w3, w3, w10
 1e0:	ubfx	x6, x3, #8, #8
 1e4:	ubfx	x5, x3, #16, #8
 1e8:	add	x8, x0, w3, uxtb #2
 1ec:	lsr	w4, w3, #24
 1f0:	add	x6, x6, #0x200
 1f4:	add	x5, x5, #0x100
 1f8:	ldr	w3, [x0, x6, lsl #2]
 1fc:	ldr	w5, [x0, x5, lsl #2]
 200:	ldr	w6, [x0, x4, lsl #2]
 204:	ldr	w4, [x8, #3072]
 208:	eor	w3, w3, w5
 20c:	ldur	w5, [x1, #-4]
 210:	eor	w4, w4, w6
 214:	eor	w3, w3, w4
 218:	eor	w3, w3, w5
 21c:	ubfx	x4, x3, #8, #8
 220:	ubfx	x5, x3, #16, #8
 224:	add	x5, x5, #0x100
 228:	add	x8, x0, w3, uxtb #2
 22c:	add	x4, x4, #0x200
 230:	lsr	w3, w3, #24
 234:	ldr	w6, [x0, x5, lsl #2]
 238:	ldr	w4, [x0, x4, lsl #2]
 23c:	ldr	w5, [x0, x3, lsl #2]
 240:	ldr	w3, [x8, #3072]
 244:	eor	w4, w4, w6
 248:	eor	w3, w3, w5
 24c:	eor	w3, w4, w3
 250:	b.ne	70 <crc32_little+0x70>  // b.any
 254:	and	x2, x2, #0x1f
 258:	cmp	x2, #0x3
 25c:	b.ls	464 <crc32_little+0x464>  // b.plast
 260:	ldr	w0, [x1]
 264:	adrp	x5, 0 <crc32_little>
 268:	add	x5, x5, #0x0
 26c:	sub	x6, x2, #0x4
 270:	eor	w3, w3, w0
 274:	cmp	x6, #0x3
 278:	ubfx	x4, x3, #16, #8
 27c:	ubfx	x0, x3, #8, #8
 280:	add	x0, x0, #0x200
 284:	add	x8, x5, w3, uxtb #2
 288:	add	x4, x4, #0x100
 28c:	lsr	w3, w3, #24
 290:	ldr	w7, [x5, x0, lsl #2]
 294:	ldr	w4, [x5, x4, lsl #2]
 298:	ldr	w3, [x5, x3, lsl #2]
 29c:	ldr	w0, [x8, #3072]
 2a0:	eor	w4, w4, w7
 2a4:	eor	w3, w3, w0
 2a8:	eor	w3, w4, w3
 2ac:	b.ls	454 <crc32_little+0x454>  // b.plast
 2b0:	ldr	w0, [x1, #4]
 2b4:	sub	x4, x2, #0x8
 2b8:	cmp	x4, #0x3
 2bc:	eor	w3, w3, w0
 2c0:	ubfx	x4, x3, #16, #8
 2c4:	ubfx	x0, x3, #8, #8
 2c8:	lsr	w7, w3, #24
 2cc:	add	x0, x0, #0x200
 2d0:	add	x3, x5, w3, uxtb #2
 2d4:	add	x4, x4, #0x100
 2d8:	ldr	w8, [x5, x0, lsl #2]
 2dc:	ldr	w4, [x5, x4, lsl #2]
 2e0:	ldr	w0, [x5, x7, lsl #2]
 2e4:	ldr	w7, [x3, #3072]
 2e8:	eor	w3, w4, w8
 2ec:	eor	w0, w0, w7
 2f0:	eor	w3, w3, w0
 2f4:	b.ls	454 <crc32_little+0x454>  // b.plast
 2f8:	ldr	w4, [x1, #8]
 2fc:	sub	x0, x2, #0xc
 300:	cmp	x0, #0x3
 304:	eor	w3, w3, w4
 308:	ubfx	x4, x3, #16, #8
 30c:	ubfx	x0, x3, #8, #8
 310:	lsr	w7, w3, #24
 314:	add	x0, x0, #0x200
 318:	add	x3, x5, w3, uxtb #2
 31c:	add	x4, x4, #0x100
 320:	ldr	w8, [x5, x0, lsl #2]
 324:	ldr	w4, [x5, x4, lsl #2]
 328:	ldr	w0, [x5, x7, lsl #2]
 32c:	ldr	w7, [x3, #3072]
 330:	eor	w3, w4, w8
 334:	eor	w0, w0, w7
 338:	eor	w3, w3, w0
 33c:	b.ls	454 <crc32_little+0x454>  // b.plast
 340:	ldr	w4, [x1, #12]
 344:	sub	x0, x2, #0x10
 348:	cmp	x0, #0x3
 34c:	eor	w3, w3, w4
 350:	ubfx	x4, x3, #16, #8
 354:	ubfx	x0, x3, #8, #8
 358:	lsr	w7, w3, #24
 35c:	add	x0, x0, #0x200
 360:	add	x3, x5, w3, uxtb #2
 364:	add	x4, x4, #0x100
 368:	ldr	w8, [x5, x0, lsl #2]
 36c:	ldr	w4, [x5, x4, lsl #2]
 370:	ldr	w0, [x5, x7, lsl #2]
 374:	ldr	w7, [x3, #3072]
 378:	eor	w3, w4, w8
 37c:	eor	w0, w0, w7
 380:	eor	w3, w3, w0
 384:	b.ls	454 <crc32_little+0x454>  // b.plast
 388:	ldr	w4, [x1, #16]
 38c:	sub	x0, x2, #0x14
 390:	cmp	x0, #0x3
 394:	eor	w3, w3, w4
 398:	ubfx	x4, x3, #16, #8
 39c:	ubfx	x0, x3, #8, #8
 3a0:	lsr	w7, w3, #24
 3a4:	add	x0, x0, #0x200
 3a8:	add	x3, x5, w3, uxtb #2
 3ac:	add	x4, x4, #0x100
 3b0:	ldr	w8, [x5, x0, lsl #2]
 3b4:	ldr	w4, [x5, x4, lsl #2]
 3b8:	ldr	w0, [x5, x7, lsl #2]
 3bc:	ldr	w7, [x3, #3072]
 3c0:	eor	w3, w4, w8
 3c4:	eor	w0, w0, w7
 3c8:	eor	w3, w3, w0
 3cc:	b.ls	454 <crc32_little+0x454>  // b.plast
 3d0:	ldr	w4, [x1, #20]
 3d4:	sub	x0, x2, #0x18
 3d8:	cmp	x0, #0x3
 3dc:	eor	w3, w3, w4
 3e0:	ubfx	x4, x3, #16, #8
 3e4:	ubfx	x0, x3, #8, #8
 3e8:	lsr	w7, w3, #24
 3ec:	add	x0, x0, #0x200
 3f0:	add	x3, x5, w3, uxtb #2
 3f4:	add	x4, x4, #0x100
 3f8:	ldr	w8, [x5, x0, lsl #2]
 3fc:	ldr	w4, [x5, x4, lsl #2]
 400:	ldr	w0, [x5, x7, lsl #2]
 404:	ldr	w7, [x3, #3072]
 408:	eor	w3, w4, w8
 40c:	eor	w0, w0, w7
 410:	eor	w3, w3, w0
 414:	b.ls	454 <crc32_little+0x454>  // b.plast
 418:	ldr	w4, [x1, #24]
 41c:	eor	w3, w3, w4
 420:	ubfx	x0, x3, #8, #8
 424:	ubfx	x4, x3, #16, #8
 428:	add	x4, x4, #0x100
 42c:	add	x8, x5, w3, uxtb #2
 430:	add	x0, x0, #0x200
 434:	lsr	w3, w3, #24
 438:	ldr	w7, [x5, x4, lsl #2]
 43c:	ldr	w0, [x5, x0, lsl #2]
 440:	ldr	w4, [x5, x3, lsl #2]
 444:	ldr	w3, [x8, #3072]
 448:	eor	w0, w0, w7
 44c:	eor	w3, w3, w4
 450:	eor	w3, w3, w0
 454:	and	x0, x6, #0xfffffffffffffffc
 458:	and	x2, x2, #0x3
 45c:	add	x0, x0, #0x4
 460:	add	x1, x1, x0
 464:	cbz	x2, 44 <crc32_little+0x44>
 468:	ldrb	w0, [x1]
 46c:	adrp	x5, 0 <crc32_little>
 470:	add	x5, x5, #0x0
 474:	subs	x2, x2, #0x1
 478:	eor	w0, w0, w3
 47c:	and	x0, x0, #0xff
 480:	ldr	w4, [x5, x0, lsl #2]
 484:	eor	w3, w4, w3, lsr #8
 488:	b.eq	44 <crc32_little+0x44>  // b.none
 48c:	ldrb	w0, [x1, #1]
 490:	cmp	x2, #0x1
 494:	eor	w0, w0, w3
 498:	and	x0, x0, #0xff
 49c:	ldr	w0, [x5, x0, lsl #2]
 4a0:	eor	w3, w0, w3, lsr #8
 4a4:	b.eq	44 <crc32_little+0x44>  // b.none
 4a8:	ldrb	w0, [x1, #2]
 4ac:	eor	w0, w0, w3
 4b0:	and	x0, x0, #0xff
 4b4:	ldr	w0, [x5, x0, lsl #2]
 4b8:	eor	w3, w0, w3, lsr #8
 4bc:	b	44 <crc32_little+0x44>

00000000000004c0 <crc32_combine_>:
 4c0:	cmp	x2, #0x0
 4c4:	mov	x6, x0
 4c8:	b.le	738 <crc32_combine_+0x278>
 4cc:	sub	sp, sp, #0x200
 4d0:	mov	x7, x2
 4d4:	mov	x8, x1
 4d8:	mov	x3, #0x8320                	// #33568
 4dc:	add	x2, sp, #0x200
 4e0:	add	x1, sp, #0x108
 4e4:	movk	x3, #0xedb8, lsl #16
 4e8:	mov	x0, #0x1                   	// #1
 4ec:	str	x3, [sp, #256]
 4f0:	str	x0, [x1], #8
 4f4:	lsl	x0, x0, #1
 4f8:	cmp	x2, x1
 4fc:	b.ne	4f0 <crc32_combine_+0x30>  // b.any
 500:	mov	x5, #0x1                   	// #1
 504:	nop
 508:	lsl	x4, x5, #3
 50c:	add	x0, sp, #0x100
 510:	add	x0, x0, x4
 514:	ldur	x0, [x0, #-8]
 518:	cbz	x0, 6c4 <crc32_combine_+0x204>
 51c:	add	x1, sp, #0x100
 520:	mov	x2, #0x0                   	// #0
 524:	nop
 528:	tbz	w0, #0, 534 <crc32_combine_+0x74>
 52c:	ldr	x3, [x1]
 530:	eor	x2, x2, x3
 534:	lsr	x0, x0, #1
 538:	add	x1, x1, #0x8
 53c:	cbnz	x0, 528 <crc32_combine_+0x68>
 540:	add	x4, sp, x4
 544:	add	x5, x5, #0x1
 548:	cmp	x5, #0x21
 54c:	stur	x2, [x4, #-8]
 550:	b.ne	508 <crc32_combine_+0x48>  // b.any
 554:	mov	x5, #0x1                   	// #1
 558:	lsl	x4, x5, #3
 55c:	add	x0, sp, x4
 560:	ldur	x0, [x0, #-8]
 564:	cbz	x0, 6a4 <crc32_combine_+0x1e4>
 568:	mov	x1, sp
 56c:	mov	x2, #0x0                   	// #0
 570:	tbz	w0, #0, 57c <crc32_combine_+0xbc>
 574:	ldr	x3, [x1]
 578:	eor	x2, x2, x3
 57c:	lsr	x0, x0, #1
 580:	add	x1, x1, #0x8
 584:	cbnz	x0, 570 <crc32_combine_+0xb0>
 588:	add	x0, sp, #0x100
 58c:	add	x5, x5, #0x1
 590:	add	x4, x0, x4
 594:	cmp	x5, #0x21
 598:	stur	x2, [x4, #-8]
 59c:	b.ne	558 <crc32_combine_+0x98>  // b.any
 5a0:	mov	x5, #0x1                   	// #1
 5a4:	nop
 5a8:	lsl	x4, x5, #3
 5ac:	add	x0, sp, #0x100
 5b0:	add	x0, x0, x4
 5b4:	ldur	x0, [x0, #-8]
 5b8:	cbz	x0, 668 <crc32_combine_+0x1a8>
 5bc:	add	x1, sp, #0x100
 5c0:	mov	x2, #0x0                   	// #0
 5c4:	nop
 5c8:	tbz	w0, #0, 5d4 <crc32_combine_+0x114>
 5cc:	ldr	x3, [x1]
 5d0:	eor	x2, x2, x3
 5d4:	lsr	x0, x0, #1
 5d8:	add	x1, x1, #0x8
 5dc:	cbnz	x0, 5c8 <crc32_combine_+0x108>
 5e0:	add	x4, sp, x4
 5e4:	add	x5, x5, #0x1
 5e8:	cmp	x5, #0x21
 5ec:	stur	x2, [x4, #-8]
 5f0:	b.ne	5a8 <crc32_combine_+0xe8>  // b.any
 5f4:	tbnz	w7, #0, 6e0 <crc32_combine_+0x220>
 5f8:	cmp	xzr, x7, asr #1
 5fc:	asr	x9, x7, #1
 600:	b.eq	65c <crc32_combine_+0x19c>  // b.none
 604:	mov	x5, #0x1                   	// #1
 608:	lsl	x4, x5, #3
 60c:	add	x0, sp, x4
 610:	ldur	x0, [x0, #-8]
 614:	cbz	x0, 684 <crc32_combine_+0x1c4>
 618:	mov	x1, sp
 61c:	mov	x2, #0x0                   	// #0
 620:	tbz	w0, #0, 62c <crc32_combine_+0x16c>
 624:	ldr	x3, [x1]
 628:	eor	x2, x2, x3
 62c:	lsr	x0, x0, #1
 630:	add	x1, x1, #0x8
 634:	cbnz	x0, 620 <crc32_combine_+0x160>
 638:	add	x0, sp, #0x100
 63c:	add	x5, x5, #0x1
 640:	add	x4, x0, x4
 644:	cmp	x5, #0x21
 648:	stur	x2, [x4, #-8]
 64c:	b.ne	608 <crc32_combine_+0x148>  // b.any
 650:	tbnz	w9, #0, 70c <crc32_combine_+0x24c>
 654:	asr	x7, x7, #2
 658:	cbnz	x7, 5a0 <crc32_combine_+0xe0>
 65c:	eor	x0, x6, x8
 660:	add	sp, sp, #0x200
 664:	ret
 668:	add	x4, sp, x4
 66c:	mov	x2, #0x0                   	// #0
 670:	add	x5, x5, #0x1
 674:	cmp	x5, #0x21
 678:	stur	x2, [x4, #-8]
 67c:	b.ne	5a8 <crc32_combine_+0xe8>  // b.any
 680:	b	5f4 <crc32_combine_+0x134>
 684:	add	x0, sp, #0x100
 688:	mov	x2, #0x0                   	// #0
 68c:	add	x4, x0, x4
 690:	add	x5, x5, #0x1
 694:	cmp	x5, #0x21
 698:	stur	x2, [x4, #-8]
 69c:	b.ne	608 <crc32_combine_+0x148>  // b.any
 6a0:	b	650 <crc32_combine_+0x190>
 6a4:	add	x0, sp, #0x100
 6a8:	mov	x2, #0x0                   	// #0
 6ac:	add	x4, x0, x4
 6b0:	add	x5, x5, #0x1
 6b4:	cmp	x5, #0x21
 6b8:	stur	x2, [x4, #-8]
 6bc:	b.ne	558 <crc32_combine_+0x98>  // b.any
 6c0:	b	5a0 <crc32_combine_+0xe0>
 6c4:	add	x4, sp, x4
 6c8:	mov	x2, #0x0                   	// #0
 6cc:	add	x5, x5, #0x1
 6d0:	cmp	x5, #0x21
 6d4:	stur	x2, [x4, #-8]
 6d8:	b.ne	508 <crc32_combine_+0x48>  // b.any
 6dc:	b	554 <crc32_combine_+0x94>
 6e0:	cbz	x6, 5f8 <crc32_combine_+0x138>
 6e4:	mov	x1, sp
 6e8:	mov	x0, x6
 6ec:	mov	x6, #0x0                   	// #0
 6f0:	tbz	w0, #0, 6fc <crc32_combine_+0x23c>
 6f4:	ldr	x2, [x1]
 6f8:	eor	x6, x6, x2
 6fc:	lsr	x0, x0, #1
 700:	add	x1, x1, #0x8
 704:	cbnz	x0, 6f0 <crc32_combine_+0x230>
 708:	b	5f8 <crc32_combine_+0x138>
 70c:	cbz	x6, 654 <crc32_combine_+0x194>
 710:	mov	x1, x0
 714:	mov	x0, x6
 718:	mov	x6, #0x0                   	// #0
 71c:	tbz	w0, #0, 728 <crc32_combine_+0x268>
 720:	ldr	x2, [x1]
 724:	eor	x6, x6, x2
 728:	lsr	x0, x0, #1
 72c:	add	x1, x1, #0x8
 730:	cbnz	x0, 71c <crc32_combine_+0x25c>
 734:	b	654 <crc32_combine_+0x194>
 738:	ret
 73c:	nop

0000000000000740 <get_crc_table>:
 740:	adrp	x0, 0 <crc32_little>
 744:	add	x0, x0, #0x0
 748:	ret
 74c:	nop

0000000000000750 <crc32_z>:
 750:	cbz	x1, 758 <crc32_z+0x8>
 754:	b	0 <crc32_little>
 758:	mov	x0, #0x0                   	// #0
 75c:	ret

0000000000000760 <crc32>:
 760:	cbz	x1, 76c <crc32+0xc>
 764:	mov	w2, w2
 768:	b	0 <crc32_little>
 76c:	mov	x0, #0x0                   	// #0
 770:	ret
 774:	nop

0000000000000778 <crc32_combine>:
 778:	b	4c0 <crc32_combine_>
 77c:	nop

0000000000000780 <crc32_combine64>:
 780:	b	4c0 <crc32_combine_>

deflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <longest_match>:
       0:	ldp	w16, w7, [x0, #180]
       4:	mov	w18, #0x102                 	// #258
       8:	ldr	w2, [x0, #172]
       c:	ldr	x8, [x0, #96]
      10:	mov	w14, w2
      14:	ldr	w3, [x0, #80]
      18:	add	w9, w2, #0x106
      1c:	ldp	w5, w17, [x0, #204]
      20:	add	x13, x8, x14
      24:	ldr	w6, [x0, #188]
      28:	sub	w10, w3, #0x106
      2c:	cmp	w2, w10
      30:	sub	w9, w9, w3
      34:	add	x4, x13, w7, sxtw
      38:	csel	w9, w9, wzr, hi  // hi = pmore
      3c:	lsr	w2, w6, #2
      40:	cmp	w7, w5
      44:	csel	w6, w2, w6, cs  // cs = hs, nlast
      48:	add	x14, x14, #0x102
      4c:	cmp	w16, w17
      50:	ldr	w12, [x0, #88]
      54:	ldurb	w15, [x4, #-1]
      58:	csel	w17, w17, w16, cs  // cs = hs, nlast
      5c:	ldrb	w10, [x13, w7, sxtw]
      60:	add	x14, x8, x14
      64:	ldr	x11, [x0, #112]
      68:	b	84 <longest_match+0x84>
      6c:	and	w1, w1, w12
      70:	ldrh	w1, [x11, x1, lsl #1]
      74:	cmp	w9, w1
      78:	b.cs	198 <longest_match+0x198>  // b.hs, b.nlast
      7c:	subs	w6, w6, #0x1
      80:	b.eq	198 <longest_match+0x198>  // b.none
      84:	mov	w4, w1
      88:	sxtw	x3, w7
      8c:	add	x2, x8, x4
      90:	ldrb	w5, [x2, w7, sxtw]
      94:	cmp	w5, w10
      98:	b.ne	6c <longest_match+0x6c>  // b.any
      9c:	add	x3, x2, x3
      a0:	ldurb	w3, [x3, #-1]
      a4:	cmp	w3, w15
      a8:	b.ne	6c <longest_match+0x6c>  // b.any
      ac:	ldrb	w4, [x8, x4]
      b0:	ldrb	w3, [x13]
      b4:	cmp	w4, w3
      b8:	b.ne	6c <longest_match+0x6c>  // b.any
      bc:	ldrb	w4, [x2, #1]
      c0:	ldrb	w3, [x13, #1]
      c4:	cmp	w4, w3
      c8:	b.ne	6c <longest_match+0x6c>  // b.any
      cc:	add	x2, x2, #0x2
      d0:	add	x3, x13, #0x2
      d4:	nop
      d8:	ldrb	w5, [x3, #1]
      dc:	ldrb	w4, [x2, #1]
      e0:	cmp	w5, w4
      e4:	b.ne	1a4 <longest_match+0x1a4>  // b.any
      e8:	ldrb	w5, [x3, #2]
      ec:	ldrb	w4, [x2, #2]
      f0:	cmp	w5, w4
      f4:	b.ne	1ac <longest_match+0x1ac>  // b.any
      f8:	ldrb	w5, [x3, #3]
      fc:	ldrb	w4, [x2, #3]
     100:	cmp	w5, w4
     104:	b.ne	1b4 <longest_match+0x1b4>  // b.any
     108:	ldrb	w5, [x3, #4]
     10c:	ldrb	w4, [x2, #4]
     110:	cmp	w5, w4
     114:	b.ne	1bc <longest_match+0x1bc>  // b.any
     118:	ldrb	w5, [x3, #5]
     11c:	ldrb	w4, [x2, #5]
     120:	cmp	w5, w4
     124:	b.ne	1cc <longest_match+0x1cc>  // b.any
     128:	ldrb	w5, [x3, #6]
     12c:	ldrb	w4, [x2, #6]
     130:	cmp	w5, w4
     134:	b.ne	1c4 <longest_match+0x1c4>  // b.any
     138:	ldrb	w5, [x3, #7]
     13c:	ldrb	w4, [x2, #7]
     140:	cmp	w5, w4
     144:	b.ne	1d4 <longest_match+0x1d4>  // b.any
     148:	ldrb	w5, [x3, #8]!
     14c:	ldrb	w4, [x2, #8]!
     150:	cmp	w5, w4
     154:	ccmp	x14, x3, #0x0, eq  // eq = none
     158:	b.hi	d8 <longest_match+0xd8>  // b.pmore
     15c:	sub	x3, x14, x3
     160:	sub	w3, w18, w3
     164:	cmp	w7, w3
     168:	b.ge	6c <longest_match+0x6c>  // b.tcont
     16c:	str	w1, [x0, #176]
     170:	cmp	w3, w17
     174:	b.ge	1dc <longest_match+0x1dc>  // b.tcont
     178:	and	w1, w1, w12
     17c:	add	x2, x13, w3, sxtw
     180:	ldrb	w10, [x13, w3, sxtw]
     184:	mov	w7, w3
     188:	ldrh	w1, [x11, x1, lsl #1]
     18c:	ldurb	w15, [x2, #-1]
     190:	cmp	w9, w1
     194:	b.cc	7c <longest_match+0x7c>  // b.lo, b.ul, b.last
     198:	cmp	w7, w16
     19c:	csel	w0, w7, w16, ls  // ls = plast
     1a0:	ret
     1a4:	add	x3, x3, #0x1
     1a8:	b	15c <longest_match+0x15c>
     1ac:	add	x3, x3, #0x2
     1b0:	b	15c <longest_match+0x15c>
     1b4:	add	x3, x3, #0x3
     1b8:	b	15c <longest_match+0x15c>
     1bc:	add	x3, x3, #0x4
     1c0:	b	15c <longest_match+0x15c>
     1c4:	add	x3, x3, #0x6
     1c8:	b	15c <longest_match+0x15c>
     1cc:	add	x3, x3, #0x5
     1d0:	b	15c <longest_match+0x15c>
     1d4:	add	x3, x3, #0x7
     1d8:	b	15c <longest_match+0x15c>
     1dc:	mov	w7, w3
     1e0:	b	198 <longest_match+0x198>
     1e4:	nop

00000000000001e8 <fill_window>:
     1e8:	stp	x29, x30, [sp, #-80]!
     1ec:	mov	x29, sp
     1f0:	stp	x23, x24, [sp, #48]
     1f4:	ldr	w23, [x0, #80]
     1f8:	ldr	w3, [x0, #180]
     1fc:	stp	x19, x20, [sp, #16]
     200:	mov	x19, x0
     204:	sub	w20, w23, #0x106
     208:	mov	w0, w23
     20c:	stp	x21, x22, [sp, #32]
     210:	mov	w21, w23
     214:	str	x25, [sp, #64]
     218:	str	d8, [sp, #72]
     21c:	dup	v8.2s, w23
     220:	b	2d4 <fill_window+0xec>
     224:	ldr	x24, [x19]
     228:	ldr	w4, [x24, #8]
     22c:	cbz	w4, 610 <fill_window+0x428>
     230:	cmp	w22, w4
     234:	ldr	w3, [x19, #180]
     238:	csel	w22, w22, w4, ls  // ls = plast
     23c:	cbz	w22, 2a8 <fill_window+0xc0>
     240:	ldr	x0, [x19, #96]
     244:	mov	w3, w3
     248:	add	x3, x3, w5, uxtw
     24c:	sub	w4, w4, w22
     250:	ldr	x1, [x24]
     254:	add	x3, x0, x3
     258:	str	w4, [x24, #8]
     25c:	mov	w25, w22
     260:	mov	x0, x3
     264:	mov	x2, x25
     268:	bl	0 <memcpy>
     26c:	mov	x3, x0
     270:	ldr	x0, [x24, #56]
     274:	ldr	w0, [x0, #48]
     278:	cmp	w0, #0x1
     27c:	b.eq	6ec <fill_window+0x504>  // b.none
     280:	cmp	w0, #0x2
     284:	b.eq	704 <fill_window+0x51c>  // b.none
     288:	ldr	w3, [x19, #180]
     28c:	ldr	x1, [x24]
     290:	add	w3, w22, w3
     294:	ldr	x0, [x24, #16]
     298:	add	x1, x1, x25
     29c:	str	x1, [x24]
     2a0:	add	x0, x0, x25
     2a4:	str	x0, [x24, #16]
     2a8:	ldr	w0, [x19, #5932]
     2ac:	str	w3, [x19, #180]
     2b0:	add	w1, w0, w3
     2b4:	cmp	w1, #0x2
     2b8:	b.hi	65c <fill_window+0x474>  // b.pmore
     2bc:	cmp	w3, #0x105
     2c0:	b.hi	610 <fill_window+0x428>  // b.pmore
     2c4:	ldr	x0, [x19]
     2c8:	ldr	w0, [x0, #8]
     2cc:	cbz	w0, 610 <fill_window+0x428>
     2d0:	ldr	w0, [x19, #80]
     2d4:	ldr	x1, [x19, #104]
     2d8:	add	w0, w20, w0
     2dc:	ldr	w5, [x19, #172]
     2e0:	sub	w22, w1, w5
     2e4:	cmp	w5, w0
     2e8:	add	w2, w5, w23
     2ec:	sub	w22, w22, w3
     2f0:	b.cc	224 <fill_window+0x3c>  // b.lo, b.ul, b.last
     2f4:	ldr	x0, [x19, #96]
     2f8:	sub	w3, w3, w1
     2fc:	add	w2, w3, w2
     300:	add	x1, x0, x21
     304:	bl	0 <memcpy>
     308:	ldr	x0, [x19, #152]
     30c:	ldur	d0, [x19, #172]
     310:	ldr	w6, [x19, #132]
     314:	sub	x0, x0, x21
     318:	ldr	w3, [x19, #172]
     31c:	sub	v0.2s, v0.2s, v8.2s
     320:	str	x0, [x19, #152]
     324:	ldr	w0, [x19, #80]
     328:	sub	w5, w6, #0x1
     32c:	cmp	w5, #0x6
     330:	sub	w5, w3, w23
     334:	and	w3, w0, #0xffff
     338:	fmov	s6, w3
     33c:	ldr	x1, [x19, #120]
     340:	adrp	x3, 0 <longest_match>
     344:	ubfiz	x2, x6, #1, #32
     348:	stur	d0, [x19, #172]
     34c:	ldr	q1, [x3]
     350:	add	x4, x1, x2
     354:	b.ls	724 <fill_window+0x53c>  // b.plast
     358:	sub	w3, w6, #0x8
     35c:	dup	v4.4s, w0
     360:	dup	v7.8h, v6.h[0]
     364:	sub	x2, x2, #0x10
     368:	lsr	w3, w3, #3
     36c:	add	x1, x1, x2
     370:	add	w3, w3, #0x1
     374:	mov	w2, #0x0                   	// #0
     378:	ldr	q0, [x1]
     37c:	add	w2, w2, #0x1
     380:	cmp	w2, w3
     384:	tbl	v0.16b, {v0.16b}, v1.16b
     388:	uxtl	v3.4s, v0.4h
     38c:	uxtl2	v2.4s, v0.8h
     390:	sub	v0.8h, v0.8h, v7.8h
     394:	cmhs	v3.4s, v3.4s, v4.4s
     398:	cmhs	v2.4s, v2.4s, v4.4s
     39c:	xtn	v5.4h, v3.4s
     3a0:	xtn2	v5.8h, v2.4s
     3a4:	and	v0.16b, v0.16b, v5.16b
     3a8:	tbl	v0.16b, {v0.16b}, v1.16b
     3ac:	str	q0, [x1], #-16
     3b0:	b.cc	378 <fill_window+0x190>  // b.lo, b.ul, b.last
     3b4:	lsl	w1, w3, #3
     3b8:	subs	w3, w6, w1
     3bc:	sub	x4, x4, x1, lsl #1
     3c0:	b.eq	49c <fill_window+0x2b4>  // b.none
     3c4:	ldurh	w2, [x4, #-2]
     3c8:	sub	w1, w2, w0
     3cc:	cmp	w0, w2
     3d0:	and	w1, w1, #0xffff
     3d4:	csel	w1, w1, wzr, ls  // ls = plast
     3d8:	sturh	w1, [x4, #-2]
     3dc:	cmp	w3, #0x1
     3e0:	b.eq	49c <fill_window+0x2b4>  // b.none
     3e4:	ldurh	w2, [x4, #-4]
     3e8:	sub	w1, w2, w0
     3ec:	cmp	w0, w2
     3f0:	and	w1, w1, #0xffff
     3f4:	csel	w1, w1, wzr, ls  // ls = plast
     3f8:	sturh	w1, [x4, #-4]
     3fc:	cmp	w3, #0x2
     400:	b.eq	49c <fill_window+0x2b4>  // b.none
     404:	ldurh	w2, [x4, #-6]
     408:	sub	w1, w2, w0
     40c:	cmp	w0, w2
     410:	and	w1, w1, #0xffff
     414:	csel	w1, w1, wzr, ls  // ls = plast
     418:	sturh	w1, [x4, #-6]
     41c:	cmp	w3, #0x3
     420:	b.eq	49c <fill_window+0x2b4>  // b.none
     424:	ldurh	w2, [x4, #-8]
     428:	sub	w1, w2, w0
     42c:	cmp	w0, w2
     430:	and	w1, w1, #0xffff
     434:	csel	w1, w1, wzr, ls  // ls = plast
     438:	sturh	w1, [x4, #-8]
     43c:	cmp	w3, #0x4
     440:	b.eq	49c <fill_window+0x2b4>  // b.none
     444:	ldurh	w2, [x4, #-10]
     448:	sub	w1, w2, w0
     44c:	cmp	w0, w2
     450:	and	w1, w1, #0xffff
     454:	csel	w1, w1, wzr, ls  // ls = plast
     458:	sturh	w1, [x4, #-10]
     45c:	cmp	w3, #0x5
     460:	b.eq	49c <fill_window+0x2b4>  // b.none
     464:	ldurh	w2, [x4, #-12]
     468:	sub	w1, w2, w0
     46c:	cmp	w0, w2
     470:	and	w1, w1, #0xffff
     474:	csel	w1, w1, wzr, ls  // ls = plast
     478:	sturh	w1, [x4, #-12]
     47c:	cmp	w3, #0x6
     480:	b.eq	49c <fill_window+0x2b4>  // b.none
     484:	ldurh	w2, [x4, #-14]
     488:	sub	w1, w2, w0
     48c:	cmp	w0, w2
     490:	and	w1, w1, #0xffff
     494:	csel	w1, w1, wzr, ls  // ls = plast
     498:	sturh	w1, [x4, #-14]
     49c:	ldr	x1, [x19, #112]
     4a0:	ubfiz	x2, x0, #1, #32
     4a4:	sub	w4, w0, #0x1
     4a8:	cmp	w4, #0x6
     4ac:	add	x3, x1, x2
     4b0:	b.ls	71c <fill_window+0x534>  // b.plast
     4b4:	sub	w4, w0, #0x8
     4b8:	dup	v4.4s, w0
     4bc:	dup	v6.8h, v6.h[0]
     4c0:	sub	x2, x2, #0x10
     4c4:	lsr	w4, w4, #3
     4c8:	add	x1, x1, x2
     4cc:	add	w4, w4, #0x1
     4d0:	mov	w2, #0x0                   	// #0
     4d4:	nop
     4d8:	ldr	q0, [x1]
     4dc:	add	w2, w2, #0x1
     4e0:	cmp	w4, w2
     4e4:	tbl	v0.16b, {v0.16b}, v1.16b
     4e8:	uxtl	v3.4s, v0.4h
     4ec:	uxtl2	v2.4s, v0.8h
     4f0:	sub	v0.8h, v0.8h, v6.8h
     4f4:	cmhs	v3.4s, v3.4s, v4.4s
     4f8:	cmhs	v2.4s, v2.4s, v4.4s
     4fc:	xtn	v5.4h, v3.4s
     500:	xtn2	v5.8h, v2.4s
     504:	and	v0.16b, v0.16b, v5.16b
     508:	tbl	v0.16b, {v0.16b}, v1.16b
     50c:	str	q0, [x1], #-16
     510:	b.hi	4d8 <fill_window+0x2f0>  // b.pmore
     514:	lsl	w1, w4, #3
     518:	subs	w4, w0, w1
     51c:	sub	x3, x3, x1, lsl #1
     520:	b.eq	5fc <fill_window+0x414>  // b.none
     524:	ldurh	w2, [x3, #-2]
     528:	sub	w1, w2, w0
     52c:	cmp	w0, w2
     530:	and	w1, w1, #0xffff
     534:	csel	w1, w1, wzr, ls  // ls = plast
     538:	sturh	w1, [x3, #-2]
     53c:	cmp	w4, #0x1
     540:	b.eq	5fc <fill_window+0x414>  // b.none
     544:	ldurh	w2, [x3, #-4]
     548:	sub	w1, w2, w0
     54c:	cmp	w0, w2
     550:	and	w1, w1, #0xffff
     554:	csel	w1, w1, wzr, ls  // ls = plast
     558:	sturh	w1, [x3, #-4]
     55c:	cmp	w4, #0x2
     560:	b.eq	5fc <fill_window+0x414>  // b.none
     564:	ldurh	w2, [x3, #-6]
     568:	sub	w1, w2, w0
     56c:	cmp	w0, w2
     570:	and	w1, w1, #0xffff
     574:	csel	w1, w1, wzr, ls  // ls = plast
     578:	sturh	w1, [x3, #-6]
     57c:	cmp	w4, #0x3
     580:	b.eq	5fc <fill_window+0x414>  // b.none
     584:	ldurh	w2, [x3, #-8]
     588:	sub	w1, w2, w0
     58c:	cmp	w0, w2
     590:	and	w1, w1, #0xffff
     594:	csel	w1, w1, wzr, ls  // ls = plast
     598:	sturh	w1, [x3, #-8]
     59c:	cmp	w4, #0x4
     5a0:	b.eq	5fc <fill_window+0x414>  // b.none
     5a4:	ldurh	w2, [x3, #-10]
     5a8:	sub	w1, w2, w0
     5ac:	cmp	w0, w2
     5b0:	and	w1, w1, #0xffff
     5b4:	csel	w1, w1, wzr, ls  // ls = plast
     5b8:	sturh	w1, [x3, #-10]
     5bc:	cmp	w4, #0x5
     5c0:	b.eq	5fc <fill_window+0x414>  // b.none
     5c4:	ldurh	w2, [x3, #-12]
     5c8:	sub	w1, w2, w0
     5cc:	cmp	w0, w2
     5d0:	and	w1, w1, #0xffff
     5d4:	csel	w1, w1, wzr, ls  // ls = plast
     5d8:	sturh	w1, [x3, #-12]
     5dc:	cmp	w4, #0x6
     5e0:	b.eq	5fc <fill_window+0x414>  // b.none
     5e4:	ldurh	w2, [x3, #-14]
     5e8:	sub	w1, w2, w0
     5ec:	cmp	w0, w2
     5f0:	and	w0, w1, #0xffff
     5f4:	csel	w0, w0, wzr, ls  // ls = plast
     5f8:	sturh	w0, [x3, #-14]
     5fc:	ldr	x24, [x19]
     600:	add	w22, w22, w23
     604:	ldr	w4, [x24, #8]
     608:	cbnz	w4, 230 <fill_window+0x48>
     60c:	nop
     610:	ldr	x1, [x19, #104]
     614:	ldr	x0, [x19, #5944]
     618:	cmp	x0, x1
     61c:	b.cs	640 <fill_window+0x458>  // b.hs, b.nlast
     620:	ldr	w20, [x19, #172]
     624:	ldr	w21, [x19, #180]
     628:	add	x21, x20, x21
     62c:	cmp	x0, x21
     630:	b.cc	72c <fill_window+0x544>  // b.lo, b.ul, b.last
     634:	add	x2, x21, #0x102
     638:	cmp	x0, x2
     63c:	b.cc	774 <fill_window+0x58c>  // b.lo, b.ul, b.last
     640:	ldp	x19, x20, [sp, #16]
     644:	ldp	x21, x22, [sp, #32]
     648:	ldp	x23, x24, [sp, #48]
     64c:	ldr	x25, [sp, #64]
     650:	ldr	d8, [sp, #72]
     654:	ldp	x29, x30, [sp], #80
     658:	ret
     65c:	ldr	w5, [x19, #172]
     660:	ldr	x9, [x19, #96]
     664:	sub	w0, w5, w0
     668:	add	w1, w0, #0x1
     66c:	ldp	w11, w10, [x19, #140]
     670:	ldrb	w2, [x9, w0, uxtw]
     674:	str	w2, [x19, #128]
     678:	ldrb	w1, [x9, w1, uxtw]
     67c:	lsl	w2, w2, w10
     680:	eor	w1, w1, w2
     684:	and	w1, w1, w11
     688:	str	w1, [x19, #128]
     68c:	b	6d8 <fill_window+0x4f0>
     690:	ldrb	w4, [x9, w4, uxtw]
     694:	ldp	x7, x6, [x19, #112]
     698:	eor	w1, w4, w1
     69c:	and	w1, w1, w11
     6a0:	ldr	w2, [x19, #88]
     6a4:	ubfiz	x4, x1, #1, #32
     6a8:	and	w2, w0, w2
     6ac:	ldrh	w8, [x6, x4]
     6b0:	str	w1, [x19, #128]
     6b4:	strh	w8, [x7, x2, lsl #1]
     6b8:	strh	w0, [x6, x4]
     6bc:	add	w0, w0, #0x1
     6c0:	sub	w2, w3, w0
     6c4:	sub	w4, w5, w0
     6c8:	str	w4, [x19, #5932]
     6cc:	add	w2, w2, w5
     6d0:	cmp	w2, #0x2
     6d4:	b.ls	2bc <fill_window+0xd4>  // b.plast
     6d8:	add	w4, w0, #0x2
     6dc:	cmp	w0, w5
     6e0:	lsl	w1, w1, w10
     6e4:	b.ne	690 <fill_window+0x4a8>  // b.any
     6e8:	b	2bc <fill_window+0xd4>
     6ec:	ldr	x0, [x24, #96]
     6f0:	mov	x1, x3
     6f4:	mov	w2, w22
     6f8:	bl	0 <adler32>
     6fc:	str	x0, [x24, #96]
     700:	b	288 <fill_window+0xa0>
     704:	ldr	x0, [x24, #96]
     708:	mov	x1, x3
     70c:	mov	w2, w22
     710:	bl	0 <crc32>
     714:	str	x0, [x24, #96]
     718:	b	288 <fill_window+0xa0>
     71c:	mov	w4, w0
     720:	b	524 <fill_window+0x33c>
     724:	mov	w3, w6
     728:	b	3c4 <fill_window+0x1dc>
     72c:	sub	x20, x1, x21
     730:	mov	x2, #0x102                 	// #258
     734:	cmp	x20, x2
     738:	mov	w1, #0x0                   	// #0
     73c:	ldr	x0, [x19, #96]
     740:	csel	x20, x20, x2, ls  // ls = plast
     744:	mov	x2, x20
     748:	add	x20, x20, x21
     74c:	add	x0, x0, x21
     750:	bl	0 <memset>
     754:	str	x20, [x19, #5944]
     758:	ldp	x19, x20, [sp, #16]
     75c:	ldp	x21, x22, [sp, #32]
     760:	ldp	x23, x24, [sp, #48]
     764:	ldr	x25, [sp, #64]
     768:	ldr	d8, [sp, #72]
     76c:	ldp	x29, x30, [sp], #80
     770:	ret
     774:	sub	x2, x21, x0
     778:	sub	x20, x1, x0
     77c:	add	x2, x2, #0x102
     780:	mov	w1, #0x0                   	// #0
     784:	ldr	x3, [x19, #96]
     788:	cmp	x20, x2
     78c:	csel	x20, x20, x2, ls  // ls = plast
     790:	mov	w2, w20
     794:	add	x0, x3, x0
     798:	bl	0 <memset>
     79c:	ldr	x0, [x19, #5944]
     7a0:	ldp	x21, x22, [sp, #32]
     7a4:	add	x20, x0, x20
     7a8:	str	x20, [x19, #5944]
     7ac:	ldp	x19, x20, [sp, #16]
     7b0:	ldp	x23, x24, [sp, #48]
     7b4:	ldr	x25, [sp, #64]
     7b8:	ldr	d8, [sp, #72]
     7bc:	ldp	x29, x30, [sp], #80
     7c0:	ret
     7c4:	nop

00000000000007c8 <deflate_stored>:
     7c8:	stp	x29, x30, [sp, #-112]!
     7cc:	mov	x29, sp
     7d0:	stp	x19, x20, [sp, #16]
     7d4:	mov	x19, x0
     7d8:	ldr	w0, [x0, #80]
     7dc:	stp	x23, x24, [sp, #48]
     7e0:	mov	w23, w1
     7e4:	ldr	x24, [x19, #24]
     7e8:	stp	x21, x22, [sp, #32]
     7ec:	ldr	x21, [x19]
     7f0:	sub	x24, x24, #0x5
     7f4:	cmp	x24, x0
     7f8:	stp	x25, x26, [sp, #64]
     7fc:	csel	x24, x24, x0, ls  // ls = plast
     800:	ldr	w2, [x21, #8]
     804:	mov	x26, #0xfffe                	// #65534
     808:	stp	x27, x28, [sp, #80]
     80c:	str	w2, [sp, #108]
     810:	ldr	w0, [x19, #5940]
     814:	ldr	w20, [x21, #32]
     818:	add	w0, w0, #0x2a
     81c:	asr	w1, w0, #3
     820:	cmp	w20, w0, asr #3
     824:	b.cc	be8 <deflate_stored+0x420>  // b.lo, b.ul, b.last
     828:	ldr	x4, [x19, #152]
     82c:	sub	w20, w20, w1
     830:	ldr	w22, [x19, #172]
     834:	sub	w0, w22, w4
     838:	sub	w22, w22, w4
     83c:	add	x0, x0, w2, uxtw
     840:	add	w1, w22, w2
     844:	cmp	x0, x26
     848:	mov	w0, #0xffff                	// #65535
     84c:	csel	w0, w1, w0, ls  // ls = plast
     850:	cmp	w0, w20
     854:	csel	w20, w0, w20, ls  // ls = plast
     858:	cmp	w20, w24
     85c:	b.cs	878 <deflate_stored+0xb0>  // b.hs, b.nlast
     860:	cmp	w20, #0x0
     864:	ccmp	w23, #0x4, #0x4, eq  // eq = none
     868:	ccmp	w23, #0x0, #0x4, eq  // eq = none
     86c:	b.eq	be8 <deflate_stored+0x420>  // b.none
     870:	cmp	w20, w1
     874:	b.ne	be8 <deflate_stored+0x420>  // b.any
     878:	cmp	w23, #0x4
     87c:	mov	w27, #0x0                   	// #0
     880:	b.ne	890 <deflate_stored+0xc8>  // b.any
     884:	add	w2, w22, w2
     888:	cmp	w2, w20
     88c:	cset	w27, eq  // eq = none
     890:	mov	w3, w27
     894:	mov	x0, x19
     898:	mov	x2, #0x0                   	// #0
     89c:	mov	x1, #0x0                   	// #0
     8a0:	bl	0 <_tr_stored_block>
     8a4:	ldr	x4, [x19, #16]
     8a8:	and	w1, w20, #0xff
     8ac:	ldr	x6, [x19, #40]
     8b0:	mvn	w5, w1
     8b4:	lsr	w2, w20, #8
     8b8:	mvn	w0, w20
     8bc:	add	x4, x4, x6
     8c0:	lsr	w0, w0, #8
     8c4:	sturb	w1, [x4, #-4]
     8c8:	ldr	x1, [x19, #16]
     8cc:	ldr	x4, [x19, #40]
     8d0:	add	x1, x1, x4
     8d4:	sturb	w2, [x1, #-3]
     8d8:	ldr	x1, [x19, #16]
     8dc:	ldr	x2, [x19, #40]
     8e0:	add	x1, x1, x2
     8e4:	sturb	w5, [x1, #-2]
     8e8:	ldr	x1, [x19, #16]
     8ec:	ldr	x2, [x19, #40]
     8f0:	add	x1, x1, x2
     8f4:	sturb	w0, [x1, #-1]
     8f8:	ldr	x21, [x19]
     8fc:	ldr	x25, [x21, #56]
     900:	mov	x0, x25
     904:	bl	0 <_tr_flush_bits>
     908:	ldr	x28, [x25, #40]
     90c:	ldr	w0, [x21, #32]
     910:	cmp	w0, w28
     914:	csel	w28, w0, w28, ls  // ls = plast
     918:	cbz	w28, 97c <deflate_stored+0x1b4>
     91c:	ldr	x0, [x21, #24]
     920:	mov	w2, w28
     924:	ldr	x1, [x25, #32]
     928:	str	x2, [sp, #96]
     92c:	bl	0 <memcpy>
     930:	ldr	x1, [x21, #24]
     934:	ldr	x2, [sp, #96]
     938:	ldr	x6, [x25, #32]
     93c:	add	x1, x1, x2
     940:	ldr	x5, [x21, #40]
     944:	str	x1, [x21, #24]
     948:	ldr	w0, [x21, #32]
     94c:	add	x6, x6, x2
     950:	ldr	x1, [x25, #40]
     954:	str	x6, [x25, #32]
     958:	add	x5, x5, x2
     95c:	sub	w0, w0, w28
     960:	str	w0, [x21, #32]
     964:	sub	x2, x1, x2
     968:	str	x5, [x21, #40]
     96c:	str	x2, [x25, #40]
     970:	cbnz	x2, 97c <deflate_stored+0x1b4>
     974:	ldr	x0, [x25, #16]
     978:	str	x0, [x25, #32]
     97c:	ldr	x21, [x19]
     980:	cbnz	w22, b84 <deflate_stored+0x3bc>
     984:	ldr	w2, [x21, #8]
     988:	cbnz	w20, aec <deflate_stored+0x324>
     98c:	cbz	w27, 810 <deflate_stored+0x48>
     990:	ldr	w0, [sp, #108]
     994:	mov	w24, #0x1                   	// #1
     998:	subs	w27, w0, w2
     99c:	b.eq	bf8 <deflate_stored+0x430>  // b.none
     9a0:	ldr	w1, [x19, #80]
     9a4:	ldr	x0, [x19, #96]
     9a8:	cmp	w1, w27
     9ac:	b.ls	e0c <deflate_stored+0x644>  // b.plast
     9b0:	ldr	w3, [x19, #172]
     9b4:	mov	w20, w27
     9b8:	ldr	x2, [x19, #104]
     9bc:	mov	w4, w3
     9c0:	sub	x2, x2, x4
     9c4:	cmp	x2, w27, uxtw
     9c8:	b.ls	e80 <deflate_stored+0x6b8>  // b.plast
     9cc:	ldr	x1, [x21]
     9d0:	mov	x2, x20
     9d4:	add	x0, x0, x4
     9d8:	sub	x1, x1, x20
     9dc:	bl	0 <memcpy>
     9e0:	ldr	w2, [x19, #172]
     9e4:	ldr	w0, [x19, #80]
     9e8:	add	w2, w27, w2
     9ec:	str	w2, [x19, #172]
     9f0:	ldr	w3, [x19, #5932]
     9f4:	mov	w1, w2
     9f8:	str	x1, [x19, #152]
     9fc:	sub	w0, w0, w3
     a00:	cmp	w0, w27
     a04:	csel	w0, w0, w27, ls  // ls = plast
     a08:	add	w0, w0, w3
     a0c:	str	w0, [x19, #5932]
     a10:	ldr	x0, [x19, #5944]
     a14:	mov	x3, x1
     a18:	cmp	x0, x1
     a1c:	b.cc	c10 <deflate_stored+0x448>  // b.lo, b.ul, b.last
     a20:	cbnz	w24, c18 <deflate_stored+0x450>
     a24:	ldr	x21, [x19]
     a28:	tst	w23, #0xfffffffb
     a2c:	ldr	w0, [x21, #8]
     a30:	b.eq	a38 <deflate_stored+0x270>  // b.none
     a34:	cbz	w0, d0c <deflate_stored+0x544>
     a38:	ldr	x20, [x19, #104]
     a3c:	sub	w20, w20, #0x1
     a40:	sub	w20, w20, w2
     a44:	cmp	w20, w0
     a48:	b.cs	a60 <deflate_stored+0x298>  // b.hs, b.nlast
     a4c:	ldr	x4, [x19, #152]
     a50:	ldr	w5, [x19, #80]
     a54:	mov	w1, w5
     a58:	cmp	x4, w5, uxtw
     a5c:	b.ge	e34 <deflate_stored+0x66c>  // b.tcont
     a60:	cmp	w20, w0
     a64:	csel	w20, w20, w0, ls  // ls = plast
     a68:	cbnz	w20, c3c <deflate_stored+0x474>
     a6c:	ldr	x4, [x19, #152]
     a70:	ldr	x0, [x19, #5944]
     a74:	cmp	x0, x3
     a78:	b.cs	a80 <deflate_stored+0x2b8>  // b.hs, b.nlast
     a7c:	str	x3, [x19, #5944]
     a80:	ldr	w1, [x19, #5940]
     a84:	mov	x5, #0xffff                	// #65535
     a88:	ldr	x0, [x19, #24]
     a8c:	add	w1, w1, #0x2a
     a90:	ldr	w3, [x19, #80]
     a94:	sub	w2, w2, w4
     a98:	asr	w1, w1, #3
     a9c:	sub	x0, x0, x1
     aa0:	cmp	x0, x5
     aa4:	csel	x0, x0, x5, ls  // ls = plast
     aa8:	cmp	w3, w0
     aac:	mov	w1, w0
     ab0:	csel	w3, w3, w0, ls  // ls = plast
     ab4:	cmp	w3, w2
     ab8:	b.ls	c70 <deflate_stored+0x4a8>  // b.plast
     abc:	cmp	w2, #0x0
     ac0:	ccmp	w23, #0x4, #0x4, eq  // eq = none
     ac4:	ccmp	w23, #0x0, #0x4, eq  // eq = none
     ac8:	b.ne	eac <deflate_stored+0x6e4>  // b.any
     acc:	mov	w0, w24
     ad0:	ldp	x19, x20, [sp, #16]
     ad4:	ldp	x21, x22, [sp, #32]
     ad8:	ldp	x23, x24, [sp, #48]
     adc:	ldp	x25, x26, [sp, #64]
     ae0:	ldp	x27, x28, [sp, #80]
     ae4:	ldp	x29, x30, [sp], #112
     ae8:	ret
     aec:	cmp	w20, w2
     af0:	csel	w22, w20, w2, ls  // ls = plast
     af4:	ldr	x4, [x21, #24]
     af8:	cbz	w22, b58 <deflate_stored+0x390>
     afc:	ldr	x1, [x21]
     b00:	sub	w2, w2, w22
     b04:	str	w2, [x21, #8]
     b08:	mov	w28, w22
     b0c:	mov	x0, x4
     b10:	mov	x2, x28
     b14:	bl	0 <memcpy>
     b18:	mov	x4, x0
     b1c:	ldr	x0, [x21, #56]
     b20:	ldr	w0, [x0, #48]
     b24:	cmp	w0, #0x1
     b28:	b.eq	c58 <deflate_stored+0x490>  // b.none
     b2c:	cmp	w0, #0x2
     b30:	b.eq	cf4 <deflate_stored+0x52c>  // b.none
     b34:	ldr	x0, [x21]
     b38:	ldr	x2, [x21, #16]
     b3c:	add	x0, x0, x28
     b40:	str	x0, [x21]
     b44:	add	x2, x2, x28
     b48:	str	x2, [x21, #16]
     b4c:	ldr	x21, [x19]
     b50:	ldr	w2, [x21, #8]
     b54:	ldr	x4, [x21, #24]
     b58:	mov	w5, w20
     b5c:	ldr	x0, [x21, #40]
     b60:	add	x4, x4, x5
     b64:	ldr	w1, [x21, #32]
     b68:	add	x0, x0, x5
     b6c:	str	x4, [x21, #24]
     b70:	sub	w20, w1, w20
     b74:	str	w20, [x21, #32]
     b78:	str	x0, [x21, #40]
     b7c:	cbz	w27, 810 <deflate_stored+0x48>
     b80:	b	990 <deflate_stored+0x1c8>
     b84:	ldr	x0, [x21, #24]
     b88:	cmp	w20, w22
     b8c:	ldr	x4, [x19, #96]
     b90:	csel	w2, w20, w22, ls  // ls = plast
     b94:	ldr	x1, [x19, #152]
     b98:	csel	w28, w20, w22, ls  // ls = plast
     b9c:	str	x2, [sp, #96]
     ba0:	sub	w20, w20, w28
     ba4:	add	x1, x4, x1
     ba8:	bl	0 <memcpy>
     bac:	ldr	x21, [x19]
     bb0:	ldr	x2, [sp, #96]
     bb4:	ldr	x5, [x21, #24]
     bb8:	ldr	x0, [x21, #40]
     bbc:	add	x6, x5, x2
     bc0:	ldr	x4, [x19, #152]
     bc4:	str	x6, [x21, #24]
     bc8:	ldr	w5, [x21, #32]
     bcc:	add	x22, x4, x2
     bd0:	add	x2, x0, x2
     bd4:	sub	w28, w5, w28
     bd8:	str	w28, [x21, #32]
     bdc:	str	x2, [x21, #40]
     be0:	str	x22, [x19, #152]
     be4:	b	984 <deflate_stored+0x1bc>
     be8:	ldr	w0, [sp, #108]
     bec:	mov	w24, #0x0                   	// #0
     bf0:	subs	w27, w0, w2
     bf4:	b.ne	9a0 <deflate_stored+0x1d8>  // b.any
     bf8:	ldr	w2, [x19, #172]
     bfc:	ldr	x0, [x19, #5944]
     c00:	mov	w1, w2
     c04:	mov	x3, x1
     c08:	cmp	x0, x1
     c0c:	b.cs	a20 <deflate_stored+0x258>  // b.hs, b.nlast
     c10:	str	x1, [x19, #5944]
     c14:	cbz	w24, a24 <deflate_stored+0x25c>
     c18:	mov	w24, #0x3                   	// #3
     c1c:	mov	w0, w24
     c20:	ldp	x19, x20, [sp, #16]
     c24:	ldp	x21, x22, [sp, #32]
     c28:	ldp	x23, x24, [sp, #48]
     c2c:	ldp	x25, x26, [sp, #64]
     c30:	ldp	x27, x28, [sp, #80]
     c34:	ldp	x29, x30, [sp], #112
     c38:	ret
     c3c:	cmp	w20, w0
     c40:	csel	w22, w20, w0, ls  // ls = plast
     c44:	cbnz	w22, da0 <deflate_stored+0x5d8>
     c48:	add	w3, w2, w20
     c4c:	str	w3, [x19, #172]
     c50:	mov	x2, x3
     c54:	b	a6c <deflate_stored+0x2a4>
     c58:	ldr	x0, [x21, #96]
     c5c:	mov	w2, w22
     c60:	mov	x1, x4
     c64:	bl	0 <adler32>
     c68:	str	x0, [x21, #96]
     c6c:	b	b34 <deflate_stored+0x36c>
     c70:	cmp	w0, w2
     c74:	csel	w0, w0, w2, ls  // ls = plast
     c78:	cmp	w23, #0x4
     c7c:	b.eq	d84 <deflate_stored+0x5bc>  // b.none
     c80:	mov	w24, #0x0                   	// #0
     c84:	ldr	x1, [x19, #96]
     c88:	mov	w20, w0
     c8c:	mov	x2, x20
     c90:	mov	x0, x19
     c94:	mov	w3, w24
     c98:	add	x1, x1, x4
     c9c:	bl	0 <_tr_stored_block>
     ca0:	ldr	x21, [x19]
     ca4:	ldr	x0, [x19, #152]
     ca8:	ldr	x22, [x21, #56]
     cac:	add	x0, x0, x20
     cb0:	str	x0, [x19, #152]
     cb4:	mov	x0, x22
     cb8:	bl	0 <_tr_flush_bits>
     cbc:	ldr	x19, [x22, #40]
     cc0:	ldr	w0, [x21, #32]
     cc4:	cmp	w0, w19
     cc8:	csel	w19, w0, w19, ls  // ls = plast
     ccc:	cbnz	w19, d20 <deflate_stored+0x558>
     cd0:	lsl	w24, w24, #1
     cd4:	mov	w0, w24
     cd8:	ldp	x19, x20, [sp, #16]
     cdc:	ldp	x21, x22, [sp, #32]
     ce0:	ldp	x23, x24, [sp, #48]
     ce4:	ldp	x25, x26, [sp, #64]
     ce8:	ldp	x27, x28, [sp, #80]
     cec:	ldp	x29, x30, [sp], #112
     cf0:	ret
     cf4:	ldr	x0, [x21, #96]
     cf8:	mov	w2, w22
     cfc:	mov	x1, x4
     d00:	bl	0 <crc32>
     d04:	str	x0, [x21, #96]
     d08:	b	b34 <deflate_stored+0x36c>
     d0c:	ldr	x4, [x19, #152]
     d10:	cmp	x1, x4
     d14:	b.ne	a70 <deflate_stored+0x2a8>  // b.any
     d18:	mov	w24, #0x1                   	// #1
     d1c:	b	acc <deflate_stored+0x304>
     d20:	ldr	x0, [x21, #24]
     d24:	mov	w20, w19
     d28:	ldr	x1, [x22, #32]
     d2c:	mov	x2, x20
     d30:	bl	0 <memcpy>
     d34:	ldr	x1, [x21, #24]
     d38:	ldr	w0, [x21, #32]
     d3c:	ldr	x2, [x22, #32]
     d40:	sub	w19, w0, w19
     d44:	add	x0, x1, x20
     d48:	str	x0, [x21, #24]
     d4c:	ldr	x1, [x21, #40]
     d50:	add	x2, x2, x20
     d54:	ldr	x0, [x22, #40]
     d58:	str	x2, [x22, #32]
     d5c:	add	x1, x1, x20
     d60:	str	w19, [x21, #32]
     d64:	str	x1, [x21, #40]
     d68:	sub	x20, x0, x20
     d6c:	str	x20, [x22, #40]
     d70:	cbnz	x20, cd0 <deflate_stored+0x508>
     d74:	ldr	x0, [x22, #16]
     d78:	lsl	w24, w24, #1
     d7c:	str	x0, [x22, #32]
     d80:	b	cd4 <deflate_stored+0x50c>
     d84:	ldr	x3, [x19]
     d88:	ldr	w3, [x3, #8]
     d8c:	cmp	w3, #0x0
     d90:	ccmp	w1, w2, #0x0, eq  // eq = none
     d94:	b.cc	c80 <deflate_stored+0x4b8>  // b.lo, b.ul, b.last
     d98:	mov	w24, #0x1                   	// #1
     d9c:	b	c84 <deflate_stored+0x4bc>
     da0:	ldr	x2, [x19, #96]
     da4:	sub	w0, w0, w22
     da8:	ldr	x1, [x21]
     dac:	add	x3, x2, x3
     db0:	str	w0, [x21, #8]
     db4:	mov	w25, w22
     db8:	mov	x0, x3
     dbc:	mov	x2, x25
     dc0:	bl	0 <memcpy>
     dc4:	mov	x3, x0
     dc8:	ldr	x0, [x21, #56]
     dcc:	ldr	w0, [x0, #48]
     dd0:	cmp	w0, #0x1
     dd4:	b.eq	eec <deflate_stored+0x724>  // b.none
     dd8:	cmp	w0, #0x2
     ddc:	b.eq	f04 <deflate_stored+0x73c>  // b.none
     de0:	ldr	x1, [x21]
     de4:	ldr	x0, [x21, #16]
     de8:	add	x1, x1, x25
     dec:	ldr	w2, [x19, #172]
     df0:	add	x0, x0, x25
     df4:	str	x1, [x21]
     df8:	add	w3, w2, w20
     dfc:	str	x0, [x21, #16]
     e00:	mov	x2, x3
     e04:	str	w3, [x19, #172]
     e08:	b	a6c <deflate_stored+0x2a4>
     e0c:	ldr	x3, [x21]
     e10:	mov	w2, #0x2                   	// #2
     e14:	str	w2, [x19, #5928]
     e18:	mov	w2, w1
     e1c:	sub	x1, x3, x2
     e20:	bl	0 <memcpy>
     e24:	ldr	w2, [x19, #80]
     e28:	str	w2, [x19, #172]
     e2c:	mov	w0, w2
     e30:	b	9f0 <deflate_stored+0x228>
     e34:	ldr	x0, [x19, #96]
     e38:	sub	x4, x4, x1
     e3c:	sub	w2, w2, w5
     e40:	str	x4, [x19, #152]
     e44:	str	w2, [x19, #172]
     e48:	add	x1, x0, x1
     e4c:	bl	0 <memcpy>
     e50:	ldr	w0, [x19, #5928]
     e54:	cmp	w0, #0x1
     e58:	b.hi	e64 <deflate_stored+0x69c>  // b.pmore
     e5c:	add	w0, w0, #0x1
     e60:	str	w0, [x19, #5928]
     e64:	ldr	x21, [x19]
     e68:	ldr	w1, [x19, #80]
     e6c:	ldr	w2, [x19, #172]
     e70:	ldr	w0, [x21, #8]
     e74:	add	w20, w20, w1
     e78:	mov	w3, w2
     e7c:	b	a60 <deflate_stored+0x298>
     e80:	sub	w2, w3, w1
     e84:	str	w2, [x19, #172]
     e88:	add	x1, x0, w1, uxtw
     e8c:	bl	0 <memcpy>
     e90:	ldr	w0, [x19, #5928]
     e94:	ldr	w4, [x19, #172]
     e98:	cmp	w0, #0x1
     e9c:	b.ls	ed8 <deflate_stored+0x710>  // b.plast
     ea0:	ldr	x21, [x19]
     ea4:	ldr	x0, [x19, #96]
     ea8:	b	9cc <deflate_stored+0x204>
     eac:	ldr	x0, [x19]
     eb0:	ldr	w0, [x0, #8]
     eb4:	cmp	w0, #0x0
     eb8:	ccmp	w1, w2, #0x0, eq  // eq = none
     ebc:	b.cc	acc <deflate_stored+0x304>  // b.lo, b.ul, b.last
     ec0:	cmp	w1, w2
     ec4:	mov	w24, #0x1                   	// #1
     ec8:	csel	w0, w1, w2, ls  // ls = plast
     ecc:	cmp	w23, #0x4
     ed0:	b.ne	c80 <deflate_stored+0x4b8>  // b.any
     ed4:	b	c84 <deflate_stored+0x4bc>
     ed8:	add	w0, w0, #0x1
     edc:	str	w0, [x19, #5928]
     ee0:	ldr	x21, [x19]
     ee4:	ldr	x0, [x19, #96]
     ee8:	b	9cc <deflate_stored+0x204>
     eec:	ldr	x0, [x21, #96]
     ef0:	mov	w2, w22
     ef4:	mov	x1, x3
     ef8:	bl	0 <adler32>
     efc:	str	x0, [x21, #96]
     f00:	b	de0 <deflate_stored+0x618>
     f04:	ldr	x0, [x21, #96]
     f08:	mov	w2, w22
     f0c:	mov	x1, x3
     f10:	bl	0 <crc32>
     f14:	str	x0, [x21, #96]
     f18:	b	de0 <deflate_stored+0x618>
     f1c:	nop

0000000000000f20 <deflate_fast>:
     f20:	stp	x29, x30, [sp, #-80]!
     f24:	mov	x29, sp
     f28:	stp	x19, x20, [sp, #16]
     f2c:	adrp	x20, 0 <_length_code>
     f30:	mov	x19, x0
     f34:	add	x20, x20, #0x0
     f38:	stp	x21, x22, [sp, #32]
     f3c:	adrp	x21, 0 <_dist_code>
     f40:	mov	w22, w1
     f44:	add	x21, x21, #0x0
     f48:	stp	x23, x24, [sp, #48]
     f4c:	stp	x25, x26, [sp, #64]
     f50:	ldr	w1, [x19, #180]
     f54:	nop
     f58:	cmp	w1, #0x105
     f5c:	b.ls	1184 <deflate_fast+0x264>  // b.plast
     f60:	ldr	w3, [x19, #172]
     f64:	ldr	x0, [x19, #96]
     f68:	add	w2, w3, #0x2
     f6c:	ldr	w1, [x19, #128]
     f70:	ldr	w4, [x19, #144]
     f74:	ldrb	w0, [x0, w2, uxtw]
     f78:	ldr	w2, [x19, #140]
     f7c:	lsl	w1, w1, w4
     f80:	eor	w0, w0, w1
     f84:	ldp	x6, x5, [x19, #112]
     f88:	and	w0, w0, w2
     f8c:	ldr	w2, [x19, #88]
     f90:	ubfiz	x4, x0, #1, #32
     f94:	and	w2, w3, w2
     f98:	ldrh	w1, [x5, x4]
     f9c:	str	w0, [x19, #128]
     fa0:	strh	w1, [x6, x2, lsl #1]
     fa4:	strh	w3, [x5, x4]
     fa8:	cbz	w1, fc0 <deflate_fast+0xa0>
     fac:	ldr	w0, [x19, #80]
     fb0:	sub	w2, w3, w1
     fb4:	sub	w0, w0, #0x106
     fb8:	cmp	w2, w0
     fbc:	b.ls	11b0 <deflate_fast+0x290>  // b.plast
     fc0:	ldr	w2, [x19, #5900]
     fc4:	ldr	w0, [x19, #160]
     fc8:	add	w5, w2, #0x1
     fcc:	cmp	w0, #0x2
     fd0:	ubfiz	x6, x2, #1, #32
     fd4:	ldr	x4, [x19, #5888]
     fd8:	ldr	x7, [x19, #5904]
     fdc:	b.ls	11e0 <deflate_fast+0x2c0>  // b.plast
     fe0:	sub	w1, w0, #0x3
     fe4:	ldr	w0, [x19, #176]
     fe8:	and	w1, w1, #0xff
     fec:	sub	w0, w3, w0
     ff0:	and	w0, w0, #0xffff
     ff4:	strh	w0, [x7, x6]
     ff8:	ldrb	w3, [x20, w1, sxtw]
     ffc:	sub	w0, w0, #0x1
    1000:	str	w5, [x19, #5900]
    1004:	and	w0, w0, #0xffff
    1008:	strb	w1, [x4, w2, uxtw]
    100c:	cmp	w0, #0xff
    1010:	add	x1, x19, x3, lsl #2
    1014:	ldrh	w2, [x1, #1240]
    1018:	add	w2, w2, #0x1
    101c:	strh	w2, [x1, #1240]
    1020:	b.ls	102c <deflate_fast+0x10c>  // b.plast
    1024:	lsr	w0, w0, #7
    1028:	add	w0, w0, #0x100
    102c:	ldrb	w0, [x21, w0, sxtw]
    1030:	add	x0, x19, w0, sxtw #2
    1034:	ldrh	w1, [x0, #2504]
    1038:	add	w1, w1, #0x1
    103c:	strh	w1, [x0, #2504]
    1040:	ldr	w0, [x19, #5896]
    1044:	ldr	w2, [x19, #160]
    1048:	ldr	w1, [x19, #180]
    104c:	sub	w0, w0, #0x1
    1050:	ldr	w4, [x19, #5900]
    1054:	ldr	w3, [x19, #192]
    1058:	sub	w1, w1, w2
    105c:	cmp	w0, w4
    1060:	ldr	w0, [x19, #172]
    1064:	str	w1, [x19, #180]
    1068:	cset	w6, eq  // eq = none
    106c:	cmp	w2, w3
    1070:	add	w3, w2, w0
    1074:	ldp	w8, w9, [x19, #140]
    1078:	ccmp	w1, #0x2, #0x0, ls  // ls = plast
    107c:	ldr	x7, [x19, #96]
    1080:	b.hi	1238 <deflate_fast+0x318>  // b.pmore
    1084:	str	wzr, [x19, #160]
    1088:	add	w4, w3, #0x1
    108c:	str	w3, [x19, #172]
    1090:	ldrb	w2, [x7, w3, uxtw]
    1094:	str	w2, [x19, #128]
    1098:	ldrb	w0, [x7, w4, uxtw]
    109c:	lsl	w2, w2, w9
    10a0:	eor	w0, w0, w2
    10a4:	and	w0, w0, w8
    10a8:	str	w0, [x19, #128]
    10ac:	cbz	w6, f58 <deflate_fast+0x38>
    10b0:	ldr	x2, [x19, #152]
    10b4:	mov	x1, #0x0                   	// #0
    10b8:	tbnz	x2, #63, 10c4 <deflate_fast+0x1a4>
    10bc:	ldr	x1, [x19, #96]
    10c0:	add	x1, x1, w2, uxtw
    10c4:	sub	x2, x3, x2
    10c8:	mov	x0, x19
    10cc:	mov	w3, #0x0                   	// #0
    10d0:	bl	0 <_tr_flush_block>
    10d4:	ldr	x23, [x19]
    10d8:	ldr	w0, [x19, #172]
    10dc:	ldr	x25, [x23, #56]
    10e0:	str	x0, [x19, #152]
    10e4:	mov	x0, x25
    10e8:	bl	0 <_tr_flush_bits>
    10ec:	ldr	x24, [x25, #40]
    10f0:	ldr	w0, [x23, #32]
    10f4:	cmp	w0, w24
    10f8:	csel	w24, w0, w24, ls  // ls = plast
    10fc:	cbz	w24, 115c <deflate_fast+0x23c>
    1100:	ldr	x0, [x23, #24]
    1104:	mov	w26, w24
    1108:	ldr	x1, [x25, #32]
    110c:	mov	x2, x26
    1110:	bl	0 <memcpy>
    1114:	ldr	x1, [x23, #24]
    1118:	ldr	w0, [x23, #32]
    111c:	ldr	x2, [x25, #32]
    1120:	sub	w24, w0, w24
    1124:	add	x0, x1, x26
    1128:	str	x0, [x23, #24]
    112c:	ldr	x1, [x23, #40]
    1130:	add	x2, x2, x26
    1134:	ldr	x0, [x25, #40]
    1138:	str	x2, [x25, #32]
    113c:	add	x1, x1, x26
    1140:	str	w24, [x23, #32]
    1144:	str	x1, [x23, #40]
    1148:	sub	x26, x0, x26
    114c:	str	x26, [x25, #40]
    1150:	cbnz	x26, 115c <deflate_fast+0x23c>
    1154:	ldr	x0, [x25, #16]
    1158:	str	x0, [x25, #32]
    115c:	ldr	x0, [x19]
    1160:	ldr	w0, [x0, #32]
    1164:	cbnz	w0, f50 <deflate_fast+0x30>
    1168:	mov	w0, #0x0                   	// #0
    116c:	ldp	x19, x20, [sp, #16]
    1170:	ldp	x21, x22, [sp, #32]
    1174:	ldp	x23, x24, [sp, #48]
    1178:	ldp	x25, x26, [sp, #64]
    117c:	ldp	x29, x30, [sp], #80
    1180:	ret
    1184:	mov	x0, x19
    1188:	bl	1e8 <fill_window>
    118c:	ldr	w0, [x19, #180]
    1190:	cmp	w0, #0x105
    1194:	b.hi	f60 <deflate_fast+0x40>  // b.pmore
    1198:	cbz	w22, 1168 <deflate_fast+0x248>
    119c:	cbz	w0, 12a4 <deflate_fast+0x384>
    11a0:	ldr	w3, [x19, #172]
    11a4:	cmp	w0, #0x2
    11a8:	b.ls	fc0 <deflate_fast+0xa0>  // b.plast
    11ac:	b	f64 <deflate_fast+0x44>
    11b0:	mov	x0, x19
    11b4:	bl	0 <longest_match>
    11b8:	ldr	w2, [x19, #5900]
    11bc:	cmp	w0, #0x2
    11c0:	str	w0, [x19, #160]
    11c4:	ldr	w3, [x19, #172]
    11c8:	add	w5, w2, #0x1
    11cc:	ubfiz	x6, x2, #1, #32
    11d0:	ldr	x4, [x19, #5888]
    11d4:	ldr	x7, [x19, #5904]
    11d8:	b.hi	fe0 <deflate_fast+0xc0>  // b.pmore
    11dc:	nop
    11e0:	ldr	x0, [x19, #96]
    11e4:	ldrb	w0, [x0, w3, uxtw]
    11e8:	strh	wzr, [x7, x6]
    11ec:	str	w5, [x19, #5900]
    11f0:	add	x1, x19, w0, uxtb #2
    11f4:	strb	w0, [x4, w2, uxtw]
    11f8:	ldrh	w0, [x1, #212]
    11fc:	add	w0, w0, #0x1
    1200:	strh	w0, [x1, #212]
    1204:	ldr	w0, [x19, #5896]
    1208:	ldr	w1, [x19, #5900]
    120c:	sub	w0, w0, #0x1
    1210:	ldr	w3, [x19, #172]
    1214:	cmp	w0, w1
    1218:	ldr	w1, [x19, #180]
    121c:	add	w3, w3, #0x1
    1220:	str	w3, [x19, #172]
    1224:	sub	w1, w1, #0x1
    1228:	str	w1, [x19, #180]
    122c:	cset	w6, eq  // eq = none
    1230:	cbz	w6, f58 <deflate_fast+0x38>
    1234:	b	10b0 <deflate_fast+0x190>
    1238:	ldp	x13, x10, [x19, #112]
    123c:	sub	w2, w2, #0x1
    1240:	ldr	w14, [x19, #88]
    1244:	add	w0, w0, #0x1
    1248:	str	w2, [x19, #160]
    124c:	ldr	w2, [x19, #128]
    1250:	add	w5, w0, #0x2
    1254:	str	w0, [x19, #172]
    1258:	lsl	w2, w2, w9
    125c:	and	w11, w14, w0
    1260:	mvn	w4, w0
    1264:	ldrb	w5, [x7, w5, uxtw]
    1268:	add	w4, w4, w3
    126c:	eor	w2, w5, w2
    1270:	and	w2, w2, w8
    1274:	ubfiz	x5, x2, #1, #32
    1278:	ldrh	w12, [x10, x5]
    127c:	str	w2, [x19, #128]
    1280:	strh	w12, [x13, x11, lsl #1]
    1284:	strh	w0, [x10, x5]
    1288:	add	w0, w0, #0x1
    128c:	str	w4, [x19, #160]
    1290:	cmp	w3, w0
    1294:	b.ne	1250 <deflate_fast+0x330>  // b.any
    1298:	str	w3, [x19, #172]
    129c:	cbz	w6, f58 <deflate_fast+0x38>
    12a0:	b	10b0 <deflate_fast+0x190>
    12a4:	ldr	w3, [x19, #172]
    12a8:	mov	w0, #0x2                   	// #2
    12ac:	cmp	w3, w0
    12b0:	csel	w0, w3, w0, ls  // ls = plast
    12b4:	str	w0, [x19, #5932]
    12b8:	cmp	w22, #0x4
    12bc:	b.eq	1348 <deflate_fast+0x428>  // b.none
    12c0:	ldr	w1, [x19, #5900]
    12c4:	mov	w0, #0x1                   	// #1
    12c8:	cbz	w1, 13b0 <deflate_fast+0x490>
    12cc:	ldr	x2, [x19, #152]
    12d0:	mov	x1, #0x0                   	// #0
    12d4:	tbnz	x2, #63, 12e0 <deflate_fast+0x3c0>
    12d8:	ldr	x1, [x19, #96]
    12dc:	add	x1, x1, w2, uxtw
    12e0:	mov	w3, w3
    12e4:	mov	x0, x19
    12e8:	sub	x2, x3, x2
    12ec:	mov	w3, #0x0                   	// #0
    12f0:	bl	0 <_tr_flush_block>
    12f4:	ldr	x22, [x19]
    12f8:	ldr	w0, [x19, #172]
    12fc:	ldr	x21, [x22, #56]
    1300:	str	x0, [x19, #152]
    1304:	mov	x0, x21
    1308:	bl	0 <_tr_flush_bits>
    130c:	ldr	x20, [x21, #40]
    1310:	ldr	w0, [x22, #32]
    1314:	cmp	w0, w20
    1318:	csel	w20, w0, w20, ls  // ls = plast
    131c:	cbnz	w20, 1428 <deflate_fast+0x508>
    1320:	ldr	x0, [x19]
    1324:	ldp	x19, x20, [sp, #16]
    1328:	ldr	w0, [x0, #32]
    132c:	ldp	x21, x22, [sp, #32]
    1330:	cmp	w0, #0x0
    1334:	cset	w0, ne  // ne = any
    1338:	ldp	x23, x24, [sp, #48]
    133c:	ldp	x25, x26, [sp, #64]
    1340:	ldp	x29, x30, [sp], #80
    1344:	ret
    1348:	ldr	x2, [x19, #152]
    134c:	mov	x1, #0x0                   	// #0
    1350:	tbnz	x2, #63, 135c <deflate_fast+0x43c>
    1354:	ldr	x1, [x19, #96]
    1358:	add	x1, x1, w2, uxtw
    135c:	mov	w3, w3
    1360:	mov	x0, x19
    1364:	sub	x2, x3, x2
    1368:	mov	w3, #0x1                   	// #1
    136c:	bl	0 <_tr_flush_block>
    1370:	ldr	x20, [x19]
    1374:	ldr	w0, [x19, #172]
    1378:	ldr	x21, [x20, #56]
    137c:	str	x0, [x19, #152]
    1380:	mov	x0, x21
    1384:	bl	0 <_tr_flush_bits>
    1388:	ldr	x0, [x21, #40]
    138c:	ldr	w22, [x20, #32]
    1390:	cmp	w22, w0
    1394:	csel	w22, w22, w0, ls  // ls = plast
    1398:	cbnz	w22, 13c8 <deflate_fast+0x4a8>
    139c:	ldr	x0, [x19]
    13a0:	ldr	w0, [x0, #32]
    13a4:	cmp	w0, #0x0
    13a8:	cset	w0, ne  // ne = any
    13ac:	add	w0, w0, #0x2
    13b0:	ldp	x19, x20, [sp, #16]
    13b4:	ldp	x21, x22, [sp, #32]
    13b8:	ldp	x23, x24, [sp, #48]
    13bc:	ldp	x25, x26, [sp, #64]
    13c0:	ldp	x29, x30, [sp], #80
    13c4:	ret
    13c8:	ldr	x0, [x20, #24]
    13cc:	mov	w23, w22
    13d0:	ldr	x1, [x21, #32]
    13d4:	mov	x2, x23
    13d8:	bl	0 <memcpy>
    13dc:	ldr	x1, [x20, #24]
    13e0:	ldr	w0, [x20, #32]
    13e4:	ldr	x2, [x21, #32]
    13e8:	sub	w22, w0, w22
    13ec:	add	x0, x1, x23
    13f0:	str	x0, [x20, #24]
    13f4:	ldr	x1, [x20, #40]
    13f8:	add	x2, x2, x23
    13fc:	ldr	x0, [x21, #40]
    1400:	str	x2, [x21, #32]
    1404:	add	x1, x1, x23
    1408:	str	w22, [x20, #32]
    140c:	str	x1, [x20, #40]
    1410:	sub	x23, x0, x23
    1414:	str	x23, [x21, #40]
    1418:	cbnz	x23, 139c <deflate_fast+0x47c>
    141c:	ldr	x0, [x21, #16]
    1420:	str	x0, [x21, #32]
    1424:	b	139c <deflate_fast+0x47c>
    1428:	ldr	x0, [x22, #24]
    142c:	mov	w23, w20
    1430:	ldr	x1, [x21, #32]
    1434:	mov	x2, x23
    1438:	bl	0 <memcpy>
    143c:	ldr	x1, [x22, #24]
    1440:	ldr	w0, [x22, #32]
    1444:	ldr	x2, [x21, #32]
    1448:	sub	w20, w0, w20
    144c:	add	x0, x1, x23
    1450:	str	x0, [x22, #24]
    1454:	ldr	x1, [x22, #40]
    1458:	add	x2, x2, x23
    145c:	ldr	x0, [x21, #40]
    1460:	str	x2, [x21, #32]
    1464:	add	x1, x1, x23
    1468:	str	w20, [x22, #32]
    146c:	str	x1, [x22, #40]
    1470:	sub	x23, x0, x23
    1474:	str	x23, [x21, #40]
    1478:	cbnz	x23, 1320 <deflate_fast+0x400>
    147c:	ldr	x0, [x21, #16]
    1480:	str	x0, [x21, #32]
    1484:	b	1320 <deflate_fast+0x400>

0000000000001488 <deflate_slow>:
    1488:	stp	x29, x30, [sp, #-96]!
    148c:	mov	x29, sp
    1490:	stp	x19, x20, [sp, #16]
    1494:	mov	x19, x0
    1498:	mov	w20, #0x1                   	// #1
    149c:	stp	x21, x22, [sp, #32]
    14a0:	adrp	x22, 0 <_length_code>
    14a4:	mov	w21, w1
    14a8:	add	x22, x22, #0x0
    14ac:	stp	x23, x24, [sp, #48]
    14b0:	mov	w23, #0xfffffffe            	// #-2
    14b4:	stp	x25, x26, [sp, #64]
    14b8:	str	x27, [sp, #80]
    14bc:	ldr	w1, [x19, #180]
    14c0:	cmp	w1, #0x105
    14c4:	b.ls	160c <deflate_slow+0x184>  // b.plast
    14c8:	ldr	w3, [x19, #160]
    14cc:	ldp	w2, w5, [x19, #172]
    14d0:	add	w6, w2, #0x2
    14d4:	ldr	x4, [x19, #96]
    14d8:	mov	w0, #0x2                   	// #2
    14dc:	ldr	w1, [x19, #128]
    14e0:	ldr	w7, [x19, #144]
    14e4:	ldrb	w4, [x4, w6, uxtw]
    14e8:	ldr	w6, [x19, #140]
    14ec:	lsl	w1, w1, w7
    14f0:	eor	w4, w4, w1
    14f4:	ldp	x9, x8, [x19, #112]
    14f8:	and	w4, w4, w6
    14fc:	ldr	w6, [x19, #88]
    1500:	ubfiz	x7, x4, #1, #32
    1504:	and	w6, w2, w6
    1508:	ldrh	w1, [x8, x7]
    150c:	str	w4, [x19, #128]
    1510:	strh	w1, [x9, x6, lsl #1]
    1514:	strh	w2, [x8, x7]
    1518:	stp	w0, w5, [x19, #160]
    151c:	str	w3, [x19, #184]
    1520:	cbz	w1, 1548 <deflate_slow+0xc0>
    1524:	ldr	w4, [x19, #192]
    1528:	cmp	w4, w3
    152c:	b.ls	1548 <deflate_slow+0xc0>  // b.plast
    1530:	ldr	w4, [x19, #80]
    1534:	sub	w5, w2, w1
    1538:	sub	w4, w4, #0x106
    153c:	cmp	w5, w4
    1540:	b.ls	1954 <deflate_slow+0x4cc>  // b.plast
    1544:	nop
    1548:	cmp	w3, #0x2
    154c:	b.ls	1558 <deflate_slow+0xd0>  // b.plast
    1550:	cmp	w3, w0
    1554:	b.cs	1740 <deflate_slow+0x2b8>  // b.hs, b.nlast
    1558:	ldr	w0, [x19, #168]
    155c:	cbz	w0, 15f0 <deflate_slow+0x168>
    1560:	ldr	x3, [x19, #96]
    1564:	sub	w2, w2, #0x1
    1568:	ldr	w0, [x19, #5900]
    156c:	ldr	x1, [x19, #5904]
    1570:	add	w4, w0, #0x1
    1574:	ldrb	w2, [x3, w2, uxtw]
    1578:	ldr	x3, [x19, #5888]
    157c:	strh	wzr, [x1, w0, uxtw #1]
    1580:	add	x1, x19, w2, uxtb #2
    1584:	str	w4, [x19, #5900]
    1588:	strb	w2, [x3, w0, uxtw]
    158c:	ldrh	w0, [x1, #212]
    1590:	add	w0, w0, #0x1
    1594:	strh	w0, [x1, #212]
    1598:	ldr	w0, [x19, #5896]
    159c:	ldr	w1, [x19, #5900]
    15a0:	sub	w0, w0, #0x1
    15a4:	cmp	w1, w0
    15a8:	b.eq	164c <deflate_slow+0x1c4>  // b.none
    15ac:	ldr	x2, [x19]
    15b0:	ldr	w0, [x19, #172]
    15b4:	ldr	w1, [x19, #180]
    15b8:	ldr	w2, [x2, #32]
    15bc:	add	w0, w0, #0x1
    15c0:	sub	w1, w1, #0x1
    15c4:	str	w0, [x19, #172]
    15c8:	str	w1, [x19, #180]
    15cc:	cbnz	w2, 14c0 <deflate_slow+0x38>
    15d0:	mov	w0, #0x0                   	// #0
    15d4:	ldp	x19, x20, [sp, #16]
    15d8:	ldp	x21, x22, [sp, #32]
    15dc:	ldp	x23, x24, [sp, #48]
    15e0:	ldp	x25, x26, [sp, #64]
    15e4:	ldr	x27, [sp, #80]
    15e8:	ldp	x29, x30, [sp], #96
    15ec:	ret
    15f0:	ldr	w1, [x19, #180]
    15f4:	add	w2, w2, #0x1
    15f8:	stp	w20, w2, [x19, #168]
    15fc:	sub	w1, w1, #0x1
    1600:	str	w1, [x19, #180]
    1604:	cmp	w1, #0x105
    1608:	b.hi	14c8 <deflate_slow+0x40>  // b.pmore
    160c:	mov	x0, x19
    1610:	bl	1e8 <fill_window>
    1614:	ldr	w0, [x19, #180]
    1618:	cmp	w0, #0x105
    161c:	b.hi	14c8 <deflate_slow+0x40>  // b.pmore
    1620:	cbz	w21, 15d0 <deflate_slow+0x148>
    1624:	cbz	w0, 198c <deflate_slow+0x504>
    1628:	ldr	w3, [x19, #160]
    162c:	cmp	w0, #0x2
    1630:	ldp	w2, w5, [x19, #172]
    1634:	b.hi	14d0 <deflate_slow+0x48>  // b.pmore
    1638:	mov	w1, #0x2                   	// #2
    163c:	mov	w0, w1
    1640:	stp	w1, w5, [x19, #160]
    1644:	str	w3, [x19, #184]
    1648:	b	1548 <deflate_slow+0xc0>
    164c:	ldr	x2, [x19, #152]
    1650:	mov	x1, #0x0                   	// #0
    1654:	tbnz	x2, #63, 1660 <deflate_slow+0x1d8>
    1658:	ldr	x1, [x19, #96]
    165c:	add	x1, x1, w2, uxtw
    1660:	ldr	w4, [x19, #172]
    1664:	mov	x0, x19
    1668:	mov	w3, #0x0                   	// #0
    166c:	sub	x2, x4, x2
    1670:	bl	0 <_tr_flush_block>
    1674:	ldr	x24, [x19]
    1678:	ldr	w0, [x19, #172]
    167c:	ldr	x26, [x24, #56]
    1680:	str	x0, [x19, #152]
    1684:	mov	x0, x26
    1688:	bl	0 <_tr_flush_bits>
    168c:	ldr	x25, [x26, #40]
    1690:	ldr	w0, [x24, #32]
    1694:	cmp	w0, w25
    1698:	csel	w25, w0, w25, ls  // ls = plast
    169c:	cbz	w25, 15ac <deflate_slow+0x124>
    16a0:	ldr	x0, [x24, #24]
    16a4:	mov	w27, w25
    16a8:	ldr	x1, [x26, #32]
    16ac:	mov	x2, x27
    16b0:	bl	0 <memcpy>
    16b4:	ldr	x2, [x24, #24]
    16b8:	ldr	x3, [x26, #32]
    16bc:	add	x2, x2, x27
    16c0:	ldr	x1, [x24, #40]
    16c4:	str	x2, [x24, #24]
    16c8:	ldr	w0, [x24, #32]
    16cc:	add	x3, x3, x27
    16d0:	ldr	x2, [x26, #40]
    16d4:	str	x3, [x26, #32]
    16d8:	add	x1, x1, x27
    16dc:	sub	w0, w0, w25
    16e0:	str	w0, [x24, #32]
    16e4:	sub	x27, x2, x27
    16e8:	str	x1, [x24, #40]
    16ec:	str	x27, [x26, #40]
    16f0:	cbnz	x27, 15ac <deflate_slow+0x124>
    16f4:	ldr	x0, [x26, #16]
    16f8:	str	x0, [x26, #32]
    16fc:	b	15ac <deflate_slow+0x124>
    1700:	ldr	w1, [x19, #200]
    1704:	ldr	w2, [x19, #172]
    1708:	ldr	w3, [x19, #184]
    170c:	cmp	w1, #0x1
    1710:	b.eq	172c <deflate_slow+0x2a4>  // b.none
    1714:	cmp	w0, #0x3
    1718:	b.ne	1548 <deflate_slow+0xc0>  // b.any
    171c:	ldr	w1, [x19, #176]
    1720:	sub	w1, w2, w1
    1724:	cmp	w1, #0x1, lsl #12
    1728:	b.ls	1548 <deflate_slow+0xc0>  // b.plast
    172c:	mov	w0, #0x2                   	// #2
    1730:	str	w0, [x19, #160]
    1734:	cmp	w3, w0
    1738:	b.ls	1558 <deflate_slow+0xd0>  // b.plast
    173c:	nop
    1740:	sub	w3, w3, #0x3
    1744:	ldr	w4, [x19, #5900]
    1748:	and	w3, w3, #0xff
    174c:	ldr	w0, [x19, #164]
    1750:	ldr	x8, [x19, #5904]
    1754:	sub	w0, w2, w0
    1758:	ldrb	w1, [x22, w3, sxtw]
    175c:	and	w0, w0, #0xffff
    1760:	ldr	x5, [x19, #5888]
    1764:	sub	w9, w0, #0x1
    1768:	ldr	w7, [x19, #180]
    176c:	add	x1, x19, x1, lsl #2
    1770:	strh	w9, [x8, w4, uxtw #1]
    1774:	add	w6, w4, #0x1
    1778:	str	w6, [x19, #5900]
    177c:	sub	w7, w7, #0x3
    1780:	strb	w3, [x5, w4, uxtw]
    1784:	sub	w0, w0, #0x2
    1788:	add	w7, w7, w2
    178c:	and	w0, w0, #0xffff
    1790:	ldrh	w3, [x1, #1240]
    1794:	cmp	w0, #0xff
    1798:	add	w2, w3, #0x1
    179c:	strh	w2, [x1, #1240]
    17a0:	b.hi	1974 <deflate_slow+0x4ec>  // b.pmore
    17a4:	adrp	x1, 0 <_dist_code>
    17a8:	add	x1, x1, #0x0
    17ac:	ldrb	w0, [x1, w0, sxtw]
    17b0:	add	x0, x19, w0, sxtw #2
    17b4:	ldrh	w1, [x0, #2504]
    17b8:	add	w1, w1, #0x1
    17bc:	strh	w1, [x0, #2504]
    17c0:	ldp	w1, w2, [x19, #180]
    17c4:	ldr	w5, [x19, #172]
    17c8:	ldr	w12, [x19, #5896]
    17cc:	add	w1, w1, #0x1
    17d0:	add	w0, w5, #0x1
    17d4:	ldr	w13, [x19, #5900]
    17d8:	add	w5, w2, w5
    17dc:	sub	w12, w12, #0x1
    17e0:	sub	w9, w5, #0x1
    17e4:	sub	w1, w1, w2
    17e8:	sub	w2, w2, #0x2
    17ec:	stp	w1, w2, [x19, #180]
    17f0:	str	w0, [x19, #172]
    17f4:	sub	w3, w23, w0
    17f8:	add	w8, w0, #0x2
    17fc:	add	w3, w3, w5
    1800:	cmp	w7, w0
    1804:	b.cc	192c <deflate_slow+0x4a4>  // b.lo, b.ul, b.last
    1808:	ldr	x2, [x19, #96]
    180c:	ldr	w6, [x19, #128]
    1810:	ldr	w10, [x19, #144]
    1814:	ldrb	w4, [x2, w8, uxtw]
    1818:	ldr	w2, [x19, #140]
    181c:	lsl	w6, w6, w10
    1820:	eor	w4, w4, w6
    1824:	and	w4, w4, w2
    1828:	ldr	w6, [x19, #88]
    182c:	ldr	x8, [x19, #120]
    1830:	ubfiz	x2, x4, #1, #32
    1834:	ldr	x10, [x19, #112]
    1838:	and	w6, w0, w6
    183c:	ldrh	w11, [x8, x2]
    1840:	str	w4, [x19, #128]
    1844:	strh	w11, [x10, x6, lsl #1]
    1848:	strh	w0, [x8, x2]
    184c:	add	w0, w0, #0x1
    1850:	str	w3, [x19, #184]
    1854:	cmp	w0, w9
    1858:	b.ne	17f0 <deflate_slow+0x368>  // b.any
    185c:	mov	w0, #0x2                   	// #2
    1860:	str	w0, [x19, #160]
    1864:	stp	wzr, w9, [x19, #168]
    1868:	cmp	w13, w12
    186c:	b.ne	14c0 <deflate_slow+0x38>  // b.any
    1870:	ldr	x2, [x19, #152]
    1874:	mov	x1, #0x0                   	// #0
    1878:	tbnz	x2, #63, 1884 <deflate_slow+0x3fc>
    187c:	ldr	x1, [x19, #96]
    1880:	add	x1, x1, w2, uxtw
    1884:	sub	x2, x9, x2
    1888:	mov	x0, x19
    188c:	mov	w3, #0x0                   	// #0
    1890:	bl	0 <_tr_flush_block>
    1894:	ldr	x24, [x19]
    1898:	ldr	w0, [x19, #172]
    189c:	ldr	x26, [x24, #56]
    18a0:	str	x0, [x19, #152]
    18a4:	mov	x0, x26
    18a8:	bl	0 <_tr_flush_bits>
    18ac:	ldr	x25, [x26, #40]
    18b0:	ldr	w0, [x24, #32]
    18b4:	cmp	w0, w25
    18b8:	csel	w25, w0, w25, ls  // ls = plast
    18bc:	cbz	w25, 191c <deflate_slow+0x494>
    18c0:	ldr	x0, [x24, #24]
    18c4:	mov	w27, w25
    18c8:	ldr	x1, [x26, #32]
    18cc:	mov	x2, x27
    18d0:	bl	0 <memcpy>
    18d4:	ldr	x1, [x24, #24]
    18d8:	ldr	w0, [x24, #32]
    18dc:	ldr	x2, [x26, #32]
    18e0:	sub	w25, w0, w25
    18e4:	add	x0, x1, x27
    18e8:	str	x0, [x24, #24]
    18ec:	ldr	x1, [x24, #40]
    18f0:	add	x2, x2, x27
    18f4:	ldr	x0, [x26, #40]
    18f8:	str	x2, [x26, #32]
    18fc:	add	x1, x1, x27
    1900:	str	w25, [x24, #32]
    1904:	str	x1, [x24, #40]
    1908:	sub	x27, x0, x27
    190c:	str	x27, [x26, #40]
    1910:	cbnz	x27, 191c <deflate_slow+0x494>
    1914:	ldr	x0, [x26, #16]
    1918:	str	x0, [x26, #32]
    191c:	ldr	x0, [x19]
    1920:	ldr	w0, [x0, #32]
    1924:	cbnz	w0, 14bc <deflate_slow+0x34>
    1928:	b	15d0 <deflate_slow+0x148>
    192c:	str	w3, [x19, #184]
    1930:	add	w0, w0, #0x1
    1934:	cmp	w9, w0
    1938:	b.ne	17f0 <deflate_slow+0x368>  // b.any
    193c:	mov	w0, #0x2                   	// #2
    1940:	str	w0, [x19, #160]
    1944:	stp	wzr, w9, [x19, #168]
    1948:	cmp	w13, w12
    194c:	b.ne	14c0 <deflate_slow+0x38>  // b.any
    1950:	b	1870 <deflate_slow+0x3e8>
    1954:	mov	x0, x19
    1958:	bl	0 <longest_match>
    195c:	str	w0, [x19, #160]
    1960:	cmp	w0, #0x5
    1964:	b.ls	1700 <deflate_slow+0x278>  // b.plast
    1968:	ldr	w2, [x19, #172]
    196c:	ldr	w3, [x19, #184]
    1970:	b	1548 <deflate_slow+0xc0>
    1974:	lsr	w0, w0, #7
    1978:	adrp	x1, 0 <_dist_code>
    197c:	add	w0, w0, #0x100
    1980:	add	x1, x1, #0x0
    1984:	ldrb	w0, [x1, w0, sxtw]
    1988:	b	17b0 <deflate_slow+0x328>
    198c:	ldp	w0, w3, [x19, #168]
    1990:	cbnz	w0, 1a94 <deflate_slow+0x60c>
    1994:	cmp	w3, #0x2
    1998:	mov	w0, #0x2                   	// #2
    199c:	csel	w0, w3, w0, ls  // ls = plast
    19a0:	str	w0, [x19, #5932]
    19a4:	cmp	w21, #0x4
    19a8:	b.eq	1aec <deflate_slow+0x664>  // b.none
    19ac:	ldr	w1, [x19, #5900]
    19b0:	mov	w0, #0x1                   	// #1
    19b4:	cbz	w1, 15d4 <deflate_slow+0x14c>
    19b8:	ldr	x2, [x19, #152]
    19bc:	mov	x1, #0x0                   	// #0
    19c0:	tbnz	x2, #63, 19cc <deflate_slow+0x544>
    19c4:	ldr	x1, [x19, #96]
    19c8:	add	x1, x1, w2, uxtw
    19cc:	mov	w3, w3
    19d0:	mov	x0, x19
    19d4:	sub	x2, x3, x2
    19d8:	mov	w3, #0x0                   	// #0
    19dc:	bl	0 <_tr_flush_block>
    19e0:	ldr	x21, [x19]
    19e4:	ldr	w0, [x19, #172]
    19e8:	ldr	x20, [x21, #56]
    19ec:	str	x0, [x19, #152]
    19f0:	mov	x0, x20
    19f4:	bl	0 <_tr_flush_bits>
    19f8:	ldr	x0, [x20, #40]
    19fc:	ldr	w22, [x21, #32]
    1a00:	cmp	w22, w0
    1a04:	csel	w22, w22, w0, ls  // ls = plast
    1a08:	cbz	w22, 1a68 <deflate_slow+0x5e0>
    1a0c:	ldr	x0, [x21, #24]
    1a10:	mov	w23, w22
    1a14:	ldr	x1, [x20, #32]
    1a18:	mov	x2, x23
    1a1c:	bl	0 <memcpy>
    1a20:	ldr	x1, [x21, #24]
    1a24:	ldr	w0, [x21, #32]
    1a28:	ldr	x2, [x20, #32]
    1a2c:	sub	w22, w0, w22
    1a30:	add	x0, x1, x23
    1a34:	str	x0, [x21, #24]
    1a38:	ldr	x1, [x21, #40]
    1a3c:	add	x2, x2, x23
    1a40:	ldr	x0, [x20, #40]
    1a44:	str	x2, [x20, #32]
    1a48:	add	x1, x1, x23
    1a4c:	str	w22, [x21, #32]
    1a50:	str	x1, [x21, #40]
    1a54:	sub	x23, x0, x23
    1a58:	str	x23, [x20, #40]
    1a5c:	cbnz	x23, 1a68 <deflate_slow+0x5e0>
    1a60:	ldr	x0, [x20, #16]
    1a64:	str	x0, [x20, #32]
    1a68:	ldr	x0, [x19]
    1a6c:	ldp	x19, x20, [sp, #16]
    1a70:	ldr	w0, [x0, #32]
    1a74:	ldp	x21, x22, [sp, #32]
    1a78:	cmp	w0, #0x0
    1a7c:	cset	w0, ne  // ne = any
    1a80:	ldp	x23, x24, [sp, #48]
    1a84:	ldp	x25, x26, [sp, #64]
    1a88:	ldr	x27, [sp, #80]
    1a8c:	ldp	x29, x30, [sp], #96
    1a90:	ret
    1a94:	ldr	x2, [x19, #96]
    1a98:	sub	w3, w3, #0x1
    1a9c:	ldr	w0, [x19, #5900]
    1aa0:	ldr	x1, [x19, #5904]
    1aa4:	add	w4, w0, #0x1
    1aa8:	ldrb	w2, [x2, w3, uxtw]
    1aac:	ldr	x3, [x19, #5888]
    1ab0:	strh	wzr, [x1, w0, uxtw #1]
    1ab4:	add	x1, x19, w2, uxtb #2
    1ab8:	str	w4, [x19, #5900]
    1abc:	strb	w2, [x3, w0, uxtw]
    1ac0:	ldrh	w0, [x1, #212]
    1ac4:	add	w0, w0, #0x1
    1ac8:	strh	w0, [x1, #212]
    1acc:	mov	w0, #0x2                   	// #2
    1ad0:	str	wzr, [x19, #168]
    1ad4:	ldr	w3, [x19, #172]
    1ad8:	cmp	w3, #0x2
    1adc:	csel	w0, w3, w0, ls  // ls = plast
    1ae0:	str	w0, [x19, #5932]
    1ae4:	cmp	w21, #0x4
    1ae8:	b.ne	19ac <deflate_slow+0x524>  // b.any
    1aec:	ldr	x2, [x19, #152]
    1af0:	mov	x1, #0x0                   	// #0
    1af4:	tbnz	x2, #63, 1b00 <deflate_slow+0x678>
    1af8:	ldr	x1, [x19, #96]
    1afc:	add	x1, x1, w2, uxtw
    1b00:	mov	w3, w3
    1b04:	mov	x0, x19
    1b08:	sub	x2, x3, x2
    1b0c:	mov	w3, #0x1                   	// #1
    1b10:	bl	0 <_tr_flush_block>
    1b14:	ldr	x21, [x19]
    1b18:	ldr	w0, [x19, #172]
    1b1c:	ldr	x20, [x21, #56]
    1b20:	str	x0, [x19, #152]
    1b24:	mov	x0, x20
    1b28:	bl	0 <_tr_flush_bits>
    1b2c:	ldr	x0, [x20, #40]
    1b30:	ldr	w22, [x21, #32]
    1b34:	cmp	w22, w0
    1b38:	csel	w22, w22, w0, ls  // ls = plast
    1b3c:	cbz	w22, 1b9c <deflate_slow+0x714>
    1b40:	ldr	x0, [x21, #24]
    1b44:	mov	w23, w22
    1b48:	ldr	x1, [x20, #32]
    1b4c:	mov	x2, x23
    1b50:	bl	0 <memcpy>
    1b54:	ldr	x1, [x21, #24]
    1b58:	ldr	w0, [x21, #32]
    1b5c:	ldr	x2, [x20, #32]
    1b60:	sub	w22, w0, w22
    1b64:	add	x0, x1, x23
    1b68:	str	x0, [x21, #24]
    1b6c:	ldr	x1, [x21, #40]
    1b70:	add	x2, x2, x23
    1b74:	ldr	x0, [x20, #40]
    1b78:	str	x2, [x20, #32]
    1b7c:	add	x1, x1, x23
    1b80:	str	w22, [x21, #32]
    1b84:	str	x1, [x21, #40]
    1b88:	sub	x23, x0, x23
    1b8c:	str	x23, [x20, #40]
    1b90:	cbnz	x23, 1b9c <deflate_slow+0x714>
    1b94:	ldr	x0, [x20, #16]
    1b98:	str	x0, [x20, #32]
    1b9c:	ldr	x0, [x19]
    1ba0:	ldp	x19, x20, [sp, #16]
    1ba4:	ldr	w0, [x0, #32]
    1ba8:	ldp	x21, x22, [sp, #32]
    1bac:	cmp	w0, #0x0
    1bb0:	cset	w0, ne  // ne = any
    1bb4:	add	w0, w0, #0x2
    1bb8:	ldp	x23, x24, [sp, #48]
    1bbc:	ldp	x25, x26, [sp, #64]
    1bc0:	ldr	x27, [sp, #80]
    1bc4:	ldp	x29, x30, [sp], #96
    1bc8:	ret
    1bcc:	nop

0000000000001bd0 <deflate.part.0>:
    1bd0:	stp	x29, x30, [sp, #-96]!
    1bd4:	mov	x29, sp
    1bd8:	stp	x19, x20, [sp, #16]
    1bdc:	mov	x20, x0
    1be0:	ldr	x0, [x0, #24]
    1be4:	ldr	x19, [x20, #56]
    1be8:	cbz	x0, 1e00 <deflate.part.0+0x230>
    1bec:	stp	x21, x22, [sp, #32]
    1bf0:	mov	w21, w1
    1bf4:	ldr	w1, [x20, #8]
    1bf8:	cbnz	w1, 1df4 <deflate.part.0+0x224>
    1bfc:	ldr	w0, [x19, #8]
    1c00:	cmp	w21, #0x4
    1c04:	cset	w2, ne  // ne = any
    1c08:	cmp	w0, #0x29a
    1c0c:	ccmp	w2, #0x0, #0x4, eq  // eq = none
    1c10:	b.ne	1dfc <deflate.part.0+0x22c>  // b.any
    1c14:	ldr	w3, [x20, #32]
    1c18:	cbz	w3, 3344 <deflate.part.0+0x1774>
    1c1c:	ldr	x3, [x19, #40]
    1c20:	stp	x23, x24, [sp, #48]
    1c24:	ldr	w4, [x19, #76]
    1c28:	str	w21, [x19, #76]
    1c2c:	cbnz	x3, 2010 <deflate.part.0+0x440>
    1c30:	cbnz	w1, 1e14 <deflate.part.0+0x244>
    1c34:	cmp	w21, #0x5
    1c38:	lsl	w3, w4, #1
    1c3c:	lsl	w1, w21, #1
    1c40:	sub	w5, w3, #0x9
    1c44:	csinc	w1, w1, wzr, ne  // ne = any
    1c48:	cmp	w4, #0x4
    1c4c:	csel	w3, w5, w3, gt
    1c50:	cmp	w2, #0x0
    1c54:	ccmp	w1, w3, #0x0, ne  // ne = any
    1c58:	b.le	3438 <deflate.part.0+0x1868>
    1c5c:	cmp	w0, #0x29a
    1c60:	b.ne	1e1c <deflate.part.0+0x24c>  // b.any
    1c64:	ldr	w1, [x20, #8]
    1c68:	cbnz	w1, 3438 <deflate.part.0+0x1868>
    1c6c:	ldr	w0, [x19, #180]
    1c70:	cbz	w0, 20f8 <deflate.part.0+0x528>
    1c74:	ldr	w0, [x19, #196]
    1c78:	cbz	w0, 1f90 <deflate.part.0+0x3c0>
    1c7c:	ldr	w1, [x19, #200]
    1c80:	cmp	w1, #0x2
    1c84:	b.eq	2a20 <deflate.part.0+0xe50>  // b.none
    1c88:	cmp	w1, #0x3
    1c8c:	b.eq	26f8 <deflate.part.0+0xb28>  // b.none
    1c90:	adrp	x2, 0 <longest_match>
    1c94:	add	x2, x2, #0x0
    1c98:	add	x2, x2, w0, sxtw #4
    1c9c:	mov	w1, w21
    1ca0:	mov	x0, x19
    1ca4:	ldr	x2, [x2, #8]
    1ca8:	blr	x2
    1cac:	sub	w1, w0, #0x2
    1cb0:	and	w2, w0, #0xfffffffd
    1cb4:	cmp	w1, #0x1
    1cb8:	b.hi	1fac <deflate.part.0+0x3dc>  // b.pmore
    1cbc:	mov	w0, #0x29a                 	// #666
    1cc0:	str	w0, [x19, #8]
    1cc4:	cbz	w2, 2870 <deflate.part.0+0xca0>
    1cc8:	cmp	w21, #0x4
    1ccc:	b.ne	221c <deflate.part.0+0x64c>  // b.any
    1cd0:	ldr	w1, [x19, #48]
    1cd4:	mov	w0, #0x1                   	// #1
    1cd8:	cmp	w1, #0x0
    1cdc:	b.le	2f94 <deflate.part.0+0x13c4>
    1ce0:	ldr	x2, [x19, #40]
    1ce4:	cmp	w1, #0x2
    1ce8:	ldr	x1, [x19, #16]
    1cec:	add	x3, x2, #0x1
    1cf0:	ldr	x0, [x20, #96]
    1cf4:	b.eq	2fa0 <deflate.part.0+0x13d0>  // b.none
    1cf8:	lsr	x0, x0, #16
    1cfc:	str	x3, [x19, #40]
    1d00:	lsr	w3, w0, #8
    1d04:	strb	w3, [x1, x2]
    1d08:	ldr	x2, [x19, #16]
    1d0c:	ldr	x1, [x19, #40]
    1d10:	add	x3, x1, #0x1
    1d14:	str	x3, [x19, #40]
    1d18:	strb	w0, [x2, x1]
    1d1c:	ldr	x2, [x19, #16]
    1d20:	ldr	x0, [x19, #40]
    1d24:	ldrh	w1, [x20, #96]
    1d28:	add	x3, x0, #0x1
    1d2c:	str	x3, [x19, #40]
    1d30:	lsr	w3, w1, #8
    1d34:	strb	w3, [x2, x0]
    1d38:	ldr	x2, [x19, #16]
    1d3c:	ldr	x0, [x19, #40]
    1d40:	add	x3, x0, #0x1
    1d44:	str	x3, [x19, #40]
    1d48:	strb	w1, [x2, x0]
    1d4c:	ldr	x22, [x20, #56]
    1d50:	mov	x0, x22
    1d54:	bl	0 <_tr_flush_bits>
    1d58:	ldr	x21, [x22, #40]
    1d5c:	ldr	w0, [x20, #32]
    1d60:	cmp	w0, w21
    1d64:	csel	w21, w0, w21, ls  // ls = plast
    1d68:	cbz	w21, 1dc0 <deflate.part.0+0x1f0>
    1d6c:	ldr	x0, [x20, #24]
    1d70:	mov	w23, w21
    1d74:	ldr	x1, [x22, #32]
    1d78:	mov	x2, x23
    1d7c:	bl	0 <memcpy>
    1d80:	ldr	x1, [x20, #24]
    1d84:	ldr	w0, [x20, #32]
    1d88:	ldr	x2, [x22, #32]
    1d8c:	sub	w21, w0, w21
    1d90:	add	x0, x1, x23
    1d94:	str	x0, [x20, #24]
    1d98:	ldr	x1, [x20, #40]
    1d9c:	add	x2, x2, x23
    1da0:	ldr	x0, [x22, #40]
    1da4:	str	x2, [x22, #32]
    1da8:	add	x1, x1, x23
    1dac:	str	w21, [x20, #32]
    1db0:	str	x1, [x20, #40]
    1db4:	sub	x23, x0, x23
    1db8:	str	x23, [x22, #40]
    1dbc:	cbz	x23, 2cac <deflate.part.0+0x10dc>
    1dc0:	ldr	w0, [x19, #48]
    1dc4:	cmp	w0, #0x0
    1dc8:	b.le	1dd4 <deflate.part.0+0x204>
    1dcc:	neg	w0, w0
    1dd0:	str	w0, [x19, #48]
    1dd4:	ldr	x0, [x19, #40]
    1dd8:	ldp	x19, x20, [sp, #16]
    1ddc:	cmp	x0, #0x0
    1de0:	cset	w0, eq  // eq = none
    1de4:	ldp	x21, x22, [sp, #32]
    1de8:	ldp	x23, x24, [sp, #48]
    1dec:	ldp	x29, x30, [sp], #96
    1df0:	ret
    1df4:	ldr	x0, [x20]
    1df8:	cbnz	x0, 1bfc <deflate.part.0+0x2c>
    1dfc:	ldp	x21, x22, [sp, #32]
    1e00:	adrp	x1, 0 <z_errmsg>
    1e04:	mov	w0, #0xfffffffe            	// #-2
    1e08:	ldr	x1, [x1]
    1e0c:	str	x1, [x20, #48]
    1e10:	b	2004 <deflate.part.0+0x434>
    1e14:	cmp	w0, #0x29a
    1e18:	b.eq	3438 <deflate.part.0+0x1868>  // b.none
    1e1c:	cmp	w0, #0x2a
    1e20:	b.ne	1f58 <deflate.part.0+0x388>  // b.any
    1e24:	ldr	w0, [x19, #84]
    1e28:	ldr	w1, [x19, #200]
    1e2c:	lsl	w0, w0, #12
    1e30:	cmp	w1, #0x1
    1e34:	mov	w1, #0xffff8800            	// #-30720
    1e38:	add	w0, w0, w1
    1e3c:	b.le	210c <deflate.part.0+0x53c>
    1e40:	ldr	w3, [x19, #172]
    1e44:	orr	w2, w0, #0x20
    1e48:	mov	w1, #0x1085                	// #4229
    1e4c:	cmp	w3, #0x0
    1e50:	movk	w1, #0x842, lsl #16
    1e54:	csel	w0, w2, w0, ne  // ne = any
    1e58:	ldr	x3, [x19, #16]
    1e5c:	umull	x1, w0, w1
    1e60:	ldr	x2, [x19, #40]
    1e64:	lsr	x1, x1, #32
    1e68:	sub	w0, w0, w1
    1e6c:	add	x4, x2, #0x1
    1e70:	str	x4, [x19, #40]
    1e74:	add	w0, w1, w0, lsr #1
    1e78:	lsr	w0, w0, #4
    1e7c:	lsl	w1, w0, #5
    1e80:	sub	w0, w1, w0
    1e84:	add	w0, w0, #0x1f
    1e88:	lsr	w1, w0, #8
    1e8c:	strb	w1, [x3, x2]
    1e90:	ldr	x2, [x19, #16]
    1e94:	ldr	x1, [x19, #40]
    1e98:	add	x3, x1, #0x1
    1e9c:	str	x3, [x19, #40]
    1ea0:	strb	w0, [x2, x1]
    1ea4:	ldr	w0, [x19, #172]
    1ea8:	cbz	w0, 1f10 <deflate.part.0+0x340>
    1eac:	ldr	x0, [x20, #96]
    1eb0:	ldr	x2, [x19, #16]
    1eb4:	ldr	x1, [x19, #40]
    1eb8:	lsr	x0, x0, #16
    1ebc:	add	x3, x1, #0x1
    1ec0:	str	x3, [x19, #40]
    1ec4:	lsr	w3, w0, #8
    1ec8:	strb	w3, [x2, x1]
    1ecc:	ldr	x2, [x19, #16]
    1ed0:	ldr	x1, [x19, #40]
    1ed4:	add	x3, x1, #0x1
    1ed8:	str	x3, [x19, #40]
    1edc:	strb	w0, [x2, x1]
    1ee0:	ldr	x2, [x19, #16]
    1ee4:	ldr	x0, [x19, #40]
    1ee8:	ldrh	w1, [x20, #96]
    1eec:	add	x3, x0, #0x1
    1ef0:	str	x3, [x19, #40]
    1ef4:	lsr	w3, w1, #8
    1ef8:	strb	w3, [x2, x0]
    1efc:	ldr	x2, [x19, #16]
    1f00:	ldr	x0, [x19, #40]
    1f04:	add	x3, x0, #0x1
    1f08:	str	x3, [x19, #40]
    1f0c:	strb	w1, [x2, x0]
    1f10:	mov	w2, #0x0                   	// #0
    1f14:	mov	x1, #0x0                   	// #0
    1f18:	mov	x0, #0x0                   	// #0
    1f1c:	bl	0 <adler32>
    1f20:	ldr	x23, [x20, #56]
    1f24:	str	x0, [x20, #96]
    1f28:	mov	w0, #0x71                  	// #113
    1f2c:	str	w0, [x19, #8]
    1f30:	mov	x0, x23
    1f34:	bl	0 <_tr_flush_bits>
    1f38:	ldr	x22, [x23, #40]
    1f3c:	ldr	w0, [x20, #32]
    1f40:	cmp	w0, w22
    1f44:	csel	w22, w0, w22, ls  // ls = plast
    1f48:	cbnz	w22, 2098 <deflate.part.0+0x4c8>
    1f4c:	ldr	x0, [x19, #40]
    1f50:	cbnz	x0, 1ff0 <deflate.part.0+0x420>
    1f54:	ldr	w0, [x19, #8]
    1f58:	cmp	w0, #0x39
    1f5c:	b.eq	2364 <deflate.part.0+0x794>  // b.none
    1f60:	cmp	w0, #0x45
    1f64:	b.eq	26f0 <deflate.part.0+0xb20>  // b.none
    1f68:	cmp	w0, #0x49
    1f6c:	b.eq	2128 <deflate.part.0+0x558>  // b.none
    1f70:	cmp	w0, #0x5b
    1f74:	b.eq	316c <deflate.part.0+0x159c>  // b.none
    1f78:	cmp	w0, #0x67
    1f7c:	b.eq	3174 <deflate.part.0+0x15a4>  // b.none
    1f80:	ldr	w1, [x20, #8]
    1f84:	cbz	w1, 1c6c <deflate.part.0+0x9c>
    1f88:	ldr	w0, [x19, #196]
    1f8c:	cbnz	w0, 1c7c <deflate.part.0+0xac>
    1f90:	mov	w1, w21
    1f94:	mov	x0, x19
    1f98:	bl	7c8 <deflate_stored>
    1f9c:	sub	w1, w0, #0x2
    1fa0:	and	w2, w0, #0xfffffffd
    1fa4:	cmp	w1, #0x1
    1fa8:	b.ls	1cbc <deflate.part.0+0xec>  // b.plast
    1fac:	cbz	w2, 2870 <deflate.part.0+0xca0>
    1fb0:	cmp	w0, #0x1
    1fb4:	b.ne	1cc8 <deflate.part.0+0xf8>  // b.any
    1fb8:	cmp	w21, #0x1
    1fbc:	b.eq	3180 <deflate.part.0+0x15b0>  // b.none
    1fc0:	cmp	w21, #0x5
    1fc4:	b.ne	2be8 <deflate.part.0+0x1018>  // b.any
    1fc8:	ldr	x23, [x20, #56]
    1fcc:	mov	x0, x23
    1fd0:	bl	0 <_tr_flush_bits>
    1fd4:	ldr	x0, [x23, #40]
    1fd8:	ldr	w1, [x20, #32]
    1fdc:	cmp	w0, w1
    1fe0:	csel	w22, w0, w1, ls  // ls = plast
    1fe4:	cbnz	w22, 2b84 <deflate.part.0+0xfb4>
    1fe8:	cbnz	w1, 1cc8 <deflate.part.0+0xf8>
    1fec:	nop
    1ff0:	mov	w1, #0xffffffff            	// #-1
    1ff4:	mov	w0, #0x0                   	// #0
    1ff8:	ldp	x21, x22, [sp, #32]
    1ffc:	ldp	x23, x24, [sp, #48]
    2000:	str	w1, [x19, #76]
    2004:	ldp	x19, x20, [sp, #16]
    2008:	ldp	x29, x30, [sp], #96
    200c:	ret
    2010:	mov	x0, x19
    2014:	bl	0 <_tr_flush_bits>
    2018:	ldr	x0, [x19, #40]
    201c:	ldr	w1, [x20, #32]
    2020:	cmp	w0, w1
    2024:	csel	w22, w0, w1, ls  // ls = plast
    2028:	cbnz	w22, 2038 <deflate.part.0+0x468>
    202c:	cbz	w1, 1ff0 <deflate.part.0+0x420>
    2030:	ldr	w0, [x19, #8]
    2034:	b	1c5c <deflate.part.0+0x8c>
    2038:	ldr	x0, [x20, #24]
    203c:	mov	w23, w22
    2040:	ldr	x1, [x19, #32]
    2044:	mov	x2, x23
    2048:	bl	0 <memcpy>
    204c:	ldr	x2, [x20, #24]
    2050:	ldr	x3, [x19, #32]
    2054:	add	x2, x2, x23
    2058:	ldr	x0, [x20, #40]
    205c:	str	x2, [x20, #24]
    2060:	ldr	w1, [x20, #32]
    2064:	add	x3, x3, x23
    2068:	ldr	x2, [x19, #40]
    206c:	str	x3, [x19, #32]
    2070:	add	x0, x0, x23
    2074:	sub	w1, w1, w22
    2078:	str	w1, [x20, #32]
    207c:	sub	x23, x2, x23
    2080:	str	x0, [x20, #40]
    2084:	str	x23, [x19, #40]
    2088:	cbnz	x23, 202c <deflate.part.0+0x45c>
    208c:	ldr	x0, [x19, #16]
    2090:	str	x0, [x19, #32]
    2094:	b	202c <deflate.part.0+0x45c>
    2098:	ldr	x0, [x20, #24]
    209c:	mov	w24, w22
    20a0:	ldr	x1, [x23, #32]
    20a4:	mov	x2, x24
    20a8:	bl	0 <memcpy>
    20ac:	ldr	x2, [x20, #24]
    20b0:	ldr	x3, [x23, #32]
    20b4:	add	x2, x2, x24
    20b8:	ldr	x1, [x20, #40]
    20bc:	str	x2, [x20, #24]
    20c0:	ldr	w0, [x20, #32]
    20c4:	add	x3, x3, x24
    20c8:	ldr	x2, [x23, #40]
    20cc:	str	x3, [x23, #32]
    20d0:	add	x1, x1, x24
    20d4:	sub	w0, w0, w22
    20d8:	str	w0, [x20, #32]
    20dc:	sub	x24, x2, x24
    20e0:	str	x1, [x20, #40]
    20e4:	str	x24, [x23, #40]
    20e8:	cbnz	x24, 1f4c <deflate.part.0+0x37c>
    20ec:	ldr	x0, [x23, #16]
    20f0:	str	x0, [x23, #32]
    20f4:	b	1f4c <deflate.part.0+0x37c>
    20f8:	cbz	w21, 221c <deflate.part.0+0x64c>
    20fc:	ldr	w0, [x19, #8]
    2100:	cmp	w0, #0x29a
    2104:	b.ne	1c74 <deflate.part.0+0xa4>  // b.any
    2108:	b	1cc8 <deflate.part.0+0xf8>
    210c:	ldr	w1, [x19, #196]
    2110:	cmp	w1, #0x1
    2114:	b.le	1e40 <deflate.part.0+0x270>
    2118:	cmp	w1, #0x5
    211c:	b.gt	2c38 <deflate.part.0+0x1068>
    2120:	orr	w0, w0, #0x40
    2124:	b	1e40 <deflate.part.0+0x270>
    2128:	ldr	x3, [x19, #56]
    212c:	ldr	x0, [x3, #40]
    2130:	cbz	x0, 226c <deflate.part.0+0x69c>
    2134:	ldr	x1, [x19, #40]
    2138:	mov	x2, x1
    213c:	b	2170 <deflate.part.0+0x5a0>
    2140:	ldr	x0, [x19, #64]
    2144:	add	x4, x2, #0x1
    2148:	ldr	x5, [x3, #40]
    214c:	add	x3, x0, #0x1
    2150:	str	x3, [x19, #64]
    2154:	ldr	x3, [x19, #16]
    2158:	ldrb	w0, [x5, x0]
    215c:	str	x4, [x19, #40]
    2160:	strb	w0, [x3, x2]
    2164:	cbz	w0, 2234 <deflate.part.0+0x664>
    2168:	ldr	x2, [x19, #40]
    216c:	ldr	x3, [x19, #56]
    2170:	ldr	x0, [x19, #24]
    2174:	cmp	x0, x2
    2178:	b.ne	2140 <deflate.part.0+0x570>  // b.any
    217c:	ldr	w0, [x3, #68]
    2180:	cmp	w0, #0x0
    2184:	ccmp	x1, x2, #0x2, ne  // ne = any
    2188:	b.cc	288c <deflate.part.0+0xcbc>  // b.lo, b.ul, b.last
    218c:	ldr	x23, [x20, #56]
    2190:	mov	x0, x23
    2194:	bl	0 <_tr_flush_bits>
    2198:	ldr	x22, [x23, #40]
    219c:	ldr	w0, [x20, #32]
    21a0:	cmp	w0, w22
    21a4:	csel	w22, w0, w22, ls  // ls = plast
    21a8:	cbz	w22, 2208 <deflate.part.0+0x638>
    21ac:	ldr	x0, [x20, #24]
    21b0:	mov	w24, w22
    21b4:	ldr	x1, [x23, #32]
    21b8:	mov	x2, x24
    21bc:	bl	0 <memcpy>
    21c0:	ldr	x2, [x20, #24]
    21c4:	ldr	x3, [x23, #32]
    21c8:	add	x2, x2, x24
    21cc:	ldr	x1, [x20, #40]
    21d0:	str	x2, [x20, #24]
    21d4:	ldr	w0, [x20, #32]
    21d8:	add	x3, x3, x24
    21dc:	ldr	x2, [x23, #40]
    21e0:	str	x3, [x23, #32]
    21e4:	add	x1, x1, x24
    21e8:	sub	w0, w0, w22
    21ec:	str	w0, [x20, #32]
    21f0:	sub	x24, x2, x24
    21f4:	str	x1, [x20, #40]
    21f8:	str	x24, [x23, #40]
    21fc:	cbnz	x24, 2208 <deflate.part.0+0x638>
    2200:	ldr	x0, [x23, #16]
    2204:	str	x0, [x23, #32]
    2208:	ldr	x2, [x19, #40]
    220c:	mov	x1, #0x0                   	// #0
    2210:	cbnz	x2, 1ff0 <deflate.part.0+0x420>
    2214:	ldr	x3, [x19, #56]
    2218:	b	2140 <deflate.part.0+0x570>
    221c:	mov	w0, #0x0                   	// #0
    2220:	ldp	x19, x20, [sp, #16]
    2224:	ldp	x21, x22, [sp, #32]
    2228:	ldp	x23, x24, [sp, #48]
    222c:	ldp	x29, x30, [sp], #96
    2230:	ret
    2234:	ldr	x3, [x19, #56]
    2238:	ldr	w0, [x3, #68]
    223c:	cbz	w0, 2268 <deflate.part.0+0x698>
    2240:	ldr	x2, [x19, #40]
    2244:	cmp	x2, x1
    2248:	b.ls	2268 <deflate.part.0+0x698>  // b.plast
    224c:	ldr	x3, [x19, #16]
    2250:	sub	w2, w2, w1
    2254:	ldr	x0, [x20, #96]
    2258:	add	x1, x3, x1
    225c:	bl	0 <crc32>
    2260:	ldr	x3, [x19, #56]
    2264:	str	x0, [x20, #96]
    2268:	str	xzr, [x19, #64]
    226c:	mov	w0, #0x5b                  	// #91
    2270:	str	w0, [x19, #8]
    2274:	ldr	x0, [x3, #56]
    2278:	cbz	x0, 2a18 <deflate.part.0+0xe48>
    227c:	ldr	x1, [x19, #40]
    2280:	mov	x2, x1
    2284:	b	22b8 <deflate.part.0+0x6e8>
    2288:	ldr	x0, [x19, #64]
    228c:	add	x4, x2, #0x1
    2290:	ldr	x5, [x3, #56]
    2294:	add	x3, x0, #0x1
    2298:	str	x3, [x19, #64]
    229c:	ldr	x3, [x19, #16]
    22a0:	ldrb	w0, [x5, x0]
    22a4:	str	x4, [x19, #40]
    22a8:	strb	w0, [x3, x2]
    22ac:	cbz	w0, 28c4 <deflate.part.0+0xcf4>
    22b0:	ldr	x2, [x19, #40]
    22b4:	ldr	x3, [x19, #56]
    22b8:	ldr	x0, [x19, #24]
    22bc:	cmp	x0, x2
    22c0:	b.ne	2288 <deflate.part.0+0x6b8>  // b.any
    22c4:	ldr	w0, [x3, #68]
    22c8:	cmp	w0, #0x0
    22cc:	ccmp	x1, x2, #0x2, ne  // ne = any
    22d0:	b.cc	28a8 <deflate.part.0+0xcd8>  // b.lo, b.ul, b.last
    22d4:	ldr	x23, [x20, #56]
    22d8:	mov	x0, x23
    22dc:	bl	0 <_tr_flush_bits>
    22e0:	ldr	x22, [x23, #40]
    22e4:	ldr	w0, [x20, #32]
    22e8:	cmp	w0, w22
    22ec:	csel	w22, w0, w22, ls  // ls = plast
    22f0:	cbz	w22, 2350 <deflate.part.0+0x780>
    22f4:	ldr	x0, [x20, #24]
    22f8:	mov	w24, w22
    22fc:	ldr	x1, [x23, #32]
    2300:	mov	x2, x24
    2304:	bl	0 <memcpy>
    2308:	ldr	x2, [x20, #24]
    230c:	ldr	x3, [x23, #32]
    2310:	add	x2, x2, x24
    2314:	ldr	x1, [x20, #40]
    2318:	str	x2, [x20, #24]
    231c:	ldr	w0, [x20, #32]
    2320:	add	x3, x3, x24
    2324:	ldr	x2, [x23, #40]
    2328:	str	x3, [x23, #32]
    232c:	add	x1, x1, x24
    2330:	sub	w0, w0, w22
    2334:	str	w0, [x20, #32]
    2338:	sub	x24, x2, x24
    233c:	str	x1, [x20, #40]
    2340:	str	x24, [x23, #40]
    2344:	cbnz	x24, 2350 <deflate.part.0+0x780>
    2348:	ldr	x0, [x23, #16]
    234c:	str	x0, [x23, #32]
    2350:	ldr	x2, [x19, #40]
    2354:	mov	x1, #0x0                   	// #0
    2358:	cbnz	x2, 1ff0 <deflate.part.0+0x420>
    235c:	ldr	x3, [x19, #56]
    2360:	b	2288 <deflate.part.0+0x6b8>
    2364:	mov	w2, #0x0                   	// #0
    2368:	mov	x1, #0x0                   	// #0
    236c:	mov	x0, #0x0                   	// #0
    2370:	bl	0 <crc32>
    2374:	ldr	x1, [x19, #16]
    2378:	str	x0, [x20, #96]
    237c:	ldr	x0, [x19, #40]
    2380:	mov	w4, #0x1f                  	// #31
    2384:	mov	w3, #0xffffff8b            	// #-117
    2388:	mov	w2, #0x8                   	// #8
    238c:	add	x5, x0, #0x1
    2390:	str	x5, [x19, #40]
    2394:	strb	w4, [x1, x0]
    2398:	ldr	x1, [x19, #16]
    239c:	ldr	x0, [x19, #40]
    23a0:	add	x4, x0, #0x1
    23a4:	str	x4, [x19, #40]
    23a8:	strb	w3, [x1, x0]
    23ac:	ldr	x1, [x19, #16]
    23b0:	ldr	x0, [x19, #40]
    23b4:	add	x3, x0, #0x1
    23b8:	str	x3, [x19, #40]
    23bc:	strb	w2, [x1, x0]
    23c0:	ldr	x1, [x19, #56]
    23c4:	cbz	x1, 2e4c <deflate.part.0+0x127c>
    23c8:	ldr	w0, [x1]
    23cc:	mov	w2, #0x8                   	// #8
    23d0:	ldr	w4, [x1, #68]
    23d4:	mov	w7, #0xc                   	// #12
    23d8:	cmp	w0, #0x0
    23dc:	ldr	x5, [x1, #24]
    23e0:	cset	w0, ne  // ne = any
    23e4:	ldr	x6, [x1, #40]
    23e8:	cmp	w4, #0x0
    23ec:	add	w3, w0, #0x2
    23f0:	mov	w4, #0x4                   	// #4
    23f4:	csel	w0, w0, w3, eq  // eq = none
    23f8:	cmp	x5, #0x0
    23fc:	csel	w4, wzr, w4, eq  // eq = none
    2400:	csel	w2, w2, w7, eq  // eq = none
    2404:	cmp	x6, #0x0
    2408:	mov	w3, #0x2                   	// #2
    240c:	csel	w2, w2, w4, ne  // ne = any
    2410:	ldr	x5, [x19, #16]
    2414:	add	w0, w0, w2
    2418:	ldr	x4, [x19, #40]
    241c:	add	w2, w0, #0x10
    2420:	ldr	x6, [x1, #56]
    2424:	and	w1, w2, #0xff
    2428:	add	x2, x4, #0x1
    242c:	str	x2, [x19, #40]
    2430:	cmp	x6, #0x0
    2434:	csel	w0, w0, w1, eq  // eq = none
    2438:	strb	w0, [x5, x4]
    243c:	ldr	x2, [x19, #56]
    2440:	ldr	x1, [x19, #16]
    2444:	ldr	x0, [x19, #40]
    2448:	ldr	x2, [x2, #8]
    244c:	add	x4, x0, #0x1
    2450:	str	x4, [x19, #40]
    2454:	strb	w2, [x1, x0]
    2458:	ldr	x0, [x19, #56]
    245c:	ldr	x2, [x19, #16]
    2460:	ldr	x0, [x0, #8]
    2464:	ldr	x1, [x19, #40]
    2468:	lsr	x0, x0, #8
    246c:	add	x4, x1, #0x1
    2470:	str	x4, [x19, #40]
    2474:	strb	w0, [x2, x1]
    2478:	ldr	x0, [x19, #56]
    247c:	ldr	x2, [x19, #16]
    2480:	ldr	x0, [x0, #8]
    2484:	ldr	x1, [x19, #40]
    2488:	lsr	x0, x0, #16
    248c:	add	x4, x1, #0x1
    2490:	str	x4, [x19, #40]
    2494:	strb	w0, [x2, x1]
    2498:	ldr	x0, [x19, #56]
    249c:	ldr	x2, [x19, #16]
    24a0:	ldr	x0, [x0, #8]
    24a4:	ldr	x1, [x19, #40]
    24a8:	lsr	x0, x0, #24
    24ac:	add	x4, x1, #0x1
    24b0:	str	x4, [x19, #40]
    24b4:	strb	w0, [x2, x1]
    24b8:	ldr	w0, [x19, #196]
    24bc:	cmp	w0, #0x9
    24c0:	b.eq	24d8 <deflate.part.0+0x908>  // b.none
    24c4:	ldr	w1, [x19, #200]
    24c8:	cmp	w1, #0x1
    24cc:	ccmp	w0, #0x1, #0x4, le
    24d0:	cset	w3, le
    24d4:	lsl	w3, w3, #2
    24d8:	ldr	x1, [x19, #16]
    24dc:	ldr	x0, [x19, #40]
    24e0:	add	x2, x0, #0x1
    24e4:	str	x2, [x19, #40]
    24e8:	strb	w3, [x1, x0]
    24ec:	ldr	x2, [x19, #56]
    24f0:	ldr	x1, [x19, #16]
    24f4:	ldr	x0, [x19, #40]
    24f8:	ldr	w2, [x2, #20]
    24fc:	add	x3, x0, #0x1
    2500:	str	x3, [x19, #40]
    2504:	strb	w2, [x1, x0]
    2508:	ldr	x3, [x19, #56]
    250c:	ldr	x0, [x3, #24]
    2510:	cbz	x0, 2550 <deflate.part.0+0x980>
    2514:	ldr	x1, [x19, #16]
    2518:	ldr	x0, [x19, #40]
    251c:	ldr	w2, [x3, #32]
    2520:	add	x3, x0, #0x1
    2524:	str	x3, [x19, #40]
    2528:	strb	w2, [x1, x0]
    252c:	ldr	x0, [x19, #56]
    2530:	ldr	x2, [x19, #16]
    2534:	ldr	x1, [x19, #40]
    2538:	ldr	w0, [x0, #32]
    253c:	add	x3, x1, #0x1
    2540:	str	x3, [x19, #40]
    2544:	lsr	w0, w0, #8
    2548:	strb	w0, [x2, x1]
    254c:	ldr	x3, [x19, #56]
    2550:	ldr	w0, [x3, #68]
    2554:	cbnz	w0, 306c <deflate.part.0+0x149c>
    2558:	mov	w0, #0x45                  	// #69
    255c:	str	w0, [x19, #8]
    2560:	str	xzr, [x19, #64]
    2564:	ldr	x4, [x3, #24]
    2568:	cbz	x4, 26e4 <deflate.part.0+0xb14>
    256c:	ldr	x1, [x19, #64]
    2570:	stp	x25, x26, [sp, #64]
    2574:	ldrh	w24, [x3, #32]
    2578:	ldr	x26, [x19, #40]
    257c:	sub	w22, w24, w1
    2580:	ldr	x3, [x19, #24]
    2584:	add	x0, x26, x22
    2588:	sub	w24, w24, w1
    258c:	cmp	x0, x3
    2590:	b.ls	26a8 <deflate.part.0+0xad8>  // b.plast
    2594:	str	x27, [sp, #80]
    2598:	b	264c <deflate.part.0+0xa7c>
    259c:	ldr	x2, [x19, #64]
    25a0:	ldr	x27, [x20, #56]
    25a4:	add	x2, x2, x23
    25a8:	str	x2, [x19, #64]
    25ac:	mov	x0, x27
    25b0:	bl	0 <_tr_flush_bits>
    25b4:	ldr	x23, [x27, #40]
    25b8:	ldr	w0, [x20, #32]
    25bc:	cmp	w0, w23
    25c0:	csel	w23, w0, w23, ls  // ls = plast
    25c4:	cbz	w23, 2624 <deflate.part.0+0xa54>
    25c8:	ldr	x0, [x20, #24]
    25cc:	mov	w26, w23
    25d0:	ldr	x1, [x27, #32]
    25d4:	mov	x2, x26
    25d8:	bl	0 <memcpy>
    25dc:	ldr	x2, [x20, #24]
    25e0:	ldr	x3, [x27, #32]
    25e4:	add	x2, x2, x26
    25e8:	ldr	x1, [x20, #40]
    25ec:	str	x2, [x20, #24]
    25f0:	ldr	w0, [x20, #32]
    25f4:	add	x3, x3, x26
    25f8:	ldr	x2, [x27, #40]
    25fc:	str	x3, [x27, #32]
    2600:	add	x1, x1, x26
    2604:	sub	w0, w0, w23
    2608:	str	w0, [x20, #32]
    260c:	sub	x26, x2, x26
    2610:	str	x1, [x20, #40]
    2614:	str	x26, [x27, #40]
    2618:	cbnz	x26, 2624 <deflate.part.0+0xa54>
    261c:	ldr	x0, [x27, #16]
    2620:	str	x0, [x27, #32]
    2624:	ldr	x26, [x19, #40]
    2628:	sub	w3, w25, w22
    262c:	add	w22, w24, w3
    2630:	mov	x24, x22
    2634:	cbnz	x26, 29f8 <deflate.part.0+0xe28>
    2638:	ldp	x0, x1, [x19, #56]
    263c:	ldr	x3, [x19, #24]
    2640:	cmp	x3, w22, uxtw
    2644:	ldr	x4, [x0, #24]
    2648:	b.cs	26a4 <deflate.part.0+0xad4>  // b.hs, b.nlast
    264c:	ldr	x0, [x19, #16]
    2650:	sub	w23, w3, w26
    2654:	mov	x2, x23
    2658:	add	x1, x4, x1
    265c:	mov	w22, w3
    2660:	add	x0, x0, x26
    2664:	bl	0 <memcpy>
    2668:	mov	w25, w26
    266c:	ldr	x0, [x19, #56]
    2670:	ldr	x2, [x19, #24]
    2674:	ldr	w0, [x0, #68]
    2678:	str	x2, [x19, #40]
    267c:	cmp	w0, #0x0
    2680:	ccmp	x2, x26, #0x0, ne  // ne = any
    2684:	b.ls	259c <deflate.part.0+0x9cc>  // b.plast
    2688:	ldr	x0, [x20, #96]
    268c:	sub	w2, w2, w26
    2690:	ldr	x1, [x19, #16]
    2694:	add	x1, x1, x26
    2698:	bl	0 <crc32>
    269c:	str	x0, [x20, #96]
    26a0:	b	259c <deflate.part.0+0x9cc>
    26a4:	ldr	x27, [sp, #80]
    26a8:	mov	x2, x22
    26ac:	ldr	x0, [x19, #16]
    26b0:	add	x1, x4, x1
    26b4:	add	x0, x0, x26
    26b8:	bl	0 <memcpy>
    26bc:	ldr	x3, [x19, #56]
    26c0:	ldr	x2, [x19, #40]
    26c4:	ldr	w0, [x3, #68]
    26c8:	add	x2, x22, x2
    26cc:	str	x2, [x19, #40]
    26d0:	cmp	w0, #0x0
    26d4:	ccmp	x2, x26, #0x0, ne  // ne = any
    26d8:	b.hi	318c <deflate.part.0+0x15bc>  // b.pmore
    26dc:	ldp	x25, x26, [sp, #64]
    26e0:	str	xzr, [x19, #64]
    26e4:	mov	w0, #0x49                  	// #73
    26e8:	str	w0, [x19, #8]
    26ec:	b	212c <deflate.part.0+0x55c>
    26f0:	ldr	x3, [x19, #56]
    26f4:	b	2564 <deflate.part.0+0x994>
    26f8:	adrp	x23, 0 <_length_code>
    26fc:	adrp	x22, 0 <_dist_code>
    2700:	add	x23, x23, #0x0
    2704:	add	x22, x22, #0x0
    2708:	stp	x25, x26, [sp, #64]
    270c:	str	x27, [sp, #80]
    2710:	ldr	w0, [x19, #180]
    2714:	mov	w24, #0x102                 	// #258
    2718:	cmp	w0, #0x102
    271c:	b.ls	2cdc <deflate.part.0+0x110c>  // b.plast
    2720:	ldr	w1, [x19, #172]
    2724:	ldr	x2, [x19, #96]
    2728:	mov	w3, w1
    272c:	str	wzr, [x19, #160]
    2730:	cbz	w1, 2750 <deflate.part.0+0xb80>
    2734:	sub	x1, x3, #0x1
    2738:	add	x4, x2, x1
    273c:	ldrb	w5, [x2, x1]
    2740:	ldrb	w1, [x4, #1]
    2744:	cmp	w1, w5
    2748:	b.eq	2d14 <deflate.part.0+0x1144>  // b.none
    274c:	nop
    2750:	ldr	w0, [x19, #5900]
    2754:	ldr	x1, [x19, #5904]
    2758:	add	w4, w0, #0x1
    275c:	ldrb	w2, [x2, x3]
    2760:	ldr	x3, [x19, #5888]
    2764:	strh	wzr, [x1, w0, uxtw #1]
    2768:	add	x1, x19, w2, uxtb #2
    276c:	str	w4, [x19, #5900]
    2770:	strb	w2, [x3, w0, uxtw]
    2774:	ldrh	w0, [x1, #212]
    2778:	add	w0, w0, #0x1
    277c:	strh	w0, [x1, #212]
    2780:	ldr	w0, [x19, #5896]
    2784:	ldr	w1, [x19, #5900]
    2788:	sub	w0, w0, #0x1
    278c:	ldr	w3, [x19, #172]
    2790:	cmp	w0, w1
    2794:	ldr	w0, [x19, #180]
    2798:	cset	w1, eq  // eq = none
    279c:	add	w3, w3, #0x1
    27a0:	sub	w0, w0, #0x1
    27a4:	str	w3, [x19, #172]
    27a8:	str	w0, [x19, #180]
    27ac:	cbz	w1, 2718 <deflate.part.0+0xb48>
    27b0:	ldr	x2, [x19, #152]
    27b4:	mov	x1, #0x0                   	// #0
    27b8:	tbnz	x2, #63, 27c4 <deflate.part.0+0xbf4>
    27bc:	ldr	x1, [x19, #96]
    27c0:	add	x1, x1, w2, uxtw
    27c4:	sub	x2, x3, x2
    27c8:	mov	x0, x19
    27cc:	mov	w3, #0x0                   	// #0
    27d0:	bl	0 <_tr_flush_block>
    27d4:	ldr	x24, [x19]
    27d8:	ldr	w0, [x19, #172]
    27dc:	ldr	x26, [x24, #56]
    27e0:	str	x0, [x19, #152]
    27e4:	mov	x0, x26
    27e8:	bl	0 <_tr_flush_bits>
    27ec:	ldr	x0, [x26, #40]
    27f0:	ldr	w25, [x24, #32]
    27f4:	cmp	w25, w0
    27f8:	csel	w25, w25, w0, ls  // ls = plast
    27fc:	cbz	w25, 285c <deflate.part.0+0xc8c>
    2800:	ldr	x0, [x24, #24]
    2804:	mov	w27, w25
    2808:	ldr	x1, [x26, #32]
    280c:	mov	x2, x27
    2810:	bl	0 <memcpy>
    2814:	ldr	x1, [x24, #24]
    2818:	ldr	w0, [x24, #32]
    281c:	ldr	x2, [x26, #32]
    2820:	sub	w25, w0, w25
    2824:	add	x0, x1, x27
    2828:	str	x0, [x24, #24]
    282c:	ldr	x1, [x24, #40]
    2830:	add	x2, x2, x27
    2834:	ldr	x0, [x26, #40]
    2838:	str	x2, [x26, #32]
    283c:	add	x1, x1, x27
    2840:	str	w25, [x24, #32]
    2844:	str	x1, [x24, #40]
    2848:	sub	x27, x0, x27
    284c:	str	x27, [x26, #40]
    2850:	cbnz	x27, 285c <deflate.part.0+0xc8c>
    2854:	ldr	x0, [x26, #16]
    2858:	str	x0, [x26, #32]
    285c:	ldr	x0, [x19]
    2860:	ldr	w0, [x0, #32]
    2864:	cbnz	w0, 2710 <deflate.part.0+0xb40>
    2868:	ldp	x25, x26, [sp, #64]
    286c:	ldr	x27, [sp, #80]
    2870:	ldr	w0, [x20, #32]
    2874:	cbnz	w0, 221c <deflate.part.0+0x64c>
    2878:	mov	w1, #0xffffffff            	// #-1
    287c:	ldp	x21, x22, [sp, #32]
    2880:	ldp	x23, x24, [sp, #48]
    2884:	str	w1, [x19, #76]
    2888:	b	2004 <deflate.part.0+0x434>
    288c:	ldr	x3, [x19, #16]
    2890:	sub	w2, w2, w1
    2894:	ldr	x0, [x20, #96]
    2898:	add	x1, x3, x1
    289c:	bl	0 <crc32>
    28a0:	str	x0, [x20, #96]
    28a4:	b	218c <deflate.part.0+0x5bc>
    28a8:	ldr	x3, [x19, #16]
    28ac:	sub	w2, w2, w1
    28b0:	ldr	x0, [x20, #96]
    28b4:	add	x1, x3, x1
    28b8:	bl	0 <crc32>
    28bc:	str	x0, [x20, #96]
    28c0:	b	22d4 <deflate.part.0+0x704>
    28c4:	ldr	x0, [x19, #56]
    28c8:	ldr	w0, [x0, #68]
    28cc:	cbz	w0, 2968 <deflate.part.0+0xd98>
    28d0:	ldr	x2, [x19, #40]
    28d4:	cmp	x2, x1
    28d8:	b.hi	2cb8 <deflate.part.0+0x10e8>  // b.pmore
    28dc:	mov	w1, #0x67                  	// #103
    28e0:	str	w1, [x19, #8]
    28e4:	cbz	w0, 2968 <deflate.part.0+0xd98>
    28e8:	ldr	x0, [x19, #40]
    28ec:	ldr	x1, [x19, #24]
    28f0:	add	x2, x0, #0x2
    28f4:	cmp	x2, x1
    28f8:	b.ls	2924 <deflate.part.0+0xd54>  // b.plast
    28fc:	ldr	x23, [x20, #56]
    2900:	mov	x0, x23
    2904:	bl	0 <_tr_flush_bits>
    2908:	ldr	x0, [x23, #40]
    290c:	ldr	w22, [x20, #32]
    2910:	cmp	w22, w0
    2914:	csel	w22, w22, w0, ls  // ls = plast
    2918:	cbnz	w22, 2c4c <deflate.part.0+0x107c>
    291c:	ldr	x0, [x19, #40]
    2920:	cbnz	x0, 1ff0 <deflate.part.0+0x420>
    2924:	ldr	x1, [x19, #16]
    2928:	add	x3, x0, #0x1
    292c:	ldr	x2, [x20, #96]
    2930:	str	x3, [x19, #40]
    2934:	strb	w2, [x1, x0]
    2938:	mov	w2, #0x0                   	// #0
    293c:	mov	x1, #0x0                   	// #0
    2940:	mov	x0, #0x0                   	// #0
    2944:	ldr	x3, [x20, #96]
    2948:	ldr	x5, [x19, #16]
    294c:	ldr	x4, [x19, #40]
    2950:	lsr	x3, x3, #8
    2954:	add	x6, x4, #0x1
    2958:	str	x6, [x19, #40]
    295c:	strb	w3, [x5, x4]
    2960:	bl	0 <crc32>
    2964:	str	x0, [x20, #96]
    2968:	ldr	x23, [x20, #56]
    296c:	mov	w0, #0x71                  	// #113
    2970:	str	w0, [x19, #8]
    2974:	mov	x0, x23
    2978:	bl	0 <_tr_flush_bits>
    297c:	ldr	x22, [x23, #40]
    2980:	ldr	w0, [x20, #32]
    2984:	cmp	w0, w22
    2988:	csel	w22, w0, w22, ls  // ls = plast
    298c:	cbz	w22, 29ec <deflate.part.0+0xe1c>
    2990:	ldr	x0, [x20, #24]
    2994:	mov	w24, w22
    2998:	ldr	x1, [x23, #32]
    299c:	mov	x2, x24
    29a0:	bl	0 <memcpy>
    29a4:	ldr	x2, [x20, #24]
    29a8:	ldr	x3, [x23, #32]
    29ac:	add	x2, x2, x24
    29b0:	ldr	x1, [x20, #40]
    29b4:	str	x2, [x20, #24]
    29b8:	ldr	w0, [x20, #32]
    29bc:	add	x3, x3, x24
    29c0:	ldr	x2, [x23, #40]
    29c4:	str	x3, [x23, #32]
    29c8:	add	x1, x1, x24
    29cc:	sub	w0, w0, w22
    29d0:	str	w0, [x20, #32]
    29d4:	sub	x24, x2, x24
    29d8:	str	x1, [x20, #40]
    29dc:	str	x24, [x23, #40]
    29e0:	cbnz	x24, 29ec <deflate.part.0+0xe1c>
    29e4:	ldr	x0, [x23, #16]
    29e8:	str	x0, [x23, #32]
    29ec:	ldr	x0, [x19, #40]
    29f0:	cbz	x0, 1f80 <deflate.part.0+0x3b0>
    29f4:	b	1ff0 <deflate.part.0+0x420>
    29f8:	mov	w1, #0xffffffff            	// #-1
    29fc:	mov	w0, #0x0                   	// #0
    2a00:	ldp	x21, x22, [sp, #32]
    2a04:	ldp	x23, x24, [sp, #48]
    2a08:	ldp	x25, x26, [sp, #64]
    2a0c:	ldr	x27, [sp, #80]
    2a10:	str	w1, [x19, #76]
    2a14:	b	2004 <deflate.part.0+0x434>
    2a18:	ldr	w0, [x3, #68]
    2a1c:	b	28dc <deflate.part.0+0xd0c>
    2a20:	stp	x25, x26, [sp, #64]
    2a24:	ldr	w0, [x19, #180]
    2a28:	cbz	w0, 2b54 <deflate.part.0+0xf84>
    2a2c:	ldr	w2, [x19, #172]
    2a30:	ldr	x3, [x19, #96]
    2a34:	str	wzr, [x19, #160]
    2a38:	ldr	w0, [x19, #5900]
    2a3c:	ldr	x1, [x19, #5904]
    2a40:	add	w4, w0, #0x1
    2a44:	ldrb	w2, [x3, x2]
    2a48:	ldr	x3, [x19, #5888]
    2a4c:	strh	wzr, [x1, w0, uxtw #1]
    2a50:	add	x1, x19, w2, uxtb #2
    2a54:	str	w4, [x19, #5900]
    2a58:	strb	w2, [x3, w0, uxtw]
    2a5c:	ldrh	w0, [x1, #212]
    2a60:	add	w0, w0, #0x1
    2a64:	strh	w0, [x1, #212]
    2a68:	ldr	w3, [x19, #172]
    2a6c:	ldr	w0, [x19, #180]
    2a70:	ldr	w1, [x19, #5896]
    2a74:	add	w3, w3, #0x1
    2a78:	ldr	w2, [x19, #5900]
    2a7c:	sub	w0, w0, #0x1
    2a80:	str	w3, [x19, #172]
    2a84:	sub	w1, w1, #0x1
    2a88:	str	w0, [x19, #180]
    2a8c:	cmp	w2, w1
    2a90:	b.ne	2a28 <deflate.part.0+0xe58>  // b.any
    2a94:	ldr	x2, [x19, #152]
    2a98:	mov	x1, #0x0                   	// #0
    2a9c:	tbnz	x2, #63, 2aa8 <deflate.part.0+0xed8>
    2aa0:	ldr	x1, [x19, #96]
    2aa4:	add	x1, x1, w2, uxtw
    2aa8:	sub	x2, x3, x2
    2aac:	mov	x0, x19
    2ab0:	mov	w3, #0x0                   	// #0
    2ab4:	bl	0 <_tr_flush_block>
    2ab8:	ldr	x22, [x19]
    2abc:	ldr	w0, [x19, #172]
    2ac0:	ldr	x24, [x22, #56]
    2ac4:	str	x0, [x19, #152]
    2ac8:	mov	x0, x24
    2acc:	bl	0 <_tr_flush_bits>
    2ad0:	ldr	x23, [x24, #40]
    2ad4:	ldr	w0, [x22, #32]
    2ad8:	cmp	w0, w23
    2adc:	csel	w23, w0, w23, ls  // ls = plast
    2ae0:	cbz	w23, 2b40 <deflate.part.0+0xf70>
    2ae4:	ldr	x0, [x22, #24]
    2ae8:	mov	w25, w23
    2aec:	ldr	x1, [x24, #32]
    2af0:	mov	x2, x25
    2af4:	bl	0 <memcpy>
    2af8:	ldr	x2, [x22, #24]
    2afc:	ldr	x3, [x24, #32]
    2b00:	add	x2, x2, x25
    2b04:	ldr	x1, [x22, #40]
    2b08:	str	x2, [x22, #24]
    2b0c:	ldr	w0, [x22, #32]
    2b10:	add	x3, x3, x25
    2b14:	ldr	x2, [x24, #40]
    2b18:	str	x3, [x24, #32]
    2b1c:	add	x1, x1, x25
    2b20:	sub	w0, w0, w23
    2b24:	str	w0, [x22, #32]
    2b28:	sub	x25, x2, x25
    2b2c:	str	x1, [x22, #40]
    2b30:	str	x25, [x24, #40]
    2b34:	cbnz	x25, 2b40 <deflate.part.0+0xf70>
    2b38:	ldr	x0, [x24, #16]
    2b3c:	str	x0, [x24, #32]
    2b40:	ldr	x0, [x19]
    2b44:	ldr	w0, [x0, #32]
    2b48:	cbnz	w0, 2a24 <deflate.part.0+0xe54>
    2b4c:	ldp	x25, x26, [sp, #64]
    2b50:	b	2870 <deflate.part.0+0xca0>
    2b54:	mov	x0, x19
    2b58:	bl	1e8 <fill_window>
    2b5c:	ldr	w0, [x19, #180]
    2b60:	cbnz	w0, 2a2c <deflate.part.0+0xe5c>
    2b64:	cbz	w21, 2b4c <deflate.part.0+0xf7c>
    2b68:	str	wzr, [x19, #5932]
    2b6c:	cmp	w21, #0x4
    2b70:	b.eq	31ac <deflate.part.0+0x15dc>  // b.none
    2b74:	ldr	w0, [x19, #5900]
    2b78:	cbnz	w0, 3278 <deflate.part.0+0x16a8>
    2b7c:	ldp	x25, x26, [sp, #64]
    2b80:	b	1fb8 <deflate.part.0+0x3e8>
    2b84:	ldr	x0, [x20, #24]
    2b88:	mov	w24, w22
    2b8c:	ldr	x1, [x23, #32]
    2b90:	mov	x2, x24
    2b94:	bl	0 <memcpy>
    2b98:	ldr	x0, [x20, #24]
    2b9c:	ldr	x3, [x23, #32]
    2ba0:	add	x0, x0, x24
    2ba4:	ldr	x2, [x20, #40]
    2ba8:	str	x0, [x20, #24]
    2bac:	ldr	w1, [x20, #32]
    2bb0:	add	x3, x3, x24
    2bb4:	ldr	x0, [x23, #40]
    2bb8:	str	x3, [x23, #32]
    2bbc:	add	x2, x2, x24
    2bc0:	sub	w1, w1, w22
    2bc4:	str	w1, [x20, #32]
    2bc8:	sub	x24, x0, x24
    2bcc:	str	x2, [x20, #40]
    2bd0:	str	x24, [x23, #40]
    2bd4:	cbnz	x24, 1fe8 <deflate.part.0+0x418>
    2bd8:	ldr	x0, [x23, #16]
    2bdc:	str	x0, [x23, #32]
    2be0:	cbnz	w1, 1cc8 <deflate.part.0+0xf8>
    2be4:	b	1ff0 <deflate.part.0+0x420>
    2be8:	mov	x0, x19
    2bec:	mov	w3, #0x0                   	// #0
    2bf0:	mov	x2, #0x0                   	// #0
    2bf4:	mov	x1, #0x0                   	// #0
    2bf8:	bl	0 <_tr_stored_block>
    2bfc:	cmp	w21, #0x3
    2c00:	b.ne	1fc8 <deflate.part.0+0x3f8>  // b.any
    2c04:	ldr	w2, [x19, #132]
    2c08:	mov	w1, #0x0                   	// #0
    2c0c:	ldr	x0, [x19, #120]
    2c10:	sub	w2, w2, #0x1
    2c14:	lsl	x2, x2, #1
    2c18:	strh	wzr, [x0, x2]
    2c1c:	bl	0 <memset>
    2c20:	ldr	w0, [x19, #180]
    2c24:	cbnz	w0, 1fc8 <deflate.part.0+0x3f8>
    2c28:	str	xzr, [x19, #152]
    2c2c:	str	wzr, [x19, #172]
    2c30:	str	wzr, [x19, #5932]
    2c34:	b	1fc8 <deflate.part.0+0x3f8>
    2c38:	cmp	w1, #0x6
    2c3c:	orr	w1, w0, #0x80
    2c40:	orr	w0, w0, #0xc0
    2c44:	csel	w0, w0, w1, ne  // ne = any
    2c48:	b	1e40 <deflate.part.0+0x270>
    2c4c:	ldr	x0, [x20, #24]
    2c50:	mov	w24, w22
    2c54:	ldr	x1, [x23, #32]
    2c58:	mov	x2, x24
    2c5c:	bl	0 <memcpy>
    2c60:	ldr	x1, [x20, #24]
    2c64:	ldr	w0, [x20, #32]
    2c68:	ldr	x2, [x23, #32]
    2c6c:	sub	w22, w0, w22
    2c70:	add	x0, x1, x24
    2c74:	str	x0, [x20, #24]
    2c78:	ldr	x1, [x20, #40]
    2c7c:	add	x2, x2, x24
    2c80:	ldr	x0, [x23, #40]
    2c84:	str	x2, [x23, #32]
    2c88:	add	x1, x1, x24
    2c8c:	str	w22, [x20, #32]
    2c90:	str	x1, [x20, #40]
    2c94:	sub	x24, x0, x24
    2c98:	str	x24, [x23, #40]
    2c9c:	cbnz	x24, 291c <deflate.part.0+0xd4c>
    2ca0:	ldr	x0, [x23, #16]
    2ca4:	str	x0, [x23, #32]
    2ca8:	b	291c <deflate.part.0+0xd4c>
    2cac:	ldr	x0, [x22, #16]
    2cb0:	str	x0, [x22, #32]
    2cb4:	b	1dc0 <deflate.part.0+0x1f0>
    2cb8:	ldr	x3, [x19, #16]
    2cbc:	sub	w2, w2, w1
    2cc0:	ldr	x0, [x20, #96]
    2cc4:	add	x1, x3, x1
    2cc8:	bl	0 <crc32>
    2ccc:	str	x0, [x20, #96]
    2cd0:	ldr	x0, [x19, #56]
    2cd4:	ldr	w0, [x0, #68]
    2cd8:	b	28dc <deflate.part.0+0xd0c>
    2cdc:	mov	x0, x19
    2ce0:	bl	1e8 <fill_window>
    2ce4:	ldr	w0, [x19, #180]
    2ce8:	cmp	w0, #0x102
    2cec:	b.hi	2720 <deflate.part.0+0xb50>  // b.pmore
    2cf0:	cbz	w21, 2868 <deflate.part.0+0xc98>
    2cf4:	cbz	w0, 3088 <deflate.part.0+0x14b8>
    2cf8:	ldr	w1, [x19, #172]
    2cfc:	cmp	w0, #0x2
    2d00:	str	wzr, [x19, #160]
    2d04:	mov	w3, w1
    2d08:	ldr	x2, [x19, #96]
    2d0c:	b.ls	2750 <deflate.part.0+0xb80>  // b.plast
    2d10:	b	2730 <deflate.part.0+0xb60>
    2d14:	ldrb	w1, [x4, #2]
    2d18:	cmp	w1, w5
    2d1c:	b.ne	2750 <deflate.part.0+0xb80>  // b.any
    2d20:	ldrb	w1, [x4, #3]
    2d24:	cmp	w1, w5
    2d28:	b.ne	2750 <deflate.part.0+0xb80>  // b.any
    2d2c:	add	x1, x3, #0x102
    2d30:	add	x4, x4, #0x3
    2d34:	add	x1, x2, x1
    2d38:	ldrb	w6, [x4, #1]
    2d3c:	cmp	w6, w5
    2d40:	b.ne	3478 <deflate.part.0+0x18a8>  // b.any
    2d44:	ldrb	w6, [x4, #2]
    2d48:	cmp	w6, w5
    2d4c:	b.ne	3490 <deflate.part.0+0x18c0>  // b.any
    2d50:	ldrb	w6, [x4, #3]
    2d54:	cmp	w6, w5
    2d58:	b.ne	3488 <deflate.part.0+0x18b8>  // b.any
    2d5c:	ldrb	w6, [x4, #4]
    2d60:	cmp	w6, w5
    2d64:	b.ne	3480 <deflate.part.0+0x18b0>  // b.any
    2d68:	ldrb	w6, [x4, #5]
    2d6c:	cmp	w6, w5
    2d70:	b.ne	3498 <deflate.part.0+0x18c8>  // b.any
    2d74:	ldrb	w6, [x4, #6]
    2d78:	cmp	w6, w5
    2d7c:	b.ne	34a8 <deflate.part.0+0x18d8>  // b.any
    2d80:	ldrb	w6, [x4, #7]
    2d84:	cmp	w6, w5
    2d88:	b.ne	34a0 <deflate.part.0+0x18d0>  // b.any
    2d8c:	ldrb	w6, [x4, #8]!
    2d90:	cmp	w6, w5
    2d94:	ccmp	x1, x4, #0x0, eq  // eq = none
    2d98:	b.hi	2d38 <deflate.part.0+0x1168>  // b.pmore
    2d9c:	sub	x1, x1, x4
    2da0:	sub	w1, w24, w1
    2da4:	str	w1, [x19, #160]
    2da8:	cmp	w1, w0
    2dac:	b.ls	2e40 <deflate.part.0+0x1270>  // b.plast
    2db0:	mov	w1, w0
    2db4:	str	w0, [x19, #160]
    2db8:	sub	w0, w1, #0x3
    2dbc:	ldr	w3, [x19, #5900]
    2dc0:	and	w0, w0, #0xff
    2dc4:	mov	w6, #0x1                   	// #1
    2dc8:	ldr	x5, [x19, #5904]
    2dcc:	add	w1, w3, #0x1
    2dd0:	ldrb	w2, [x23, w0, sxtw]
    2dd4:	ldr	x4, [x19, #5888]
    2dd8:	strh	w6, [x5, w3, uxtw #1]
    2ddc:	add	x2, x19, x2, lsl #2
    2de0:	str	w1, [x19, #5900]
    2de4:	ldrb	w1, [x22]
    2de8:	strb	w0, [x4, w3, uxtw]
    2dec:	ldrh	w3, [x2, #1240]
    2df0:	add	x0, x19, x1, lsl #2
    2df4:	add	w1, w3, #0x1
    2df8:	strh	w1, [x2, #1240]
    2dfc:	ldrh	w1, [x0, #2504]
    2e00:	add	w1, w1, #0x1
    2e04:	strh	w1, [x0, #2504]
    2e08:	ldr	w1, [x19, #5896]
    2e0c:	ldr	w2, [x19, #5900]
    2e10:	sub	w1, w1, #0x1
    2e14:	ldr	w0, [x19, #160]
    2e18:	ldr	w3, [x19, #172]
    2e1c:	cmp	w1, w2
    2e20:	ldr	w2, [x19, #180]
    2e24:	cset	w1, eq  // eq = none
    2e28:	add	w3, w0, w3
    2e2c:	str	wzr, [x19, #160]
    2e30:	sub	w0, w2, w0
    2e34:	str	w3, [x19, #172]
    2e38:	str	w0, [x19, #180]
    2e3c:	b	27ac <deflate.part.0+0xbdc>
    2e40:	cmp	w1, #0x2
    2e44:	b.hi	2db8 <deflate.part.0+0x11e8>  // b.pmore
    2e48:	b	2750 <deflate.part.0+0xb80>
    2e4c:	ldr	x2, [x19, #16]
    2e50:	mov	w0, #0x2                   	// #2
    2e54:	ldr	x1, [x19, #40]
    2e58:	add	x3, x1, #0x1
    2e5c:	str	x3, [x19, #40]
    2e60:	strb	wzr, [x2, x1]
    2e64:	ldr	x2, [x19, #16]
    2e68:	ldr	x1, [x19, #40]
    2e6c:	add	x3, x1, #0x1
    2e70:	str	x3, [x19, #40]
    2e74:	strb	wzr, [x2, x1]
    2e78:	ldr	x2, [x19, #16]
    2e7c:	ldr	x1, [x19, #40]
    2e80:	add	x3, x1, #0x1
    2e84:	str	x3, [x19, #40]
    2e88:	strb	wzr, [x2, x1]
    2e8c:	ldr	x2, [x19, #16]
    2e90:	ldr	x1, [x19, #40]
    2e94:	add	x3, x1, #0x1
    2e98:	str	x3, [x19, #40]
    2e9c:	strb	wzr, [x2, x1]
    2ea0:	ldr	x2, [x19, #16]
    2ea4:	ldr	x1, [x19, #40]
    2ea8:	add	x3, x1, #0x1
    2eac:	str	x3, [x19, #40]
    2eb0:	strb	wzr, [x2, x1]
    2eb4:	ldr	w1, [x19, #196]
    2eb8:	cmp	w1, #0x9
    2ebc:	b.eq	2ed4 <deflate.part.0+0x1304>  // b.none
    2ec0:	ldr	w0, [x19, #200]
    2ec4:	cmp	w0, #0x1
    2ec8:	ccmp	w1, #0x1, #0x4, le
    2ecc:	cset	w0, le
    2ed0:	lsl	w0, w0, #2
    2ed4:	ldr	x4, [x19, #16]
    2ed8:	mov	w3, #0x3                   	// #3
    2edc:	ldr	x1, [x19, #40]
    2ee0:	mov	w2, #0x71                  	// #113
    2ee4:	add	x5, x1, #0x1
    2ee8:	str	x5, [x19, #40]
    2eec:	strb	w0, [x4, x1]
    2ef0:	ldr	x1, [x19, #16]
    2ef4:	ldr	x0, [x19, #40]
    2ef8:	add	x4, x0, #0x1
    2efc:	str	x4, [x19, #40]
    2f00:	strb	w3, [x1, x0]
    2f04:	ldr	x23, [x20, #56]
    2f08:	str	w2, [x19, #8]
    2f0c:	mov	x0, x23
    2f10:	bl	0 <_tr_flush_bits>
    2f14:	ldr	x22, [x23, #40]
    2f18:	ldr	w0, [x20, #32]
    2f1c:	cmp	w0, w22
    2f20:	csel	w22, w0, w22, ls  // ls = plast
    2f24:	cbz	w22, 2f84 <deflate.part.0+0x13b4>
    2f28:	ldr	x0, [x20, #24]
    2f2c:	mov	w24, w22
    2f30:	ldr	x1, [x23, #32]
    2f34:	mov	x2, x24
    2f38:	bl	0 <memcpy>
    2f3c:	ldr	x1, [x20, #24]
    2f40:	ldr	w0, [x20, #32]
    2f44:	ldr	x2, [x23, #32]
    2f48:	sub	w22, w0, w22
    2f4c:	add	x0, x1, x24
    2f50:	str	x0, [x20, #24]
    2f54:	ldr	x1, [x20, #40]
    2f58:	add	x2, x2, x24
    2f5c:	ldr	x0, [x23, #40]
    2f60:	str	x2, [x23, #32]
    2f64:	add	x1, x1, x24
    2f68:	str	w22, [x20, #32]
    2f6c:	str	x1, [x20, #40]
    2f70:	sub	x24, x0, x24
    2f74:	str	x24, [x23, #40]
    2f78:	cbnz	x24, 2f84 <deflate.part.0+0x13b4>
    2f7c:	ldr	x0, [x23, #16]
    2f80:	str	x0, [x23, #32]
    2f84:	ldr	x0, [x19, #40]
    2f88:	cbnz	x0, 1ff0 <deflate.part.0+0x420>
    2f8c:	ldr	w0, [x19, #8]
    2f90:	b	1f60 <deflate.part.0+0x390>
    2f94:	ldp	x21, x22, [sp, #32]
    2f98:	ldp	x23, x24, [sp, #48]
    2f9c:	b	2004 <deflate.part.0+0x434>
    2fa0:	str	x3, [x19, #40]
    2fa4:	strb	w0, [x1, x2]
    2fa8:	ldr	x2, [x19, #16]
    2fac:	ldr	x1, [x19, #40]
    2fb0:	ldr	x0, [x20, #96]
    2fb4:	add	x3, x1, #0x1
    2fb8:	str	x3, [x19, #40]
    2fbc:	lsr	x0, x0, #8
    2fc0:	strb	w0, [x2, x1]
    2fc4:	ldr	x2, [x19, #16]
    2fc8:	ldr	x1, [x19, #40]
    2fcc:	ldr	x0, [x20, #96]
    2fd0:	add	x3, x1, #0x1
    2fd4:	str	x3, [x19, #40]
    2fd8:	lsr	x0, x0, #16
    2fdc:	strb	w0, [x2, x1]
    2fe0:	ldr	x2, [x19, #16]
    2fe4:	ldr	x1, [x19, #40]
    2fe8:	ldr	x0, [x20, #96]
    2fec:	add	x3, x1, #0x1
    2ff0:	str	x3, [x19, #40]
    2ff4:	lsr	x0, x0, #24
    2ff8:	strb	w0, [x2, x1]
    2ffc:	ldr	x1, [x19, #16]
    3000:	ldr	x0, [x19, #40]
    3004:	ldr	x2, [x20, #16]
    3008:	add	x3, x0, #0x1
    300c:	str	x3, [x19, #40]
    3010:	strb	w2, [x1, x0]
    3014:	ldr	x0, [x20, #16]
    3018:	ldr	x2, [x19, #16]
    301c:	ldr	x1, [x19, #40]
    3020:	lsr	x0, x0, #8
    3024:	add	x3, x1, #0x1
    3028:	str	x3, [x19, #40]
    302c:	strb	w0, [x2, x1]
    3030:	ldr	x0, [x20, #16]
    3034:	ldr	x2, [x19, #16]
    3038:	ldr	x1, [x19, #40]
    303c:	lsr	x0, x0, #16
    3040:	add	x3, x1, #0x1
    3044:	str	x3, [x19, #40]
    3048:	strb	w0, [x2, x1]
    304c:	ldr	x0, [x20, #16]
    3050:	ldr	x2, [x19, #16]
    3054:	ldr	x1, [x19, #40]
    3058:	lsr	x0, x0, #24
    305c:	add	x3, x1, #0x1
    3060:	str	x3, [x19, #40]
    3064:	strb	w0, [x2, x1]
    3068:	b	1d4c <deflate.part.0+0x17c>
    306c:	ldr	w2, [x19, #40]
    3070:	ldr	x1, [x19, #16]
    3074:	ldr	x0, [x20, #96]
    3078:	bl	0 <crc32>
    307c:	ldr	x3, [x19, #56]
    3080:	str	x0, [x20, #96]
    3084:	b	2558 <deflate.part.0+0x988>
    3088:	str	wzr, [x19, #5932]
    308c:	cmp	w21, #0x4
    3090:	b.eq	335c <deflate.part.0+0x178c>  // b.none
    3094:	ldr	w0, [x19, #5900]
    3098:	cbz	w0, 342c <deflate.part.0+0x185c>
    309c:	ldr	x2, [x19, #152]
    30a0:	mov	x1, #0x0                   	// #0
    30a4:	tbnz	x2, #63, 30b0 <deflate.part.0+0x14e0>
    30a8:	ldr	x1, [x19, #96]
    30ac:	add	x1, x1, w2, uxtw
    30b0:	ldr	w4, [x19, #172]
    30b4:	mov	x0, x19
    30b8:	mov	w3, #0x0                   	// #0
    30bc:	sub	x2, x4, x2
    30c0:	bl	0 <_tr_flush_block>
    30c4:	ldr	x22, [x19]
    30c8:	ldr	w0, [x19, #172]
    30cc:	ldr	x23, [x22, #56]
    30d0:	str	x0, [x19, #152]
    30d4:	mov	x0, x23
    30d8:	bl	0 <_tr_flush_bits>
    30dc:	ldr	x0, [x23, #40]
    30e0:	ldr	w24, [x22, #32]
    30e4:	cmp	w24, w0
    30e8:	csel	w24, w24, w0, ls  // ls = plast
    30ec:	cbz	w24, 314c <deflate.part.0+0x157c>
    30f0:	ldr	x0, [x22, #24]
    30f4:	mov	w25, w24
    30f8:	ldr	x1, [x23, #32]
    30fc:	mov	x2, x25
    3100:	bl	0 <memcpy>
    3104:	ldr	x1, [x22, #24]
    3108:	ldr	w0, [x22, #32]
    310c:	ldr	x2, [x23, #32]
    3110:	sub	w24, w0, w24
    3114:	add	x0, x1, x25
    3118:	str	x0, [x22, #24]
    311c:	ldr	x1, [x22, #40]
    3120:	add	x2, x2, x25
    3124:	ldr	x0, [x23, #40]
    3128:	str	x2, [x23, #32]
    312c:	add	x1, x1, x25
    3130:	str	w24, [x22, #32]
    3134:	str	x1, [x22, #40]
    3138:	sub	x25, x0, x25
    313c:	str	x25, [x23, #40]
    3140:	cbnz	x25, 314c <deflate.part.0+0x157c>
    3144:	ldr	x0, [x23, #16]
    3148:	str	x0, [x23, #32]
    314c:	ldr	x0, [x19]
    3150:	ldp	x25, x26, [sp, #64]
    3154:	ldr	w0, [x0, #32]
    3158:	ldr	x27, [sp, #80]
    315c:	cmp	w0, #0x0
    3160:	cset	w0, ne  // ne = any
    3164:	mov	w2, w0
    3168:	b	1fac <deflate.part.0+0x3dc>
    316c:	ldr	x3, [x19, #56]
    3170:	b	2274 <deflate.part.0+0x6a4>
    3174:	ldr	x0, [x19, #56]
    3178:	ldr	w0, [x0, #68]
    317c:	b	28e4 <deflate.part.0+0xd14>
    3180:	mov	x0, x19
    3184:	bl	0 <_tr_align>
    3188:	b	1fc8 <deflate.part.0+0x3f8>
    318c:	ldr	x0, [x20, #96]
    3190:	sub	w2, w2, w26
    3194:	ldr	x1, [x19, #16]
    3198:	add	x1, x1, x26
    319c:	bl	0 <crc32>
    31a0:	ldr	x3, [x19, #56]
    31a4:	str	x0, [x20, #96]
    31a8:	b	26dc <deflate.part.0+0xb0c>
    31ac:	ldr	x2, [x19, #152]
    31b0:	mov	x1, #0x0                   	// #0
    31b4:	tbnz	x2, #63, 31c0 <deflate.part.0+0x15f0>
    31b8:	ldr	x1, [x19, #96]
    31bc:	add	x1, x1, w2, uxtw
    31c0:	ldr	w4, [x19, #172]
    31c4:	mov	x0, x19
    31c8:	mov	w3, #0x1                   	// #1
    31cc:	sub	x2, x4, x2
    31d0:	bl	0 <_tr_flush_block>
    31d4:	ldr	x21, [x19]
    31d8:	ldr	w0, [x19, #172]
    31dc:	ldr	x23, [x21, #56]
    31e0:	str	x0, [x19, #152]
    31e4:	mov	x0, x23
    31e8:	bl	0 <_tr_flush_bits>
    31ec:	ldr	x22, [x23, #40]
    31f0:	ldr	w0, [x21, #32]
    31f4:	cmp	w0, w22
    31f8:	csel	w22, w0, w22, ls  // ls = plast
    31fc:	cbz	w22, 325c <deflate.part.0+0x168c>
    3200:	ldr	x0, [x21, #24]
    3204:	mov	w24, w22
    3208:	ldr	x1, [x23, #32]
    320c:	mov	x2, x24
    3210:	bl	0 <memcpy>
    3214:	ldr	x1, [x21, #24]
    3218:	ldr	w0, [x21, #32]
    321c:	ldr	x2, [x23, #32]
    3220:	sub	w22, w0, w22
    3224:	add	x0, x1, x24
    3228:	str	x0, [x21, #24]
    322c:	ldr	x1, [x21, #40]
    3230:	add	x2, x2, x24
    3234:	ldr	x0, [x23, #40]
    3238:	str	x2, [x23, #32]
    323c:	add	x1, x1, x24
    3240:	str	w22, [x21, #32]
    3244:	str	x1, [x21, #40]
    3248:	sub	x24, x0, x24
    324c:	str	x24, [x23, #40]
    3250:	cbnz	x24, 325c <deflate.part.0+0x168c>
    3254:	ldr	x0, [x23, #16]
    3258:	str	x0, [x23, #32]
    325c:	ldr	x0, [x19]
    3260:	ldr	w0, [x0, #32]
    3264:	cbnz	w0, 3454 <deflate.part.0+0x1884>
    3268:	mov	w0, #0x29a                 	// #666
    326c:	str	w0, [x19, #8]
    3270:	ldp	x25, x26, [sp, #64]
    3274:	b	2870 <deflate.part.0+0xca0>
    3278:	ldr	x2, [x19, #152]
    327c:	mov	x1, #0x0                   	// #0
    3280:	tbnz	x2, #63, 328c <deflate.part.0+0x16bc>
    3284:	ldr	x1, [x19, #96]
    3288:	add	x1, x1, w2, uxtw
    328c:	ldr	w4, [x19, #172]
    3290:	mov	x0, x19
    3294:	mov	w3, #0x0                   	// #0
    3298:	sub	x2, x4, x2
    329c:	bl	0 <_tr_flush_block>
    32a0:	ldr	x22, [x19]
    32a4:	ldr	w0, [x19, #172]
    32a8:	ldr	x23, [x22, #56]
    32ac:	str	x0, [x19, #152]
    32b0:	mov	x0, x23
    32b4:	bl	0 <_tr_flush_bits>
    32b8:	ldr	x0, [x23, #40]
    32bc:	ldr	w24, [x22, #32]
    32c0:	cmp	w24, w0
    32c4:	csel	w24, w24, w0, ls  // ls = plast
    32c8:	cbz	w24, 3328 <deflate.part.0+0x1758>
    32cc:	ldr	x0, [x22, #24]
    32d0:	mov	w25, w24
    32d4:	ldr	x1, [x23, #32]
    32d8:	mov	x2, x25
    32dc:	bl	0 <memcpy>
    32e0:	ldr	x1, [x22, #24]
    32e4:	ldr	w0, [x22, #32]
    32e8:	ldr	x2, [x23, #32]
    32ec:	sub	w24, w0, w24
    32f0:	add	x0, x1, x25
    32f4:	str	x0, [x22, #24]
    32f8:	ldr	x1, [x22, #40]
    32fc:	add	x2, x2, x25
    3300:	ldr	x0, [x23, #40]
    3304:	str	x2, [x23, #32]
    3308:	add	x1, x1, x25
    330c:	str	w24, [x22, #32]
    3310:	str	x1, [x22, #40]
    3314:	sub	x25, x0, x25
    3318:	str	x25, [x23, #40]
    331c:	cbnz	x25, 3328 <deflate.part.0+0x1758>
    3320:	ldr	x0, [x23, #16]
    3324:	str	x0, [x23, #32]
    3328:	ldr	x0, [x19]
    332c:	ldp	x25, x26, [sp, #64]
    3330:	ldr	w0, [x0, #32]
    3334:	cmp	w0, #0x0
    3338:	cset	w0, ne  // ne = any
    333c:	mov	w2, w0
    3340:	b	1fac <deflate.part.0+0x3dc>
    3344:	adrp	x1, 0 <z_errmsg>
    3348:	mov	w0, #0xfffffffb            	// #-5
    334c:	ldp	x21, x22, [sp, #32]
    3350:	ldr	x1, [x1]
    3354:	str	x1, [x20, #48]
    3358:	b	2004 <deflate.part.0+0x434>
    335c:	ldr	x2, [x19, #152]
    3360:	mov	x1, #0x0                   	// #0
    3364:	tbnz	x2, #63, 3370 <deflate.part.0+0x17a0>
    3368:	ldr	x1, [x19, #96]
    336c:	add	x1, x1, w2, uxtw
    3370:	ldr	w4, [x19, #172]
    3374:	mov	x0, x19
    3378:	mov	w3, #0x1                   	// #1
    337c:	sub	x2, x4, x2
    3380:	bl	0 <_tr_flush_block>
    3384:	ldr	x21, [x19]
    3388:	ldr	w0, [x19, #172]
    338c:	ldr	x22, [x21, #56]
    3390:	str	x0, [x19, #152]
    3394:	mov	x0, x22
    3398:	bl	0 <_tr_flush_bits>
    339c:	ldr	x0, [x22, #40]
    33a0:	ldr	w23, [x21, #32]
    33a4:	cmp	w23, w0
    33a8:	csel	w23, w23, w0, ls  // ls = plast
    33ac:	cbz	w23, 340c <deflate.part.0+0x183c>
    33b0:	ldr	x0, [x21, #24]
    33b4:	mov	w24, w23
    33b8:	ldr	x1, [x22, #32]
    33bc:	mov	x2, x24
    33c0:	bl	0 <memcpy>
    33c4:	ldr	x1, [x21, #24]
    33c8:	ldr	w0, [x21, #32]
    33cc:	ldr	x2, [x22, #32]
    33d0:	sub	w23, w0, w23
    33d4:	add	x0, x1, x24
    33d8:	str	x0, [x21, #24]
    33dc:	ldr	x1, [x21, #40]
    33e0:	add	x2, x2, x24
    33e4:	ldr	x0, [x22, #40]
    33e8:	str	x2, [x22, #32]
    33ec:	add	x1, x1, x24
    33f0:	str	w23, [x21, #32]
    33f4:	str	x1, [x21, #40]
    33f8:	sub	x24, x0, x24
    33fc:	str	x24, [x22, #40]
    3400:	cbnz	x24, 340c <deflate.part.0+0x183c>
    3404:	ldr	x0, [x22, #16]
    3408:	str	x0, [x22, #32]
    340c:	ldr	x0, [x19]
    3410:	ldr	w0, [x0, #32]
    3414:	cbnz	w0, 3464 <deflate.part.0+0x1894>
    3418:	mov	w0, #0x29a                 	// #666
    341c:	ldp	x25, x26, [sp, #64]
    3420:	ldr	x27, [sp, #80]
    3424:	str	w0, [x19, #8]
    3428:	b	2870 <deflate.part.0+0xca0>
    342c:	ldp	x25, x26, [sp, #64]
    3430:	ldr	x27, [sp, #80]
    3434:	b	1fb8 <deflate.part.0+0x3e8>
    3438:	adrp	x1, 0 <z_errmsg>
    343c:	mov	w0, #0xfffffffb            	// #-5
    3440:	ldp	x21, x22, [sp, #32]
    3444:	ldr	x1, [x1]
    3448:	ldp	x23, x24, [sp, #48]
    344c:	str	x1, [x20, #48]
    3450:	b	2004 <deflate.part.0+0x434>
    3454:	mov	w0, #0x29a                 	// #666
    3458:	ldp	x25, x26, [sp, #64]
    345c:	str	w0, [x19, #8]
    3460:	b	1cd0 <deflate.part.0+0x100>
    3464:	mov	w0, #0x29a                 	// #666
    3468:	ldp	x25, x26, [sp, #64]
    346c:	ldr	x27, [sp, #80]
    3470:	str	w0, [x19, #8]
    3474:	b	1cd0 <deflate.part.0+0x100>
    3478:	add	x4, x4, #0x1
    347c:	b	2d9c <deflate.part.0+0x11cc>
    3480:	add	x4, x4, #0x4
    3484:	b	2d9c <deflate.part.0+0x11cc>
    3488:	add	x4, x4, #0x3
    348c:	b	2d9c <deflate.part.0+0x11cc>
    3490:	add	x4, x4, #0x2
    3494:	b	2d9c <deflate.part.0+0x11cc>
    3498:	add	x4, x4, #0x5
    349c:	b	2d9c <deflate.part.0+0x11cc>
    34a0:	add	x4, x4, #0x7
    34a4:	b	2d9c <deflate.part.0+0x11cc>
    34a8:	add	x4, x4, #0x6
    34ac:	b	2d9c <deflate.part.0+0x11cc>

00000000000034b0 <deflateSetDictionary>:
    34b0:	cbz	x0, 3710 <deflateSetDictionary+0x260>
    34b4:	stp	x29, x30, [sp, #-64]!
    34b8:	mov	x29, sp
    34bc:	stp	x19, x20, [sp, #16]
    34c0:	mov	x19, x0
    34c4:	ldr	x0, [x0, #64]
    34c8:	cbz	x0, 367c <deflateSetDictionary+0x1cc>
    34cc:	ldr	x0, [x19, #72]
    34d0:	cbz	x0, 367c <deflateSetDictionary+0x1cc>
    34d4:	stp	x23, x24, [sp, #48]
    34d8:	ldr	x24, [x19, #56]
    34dc:	cbz	x24, 36cc <deflateSetDictionary+0x21c>
    34e0:	mov	x20, x1
    34e4:	mov	w0, #0xfffffffe            	// #-2
    34e8:	ldr	x1, [x24]
    34ec:	cmp	x19, x1
    34f0:	b.eq	3504 <deflateSetDictionary+0x54>  // b.none
    34f4:	ldp	x23, x24, [sp, #48]
    34f8:	ldp	x19, x20, [sp, #16]
    34fc:	ldp	x29, x30, [sp], #64
    3500:	ret
    3504:	ldr	w1, [x24, #8]
    3508:	mov	w5, #0x45                  	// #69
    350c:	stp	x21, x22, [sp, #32]
    3510:	mov	w22, w2
    3514:	cmp	w1, #0x67
    3518:	mov	w2, #0x5b                  	// #91
    351c:	ccmp	w1, w2, #0x4, ne  // ne = any
    3520:	cset	w2, ne  // ne = any
    3524:	cmp	w1, #0x2a
    3528:	ccmp	w1, w5, #0x4, ne  // ne = any
    352c:	sub	w3, w1, #0x39
    3530:	csel	w2, w2, wzr, ne  // ne = any
    3534:	cmp	w1, #0x29a
    3538:	mov	w4, #0x71                  	// #113
    353c:	ccmp	w1, w4, #0x4, ne  // ne = any
    3540:	csel	w2, w2, wzr, ne  // ne = any
    3544:	tst	w3, #0xffffffef
    3548:	csel	w2, w2, wzr, ne  // ne = any
    354c:	cbnz	w2, 3708 <deflateSetDictionary+0x258>
    3550:	cbz	x20, 3708 <deflateSetDictionary+0x258>
    3554:	ldr	w21, [x24, #48]
    3558:	cmp	w21, #0x2
    355c:	b.eq	3708 <deflateSetDictionary+0x258>  // b.none
    3560:	cmp	w21, #0x1
    3564:	b.eq	368c <deflateSetDictionary+0x1dc>  // b.none
    3568:	ldr	w0, [x24, #180]
    356c:	cbnz	w0, 3718 <deflateSetDictionary+0x268>
    3570:	ldr	w1, [x24, #80]
    3574:	str	wzr, [x24, #48]
    3578:	cmp	w1, w22
    357c:	b.hi	36c4 <deflateSetDictionary+0x214>  // b.pmore
    3580:	cbz	w21, 36d8 <deflateSetDictionary+0x228>
    3584:	sub	w22, w22, w1
    3588:	add	x20, x20, x22
    358c:	ldr	w22, [x19, #8]
    3590:	mov	x0, x24
    3594:	str	w1, [x19, #8]
    3598:	ldr	x23, [x19]
    359c:	str	x20, [x19]
    35a0:	bl	1e8 <fill_window>
    35a4:	ldr	w3, [x24, #180]
    35a8:	cmp	w3, #0x2
    35ac:	b.ls	362c <deflateSetDictionary+0x17c>  // b.plast
    35b0:	mov	w20, #0x2                   	// #2
    35b4:	nop
    35b8:	ldr	w1, [x24, #172]
    35bc:	ldp	x9, x4, [x24, #112]
    35c0:	sub	w6, w1, #0x2
    35c4:	ldr	w11, [x24, #88]
    35c8:	add	w6, w6, w3
    35cc:	ldr	w2, [x24, #128]
    35d0:	ldp	w8, w7, [x24, #140]
    35d4:	ldr	x10, [x24, #96]
    35d8:	add	w0, w1, #0x2
    35dc:	lsl	w2, w2, w7
    35e0:	and	w5, w11, w1
    35e4:	ldrb	w3, [x10, w0, uxtw]
    35e8:	eor	w2, w3, w2
    35ec:	and	w2, w2, w8
    35f0:	ubfiz	x0, x2, #1, #32
    35f4:	ldrh	w3, [x4, x0]
    35f8:	str	w2, [x24, #128]
    35fc:	strh	w3, [x9, x5, lsl #1]
    3600:	strh	w1, [x4, x0]
    3604:	add	w1, w1, #0x1
    3608:	cmp	w1, w6
    360c:	b.ne	35d8 <deflateSetDictionary+0x128>  // b.any
    3610:	str	w1, [x24, #172]
    3614:	mov	x0, x24
    3618:	str	w20, [x24, #180]
    361c:	bl	1e8 <fill_window>
    3620:	ldr	w3, [x24, #180]
    3624:	cmp	w3, #0x2
    3628:	b.hi	35b8 <deflateSetDictionary+0x108>  // b.pmore
    362c:	adrp	x0, 0 <longest_match>
    3630:	ldr	w1, [x24, #172]
    3634:	mov	w2, #0x2                   	// #2
    3638:	str	w2, [x24, #160]
    363c:	ldr	d0, [x0]
    3640:	add	w2, w3, w1
    3644:	str	x2, [x24, #152]
    3648:	mov	w0, #0x0                   	// #0
    364c:	str	wzr, [x24, #168]
    3650:	str	w2, [x24, #172]
    3654:	stur	d0, [x24, #180]
    3658:	str	w3, [x24, #5932]
    365c:	str	x23, [x19]
    3660:	str	w22, [x19, #8]
    3664:	str	w21, [x24, #48]
    3668:	ldp	x19, x20, [sp, #16]
    366c:	ldp	x21, x22, [sp, #32]
    3670:	ldp	x23, x24, [sp, #48]
    3674:	ldp	x29, x30, [sp], #64
    3678:	ret
    367c:	mov	w0, #0xfffffffe            	// #-2
    3680:	ldp	x19, x20, [sp, #16]
    3684:	ldp	x29, x30, [sp], #64
    3688:	ret
    368c:	cmp	w1, #0x2a
    3690:	b.ne	3718 <deflateSetDictionary+0x268>  // b.any
    3694:	ldr	w1, [x24, #180]
    3698:	mov	w0, #0xfffffffe            	// #-2
    369c:	cbnz	w1, 3708 <deflateSetDictionary+0x258>
    36a0:	ldr	x0, [x19, #96]
    36a4:	mov	x1, x20
    36a8:	mov	w2, w22
    36ac:	bl	0 <adler32>
    36b0:	ldr	w1, [x24, #80]
    36b4:	str	x0, [x19, #96]
    36b8:	str	wzr, [x24, #48]
    36bc:	cmp	w22, w1
    36c0:	b.cs	3584 <deflateSetDictionary+0xd4>  // b.hs, b.nlast
    36c4:	mov	w1, w22
    36c8:	b	358c <deflateSetDictionary+0xdc>
    36cc:	mov	w0, #0xfffffffe            	// #-2
    36d0:	ldp	x23, x24, [sp, #48]
    36d4:	b	34f8 <deflateSetDictionary+0x48>
    36d8:	ldr	w2, [x24, #132]
    36dc:	mov	w1, #0x0                   	// #0
    36e0:	ldr	x0, [x24, #120]
    36e4:	sub	w2, w2, #0x1
    36e8:	lsl	x2, x2, #1
    36ec:	strh	wzr, [x0, x2]
    36f0:	bl	0 <memset>
    36f4:	str	xzr, [x24, #152]
    36f8:	ldr	w1, [x24, #80]
    36fc:	str	wzr, [x24, #172]
    3700:	str	wzr, [x24, #5932]
    3704:	b	3584 <deflateSetDictionary+0xd4>
    3708:	ldp	x21, x22, [sp, #32]
    370c:	b	34f4 <deflateSetDictionary+0x44>
    3710:	mov	w0, #0xfffffffe            	// #-2
    3714:	ret
    3718:	mov	w0, #0xfffffffe            	// #-2
    371c:	ldp	x21, x22, [sp, #32]
    3720:	ldp	x23, x24, [sp, #48]
    3724:	b	34f8 <deflateSetDictionary+0x48>

0000000000003728 <deflateGetDictionary>:
    3728:	cbz	x0, 3774 <deflateGetDictionary+0x4c>
    372c:	mov	x3, x0
    3730:	ldr	x0, [x0, #64]
    3734:	cbz	x0, 3774 <deflateGetDictionary+0x4c>
    3738:	ldr	x0, [x3, #72]
    373c:	cbz	x0, 3774 <deflateGetDictionary+0x4c>
    3740:	ldr	x4, [x3, #56]
    3744:	cbz	x4, 3774 <deflateGetDictionary+0x4c>
    3748:	stp	x29, x30, [sp, #-32]!
    374c:	mov	w0, #0xfffffffe            	// #-2
    3750:	mov	x29, sp
    3754:	stp	x19, x20, [sp, #16]
    3758:	mov	x20, x2
    375c:	ldr	x2, [x4]
    3760:	cmp	x3, x2
    3764:	b.eq	377c <deflateGetDictionary+0x54>  // b.none
    3768:	ldp	x19, x20, [sp, #16]
    376c:	ldp	x29, x30, [sp], #32
    3770:	ret
    3774:	mov	w0, #0xfffffffe            	// #-2
    3778:	ret
    377c:	ldr	w3, [x4, #8]
    3780:	mov	w2, #0x45                  	// #69
    3784:	mov	w7, #0x5b                  	// #91
    3788:	mov	w6, #0x71                  	// #113
    378c:	cmp	w3, #0x2a
    3790:	sub	w5, w3, #0x39
    3794:	ccmp	w3, w2, #0x4, ne  // ne = any
    3798:	cset	w2, ne  // ne = any
    379c:	cmp	w3, #0x67
    37a0:	ccmp	w3, w7, #0x4, ne  // ne = any
    37a4:	csel	w2, w2, wzr, ne  // ne = any
    37a8:	cmp	w3, #0x29a
    37ac:	ccmp	w3, w6, #0x4, ne  // ne = any
    37b0:	csel	w2, w2, wzr, ne  // ne = any
    37b4:	tst	w5, #0xffffffef
    37b8:	csel	w2, w2, wzr, ne  // ne = any
    37bc:	cbnz	w2, 3768 <deflateGetDictionary+0x40>
    37c0:	ldr	w0, [x4, #172]
    37c4:	ldr	w3, [x4, #180]
    37c8:	ldr	w19, [x4, #80]
    37cc:	add	w2, w0, w3
    37d0:	cmp	w19, w2
    37d4:	csel	w19, w19, w2, ls  // ls = plast
    37d8:	cmp	x1, #0x0
    37dc:	ccmp	w19, #0x0, #0x4, ne  // ne = any
    37e0:	b.ne	37fc <deflateGetDictionary+0xd4>  // b.any
    37e4:	mov	w0, #0x0                   	// #0
    37e8:	cbz	x20, 3768 <deflateGetDictionary+0x40>
    37ec:	str	w19, [x20]
    37f0:	ldp	x19, x20, [sp, #16]
    37f4:	ldp	x29, x30, [sp], #32
    37f8:	ret
    37fc:	mov	w3, w3
    3800:	mov	w2, w19
    3804:	add	x0, x3, w0, uxtw
    3808:	ldr	x4, [x4, #96]
    380c:	sub	x3, x0, x2
    3810:	mov	x0, x1
    3814:	add	x1, x4, x3
    3818:	bl	0 <memcpy>
    381c:	b	37e4 <deflateGetDictionary+0xbc>

0000000000003820 <deflateResetKeep>:
    3820:	cbz	x0, 3954 <deflateResetKeep+0x134>
    3824:	stp	x29, x30, [sp, #-32]!
    3828:	mov	x29, sp
    382c:	stp	x19, x20, [sp, #16]
    3830:	mov	x19, x0
    3834:	ldr	x0, [x0, #64]
    3838:	cbz	x0, 3868 <deflateResetKeep+0x48>
    383c:	ldr	x0, [x19, #72]
    3840:	cbz	x0, 3868 <deflateResetKeep+0x48>
    3844:	ldr	x20, [x19, #56]
    3848:	cbz	x20, 3868 <deflateResetKeep+0x48>
    384c:	ldr	x1, [x20]
    3850:	mov	w0, #0xfffffffe            	// #-2
    3854:	cmp	x19, x1
    3858:	b.eq	3878 <deflateResetKeep+0x58>  // b.none
    385c:	ldp	x19, x20, [sp, #16]
    3860:	ldp	x29, x30, [sp], #32
    3864:	ret
    3868:	mov	w0, #0xfffffffe            	// #-2
    386c:	ldp	x19, x20, [sp, #16]
    3870:	ldp	x29, x30, [sp], #32
    3874:	ret
    3878:	ldr	w2, [x20, #8]
    387c:	mov	w1, #0x5b                  	// #91
    3880:	mov	w5, #0x45                  	// #69
    3884:	mov	w3, #0x71                  	// #113
    3888:	cmp	w2, #0x67
    388c:	sub	w4, w2, #0x39
    3890:	ccmp	w2, w1, #0x4, ne  // ne = any
    3894:	cset	w1, ne  // ne = any
    3898:	cmp	w2, #0x2a
    389c:	ccmp	w2, w5, #0x4, ne  // ne = any
    38a0:	csel	w1, w1, wzr, ne  // ne = any
    38a4:	cmp	w2, #0x29a
    38a8:	ccmp	w2, w3, #0x4, ne  // ne = any
    38ac:	csel	w1, w1, wzr, ne  // ne = any
    38b0:	tst	w4, #0xffffffef
    38b4:	csel	w1, w1, wzr, ne  // ne = any
    38b8:	cbnz	w1, 385c <deflateResetKeep+0x3c>
    38bc:	ldr	w0, [x20, #48]
    38c0:	mov	w1, #0x2                   	// #2
    38c4:	str	xzr, [x19, #16]
    38c8:	stp	xzr, xzr, [x19, #40]
    38cc:	str	w1, [x19, #88]
    38d0:	ldr	x1, [x20, #16]
    38d4:	stp	x1, xzr, [x20, #32]
    38d8:	tbnz	w0, #31, 3920 <deflateResetKeep+0x100>
    38dc:	cmp	w0, #0x2
    38e0:	b.eq	3938 <deflateResetKeep+0x118>  // b.none
    38e4:	cbnz	w0, 3930 <deflateResetKeep+0x110>
    38e8:	mov	w0, w3
    38ec:	str	w0, [x20, #8]
    38f0:	mov	w2, #0x0                   	// #0
    38f4:	mov	x1, #0x0                   	// #0
    38f8:	mov	x0, #0x0                   	// #0
    38fc:	bl	0 <adler32>
    3900:	str	x0, [x19, #96]
    3904:	mov	x0, x20
    3908:	str	wzr, [x20, #76]
    390c:	bl	0 <_tr_init>
    3910:	mov	w0, #0x0                   	// #0
    3914:	ldp	x19, x20, [sp, #16]
    3918:	ldp	x29, x30, [sp], #32
    391c:	ret
    3920:	neg	w1, w0
    3924:	str	w1, [x20, #48]
    3928:	cmn	w0, #0x2
    392c:	b.eq	3938 <deflateResetKeep+0x118>  // b.none
    3930:	mov	w0, #0x2a                  	// #42
    3934:	b	38ec <deflateResetKeep+0xcc>
    3938:	mov	w0, #0x39                  	// #57
    393c:	str	w0, [x20, #8]
    3940:	mov	w2, #0x0                   	// #0
    3944:	mov	x1, #0x0                   	// #0
    3948:	mov	x0, #0x0                   	// #0
    394c:	bl	0 <crc32>
    3950:	b	3900 <deflateResetKeep+0xe0>
    3954:	mov	w0, #0xfffffffe            	// #-2
    3958:	ret
    395c:	nop

0000000000003960 <deflateReset>:
    3960:	cbz	x0, 3b0c <deflateReset+0x1ac>
    3964:	stp	x29, x30, [sp, #-32]!
    3968:	mov	x29, sp
    396c:	stp	x19, x20, [sp, #16]
    3970:	mov	x19, x0
    3974:	ldr	x0, [x0, #64]
    3978:	cbz	x0, 39a8 <deflateReset+0x48>
    397c:	ldr	x0, [x19, #72]
    3980:	cbz	x0, 39a8 <deflateReset+0x48>
    3984:	ldr	x20, [x19, #56]
    3988:	cbz	x20, 39a8 <deflateReset+0x48>
    398c:	ldr	x1, [x20]
    3990:	mov	w0, #0xfffffffe            	// #-2
    3994:	cmp	x19, x1
    3998:	b.eq	39b8 <deflateReset+0x58>  // b.none
    399c:	ldp	x19, x20, [sp, #16]
    39a0:	ldp	x29, x30, [sp], #32
    39a4:	ret
    39a8:	mov	w0, #0xfffffffe            	// #-2
    39ac:	ldp	x19, x20, [sp, #16]
    39b0:	ldp	x29, x30, [sp], #32
    39b4:	ret
    39b8:	ldr	w2, [x20, #8]
    39bc:	mov	w1, #0x5b                  	// #91
    39c0:	mov	w5, #0x45                  	// #69
    39c4:	mov	w3, #0x71                  	// #113
    39c8:	cmp	w2, #0x67
    39cc:	sub	w4, w2, #0x39
    39d0:	ccmp	w2, w1, #0x4, ne  // ne = any
    39d4:	cset	w1, ne  // ne = any
    39d8:	cmp	w2, #0x2a
    39dc:	ccmp	w2, w5, #0x4, ne  // ne = any
    39e0:	csel	w1, w1, wzr, ne  // ne = any
    39e4:	cmp	w2, #0x29a
    39e8:	ccmp	w2, w3, #0x4, ne  // ne = any
    39ec:	csel	w1, w1, wzr, ne  // ne = any
    39f0:	tst	w4, #0xffffffef
    39f4:	csel	w1, w1, wzr, ne  // ne = any
    39f8:	cbnz	w1, 399c <deflateReset+0x3c>
    39fc:	ldr	w0, [x20, #48]
    3a00:	mov	w1, #0x2                   	// #2
    3a04:	str	xzr, [x19, #16]
    3a08:	stp	xzr, xzr, [x19, #40]
    3a0c:	str	w1, [x19, #88]
    3a10:	ldr	x1, [x20, #16]
    3a14:	stp	x1, xzr, [x20, #32]
    3a18:	tbnz	w0, #31, 3ad8 <deflateReset+0x178>
    3a1c:	cmp	w0, #0x2
    3a20:	b.eq	3af0 <deflateReset+0x190>  // b.none
    3a24:	cbnz	w0, 3ae8 <deflateReset+0x188>
    3a28:	mov	w0, w3
    3a2c:	str	w0, [x20, #8]
    3a30:	mov	w2, #0x0                   	// #0
    3a34:	mov	x1, #0x0                   	// #0
    3a38:	mov	x0, #0x0                   	// #0
    3a3c:	bl	0 <adler32>
    3a40:	str	x0, [x19, #96]
    3a44:	mov	x0, x20
    3a48:	str	wzr, [x20, #76]
    3a4c:	bl	0 <_tr_init>
    3a50:	ldr	x19, [x19, #56]
    3a54:	mov	w1, #0x0                   	// #0
    3a58:	ldr	w2, [x19, #132]
    3a5c:	ldr	w3, [x19, #80]
    3a60:	sub	w2, w2, #0x1
    3a64:	ldr	x0, [x19, #120]
    3a68:	lsl	x2, x2, #1
    3a6c:	lsl	x3, x3, #1
    3a70:	str	x3, [x19, #104]
    3a74:	strh	wzr, [x0, x2]
    3a78:	bl	0 <memset>
    3a7c:	str	wzr, [x19, #128]
    3a80:	ldrsw	x1, [x19, #196]
    3a84:	adrp	x2, 0 <longest_match>
    3a88:	add	x2, x2, #0x0
    3a8c:	mov	x5, #0x200000000           	// #8589934592
    3a90:	mov	w6, #0x2                   	// #2
    3a94:	str	xzr, [x19, #152]
    3a98:	lsl	x1, x1, #4
    3a9c:	str	w6, [x19, #160]
    3aa0:	add	x3, x2, x1
    3aa4:	str	xzr, [x19, #168]
    3aa8:	stur	x5, [x19, #180]
    3aac:	mov	w0, #0x0                   	// #0
    3ab0:	ldrh	w2, [x2, x1]
    3ab4:	ldrh	w4, [x3, #2]
    3ab8:	ldrh	w1, [x3, #4]
    3abc:	ldrh	w3, [x3, #6]
    3ac0:	stp	w3, w4, [x19, #188]
    3ac4:	stp	w2, w1, [x19, #204]
    3ac8:	str	wzr, [x19, #5932]
    3acc:	ldp	x19, x20, [sp, #16]
    3ad0:	ldp	x29, x30, [sp], #32
    3ad4:	ret
    3ad8:	neg	w1, w0
    3adc:	str	w1, [x20, #48]
    3ae0:	cmn	w0, #0x2
    3ae4:	b.eq	3af0 <deflateReset+0x190>  // b.none
    3ae8:	mov	w0, #0x2a                  	// #42
    3aec:	b	3a2c <deflateReset+0xcc>
    3af0:	mov	w0, #0x39                  	// #57
    3af4:	str	w0, [x20, #8]
    3af8:	mov	w2, #0x0                   	// #0
    3afc:	mov	x1, #0x0                   	// #0
    3b00:	mov	x0, #0x0                   	// #0
    3b04:	bl	0 <crc32>
    3b08:	b	3a40 <deflateReset+0xe0>
    3b0c:	mov	w0, #0xfffffffe            	// #-2
    3b10:	ret
    3b14:	nop

0000000000003b18 <deflateSetHeader>:
    3b18:	mov	x2, x0
    3b1c:	cbz	x0, 3ba4 <deflateSetHeader+0x8c>
    3b20:	ldr	x0, [x0, #64]
    3b24:	cbz	x0, 3ba4 <deflateSetHeader+0x8c>
    3b28:	ldr	x0, [x2, #72]
    3b2c:	cbz	x0, 3ba4 <deflateSetHeader+0x8c>
    3b30:	ldr	x3, [x2, #56]
    3b34:	cbz	x3, 3ba4 <deflateSetHeader+0x8c>
    3b38:	ldr	x4, [x3]
    3b3c:	mov	w0, #0xfffffffe            	// #-2
    3b40:	cmp	x2, x4
    3b44:	b.ne	3ba0 <deflateSetHeader+0x88>  // b.any
    3b48:	ldr	w4, [x3, #8]
    3b4c:	mov	w2, #0x45                  	// #69
    3b50:	mov	w7, #0x5b                  	// #91
    3b54:	mov	w6, #0x29a                 	// #666
    3b58:	cmp	w4, #0x2a
    3b5c:	sub	w5, w4, #0x39
    3b60:	ccmp	w4, w2, #0x4, ne  // ne = any
    3b64:	cset	w2, ne  // ne = any
    3b68:	cmp	w4, #0x67
    3b6c:	ccmp	w4, w7, #0x4, ne  // ne = any
    3b70:	csel	w2, w2, wzr, ne  // ne = any
    3b74:	cmp	w4, #0x71
    3b78:	ccmp	w4, w6, #0x4, ne  // ne = any
    3b7c:	csel	w2, w2, wzr, ne  // ne = any
    3b80:	tst	w5, #0xffffffef
    3b84:	csel	w2, w2, wzr, ne  // ne = any
    3b88:	cbnz	w2, 3ba0 <deflateSetHeader+0x88>
    3b8c:	ldr	w2, [x3, #48]
    3b90:	cmp	w2, #0x2
    3b94:	b.ne	3ba0 <deflateSetHeader+0x88>  // b.any
    3b98:	mov	w0, #0x0                   	// #0
    3b9c:	str	x1, [x3, #56]
    3ba0:	ret
    3ba4:	mov	w0, #0xfffffffe            	// #-2
    3ba8:	ret
    3bac:	nop

0000000000003bb0 <deflatePending>:
    3bb0:	mov	x3, x0
    3bb4:	cbz	x0, 3c44 <deflatePending+0x94>
    3bb8:	ldr	x0, [x0, #64]
    3bbc:	cbz	x0, 3c44 <deflatePending+0x94>
    3bc0:	ldr	x0, [x3, #72]
    3bc4:	cbz	x0, 3c44 <deflatePending+0x94>
    3bc8:	ldr	x4, [x3, #56]
    3bcc:	cbz	x4, 3c44 <deflatePending+0x94>
    3bd0:	ldr	x5, [x4]
    3bd4:	mov	w0, #0xfffffffe            	// #-2
    3bd8:	cmp	x3, x5
    3bdc:	b.ne	3c40 <deflatePending+0x90>  // b.any
    3be0:	ldr	w5, [x4, #8]
    3be4:	mov	w3, #0x45                  	// #69
    3be8:	mov	w8, #0x5b                  	// #91
    3bec:	mov	w7, #0x71                  	// #113
    3bf0:	cmp	w5, #0x2a
    3bf4:	sub	w6, w5, #0x39
    3bf8:	ccmp	w5, w3, #0x4, ne  // ne = any
    3bfc:	cset	w3, ne  // ne = any
    3c00:	cmp	w5, #0x67
    3c04:	ccmp	w5, w8, #0x4, ne  // ne = any
    3c08:	csel	w3, w3, wzr, ne  // ne = any
    3c0c:	cmp	w5, #0x29a
    3c10:	ccmp	w5, w7, #0x4, ne  // ne = any
    3c14:	csel	w3, w3, wzr, ne  // ne = any
    3c18:	tst	w6, #0xffffffef
    3c1c:	csel	w3, w3, wzr, ne  // ne = any
    3c20:	cbnz	w3, 3c40 <deflatePending+0x90>
    3c24:	cbz	x1, 3c30 <deflatePending+0x80>
    3c28:	ldr	x0, [x4, #40]
    3c2c:	str	w0, [x1]
    3c30:	mov	w0, #0x0                   	// #0
    3c34:	cbz	x2, 3c40 <deflatePending+0x90>
    3c38:	ldr	w1, [x4, #5940]
    3c3c:	str	w1, [x2]
    3c40:	ret
    3c44:	mov	w0, #0xfffffffe            	// #-2
    3c48:	ret
    3c4c:	nop

0000000000003c50 <deflatePrime>:
    3c50:	stp	x29, x30, [sp, #-64]!
    3c54:	mov	x29, sp
    3c58:	stp	x19, x20, [sp, #16]
    3c5c:	cbz	x0, 3ca4 <deflatePrime+0x54>
    3c60:	mov	w20, w1
    3c64:	ldr	x1, [x0, #64]
    3c68:	cbz	x1, 3ca4 <deflatePrime+0x54>
    3c6c:	ldr	x1, [x0, #72]
    3c70:	cbz	x1, 3ca4 <deflatePrime+0x54>
    3c74:	stp	x23, x24, [sp, #48]
    3c78:	ldr	x23, [x0, #56]
    3c7c:	cbz	x23, 3c8c <deflatePrime+0x3c>
    3c80:	ldr	x1, [x23]
    3c84:	cmp	x0, x1
    3c88:	b.eq	3cb8 <deflatePrime+0x68>  // b.none
    3c8c:	ldp	x23, x24, [sp, #48]
    3c90:	mov	w20, #0xfffffffe            	// #-2
    3c94:	mov	w0, w20
    3c98:	ldp	x19, x20, [sp, #16]
    3c9c:	ldp	x29, x30, [sp], #64
    3ca0:	ret
    3ca4:	mov	w20, #0xfffffffe            	// #-2
    3ca8:	mov	w0, w20
    3cac:	ldp	x19, x20, [sp, #16]
    3cb0:	ldp	x29, x30, [sp], #64
    3cb4:	ret
    3cb8:	ldr	w1, [x23, #8]
    3cbc:	mov	w0, #0x5b                  	// #91
    3cc0:	mov	w4, #0x45                  	// #69
    3cc4:	mov	w24, w2
    3cc8:	cmp	w1, #0x67
    3ccc:	sub	w2, w1, #0x39
    3cd0:	ccmp	w1, w0, #0x4, ne  // ne = any
    3cd4:	mov	w3, #0x71                  	// #113
    3cd8:	cset	w0, ne  // ne = any
    3cdc:	cmp	w1, #0x2a
    3ce0:	ccmp	w1, w4, #0x4, ne  // ne = any
    3ce4:	stp	x21, x22, [sp, #32]
    3ce8:	csel	w0, w0, wzr, ne  // ne = any
    3cec:	cmp	w1, #0x29a
    3cf0:	ccmp	w1, w3, #0x4, ne  // ne = any
    3cf4:	csel	w0, w0, wzr, ne  // ne = any
    3cf8:	tst	w2, #0xffffffef
    3cfc:	csel	w0, w0, wzr, ne  // ne = any
    3d00:	cbnz	w0, 3d80 <deflatePrime+0x130>
    3d04:	ldr	x0, [x23, #32]
    3d08:	ldr	x1, [x23, #5904]
    3d0c:	add	x0, x0, #0x2
    3d10:	cmp	x1, x0
    3d14:	b.cc	3d90 <deflatePrime+0x140>  // b.lo, b.ul, b.last
    3d18:	mov	w22, #0x10                  	// #16
    3d1c:	mov	w21, #0x1                   	// #1
    3d20:	ldr	w1, [x23, #5940]
    3d24:	mov	x0, x23
    3d28:	ldrh	w2, [x23, #5936]
    3d2c:	sub	w19, w22, w1
    3d30:	cmp	w20, w19
    3d34:	csel	w19, w20, w19, le
    3d38:	add	w3, w1, w19
    3d3c:	str	w3, [x23, #5940]
    3d40:	lsl	w3, w21, w19
    3d44:	sub	w3, w3, #0x1
    3d48:	and	w3, w3, w24
    3d4c:	asr	w24, w24, w19
    3d50:	lsl	w3, w3, w1
    3d54:	orr	w3, w3, w2
    3d58:	strh	w3, [x23, #5936]
    3d5c:	bl	0 <_tr_flush_bits>
    3d60:	subs	w20, w20, w19
    3d64:	b.ne	3d20 <deflatePrime+0xd0>  // b.any
    3d68:	mov	w0, w20
    3d6c:	ldp	x19, x20, [sp, #16]
    3d70:	ldp	x21, x22, [sp, #32]
    3d74:	ldp	x23, x24, [sp, #48]
    3d78:	ldp	x29, x30, [sp], #64
    3d7c:	ret
    3d80:	mov	w20, #0xfffffffe            	// #-2
    3d84:	ldp	x21, x22, [sp, #32]
    3d88:	ldp	x23, x24, [sp, #48]
    3d8c:	b	3c94 <deflatePrime+0x44>
    3d90:	mov	w20, #0xfffffffb            	// #-5
    3d94:	b	3d68 <deflatePrime+0x118>

0000000000003d98 <deflateParams>:
    3d98:	cbz	x0, 3f38 <deflateParams+0x1a0>
    3d9c:	stp	x29, x30, [sp, #-48]!
    3da0:	mov	x29, sp
    3da4:	stp	x19, x20, [sp, #16]
    3da8:	mov	x19, x0
    3dac:	ldr	x0, [x0, #64]
    3db0:	cbz	x0, 3ed8 <deflateParams+0x140>
    3db4:	ldr	x0, [x19, #72]
    3db8:	cbz	x0, 3ed8 <deflateParams+0x140>
    3dbc:	ldr	x20, [x19, #56]
    3dc0:	cbz	x20, 3ed8 <deflateParams+0x140>
    3dc4:	ldr	x0, [x20]
    3dc8:	cmp	x19, x0
    3dcc:	b.ne	3ed8 <deflateParams+0x140>  // b.any
    3dd0:	stp	x21, x22, [sp, #32]
    3dd4:	mov	w21, w1
    3dd8:	ldr	w1, [x20, #8]
    3ddc:	mov	w0, #0x2a                  	// #42
    3de0:	mov	w4, #0x67                  	// #103
    3de4:	cmp	w1, #0x45
    3de8:	mov	w22, w2
    3dec:	ccmp	w1, w0, #0x4, ne  // ne = any
    3df0:	sub	w2, w1, #0x39
    3df4:	cset	w0, ne  // ne = any
    3df8:	cmp	w1, #0x5b
    3dfc:	ccmp	w1, w4, #0x4, ne  // ne = any
    3e00:	mov	w3, #0x29a                 	// #666
    3e04:	csel	w0, w0, wzr, ne  // ne = any
    3e08:	cmp	w1, #0x71
    3e0c:	ccmp	w1, w3, #0x4, ne  // ne = any
    3e10:	csel	w0, w0, wzr, ne  // ne = any
    3e14:	tst	w2, #0xffffffef
    3e18:	csel	w0, w0, wzr, ne  // ne = any
    3e1c:	cbnz	w0, 3ed0 <deflateParams+0x138>
    3e20:	cmn	w21, #0x1
    3e24:	b.eq	3ee8 <deflateParams+0x150>  // b.none
    3e28:	cmp	w21, #0x9
    3e2c:	cset	w0, hi  // hi = pmore
    3e30:	cmp	w0, #0x0
    3e34:	ccmp	w22, #0x4, #0x2, eq  // eq = none
    3e38:	b.hi	3ed0 <deflateParams+0x138>  // b.pmore
    3e3c:	ldp	w0, w1, [x20, #196]
    3e40:	cmp	w1, w22
    3e44:	b.eq	3ef0 <deflateParams+0x158>  // b.none
    3e48:	ldr	x1, [x20, #5944]
    3e4c:	cbnz	x1, 3f14 <deflateParams+0x17c>
    3e50:	cmp	w21, w0
    3e54:	b.eq	3eb8 <deflateParams+0x120>  // b.none
    3e58:	cbnz	w0, 3e8c <deflateParams+0xf4>
    3e5c:	ldr	w0, [x20, #5928]
    3e60:	cbz	w0, 3e8c <deflateParams+0xf4>
    3e64:	ldr	w7, [x20, #132]
    3e68:	cmp	w0, #0x1
    3e6c:	ldr	x0, [x20, #120]
    3e70:	sub	w4, w7, #0x1
    3e74:	ubfiz	x2, x4, #1, #32
    3e78:	b.eq	3f40 <deflateParams+0x1a8>  // b.none
    3e7c:	strh	wzr, [x0, x2]
    3e80:	mov	w1, #0x0                   	// #0
    3e84:	bl	0 <memset>
    3e88:	str	wzr, [x20, #5928]
    3e8c:	sbfiz	x2, x21, #4, #32
    3e90:	adrp	x0, 0 <longest_match>
    3e94:	add	x0, x0, #0x0
    3e98:	str	w21, [x20, #196]
    3e9c:	add	x1, x0, x2
    3ea0:	ldrh	w2, [x0, x2]
    3ea4:	ldrh	w3, [x1, #2]
    3ea8:	ldrh	w0, [x1, #4]
    3eac:	ldrh	w1, [x1, #6]
    3eb0:	stp	w1, w3, [x20, #188]
    3eb4:	stp	w2, w0, [x20, #204]
    3eb8:	str	w22, [x20, #200]
    3ebc:	mov	w0, #0x0                   	// #0
    3ec0:	ldp	x19, x20, [sp, #16]
    3ec4:	ldp	x21, x22, [sp, #32]
    3ec8:	ldp	x29, x30, [sp], #48
    3ecc:	ret
    3ed0:	ldp	x21, x22, [sp, #32]
    3ed4:	nop
    3ed8:	mov	w0, #0xfffffffe            	// #-2
    3edc:	ldp	x19, x20, [sp, #16]
    3ee0:	ldp	x29, x30, [sp], #48
    3ee4:	ret
    3ee8:	mov	w21, #0x6                   	// #6
    3eec:	b	3e30 <deflateParams+0x98>
    3ef0:	adrp	x1, 0 <longest_match>
    3ef4:	add	x1, x1, #0x0
    3ef8:	add	x2, x1, w21, sxtw #4
    3efc:	add	x1, x1, w0, sxtw #4
    3f00:	ldr	x2, [x2, #8]
    3f04:	ldr	x1, [x1, #8]
    3f08:	cmp	x2, x1
    3f0c:	b.ne	3e48 <deflateParams+0xb0>  // b.any
    3f10:	b	3e50 <deflateParams+0xb8>
    3f14:	mov	x0, x19
    3f18:	mov	w1, #0x5                   	// #5
    3f1c:	bl	1bd0 <deflate.part.0>
    3f20:	cmn	w0, #0x2
    3f24:	b.eq	3ed0 <deflateParams+0x138>  // b.none
    3f28:	ldr	w0, [x19, #32]
    3f2c:	cbz	w0, 422c <deflateParams+0x494>
    3f30:	ldr	w0, [x20, #196]
    3f34:	b	3e50 <deflateParams+0xb8>
    3f38:	mov	w0, #0xfffffffe            	// #-2
    3f3c:	ret
    3f40:	ldr	w1, [x20, #80]
    3f44:	ubfiz	x3, x7, #1, #32
    3f48:	cmp	w4, #0x6
    3f4c:	add	x8, x0, x3
    3f50:	and	w4, w1, #0xffff
    3f54:	fmov	s6, w4
    3f58:	b.ls	4224 <deflateParams+0x48c>  // b.plast
    3f5c:	sub	w5, w7, #0x8
    3f60:	adrp	x4, 0 <longest_match>
    3f64:	dup	v7.8h, v6.h[0]
    3f68:	sub	x3, x3, #0x10
    3f6c:	lsr	w5, w5, #3
    3f70:	dup	v4.4s, w1
    3f74:	add	w5, w5, #0x1
    3f78:	add	x6, x0, x3
    3f7c:	ldr	q3, [x4]
    3f80:	mov	x3, #0x0                   	// #0
    3f84:	mov	w4, #0x0                   	// #0
    3f88:	ldr	q0, [x6, x3]
    3f8c:	add	w4, w4, #0x1
    3f90:	cmp	w4, w5
    3f94:	tbl	v0.16b, {v0.16b}, v3.16b
    3f98:	uxtl	v2.4s, v0.4h
    3f9c:	uxtl2	v1.4s, v0.8h
    3fa0:	sub	v0.8h, v0.8h, v7.8h
    3fa4:	cmhs	v2.4s, v2.4s, v4.4s
    3fa8:	cmhs	v1.4s, v1.4s, v4.4s
    3fac:	xtn	v5.4h, v2.4s
    3fb0:	xtn2	v5.8h, v1.4s
    3fb4:	and	v0.16b, v0.16b, v5.16b
    3fb8:	tbl	v0.16b, {v0.16b}, v3.16b
    3fbc:	str	q0, [x6, x3]
    3fc0:	sub	x3, x3, #0x10
    3fc4:	b.cc	3f88 <deflateParams+0x1f0>  // b.lo, b.ul, b.last
    3fc8:	lsl	w3, w5, #3
    3fcc:	subs	w5, w7, w3
    3fd0:	sub	x8, x8, x3, lsl #1
    3fd4:	b.eq	40b0 <deflateParams+0x318>  // b.none
    3fd8:	ldurh	w4, [x8, #-2]
    3fdc:	sub	w3, w4, w1
    3fe0:	cmp	w1, w4
    3fe4:	and	w3, w3, #0xffff
    3fe8:	csel	w3, w3, wzr, ls  // ls = plast
    3fec:	sturh	w3, [x8, #-2]
    3ff0:	cmp	w5, #0x1
    3ff4:	b.eq	40b0 <deflateParams+0x318>  // b.none
    3ff8:	ldurh	w4, [x8, #-4]
    3ffc:	sub	w3, w4, w1
    4000:	cmp	w1, w4
    4004:	and	w3, w3, #0xffff
    4008:	csel	w3, w3, wzr, ls  // ls = plast
    400c:	sturh	w3, [x8, #-4]
    4010:	cmp	w5, #0x2
    4014:	b.eq	40b0 <deflateParams+0x318>  // b.none
    4018:	ldurh	w4, [x8, #-6]
    401c:	sub	w3, w4, w1
    4020:	cmp	w1, w4
    4024:	and	w3, w3, #0xffff
    4028:	csel	w3, w3, wzr, ls  // ls = plast
    402c:	sturh	w3, [x8, #-6]
    4030:	cmp	w5, #0x3
    4034:	b.eq	40b0 <deflateParams+0x318>  // b.none
    4038:	ldurh	w4, [x8, #-8]
    403c:	sub	w3, w4, w1
    4040:	cmp	w1, w4
    4044:	and	w3, w3, #0xffff
    4048:	csel	w3, w3, wzr, ls  // ls = plast
    404c:	sturh	w3, [x8, #-8]
    4050:	cmp	w5, #0x4
    4054:	b.eq	40b0 <deflateParams+0x318>  // b.none
    4058:	ldurh	w4, [x8, #-10]
    405c:	sub	w3, w4, w1
    4060:	cmp	w1, w4
    4064:	and	w3, w3, #0xffff
    4068:	csel	w3, w3, wzr, ls  // ls = plast
    406c:	sturh	w3, [x8, #-10]
    4070:	cmp	w5, #0x5
    4074:	b.eq	40b0 <deflateParams+0x318>  // b.none
    4078:	ldurh	w4, [x8, #-12]
    407c:	sub	w3, w4, w1
    4080:	cmp	w1, w4
    4084:	and	w3, w3, #0xffff
    4088:	csel	w3, w3, wzr, ls  // ls = plast
    408c:	sturh	w3, [x8, #-12]
    4090:	cmp	w5, #0x6
    4094:	b.eq	40b0 <deflateParams+0x318>  // b.none
    4098:	ldurh	w4, [x8, #-14]
    409c:	sub	w3, w4, w1
    40a0:	cmp	w1, w4
    40a4:	and	w3, w3, #0xffff
    40a8:	csel	w3, w3, wzr, ls  // ls = plast
    40ac:	sturh	w3, [x8, #-14]
    40b0:	ldr	x6, [x20, #112]
    40b4:	ubfiz	x3, x1, #1, #32
    40b8:	sub	w4, w1, #0x1
    40bc:	cmp	w4, #0x6
    40c0:	add	x7, x6, x3
    40c4:	b.ls	421c <deflateParams+0x484>  // b.plast
    40c8:	sub	w5, w1, #0x8
    40cc:	adrp	x4, 0 <longest_match>
    40d0:	dup	v6.8h, v6.h[0]
    40d4:	sub	x3, x3, #0x10
    40d8:	lsr	w5, w5, #3
    40dc:	dup	v4.4s, w1
    40e0:	add	w5, w5, #0x1
    40e4:	add	x6, x6, x3
    40e8:	ldr	q3, [x4]
    40ec:	mov	x3, #0x0                   	// #0
    40f0:	mov	w4, #0x0                   	// #0
    40f4:	nop
    40f8:	ldr	q0, [x6, x3]
    40fc:	add	w4, w4, #0x1
    4100:	cmp	w5, w4
    4104:	tbl	v0.16b, {v0.16b}, v3.16b
    4108:	uxtl	v2.4s, v0.4h
    410c:	uxtl2	v1.4s, v0.8h
    4110:	sub	v0.8h, v0.8h, v6.8h
    4114:	cmhs	v2.4s, v2.4s, v4.4s
    4118:	cmhs	v1.4s, v1.4s, v4.4s
    411c:	xtn	v5.4h, v2.4s
    4120:	xtn2	v5.8h, v1.4s
    4124:	and	v0.16b, v0.16b, v5.16b
    4128:	tbl	v0.16b, {v0.16b}, v3.16b
    412c:	str	q0, [x6, x3]
    4130:	sub	x3, x3, #0x10
    4134:	b.hi	40f8 <deflateParams+0x360>  // b.pmore
    4138:	lsl	w4, w5, #3
    413c:	subs	w3, w1, w4
    4140:	sub	x7, x7, x4, lsl #1
    4144:	b.eq	3e80 <deflateParams+0xe8>  // b.none
    4148:	ldurh	w5, [x7, #-2]
    414c:	sub	w4, w5, w1
    4150:	cmp	w1, w5
    4154:	and	w4, w4, #0xffff
    4158:	csel	w4, w4, wzr, ls  // ls = plast
    415c:	sturh	w4, [x7, #-2]
    4160:	cmp	w3, #0x1
    4164:	b.eq	3e80 <deflateParams+0xe8>  // b.none
    4168:	ldurh	w5, [x7, #-4]
    416c:	sub	w4, w5, w1
    4170:	cmp	w1, w5
    4174:	and	w4, w4, #0xffff
    4178:	csel	w4, w4, wzr, ls  // ls = plast
    417c:	sturh	w4, [x7, #-4]
    4180:	cmp	w3, #0x2
    4184:	b.eq	3e80 <deflateParams+0xe8>  // b.none
    4188:	ldurh	w5, [x7, #-6]
    418c:	sub	w4, w5, w1
    4190:	cmp	w1, w5
    4194:	and	w4, w4, #0xffff
    4198:	csel	w4, w4, wzr, ls  // ls = plast
    419c:	sturh	w4, [x7, #-6]
    41a0:	cmp	w3, #0x3
    41a4:	b.eq	3e80 <deflateParams+0xe8>  // b.none
    41a8:	ldurh	w5, [x7, #-8]
    41ac:	subs	w4, w5, w1
    41b0:	and	w4, w4, #0xffff
    41b4:	csel	w4, w4, wzr, cs  // cs = hs, nlast
    41b8:	sturh	w4, [x7, #-8]
    41bc:	cmp	w3, #0x4
    41c0:	b.eq	3e80 <deflateParams+0xe8>  // b.none
    41c4:	ldurh	w5, [x7, #-10]
    41c8:	sub	w4, w5, w1
    41cc:	cmp	w1, w5
    41d0:	and	w4, w4, #0xffff
    41d4:	csel	w4, w4, wzr, ls  // ls = plast
    41d8:	sturh	w4, [x7, #-10]
    41dc:	cmp	w3, #0x5
    41e0:	b.eq	3e80 <deflateParams+0xe8>  // b.none
    41e4:	ldurh	w5, [x7, #-12]
    41e8:	subs	w4, w5, w1
    41ec:	and	w4, w4, #0xffff
    41f0:	csel	w4, w4, wzr, cs  // cs = hs, nlast
    41f4:	sturh	w4, [x7, #-12]
    41f8:	cmp	w3, #0x6
    41fc:	b.eq	3e80 <deflateParams+0xe8>  // b.none
    4200:	ldurh	w4, [x7, #-14]
    4204:	sub	w3, w4, w1
    4208:	cmp	w1, w4
    420c:	and	w1, w3, #0xffff
    4210:	csel	w1, w1, wzr, ls  // ls = plast
    4214:	sturh	w1, [x7, #-14]
    4218:	b	3e80 <deflateParams+0xe8>
    421c:	mov	w3, w1
    4220:	b	4148 <deflateParams+0x3b0>
    4224:	mov	w5, w7
    4228:	b	3fd8 <deflateParams+0x240>
    422c:	mov	w0, #0xfffffffb            	// #-5
    4230:	ldp	x21, x22, [sp, #32]
    4234:	b	3edc <deflateParams+0x144>

0000000000004238 <deflateTune>:
    4238:	mov	x5, x0
    423c:	cbz	x0, 42bc <deflateTune+0x84>
    4240:	ldr	x0, [x0, #64]
    4244:	cbz	x0, 42bc <deflateTune+0x84>
    4248:	ldr	x0, [x5, #72]
    424c:	cbz	x0, 42bc <deflateTune+0x84>
    4250:	ldr	x6, [x5, #56]
    4254:	cbz	x6, 42bc <deflateTune+0x84>
    4258:	ldr	x7, [x6]
    425c:	mov	w0, #0xfffffffe            	// #-2
    4260:	cmp	x5, x7
    4264:	b.ne	42b8 <deflateTune+0x80>  // b.any
    4268:	ldr	w7, [x6, #8]
    426c:	mov	w5, #0x45                  	// #69
    4270:	mov	w10, #0x5b                  	// #91
    4274:	mov	w9, #0x29a                 	// #666
    4278:	cmp	w7, #0x2a
    427c:	sub	w8, w7, #0x39
    4280:	ccmp	w7, w5, #0x4, ne  // ne = any
    4284:	cset	w5, ne  // ne = any
    4288:	cmp	w7, #0x67
    428c:	ccmp	w7, w10, #0x4, ne  // ne = any
    4290:	csel	w5, w5, wzr, ne  // ne = any
    4294:	cmp	w7, #0x71
    4298:	ccmp	w7, w9, #0x4, ne  // ne = any
    429c:	csel	w5, w5, wzr, ne  // ne = any
    42a0:	tst	w8, #0xffffffef
    42a4:	csel	w5, w5, wzr, ne  // ne = any
    42a8:	cbnz	w5, 42b8 <deflateTune+0x80>
    42ac:	mov	w0, #0x0                   	// #0
    42b0:	stp	w4, w2, [x6, #188]
    42b4:	stp	w1, w3, [x6, #204]
    42b8:	ret
    42bc:	mov	w0, #0xfffffffe            	// #-2
    42c0:	ret
    42c4:	nop

00000000000042c8 <deflateBound>:
    42c8:	add	x6, x1, #0x7
    42cc:	add	x2, x1, #0x3f
    42d0:	lsr	x3, x6, #3
    42d4:	add	x2, x3, x2, lsr #6
    42d8:	add	x4, x2, x1
    42dc:	cbz	x0, 4398 <deflateBound+0xd0>
    42e0:	ldr	x2, [x0, #64]
    42e4:	cbz	x2, 4398 <deflateBound+0xd0>
    42e8:	ldr	x2, [x0, #72]
    42ec:	cbz	x2, 4398 <deflateBound+0xd0>
    42f0:	ldr	x5, [x0, #56]
    42f4:	cbz	x5, 4398 <deflateBound+0xd0>
    42f8:	ldr	x2, [x5]
    42fc:	cmp	x0, x2
    4300:	b.ne	4398 <deflateBound+0xd0>  // b.any
    4304:	ldr	w2, [x5, #8]
    4308:	mov	w0, #0x45                  	// #69
    430c:	mov	w8, #0x67                  	// #103
    4310:	mov	w7, #0x71                  	// #113
    4314:	cmp	w2, #0x2a
    4318:	sub	w3, w2, #0x39
    431c:	ccmp	w2, w0, #0x4, ne  // ne = any
    4320:	cset	w0, ne  // ne = any
    4324:	cmp	w2, #0x5b
    4328:	ccmp	w2, w8, #0x4, ne  // ne = any
    432c:	csel	w0, w0, wzr, ne  // ne = any
    4330:	cmp	w2, #0x29a
    4334:	ccmp	w2, w7, #0x4, ne  // ne = any
    4338:	csel	w0, w0, wzr, ne  // ne = any
    433c:	tst	w3, #0xffffffef
    4340:	csel	w0, w0, wzr, ne  // ne = any
    4344:	cbnz	w0, 4398 <deflateBound+0xd0>
    4348:	ldr	w0, [x5, #48]
    434c:	cmp	w0, #0x1
    4350:	b.eq	4420 <deflateBound+0x158>  // b.none
    4354:	cmp	w0, #0x2
    4358:	b.eq	43ac <deflateBound+0xe4>  // b.none
    435c:	cmp	w0, #0x0
    4360:	mov	x2, #0x6                   	// #6
    4364:	csel	x2, x2, xzr, ne  // ne = any
    4368:	ldr	w0, [x5, #84]
    436c:	cmp	w0, #0xf
    4370:	b.ne	43a0 <deflateBound+0xd8>  // b.any
    4374:	ldr	w0, [x5, #136]
    4378:	cmp	w0, #0xf
    437c:	b.ne	43a0 <deflateBound+0xd8>  // b.any
    4380:	lsr	x0, x1, #25
    4384:	add	x6, x6, x1, lsr #12
    4388:	add	x0, x0, x1, lsr #14
    438c:	add	x0, x0, x6
    4390:	add	x0, x0, x2
    4394:	ret
    4398:	add	x0, x4, #0xb
    439c:	ret
    43a0:	add	x0, x4, #0x5
    43a4:	add	x0, x0, x2
    43a8:	ret
    43ac:	ldr	x7, [x5, #56]
    43b0:	mov	x2, #0x12                  	// #18
    43b4:	cbz	x7, 4368 <deflateBound+0xa0>
    43b8:	ldr	x0, [x7, #24]
    43bc:	cbz	x0, 43cc <deflateBound+0x104>
    43c0:	ldr	w3, [x7, #32]
    43c4:	add	w3, w3, #0x2
    43c8:	add	x2, x3, x2
    43cc:	ldr	x3, [x7, #40]
    43d0:	cbz	x3, 43ec <deflateBound+0x124>
    43d4:	mvn	x0, x2
    43d8:	add	x3, x3, x0
    43dc:	nop
    43e0:	add	x2, x2, #0x1
    43e4:	ldrb	w0, [x3, x2]
    43e8:	cbnz	w0, 43e0 <deflateBound+0x118>
    43ec:	ldr	x3, [x7, #56]
    43f0:	cbz	x3, 440c <deflateBound+0x144>
    43f4:	mvn	x0, x2
    43f8:	add	x3, x3, x0
    43fc:	nop
    4400:	add	x2, x2, #0x1
    4404:	ldrb	w0, [x3, x2]
    4408:	cbnz	w0, 4400 <deflateBound+0x138>
    440c:	ldr	w3, [x7, #68]
    4410:	add	x0, x2, #0x2
    4414:	cmp	w3, #0x0
    4418:	csel	x2, x0, x2, ne  // ne = any
    441c:	b	4368 <deflateBound+0xa0>
    4420:	ldr	w0, [x5, #172]
    4424:	mov	x3, #0xa                   	// #10
    4428:	mov	x2, #0x6                   	// #6
    442c:	cmp	w0, #0x0
    4430:	csel	x2, x3, x2, ne  // ne = any
    4434:	b	4368 <deflateBound+0xa0>

0000000000004438 <deflate>:
    4438:	cbz	x0, 4460 <deflate+0x28>
    443c:	ldr	x4, [x0, #64]
    4440:	cbz	x4, 4460 <deflate+0x28>
    4444:	ldr	x4, [x0, #72]
    4448:	cbz	x4, 4460 <deflate+0x28>
    444c:	ldr	x4, [x0, #56]
    4450:	cbz	x4, 4460 <deflate+0x28>
    4454:	ldr	x5, [x4]
    4458:	cmp	x0, x5
    445c:	b.eq	4468 <deflate+0x30>  // b.none
    4460:	mov	w0, #0xfffffffe            	// #-2
    4464:	ret
    4468:	ldr	w4, [x4, #8]
    446c:	mov	w2, #0x45                  	// #69
    4470:	mov	w7, #0x5b                  	// #91
    4474:	mov	w6, #0x71                  	// #113
    4478:	cmp	w4, #0x2a
    447c:	sub	w5, w4, #0x39
    4480:	ccmp	w4, w2, #0x4, ne  // ne = any
    4484:	cset	w2, ne  // ne = any
    4488:	cmp	w4, #0x67
    448c:	ccmp	w4, w7, #0x4, ne  // ne = any
    4490:	csel	w2, w2, wzr, ne  // ne = any
    4494:	cmp	w4, #0x29a
    4498:	ccmp	w4, w6, #0x4, ne  // ne = any
    449c:	csel	w2, w2, wzr, ne  // ne = any
    44a0:	tst	w5, #0xffffffef
    44a4:	csel	w2, w2, wzr, ne  // ne = any
    44a8:	cbnz	w2, 4460 <deflate+0x28>
    44ac:	cmp	w1, #0x5
    44b0:	b.hi	4460 <deflate+0x28>  // b.pmore
    44b4:	b	1bd0 <deflate.part.0>

00000000000044b8 <deflateEnd>:
    44b8:	cbz	x0, 45cc <deflateEnd+0x114>
    44bc:	stp	x29, x30, [sp, #-32]!
    44c0:	mov	x29, sp
    44c4:	stp	x19, x20, [sp, #16]
    44c8:	mov	x19, x0
    44cc:	ldr	x0, [x0, #64]
    44d0:	cbz	x0, 4500 <deflateEnd+0x48>
    44d4:	ldr	x3, [x19, #72]
    44d8:	cbz	x3, 4500 <deflateEnd+0x48>
    44dc:	ldr	x2, [x19, #56]
    44e0:	cbz	x2, 4500 <deflateEnd+0x48>
    44e4:	ldr	x1, [x2]
    44e8:	mov	w0, #0xfffffffe            	// #-2
    44ec:	cmp	x19, x1
    44f0:	b.eq	4510 <deflateEnd+0x58>  // b.none
    44f4:	ldp	x19, x20, [sp, #16]
    44f8:	ldp	x29, x30, [sp], #32
    44fc:	ret
    4500:	mov	w0, #0xfffffffe            	// #-2
    4504:	ldp	x19, x20, [sp, #16]
    4508:	ldp	x29, x30, [sp], #32
    450c:	ret
    4510:	ldr	w20, [x2, #8]
    4514:	mov	w1, #0x45                  	// #69
    4518:	mov	w6, #0x5b                  	// #91
    451c:	mov	w5, #0x71                  	// #113
    4520:	cmp	w20, #0x2a
    4524:	sub	w4, w20, #0x39
    4528:	ccmp	w20, w1, #0x4, ne  // ne = any
    452c:	cset	w1, ne  // ne = any
    4530:	cmp	w20, #0x67
    4534:	ccmp	w20, w6, #0x4, ne  // ne = any
    4538:	csel	w1, w1, wzr, ne  // ne = any
    453c:	cmp	w20, #0x29a
    4540:	ccmp	w20, w5, #0x4, ne  // ne = any
    4544:	csel	w1, w1, wzr, ne  // ne = any
    4548:	tst	w4, #0xffffffef
    454c:	csel	w1, w1, wzr, ne  // ne = any
    4550:	cbnz	w1, 44f4 <deflateEnd+0x3c>
    4554:	ldr	x1, [x2, #16]
    4558:	ldr	x0, [x19, #80]
    455c:	cbz	x1, 456c <deflateEnd+0xb4>
    4560:	blr	x3
    4564:	ldp	x3, x0, [x19, #72]
    4568:	ldr	x2, [x19, #56]
    456c:	ldr	x1, [x2, #120]
    4570:	cbz	x1, 4580 <deflateEnd+0xc8>
    4574:	blr	x3
    4578:	ldp	x3, x0, [x19, #72]
    457c:	ldr	x2, [x19, #56]
    4580:	ldr	x1, [x2, #112]
    4584:	cbz	x1, 4594 <deflateEnd+0xdc>
    4588:	blr	x3
    458c:	ldp	x3, x0, [x19, #72]
    4590:	ldr	x2, [x19, #56]
    4594:	ldr	x1, [x2, #96]
    4598:	cbz	x1, 45a8 <deflateEnd+0xf0>
    459c:	blr	x3
    45a0:	ldp	x3, x0, [x19, #72]
    45a4:	ldr	x2, [x19, #56]
    45a8:	mov	x1, x2
    45ac:	blr	x3
    45b0:	str	xzr, [x19, #56]
    45b4:	cmp	w20, #0x71
    45b8:	mov	w0, #0xfffffffd            	// #-3
    45bc:	csel	w0, w0, wzr, eq  // eq = none
    45c0:	ldp	x19, x20, [sp, #16]
    45c4:	ldp	x29, x30, [sp], #32
    45c8:	ret
    45cc:	mov	w0, #0xfffffffe            	// #-2
    45d0:	ret
    45d4:	nop

00000000000045d8 <deflateInit2_>:
    45d8:	stp	x29, x30, [sp, #-80]!
    45dc:	mov	x29, sp
    45e0:	stp	x19, x20, [sp, #16]
    45e4:	cbz	x6, 48d0 <deflateInit2_+0x2f8>
    45e8:	mov	x20, x0
    45ec:	ldrb	w0, [x6]
    45f0:	cmp	w0, #0x31
    45f4:	cset	w0, ne  // ne = any
    45f8:	cmp	w7, #0x70
    45fc:	csinc	w0, w0, wzr, eq  // eq = none
    4600:	cbnz	w0, 48d0 <deflateInit2_+0x2f8>
    4604:	cbz	x20, 48c8 <deflateInit2_+0x2f0>
    4608:	stp	x21, x22, [sp, #32]
    460c:	mov	w22, w4
    4610:	ldr	x4, [x20, #64]
    4614:	stp	x23, x24, [sp, #48]
    4618:	mov	w24, w1
    461c:	stp	x25, x26, [sp, #64]
    4620:	mov	w23, w5
    4624:	str	xzr, [x20, #48]
    4628:	cbz	x4, 48a4 <deflateInit2_+0x2cc>
    462c:	ldr	x1, [x20, #72]
    4630:	cbz	x1, 4894 <deflateInit2_+0x2bc>
    4634:	cmn	w24, #0x1
    4638:	mov	w1, #0x6                   	// #6
    463c:	csel	w24, w24, w1, ne  // ne = any
    4640:	tbnz	w3, #31, 47f0 <deflateInit2_+0x218>
    4644:	cmp	w3, #0xf
    4648:	mov	w26, #0x1                   	// #1
    464c:	b.gt	47e0 <deflateInit2_+0x208>
    4650:	sub	w1, w22, #0x1
    4654:	cmp	w1, #0x8
    4658:	b.hi	48bc <deflateInit2_+0x2e4>  // b.pmore
    465c:	sub	w1, w3, #0x8
    4660:	cmp	w1, #0x7
    4664:	ccmp	w2, #0x8, #0x0, ls  // ls = plast
    4668:	b.ne	48bc <deflateInit2_+0x2e4>  // b.any
    466c:	cmp	w24, #0x9
    4670:	ccmp	w23, #0x4, #0x2, ls  // ls = plast
    4674:	b.hi	48bc <deflateInit2_+0x2e4>  // b.pmore
    4678:	cmp	w0, #0x0
    467c:	ccmp	w3, #0x8, #0x0, ne  // ne = any
    4680:	b.eq	48bc <deflateInit2_+0x2e4>  // b.none
    4684:	ldr	x0, [x20, #80]
    4688:	cmp	w3, #0x8
    468c:	mov	w21, #0x9                   	// #9
    4690:	mov	w2, #0x1740                	// #5952
    4694:	csel	w21, w3, w21, ne  // ne = any
    4698:	mov	w1, #0x1                   	// #1
    469c:	blr	x4
    46a0:	mov	x19, x0
    46a4:	cbz	x0, 4908 <deflateInit2_+0x330>
    46a8:	add	w3, w22, #0x9
    46ac:	mov	w0, #0xaaab                	// #43691
    46b0:	movk	w0, #0xaaaa, lsl #16
    46b4:	add	w4, w22, #0x7
    46b8:	mov	w25, #0x1                   	// #1
    46bc:	str	x19, [x20, #56]
    46c0:	umull	x3, w3, w0
    46c4:	lsl	w5, w25, w4
    46c8:	ldr	x6, [x20, #64]
    46cc:	sub	w7, w5, #0x1
    46d0:	ldr	x0, [x20, #80]
    46d4:	lsl	w1, w25, w21
    46d8:	lsr	x3, x3, #33
    46dc:	sub	w8, w1, #0x1
    46e0:	mov	w2, #0x2a                  	// #42
    46e4:	str	x20, [x19]
    46e8:	str	w2, [x19, #8]
    46ec:	mov	w2, #0x2                   	// #2
    46f0:	str	w26, [x19, #48]
    46f4:	add	w22, w22, #0x6
    46f8:	str	xzr, [x19, #56]
    46fc:	stp	w1, w21, [x19, #80]
    4700:	str	w8, [x19, #88]
    4704:	stp	w5, w4, [x19, #132]
    4708:	stp	w7, w3, [x19, #140]
    470c:	blr	x6
    4710:	ldr	w1, [x19, #80]
    4714:	mov	w2, #0x2                   	// #2
    4718:	ldr	x3, [x20, #64]
    471c:	str	x0, [x19, #96]
    4720:	ldr	x0, [x20, #80]
    4724:	blr	x3
    4728:	ldr	w1, [x19, #132]
    472c:	mov	w2, #0x2                   	// #2
    4730:	ldr	x3, [x20, #64]
    4734:	str	x0, [x19, #112]
    4738:	ldr	x0, [x20, #80]
    473c:	blr	x3
    4740:	ldr	x3, [x20, #64]
    4744:	str	x0, [x19, #120]
    4748:	ldr	x0, [x20, #80]
    474c:	lsl	w1, w25, w22
    4750:	str	w1, [x19, #5896]
    4754:	mov	w2, #0x4                   	// #4
    4758:	str	xzr, [x19, #5944]
    475c:	blr	x3
    4760:	ldr	w3, [x19, #5896]
    4764:	ldr	x1, [x19, #96]
    4768:	ubfiz	x2, x3, #2, #32
    476c:	stp	x0, x2, [x19, #16]
    4770:	mov	w2, w3
    4774:	cbz	x1, 48d8 <deflateInit2_+0x300>
    4778:	ldr	x1, [x19, #112]
    477c:	cbz	x1, 48d8 <deflateInit2_+0x300>
    4780:	ldr	x1, [x19, #120]
    4784:	cmp	x1, #0x0
    4788:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    478c:	b.eq	48d8 <deflateInit2_+0x300>  // b.none
    4790:	and	x3, x3, #0xfffffffe
    4794:	add	x2, x2, x2, lsl #1
    4798:	add	x3, x0, x3
    479c:	add	x2, x0, x2
    47a0:	mov	w0, #0x8                   	// #8
    47a4:	strb	w0, [x19, #72]
    47a8:	stp	w24, w23, [x19, #196]
    47ac:	mov	x0, x20
    47b0:	str	x2, [x19, #5888]
    47b4:	str	x3, [x19, #5904]
    47b8:	bl	3820 <deflateResetKeep>
    47bc:	mov	w19, w0
    47c0:	cbz	w0, 4800 <deflateInit2_+0x228>
    47c4:	ldp	x21, x22, [sp, #32]
    47c8:	ldp	x23, x24, [sp, #48]
    47cc:	ldp	x25, x26, [sp, #64]
    47d0:	mov	w0, w19
    47d4:	ldp	x19, x20, [sp, #16]
    47d8:	ldp	x29, x30, [sp], #80
    47dc:	ret
    47e0:	mov	w0, w26
    47e4:	sub	w3, w3, #0x10
    47e8:	mov	w26, #0x2                   	// #2
    47ec:	b	4650 <deflateInit2_+0x78>
    47f0:	neg	w3, w3
    47f4:	mov	w0, #0x1                   	// #1
    47f8:	mov	w26, #0x0                   	// #0
    47fc:	b	4650 <deflateInit2_+0x78>
    4800:	ldr	x20, [x20, #56]
    4804:	mov	w1, #0x0                   	// #0
    4808:	ldr	w2, [x20, #132]
    480c:	ldr	w3, [x20, #80]
    4810:	sub	w2, w2, #0x1
    4814:	ldr	x0, [x20, #120]
    4818:	lsl	x2, x2, #1
    481c:	lsl	x3, x3, #1
    4820:	str	x3, [x20, #104]
    4824:	strh	wzr, [x0, x2]
    4828:	bl	0 <memset>
    482c:	str	xzr, [x20, #168]
    4830:	ldrsw	x0, [x20, #196]
    4834:	adrp	x1, 0 <longest_match>
    4838:	add	x1, x1, #0x0
    483c:	mov	w3, #0x2                   	// #2
    4840:	str	w3, [x20, #160]
    4844:	mov	x4, #0x200000000           	// #8589934592
    4848:	lsl	x0, x0, #4
    484c:	str	wzr, [x20, #128]
    4850:	add	x2, x1, x0
    4854:	str	xzr, [x20, #152]
    4858:	stur	x4, [x20, #180]
    485c:	ldrh	w1, [x1, x0]
    4860:	ldrh	w3, [x2, #2]
    4864:	ldrh	w0, [x2, #4]
    4868:	ldrh	w2, [x2, #6]
    486c:	stp	w1, w0, [x20, #204]
    4870:	mov	w0, w19
    4874:	str	wzr, [x20, #5932]
    4878:	ldp	x21, x22, [sp, #32]
    487c:	ldp	x23, x24, [sp, #48]
    4880:	ldp	x25, x26, [sp, #64]
    4884:	stp	w2, w3, [x20, #188]
    4888:	ldp	x19, x20, [sp, #16]
    488c:	ldp	x29, x30, [sp], #80
    4890:	ret
    4894:	adrp	x1, 0 <zcfree>
    4898:	add	x1, x1, #0x0
    489c:	str	x1, [x20, #72]
    48a0:	b	4634 <deflateInit2_+0x5c>
    48a4:	adrp	x1, 0 <zcalloc>
    48a8:	add	x1, x1, #0x0
    48ac:	mov	x4, x1
    48b0:	str	x1, [x20, #64]
    48b4:	str	xzr, [x20, #80]
    48b8:	b	462c <deflateInit2_+0x54>
    48bc:	ldp	x21, x22, [sp, #32]
    48c0:	ldp	x23, x24, [sp, #48]
    48c4:	ldp	x25, x26, [sp, #64]
    48c8:	mov	w19, #0xfffffffe            	// #-2
    48cc:	b	47d0 <deflateInit2_+0x1f8>
    48d0:	mov	w19, #0xfffffffa            	// #-6
    48d4:	b	47d0 <deflateInit2_+0x1f8>
    48d8:	adrp	x1, 0 <z_errmsg>
    48dc:	mov	w0, #0x29a                 	// #666
    48e0:	str	w0, [x19, #8]
    48e4:	mov	x0, x20
    48e8:	ldr	x1, [x1]
    48ec:	str	x1, [x20, #48]
    48f0:	mov	w19, #0xfffffffc            	// #-4
    48f4:	bl	44b8 <deflateEnd>
    48f8:	ldp	x21, x22, [sp, #32]
    48fc:	ldp	x23, x24, [sp, #48]
    4900:	ldp	x25, x26, [sp, #64]
    4904:	b	47d0 <deflateInit2_+0x1f8>
    4908:	mov	w19, #0xfffffffc            	// #-4
    490c:	ldp	x21, x22, [sp, #32]
    4910:	ldp	x23, x24, [sp, #48]
    4914:	ldp	x25, x26, [sp, #64]
    4918:	b	47d0 <deflateInit2_+0x1f8>
    491c:	nop

0000000000004920 <deflateInit_>:
    4920:	stp	x29, x30, [sp, #-48]!
    4924:	mov	x29, sp
    4928:	stp	x19, x20, [sp, #16]
    492c:	cbz	x2, 4ba8 <deflateInit_+0x288>
    4930:	str	x21, [sp, #32]
    4934:	mov	w20, w1
    4938:	mov	x21, x0
    493c:	mov	w0, #0x70                  	// #112
    4940:	ldrb	w1, [x2]
    4944:	cmp	w1, #0x31
    4948:	ccmp	w3, w0, #0x0, eq  // eq = none
    494c:	b.ne	4b68 <deflateInit_+0x248>  // b.any
    4950:	cbz	x21, 4b74 <deflateInit_+0x254>
    4954:	ldr	x3, [x21, #64]
    4958:	str	xzr, [x21, #48]
    495c:	cbz	x3, 4b50 <deflateInit_+0x230>
    4960:	ldr	x0, [x21, #72]
    4964:	cbz	x0, 4b40 <deflateInit_+0x220>
    4968:	cmn	w20, #0x1
    496c:	b.eq	4aac <deflateInit_+0x18c>  // b.none
    4970:	cmp	w20, #0x9
    4974:	b.hi	4b74 <deflateInit_+0x254>  // b.pmore
    4978:	ldr	x0, [x21, #80]
    497c:	mov	w2, #0x1740                	// #5952
    4980:	mov	w1, #0x1                   	// #1
    4984:	blr	x3
    4988:	mov	x19, x0
    498c:	cbz	x0, 4bb0 <deflateInit_+0x290>
    4990:	adrp	x0, 0 <longest_match>
    4994:	mov	x5, #0x8000                	// #32768
    4998:	ldr	x3, [x21, #64]
    499c:	str	x19, [x21, #56]
    49a0:	ldr	q0, [x0]
    49a4:	mov	w6, #0x1                   	// #1
    49a8:	ldr	x0, [x21, #80]
    49ac:	movk	x5, #0xf, lsl #32
    49b0:	mov	w4, #0x7fff                	// #32767
    49b4:	mov	w1, #0x2a                  	// #42
    49b8:	str	x21, [x19]
    49bc:	mov	w2, #0x2                   	// #2
    49c0:	str	w1, [x19, #8]
    49c4:	mov	w1, #0x8000                	// #32768
    49c8:	str	w6, [x19, #48]
    49cc:	str	xzr, [x19, #56]
    49d0:	str	x5, [x19, #80]
    49d4:	str	w4, [x19, #88]
    49d8:	stur	q0, [x19, #132]
    49dc:	blr	x3
    49e0:	ldr	w1, [x19, #80]
    49e4:	mov	w2, #0x2                   	// #2
    49e8:	ldr	x3, [x21, #64]
    49ec:	str	x0, [x19, #96]
    49f0:	ldr	x0, [x21, #80]
    49f4:	blr	x3
    49f8:	ldr	w1, [x19, #132]
    49fc:	mov	w2, #0x2                   	// #2
    4a00:	ldr	x3, [x21, #64]
    4a04:	str	x0, [x19, #112]
    4a08:	ldr	x0, [x21, #80]
    4a0c:	blr	x3
    4a10:	mov	x2, x0
    4a14:	ldr	x3, [x21, #64]
    4a18:	mov	w1, #0x4000                	// #16384
    4a1c:	ldr	x0, [x21, #80]
    4a20:	str	x2, [x19, #120]
    4a24:	str	w1, [x19, #5896]
    4a28:	mov	w2, #0x4                   	// #4
    4a2c:	str	xzr, [x19, #5944]
    4a30:	blr	x3
    4a34:	ldr	w3, [x19, #5896]
    4a38:	ldr	x1, [x19, #96]
    4a3c:	ubfiz	x2, x3, #2, #32
    4a40:	stp	x0, x2, [x19, #16]
    4a44:	mov	w2, w3
    4a48:	cbz	x1, 4b80 <deflateInit_+0x260>
    4a4c:	ldr	x1, [x19, #112]
    4a50:	cbz	x1, 4b80 <deflateInit_+0x260>
    4a54:	ldr	x1, [x19, #120]
    4a58:	cmp	x1, #0x0
    4a5c:	ccmp	x0, #0x0, #0x4, ne  // ne = any
    4a60:	b.eq	4b80 <deflateInit_+0x260>  // b.none
    4a64:	and	x3, x3, #0xfffffffe
    4a68:	add	x2, x2, x2, lsl #1
    4a6c:	add	x3, x0, x3
    4a70:	add	x2, x0, x2
    4a74:	mov	w0, #0x8                   	// #8
    4a78:	strb	w0, [x19, #72]
    4a7c:	stp	w20, wzr, [x19, #196]
    4a80:	mov	x0, x21
    4a84:	str	x2, [x19, #5888]
    4a88:	str	x3, [x19, #5904]
    4a8c:	bl	3820 <deflateResetKeep>
    4a90:	mov	w20, w0
    4a94:	cbz	w0, 4ab4 <deflateInit_+0x194>
    4a98:	ldr	x21, [sp, #32]
    4a9c:	mov	w0, w20
    4aa0:	ldp	x19, x20, [sp, #16]
    4aa4:	ldp	x29, x30, [sp], #48
    4aa8:	ret
    4aac:	mov	w20, #0x6                   	// #6
    4ab0:	b	4978 <deflateInit_+0x58>
    4ab4:	ldr	x19, [x21, #56]
    4ab8:	mov	w1, #0x0                   	// #0
    4abc:	ldr	w2, [x19, #132]
    4ac0:	ldr	w3, [x19, #80]
    4ac4:	sub	w2, w2, #0x1
    4ac8:	ldr	x0, [x19, #120]
    4acc:	lsl	x2, x2, #1
    4ad0:	lsl	x3, x3, #1
    4ad4:	str	x3, [x19, #104]
    4ad8:	strh	wzr, [x0, x2]
    4adc:	bl	0 <memset>
    4ae0:	str	xzr, [x19, #168]
    4ae4:	ldrsw	x0, [x19, #196]
    4ae8:	adrp	x1, 0 <longest_match>
    4aec:	add	x1, x1, #0x0
    4af0:	mov	w3, #0x2                   	// #2
    4af4:	str	w3, [x19, #160]
    4af8:	mov	x4, #0x200000000           	// #8589934592
    4afc:	lsl	x0, x0, #4
    4b00:	str	wzr, [x19, #128]
    4b04:	add	x2, x1, x0
    4b08:	str	xzr, [x19, #152]
    4b0c:	stur	x4, [x19, #180]
    4b10:	ldrh	w1, [x1, x0]
    4b14:	ldrh	w3, [x2, #2]
    4b18:	ldrh	w0, [x2, #4]
    4b1c:	ldrh	w2, [x2, #6]
    4b20:	stp	w1, w0, [x19, #204]
    4b24:	mov	w0, w20
    4b28:	str	wzr, [x19, #5932]
    4b2c:	ldr	x21, [sp, #32]
    4b30:	stp	w2, w3, [x19, #188]
    4b34:	ldp	x19, x20, [sp, #16]
    4b38:	ldp	x29, x30, [sp], #48
    4b3c:	ret
    4b40:	adrp	x0, 0 <zcfree>
    4b44:	add	x0, x0, #0x0
    4b48:	str	x0, [x21, #72]
    4b4c:	b	4968 <deflateInit_+0x48>
    4b50:	adrp	x0, 0 <zcalloc>
    4b54:	add	x0, x0, #0x0
    4b58:	mov	x3, x0
    4b5c:	str	x0, [x21, #64]
    4b60:	str	xzr, [x21, #80]
    4b64:	b	4960 <deflateInit_+0x40>
    4b68:	mov	w20, #0xfffffffa            	// #-6
    4b6c:	ldr	x21, [sp, #32]
    4b70:	b	4a9c <deflateInit_+0x17c>
    4b74:	mov	w20, #0xfffffffe            	// #-2
    4b78:	ldr	x21, [sp, #32]
    4b7c:	b	4a9c <deflateInit_+0x17c>
    4b80:	adrp	x1, 0 <z_errmsg>
    4b84:	mov	w0, #0x29a                 	// #666
    4b88:	str	w0, [x19, #8]
    4b8c:	mov	w20, #0xfffffffc            	// #-4
    4b90:	ldr	x1, [x1]
    4b94:	str	x1, [x21, #48]
    4b98:	mov	x0, x21
    4b9c:	bl	44b8 <deflateEnd>
    4ba0:	ldr	x21, [sp, #32]
    4ba4:	b	4a9c <deflateInit_+0x17c>
    4ba8:	mov	w20, #0xfffffffa            	// #-6
    4bac:	b	4a9c <deflateInit_+0x17c>
    4bb0:	mov	w20, #0xfffffffc            	// #-4
    4bb4:	ldr	x21, [sp, #32]
    4bb8:	b	4a9c <deflateInit_+0x17c>
    4bbc:	nop

0000000000004bc0 <deflateCopy>:
    4bc0:	cbz	x1, 4c1c <deflateCopy+0x5c>
    4bc4:	ldr	x4, [x1, #64]
    4bc8:	mov	x3, x1
    4bcc:	cbz	x4, 4c1c <deflateCopy+0x5c>
    4bd0:	stp	x29, x30, [sp, #-48]!
    4bd4:	mov	x29, sp
    4bd8:	stp	x21, x22, [sp, #32]
    4bdc:	mov	x21, x0
    4be0:	ldr	x0, [x1, #72]
    4be4:	cbz	x0, 4c0c <deflateCopy+0x4c>
    4be8:	ldr	x22, [x1, #56]
    4bec:	cbz	x22, 4c0c <deflateCopy+0x4c>
    4bf0:	ldr	x1, [x22]
    4bf4:	mov	w0, #0xfffffffe            	// #-2
    4bf8:	cmp	x3, x1
    4bfc:	b.eq	4c24 <deflateCopy+0x64>  // b.none
    4c00:	ldp	x21, x22, [sp, #32]
    4c04:	ldp	x29, x30, [sp], #48
    4c08:	ret
    4c0c:	mov	w0, #0xfffffffe            	// #-2
    4c10:	ldp	x21, x22, [sp, #32]
    4c14:	ldp	x29, x30, [sp], #48
    4c18:	ret
    4c1c:	mov	w0, #0xfffffffe            	// #-2
    4c20:	ret
    4c24:	ldr	w2, [x22, #8]
    4c28:	mov	w1, #0x45                  	// #69
    4c2c:	mov	w7, #0x5b                  	// #91
    4c30:	mov	w6, #0x71                  	// #113
    4c34:	cmp	w2, #0x2a
    4c38:	sub	w5, w2, #0x39
    4c3c:	ccmp	w2, w1, #0x4, ne  // ne = any
    4c40:	stp	x19, x20, [sp, #16]
    4c44:	cset	w1, ne  // ne = any
    4c48:	cmp	w2, #0x67
    4c4c:	ccmp	w2, w7, #0x4, ne  // ne = any
    4c50:	csel	w1, w1, wzr, ne  // ne = any
    4c54:	cmp	w2, #0x29a
    4c58:	ccmp	w2, w6, #0x4, ne  // ne = any
    4c5c:	csel	w1, w1, wzr, ne  // ne = any
    4c60:	tst	w5, #0xffffffef
    4c64:	csel	w1, w1, wzr, ne  // ne = any
    4c68:	cbnz	w1, 4e04 <deflateCopy+0x244>
    4c6c:	cbz	x21, 4e04 <deflateCopy+0x244>
    4c70:	ldp	x0, x1, [x3]
    4c74:	stp	x0, x1, [x21]
    4c78:	mov	w2, #0x1740                	// #5952
    4c7c:	ldp	x0, x1, [x3, #16]
    4c80:	stp	x0, x1, [x21, #16]
    4c84:	ldp	x6, x7, [x3, #32]
    4c88:	stp	x6, x7, [x21, #32]
    4c8c:	mov	w1, #0x1                   	// #1
    4c90:	ldp	x6, x7, [x3, #48]
    4c94:	stp	x6, x7, [x21, #48]
    4c98:	ldp	x6, x7, [x3, #64]
    4c9c:	stp	x6, x7, [x21, #64]
    4ca0:	ldp	x6, x7, [x3, #80]
    4ca4:	stp	x6, x7, [x21, #80]
    4ca8:	ldp	x6, x7, [x3, #96]
    4cac:	stp	x6, x7, [x21, #96]
    4cb0:	ldr	x0, [x21, #80]
    4cb4:	blr	x4
    4cb8:	mov	x19, x0
    4cbc:	cbz	x0, 4e20 <deflateCopy+0x260>
    4cc0:	str	x0, [x21, #56]
    4cc4:	mov	x1, x22
    4cc8:	mov	x2, #0x1740                	// #5952
    4ccc:	bl	0 <memcpy>
    4cd0:	ldr	w1, [x19, #80]
    4cd4:	mov	w2, #0x2                   	// #2
    4cd8:	ldr	x3, [x21, #64]
    4cdc:	ldr	x0, [x21, #80]
    4ce0:	str	x21, [x19]
    4ce4:	blr	x3
    4ce8:	ldr	w1, [x19, #80]
    4cec:	mov	w2, #0x2                   	// #2
    4cf0:	ldr	x3, [x21, #64]
    4cf4:	str	x0, [x19, #96]
    4cf8:	ldr	x0, [x21, #80]
    4cfc:	blr	x3
    4d00:	ldr	w1, [x19, #132]
    4d04:	mov	w2, #0x2                   	// #2
    4d08:	ldr	x3, [x21, #64]
    4d0c:	str	x0, [x19, #112]
    4d10:	ldr	x0, [x21, #80]
    4d14:	blr	x3
    4d18:	ldr	w1, [x19, #5896]
    4d1c:	mov	w2, #0x4                   	// #4
    4d20:	ldr	x3, [x21, #64]
    4d24:	str	x0, [x19, #120]
    4d28:	ldr	x0, [x21, #80]
    4d2c:	blr	x3
    4d30:	mov	x20, x0
    4d34:	ldr	x0, [x19, #96]
    4d38:	str	x20, [x19, #16]
    4d3c:	cbz	x0, 4e0c <deflateCopy+0x24c>
    4d40:	ldr	x1, [x19, #112]
    4d44:	cbz	x1, 4e0c <deflateCopy+0x24c>
    4d48:	ldr	x1, [x19, #120]
    4d4c:	cmp	x1, #0x0
    4d50:	ccmp	x20, #0x0, #0x4, ne  // ne = any
    4d54:	b.eq	4e0c <deflateCopy+0x24c>  // b.none
    4d58:	ldr	x1, [x22, #96]
    4d5c:	ldr	w2, [x19, #80]
    4d60:	lsl	w2, w2, #1
    4d64:	bl	0 <memcpy>
    4d68:	ldr	x1, [x22, #112]
    4d6c:	ldr	x0, [x19, #112]
    4d70:	ldr	w2, [x19, #80]
    4d74:	lsl	x2, x2, #1
    4d78:	bl	0 <memcpy>
    4d7c:	ldr	x1, [x22, #120]
    4d80:	ldr	x0, [x19, #120]
    4d84:	ldr	w2, [x19, #132]
    4d88:	lsl	x2, x2, #1
    4d8c:	bl	0 <memcpy>
    4d90:	ldr	w2, [x19, #24]
    4d94:	ldr	x1, [x22, #16]
    4d98:	ldr	x0, [x19, #16]
    4d9c:	bl	0 <memcpy>
    4da0:	ldr	w1, [x19, #5896]
    4da4:	ldr	x4, [x22, #16]
    4da8:	and	x0, x1, #0xfffffffe
    4dac:	ldr	x3, [x22, #32]
    4db0:	ubfiz	x5, x1, #1, #32
    4db4:	ldr	x2, [x19, #16]
    4db8:	sub	x3, x3, x4
    4dbc:	add	x1, x5, w1, uxtw
    4dc0:	add	x20, x20, x0
    4dc4:	add	x5, x19, #0xd4
    4dc8:	add	x1, x2, x1
    4dcc:	add	x4, x19, #0x9c8
    4dd0:	add	x2, x2, x3
    4dd4:	add	x3, x19, #0xabc
    4dd8:	str	x2, [x19, #32]
    4ddc:	str	x5, [x19, #2904]
    4de0:	mov	w0, #0x0                   	// #0
    4de4:	str	x4, [x19, #2928]
    4de8:	str	x3, [x19, #2952]
    4dec:	str	x1, [x19, #5888]
    4df0:	str	x20, [x19, #5904]
    4df4:	ldp	x19, x20, [sp, #16]
    4df8:	ldp	x21, x22, [sp, #32]
    4dfc:	ldp	x29, x30, [sp], #48
    4e00:	ret
    4e04:	ldp	x19, x20, [sp, #16]
    4e08:	b	4c00 <deflateCopy+0x40>
    4e0c:	mov	x0, x21
    4e10:	bl	44b8 <deflateEnd>
    4e14:	mov	w0, #0xfffffffc            	// #-4
    4e18:	ldp	x19, x20, [sp, #16]
    4e1c:	b	4c00 <deflateCopy+0x40>
    4e20:	mov	w0, #0xfffffffc            	// #-4
    4e24:	ldp	x19, x20, [sp, #16]
    4e28:	b	4c00 <deflateCopy+0x40>

infback.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateBackInit_>:
       0:	cbz	x3, f0 <inflateBackInit_+0xf0>
       4:	stp	x29, x30, [sp, #-48]!
       8:	mov	x29, sp
       c:	stp	x19, x20, [sp, #16]
      10:	mov	w20, w1
      14:	mov	x19, x0
      18:	ldrb	w1, [x3]
      1c:	mov	w0, #0x70                  	// #112
      20:	cmp	w1, #0x31
      24:	ccmp	w4, w0, #0x0, eq  // eq = none
      28:	b.ne	dc <inflateBackInit_+0xdc>  // b.any
      2c:	str	x21, [sp, #32]
      30:	cmp	x19, #0x0
      34:	mov	x21, x2
      38:	ccmp	x2, #0x0, #0x4, ne  // ne = any
      3c:	b.eq	e4 <inflateBackInit_+0xe4>  // b.none
      40:	sub	w0, w20, #0x8
      44:	cmp	w0, #0x7
      48:	b.hi	e4 <inflateBackInit_+0xe4>  // b.pmore
      4c:	ldr	x3, [x19, #64]
      50:	str	xzr, [x19, #48]
      54:	cbz	x3, ac <inflateBackInit_+0xac>
      58:	ldr	x1, [x19, #72]
      5c:	ldr	x0, [x19, #80]
      60:	cbz	x1, cc <inflateBackInit_+0xcc>
      64:	mov	w2, #0x1bf8                	// #7160
      68:	mov	w1, #0x1                   	// #1
      6c:	blr	x3
      70:	mov	x3, x0
      74:	cbz	x0, f8 <inflateBackInit_+0xf8>
      78:	str	x3, [x19, #56]
      7c:	mov	w1, #0x1                   	// #1
      80:	str	x21, [x3, #72]
      84:	lsl	w1, w1, w20
      88:	ldr	x21, [sp, #32]
      8c:	mov	w2, #0x8000                	// #32768
      90:	mov	w0, #0x0                   	// #0
      94:	str	w2, [x3, #28]
      98:	stp	w20, w1, [x3, #56]
      9c:	str	xzr, [x3, #64]
      a0:	ldp	x19, x20, [sp, #16]
      a4:	ldp	x29, x30, [sp], #48
      a8:	ret
      ac:	adrp	x1, 0 <zcalloc>
      b0:	add	x1, x1, #0x0
      b4:	mov	x3, x1
      b8:	str	x1, [x19, #64]
      bc:	ldr	x1, [x19, #72]
      c0:	str	xzr, [x19, #80]
      c4:	mov	x0, #0x0                   	// #0
      c8:	cbnz	x1, 64 <inflateBackInit_+0x64>
      cc:	adrp	x1, 0 <zcfree>
      d0:	add	x1, x1, #0x0
      d4:	str	x1, [x19, #72]
      d8:	b	64 <inflateBackInit_+0x64>
      dc:	mov	w0, #0xfffffffa            	// #-6
      e0:	b	a0 <inflateBackInit_+0xa0>
      e4:	mov	w0, #0xfffffffe            	// #-2
      e8:	ldr	x21, [sp, #32]
      ec:	b	a0 <inflateBackInit_+0xa0>
      f0:	mov	w0, #0xfffffffa            	// #-6
      f4:	ret
      f8:	mov	w0, #0xfffffffc            	// #-4
      fc:	ldr	x21, [sp, #32]
     100:	b	a0 <inflateBackInit_+0xa0>
     104:	nop

0000000000000108 <inflateBack>:
     108:	stp	x29, x30, [sp, #-192]!
     10c:	mov	x29, sp
     110:	stp	x3, x4, [sp, #104]
     114:	cbz	x0, a14 <inflateBack+0x90c>
     118:	stp	x23, x24, [sp, #48]
     11c:	ldr	x23, [x0, #56]
     120:	stp	x25, x26, [sp, #64]
     124:	mov	x25, x0
     128:	cbz	x23, a04 <inflateBack+0x8fc>
     12c:	stp	x19, x20, [sp, #16]
     130:	mov	x0, #0x3f3f                	// #16191
     134:	mov	x19, x1
     138:	stp	x21, x22, [sp, #32]
     13c:	mov	x24, x2
     140:	mov	w22, #0x0                   	// #0
     144:	stp	x27, x28, [sp, #80]
     148:	str	xzr, [x25, #48]
     14c:	str	x0, [x23, #8]
     150:	str	wzr, [x23, #64]
     154:	ldr	x0, [x25]
     158:	str	x0, [sp, #184]
     15c:	cbz	x0, 164 <inflateBack+0x5c>
     160:	ldr	w22, [x25, #8]
     164:	adrp	x21, 0 <inflateBackInit_>
     168:	add	x21, x21, #0x0
     16c:	add	x0, x21, #0x880
     170:	ldr	w20, [x23, #60]
     174:	str	x0, [sp, #120]
     178:	mov	w1, #0x3f3f                	// #16191
     17c:	ldr	x0, [x23, #72]
     180:	mov	w27, #0x0                   	// #0
     184:	mov	x28, #0x0                   	// #0
     188:	str	x0, [sp, #96]
     18c:	mov	w0, #0x3f48                	// #16200
     190:	cmp	w1, w0
     194:	b.eq	250 <inflateBack+0x148>  // b.none
     198:	b.hi	2f4 <inflateBack+0x1ec>  // b.pmore
     19c:	mov	w0, #0x3f41                	// #16193
     1a0:	cmp	w1, w0
     1a4:	b.eq	370 <inflateBack+0x268>  // b.none
     1a8:	mov	w0, #0x3f44                	// #16196
     1ac:	cmp	w1, w0
     1b0:	b.eq	1f0 <inflateBack+0xe8>  // b.none
     1b4:	b	2c4 <inflateBack+0x1bc>
     1b8:	add	x1, sp, #0xb8
     1bc:	mov	x0, x24
     1c0:	cbnz	w22, 1d0 <inflateBack+0xc8>
     1c4:	blr	x19
     1c8:	mov	w22, w0
     1cc:	cbz	w0, 420 <inflateBack+0x318>
     1d0:	ldr	x0, [sp, #184]
     1d4:	sub	w22, w22, #0x1
     1d8:	add	x1, x0, #0x1
     1dc:	str	x1, [sp, #184]
     1e0:	ldrb	w0, [x0]
     1e4:	lsl	x0, x0, x27
     1e8:	add	w27, w27, #0x8
     1ec:	add	x28, x28, x0
     1f0:	cmp	w27, #0xd
     1f4:	b.ls	1b8 <inflateBack+0xb0>  // b.plast
     1f8:	and	w1, w28, #0x1f
     1fc:	ubfx	w0, w28, #5, #5
     200:	ubfx	w2, w28, #10, #4
     204:	add	w1, w1, #0x101
     208:	add	w0, w0, #0x1
     20c:	add	w2, w2, #0x4
     210:	stp	w2, w1, [x23, #128]
     214:	cmp	w1, #0x11e
     218:	str	w0, [x23, #136]
     21c:	sub	w27, w27, #0xe
     220:	ccmp	w0, #0x1e, #0x2, ls  // ls = plast
     224:	lsr	x28, x28, #14
     228:	b.ls	620 <inflateBack+0x518>  // b.plast
     22c:	adrp	x0, 0 <inflateBackInit_>
     230:	add	x0, x0, #0x0
     234:	str	x0, [x25, #48]
     238:	mov	w0, #0x3f51                	// #16209
     23c:	str	w0, [x23, #8]
     240:	mov	w1, w0
     244:	mov	w0, #0x3f48                	// #16200
     248:	cmp	w1, w0
     24c:	b.ne	198 <inflateBack+0x90>  // b.any
     250:	cmp	w20, #0x101
     254:	ccmp	w22, #0x5, #0x0, hi  // hi = pmore
     258:	b.ls	4b8 <inflateBack+0x3b0>  // b.plast
     25c:	ldr	x0, [sp, #184]
     260:	ldr	w1, [x23, #60]
     264:	str	x0, [x25]
     268:	ldr	x0, [sp, #96]
     26c:	str	w22, [x25, #8]
     270:	str	x0, [x25, #24]
     274:	str	w20, [x25, #32]
     278:	ldr	w0, [x23, #64]
     27c:	str	x28, [x23, #80]
     280:	str	w27, [x23, #88]
     284:	cmp	w0, w1
     288:	b.cs	294 <inflateBack+0x18c>  // b.hs, b.nlast
     28c:	sub	w20, w1, w20
     290:	str	w20, [x23, #64]
     294:	mov	x0, x25
     298:	bl	0 <inflate_fast>
     29c:	ldr	x0, [x25]
     2a0:	str	x0, [sp, #184]
     2a4:	ldr	x0, [x25, #24]
     2a8:	str	x0, [sp, #96]
     2ac:	ldr	w1, [x23, #8]
     2b0:	ldr	w27, [x23, #88]
     2b4:	ldr	w22, [x25, #8]
     2b8:	ldr	w20, [x25, #32]
     2bc:	ldr	x28, [x23, #80]
     2c0:	b	18c <inflateBack+0x84>
     2c4:	mov	w0, #0x3f3f                	// #16191
     2c8:	cmp	w1, w0
     2cc:	b.ne	364 <inflateBack+0x25c>  // b.any
     2d0:	ldr	w0, [x23, #12]
     2d4:	cbz	w0, 43c <inflateBack+0x334>
     2d8:	and	w0, w27, #0x7
     2dc:	mov	w2, #0x3f50                	// #16208
     2e0:	and	w27, w27, #0xfffffff8
     2e4:	mov	w1, w2
     2e8:	lsr	x28, x28, x0
     2ec:	str	w2, [x23, #8]
     2f0:	b	18c <inflateBack+0x84>
     2f4:	mov	w0, #0x3f50                	// #16208
     2f8:	cmp	w1, w0
     2fc:	b.eq	338 <inflateBack+0x230>  // b.none
     300:	mov	w0, #0x3f51                	// #16209
     304:	cmp	w1, w0
     308:	b.ne	364 <inflateBack+0x25c>  // b.any
     30c:	ldr	x1, [sp, #184]
     310:	mov	w0, #0xfffffffd            	// #-3
     314:	ldp	x19, x20, [sp, #16]
     318:	ldp	x23, x24, [sp, #48]
     31c:	ldp	x27, x28, [sp, #80]
     320:	str	x1, [x25]
     324:	str	w22, [x25, #8]
     328:	ldp	x21, x22, [sp, #32]
     32c:	ldp	x25, x26, [sp, #64]
     330:	ldp	x29, x30, [sp], #192
     334:	ret
     338:	ldr	w2, [x23, #60]
     33c:	cmp	w2, w20
     340:	b.ls	430 <inflateBack+0x328>  // b.plast
     344:	ldp	x3, x0, [sp, #104]
     348:	sub	w2, w2, w20
     34c:	ldr	x1, [x23, #72]
     350:	blr	x3
     354:	cbz	w0, 430 <inflateBack+0x328>
     358:	mov	w0, #0xfffffffb            	// #-5
     35c:	ldr	x1, [sp, #184]
     360:	b	314 <inflateBack+0x20c>
     364:	mov	w0, #0xfffffffe            	// #-2
     368:	ldr	x1, [sp, #184]
     36c:	b	314 <inflateBack+0x20c>
     370:	and	w0, w27, #0x7
     374:	and	w27, w27, #0xfffffff8
     378:	cmp	w27, #0x1f
     37c:	lsr	x28, x28, x0
     380:	b.hi	3c8 <inflateBack+0x2c0>  // b.pmore
     384:	nop
     388:	add	x1, sp, #0xb8
     38c:	mov	x0, x24
     390:	cbnz	w22, 3a0 <inflateBack+0x298>
     394:	blr	x19
     398:	mov	w22, w0
     39c:	cbz	w0, 420 <inflateBack+0x318>
     3a0:	ldr	x0, [sp, #184]
     3a4:	sub	w22, w22, #0x1
     3a8:	add	x1, x0, #0x1
     3ac:	str	x1, [sp, #184]
     3b0:	ldrb	w0, [x0]
     3b4:	lsl	x0, x0, x27
     3b8:	add	w27, w27, #0x8
     3bc:	add	x28, x28, x0
     3c0:	cmp	w27, #0x1f
     3c4:	b.ls	388 <inflateBack+0x280>  // b.plast
     3c8:	lsr	x0, x28, #16
     3cc:	and	x1, x28, #0xffff
     3d0:	eor	x0, x0, #0xffff
     3d4:	cmp	x0, w28, uxth
     3d8:	b.eq	3f8 <inflateBack+0x2f0>  // b.none
     3dc:	adrp	x0, 0 <inflateBackInit_>
     3e0:	add	x0, x0, #0x0
     3e4:	str	x0, [x25, #48]
     3e8:	mov	w0, #0x3f51                	// #16209
     3ec:	mov	w1, w0
     3f0:	str	w0, [x23, #8]
     3f4:	b	18c <inflateBack+0x84>
     3f8:	str	w1, [x23, #92]
     3fc:	mov	w26, w1
     400:	cbz	x1, 608 <inflateBack+0x500>
     404:	nop
     408:	add	x1, sp, #0xb8
     40c:	mov	x0, x24
     410:	cbnz	w22, 590 <inflateBack+0x488>
     414:	blr	x19
     418:	mov	w22, w0
     41c:	cbnz	w0, 590 <inflateBack+0x488>
     420:	mov	x1, #0x0                   	// #0
     424:	mov	w0, #0xfffffffb            	// #-5
     428:	mov	w22, #0x0                   	// #0
     42c:	b	314 <inflateBack+0x20c>
     430:	mov	w0, #0x1                   	// #1
     434:	ldr	x1, [sp, #184]
     438:	b	314 <inflateBack+0x20c>
     43c:	cmp	w27, #0x2
     440:	b.hi	47c <inflateBack+0x374>  // b.pmore
     444:	cbnz	w22, 45c <inflateBack+0x354>
     448:	add	x1, sp, #0xb8
     44c:	mov	x0, x24
     450:	blr	x19
     454:	mov	w22, w0
     458:	cbz	w0, 420 <inflateBack+0x318>
     45c:	ldr	x0, [sp, #184]
     460:	sub	w22, w22, #0x1
     464:	add	x1, x0, #0x1
     468:	str	x1, [sp, #184]
     46c:	ldrb	w0, [x0]
     470:	lsl	x0, x0, x27
     474:	add	w27, w27, #0x8
     478:	add	x28, x28, x0
     47c:	and	w0, w28, #0x1
     480:	str	w0, [x23, #12]
     484:	ubfx	w0, w28, #1, #2
     488:	cmp	w0, #0x2
     48c:	b.eq	580 <inflateBack+0x478>  // b.none
     490:	cmp	w0, #0x3
     494:	b.eq	7b8 <inflateBack+0x6b0>  // b.none
     498:	cmp	w0, #0x1
     49c:	b.eq	794 <inflateBack+0x68c>  // b.none
     4a0:	mov	w0, #0x3f41                	// #16193
     4a4:	mov	w1, w0
     4a8:	str	w0, [x23, #8]
     4ac:	lsr	x28, x28, #3
     4b0:	sub	w27, w27, #0x3
     4b4:	b	18c <inflateBack+0x84>
     4b8:	ldr	w4, [x23, #120]
     4bc:	mov	w2, #0xffffffff            	// #-1
     4c0:	ldr	x3, [x23, #104]
     4c4:	mov	w1, w28
     4c8:	lsl	w0, w2, w4
     4cc:	bic	w0, w28, w0
     4d0:	lsl	x0, x0, #2
     4d4:	add	x5, x3, x0
     4d8:	ldrb	w26, [x5, #1]
     4dc:	cmp	w27, w26
     4e0:	b.cs	a1c <inflateBack+0x914>  // b.hs, b.nlast
     4e4:	mov	w5, w2
     4e8:	add	x1, sp, #0xb8
     4ec:	mov	x0, x24
     4f0:	cbnz	w22, 50c <inflateBack+0x404>
     4f4:	blr	x19
     4f8:	mov	w22, w0
     4fc:	cbz	w0, 420 <inflateBack+0x318>
     500:	ldr	w4, [x23, #120]
     504:	mov	w5, #0xffffffff            	// #-1
     508:	ldr	x3, [x23, #104]
     50c:	lsl	w0, w5, w4
     510:	ldr	x1, [sp, #184]
     514:	sub	w22, w22, #0x1
     518:	add	x2, x1, #0x1
     51c:	str	x2, [sp, #184]
     520:	ldrb	w1, [x1]
     524:	lsl	x1, x1, x27
     528:	add	x28, x28, x1
     52c:	bic	w0, w28, w0
     530:	add	w27, w27, #0x8
     534:	mov	w1, w28
     538:	add	x0, x3, x0, lsl #2
     53c:	ldrb	w26, [x0, #1]
     540:	cmp	w26, w27
     544:	b.hi	4e8 <inflateBack+0x3e0>  // b.pmore
     548:	ldrb	w2, [x0]
     54c:	ldrh	w5, [x0, #2]
     550:	mov	w0, w5
     554:	cbz	w2, 740 <inflateBack+0x638>
     558:	tst	w2, #0xf0
     55c:	b.eq	7f4 <inflateBack+0x6ec>  // b.none
     560:	sub	w27, w27, w26
     564:	lsr	x28, x28, x26
     568:	str	w5, [x23, #92]
     56c:	tbz	w2, #5, 7d4 <inflateBack+0x6cc>
     570:	mov	w0, #0x3f3f                	// #16191
     574:	mov	w1, w0
     578:	str	w0, [x23, #8]
     57c:	b	18c <inflateBack+0x84>
     580:	mov	w0, #0x3f44                	// #16196
     584:	mov	w1, w0
     588:	str	w0, [x23, #8]
     58c:	b	4ac <inflateBack+0x3a4>
     590:	cbnz	w20, 5b4 <inflateBack+0x4ac>
     594:	ldp	x3, x0, [sp, #104]
     598:	ldr	x1, [x23, #72]
     59c:	str	x1, [sp, #96]
     5a0:	ldr	w20, [x23, #60]
     5a4:	str	w20, [x23, #64]
     5a8:	mov	w2, w20
     5ac:	blr	x3
     5b0:	cbnz	w0, 358 <inflateBack+0x250>
     5b4:	cmp	w22, w20
     5b8:	csel	w27, w22, w20, ls  // ls = plast
     5bc:	ldr	x0, [sp, #96]
     5c0:	cmp	w27, w26
     5c4:	ldr	x1, [sp, #184]
     5c8:	csel	w28, w27, w26, ls  // ls = plast
     5cc:	mov	x2, x28
     5d0:	csel	w27, w27, w26, ls  // ls = plast
     5d4:	sub	w22, w22, w27
     5d8:	sub	w20, w20, w27
     5dc:	bl	0 <memcpy>
     5e0:	ldr	w26, [x23, #92]
     5e4:	ldr	x0, [sp, #184]
     5e8:	sub	w26, w26, w27
     5ec:	str	w26, [x23, #92]
     5f0:	add	x0, x0, x28
     5f4:	str	x0, [sp, #184]
     5f8:	ldr	x0, [sp, #96]
     5fc:	add	x0, x0, x28
     600:	str	x0, [sp, #96]
     604:	cbnz	w26, 408 <inflateBack+0x300>
     608:	mov	w0, #0x3f3f                	// #16191
     60c:	mov	w27, #0x0                   	// #0
     610:	mov	w1, w0
     614:	mov	x28, #0x0                   	// #0
     618:	str	w0, [x23, #8]
     61c:	b	18c <inflateBack+0x84>
     620:	mov	w3, #0x0                   	// #0
     624:	str	wzr, [x23, #140]
     628:	add	x1, sp, #0xb8
     62c:	mov	x0, x24
     630:	cmp	w27, #0x2
     634:	b.hi	670 <inflateBack+0x568>  // b.pmore
     638:	cbnz	w22, 650 <inflateBack+0x548>
     63c:	blr	x19
     640:	mov	w22, w0
     644:	cbz	w0, 420 <inflateBack+0x318>
     648:	ldr	w2, [x23, #128]
     64c:	ldr	w3, [x23, #140]
     650:	ldr	x0, [sp, #184]
     654:	sub	w22, w22, #0x1
     658:	add	x1, x0, #0x1
     65c:	str	x1, [sp, #184]
     660:	ldrb	w0, [x0]
     664:	lsl	x0, x0, x27
     668:	add	w27, w27, #0x8
     66c:	add	x28, x28, x0
     670:	ldr	x1, [sp, #120]
     674:	add	w0, w3, #0x1
     678:	str	w0, [x23, #140]
     67c:	and	w4, w28, #0x7
     680:	sub	w27, w27, #0x3
     684:	cmp	w0, w2
     688:	ldrh	w1, [x1, w3, uxtw #1]
     68c:	lsr	x28, x28, #3
     690:	mov	w3, w0
     694:	add	x1, x23, x1, lsl #1
     698:	strh	w4, [x1, #152]
     69c:	b.cc	628 <inflateBack+0x520>  // b.lo, b.ul, b.last
     6a0:	cmp	w0, #0x12
     6a4:	b.hi	6e0 <inflateBack+0x5d8>  // b.pmore
     6a8:	ldr	x3, [sp, #120]
     6ac:	mov	w2, #0x12                  	// #18
     6b0:	sub	w2, w2, w0
     6b4:	add	x1, x21, #0x882
     6b8:	add	x2, x2, w0, uxtw
     6bc:	add	x0, x3, w0, uxtw #1
     6c0:	add	x2, x1, x2, lsl #1
     6c4:	ldrh	w1, [x0], #2
     6c8:	cmp	x2, x0
     6cc:	add	x1, x23, x1, lsl #1
     6d0:	strh	wzr, [x1, #152]
     6d4:	b.ne	6c4 <inflateBack+0x5bc>  // b.any
     6d8:	mov	w0, #0x13                  	// #19
     6dc:	str	w0, [x23, #140]
     6e0:	add	x2, x23, #0x558
     6e4:	mov	w0, #0x7                   	// #7
     6e8:	str	x2, [x23, #104]
     6ec:	add	x1, x23, #0x98
     6f0:	str	w0, [x23, #120]
     6f4:	add	x0, x23, #0x318
     6f8:	str	x2, [x23, #144]
     6fc:	add	x3, x23, #0x90
     700:	add	x4, x23, #0x78
     704:	mov	x5, x0
     708:	stp	x1, x3, [sp, #128]
     70c:	stp	x0, x2, [sp, #144]
     710:	mov	w2, #0x13                  	// #19
     714:	mov	w0, #0x0                   	// #0
     718:	str	x4, [sp, #160]
     71c:	bl	0 <inflate_table>
     720:	cbz	w0, d28 <inflateBack+0xc20>
     724:	adrp	x0, 0 <inflateBackInit_>
     728:	add	x0, x0, #0x0
     72c:	str	x0, [x25, #48]
     730:	mov	w0, #0x3f51                	// #16209
     734:	mov	w1, w0
     738:	str	w0, [x23, #8]
     73c:	b	18c <inflateBack+0x84>
     740:	sub	w27, w27, w26
     744:	lsr	x28, x28, x26
     748:	str	w5, [x23, #92]
     74c:	cbnz	w20, 774 <inflateBack+0x66c>
     750:	ldp	x3, x0, [sp, #104]
     754:	ldr	x1, [x23, #72]
     758:	str	x1, [sp, #96]
     75c:	ldr	w20, [x23, #60]
     760:	str	w20, [x23, #64]
     764:	mov	w2, w20
     768:	blr	x3
     76c:	cbnz	w0, 358 <inflateBack+0x250>
     770:	ldr	w0, [x23, #92]
     774:	ldr	x3, [sp, #96]
     778:	mov	w2, #0x3f48                	// #16200
     77c:	sub	w20, w20, #0x1
     780:	mov	w1, w2
     784:	strb	w0, [x3], #1
     788:	str	w2, [x23, #8]
     78c:	str	x3, [sp, #96]
     790:	b	18c <inflateBack+0x84>
     794:	mov	x3, #0x9                   	// #9
     798:	mov	w2, #0x3f48                	// #16200
     79c:	add	x0, x21, #0x800
     7a0:	movk	x3, #0x5, lsl #32
     7a4:	mov	w1, w2
     7a8:	str	w2, [x23, #8]
     7ac:	stp	x21, x0, [x23, #104]
     7b0:	str	x3, [x23, #120]
     7b4:	b	4ac <inflateBack+0x3a4>
     7b8:	adrp	x0, 0 <inflateBackInit_>
     7bc:	add	x0, x0, #0x0
     7c0:	str	x0, [x25, #48]
     7c4:	mov	w2, #0x3f51                	// #16209
     7c8:	mov	w1, w2
     7cc:	str	w2, [x23, #8]
     7d0:	b	4ac <inflateBack+0x3a4>
     7d4:	tbz	w2, #6, 8b8 <inflateBack+0x7b0>
     7d8:	adrp	x0, 0 <inflateBackInit_>
     7dc:	add	x0, x0, #0x0
     7e0:	str	x0, [x25, #48]
     7e4:	mov	w0, #0x3f51                	// #16209
     7e8:	mov	w1, w0
     7ec:	str	w0, [x23, #8]
     7f0:	b	18c <inflateBack+0x84>
     7f4:	add	w2, w2, w26
     7f8:	mov	w0, #0xffffffff            	// #-1
     7fc:	lsl	w2, w0, w2
     800:	bic	w0, w1, w2
     804:	mvn	w6, w2
     808:	lsr	w0, w0, w26
     80c:	add	w0, w0, w5
     810:	lsl	x0, x0, #2
     814:	add	x4, x3, x0
     818:	ldrb	w1, [x4, #1]
     81c:	add	w2, w1, w26
     820:	cmp	w2, w27
     824:	b.ls	f64 <inflateBack+0xe5c>  // b.plast
     828:	add	x1, sp, #0xb8
     82c:	mov	x0, x24
     830:	cbnz	w22, 854 <inflateBack+0x74c>
     834:	str	w5, [sp, #128]
     838:	str	w6, [sp, #136]
     83c:	blr	x19
     840:	mov	w22, w0
     844:	cbz	w0, 420 <inflateBack+0x318>
     848:	ldr	w5, [sp, #128]
     84c:	ldr	w6, [sp, #136]
     850:	ldr	x3, [x23, #104]
     854:	sub	w22, w22, #0x1
     858:	ldr	x0, [sp, #184]
     85c:	add	x1, x0, #0x1
     860:	str	x1, [sp, #184]
     864:	ldrb	w0, [x0]
     868:	lsl	x0, x0, x27
     86c:	add	x28, x28, x0
     870:	and	w0, w6, w28
     874:	add	w27, w27, #0x8
     878:	lsr	w0, w0, w26
     87c:	add	w0, w0, w5
     880:	add	x0, x3, x0, lsl #2
     884:	ldrb	w1, [x0, #1]
     888:	add	w2, w1, w26
     88c:	cmp	w2, w27
     890:	b.hi	828 <inflateBack+0x720>  // b.pmore
     894:	ldrb	w2, [x0]
     898:	ldrh	w0, [x0, #2]
     89c:	str	w0, [x23, #92]
     8a0:	sub	w7, w27, w26
     8a4:	lsr	x8, x28, x26
     8a8:	sub	w27, w7, w1
     8ac:	lsr	x28, x8, x1
     8b0:	cbnz	w2, 56c <inflateBack+0x464>
     8b4:	b	74c <inflateBack+0x644>
     8b8:	and	w2, w2, #0xf
     8bc:	str	w2, [x23, #100]
     8c0:	cbz	w2, 934 <inflateBack+0x82c>
     8c4:	cmp	w2, w27
     8c8:	b.ls	914 <inflateBack+0x80c>  // b.plast
     8cc:	nop
     8d0:	add	x1, sp, #0xb8
     8d4:	mov	x0, x24
     8d8:	cbnz	w22, 8ec <inflateBack+0x7e4>
     8dc:	blr	x19
     8e0:	mov	w22, w0
     8e4:	cbz	w0, 420 <inflateBack+0x318>
     8e8:	ldr	w2, [x23, #100]
     8ec:	ldr	x0, [sp, #184]
     8f0:	sub	w22, w22, #0x1
     8f4:	add	x1, x0, #0x1
     8f8:	str	x1, [sp, #184]
     8fc:	ldrb	w0, [x0]
     900:	lsl	x0, x0, x27
     904:	add	w27, w27, #0x8
     908:	add	x28, x28, x0
     90c:	cmp	w27, w2
     910:	b.cc	8d0 <inflateBack+0x7c8>  // b.lo, b.ul, b.last
     914:	ldr	w1, [x23, #92]
     918:	mov	w0, #0xffffffff            	// #-1
     91c:	lsl	w0, w0, w2
     920:	sub	w27, w27, w2
     924:	bic	w0, w28, w0
     928:	lsr	x28, x28, x2
     92c:	add	w0, w1, w0
     930:	str	w0, [x23, #92]
     934:	ldr	w4, [x23, #124]
     938:	mov	w2, #0xffffffff            	// #-1
     93c:	ldr	x3, [x23, #112]
     940:	lsl	w0, w2, w4
     944:	bic	w0, w28, w0
     948:	lsl	x0, x0, #2
     94c:	add	x5, x3, x0
     950:	ldrb	w26, [x5, #1]
     954:	cmp	w26, w27
     958:	mov	w1, w26
     95c:	b.ls	f58 <inflateBack+0xe50>  // b.plast
     960:	mov	w5, w2
     964:	nop
     968:	add	x1, sp, #0xb8
     96c:	mov	x0, x24
     970:	cbnz	w22, 98c <inflateBack+0x884>
     974:	blr	x19
     978:	mov	w22, w0
     97c:	cbz	w0, 420 <inflateBack+0x318>
     980:	ldr	w4, [x23, #124]
     984:	mov	w5, #0xffffffff            	// #-1
     988:	ldr	x3, [x23, #112]
     98c:	lsl	w0, w5, w4
     990:	ldr	x1, [sp, #184]
     994:	sub	w22, w22, #0x1
     998:	add	x2, x1, #0x1
     99c:	str	x2, [sp, #184]
     9a0:	ldrb	w1, [x1]
     9a4:	lsl	x1, x1, x27
     9a8:	add	x28, x28, x1
     9ac:	bic	w0, w28, w0
     9b0:	add	w27, w27, #0x8
     9b4:	add	x0, x3, x0, lsl #2
     9b8:	ldrb	w26, [x0, #1]
     9bc:	cmp	w26, w27
     9c0:	mov	w1, w26
     9c4:	b.hi	968 <inflateBack+0x860>  // b.pmore
     9c8:	ldrb	w2, [x0]
     9cc:	ldrh	w6, [x0, #2]
     9d0:	tst	w2, #0xf0
     9d4:	mov	w0, w26
     9d8:	b.eq	c6c <inflateBack+0xb64>  // b.none
     9dc:	sub	w27, w27, w1
     9e0:	lsr	x28, x28, x0
     9e4:	tbz	w2, #6, a28 <inflateBack+0x920>
     9e8:	adrp	x0, 0 <inflateBackInit_>
     9ec:	add	x0, x0, #0x0
     9f0:	str	x0, [x25, #48]
     9f4:	mov	w0, #0x3f51                	// #16209
     9f8:	mov	w1, w0
     9fc:	str	w0, [x23, #8]
     a00:	b	18c <inflateBack+0x84>
     a04:	mov	w0, #0xfffffffe            	// #-2
     a08:	ldp	x23, x24, [sp, #48]
     a0c:	ldp	x25, x26, [sp, #64]
     a10:	b	330 <inflateBack+0x228>
     a14:	mov	w0, #0xfffffffe            	// #-2
     a18:	b	330 <inflateBack+0x228>
     a1c:	ldrb	w2, [x3, x0]
     a20:	ldrh	w5, [x5, #2]
     a24:	b	550 <inflateBack+0x448>
     a28:	and	w2, w2, #0xf
     a2c:	stp	w6, w2, [x23, #96]
     a30:	mov	w1, w6
     a34:	cbnz	w2, f70 <inflateBack+0xe68>
     a38:	ldp	w2, w0, [x23, #60]
     a3c:	cmp	w2, w0
     a40:	csel	w0, w20, wzr, hi  // hi = pmore
     a44:	sub	w0, w2, w0
     a48:	cmp	w0, w1
     a4c:	b.cs	b88 <inflateBack+0xa80>  // b.hs, b.nlast
     a50:	adrp	x0, 0 <inflateBackInit_>
     a54:	add	x0, x0, #0x0
     a58:	str	x0, [x25, #48]
     a5c:	mov	w0, #0x3f51                	// #16209
     a60:	mov	w1, w0
     a64:	str	w0, [x23, #8]
     a68:	b	18c <inflateBack+0x84>
     a6c:	lsl	w1, w2, #4
     a70:	cmp	w4, w2, lsl #4
     a74:	add	x4, x6, x1
     a78:	lsl	w2, w2, #4
     a7c:	add	x1, x5, x1
     a80:	b.eq	b6c <inflateBack+0xa64>  // b.none
     a84:	ldrb	w5, [x5, w2, uxtw]
     a88:	subs	w3, w0, w2
     a8c:	strb	w5, [x6, w2, uxtw]
     a90:	b.eq	b6c <inflateBack+0xa64>  // b.none
     a94:	ldrb	w2, [x1, #1]
     a98:	cmp	w3, #0x1
     a9c:	strb	w2, [x4, #1]
     aa0:	b.eq	b6c <inflateBack+0xa64>  // b.none
     aa4:	ldrb	w2, [x1, #2]
     aa8:	cmp	w3, #0x2
     aac:	strb	w2, [x4, #2]
     ab0:	b.eq	b6c <inflateBack+0xa64>  // b.none
     ab4:	ldrb	w2, [x1, #3]
     ab8:	cmp	w3, #0x3
     abc:	strb	w2, [x4, #3]
     ac0:	b.eq	b6c <inflateBack+0xa64>  // b.none
     ac4:	ldrb	w2, [x1, #4]
     ac8:	cmp	w3, #0x4
     acc:	strb	w2, [x4, #4]
     ad0:	b.eq	b6c <inflateBack+0xa64>  // b.none
     ad4:	ldrb	w2, [x1, #5]
     ad8:	cmp	w3, #0x5
     adc:	strb	w2, [x4, #5]
     ae0:	b.eq	b6c <inflateBack+0xa64>  // b.none
     ae4:	ldrb	w2, [x1, #6]
     ae8:	cmp	w3, #0x6
     aec:	strb	w2, [x4, #6]
     af0:	b.eq	b6c <inflateBack+0xa64>  // b.none
     af4:	ldrb	w2, [x1, #7]
     af8:	cmp	w3, #0x7
     afc:	strb	w2, [x4, #7]
     b00:	b.eq	b6c <inflateBack+0xa64>  // b.none
     b04:	ldrb	w2, [x1, #8]
     b08:	cmp	w3, #0x8
     b0c:	strb	w2, [x4, #8]
     b10:	b.eq	b6c <inflateBack+0xa64>  // b.none
     b14:	ldrb	w2, [x1, #9]
     b18:	cmp	w3, #0x9
     b1c:	strb	w2, [x4, #9]
     b20:	b.eq	b6c <inflateBack+0xa64>  // b.none
     b24:	ldrb	w2, [x1, #10]
     b28:	cmp	w3, #0xa
     b2c:	strb	w2, [x4, #10]
     b30:	b.eq	b6c <inflateBack+0xa64>  // b.none
     b34:	ldrb	w2, [x1, #11]
     b38:	cmp	w3, #0xb
     b3c:	strb	w2, [x4, #11]
     b40:	b.eq	b6c <inflateBack+0xa64>  // b.none
     b44:	ldrb	w2, [x1, #12]
     b48:	cmp	w3, #0xc
     b4c:	strb	w2, [x4, #12]
     b50:	b.eq	b6c <inflateBack+0xa64>  // b.none
     b54:	ldrb	w2, [x1, #13]
     b58:	cmp	w3, #0xd
     b5c:	strb	w2, [x4, #13]
     b60:	b.eq	b6c <inflateBack+0xa64>  // b.none
     b64:	ldrb	w1, [x1, #14]
     b68:	strb	w1, [x4, #14]
     b6c:	ldr	x2, [sp, #96]
     b70:	add	x0, x0, #0x1
     b74:	ldr	w1, [x23, #92]
     b78:	add	x0, x2, x0
     b7c:	str	x0, [sp, #96]
     b80:	cbz	w1, fe0 <inflateBack+0xed8>
     b84:	ldr	w2, [x23, #60]
     b88:	mov	w26, w2
     b8c:	cbnz	w20, bb4 <inflateBack+0xaac>
     b90:	ldr	x0, [x23, #72]
     b94:	str	w2, [x23, #64]
     b98:	mov	x1, x0
     b9c:	str	x1, [sp, #96]
     ba0:	ldp	x3, x0, [sp, #104]
     ba4:	blr	x3
     ba8:	cbnz	w0, 358 <inflateBack+0x250>
     bac:	mov	w20, w26
     bb0:	ldr	w26, [x23, #60]
     bb4:	ldr	w0, [x23, #96]
     bb8:	sub	w5, w26, w0
     bbc:	cmp	w20, w5
     bc0:	b.ls	c3c <inflateBack+0xb34>  // b.plast
     bc4:	add	w4, w0, w20
     bc8:	ldr	x0, [sp, #96]
     bcc:	sub	w4, w4, w26
     bd0:	mov	x1, x0
     bd4:	add	x5, x0, w5, uxtw
     bd8:	ldr	w0, [x23, #92]
     bdc:	add	x1, x1, #0xf
     be0:	sub	x1, x1, x5
     be4:	cmp	w0, w4
     be8:	csel	w4, w0, w4, ls  // ls = plast
     bec:	cmp	x1, #0x1e
     bf0:	sub	w0, w0, w4
     bf4:	str	w0, [x23, #92]
     bf8:	sub	w0, w4, #0x1
     bfc:	sub	w20, w20, w4
     c00:	ccmp	w0, #0xe, #0x0, hi  // hi = pmore
     c04:	b.ls	c4c <inflateBack+0xb44>  // b.plast
     c08:	sub	w2, w4, #0x10
     c0c:	mov	x1, #0x0                   	// #0
     c10:	mov	w3, #0x0                   	// #0
     c14:	lsr	w2, w2, #4
     c18:	add	w2, w2, #0x1
     c1c:	ldr	q0, [x5, x1]
     c20:	add	w3, w3, #0x1
     c24:	ldr	x6, [sp, #96]
     c28:	cmp	w3, w2
     c2c:	str	q0, [x6, x1]
     c30:	add	x1, x1, #0x10
     c34:	b.cc	c1c <inflateBack+0xb14>  // b.lo, b.ul, b.last
     c38:	b	a6c <inflateBack+0x964>
     c3c:	ldr	x1, [sp, #96]
     c40:	mov	w4, w20
     c44:	sub	x5, x1, w0, uxtw
     c48:	b	bd8 <inflateBack+0xad0>
     c4c:	mov	x1, #0x0                   	// #0
     c50:	ldr	x4, [sp, #96]
     c54:	cmp	x0, x1
     c58:	ldrb	w3, [x5, x1]
     c5c:	strb	w3, [x4, x1]
     c60:	add	x1, x1, #0x1
     c64:	b.ne	c50 <inflateBack+0xb48>  // b.any
     c68:	b	b6c <inflateBack+0xa64>
     c6c:	add	w2, w2, w26
     c70:	mov	w0, #0xffffffff            	// #-1
     c74:	mov	x4, x3
     c78:	lsl	w2, w0, w2
     c7c:	bic	w0, w28, w2
     c80:	mvn	w7, w2
     c84:	lsr	w0, w0, w26
     c88:	add	w0, w0, w6
     c8c:	add	x5, x3, x0, lsl #2
     c90:	lsl	x0, x0, #2
     c94:	ldrb	w1, [x5, #1]
     c98:	add	w2, w1, w26
     c9c:	cmp	w2, w27
     ca0:	b.ls	fe8 <inflateBack+0xee0>  // b.plast
     ca4:	add	x1, sp, #0xb8
     ca8:	mov	x0, x24
     cac:	cbnz	w22, cd0 <inflateBack+0xbc8>
     cb0:	str	w7, [sp, #128]
     cb4:	str	w6, [sp, #136]
     cb8:	blr	x19
     cbc:	mov	w22, w0
     cc0:	cbz	w0, 420 <inflateBack+0x318>
     cc4:	ldr	w7, [sp, #128]
     cc8:	ldr	w6, [sp, #136]
     ccc:	ldr	x4, [x23, #112]
     cd0:	sub	w22, w22, #0x1
     cd4:	ldr	x0, [sp, #184]
     cd8:	add	x1, x0, #0x1
     cdc:	str	x1, [sp, #184]
     ce0:	ldrb	w0, [x0]
     ce4:	lsl	x0, x0, x27
     ce8:	add	x28, x28, x0
     cec:	and	w0, w7, w28
     cf0:	add	w27, w27, #0x8
     cf4:	lsr	w0, w0, w26
     cf8:	add	w0, w0, w6
     cfc:	add	x0, x4, x0, lsl #2
     d00:	ldrb	w1, [x0, #1]
     d04:	add	w2, w1, w26
     d08:	cmp	w2, w27
     d0c:	b.hi	ca4 <inflateBack+0xb9c>  // b.pmore
     d10:	ldrb	w2, [x0]
     d14:	ldrh	w6, [x0, #2]
     d18:	mov	w0, w1
     d1c:	sub	w27, w27, w26
     d20:	lsr	x28, x28, x26
     d24:	b	9dc <inflateBack+0x8d4>
     d28:	ldp	w2, w3, [x23, #132]
     d2c:	str	wzr, [x23, #140]
     d30:	cmn	w2, w3
     d34:	b.eq	df0 <inflateBack+0xce8>  // b.none
     d38:	mov	w26, #0xffffffff            	// #-1
     d3c:	ldr	w4, [x23, #120]
     d40:	ldr	x3, [x23, #104]
     d44:	lsl	w0, w26, w4
     d48:	bic	w0, w28, w0
     d4c:	add	x0, x3, x0, lsl #2
     d50:	ldrb	w2, [x0, #1]
     d54:	cmp	w2, w27
     d58:	b.ls	db4 <inflateBack+0xcac>  // b.plast
     d5c:	add	x1, sp, #0xb8
     d60:	mov	x0, x24
     d64:	cbnz	w22, d7c <inflateBack+0xc74>
     d68:	blr	x19
     d6c:	mov	w22, w0
     d70:	cbz	w0, 420 <inflateBack+0x318>
     d74:	ldr	w4, [x23, #120]
     d78:	ldr	x3, [x23, #104]
     d7c:	lsl	w0, w26, w4
     d80:	ldr	x1, [sp, #184]
     d84:	sub	w22, w22, #0x1
     d88:	add	x2, x1, #0x1
     d8c:	str	x2, [sp, #184]
     d90:	ldrb	w1, [x1]
     d94:	lsl	x1, x1, x27
     d98:	add	x28, x28, x1
     d9c:	bic	w0, w28, w0
     da0:	add	w27, w27, #0x8
     da4:	add	x0, x3, x0, lsl #2
     da8:	ldrb	w2, [x0, #1]
     dac:	cmp	w2, w27
     db0:	b.hi	d5c <inflateBack+0xc54>  // b.pmore
     db4:	ldrh	w1, [x0, #2]
     db8:	cmp	w1, #0xf
     dbc:	b.hi	e20 <inflateBack+0xd18>  // b.pmore
     dc0:	ldr	w0, [x23, #140]
     dc4:	sub	w27, w27, w2
     dc8:	lsr	x28, x28, x2
     dcc:	mov	w4, w0
     dd0:	add	w0, w0, #0x1
     dd4:	str	w0, [x23, #140]
     dd8:	add	x4, x23, w4, uxtw #1
     ddc:	ldp	w2, w3, [x23, #132]
     de0:	strh	w1, [x4, #152]
     de4:	add	w2, w2, w3
     de8:	cmp	w0, w2
     dec:	b.cc	d3c <inflateBack+0xc34>  // b.lo, b.ul, b.last
     df0:	ldr	w1, [x23, #8]
     df4:	mov	w26, #0x3f51                	// #16209
     df8:	cmp	w1, w26
     dfc:	b.eq	18c <inflateBack+0x84>  // b.none
     e00:	ldrh	w0, [x23, #664]
     e04:	cbnz	w0, ff4 <inflateBack+0xeec>
     e08:	adrp	x0, 0 <inflateBackInit_>
     e0c:	add	x0, x0, #0x0
     e10:	str	x0, [x25, #48]
     e14:	mov	w1, w26
     e18:	str	w26, [x23, #8]
     e1c:	b	18c <inflateBack+0x84>
     e20:	cmp	w1, #0x10
     e24:	b.eq	1054 <inflateBack+0xf4c>  // b.none
     e28:	cmp	w1, #0x11
     e2c:	b.eq	edc <inflateBack+0xdd4>  // b.none
     e30:	add	w3, w2, #0x7
     e34:	cmp	w3, w27
     e38:	b.ls	e84 <inflateBack+0xd7c>  // b.plast
     e3c:	add	x1, sp, #0xb8
     e40:	mov	x0, x24
     e44:	cbnz	w22, e5c <inflateBack+0xd54>
     e48:	stp	w2, w3, [sp, #168]
     e4c:	blr	x19
     e50:	mov	w22, w0
     e54:	ldp	w2, w3, [sp, #168]
     e58:	cbz	w0, 420 <inflateBack+0x318>
     e5c:	ldr	x0, [sp, #184]
     e60:	sub	w22, w22, #0x1
     e64:	add	x1, x0, #0x1
     e68:	str	x1, [sp, #184]
     e6c:	ldrb	w0, [x0]
     e70:	lsl	x0, x0, x27
     e74:	add	w27, w27, #0x8
     e78:	add	x28, x28, x0
     e7c:	cmp	w27, w3
     e80:	b.cc	e3c <inflateBack+0xd34>  // b.lo, b.ul, b.last
     e84:	lsr	x8, x28, x2
     e88:	sub	w7, w27, w2
     e8c:	and	w1, w8, #0x7f
     e90:	ldr	w0, [x23, #140]
     e94:	sub	w27, w7, #0x7
     e98:	add	w1, w1, #0xb
     e9c:	lsr	x28, x8, #7
     ea0:	mov	w4, #0x0                   	// #0
     ea4:	ldp	w2, w3, [x23, #132]
     ea8:	add	w1, w0, w1
     eac:	add	w5, w2, w3
     eb0:	cmp	w1, w5
     eb4:	b.hi	1038 <inflateBack+0xf30>  // b.pmore
     eb8:	and	w4, w4, #0xffff
     ebc:	add	x5, x23, w0, uxtw #1
     ec0:	add	w0, w0, #0x1
     ec4:	cmp	w1, w0
     ec8:	strh	w4, [x5, #152]
     ecc:	b.ne	ebc <inflateBack+0xdb4>  // b.any
     ed0:	mov	w0, w1
     ed4:	str	w1, [x23, #140]
     ed8:	b	de4 <inflateBack+0xcdc>
     edc:	add	w3, w2, #0x3
     ee0:	cmp	w3, w27
     ee4:	b.ls	f30 <inflateBack+0xe28>  // b.plast
     ee8:	add	x1, sp, #0xb8
     eec:	mov	x0, x24
     ef0:	cbnz	w22, f08 <inflateBack+0xe00>
     ef4:	stp	w2, w3, [sp, #168]
     ef8:	blr	x19
     efc:	mov	w22, w0
     f00:	ldp	w2, w3, [sp, #168]
     f04:	cbz	w0, 420 <inflateBack+0x318>
     f08:	ldr	x0, [sp, #184]
     f0c:	sub	w22, w22, #0x1
     f10:	add	x1, x0, #0x1
     f14:	str	x1, [sp, #184]
     f18:	ldrb	w0, [x0]
     f1c:	lsl	x0, x0, x27
     f20:	add	w27, w27, #0x8
     f24:	add	x28, x28, x0
     f28:	cmp	w27, w3
     f2c:	b.cc	ee8 <inflateBack+0xde0>  // b.lo, b.ul, b.last
     f30:	lsr	x8, x28, x2
     f34:	mov	w0, #0xfffffffd            	// #-3
     f38:	and	w1, w8, #0x7
     f3c:	sub	w2, w0, w2
     f40:	add	w27, w27, w2
     f44:	ldr	w0, [x23, #140]
     f48:	add	w1, w1, #0x3
     f4c:	lsr	x28, x8, #3
     f50:	mov	w4, #0x0                   	// #0
     f54:	b	ea4 <inflateBack+0xd9c>
     f58:	ldrb	w2, [x3, x0]
     f5c:	ldrh	w6, [x5, #2]
     f60:	b	9d0 <inflateBack+0x8c8>
     f64:	ldrb	w2, [x3, x0]
     f68:	ldrh	w0, [x4, #2]
     f6c:	b	89c <inflateBack+0x794>
     f70:	cmp	w2, w27
     f74:	b.ls	fbc <inflateBack+0xeb4>  // b.plast
     f78:	add	x1, sp, #0xb8
     f7c:	mov	x0, x24
     f80:	cbnz	w22, f94 <inflateBack+0xe8c>
     f84:	blr	x19
     f88:	mov	w22, w0
     f8c:	cbz	w0, 420 <inflateBack+0x318>
     f90:	ldr	w2, [x23, #100]
     f94:	ldr	x0, [sp, #184]
     f98:	sub	w22, w22, #0x1
     f9c:	add	x1, x0, #0x1
     fa0:	str	x1, [sp, #184]
     fa4:	ldrb	w0, [x0]
     fa8:	lsl	x0, x0, x27
     fac:	add	w27, w27, #0x8
     fb0:	add	x28, x28, x0
     fb4:	cmp	w27, w2
     fb8:	b.cc	f78 <inflateBack+0xe70>  // b.lo, b.ul, b.last
     fbc:	ldr	w0, [x23, #96]
     fc0:	mov	w1, #0xffffffff            	// #-1
     fc4:	lsl	w1, w1, w2
     fc8:	bic	w1, w28, w1
     fcc:	add	w1, w1, w0
     fd0:	sub	w27, w27, w2
     fd4:	lsr	x28, x28, x2
     fd8:	str	w1, [x23, #96]
     fdc:	b	a38 <inflateBack+0x930>
     fe0:	ldr	w1, [x23, #8]
     fe4:	b	18c <inflateBack+0x84>
     fe8:	ldrb	w2, [x3, x0]
     fec:	ldrh	w6, [x5, #2]
     ff0:	b	d18 <inflateBack+0xc10>
     ff4:	ldp	x3, x5, [sp, #136]
     ff8:	mov	w0, #0x9                   	// #9
     ffc:	ldp	x1, x4, [sp, #152]
    1000:	str	x1, [x23, #104]
    1004:	ldr	w2, [x23, #132]
    1008:	str	x1, [x23, #144]
    100c:	ldr	x1, [sp, #128]
    1010:	str	w0, [x23, #120]
    1014:	mov	w0, #0x1                   	// #1
    1018:	bl	0 <inflate_table>
    101c:	cbz	w0, 10d8 <inflateBack+0xfd0>
    1020:	adrp	x0, 0 <inflateBackInit_>
    1024:	add	x0, x0, #0x0
    1028:	str	x0, [x25, #48]
    102c:	mov	w1, w26
    1030:	str	w26, [x23, #8]
    1034:	b	18c <inflateBack+0x84>
    1038:	adrp	x0, 0 <inflateBackInit_>
    103c:	add	x0, x0, #0x0
    1040:	str	x0, [x25, #48]
    1044:	mov	w1, #0x3f51                	// #16209
    1048:	mov	w0, #0x3f51                	// #16209
    104c:	str	w0, [x23, #8]
    1050:	b	18c <inflateBack+0x84>
    1054:	add	w3, w2, #0x2
    1058:	cmp	w3, w27
    105c:	b.ls	10a8 <inflateBack+0xfa0>  // b.plast
    1060:	add	x1, sp, #0xb8
    1064:	mov	x0, x24
    1068:	cbnz	w22, 1080 <inflateBack+0xf78>
    106c:	stp	w2, w3, [sp, #168]
    1070:	blr	x19
    1074:	mov	w22, w0
    1078:	ldp	w2, w3, [sp, #168]
    107c:	cbz	w0, 420 <inflateBack+0x318>
    1080:	ldr	x0, [sp, #184]
    1084:	sub	w22, w22, #0x1
    1088:	add	x1, x0, #0x1
    108c:	str	x1, [sp, #184]
    1090:	ldrb	w0, [x0]
    1094:	lsl	x0, x0, x27
    1098:	add	w27, w27, #0x8
    109c:	add	x28, x28, x0
    10a0:	cmp	w27, w3
    10a4:	b.cc	1060 <inflateBack+0xf58>  // b.lo, b.ul, b.last
    10a8:	ldr	w0, [x23, #140]
    10ac:	sub	w27, w27, w2
    10b0:	lsr	x28, x28, x2
    10b4:	cbz	w0, 1038 <inflateBack+0xf30>
    10b8:	sub	w2, w0, #0x1
    10bc:	and	w1, w28, #0x3
    10c0:	sub	w27, w27, #0x2
    10c4:	add	w1, w1, #0x3
    10c8:	add	x2, x23, x2, lsl #1
    10cc:	lsr	x28, x28, #2
    10d0:	ldrh	w4, [x2, #152]
    10d4:	b	ea4 <inflateBack+0xd9c>
    10d8:	ldp	x6, x3, [sp, #128]
    10dc:	mov	x4, x23
    10e0:	ldp	w1, w2, [x23, #132]
    10e4:	ldr	x0, [x23, #144]
    10e8:	str	x0, [x23, #112]
    10ec:	ldr	x5, [sp, #144]
    10f0:	mov	w0, #0x6                   	// #6
    10f4:	str	w0, [x4, #124]!
    10f8:	add	x1, x6, x1, lsl #1
    10fc:	mov	w0, #0x2                   	// #2
    1100:	bl	0 <inflate_table>
    1104:	cbz	w0, 1120 <inflateBack+0x1018>
    1108:	adrp	x0, 0 <inflateBackInit_>
    110c:	add	x0, x0, #0x0
    1110:	str	x0, [x25, #48]
    1114:	mov	w1, w26
    1118:	str	w26, [x23, #8]
    111c:	b	18c <inflateBack+0x84>
    1120:	mov	w0, #0x3f48                	// #16200
    1124:	str	w0, [x23, #8]
    1128:	b	250 <inflateBack+0x148>
    112c:	nop

0000000000001130 <inflateBackEnd>:
    1130:	cbz	x0, 1178 <inflateBackEnd+0x48>
    1134:	stp	x29, x30, [sp, #-32]!
    1138:	mov	x29, sp
    113c:	ldr	x1, [x0, #56]
    1140:	str	x19, [sp, #16]
    1144:	mov	x19, x0
    1148:	cbz	x1, 1170 <inflateBackEnd+0x40>
    114c:	ldr	x2, [x0, #72]
    1150:	cbz	x2, 1170 <inflateBackEnd+0x40>
    1154:	ldr	x0, [x0, #80]
    1158:	blr	x2
    115c:	str	xzr, [x19, #56]
    1160:	mov	w0, #0x0                   	// #0
    1164:	ldr	x19, [sp, #16]
    1168:	ldp	x29, x30, [sp], #32
    116c:	ret
    1170:	mov	w0, #0xfffffffe            	// #-2
    1174:	b	1164 <inflateBackEnd+0x34>
    1178:	mov	w0, #0xfffffffe            	// #-2
    117c:	ret

inffast.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_fast>:
   0:	stp	x29, x30, [sp, #-144]!
   4:	mov	w13, #0x1                   	// #1
   8:	mov	w6, w13
   c:	mov	x29, sp
  10:	ldr	x8, [x0, #56]
  14:	stp	x19, x20, [sp, #16]
  18:	ldr	w11, [x0, #32]
  1c:	ldr	w12, [x0, #8]
  20:	ldp	x18, x2, [x8, #72]
  24:	sub	w17, w1, w11
  28:	ldr	w15, [x8, #68]
  2c:	sub	w12, w12, #0x5
  30:	ldp	w10, w16, [x8, #120]
  34:	stp	x21, x22, [sp, #32]
  38:	mov	w22, #0xffffffff            	// #-1
  3c:	ldp	w19, w1, [x8, #60]
  40:	add	w30, w15, w22
  44:	ldr	x7, [x0]
  48:	and	x20, x15, #0xfffffff0
  4c:	ldr	x5, [x0, #24]
  50:	sub	w11, w11, #0x101
  54:	ldp	x4, x9, [x8, #104]
  58:	and	w21, w15, #0xfffffff0
  5c:	ldr	w3, [x8, #88]
  60:	lsl	w16, w13, w16
  64:	str	w1, [sp, #96]
  68:	mov	w1, w30
  6c:	lsl	w13, w13, w10
  70:	add	x12, x7, x12
  74:	sub	x17, x5, x17
  78:	add	x11, x5, x11
  7c:	add	w16, w16, w22
  80:	add	w13, w13, w22
  84:	stp	x23, x24, [sp, #48]
  88:	add	x24, x18, x20
  8c:	stp	x27, x28, [sp, #80]
  90:	sub	w28, w30, w21
  94:	str	x1, [sp, #104]
  98:	add	w1, w19, w15
  9c:	str	w1, [sp, #100]
  a0:	add	x1, x18, #0x10
  a4:	str	x20, [sp, #112]
  a8:	str	x1, [sp, #120]
  ac:	cmp	w3, #0xe
  b0:	b.hi	d8 <inflate_fast+0xd8>  // b.pmore
  b4:	ldrb	w1, [x7, #1]
  b8:	add	w14, w3, #0x8
  bc:	ldrb	w10, [x7]
  c0:	add	x7, x7, #0x2
  c4:	lsl	x1, x1, x14
  c8:	lsl	x10, x10, x3
  cc:	add	x1, x1, x10
  d0:	add	x2, x2, x1
  d4:	add	w3, w3, #0x10
  d8:	and	x1, x2, x13
  dc:	b	f8 <inflate_fast+0xf8>
  e0:	tbnz	w1, #4, 1a4 <inflate_fast+0x1a4>
  e4:	tbnz	w1, #6, 2f4 <inflate_fast+0x2f4>
  e8:	lsl	w1, w6, w1
  ec:	sub	w1, w1, #0x1
  f0:	and	x1, x1, x2
  f4:	add	x1, x1, w14, uxth
  f8:	lsl	x1, x1, #2
  fc:	add	x14, x4, x1
 100:	ldrb	w1, [x4, x1]
 104:	ldrb	w10, [x14, #1]
 108:	ldrh	w14, [x14, #2]
 10c:	sub	w3, w3, w10
 110:	lsr	x2, x2, x10
 114:	cbnz	w1, e0 <inflate_fast+0xe0>
 118:	strb	w14, [x5], #1
 11c:	cmp	x7, x12
 120:	ccmp	x5, x11, #0x2, cc  // cc = lo, ul, last
 124:	b.cc	ac <inflate_fast+0xac>  // b.lo, b.ul, b.last
 128:	lsr	w1, w3, #3
 12c:	sub	x9, x11, x5
 130:	sub	x7, x7, x1
 134:	and	w3, w3, #0x7
 138:	sub	x1, x12, x7
 13c:	sub	w6, w12, w7
 140:	cmp	x12, x7
 144:	add	w1, w1, #0x5
 148:	sub	w4, w11, w5
 14c:	add	w6, w6, #0x5
 150:	csel	w6, w6, w1, ls  // ls = plast
 154:	add	w9, w9, #0x101
 158:	cmp	x5, x11
 15c:	add	w4, w4, #0x101
 160:	mov	w1, #0x1                   	// #1
 164:	csel	w4, w4, w9, cs  // cs = hs, nlast
 168:	lsl	w1, w1, w3
 16c:	sub	w1, w1, #0x1
 170:	ldp	x19, x20, [sp, #16]
 174:	and	x2, x1, x2
 178:	ldp	x21, x22, [sp, #32]
 17c:	ldp	x23, x24, [sp, #48]
 180:	ldp	x27, x28, [sp, #80]
 184:	str	x7, [x0]
 188:	str	w6, [x0, #8]
 18c:	str	x5, [x0, #24]
 190:	str	w4, [x0, #32]
 194:	str	x2, [x8, #80]
 198:	str	w3, [x8, #88]
 19c:	ldp	x29, x30, [sp], #144
 1a0:	ret
 1a4:	ands	w10, w1, #0xf
 1a8:	mov	w1, w14
 1ac:	b.eq	1dc <inflate_fast+0x1dc>  // b.none
 1b0:	cmp	w10, w3
 1b4:	b.ls	1c8 <inflate_fast+0x1c8>  // b.plast
 1b8:	ldrb	w1, [x7], #1
 1bc:	lsl	x1, x1, x3
 1c0:	add	w3, w3, #0x8
 1c4:	add	x2, x2, x1
 1c8:	lsl	w1, w22, w10
 1cc:	bic	w1, w2, w1
 1d0:	sub	w3, w3, w10
 1d4:	add	w1, w14, w1
 1d8:	lsr	x2, x2, x10
 1dc:	cmp	w3, #0xe
 1e0:	b.ls	304 <inflate_fast+0x304>  // b.plast
 1e4:	and	x10, x16, x2
 1e8:	b	200 <inflate_fast+0x200>
 1ec:	tbnz	w10, #6, 344 <inflate_fast+0x344>
 1f0:	lsl	w10, w6, w10
 1f4:	sub	w10, w10, #0x1
 1f8:	and	x10, x10, x2
 1fc:	add	x10, x10, w23, uxth
 200:	lsl	x10, x10, #2
 204:	add	x23, x9, x10
 208:	ldrb	w10, [x9, x10]
 20c:	ldrb	w14, [x23, #1]
 210:	ldrh	w23, [x23, #2]
 214:	sub	w3, w3, w14
 218:	lsr	x2, x2, x14
 21c:	tbz	w10, #4, 1ec <inflate_fast+0x1ec>
 220:	stp	x25, x26, [sp, #64]
 224:	and	w10, w10, #0xf
 228:	cmp	w10, w3
 22c:	b.ls	250 <inflate_fast+0x250>  // b.plast
 230:	ldrb	w14, [x7]
 234:	add	w25, w3, #0x8
 238:	cmp	w10, w25
 23c:	lsl	x14, x14, x3
 240:	add	x2, x2, x14
 244:	b.hi	530 <inflate_fast+0x530>  // b.pmore
 248:	add	x7, x7, #0x1
 24c:	mov	w3, w25
 250:	lsl	w14, w22, w10
 254:	bic	w14, w2, w14
 258:	add	w14, w14, w23
 25c:	sub	x25, x5, x17
 260:	sub	w3, w3, w10
 264:	cmp	w14, w25
 268:	lsr	x2, x2, x10
 26c:	b.ls	4ec <inflate_fast+0x4ec>  // b.plast
 270:	ldr	w10, [sp, #96]
 274:	sub	w23, w14, w25
 278:	cmp	w10, w23
 27c:	b.cs	288 <inflate_fast+0x288>  // b.hs, b.nlast
 280:	ldr	w10, [x8, #7144]
 284:	cbnz	w10, 704 <inflate_fast+0x704>
 288:	sub	w25, w25, w14
 28c:	cbnz	w15, 35c <inflate_fast+0x35c>
 290:	add	w26, w19, w25
 294:	cmp	w1, w23
 298:	add	x10, x18, x26
 29c:	b.hi	734 <inflate_fast+0x734>  // b.pmore
 2a0:	cmp	w1, #0x2
 2a4:	b.ls	2d4 <inflate_fast+0x2d4>  // b.plast
 2a8:	ldrb	w14, [x10]
 2ac:	add	x10, x10, #0x3
 2b0:	strb	w14, [x5]
 2b4:	add	x5, x5, #0x3
 2b8:	sub	w1, w1, #0x3
 2bc:	ldurb	w14, [x10, #-2]
 2c0:	cmp	w1, #0x2
 2c4:	sturb	w14, [x5, #-2]
 2c8:	ldurb	w14, [x10, #-1]
 2cc:	sturb	w14, [x5, #-1]
 2d0:	b.hi	2a8 <inflate_fast+0x2a8>  // b.pmore
 2d4:	cbz	w1, 528 <inflate_fast+0x528>
 2d8:	ldrb	w14, [x10]
 2dc:	cmp	w1, #0x2
 2e0:	strb	w14, [x5]
 2e4:	b.eq	720 <inflate_fast+0x720>  // b.none
 2e8:	add	x5, x5, #0x1
 2ec:	ldp	x25, x26, [sp, #64]
 2f0:	b	11c <inflate_fast+0x11c>
 2f4:	tbz	w1, #5, 32c <inflate_fast+0x32c>
 2f8:	mov	w1, #0x3f3f                	// #16191
 2fc:	str	w1, [x8, #8]
 300:	b	128 <inflate_fast+0x128>
 304:	ldrb	w10, [x7, #1]
 308:	add	w23, w3, #0x8
 30c:	ldrb	w14, [x7]
 310:	add	x7, x7, #0x2
 314:	lsl	x10, x10, x23
 318:	lsl	x14, x14, x3
 31c:	add	x10, x10, x14
 320:	add	x2, x2, x10
 324:	add	w3, w3, #0x10
 328:	b	1e4 <inflate_fast+0x1e4>
 32c:	adrp	x1, 0 <inflate_fast>
 330:	add	x1, x1, #0x0
 334:	str	x1, [x0, #48]
 338:	mov	w1, #0x3f51                	// #16209
 33c:	str	w1, [x8, #8]
 340:	b	128 <inflate_fast+0x128>
 344:	adrp	x1, 0 <inflate_fast>
 348:	add	x1, x1, #0x0
 34c:	str	x1, [x0, #48]
 350:	mov	w1, #0x3f51                	// #16209
 354:	str	w1, [x8, #8]
 358:	b	128 <inflate_fast+0x128>
 35c:	cmp	w15, w23
 360:	b.cs	548 <inflate_fast+0x548>  // b.hs, b.nlast
 364:	ldr	w10, [sp, #100]
 368:	sub	w23, w23, w15
 36c:	cmp	w1, w23
 370:	add	w26, w10, w25
 374:	add	x10, x18, x26
 378:	b.ls	2a0 <inflate_fast+0x2a0>  // b.plast
 37c:	add	x26, x26, #0x10
 380:	add	w1, w1, w15
 384:	add	x27, x18, x26
 388:	add	x26, x5, #0x10
 38c:	cmp	x5, x27
 390:	sub	w27, w23, #0x1
 394:	str	w27, [sp, #128]
 398:	ccmp	x10, x26, #0x2, cc  // cc = lo, ul, last
 39c:	add	w1, w1, w25
 3a0:	ccmp	w27, #0xe, #0x0, cs  // cs = hs, nlast
 3a4:	b.ls	8d0 <inflate_fast+0x8d0>  // b.plast
 3a8:	and	x26, x23, #0xfffffff0
 3ac:	mov	x25, #0x0                   	// #0
 3b0:	ldr	q0, [x10, x25]
 3b4:	str	q0, [x5, x25]
 3b8:	add	x25, x25, #0x10
 3bc:	cmp	x25, x26
 3c0:	b.ne	3b0 <inflate_fast+0x3b0>  // b.any
 3c4:	str	w27, [sp, #128]
 3c8:	and	x25, x23, #0xfffffff0
 3cc:	tst	x23, #0xf
 3d0:	add	x26, x5, x25
 3d4:	and	w23, w23, #0xfffffff0
 3d8:	add	x25, x10, x25
 3dc:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 3e0:	ldrb	w10, [x10, w23, uxtw]
 3e4:	strb	w10, [x5, w23, uxtw]
 3e8:	ldr	w10, [sp, #128]
 3ec:	subs	w10, w10, w23
 3f0:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 3f4:	ldrb	w23, [x25, #1]
 3f8:	cmp	w10, #0x1
 3fc:	strb	w23, [x26, #1]
 400:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 404:	ldrb	w23, [x25, #2]
 408:	cmp	w10, #0x2
 40c:	strb	w23, [x26, #2]
 410:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 414:	ldrb	w23, [x25, #3]
 418:	cmp	w10, #0x3
 41c:	strb	w23, [x26, #3]
 420:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 424:	ldrb	w23, [x25, #4]
 428:	cmp	w10, #0x4
 42c:	strb	w23, [x26, #4]
 430:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 434:	ldrb	w23, [x25, #5]
 438:	cmp	w10, #0x5
 43c:	strb	w23, [x26, #5]
 440:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 444:	ldrb	w23, [x25, #6]
 448:	cmp	w10, #0x6
 44c:	strb	w23, [x26, #6]
 450:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 454:	ldrb	w23, [x25, #7]
 458:	cmp	w10, #0x7
 45c:	strb	w23, [x26, #7]
 460:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 464:	ldrb	w23, [x25, #8]
 468:	cmp	w10, #0x8
 46c:	strb	w23, [x26, #8]
 470:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 474:	ldrb	w23, [x25, #9]
 478:	cmp	w10, #0x9
 47c:	strb	w23, [x26, #9]
 480:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 484:	ldrb	w23, [x25, #10]
 488:	cmp	w10, #0xa
 48c:	strb	w23, [x26, #10]
 490:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 494:	ldrb	w23, [x25, #11]
 498:	cmp	w10, #0xb
 49c:	strb	w23, [x26, #11]
 4a0:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 4a4:	ldrb	w23, [x25, #12]
 4a8:	cmp	w10, #0xc
 4ac:	strb	w23, [x26, #12]
 4b0:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 4b4:	ldrb	w23, [x25, #13]
 4b8:	cmp	w10, #0xd
 4bc:	strb	w23, [x26, #13]
 4c0:	b.eq	4cc <inflate_fast+0x4cc>  // b.none
 4c4:	ldrb	w10, [x25, #14]
 4c8:	strb	w10, [x26, #14]
 4cc:	ldr	w10, [sp, #128]
 4d0:	cmp	w15, w1
 4d4:	add	x23, x10, #0x1
 4d8:	add	x23, x5, x23
 4dc:	b.cc	914 <inflate_fast+0x914>  // b.lo, b.ul, b.last
 4e0:	mov	x5, x23
 4e4:	mov	x10, x18
 4e8:	b	2a0 <inflate_fast+0x2a0>
 4ec:	sub	x14, x5, w14, uxtw
 4f0:	ldrb	w10, [x14]
 4f4:	mov	x25, x14
 4f8:	strb	w10, [x5]
 4fc:	add	x14, x14, #0x3
 500:	mov	x23, x5
 504:	add	x5, x5, #0x3
 508:	ldurb	w10, [x14, #-2]
 50c:	sub	w1, w1, #0x3
 510:	sturb	w10, [x5, #-2]
 514:	cmp	w1, #0x2
 518:	ldurb	w10, [x14, #-1]
 51c:	sturb	w10, [x5, #-1]
 520:	b.hi	4f0 <inflate_fast+0x4f0>  // b.pmore
 524:	cbnz	w1, 6ec <inflate_fast+0x6ec>
 528:	ldp	x25, x26, [sp, #64]
 52c:	b	11c <inflate_fast+0x11c>
 530:	ldrb	w14, [x7, #1]
 534:	add	w3, w3, #0x10
 538:	add	x7, x7, #0x2
 53c:	lsl	x25, x14, x25
 540:	add	x2, x2, x25
 544:	b	250 <inflate_fast+0x250>
 548:	add	w26, w15, w25
 54c:	cmp	w1, w23
 550:	add	x10, x18, x26
 554:	b.ls	2a0 <inflate_fast+0x2a0>  // b.plast
 558:	add	x26, x26, #0x10
 55c:	add	w1, w1, w25
 560:	add	x25, x18, x26
 564:	add	x26, x5, #0x10
 568:	cmp	x5, x25
 56c:	sub	w25, w23, #0x1
 570:	str	w25, [sp, #128]
 574:	ccmp	x10, x26, #0x2, cc  // cc = lo, ul, last
 578:	ccmp	w25, #0xe, #0x0, cs  // cs = hs, nlast
 57c:	b.ls	8f4 <inflate_fast+0x8f4>  // b.plast
 580:	sub	w25, w23, #0x10
 584:	mov	x26, #0x0                   	// #0
 588:	mov	w27, #0x0                   	// #0
 58c:	str	x0, [sp, #136]
 590:	lsr	w25, w25, #4
 594:	add	w25, w25, #0x1
 598:	str	w25, [sp, #132]
 59c:	ldr	w25, [sp, #128]
 5a0:	ldr	q0, [x10, x26]
 5a4:	add	w27, w27, #0x1
 5a8:	ldr	w0, [sp, #132]
 5ac:	str	q0, [x5, x26]
 5b0:	cmp	w0, w27
 5b4:	add	x26, x26, #0x10
 5b8:	b.hi	5a0 <inflate_fast+0x5a0>  // b.pmore
 5bc:	ldr	w27, [sp, #132]
 5c0:	str	w25, [sp, #128]
 5c4:	ldr	x0, [sp, #136]
 5c8:	lsl	w26, w27, #4
 5cc:	cmp	w23, w27, lsl #4
 5d0:	lsl	w23, w27, #4
 5d4:	mov	w25, w23
 5d8:	add	x23, x5, x26
 5dc:	add	x26, x10, x26
 5e0:	b.eq	894 <inflate_fast+0x894>  // b.none
 5e4:	ldrb	w10, [x10, w25, uxtw]
 5e8:	str	w10, [sp, #132]
 5ec:	ldr	w10, [sp, #128]
 5f0:	subs	w27, w10, w25
 5f4:	ldrb	w10, [sp, #132]
 5f8:	strb	w10, [x5, w25, uxtw]
 5fc:	b.eq	894 <inflate_fast+0x894>  // b.none
 600:	ldrb	w10, [x26, #1]
 604:	cmp	w27, #0x1
 608:	strb	w10, [x23, #1]
 60c:	b.eq	894 <inflate_fast+0x894>  // b.none
 610:	ldrb	w10, [x26, #2]
 614:	cmp	w27, #0x2
 618:	strb	w10, [x23, #2]
 61c:	b.eq	894 <inflate_fast+0x894>  // b.none
 620:	ldrb	w10, [x26, #3]
 624:	cmp	w27, #0x3
 628:	strb	w10, [x23, #3]
 62c:	b.eq	894 <inflate_fast+0x894>  // b.none
 630:	ldrb	w10, [x26, #4]
 634:	cmp	w27, #0x4
 638:	strb	w10, [x23, #4]
 63c:	b.eq	894 <inflate_fast+0x894>  // b.none
 640:	ldrb	w10, [x26, #5]
 644:	cmp	w27, #0x5
 648:	strb	w10, [x23, #5]
 64c:	b.eq	894 <inflate_fast+0x894>  // b.none
 650:	ldrb	w10, [x26, #6]
 654:	cmp	w27, #0x6
 658:	strb	w10, [x23, #6]
 65c:	b.eq	894 <inflate_fast+0x894>  // b.none
 660:	ldrb	w10, [x26, #7]
 664:	cmp	w27, #0x7
 668:	strb	w10, [x23, #7]
 66c:	b.eq	894 <inflate_fast+0x894>  // b.none
 670:	ldrb	w10, [x26, #8]
 674:	cmp	w27, #0x8
 678:	strb	w10, [x23, #8]
 67c:	b.eq	894 <inflate_fast+0x894>  // b.none
 680:	ldrb	w10, [x26, #9]
 684:	cmp	w27, #0x9
 688:	strb	w10, [x23, #9]
 68c:	b.eq	894 <inflate_fast+0x894>  // b.none
 690:	ldrb	w10, [x26, #10]
 694:	cmp	w27, #0xa
 698:	strb	w10, [x23, #10]
 69c:	b.eq	894 <inflate_fast+0x894>  // b.none
 6a0:	ldrb	w10, [x26, #11]
 6a4:	cmp	w27, #0xb
 6a8:	strb	w10, [x23, #11]
 6ac:	b.eq	894 <inflate_fast+0x894>  // b.none
 6b0:	ldrb	w10, [x26, #12]
 6b4:	cmp	w27, #0xc
 6b8:	strb	w10, [x23, #12]
 6bc:	b.eq	894 <inflate_fast+0x894>  // b.none
 6c0:	ldrb	w10, [x26, #13]
 6c4:	cmp	w27, #0xd
 6c8:	strb	w10, [x23, #13]
 6cc:	b.eq	894 <inflate_fast+0x894>  // b.none
 6d0:	ldrb	w10, [x26, #14]
 6d4:	ldr	w25, [sp, #128]
 6d8:	strb	w10, [x23, #14]
 6dc:	add	x25, x25, #0x1
 6e0:	add	x5, x5, x25
 6e4:	sub	x10, x5, w14, uxtw
 6e8:	b	2a0 <inflate_fast+0x2a0>
 6ec:	ldrb	w5, [x25, #3]
 6f0:	strb	w5, [x23, #3]
 6f4:	b.eq	89c <inflate_fast+0x89c>  // b.none
 6f8:	add	x5, x23, #0x4
 6fc:	ldp	x25, x26, [sp, #64]
 700:	b	11c <inflate_fast+0x11c>
 704:	adrp	x1, 0 <inflate_fast>
 708:	add	x1, x1, #0x0
 70c:	ldp	x25, x26, [sp, #64]
 710:	str	x1, [x0, #48]
 714:	mov	w1, #0x3f51                	// #16209
 718:	str	w1, [x8, #8]
 71c:	b	128 <inflate_fast+0x128>
 720:	ldrb	w1, [x10, #1]
 724:	add	x5, x5, #0x2
 728:	sturb	w1, [x5, #-1]
 72c:	ldp	x25, x26, [sp, #64]
 730:	b	11c <inflate_fast+0x11c>
 734:	add	x26, x26, #0x10
 738:	add	w1, w1, w25
 73c:	add	x25, x18, x26
 740:	sub	w27, w23, #0x1
 744:	add	x26, x5, #0x10
 748:	cmp	x5, x25
 74c:	str	w27, [sp, #128]
 750:	ccmp	x10, x26, #0x2, cc  // cc = lo, ul, last
 754:	ccmp	w27, #0xe, #0x0, cs  // cs = hs, nlast
 758:	b.ls	8b0 <inflate_fast+0x8b0>  // b.plast
 75c:	sub	w27, w23, #0x10
 760:	mov	w26, #0x0                   	// #0
 764:	mov	x25, #0x0                   	// #0
 768:	lsr	w27, w27, #4
 76c:	add	w27, w27, #0x1
 770:	ldr	q0, [x10, x25]
 774:	add	w26, w26, #0x1
 778:	cmp	w27, w26
 77c:	str	q0, [x5, x25]
 780:	add	x25, x25, #0x10
 784:	b.hi	770 <inflate_fast+0x770>  // b.pmore
 788:	lsl	w25, w27, #4
 78c:	cmp	w23, w27, lsl #4
 790:	add	x23, x5, x25
 794:	lsl	w27, w27, #4
 798:	add	x25, x10, x25
 79c:	b.eq	894 <inflate_fast+0x894>  // b.none
 7a0:	ldrb	w10, [x10, w27, uxtw]
 7a4:	ldr	w26, [sp, #128]
 7a8:	strb	w10, [x5, w27, uxtw]
 7ac:	subs	w26, w26, w27
 7b0:	b.eq	894 <inflate_fast+0x894>  // b.none
 7b4:	ldrb	w10, [x25, #1]
 7b8:	cmp	w26, #0x1
 7bc:	strb	w10, [x23, #1]
 7c0:	b.eq	894 <inflate_fast+0x894>  // b.none
 7c4:	ldrb	w10, [x25, #2]
 7c8:	cmp	w26, #0x2
 7cc:	strb	w10, [x23, #2]
 7d0:	b.eq	894 <inflate_fast+0x894>  // b.none
 7d4:	ldrb	w10, [x25, #3]
 7d8:	cmp	w26, #0x3
 7dc:	strb	w10, [x23, #3]
 7e0:	b.eq	894 <inflate_fast+0x894>  // b.none
 7e4:	ldrb	w10, [x25, #4]
 7e8:	cmp	w26, #0x4
 7ec:	strb	w10, [x23, #4]
 7f0:	b.eq	894 <inflate_fast+0x894>  // b.none
 7f4:	ldrb	w10, [x25, #5]
 7f8:	cmp	w26, #0x5
 7fc:	strb	w10, [x23, #5]
 800:	b.eq	894 <inflate_fast+0x894>  // b.none
 804:	ldrb	w10, [x25, #6]
 808:	cmp	w26, #0x6
 80c:	strb	w10, [x23, #6]
 810:	b.eq	894 <inflate_fast+0x894>  // b.none
 814:	ldrb	w10, [x25, #7]
 818:	cmp	w26, #0x7
 81c:	strb	w10, [x23, #7]
 820:	b.eq	894 <inflate_fast+0x894>  // b.none
 824:	ldrb	w10, [x25, #8]
 828:	cmp	w26, #0x8
 82c:	strb	w10, [x23, #8]
 830:	b.eq	894 <inflate_fast+0x894>  // b.none
 834:	ldrb	w10, [x25, #9]
 838:	cmp	w26, #0x9
 83c:	strb	w10, [x23, #9]
 840:	b.eq	894 <inflate_fast+0x894>  // b.none
 844:	ldrb	w10, [x25, #10]
 848:	cmp	w26, #0xa
 84c:	strb	w10, [x23, #10]
 850:	b.eq	894 <inflate_fast+0x894>  // b.none
 854:	ldrb	w10, [x25, #11]
 858:	cmp	w26, #0xb
 85c:	strb	w10, [x23, #11]
 860:	b.eq	894 <inflate_fast+0x894>  // b.none
 864:	ldrb	w10, [x25, #12]
 868:	cmp	w26, #0xc
 86c:	strb	w10, [x23, #12]
 870:	b.eq	894 <inflate_fast+0x894>  // b.none
 874:	ldrb	w10, [x25, #13]
 878:	cmp	w26, #0xd
 87c:	strb	w10, [x23, #13]
 880:	b.eq	894 <inflate_fast+0x894>  // b.none
 884:	ldrb	w10, [x25, #14]
 888:	ldr	w25, [sp, #128]
 88c:	strb	w10, [x23, #14]
 890:	b	6dc <inflate_fast+0x6dc>
 894:	ldr	w25, [sp, #128]
 898:	b	6dc <inflate_fast+0x6dc>
 89c:	ldrb	w1, [x25, #4]
 8a0:	add	x5, x23, #0x5
 8a4:	strb	w1, [x23, #4]
 8a8:	ldp	x25, x26, [sp, #64]
 8ac:	b	11c <inflate_fast+0x11c>
 8b0:	ldr	w25, [sp, #128]
 8b4:	mov	x23, #0x0                   	// #0
 8b8:	ldrb	w27, [x10, x23]
 8bc:	cmp	x23, x25
 8c0:	strb	w27, [x5, x23]
 8c4:	add	x23, x23, #0x1
 8c8:	b.ne	8b8 <inflate_fast+0x8b8>  // b.any
 8cc:	b	6dc <inflate_fast+0x6dc>
 8d0:	ldr	w27, [sp, #128]
 8d4:	mov	x25, #0x0                   	// #0
 8d8:	ldrb	w26, [x10, x25]
 8dc:	strb	w26, [x5, x25]
 8e0:	add	x25, x25, #0x1
 8e4:	cmp	x25, x23
 8e8:	b.ne	8d8 <inflate_fast+0x8d8>  // b.any
 8ec:	str	w27, [sp, #128]
 8f0:	b	4cc <inflate_fast+0x4cc>
 8f4:	ldr	w25, [sp, #128]
 8f8:	mov	x23, #0x0                   	// #0
 8fc:	ldrb	w27, [x10, x23]
 900:	cmp	x23, x25
 904:	strb	w27, [x5, x23]
 908:	add	x23, x23, #0x1
 90c:	b.ne	8fc <inflate_fast+0x8fc>  // b.any
 910:	b	6dc <inflate_fast+0x6dc>
 914:	add	x10, x10, #0x11
 918:	sub	w1, w1, w15
 91c:	add	x5, x5, x10
 920:	cmp	x18, x5
 924:	ldr	x5, [sp, #120]
 928:	ccmp	x5, x23, #0x0, cc  // cc = lo, ul, last
 92c:	mov	x5, #0x0                   	// #0
 930:	ccmp	w30, #0xe, #0x0, ls  // ls = plast
 934:	b.ls	a54 <inflate_fast+0xa54>  // b.plast
 938:	ldr	q0, [x18, x5]
 93c:	ldr	x10, [sp, #112]
 940:	str	q0, [x23, x5]
 944:	add	x5, x5, #0x10
 948:	cmp	x5, x10
 94c:	b.ne	938 <inflate_fast+0x938>  // b.any
 950:	cmp	w15, w21
 954:	add	x5, x23, x20
 958:	b.eq	a40 <inflate_fast+0xa40>  // b.none
 95c:	ldrb	w10, [x24]
 960:	strb	w10, [x23, x20]
 964:	cbz	w28, a40 <inflate_fast+0xa40>
 968:	ldrb	w10, [x24, #1]
 96c:	cmp	w28, #0x1
 970:	strb	w10, [x5, #1]
 974:	b.eq	a40 <inflate_fast+0xa40>  // b.none
 978:	ldrb	w10, [x24, #2]
 97c:	cmp	w28, #0x2
 980:	strb	w10, [x5, #2]
 984:	b.eq	a40 <inflate_fast+0xa40>  // b.none
 988:	ldrb	w10, [x24, #3]
 98c:	cmp	w28, #0x3
 990:	strb	w10, [x5, #3]
 994:	b.eq	a40 <inflate_fast+0xa40>  // b.none
 998:	ldrb	w10, [x24, #4]
 99c:	cmp	w28, #0x4
 9a0:	strb	w10, [x5, #4]
 9a4:	b.eq	a40 <inflate_fast+0xa40>  // b.none
 9a8:	ldrb	w10, [x24, #5]
 9ac:	cmp	w28, #0x5
 9b0:	strb	w10, [x5, #5]
 9b4:	b.eq	a40 <inflate_fast+0xa40>  // b.none
 9b8:	ldrb	w10, [x24, #6]
 9bc:	cmp	w28, #0x6
 9c0:	strb	w10, [x5, #6]
 9c4:	b.eq	a40 <inflate_fast+0xa40>  // b.none
 9c8:	ldrb	w10, [x24, #7]
 9cc:	cmp	w28, #0x7
 9d0:	strb	w10, [x5, #7]
 9d4:	b.eq	a40 <inflate_fast+0xa40>  // b.none
 9d8:	ldrb	w10, [x24, #8]
 9dc:	cmp	w28, #0x8
 9e0:	strb	w10, [x5, #8]
 9e4:	b.eq	a40 <inflate_fast+0xa40>  // b.none
 9e8:	ldrb	w10, [x24, #9]
 9ec:	cmp	w28, #0x9
 9f0:	strb	w10, [x5, #9]
 9f4:	b.eq	a40 <inflate_fast+0xa40>  // b.none
 9f8:	ldrb	w10, [x24, #10]
 9fc:	cmp	w28, #0xa
 a00:	strb	w10, [x5, #10]
 a04:	b.eq	a40 <inflate_fast+0xa40>  // b.none
 a08:	ldrb	w10, [x24, #11]
 a0c:	cmp	w28, #0xb
 a10:	strb	w10, [x5, #11]
 a14:	b.eq	a40 <inflate_fast+0xa40>  // b.none
 a18:	ldrb	w10, [x24, #12]
 a1c:	cmp	w28, #0xc
 a20:	strb	w10, [x5, #12]
 a24:	b.eq	a40 <inflate_fast+0xa40>  // b.none
 a28:	ldrb	w10, [x24, #13]
 a2c:	cmp	w28, #0xd
 a30:	strb	w10, [x5, #13]
 a34:	b.eq	a40 <inflate_fast+0xa40>  // b.none
 a38:	ldrb	w10, [x24, #14]
 a3c:	strb	w10, [x5, #14]
 a40:	ldr	x5, [sp, #104]
 a44:	add	x5, x5, #0x1
 a48:	add	x5, x23, x5
 a4c:	sub	x10, x5, w14, uxtw
 a50:	b	2a0 <inflate_fast+0x2a0>
 a54:	ldrb	w25, [x18, x5]
 a58:	mov	x10, x5
 a5c:	strb	w25, [x23, x5]
 a60:	add	x5, x5, #0x1
 a64:	ldr	x25, [sp, #104]
 a68:	cmp	x10, x25
 a6c:	b.ne	a54 <inflate_fast+0xa54>  // b.any
 a70:	b	a40 <inflate_fast+0xa40>

inflate.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflateResetKeep>:
       0:	mov	x1, x0
       4:	cbz	x0, 48 <inflateResetKeep+0x48>
       8:	ldr	x0, [x0, #64]
       c:	cbz	x0, 48 <inflateResetKeep+0x48>
      10:	ldr	x0, [x1, #72]
      14:	cbz	x0, 48 <inflateResetKeep+0x48>
      18:	ldr	x2, [x1, #56]
      1c:	cbz	x2, 48 <inflateResetKeep+0x48>
      20:	ldr	x3, [x2]
      24:	mov	w0, #0xfffffffe            	// #-2
      28:	cmp	x1, x3
      2c:	b.ne	44 <inflateResetKeep+0x44>  // b.any
      30:	ldr	w3, [x2, #8]
      34:	mov	w4, #0xffffc0cc            	// #-16180
      38:	add	w3, w3, w4
      3c:	cmp	w3, #0x1f
      40:	b.ls	50 <inflateResetKeep+0x50>  // b.plast
      44:	ret
      48:	mov	w0, #0xfffffffe            	// #-2
      4c:	ret
      50:	ldr	w0, [x2, #16]
      54:	str	xzr, [x2, #40]
      58:	str	xzr, [x1, #16]
      5c:	stp	xzr, xzr, [x1, #40]
      60:	cbz	w0, 6c <inflateResetKeep+0x6c>
      64:	and	x0, x0, #0x1
      68:	str	x0, [x1, #96]
      6c:	add	x1, x2, #0x558
      70:	mov	x5, #0x3f34                	// #16180
      74:	mov	w4, #0x8000                	// #32768
      78:	mov	x3, #0xffffffff00000001    	// #-4294967295
      7c:	dup	v0.2d, x1
      80:	mov	w0, #0x0                   	// #0
      84:	str	x5, [x2, #8]
      88:	str	wzr, [x2, #20]
      8c:	str	w4, [x2, #28]
      90:	str	xzr, [x2, #48]
      94:	str	xzr, [x2, #80]
      98:	str	wzr, [x2, #88]
      9c:	stur	q0, [x2, #104]
      a0:	str	x1, [x2, #144]
      a4:	str	x3, [x2, #7144]
      a8:	ret
      ac:	nop

00000000000000b0 <inflateReset>:
      b0:	mov	x1, x0
      b4:	cbz	x0, f8 <inflateReset+0x48>
      b8:	ldr	x0, [x0, #64]
      bc:	cbz	x0, f8 <inflateReset+0x48>
      c0:	ldr	x0, [x1, #72]
      c4:	cbz	x0, f8 <inflateReset+0x48>
      c8:	ldr	x2, [x1, #56]
      cc:	cbz	x2, f8 <inflateReset+0x48>
      d0:	ldr	x3, [x2]
      d4:	mov	w0, #0xfffffffe            	// #-2
      d8:	cmp	x1, x3
      dc:	b.ne	f4 <inflateReset+0x44>  // b.any
      e0:	ldr	w3, [x2, #8]
      e4:	mov	w4, #0xffffc0cc            	// #-16180
      e8:	add	w3, w3, w4
      ec:	cmp	w3, #0x1f
      f0:	b.ls	100 <inflateReset+0x50>  // b.plast
      f4:	ret
      f8:	mov	w0, #0xfffffffe            	// #-2
      fc:	ret
     100:	ldr	w0, [x2, #16]
     104:	str	xzr, [x2, #40]
     108:	stur	xzr, [x2, #60]
     10c:	str	wzr, [x2, #68]
     110:	str	xzr, [x1, #16]
     114:	stp	xzr, xzr, [x1, #40]
     118:	cbz	w0, 124 <inflateReset+0x74>
     11c:	and	x0, x0, #0x1
     120:	str	x0, [x1, #96]
     124:	add	x1, x2, #0x558
     128:	mov	x5, #0x3f34                	// #16180
     12c:	mov	w4, #0x8000                	// #32768
     130:	mov	x3, #0xffffffff00000001    	// #-4294967295
     134:	dup	v0.2d, x1
     138:	mov	w0, #0x0                   	// #0
     13c:	str	x5, [x2, #8]
     140:	str	wzr, [x2, #20]
     144:	str	w4, [x2, #28]
     148:	str	xzr, [x2, #48]
     14c:	str	xzr, [x2, #80]
     150:	str	wzr, [x2, #88]
     154:	stur	q0, [x2, #104]
     158:	str	x1, [x2, #144]
     15c:	str	x3, [x2, #7144]
     160:	ret
     164:	nop

0000000000000168 <inflateReset2>:
     168:	cbz	x0, 2d0 <inflateReset2+0x168>
     16c:	stp	x29, x30, [sp, #-48]!
     170:	mov	x29, sp
     174:	stp	x19, x20, [sp, #16]
     178:	mov	x19, x0
     17c:	ldr	x0, [x0, #64]
     180:	cbz	x0, 1bc <inflateReset2+0x54>
     184:	ldr	x2, [x19, #72]
     188:	cbz	x2, 1bc <inflateReset2+0x54>
     18c:	stp	x21, x22, [sp, #32]
     190:	ldr	x21, [x19, #56]
     194:	cbz	x21, 1b8 <inflateReset2+0x50>
     198:	ldr	x0, [x21]
     19c:	cmp	x19, x0
     1a0:	b.ne	1b8 <inflateReset2+0x50>  // b.any
     1a4:	ldr	w0, [x21, #8]
     1a8:	mov	w3, #0xffffc0cc            	// #-16180
     1ac:	add	w0, w0, w3
     1b0:	cmp	w0, #0x1f
     1b4:	b.ls	1cc <inflateReset2+0x64>  // b.plast
     1b8:	ldp	x21, x22, [sp, #32]
     1bc:	mov	w0, #0xfffffffe            	// #-2
     1c0:	ldp	x19, x20, [sp, #16]
     1c4:	ldp	x29, x30, [sp], #48
     1c8:	ret
     1cc:	tbnz	w1, #31, 2d8 <inflateReset2+0x170>
     1d0:	cmp	w1, #0x30
     1d4:	asr	w22, w1, #4
     1d8:	and	w0, w1, #0xf
     1dc:	add	w22, w22, #0x5
     1e0:	csel	w20, w0, w1, lt  // lt = tstop
     1e4:	cmp	w20, #0x0
     1e8:	sub	w0, w20, #0x8
     1ec:	ccmp	w0, #0x7, #0x0, ne  // ne = any
     1f0:	b.hi	1b8 <inflateReset2+0x50>  // b.pmore
     1f4:	ldr	x1, [x21, #72]
     1f8:	cbz	x1, 2c4 <inflateReset2+0x15c>
     1fc:	ldr	w0, [x21, #56]
     200:	cmp	w20, w0
     204:	b.eq	2c4 <inflateReset2+0x15c>  // b.none
     208:	ldr	x0, [x19, #80]
     20c:	blr	x2
     210:	ldr	x0, [x19, #64]
     214:	str	w22, [x21, #16]
     218:	str	w20, [x21, #56]
     21c:	str	xzr, [x21, #72]
     220:	cbz	x0, 1b8 <inflateReset2+0x50>
     224:	ldr	x2, [x19, #72]
     228:	cbz	x2, 1b8 <inflateReset2+0x50>
     22c:	ldr	x1, [x19, #56]
     230:	cbz	x1, 1b8 <inflateReset2+0x50>
     234:	ldr	x0, [x1]
     238:	cmp	x19, x0
     23c:	b.ne	1b8 <inflateReset2+0x50>  // b.any
     240:	ldr	w0, [x1, #8]
     244:	mov	w2, #0xffffc0cc            	// #-16180
     248:	add	w0, w0, w2
     24c:	cmp	w0, #0x1f
     250:	b.hi	1b8 <inflateReset2+0x50>  // b.pmore
     254:	ldr	w0, [x1, #16]
     258:	str	xzr, [x1, #40]
     25c:	stur	xzr, [x1, #60]
     260:	str	wzr, [x1, #68]
     264:	str	xzr, [x19, #16]
     268:	stp	xzr, xzr, [x19, #40]
     26c:	cbz	w0, 278 <inflateReset2+0x110>
     270:	and	x0, x0, #0x1
     274:	str	x0, [x19, #96]
     278:	add	x2, x1, #0x558
     27c:	mov	x5, #0x3f34                	// #16180
     280:	mov	w4, #0x8000                	// #32768
     284:	mov	x3, #0xffffffff00000001    	// #-4294967295
     288:	dup	v0.2d, x2
     28c:	str	x5, [x1, #8]
     290:	str	wzr, [x1, #20]
     294:	mov	w0, #0x0                   	// #0
     298:	str	w4, [x1, #28]
     29c:	str	xzr, [x1, #48]
     2a0:	str	xzr, [x1, #80]
     2a4:	str	wzr, [x1, #88]
     2a8:	str	x2, [x1, #144]
     2ac:	str	x3, [x1, #7144]
     2b0:	stur	q0, [x1, #104]
     2b4:	ldp	x19, x20, [sp, #16]
     2b8:	ldp	x21, x22, [sp, #32]
     2bc:	ldp	x29, x30, [sp], #48
     2c0:	ret
     2c4:	str	w22, [x21, #16]
     2c8:	str	w20, [x21, #56]
     2cc:	b	228 <inflateReset2+0xc0>
     2d0:	mov	w0, #0xfffffffe            	// #-2
     2d4:	ret
     2d8:	neg	w20, w1
     2dc:	mov	w22, #0x0                   	// #0
     2e0:	b	1e4 <inflateReset2+0x7c>
     2e4:	nop

00000000000002e8 <inflateInit2_>:
     2e8:	stp	x29, x30, [sp, #-48]!
     2ec:	mov	x29, sp
     2f0:	str	x21, [sp, #32]
     2f4:	cbz	x2, 3ec <inflateInit2_+0x104>
     2f8:	stp	x19, x20, [sp, #16]
     2fc:	mov	w21, w1
     300:	mov	x19, x0
     304:	ldrb	w1, [x2]
     308:	mov	w0, #0x70                  	// #112
     30c:	cmp	w1, #0x31
     310:	ccmp	w3, w0, #0x0, eq  // eq = none
     314:	b.ne	3d4 <inflateInit2_+0xec>  // b.any
     318:	cbz	x19, 3f4 <inflateInit2_+0x10c>
     31c:	ldr	x3, [x19, #64]
     320:	str	xzr, [x19, #48]
     324:	cbz	x3, 3b8 <inflateInit2_+0xd0>
     328:	ldr	x0, [x19, #80]
     32c:	ldr	x1, [x19, #72]
     330:	cbz	x1, 3a8 <inflateInit2_+0xc0>
     334:	mov	w2, #0x1bf8                	// #7160
     338:	mov	w1, #0x1                   	// #1
     33c:	blr	x3
     340:	mov	x20, x0
     344:	cbz	x0, 3e0 <inflateInit2_+0xf8>
     348:	str	x20, [x19, #56]
     34c:	mov	w0, #0x3f34                	// #16180
     350:	str	x19, [x20]
     354:	mov	w1, w21
     358:	str	w0, [x20, #8]
     35c:	mov	x0, x19
     360:	str	xzr, [x20, #72]
     364:	bl	168 <inflateReset2>
     368:	mov	w21, w0
     36c:	cbnz	w0, 384 <inflateInit2_+0x9c>
     370:	ldp	x19, x20, [sp, #16]
     374:	mov	w0, w21
     378:	ldr	x21, [sp, #32]
     37c:	ldp	x29, x30, [sp], #48
     380:	ret
     384:	ldp	x2, x0, [x19, #72]
     388:	mov	x1, x20
     38c:	blr	x2
     390:	str	xzr, [x19, #56]
     394:	mov	w0, w21
     398:	ldp	x19, x20, [sp, #16]
     39c:	ldr	x21, [sp, #32]
     3a0:	ldp	x29, x30, [sp], #48
     3a4:	ret
     3a8:	adrp	x1, 0 <zcfree>
     3ac:	add	x1, x1, #0x0
     3b0:	str	x1, [x19, #72]
     3b4:	b	334 <inflateInit2_+0x4c>
     3b8:	adrp	x1, 0 <zcalloc>
     3bc:	add	x1, x1, #0x0
     3c0:	mov	x3, x1
     3c4:	mov	x0, #0x0                   	// #0
     3c8:	str	x1, [x19, #64]
     3cc:	str	xzr, [x19, #80]
     3d0:	b	32c <inflateInit2_+0x44>
     3d4:	mov	w21, #0xfffffffa            	// #-6
     3d8:	ldp	x19, x20, [sp, #16]
     3dc:	b	374 <inflateInit2_+0x8c>
     3e0:	mov	w21, #0xfffffffc            	// #-4
     3e4:	ldp	x19, x20, [sp, #16]
     3e8:	b	374 <inflateInit2_+0x8c>
     3ec:	mov	w21, #0xfffffffa            	// #-6
     3f0:	b	374 <inflateInit2_+0x8c>
     3f4:	mov	w21, #0xfffffffe            	// #-2
     3f8:	ldp	x19, x20, [sp, #16]
     3fc:	b	374 <inflateInit2_+0x8c>

0000000000000400 <inflateInit_>:
     400:	stp	x29, x30, [sp, #-32]!
     404:	mov	x29, sp
     408:	stp	x19, x20, [sp, #16]
     40c:	cbz	x1, 504 <inflateInit_+0x104>
     410:	ldrb	w1, [x1]
     414:	mov	x19, x0
     418:	mov	w0, #0x70                  	// #112
     41c:	cmp	w1, #0x31
     420:	ccmp	w2, w0, #0x0, eq  // eq = none
     424:	b.ne	504 <inflateInit_+0x104>  // b.any
     428:	cbz	x19, 514 <inflateInit_+0x114>
     42c:	ldr	x3, [x19, #64]
     430:	str	xzr, [x19, #48]
     434:	cbz	x3, 4a8 <inflateInit_+0xa8>
     438:	ldr	x1, [x19, #72]
     43c:	ldr	x0, [x19, #80]
     440:	cbz	x1, 4c8 <inflateInit_+0xc8>
     444:	mov	w2, #0x1bf8                	// #7160
     448:	mov	w1, #0x1                   	// #1
     44c:	blr	x3
     450:	mov	x6, x0
     454:	cbz	x0, 50c <inflateInit_+0x10c>
     458:	ldp	x0, x2, [x19, #64]
     45c:	str	x6, [x19, #56]
     460:	mov	w1, #0x3f34                	// #16180
     464:	str	x19, [x6]
     468:	str	w1, [x6, #8]
     46c:	str	xzr, [x6, #72]
     470:	cbz	x0, 4d8 <inflateInit_+0xd8>
     474:	cbz	x2, 4d8 <inflateInit_+0xd8>
     478:	mov	w0, #0x5                   	// #5
     47c:	mov	w1, #0xf                   	// #15
     480:	str	w0, [x6, #16]
     484:	mov	x0, x19
     488:	str	w1, [x6, #56]
     48c:	bl	b0 <inflateReset>
     490:	mov	w20, w0
     494:	cbnz	w0, 4fc <inflateInit_+0xfc>
     498:	mov	w0, w20
     49c:	ldp	x19, x20, [sp, #16]
     4a0:	ldp	x29, x30, [sp], #32
     4a4:	ret
     4a8:	adrp	x1, 0 <zcalloc>
     4ac:	add	x1, x1, #0x0
     4b0:	mov	x3, x1
     4b4:	str	x1, [x19, #64]
     4b8:	ldr	x1, [x19, #72]
     4bc:	str	xzr, [x19, #80]
     4c0:	mov	x0, #0x0                   	// #0
     4c4:	cbnz	x1, 444 <inflateInit_+0x44>
     4c8:	adrp	x1, 0 <zcfree>
     4cc:	add	x1, x1, #0x0
     4d0:	str	x1, [x19, #72]
     4d4:	b	444 <inflateInit_+0x44>
     4d8:	mov	w20, #0xfffffffe            	// #-2
     4dc:	ldr	x0, [x19, #80]
     4e0:	mov	x1, x6
     4e4:	blr	x2
     4e8:	str	xzr, [x19, #56]
     4ec:	mov	w0, w20
     4f0:	ldp	x19, x20, [sp, #16]
     4f4:	ldp	x29, x30, [sp], #32
     4f8:	ret
     4fc:	ldr	x2, [x19, #72]
     500:	b	4dc <inflateInit_+0xdc>
     504:	mov	w20, #0xfffffffa            	// #-6
     508:	b	498 <inflateInit_+0x98>
     50c:	mov	w20, #0xfffffffc            	// #-4
     510:	b	498 <inflateInit_+0x98>
     514:	mov	w20, #0xfffffffe            	// #-2
     518:	b	498 <inflateInit_+0x98>
     51c:	nop

0000000000000520 <inflatePrime>:
     520:	mov	x3, x0
     524:	cbz	x0, 568 <inflatePrime+0x48>
     528:	ldr	x0, [x0, #64]
     52c:	cbz	x0, 568 <inflatePrime+0x48>
     530:	ldr	x0, [x3, #72]
     534:	cbz	x0, 568 <inflatePrime+0x48>
     538:	ldr	x4, [x3, #56]
     53c:	cbz	x4, 568 <inflatePrime+0x48>
     540:	ldr	x5, [x4]
     544:	mov	w0, #0xfffffffe            	// #-2
     548:	cmp	x3, x5
     54c:	b.ne	564 <inflatePrime+0x44>  // b.any
     550:	ldr	w3, [x4, #8]
     554:	mov	w5, #0xffffc0cc            	// #-16180
     558:	add	w3, w3, w5
     55c:	cmp	w3, #0x1f
     560:	b.ls	570 <inflatePrime+0x50>  // b.plast
     564:	ret
     568:	mov	w0, #0xfffffffe            	// #-2
     56c:	ret
     570:	tbnz	w1, #31, 5b8 <inflatePrime+0x98>
     574:	cmp	w1, #0x10
     578:	b.gt	564 <inflatePrime+0x44>
     57c:	ldr	w5, [x4, #88]
     580:	add	w6, w1, w5
     584:	cmp	w6, #0x20
     588:	b.hi	564 <inflatePrime+0x44>  // b.pmore
     58c:	mov	x3, #0x1                   	// #1
     590:	mov	w0, #0x0                   	// #0
     594:	lsl	x1, x3, x1
     598:	sub	w1, w1, #0x1
     59c:	ldr	x3, [x4, #80]
     5a0:	and	w1, w1, w2
     5a4:	str	w6, [x4, #88]
     5a8:	lsl	w1, w1, w5
     5ac:	add	x1, x3, x1
     5b0:	str	x1, [x4, #80]
     5b4:	ret
     5b8:	mov	w0, #0x0                   	// #0
     5bc:	str	xzr, [x4, #80]
     5c0:	str	wzr, [x4, #88]
     5c4:	ret

00000000000005c8 <inflate>:
     5c8:	stp	x29, x30, [sp, #-176]!
     5cc:	mov	x29, sp
     5d0:	stp	x27, x28, [sp, #80]
     5d4:	cbz	x0, ee8 <inflate+0x920>
     5d8:	stp	x21, x22, [sp, #32]
     5dc:	mov	x22, x0
     5e0:	ldr	x0, [x0, #64]
     5e4:	cbz	x0, 61c <inflate+0x54>
     5e8:	ldr	x0, [x22, #72]
     5ec:	cbz	x0, 61c <inflate+0x54>
     5f0:	ldr	x21, [x22, #56]
     5f4:	cbz	x21, 61c <inflate+0x54>
     5f8:	ldr	x0, [x21]
     5fc:	mov	w28, #0xfffffffe            	// #-2
     600:	cmp	x22, x0
     604:	b.eq	634 <inflate+0x6c>  // b.none
     608:	ldp	x21, x22, [sp, #32]
     60c:	mov	w0, w28
     610:	ldp	x27, x28, [sp, #80]
     614:	ldp	x29, x30, [sp], #176
     618:	ret
     61c:	mov	w28, #0xfffffffe            	// #-2
     620:	mov	w0, w28
     624:	ldp	x21, x22, [sp, #32]
     628:	ldp	x27, x28, [sp, #80]
     62c:	ldp	x29, x30, [sp], #176
     630:	ret
     634:	stp	x25, x26, [sp, #64]
     638:	mov	w25, w1
     63c:	ldr	w1, [x21, #8]
     640:	stp	x19, x20, [sp, #16]
     644:	mov	w2, #0xffffc0cc            	// #-16180
     648:	add	w0, w1, w2
     64c:	stp	x23, x24, [sp, #48]
     650:	cmp	w0, #0x1f
     654:	b.ls	678 <inflate+0xb0>  // b.plast
     658:	mov	w0, w28
     65c:	ldp	x19, x20, [sp, #16]
     660:	ldp	x21, x22, [sp, #32]
     664:	ldp	x23, x24, [sp, #48]
     668:	ldp	x25, x26, [sp, #64]
     66c:	ldp	x27, x28, [sp, #80]
     670:	ldp	x29, x30, [sp], #176
     674:	ret
     678:	ldr	x7, [x22, #24]
     67c:	cbz	x7, 658 <inflate+0x90>
     680:	ldr	x24, [x22]
     684:	ldr	w27, [x22, #8]
     688:	cbz	x24, efc <inflate+0x934>
     68c:	mov	w2, #0x3f3f                	// #16191
     690:	cmp	w1, w2
     694:	b.ne	6a4 <inflate+0xdc>  // b.any
     698:	mov	w1, #0x3f40                	// #16192
     69c:	mov	w0, #0xc                   	// #12
     6a0:	str	w1, [x21, #8]
     6a4:	ldr	w9, [x22, #32]
     6a8:	sub	w1, w25, #0x5
     6ac:	ldr	w19, [x21, #88]
     6b0:	adrp	x10, 0 <inflateResetKeep>
     6b4:	ldr	x23, [x21, #80]
     6b8:	add	x26, x10, #0x0
     6bc:	mov	w20, w27
     6c0:	mov	w8, w9
     6c4:	str	w1, [sp, #104]
     6c8:	add	x1, x26, #0x880
     6cc:	str	x1, [sp, #112]
     6d0:	cmp	w0, #0x1e
     6d4:	b.ls	6f0 <inflate+0x128>  // b.plast
     6d8:	mov	w28, #0xfffffffe            	// #-2
     6dc:	ldp	x19, x20, [sp, #16]
     6e0:	ldp	x21, x22, [sp, #32]
     6e4:	ldp	x23, x24, [sp, #48]
     6e8:	ldp	x25, x26, [sp, #64]
     6ec:	b	60c <inflate+0x44>
     6f0:	adrp	x1, 0 <inflateResetKeep>
     6f4:	add	x1, x1, #0x0
     6f8:	ldrh	w0, [x1, w0, uxtw #1]
     6fc:	adr	x1, 708 <inflate+0x140>
     700:	add	x0, x1, w0, sxth #2
     704:	br	x0
     708:	ldr	x1, [x21, #48]
     70c:	cbz	x1, 718 <inflate+0x150>
     710:	ubfx	w2, w23, #8, #1
     714:	str	w2, [x1]
     718:	tbz	w0, #9, 724 <inflate+0x15c>
     71c:	ldr	w0, [x21, #16]
     720:	tbnz	w0, #2, 239c <inflate+0x1dd4>
     724:	mov	x24, x28
     728:	mov	w0, #0x3f36                	// #16182
     72c:	mov	x23, #0x0                   	// #0
     730:	mov	w19, #0x0                   	// #0
     734:	str	w0, [x21, #8]
     738:	cbz	w20, d88 <inflate+0x7c0>
     73c:	ldrb	w0, [x24], #1
     740:	sub	w20, w20, #0x1
     744:	lsl	x0, x0, x19
     748:	add	w19, w19, #0x8
     74c:	add	x23, x23, x0
     750:	cmp	w19, #0x1f
     754:	b.ls	738 <inflate+0x170>  // b.plast
     758:	ldr	x0, [x21, #48]
     75c:	cbz	x0, 764 <inflate+0x19c>
     760:	str	x23, [x0, #8]
     764:	ldr	w0, [x21, #24]
     768:	tbz	w0, #9, 774 <inflate+0x1ac>
     76c:	ldr	w0, [x21, #16]
     770:	tbnz	w0, #2, 1fa8 <inflate+0x19e0>
     774:	mov	w0, #0x3f37                	// #16183
     778:	mov	x23, #0x0                   	// #0
     77c:	mov	w19, #0x0                   	// #0
     780:	str	w0, [x21, #8]
     784:	nop
     788:	cbz	w20, d88 <inflate+0x7c0>
     78c:	ldrb	w0, [x24], #1
     790:	sub	w20, w20, #0x1
     794:	lsl	x0, x0, x19
     798:	add	w19, w19, #0x8
     79c:	add	x23, x23, x0
     7a0:	cmp	w19, #0xf
     7a4:	b.ls	788 <inflate+0x1c0>  // b.plast
     7a8:	ldr	x0, [x21, #48]
     7ac:	cbz	x0, 7bc <inflate+0x1f4>
     7b0:	and	w2, w23, #0xff
     7b4:	lsr	x1, x23, #8
     7b8:	stp	w2, w1, [x0, #16]
     7bc:	ldr	w2, [x21, #24]
     7c0:	mov	w1, w2
     7c4:	tbz	w2, #9, 7d0 <inflate+0x208>
     7c8:	ldr	w0, [x21, #16]
     7cc:	tbnz	w0, #2, 1e50 <inflate+0x1888>
     7d0:	mov	w0, #0x3f38                	// #16184
     7d4:	str	w0, [x21, #8]
     7d8:	mov	w19, #0x0                   	// #0
     7dc:	mov	x23, #0x0                   	// #0
     7e0:	tbnz	w2, #10, 10a8 <inflate+0xae0>
     7e4:	ldr	x2, [x21, #48]
     7e8:	mov	w0, #0x0                   	// #0
     7ec:	cbz	x2, 7f4 <inflate+0x22c>
     7f0:	str	xzr, [x2, #24]
     7f4:	mov	w2, #0x3f39                	// #16185
     7f8:	str	w2, [x21, #8]
     7fc:	cbz	w0, 894 <inflate+0x2cc>
     800:	ldr	w3, [x21, #92]
     804:	cmp	w20, w3
     808:	csel	w28, w20, w3, ls  // ls = plast
     80c:	cbz	w28, 88c <inflate+0x2c4>
     810:	ldr	x2, [x21, #48]
     814:	mov	w5, w28
     818:	cbz	x2, 86c <inflate+0x2a4>
     81c:	ldr	x0, [x2, #24]
     820:	cbz	x0, 86c <inflate+0x2a4>
     824:	ldp	w11, w2, [x2, #32]
     828:	mov	x1, x24
     82c:	stp	x5, x7, [sp, #120]
     830:	sub	w12, w11, w3
     834:	add	w12, w28, w12
     838:	str	w8, [sp, #136]
     83c:	cmp	w12, w2
     840:	add	w2, w2, w3
     844:	sub	w3, w11, w3
     848:	sub	w2, w2, w11
     84c:	csel	x2, x2, x5, hi  // hi = pmore
     850:	add	x0, x0, x3
     854:	str	w9, [sp, #144]
     858:	bl	0 <memcpy>
     85c:	ldp	x5, x7, [sp, #120]
     860:	ldr	w1, [x21, #24]
     864:	ldr	w8, [sp, #136]
     868:	ldr	w9, [sp, #144]
     86c:	tbz	w1, #9, 878 <inflate+0x2b0>
     870:	ldr	w0, [x21, #16]
     874:	tbnz	w0, #2, 1f54 <inflate+0x198c>
     878:	ldr	w3, [x21, #92]
     87c:	sub	w20, w20, w28
     880:	add	x24, x24, x5
     884:	sub	w3, w3, w28
     888:	str	w3, [x21, #92]
     88c:	cbnz	w3, d88 <inflate+0x7c0>
     890:	ldr	w1, [x21, #24]
     894:	mov	w0, #0x3f3a                	// #16186
     898:	str	w0, [x21, #8]
     89c:	str	wzr, [x21, #92]
     8a0:	tbnz	w1, #11, 1a80 <inflate+0x14b8>
     8a4:	ldr	x0, [x21, #48]
     8a8:	cbz	x0, 8b0 <inflate+0x2e8>
     8ac:	str	xzr, [x0, #40]
     8b0:	mov	w0, #0x3f3b                	// #16187
     8b4:	str	w0, [x21, #8]
     8b8:	str	wzr, [x21, #92]
     8bc:	tbnz	w1, #12, 19d4 <inflate+0x140c>
     8c0:	ldr	x0, [x21, #48]
     8c4:	cbz	x0, 8cc <inflate+0x304>
     8c8:	str	xzr, [x0, #56]
     8cc:	mov	w0, #0x3f3c                	// #16188
     8d0:	str	w0, [x21, #8]
     8d4:	tbnz	w1, #9, 195c <inflate+0x1394>
     8d8:	ldr	x0, [x21, #48]
     8dc:	cbz	x0, 8ec <inflate+0x324>
     8e0:	ubfx	x1, x1, #9, #1
     8e4:	mov	w2, #0x1                   	// #1
     8e8:	stp	w1, w2, [x0, #68]
     8ec:	mov	x1, #0x0                   	// #0
     8f0:	mov	w2, #0x0                   	// #0
     8f4:	mov	x0, #0x0                   	// #0
     8f8:	str	x7, [sp, #120]
     8fc:	str	w8, [sp, #128]
     900:	str	w9, [sp, #136]
     904:	bl	0 <crc32>
     908:	str	x0, [x21, #32]
     90c:	mov	w1, #0x3f3f                	// #16191
     910:	str	x0, [x22, #96]
     914:	ldr	w8, [sp, #128]
     918:	ldr	w9, [sp, #136]
     91c:	str	w1, [x21, #8]
     920:	ldr	x7, [sp, #120]
     924:	b	d78 <inflate+0x7b0>
     928:	ldr	w0, [x21, #16]
     92c:	cbnz	w0, 1bfc <inflate+0x1634>
     930:	mov	w0, #0x3f40                	// #16192
     934:	str	w0, [x21, #8]
     938:	ldr	w28, [x21, #12]
     93c:	cbz	w28, 1750 <inflate+0x1188>
     940:	and	w0, w19, #0x7
     944:	and	w19, w19, #0xfffffff8
     948:	mov	w1, #0x3f4e                	// #16206
     94c:	str	w1, [x21, #8]
     950:	lsr	x23, x23, x0
     954:	ldr	w0, [x21, #16]
     958:	cbz	w0, 1108 <inflate+0xb40>
     95c:	cmp	w19, #0x1f
     960:	b.hi	2248 <inflate+0x1c80>  // b.pmore
     964:	cbz	w20, d88 <inflate+0x7c0>
     968:	mov	x26, x24
     96c:	add	w2, w19, #0x8
     970:	cmp	w2, #0x1f
     974:	sub	w3, w20, #0x1
     978:	ldrb	w1, [x26], #1
     97c:	lsl	x1, x1, x19
     980:	add	x23, x23, x1
     984:	b.hi	2280 <inflate+0x1cb8>  // b.pmore
     988:	cbz	w3, 2200 <inflate+0x1c38>
     98c:	ldrb	w1, [x24, #1]
     990:	add	w3, w19, #0x10
     994:	cmp	w3, #0x1f
     998:	sub	w4, w20, #0x2
     99c:	add	x26, x24, #0x2
     9a0:	lsl	x1, x1, x2
     9a4:	add	x23, x23, x1
     9a8:	b.hi	22f8 <inflate+0x1d30>  // b.pmore
     9ac:	cbz	w4, 2310 <inflate+0x1d48>
     9b0:	ldrb	w1, [x24, #2]
     9b4:	add	w2, w19, #0x18
     9b8:	cmp	w2, #0x1f
     9bc:	sub	w4, w20, #0x3
     9c0:	add	x26, x24, #0x3
     9c4:	lsl	x1, x1, x3
     9c8:	add	x23, x23, x1
     9cc:	b.hi	2304 <inflate+0x1d3c>  // b.pmore
     9d0:	cbz	w4, 2200 <inflate+0x1c38>
     9d4:	ldrb	w1, [x24, #3]
     9d8:	sub	w20, w20, #0x4
     9dc:	add	w19, w19, #0x20
     9e0:	add	x26, x24, #0x4
     9e4:	lsl	x1, x1, x2
     9e8:	add	x23, x23, x1
     9ec:	ldr	x2, [x22, #40]
     9f0:	sub	w3, w9, w8
     9f4:	ldr	x1, [x21, #40]
     9f8:	add	x2, x2, x3
     9fc:	str	x2, [x22, #40]
     a00:	subs	w2, w9, w8
     a04:	add	x1, x1, x3
     a08:	str	x1, [x21, #40]
     a0c:	and	w1, w0, #0x4
     a10:	ccmp	w1, #0x0, #0x4, ne  // ne = any
     a14:	b.ne	1918 <inflate+0x1350>  // b.any
     a18:	cbz	w1, 10f8 <inflate+0xb30>
     a1c:	ldr	w2, [x21, #24]
     a20:	mov	x1, x23
     a24:	cbnz	w2, a4c <inflate+0x484>
     a28:	lsr	x1, x23, #8
     a2c:	lsl	x2, x23, #8
     a30:	and	x3, x1, #0xff00
     a34:	and	x2, x2, #0xff0000
     a38:	lsr	w1, w23, #24
     a3c:	lsl	w4, w23, #24
     a40:	orr	x1, x1, x3
     a44:	add	x2, x2, x4
     a48:	add	x1, x1, x2
     a4c:	ldr	x2, [x21, #32]
     a50:	cmp	x2, x1
     a54:	b.eq	10f8 <inflate+0xb30>  // b.none
     a58:	adrp	x0, 0 <inflateResetKeep>
     a5c:	add	x0, x0, #0x0
     a60:	str	x0, [x22, #48]
     a64:	mov	x24, x26
     a68:	mov	w0, #0x3f51                	// #16209
     a6c:	mov	w9, w8
     a70:	str	w0, [x21, #8]
     a74:	b	b94 <inflate+0x5cc>
     a78:	sub	w19, w19, w0
     a7c:	lsr	x23, x23, x0
     a80:	str	w11, [x21, #92]
     a84:	str	w0, [x21, #7148]
     a88:	mov	w0, #0x3f4d                	// #16205
     a8c:	str	w0, [x21, #8]
     a90:	cbz	w8, 20d8 <inflate+0x1b10>
     a94:	ldr	w1, [x21, #92]
     a98:	sub	w8, w8, #0x1
     a9c:	strb	w1, [x7], #1
     aa0:	mov	w0, #0x3f48                	// #16200
     aa4:	str	w0, [x21, #8]
     aa8:	cmp	w8, #0x101
     aac:	ccmp	w20, #0x5, #0x0, hi  // hi = pmore
     ab0:	b.ls	ffc <inflate+0xa34>  // b.plast
     ab4:	str	x24, [x22]
     ab8:	mov	w1, w9
     abc:	str	w20, [x22, #8]
     ac0:	mov	x0, x22
     ac4:	str	x7, [x22, #24]
     ac8:	str	w8, [x22, #32]
     acc:	str	x23, [x21, #80]
     ad0:	str	w19, [x21, #88]
     ad4:	str	w9, [sp, #120]
     ad8:	bl	0 <inflate_fast>
     adc:	ldr	w19, [x21, #88]
     ae0:	ldr	w1, [x21, #8]
     ae4:	mov	w0, #0x3f3f                	// #16191
     ae8:	ldr	w20, [x22, #8]
     aec:	ldr	w8, [x22, #32]
     af0:	cmp	w1, w0
     af4:	ldr	w9, [sp, #120]
     af8:	ldr	x24, [x22]
     afc:	ldr	x7, [x22, #24]
     b00:	ldr	x23, [x21, #80]
     b04:	b.eq	1be4 <inflate+0x161c>  // b.none
     b08:	mov	w0, #0xffffc0cc            	// #-16180
     b0c:	add	w0, w1, w0
     b10:	b	6d0 <inflate+0x108>
     b14:	mov	w0, #0x3f47                	// #16199
     b18:	str	w0, [x21, #8]
     b1c:	cmp	w25, #0x6
     b20:	b.eq	1f14 <inflate+0x194c>  // b.none
     b24:	nop
     b28:	mov	w0, #0x3f48                	// #16200
     b2c:	str	w0, [x21, #8]
     b30:	b	aa8 <inflate+0x4e0>
     b34:	and	w3, w3, #0xf
     b38:	mov	w0, #0x3f4b                	// #16203
     b3c:	str	w0, [x21, #8]
     b40:	stp	w5, w3, [x21, #96]
     b44:	cbnz	w3, 1668 <inflate+0x10a0>
     b48:	mov	w0, #0x3f4c                	// #16204
     b4c:	str	w0, [x21, #8]
     b50:	cbz	w8, 20d8 <inflate+0x1b10>
     b54:	ldr	w1, [x21, #96]
     b58:	sub	w0, w9, w8
     b5c:	cmp	w1, w0
     b60:	b.ls	1b0c <inflate+0x1544>  // b.plast
     b64:	ldr	w2, [x21, #64]
     b68:	add	w1, w1, w8
     b6c:	sub	w0, w1, w9
     b70:	cmp	w2, w0
     b74:	b.cs	11d4 <inflate+0xc0c>  // b.hs, b.nlast
     b78:	ldr	w2, [x21, #7144]
     b7c:	cbz	w2, 11d4 <inflate+0xc0c>
     b80:	adrp	x0, 0 <inflateResetKeep>
     b84:	add	x0, x0, #0x0
     b88:	str	x0, [x22, #48]
     b8c:	mov	w0, #0x3f51                	// #16209
     b90:	str	w0, [x21, #8]
     b94:	sub	w26, w9, w8
     b98:	mov	w28, #0xfffffffd            	// #-3
     b9c:	b	d90 <inflate+0x7c8>
     ba0:	and	w2, w2, #0xf
     ba4:	mov	w0, #0x3f49                	// #16201
     ba8:	str	w0, [x21, #8]
     bac:	str	w2, [x21, #100]
     bb0:	cbnz	w2, 1610 <inflate+0x1048>
     bb4:	ldr	w0, [x21, #92]
     bb8:	mov	w1, #0x3f4a                	// #16202
     bbc:	str	w1, [x21, #8]
     bc0:	str	w0, [x21, #7152]
     bc4:	ldr	w0, [x21, #124]
     bc8:	mov	w4, #0xffffffff            	// #-1
     bcc:	mov	w11, w23
     bd0:	ldr	x2, [x21, #112]
     bd4:	lsl	w4, w4, w0
     bd8:	bic	w0, w23, w4
     bdc:	mvn	w4, w4
     be0:	b	c04 <inflate+0x63c>
     be4:	cbz	w20, d88 <inflate+0x7c0>
     be8:	ldrb	w0, [x24], #1
     bec:	sub	w20, w20, #0x1
     bf0:	lsl	x0, x0, x19
     bf4:	add	x23, x23, x0
     bf8:	and	w0, w4, w23
     bfc:	add	w19, w19, #0x8
     c00:	mov	w11, w23
     c04:	lsl	x0, x0, #2
     c08:	add	x1, x2, x0
     c0c:	ldrb	w3, [x2, x0]
     c10:	ldrb	w0, [x1, #1]
     c14:	ldrh	w5, [x1, #2]
     c18:	cmp	w0, w19
     c1c:	mov	w1, w0
     c20:	b.hi	be4 <inflate+0x61c>  // b.pmore
     c24:	tst	w3, #0xf0
     c28:	mov	w4, w0
     c2c:	b.eq	1d10 <inflate+0x1748>  // b.none
     c30:	ldr	w2, [x21, #7148]
     c34:	add	w0, w4, w2
     c38:	str	w0, [x21, #7148]
     c3c:	sub	w19, w19, w1
     c40:	lsr	x23, x23, x4
     c44:	tbz	w3, #6, b34 <inflate+0x56c>
     c48:	adrp	x0, 0 <inflateResetKeep>
     c4c:	add	x0, x0, #0x0
     c50:	str	x0, [x22, #48]
     c54:	mov	w0, #0x3f51                	// #16209
     c58:	str	w0, [x21, #8]
     c5c:	b	b94 <inflate+0x5cc>
     c60:	mov	w0, #0x3f3d                	// #16189
     c64:	mov	x23, #0x0                   	// #0
     c68:	mov	w19, #0x0                   	// #0
     c6c:	str	w0, [x21, #8]
     c70:	cbz	w20, d88 <inflate+0x7c0>
     c74:	mov	x1, x24
     c78:	add	w2, w19, #0x8
     c7c:	cmp	w2, #0x1f
     c80:	sub	w3, w20, #0x1
     c84:	ldrb	w0, [x1], #1
     c88:	lsl	x0, x0, x19
     c8c:	add	x23, x23, x0
     c90:	b.hi	2194 <inflate+0x1bcc>  // b.pmore
     c94:	cbz	w3, 1e04 <inflate+0x183c>
     c98:	ldrb	w0, [x24, #1]
     c9c:	add	w3, w19, #0x10
     ca0:	cmp	w3, #0x1f
     ca4:	sub	w4, w20, #0x2
     ca8:	add	x1, x24, #0x2
     cac:	lsl	x0, x0, x2
     cb0:	add	x23, x23, x0
     cb4:	b.hi	21a8 <inflate+0x1be0>  // b.pmore
     cb8:	cbz	w4, 1ff8 <inflate+0x1a30>
     cbc:	ldrb	w0, [x24, #2]
     cc0:	add	w19, w19, #0x18
     cc4:	cmp	w19, #0x1f
     cc8:	sub	w2, w20, #0x3
     ccc:	add	x1, x24, #0x3
     cd0:	lsl	x0, x0, x3
     cd4:	add	x23, x23, x0
     cd8:	b.hi	220c <inflate+0x1c44>  // b.pmore
     cdc:	cbz	w2, 1e08 <inflate+0x1840>
     ce0:	ldrb	w0, [x24, #3]
     ce4:	sub	w20, w20, #0x4
     ce8:	add	x1, x24, #0x4
     cec:	lsl	x19, x0, x19
     cf0:	add	x23, x23, x19
     cf4:	lsr	x0, x23, #8
     cf8:	lsl	x2, x23, #8
     cfc:	and	x3, x0, #0xff00
     d00:	and	x2, x2, #0xff0000
     d04:	lsr	w0, w23, #24
     d08:	lsl	w23, w23, #24
     d0c:	add	x2, x2, x23
     d10:	orr	x0, x0, x3
     d14:	add	x0, x0, x2
     d18:	str	x0, [x21, #32]
     d1c:	mov	x24, x1
     d20:	str	x0, [x22, #96]
     d24:	mov	w19, #0x0                   	// #0
     d28:	mov	w0, #0x3f3e                	// #16190
     d2c:	mov	x23, #0x0                   	// #0
     d30:	str	w0, [x21, #8]
     d34:	ldr	w0, [x21, #20]
     d38:	cbz	w0, 2250 <inflate+0x1c88>
     d3c:	mov	x1, #0x0                   	// #0
     d40:	mov	w2, #0x0                   	// #0
     d44:	mov	x0, #0x0                   	// #0
     d48:	str	x7, [sp, #120]
     d4c:	str	w8, [sp, #128]
     d50:	str	w9, [sp, #136]
     d54:	bl	0 <adler32>
     d58:	ldr	w8, [sp, #128]
     d5c:	mov	w1, #0x3f3f                	// #16191
     d60:	ldr	w9, [sp, #136]
     d64:	str	x0, [x21, #32]
     d68:	ldr	x7, [sp, #120]
     d6c:	str	x0, [x22, #96]
     d70:	str	w1, [x21, #8]
     d74:	nop
     d78:	ldr	w0, [sp, #104]
     d7c:	cmp	w0, #0x1
     d80:	b.hi	938 <inflate+0x370>  // b.pmore
     d84:	nop
     d88:	sub	w26, w9, w8
     d8c:	mov	w28, #0x0                   	// #0
     d90:	ldr	w0, [x21, #60]
     d94:	str	x24, [x22]
     d98:	str	w20, [x22, #8]
     d9c:	str	x7, [x22, #24]
     da0:	str	w8, [x22, #32]
     da4:	str	x23, [x21, #80]
     da8:	str	w19, [x21, #88]
     dac:	cbnz	w0, dd8 <inflate+0x810>
     db0:	cmp	w9, w8
     db4:	b.eq	e30 <inflate+0x868>  // b.none
     db8:	ldr	w0, [x21, #8]
     dbc:	mov	w1, #0x3f50                	// #16208
     dc0:	cmp	w0, w1
     dc4:	b.hi	e30 <inflate+0x868>  // b.pmore
     dc8:	cmp	w25, #0x4
     dcc:	mov	w1, #0x3f4d                	// #16205
     dd0:	ccmp	w0, w1, #0x0, eq  // eq = none
     dd4:	b.hi	e30 <inflate+0x868>  // b.pmore
     dd8:	ldr	x19, [x22, #56]
     ddc:	ldr	x0, [x19, #72]
     de0:	cbz	x0, fa4 <inflate+0x9dc>
     de4:	ldr	w2, [x19, #60]
     de8:	cbnz	w2, e00 <inflate+0x838>
     dec:	ldr	w1, [x19, #56]
     df0:	mov	w2, #0x1                   	// #1
     df4:	str	xzr, [x19, #64]
     df8:	lsl	w2, w2, w1
     dfc:	str	w2, [x19, #60]
     e00:	cmp	w26, w2
     e04:	b.cc	f34 <inflate+0x96c>  // b.lo, b.ul, b.last
     e08:	mov	w2, w2
     e0c:	str	w9, [sp, #104]
     e10:	sub	x1, x7, x2
     e14:	bl	0 <memcpy>
     e18:	ldr	w9, [sp, #104]
     e1c:	ldr	w20, [x22, #32]
     e20:	ldr	w0, [x19, #60]
     e24:	sub	w26, w9, w20
     e28:	ldr	w20, [x22, #8]
     e2c:	stp	w0, wzr, [x19, #64]
     e30:	ldr	x4, [x22, #16]
     e34:	sub	w5, w27, w20
     e38:	ldr	x2, [x22, #40]
     e3c:	mov	w1, w26
     e40:	ldr	x0, [x21, #40]
     e44:	add	x4, x4, x5
     e48:	ldr	w5, [x21, #16]
     e4c:	add	x2, x2, x1
     e50:	str	x4, [x22, #16]
     e54:	add	x0, x0, x1
     e58:	str	x2, [x22, #40]
     e5c:	sub	w20, w27, w20
     e60:	str	x0, [x21, #40]
     e64:	tst	x5, #0x4
     e68:	ccmp	w26, #0x0, #0x4, ne  // ne = any
     e6c:	b.ne	f0c <inflate+0x944>  // b.any
     e70:	ldp	w1, w4, [x21, #8]
     e74:	mov	w2, #0x3f3f                	// #16191
     e78:	ldr	w0, [x21, #88]
     e7c:	cmp	w4, #0x0
     e80:	add	w4, w0, #0x40
     e84:	csel	w0, w4, w0, ne  // ne = any
     e88:	cmp	w1, w2
     e8c:	b.eq	f04 <inflate+0x93c>  // b.none
     e90:	mov	w2, #0x3f47                	// #16199
     e94:	cmp	w1, w2
     e98:	mov	w4, #0x3f42                	// #16194
     e9c:	add	w2, w0, #0x100
     ea0:	ccmp	w1, w4, #0x4, ne  // ne = any
     ea4:	csel	w0, w2, w0, eq  // eq = none
     ea8:	orr	w20, w20, w26
     eac:	str	w0, [x22, #88]
     eb0:	cmp	w20, #0x0
     eb4:	ccmp	w25, #0x4, #0x4, ne  // ne = any
     eb8:	b.ne	658 <inflate+0x90>  // b.any
     ebc:	cmp	w28, #0x0
     ec0:	mov	w0, #0xfffffffb            	// #-5
     ec4:	csel	w28, w28, w0, ne  // ne = any
     ec8:	mov	w0, w28
     ecc:	ldp	x19, x20, [sp, #16]
     ed0:	ldp	x21, x22, [sp, #32]
     ed4:	ldp	x23, x24, [sp, #48]
     ed8:	ldp	x25, x26, [sp, #64]
     edc:	ldp	x27, x28, [sp, #80]
     ee0:	ldp	x29, x30, [sp], #176
     ee4:	ret
     ee8:	mov	w28, #0xfffffffe            	// #-2
     eec:	mov	w0, w28
     ef0:	ldp	x27, x28, [sp, #80]
     ef4:	ldp	x29, x30, [sp], #176
     ef8:	ret
     efc:	cbz	w27, 68c <inflate+0xc4>
     f00:	b	658 <inflate+0x90>
     f04:	add	w0, w0, #0x80
     f08:	b	ea8 <inflate+0x8e0>
     f0c:	ldr	w4, [x21, #24]
     f10:	ldr	x2, [x22, #24]
     f14:	ldr	x0, [x21, #32]
     f18:	sub	x1, x2, x1
     f1c:	mov	w2, w26
     f20:	cbz	w4, ff4 <inflate+0xa2c>
     f24:	bl	0 <crc32>
     f28:	str	x0, [x21, #32]
     f2c:	str	x0, [x22, #96]
     f30:	b	e70 <inflate+0x8a8>
     f34:	ldr	w4, [x19, #68]
     f38:	sub	x1, x7, w26, uxtw
     f3c:	str	x7, [sp, #104]
     f40:	sub	w2, w2, w4
     f44:	str	w9, [sp, #112]
     f48:	cmp	w2, w26
     f4c:	add	x0, x0, w4, uxtw
     f50:	csel	w23, w2, w26, ls  // ls = plast
     f54:	csel	w2, w2, w26, ls  // ls = plast
     f58:	bl	0 <memcpy>
     f5c:	ldr	w9, [sp, #112]
     f60:	subs	w24, w26, w23
     f64:	ldr	x7, [sp, #104]
     f68:	b.ne	1a50 <inflate+0x1488>  // b.any
     f6c:	ldp	w1, w2, [x19, #60]
     f70:	ldr	w0, [x19, #68]
     f74:	ldr	w20, [x22, #32]
     f78:	add	w0, w23, w0
     f7c:	cmp	w0, w1
     f80:	sub	w26, w9, w20
     f84:	csel	w0, w0, wzr, ne  // ne = any
     f88:	ldr	w20, [x22, #8]
     f8c:	str	w0, [x19, #68]
     f90:	cmp	w1, w2
     f94:	b.ls	e30 <inflate+0x868>  // b.plast
     f98:	add	w23, w23, w2
     f9c:	str	w23, [x19, #64]
     fa0:	b	e30 <inflate+0x868>
     fa4:	ldr	x4, [x22, #64]
     fa8:	mov	w2, #0x1                   	// #1
     fac:	ldr	x0, [x22, #80]
     fb0:	str	x7, [sp, #104]
     fb4:	ldr	w1, [x19, #56]
     fb8:	str	w9, [sp, #112]
     fbc:	lsl	w1, w2, w1
     fc0:	blr	x4
     fc4:	str	x0, [x19, #72]
     fc8:	ldr	w9, [sp, #112]
     fcc:	ldr	x7, [sp, #104]
     fd0:	cbnz	x0, de4 <inflate+0x81c>
     fd4:	mov	w0, #0x3f52                	// #16210
     fd8:	mov	w28, #0xfffffffc            	// #-4
     fdc:	ldp	x19, x20, [sp, #16]
     fe0:	ldp	x23, x24, [sp, #48]
     fe4:	ldp	x25, x26, [sp, #64]
     fe8:	str	w0, [x21, #8]
     fec:	ldp	x21, x22, [sp, #32]
     ff0:	b	60c <inflate+0x44>
     ff4:	bl	0 <adler32>
     ff8:	b	f28 <inflate+0x960>
     ffc:	ldr	w0, [x21, #120]
    1000:	mov	w3, #0xffffffff            	// #-1
    1004:	ldr	x4, [x21, #104]
    1008:	mov	w5, w23
    100c:	lsl	w3, w3, w0
    1010:	bic	w0, w23, w3
    1014:	mvn	w3, w3
    1018:	lsl	x0, x0, #2
    101c:	add	x1, x4, x0
    1020:	ldrb	w2, [x4, x0]
    1024:	ldrh	w11, [x1, #2]
    1028:	ldrb	w0, [x1, #1]
    102c:	str	wzr, [x21, #7148]
    1030:	cmp	w19, w0
    1034:	b.cs	1074 <inflate+0xaac>  // b.hs, b.nlast
    1038:	cbz	w20, d88 <inflate+0x7c0>
    103c:	ldrb	w0, [x24], #1
    1040:	sub	w20, w20, #0x1
    1044:	lsl	x0, x0, x19
    1048:	add	x23, x23, x0
    104c:	and	w0, w3, w23
    1050:	add	w19, w19, #0x8
    1054:	mov	w5, w23
    1058:	lsl	x0, x0, #2
    105c:	add	x1, x4, x0
    1060:	ldrb	w2, [x4, x0]
    1064:	ldrb	w0, [x1, #1]
    1068:	ldrh	w11, [x1, #2]
    106c:	cmp	w0, w19
    1070:	b.hi	1038 <inflate+0xa70>  // b.pmore
    1074:	cbz	w2, a78 <inflate+0x4b0>
    1078:	tst	w2, #0xf0
    107c:	b.eq	20e4 <inflate+0x1b1c>  // b.none
    1080:	sub	w19, w19, w0
    1084:	lsr	x23, x23, x0
    1088:	str	w11, [x21, #92]
    108c:	str	w0, [x21, #7148]
    1090:	tbz	w2, #5, 1f8c <inflate+0x19c4>
    1094:	mov	w0, #0xffffffff            	// #-1
    1098:	mov	w1, #0x3f3f                	// #16191
    109c:	str	w1, [x21, #8]
    10a0:	str	w0, [x21, #7148]
    10a4:	b	d78 <inflate+0x7b0>
    10a8:	cbz	w20, d88 <inflate+0x7c0>
    10ac:	ldrb	w0, [x24], #1
    10b0:	sub	w20, w20, #0x1
    10b4:	lsl	x0, x0, x19
    10b8:	add	w19, w19, #0x8
    10bc:	add	x23, x23, x0
    10c0:	cmp	w19, #0xf
    10c4:	b.ls	10a8 <inflate+0xae0>  // b.plast
    10c8:	ldr	x0, [x21, #48]
    10cc:	str	w23, [x21, #92]
    10d0:	cbz	x0, 10d8 <inflate+0xb10>
    10d4:	str	w23, [x0, #32]
    10d8:	tbz	w2, #9, 10e4 <inflate+0xb1c>
    10dc:	ldr	w0, [x21, #16]
    10e0:	tbnz	w0, #2, 21bc <inflate+0x1bf4>
    10e4:	mov	w1, w2
    10e8:	and	w0, w2, #0x400
    10ec:	mov	w19, #0x0                   	// #0
    10f0:	mov	x23, #0x0                   	// #0
    10f4:	b	7f4 <inflate+0x22c>
    10f8:	mov	x24, x26
    10fc:	mov	w9, w8
    1100:	mov	w19, #0x0                   	// #0
    1104:	mov	x23, #0x0                   	// #0
    1108:	mov	w1, #0x3f4f                	// #16207
    110c:	str	w1, [x21, #8]
    1110:	cbz	w0, 2018 <inflate+0x1a50>
    1114:	ldr	w0, [x21, #24]
    1118:	cbz	w0, 2018 <inflate+0x1a50>
    111c:	cmp	w19, #0x1f
    1120:	b.hi	2004 <inflate+0x1a3c>  // b.pmore
    1124:	cbz	w20, d88 <inflate+0x7c0>
    1128:	mov	x0, x24
    112c:	add	w2, w19, #0x8
    1130:	cmp	w2, #0x1f
    1134:	sub	w3, w20, #0x1
    1138:	ldrb	w1, [x0], #1
    113c:	lsl	x1, x1, x19
    1140:	add	x23, x23, x1
    1144:	b.hi	2034 <inflate+0x1a6c>  // b.pmore
    1148:	cbz	w3, 1e8c <inflate+0x18c4>
    114c:	ldrb	w1, [x24, #1]
    1150:	add	w3, w19, #0x10
    1154:	cmp	w3, #0x1f
    1158:	sub	w4, w20, #0x2
    115c:	add	x0, x24, #0x2
    1160:	lsl	x1, x1, x2
    1164:	add	x23, x23, x1
    1168:	b.hi	2064 <inflate+0x1a9c>  // b.pmore
    116c:	cbz	w4, 20cc <inflate+0x1b04>
    1170:	ldrb	w1, [x24, #2]
    1174:	add	w2, w19, #0x18
    1178:	cmp	w2, #0x1f
    117c:	sub	w4, w20, #0x3
    1180:	add	x0, x24, #0x3
    1184:	lsl	x1, x1, x3
    1188:	add	x23, x23, x1
    118c:	b.hi	2160 <inflate+0x1b98>  // b.pmore
    1190:	cbz	w4, 1e8c <inflate+0x18c4>
    1194:	ldrb	w1, [x24, #3]
    1198:	sub	w20, w20, #0x4
    119c:	add	w19, w19, #0x20
    11a0:	add	x0, x24, #0x4
    11a4:	lsl	x1, x1, x2
    11a8:	add	x23, x23, x1
    11ac:	ldr	w1, [x21, #40]
    11b0:	cmp	x1, x23
    11b4:	b.eq	200c <inflate+0x1a44>  // b.none
    11b8:	adrp	x1, 0 <inflateResetKeep>
    11bc:	add	x1, x1, #0x0
    11c0:	str	x1, [x22, #48]
    11c4:	mov	x24, x0
    11c8:	mov	w0, #0x3f51                	// #16209
    11cc:	str	w0, [x21, #8]
    11d0:	b	b94 <inflate+0x5cc>
    11d4:	ldr	w2, [x21, #68]
    11d8:	sub	w1, w9, w1
    11dc:	ldr	x3, [x21, #72]
    11e0:	cmp	w2, w0
    11e4:	b.cs	1bf0 <inflate+0x1628>  // b.hs, b.nlast
    11e8:	ldr	w4, [x21, #60]
    11ec:	sub	w0, w0, w2
    11f0:	add	w2, w2, w4
    11f4:	add	w1, w2, w1
    11f8:	add	x1, x3, x1
    11fc:	ldr	w2, [x21, #92]
    1200:	cmp	w2, w0
    1204:	csel	w4, w2, w0, ls  // ls = plast
    1208:	cmp	w4, w8
    120c:	add	x0, x7, #0xf
    1210:	csel	w4, w4, w8, ls  // ls = plast
    1214:	sub	x0, x0, x1
    1218:	sub	w2, w2, w4
    121c:	str	w2, [x21, #92]
    1220:	sub	w5, w4, #0x1
    1224:	cmp	x0, #0x1e
    1228:	sub	w8, w8, w4
    122c:	ccmp	w5, #0xe, #0x0, hi  // hi = pmore
    1230:	b.ls	1cf0 <inflate+0x1728>  // b.plast
    1234:	sub	w2, w4, #0x10
    1238:	mov	x0, #0x0                   	// #0
    123c:	mov	w3, #0x0                   	// #0
    1240:	lsr	w2, w2, #4
    1244:	add	w2, w2, #0x1
    1248:	ldr	q0, [x1, x0]
    124c:	add	w3, w3, #0x1
    1250:	cmp	w3, w2
    1254:	str	q0, [x7, x0]
    1258:	add	x0, x0, #0x10
    125c:	b.cc	1248 <inflate+0xc80>  // b.lo, b.ul, b.last
    1260:	lsl	w0, w2, #4
    1264:	cmp	w4, w2, lsl #4
    1268:	add	x3, x7, x0
    126c:	lsl	w2, w2, #4
    1270:	add	x0, x1, x0
    1274:	b.eq	1aec <inflate+0x1524>  // b.none
    1278:	ldrb	w4, [x1, w2, uxtw]
    127c:	subs	w1, w5, w2
    1280:	strb	w4, [x7, w2, uxtw]
    1284:	b.eq	1aec <inflate+0x1524>  // b.none
    1288:	ldrb	w2, [x0, #1]
    128c:	cmp	w1, #0x1
    1290:	strb	w2, [x3, #1]
    1294:	b.eq	1aec <inflate+0x1524>  // b.none
    1298:	ldrb	w2, [x0, #2]
    129c:	cmp	w1, #0x2
    12a0:	strb	w2, [x3, #2]
    12a4:	b.eq	1aec <inflate+0x1524>  // b.none
    12a8:	ldrb	w2, [x0, #3]
    12ac:	cmp	w1, #0x3
    12b0:	strb	w2, [x3, #3]
    12b4:	b.eq	1aec <inflate+0x1524>  // b.none
    12b8:	ldrb	w2, [x0, #4]
    12bc:	cmp	w1, #0x4
    12c0:	strb	w2, [x3, #4]
    12c4:	b.eq	1aec <inflate+0x1524>  // b.none
    12c8:	ldrb	w2, [x0, #5]
    12cc:	cmp	w1, #0x5
    12d0:	strb	w2, [x3, #5]
    12d4:	b.eq	1aec <inflate+0x1524>  // b.none
    12d8:	ldrb	w2, [x0, #6]
    12dc:	cmp	w1, #0x6
    12e0:	strb	w2, [x3, #6]
    12e4:	b.eq	1aec <inflate+0x1524>  // b.none
    12e8:	ldrb	w2, [x0, #7]
    12ec:	cmp	w1, #0x7
    12f0:	strb	w2, [x3, #7]
    12f4:	b.eq	1aec <inflate+0x1524>  // b.none
    12f8:	ldrb	w2, [x0, #8]
    12fc:	cmp	w1, #0x8
    1300:	strb	w2, [x3, #8]
    1304:	b.eq	1aec <inflate+0x1524>  // b.none
    1308:	ldrb	w2, [x0, #9]
    130c:	cmp	w1, #0x9
    1310:	strb	w2, [x3, #9]
    1314:	b.eq	1aec <inflate+0x1524>  // b.none
    1318:	ldrb	w2, [x0, #10]
    131c:	cmp	w1, #0xa
    1320:	strb	w2, [x3, #10]
    1324:	b.eq	1aec <inflate+0x1524>  // b.none
    1328:	ldrb	w2, [x0, #11]
    132c:	cmp	w1, #0xb
    1330:	strb	w2, [x3, #11]
    1334:	b.eq	1aec <inflate+0x1524>  // b.none
    1338:	ldrb	w2, [x0, #12]
    133c:	cmp	w1, #0xc
    1340:	strb	w2, [x3, #12]
    1344:	b.eq	1aec <inflate+0x1524>  // b.none
    1348:	ldrb	w2, [x0, #13]
    134c:	cmp	w1, #0xd
    1350:	strb	w2, [x3, #13]
    1354:	b.eq	1aec <inflate+0x1524>  // b.none
    1358:	ldrb	w1, [x0, #14]
    135c:	mov	w0, w5
    1360:	strb	w1, [x3, #14]
    1364:	nop
    1368:	ldr	w1, [x21, #92]
    136c:	add	x0, x0, #0x1
    1370:	add	x7, x7, x0
    1374:	cbz	w1, b28 <inflate+0x560>
    1378:	ldr	w1, [x21, #8]
    137c:	b	b08 <inflate+0x540>
    1380:	ldr	w0, [x21, #92]
    1384:	cbz	w0, 1a44 <inflate+0x147c>
    1388:	cmp	w20, w0
    138c:	csel	w0, w20, w0, ls  // ls = plast
    1390:	cmp	w0, w8
    1394:	csel	w28, w0, w8, ls  // ls = plast
    1398:	cbz	w28, 1f14 <inflate+0x194c>
    139c:	mov	w2, w28
    13a0:	mov	x1, x24
    13a4:	mov	x0, x7
    13a8:	str	x2, [sp, #120]
    13ac:	str	w8, [sp, #128]
    13b0:	sub	w20, w20, w28
    13b4:	str	w9, [sp, #136]
    13b8:	bl	0 <memcpy>
    13bc:	ldr	x2, [sp, #120]
    13c0:	mov	x7, x0
    13c4:	ldr	w8, [sp, #128]
    13c8:	ldr	w0, [x21, #92]
    13cc:	add	x24, x24, x2
    13d0:	ldr	w1, [x21, #8]
    13d4:	sub	w8, w8, w28
    13d8:	sub	w0, w0, w28
    13dc:	ldr	w9, [sp, #136]
    13e0:	add	x7, x7, x2
    13e4:	str	w0, [x21, #92]
    13e8:	b	b08 <inflate+0x540>
    13ec:	ldr	w0, [x21, #16]
    13f0:	b	1110 <inflate+0xb48>
    13f4:	sub	w26, w9, w8
    13f8:	mov	w28, #0x1                   	// #1
    13fc:	b	d90 <inflate+0x7c8>
    1400:	ldr	w2, [x21, #128]
    1404:	ldr	w1, [x21, #140]
    1408:	cmp	w2, w1
    140c:	b.ls	145c <inflate+0xe94>  // b.plast
    1410:	cmp	w19, #0x2
    1414:	b.hi	1430 <inflate+0xe68>  // b.pmore
    1418:	cbz	w20, d88 <inflate+0x7c0>
    141c:	ldrb	w0, [x24], #1
    1420:	sub	w20, w20, #0x1
    1424:	lsl	x0, x0, x19
    1428:	add	w19, w19, #0x8
    142c:	add	x23, x23, x0
    1430:	ldr	x0, [sp, #112]
    1434:	and	w3, w23, #0x7
    1438:	sub	w19, w19, #0x3
    143c:	lsr	x23, x23, #3
    1440:	ldrh	w0, [x0, w1, uxtw #1]
    1444:	add	w1, w1, #0x1
    1448:	str	w1, [x21, #140]
    144c:	cmp	w1, w2
    1450:	add	x0, x21, x0, lsl #1
    1454:	strh	w3, [x0, #152]
    1458:	b.cc	1410 <inflate+0xe48>  // b.lo, b.ul, b.last
    145c:	cmp	w1, #0x12
    1460:	b.hi	149c <inflate+0xed4>  // b.pmore
    1464:	ldr	x3, [sp, #112]
    1468:	mov	w2, #0x12                  	// #18
    146c:	sub	w2, w2, w1
    1470:	add	x0, x26, #0x882
    1474:	add	x2, x2, w1, uxtw
    1478:	add	x1, x3, w1, uxtw #1
    147c:	add	x2, x0, x2, lsl #1
    1480:	ldrh	w0, [x1], #2
    1484:	cmp	x2, x1
    1488:	add	x0, x21, x0, lsl #1
    148c:	strh	wzr, [x0, #152]
    1490:	b.ne	1480 <inflate+0xeb8>  // b.any
    1494:	mov	w0, #0x13                  	// #19
    1498:	str	w0, [x21, #140]
    149c:	add	x0, x21, #0x558
    14a0:	mov	w1, #0x7                   	// #7
    14a4:	str	x0, [x21, #104]
    14a8:	add	x5, x21, #0x318
    14ac:	str	w1, [x21, #120]
    14b0:	add	x4, x21, #0x78
    14b4:	str	x0, [x21, #144]
    14b8:	add	x3, x21, #0x90
    14bc:	add	x1, x21, #0x98
    14c0:	mov	w2, #0x13                  	// #19
    14c4:	mov	w0, #0x0                   	// #0
    14c8:	str	x7, [sp, #120]
    14cc:	str	w8, [sp, #128]
    14d0:	str	w9, [sp, #136]
    14d4:	bl	0 <inflate_table>
    14d8:	ldr	w8, [sp, #128]
    14dc:	ldr	w9, [sp, #136]
    14e0:	ldr	x7, [sp, #120]
    14e4:	cbz	w0, 2220 <inflate+0x1c58>
    14e8:	adrp	x0, 0 <inflateResetKeep>
    14ec:	add	x0, x0, #0x0
    14f0:	str	x0, [x22, #48]
    14f4:	mov	w0, #0x3f51                	// #16209
    14f8:	str	w0, [x21, #8]
    14fc:	b	b94 <inflate+0x5cc>
    1500:	ldr	w5, [x21, #140]
    1504:	ldp	w2, w11, [x21, #132]
    1508:	add	w11, w2, w11
    150c:	cmp	w11, w5
    1510:	b.ls	1590 <inflate+0xfc8>  // b.plast
    1514:	ldr	w0, [x21, #120]
    1518:	mov	w3, #0xffffffff            	// #-1
    151c:	ldr	x4, [x21, #104]
    1520:	mov	w13, #0xfffffffd            	// #-3
    1524:	lsl	w3, w3, w0
    1528:	mvn	w3, w3
    152c:	mov	w12, #0xfffffff9            	// #-7
    1530:	and	w0, w3, w23
    1534:	b	1554 <inflate+0xf8c>
    1538:	cbz	w20, d88 <inflate+0x7c0>
    153c:	ldrb	w0, [x24], #1
    1540:	sub	w20, w20, #0x1
    1544:	lsl	x0, x0, x19
    1548:	add	x23, x23, x0
    154c:	and	w0, w3, w23
    1550:	add	w19, w19, #0x8
    1554:	add	x0, x4, x0, lsl #2
    1558:	ldrb	w1, [x0, #1]
    155c:	ldrh	w0, [x0, #2]
    1560:	cmp	w1, w19
    1564:	b.hi	1538 <inflate+0xf70>  // b.pmore
    1568:	cmp	w0, #0xf
    156c:	b.hi	1b5c <inflate+0x1594>  // b.pmore
    1570:	add	x14, x21, w5, uxtw #1
    1574:	sub	w19, w19, w1
    1578:	add	w5, w5, #0x1
    157c:	str	w5, [x21, #140]
    1580:	lsr	x23, x23, x1
    1584:	strh	w0, [x14, #152]
    1588:	cmp	w11, w5
    158c:	b.hi	1530 <inflate+0xf68>  // b.pmore
    1590:	ldr	w0, [x21, #8]
    1594:	mov	w11, #0x3f51                	// #16209
    1598:	cmp	w0, w11
    159c:	b.eq	b94 <inflate+0x5cc>  // b.none
    15a0:	ldrh	w0, [x21, #664]
    15a4:	cbnz	w0, 2330 <inflate+0x1d68>
    15a8:	adrp	x0, 0 <inflateResetKeep>
    15ac:	add	x0, x0, #0x0
    15b0:	str	x0, [x22, #48]
    15b4:	str	w11, [x21, #8]
    15b8:	b	b94 <inflate+0x5cc>
    15bc:	ldr	w2, [x21, #24]
    15c0:	mov	w1, w2
    15c4:	tbz	w2, #10, 7e4 <inflate+0x21c>
    15c8:	b	10c0 <inflate+0xaf8>
    15cc:	ldr	w1, [x21, #24]
    15d0:	and	w0, w1, #0x400
    15d4:	b	7fc <inflate+0x234>
    15d8:	ldr	w1, [x21, #24]
    15dc:	b	8a0 <inflate+0x2d8>
    15e0:	ldr	w1, [x21, #24]
    15e4:	b	8bc <inflate+0x2f4>
    15e8:	ldr	w1, [x21, #24]
    15ec:	b	8d4 <inflate+0x30c>
    15f0:	ldr	w2, [x21, #100]
    15f4:	b	bb0 <inflate+0x5e8>
    15f8:	cbz	w20, d88 <inflate+0x7c0>
    15fc:	ldrb	w0, [x24], #1
    1600:	sub	w20, w20, #0x1
    1604:	lsl	x0, x0, x19
    1608:	add	w19, w19, #0x8
    160c:	add	x23, x23, x0
    1610:	cmp	w19, w2
    1614:	b.cc	15f8 <inflate+0x1030>  // b.lo, b.ul, b.last
    1618:	ldr	w3, [x21, #92]
    161c:	mov	w0, #0xffffffff            	// #-1
    1620:	ldr	w1, [x21, #7148]
    1624:	lsl	w0, w0, w2
    1628:	bic	w0, w23, w0
    162c:	sub	w19, w19, w2
    1630:	add	w0, w0, w3
    1634:	lsr	x23, x23, x2
    1638:	add	w2, w1, w2
    163c:	str	w0, [x21, #92]
    1640:	str	w2, [x21, #7148]
    1644:	b	bb8 <inflate+0x5f0>
    1648:	ldr	w3, [x21, #100]
    164c:	b	b44 <inflate+0x57c>
    1650:	cbz	w20, d88 <inflate+0x7c0>
    1654:	ldrb	w0, [x24], #1
    1658:	sub	w20, w20, #0x1
    165c:	lsl	x0, x0, x19
    1660:	add	w19, w19, #0x8
    1664:	add	x23, x23, x0
    1668:	cmp	w19, w3
    166c:	b.cc	1650 <inflate+0x1088>  // b.lo, b.ul, b.last
    1670:	ldr	w2, [x21, #96]
    1674:	mov	w0, #0xffffffff            	// #-1
    1678:	ldr	w1, [x21, #7148]
    167c:	lsl	w0, w0, w3
    1680:	bic	w0, w23, w0
    1684:	sub	w19, w19, w3
    1688:	add	w0, w2, w0
    168c:	lsr	x23, x23, x3
    1690:	add	w3, w1, w3
    1694:	str	w0, [x21, #96]
    1698:	str	w3, [x21, #7148]
    169c:	b	b48 <inflate+0x580>
    16a0:	ldr	w0, [x21, #92]
    16a4:	mov	w1, #0x3f43                	// #16195
    16a8:	str	w1, [x21, #8]
    16ac:	b	1384 <inflate+0xdbc>
    16b0:	cmp	w19, #0x1f
    16b4:	b.ls	c70 <inflate+0x6a8>  // b.plast
    16b8:	mov	x1, x24
    16bc:	b	cf4 <inflate+0x72c>
    16c0:	mov	w28, #0xfffffffc            	// #-4
    16c4:	ldp	x19, x20, [sp, #16]
    16c8:	ldp	x21, x22, [sp, #32]
    16cc:	ldp	x23, x24, [sp, #48]
    16d0:	ldp	x25, x26, [sp, #64]
    16d4:	b	60c <inflate+0x44>
    16d8:	cmp	w19, #0xf
    16dc:	b.hi	1954 <inflate+0x138c>  // b.pmore
    16e0:	cbz	w20, d88 <inflate+0x7c0>
    16e4:	mov	x28, x24
    16e8:	add	w1, w19, #0x8
    16ec:	cmp	w1, #0xf
    16f0:	sub	w2, w20, #0x1
    16f4:	ldrb	w0, [x28], #1
    16f8:	lsl	x0, x0, x19
    16fc:	add	x23, x23, x0
    1700:	b.hi	219c <inflate+0x1bd4>  // b.pmore
    1704:	cbz	w2, 1b44 <inflate+0x157c>
    1708:	ldrb	w0, [x24, #1]
    170c:	sub	w20, w20, #0x2
    1710:	add	w19, w19, #0x10
    1714:	add	x28, x24, #0x2
    1718:	lsl	x0, x0, x1
    171c:	add	x23, x23, x0
    1720:	str	w23, [x21, #24]
    1724:	and	w0, w23, #0xff
    1728:	cmp	w0, #0x8
    172c:	mov	w0, w23
    1730:	b.eq	1dbc <inflate+0x17f4>  // b.none
    1734:	adrp	x0, 0 <inflateResetKeep>
    1738:	add	x0, x0, #0x0
    173c:	str	x0, [x22, #48]
    1740:	mov	x24, x28
    1744:	mov	w0, #0x3f51                	// #16209
    1748:	str	w0, [x21, #8]
    174c:	b	b94 <inflate+0x5cc>
    1750:	cmp	w19, #0x2
    1754:	b.hi	1770 <inflate+0x11a8>  // b.pmore
    1758:	cbz	w20, 1f14 <inflate+0x194c>
    175c:	ldrb	w0, [x24], #1
    1760:	sub	w20, w20, #0x1
    1764:	lsl	x0, x0, x19
    1768:	add	w19, w19, #0x8
    176c:	add	x23, x23, x0
    1770:	and	w0, w23, #0x1
    1774:	str	w0, [x21, #12]
    1778:	ubfx	w0, w23, #1, #2
    177c:	cmp	w0, #0x2
    1780:	b.eq	1870 <inflate+0x12a8>  // b.none
    1784:	cmp	w0, #0x3
    1788:	b.eq	1f1c <inflate+0x1954>  // b.none
    178c:	cmp	w0, #0x1
    1790:	b.eq	1ee8 <inflate+0x1920>  // b.none
    1794:	lsr	x23, x23, #3
    1798:	sub	w19, w19, #0x3
    179c:	mov	w0, #0x3f41                	// #16193
    17a0:	str	w0, [x21, #8]
    17a4:	and	w0, w19, #0x7
    17a8:	and	w19, w19, #0xfffffff8
    17ac:	cmp	w19, #0x1f
    17b0:	lsr	x23, x23, x0
    17b4:	b.hi	216c <inflate+0x1ba4>  // b.pmore
    17b8:	cbz	w20, d88 <inflate+0x7c0>
    17bc:	mov	x1, x24
    17c0:	add	w2, w19, #0x8
    17c4:	cmp	w2, #0x1f
    17c8:	sub	w3, w20, #0x1
    17cc:	ldrb	w0, [x1], #1
    17d0:	lsl	x0, x0, x19
    17d4:	add	x23, x23, x0
    17d8:	b.hi	217c <inflate+0x1bb4>  // b.pmore
    17dc:	cbz	w3, 1e04 <inflate+0x183c>
    17e0:	ldrb	w0, [x24, #1]
    17e4:	add	w3, w19, #0x10
    17e8:	cmp	w3, #0x1f
    17ec:	sub	w4, w20, #0x2
    17f0:	add	x1, x24, #0x2
    17f4:	lsl	x0, x0, x2
    17f8:	add	x23, x23, x0
    17fc:	b.hi	21b0 <inflate+0x1be8>  // b.pmore
    1800:	cbz	w4, 1ff8 <inflate+0x1a30>
    1804:	ldrb	w0, [x24, #2]
    1808:	add	w2, w19, #0x18
    180c:	cmp	w2, #0x1f
    1810:	sub	w4, w20, #0x3
    1814:	add	x1, x24, #0x3
    1818:	lsl	x0, x0, x3
    181c:	add	x23, x23, x0
    1820:	b.hi	2214 <inflate+0x1c4c>  // b.pmore
    1824:	cbz	w4, 1e04 <inflate+0x183c>
    1828:	ldrb	w0, [x24, #3]
    182c:	sub	w20, w20, #0x4
    1830:	add	w19, w19, #0x20
    1834:	add	x1, x24, #0x4
    1838:	lsl	x0, x0, x2
    183c:	add	x23, x23, x0
    1840:	lsr	x2, x23, #16
    1844:	and	x0, x23, #0xffff
    1848:	eor	x2, x2, #0xffff
    184c:	cmp	x2, w23, uxth
    1850:	b.eq	1de0 <inflate+0x1818>  // b.none
    1854:	adrp	x0, 0 <inflateResetKeep>
    1858:	add	x0, x0, #0x0
    185c:	str	x0, [x22, #48]
    1860:	mov	x24, x1
    1864:	mov	w0, #0x3f51                	// #16209
    1868:	str	w0, [x21, #8]
    186c:	b	b94 <inflate+0x5cc>
    1870:	lsr	x23, x23, #3
    1874:	sub	w19, w19, #0x3
    1878:	mov	w0, #0x3f44                	// #16196
    187c:	str	w0, [x21, #8]
    1880:	cmp	w19, #0xd
    1884:	b.hi	2174 <inflate+0x1bac>  // b.pmore
    1888:	cbz	w20, d88 <inflate+0x7c0>
    188c:	mov	x0, x24
    1890:	add	w2, w19, #0x8
    1894:	cmp	w2, #0xd
    1898:	sub	w3, w20, #0x1
    189c:	ldrb	w1, [x0], #1
    18a0:	lsl	x1, x1, x19
    18a4:	add	x23, x23, x1
    18a8:	b.hi	2188 <inflate+0x1bc0>  // b.pmore
    18ac:	cbz	w3, 1b2c <inflate+0x1564>
    18b0:	ldrb	w1, [x24, #1]
    18b4:	sub	w20, w20, #0x2
    18b8:	add	w19, w19, #0x10
    18bc:	add	x0, x24, #0x2
    18c0:	lsl	x1, x1, x2
    18c4:	add	x23, x23, x1
    18c8:	and	w3, w23, #0x1f
    18cc:	ubfx	w1, w23, #5, #5
    18d0:	ubfx	w2, w23, #10, #4
    18d4:	add	w3, w3, #0x101
    18d8:	add	w1, w1, #0x1
    18dc:	add	w2, w2, #0x4
    18e0:	stp	w2, w3, [x21, #128]
    18e4:	cmp	w3, #0x11e
    18e8:	str	w1, [x21, #136]
    18ec:	sub	w19, w19, #0xe
    18f0:	ccmp	w1, #0x1e, #0x2, ls  // ls = plast
    18f4:	lsr	x23, x23, #14
    18f8:	b.ls	204c <inflate+0x1a84>  // b.plast
    18fc:	adrp	x1, 0 <inflateResetKeep>
    1900:	add	x1, x1, #0x0
    1904:	str	x1, [x22, #48]
    1908:	mov	x24, x0
    190c:	mov	w0, #0x3f51                	// #16209
    1910:	str	w0, [x21, #8]
    1914:	b	b94 <inflate+0x5cc>
    1918:	ldr	w4, [x21, #24]
    191c:	sub	x1, x7, x3
    1920:	str	x7, [sp, #104]
    1924:	str	w8, [sp, #112]
    1928:	ldr	x0, [x21, #32]
    192c:	cbz	w4, 2234 <inflate+0x1c6c>
    1930:	bl	0 <crc32>
    1934:	mov	x2, x0
    1938:	ldr	w8, [sp, #112]
    193c:	ldr	x7, [sp, #104]
    1940:	str	x2, [x21, #32]
    1944:	ldr	w0, [x21, #16]
    1948:	str	x2, [x22, #96]
    194c:	and	w1, w0, #0x4
    1950:	b	a18 <inflate+0x450>
    1954:	mov	x28, x24
    1958:	b	1720 <inflate+0x1158>
    195c:	cmp	w19, #0xf
    1960:	b.hi	202c <inflate+0x1a64>  // b.pmore
    1964:	cbz	w20, d88 <inflate+0x7c0>
    1968:	mov	x0, x24
    196c:	add	w3, w19, #0x8
    1970:	cmp	w3, #0xf
    1974:	sub	w4, w20, #0x1
    1978:	ldrb	w2, [x0], #1
    197c:	lsl	x2, x2, x19
    1980:	add	x23, x23, x2
    1984:	b.hi	2040 <inflate+0x1a78>  // b.pmore
    1988:	cbz	w4, 1af4 <inflate+0x152c>
    198c:	ldrb	w2, [x24, #1]
    1990:	sub	w20, w20, #0x2
    1994:	add	w19, w19, #0x10
    1998:	add	x0, x24, #0x2
    199c:	lsl	x2, x2, x3
    19a0:	add	x23, x23, x2
    19a4:	ldr	w2, [x21, #16]
    19a8:	tbz	w2, #2, 1b1c <inflate+0x1554>
    19ac:	ldrh	w2, [x21, #32]
    19b0:	cmp	x2, x23
    19b4:	b.eq	1b1c <inflate+0x1554>  // b.none
    19b8:	adrp	x1, 0 <inflateResetKeep>
    19bc:	add	x1, x1, #0x0
    19c0:	str	x1, [x22, #48]
    19c4:	mov	x24, x0
    19c8:	mov	w0, #0x3f51                	// #16209
    19cc:	str	w0, [x21, #8]
    19d0:	b	b94 <inflate+0x5cc>
    19d4:	cbz	w20, d88 <inflate+0x7c0>
    19d8:	mov	w2, #0x0                   	// #0
    19dc:	nop
    19e0:	ldr	x1, [x21, #48]
    19e4:	ldrb	w28, [x24, w2, uxtw]
    19e8:	add	w2, w2, #0x1
    19ec:	cbz	x1, 1a14 <inflate+0x144c>
    19f0:	ldr	x0, [x1, #56]
    19f4:	cbz	x0, 1a14 <inflate+0x144c>
    19f8:	ldr	w4, [x1, #64]
    19fc:	ldr	w1, [x21, #92]
    1a00:	cmp	w1, w4
    1a04:	b.cs	1a14 <inflate+0x144c>  // b.hs, b.nlast
    1a08:	add	w4, w1, #0x1
    1a0c:	str	w4, [x21, #92]
    1a10:	strb	w28, [x0, w1, uxtw]
    1a14:	cmp	w28, #0x0
    1a18:	ccmp	w20, w2, #0x0, ne  // ne = any
    1a1c:	b.hi	19e0 <inflate+0x1418>  // b.pmore
    1a20:	ldr	w0, [x21, #24]
    1a24:	tbz	w0, #9, 1a30 <inflate+0x1468>
    1a28:	ldr	w0, [x21, #16]
    1a2c:	tbnz	w0, #2, 1d88 <inflate+0x17c0>
    1a30:	add	x24, x24, w2, uxtw
    1a34:	sub	w20, w20, w2
    1a38:	cbnz	w28, d88 <inflate+0x7c0>
    1a3c:	ldr	w1, [x21, #24]
    1a40:	b	8cc <inflate+0x304>
    1a44:	mov	w0, #0x3f3f                	// #16191
    1a48:	str	w0, [x21, #8]
    1a4c:	b	d78 <inflate+0x7b0>
    1a50:	ldr	x0, [x19, #72]
    1a54:	mov	w2, w24
    1a58:	sub	x1, x7, x2
    1a5c:	str	w9, [sp, #104]
    1a60:	bl	0 <memcpy>
    1a64:	ldr	w20, [x22, #32]
    1a68:	ldr	w9, [sp, #104]
    1a6c:	ldr	w0, [x19, #60]
    1a70:	sub	w26, w9, w20
    1a74:	ldr	w20, [x22, #8]
    1a78:	stp	w0, w24, [x19, #64]
    1a7c:	b	e30 <inflate+0x868>
    1a80:	cbz	w20, d88 <inflate+0x7c0>
    1a84:	mov	w2, #0x0                   	// #0
    1a88:	ldr	x1, [x21, #48]
    1a8c:	ldrb	w28, [x24, w2, uxtw]
    1a90:	add	w2, w2, #0x1
    1a94:	cbz	x1, 1abc <inflate+0x14f4>
    1a98:	ldr	x0, [x1, #40]
    1a9c:	cbz	x0, 1abc <inflate+0x14f4>
    1aa0:	ldr	w4, [x1, #48]
    1aa4:	ldr	w1, [x21, #92]
    1aa8:	cmp	w1, w4
    1aac:	b.cs	1abc <inflate+0x14f4>  // b.hs, b.nlast
    1ab0:	add	w4, w1, #0x1
    1ab4:	str	w4, [x21, #92]
    1ab8:	strb	w28, [x0, w1, uxtw]
    1abc:	cmp	w28, #0x0
    1ac0:	ccmp	w20, w2, #0x0, ne  // ne = any
    1ac4:	b.hi	1a88 <inflate+0x14c0>  // b.pmore
    1ac8:	ldr	w0, [x21, #24]
    1acc:	tbz	w0, #9, 1ad8 <inflate+0x1510>
    1ad0:	ldr	w0, [x21, #16]
    1ad4:	tbnz	w0, #2, 1e1c <inflate+0x1854>
    1ad8:	add	x24, x24, w2, uxtw
    1adc:	sub	w20, w20, w2
    1ae0:	cbnz	w28, d88 <inflate+0x7c0>
    1ae4:	ldr	w1, [x21, #24]
    1ae8:	b	8b0 <inflate+0x2e8>
    1aec:	mov	w0, w5
    1af0:	b	1368 <inflate+0xda0>
    1af4:	mov	w19, w3
    1af8:	mov	x24, x0
    1afc:	sub	w26, w9, w8
    1b00:	mov	w20, #0x0                   	// #0
    1b04:	mov	w28, #0x0                   	// #0
    1b08:	b	d90 <inflate+0x7c8>
    1b0c:	ldr	w4, [x21, #92]
    1b10:	sub	x1, x7, w1, uxtw
    1b14:	mov	w2, w4
    1b18:	b	1208 <inflate+0xc40>
    1b1c:	mov	x24, x0
    1b20:	mov	w19, #0x0                   	// #0
    1b24:	mov	x23, #0x0                   	// #0
    1b28:	b	8d8 <inflate+0x310>
    1b2c:	mov	w19, w2
    1b30:	mov	x24, x0
    1b34:	sub	w26, w9, w8
    1b38:	mov	w20, #0x0                   	// #0
    1b3c:	mov	w28, #0x0                   	// #0
    1b40:	b	d90 <inflate+0x7c8>
    1b44:	mov	x24, x28
    1b48:	mov	w19, w1
    1b4c:	sub	w26, w9, w8
    1b50:	mov	w20, #0x0                   	// #0
    1b54:	mov	w28, #0x0                   	// #0
    1b58:	b	d90 <inflate+0x7c8>
    1b5c:	cmp	w0, #0x10
    1b60:	b.eq	2070 <inflate+0x1aa8>  // b.none
    1b64:	cmp	w0, #0x11
    1b68:	b.eq	1e98 <inflate+0x18d0>  // b.none
    1b6c:	add	w14, w1, #0x7
    1b70:	cmp	w19, w14
    1b74:	b.cs	1b98 <inflate+0x15d0>  // b.hs, b.nlast
    1b78:	cbz	w20, d88 <inflate+0x7c0>
    1b7c:	ldrb	w0, [x24], #1
    1b80:	sub	w20, w20, #0x1
    1b84:	lsl	x0, x0, x19
    1b88:	add	w19, w19, #0x8
    1b8c:	add	x23, x23, x0
    1b90:	cmp	w19, w14
    1b94:	b.cc	1b78 <inflate+0x15b0>  // b.lo, b.ul, b.last
    1b98:	lsr	x23, x23, x1
    1b9c:	sub	w1, w12, w1
    1ba0:	and	w0, w23, #0x7f
    1ba4:	add	w19, w19, w1
    1ba8:	lsr	x23, x23, #7
    1bac:	add	w1, w0, #0xb
    1bb0:	mov	w14, #0x0                   	// #0
    1bb4:	add	w5, w1, w5
    1bb8:	cmp	w11, w5
    1bbc:	b.cc	23d0 <inflate+0x1e08>  // b.lo, b.ul, b.last
    1bc0:	ldr	w0, [x21, #140]
    1bc4:	add	w5, w0, w1
    1bc8:	add	x1, x21, w0, uxtw #1
    1bcc:	add	w0, w0, #0x1
    1bd0:	cmp	w5, w0
    1bd4:	strh	w14, [x1, #152]
    1bd8:	b.ne	1bc8 <inflate+0x1600>  // b.any
    1bdc:	str	w5, [x21, #140]
    1be0:	b	1588 <inflate+0xfc0>
    1be4:	mov	w0, #0xffffffff            	// #-1
    1be8:	str	w0, [x21, #7148]
    1bec:	b	d78 <inflate+0x7b0>
    1bf0:	add	w1, w2, w1
    1bf4:	add	x1, x3, x1
    1bf8:	b	11fc <inflate+0xc34>
    1bfc:	cmp	w19, #0xf
    1c00:	b.hi	231c <inflate+0x1d54>  // b.pmore
    1c04:	cbz	w20, d88 <inflate+0x7c0>
    1c08:	mov	x28, x24
    1c0c:	add	w2, w19, #0x8
    1c10:	cmp	w2, #0xf
    1c14:	sub	w4, w20, #0x1
    1c18:	ldrb	w1, [x28], #1
    1c1c:	lsl	x1, x1, x19
    1c20:	add	x23, x23, x1
    1c24:	b.hi	2324 <inflate+0x1d5c>  // b.pmore
    1c28:	cbz	w4, 1f3c <inflate+0x1974>
    1c2c:	ldrb	w1, [x24, #1]
    1c30:	sub	w20, w20, #0x2
    1c34:	add	w19, w19, #0x10
    1c38:	add	x28, x24, #0x2
    1c3c:	lsl	x2, x1, x2
    1c40:	add	x23, x23, x2
    1c44:	tst	x0, #0x2
    1c48:	mov	x1, #0x8b1f                	// #35615
    1c4c:	ccmp	x23, x1, #0x0, ne  // ne = any
    1c50:	b.eq	228c <inflate+0x1cc4>  // b.none
    1c54:	ldr	x1, [x21, #48]
    1c58:	str	wzr, [x21, #24]
    1c5c:	cbz	x1, 1c68 <inflate+0x16a0>
    1c60:	mov	w2, #0xffffffff            	// #-1
    1c64:	str	w2, [x1, #72]
    1c68:	tbz	w0, #0, 1fdc <inflate+0x1a14>
    1c6c:	mov	x0, #0x4211                	// #16913
    1c70:	ubfiz	x1, x23, #8, #8
    1c74:	movk	x0, #0x2108, lsl #16
    1c78:	add	x1, x1, x23, lsr #8
    1c7c:	movk	x0, #0x1084, lsl #32
    1c80:	movk	x0, #0x842, lsl #48
    1c84:	umulh	x2, x1, x0
    1c88:	sub	x0, x1, x2
    1c8c:	add	x0, x2, x0, lsr #1
    1c90:	lsr	x0, x0, #4
    1c94:	lsl	x2, x0, #5
    1c98:	sub	x0, x2, x0
    1c9c:	cmp	x1, x0
    1ca0:	b.ne	1fdc <inflate+0x1a14>  // b.any
    1ca4:	and	w0, w23, #0xf
    1ca8:	cmp	w0, #0x8
    1cac:	b.ne	1734 <inflate+0x116c>  // b.any
    1cb0:	ldr	w1, [x21, #56]
    1cb4:	lsr	x23, x23, #4
    1cb8:	and	w0, w23, #0xf
    1cbc:	sub	w19, w19, #0x4
    1cc0:	add	w0, w0, #0x8
    1cc4:	cbnz	w1, 23e8 <inflate+0x1e20>
    1cc8:	str	w0, [x21, #56]
    1ccc:	cmp	w0, #0xf
    1cd0:	b.ls	23f8 <inflate+0x1e30>  // b.plast
    1cd4:	adrp	x0, 0 <inflateResetKeep>
    1cd8:	add	x0, x0, #0x0
    1cdc:	str	x0, [x22, #48]
    1ce0:	mov	x24, x28
    1ce4:	mov	w0, #0x3f51                	// #16209
    1ce8:	str	w0, [x21, #8]
    1cec:	b	b94 <inflate+0x5cc>
    1cf0:	mov	w0, w5
    1cf4:	mov	x2, #0x0                   	// #0
    1cf8:	ldrb	w4, [x1, x2]
    1cfc:	cmp	x0, x2
    1d00:	strb	w4, [x7, x2]
    1d04:	add	x2, x2, #0x1
    1d08:	b.ne	1cf8 <inflate+0x1730>  // b.any
    1d0c:	b	1368 <inflate+0xda0>
    1d10:	add	w3, w3, w0
    1d14:	mov	w1, #0xffffffff            	// #-1
    1d18:	mov	w4, w5
    1d1c:	lsl	w3, w1, w3
    1d20:	bic	w1, w11, w3
    1d24:	mvn	w11, w3
    1d28:	b	1d48 <inflate+0x1780>
    1d2c:	cbz	w20, d88 <inflate+0x7c0>
    1d30:	ldrb	w1, [x24], #1
    1d34:	sub	w20, w20, #0x1
    1d38:	lsl	x1, x1, x19
    1d3c:	add	x23, x23, x1
    1d40:	and	w1, w11, w23
    1d44:	add	w19, w19, #0x8
    1d48:	lsr	w1, w1, w0
    1d4c:	add	w1, w1, w4
    1d50:	lsl	x1, x1, #2
    1d54:	add	x5, x2, x1
    1d58:	ldrb	w3, [x2, x1]
    1d5c:	ldrb	w1, [x5, #1]
    1d60:	ldrh	w5, [x5, #2]
    1d64:	add	w12, w1, w0
    1d68:	cmp	w12, w19
    1d6c:	b.hi	1d2c <inflate+0x1764>  // b.pmore
    1d70:	ldr	w2, [x21, #7148]
    1d74:	sub	w19, w19, w0
    1d78:	mov	w4, w1
    1d7c:	lsr	x23, x23, x0
    1d80:	add	w2, w0, w2
    1d84:	b	c34 <inflate+0x66c>
    1d88:	ldr	x0, [x21, #32]
    1d8c:	mov	x1, x24
    1d90:	str	w2, [sp, #120]
    1d94:	str	x7, [sp, #128]
    1d98:	str	w8, [sp, #136]
    1d9c:	str	w9, [sp, #144]
    1da0:	bl	0 <crc32>
    1da4:	ldr	w2, [sp, #120]
    1da8:	ldr	w8, [sp, #136]
    1dac:	ldr	w9, [sp, #144]
    1db0:	str	x0, [x21, #32]
    1db4:	ldr	x7, [sp, #128]
    1db8:	b	1a30 <inflate+0x1468>
    1dbc:	tst	x23, #0xe000
    1dc0:	b.eq	708 <inflate+0x140>  // b.none
    1dc4:	adrp	x0, 0 <inflateResetKeep>
    1dc8:	add	x0, x0, #0x0
    1dcc:	str	x0, [x22, #48]
    1dd0:	mov	x24, x28
    1dd4:	mov	w0, #0x3f51                	// #16209
    1dd8:	str	w0, [x21, #8]
    1ddc:	b	b94 <inflate+0x5cc>
    1de0:	mov	w2, #0x3f42                	// #16194
    1de4:	str	w2, [x21, #8]
    1de8:	str	w0, [x21, #92]
    1dec:	mov	x24, x1
    1df0:	cmp	w25, #0x6
    1df4:	b.eq	2450 <inflate+0x1e88>  // b.none
    1df8:	mov	w19, #0x0                   	// #0
    1dfc:	mov	x23, #0x0                   	// #0
    1e00:	b	16a4 <inflate+0x10dc>
    1e04:	mov	w19, w2
    1e08:	mov	x24, x1
    1e0c:	sub	w26, w9, w8
    1e10:	mov	w28, #0x0                   	// #0
    1e14:	mov	w20, #0x0                   	// #0
    1e18:	b	d90 <inflate+0x7c8>
    1e1c:	ldr	x0, [x21, #32]
    1e20:	mov	x1, x24
    1e24:	str	w2, [sp, #120]
    1e28:	str	x7, [sp, #128]
    1e2c:	str	w8, [sp, #136]
    1e30:	str	w9, [sp, #144]
    1e34:	bl	0 <crc32>
    1e38:	ldr	w2, [sp, #120]
    1e3c:	ldr	w8, [sp, #136]
    1e40:	ldr	w9, [sp, #144]
    1e44:	str	x0, [x21, #32]
    1e48:	ldr	x7, [sp, #128]
    1e4c:	b	1ad8 <inflate+0x1510>
    1e50:	ldr	x0, [x21, #32]
    1e54:	add	x1, sp, #0xa8
    1e58:	mov	w2, #0x2                   	// #2
    1e5c:	str	x7, [sp, #120]
    1e60:	str	w8, [sp, #128]
    1e64:	str	w9, [sp, #136]
    1e68:	strh	w23, [sp, #168]
    1e6c:	bl	0 <crc32>
    1e70:	ldr	w2, [x21, #24]
    1e74:	ldr	w8, [sp, #128]
    1e78:	ldr	w9, [sp, #136]
    1e7c:	mov	w1, w2
    1e80:	str	x0, [x21, #32]
    1e84:	ldr	x7, [sp, #120]
    1e88:	b	7d0 <inflate+0x208>
    1e8c:	mov	w19, w2
    1e90:	mov	x24, x0
    1e94:	b	1e0c <inflate+0x1844>
    1e98:	add	w14, w1, #0x3
    1e9c:	cmp	w19, w14
    1ea0:	b.cs	1ec8 <inflate+0x1900>  // b.hs, b.nlast
    1ea4:	nop
    1ea8:	cbz	w20, d88 <inflate+0x7c0>
    1eac:	ldrb	w0, [x24], #1
    1eb0:	sub	w20, w20, #0x1
    1eb4:	lsl	x0, x0, x19
    1eb8:	add	w19, w19, #0x8
    1ebc:	add	x23, x23, x0
    1ec0:	cmp	w19, w14
    1ec4:	b.cc	1ea8 <inflate+0x18e0>  // b.lo, b.ul, b.last
    1ec8:	lsr	x23, x23, x1
    1ecc:	sub	w1, w13, w1
    1ed0:	and	w0, w23, #0x7
    1ed4:	add	w19, w19, w1
    1ed8:	lsr	x23, x23, #3
    1edc:	add	w1, w0, #0x3
    1ee0:	mov	w14, #0x0                   	// #0
    1ee4:	b	1bb4 <inflate+0x15ec>
    1ee8:	mov	x1, #0x9                   	// #9
    1eec:	add	x0, x26, #0x800
    1ef0:	movk	x1, #0x5, lsl #32
    1ef4:	mov	w2, #0x3f47                	// #16199
    1ef8:	str	w2, [x21, #8]
    1efc:	lsr	x23, x23, #3
    1f00:	stp	x26, x0, [x21, #104]
    1f04:	sub	w19, w19, #0x3
    1f08:	cmp	w25, #0x6
    1f0c:	str	x1, [x21, #120]
    1f10:	b.ne	b28 <inflate+0x560>  // b.any
    1f14:	sub	w26, w9, w8
    1f18:	b	d90 <inflate+0x7c8>
    1f1c:	adrp	x0, 0 <inflateResetKeep>
    1f20:	add	x0, x0, #0x0
    1f24:	str	x0, [x22, #48]
    1f28:	lsr	x23, x23, #3
    1f2c:	mov	w0, #0x3f51                	// #16209
    1f30:	sub	w19, w19, #0x3
    1f34:	str	w0, [x21, #8]
    1f38:	b	b94 <inflate+0x5cc>
    1f3c:	mov	x24, x28
    1f40:	mov	w19, w2
    1f44:	sub	w26, w9, w8
    1f48:	mov	w20, #0x0                   	// #0
    1f4c:	mov	w28, #0x0                   	// #0
    1f50:	b	d90 <inflate+0x7c8>
    1f54:	ldr	x0, [x21, #32]
    1f58:	mov	w2, w28
    1f5c:	mov	x1, x24
    1f60:	str	x7, [sp, #120]
    1f64:	str	w8, [sp, #128]
    1f68:	str	w9, [sp, #136]
    1f6c:	str	x5, [sp, #144]
    1f70:	bl	0 <crc32>
    1f74:	ldr	w8, [sp, #128]
    1f78:	ldr	w9, [sp, #136]
    1f7c:	str	x0, [x21, #32]
    1f80:	ldr	x7, [sp, #120]
    1f84:	ldr	x5, [sp, #144]
    1f88:	b	878 <inflate+0x2b0>
    1f8c:	tbz	w2, #6, ba0 <inflate+0x5d8>
    1f90:	adrp	x0, 0 <inflateResetKeep>
    1f94:	add	x0, x0, #0x0
    1f98:	str	x0, [x22, #48]
    1f9c:	mov	w0, #0x3f51                	// #16209
    1fa0:	str	w0, [x21, #8]
    1fa4:	b	b94 <inflate+0x5cc>
    1fa8:	ldr	x0, [x21, #32]
    1fac:	add	x1, sp, #0xa8
    1fb0:	mov	w2, #0x4                   	// #4
    1fb4:	str	x7, [sp, #120]
    1fb8:	str	w8, [sp, #128]
    1fbc:	str	w9, [sp, #136]
    1fc0:	str	w23, [sp, #168]
    1fc4:	bl	0 <crc32>
    1fc8:	ldr	w8, [sp, #128]
    1fcc:	ldr	w9, [sp, #136]
    1fd0:	str	x0, [x21, #32]
    1fd4:	ldr	x7, [sp, #120]
    1fd8:	b	774 <inflate+0x1ac>
    1fdc:	adrp	x0, 0 <inflateResetKeep>
    1fe0:	add	x0, x0, #0x0
    1fe4:	str	x0, [x22, #48]
    1fe8:	mov	x24, x28
    1fec:	mov	w0, #0x3f51                	// #16209
    1ff0:	str	w0, [x21, #8]
    1ff4:	b	b94 <inflate+0x5cc>
    1ff8:	mov	w19, w3
    1ffc:	mov	x24, x1
    2000:	b	1e0c <inflate+0x1844>
    2004:	mov	x0, x24
    2008:	b	11ac <inflate+0xbe4>
    200c:	mov	x24, x0
    2010:	mov	w19, #0x0                   	// #0
    2014:	mov	x23, #0x0                   	// #0
    2018:	mov	w0, #0x3f50                	// #16208
    201c:	sub	w26, w9, w8
    2020:	mov	w28, #0x1                   	// #1
    2024:	str	w0, [x21, #8]
    2028:	b	d90 <inflate+0x7c8>
    202c:	mov	x0, x24
    2030:	b	19a4 <inflate+0x13dc>
    2034:	mov	w19, w2
    2038:	mov	w20, w3
    203c:	b	11ac <inflate+0xbe4>
    2040:	mov	w19, w3
    2044:	mov	w20, w4
    2048:	b	19a4 <inflate+0x13dc>
    204c:	mov	x24, x0
    2050:	mov	w1, #0x0                   	// #0
    2054:	mov	w0, #0x3f45                	// #16197
    2058:	str	w0, [x21, #8]
    205c:	str	wzr, [x21, #140]
    2060:	b	1410 <inflate+0xe48>
    2064:	mov	w19, w3
    2068:	mov	w20, w4
    206c:	b	11ac <inflate+0xbe4>
    2070:	add	w14, w1, #0x2
    2074:	cmp	w14, w19
    2078:	b.ls	20a0 <inflate+0x1ad8>  // b.plast
    207c:	nop
    2080:	cbz	w20, d88 <inflate+0x7c0>
    2084:	ldrb	w0, [x24], #1
    2088:	sub	w20, w20, #0x1
    208c:	lsl	x0, x0, x19
    2090:	add	w19, w19, #0x8
    2094:	add	x23, x23, x0
    2098:	cmp	w14, w19
    209c:	b.hi	2080 <inflate+0x1ab8>  // b.pmore
    20a0:	sub	w19, w19, w1
    20a4:	lsr	x23, x23, x1
    20a8:	cbz	w5, 23d0 <inflate+0x1e08>
    20ac:	sub	w0, w5, #0x1
    20b0:	and	w1, w23, #0x3
    20b4:	sub	w19, w19, #0x2
    20b8:	add	w1, w1, #0x3
    20bc:	add	x0, x21, x0, lsl #1
    20c0:	lsr	x23, x23, #2
    20c4:	ldrh	w14, [x0, #152]
    20c8:	b	1bb4 <inflate+0x15ec>
    20cc:	mov	w19, w3
    20d0:	mov	x24, x0
    20d4:	b	1e0c <inflate+0x1844>
    20d8:	mov	w26, w9
    20dc:	mov	w28, #0x0                   	// #0
    20e0:	b	d90 <inflate+0x7c8>
    20e4:	add	w2, w2, w0
    20e8:	mov	w3, #0xffffffff            	// #-1
    20ec:	lsl	w3, w3, w2
    20f0:	bic	w1, w5, w3
    20f4:	mvn	w3, w3
    20f8:	b	2118 <inflate+0x1b50>
    20fc:	cbz	w20, d88 <inflate+0x7c0>
    2100:	ldrb	w1, [x24], #1
    2104:	sub	w20, w20, #0x1
    2108:	lsl	x1, x1, x19
    210c:	add	x23, x23, x1
    2110:	and	w1, w3, w23
    2114:	add	w19, w19, #0x8
    2118:	lsr	w1, w1, w0
    211c:	add	w1, w1, w11
    2120:	lsl	x1, x1, #2
    2124:	add	x5, x4, x1
    2128:	ldrb	w2, [x4, x1]
    212c:	ldrb	w1, [x5, #1]
    2130:	ldrh	w12, [x5, #2]
    2134:	add	w5, w1, w0
    2138:	cmp	w5, w19
    213c:	b.hi	20fc <inflate+0x1b34>  // b.pmore
    2140:	str	w12, [x21, #92]
    2144:	sub	w19, w19, w0
    2148:	str	w5, [x21, #7148]
    214c:	lsr	x23, x23, x0
    2150:	sub	w19, w19, w1
    2154:	lsr	x23, x23, x1
    2158:	cbnz	w2, 1090 <inflate+0xac8>
    215c:	b	a88 <inflate+0x4c0>
    2160:	mov	w19, w2
    2164:	mov	w20, w4
    2168:	b	11ac <inflate+0xbe4>
    216c:	mov	x1, x24
    2170:	b	1840 <inflate+0x1278>
    2174:	mov	x0, x24
    2178:	b	18c8 <inflate+0x1300>
    217c:	mov	w19, w2
    2180:	mov	w20, w3
    2184:	b	1840 <inflate+0x1278>
    2188:	mov	w19, w2
    218c:	mov	w20, w3
    2190:	b	18c8 <inflate+0x1300>
    2194:	mov	w20, w3
    2198:	b	cf4 <inflate+0x72c>
    219c:	mov	w19, w1
    21a0:	mov	w20, w2
    21a4:	b	1720 <inflate+0x1158>
    21a8:	mov	w20, w4
    21ac:	b	cf4 <inflate+0x72c>
    21b0:	mov	w19, w3
    21b4:	mov	w20, w4
    21b8:	b	1840 <inflate+0x1278>
    21bc:	ldr	x0, [x21, #32]
    21c0:	add	x1, sp, #0xa8
    21c4:	mov	w2, #0x2                   	// #2
    21c8:	str	x7, [sp, #120]
    21cc:	str	w8, [sp, #128]
    21d0:	mov	w19, #0x0                   	// #0
    21d4:	str	w9, [sp, #136]
    21d8:	strh	w23, [sp, #168]
    21dc:	bl	0 <crc32>
    21e0:	ldr	w1, [x21, #24]
    21e4:	mov	x23, #0x0                   	// #0
    21e8:	ldr	w8, [sp, #128]
    21ec:	ldr	w9, [sp, #136]
    21f0:	str	x0, [x21, #32]
    21f4:	and	w0, w1, #0x400
    21f8:	ldr	x7, [sp, #120]
    21fc:	b	7f4 <inflate+0x22c>
    2200:	mov	w19, w2
    2204:	mov	x24, x26
    2208:	b	1e0c <inflate+0x1844>
    220c:	mov	w20, w2
    2210:	b	cf4 <inflate+0x72c>
    2214:	mov	w19, w2
    2218:	mov	w20, w4
    221c:	b	1840 <inflate+0x1278>
    2220:	mov	w0, #0x3f46                	// #16198
    2224:	mov	w5, #0x0                   	// #0
    2228:	str	w0, [x21, #8]
    222c:	str	wzr, [x21, #140]
    2230:	b	1504 <inflate+0xf3c>
    2234:	bl	0 <adler32>
    2238:	mov	x2, x0
    223c:	ldr	w8, [sp, #112]
    2240:	ldr	x7, [sp, #104]
    2244:	b	1940 <inflate+0x1378>
    2248:	mov	x26, x24
    224c:	b	9ec <inflate+0x424>
    2250:	ldp	x25, x26, [sp, #64]
    2254:	str	x24, [x22]
    2258:	str	w20, [x22, #8]
    225c:	mov	w28, #0x2                   	// #2
    2260:	str	x7, [x22, #24]
    2264:	str	w8, [x22, #32]
    2268:	str	x23, [x21, #80]
    226c:	str	w19, [x21, #88]
    2270:	ldp	x19, x20, [sp, #16]
    2274:	ldp	x21, x22, [sp, #32]
    2278:	ldp	x23, x24, [sp, #48]
    227c:	b	60c <inflate+0x44>
    2280:	mov	w19, w2
    2284:	mov	w20, w3
    2288:	b	9ec <inflate+0x424>
    228c:	ldr	w0, [x21, #56]
    2290:	cbnz	w0, 229c <inflate+0x1cd4>
    2294:	mov	w0, #0xf                   	// #15
    2298:	str	w0, [x21, #56]
    229c:	mov	w2, #0x0                   	// #0
    22a0:	mov	x1, #0x0                   	// #0
    22a4:	mov	x0, #0x0                   	// #0
    22a8:	str	x7, [sp, #120]
    22ac:	str	w8, [sp, #128]
    22b0:	mov	x24, x28
    22b4:	str	w9, [sp, #136]
    22b8:	bl	0 <crc32>
    22bc:	mov	w3, #0xffff8b1f            	// #-29921
    22c0:	str	x0, [x21, #32]
    22c4:	add	x1, sp, #0xa8
    22c8:	mov	w2, #0x2                   	// #2
    22cc:	strh	w3, [sp, #168]
    22d0:	bl	0 <crc32>
    22d4:	mov	w1, #0x3f35                	// #16181
    22d8:	ldr	w8, [sp, #128]
    22dc:	ldr	w9, [sp, #136]
    22e0:	mov	w19, #0x0                   	// #0
    22e4:	mov	x23, #0x0                   	// #0
    22e8:	str	w1, [x21, #8]
    22ec:	str	x0, [x21, #32]
    22f0:	ldr	x7, [sp, #120]
    22f4:	b	16e0 <inflate+0x1118>
    22f8:	mov	w19, w3
    22fc:	mov	w20, w4
    2300:	b	9ec <inflate+0x424>
    2304:	mov	w19, w2
    2308:	mov	w20, w4
    230c:	b	9ec <inflate+0x424>
    2310:	mov	w19, w3
    2314:	mov	x24, x26
    2318:	b	1e0c <inflate+0x1844>
    231c:	mov	x28, x24
    2320:	b	1c44 <inflate+0x167c>
    2324:	mov	w19, w2
    2328:	mov	w20, w4
    232c:	b	1c44 <inflate+0x167c>
    2330:	add	x0, x21, #0x558
    2334:	mov	w3, #0x9                   	// #9
    2338:	str	x0, [x21, #104]
    233c:	add	x28, x21, #0x98
    2340:	str	w3, [x21, #120]
    2344:	add	x5, x21, #0x318
    2348:	str	x0, [x21, #144]
    234c:	add	x3, x21, #0x90
    2350:	mov	x1, x28
    2354:	add	x4, x21, #0x78
    2358:	mov	w0, #0x1                   	// #1
    235c:	stp	x5, x3, [sp, #120]
    2360:	str	x7, [sp, #136]
    2364:	str	w8, [sp, #144]
    2368:	str	w9, [sp, #156]
    236c:	bl	0 <inflate_table>
    2370:	ldr	w8, [sp, #144]
    2374:	mov	w11, #0x3f51                	// #16209
    2378:	ldr	w9, [sp, #156]
    237c:	ldp	x5, x3, [sp, #120]
    2380:	ldr	x7, [sp, #136]
    2384:	cbz	w0, 2464 <inflate+0x1e9c>
    2388:	adrp	x0, 0 <inflateResetKeep>
    238c:	add	x0, x0, #0x0
    2390:	str	x0, [x22, #48]
    2394:	str	w11, [x21, #8]
    2398:	b	b94 <inflate+0x5cc>
    239c:	ldr	x0, [x21, #32]
    23a0:	add	x1, sp, #0xa8
    23a4:	mov	w2, #0x2                   	// #2
    23a8:	str	x7, [sp, #120]
    23ac:	str	w8, [sp, #128]
    23b0:	str	w9, [sp, #136]
    23b4:	strh	w23, [sp, #168]
    23b8:	bl	0 <crc32>
    23bc:	ldr	w8, [sp, #128]
    23c0:	ldr	w9, [sp, #136]
    23c4:	str	x0, [x21, #32]
    23c8:	ldr	x7, [sp, #120]
    23cc:	b	724 <inflate+0x15c>
    23d0:	adrp	x0, 0 <inflateResetKeep>
    23d4:	add	x0, x0, #0x0
    23d8:	str	x0, [x22, #48]
    23dc:	mov	w0, #0x3f51                	// #16209
    23e0:	str	w0, [x21, #8]
    23e4:	b	b94 <inflate+0x5cc>
    23e8:	cmp	w0, #0xf
    23ec:	b.hi	1cd4 <inflate+0x170c>  // b.pmore
    23f0:	cmp	w1, w0
    23f4:	b.cc	1cd4 <inflate+0x170c>  // b.lo, b.ul, b.last
    23f8:	mov	w1, #0x1                   	// #1
    23fc:	mov	w2, #0x0                   	// #0
    2400:	lsl	w0, w1, w0
    2404:	str	w0, [x21, #28]
    2408:	mov	x1, #0x0                   	// #0
    240c:	mov	x0, #0x0                   	// #0
    2410:	str	x7, [sp, #120]
    2414:	mov	x24, x28
    2418:	str	w8, [sp, #128]
    241c:	str	w9, [sp, #136]
    2420:	bl	0 <adler32>
    2424:	str	x0, [x21, #32]
    2428:	ands	x23, x23, #0x200
    242c:	str	x0, [x22, #96]
    2430:	ldr	w8, [sp, #128]
    2434:	ldr	w9, [sp, #136]
    2438:	ldr	x7, [sp, #120]
    243c:	b.ne	c60 <inflate+0x698>  // b.any
    2440:	mov	w0, #0x3f3f                	// #16191
    2444:	mov	w19, #0x0                   	// #0
    2448:	str	w0, [x21, #8]
    244c:	b	d78 <inflate+0x7b0>
    2450:	sub	w26, w9, w8
    2454:	mov	w28, #0x0                   	// #0
    2458:	mov	w19, #0x0                   	// #0
    245c:	mov	x23, #0x0                   	// #0
    2460:	b	d90 <inflate+0x7c8>
    2464:	mov	x4, x21
    2468:	str	x7, [sp, #120]
    246c:	ldp	w1, w2, [x21, #132]
    2470:	str	w8, [sp, #128]
    2474:	ldr	x0, [x21, #144]
    2478:	str	x0, [x21, #112]
    247c:	mov	w0, #0x6                   	// #6
    2480:	str	w0, [x4, #124]!
    2484:	add	x1, x28, x1, lsl #1
    2488:	mov	w0, #0x2                   	// #2
    248c:	str	w9, [sp, #136]
    2490:	bl	0 <inflate_table>
    2494:	ldr	w8, [sp, #128]
    2498:	mov	w28, w0
    249c:	ldr	w9, [sp, #136]
    24a0:	ldr	x7, [sp, #120]
    24a4:	cbz	w0, b14 <inflate+0x54c>
    24a8:	adrp	x0, 0 <inflateResetKeep>
    24ac:	add	x0, x0, #0x0
    24b0:	str	x0, [x22, #48]
    24b4:	mov	w11, #0x3f51                	// #16209
    24b8:	str	w11, [x21, #8]
    24bc:	b	b94 <inflate+0x5cc>

00000000000024c0 <inflateEnd>:
    24c0:	cbz	x0, 2560 <inflateEnd+0xa0>
    24c4:	stp	x29, x30, [sp, #-32]!
    24c8:	mov	x29, sp
    24cc:	str	x19, [sp, #16]
    24d0:	mov	x19, x0
    24d4:	ldr	x0, [x0, #64]
    24d8:	cbz	x0, 2508 <inflateEnd+0x48>
    24dc:	ldr	x2, [x19, #72]
    24e0:	cbz	x2, 2508 <inflateEnd+0x48>
    24e4:	ldr	x1, [x19, #56]
    24e8:	cbz	x1, 2508 <inflateEnd+0x48>
    24ec:	ldr	x3, [x1]
    24f0:	mov	w0, #0xfffffffe            	// #-2
    24f4:	cmp	x19, x3
    24f8:	b.eq	2518 <inflateEnd+0x58>  // b.none
    24fc:	ldr	x19, [sp, #16]
    2500:	ldp	x29, x30, [sp], #32
    2504:	ret
    2508:	mov	w0, #0xfffffffe            	// #-2
    250c:	ldr	x19, [sp, #16]
    2510:	ldp	x29, x30, [sp], #32
    2514:	ret
    2518:	ldr	w3, [x1, #8]
    251c:	mov	w4, #0xffffc0cc            	// #-16180
    2520:	add	w3, w3, w4
    2524:	cmp	w3, #0x1f
    2528:	b.hi	24fc <inflateEnd+0x3c>  // b.pmore
    252c:	ldr	x3, [x1, #72]
    2530:	ldr	x0, [x19, #80]
    2534:	cbz	x3, 2548 <inflateEnd+0x88>
    2538:	mov	x1, x3
    253c:	blr	x2
    2540:	ldp	x2, x0, [x19, #72]
    2544:	ldr	x1, [x19, #56]
    2548:	blr	x2
    254c:	str	xzr, [x19, #56]
    2550:	mov	w0, #0x0                   	// #0
    2554:	ldr	x19, [sp, #16]
    2558:	ldp	x29, x30, [sp], #32
    255c:	ret
    2560:	mov	w0, #0xfffffffe            	// #-2
    2564:	ret

0000000000002568 <inflateGetDictionary>:
    2568:	cbz	x0, 25b4 <inflateGetDictionary+0x4c>
    256c:	mov	x3, x0
    2570:	ldr	x0, [x0, #64]
    2574:	cbz	x0, 25b4 <inflateGetDictionary+0x4c>
    2578:	ldr	x0, [x3, #72]
    257c:	cbz	x0, 25b4 <inflateGetDictionary+0x4c>
    2580:	stp	x29, x30, [sp, #-32]!
    2584:	mov	x29, sp
    2588:	stp	x19, x20, [sp, #16]
    258c:	ldr	x20, [x3, #56]
    2590:	cbz	x20, 2600 <inflateGetDictionary+0x98>
    2594:	mov	x4, x1
    2598:	mov	w0, #0xfffffffe            	// #-2
    259c:	ldr	x1, [x20]
    25a0:	cmp	x3, x1
    25a4:	b.eq	25bc <inflateGetDictionary+0x54>  // b.none
    25a8:	ldp	x19, x20, [sp, #16]
    25ac:	ldp	x29, x30, [sp], #32
    25b0:	ret
    25b4:	mov	w0, #0xfffffffe            	// #-2
    25b8:	ret
    25bc:	ldr	w1, [x20, #8]
    25c0:	mov	w3, #0xffffc0cc            	// #-16180
    25c4:	add	w1, w1, w3
    25c8:	cmp	w1, #0x1f
    25cc:	b.hi	25a8 <inflateGetDictionary+0x40>  // b.pmore
    25d0:	mov	x19, x2
    25d4:	ldr	w2, [x20, #64]
    25d8:	cmp	w2, #0x0
    25dc:	ccmp	x4, #0x0, #0x4, ne  // ne = any
    25e0:	b.ne	2608 <inflateGetDictionary+0xa0>  // b.any
    25e4:	mov	w0, #0x0                   	// #0
    25e8:	cbz	x19, 25a8 <inflateGetDictionary+0x40>
    25ec:	ldr	w1, [x20, #64]
    25f0:	str	w1, [x19]
    25f4:	ldp	x19, x20, [sp, #16]
    25f8:	ldp	x29, x30, [sp], #32
    25fc:	ret
    2600:	mov	w0, #0xfffffffe            	// #-2
    2604:	b	25a8 <inflateGetDictionary+0x40>
    2608:	ldr	x3, [x20, #72]
    260c:	mov	x0, x4
    2610:	ldr	w1, [x20, #68]
    2614:	sub	w2, w2, w1
    2618:	add	x1, x3, w1, uxtw
    261c:	bl	0 <memcpy>
    2620:	mov	x4, x0
    2624:	ldp	w0, w2, [x20, #64]
    2628:	ldr	x1, [x20, #72]
    262c:	sub	x0, x0, x2
    2630:	add	x0, x4, x0
    2634:	bl	0 <memcpy>
    2638:	b	25e4 <inflateGetDictionary+0x7c>
    263c:	nop

0000000000002640 <inflateSetDictionary>:
    2640:	cbz	x0, 2838 <inflateSetDictionary+0x1f8>
    2644:	stp	x29, x30, [sp, #-64]!
    2648:	mov	x29, sp
    264c:	stp	x19, x20, [sp, #16]
    2650:	mov	x19, x0
    2654:	ldr	x0, [x0, #64]
    2658:	cbz	x0, 269c <inflateSetDictionary+0x5c>
    265c:	ldr	x0, [x19, #72]
    2660:	cbz	x0, 269c <inflateSetDictionary+0x5c>
    2664:	stp	x23, x24, [sp, #48]
    2668:	ldr	x23, [x19, #56]
    266c:	cbz	x23, 2810 <inflateSetDictionary+0x1d0>
    2670:	stp	x21, x22, [sp, #32]
    2674:	mov	x22, x1
    2678:	mov	w0, #0xfffffffe            	// #-2
    267c:	ldr	x1, [x23]
    2680:	cmp	x19, x1
    2684:	b.eq	26ac <inflateSetDictionary+0x6c>  // b.none
    2688:	ldp	x21, x22, [sp, #32]
    268c:	ldp	x23, x24, [sp, #48]
    2690:	ldp	x19, x20, [sp, #16]
    2694:	ldp	x29, x30, [sp], #64
    2698:	ret
    269c:	mov	w0, #0xfffffffe            	// #-2
    26a0:	ldp	x19, x20, [sp, #16]
    26a4:	ldp	x29, x30, [sp], #64
    26a8:	ret
    26ac:	mov	w20, w2
    26b0:	ldr	w2, [x23, #8]
    26b4:	mov	w1, #0xffffc0cc            	// #-16180
    26b8:	add	w1, w2, w1
    26bc:	cmp	w1, #0x1f
    26c0:	b.hi	2688 <inflateSetDictionary+0x48>  // b.pmore
    26c4:	ldr	w1, [x23, #16]
    26c8:	cbz	w1, 2748 <inflateSetDictionary+0x108>
    26cc:	mov	w1, #0x3f3e                	// #16190
    26d0:	cmp	w2, w1
    26d4:	b.ne	2688 <inflateSetDictionary+0x48>  // b.any
    26d8:	mov	w2, #0x0                   	// #0
    26dc:	mov	x1, #0x0                   	// #0
    26e0:	mov	x0, #0x0                   	// #0
    26e4:	bl	0 <adler32>
    26e8:	mov	x1, x22
    26ec:	mov	w2, w20
    26f0:	bl	0 <adler32>
    26f4:	ldr	x1, [x23, #32]
    26f8:	cmp	x1, x0
    26fc:	b.ne	2840 <inflateSetDictionary+0x200>  // b.any
    2700:	ldr	x21, [x19, #56]
    2704:	add	x24, x22, w20, uxtw
    2708:	ldr	x0, [x21, #72]
    270c:	cbnz	x0, 2764 <inflateSetDictionary+0x124>
    2710:	ldr	x3, [x19, #64]
    2714:	mov	w2, #0x1                   	// #1
    2718:	ldr	x0, [x19, #80]
    271c:	ldr	w1, [x21, #56]
    2720:	lsl	w1, w2, w1
    2724:	blr	x3
    2728:	str	x0, [x21, #72]
    272c:	cbnz	x0, 2764 <inflateSetDictionary+0x124>
    2730:	mov	w1, #0x3f52                	// #16210
    2734:	mov	w0, #0xfffffffc            	// #-4
    2738:	ldp	x21, x22, [sp, #32]
    273c:	str	w1, [x23, #8]
    2740:	ldp	x23, x24, [sp, #48]
    2744:	b	2690 <inflateSetDictionary+0x50>
    2748:	mov	w0, #0x3f3e                	// #16190
    274c:	mov	x21, x23
    2750:	cmp	w2, w0
    2754:	b.eq	26d8 <inflateSetDictionary+0x98>  // b.none
    2758:	ldr	x0, [x21, #72]
    275c:	add	x24, x22, w20, uxtw
    2760:	cbz	x0, 2710 <inflateSetDictionary+0xd0>
    2764:	ldr	w2, [x21, #60]
    2768:	cbnz	w2, 2780 <inflateSetDictionary+0x140>
    276c:	ldr	w1, [x21, #56]
    2770:	mov	w2, #0x1                   	// #1
    2774:	str	xzr, [x21, #64]
    2778:	lsl	w2, w2, w1
    277c:	str	w2, [x21, #60]
    2780:	cmp	w20, w2
    2784:	b.cc	27bc <inflateSetDictionary+0x17c>  // b.lo, b.ul, b.last
    2788:	mov	w2, w2
    278c:	sub	x1, x24, x2
    2790:	bl	0 <memcpy>
    2794:	ldr	w0, [x21, #60]
    2798:	stp	w0, wzr, [x21, #64]
    279c:	mov	w1, #0x1                   	// #1
    27a0:	mov	w0, #0x0                   	// #0
    27a4:	ldp	x21, x22, [sp, #32]
    27a8:	str	w1, [x23, #20]
    27ac:	ldp	x19, x20, [sp, #16]
    27b0:	ldp	x23, x24, [sp, #48]
    27b4:	ldp	x29, x30, [sp], #64
    27b8:	ret
    27bc:	ldr	w3, [x21, #68]
    27c0:	mov	x1, x22
    27c4:	sub	w2, w2, w3
    27c8:	cmp	w20, w2
    27cc:	add	x0, x0, w3, uxtw
    27d0:	csel	w19, w20, w2, ls  // ls = plast
    27d4:	csel	w2, w20, w2, ls  // ls = plast
    27d8:	bl	0 <memcpy>
    27dc:	subs	w20, w20, w19
    27e0:	b.ne	281c <inflateSetDictionary+0x1dc>  // b.any
    27e4:	ldp	w1, w2, [x21, #60]
    27e8:	ldr	w0, [x21, #68]
    27ec:	add	w0, w19, w0
    27f0:	cmp	w0, w1
    27f4:	csel	w0, w0, wzr, ne  // ne = any
    27f8:	str	w0, [x21, #68]
    27fc:	cmp	w1, w2
    2800:	b.ls	279c <inflateSetDictionary+0x15c>  // b.plast
    2804:	add	w19, w19, w2
    2808:	str	w19, [x21, #64]
    280c:	b	279c <inflateSetDictionary+0x15c>
    2810:	mov	w0, #0xfffffffe            	// #-2
    2814:	ldp	x23, x24, [sp, #48]
    2818:	b	2690 <inflateSetDictionary+0x50>
    281c:	ldr	x0, [x21, #72]
    2820:	mov	w2, w20
    2824:	sub	x1, x24, x2
    2828:	bl	0 <memcpy>
    282c:	ldr	w0, [x21, #60]
    2830:	stp	w0, w20, [x21, #64]
    2834:	b	279c <inflateSetDictionary+0x15c>
    2838:	mov	w0, #0xfffffffe            	// #-2
    283c:	ret
    2840:	mov	w0, #0xfffffffd            	// #-3
    2844:	ldp	x21, x22, [sp, #32]
    2848:	ldp	x23, x24, [sp, #48]
    284c:	b	2690 <inflateSetDictionary+0x50>

0000000000002850 <inflateGetHeader>:
    2850:	mov	x2, x0
    2854:	cbz	x0, 2898 <inflateGetHeader+0x48>
    2858:	ldr	x0, [x0, #64]
    285c:	cbz	x0, 2898 <inflateGetHeader+0x48>
    2860:	ldr	x0, [x2, #72]
    2864:	cbz	x0, 2898 <inflateGetHeader+0x48>
    2868:	ldr	x3, [x2, #56]
    286c:	cbz	x3, 2898 <inflateGetHeader+0x48>
    2870:	ldr	x4, [x3]
    2874:	mov	w0, #0xfffffffe            	// #-2
    2878:	cmp	x2, x4
    287c:	b.ne	2894 <inflateGetHeader+0x44>  // b.any
    2880:	ldr	w2, [x3, #8]
    2884:	mov	w4, #0xffffc0cc            	// #-16180
    2888:	add	w2, w2, w4
    288c:	cmp	w2, #0x1f
    2890:	b.ls	28a0 <inflateGetHeader+0x50>  // b.plast
    2894:	ret
    2898:	mov	w0, #0xfffffffe            	// #-2
    289c:	ret
    28a0:	ldr	w2, [x3, #16]
    28a4:	tbz	w2, #1, 2894 <inflateGetHeader+0x44>
    28a8:	str	x1, [x3, #48]
    28ac:	mov	w0, #0x0                   	// #0
    28b0:	str	wzr, [x1, #72]
    28b4:	ret

00000000000028b8 <inflateSync>:
    28b8:	cbz	x0, 28ec <inflateSync+0x34>
    28bc:	mov	x6, x0
    28c0:	ldr	x0, [x0, #64]
    28c4:	cbz	x0, 28ec <inflateSync+0x34>
    28c8:	ldr	x0, [x6, #72]
    28cc:	cbz	x0, 28ec <inflateSync+0x34>
    28d0:	ldr	x8, [x6, #56]
    28d4:	cbz	x8, 28ec <inflateSync+0x34>
    28d8:	ldr	x1, [x8]
    28dc:	mov	w0, #0xfffffffe            	// #-2
    28e0:	cmp	x6, x1
    28e4:	b.eq	28f4 <inflateSync+0x3c>  // b.none
    28e8:	ret
    28ec:	mov	w0, #0xfffffffe            	// #-2
    28f0:	ret
    28f4:	ldr	w1, [x8, #8]
    28f8:	mov	w2, #0xffffc0cc            	// #-16180
    28fc:	add	w2, w1, w2
    2900:	cmp	w2, #0x1f
    2904:	b.hi	28e8 <inflateSync+0x30>  // b.pmore
    2908:	stp	x29, x30, [sp, #-32]!
    290c:	mov	x29, sp
    2910:	ldr	w7, [x6, #8]
    2914:	cbnz	w7, 2b04 <inflateSync+0x24c>
    2918:	ldr	w0, [x8, #88]
    291c:	cmp	w0, #0x7
    2920:	b.ls	2b70 <inflateSync+0x2b8>  // b.plast
    2924:	mov	w2, #0x3f53                	// #16211
    2928:	cmp	w1, w2
    292c:	ldr	x5, [x6]
    2930:	b.eq	2b58 <inflateSync+0x2a0>  // b.none
    2934:	ldr	x1, [x8, #80]
    2938:	and	w3, w0, #0x7
    293c:	and	w0, w0, #0xfffffff8
    2940:	str	w2, [x8, #8]
    2944:	str	w0, [x8, #88]
    2948:	lsl	x1, x1, x3
    294c:	str	x1, [x8, #80]
    2950:	strb	w1, [sp, #24]
    2954:	sub	w4, w0, #0x8
    2958:	cmp	w4, #0x7
    295c:	lsr	x2, x1, #8
    2960:	b.ls	2994 <inflateSync+0xdc>  // b.plast
    2964:	strb	w2, [sp, #25]
    2968:	sub	w2, w0, #0x10
    296c:	cmp	w2, #0x7
    2970:	lsr	x2, x1, #16
    2974:	b.ls	2994 <inflateSync+0xdc>  // b.plast
    2978:	strb	w2, [sp, #26]
    297c:	sub	w0, w0, #0x18
    2980:	cmp	w0, #0x7
    2984:	lsr	x2, x1, #24
    2988:	b.ls	2994 <inflateSync+0xdc>  // b.plast
    298c:	strb	w2, [sp, #27]
    2990:	lsr	x2, x1, #32
    2994:	lsr	w4, w4, #3
    2998:	add	x0, sp, #0x18
    299c:	mov	w7, #0x1                   	// #1
    29a0:	add	w4, w4, #0x1
    29a4:	sub	w7, w7, w0
    29a8:	mov	w1, #0x0                   	// #0
    29ac:	mov	w9, #0xff                  	// #255
    29b0:	mov	w10, #0x4                   	// #4
    29b4:	str	x2, [x8, #80]
    29b8:	str	wzr, [x8, #88]
    29bc:	b	29ec <inflateSync+0x134>
    29c0:	sub	w1, w10, w1
    29c4:	mov	w3, #0x1                   	// #1
    29c8:	cmp	w1, #0x3
    29cc:	cbnz	w2, 2af4 <inflateSync+0x23c>
    29d0:	cset	w3, ls  // ls = plast
    29d4:	add	w2, w7, w0
    29d8:	add	x0, x0, #0x1
    29dc:	cmp	w2, w4
    29e0:	cset	w2, cc  // cc = lo, ul, last
    29e4:	tst	w3, w2
    29e8:	b.eq	2a24 <inflateSync+0x16c>  // b.none
    29ec:	cmp	w1, #0x2
    29f0:	ldrb	w2, [x0]
    29f4:	csel	w3, wzr, w9, cc  // cc = lo, ul, last
    29f8:	cmp	w2, w3
    29fc:	b.ne	29c0 <inflateSync+0x108>  // b.any
    2a00:	add	w1, w1, #0x1
    2a04:	add	w2, w7, w0
    2a08:	cmp	w1, #0x3
    2a0c:	add	x0, x0, #0x1
    2a10:	cset	w3, ls  // ls = plast
    2a14:	cmp	w2, w4
    2a18:	cset	w2, cc  // cc = lo, ul, last
    2a1c:	tst	w3, w2
    2a20:	b.ne	29ec <inflateSync+0x134>  // b.any
    2a24:	str	w1, [x8, #140]
    2a28:	ldr	w7, [x6, #8]
    2a2c:	cmp	w7, #0x0
    2a30:	csel	w3, w3, wzr, ne  // ne = any
    2a34:	cbz	w3, 2b78 <inflateSync+0x2c0>
    2a38:	mov	w2, #0x0                   	// #0
    2a3c:	mov	w9, #0xff                  	// #255
    2a40:	mov	w10, #0x4                   	// #4
    2a44:	b	2a6c <inflateSync+0x1b4>
    2a48:	sub	w1, w10, w1
    2a4c:	mov	w4, w3
    2a50:	cmp	w1, #0x3
    2a54:	cbnz	w0, 2afc <inflateSync+0x244>
    2a58:	cset	w4, ls  // ls = plast
    2a5c:	add	w2, w2, #0x1
    2a60:	cmp	w4, #0x0
    2a64:	ccmp	w7, w2, #0x0, ne  // ne = any
    2a68:	b.ls	2a9c <inflateSync+0x1e4>  // b.plast
    2a6c:	cmp	w1, #0x2
    2a70:	ldrb	w0, [x5, w2, uxtw]
    2a74:	csel	w4, wzr, w9, cc  // cc = lo, ul, last
    2a78:	cmp	w4, w0
    2a7c:	b.ne	2a48 <inflateSync+0x190>  // b.any
    2a80:	add	w1, w1, #0x1
    2a84:	add	w2, w2, #0x1
    2a88:	cmp	w1, #0x3
    2a8c:	cset	w4, ls  // ls = plast
    2a90:	cmp	w4, #0x0
    2a94:	ccmp	w7, w2, #0x0, ne  // ne = any
    2a98:	b.hi	2a6c <inflateSync+0x1b4>  // b.pmore
    2a9c:	mov	w7, w2
    2aa0:	add	x5, x5, x7
    2aa4:	str	w1, [x8, #140]
    2aa8:	cmp	w1, #0x4
    2aac:	ldr	x1, [x6, #16]
    2ab0:	str	x5, [x6]
    2ab4:	ldr	w0, [x6, #8]
    2ab8:	add	x7, x7, x1
    2abc:	str	x7, [x6, #16]
    2ac0:	sub	w2, w0, w2
    2ac4:	str	w2, [x6, #8]
    2ac8:	b.ne	2b68 <inflateSync+0x2b0>  // b.any
    2acc:	ldr	x9, [x6, #40]
    2ad0:	mov	x0, x6
    2ad4:	bl	b0 <inflateReset>
    2ad8:	str	x7, [x6, #16]
    2adc:	str	x9, [x6, #40]
    2ae0:	mov	w1, #0x3f3f                	// #16191
    2ae4:	mov	w0, #0x0                   	// #0
    2ae8:	str	w1, [x8, #8]
    2aec:	ldp	x29, x30, [sp], #32
    2af0:	ret
    2af4:	mov	w1, #0x0                   	// #0
    2af8:	b	29d4 <inflateSync+0x11c>
    2afc:	mov	w1, #0x0                   	// #0
    2b00:	b	2a5c <inflateSync+0x1a4>
    2b04:	mov	w0, #0x3f53                	// #16211
    2b08:	cmp	w1, w0
    2b0c:	ldr	x5, [x6]
    2b10:	b.eq	2b48 <inflateSync+0x290>  // b.none
    2b14:	str	w0, [x8, #8]
    2b18:	ldr	w0, [x8, #88]
    2b1c:	ldr	x1, [x8, #80]
    2b20:	and	w2, w0, #0x7
    2b24:	and	w0, w0, #0xfffffff8
    2b28:	str	w0, [x8, #88]
    2b2c:	cmp	w0, #0x7
    2b30:	lsl	x1, x1, x2
    2b34:	str	x1, [x8, #80]
    2b38:	b.hi	2950 <inflateSync+0x98>  // b.pmore
    2b3c:	mov	w3, #0x1                   	// #1
    2b40:	mov	w1, #0x0                   	// #0
    2b44:	b	2a24 <inflateSync+0x16c>
    2b48:	ldr	w1, [x8, #140]
    2b4c:	cmp	w1, #0x3
    2b50:	cset	w3, ls  // ls = plast
    2b54:	b	2a2c <inflateSync+0x174>
    2b58:	ldr	w1, [x8, #140]
    2b5c:	mov	w2, #0x0                   	// #0
    2b60:	mov	x7, #0x0                   	// #0
    2b64:	b	2aa4 <inflateSync+0x1ec>
    2b68:	mov	w0, #0xfffffffd            	// #-3
    2b6c:	b	2aec <inflateSync+0x234>
    2b70:	mov	w0, #0xfffffffb            	// #-5
    2b74:	b	2aec <inflateSync+0x234>
    2b78:	mov	x7, #0x0                   	// #0
    2b7c:	mov	w2, #0x0                   	// #0
    2b80:	b	2aa4 <inflateSync+0x1ec>
    2b84:	nop

0000000000002b88 <inflateSyncPoint>:
    2b88:	mov	x1, x0
    2b8c:	cbz	x0, 2bd0 <inflateSyncPoint+0x48>
    2b90:	ldr	x0, [x0, #64]
    2b94:	cbz	x0, 2bd0 <inflateSyncPoint+0x48>
    2b98:	ldr	x0, [x1, #72]
    2b9c:	cbz	x0, 2bd0 <inflateSyncPoint+0x48>
    2ba0:	ldr	x2, [x1, #56]
    2ba4:	cbz	x2, 2bd0 <inflateSyncPoint+0x48>
    2ba8:	ldr	x3, [x2]
    2bac:	mov	w0, #0xfffffffe            	// #-2
    2bb0:	cmp	x1, x3
    2bb4:	b.ne	2bcc <inflateSyncPoint+0x44>  // b.any
    2bb8:	ldr	w3, [x2, #8]
    2bbc:	mov	w1, #0xffffc0cc            	// #-16180
    2bc0:	add	w1, w3, w1
    2bc4:	cmp	w1, #0x1f
    2bc8:	b.ls	2bd8 <inflateSyncPoint+0x50>  // b.plast
    2bcc:	ret
    2bd0:	mov	w0, #0xfffffffe            	// #-2
    2bd4:	ret
    2bd8:	mov	w1, #0x3f41                	// #16193
    2bdc:	mov	w0, #0x0                   	// #0
    2be0:	cmp	w3, w1
    2be4:	b.ne	2bcc <inflateSyncPoint+0x44>  // b.any
    2be8:	ldr	w0, [x2, #88]
    2bec:	cmp	w0, #0x0
    2bf0:	cset	w0, eq  // eq = none
    2bf4:	ret

0000000000002bf8 <inflateCopy>:
    2bf8:	cbz	x1, 2e20 <inflateCopy+0x228>
    2bfc:	stp	x29, x30, [sp, #-64]!
    2c00:	mov	x29, sp
    2c04:	ldr	x3, [x1, #64]
    2c08:	stp	x19, x20, [sp, #16]
    2c0c:	mov	x19, x1
    2c10:	cbz	x3, 2c4c <inflateCopy+0x54>
    2c14:	mov	x20, x0
    2c18:	ldr	x0, [x1, #72]
    2c1c:	cbz	x0, 2c4c <inflateCopy+0x54>
    2c20:	stp	x21, x22, [sp, #32]
    2c24:	ldr	x21, [x1, #56]
    2c28:	cbz	x21, 2e14 <inflateCopy+0x21c>
    2c2c:	ldr	x1, [x21]
    2c30:	mov	w0, #0xfffffffe            	// #-2
    2c34:	cmp	x19, x1
    2c38:	b.eq	2c5c <inflateCopy+0x64>  // b.none
    2c3c:	ldp	x21, x22, [sp, #32]
    2c40:	ldp	x19, x20, [sp, #16]
    2c44:	ldp	x29, x30, [sp], #64
    2c48:	ret
    2c4c:	mov	w0, #0xfffffffe            	// #-2
    2c50:	ldp	x19, x20, [sp, #16]
    2c54:	ldp	x29, x30, [sp], #64
    2c58:	ret
    2c5c:	ldr	w1, [x21, #8]
    2c60:	cmp	x20, #0x0
    2c64:	str	x23, [sp, #48]
    2c68:	mov	w4, #0xffffc0cc            	// #-16180
    2c6c:	add	w1, w1, w4
    2c70:	ccmp	w1, #0x1f, #0x2, ne  // ne = any
    2c74:	b.ls	2c8c <inflateCopy+0x94>  // b.plast
    2c78:	ldp	x19, x20, [sp, #16]
    2c7c:	ldp	x21, x22, [sp, #32]
    2c80:	ldr	x23, [sp, #48]
    2c84:	ldp	x29, x30, [sp], #64
    2c88:	ret
    2c8c:	ldr	x0, [x19, #80]
    2c90:	mov	w2, #0x1bf8                	// #7160
    2c94:	mov	w1, #0x1                   	// #1
    2c98:	blr	x3
    2c9c:	mov	x22, x0
    2ca0:	cbz	x0, 2e3c <inflateCopy+0x244>
    2ca4:	ldr	x23, [x21, #72]
    2ca8:	cbz	x23, 2d74 <inflateCopy+0x17c>
    2cac:	ldr	x3, [x19, #64]
    2cb0:	mov	w2, #0x1                   	// #1
    2cb4:	ldr	x0, [x19, #80]
    2cb8:	ldr	w1, [x21, #56]
    2cbc:	lsl	w1, w2, w1
    2cc0:	blr	x3
    2cc4:	mov	x23, x0
    2cc8:	cbz	x0, 2e4c <inflateCopy+0x254>
    2ccc:	ldp	x0, x1, [x19]
    2cd0:	stp	x0, x1, [x20]
    2cd4:	mov	x2, #0x1bf8                	// #7160
    2cd8:	ldp	x0, x1, [x19, #16]
    2cdc:	stp	x0, x1, [x20, #16]
    2ce0:	ldp	x4, x5, [x19, #32]
    2ce4:	stp	x4, x5, [x20, #32]
    2ce8:	mov	x1, x21
    2cec:	ldp	x4, x5, [x19, #48]
    2cf0:	stp	x4, x5, [x20, #48]
    2cf4:	mov	x0, x22
    2cf8:	ldp	x4, x5, [x19, #64]
    2cfc:	stp	x4, x5, [x20, #64]
    2d00:	ldp	x4, x5, [x19, #80]
    2d04:	stp	x4, x5, [x20, #80]
    2d08:	ldp	x4, x5, [x19, #96]
    2d0c:	stp	x4, x5, [x20, #96]
    2d10:	bl	0 <memcpy>
    2d14:	ldr	x2, [x21, #104]
    2d18:	str	x20, [x22]
    2d1c:	add	x0, x21, #0x558
    2d20:	add	x1, x22, #0x558
    2d24:	cmp	x0, x2
    2d28:	b.ls	2dd0 <inflateCopy+0x1d8>  // b.plast
    2d2c:	ldr	x2, [x21, #144]
    2d30:	sub	x0, x2, x0
    2d34:	add	x1, x1, x0
    2d38:	str	x1, [x22, #144]
    2d3c:	ldr	x1, [x21, #72]
    2d40:	mov	w3, #0x1                   	// #1
    2d44:	ldr	w2, [x21, #56]
    2d48:	mov	x0, x23
    2d4c:	lsl	w2, w3, w2
    2d50:	bl	0 <memcpy>
    2d54:	str	x23, [x22, #72]
    2d58:	mov	w0, #0x0                   	// #0
    2d5c:	ldr	x23, [sp, #48]
    2d60:	str	x22, [x20, #56]
    2d64:	ldp	x19, x20, [sp, #16]
    2d68:	ldp	x21, x22, [sp, #32]
    2d6c:	ldp	x29, x30, [sp], #64
    2d70:	ret
    2d74:	ldp	x2, x3, [x19]
    2d78:	stp	x2, x3, [x20]
    2d7c:	mov	x1, x21
    2d80:	ldp	x4, x5, [x19, #16]
    2d84:	stp	x4, x5, [x20, #16]
    2d88:	mov	x2, #0x1bf8                	// #7160
    2d8c:	ldp	x4, x5, [x19, #32]
    2d90:	stp	x4, x5, [x20, #32]
    2d94:	ldp	x4, x5, [x19, #48]
    2d98:	stp	x4, x5, [x20, #48]
    2d9c:	ldp	x4, x5, [x19, #64]
    2da0:	stp	x4, x5, [x20, #64]
    2da4:	ldp	x4, x5, [x19, #80]
    2da8:	stp	x4, x5, [x20, #80]
    2dac:	ldp	x4, x5, [x19, #96]
    2db0:	stp	x4, x5, [x20, #96]
    2db4:	bl	0 <memcpy>
    2db8:	ldr	x2, [x21, #104]
    2dbc:	str	x20, [x22]
    2dc0:	add	x0, x21, #0x558
    2dc4:	add	x1, x22, #0x558
    2dc8:	cmp	x2, x0
    2dcc:	b.cc	2e28 <inflateCopy+0x230>  // b.lo, b.ul, b.last
    2dd0:	mov	x3, #0x1be4                	// #7140
    2dd4:	add	x3, x21, x3
    2dd8:	cmp	x2, x3
    2ddc:	b.hi	2dfc <inflateCopy+0x204>  // b.pmore
    2de0:	ldr	x3, [x21, #112]
    2de4:	sub	x2, x2, x0
    2de8:	add	x2, x1, x2
    2dec:	str	x2, [x22, #104]
    2df0:	sub	x2, x3, x0
    2df4:	add	x2, x1, x2
    2df8:	str	x2, [x22, #112]
    2dfc:	ldr	x2, [x21, #144]
    2e00:	sub	x0, x2, x0
    2e04:	add	x1, x1, x0
    2e08:	str	x1, [x22, #144]
    2e0c:	cbz	x23, 2d54 <inflateCopy+0x15c>
    2e10:	b	2d3c <inflateCopy+0x144>
    2e14:	mov	w0, #0xfffffffe            	// #-2
    2e18:	ldp	x21, x22, [sp, #32]
    2e1c:	b	2c40 <inflateCopy+0x48>
    2e20:	mov	w0, #0xfffffffe            	// #-2
    2e24:	ret
    2e28:	ldr	x2, [x21, #144]
    2e2c:	sub	x0, x2, x0
    2e30:	add	x1, x1, x0
    2e34:	str	x1, [x22, #144]
    2e38:	b	2d54 <inflateCopy+0x15c>
    2e3c:	mov	w0, #0xfffffffc            	// #-4
    2e40:	ldp	x21, x22, [sp, #32]
    2e44:	ldr	x23, [sp, #48]
    2e48:	b	2c40 <inflateCopy+0x48>
    2e4c:	ldp	x2, x0, [x19, #72]
    2e50:	mov	x1, x22
    2e54:	blr	x2
    2e58:	mov	w0, #0xfffffffc            	// #-4
    2e5c:	ldp	x21, x22, [sp, #32]
    2e60:	ldr	x23, [sp, #48]
    2e64:	b	2c40 <inflateCopy+0x48>

0000000000002e68 <inflateUndermine>:
    2e68:	mov	x1, x0
    2e6c:	cbz	x0, 2eb0 <inflateUndermine+0x48>
    2e70:	ldr	x0, [x0, #64]
    2e74:	cbz	x0, 2eb0 <inflateUndermine+0x48>
    2e78:	ldr	x0, [x1, #72]
    2e7c:	cbz	x0, 2eb0 <inflateUndermine+0x48>
    2e80:	ldr	x2, [x1, #56]
    2e84:	cbz	x2, 2eb0 <inflateUndermine+0x48>
    2e88:	ldr	x3, [x2]
    2e8c:	mov	w0, #0xfffffffe            	// #-2
    2e90:	cmp	x1, x3
    2e94:	b.ne	2eac <inflateUndermine+0x44>  // b.any
    2e98:	ldr	w1, [x2, #8]
    2e9c:	mov	w3, #0xffffc0cc            	// #-16180
    2ea0:	add	w1, w1, w3
    2ea4:	cmp	w1, #0x1f
    2ea8:	b.ls	2eb8 <inflateUndermine+0x50>  // b.plast
    2eac:	ret
    2eb0:	mov	w0, #0xfffffffe            	// #-2
    2eb4:	ret
    2eb8:	mov	w1, #0x1                   	// #1
    2ebc:	mov	w0, #0xfffffffd            	// #-3
    2ec0:	str	w1, [x2, #7144]
    2ec4:	ret

0000000000002ec8 <inflateValidate>:
    2ec8:	mov	x2, x0
    2ecc:	cbz	x0, 2f10 <inflateValidate+0x48>
    2ed0:	ldr	x0, [x0, #64]
    2ed4:	cbz	x0, 2f10 <inflateValidate+0x48>
    2ed8:	ldr	x0, [x2, #72]
    2edc:	cbz	x0, 2f10 <inflateValidate+0x48>
    2ee0:	ldr	x3, [x2, #56]
    2ee4:	cbz	x3, 2f10 <inflateValidate+0x48>
    2ee8:	ldr	x4, [x3]
    2eec:	mov	w0, #0xfffffffe            	// #-2
    2ef0:	cmp	x2, x4
    2ef4:	b.ne	2f0c <inflateValidate+0x44>  // b.any
    2ef8:	ldr	w2, [x3, #8]
    2efc:	mov	w4, #0xffffc0cc            	// #-16180
    2f00:	add	w2, w2, w4
    2f04:	cmp	w2, #0x1f
    2f08:	b.ls	2f18 <inflateValidate+0x50>  // b.plast
    2f0c:	ret
    2f10:	mov	w0, #0xfffffffe            	// #-2
    2f14:	ret
    2f18:	ldr	w0, [x3, #16]
    2f1c:	cbz	w1, 2f30 <inflateValidate+0x68>
    2f20:	orr	w1, w0, #0x4
    2f24:	mov	w0, #0x0                   	// #0
    2f28:	str	w1, [x3, #16]
    2f2c:	ret
    2f30:	and	w1, w0, #0xfffffffb
    2f34:	mov	w0, #0x0                   	// #0
    2f38:	str	w1, [x3, #16]
    2f3c:	ret

0000000000002f40 <inflateMark>:
    2f40:	mov	x1, x0
    2f44:	cbz	x0, 2f88 <inflateMark+0x48>
    2f48:	ldr	x0, [x0, #64]
    2f4c:	cbz	x0, 2f88 <inflateMark+0x48>
    2f50:	ldr	x0, [x1, #72]
    2f54:	cbz	x0, 2f88 <inflateMark+0x48>
    2f58:	ldr	x2, [x1, #56]
    2f5c:	cbz	x2, 2f88 <inflateMark+0x48>
    2f60:	ldr	x3, [x2]
    2f64:	mov	x0, #0xffffffffffff0000    	// #-65536
    2f68:	cmp	x1, x3
    2f6c:	b.ne	2f84 <inflateMark+0x44>  // b.any
    2f70:	ldr	w1, [x2, #8]
    2f74:	mov	w3, #0xffffc0cc            	// #-16180
    2f78:	add	w3, w1, w3
    2f7c:	cmp	w3, #0x1f
    2f80:	b.ls	2f90 <inflateMark+0x50>  // b.plast
    2f84:	ret
    2f88:	mov	x0, #0xffffffffffff0000    	// #-65536
    2f8c:	ret
    2f90:	ldrsw	x0, [x2, #7148]
    2f94:	mov	w3, #0x3f43                	// #16195
    2f98:	cmp	w1, w3
    2f9c:	lsl	x0, x0, #16
    2fa0:	b.eq	2fc4 <inflateMark+0x84>  // b.none
    2fa4:	mov	w3, #0x3f4c                	// #16204
    2fa8:	cmp	w1, w3
    2fac:	b.ne	2f84 <inflateMark+0x44>  // b.any
    2fb0:	ldr	w3, [x2, #92]
    2fb4:	ldr	w1, [x2, #7152]
    2fb8:	sub	w1, w1, w3
    2fbc:	add	x0, x0, x1
    2fc0:	ret
    2fc4:	ldr	w1, [x2, #92]
    2fc8:	add	x0, x0, x1
    2fcc:	ret

0000000000002fd0 <inflateCodesUsed>:
    2fd0:	mov	x1, x0
    2fd4:	cbz	x0, 3018 <inflateCodesUsed+0x48>
    2fd8:	ldr	x0, [x0, #64]
    2fdc:	cbz	x0, 3018 <inflateCodesUsed+0x48>
    2fe0:	ldr	x0, [x1, #72]
    2fe4:	cbz	x0, 3018 <inflateCodesUsed+0x48>
    2fe8:	ldr	x2, [x1, #56]
    2fec:	cbz	x2, 3018 <inflateCodesUsed+0x48>
    2ff0:	ldr	x3, [x2]
    2ff4:	mov	x0, #0xffffffffffffffff    	// #-1
    2ff8:	cmp	x1, x3
    2ffc:	b.ne	3014 <inflateCodesUsed+0x44>  // b.any
    3000:	ldr	w1, [x2, #8]
    3004:	mov	w3, #0xffffc0cc            	// #-16180
    3008:	add	w1, w1, w3
    300c:	cmp	w1, #0x1f
    3010:	b.ls	3020 <inflateCodesUsed+0x50>  // b.plast
    3014:	ret
    3018:	mov	x0, #0xffffffffffffffff    	// #-1
    301c:	ret
    3020:	ldr	x0, [x2, #144]
    3024:	add	x2, x2, #0x558
    3028:	sub	x0, x0, x2
    302c:	asr	x0, x0, #2
    3030:	ret

inftrees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <inflate_table>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	w8, w0
   8:	mov	x29, sp
   c:	stp	x19, x20, [sp, #16]
  10:	stp	xzr, xzr, [sp, #112]
  14:	stp	xzr, xzr, [sp, #128]
  18:	cbz	w2, 4c <inflate_table+0x4c>
  1c:	sub	w6, w2, #0x1
  20:	add	x9, x1, #0x2
  24:	mov	x0, x1
  28:	add	x14, sp, #0x70
  2c:	add	x9, x9, w6, uxtw #1
  30:	ldrh	w6, [x0], #2
  34:	cmp	x0, x9
  38:	lsl	x6, x6, #1
  3c:	ldrh	w7, [x14, x6]
  40:	add	w7, w7, #0x1
  44:	strh	w7, [x14, x6]
  48:	b.ne	30 <inflate_table+0x30>  // b.any
  4c:	ldrh	w10, [sp, #142]
  50:	cbnz	w10, f4 <inflate_table+0xf4>
  54:	ldrh	w0, [sp, #140]
  58:	cbnz	w0, 864 <inflate_table+0x864>
  5c:	ldrh	w0, [sp, #138]
  60:	cbnz	w0, 89c <inflate_table+0x89c>
  64:	ldrh	w0, [sp, #136]
  68:	cbnz	w0, 8ac <inflate_table+0x8ac>
  6c:	ldrh	w0, [sp, #134]
  70:	cbnz	w0, 8bc <inflate_table+0x8bc>
  74:	ldrh	w0, [sp, #132]
  78:	cbnz	w0, 8cc <inflate_table+0x8cc>
  7c:	ldrh	w0, [sp, #130]
  80:	cbnz	w0, 8dc <inflate_table+0x8dc>
  84:	ldrh	w0, [sp, #128]
  88:	cbnz	w0, 964 <inflate_table+0x964>
  8c:	ldrh	w0, [sp, #126]
  90:	cbnz	w0, a24 <inflate_table+0xa24>
  94:	ldrh	w0, [sp, #124]
  98:	cbnz	w0, a14 <inflate_table+0xa14>
  9c:	ldrh	w0, [sp, #122]
  a0:	cbnz	w0, a44 <inflate_table+0xa44>
  a4:	ldrh	w0, [sp, #120]
  a8:	cbnz	w0, 908 <inflate_table+0x908>
  ac:	ldrh	w0, [sp, #118]
  b0:	cbnz	w0, 86c <inflate_table+0x86c>
  b4:	ldrh	w7, [sp, #116]
  b8:	ldrh	w9, [sp, #114]
  bc:	cbnz	w7, 930 <inflate_table+0x930>
  c0:	cbnz	w9, 954 <inflate_table+0x954>
  c4:	ldr	x2, [x3]
  c8:	mov	w5, #0x140                 	// #320
  cc:	mov	w6, #0x1                   	// #1
  d0:	mov	w0, #0x0                   	// #0
  d4:	mov	x1, x2
  d8:	str	w5, [x1], #8
  dc:	str	x1, [x3]
  e0:	str	w5, [x2, #4]
  e4:	str	w6, [x4]
  e8:	ldp	x19, x20, [sp, #16]
  ec:	ldp	x29, x30, [sp], #176
  f0:	ret
  f4:	mov	w15, #0xf                   	// #15
  f8:	ldrh	w9, [sp, #114]
  fc:	cbnz	w9, 9d0 <inflate_table+0x9d0>
 100:	ldrh	w7, [sp, #116]
 104:	cbnz	w7, 9ec <inflate_table+0x9ec>
 108:	ldrh	w0, [sp, #118]
 10c:	cbnz	w0, 95c <inflate_table+0x95c>
 110:	cmp	w15, #0x4
 114:	b.eq	1c0 <inflate_table+0x1c0>  // b.none
 118:	ldrh	w0, [sp, #120]
 11c:	cbnz	w0, 984 <inflate_table+0x984>
 120:	cmp	w15, #0x5
 124:	b.eq	1c0 <inflate_table+0x1c0>  // b.none
 128:	ldrh	w0, [sp, #122]
 12c:	cbnz	w0, 97c <inflate_table+0x97c>
 130:	cmp	w15, #0x6
 134:	b.eq	1c0 <inflate_table+0x1c0>  // b.none
 138:	ldrh	w0, [sp, #124]
 13c:	cbnz	w0, 974 <inflate_table+0x974>
 140:	cmp	w15, #0x7
 144:	b.eq	1c0 <inflate_table+0x1c0>  // b.none
 148:	ldrh	w0, [sp, #126]
 14c:	cbnz	w0, 98c <inflate_table+0x98c>
 150:	cmp	w15, #0x8
 154:	b.eq	1c0 <inflate_table+0x1c0>  // b.none
 158:	ldrh	w0, [sp, #128]
 15c:	cbnz	w0, 99c <inflate_table+0x99c>
 160:	cmp	w15, #0x9
 164:	b.eq	1c0 <inflate_table+0x1c0>  // b.none
 168:	ldrh	w0, [sp, #130]
 16c:	cbnz	w0, 994 <inflate_table+0x994>
 170:	cmp	w15, #0xa
 174:	b.eq	1c0 <inflate_table+0x1c0>  // b.none
 178:	ldrh	w0, [sp, #132]
 17c:	cbnz	w0, 9ac <inflate_table+0x9ac>
 180:	cmp	w15, #0xb
 184:	b.eq	1c0 <inflate_table+0x1c0>  // b.none
 188:	ldrh	w0, [sp, #134]
 18c:	cbnz	w0, 9a4 <inflate_table+0x9a4>
 190:	cmp	w15, #0xc
 194:	b.eq	1c0 <inflate_table+0x1c0>  // b.none
 198:	ldrh	w0, [sp, #136]
 19c:	cbnz	w0, 9c8 <inflate_table+0x9c8>
 1a0:	cmp	w15, #0xd
 1a4:	b.eq	1c0 <inflate_table+0x1c0>  // b.none
 1a8:	ldrh	w0, [sp, #138]
 1ac:	cbnz	w0, 9c0 <inflate_table+0x9c0>
 1b0:	cmp	w15, #0xf
 1b4:	b.ne	9b4 <inflate_table+0x9b4>  // b.any
 1b8:	ldrh	w0, [sp, #140]
 1bc:	cbnz	w0, 888 <inflate_table+0x888>
 1c0:	mov	w19, w15
 1c4:	mov	w6, #0x2                   	// #2
 1c8:	lsl	w6, w6, #1
 1cc:	subs	w6, w6, w7
 1d0:	b.mi	3f4 <inflate_table+0x3f4>  // b.first
 1d4:	ldrh	w11, [sp, #118]
 1d8:	lsl	w6, w6, #1
 1dc:	subs	w6, w6, w11
 1e0:	b.mi	3f4 <inflate_table+0x3f4>  // b.first
 1e4:	ldrh	w12, [sp, #120]
 1e8:	lsl	w6, w6, #1
 1ec:	subs	w6, w6, w12
 1f0:	b.mi	3f4 <inflate_table+0x3f4>  // b.first
 1f4:	ldrh	w13, [sp, #122]
 1f8:	lsl	w6, w6, #1
 1fc:	subs	w6, w6, w13
 200:	b.mi	3f4 <inflate_table+0x3f4>  // b.first
 204:	ldrh	w14, [sp, #124]
 208:	lsl	w6, w6, #1
 20c:	subs	w6, w6, w14
 210:	b.mi	3f4 <inflate_table+0x3f4>  // b.first
 214:	ldrh	w16, [sp, #126]
 218:	lsl	w6, w6, #1
 21c:	subs	w6, w6, w16
 220:	b.mi	3f4 <inflate_table+0x3f4>  // b.first
 224:	ldrh	w17, [sp, #128]
 228:	lsl	w6, w6, #1
 22c:	subs	w6, w6, w17
 230:	b.mi	3f4 <inflate_table+0x3f4>  // b.first
 234:	ldrh	w18, [sp, #130]
 238:	lsl	w6, w6, #1
 23c:	subs	w6, w6, w18
 240:	b.mi	3f4 <inflate_table+0x3f4>  // b.first
 244:	ldrh	w20, [sp, #132]
 248:	lsl	w6, w6, #1
 24c:	subs	w0, w6, w20
 250:	b.mi	3f4 <inflate_table+0x3f4>  // b.first
 254:	ldrh	w6, [sp, #134]
 258:	lsl	w0, w0, #1
 25c:	subs	w0, w0, w6
 260:	b.mi	3f4 <inflate_table+0x3f4>  // b.first
 264:	stp	x21, x22, [sp, #32]
 268:	lsl	w0, w0, #1
 26c:	ldrh	w21, [sp, #136]
 270:	subs	w0, w0, w21
 274:	b.mi	8ec <inflate_table+0x8ec>  // b.first
 278:	ldrh	w22, [sp, #138]
 27c:	lsl	w0, w0, #1
 280:	subs	w0, w0, w22
 284:	b.mi	8ec <inflate_table+0x8ec>  // b.first
 288:	stp	x23, x24, [sp, #48]
 28c:	lsl	w0, w0, #1
 290:	ldrh	w23, [sp, #140]
 294:	subs	w0, w0, w23
 298:	b.mi	8f8 <inflate_table+0x8f8>  // b.first
 29c:	lsl	w0, w0, #1
 2a0:	subs	w10, w0, w10
 2a4:	b.mi	8f8 <inflate_table+0x8f8>  // b.first
 2a8:	b.eq	2bc <inflate_table+0x2bc>  // b.none
 2ac:	cmp	w8, #0x0
 2b0:	mov	w0, #0xffffffff            	// #-1
 2b4:	ccmp	w19, #0x1, #0x0, ne  // ne = any
 2b8:	b.ne	80c <inflate_table+0x80c>  // b.any
 2bc:	add	w7, w9, w7
 2c0:	stp	x27, x28, [sp, #80]
 2c4:	and	w7, w7, #0xffff
 2c8:	add	w0, w7, w11
 2cc:	strh	wzr, [sp, #146]
 2d0:	and	w0, w0, #0xffff
 2d4:	strh	w0, [sp, #152]
 2d8:	add	w0, w0, w12
 2dc:	strh	w9, [sp, #148]
 2e0:	and	w0, w0, #0xffff
 2e4:	strh	w0, [sp, #154]
 2e8:	add	w0, w0, w13
 2ec:	strh	w7, [sp, #150]
 2f0:	and	w0, w0, #0xffff
 2f4:	strh	w0, [sp, #156]
 2f8:	add	w0, w0, w14
 2fc:	ldr	w10, [x4]
 300:	and	w0, w0, #0xffff
 304:	strh	w0, [sp, #158]
 308:	add	w0, w0, w16
 30c:	add	x9, sp, #0x90
 310:	and	w0, w0, #0xffff
 314:	strh	w0, [sp, #160]
 318:	add	w0, w0, w17
 31c:	mov	x7, #0x0                   	// #0
 320:	and	w0, w0, #0xffff
 324:	strh	w0, [sp, #162]
 328:	add	w0, w0, w18
 32c:	and	w0, w0, #0xffff
 330:	strh	w0, [sp, #164]
 334:	add	w0, w0, w20
 338:	and	w0, w0, #0xffff
 33c:	strh	w0, [sp, #166]
 340:	add	w0, w0, w6
 344:	and	w0, w0, #0xffff
 348:	strh	w0, [sp, #168]
 34c:	add	w0, w0, w21
 350:	and	w0, w0, #0xffff
 354:	strh	w0, [sp, #170]
 358:	add	w0, w0, w22
 35c:	and	w0, w0, #0xffff
 360:	strh	w0, [sp, #172]
 364:	add	w0, w0, w23
 368:	strh	w0, [sp, #174]
 36c:	cbz	w2, 39c <inflate_table+0x39c>
 370:	ldrh	w0, [x1, x7, lsl #1]
 374:	sbfiz	x6, x0, #1, #32
 378:	cbz	w0, 390 <inflate_table+0x390>
 37c:	ldrh	w0, [x9, x6]
 380:	add	w11, w0, #0x1
 384:	strh	w11, [x9, x6]
 388:	ubfiz	x0, x0, #1, #16
 38c:	strh	w7, [x5, x0]
 390:	add	x7, x7, #0x1
 394:	cmp	w2, w7
 398:	b.hi	370 <inflate_table+0x370>  // b.pmore
 39c:	cmp	w19, w10
 3a0:	mov	w0, #0x1                   	// #1
 3a4:	csel	w10, w19, w10, ls  // ls = plast
 3a8:	cmp	w10, w15
 3ac:	csel	w21, w10, w15, cs  // cs = hs, nlast
 3b0:	lsl	w23, w0, w21
 3b4:	cbz	w8, 430 <inflate_table+0x430>
 3b8:	cmp	w8, w0
 3bc:	b.eq	404 <inflate_table+0x404>  // b.none
 3c0:	cmp	w8, #0x2
 3c4:	cset	w0, eq  // eq = none
 3c8:	cmp	w23, #0x250
 3cc:	mov	w2, w0
 3d0:	ccmp	w0, #0x0, #0x4, hi  // hi = pmore
 3d4:	b.eq	918 <inflate_table+0x918>  // b.none
 3d8:	mov	w0, #0x1                   	// #1
 3dc:	ldp	x19, x20, [sp, #16]
 3e0:	ldp	x21, x22, [sp, #32]
 3e4:	ldp	x23, x24, [sp, #48]
 3e8:	ldp	x27, x28, [sp, #80]
 3ec:	ldp	x29, x30, [sp], #176
 3f0:	ret
 3f4:	mov	w0, #0xffffffff            	// #-1
 3f8:	ldp	x19, x20, [sp, #16]
 3fc:	ldp	x29, x30, [sp], #176
 400:	ret
 404:	cmp	w23, #0x354
 408:	b.hi	3d8 <inflate_table+0x3d8>  // b.pmore
 40c:	adrp	x27, 0 <inflate_table>
 410:	add	x27, x27, #0x0
 414:	add	x28, x27, #0x80
 418:	mov	w0, w8
 41c:	add	x27, x27, #0xc0
 420:	mov	w22, #0x101                 	// #257
 424:	mov	w2, #0x0                   	// #0
 428:	stp	x25, x26, [sp, #64]
 42c:	b	44c <inflate_table+0x44c>
 430:	mov	x28, x5
 434:	mov	x27, x5
 438:	mov	w22, #0x14                  	// #20
 43c:	mov	w2, #0x0                   	// #0
 440:	stp	x25, x26, [sp, #64]
 444:	cmp	w8, #0x1
 448:	cset	w0, eq  // eq = none
 44c:	ldr	x25, [x3]
 450:	sub	w26, w23, #0x1
 454:	mov	w16, w21
 458:	add	x14, sp, #0x70
 45c:	mov	w13, w0
 460:	mov	w20, w2
 464:	mov	x7, x25
 468:	stp	x3, x4, [sp, #96]
 46c:	mov	w4, w15
 470:	mov	w24, #0xffffffff            	// #-1
 474:	mov	w8, #0x0                   	// #0
 478:	mov	w17, #0x0                   	// #0
 47c:	mov	w18, #0x0                   	// #0
 480:	mov	w30, #0x1                   	// #1
 484:	nop
 488:	ldrh	w6, [x5, w18, uxtw #1]
 48c:	and	w12, w4, #0xff
 490:	mov	w10, #0x0                   	// #0
 494:	add	w0, w6, #0x1
 498:	cmp	w0, w22
 49c:	b.cc	4b8 <inflate_table+0x4b8>  // b.lo, b.ul, b.last
 4a0:	cmp	w6, w22
 4a4:	b.cc	800 <inflate_table+0x800>  // b.lo, b.ul, b.last
 4a8:	sub	w0, w6, w22
 4ac:	lsl	x0, x0, #1
 4b0:	ldrb	w10, [x28, x0]
 4b4:	ldrh	w6, [x27, x0]
 4b8:	lsl	w11, w30, w16
 4bc:	mov	w2, w11
 4c0:	lsl	w4, w30, w4
 4c4:	lsr	w9, w8, w17
 4c8:	sub	w2, w2, w4
 4cc:	add	w0, w9, w2
 4d0:	lsl	x0, x0, #2
 4d4:	add	x3, x7, x0
 4d8:	strb	w10, [x7, x0]
 4dc:	strb	w12, [x3, #1]
 4e0:	strh	w6, [x3, #2]
 4e4:	cbnz	w2, 4c8 <inflate_table+0x4c8>
 4e8:	sub	w0, w15, #0x1
 4ec:	lsl	w0, w30, w0
 4f0:	tst	w8, w0
 4f4:	b.eq	504 <inflate_table+0x504>  // b.none
 4f8:	lsr	w0, w0, #1
 4fc:	tst	w8, w0
 500:	b.ne	4f8 <inflate_table+0x4f8>  // b.any
 504:	ubfiz	x3, x15, #1, #32
 508:	sub	w2, w0, #0x1
 50c:	and	w8, w2, w8
 510:	cmp	w0, #0x0
 514:	add	w8, w0, w8
 518:	add	w18, w18, #0x1
 51c:	ldrh	w2, [x14, x3]
 520:	csel	w0, w8, w0, ne  // ne = any
 524:	sub	w2, w2, #0x1
 528:	and	w2, w2, #0xffff
 52c:	strh	w2, [x14, x3]
 530:	cbnz	w2, 544 <inflate_table+0x544>
 534:	cmp	w19, w15
 538:	b.eq	818 <inflate_table+0x818>  // b.none
 53c:	ldrh	w2, [x5, w18, uxtw #1]
 540:	ldrh	w15, [x1, x2, lsl #1]
 544:	sub	w4, w15, w17
 548:	cmp	w15, w21
 54c:	b.ls	560 <inflate_table+0x560>  // b.plast
 550:	and	w3, w26, w0
 554:	sub	w4, w15, w17
 558:	cmp	w3, w24
 55c:	b.ne	568 <inflate_table+0x568>  // b.any
 560:	mov	w8, w0
 564:	b	488 <inflate_table+0x488>
 568:	cmp	w17, #0x0
 56c:	add	x7, x7, w11, uxtw #2
 570:	csel	w17, w17, w21, ne  // ne = any
 574:	cmp	w19, w15
 578:	sub	w4, w15, w17
 57c:	mov	w16, w4
 580:	lsl	w2, w30, w4
 584:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 588:	ldrh	w6, [x14, w15, uxtw #1]
 58c:	sub	w2, w2, w6
 590:	cmp	w2, #0x0
 594:	b.le	7b8 <inflate_table+0x7b8>
 598:	add	w16, w4, #0x1
 59c:	lsl	w2, w2, #1
 5a0:	add	w6, w17, w16
 5a4:	cmp	w19, w6
 5a8:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 5ac:	ldrh	w6, [x14, w6, uxtw #1]
 5b0:	sub	w2, w2, w6
 5b4:	cmp	w2, #0x0
 5b8:	b.le	7b8 <inflate_table+0x7b8>
 5bc:	add	w16, w4, #0x2
 5c0:	lsl	w2, w2, #1
 5c4:	add	w6, w17, w16
 5c8:	cmp	w19, w6
 5cc:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 5d0:	ldrh	w6, [x14, w6, uxtw #1]
 5d4:	sub	w2, w2, w6
 5d8:	cmp	w2, #0x0
 5dc:	b.le	7b8 <inflate_table+0x7b8>
 5e0:	add	w16, w4, #0x3
 5e4:	lsl	w2, w2, #1
 5e8:	add	w6, w17, w16
 5ec:	cmp	w19, w6
 5f0:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 5f4:	ldrh	w6, [x14, w6, uxtw #1]
 5f8:	sub	w2, w2, w6
 5fc:	cmp	w2, #0x0
 600:	b.le	7b8 <inflate_table+0x7b8>
 604:	add	w16, w4, #0x4
 608:	lsl	w2, w2, #1
 60c:	add	w6, w17, w16
 610:	cmp	w19, w6
 614:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 618:	ldrh	w6, [x14, w6, uxtw #1]
 61c:	sub	w2, w2, w6
 620:	cmp	w2, #0x0
 624:	b.le	7b8 <inflate_table+0x7b8>
 628:	add	w16, w4, #0x5
 62c:	lsl	w2, w2, #1
 630:	add	w6, w17, w16
 634:	cmp	w19, w6
 638:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 63c:	ldrh	w6, [x14, w6, uxtw #1]
 640:	sub	w2, w2, w6
 644:	cmp	w2, #0x0
 648:	b.le	7b8 <inflate_table+0x7b8>
 64c:	add	w16, w4, #0x6
 650:	lsl	w2, w2, #1
 654:	add	w6, w17, w16
 658:	cmp	w19, w6
 65c:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 660:	ldrh	w6, [x14, w6, uxtw #1]
 664:	sub	w2, w2, w6
 668:	cmp	w2, #0x0
 66c:	b.le	7b8 <inflate_table+0x7b8>
 670:	add	w16, w4, #0x7
 674:	lsl	w2, w2, #1
 678:	add	w6, w17, w16
 67c:	cmp	w19, w6
 680:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 684:	ldrh	w6, [x14, w6, uxtw #1]
 688:	sub	w2, w2, w6
 68c:	cmp	w2, #0x0
 690:	b.le	7b8 <inflate_table+0x7b8>
 694:	add	w16, w4, #0x8
 698:	lsl	w2, w2, #1
 69c:	add	w6, w17, w16
 6a0:	cmp	w19, w6
 6a4:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 6a8:	ldrh	w6, [x14, w6, uxtw #1]
 6ac:	sub	w2, w2, w6
 6b0:	cmp	w2, #0x0
 6b4:	b.le	7b8 <inflate_table+0x7b8>
 6b8:	add	w16, w4, #0x9
 6bc:	lsl	w2, w2, #1
 6c0:	add	w6, w17, w16
 6c4:	cmp	w19, w6
 6c8:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 6cc:	ldrh	w6, [x14, w6, uxtw #1]
 6d0:	sub	w2, w2, w6
 6d4:	cmp	w2, #0x0
 6d8:	b.le	7b8 <inflate_table+0x7b8>
 6dc:	add	w16, w4, #0xa
 6e0:	lsl	w2, w2, #1
 6e4:	add	w6, w17, w16
 6e8:	cmp	w19, w6
 6ec:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 6f0:	ldrh	w6, [x14, w6, uxtw #1]
 6f4:	sub	w2, w2, w6
 6f8:	cmp	w2, #0x0
 6fc:	b.le	7b8 <inflate_table+0x7b8>
 700:	add	w16, w4, #0xb
 704:	lsl	w2, w2, #1
 708:	add	w6, w17, w16
 70c:	cmp	w19, w6
 710:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 714:	ldrh	w6, [x14, w6, uxtw #1]
 718:	sub	w2, w2, w6
 71c:	cmp	w2, #0x0
 720:	b.le	7b8 <inflate_table+0x7b8>
 724:	add	w16, w4, #0xc
 728:	lsl	w2, w2, #1
 72c:	add	w6, w17, w16
 730:	cmp	w19, w6
 734:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 738:	ldrh	w6, [x14, w6, uxtw #1]
 73c:	sub	w2, w2, w6
 740:	cmp	w2, #0x0
 744:	b.le	7b8 <inflate_table+0x7b8>
 748:	add	w16, w4, #0xd
 74c:	lsl	w2, w2, #1
 750:	add	w6, w17, w16
 754:	cmp	w19, w6
 758:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 75c:	ldrh	w6, [x14, w6, uxtw #1]
 760:	sub	w2, w2, w6
 764:	cmp	w2, #0x0
 768:	b.le	7b8 <inflate_table+0x7b8>
 76c:	add	w16, w4, #0xe
 770:	lsl	w2, w2, #1
 774:	add	w6, w17, w16
 778:	cmp	w19, w6
 77c:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 780:	ldrh	w6, [x14, w6, uxtw #1]
 784:	sub	w2, w2, w6
 788:	cmp	w2, #0x0
 78c:	b.le	7b8 <inflate_table+0x7b8>
 790:	add	w16, w4, #0xf
 794:	lsl	w2, w2, #1
 798:	add	w6, w17, w16
 79c:	cmp	w19, w6
 7a0:	b.ls	7b8 <inflate_table+0x7b8>  // b.plast
 7a4:	ldrh	w8, [x14, w6, uxtw #1]
 7a8:	add	w6, w4, #0x10
 7ac:	sub	w2, w2, w8
 7b0:	cmp	w2, #0x0
 7b4:	csel	w16, w6, w16, gt
 7b8:	lsl	w2, w30, w16
 7bc:	add	w23, w23, w2
 7c0:	cmp	w23, #0x354
 7c4:	ccmp	w13, #0x0, #0x4, hi  // hi = pmore
 7c8:	b.ne	85c <inflate_table+0x85c>  // b.any
 7cc:	cmp	w23, #0x250
 7d0:	ccmp	w20, #0x0, #0x4, hi  // hi = pmore
 7d4:	b.ne	85c <inflate_table+0x85c>  // b.any
 7d8:	ubfiz	x8, x3, #2, #32
 7dc:	sub	x2, x7, x25
 7e0:	add	x6, x25, x8
 7e4:	mov	w24, w3
 7e8:	asr	x2, x2, #2
 7ec:	strb	w16, [x25, x8]
 7f0:	mov	w8, w0
 7f4:	strb	w21, [x6, #1]
 7f8:	strh	w2, [x6, #2]
 7fc:	b	488 <inflate_table+0x488>
 800:	mov	w6, #0x0                   	// #0
 804:	mov	w10, #0x60                  	// #96
 808:	b	4b8 <inflate_table+0x4b8>
 80c:	ldp	x21, x22, [sp, #32]
 810:	ldp	x23, x24, [sp, #48]
 814:	b	e8 <inflate_table+0xe8>
 818:	ldp	x3, x4, [sp, #96]
 81c:	cbz	w0, 838 <inflate_table+0x838>
 820:	ubfiz	x0, x0, #2, #32
 824:	mov	w2, #0x40                  	// #64
 828:	add	x1, x7, x0
 82c:	strb	w2, [x7, x0]
 830:	strb	w12, [x1, #1]
 834:	strh	wzr, [x1, #2]
 838:	add	x23, x25, w23, uxtw #2
 83c:	mov	w0, #0x0                   	// #0
 840:	ldp	x25, x26, [sp, #64]
 844:	ldp	x27, x28, [sp, #80]
 848:	str	x23, [x3]
 84c:	ldp	x23, x24, [sp, #48]
 850:	str	w21, [x4]
 854:	ldp	x21, x22, [sp, #32]
 858:	b	e8 <inflate_table+0xe8>
 85c:	ldp	x25, x26, [sp, #64]
 860:	b	3d8 <inflate_table+0x3d8>
 864:	mov	w15, #0xe                   	// #14
 868:	b	f8 <inflate_table+0xf8>
 86c:	ldrh	w9, [sp, #114]
 870:	cbnz	w9, a0c <inflate_table+0xa0c>
 874:	ldrh	w7, [sp, #116]
 878:	cbnz	w7, 9e8 <inflate_table+0x9e8>
 87c:	mov	w19, #0x3                   	// #3
 880:	mov	w15, w19
 884:	b	1c4 <inflate_table+0x1c4>
 888:	mov	w0, #0xe                   	// #14
 88c:	mov	w19, w15
 890:	mov	w6, #0x2                   	// #2
 894:	mov	w15, w0
 898:	b	1c8 <inflate_table+0x1c8>
 89c:	ldrh	w9, [sp, #114]
 8a0:	cbnz	w9, 9d8 <inflate_table+0x9d8>
 8a4:	mov	w15, #0xd                   	// #13
 8a8:	b	100 <inflate_table+0x100>
 8ac:	ldrh	w9, [sp, #114]
 8b0:	cbnz	w9, 9fc <inflate_table+0x9fc>
 8b4:	mov	w15, #0xc                   	// #12
 8b8:	b	100 <inflate_table+0x100>
 8bc:	ldrh	w9, [sp, #114]
 8c0:	cbnz	w9, a04 <inflate_table+0xa04>
 8c4:	mov	w15, #0xb                   	// #11
 8c8:	b	100 <inflate_table+0x100>
 8cc:	ldrh	w9, [sp, #114]
 8d0:	cbnz	w9, 9f4 <inflate_table+0x9f4>
 8d4:	mov	w15, #0xa                   	// #10
 8d8:	b	100 <inflate_table+0x100>
 8dc:	ldrh	w9, [sp, #114]
 8e0:	cbnz	w9, 9e0 <inflate_table+0x9e0>
 8e4:	mov	w15, #0x9                   	// #9
 8e8:	b	100 <inflate_table+0x100>
 8ec:	mov	w0, #0xffffffff            	// #-1
 8f0:	ldp	x21, x22, [sp, #32]
 8f4:	b	e8 <inflate_table+0xe8>
 8f8:	mov	w0, #0xffffffff            	// #-1
 8fc:	ldp	x21, x22, [sp, #32]
 900:	ldp	x23, x24, [sp, #48]
 904:	b	e8 <inflate_table+0xe8>
 908:	ldrh	w9, [sp, #114]
 90c:	cbnz	w9, a64 <inflate_table+0xa64>
 910:	mov	w15, #0x4                   	// #4
 914:	b	100 <inflate_table+0x100>
 918:	adrp	x28, 0 <inflate_table>
 91c:	add	x28, x28, #0x0
 920:	add	x27, x28, #0x40
 924:	mov	w22, #0x0                   	// #0
 928:	stp	x25, x26, [sp, #64]
 92c:	b	444 <inflate_table+0x444>
 930:	mov	w19, #0x2                   	// #2
 934:	cbz	w9, 880 <inflate_table+0x880>
 938:	mov	w6, #0x2                   	// #2
 93c:	mov	w0, #0xffffffff            	// #-1
 940:	subs	w6, w6, w9
 944:	b.mi	e8 <inflate_table+0xe8>  // b.first
 948:	ldrh	w7, [sp, #116]
 94c:	mov	w15, #0x1                   	// #1
 950:	b	1c8 <inflate_table+0x1c8>
 954:	mov	w19, #0x1                   	// #1
 958:	b	938 <inflate_table+0x938>
 95c:	mov	w0, #0x3                   	// #3
 960:	b	88c <inflate_table+0x88c>
 964:	ldrh	w9, [sp, #114]
 968:	cbnz	w9, a54 <inflate_table+0xa54>
 96c:	mov	w15, #0x8                   	// #8
 970:	b	100 <inflate_table+0x100>
 974:	mov	w0, #0x6                   	// #6
 978:	b	88c <inflate_table+0x88c>
 97c:	mov	w0, #0x5                   	// #5
 980:	b	88c <inflate_table+0x88c>
 984:	mov	w0, #0x4                   	// #4
 988:	b	88c <inflate_table+0x88c>
 98c:	mov	w0, #0x7                   	// #7
 990:	b	88c <inflate_table+0x88c>
 994:	mov	w0, #0x9                   	// #9
 998:	b	88c <inflate_table+0x88c>
 99c:	mov	w0, #0x8                   	// #8
 9a0:	b	88c <inflate_table+0x88c>
 9a4:	mov	w0, #0xb                   	// #11
 9a8:	b	88c <inflate_table+0x88c>
 9ac:	mov	w0, #0xa                   	// #10
 9b0:	b	88c <inflate_table+0x88c>
 9b4:	mov	w15, #0xe                   	// #14
 9b8:	mov	w19, w15
 9bc:	b	1c4 <inflate_table+0x1c4>
 9c0:	mov	w0, #0xd                   	// #13
 9c4:	b	88c <inflate_table+0x88c>
 9c8:	mov	w0, #0xc                   	// #12
 9cc:	b	88c <inflate_table+0x88c>
 9d0:	mov	w19, w15
 9d4:	b	938 <inflate_table+0x938>
 9d8:	mov	w19, #0xd                   	// #13
 9dc:	b	938 <inflate_table+0x938>
 9e0:	mov	w19, #0x9                   	// #9
 9e4:	b	938 <inflate_table+0x938>
 9e8:	mov	w15, #0x3                   	// #3
 9ec:	mov	w0, #0x2                   	// #2
 9f0:	b	88c <inflate_table+0x88c>
 9f4:	mov	w19, #0xa                   	// #10
 9f8:	b	938 <inflate_table+0x938>
 9fc:	mov	w19, #0xc                   	// #12
 a00:	b	938 <inflate_table+0x938>
 a04:	mov	w19, #0xb                   	// #11
 a08:	b	938 <inflate_table+0x938>
 a0c:	mov	w19, #0x3                   	// #3
 a10:	b	938 <inflate_table+0x938>
 a14:	ldrh	w9, [sp, #114]
 a18:	cbnz	w9, a34 <inflate_table+0xa34>
 a1c:	mov	w15, #0x6                   	// #6
 a20:	b	100 <inflate_table+0x100>
 a24:	ldrh	w9, [sp, #114]
 a28:	cbnz	w9, a3c <inflate_table+0xa3c>
 a2c:	mov	w15, #0x7                   	// #7
 a30:	b	100 <inflate_table+0x100>
 a34:	mov	w19, #0x6                   	// #6
 a38:	b	938 <inflate_table+0x938>
 a3c:	mov	w19, #0x7                   	// #7
 a40:	b	938 <inflate_table+0x938>
 a44:	ldrh	w9, [sp, #114]
 a48:	cbnz	w9, a5c <inflate_table+0xa5c>
 a4c:	mov	w15, #0x5                   	// #5
 a50:	b	100 <inflate_table+0x100>
 a54:	mov	w19, #0x8                   	// #8
 a58:	b	938 <inflate_table+0x938>
 a5c:	mov	w19, #0x5                   	// #5
 a60:	b	938 <inflate_table+0x938>
 a64:	mov	w19, #0x4                   	// #4
 a68:	b	938 <inflate_table+0x938>

trees.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <scan_tree>:
       0:	ldrh	w4, [x1, #2]
       4:	add	x6, x1, w2, sxtw #2
       8:	mov	w8, #0xffffffff            	// #-1
       c:	mov	w3, #0x3                   	// #3
      10:	cmp	w4, #0x0
      14:	mov	w7, #0x4                   	// #4
      18:	strh	w8, [x6, #6]
      1c:	csel	w7, w7, w3, ne  // ne = any
      20:	mov	w5, #0x7                   	// #7
      24:	mov	w3, #0x8a                  	// #138
      28:	csel	w5, w5, w3, ne  // ne = any
      2c:	tbnz	w2, #31, 9c <scan_tree+0x9c>
      30:	add	x6, x1, #0xa
      34:	add	x3, x1, #0x6
      38:	add	x6, x6, w2, sxtw #2
      3c:	mov	w1, #0x0                   	// #0
      40:	mov	w8, #0xffffffff            	// #-1
      44:	nop
      48:	add	w1, w1, #0x1
      4c:	mov	w2, w4
      50:	cmp	w1, w5
      54:	ldrh	w4, [x3]
      58:	b.ge	a0 <scan_tree+0xa0>  // b.tcont
      5c:	cmp	w4, w2
      60:	b.eq	90 <scan_tree+0x90>  // b.none
      64:	cmp	w1, w7
      68:	b.ge	a0 <scan_tree+0xa0>  // b.tcont
      6c:	add	x5, x0, w2, sxtw #2
      70:	ldrh	w7, [x5, #2748]
      74:	add	w1, w1, w7
      78:	strh	w1, [x5, #2748]
      7c:	cbz	w4, e8 <scan_tree+0xe8>
      80:	mov	w8, w2
      84:	mov	w7, #0x4                   	// #4
      88:	mov	w5, #0x7                   	// #7
      8c:	mov	w1, #0x0                   	// #0
      90:	add	x3, x3, #0x4
      94:	cmp	x6, x3
      98:	b.ne	48 <scan_tree+0x48>  // b.any
      9c:	ret
      a0:	cbz	w2, fc <scan_tree+0xfc>
      a4:	cmp	w2, w8
      a8:	b.eq	bc <scan_tree+0xbc>  // b.none
      ac:	add	x5, x0, w2, sxtw #2
      b0:	ldrh	w1, [x5, #2748]
      b4:	add	w1, w1, #0x1
      b8:	strh	w1, [x5, #2748]
      bc:	ldrh	w1, [x0, #2812]
      c0:	add	w1, w1, #0x1
      c4:	strh	w1, [x0, #2812]
      c8:	cbz	w4, e8 <scan_tree+0xe8>
      cc:	cmp	w4, w2
      d0:	b.ne	80 <scan_tree+0x80>  // b.any
      d4:	mov	w8, w4
      d8:	mov	w7, #0x3                   	// #3
      dc:	mov	w5, #0x6                   	// #6
      e0:	mov	w1, #0x0                   	// #0
      e4:	b	90 <scan_tree+0x90>
      e8:	mov	w8, w2
      ec:	mov	w7, #0x3                   	// #3
      f0:	mov	w5, #0x8a                  	// #138
      f4:	mov	w1, #0x0                   	// #0
      f8:	b	90 <scan_tree+0x90>
      fc:	cmp	w1, #0xa
     100:	b.gt	114 <scan_tree+0x114>
     104:	ldrh	w1, [x0, #2816]
     108:	add	w1, w1, #0x1
     10c:	strh	w1, [x0, #2816]
     110:	b	c8 <scan_tree+0xc8>
     114:	ldrh	w1, [x0, #2820]
     118:	add	w1, w1, #0x1
     11c:	strh	w1, [x0, #2820]
     120:	b	c8 <scan_tree+0xc8>
     124:	nop

0000000000000128 <send_tree>:
     128:	ldrh	w5, [x1, #2]
     12c:	mov	w9, #0x4                   	// #4
     130:	mov	w6, #0x3                   	// #3
     134:	mov	w3, #0x7                   	// #7
     138:	cmp	w5, #0x0
     13c:	mov	w4, #0x8a                  	// #138
     140:	csel	w9, w9, w6, ne  // ne = any
     144:	csel	w3, w3, w4, ne  // ne = any
     148:	tbnz	w2, #31, 298 <send_tree+0x170>
     14c:	add	x10, x1, #0xa
     150:	add	x4, x1, #0x6
     154:	add	x10, x10, w2, sxtw #2
     158:	mov	w6, #0x0                   	// #0
     15c:	mov	w11, #0xffffffff            	// #-1
     160:	mov	w8, #0x10                  	// #16
     164:	nop
     168:	add	w2, w6, #0x1
     16c:	mov	w7, w5
     170:	cmp	w2, w3
     174:	ldrh	w5, [x4]
     178:	b.ge	29c <send_tree+0x174>  // b.tcont
     17c:	cmp	w5, w7
     180:	b.eq	6ec <send_tree+0x5c4>  // b.none
     184:	ldrh	w1, [x0, #5936]
     188:	cmp	w2, w9
     18c:	ldr	w3, [x0, #5940]
     190:	b.ge	2a4 <send_tree+0x17c>  // b.tcont
     194:	add	x11, x0, w7, sxtw #2
     198:	ldrh	w12, [x11, #2748]
     19c:	ldrh	w2, [x11, #2750]
     1a0:	lsl	w9, w12, w3
     1a4:	orr	w1, w9, w1
     1a8:	sub	w13, w8, w2
     1ac:	and	w9, w1, #0xffff
     1b0:	cmp	w13, w3
     1b4:	sxth	w1, w1
     1b8:	b.lt	62c <send_tree+0x504>  // b.tstop
     1bc:	add	w3, w2, w3
     1c0:	strh	w9, [x0, #5936]
     1c4:	str	w3, [x0, #5940]
     1c8:	cbz	w6, 278 <send_tree+0x150>
     1cc:	ldrh	w12, [x11, #2748]
     1d0:	ldrh	w1, [x11, #2750]
     1d4:	lsl	w2, w12, w3
     1d8:	orr	w2, w2, w9
     1dc:	sub	w13, w8, w1
     1e0:	and	w9, w2, #0xffff
     1e4:	cmp	w13, w3
     1e8:	sxth	w2, w2
     1ec:	b.lt	694 <send_tree+0x56c>  // b.tstop
     1f0:	add	w3, w1, w3
     1f4:	strh	w9, [x0, #5936]
     1f8:	str	w3, [x0, #5940]
     1fc:	cmp	w6, #0x1
     200:	b.eq	278 <send_tree+0x150>  // b.none
     204:	ldrh	w6, [x11, #2748]
     208:	ldrh	w2, [x11, #2750]
     20c:	lsl	w1, w6, w3
     210:	orr	w1, w1, w9
     214:	sub	w9, w8, w2
     218:	and	w11, w1, #0xffff
     21c:	cmp	w9, w3
     220:	sxth	w1, w1
     224:	b.ge	6f4 <send_tree+0x5cc>  // b.tcont
     228:	ldr	x9, [x0, #16]
     22c:	strh	w11, [x0, #5936]
     230:	ldr	x3, [x0, #40]
     234:	sub	w2, w2, #0x10
     238:	add	x11, x3, #0x1
     23c:	str	x11, [x0, #40]
     240:	strb	w1, [x9, x3]
     244:	ldr	x9, [x0, #16]
     248:	ldr	x3, [x0, #40]
     24c:	ldrh	w1, [x0, #5936]
     250:	add	x11, x3, #0x1
     254:	str	x11, [x0, #40]
     258:	lsr	w1, w1, #8
     25c:	strb	w1, [x9, x3]
     260:	ldr	w1, [x0, #5940]
     264:	sub	w3, w8, w1
     268:	add	w2, w2, w1
     26c:	str	w2, [x0, #5940]
     270:	asr	w6, w6, w3
     274:	strh	w6, [x0, #5936]
     278:	cbz	w5, 42c <send_tree+0x304>
     27c:	mov	w11, w7
     280:	mov	w9, #0x4                   	// #4
     284:	mov	w3, #0x7                   	// #7
     288:	mov	w6, #0x0                   	// #0
     28c:	add	x4, x4, #0x4
     290:	cmp	x4, x10
     294:	b.ne	168 <send_tree+0x40>  // b.any
     298:	ret
     29c:	ldrh	w1, [x0, #5936]
     2a0:	ldr	w3, [x0, #5940]
     2a4:	cbz	w7, 440 <send_tree+0x318>
     2a8:	sxth	w1, w1
     2ac:	cmp	w7, w11
     2b0:	b.eq	330 <send_tree+0x208>  // b.none
     2b4:	add	x2, x0, w7, sxtw #2
     2b8:	ldrh	w11, [x2, #2748]
     2bc:	ldrh	w9, [x2, #2750]
     2c0:	lsl	w2, w11, w3
     2c4:	orr	w1, w1, w2
     2c8:	sub	w2, w8, w9
     2cc:	and	w12, w1, #0xffff
     2d0:	cmp	w2, w3
     2d4:	sxth	w1, w1
     2d8:	b.ge	684 <send_tree+0x55c>  // b.tcont
     2dc:	ldr	x13, [x0, #16]
     2e0:	mov	w2, w6
     2e4:	ldr	x3, [x0, #40]
     2e8:	strh	w12, [x0, #5936]
     2ec:	sub	w9, w9, #0x10
     2f0:	add	x6, x3, #0x1
     2f4:	str	x6, [x0, #40]
     2f8:	strb	w1, [x13, x3]
     2fc:	ldr	x6, [x0, #16]
     300:	ldr	x3, [x0, #40]
     304:	ldrh	w1, [x0, #5936]
     308:	add	x12, x3, #0x1
     30c:	str	x12, [x0, #40]
     310:	lsr	w1, w1, #8
     314:	strb	w1, [x6, x3]
     318:	ldr	w3, [x0, #5940]
     31c:	sub	w1, w8, w3
     320:	add	w3, w9, w3
     324:	str	w3, [x0, #5940]
     328:	asr	w1, w11, w1
     32c:	sxth	w1, w1
     330:	ldrh	w9, [x0, #2812]
     334:	ldrh	w6, [x0, #2814]
     338:	lsl	w11, w9, w3
     33c:	orr	w1, w1, w11
     340:	sub	w11, w8, w6
     344:	and	w12, w1, #0xffff
     348:	cmp	w11, w3
     34c:	sxth	w1, w1
     350:	b.ge	540 <send_tree+0x418>  // b.tcont
     354:	ldr	x13, [x0, #16]
     358:	sub	w3, w6, #0x10
     35c:	ldr	x11, [x0, #40]
     360:	strh	w12, [x0, #5936]
     364:	add	x6, x11, #0x1
     368:	str	x6, [x0, #40]
     36c:	strb	w1, [x13, x11]
     370:	ldr	x11, [x0, #16]
     374:	ldr	x6, [x0, #40]
     378:	ldrh	w1, [x0, #5936]
     37c:	add	x12, x6, #0x1
     380:	str	x12, [x0, #40]
     384:	lsr	w1, w1, #8
     388:	strb	w1, [x11, x6]
     38c:	ldr	w1, [x0, #5940]
     390:	sub	w6, w8, w1
     394:	add	w3, w3, w1
     398:	str	w3, [x0, #5940]
     39c:	asr	w1, w9, w6
     3a0:	sxth	w1, w1
     3a4:	sub	w2, w2, #0x3
     3a8:	cmp	w3, #0xe
     3ac:	b.le	524 <send_tree+0x3fc>
     3b0:	and	w2, w2, #0xffff
     3b4:	ldr	x9, [x0, #16]
     3b8:	lsl	w3, w2, w3
     3bc:	ldr	x6, [x0, #40]
     3c0:	orr	w1, w1, w3
     3c4:	add	x3, x6, #0x1
     3c8:	sxth	w1, w1
     3cc:	str	x3, [x0, #40]
     3d0:	strh	w1, [x0, #5936]
     3d4:	strb	w1, [x9, x6]
     3d8:	ldr	x6, [x0, #16]
     3dc:	ldr	x3, [x0, #40]
     3e0:	ldrh	w1, [x0, #5936]
     3e4:	add	x9, x3, #0x1
     3e8:	str	x9, [x0, #40]
     3ec:	lsr	w1, w1, #8
     3f0:	strb	w1, [x6, x3]
     3f4:	ldr	w1, [x0, #5940]
     3f8:	sub	w3, w8, w1
     3fc:	sub	w1, w1, #0xe
     400:	str	w1, [x0, #5940]
     404:	asr	w2, w2, w3
     408:	strh	w2, [x0, #5936]
     40c:	cbz	w5, 42c <send_tree+0x304>
     410:	cmp	w5, w7
     414:	b.ne	27c <send_tree+0x154>  // b.any
     418:	mov	w11, w5
     41c:	mov	w9, #0x3                   	// #3
     420:	mov	w3, #0x6                   	// #6
     424:	mov	w6, #0x0                   	// #0
     428:	b	28c <send_tree+0x164>
     42c:	mov	w11, w7
     430:	mov	w9, #0x3                   	// #3
     434:	mov	w3, #0x8a                  	// #138
     438:	mov	w6, #0x0                   	// #0
     43c:	b	28c <send_tree+0x164>
     440:	cmp	w2, #0xa
     444:	b.gt	54c <send_tree+0x424>
     448:	ldrh	w11, [x0, #2818]
     44c:	ldrh	w9, [x0, #2816]
     450:	sub	w12, w8, w11
     454:	cmp	w12, w3
     458:	b.ge	704 <send_tree+0x5dc>  // b.tcont
     45c:	ldr	x13, [x0, #16]
     460:	lsl	w3, w9, w3
     464:	ldr	x12, [x0, #40]
     468:	orr	w1, w3, w1
     46c:	sub	w3, w11, #0x10
     470:	sxth	w1, w1
     474:	add	x11, x12, #0x1
     478:	str	x11, [x0, #40]
     47c:	strh	w1, [x0, #5936]
     480:	strb	w1, [x13, x12]
     484:	ldr	x12, [x0, #16]
     488:	ldr	x11, [x0, #40]
     48c:	ldrh	w1, [x0, #5936]
     490:	add	x13, x11, #0x1
     494:	str	x13, [x0, #40]
     498:	lsr	w1, w1, #8
     49c:	strb	w1, [x12, x11]
     4a0:	ldr	w1, [x0, #5940]
     4a4:	sub	w11, w8, w1
     4a8:	add	w3, w3, w1
     4ac:	str	w3, [x0, #5940]
     4b0:	cmp	w3, #0xd
     4b4:	asr	w9, w9, w11
     4b8:	sxth	w1, w9
     4bc:	b.le	720 <send_tree+0x5f8>
     4c0:	sub	w6, w6, #0x2
     4c4:	and	w6, w6, #0xffff
     4c8:	ldr	x9, [x0, #16]
     4cc:	lsl	w3, w6, w3
     4d0:	ldr	x2, [x0, #40]
     4d4:	orr	w1, w1, w3
     4d8:	add	x3, x2, #0x1
     4dc:	sxth	w1, w1
     4e0:	str	x3, [x0, #40]
     4e4:	strh	w1, [x0, #5936]
     4e8:	strb	w1, [x9, x2]
     4ec:	ldr	x3, [x0, #16]
     4f0:	ldr	x2, [x0, #40]
     4f4:	ldrh	w1, [x0, #5936]
     4f8:	add	x9, x2, #0x1
     4fc:	str	x9, [x0, #40]
     500:	lsr	w1, w1, #8
     504:	strb	w1, [x3, x2]
     508:	ldr	w1, [x0, #5940]
     50c:	sub	w2, w8, w1
     510:	sub	w1, w1, #0xd
     514:	str	w1, [x0, #5940]
     518:	asr	w6, w6, w2
     51c:	strh	w6, [x0, #5936]
     520:	b	40c <send_tree+0x2e4>
     524:	add	w6, w3, #0x2
     528:	and	w2, w2, #0xffff
     52c:	str	w6, [x0, #5940]
     530:	lsl	w3, w2, w3
     534:	orr	w1, w1, w3
     538:	strh	w1, [x0, #5936]
     53c:	b	40c <send_tree+0x2e4>
     540:	add	w3, w6, w3
     544:	str	w3, [x0, #5940]
     548:	b	3a4 <send_tree+0x27c>
     54c:	ldrh	w12, [x0, #2820]
     550:	ldrh	w11, [x0, #2822]
     554:	lsl	w9, w12, w3
     558:	orr	w1, w9, w1
     55c:	sub	w9, w8, w11
     560:	and	w13, w1, #0xffff
     564:	cmp	w9, w3
     568:	sxth	w1, w1
     56c:	b.ge	738 <send_tree+0x610>  // b.tcont
     570:	ldr	x14, [x0, #16]
     574:	sub	w3, w11, #0x10
     578:	ldr	x9, [x0, #40]
     57c:	strh	w13, [x0, #5936]
     580:	add	x11, x9, #0x1
     584:	str	x11, [x0, #40]
     588:	strb	w1, [x14, x9]
     58c:	ldr	x11, [x0, #16]
     590:	ldr	x9, [x0, #40]
     594:	ldrh	w1, [x0, #5936]
     598:	add	x13, x9, #0x1
     59c:	str	x13, [x0, #40]
     5a0:	lsr	w1, w1, #8
     5a4:	strb	w1, [x11, x9]
     5a8:	ldr	w1, [x0, #5940]
     5ac:	sub	w9, w8, w1
     5b0:	add	w3, w3, w1
     5b4:	str	w3, [x0, #5940]
     5b8:	asr	w1, w12, w9
     5bc:	sxth	w1, w1
     5c0:	cmp	w3, #0x9
     5c4:	b.le	72c <send_tree+0x604>
     5c8:	sub	w6, w6, #0xa
     5cc:	and	w6, w6, #0xffff
     5d0:	ldr	x9, [x0, #16]
     5d4:	lsl	w3, w6, w3
     5d8:	ldr	x2, [x0, #40]
     5dc:	orr	w1, w1, w3
     5e0:	add	x3, x2, #0x1
     5e4:	sxth	w1, w1
     5e8:	str	x3, [x0, #40]
     5ec:	strh	w1, [x0, #5936]
     5f0:	strb	w1, [x9, x2]
     5f4:	ldr	x3, [x0, #16]
     5f8:	ldr	x2, [x0, #40]
     5fc:	ldrh	w1, [x0, #5936]
     600:	add	x9, x2, #0x1
     604:	str	x9, [x0, #40]
     608:	lsr	w1, w1, #8
     60c:	strb	w1, [x3, x2]
     610:	ldr	w1, [x0, #5940]
     614:	sub	w2, w8, w1
     618:	sub	w1, w1, #0x9
     61c:	str	w1, [x0, #5940]
     620:	asr	w6, w6, w2
     624:	strh	w6, [x0, #5936]
     628:	b	40c <send_tree+0x2e4>
     62c:	strh	w9, [x0, #5936]
     630:	sub	w3, w2, #0x10
     634:	ldr	x13, [x0, #16]
     638:	ldr	x9, [x0, #40]
     63c:	add	x2, x9, #0x1
     640:	str	x2, [x0, #40]
     644:	strb	w1, [x13, x9]
     648:	ldr	x9, [x0, #16]
     64c:	ldr	x2, [x0, #40]
     650:	ldrh	w1, [x0, #5936]
     654:	add	x13, x2, #0x1
     658:	str	x13, [x0, #40]
     65c:	lsr	w1, w1, #8
     660:	strb	w1, [x9, x2]
     664:	ldr	w1, [x0, #5940]
     668:	sub	w2, w8, w1
     66c:	add	w3, w3, w1
     670:	str	w3, [x0, #5940]
     674:	asr	w2, w12, w2
     678:	and	w9, w2, #0xffff
     67c:	strh	w9, [x0, #5936]
     680:	b	1c8 <send_tree+0xa0>
     684:	add	w3, w3, w9
     688:	mov	w2, w6
     68c:	str	w3, [x0, #5940]
     690:	b	330 <send_tree+0x208>
     694:	strh	w9, [x0, #5936]
     698:	sub	w3, w1, #0x10
     69c:	ldr	x13, [x0, #16]
     6a0:	ldr	x9, [x0, #40]
     6a4:	add	x1, x9, #0x1
     6a8:	str	x1, [x0, #40]
     6ac:	strb	w2, [x13, x9]
     6b0:	ldr	x9, [x0, #16]
     6b4:	ldr	x2, [x0, #40]
     6b8:	ldrh	w1, [x0, #5936]
     6bc:	add	x13, x2, #0x1
     6c0:	str	x13, [x0, #40]
     6c4:	lsr	w1, w1, #8
     6c8:	strb	w1, [x9, x2]
     6cc:	ldr	w2, [x0, #5940]
     6d0:	sub	w1, w8, w2
     6d4:	add	w3, w3, w2
     6d8:	str	w3, [x0, #5940]
     6dc:	asr	w1, w12, w1
     6e0:	and	w9, w1, #0xffff
     6e4:	strh	w9, [x0, #5936]
     6e8:	b	1fc <send_tree+0xd4>
     6ec:	mov	w6, w2
     6f0:	b	28c <send_tree+0x164>
     6f4:	add	w3, w2, w3
     6f8:	strh	w11, [x0, #5936]
     6fc:	str	w3, [x0, #5940]
     700:	b	278 <send_tree+0x150>
     704:	lsl	w9, w9, w3
     708:	add	w3, w11, w3
     70c:	orr	w1, w9, w1
     710:	str	w3, [x0, #5940]
     714:	cmp	w3, #0xd
     718:	sxth	w1, w1
     71c:	b.gt	4c0 <send_tree+0x398>
     720:	sub	w2, w2, #0x3
     724:	add	w6, w3, #0x3
     728:	b	528 <send_tree+0x400>
     72c:	sub	w2, w2, #0xb
     730:	add	w6, w3, #0x7
     734:	b	528 <send_tree+0x400>
     738:	add	w3, w11, w3
     73c:	str	w3, [x0, #5940]
     740:	b	5c0 <send_tree+0x498>
     744:	nop

0000000000000748 <compress_block>:
     748:	stp	x29, x30, [sp, #-16]!
     74c:	mov	x29, sp
     750:	ldr	w6, [x0, #5900]
     754:	ldrh	w5, [x0, #5936]
     758:	ldr	w7, [x0, #5940]
     75c:	sxth	w3, w5
     760:	cbz	w6, 9f0 <compress_block+0x2a8>
     764:	adrp	x10, 0 <scan_tree>
     768:	add	x10, x10, #0x0
     76c:	add	x13, x10, #0x100
     770:	add	x12, x10, #0x400
     774:	add	x15, x10, #0x480
     778:	add	x11, x10, #0x200
     77c:	add	x14, x10, #0x180
     780:	mov	w8, #0x0                   	// #0
     784:	mov	w9, #0x10                  	// #16
     788:	b	81c <compress_block+0xd4>
     78c:	ubfiz	x4, x4, #2, #8
     790:	add	x5, x1, x4
     794:	ldrh	w17, [x1, x4]
     798:	ldrh	w16, [x5, #2]
     79c:	lsl	w4, w17, w7
     7a0:	orr	w3, w3, w4
     7a4:	sub	w4, w9, w16
     7a8:	and	w5, w3, #0xffff
     7ac:	cmp	w4, w7
     7b0:	sxth	w3, w3
     7b4:	b.ge	a7c <compress_block+0x334>  // b.tcont
     7b8:	ldr	x6, [x0, #16]
     7bc:	strh	w5, [x0, #5936]
     7c0:	ldr	x4, [x0, #40]
     7c4:	sub	w16, w16, #0x10
     7c8:	add	x5, x4, #0x1
     7cc:	str	x5, [x0, #40]
     7d0:	strb	w3, [x6, x4]
     7d4:	ldr	x5, [x0, #16]
     7d8:	ldr	x4, [x0, #40]
     7dc:	ldrh	w3, [x0, #5936]
     7e0:	add	x6, x4, #0x1
     7e4:	str	x6, [x0, #40]
     7e8:	lsr	w3, w3, #8
     7ec:	strb	w3, [x5, x4]
     7f0:	ldr	w7, [x0, #5940]
     7f4:	ldr	w6, [x0, #5900]
     7f8:	sub	w3, w9, w7
     7fc:	add	w7, w16, w7
     800:	str	w7, [x0, #5940]
     804:	asr	w3, w17, w3
     808:	and	w5, w3, #0xffff
     80c:	sxth	w3, w3
     810:	strh	w5, [x0, #5936]
     814:	cmp	w6, w8
     818:	b.ls	9f0 <compress_block+0x2a8>  // b.plast
     81c:	ldr	x16, [x0, #5904]
     820:	mov	w4, w8
     824:	ldr	x17, [x0, #5888]
     828:	sxth	w3, w5
     82c:	ldrh	w16, [x16, w8, uxtw #1]
     830:	add	w8, w8, #0x1
     834:	ldrb	w4, [x17, x4]
     838:	cbz	w16, 78c <compress_block+0x44>
     83c:	ldrb	w5, [x10, w4, sxtw]
     840:	add	w6, w5, #0x101
     844:	ubfiz	x6, x6, #2, #10
     848:	add	x18, x1, x6
     84c:	ldrh	w17, [x1, x6]
     850:	ldrh	w6, [x18, #2]
     854:	lsl	w18, w17, w7
     858:	orr	w3, w3, w18
     85c:	sub	w18, w9, w6
     860:	and	w30, w3, #0xffff
     864:	cmp	w18, w7
     868:	sxth	w3, w3
     86c:	b.ge	a70 <compress_block+0x328>  // b.tcont
     870:	ldr	x18, [x0, #40]
     874:	sub	w7, w6, #0x10
     878:	strh	w30, [x0, #5936]
     87c:	add	x6, x18, #0x1
     880:	str	x6, [x0, #40]
     884:	ldr	x6, [x0, #16]
     888:	strb	w3, [x6, x18]
     88c:	ldr	x18, [x0, #16]
     890:	ldr	x6, [x0, #40]
     894:	ldrh	w3, [x0, #5936]
     898:	add	x30, x6, #0x1
     89c:	str	x30, [x0, #40]
     8a0:	lsr	w3, w3, #8
     8a4:	strb	w3, [x18, x6]
     8a8:	ldr	w6, [x0, #5940]
     8ac:	sub	w3, w9, w6
     8b0:	add	w7, w7, w6
     8b4:	str	w7, [x0, #5940]
     8b8:	asr	w3, w17, w3
     8bc:	sxth	w3, w3
     8c0:	ldr	w6, [x13, x5, lsl #2]
     8c4:	cbz	w6, 940 <compress_block+0x1f8>
     8c8:	ldr	w5, [x14, x5, lsl #2]
     8cc:	sub	w17, w9, w6
     8d0:	cmp	w17, w7
     8d4:	sub	w4, w4, w5
     8d8:	and	w4, w4, #0xffff
     8dc:	lsl	w5, w4, w7
     8e0:	orr	w3, w3, w5
     8e4:	and	w5, w3, #0xffff
     8e8:	sxth	w3, w3
     8ec:	b.ge	b48 <compress_block+0x400>  // b.tcont
     8f0:	strh	w5, [x0, #5936]
     8f4:	sub	w6, w6, #0x10
     8f8:	ldr	x7, [x0, #16]
     8fc:	ldr	x5, [x0, #40]
     900:	add	x17, x5, #0x1
     904:	str	x17, [x0, #40]
     908:	strb	w3, [x7, x5]
     90c:	ldr	x7, [x0, #16]
     910:	ldr	x5, [x0, #40]
     914:	ldrh	w3, [x0, #5936]
     918:	add	x17, x5, #0x1
     91c:	str	x17, [x0, #40]
     920:	lsr	w3, w3, #8
     924:	strb	w3, [x7, x5]
     928:	ldr	w7, [x0, #5940]
     92c:	sub	w3, w9, w7
     930:	add	w7, w6, w7
     934:	str	w7, [x0, #5940]
     938:	asr	w3, w4, w3
     93c:	sxth	w3, w3
     940:	sub	w4, w16, #0x1
     944:	cmp	w4, #0xff
     948:	b.hi	b24 <compress_block+0x3dc>  // b.pmore
     94c:	ldrb	w6, [x11, w4, uxtw]
     950:	ubfiz	x5, x6, #2, #8
     954:	mov	w18, w6
     958:	add	x6, x2, x5
     95c:	ldrh	w17, [x2, x5]
     960:	ldrh	w6, [x6, #2]
     964:	lsl	w5, w17, w7
     968:	orr	w3, w3, w5
     96c:	sub	w16, w9, w6
     970:	and	w5, w3, #0xffff
     974:	cmp	w16, w7
     978:	sxth	w3, w3
     97c:	b.ge	b14 <compress_block+0x3cc>  // b.tcont
     980:	strh	w5, [x0, #5936]
     984:	sub	w7, w6, #0x10
     988:	ldr	x16, [x0, #16]
     98c:	ldr	x5, [x0, #40]
     990:	add	x6, x5, #0x1
     994:	str	x6, [x0, #40]
     998:	strb	w3, [x16, x5]
     99c:	ldr	x6, [x0, #16]
     9a0:	ldr	x5, [x0, #40]
     9a4:	ldrh	w3, [x0, #5936]
     9a8:	add	x16, x5, #0x1
     9ac:	str	x16, [x0, #40]
     9b0:	lsr	w3, w3, #8
     9b4:	strb	w3, [x6, x5]
     9b8:	ldr	w5, [x0, #5940]
     9bc:	sub	w3, w9, w5
     9c0:	add	w7, w7, w5
     9c4:	str	w7, [x0, #5940]
     9c8:	asr	w3, w17, w3
     9cc:	and	w5, w3, #0xffff
     9d0:	sxth	w3, w3
     9d4:	strh	w5, [x0, #5936]
     9d8:	ldr	w17, [x12, x18, lsl #2]
     9dc:	cbnz	w17, a8c <compress_block+0x344>
     9e0:	ldr	w6, [x0, #5900]
     9e4:	cmp	w6, w8
     9e8:	b.hi	81c <compress_block+0xd4>  // b.pmore
     9ec:	nop
     9f0:	ldrh	w2, [x1, #1024]
     9f4:	mov	w4, #0x10                  	// #16
     9f8:	ldrh	w1, [x1, #1026]
     9fc:	lsl	w5, w2, w7
     a00:	orr	w3, w3, w5
     a04:	sub	w6, w4, w1
     a08:	and	w5, w3, #0xffff
     a0c:	cmp	w6, w7
     a10:	sxth	w3, w3
     a14:	b.ge	b54 <compress_block+0x40c>  // b.tcont
     a18:	strh	w5, [x0, #5936]
     a1c:	sub	w1, w1, #0x10
     a20:	ldr	x6, [x0, #16]
     a24:	ldr	x5, [x0, #40]
     a28:	add	x7, x5, #0x1
     a2c:	str	x7, [x0, #40]
     a30:	strb	w3, [x6, x5]
     a34:	ldr	x6, [x0, #16]
     a38:	ldr	x5, [x0, #40]
     a3c:	ldrh	w3, [x0, #5936]
     a40:	add	x7, x5, #0x1
     a44:	str	x7, [x0, #40]
     a48:	lsr	w3, w3, #8
     a4c:	strb	w3, [x6, x5]
     a50:	ldr	w3, [x0, #5940]
     a54:	ldp	x29, x30, [sp], #16
     a58:	sub	w4, w4, w3
     a5c:	add	w1, w1, w3
     a60:	str	w1, [x0, #5940]
     a64:	asr	w2, w2, w4
     a68:	strh	w2, [x0, #5936]
     a6c:	ret
     a70:	add	w7, w6, w7
     a74:	str	w7, [x0, #5940]
     a78:	b	8c0 <compress_block+0x178>
     a7c:	add	w7, w7, w16
     a80:	strh	w5, [x0, #5936]
     a84:	str	w7, [x0, #5940]
     a88:	b	814 <compress_block+0xcc>
     a8c:	ldr	w5, [x15, x18, lsl #2]
     a90:	sub	w6, w9, w17
     a94:	cmp	w6, w7
     a98:	sub	w4, w4, w5
     a9c:	and	w4, w4, #0xffff
     aa0:	lsl	w5, w4, w7
     aa4:	orr	w3, w3, w5
     aa8:	and	w5, w3, #0xffff
     aac:	sxth	w3, w3
     ab0:	b.ge	b34 <compress_block+0x3ec>  // b.tcont
     ab4:	strh	w5, [x0, #5936]
     ab8:	sub	w17, w17, #0x10
     abc:	ldr	x6, [x0, #16]
     ac0:	ldr	x5, [x0, #40]
     ac4:	add	x7, x5, #0x1
     ac8:	str	x7, [x0, #40]
     acc:	strb	w3, [x6, x5]
     ad0:	ldr	x6, [x0, #16]
     ad4:	ldr	x5, [x0, #40]
     ad8:	ldrh	w3, [x0, #5936]
     adc:	add	x7, x5, #0x1
     ae0:	str	x7, [x0, #40]
     ae4:	lsr	w3, w3, #8
     ae8:	strb	w3, [x6, x5]
     aec:	ldr	w7, [x0, #5940]
     af0:	ldr	w6, [x0, #5900]
     af4:	sub	w3, w9, w7
     af8:	add	w7, w17, w7
     afc:	str	w7, [x0, #5940]
     b00:	asr	w4, w4, w3
     b04:	and	w5, w4, #0xffff
     b08:	sxth	w3, w4
     b0c:	strh	w5, [x0, #5936]
     b10:	b	814 <compress_block+0xcc>
     b14:	add	w7, w6, w7
     b18:	strh	w5, [x0, #5936]
     b1c:	str	w7, [x0, #5940]
     b20:	b	9d8 <compress_block+0x290>
     b24:	lsr	w5, w4, #7
     b28:	add	w5, w5, #0x100
     b2c:	ldrb	w6, [x11, w5, uxtw]
     b30:	b	950 <compress_block+0x208>
     b34:	add	w7, w7, w17
     b38:	ldr	w6, [x0, #5900]
     b3c:	strh	w5, [x0, #5936]
     b40:	str	w7, [x0, #5940]
     b44:	b	814 <compress_block+0xcc>
     b48:	add	w7, w7, w6
     b4c:	str	w7, [x0, #5940]
     b50:	b	940 <compress_block+0x1f8>
     b54:	add	w7, w1, w7
     b58:	strh	w5, [x0, #5936]
     b5c:	ldp	x29, x30, [sp], #16
     b60:	str	w7, [x0, #5940]
     b64:	ret

0000000000000b68 <pqdownheap.constprop.0>:
     b68:	ldr	w8, [x0, #5300]
     b6c:	ldr	w14, [x0, #3012]
     b70:	cmp	w8, #0x1
     b74:	b.le	c54 <pqdownheap.constprop.0+0xec>
     b78:	sbfiz	x2, x14, #2, #32
     b7c:	add	x13, x0, w14, sxtw
     b80:	add	x13, x13, #0x1, lsl #12
     b84:	mov	w4, #0x1                   	// #1
     b88:	mov	w5, #0x2                   	// #2
     b8c:	ldrh	w11, [x1, x2]
     b90:	b	bac <pqdownheap.constprop.0+0x44>
     b94:	add	x4, x0, w4, sxtw #2
     b98:	cmp	w8, w2, lsl #1
     b9c:	lsl	w5, w2, #1
     ba0:	str	w3, [x4, #3008]
     ba4:	mov	w4, w2
     ba8:	b.lt	c14 <pqdownheap.constprop.0+0xac>  // b.tstop
     bac:	add	x7, x0, w5, sxtw #2
     bb0:	mov	w2, w5
     bb4:	cmp	w5, w8
     bb8:	ldr	w3, [x7, #3008]
     bbc:	sbfiz	x6, x3, #2, #32
     bc0:	sxtw	x9, w3
     bc4:	ldrh	w6, [x1, x6]
     bc8:	b.ge	bf0 <pqdownheap.constprop.0+0x88>  // b.tcont
     bcc:	ldr	w7, [x7, #3012]
     bd0:	add	w2, w5, #0x1
     bd4:	sbfiz	x10, x7, #2, #32
     bd8:	sxtw	x12, w7
     bdc:	ldrh	w10, [x1, x10]
     be0:	cmp	w10, w6
     be4:	b.cc	c20 <pqdownheap.constprop.0+0xb8>  // b.lo, b.ul, b.last
     be8:	b.eq	c2c <pqdownheap.constprop.0+0xc4>  // b.none
     bec:	mov	w2, w5
     bf0:	cmp	w11, w6
     bf4:	b.cc	c14 <pqdownheap.constprop.0+0xac>  // b.lo, b.ul, b.last
     bf8:	b.ne	b94 <pqdownheap.constprop.0+0x2c>  // b.any
     bfc:	add	x5, x0, w3, sxtw
     c00:	ldrb	w6, [x13, #1212]
     c04:	add	x5, x5, #0x1, lsl #12
     c08:	ldrb	w5, [x5, #1212]
     c0c:	cmp	w6, w5
     c10:	b.hi	b94 <pqdownheap.constprop.0+0x2c>  // b.pmore
     c14:	add	x4, x0, w4, sxtw #2
     c18:	str	w14, [x4, #3008]
     c1c:	ret
     c20:	mov	w6, w10
     c24:	mov	w3, w7
     c28:	b	bf0 <pqdownheap.constprop.0+0x88>
     c2c:	add	x12, x0, x12
     c30:	add	x9, x0, x9
     c34:	add	x12, x12, #0x1, lsl #12
     c38:	add	x9, x9, #0x1, lsl #12
     c3c:	ldrb	w10, [x12, #1212]
     c40:	ldrb	w9, [x9, #1212]
     c44:	cmp	w10, w9
     c48:	csel	w3, w3, w7, hi  // hi = pmore
     c4c:	csel	w2, w5, w2, hi  // hi = pmore
     c50:	b	bf0 <pqdownheap.constprop.0+0x88>
     c54:	mov	w4, #0x1                   	// #1
     c58:	b	c14 <pqdownheap.constprop.0+0xac>
     c5c:	nop

0000000000000c60 <build_tree>:
     c60:	mov	x18, x1
     c64:	stp	x29, x30, [sp, #-112]!
     c68:	adrp	x1, 0 <scan_tree>
     c6c:	mov	x29, sp
     c70:	ldr	x2, [x18, #16]
     c74:	mov	x5, #0x1400                	// #5120
     c78:	ldr	d0, [x1]
     c7c:	add	x3, x0, x5
     c80:	stp	x19, x20, [sp, #16]
     c84:	stp	x21, x22, [sp, #32]
     c88:	ldr	w22, [x2, #20]
     c8c:	ldr	x1, [x18]
     c90:	cmp	w22, #0x0
     c94:	ldr	x6, [x2]
     c98:	stur	d0, [x3, #180]
     c9c:	b.le	1538 <build_tree+0x8d8>
     ca0:	mov	x4, #0x14bc                	// #5308
     ca4:	mov	x3, x1
     ca8:	add	x15, x0, x4
     cac:	mov	x2, #0x0                   	// #0
     cb0:	mov	w8, #0x0                   	// #0
     cb4:	mov	w19, #0xffffffff            	// #-1
     cb8:	b	ce4 <build_tree+0x84>
     cbc:	add	w8, w8, #0x1
     cc0:	str	w8, [x0, #5300]
     cc4:	mov	w19, w2
     cc8:	add	x3, x3, #0x4
     ccc:	add	x4, x0, w8, sxtw #2
     cd0:	str	w2, [x4, #3008]
     cd4:	strb	wzr, [x15, x2]
     cd8:	add	x2, x2, #0x1
     cdc:	cmp	w22, w2
     ce0:	b.le	d00 <build_tree+0xa0>
     ce4:	ldrh	w4, [x3]
     ce8:	cbnz	w4, cbc <build_tree+0x5c>
     cec:	strh	wzr, [x3, #2]
     cf0:	add	x2, x2, #0x1
     cf4:	add	x3, x3, #0x4
     cf8:	cmp	w22, w2
     cfc:	b.gt	ce4 <build_tree+0x84>
     d00:	cmp	w8, #0x1
     d04:	b.gt	d80 <build_tree+0x120>
     d08:	sxtw	x2, w8
     d0c:	add	x5, x0, #0xbc4
     d10:	ldr	x12, [x0, #5912]
     d14:	cbz	x6, 147c <build_tree+0x81c>
     d18:	ldr	x3, [x0, #5920]
     d1c:	add	x11, x0, #0x1, lsl #12
     d20:	mov	w9, #0x1                   	// #1
     d24:	nop
     d28:	cmp	w19, #0x1
     d2c:	b.le	11a8 <build_tree+0x548>
     d30:	str	wzr, [x5, x2, lsl #2]
     d34:	add	x2, x2, #0x1
     d38:	strh	w9, [x1]
     d3c:	cmp	w2, #0x1
     d40:	strb	wzr, [x11, #1212]
     d44:	ldrh	w4, [x6, #2]
     d48:	sub	x3, x3, x4
     d4c:	b.le	d28 <build_tree+0xc8>
     d50:	cmp	w8, #0x1
     d54:	mov	w2, #0x1                   	// #1
     d58:	sub	w2, w2, w8
     d5c:	sub	x12, x12, #0x1
     d60:	csel	w4, w2, wzr, le
     d64:	add	w8, w8, #0x1
     d68:	csneg	x2, xzr, x2, gt
     d6c:	add	w8, w4, w8
     d70:	add	x2, x2, x12
     d74:	str	x3, [x0, #5920]
     d78:	str	w8, [x0, #5300]
     d7c:	str	x2, [x0, #5912]
     d80:	asr	w9, w8, #1
     d84:	add	x20, x0, #0xbc0
     d88:	str	w19, [x18, #8]
     d8c:	sxtw	x11, w9
     d90:	lsl	w9, w9, #1
     d94:	nop
     d98:	ldr	w13, [x20, x11, lsl #2]
     d9c:	cmp	w8, w9
     da0:	mov	w7, w11
     da4:	mov	w2, w9
     da8:	b.lt	e68 <build_tree+0x208>  // b.tstop
     dac:	sbfiz	x3, x13, #2, #32
     db0:	add	x12, x0, w13, sxtw
     db4:	add	x12, x12, #0x1, lsl #12
     db8:	ldrh	w16, [x1, x3]
     dbc:	b	dd8 <build_tree+0x178>
     dc0:	str	w6, [x3, #3008]
     dc4:	mov	w7, w2
     dc8:	cmp	w8, w2, lsl #1
     dcc:	lsl	w3, w2, #1
     dd0:	b.lt	e68 <build_tree+0x208>  // b.tstop
     dd4:	mov	w2, w3
     dd8:	add	x3, x0, w2, sxtw #2
     ddc:	cmp	w8, w2
     de0:	add	w17, w2, #0x1
     de4:	ldr	w6, [x3, #3008]
     de8:	sbfiz	x5, x6, #2, #32
     dec:	sxtw	x4, w6
     df0:	ldrh	w10, [x1, x5]
     df4:	b.le	e40 <build_tree+0x1e0>
     df8:	ldr	w3, [x3, #3012]
     dfc:	sbfiz	x14, x3, #2, #32
     e00:	sxtw	x5, w3
     e04:	ldrh	w14, [x1, x14]
     e08:	cmp	w14, w10
     e0c:	b.cc	1198 <build_tree+0x538>  // b.lo, b.ul, b.last
     e10:	b.ne	e40 <build_tree+0x1e0>  // b.any
     e14:	add	x5, x0, x5
     e18:	add	x4, x0, x4
     e1c:	add	x5, x5, #0x1, lsl #12
     e20:	add	x4, x4, #0x1, lsl #12
     e24:	ldrb	w5, [x5, #1212]
     e28:	ldrb	w4, [x4, #1212]
     e2c:	cmp	w5, w4
     e30:	csel	w3, w6, w3, hi  // hi = pmore
     e34:	csel	w2, w2, w17, hi  // hi = pmore
     e38:	mov	w6, w3
     e3c:	nop
     e40:	add	x3, x0, w7, sxtw #2
     e44:	cmp	w16, w10
     e48:	b.cc	e68 <build_tree+0x208>  // b.lo, b.ul, b.last
     e4c:	b.ne	dc0 <build_tree+0x160>  // b.any
     e50:	add	x4, x0, w6, sxtw
     e54:	ldrb	w5, [x12, #1212]
     e58:	add	x4, x4, #0x1, lsl #12
     e5c:	ldrb	w4, [x4, #1212]
     e60:	cmp	w5, w4
     e64:	b.hi	dc0 <build_tree+0x160>  // b.pmore
     e68:	add	x2, x0, w7, sxtw #2
     e6c:	sub	x11, x11, #0x1
     e70:	subs	w9, w9, #0x2
     e74:	str	w13, [x2, #3008]
     e78:	b.ne	d98 <build_tree+0x138>  // b.any
     e7c:	ldr	w2, [x0, #5300]
     e80:	sxtw	x22, w22
     e84:	nop
     e88:	add	x3, x0, w2, sxtw #2
     e8c:	sub	w2, w2, #0x1
     e90:	str	w2, [x0, #5300]
     e94:	ldr	w21, [x0, #3012]
     e98:	ldr	w2, [x3, #3008]
     e9c:	str	w2, [x0, #3012]
     ea0:	bl	b68 <pqdownheap.constprop.0>
     ea4:	ldr	w2, [x0, #5304]
     ea8:	ldr	w5, [x0, #3012]
     eac:	sbfiz	x6, x21, #2, #32
     eb0:	sub	w8, w2, #0x2
     eb4:	lsl	x10, x22, #2
     eb8:	add	x2, x0, w2, sxtw #2
     ebc:	add	x4, x0, w21, sxtw
     ec0:	sbfiz	x7, x5, #2, #32
     ec4:	add	x3, x0, w5, sxtw
     ec8:	add	x9, x1, x7
     ecc:	add	x4, x4, #0x1, lsl #12
     ed0:	str	w21, [x2, #3004]
     ed4:	add	x3, x3, #0x1, lsl #12
     ed8:	str	w8, [x0, #5304]
     edc:	add	x8, x1, x6
     ee0:	str	w5, [x2, #3000]
     ee4:	and	w5, w22, #0xffff
     ee8:	ldrh	w2, [x1, x6]
     eec:	ldrh	w7, [x1, x7]
     ef0:	add	w2, w2, w7
     ef4:	strh	w2, [x1, x10]
     ef8:	ldrb	w6, [x4, #1212]
     efc:	ldrb	w4, [x3, #1212]
     f00:	add	w3, w6, #0x1
     f04:	add	w2, w4, #0x1
     f08:	cmp	w6, w4
     f0c:	and	w3, w3, #0xff
     f10:	and	w2, w2, #0xff
     f14:	csel	w2, w2, w3, cc  // cc = lo, ul, last
     f18:	strb	w2, [x15, x22]
     f1c:	strh	w5, [x9, #2]
     f20:	strh	w5, [x8, #2]
     f24:	str	w22, [x0, #3012]
     f28:	add	x22, x22, #0x1
     f2c:	bl	b68 <pqdownheap.constprop.0>
     f30:	ldr	w2, [x0, #5300]
     f34:	cmp	w2, #0x1
     f38:	b.gt	e88 <build_tree+0x228>
     f3c:	ldr	w3, [x0, #5304]
     f40:	add	x10, x0, #0xba0
     f44:	ldr	x7, [x18]
     f48:	sub	w2, w3, #0x1
     f4c:	ldr	w4, [x0, #3012]
     f50:	cmp	w3, #0x23c
     f54:	ldr	w11, [x18, #8]
     f58:	add	x6, x0, w2, sxtw #2
     f5c:	str	w2, [x0, #5304]
     f60:	ldr	x2, [x18, #16]
     f64:	add	x5, x7, w4, sxtw #2
     f68:	ldr	w13, [x2, #16]
     f6c:	ldp	x17, x14, [x2]
     f70:	str	w4, [x6, #3008]
     f74:	ldr	w6, [x2, #24]
     f78:	stp	xzr, xzr, [x10]
     f7c:	stp	xzr, xzr, [x10, #16]
     f80:	strh	wzr, [x5, #2]
     f84:	b.gt	11e8 <build_tree+0x588>
     f88:	mov	x2, #0x1800                	// #6144
     f8c:	sxtw	x22, w3
     f90:	add	x16, x0, x2
     f94:	mov	w9, #0x0                   	// #0
     f98:	cbz	x17, 13f8 <build_tree+0x798>
     f9c:	nop
     fa0:	ldr	w4, [x20, x22, lsl #2]
     fa4:	mov	w15, #0x0                   	// #0
     fa8:	add	x22, x22, #0x1
     fac:	sbfiz	x5, x4, #2, #32
     fb0:	add	x8, x7, x5
     fb4:	add	x18, x17, x5
     fb8:	ldrh	w2, [x8, #2]
     fbc:	add	x2, x7, x2, lsl #2
     fc0:	ldrh	w2, [x2, #2]
     fc4:	add	w2, w2, #0x1
     fc8:	cmp	w6, w2
     fcc:	b.ge	fd8 <build_tree+0x378>  // b.tcont
     fd0:	add	w9, w9, #0x1
     fd4:	mov	w2, w6
     fd8:	strh	w2, [x8, #2]
     fdc:	cmp	w11, w4
     fe0:	add	x12, x0, w2, sxtw #1
     fe4:	b.lt	1034 <build_tree+0x3d4>  // b.tstop
     fe8:	ldrh	w8, [x12, #2976]
     fec:	sub	w21, w4, w13
     ff0:	cmp	w13, w4
     ff4:	add	w8, w8, #0x1
     ff8:	strh	w8, [x12, #2976]
     ffc:	b.gt	1008 <build_tree+0x3a8>
    1000:	ldr	w15, [x14, w21, sxtw #2]
    1004:	add	w2, w2, w15
    1008:	ldrh	w5, [x7, x5]
    100c:	ldrh	w4, [x18, #2]
    1010:	ldur	q1, [x16, #-232]
    1014:	add	w4, w4, w15
    1018:	umull	x2, w2, w5
    101c:	fmov	d0, x2
    1020:	umull	x4, w4, w5
    1024:	mov	v0.d[1], x3
    1028:	mov	v0.d[1], x4
    102c:	add	v0.2d, v0.2d, v1.2d
    1030:	stur	q0, [x16, #-232]
    1034:	cmp	w22, #0x23c
    1038:	b.le	fa0 <build_tree+0x340>
    103c:	cbz	w9, 11e8 <build_tree+0x588>
    1040:	sub	w15, w9, #0x1
    1044:	sub	w13, w6, #0x1
    1048:	and	w15, w15, #0xfffffffe
    104c:	sub	w9, w9, #0x2
    1050:	sub	w15, w9, w15
    1054:	add	x5, x0, w13, sxtw #1
    1058:	sxtw	x14, w6
    105c:	sub	w16, w6, #0x2
    1060:	sub	w17, w6, #0x3
    1064:	sub	w18, w6, #0x4
    1068:	sub	w21, w6, #0x5
    106c:	sub	w22, w6, #0x6
    1070:	sub	w30, w6, #0x8
    1074:	stp	x23, x24, [sp, #48]
    1078:	sub	w23, w6, #0xa
    107c:	sub	w24, w6, #0xc
    1080:	str	x25, [sp, #64]
    1084:	b	117c <build_tree+0x51c>
    1088:	ldrh	w2, [x5, #2974]
    108c:	mov	w4, w16
    1090:	cbnz	w2, 13cc <build_tree+0x76c>
    1094:	ldrh	w2, [x5, #2972]
    1098:	mov	w3, w17
    109c:	cbnz	w2, 13d4 <build_tree+0x774>
    10a0:	ldrh	w2, [x5, #2970]
    10a4:	mov	w4, w18
    10a8:	cbnz	w2, 1148 <build_tree+0x4e8>
    10ac:	ldrh	w2, [x5, #2968]
    10b0:	mov	w3, w21
    10b4:	cbnz	w2, 13e0 <build_tree+0x780>
    10b8:	ldrh	w2, [x5, #2966]
    10bc:	mov	w4, w22
    10c0:	cbnz	w2, 1148 <build_tree+0x4e8>
    10c4:	ldrh	w2, [x5, #2964]
    10c8:	sub	w3, w6, #0x7
    10cc:	cbnz	w2, 13ec <build_tree+0x78c>
    10d0:	ldrh	w2, [x5, #2962]
    10d4:	mov	w4, w30
    10d8:	cbnz	w2, 1148 <build_tree+0x4e8>
    10dc:	ldrh	w2, [x5, #2960]
    10e0:	sub	w3, w6, #0x9
    10e4:	cbnz	w2, 14fc <build_tree+0x89c>
    10e8:	ldrh	w2, [x5, #2958]
    10ec:	mov	w4, w23
    10f0:	cbnz	w2, 1148 <build_tree+0x4e8>
    10f4:	ldrh	w2, [x5, #2956]
    10f8:	sub	w3, w6, #0xb
    10fc:	cbnz	w2, 1508 <build_tree+0x8a8>
    1100:	ldrh	w2, [x5, #2954]
    1104:	mov	w4, w24
    1108:	cbnz	w2, 1148 <build_tree+0x4e8>
    110c:	ldrh	w2, [x5, #2952]
    1110:	sub	w3, w6, #0xd
    1114:	cbnz	w2, 1514 <build_tree+0x8b4>
    1118:	ldrh	w2, [x5, #2950]
    111c:	sub	w4, w6, #0xe
    1120:	cbnz	w2, 1148 <build_tree+0x4e8>
    1124:	ldrh	w2, [x5, #2948]
    1128:	sub	w25, w6, #0xf
    112c:	cbnz	w2, 1520 <build_tree+0x8c0>
    1130:	ldrh	w2, [x5, #2946]
    1134:	sub	w3, w6, #0x10
    1138:	cbnz	w2, 152c <build_tree+0x8cc>
    113c:	ldrh	w2, [x5, #2944]
    1140:	sub	w4, w6, #0x11
    1144:	nop
    1148:	add	x4, x0, w4, sxtw #1
    114c:	add	x3, x0, w3, sxtw #1
    1150:	sub	w2, w2, #0x1
    1154:	cmp	w9, w15
    1158:	strh	w2, [x4, #2976]
    115c:	ldrh	w2, [x3, #2976]
    1160:	add	w2, w2, #0x2
    1164:	strh	w2, [x3, #2976]
    1168:	ldrh	w2, [x12, #2976]
    116c:	sub	w2, w2, #0x1
    1170:	strh	w2, [x12, #2976]
    1174:	b.eq	1350 <build_tree+0x6f0>  // b.none
    1178:	sub	w9, w9, #0x2
    117c:	add	x12, x0, x14, lsl #1
    1180:	mov	x8, x14
    1184:	ldrh	w2, [x12, #2974]
    1188:	cbz	w2, 1088 <build_tree+0x428>
    118c:	mov	w3, w6
    1190:	mov	w4, w13
    1194:	b	1148 <build_tree+0x4e8>
    1198:	mov	w10, w14
    119c:	mov	w6, w3
    11a0:	mov	w2, w17
    11a4:	b	e40 <build_tree+0x1e0>
    11a8:	add	w19, w19, #0x1
    11ac:	str	w19, [x5, x2, lsl #2]
    11b0:	add	x2, x2, #0x1
    11b4:	sbfiz	x7, x19, #2, #32
    11b8:	add	x4, x0, w19, sxtw
    11bc:	add	x4, x4, #0x1, lsl #12
    11c0:	add	x10, x6, x7
    11c4:	cmp	w2, #0x1
    11c8:	strh	w9, [x1, x7]
    11cc:	strb	wzr, [x4, #1212]
    11d0:	ldrh	w4, [x10, #2]
    11d4:	sub	x3, x3, x4
    11d8:	b.le	d28 <build_tree+0xc8>
    11dc:	b	d50 <build_tree+0xf0>
    11e0:	ldp	x23, x24, [sp, #48]
    11e4:	ldr	x25, [sp, #64]
    11e8:	cmn	w19, #0x1
    11ec:	ldrh	w16, [x0, #2976]
    11f0:	ldrh	w15, [x0, #2978]
    11f4:	ldrh	w14, [x0, #2980]
    11f8:	lsl	w16, w16, #1
    11fc:	ldrh	w13, [x0, #2982]
    1200:	add	w15, w15, w16
    1204:	ldrh	w12, [x0, #2984]
    1208:	ldrh	w10, [x0, #2986]
    120c:	lsl	w15, w15, #1
    1210:	ldrh	w9, [x0, #2988]
    1214:	add	w14, w14, w15
    1218:	ldrh	w8, [x0, #2990]
    121c:	ldrh	w7, [x0, #2992]
    1220:	lsl	w14, w14, #1
    1224:	ldrh	w6, [x0, #2994]
    1228:	add	w13, w13, w14
    122c:	ldrh	w5, [x0, #2996]
    1230:	ldrh	w4, [x0, #2998]
    1234:	lsl	w13, w13, #1
    1238:	ldrh	w3, [x0, #3000]
    123c:	add	w12, w12, w13
    1240:	ldrh	w2, [x0, #3002]
    1244:	ldrh	w11, [x0, #3004]
    1248:	lsl	w12, w12, #1
    124c:	strh	w16, [sp, #82]
    1250:	add	w10, w10, w12
    1254:	strh	w15, [sp, #84]
    1258:	strh	w14, [sp, #86]
    125c:	lsl	w10, w10, #1
    1260:	strh	w13, [sp, #88]
    1264:	add	w0, w9, w10
    1268:	strh	w12, [sp, #90]
    126c:	strh	w10, [sp, #92]
    1270:	lsl	w0, w0, #1
    1274:	strh	w0, [sp, #94]
    1278:	add	w0, w8, w0
    127c:	lsl	w0, w0, #1
    1280:	strh	w0, [sp, #96]
    1284:	add	w0, w7, w0
    1288:	lsl	w0, w0, #1
    128c:	strh	w0, [sp, #98]
    1290:	add	w0, w6, w0
    1294:	lsl	w0, w0, #1
    1298:	strh	w0, [sp, #100]
    129c:	add	w0, w5, w0
    12a0:	lsl	w0, w0, #1
    12a4:	strh	w0, [sp, #102]
    12a8:	add	w0, w4, w0
    12ac:	lsl	w0, w0, #1
    12b0:	strh	w0, [sp, #104]
    12b4:	add	w0, w3, w0
    12b8:	lsl	w0, w0, #1
    12bc:	strh	w0, [sp, #106]
    12c0:	add	w0, w2, w0
    12c4:	lsl	w0, w0, #1
    12c8:	strh	w0, [sp, #108]
    12cc:	add	w0, w11, w0
    12d0:	lsl	w0, w0, #1
    12d4:	strh	w0, [sp, #110]
    12d8:	b.eq	1340 <build_tree+0x6e0>  // b.none
    12dc:	add	x0, x1, #0x4
    12e0:	add	x6, sp, #0x50
    12e4:	add	x19, x0, w19, sxtw #2
    12e8:	b	12f8 <build_tree+0x698>
    12ec:	add	x1, x1, #0x4
    12f0:	cmp	x19, x1
    12f4:	b.eq	1340 <build_tree+0x6e0>  // b.none
    12f8:	ldrh	w0, [x1, #2]
    12fc:	cbz	w0, 12ec <build_tree+0x68c>
    1300:	sbfiz	x2, x0, #1, #32
    1304:	mov	w4, #0x0                   	// #0
    1308:	ldrh	w5, [x6, x2]
    130c:	mov	w3, w5
    1310:	add	w5, w5, #0x1
    1314:	strh	w5, [x6, x2]
    1318:	and	w2, w3, #0x1
    131c:	subs	w0, w0, #0x1
    1320:	orr	w2, w2, w4
    1324:	lsr	w3, w3, #1
    1328:	lsl	w4, w2, #1
    132c:	b.ne	1318 <build_tree+0x6b8>  // b.any
    1330:	strh	w2, [x1]
    1334:	add	x1, x1, #0x4
    1338:	cmp	x19, x1
    133c:	b.ne	12f8 <build_tree+0x698>  // b.any
    1340:	ldp	x19, x20, [sp, #16]
    1344:	ldp	x21, x22, [sp, #32]
    1348:	ldp	x29, x30, [sp], #112
    134c:	ret
    1350:	cbz	w6, 11e0 <build_tree+0x580>
    1354:	mov	w12, #0x23d                 	// #573
    1358:	ldrh	w5, [x10, x8, lsl #1]
    135c:	cbz	w5, 13b0 <build_tree+0x750>
    1360:	sub	w3, w12, #0x1
    1364:	sxtw	x3, w3
    1368:	ldr	w4, [x20, x3, lsl #2]
    136c:	mov	w12, w3
    1370:	cmp	w11, w4
    1374:	b.lt	13c4 <build_tree+0x764>  // b.tstop
    1378:	sbfiz	x4, x4, #2, #32
    137c:	sub	x3, x3, #0x1
    1380:	add	x9, x7, x4
    1384:	ldrh	w2, [x9, #2]
    1388:	cmp	w2, w6
    138c:	b.eq	13a8 <build_tree+0x748>  // b.none
    1390:	ldrh	w14, [x7, x4]
    1394:	sub	x2, x8, w2, uxth
    1398:	ldr	x4, [x0, #5912]
    139c:	madd	x2, x2, x14, x4
    13a0:	str	x2, [x0, #5912]
    13a4:	strh	w6, [x9, #2]
    13a8:	subs	w5, w5, #0x1
    13ac:	b.ne	1368 <build_tree+0x708>  // b.any
    13b0:	sub	x8, x8, #0x1
    13b4:	mov	w6, w13
    13b8:	cbz	w13, 11e0 <build_tree+0x580>
    13bc:	sub	w13, w13, #0x1
    13c0:	b	1358 <build_tree+0x6f8>
    13c4:	sub	x3, x3, #0x1
    13c8:	b	1368 <build_tree+0x708>
    13cc:	mov	w3, w13
    13d0:	b	1148 <build_tree+0x4e8>
    13d4:	mov	w4, w17
    13d8:	mov	w3, w16
    13dc:	b	1148 <build_tree+0x4e8>
    13e0:	mov	w4, w21
    13e4:	mov	w3, w18
    13e8:	b	1148 <build_tree+0x4e8>
    13ec:	mov	w4, w3
    13f0:	mov	w3, w22
    13f4:	b	1148 <build_tree+0x4e8>
    13f8:	mov	x3, x22
    13fc:	nop
    1400:	ldr	w4, [x20, x3, lsl #2]
    1404:	sbfiz	x8, x4, #2, #32
    1408:	add	x5, x7, x8
    140c:	ldrh	w2, [x5, #2]
    1410:	add	x2, x7, x2, lsl #2
    1414:	ldrh	w2, [x2, #2]
    1418:	add	w2, w2, #0x1
    141c:	cmp	w6, w2
    1420:	b.ge	142c <build_tree+0x7cc>  // b.tcont
    1424:	add	w9, w9, #0x1
    1428:	mov	w2, w6
    142c:	strh	w2, [x5, #2]
    1430:	cmp	w11, w4
    1434:	add	x5, x0, w2, sxtw #1
    1438:	b.lt	146c <build_tree+0x80c>  // b.tstop
    143c:	sub	w12, w4, w13
    1440:	cmp	w13, w4
    1444:	ldrh	w4, [x5, #2976]
    1448:	add	w4, w4, #0x1
    144c:	strh	w4, [x5, #2976]
    1450:	b.gt	145c <build_tree+0x7fc>
    1454:	ldr	w4, [x14, w12, sxtw #2]
    1458:	add	w2, w2, w4
    145c:	ldrh	w5, [x7, x8]
    1460:	ldr	x4, [x0, #5912]
    1464:	umaddl	x2, w2, w5, x4
    1468:	str	x2, [x0, #5912]
    146c:	add	x3, x3, #0x1
    1470:	cmp	w3, #0x23c
    1474:	b.le	1400 <build_tree+0x7a0>
    1478:	b	103c <build_tree+0x3dc>
    147c:	add	x7, x0, #0x1, lsl #12
    1480:	mov	w4, #0x1                   	// #1
    1484:	nop
    1488:	cmp	w19, #0x1
    148c:	b.le	14d0 <build_tree+0x870>
    1490:	str	wzr, [x5, x2, lsl #2]
    1494:	add	x2, x2, #0x1
    1498:	strh	w4, [x1]
    149c:	cmp	w2, #0x1
    14a0:	strb	wzr, [x7, #1212]
    14a4:	b.le	1488 <build_tree+0x828>
    14a8:	cmp	w8, #0x1
    14ac:	mov	w3, #0x1                   	// #1
    14b0:	sub	w2, w3, w8
    14b4:	sub	x12, x12, #0x1
    14b8:	csel	w4, w2, wzr, le
    14bc:	add	w8, w8, #0x1
    14c0:	csneg	x2, xzr, x2, gt
    14c4:	add	w8, w4, w8
    14c8:	add	x2, x2, x12
    14cc:	b	d78 <build_tree+0x118>
    14d0:	add	w19, w19, #0x1
    14d4:	str	w19, [x5, x2, lsl #2]
    14d8:	add	x2, x2, #0x1
    14dc:	sbfiz	x6, x19, #2, #32
    14e0:	add	x3, x0, w19, sxtw
    14e4:	add	x3, x3, #0x1, lsl #12
    14e8:	cmp	w2, #0x1
    14ec:	strh	w4, [x1, x6]
    14f0:	strb	wzr, [x3, #1212]
    14f4:	b.le	1488 <build_tree+0x828>
    14f8:	b	14a8 <build_tree+0x848>
    14fc:	mov	w4, w3
    1500:	mov	w3, w30
    1504:	b	1148 <build_tree+0x4e8>
    1508:	mov	w4, w3
    150c:	mov	w3, w23
    1510:	b	1148 <build_tree+0x4e8>
    1514:	mov	w4, w3
    1518:	mov	w3, w24
    151c:	b	1148 <build_tree+0x4e8>
    1520:	mov	w3, w4
    1524:	mov	w4, w25
    1528:	b	1148 <build_tree+0x4e8>
    152c:	mov	w4, w3
    1530:	mov	w3, w25
    1534:	b	1148 <build_tree+0x4e8>
    1538:	mov	x3, #0x14bc                	// #5308
    153c:	mov	w19, #0xffffffff            	// #-1
    1540:	add	x15, x0, x3
    1544:	mov	w8, #0x0                   	// #0
    1548:	b	d08 <build_tree+0xa8>
    154c:	nop

0000000000001550 <_tr_init>:
    1550:	add	x6, x0, #0xd4
    1554:	str	x6, [x0, #2904]
    1558:	mov	x1, x6
    155c:	add	x6, x0, #0xb68
    1560:	adrp	x3, 0 <scan_tree>
    1564:	add	x3, x3, #0x0
    1568:	strh	wzr, [x0, #5936]
    156c:	add	x8, x3, #0x4f8
    1570:	add	x7, x3, #0x518
    1574:	add	x5, x3, #0x538
    1578:	add	x4, x0, #0xabc
    157c:	add	x3, x0, #0x9c8
    1580:	add	x2, x0, #0x54c
    1584:	stp	x8, x3, [x6]
    1588:	stp	x7, x4, [x6, #24]
    158c:	str	x5, [x0, #2968]
    1590:	str	wzr, [x0, #5940]
    1594:	nop
    1598:	strh	wzr, [x1], #4
    159c:	cmp	x1, x2
    15a0:	b.ne	1598 <_tr_init+0x48>  // b.any
    15a4:	mov	x1, x3
    15a8:	add	x2, x0, #0xa40
    15ac:	nop
    15b0:	strh	wzr, [x1], #4
    15b4:	cmp	x1, x2
    15b8:	b.ne	15b0 <_tr_init+0x60>  // b.any
    15bc:	mov	x1, x4
    15c0:	add	x2, x0, #0xb08
    15c4:	nop
    15c8:	strh	wzr, [x1], #4
    15cc:	cmp	x1, x2
    15d0:	b.ne	15c8 <_tr_init+0x78>  // b.any
    15d4:	mov	x1, #0x1800                	// #6144
    15d8:	add	x1, x0, x1
    15dc:	mov	w2, #0x1                   	// #1
    15e0:	strh	w2, [x0, #1236]
    15e4:	stp	xzr, xzr, [x1, #-232]
    15e8:	str	wzr, [x0, #5900]
    15ec:	str	wzr, [x0, #5928]
    15f0:	ret
    15f4:	nop

00000000000015f8 <_tr_stored_block>:
    15f8:	stp	x29, x30, [sp, #-32]!
    15fc:	and	w3, w3, #0xffff
    1600:	mov	x29, sp
    1604:	stp	x19, x20, [sp, #16]
    1608:	mov	x19, x0
    160c:	ldrh	w4, [x0, #5936]
    1610:	ldr	w0, [x0, #5940]
    1614:	mov	x20, x2
    1618:	ldr	x8, [x19, #16]
    161c:	cmp	w0, #0xd
    1620:	ldr	x7, [x19, #40]
    1624:	lsl	w2, w3, w0
    1628:	orr	w2, w2, w4
    162c:	and	w6, w2, #0xffff
    1630:	add	x5, x7, #0x1
    1634:	sxth	w4, w2
    1638:	add	x2, x8, x7
    163c:	b.le	1760 <_tr_stored_block+0x168>
    1640:	str	x5, [x19, #40]
    1644:	mov	w5, #0x10                  	// #16
    1648:	strh	w6, [x19, #5936]
    164c:	strb	w4, [x8, x7]
    1650:	ldr	x4, [x19, #16]
    1654:	ldr	x2, [x19, #40]
    1658:	ldrh	w0, [x19, #5936]
    165c:	add	x6, x2, #0x1
    1660:	str	x6, [x19, #40]
    1664:	lsr	w0, w0, #8
    1668:	strb	w0, [x4, x2]
    166c:	ldr	w0, [x19, #5940]
    1670:	ldr	x2, [x19, #16]
    1674:	sub	w4, w5, w0
    1678:	ldr	x7, [x19, #40]
    167c:	sub	w0, w0, #0xd
    1680:	asr	w3, w3, w4
    1684:	and	w6, w3, #0xffff
    1688:	strh	w6, [x19, #5936]
    168c:	add	x5, x7, #0x1
    1690:	str	w0, [x19, #5940]
    1694:	add	x2, x2, x7
    1698:	cmp	w0, #0x8
    169c:	b.le	1774 <_tr_stored_block+0x17c>
    16a0:	str	x5, [x19, #40]
    16a4:	strb	w6, [x2]
    16a8:	ldr	x3, [x19, #16]
    16ac:	ldr	x2, [x19, #40]
    16b0:	ldrh	w0, [x19, #5936]
    16b4:	add	x4, x2, #0x1
    16b8:	str	x4, [x19, #40]
    16bc:	lsr	w0, w0, #8
    16c0:	strb	w0, [x3, x2]
    16c4:	ldr	x2, [x19, #16]
    16c8:	ldr	x0, [x19, #40]
    16cc:	add	x5, x0, #0x1
    16d0:	add	x2, x2, x0
    16d4:	str	x5, [x19, #40]
    16d8:	and	w0, w20, #0xff
    16dc:	strh	wzr, [x19, #5936]
    16e0:	ubfx	w6, w20, #8, #8
    16e4:	str	wzr, [x19, #5940]
    16e8:	mvn	w5, w0
    16ec:	strb	w0, [x2]
    16f0:	mvn	w0, w20
    16f4:	mov	x2, x20
    16f8:	ldr	x4, [x19, #16]
    16fc:	ubfx	x0, x0, #8, #8
    1700:	ldr	x3, [x19, #40]
    1704:	add	x7, x3, #0x1
    1708:	str	x7, [x19, #40]
    170c:	strb	w6, [x4, x3]
    1710:	ldr	x4, [x19, #16]
    1714:	ldr	x3, [x19, #40]
    1718:	add	x6, x3, #0x1
    171c:	str	x6, [x19, #40]
    1720:	strb	w5, [x4, x3]
    1724:	ldr	x4, [x19, #16]
    1728:	ldr	x3, [x19, #40]
    172c:	add	x5, x3, #0x1
    1730:	str	x5, [x19, #40]
    1734:	strb	w0, [x4, x3]
    1738:	ldr	x3, [x19, #16]
    173c:	ldr	x0, [x19, #40]
    1740:	add	x0, x3, x0
    1744:	bl	0 <memcpy>
    1748:	ldr	x2, [x19, #40]
    174c:	add	x2, x2, x20
    1750:	str	x2, [x19, #40]
    1754:	ldp	x19, x20, [sp, #16]
    1758:	ldp	x29, x30, [sp], #32
    175c:	ret
    1760:	add	w0, w0, #0x3
    1764:	strh	w6, [x19, #5936]
    1768:	str	w0, [x19, #5940]
    176c:	cmp	w0, #0x8
    1770:	b.gt	16a0 <_tr_stored_block+0xa8>
    1774:	cmp	w0, #0x0
    1778:	b.le	16d4 <_tr_stored_block+0xdc>
    177c:	str	x5, [x19, #40]
    1780:	strb	w6, [x2]
    1784:	ldr	x2, [x19, #16]
    1788:	ldr	x0, [x19, #40]
    178c:	add	x5, x0, #0x1
    1790:	add	x2, x2, x0
    1794:	b	16d4 <_tr_stored_block+0xdc>

0000000000001798 <_tr_flush_bits>:
    1798:	ldr	w1, [x0, #5940]
    179c:	cmp	w1, #0x10
    17a0:	b.eq	17e0 <_tr_flush_bits+0x48>  // b.none
    17a4:	cmp	w1, #0x7
    17a8:	b.le	17dc <_tr_flush_bits+0x44>
    17ac:	ldr	x2, [x0, #16]
    17b0:	ldr	x1, [x0, #40]
    17b4:	ldrh	w3, [x0, #5936]
    17b8:	add	x4, x1, #0x1
    17bc:	str	x4, [x0, #40]
    17c0:	strb	w3, [x2, x1]
    17c4:	ldrh	w2, [x0, #5936]
    17c8:	ldr	w1, [x0, #5940]
    17cc:	lsr	w2, w2, #8
    17d0:	sub	w1, w1, #0x8
    17d4:	strh	w2, [x0, #5936]
    17d8:	str	w1, [x0, #5940]
    17dc:	ret
    17e0:	ldr	x2, [x0, #16]
    17e4:	ldr	x1, [x0, #40]
    17e8:	ldrh	w3, [x0, #5936]
    17ec:	add	x4, x1, #0x1
    17f0:	str	x4, [x0, #40]
    17f4:	strb	w3, [x2, x1]
    17f8:	ldr	x3, [x0, #16]
    17fc:	ldr	x2, [x0, #40]
    1800:	ldrh	w1, [x0, #5936]
    1804:	add	x4, x2, #0x1
    1808:	str	x4, [x0, #40]
    180c:	lsr	w1, w1, #8
    1810:	strb	w1, [x3, x2]
    1814:	strh	wzr, [x0, #5936]
    1818:	str	wzr, [x0, #5940]
    181c:	ret

0000000000001820 <_tr_align>:
    1820:	ldr	w1, [x0, #5940]
    1824:	mov	w4, #0x2                   	// #2
    1828:	ldrh	w3, [x0, #5936]
    182c:	cmp	w1, #0xd
    1830:	lsl	w2, w4, w1
    1834:	orr	w2, w2, w3
    1838:	and	w3, w2, #0xffff
    183c:	sxth	w2, w2
    1840:	b.le	1970 <_tr_align+0x150>
    1844:	ldr	x5, [x0, #16]
    1848:	strh	w3, [x0, #5936]
    184c:	ldr	x1, [x0, #40]
    1850:	mov	w3, #0x10                  	// #16
    1854:	add	x6, x1, #0x1
    1858:	str	x6, [x0, #40]
    185c:	strb	w2, [x5, x1]
    1860:	ldr	x5, [x0, #16]
    1864:	ldr	x2, [x0, #40]
    1868:	ldrh	w1, [x0, #5936]
    186c:	add	x6, x2, #0x1
    1870:	str	x6, [x0, #40]
    1874:	lsr	w1, w1, #8
    1878:	strb	w1, [x5, x2]
    187c:	ldr	w1, [x0, #5940]
    1880:	sub	w3, w3, w1
    1884:	sub	w1, w1, #0xd
    1888:	str	w1, [x0, #5940]
    188c:	asr	w3, w4, w3
    1890:	and	w3, w3, #0xffff
    1894:	strh	w3, [x0, #5936]
    1898:	cmp	w1, #0x9
    189c:	b.le	1924 <_tr_align+0x104>
    18a0:	ldr	x2, [x0, #16]
    18a4:	ldr	x1, [x0, #40]
    18a8:	add	x4, x1, #0x1
    18ac:	str	x4, [x0, #40]
    18b0:	strb	w3, [x2, x1]
    18b4:	mov	w3, #0x0                   	// #0
    18b8:	ldr	x4, [x0, #16]
    18bc:	ldr	x2, [x0, #40]
    18c0:	ldrh	w1, [x0, #5936]
    18c4:	add	x5, x2, #0x1
    18c8:	str	x5, [x0, #40]
    18cc:	lsr	w1, w1, #8
    18d0:	strb	w1, [x4, x2]
    18d4:	strh	wzr, [x0, #5936]
    18d8:	ldr	w1, [x0, #5940]
    18dc:	sub	w1, w1, #0x9
    18e0:	str	w1, [x0, #5940]
    18e4:	cmp	w1, #0x10
    18e8:	b.eq	1934 <_tr_align+0x114>  // b.none
    18ec:	cmp	w1, #0x7
    18f0:	b.le	1920 <_tr_align+0x100>
    18f4:	ldr	x2, [x0, #16]
    18f8:	ldr	x1, [x0, #40]
    18fc:	add	x4, x1, #0x1
    1900:	str	x4, [x0, #40]
    1904:	strb	w3, [x2, x1]
    1908:	ldrh	w2, [x0, #5936]
    190c:	ldr	w1, [x0, #5940]
    1910:	lsr	w2, w2, #8
    1914:	sub	w1, w1, #0x8
    1918:	strh	w2, [x0, #5936]
    191c:	str	w1, [x0, #5940]
    1920:	ret
    1924:	add	w1, w1, #0x7
    1928:	str	w1, [x0, #5940]
    192c:	cmp	w1, #0x10
    1930:	b.ne	18ec <_tr_align+0xcc>  // b.any
    1934:	ldr	x2, [x0, #16]
    1938:	ldr	x1, [x0, #40]
    193c:	add	x4, x1, #0x1
    1940:	str	x4, [x0, #40]
    1944:	strb	w3, [x2, x1]
    1948:	ldr	x3, [x0, #16]
    194c:	ldr	x2, [x0, #40]
    1950:	ldrh	w1, [x0, #5936]
    1954:	add	x4, x2, #0x1
    1958:	str	x4, [x0, #40]
    195c:	lsr	w1, w1, #8
    1960:	strb	w1, [x3, x2]
    1964:	strh	wzr, [x0, #5936]
    1968:	str	wzr, [x0, #5940]
    196c:	ret
    1970:	add	w1, w1, #0x3
    1974:	strh	w3, [x0, #5936]
    1978:	str	w1, [x0, #5940]
    197c:	b	1898 <_tr_align+0x78>

0000000000001980 <_tr_flush_block>:
    1980:	stp	x29, x30, [sp, #-80]!
    1984:	cmp	x1, #0x0
    1988:	mov	x29, sp
    198c:	stp	x19, x20, [sp, #16]
    1990:	stp	x21, x22, [sp, #32]
    1994:	mov	x21, x0
    1998:	ldr	w0, [x0, #196]
    199c:	stp	x23, x24, [sp, #48]
    19a0:	mov	w22, w3
    19a4:	mov	x24, x1
    19a8:	stp	x25, x26, [sp, #64]
    19ac:	mov	x23, x2
    19b0:	cset	w26, ne  // ne = any
    19b4:	add	x25, x2, #0x4
    19b8:	cmp	w0, #0x0
    19bc:	b.le	1d9c <_tr_flush_block+0x41c>
    19c0:	mov	x19, x21
    19c4:	ldr	x1, [x19], #212
    19c8:	ldr	w0, [x1, #88]
    19cc:	cmp	w0, #0x2
    19d0:	b.eq	1d2c <_tr_flush_block+0x3ac>  // b.none
    19d4:	add	x1, x21, #0xb58
    19d8:	mov	x0, x21
    19dc:	bl	c60 <build_tree>
    19e0:	add	x20, x21, #0x9c8
    19e4:	add	x1, x21, #0xb70
    19e8:	mov	x0, x21
    19ec:	bl	c60 <build_tree>
    19f0:	ldr	w2, [x21, #2912]
    19f4:	mov	x0, x21
    19f8:	mov	x1, x19
    19fc:	bl	0 <scan_tree>
    1a00:	ldr	w2, [x21, #2936]
    1a04:	mov	x1, x20
    1a08:	bl	0 <scan_tree>
    1a0c:	add	x1, x21, #0xb88
    1a10:	bl	c60 <build_tree>
    1a14:	ldrh	w0, [x21, #2810]
    1a18:	cbnz	w0, 2078 <_tr_flush_block+0x6f8>
    1a1c:	ldrh	w0, [x21, #2754]
    1a20:	cbnz	w0, 2088 <_tr_flush_block+0x708>
    1a24:	ldrh	w0, [x21, #2806]
    1a28:	cbnz	w0, 205c <_tr_flush_block+0x6dc>
    1a2c:	ldrh	w0, [x21, #2758]
    1a30:	cbnz	w0, 2080 <_tr_flush_block+0x700>
    1a34:	ldrh	w0, [x21, #2802]
    1a38:	cbnz	w0, 2070 <_tr_flush_block+0x6f0>
    1a3c:	ldrh	w0, [x21, #2762]
    1a40:	cbnz	w0, 20a8 <_tr_flush_block+0x728>
    1a44:	ldrh	w0, [x21, #2798]
    1a48:	cbnz	w0, 20b0 <_tr_flush_block+0x730>
    1a4c:	ldrh	w0, [x21, #2766]
    1a50:	cbnz	w0, 20b8 <_tr_flush_block+0x738>
    1a54:	ldrh	w0, [x21, #2794]
    1a58:	cbnz	w0, 20c0 <_tr_flush_block+0x740>
    1a5c:	ldrh	w0, [x21, #2770]
    1a60:	cbnz	w0, 20c8 <_tr_flush_block+0x748>
    1a64:	ldrh	w0, [x21, #2790]
    1a68:	cbnz	w0, 20d0 <_tr_flush_block+0x750>
    1a6c:	ldrh	w0, [x21, #2774]
    1a70:	cbnz	w0, 2098 <_tr_flush_block+0x718>
    1a74:	ldrh	w0, [x21, #2786]
    1a78:	cbnz	w0, 20a0 <_tr_flush_block+0x720>
    1a7c:	ldrh	w0, [x21, #2778]
    1a80:	cbnz	w0, 2090 <_tr_flush_block+0x710>
    1a84:	ldrh	w0, [x21, #2782]
    1a88:	cbnz	w0, 20d8 <_tr_flush_block+0x758>
    1a8c:	ldrh	w0, [x21, #2750]
    1a90:	mov	x1, #0x9                   	// #9
    1a94:	mov	w5, #0x2                   	// #2
    1a98:	cbnz	w0, 20e0 <_tr_flush_block+0x760>
    1a9c:	ldr	x0, [x21, #5912]
    1aa0:	ldr	x4, [x21, #5920]
    1aa4:	add	x0, x0, #0xe
    1aa8:	add	x0, x0, x1
    1aac:	str	x0, [x21, #5912]
    1ab0:	add	x4, x4, #0xa
    1ab4:	add	x0, x0, #0xa
    1ab8:	lsr	x4, x4, #3
    1abc:	lsr	x3, x0, #3
    1ac0:	cmp	x3, x4
    1ac4:	csel	x0, x3, x4, ls  // ls = plast
    1ac8:	cmp	w26, #0x0
    1acc:	ccmp	x0, x25, #0x0, ne  // ne = any
    1ad0:	b.cs	1f10 <_tr_flush_block+0x590>  // b.hs, b.nlast
    1ad4:	ldr	w1, [x21, #200]
    1ad8:	ldrsh	w0, [x21, #5936]
    1adc:	cmp	w1, #0x4
    1ae0:	ldr	w1, [x21, #5940]
    1ae4:	ccmp	x3, x4, #0x2, ne  // ne = any
    1ae8:	b.cs	1dc4 <_tr_flush_block+0x444>  // b.hs, b.nlast
    1aec:	add	w2, w22, #0x4
    1af0:	cmp	w1, #0xd
    1af4:	b.gt	1f7c <_tr_flush_block+0x5fc>
    1af8:	and	w2, w2, #0xffff
    1afc:	add	w3, w1, #0x3
    1b00:	str	w3, [x21, #5940]
    1b04:	cmp	w3, #0xb
    1b08:	lsl	w1, w2, w1
    1b0c:	ldr	w2, [x21, #2912]
    1b10:	orr	w0, w0, w1
    1b14:	ldr	w15, [x21, #2936]
    1b18:	sub	w4, w2, #0x100
    1b1c:	sxth	w0, w0
    1b20:	b.le	1ff0 <_tr_flush_block+0x670>
    1b24:	and	w4, w4, #0xffff
    1b28:	mov	w6, #0x10                  	// #16
    1b2c:	ldr	x7, [x21, #16]
    1b30:	lsl	w3, w4, w3
    1b34:	ldr	x1, [x21, #40]
    1b38:	orr	w0, w0, w3
    1b3c:	add	x3, x1, #0x1
    1b40:	sxth	w0, w0
    1b44:	str	x3, [x21, #40]
    1b48:	strh	w0, [x21, #5936]
    1b4c:	strb	w0, [x7, x1]
    1b50:	ldr	x3, [x21, #16]
    1b54:	ldr	x1, [x21, #40]
    1b58:	ldrh	w0, [x21, #5936]
    1b5c:	add	x7, x1, #0x1
    1b60:	str	x7, [x21, #40]
    1b64:	lsr	w0, w0, #8
    1b68:	strb	w0, [x3, x1]
    1b6c:	ldr	w1, [x21, #5940]
    1b70:	sub	w0, w6, w1
    1b74:	sub	w1, w1, #0xb
    1b78:	str	w1, [x21, #5940]
    1b7c:	cmp	w1, #0xb
    1b80:	asr	w0, w4, w0
    1b84:	sxth	w0, w0
    1b88:	b.le	2010 <_tr_flush_block+0x690>
    1b8c:	and	w4, w15, #0xffff
    1b90:	mov	w6, #0x10                  	// #16
    1b94:	ldr	x7, [x21, #16]
    1b98:	lsl	w1, w4, w1
    1b9c:	ldr	x3, [x21, #40]
    1ba0:	orr	w0, w0, w1
    1ba4:	add	x1, x3, #0x1
    1ba8:	sxth	w0, w0
    1bac:	str	x1, [x21, #40]
    1bb0:	strh	w0, [x21, #5936]
    1bb4:	strb	w0, [x7, x3]
    1bb8:	ldr	x3, [x21, #16]
    1bbc:	ldr	x1, [x21, #40]
    1bc0:	ldrh	w0, [x21, #5936]
    1bc4:	add	x7, x1, #0x1
    1bc8:	str	x7, [x21, #40]
    1bcc:	lsr	w0, w0, #8
    1bd0:	strb	w0, [x3, x1]
    1bd4:	ldr	w3, [x21, #5940]
    1bd8:	sub	w1, w6, w3
    1bdc:	sub	w3, w3, #0xb
    1be0:	str	w3, [x21, #5940]
    1be4:	cmp	w3, #0xc
    1be8:	asr	w1, w4, w1
    1bec:	sub	w4, w5, #0x3
    1bf0:	sxth	w1, w1
    1bf4:	b.le	2034 <_tr_flush_block+0x6b4>
    1bf8:	and	w4, w4, #0xffff
    1bfc:	mov	w6, #0x10                  	// #16
    1c00:	ldr	x7, [x21, #16]
    1c04:	lsl	w0, w4, w3
    1c08:	ldr	x3, [x21, #40]
    1c0c:	orr	w0, w1, w0
    1c10:	add	x1, x3, #0x1
    1c14:	sxth	w0, w0
    1c18:	str	x1, [x21, #40]
    1c1c:	strh	w0, [x21, #5936]
    1c20:	strb	w0, [x7, x3]
    1c24:	ldr	x3, [x21, #16]
    1c28:	ldr	x1, [x21, #40]
    1c2c:	ldrh	w0, [x21, #5936]
    1c30:	add	x7, x1, #0x1
    1c34:	str	x7, [x21, #40]
    1c38:	lsr	w0, w0, #8
    1c3c:	strb	w0, [x3, x1]
    1c40:	ldr	w0, [x21, #5940]
    1c44:	sub	w1, w6, w0
    1c48:	sub	w0, w0, #0xc
    1c4c:	str	w0, [x21, #5940]
    1c50:	asr	w4, w4, w1
    1c54:	and	w4, w4, #0xffff
    1c58:	adrp	x3, 0 <scan_tree>
    1c5c:	add	x3, x3, #0x0
    1c60:	add	x3, x3, #0xa60
    1c64:	mov	w1, #0x10                  	// #16
    1c68:	add	x6, x3, w5, sxtw
    1c6c:	mov	w8, w1
    1c70:	b	1cd0 <_tr_flush_block+0x350>
    1c74:	ldr	x7, [x21, #16]
    1c78:	strh	w4, [x21, #5936]
    1c7c:	ldr	x0, [x21, #40]
    1c80:	cmp	x3, x6
    1c84:	add	x4, x0, #0x1
    1c88:	str	x4, [x21, #40]
    1c8c:	strb	w1, [x7, x0]
    1c90:	ldr	x4, [x21, #16]
    1c94:	ldr	x1, [x21, #40]
    1c98:	ldrh	w0, [x21, #5936]
    1c9c:	add	x7, x1, #0x1
    1ca0:	str	x7, [x21, #40]
    1ca4:	lsr	w0, w0, #8
    1ca8:	strb	w0, [x4, x1]
    1cac:	ldr	w0, [x21, #5940]
    1cb0:	sub	w4, w8, w0
    1cb4:	sub	w0, w0, #0xd
    1cb8:	str	w0, [x21, #5940]
    1cbc:	asr	w4, w5, w4
    1cc0:	and	w4, w4, #0xffff
    1cc4:	strh	w4, [x21, #5936]
    1cc8:	b.eq	1d04 <_tr_flush_block+0x384>  // b.none
    1ccc:	ldrb	w1, [x3, #1]!
    1cd0:	add	x1, x21, w1, sxtw #2
    1cd4:	cmp	w0, #0xd
    1cd8:	ldrh	w5, [x1, #2750]
    1cdc:	lsl	w1, w5, w0
    1ce0:	orr	w1, w1, w4
    1ce4:	and	w4, w1, #0xffff
    1ce8:	add	w0, w0, #0x3
    1cec:	sxth	w1, w1
    1cf0:	b.gt	1c74 <_tr_flush_block+0x2f4>
    1cf4:	strh	w4, [x21, #5936]
    1cf8:	cmp	x3, x6
    1cfc:	str	w0, [x21, #5940]
    1d00:	b.ne	1ccc <_tr_flush_block+0x34c>  // b.any
    1d04:	mov	x1, x19
    1d08:	mov	x0, x21
    1d0c:	bl	128 <send_tree>
    1d10:	mov	w2, w15
    1d14:	mov	x1, x20
    1d18:	bl	128 <send_tree>
    1d1c:	mov	x2, x20
    1d20:	mov	x1, x19
    1d24:	bl	748 <compress_block>
    1d28:	b	1e48 <_tr_flush_block+0x4c8>
    1d2c:	mov	x3, #0xc07f                	// #49279
    1d30:	mov	x0, x19
    1d34:	add	x4, x21, #0x154
    1d38:	movk	x3, #0xf3ff, lsl #16
    1d3c:	nop
    1d40:	tbz	w3, #0, 1d4c <_tr_flush_block+0x3cc>
    1d44:	ldrh	w2, [x0]
    1d48:	cbnz	w2, 2050 <_tr_flush_block+0x6d0>
    1d4c:	add	x0, x0, #0x4
    1d50:	lsr	x3, x3, #1
    1d54:	cmp	x4, x0
    1d58:	b.ne	1d40 <_tr_flush_block+0x3c0>  // b.any
    1d5c:	ldr	x2, [x21, #248]
    1d60:	mov	w0, #0x1                   	// #1
    1d64:	tst	x2, #0xffff0000ffff
    1d68:	b.ne	1d94 <_tr_flush_block+0x414>  // b.any
    1d6c:	ldrh	w2, [x21, #264]
    1d70:	cbnz	w2, 1d94 <_tr_flush_block+0x414>
    1d74:	add	x2, x21, #0x4d4
    1d78:	b	1d80 <_tr_flush_block+0x400>
    1d7c:	b.eq	1d94 <_tr_flush_block+0x414>  // b.none
    1d80:	ldrh	w0, [x4]
    1d84:	add	x4, x4, #0x4
    1d88:	cmp	x4, x2
    1d8c:	cbz	w0, 1d7c <_tr_flush_block+0x3fc>
    1d90:	mov	w0, #0x1                   	// #1
    1d94:	str	w0, [x1, #88]
    1d98:	b	19d4 <_tr_flush_block+0x54>
    1d9c:	cmp	w26, #0x0
    1da0:	add	x0, x2, #0x5
    1da4:	ccmp	x0, x25, #0x0, ne  // ne = any
    1da8:	add	x19, x21, #0xd4
    1dac:	add	x20, x21, #0x9c8
    1db0:	b.cs	1f10 <_tr_flush_block+0x590>  // b.hs, b.nlast
    1db4:	ldrsh	w0, [x21, #5936]
    1db8:	add	x19, x21, #0xd4
    1dbc:	ldr	w1, [x21, #5940]
    1dc0:	add	x20, x21, #0x9c8
    1dc4:	add	w2, w22, #0x2
    1dc8:	cmp	w1, #0xd
    1dcc:	b.le	1f28 <_tr_flush_block+0x5a8>
    1dd0:	and	w2, w2, #0xffff
    1dd4:	mov	w3, #0x10                  	// #16
    1dd8:	ldr	x5, [x21, #16]
    1ddc:	lsl	w1, w2, w1
    1de0:	ldr	x4, [x21, #40]
    1de4:	orr	w0, w0, w1
    1de8:	add	x1, x4, #0x1
    1dec:	sxth	w0, w0
    1df0:	str	x1, [x21, #40]
    1df4:	strh	w0, [x21, #5936]
    1df8:	strb	w0, [x5, x4]
    1dfc:	ldr	x4, [x21, #16]
    1e00:	ldr	x1, [x21, #40]
    1e04:	ldrh	w0, [x21, #5936]
    1e08:	add	x5, x1, #0x1
    1e0c:	str	x5, [x21, #40]
    1e10:	lsr	w0, w0, #8
    1e14:	strb	w0, [x4, x1]
    1e18:	ldr	w0, [x21, #5940]
    1e1c:	sub	w1, w3, w0
    1e20:	sub	w0, w0, #0xd
    1e24:	str	w0, [x21, #5940]
    1e28:	asr	w2, w2, w1
    1e2c:	strh	w2, [x21, #5936]
    1e30:	adrp	x1, 0 <scan_tree>
    1e34:	add	x1, x1, #0x0
    1e38:	add	x2, x1, #0x560
    1e3c:	mov	x0, x21
    1e40:	add	x1, x1, #0x5e0
    1e44:	bl	748 <compress_block>
    1e48:	mov	x1, x19
    1e4c:	add	x2, x21, #0x54c
    1e50:	strh	wzr, [x1], #4
    1e54:	cmp	x1, x2
    1e58:	b.ne	1e50 <_tr_flush_block+0x4d0>  // b.any
    1e5c:	mov	x1, x20
    1e60:	add	x0, x21, #0xa40
    1e64:	nop
    1e68:	strh	wzr, [x1], #4
    1e6c:	cmp	x1, x0
    1e70:	b.ne	1e68 <_tr_flush_block+0x4e8>  // b.any
    1e74:	add	x1, x21, #0xabc
    1e78:	add	x0, x21, #0xb08
    1e7c:	nop
    1e80:	strh	wzr, [x1], #4
    1e84:	cmp	x1, x0
    1e88:	b.ne	1e80 <_tr_flush_block+0x500>  // b.any
    1e8c:	mov	x0, #0x1800                	// #6144
    1e90:	add	x0, x21, x0
    1e94:	mov	w1, #0x1                   	// #1
    1e98:	strh	w1, [x21, #1236]
    1e9c:	stp	xzr, xzr, [x0, #-232]
    1ea0:	str	wzr, [x21, #5900]
    1ea4:	str	wzr, [x21, #5928]
    1ea8:	cbnz	w22, 1ec4 <_tr_flush_block+0x544>
    1eac:	ldp	x19, x20, [sp, #16]
    1eb0:	ldp	x21, x22, [sp, #32]
    1eb4:	ldp	x23, x24, [sp, #48]
    1eb8:	ldp	x25, x26, [sp, #64]
    1ebc:	ldp	x29, x30, [sp], #80
    1ec0:	ret
    1ec4:	ldr	w0, [x21, #5940]
    1ec8:	cmp	w0, #0x8
    1ecc:	b.gt	1f44 <_tr_flush_block+0x5c4>
    1ed0:	cmp	w0, #0x0
    1ed4:	b.le	1ef0 <_tr_flush_block+0x570>
    1ed8:	ldr	x1, [x21, #16]
    1edc:	ldr	x0, [x21, #40]
    1ee0:	ldrh	w2, [x21, #5936]
    1ee4:	add	x3, x0, #0x1
    1ee8:	str	x3, [x21, #40]
    1eec:	strb	w2, [x1, x0]
    1ef0:	strh	wzr, [x21, #5936]
    1ef4:	str	wzr, [x21, #5940]
    1ef8:	ldp	x19, x20, [sp, #16]
    1efc:	ldp	x21, x22, [sp, #32]
    1f00:	ldp	x23, x24, [sp, #48]
    1f04:	ldp	x25, x26, [sp, #64]
    1f08:	ldp	x29, x30, [sp], #80
    1f0c:	ret
    1f10:	mov	x2, x23
    1f14:	mov	x1, x24
    1f18:	mov	w3, w22
    1f1c:	mov	x0, x21
    1f20:	bl	15f8 <_tr_stored_block>
    1f24:	b	1e48 <_tr_flush_block+0x4c8>
    1f28:	and	w2, w2, #0xffff
    1f2c:	add	w3, w1, #0x3
    1f30:	str	w3, [x21, #5940]
    1f34:	lsl	w1, w2, w1
    1f38:	orr	w0, w0, w1
    1f3c:	strh	w0, [x21, #5936]
    1f40:	b	1e30 <_tr_flush_block+0x4b0>
    1f44:	ldr	x1, [x21, #16]
    1f48:	ldr	x0, [x21, #40]
    1f4c:	ldrh	w2, [x21, #5936]
    1f50:	add	x3, x0, #0x1
    1f54:	str	x3, [x21, #40]
    1f58:	strb	w2, [x1, x0]
    1f5c:	ldr	x2, [x21, #16]
    1f60:	ldr	x1, [x21, #40]
    1f64:	ldrh	w0, [x21, #5936]
    1f68:	add	x3, x1, #0x1
    1f6c:	str	x3, [x21, #40]
    1f70:	lsr	w0, w0, #8
    1f74:	strb	w0, [x2, x1]
    1f78:	b	1ef0 <_tr_flush_block+0x570>
    1f7c:	and	w2, w2, #0xffff
    1f80:	mov	w4, #0x10                  	// #16
    1f84:	ldr	x6, [x21, #16]
    1f88:	lsl	w1, w2, w1
    1f8c:	ldr	x3, [x21, #40]
    1f90:	orr	w0, w0, w1
    1f94:	add	x1, x3, #0x1
    1f98:	sxth	w0, w0
    1f9c:	str	x1, [x21, #40]
    1fa0:	strh	w0, [x21, #5936]
    1fa4:	strb	w0, [x6, x3]
    1fa8:	ldr	x3, [x21, #16]
    1fac:	ldr	x1, [x21, #40]
    1fb0:	ldrh	w0, [x21, #5936]
    1fb4:	add	x6, x1, #0x1
    1fb8:	str	x6, [x21, #40]
    1fbc:	lsr	w0, w0, #8
    1fc0:	strb	w0, [x3, x1]
    1fc4:	ldr	w3, [x21, #5940]
    1fc8:	ldr	w15, [x21, #2936]
    1fcc:	sub	w0, w4, w3
    1fd0:	sub	w3, w3, #0xd
    1fd4:	str	w3, [x21, #5940]
    1fd8:	cmp	w3, #0xb
    1fdc:	asr	w0, w2, w0
    1fe0:	ldr	w2, [x21, #2912]
    1fe4:	sxth	w0, w0
    1fe8:	sub	w4, w2, #0x100
    1fec:	b.gt	1b24 <_tr_flush_block+0x1a4>
    1ff0:	and	w4, w4, #0xffff
    1ff4:	add	w1, w3, #0x5
    1ff8:	str	w1, [x21, #5940]
    1ffc:	cmp	w1, #0xb
    2000:	lsl	w3, w4, w3
    2004:	orr	w0, w0, w3
    2008:	sxth	w0, w0
    200c:	b.gt	1b8c <_tr_flush_block+0x20c>
    2010:	and	w4, w15, #0xffff
    2014:	add	w3, w1, #0x5
    2018:	str	w3, [x21, #5940]
    201c:	cmp	w3, #0xc
    2020:	lsl	w1, w4, w1
    2024:	orr	w0, w0, w1
    2028:	sub	w4, w5, #0x3
    202c:	sxth	w1, w0
    2030:	b.gt	1bf8 <_tr_flush_block+0x278>
    2034:	and	w4, w4, #0xffff
    2038:	add	w0, w3, #0x4
    203c:	str	w0, [x21, #5940]
    2040:	lsl	w3, w4, w3
    2044:	orr	w1, w1, w3
    2048:	and	w4, w1, #0xffff
    204c:	b	1c58 <_tr_flush_block+0x2d8>
    2050:	mov	w0, #0x0                   	// #0
    2054:	str	w0, [x1, #88]
    2058:	b	19d4 <_tr_flush_block+0x54>
    205c:	mov	w5, #0x10                  	// #16
    2060:	sxtw	x0, w5
    2064:	add	x0, x0, #0x1
    2068:	add	x1, x0, x0, lsl #1
    206c:	b	1a9c <_tr_flush_block+0x11c>
    2070:	mov	w5, #0xe                   	// #14
    2074:	b	2060 <_tr_flush_block+0x6e0>
    2078:	mov	w5, #0x12                  	// #18
    207c:	b	2060 <_tr_flush_block+0x6e0>
    2080:	mov	w5, #0xf                   	// #15
    2084:	b	2060 <_tr_flush_block+0x6e0>
    2088:	mov	w5, #0x11                  	// #17
    208c:	b	2060 <_tr_flush_block+0x6e0>
    2090:	mov	w5, #0x5                   	// #5
    2094:	b	2060 <_tr_flush_block+0x6e0>
    2098:	mov	w5, #0x7                   	// #7
    209c:	b	2060 <_tr_flush_block+0x6e0>
    20a0:	mov	w5, #0x6                   	// #6
    20a4:	b	2060 <_tr_flush_block+0x6e0>
    20a8:	mov	w5, #0xd                   	// #13
    20ac:	b	2060 <_tr_flush_block+0x6e0>
    20b0:	mov	w5, #0xc                   	// #12
    20b4:	b	2060 <_tr_flush_block+0x6e0>
    20b8:	mov	w5, #0xb                   	// #11
    20bc:	b	2060 <_tr_flush_block+0x6e0>
    20c0:	mov	w5, #0xa                   	// #10
    20c4:	b	2060 <_tr_flush_block+0x6e0>
    20c8:	mov	w5, #0x9                   	// #9
    20cc:	b	2060 <_tr_flush_block+0x6e0>
    20d0:	mov	w5, #0x8                   	// #8
    20d4:	b	2060 <_tr_flush_block+0x6e0>
    20d8:	mov	w5, #0x4                   	// #4
    20dc:	b	2060 <_tr_flush_block+0x6e0>
    20e0:	mov	w5, #0x3                   	// #3
    20e4:	b	2060 <_tr_flush_block+0x6e0>

00000000000020e8 <_tr_tally>:
    20e8:	ldr	w3, [x0, #5900]
    20ec:	ldr	x6, [x0, #5904]
    20f0:	add	w5, w3, #0x1
    20f4:	ldr	x4, [x0, #5888]
    20f8:	strh	w1, [x6, w3, uxtw #1]
    20fc:	str	w5, [x0, #5900]
    2100:	strb	w2, [x4, w3, uxtw]
    2104:	cbnz	w1, 2130 <_tr_tally+0x48>
    2108:	add	x2, x0, w2, uxtw #2
    210c:	ldrh	w1, [x2, #212]
    2110:	add	w1, w1, #0x1
    2114:	strh	w1, [x2, #212]
    2118:	ldr	w1, [x0, #5896]
    211c:	ldr	w2, [x0, #5900]
    2120:	sub	w0, w1, #0x1
    2124:	cmp	w0, w2
    2128:	cset	w0, eq  // eq = none
    212c:	ret
    2130:	adrp	x3, 0 <scan_tree>
    2134:	add	x3, x3, #0x0
    2138:	ldr	w4, [x0, #5928]
    213c:	sub	w1, w1, #0x1
    2140:	cmp	w1, #0xff
    2144:	ldrb	w2, [x3, w2, uxtw]
    2148:	add	w4, w4, #0x1
    214c:	str	w4, [x0, #5928]
    2150:	add	x2, x0, x2, lsl #2
    2154:	ldrh	w4, [x2, #1240]
    2158:	add	w4, w4, #0x1
    215c:	strh	w4, [x2, #1240]
    2160:	b.ls	219c <_tr_tally+0xb4>  // b.plast
    2164:	lsr	w1, w1, #7
    2168:	add	x3, x3, #0x200
    216c:	add	w1, w1, #0x100
    2170:	ldrb	w1, [x3, w1, uxtw]
    2174:	add	x1, x0, w1, sxtw #2
    2178:	ldrh	w2, [x1, #2504]
    217c:	add	w2, w2, #0x1
    2180:	strh	w2, [x1, #2504]
    2184:	ldr	w1, [x0, #5896]
    2188:	ldr	w2, [x0, #5900]
    218c:	sub	w0, w1, #0x1
    2190:	cmp	w0, w2
    2194:	cset	w0, eq  // eq = none
    2198:	ret
    219c:	add	x3, x3, #0x200
    21a0:	ldrb	w1, [x3, w1, uxtw]
    21a4:	b	2174 <_tr_tally+0x8c>

zutil.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <zlibVersion>:
   0:	adrp	x0, 0 <zlibVersion>
   4:	add	x0, x0, #0x0
   8:	ret
   c:	nop

0000000000000010 <zlibCompileFlags>:
  10:	mov	x0, #0xa9                  	// #169
  14:	ret

0000000000000018 <zError>:
  18:	mov	w2, #0x2                   	// #2
  1c:	adrp	x1, 0 <zlibVersion>
  20:	sub	w2, w2, w0
  24:	add	x1, x1, #0x0
  28:	ldr	x0, [x1, w2, sxtw #3]
  2c:	ret

0000000000000030 <zcalloc>:
  30:	mul	w0, w1, w2
  34:	b	0 <malloc>

0000000000000038 <zcfree>:
  38:	mov	x0, x1
  3c:	b	0 <free>

compress.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <compress2>:
   0:	stp	x29, x30, [sp, #-176]!
   4:	mov	x29, sp
   8:	stp	x23, x24, [sp, #48]
   c:	mov	x23, x1
  10:	mov	x24, x2
  14:	stp	x19, x20, [sp, #16]
  18:	adrp	x2, 0 <compress2>
  1c:	mov	x19, x0
  20:	stp	x21, x22, [sp, #32]
  24:	mov	x20, x3
  28:	mov	w1, w4
  2c:	ldr	x22, [x23]
  30:	str	xzr, [x23]
  34:	add	x0, sp, #0x40
  38:	add	x2, x2, #0x0
  3c:	mov	w3, #0x70                  	// #112
  40:	stp	xzr, xzr, [sp, #128]
  44:	str	xzr, [sp, #144]
  48:	bl	0 <deflateInit_>
  4c:	cbnz	w0, dc <compress2+0xdc>
  50:	mov	w2, #0x0                   	// #0
  54:	mov	w3, #0x0                   	// #0
  58:	mov	x21, #0xffffffff            	// #4294967295
  5c:	str	x24, [sp, #64]
  60:	str	wzr, [sp, #72]
  64:	str	x19, [sp, #88]
  68:	str	wzr, [sp, #96]
  6c:	nop
  70:	cmp	x22, x21
  74:	add	x0, sp, #0x40
  78:	csel	x5, x22, x21, ls  // ls = plast
  7c:	cmp	x20, x21
  80:	csel	x4, x20, x21, ls  // ls = plast
  84:	mov	w1, #0x4                   	// #4
  88:	cbnz	w3, 94 <compress2+0x94>
  8c:	sub	x22, x22, x5
  90:	str	w5, [sp, #96]
  94:	cbnz	w2, a0 <compress2+0xa0>
  98:	sub	x20, x20, x4
  9c:	str	w4, [sp, #72]
  a0:	cbz	x20, ac <compress2+0xac>
  a4:	add	x0, sp, #0x40
  a8:	mov	w1, #0x0                   	// #0
  ac:	bl	0 <deflate>
  b0:	mov	w19, w0
  b4:	cbnz	w0, c4 <compress2+0xc4>
  b8:	ldr	w2, [sp, #72]
  bc:	ldr	w3, [sp, #96]
  c0:	b	70 <compress2+0x70>
  c4:	ldr	x0, [sp, #104]
  c8:	str	x0, [x23]
  cc:	add	x0, sp, #0x40
  d0:	bl	0 <deflateEnd>
  d4:	cmp	w19, #0x1
  d8:	csel	w0, wzr, w19, eq  // eq = none
  dc:	ldp	x19, x20, [sp, #16]
  e0:	ldp	x21, x22, [sp, #32]
  e4:	ldp	x23, x24, [sp, #48]
  e8:	ldp	x29, x30, [sp], #176
  ec:	ret

00000000000000f0 <compress>:
  f0:	mov	w4, #0xffffffff            	// #-1
  f4:	b	0 <compress2>

00000000000000f8 <compressBound>:
  f8:	lsr	x1, x0, #14
  fc:	add	x2, x0, #0xd
 100:	add	x1, x1, x0, lsr #12
 104:	add	x1, x1, x2
 108:	add	x0, x1, x0, lsr #25
 10c:	ret

uncompr.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <uncompress2>:
   0:	stp	x29, x30, [sp, #-208]!
   4:	mov	x29, sp
   8:	stp	x21, x22, [sp, #32]
   c:	ldr	x21, [x1]
  10:	stp	x23, x24, [sp, #48]
  14:	mov	x24, x3
  18:	stp	x25, x26, [sp, #64]
  1c:	mov	x3, x2
  20:	mov	x25, x1
  24:	ldr	x22, [x24]
  28:	cbz	x21, 13c <uncompress2+0x13c>
  2c:	mov	x26, x0
  30:	str	xzr, [x1]
  34:	add	x0, sp, #0x60
  38:	adrp	x1, 0 <uncompress2>
  3c:	mov	w2, #0x70                  	// #112
  40:	add	x1, x1, #0x0
  44:	str	x3, [sp, #96]
  48:	str	wzr, [sp, #104]
  4c:	stp	xzr, xzr, [sp, #160]
  50:	str	xzr, [sp, #176]
  54:	bl	0 <inflateInit_>
  58:	mov	w23, w0
  5c:	cbnz	w0, 124 <uncompress2+0x124>
  60:	mov	w2, #0x0                   	// #0
  64:	stp	x19, x20, [sp, #16]
  68:	mov	x20, #0xffffffff            	// #4294967295
  6c:	str	x26, [sp, #120]
  70:	str	wzr, [sp, #128]
  74:	nop
  78:	cmp	x21, x20
  7c:	add	x0, sp, #0x60
  80:	csel	x4, x21, x20, ls  // ls = plast
  84:	cmp	x22, x20
  88:	csel	x3, x22, x20, ls  // ls = plast
  8c:	mov	w1, #0x0                   	// #0
  90:	cbnz	w2, 9c <uncompress2+0x9c>
  94:	sub	x21, x21, x4
  98:	str	w4, [sp, #128]
  9c:	ldr	w2, [sp, #104]
  a0:	cbnz	w2, c0 <uncompress2+0xc0>
  a4:	sub	x22, x22, x3
  a8:	str	w3, [sp, #104]
  ac:	bl	0 <inflate>
  b0:	mov	w19, w0
  b4:	cbnz	w0, d4 <uncompress2+0xd4>
  b8:	ldr	w2, [sp, #128]
  bc:	b	78 <uncompress2+0x78>
  c0:	add	x0, sp, #0x60
  c4:	mov	w1, #0x0                   	// #0
  c8:	bl	0 <inflate>
  cc:	mov	w19, w0
  d0:	cbz	w0, b8 <uncompress2+0xb8>
  d4:	ldr	x0, [x24]
  d8:	add	x1, sp, #0x58
  dc:	ldr	w2, [sp, #104]
  e0:	cmp	x26, x1
  e4:	ldr	x1, [sp, #136]
  e8:	sub	x0, x0, x2
  ec:	sub	x22, x0, x22
  f0:	str	x22, [x24]
  f4:	b.eq	148 <uncompress2+0x148>  // b.none
  f8:	str	x1, [x25]
  fc:	add	x0, sp, #0x60
 100:	bl	0 <inflateEnd>
 104:	cmp	w19, #0x1
 108:	b.eq	120 <uncompress2+0x120>  // b.none
 10c:	cmp	w19, #0x2
 110:	b.eq	15c <uncompress2+0x15c>  // b.none
 114:	mov	w23, w19
 118:	cmn	w19, #0x5
 11c:	b.eq	168 <uncompress2+0x168>  // b.none
 120:	ldp	x19, x20, [sp, #16]
 124:	mov	w0, w23
 128:	ldp	x21, x22, [sp, #32]
 12c:	ldp	x23, x24, [sp, #48]
 130:	ldp	x25, x26, [sp, #64]
 134:	ldp	x29, x30, [sp], #208
 138:	ret
 13c:	add	x26, sp, #0x58
 140:	mov	x21, #0x1                   	// #1
 144:	b	34 <uncompress2+0x34>
 148:	cmp	x1, #0x0
 14c:	ccmn	w19, #0x5, #0x0, ne  // ne = any
 150:	b.ne	fc <uncompress2+0xfc>  // b.any
 154:	add	x0, sp, #0x60
 158:	bl	0 <inflateEnd>
 15c:	mov	w23, #0xfffffffd            	// #-3
 160:	ldp	x19, x20, [sp, #16]
 164:	b	124 <uncompress2+0x124>
 168:	ldr	w0, [sp, #128]
 16c:	cmn	x0, x21
 170:	b.ne	15c <uncompress2+0x15c>  // b.any
 174:	ldp	x19, x20, [sp, #16]
 178:	b	124 <uncompress2+0x124>
 17c:	nop

0000000000000180 <uncompress>:
 180:	stp	x29, x30, [sp, #-32]!
 184:	mov	x29, sp
 188:	str	x3, [sp, #24]
 18c:	add	x3, sp, #0x18
 190:	bl	0 <uncompress2>
 194:	ldp	x29, x30, [sp], #32
 198:	ret

gzclose.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gzclose>:
   0:	cbz	x0, 1c <gzclose+0x1c>
   4:	ldr	w2, [x0, #24]
   8:	mov	w1, #0x1c4f                	// #7247
   c:	cmp	w2, w1
  10:	b.eq	18 <gzclose+0x18>  // b.none
  14:	b	0 <gzclose_w>
  18:	b	0 <gzclose_r>
  1c:	mov	w0, #0xfffffffe            	// #-2
  20:	ret

gzlib.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gz_open>:
   0:	stp	x29, x30, [sp, #-64]!
   4:	mov	x29, sp
   8:	stp	x19, x20, [sp, #16]
   c:	cbz	x0, 288 <gz_open+0x288>
  10:	mov	x20, x2
  14:	stp	x21, x22, [sp, #32]
  18:	mov	w22, w1
  1c:	stp	x23, x24, [sp, #48]
  20:	mov	x23, x0
  24:	mov	x0, #0xe8                  	// #232
  28:	bl	0 <malloc>
  2c:	mov	x19, x0
  30:	cbz	x0, 280 <gz_open+0x280>
  34:	adrp	x0, 0 <gz_open>
  38:	movi	d0, #0xffffffff
  3c:	ldrb	w4, [x20]
  40:	mov	w21, #0x0                   	// #0
  44:	ldr	d1, [x0]
  48:	mov	w24, #0x0                   	// #0
  4c:	str	wzr, [x19, #24]
  50:	str	wzr, [x19, #64]
  54:	str	xzr, [x19, #112]
  58:	str	d1, [x19, #40]
  5c:	str	d0, [x19, #88]
  60:	cbz	w4, 224 <gz_open+0x224>
  64:	mov	w8, #0x1c4f                	// #7247
  68:	mov	w7, #0x79b1                	// #31153
  6c:	mov	w6, #0x1                   	// #1
  70:	mov	w3, #0x2                   	// #2
  74:	mov	w1, #0x3                   	// #3
  78:	mov	w0, #0x4                   	// #4
  7c:	b	8c <gz_open+0x8c>
  80:	str	w5, [x19, #88]
  84:	ldrb	w4, [x20, #1]!
  88:	cbz	w4, d0 <gz_open+0xd0>
  8c:	sub	w5, w4, #0x30
  90:	and	w2, w5, #0xff
  94:	cmp	w2, #0x9
  98:	b.ls	80 <gz_open+0x80>  // b.plast
  9c:	cmp	w4, #0x65
  a0:	b.eq	270 <gz_open+0x270>  // b.none
  a4:	b.hi	1cc <gz_open+0x1cc>  // b.pmore
  a8:	cmp	w4, #0x52
  ac:	b.eq	268 <gz_open+0x268>  // b.none
  b0:	b.ls	1ec <gz_open+0x1ec>  // b.plast
  b4:	cmp	w4, #0x54
  b8:	b.eq	258 <gz_open+0x258>  // b.none
  bc:	cmp	w4, #0x61
  c0:	b.ne	84 <gz_open+0x84>  // b.any
  c4:	ldrb	w4, [x20, #1]!
  c8:	str	w6, [x19, #24]
  cc:	cbnz	w4, 8c <gz_open+0x8c>
  d0:	ldr	w0, [x19, #24]
  d4:	cbz	w0, 224 <gz_open+0x224>
  d8:	mov	w1, #0x1c4f                	// #7247
  dc:	cmp	w0, w1
  e0:	b.ne	f4 <gz_open+0xf4>  // b.any
  e4:	ldr	w0, [x19, #64]
  e8:	cbnz	w0, 224 <gz_open+0x224>
  ec:	mov	w0, #0x1                   	// #1
  f0:	str	w0, [x19, #64]
  f4:	mov	x0, x23
  f8:	bl	0 <strlen>
  fc:	add	x20, x0, #0x1
 100:	mov	x0, x20
 104:	bl	0 <malloc>
 108:	str	x0, [x19, #32]
 10c:	cbz	x0, 224 <gz_open+0x224>
 110:	mov	x1, x20
 114:	mov	x3, x23
 118:	adrp	x2, 0 <gz_open>
 11c:	add	x2, x2, #0x0
 120:	bl	0 <snprintf>
 124:	ldr	w0, [x19, #24]
 128:	cmp	w24, #0x0
 12c:	mov	w2, #0x80000               	// #524288
 130:	mov	w1, #0x1c4f                	// #7247
 134:	csel	w24, w24, w2, eq  // eq = none
 138:	cmp	w0, w1
 13c:	b.eq	16c <gz_open+0x16c>  // b.none
 140:	cmp	w21, #0x0
 144:	mov	w2, #0x441                 	// #1089
 148:	mov	w1, #0x4c1                 	// #1217
 14c:	mov	w4, #0x241                 	// #577
 150:	csel	w1, w1, w2, ne  // ne = any
 154:	mov	w3, #0x79b1                	// #31153
 158:	mov	w2, #0x2c1                 	// #705
 15c:	csel	w2, w2, w4, ne  // ne = any
 160:	cmp	w0, w3
 164:	csel	w1, w1, w2, ne  // ne = any
 168:	orr	w24, w24, w1
 16c:	tbnz	w22, #31, 29c <gz_open+0x29c>
 170:	str	w22, [x19, #28]
 174:	cmp	w0, #0x1
 178:	b.eq	2c4 <gz_open+0x2c4>  // b.none
 17c:	mov	w1, #0x1c4f                	// #7247
 180:	cmp	w0, w1
 184:	b.eq	2e4 <gz_open+0x2e4>  // b.none
 188:	str	wzr, [x19]
 18c:	ldr	x0, [x19, #112]
 190:	str	wzr, [x19, #104]
 194:	cbz	x0, 1a8 <gz_open+0x1a8>
 198:	ldr	w1, [x19, #108]
 19c:	cmn	w1, #0x4
 1a0:	b.ne	278 <gz_open+0x278>  // b.any
 1a4:	str	xzr, [x19, #112]
 1a8:	ldp	x21, x22, [sp, #32]
 1ac:	mov	x0, x19
 1b0:	ldp	x23, x24, [sp, #48]
 1b4:	str	xzr, [x19, #16]
 1b8:	str	wzr, [x19, #108]
 1bc:	str	wzr, [x19, #128]
 1c0:	ldp	x19, x20, [sp, #16]
 1c4:	ldp	x29, x30, [sp], #64
 1c8:	ret
 1cc:	cmp	w4, #0x72
 1d0:	b.eq	260 <gz_open+0x260>  // b.none
 1d4:	b.ls	204 <gz_open+0x204>  // b.plast
 1d8:	cmp	w4, #0x77
 1dc:	b.eq	250 <gz_open+0x250>  // b.none
 1e0:	cmp	w4, #0x78
 1e4:	csel	w21, w21, w6, ne  // ne = any
 1e8:	b	84 <gz_open+0x84>
 1ec:	cmp	w4, #0x2b
 1f0:	b.eq	224 <gz_open+0x224>  // b.none
 1f4:	cmp	w4, #0x46
 1f8:	b.ne	84 <gz_open+0x84>  // b.any
 1fc:	str	w0, [x19, #92]
 200:	b	84 <gz_open+0x84>
 204:	cmp	w4, #0x66
 208:	b.eq	248 <gz_open+0x248>  // b.none
 20c:	cmp	w4, #0x68
 210:	b.ne	84 <gz_open+0x84>  // b.any
 214:	str	w3, [x19, #92]
 218:	b	84 <gz_open+0x84>
 21c:	ldr	x0, [x19, #32]
 220:	bl	0 <free>
 224:	mov	x0, x19
 228:	mov	x19, #0x0                   	// #0
 22c:	bl	0 <free>
 230:	mov	x0, x19
 234:	ldp	x19, x20, [sp, #16]
 238:	ldp	x21, x22, [sp, #32]
 23c:	ldp	x23, x24, [sp, #48]
 240:	ldp	x29, x30, [sp], #64
 244:	ret
 248:	str	w6, [x19, #92]
 24c:	b	84 <gz_open+0x84>
 250:	str	w7, [x19, #24]
 254:	b	84 <gz_open+0x84>
 258:	str	w6, [x19, #64]
 25c:	b	84 <gz_open+0x84>
 260:	str	w8, [x19, #24]
 264:	b	84 <gz_open+0x84>
 268:	str	w1, [x19, #92]
 26c:	b	84 <gz_open+0x84>
 270:	mov	w24, #0x1                   	// #1
 274:	b	84 <gz_open+0x84>
 278:	bl	0 <free>
 27c:	b	1a4 <gz_open+0x1a4>
 280:	ldp	x21, x22, [sp, #32]
 284:	ldp	x23, x24, [sp, #48]
 288:	mov	x19, #0x0                   	// #0
 28c:	mov	x0, x19
 290:	ldp	x19, x20, [sp, #16]
 294:	ldp	x29, x30, [sp], #64
 298:	ret
 29c:	mov	w1, w24
 2a0:	mov	x0, x23
 2a4:	mov	w2, #0x1b6                 	// #438
 2a8:	bl	0 <open>
 2ac:	str	w0, [x19, #28]
 2b0:	mov	w22, w0
 2b4:	cmn	w0, #0x1
 2b8:	b.eq	21c <gz_open+0x21c>  // b.none
 2bc:	ldr	w0, [x19, #24]
 2c0:	b	174 <gz_open+0x174>
 2c4:	mov	w0, w22
 2c8:	mov	w2, #0x2                   	// #2
 2cc:	mov	x1, #0x0                   	// #0
 2d0:	bl	0 <lseek64>
 2d4:	mov	w0, #0x79b1                	// #31153
 2d8:	str	wzr, [x19]
 2dc:	str	w0, [x19, #24]
 2e0:	b	18c <gz_open+0x18c>
 2e4:	mov	x1, #0x0                   	// #0
 2e8:	mov	w0, w22
 2ec:	mov	w2, #0x1                   	// #1
 2f0:	bl	0 <lseek64>
 2f4:	str	x0, [x19, #72]
 2f8:	cmn	x0, #0x1
 2fc:	ldr	w1, [x19, #24]
 300:	b.ne	308 <gz_open+0x308>  // b.any
 304:	str	xzr, [x19, #72]
 308:	str	wzr, [x19]
 30c:	mov	w0, #0x1c4f                	// #7247
 310:	cmp	w1, w0
 314:	b.ne	18c <gz_open+0x18c>  // b.any
 318:	str	wzr, [x19, #68]
 31c:	str	xzr, [x19, #80]
 320:	b	18c <gz_open+0x18c>
 324:	nop

0000000000000328 <gzopen>:
 328:	mov	x2, x1
 32c:	mov	w1, #0xffffffff            	// #-1
 330:	b	0 <gz_open>
 334:	nop

0000000000000338 <gzopen64>:
 338:	mov	x2, x1
 33c:	mov	w1, #0xffffffff            	// #-1
 340:	b	0 <gz_open>
 344:	nop

0000000000000348 <gzdopen>:
 348:	stp	x29, x30, [sp, #-48]!
 34c:	cmn	w0, #0x1
 350:	mov	x29, sp
 354:	stp	x19, x20, [sp, #16]
 358:	b.eq	3c0 <gzdopen+0x78>  // b.none
 35c:	mov	w19, w0
 360:	mov	x0, #0x13                  	// #19
 364:	str	x21, [sp, #32]
 368:	mov	x21, x1
 36c:	bl	0 <malloc>
 370:	mov	x20, x0
 374:	cbz	x0, 3bc <gzdopen+0x74>
 378:	mov	w3, w19
 37c:	mov	x1, #0x13                  	// #19
 380:	adrp	x2, 0 <gz_open>
 384:	add	x2, x2, #0x0
 388:	bl	0 <snprintf>
 38c:	mov	x2, x21
 390:	mov	w1, w19
 394:	mov	x0, x20
 398:	bl	0 <gz_open>
 39c:	mov	x19, x0
 3a0:	mov	x0, x20
 3a4:	bl	0 <free>
 3a8:	mov	x0, x19
 3ac:	ldp	x19, x20, [sp, #16]
 3b0:	ldr	x21, [sp, #32]
 3b4:	ldp	x29, x30, [sp], #48
 3b8:	ret
 3bc:	ldr	x21, [sp, #32]
 3c0:	mov	x19, #0x0                   	// #0
 3c4:	mov	x0, x19
 3c8:	ldp	x19, x20, [sp, #16]
 3cc:	ldp	x29, x30, [sp], #48
 3d0:	ret
 3d4:	nop

00000000000003d8 <gzbuffer>:
 3d8:	mov	x2, x0
 3dc:	cbz	x0, 41c <gzbuffer+0x44>
 3e0:	ldr	w0, [x0, #24]
 3e4:	mov	w4, #0x1c4f                	// #7247
 3e8:	mov	w3, #0x79b1                	// #31153
 3ec:	cmp	w0, w4
 3f0:	ccmp	w0, w3, #0x4, ne  // ne = any
 3f4:	b.ne	41c <gzbuffer+0x44>  // b.any
 3f8:	ldr	w0, [x2, #40]
 3fc:	cbnz	w0, 41c <gzbuffer+0x44>
 400:	cmp	w1, w1, lsl #1
 404:	b.hi	41c <gzbuffer+0x44>  // b.pmore
 408:	cmp	w1, #0x2
 40c:	mov	w3, #0x2                   	// #2
 410:	csel	w1, w1, w3, cs  // cs = hs, nlast
 414:	str	w1, [x2, #44]
 418:	ret
 41c:	mov	w0, #0xffffffff            	// #-1
 420:	ret
 424:	nop

0000000000000428 <gzrewind>:
 428:	cbz	x0, 4d4 <gzrewind+0xac>
 42c:	stp	x29, x30, [sp, #-32]!
 430:	mov	x29, sp
 434:	stp	x19, x20, [sp, #16]
 438:	mov	x19, x0
 43c:	mov	w0, #0x1c4f                	// #7247
 440:	ldr	w20, [x19, #24]
 444:	cmp	w20, w0
 448:	b.ne	4cc <gzrewind+0xa4>  // b.any
 44c:	ldr	w0, [x19, #108]
 450:	cmp	w0, #0x0
 454:	ccmn	w0, #0x5, #0x4, ne  // ne = any
 458:	b.ne	4cc <gzrewind+0xa4>  // b.any
 45c:	ldr	w0, [x19, #28]
 460:	mov	w2, #0x0                   	// #0
 464:	ldr	x1, [x19, #72]
 468:	bl	0 <lseek64>
 46c:	cmn	x0, #0x1
 470:	b.eq	4cc <gzrewind+0xa4>  // b.none
 474:	ldr	w0, [x19, #24]
 478:	str	wzr, [x19]
 47c:	cmp	w0, w20
 480:	b.ne	48c <gzrewind+0x64>  // b.any
 484:	str	wzr, [x19, #68]
 488:	str	xzr, [x19, #80]
 48c:	ldr	x0, [x19, #112]
 490:	str	wzr, [x19, #104]
 494:	cbz	x0, 4a8 <gzrewind+0x80>
 498:	ldr	w1, [x19, #108]
 49c:	cmn	w1, #0x4
 4a0:	b.ne	4c4 <gzrewind+0x9c>  // b.any
 4a4:	str	xzr, [x19, #112]
 4a8:	mov	w0, #0x0                   	// #0
 4ac:	str	xzr, [x19, #16]
 4b0:	str	wzr, [x19, #108]
 4b4:	str	wzr, [x19, #128]
 4b8:	ldp	x19, x20, [sp, #16]
 4bc:	ldp	x29, x30, [sp], #32
 4c0:	ret
 4c4:	bl	0 <free>
 4c8:	b	4a4 <gzrewind+0x7c>
 4cc:	mov	w0, #0xffffffff            	// #-1
 4d0:	b	4b8 <gzrewind+0x90>
 4d4:	mov	w0, #0xffffffff            	// #-1
 4d8:	ret
 4dc:	nop

00000000000004e0 <gzseek64>:
 4e0:	cbz	x0, 680 <gzseek64+0x1a0>
 4e4:	stp	x29, x30, [sp, #-48]!
 4e8:	mov	x29, sp
 4ec:	stp	x19, x20, [sp, #16]
 4f0:	mov	x19, x0
 4f4:	mov	x20, x1
 4f8:	str	x21, [sp, #32]
 4fc:	mov	w1, #0x1c4f                	// #7247
 500:	ldr	w21, [x19, #24]
 504:	mov	w0, #0x79b1                	// #31153
 508:	cmp	w21, w1
 50c:	ccmp	w21, w0, #0x4, ne  // ne = any
 510:	b.ne	620 <gzseek64+0x140>  // b.any
 514:	ldr	w0, [x19, #108]
 518:	cmp	w0, #0x0
 51c:	ccmn	w0, #0x5, #0x4, ne  // ne = any
 520:	b.ne	620 <gzseek64+0x140>  // b.any
 524:	cmp	w2, #0x1
 528:	b.hi	620 <gzseek64+0x140>  // b.pmore
 52c:	cbz	w2, 57c <gzseek64+0x9c>
 530:	ldr	w0, [x19, #104]
 534:	cbz	w0, 540 <gzseek64+0x60>
 538:	ldr	x0, [x19, #96]
 53c:	add	x20, x20, x0
 540:	str	wzr, [x19, #104]
 544:	mov	w0, #0x1c4f                	// #7247
 548:	cmp	w21, w0
 54c:	b.eq	594 <gzseek64+0xb4>  // b.none
 550:	tbnz	x20, #63, 620 <gzseek64+0x140>
 554:	ldr	x0, [x19, #16]
 558:	cbz	x20, 568 <gzseek64+0x88>
 55c:	mov	w1, #0x1                   	// #1
 560:	str	x20, [x19, #96]
 564:	str	w1, [x19, #104]
 568:	add	x0, x20, x0
 56c:	ldp	x19, x20, [sp, #16]
 570:	ldr	x21, [sp, #32]
 574:	ldp	x29, x30, [sp], #48
 578:	ret
 57c:	ldr	x0, [x19, #16]
 580:	str	wzr, [x19, #104]
 584:	sub	x20, x20, x0
 588:	mov	w0, #0x1c4f                	// #7247
 58c:	cmp	w21, w0
 590:	b.ne	550 <gzseek64+0x70>  // b.any
 594:	ldr	w2, [x19, #68]
 598:	ldr	x0, [x19, #16]
 59c:	cmp	w2, #0x1
 5a0:	b.eq	610 <gzseek64+0x130>  // b.none
 5a4:	tbz	x20, #63, 5d0 <gzseek64+0xf0>
 5a8:	adds	x20, x20, x0
 5ac:	b.mi	620 <gzseek64+0x140>  // b.first
 5b0:	mov	x0, x19
 5b4:	bl	428 <gzrewind>
 5b8:	cmn	w0, #0x1
 5bc:	b.eq	620 <gzseek64+0x140>  // b.none
 5c0:	ldr	w1, [x19, #24]
 5c4:	ldr	x0, [x19, #16]
 5c8:	cmp	w1, w21
 5cc:	b.ne	558 <gzseek64+0x78>  // b.any
 5d0:	ldr	w2, [x19]
 5d4:	mov	w4, #0x0                   	// #0
 5d8:	mov	w1, w2
 5dc:	cmp	x1, x20
 5e0:	mov	x3, x1
 5e4:	b.le	5f4 <gzseek64+0x114>
 5e8:	sub	w4, w2, w20
 5ec:	mov	x3, x20
 5f0:	mov	w1, w20
 5f4:	ldr	x2, [x19, #8]
 5f8:	add	x0, x0, x3
 5fc:	sub	x20, x20, x3
 600:	str	w4, [x19]
 604:	add	x1, x2, x1
 608:	stp	x1, x0, [x19, #8]
 60c:	b	558 <gzseek64+0x78>
 610:	cmn	x20, x0
 614:	b.pl	628 <gzseek64+0x148>  // b.nfrst
 618:	tbz	x20, #63, 5d0 <gzseek64+0xf0>
 61c:	nop
 620:	mov	x0, #0xffffffffffffffff    	// #-1
 624:	b	56c <gzseek64+0x8c>
 628:	ldr	w0, [x19, #28]
 62c:	ldr	w1, [x19]
 630:	sub	x1, x20, x1
 634:	bl	0 <lseek64>
 638:	cmn	x0, #0x1
 63c:	b.eq	620 <gzseek64+0x140>  // b.none
 640:	ldr	x0, [x19, #112]
 644:	str	wzr, [x19]
 648:	str	xzr, [x19, #80]
 64c:	str	wzr, [x19, #104]
 650:	cbz	x0, 668 <gzseek64+0x188>
 654:	ldr	w1, [x19, #108]
 658:	cmn	w1, #0x4
 65c:	b.eq	664 <gzseek64+0x184>  // b.none
 660:	bl	0 <free>
 664:	str	xzr, [x19, #112]
 668:	ldr	x0, [x19, #16]
 66c:	str	wzr, [x19, #108]
 670:	str	wzr, [x19, #128]
 674:	add	x0, x20, x0
 678:	str	x0, [x19, #16]
 67c:	b	56c <gzseek64+0x8c>
 680:	mov	x0, #0xffffffffffffffff    	// #-1
 684:	ret

0000000000000688 <gzseek>:
 688:	cbz	x0, 828 <gzseek+0x1a0>
 68c:	stp	x29, x30, [sp, #-48]!
 690:	mov	x29, sp
 694:	stp	x19, x20, [sp, #16]
 698:	mov	x19, x0
 69c:	mov	x20, x1
 6a0:	str	x21, [sp, #32]
 6a4:	mov	w1, #0x1c4f                	// #7247
 6a8:	ldr	w21, [x19, #24]
 6ac:	mov	w0, #0x79b1                	// #31153
 6b0:	cmp	w21, w1
 6b4:	ccmp	w21, w0, #0x4, ne  // ne = any
 6b8:	b.ne	7c8 <gzseek+0x140>  // b.any
 6bc:	ldr	w0, [x19, #108]
 6c0:	cmp	w0, #0x0
 6c4:	ccmn	w0, #0x5, #0x4, ne  // ne = any
 6c8:	b.ne	7c8 <gzseek+0x140>  // b.any
 6cc:	cmp	w2, #0x1
 6d0:	b.hi	7c8 <gzseek+0x140>  // b.pmore
 6d4:	cbz	w2, 724 <gzseek+0x9c>
 6d8:	ldr	w0, [x19, #104]
 6dc:	cbz	w0, 6e8 <gzseek+0x60>
 6e0:	ldr	x0, [x19, #96]
 6e4:	add	x20, x20, x0
 6e8:	str	wzr, [x19, #104]
 6ec:	mov	w0, #0x1c4f                	// #7247
 6f0:	cmp	w21, w0
 6f4:	b.eq	73c <gzseek+0xb4>  // b.none
 6f8:	tbnz	x20, #63, 7c8 <gzseek+0x140>
 6fc:	ldr	x0, [x19, #16]
 700:	cbz	x20, 710 <gzseek+0x88>
 704:	mov	w1, #0x1                   	// #1
 708:	str	x20, [x19, #96]
 70c:	str	w1, [x19, #104]
 710:	add	x0, x20, x0
 714:	ldp	x19, x20, [sp, #16]
 718:	ldr	x21, [sp, #32]
 71c:	ldp	x29, x30, [sp], #48
 720:	ret
 724:	ldr	x0, [x19, #16]
 728:	str	wzr, [x19, #104]
 72c:	sub	x20, x20, x0
 730:	mov	w0, #0x1c4f                	// #7247
 734:	cmp	w21, w0
 738:	b.ne	6f8 <gzseek+0x70>  // b.any
 73c:	ldr	w2, [x19, #68]
 740:	ldr	x0, [x19, #16]
 744:	cmp	w2, #0x1
 748:	b.eq	7b8 <gzseek+0x130>  // b.none
 74c:	tbz	x20, #63, 778 <gzseek+0xf0>
 750:	adds	x20, x20, x0
 754:	b.mi	7c8 <gzseek+0x140>  // b.first
 758:	mov	x0, x19
 75c:	bl	428 <gzrewind>
 760:	cmn	w0, #0x1
 764:	b.eq	7c8 <gzseek+0x140>  // b.none
 768:	ldr	w1, [x19, #24]
 76c:	ldr	x0, [x19, #16]
 770:	cmp	w1, w21
 774:	b.ne	700 <gzseek+0x78>  // b.any
 778:	ldr	w2, [x19]
 77c:	mov	w4, #0x0                   	// #0
 780:	mov	w1, w2
 784:	cmp	x1, x20
 788:	mov	x3, x1
 78c:	b.le	79c <gzseek+0x114>
 790:	sub	w4, w2, w20
 794:	mov	x3, x20
 798:	mov	w1, w20
 79c:	ldr	x2, [x19, #8]
 7a0:	add	x0, x0, x3
 7a4:	sub	x20, x20, x3
 7a8:	str	w4, [x19]
 7ac:	add	x1, x2, x1
 7b0:	stp	x1, x0, [x19, #8]
 7b4:	b	700 <gzseek+0x78>
 7b8:	cmn	x20, x0
 7bc:	b.pl	7d0 <gzseek+0x148>  // b.nfrst
 7c0:	tbz	x20, #63, 778 <gzseek+0xf0>
 7c4:	nop
 7c8:	mov	x0, #0xffffffffffffffff    	// #-1
 7cc:	b	714 <gzseek+0x8c>
 7d0:	ldr	w0, [x19, #28]
 7d4:	ldr	w1, [x19]
 7d8:	sub	x1, x20, x1
 7dc:	bl	0 <lseek64>
 7e0:	cmn	x0, #0x1
 7e4:	b.eq	7c8 <gzseek+0x140>  // b.none
 7e8:	ldr	x0, [x19, #112]
 7ec:	str	wzr, [x19]
 7f0:	str	xzr, [x19, #80]
 7f4:	str	wzr, [x19, #104]
 7f8:	cbz	x0, 810 <gzseek+0x188>
 7fc:	ldr	w1, [x19, #108]
 800:	cmn	w1, #0x4
 804:	b.eq	80c <gzseek+0x184>  // b.none
 808:	bl	0 <free>
 80c:	str	xzr, [x19, #112]
 810:	ldr	x0, [x19, #16]
 814:	str	wzr, [x19, #108]
 818:	str	wzr, [x19, #128]
 81c:	add	x0, x20, x0
 820:	str	x0, [x19, #16]
 824:	b	714 <gzseek+0x8c>
 828:	mov	x0, #0xffffffffffffffff    	// #-1
 82c:	ret

0000000000000830 <gztell64>:
 830:	mov	x1, x0
 834:	cbz	x0, 868 <gztell64+0x38>
 838:	ldr	w0, [x0, #24]
 83c:	mov	w3, #0x1c4f                	// #7247
 840:	mov	w2, #0x79b1                	// #31153
 844:	cmp	w0, w3
 848:	ccmp	w0, w2, #0x4, ne  // ne = any
 84c:	b.ne	868 <gztell64+0x38>  // b.any
 850:	ldr	w2, [x1, #104]
 854:	ldr	x0, [x1, #16]
 858:	cbz	w2, 864 <gztell64+0x34>
 85c:	ldr	x1, [x1, #96]
 860:	add	x0, x0, x1
 864:	ret
 868:	mov	x0, #0xffffffffffffffff    	// #-1
 86c:	ret

0000000000000870 <gztell>:
 870:	mov	x1, x0
 874:	cbz	x0, 8a8 <gztell+0x38>
 878:	ldr	w0, [x0, #24]
 87c:	mov	w3, #0x1c4f                	// #7247
 880:	mov	w2, #0x79b1                	// #31153
 884:	cmp	w0, w3
 888:	ccmp	w0, w2, #0x4, ne  // ne = any
 88c:	b.ne	8a8 <gztell+0x38>  // b.any
 890:	ldr	w2, [x1, #104]
 894:	ldr	x0, [x1, #16]
 898:	cbz	w2, 8a4 <gztell+0x34>
 89c:	ldr	x1, [x1, #96]
 8a0:	add	x0, x0, x1
 8a4:	ret
 8a8:	mov	x0, #0xffffffffffffffff    	// #-1
 8ac:	ret

00000000000008b0 <gzoffset64>:
 8b0:	cbz	x0, 91c <gzoffset64+0x6c>
 8b4:	stp	x29, x30, [sp, #-32]!
 8b8:	mov	w1, #0x79b1                	// #31153
 8bc:	mov	x29, sp
 8c0:	stp	x19, x20, [sp, #16]
 8c4:	mov	x19, x0
 8c8:	ldr	w0, [x0, #24]
 8cc:	mov	w20, #0x1c4f                	// #7247
 8d0:	cmp	w0, w20
 8d4:	ccmp	w0, w1, #0x4, ne  // ne = any
 8d8:	b.ne	914 <gzoffset64+0x64>  // b.any
 8dc:	ldr	w0, [x19, #28]
 8e0:	mov	w2, #0x1                   	// #1
 8e4:	mov	x1, #0x0                   	// #0
 8e8:	bl	0 <lseek64>
 8ec:	cmn	x0, #0x1
 8f0:	b.eq	914 <gzoffset64+0x64>  // b.none
 8f4:	ldr	w1, [x19, #24]
 8f8:	cmp	w1, w20
 8fc:	b.ne	908 <gzoffset64+0x58>  // b.any
 900:	ldr	w1, [x19, #128]
 904:	sub	x0, x0, x1
 908:	ldp	x19, x20, [sp, #16]
 90c:	ldp	x29, x30, [sp], #32
 910:	ret
 914:	mov	x0, #0xffffffffffffffff    	// #-1
 918:	b	908 <gzoffset64+0x58>
 91c:	mov	x0, #0xffffffffffffffff    	// #-1
 920:	ret
 924:	nop

0000000000000928 <gzoffset>:
 928:	cbz	x0, 994 <gzoffset+0x6c>
 92c:	stp	x29, x30, [sp, #-32]!
 930:	mov	w1, #0x79b1                	// #31153
 934:	mov	x29, sp
 938:	stp	x19, x20, [sp, #16]
 93c:	mov	x19, x0
 940:	ldr	w0, [x0, #24]
 944:	mov	w20, #0x1c4f                	// #7247
 948:	cmp	w0, w20
 94c:	ccmp	w0, w1, #0x4, ne  // ne = any
 950:	b.ne	98c <gzoffset+0x64>  // b.any
 954:	ldr	w0, [x19, #28]
 958:	mov	w2, #0x1                   	// #1
 95c:	mov	x1, #0x0                   	// #0
 960:	bl	0 <lseek64>
 964:	cmn	x0, #0x1
 968:	b.eq	98c <gzoffset+0x64>  // b.none
 96c:	ldr	w1, [x19, #24]
 970:	cmp	w1, w20
 974:	b.ne	980 <gzoffset+0x58>  // b.any
 978:	ldr	w1, [x19, #128]
 97c:	sub	x0, x0, x1
 980:	ldp	x19, x20, [sp, #16]
 984:	ldp	x29, x30, [sp], #32
 988:	ret
 98c:	mov	x0, #0xffffffffffffffff    	// #-1
 990:	b	980 <gzoffset+0x58>
 994:	mov	x0, #0xffffffffffffffff    	// #-1
 998:	ret
 99c:	nop

00000000000009a0 <gzeof>:
 9a0:	mov	x1, x0
 9a4:	cbz	x0, 9c8 <gzeof+0x28>
 9a8:	ldr	w3, [x1, #24]
 9ac:	mov	w2, #0x1c4f                	// #7247
 9b0:	mov	w0, #0x0                   	// #0
 9b4:	cmp	w3, w2
 9b8:	b.eq	9c0 <gzeof+0x20>  // b.none
 9bc:	ret
 9c0:	ldr	w0, [x1, #84]
 9c4:	ret
 9c8:	mov	w0, #0x0                   	// #0
 9cc:	ret

00000000000009d0 <gzerror>:
 9d0:	cbz	x0, a28 <gzerror+0x58>
 9d4:	ldr	w2, [x0, #24]
 9d8:	mov	w4, #0x1c4f                	// #7247
 9dc:	mov	w3, #0x79b1                	// #31153
 9e0:	cmp	w2, w4
 9e4:	ccmp	w2, w3, #0x4, ne  // ne = any
 9e8:	b.ne	a28 <gzerror+0x58>  // b.any
 9ec:	ldr	w2, [x0, #108]
 9f0:	cbz	x1, 9fc <gzerror+0x2c>
 9f4:	str	w2, [x1]
 9f8:	ldr	w2, [x0, #108]
 9fc:	cmn	w2, #0x4
 a00:	b.eq	a1c <gzerror+0x4c>  // b.none
 a04:	ldr	x0, [x0, #112]
 a08:	adrp	x1, 0 <gz_open>
 a0c:	add	x1, x1, #0x0
 a10:	cmp	x0, #0x0
 a14:	csel	x0, x1, x0, eq  // eq = none
 a18:	ret
 a1c:	adrp	x0, 0 <gz_open>
 a20:	add	x0, x0, #0x0
 a24:	ret
 a28:	mov	x0, #0x0                   	// #0
 a2c:	ret

0000000000000a30 <gzclearerr>:
 a30:	cbz	x0, aa8 <gzclearerr+0x78>
 a34:	stp	x29, x30, [sp, #-32]!
 a38:	mov	w1, #0x1c4f                	// #7247
 a3c:	mov	w2, #0x79b1                	// #31153
 a40:	mov	x29, sp
 a44:	str	x19, [sp, #16]
 a48:	mov	x19, x0
 a4c:	ldr	w0, [x0, #24]
 a50:	cmp	w0, w1
 a54:	ccmp	w0, w2, #0x4, ne  // ne = any
 a58:	b.ne	a80 <gzclearerr+0x50>  // b.any
 a5c:	cmp	w0, w1
 a60:	b.eq	a98 <gzclearerr+0x68>  // b.none
 a64:	ldr	x0, [x19, #112]
 a68:	cbz	x0, a7c <gzclearerr+0x4c>
 a6c:	ldr	w1, [x19, #108]
 a70:	cmn	w1, #0x4
 a74:	b.ne	a8c <gzclearerr+0x5c>  // b.any
 a78:	str	xzr, [x19, #112]
 a7c:	str	wzr, [x19, #108]
 a80:	ldr	x19, [sp, #16]
 a84:	ldp	x29, x30, [sp], #32
 a88:	ret
 a8c:	bl	0 <free>
 a90:	str	xzr, [x19, #112]
 a94:	b	a7c <gzclearerr+0x4c>
 a98:	ldr	x0, [x19, #112]
 a9c:	str	xzr, [x19, #80]
 aa0:	cbnz	x0, a6c <gzclearerr+0x3c>
 aa4:	b	a7c <gzclearerr+0x4c>
 aa8:	ret
 aac:	nop

0000000000000ab0 <gz_error>:
 ab0:	stp	x29, x30, [sp, #-48]!
 ab4:	mov	x29, sp
 ab8:	stp	x19, x20, [sp, #16]
 abc:	mov	x19, x0
 ac0:	mov	w20, w1
 ac4:	ldr	x0, [x0, #112]
 ac8:	stp	x21, x22, [sp, #32]
 acc:	mov	x21, x2
 ad0:	cbz	x0, ae4 <gz_error+0x34>
 ad4:	ldr	w1, [x19, #108]
 ad8:	cmn	w1, #0x4
 adc:	b.ne	b7c <gz_error+0xcc>  // b.any
 ae0:	str	xzr, [x19, #112]
 ae4:	cmp	w20, #0x0
 ae8:	ccmn	w20, #0x5, #0x4, ne  // ne = any
 aec:	b.eq	af4 <gz_error+0x44>  // b.none
 af0:	str	wzr, [x19]
 af4:	str	w20, [x19, #108]
 af8:	cmp	x21, #0x0
 afc:	ccmn	w20, #0x4, #0x4, ne  // ne = any
 b00:	b.eq	b8c <gz_error+0xdc>  // b.none
 b04:	ldr	x22, [x19, #32]
 b08:	mov	x0, x22
 b0c:	bl	0 <strlen>
 b10:	mov	x20, x0
 b14:	mov	x0, x21
 b18:	bl	0 <strlen>
 b1c:	add	x0, x20, x0
 b20:	add	x0, x0, #0x3
 b24:	bl	0 <malloc>
 b28:	str	x0, [x19, #112]
 b2c:	mov	x20, x0
 b30:	cbz	x0, b84 <gz_error+0xd4>
 b34:	mov	x0, x22
 b38:	bl	0 <strlen>
 b3c:	mov	x19, x0
 b40:	mov	x0, x21
 b44:	bl	0 <strlen>
 b48:	add	x1, x19, x0
 b4c:	mov	x5, x21
 b50:	mov	x3, x22
 b54:	mov	x0, x20
 b58:	add	x1, x1, #0x3
 b5c:	ldp	x19, x20, [sp, #16]
 b60:	adrp	x4, 0 <gz_open>
 b64:	ldp	x21, x22, [sp, #32]
 b68:	add	x4, x4, #0x0
 b6c:	ldp	x29, x30, [sp], #48
 b70:	adrp	x2, 0 <gz_open>
 b74:	add	x2, x2, #0x0
 b78:	b	0 <snprintf>
 b7c:	bl	0 <free>
 b80:	b	ae0 <gz_error+0x30>
 b84:	mov	w0, #0xfffffffc            	// #-4
 b88:	str	w0, [x19, #108]
 b8c:	ldp	x19, x20, [sp, #16]
 b90:	ldp	x21, x22, [sp, #32]
 b94:	ldp	x29, x30, [sp], #48
 b98:	ret

gzread.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gz_look>:
       0:	stp	x29, x30, [sp, #-80]!
       4:	mov	x29, sp
       8:	stp	x19, x20, [sp, #16]
       c:	mov	x19, x0
      10:	str	x25, [sp, #64]
      14:	add	x25, x0, #0x78
      18:	ldr	w0, [x0, #40]
      1c:	cbz	w0, 68 <gz_look+0x68>
      20:	ldr	w2, [x25, #8]
      24:	cmp	w2, #0x1
      28:	b.ls	d8 <gz_look+0xd8>  // b.plast
      2c:	ldr	x1, [x19, #120]
      30:	ldrb	w0, [x1]
      34:	cmp	w0, #0x1f
      38:	b.eq	1cc <gz_look+0x1cc>  // b.none
      3c:	ldr	w0, [x19, #64]
      40:	cbnz	w0, 194 <gz_look+0x194>
      44:	str	wzr, [x25, #8]
      48:	mov	w1, #0x1                   	// #1
      4c:	mov	w0, #0x0                   	// #0
      50:	str	wzr, [x19]
      54:	str	w1, [x19, #80]
      58:	ldp	x19, x20, [sp, #16]
      5c:	ldr	x25, [sp, #64]
      60:	ldp	x29, x30, [sp], #80
      64:	ret
      68:	stp	x21, x22, [sp, #32]
      6c:	ldr	w21, [x19, #44]
      70:	mov	w0, w21
      74:	bl	0 <malloc>
      78:	mov	x20, x0
      7c:	str	x20, [x19, #48]
      80:	lsl	w0, w21, #1
      84:	bl	0 <malloc>
      88:	str	x0, [x19, #56]
      8c:	cmp	x0, #0x0
      90:	ccmp	x20, #0x0, #0x4, ne  // ne = any
      94:	b.eq	284 <gz_look+0x284>  // b.none
      98:	str	w21, [x19, #40]
      9c:	adrp	x2, 0 <gz_look>
      a0:	str	xzr, [x19, #120]
      a4:	add	x2, x2, #0x0
      a8:	str	wzr, [x19, #128]
      ac:	mov	x0, x25
      b0:	stp	xzr, xzr, [x19, #184]
      b4:	mov	w3, #0x70                  	// #112
      b8:	mov	w1, #0x1f                  	// #31
      bc:	str	xzr, [x19, #200]
      c0:	bl	0 <inflateInit2_>
      c4:	cbnz	w0, 224 <gz_look+0x224>
      c8:	ldr	w2, [x25, #8]
      cc:	ldp	x21, x22, [sp, #32]
      d0:	cmp	w2, #0x1
      d4:	b.hi	2c <gz_look+0x2c>  // b.pmore
      d8:	ldr	w0, [x19, #108]
      dc:	cmp	w0, #0x0
      e0:	ccmn	w0, #0x5, #0x4, ne  // ne = any
      e4:	b.ne	21c <gz_look+0x21c>  // b.any
      e8:	ldr	w0, [x19, #80]
      ec:	cbnz	w0, 1f4 <gz_look+0x1f4>
      f0:	stp	x21, x22, [sp, #32]
      f4:	stp	x23, x24, [sp, #48]
      f8:	ldr	x21, [x19, #48]
      fc:	cbz	w2, 114 <gz_look+0x114>
     100:	ldr	x0, [x19, #120]
     104:	ldrb	w0, [x0]
     108:	strb	w0, [x21]
     10c:	ldr	w2, [x25, #8]
     110:	ldr	x21, [x19, #48]
     114:	mov	w22, w2
     118:	ldr	w23, [x19, #40]
     11c:	mov	w20, #0x0                   	// #0
     120:	mov	w24, #0x40000000            	// #1073741824
     124:	sub	w23, w23, w2
     128:	b	138 <gz_look+0x138>
     12c:	add	w20, w20, w0
     130:	cmp	w23, w20
     134:	b.ls	168 <gz_look+0x168>  // b.plast
     138:	sub	w2, w23, w20
     13c:	ldr	w0, [x19, #28]
     140:	cmp	w2, w24
     144:	add	x1, x22, w20, uxtw
     148:	csel	w2, w2, w24, ls  // ls = plast
     14c:	add	x1, x21, x1
     150:	bl	0 <read>
     154:	cmp	w0, #0x0
     158:	b.gt	12c <gz_look+0x12c>
     15c:	cbnz	w0, 258 <gz_look+0x258>
     160:	mov	w0, #0x1                   	// #1
     164:	str	w0, [x19, #80]
     168:	ldr	w2, [x25, #8]
     16c:	ldp	x21, x22, [sp, #32]
     170:	add	w2, w20, w2
     174:	ldp	x23, x24, [sp, #48]
     178:	ldr	x0, [x19, #48]
     17c:	str	w2, [x25, #8]
     180:	str	x0, [x19, #120]
     184:	cbz	w2, 214 <gz_look+0x214>
     188:	cmp	w2, #0x1
     18c:	b.eq	1f8 <gz_look+0x1f8>  // b.none
     190:	b	2c <gz_look+0x2c>
     194:	ldr	x0, [x19, #56]
     198:	str	x0, [x19, #8]
     19c:	mov	w2, w2
     1a0:	bl	0 <memcpy>
     1a4:	ldr	w0, [x25, #8]
     1a8:	movi	v0.2s, #0x1
     1ac:	str	w0, [x19]
     1b0:	str	wzr, [x25, #8]
     1b4:	mov	w0, #0x0                   	// #0
     1b8:	ldr	x25, [sp, #64]
     1bc:	str	d0, [x19, #64]
     1c0:	ldp	x19, x20, [sp, #16]
     1c4:	ldp	x29, x30, [sp], #80
     1c8:	ret
     1cc:	ldrb	w0, [x1, #1]
     1d0:	cmp	w0, #0x8b
     1d4:	b.ne	3c <gz_look+0x3c>  // b.any
     1d8:	mov	x0, x25
     1dc:	bl	0 <inflateReset>
     1e0:	adrp	x0, 0 <gz_look>
     1e4:	ldr	d0, [x0]
     1e8:	mov	w0, #0x0                   	// #0
     1ec:	str	d0, [x19, #64]
     1f0:	b	58 <gz_look+0x58>
     1f4:	cbz	w2, 214 <gz_look+0x214>
     1f8:	ldr	w0, [x19, #64]
     1fc:	cbz	w0, 44 <gz_look+0x44>
     200:	ldr	x0, [x19, #56]
     204:	mov	w2, #0x1                   	// #1
     208:	str	x0, [x19, #8]
     20c:	ldr	x1, [x19, #120]
     210:	b	19c <gz_look+0x19c>
     214:	mov	w0, #0x0                   	// #0
     218:	b	58 <gz_look+0x58>
     21c:	mov	w0, #0xffffffff            	// #-1
     220:	b	58 <gz_look+0x58>
     224:	ldr	x0, [x19, #56]
     228:	bl	0 <free>
     22c:	ldr	x0, [x19, #48]
     230:	bl	0 <free>
     234:	str	wzr, [x19, #40]
     238:	mov	x0, x19
     23c:	adrp	x2, 0 <gz_look>
     240:	mov	w1, #0xfffffffc            	// #-4
     244:	add	x2, x2, #0x0
     248:	bl	0 <gz_error>
     24c:	mov	w0, #0xffffffff            	// #-1
     250:	ldp	x21, x22, [sp, #32]
     254:	b	58 <gz_look+0x58>
     258:	bl	0 <__errno_location>
     25c:	ldr	w0, [x0]
     260:	bl	0 <strerror>
     264:	mov	x2, x0
     268:	mov	w1, #0xffffffff            	// #-1
     26c:	mov	x0, x19
     270:	bl	0 <gz_error>
     274:	mov	w0, #0xffffffff            	// #-1
     278:	ldp	x21, x22, [sp, #32]
     27c:	ldp	x23, x24, [sp, #48]
     280:	b	58 <gz_look+0x58>
     284:	bl	0 <free>
     288:	mov	x0, x20
     28c:	bl	0 <free>
     290:	mov	x0, x19
     294:	adrp	x2, 0 <gz_look>
     298:	mov	w1, #0xfffffffc            	// #-4
     29c:	add	x2, x2, #0x0
     2a0:	bl	0 <gz_error>
     2a4:	mov	w0, #0xffffffff            	// #-1
     2a8:	ldp	x21, x22, [sp, #32]
     2ac:	b	58 <gz_look+0x58>

00000000000002b0 <gz_decomp>:
     2b0:	stp	x29, x30, [sp, #-80]!
     2b4:	mov	x29, sp
     2b8:	stp	x19, x20, [sp, #16]
     2bc:	add	x20, x0, #0x78
     2c0:	stp	x21, x22, [sp, #32]
     2c4:	mov	w21, #0x40000000            	// #1073741824
     2c8:	ldr	w22, [x20, #32]
     2cc:	stp	x23, x24, [sp, #48]
     2d0:	mov	x24, x0
     2d4:	mov	w23, #0x1                   	// #1
     2d8:	stp	x25, x26, [sp, #64]
     2dc:	b	318 <gz_decomp+0x68>
     2e0:	mov	w1, #0x0                   	// #0
     2e4:	mov	x0, x20
     2e8:	bl	0 <inflate>
     2ec:	add	w1, w0, #0x2
     2f0:	tst	w1, #0xfffffffb
     2f4:	b.eq	3f0 <gz_decomp+0x140>  // b.none
     2f8:	cmn	w0, #0x4
     2fc:	b.eq	420 <gz_decomp+0x170>  // b.none
     300:	cmn	w0, #0x3
     304:	b.eq	450 <gz_decomp+0x1a0>  // b.none
     308:	ldr	w1, [x20, #32]
     30c:	cbz	w1, 48c <gz_decomp+0x1dc>
     310:	cmp	w0, #0x1
     314:	b.eq	4c8 <gz_decomp+0x218>  // b.none
     318:	ldr	w19, [x20, #8]
     31c:	cbnz	w19, 2e0 <gz_decomp+0x30>
     320:	ldr	w0, [x24, #108]
     324:	cmp	w0, #0x0
     328:	ccmn	w0, #0x5, #0x4, ne  // ne = any
     32c:	b.ne	4e8 <gz_decomp+0x238>  // b.any
     330:	ldr	w0, [x24, #80]
     334:	cbz	w0, 380 <gz_decomp+0xd0>
     338:	mov	x0, x24
     33c:	mov	w1, #0xfffffffb            	// #-5
     340:	adrp	x2, 0 <gz_look>
     344:	add	x2, x2, #0x0
     348:	bl	0 <gz_error>
     34c:	ldr	w0, [x20, #32]
     350:	ldr	x1, [x20, #24]
     354:	sub	w22, w22, w0
     358:	mov	w0, #0x0                   	// #0
     35c:	str	w22, [x24]
     360:	sub	x22, x1, w22, uxtw
     364:	str	x22, [x24, #8]
     368:	ldp	x19, x20, [sp, #16]
     36c:	ldp	x21, x22, [sp, #32]
     370:	ldp	x23, x24, [sp, #48]
     374:	ldp	x25, x26, [sp, #64]
     378:	ldp	x29, x30, [sp], #80
     37c:	ret
     380:	ldr	w26, [x24, #40]
     384:	ldr	x25, [x24, #48]
     388:	b	398 <gz_decomp+0xe8>
     38c:	add	w19, w19, w0
     390:	cmp	w26, w19
     394:	b.ls	3c0 <gz_decomp+0x110>  // b.plast
     398:	sub	w2, w26, w19
     39c:	ldr	w0, [x24, #28]
     3a0:	cmp	w2, w21
     3a4:	add	x1, x25, w19, uxtw
     3a8:	csel	w2, w2, w21, ls  // ls = plast
     3ac:	bl	0 <read>
     3b0:	cmp	w0, #0x0
     3b4:	b.gt	38c <gz_decomp+0xdc>
     3b8:	cbnz	w0, 4f0 <gz_decomp+0x240>
     3bc:	str	w23, [x24, #80]
     3c0:	ldr	w1, [x20, #8]
     3c4:	ldr	x0, [x24, #48]
     3c8:	add	w19, w19, w1
     3cc:	str	x0, [x20]
     3d0:	str	w19, [x20, #8]
     3d4:	cbz	w19, 338 <gz_decomp+0x88>
     3d8:	mov	w1, #0x0                   	// #0
     3dc:	mov	x0, x20
     3e0:	bl	0 <inflate>
     3e4:	add	w1, w0, #0x2
     3e8:	tst	w1, #0xfffffffb
     3ec:	b.ne	2f8 <gz_decomp+0x48>  // b.any
     3f0:	mov	x0, x24
     3f4:	mov	w1, #0xfffffffe            	// #-2
     3f8:	adrp	x2, 0 <gz_look>
     3fc:	add	x2, x2, #0x0
     400:	bl	0 <gz_error>
     404:	mov	w0, #0xffffffff            	// #-1
     408:	ldp	x19, x20, [sp, #16]
     40c:	ldp	x21, x22, [sp, #32]
     410:	ldp	x23, x24, [sp, #48]
     414:	ldp	x25, x26, [sp, #64]
     418:	ldp	x29, x30, [sp], #80
     41c:	ret
     420:	mov	w1, w0
     424:	adrp	x2, 0 <gz_look>
     428:	mov	x0, x24
     42c:	add	x2, x2, #0x0
     430:	bl	0 <gz_error>
     434:	mov	w0, #0xffffffff            	// #-1
     438:	ldp	x19, x20, [sp, #16]
     43c:	ldp	x21, x22, [sp, #32]
     440:	ldp	x23, x24, [sp, #48]
     444:	ldp	x25, x26, [sp, #64]
     448:	ldp	x29, x30, [sp], #80
     44c:	ret
     450:	ldr	x3, [x20, #48]
     454:	adrp	x1, 0 <gz_look>
     458:	add	x2, x1, #0x0
     45c:	mov	w1, w0
     460:	cmp	x3, #0x0
     464:	mov	x0, x24
     468:	csel	x2, x2, x3, eq  // eq = none
     46c:	bl	0 <gz_error>
     470:	mov	w0, #0xffffffff            	// #-1
     474:	ldp	x19, x20, [sp, #16]
     478:	ldp	x21, x22, [sp, #32]
     47c:	ldp	x23, x24, [sp, #48]
     480:	ldp	x25, x26, [sp, #64]
     484:	ldp	x29, x30, [sp], #80
     488:	ret
     48c:	ldr	x1, [x20, #24]
     490:	str	w22, [x24]
     494:	cmp	w0, #0x1
     498:	mov	w0, #0x0                   	// #0
     49c:	sub	x1, x1, w22, uxtw
     4a0:	str	x1, [x24, #8]
     4a4:	b.ne	368 <gz_decomp+0xb8>  // b.any
     4a8:	mov	w0, #0x0                   	// #0
     4ac:	str	wzr, [x24, #68]
     4b0:	ldp	x19, x20, [sp, #16]
     4b4:	ldp	x21, x22, [sp, #32]
     4b8:	ldp	x23, x24, [sp, #48]
     4bc:	ldp	x25, x26, [sp, #64]
     4c0:	ldp	x29, x30, [sp], #80
     4c4:	ret
     4c8:	ldr	x0, [x20, #24]
     4cc:	sub	w1, w22, w1
     4d0:	str	w1, [x24]
     4d4:	str	wzr, [x24, #68]
     4d8:	sub	x1, x0, w1, uxtw
     4dc:	mov	w0, #0x0                   	// #0
     4e0:	str	x1, [x24, #8]
     4e4:	b	4b0 <gz_decomp+0x200>
     4e8:	mov	w0, #0xffffffff            	// #-1
     4ec:	b	368 <gz_decomp+0xb8>
     4f0:	bl	0 <__errno_location>
     4f4:	ldr	w0, [x0]
     4f8:	bl	0 <strerror>
     4fc:	mov	x2, x0
     500:	mov	w1, #0xffffffff            	// #-1
     504:	mov	x0, x24
     508:	bl	0 <gz_error>
     50c:	mov	w0, #0xffffffff            	// #-1
     510:	b	368 <gz_decomp+0xb8>
     514:	nop

0000000000000518 <gz_fetch>:
     518:	stp	x29, x30, [sp, #-48]!
     51c:	mov	x29, sp
     520:	stp	x19, x20, [sp, #16]
     524:	mov	x19, x0
     528:	ldr	w0, [x19, #68]
     52c:	cmp	w0, #0x1
     530:	b.eq	560 <gz_fetch+0x48>  // b.none
     534:	cmp	w0, #0x2
     538:	b.eq	5fc <gz_fetch+0xe4>  // b.none
     53c:	cbz	w0, 5dc <gz_fetch+0xc4>
     540:	ldr	w0, [x19]
     544:	cbnz	w0, 558 <gz_fetch+0x40>
     548:	ldr	w0, [x19, #80]
     54c:	cbz	w0, 528 <gz_fetch+0x10>
     550:	ldr	w0, [x19, #128]
     554:	cbnz	w0, 528 <gz_fetch+0x10>
     558:	mov	w0, #0x0                   	// #0
     55c:	b	5d0 <gz_fetch+0xb8>
     560:	ldr	w20, [x19, #40]
     564:	mov	w1, #0x0                   	// #0
     568:	str	wzr, [x19]
     56c:	stp	x21, x22, [sp, #32]
     570:	mov	w21, #0x40000000            	// #1073741824
     574:	lsl	w20, w20, #1
     578:	ldr	x22, [x19, #56]
     57c:	b	594 <gz_fetch+0x7c>
     580:	ldr	w1, [x19]
     584:	add	w1, w1, w0
     588:	str	w1, [x19]
     58c:	cmp	w20, w1
     590:	b.ls	5c0 <gz_fetch+0xa8>  // b.plast
     594:	sub	w2, w20, w1
     598:	ldr	w0, [x19, #28]
     59c:	cmp	w2, w21
     5a0:	add	x1, x22, w1, uxtw
     5a4:	csel	w2, w2, w21, ls  // ls = plast
     5a8:	bl	0 <read>
     5ac:	cmp	w0, #0x0
     5b0:	b.gt	580 <gz_fetch+0x68>
     5b4:	cbnz	w0, 628 <gz_fetch+0x110>
     5b8:	mov	w0, #0x1                   	// #1
     5bc:	str	w0, [x19, #80]
     5c0:	ldp	x21, x22, [sp, #32]
     5c4:	mov	w0, #0x0                   	// #0
     5c8:	ldr	x1, [x19, #56]
     5cc:	str	x1, [x19, #8]
     5d0:	ldp	x19, x20, [sp, #16]
     5d4:	ldp	x29, x30, [sp], #48
     5d8:	ret
     5dc:	mov	x0, x19
     5e0:	bl	0 <gz_look>
     5e4:	cmn	w0, #0x1
     5e8:	b.eq	620 <gz_fetch+0x108>  // b.none
     5ec:	ldr	w0, [x19, #68]
     5f0:	cbnz	w0, 540 <gz_fetch+0x28>
     5f4:	mov	w0, #0x0                   	// #0
     5f8:	b	5d0 <gz_fetch+0xb8>
     5fc:	ldr	w2, [x19, #40]
     600:	mov	x0, x19
     604:	ldr	x3, [x19, #56]
     608:	str	x3, [x19, #144]
     60c:	lsl	w2, w2, #1
     610:	str	w2, [x19, #152]
     614:	bl	2b0 <gz_decomp>
     618:	cmn	w0, #0x1
     61c:	b.ne	540 <gz_fetch+0x28>  // b.any
     620:	mov	w0, #0xffffffff            	// #-1
     624:	b	5d0 <gz_fetch+0xb8>
     628:	bl	0 <__errno_location>
     62c:	ldr	w0, [x0]
     630:	bl	0 <strerror>
     634:	mov	x2, x0
     638:	mov	w1, #0xffffffff            	// #-1
     63c:	mov	x0, x19
     640:	bl	0 <gz_error>
     644:	mov	w0, #0xffffffff            	// #-1
     648:	ldp	x21, x22, [sp, #32]
     64c:	b	5d0 <gz_fetch+0xb8>

0000000000000650 <gz_read.part.0>:
     650:	stp	x29, x30, [sp, #-112]!
     654:	mov	x29, sp
     658:	stp	x19, x20, [sp, #16]
     65c:	mov	x19, x0
     660:	stp	x21, x22, [sp, #32]
     664:	mov	x22, x2
     668:	stp	x27, x28, [sp, #80]
     66c:	mov	x28, x1
     670:	stp	x23, x24, [sp, #48]
     674:	mov	x23, #0x0                   	// #0
     678:	mov	w24, #0x40000000            	// #1073741824
     67c:	stp	x25, x26, [sp, #64]
     680:	mov	x26, #0xfffffffe            	// #4294967294
     684:	mov	x25, #0xffffffff            	// #4294967295
     688:	ldr	w20, [x19]
     68c:	cmp	x22, x26
     690:	csel	x0, x22, x25, ls  // ls = plast
     694:	mov	w27, w0
     698:	cbz	w20, 70c <gz_read.part.0+0xbc>
     69c:	ldr	x1, [x19, #8]
     6a0:	cmp	w20, w0
     6a4:	csel	w20, w20, w0, ls  // ls = plast
     6a8:	mov	x0, x28
     6ac:	mov	w21, w20
     6b0:	mov	x2, x21
     6b4:	bl	0 <memcpy>
     6b8:	ldr	x1, [x19, #8]
     6bc:	add	x28, x28, x21
     6c0:	ldr	w0, [x19]
     6c4:	add	x1, x1, x21
     6c8:	str	x1, [x19, #8]
     6cc:	sub	w20, w0, w20
     6d0:	str	w20, [x19]
     6d4:	ldr	x0, [x19, #16]
     6d8:	sub	x22, x22, x21
     6dc:	add	x23, x23, x21
     6e0:	add	x21, x0, x21
     6e4:	str	x21, [x19, #16]
     6e8:	cbnz	x22, 688 <gz_read.part.0+0x38>
     6ec:	mov	x0, x23
     6f0:	ldp	x19, x20, [sp, #16]
     6f4:	ldp	x21, x22, [sp, #32]
     6f8:	ldp	x23, x24, [sp, #48]
     6fc:	ldp	x25, x26, [sp, #64]
     700:	ldp	x27, x28, [sp, #80]
     704:	ldp	x29, x30, [sp], #112
     708:	ret
     70c:	ldr	w0, [x19, #80]
     710:	cbz	w0, 71c <gz_read.part.0+0xcc>
     714:	ldr	w0, [x19, #128]
     718:	cbz	w0, 7e4 <gz_read.part.0+0x194>
     71c:	ldr	w0, [x19, #68]
     720:	cbz	w0, 7b0 <gz_read.part.0+0x160>
     724:	ldr	w1, [x19, #40]
     728:	cmp	w27, w1, lsl #1
     72c:	b.cc	7b0 <gz_read.part.0+0x160>  // b.lo, b.ul, b.last
     730:	cmp	w0, #0x1
     734:	b.eq	76c <gz_read.part.0+0x11c>  // b.none
     738:	str	x28, [x19, #144]
     73c:	mov	x0, x19
     740:	str	w27, [x19, #152]
     744:	bl	2b0 <gz_decomp>
     748:	cmn	w0, #0x1
     74c:	b.eq	7c0 <gz_read.part.0+0x170>  // b.none
     750:	ldr	w20, [x19]
     754:	str	wzr, [x19]
     758:	mov	w21, w20
     75c:	add	x28, x28, x21
     760:	b	6d4 <gz_read.part.0+0x84>
     764:	cmp	w27, w20
     768:	b.ls	758 <gz_read.part.0+0x108>  // b.plast
     76c:	sub	w2, w27, w20
     770:	ldr	w0, [x19, #28]
     774:	cmp	w2, w24
     778:	mov	w21, w20
     77c:	add	x1, x28, x21
     780:	csel	w2, w2, w24, ls  // ls = plast
     784:	str	x1, [sp, #104]
     788:	bl	0 <read>
     78c:	add	w20, w20, w0
     790:	cmp	w0, #0x0
     794:	ldr	x1, [sp, #104]
     798:	b.gt	764 <gz_read.part.0+0x114>
     79c:	cbnz	w0, 7f0 <gz_read.part.0+0x1a0>
     7a0:	mov	w0, #0x1                   	// #1
     7a4:	mov	x28, x1
     7a8:	str	w0, [x19, #80]
     7ac:	b	6d4 <gz_read.part.0+0x84>
     7b0:	mov	x0, x19
     7b4:	bl	518 <gz_fetch>
     7b8:	cmn	w0, #0x1
     7bc:	b.ne	6e8 <gz_read.part.0+0x98>  // b.any
     7c0:	mov	x23, #0x0                   	// #0
     7c4:	mov	x0, x23
     7c8:	ldp	x19, x20, [sp, #16]
     7cc:	ldp	x21, x22, [sp, #32]
     7d0:	ldp	x23, x24, [sp, #48]
     7d4:	ldp	x25, x26, [sp, #64]
     7d8:	ldp	x27, x28, [sp, #80]
     7dc:	ldp	x29, x30, [sp], #112
     7e0:	ret
     7e4:	mov	w0, #0x1                   	// #1
     7e8:	str	w0, [x19, #84]
     7ec:	b	6ec <gz_read.part.0+0x9c>
     7f0:	bl	0 <__errno_location>
     7f4:	ldr	w0, [x0]
     7f8:	mov	x23, #0x0                   	// #0
     7fc:	bl	0 <strerror>
     800:	mov	x2, x0
     804:	mov	w1, #0xffffffff            	// #-1
     808:	mov	x0, x19
     80c:	bl	0 <gz_error>
     810:	b	6ec <gz_read.part.0+0x9c>
     814:	nop

0000000000000818 <gzread>:
     818:	cbz	x0, 958 <gzread+0x140>
     81c:	stp	x29, x30, [sp, #-48]!
     820:	mov	x29, sp
     824:	stp	x19, x20, [sp, #16]
     828:	mov	x19, x0
     82c:	stp	x21, x22, [sp, #32]
     830:	mov	w21, w2
     834:	ldr	w2, [x0, #24]
     838:	mov	x22, x1
     83c:	mov	w1, #0x1c4f                	// #7247
     840:	cmp	w2, w1
     844:	b.ne	938 <gzread+0x120>  // b.any
     848:	ldr	w1, [x0, #108]
     84c:	cmp	w1, #0x0
     850:	ccmn	w1, #0x5, #0x4, ne  // ne = any
     854:	b.ne	938 <gzread+0x120>  // b.any
     858:	cmp	w21, #0x0
     85c:	b.lt	940 <gzread+0x128>  // b.tstop
     860:	mov	w0, #0x0                   	// #0
     864:	b.eq	884 <gzread+0x6c>  // b.none
     868:	ldr	w0, [x19, #104]
     86c:	cbnz	w0, 894 <gzread+0x7c>
     870:	mov	w2, w21
     874:	mov	x1, x22
     878:	mov	x0, x19
     87c:	bl	650 <gz_read.part.0>
     880:	cbz	w0, 924 <gzread+0x10c>
     884:	ldp	x19, x20, [sp, #16]
     888:	ldp	x21, x22, [sp, #32]
     88c:	ldp	x29, x30, [sp], #48
     890:	ret
     894:	ldr	x20, [x19, #96]
     898:	str	wzr, [x19, #104]
     89c:	cbz	x20, 870 <gzread+0x58>
     8a0:	ldr	w2, [x19]
     8a4:	mov	x0, x19
     8a8:	mov	w1, #0x0                   	// #0
     8ac:	mov	w4, w2
     8b0:	mov	x3, x4
     8b4:	cmp	x4, x20
     8b8:	cbz	w2, 904 <gzread+0xec>
     8bc:	b.le	8cc <gzread+0xb4>
     8c0:	sub	w1, w2, w20
     8c4:	and	x3, x20, #0xffffffff
     8c8:	mov	w4, w20
     8cc:	ldp	x2, x0, [x19, #8]
     8d0:	subs	x20, x20, x3
     8d4:	str	w1, [x19]
     8d8:	add	x4, x2, x4
     8dc:	add	x3, x0, x3
     8e0:	stp	x4, x3, [x19, #8]
     8e4:	b.eq	870 <gzread+0x58>  // b.none
     8e8:	ldr	w2, [x19]
     8ec:	mov	x0, x19
     8f0:	mov	w1, #0x0                   	// #0
     8f4:	mov	w4, w2
     8f8:	mov	x3, x4
     8fc:	cmp	x4, x20
     900:	cbnz	w2, 8bc <gzread+0xa4>
     904:	ldr	w1, [x19, #80]
     908:	cbz	w1, 914 <gzread+0xfc>
     90c:	ldr	w1, [x19, #128]
     910:	cbz	w1, 870 <gzread+0x58>
     914:	bl	518 <gz_fetch>
     918:	cmn	w0, #0x1
     91c:	b.ne	8a0 <gzread+0x88>  // b.any
     920:	mov	x0, #0x0                   	// #0
     924:	ldr	w1, [x19, #108]
     928:	cmp	w1, #0x0
     92c:	ccmn	w1, #0x5, #0x4, ne  // ne = any
     930:	b.eq	884 <gzread+0x6c>  // b.none
     934:	nop
     938:	mov	w0, #0xffffffff            	// #-1
     93c:	b	884 <gzread+0x6c>
     940:	adrp	x2, 0 <gz_look>
     944:	mov	w1, #0xfffffffe            	// #-2
     948:	add	x2, x2, #0x0
     94c:	bl	0 <gz_error>
     950:	mov	w0, #0xffffffff            	// #-1
     954:	b	884 <gzread+0x6c>
     958:	mov	w0, #0xffffffff            	// #-1
     95c:	ret

0000000000000960 <gzfread>:
     960:	stp	x29, x30, [sp, #-64]!
     964:	mov	x29, sp
     968:	stp	x21, x22, [sp, #32]
     96c:	cbz	x3, 9f4 <gzfread+0x94>
     970:	mov	x22, x1
     974:	ldr	w1, [x3, #24]
     978:	stp	x19, x20, [sp, #16]
     97c:	mov	x21, #0x0                   	// #0
     980:	mov	x20, x0
     984:	mov	x19, x3
     988:	mov	w0, #0x1c4f                	// #7247
     98c:	cmp	w1, w0
     990:	b.eq	9a8 <gzfread+0x48>  // b.none
     994:	ldp	x19, x20, [sp, #16]
     998:	mov	x0, x21
     99c:	ldp	x21, x22, [sp, #32]
     9a0:	ldp	x29, x30, [sp], #64
     9a4:	ret
     9a8:	ldr	w0, [x3, #108]
     9ac:	cmp	w0, #0x0
     9b0:	ccmn	w0, #0x5, #0x4, ne  // ne = any
     9b4:	b.ne	994 <gzfread+0x34>  // b.any
     9b8:	cbz	x22, 994 <gzfread+0x34>
     9bc:	mul	x21, x2, x22
     9c0:	udiv	x0, x21, x22
     9c4:	cmp	x0, x2
     9c8:	b.ne	a94 <gzfread+0x134>  // b.any
     9cc:	cbz	x21, 994 <gzfread+0x34>
     9d0:	ldr	w0, [x3, #104]
     9d4:	cbnz	w0, a08 <gzfread+0xa8>
     9d8:	mov	x2, x21
     9dc:	mov	x1, x20
     9e0:	mov	x0, x19
     9e4:	bl	650 <gz_read.part.0>
     9e8:	udiv	x21, x0, x22
     9ec:	ldp	x19, x20, [sp, #16]
     9f0:	b	998 <gzfread+0x38>
     9f4:	mov	x21, #0x0                   	// #0
     9f8:	mov	x0, x21
     9fc:	ldp	x21, x22, [sp, #32]
     a00:	ldp	x29, x30, [sp], #64
     a04:	ret
     a08:	str	x23, [sp, #48]
     a0c:	ldr	x23, [x3, #96]
     a10:	str	wzr, [x3, #104]
     a14:	cbz	x23, a60 <gzfread+0x100>
     a18:	ldr	w2, [x19]
     a1c:	mov	x0, x19
     a20:	mov	w4, #0x0                   	// #0
     a24:	mov	w1, w2
     a28:	mov	x3, x1
     a2c:	cmp	x1, x23
     a30:	cbz	w2, a68 <gzfread+0x108>
     a34:	b.le	a44 <gzfread+0xe4>
     a38:	sub	w4, w2, w23
     a3c:	and	x3, x23, #0xffffffff
     a40:	mov	w1, w23
     a44:	ldp	x2, x0, [x19, #8]
     a48:	subs	x23, x23, x3
     a4c:	str	w4, [x19]
     a50:	add	x1, x2, x1
     a54:	add	x3, x0, x3
     a58:	stp	x1, x3, [x19, #8]
     a5c:	b.ne	a18 <gzfread+0xb8>  // b.any
     a60:	ldr	x23, [sp, #48]
     a64:	b	9d8 <gzfread+0x78>
     a68:	ldr	w1, [x19, #80]
     a6c:	cbz	w1, a78 <gzfread+0x118>
     a70:	ldr	w1, [x19, #128]
     a74:	cbz	w1, a60 <gzfread+0x100>
     a78:	bl	518 <gz_fetch>
     a7c:	cmn	w0, #0x1
     a80:	b.ne	a18 <gzfread+0xb8>  // b.any
     a84:	mov	x21, #0x0                   	// #0
     a88:	ldp	x19, x20, [sp, #16]
     a8c:	ldr	x23, [sp, #48]
     a90:	b	998 <gzfread+0x38>
     a94:	mov	x0, x3
     a98:	adrp	x2, 0 <gz_look>
     a9c:	mov	w1, #0xfffffffe            	// #-2
     aa0:	add	x2, x2, #0x0
     aa4:	mov	x21, #0x0                   	// #0
     aa8:	bl	0 <gz_error>
     aac:	ldp	x19, x20, [sp, #16]
     ab0:	b	998 <gzfread+0x38>
     ab4:	nop

0000000000000ab8 <gzgetc>:
     ab8:	cbz	x0, bdc <gzgetc+0x124>
     abc:	stp	x29, x30, [sp, #-48]!
     ac0:	mov	x29, sp
     ac4:	stp	x19, x20, [sp, #16]
     ac8:	mov	x19, x0
     acc:	mov	w0, #0x1c4f                	// #7247
     ad0:	ldr	w1, [x19, #24]
     ad4:	cmp	w1, w0
     ad8:	b.ne	bd4 <gzgetc+0x11c>  // b.any
     adc:	ldr	w0, [x19, #108]
     ae0:	cmp	w0, #0x0
     ae4:	ccmn	w0, #0x5, #0x4, ne  // ne = any
     ae8:	b.ne	bd4 <gzgetc+0x11c>  // b.any
     aec:	ldr	w0, [x19]
     af0:	cbz	w0, b20 <gzgetc+0x68>
     af4:	ldp	x2, x1, [x19, #8]
     af8:	sub	w0, w0, #0x1
     afc:	str	w0, [x19]
     b00:	add	x3, x2, #0x1
     b04:	add	x0, x1, #0x1
     b08:	str	x3, [x19, #8]
     b0c:	str	x0, [x19, #16]
     b10:	ldrb	w0, [x2]
     b14:	ldp	x19, x20, [sp, #16]
     b18:	ldp	x29, x30, [sp], #48
     b1c:	ret
     b20:	ldr	w0, [x19, #104]
     b24:	cbnz	w0, b50 <gzgetc+0x98>
     b28:	mov	x0, x19
     b2c:	add	x1, sp, #0x28
     b30:	mov	x2, #0x1                   	// #1
     b34:	bl	650 <gz_read.part.0>
     b38:	cmp	w0, #0x0
     b3c:	b.le	bd4 <gzgetc+0x11c>
     b40:	ldrb	w0, [sp, #40]
     b44:	ldp	x19, x20, [sp, #16]
     b48:	ldp	x29, x30, [sp], #48
     b4c:	ret
     b50:	ldr	x20, [x19, #96]
     b54:	str	wzr, [x19, #104]
     b58:	cbz	x20, b28 <gzgetc+0x70>
     b5c:	mov	w2, #0x0                   	// #0
     b60:	mov	x0, x19
     b64:	mov	w1, w2
     b68:	cbz	w2, bb8 <gzgetc+0x100>
     b6c:	nop
     b70:	cmp	x1, x20
     b74:	mov	x0, x1
     b78:	mov	w4, #0x0                   	// #0
     b7c:	b.le	b8c <gzgetc+0xd4>
     b80:	sub	w4, w2, w20
     b84:	and	x0, x20, #0xffffffff
     b88:	mov	w1, w20
     b8c:	ldp	x3, x2, [x19, #8]
     b90:	subs	x20, x20, x0
     b94:	str	w4, [x19]
     b98:	add	x1, x3, x1
     b9c:	add	x0, x2, x0
     ba0:	stp	x1, x0, [x19, #8]
     ba4:	b.eq	b28 <gzgetc+0x70>  // b.none
     ba8:	ldr	w2, [x19]
     bac:	mov	x0, x19
     bb0:	mov	w1, w2
     bb4:	cbnz	w2, b70 <gzgetc+0xb8>
     bb8:	ldr	w1, [x19, #80]
     bbc:	cbz	w1, bc8 <gzgetc+0x110>
     bc0:	ldr	w1, [x19, #128]
     bc4:	cbz	w1, b28 <gzgetc+0x70>
     bc8:	bl	518 <gz_fetch>
     bcc:	cmn	w0, #0x1
     bd0:	b.ne	ba8 <gzgetc+0xf0>  // b.any
     bd4:	mov	w0, #0xffffffff            	// #-1
     bd8:	b	b14 <gzgetc+0x5c>
     bdc:	mov	w0, #0xffffffff            	// #-1
     be0:	ret
     be4:	nop

0000000000000be8 <gzgetc_>:
     be8:	cbz	x0, d0c <gzgetc_+0x124>
     bec:	stp	x29, x30, [sp, #-48]!
     bf0:	mov	x29, sp
     bf4:	stp	x19, x20, [sp, #16]
     bf8:	mov	x19, x0
     bfc:	mov	w0, #0x1c4f                	// #7247
     c00:	ldr	w1, [x19, #24]
     c04:	cmp	w1, w0
     c08:	b.ne	d04 <gzgetc_+0x11c>  // b.any
     c0c:	ldr	w0, [x19, #108]
     c10:	cmp	w0, #0x0
     c14:	ccmn	w0, #0x5, #0x4, ne  // ne = any
     c18:	b.ne	d04 <gzgetc_+0x11c>  // b.any
     c1c:	ldr	w0, [x19]
     c20:	cbz	w0, c50 <gzgetc_+0x68>
     c24:	ldp	x2, x1, [x19, #8]
     c28:	sub	w0, w0, #0x1
     c2c:	str	w0, [x19]
     c30:	add	x3, x2, #0x1
     c34:	add	x0, x1, #0x1
     c38:	str	x3, [x19, #8]
     c3c:	str	x0, [x19, #16]
     c40:	ldrb	w0, [x2]
     c44:	ldp	x19, x20, [sp, #16]
     c48:	ldp	x29, x30, [sp], #48
     c4c:	ret
     c50:	ldr	w0, [x19, #104]
     c54:	cbnz	w0, c80 <gzgetc_+0x98>
     c58:	mov	x0, x19
     c5c:	add	x1, sp, #0x28
     c60:	mov	x2, #0x1                   	// #1
     c64:	bl	650 <gz_read.part.0>
     c68:	cmp	w0, #0x0
     c6c:	b.le	d04 <gzgetc_+0x11c>
     c70:	ldrb	w0, [sp, #40]
     c74:	ldp	x19, x20, [sp, #16]
     c78:	ldp	x29, x30, [sp], #48
     c7c:	ret
     c80:	ldr	x20, [x19, #96]
     c84:	str	wzr, [x19, #104]
     c88:	cbz	x20, c58 <gzgetc_+0x70>
     c8c:	mov	w2, #0x0                   	// #0
     c90:	mov	x0, x19
     c94:	mov	w1, w2
     c98:	cbz	w2, ce8 <gzgetc_+0x100>
     c9c:	nop
     ca0:	cmp	x1, x20
     ca4:	mov	x0, x1
     ca8:	mov	w4, #0x0                   	// #0
     cac:	b.le	cbc <gzgetc_+0xd4>
     cb0:	sub	w4, w2, w20
     cb4:	and	x0, x20, #0xffffffff
     cb8:	mov	w1, w20
     cbc:	ldp	x3, x2, [x19, #8]
     cc0:	subs	x20, x20, x0
     cc4:	str	w4, [x19]
     cc8:	add	x1, x3, x1
     ccc:	add	x0, x2, x0
     cd0:	stp	x1, x0, [x19, #8]
     cd4:	b.eq	c58 <gzgetc_+0x70>  // b.none
     cd8:	ldr	w2, [x19]
     cdc:	mov	x0, x19
     ce0:	mov	w1, w2
     ce4:	cbnz	w2, ca0 <gzgetc_+0xb8>
     ce8:	ldr	w1, [x19, #80]
     cec:	cbz	w1, cf8 <gzgetc_+0x110>
     cf0:	ldr	w1, [x19, #128]
     cf4:	cbz	w1, c58 <gzgetc_+0x70>
     cf8:	bl	518 <gz_fetch>
     cfc:	cmn	w0, #0x1
     d00:	b.ne	cd8 <gzgetc_+0xf0>  // b.any
     d04:	mov	w0, #0xffffffff            	// #-1
     d08:	b	c44 <gzgetc_+0x5c>
     d0c:	mov	w0, #0xffffffff            	// #-1
     d10:	ret
     d14:	nop

0000000000000d18 <gzungetc>:
     d18:	cbz	x1, ef8 <gzungetc+0x1e0>
     d1c:	stp	x29, x30, [sp, #-48]!
     d20:	mov	x29, sp
     d24:	stp	x19, x20, [sp, #16]
     d28:	mov	x19, x1
     d2c:	ldr	w1, [x1, #24]
     d30:	str	x21, [sp, #32]
     d34:	mov	w21, w0
     d38:	mov	w0, #0x1c4f                	// #7247
     d3c:	cmp	w1, w0
     d40:	b.ne	e50 <gzungetc+0x138>  // b.any
     d44:	ldr	w0, [x19, #108]
     d48:	cmp	w0, #0x0
     d4c:	ccmn	w0, #0x5, #0x4, ne  // ne = any
     d50:	b.ne	e50 <gzungetc+0x138>  // b.any
     d54:	ldr	w0, [x19, #104]
     d58:	cbnz	w0, dc0 <gzungetc+0xa8>
     d5c:	tbnz	w21, #31, e50 <gzungetc+0x138>
     d60:	ldr	w3, [x19]
     d64:	ldr	w0, [x19, #40]
     d68:	lsl	w0, w0, #1
     d6c:	cbz	w3, e70 <gzungetc+0x158>
     d70:	cmp	w3, w0
     d74:	b.eq	edc <gzungetc+0x1c4>  // b.none
     d78:	ldr	x1, [x19, #8]
     d7c:	ldr	x4, [x19, #56]
     d80:	cmp	x1, x4
     d84:	b.eq	eb0 <gzungetc+0x198>  // b.none
     d88:	sub	x2, x1, #0x1
     d8c:	add	w3, w3, #0x1
     d90:	str	w3, [x19]
     d94:	mov	w0, w21
     d98:	str	x2, [x19, #8]
     d9c:	sturb	w21, [x1, #-1]
     da0:	str	wzr, [x19, #84]
     da4:	ldr	x1, [x19, #16]
     da8:	ldr	x21, [sp, #32]
     dac:	sub	x1, x1, #0x1
     db0:	str	x1, [x19, #16]
     db4:	ldp	x19, x20, [sp, #16]
     db8:	ldp	x29, x30, [sp], #48
     dbc:	ret
     dc0:	ldr	x20, [x19, #96]
     dc4:	str	wzr, [x19, #104]
     dc8:	cbz	x20, d5c <gzungetc+0x44>
     dcc:	nop
     dd0:	ldr	w3, [x19]
     dd4:	mov	x0, x19
     dd8:	mov	w5, #0x0                   	// #0
     ddc:	mov	w2, w3
     de0:	mov	x1, x2
     de4:	cmp	x2, x20
     de8:	cbz	w3, e34 <gzungetc+0x11c>
     dec:	b.le	dfc <gzungetc+0xe4>
     df0:	sub	w5, w3, w20
     df4:	and	x1, x20, #0xffffffff
     df8:	mov	w2, w20
     dfc:	ldp	x4, x3, [x19, #8]
     e00:	subs	x20, x20, x1
     e04:	str	w5, [x19]
     e08:	add	x2, x4, x2
     e0c:	add	x1, x3, x1
     e10:	stp	x2, x1, [x19, #8]
     e14:	b.eq	d5c <gzungetc+0x44>  // b.none
     e18:	ldr	w3, [x19]
     e1c:	mov	x0, x19
     e20:	mov	w5, #0x0                   	// #0
     e24:	mov	w2, w3
     e28:	mov	x1, x2
     e2c:	cmp	x2, x20
     e30:	cbnz	w3, dec <gzungetc+0xd4>
     e34:	ldr	w1, [x19, #80]
     e38:	cbz	w1, e44 <gzungetc+0x12c>
     e3c:	ldr	w1, [x19, #128]
     e40:	cbz	w1, e64 <gzungetc+0x14c>
     e44:	bl	518 <gz_fetch>
     e48:	cmn	w0, #0x1
     e4c:	b.ne	dd0 <gzungetc+0xb8>  // b.any
     e50:	mov	w0, #0xffffffff            	// #-1
     e54:	ldp	x19, x20, [sp, #16]
     e58:	ldr	x21, [sp, #32]
     e5c:	ldp	x29, x30, [sp], #48
     e60:	ret
     e64:	tbnz	w21, #31, e50 <gzungetc+0x138>
     e68:	ldr	w0, [x19, #40]
     e6c:	lsl	w0, w0, #1
     e70:	ldr	x2, [x19, #56]
     e74:	sub	x1, x0, #0x1
     e78:	mov	w3, #0x1                   	// #1
     e7c:	str	w3, [x19]
     e80:	add	x3, x2, x1
     e84:	str	x3, [x19, #8]
     e88:	strb	w21, [x2, x1]
     e8c:	mov	w0, w21
     e90:	str	wzr, [x19, #84]
     e94:	ldr	x1, [x19, #16]
     e98:	ldr	x21, [sp, #32]
     e9c:	sub	x1, x1, #0x1
     ea0:	str	x1, [x19, #16]
     ea4:	ldp	x19, x20, [sp, #16]
     ea8:	ldp	x29, x30, [sp], #48
     eac:	ret
     eb0:	add	x2, x1, w3, uxtw
     eb4:	add	x1, x1, w0, uxtw
     eb8:	cmp	x4, x2
     ebc:	b.cs	d88 <gzungetc+0x70>  // b.hs, b.nlast
     ec0:	ldrb	w0, [x2, #-1]!
     ec4:	strb	w0, [x1, #-1]!
     ec8:	ldr	x0, [x19, #56]
     ecc:	cmp	x0, x2
     ed0:	b.cc	ec0 <gzungetc+0x1a8>  // b.lo, b.ul, b.last
     ed4:	ldr	w3, [x19]
     ed8:	b	d88 <gzungetc+0x70>
     edc:	mov	x0, x19
     ee0:	adrp	x2, 0 <gz_look>
     ee4:	mov	w1, #0xfffffffd            	// #-3
     ee8:	add	x2, x2, #0x0
     eec:	bl	0 <gz_error>
     ef0:	mov	w0, #0xffffffff            	// #-1
     ef4:	b	e54 <gzungetc+0x13c>
     ef8:	mov	w0, #0xffffffff            	// #-1
     efc:	ret

0000000000000f00 <gzgets>:
     f00:	cmp	x1, #0x0
     f04:	ccmp	w2, #0x0, #0x4, ne  // ne = any
     f08:	ccmp	x0, #0x0, #0x4, gt
     f0c:	b.eq	1074 <gzgets+0x174>  // b.none
     f10:	stp	x29, x30, [sp, #-80]!
     f14:	mov	x29, sp
     f18:	stp	x19, x20, [sp, #16]
     f1c:	mov	x19, x0
     f20:	mov	w0, #0x1c4f                	// #7247
     f24:	stp	x21, x22, [sp, #32]
     f28:	mov	x22, x1
     f2c:	ldr	w1, [x19, #24]
     f30:	cmp	w1, w0
     f34:	b.ne	1000 <gzgets+0x100>  // b.any
     f38:	ldr	w0, [x19, #108]
     f3c:	cmp	w0, #0x0
     f40:	ccmn	w0, #0x5, #0x4, ne  // ne = any
     f44:	b.ne	1000 <gzgets+0x100>  // b.any
     f48:	ldr	w0, [x19, #104]
     f4c:	mov	w21, w2
     f50:	cbnz	w0, 107c <gzgets+0x17c>
     f54:	subs	w21, w21, #0x1
     f58:	b.eq	1000 <gzgets+0x100>  // b.none
     f5c:	ldr	w3, [x19]
     f60:	stp	x23, x24, [sp, #48]
     f64:	mov	x24, x22
     f68:	str	x25, [sp, #64]
     f6c:	cbz	w3, 1050 <gzgets+0x150>
     f70:	cmp	w21, w3
     f74:	mov	w1, #0xa                   	// #10
     f78:	ldr	x25, [x19, #8]
     f7c:	csel	w23, w21, w3, ls  // ls = plast
     f80:	csel	w20, w21, w3, ls  // ls = plast
     f84:	mov	x2, x23
     f88:	mov	x0, x25
     f8c:	bl	0 <memchr>
     f90:	cbz	x0, 1014 <gzgets+0x114>
     f94:	sub	x0, x0, x25
     f98:	mov	x1, x25
     f9c:	add	w21, w0, #0x1
     fa0:	add	w20, w0, #0x1
     fa4:	mov	x2, x21
     fa8:	mov	x0, x24
     fac:	bl	0 <memcpy>
     fb0:	add	x24, x24, x21
     fb4:	ldp	x1, x2, [x19, #8]
     fb8:	ldr	w0, [x19]
     fbc:	sub	w0, w0, w20
     fc0:	str	w0, [x19]
     fc4:	add	x1, x1, x21
     fc8:	add	x2, x2, x21
     fcc:	stp	x1, x2, [x19, #8]
     fd0:	cmp	x24, x22
     fd4:	b.eq	ff8 <gzgets+0xf8>  // b.none
     fd8:	strb	wzr, [x24]
     fdc:	mov	x0, x22
     fe0:	ldp	x19, x20, [sp, #16]
     fe4:	ldp	x21, x22, [sp, #32]
     fe8:	ldp	x23, x24, [sp, #48]
     fec:	ldr	x25, [sp, #64]
     ff0:	ldp	x29, x30, [sp], #80
     ff4:	ret
     ff8:	ldp	x23, x24, [sp, #48]
     ffc:	ldr	x25, [sp, #64]
    1000:	mov	x0, #0x0                   	// #0
    1004:	ldp	x19, x20, [sp, #16]
    1008:	ldp	x21, x22, [sp, #32]
    100c:	ldp	x29, x30, [sp], #80
    1010:	ret
    1014:	mov	x2, x23
    1018:	mov	x0, x24
    101c:	mov	x1, x25
    1020:	bl	0 <memcpy>
    1024:	ldp	x0, x2, [x19, #8]
    1028:	add	x24, x24, x23
    102c:	ldr	w3, [x19]
    1030:	subs	w21, w21, w20
    1034:	sub	w3, w3, w20
    1038:	str	w3, [x19]
    103c:	add	x0, x0, x23
    1040:	add	x2, x2, x23
    1044:	stp	x0, x2, [x19, #8]
    1048:	b.eq	fd0 <gzgets+0xd0>  // b.none
    104c:	cbnz	w3, f70 <gzgets+0x70>
    1050:	mov	x0, x19
    1054:	bl	518 <gz_fetch>
    1058:	cmn	w0, #0x1
    105c:	b.eq	ff8 <gzgets+0xf8>  // b.none
    1060:	ldr	w3, [x19]
    1064:	cbnz	w3, f70 <gzgets+0x70>
    1068:	mov	w0, #0x1                   	// #1
    106c:	str	w0, [x19, #84]
    1070:	b	fd0 <gzgets+0xd0>
    1074:	mov	x0, #0x0                   	// #0
    1078:	ret
    107c:	ldr	x20, [x19, #96]
    1080:	str	wzr, [x19, #104]
    1084:	cbz	x20, f54 <gzgets+0x54>
    1088:	ldr	w2, [x19]
    108c:	mov	x0, x19
    1090:	mov	w4, #0x0                   	// #0
    1094:	mov	w1, w2
    1098:	mov	x3, x1
    109c:	cmp	x1, x20
    10a0:	cbz	w2, 10ec <gzgets+0x1ec>
    10a4:	b.le	10b4 <gzgets+0x1b4>
    10a8:	sub	w4, w2, w20
    10ac:	and	x3, x20, #0xffffffff
    10b0:	mov	w1, w20
    10b4:	ldp	x2, x0, [x19, #8]
    10b8:	subs	x20, x20, x3
    10bc:	str	w4, [x19]
    10c0:	add	x1, x2, x1
    10c4:	add	x3, x0, x3
    10c8:	stp	x1, x3, [x19, #8]
    10cc:	b.eq	f54 <gzgets+0x54>  // b.none
    10d0:	ldr	w2, [x19]
    10d4:	mov	x0, x19
    10d8:	mov	w4, #0x0                   	// #0
    10dc:	mov	w1, w2
    10e0:	mov	x3, x1
    10e4:	cmp	x1, x20
    10e8:	cbnz	w2, 10a4 <gzgets+0x1a4>
    10ec:	ldr	w1, [x19, #80]
    10f0:	cbz	w1, 10fc <gzgets+0x1fc>
    10f4:	ldr	w1, [x19, #128]
    10f8:	cbz	w1, f54 <gzgets+0x54>
    10fc:	bl	518 <gz_fetch>
    1100:	cmn	w0, #0x1
    1104:	b.ne	1088 <gzgets+0x188>  // b.any
    1108:	b	1000 <gzgets+0x100>
    110c:	nop

0000000000001110 <gzdirect>:
    1110:	cbz	x0, 115c <gzdirect+0x4c>
    1114:	stp	x29, x30, [sp, #-32]!
    1118:	mov	w1, #0x1c4f                	// #7247
    111c:	mov	x29, sp
    1120:	ldr	w2, [x0, #24]
    1124:	str	x19, [sp, #16]
    1128:	mov	x19, x0
    112c:	cmp	w2, w1
    1130:	b.eq	1144 <gzdirect+0x34>  // b.none
    1134:	ldr	w0, [x19, #64]
    1138:	ldr	x19, [sp, #16]
    113c:	ldp	x29, x30, [sp], #32
    1140:	ret
    1144:	ldr	w1, [x0, #68]
    1148:	cbnz	w1, 1134 <gzdirect+0x24>
    114c:	ldr	w1, [x0]
    1150:	cbnz	w1, 1134 <gzdirect+0x24>
    1154:	bl	0 <gz_look>
    1158:	b	1134 <gzdirect+0x24>
    115c:	mov	w0, #0x0                   	// #0
    1160:	ret
    1164:	nop

0000000000001168 <gzclose_r>:
    1168:	stp	x29, x30, [sp, #-48]!
    116c:	mov	x29, sp
    1170:	stp	x19, x20, [sp, #16]
    1174:	cbz	x0, 1208 <gzclose_r+0xa0>
    1178:	mov	x19, x0
    117c:	mov	w0, #0x1c4f                	// #7247
    1180:	ldr	w1, [x19, #24]
    1184:	cmp	w1, w0
    1188:	b.ne	1208 <gzclose_r+0xa0>  // b.any
    118c:	ldr	w0, [x19, #40]
    1190:	str	x21, [sp, #32]
    1194:	cbnz	w0, 11ec <gzclose_r+0x84>
    1198:	ldr	w20, [x19, #108]
    119c:	mov	x2, #0x0                   	// #0
    11a0:	mov	w1, #0x0                   	// #0
    11a4:	mov	x0, x19
    11a8:	cmn	w20, #0x5
    11ac:	csel	w20, w20, wzr, eq  // eq = none
    11b0:	bl	0 <gz_error>
    11b4:	ldr	x0, [x19, #32]
    11b8:	bl	0 <free>
    11bc:	ldr	w0, [x19, #28]
    11c0:	bl	0 <close>
    11c4:	mov	w21, w0
    11c8:	mov	x0, x19
    11cc:	bl	0 <free>
    11d0:	cmp	w21, #0x0
    11d4:	ldr	x21, [sp, #32]
    11d8:	csinv	w20, w20, wzr, eq  // eq = none
    11dc:	mov	w0, w20
    11e0:	ldp	x19, x20, [sp, #16]
    11e4:	ldp	x29, x30, [sp], #48
    11e8:	ret
    11ec:	add	x0, x19, #0x78
    11f0:	bl	0 <inflateEnd>
    11f4:	ldr	x0, [x19, #56]
    11f8:	bl	0 <free>
    11fc:	ldr	x0, [x19, #48]
    1200:	bl	0 <free>
    1204:	b	1198 <gzclose_r+0x30>
    1208:	mov	w20, #0xfffffffe            	// #-2
    120c:	b	11dc <gzclose_r+0x74>

gzwrite.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <gz_init>:
       0:	stp	x29, x30, [sp, #-48]!
       4:	mov	x29, sp
       8:	stp	x19, x20, [sp, #16]
       c:	mov	x19, x0
      10:	str	x21, [sp, #32]
      14:	ldr	w21, [x0, #44]
      18:	lsl	w0, w21, #1
      1c:	bl	0 <malloc>
      20:	str	x0, [x19, #48]
      24:	cbz	x0, f8 <gz_init+0xf8>
      28:	mov	x20, x0
      2c:	ldr	w0, [x19, #64]
      30:	cbz	w0, 4c <gz_init+0x4c>
      34:	mov	w0, #0x0                   	// #0
      38:	str	w21, [x19, #40]
      3c:	ldp	x19, x20, [sp, #16]
      40:	ldr	x21, [sp, #32]
      44:	ldp	x29, x30, [sp], #48
      48:	ret
      4c:	mov	w0, w21
      50:	bl	0 <malloc>
      54:	str	x0, [x19, #56]
      58:	cbz	x0, f0 <gz_init+0xf0>
      5c:	add	x20, x19, #0x78
      60:	stp	xzr, xzr, [x19, #184]
      64:	adrp	x6, 0 <gz_init>
      68:	ldp	w1, w5, [x19, #88]
      6c:	str	xzr, [x20, #80]
      70:	mov	w4, #0x8                   	// #8
      74:	mov	x0, x20
      78:	add	x6, x6, #0x0
      7c:	mov	w2, w4
      80:	mov	w7, #0x70                  	// #112
      84:	mov	w3, #0x1f                  	// #31
      88:	bl	0 <deflateInit2_>
      8c:	cbnz	w0, c4 <gz_init+0xc4>
      90:	ldr	w0, [x19, #64]
      94:	ldr	w2, [x19, #44]
      98:	str	w2, [x19, #40]
      9c:	str	xzr, [x19, #120]
      a0:	cbnz	w0, 114 <gz_init+0x114>
      a4:	ldr	x1, [x19, #56]
      a8:	str	x1, [x20, #24]
      ac:	str	w2, [x20, #32]
      b0:	str	x1, [x19, #8]
      b4:	ldp	x19, x20, [sp, #16]
      b8:	ldr	x21, [sp, #32]
      bc:	ldp	x29, x30, [sp], #48
      c0:	ret
      c4:	ldr	x0, [x19, #56]
      c8:	bl	0 <free>
      cc:	ldr	x0, [x19, #48]
      d0:	bl	0 <free>
      d4:	mov	x0, x19
      d8:	adrp	x2, 0 <gz_init>
      dc:	mov	w1, #0xfffffffc            	// #-4
      e0:	add	x2, x2, #0x0
      e4:	bl	0 <gz_error>
      e8:	mov	w0, #0xffffffff            	// #-1
      ec:	b	3c <gz_init+0x3c>
      f0:	mov	x0, x20
      f4:	bl	0 <free>
      f8:	mov	x0, x19
      fc:	adrp	x2, 0 <gz_init>
     100:	mov	w1, #0xfffffffc            	// #-4
     104:	add	x2, x2, #0x0
     108:	bl	0 <gz_error>
     10c:	mov	w0, #0xffffffff            	// #-1
     110:	b	3c <gz_init+0x3c>
     114:	mov	w0, #0x0                   	// #0
     118:	b	3c <gz_init+0x3c>
     11c:	nop

0000000000000120 <gz_comp>:
     120:	stp	x29, x30, [sp, #-64]!
     124:	mov	x29, sp
     128:	stp	x21, x22, [sp, #32]
     12c:	mov	w22, w1
     130:	ldr	w1, [x0, #40]
     134:	stp	x19, x20, [sp, #16]
     138:	mov	x19, x0
     13c:	stp	x23, x24, [sp, #48]
     140:	cbz	w1, 2e8 <gz_comp+0x1c8>
     144:	ldr	w23, [x19, #64]
     148:	cbz	w23, 1cc <gz_comp+0xac>
     14c:	ldr	w2, [x19, #128]
     150:	add	x20, x19, #0x78
     154:	cbz	w2, 21c <gz_comp+0xfc>
     158:	mov	w21, #0x40000000            	// #1073741824
     15c:	ldr	x1, [x19, #120]
     160:	b	180 <gz_comp+0x60>
     164:	ldr	x1, [x20]
     168:	ldr	w2, [x20, #8]
     16c:	add	x1, x1, w0, sxtw
     170:	sub	w2, w2, w0
     174:	str	x1, [x20]
     178:	str	w2, [x20, #8]
     17c:	cbz	w2, 21c <gz_comp+0xfc>
     180:	ldr	w0, [x19, #28]
     184:	cmp	w2, w21
     188:	csel	w2, w2, w21, ls  // ls = plast
     18c:	bl	0 <write>
     190:	tbz	w0, #31, 164 <gz_comp+0x44>
     194:	bl	0 <__errno_location>
     198:	ldr	w0, [x0]
     19c:	mov	w23, #0xffffffff            	// #-1
     1a0:	bl	0 <strerror>
     1a4:	mov	x2, x0
     1a8:	mov	w1, w23
     1ac:	mov	x0, x19
     1b0:	bl	0 <gz_error>
     1b4:	mov	w0, w23
     1b8:	ldp	x19, x20, [sp, #16]
     1bc:	ldp	x21, x22, [sp, #32]
     1c0:	ldp	x23, x24, [sp, #48]
     1c4:	ldp	x29, x30, [sp], #64
     1c8:	ret
     1cc:	ldr	w3, [x19, #152]
     1d0:	add	x20, x19, #0x78
     1d4:	mov	w0, #0x0                   	// #0
     1d8:	mov	x21, #0x40000000            	// #1073741824
     1dc:	cbz	w3, 2d4 <gz_comp+0x1b4>
     1e0:	cbz	w22, 1f0 <gz_comp+0xd0>
     1e4:	cmp	w22, #0x4
     1e8:	ccmp	w0, #0x1, #0x4, eq  // eq = none
     1ec:	b.eq	238 <gz_comp+0x118>  // b.none
     1f0:	mov	w24, w3
     1f4:	mov	w1, w22
     1f8:	mov	x0, x20
     1fc:	bl	0 <deflate>
     200:	cmn	w0, #0x2
     204:	b.eq	2fc <gz_comp+0x1dc>  // b.none
     208:	ldr	w3, [x20, #32]
     20c:	cmp	w3, w24
     210:	b.ne	1dc <gz_comp+0xbc>  // b.any
     214:	cmp	w22, #0x4
     218:	b.eq	318 <gz_comp+0x1f8>  // b.none
     21c:	mov	w23, #0x0                   	// #0
     220:	mov	w0, w23
     224:	ldp	x19, x20, [sp, #16]
     228:	ldp	x21, x22, [sp, #32]
     22c:	ldp	x23, x24, [sp, #48]
     230:	ldp	x29, x30, [sp], #64
     234:	ret
     238:	ldr	x1, [x19, #8]
     23c:	ldr	x2, [x20, #24]
     240:	cmp	x2, x1
     244:	b.ls	1f0 <gz_comp+0xd0>  // b.plast
     248:	sub	x2, x2, x1
     24c:	ldr	w0, [x19, #28]
     250:	cmp	x2, x21
     254:	csel	x2, x2, x21, le
     258:	mov	w2, w2
     25c:	bl	0 <write>
     260:	tbnz	w0, #31, 194 <gz_comp+0x74>
     264:	ldr	x1, [x19, #8]
     268:	ldr	x2, [x20, #24]
     26c:	add	x1, x1, w0, sxtw
     270:	str	x1, [x19, #8]
     274:	cmp	x1, x2
     278:	b.cs	2b4 <gz_comp+0x194>  // b.hs, b.nlast
     27c:	nop
     280:	sub	x2, x2, x1
     284:	ldr	w0, [x19, #28]
     288:	cmp	x2, x21
     28c:	csel	x2, x2, x21, le
     290:	mov	w2, w2
     294:	bl	0 <write>
     298:	tbnz	w0, #31, 194 <gz_comp+0x74>
     29c:	ldr	x1, [x19, #8]
     2a0:	ldr	x2, [x20, #24]
     2a4:	add	x1, x1, w0, sxtw
     2a8:	str	x1, [x19, #8]
     2ac:	cmp	x1, x2
     2b0:	b.cc	280 <gz_comp+0x160>  // b.lo, b.ul, b.last
     2b4:	ldr	w24, [x20, #32]
     2b8:	cbnz	w24, 1f4 <gz_comp+0xd4>
     2bc:	ldr	w24, [x19, #40]
     2c0:	ldr	x0, [x19, #56]
     2c4:	str	x0, [x20, #24]
     2c8:	str	w24, [x20, #32]
     2cc:	str	x0, [x19, #8]
     2d0:	b	1f4 <gz_comp+0xd4>
     2d4:	ldr	x1, [x19, #8]
     2d8:	ldr	x2, [x20, #24]
     2dc:	cmp	x2, x1
     2e0:	b.hi	280 <gz_comp+0x160>  // b.pmore
     2e4:	b	2bc <gz_comp+0x19c>
     2e8:	bl	0 <gz_init>
     2ec:	mov	w23, w0
     2f0:	cmn	w0, #0x1
     2f4:	b.ne	144 <gz_comp+0x24>  // b.any
     2f8:	b	1b4 <gz_comp+0x94>
     2fc:	mov	w1, w0
     300:	adrp	x2, 0 <gz_init>
     304:	mov	x0, x19
     308:	add	x2, x2, #0x0
     30c:	mov	w23, #0xffffffff            	// #-1
     310:	bl	0 <gz_error>
     314:	b	1b4 <gz_comp+0x94>
     318:	mov	x0, x20
     31c:	bl	0 <deflateReset>
     320:	b	1b4 <gz_comp+0x94>
     324:	nop

0000000000000328 <gz_comp.constprop.0>:
     328:	stp	x29, x30, [sp, #-48]!
     32c:	mov	x29, sp
     330:	ldr	w1, [x0, #40]
     334:	stp	x19, x20, [sp, #16]
     338:	mov	x19, x0
     33c:	cbz	w1, 47c <gz_comp.constprop.0+0x154>
     340:	ldr	w0, [x19, #64]
     344:	cbz	w0, 3c4 <gz_comp.constprop.0+0x9c>
     348:	ldr	w2, [x19, #128]
     34c:	add	x20, x19, #0x78
     350:	cbz	w2, 400 <gz_comp.constprop.0+0xd8>
     354:	stp	x21, x22, [sp, #32]
     358:	mov	w21, #0x40000000            	// #1073741824
     35c:	ldr	x1, [x19, #120]
     360:	b	380 <gz_comp.constprop.0+0x58>
     364:	ldr	x1, [x20]
     368:	ldr	w2, [x20, #8]
     36c:	add	x1, x1, w0, sxtw
     370:	sub	w2, w2, w0
     374:	str	x1, [x20]
     378:	str	w2, [x20, #8]
     37c:	cbz	w2, 3fc <gz_comp.constprop.0+0xd4>
     380:	ldr	w0, [x19, #28]
     384:	cmp	w2, w21
     388:	csel	w2, w2, w21, ls  // ls = plast
     38c:	bl	0 <write>
     390:	tbz	w0, #31, 364 <gz_comp.constprop.0+0x3c>
     394:	bl	0 <__errno_location>
     398:	ldr	w0, [x0]
     39c:	bl	0 <strerror>
     3a0:	mov	x2, x0
     3a4:	mov	w1, #0xffffffff            	// #-1
     3a8:	mov	x0, x19
     3ac:	bl	0 <gz_error>
     3b0:	ldp	x21, x22, [sp, #32]
     3b4:	mov	w0, #0xffffffff            	// #-1
     3b8:	ldp	x19, x20, [sp, #16]
     3bc:	ldp	x29, x30, [sp], #48
     3c0:	ret
     3c4:	ldr	w0, [x19, #152]
     3c8:	add	x20, x19, #0x78
     3cc:	stp	x21, x22, [sp, #32]
     3d0:	mov	x21, #0x40000000            	// #1073741824
     3d4:	mov	w22, w0
     3d8:	cbz	w0, 410 <gz_comp.constprop.0+0xe8>
     3dc:	mov	x0, x20
     3e0:	mov	w1, #0x0                   	// #0
     3e4:	bl	0 <deflate>
     3e8:	cmn	w0, #0x2
     3ec:	b.eq	48c <gz_comp.constprop.0+0x164>  // b.none
     3f0:	ldr	w0, [x20, #32]
     3f4:	cmp	w0, w22
     3f8:	b.ne	3d4 <gz_comp.constprop.0+0xac>  // b.any
     3fc:	ldp	x21, x22, [sp, #32]
     400:	mov	w0, #0x0                   	// #0
     404:	ldp	x19, x20, [sp, #16]
     408:	ldp	x29, x30, [sp], #48
     40c:	ret
     410:	ldr	x1, [x19, #8]
     414:	ldr	x2, [x20, #24]
     418:	cmp	x1, x2
     41c:	b.cc	43c <gz_comp.constprop.0+0x114>  // b.lo, b.ul, b.last
     420:	b	464 <gz_comp.constprop.0+0x13c>
     424:	ldr	x1, [x19, #8]
     428:	ldr	x2, [x20, #24]
     42c:	add	x1, x1, w0, sxtw
     430:	str	x1, [x19, #8]
     434:	cmp	x2, x1
     438:	b.ls	45c <gz_comp.constprop.0+0x134>  // b.plast
     43c:	sub	x2, x2, x1
     440:	ldr	w0, [x19, #28]
     444:	cmp	x2, x21
     448:	csel	x2, x2, x21, le
     44c:	mov	w2, w2
     450:	bl	0 <write>
     454:	tbz	w0, #31, 424 <gz_comp.constprop.0+0xfc>
     458:	b	394 <gz_comp.constprop.0+0x6c>
     45c:	ldr	w22, [x20, #32]
     460:	cbnz	w22, 3dc <gz_comp.constprop.0+0xb4>
     464:	ldr	w22, [x19, #40]
     468:	ldr	x0, [x19, #56]
     46c:	str	x0, [x20, #24]
     470:	str	w22, [x20, #32]
     474:	str	x0, [x19, #8]
     478:	b	3dc <gz_comp.constprop.0+0xb4>
     47c:	bl	0 <gz_init>
     480:	cmn	w0, #0x1
     484:	b.ne	340 <gz_comp.constprop.0+0x18>  // b.any
     488:	b	3b8 <gz_comp.constprop.0+0x90>
     48c:	mov	w1, w0
     490:	adrp	x2, 0 <gz_init>
     494:	mov	x0, x19
     498:	add	x2, x2, #0x0
     49c:	bl	0 <gz_error>
     4a0:	mov	w0, #0xffffffff            	// #-1
     4a4:	ldp	x21, x22, [sp, #32]
     4a8:	b	3b8 <gz_comp.constprop.0+0x90>
     4ac:	nop

00000000000004b0 <gz_write>:
     4b0:	stp	x29, x30, [sp, #-80]!
     4b4:	mov	x29, sp
     4b8:	stp	x23, x24, [sp, #48]
     4bc:	cbz	x2, 5dc <gz_write+0x12c>
     4c0:	mov	x23, x1
     4c4:	ldr	w1, [x0, #40]
     4c8:	stp	x19, x20, [sp, #16]
     4cc:	mov	x24, x2
     4d0:	mov	x19, x0
     4d4:	cbz	w1, 5f0 <gz_write+0x140>
     4d8:	ldr	w0, [x19, #104]
     4dc:	str	x25, [sp, #64]
     4e0:	add	x25, x19, #0x78
     4e4:	stp	x21, x22, [sp, #32]
     4e8:	ldr	w3, [x25, #8]
     4ec:	cbnz	w0, 604 <gz_write+0x154>
     4f0:	ldr	w20, [x19, #40]
     4f4:	cmp	x24, w20, uxtw
     4f8:	b.cs	580 <gz_write+0xd0>  // b.hs, b.nlast
     4fc:	mov	x21, x24
     500:	ldr	x2, [x19, #48]
     504:	cbz	w3, 690 <gz_write+0x1e0>
     508:	ldr	x0, [x19, #120]
     50c:	add	x3, x0, w3, uxtw
     510:	sub	x0, x3, x2
     514:	mov	x1, x23
     518:	sub	w25, w20, w0
     51c:	sub	w20, w20, w0
     520:	cmp	x25, x21
     524:	add	x0, x2, w0, uxtw
     528:	mov	x22, x25
     52c:	b.ls	53c <gz_write+0x8c>  // b.plast
     530:	mov	w25, w21
     534:	and	x22, x21, #0xffffffff
     538:	mov	x20, x25
     53c:	mov	x2, x22
     540:	bl	0 <memcpy>
     544:	ldr	x0, [x19, #16]
     548:	subs	x21, x21, x22
     54c:	ldr	w1, [x19, #128]
     550:	add	x25, x0, x25
     554:	str	x25, [x19, #16]
     558:	add	w20, w1, w20
     55c:	str	w20, [x19, #128]
     560:	b.ne	69c <gz_write+0x1ec>  // b.any
     564:	mov	x0, x24
     568:	ldp	x19, x20, [sp, #16]
     56c:	ldp	x21, x22, [sp, #32]
     570:	ldp	x23, x24, [sp, #48]
     574:	ldr	x25, [sp, #64]
     578:	ldp	x29, x30, [sp], #80
     57c:	ret
     580:	cbz	w3, 594 <gz_write+0xe4>
     584:	mov	x0, x19
     588:	bl	328 <gz_comp.constprop.0>
     58c:	cmn	w0, #0x1
     590:	b.eq	5d0 <gz_write+0x120>  // b.none
     594:	mov	x20, x24
     598:	mov	x22, #0xfffffffe            	// #4294967294
     59c:	mov	w25, #0xffffffff            	// #-1
     5a0:	mov	x21, #0xffffffff            	// #4294967295
     5a4:	str	x23, [x19, #120]
     5a8:	mov	x0, x19
     5ac:	cmp	x20, x22
     5b0:	ldr	x1, [x19, #16]
     5b4:	b.hi	6bc <gz_write+0x20c>  // b.pmore
     5b8:	str	w20, [x19, #128]
     5bc:	add	x20, x1, x20
     5c0:	str	x20, [x19, #16]
     5c4:	bl	328 <gz_comp.constprop.0>
     5c8:	cmn	w0, #0x1
     5cc:	b.ne	564 <gz_write+0xb4>  // b.any
     5d0:	ldp	x19, x20, [sp, #16]
     5d4:	ldp	x21, x22, [sp, #32]
     5d8:	ldr	x25, [sp, #64]
     5dc:	mov	x24, #0x0                   	// #0
     5e0:	mov	x0, x24
     5e4:	ldp	x23, x24, [sp, #48]
     5e8:	ldp	x29, x30, [sp], #80
     5ec:	ret
     5f0:	bl	0 <gz_init>
     5f4:	cmn	w0, #0x1
     5f8:	b.ne	4d8 <gz_write+0x28>  // b.any
     5fc:	ldp	x19, x20, [sp, #16]
     600:	b	5dc <gz_write+0x12c>
     604:	str	wzr, [x19, #104]
     608:	ldr	x20, [x19, #96]
     60c:	cbnz	w3, 6e0 <gz_write+0x230>
     610:	mov	w1, #0x1                   	// #1
     614:	cbnz	x20, 66c <gz_write+0x1bc>
     618:	ldr	w20, [x19, #40]
     61c:	ldr	w3, [x19, #128]
     620:	cmp	x24, w20, uxtw
     624:	b.cs	580 <gz_write+0xd0>  // b.hs, b.nlast
     628:	b	4fc <gz_write+0x4c>
     62c:	mov	w2, w21
     630:	mov	w1, #0x0                   	// #0
     634:	bl	0 <memset>
     638:	ldr	x0, [x19, #48]
     63c:	ldr	x1, [x19, #16]
     640:	str	x0, [x25]
     644:	str	w21, [x25, #8]
     648:	mov	x0, x19
     64c:	add	x1, x1, x22
     650:	str	x1, [x19, #16]
     654:	bl	328 <gz_comp.constprop.0>
     658:	cmn	w0, #0x1
     65c:	b.eq	5d0 <gz_write+0x120>  // b.none
     660:	subs	x20, x20, x22
     664:	mov	w1, #0x0                   	// #0
     668:	b.eq	618 <gz_write+0x168>  // b.none
     66c:	ldr	w21, [x19, #40]
     670:	mov	w22, w21
     674:	cmp	x20, w21, uxtw
     678:	b.ge	684 <gz_write+0x1d4>  // b.tcont
     67c:	mov	w21, w20
     680:	and	x22, x20, #0xffffffff
     684:	ldr	x0, [x19, #48]
     688:	cbz	w1, 63c <gz_write+0x18c>
     68c:	b	62c <gz_write+0x17c>
     690:	mov	x0, x2
     694:	str	x2, [x19, #120]
     698:	b	50c <gz_write+0x5c>
     69c:	mov	x0, x19
     6a0:	add	x23, x23, x22
     6a4:	bl	328 <gz_comp.constprop.0>
     6a8:	cmn	w0, #0x1
     6ac:	b.eq	5d0 <gz_write+0x120>  // b.none
     6b0:	ldr	w20, [x19, #40]
     6b4:	ldr	w3, [x19, #128]
     6b8:	b	500 <gz_write+0x50>
     6bc:	add	x1, x1, x21
     6c0:	str	x1, [x19, #16]
     6c4:	str	w25, [x19, #128]
     6c8:	bl	328 <gz_comp.constprop.0>
     6cc:	cmn	w0, #0x1
     6d0:	b.eq	5d0 <gz_write+0x120>  // b.none
     6d4:	subs	x20, x20, x21
     6d8:	b.ne	5a8 <gz_write+0xf8>  // b.any
     6dc:	b	564 <gz_write+0xb4>
     6e0:	mov	x0, x19
     6e4:	bl	328 <gz_comp.constprop.0>
     6e8:	cmn	w0, #0x1
     6ec:	b.ne	610 <gz_write+0x160>  // b.any
     6f0:	b	5d0 <gz_write+0x120>
     6f4:	nop

00000000000006f8 <gzwrite>:
     6f8:	stp	x29, x30, [sp, #-32]!
     6fc:	mov	x29, sp
     700:	str	x19, [sp, #16]
     704:	cbz	x0, 744 <gzwrite+0x4c>
     708:	ldr	w5, [x0, #24]
     70c:	mov	w4, #0x79b1                	// #31153
     710:	mov	w19, #0x0                   	// #0
     714:	cmp	w5, w4
     718:	b.ne	734 <gzwrite+0x3c>  // b.any
     71c:	ldr	w19, [x0, #108]
     720:	cbnz	w19, 744 <gzwrite+0x4c>
     724:	tbnz	w2, #31, 758 <gzwrite+0x60>
     728:	mov	w2, w2
     72c:	bl	4b0 <gz_write>
     730:	mov	w19, w0
     734:	mov	w0, w19
     738:	ldr	x19, [sp, #16]
     73c:	ldp	x29, x30, [sp], #32
     740:	ret
     744:	mov	w19, #0x0                   	// #0
     748:	mov	w0, w19
     74c:	ldr	x19, [sp, #16]
     750:	ldp	x29, x30, [sp], #32
     754:	ret
     758:	adrp	x2, 0 <gz_init>
     75c:	mov	w1, #0xfffffffd            	// #-3
     760:	add	x2, x2, #0x0
     764:	bl	0 <gz_error>
     768:	b	734 <gzwrite+0x3c>
     76c:	nop

0000000000000770 <gzfwrite>:
     770:	cbz	x3, 7dc <gzfwrite+0x6c>
     774:	stp	x29, x30, [sp, #-32]!
     778:	mov	x4, x0
     77c:	mov	x0, #0x0                   	// #0
     780:	mov	x29, sp
     784:	ldr	w5, [x3, #24]
     788:	str	x19, [sp, #16]
     78c:	mov	x19, x1
     790:	mov	w1, #0x79b1                	// #31153
     794:	cmp	w5, w1
     798:	b.ne	7d0 <gzfwrite+0x60>  // b.any
     79c:	ldr	w1, [x3, #108]
     7a0:	cbnz	w1, 7d0 <gzfwrite+0x60>
     7a4:	cbz	x19, 7d0 <gzfwrite+0x60>
     7a8:	mul	x0, x2, x19
     7ac:	udiv	x1, x0, x19
     7b0:	cmp	x1, x2
     7b4:	b.ne	7e4 <gzfwrite+0x74>  // b.any
     7b8:	cbz	x0, 7d0 <gzfwrite+0x60>
     7bc:	mov	x2, x0
     7c0:	mov	x1, x4
     7c4:	mov	x0, x3
     7c8:	bl	4b0 <gz_write>
     7cc:	udiv	x0, x0, x19
     7d0:	ldr	x19, [sp, #16]
     7d4:	ldp	x29, x30, [sp], #32
     7d8:	ret
     7dc:	mov	x0, #0x0                   	// #0
     7e0:	ret
     7e4:	mov	x0, x3
     7e8:	adrp	x2, 0 <gz_init>
     7ec:	mov	w1, #0xfffffffe            	// #-2
     7f0:	add	x2, x2, #0x0
     7f4:	bl	0 <gz_error>
     7f8:	mov	x0, #0x0                   	// #0
     7fc:	b	7d0 <gzfwrite+0x60>

0000000000000800 <gzputc>:
     800:	cbz	x0, 9a4 <gzputc+0x1a4>
     804:	stp	x29, x30, [sp, #-80]!
     808:	mov	x29, sp
     80c:	ldr	w2, [x0, #24]
     810:	stp	x19, x20, [sp, #16]
     814:	mov	w20, w1
     818:	mov	x19, x0
     81c:	mov	w1, #0x79b1                	// #31153
     820:	cmp	w2, w1
     824:	b.ne	988 <gzputc+0x188>  // b.any
     828:	ldr	w1, [x0, #108]
     82c:	cbnz	w1, 988 <gzputc+0x188>
     830:	ldr	w1, [x0, #104]
     834:	cbnz	w1, 8e4 <gzputc+0xe4>
     838:	ldr	w1, [x19, #40]
     83c:	and	w3, w20, #0xff
     840:	cbz	w1, 870 <gzputc+0x70>
     844:	stp	x23, x24, [sp, #48]
     848:	add	x24, x19, #0x78
     84c:	ldr	w0, [x24, #8]
     850:	ldr	x2, [x19, #48]
     854:	cbz	w0, 89c <gzputc+0x9c>
     858:	ldr	x4, [x19, #120]
     85c:	add	x0, x4, w0, uxtw
     860:	sub	x0, x0, x2
     864:	cmp	w1, w0
     868:	b.hi	8b4 <gzputc+0xb4>  // b.pmore
     86c:	ldp	x23, x24, [sp, #48]
     870:	mov	x0, x19
     874:	add	x1, sp, #0x48
     878:	mov	x2, #0x1                   	// #1
     87c:	strb	w3, [sp, #72]
     880:	bl	4b0 <gz_write>
     884:	cmp	x0, #0x1
     888:	b.ne	988 <gzputc+0x188>  // b.any
     88c:	and	w0, w20, #0xff
     890:	ldp	x19, x20, [sp, #16]
     894:	ldp	x29, x30, [sp], #80
     898:	ret
     89c:	mov	x4, x2
     8a0:	str	x2, [x19, #120]
     8a4:	add	x0, x4, w0, uxtw
     8a8:	sub	x0, x0, x2
     8ac:	cmp	w1, w0
     8b0:	b.ls	86c <gzputc+0x6c>  // b.plast
     8b4:	strb	w3, [x2, w0, uxtw]
     8b8:	and	w0, w20, #0xff
     8bc:	ldr	w2, [x24, #8]
     8c0:	ldr	x1, [x19, #16]
     8c4:	add	w2, w2, #0x1
     8c8:	str	w2, [x24, #8]
     8cc:	add	x1, x1, #0x1
     8d0:	ldp	x23, x24, [sp, #48]
     8d4:	str	x1, [x19, #16]
     8d8:	ldp	x19, x20, [sp, #16]
     8dc:	ldp	x29, x30, [sp], #80
     8e0:	ret
     8e4:	stp	x23, x24, [sp, #48]
     8e8:	add	x24, x0, #0x78
     8ec:	ldr	w1, [x24, #8]
     8f0:	stp	x21, x22, [sp, #32]
     8f4:	str	wzr, [x0, #104]
     8f8:	ldr	x21, [x0, #96]
     8fc:	cbnz	w1, 970 <gzputc+0x170>
     900:	mov	w1, #0x1                   	// #1
     904:	cbnz	x21, 93c <gzputc+0x13c>
     908:	b	998 <gzputc+0x198>
     90c:	ldr	x1, [x19, #16]
     910:	str	x0, [x24]
     914:	str	w22, [x24, #8]
     918:	mov	x0, x19
     91c:	add	x1, x1, x23
     920:	str	x1, [x19, #16]
     924:	bl	328 <gz_comp.constprop.0>
     928:	cmn	w0, #0x1
     92c:	mov	w1, #0x0                   	// #0
     930:	b.eq	980 <gzputc+0x180>  // b.none
     934:	subs	x21, x21, x23
     938:	b.eq	998 <gzputc+0x198>  // b.none
     93c:	ldr	w22, [x19, #40]
     940:	mov	w23, w22
     944:	cmp	x21, w22, uxtw
     948:	b.ge	954 <gzputc+0x154>  // b.tcont
     94c:	mov	w22, w21
     950:	and	x23, x21, #0xffffffff
     954:	ldr	x0, [x19, #48]
     958:	cbz	w1, 90c <gzputc+0x10c>
     95c:	mov	w2, w22
     960:	mov	w1, #0x0                   	// #0
     964:	bl	0 <memset>
     968:	ldr	x0, [x19, #48]
     96c:	b	90c <gzputc+0x10c>
     970:	bl	328 <gz_comp.constprop.0>
     974:	cmn	w0, #0x1
     978:	b.ne	900 <gzputc+0x100>  // b.any
     97c:	nop
     980:	ldp	x21, x22, [sp, #32]
     984:	ldp	x23, x24, [sp, #48]
     988:	mov	w0, #0xffffffff            	// #-1
     98c:	ldp	x19, x20, [sp, #16]
     990:	ldp	x29, x30, [sp], #80
     994:	ret
     998:	ldp	x21, x22, [sp, #32]
     99c:	ldp	x23, x24, [sp, #48]
     9a0:	b	838 <gzputc+0x38>
     9a4:	mov	w0, #0xffffffff            	// #-1
     9a8:	ret
     9ac:	nop

00000000000009b0 <gzputs>:
     9b0:	cbz	x0, a1c <gzputs+0x6c>
     9b4:	stp	x29, x30, [sp, #-32]!
     9b8:	mov	x29, sp
     9bc:	stp	x19, x20, [sp, #16]
     9c0:	mov	x19, x0
     9c4:	mov	x20, x1
     9c8:	mov	w0, #0x79b1                	// #31153
     9cc:	ldr	w1, [x19, #24]
     9d0:	cmp	w1, w0
     9d4:	b.ne	a14 <gzputs+0x64>  // b.any
     9d8:	ldr	w0, [x19, #108]
     9dc:	cbnz	w0, a14 <gzputs+0x64>
     9e0:	mov	x0, x20
     9e4:	bl	0 <strlen>
     9e8:	mov	x1, x20
     9ec:	mov	x20, x0
     9f0:	mov	x2, x20
     9f4:	mov	x0, x19
     9f8:	bl	4b0 <gz_write>
     9fc:	cmp	w0, #0x0
     a00:	ccmp	x20, #0x0, #0x4, eq  // eq = none
     a04:	b.ne	a14 <gzputs+0x64>  // b.any
     a08:	ldp	x19, x20, [sp, #16]
     a0c:	ldp	x29, x30, [sp], #32
     a10:	ret
     a14:	mov	w0, #0xffffffff            	// #-1
     a18:	b	a08 <gzputs+0x58>
     a1c:	mov	w0, #0xffffffff            	// #-1
     a20:	ret
     a24:	nop

0000000000000a28 <gzvprintf>:
     a28:	stp	x29, x30, [sp, #-112]!
     a2c:	mov	x29, sp
     a30:	stp	x21, x22, [sp, #32]
     a34:	cbz	x0, c6c <gzvprintf+0x244>
     a38:	stp	x19, x20, [sp, #16]
     a3c:	mov	x19, x0
     a40:	stp	x23, x24, [sp, #48]
     a44:	mov	x23, x2
     a48:	ldr	w2, [x0, #24]
     a4c:	str	x25, [sp, #64]
     a50:	mov	x25, x1
     a54:	mov	w1, #0x79b1                	// #31153
     a58:	cmp	w2, w1
     a5c:	b.ne	c58 <gzvprintf+0x230>  // b.any
     a60:	ldr	w1, [x0, #108]
     a64:	cbnz	w1, c58 <gzvprintf+0x230>
     a68:	ldr	w1, [x0, #40]
     a6c:	cbz	w1, b38 <gzvprintf+0x110>
     a70:	ldr	w1, [x19, #104]
     a74:	add	x24, x19, #0x78
     a78:	ldr	w0, [x24, #8]
     a7c:	cbnz	w1, b18 <gzvprintf+0xf0>
     a80:	cbz	w0, b28 <gzvprintf+0x100>
     a84:	ldr	x20, [x19, #120]
     a88:	add	x20, x20, w0, uxtw
     a8c:	ldr	w1, [x19, #40]
     a90:	mov	x2, x25
     a94:	ldp	x6, x7, [x23]
     a98:	sub	w0, w1, #0x1
     a9c:	ldp	x4, x5, [x23, #16]
     aa0:	add	x3, sp, #0x50
     aa4:	strb	wzr, [x20, w0, uxtw]
     aa8:	mov	x0, x20
     aac:	stp	x6, x7, [sp, #80]
     ab0:	ldr	w1, [x19, #40]
     ab4:	stp	x4, x5, [sp, #96]
     ab8:	bl	0 <vsnprintf>
     abc:	mov	w21, w0
     ac0:	cbz	w0, afc <gzvprintf+0xd4>
     ac4:	ldr	w22, [x19, #40]
     ac8:	cmp	w22, w0
     acc:	b.ls	b64 <gzvprintf+0x13c>  // b.plast
     ad0:	sub	w0, w22, #0x1
     ad4:	ldrb	w0, [x20, w0, uxtw]
     ad8:	cbnz	w0, b64 <gzvprintf+0x13c>
     adc:	ldr	x0, [x19, #16]
     ae0:	ldr	w20, [x24, #8]
     ae4:	add	w20, w21, w20
     ae8:	str	w20, [x24, #8]
     aec:	add	x0, x0, w21, sxtw
     af0:	str	x0, [x19, #16]
     af4:	cmp	w22, w20
     af8:	b.ls	c04 <gzvprintf+0x1dc>  // b.plast
     afc:	ldp	x19, x20, [sp, #16]
     b00:	ldp	x23, x24, [sp, #48]
     b04:	ldr	x25, [sp, #64]
     b08:	mov	w0, w21
     b0c:	ldp	x21, x22, [sp, #32]
     b10:	ldp	x29, x30, [sp], #112
     b14:	ret
     b18:	str	wzr, [x19, #104]
     b1c:	ldr	x20, [x19, #96]
     b20:	cbnz	w0, b84 <gzvprintf+0x15c>
     b24:	cbnz	x20, b98 <gzvprintf+0x170>
     b28:	ldr	x20, [x19, #48]
     b2c:	mov	w0, #0x0                   	// #0
     b30:	str	x20, [x19, #120]
     b34:	b	a88 <gzvprintf+0x60>
     b38:	bl	0 <gz_init>
     b3c:	cmn	w0, #0x1
     b40:	b.ne	a70 <gzvprintf+0x48>  // b.any
     b44:	ldr	w21, [x19, #108]
     b48:	ldp	x19, x20, [sp, #16]
     b4c:	mov	w0, w21
     b50:	ldp	x21, x22, [sp, #32]
     b54:	ldp	x23, x24, [sp, #48]
     b58:	ldr	x25, [sp, #64]
     b5c:	ldp	x29, x30, [sp], #112
     b60:	ret
     b64:	mov	w21, #0x0                   	// #0
     b68:	mov	w0, w21
     b6c:	ldp	x19, x20, [sp, #16]
     b70:	ldp	x21, x22, [sp, #32]
     b74:	ldp	x23, x24, [sp, #48]
     b78:	ldr	x25, [sp, #64]
     b7c:	ldp	x29, x30, [sp], #112
     b80:	ret
     b84:	mov	x0, x19
     b88:	bl	328 <gz_comp.constprop.0>
     b8c:	cmn	w0, #0x1
     b90:	b.eq	b44 <gzvprintf+0x11c>  // b.none
     b94:	cbz	x20, c4c <gzvprintf+0x224>
     b98:	mov	w1, #0x1                   	// #1
     b9c:	b	bd0 <gzvprintf+0x1a8>
     ba0:	ldr	x2, [x19, #16]
     ba4:	str	x0, [x24]
     ba8:	str	w21, [x24, #8]
     bac:	mov	x0, x19
     bb0:	add	x2, x2, x22
     bb4:	str	x2, [x19, #16]
     bb8:	bl	328 <gz_comp.constprop.0>
     bbc:	cmn	w0, #0x1
     bc0:	mov	w1, #0x0                   	// #0
     bc4:	b.eq	b44 <gzvprintf+0x11c>  // b.none
     bc8:	subs	x20, x20, x22
     bcc:	b.eq	c4c <gzvprintf+0x224>  // b.none
     bd0:	ldr	w21, [x19, #40]
     bd4:	mov	w22, w21
     bd8:	cmp	x20, w21, uxtw
     bdc:	b.ge	be8 <gzvprintf+0x1c0>  // b.tcont
     be0:	mov	w21, w20
     be4:	and	x22, x20, #0xffffffff
     be8:	ldr	x0, [x19, #48]
     bec:	cbz	w1, ba0 <gzvprintf+0x178>
     bf0:	mov	w2, w21
     bf4:	mov	w1, #0x0                   	// #0
     bf8:	bl	0 <memset>
     bfc:	ldr	x0, [x19, #48]
     c00:	b	ba0 <gzvprintf+0x178>
     c04:	str	w22, [x24, #8]
     c08:	mov	x0, x19
     c0c:	bl	328 <gz_comp.constprop.0>
     c10:	cmn	w0, #0x1
     c14:	b.eq	b44 <gzvprintf+0x11c>  // b.none
     c18:	ldr	x0, [x19, #48]
     c1c:	sub	w2, w20, w22
     c20:	ldr	w1, [x19, #40]
     c24:	sub	w22, w20, w22
     c28:	add	x1, x0, x1
     c2c:	bl	0 <memcpy>
     c30:	ldr	x0, [x19, #48]
     c34:	ldr	x25, [sp, #64]
     c38:	str	x0, [x19, #120]
     c3c:	ldp	x19, x20, [sp, #16]
     c40:	str	w22, [x24, #8]
     c44:	ldp	x23, x24, [sp, #48]
     c48:	b	b08 <gzvprintf+0xe0>
     c4c:	ldr	w0, [x24, #8]
     c50:	cbnz	w0, a84 <gzvprintf+0x5c>
     c54:	b	b28 <gzvprintf+0x100>
     c58:	mov	w21, #0xfffffffe            	// #-2
     c5c:	ldp	x19, x20, [sp, #16]
     c60:	ldp	x23, x24, [sp, #48]
     c64:	ldr	x25, [sp, #64]
     c68:	b	b08 <gzvprintf+0xe0>
     c6c:	mov	w21, #0xfffffffe            	// #-2
     c70:	b	b08 <gzvprintf+0xe0>
     c74:	nop

0000000000000c78 <gzprintf>:
     c78:	stp	x29, x30, [sp, #-336]!
     c7c:	mov	w9, #0xffffffd0            	// #-48
     c80:	mov	w8, #0xffffff80            	// #-128
     c84:	mov	x29, sp
     c88:	add	x10, sp, #0x120
     c8c:	add	x11, sp, #0x150
     c90:	stp	x11, x11, [sp, #96]
     c94:	str	x10, [sp, #112]
     c98:	stp	w9, w8, [sp, #120]
     c9c:	ldp	x10, x11, [sp, #96]
     ca0:	stp	x21, x22, [sp, #32]
     ca4:	ldp	x8, x9, [sp, #112]
     ca8:	stp	x10, x11, [sp, #128]
     cac:	stp	x8, x9, [sp, #144]
     cb0:	str	q0, [sp, #160]
     cb4:	str	q1, [sp, #176]
     cb8:	str	q2, [sp, #192]
     cbc:	str	q3, [sp, #208]
     cc0:	str	q4, [sp, #224]
     cc4:	str	q5, [sp, #240]
     cc8:	str	q6, [sp, #256]
     ccc:	str	q7, [sp, #272]
     cd0:	stp	x2, x3, [sp, #288]
     cd4:	stp	x4, x5, [sp, #304]
     cd8:	stp	x6, x7, [sp, #320]
     cdc:	cbz	x0, efc <gzprintf+0x284>
     ce0:	ldr	w2, [x0, #24]
     ce4:	stp	x19, x20, [sp, #16]
     ce8:	mov	x19, x0
     cec:	stp	x23, x24, [sp, #48]
     cf0:	mov	x24, x1
     cf4:	mov	w1, #0x79b1                	// #31153
     cf8:	cmp	w2, w1
     cfc:	b.ne	eec <gzprintf+0x274>  // b.any
     d00:	ldr	w1, [x0, #108]
     d04:	cbnz	w1, eec <gzprintf+0x274>
     d08:	ldr	w1, [x0, #40]
     d0c:	cbz	w1, dd8 <gzprintf+0x160>
     d10:	ldr	w1, [x19, #104]
     d14:	add	x23, x19, #0x78
     d18:	ldr	w0, [x23, #8]
     d1c:	cbnz	w1, db4 <gzprintf+0x13c>
     d20:	cbz	w0, dc8 <gzprintf+0x150>
     d24:	ldr	x20, [x19, #120]
     d28:	add	x20, x20, w0, uxtw
     d2c:	ldr	w1, [x19, #40]
     d30:	mov	x2, x24
     d34:	ldp	x6, x7, [sp, #128]
     d38:	sub	w0, w1, #0x1
     d3c:	ldp	x4, x5, [sp, #144]
     d40:	add	x3, sp, #0x40
     d44:	strb	wzr, [x20, w0, uxtw]
     d48:	mov	x0, x20
     d4c:	stp	x6, x7, [sp, #64]
     d50:	ldr	w1, [x19, #40]
     d54:	stp	x4, x5, [sp, #80]
     d58:	bl	0 <vsnprintf>
     d5c:	mov	w21, w0
     d60:	cbz	w0, d9c <gzprintf+0x124>
     d64:	ldr	w22, [x19, #40]
     d68:	cmp	w22, w0
     d6c:	b.ls	e00 <gzprintf+0x188>  // b.plast
     d70:	sub	w0, w22, #0x1
     d74:	ldrb	w0, [x20, w0, uxtw]
     d78:	cbnz	w0, e00 <gzprintf+0x188>
     d7c:	ldr	x0, [x19, #16]
     d80:	ldr	w20, [x23, #8]
     d84:	add	w20, w21, w20
     d88:	str	w20, [x23, #8]
     d8c:	add	x0, x0, w21, sxtw
     d90:	str	x0, [x19, #16]
     d94:	cmp	w22, w20
     d98:	b.ls	e9c <gzprintf+0x224>  // b.plast
     d9c:	ldp	x19, x20, [sp, #16]
     da0:	ldp	x23, x24, [sp, #48]
     da4:	mov	w0, w21
     da8:	ldp	x21, x22, [sp, #32]
     dac:	ldp	x29, x30, [sp], #336
     db0:	ret
     db4:	str	wzr, [x19, #104]
     db8:	ldr	x20, [x19, #96]
     dbc:	cbnz	w0, e1c <gzprintf+0x1a4>
     dc0:	cbnz	x20, e30 <gzprintf+0x1b8>
     dc4:	nop
     dc8:	ldr	x20, [x19, #48]
     dcc:	mov	w0, #0x0                   	// #0
     dd0:	str	x20, [x19, #120]
     dd4:	b	d28 <gzprintf+0xb0>
     dd8:	bl	0 <gz_init>
     ddc:	cmn	w0, #0x1
     de0:	b.ne	d10 <gzprintf+0x98>  // b.any
     de4:	ldr	w21, [x19, #108]
     de8:	ldp	x19, x20, [sp, #16]
     dec:	mov	w0, w21
     df0:	ldp	x21, x22, [sp, #32]
     df4:	ldp	x23, x24, [sp, #48]
     df8:	ldp	x29, x30, [sp], #336
     dfc:	ret
     e00:	mov	w21, #0x0                   	// #0
     e04:	mov	w0, w21
     e08:	ldp	x19, x20, [sp, #16]
     e0c:	ldp	x21, x22, [sp, #32]
     e10:	ldp	x23, x24, [sp, #48]
     e14:	ldp	x29, x30, [sp], #336
     e18:	ret
     e1c:	mov	x0, x19
     e20:	bl	328 <gz_comp.constprop.0>
     e24:	cmn	w0, #0x1
     e28:	b.eq	de4 <gzprintf+0x16c>  // b.none
     e2c:	cbz	x20, ee0 <gzprintf+0x268>
     e30:	mov	w1, #0x1                   	// #1
     e34:	b	e68 <gzprintf+0x1f0>
     e38:	ldr	x2, [x19, #16]
     e3c:	str	x0, [x23]
     e40:	str	w21, [x23, #8]
     e44:	mov	x0, x19
     e48:	add	x2, x2, x22
     e4c:	str	x2, [x19, #16]
     e50:	bl	328 <gz_comp.constprop.0>
     e54:	cmn	w0, #0x1
     e58:	mov	w1, #0x0                   	// #0
     e5c:	b.eq	de4 <gzprintf+0x16c>  // b.none
     e60:	subs	x20, x20, x22
     e64:	b.eq	ee0 <gzprintf+0x268>  // b.none
     e68:	ldr	w21, [x19, #40]
     e6c:	mov	w22, w21
     e70:	cmp	x20, w21, uxtw
     e74:	b.ge	e80 <gzprintf+0x208>  // b.tcont
     e78:	mov	w21, w20
     e7c:	and	x22, x20, #0xffffffff
     e80:	ldr	x0, [x19, #48]
     e84:	cbz	w1, e38 <gzprintf+0x1c0>
     e88:	mov	w2, w21
     e8c:	mov	w1, #0x0                   	// #0
     e90:	bl	0 <memset>
     e94:	ldr	x0, [x19, #48]
     e98:	b	e38 <gzprintf+0x1c0>
     e9c:	str	w22, [x23, #8]
     ea0:	mov	x0, x19
     ea4:	bl	328 <gz_comp.constprop.0>
     ea8:	cmn	w0, #0x1
     eac:	b.eq	de4 <gzprintf+0x16c>  // b.none
     eb0:	ldr	x0, [x19, #48]
     eb4:	sub	w2, w20, w22
     eb8:	ldr	w1, [x19, #40]
     ebc:	sub	w22, w20, w22
     ec0:	add	x1, x0, x1
     ec4:	bl	0 <memcpy>
     ec8:	ldr	x0, [x19, #48]
     ecc:	str	x0, [x19, #120]
     ed0:	ldp	x19, x20, [sp, #16]
     ed4:	str	w22, [x23, #8]
     ed8:	ldp	x23, x24, [sp, #48]
     edc:	b	da4 <gzprintf+0x12c>
     ee0:	ldr	w0, [x23, #8]
     ee4:	cbnz	w0, d24 <gzprintf+0xac>
     ee8:	b	dc8 <gzprintf+0x150>
     eec:	mov	w21, #0xfffffffe            	// #-2
     ef0:	ldp	x19, x20, [sp, #16]
     ef4:	ldp	x23, x24, [sp, #48]
     ef8:	b	da4 <gzprintf+0x12c>
     efc:	mov	w21, #0xfffffffe            	// #-2
     f00:	b	da4 <gzprintf+0x12c>
     f04:	nop

0000000000000f08 <gzflush>:
     f08:	cbz	x0, 1018 <gzflush+0x110>
     f0c:	stp	x29, x30, [sp, #-64]!
     f10:	mov	x29, sp
     f14:	ldr	w2, [x0, #24]
     f18:	stp	x19, x20, [sp, #16]
     f1c:	mov	x19, x0
     f20:	stp	x23, x24, [sp, #48]
     f24:	mov	w23, w1
     f28:	mov	w1, #0x79b1                	// #31153
     f2c:	cmp	w2, w1
     f30:	b.ne	1010 <gzflush+0x108>  // b.any
     f34:	ldr	w1, [x0, #108]
     f38:	cbnz	w1, 1010 <gzflush+0x108>
     f3c:	cmp	w23, #0x4
     f40:	b.hi	1010 <gzflush+0x108>  // b.pmore
     f44:	ldr	w1, [x0, #104]
     f48:	cbz	w1, fd8 <gzflush+0xd0>
     f4c:	ldr	w1, [x0, #128]
     f50:	add	x24, x0, #0x78
     f54:	str	wzr, [x0, #104]
     f58:	ldr	x20, [x0, #96]
     f5c:	cbnz	w1, 1000 <gzflush+0xf8>
     f60:	mov	w1, #0x1                   	// #1
     f64:	cbz	x20, fd8 <gzflush+0xd0>
     f68:	stp	x21, x22, [sp, #32]
     f6c:	b	fa0 <gzflush+0x98>
     f70:	ldr	x1, [x19, #16]
     f74:	str	x0, [x24]
     f78:	str	w21, [x24, #8]
     f7c:	mov	x0, x19
     f80:	add	x1, x1, x22
     f84:	str	x1, [x19, #16]
     f88:	bl	328 <gz_comp.constprop.0>
     f8c:	cmn	w0, #0x1
     f90:	mov	w1, #0x0                   	// #0
     f94:	b.eq	ff8 <gzflush+0xf0>  // b.none
     f98:	subs	x20, x20, x22
     f9c:	b.eq	fd4 <gzflush+0xcc>  // b.none
     fa0:	ldr	w21, [x19, #40]
     fa4:	mov	w22, w21
     fa8:	cmp	x20, w21, uxtw
     fac:	b.ge	fb8 <gzflush+0xb0>  // b.tcont
     fb0:	mov	w21, w20
     fb4:	and	x22, x20, #0xffffffff
     fb8:	ldr	x0, [x19, #48]
     fbc:	cbz	w1, f70 <gzflush+0x68>
     fc0:	mov	w2, w21
     fc4:	mov	w1, #0x0                   	// #0
     fc8:	bl	0 <memset>
     fcc:	ldr	x0, [x19, #48]
     fd0:	b	f70 <gzflush+0x68>
     fd4:	ldp	x21, x22, [sp, #32]
     fd8:	mov	w1, w23
     fdc:	mov	x0, x19
     fe0:	bl	120 <gz_comp>
     fe4:	ldr	w0, [x19, #108]
     fe8:	ldp	x19, x20, [sp, #16]
     fec:	ldp	x23, x24, [sp, #48]
     ff0:	ldp	x29, x30, [sp], #64
     ff4:	ret
     ff8:	ldp	x21, x22, [sp, #32]
     ffc:	b	fe4 <gzflush+0xdc>
    1000:	bl	328 <gz_comp.constprop.0>
    1004:	cmn	w0, #0x1
    1008:	b.ne	f60 <gzflush+0x58>  // b.any
    100c:	b	fe4 <gzflush+0xdc>
    1010:	mov	w0, #0xfffffffe            	// #-2
    1014:	b	fe8 <gzflush+0xe0>
    1018:	mov	w0, #0xfffffffe            	// #-2
    101c:	ret

0000000000001020 <gzsetparams>:
    1020:	stp	x29, x30, [sp, #-80]!
    1024:	mov	x29, sp
    1028:	stp	x25, x26, [sp, #64]
    102c:	cbz	x0, 11ac <gzsetparams+0x18c>
    1030:	stp	x19, x20, [sp, #16]
    1034:	mov	x19, x0
    1038:	mov	w0, #0x79b1                	// #31153
    103c:	stp	x21, x22, [sp, #32]
    1040:	mov	w22, w1
    1044:	ldr	w1, [x19, #24]
    1048:	cmp	w1, w0
    104c:	b.ne	119c <gzsetparams+0x17c>  // b.any
    1050:	ldr	w26, [x19, #108]
    1054:	cbnz	w26, 119c <gzsetparams+0x17c>
    1058:	ldr	w0, [x19, #88]
    105c:	stp	x23, x24, [sp, #48]
    1060:	mov	w24, w2
    1064:	cmp	w0, w22
    1068:	b.eq	10cc <gzsetparams+0xac>  // b.none
    106c:	ldr	w0, [x19, #104]
    1070:	cbnz	w0, 10e8 <gzsetparams+0xc8>
    1074:	ldr	w0, [x19, #40]
    1078:	cbz	w0, 10ac <gzsetparams+0x8c>
    107c:	ldr	w0, [x19, #128]
    1080:	add	x25, x19, #0x78
    1084:	cbz	w0, 109c <gzsetparams+0x7c>
    1088:	mov	x0, x19
    108c:	mov	w1, #0x5                   	// #5
    1090:	bl	120 <gz_comp>
    1094:	cmn	w0, #0x1
    1098:	b.eq	117c <gzsetparams+0x15c>  // b.none
    109c:	mov	x0, x25
    10a0:	mov	w2, w24
    10a4:	mov	w1, w22
    10a8:	bl	0 <deflateParams>
    10ac:	stp	w22, w24, [x19, #88]
    10b0:	ldp	x19, x20, [sp, #16]
    10b4:	ldp	x21, x22, [sp, #32]
    10b8:	ldp	x23, x24, [sp, #48]
    10bc:	mov	w0, w26
    10c0:	ldp	x25, x26, [sp, #64]
    10c4:	ldp	x29, x30, [sp], #80
    10c8:	ret
    10cc:	ldr	w0, [x19, #92]
    10d0:	cmp	w0, w2
    10d4:	b.ne	106c <gzsetparams+0x4c>  // b.any
    10d8:	ldp	x19, x20, [sp, #16]
    10dc:	ldp	x21, x22, [sp, #32]
    10e0:	ldp	x23, x24, [sp, #48]
    10e4:	b	10bc <gzsetparams+0x9c>
    10e8:	ldr	w0, [x19, #128]
    10ec:	add	x25, x19, #0x78
    10f0:	str	wzr, [x19, #104]
    10f4:	ldr	x20, [x19, #96]
    10f8:	cbnz	w0, 116c <gzsetparams+0x14c>
    10fc:	mov	w1, #0x1                   	// #1
    1100:	cbnz	x20, 1138 <gzsetparams+0x118>
    1104:	b	1074 <gzsetparams+0x54>
    1108:	ldr	x1, [x19, #16]
    110c:	str	x0, [x25]
    1110:	str	w21, [x25, #8]
    1114:	mov	x0, x19
    1118:	add	x1, x1, x23
    111c:	str	x1, [x19, #16]
    1120:	bl	328 <gz_comp.constprop.0>
    1124:	cmn	w0, #0x1
    1128:	mov	w1, #0x0                   	// #0
    112c:	b.eq	117c <gzsetparams+0x15c>  // b.none
    1130:	subs	x20, x20, x23
    1134:	b.eq	1074 <gzsetparams+0x54>  // b.none
    1138:	ldr	w21, [x19, #40]
    113c:	mov	w23, w21
    1140:	cmp	x20, w21, uxtw
    1144:	b.ge	1150 <gzsetparams+0x130>  // b.tcont
    1148:	mov	w21, w20
    114c:	and	x23, x20, #0xffffffff
    1150:	ldr	x0, [x19, #48]
    1154:	cbz	w1, 1108 <gzsetparams+0xe8>
    1158:	mov	w2, w21
    115c:	mov	w1, #0x0                   	// #0
    1160:	bl	0 <memset>
    1164:	ldr	x0, [x19, #48]
    1168:	b	1108 <gzsetparams+0xe8>
    116c:	mov	x0, x19
    1170:	bl	328 <gz_comp.constprop.0>
    1174:	cmn	w0, #0x1
    1178:	b.ne	10fc <gzsetparams+0xdc>  // b.any
    117c:	ldr	w26, [x19, #108]
    1180:	ldp	x19, x20, [sp, #16]
    1184:	mov	w0, w26
    1188:	ldp	x21, x22, [sp, #32]
    118c:	ldp	x23, x24, [sp, #48]
    1190:	ldp	x25, x26, [sp, #64]
    1194:	ldp	x29, x30, [sp], #80
    1198:	ret
    119c:	mov	w26, #0xfffffffe            	// #-2
    11a0:	ldp	x19, x20, [sp, #16]
    11a4:	ldp	x21, x22, [sp, #32]
    11a8:	b	10bc <gzsetparams+0x9c>
    11ac:	mov	w26, #0xfffffffe            	// #-2
    11b0:	b	10bc <gzsetparams+0x9c>
    11b4:	nop

00000000000011b8 <gzclose_w>:
    11b8:	stp	x29, x30, [sp, #-64]!
    11bc:	mov	x29, sp
    11c0:	stp	x19, x20, [sp, #16]
    11c4:	cbz	x0, 1324 <gzclose_w+0x16c>
    11c8:	ldr	w2, [x0, #24]
    11cc:	mov	w1, #0x79b1                	// #31153
    11d0:	mov	x19, x0
    11d4:	cmp	w2, w1
    11d8:	b.ne	1324 <gzclose_w+0x16c>  // b.any
    11dc:	ldr	w1, [x0, #104]
    11e0:	cbnz	w1, 1258 <gzclose_w+0xa0>
    11e4:	mov	w20, #0x0                   	// #0
    11e8:	mov	x0, x19
    11ec:	mov	w1, #0x4                   	// #4
    11f0:	bl	120 <gz_comp>
    11f4:	cmn	w0, #0x1
    11f8:	b.ne	1200 <gzclose_w+0x48>  // b.any
    11fc:	ldr	w20, [x19, #108]
    1200:	ldr	w0, [x19, #40]
    1204:	cbz	w0, 1218 <gzclose_w+0x60>
    1208:	ldr	w0, [x19, #64]
    120c:	cbz	w0, 12f0 <gzclose_w+0x138>
    1210:	ldr	x0, [x19, #48]
    1214:	bl	0 <free>
    1218:	mov	x2, #0x0                   	// #0
    121c:	mov	w1, #0x0                   	// #0
    1220:	mov	x0, x19
    1224:	bl	0 <gz_error>
    1228:	ldr	x0, [x19, #32]
    122c:	bl	0 <free>
    1230:	ldr	w0, [x19, #28]
    1234:	bl	0 <close>
    1238:	cmn	w0, #0x1
    123c:	csinv	w20, w20, wzr, ne  // ne = any
    1240:	mov	x0, x19
    1244:	bl	0 <free>
    1248:	mov	w0, w20
    124c:	ldp	x19, x20, [sp, #16]
    1250:	ldp	x29, x30, [sp], #64
    1254:	ret
    1258:	ldr	x20, [x0, #96]
    125c:	str	x23, [sp, #48]
    1260:	add	x23, x0, #0x78
    1264:	ldr	w1, [x23, #8]
    1268:	str	wzr, [x0, #104]
    126c:	cbnz	w1, 1314 <gzclose_w+0x15c>
    1270:	mov	w1, #0x1                   	// #1
    1274:	cbz	x20, 12e8 <gzclose_w+0x130>
    1278:	stp	x21, x22, [sp, #32]
    127c:	b	12b0 <gzclose_w+0xf8>
    1280:	ldr	x1, [x19, #16]
    1284:	str	x0, [x23]
    1288:	str	w21, [x23, #8]
    128c:	mov	x0, x19
    1290:	add	x1, x1, x22
    1294:	str	x1, [x19, #16]
    1298:	bl	328 <gz_comp.constprop.0>
    129c:	cmn	w0, #0x1
    12a0:	b.eq	1304 <gzclose_w+0x14c>  // b.none
    12a4:	subs	x20, x20, x22
    12a8:	mov	w1, #0x0                   	// #0
    12ac:	b.eq	12e4 <gzclose_w+0x12c>  // b.none
    12b0:	ldr	w21, [x19, #40]
    12b4:	mov	w22, w21
    12b8:	cmp	x20, w21, uxtw
    12bc:	b.ge	12c8 <gzclose_w+0x110>  // b.tcont
    12c0:	mov	w21, w20
    12c4:	and	x22, x20, #0xffffffff
    12c8:	ldr	x0, [x19, #48]
    12cc:	cbz	w1, 1280 <gzclose_w+0xc8>
    12d0:	mov	w2, w21
    12d4:	mov	w1, #0x0                   	// #0
    12d8:	bl	0 <memset>
    12dc:	ldr	x0, [x19, #48]
    12e0:	b	1280 <gzclose_w+0xc8>
    12e4:	ldp	x21, x22, [sp, #32]
    12e8:	ldr	x23, [sp, #48]
    12ec:	b	11e4 <gzclose_w+0x2c>
    12f0:	add	x0, x19, #0x78
    12f4:	bl	0 <deflateEnd>
    12f8:	ldr	x0, [x19, #56]
    12fc:	bl	0 <free>
    1300:	b	1210 <gzclose_w+0x58>
    1304:	ldp	x21, x22, [sp, #32]
    1308:	ldr	w20, [x19, #108]
    130c:	ldr	x23, [sp, #48]
    1310:	b	11e8 <gzclose_w+0x30>
    1314:	bl	328 <gz_comp.constprop.0>
    1318:	cmn	w0, #0x1
    131c:	b.ne	1270 <gzclose_w+0xb8>  // b.any
    1320:	b	1308 <gzclose_w+0x150>
    1324:	mov	w20, #0xfffffffe            	// #-2
    1328:	b	1248 <gzclose_w+0x90>
