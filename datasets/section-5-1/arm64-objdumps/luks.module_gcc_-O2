
/home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//luks.module_gcc_-O2:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <luks_recover_key>:
   0:	sub	sp, sp, #0x4e0
   4:	mov	x2, #0xf0                  	// #240
   8:	stp	x29, x30, [sp]
   c:	mov	x29, sp
  10:	stp	x19, x20, [sp, #16]
  14:	mov	x20, x0
  18:	add	x0, sp, #0x1a0
  1c:	stp	x21, x22, [sp, #32]
  20:	mov	x21, x1
  24:	mov	w1, #0x0                   	// #0
  28:	stp	xzr, xzr, [sp, #400]
  2c:	bl	0 <memset>
  30:	mov	x0, x20
  34:	add	x4, sp, #0x290
  38:	mov	x3, #0x250                 	// #592
  3c:	mov	x2, #0x0                   	// #0
  40:	mov	x1, #0x0                   	// #0
  44:	bl	0 <grub_disk_read>
  48:	mov	w19, w0
  4c:	cbz	w0, 68 <luks_recover_key+0x68>
  50:	mov	w0, w19
  54:	ldp	x29, x30, [sp]
  58:	ldp	x19, x20, [sp, #16]
  5c:	ldp	x21, x22, [sp, #32]
  60:	add	sp, sp, #0x4e0
  64:	ret
  68:	adrp	x0, 0 <luks_recover_key>
  6c:	stp	x23, x24, [sp, #48]
  70:	ldr	x0, [x0]
  74:	bl	0 <grub_puts_>
  78:	ldr	w22, [sp, #764]
  7c:	rev	w23, w22
  80:	rev	w22, w22
  84:	cmp	w23, #0x80
  88:	b.hi	36c <luks_recover_key+0x36c>  // b.pmore
  8c:	mov	w1, #0x71f3                	// #29171
  90:	add	x2, sp, #0x360
  94:	add	x4, sp, #0x4e0
  98:	mov	x0, #0x1                   	// #1
  9c:	movk	w1, #0xac, lsl #16
  a0:	ldr	w3, [x2]
  a4:	rev	w3, w3
  a8:	cmp	w3, w1
  ac:	b.ne	c0 <luks_recover_key+0xc0>  // b.any
  b0:	ldr	w3, [x2, #44]
  b4:	rev	w3, w3
  b8:	cmp	x0, x3
  bc:	csel	x0, x0, x3, cs  // cs = hs, nlast
  c0:	add	x2, x2, #0x30
  c4:	cmp	x4, x2
  c8:	b.ne	a0 <luks_recover_key+0xa0>  // b.any
  cc:	mul	x0, x0, x22
  d0:	bl	0 <grub_malloc>
  d4:	mov	x24, x0
  d8:	cbz	x0, 388 <luks_recover_key+0x388>
  dc:	ldr	x0, [x20, #40]
  e0:	stp	x25, x26, [sp, #64]
  e4:	stp	x27, x28, [sp, #80]
  e8:	cbz	x0, 1a4 <luks_recover_key+0x1a4>
  ec:	bl	0 <grub_partition_get_name>
  f0:	mov	x3, x0
  f4:	ldr	x2, [x20, #40]
  f8:	ldr	x1, [x20]
  fc:	cbz	x2, 3f0 <luks_recover_key+0x3f0>
 100:	adrp	x0, 0 <luks_recover_key>
 104:	ldr	x2, [x0]
 108:	mov	x25, x3
 10c:	cbz	x3, 430 <luks_recover_key+0x430>
 110:	adrp	x0, 0 <luks_recover_key>
 114:	add	x4, x21, #0x8c
 118:	add	x28, sp, #0x368
 11c:	ldr	x0, [x0]
 120:	bl	0 <grub_printf_>
 124:	mov	x0, x25
 128:	bl	0 <grub_free>
 12c:	add	x0, sp, #0x190
 130:	mov	w1, #0x100                 	// #256
 134:	bl	0 <grub_password_get>
 138:	cbz	w0, 3b8 <luks_recover_key+0x3b8>
 13c:	mov	w27, #0x71f3                	// #29171
 140:	movk	w27, #0xac, lsl #16
 144:	ldur	w0, [x28, #-8]
 148:	rev	w0, w0
 14c:	cmp	w0, w27
 150:	b.eq	1bc <luks_recover_key+0x1bc>  // b.none
 154:	add	w19, w19, #0x1
 158:	add	x28, x28, #0x30
 15c:	cmp	w19, #0x8
 160:	b.ne	144 <luks_recover_key+0x144>  // b.any
 164:	mov	x0, x24
 168:	bl	0 <grub_free>
 16c:	adrp	x1, 0 <luks_recover_key>
 170:	mov	w0, #0x1e                  	// #30
 174:	ldr	x1, [x1]
 178:	bl	0 <grub_error>
 17c:	mov	w19, w0
 180:	mov	w0, w19
 184:	ldp	x29, x30, [sp]
 188:	ldp	x19, x20, [sp, #16]
 18c:	ldp	x21, x22, [sp, #32]
 190:	ldp	x23, x24, [sp, #48]
 194:	ldp	x25, x26, [sp, #64]
 198:	ldp	x27, x28, [sp, #80]
 19c:	add	sp, sp, #0x4e0
 1a0:	ret
 1a4:	adrp	x0, 0 <luks_recover_key>
 1a8:	mov	x25, #0x0                   	// #0
 1ac:	ldr	x1, [x20]
 1b0:	ldr	x3, [x0]
 1b4:	mov	x2, x3
 1b8:	b	110 <luks_recover_key+0x110>
 1bc:	adrp	x2, 0 <luks_recover_key>
 1c0:	adrp	x1, 0 <luks_recover_key>
 1c4:	adrp	x0, 0 <luks_recover_key>
 1c8:	mov	w4, w19
 1cc:	ldr	x3, [x2]
 1d0:	ldr	x26, [x1]
 1d4:	mov	w1, #0x170                 	// #368
 1d8:	ldr	x25, [x0]
 1dc:	mov	x2, x26
 1e0:	mov	x0, x25
 1e4:	bl	0 <grub_real_dprintf>
 1e8:	ldr	x1, [x21, #88]
 1ec:	add	x0, sp, #0x190
 1f0:	str	x1, [sp, #104]
 1f4:	bl	0 <grub_strlen>
 1f8:	mov	x2, x0
 1fc:	ldr	x1, [sp, #104]
 200:	mov	x7, x22
 204:	ldur	w5, [x28, #-4]
 208:	add	x6, sp, #0x110
 20c:	mov	x0, x1
 210:	add	x1, sp, #0x190
 214:	mov	x3, x28
 218:	rev	w5, w5
 21c:	mov	x4, #0x20                  	// #32
 220:	bl	0 <grub_crypto_pbkdf2>
 224:	mov	w1, w0
 228:	cbnz	w0, 3fc <luks_recover_key+0x3fc>
 22c:	adrp	x3, 0 <luks_recover_key>
 230:	mov	x2, x26
 234:	mov	x0, x25
 238:	mov	w1, #0x181                 	// #385
 23c:	ldr	x3, [x3]
 240:	bl	0 <grub_real_dprintf>
 244:	add	x1, sp, #0x110
 248:	mov	x2, x22
 24c:	mov	x0, x21
 250:	bl	0 <grub_cryptodisk_setkey>
 254:	mov	w1, w0
 258:	cbnz	w0, 3fc <luks_recover_key+0x3fc>
 25c:	ldp	w1, w3, [x28, #32]
 260:	mov	x4, x24
 264:	mov	x0, x20
 268:	mov	x2, #0x0                   	// #0
 26c:	rev	w3, w3
 270:	rev	w1, w1
 274:	umull	x3, w3, w23
 278:	str	x3, [sp, #104]
 27c:	bl	0 <grub_disk_read>
 280:	mov	w1, w0
 284:	ldr	x3, [sp, #104]
 288:	cbnz	w0, 414 <luks_recover_key+0x414>
 28c:	mov	x1, x24
 290:	mov	x2, x3
 294:	mov	x0, x21
 298:	mov	x3, #0x0                   	// #0
 29c:	bl	0 <grub_cryptodisk_decrypt>
 2a0:	mov	w1, w0
 2a4:	cbnz	w0, 3fc <luks_recover_key+0x3fc>
 2a8:	ldr	x0, [x21, #88]
 2ac:	mov	x1, x24
 2b0:	ldr	w4, [x28, #36]
 2b4:	mov	x3, x22
 2b8:	add	x2, sp, #0x90
 2bc:	rev	w4, w4
 2c0:	bl	c68 <AF_merge>
 2c4:	mov	w1, w0
 2c8:	cbnz	w0, 3fc <luks_recover_key+0x3fc>
 2cc:	adrp	x3, 0 <luks_recover_key>
 2d0:	mov	x2, x26
 2d4:	mov	x0, x25
 2d8:	mov	w1, #0x1a7                 	// #423
 2dc:	ldr	x3, [x3]
 2e0:	bl	0 <grub_real_dprintf>
 2e4:	ldr	x0, [x21, #88]
 2e8:	add	x1, sp, #0x90
 2ec:	ldr	w2, [sp, #764]
 2f0:	add	x6, sp, #0x78
 2f4:	ldr	w5, [sp, #820]
 2f8:	add	x3, sp, #0x314
 2fc:	rev	w2, w2
 300:	mov	x7, #0x14                  	// #20
 304:	rev	w5, w5
 308:	mov	x4, #0x20                  	// #32
 30c:	bl	0 <grub_crypto_pbkdf2>
 310:	mov	w1, w0
 314:	cbnz	w0, 3fc <luks_recover_key+0x3fc>
 318:	add	x1, sp, #0x300
 31c:	add	x0, sp, #0x78
 320:	mov	x2, #0x14                  	// #20
 324:	bl	0 <grub_memcmp>
 328:	cbnz	w0, 39c <luks_recover_key+0x39c>
 32c:	adrp	x0, 0 <luks_recover_key>
 330:	mov	w1, w19
 334:	ldr	x0, [x0]
 338:	bl	0 <grub_printf_>
 33c:	mov	x2, x22
 340:	add	x1, sp, #0x90
 344:	mov	x0, x21
 348:	bl	0 <grub_cryptodisk_setkey>
 34c:	mov	w19, w0
 350:	mov	x0, x24
 354:	cbnz	w19, 3d0 <luks_recover_key+0x3d0>
 358:	bl	0 <grub_free>
 35c:	ldp	x23, x24, [sp, #48]
 360:	ldp	x25, x26, [sp, #64]
 364:	ldp	x27, x28, [sp, #80]
 368:	b	50 <luks_recover_key+0x50>
 36c:	adrp	x1, 0 <luks_recover_key>
 370:	mov	w0, #0x9                   	// #9
 374:	ldr	x1, [x1]
 378:	bl	0 <grub_error>
 37c:	mov	w19, w0
 380:	ldp	x23, x24, [sp, #48]
 384:	b	50 <luks_recover_key+0x50>
 388:	adrp	x0, 0 <luks_recover_key>
 38c:	ldp	x23, x24, [sp, #48]
 390:	ldr	x0, [x0]
 394:	ldr	w19, [x0]
 398:	b	50 <luks_recover_key+0x50>
 39c:	adrp	x3, 0 <luks_recover_key>
 3a0:	mov	x2, x26
 3a4:	mov	x0, x25
 3a8:	mov	w1, #0x1bd                 	// #445
 3ac:	ldr	x3, [x3]
 3b0:	bl	0 <grub_real_dprintf>
 3b4:	b	154 <luks_recover_key+0x154>
 3b8:	mov	x0, x24
 3bc:	bl	0 <grub_free>
 3c0:	adrp	x1, 0 <luks_recover_key>
 3c4:	mov	w0, #0x12                  	// #18
 3c8:	ldr	x1, [x1]
 3cc:	b	178 <luks_recover_key+0x178>
 3d0:	bl	0 <grub_free>
 3d4:	mov	w0, w19
 3d8:	bl	0 <grub_crypto_gcry_error>
 3dc:	mov	w19, w0
 3e0:	ldp	x23, x24, [sp, #48]
 3e4:	ldp	x25, x26, [sp, #64]
 3e8:	ldp	x27, x28, [sp, #80]
 3ec:	b	50 <luks_recover_key+0x50>
 3f0:	adrp	x0, 0 <luks_recover_key>
 3f4:	ldr	x2, [x0]
 3f8:	b	108 <luks_recover_key+0x108>
 3fc:	mov	x0, x24
 400:	str	w1, [sp, #104]
 404:	bl	0 <grub_free>
 408:	ldr	w1, [sp, #104]
 40c:	mov	w0, w1
 410:	b	3d8 <luks_recover_key+0x3d8>
 414:	mov	x0, x24
 418:	mov	w19, w1
 41c:	bl	0 <grub_free>
 420:	ldp	x23, x24, [sp, #48]
 424:	ldp	x25, x26, [sp, #64]
 428:	ldp	x27, x28, [sp, #80]
 42c:	b	50 <luks_recover_key+0x50>
 430:	adrp	x0, 0 <luks_recover_key>
 434:	mov	x25, #0x0                   	// #0
 438:	ldr	x3, [x0]
 43c:	b	110 <luks_recover_key+0x110>
	...

00000000000004b8 <configure_ciphers>:
 4b8:	sub	sp, sp, #0x360
 4bc:	stp	x29, x30, [sp]
 4c0:	mov	x29, sp
 4c4:	stp	x19, x20, [sp, #16]
 4c8:	cbnz	w2, 6e0 <configure_ciphers+0x228>
 4cc:	mov	x19, x1
 4d0:	add	x4, sp, #0x110
 4d4:	mov	x3, #0x250                 	// #592
 4d8:	mov	x2, #0x0                   	// #0
 4dc:	mov	x1, #0x0                   	// #0
 4e0:	stp	x21, x22, [sp, #32]
 4e4:	mov	x21, x0
 4e8:	bl	0 <grub_disk_read>
 4ec:	mov	w20, w0
 4f0:	cbnz	w0, 6d4 <configure_ciphers+0x21c>
 4f4:	adrp	x1, 0 <luks_recover_key>
 4f8:	add	x0, sp, #0x110
 4fc:	mov	x2, #0x6                   	// #6
 500:	ldr	x1, [x1]
 504:	bl	0 <grub_memcmp>
 508:	cbnz	w0, 6dc <configure_ciphers+0x224>
 50c:	ldrh	w1, [sp, #278]
 510:	lsl	w2, w1, #8
 514:	orr	w1, w2, w1, lsr #8
 518:	sxth	w1, w1
 51c:	cmp	w1, #0x1
 520:	b.ne	6dc <configure_ciphers+0x224>  // b.any
 524:	add	x1, sp, #0x110
 528:	add	x2, sp, #0x1b8
 52c:	add	x5, sp, #0xe0
 530:	add	x6, x1, #0xd0
 534:	nop
 538:	ldrb	w4, [x2]
 53c:	mov	x3, x5
 540:	add	x2, x2, #0x1
 544:	cmp	w4, #0x2d
 548:	b.eq	554 <configure_ciphers+0x9c>  // b.none
 54c:	strb	w4, [x3], #1
 550:	mov	x5, x3
 554:	cmp	x2, x6
 558:	b.ne	538 <configure_ciphers+0x80>  // b.any
 55c:	strb	wzr, [x5]
 560:	cbz	x19, 590 <configure_ciphers+0xd8>
 564:	ldrb	w1, [x19]
 568:	mov	x8, x19
 56c:	add	x4, sp, #0xe0
 570:	cbnz	w1, 70c <configure_ciphers+0x254>
 574:	ldrb	w2, [x4]
 578:	sub	w5, w2, #0x41
 57c:	cmp	w5, #0x1a
 580:	add	w1, w2, #0x20
 584:	csel	w2, w1, w2, cc  // cc = lo, ul, last
 588:	cmp	w0, w2
 58c:	b.ne	734 <configure_ciphers+0x27c>  // b.any
 590:	add	x1, sp, #0x118
 594:	mov	x2, #0x20                  	// #32
 598:	add	x0, sp, #0x68
 59c:	bl	0 <grub_memmove>
 5a0:	add	x1, sp, #0x138
 5a4:	mov	x2, #0x20                  	// #32
 5a8:	add	x0, sp, #0x90
 5ac:	strb	wzr, [sp, #136]
 5b0:	bl	0 <grub_memmove>
 5b4:	strb	wzr, [sp, #176]
 5b8:	add	x1, sp, #0x158
 5bc:	mov	x2, #0x20                  	// #32
 5c0:	add	x0, sp, #0xb8
 5c4:	bl	0 <grub_memmove>
 5c8:	add	x0, sp, #0x68
 5cc:	strb	wzr, [sp, #216]
 5d0:	bl	0 <grub_crypto_lookup_cipher_by_name>
 5d4:	mov	x19, x0
 5d8:	cbz	x0, 860 <configure_ciphers+0x3a8>
 5dc:	stp	x23, x24, [sp, #48]
 5e0:	bl	0 <grub_crypto_cipher_open>
 5e4:	mov	x23, x0
 5e8:	cbz	x0, 87c <configure_ciphers+0x3c4>
 5ec:	ldr	w2, [sp, #380]
 5f0:	rev	w2, w2
 5f4:	cmp	w2, #0x400
 5f8:	b.hi	7c0 <configure_ciphers+0x308>  // b.pmore
 5fc:	adrp	x1, 0 <luks_recover_key>
 600:	add	x0, sp, #0x90
 604:	stp	x25, x26, [sp, #64]
 608:	ldr	x1, [x1]
 60c:	stp	x27, x28, [sp, #80]
 610:	bl	0 <grub_strcmp>
 614:	mov	w22, w0
 618:	cbnz	w0, 78c <configure_ciphers+0x2d4>
 61c:	mov	w27, #0x0                   	// #0
 620:	mov	x25, #0x0                   	// #0
 624:	mov	w20, #0x1                   	// #1
 628:	mov	x26, #0x0                   	// #0
 62c:	mov	x28, #0x0                   	// #0
 630:	add	x0, sp, #0xb8
 634:	bl	0 <grub_crypto_lookup_md_by_name>
 638:	mov	x24, x0
 63c:	cbz	x0, 888 <configure_ciphers+0x3d0>
 640:	mov	x0, #0x238                 	// #568
 644:	bl	0 <grub_zalloc>
 648:	mov	x19, x0
 64c:	cbz	x0, 8cc <configure_ciphers+0x414>
 650:	ldr	w1, [sp, #376]
 654:	mov	w2, #0x9                   	// #9
 658:	str	xzr, [x19, #40]
 65c:	mov	x0, x21
 660:	rev	w1, w1
 664:	str	x1, [x19, #24]
 668:	stp	x23, x25, [x19, #56]
 66c:	stp	x28, x26, [x19, #72]
 670:	str	x24, [x19, #88]
 674:	stp	w27, w20, [x19, #104]
 678:	str	w22, [x19, #112]
 67c:	str	w2, [x19, #456]
 680:	bl	0 <grub_disk_get_size>
 684:	mov	x3, x0
 688:	ldr	x4, [x19, #24]
 68c:	add	x1, sp, #0xe0
 690:	add	x0, x19, #0x8c
 694:	mov	x2, #0x48                  	// #72
 698:	sub	x3, x3, x4
 69c:	str	x3, [x19, #32]
 6a0:	bl	0 <grub_memmove>
 6a4:	adrp	x0, 0 <luks_recover_key>
 6a8:	ldp	x21, x22, [sp, #32]
 6ac:	ldr	x0, [x0]
 6b0:	ldp	x23, x24, [sp, #48]
 6b4:	ldp	x25, x26, [sp, #64]
 6b8:	ldp	x27, x28, [sp, #80]
 6bc:	str	x0, [x19, #448]
 6c0:	mov	x0, x19
 6c4:	ldp	x29, x30, [sp]
 6c8:	ldp	x19, x20, [sp, #16]
 6cc:	add	sp, sp, #0x360
 6d0:	ret
 6d4:	cmp	w0, #0xb
 6d8:	b.eq	768 <configure_ciphers+0x2b0>  // b.none
 6dc:	ldp	x21, x22, [sp, #32]
 6e0:	mov	x19, #0x0                   	// #0
 6e4:	mov	x0, x19
 6e8:	ldp	x29, x30, [sp]
 6ec:	ldp	x19, x20, [sp, #16]
 6f0:	add	sp, sp, #0x360
 6f4:	ret
 6f8:	csel	w3, w3, w2, cc  // cc = lo, ul, last
 6fc:	cmp	w3, w9
 700:	b.ne	780 <configure_ciphers+0x2c8>  // b.any
 704:	ldrb	w1, [x8, #1]!
 708:	cbz	w1, 574 <configure_ciphers+0xbc>
 70c:	ldrb	w2, [x4]
 710:	sub	w7, w1, #0x41
 714:	cmp	w7, #0x1a
 718:	add	w6, w1, #0x20
 71c:	sub	w5, w2, #0x41
 720:	csel	w9, w6, w1, cc  // cc = lo, ul, last
 724:	add	x4, x4, #0x1
 728:	add	w3, w2, #0x20
 72c:	cmp	w5, #0x1a
 730:	cbnz	w2, 6f8 <configure_ciphers+0x240>
 734:	adrp	x2, 0 <luks_recover_key>
 738:	adrp	x1, 0 <luks_recover_key>
 73c:	adrp	x0, 0 <luks_recover_key>
 740:	mov	x5, x19
 744:	ldr	x3, [x2]
 748:	add	x4, sp, #0xe0
 74c:	ldr	x2, [x1]
 750:	mov	x19, #0x0                   	// #0
 754:	ldr	x0, [x0]
 758:	mov	w1, #0x75                  	// #117
 75c:	bl	0 <grub_real_dprintf>
 760:	ldp	x21, x22, [sp, #32]
 764:	b	6e4 <configure_ciphers+0x22c>
 768:	adrp	x0, 0 <luks_recover_key>
 76c:	mov	x19, #0x0                   	// #0
 770:	ldp	x21, x22, [sp, #32]
 774:	ldr	x0, [x0]
 778:	str	wzr, [x0]
 77c:	b	6e4 <configure_ciphers+0x22c>
 780:	cmp	w7, #0x1a
 784:	csel	w0, w6, w1, cc  // cc = lo, ul, last
 788:	b	57c <configure_ciphers+0xc4>
 78c:	adrp	x1, 0 <luks_recover_key>
 790:	add	x0, sp, #0x90
 794:	ldr	x26, [x1]
 798:	mov	x1, x26
 79c:	bl	0 <grub_strcmp>
 7a0:	mov	w22, w0
 7a4:	cbnz	w0, 7e8 <configure_ciphers+0x330>
 7a8:	mov	w27, #0x1                   	// #1
 7ac:	mov	x25, #0x0                   	// #0
 7b0:	mov	w20, w27
 7b4:	mov	x26, #0x0                   	// #0
 7b8:	mov	x28, #0x0                   	// #0
 7bc:	b	630 <configure_ciphers+0x178>
 7c0:	adrp	x1, 0 <luks_recover_key>
 7c4:	mov	w0, #0x12                  	// #18
 7c8:	mov	x19, #0x0                   	// #0
 7cc:	ldr	x1, [x1]
 7d0:	bl	0 <grub_error>
 7d4:	mov	x0, x23
 7d8:	bl	0 <grub_free>
 7dc:	ldp	x21, x22, [sp, #32]
 7e0:	ldp	x23, x24, [sp, #48]
 7e4:	b	6e4 <configure_ciphers+0x22c>
 7e8:	adrp	x1, 0 <luks_recover_key>
 7ec:	add	x0, sp, #0x90
 7f0:	mov	x2, #0x4                   	// #4
 7f4:	ldr	x1, [x1]
 7f8:	bl	0 <grub_memcmp>
 7fc:	cbnz	w0, 96c <configure_ciphers+0x4b4>
 800:	add	x24, sp, #0x94
 804:	mov	w27, #0x1                   	// #1
 808:	mov	x25, #0x0                   	// #0
 80c:	mov	x1, x26
 810:	mov	x0, x24
 814:	mov	x2, #0x5                   	// #5
 818:	bl	0 <grub_memcmp>
 81c:	mov	w22, w0
 820:	cbnz	w0, 834 <configure_ciphers+0x37c>
 824:	mov	w20, #0x1                   	// #1
 828:	mov	x26, #0x0                   	// #0
 82c:	mov	x28, #0x0                   	// #0
 830:	b	630 <configure_ciphers+0x178>
 834:	adrp	x1, 0 <luks_recover_key>
 838:	mov	x0, x24
 83c:	mov	x2, #0x7                   	// #7
 840:	ldr	x1, [x1]
 844:	bl	0 <grub_memcmp>
 848:	mov	w22, w0
 84c:	cbnz	w0, 8f8 <configure_ciphers+0x440>
 850:	mov	w20, #0x2                   	// #2
 854:	mov	x26, #0x0                   	// #0
 858:	mov	x28, #0x0                   	// #0
 85c:	b	630 <configure_ciphers+0x178>
 860:	adrp	x1, 0 <luks_recover_key>
 864:	add	x2, sp, #0x68
 868:	mov	w0, #0x5                   	// #5
 86c:	ldr	x1, [x1]
 870:	bl	0 <grub_error>
 874:	ldp	x21, x22, [sp, #32]
 878:	b	6e4 <configure_ciphers+0x22c>
 87c:	ldp	x21, x22, [sp, #32]
 880:	ldp	x23, x24, [sp, #48]
 884:	b	6e0 <configure_ciphers+0x228>
 888:	mov	x0, x23
 88c:	bl	0 <grub_free>
 890:	mov	x0, x28
 894:	bl	0 <grub_free>
 898:	mov	x0, x25
 89c:	bl	0 <grub_free>
 8a0:	add	x2, sp, #0xb8
 8a4:	adrp	x1, 0 <luks_recover_key>
 8a8:	ldr	x1, [x1]
 8ac:	mov	w0, #0x5                   	// #5
 8b0:	mov	x19, #0x0                   	// #0
 8b4:	bl	0 <grub_error>
 8b8:	ldp	x21, x22, [sp, #32]
 8bc:	ldp	x23, x24, [sp, #48]
 8c0:	ldp	x25, x26, [sp, #64]
 8c4:	ldp	x27, x28, [sp, #80]
 8c8:	b	6e4 <configure_ciphers+0x22c>
 8cc:	mov	x0, x23
 8d0:	bl	0 <grub_free>
 8d4:	mov	x0, x28
 8d8:	bl	0 <grub_free>
 8dc:	mov	x0, x25
 8e0:	bl	0 <grub_free>
 8e4:	ldp	x21, x22, [sp, #32]
 8e8:	ldp	x23, x24, [sp, #48]
 8ec:	ldp	x25, x26, [sp, #64]
 8f0:	ldp	x27, x28, [sp, #80]
 8f4:	b	6e4 <configure_ciphers+0x22c>
 8f8:	adrp	x1, 0 <luks_recover_key>
 8fc:	mov	x0, x24
 900:	mov	x2, #0x5                   	// #5
 904:	ldr	x1, [x1]
 908:	bl	0 <grub_memcmp>
 90c:	mov	w22, w0
 910:	cbnz	w0, 994 <configure_ciphers+0x4dc>
 914:	ldr	x0, [x23]
 918:	ldr	x2, [x0, #24]
 91c:	sub	x0, x2, #0x1
 920:	tst	x0, x2
 924:	ccmp	x2, #0x0, #0x4, eq  // eq = none
 928:	b.ne	944 <configure_ciphers+0x48c>  // b.any
 92c:	adrp	x1, 0 <luks_recover_key>
 930:	mov	w0, #0x12                  	// #18
 934:	ldr	x1, [x1]
 938:	bl	0 <grub_error>
 93c:	ldr	x0, [x23]
 940:	ldr	x2, [x0, #24]
 944:	cmp	x2, #0x1ff
 948:	b.hi	95c <configure_ciphers+0x4a4>  // b.pmore
 94c:	add	w22, w22, #0x1
 950:	lsl	x0, x2, x22
 954:	cmp	x0, #0x1ff
 958:	b.ls	94c <configure_ciphers+0x494>  // b.plast
 95c:	mov	w20, #0x4                   	// #4
 960:	mov	x26, #0x0                   	// #0
 964:	mov	x28, #0x0                   	// #0
 968:	b	630 <configure_ciphers+0x178>
 96c:	adrp	x1, 0 <luks_recover_key>
 970:	add	x0, sp, #0x90
 974:	mov	x2, #0x5                   	// #5
 978:	ldr	x1, [x1]
 97c:	bl	0 <grub_memcmp>
 980:	cbnz	w0, a0c <configure_ciphers+0x554>
 984:	add	x24, sp, #0x95
 988:	mov	w27, #0x2                   	// #2
 98c:	mov	x25, #0x0                   	// #0
 990:	b	80c <configure_ciphers+0x354>
 994:	adrp	x1, 0 <luks_recover_key>
 998:	mov	x0, x24
 99c:	mov	x2, #0x4                   	// #4
 9a0:	mov	x26, #0x0                   	// #0
 9a4:	ldr	x1, [x1]
 9a8:	mov	x28, #0x0                   	// #0
 9ac:	bl	0 <grub_memcmp>
 9b0:	mov	w22, w0
 9b4:	cbz	w0, 630 <configure_ciphers+0x178>
 9b8:	adrp	x1, 0 <luks_recover_key>
 9bc:	mov	x0, x24
 9c0:	mov	x2, #0x6                   	// #6
 9c4:	ldr	x1, [x1]
 9c8:	bl	0 <grub_memcmp>
 9cc:	mov	w22, w0
 9d0:	cbnz	w0, b18 <configure_ciphers+0x660>
 9d4:	add	x24, x24, #0x6
 9d8:	mov	x0, x24
 9dc:	bl	0 <grub_crypto_lookup_md_by_name>
 9e0:	mov	x26, x0
 9e4:	cbz	x0, afc <configure_ciphers+0x644>
 9e8:	mov	x0, x19
 9ec:	bl	0 <grub_crypto_cipher_open>
 9f0:	mov	w20, #0x3                   	// #3
 9f4:	mov	x28, x0
 9f8:	mov	x19, #0x0                   	// #0
 9fc:	mov	x0, x23
 a00:	cbnz	x28, 630 <configure_ciphers+0x178>
 a04:	bl	0 <grub_free>
 a08:	b	8dc <configure_ciphers+0x424>
 a0c:	adrp	x1, 0 <luks_recover_key>
 a10:	add	x0, sp, #0x90
 a14:	mov	x2, #0x4                   	// #4
 a18:	ldr	x1, [x1]
 a1c:	bl	0 <grub_memcmp>
 a20:	cbnz	w0, a60 <configure_ciphers+0x5a8>
 a24:	mov	x0, x19
 a28:	bl	0 <grub_crypto_cipher_open>
 a2c:	mov	x25, x0
 a30:	cbz	x0, b60 <configure_ciphers+0x6a8>
 a34:	ldr	x0, [x23]
 a38:	ldr	x2, [x0, #24]
 a3c:	cmp	x2, #0x10
 a40:	b.ne	b40 <configure_ciphers+0x688>  // b.any
 a44:	ldr	x0, [x25]
 a48:	ldr	x0, [x0, #24]
 a4c:	cmp	x0, #0x10
 a50:	b.ne	a98 <configure_ciphers+0x5e0>  // b.any
 a54:	add	x24, sp, #0x94
 a58:	mov	w27, #0x3                   	// #3
 a5c:	b	80c <configure_ciphers+0x354>
 a60:	adrp	x1, 0 <luks_recover_key>
 a64:	add	x0, sp, #0x90
 a68:	mov	x2, #0x4                   	// #4
 a6c:	ldr	x1, [x1]
 a70:	bl	0 <grub_memcmp>
 a74:	cbnz	w0, adc <configure_ciphers+0x624>
 a78:	ldr	x0, [x23]
 a7c:	ldr	x2, [x0, #24]
 a80:	cmp	x2, #0x10
 a84:	b.ne	ac0 <configure_ciphers+0x608>  // b.any
 a88:	add	x24, sp, #0x94
 a8c:	mov	w27, #0x4                   	// #4
 a90:	mov	x25, #0x0                   	// #0
 a94:	b	80c <configure_ciphers+0x354>
 a98:	mov	x0, x23
 a9c:	bl	0 <grub_free>
 aa0:	ldr	x2, [x25]
 aa4:	adrp	x1, 0 <luks_recover_key>
 aa8:	mov	x19, #0x0                   	// #0
 aac:	mov	w0, #0x12                  	// #18
 ab0:	ldr	x1, [x1]
 ab4:	ldr	x2, [x2, #24]
 ab8:	bl	0 <grub_error>
 abc:	b	8dc <configure_ciphers+0x424>
 ac0:	adrp	x1, 0 <luks_recover_key>
 ac4:	mov	w0, #0x12                  	// #18
 ac8:	mov	x19, #0x0                   	// #0
 acc:	ldr	x1, [x1]
 ad0:	bl	0 <grub_error>
 ad4:	mov	x0, x23
 ad8:	b	8e0 <configure_ciphers+0x428>
 adc:	mov	x0, x23
 ae0:	bl	0 <grub_free>
 ae4:	adrp	x1, 0 <luks_recover_key>
 ae8:	add	x2, sp, #0x90
 aec:	mov	w0, #0x12                  	// #18
 af0:	mov	x19, #0x0                   	// #0
 af4:	ldr	x1, [x1]
 af8:	b	8b4 <configure_ciphers+0x3fc>
 afc:	mov	x0, x23
 b00:	bl	0 <grub_free>
 b04:	mov	x0, x25
 b08:	bl	0 <grub_free>
 b0c:	mov	x2, x24
 b10:	adrp	x1, 0 <luks_recover_key>
 b14:	b	8a8 <configure_ciphers+0x3f0>
 b18:	mov	x0, x23
 b1c:	bl	0 <grub_free>
 b20:	mov	x0, x25
 b24:	bl	0 <grub_free>
 b28:	adrp	x1, 0 <luks_recover_key>
 b2c:	mov	x2, x24
 b30:	mov	w0, #0x12                  	// #18
 b34:	mov	x19, #0x0                   	// #0
 b38:	ldr	x1, [x1]
 b3c:	b	8b4 <configure_ciphers+0x3fc>
 b40:	adrp	x1, 0 <luks_recover_key>
 b44:	mov	w0, #0x12                  	// #18
 b48:	mov	x19, #0x0                   	// #0
 b4c:	ldr	x1, [x1]
 b50:	bl	0 <grub_error>
 b54:	mov	x0, x23
 b58:	bl	0 <grub_free>
 b5c:	b	8dc <configure_ciphers+0x424>
 b60:	mov	x0, x23
 b64:	mov	x19, #0x0                   	// #0
 b68:	b	8e0 <configure_ciphers+0x428>
 b6c:	nop
	...

0000000000000c28 <grub_mod_init>:
 c28:	adrp	x1, 0 <luks_recover_key>
 c2c:	adrp	x0, 0 <luks_recover_key>
 c30:	ldr	x1, [x1]
 c34:	ldr	x0, [x0]
 c38:	b	0 <grub_list_push>
 c3c:	nop
	...

0000000000000c50 <grub_mod_fini>:
 c50:	adrp	x0, 0 <luks_recover_key>
 c54:	ldr	x0, [x0]
 c58:	b	0 <grub_list_remove>
 c5c:	nop
	...

0000000000000c68 <AF_merge>:
 c68:	stp	x29, x30, [sp, #-272]!
 c6c:	mov	x29, sp
 c70:	stp	x25, x26, [sp, #64]
 c74:	mov	x25, x0
 c78:	ldr	x0, [x0, #32]
 c7c:	sub	x0, x0, #0x1
 c80:	cmp	x0, #0x3f
 c84:	b.hi	f54 <AF_merge+0x2ec>  // b.pmore
 c88:	mov	x0, x3
 c8c:	stp	x19, x20, [sp, #16]
 c90:	mov	x19, x3
 c94:	stp	x21, x22, [sp, #32]
 c98:	mov	x21, x4
 c9c:	stp	x23, x24, [sp, #48]
 ca0:	mov	x24, x1
 ca4:	stp	x27, x28, [sp, #80]
 ca8:	mov	x28, x2
 cac:	bl	0 <grub_zalloc>
 cb0:	mov	x20, x0
 cb4:	cbz	x0, f64 <AF_merge+0x2fc>
 cb8:	mov	x2, x19
 cbc:	mov	w1, #0x0                   	// #0
 cc0:	bl	0 <grub_memset>
 cc4:	subs	x0, x21, #0x1
 cc8:	str	x0, [sp, #120]
 ccc:	b.eq	e70 <AF_merge+0x208>  // b.none
 cd0:	mov	x22, x24
 cd4:	add	x0, sp, #0xcc
 cd8:	mov	x21, #0x0                   	// #0
 cdc:	str	x0, [sp, #112]
 ce0:	mov	x7, x22
 ce4:	cbz	x19, e58 <AF_merge+0x1f0>
 ce8:	orr	x0, x20, x22
 cec:	mov	x4, x19
 cf0:	mov	x3, x20
 cf4:	b	d14 <AF_merge+0xac>
 cf8:	ldrb	w0, [x7], #1
 cfc:	subs	x4, x4, #0x1
 d00:	ldrb	w1, [x3]
 d04:	eor	w0, w0, w1
 d08:	strb	w0, [x3], #1
 d0c:	orr	x0, x7, x3
 d10:	b.eq	d84 <AF_merge+0x11c>  // b.none
 d14:	tst	x0, #0x7
 d18:	b.ne	cf8 <AF_merge+0x90>  // b.any
 d1c:	cmp	x4, #0x7
 d20:	b.ls	d60 <AF_merge+0xf8>  // b.plast
 d24:	sub	x6, x4, #0x8
 d28:	mov	x5, #0x0                   	// #0
 d2c:	and	x6, x6, #0xfffffffffffffff8
 d30:	add	x6, x6, #0x8
 d34:	ldr	x0, [x3, x5]
 d38:	ldr	x1, [x7, x5]
 d3c:	eor	x0, x0, x1
 d40:	str	x0, [x3, x5]
 d44:	add	x5, x5, #0x8
 d48:	cmp	x5, x6
 d4c:	b.ne	d34 <AF_merge+0xcc>  // b.any
 d50:	add	x7, x7, x5
 d54:	add	x3, x3, x5
 d58:	ands	x4, x4, #0x7
 d5c:	b.eq	d84 <AF_merge+0x11c>  // b.none
 d60:	mov	x5, #0x0                   	// #0
 d64:	nop
 d68:	ldrb	w0, [x7, x5]
 d6c:	ldrb	w1, [x3, x5]
 d70:	eor	w0, w0, w1
 d74:	strb	w0, [x3, x5]
 d78:	add	x5, x5, #0x1
 d7c:	cmp	x4, x5
 d80:	b.ne	d68 <AF_merge+0x100>  // b.any
 d84:	ldr	x4, [x25, #32]
 d88:	mov	w3, #0x0                   	// #0
 d8c:	mov	x23, #0x0                   	// #0
 d90:	cmp	x19, x4
 d94:	udiv	x26, x19, x4
 d98:	msub	x27, x26, x4, x19
 d9c:	b.cc	f4c <AF_merge+0x2e4>  // b.lo, b.ul, b.last
 da0:	add	x1, sp, #0x84
 da4:	mov	x2, #0x4                   	// #4
 da8:	add	x0, sp, #0xc8
 dac:	str	x4, [sp, #104]
 db0:	str	w3, [sp, #132]
 db4:	bl	0 <grub_memmove>
 db8:	ldr	x2, [x25, #32]
 dbc:	ldr	x0, [sp, #112]
 dc0:	madd	x1, x2, x23, x20
 dc4:	bl	0 <grub_memmove>
 dc8:	ldr	x1, [x25, #32]
 dcc:	add	x2, sp, #0xc8
 dd0:	mov	x0, x25
 dd4:	add	x3, x1, #0x4
 dd8:	madd	x1, x1, x23, x20
 ddc:	add	x23, x23, #0x1
 de0:	bl	0 <grub_crypto_hash>
 de4:	rev	w3, w23
 de8:	cmp	x26, x23
 dec:	ldr	x4, [sp, #104]
 df0:	b.hi	da0 <AF_merge+0x138>  // b.pmore
 df4:	cmp	x19, x4
 df8:	csinc	x26, x26, xzr, cs  // cs = hs, nlast
 dfc:	cbz	w27, e58 <AF_merge+0x1f0>
 e00:	rev	w3, w26
 e04:	add	x1, sp, #0x84
 e08:	mov	x2, #0x4                   	// #4
 e0c:	add	x0, sp, #0xc8
 e10:	str	w3, [sp, #132]
 e14:	sxtw	x27, w27
 e18:	bl	0 <grub_memmove>
 e1c:	ldr	x1, [x25, #32]
 e20:	mov	x2, x27
 e24:	ldr	x0, [sp, #112]
 e28:	madd	x1, x26, x1, x20
 e2c:	bl	0 <grub_memmove>
 e30:	add	x2, sp, #0xc8
 e34:	add	x1, sp, #0x88
 e38:	mov	x0, x25
 e3c:	add	x3, x27, #0x4
 e40:	bl	0 <grub_crypto_hash>
 e44:	ldr	x0, [x25, #32]
 e48:	mov	x2, x27
 e4c:	add	x1, sp, #0x88
 e50:	madd	x0, x26, x0, x20
 e54:	bl	0 <grub_memmove>
 e58:	ldr	x0, [sp, #120]
 e5c:	add	x21, x21, #0x1
 e60:	add	x22, x22, x19
 e64:	cmp	x21, x0
 e68:	b.ne	ce0 <AF_merge+0x78>  // b.any
 e6c:	madd	x24, x19, x21, x24
 e70:	mov	x1, x20
 e74:	cbnz	x19, eb8 <AF_merge+0x250>
 e78:	mov	x0, x20
 e7c:	bl	0 <grub_free>
 e80:	mov	w0, #0x0                   	// #0
 e84:	ldp	x19, x20, [sp, #16]
 e88:	ldp	x21, x22, [sp, #32]
 e8c:	ldp	x23, x24, [sp, #48]
 e90:	ldp	x25, x26, [sp, #64]
 e94:	ldp	x27, x28, [sp, #80]
 e98:	ldp	x29, x30, [sp], #272
 e9c:	ret
 ea0:	ldrb	w0, [x24], #1
 ea4:	subs	x19, x19, #0x1
 ea8:	ldrb	w2, [x1], #1
 eac:	eor	w0, w0, w2
 eb0:	strb	w0, [x28], #1
 eb4:	b.eq	e78 <AF_merge+0x210>  // b.none
 eb8:	orr	x3, x1, x24
 ebc:	orr	x3, x28, x3
 ec0:	ands	x3, x3, #0x7
 ec4:	b.ne	ea0 <AF_merge+0x238>  // b.any
 ec8:	cmp	x19, #0x7
 ecc:	b.ls	f10 <AF_merge+0x2a8>  // b.plast
 ed0:	sub	x5, x19, #0x8
 ed4:	mov	x0, #0x0                   	// #0
 ed8:	and	x5, x5, #0xfffffffffffffff8
 edc:	add	x5, x5, #0x8
 ee0:	ldr	x2, [x24, x0]
 ee4:	ldr	x4, [x1, x0]
 ee8:	eor	x2, x2, x4
 eec:	str	x2, [x28, x0]
 ef0:	add	x0, x0, #0x8
 ef4:	cmp	x5, x0
 ef8:	b.ne	ee0 <AF_merge+0x278>  // b.any
 efc:	add	x24, x24, x5
 f00:	add	x1, x1, x5
 f04:	add	x28, x28, x5
 f08:	ands	x19, x19, #0x7
 f0c:	b.eq	e78 <AF_merge+0x210>  // b.none
 f10:	ldrb	w0, [x24, x3]
 f14:	ldrb	w2, [x1, x3]
 f18:	eor	w0, w0, w2
 f1c:	strb	w0, [x28, x3]
 f20:	add	x3, x3, #0x1
 f24:	cmp	x3, x19
 f28:	b.eq	e78 <AF_merge+0x210>  // b.none
 f2c:	ldrb	w0, [x24, x3]
 f30:	ldrb	w2, [x1, x3]
 f34:	eor	w0, w0, w2
 f38:	strb	w0, [x28, x3]
 f3c:	add	x3, x3, #0x1
 f40:	cmp	x3, x19
 f44:	b.ne	f10 <AF_merge+0x2a8>  // b.any
 f48:	b	e78 <AF_merge+0x210>
 f4c:	mov	x26, #0x0                   	// #0
 f50:	b	dfc <AF_merge+0x194>
 f54:	mov	w0, #0xa                   	// #10
 f58:	ldp	x25, x26, [sp, #64]
 f5c:	ldp	x29, x30, [sp], #272
 f60:	ret
 f64:	mov	w0, #0x22                  	// #34
 f68:	ldp	x19, x20, [sp, #16]
 f6c:	ldp	x21, x22, [sp, #32]
 f70:	ldp	x23, x24, [sp, #48]
 f74:	ldp	x25, x26, [sp, #64]
 f78:	ldp	x27, x28, [sp, #80]
 f7c:	ldp	x29, x30, [sp], #272
 f80:	ret
