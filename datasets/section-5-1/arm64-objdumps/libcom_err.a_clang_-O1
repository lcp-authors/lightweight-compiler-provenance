In archive /home/anony/Documents/anonymous--anonymous/pizzolotto-binaries//libcom_err.a_clang_-O1:

error_message.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <setup_et_lock>:
   0:	stp	x29, x30, [sp, #-32]!
   4:	adrp	x0, 0 <setup_et_lock>
   8:	add	x0, x0, #0x0
   c:	mov	w2, #0x1                   	// #1
  10:	mov	w1, wzr
  14:	str	x19, [sp, #16]
  18:	mov	x29, sp
  1c:	mov	w19, #0x1                   	// #1
  20:	bl	0 <sem_init>
  24:	adrp	x8, 0 <setup_et_lock>
  28:	strb	w19, [x8]
  2c:	ldr	x19, [sp, #16]
  30:	ldp	x29, x30, [sp], #32
  34:	ret

0000000000000038 <fini_et_lock>:
  38:	stp	x29, x30, [sp, #-16]!
  3c:	adrp	x0, 0 <setup_et_lock>
  40:	add	x0, x0, #0x0
  44:	mov	x29, sp
  48:	bl	0 <sem_destroy>
  4c:	adrp	x8, 0 <setup_et_lock>
  50:	strb	wzr, [x8]
  54:	ldp	x29, x30, [sp], #16
  58:	ret

000000000000005c <et_list_lock>:
  5c:	stp	x29, x30, [sp, #-16]!
  60:	adrp	x8, 0 <setup_et_lock>
  64:	ldrb	w8, [x8]
  68:	mov	x29, sp
  6c:	tbnz	w8, #0, 74 <et_list_lock+0x18>
  70:	bl	0 <setup_et_lock>
  74:	adrp	x0, 0 <setup_et_lock>
  78:	add	x0, x0, #0x0
  7c:	bl	0 <sem_wait>
  80:	ldp	x29, x30, [sp], #16
  84:	ret

0000000000000088 <et_list_unlock>:
  88:	stp	x29, x30, [sp, #-16]!
  8c:	adrp	x8, 0 <setup_et_lock>
  90:	ldrb	w8, [x8]
  94:	mov	x29, sp
  98:	cmp	w8, #0x1
  9c:	b.ne	b4 <et_list_unlock+0x2c>  // b.any
  a0:	adrp	x0, 0 <setup_et_lock>
  a4:	add	x0, x0, #0x0
  a8:	bl	0 <sem_post>
  ac:	ldp	x29, x30, [sp], #16
  b0:	ret
  b4:	mov	w0, wzr
  b8:	ldp	x29, x30, [sp], #16
  bc:	ret

00000000000000c0 <set_com_err_gettext>:
  c0:	adrp	x9, 0 <setup_et_lock>
  c4:	ldr	x8, [x9]
  c8:	str	x0, [x9]
  cc:	mov	x0, x8
  d0:	ret

00000000000000d4 <error_message>:
  d4:	stp	x29, x30, [sp, #-48]!
  d8:	stp	x20, x19, [sp, #32]
  dc:	and	w19, w0, #0xff
  e0:	subs	x20, x0, x19
  e4:	stp	x22, x21, [sp, #16]
  e8:	mov	x29, sp
  ec:	b.eq	120 <error_message+0x4c>  // b.none
  f0:	bl	5c <et_list_lock>
  f4:	adrp	x8, 0 <setup_et_lock>
  f8:	ldr	x8, [x8]
  fc:	cbz	x8, 140 <error_message+0x6c>
 100:	ldr	x9, [x8, #8]
 104:	ldr	w10, [x9, #8]
 108:	eor	w10, w10, w20
 10c:	tst	x10, #0xffffff
 110:	b.eq	134 <error_message+0x60>  // b.none
 114:	ldr	x8, [x8]
 118:	cbnz	x8, 100 <error_message+0x2c>
 11c:	b	140 <error_message+0x6c>
 120:	mov	w0, w19
 124:	bl	0 <strerror>
 128:	mov	x21, x0
 12c:	cbnz	x0, 274 <error_message+0x1a0>
 130:	b	1a4 <error_message+0xd0>
 134:	ldr	w8, [x9, #16]
 138:	cmp	w8, w19
 13c:	b.gt	178 <error_message+0xa4>
 140:	adrp	x8, 8 <setup_et_lock+0x8>
 144:	ldr	x8, [x8]
 148:	cbz	x8, 1a0 <error_message+0xcc>
 14c:	ldr	x9, [x8, #8]
 150:	ldr	w10, [x9, #8]
 154:	eor	w10, w10, w20
 158:	tst	x10, #0xffffff
 15c:	b.eq	16c <error_message+0x98>  // b.none
 160:	ldr	x8, [x8]
 164:	cbnz	x8, 14c <error_message+0x78>
 168:	b	1a0 <error_message+0xcc>
 16c:	ldr	w8, [x9, #16]
 170:	cmp	w8, w19
 174:	b.le	1a0 <error_message+0xcc>
 178:	ldr	x8, [x9]
 17c:	ldr	x21, [x8, x19, lsl #3]
 180:	bl	88 <et_list_unlock>
 184:	adrp	x8, 0 <setup_et_lock>
 188:	ldr	x8, [x8]
 18c:	cbz	x8, 274 <error_message+0x1a0>
 190:	mov	x0, x21
 194:	blr	x8
 198:	mov	x21, x0
 19c:	b	274 <error_message+0x1a0>
 1a0:	bl	88 <et_list_unlock>
 1a4:	adrp	x8, 0 <setup_et_lock>
 1a8:	add	x8, x8, #0x0
 1ac:	ldr	x9, [x8]
 1b0:	ldur	x8, [x8, #6]
 1b4:	mrs	x22, tpidr_el0
 1b8:	add	x10, x22, #0x0, lsl #12
 1bc:	add	x21, x10, #0x0
 1c0:	str	x9, [x21]
 1c4:	stur	x8, [x21, #6]
 1c8:	cbz	x20, 1ec <error_message+0x118>
 1cc:	mov	x0, x20
 1d0:	bl	0 <error_table_name>
 1d4:	mov	x1, x0
 1d8:	mov	x0, x21
 1dc:	bl	0 <strcat>
 1e0:	bl	0 <strlen>
 1e4:	mov	w8, #0x20                  	// #32
 1e8:	strh	w8, [x21, x0]
 1ec:	ldrb	w8, [x21], #1
 1f0:	cbnz	w8, 1ec <error_message+0x118>
 1f4:	cmp	w19, #0x64
 1f8:	sub	x8, x21, #0x1
 1fc:	b.cc	230 <error_message+0x15c>  // b.lo, b.ul, b.last
 200:	mov	w9, #0x851f                	// #34079
 204:	movk	w9, #0x51eb, lsl #16
 208:	umull	x9, w19, w9
 20c:	lsr	x9, x9, #37
 210:	mov	w10, #0x64                  	// #100
 214:	orr	w11, w9, #0x30
 218:	msub	w19, w9, w10, w19
 21c:	strb	w11, [x8]
 220:	mov	w9, #0x1                   	// #1
 224:	mov	x8, x21
 228:	tbz	w9, #0, 238 <error_message+0x164>
 22c:	b	240 <error_message+0x16c>
 230:	mov	w9, wzr
 234:	tbnz	w9, #0, 240 <error_message+0x16c>
 238:	cmp	w19, #0xa
 23c:	b.cc	260 <error_message+0x18c>  // b.lo, b.ul, b.last
 240:	mov	w9, #0xcccd                	// #52429
 244:	movk	w9, #0xcccc, lsl #16
 248:	umull	x9, w19, w9
 24c:	lsr	x9, x9, #35
 250:	mov	w10, #0xa                   	// #10
 254:	add	w11, w9, #0x30
 258:	strb	w11, [x8], #1
 25c:	msub	w19, w9, w10, w19
 260:	add	x10, x22, #0x0, lsl #12
 264:	add	w9, w19, #0x30
 268:	add	x21, x10, #0x0
 26c:	strb	wzr, [x8, #1]
 270:	strb	w9, [x8]
 274:	mov	x0, x21
 278:	ldp	x20, x19, [sp, #32]
 27c:	ldp	x22, x21, [sp, #16]
 280:	ldp	x29, x30, [sp], #48
 284:	ret

0000000000000288 <add_error_table>:
 288:	stp	x29, x30, [sp, #-32]!
 28c:	stp	x20, x19, [sp, #16]
 290:	mov	x19, x0
 294:	mov	w0, #0x10                  	// #16
 298:	mov	x29, sp
 29c:	bl	0 <malloc>
 2a0:	cbz	x0, 2c4 <add_error_table+0x3c>
 2a4:	mov	x20, x0
 2a8:	bl	5c <et_list_lock>
 2ac:	cbz	w0, 2cc <add_error_table+0x44>
 2b0:	mov	x0, x20
 2b4:	bl	0 <free>
 2b8:	bl	0 <__errno_location>
 2bc:	ldrsw	x0, [x0]
 2c0:	b	31c <add_error_table+0x94>
 2c4:	mov	w0, #0xc                   	// #12
 2c8:	b	31c <add_error_table+0x94>
 2cc:	adrp	x8, 8 <setup_et_lock+0x8>
 2d0:	ldr	x9, [x8]
 2d4:	str	x20, [x8]
 2d8:	stp	x9, x19, [x20]
 2dc:	bl	328 <init_debug>
 2e0:	adrp	x8, 0 <setup_et_lock>
 2e4:	ldrb	w8, [x8]
 2e8:	tbz	w8, #0, 314 <add_error_table+0x8c>
 2ec:	adrp	x8, 0 <setup_et_lock>
 2f0:	ldr	x0, [x19, #8]
 2f4:	ldr	x20, [x8]
 2f8:	bl	0 <error_table_name>
 2fc:	adrp	x1, 0 <setup_et_lock>
 300:	mov	x2, x0
 304:	add	x1, x1, #0x0
 308:	mov	x0, x20
 30c:	mov	x3, x19
 310:	bl	0 <fprintf>
 314:	bl	88 <et_list_unlock>
 318:	mov	x0, xzr
 31c:	ldp	x20, x19, [sp, #16]
 320:	ldp	x29, x30, [sp], #32
 324:	ret

0000000000000328 <init_debug>:
 328:	stp	x29, x30, [sp, #-48]!
 32c:	adrp	x8, 0 <setup_et_lock>
 330:	ldrb	w8, [x8]
 334:	str	x21, [sp, #16]
 338:	stp	x20, x19, [sp, #32]
 33c:	mov	x29, sp
 340:	tbnz	w8, #7, 44c <init_debug+0x124>
 344:	adrp	x0, 0 <setup_et_lock>
 348:	add	x0, x0, #0x0
 34c:	bl	0 <getenv>
 350:	adrp	x20, 0 <setup_et_lock>
 354:	cbz	x0, 384 <init_debug+0x5c>
 358:	add	x1, x29, #0x18
 35c:	mov	w2, wzr
 360:	bl	0 <strtoul>
 364:	ldr	x8, [x29, #24]
 368:	str	w0, [x20]
 36c:	ldrb	w8, [x8]
 370:	cbnz	w8, 380 <init_debug+0x58>
 374:	bl	0 <__errno_location>
 378:	ldr	w8, [x0]
 37c:	cbz	w8, 384 <init_debug+0x5c>
 380:	str	wzr, [x20]
 384:	ldr	w8, [x20]
 388:	orr	w8, w8, #0x8000
 38c:	cmp	w8, #0x8, lsl #12
 390:	str	w8, [x20]
 394:	b.eq	44c <init_debug+0x124>  // b.none
 398:	bl	58c <safe_getenv>
 39c:	adrp	x21, 0 <setup_et_lock>
 3a0:	cbz	x0, 3b4 <init_debug+0x8c>
 3a4:	adrp	x1, 0 <setup_et_lock>
 3a8:	add	x1, x1, #0x0
 3ac:	bl	0 <fopen>
 3b0:	str	x0, [x21]
 3b4:	ldr	x8, [x21]
 3b8:	cbz	x8, 3c8 <init_debug+0xa0>
 3bc:	ldr	x0, [x21]
 3c0:	cbnz	x0, 3e8 <init_debug+0xc0>
 3c4:	b	444 <init_debug+0x11c>
 3c8:	adrp	x0, 0 <setup_et_lock>
 3cc:	adrp	x1, 0 <setup_et_lock>
 3d0:	add	x0, x0, #0x0
 3d4:	add	x1, x1, #0x0
 3d8:	bl	0 <fopen>
 3dc:	str	x0, [x21]
 3e0:	ldr	x0, [x21]
 3e4:	cbz	x0, 444 <init_debug+0x11c>
 3e8:	bl	0 <fileno>
 3ec:	tbnz	w0, #31, 44c <init_debug+0x124>
 3f0:	mov	w1, #0x1                   	// #1
 3f4:	mov	w19, w0
 3f8:	bl	0 <fcntl>
 3fc:	tbnz	w0, #31, 410 <init_debug+0xe8>
 400:	orr	w2, w0, #0x1
 404:	mov	w1, #0x2                   	// #2
 408:	mov	w0, w19
 40c:	bl	0 <fcntl>
 410:	tbz	w0, #31, 44c <init_debug+0x124>
 414:	ldr	x19, [x21]
 418:	bl	0 <__errno_location>
 41c:	ldr	w0, [x0]
 420:	bl	0 <strerror>
 424:	adrp	x1, 0 <setup_et_lock>
 428:	mov	x2, x0
 42c:	add	x1, x1, #0x0
 430:	mov	x0, x19
 434:	bl	0 <fprintf>
 438:	ldr	x0, [x21]
 43c:	bl	0 <fclose>
 440:	str	xzr, [x21]
 444:	mov	w8, #0x8000                	// #32768
 448:	str	w8, [x20]
 44c:	ldp	x20, x19, [sp, #32]
 450:	ldr	x21, [sp, #16]
 454:	ldp	x29, x30, [sp], #48
 458:	ret

000000000000045c <remove_error_table>:
 45c:	stp	x29, x30, [sp, #-32]!
 460:	stp	x20, x19, [sp, #16]
 464:	mov	x29, sp
 468:	mov	x19, x0
 46c:	bl	5c <et_list_lock>
 470:	cbz	w0, 47c <remove_error_table+0x20>
 474:	mov	w19, #0x2                   	// #2
 478:	b	564 <remove_error_table+0x108>
 47c:	adrp	x8, 8 <setup_et_lock+0x8>
 480:	ldr	x20, [x8]
 484:	bl	328 <init_debug>
 488:	cbz	x20, 528 <remove_error_table+0xcc>
 48c:	ldr	x9, [x20, #8]
 490:	ldr	x8, [x19, #8]
 494:	ldr	x9, [x9, #8]
 498:	cmp	x9, x8
 49c:	b.ne	4a8 <remove_error_table+0x4c>  // b.any
 4a0:	mov	x10, xzr
 4a4:	b	4cc <remove_error_table+0x70>
 4a8:	mov	x9, x20
 4ac:	ldr	x20, [x9]
 4b0:	cbz	x20, 528 <remove_error_table+0xcc>
 4b4:	ldr	x10, [x20, #8]
 4b8:	ldr	x10, [x10, #8]
 4bc:	cmp	x10, x8
 4c0:	mov	x10, x9
 4c4:	mov	x9, x20
 4c8:	b.ne	4ac <remove_error_table+0x50>  // b.any
 4cc:	ldr	x8, [x20]
 4d0:	adrp	x9, 8 <setup_et_lock+0x8>
 4d4:	add	x9, x9, #0x0
 4d8:	cmp	x10, #0x0
 4dc:	csel	x9, x9, x10, eq  // eq = none
 4e0:	mov	x0, x20
 4e4:	str	x8, [x9]
 4e8:	bl	0 <free>
 4ec:	adrp	x8, 0 <setup_et_lock>
 4f0:	ldrb	w8, [x8]
 4f4:	tbz	w8, #0, 520 <remove_error_table+0xc4>
 4f8:	adrp	x8, 0 <setup_et_lock>
 4fc:	ldr	x0, [x19, #8]
 500:	ldr	x20, [x8]
 504:	bl	0 <error_table_name>
 508:	adrp	x1, 0 <setup_et_lock>
 50c:	mov	x2, x0
 510:	add	x1, x1, #0x0
 514:	mov	x0, x20
 518:	mov	x3, x19
 51c:	bl	0 <fprintf>
 520:	mov	x19, xzr
 524:	b	560 <remove_error_table+0x104>
 528:	adrp	x8, 0 <setup_et_lock>
 52c:	ldrb	w8, [x8]
 530:	tbz	w8, #0, 55c <remove_error_table+0x100>
 534:	adrp	x8, 0 <setup_et_lock>
 538:	ldr	x0, [x19, #8]
 53c:	ldr	x20, [x8]
 540:	bl	0 <error_table_name>
 544:	adrp	x1, 0 <setup_et_lock>
 548:	mov	x2, x0
 54c:	add	x1, x1, #0x0
 550:	mov	x0, x20
 554:	mov	x3, x19
 558:	bl	0 <fprintf>
 55c:	mov	w19, #0x2                   	// #2
 560:	bl	88 <et_list_unlock>
 564:	mov	x0, x19
 568:	ldp	x20, x19, [sp, #16]
 56c:	ldp	x29, x30, [sp], #32
 570:	ret

0000000000000574 <add_to_error_table>:
 574:	stp	x29, x30, [sp, #-16]!
 578:	ldr	x0, [x0, #8]
 57c:	mov	x29, sp
 580:	bl	288 <add_error_table>
 584:	ldp	x29, x30, [sp], #16
 588:	ret

000000000000058c <safe_getenv>:
 58c:	stp	x29, x30, [sp, #-32]!
 590:	str	x19, [sp, #16]
 594:	mov	x29, sp
 598:	bl	0 <getuid>
 59c:	mov	w19, w0
 5a0:	bl	0 <geteuid>
 5a4:	cmp	w19, w0
 5a8:	b.ne	5ec <safe_getenv+0x60>  // b.any
 5ac:	bl	0 <getgid>
 5b0:	mov	w19, w0
 5b4:	bl	0 <getegid>
 5b8:	cmp	w19, w0
 5bc:	b.ne	5ec <safe_getenv+0x60>  // b.any
 5c0:	mov	w0, #0x3                   	// #3
 5c4:	mov	w1, wzr
 5c8:	mov	w2, wzr
 5cc:	mov	w3, wzr
 5d0:	mov	w4, wzr
 5d4:	bl	0 <prctl>
 5d8:	cbz	w0, 5ec <safe_getenv+0x60>
 5dc:	adrp	x0, 0 <setup_et_lock>
 5e0:	add	x0, x0, #0x0
 5e4:	bl	0 <secure_getenv>
 5e8:	b	5f0 <safe_getenv+0x64>
 5ec:	mov	x0, xzr
 5f0:	ldr	x19, [sp, #16]
 5f4:	ldp	x29, x30, [sp], #32
 5f8:	ret

et_name.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <error_table_name>:
   0:	adrp	x8, 0 <error_table_name>
   4:	adrp	x11, 0 <error_table_name>
   8:	ubfx	x9, x0, #8, #24
   c:	add	x8, x8, #0x0
  10:	mov	w10, #0x18                  	// #24
  14:	add	x11, x11, #0x0
  18:	b	28 <error_table_name+0x28>
  1c:	sub	x10, x10, #0x6
  20:	cmn	x10, #0x6
  24:	b.eq	44 <error_table_name+0x44>  // b.none
  28:	lsr	x12, x9, x10
  2c:	and	x12, x12, #0x3f
  30:	cbz	w12, 1c <error_table_name+0x1c>
  34:	add	x12, x12, x11
  38:	ldurb	w12, [x12, #-1]
  3c:	strb	w12, [x8], #1
  40:	b	1c <error_table_name+0x1c>
  44:	adrp	x0, 0 <error_table_name>
  48:	add	x0, x0, #0x0
  4c:	strb	wzr, [x8]
  50:	ret

init_et.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <init_error_table>:
   0:	stp	x29, x30, [sp, #-48]!
   4:	str	x21, [sp, #16]
   8:	mov	x21, x0
   c:	mov	w0, wzr
  10:	stp	x20, x19, [sp, #32]
  14:	mov	x29, sp
  18:	cbz	x21, 68 <init_error_table+0x68>
  1c:	mov	x20, x1
  20:	cbz	x1, 68 <init_error_table+0x68>
  24:	mov	w19, w2
  28:	cbz	w2, 68 <init_error_table+0x68>
  2c:	mov	w0, #0x28                  	// #40
  30:	bl	0 <malloc>
  34:	cbz	x0, 64 <init_error_table+0x64>
  38:	adrp	x10, 0 <_et_dynamic_list>
  3c:	ldr	x11, [x10]
  40:	mov	x8, x0
  44:	mov	x9, x8
  48:	mov	w0, wzr
  4c:	str	x21, [x9, #16]!
  50:	str	x20, [x8, #24]
  54:	str	w19, [x8, #32]
  58:	stp	x11, x9, [x8]
  5c:	str	x8, [x10]
  60:	b	68 <init_error_table+0x68>
  64:	mov	w0, #0xc                   	// #12
  68:	ldp	x20, x19, [sp, #32]
  6c:	ldr	x21, [sp, #16]
  70:	ldp	x29, x30, [sp], #48
  74:	ret

com_err.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <default_com_err_proc>:
   0:	sub	sp, sp, #0x80
   4:	stp	x24, x23, [sp, #80]
   8:	adrp	x24, 0 <stderr>
   c:	ldr	x8, [x24]
  10:	mov	x23, x0
  14:	stp	x29, x30, [sp, #64]
  18:	stp	x22, x21, [sp, #96]
  1c:	mov	x0, x8
  20:	stp	x20, x19, [sp, #112]
  24:	add	x29, sp, #0x40
  28:	mov	x21, x3
  2c:	mov	x20, x2
  30:	mov	x22, x1
  34:	bl	0 <fileno>
  38:	mov	w19, w0
  3c:	cbnz	x23, c8 <default_com_err_proc+0xc8>
  40:	cbnz	x22, f0 <default_com_err_proc+0xf0>
  44:	cbz	x20, 60 <default_com_err_proc+0x60>
  48:	ldp	q1, q0, [x21]
  4c:	ldr	x0, [x24]
  50:	mov	x2, sp
  54:	mov	x1, x20
  58:	stp	q1, q0, [sp]
  5c:	bl	0 <vfprintf>
  60:	mov	w0, w19
  64:	bl	0 <isatty>
  68:	cbz	w0, 9c <default_com_err_proc+0x9c>
  6c:	mov	x1, sp
  70:	mov	w0, w19
  74:	bl	0 <tcgetattr>
  78:	cbnz	w0, 90 <default_com_err_proc+0x90>
  7c:	ldr	w8, [sp, #4]
  80:	mov	w9, #0x5                   	// #5
  84:	and	w8, w8, w9
  88:	cmp	w8, #0x5
  8c:	b.eq	9c <default_com_err_proc+0x9c>  // b.none
  90:	ldr	x1, [x24]
  94:	mov	w0, #0xd                   	// #13
  98:	bl	0 <fputc>
  9c:	ldr	x1, [x24]
  a0:	mov	w0, #0xa                   	// #10
  a4:	bl	0 <fputc>
  a8:	ldr	x0, [x24]
  ac:	bl	0 <fflush>
  b0:	ldp	x20, x19, [sp, #112]
  b4:	ldp	x22, x21, [sp, #96]
  b8:	ldp	x24, x23, [sp, #80]
  bc:	ldp	x29, x30, [sp, #64]
  c0:	add	sp, sp, #0x80
  c4:	ret
  c8:	ldr	x1, [x24]
  cc:	mov	x0, x23
  d0:	bl	0 <fputs>
  d4:	ldr	x3, [x24]
  d8:	adrp	x0, 0 <default_com_err_proc>
  dc:	add	x0, x0, #0x0
  e0:	mov	w1, #0x2                   	// #2
  e4:	mov	w2, #0x1                   	// #1
  e8:	bl	0 <fwrite>
  ec:	cbz	x22, 44 <default_com_err_proc+0x44>
  f0:	mov	x0, x22
  f4:	bl	0 <error_message>
  f8:	ldr	x1, [x24]
  fc:	bl	0 <fputs>
 100:	ldr	x1, [x24]
 104:	mov	w0, #0x20                  	// #32
 108:	bl	0 <fputc>
 10c:	cbnz	x20, 48 <default_com_err_proc+0x48>
 110:	b	60 <default_com_err_proc+0x60>

0000000000000114 <com_err_va>:
 114:	sub	sp, sp, #0x30
 118:	stp	x29, x30, [sp, #32]
 11c:	adrp	x8, 0 <default_com_err_proc>
 120:	ldp	q0, q1, [x3]
 124:	ldr	x8, [x8]
 128:	mov	x3, sp
 12c:	add	x29, sp, #0x20
 130:	stp	q0, q1, [sp]
 134:	blr	x8
 138:	ldp	x29, x30, [sp, #32]
 13c:	add	sp, sp, #0x30
 140:	ret

0000000000000144 <com_err>:
 144:	sub	sp, sp, #0x100
 148:	adrp	x8, 0 <default_com_err_proc>
 14c:	ldr	x9, [x8]
 150:	stp	x29, x30, [sp, #240]
 154:	add	x29, sp, #0xf0
 158:	stp	x3, x4, [x29, #-104]
 15c:	stp	x5, x6, [x29, #-88]
 160:	stur	x7, [x29, #-72]
 164:	stp	q1, q2, [sp, #16]
 168:	str	q3, [sp, #48]
 16c:	str	q0, [sp]
 170:	stp	q4, q5, [sp, #64]
 174:	stp	q6, q7, [sp, #96]
 178:	cbnz	x9, 188 <com_err+0x44>
 17c:	adrp	x9, 0 <default_com_err_proc>
 180:	add	x9, x9, #0x0
 184:	str	x9, [x8]
 188:	mov	x8, #0xffffffffffffffd8    	// #-40
 18c:	mov	x10, sp
 190:	sub	x11, x29, #0x68
 194:	movk	x8, #0xff80, lsl #32
 198:	add	x9, x29, #0x10
 19c:	add	x10, x10, #0x80
 1a0:	add	x11, x11, #0x28
 1a4:	stp	x10, x8, [x29, #-16]
 1a8:	stp	x9, x11, [x29, #-32]
 1ac:	ldp	q0, q1, [x29, #-32]
 1b0:	sub	x3, x29, #0x40
 1b4:	stp	q0, q1, [x29, #-64]
 1b8:	bl	114 <com_err_va>
 1bc:	ldp	x29, x30, [sp, #240]
 1c0:	add	sp, sp, #0x100
 1c4:	ret

00000000000001c8 <set_com_err_hook>:
 1c8:	adrp	x9, 0 <default_com_err_proc>
 1cc:	ldr	x8, [x9]
 1d0:	adrp	x10, 0 <default_com_err_proc>
 1d4:	add	x10, x10, #0x0
 1d8:	cmp	x0, #0x0
 1dc:	csel	x10, x10, x0, eq  // eq = none
 1e0:	mov	x0, x8
 1e4:	str	x10, [x9]
 1e8:	ret

00000000000001ec <reset_com_err_hook>:
 1ec:	adrp	x8, 0 <default_com_err_proc>
 1f0:	ldr	x0, [x8]
 1f4:	adrp	x9, 0 <default_com_err_proc>
 1f8:	add	x9, x9, #0x0
 1fc:	str	x9, [x8]
 200:	ret

com_right.o:     file format elf64-littleaarch64


Disassembly of section .text:

0000000000000000 <com_right>:
   0:	cbnz	x0, 10 <com_right+0x10>
   4:	ret
   8:	ldr	x0, [x0]
   c:	cbz	x0, 4 <com_right+0x4>
  10:	ldr	x8, [x0, #8]
  14:	ldr	x9, [x8, #8]
  18:	cmp	x9, x1
  1c:	b.gt	8 <com_right+0x8>
  20:	ldrsw	x10, [x8, #16]
  24:	add	x10, x9, x10
  28:	cmp	x10, x1
  2c:	b.le	8 <com_right+0x8>
  30:	ldr	x8, [x8]
  34:	sub	x9, x1, x9
  38:	ldr	x0, [x8, x9, lsl #3]
  3c:	ret

0000000000000040 <com_right_r>:
  40:	stp	x29, x30, [sp, #-32]!
  44:	stp	x20, x19, [sp, #16]
  48:	mov	x29, sp
  4c:	cbz	x0, a8 <com_right_r+0x68>
  50:	mov	x20, x3
  54:	mov	x19, x2
  58:	b	64 <com_right_r+0x24>
  5c:	ldr	x0, [x0]
  60:	cbz	x0, a8 <com_right_r+0x68>
  64:	ldr	x8, [x0, #8]
  68:	ldr	x9, [x8, #8]
  6c:	cmp	x9, x1
  70:	b.gt	5c <com_right_r+0x1c>
  74:	ldrsw	x10, [x8, #16]
  78:	add	x10, x9, x10
  7c:	cmp	x10, x1
  80:	b.le	5c <com_right_r+0x1c>
  84:	ldr	x8, [x8]
  88:	sub	x9, x1, x9
  8c:	mov	x0, x19
  90:	mov	x2, x20
  94:	ldr	x1, [x8, x9, lsl #3]
  98:	bl	0 <strncpy>
  9c:	add	x8, x20, x19
  a0:	sturb	wzr, [x8, #-1]
  a4:	b	ac <com_right_r+0x6c>
  a8:	mov	x19, xzr
  ac:	mov	x0, x19
  b0:	ldp	x20, x19, [sp, #16]
  b4:	ldp	x29, x30, [sp], #32
  b8:	ret

00000000000000bc <initialize_error_table_r>:
  bc:	stp	x29, x30, [sp, #-48]!
  c0:	stp	x22, x21, [sp, #16]
  c4:	stp	x20, x19, [sp, #32]
  c8:	ldr	x8, [x0]
  cc:	mov	x19, x3
  d0:	mov	w20, w2
  d4:	mov	x21, x0
  d8:	mov	x22, x1
  dc:	mov	x29, sp
  e0:	cbz	x8, 100 <initialize_error_table_r+0x44>
  e4:	mov	x21, x8
  e8:	ldr	x8, [x8, #8]
  ec:	ldr	x8, [x8]
  f0:	cmp	x8, x22
  f4:	b.eq	124 <initialize_error_table_r+0x68>  // b.none
  f8:	ldr	x8, [x21]
  fc:	cbnz	x8, e4 <initialize_error_table_r+0x28>
 100:	mov	w0, #0x28                  	// #40
 104:	bl	0 <malloc>
 108:	cbz	x0, 124 <initialize_error_table_r+0x68>
 10c:	mov	x8, x0
 110:	str	x22, [x8, #16]!
 114:	str	w20, [x0, #32]
 118:	str	x19, [x0, #24]
 11c:	stp	xzr, x8, [x0]
 120:	str	x0, [x21]
 124:	ldp	x20, x19, [sp, #32]
 128:	ldp	x22, x21, [sp, #16]
 12c:	ldp	x29, x30, [sp], #48
 130:	ret

0000000000000134 <free_error_table>:
 134:	stp	x29, x30, [sp, #-32]!
 138:	str	x19, [sp, #16]
 13c:	mov	x29, sp
 140:	cbz	x0, 154 <free_error_table+0x20>
 144:	ldr	x19, [x0]
 148:	bl	0 <free>
 14c:	mov	x0, x19
 150:	cbnz	x19, 144 <free_error_table+0x10>
 154:	ldr	x19, [sp, #16]
 158:	ldp	x29, x30, [sp], #32
 15c:	ret
